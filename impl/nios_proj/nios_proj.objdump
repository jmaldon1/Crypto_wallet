
nios_proj.elf:     file format elf32-littlenios2
nios_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000244

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00003974 memsz 0x00003974 flags r-x
    LOAD off    0x00004994 vaddr 0x02003994 paddr 0x02004ca8 align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00005fbc vaddr 0x02005fbc paddr 0x02005fbc align 2**12
         filesz 0x00000000 memsz 0x0000013c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000035cc  02000244  02000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000184  02003810  02003810  00004810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  02003994  02004ca8  00004994  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000013c  02005fbc  02005fbc  00005fbc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  020060f8  020060f8  00005ca8  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  04008000  04008000  00005ca8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00005ca8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000007b8  00000000  00000000  00005cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000af9f  00000000  00000000  00006488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003c90  00000000  00000000  00011427  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004101  00000000  00000000  000150b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000eb4  00000000  00000000  000191b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002271  00000000  00000000  0001a06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000028a8  00000000  00000000  0001c2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0001eb88  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000004b0  00000000  00000000  0001ebb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00020fcd  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00020fd0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00020fd3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00020fd4  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00020fd5  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00020fd9  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00020fdd  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00020fe1  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00020fea  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00020ff3  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00020ffc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003d  00000000  00000000  00021007  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003efd2  00000000  00000000  00021044  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000244 l    d  .text	00000000 .text
02003810 l    d  .rodata	00000000 .rodata
02003994 l    d  .rwdata	00000000 .rwdata
02005fbc l    d  .bss	00000000 .bss
020060f8 l    d  .sdram	00000000 .sdram
04008000 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Class2018/Documents/Projects/Crypto_wallet/impl/nios_proj_bsp//obj/HAL/src/crt0.o
0200028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 rand.c
02005fbc l     O .bss	00000004 initialized.3045
00000000 l    df *ABS*	00000000 wallet_main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
02005fc0 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
02000634 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
02003994 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
0200112c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
02001438 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200156c l     F .text	00000034 alt_dev_reg
02003a74 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02001848 l     F .text	0000020c altera_avalon_jtag_uart_irq
02001a54 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
020021b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0200230c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02002338 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
020027ac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
020028ec l     F .text	0000003c alt_get_errno
02002928 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
02005ff4 g     O .bss	00000004 alt_instruction_exception_handler
02001218 g     F .text	0000007c alt_main
020004c0 g     F .text	00000080 _puts_r
02005ff8 g     O .bss	00000100 alt_irq
02004ca8 g       *ABS*	00000000 __flash_rwdata_start
02000c98 g     F .text	00000054 _gettimeofday_r
02000474 g     F .text	0000004c printf
02002ba4 g     F .text	00000024 altera_nios2_gen2_irq_init
02000000 g     F .entry	0000001c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02005fc8 g     O .bss	00000004 errno
02005fe0 g     O .bss	00000004 alt_argv
0200cc7c g       *ABS*	00000000 _gp
02004afc g     O .rwdata	00000180 alt_fd_list
02002bc8 g     F .text	00000090 alt_find_dev
02002f94 g     F .text	00000028 memcpy
02002870 g     F .text	0000007c alt_io_redirect
02003810 g       *ABS*	00000000 __DTOR_END__
02000540 g     F .text	00000014 puts
02002e94 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02001c4c g     F .text	0000021c altera_avalon_jtag_uart_read
02000438 g     F .text	0000003c _printf_r
02000e9c g     F .text	00000064 .hidden __udivsi3
02005fcc g     O .bss	00000008 alt_timezone
02002e04 g     F .text	00000090 alt_icache_flush
02004c9c g     O .rwdata	00000004 alt_max_fd
020032a4 g     F .text	00000538 .hidden __umoddi3
02004c7c g     O .rwdata	00000004 _global_impure_ptr
020060f8 g       *ABS*	00000000 __bss_end
020026bc g     F .text	000000f0 alt_iic_isr_register
02001330 g     F .text	00000108 alt_tick
02002670 g     F .text	0000004c alt_ic_irq_enabled
02001294 g     F .text	0000009c alt_alarm_stop
02005ff0 g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d4 alt_irq_handler
02004ad4 g     O .rwdata	00000028 alt_dev_null
020022c4 g     F .text	00000048 alt_dcache_flush_all
02004ca8 g       *ABS*	00000000 __ram_rwdata_end
02004c94 g     O .rwdata	00000008 alt_dev_list
02001474 g     F .text	000000f8 write
02003994 g       *ABS*	00000000 __ram_rodata_end
02000f00 g     F .text	00000058 .hidden __umodsi3
020060f8 g       *ABS*	00000000 end
02000314  w    F .text	0000008c random_buffer
02001788 g     F .text	000000c0 altera_avalon_jtag_uart_init
020001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
02003810 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02001e68 g     F .text	00000224 altera_avalon_jtag_uart_write
020006a0 g     F .text	00000524 ___vfprintf_internal_r
02003114 g     F .text	00000190 __call_exitprocs
02000244 g     F .text	0000004c _start
02005fe8 g     O .bss	00000004 _alt_tick_rate
02000568 g     F .text	00000060 rand
02005fec g     O .bss	00000004 _alt_nticks
020015d8 g     F .text	0000004c alt_sys_init
02002fbc g     F .text	00000158 __register_exitproc
02001af4 g     F .text	00000068 altera_avalon_jtag_uart_close
02003994 g       *ABS*	00000000 __ram_rwdata_start
02003810 g       *ABS*	00000000 __ram_rodata_start
02001624 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02002d60 g     F .text	000000a4 alt_get_fd
02002f64 g     F .text	00000030 memcmp
020016e4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
020060f8 g       *ABS*	00000000 __alt_stack_base
02001734 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02002c58 g     F .text	00000108 alt_find_file
02000290 g     F .text	00000084 random32
02002374 g     F .text	000000a4 alt_dev_llist_insert
02000be0 g     F .text	000000b8 __sfvwrite_small_dev
02000f58 g     F .text	000001d4 gettimeofday
02005fbc g       *ABS*	00000000 __bss_start
020003a0 g     F .text	00000098 main
02005fe4 g     O .bss	00000004 alt_envp
02001684 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02000554 g     F .text	00000014 srand
020005e4 g     F .text	00000050 time
02004ca0 g     O .rwdata	00000004 alt_errno
02000da4 g     F .text	00000084 .hidden __divsi3
02003810 g       *ABS*	00000000 __CTOR_END__
02003810 g       *ABS*	00000000 __flash_rodata_start
02003810 g       *ABS*	00000000 __DTOR_LIST__
020015a0 g     F .text	00000038 alt_irq_init
02002b40 g     F .text	00000064 alt_release_fd
02003892 g     O .rodata	00000100 .hidden __clz_tab
02002f30 g     F .text	00000014 atexit
02000cec g     F .text	00000058 _write_r
02004c80 g     O .rwdata	00000004 _impure_ptr
02005fdc g     O .bss	00000004 alt_argc
02002478 g     F .text	00000060 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
02004c8c g     O .rwdata	00000008 alt_fs_list
02005fd4 g     O .bss	00000008 alt_resettime
02000020 g       *ABS*	00000000 __ram_exceptions_start
04008000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0200250c g     F .text	00000050 alt_ic_isr_register
02004ca8 g       *ABS*	00000000 _edata
020060f8 g       *ABS*	00000000 _end
02000244 g       *ABS*	00000000 __ram_exceptions_end
02001b5c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
020025e4 g     F .text	0000008c alt_ic_irq_disable
02002f44 g     F .text	00000020 exit
02000e28 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02000000 g       *ABS*	00000000 __alt_mem_sdram
020037dc g     F .text	00000034 _exit
0200208c g     F .text	0000012c alt_alarm_start
02000d44 g     F .text	00000060 .hidden __muldi3
020005c8 g     F .text	0000001c strlen
020029ec g     F .text	00000154 open
020024d8 g     F .text	00000034 alt_icache_flush_all
02004ca4 g     O .rwdata	00000004 alt_priority_mask
0200255c g     F .text	00000088 alt_ic_irq_enable
02000bc4 g     F .text	0000001c __vfprintf_internal
02004c84 g     O .rwdata	00000008 alt_alarm_list
02002418 g     F .text	00000060 _do_ctors
020021f4 g     F .text	000000d0 close
02001194 g     F .text	00000084 alt_load



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__alt_mem_onchip_memory2+0xfdff8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409114 	ori	at,at,580
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram-0x2000000>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00808034 	movhi	r2,512
 2000140:	1097fe04 	addi	r2,r2,24568
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00808034 	movhi	r2,512
 2000158:	1097fe04 	addi	r2,r2,24568
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <__alt_mem_onchip_memory2+0xfdff812c>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <__alt_mem_onchip_memory2+0xfdff8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e4:	000531fa 	rdctl	r2,exception
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001ec:	e0bffd17 	ldw	r2,-12(fp)
 20001f0:	10801f0c 	andi	r2,r2,124
 20001f4:	1004d0ba 	srli	r2,r2,2
 20001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20001fc:	0005333a 	rdctl	r2,badaddr
 2000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000204:	d0a4de17 	ldw	r2,-27784(gp)
 2000208:	10000726 	beq	r2,zero,2000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 200020c:	d0a4de17 	ldw	r2,-27784(gp)
 2000210:	e0fffd17 	ldw	r3,-12(fp)
 2000214:	e1bffe17 	ldw	r6,-8(fp)
 2000218:	e17fff17 	ldw	r5,-4(fp)
 200021c:	1809883a 	mov	r4,r3
 2000220:	103ee83a 	callr	r2
 2000224:	00000206 	br	2000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 200022c:	0005883a 	mov	r2,zero
}
 2000230:	e037883a 	mov	sp,fp
 2000234:	dfc00117 	ldw	ra,4(sp)
 2000238:	df000017 	ldw	fp,0(sp)
 200023c:	dec00204 	addi	sp,sp,8
 2000240:	f800283a 	ret

Disassembly of section .text:

02000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 2000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 200024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000250:	00bffd16 	blt	zero,r2,2000248 <__alt_mem_onchip_memory2+0xfdff8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 200025c:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 2000260:	d6b31f14 	ori	gp,gp,52348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000264:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000268:	1097ef14 	ori	r2,r2,24508

    movhi r3, %hi(__bss_end)
 200026c:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 2000270:	18d83e14 	ori	r3,r3,24824

    beq r2, r3, 1f
 2000274:	10c00326 	beq	r2,r3,2000284 <_start+0x40>

0:
    stw zero, (r2)
 2000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 200027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000280:	10fffd36 	bltu	r2,r3,2000278 <__alt_mem_onchip_memory2+0xfdff8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000284:	20011940 	call	2001194 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000288:	20012180 	call	2001218 <alt_main>

0200028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 200028c:	003fff06 	br	200028c <__alt_mem_onchip_memory2+0xfdff828c>

02000290 <random32>:
#include "alt_types.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

alt_u32 random32(void)
{
 2000290:	defffd04 	addi	sp,sp,-12
 2000294:	dfc00215 	stw	ra,8(sp)
 2000298:	df000115 	stw	fp,4(sp)
 200029c:	dc000015 	stw	r16,0(sp)
 20002a0:	df000104 	addi	fp,sp,4
	static int initialized = 0;
	if (!initialized) {
 20002a4:	d0a4d017 	ldw	r2,-27840(gp)
 20002a8:	1000061e 	bne	r2,zero,20002c4 <random32+0x34>
		srand((unsigned)time(NULL));
 20002ac:	0009883a 	mov	r4,zero
 20002b0:	20005e40 	call	20005e4 <time>
 20002b4:	1009883a 	mov	r4,r2
 20002b8:	20005540 	call	2000554 <srand>
		initialized = 1;
 20002bc:	00800044 	movi	r2,1
 20002c0:	d0a4d015 	stw	r2,-27840(gp)
	}
	return ((rand() & 0xFF) | ((rand() & 0xFF) << 8) | ((rand() & 0xFF) << 16) | ((alt_u32) (rand() & 0xFF) << 24));
 20002c4:	20005680 	call	2000568 <rand>
 20002c8:	14003fcc 	andi	r16,r2,255
 20002cc:	20005680 	call	2000568 <rand>
 20002d0:	1004923a 	slli	r2,r2,8
 20002d4:	10bfffcc 	andi	r2,r2,65535
 20002d8:	80a0b03a 	or	r16,r16,r2
 20002dc:	20005680 	call	2000568 <rand>
 20002e0:	10803fcc 	andi	r2,r2,255
 20002e4:	1004943a 	slli	r2,r2,16
 20002e8:	8084b03a 	or	r2,r16,r2
 20002ec:	1021883a 	mov	r16,r2
 20002f0:	20005680 	call	2000568 <rand>
 20002f4:	1004963a 	slli	r2,r2,24
 20002f8:	8084b03a 	or	r2,r16,r2
}
 20002fc:	e6ffff04 	addi	sp,fp,-4
 2000300:	dfc00217 	ldw	ra,8(sp)
 2000304:	df000117 	ldw	fp,4(sp)
 2000308:	dc000017 	ldw	r16,0(sp)
 200030c:	dec00304 	addi	sp,sp,12
 2000310:	f800283a 	ret

02000314 <random_buffer>:
//

//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(alt_u8 *buf, size_t len)
{
 2000314:	defffa04 	addi	sp,sp,-24
 2000318:	dfc00515 	stw	ra,20(sp)
 200031c:	df000415 	stw	fp,16(sp)
 2000320:	df000404 	addi	fp,sp,16
 2000324:	e13ffe15 	stw	r4,-8(fp)
 2000328:	e17fff15 	stw	r5,-4(fp)
	alt_u32 r = 0;
 200032c:	e03ffc15 	stw	zero,-16(fp)
	for (size_t i = 0; i < len; i++) {
 2000330:	e03ffd15 	stw	zero,-12(fp)
 2000334:	00001106 	br	200037c <random_buffer+0x68>
		if (i % 4 == 0) {
 2000338:	e0bffd17 	ldw	r2,-12(fp)
 200033c:	108000cc 	andi	r2,r2,3
 2000340:	1000021e 	bne	r2,zero,200034c <random_buffer+0x38>
			r = random32();
 2000344:	20002900 	call	2000290 <random32>
 2000348:	e0bffc15 	stw	r2,-16(fp)
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
 200034c:	e0fffe17 	ldw	r3,-8(fp)
 2000350:	e0bffd17 	ldw	r2,-12(fp)
 2000354:	1885883a 	add	r2,r3,r2
 2000358:	e0fffd17 	ldw	r3,-12(fp)
 200035c:	18c000cc 	andi	r3,r3,3
 2000360:	180690fa 	slli	r3,r3,3
 2000364:	e13ffc17 	ldw	r4,-16(fp)
 2000368:	20c6d83a 	srl	r3,r4,r3
 200036c:	10c00005 	stb	r3,0(r2)
//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(alt_u8 *buf, size_t len)
{
	alt_u32 r = 0;
	for (size_t i = 0; i < len; i++) {
 2000370:	e0bffd17 	ldw	r2,-12(fp)
 2000374:	10800044 	addi	r2,r2,1
 2000378:	e0bffd15 	stw	r2,-12(fp)
 200037c:	e0fffd17 	ldw	r3,-12(fp)
 2000380:	e0bfff17 	ldw	r2,-4(fp)
 2000384:	18bfec36 	bltu	r3,r2,2000338 <__alt_mem_onchip_memory2+0xfdff8338>
		if (i % 4 == 0) {
			r = random32();
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
	}
}
 2000388:	0001883a 	nop
 200038c:	e037883a 	mov	sp,fp
 2000390:	dfc00117 	ldw	ra,4(sp)
 2000394:	df000017 	ldw	fp,0(sp)
 2000398:	dec00204 	addi	sp,sp,8
 200039c:	f800283a 	ret

020003a0 <main>:

#include "..\Include\rand.h"


int main()
{
 20003a0:	defffb04 	addi	sp,sp,-20
 20003a4:	dfc00415 	stw	ra,16(sp)
 20003a8:	df000315 	stw	fp,12(sp)
 20003ac:	df000304 	addi	fp,sp,12
	printf("Hello World from NIOS II\n");
 20003b0:	01008034 	movhi	r4,512
 20003b4:	210e0404 	addi	r4,r4,14352
 20003b8:	20005400 	call	2000540 <puts>
	printf("Software Version: %d.%d.%d\n\n", SOFTWARE_VERSION_MAJOR, SOFTWARE_VERSION_MINOR, SOFTWARE_VERSION_REV);
 20003bc:	000f883a 	mov	r7,zero
 20003c0:	000d883a 	mov	r6,zero
 20003c4:	01400044 	movi	r5,1
 20003c8:	01008034 	movhi	r4,512
 20003cc:	210e0b04 	addi	r4,r4,14380
 20003d0:	20004740 	call	2000474 <printf>
//		printf("%x", seed[i]);
//	}
//	printf("\n");


    int count = 0;
 20003d4:	e03ffd15 	stw	zero,-12(fp)
    int delay;
    alt_u32 rand_val;

    while(1) {
    	rand_val = random32();
 20003d8:	20002900 	call	2000290 <random32>
 20003dc:	e0bfff15 	stw	r2,-4(fp)
    	printf("Random value: 0x%08lx\n", rand_val);
 20003e0:	e17fff17 	ldw	r5,-4(fp)
 20003e4:	01008034 	movhi	r4,512
 20003e8:	210e1304 	addi	r4,r4,14412
 20003ec:	20004740 	call	2000474 <printf>
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0x01);
 20003f0:	e0bffd17 	ldw	r2,-12(fp)
 20003f4:	10c0004c 	andi	r3,r2,1
 20003f8:	00810074 	movhi	r2,1025
 20003fc:	10840004 	addi	r2,r2,4096
 2000400:	10c00035 	stwio	r3,0(r2)

        delay = 0;
 2000404:	e03ffe15 	stw	zero,-8(fp)
        while(delay < 200000)
 2000408:	00000306 	br	2000418 <main+0x78>
            delay++;
 200040c:	e0bffe17 	ldw	r2,-8(fp)
 2000410:	10800044 	addi	r2,r2,1
 2000414:	e0bffe15 	stw	r2,-8(fp)
    	rand_val = random32();
    	printf("Random value: 0x%08lx\n", rand_val);
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0x01);

        delay = 0;
        while(delay < 200000)
 2000418:	e0fffe17 	ldw	r3,-8(fp)
 200041c:	008000f4 	movhi	r2,3
 2000420:	10834fc4 	addi	r2,r2,3391
 2000424:	10fff90e 	bge	r2,r3,200040c <__alt_mem_onchip_memory2+0xfdff840c>
            delay++;
        count++;
 2000428:	e0bffd17 	ldw	r2,-12(fp)
 200042c:	10800044 	addi	r2,r2,1
 2000430:	e0bffd15 	stw	r2,-12(fp)
    }
 2000434:	003fe806 	br	20003d8 <__alt_mem_onchip_memory2+0xfdff83d8>

02000438 <_printf_r>:
 2000438:	defffd04 	addi	sp,sp,-12
 200043c:	dfc00015 	stw	ra,0(sp)
 2000440:	d9800115 	stw	r6,4(sp)
 2000444:	d9c00215 	stw	r7,8(sp)
 2000448:	20c00217 	ldw	r3,8(r4)
 200044c:	01808034 	movhi	r6,512
 2000450:	3182f804 	addi	r6,r6,3040
 2000454:	19800115 	stw	r6,4(r3)
 2000458:	280d883a 	mov	r6,r5
 200045c:	21400217 	ldw	r5,8(r4)
 2000460:	d9c00104 	addi	r7,sp,4
 2000464:	20006a00 	call	20006a0 <___vfprintf_internal_r>
 2000468:	dfc00017 	ldw	ra,0(sp)
 200046c:	dec00304 	addi	sp,sp,12
 2000470:	f800283a 	ret

02000474 <printf>:
 2000474:	defffc04 	addi	sp,sp,-16
 2000478:	dfc00015 	stw	ra,0(sp)
 200047c:	d9400115 	stw	r5,4(sp)
 2000480:	d9800215 	stw	r6,8(sp)
 2000484:	d9c00315 	stw	r7,12(sp)
 2000488:	00808034 	movhi	r2,512
 200048c:	10932004 	addi	r2,r2,19584
 2000490:	10800017 	ldw	r2,0(r2)
 2000494:	01408034 	movhi	r5,512
 2000498:	2942f804 	addi	r5,r5,3040
 200049c:	10c00217 	ldw	r3,8(r2)
 20004a0:	d9800104 	addi	r6,sp,4
 20004a4:	19400115 	stw	r5,4(r3)
 20004a8:	200b883a 	mov	r5,r4
 20004ac:	11000217 	ldw	r4,8(r2)
 20004b0:	2000bc40 	call	2000bc4 <__vfprintf_internal>
 20004b4:	dfc00017 	ldw	ra,0(sp)
 20004b8:	dec00404 	addi	sp,sp,16
 20004bc:	f800283a 	ret

020004c0 <_puts_r>:
 20004c0:	defffd04 	addi	sp,sp,-12
 20004c4:	dc000015 	stw	r16,0(sp)
 20004c8:	2021883a 	mov	r16,r4
 20004cc:	2809883a 	mov	r4,r5
 20004d0:	dfc00215 	stw	ra,8(sp)
 20004d4:	dc400115 	stw	r17,4(sp)
 20004d8:	2823883a 	mov	r17,r5
 20004dc:	20005c80 	call	20005c8 <strlen>
 20004e0:	81400217 	ldw	r5,8(r16)
 20004e4:	01008034 	movhi	r4,512
 20004e8:	2102f804 	addi	r4,r4,3040
 20004ec:	29000115 	stw	r4,4(r5)
 20004f0:	100f883a 	mov	r7,r2
 20004f4:	880d883a 	mov	r6,r17
 20004f8:	8009883a 	mov	r4,r16
 20004fc:	2000be00 	call	2000be0 <__sfvwrite_small_dev>
 2000500:	00ffffc4 	movi	r3,-1
 2000504:	10c00926 	beq	r2,r3,200052c <_puts_r+0x6c>
 2000508:	81400217 	ldw	r5,8(r16)
 200050c:	01808034 	movhi	r6,512
 2000510:	01c00044 	movi	r7,1
 2000514:	28800117 	ldw	r2,4(r5)
 2000518:	318e1904 	addi	r6,r6,14436
 200051c:	8009883a 	mov	r4,r16
 2000520:	103ee83a 	callr	r2
 2000524:	10bfffe0 	cmpeqi	r2,r2,-1
 2000528:	0085c83a 	sub	r2,zero,r2
 200052c:	dfc00217 	ldw	ra,8(sp)
 2000530:	dc400117 	ldw	r17,4(sp)
 2000534:	dc000017 	ldw	r16,0(sp)
 2000538:	dec00304 	addi	sp,sp,12
 200053c:	f800283a 	ret

02000540 <puts>:
 2000540:	00808034 	movhi	r2,512
 2000544:	10932004 	addi	r2,r2,19584
 2000548:	200b883a 	mov	r5,r4
 200054c:	11000017 	ldw	r4,0(r2)
 2000550:	20004c01 	jmpi	20004c0 <_puts_r>

02000554 <srand>:
 2000554:	00808034 	movhi	r2,512
 2000558:	1097f004 	addi	r2,r2,24512
 200055c:	11000015 	stw	r4,0(r2)
 2000560:	10000115 	stw	zero,4(r2)
 2000564:	f800283a 	ret

02000568 <rand>:
 2000568:	defffe04 	addi	sp,sp,-8
 200056c:	dc000015 	stw	r16,0(sp)
 2000570:	04008034 	movhi	r16,512
 2000574:	8417f004 	addi	r16,r16,24512
 2000578:	81000017 	ldw	r4,0(r16)
 200057c:	81400117 	ldw	r5,4(r16)
 2000580:	01932574 	movhi	r6,19605
 2000584:	01d614b4 	movhi	r7,22610
 2000588:	319fcb44 	addi	r6,r6,32557
 200058c:	39fd0b44 	addi	r7,r7,-3027
 2000590:	dfc00115 	stw	ra,4(sp)
 2000594:	2000d440 	call	2000d44 <__muldi3>
 2000598:	11000044 	addi	r4,r2,1
 200059c:	2085803a 	cmpltu	r2,r4,r2
 20005a0:	10c7883a 	add	r3,r2,r3
 20005a4:	00a00034 	movhi	r2,32768
 20005a8:	10bfffc4 	addi	r2,r2,-1
 20005ac:	1884703a 	and	r2,r3,r2
 20005b0:	81000015 	stw	r4,0(r16)
 20005b4:	80c00115 	stw	r3,4(r16)
 20005b8:	dfc00117 	ldw	ra,4(sp)
 20005bc:	dc000017 	ldw	r16,0(sp)
 20005c0:	dec00204 	addi	sp,sp,8
 20005c4:	f800283a 	ret

020005c8 <strlen>:
 20005c8:	2005883a 	mov	r2,r4
 20005cc:	10c00007 	ldb	r3,0(r2)
 20005d0:	18000226 	beq	r3,zero,20005dc <strlen+0x14>
 20005d4:	10800044 	addi	r2,r2,1
 20005d8:	003ffc06 	br	20005cc <__alt_mem_onchip_memory2+0xfdff85cc>
 20005dc:	1105c83a 	sub	r2,r2,r4
 20005e0:	f800283a 	ret

020005e4 <time>:
 20005e4:	00808034 	movhi	r2,512
 20005e8:	defffc04 	addi	sp,sp,-16
 20005ec:	10932004 	addi	r2,r2,19584
 20005f0:	dc000215 	stw	r16,8(sp)
 20005f4:	2021883a 	mov	r16,r4
 20005f8:	11000017 	ldw	r4,0(r2)
 20005fc:	000d883a 	mov	r6,zero
 2000600:	d80b883a 	mov	r5,sp
 2000604:	dfc00315 	stw	ra,12(sp)
 2000608:	2000c980 	call	2000c98 <_gettimeofday_r>
 200060c:	10000416 	blt	r2,zero,2000620 <time+0x3c>
 2000610:	d8800017 	ldw	r2,0(sp)
 2000614:	80000326 	beq	r16,zero,2000624 <time+0x40>
 2000618:	80800015 	stw	r2,0(r16)
 200061c:	00000106 	br	2000624 <time+0x40>
 2000620:	00bfffc4 	movi	r2,-1
 2000624:	dfc00317 	ldw	ra,12(sp)
 2000628:	dc000217 	ldw	r16,8(sp)
 200062c:	dec00404 	addi	sp,sp,16
 2000630:	f800283a 	ret

02000634 <print_repeat>:
 2000634:	defffb04 	addi	sp,sp,-20
 2000638:	dc800315 	stw	r18,12(sp)
 200063c:	dc400215 	stw	r17,8(sp)
 2000640:	dc000115 	stw	r16,4(sp)
 2000644:	dfc00415 	stw	ra,16(sp)
 2000648:	2025883a 	mov	r18,r4
 200064c:	2823883a 	mov	r17,r5
 2000650:	d9800005 	stb	r6,0(sp)
 2000654:	3821883a 	mov	r16,r7
 2000658:	04000a0e 	bge	zero,r16,2000684 <print_repeat+0x50>
 200065c:	88800117 	ldw	r2,4(r17)
 2000660:	01c00044 	movi	r7,1
 2000664:	d80d883a 	mov	r6,sp
 2000668:	880b883a 	mov	r5,r17
 200066c:	9009883a 	mov	r4,r18
 2000670:	103ee83a 	callr	r2
 2000674:	843fffc4 	addi	r16,r16,-1
 2000678:	103ff726 	beq	r2,zero,2000658 <__alt_mem_onchip_memory2+0xfdff8658>
 200067c:	00bfffc4 	movi	r2,-1
 2000680:	00000106 	br	2000688 <print_repeat+0x54>
 2000684:	0005883a 	mov	r2,zero
 2000688:	dfc00417 	ldw	ra,16(sp)
 200068c:	dc800317 	ldw	r18,12(sp)
 2000690:	dc400217 	ldw	r17,8(sp)
 2000694:	dc000117 	ldw	r16,4(sp)
 2000698:	dec00504 	addi	sp,sp,20
 200069c:	f800283a 	ret

020006a0 <___vfprintf_internal_r>:
 20006a0:	deffe504 	addi	sp,sp,-108
 20006a4:	d8c00804 	addi	r3,sp,32
 20006a8:	df001915 	stw	fp,100(sp)
 20006ac:	ddc01815 	stw	r23,96(sp)
 20006b0:	dd801715 	stw	r22,92(sp)
 20006b4:	dd401615 	stw	r21,88(sp)
 20006b8:	dd001515 	stw	r20,84(sp)
 20006bc:	dcc01415 	stw	r19,80(sp)
 20006c0:	dc801315 	stw	r18,76(sp)
 20006c4:	dc401215 	stw	r17,72(sp)
 20006c8:	dc001115 	stw	r16,68(sp)
 20006cc:	dfc01a15 	stw	ra,104(sp)
 20006d0:	2027883a 	mov	r19,r4
 20006d4:	2839883a 	mov	fp,r5
 20006d8:	382d883a 	mov	r22,r7
 20006dc:	d9800f15 	stw	r6,60(sp)
 20006e0:	0021883a 	mov	r16,zero
 20006e4:	d8000e15 	stw	zero,56(sp)
 20006e8:	002f883a 	mov	r23,zero
 20006ec:	002b883a 	mov	r21,zero
 20006f0:	0025883a 	mov	r18,zero
 20006f4:	0023883a 	mov	r17,zero
 20006f8:	d8000c15 	stw	zero,48(sp)
 20006fc:	d8000b15 	stw	zero,44(sp)
 2000700:	0029883a 	mov	r20,zero
 2000704:	d8c00915 	stw	r3,36(sp)
 2000708:	d8c00f17 	ldw	r3,60(sp)
 200070c:	19000003 	ldbu	r4,0(r3)
 2000710:	20803fcc 	andi	r2,r4,255
 2000714:	1080201c 	xori	r2,r2,128
 2000718:	10bfe004 	addi	r2,r2,-128
 200071c:	10011c26 	beq	r2,zero,2000b90 <___vfprintf_internal_r+0x4f0>
 2000720:	00c00044 	movi	r3,1
 2000724:	a0c01426 	beq	r20,r3,2000778 <___vfprintf_internal_r+0xd8>
 2000728:	1d000216 	blt	r3,r20,2000734 <___vfprintf_internal_r+0x94>
 200072c:	a0000626 	beq	r20,zero,2000748 <___vfprintf_internal_r+0xa8>
 2000730:	00011306 	br	2000b80 <___vfprintf_internal_r+0x4e0>
 2000734:	01400084 	movi	r5,2
 2000738:	a1401d26 	beq	r20,r5,20007b0 <___vfprintf_internal_r+0x110>
 200073c:	014000c4 	movi	r5,3
 2000740:	a1402926 	beq	r20,r5,20007e8 <___vfprintf_internal_r+0x148>
 2000744:	00010e06 	br	2000b80 <___vfprintf_internal_r+0x4e0>
 2000748:	01400944 	movi	r5,37
 200074c:	1140fb26 	beq	r2,r5,2000b3c <___vfprintf_internal_r+0x49c>
 2000750:	e0800117 	ldw	r2,4(fp)
 2000754:	d9000005 	stb	r4,0(sp)
 2000758:	01c00044 	movi	r7,1
 200075c:	d80d883a 	mov	r6,sp
 2000760:	e00b883a 	mov	r5,fp
 2000764:	9809883a 	mov	r4,r19
 2000768:	103ee83a 	callr	r2
 200076c:	1000d61e 	bne	r2,zero,2000ac8 <___vfprintf_internal_r+0x428>
 2000770:	84000044 	addi	r16,r16,1
 2000774:	00010206 	br	2000b80 <___vfprintf_internal_r+0x4e0>
 2000778:	01400c04 	movi	r5,48
 200077c:	1140f826 	beq	r2,r5,2000b60 <___vfprintf_internal_r+0x4c0>
 2000780:	01400944 	movi	r5,37
 2000784:	11400a1e 	bne	r2,r5,20007b0 <___vfprintf_internal_r+0x110>
 2000788:	d8800005 	stb	r2,0(sp)
 200078c:	e0800117 	ldw	r2,4(fp)
 2000790:	a00f883a 	mov	r7,r20
 2000794:	d80d883a 	mov	r6,sp
 2000798:	e00b883a 	mov	r5,fp
 200079c:	9809883a 	mov	r4,r19
 20007a0:	103ee83a 	callr	r2
 20007a4:	1000c81e 	bne	r2,zero,2000ac8 <___vfprintf_internal_r+0x428>
 20007a8:	84000044 	addi	r16,r16,1
 20007ac:	0000f306 	br	2000b7c <___vfprintf_internal_r+0x4dc>
 20007b0:	217ff404 	addi	r5,r4,-48
 20007b4:	29403fcc 	andi	r5,r5,255
 20007b8:	00c00244 	movi	r3,9
 20007bc:	19400736 	bltu	r3,r5,20007dc <___vfprintf_internal_r+0x13c>
 20007c0:	00bfffc4 	movi	r2,-1
 20007c4:	88800226 	beq	r17,r2,20007d0 <___vfprintf_internal_r+0x130>
 20007c8:	8c4002a4 	muli	r17,r17,10
 20007cc:	00000106 	br	20007d4 <___vfprintf_internal_r+0x134>
 20007d0:	0023883a 	mov	r17,zero
 20007d4:	2c63883a 	add	r17,r5,r17
 20007d8:	0000e206 	br	2000b64 <___vfprintf_internal_r+0x4c4>
 20007dc:	01400b84 	movi	r5,46
 20007e0:	1140e426 	beq	r2,r5,2000b74 <___vfprintf_internal_r+0x4d4>
 20007e4:	05000084 	movi	r20,2
 20007e8:	213ff404 	addi	r4,r4,-48
 20007ec:	21003fcc 	andi	r4,r4,255
 20007f0:	00c00244 	movi	r3,9
 20007f4:	19000736 	bltu	r3,r4,2000814 <___vfprintf_internal_r+0x174>
 20007f8:	00bfffc4 	movi	r2,-1
 20007fc:	90800226 	beq	r18,r2,2000808 <___vfprintf_internal_r+0x168>
 2000800:	948002a4 	muli	r18,r18,10
 2000804:	00000106 	br	200080c <___vfprintf_internal_r+0x16c>
 2000808:	0025883a 	mov	r18,zero
 200080c:	24a5883a 	add	r18,r4,r18
 2000810:	0000db06 	br	2000b80 <___vfprintf_internal_r+0x4e0>
 2000814:	00c01b04 	movi	r3,108
 2000818:	10c0d426 	beq	r2,r3,2000b6c <___vfprintf_internal_r+0x4cc>
 200081c:	013fffc4 	movi	r4,-1
 2000820:	91000226 	beq	r18,r4,200082c <___vfprintf_internal_r+0x18c>
 2000824:	d8000b15 	stw	zero,44(sp)
 2000828:	00000106 	br	2000830 <___vfprintf_internal_r+0x190>
 200082c:	04800044 	movi	r18,1
 2000830:	01001a44 	movi	r4,105
 2000834:	11001626 	beq	r2,r4,2000890 <___vfprintf_internal_r+0x1f0>
 2000838:	20800916 	blt	r4,r2,2000860 <___vfprintf_internal_r+0x1c0>
 200083c:	010018c4 	movi	r4,99
 2000840:	11008a26 	beq	r2,r4,2000a6c <___vfprintf_internal_r+0x3cc>
 2000844:	01001904 	movi	r4,100
 2000848:	11001126 	beq	r2,r4,2000890 <___vfprintf_internal_r+0x1f0>
 200084c:	01001604 	movi	r4,88
 2000850:	1100ca1e 	bne	r2,r4,2000b7c <___vfprintf_internal_r+0x4dc>
 2000854:	00c00044 	movi	r3,1
 2000858:	d8c00e15 	stw	r3,56(sp)
 200085c:	00001406 	br	20008b0 <___vfprintf_internal_r+0x210>
 2000860:	01001cc4 	movi	r4,115
 2000864:	11009a26 	beq	r2,r4,2000ad0 <___vfprintf_internal_r+0x430>
 2000868:	20800416 	blt	r4,r2,200087c <___vfprintf_internal_r+0x1dc>
 200086c:	01001bc4 	movi	r4,111
 2000870:	1100c21e 	bne	r2,r4,2000b7c <___vfprintf_internal_r+0x4dc>
 2000874:	05400204 	movi	r21,8
 2000878:	00000e06 	br	20008b4 <___vfprintf_internal_r+0x214>
 200087c:	01001d44 	movi	r4,117
 2000880:	11000c26 	beq	r2,r4,20008b4 <___vfprintf_internal_r+0x214>
 2000884:	01001e04 	movi	r4,120
 2000888:	11000926 	beq	r2,r4,20008b0 <___vfprintf_internal_r+0x210>
 200088c:	0000bb06 	br	2000b7c <___vfprintf_internal_r+0x4dc>
 2000890:	b5000104 	addi	r20,r22,4
 2000894:	b8000726 	beq	r23,zero,20008b4 <___vfprintf_internal_r+0x214>
 2000898:	dd000d15 	stw	r20,52(sp)
 200089c:	b5800017 	ldw	r22,0(r22)
 20008a0:	b000080e 	bge	r22,zero,20008c4 <___vfprintf_internal_r+0x224>
 20008a4:	05adc83a 	sub	r22,zero,r22
 20008a8:	02800044 	movi	r10,1
 20008ac:	00000606 	br	20008c8 <___vfprintf_internal_r+0x228>
 20008b0:	05400404 	movi	r21,16
 20008b4:	b0c00104 	addi	r3,r22,4
 20008b8:	d8c00d15 	stw	r3,52(sp)
 20008bc:	b5800017 	ldw	r22,0(r22)
 20008c0:	002f883a 	mov	r23,zero
 20008c4:	0015883a 	mov	r10,zero
 20008c8:	d829883a 	mov	r20,sp
 20008cc:	b0001426 	beq	r22,zero,2000920 <___vfprintf_internal_r+0x280>
 20008d0:	b009883a 	mov	r4,r22
 20008d4:	a80b883a 	mov	r5,r21
 20008d8:	da801015 	stw	r10,64(sp)
 20008dc:	2000e9c0 	call	2000e9c <__udivsi3>
 20008e0:	1549383a 	mul	r4,r2,r21
 20008e4:	00c00244 	movi	r3,9
 20008e8:	da801017 	ldw	r10,64(sp)
 20008ec:	b12dc83a 	sub	r22,r22,r4
 20008f0:	1d800216 	blt	r3,r22,20008fc <___vfprintf_internal_r+0x25c>
 20008f4:	b5800c04 	addi	r22,r22,48
 20008f8:	00000506 	br	2000910 <___vfprintf_internal_r+0x270>
 20008fc:	d8c00e17 	ldw	r3,56(sp)
 2000900:	18000226 	beq	r3,zero,200090c <___vfprintf_internal_r+0x26c>
 2000904:	b5800dc4 	addi	r22,r22,55
 2000908:	00000106 	br	2000910 <___vfprintf_internal_r+0x270>
 200090c:	b58015c4 	addi	r22,r22,87
 2000910:	a5800005 	stb	r22,0(r20)
 2000914:	a5000044 	addi	r20,r20,1
 2000918:	102d883a 	mov	r22,r2
 200091c:	003feb06 	br	20008cc <__alt_mem_onchip_memory2+0xfdff88cc>
 2000920:	a6c7c83a 	sub	r3,r20,sp
 2000924:	d8c00a15 	stw	r3,40(sp)
 2000928:	90c5c83a 	sub	r2,r18,r3
 200092c:	00800a0e 	bge	zero,r2,2000958 <___vfprintf_internal_r+0x2b8>
 2000930:	a085883a 	add	r2,r20,r2
 2000934:	01400c04 	movi	r5,48
 2000938:	d8c00917 	ldw	r3,36(sp)
 200093c:	a009883a 	mov	r4,r20
 2000940:	a0c0032e 	bgeu	r20,r3,2000950 <___vfprintf_internal_r+0x2b0>
 2000944:	a5000044 	addi	r20,r20,1
 2000948:	21400005 	stb	r5,0(r4)
 200094c:	a0bffa1e 	bne	r20,r2,2000938 <__alt_mem_onchip_memory2+0xfdff8938>
 2000950:	a6c7c83a 	sub	r3,r20,sp
 2000954:	d8c00a15 	stw	r3,40(sp)
 2000958:	d8c00a17 	ldw	r3,40(sp)
 200095c:	50d3883a 	add	r9,r10,r3
 2000960:	d8c00b17 	ldw	r3,44(sp)
 2000964:	8a6dc83a 	sub	r22,r17,r9
 2000968:	18001726 	beq	r3,zero,20009c8 <___vfprintf_internal_r+0x328>
 200096c:	50000a26 	beq	r10,zero,2000998 <___vfprintf_internal_r+0x2f8>
 2000970:	00800b44 	movi	r2,45
 2000974:	d8800805 	stb	r2,32(sp)
 2000978:	e0800117 	ldw	r2,4(fp)
 200097c:	01c00044 	movi	r7,1
 2000980:	d9800804 	addi	r6,sp,32
 2000984:	e00b883a 	mov	r5,fp
 2000988:	9809883a 	mov	r4,r19
 200098c:	103ee83a 	callr	r2
 2000990:	10004d1e 	bne	r2,zero,2000ac8 <___vfprintf_internal_r+0x428>
 2000994:	84000044 	addi	r16,r16,1
 2000998:	0580070e 	bge	zero,r22,20009b8 <___vfprintf_internal_r+0x318>
 200099c:	b00f883a 	mov	r7,r22
 20009a0:	01800c04 	movi	r6,48
 20009a4:	e00b883a 	mov	r5,fp
 20009a8:	9809883a 	mov	r4,r19
 20009ac:	20006340 	call	2000634 <print_repeat>
 20009b0:	1000451e 	bne	r2,zero,2000ac8 <___vfprintf_internal_r+0x428>
 20009b4:	85a1883a 	add	r16,r16,r22
 20009b8:	d8c00a17 	ldw	r3,40(sp)
 20009bc:	a013883a 	mov	r9,r20
 20009c0:	1d2dc83a 	sub	r22,r3,r20
 20009c4:	00002206 	br	2000a50 <___vfprintf_internal_r+0x3b0>
 20009c8:	0580090e 	bge	zero,r22,20009f0 <___vfprintf_internal_r+0x350>
 20009cc:	b00f883a 	mov	r7,r22
 20009d0:	01800804 	movi	r6,32
 20009d4:	e00b883a 	mov	r5,fp
 20009d8:	9809883a 	mov	r4,r19
 20009dc:	da801015 	stw	r10,64(sp)
 20009e0:	20006340 	call	2000634 <print_repeat>
 20009e4:	da801017 	ldw	r10,64(sp)
 20009e8:	1000371e 	bne	r2,zero,2000ac8 <___vfprintf_internal_r+0x428>
 20009ec:	85a1883a 	add	r16,r16,r22
 20009f0:	503ff126 	beq	r10,zero,20009b8 <__alt_mem_onchip_memory2+0xfdff89b8>
 20009f4:	00800b44 	movi	r2,45
 20009f8:	d8800805 	stb	r2,32(sp)
 20009fc:	e0800117 	ldw	r2,4(fp)
 2000a00:	01c00044 	movi	r7,1
 2000a04:	d9800804 	addi	r6,sp,32
 2000a08:	e00b883a 	mov	r5,fp
 2000a0c:	9809883a 	mov	r4,r19
 2000a10:	103ee83a 	callr	r2
 2000a14:	10002c1e 	bne	r2,zero,2000ac8 <___vfprintf_internal_r+0x428>
 2000a18:	84000044 	addi	r16,r16,1
 2000a1c:	003fe606 	br	20009b8 <__alt_mem_onchip_memory2+0xfdff89b8>
 2000a20:	4a7fffc4 	addi	r9,r9,-1
 2000a24:	48800003 	ldbu	r2,0(r9)
 2000a28:	01c00044 	movi	r7,1
 2000a2c:	d9800804 	addi	r6,sp,32
 2000a30:	d8800805 	stb	r2,32(sp)
 2000a34:	e0800117 	ldw	r2,4(fp)
 2000a38:	e00b883a 	mov	r5,fp
 2000a3c:	da401015 	stw	r9,64(sp)
 2000a40:	9809883a 	mov	r4,r19
 2000a44:	103ee83a 	callr	r2
 2000a48:	da401017 	ldw	r9,64(sp)
 2000a4c:	10001e1e 	bne	r2,zero,2000ac8 <___vfprintf_internal_r+0x428>
 2000a50:	8245c83a 	sub	r2,r16,r9
 2000a54:	4d89883a 	add	r4,r9,r22
 2000a58:	a085883a 	add	r2,r20,r2
 2000a5c:	013ff016 	blt	zero,r4,2000a20 <__alt_mem_onchip_memory2+0xfdff8a20>
 2000a60:	1021883a 	mov	r16,r2
 2000a64:	dd800d17 	ldw	r22,52(sp)
 2000a68:	00004406 	br	2000b7c <___vfprintf_internal_r+0x4dc>
 2000a6c:	00800044 	movi	r2,1
 2000a70:	1440080e 	bge	r2,r17,2000a94 <___vfprintf_internal_r+0x3f4>
 2000a74:	8d3fffc4 	addi	r20,r17,-1
 2000a78:	a00f883a 	mov	r7,r20
 2000a7c:	01800804 	movi	r6,32
 2000a80:	e00b883a 	mov	r5,fp
 2000a84:	9809883a 	mov	r4,r19
 2000a88:	20006340 	call	2000634 <print_repeat>
 2000a8c:	10000e1e 	bne	r2,zero,2000ac8 <___vfprintf_internal_r+0x428>
 2000a90:	8521883a 	add	r16,r16,r20
 2000a94:	b0800017 	ldw	r2,0(r22)
 2000a98:	01c00044 	movi	r7,1
 2000a9c:	d80d883a 	mov	r6,sp
 2000aa0:	d8800005 	stb	r2,0(sp)
 2000aa4:	e0800117 	ldw	r2,4(fp)
 2000aa8:	e00b883a 	mov	r5,fp
 2000aac:	9809883a 	mov	r4,r19
 2000ab0:	b5000104 	addi	r20,r22,4
 2000ab4:	103ee83a 	callr	r2
 2000ab8:	1000031e 	bne	r2,zero,2000ac8 <___vfprintf_internal_r+0x428>
 2000abc:	84000044 	addi	r16,r16,1
 2000ac0:	a02d883a 	mov	r22,r20
 2000ac4:	00002d06 	br	2000b7c <___vfprintf_internal_r+0x4dc>
 2000ac8:	00bfffc4 	movi	r2,-1
 2000acc:	00003106 	br	2000b94 <___vfprintf_internal_r+0x4f4>
 2000ad0:	b5000017 	ldw	r20,0(r22)
 2000ad4:	b0c00104 	addi	r3,r22,4
 2000ad8:	d8c00a15 	stw	r3,40(sp)
 2000adc:	a009883a 	mov	r4,r20
 2000ae0:	20005c80 	call	20005c8 <strlen>
 2000ae4:	8893c83a 	sub	r9,r17,r2
 2000ae8:	102d883a 	mov	r22,r2
 2000aec:	0240090e 	bge	zero,r9,2000b14 <___vfprintf_internal_r+0x474>
 2000af0:	480f883a 	mov	r7,r9
 2000af4:	01800804 	movi	r6,32
 2000af8:	e00b883a 	mov	r5,fp
 2000afc:	9809883a 	mov	r4,r19
 2000b00:	da401015 	stw	r9,64(sp)
 2000b04:	20006340 	call	2000634 <print_repeat>
 2000b08:	da401017 	ldw	r9,64(sp)
 2000b0c:	103fee1e 	bne	r2,zero,2000ac8 <__alt_mem_onchip_memory2+0xfdff8ac8>
 2000b10:	8261883a 	add	r16,r16,r9
 2000b14:	e0800117 	ldw	r2,4(fp)
 2000b18:	b00f883a 	mov	r7,r22
 2000b1c:	a00d883a 	mov	r6,r20
 2000b20:	e00b883a 	mov	r5,fp
 2000b24:	9809883a 	mov	r4,r19
 2000b28:	103ee83a 	callr	r2
 2000b2c:	103fe61e 	bne	r2,zero,2000ac8 <__alt_mem_onchip_memory2+0xfdff8ac8>
 2000b30:	85a1883a 	add	r16,r16,r22
 2000b34:	dd800a17 	ldw	r22,40(sp)
 2000b38:	00001006 	br	2000b7c <___vfprintf_internal_r+0x4dc>
 2000b3c:	05c00044 	movi	r23,1
 2000b40:	04bfffc4 	movi	r18,-1
 2000b44:	d8000e15 	stw	zero,56(sp)
 2000b48:	05400284 	movi	r21,10
 2000b4c:	9023883a 	mov	r17,r18
 2000b50:	d8000c15 	stw	zero,48(sp)
 2000b54:	d8000b15 	stw	zero,44(sp)
 2000b58:	b829883a 	mov	r20,r23
 2000b5c:	00000806 	br	2000b80 <___vfprintf_internal_r+0x4e0>
 2000b60:	dd000b15 	stw	r20,44(sp)
 2000b64:	05000084 	movi	r20,2
 2000b68:	00000506 	br	2000b80 <___vfprintf_internal_r+0x4e0>
 2000b6c:	00c00044 	movi	r3,1
 2000b70:	d8c00c15 	stw	r3,48(sp)
 2000b74:	050000c4 	movi	r20,3
 2000b78:	00000106 	br	2000b80 <___vfprintf_internal_r+0x4e0>
 2000b7c:	0029883a 	mov	r20,zero
 2000b80:	d8c00f17 	ldw	r3,60(sp)
 2000b84:	18c00044 	addi	r3,r3,1
 2000b88:	d8c00f15 	stw	r3,60(sp)
 2000b8c:	003ede06 	br	2000708 <__alt_mem_onchip_memory2+0xfdff8708>
 2000b90:	8005883a 	mov	r2,r16
 2000b94:	dfc01a17 	ldw	ra,104(sp)
 2000b98:	df001917 	ldw	fp,100(sp)
 2000b9c:	ddc01817 	ldw	r23,96(sp)
 2000ba0:	dd801717 	ldw	r22,92(sp)
 2000ba4:	dd401617 	ldw	r21,88(sp)
 2000ba8:	dd001517 	ldw	r20,84(sp)
 2000bac:	dcc01417 	ldw	r19,80(sp)
 2000bb0:	dc801317 	ldw	r18,76(sp)
 2000bb4:	dc401217 	ldw	r17,72(sp)
 2000bb8:	dc001117 	ldw	r16,68(sp)
 2000bbc:	dec01b04 	addi	sp,sp,108
 2000bc0:	f800283a 	ret

02000bc4 <__vfprintf_internal>:
 2000bc4:	00808034 	movhi	r2,512
 2000bc8:	10932004 	addi	r2,r2,19584
 2000bcc:	300f883a 	mov	r7,r6
 2000bd0:	280d883a 	mov	r6,r5
 2000bd4:	200b883a 	mov	r5,r4
 2000bd8:	11000017 	ldw	r4,0(r2)
 2000bdc:	20006a01 	jmpi	20006a0 <___vfprintf_internal_r>

02000be0 <__sfvwrite_small_dev>:
 2000be0:	2880000b 	ldhu	r2,0(r5)
 2000be4:	1080020c 	andi	r2,r2,8
 2000be8:	10002126 	beq	r2,zero,2000c70 <__sfvwrite_small_dev+0x90>
 2000bec:	2880008f 	ldh	r2,2(r5)
 2000bf0:	defffa04 	addi	sp,sp,-24
 2000bf4:	dc000015 	stw	r16,0(sp)
 2000bf8:	dfc00515 	stw	ra,20(sp)
 2000bfc:	dd000415 	stw	r20,16(sp)
 2000c00:	dcc00315 	stw	r19,12(sp)
 2000c04:	dc800215 	stw	r18,8(sp)
 2000c08:	dc400115 	stw	r17,4(sp)
 2000c0c:	2821883a 	mov	r16,r5
 2000c10:	10001216 	blt	r2,zero,2000c5c <__sfvwrite_small_dev+0x7c>
 2000c14:	2027883a 	mov	r19,r4
 2000c18:	3025883a 	mov	r18,r6
 2000c1c:	3823883a 	mov	r17,r7
 2000c20:	05010004 	movi	r20,1024
 2000c24:	04400b0e 	bge	zero,r17,2000c54 <__sfvwrite_small_dev+0x74>
 2000c28:	880f883a 	mov	r7,r17
 2000c2c:	a440010e 	bge	r20,r17,2000c34 <__sfvwrite_small_dev+0x54>
 2000c30:	01c10004 	movi	r7,1024
 2000c34:	8140008f 	ldh	r5,2(r16)
 2000c38:	900d883a 	mov	r6,r18
 2000c3c:	9809883a 	mov	r4,r19
 2000c40:	2000cec0 	call	2000cec <_write_r>
 2000c44:	0080050e 	bge	zero,r2,2000c5c <__sfvwrite_small_dev+0x7c>
 2000c48:	88a3c83a 	sub	r17,r17,r2
 2000c4c:	90a5883a 	add	r18,r18,r2
 2000c50:	003ff406 	br	2000c24 <__alt_mem_onchip_memory2+0xfdff8c24>
 2000c54:	0005883a 	mov	r2,zero
 2000c58:	00000706 	br	2000c78 <__sfvwrite_small_dev+0x98>
 2000c5c:	8080000b 	ldhu	r2,0(r16)
 2000c60:	10801014 	ori	r2,r2,64
 2000c64:	8080000d 	sth	r2,0(r16)
 2000c68:	00bfffc4 	movi	r2,-1
 2000c6c:	00000206 	br	2000c78 <__sfvwrite_small_dev+0x98>
 2000c70:	00bfffc4 	movi	r2,-1
 2000c74:	f800283a 	ret
 2000c78:	dfc00517 	ldw	ra,20(sp)
 2000c7c:	dd000417 	ldw	r20,16(sp)
 2000c80:	dcc00317 	ldw	r19,12(sp)
 2000c84:	dc800217 	ldw	r18,8(sp)
 2000c88:	dc400117 	ldw	r17,4(sp)
 2000c8c:	dc000017 	ldw	r16,0(sp)
 2000c90:	dec00604 	addi	sp,sp,24
 2000c94:	f800283a 	ret

02000c98 <_gettimeofday_r>:
 2000c98:	defffd04 	addi	sp,sp,-12
 2000c9c:	dc000015 	stw	r16,0(sp)
 2000ca0:	04008034 	movhi	r16,512
 2000ca4:	dc400115 	stw	r17,4(sp)
 2000ca8:	8417f204 	addi	r16,r16,24520
 2000cac:	2023883a 	mov	r17,r4
 2000cb0:	2809883a 	mov	r4,r5
 2000cb4:	300b883a 	mov	r5,r6
 2000cb8:	dfc00215 	stw	ra,8(sp)
 2000cbc:	80000015 	stw	zero,0(r16)
 2000cc0:	2000f580 	call	2000f58 <gettimeofday>
 2000cc4:	00ffffc4 	movi	r3,-1
 2000cc8:	10c0031e 	bne	r2,r3,2000cd8 <_gettimeofday_r+0x40>
 2000ccc:	80c00017 	ldw	r3,0(r16)
 2000cd0:	18000126 	beq	r3,zero,2000cd8 <_gettimeofday_r+0x40>
 2000cd4:	88c00015 	stw	r3,0(r17)
 2000cd8:	dfc00217 	ldw	ra,8(sp)
 2000cdc:	dc400117 	ldw	r17,4(sp)
 2000ce0:	dc000017 	ldw	r16,0(sp)
 2000ce4:	dec00304 	addi	sp,sp,12
 2000ce8:	f800283a 	ret

02000cec <_write_r>:
 2000cec:	defffd04 	addi	sp,sp,-12
 2000cf0:	dc000015 	stw	r16,0(sp)
 2000cf4:	04008034 	movhi	r16,512
 2000cf8:	dc400115 	stw	r17,4(sp)
 2000cfc:	8417f204 	addi	r16,r16,24520
 2000d00:	2023883a 	mov	r17,r4
 2000d04:	2809883a 	mov	r4,r5
 2000d08:	300b883a 	mov	r5,r6
 2000d0c:	380d883a 	mov	r6,r7
 2000d10:	dfc00215 	stw	ra,8(sp)
 2000d14:	80000015 	stw	zero,0(r16)
 2000d18:	20014740 	call	2001474 <write>
 2000d1c:	00ffffc4 	movi	r3,-1
 2000d20:	10c0031e 	bne	r2,r3,2000d30 <_write_r+0x44>
 2000d24:	80c00017 	ldw	r3,0(r16)
 2000d28:	18000126 	beq	r3,zero,2000d30 <_write_r+0x44>
 2000d2c:	88c00015 	stw	r3,0(r17)
 2000d30:	dfc00217 	ldw	ra,8(sp)
 2000d34:	dc400117 	ldw	r17,4(sp)
 2000d38:	dc000017 	ldw	r16,0(sp)
 2000d3c:	dec00304 	addi	sp,sp,12
 2000d40:	f800283a 	ret

02000d44 <__muldi3>:
 2000d44:	223fffcc 	andi	r8,r4,65535
 2000d48:	2006d43a 	srli	r3,r4,16
 2000d4c:	32bfffcc 	andi	r10,r6,65535
 2000d50:	3012d43a 	srli	r9,r6,16
 2000d54:	4297383a 	mul	r11,r8,r10
 2000d58:	1a95383a 	mul	r10,r3,r10
 2000d5c:	4251383a 	mul	r8,r8,r9
 2000d60:	5804d43a 	srli	r2,r11,16
 2000d64:	4291883a 	add	r8,r8,r10
 2000d68:	1205883a 	add	r2,r2,r8
 2000d6c:	1a51383a 	mul	r8,r3,r9
 2000d70:	1280022e 	bgeu	r2,r10,2000d7c <__muldi3+0x38>
 2000d74:	00c00074 	movhi	r3,1
 2000d78:	40d1883a 	add	r8,r8,r3
 2000d7c:	1006d43a 	srli	r3,r2,16
 2000d80:	21cf383a 	mul	r7,r4,r7
 2000d84:	314b383a 	mul	r5,r6,r5
 2000d88:	1004943a 	slli	r2,r2,16
 2000d8c:	1a11883a 	add	r8,r3,r8
 2000d90:	5affffcc 	andi	r11,r11,65535
 2000d94:	3947883a 	add	r3,r7,r5
 2000d98:	12c5883a 	add	r2,r2,r11
 2000d9c:	1a07883a 	add	r3,r3,r8
 2000da0:	f800283a 	ret

02000da4 <__divsi3>:
 2000da4:	20001b16 	blt	r4,zero,2000e14 <__divsi3+0x70>
 2000da8:	000f883a 	mov	r7,zero
 2000dac:	28001616 	blt	r5,zero,2000e08 <__divsi3+0x64>
 2000db0:	200d883a 	mov	r6,r4
 2000db4:	29001a2e 	bgeu	r5,r4,2000e20 <__divsi3+0x7c>
 2000db8:	00800804 	movi	r2,32
 2000dbc:	00c00044 	movi	r3,1
 2000dc0:	00000106 	br	2000dc8 <__divsi3+0x24>
 2000dc4:	10000d26 	beq	r2,zero,2000dfc <__divsi3+0x58>
 2000dc8:	294b883a 	add	r5,r5,r5
 2000dcc:	10bfffc4 	addi	r2,r2,-1
 2000dd0:	18c7883a 	add	r3,r3,r3
 2000dd4:	293ffb36 	bltu	r5,r4,2000dc4 <__alt_mem_onchip_memory2+0xfdff8dc4>
 2000dd8:	0005883a 	mov	r2,zero
 2000ddc:	18000726 	beq	r3,zero,2000dfc <__divsi3+0x58>
 2000de0:	0005883a 	mov	r2,zero
 2000de4:	31400236 	bltu	r6,r5,2000df0 <__divsi3+0x4c>
 2000de8:	314dc83a 	sub	r6,r6,r5
 2000dec:	10c4b03a 	or	r2,r2,r3
 2000df0:	1806d07a 	srli	r3,r3,1
 2000df4:	280ad07a 	srli	r5,r5,1
 2000df8:	183ffa1e 	bne	r3,zero,2000de4 <__alt_mem_onchip_memory2+0xfdff8de4>
 2000dfc:	38000126 	beq	r7,zero,2000e04 <__divsi3+0x60>
 2000e00:	0085c83a 	sub	r2,zero,r2
 2000e04:	f800283a 	ret
 2000e08:	014bc83a 	sub	r5,zero,r5
 2000e0c:	39c0005c 	xori	r7,r7,1
 2000e10:	003fe706 	br	2000db0 <__alt_mem_onchip_memory2+0xfdff8db0>
 2000e14:	0109c83a 	sub	r4,zero,r4
 2000e18:	01c00044 	movi	r7,1
 2000e1c:	003fe306 	br	2000dac <__alt_mem_onchip_memory2+0xfdff8dac>
 2000e20:	00c00044 	movi	r3,1
 2000e24:	003fee06 	br	2000de0 <__alt_mem_onchip_memory2+0xfdff8de0>

02000e28 <__modsi3>:
 2000e28:	20001716 	blt	r4,zero,2000e88 <__modsi3+0x60>
 2000e2c:	000f883a 	mov	r7,zero
 2000e30:	2005883a 	mov	r2,r4
 2000e34:	28001216 	blt	r5,zero,2000e80 <__modsi3+0x58>
 2000e38:	2900162e 	bgeu	r5,r4,2000e94 <__modsi3+0x6c>
 2000e3c:	01800804 	movi	r6,32
 2000e40:	00c00044 	movi	r3,1
 2000e44:	00000106 	br	2000e4c <__modsi3+0x24>
 2000e48:	30000a26 	beq	r6,zero,2000e74 <__modsi3+0x4c>
 2000e4c:	294b883a 	add	r5,r5,r5
 2000e50:	31bfffc4 	addi	r6,r6,-1
 2000e54:	18c7883a 	add	r3,r3,r3
 2000e58:	293ffb36 	bltu	r5,r4,2000e48 <__alt_mem_onchip_memory2+0xfdff8e48>
 2000e5c:	18000526 	beq	r3,zero,2000e74 <__modsi3+0x4c>
 2000e60:	1806d07a 	srli	r3,r3,1
 2000e64:	11400136 	bltu	r2,r5,2000e6c <__modsi3+0x44>
 2000e68:	1145c83a 	sub	r2,r2,r5
 2000e6c:	280ad07a 	srli	r5,r5,1
 2000e70:	183ffb1e 	bne	r3,zero,2000e60 <__alt_mem_onchip_memory2+0xfdff8e60>
 2000e74:	38000126 	beq	r7,zero,2000e7c <__modsi3+0x54>
 2000e78:	0085c83a 	sub	r2,zero,r2
 2000e7c:	f800283a 	ret
 2000e80:	014bc83a 	sub	r5,zero,r5
 2000e84:	003fec06 	br	2000e38 <__alt_mem_onchip_memory2+0xfdff8e38>
 2000e88:	0109c83a 	sub	r4,zero,r4
 2000e8c:	01c00044 	movi	r7,1
 2000e90:	003fe706 	br	2000e30 <__alt_mem_onchip_memory2+0xfdff8e30>
 2000e94:	00c00044 	movi	r3,1
 2000e98:	003ff106 	br	2000e60 <__alt_mem_onchip_memory2+0xfdff8e60>

02000e9c <__udivsi3>:
 2000e9c:	200d883a 	mov	r6,r4
 2000ea0:	2900152e 	bgeu	r5,r4,2000ef8 <__udivsi3+0x5c>
 2000ea4:	28001416 	blt	r5,zero,2000ef8 <__udivsi3+0x5c>
 2000ea8:	00800804 	movi	r2,32
 2000eac:	00c00044 	movi	r3,1
 2000eb0:	00000206 	br	2000ebc <__udivsi3+0x20>
 2000eb4:	10000e26 	beq	r2,zero,2000ef0 <__udivsi3+0x54>
 2000eb8:	28000516 	blt	r5,zero,2000ed0 <__udivsi3+0x34>
 2000ebc:	294b883a 	add	r5,r5,r5
 2000ec0:	10bfffc4 	addi	r2,r2,-1
 2000ec4:	18c7883a 	add	r3,r3,r3
 2000ec8:	293ffa36 	bltu	r5,r4,2000eb4 <__alt_mem_onchip_memory2+0xfdff8eb4>
 2000ecc:	18000826 	beq	r3,zero,2000ef0 <__udivsi3+0x54>
 2000ed0:	0005883a 	mov	r2,zero
 2000ed4:	31400236 	bltu	r6,r5,2000ee0 <__udivsi3+0x44>
 2000ed8:	314dc83a 	sub	r6,r6,r5
 2000edc:	10c4b03a 	or	r2,r2,r3
 2000ee0:	1806d07a 	srli	r3,r3,1
 2000ee4:	280ad07a 	srli	r5,r5,1
 2000ee8:	183ffa1e 	bne	r3,zero,2000ed4 <__alt_mem_onchip_memory2+0xfdff8ed4>
 2000eec:	f800283a 	ret
 2000ef0:	0005883a 	mov	r2,zero
 2000ef4:	f800283a 	ret
 2000ef8:	00c00044 	movi	r3,1
 2000efc:	003ff406 	br	2000ed0 <__alt_mem_onchip_memory2+0xfdff8ed0>

02000f00 <__umodsi3>:
 2000f00:	2005883a 	mov	r2,r4
 2000f04:	2900122e 	bgeu	r5,r4,2000f50 <__umodsi3+0x50>
 2000f08:	28001116 	blt	r5,zero,2000f50 <__umodsi3+0x50>
 2000f0c:	01800804 	movi	r6,32
 2000f10:	00c00044 	movi	r3,1
 2000f14:	00000206 	br	2000f20 <__umodsi3+0x20>
 2000f18:	30000c26 	beq	r6,zero,2000f4c <__umodsi3+0x4c>
 2000f1c:	28000516 	blt	r5,zero,2000f34 <__umodsi3+0x34>
 2000f20:	294b883a 	add	r5,r5,r5
 2000f24:	31bfffc4 	addi	r6,r6,-1
 2000f28:	18c7883a 	add	r3,r3,r3
 2000f2c:	293ffa36 	bltu	r5,r4,2000f18 <__alt_mem_onchip_memory2+0xfdff8f18>
 2000f30:	18000626 	beq	r3,zero,2000f4c <__umodsi3+0x4c>
 2000f34:	1806d07a 	srli	r3,r3,1
 2000f38:	11400136 	bltu	r2,r5,2000f40 <__umodsi3+0x40>
 2000f3c:	1145c83a 	sub	r2,r2,r5
 2000f40:	280ad07a 	srli	r5,r5,1
 2000f44:	183ffb1e 	bne	r3,zero,2000f34 <__alt_mem_onchip_memory2+0xfdff8f34>
 2000f48:	f800283a 	ret
 2000f4c:	f800283a 	ret
 2000f50:	00c00044 	movi	r3,1
 2000f54:	003ff706 	br	2000f34 <__alt_mem_onchip_memory2+0xfdff8f34>

02000f58 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 2000f58:	defff804 	addi	sp,sp,-32
 2000f5c:	dfc00715 	stw	ra,28(sp)
 2000f60:	df000615 	stw	fp,24(sp)
 2000f64:	dc000515 	stw	r16,20(sp)
 2000f68:	df000604 	addi	fp,sp,24
 2000f6c:	e13ffd15 	stw	r4,-12(fp)
 2000f70:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 2000f74:	e0bffe17 	ldw	r2,-8(fp)
 2000f78:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2000f7c:	d0a4dc17 	ldw	r2,-27792(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 2000f80:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2000f84:	d0a4db17 	ldw	r2,-27796(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 2000f88:	e0bffc15 	stw	r2,-16(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 2000f8c:	e0bffc17 	ldw	r2,-16(fp)
 2000f90:	10005f26 	beq	r2,zero,2001110 <gettimeofday+0x1b8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 2000f94:	d0a4d617 	ldw	r2,-27816(gp)
 2000f98:	1009883a 	mov	r4,r2
 2000f9c:	e0fffb17 	ldw	r3,-20(fp)
 2000fa0:	e0bffc17 	ldw	r2,-16(fp)
 2000fa4:	1885203a 	divu	r2,r3,r2
 2000fa8:	2085883a 	add	r2,r4,r2
 2000fac:	1007883a 	mov	r3,r2
 2000fb0:	e0bffd17 	ldw	r2,-12(fp)
 2000fb4:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 2000fb8:	d0a4d717 	ldw	r2,-27812(gp)
 2000fbc:	1021883a 	mov	r16,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 2000fc0:	e0bffb17 	ldw	r2,-20(fp)
 2000fc4:	1011883a 	mov	r8,r2
 2000fc8:	0013883a 	mov	r9,zero
 2000fcc:	008003f4 	movhi	r2,15
 2000fd0:	10909004 	addi	r2,r2,16960
 2000fd4:	e0fffc17 	ldw	r3,-16(fp)
 2000fd8:	10c5203a 	divu	r2,r2,r3
 2000fdc:	1015883a 	mov	r10,r2
 2000fe0:	0017883a 	mov	r11,zero
 2000fe4:	500d883a 	mov	r6,r10
 2000fe8:	580f883a 	mov	r7,r11
 2000fec:	4009883a 	mov	r4,r8
 2000ff0:	480b883a 	mov	r5,r9
 2000ff4:	2000d440 	call	2000d44 <__muldi3>
 2000ff8:	1009883a 	mov	r4,r2
 2000ffc:	180b883a 	mov	r5,r3
 2001000:	2005883a 	mov	r2,r4
 2001004:	2807883a 	mov	r3,r5
 2001008:	018003f4 	movhi	r6,15
 200100c:	31909004 	addi	r6,r6,16960
 2001010:	000f883a 	mov	r7,zero
 2001014:	1009883a 	mov	r4,r2
 2001018:	180b883a 	mov	r5,r3
 200101c:	20032a40 	call	20032a4 <__umoddi3>
 2001020:	1009883a 	mov	r4,r2
 2001024:	180b883a 	mov	r5,r3
 2001028:	2005883a 	mov	r2,r4
 200102c:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 2001030:	8085883a 	add	r2,r16,r2
 2001034:	1007883a 	mov	r3,r2
 2001038:	e0bffd17 	ldw	r2,-12(fp)
 200103c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 2001040:	00001406 	br	2001094 <gettimeofday+0x13c>
      if (ptimeval->tv_sec <= 0)
 2001044:	e0bffd17 	ldw	r2,-12(fp)
 2001048:	10800017 	ldw	r2,0(r2)
 200104c:	00800516 	blt	zero,r2,2001064 <gettimeofday+0x10c>
      {
          ptimeval->tv_sec = 0;
 2001050:	e0bffd17 	ldw	r2,-12(fp)
 2001054:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 2001058:	e0bffd17 	ldw	r2,-12(fp)
 200105c:	10000115 	stw	zero,4(r2)
          break;
 2001060:	00000f06 	br	20010a0 <gettimeofday+0x148>
      }
      else
      {
          ptimeval->tv_sec--;
 2001064:	e0bffd17 	ldw	r2,-12(fp)
 2001068:	10800017 	ldw	r2,0(r2)
 200106c:	10ffffc4 	addi	r3,r2,-1
 2001070:	e0bffd17 	ldw	r2,-12(fp)
 2001074:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 2001078:	e0bffd17 	ldw	r2,-12(fp)
 200107c:	10c00117 	ldw	r3,4(r2)
 2001080:	008003f4 	movhi	r2,15
 2001084:	10909004 	addi	r2,r2,16960
 2001088:	1887883a 	add	r3,r3,r2
 200108c:	e0bffd17 	ldw	r2,-12(fp)
 2001090:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 2001094:	e0bffd17 	ldw	r2,-12(fp)
 2001098:	10800117 	ldw	r2,4(r2)
 200109c:	103fe916 	blt	r2,zero,2001044 <__alt_mem_onchip_memory2+0xfdff9044>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 20010a0:	00000c06 	br	20010d4 <gettimeofday+0x17c>
      ptimeval->tv_sec++;
 20010a4:	e0bffd17 	ldw	r2,-12(fp)
 20010a8:	10800017 	ldw	r2,0(r2)
 20010ac:	10c00044 	addi	r3,r2,1
 20010b0:	e0bffd17 	ldw	r2,-12(fp)
 20010b4:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 20010b8:	e0bffd17 	ldw	r2,-12(fp)
 20010bc:	10c00117 	ldw	r3,4(r2)
 20010c0:	00bffc74 	movhi	r2,65521
 20010c4:	10af7004 	addi	r2,r2,-16960
 20010c8:	1887883a 	add	r3,r3,r2
 20010cc:	e0bffd17 	ldw	r2,-12(fp)
 20010d0:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 20010d4:	e0bffd17 	ldw	r2,-12(fp)
 20010d8:	10c00117 	ldw	r3,4(r2)
 20010dc:	008003f4 	movhi	r2,15
 20010e0:	10908fc4 	addi	r2,r2,16959
 20010e4:	10ffef16 	blt	r2,r3,20010a4 <__alt_mem_onchip_memory2+0xfdff90a4>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 20010e8:	e0bffa17 	ldw	r2,-24(fp)
 20010ec:	10000626 	beq	r2,zero,2001108 <gettimeofday+0x1b0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 20010f0:	d0e4d417 	ldw	r3,-27824(gp)
 20010f4:	e0bffa17 	ldw	r2,-24(fp)
 20010f8:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 20010fc:	d0e4d517 	ldw	r3,-27820(gp)
 2001100:	e0bffa17 	ldw	r2,-24(fp)
 2001104:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 2001108:	0005883a 	mov	r2,zero
 200110c:	00000106 	br	2001114 <gettimeofday+0x1bc>
  }

  return -ENOTSUP;
 2001110:	00bfde84 	movi	r2,-134
}
 2001114:	e6ffff04 	addi	sp,fp,-4
 2001118:	dfc00217 	ldw	ra,8(sp)
 200111c:	df000117 	ldw	fp,4(sp)
 2001120:	dc000017 	ldw	r16,0(sp)
 2001124:	dec00304 	addi	sp,sp,12
 2001128:	f800283a 	ret

0200112c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200112c:	defffc04 	addi	sp,sp,-16
 2001130:	df000315 	stw	fp,12(sp)
 2001134:	df000304 	addi	fp,sp,12
 2001138:	e13ffd15 	stw	r4,-12(fp)
 200113c:	e17ffe15 	stw	r5,-8(fp)
 2001140:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2001144:	e0fffe17 	ldw	r3,-8(fp)
 2001148:	e0bffd17 	ldw	r2,-12(fp)
 200114c:	18800c26 	beq	r3,r2,2001180 <alt_load_section+0x54>
  {
    while( to != end )
 2001150:	00000806 	br	2001174 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2001154:	e0bffe17 	ldw	r2,-8(fp)
 2001158:	10c00104 	addi	r3,r2,4
 200115c:	e0fffe15 	stw	r3,-8(fp)
 2001160:	e0fffd17 	ldw	r3,-12(fp)
 2001164:	19000104 	addi	r4,r3,4
 2001168:	e13ffd15 	stw	r4,-12(fp)
 200116c:	18c00017 	ldw	r3,0(r3)
 2001170:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2001174:	e0fffe17 	ldw	r3,-8(fp)
 2001178:	e0bfff17 	ldw	r2,-4(fp)
 200117c:	18bff51e 	bne	r3,r2,2001154 <__alt_mem_onchip_memory2+0xfdff9154>
    {
      *to++ = *from++;
    }
  }
}
 2001180:	0001883a 	nop
 2001184:	e037883a 	mov	sp,fp
 2001188:	df000017 	ldw	fp,0(sp)
 200118c:	dec00104 	addi	sp,sp,4
 2001190:	f800283a 	ret

02001194 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2001194:	defffe04 	addi	sp,sp,-8
 2001198:	dfc00115 	stw	ra,4(sp)
 200119c:	df000015 	stw	fp,0(sp)
 20011a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 20011a4:	01808034 	movhi	r6,512
 20011a8:	31932a04 	addi	r6,r6,19624
 20011ac:	01408034 	movhi	r5,512
 20011b0:	294e6504 	addi	r5,r5,14740
 20011b4:	01008034 	movhi	r4,512
 20011b8:	21132a04 	addi	r4,r4,19624
 20011bc:	200112c0 	call	200112c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 20011c0:	01808034 	movhi	r6,512
 20011c4:	31809104 	addi	r6,r6,580
 20011c8:	01408034 	movhi	r5,512
 20011cc:	29400804 	addi	r5,r5,32
 20011d0:	01008034 	movhi	r4,512
 20011d4:	21000804 	addi	r4,r4,32
 20011d8:	200112c0 	call	200112c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 20011dc:	01808034 	movhi	r6,512
 20011e0:	318e6504 	addi	r6,r6,14740
 20011e4:	01408034 	movhi	r5,512
 20011e8:	294e0404 	addi	r5,r5,14352
 20011ec:	01008034 	movhi	r4,512
 20011f0:	210e0404 	addi	r4,r4,14352
 20011f4:	200112c0 	call	200112c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20011f8:	20022c40 	call	20022c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 20011fc:	20024d80 	call	20024d8 <alt_icache_flush_all>
}
 2001200:	0001883a 	nop
 2001204:	e037883a 	mov	sp,fp
 2001208:	dfc00117 	ldw	ra,4(sp)
 200120c:	df000017 	ldw	fp,0(sp)
 2001210:	dec00204 	addi	sp,sp,8
 2001214:	f800283a 	ret

02001218 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2001218:	defffd04 	addi	sp,sp,-12
 200121c:	dfc00215 	stw	ra,8(sp)
 2001220:	df000115 	stw	fp,4(sp)
 2001224:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2001228:	0009883a 	mov	r4,zero
 200122c:	20015a00 	call	20015a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2001230:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2001234:	20015d80 	call	20015d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2001238:	01808034 	movhi	r6,512
 200123c:	318e1a04 	addi	r6,r6,14440
 2001240:	01408034 	movhi	r5,512
 2001244:	294e1a04 	addi	r5,r5,14440
 2001248:	01008034 	movhi	r4,512
 200124c:	210e1a04 	addi	r4,r4,14440
 2001250:	20028700 	call	2002870 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2001254:	20024180 	call	2002418 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2001258:	01008034 	movhi	r4,512
 200125c:	21091e04 	addi	r4,r4,9336
 2001260:	2002f300 	call	2002f30 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2001264:	d0a4d817 	ldw	r2,-27808(gp)
 2001268:	d0e4d917 	ldw	r3,-27804(gp)
 200126c:	d124da17 	ldw	r4,-27800(gp)
 2001270:	200d883a 	mov	r6,r4
 2001274:	180b883a 	mov	r5,r3
 2001278:	1009883a 	mov	r4,r2
 200127c:	20003a00 	call	20003a0 <main>
 2001280:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2001284:	01000044 	movi	r4,1
 2001288:	20021f40 	call	20021f4 <close>
  exit (result);
 200128c:	e13fff17 	ldw	r4,-4(fp)
 2001290:	2002f440 	call	2002f44 <exit>

02001294 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2001294:	defffa04 	addi	sp,sp,-24
 2001298:	df000515 	stw	fp,20(sp)
 200129c:	df000504 	addi	fp,sp,20
 20012a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20012a4:	0005303a 	rdctl	r2,status
 20012a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20012ac:	e0fffc17 	ldw	r3,-16(fp)
 20012b0:	00bfff84 	movi	r2,-2
 20012b4:	1884703a 	and	r2,r3,r2
 20012b8:	1001703a 	wrctl	status,r2
  
  return context;
 20012bc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 20012c0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 20012c4:	e0bfff17 	ldw	r2,-4(fp)
 20012c8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 20012cc:	e0bffd17 	ldw	r2,-12(fp)
 20012d0:	10800017 	ldw	r2,0(r2)
 20012d4:	e0fffd17 	ldw	r3,-12(fp)
 20012d8:	18c00117 	ldw	r3,4(r3)
 20012dc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 20012e0:	e0bffd17 	ldw	r2,-12(fp)
 20012e4:	10800117 	ldw	r2,4(r2)
 20012e8:	e0fffd17 	ldw	r3,-12(fp)
 20012ec:	18c00017 	ldw	r3,0(r3)
 20012f0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 20012f4:	e0bffd17 	ldw	r2,-12(fp)
 20012f8:	e0fffd17 	ldw	r3,-12(fp)
 20012fc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2001300:	e0bffd17 	ldw	r2,-12(fp)
 2001304:	e0fffd17 	ldw	r3,-12(fp)
 2001308:	10c00015 	stw	r3,0(r2)
 200130c:	e0bffb17 	ldw	r2,-20(fp)
 2001310:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001314:	e0bffe17 	ldw	r2,-8(fp)
 2001318:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200131c:	0001883a 	nop
 2001320:	e037883a 	mov	sp,fp
 2001324:	df000017 	ldw	fp,0(sp)
 2001328:	dec00104 	addi	sp,sp,4
 200132c:	f800283a 	ret

02001330 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2001330:	defffb04 	addi	sp,sp,-20
 2001334:	dfc00415 	stw	ra,16(sp)
 2001338:	df000315 	stw	fp,12(sp)
 200133c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2001340:	d0a00217 	ldw	r2,-32760(gp)
 2001344:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2001348:	d0a4dc17 	ldw	r2,-27792(gp)
 200134c:	10800044 	addi	r2,r2,1
 2001350:	d0a4dc15 	stw	r2,-27792(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2001354:	00002e06 	br	2001410 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2001358:	e0bffd17 	ldw	r2,-12(fp)
 200135c:	10800017 	ldw	r2,0(r2)
 2001360:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2001364:	e0bffd17 	ldw	r2,-12(fp)
 2001368:	10800403 	ldbu	r2,16(r2)
 200136c:	10803fcc 	andi	r2,r2,255
 2001370:	10000426 	beq	r2,zero,2001384 <alt_tick+0x54>
 2001374:	d0a4dc17 	ldw	r2,-27792(gp)
 2001378:	1000021e 	bne	r2,zero,2001384 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 200137c:	e0bffd17 	ldw	r2,-12(fp)
 2001380:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2001384:	e0bffd17 	ldw	r2,-12(fp)
 2001388:	10800217 	ldw	r2,8(r2)
 200138c:	d0e4dc17 	ldw	r3,-27792(gp)
 2001390:	18801d36 	bltu	r3,r2,2001408 <alt_tick+0xd8>
 2001394:	e0bffd17 	ldw	r2,-12(fp)
 2001398:	10800403 	ldbu	r2,16(r2)
 200139c:	10803fcc 	andi	r2,r2,255
 20013a0:	1000191e 	bne	r2,zero,2001408 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 20013a4:	e0bffd17 	ldw	r2,-12(fp)
 20013a8:	10800317 	ldw	r2,12(r2)
 20013ac:	e0fffd17 	ldw	r3,-12(fp)
 20013b0:	18c00517 	ldw	r3,20(r3)
 20013b4:	1809883a 	mov	r4,r3
 20013b8:	103ee83a 	callr	r2
 20013bc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 20013c0:	e0bfff17 	ldw	r2,-4(fp)
 20013c4:	1000031e 	bne	r2,zero,20013d4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 20013c8:	e13ffd17 	ldw	r4,-12(fp)
 20013cc:	20012940 	call	2001294 <alt_alarm_stop>
 20013d0:	00000d06 	br	2001408 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 20013d4:	e0bffd17 	ldw	r2,-12(fp)
 20013d8:	10c00217 	ldw	r3,8(r2)
 20013dc:	e0bfff17 	ldw	r2,-4(fp)
 20013e0:	1887883a 	add	r3,r3,r2
 20013e4:	e0bffd17 	ldw	r2,-12(fp)
 20013e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 20013ec:	e0bffd17 	ldw	r2,-12(fp)
 20013f0:	10c00217 	ldw	r3,8(r2)
 20013f4:	d0a4dc17 	ldw	r2,-27792(gp)
 20013f8:	1880032e 	bgeu	r3,r2,2001408 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 20013fc:	e0bffd17 	ldw	r2,-12(fp)
 2001400:	00c00044 	movi	r3,1
 2001404:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2001408:	e0bffe17 	ldw	r2,-8(fp)
 200140c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2001410:	e0fffd17 	ldw	r3,-12(fp)
 2001414:	d0a00204 	addi	r2,gp,-32760
 2001418:	18bfcf1e 	bne	r3,r2,2001358 <__alt_mem_onchip_memory2+0xfdff9358>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 200141c:	0001883a 	nop
}
 2001420:	0001883a 	nop
 2001424:	e037883a 	mov	sp,fp
 2001428:	dfc00117 	ldw	ra,4(sp)
 200142c:	df000017 	ldw	fp,0(sp)
 2001430:	dec00204 	addi	sp,sp,8
 2001434:	f800283a 	ret

02001438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2001438:	defffe04 	addi	sp,sp,-8
 200143c:	dfc00115 	stw	ra,4(sp)
 2001440:	df000015 	stw	fp,0(sp)
 2001444:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2001448:	d0a00917 	ldw	r2,-32732(gp)
 200144c:	10000326 	beq	r2,zero,200145c <alt_get_errno+0x24>
 2001450:	d0a00917 	ldw	r2,-32732(gp)
 2001454:	103ee83a 	callr	r2
 2001458:	00000106 	br	2001460 <alt_get_errno+0x28>
 200145c:	d0a4d304 	addi	r2,gp,-27828
}
 2001460:	e037883a 	mov	sp,fp
 2001464:	dfc00117 	ldw	ra,4(sp)
 2001468:	df000017 	ldw	fp,0(sp)
 200146c:	dec00204 	addi	sp,sp,8
 2001470:	f800283a 	ret

02001474 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2001474:	defff904 	addi	sp,sp,-28
 2001478:	dfc00615 	stw	ra,24(sp)
 200147c:	df000515 	stw	fp,20(sp)
 2001480:	df000504 	addi	fp,sp,20
 2001484:	e13ffd15 	stw	r4,-12(fp)
 2001488:	e17ffe15 	stw	r5,-8(fp)
 200148c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2001490:	e0bffd17 	ldw	r2,-12(fp)
 2001494:	10000616 	blt	r2,zero,20014b0 <write+0x3c>
 2001498:	e0bffd17 	ldw	r2,-12(fp)
 200149c:	10c00324 	muli	r3,r2,12
 20014a0:	00808034 	movhi	r2,512
 20014a4:	1092bf04 	addi	r2,r2,19196
 20014a8:	1885883a 	add	r2,r3,r2
 20014ac:	00000106 	br	20014b4 <write+0x40>
 20014b0:	0005883a 	mov	r2,zero
 20014b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20014b8:	e0bffb17 	ldw	r2,-20(fp)
 20014bc:	10002126 	beq	r2,zero,2001544 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20014c0:	e0bffb17 	ldw	r2,-20(fp)
 20014c4:	10800217 	ldw	r2,8(r2)
 20014c8:	108000cc 	andi	r2,r2,3
 20014cc:	10001826 	beq	r2,zero,2001530 <write+0xbc>
 20014d0:	e0bffb17 	ldw	r2,-20(fp)
 20014d4:	10800017 	ldw	r2,0(r2)
 20014d8:	10800617 	ldw	r2,24(r2)
 20014dc:	10001426 	beq	r2,zero,2001530 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 20014e0:	e0bffb17 	ldw	r2,-20(fp)
 20014e4:	10800017 	ldw	r2,0(r2)
 20014e8:	10800617 	ldw	r2,24(r2)
 20014ec:	e0ffff17 	ldw	r3,-4(fp)
 20014f0:	180d883a 	mov	r6,r3
 20014f4:	e17ffe17 	ldw	r5,-8(fp)
 20014f8:	e13ffb17 	ldw	r4,-20(fp)
 20014fc:	103ee83a 	callr	r2
 2001500:	e0bffc15 	stw	r2,-16(fp)
 2001504:	e0bffc17 	ldw	r2,-16(fp)
 2001508:	1000070e 	bge	r2,zero,2001528 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 200150c:	20014380 	call	2001438 <alt_get_errno>
 2001510:	1007883a 	mov	r3,r2
 2001514:	e0bffc17 	ldw	r2,-16(fp)
 2001518:	0085c83a 	sub	r2,zero,r2
 200151c:	18800015 	stw	r2,0(r3)
        return -1;
 2001520:	00bfffc4 	movi	r2,-1
 2001524:	00000c06 	br	2001558 <write+0xe4>
      }
      return rval;
 2001528:	e0bffc17 	ldw	r2,-16(fp)
 200152c:	00000a06 	br	2001558 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2001530:	20014380 	call	2001438 <alt_get_errno>
 2001534:	1007883a 	mov	r3,r2
 2001538:	00800344 	movi	r2,13
 200153c:	18800015 	stw	r2,0(r3)
 2001540:	00000406 	br	2001554 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2001544:	20014380 	call	2001438 <alt_get_errno>
 2001548:	1007883a 	mov	r3,r2
 200154c:	00801444 	movi	r2,81
 2001550:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2001554:	00bfffc4 	movi	r2,-1
}
 2001558:	e037883a 	mov	sp,fp
 200155c:	dfc00117 	ldw	ra,4(sp)
 2001560:	df000017 	ldw	fp,0(sp)
 2001564:	dec00204 	addi	sp,sp,8
 2001568:	f800283a 	ret

0200156c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200156c:	defffd04 	addi	sp,sp,-12
 2001570:	dfc00215 	stw	ra,8(sp)
 2001574:	df000115 	stw	fp,4(sp)
 2001578:	df000104 	addi	fp,sp,4
 200157c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2001580:	d1600604 	addi	r5,gp,-32744
 2001584:	e13fff17 	ldw	r4,-4(fp)
 2001588:	20023740 	call	2002374 <alt_dev_llist_insert>
}
 200158c:	e037883a 	mov	sp,fp
 2001590:	dfc00117 	ldw	ra,4(sp)
 2001594:	df000017 	ldw	fp,0(sp)
 2001598:	dec00204 	addi	sp,sp,8
 200159c:	f800283a 	ret

020015a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20015a0:	defffd04 	addi	sp,sp,-12
 20015a4:	dfc00215 	stw	ra,8(sp)
 20015a8:	df000115 	stw	fp,4(sp)
 20015ac:	df000104 	addi	fp,sp,4
 20015b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 20015b4:	2002ba40 	call	2002ba4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20015b8:	00800044 	movi	r2,1
 20015bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20015c0:	0001883a 	nop
 20015c4:	e037883a 	mov	sp,fp
 20015c8:	dfc00117 	ldw	ra,4(sp)
 20015cc:	df000017 	ldw	fp,0(sp)
 20015d0:	dec00204 	addi	sp,sp,8
 20015d4:	f800283a 	ret

020015d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20015d8:	defffe04 	addi	sp,sp,-8
 20015dc:	dfc00115 	stw	ra,4(sp)
 20015e0:	df000015 	stw	fp,0(sp)
 20015e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 20015e8:	000d883a 	mov	r6,zero
 20015ec:	000b883a 	mov	r5,zero
 20015f0:	01008034 	movhi	r4,512
 20015f4:	210ea704 	addi	r4,r4,15004
 20015f8:	20017880 	call	2001788 <altera_avalon_jtag_uart_init>
 20015fc:	01008034 	movhi	r4,512
 2001600:	210e9d04 	addi	r4,r4,14964
 2001604:	200156c0 	call	200156c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 2001608:	0001883a 	nop
}
 200160c:	0001883a 	nop
 2001610:	e037883a 	mov	sp,fp
 2001614:	dfc00117 	ldw	ra,4(sp)
 2001618:	df000017 	ldw	fp,0(sp)
 200161c:	dec00204 	addi	sp,sp,8
 2001620:	f800283a 	ret

02001624 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2001624:	defffa04 	addi	sp,sp,-24
 2001628:	dfc00515 	stw	ra,20(sp)
 200162c:	df000415 	stw	fp,16(sp)
 2001630:	df000404 	addi	fp,sp,16
 2001634:	e13ffd15 	stw	r4,-12(fp)
 2001638:	e17ffe15 	stw	r5,-8(fp)
 200163c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2001640:	e0bffd17 	ldw	r2,-12(fp)
 2001644:	10800017 	ldw	r2,0(r2)
 2001648:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200164c:	e0bffc17 	ldw	r2,-16(fp)
 2001650:	10c00a04 	addi	r3,r2,40
 2001654:	e0bffd17 	ldw	r2,-12(fp)
 2001658:	10800217 	ldw	r2,8(r2)
 200165c:	100f883a 	mov	r7,r2
 2001660:	e1bfff17 	ldw	r6,-4(fp)
 2001664:	e17ffe17 	ldw	r5,-8(fp)
 2001668:	1809883a 	mov	r4,r3
 200166c:	2001c4c0 	call	2001c4c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2001670:	e037883a 	mov	sp,fp
 2001674:	dfc00117 	ldw	ra,4(sp)
 2001678:	df000017 	ldw	fp,0(sp)
 200167c:	dec00204 	addi	sp,sp,8
 2001680:	f800283a 	ret

02001684 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2001684:	defffa04 	addi	sp,sp,-24
 2001688:	dfc00515 	stw	ra,20(sp)
 200168c:	df000415 	stw	fp,16(sp)
 2001690:	df000404 	addi	fp,sp,16
 2001694:	e13ffd15 	stw	r4,-12(fp)
 2001698:	e17ffe15 	stw	r5,-8(fp)
 200169c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20016a0:	e0bffd17 	ldw	r2,-12(fp)
 20016a4:	10800017 	ldw	r2,0(r2)
 20016a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20016ac:	e0bffc17 	ldw	r2,-16(fp)
 20016b0:	10c00a04 	addi	r3,r2,40
 20016b4:	e0bffd17 	ldw	r2,-12(fp)
 20016b8:	10800217 	ldw	r2,8(r2)
 20016bc:	100f883a 	mov	r7,r2
 20016c0:	e1bfff17 	ldw	r6,-4(fp)
 20016c4:	e17ffe17 	ldw	r5,-8(fp)
 20016c8:	1809883a 	mov	r4,r3
 20016cc:	2001e680 	call	2001e68 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 20016d0:	e037883a 	mov	sp,fp
 20016d4:	dfc00117 	ldw	ra,4(sp)
 20016d8:	df000017 	ldw	fp,0(sp)
 20016dc:	dec00204 	addi	sp,sp,8
 20016e0:	f800283a 	ret

020016e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 20016e4:	defffc04 	addi	sp,sp,-16
 20016e8:	dfc00315 	stw	ra,12(sp)
 20016ec:	df000215 	stw	fp,8(sp)
 20016f0:	df000204 	addi	fp,sp,8
 20016f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20016f8:	e0bfff17 	ldw	r2,-4(fp)
 20016fc:	10800017 	ldw	r2,0(r2)
 2001700:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2001704:	e0bffe17 	ldw	r2,-8(fp)
 2001708:	10c00a04 	addi	r3,r2,40
 200170c:	e0bfff17 	ldw	r2,-4(fp)
 2001710:	10800217 	ldw	r2,8(r2)
 2001714:	100b883a 	mov	r5,r2
 2001718:	1809883a 	mov	r4,r3
 200171c:	2001af40 	call	2001af4 <altera_avalon_jtag_uart_close>
}
 2001720:	e037883a 	mov	sp,fp
 2001724:	dfc00117 	ldw	ra,4(sp)
 2001728:	df000017 	ldw	fp,0(sp)
 200172c:	dec00204 	addi	sp,sp,8
 2001730:	f800283a 	ret

02001734 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2001734:	defffa04 	addi	sp,sp,-24
 2001738:	dfc00515 	stw	ra,20(sp)
 200173c:	df000415 	stw	fp,16(sp)
 2001740:	df000404 	addi	fp,sp,16
 2001744:	e13ffd15 	stw	r4,-12(fp)
 2001748:	e17ffe15 	stw	r5,-8(fp)
 200174c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2001750:	e0bffd17 	ldw	r2,-12(fp)
 2001754:	10800017 	ldw	r2,0(r2)
 2001758:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200175c:	e0bffc17 	ldw	r2,-16(fp)
 2001760:	10800a04 	addi	r2,r2,40
 2001764:	e1bfff17 	ldw	r6,-4(fp)
 2001768:	e17ffe17 	ldw	r5,-8(fp)
 200176c:	1009883a 	mov	r4,r2
 2001770:	2001b5c0 	call	2001b5c <altera_avalon_jtag_uart_ioctl>
}
 2001774:	e037883a 	mov	sp,fp
 2001778:	dfc00117 	ldw	ra,4(sp)
 200177c:	df000017 	ldw	fp,0(sp)
 2001780:	dec00204 	addi	sp,sp,8
 2001784:	f800283a 	ret

02001788 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2001788:	defffa04 	addi	sp,sp,-24
 200178c:	dfc00515 	stw	ra,20(sp)
 2001790:	df000415 	stw	fp,16(sp)
 2001794:	df000404 	addi	fp,sp,16
 2001798:	e13ffd15 	stw	r4,-12(fp)
 200179c:	e17ffe15 	stw	r5,-8(fp)
 20017a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20017a4:	e0bffd17 	ldw	r2,-12(fp)
 20017a8:	00c00044 	movi	r3,1
 20017ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 20017b0:	e0bffd17 	ldw	r2,-12(fp)
 20017b4:	10800017 	ldw	r2,0(r2)
 20017b8:	10800104 	addi	r2,r2,4
 20017bc:	1007883a 	mov	r3,r2
 20017c0:	e0bffd17 	ldw	r2,-12(fp)
 20017c4:	10800817 	ldw	r2,32(r2)
 20017c8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 20017cc:	e0bffe17 	ldw	r2,-8(fp)
 20017d0:	e0ffff17 	ldw	r3,-4(fp)
 20017d4:	d8000015 	stw	zero,0(sp)
 20017d8:	e1fffd17 	ldw	r7,-12(fp)
 20017dc:	01808034 	movhi	r6,512
 20017e0:	31861204 	addi	r6,r6,6216
 20017e4:	180b883a 	mov	r5,r3
 20017e8:	1009883a 	mov	r4,r2
 20017ec:	200250c0 	call	200250c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 20017f0:	e0bffd17 	ldw	r2,-12(fp)
 20017f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 20017f8:	e0bffd17 	ldw	r2,-12(fp)
 20017fc:	10800204 	addi	r2,r2,8
 2001800:	d0e4db17 	ldw	r3,-27796(gp)
 2001804:	e1fffd17 	ldw	r7,-12(fp)
 2001808:	01808034 	movhi	r6,512
 200180c:	31869504 	addi	r6,r6,6740
 2001810:	180b883a 	mov	r5,r3
 2001814:	1009883a 	mov	r4,r2
 2001818:	200208c0 	call	200208c <alt_alarm_start>
 200181c:	1000040e 	bge	r2,zero,2001830 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2001820:	e0fffd17 	ldw	r3,-12(fp)
 2001824:	00a00034 	movhi	r2,32768
 2001828:	10bfffc4 	addi	r2,r2,-1
 200182c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2001830:	0001883a 	nop
 2001834:	e037883a 	mov	sp,fp
 2001838:	dfc00117 	ldw	ra,4(sp)
 200183c:	df000017 	ldw	fp,0(sp)
 2001840:	dec00204 	addi	sp,sp,8
 2001844:	f800283a 	ret

02001848 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2001848:	defff804 	addi	sp,sp,-32
 200184c:	df000715 	stw	fp,28(sp)
 2001850:	df000704 	addi	fp,sp,28
 2001854:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2001858:	e0bfff17 	ldw	r2,-4(fp)
 200185c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2001860:	e0bffb17 	ldw	r2,-20(fp)
 2001864:	10800017 	ldw	r2,0(r2)
 2001868:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200186c:	e0bffc17 	ldw	r2,-16(fp)
 2001870:	10800104 	addi	r2,r2,4
 2001874:	10800037 	ldwio	r2,0(r2)
 2001878:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200187c:	e0bffd17 	ldw	r2,-12(fp)
 2001880:	1080c00c 	andi	r2,r2,768
 2001884:	10006d26 	beq	r2,zero,2001a3c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2001888:	e0bffd17 	ldw	r2,-12(fp)
 200188c:	1080400c 	andi	r2,r2,256
 2001890:	10003526 	beq	r2,zero,2001968 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2001894:	00800074 	movhi	r2,1
 2001898:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200189c:	e0bffb17 	ldw	r2,-20(fp)
 20018a0:	10800a17 	ldw	r2,40(r2)
 20018a4:	10800044 	addi	r2,r2,1
 20018a8:	1081ffcc 	andi	r2,r2,2047
 20018ac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 20018b0:	e0bffb17 	ldw	r2,-20(fp)
 20018b4:	10c00b17 	ldw	r3,44(r2)
 20018b8:	e0bffe17 	ldw	r2,-8(fp)
 20018bc:	18801526 	beq	r3,r2,2001914 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20018c0:	e0bffc17 	ldw	r2,-16(fp)
 20018c4:	10800037 	ldwio	r2,0(r2)
 20018c8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 20018cc:	e0bff917 	ldw	r2,-28(fp)
 20018d0:	10a0000c 	andi	r2,r2,32768
 20018d4:	10001126 	beq	r2,zero,200191c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 20018d8:	e0bffb17 	ldw	r2,-20(fp)
 20018dc:	10800a17 	ldw	r2,40(r2)
 20018e0:	e0fff917 	ldw	r3,-28(fp)
 20018e4:	1809883a 	mov	r4,r3
 20018e8:	e0fffb17 	ldw	r3,-20(fp)
 20018ec:	1885883a 	add	r2,r3,r2
 20018f0:	10800e04 	addi	r2,r2,56
 20018f4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20018f8:	e0bffb17 	ldw	r2,-20(fp)
 20018fc:	10800a17 	ldw	r2,40(r2)
 2001900:	10800044 	addi	r2,r2,1
 2001904:	10c1ffcc 	andi	r3,r2,2047
 2001908:	e0bffb17 	ldw	r2,-20(fp)
 200190c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2001910:	003fe206 	br	200189c <__alt_mem_onchip_memory2+0xfdff989c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2001914:	0001883a 	nop
 2001918:	00000106 	br	2001920 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200191c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2001920:	e0bff917 	ldw	r2,-28(fp)
 2001924:	10bfffec 	andhi	r2,r2,65535
 2001928:	10000f26 	beq	r2,zero,2001968 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200192c:	e0bffb17 	ldw	r2,-20(fp)
 2001930:	10c00817 	ldw	r3,32(r2)
 2001934:	00bfff84 	movi	r2,-2
 2001938:	1886703a 	and	r3,r3,r2
 200193c:	e0bffb17 	ldw	r2,-20(fp)
 2001940:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2001944:	e0bffc17 	ldw	r2,-16(fp)
 2001948:	10800104 	addi	r2,r2,4
 200194c:	1007883a 	mov	r3,r2
 2001950:	e0bffb17 	ldw	r2,-20(fp)
 2001954:	10800817 	ldw	r2,32(r2)
 2001958:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200195c:	e0bffc17 	ldw	r2,-16(fp)
 2001960:	10800104 	addi	r2,r2,4
 2001964:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2001968:	e0bffd17 	ldw	r2,-12(fp)
 200196c:	1080800c 	andi	r2,r2,512
 2001970:	103fbe26 	beq	r2,zero,200186c <__alt_mem_onchip_memory2+0xfdff986c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2001974:	e0bffd17 	ldw	r2,-12(fp)
 2001978:	1004d43a 	srli	r2,r2,16
 200197c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2001980:	00001406 	br	20019d4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2001984:	e0bffc17 	ldw	r2,-16(fp)
 2001988:	e0fffb17 	ldw	r3,-20(fp)
 200198c:	18c00d17 	ldw	r3,52(r3)
 2001990:	e13ffb17 	ldw	r4,-20(fp)
 2001994:	20c7883a 	add	r3,r4,r3
 2001998:	18c20e04 	addi	r3,r3,2104
 200199c:	18c00003 	ldbu	r3,0(r3)
 20019a0:	18c03fcc 	andi	r3,r3,255
 20019a4:	18c0201c 	xori	r3,r3,128
 20019a8:	18ffe004 	addi	r3,r3,-128
 20019ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20019b0:	e0bffb17 	ldw	r2,-20(fp)
 20019b4:	10800d17 	ldw	r2,52(r2)
 20019b8:	10800044 	addi	r2,r2,1
 20019bc:	10c1ffcc 	andi	r3,r2,2047
 20019c0:	e0bffb17 	ldw	r2,-20(fp)
 20019c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 20019c8:	e0bffa17 	ldw	r2,-24(fp)
 20019cc:	10bfffc4 	addi	r2,r2,-1
 20019d0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 20019d4:	e0bffa17 	ldw	r2,-24(fp)
 20019d8:	10000526 	beq	r2,zero,20019f0 <altera_avalon_jtag_uart_irq+0x1a8>
 20019dc:	e0bffb17 	ldw	r2,-20(fp)
 20019e0:	10c00d17 	ldw	r3,52(r2)
 20019e4:	e0bffb17 	ldw	r2,-20(fp)
 20019e8:	10800c17 	ldw	r2,48(r2)
 20019ec:	18bfe51e 	bne	r3,r2,2001984 <__alt_mem_onchip_memory2+0xfdff9984>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 20019f0:	e0bffa17 	ldw	r2,-24(fp)
 20019f4:	103f9d26 	beq	r2,zero,200186c <__alt_mem_onchip_memory2+0xfdff986c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 20019f8:	e0bffb17 	ldw	r2,-20(fp)
 20019fc:	10c00817 	ldw	r3,32(r2)
 2001a00:	00bfff44 	movi	r2,-3
 2001a04:	1886703a 	and	r3,r3,r2
 2001a08:	e0bffb17 	ldw	r2,-20(fp)
 2001a0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001a10:	e0bffb17 	ldw	r2,-20(fp)
 2001a14:	10800017 	ldw	r2,0(r2)
 2001a18:	10800104 	addi	r2,r2,4
 2001a1c:	1007883a 	mov	r3,r2
 2001a20:	e0bffb17 	ldw	r2,-20(fp)
 2001a24:	10800817 	ldw	r2,32(r2)
 2001a28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2001a2c:	e0bffc17 	ldw	r2,-16(fp)
 2001a30:	10800104 	addi	r2,r2,4
 2001a34:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2001a38:	003f8c06 	br	200186c <__alt_mem_onchip_memory2+0xfdff986c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2001a3c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2001a40:	0001883a 	nop
 2001a44:	e037883a 	mov	sp,fp
 2001a48:	df000017 	ldw	fp,0(sp)
 2001a4c:	dec00104 	addi	sp,sp,4
 2001a50:	f800283a 	ret

02001a54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2001a54:	defff804 	addi	sp,sp,-32
 2001a58:	df000715 	stw	fp,28(sp)
 2001a5c:	df000704 	addi	fp,sp,28
 2001a60:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2001a64:	e0bffb17 	ldw	r2,-20(fp)
 2001a68:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2001a6c:	e0bff917 	ldw	r2,-28(fp)
 2001a70:	10800017 	ldw	r2,0(r2)
 2001a74:	10800104 	addi	r2,r2,4
 2001a78:	10800037 	ldwio	r2,0(r2)
 2001a7c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2001a80:	e0bffa17 	ldw	r2,-24(fp)
 2001a84:	1081000c 	andi	r2,r2,1024
 2001a88:	10000b26 	beq	r2,zero,2001ab8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2001a8c:	e0bff917 	ldw	r2,-28(fp)
 2001a90:	10800017 	ldw	r2,0(r2)
 2001a94:	10800104 	addi	r2,r2,4
 2001a98:	1007883a 	mov	r3,r2
 2001a9c:	e0bff917 	ldw	r2,-28(fp)
 2001aa0:	10800817 	ldw	r2,32(r2)
 2001aa4:	10810014 	ori	r2,r2,1024
 2001aa8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2001aac:	e0bff917 	ldw	r2,-28(fp)
 2001ab0:	10000915 	stw	zero,36(r2)
 2001ab4:	00000a06 	br	2001ae0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2001ab8:	e0bff917 	ldw	r2,-28(fp)
 2001abc:	10c00917 	ldw	r3,36(r2)
 2001ac0:	00a00034 	movhi	r2,32768
 2001ac4:	10bfff04 	addi	r2,r2,-4
 2001ac8:	10c00536 	bltu	r2,r3,2001ae0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2001acc:	e0bff917 	ldw	r2,-28(fp)
 2001ad0:	10800917 	ldw	r2,36(r2)
 2001ad4:	10c00044 	addi	r3,r2,1
 2001ad8:	e0bff917 	ldw	r2,-28(fp)
 2001adc:	10c00915 	stw	r3,36(r2)
 2001ae0:	d0a4db17 	ldw	r2,-27796(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2001ae4:	e037883a 	mov	sp,fp
 2001ae8:	df000017 	ldw	fp,0(sp)
 2001aec:	dec00104 	addi	sp,sp,4
 2001af0:	f800283a 	ret

02001af4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2001af4:	defffd04 	addi	sp,sp,-12
 2001af8:	df000215 	stw	fp,8(sp)
 2001afc:	df000204 	addi	fp,sp,8
 2001b00:	e13ffe15 	stw	r4,-8(fp)
 2001b04:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2001b08:	00000506 	br	2001b20 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2001b0c:	e0bfff17 	ldw	r2,-4(fp)
 2001b10:	1090000c 	andi	r2,r2,16384
 2001b14:	10000226 	beq	r2,zero,2001b20 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2001b18:	00bffd44 	movi	r2,-11
 2001b1c:	00000b06 	br	2001b4c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2001b20:	e0bffe17 	ldw	r2,-8(fp)
 2001b24:	10c00d17 	ldw	r3,52(r2)
 2001b28:	e0bffe17 	ldw	r2,-8(fp)
 2001b2c:	10800c17 	ldw	r2,48(r2)
 2001b30:	18800526 	beq	r3,r2,2001b48 <altera_avalon_jtag_uart_close+0x54>
 2001b34:	e0bffe17 	ldw	r2,-8(fp)
 2001b38:	10c00917 	ldw	r3,36(r2)
 2001b3c:	e0bffe17 	ldw	r2,-8(fp)
 2001b40:	10800117 	ldw	r2,4(r2)
 2001b44:	18bff136 	bltu	r3,r2,2001b0c <__alt_mem_onchip_memory2+0xfdff9b0c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2001b48:	0005883a 	mov	r2,zero
}
 2001b4c:	e037883a 	mov	sp,fp
 2001b50:	df000017 	ldw	fp,0(sp)
 2001b54:	dec00104 	addi	sp,sp,4
 2001b58:	f800283a 	ret

02001b5c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2001b5c:	defffa04 	addi	sp,sp,-24
 2001b60:	df000515 	stw	fp,20(sp)
 2001b64:	df000504 	addi	fp,sp,20
 2001b68:	e13ffd15 	stw	r4,-12(fp)
 2001b6c:	e17ffe15 	stw	r5,-8(fp)
 2001b70:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2001b74:	00bff9c4 	movi	r2,-25
 2001b78:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2001b7c:	e0bffe17 	ldw	r2,-8(fp)
 2001b80:	10da8060 	cmpeqi	r3,r2,27137
 2001b84:	1800031e 	bne	r3,zero,2001b94 <altera_avalon_jtag_uart_ioctl+0x38>
 2001b88:	109a80a0 	cmpeqi	r2,r2,27138
 2001b8c:	1000181e 	bne	r2,zero,2001bf0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 2001b90:	00002906 	br	2001c38 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2001b94:	e0bffd17 	ldw	r2,-12(fp)
 2001b98:	10c00117 	ldw	r3,4(r2)
 2001b9c:	00a00034 	movhi	r2,32768
 2001ba0:	10bfffc4 	addi	r2,r2,-1
 2001ba4:	18802126 	beq	r3,r2,2001c2c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 2001ba8:	e0bfff17 	ldw	r2,-4(fp)
 2001bac:	10800017 	ldw	r2,0(r2)
 2001bb0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2001bb4:	e0bffc17 	ldw	r2,-16(fp)
 2001bb8:	10800090 	cmplti	r2,r2,2
 2001bbc:	1000061e 	bne	r2,zero,2001bd8 <altera_avalon_jtag_uart_ioctl+0x7c>
 2001bc0:	e0fffc17 	ldw	r3,-16(fp)
 2001bc4:	00a00034 	movhi	r2,32768
 2001bc8:	10bfffc4 	addi	r2,r2,-1
 2001bcc:	18800226 	beq	r3,r2,2001bd8 <altera_avalon_jtag_uart_ioctl+0x7c>
 2001bd0:	e0bffc17 	ldw	r2,-16(fp)
 2001bd4:	00000206 	br	2001be0 <altera_avalon_jtag_uart_ioctl+0x84>
 2001bd8:	00a00034 	movhi	r2,32768
 2001bdc:	10bfff84 	addi	r2,r2,-2
 2001be0:	e0fffd17 	ldw	r3,-12(fp)
 2001be4:	18800115 	stw	r2,4(r3)
      rc = 0;
 2001be8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2001bec:	00000f06 	br	2001c2c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2001bf0:	e0bffd17 	ldw	r2,-12(fp)
 2001bf4:	10c00117 	ldw	r3,4(r2)
 2001bf8:	00a00034 	movhi	r2,32768
 2001bfc:	10bfffc4 	addi	r2,r2,-1
 2001c00:	18800c26 	beq	r3,r2,2001c34 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2001c04:	e0bffd17 	ldw	r2,-12(fp)
 2001c08:	10c00917 	ldw	r3,36(r2)
 2001c0c:	e0bffd17 	ldw	r2,-12(fp)
 2001c10:	10800117 	ldw	r2,4(r2)
 2001c14:	1885803a 	cmpltu	r2,r3,r2
 2001c18:	10c03fcc 	andi	r3,r2,255
 2001c1c:	e0bfff17 	ldw	r2,-4(fp)
 2001c20:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2001c24:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2001c28:	00000206 	br	2001c34 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2001c2c:	0001883a 	nop
 2001c30:	00000106 	br	2001c38 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2001c34:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2001c38:	e0bffb17 	ldw	r2,-20(fp)
}
 2001c3c:	e037883a 	mov	sp,fp
 2001c40:	df000017 	ldw	fp,0(sp)
 2001c44:	dec00104 	addi	sp,sp,4
 2001c48:	f800283a 	ret

02001c4c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2001c4c:	defff304 	addi	sp,sp,-52
 2001c50:	dfc00c15 	stw	ra,48(sp)
 2001c54:	df000b15 	stw	fp,44(sp)
 2001c58:	df000b04 	addi	fp,sp,44
 2001c5c:	e13ffc15 	stw	r4,-16(fp)
 2001c60:	e17ffd15 	stw	r5,-12(fp)
 2001c64:	e1bffe15 	stw	r6,-8(fp)
 2001c68:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2001c6c:	e0bffd17 	ldw	r2,-12(fp)
 2001c70:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2001c74:	00004706 	br	2001d94 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2001c78:	e0bffc17 	ldw	r2,-16(fp)
 2001c7c:	10800a17 	ldw	r2,40(r2)
 2001c80:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2001c84:	e0bffc17 	ldw	r2,-16(fp)
 2001c88:	10800b17 	ldw	r2,44(r2)
 2001c8c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 2001c90:	e0fff717 	ldw	r3,-36(fp)
 2001c94:	e0bff817 	ldw	r2,-32(fp)
 2001c98:	18800536 	bltu	r3,r2,2001cb0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2001c9c:	e0fff717 	ldw	r3,-36(fp)
 2001ca0:	e0bff817 	ldw	r2,-32(fp)
 2001ca4:	1885c83a 	sub	r2,r3,r2
 2001ca8:	e0bff615 	stw	r2,-40(fp)
 2001cac:	00000406 	br	2001cc0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2001cb0:	00c20004 	movi	r3,2048
 2001cb4:	e0bff817 	ldw	r2,-32(fp)
 2001cb8:	1885c83a 	sub	r2,r3,r2
 2001cbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2001cc0:	e0bff617 	ldw	r2,-40(fp)
 2001cc4:	10001e26 	beq	r2,zero,2001d40 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2001cc8:	e0fffe17 	ldw	r3,-8(fp)
 2001ccc:	e0bff617 	ldw	r2,-40(fp)
 2001cd0:	1880022e 	bgeu	r3,r2,2001cdc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 2001cd4:	e0bffe17 	ldw	r2,-8(fp)
 2001cd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2001cdc:	e0bffc17 	ldw	r2,-16(fp)
 2001ce0:	10c00e04 	addi	r3,r2,56
 2001ce4:	e0bff817 	ldw	r2,-32(fp)
 2001ce8:	1885883a 	add	r2,r3,r2
 2001cec:	e1bff617 	ldw	r6,-40(fp)
 2001cf0:	100b883a 	mov	r5,r2
 2001cf4:	e13ff517 	ldw	r4,-44(fp)
 2001cf8:	2002f940 	call	2002f94 <memcpy>
      ptr   += n;
 2001cfc:	e0fff517 	ldw	r3,-44(fp)
 2001d00:	e0bff617 	ldw	r2,-40(fp)
 2001d04:	1885883a 	add	r2,r3,r2
 2001d08:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2001d0c:	e0fffe17 	ldw	r3,-8(fp)
 2001d10:	e0bff617 	ldw	r2,-40(fp)
 2001d14:	1885c83a 	sub	r2,r3,r2
 2001d18:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001d1c:	e0fff817 	ldw	r3,-32(fp)
 2001d20:	e0bff617 	ldw	r2,-40(fp)
 2001d24:	1885883a 	add	r2,r3,r2
 2001d28:	10c1ffcc 	andi	r3,r2,2047
 2001d2c:	e0bffc17 	ldw	r2,-16(fp)
 2001d30:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2001d34:	e0bffe17 	ldw	r2,-8(fp)
 2001d38:	00bfcf16 	blt	zero,r2,2001c78 <__alt_mem_onchip_memory2+0xfdff9c78>
 2001d3c:	00000106 	br	2001d44 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2001d40:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2001d44:	e0fff517 	ldw	r3,-44(fp)
 2001d48:	e0bffd17 	ldw	r2,-12(fp)
 2001d4c:	1880141e 	bne	r3,r2,2001da0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2001d50:	e0bfff17 	ldw	r2,-4(fp)
 2001d54:	1090000c 	andi	r2,r2,16384
 2001d58:	1000131e 	bne	r2,zero,2001da8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2001d5c:	0001883a 	nop
 2001d60:	e0bffc17 	ldw	r2,-16(fp)
 2001d64:	10c00a17 	ldw	r3,40(r2)
 2001d68:	e0bff717 	ldw	r2,-36(fp)
 2001d6c:	1880051e 	bne	r3,r2,2001d84 <altera_avalon_jtag_uart_read+0x138>
 2001d70:	e0bffc17 	ldw	r2,-16(fp)
 2001d74:	10c00917 	ldw	r3,36(r2)
 2001d78:	e0bffc17 	ldw	r2,-16(fp)
 2001d7c:	10800117 	ldw	r2,4(r2)
 2001d80:	18bff736 	bltu	r3,r2,2001d60 <__alt_mem_onchip_memory2+0xfdff9d60>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2001d84:	e0bffc17 	ldw	r2,-16(fp)
 2001d88:	10c00a17 	ldw	r3,40(r2)
 2001d8c:	e0bff717 	ldw	r2,-36(fp)
 2001d90:	18800726 	beq	r3,r2,2001db0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2001d94:	e0bffe17 	ldw	r2,-8(fp)
 2001d98:	00bfb716 	blt	zero,r2,2001c78 <__alt_mem_onchip_memory2+0xfdff9c78>
 2001d9c:	00000506 	br	2001db4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2001da0:	0001883a 	nop
 2001da4:	00000306 	br	2001db4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2001da8:	0001883a 	nop
 2001dac:	00000106 	br	2001db4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2001db0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2001db4:	e0fff517 	ldw	r3,-44(fp)
 2001db8:	e0bffd17 	ldw	r2,-12(fp)
 2001dbc:	18801826 	beq	r3,r2,2001e20 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001dc0:	0005303a 	rdctl	r2,status
 2001dc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001dc8:	e0fffb17 	ldw	r3,-20(fp)
 2001dcc:	00bfff84 	movi	r2,-2
 2001dd0:	1884703a 	and	r2,r3,r2
 2001dd4:	1001703a 	wrctl	status,r2
  
  return context;
 2001dd8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2001ddc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2001de0:	e0bffc17 	ldw	r2,-16(fp)
 2001de4:	10800817 	ldw	r2,32(r2)
 2001de8:	10c00054 	ori	r3,r2,1
 2001dec:	e0bffc17 	ldw	r2,-16(fp)
 2001df0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001df4:	e0bffc17 	ldw	r2,-16(fp)
 2001df8:	10800017 	ldw	r2,0(r2)
 2001dfc:	10800104 	addi	r2,r2,4
 2001e00:	1007883a 	mov	r3,r2
 2001e04:	e0bffc17 	ldw	r2,-16(fp)
 2001e08:	10800817 	ldw	r2,32(r2)
 2001e0c:	18800035 	stwio	r2,0(r3)
 2001e10:	e0bffa17 	ldw	r2,-24(fp)
 2001e14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001e18:	e0bff917 	ldw	r2,-28(fp)
 2001e1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2001e20:	e0fff517 	ldw	r3,-44(fp)
 2001e24:	e0bffd17 	ldw	r2,-12(fp)
 2001e28:	18800426 	beq	r3,r2,2001e3c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 2001e2c:	e0fff517 	ldw	r3,-44(fp)
 2001e30:	e0bffd17 	ldw	r2,-12(fp)
 2001e34:	1885c83a 	sub	r2,r3,r2
 2001e38:	00000606 	br	2001e54 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 2001e3c:	e0bfff17 	ldw	r2,-4(fp)
 2001e40:	1090000c 	andi	r2,r2,16384
 2001e44:	10000226 	beq	r2,zero,2001e50 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2001e48:	00bffd44 	movi	r2,-11
 2001e4c:	00000106 	br	2001e54 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 2001e50:	00bffec4 	movi	r2,-5
}
 2001e54:	e037883a 	mov	sp,fp
 2001e58:	dfc00117 	ldw	ra,4(sp)
 2001e5c:	df000017 	ldw	fp,0(sp)
 2001e60:	dec00204 	addi	sp,sp,8
 2001e64:	f800283a 	ret

02001e68 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2001e68:	defff304 	addi	sp,sp,-52
 2001e6c:	dfc00c15 	stw	ra,48(sp)
 2001e70:	df000b15 	stw	fp,44(sp)
 2001e74:	df000b04 	addi	fp,sp,44
 2001e78:	e13ffc15 	stw	r4,-16(fp)
 2001e7c:	e17ffd15 	stw	r5,-12(fp)
 2001e80:	e1bffe15 	stw	r6,-8(fp)
 2001e84:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2001e88:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2001e8c:	e0bffd17 	ldw	r2,-12(fp)
 2001e90:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2001e94:	00003706 	br	2001f74 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2001e98:	e0bffc17 	ldw	r2,-16(fp)
 2001e9c:	10800c17 	ldw	r2,48(r2)
 2001ea0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 2001ea4:	e0bffc17 	ldw	r2,-16(fp)
 2001ea8:	10800d17 	ldw	r2,52(r2)
 2001eac:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2001eb0:	e0fff917 	ldw	r3,-28(fp)
 2001eb4:	e0bff517 	ldw	r2,-44(fp)
 2001eb8:	1880062e 	bgeu	r3,r2,2001ed4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2001ebc:	e0fff517 	ldw	r3,-44(fp)
 2001ec0:	e0bff917 	ldw	r2,-28(fp)
 2001ec4:	1885c83a 	sub	r2,r3,r2
 2001ec8:	10bfffc4 	addi	r2,r2,-1
 2001ecc:	e0bff615 	stw	r2,-40(fp)
 2001ed0:	00000b06 	br	2001f00 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2001ed4:	e0bff517 	ldw	r2,-44(fp)
 2001ed8:	10000526 	beq	r2,zero,2001ef0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2001edc:	00c20004 	movi	r3,2048
 2001ee0:	e0bff917 	ldw	r2,-28(fp)
 2001ee4:	1885c83a 	sub	r2,r3,r2
 2001ee8:	e0bff615 	stw	r2,-40(fp)
 2001eec:	00000406 	br	2001f00 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2001ef0:	00c1ffc4 	movi	r3,2047
 2001ef4:	e0bff917 	ldw	r2,-28(fp)
 2001ef8:	1885c83a 	sub	r2,r3,r2
 2001efc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2001f00:	e0bff617 	ldw	r2,-40(fp)
 2001f04:	10001e26 	beq	r2,zero,2001f80 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 2001f08:	e0fffe17 	ldw	r3,-8(fp)
 2001f0c:	e0bff617 	ldw	r2,-40(fp)
 2001f10:	1880022e 	bgeu	r3,r2,2001f1c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2001f14:	e0bffe17 	ldw	r2,-8(fp)
 2001f18:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2001f1c:	e0bffc17 	ldw	r2,-16(fp)
 2001f20:	10c20e04 	addi	r3,r2,2104
 2001f24:	e0bff917 	ldw	r2,-28(fp)
 2001f28:	1885883a 	add	r2,r3,r2
 2001f2c:	e1bff617 	ldw	r6,-40(fp)
 2001f30:	e17ffd17 	ldw	r5,-12(fp)
 2001f34:	1009883a 	mov	r4,r2
 2001f38:	2002f940 	call	2002f94 <memcpy>
      ptr   += n;
 2001f3c:	e0fffd17 	ldw	r3,-12(fp)
 2001f40:	e0bff617 	ldw	r2,-40(fp)
 2001f44:	1885883a 	add	r2,r3,r2
 2001f48:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2001f4c:	e0fffe17 	ldw	r3,-8(fp)
 2001f50:	e0bff617 	ldw	r2,-40(fp)
 2001f54:	1885c83a 	sub	r2,r3,r2
 2001f58:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001f5c:	e0fff917 	ldw	r3,-28(fp)
 2001f60:	e0bff617 	ldw	r2,-40(fp)
 2001f64:	1885883a 	add	r2,r3,r2
 2001f68:	10c1ffcc 	andi	r3,r2,2047
 2001f6c:	e0bffc17 	ldw	r2,-16(fp)
 2001f70:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2001f74:	e0bffe17 	ldw	r2,-8(fp)
 2001f78:	00bfc716 	blt	zero,r2,2001e98 <__alt_mem_onchip_memory2+0xfdff9e98>
 2001f7c:	00000106 	br	2001f84 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2001f80:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001f84:	0005303a 	rdctl	r2,status
 2001f88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001f8c:	e0fffb17 	ldw	r3,-20(fp)
 2001f90:	00bfff84 	movi	r2,-2
 2001f94:	1884703a 	and	r2,r3,r2
 2001f98:	1001703a 	wrctl	status,r2
  
  return context;
 2001f9c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2001fa0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2001fa4:	e0bffc17 	ldw	r2,-16(fp)
 2001fa8:	10800817 	ldw	r2,32(r2)
 2001fac:	10c00094 	ori	r3,r2,2
 2001fb0:	e0bffc17 	ldw	r2,-16(fp)
 2001fb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001fb8:	e0bffc17 	ldw	r2,-16(fp)
 2001fbc:	10800017 	ldw	r2,0(r2)
 2001fc0:	10800104 	addi	r2,r2,4
 2001fc4:	1007883a 	mov	r3,r2
 2001fc8:	e0bffc17 	ldw	r2,-16(fp)
 2001fcc:	10800817 	ldw	r2,32(r2)
 2001fd0:	18800035 	stwio	r2,0(r3)
 2001fd4:	e0bffa17 	ldw	r2,-24(fp)
 2001fd8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001fdc:	e0bff817 	ldw	r2,-32(fp)
 2001fe0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2001fe4:	e0bffe17 	ldw	r2,-8(fp)
 2001fe8:	0080100e 	bge	zero,r2,200202c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 2001fec:	e0bfff17 	ldw	r2,-4(fp)
 2001ff0:	1090000c 	andi	r2,r2,16384
 2001ff4:	1000101e 	bne	r2,zero,2002038 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2001ff8:	0001883a 	nop
 2001ffc:	e0bffc17 	ldw	r2,-16(fp)
 2002000:	10c00d17 	ldw	r3,52(r2)
 2002004:	e0bff517 	ldw	r2,-44(fp)
 2002008:	1880051e 	bne	r3,r2,2002020 <altera_avalon_jtag_uart_write+0x1b8>
 200200c:	e0bffc17 	ldw	r2,-16(fp)
 2002010:	10c00917 	ldw	r3,36(r2)
 2002014:	e0bffc17 	ldw	r2,-16(fp)
 2002018:	10800117 	ldw	r2,4(r2)
 200201c:	18bff736 	bltu	r3,r2,2001ffc <__alt_mem_onchip_memory2+0xfdff9ffc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2002020:	e0bffc17 	ldw	r2,-16(fp)
 2002024:	10800917 	ldw	r2,36(r2)
 2002028:	1000051e 	bne	r2,zero,2002040 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 200202c:	e0bffe17 	ldw	r2,-8(fp)
 2002030:	00bfd016 	blt	zero,r2,2001f74 <__alt_mem_onchip_memory2+0xfdff9f74>
 2002034:	00000306 	br	2002044 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2002038:	0001883a 	nop
 200203c:	00000106 	br	2002044 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2002040:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2002044:	e0fffd17 	ldw	r3,-12(fp)
 2002048:	e0bff717 	ldw	r2,-36(fp)
 200204c:	18800426 	beq	r3,r2,2002060 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 2002050:	e0fffd17 	ldw	r3,-12(fp)
 2002054:	e0bff717 	ldw	r2,-36(fp)
 2002058:	1885c83a 	sub	r2,r3,r2
 200205c:	00000606 	br	2002078 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 2002060:	e0bfff17 	ldw	r2,-4(fp)
 2002064:	1090000c 	andi	r2,r2,16384
 2002068:	10000226 	beq	r2,zero,2002074 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 200206c:	00bffd44 	movi	r2,-11
 2002070:	00000106 	br	2002078 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2002074:	00bffec4 	movi	r2,-5
}
 2002078:	e037883a 	mov	sp,fp
 200207c:	dfc00117 	ldw	ra,4(sp)
 2002080:	df000017 	ldw	fp,0(sp)
 2002084:	dec00204 	addi	sp,sp,8
 2002088:	f800283a 	ret

0200208c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200208c:	defff504 	addi	sp,sp,-44
 2002090:	df000a15 	stw	fp,40(sp)
 2002094:	df000a04 	addi	fp,sp,40
 2002098:	e13ffc15 	stw	r4,-16(fp)
 200209c:	e17ffd15 	stw	r5,-12(fp)
 20020a0:	e1bffe15 	stw	r6,-8(fp)
 20020a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20020a8:	e03ff615 	stw	zero,-40(fp)
 20020ac:	d0a4db17 	ldw	r2,-27796(gp)
  
  if (alt_ticks_per_second ())
 20020b0:	10003c26 	beq	r2,zero,20021a4 <alt_alarm_start+0x118>
  {
    if (alarm)
 20020b4:	e0bffc17 	ldw	r2,-16(fp)
 20020b8:	10003826 	beq	r2,zero,200219c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 20020bc:	e0bffc17 	ldw	r2,-16(fp)
 20020c0:	e0fffe17 	ldw	r3,-8(fp)
 20020c4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 20020c8:	e0bffc17 	ldw	r2,-16(fp)
 20020cc:	e0ffff17 	ldw	r3,-4(fp)
 20020d0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20020d4:	0005303a 	rdctl	r2,status
 20020d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20020dc:	e0fff917 	ldw	r3,-28(fp)
 20020e0:	00bfff84 	movi	r2,-2
 20020e4:	1884703a 	and	r2,r3,r2
 20020e8:	1001703a 	wrctl	status,r2
  
  return context;
 20020ec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 20020f0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20020f4:	d0a4dc17 	ldw	r2,-27792(gp)
      
      current_nticks = alt_nticks();
 20020f8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20020fc:	e0fffd17 	ldw	r3,-12(fp)
 2002100:	e0bff617 	ldw	r2,-40(fp)
 2002104:	1885883a 	add	r2,r3,r2
 2002108:	10c00044 	addi	r3,r2,1
 200210c:	e0bffc17 	ldw	r2,-16(fp)
 2002110:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2002114:	e0bffc17 	ldw	r2,-16(fp)
 2002118:	10c00217 	ldw	r3,8(r2)
 200211c:	e0bff617 	ldw	r2,-40(fp)
 2002120:	1880042e 	bgeu	r3,r2,2002134 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2002124:	e0bffc17 	ldw	r2,-16(fp)
 2002128:	00c00044 	movi	r3,1
 200212c:	10c00405 	stb	r3,16(r2)
 2002130:	00000206 	br	200213c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2002134:	e0bffc17 	ldw	r2,-16(fp)
 2002138:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200213c:	e0bffc17 	ldw	r2,-16(fp)
 2002140:	d0e00204 	addi	r3,gp,-32760
 2002144:	e0fffa15 	stw	r3,-24(fp)
 2002148:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200214c:	e0bffb17 	ldw	r2,-20(fp)
 2002150:	e0fffa17 	ldw	r3,-24(fp)
 2002154:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2002158:	e0bffa17 	ldw	r2,-24(fp)
 200215c:	10c00017 	ldw	r3,0(r2)
 2002160:	e0bffb17 	ldw	r2,-20(fp)
 2002164:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2002168:	e0bffa17 	ldw	r2,-24(fp)
 200216c:	10800017 	ldw	r2,0(r2)
 2002170:	e0fffb17 	ldw	r3,-20(fp)
 2002174:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2002178:	e0bffa17 	ldw	r2,-24(fp)
 200217c:	e0fffb17 	ldw	r3,-20(fp)
 2002180:	10c00015 	stw	r3,0(r2)
 2002184:	e0bff817 	ldw	r2,-32(fp)
 2002188:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200218c:	e0bff717 	ldw	r2,-36(fp)
 2002190:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2002194:	0005883a 	mov	r2,zero
 2002198:	00000306 	br	20021a8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 200219c:	00bffa84 	movi	r2,-22
 20021a0:	00000106 	br	20021a8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 20021a4:	00bfde84 	movi	r2,-134
  }
}
 20021a8:	e037883a 	mov	sp,fp
 20021ac:	df000017 	ldw	fp,0(sp)
 20021b0:	dec00104 	addi	sp,sp,4
 20021b4:	f800283a 	ret

020021b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20021b8:	defffe04 	addi	sp,sp,-8
 20021bc:	dfc00115 	stw	ra,4(sp)
 20021c0:	df000015 	stw	fp,0(sp)
 20021c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20021c8:	d0a00917 	ldw	r2,-32732(gp)
 20021cc:	10000326 	beq	r2,zero,20021dc <alt_get_errno+0x24>
 20021d0:	d0a00917 	ldw	r2,-32732(gp)
 20021d4:	103ee83a 	callr	r2
 20021d8:	00000106 	br	20021e0 <alt_get_errno+0x28>
 20021dc:	d0a4d304 	addi	r2,gp,-27828
}
 20021e0:	e037883a 	mov	sp,fp
 20021e4:	dfc00117 	ldw	ra,4(sp)
 20021e8:	df000017 	ldw	fp,0(sp)
 20021ec:	dec00204 	addi	sp,sp,8
 20021f0:	f800283a 	ret

020021f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20021f4:	defffb04 	addi	sp,sp,-20
 20021f8:	dfc00415 	stw	ra,16(sp)
 20021fc:	df000315 	stw	fp,12(sp)
 2002200:	df000304 	addi	fp,sp,12
 2002204:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2002208:	e0bfff17 	ldw	r2,-4(fp)
 200220c:	10000616 	blt	r2,zero,2002228 <close+0x34>
 2002210:	e0bfff17 	ldw	r2,-4(fp)
 2002214:	10c00324 	muli	r3,r2,12
 2002218:	00808034 	movhi	r2,512
 200221c:	1092bf04 	addi	r2,r2,19196
 2002220:	1885883a 	add	r2,r3,r2
 2002224:	00000106 	br	200222c <close+0x38>
 2002228:	0005883a 	mov	r2,zero
 200222c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2002230:	e0bffd17 	ldw	r2,-12(fp)
 2002234:	10001926 	beq	r2,zero,200229c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2002238:	e0bffd17 	ldw	r2,-12(fp)
 200223c:	10800017 	ldw	r2,0(r2)
 2002240:	10800417 	ldw	r2,16(r2)
 2002244:	10000626 	beq	r2,zero,2002260 <close+0x6c>
 2002248:	e0bffd17 	ldw	r2,-12(fp)
 200224c:	10800017 	ldw	r2,0(r2)
 2002250:	10800417 	ldw	r2,16(r2)
 2002254:	e13ffd17 	ldw	r4,-12(fp)
 2002258:	103ee83a 	callr	r2
 200225c:	00000106 	br	2002264 <close+0x70>
 2002260:	0005883a 	mov	r2,zero
 2002264:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2002268:	e13fff17 	ldw	r4,-4(fp)
 200226c:	2002b400 	call	2002b40 <alt_release_fd>
    if (rval < 0)
 2002270:	e0bffe17 	ldw	r2,-8(fp)
 2002274:	1000070e 	bge	r2,zero,2002294 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 2002278:	20021b80 	call	20021b8 <alt_get_errno>
 200227c:	1007883a 	mov	r3,r2
 2002280:	e0bffe17 	ldw	r2,-8(fp)
 2002284:	0085c83a 	sub	r2,zero,r2
 2002288:	18800015 	stw	r2,0(r3)
      return -1;
 200228c:	00bfffc4 	movi	r2,-1
 2002290:	00000706 	br	20022b0 <close+0xbc>
    }
    return 0;
 2002294:	0005883a 	mov	r2,zero
 2002298:	00000506 	br	20022b0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200229c:	20021b80 	call	20021b8 <alt_get_errno>
 20022a0:	1007883a 	mov	r3,r2
 20022a4:	00801444 	movi	r2,81
 20022a8:	18800015 	stw	r2,0(r3)
    return -1;
 20022ac:	00bfffc4 	movi	r2,-1
  }
}
 20022b0:	e037883a 	mov	sp,fp
 20022b4:	dfc00117 	ldw	ra,4(sp)
 20022b8:	df000017 	ldw	fp,0(sp)
 20022bc:	dec00204 	addi	sp,sp,8
 20022c0:	f800283a 	ret

020022c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 20022c4:	defffe04 	addi	sp,sp,-8
 20022c8:	df000115 	stw	fp,4(sp)
 20022cc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 20022d0:	e03fff15 	stw	zero,-4(fp)
 20022d4:	00000506 	br	20022ec <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 20022d8:	e0bfff17 	ldw	r2,-4(fp)
 20022dc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 20022e0:	e0bfff17 	ldw	r2,-4(fp)
 20022e4:	10800804 	addi	r2,r2,32
 20022e8:	e0bfff15 	stw	r2,-4(fp)
 20022ec:	e0bfff17 	ldw	r2,-4(fp)
 20022f0:	10820030 	cmpltui	r2,r2,2048
 20022f4:	103ff81e 	bne	r2,zero,20022d8 <__alt_mem_onchip_memory2+0xfdffa2d8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 20022f8:	0001883a 	nop
 20022fc:	e037883a 	mov	sp,fp
 2002300:	df000017 	ldw	fp,0(sp)
 2002304:	dec00104 	addi	sp,sp,4
 2002308:	f800283a 	ret

0200230c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200230c:	defffc04 	addi	sp,sp,-16
 2002310:	df000315 	stw	fp,12(sp)
 2002314:	df000304 	addi	fp,sp,12
 2002318:	e13ffd15 	stw	r4,-12(fp)
 200231c:	e17ffe15 	stw	r5,-8(fp)
 2002320:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2002324:	e0bfff17 	ldw	r2,-4(fp)
}
 2002328:	e037883a 	mov	sp,fp
 200232c:	df000017 	ldw	fp,0(sp)
 2002330:	dec00104 	addi	sp,sp,4
 2002334:	f800283a 	ret

02002338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002338:	defffe04 	addi	sp,sp,-8
 200233c:	dfc00115 	stw	ra,4(sp)
 2002340:	df000015 	stw	fp,0(sp)
 2002344:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002348:	d0a00917 	ldw	r2,-32732(gp)
 200234c:	10000326 	beq	r2,zero,200235c <alt_get_errno+0x24>
 2002350:	d0a00917 	ldw	r2,-32732(gp)
 2002354:	103ee83a 	callr	r2
 2002358:	00000106 	br	2002360 <alt_get_errno+0x28>
 200235c:	d0a4d304 	addi	r2,gp,-27828
}
 2002360:	e037883a 	mov	sp,fp
 2002364:	dfc00117 	ldw	ra,4(sp)
 2002368:	df000017 	ldw	fp,0(sp)
 200236c:	dec00204 	addi	sp,sp,8
 2002370:	f800283a 	ret

02002374 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2002374:	defffa04 	addi	sp,sp,-24
 2002378:	dfc00515 	stw	ra,20(sp)
 200237c:	df000415 	stw	fp,16(sp)
 2002380:	df000404 	addi	fp,sp,16
 2002384:	e13ffe15 	stw	r4,-8(fp)
 2002388:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200238c:	e0bffe17 	ldw	r2,-8(fp)
 2002390:	10000326 	beq	r2,zero,20023a0 <alt_dev_llist_insert+0x2c>
 2002394:	e0bffe17 	ldw	r2,-8(fp)
 2002398:	10800217 	ldw	r2,8(r2)
 200239c:	1000061e 	bne	r2,zero,20023b8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 20023a0:	20023380 	call	2002338 <alt_get_errno>
 20023a4:	1007883a 	mov	r3,r2
 20023a8:	00800584 	movi	r2,22
 20023ac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20023b0:	00bffa84 	movi	r2,-22
 20023b4:	00001306 	br	2002404 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20023b8:	e0bffe17 	ldw	r2,-8(fp)
 20023bc:	e0ffff17 	ldw	r3,-4(fp)
 20023c0:	e0fffc15 	stw	r3,-16(fp)
 20023c4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20023c8:	e0bffd17 	ldw	r2,-12(fp)
 20023cc:	e0fffc17 	ldw	r3,-16(fp)
 20023d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20023d4:	e0bffc17 	ldw	r2,-16(fp)
 20023d8:	10c00017 	ldw	r3,0(r2)
 20023dc:	e0bffd17 	ldw	r2,-12(fp)
 20023e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20023e4:	e0bffc17 	ldw	r2,-16(fp)
 20023e8:	10800017 	ldw	r2,0(r2)
 20023ec:	e0fffd17 	ldw	r3,-12(fp)
 20023f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20023f4:	e0bffc17 	ldw	r2,-16(fp)
 20023f8:	e0fffd17 	ldw	r3,-12(fp)
 20023fc:	10c00015 	stw	r3,0(r2)

  return 0;  
 2002400:	0005883a 	mov	r2,zero
}
 2002404:	e037883a 	mov	sp,fp
 2002408:	dfc00117 	ldw	ra,4(sp)
 200240c:	df000017 	ldw	fp,0(sp)
 2002410:	dec00204 	addi	sp,sp,8
 2002414:	f800283a 	ret

02002418 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2002418:	defffd04 	addi	sp,sp,-12
 200241c:	dfc00215 	stw	ra,8(sp)
 2002420:	df000115 	stw	fp,4(sp)
 2002424:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2002428:	00808034 	movhi	r2,512
 200242c:	108e0304 	addi	r2,r2,14348
 2002430:	e0bfff15 	stw	r2,-4(fp)
 2002434:	00000606 	br	2002450 <_do_ctors+0x38>
        (*ctor) (); 
 2002438:	e0bfff17 	ldw	r2,-4(fp)
 200243c:	10800017 	ldw	r2,0(r2)
 2002440:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2002444:	e0bfff17 	ldw	r2,-4(fp)
 2002448:	10bfff04 	addi	r2,r2,-4
 200244c:	e0bfff15 	stw	r2,-4(fp)
 2002450:	e0ffff17 	ldw	r3,-4(fp)
 2002454:	00808034 	movhi	r2,512
 2002458:	108e0404 	addi	r2,r2,14352
 200245c:	18bff62e 	bgeu	r3,r2,2002438 <__alt_mem_onchip_memory2+0xfdffa438>
        (*ctor) (); 
}
 2002460:	0001883a 	nop
 2002464:	e037883a 	mov	sp,fp
 2002468:	dfc00117 	ldw	ra,4(sp)
 200246c:	df000017 	ldw	fp,0(sp)
 2002470:	dec00204 	addi	sp,sp,8
 2002474:	f800283a 	ret

02002478 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2002478:	defffd04 	addi	sp,sp,-12
 200247c:	dfc00215 	stw	ra,8(sp)
 2002480:	df000115 	stw	fp,4(sp)
 2002484:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2002488:	00808034 	movhi	r2,512
 200248c:	108e0304 	addi	r2,r2,14348
 2002490:	e0bfff15 	stw	r2,-4(fp)
 2002494:	00000606 	br	20024b0 <_do_dtors+0x38>
        (*dtor) (); 
 2002498:	e0bfff17 	ldw	r2,-4(fp)
 200249c:	10800017 	ldw	r2,0(r2)
 20024a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20024a4:	e0bfff17 	ldw	r2,-4(fp)
 20024a8:	10bfff04 	addi	r2,r2,-4
 20024ac:	e0bfff15 	stw	r2,-4(fp)
 20024b0:	e0ffff17 	ldw	r3,-4(fp)
 20024b4:	00808034 	movhi	r2,512
 20024b8:	108e0404 	addi	r2,r2,14352
 20024bc:	18bff62e 	bgeu	r3,r2,2002498 <__alt_mem_onchip_memory2+0xfdffa498>
        (*dtor) (); 
}
 20024c0:	0001883a 	nop
 20024c4:	e037883a 	mov	sp,fp
 20024c8:	dfc00117 	ldw	ra,4(sp)
 20024cc:	df000017 	ldw	fp,0(sp)
 20024d0:	dec00204 	addi	sp,sp,8
 20024d4:	f800283a 	ret

020024d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20024d8:	defffe04 	addi	sp,sp,-8
 20024dc:	dfc00115 	stw	ra,4(sp)
 20024e0:	df000015 	stw	fp,0(sp)
 20024e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 20024e8:	01440004 	movi	r5,4096
 20024ec:	0009883a 	mov	r4,zero
 20024f0:	2002e040 	call	2002e04 <alt_icache_flush>
#endif
}
 20024f4:	0001883a 	nop
 20024f8:	e037883a 	mov	sp,fp
 20024fc:	dfc00117 	ldw	ra,4(sp)
 2002500:	df000017 	ldw	fp,0(sp)
 2002504:	dec00204 	addi	sp,sp,8
 2002508:	f800283a 	ret

0200250c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200250c:	defff904 	addi	sp,sp,-28
 2002510:	dfc00615 	stw	ra,24(sp)
 2002514:	df000515 	stw	fp,20(sp)
 2002518:	df000504 	addi	fp,sp,20
 200251c:	e13ffc15 	stw	r4,-16(fp)
 2002520:	e17ffd15 	stw	r5,-12(fp)
 2002524:	e1bffe15 	stw	r6,-8(fp)
 2002528:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 200252c:	e0800217 	ldw	r2,8(fp)
 2002530:	d8800015 	stw	r2,0(sp)
 2002534:	e1ffff17 	ldw	r7,-4(fp)
 2002538:	e1bffe17 	ldw	r6,-8(fp)
 200253c:	e17ffd17 	ldw	r5,-12(fp)
 2002540:	e13ffc17 	ldw	r4,-16(fp)
 2002544:	20026bc0 	call	20026bc <alt_iic_isr_register>
}  
 2002548:	e037883a 	mov	sp,fp
 200254c:	dfc00117 	ldw	ra,4(sp)
 2002550:	df000017 	ldw	fp,0(sp)
 2002554:	dec00204 	addi	sp,sp,8
 2002558:	f800283a 	ret

0200255c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 200255c:	defff904 	addi	sp,sp,-28
 2002560:	df000615 	stw	fp,24(sp)
 2002564:	df000604 	addi	fp,sp,24
 2002568:	e13ffe15 	stw	r4,-8(fp)
 200256c:	e17fff15 	stw	r5,-4(fp)
 2002570:	e0bfff17 	ldw	r2,-4(fp)
 2002574:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002578:	0005303a 	rdctl	r2,status
 200257c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002580:	e0fffb17 	ldw	r3,-20(fp)
 2002584:	00bfff84 	movi	r2,-2
 2002588:	1884703a 	and	r2,r3,r2
 200258c:	1001703a 	wrctl	status,r2
  
  return context;
 2002590:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2002594:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2002598:	00c00044 	movi	r3,1
 200259c:	e0bffa17 	ldw	r2,-24(fp)
 20025a0:	1884983a 	sll	r2,r3,r2
 20025a4:	1007883a 	mov	r3,r2
 20025a8:	d0a4dd17 	ldw	r2,-27788(gp)
 20025ac:	1884b03a 	or	r2,r3,r2
 20025b0:	d0a4dd15 	stw	r2,-27788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20025b4:	d0a4dd17 	ldw	r2,-27788(gp)
 20025b8:	100170fa 	wrctl	ienable,r2
 20025bc:	e0bffc17 	ldw	r2,-16(fp)
 20025c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20025c4:	e0bffd17 	ldw	r2,-12(fp)
 20025c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20025cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 20025d0:	0001883a 	nop
}
 20025d4:	e037883a 	mov	sp,fp
 20025d8:	df000017 	ldw	fp,0(sp)
 20025dc:	dec00104 	addi	sp,sp,4
 20025e0:	f800283a 	ret

020025e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 20025e4:	defff904 	addi	sp,sp,-28
 20025e8:	df000615 	stw	fp,24(sp)
 20025ec:	df000604 	addi	fp,sp,24
 20025f0:	e13ffe15 	stw	r4,-8(fp)
 20025f4:	e17fff15 	stw	r5,-4(fp)
 20025f8:	e0bfff17 	ldw	r2,-4(fp)
 20025fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002600:	0005303a 	rdctl	r2,status
 2002604:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002608:	e0fffb17 	ldw	r3,-20(fp)
 200260c:	00bfff84 	movi	r2,-2
 2002610:	1884703a 	and	r2,r3,r2
 2002614:	1001703a 	wrctl	status,r2
  
  return context;
 2002618:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200261c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2002620:	00c00044 	movi	r3,1
 2002624:	e0bffa17 	ldw	r2,-24(fp)
 2002628:	1884983a 	sll	r2,r3,r2
 200262c:	0084303a 	nor	r2,zero,r2
 2002630:	1007883a 	mov	r3,r2
 2002634:	d0a4dd17 	ldw	r2,-27788(gp)
 2002638:	1884703a 	and	r2,r3,r2
 200263c:	d0a4dd15 	stw	r2,-27788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2002640:	d0a4dd17 	ldw	r2,-27788(gp)
 2002644:	100170fa 	wrctl	ienable,r2
 2002648:	e0bffc17 	ldw	r2,-16(fp)
 200264c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002650:	e0bffd17 	ldw	r2,-12(fp)
 2002654:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2002658:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 200265c:	0001883a 	nop
}
 2002660:	e037883a 	mov	sp,fp
 2002664:	df000017 	ldw	fp,0(sp)
 2002668:	dec00104 	addi	sp,sp,4
 200266c:	f800283a 	ret

02002670 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2002670:	defffc04 	addi	sp,sp,-16
 2002674:	df000315 	stw	fp,12(sp)
 2002678:	df000304 	addi	fp,sp,12
 200267c:	e13ffe15 	stw	r4,-8(fp)
 2002680:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2002684:	000530fa 	rdctl	r2,ienable
 2002688:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 200268c:	00c00044 	movi	r3,1
 2002690:	e0bfff17 	ldw	r2,-4(fp)
 2002694:	1884983a 	sll	r2,r3,r2
 2002698:	1007883a 	mov	r3,r2
 200269c:	e0bffd17 	ldw	r2,-12(fp)
 20026a0:	1884703a 	and	r2,r3,r2
 20026a4:	1004c03a 	cmpne	r2,r2,zero
 20026a8:	10803fcc 	andi	r2,r2,255
}
 20026ac:	e037883a 	mov	sp,fp
 20026b0:	df000017 	ldw	fp,0(sp)
 20026b4:	dec00104 	addi	sp,sp,4
 20026b8:	f800283a 	ret

020026bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20026bc:	defff504 	addi	sp,sp,-44
 20026c0:	dfc00a15 	stw	ra,40(sp)
 20026c4:	df000915 	stw	fp,36(sp)
 20026c8:	df000904 	addi	fp,sp,36
 20026cc:	e13ffc15 	stw	r4,-16(fp)
 20026d0:	e17ffd15 	stw	r5,-12(fp)
 20026d4:	e1bffe15 	stw	r6,-8(fp)
 20026d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 20026dc:	00bffa84 	movi	r2,-22
 20026e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 20026e4:	e0bffd17 	ldw	r2,-12(fp)
 20026e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 20026ec:	e0bff817 	ldw	r2,-32(fp)
 20026f0:	10800808 	cmpgei	r2,r2,32
 20026f4:	1000271e 	bne	r2,zero,2002794 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20026f8:	0005303a 	rdctl	r2,status
 20026fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002700:	e0fffb17 	ldw	r3,-20(fp)
 2002704:	00bfff84 	movi	r2,-2
 2002708:	1884703a 	and	r2,r3,r2
 200270c:	1001703a 	wrctl	status,r2
  
  return context;
 2002710:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2002714:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 2002718:	00808034 	movhi	r2,512
 200271c:	1097fe04 	addi	r2,r2,24568
 2002720:	e0fff817 	ldw	r3,-32(fp)
 2002724:	180690fa 	slli	r3,r3,3
 2002728:	10c5883a 	add	r2,r2,r3
 200272c:	e0fffe17 	ldw	r3,-8(fp)
 2002730:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2002734:	00808034 	movhi	r2,512
 2002738:	1097fe04 	addi	r2,r2,24568
 200273c:	e0fff817 	ldw	r3,-32(fp)
 2002740:	180690fa 	slli	r3,r3,3
 2002744:	10c5883a 	add	r2,r2,r3
 2002748:	10800104 	addi	r2,r2,4
 200274c:	e0ffff17 	ldw	r3,-4(fp)
 2002750:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2002754:	e0bffe17 	ldw	r2,-8(fp)
 2002758:	10000526 	beq	r2,zero,2002770 <alt_iic_isr_register+0xb4>
 200275c:	e0bff817 	ldw	r2,-32(fp)
 2002760:	100b883a 	mov	r5,r2
 2002764:	e13ffc17 	ldw	r4,-16(fp)
 2002768:	200255c0 	call	200255c <alt_ic_irq_enable>
 200276c:	00000406 	br	2002780 <alt_iic_isr_register+0xc4>
 2002770:	e0bff817 	ldw	r2,-32(fp)
 2002774:	100b883a 	mov	r5,r2
 2002778:	e13ffc17 	ldw	r4,-16(fp)
 200277c:	20025e40 	call	20025e4 <alt_ic_irq_disable>
 2002780:	e0bff715 	stw	r2,-36(fp)
 2002784:	e0bffa17 	ldw	r2,-24(fp)
 2002788:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200278c:	e0bff917 	ldw	r2,-28(fp)
 2002790:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2002794:	e0bff717 	ldw	r2,-36(fp)
}
 2002798:	e037883a 	mov	sp,fp
 200279c:	dfc00117 	ldw	ra,4(sp)
 20027a0:	df000017 	ldw	fp,0(sp)
 20027a4:	dec00204 	addi	sp,sp,8
 20027a8:	f800283a 	ret

020027ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 20027ac:	defff904 	addi	sp,sp,-28
 20027b0:	dfc00615 	stw	ra,24(sp)
 20027b4:	df000515 	stw	fp,20(sp)
 20027b8:	df000504 	addi	fp,sp,20
 20027bc:	e13ffc15 	stw	r4,-16(fp)
 20027c0:	e17ffd15 	stw	r5,-12(fp)
 20027c4:	e1bffe15 	stw	r6,-8(fp)
 20027c8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 20027cc:	e1bfff17 	ldw	r6,-4(fp)
 20027d0:	e17ffe17 	ldw	r5,-8(fp)
 20027d4:	e13ffd17 	ldw	r4,-12(fp)
 20027d8:	20029ec0 	call	20029ec <open>
 20027dc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 20027e0:	e0bffb17 	ldw	r2,-20(fp)
 20027e4:	10001c16 	blt	r2,zero,2002858 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 20027e8:	00808034 	movhi	r2,512
 20027ec:	1092bf04 	addi	r2,r2,19196
 20027f0:	e0fffb17 	ldw	r3,-20(fp)
 20027f4:	18c00324 	muli	r3,r3,12
 20027f8:	10c5883a 	add	r2,r2,r3
 20027fc:	10c00017 	ldw	r3,0(r2)
 2002800:	e0bffc17 	ldw	r2,-16(fp)
 2002804:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2002808:	00808034 	movhi	r2,512
 200280c:	1092bf04 	addi	r2,r2,19196
 2002810:	e0fffb17 	ldw	r3,-20(fp)
 2002814:	18c00324 	muli	r3,r3,12
 2002818:	10c5883a 	add	r2,r2,r3
 200281c:	10800104 	addi	r2,r2,4
 2002820:	10c00017 	ldw	r3,0(r2)
 2002824:	e0bffc17 	ldw	r2,-16(fp)
 2002828:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200282c:	00808034 	movhi	r2,512
 2002830:	1092bf04 	addi	r2,r2,19196
 2002834:	e0fffb17 	ldw	r3,-20(fp)
 2002838:	18c00324 	muli	r3,r3,12
 200283c:	10c5883a 	add	r2,r2,r3
 2002840:	10800204 	addi	r2,r2,8
 2002844:	10c00017 	ldw	r3,0(r2)
 2002848:	e0bffc17 	ldw	r2,-16(fp)
 200284c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2002850:	e13ffb17 	ldw	r4,-20(fp)
 2002854:	2002b400 	call	2002b40 <alt_release_fd>
  }
} 
 2002858:	0001883a 	nop
 200285c:	e037883a 	mov	sp,fp
 2002860:	dfc00117 	ldw	ra,4(sp)
 2002864:	df000017 	ldw	fp,0(sp)
 2002868:	dec00204 	addi	sp,sp,8
 200286c:	f800283a 	ret

02002870 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2002870:	defffb04 	addi	sp,sp,-20
 2002874:	dfc00415 	stw	ra,16(sp)
 2002878:	df000315 	stw	fp,12(sp)
 200287c:	df000304 	addi	fp,sp,12
 2002880:	e13ffd15 	stw	r4,-12(fp)
 2002884:	e17ffe15 	stw	r5,-8(fp)
 2002888:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 200288c:	01c07fc4 	movi	r7,511
 2002890:	01800044 	movi	r6,1
 2002894:	e17ffd17 	ldw	r5,-12(fp)
 2002898:	01008034 	movhi	r4,512
 200289c:	2112c204 	addi	r4,r4,19208
 20028a0:	20027ac0 	call	20027ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 20028a4:	01c07fc4 	movi	r7,511
 20028a8:	000d883a 	mov	r6,zero
 20028ac:	e17ffe17 	ldw	r5,-8(fp)
 20028b0:	01008034 	movhi	r4,512
 20028b4:	2112bf04 	addi	r4,r4,19196
 20028b8:	20027ac0 	call	20027ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 20028bc:	01c07fc4 	movi	r7,511
 20028c0:	01800044 	movi	r6,1
 20028c4:	e17fff17 	ldw	r5,-4(fp)
 20028c8:	01008034 	movhi	r4,512
 20028cc:	2112c504 	addi	r4,r4,19220
 20028d0:	20027ac0 	call	20027ac <alt_open_fd>
}  
 20028d4:	0001883a 	nop
 20028d8:	e037883a 	mov	sp,fp
 20028dc:	dfc00117 	ldw	ra,4(sp)
 20028e0:	df000017 	ldw	fp,0(sp)
 20028e4:	dec00204 	addi	sp,sp,8
 20028e8:	f800283a 	ret

020028ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20028ec:	defffe04 	addi	sp,sp,-8
 20028f0:	dfc00115 	stw	ra,4(sp)
 20028f4:	df000015 	stw	fp,0(sp)
 20028f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20028fc:	d0a00917 	ldw	r2,-32732(gp)
 2002900:	10000326 	beq	r2,zero,2002910 <alt_get_errno+0x24>
 2002904:	d0a00917 	ldw	r2,-32732(gp)
 2002908:	103ee83a 	callr	r2
 200290c:	00000106 	br	2002914 <alt_get_errno+0x28>
 2002910:	d0a4d304 	addi	r2,gp,-27828
}
 2002914:	e037883a 	mov	sp,fp
 2002918:	dfc00117 	ldw	ra,4(sp)
 200291c:	df000017 	ldw	fp,0(sp)
 2002920:	dec00204 	addi	sp,sp,8
 2002924:	f800283a 	ret

02002928 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2002928:	defffd04 	addi	sp,sp,-12
 200292c:	df000215 	stw	fp,8(sp)
 2002930:	df000204 	addi	fp,sp,8
 2002934:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2002938:	e0bfff17 	ldw	r2,-4(fp)
 200293c:	10800217 	ldw	r2,8(r2)
 2002940:	10d00034 	orhi	r3,r2,16384
 2002944:	e0bfff17 	ldw	r2,-4(fp)
 2002948:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200294c:	e03ffe15 	stw	zero,-8(fp)
 2002950:	00001d06 	br	20029c8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2002954:	00808034 	movhi	r2,512
 2002958:	1092bf04 	addi	r2,r2,19196
 200295c:	e0fffe17 	ldw	r3,-8(fp)
 2002960:	18c00324 	muli	r3,r3,12
 2002964:	10c5883a 	add	r2,r2,r3
 2002968:	10c00017 	ldw	r3,0(r2)
 200296c:	e0bfff17 	ldw	r2,-4(fp)
 2002970:	10800017 	ldw	r2,0(r2)
 2002974:	1880111e 	bne	r3,r2,20029bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2002978:	00808034 	movhi	r2,512
 200297c:	1092bf04 	addi	r2,r2,19196
 2002980:	e0fffe17 	ldw	r3,-8(fp)
 2002984:	18c00324 	muli	r3,r3,12
 2002988:	10c5883a 	add	r2,r2,r3
 200298c:	10800204 	addi	r2,r2,8
 2002990:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2002994:	1000090e 	bge	r2,zero,20029bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2002998:	e0bffe17 	ldw	r2,-8(fp)
 200299c:	10c00324 	muli	r3,r2,12
 20029a0:	00808034 	movhi	r2,512
 20029a4:	1092bf04 	addi	r2,r2,19196
 20029a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 20029ac:	e0bfff17 	ldw	r2,-4(fp)
 20029b0:	18800226 	beq	r3,r2,20029bc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 20029b4:	00bffcc4 	movi	r2,-13
 20029b8:	00000806 	br	20029dc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20029bc:	e0bffe17 	ldw	r2,-8(fp)
 20029c0:	10800044 	addi	r2,r2,1
 20029c4:	e0bffe15 	stw	r2,-8(fp)
 20029c8:	d0a00817 	ldw	r2,-32736(gp)
 20029cc:	1007883a 	mov	r3,r2
 20029d0:	e0bffe17 	ldw	r2,-8(fp)
 20029d4:	18bfdf2e 	bgeu	r3,r2,2002954 <__alt_mem_onchip_memory2+0xfdffa954>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 20029d8:	0005883a 	mov	r2,zero
}
 20029dc:	e037883a 	mov	sp,fp
 20029e0:	df000017 	ldw	fp,0(sp)
 20029e4:	dec00104 	addi	sp,sp,4
 20029e8:	f800283a 	ret

020029ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 20029ec:	defff604 	addi	sp,sp,-40
 20029f0:	dfc00915 	stw	ra,36(sp)
 20029f4:	df000815 	stw	fp,32(sp)
 20029f8:	df000804 	addi	fp,sp,32
 20029fc:	e13ffd15 	stw	r4,-12(fp)
 2002a00:	e17ffe15 	stw	r5,-8(fp)
 2002a04:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2002a08:	00bfffc4 	movi	r2,-1
 2002a0c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2002a10:	00bffb44 	movi	r2,-19
 2002a14:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2002a18:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2002a1c:	d1600604 	addi	r5,gp,-32744
 2002a20:	e13ffd17 	ldw	r4,-12(fp)
 2002a24:	2002bc80 	call	2002bc8 <alt_find_dev>
 2002a28:	e0bff815 	stw	r2,-32(fp)
 2002a2c:	e0bff817 	ldw	r2,-32(fp)
 2002a30:	1000051e 	bne	r2,zero,2002a48 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2002a34:	e13ffd17 	ldw	r4,-12(fp)
 2002a38:	2002c580 	call	2002c58 <alt_find_file>
 2002a3c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2002a40:	00800044 	movi	r2,1
 2002a44:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2002a48:	e0bff817 	ldw	r2,-32(fp)
 2002a4c:	10002926 	beq	r2,zero,2002af4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2002a50:	e13ff817 	ldw	r4,-32(fp)
 2002a54:	2002d600 	call	2002d60 <alt_get_fd>
 2002a58:	e0bff915 	stw	r2,-28(fp)
 2002a5c:	e0bff917 	ldw	r2,-28(fp)
 2002a60:	1000030e 	bge	r2,zero,2002a70 <open+0x84>
    {
      status = index;
 2002a64:	e0bff917 	ldw	r2,-28(fp)
 2002a68:	e0bffa15 	stw	r2,-24(fp)
 2002a6c:	00002306 	br	2002afc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 2002a70:	e0bff917 	ldw	r2,-28(fp)
 2002a74:	10c00324 	muli	r3,r2,12
 2002a78:	00808034 	movhi	r2,512
 2002a7c:	1092bf04 	addi	r2,r2,19196
 2002a80:	1885883a 	add	r2,r3,r2
 2002a84:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2002a88:	e0fffe17 	ldw	r3,-8(fp)
 2002a8c:	00900034 	movhi	r2,16384
 2002a90:	10bfffc4 	addi	r2,r2,-1
 2002a94:	1886703a 	and	r3,r3,r2
 2002a98:	e0bffc17 	ldw	r2,-16(fp)
 2002a9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2002aa0:	e0bffb17 	ldw	r2,-20(fp)
 2002aa4:	1000051e 	bne	r2,zero,2002abc <open+0xd0>
 2002aa8:	e13ffc17 	ldw	r4,-16(fp)
 2002aac:	20029280 	call	2002928 <alt_file_locked>
 2002ab0:	e0bffa15 	stw	r2,-24(fp)
 2002ab4:	e0bffa17 	ldw	r2,-24(fp)
 2002ab8:	10001016 	blt	r2,zero,2002afc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2002abc:	e0bff817 	ldw	r2,-32(fp)
 2002ac0:	10800317 	ldw	r2,12(r2)
 2002ac4:	10000826 	beq	r2,zero,2002ae8 <open+0xfc>
 2002ac8:	e0bff817 	ldw	r2,-32(fp)
 2002acc:	10800317 	ldw	r2,12(r2)
 2002ad0:	e1ffff17 	ldw	r7,-4(fp)
 2002ad4:	e1bffe17 	ldw	r6,-8(fp)
 2002ad8:	e17ffd17 	ldw	r5,-12(fp)
 2002adc:	e13ffc17 	ldw	r4,-16(fp)
 2002ae0:	103ee83a 	callr	r2
 2002ae4:	00000106 	br	2002aec <open+0x100>
 2002ae8:	0005883a 	mov	r2,zero
 2002aec:	e0bffa15 	stw	r2,-24(fp)
 2002af0:	00000206 	br	2002afc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2002af4:	00bffb44 	movi	r2,-19
 2002af8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2002afc:	e0bffa17 	ldw	r2,-24(fp)
 2002b00:	1000090e 	bge	r2,zero,2002b28 <open+0x13c>
  {
    alt_release_fd (index);  
 2002b04:	e13ff917 	ldw	r4,-28(fp)
 2002b08:	2002b400 	call	2002b40 <alt_release_fd>
    ALT_ERRNO = -status;
 2002b0c:	20028ec0 	call	20028ec <alt_get_errno>
 2002b10:	1007883a 	mov	r3,r2
 2002b14:	e0bffa17 	ldw	r2,-24(fp)
 2002b18:	0085c83a 	sub	r2,zero,r2
 2002b1c:	18800015 	stw	r2,0(r3)
    return -1;
 2002b20:	00bfffc4 	movi	r2,-1
 2002b24:	00000106 	br	2002b2c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2002b28:	e0bff917 	ldw	r2,-28(fp)
}
 2002b2c:	e037883a 	mov	sp,fp
 2002b30:	dfc00117 	ldw	ra,4(sp)
 2002b34:	df000017 	ldw	fp,0(sp)
 2002b38:	dec00204 	addi	sp,sp,8
 2002b3c:	f800283a 	ret

02002b40 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2002b40:	defffe04 	addi	sp,sp,-8
 2002b44:	df000115 	stw	fp,4(sp)
 2002b48:	df000104 	addi	fp,sp,4
 2002b4c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2002b50:	e0bfff17 	ldw	r2,-4(fp)
 2002b54:	108000d0 	cmplti	r2,r2,3
 2002b58:	10000d1e 	bne	r2,zero,2002b90 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2002b5c:	00808034 	movhi	r2,512
 2002b60:	1092bf04 	addi	r2,r2,19196
 2002b64:	e0ffff17 	ldw	r3,-4(fp)
 2002b68:	18c00324 	muli	r3,r3,12
 2002b6c:	10c5883a 	add	r2,r2,r3
 2002b70:	10800204 	addi	r2,r2,8
 2002b74:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2002b78:	00808034 	movhi	r2,512
 2002b7c:	1092bf04 	addi	r2,r2,19196
 2002b80:	e0ffff17 	ldw	r3,-4(fp)
 2002b84:	18c00324 	muli	r3,r3,12
 2002b88:	10c5883a 	add	r2,r2,r3
 2002b8c:	10000015 	stw	zero,0(r2)
  }
}
 2002b90:	0001883a 	nop
 2002b94:	e037883a 	mov	sp,fp
 2002b98:	df000017 	ldw	fp,0(sp)
 2002b9c:	dec00104 	addi	sp,sp,4
 2002ba0:	f800283a 	ret

02002ba4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2002ba4:	deffff04 	addi	sp,sp,-4
 2002ba8:	df000015 	stw	fp,0(sp)
 2002bac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2002bb0:	000170fa 	wrctl	ienable,zero
}
 2002bb4:	0001883a 	nop
 2002bb8:	e037883a 	mov	sp,fp
 2002bbc:	df000017 	ldw	fp,0(sp)
 2002bc0:	dec00104 	addi	sp,sp,4
 2002bc4:	f800283a 	ret

02002bc8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2002bc8:	defffa04 	addi	sp,sp,-24
 2002bcc:	dfc00515 	stw	ra,20(sp)
 2002bd0:	df000415 	stw	fp,16(sp)
 2002bd4:	df000404 	addi	fp,sp,16
 2002bd8:	e13ffe15 	stw	r4,-8(fp)
 2002bdc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2002be0:	e0bfff17 	ldw	r2,-4(fp)
 2002be4:	10800017 	ldw	r2,0(r2)
 2002be8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2002bec:	e13ffe17 	ldw	r4,-8(fp)
 2002bf0:	20005c80 	call	20005c8 <strlen>
 2002bf4:	10800044 	addi	r2,r2,1
 2002bf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2002bfc:	00000d06 	br	2002c34 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2002c00:	e0bffc17 	ldw	r2,-16(fp)
 2002c04:	10800217 	ldw	r2,8(r2)
 2002c08:	e0fffd17 	ldw	r3,-12(fp)
 2002c0c:	180d883a 	mov	r6,r3
 2002c10:	e17ffe17 	ldw	r5,-8(fp)
 2002c14:	1009883a 	mov	r4,r2
 2002c18:	2002f640 	call	2002f64 <memcmp>
 2002c1c:	1000021e 	bne	r2,zero,2002c28 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2002c20:	e0bffc17 	ldw	r2,-16(fp)
 2002c24:	00000706 	br	2002c44 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2002c28:	e0bffc17 	ldw	r2,-16(fp)
 2002c2c:	10800017 	ldw	r2,0(r2)
 2002c30:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2002c34:	e0fffc17 	ldw	r3,-16(fp)
 2002c38:	e0bfff17 	ldw	r2,-4(fp)
 2002c3c:	18bff01e 	bne	r3,r2,2002c00 <__alt_mem_onchip_memory2+0xfdffac00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2002c40:	0005883a 	mov	r2,zero
}
 2002c44:	e037883a 	mov	sp,fp
 2002c48:	dfc00117 	ldw	ra,4(sp)
 2002c4c:	df000017 	ldw	fp,0(sp)
 2002c50:	dec00204 	addi	sp,sp,8
 2002c54:	f800283a 	ret

02002c58 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2002c58:	defffb04 	addi	sp,sp,-20
 2002c5c:	dfc00415 	stw	ra,16(sp)
 2002c60:	df000315 	stw	fp,12(sp)
 2002c64:	df000304 	addi	fp,sp,12
 2002c68:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2002c6c:	d0a00417 	ldw	r2,-32752(gp)
 2002c70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2002c74:	00003106 	br	2002d3c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2002c78:	e0bffd17 	ldw	r2,-12(fp)
 2002c7c:	10800217 	ldw	r2,8(r2)
 2002c80:	1009883a 	mov	r4,r2
 2002c84:	20005c80 	call	20005c8 <strlen>
 2002c88:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2002c8c:	e0bffd17 	ldw	r2,-12(fp)
 2002c90:	10c00217 	ldw	r3,8(r2)
 2002c94:	e0bffe17 	ldw	r2,-8(fp)
 2002c98:	10bfffc4 	addi	r2,r2,-1
 2002c9c:	1885883a 	add	r2,r3,r2
 2002ca0:	10800003 	ldbu	r2,0(r2)
 2002ca4:	10803fcc 	andi	r2,r2,255
 2002ca8:	1080201c 	xori	r2,r2,128
 2002cac:	10bfe004 	addi	r2,r2,-128
 2002cb0:	10800bd8 	cmpnei	r2,r2,47
 2002cb4:	1000031e 	bne	r2,zero,2002cc4 <alt_find_file+0x6c>
    {
      len -= 1;
 2002cb8:	e0bffe17 	ldw	r2,-8(fp)
 2002cbc:	10bfffc4 	addi	r2,r2,-1
 2002cc0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2002cc4:	e0bffe17 	ldw	r2,-8(fp)
 2002cc8:	e0ffff17 	ldw	r3,-4(fp)
 2002ccc:	1885883a 	add	r2,r3,r2
 2002cd0:	10800003 	ldbu	r2,0(r2)
 2002cd4:	10803fcc 	andi	r2,r2,255
 2002cd8:	1080201c 	xori	r2,r2,128
 2002cdc:	10bfe004 	addi	r2,r2,-128
 2002ce0:	10800be0 	cmpeqi	r2,r2,47
 2002ce4:	1000081e 	bne	r2,zero,2002d08 <alt_find_file+0xb0>
 2002ce8:	e0bffe17 	ldw	r2,-8(fp)
 2002cec:	e0ffff17 	ldw	r3,-4(fp)
 2002cf0:	1885883a 	add	r2,r3,r2
 2002cf4:	10800003 	ldbu	r2,0(r2)
 2002cf8:	10803fcc 	andi	r2,r2,255
 2002cfc:	1080201c 	xori	r2,r2,128
 2002d00:	10bfe004 	addi	r2,r2,-128
 2002d04:	10000a1e 	bne	r2,zero,2002d30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2002d08:	e0bffd17 	ldw	r2,-12(fp)
 2002d0c:	10800217 	ldw	r2,8(r2)
 2002d10:	e0fffe17 	ldw	r3,-8(fp)
 2002d14:	180d883a 	mov	r6,r3
 2002d18:	e17fff17 	ldw	r5,-4(fp)
 2002d1c:	1009883a 	mov	r4,r2
 2002d20:	2002f640 	call	2002f64 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2002d24:	1000021e 	bne	r2,zero,2002d30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2002d28:	e0bffd17 	ldw	r2,-12(fp)
 2002d2c:	00000706 	br	2002d4c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2002d30:	e0bffd17 	ldw	r2,-12(fp)
 2002d34:	10800017 	ldw	r2,0(r2)
 2002d38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2002d3c:	e0fffd17 	ldw	r3,-12(fp)
 2002d40:	d0a00404 	addi	r2,gp,-32752
 2002d44:	18bfcc1e 	bne	r3,r2,2002c78 <__alt_mem_onchip_memory2+0xfdffac78>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2002d48:	0005883a 	mov	r2,zero
}
 2002d4c:	e037883a 	mov	sp,fp
 2002d50:	dfc00117 	ldw	ra,4(sp)
 2002d54:	df000017 	ldw	fp,0(sp)
 2002d58:	dec00204 	addi	sp,sp,8
 2002d5c:	f800283a 	ret

02002d60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2002d60:	defffc04 	addi	sp,sp,-16
 2002d64:	df000315 	stw	fp,12(sp)
 2002d68:	df000304 	addi	fp,sp,12
 2002d6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2002d70:	00bffa04 	movi	r2,-24
 2002d74:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2002d78:	e03ffd15 	stw	zero,-12(fp)
 2002d7c:	00001906 	br	2002de4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 2002d80:	00808034 	movhi	r2,512
 2002d84:	1092bf04 	addi	r2,r2,19196
 2002d88:	e0fffd17 	ldw	r3,-12(fp)
 2002d8c:	18c00324 	muli	r3,r3,12
 2002d90:	10c5883a 	add	r2,r2,r3
 2002d94:	10800017 	ldw	r2,0(r2)
 2002d98:	10000f1e 	bne	r2,zero,2002dd8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 2002d9c:	00808034 	movhi	r2,512
 2002da0:	1092bf04 	addi	r2,r2,19196
 2002da4:	e0fffd17 	ldw	r3,-12(fp)
 2002da8:	18c00324 	muli	r3,r3,12
 2002dac:	10c5883a 	add	r2,r2,r3
 2002db0:	e0ffff17 	ldw	r3,-4(fp)
 2002db4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2002db8:	d0e00817 	ldw	r3,-32736(gp)
 2002dbc:	e0bffd17 	ldw	r2,-12(fp)
 2002dc0:	1880020e 	bge	r3,r2,2002dcc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 2002dc4:	e0bffd17 	ldw	r2,-12(fp)
 2002dc8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 2002dcc:	e0bffd17 	ldw	r2,-12(fp)
 2002dd0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 2002dd4:	00000606 	br	2002df0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2002dd8:	e0bffd17 	ldw	r2,-12(fp)
 2002ddc:	10800044 	addi	r2,r2,1
 2002de0:	e0bffd15 	stw	r2,-12(fp)
 2002de4:	e0bffd17 	ldw	r2,-12(fp)
 2002de8:	10800810 	cmplti	r2,r2,32
 2002dec:	103fe41e 	bne	r2,zero,2002d80 <__alt_mem_onchip_memory2+0xfdffad80>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2002df0:	e0bffe17 	ldw	r2,-8(fp)
}
 2002df4:	e037883a 	mov	sp,fp
 2002df8:	df000017 	ldw	fp,0(sp)
 2002dfc:	dec00104 	addi	sp,sp,4
 2002e00:	f800283a 	ret

02002e04 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2002e04:	defffb04 	addi	sp,sp,-20
 2002e08:	df000415 	stw	fp,16(sp)
 2002e0c:	df000404 	addi	fp,sp,16
 2002e10:	e13ffe15 	stw	r4,-8(fp)
 2002e14:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2002e18:	e0bfff17 	ldw	r2,-4(fp)
 2002e1c:	10840070 	cmpltui	r2,r2,4097
 2002e20:	1000021e 	bne	r2,zero,2002e2c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2002e24:	00840004 	movi	r2,4096
 2002e28:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2002e2c:	e0fffe17 	ldw	r3,-8(fp)
 2002e30:	e0bfff17 	ldw	r2,-4(fp)
 2002e34:	1885883a 	add	r2,r3,r2
 2002e38:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2002e3c:	e0bffe17 	ldw	r2,-8(fp)
 2002e40:	e0bffc15 	stw	r2,-16(fp)
 2002e44:	00000506 	br	2002e5c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 2002e48:	e0bffc17 	ldw	r2,-16(fp)
 2002e4c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2002e50:	e0bffc17 	ldw	r2,-16(fp)
 2002e54:	10800804 	addi	r2,r2,32
 2002e58:	e0bffc15 	stw	r2,-16(fp)
 2002e5c:	e0fffc17 	ldw	r3,-16(fp)
 2002e60:	e0bffd17 	ldw	r2,-12(fp)
 2002e64:	18bff836 	bltu	r3,r2,2002e48 <__alt_mem_onchip_memory2+0xfdffae48>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 2002e68:	e0bffe17 	ldw	r2,-8(fp)
 2002e6c:	108007cc 	andi	r2,r2,31
 2002e70:	10000226 	beq	r2,zero,2002e7c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 2002e74:	e0bffc17 	ldw	r2,-16(fp)
 2002e78:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 2002e7c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 2002e80:	0001883a 	nop
 2002e84:	e037883a 	mov	sp,fp
 2002e88:	df000017 	ldw	fp,0(sp)
 2002e8c:	dec00104 	addi	sp,sp,4
 2002e90:	f800283a 	ret

02002e94 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2002e94:	defffe04 	addi	sp,sp,-8
 2002e98:	df000115 	stw	fp,4(sp)
 2002e9c:	df000104 	addi	fp,sp,4
 2002ea0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2002ea4:	e0bfff17 	ldw	r2,-4(fp)
 2002ea8:	10bffe84 	addi	r2,r2,-6
 2002eac:	10c00428 	cmpgeui	r3,r2,16
 2002eb0:	18001a1e 	bne	r3,zero,2002f1c <alt_exception_cause_generated_bad_addr+0x88>
 2002eb4:	100690ba 	slli	r3,r2,2
 2002eb8:	00808034 	movhi	r2,512
 2002ebc:	108bb304 	addi	r2,r2,11980
 2002ec0:	1885883a 	add	r2,r3,r2
 2002ec4:	10800017 	ldw	r2,0(r2)
 2002ec8:	1000683a 	jmp	r2
 2002ecc:	02002f0c 	andi	r8,zero,188
 2002ed0:	02002f0c 	andi	r8,zero,188
 2002ed4:	02002f1c 	xori	r8,zero,188
 2002ed8:	02002f1c 	xori	r8,zero,188
 2002edc:	02002f1c 	xori	r8,zero,188
 2002ee0:	02002f0c 	andi	r8,zero,188
 2002ee4:	02002f14 	movui	r8,188
 2002ee8:	02002f1c 	xori	r8,zero,188
 2002eec:	02002f0c 	andi	r8,zero,188
 2002ef0:	02002f0c 	andi	r8,zero,188
 2002ef4:	02002f1c 	xori	r8,zero,188
 2002ef8:	02002f0c 	andi	r8,zero,188
 2002efc:	02002f14 	movui	r8,188
 2002f00:	02002f1c 	xori	r8,zero,188
 2002f04:	02002f1c 	xori	r8,zero,188
 2002f08:	02002f0c 	andi	r8,zero,188
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2002f0c:	00800044 	movi	r2,1
 2002f10:	00000306 	br	2002f20 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2002f14:	0005883a 	mov	r2,zero
 2002f18:	00000106 	br	2002f20 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2002f1c:	0005883a 	mov	r2,zero
  }
}
 2002f20:	e037883a 	mov	sp,fp
 2002f24:	df000017 	ldw	fp,0(sp)
 2002f28:	dec00104 	addi	sp,sp,4
 2002f2c:	f800283a 	ret

02002f30 <atexit>:
 2002f30:	200b883a 	mov	r5,r4
 2002f34:	000f883a 	mov	r7,zero
 2002f38:	000d883a 	mov	r6,zero
 2002f3c:	0009883a 	mov	r4,zero
 2002f40:	2002fbc1 	jmpi	2002fbc <__register_exitproc>

02002f44 <exit>:
 2002f44:	defffe04 	addi	sp,sp,-8
 2002f48:	000b883a 	mov	r5,zero
 2002f4c:	dc000015 	stw	r16,0(sp)
 2002f50:	dfc00115 	stw	ra,4(sp)
 2002f54:	2021883a 	mov	r16,r4
 2002f58:	20031140 	call	2003114 <__call_exitprocs>
 2002f5c:	8009883a 	mov	r4,r16
 2002f60:	20037dc0 	call	20037dc <_exit>

02002f64 <memcmp>:
 2002f64:	218d883a 	add	r6,r4,r6
 2002f68:	21800826 	beq	r4,r6,2002f8c <memcmp+0x28>
 2002f6c:	20800003 	ldbu	r2,0(r4)
 2002f70:	28c00003 	ldbu	r3,0(r5)
 2002f74:	10c00226 	beq	r2,r3,2002f80 <memcmp+0x1c>
 2002f78:	10c5c83a 	sub	r2,r2,r3
 2002f7c:	f800283a 	ret
 2002f80:	21000044 	addi	r4,r4,1
 2002f84:	29400044 	addi	r5,r5,1
 2002f88:	003ff706 	br	2002f68 <__alt_mem_onchip_memory2+0xfdffaf68>
 2002f8c:	0005883a 	mov	r2,zero
 2002f90:	f800283a 	ret

02002f94 <memcpy>:
 2002f94:	2005883a 	mov	r2,r4
 2002f98:	2007883a 	mov	r3,r4
 2002f9c:	218d883a 	add	r6,r4,r6
 2002fa0:	19800526 	beq	r3,r6,2002fb8 <memcpy+0x24>
 2002fa4:	29000003 	ldbu	r4,0(r5)
 2002fa8:	18c00044 	addi	r3,r3,1
 2002fac:	29400044 	addi	r5,r5,1
 2002fb0:	193fffc5 	stb	r4,-1(r3)
 2002fb4:	003ffa06 	br	2002fa0 <__alt_mem_onchip_memory2+0xfdffafa0>
 2002fb8:	f800283a 	ret

02002fbc <__register_exitproc>:
 2002fbc:	00808034 	movhi	r2,512
 2002fc0:	10931f04 	addi	r2,r2,19580
 2002fc4:	10c00017 	ldw	r3,0(r2)
 2002fc8:	defff904 	addi	sp,sp,-28
 2002fcc:	dc000015 	stw	r16,0(sp)
 2002fd0:	1c000c17 	ldw	r16,48(r3)
 2002fd4:	dd400515 	stw	r21,20(sp)
 2002fd8:	dd000415 	stw	r20,16(sp)
 2002fdc:	dcc00315 	stw	r19,12(sp)
 2002fe0:	dc800215 	stw	r18,8(sp)
 2002fe4:	dc400115 	stw	r17,4(sp)
 2002fe8:	dfc00615 	stw	ra,24(sp)
 2002fec:	202b883a 	mov	r21,r4
 2002ff0:	2823883a 	mov	r17,r5
 2002ff4:	3027883a 	mov	r19,r6
 2002ff8:	3825883a 	mov	r18,r7
 2002ffc:	1029883a 	mov	r20,r2
 2003000:	8000021e 	bne	r16,zero,200300c <__register_exitproc+0x50>
 2003004:	1c000d04 	addi	r16,r3,52
 2003008:	1c000c15 	stw	r16,48(r3)
 200300c:	80800117 	ldw	r2,4(r16)
 2003010:	00c007c4 	movi	r3,31
 2003014:	1880110e 	bge	r3,r2,200305c <__register_exitproc+0xa0>
 2003018:	00800034 	movhi	r2,0
 200301c:	10800004 	addi	r2,r2,0
 2003020:	1000021e 	bne	r2,zero,200302c <__register_exitproc+0x70>
 2003024:	00bfffc4 	movi	r2,-1
 2003028:	00003106 	br	20030f0 <__register_exitproc+0x134>
 200302c:	01002304 	movi	r4,140
 2003030:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2003034:	1021883a 	mov	r16,r2
 2003038:	103ffa26 	beq	r2,zero,2003024 <__alt_mem_onchip_memory2+0xfdffb024>
 200303c:	10000115 	stw	zero,4(r2)
 2003040:	a0800017 	ldw	r2,0(r20)
 2003044:	10c00c17 	ldw	r3,48(r2)
 2003048:	80c00015 	stw	r3,0(r16)
 200304c:	14000c15 	stw	r16,48(r2)
 2003050:	80002215 	stw	zero,136(r16)
 2003054:	a8001d26 	beq	r21,zero,20030cc <__register_exitproc+0x110>
 2003058:	00000606 	br	2003074 <__register_exitproc+0xb8>
 200305c:	a8001b26 	beq	r21,zero,20030cc <__register_exitproc+0x110>
 2003060:	80802217 	ldw	r2,136(r16)
 2003064:	1000091e 	bne	r2,zero,200308c <__register_exitproc+0xd0>
 2003068:	00800034 	movhi	r2,0
 200306c:	10800004 	addi	r2,r2,0
 2003070:	103fec26 	beq	r2,zero,2003024 <__alt_mem_onchip_memory2+0xfdffb024>
 2003074:	01004204 	movi	r4,264
 2003078:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 200307c:	103fe926 	beq	r2,zero,2003024 <__alt_mem_onchip_memory2+0xfdffb024>
 2003080:	10004015 	stw	zero,256(r2)
 2003084:	10004115 	stw	zero,260(r2)
 2003088:	80802215 	stw	r2,136(r16)
 200308c:	81400117 	ldw	r5,4(r16)
 2003090:	01000044 	movi	r4,1
 2003094:	2947883a 	add	r3,r5,r5
 2003098:	18c7883a 	add	r3,r3,r3
 200309c:	10c7883a 	add	r3,r2,r3
 20030a0:	1cc00015 	stw	r19,0(r3)
 20030a4:	2148983a 	sll	r4,r4,r5
 20030a8:	11404017 	ldw	r5,256(r2)
 20030ac:	290ab03a 	or	r5,r5,r4
 20030b0:	11404015 	stw	r5,256(r2)
 20030b4:	1c802015 	stw	r18,128(r3)
 20030b8:	00c00084 	movi	r3,2
 20030bc:	a8c0031e 	bne	r21,r3,20030cc <__register_exitproc+0x110>
 20030c0:	10c04117 	ldw	r3,260(r2)
 20030c4:	1908b03a 	or	r4,r3,r4
 20030c8:	11004115 	stw	r4,260(r2)
 20030cc:	80800117 	ldw	r2,4(r16)
 20030d0:	10c00044 	addi	r3,r2,1
 20030d4:	10800084 	addi	r2,r2,2
 20030d8:	1085883a 	add	r2,r2,r2
 20030dc:	1085883a 	add	r2,r2,r2
 20030e0:	80c00115 	stw	r3,4(r16)
 20030e4:	80a1883a 	add	r16,r16,r2
 20030e8:	84400015 	stw	r17,0(r16)
 20030ec:	0005883a 	mov	r2,zero
 20030f0:	dfc00617 	ldw	ra,24(sp)
 20030f4:	dd400517 	ldw	r21,20(sp)
 20030f8:	dd000417 	ldw	r20,16(sp)
 20030fc:	dcc00317 	ldw	r19,12(sp)
 2003100:	dc800217 	ldw	r18,8(sp)
 2003104:	dc400117 	ldw	r17,4(sp)
 2003108:	dc000017 	ldw	r16,0(sp)
 200310c:	dec00704 	addi	sp,sp,28
 2003110:	f800283a 	ret

02003114 <__call_exitprocs>:
 2003114:	defff504 	addi	sp,sp,-44
 2003118:	dd000515 	stw	r20,20(sp)
 200311c:	05008034 	movhi	r20,512
 2003120:	dc800315 	stw	r18,12(sp)
 2003124:	dfc00a15 	stw	ra,40(sp)
 2003128:	df000915 	stw	fp,36(sp)
 200312c:	ddc00815 	stw	r23,32(sp)
 2003130:	dd800715 	stw	r22,28(sp)
 2003134:	dd400615 	stw	r21,24(sp)
 2003138:	dcc00415 	stw	r19,16(sp)
 200313c:	dc400215 	stw	r17,8(sp)
 2003140:	dc000115 	stw	r16,4(sp)
 2003144:	d9000015 	stw	r4,0(sp)
 2003148:	2825883a 	mov	r18,r5
 200314c:	a5131f04 	addi	r20,r20,19580
 2003150:	a4400017 	ldw	r17,0(r20)
 2003154:	8cc00c17 	ldw	r19,48(r17)
 2003158:	8c400c04 	addi	r17,r17,48
 200315c:	98004526 	beq	r19,zero,2003274 <__call_exitprocs+0x160>
 2003160:	9c000117 	ldw	r16,4(r19)
 2003164:	00900034 	movhi	r2,16384
 2003168:	10bfffc4 	addi	r2,r2,-1
 200316c:	9d402217 	ldw	r21,136(r19)
 2003170:	85bfffc4 	addi	r22,r16,-1
 2003174:	80a1883a 	add	r16,r16,r2
 2003178:	8421883a 	add	r16,r16,r16
 200317c:	8421883a 	add	r16,r16,r16
 2003180:	ac2f883a 	add	r23,r21,r16
 2003184:	84000204 	addi	r16,r16,8
 2003188:	9c21883a 	add	r16,r19,r16
 200318c:	b0002716 	blt	r22,zero,200322c <__call_exitprocs+0x118>
 2003190:	90000726 	beq	r18,zero,20031b0 <__call_exitprocs+0x9c>
 2003194:	a800041e 	bne	r21,zero,20031a8 <__call_exitprocs+0x94>
 2003198:	b5bfffc4 	addi	r22,r22,-1
 200319c:	bdffff04 	addi	r23,r23,-4
 20031a0:	843fff04 	addi	r16,r16,-4
 20031a4:	003ff906 	br	200318c <__alt_mem_onchip_memory2+0xfdffb18c>
 20031a8:	b9002017 	ldw	r4,128(r23)
 20031ac:	913ffa1e 	bne	r18,r4,2003198 <__alt_mem_onchip_memory2+0xfdffb198>
 20031b0:	99000117 	ldw	r4,4(r19)
 20031b4:	82000017 	ldw	r8,0(r16)
 20031b8:	213fffc4 	addi	r4,r4,-1
 20031bc:	b100021e 	bne	r22,r4,20031c8 <__call_exitprocs+0xb4>
 20031c0:	9d800115 	stw	r22,4(r19)
 20031c4:	00000106 	br	20031cc <__call_exitprocs+0xb8>
 20031c8:	80000015 	stw	zero,0(r16)
 20031cc:	403ff226 	beq	r8,zero,2003198 <__alt_mem_onchip_memory2+0xfdffb198>
 20031d0:	9f000117 	ldw	fp,4(r19)
 20031d4:	a8000526 	beq	r21,zero,20031ec <__call_exitprocs+0xd8>
 20031d8:	00800044 	movi	r2,1
 20031dc:	1592983a 	sll	r9,r2,r22
 20031e0:	a9404017 	ldw	r5,256(r21)
 20031e4:	494a703a 	and	r5,r9,r5
 20031e8:	2800021e 	bne	r5,zero,20031f4 <__call_exitprocs+0xe0>
 20031ec:	403ee83a 	callr	r8
 20031f0:	00000906 	br	2003218 <__call_exitprocs+0x104>
 20031f4:	a9004117 	ldw	r4,260(r21)
 20031f8:	4908703a 	and	r4,r9,r4
 20031fc:	2000041e 	bne	r4,zero,2003210 <__call_exitprocs+0xfc>
 2003200:	b9400017 	ldw	r5,0(r23)
 2003204:	d9000017 	ldw	r4,0(sp)
 2003208:	403ee83a 	callr	r8
 200320c:	00000206 	br	2003218 <__call_exitprocs+0x104>
 2003210:	b9000017 	ldw	r4,0(r23)
 2003214:	403ee83a 	callr	r8
 2003218:	99000117 	ldw	r4,4(r19)
 200321c:	e13fcc1e 	bne	fp,r4,2003150 <__alt_mem_onchip_memory2+0xfdffb150>
 2003220:	89000017 	ldw	r4,0(r17)
 2003224:	993fdc26 	beq	r19,r4,2003198 <__alt_mem_onchip_memory2+0xfdffb198>
 2003228:	003fc906 	br	2003150 <__alt_mem_onchip_memory2+0xfdffb150>
 200322c:	00800034 	movhi	r2,0
 2003230:	10800004 	addi	r2,r2,0
 2003234:	10000f26 	beq	r2,zero,2003274 <__call_exitprocs+0x160>
 2003238:	99400117 	ldw	r5,4(r19)
 200323c:	99000017 	ldw	r4,0(r19)
 2003240:	2800091e 	bne	r5,zero,2003268 <__call_exitprocs+0x154>
 2003244:	20000826 	beq	r4,zero,2003268 <__call_exitprocs+0x154>
 2003248:	89000015 	stw	r4,0(r17)
 200324c:	a8000226 	beq	r21,zero,2003258 <__call_exitprocs+0x144>
 2003250:	a809883a 	mov	r4,r21
 2003254:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2003258:	9809883a 	mov	r4,r19
 200325c:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2003260:	8cc00017 	ldw	r19,0(r17)
 2003264:	003fbd06 	br	200315c <__alt_mem_onchip_memory2+0xfdffb15c>
 2003268:	9823883a 	mov	r17,r19
 200326c:	2027883a 	mov	r19,r4
 2003270:	003fba06 	br	200315c <__alt_mem_onchip_memory2+0xfdffb15c>
 2003274:	dfc00a17 	ldw	ra,40(sp)
 2003278:	df000917 	ldw	fp,36(sp)
 200327c:	ddc00817 	ldw	r23,32(sp)
 2003280:	dd800717 	ldw	r22,28(sp)
 2003284:	dd400617 	ldw	r21,24(sp)
 2003288:	dd000517 	ldw	r20,20(sp)
 200328c:	dcc00417 	ldw	r19,16(sp)
 2003290:	dc800317 	ldw	r18,12(sp)
 2003294:	dc400217 	ldw	r17,8(sp)
 2003298:	dc000117 	ldw	r16,4(sp)
 200329c:	dec00b04 	addi	sp,sp,44
 20032a0:	f800283a 	ret

020032a4 <__umoddi3>:
 20032a4:	defff404 	addi	sp,sp,-48
 20032a8:	df000a15 	stw	fp,40(sp)
 20032ac:	dc400315 	stw	r17,12(sp)
 20032b0:	dc000215 	stw	r16,8(sp)
 20032b4:	dfc00b15 	stw	ra,44(sp)
 20032b8:	ddc00915 	stw	r23,36(sp)
 20032bc:	dd800815 	stw	r22,32(sp)
 20032c0:	dd400715 	stw	r21,28(sp)
 20032c4:	dd000615 	stw	r20,24(sp)
 20032c8:	dcc00515 	stw	r19,20(sp)
 20032cc:	dc800415 	stw	r18,16(sp)
 20032d0:	2021883a 	mov	r16,r4
 20032d4:	2823883a 	mov	r17,r5
 20032d8:	2839883a 	mov	fp,r5
 20032dc:	38003c1e 	bne	r7,zero,20033d0 <__umoddi3+0x12c>
 20032e0:	3027883a 	mov	r19,r6
 20032e4:	2029883a 	mov	r20,r4
 20032e8:	2980512e 	bgeu	r5,r6,2003430 <__umoddi3+0x18c>
 20032ec:	00bfffd4 	movui	r2,65535
 20032f0:	11809a36 	bltu	r2,r6,200355c <__umoddi3+0x2b8>
 20032f4:	01003fc4 	movi	r4,255
 20032f8:	2189803a 	cmpltu	r4,r4,r6
 20032fc:	200890fa 	slli	r4,r4,3
 2003300:	3104d83a 	srl	r2,r6,r4
 2003304:	00c08034 	movhi	r3,512
 2003308:	18ce2484 	addi	r3,r3,14482
 200330c:	1885883a 	add	r2,r3,r2
 2003310:	10c00003 	ldbu	r3,0(r2)
 2003314:	00800804 	movi	r2,32
 2003318:	1909883a 	add	r4,r3,r4
 200331c:	1125c83a 	sub	r18,r2,r4
 2003320:	90000526 	beq	r18,zero,2003338 <__umoddi3+0x94>
 2003324:	8ca2983a 	sll	r17,r17,r18
 2003328:	8108d83a 	srl	r4,r16,r4
 200332c:	34a6983a 	sll	r19,r6,r18
 2003330:	84a8983a 	sll	r20,r16,r18
 2003334:	2478b03a 	or	fp,r4,r17
 2003338:	982ed43a 	srli	r23,r19,16
 200333c:	e009883a 	mov	r4,fp
 2003340:	9dbfffcc 	andi	r22,r19,65535
 2003344:	b80b883a 	mov	r5,r23
 2003348:	2000f000 	call	2000f00 <__umodsi3>
 200334c:	e009883a 	mov	r4,fp
 2003350:	b80b883a 	mov	r5,r23
 2003354:	102b883a 	mov	r21,r2
 2003358:	2000e9c0 	call	2000e9c <__udivsi3>
 200335c:	a806943a 	slli	r3,r21,16
 2003360:	a008d43a 	srli	r4,r20,16
 2003364:	b085383a 	mul	r2,r22,r2
 2003368:	20c8b03a 	or	r4,r4,r3
 200336c:	2080032e 	bgeu	r4,r2,200337c <__umoddi3+0xd8>
 2003370:	24c9883a 	add	r4,r4,r19
 2003374:	24c00136 	bltu	r4,r19,200337c <__umoddi3+0xd8>
 2003378:	20811036 	bltu	r4,r2,20037bc <__umoddi3+0x518>
 200337c:	20abc83a 	sub	r21,r4,r2
 2003380:	b80b883a 	mov	r5,r23
 2003384:	a809883a 	mov	r4,r21
 2003388:	2000f000 	call	2000f00 <__umodsi3>
 200338c:	1023883a 	mov	r17,r2
 2003390:	b80b883a 	mov	r5,r23
 2003394:	a809883a 	mov	r4,r21
 2003398:	2000e9c0 	call	2000e9c <__udivsi3>
 200339c:	8822943a 	slli	r17,r17,16
 20033a0:	b085383a 	mul	r2,r22,r2
 20033a4:	a0ffffcc 	andi	r3,r20,65535
 20033a8:	1c46b03a 	or	r3,r3,r17
 20033ac:	1880042e 	bgeu	r3,r2,20033c0 <__umoddi3+0x11c>
 20033b0:	1cc7883a 	add	r3,r3,r19
 20033b4:	1cc00236 	bltu	r3,r19,20033c0 <__umoddi3+0x11c>
 20033b8:	1880012e 	bgeu	r3,r2,20033c0 <__umoddi3+0x11c>
 20033bc:	1cc7883a 	add	r3,r3,r19
 20033c0:	1885c83a 	sub	r2,r3,r2
 20033c4:	1484d83a 	srl	r2,r2,r18
 20033c8:	0007883a 	mov	r3,zero
 20033cc:	00004f06 	br	200350c <__umoddi3+0x268>
 20033d0:	29c04c36 	bltu	r5,r7,2003504 <__umoddi3+0x260>
 20033d4:	00bfffd4 	movui	r2,65535
 20033d8:	11c0582e 	bgeu	r2,r7,200353c <__umoddi3+0x298>
 20033dc:	00804034 	movhi	r2,256
 20033e0:	10bfffc4 	addi	r2,r2,-1
 20033e4:	11c0e736 	bltu	r2,r7,2003784 <__umoddi3+0x4e0>
 20033e8:	01000404 	movi	r4,16
 20033ec:	3904d83a 	srl	r2,r7,r4
 20033f0:	00c08034 	movhi	r3,512
 20033f4:	18ce2484 	addi	r3,r3,14482
 20033f8:	1885883a 	add	r2,r3,r2
 20033fc:	14c00003 	ldbu	r19,0(r2)
 2003400:	00c00804 	movi	r3,32
 2003404:	9927883a 	add	r19,r19,r4
 2003408:	1ce9c83a 	sub	r20,r3,r19
 200340c:	a000581e 	bne	r20,zero,2003570 <__umoddi3+0x2cc>
 2003410:	3c400136 	bltu	r7,r17,2003418 <__umoddi3+0x174>
 2003414:	8180eb36 	bltu	r16,r6,20037c4 <__umoddi3+0x520>
 2003418:	8185c83a 	sub	r2,r16,r6
 200341c:	89e3c83a 	sub	r17,r17,r7
 2003420:	8089803a 	cmpltu	r4,r16,r2
 2003424:	8939c83a 	sub	fp,r17,r4
 2003428:	e007883a 	mov	r3,fp
 200342c:	00003706 	br	200350c <__umoddi3+0x268>
 2003430:	3000041e 	bne	r6,zero,2003444 <__umoddi3+0x1a0>
 2003434:	000b883a 	mov	r5,zero
 2003438:	01000044 	movi	r4,1
 200343c:	2000e9c0 	call	2000e9c <__udivsi3>
 2003440:	1027883a 	mov	r19,r2
 2003444:	00bfffd4 	movui	r2,65535
 2003448:	14c0402e 	bgeu	r2,r19,200354c <__umoddi3+0x2a8>
 200344c:	00804034 	movhi	r2,256
 2003450:	10bfffc4 	addi	r2,r2,-1
 2003454:	14c0cd36 	bltu	r2,r19,200378c <__umoddi3+0x4e8>
 2003458:	00800404 	movi	r2,16
 200345c:	9886d83a 	srl	r3,r19,r2
 2003460:	01008034 	movhi	r4,512
 2003464:	210e2484 	addi	r4,r4,14482
 2003468:	20c7883a 	add	r3,r4,r3
 200346c:	18c00003 	ldbu	r3,0(r3)
 2003470:	1887883a 	add	r3,r3,r2
 2003474:	00800804 	movi	r2,32
 2003478:	10e5c83a 	sub	r18,r2,r3
 200347c:	9000901e 	bne	r18,zero,20036c0 <__umoddi3+0x41c>
 2003480:	982cd43a 	srli	r22,r19,16
 2003484:	8ce3c83a 	sub	r17,r17,r19
 2003488:	9d7fffcc 	andi	r21,r19,65535
 200348c:	b00b883a 	mov	r5,r22
 2003490:	8809883a 	mov	r4,r17
 2003494:	2000f000 	call	2000f00 <__umodsi3>
 2003498:	8809883a 	mov	r4,r17
 200349c:	b00b883a 	mov	r5,r22
 20034a0:	1021883a 	mov	r16,r2
 20034a4:	2000e9c0 	call	2000e9c <__udivsi3>
 20034a8:	8006943a 	slli	r3,r16,16
 20034ac:	a008d43a 	srli	r4,r20,16
 20034b0:	1545383a 	mul	r2,r2,r21
 20034b4:	20c8b03a 	or	r4,r4,r3
 20034b8:	2080042e 	bgeu	r4,r2,20034cc <__umoddi3+0x228>
 20034bc:	24c9883a 	add	r4,r4,r19
 20034c0:	24c00236 	bltu	r4,r19,20034cc <__umoddi3+0x228>
 20034c4:	2080012e 	bgeu	r4,r2,20034cc <__umoddi3+0x228>
 20034c8:	24c9883a 	add	r4,r4,r19
 20034cc:	20a1c83a 	sub	r16,r4,r2
 20034d0:	b00b883a 	mov	r5,r22
 20034d4:	8009883a 	mov	r4,r16
 20034d8:	2000f000 	call	2000f00 <__umodsi3>
 20034dc:	1023883a 	mov	r17,r2
 20034e0:	b00b883a 	mov	r5,r22
 20034e4:	8009883a 	mov	r4,r16
 20034e8:	2000e9c0 	call	2000e9c <__udivsi3>
 20034ec:	8822943a 	slli	r17,r17,16
 20034f0:	1545383a 	mul	r2,r2,r21
 20034f4:	a53fffcc 	andi	r20,r20,65535
 20034f8:	a446b03a 	or	r3,r20,r17
 20034fc:	18bfb02e 	bgeu	r3,r2,20033c0 <__alt_mem_onchip_memory2+0xfdffb3c0>
 2003500:	003fab06 	br	20033b0 <__alt_mem_onchip_memory2+0xfdffb3b0>
 2003504:	2005883a 	mov	r2,r4
 2003508:	2807883a 	mov	r3,r5
 200350c:	dfc00b17 	ldw	ra,44(sp)
 2003510:	df000a17 	ldw	fp,40(sp)
 2003514:	ddc00917 	ldw	r23,36(sp)
 2003518:	dd800817 	ldw	r22,32(sp)
 200351c:	dd400717 	ldw	r21,28(sp)
 2003520:	dd000617 	ldw	r20,24(sp)
 2003524:	dcc00517 	ldw	r19,20(sp)
 2003528:	dc800417 	ldw	r18,16(sp)
 200352c:	dc400317 	ldw	r17,12(sp)
 2003530:	dc000217 	ldw	r16,8(sp)
 2003534:	dec00c04 	addi	sp,sp,48
 2003538:	f800283a 	ret
 200353c:	04c03fc4 	movi	r19,255
 2003540:	99c9803a 	cmpltu	r4,r19,r7
 2003544:	200890fa 	slli	r4,r4,3
 2003548:	003fa806 	br	20033ec <__alt_mem_onchip_memory2+0xfdffb3ec>
 200354c:	00803fc4 	movi	r2,255
 2003550:	14c5803a 	cmpltu	r2,r2,r19
 2003554:	100490fa 	slli	r2,r2,3
 2003558:	003fc006 	br	200345c <__alt_mem_onchip_memory2+0xfdffb45c>
 200355c:	00804034 	movhi	r2,256
 2003560:	10bfffc4 	addi	r2,r2,-1
 2003564:	11808b36 	bltu	r2,r6,2003794 <__umoddi3+0x4f0>
 2003568:	01000404 	movi	r4,16
 200356c:	003f6406 	br	2003300 <__alt_mem_onchip_memory2+0xfdffb300>
 2003570:	34c4d83a 	srl	r2,r6,r19
 2003574:	3d0e983a 	sll	r7,r7,r20
 2003578:	8cf8d83a 	srl	fp,r17,r19
 200357c:	8d10983a 	sll	r8,r17,r20
 2003580:	38aab03a 	or	r21,r7,r2
 2003584:	a82cd43a 	srli	r22,r21,16
 2003588:	84e2d83a 	srl	r17,r16,r19
 200358c:	e009883a 	mov	r4,fp
 2003590:	b00b883a 	mov	r5,r22
 2003594:	8a22b03a 	or	r17,r17,r8
 2003598:	3524983a 	sll	r18,r6,r20
 200359c:	2000f000 	call	2000f00 <__umodsi3>
 20035a0:	e009883a 	mov	r4,fp
 20035a4:	b00b883a 	mov	r5,r22
 20035a8:	102f883a 	mov	r23,r2
 20035ac:	2000e9c0 	call	2000e9c <__udivsi3>
 20035b0:	100d883a 	mov	r6,r2
 20035b4:	b808943a 	slli	r4,r23,16
 20035b8:	aa3fffcc 	andi	r8,r21,65535
 20035bc:	8804d43a 	srli	r2,r17,16
 20035c0:	41af383a 	mul	r23,r8,r6
 20035c4:	8520983a 	sll	r16,r16,r20
 20035c8:	1104b03a 	or	r2,r2,r4
 20035cc:	15c0042e 	bgeu	r2,r23,20035e0 <__umoddi3+0x33c>
 20035d0:	1545883a 	add	r2,r2,r21
 20035d4:	30ffffc4 	addi	r3,r6,-1
 20035d8:	1540742e 	bgeu	r2,r21,20037ac <__umoddi3+0x508>
 20035dc:	180d883a 	mov	r6,r3
 20035e0:	15efc83a 	sub	r23,r2,r23
 20035e4:	b00b883a 	mov	r5,r22
 20035e8:	b809883a 	mov	r4,r23
 20035ec:	d9800115 	stw	r6,4(sp)
 20035f0:	da000015 	stw	r8,0(sp)
 20035f4:	2000f000 	call	2000f00 <__umodsi3>
 20035f8:	b00b883a 	mov	r5,r22
 20035fc:	b809883a 	mov	r4,r23
 2003600:	1039883a 	mov	fp,r2
 2003604:	2000e9c0 	call	2000e9c <__udivsi3>
 2003608:	da000017 	ldw	r8,0(sp)
 200360c:	e038943a 	slli	fp,fp,16
 2003610:	100b883a 	mov	r5,r2
 2003614:	4089383a 	mul	r4,r8,r2
 2003618:	8a3fffcc 	andi	r8,r17,65535
 200361c:	4710b03a 	or	r8,r8,fp
 2003620:	d9800117 	ldw	r6,4(sp)
 2003624:	4100042e 	bgeu	r8,r4,2003638 <__umoddi3+0x394>
 2003628:	4551883a 	add	r8,r8,r21
 200362c:	10bfffc4 	addi	r2,r2,-1
 2003630:	45405a2e 	bgeu	r8,r21,200379c <__umoddi3+0x4f8>
 2003634:	100b883a 	mov	r5,r2
 2003638:	300c943a 	slli	r6,r6,16
 200363c:	91ffffcc 	andi	r7,r18,65535
 2003640:	9004d43a 	srli	r2,r18,16
 2003644:	314cb03a 	or	r6,r6,r5
 2003648:	317fffcc 	andi	r5,r6,65535
 200364c:	300cd43a 	srli	r6,r6,16
 2003650:	29d3383a 	mul	r9,r5,r7
 2003654:	288b383a 	mul	r5,r5,r2
 2003658:	31cf383a 	mul	r7,r6,r7
 200365c:	4806d43a 	srli	r3,r9,16
 2003660:	4111c83a 	sub	r8,r8,r4
 2003664:	29cb883a 	add	r5,r5,r7
 2003668:	194b883a 	add	r5,r3,r5
 200366c:	3085383a 	mul	r2,r6,r2
 2003670:	29c0022e 	bgeu	r5,r7,200367c <__umoddi3+0x3d8>
 2003674:	00c00074 	movhi	r3,1
 2003678:	10c5883a 	add	r2,r2,r3
 200367c:	2808d43a 	srli	r4,r5,16
 2003680:	280a943a 	slli	r5,r5,16
 2003684:	4a7fffcc 	andi	r9,r9,65535
 2003688:	2085883a 	add	r2,r4,r2
 200368c:	2a4b883a 	add	r5,r5,r9
 2003690:	40803636 	bltu	r8,r2,200376c <__umoddi3+0x4c8>
 2003694:	40804d26 	beq	r8,r2,20037cc <__umoddi3+0x528>
 2003698:	4089c83a 	sub	r4,r8,r2
 200369c:	280f883a 	mov	r7,r5
 20036a0:	81cfc83a 	sub	r7,r16,r7
 20036a4:	81c7803a 	cmpltu	r3,r16,r7
 20036a8:	20c7c83a 	sub	r3,r4,r3
 20036ac:	1cc4983a 	sll	r2,r3,r19
 20036b0:	3d0ed83a 	srl	r7,r7,r20
 20036b4:	1d06d83a 	srl	r3,r3,r20
 20036b8:	11c4b03a 	or	r2,r2,r7
 20036bc:	003f9306 	br	200350c <__alt_mem_onchip_memory2+0xfdffb50c>
 20036c0:	9ca6983a 	sll	r19,r19,r18
 20036c4:	88e8d83a 	srl	r20,r17,r3
 20036c8:	80c4d83a 	srl	r2,r16,r3
 20036cc:	982cd43a 	srli	r22,r19,16
 20036d0:	8ca2983a 	sll	r17,r17,r18
 20036d4:	a009883a 	mov	r4,r20
 20036d8:	b00b883a 	mov	r5,r22
 20036dc:	1478b03a 	or	fp,r2,r17
 20036e0:	2000f000 	call	2000f00 <__umodsi3>
 20036e4:	a009883a 	mov	r4,r20
 20036e8:	b00b883a 	mov	r5,r22
 20036ec:	1023883a 	mov	r17,r2
 20036f0:	2000e9c0 	call	2000e9c <__udivsi3>
 20036f4:	9d7fffcc 	andi	r21,r19,65535
 20036f8:	880a943a 	slli	r5,r17,16
 20036fc:	e008d43a 	srli	r4,fp,16
 2003700:	a885383a 	mul	r2,r21,r2
 2003704:	84a8983a 	sll	r20,r16,r18
 2003708:	2148b03a 	or	r4,r4,r5
 200370c:	2080042e 	bgeu	r4,r2,2003720 <__umoddi3+0x47c>
 2003710:	24c9883a 	add	r4,r4,r19
 2003714:	24c00236 	bltu	r4,r19,2003720 <__umoddi3+0x47c>
 2003718:	2080012e 	bgeu	r4,r2,2003720 <__umoddi3+0x47c>
 200371c:	24c9883a 	add	r4,r4,r19
 2003720:	20a3c83a 	sub	r17,r4,r2
 2003724:	b00b883a 	mov	r5,r22
 2003728:	8809883a 	mov	r4,r17
 200372c:	2000f000 	call	2000f00 <__umodsi3>
 2003730:	102f883a 	mov	r23,r2
 2003734:	8809883a 	mov	r4,r17
 2003738:	b00b883a 	mov	r5,r22
 200373c:	2000e9c0 	call	2000e9c <__udivsi3>
 2003740:	b82e943a 	slli	r23,r23,16
 2003744:	a885383a 	mul	r2,r21,r2
 2003748:	e13fffcc 	andi	r4,fp,65535
 200374c:	25c8b03a 	or	r4,r4,r23
 2003750:	2080042e 	bgeu	r4,r2,2003764 <__umoddi3+0x4c0>
 2003754:	24c9883a 	add	r4,r4,r19
 2003758:	24c00236 	bltu	r4,r19,2003764 <__umoddi3+0x4c0>
 200375c:	2080012e 	bgeu	r4,r2,2003764 <__umoddi3+0x4c0>
 2003760:	24c9883a 	add	r4,r4,r19
 2003764:	20a3c83a 	sub	r17,r4,r2
 2003768:	003f4806 	br	200348c <__alt_mem_onchip_memory2+0xfdffb48c>
 200376c:	2c8fc83a 	sub	r7,r5,r18
 2003770:	1545c83a 	sub	r2,r2,r21
 2003774:	29cb803a 	cmpltu	r5,r5,r7
 2003778:	1145c83a 	sub	r2,r2,r5
 200377c:	4089c83a 	sub	r4,r8,r2
 2003780:	003fc706 	br	20036a0 <__alt_mem_onchip_memory2+0xfdffb6a0>
 2003784:	01000604 	movi	r4,24
 2003788:	003f1806 	br	20033ec <__alt_mem_onchip_memory2+0xfdffb3ec>
 200378c:	00800604 	movi	r2,24
 2003790:	003f3206 	br	200345c <__alt_mem_onchip_memory2+0xfdffb45c>
 2003794:	01000604 	movi	r4,24
 2003798:	003ed906 	br	2003300 <__alt_mem_onchip_memory2+0xfdffb300>
 200379c:	413fa52e 	bgeu	r8,r4,2003634 <__alt_mem_onchip_memory2+0xfdffb634>
 20037a0:	297fff84 	addi	r5,r5,-2
 20037a4:	4551883a 	add	r8,r8,r21
 20037a8:	003fa306 	br	2003638 <__alt_mem_onchip_memory2+0xfdffb638>
 20037ac:	15ff8b2e 	bgeu	r2,r23,20035dc <__alt_mem_onchip_memory2+0xfdffb5dc>
 20037b0:	31bfff84 	addi	r6,r6,-2
 20037b4:	1545883a 	add	r2,r2,r21
 20037b8:	003f8906 	br	20035e0 <__alt_mem_onchip_memory2+0xfdffb5e0>
 20037bc:	24c9883a 	add	r4,r4,r19
 20037c0:	003eee06 	br	200337c <__alt_mem_onchip_memory2+0xfdffb37c>
 20037c4:	8005883a 	mov	r2,r16
 20037c8:	003f1706 	br	2003428 <__alt_mem_onchip_memory2+0xfdffb428>
 20037cc:	817fe736 	bltu	r16,r5,200376c <__alt_mem_onchip_memory2+0xfdffb76c>
 20037d0:	280f883a 	mov	r7,r5
 20037d4:	0009883a 	mov	r4,zero
 20037d8:	003fb106 	br	20036a0 <__alt_mem_onchip_memory2+0xfdffb6a0>

020037dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20037dc:	defffd04 	addi	sp,sp,-12
 20037e0:	df000215 	stw	fp,8(sp)
 20037e4:	df000204 	addi	fp,sp,8
 20037e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20037ec:	0001883a 	nop
 20037f0:	e0bfff17 	ldw	r2,-4(fp)
 20037f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 20037f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20037fc:	10000226 	beq	r2,zero,2003808 <_exit+0x2c>
    ALT_SIM_FAIL();
 2003800:	002af070 	cmpltui	zero,zero,43969
 2003804:	00000106 	br	200380c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2003808:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 200380c:	003fff06 	br	200380c <__alt_mem_onchip_memory2+0xfdffb80c>
