
nios_proj.elf:     file format elf32-littlenios2
nios_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00004650 memsz 0x00004650 flags r-x
    LOAD off    0x00005670 vaddr 0x00004670 paddr 0x00005a5c align 2**12
         filesz 0x000013ec memsz 0x000013ec flags rw-
    LOAD off    0x00006e48 vaddr 0x00006e48 paddr 0x00006e48 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004394  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000ac  000045c4  000045c4  000055c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013ec  00004670  00005a5c  00005670  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00006e48  00006e48  00006e48  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00006f70  00006f70  00006a5c  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  02000000  02000000  00006a5c  2**0
                  CONTENTS
  8 .epcs_flash_controller 00000000  02009000  02009000  00006a5c  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00006a5c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000007e0  00000000  00000000  00006a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000c0e0  00000000  00000000  00007260  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000040a5  00000000  00000000  00013340  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000451d  00000000  00000000  000173e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001210  00000000  00000000  0001b904  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000272d  00000000  00000000  0001cb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001a9e  00000000  00000000  0001f241  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00020ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000380  00000000  00000000  00020cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00023445  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  00023448  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0002344b  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0002344c  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0002344d  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00023451  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00023455  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  00023459  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  00023462  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0002346b  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000d  00000000  00000000  00023474  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003d  00000000  00000000  00023481  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000516c2  00000000  00000000  000234be  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000045c4 l    d  .rodata	00000000 .rodata
00004670 l    d  .rwdata	00000000 .rwdata
00006e48 l    d  .bss	00000000 .bss
00006f70 l    d  .sdram	00000000 .sdram
02000000 l    d  .onchip_memory2	00000000 .onchip_memory2
02009000 l    d  .epcs_flash_controller	00000000 .epcs_flash_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Class2018/Documents/Projects/Crypto_wallet/impl/nios_proj_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 wallet_main.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000006f8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00004670 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000f98 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00005a2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000011b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000012ec l     F .text	00000034 alt_dev_reg
00004750 l     O .rwdata	000000cc epcs_flash_controller
0000481c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
000013b0 l     F .text	00000034 alt_flash_device_register
00001438 l     F .text	000003f8 alt_epcs_flash_query
00001830 l     F .text	000000ec alt_epcs_flash_memcmp
00001c08 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000020d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000022dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
00002970 l     F .text	00000038 epcs_test_wip
000029a8 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000307c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000031b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000031dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000036f8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00003858 l     F .text	0000003c alt_get_errno
00003894 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00006e6c g     O .bss	00000004 alt_instruction_exception_handler
00001b7c g     F .text	0000008c alt_epcs_flash_get_info
00001084 g     F .text	0000007c alt_main
000005f8 g     F .text	00000080 _puts_r
00006e70 g     O .bss	00000100 alt_irq
00005a5c g       *ABS*	00000000 __flash_rwdata_start
00006f70 g       *ABS*	00000000 __alt_heap_start
000005ac g     F .text	0000004c printf
00003d04 g     F .text	00000024 altera_nios2_gen2_irq_init
000029e4 g     F .text	000000fc epcs_sector_erase
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00006e50 g     O .bss	00000004 errno
00006e58 g     O .bss	00000004 alt_argv
0000da24 g       *ABS*	00000000 _gp
000058a4 g     O .rwdata	00000180 alt_fd_list
00002c28 g     F .text	0000006c epcs_write_status_register
00003f24 g     F .text	00000090 alt_find_dev
00004280 g     F .text	00000028 memcpy
000037dc g     F .text	0000007c alt_io_redirect
000045c4 g       *ABS*	00000000 __DTOR_END__
00000678 g     F .text	00000014 puts
00004180 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001d14 g     F .text	00000100 alt_epcs_flash_write_block
000024d4 g     F .text	0000021c altera_avalon_jtag_uart_read
0000030c g     F .text	00000014 malloc
00000570 g     F .text	0000003c _printf_r
00000eb4 g     F .text	00000064 .hidden __udivsi3
0000068c g     F .text	00000050 _sbrk_r
00005a40 g     O .rwdata	00000004 alt_max_fd
00001c9c g     F .text	00000078 alt_epcs_flash_erase_block
00005a24 g     O .rwdata	00000004 _global_impure_ptr
00002ef4 g     F .text	0000005c epcs_exit_4_bytes_mode
00006f70 g       *ABS*	00000000 __bss_end
00003608 g     F .text	000000f0 alt_iic_isr_register
00003bfc g     F .text	00000108 alt_tick
000035bc g     F .text	0000004c alt_ic_irq_enabled
00003b60 g     F .text	0000009c alt_alarm_stop
00006e60 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
0000587c g     O .rwdata	00000028 alt_dev_null
00003190 g     F .text	00000020 alt_dcache_flush_all
00005a5c g       *ABS*	00000000 __ram_rwdata_end
00005a38 g     O .rwdata	00000008 alt_dev_list
000011ec g     F .text	00000100 write
00004670 g       *ABS*	00000000 __ram_rodata_end
00000f18 g     F .text	00000058 .hidden __umodsi3
00002db0 g     F .text	00000068 epcs_read_electronic_signature
00006f70 g       *ABS*	00000000 end
00002010 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000045c4 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
000026f0 g     F .text	00000224 altera_avalon_jtag_uart_write
00000764 g     F .text	0000052c ___vfprintf_internal_r
00000334 g     F .text	000000e4 _free_r
00004400 g     F .text	00000190 __call_exitprocs
00000230 g     F .text	0000003c _start
00006e64 g     O .bss	00000004 _alt_tick_rate
00003d28 g     F .text	000001fc alt_avalon_spi_command
00006e68 g     O .bss	00000004 _alt_nticks
00001358 g     F .text	00000058 alt_sys_init
000042a8 g     F .text	00000158 __register_exitproc
0000237c g     F .text	00000068 altera_avalon_jtag_uart_close
00000f70 g     F .text	00000028 .hidden __mulsi3
00004670 g       *ABS*	00000000 __ram_rwdata_start
000045c4 g       *ABS*	00000000 __ram_rodata_start
00002914 g     F .text	0000005c epcs_read_status_register
00001eac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000040bc g     F .text	000000c4 alt_get_fd
00002e18 g     F .text	00000080 epcs_read_device_id
00004250 g     F .text	00000030 memcmp
00001f6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00006f70 g       *ABS*	00000000 __alt_stack_base
00001fbc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
00003fb4 g     F .text	00000108 alt_find_file
00003218 g     F .text	000000a4 alt_dev_llist_insert
00001100 g     F .text	000000b0 sbrk
00005a48 g     O .rwdata	00000008 alt_flash_dev_list
00000cac g     F .text	000000b8 __sfvwrite_small_dev
00006e48 g       *ABS*	00000000 __bss_start
0000026c g     F .text	000000a0 main
00006e5c g     O .bss	00000004 alt_envp
00001f0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02000000 g       *ABS*	00000000 __alt_heap_limit
00000418 g     F .text	00000158 _malloc_r
00005a44 g     O .rwdata	00000004 alt_errno
00000dbc g     F .text	00000084 .hidden __divsi3
000045c4 g       *ABS*	00000000 __CTOR_END__
0000191c g     F .text	00000260 alt_epcs_flash_write
000045c4 g       *ABS*	00000000 __flash_rodata_start
000045c4 g       *ABS*	00000000 __DTOR_LIST__
00001320 g     F .text	00000038 alt_irq_init
00003adc g     F .text	00000084 alt_release_fd
0000421c g     F .text	00000014 atexit
00000d64 g     F .text	00000058 _write_r
00005a28 g     O .rwdata	00000004 _impure_ptr
00006e54 g     O .bss	00000004 alt_argc
0000331c g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005a30 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002ae0 g     F .text	000000f4 epcs_read_buffer
02000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000013e4 g     F .text	00000054 alt_epcs_flash_init
00003458 g     F .text	00000050 alt_ic_isr_register
00005a5c g       *ABS*	00000000 _edata
00006f70 g       *ABS*	00000000 _end
0000337c g     F .text	00000068 alt_flash_open_dev
00000230 g       *ABS*	00000000 __ram_exceptions_end
000023e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00003530 g     F .text	0000008c alt_ic_irq_disable
00002e98 g     F .text	0000005c epcs_enter_4_bytes_mode
00004230 g     F .text	00000020 exit
000033e4 g     F .text	00000054 alt_flash_close_dev
00000e40 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
00004590 g     F .text	00000034 _exit
00002f50 g     F .text	0000012c alt_alarm_start
000006dc g     F .text	0000001c strlen
00002bd4 g     F .text	00000054 epcs_write_enable
00003980 g     F .text	0000015c open
00006e48 g     O .bss	00000004 __malloc_sbrk_start
00003438 g     F .text	00000020 alt_icache_flush_all
00005a50 g     O .rwdata	00000004 alt_priority_mask
00006e4c g     O .bss	00000004 __malloc_free_list
000034a8 g     F .text	00000088 alt_ic_irq_enable
00000c90 g     F .text	0000001c __vfprintf_internal
00001e14 g     F .text	00000098 alt_epcs_flash_read
00005a54 g     O .rwdata	00000008 alt_alarm_list
000032bc g     F .text	00000060 _do_ctors
000030b8 g     F .text	000000d8 close
00001000 g     F .text	00000084 alt_load
00000320 g     F .text	00000014 free
00002c94 g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800034 	movhi	r2,0
 140:	109b9c04 	addi	r2,r2,28272
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800034 	movhi	r2,0
 158:	109b9c04 	addi	r2,r2,28272
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_epcs_flash_controller+0xfdff712c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_epcs_flash_controller+0xfdff7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a51217 	ldw	r2,-27576(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a51217 	ldw	r2,-27576(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     23c:	d6b68914 	ori	gp,gp,55844
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     244:	109b9214 	ori	r2,r2,28232

    movhi r3, %hi(__bss_end)
     248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     24c:	18dbdc14 	ori	r3,r3,28528

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_epcs_flash_controller+0xfdff7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00010000 	call	1000 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00010840 	call	1084 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_epcs_flash_controller+0xfdff7268>

0000026c <main>:
#include <stdlib.h>
#include <stdio.h>


int main()
{
     26c:	defffb04 	addi	sp,sp,-20
     270:	dfc00415 	stw	ra,16(sp)
     274:	df000315 	stw	fp,12(sp)
     278:	df000304 	addi	fp,sp,12
	printf("Hello World from NIOS II\n");
     27c:	01000034 	movhi	r4,0
     280:	21117104 	addi	r4,r4,17860
     284:	00006780 	call	678 <puts>
	printf("Software Version: %d.%d.%d\n\n", SOFTWARE_VERSION_MAJOR, SOFTWARE_VERSION_MINOR, SOFTWARE_VERSION_REV);
     288:	000f883a 	mov	r7,zero
     28c:	000d883a 	mov	r6,zero
     290:	01400044 	movi	r5,1
     294:	01000034 	movhi	r4,0
     298:	21117804 	addi	r4,r4,17888
     29c:	00005ac0 	call	5ac <printf>

	void *lots_of_memory = malloc(1024 * 1024 * 10);	// attempt to allocate 10MB
     2a0:	01002834 	movhi	r4,160
     2a4:	000030c0 	call	30c <malloc>
     2a8:	e0bfff15 	stw	r2,-4(fp)
    printf("SDRAM allocation returned 0x%08lx\n", (alt_u32)lots_of_memory);
     2ac:	e0bfff17 	ldw	r2,-4(fp)
     2b0:	100b883a 	mov	r5,r2
     2b4:	01000034 	movhi	r4,0
     2b8:	21118004 	addi	r4,r4,17920
     2bc:	00005ac0 	call	5ac <printf>

    int count = 0;
     2c0:	e03ffd15 	stw	zero,-12(fp)
    int delay;
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
     2c4:	e0bffd17 	ldw	r2,-12(fp)
     2c8:	10c03fcc 	andi	r3,r2,255
     2cc:	00808074 	movhi	r2,513
     2d0:	10a80804 	addi	r2,r2,-24544
     2d4:	10c00035 	stwio	r3,0(r2)
        delay = 0;
     2d8:	e03ffe15 	stw	zero,-8(fp)
        while(delay < 200000)
     2dc:	00000306 	br	2ec <main+0x80>
        {
            delay++;
     2e0:	e0bffe17 	ldw	r2,-8(fp)
     2e4:	10800044 	addi	r2,r2,1
     2e8:	e0bffe15 	stw	r2,-8(fp)
    int delay;
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
        delay = 0;
        while(delay < 200000)
     2ec:	e0fffe17 	ldw	r3,-8(fp)
     2f0:	008000f4 	movhi	r2,3
     2f4:	10834fc4 	addi	r2,r2,3391
     2f8:	10fff90e 	bge	r2,r3,2e0 <__alt_mem_epcs_flash_controller+0xfdff72e0>
        {
            delay++;
        }
        count++;
     2fc:	e0bffd17 	ldw	r2,-12(fp)
     300:	10800044 	addi	r2,r2,1
     304:	e0bffd15 	stw	r2,-12(fp)
    }
     308:	003fee06 	br	2c4 <__alt_mem_epcs_flash_controller+0xfdff72c4>

0000030c <malloc>:
     30c:	00800034 	movhi	r2,0
     310:	10968a04 	addi	r2,r2,23080
     314:	200b883a 	mov	r5,r4
     318:	11000017 	ldw	r4,0(r2)
     31c:	00004181 	jmpi	418 <_malloc_r>

00000320 <free>:
     320:	00800034 	movhi	r2,0
     324:	10968a04 	addi	r2,r2,23080
     328:	200b883a 	mov	r5,r4
     32c:	11000017 	ldw	r4,0(r2)
     330:	00003341 	jmpi	334 <_free_r>

00000334 <_free_r>:
     334:	28003726 	beq	r5,zero,414 <_free_r+0xe0>
     338:	28ffff17 	ldw	r3,-4(r5)
     33c:	28bfff04 	addi	r2,r5,-4
     340:	1800010e 	bge	r3,zero,348 <_free_r+0x14>
     344:	10c5883a 	add	r2,r2,r3
     348:	01400034 	movhi	r5,0
     34c:	295b9304 	addi	r5,r5,28236
     350:	28c00017 	ldw	r3,0(r5)
     354:	280d883a 	mov	r6,r5
     358:	1800031e 	bne	r3,zero,368 <_free_r+0x34>
     35c:	10000115 	stw	zero,4(r2)
     360:	28800015 	stw	r2,0(r5)
     364:	f800283a 	ret
     368:	10c00c2e 	bgeu	r2,r3,39c <_free_r+0x68>
     36c:	11000017 	ldw	r4,0(r2)
     370:	110b883a 	add	r5,r2,r4
     374:	1940041e 	bne	r3,r5,388 <_free_r+0x54>
     378:	19400017 	ldw	r5,0(r3)
     37c:	18c00117 	ldw	r3,4(r3)
     380:	2909883a 	add	r4,r5,r4
     384:	11000015 	stw	r4,0(r2)
     388:	10c00115 	stw	r3,4(r2)
     38c:	30800015 	stw	r2,0(r6)
     390:	f800283a 	ret
     394:	11400336 	bltu	r2,r5,3a4 <_free_r+0x70>
     398:	2807883a 	mov	r3,r5
     39c:	19400117 	ldw	r5,4(r3)
     3a0:	283ffc1e 	bne	r5,zero,394 <__alt_mem_epcs_flash_controller+0xfdff7394>
     3a4:	19c00017 	ldw	r7,0(r3)
     3a8:	19cd883a 	add	r6,r3,r7
     3ac:	30800a1e 	bne	r6,r2,3d8 <_free_r+0xa4>
     3b0:	10800017 	ldw	r2,0(r2)
     3b4:	3885883a 	add	r2,r7,r2
     3b8:	18800015 	stw	r2,0(r3)
     3bc:	1889883a 	add	r4,r3,r2
     3c0:	2900141e 	bne	r5,r4,414 <_free_r+0xe0>
     3c4:	29000017 	ldw	r4,0(r5)
     3c8:	2085883a 	add	r2,r4,r2
     3cc:	18800015 	stw	r2,0(r3)
     3d0:	28800117 	ldw	r2,4(r5)
     3d4:	00000e06 	br	410 <_free_r+0xdc>
     3d8:	1180032e 	bgeu	r2,r6,3e8 <_free_r+0xb4>
     3dc:	00800304 	movi	r2,12
     3e0:	20800015 	stw	r2,0(r4)
     3e4:	f800283a 	ret
     3e8:	11000017 	ldw	r4,0(r2)
     3ec:	110d883a 	add	r6,r2,r4
     3f0:	2980061e 	bne	r5,r6,40c <_free_r+0xd8>
     3f4:	29800017 	ldw	r6,0(r5)
     3f8:	3109883a 	add	r4,r6,r4
     3fc:	11000015 	stw	r4,0(r2)
     400:	29000117 	ldw	r4,4(r5)
     404:	11000115 	stw	r4,4(r2)
     408:	00000106 	br	410 <_free_r+0xdc>
     40c:	11400115 	stw	r5,4(r2)
     410:	18800115 	stw	r2,4(r3)
     414:	f800283a 	ret

00000418 <_malloc_r>:
     418:	defffb04 	addi	sp,sp,-20
     41c:	00bfff04 	movi	r2,-4
     420:	dc400115 	stw	r17,4(sp)
     424:	2c4000c4 	addi	r17,r5,3
     428:	88a2703a 	and	r17,r17,r2
     42c:	dc800215 	stw	r18,8(sp)
     430:	dfc00415 	stw	ra,16(sp)
     434:	dcc00315 	stw	r19,12(sp)
     438:	dc000015 	stw	r16,0(sp)
     43c:	8c400204 	addi	r17,r17,8
     440:	00800304 	movi	r2,12
     444:	2025883a 	mov	r18,r4
     448:	8880022e 	bgeu	r17,r2,454 <_malloc_r+0x3c>
     44c:	1023883a 	mov	r17,r2
     450:	00000506 	br	468 <_malloc_r+0x50>
     454:	8800040e 	bge	r17,zero,468 <_malloc_r+0x50>
     458:	00800304 	movi	r2,12
     45c:	90800015 	stw	r2,0(r18)
     460:	0005883a 	mov	r2,zero
     464:	00003b06 	br	554 <_malloc_r+0x13c>
     468:	897ffb36 	bltu	r17,r5,458 <__alt_mem_epcs_flash_controller+0xfdff7458>
     46c:	00800034 	movhi	r2,0
     470:	109b9304 	addi	r2,r2,28236
     474:	10c00017 	ldw	r3,0(r2)
     478:	1009883a 	mov	r4,r2
     47c:	1821883a 	mov	r16,r3
     480:	80000926 	beq	r16,zero,4a8 <_malloc_r+0x90>
     484:	80800017 	ldw	r2,0(r16)
     488:	1445c83a 	sub	r2,r2,r17
     48c:	10001516 	blt	r2,zero,4e4 <_malloc_r+0xcc>
     490:	014002c4 	movi	r5,11
     494:	28800d2e 	bgeu	r5,r2,4cc <_malloc_r+0xb4>
     498:	80800015 	stw	r2,0(r16)
     49c:	80a1883a 	add	r16,r16,r2
     4a0:	84400015 	stw	r17,0(r16)
     4a4:	8000221e 	bne	r16,zero,530 <_malloc_r+0x118>
     4a8:	04000034 	movhi	r16,0
     4ac:	841b9204 	addi	r16,r16,28232
     4b0:	80800017 	ldw	r2,0(r16)
     4b4:	10000e1e 	bne	r2,zero,4f0 <_malloc_r+0xd8>
     4b8:	000b883a 	mov	r5,zero
     4bc:	9009883a 	mov	r4,r18
     4c0:	000068c0 	call	68c <_sbrk_r>
     4c4:	80800015 	stw	r2,0(r16)
     4c8:	00000906 	br	4f0 <_malloc_r+0xd8>
     4cc:	80800117 	ldw	r2,4(r16)
     4d0:	1c00021e 	bne	r3,r16,4dc <_malloc_r+0xc4>
     4d4:	20800015 	stw	r2,0(r4)
     4d8:	00001506 	br	530 <_malloc_r+0x118>
     4dc:	18800115 	stw	r2,4(r3)
     4e0:	00001306 	br	530 <_malloc_r+0x118>
     4e4:	8007883a 	mov	r3,r16
     4e8:	84000117 	ldw	r16,4(r16)
     4ec:	003fe406 	br	480 <__alt_mem_epcs_flash_controller+0xfdff7480>
     4f0:	880b883a 	mov	r5,r17
     4f4:	9009883a 	mov	r4,r18
     4f8:	000068c0 	call	68c <_sbrk_r>
     4fc:	04ffffc4 	movi	r19,-1
     500:	14ffd526 	beq	r2,r19,458 <__alt_mem_epcs_flash_controller+0xfdff7458>
     504:	140000c4 	addi	r16,r2,3
     508:	00ffff04 	movi	r3,-4
     50c:	80e0703a 	and	r16,r16,r3
     510:	1400021e 	bne	r2,r16,51c <_malloc_r+0x104>
     514:	84400015 	stw	r17,0(r16)
     518:	00000506 	br	530 <_malloc_r+0x118>
     51c:	808bc83a 	sub	r5,r16,r2
     520:	9009883a 	mov	r4,r18
     524:	000068c0 	call	68c <_sbrk_r>
     528:	14fffa1e 	bne	r2,r19,514 <__alt_mem_epcs_flash_controller+0xfdff7514>
     52c:	003fca06 	br	458 <__alt_mem_epcs_flash_controller+0xfdff7458>
     530:	810002c4 	addi	r4,r16,11
     534:	00bffe04 	movi	r2,-8
     538:	80c00104 	addi	r3,r16,4
     53c:	2084703a 	and	r2,r4,r2
     540:	10c7c83a 	sub	r3,r2,r3
     544:	18000326 	beq	r3,zero,554 <_malloc_r+0x13c>
     548:	80e1883a 	add	r16,r16,r3
     54c:	00c7c83a 	sub	r3,zero,r3
     550:	80c00015 	stw	r3,0(r16)
     554:	dfc00417 	ldw	ra,16(sp)
     558:	dcc00317 	ldw	r19,12(sp)
     55c:	dc800217 	ldw	r18,8(sp)
     560:	dc400117 	ldw	r17,4(sp)
     564:	dc000017 	ldw	r16,0(sp)
     568:	dec00504 	addi	sp,sp,20
     56c:	f800283a 	ret

00000570 <_printf_r>:
     570:	defffd04 	addi	sp,sp,-12
     574:	dfc00015 	stw	ra,0(sp)
     578:	d9800115 	stw	r6,4(sp)
     57c:	d9c00215 	stw	r7,8(sp)
     580:	20c00217 	ldw	r3,8(r4)
     584:	01800034 	movhi	r6,0
     588:	31832b04 	addi	r6,r6,3244
     58c:	19800115 	stw	r6,4(r3)
     590:	280d883a 	mov	r6,r5
     594:	21400217 	ldw	r5,8(r4)
     598:	d9c00104 	addi	r7,sp,4
     59c:	00007640 	call	764 <___vfprintf_internal_r>
     5a0:	dfc00017 	ldw	ra,0(sp)
     5a4:	dec00304 	addi	sp,sp,12
     5a8:	f800283a 	ret

000005ac <printf>:
     5ac:	defffc04 	addi	sp,sp,-16
     5b0:	dfc00015 	stw	ra,0(sp)
     5b4:	d9400115 	stw	r5,4(sp)
     5b8:	d9800215 	stw	r6,8(sp)
     5bc:	d9c00315 	stw	r7,12(sp)
     5c0:	00800034 	movhi	r2,0
     5c4:	10968a04 	addi	r2,r2,23080
     5c8:	10800017 	ldw	r2,0(r2)
     5cc:	01400034 	movhi	r5,0
     5d0:	29432b04 	addi	r5,r5,3244
     5d4:	10c00217 	ldw	r3,8(r2)
     5d8:	d9800104 	addi	r6,sp,4
     5dc:	19400115 	stw	r5,4(r3)
     5e0:	200b883a 	mov	r5,r4
     5e4:	11000217 	ldw	r4,8(r2)
     5e8:	0000c900 	call	c90 <__vfprintf_internal>
     5ec:	dfc00017 	ldw	ra,0(sp)
     5f0:	dec00404 	addi	sp,sp,16
     5f4:	f800283a 	ret

000005f8 <_puts_r>:
     5f8:	defffd04 	addi	sp,sp,-12
     5fc:	dc000015 	stw	r16,0(sp)
     600:	2021883a 	mov	r16,r4
     604:	2809883a 	mov	r4,r5
     608:	dfc00215 	stw	ra,8(sp)
     60c:	dc400115 	stw	r17,4(sp)
     610:	2823883a 	mov	r17,r5
     614:	00006dc0 	call	6dc <strlen>
     618:	81400217 	ldw	r5,8(r16)
     61c:	01000034 	movhi	r4,0
     620:	21032b04 	addi	r4,r4,3244
     624:	29000115 	stw	r4,4(r5)
     628:	100f883a 	mov	r7,r2
     62c:	880d883a 	mov	r6,r17
     630:	8009883a 	mov	r4,r16
     634:	0000cac0 	call	cac <__sfvwrite_small_dev>
     638:	00ffffc4 	movi	r3,-1
     63c:	10c00926 	beq	r2,r3,664 <_puts_r+0x6c>
     640:	81400217 	ldw	r5,8(r16)
     644:	01800034 	movhi	r6,0
     648:	01c00044 	movi	r7,1
     64c:	28800117 	ldw	r2,4(r5)
     650:	31918904 	addi	r6,r6,17956
     654:	8009883a 	mov	r4,r16
     658:	103ee83a 	callr	r2
     65c:	10bfffe0 	cmpeqi	r2,r2,-1
     660:	0085c83a 	sub	r2,zero,r2
     664:	dfc00217 	ldw	ra,8(sp)
     668:	dc400117 	ldw	r17,4(sp)
     66c:	dc000017 	ldw	r16,0(sp)
     670:	dec00304 	addi	sp,sp,12
     674:	f800283a 	ret

00000678 <puts>:
     678:	00800034 	movhi	r2,0
     67c:	10968a04 	addi	r2,r2,23080
     680:	200b883a 	mov	r5,r4
     684:	11000017 	ldw	r4,0(r2)
     688:	00005f81 	jmpi	5f8 <_puts_r>

0000068c <_sbrk_r>:
     68c:	defffd04 	addi	sp,sp,-12
     690:	dc000015 	stw	r16,0(sp)
     694:	04000034 	movhi	r16,0
     698:	dc400115 	stw	r17,4(sp)
     69c:	841b9404 	addi	r16,r16,28240
     6a0:	2023883a 	mov	r17,r4
     6a4:	2809883a 	mov	r4,r5
     6a8:	dfc00215 	stw	ra,8(sp)
     6ac:	80000015 	stw	zero,0(r16)
     6b0:	00011000 	call	1100 <sbrk>
     6b4:	00ffffc4 	movi	r3,-1
     6b8:	10c0031e 	bne	r2,r3,6c8 <_sbrk_r+0x3c>
     6bc:	80c00017 	ldw	r3,0(r16)
     6c0:	18000126 	beq	r3,zero,6c8 <_sbrk_r+0x3c>
     6c4:	88c00015 	stw	r3,0(r17)
     6c8:	dfc00217 	ldw	ra,8(sp)
     6cc:	dc400117 	ldw	r17,4(sp)
     6d0:	dc000017 	ldw	r16,0(sp)
     6d4:	dec00304 	addi	sp,sp,12
     6d8:	f800283a 	ret

000006dc <strlen>:
     6dc:	2005883a 	mov	r2,r4
     6e0:	10c00007 	ldb	r3,0(r2)
     6e4:	18000226 	beq	r3,zero,6f0 <strlen+0x14>
     6e8:	10800044 	addi	r2,r2,1
     6ec:	003ffc06 	br	6e0 <__alt_mem_epcs_flash_controller+0xfdff76e0>
     6f0:	1105c83a 	sub	r2,r2,r4
     6f4:	f800283a 	ret

000006f8 <print_repeat>:
     6f8:	defffb04 	addi	sp,sp,-20
     6fc:	dc800315 	stw	r18,12(sp)
     700:	dc400215 	stw	r17,8(sp)
     704:	dc000115 	stw	r16,4(sp)
     708:	dfc00415 	stw	ra,16(sp)
     70c:	2025883a 	mov	r18,r4
     710:	2823883a 	mov	r17,r5
     714:	d9800005 	stb	r6,0(sp)
     718:	3821883a 	mov	r16,r7
     71c:	04000a0e 	bge	zero,r16,748 <print_repeat+0x50>
     720:	88800117 	ldw	r2,4(r17)
     724:	01c00044 	movi	r7,1
     728:	d80d883a 	mov	r6,sp
     72c:	880b883a 	mov	r5,r17
     730:	9009883a 	mov	r4,r18
     734:	103ee83a 	callr	r2
     738:	843fffc4 	addi	r16,r16,-1
     73c:	103ff726 	beq	r2,zero,71c <__alt_mem_epcs_flash_controller+0xfdff771c>
     740:	00bfffc4 	movi	r2,-1
     744:	00000106 	br	74c <print_repeat+0x54>
     748:	0005883a 	mov	r2,zero
     74c:	dfc00417 	ldw	ra,16(sp)
     750:	dc800317 	ldw	r18,12(sp)
     754:	dc400217 	ldw	r17,8(sp)
     758:	dc000117 	ldw	r16,4(sp)
     75c:	dec00504 	addi	sp,sp,20
     760:	f800283a 	ret

00000764 <___vfprintf_internal_r>:
     764:	deffe504 	addi	sp,sp,-108
     768:	d8c00804 	addi	r3,sp,32
     76c:	ddc01815 	stw	r23,96(sp)
     770:	dd801715 	stw	r22,92(sp)
     774:	dd401615 	stw	r21,88(sp)
     778:	dd001515 	stw	r20,84(sp)
     77c:	dcc01415 	stw	r19,80(sp)
     780:	dc801315 	stw	r18,76(sp)
     784:	dc401215 	stw	r17,72(sp)
     788:	dc001115 	stw	r16,68(sp)
     78c:	dfc01a15 	stw	ra,104(sp)
     790:	df001915 	stw	fp,100(sp)
     794:	2029883a 	mov	r20,r4
     798:	2823883a 	mov	r17,r5
     79c:	382d883a 	mov	r22,r7
     7a0:	d9800f15 	stw	r6,60(sp)
     7a4:	0021883a 	mov	r16,zero
     7a8:	d8000e15 	stw	zero,56(sp)
     7ac:	d8000a15 	stw	zero,40(sp)
     7b0:	002b883a 	mov	r21,zero
     7b4:	0027883a 	mov	r19,zero
     7b8:	0025883a 	mov	r18,zero
     7bc:	d8000c15 	stw	zero,48(sp)
     7c0:	d8000b15 	stw	zero,44(sp)
     7c4:	002f883a 	mov	r23,zero
     7c8:	d8c00915 	stw	r3,36(sp)
     7cc:	d8c00f17 	ldw	r3,60(sp)
     7d0:	19000003 	ldbu	r4,0(r3)
     7d4:	20803fcc 	andi	r2,r4,255
     7d8:	1080201c 	xori	r2,r2,128
     7dc:	10bfe004 	addi	r2,r2,-128
     7e0:	10011e26 	beq	r2,zero,c5c <___vfprintf_internal_r+0x4f8>
     7e4:	00c00044 	movi	r3,1
     7e8:	b8c01426 	beq	r23,r3,83c <___vfprintf_internal_r+0xd8>
     7ec:	1dc00216 	blt	r3,r23,7f8 <___vfprintf_internal_r+0x94>
     7f0:	b8000626 	beq	r23,zero,80c <___vfprintf_internal_r+0xa8>
     7f4:	00011506 	br	c4c <___vfprintf_internal_r+0x4e8>
     7f8:	01400084 	movi	r5,2
     7fc:	b9401d26 	beq	r23,r5,874 <___vfprintf_internal_r+0x110>
     800:	014000c4 	movi	r5,3
     804:	b9402b26 	beq	r23,r5,8b4 <___vfprintf_internal_r+0x150>
     808:	00011006 	br	c4c <___vfprintf_internal_r+0x4e8>
     80c:	01400944 	movi	r5,37
     810:	1140fc26 	beq	r2,r5,c04 <___vfprintf_internal_r+0x4a0>
     814:	88800117 	ldw	r2,4(r17)
     818:	d9000005 	stb	r4,0(sp)
     81c:	01c00044 	movi	r7,1
     820:	d80d883a 	mov	r6,sp
     824:	880b883a 	mov	r5,r17
     828:	a009883a 	mov	r4,r20
     82c:	103ee83a 	callr	r2
     830:	1000d81e 	bne	r2,zero,b94 <___vfprintf_internal_r+0x430>
     834:	84000044 	addi	r16,r16,1
     838:	00010406 	br	c4c <___vfprintf_internal_r+0x4e8>
     83c:	01400c04 	movi	r5,48
     840:	1140fa26 	beq	r2,r5,c2c <___vfprintf_internal_r+0x4c8>
     844:	01400944 	movi	r5,37
     848:	11400a1e 	bne	r2,r5,874 <___vfprintf_internal_r+0x110>
     84c:	d8800005 	stb	r2,0(sp)
     850:	88800117 	ldw	r2,4(r17)
     854:	b80f883a 	mov	r7,r23
     858:	d80d883a 	mov	r6,sp
     85c:	880b883a 	mov	r5,r17
     860:	a009883a 	mov	r4,r20
     864:	103ee83a 	callr	r2
     868:	1000ca1e 	bne	r2,zero,b94 <___vfprintf_internal_r+0x430>
     86c:	84000044 	addi	r16,r16,1
     870:	0000f506 	br	c48 <___vfprintf_internal_r+0x4e4>
     874:	25fff404 	addi	r23,r4,-48
     878:	bdc03fcc 	andi	r23,r23,255
     87c:	00c00244 	movi	r3,9
     880:	1dc00936 	bltu	r3,r23,8a8 <___vfprintf_internal_r+0x144>
     884:	00bfffc4 	movi	r2,-1
     888:	90800426 	beq	r18,r2,89c <___vfprintf_internal_r+0x138>
     88c:	01400284 	movi	r5,10
     890:	9009883a 	mov	r4,r18
     894:	0000f700 	call	f70 <__mulsi3>
     898:	00000106 	br	8a0 <___vfprintf_internal_r+0x13c>
     89c:	0005883a 	mov	r2,zero
     8a0:	b8a5883a 	add	r18,r23,r2
     8a4:	0000e206 	br	c30 <___vfprintf_internal_r+0x4cc>
     8a8:	01400b84 	movi	r5,46
     8ac:	1140e426 	beq	r2,r5,c40 <___vfprintf_internal_r+0x4dc>
     8b0:	05c00084 	movi	r23,2
     8b4:	213ff404 	addi	r4,r4,-48
     8b8:	27003fcc 	andi	fp,r4,255
     8bc:	00c00244 	movi	r3,9
     8c0:	1f000936 	bltu	r3,fp,8e8 <___vfprintf_internal_r+0x184>
     8c4:	00bfffc4 	movi	r2,-1
     8c8:	98800426 	beq	r19,r2,8dc <___vfprintf_internal_r+0x178>
     8cc:	01400284 	movi	r5,10
     8d0:	9809883a 	mov	r4,r19
     8d4:	0000f700 	call	f70 <__mulsi3>
     8d8:	00000106 	br	8e0 <___vfprintf_internal_r+0x17c>
     8dc:	0005883a 	mov	r2,zero
     8e0:	e0a7883a 	add	r19,fp,r2
     8e4:	0000d906 	br	c4c <___vfprintf_internal_r+0x4e8>
     8e8:	00c01b04 	movi	r3,108
     8ec:	10c0d226 	beq	r2,r3,c38 <___vfprintf_internal_r+0x4d4>
     8f0:	013fffc4 	movi	r4,-1
     8f4:	99000226 	beq	r19,r4,900 <___vfprintf_internal_r+0x19c>
     8f8:	d8000b15 	stw	zero,44(sp)
     8fc:	00000106 	br	904 <___vfprintf_internal_r+0x1a0>
     900:	04c00044 	movi	r19,1
     904:	01001a44 	movi	r4,105
     908:	11001626 	beq	r2,r4,964 <___vfprintf_internal_r+0x200>
     90c:	20800916 	blt	r4,r2,934 <___vfprintf_internal_r+0x1d0>
     910:	010018c4 	movi	r4,99
     914:	11008826 	beq	r2,r4,b38 <___vfprintf_internal_r+0x3d4>
     918:	01001904 	movi	r4,100
     91c:	11001126 	beq	r2,r4,964 <___vfprintf_internal_r+0x200>
     920:	01001604 	movi	r4,88
     924:	1100c81e 	bne	r2,r4,c48 <___vfprintf_internal_r+0x4e4>
     928:	00c00044 	movi	r3,1
     92c:	d8c00e15 	stw	r3,56(sp)
     930:	00001506 	br	988 <___vfprintf_internal_r+0x224>
     934:	01001cc4 	movi	r4,115
     938:	11009826 	beq	r2,r4,b9c <___vfprintf_internal_r+0x438>
     93c:	20800416 	blt	r4,r2,950 <___vfprintf_internal_r+0x1ec>
     940:	01001bc4 	movi	r4,111
     944:	1100c01e 	bne	r2,r4,c48 <___vfprintf_internal_r+0x4e4>
     948:	05400204 	movi	r21,8
     94c:	00000f06 	br	98c <___vfprintf_internal_r+0x228>
     950:	01001d44 	movi	r4,117
     954:	11000d26 	beq	r2,r4,98c <___vfprintf_internal_r+0x228>
     958:	01001e04 	movi	r4,120
     95c:	11000a26 	beq	r2,r4,988 <___vfprintf_internal_r+0x224>
     960:	0000b906 	br	c48 <___vfprintf_internal_r+0x4e4>
     964:	d8c00a17 	ldw	r3,40(sp)
     968:	b7000104 	addi	fp,r22,4
     96c:	18000726 	beq	r3,zero,98c <___vfprintf_internal_r+0x228>
     970:	df000d15 	stw	fp,52(sp)
     974:	b5c00017 	ldw	r23,0(r22)
     978:	b800080e 	bge	r23,zero,99c <___vfprintf_internal_r+0x238>
     97c:	05efc83a 	sub	r23,zero,r23
     980:	02400044 	movi	r9,1
     984:	00000606 	br	9a0 <___vfprintf_internal_r+0x23c>
     988:	05400404 	movi	r21,16
     98c:	b0c00104 	addi	r3,r22,4
     990:	d8c00d15 	stw	r3,52(sp)
     994:	b5c00017 	ldw	r23,0(r22)
     998:	d8000a15 	stw	zero,40(sp)
     99c:	0013883a 	mov	r9,zero
     9a0:	d839883a 	mov	fp,sp
     9a4:	b8001726 	beq	r23,zero,a04 <___vfprintf_internal_r+0x2a0>
     9a8:	a80b883a 	mov	r5,r21
     9ac:	b809883a 	mov	r4,r23
     9b0:	da401015 	stw	r9,64(sp)
     9b4:	0000eb40 	call	eb4 <__udivsi3>
     9b8:	a80b883a 	mov	r5,r21
     9bc:	1009883a 	mov	r4,r2
     9c0:	102d883a 	mov	r22,r2
     9c4:	0000f700 	call	f70 <__mulsi3>
     9c8:	b885c83a 	sub	r2,r23,r2
     9cc:	00c00244 	movi	r3,9
     9d0:	da401017 	ldw	r9,64(sp)
     9d4:	18800216 	blt	r3,r2,9e0 <___vfprintf_internal_r+0x27c>
     9d8:	10800c04 	addi	r2,r2,48
     9dc:	00000506 	br	9f4 <___vfprintf_internal_r+0x290>
     9e0:	d8c00e17 	ldw	r3,56(sp)
     9e4:	18000226 	beq	r3,zero,9f0 <___vfprintf_internal_r+0x28c>
     9e8:	10800dc4 	addi	r2,r2,55
     9ec:	00000106 	br	9f4 <___vfprintf_internal_r+0x290>
     9f0:	108015c4 	addi	r2,r2,87
     9f4:	e0800005 	stb	r2,0(fp)
     9f8:	b02f883a 	mov	r23,r22
     9fc:	e7000044 	addi	fp,fp,1
     a00:	003fe806 	br	9a4 <__alt_mem_epcs_flash_controller+0xfdff79a4>
     a04:	e6efc83a 	sub	r23,fp,sp
     a08:	9dc5c83a 	sub	r2,r19,r23
     a0c:	0080090e 	bge	zero,r2,a34 <___vfprintf_internal_r+0x2d0>
     a10:	e085883a 	add	r2,fp,r2
     a14:	01400c04 	movi	r5,48
     a18:	d8c00917 	ldw	r3,36(sp)
     a1c:	e009883a 	mov	r4,fp
     a20:	e0c0032e 	bgeu	fp,r3,a30 <___vfprintf_internal_r+0x2cc>
     a24:	e7000044 	addi	fp,fp,1
     a28:	21400005 	stb	r5,0(r4)
     a2c:	e0bffa1e 	bne	fp,r2,a18 <__alt_mem_epcs_flash_controller+0xfdff7a18>
     a30:	e6efc83a 	sub	r23,fp,sp
     a34:	d8c00b17 	ldw	r3,44(sp)
     a38:	4dd1883a 	add	r8,r9,r23
     a3c:	922dc83a 	sub	r22,r18,r8
     a40:	18001626 	beq	r3,zero,a9c <___vfprintf_internal_r+0x338>
     a44:	48000a26 	beq	r9,zero,a70 <___vfprintf_internal_r+0x30c>
     a48:	00800b44 	movi	r2,45
     a4c:	d8800805 	stb	r2,32(sp)
     a50:	88800117 	ldw	r2,4(r17)
     a54:	01c00044 	movi	r7,1
     a58:	d9800804 	addi	r6,sp,32
     a5c:	880b883a 	mov	r5,r17
     a60:	a009883a 	mov	r4,r20
     a64:	103ee83a 	callr	r2
     a68:	10004a1e 	bne	r2,zero,b94 <___vfprintf_internal_r+0x430>
     a6c:	84000044 	addi	r16,r16,1
     a70:	0580070e 	bge	zero,r22,a90 <___vfprintf_internal_r+0x32c>
     a74:	b00f883a 	mov	r7,r22
     a78:	01800c04 	movi	r6,48
     a7c:	880b883a 	mov	r5,r17
     a80:	a009883a 	mov	r4,r20
     a84:	00006f80 	call	6f8 <print_repeat>
     a88:	1000421e 	bne	r2,zero,b94 <___vfprintf_internal_r+0x430>
     a8c:	85a1883a 	add	r16,r16,r22
     a90:	e02d883a 	mov	r22,fp
     a94:	bf2fc83a 	sub	r23,r23,fp
     a98:	00002006 	br	b1c <___vfprintf_internal_r+0x3b8>
     a9c:	0580090e 	bge	zero,r22,ac4 <___vfprintf_internal_r+0x360>
     aa0:	b00f883a 	mov	r7,r22
     aa4:	01800804 	movi	r6,32
     aa8:	880b883a 	mov	r5,r17
     aac:	a009883a 	mov	r4,r20
     ab0:	da401015 	stw	r9,64(sp)
     ab4:	00006f80 	call	6f8 <print_repeat>
     ab8:	da401017 	ldw	r9,64(sp)
     abc:	1000351e 	bne	r2,zero,b94 <___vfprintf_internal_r+0x430>
     ac0:	85a1883a 	add	r16,r16,r22
     ac4:	483ff226 	beq	r9,zero,a90 <__alt_mem_epcs_flash_controller+0xfdff7a90>
     ac8:	00800b44 	movi	r2,45
     acc:	d8800805 	stb	r2,32(sp)
     ad0:	88800117 	ldw	r2,4(r17)
     ad4:	01c00044 	movi	r7,1
     ad8:	d9800804 	addi	r6,sp,32
     adc:	880b883a 	mov	r5,r17
     ae0:	a009883a 	mov	r4,r20
     ae4:	103ee83a 	callr	r2
     ae8:	10002a1e 	bne	r2,zero,b94 <___vfprintf_internal_r+0x430>
     aec:	84000044 	addi	r16,r16,1
     af0:	003fe706 	br	a90 <__alt_mem_epcs_flash_controller+0xfdff7a90>
     af4:	b5bfffc4 	addi	r22,r22,-1
     af8:	b0800003 	ldbu	r2,0(r22)
     afc:	01c00044 	movi	r7,1
     b00:	d9800804 	addi	r6,sp,32
     b04:	d8800805 	stb	r2,32(sp)
     b08:	88800117 	ldw	r2,4(r17)
     b0c:	880b883a 	mov	r5,r17
     b10:	a009883a 	mov	r4,r20
     b14:	103ee83a 	callr	r2
     b18:	10001e1e 	bne	r2,zero,b94 <___vfprintf_internal_r+0x430>
     b1c:	8585c83a 	sub	r2,r16,r22
     b20:	b5c9883a 	add	r4,r22,r23
     b24:	e085883a 	add	r2,fp,r2
     b28:	013ff216 	blt	zero,r4,af4 <__alt_mem_epcs_flash_controller+0xfdff7af4>
     b2c:	1021883a 	mov	r16,r2
     b30:	dd800d17 	ldw	r22,52(sp)
     b34:	00004406 	br	c48 <___vfprintf_internal_r+0x4e4>
     b38:	00800044 	movi	r2,1
     b3c:	1480080e 	bge	r2,r18,b60 <___vfprintf_internal_r+0x3fc>
     b40:	95ffffc4 	addi	r23,r18,-1
     b44:	b80f883a 	mov	r7,r23
     b48:	01800804 	movi	r6,32
     b4c:	880b883a 	mov	r5,r17
     b50:	a009883a 	mov	r4,r20
     b54:	00006f80 	call	6f8 <print_repeat>
     b58:	10000e1e 	bne	r2,zero,b94 <___vfprintf_internal_r+0x430>
     b5c:	85e1883a 	add	r16,r16,r23
     b60:	b0800017 	ldw	r2,0(r22)
     b64:	01c00044 	movi	r7,1
     b68:	d80d883a 	mov	r6,sp
     b6c:	d8800005 	stb	r2,0(sp)
     b70:	88800117 	ldw	r2,4(r17)
     b74:	880b883a 	mov	r5,r17
     b78:	a009883a 	mov	r4,r20
     b7c:	b5c00104 	addi	r23,r22,4
     b80:	103ee83a 	callr	r2
     b84:	1000031e 	bne	r2,zero,b94 <___vfprintf_internal_r+0x430>
     b88:	84000044 	addi	r16,r16,1
     b8c:	b82d883a 	mov	r22,r23
     b90:	00002d06 	br	c48 <___vfprintf_internal_r+0x4e4>
     b94:	00bfffc4 	movi	r2,-1
     b98:	00003106 	br	c60 <___vfprintf_internal_r+0x4fc>
     b9c:	b5c00017 	ldw	r23,0(r22)
     ba0:	b7000104 	addi	fp,r22,4
     ba4:	b809883a 	mov	r4,r23
     ba8:	00006dc0 	call	6dc <strlen>
     bac:	9091c83a 	sub	r8,r18,r2
     bb0:	102d883a 	mov	r22,r2
     bb4:	0200090e 	bge	zero,r8,bdc <___vfprintf_internal_r+0x478>
     bb8:	400f883a 	mov	r7,r8
     bbc:	01800804 	movi	r6,32
     bc0:	880b883a 	mov	r5,r17
     bc4:	a009883a 	mov	r4,r20
     bc8:	da001015 	stw	r8,64(sp)
     bcc:	00006f80 	call	6f8 <print_repeat>
     bd0:	da001017 	ldw	r8,64(sp)
     bd4:	103fef1e 	bne	r2,zero,b94 <__alt_mem_epcs_flash_controller+0xfdff7b94>
     bd8:	8221883a 	add	r16,r16,r8
     bdc:	88800117 	ldw	r2,4(r17)
     be0:	b00f883a 	mov	r7,r22
     be4:	b80d883a 	mov	r6,r23
     be8:	880b883a 	mov	r5,r17
     bec:	a009883a 	mov	r4,r20
     bf0:	103ee83a 	callr	r2
     bf4:	103fe71e 	bne	r2,zero,b94 <__alt_mem_epcs_flash_controller+0xfdff7b94>
     bf8:	85a1883a 	add	r16,r16,r22
     bfc:	e02d883a 	mov	r22,fp
     c00:	00001106 	br	c48 <___vfprintf_internal_r+0x4e4>
     c04:	00c00044 	movi	r3,1
     c08:	04ffffc4 	movi	r19,-1
     c0c:	d8000e15 	stw	zero,56(sp)
     c10:	d8c00a15 	stw	r3,40(sp)
     c14:	05400284 	movi	r21,10
     c18:	9825883a 	mov	r18,r19
     c1c:	d8000c15 	stw	zero,48(sp)
     c20:	d8000b15 	stw	zero,44(sp)
     c24:	182f883a 	mov	r23,r3
     c28:	00000806 	br	c4c <___vfprintf_internal_r+0x4e8>
     c2c:	ddc00b15 	stw	r23,44(sp)
     c30:	05c00084 	movi	r23,2
     c34:	00000506 	br	c4c <___vfprintf_internal_r+0x4e8>
     c38:	00c00044 	movi	r3,1
     c3c:	d8c00c15 	stw	r3,48(sp)
     c40:	05c000c4 	movi	r23,3
     c44:	00000106 	br	c4c <___vfprintf_internal_r+0x4e8>
     c48:	002f883a 	mov	r23,zero
     c4c:	d8c00f17 	ldw	r3,60(sp)
     c50:	18c00044 	addi	r3,r3,1
     c54:	d8c00f15 	stw	r3,60(sp)
     c58:	003edc06 	br	7cc <__alt_mem_epcs_flash_controller+0xfdff77cc>
     c5c:	8005883a 	mov	r2,r16
     c60:	dfc01a17 	ldw	ra,104(sp)
     c64:	df001917 	ldw	fp,100(sp)
     c68:	ddc01817 	ldw	r23,96(sp)
     c6c:	dd801717 	ldw	r22,92(sp)
     c70:	dd401617 	ldw	r21,88(sp)
     c74:	dd001517 	ldw	r20,84(sp)
     c78:	dcc01417 	ldw	r19,80(sp)
     c7c:	dc801317 	ldw	r18,76(sp)
     c80:	dc401217 	ldw	r17,72(sp)
     c84:	dc001117 	ldw	r16,68(sp)
     c88:	dec01b04 	addi	sp,sp,108
     c8c:	f800283a 	ret

00000c90 <__vfprintf_internal>:
     c90:	00800034 	movhi	r2,0
     c94:	10968a04 	addi	r2,r2,23080
     c98:	300f883a 	mov	r7,r6
     c9c:	280d883a 	mov	r6,r5
     ca0:	200b883a 	mov	r5,r4
     ca4:	11000017 	ldw	r4,0(r2)
     ca8:	00007641 	jmpi	764 <___vfprintf_internal_r>

00000cac <__sfvwrite_small_dev>:
     cac:	2880000b 	ldhu	r2,0(r5)
     cb0:	1080020c 	andi	r2,r2,8
     cb4:	10002126 	beq	r2,zero,d3c <__sfvwrite_small_dev+0x90>
     cb8:	2880008f 	ldh	r2,2(r5)
     cbc:	defffa04 	addi	sp,sp,-24
     cc0:	dc000015 	stw	r16,0(sp)
     cc4:	dfc00515 	stw	ra,20(sp)
     cc8:	dd000415 	stw	r20,16(sp)
     ccc:	dcc00315 	stw	r19,12(sp)
     cd0:	dc800215 	stw	r18,8(sp)
     cd4:	dc400115 	stw	r17,4(sp)
     cd8:	2821883a 	mov	r16,r5
     cdc:	10001216 	blt	r2,zero,d28 <__sfvwrite_small_dev+0x7c>
     ce0:	2027883a 	mov	r19,r4
     ce4:	3025883a 	mov	r18,r6
     ce8:	3823883a 	mov	r17,r7
     cec:	05010004 	movi	r20,1024
     cf0:	04400b0e 	bge	zero,r17,d20 <__sfvwrite_small_dev+0x74>
     cf4:	880f883a 	mov	r7,r17
     cf8:	a440010e 	bge	r20,r17,d00 <__sfvwrite_small_dev+0x54>
     cfc:	01c10004 	movi	r7,1024
     d00:	8140008f 	ldh	r5,2(r16)
     d04:	900d883a 	mov	r6,r18
     d08:	9809883a 	mov	r4,r19
     d0c:	0000d640 	call	d64 <_write_r>
     d10:	0080050e 	bge	zero,r2,d28 <__sfvwrite_small_dev+0x7c>
     d14:	88a3c83a 	sub	r17,r17,r2
     d18:	90a5883a 	add	r18,r18,r2
     d1c:	003ff406 	br	cf0 <__alt_mem_epcs_flash_controller+0xfdff7cf0>
     d20:	0005883a 	mov	r2,zero
     d24:	00000706 	br	d44 <__sfvwrite_small_dev+0x98>
     d28:	8080000b 	ldhu	r2,0(r16)
     d2c:	10801014 	ori	r2,r2,64
     d30:	8080000d 	sth	r2,0(r16)
     d34:	00bfffc4 	movi	r2,-1
     d38:	00000206 	br	d44 <__sfvwrite_small_dev+0x98>
     d3c:	00bfffc4 	movi	r2,-1
     d40:	f800283a 	ret
     d44:	dfc00517 	ldw	ra,20(sp)
     d48:	dd000417 	ldw	r20,16(sp)
     d4c:	dcc00317 	ldw	r19,12(sp)
     d50:	dc800217 	ldw	r18,8(sp)
     d54:	dc400117 	ldw	r17,4(sp)
     d58:	dc000017 	ldw	r16,0(sp)
     d5c:	dec00604 	addi	sp,sp,24
     d60:	f800283a 	ret

00000d64 <_write_r>:
     d64:	defffd04 	addi	sp,sp,-12
     d68:	dc000015 	stw	r16,0(sp)
     d6c:	04000034 	movhi	r16,0
     d70:	dc400115 	stw	r17,4(sp)
     d74:	841b9404 	addi	r16,r16,28240
     d78:	2023883a 	mov	r17,r4
     d7c:	2809883a 	mov	r4,r5
     d80:	300b883a 	mov	r5,r6
     d84:	380d883a 	mov	r6,r7
     d88:	dfc00215 	stw	ra,8(sp)
     d8c:	80000015 	stw	zero,0(r16)
     d90:	00011ec0 	call	11ec <write>
     d94:	00ffffc4 	movi	r3,-1
     d98:	10c0031e 	bne	r2,r3,da8 <_write_r+0x44>
     d9c:	80c00017 	ldw	r3,0(r16)
     da0:	18000126 	beq	r3,zero,da8 <_write_r+0x44>
     da4:	88c00015 	stw	r3,0(r17)
     da8:	dfc00217 	ldw	ra,8(sp)
     dac:	dc400117 	ldw	r17,4(sp)
     db0:	dc000017 	ldw	r16,0(sp)
     db4:	dec00304 	addi	sp,sp,12
     db8:	f800283a 	ret

00000dbc <__divsi3>:
     dbc:	20001b16 	blt	r4,zero,e2c <__divsi3+0x70>
     dc0:	000f883a 	mov	r7,zero
     dc4:	28001616 	blt	r5,zero,e20 <__divsi3+0x64>
     dc8:	200d883a 	mov	r6,r4
     dcc:	29001a2e 	bgeu	r5,r4,e38 <__divsi3+0x7c>
     dd0:	00800804 	movi	r2,32
     dd4:	00c00044 	movi	r3,1
     dd8:	00000106 	br	de0 <__divsi3+0x24>
     ddc:	10000d26 	beq	r2,zero,e14 <__divsi3+0x58>
     de0:	294b883a 	add	r5,r5,r5
     de4:	10bfffc4 	addi	r2,r2,-1
     de8:	18c7883a 	add	r3,r3,r3
     dec:	293ffb36 	bltu	r5,r4,ddc <__alt_mem_epcs_flash_controller+0xfdff7ddc>
     df0:	0005883a 	mov	r2,zero
     df4:	18000726 	beq	r3,zero,e14 <__divsi3+0x58>
     df8:	0005883a 	mov	r2,zero
     dfc:	31400236 	bltu	r6,r5,e08 <__divsi3+0x4c>
     e00:	314dc83a 	sub	r6,r6,r5
     e04:	10c4b03a 	or	r2,r2,r3
     e08:	1806d07a 	srli	r3,r3,1
     e0c:	280ad07a 	srli	r5,r5,1
     e10:	183ffa1e 	bne	r3,zero,dfc <__alt_mem_epcs_flash_controller+0xfdff7dfc>
     e14:	38000126 	beq	r7,zero,e1c <__divsi3+0x60>
     e18:	0085c83a 	sub	r2,zero,r2
     e1c:	f800283a 	ret
     e20:	014bc83a 	sub	r5,zero,r5
     e24:	39c0005c 	xori	r7,r7,1
     e28:	003fe706 	br	dc8 <__alt_mem_epcs_flash_controller+0xfdff7dc8>
     e2c:	0109c83a 	sub	r4,zero,r4
     e30:	01c00044 	movi	r7,1
     e34:	003fe306 	br	dc4 <__alt_mem_epcs_flash_controller+0xfdff7dc4>
     e38:	00c00044 	movi	r3,1
     e3c:	003fee06 	br	df8 <__alt_mem_epcs_flash_controller+0xfdff7df8>

00000e40 <__modsi3>:
     e40:	20001716 	blt	r4,zero,ea0 <__modsi3+0x60>
     e44:	000f883a 	mov	r7,zero
     e48:	2005883a 	mov	r2,r4
     e4c:	28001216 	blt	r5,zero,e98 <__modsi3+0x58>
     e50:	2900162e 	bgeu	r5,r4,eac <__modsi3+0x6c>
     e54:	01800804 	movi	r6,32
     e58:	00c00044 	movi	r3,1
     e5c:	00000106 	br	e64 <__modsi3+0x24>
     e60:	30000a26 	beq	r6,zero,e8c <__modsi3+0x4c>
     e64:	294b883a 	add	r5,r5,r5
     e68:	31bfffc4 	addi	r6,r6,-1
     e6c:	18c7883a 	add	r3,r3,r3
     e70:	293ffb36 	bltu	r5,r4,e60 <__alt_mem_epcs_flash_controller+0xfdff7e60>
     e74:	18000526 	beq	r3,zero,e8c <__modsi3+0x4c>
     e78:	1806d07a 	srli	r3,r3,1
     e7c:	11400136 	bltu	r2,r5,e84 <__modsi3+0x44>
     e80:	1145c83a 	sub	r2,r2,r5
     e84:	280ad07a 	srli	r5,r5,1
     e88:	183ffb1e 	bne	r3,zero,e78 <__alt_mem_epcs_flash_controller+0xfdff7e78>
     e8c:	38000126 	beq	r7,zero,e94 <__modsi3+0x54>
     e90:	0085c83a 	sub	r2,zero,r2
     e94:	f800283a 	ret
     e98:	014bc83a 	sub	r5,zero,r5
     e9c:	003fec06 	br	e50 <__alt_mem_epcs_flash_controller+0xfdff7e50>
     ea0:	0109c83a 	sub	r4,zero,r4
     ea4:	01c00044 	movi	r7,1
     ea8:	003fe706 	br	e48 <__alt_mem_epcs_flash_controller+0xfdff7e48>
     eac:	00c00044 	movi	r3,1
     eb0:	003ff106 	br	e78 <__alt_mem_epcs_flash_controller+0xfdff7e78>

00000eb4 <__udivsi3>:
     eb4:	200d883a 	mov	r6,r4
     eb8:	2900152e 	bgeu	r5,r4,f10 <__udivsi3+0x5c>
     ebc:	28001416 	blt	r5,zero,f10 <__udivsi3+0x5c>
     ec0:	00800804 	movi	r2,32
     ec4:	00c00044 	movi	r3,1
     ec8:	00000206 	br	ed4 <__udivsi3+0x20>
     ecc:	10000e26 	beq	r2,zero,f08 <__udivsi3+0x54>
     ed0:	28000516 	blt	r5,zero,ee8 <__udivsi3+0x34>
     ed4:	294b883a 	add	r5,r5,r5
     ed8:	10bfffc4 	addi	r2,r2,-1
     edc:	18c7883a 	add	r3,r3,r3
     ee0:	293ffa36 	bltu	r5,r4,ecc <__alt_mem_epcs_flash_controller+0xfdff7ecc>
     ee4:	18000826 	beq	r3,zero,f08 <__udivsi3+0x54>
     ee8:	0005883a 	mov	r2,zero
     eec:	31400236 	bltu	r6,r5,ef8 <__udivsi3+0x44>
     ef0:	314dc83a 	sub	r6,r6,r5
     ef4:	10c4b03a 	or	r2,r2,r3
     ef8:	1806d07a 	srli	r3,r3,1
     efc:	280ad07a 	srli	r5,r5,1
     f00:	183ffa1e 	bne	r3,zero,eec <__alt_mem_epcs_flash_controller+0xfdff7eec>
     f04:	f800283a 	ret
     f08:	0005883a 	mov	r2,zero
     f0c:	f800283a 	ret
     f10:	00c00044 	movi	r3,1
     f14:	003ff406 	br	ee8 <__alt_mem_epcs_flash_controller+0xfdff7ee8>

00000f18 <__umodsi3>:
     f18:	2005883a 	mov	r2,r4
     f1c:	2900122e 	bgeu	r5,r4,f68 <__umodsi3+0x50>
     f20:	28001116 	blt	r5,zero,f68 <__umodsi3+0x50>
     f24:	01800804 	movi	r6,32
     f28:	00c00044 	movi	r3,1
     f2c:	00000206 	br	f38 <__umodsi3+0x20>
     f30:	30000c26 	beq	r6,zero,f64 <__umodsi3+0x4c>
     f34:	28000516 	blt	r5,zero,f4c <__umodsi3+0x34>
     f38:	294b883a 	add	r5,r5,r5
     f3c:	31bfffc4 	addi	r6,r6,-1
     f40:	18c7883a 	add	r3,r3,r3
     f44:	293ffa36 	bltu	r5,r4,f30 <__alt_mem_epcs_flash_controller+0xfdff7f30>
     f48:	18000626 	beq	r3,zero,f64 <__umodsi3+0x4c>
     f4c:	1806d07a 	srli	r3,r3,1
     f50:	11400136 	bltu	r2,r5,f58 <__umodsi3+0x40>
     f54:	1145c83a 	sub	r2,r2,r5
     f58:	280ad07a 	srli	r5,r5,1
     f5c:	183ffb1e 	bne	r3,zero,f4c <__alt_mem_epcs_flash_controller+0xfdff7f4c>
     f60:	f800283a 	ret
     f64:	f800283a 	ret
     f68:	00c00044 	movi	r3,1
     f6c:	003ff706 	br	f4c <__alt_mem_epcs_flash_controller+0xfdff7f4c>

00000f70 <__mulsi3>:
     f70:	0005883a 	mov	r2,zero
     f74:	20000726 	beq	r4,zero,f94 <__mulsi3+0x24>
     f78:	20c0004c 	andi	r3,r4,1
     f7c:	2008d07a 	srli	r4,r4,1
     f80:	18000126 	beq	r3,zero,f88 <__mulsi3+0x18>
     f84:	1145883a 	add	r2,r2,r5
     f88:	294b883a 	add	r5,r5,r5
     f8c:	203ffa1e 	bne	r4,zero,f78 <__alt_mem_epcs_flash_controller+0xfdff7f78>
     f90:	f800283a 	ret
     f94:	f800283a 	ret

00000f98 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     f98:	defffc04 	addi	sp,sp,-16
     f9c:	df000315 	stw	fp,12(sp)
     fa0:	df000304 	addi	fp,sp,12
     fa4:	e13ffd15 	stw	r4,-12(fp)
     fa8:	e17ffe15 	stw	r5,-8(fp)
     fac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     fb0:	e0fffe17 	ldw	r3,-8(fp)
     fb4:	e0bffd17 	ldw	r2,-12(fp)
     fb8:	18800c26 	beq	r3,r2,fec <alt_load_section+0x54>
  {
    while( to != end )
     fbc:	00000806 	br	fe0 <alt_load_section+0x48>
    {
      *to++ = *from++;
     fc0:	e0bffe17 	ldw	r2,-8(fp)
     fc4:	10c00104 	addi	r3,r2,4
     fc8:	e0fffe15 	stw	r3,-8(fp)
     fcc:	e0fffd17 	ldw	r3,-12(fp)
     fd0:	19000104 	addi	r4,r3,4
     fd4:	e13ffd15 	stw	r4,-12(fp)
     fd8:	18c00017 	ldw	r3,0(r3)
     fdc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     fe0:	e0fffe17 	ldw	r3,-8(fp)
     fe4:	e0bfff17 	ldw	r2,-4(fp)
     fe8:	18bff51e 	bne	r3,r2,fc0 <__alt_mem_epcs_flash_controller+0xfdff7fc0>
    {
      *to++ = *from++;
    }
  }
}
     fec:	0001883a 	nop
     ff0:	e037883a 	mov	sp,fp
     ff4:	df000017 	ldw	fp,0(sp)
     ff8:	dec00104 	addi	sp,sp,4
     ffc:	f800283a 	ret

00001000 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1000:	defffe04 	addi	sp,sp,-8
    1004:	dfc00115 	stw	ra,4(sp)
    1008:	df000015 	stw	fp,0(sp)
    100c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1010:	01800034 	movhi	r6,0
    1014:	31969704 	addi	r6,r6,23132
    1018:	01400034 	movhi	r5,0
    101c:	29519c04 	addi	r5,r5,18032
    1020:	01000034 	movhi	r4,0
    1024:	21169704 	addi	r4,r4,23132
    1028:	0000f980 	call	f98 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    102c:	01800034 	movhi	r6,0
    1030:	31808c04 	addi	r6,r6,560
    1034:	01400034 	movhi	r5,0
    1038:	29400804 	addi	r5,r5,32
    103c:	01000034 	movhi	r4,0
    1040:	21000804 	addi	r4,r4,32
    1044:	0000f980 	call	f98 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1048:	01800034 	movhi	r6,0
    104c:	31919c04 	addi	r6,r6,18032
    1050:	01400034 	movhi	r5,0
    1054:	29517104 	addi	r5,r5,17860
    1058:	01000034 	movhi	r4,0
    105c:	21117104 	addi	r4,r4,17860
    1060:	0000f980 	call	f98 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1064:	00031900 	call	3190 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1068:	00034380 	call	3438 <alt_icache_flush_all>
}
    106c:	0001883a 	nop
    1070:	e037883a 	mov	sp,fp
    1074:	dfc00117 	ldw	ra,4(sp)
    1078:	df000017 	ldw	fp,0(sp)
    107c:	dec00204 	addi	sp,sp,8
    1080:	f800283a 	ret

00001084 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1084:	defffd04 	addi	sp,sp,-12
    1088:	dfc00215 	stw	ra,8(sp)
    108c:	df000115 	stw	fp,4(sp)
    1090:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1094:	0009883a 	mov	r4,zero
    1098:	00013200 	call	1320 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    109c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    10a0:	00013580 	call	1358 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    10a4:	01800034 	movhi	r6,0
    10a8:	31918a04 	addi	r6,r6,17960
    10ac:	01400034 	movhi	r5,0
    10b0:	29518a04 	addi	r5,r5,17960
    10b4:	01000034 	movhi	r4,0
    10b8:	21118a04 	addi	r4,r4,17960
    10bc:	00037dc0 	call	37dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    10c0:	00032bc0 	call	32bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    10c4:	01000034 	movhi	r4,0
    10c8:	210cc704 	addi	r4,r4,13084
    10cc:	000421c0 	call	421c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    10d0:	d0a50c17 	ldw	r2,-27600(gp)
    10d4:	d0e50d17 	ldw	r3,-27596(gp)
    10d8:	d1250e17 	ldw	r4,-27592(gp)
    10dc:	200d883a 	mov	r6,r4
    10e0:	180b883a 	mov	r5,r3
    10e4:	1009883a 	mov	r4,r2
    10e8:	000026c0 	call	26c <main>
    10ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    10f0:	01000044 	movi	r4,1
    10f4:	00030b80 	call	30b8 <close>
  exit (result);
    10f8:	e13fff17 	ldw	r4,-4(fp)
    10fc:	00042300 	call	4230 <exit>

00001100 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    1100:	defff904 	addi	sp,sp,-28
    1104:	df000615 	stw	fp,24(sp)
    1108:	df000604 	addi	fp,sp,24
    110c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1110:	0005303a 	rdctl	r2,status
    1114:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1118:	e0fffe17 	ldw	r3,-8(fp)
    111c:	00bfff84 	movi	r2,-2
    1120:	1884703a 	and	r2,r3,r2
    1124:	1001703a 	wrctl	status,r2
  
  return context;
    1128:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    112c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    1130:	d0a00217 	ldw	r2,-32760(gp)
    1134:	10c000c4 	addi	r3,r2,3
    1138:	00bfff04 	movi	r2,-4
    113c:	1884703a 	and	r2,r3,r2
    1140:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    1144:	d0e00217 	ldw	r3,-32760(gp)
    1148:	e0bfff17 	ldw	r2,-4(fp)
    114c:	1887883a 	add	r3,r3,r2
    1150:	00808034 	movhi	r2,512
    1154:	10800004 	addi	r2,r2,0
    1158:	10c0062e 	bgeu	r2,r3,1174 <sbrk+0x74>
    115c:	e0bffb17 	ldw	r2,-20(fp)
    1160:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1164:	e0bffa17 	ldw	r2,-24(fp)
    1168:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    116c:	00bfffc4 	movi	r2,-1
    1170:	00000b06 	br	11a0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    1174:	d0a00217 	ldw	r2,-32760(gp)
    1178:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    117c:	d0e00217 	ldw	r3,-32760(gp)
    1180:	e0bfff17 	ldw	r2,-4(fp)
    1184:	1885883a 	add	r2,r3,r2
    1188:	d0a00215 	stw	r2,-32760(gp)
    118c:	e0bffb17 	ldw	r2,-20(fp)
    1190:	e0bffc15 	stw	r2,-16(fp)
    1194:	e0bffc17 	ldw	r2,-16(fp)
    1198:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    119c:	e0bffd17 	ldw	r2,-12(fp)
} 
    11a0:	e037883a 	mov	sp,fp
    11a4:	df000017 	ldw	fp,0(sp)
    11a8:	dec00104 	addi	sp,sp,4
    11ac:	f800283a 	ret

000011b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    11b0:	defffe04 	addi	sp,sp,-8
    11b4:	dfc00115 	stw	ra,4(sp)
    11b8:	df000015 	stw	fp,0(sp)
    11bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    11c0:	d0a00817 	ldw	r2,-32736(gp)
    11c4:	10000326 	beq	r2,zero,11d4 <alt_get_errno+0x24>
    11c8:	d0a00817 	ldw	r2,-32736(gp)
    11cc:	103ee83a 	callr	r2
    11d0:	00000106 	br	11d8 <alt_get_errno+0x28>
    11d4:	d0a50b04 	addi	r2,gp,-27604
}
    11d8:	e037883a 	mov	sp,fp
    11dc:	dfc00117 	ldw	ra,4(sp)
    11e0:	df000017 	ldw	fp,0(sp)
    11e4:	dec00204 	addi	sp,sp,8
    11e8:	f800283a 	ret

000011ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    11ec:	defff904 	addi	sp,sp,-28
    11f0:	dfc00615 	stw	ra,24(sp)
    11f4:	df000515 	stw	fp,20(sp)
    11f8:	df000504 	addi	fp,sp,20
    11fc:	e13ffd15 	stw	r4,-12(fp)
    1200:	e17ffe15 	stw	r5,-8(fp)
    1204:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    1208:	e0bffd17 	ldw	r2,-12(fp)
    120c:	10000816 	blt	r2,zero,1230 <write+0x44>
    1210:	01400304 	movi	r5,12
    1214:	e13ffd17 	ldw	r4,-12(fp)
    1218:	0000f700 	call	f70 <__mulsi3>
    121c:	1007883a 	mov	r3,r2
    1220:	00800034 	movhi	r2,0
    1224:	10962904 	addi	r2,r2,22692
    1228:	1885883a 	add	r2,r3,r2
    122c:	00000106 	br	1234 <write+0x48>
    1230:	0005883a 	mov	r2,zero
    1234:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    1238:	e0bffb17 	ldw	r2,-20(fp)
    123c:	10002126 	beq	r2,zero,12c4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    1240:	e0bffb17 	ldw	r2,-20(fp)
    1244:	10800217 	ldw	r2,8(r2)
    1248:	108000cc 	andi	r2,r2,3
    124c:	10001826 	beq	r2,zero,12b0 <write+0xc4>
    1250:	e0bffb17 	ldw	r2,-20(fp)
    1254:	10800017 	ldw	r2,0(r2)
    1258:	10800617 	ldw	r2,24(r2)
    125c:	10001426 	beq	r2,zero,12b0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    1260:	e0bffb17 	ldw	r2,-20(fp)
    1264:	10800017 	ldw	r2,0(r2)
    1268:	10800617 	ldw	r2,24(r2)
    126c:	e0ffff17 	ldw	r3,-4(fp)
    1270:	180d883a 	mov	r6,r3
    1274:	e17ffe17 	ldw	r5,-8(fp)
    1278:	e13ffb17 	ldw	r4,-20(fp)
    127c:	103ee83a 	callr	r2
    1280:	e0bffc15 	stw	r2,-16(fp)
    1284:	e0bffc17 	ldw	r2,-16(fp)
    1288:	1000070e 	bge	r2,zero,12a8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    128c:	00011b00 	call	11b0 <alt_get_errno>
    1290:	1007883a 	mov	r3,r2
    1294:	e0bffc17 	ldw	r2,-16(fp)
    1298:	0085c83a 	sub	r2,zero,r2
    129c:	18800015 	stw	r2,0(r3)
        return -1;
    12a0:	00bfffc4 	movi	r2,-1
    12a4:	00000c06 	br	12d8 <write+0xec>
      }
      return rval;
    12a8:	e0bffc17 	ldw	r2,-16(fp)
    12ac:	00000a06 	br	12d8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    12b0:	00011b00 	call	11b0 <alt_get_errno>
    12b4:	1007883a 	mov	r3,r2
    12b8:	00800344 	movi	r2,13
    12bc:	18800015 	stw	r2,0(r3)
    12c0:	00000406 	br	12d4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    12c4:	00011b00 	call	11b0 <alt_get_errno>
    12c8:	1007883a 	mov	r3,r2
    12cc:	00801444 	movi	r2,81
    12d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    12d4:	00bfffc4 	movi	r2,-1
}
    12d8:	e037883a 	mov	sp,fp
    12dc:	dfc00117 	ldw	ra,4(sp)
    12e0:	df000017 	ldw	fp,0(sp)
    12e4:	dec00204 	addi	sp,sp,8
    12e8:	f800283a 	ret

000012ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    12ec:	defffd04 	addi	sp,sp,-12
    12f0:	dfc00215 	stw	ra,8(sp)
    12f4:	df000115 	stw	fp,4(sp)
    12f8:	df000104 	addi	fp,sp,4
    12fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1300:	d1600504 	addi	r5,gp,-32748
    1304:	e13fff17 	ldw	r4,-4(fp)
    1308:	00032180 	call	3218 <alt_dev_llist_insert>
}
    130c:	e037883a 	mov	sp,fp
    1310:	dfc00117 	ldw	ra,4(sp)
    1314:	df000017 	ldw	fp,0(sp)
    1318:	dec00204 	addi	sp,sp,8
    131c:	f800283a 	ret

00001320 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1320:	defffd04 	addi	sp,sp,-12
    1324:	dfc00215 	stw	ra,8(sp)
    1328:	df000115 	stw	fp,4(sp)
    132c:	df000104 	addi	fp,sp,4
    1330:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    1334:	0003d040 	call	3d04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1338:	00800044 	movi	r2,1
    133c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1340:	0001883a 	nop
    1344:	e037883a 	mov	sp,fp
    1348:	dfc00117 	ldw	ra,4(sp)
    134c:	df000017 	ldw	fp,0(sp)
    1350:	dec00204 	addi	sp,sp,8
    1354:	f800283a 	ret

00001358 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1358:	defffe04 	addi	sp,sp,-8
    135c:	dfc00115 	stw	ra,4(sp)
    1360:	df000015 	stw	fp,0(sp)
    1364:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
    1368:	01000034 	movhi	r4,0
    136c:	2111d404 	addi	r4,r4,18256
    1370:	00013e40 	call	13e4 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    1374:	01800044 	movi	r6,1
    1378:	000b883a 	mov	r5,zero
    137c:	01000034 	movhi	r4,0
    1380:	21121104 	addi	r4,r4,18500
    1384:	00020100 	call	2010 <altera_avalon_jtag_uart_init>
    1388:	01000034 	movhi	r4,0
    138c:	21120704 	addi	r4,r4,18460
    1390:	00012ec0 	call	12ec <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    1394:	0001883a 	nop
}
    1398:	0001883a 	nop
    139c:	e037883a 	mov	sp,fp
    13a0:	dfc00117 	ldw	ra,4(sp)
    13a4:	df000017 	ldw	fp,0(sp)
    13a8:	dec00204 	addi	sp,sp,8
    13ac:	f800283a 	ret

000013b0 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    13b0:	defffd04 	addi	sp,sp,-12
    13b4:	dfc00215 	stw	ra,8(sp)
    13b8:	df000115 	stw	fp,4(sp)
    13bc:	df000104 	addi	fp,sp,4
    13c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    13c4:	d1600904 	addi	r5,gp,-32732
    13c8:	e13fff17 	ldw	r4,-4(fp)
    13cc:	00032180 	call	3218 <alt_dev_llist_insert>
}
    13d0:	e037883a 	mov	sp,fp
    13d4:	dfc00117 	ldw	ra,4(sp)
    13d8:	df000017 	ldw	fp,0(sp)
    13dc:	dec00204 	addi	sp,sp,8
    13e0:	f800283a 	ret

000013e4 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    13e4:	defffc04 	addi	sp,sp,-16
    13e8:	dfc00315 	stw	ra,12(sp)
    13ec:	df000215 	stw	fp,8(sp)
    13f0:	df000204 	addi	fp,sp,8
    13f4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    13f8:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    13fc:	e13fff17 	ldw	r4,-4(fp)
    1400:	00014380 	call	1438 <alt_epcs_flash_query>
    1404:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    1408:	e0bffe17 	ldw	r2,-8(fp)
    140c:	1000041e 	bne	r2,zero,1420 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    1410:	e0bfff17 	ldw	r2,-4(fp)
    1414:	1009883a 	mov	r4,r2
    1418:	00013b00 	call	13b0 <alt_flash_device_register>
    141c:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    1420:	e0bffe17 	ldw	r2,-8(fp)
}
    1424:	e037883a 	mov	sp,fp
    1428:	dfc00117 	ldw	ra,4(sp)
    142c:	df000017 	ldw	fp,0(sp)
    1430:	dec00204 	addi	sp,sp,8
    1434:	f800283a 	ret

00001438 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    1438:	defffc04 	addi	sp,sp,-16
    143c:	dfc00315 	stw	ra,12(sp)
    1440:	df000215 	stw	fp,8(sp)
    1444:	df000204 	addi	fp,sp,8
    1448:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    144c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    1450:	e0bfff17 	ldw	r2,-4(fp)
    1454:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
    1458:	e0bfff17 	ldw	r2,-4(fp)
    145c:	10802e17 	ldw	r2,184(r2)
    1460:	1009883a 	mov	r4,r2
    1464:	0002db00 	call	2db0 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
    1468:	10c03fcc 	andi	r3,r2,255
    146c:	e0bfff17 	ldw	r2,-4(fp)
    1470:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    1474:	e0bfff17 	ldw	r2,-4(fp)
    1478:	10803017 	ldw	r2,192(r2)
    147c:	10800598 	cmpnei	r2,r2,22
    1480:	10000a1e 	bne	r2,zero,14ac <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    1484:	e0bfff17 	ldw	r2,-4(fp)
    1488:	00c02034 	movhi	r3,128
    148c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
    1490:	e0bfff17 	ldw	r2,-4(fp)
    1494:	00c02004 	movi	r3,128
    1498:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    149c:	e0bfff17 	ldw	r2,-4(fp)
    14a0:	00c00074 	movhi	r3,1
    14a4:	10c01015 	stw	r3,64(r2)
    14a8:	0000ce06 	br	17e4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    14ac:	e0bfff17 	ldw	r2,-4(fp)
    14b0:	10803017 	ldw	r2,192(r2)
    14b4:	10800518 	cmpnei	r2,r2,20
    14b8:	10000a1e 	bne	r2,zero,14e4 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    14bc:	e0bfff17 	ldw	r2,-4(fp)
    14c0:	00c00834 	movhi	r3,32
    14c4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
    14c8:	e0bfff17 	ldw	r2,-4(fp)
    14cc:	00c00804 	movi	r3,32
    14d0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    14d4:	e0bfff17 	ldw	r2,-4(fp)
    14d8:	00c00074 	movhi	r3,1
    14dc:	10c01015 	stw	r3,64(r2)
    14e0:	0000c006 	br	17e4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    14e4:	e0bfff17 	ldw	r2,-4(fp)
    14e8:	10803017 	ldw	r2,192(r2)
    14ec:	108004d8 	cmpnei	r2,r2,19
    14f0:	10000a1e 	bne	r2,zero,151c <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    14f4:	e0bfff17 	ldw	r2,-4(fp)
    14f8:	00c00434 	movhi	r3,16
    14fc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
    1500:	e0bfff17 	ldw	r2,-4(fp)
    1504:	00c00404 	movi	r3,16
    1508:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    150c:	e0bfff17 	ldw	r2,-4(fp)
    1510:	00c00074 	movhi	r3,1
    1514:	10c01015 	stw	r3,64(r2)
    1518:	0000b206 	br	17e4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    151c:	e0bfff17 	ldw	r2,-4(fp)
    1520:	10803017 	ldw	r2,192(r2)
    1524:	10800498 	cmpnei	r2,r2,18
    1528:	10000a1e 	bne	r2,zero,1554 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    152c:	e0bfff17 	ldw	r2,-4(fp)
    1530:	00c00234 	movhi	r3,8
    1534:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
    1538:	e0bfff17 	ldw	r2,-4(fp)
    153c:	00c00204 	movi	r3,8
    1540:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    1544:	e0bfff17 	ldw	r2,-4(fp)
    1548:	00c00074 	movhi	r3,1
    154c:	10c01015 	stw	r3,64(r2)
    1550:	0000a406 	br	17e4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    1554:	e0bfff17 	ldw	r2,-4(fp)
    1558:	10803017 	ldw	r2,192(r2)
    155c:	10800418 	cmpnei	r2,r2,16
    1560:	10000a1e 	bne	r2,zero,158c <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    1564:	e0bfff17 	ldw	r2,-4(fp)
    1568:	00c000b4 	movhi	r3,2
    156c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
    1570:	e0bfff17 	ldw	r2,-4(fp)
    1574:	00c00104 	movi	r3,4
    1578:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
    157c:	e0bfff17 	ldw	r2,-4(fp)
    1580:	00e00014 	movui	r3,32768
    1584:	10c01015 	stw	r3,64(r2)
    1588:	00009606 	br	17e4 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    158c:	e0bfff17 	ldw	r2,-4(fp)
    1590:	10802e17 	ldw	r2,184(r2)
    1594:	1009883a 	mov	r4,r2
    1598:	0002e180 	call	2e18 <epcs_read_device_id>
    159c:	1007883a 	mov	r3,r2
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
    15a8:	e0bfff17 	ldw	r2,-4(fp)
    15ac:	10c03017 	ldw	r3,192(r2)
    15b0:	00804034 	movhi	r2,256
    15b4:	10bfffc4 	addi	r2,r2,-1
    15b8:	1886703a 	and	r3,r3,r2
    15bc:	00800874 	movhi	r2,33
    15c0:	10ae8544 	addi	r2,r2,-17899
    15c4:	18800a1e 	bne	r3,r2,15f0 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    15c8:	e0bfff17 	ldw	r2,-4(fp)
    15cc:	00c00834 	movhi	r3,32
    15d0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
    15d4:	e0bfff17 	ldw	r2,-4(fp)
    15d8:	00c00804 	movi	r3,32
    15dc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    15e0:	e0bfff17 	ldw	r2,-4(fp)
    15e4:	00c00074 	movhi	r3,1
    15e8:	10c01015 	stw	r3,64(r2)
    15ec:	00007d06 	br	17e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
    15f0:	e0bfff17 	ldw	r2,-4(fp)
    15f4:	10c03017 	ldw	r3,192(r2)
    15f8:	00804034 	movhi	r2,256
    15fc:	10bfffc4 	addi	r2,r2,-1
    1600:	1886703a 	and	r3,r3,r2
    1604:	00800874 	movhi	r2,33
    1608:	10ae8584 	addi	r2,r2,-17898
    160c:	18800a1e 	bne	r3,r2,1638 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
    1610:	e0bfff17 	ldw	r2,-4(fp)
    1614:	00c01034 	movhi	r3,64
    1618:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
    161c:	e0bfff17 	ldw	r2,-4(fp)
    1620:	00c01004 	movi	r3,64
    1624:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    1628:	e0bfff17 	ldw	r2,-4(fp)
    162c:	00c00074 	movhi	r3,1
    1630:	10c01015 	stw	r3,64(r2)
    1634:	00006b06 	br	17e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
    1638:	e0bfff17 	ldw	r2,-4(fp)
    163c:	10c03017 	ldw	r3,192(r2)
    1640:	00804034 	movhi	r2,256
    1644:	10bfffc4 	addi	r2,r2,-1
    1648:	1886703a 	and	r3,r3,r2
    164c:	00800874 	movhi	r2,33
    1650:	10ae85c4 	addi	r2,r2,-17897
    1654:	18800a1e 	bne	r3,r2,1680 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    1658:	e0bfff17 	ldw	r2,-4(fp)
    165c:	00c02034 	movhi	r3,128
    1660:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
    1664:	e0bfff17 	ldw	r2,-4(fp)
    1668:	00c02004 	movi	r3,128
    166c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    1670:	e0bfff17 	ldw	r2,-4(fp)
    1674:	00c00074 	movhi	r3,1
    1678:	10c01015 	stw	r3,64(r2)
    167c:	00005906 	br	17e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    1680:	e0bfff17 	ldw	r2,-4(fp)
    1684:	10c03017 	ldw	r3,192(r2)
    1688:	00804034 	movhi	r2,256
    168c:	10bfffc4 	addi	r2,r2,-1
    1690:	1886703a 	and	r3,r3,r2
    1694:	00800874 	movhi	r2,33
    1698:	10ae8604 	addi	r2,r2,-17896
    169c:	18800a1e 	bne	r3,r2,16c8 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    16a0:	e0bfff17 	ldw	r2,-4(fp)
    16a4:	00c04034 	movhi	r3,256
    16a8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    16ac:	e0bfff17 	ldw	r2,-4(fp)
    16b0:	00c04004 	movi	r3,256
    16b4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    16b8:	e0bfff17 	ldw	r2,-4(fp)
    16bc:	00c00074 	movhi	r3,1
    16c0:	10c01015 	stw	r3,64(r2)
    16c4:	00004706 	br	17e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    16c8:	e0bfff17 	ldw	r2,-4(fp)
    16cc:	10803017 	ldw	r2,192(r2)
    16d0:	10803fcc 	andi	r2,r2,255
    16d4:	10800618 	cmpnei	r2,r2,24
    16d8:	10000a1e 	bne	r2,zero,1704 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    16dc:	e0bfff17 	ldw	r2,-4(fp)
    16e0:	00c04034 	movhi	r3,256
    16e4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
    16e8:	e0bfff17 	ldw	r2,-4(fp)
    16ec:	00c01004 	movi	r3,64
    16f0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
    16f4:	e0bfff17 	ldw	r2,-4(fp)
    16f8:	00c00134 	movhi	r3,4
    16fc:	10c01015 	stw	r3,64(r2)
    1700:	00003806 	br	17e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    1704:	e0bfff17 	ldw	r2,-4(fp)
    1708:	10803017 	ldw	r2,192(r2)
    170c:	10803fcc 	andi	r2,r2,255
    1710:	10800658 	cmpnei	r2,r2,25
    1714:	10000d1e 	bne	r2,zero,174c <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    1718:	e0bfff17 	ldw	r2,-4(fp)
    171c:	00c08034 	movhi	r3,512
    1720:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    1724:	e0bfff17 	ldw	r2,-4(fp)
    1728:	00c08004 	movi	r3,512
    172c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    1730:	e0bfff17 	ldw	r2,-4(fp)
    1734:	00c00074 	movhi	r3,1
    1738:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    173c:	e0bfff17 	ldw	r2,-4(fp)
    1740:	00c00044 	movi	r3,1
    1744:	10c03215 	stw	r3,200(r2)
    1748:	00002606 	br	17e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
    174c:	e0bfff17 	ldw	r2,-4(fp)
    1750:	10803017 	ldw	r2,192(r2)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	10800818 	cmpnei	r2,r2,32
    175c:	10000d1e 	bne	r2,zero,1794 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
    1760:	e0bfff17 	ldw	r2,-4(fp)
    1764:	00c10034 	movhi	r3,1024
    1768:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
    176c:	e0bfff17 	ldw	r2,-4(fp)
    1770:	00c10004 	movi	r3,1024
    1774:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    1778:	e0bfff17 	ldw	r2,-4(fp)
    177c:	00c00074 	movhi	r3,1
    1780:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    1784:	e0bfff17 	ldw	r2,-4(fp)
    1788:	00c00044 	movi	r3,1
    178c:	10c03215 	stw	r3,200(r2)
    1790:	00001406 	br	17e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
    1794:	e0bfff17 	ldw	r2,-4(fp)
    1798:	10803017 	ldw	r2,192(r2)
    179c:	10803fcc 	andi	r2,r2,255
    17a0:	10800858 	cmpnei	r2,r2,33
    17a4:	10000d1e 	bne	r2,zero,17dc <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
    17a8:	e0bfff17 	ldw	r2,-4(fp)
    17ac:	00c20034 	movhi	r3,2048
    17b0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
    17b4:	e0bfff17 	ldw	r2,-4(fp)
    17b8:	00c20004 	movi	r3,2048
    17bc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    17c0:	e0bfff17 	ldw	r2,-4(fp)
    17c4:	00c00074 	movhi	r3,1
    17c8:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    17cc:	e0bfff17 	ldw	r2,-4(fp)
    17d0:	00c00044 	movi	r3,1
    17d4:	10c03215 	stw	r3,200(r2)
    17d8:	00000206 	br	17e4 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    17dc:	00bffb44 	movi	r2,-19
    17e0:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    17e4:	e0bfff17 	ldw	r2,-4(fp)
    17e8:	10800e17 	ldw	r2,56(r2)
    17ec:	1007883a 	mov	r3,r2
    17f0:	e0bfff17 	ldw	r2,-4(fp)
    17f4:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
    17f8:	e0bfff17 	ldw	r2,-4(fp)
    17fc:	00c00044 	movi	r3,1
    1800:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
    1804:	e0bfff17 	ldw	r2,-4(fp)
    1808:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    180c:	e0bfff17 	ldw	r2,-4(fp)
    1810:	00c04004 	movi	r3,256
    1814:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
    1818:	e0bffe17 	ldw	r2,-8(fp)
}
    181c:	e037883a 	mov	sp,fp
    1820:	dfc00117 	ldw	ra,4(sp)
    1824:	df000017 	ldw	fp,0(sp)
    1828:	dec00204 	addi	sp,sp,8
    182c:	f800283a 	ret

00001830 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    1830:	deffee04 	addi	sp,sp,-72
    1834:	dfc01115 	stw	ra,68(sp)
    1838:	df001015 	stw	fp,64(sp)
    183c:	df001004 	addi	fp,sp,64
    1840:	e13ffc15 	stw	r4,-16(fp)
    1844:	e17ffd15 	stw	r5,-12(fp)
    1848:	e1bffe15 	stw	r6,-8(fp)
    184c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    1850:	00800804 	movi	r2,32
    1854:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
    1858:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
    185c:	00002706 	br	18fc <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    1860:	e0fff117 	ldw	r3,-60(fp)
    1864:	e0bfff17 	ldw	r2,-4(fp)
    1868:	1880012e 	bgeu	r3,r2,1870 <alt_epcs_flash_memcmp+0x40>
    186c:	1805883a 	mov	r2,r3
    1870:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    1874:	e0fffe17 	ldw	r3,-8(fp)
    1878:	e0bff017 	ldw	r2,-64(fp)
    187c:	1885883a 	add	r2,r3,r2
    1880:	e0fff404 	addi	r3,fp,-48
    1884:	e1fff217 	ldw	r7,-56(fp)
    1888:	180d883a 	mov	r6,r3
    188c:	100b883a 	mov	r5,r2
    1890:	e13ffc17 	ldw	r4,-16(fp)
    1894:	0001e140 	call	1e14 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    1898:	1000020e 	bge	r2,zero,18a4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    189c:	00bfffc4 	movi	r2,-1
    18a0:	00001906 	br	1908 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    18a4:	e0bff017 	ldw	r2,-64(fp)
    18a8:	e0fffd17 	ldw	r3,-12(fp)
    18ac:	1885883a 	add	r2,r3,r2
    18b0:	e13ff217 	ldw	r4,-56(fp)
    18b4:	e0fff404 	addi	r3,fp,-48
    18b8:	200d883a 	mov	r6,r4
    18bc:	180b883a 	mov	r5,r3
    18c0:	1009883a 	mov	r4,r2
    18c4:	00042500 	call	4250 <memcmp>
    18c8:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
    18cc:	e0bff317 	ldw	r2,-52(fp)
    18d0:	10000226 	beq	r2,zero,18dc <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
    18d4:	e0bff317 	ldw	r2,-52(fp)
    18d8:	00000b06 	br	1908 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
    18dc:	e0bff217 	ldw	r2,-56(fp)
    18e0:	e0ffff17 	ldw	r3,-4(fp)
    18e4:	1885c83a 	sub	r2,r3,r2
    18e8:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
    18ec:	e0fff017 	ldw	r3,-64(fp)
    18f0:	e0bff217 	ldw	r2,-56(fp)
    18f4:	1885883a 	add	r2,r3,r2
    18f8:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    18fc:	e0bfff17 	ldw	r2,-4(fp)
    1900:	103fd71e 	bne	r2,zero,1860 <__alt_mem_epcs_flash_controller+0xfdff8860>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    1904:	0005883a 	mov	r2,zero
}
    1908:	e037883a 	mov	sp,fp
    190c:	dfc00117 	ldw	ra,4(sp)
    1910:	df000017 	ldw	fp,0(sp)
    1914:	dec00204 	addi	sp,sp,8
    1918:	f800283a 	ret

0000191c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    191c:	defff404 	addi	sp,sp,-48
    1920:	dfc00b15 	stw	ra,44(sp)
    1924:	df000a15 	stw	fp,40(sp)
    1928:	df000a04 	addi	fp,sp,40
    192c:	e13ffc15 	stw	r4,-16(fp)
    1930:	e17ffd15 	stw	r5,-12(fp)
    1934:	e1bffe15 	stw	r6,-8(fp)
    1938:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
    193c:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    1940:	e03ff815 	stw	zero,-32(fp)
    1944:	00008306 	br	1b54 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    1948:	e0fffc17 	ldw	r3,-16(fp)
    194c:	e0bff817 	ldw	r2,-32(fp)
    1950:	1004913a 	slli	r2,r2,4
    1954:	1885883a 	add	r2,r3,r2
    1958:	10800d04 	addi	r2,r2,52
    195c:	10800017 	ldw	r2,0(r2)
    1960:	e0fffd17 	ldw	r3,-12(fp)
    1964:	18807816 	blt	r3,r2,1b48 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
    1968:	e0fffc17 	ldw	r3,-16(fp)
    196c:	e0bff817 	ldw	r2,-32(fp)
    1970:	1004913a 	slli	r2,r2,4
    1974:	1885883a 	add	r2,r3,r2
    1978:	10800d04 	addi	r2,r2,52
    197c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
    1980:	e13ffc17 	ldw	r4,-16(fp)
    1984:	e0bff817 	ldw	r2,-32(fp)
    1988:	1004913a 	slli	r2,r2,4
    198c:	2085883a 	add	r2,r4,r2
    1990:	10800e04 	addi	r2,r2,56
    1994:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
    1998:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    199c:	e0fffd17 	ldw	r3,-12(fp)
    19a0:	1880690e 	bge	r3,r2,1b48 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    19a4:	e0fffc17 	ldw	r3,-16(fp)
    19a8:	e0bff817 	ldw	r2,-32(fp)
    19ac:	1004913a 	slli	r2,r2,4
    19b0:	1885883a 	add	r2,r3,r2
    19b4:	10800d04 	addi	r2,r2,52
    19b8:	10800017 	ldw	r2,0(r2)
    19bc:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    19c0:	e03ff915 	stw	zero,-28(fp)
    19c4:	00005806 	br	1b28 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
    19c8:	e0fffd17 	ldw	r3,-12(fp)
    19cc:	e0bffa17 	ldw	r2,-24(fp)
    19d0:	18804916 	blt	r3,r2,1af8 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
    19d4:	e0fffc17 	ldw	r3,-16(fp)
    19d8:	e0bff817 	ldw	r2,-32(fp)
    19dc:	10800104 	addi	r2,r2,4
    19e0:	1004913a 	slli	r2,r2,4
    19e4:	1885883a 	add	r2,r3,r2
    19e8:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
    19ec:	e0bffa17 	ldw	r2,-24(fp)
    19f0:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
    19f4:	e0fffd17 	ldw	r3,-12(fp)
    19f8:	18803f0e 	bge	r3,r2,1af8 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    19fc:	e0fffc17 	ldw	r3,-16(fp)
    1a00:	e0bff817 	ldw	r2,-32(fp)
    1a04:	10800104 	addi	r2,r2,4
    1a08:	1004913a 	slli	r2,r2,4
    1a0c:	1885883a 	add	r2,r3,r2
    1a10:	10c00017 	ldw	r3,0(r2)
    1a14:	e0bffa17 	ldw	r2,-24(fp)
    1a18:	1887883a 	add	r3,r3,r2
    1a1c:	e0bffd17 	ldw	r2,-12(fp)
    1a20:	1885c83a 	sub	r2,r3,r2
    1a24:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    1a28:	e0fffb17 	ldw	r3,-20(fp)
    1a2c:	e0bfff17 	ldw	r2,-4(fp)
    1a30:	1880010e 	bge	r3,r2,1a38 <alt_epcs_flash_write+0x11c>
    1a34:	1805883a 	mov	r2,r3
    1a38:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    1a3c:	e0bffb17 	ldw	r2,-20(fp)
    1a40:	100f883a 	mov	r7,r2
    1a44:	e1bffd17 	ldw	r6,-12(fp)
    1a48:	e17ffe17 	ldw	r5,-8(fp)
    1a4c:	e13ffc17 	ldw	r4,-16(fp)
    1a50:	00018300 	call	1830 <alt_epcs_flash_memcmp>
    1a54:	10001226 	beq	r2,zero,1aa0 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    1a58:	e0bffc17 	ldw	r2,-16(fp)
    1a5c:	10800817 	ldw	r2,32(r2)
    1a60:	e17ffa17 	ldw	r5,-24(fp)
    1a64:	e13ffc17 	ldw	r4,-16(fp)
    1a68:	103ee83a 	callr	r2
    1a6c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
    1a70:	e0bff717 	ldw	r2,-36(fp)
    1a74:	10000a1e 	bne	r2,zero,1aa0 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
    1a78:	e0bffc17 	ldw	r2,-16(fp)
    1a7c:	10800917 	ldw	r2,36(r2)
    1a80:	e0fffb17 	ldw	r3,-20(fp)
    1a84:	d8c00015 	stw	r3,0(sp)
    1a88:	e1fffe17 	ldw	r7,-8(fp)
    1a8c:	e1bffd17 	ldw	r6,-12(fp)
    1a90:	e17ffa17 	ldw	r5,-24(fp)
    1a94:	e13ffc17 	ldw	r4,-16(fp)
    1a98:	103ee83a 	callr	r2
    1a9c:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    1aa0:	e0ffff17 	ldw	r3,-4(fp)
    1aa4:	e0bffb17 	ldw	r2,-20(fp)
    1aa8:	18802e26 	beq	r3,r2,1b64 <alt_epcs_flash_write+0x248>
    1aac:	e0bff717 	ldw	r2,-36(fp)
    1ab0:	10002c1e 	bne	r2,zero,1b64 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
    1ab4:	e0ffff17 	ldw	r3,-4(fp)
    1ab8:	e0bffb17 	ldw	r2,-20(fp)
    1abc:	1885c83a 	sub	r2,r3,r2
    1ac0:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    1ac4:	e0fffc17 	ldw	r3,-16(fp)
    1ac8:	e0bff817 	ldw	r2,-32(fp)
    1acc:	10800104 	addi	r2,r2,4
    1ad0:	1004913a 	slli	r2,r2,4
    1ad4:	1885883a 	add	r2,r3,r2
    1ad8:	10c00017 	ldw	r3,0(r2)
    1adc:	e0bffa17 	ldw	r2,-24(fp)
    1ae0:	1885883a 	add	r2,r3,r2
    1ae4:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    1ae8:	e0bffb17 	ldw	r2,-20(fp)
    1aec:	e0fffe17 	ldw	r3,-8(fp)
    1af0:	1885883a 	add	r2,r3,r2
    1af4:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    1af8:	e0fffc17 	ldw	r3,-16(fp)
    1afc:	e0bff817 	ldw	r2,-32(fp)
    1b00:	10800104 	addi	r2,r2,4
    1b04:	1004913a 	slli	r2,r2,4
    1b08:	1885883a 	add	r2,r3,r2
    1b0c:	10800017 	ldw	r2,0(r2)
    1b10:	e0fffa17 	ldw	r3,-24(fp)
    1b14:	1885883a 	add	r2,r3,r2
    1b18:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    1b1c:	e0bff917 	ldw	r2,-28(fp)
    1b20:	10800044 	addi	r2,r2,1
    1b24:	e0bff915 	stw	r2,-28(fp)
    1b28:	e0fffc17 	ldw	r3,-16(fp)
    1b2c:	e0bff817 	ldw	r2,-32(fp)
    1b30:	1004913a 	slli	r2,r2,4
    1b34:	1885883a 	add	r2,r3,r2
    1b38:	10800f04 	addi	r2,r2,60
    1b3c:	10800017 	ldw	r2,0(r2)
    1b40:	e0fff917 	ldw	r3,-28(fp)
    1b44:	18bfa016 	blt	r3,r2,19c8 <__alt_mem_epcs_flash_controller+0xfdff89c8>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    1b48:	e0bff817 	ldw	r2,-32(fp)
    1b4c:	10800044 	addi	r2,r2,1
    1b50:	e0bff815 	stw	r2,-32(fp)
    1b54:	e0bffc17 	ldw	r2,-16(fp)
    1b58:	10800c17 	ldw	r2,48(r2)
    1b5c:	e0fff817 	ldw	r3,-32(fp)
    1b60:	18bf7916 	blt	r3,r2,1948 <__alt_mem_epcs_flash_controller+0xfdff8948>
      }
    }
  }

finished:
  return ret_code;
    1b64:	e0bff717 	ldw	r2,-36(fp)
}
    1b68:	e037883a 	mov	sp,fp
    1b6c:	dfc00117 	ldw	ra,4(sp)
    1b70:	df000017 	ldw	fp,0(sp)
    1b74:	dec00204 	addi	sp,sp,8
    1b78:	f800283a 	ret

00001b7c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    1b7c:	defffa04 	addi	sp,sp,-24
    1b80:	df000515 	stw	fp,20(sp)
    1b84:	df000504 	addi	fp,sp,20
    1b88:	e13ffd15 	stw	r4,-12(fp)
    1b8c:	e17ffe15 	stw	r5,-8(fp)
    1b90:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    1b94:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    1b98:	e0bffd17 	ldw	r2,-12(fp)
    1b9c:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
    1ba0:	e0bffc17 	ldw	r2,-16(fp)
    1ba4:	10c00c17 	ldw	r3,48(r2)
    1ba8:	e0bfff17 	ldw	r2,-4(fp)
    1bac:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    1bb0:	e0bffc17 	ldw	r2,-16(fp)
    1bb4:	10800c17 	ldw	r2,48(r2)
    1bb8:	1000031e 	bne	r2,zero,1bc8 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
    1bbc:	00bffec4 	movi	r2,-5
    1bc0:	e0bffb15 	stw	r2,-20(fp)
    1bc4:	00000b06 	br	1bf4 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    1bc8:	e0bffc17 	ldw	r2,-16(fp)
    1bcc:	10800c17 	ldw	r2,48(r2)
    1bd0:	10800250 	cmplti	r2,r2,9
    1bd4:	1000031e 	bne	r2,zero,1be4 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
    1bd8:	00bffd04 	movi	r2,-12
    1bdc:	e0bffb15 	stw	r2,-20(fp)
    1be0:	00000406 	br	1bf4 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
    1be4:	e0bffc17 	ldw	r2,-16(fp)
    1be8:	10c00d04 	addi	r3,r2,52
    1bec:	e0bffe17 	ldw	r2,-8(fp)
    1bf0:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    1bf4:	e0bffb17 	ldw	r2,-20(fp)
}
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	df000017 	ldw	fp,0(sp)
    1c00:	dec00104 	addi	sp,sp,4
    1c04:	f800283a 	ret

00001c08 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    1c08:	defff904 	addi	sp,sp,-28
    1c0c:	df000615 	stw	fp,24(sp)
    1c10:	df000604 	addi	fp,sp,24
    1c14:	e13ffe15 	stw	r4,-8(fp)
    1c18:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    1c1c:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    1c20:	e0bffe17 	ldw	r2,-8(fp)
    1c24:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    1c28:	e0bffb17 	ldw	r2,-20(fp)
    1c2c:	10800c17 	ldw	r2,48(r2)
    1c30:	10bfffc4 	addi	r2,r2,-1
    1c34:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    1c38:	e0fffb17 	ldw	r3,-20(fp)
    1c3c:	e0bffc17 	ldw	r2,-16(fp)
    1c40:	1004913a 	slli	r2,r2,4
    1c44:	1885883a 	add	r2,r3,r2
    1c48:	10800d04 	addi	r2,r2,52
    1c4c:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    1c50:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    1c54:	e13ffb17 	ldw	r4,-20(fp)
    1c58:	e0bffc17 	ldw	r2,-16(fp)
    1c5c:	1004913a 	slli	r2,r2,4
    1c60:	2085883a 	add	r2,r4,r2
    1c64:	10800e04 	addi	r2,r2,56
    1c68:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    1c6c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    1c70:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    1c74:	e0bfff17 	ldw	r2,-4(fp)
    1c78:	e0fffd17 	ldw	r3,-12(fp)
    1c7c:	1880022e 	bgeu	r3,r2,1c88 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    1c80:	00bffec4 	movi	r2,-5
    1c84:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
    1c88:	e0bffa17 	ldw	r2,-24(fp)
}
    1c8c:	e037883a 	mov	sp,fp
    1c90:	df000017 	ldw	fp,0(sp)
    1c94:	dec00104 	addi	sp,sp,4
    1c98:	f800283a 	ret

00001c9c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    1c9c:	defffa04 	addi	sp,sp,-24
    1ca0:	dfc00515 	stw	ra,20(sp)
    1ca4:	df000415 	stw	fp,16(sp)
    1ca8:	df000404 	addi	fp,sp,16
    1cac:	e13ffe15 	stw	r4,-8(fp)
    1cb0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    1cb4:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    1cb8:	e0bffe17 	ldw	r2,-8(fp)
    1cbc:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    1cc0:	e17fff17 	ldw	r5,-4(fp)
    1cc4:	e13ffe17 	ldw	r4,-8(fp)
    1cc8:	0001c080 	call	1c08 <alt_epcs_test_address>
    1ccc:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
    1cd0:	e0bffc17 	ldw	r2,-16(fp)
    1cd4:	10000916 	blt	r2,zero,1cfc <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    1cd8:	e0bffd17 	ldw	r2,-12(fp)
    1cdc:	10c02e17 	ldw	r3,184(r2)
    1ce0:	e13fff17 	ldw	r4,-4(fp)
    1ce4:	e0bffd17 	ldw	r2,-12(fp)
    1ce8:	10803217 	ldw	r2,200(r2)
    1cec:	100d883a 	mov	r6,r2
    1cf0:	200b883a 	mov	r5,r4
    1cf4:	1809883a 	mov	r4,r3
    1cf8:	00029e40 	call	29e4 <epcs_sector_erase>
  }
  return ret_code;
    1cfc:	e0bffc17 	ldw	r2,-16(fp)
}
    1d00:	e037883a 	mov	sp,fp
    1d04:	dfc00117 	ldw	ra,4(sp)
    1d08:	df000017 	ldw	fp,0(sp)
    1d0c:	dec00204 	addi	sp,sp,8
    1d10:	f800283a 	ret

00001d14 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    1d14:	defff404 	addi	sp,sp,-48
    1d18:	dfc00b15 	stw	ra,44(sp)
    1d1c:	df000a15 	stw	fp,40(sp)
    1d20:	df000a04 	addi	fp,sp,40
    1d24:	e13ffc15 	stw	r4,-16(fp)
    1d28:	e17ffd15 	stw	r5,-12(fp)
    1d2c:	e1bffe15 	stw	r6,-8(fp)
    1d30:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    1d3c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    1d40:	e17ffe17 	ldw	r5,-8(fp)
    1d44:	e13ffc17 	ldw	r4,-16(fp)
    1d48:	0001c080 	call	1c08 <alt_epcs_test_address>
    1d4c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    1d50:	e0bff917 	ldw	r2,-28(fp)
    1d54:	10002916 	blt	r2,zero,1dfc <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    1d58:	00002606 	br	1df4 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    1d5c:	e0bff817 	ldw	r2,-32(fp)
    1d60:	10c03117 	ldw	r3,196(r2)
    1d64:	e0bffe17 	ldw	r2,-8(fp)
    1d68:	1887883a 	add	r3,r3,r2
    1d6c:	e0bff817 	ldw	r2,-32(fp)
    1d70:	10803117 	ldw	r2,196(r2)
    1d74:	0085c83a 	sub	r2,zero,r2
    1d78:	1884703a 	and	r2,r3,r2
    1d7c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    1d80:	e0fffa17 	ldw	r3,-24(fp)
    1d84:	e0bffe17 	ldw	r2,-8(fp)
    1d88:	1885c83a 	sub	r2,r3,r2
    1d8c:	e0c00217 	ldw	r3,8(fp)
    1d90:	1880010e 	bge	r3,r2,1d98 <alt_epcs_flash_write_block+0x84>
    1d94:	1805883a 	mov	r2,r3
    1d98:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    1d9c:	e0bff817 	ldw	r2,-32(fp)
    1da0:	11002e17 	ldw	r4,184(r2)
    1da4:	e0bff717 	ldw	r2,-36(fp)
    1da8:	e0ffff17 	ldw	r3,-4(fp)
    1dac:	1887883a 	add	r3,r3,r2
    1db0:	e0bff817 	ldw	r2,-32(fp)
    1db4:	10803217 	ldw	r2,200(r2)
    1db8:	d8800015 	stw	r2,0(sp)
    1dbc:	e1fffb17 	ldw	r7,-20(fp)
    1dc0:	180d883a 	mov	r6,r3
    1dc4:	e17ffe17 	ldw	r5,-8(fp)
    1dc8:	0002c940 	call	2c94 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    1dcc:	e0c00217 	ldw	r3,8(fp)
    1dd0:	e0bffb17 	ldw	r2,-20(fp)
    1dd4:	1885c83a 	sub	r2,r3,r2
    1dd8:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    1ddc:	e0fff717 	ldw	r3,-36(fp)
    1de0:	e0bffb17 	ldw	r2,-20(fp)
    1de4:	1885883a 	add	r2,r3,r2
    1de8:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    1dec:	e0bffa17 	ldw	r2,-24(fp)
    1df0:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    1df4:	e0800217 	ldw	r2,8(fp)
    1df8:	103fd81e 	bne	r2,zero,1d5c <__alt_mem_epcs_flash_controller+0xfdff8d5c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    1dfc:	e0bff917 	ldw	r2,-28(fp)
}
    1e00:	e037883a 	mov	sp,fp
    1e04:	dfc00117 	ldw	ra,4(sp)
    1e08:	df000017 	ldw	fp,0(sp)
    1e0c:	dec00204 	addi	sp,sp,8
    1e10:	f800283a 	ret

00001e14 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    1e14:	defff704 	addi	sp,sp,-36
    1e18:	dfc00815 	stw	ra,32(sp)
    1e1c:	df000715 	stw	fp,28(sp)
    1e20:	df000704 	addi	fp,sp,28
    1e24:	e13ffc15 	stw	r4,-16(fp)
    1e28:	e17ffd15 	stw	r5,-12(fp)
    1e2c:	e1bffe15 	stw	r6,-8(fp)
    1e30:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    1e34:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    1e38:	e0bffc17 	ldw	r2,-16(fp)
    1e3c:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    1e40:	e17ffd17 	ldw	r5,-12(fp)
    1e44:	e13ffc17 	ldw	r4,-16(fp)
    1e48:	0001c080 	call	1c08 <alt_epcs_test_address>
    1e4c:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
    1e50:	e0bffa17 	ldw	r2,-24(fp)
    1e54:	10000f16 	blt	r2,zero,1e94 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    1e58:	e0bffb17 	ldw	r2,-20(fp)
    1e5c:	10c02e17 	ldw	r3,184(r2)
    1e60:	e0bffb17 	ldw	r2,-20(fp)
    1e64:	10803217 	ldw	r2,200(r2)
    1e68:	d8800015 	stw	r2,0(sp)
    1e6c:	e1ffff17 	ldw	r7,-4(fp)
    1e70:	e1bffe17 	ldw	r6,-8(fp)
    1e74:	e17ffd17 	ldw	r5,-12(fp)
    1e78:	1809883a 	mov	r4,r3
    1e7c:	0002ae00 	call	2ae0 <epcs_read_buffer>
    1e80:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    1e84:	e0fffa17 	ldw	r3,-24(fp)
    1e88:	e0bfff17 	ldw	r2,-4(fp)
    1e8c:	1880011e 	bne	r3,r2,1e94 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    1e90:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
    1e94:	e0bffa17 	ldw	r2,-24(fp)
}
    1e98:	e037883a 	mov	sp,fp
    1e9c:	dfc00117 	ldw	ra,4(sp)
    1ea0:	df000017 	ldw	fp,0(sp)
    1ea4:	dec00204 	addi	sp,sp,8
    1ea8:	f800283a 	ret

00001eac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1eac:	defffa04 	addi	sp,sp,-24
    1eb0:	dfc00515 	stw	ra,20(sp)
    1eb4:	df000415 	stw	fp,16(sp)
    1eb8:	df000404 	addi	fp,sp,16
    1ebc:	e13ffd15 	stw	r4,-12(fp)
    1ec0:	e17ffe15 	stw	r5,-8(fp)
    1ec4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1ec8:	e0bffd17 	ldw	r2,-12(fp)
    1ecc:	10800017 	ldw	r2,0(r2)
    1ed0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1ed4:	e0bffc17 	ldw	r2,-16(fp)
    1ed8:	10c00a04 	addi	r3,r2,40
    1edc:	e0bffd17 	ldw	r2,-12(fp)
    1ee0:	10800217 	ldw	r2,8(r2)
    1ee4:	100f883a 	mov	r7,r2
    1ee8:	e1bfff17 	ldw	r6,-4(fp)
    1eec:	e17ffe17 	ldw	r5,-8(fp)
    1ef0:	1809883a 	mov	r4,r3
    1ef4:	00024d40 	call	24d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1ef8:	e037883a 	mov	sp,fp
    1efc:	dfc00117 	ldw	ra,4(sp)
    1f00:	df000017 	ldw	fp,0(sp)
    1f04:	dec00204 	addi	sp,sp,8
    1f08:	f800283a 	ret

00001f0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1f0c:	defffa04 	addi	sp,sp,-24
    1f10:	dfc00515 	stw	ra,20(sp)
    1f14:	df000415 	stw	fp,16(sp)
    1f18:	df000404 	addi	fp,sp,16
    1f1c:	e13ffd15 	stw	r4,-12(fp)
    1f20:	e17ffe15 	stw	r5,-8(fp)
    1f24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1f28:	e0bffd17 	ldw	r2,-12(fp)
    1f2c:	10800017 	ldw	r2,0(r2)
    1f30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1f34:	e0bffc17 	ldw	r2,-16(fp)
    1f38:	10c00a04 	addi	r3,r2,40
    1f3c:	e0bffd17 	ldw	r2,-12(fp)
    1f40:	10800217 	ldw	r2,8(r2)
    1f44:	100f883a 	mov	r7,r2
    1f48:	e1bfff17 	ldw	r6,-4(fp)
    1f4c:	e17ffe17 	ldw	r5,-8(fp)
    1f50:	1809883a 	mov	r4,r3
    1f54:	00026f00 	call	26f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1f58:	e037883a 	mov	sp,fp
    1f5c:	dfc00117 	ldw	ra,4(sp)
    1f60:	df000017 	ldw	fp,0(sp)
    1f64:	dec00204 	addi	sp,sp,8
    1f68:	f800283a 	ret

00001f6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1f6c:	defffc04 	addi	sp,sp,-16
    1f70:	dfc00315 	stw	ra,12(sp)
    1f74:	df000215 	stw	fp,8(sp)
    1f78:	df000204 	addi	fp,sp,8
    1f7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1f80:	e0bfff17 	ldw	r2,-4(fp)
    1f84:	10800017 	ldw	r2,0(r2)
    1f88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1f8c:	e0bffe17 	ldw	r2,-8(fp)
    1f90:	10c00a04 	addi	r3,r2,40
    1f94:	e0bfff17 	ldw	r2,-4(fp)
    1f98:	10800217 	ldw	r2,8(r2)
    1f9c:	100b883a 	mov	r5,r2
    1fa0:	1809883a 	mov	r4,r3
    1fa4:	000237c0 	call	237c <altera_avalon_jtag_uart_close>
}
    1fa8:	e037883a 	mov	sp,fp
    1fac:	dfc00117 	ldw	ra,4(sp)
    1fb0:	df000017 	ldw	fp,0(sp)
    1fb4:	dec00204 	addi	sp,sp,8
    1fb8:	f800283a 	ret

00001fbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    1fbc:	defffa04 	addi	sp,sp,-24
    1fc0:	dfc00515 	stw	ra,20(sp)
    1fc4:	df000415 	stw	fp,16(sp)
    1fc8:	df000404 	addi	fp,sp,16
    1fcc:	e13ffd15 	stw	r4,-12(fp)
    1fd0:	e17ffe15 	stw	r5,-8(fp)
    1fd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    1fd8:	e0bffd17 	ldw	r2,-12(fp)
    1fdc:	10800017 	ldw	r2,0(r2)
    1fe0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1fe4:	e0bffc17 	ldw	r2,-16(fp)
    1fe8:	10800a04 	addi	r2,r2,40
    1fec:	e1bfff17 	ldw	r6,-4(fp)
    1ff0:	e17ffe17 	ldw	r5,-8(fp)
    1ff4:	1009883a 	mov	r4,r2
    1ff8:	00023e40 	call	23e4 <altera_avalon_jtag_uart_ioctl>
}
    1ffc:	e037883a 	mov	sp,fp
    2000:	dfc00117 	ldw	ra,4(sp)
    2004:	df000017 	ldw	fp,0(sp)
    2008:	dec00204 	addi	sp,sp,8
    200c:	f800283a 	ret

00002010 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    2010:	defffa04 	addi	sp,sp,-24
    2014:	dfc00515 	stw	ra,20(sp)
    2018:	df000415 	stw	fp,16(sp)
    201c:	df000404 	addi	fp,sp,16
    2020:	e13ffd15 	stw	r4,-12(fp)
    2024:	e17ffe15 	stw	r5,-8(fp)
    2028:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    202c:	e0bffd17 	ldw	r2,-12(fp)
    2030:	00c00044 	movi	r3,1
    2034:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    2038:	e0bffd17 	ldw	r2,-12(fp)
    203c:	10800017 	ldw	r2,0(r2)
    2040:	10800104 	addi	r2,r2,4
    2044:	1007883a 	mov	r3,r2
    2048:	e0bffd17 	ldw	r2,-12(fp)
    204c:	10800817 	ldw	r2,32(r2)
    2050:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    2054:	e0bffe17 	ldw	r2,-8(fp)
    2058:	e0ffff17 	ldw	r3,-4(fp)
    205c:	d8000015 	stw	zero,0(sp)
    2060:	e1fffd17 	ldw	r7,-12(fp)
    2064:	01800034 	movhi	r6,0
    2068:	31883404 	addi	r6,r6,8400
    206c:	180b883a 	mov	r5,r3
    2070:	1009883a 	mov	r4,r2
    2074:	00034580 	call	3458 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    2078:	e0bffd17 	ldw	r2,-12(fp)
    207c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    2080:	e0bffd17 	ldw	r2,-12(fp)
    2084:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2088:	d0e51017 	ldw	r3,-27584(gp)
    208c:	e1fffd17 	ldw	r7,-12(fp)
    2090:	01800034 	movhi	r6,0
    2094:	3188b704 	addi	r6,r6,8924
    2098:	180b883a 	mov	r5,r3
    209c:	1009883a 	mov	r4,r2
    20a0:	0002f500 	call	2f50 <alt_alarm_start>
    20a4:	1000040e 	bge	r2,zero,20b8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    20a8:	e0fffd17 	ldw	r3,-12(fp)
    20ac:	00a00034 	movhi	r2,32768
    20b0:	10bfffc4 	addi	r2,r2,-1
    20b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    20b8:	0001883a 	nop
    20bc:	e037883a 	mov	sp,fp
    20c0:	dfc00117 	ldw	ra,4(sp)
    20c4:	df000017 	ldw	fp,0(sp)
    20c8:	dec00204 	addi	sp,sp,8
    20cc:	f800283a 	ret

000020d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    20d0:	defff804 	addi	sp,sp,-32
    20d4:	df000715 	stw	fp,28(sp)
    20d8:	df000704 	addi	fp,sp,28
    20dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    20e0:	e0bfff17 	ldw	r2,-4(fp)
    20e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    20e8:	e0bffb17 	ldw	r2,-20(fp)
    20ec:	10800017 	ldw	r2,0(r2)
    20f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    20f4:	e0bffc17 	ldw	r2,-16(fp)
    20f8:	10800104 	addi	r2,r2,4
    20fc:	10800037 	ldwio	r2,0(r2)
    2100:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    2104:	e0bffd17 	ldw	r2,-12(fp)
    2108:	1080c00c 	andi	r2,r2,768
    210c:	10006d26 	beq	r2,zero,22c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    2110:	e0bffd17 	ldw	r2,-12(fp)
    2114:	1080400c 	andi	r2,r2,256
    2118:	10003526 	beq	r2,zero,21f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    211c:	00800074 	movhi	r2,1
    2120:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2124:	e0bffb17 	ldw	r2,-20(fp)
    2128:	10800a17 	ldw	r2,40(r2)
    212c:	10800044 	addi	r2,r2,1
    2130:	1081ffcc 	andi	r2,r2,2047
    2134:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    2138:	e0bffb17 	ldw	r2,-20(fp)
    213c:	10c00b17 	ldw	r3,44(r2)
    2140:	e0bffe17 	ldw	r2,-8(fp)
    2144:	18801526 	beq	r3,r2,219c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    2148:	e0bffc17 	ldw	r2,-16(fp)
    214c:	10800037 	ldwio	r2,0(r2)
    2150:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    2154:	e0bff917 	ldw	r2,-28(fp)
    2158:	10a0000c 	andi	r2,r2,32768
    215c:	10001126 	beq	r2,zero,21a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    2160:	e0bffb17 	ldw	r2,-20(fp)
    2164:	10800a17 	ldw	r2,40(r2)
    2168:	e0fff917 	ldw	r3,-28(fp)
    216c:	1809883a 	mov	r4,r3
    2170:	e0fffb17 	ldw	r3,-20(fp)
    2174:	1885883a 	add	r2,r3,r2
    2178:	10800e04 	addi	r2,r2,56
    217c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2180:	e0bffb17 	ldw	r2,-20(fp)
    2184:	10800a17 	ldw	r2,40(r2)
    2188:	10800044 	addi	r2,r2,1
    218c:	10c1ffcc 	andi	r3,r2,2047
    2190:	e0bffb17 	ldw	r2,-20(fp)
    2194:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    2198:	003fe206 	br	2124 <__alt_mem_epcs_flash_controller+0xfdff9124>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    219c:	0001883a 	nop
    21a0:	00000106 	br	21a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    21a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    21a8:	e0bff917 	ldw	r2,-28(fp)
    21ac:	10bfffec 	andhi	r2,r2,65535
    21b0:	10000f26 	beq	r2,zero,21f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    21b4:	e0bffb17 	ldw	r2,-20(fp)
    21b8:	10c00817 	ldw	r3,32(r2)
    21bc:	00bfff84 	movi	r2,-2
    21c0:	1886703a 	and	r3,r3,r2
    21c4:	e0bffb17 	ldw	r2,-20(fp)
    21c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    21cc:	e0bffc17 	ldw	r2,-16(fp)
    21d0:	10800104 	addi	r2,r2,4
    21d4:	1007883a 	mov	r3,r2
    21d8:	e0bffb17 	ldw	r2,-20(fp)
    21dc:	10800817 	ldw	r2,32(r2)
    21e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    21e4:	e0bffc17 	ldw	r2,-16(fp)
    21e8:	10800104 	addi	r2,r2,4
    21ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    21f0:	e0bffd17 	ldw	r2,-12(fp)
    21f4:	1080800c 	andi	r2,r2,512
    21f8:	103fbe26 	beq	r2,zero,20f4 <__alt_mem_epcs_flash_controller+0xfdff90f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    21fc:	e0bffd17 	ldw	r2,-12(fp)
    2200:	1004d43a 	srli	r2,r2,16
    2204:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    2208:	00001406 	br	225c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    220c:	e0bffc17 	ldw	r2,-16(fp)
    2210:	e0fffb17 	ldw	r3,-20(fp)
    2214:	18c00d17 	ldw	r3,52(r3)
    2218:	e13ffb17 	ldw	r4,-20(fp)
    221c:	20c7883a 	add	r3,r4,r3
    2220:	18c20e04 	addi	r3,r3,2104
    2224:	18c00003 	ldbu	r3,0(r3)
    2228:	18c03fcc 	andi	r3,r3,255
    222c:	18c0201c 	xori	r3,r3,128
    2230:	18ffe004 	addi	r3,r3,-128
    2234:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2238:	e0bffb17 	ldw	r2,-20(fp)
    223c:	10800d17 	ldw	r2,52(r2)
    2240:	10800044 	addi	r2,r2,1
    2244:	10c1ffcc 	andi	r3,r2,2047
    2248:	e0bffb17 	ldw	r2,-20(fp)
    224c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    2250:	e0bffa17 	ldw	r2,-24(fp)
    2254:	10bfffc4 	addi	r2,r2,-1
    2258:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    225c:	e0bffa17 	ldw	r2,-24(fp)
    2260:	10000526 	beq	r2,zero,2278 <altera_avalon_jtag_uart_irq+0x1a8>
    2264:	e0bffb17 	ldw	r2,-20(fp)
    2268:	10c00d17 	ldw	r3,52(r2)
    226c:	e0bffb17 	ldw	r2,-20(fp)
    2270:	10800c17 	ldw	r2,48(r2)
    2274:	18bfe51e 	bne	r3,r2,220c <__alt_mem_epcs_flash_controller+0xfdff920c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    2278:	e0bffa17 	ldw	r2,-24(fp)
    227c:	103f9d26 	beq	r2,zero,20f4 <__alt_mem_epcs_flash_controller+0xfdff90f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2280:	e0bffb17 	ldw	r2,-20(fp)
    2284:	10c00817 	ldw	r3,32(r2)
    2288:	00bfff44 	movi	r2,-3
    228c:	1886703a 	and	r3,r3,r2
    2290:	e0bffb17 	ldw	r2,-20(fp)
    2294:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2298:	e0bffb17 	ldw	r2,-20(fp)
    229c:	10800017 	ldw	r2,0(r2)
    22a0:	10800104 	addi	r2,r2,4
    22a4:	1007883a 	mov	r3,r2
    22a8:	e0bffb17 	ldw	r2,-20(fp)
    22ac:	10800817 	ldw	r2,32(r2)
    22b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    22b4:	e0bffc17 	ldw	r2,-16(fp)
    22b8:	10800104 	addi	r2,r2,4
    22bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    22c0:	003f8c06 	br	20f4 <__alt_mem_epcs_flash_controller+0xfdff90f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    22c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    22c8:	0001883a 	nop
    22cc:	e037883a 	mov	sp,fp
    22d0:	df000017 	ldw	fp,0(sp)
    22d4:	dec00104 	addi	sp,sp,4
    22d8:	f800283a 	ret

000022dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    22dc:	defff804 	addi	sp,sp,-32
    22e0:	df000715 	stw	fp,28(sp)
    22e4:	df000704 	addi	fp,sp,28
    22e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    22ec:	e0bffb17 	ldw	r2,-20(fp)
    22f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    22f4:	e0bff917 	ldw	r2,-28(fp)
    22f8:	10800017 	ldw	r2,0(r2)
    22fc:	10800104 	addi	r2,r2,4
    2300:	10800037 	ldwio	r2,0(r2)
    2304:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    2308:	e0bffa17 	ldw	r2,-24(fp)
    230c:	1081000c 	andi	r2,r2,1024
    2310:	10000b26 	beq	r2,zero,2340 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    2314:	e0bff917 	ldw	r2,-28(fp)
    2318:	10800017 	ldw	r2,0(r2)
    231c:	10800104 	addi	r2,r2,4
    2320:	1007883a 	mov	r3,r2
    2324:	e0bff917 	ldw	r2,-28(fp)
    2328:	10800817 	ldw	r2,32(r2)
    232c:	10810014 	ori	r2,r2,1024
    2330:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    2334:	e0bff917 	ldw	r2,-28(fp)
    2338:	10000915 	stw	zero,36(r2)
    233c:	00000a06 	br	2368 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    2340:	e0bff917 	ldw	r2,-28(fp)
    2344:	10c00917 	ldw	r3,36(r2)
    2348:	00a00034 	movhi	r2,32768
    234c:	10bfff04 	addi	r2,r2,-4
    2350:	10c00536 	bltu	r2,r3,2368 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    2354:	e0bff917 	ldw	r2,-28(fp)
    2358:	10800917 	ldw	r2,36(r2)
    235c:	10c00044 	addi	r3,r2,1
    2360:	e0bff917 	ldw	r2,-28(fp)
    2364:	10c00915 	stw	r3,36(r2)
    2368:	d0a51017 	ldw	r2,-27584(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    236c:	e037883a 	mov	sp,fp
    2370:	df000017 	ldw	fp,0(sp)
    2374:	dec00104 	addi	sp,sp,4
    2378:	f800283a 	ret

0000237c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    237c:	defffd04 	addi	sp,sp,-12
    2380:	df000215 	stw	fp,8(sp)
    2384:	df000204 	addi	fp,sp,8
    2388:	e13ffe15 	stw	r4,-8(fp)
    238c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    2390:	00000506 	br	23a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    2394:	e0bfff17 	ldw	r2,-4(fp)
    2398:	1090000c 	andi	r2,r2,16384
    239c:	10000226 	beq	r2,zero,23a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    23a0:	00bffd44 	movi	r2,-11
    23a4:	00000b06 	br	23d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    23a8:	e0bffe17 	ldw	r2,-8(fp)
    23ac:	10c00d17 	ldw	r3,52(r2)
    23b0:	e0bffe17 	ldw	r2,-8(fp)
    23b4:	10800c17 	ldw	r2,48(r2)
    23b8:	18800526 	beq	r3,r2,23d0 <altera_avalon_jtag_uart_close+0x54>
    23bc:	e0bffe17 	ldw	r2,-8(fp)
    23c0:	10c00917 	ldw	r3,36(r2)
    23c4:	e0bffe17 	ldw	r2,-8(fp)
    23c8:	10800117 	ldw	r2,4(r2)
    23cc:	18bff136 	bltu	r3,r2,2394 <__alt_mem_epcs_flash_controller+0xfdff9394>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    23d0:	0005883a 	mov	r2,zero
}
    23d4:	e037883a 	mov	sp,fp
    23d8:	df000017 	ldw	fp,0(sp)
    23dc:	dec00104 	addi	sp,sp,4
    23e0:	f800283a 	ret

000023e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    23e4:	defffa04 	addi	sp,sp,-24
    23e8:	df000515 	stw	fp,20(sp)
    23ec:	df000504 	addi	fp,sp,20
    23f0:	e13ffd15 	stw	r4,-12(fp)
    23f4:	e17ffe15 	stw	r5,-8(fp)
    23f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    23fc:	00bff9c4 	movi	r2,-25
    2400:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    2404:	e0bffe17 	ldw	r2,-8(fp)
    2408:	10da8060 	cmpeqi	r3,r2,27137
    240c:	1800031e 	bne	r3,zero,241c <altera_avalon_jtag_uart_ioctl+0x38>
    2410:	109a80a0 	cmpeqi	r2,r2,27138
    2414:	1000181e 	bne	r2,zero,2478 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    2418:	00002906 	br	24c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    241c:	e0bffd17 	ldw	r2,-12(fp)
    2420:	10c00117 	ldw	r3,4(r2)
    2424:	00a00034 	movhi	r2,32768
    2428:	10bfffc4 	addi	r2,r2,-1
    242c:	18802126 	beq	r3,r2,24b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    2430:	e0bfff17 	ldw	r2,-4(fp)
    2434:	10800017 	ldw	r2,0(r2)
    2438:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    243c:	e0bffc17 	ldw	r2,-16(fp)
    2440:	10800090 	cmplti	r2,r2,2
    2444:	1000061e 	bne	r2,zero,2460 <altera_avalon_jtag_uart_ioctl+0x7c>
    2448:	e0fffc17 	ldw	r3,-16(fp)
    244c:	00a00034 	movhi	r2,32768
    2450:	10bfffc4 	addi	r2,r2,-1
    2454:	18800226 	beq	r3,r2,2460 <altera_avalon_jtag_uart_ioctl+0x7c>
    2458:	e0bffc17 	ldw	r2,-16(fp)
    245c:	00000206 	br	2468 <altera_avalon_jtag_uart_ioctl+0x84>
    2460:	00a00034 	movhi	r2,32768
    2464:	10bfff84 	addi	r2,r2,-2
    2468:	e0fffd17 	ldw	r3,-12(fp)
    246c:	18800115 	stw	r2,4(r3)
      rc = 0;
    2470:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    2474:	00000f06 	br	24b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    2478:	e0bffd17 	ldw	r2,-12(fp)
    247c:	10c00117 	ldw	r3,4(r2)
    2480:	00a00034 	movhi	r2,32768
    2484:	10bfffc4 	addi	r2,r2,-1
    2488:	18800c26 	beq	r3,r2,24bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    248c:	e0bffd17 	ldw	r2,-12(fp)
    2490:	10c00917 	ldw	r3,36(r2)
    2494:	e0bffd17 	ldw	r2,-12(fp)
    2498:	10800117 	ldw	r2,4(r2)
    249c:	1885803a 	cmpltu	r2,r3,r2
    24a0:	10c03fcc 	andi	r3,r2,255
    24a4:	e0bfff17 	ldw	r2,-4(fp)
    24a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    24ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    24b0:	00000206 	br	24bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    24b4:	0001883a 	nop
    24b8:	00000106 	br	24c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    24bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
    24c0:	e0bffb17 	ldw	r2,-20(fp)
}
    24c4:	e037883a 	mov	sp,fp
    24c8:	df000017 	ldw	fp,0(sp)
    24cc:	dec00104 	addi	sp,sp,4
    24d0:	f800283a 	ret

000024d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    24d4:	defff304 	addi	sp,sp,-52
    24d8:	dfc00c15 	stw	ra,48(sp)
    24dc:	df000b15 	stw	fp,44(sp)
    24e0:	df000b04 	addi	fp,sp,44
    24e4:	e13ffc15 	stw	r4,-16(fp)
    24e8:	e17ffd15 	stw	r5,-12(fp)
    24ec:	e1bffe15 	stw	r6,-8(fp)
    24f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    24f4:	e0bffd17 	ldw	r2,-12(fp)
    24f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    24fc:	00004706 	br	261c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    2500:	e0bffc17 	ldw	r2,-16(fp)
    2504:	10800a17 	ldw	r2,40(r2)
    2508:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    250c:	e0bffc17 	ldw	r2,-16(fp)
    2510:	10800b17 	ldw	r2,44(r2)
    2514:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    2518:	e0fff717 	ldw	r3,-36(fp)
    251c:	e0bff817 	ldw	r2,-32(fp)
    2520:	18800536 	bltu	r3,r2,2538 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    2524:	e0fff717 	ldw	r3,-36(fp)
    2528:	e0bff817 	ldw	r2,-32(fp)
    252c:	1885c83a 	sub	r2,r3,r2
    2530:	e0bff615 	stw	r2,-40(fp)
    2534:	00000406 	br	2548 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    2538:	00c20004 	movi	r3,2048
    253c:	e0bff817 	ldw	r2,-32(fp)
    2540:	1885c83a 	sub	r2,r3,r2
    2544:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    2548:	e0bff617 	ldw	r2,-40(fp)
    254c:	10001e26 	beq	r2,zero,25c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    2550:	e0fffe17 	ldw	r3,-8(fp)
    2554:	e0bff617 	ldw	r2,-40(fp)
    2558:	1880022e 	bgeu	r3,r2,2564 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    255c:	e0bffe17 	ldw	r2,-8(fp)
    2560:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    2564:	e0bffc17 	ldw	r2,-16(fp)
    2568:	10c00e04 	addi	r3,r2,56
    256c:	e0bff817 	ldw	r2,-32(fp)
    2570:	1885883a 	add	r2,r3,r2
    2574:	e1bff617 	ldw	r6,-40(fp)
    2578:	100b883a 	mov	r5,r2
    257c:	e13ff517 	ldw	r4,-44(fp)
    2580:	00042800 	call	4280 <memcpy>
      ptr   += n;
    2584:	e0fff517 	ldw	r3,-44(fp)
    2588:	e0bff617 	ldw	r2,-40(fp)
    258c:	1885883a 	add	r2,r3,r2
    2590:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    2594:	e0fffe17 	ldw	r3,-8(fp)
    2598:	e0bff617 	ldw	r2,-40(fp)
    259c:	1885c83a 	sub	r2,r3,r2
    25a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    25a4:	e0fff817 	ldw	r3,-32(fp)
    25a8:	e0bff617 	ldw	r2,-40(fp)
    25ac:	1885883a 	add	r2,r3,r2
    25b0:	10c1ffcc 	andi	r3,r2,2047
    25b4:	e0bffc17 	ldw	r2,-16(fp)
    25b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    25bc:	e0bffe17 	ldw	r2,-8(fp)
    25c0:	00bfcf16 	blt	zero,r2,2500 <__alt_mem_epcs_flash_controller+0xfdff9500>
    25c4:	00000106 	br	25cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    25c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    25cc:	e0fff517 	ldw	r3,-44(fp)
    25d0:	e0bffd17 	ldw	r2,-12(fp)
    25d4:	1880141e 	bne	r3,r2,2628 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    25d8:	e0bfff17 	ldw	r2,-4(fp)
    25dc:	1090000c 	andi	r2,r2,16384
    25e0:	1000131e 	bne	r2,zero,2630 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    25e4:	0001883a 	nop
    25e8:	e0bffc17 	ldw	r2,-16(fp)
    25ec:	10c00a17 	ldw	r3,40(r2)
    25f0:	e0bff717 	ldw	r2,-36(fp)
    25f4:	1880051e 	bne	r3,r2,260c <altera_avalon_jtag_uart_read+0x138>
    25f8:	e0bffc17 	ldw	r2,-16(fp)
    25fc:	10c00917 	ldw	r3,36(r2)
    2600:	e0bffc17 	ldw	r2,-16(fp)
    2604:	10800117 	ldw	r2,4(r2)
    2608:	18bff736 	bltu	r3,r2,25e8 <__alt_mem_epcs_flash_controller+0xfdff95e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    260c:	e0bffc17 	ldw	r2,-16(fp)
    2610:	10c00a17 	ldw	r3,40(r2)
    2614:	e0bff717 	ldw	r2,-36(fp)
    2618:	18800726 	beq	r3,r2,2638 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    261c:	e0bffe17 	ldw	r2,-8(fp)
    2620:	00bfb716 	blt	zero,r2,2500 <__alt_mem_epcs_flash_controller+0xfdff9500>
    2624:	00000506 	br	263c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    2628:	0001883a 	nop
    262c:	00000306 	br	263c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    2630:	0001883a 	nop
    2634:	00000106 	br	263c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    2638:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    263c:	e0fff517 	ldw	r3,-44(fp)
    2640:	e0bffd17 	ldw	r2,-12(fp)
    2644:	18801826 	beq	r3,r2,26a8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2648:	0005303a 	rdctl	r2,status
    264c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2650:	e0fffb17 	ldw	r3,-20(fp)
    2654:	00bfff84 	movi	r2,-2
    2658:	1884703a 	and	r2,r3,r2
    265c:	1001703a 	wrctl	status,r2
  
  return context;
    2660:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    2664:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2668:	e0bffc17 	ldw	r2,-16(fp)
    266c:	10800817 	ldw	r2,32(r2)
    2670:	10c00054 	ori	r3,r2,1
    2674:	e0bffc17 	ldw	r2,-16(fp)
    2678:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    267c:	e0bffc17 	ldw	r2,-16(fp)
    2680:	10800017 	ldw	r2,0(r2)
    2684:	10800104 	addi	r2,r2,4
    2688:	1007883a 	mov	r3,r2
    268c:	e0bffc17 	ldw	r2,-16(fp)
    2690:	10800817 	ldw	r2,32(r2)
    2694:	18800035 	stwio	r2,0(r3)
    2698:	e0bffa17 	ldw	r2,-24(fp)
    269c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    26a0:	e0bff917 	ldw	r2,-28(fp)
    26a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    26a8:	e0fff517 	ldw	r3,-44(fp)
    26ac:	e0bffd17 	ldw	r2,-12(fp)
    26b0:	18800426 	beq	r3,r2,26c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    26b4:	e0fff517 	ldw	r3,-44(fp)
    26b8:	e0bffd17 	ldw	r2,-12(fp)
    26bc:	1885c83a 	sub	r2,r3,r2
    26c0:	00000606 	br	26dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    26c4:	e0bfff17 	ldw	r2,-4(fp)
    26c8:	1090000c 	andi	r2,r2,16384
    26cc:	10000226 	beq	r2,zero,26d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    26d0:	00bffd44 	movi	r2,-11
    26d4:	00000106 	br	26dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    26d8:	00bffec4 	movi	r2,-5
}
    26dc:	e037883a 	mov	sp,fp
    26e0:	dfc00117 	ldw	ra,4(sp)
    26e4:	df000017 	ldw	fp,0(sp)
    26e8:	dec00204 	addi	sp,sp,8
    26ec:	f800283a 	ret

000026f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    26f0:	defff304 	addi	sp,sp,-52
    26f4:	dfc00c15 	stw	ra,48(sp)
    26f8:	df000b15 	stw	fp,44(sp)
    26fc:	df000b04 	addi	fp,sp,44
    2700:	e13ffc15 	stw	r4,-16(fp)
    2704:	e17ffd15 	stw	r5,-12(fp)
    2708:	e1bffe15 	stw	r6,-8(fp)
    270c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    2710:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    2714:	e0bffd17 	ldw	r2,-12(fp)
    2718:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    271c:	00003706 	br	27fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    2720:	e0bffc17 	ldw	r2,-16(fp)
    2724:	10800c17 	ldw	r2,48(r2)
    2728:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    272c:	e0bffc17 	ldw	r2,-16(fp)
    2730:	10800d17 	ldw	r2,52(r2)
    2734:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    2738:	e0fff917 	ldw	r3,-28(fp)
    273c:	e0bff517 	ldw	r2,-44(fp)
    2740:	1880062e 	bgeu	r3,r2,275c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    2744:	e0fff517 	ldw	r3,-44(fp)
    2748:	e0bff917 	ldw	r2,-28(fp)
    274c:	1885c83a 	sub	r2,r3,r2
    2750:	10bfffc4 	addi	r2,r2,-1
    2754:	e0bff615 	stw	r2,-40(fp)
    2758:	00000b06 	br	2788 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    275c:	e0bff517 	ldw	r2,-44(fp)
    2760:	10000526 	beq	r2,zero,2778 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    2764:	00c20004 	movi	r3,2048
    2768:	e0bff917 	ldw	r2,-28(fp)
    276c:	1885c83a 	sub	r2,r3,r2
    2770:	e0bff615 	stw	r2,-40(fp)
    2774:	00000406 	br	2788 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    2778:	00c1ffc4 	movi	r3,2047
    277c:	e0bff917 	ldw	r2,-28(fp)
    2780:	1885c83a 	sub	r2,r3,r2
    2784:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    2788:	e0bff617 	ldw	r2,-40(fp)
    278c:	10001e26 	beq	r2,zero,2808 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    2790:	e0fffe17 	ldw	r3,-8(fp)
    2794:	e0bff617 	ldw	r2,-40(fp)
    2798:	1880022e 	bgeu	r3,r2,27a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    279c:	e0bffe17 	ldw	r2,-8(fp)
    27a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    27a4:	e0bffc17 	ldw	r2,-16(fp)
    27a8:	10c20e04 	addi	r3,r2,2104
    27ac:	e0bff917 	ldw	r2,-28(fp)
    27b0:	1885883a 	add	r2,r3,r2
    27b4:	e1bff617 	ldw	r6,-40(fp)
    27b8:	e17ffd17 	ldw	r5,-12(fp)
    27bc:	1009883a 	mov	r4,r2
    27c0:	00042800 	call	4280 <memcpy>
      ptr   += n;
    27c4:	e0fffd17 	ldw	r3,-12(fp)
    27c8:	e0bff617 	ldw	r2,-40(fp)
    27cc:	1885883a 	add	r2,r3,r2
    27d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    27d4:	e0fffe17 	ldw	r3,-8(fp)
    27d8:	e0bff617 	ldw	r2,-40(fp)
    27dc:	1885c83a 	sub	r2,r3,r2
    27e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    27e4:	e0fff917 	ldw	r3,-28(fp)
    27e8:	e0bff617 	ldw	r2,-40(fp)
    27ec:	1885883a 	add	r2,r3,r2
    27f0:	10c1ffcc 	andi	r3,r2,2047
    27f4:	e0bffc17 	ldw	r2,-16(fp)
    27f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    27fc:	e0bffe17 	ldw	r2,-8(fp)
    2800:	00bfc716 	blt	zero,r2,2720 <__alt_mem_epcs_flash_controller+0xfdff9720>
    2804:	00000106 	br	280c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    2808:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    280c:	0005303a 	rdctl	r2,status
    2810:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2814:	e0fffb17 	ldw	r3,-20(fp)
    2818:	00bfff84 	movi	r2,-2
    281c:	1884703a 	and	r2,r3,r2
    2820:	1001703a 	wrctl	status,r2
  
  return context;
    2824:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    2828:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    282c:	e0bffc17 	ldw	r2,-16(fp)
    2830:	10800817 	ldw	r2,32(r2)
    2834:	10c00094 	ori	r3,r2,2
    2838:	e0bffc17 	ldw	r2,-16(fp)
    283c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2840:	e0bffc17 	ldw	r2,-16(fp)
    2844:	10800017 	ldw	r2,0(r2)
    2848:	10800104 	addi	r2,r2,4
    284c:	1007883a 	mov	r3,r2
    2850:	e0bffc17 	ldw	r2,-16(fp)
    2854:	10800817 	ldw	r2,32(r2)
    2858:	18800035 	stwio	r2,0(r3)
    285c:	e0bffa17 	ldw	r2,-24(fp)
    2860:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2864:	e0bff817 	ldw	r2,-32(fp)
    2868:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    286c:	e0bffe17 	ldw	r2,-8(fp)
    2870:	0080100e 	bge	zero,r2,28b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    2874:	e0bfff17 	ldw	r2,-4(fp)
    2878:	1090000c 	andi	r2,r2,16384
    287c:	1000101e 	bne	r2,zero,28c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    2880:	0001883a 	nop
    2884:	e0bffc17 	ldw	r2,-16(fp)
    2888:	10c00d17 	ldw	r3,52(r2)
    288c:	e0bff517 	ldw	r2,-44(fp)
    2890:	1880051e 	bne	r3,r2,28a8 <altera_avalon_jtag_uart_write+0x1b8>
    2894:	e0bffc17 	ldw	r2,-16(fp)
    2898:	10c00917 	ldw	r3,36(r2)
    289c:	e0bffc17 	ldw	r2,-16(fp)
    28a0:	10800117 	ldw	r2,4(r2)
    28a4:	18bff736 	bltu	r3,r2,2884 <__alt_mem_epcs_flash_controller+0xfdff9884>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    28a8:	e0bffc17 	ldw	r2,-16(fp)
    28ac:	10800917 	ldw	r2,36(r2)
    28b0:	1000051e 	bne	r2,zero,28c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    28b4:	e0bffe17 	ldw	r2,-8(fp)
    28b8:	00bfd016 	blt	zero,r2,27fc <__alt_mem_epcs_flash_controller+0xfdff97fc>
    28bc:	00000306 	br	28cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    28c0:	0001883a 	nop
    28c4:	00000106 	br	28cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    28c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    28cc:	e0fffd17 	ldw	r3,-12(fp)
    28d0:	e0bff717 	ldw	r2,-36(fp)
    28d4:	18800426 	beq	r3,r2,28e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    28d8:	e0fffd17 	ldw	r3,-12(fp)
    28dc:	e0bff717 	ldw	r2,-36(fp)
    28e0:	1885c83a 	sub	r2,r3,r2
    28e4:	00000606 	br	2900 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    28e8:	e0bfff17 	ldw	r2,-4(fp)
    28ec:	1090000c 	andi	r2,r2,16384
    28f0:	10000226 	beq	r2,zero,28fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    28f4:	00bffd44 	movi	r2,-11
    28f8:	00000106 	br	2900 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    28fc:	00bffec4 	movi	r2,-5
}
    2900:	e037883a 	mov	sp,fp
    2904:	dfc00117 	ldw	ra,4(sp)
    2908:	df000017 	ldw	fp,0(sp)
    290c:	dec00204 	addi	sp,sp,8
    2910:	f800283a 	ret

00002914 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    2914:	defff904 	addi	sp,sp,-28
    2918:	dfc00615 	stw	ra,24(sp)
    291c:	df000515 	stw	fp,20(sp)
    2920:	df000504 	addi	fp,sp,20
    2924:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    2928:	00800144 	movi	r2,5
    292c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    2930:	d8000215 	stw	zero,8(sp)
    2934:	e0bffe44 	addi	r2,fp,-7
    2938:	d8800115 	stw	r2,4(sp)
    293c:	00800044 	movi	r2,1
    2940:	d8800015 	stw	r2,0(sp)
    2944:	e1fffe04 	addi	r7,fp,-8
    2948:	01800044 	movi	r6,1
    294c:	000b883a 	mov	r5,zero
    2950:	e13fff17 	ldw	r4,-4(fp)
    2954:	0003d280 	call	3d28 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    2958:	e0bffe43 	ldbu	r2,-7(fp)
}
    295c:	e037883a 	mov	sp,fp
    2960:	dfc00117 	ldw	ra,4(sp)
    2964:	df000017 	ldw	fp,0(sp)
    2968:	dec00204 	addi	sp,sp,8
    296c:	f800283a 	ret

00002970 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    2970:	defffd04 	addi	sp,sp,-12
    2974:	dfc00215 	stw	ra,8(sp)
    2978:	df000115 	stw	fp,4(sp)
    297c:	df000104 	addi	fp,sp,4
    2980:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    2984:	e13fff17 	ldw	r4,-4(fp)
    2988:	00029140 	call	2914 <epcs_read_status_register>
    298c:	10803fcc 	andi	r2,r2,255
    2990:	1080004c 	andi	r2,r2,1
}
    2994:	e037883a 	mov	sp,fp
    2998:	dfc00117 	ldw	ra,4(sp)
    299c:	df000017 	ldw	fp,0(sp)
    29a0:	dec00204 	addi	sp,sp,8
    29a4:	f800283a 	ret

000029a8 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    29a8:	defffd04 	addi	sp,sp,-12
    29ac:	dfc00215 	stw	ra,8(sp)
    29b0:	df000115 	stw	fp,4(sp)
    29b4:	df000104 	addi	fp,sp,4
    29b8:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    29bc:	0001883a 	nop
    29c0:	e13fff17 	ldw	r4,-4(fp)
    29c4:	00029700 	call	2970 <epcs_test_wip>
    29c8:	103ffd1e 	bne	r2,zero,29c0 <__alt_mem_epcs_flash_controller+0xfdff99c0>
  {
  }
}
    29cc:	0001883a 	nop
    29d0:	e037883a 	mov	sp,fp
    29d4:	dfc00117 	ldw	ra,4(sp)
    29d8:	df000017 	ldw	fp,0(sp)
    29dc:	dec00204 	addi	sp,sp,8
    29e0:	f800283a 	ret

000029e4 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    29e4:	defff604 	addi	sp,sp,-40
    29e8:	dfc00915 	stw	ra,36(sp)
    29ec:	df000815 	stw	fp,32(sp)
    29f0:	df000804 	addi	fp,sp,32
    29f4:	e13ffd15 	stw	r4,-12(fp)
    29f8:	e17ffe15 	stw	r5,-8(fp)
    29fc:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    2a00:	e0bfff17 	ldw	r2,-4(fp)
    2a04:	10001226 	beq	r2,zero,2a50 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    2a08:	00bff604 	movi	r2,-40
    2a0c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    2a10:	e0bffe17 	ldw	r2,-8(fp)
    2a14:	1004d63a 	srli	r2,r2,24
    2a18:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    2a1c:	e0bffe17 	ldw	r2,-8(fp)
    2a20:	1004d43a 	srli	r2,r2,16
    2a24:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    2a28:	e0bffe17 	ldw	r2,-8(fp)
    2a2c:	1004d23a 	srli	r2,r2,8
    2a30:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    2a34:	e0bffe17 	ldw	r2,-8(fp)
    2a38:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    2a3c:	00800144 	movi	r2,5
    2a40:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    2a44:	e13ffd17 	ldw	r4,-12(fp)
    2a48:	0002e980 	call	2e98 <epcs_enter_4_bytes_mode>
    2a4c:	00000c06 	br	2a80 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
    2a50:	00bff604 	movi	r2,-40
    2a54:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    2a58:	e0bffe17 	ldw	r2,-8(fp)
    2a5c:	1004d43a 	srli	r2,r2,16
    2a60:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    2a64:	e0bffe17 	ldw	r2,-8(fp)
    2a68:	1004d23a 	srli	r2,r2,8
    2a6c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    2a70:	e0bffe17 	ldw	r2,-8(fp)
    2a74:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    2a78:	00800104 	movi	r2,4
    2a7c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    2a80:	e13ffd17 	ldw	r4,-12(fp)
    2a84:	0002bd40 	call	2bd4 <epcs_write_enable>

  alt_avalon_spi_command(
    2a88:	e0bffb03 	ldbu	r2,-20(fp)
    2a8c:	e0fffb44 	addi	r3,fp,-19
    2a90:	d8000215 	stw	zero,8(sp)
    2a94:	d8000115 	stw	zero,4(sp)
    2a98:	d8000015 	stw	zero,0(sp)
    2a9c:	180f883a 	mov	r7,r3
    2aa0:	100d883a 	mov	r6,r2
    2aa4:	000b883a 	mov	r5,zero
    2aa8:	e13ffd17 	ldw	r4,-12(fp)
    2aac:	0003d280 	call	3d28 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    2ab0:	e13ffd17 	ldw	r4,-12(fp)
    2ab4:	00029a80 	call	29a8 <epcs_await_wip_released>

  if(four_bytes_mode)
    2ab8:	e0bfff17 	ldw	r2,-4(fp)
    2abc:	10000226 	beq	r2,zero,2ac8 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    2ac0:	e13ffd17 	ldw	r4,-12(fp)
    2ac4:	0002ef40 	call	2ef4 <epcs_exit_4_bytes_mode>
  }
}
    2ac8:	0001883a 	nop
    2acc:	e037883a 	mov	sp,fp
    2ad0:	dfc00117 	ldw	ra,4(sp)
    2ad4:	df000017 	ldw	fp,0(sp)
    2ad8:	dec00204 	addi	sp,sp,8
    2adc:	f800283a 	ret

00002ae0 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    2ae0:	defff404 	addi	sp,sp,-48
    2ae4:	dfc00b15 	stw	ra,44(sp)
    2ae8:	df000a15 	stw	fp,40(sp)
    2aec:	df000a04 	addi	fp,sp,40
    2af0:	e13ffc15 	stw	r4,-16(fp)
    2af4:	e17ffd15 	stw	r5,-12(fp)
    2af8:	e1bffe15 	stw	r6,-8(fp)
    2afc:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    2b00:	008000c4 	movi	r2,3
    2b04:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    2b08:	e0800217 	ldw	r2,8(fp)
    2b0c:	10001026 	beq	r2,zero,2b50 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    2b10:	e0bffd17 	ldw	r2,-12(fp)
    2b14:	1004d63a 	srli	r2,r2,24
    2b18:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    2b1c:	e0bffd17 	ldw	r2,-12(fp)
    2b20:	1005d43a 	srai	r2,r2,16
    2b24:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    2b28:	e0bffd17 	ldw	r2,-12(fp)
    2b2c:	1005d23a 	srai	r2,r2,8
    2b30:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    2b34:	e0bffd17 	ldw	r2,-12(fp)
    2b38:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    2b3c:	00800144 	movi	r2,5
    2b40:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    2b44:	e13ffc17 	ldw	r4,-16(fp)
    2b48:	0002e980 	call	2e98 <epcs_enter_4_bytes_mode>
    2b4c:	00000a06 	br	2b78 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    2b50:	e0bffd17 	ldw	r2,-12(fp)
    2b54:	1005d43a 	srai	r2,r2,16
    2b58:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    2b5c:	e0bffd17 	ldw	r2,-12(fp)
    2b60:	1005d23a 	srai	r2,r2,8
    2b64:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    2b68:	e0bffd17 	ldw	r2,-12(fp)
    2b6c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    2b70:	00800104 	movi	r2,4
    2b74:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    2b78:	e13ffc17 	ldw	r4,-16(fp)
    2b7c:	00029a80 	call	29a8 <epcs_await_wip_released>

  alt_avalon_spi_command(
    2b80:	e0bfff17 	ldw	r2,-4(fp)
    2b84:	e13ffa04 	addi	r4,fp,-24
    2b88:	d8000215 	stw	zero,8(sp)
    2b8c:	e0fffe17 	ldw	r3,-8(fp)
    2b90:	d8c00115 	stw	r3,4(sp)
    2b94:	d8800015 	stw	r2,0(sp)
    2b98:	200f883a 	mov	r7,r4
    2b9c:	e1bff917 	ldw	r6,-28(fp)
    2ba0:	000b883a 	mov	r5,zero
    2ba4:	e13ffc17 	ldw	r4,-16(fp)
    2ba8:	0003d280 	call	3d28 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    2bac:	e0800217 	ldw	r2,8(fp)
    2bb0:	10000226 	beq	r2,zero,2bbc <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
    2bb4:	e13ffc17 	ldw	r4,-16(fp)
    2bb8:	0002ef40 	call	2ef4 <epcs_exit_4_bytes_mode>
  }

  return length;
    2bbc:	e0bfff17 	ldw	r2,-4(fp)
}
    2bc0:	e037883a 	mov	sp,fp
    2bc4:	dfc00117 	ldw	ra,4(sp)
    2bc8:	df000017 	ldw	fp,0(sp)
    2bcc:	dec00204 	addi	sp,sp,8
    2bd0:	f800283a 	ret

00002bd4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    2bd4:	defff904 	addi	sp,sp,-28
    2bd8:	dfc00615 	stw	ra,24(sp)
    2bdc:	df000515 	stw	fp,20(sp)
    2be0:	df000504 	addi	fp,sp,20
    2be4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    2be8:	00800184 	movi	r2,6
    2bec:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    2bf0:	d8000215 	stw	zero,8(sp)
    2bf4:	d8000115 	stw	zero,4(sp)
    2bf8:	d8000015 	stw	zero,0(sp)
    2bfc:	e1fffe04 	addi	r7,fp,-8
    2c00:	01800044 	movi	r6,1
    2c04:	000b883a 	mov	r5,zero
    2c08:	e13fff17 	ldw	r4,-4(fp)
    2c0c:	0003d280 	call	3d28 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    2c10:	0001883a 	nop
    2c14:	e037883a 	mov	sp,fp
    2c18:	dfc00117 	ldw	ra,4(sp)
    2c1c:	df000017 	ldw	fp,0(sp)
    2c20:	dec00204 	addi	sp,sp,8
    2c24:	f800283a 	ret

00002c28 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    2c28:	defff804 	addi	sp,sp,-32
    2c2c:	dfc00715 	stw	ra,28(sp)
    2c30:	df000615 	stw	fp,24(sp)
    2c34:	df000604 	addi	fp,sp,24
    2c38:	e13ffe15 	stw	r4,-8(fp)
    2c3c:	2805883a 	mov	r2,r5
    2c40:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    2c44:	00800044 	movi	r2,1
    2c48:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    2c4c:	e0bfff03 	ldbu	r2,-4(fp)
    2c50:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    2c54:	d8000215 	stw	zero,8(sp)
    2c58:	d8000115 	stw	zero,4(sp)
    2c5c:	d8000015 	stw	zero,0(sp)
    2c60:	e1fffd04 	addi	r7,fp,-12
    2c64:	01800084 	movi	r6,2
    2c68:	000b883a 	mov	r5,zero
    2c6c:	e13ffe17 	ldw	r4,-8(fp)
    2c70:	0003d280 	call	3d28 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    2c74:	e13ffe17 	ldw	r4,-8(fp)
    2c78:	00029a80 	call	29a8 <epcs_await_wip_released>
}
    2c7c:	0001883a 	nop
    2c80:	e037883a 	mov	sp,fp
    2c84:	dfc00117 	ldw	ra,4(sp)
    2c88:	df000017 	ldw	fp,0(sp)
    2c8c:	dec00204 	addi	sp,sp,8
    2c90:	f800283a 	ret

00002c94 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    2c94:	defff404 	addi	sp,sp,-48
    2c98:	dfc00b15 	stw	ra,44(sp)
    2c9c:	df000a15 	stw	fp,40(sp)
    2ca0:	df000a04 	addi	fp,sp,40
    2ca4:	e13ffc15 	stw	r4,-16(fp)
    2ca8:	e17ffd15 	stw	r5,-12(fp)
    2cac:	e1bffe15 	stw	r6,-8(fp)
    2cb0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    2cb4:	00800084 	movi	r2,2
    2cb8:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    2cbc:	e0800217 	ldw	r2,8(fp)
    2cc0:	10001026 	beq	r2,zero,2d04 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
    2cc4:	e0bffd17 	ldw	r2,-12(fp)
    2cc8:	1004d63a 	srli	r2,r2,24
    2ccc:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    2cd0:	e0bffd17 	ldw	r2,-12(fp)
    2cd4:	1005d43a 	srai	r2,r2,16
    2cd8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    2cdc:	e0bffd17 	ldw	r2,-12(fp)
    2ce0:	1005d23a 	srai	r2,r2,8
    2ce4:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    2ce8:	e0bffd17 	ldw	r2,-12(fp)
    2cec:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    2cf0:	00800144 	movi	r2,5
    2cf4:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    2cf8:	e13ffc17 	ldw	r4,-16(fp)
    2cfc:	0002e980 	call	2e98 <epcs_enter_4_bytes_mode>
    2d00:	00000a06 	br	2d2c <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    2d04:	e0bffd17 	ldw	r2,-12(fp)
    2d08:	1005d43a 	srai	r2,r2,16
    2d0c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    2d10:	e0bffd17 	ldw	r2,-12(fp)
    2d14:	1005d23a 	srai	r2,r2,8
    2d18:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    2d1c:	e0bffd17 	ldw	r2,-12(fp)
    2d20:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    2d24:	00800104 	movi	r2,4
    2d28:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    2d2c:	e13ffc17 	ldw	r4,-16(fp)
    2d30:	0002bd40 	call	2bd4 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    2d34:	e0fffa04 	addi	r3,fp,-24
    2d38:	00800044 	movi	r2,1
    2d3c:	d8800215 	stw	r2,8(sp)
    2d40:	d8000115 	stw	zero,4(sp)
    2d44:	d8000015 	stw	zero,0(sp)
    2d48:	180f883a 	mov	r7,r3
    2d4c:	e1bff917 	ldw	r6,-28(fp)
    2d50:	000b883a 	mov	r5,zero
    2d54:	e13ffc17 	ldw	r4,-16(fp)
    2d58:	0003d280 	call	3d28 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    2d5c:	e0bfff17 	ldw	r2,-4(fp)
    2d60:	d8000215 	stw	zero,8(sp)
    2d64:	d8000115 	stw	zero,4(sp)
    2d68:	d8000015 	stw	zero,0(sp)
    2d6c:	e1fffe17 	ldw	r7,-8(fp)
    2d70:	100d883a 	mov	r6,r2
    2d74:	000b883a 	mov	r5,zero
    2d78:	e13ffc17 	ldw	r4,-16(fp)
    2d7c:	0003d280 	call	3d28 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    2d80:	e13ffc17 	ldw	r4,-16(fp)
    2d84:	00029a80 	call	29a8 <epcs_await_wip_released>

  if(four_bytes_mode)
    2d88:	e0800217 	ldw	r2,8(fp)
    2d8c:	10000226 	beq	r2,zero,2d98 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
    2d90:	e13ffc17 	ldw	r4,-16(fp)
    2d94:	0002ef40 	call	2ef4 <epcs_exit_4_bytes_mode>
  }

  return length;
    2d98:	e0bfff17 	ldw	r2,-4(fp)
}
    2d9c:	e037883a 	mov	sp,fp
    2da0:	dfc00117 	ldw	ra,4(sp)
    2da4:	df000017 	ldw	fp,0(sp)
    2da8:	dec00204 	addi	sp,sp,8
    2dac:	f800283a 	ret

00002db0 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    2db0:	defff804 	addi	sp,sp,-32
    2db4:	dfc00715 	stw	ra,28(sp)
    2db8:	df000615 	stw	fp,24(sp)
    2dbc:	df000604 	addi	fp,sp,24
    2dc0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    2dc4:	00bfeac4 	movi	r2,-85
    2dc8:	e0bffd05 	stb	r2,-12(fp)
    2dcc:	e03ffd45 	stb	zero,-11(fp)
    2dd0:	e03ffd85 	stb	zero,-10(fp)
    2dd4:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    2dd8:	d8000215 	stw	zero,8(sp)
    2ddc:	e0bffe04 	addi	r2,fp,-8
    2de0:	d8800115 	stw	r2,4(sp)
    2de4:	00800044 	movi	r2,1
    2de8:	d8800015 	stw	r2,0(sp)
    2dec:	e1fffd04 	addi	r7,fp,-12
    2df0:	01800104 	movi	r6,4
    2df4:	000b883a 	mov	r5,zero
    2df8:	e13fff17 	ldw	r4,-4(fp)
    2dfc:	0003d280 	call	3d28 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    2e00:	e0bffe03 	ldbu	r2,-8(fp)
}
    2e04:	e037883a 	mov	sp,fp
    2e08:	dfc00117 	ldw	ra,4(sp)
    2e0c:	df000017 	ldw	fp,0(sp)
    2e10:	dec00204 	addi	sp,sp,8
    2e14:	f800283a 	ret

00002e18 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    2e18:	defff904 	addi	sp,sp,-28
    2e1c:	dfc00615 	stw	ra,24(sp)
    2e20:	df000515 	stw	fp,20(sp)
    2e24:	df000504 	addi	fp,sp,20
    2e28:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    2e2c:	00bfe7c4 	movi	r2,-97
    2e30:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    2e34:	d8000215 	stw	zero,8(sp)
    2e38:	e0bffe44 	addi	r2,fp,-7
    2e3c:	d8800115 	stw	r2,4(sp)
    2e40:	008000c4 	movi	r2,3
    2e44:	d8800015 	stw	r2,0(sp)
    2e48:	e1fffe04 	addi	r7,fp,-8
    2e4c:	01800044 	movi	r6,1
    2e50:	000b883a 	mov	r5,zero
    2e54:	e13fff17 	ldw	r4,-4(fp)
    2e58:	0003d280 	call	3d28 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    2e5c:	e0bffe43 	ldbu	r2,-7(fp)
    2e60:	10803fcc 	andi	r2,r2,255
    2e64:	1006943a 	slli	r3,r2,16
    2e68:	e0bffe83 	ldbu	r2,-6(fp)
    2e6c:	10803fcc 	andi	r2,r2,255
    2e70:	1004923a 	slli	r2,r2,8
    2e74:	1886b03a 	or	r3,r3,r2
    2e78:	e0bffec3 	ldbu	r2,-5(fp)
    2e7c:	10803fcc 	andi	r2,r2,255
    2e80:	1884b03a 	or	r2,r3,r2
}
    2e84:	e037883a 	mov	sp,fp
    2e88:	dfc00117 	ldw	ra,4(sp)
    2e8c:	df000017 	ldw	fp,0(sp)
    2e90:	dec00204 	addi	sp,sp,8
    2e94:	f800283a 	ret

00002e98 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    2e98:	defff904 	addi	sp,sp,-28
    2e9c:	dfc00615 	stw	ra,24(sp)
    2ea0:	df000515 	stw	fp,20(sp)
    2ea4:	df000504 	addi	fp,sp,20
    2ea8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    2eac:	00bfedc4 	movi	r2,-73
    2eb0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    2eb4:	e13fff17 	ldw	r4,-4(fp)
    2eb8:	0002bd40 	call	2bd4 <epcs_write_enable>

  alt_avalon_spi_command(
    2ebc:	d8000215 	stw	zero,8(sp)
    2ec0:	d8000115 	stw	zero,4(sp)
    2ec4:	d8000015 	stw	zero,0(sp)
    2ec8:	e1fffe04 	addi	r7,fp,-8
    2ecc:	01800044 	movi	r6,1
    2ed0:	000b883a 	mov	r5,zero
    2ed4:	e13fff17 	ldw	r4,-4(fp)
    2ed8:	0003d280 	call	3d28 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    2edc:	0001883a 	nop
}
    2ee0:	e037883a 	mov	sp,fp
    2ee4:	dfc00117 	ldw	ra,4(sp)
    2ee8:	df000017 	ldw	fp,0(sp)
    2eec:	dec00204 	addi	sp,sp,8
    2ef0:	f800283a 	ret

00002ef4 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    2ef4:	defff904 	addi	sp,sp,-28
    2ef8:	dfc00615 	stw	ra,24(sp)
    2efc:	df000515 	stw	fp,20(sp)
    2f00:	df000504 	addi	fp,sp,20
    2f04:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    2f08:	00bffa44 	movi	r2,-23
    2f0c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    2f10:	e13fff17 	ldw	r4,-4(fp)
    2f14:	0002bd40 	call	2bd4 <epcs_write_enable>

  alt_avalon_spi_command(
    2f18:	d8000215 	stw	zero,8(sp)
    2f1c:	d8000115 	stw	zero,4(sp)
    2f20:	d8000015 	stw	zero,0(sp)
    2f24:	e1fffe04 	addi	r7,fp,-8
    2f28:	01800044 	movi	r6,1
    2f2c:	000b883a 	mov	r5,zero
    2f30:	e13fff17 	ldw	r4,-4(fp)
    2f34:	0003d280 	call	3d28 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    2f38:	0001883a 	nop
}
    2f3c:	e037883a 	mov	sp,fp
    2f40:	dfc00117 	ldw	ra,4(sp)
    2f44:	df000017 	ldw	fp,0(sp)
    2f48:	dec00204 	addi	sp,sp,8
    2f4c:	f800283a 	ret

00002f50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    2f50:	defff504 	addi	sp,sp,-44
    2f54:	df000a15 	stw	fp,40(sp)
    2f58:	df000a04 	addi	fp,sp,40
    2f5c:	e13ffc15 	stw	r4,-16(fp)
    2f60:	e17ffd15 	stw	r5,-12(fp)
    2f64:	e1bffe15 	stw	r6,-8(fp)
    2f68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    2f6c:	e03ff615 	stw	zero,-40(fp)
    2f70:	d0a51017 	ldw	r2,-27584(gp)
  
  if (alt_ticks_per_second ())
    2f74:	10003c26 	beq	r2,zero,3068 <alt_alarm_start+0x118>
  {
    if (alarm)
    2f78:	e0bffc17 	ldw	r2,-16(fp)
    2f7c:	10003826 	beq	r2,zero,3060 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    2f80:	e0bffc17 	ldw	r2,-16(fp)
    2f84:	e0fffe17 	ldw	r3,-8(fp)
    2f88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    2f8c:	e0bffc17 	ldw	r2,-16(fp)
    2f90:	e0ffff17 	ldw	r3,-4(fp)
    2f94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f98:	0005303a 	rdctl	r2,status
    2f9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2fa0:	e0fff917 	ldw	r3,-28(fp)
    2fa4:	00bfff84 	movi	r2,-2
    2fa8:	1884703a 	and	r2,r3,r2
    2fac:	1001703a 	wrctl	status,r2
  
  return context;
    2fb0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    2fb4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2fb8:	d0a51117 	ldw	r2,-27580(gp)
      
      current_nticks = alt_nticks();
    2fbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    2fc0:	e0fffd17 	ldw	r3,-12(fp)
    2fc4:	e0bff617 	ldw	r2,-40(fp)
    2fc8:	1885883a 	add	r2,r3,r2
    2fcc:	10c00044 	addi	r3,r2,1
    2fd0:	e0bffc17 	ldw	r2,-16(fp)
    2fd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2fd8:	e0bffc17 	ldw	r2,-16(fp)
    2fdc:	10c00217 	ldw	r3,8(r2)
    2fe0:	e0bff617 	ldw	r2,-40(fp)
    2fe4:	1880042e 	bgeu	r3,r2,2ff8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    2fe8:	e0bffc17 	ldw	r2,-16(fp)
    2fec:	00c00044 	movi	r3,1
    2ff0:	10c00405 	stb	r3,16(r2)
    2ff4:	00000206 	br	3000 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    2ff8:	e0bffc17 	ldw	r2,-16(fp)
    2ffc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    3000:	e0bffc17 	ldw	r2,-16(fp)
    3004:	d0e00c04 	addi	r3,gp,-32720
    3008:	e0fffa15 	stw	r3,-24(fp)
    300c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3010:	e0bffb17 	ldw	r2,-20(fp)
    3014:	e0fffa17 	ldw	r3,-24(fp)
    3018:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    301c:	e0bffa17 	ldw	r2,-24(fp)
    3020:	10c00017 	ldw	r3,0(r2)
    3024:	e0bffb17 	ldw	r2,-20(fp)
    3028:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    302c:	e0bffa17 	ldw	r2,-24(fp)
    3030:	10800017 	ldw	r2,0(r2)
    3034:	e0fffb17 	ldw	r3,-20(fp)
    3038:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    303c:	e0bffa17 	ldw	r2,-24(fp)
    3040:	e0fffb17 	ldw	r3,-20(fp)
    3044:	10c00015 	stw	r3,0(r2)
    3048:	e0bff817 	ldw	r2,-32(fp)
    304c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3050:	e0bff717 	ldw	r2,-36(fp)
    3054:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    3058:	0005883a 	mov	r2,zero
    305c:	00000306 	br	306c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    3060:	00bffa84 	movi	r2,-22
    3064:	00000106 	br	306c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    3068:	00bfde84 	movi	r2,-134
  }
}
    306c:	e037883a 	mov	sp,fp
    3070:	df000017 	ldw	fp,0(sp)
    3074:	dec00104 	addi	sp,sp,4
    3078:	f800283a 	ret

0000307c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    307c:	defffe04 	addi	sp,sp,-8
    3080:	dfc00115 	stw	ra,4(sp)
    3084:	df000015 	stw	fp,0(sp)
    3088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    308c:	d0a00817 	ldw	r2,-32736(gp)
    3090:	10000326 	beq	r2,zero,30a0 <alt_get_errno+0x24>
    3094:	d0a00817 	ldw	r2,-32736(gp)
    3098:	103ee83a 	callr	r2
    309c:	00000106 	br	30a4 <alt_get_errno+0x28>
    30a0:	d0a50b04 	addi	r2,gp,-27604
}
    30a4:	e037883a 	mov	sp,fp
    30a8:	dfc00117 	ldw	ra,4(sp)
    30ac:	df000017 	ldw	fp,0(sp)
    30b0:	dec00204 	addi	sp,sp,8
    30b4:	f800283a 	ret

000030b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    30b8:	defffb04 	addi	sp,sp,-20
    30bc:	dfc00415 	stw	ra,16(sp)
    30c0:	df000315 	stw	fp,12(sp)
    30c4:	df000304 	addi	fp,sp,12
    30c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    30cc:	e0bfff17 	ldw	r2,-4(fp)
    30d0:	10000816 	blt	r2,zero,30f4 <close+0x3c>
    30d4:	01400304 	movi	r5,12
    30d8:	e13fff17 	ldw	r4,-4(fp)
    30dc:	0000f700 	call	f70 <__mulsi3>
    30e0:	1007883a 	mov	r3,r2
    30e4:	00800034 	movhi	r2,0
    30e8:	10962904 	addi	r2,r2,22692
    30ec:	1885883a 	add	r2,r3,r2
    30f0:	00000106 	br	30f8 <close+0x40>
    30f4:	0005883a 	mov	r2,zero
    30f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    30fc:	e0bffd17 	ldw	r2,-12(fp)
    3100:	10001926 	beq	r2,zero,3168 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3104:	e0bffd17 	ldw	r2,-12(fp)
    3108:	10800017 	ldw	r2,0(r2)
    310c:	10800417 	ldw	r2,16(r2)
    3110:	10000626 	beq	r2,zero,312c <close+0x74>
    3114:	e0bffd17 	ldw	r2,-12(fp)
    3118:	10800017 	ldw	r2,0(r2)
    311c:	10800417 	ldw	r2,16(r2)
    3120:	e13ffd17 	ldw	r4,-12(fp)
    3124:	103ee83a 	callr	r2
    3128:	00000106 	br	3130 <close+0x78>
    312c:	0005883a 	mov	r2,zero
    3130:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3134:	e13fff17 	ldw	r4,-4(fp)
    3138:	0003adc0 	call	3adc <alt_release_fd>
    if (rval < 0)
    313c:	e0bffe17 	ldw	r2,-8(fp)
    3140:	1000070e 	bge	r2,zero,3160 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    3144:	000307c0 	call	307c <alt_get_errno>
    3148:	1007883a 	mov	r3,r2
    314c:	e0bffe17 	ldw	r2,-8(fp)
    3150:	0085c83a 	sub	r2,zero,r2
    3154:	18800015 	stw	r2,0(r3)
      return -1;
    3158:	00bfffc4 	movi	r2,-1
    315c:	00000706 	br	317c <close+0xc4>
    }
    return 0;
    3160:	0005883a 	mov	r2,zero
    3164:	00000506 	br	317c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3168:	000307c0 	call	307c <alt_get_errno>
    316c:	1007883a 	mov	r3,r2
    3170:	00801444 	movi	r2,81
    3174:	18800015 	stw	r2,0(r3)
    return -1;
    3178:	00bfffc4 	movi	r2,-1
  }
}
    317c:	e037883a 	mov	sp,fp
    3180:	dfc00117 	ldw	ra,4(sp)
    3184:	df000017 	ldw	fp,0(sp)
    3188:	dec00204 	addi	sp,sp,8
    318c:	f800283a 	ret

00003190 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    3190:	deffff04 	addi	sp,sp,-4
    3194:	df000015 	stw	fp,0(sp)
    3198:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    319c:	0001883a 	nop
    31a0:	e037883a 	mov	sp,fp
    31a4:	df000017 	ldw	fp,0(sp)
    31a8:	dec00104 	addi	sp,sp,4
    31ac:	f800283a 	ret

000031b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    31b0:	defffc04 	addi	sp,sp,-16
    31b4:	df000315 	stw	fp,12(sp)
    31b8:	df000304 	addi	fp,sp,12
    31bc:	e13ffd15 	stw	r4,-12(fp)
    31c0:	e17ffe15 	stw	r5,-8(fp)
    31c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    31c8:	e0bfff17 	ldw	r2,-4(fp)
}
    31cc:	e037883a 	mov	sp,fp
    31d0:	df000017 	ldw	fp,0(sp)
    31d4:	dec00104 	addi	sp,sp,4
    31d8:	f800283a 	ret

000031dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    31dc:	defffe04 	addi	sp,sp,-8
    31e0:	dfc00115 	stw	ra,4(sp)
    31e4:	df000015 	stw	fp,0(sp)
    31e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    31ec:	d0a00817 	ldw	r2,-32736(gp)
    31f0:	10000326 	beq	r2,zero,3200 <alt_get_errno+0x24>
    31f4:	d0a00817 	ldw	r2,-32736(gp)
    31f8:	103ee83a 	callr	r2
    31fc:	00000106 	br	3204 <alt_get_errno+0x28>
    3200:	d0a50b04 	addi	r2,gp,-27604
}
    3204:	e037883a 	mov	sp,fp
    3208:	dfc00117 	ldw	ra,4(sp)
    320c:	df000017 	ldw	fp,0(sp)
    3210:	dec00204 	addi	sp,sp,8
    3214:	f800283a 	ret

00003218 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    3218:	defffa04 	addi	sp,sp,-24
    321c:	dfc00515 	stw	ra,20(sp)
    3220:	df000415 	stw	fp,16(sp)
    3224:	df000404 	addi	fp,sp,16
    3228:	e13ffe15 	stw	r4,-8(fp)
    322c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    3230:	e0bffe17 	ldw	r2,-8(fp)
    3234:	10000326 	beq	r2,zero,3244 <alt_dev_llist_insert+0x2c>
    3238:	e0bffe17 	ldw	r2,-8(fp)
    323c:	10800217 	ldw	r2,8(r2)
    3240:	1000061e 	bne	r2,zero,325c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    3244:	00031dc0 	call	31dc <alt_get_errno>
    3248:	1007883a 	mov	r3,r2
    324c:	00800584 	movi	r2,22
    3250:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    3254:	00bffa84 	movi	r2,-22
    3258:	00001306 	br	32a8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    325c:	e0bffe17 	ldw	r2,-8(fp)
    3260:	e0ffff17 	ldw	r3,-4(fp)
    3264:	e0fffc15 	stw	r3,-16(fp)
    3268:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    326c:	e0bffd17 	ldw	r2,-12(fp)
    3270:	e0fffc17 	ldw	r3,-16(fp)
    3274:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    3278:	e0bffc17 	ldw	r2,-16(fp)
    327c:	10c00017 	ldw	r3,0(r2)
    3280:	e0bffd17 	ldw	r2,-12(fp)
    3284:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3288:	e0bffc17 	ldw	r2,-16(fp)
    328c:	10800017 	ldw	r2,0(r2)
    3290:	e0fffd17 	ldw	r3,-12(fp)
    3294:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3298:	e0bffc17 	ldw	r2,-16(fp)
    329c:	e0fffd17 	ldw	r3,-12(fp)
    32a0:	10c00015 	stw	r3,0(r2)

  return 0;  
    32a4:	0005883a 	mov	r2,zero
}
    32a8:	e037883a 	mov	sp,fp
    32ac:	dfc00117 	ldw	ra,4(sp)
    32b0:	df000017 	ldw	fp,0(sp)
    32b4:	dec00204 	addi	sp,sp,8
    32b8:	f800283a 	ret

000032bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    32bc:	defffd04 	addi	sp,sp,-12
    32c0:	dfc00215 	stw	ra,8(sp)
    32c4:	df000115 	stw	fp,4(sp)
    32c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    32cc:	00800034 	movhi	r2,0
    32d0:	10917004 	addi	r2,r2,17856
    32d4:	e0bfff15 	stw	r2,-4(fp)
    32d8:	00000606 	br	32f4 <_do_ctors+0x38>
        (*ctor) (); 
    32dc:	e0bfff17 	ldw	r2,-4(fp)
    32e0:	10800017 	ldw	r2,0(r2)
    32e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    32e8:	e0bfff17 	ldw	r2,-4(fp)
    32ec:	10bfff04 	addi	r2,r2,-4
    32f0:	e0bfff15 	stw	r2,-4(fp)
    32f4:	e0ffff17 	ldw	r3,-4(fp)
    32f8:	00800034 	movhi	r2,0
    32fc:	10917104 	addi	r2,r2,17860
    3300:	18bff62e 	bgeu	r3,r2,32dc <__alt_mem_epcs_flash_controller+0xfdffa2dc>
        (*ctor) (); 
}
    3304:	0001883a 	nop
    3308:	e037883a 	mov	sp,fp
    330c:	dfc00117 	ldw	ra,4(sp)
    3310:	df000017 	ldw	fp,0(sp)
    3314:	dec00204 	addi	sp,sp,8
    3318:	f800283a 	ret

0000331c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    331c:	defffd04 	addi	sp,sp,-12
    3320:	dfc00215 	stw	ra,8(sp)
    3324:	df000115 	stw	fp,4(sp)
    3328:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    332c:	00800034 	movhi	r2,0
    3330:	10917004 	addi	r2,r2,17856
    3334:	e0bfff15 	stw	r2,-4(fp)
    3338:	00000606 	br	3354 <_do_dtors+0x38>
        (*dtor) (); 
    333c:	e0bfff17 	ldw	r2,-4(fp)
    3340:	10800017 	ldw	r2,0(r2)
    3344:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3348:	e0bfff17 	ldw	r2,-4(fp)
    334c:	10bfff04 	addi	r2,r2,-4
    3350:	e0bfff15 	stw	r2,-4(fp)
    3354:	e0ffff17 	ldw	r3,-4(fp)
    3358:	00800034 	movhi	r2,0
    335c:	10917104 	addi	r2,r2,17860
    3360:	18bff62e 	bgeu	r3,r2,333c <__alt_mem_epcs_flash_controller+0xfdffa33c>
        (*dtor) (); 
}
    3364:	0001883a 	nop
    3368:	e037883a 	mov	sp,fp
    336c:	dfc00117 	ldw	ra,4(sp)
    3370:	df000017 	ldw	fp,0(sp)
    3374:	dec00204 	addi	sp,sp,8
    3378:	f800283a 	ret

0000337c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    337c:	defffc04 	addi	sp,sp,-16
    3380:	dfc00315 	stw	ra,12(sp)
    3384:	df000215 	stw	fp,8(sp)
    3388:	df000204 	addi	fp,sp,8
    338c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    3390:	d1600904 	addi	r5,gp,-32732
    3394:	e13fff17 	ldw	r4,-4(fp)
    3398:	0003f240 	call	3f24 <alt_find_dev>
    339c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
    33a0:	e0bffe17 	ldw	r2,-8(fp)
    33a4:	10000926 	beq	r2,zero,33cc <alt_flash_open_dev+0x50>
    33a8:	e0bffe17 	ldw	r2,-8(fp)
    33ac:	10800317 	ldw	r2,12(r2)
    33b0:	10000626 	beq	r2,zero,33cc <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
    33b4:	e0bffe17 	ldw	r2,-8(fp)
    33b8:	10800317 	ldw	r2,12(r2)
    33bc:	e17fff17 	ldw	r5,-4(fp)
    33c0:	e13ffe17 	ldw	r4,-8(fp)
    33c4:	103ee83a 	callr	r2
    33c8:	00000106 	br	33d0 <alt_flash_open_dev+0x54>
  }

  return dev;
    33cc:	e0bffe17 	ldw	r2,-8(fp)
}
    33d0:	e037883a 	mov	sp,fp
    33d4:	dfc00117 	ldw	ra,4(sp)
    33d8:	df000017 	ldw	fp,0(sp)
    33dc:	dec00204 	addi	sp,sp,8
    33e0:	f800283a 	ret

000033e4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    33e4:	defffd04 	addi	sp,sp,-12
    33e8:	dfc00215 	stw	ra,8(sp)
    33ec:	df000115 	stw	fp,4(sp)
    33f0:	df000104 	addi	fp,sp,4
    33f4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    33f8:	e0bfff17 	ldw	r2,-4(fp)
    33fc:	10000826 	beq	r2,zero,3420 <alt_flash_close_dev+0x3c>
    3400:	e0bfff17 	ldw	r2,-4(fp)
    3404:	10800417 	ldw	r2,16(r2)
    3408:	10000526 	beq	r2,zero,3420 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
    340c:	e0bfff17 	ldw	r2,-4(fp)
    3410:	10800417 	ldw	r2,16(r2)
    3414:	e13fff17 	ldw	r4,-4(fp)
    3418:	103ee83a 	callr	r2
  }
  return;
    341c:	0001883a 	nop
    3420:	0001883a 	nop
}
    3424:	e037883a 	mov	sp,fp
    3428:	dfc00117 	ldw	ra,4(sp)
    342c:	df000017 	ldw	fp,0(sp)
    3430:	dec00204 	addi	sp,sp,8
    3434:	f800283a 	ret

00003438 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    3438:	deffff04 	addi	sp,sp,-4
    343c:	df000015 	stw	fp,0(sp)
    3440:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    3444:	0001883a 	nop
    3448:	e037883a 	mov	sp,fp
    344c:	df000017 	ldw	fp,0(sp)
    3450:	dec00104 	addi	sp,sp,4
    3454:	f800283a 	ret

00003458 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    3458:	defff904 	addi	sp,sp,-28
    345c:	dfc00615 	stw	ra,24(sp)
    3460:	df000515 	stw	fp,20(sp)
    3464:	df000504 	addi	fp,sp,20
    3468:	e13ffc15 	stw	r4,-16(fp)
    346c:	e17ffd15 	stw	r5,-12(fp)
    3470:	e1bffe15 	stw	r6,-8(fp)
    3474:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    3478:	e0800217 	ldw	r2,8(fp)
    347c:	d8800015 	stw	r2,0(sp)
    3480:	e1ffff17 	ldw	r7,-4(fp)
    3484:	e1bffe17 	ldw	r6,-8(fp)
    3488:	e17ffd17 	ldw	r5,-12(fp)
    348c:	e13ffc17 	ldw	r4,-16(fp)
    3490:	00036080 	call	3608 <alt_iic_isr_register>
}  
    3494:	e037883a 	mov	sp,fp
    3498:	dfc00117 	ldw	ra,4(sp)
    349c:	df000017 	ldw	fp,0(sp)
    34a0:	dec00204 	addi	sp,sp,8
    34a4:	f800283a 	ret

000034a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    34a8:	defff904 	addi	sp,sp,-28
    34ac:	df000615 	stw	fp,24(sp)
    34b0:	df000604 	addi	fp,sp,24
    34b4:	e13ffe15 	stw	r4,-8(fp)
    34b8:	e17fff15 	stw	r5,-4(fp)
    34bc:	e0bfff17 	ldw	r2,-4(fp)
    34c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    34c4:	0005303a 	rdctl	r2,status
    34c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    34cc:	e0fffb17 	ldw	r3,-20(fp)
    34d0:	00bfff84 	movi	r2,-2
    34d4:	1884703a 	and	r2,r3,r2
    34d8:	1001703a 	wrctl	status,r2
  
  return context;
    34dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    34e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    34e4:	00c00044 	movi	r3,1
    34e8:	e0bffa17 	ldw	r2,-24(fp)
    34ec:	1884983a 	sll	r2,r3,r2
    34f0:	1007883a 	mov	r3,r2
    34f4:	d0a50f17 	ldw	r2,-27588(gp)
    34f8:	1884b03a 	or	r2,r3,r2
    34fc:	d0a50f15 	stw	r2,-27588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    3500:	d0a50f17 	ldw	r2,-27588(gp)
    3504:	100170fa 	wrctl	ienable,r2
    3508:	e0bffc17 	ldw	r2,-16(fp)
    350c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3510:	e0bffd17 	ldw	r2,-12(fp)
    3514:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    3518:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    351c:	0001883a 	nop
}
    3520:	e037883a 	mov	sp,fp
    3524:	df000017 	ldw	fp,0(sp)
    3528:	dec00104 	addi	sp,sp,4
    352c:	f800283a 	ret

00003530 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    3530:	defff904 	addi	sp,sp,-28
    3534:	df000615 	stw	fp,24(sp)
    3538:	df000604 	addi	fp,sp,24
    353c:	e13ffe15 	stw	r4,-8(fp)
    3540:	e17fff15 	stw	r5,-4(fp)
    3544:	e0bfff17 	ldw	r2,-4(fp)
    3548:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    354c:	0005303a 	rdctl	r2,status
    3550:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3554:	e0fffb17 	ldw	r3,-20(fp)
    3558:	00bfff84 	movi	r2,-2
    355c:	1884703a 	and	r2,r3,r2
    3560:	1001703a 	wrctl	status,r2
  
  return context;
    3564:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    3568:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    356c:	00c00044 	movi	r3,1
    3570:	e0bffa17 	ldw	r2,-24(fp)
    3574:	1884983a 	sll	r2,r3,r2
    3578:	0084303a 	nor	r2,zero,r2
    357c:	1007883a 	mov	r3,r2
    3580:	d0a50f17 	ldw	r2,-27588(gp)
    3584:	1884703a 	and	r2,r3,r2
    3588:	d0a50f15 	stw	r2,-27588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    358c:	d0a50f17 	ldw	r2,-27588(gp)
    3590:	100170fa 	wrctl	ienable,r2
    3594:	e0bffc17 	ldw	r2,-16(fp)
    3598:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    359c:	e0bffd17 	ldw	r2,-12(fp)
    35a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    35a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    35a8:	0001883a 	nop
}
    35ac:	e037883a 	mov	sp,fp
    35b0:	df000017 	ldw	fp,0(sp)
    35b4:	dec00104 	addi	sp,sp,4
    35b8:	f800283a 	ret

000035bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    35bc:	defffc04 	addi	sp,sp,-16
    35c0:	df000315 	stw	fp,12(sp)
    35c4:	df000304 	addi	fp,sp,12
    35c8:	e13ffe15 	stw	r4,-8(fp)
    35cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    35d0:	000530fa 	rdctl	r2,ienable
    35d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    35d8:	00c00044 	movi	r3,1
    35dc:	e0bfff17 	ldw	r2,-4(fp)
    35e0:	1884983a 	sll	r2,r3,r2
    35e4:	1007883a 	mov	r3,r2
    35e8:	e0bffd17 	ldw	r2,-12(fp)
    35ec:	1884703a 	and	r2,r3,r2
    35f0:	1004c03a 	cmpne	r2,r2,zero
    35f4:	10803fcc 	andi	r2,r2,255
}
    35f8:	e037883a 	mov	sp,fp
    35fc:	df000017 	ldw	fp,0(sp)
    3600:	dec00104 	addi	sp,sp,4
    3604:	f800283a 	ret

00003608 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    3608:	defff504 	addi	sp,sp,-44
    360c:	dfc00a15 	stw	ra,40(sp)
    3610:	df000915 	stw	fp,36(sp)
    3614:	df000904 	addi	fp,sp,36
    3618:	e13ffc15 	stw	r4,-16(fp)
    361c:	e17ffd15 	stw	r5,-12(fp)
    3620:	e1bffe15 	stw	r6,-8(fp)
    3624:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    3628:	00bffa84 	movi	r2,-22
    362c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    3630:	e0bffd17 	ldw	r2,-12(fp)
    3634:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    3638:	e0bff817 	ldw	r2,-32(fp)
    363c:	10800808 	cmpgei	r2,r2,32
    3640:	1000271e 	bne	r2,zero,36e0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3644:	0005303a 	rdctl	r2,status
    3648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    364c:	e0fffb17 	ldw	r3,-20(fp)
    3650:	00bfff84 	movi	r2,-2
    3654:	1884703a 	and	r2,r3,r2
    3658:	1001703a 	wrctl	status,r2
  
  return context;
    365c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    3660:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    3664:	00800034 	movhi	r2,0
    3668:	109b9c04 	addi	r2,r2,28272
    366c:	e0fff817 	ldw	r3,-32(fp)
    3670:	180690fa 	slli	r3,r3,3
    3674:	10c5883a 	add	r2,r2,r3
    3678:	e0fffe17 	ldw	r3,-8(fp)
    367c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    3680:	00800034 	movhi	r2,0
    3684:	109b9c04 	addi	r2,r2,28272
    3688:	e0fff817 	ldw	r3,-32(fp)
    368c:	180690fa 	slli	r3,r3,3
    3690:	10c5883a 	add	r2,r2,r3
    3694:	10800104 	addi	r2,r2,4
    3698:	e0ffff17 	ldw	r3,-4(fp)
    369c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    36a0:	e0bffe17 	ldw	r2,-8(fp)
    36a4:	10000526 	beq	r2,zero,36bc <alt_iic_isr_register+0xb4>
    36a8:	e0bff817 	ldw	r2,-32(fp)
    36ac:	100b883a 	mov	r5,r2
    36b0:	e13ffc17 	ldw	r4,-16(fp)
    36b4:	00034a80 	call	34a8 <alt_ic_irq_enable>
    36b8:	00000406 	br	36cc <alt_iic_isr_register+0xc4>
    36bc:	e0bff817 	ldw	r2,-32(fp)
    36c0:	100b883a 	mov	r5,r2
    36c4:	e13ffc17 	ldw	r4,-16(fp)
    36c8:	00035300 	call	3530 <alt_ic_irq_disable>
    36cc:	e0bff715 	stw	r2,-36(fp)
    36d0:	e0bffa17 	ldw	r2,-24(fp)
    36d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    36d8:	e0bff917 	ldw	r2,-28(fp)
    36dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    36e0:	e0bff717 	ldw	r2,-36(fp)
}
    36e4:	e037883a 	mov	sp,fp
    36e8:	dfc00117 	ldw	ra,4(sp)
    36ec:	df000017 	ldw	fp,0(sp)
    36f0:	dec00204 	addi	sp,sp,8
    36f4:	f800283a 	ret

000036f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    36f8:	defff804 	addi	sp,sp,-32
    36fc:	dfc00715 	stw	ra,28(sp)
    3700:	df000615 	stw	fp,24(sp)
    3704:	dc000515 	stw	r16,20(sp)
    3708:	df000604 	addi	fp,sp,24
    370c:	e13ffb15 	stw	r4,-20(fp)
    3710:	e17ffc15 	stw	r5,-16(fp)
    3714:	e1bffd15 	stw	r6,-12(fp)
    3718:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    371c:	e1bffe17 	ldw	r6,-8(fp)
    3720:	e17ffd17 	ldw	r5,-12(fp)
    3724:	e13ffc17 	ldw	r4,-16(fp)
    3728:	00039800 	call	3980 <open>
    372c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    3730:	e0bffa17 	ldw	r2,-24(fp)
    3734:	10002216 	blt	r2,zero,37c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    3738:	04000034 	movhi	r16,0
    373c:	84162904 	addi	r16,r16,22692
    3740:	e0bffa17 	ldw	r2,-24(fp)
    3744:	01400304 	movi	r5,12
    3748:	1009883a 	mov	r4,r2
    374c:	0000f700 	call	f70 <__mulsi3>
    3750:	8085883a 	add	r2,r16,r2
    3754:	10c00017 	ldw	r3,0(r2)
    3758:	e0bffb17 	ldw	r2,-20(fp)
    375c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    3760:	04000034 	movhi	r16,0
    3764:	84162904 	addi	r16,r16,22692
    3768:	e0bffa17 	ldw	r2,-24(fp)
    376c:	01400304 	movi	r5,12
    3770:	1009883a 	mov	r4,r2
    3774:	0000f700 	call	f70 <__mulsi3>
    3778:	8085883a 	add	r2,r16,r2
    377c:	10800104 	addi	r2,r2,4
    3780:	10c00017 	ldw	r3,0(r2)
    3784:	e0bffb17 	ldw	r2,-20(fp)
    3788:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    378c:	04000034 	movhi	r16,0
    3790:	84162904 	addi	r16,r16,22692
    3794:	e0bffa17 	ldw	r2,-24(fp)
    3798:	01400304 	movi	r5,12
    379c:	1009883a 	mov	r4,r2
    37a0:	0000f700 	call	f70 <__mulsi3>
    37a4:	8085883a 	add	r2,r16,r2
    37a8:	10800204 	addi	r2,r2,8
    37ac:	10c00017 	ldw	r3,0(r2)
    37b0:	e0bffb17 	ldw	r2,-20(fp)
    37b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    37b8:	e13ffa17 	ldw	r4,-24(fp)
    37bc:	0003adc0 	call	3adc <alt_release_fd>
  }
} 
    37c0:	0001883a 	nop
    37c4:	e6ffff04 	addi	sp,fp,-4
    37c8:	dfc00217 	ldw	ra,8(sp)
    37cc:	df000117 	ldw	fp,4(sp)
    37d0:	dc000017 	ldw	r16,0(sp)
    37d4:	dec00304 	addi	sp,sp,12
    37d8:	f800283a 	ret

000037dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    37dc:	defffb04 	addi	sp,sp,-20
    37e0:	dfc00415 	stw	ra,16(sp)
    37e4:	df000315 	stw	fp,12(sp)
    37e8:	df000304 	addi	fp,sp,12
    37ec:	e13ffd15 	stw	r4,-12(fp)
    37f0:	e17ffe15 	stw	r5,-8(fp)
    37f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    37f8:	01c07fc4 	movi	r7,511
    37fc:	01800044 	movi	r6,1
    3800:	e17ffd17 	ldw	r5,-12(fp)
    3804:	01000034 	movhi	r4,0
    3808:	21162c04 	addi	r4,r4,22704
    380c:	00036f80 	call	36f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    3810:	01c07fc4 	movi	r7,511
    3814:	000d883a 	mov	r6,zero
    3818:	e17ffe17 	ldw	r5,-8(fp)
    381c:	01000034 	movhi	r4,0
    3820:	21162904 	addi	r4,r4,22692
    3824:	00036f80 	call	36f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    3828:	01c07fc4 	movi	r7,511
    382c:	01800044 	movi	r6,1
    3830:	e17fff17 	ldw	r5,-4(fp)
    3834:	01000034 	movhi	r4,0
    3838:	21162f04 	addi	r4,r4,22716
    383c:	00036f80 	call	36f8 <alt_open_fd>
}  
    3840:	0001883a 	nop
    3844:	e037883a 	mov	sp,fp
    3848:	dfc00117 	ldw	ra,4(sp)
    384c:	df000017 	ldw	fp,0(sp)
    3850:	dec00204 	addi	sp,sp,8
    3854:	f800283a 	ret

00003858 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3858:	defffe04 	addi	sp,sp,-8
    385c:	dfc00115 	stw	ra,4(sp)
    3860:	df000015 	stw	fp,0(sp)
    3864:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3868:	d0a00817 	ldw	r2,-32736(gp)
    386c:	10000326 	beq	r2,zero,387c <alt_get_errno+0x24>
    3870:	d0a00817 	ldw	r2,-32736(gp)
    3874:	103ee83a 	callr	r2
    3878:	00000106 	br	3880 <alt_get_errno+0x28>
    387c:	d0a50b04 	addi	r2,gp,-27604
}
    3880:	e037883a 	mov	sp,fp
    3884:	dfc00117 	ldw	ra,4(sp)
    3888:	df000017 	ldw	fp,0(sp)
    388c:	dec00204 	addi	sp,sp,8
    3890:	f800283a 	ret

00003894 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    3894:	defffb04 	addi	sp,sp,-20
    3898:	dfc00415 	stw	ra,16(sp)
    389c:	df000315 	stw	fp,12(sp)
    38a0:	dc000215 	stw	r16,8(sp)
    38a4:	df000304 	addi	fp,sp,12
    38a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    38ac:	e0bffe17 	ldw	r2,-8(fp)
    38b0:	10800217 	ldw	r2,8(r2)
    38b4:	10d00034 	orhi	r3,r2,16384
    38b8:	e0bffe17 	ldw	r2,-8(fp)
    38bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    38c0:	e03ffd15 	stw	zero,-12(fp)
    38c4:	00002306 	br	3954 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    38c8:	04000034 	movhi	r16,0
    38cc:	84162904 	addi	r16,r16,22692
    38d0:	e0bffd17 	ldw	r2,-12(fp)
    38d4:	01400304 	movi	r5,12
    38d8:	1009883a 	mov	r4,r2
    38dc:	0000f700 	call	f70 <__mulsi3>
    38e0:	8085883a 	add	r2,r16,r2
    38e4:	10c00017 	ldw	r3,0(r2)
    38e8:	e0bffe17 	ldw	r2,-8(fp)
    38ec:	10800017 	ldw	r2,0(r2)
    38f0:	1880151e 	bne	r3,r2,3948 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    38f4:	04000034 	movhi	r16,0
    38f8:	84162904 	addi	r16,r16,22692
    38fc:	e0bffd17 	ldw	r2,-12(fp)
    3900:	01400304 	movi	r5,12
    3904:	1009883a 	mov	r4,r2
    3908:	0000f700 	call	f70 <__mulsi3>
    390c:	8085883a 	add	r2,r16,r2
    3910:	10800204 	addi	r2,r2,8
    3914:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    3918:	10000b0e 	bge	r2,zero,3948 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    391c:	01400304 	movi	r5,12
    3920:	e13ffd17 	ldw	r4,-12(fp)
    3924:	0000f700 	call	f70 <__mulsi3>
    3928:	1007883a 	mov	r3,r2
    392c:	00800034 	movhi	r2,0
    3930:	10962904 	addi	r2,r2,22692
    3934:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    3938:	e0bffe17 	ldw	r2,-8(fp)
    393c:	18800226 	beq	r3,r2,3948 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    3940:	00bffcc4 	movi	r2,-13
    3944:	00000806 	br	3968 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3948:	e0bffd17 	ldw	r2,-12(fp)
    394c:	10800044 	addi	r2,r2,1
    3950:	e0bffd15 	stw	r2,-12(fp)
    3954:	d0a00717 	ldw	r2,-32740(gp)
    3958:	1007883a 	mov	r3,r2
    395c:	e0bffd17 	ldw	r2,-12(fp)
    3960:	18bfd92e 	bgeu	r3,r2,38c8 <__alt_mem_epcs_flash_controller+0xfdffa8c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    3964:	0005883a 	mov	r2,zero
}
    3968:	e6ffff04 	addi	sp,fp,-4
    396c:	dfc00217 	ldw	ra,8(sp)
    3970:	df000117 	ldw	fp,4(sp)
    3974:	dc000017 	ldw	r16,0(sp)
    3978:	dec00304 	addi	sp,sp,12
    397c:	f800283a 	ret

00003980 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    3980:	defff604 	addi	sp,sp,-40
    3984:	dfc00915 	stw	ra,36(sp)
    3988:	df000815 	stw	fp,32(sp)
    398c:	df000804 	addi	fp,sp,32
    3990:	e13ffd15 	stw	r4,-12(fp)
    3994:	e17ffe15 	stw	r5,-8(fp)
    3998:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    399c:	00bfffc4 	movi	r2,-1
    39a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    39a4:	00bffb44 	movi	r2,-19
    39a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    39ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    39b0:	d1600504 	addi	r5,gp,-32748
    39b4:	e13ffd17 	ldw	r4,-12(fp)
    39b8:	0003f240 	call	3f24 <alt_find_dev>
    39bc:	e0bff815 	stw	r2,-32(fp)
    39c0:	e0bff817 	ldw	r2,-32(fp)
    39c4:	1000051e 	bne	r2,zero,39dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    39c8:	e13ffd17 	ldw	r4,-12(fp)
    39cc:	0003fb40 	call	3fb4 <alt_find_file>
    39d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    39d4:	00800044 	movi	r2,1
    39d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    39dc:	e0bff817 	ldw	r2,-32(fp)
    39e0:	10002b26 	beq	r2,zero,3a90 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    39e4:	e13ff817 	ldw	r4,-32(fp)
    39e8:	00040bc0 	call	40bc <alt_get_fd>
    39ec:	e0bff915 	stw	r2,-28(fp)
    39f0:	e0bff917 	ldw	r2,-28(fp)
    39f4:	1000030e 	bge	r2,zero,3a04 <open+0x84>
    {
      status = index;
    39f8:	e0bff917 	ldw	r2,-28(fp)
    39fc:	e0bffa15 	stw	r2,-24(fp)
    3a00:	00002506 	br	3a98 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    3a04:	01400304 	movi	r5,12
    3a08:	e13ff917 	ldw	r4,-28(fp)
    3a0c:	0000f700 	call	f70 <__mulsi3>
    3a10:	1007883a 	mov	r3,r2
    3a14:	00800034 	movhi	r2,0
    3a18:	10962904 	addi	r2,r2,22692
    3a1c:	1885883a 	add	r2,r3,r2
    3a20:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    3a24:	e0fffe17 	ldw	r3,-8(fp)
    3a28:	00900034 	movhi	r2,16384
    3a2c:	10bfffc4 	addi	r2,r2,-1
    3a30:	1886703a 	and	r3,r3,r2
    3a34:	e0bffc17 	ldw	r2,-16(fp)
    3a38:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    3a3c:	e0bffb17 	ldw	r2,-20(fp)
    3a40:	1000051e 	bne	r2,zero,3a58 <open+0xd8>
    3a44:	e13ffc17 	ldw	r4,-16(fp)
    3a48:	00038940 	call	3894 <alt_file_locked>
    3a4c:	e0bffa15 	stw	r2,-24(fp)
    3a50:	e0bffa17 	ldw	r2,-24(fp)
    3a54:	10001016 	blt	r2,zero,3a98 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    3a58:	e0bff817 	ldw	r2,-32(fp)
    3a5c:	10800317 	ldw	r2,12(r2)
    3a60:	10000826 	beq	r2,zero,3a84 <open+0x104>
    3a64:	e0bff817 	ldw	r2,-32(fp)
    3a68:	10800317 	ldw	r2,12(r2)
    3a6c:	e1ffff17 	ldw	r7,-4(fp)
    3a70:	e1bffe17 	ldw	r6,-8(fp)
    3a74:	e17ffd17 	ldw	r5,-12(fp)
    3a78:	e13ffc17 	ldw	r4,-16(fp)
    3a7c:	103ee83a 	callr	r2
    3a80:	00000106 	br	3a88 <open+0x108>
    3a84:	0005883a 	mov	r2,zero
    3a88:	e0bffa15 	stw	r2,-24(fp)
    3a8c:	00000206 	br	3a98 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    3a90:	00bffb44 	movi	r2,-19
    3a94:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    3a98:	e0bffa17 	ldw	r2,-24(fp)
    3a9c:	1000090e 	bge	r2,zero,3ac4 <open+0x144>
  {
    alt_release_fd (index);  
    3aa0:	e13ff917 	ldw	r4,-28(fp)
    3aa4:	0003adc0 	call	3adc <alt_release_fd>
    ALT_ERRNO = -status;
    3aa8:	00038580 	call	3858 <alt_get_errno>
    3aac:	1007883a 	mov	r3,r2
    3ab0:	e0bffa17 	ldw	r2,-24(fp)
    3ab4:	0085c83a 	sub	r2,zero,r2
    3ab8:	18800015 	stw	r2,0(r3)
    return -1;
    3abc:	00bfffc4 	movi	r2,-1
    3ac0:	00000106 	br	3ac8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    3ac4:	e0bff917 	ldw	r2,-28(fp)
}
    3ac8:	e037883a 	mov	sp,fp
    3acc:	dfc00117 	ldw	ra,4(sp)
    3ad0:	df000017 	ldw	fp,0(sp)
    3ad4:	dec00204 	addi	sp,sp,8
    3ad8:	f800283a 	ret

00003adc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3adc:	defffc04 	addi	sp,sp,-16
    3ae0:	dfc00315 	stw	ra,12(sp)
    3ae4:	df000215 	stw	fp,8(sp)
    3ae8:	dc000115 	stw	r16,4(sp)
    3aec:	df000204 	addi	fp,sp,8
    3af0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    3af4:	e0bffe17 	ldw	r2,-8(fp)
    3af8:	108000d0 	cmplti	r2,r2,3
    3afc:	1000111e 	bne	r2,zero,3b44 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    3b00:	04000034 	movhi	r16,0
    3b04:	84162904 	addi	r16,r16,22692
    3b08:	e0bffe17 	ldw	r2,-8(fp)
    3b0c:	01400304 	movi	r5,12
    3b10:	1009883a 	mov	r4,r2
    3b14:	0000f700 	call	f70 <__mulsi3>
    3b18:	8085883a 	add	r2,r16,r2
    3b1c:	10800204 	addi	r2,r2,8
    3b20:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3b24:	04000034 	movhi	r16,0
    3b28:	84162904 	addi	r16,r16,22692
    3b2c:	e0bffe17 	ldw	r2,-8(fp)
    3b30:	01400304 	movi	r5,12
    3b34:	1009883a 	mov	r4,r2
    3b38:	0000f700 	call	f70 <__mulsi3>
    3b3c:	8085883a 	add	r2,r16,r2
    3b40:	10000015 	stw	zero,0(r2)
  }
}
    3b44:	0001883a 	nop
    3b48:	e6ffff04 	addi	sp,fp,-4
    3b4c:	dfc00217 	ldw	ra,8(sp)
    3b50:	df000117 	ldw	fp,4(sp)
    3b54:	dc000017 	ldw	r16,0(sp)
    3b58:	dec00304 	addi	sp,sp,12
    3b5c:	f800283a 	ret

00003b60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    3b60:	defffa04 	addi	sp,sp,-24
    3b64:	df000515 	stw	fp,20(sp)
    3b68:	df000504 	addi	fp,sp,20
    3b6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3b70:	0005303a 	rdctl	r2,status
    3b74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3b78:	e0fffc17 	ldw	r3,-16(fp)
    3b7c:	00bfff84 	movi	r2,-2
    3b80:	1884703a 	and	r2,r3,r2
    3b84:	1001703a 	wrctl	status,r2
  
  return context;
    3b88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    3b8c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    3b90:	e0bfff17 	ldw	r2,-4(fp)
    3b94:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    3b98:	e0bffd17 	ldw	r2,-12(fp)
    3b9c:	10800017 	ldw	r2,0(r2)
    3ba0:	e0fffd17 	ldw	r3,-12(fp)
    3ba4:	18c00117 	ldw	r3,4(r3)
    3ba8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    3bac:	e0bffd17 	ldw	r2,-12(fp)
    3bb0:	10800117 	ldw	r2,4(r2)
    3bb4:	e0fffd17 	ldw	r3,-12(fp)
    3bb8:	18c00017 	ldw	r3,0(r3)
    3bbc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    3bc0:	e0bffd17 	ldw	r2,-12(fp)
    3bc4:	e0fffd17 	ldw	r3,-12(fp)
    3bc8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    3bcc:	e0bffd17 	ldw	r2,-12(fp)
    3bd0:	e0fffd17 	ldw	r3,-12(fp)
    3bd4:	10c00015 	stw	r3,0(r2)
    3bd8:	e0bffb17 	ldw	r2,-20(fp)
    3bdc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3be0:	e0bffe17 	ldw	r2,-8(fp)
    3be4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    3be8:	0001883a 	nop
    3bec:	e037883a 	mov	sp,fp
    3bf0:	df000017 	ldw	fp,0(sp)
    3bf4:	dec00104 	addi	sp,sp,4
    3bf8:	f800283a 	ret

00003bfc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3bfc:	defffb04 	addi	sp,sp,-20
    3c00:	dfc00415 	stw	ra,16(sp)
    3c04:	df000315 	stw	fp,12(sp)
    3c08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3c0c:	d0a00c17 	ldw	r2,-32720(gp)
    3c10:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3c14:	d0a51117 	ldw	r2,-27580(gp)
    3c18:	10800044 	addi	r2,r2,1
    3c1c:	d0a51115 	stw	r2,-27580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3c20:	00002e06 	br	3cdc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    3c24:	e0bffd17 	ldw	r2,-12(fp)
    3c28:	10800017 	ldw	r2,0(r2)
    3c2c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3c30:	e0bffd17 	ldw	r2,-12(fp)
    3c34:	10800403 	ldbu	r2,16(r2)
    3c38:	10803fcc 	andi	r2,r2,255
    3c3c:	10000426 	beq	r2,zero,3c50 <alt_tick+0x54>
    3c40:	d0a51117 	ldw	r2,-27580(gp)
    3c44:	1000021e 	bne	r2,zero,3c50 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    3c48:	e0bffd17 	ldw	r2,-12(fp)
    3c4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3c50:	e0bffd17 	ldw	r2,-12(fp)
    3c54:	10800217 	ldw	r2,8(r2)
    3c58:	d0e51117 	ldw	r3,-27580(gp)
    3c5c:	18801d36 	bltu	r3,r2,3cd4 <alt_tick+0xd8>
    3c60:	e0bffd17 	ldw	r2,-12(fp)
    3c64:	10800403 	ldbu	r2,16(r2)
    3c68:	10803fcc 	andi	r2,r2,255
    3c6c:	1000191e 	bne	r2,zero,3cd4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    3c70:	e0bffd17 	ldw	r2,-12(fp)
    3c74:	10800317 	ldw	r2,12(r2)
    3c78:	e0fffd17 	ldw	r3,-12(fp)
    3c7c:	18c00517 	ldw	r3,20(r3)
    3c80:	1809883a 	mov	r4,r3
    3c84:	103ee83a 	callr	r2
    3c88:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3c8c:	e0bfff17 	ldw	r2,-4(fp)
    3c90:	1000031e 	bne	r2,zero,3ca0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    3c94:	e13ffd17 	ldw	r4,-12(fp)
    3c98:	0003b600 	call	3b60 <alt_alarm_stop>
    3c9c:	00000d06 	br	3cd4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    3ca0:	e0bffd17 	ldw	r2,-12(fp)
    3ca4:	10c00217 	ldw	r3,8(r2)
    3ca8:	e0bfff17 	ldw	r2,-4(fp)
    3cac:	1887883a 	add	r3,r3,r2
    3cb0:	e0bffd17 	ldw	r2,-12(fp)
    3cb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    3cb8:	e0bffd17 	ldw	r2,-12(fp)
    3cbc:	10c00217 	ldw	r3,8(r2)
    3cc0:	d0a51117 	ldw	r2,-27580(gp)
    3cc4:	1880032e 	bgeu	r3,r2,3cd4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    3cc8:	e0bffd17 	ldw	r2,-12(fp)
    3ccc:	00c00044 	movi	r3,1
    3cd0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    3cd4:	e0bffe17 	ldw	r2,-8(fp)
    3cd8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3cdc:	e0fffd17 	ldw	r3,-12(fp)
    3ce0:	d0a00c04 	addi	r2,gp,-32720
    3ce4:	18bfcf1e 	bne	r3,r2,3c24 <__alt_mem_epcs_flash_controller+0xfdffac24>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    3ce8:	0001883a 	nop
}
    3cec:	0001883a 	nop
    3cf0:	e037883a 	mov	sp,fp
    3cf4:	dfc00117 	ldw	ra,4(sp)
    3cf8:	df000017 	ldw	fp,0(sp)
    3cfc:	dec00204 	addi	sp,sp,8
    3d00:	f800283a 	ret

00003d04 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    3d04:	deffff04 	addi	sp,sp,-4
    3d08:	df000015 	stw	fp,0(sp)
    3d0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3d10:	000170fa 	wrctl	ienable,zero
}
    3d14:	0001883a 	nop
    3d18:	e037883a 	mov	sp,fp
    3d1c:	df000017 	ldw	fp,0(sp)
    3d20:	dec00104 	addi	sp,sp,4
    3d24:	f800283a 	ret

00003d28 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    3d28:	defff404 	addi	sp,sp,-48
    3d2c:	df000b15 	stw	fp,44(sp)
    3d30:	df000b04 	addi	fp,sp,44
    3d34:	e13ffc15 	stw	r4,-16(fp)
    3d38:	e17ffd15 	stw	r5,-12(fp)
    3d3c:	e1bffe15 	stw	r6,-8(fp)
    3d40:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    3d44:	e0ffff17 	ldw	r3,-4(fp)
    3d48:	e0bffe17 	ldw	r2,-8(fp)
    3d4c:	1885883a 	add	r2,r3,r2
    3d50:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    3d54:	e0c00217 	ldw	r3,8(fp)
    3d58:	e0800117 	ldw	r2,4(fp)
    3d5c:	1885883a 	add	r2,r3,r2
    3d60:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    3d64:	e0800117 	ldw	r2,4(fp)
    3d68:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    3d6c:	e0bffe17 	ldw	r2,-8(fp)
    3d70:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    3d74:	00800044 	movi	r2,1
    3d78:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    3d7c:	e0bffc17 	ldw	r2,-16(fp)
    3d80:	10800504 	addi	r2,r2,20
    3d84:	1009883a 	mov	r4,r2
    3d88:	00c00044 	movi	r3,1
    3d8c:	e0bffd17 	ldw	r2,-12(fp)
    3d90:	1884983a 	sll	r2,r3,r2
    3d94:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    3d98:	e0800317 	ldw	r2,12(fp)
    3d9c:	1080008c 	andi	r2,r2,2
    3da0:	1000051e 	bne	r2,zero,3db8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    3da4:	e0bffc17 	ldw	r2,-16(fp)
    3da8:	10800304 	addi	r2,r2,12
    3dac:	1007883a 	mov	r3,r2
    3db0:	00810004 	movi	r2,1024
    3db4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    3db8:	e0bffc17 	ldw	r2,-16(fp)
    3dbc:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    3dc0:	e0bffc17 	ldw	r2,-16(fp)
    3dc4:	10800204 	addi	r2,r2,8
    3dc8:	10800037 	ldwio	r2,0(r2)
    3dcc:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    3dd0:	e0bffa17 	ldw	r2,-24(fp)
    3dd4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    3dd8:	10000226 	beq	r2,zero,3de4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    3ddc:	e0bff717 	ldw	r2,-36(fp)
    3de0:	1000031e 	bne	r2,zero,3df0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    3de4:	e0bffa17 	ldw	r2,-24(fp)
    3de8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    3dec:	103ff426 	beq	r2,zero,3dc0 <__alt_mem_epcs_flash_controller+0xfdffadc0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    3df0:	e0bffa17 	ldw	r2,-24(fp)
    3df4:	1080100c 	andi	r2,r2,64
    3df8:	10001e26 	beq	r2,zero,3e74 <alt_avalon_spi_command+0x14c>
    3dfc:	e0bff717 	ldw	r2,-36(fp)
    3e00:	00801c0e 	bge	zero,r2,3e74 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    3e04:	e0bff717 	ldw	r2,-36(fp)
    3e08:	10bfffc4 	addi	r2,r2,-1
    3e0c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    3e10:	e0ffff17 	ldw	r3,-4(fp)
    3e14:	e0bff817 	ldw	r2,-32(fp)
    3e18:	18800a2e 	bgeu	r3,r2,3e44 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    3e1c:	e0bffc17 	ldw	r2,-16(fp)
    3e20:	10800104 	addi	r2,r2,4
    3e24:	1009883a 	mov	r4,r2
    3e28:	e0bfff17 	ldw	r2,-4(fp)
    3e2c:	10c00044 	addi	r3,r2,1
    3e30:	e0ffff15 	stw	r3,-4(fp)
    3e34:	10800003 	ldbu	r2,0(r2)
    3e38:	10803fcc 	andi	r2,r2,255
    3e3c:	20800035 	stwio	r2,0(r4)
    3e40:	00000c06 	br	3e74 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    3e44:	e0bff517 	ldw	r2,-44(fp)
    3e48:	10000826 	beq	r2,zero,3e6c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    3e4c:	e0bff517 	ldw	r2,-44(fp)
    3e50:	10bfffc4 	addi	r2,r2,-1
    3e54:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    3e58:	e0bffc17 	ldw	r2,-16(fp)
    3e5c:	10800104 	addi	r2,r2,4
    3e60:	0007883a 	mov	r3,zero
    3e64:	10c00035 	stwio	r3,0(r2)
    3e68:	00000206 	br	3e74 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    3e6c:	00bf0004 	movi	r2,-1024
    3e70:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    3e74:	e0bffa17 	ldw	r2,-24(fp)
    3e78:	1080200c 	andi	r2,r2,128
    3e7c:	103fd026 	beq	r2,zero,3dc0 <__alt_mem_epcs_flash_controller+0xfdffadc0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    3e80:	e0bffc17 	ldw	r2,-16(fp)
    3e84:	10800037 	ldwio	r2,0(r2)
    3e88:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    3e8c:	e0bff617 	ldw	r2,-40(fp)
    3e90:	10000426 	beq	r2,zero,3ea4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    3e94:	e0bff617 	ldw	r2,-40(fp)
    3e98:	10bfffc4 	addi	r2,r2,-1
    3e9c:	e0bff615 	stw	r2,-40(fp)
    3ea0:	00000506 	br	3eb8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    3ea4:	e0800217 	ldw	r2,8(fp)
    3ea8:	10c00044 	addi	r3,r2,1
    3eac:	e0c00215 	stw	r3,8(fp)
    3eb0:	e0fffb17 	ldw	r3,-20(fp)
    3eb4:	10c00005 	stb	r3,0(r2)
      credits++;
    3eb8:	e0bff717 	ldw	r2,-36(fp)
    3ebc:	10800044 	addi	r2,r2,1
    3ec0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    3ec4:	e0bff617 	ldw	r2,-40(fp)
    3ec8:	103fbd1e 	bne	r2,zero,3dc0 <__alt_mem_epcs_flash_controller+0xfdffadc0>
    3ecc:	e0c00217 	ldw	r3,8(fp)
    3ed0:	e0bff917 	ldw	r2,-28(fp)
    3ed4:	18bfba1e 	bne	r3,r2,3dc0 <__alt_mem_epcs_flash_controller+0xfdffadc0>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    3ed8:	e0bffc17 	ldw	r2,-16(fp)
    3edc:	10800204 	addi	r2,r2,8
    3ee0:	10800037 	ldwio	r2,0(r2)
    3ee4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    3ee8:	e0bffa17 	ldw	r2,-24(fp)
    3eec:	1080080c 	andi	r2,r2,32
    3ef0:	103ff926 	beq	r2,zero,3ed8 <__alt_mem_epcs_flash_controller+0xfdffaed8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    3ef4:	e0800317 	ldw	r2,12(fp)
    3ef8:	1080004c 	andi	r2,r2,1
    3efc:	1000041e 	bne	r2,zero,3f10 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    3f00:	e0bffc17 	ldw	r2,-16(fp)
    3f04:	10800304 	addi	r2,r2,12
    3f08:	0007883a 	mov	r3,zero
    3f0c:	10c00035 	stwio	r3,0(r2)

  return read_length;
    3f10:	e0800117 	ldw	r2,4(fp)
}
    3f14:	e037883a 	mov	sp,fp
    3f18:	df000017 	ldw	fp,0(sp)
    3f1c:	dec00104 	addi	sp,sp,4
    3f20:	f800283a 	ret

00003f24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    3f24:	defffa04 	addi	sp,sp,-24
    3f28:	dfc00515 	stw	ra,20(sp)
    3f2c:	df000415 	stw	fp,16(sp)
    3f30:	df000404 	addi	fp,sp,16
    3f34:	e13ffe15 	stw	r4,-8(fp)
    3f38:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    3f3c:	e0bfff17 	ldw	r2,-4(fp)
    3f40:	10800017 	ldw	r2,0(r2)
    3f44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    3f48:	e13ffe17 	ldw	r4,-8(fp)
    3f4c:	00006dc0 	call	6dc <strlen>
    3f50:	10800044 	addi	r2,r2,1
    3f54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3f58:	00000d06 	br	3f90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    3f5c:	e0bffc17 	ldw	r2,-16(fp)
    3f60:	10800217 	ldw	r2,8(r2)
    3f64:	e0fffd17 	ldw	r3,-12(fp)
    3f68:	180d883a 	mov	r6,r3
    3f6c:	e17ffe17 	ldw	r5,-8(fp)
    3f70:	1009883a 	mov	r4,r2
    3f74:	00042500 	call	4250 <memcmp>
    3f78:	1000021e 	bne	r2,zero,3f84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    3f7c:	e0bffc17 	ldw	r2,-16(fp)
    3f80:	00000706 	br	3fa0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    3f84:	e0bffc17 	ldw	r2,-16(fp)
    3f88:	10800017 	ldw	r2,0(r2)
    3f8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3f90:	e0fffc17 	ldw	r3,-16(fp)
    3f94:	e0bfff17 	ldw	r2,-4(fp)
    3f98:	18bff01e 	bne	r3,r2,3f5c <__alt_mem_epcs_flash_controller+0xfdffaf5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    3f9c:	0005883a 	mov	r2,zero
}
    3fa0:	e037883a 	mov	sp,fp
    3fa4:	dfc00117 	ldw	ra,4(sp)
    3fa8:	df000017 	ldw	fp,0(sp)
    3fac:	dec00204 	addi	sp,sp,8
    3fb0:	f800283a 	ret

00003fb4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3fb4:	defffb04 	addi	sp,sp,-20
    3fb8:	dfc00415 	stw	ra,16(sp)
    3fbc:	df000315 	stw	fp,12(sp)
    3fc0:	df000304 	addi	fp,sp,12
    3fc4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3fc8:	d0a00317 	ldw	r2,-32756(gp)
    3fcc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3fd0:	00003106 	br	4098 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    3fd4:	e0bffd17 	ldw	r2,-12(fp)
    3fd8:	10800217 	ldw	r2,8(r2)
    3fdc:	1009883a 	mov	r4,r2
    3fe0:	00006dc0 	call	6dc <strlen>
    3fe4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    3fe8:	e0bffd17 	ldw	r2,-12(fp)
    3fec:	10c00217 	ldw	r3,8(r2)
    3ff0:	e0bffe17 	ldw	r2,-8(fp)
    3ff4:	10bfffc4 	addi	r2,r2,-1
    3ff8:	1885883a 	add	r2,r3,r2
    3ffc:	10800003 	ldbu	r2,0(r2)
    4000:	10803fcc 	andi	r2,r2,255
    4004:	1080201c 	xori	r2,r2,128
    4008:	10bfe004 	addi	r2,r2,-128
    400c:	10800bd8 	cmpnei	r2,r2,47
    4010:	1000031e 	bne	r2,zero,4020 <alt_find_file+0x6c>
    {
      len -= 1;
    4014:	e0bffe17 	ldw	r2,-8(fp)
    4018:	10bfffc4 	addi	r2,r2,-1
    401c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4020:	e0bffe17 	ldw	r2,-8(fp)
    4024:	e0ffff17 	ldw	r3,-4(fp)
    4028:	1885883a 	add	r2,r3,r2
    402c:	10800003 	ldbu	r2,0(r2)
    4030:	10803fcc 	andi	r2,r2,255
    4034:	1080201c 	xori	r2,r2,128
    4038:	10bfe004 	addi	r2,r2,-128
    403c:	10800be0 	cmpeqi	r2,r2,47
    4040:	1000081e 	bne	r2,zero,4064 <alt_find_file+0xb0>
    4044:	e0bffe17 	ldw	r2,-8(fp)
    4048:	e0ffff17 	ldw	r3,-4(fp)
    404c:	1885883a 	add	r2,r3,r2
    4050:	10800003 	ldbu	r2,0(r2)
    4054:	10803fcc 	andi	r2,r2,255
    4058:	1080201c 	xori	r2,r2,128
    405c:	10bfe004 	addi	r2,r2,-128
    4060:	10000a1e 	bne	r2,zero,408c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    4064:	e0bffd17 	ldw	r2,-12(fp)
    4068:	10800217 	ldw	r2,8(r2)
    406c:	e0fffe17 	ldw	r3,-8(fp)
    4070:	180d883a 	mov	r6,r3
    4074:	e17fff17 	ldw	r5,-4(fp)
    4078:	1009883a 	mov	r4,r2
    407c:	00042500 	call	4250 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4080:	1000021e 	bne	r2,zero,408c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    4084:	e0bffd17 	ldw	r2,-12(fp)
    4088:	00000706 	br	40a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    408c:	e0bffd17 	ldw	r2,-12(fp)
    4090:	10800017 	ldw	r2,0(r2)
    4094:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4098:	e0fffd17 	ldw	r3,-12(fp)
    409c:	d0a00304 	addi	r2,gp,-32756
    40a0:	18bfcc1e 	bne	r3,r2,3fd4 <__alt_mem_epcs_flash_controller+0xfdffafd4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    40a4:	0005883a 	mov	r2,zero
}
    40a8:	e037883a 	mov	sp,fp
    40ac:	dfc00117 	ldw	ra,4(sp)
    40b0:	df000017 	ldw	fp,0(sp)
    40b4:	dec00204 	addi	sp,sp,8
    40b8:	f800283a 	ret

000040bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    40bc:	defffa04 	addi	sp,sp,-24
    40c0:	dfc00515 	stw	ra,20(sp)
    40c4:	df000415 	stw	fp,16(sp)
    40c8:	dc000315 	stw	r16,12(sp)
    40cc:	df000404 	addi	fp,sp,16
    40d0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    40d4:	00bffa04 	movi	r2,-24
    40d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    40dc:	e03ffc15 	stw	zero,-16(fp)
    40e0:	00001d06 	br	4158 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    40e4:	04000034 	movhi	r16,0
    40e8:	84162904 	addi	r16,r16,22692
    40ec:	e0bffc17 	ldw	r2,-16(fp)
    40f0:	01400304 	movi	r5,12
    40f4:	1009883a 	mov	r4,r2
    40f8:	0000f700 	call	f70 <__mulsi3>
    40fc:	8085883a 	add	r2,r16,r2
    4100:	10800017 	ldw	r2,0(r2)
    4104:	1000111e 	bne	r2,zero,414c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    4108:	04000034 	movhi	r16,0
    410c:	84162904 	addi	r16,r16,22692
    4110:	e0bffc17 	ldw	r2,-16(fp)
    4114:	01400304 	movi	r5,12
    4118:	1009883a 	mov	r4,r2
    411c:	0000f700 	call	f70 <__mulsi3>
    4120:	8085883a 	add	r2,r16,r2
    4124:	e0fffe17 	ldw	r3,-8(fp)
    4128:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    412c:	d0e00717 	ldw	r3,-32740(gp)
    4130:	e0bffc17 	ldw	r2,-16(fp)
    4134:	1880020e 	bge	r3,r2,4140 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    4138:	e0bffc17 	ldw	r2,-16(fp)
    413c:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
    4140:	e0bffc17 	ldw	r2,-16(fp)
    4144:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    4148:	00000606 	br	4164 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    414c:	e0bffc17 	ldw	r2,-16(fp)
    4150:	10800044 	addi	r2,r2,1
    4154:	e0bffc15 	stw	r2,-16(fp)
    4158:	e0bffc17 	ldw	r2,-16(fp)
    415c:	10800810 	cmplti	r2,r2,32
    4160:	103fe01e 	bne	r2,zero,40e4 <__alt_mem_epcs_flash_controller+0xfdffb0e4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    4164:	e0bffd17 	ldw	r2,-12(fp)
}
    4168:	e6ffff04 	addi	sp,fp,-4
    416c:	dfc00217 	ldw	ra,8(sp)
    4170:	df000117 	ldw	fp,4(sp)
    4174:	dc000017 	ldw	r16,0(sp)
    4178:	dec00304 	addi	sp,sp,12
    417c:	f800283a 	ret

00004180 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    4180:	defffe04 	addi	sp,sp,-8
    4184:	df000115 	stw	fp,4(sp)
    4188:	df000104 	addi	fp,sp,4
    418c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    4190:	e0bfff17 	ldw	r2,-4(fp)
    4194:	10bffe84 	addi	r2,r2,-6
    4198:	10c00428 	cmpgeui	r3,r2,16
    419c:	18001a1e 	bne	r3,zero,4208 <alt_exception_cause_generated_bad_addr+0x88>
    41a0:	100690ba 	slli	r3,r2,2
    41a4:	00800034 	movhi	r2,0
    41a8:	10906e04 	addi	r2,r2,16824
    41ac:	1885883a 	add	r2,r3,r2
    41b0:	10800017 	ldw	r2,0(r2)
    41b4:	1000683a 	jmp	r2
    41b8:	000041f8 	rdprs	zero,zero,263
    41bc:	000041f8 	rdprs	zero,zero,263
    41c0:	00004208 	cmpgei	zero,zero,264
    41c4:	00004208 	cmpgei	zero,zero,264
    41c8:	00004208 	cmpgei	zero,zero,264
    41cc:	000041f8 	rdprs	zero,zero,263
    41d0:	00004200 	call	420 <_malloc_r+0x8>
    41d4:	00004208 	cmpgei	zero,zero,264
    41d8:	000041f8 	rdprs	zero,zero,263
    41dc:	000041f8 	rdprs	zero,zero,263
    41e0:	00004208 	cmpgei	zero,zero,264
    41e4:	000041f8 	rdprs	zero,zero,263
    41e8:	00004200 	call	420 <_malloc_r+0x8>
    41ec:	00004208 	cmpgei	zero,zero,264
    41f0:	00004208 	cmpgei	zero,zero,264
    41f4:	000041f8 	rdprs	zero,zero,263
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    41f8:	00800044 	movi	r2,1
    41fc:	00000306 	br	420c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    4200:	0005883a 	mov	r2,zero
    4204:	00000106 	br	420c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    4208:	0005883a 	mov	r2,zero
  }
}
    420c:	e037883a 	mov	sp,fp
    4210:	df000017 	ldw	fp,0(sp)
    4214:	dec00104 	addi	sp,sp,4
    4218:	f800283a 	ret

0000421c <atexit>:
    421c:	200b883a 	mov	r5,r4
    4220:	000f883a 	mov	r7,zero
    4224:	000d883a 	mov	r6,zero
    4228:	0009883a 	mov	r4,zero
    422c:	00042a81 	jmpi	42a8 <__register_exitproc>

00004230 <exit>:
    4230:	defffe04 	addi	sp,sp,-8
    4234:	000b883a 	mov	r5,zero
    4238:	dc000015 	stw	r16,0(sp)
    423c:	dfc00115 	stw	ra,4(sp)
    4240:	2021883a 	mov	r16,r4
    4244:	00044000 	call	4400 <__call_exitprocs>
    4248:	8009883a 	mov	r4,r16
    424c:	00045900 	call	4590 <_exit>

00004250 <memcmp>:
    4250:	218d883a 	add	r6,r4,r6
    4254:	21800826 	beq	r4,r6,4278 <memcmp+0x28>
    4258:	20800003 	ldbu	r2,0(r4)
    425c:	28c00003 	ldbu	r3,0(r5)
    4260:	10c00226 	beq	r2,r3,426c <memcmp+0x1c>
    4264:	10c5c83a 	sub	r2,r2,r3
    4268:	f800283a 	ret
    426c:	21000044 	addi	r4,r4,1
    4270:	29400044 	addi	r5,r5,1
    4274:	003ff706 	br	4254 <__alt_mem_epcs_flash_controller+0xfdffb254>
    4278:	0005883a 	mov	r2,zero
    427c:	f800283a 	ret

00004280 <memcpy>:
    4280:	2005883a 	mov	r2,r4
    4284:	2007883a 	mov	r3,r4
    4288:	218d883a 	add	r6,r4,r6
    428c:	19800526 	beq	r3,r6,42a4 <memcpy+0x24>
    4290:	29000003 	ldbu	r4,0(r5)
    4294:	18c00044 	addi	r3,r3,1
    4298:	29400044 	addi	r5,r5,1
    429c:	193fffc5 	stb	r4,-1(r3)
    42a0:	003ffa06 	br	428c <__alt_mem_epcs_flash_controller+0xfdffb28c>
    42a4:	f800283a 	ret

000042a8 <__register_exitproc>:
    42a8:	00800034 	movhi	r2,0
    42ac:	10968904 	addi	r2,r2,23076
    42b0:	10c00017 	ldw	r3,0(r2)
    42b4:	defff904 	addi	sp,sp,-28
    42b8:	dc000015 	stw	r16,0(sp)
    42bc:	1c000c17 	ldw	r16,48(r3)
    42c0:	dd400515 	stw	r21,20(sp)
    42c4:	dd000415 	stw	r20,16(sp)
    42c8:	dcc00315 	stw	r19,12(sp)
    42cc:	dc800215 	stw	r18,8(sp)
    42d0:	dc400115 	stw	r17,4(sp)
    42d4:	dfc00615 	stw	ra,24(sp)
    42d8:	202b883a 	mov	r21,r4
    42dc:	2823883a 	mov	r17,r5
    42e0:	3027883a 	mov	r19,r6
    42e4:	3825883a 	mov	r18,r7
    42e8:	1029883a 	mov	r20,r2
    42ec:	8000021e 	bne	r16,zero,42f8 <__register_exitproc+0x50>
    42f0:	1c000d04 	addi	r16,r3,52
    42f4:	1c000c15 	stw	r16,48(r3)
    42f8:	80800117 	ldw	r2,4(r16)
    42fc:	00c007c4 	movi	r3,31
    4300:	1880110e 	bge	r3,r2,4348 <__register_exitproc+0xa0>
    4304:	00800034 	movhi	r2,0
    4308:	1080c304 	addi	r2,r2,780
    430c:	1000021e 	bne	r2,zero,4318 <__register_exitproc+0x70>
    4310:	00bfffc4 	movi	r2,-1
    4314:	00003106 	br	43dc <__register_exitproc+0x134>
    4318:	01002304 	movi	r4,140
    431c:	000030c0 	call	30c <malloc>
    4320:	1021883a 	mov	r16,r2
    4324:	103ffa26 	beq	r2,zero,4310 <__alt_mem_epcs_flash_controller+0xfdffb310>
    4328:	10000115 	stw	zero,4(r2)
    432c:	a0800017 	ldw	r2,0(r20)
    4330:	10c00c17 	ldw	r3,48(r2)
    4334:	80c00015 	stw	r3,0(r16)
    4338:	14000c15 	stw	r16,48(r2)
    433c:	80002215 	stw	zero,136(r16)
    4340:	a8001d26 	beq	r21,zero,43b8 <__register_exitproc+0x110>
    4344:	00000606 	br	4360 <__register_exitproc+0xb8>
    4348:	a8001b26 	beq	r21,zero,43b8 <__register_exitproc+0x110>
    434c:	80802217 	ldw	r2,136(r16)
    4350:	1000091e 	bne	r2,zero,4378 <__register_exitproc+0xd0>
    4354:	00800034 	movhi	r2,0
    4358:	1080c304 	addi	r2,r2,780
    435c:	103fec26 	beq	r2,zero,4310 <__alt_mem_epcs_flash_controller+0xfdffb310>
    4360:	01004204 	movi	r4,264
    4364:	000030c0 	call	30c <malloc>
    4368:	103fe926 	beq	r2,zero,4310 <__alt_mem_epcs_flash_controller+0xfdffb310>
    436c:	10004015 	stw	zero,256(r2)
    4370:	10004115 	stw	zero,260(r2)
    4374:	80802215 	stw	r2,136(r16)
    4378:	81400117 	ldw	r5,4(r16)
    437c:	01000044 	movi	r4,1
    4380:	2947883a 	add	r3,r5,r5
    4384:	18c7883a 	add	r3,r3,r3
    4388:	10c7883a 	add	r3,r2,r3
    438c:	1cc00015 	stw	r19,0(r3)
    4390:	2148983a 	sll	r4,r4,r5
    4394:	11404017 	ldw	r5,256(r2)
    4398:	290ab03a 	or	r5,r5,r4
    439c:	11404015 	stw	r5,256(r2)
    43a0:	1c802015 	stw	r18,128(r3)
    43a4:	00c00084 	movi	r3,2
    43a8:	a8c0031e 	bne	r21,r3,43b8 <__register_exitproc+0x110>
    43ac:	10c04117 	ldw	r3,260(r2)
    43b0:	1908b03a 	or	r4,r3,r4
    43b4:	11004115 	stw	r4,260(r2)
    43b8:	80800117 	ldw	r2,4(r16)
    43bc:	10c00044 	addi	r3,r2,1
    43c0:	10800084 	addi	r2,r2,2
    43c4:	1085883a 	add	r2,r2,r2
    43c8:	1085883a 	add	r2,r2,r2
    43cc:	80c00115 	stw	r3,4(r16)
    43d0:	80a1883a 	add	r16,r16,r2
    43d4:	84400015 	stw	r17,0(r16)
    43d8:	0005883a 	mov	r2,zero
    43dc:	dfc00617 	ldw	ra,24(sp)
    43e0:	dd400517 	ldw	r21,20(sp)
    43e4:	dd000417 	ldw	r20,16(sp)
    43e8:	dcc00317 	ldw	r19,12(sp)
    43ec:	dc800217 	ldw	r18,8(sp)
    43f0:	dc400117 	ldw	r17,4(sp)
    43f4:	dc000017 	ldw	r16,0(sp)
    43f8:	dec00704 	addi	sp,sp,28
    43fc:	f800283a 	ret

00004400 <__call_exitprocs>:
    4400:	defff504 	addi	sp,sp,-44
    4404:	dd000515 	stw	r20,20(sp)
    4408:	05000034 	movhi	r20,0
    440c:	dc800315 	stw	r18,12(sp)
    4410:	dfc00a15 	stw	ra,40(sp)
    4414:	df000915 	stw	fp,36(sp)
    4418:	ddc00815 	stw	r23,32(sp)
    441c:	dd800715 	stw	r22,28(sp)
    4420:	dd400615 	stw	r21,24(sp)
    4424:	dcc00415 	stw	r19,16(sp)
    4428:	dc400215 	stw	r17,8(sp)
    442c:	dc000115 	stw	r16,4(sp)
    4430:	d9000015 	stw	r4,0(sp)
    4434:	2825883a 	mov	r18,r5
    4438:	a5168904 	addi	r20,r20,23076
    443c:	a4400017 	ldw	r17,0(r20)
    4440:	8cc00c17 	ldw	r19,48(r17)
    4444:	8c400c04 	addi	r17,r17,48
    4448:	98004526 	beq	r19,zero,4560 <__call_exitprocs+0x160>
    444c:	9c000117 	ldw	r16,4(r19)
    4450:	00900034 	movhi	r2,16384
    4454:	10bfffc4 	addi	r2,r2,-1
    4458:	9d402217 	ldw	r21,136(r19)
    445c:	85bfffc4 	addi	r22,r16,-1
    4460:	80a1883a 	add	r16,r16,r2
    4464:	8421883a 	add	r16,r16,r16
    4468:	8421883a 	add	r16,r16,r16
    446c:	ac2f883a 	add	r23,r21,r16
    4470:	84000204 	addi	r16,r16,8
    4474:	9c21883a 	add	r16,r19,r16
    4478:	b0002716 	blt	r22,zero,4518 <__call_exitprocs+0x118>
    447c:	90000726 	beq	r18,zero,449c <__call_exitprocs+0x9c>
    4480:	a800041e 	bne	r21,zero,4494 <__call_exitprocs+0x94>
    4484:	b5bfffc4 	addi	r22,r22,-1
    4488:	bdffff04 	addi	r23,r23,-4
    448c:	843fff04 	addi	r16,r16,-4
    4490:	003ff906 	br	4478 <__alt_mem_epcs_flash_controller+0xfdffb478>
    4494:	b9002017 	ldw	r4,128(r23)
    4498:	913ffa1e 	bne	r18,r4,4484 <__alt_mem_epcs_flash_controller+0xfdffb484>
    449c:	99000117 	ldw	r4,4(r19)
    44a0:	82000017 	ldw	r8,0(r16)
    44a4:	213fffc4 	addi	r4,r4,-1
    44a8:	b100021e 	bne	r22,r4,44b4 <__call_exitprocs+0xb4>
    44ac:	9d800115 	stw	r22,4(r19)
    44b0:	00000106 	br	44b8 <__call_exitprocs+0xb8>
    44b4:	80000015 	stw	zero,0(r16)
    44b8:	403ff226 	beq	r8,zero,4484 <__alt_mem_epcs_flash_controller+0xfdffb484>
    44bc:	9f000117 	ldw	fp,4(r19)
    44c0:	a8000526 	beq	r21,zero,44d8 <__call_exitprocs+0xd8>
    44c4:	00800044 	movi	r2,1
    44c8:	1592983a 	sll	r9,r2,r22
    44cc:	a9404017 	ldw	r5,256(r21)
    44d0:	494a703a 	and	r5,r9,r5
    44d4:	2800021e 	bne	r5,zero,44e0 <__call_exitprocs+0xe0>
    44d8:	403ee83a 	callr	r8
    44dc:	00000906 	br	4504 <__call_exitprocs+0x104>
    44e0:	a9004117 	ldw	r4,260(r21)
    44e4:	4908703a 	and	r4,r9,r4
    44e8:	2000041e 	bne	r4,zero,44fc <__call_exitprocs+0xfc>
    44ec:	b9400017 	ldw	r5,0(r23)
    44f0:	d9000017 	ldw	r4,0(sp)
    44f4:	403ee83a 	callr	r8
    44f8:	00000206 	br	4504 <__call_exitprocs+0x104>
    44fc:	b9000017 	ldw	r4,0(r23)
    4500:	403ee83a 	callr	r8
    4504:	99000117 	ldw	r4,4(r19)
    4508:	e13fcc1e 	bne	fp,r4,443c <__alt_mem_epcs_flash_controller+0xfdffb43c>
    450c:	89000017 	ldw	r4,0(r17)
    4510:	993fdc26 	beq	r19,r4,4484 <__alt_mem_epcs_flash_controller+0xfdffb484>
    4514:	003fc906 	br	443c <__alt_mem_epcs_flash_controller+0xfdffb43c>
    4518:	00800034 	movhi	r2,0
    451c:	1080c804 	addi	r2,r2,800
    4520:	10000f26 	beq	r2,zero,4560 <__call_exitprocs+0x160>
    4524:	99400117 	ldw	r5,4(r19)
    4528:	99000017 	ldw	r4,0(r19)
    452c:	2800091e 	bne	r5,zero,4554 <__call_exitprocs+0x154>
    4530:	20000826 	beq	r4,zero,4554 <__call_exitprocs+0x154>
    4534:	89000015 	stw	r4,0(r17)
    4538:	a8000226 	beq	r21,zero,4544 <__call_exitprocs+0x144>
    453c:	a809883a 	mov	r4,r21
    4540:	00003200 	call	320 <free>
    4544:	9809883a 	mov	r4,r19
    4548:	00003200 	call	320 <free>
    454c:	8cc00017 	ldw	r19,0(r17)
    4550:	003fbd06 	br	4448 <__alt_mem_epcs_flash_controller+0xfdffb448>
    4554:	9823883a 	mov	r17,r19
    4558:	2027883a 	mov	r19,r4
    455c:	003fba06 	br	4448 <__alt_mem_epcs_flash_controller+0xfdffb448>
    4560:	dfc00a17 	ldw	ra,40(sp)
    4564:	df000917 	ldw	fp,36(sp)
    4568:	ddc00817 	ldw	r23,32(sp)
    456c:	dd800717 	ldw	r22,28(sp)
    4570:	dd400617 	ldw	r21,24(sp)
    4574:	dd000517 	ldw	r20,20(sp)
    4578:	dcc00417 	ldw	r19,16(sp)
    457c:	dc800317 	ldw	r18,12(sp)
    4580:	dc400217 	ldw	r17,8(sp)
    4584:	dc000117 	ldw	r16,4(sp)
    4588:	dec00b04 	addi	sp,sp,44
    458c:	f800283a 	ret

00004590 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4590:	defffd04 	addi	sp,sp,-12
    4594:	df000215 	stw	fp,8(sp)
    4598:	df000204 	addi	fp,sp,8
    459c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    45a0:	0001883a 	nop
    45a4:	e0bfff17 	ldw	r2,-4(fp)
    45a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    45ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    45b0:	10000226 	beq	r2,zero,45bc <_exit+0x2c>
    ALT_SIM_FAIL();
    45b4:	002af070 	cmpltui	zero,zero,43969
    45b8:	00000106 	br	45c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    45bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    45c0:	003fff06 	br	45c0 <__alt_mem_epcs_flash_controller+0xfdffb5c0>
