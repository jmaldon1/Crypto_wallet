
nios_proj.elf:     file format elf32-littlenios2
nios_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000176ec memsz 0x000176ec flags r-x
    LOAD off    0x0001870c vaddr 0x0001770c paddr 0x00018afc align 2**12
         filesz 0x000013f0 memsz 0x000013f0 flags rw-
    LOAD off    0x00019eec vaddr 0x00019eec paddr 0x00019eec align 2**12
         filesz 0x00000000 memsz 0x00000ce4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000eb8c  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00008950  0000edbc  0000edbc  0000fdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013f0  0001770c  00018afc  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000ce4  00019eec  00019eec  00019eec  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0001abd0  0001abd0  00019afc  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  02000000  02000000  00019afc  2**0
                  CONTENTS
  8 .epcs_flash_controller 00000000  02009000  02009000  00019afc  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00019afc  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a98  00000000  00000000  00019b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00011d68  00000000  00000000  0001a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005693  00000000  00000000  0002c320  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007132  00000000  00000000  000319b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000021e4  00000000  00000000  00038ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003686  00000000  00000000  0003accc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00002edb  00000000  00000000  0003e352  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00041230  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000578  00000000  00000000  00041240  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00044b41  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  00044b44  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00044b47  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00044b48  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00044b49  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00044b4d  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00044b51  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  00044b55  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  00044b5e  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  00044b67  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000d  00000000  00000000  00044b70  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003d  00000000  00000000  00044b7d  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00054373  00000000  00000000  00044bba  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0000edbc l    d  .rodata	00000000 .rodata
0001770c l    d  .rwdata	00000000 .rwdata
00019eec l    d  .bss	00000000 .bss
0001abd0 l    d  .sdram	00000000 .sdram
02000000 l    d  .onchip_memory2	00000000 .onchip_memory2
02009000 l    d  .epcs_flash_controller	00000000 .epcs_flash_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Class2018/Documents/Projects/Crypto_wallet/impl/nios_proj_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 bip32.c
00000000 l    df *ABS*	00000000 bip39.c
00012d94 l     O .rodata	00002004 wordlist
00019eec l     O .bss	00000004 bip39_cache_index
00019f38 l     O .bss	00000604 bip39_cache
0001a53c l     O .bss	000000f0 mnemo.3384
0001a62c l     O .bss	00000144 pctx.3412
00000000 l    df *ABS*	00000000 chainparams.c
00000000 l    df *ABS*	00000000 commontools.c
00000000 l    df *ABS*	00000000 ecc_libsecp256k1.c
00019ef0 l     O .bss	00000004 secp256k1_ctx
00000000 l    df *ABS*	00000000 hmac.c
0001a770 l     O .bss	00000040 i_key_pad.2093
0001a7b0 l     O .bss	000000a8 hctx.2125
0001a858 l     O .bss	00000040 key_pad.2132
0001a898 l     O .bss	00000068 context.2133
0001a900 l     O .bss	00000080 i_key_pad.2154
0001a980 l     O .bss	00000080 key_pad.2193
0001aa00 l     O .bss	000000d0 context.2194
00000000 l    df *ABS*	00000000 memzero.c
00000000 l    df *ABS*	00000000 pbkdf2.c
00000000 l    df *ABS*	00000000 rand.c
00019ef4 l     O .bss	00000004 initialized.3065
00000000 l    df *ABS*	00000000 secp256k1.c
000026e0 l     F .text	00000064 secp256k1_scalar_clear
00002744 l     F .text	00000218 secp256k1_scalar_check_overflow
0000295c l     F .text	00000400 secp256k1_scalar_reduce
00002d5c l     F .text	0000035c secp256k1_scalar_set_b32
000030b8 l     F .text	00000084 secp256k1_scalar_is_zero
00000000 l    df *ABS*	00000000 sha2.c
00016d58 l     O .rodata	00000100 K256
00016e58 l     O .rodata	00000020 sha256_initial_hash_value
00016e78 l     O .rodata	00000280 K512
000170f8 l     O .rodata	00000040 sha512_initial_hash_value
00000000 l    df *ABS*	00000000 sha2mnemonic.c
0001714c l     O .rodata	00000100 K256
0001726c l     O .rodata	00000280 K512
00018ac0 l     O .rwdata	00000004 sha2_hex_digits
00009648 l     F .text	0000050c trezor_sha512_Last
00000000 l    df *ABS*	00000000 wallet_main.c
00000000 l    df *ABS*	00000000 wallet_system.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00019f00 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a628 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0001770c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
0000b1f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00018acc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b5b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b6ec l     F .text	00000034 alt_dev_reg
000177ec l     O .rwdata	000000cc epcs_flash_controller
000178b8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0000b7b0 l     F .text	00000034 alt_flash_device_register
0000b838 l     F .text	000003f8 alt_epcs_flash_query
0000bc30 l     F .text	000000ec alt_epcs_flash_memcmp
0000c008 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c4d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000c6dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
0000cd70 l     F .text	00000038 epcs_test_wip
0000cda8 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d47c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000d5b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d5dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000daf8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000dc58 l     F .text	0000003c alt_get_errno
0000dc94 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00019f34 g     O .bss	00000004 alt_instruction_exception_handler
00008dd8 g     F .text	00000870 trezor_sha512_Update
0000bf7c g     F .text	0000008c alt_epcs_flash_get_info
0000b2e0 g     F .text	0000007c alt_main
0000a590 g     F .text	0000002c strcpy
00015e38 g     O .rodata	0000083c btc_chainparams_regtest
0000a400 g     F .text	00000080 _puts_r
0001aad0 g     O .bss	00000100 alt_irq
00018afc g       *ABS*	00000000 __flash_rwdata_start
0000ac94 g     F .text	00000054 _gettimeofday_r
0001abd0 g       *ABS*	00000000 __alt_heap_start
0000a3b4 g     F .text	0000004c printf
00001dec g     F .text	00000374 pbkdf2_hmac_sha512_Init
00006f0c g     F .text	00000070 trezor_sha256_Init
00007d84 g     F .text	00000058 trezor_sha256_Raw
000053bc g     F .text	00000490 sha512_Last
000174ec g     O .rodata	00000040 sha512_initial_hash_value
00007544 g     F .text	00000408 trezor_sha256_Update
00005aa0 g     F .text	00000058 sha512_Raw
0000df60 g     F .text	00000024 altera_nios2_gen2_irq_init
0000cde4 g     F .text	000000fc epcs_sector_erase
00000000 g     F .entry	0000000c __reset
00005e10 g     F .text	00000064 trezor_sha1_Init
00000020 g       *ABS*	00000000 __flash_exceptions_start
00019f08 g     O .bss	00000004 errno
00019f20 g     O .bss	00000004 alt_argv
00020ac0 g       *ABS*	00000000 _gp
00007eb8 g     F .text	00000f20 trezor_sha512_Transform
0000313c g     F .text	0000007c secp256k1_ec_seckey_verify
00018940 g     O .rwdata	00000180 alt_fd_list
0000d028 g     F .text	0000006c epcs_write_status_register
0000e180 g     F .text	00000090 alt_find_dev
0000a0f4 g     F .text	00000028 memcpy
00003e2c g     F .text	00000058 sha256_Raw
0000dbdc g     F .text	0000007c alt_io_redirect
0000edbc g       *ABS*	00000000 __DTOR_END__
0000a480 g     F .text	00000014 puts
0000e3dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009b54 g     F .text	00000230 trezor_sha512_Final
0000c114 g     F .text	00000100 alt_epcs_flash_write_block
0000c8d4 g     F .text	0000021c altera_avalon_jtag_uart_read
0000a0cc g     F .text	00000014 malloc
0000a378 g     F .text	0000003c _printf_r
0000af44 g     F .text	00000064 .hidden __udivsi3
00001398 g     F .text	000000a8 trezor_hmac_sha512_Final
00000d8c g     F .text	00000138 trezor_hmac_sha256_Init
00019f0c g     O .bss	00000008 alt_timezone
000014a4 g     F .text	00000360 trezor_hmac_sha512_prepare
0000794c g     F .text	00000338 trezor_sha256_Final
00007e30 g     F .text	00000088 trezor_sha512_Init
0000a508 g     F .text	00000050 _sbrk_r
00002160 g     F .text	00000144 pbkdf2_hmac_sha512_Update
00005e74 g     F .text	000007ac trezor_sha1_Transform
00018ae8 g     O .rwdata	00000004 alt_max_fd
00006e60 g     F .text	00000058 trezor_sha1_Raw
0000c09c g     F .text	00000078 alt_epcs_flash_erase_block
0000e7c4 g     F .text	000005c4 .hidden __umoddi3
00018ac4 g     O .rwdata	00000004 _global_impure_ptr
0000d2f4 g     F .text	0000005c epcs_exit_4_bytes_mode
0001abd0 g       *ABS*	00000000 __bss_end
0000da08 g     F .text	000000f0 alt_iic_isr_register
0000b4a8 g     F .text	00000108 alt_tick
0000d9bc g     F .text	0000004c alt_ic_irq_enabled
00006620 g     F .text	00000408 trezor_sha1_Update
0000b40c g     F .text	0000009c alt_alarm_stop
00001804 g     F .text	00000040 memzero
0000026c g     F .text	000000f8 btc_hdnode_from_seed
00019f30 g     O .bss	00000004 alt_irq_active
00007ddc g     F .text	00000054 sha256_Data
000000fc g     F .exceptions	000000d4 alt_irq_handler
00018918 g     O .rwdata	00000028 alt_dev_null
00005af8 g     F .text	0000018c hmac_sha256
0000d590 g     F .text	00000020 alt_dcache_flush_all
00018afc g       *ABS*	00000000 __ram_rwdata_end
00018ae0 g     O .rwdata	00000008 alt_dev_list
0000b5ec g     F .text	00000100 write
00000f10 g     F .text	000000a8 trezor_hmac_sha256_Final
0001770c g       *ABS*	00000000 __ram_rodata_end
0000afa8 g     F .text	00000058 .hidden __umodsi3
0000d1b0 g     F .text	00000068 epcs_read_electronic_signature
0001abd0 g       *ABS*	00000000 end
00002654  w    F .text	0000008c random_buffer
00001440 g     F .text	00000064 trezor_hmac_sha512
000031b8 g     F .text	00000074 sha256_Init
0000c410 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000edbc g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000584c g     F .text	00000254 sha512_Final
0000caf0 g     F .text	00000224 altera_avalon_jtag_uart_write
0000a694 g     F .text	0000052c ___vfprintf_internal_r
0000a13c g     F .text	000000e4 _free_r
00006a28 g     F .text	00000338 trezor_sha1_Final
0000e634 g     F .text	00000190 __call_exitprocs
00002460 g     F .text	00000170 pbkdf2_hmac_sha512
00000230 g     F .text	0000003c _start
00019f28 g     O .bss	00000004 _alt_tick_rate
0000a4a8 g     F .text	00000060 rand
0000df84 g     F .text	000001fc alt_avalon_spi_command
00019f2c g     O .bss	00000004 _alt_nticks
0000b758 g     F .text	00000058 alt_sys_init
0000e4dc g     F .text	00000158 __register_exitproc
00016c08 g     O .rodata	00000150 btc_mainnet_checkpoint_array
0000c77c g     F .text	00000068 altera_avalon_jtag_uart_close
0000a0a4 g     F .text	00000028 .hidden __mulsi3
0001770c g       *ABS*	00000000 __ram_rwdata_start
0000edbc g       *ABS*	00000000 __ram_rodata_start
0000cd14 g     F .text	0000005c epcs_read_status_register
0000322c g     F .text	000005c0 sha256_Transform
0000c2ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000e318 g     F .text	000000c4 alt_get_fd
00007c84 g     F .text	00000100 trezor_sha256_End
00001844 g     F .text	00000220 pbkdf2_hmac_sha256_Init
00001b94 g     F .text	000000e8 pbkdf2_hmac_sha256_Final
0000d218 g     F .text	00000080 epcs_read_device_id
0000e4ac g     F .text	00000030 memcmp
0000c36c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001abd0 g       *ABS*	00000000 __alt_stack_base
0000c3bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009d84 g     F .text	00000100 trezor_sha512_End
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
00006eb8 g     F .text	00000054 trezor_sha1_Data
0000e210 g     F .text	00000108 alt_find_file
000025d0 g     F .text	00000084 random32
0000d618 g     F .text	000000a4 alt_dev_llist_insert
0000b35c g     F .text	000000b0 sbrk
00018af0 g     O .rwdata	00000008 alt_flash_dev_list
0000abdc g     F .text	000000b8 __sfvwrite_small_dev
0000b000 g     F .text	000001f4 gettimeofday
00019eec g       *ABS*	00000000 __bss_start
0000a11c g     F .text	00000020 memset
00009f30 g     F .text	00000174 main
00003a94 g     F .text	00000398 sha256_Final
00019f24 g     O .bss	00000004 alt_envp
0000c30c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a494 g     F .text	00000014 srand
00000364 g     F .text	000000a0 mnemonic_generate
02000000 g       *ABS*	00000000 __alt_heap_limit
0000a220 g     F .text	00000158 _malloc_r
0000a5d8 g     F .text	00000050 time
00018aec g     O .rwdata	00000004 alt_errno
00014dac g     O .rodata	0000083c btc_chainparams_main
0000ae4c g     F .text	00000084 .hidden __divsi3
0000edbc g       *ABS*	00000000 __CTOR_END__
0000bd1c g     F .text	00000260 alt_epcs_flash_write
0000a558 g     F .text	00000038 strcmp
0000edbc g       *ABS*	00000000 __flash_rodata_start
0000edbc g       *ABS*	00000000 __DTOR_LIST__
00004f70 g     F .text	0000044c sha512_Update
0000b720 g     F .text	00000038 alt_irq_init
0000dedc g     F .text	00000084 alt_release_fd
00003e84 g     F .text	0000008c sha512_Init
0001760a g     O .rodata	00000100 .hidden __clz_tab
00000404 g     F .text	0000025c mnemonic_from_data
0000e478 g     F .text	00000014 atexit
0000ace8 g     F .text	00000058 _write_r
00000cfc g     F .text	00000058 hd_gen_master
00018ac8 g     O .rwdata	00000004 _impure_ptr
00019f1c g     O .bss	00000004 alt_argc
0000d71c g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00000d54 g     F .text	00000038 btc_ecc_verify_privatekey
00017138 g     O .rodata	00000014 sha1_initial_hash_value
00018ad8 g     O .rwdata	00000008 alt_fs_list
00019f14 g     O .bss	00000008 alt_resettime
00006f7c g     F .text	000005c8 trezor_sha256_Transform
00003f10 g     F .text	00001060 sha512_Transform
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000cee0 g     F .text	000000f4 epcs_read_buffer
02000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0001724c g     O .rodata	00000020 sha256_initial_hash_value
0000b7e4 g     F .text	00000054 alt_epcs_flash_init
00000fb8 g     F .text	00000070 trezor_hmac_sha256
0000d858 g     F .text	00000050 alt_ic_isr_register
00018afc g       *ABS*	00000000 _edata
00006d60 g     F .text	00000100 trezor_sha1_End
0001abd0 g       *ABS*	00000000 _end
0000d77c g     F .text	00000068 alt_flash_open_dev
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000c7e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000d930 g     F .text	0000008c alt_ic_irq_disable
0000d298 g     F .text	0000005c epcs_enter_4_bytes_mode
00001a64 g     F .text	00000130 pbkdf2_hmac_sha256_Update
000037ec g     F .text	000002a8 sha256_Update
0000e48c g     F .text	00000020 exit
0000d7e4 g     F .text	00000054 alt_flash_close_dev
0000aed0 g     F .text	00000074 .hidden __modsi3
000022a4 g     F .text	000001bc pbkdf2_hmac_sha512_Final
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000009c8 g     F .text	00000334 mnemonic_to_entropy
0000ed88 g     F .text	00000034 _exit
0000d350 g     F .text	0000012c alt_alarm_start
0000ad40 g     F .text	0000010c .hidden __muldi3
000155f4 g     O .rodata	0000083c btc_chainparams_test
0000a5bc g     F .text	0000001c strlen
0000cfd4 g     F .text	00000054 epcs_write_enable
0000dd80 g     F .text	0000015c open
00001c7c g     F .text	00000170 pbkdf2_hmac_sha256
00019ef8 g     O .bss	00000004 __malloc_sbrk_start
00001214 g     F .text	00000138 trezor_hmac_sha512_Init
00009edc g     F .text	00000054 trezor_sha512_Data
0000d838 g     F .text	00000020 alt_icache_flush_all
00000660 g     F .text	00000368 mnemonic_to_seed
00005c84 g     F .text	0000018c hmac_sha512
0000134c g     F .text	0000004c trezor_hmac_sha512_Update
00018af8 g     O .rwdata	00000004 alt_priority_mask
00019efc g     O .bss	00000004 __malloc_free_list
00009e84 g     F .text	00000058 trezor_sha512_Raw
0000d8a8 g     F .text	00000088 alt_ic_irq_enable
0000abc0 g     F .text	0000001c __vfprintf_internal
0000c214 g     F .text	00000098 alt_epcs_flash_read
00018ad0 g     O .rwdata	00000008 alt_alarm_list
0000d6bc g     F .text	00000060 _do_ctors
00000ec4 g     F .text	0000004c trezor_hmac_sha256_Update
0000d4b8 g     F .text	000000d8 close
0000b25c g     F .text	00000084 alt_load
00001028 g     F .text	000001ec trezor_hmac_sha256_prepare
0000a0e0 g     F .text	00000014 free
0000d094 g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10aab404 	addi	r2,r2,-21808
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10aab404 	addi	r2,r2,-21808
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_epcs_flash_controller+0xfdff712c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_epcs_flash_controller+0xfdff7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a51d17 	ldw	r2,-27532(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a51d17 	ldw	r2,-27532(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     23c:	d682b014 	ori	gp,gp,2752
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10a7bb14 	ori	r2,r2,40684

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18eaf414 	ori	r3,r3,43984

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_epcs_flash_controller+0xfdff7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000b25c0 	call	b25c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000b2e00 	call	b2e0 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_epcs_flash_controller+0xfdff7268>

0000026c <btc_hdnode_from_seed>:
//    memset(hdnode->public_key, 0, sizeof(hdnode->public_key));
//    btc_free(hdnode);
//}
//
btc_bool btc_hdnode_from_seed(const uint8_t* seed, int seed_len, btc_hdnode* out)
{
     26c:	deffea04 	addi	sp,sp,-88
     270:	dfc01515 	stw	ra,84(sp)
     274:	df001415 	stw	fp,80(sp)
     278:	df001404 	addi	fp,sp,80
     27c:	e13ffd15 	stw	r4,-12(fp)
     280:	e17ffe15 	stw	r5,-8(fp)
     284:	e1bfff15 	stw	r6,-4(fp)
    uint8_t I[BTC_ECKEY_PKEY_LENGTH + BTC_BIP32_CHAINCODE_SIZE];
    memset(out, 0, sizeof(btc_hdnode));
     288:	01805c04 	movi	r6,368
     28c:	000b883a 	mov	r5,zero
     290:	e13fff17 	ldw	r4,-4(fp)
     294:	000a11c0 	call	a11c <memset>
    out->depth = 0;
     298:	e0bfff17 	ldw	r2,-4(fp)
     29c:	10000015 	stw	zero,0(r2)
    out->fingerprint = 0x00000000;
     2a0:	e0bfff17 	ldw	r2,-4(fp)
     2a4:	10000115 	stw	zero,4(r2)
    out->child_num = 0;
     2a8:	e0bfff17 	ldw	r2,-4(fp)
     2ac:	10000215 	stw	zero,8(r2)
    hmac_sha512((const uint8_t*)"Bitcoin seed", 12, seed, seed_len, I);
     2b0:	e0bffe17 	ldw	r2,-8(fp)
     2b4:	e0ffed04 	addi	r3,fp,-76
     2b8:	d8c00015 	stw	r3,0(sp)
     2bc:	100f883a 	mov	r7,r2
     2c0:	e1bffd17 	ldw	r6,-12(fp)
     2c4:	01400304 	movi	r5,12
     2c8:	01000074 	movhi	r4,1
     2cc:	213b6f04 	addi	r4,r4,-4676
     2d0:	0005c840 	call	5c84 <hmac_sha512>
    memcpy(out->private_key, I, BTC_ECKEY_PKEY_LENGTH);
     2d4:	e0bfff17 	ldw	r2,-4(fp)
     2d8:	10800b04 	addi	r2,r2,44
     2dc:	01800804 	movi	r6,32
     2e0:	e17fed04 	addi	r5,fp,-76
     2e4:	1009883a 	mov	r4,r2
     2e8:	000a0f40 	call	a0f4 <memcpy>
//	printf("Seed: ");
//		for(int i = 0; i < BTC_ECKEY_PKEY_LENGTH; i++){
//		printf("%x", out->private_key[i]);
//	}
//
    if (!btc_ecc_verify_privatekey(out->private_key)) {
     2ec:	e0bfff17 	ldw	r2,-4(fp)
     2f0:	10800b04 	addi	r2,r2,44
     2f4:	1009883a 	mov	r4,r2
     2f8:	0000d540 	call	d54 <btc_ecc_verify_privatekey>
     2fc:	1000061e 	bne	r2,zero,318 <btc_hdnode_from_seed+0xac>
        memset(I, 0, sizeof(I));
     300:	01801004 	movi	r6,64
     304:	000b883a 	mov	r5,zero
     308:	e13fed04 	addi	r4,fp,-76
     30c:	000a11c0 	call	a11c <memset>
        return false;
     310:	0005883a 	mov	r2,zero
     314:	00000e06 	br	350 <btc_hdnode_from_seed+0xe4>
    }

    printf("%s", out->private_key);
     318:	e0bfff17 	ldw	r2,-4(fp)
     31c:	10800b04 	addi	r2,r2,44
     320:	100b883a 	mov	r5,r2
     324:	01000074 	movhi	r4,1
     328:	213b7304 	addi	r4,r4,-4660
     32c:	000a3b40 	call	a3b4 <printf>
    memcpy(out->chain_code, I + BTC_ECKEY_PKEY_LENGTH, BTC_BIP32_CHAINCODE_SIZE);
     330:	e0bfff17 	ldw	r2,-4(fp)
     334:	10800304 	addi	r2,r2,12
     338:	e0fff504 	addi	r3,fp,-44
     33c:	01800804 	movi	r6,32
     340:	180b883a 	mov	r5,r3
     344:	1009883a 	mov	r4,r2
     348:	000a0f40 	call	a0f4 <memcpy>
//    btc_hdnode_fill_public_key(out);
//    memset(I, 0, sizeof(I));
    return true;
     34c:	00800044 	movi	r2,1
}
     350:	e037883a 	mov	sp,fp
     354:	dfc00117 	ldw	ra,4(sp)
     358:	df000017 	ldw	fp,0(sp)
     35c:	dec00204 	addi	sp,sp,8
     360:	f800283a 	ret

00000364 <mnemonic_generate>:
} bip39_cache[BIP39_CACHE_SIZE];

#endif

const char *mnemonic_generate(int strength)
{
     364:	defff404 	addi	sp,sp,-48
     368:	dfc00b15 	stw	ra,44(sp)
     36c:	df000a15 	stw	fp,40(sp)
     370:	df000a04 	addi	fp,sp,40
     374:	e13fff15 	stw	r4,-4(fp)
	if (strength % 32 || strength < 128 || strength > 256) {
     378:	e0bfff17 	ldw	r2,-4(fp)
     37c:	108007cc 	andi	r2,r2,31
     380:	1000061e 	bne	r2,zero,39c <mnemonic_generate+0x38>
     384:	e0bfff17 	ldw	r2,-4(fp)
     388:	10802010 	cmplti	r2,r2,128
     38c:	1000031e 	bne	r2,zero,39c <mnemonic_generate+0x38>
     390:	e0bfff17 	ldw	r2,-4(fp)
     394:	10804050 	cmplti	r2,r2,257
     398:	1000021e 	bne	r2,zero,3a4 <mnemonic_generate+0x40>
		return 0;
     39c:	0005883a 	mov	r2,zero
     3a0:	00001306 	br	3f0 <mnemonic_generate+0x8c>
	}
	uint8_t data[32];
	random_buffer(data, 32);
     3a4:	e0bff704 	addi	r2,fp,-36
     3a8:	01400804 	movi	r5,32
     3ac:	1009883a 	mov	r4,r2
     3b0:	00026540 	call	2654 <random_buffer>
//	btc_random_bytes(data, BTC_ECKEY_PKEY_LENGTH, 0);
	// for(int i = 0; i < 32; i++){
	// 	printf("%x\n", data[i]);
	// }
	const char *r = mnemonic_from_data(data, strength / 8);
     3b4:	e0bfff17 	ldw	r2,-4(fp)
     3b8:	1000010e 	bge	r2,zero,3c0 <mnemonic_generate+0x5c>
     3bc:	108001c4 	addi	r2,r2,7
     3c0:	1005d0fa 	srai	r2,r2,3
     3c4:	1007883a 	mov	r3,r2
     3c8:	e0bff704 	addi	r2,fp,-36
     3cc:	180b883a 	mov	r5,r3
     3d0:	1009883a 	mov	r4,r2
     3d4:	00004040 	call	404 <mnemonic_from_data>
     3d8:	e0bff615 	stw	r2,-40(fp)
	memzero(data, sizeof(data));
     3dc:	e0bff704 	addi	r2,fp,-36
     3e0:	01400804 	movi	r5,32
     3e4:	1009883a 	mov	r4,r2
     3e8:	00018040 	call	1804 <memzero>
	return r;
     3ec:	e0bff617 	ldw	r2,-40(fp)
}
     3f0:	e037883a 	mov	sp,fp
     3f4:	dfc00117 	ldw	ra,4(sp)
     3f8:	df000017 	ldw	fp,0(sp)
     3fc:	dec00204 	addi	sp,sp,8
     400:	f800283a 	ret

00000404 <mnemonic_from_data>:

char *mnemonic_from_data(const uint8_t *data, int len)
{
     404:	deffed04 	addi	sp,sp,-76
     408:	dfc01215 	stw	ra,72(sp)
     40c:	df001115 	stw	fp,68(sp)
     410:	dc001015 	stw	r16,64(sp)
     414:	df001104 	addi	fp,sp,68
     418:	e13ffd15 	stw	r4,-12(fp)
     41c:	e17ffe15 	stw	r5,-8(fp)
	if (len % 4 || len < 16 || len > 32) {
     420:	e0bffe17 	ldw	r2,-8(fp)
     424:	108000cc 	andi	r2,r2,3
     428:	1000061e 	bne	r2,zero,444 <mnemonic_from_data+0x40>
     42c:	e0bffe17 	ldw	r2,-8(fp)
     430:	10800410 	cmplti	r2,r2,16
     434:	1000031e 	bne	r2,zero,444 <mnemonic_from_data+0x40>
     438:	e0bffe17 	ldw	r2,-8(fp)
     43c:	10800850 	cmplti	r2,r2,33
     440:	1000021e 	bne	r2,zero,44c <mnemonic_from_data+0x48>
		return 0;
     444:	0005883a 	mov	r2,zero
     448:	00007f06 	br	648 <mnemonic_from_data+0x244>
	}

	uint8_t bits[32 + 1];

	trezor_sha256_Raw(data, len, bits);
     44c:	e0bff404 	addi	r2,fp,-48
     450:	100d883a 	mov	r6,r2
     454:	e17ffe17 	ldw	r5,-8(fp)
     458:	e13ffd17 	ldw	r4,-12(fp)
     45c:	0007d840 	call	7d84 <trezor_sha256_Raw>
	// checksum
	bits[len] = bits[0];
     460:	e0fff403 	ldbu	r3,-48(fp)
     464:	e13ff404 	addi	r4,fp,-48
     468:	e0bffe17 	ldw	r2,-8(fp)
     46c:	2085883a 	add	r2,r4,r2
     470:	10c00005 	stb	r3,0(r2)
	// data
	memcpy(bits, data, len);
     474:	e0fffe17 	ldw	r3,-8(fp)
     478:	e0bff404 	addi	r2,fp,-48
     47c:	180d883a 	mov	r6,r3
     480:	e17ffd17 	ldw	r5,-12(fp)
     484:	1009883a 	mov	r4,r2
     488:	000a0f40 	call	a0f4 <memcpy>

	int mlen = len * 3 / 4;
     48c:	e0fffe17 	ldw	r3,-8(fp)
     490:	1805883a 	mov	r2,r3
     494:	1085883a 	add	r2,r2,r2
     498:	10c5883a 	add	r2,r2,r3
     49c:	1000010e 	bge	r2,zero,4a4 <mnemonic_from_data+0xa0>
     4a0:	108000c4 	addi	r2,r2,3
     4a4:	1005d0ba 	srai	r2,r2,2
     4a8:	e0bff315 	stw	r2,-52(fp)
	static CONFIDENTIAL char mnemo[24 * 10];

	int i, j, idx;
	char *p = mnemo;
     4ac:	008000b4 	movhi	r2,2
     4b0:	10a94f04 	addi	r2,r2,-23236
     4b4:	e0bff215 	stw	r2,-56(fp)
	for (i = 0; i < mlen; i++) {
     4b8:	e03fef15 	stw	zero,-68(fp)
     4bc:	00005906 	br	624 <mnemonic_from_data+0x220>
		idx = 0;
     4c0:	e03ff115 	stw	zero,-60(fp)
		for (j = 0; j < 11; j++) {
     4c4:	e03ff015 	stw	zero,-64(fp)
     4c8:	00002d06 	br	580 <mnemonic_from_data+0x17c>
			idx <<= 1;
     4cc:	e0bff117 	ldw	r2,-60(fp)
     4d0:	1085883a 	add	r2,r2,r2
     4d4:	e0bff115 	stw	r2,-60(fp)
			idx += (bits[(i * 11 + j) / 8] & (1 << (7 - ((i * 11 + j) % 8)))) > 0;
     4d8:	014002c4 	movi	r5,11
     4dc:	e13fef17 	ldw	r4,-68(fp)
     4e0:	000a0a40 	call	a0a4 <__mulsi3>
     4e4:	1007883a 	mov	r3,r2
     4e8:	e0bff017 	ldw	r2,-64(fp)
     4ec:	1885883a 	add	r2,r3,r2
     4f0:	1000010e 	bge	r2,zero,4f8 <mnemonic_from_data+0xf4>
     4f4:	108001c4 	addi	r2,r2,7
     4f8:	1005d0fa 	srai	r2,r2,3
     4fc:	1007883a 	mov	r3,r2
     500:	e0bff404 	addi	r2,fp,-48
     504:	10c5883a 	add	r2,r2,r3
     508:	10800003 	ldbu	r2,0(r2)
     50c:	14003fcc 	andi	r16,r2,255
     510:	014002c4 	movi	r5,11
     514:	e13fef17 	ldw	r4,-68(fp)
     518:	000a0a40 	call	a0a4 <__mulsi3>
     51c:	1007883a 	mov	r3,r2
     520:	e0bff017 	ldw	r2,-64(fp)
     524:	1887883a 	add	r3,r3,r2
     528:	00a00034 	movhi	r2,32768
     52c:	108001c4 	addi	r2,r2,7
     530:	1884703a 	and	r2,r3,r2
     534:	1000040e 	bge	r2,zero,548 <mnemonic_from_data+0x144>
     538:	10bfffc4 	addi	r2,r2,-1
     53c:	00fffe04 	movi	r3,-8
     540:	10c4b03a 	or	r2,r2,r3
     544:	10800044 	addi	r2,r2,1
     548:	1007883a 	mov	r3,r2
     54c:	008001c4 	movi	r2,7
     550:	10c5c83a 	sub	r2,r2,r3
     554:	00c00044 	movi	r3,1
     558:	1884983a 	sll	r2,r3,r2
     55c:	8084703a 	and	r2,r16,r2
     560:	0084803a 	cmplt	r2,zero,r2
     564:	10803fcc 	andi	r2,r2,255
     568:	e0fff117 	ldw	r3,-60(fp)
     56c:	1885883a 	add	r2,r3,r2
     570:	e0bff115 	stw	r2,-60(fp)

	int i, j, idx;
	char *p = mnemo;
	for (i = 0; i < mlen; i++) {
		idx = 0;
		for (j = 0; j < 11; j++) {
     574:	e0bff017 	ldw	r2,-64(fp)
     578:	10800044 	addi	r2,r2,1
     57c:	e0bff015 	stw	r2,-64(fp)
     580:	e0bff017 	ldw	r2,-64(fp)
     584:	108002d0 	cmplti	r2,r2,11
     588:	103fd01e 	bne	r2,zero,4cc <__alt_mem_epcs_flash_controller+0xfdff74cc>
			idx <<= 1;
			idx += (bits[(i * 11 + j) / 8] & (1 << (7 - ((i * 11 + j) % 8)))) > 0;
		}
		strcpy(p, wordlist[idx]);
     58c:	00800074 	movhi	r2,1
     590:	108b6504 	addi	r2,r2,11668
     594:	e0fff117 	ldw	r3,-60(fp)
     598:	18c7883a 	add	r3,r3,r3
     59c:	18c7883a 	add	r3,r3,r3
     5a0:	10c5883a 	add	r2,r2,r3
     5a4:	10800017 	ldw	r2,0(r2)
     5a8:	100b883a 	mov	r5,r2
     5ac:	e13ff217 	ldw	r4,-56(fp)
     5b0:	000a5900 	call	a590 <strcpy>
		p += strlen(wordlist[idx]);
     5b4:	00800074 	movhi	r2,1
     5b8:	108b6504 	addi	r2,r2,11668
     5bc:	e0fff117 	ldw	r3,-60(fp)
     5c0:	18c7883a 	add	r3,r3,r3
     5c4:	18c7883a 	add	r3,r3,r3
     5c8:	10c5883a 	add	r2,r2,r3
     5cc:	10800017 	ldw	r2,0(r2)
     5d0:	1009883a 	mov	r4,r2
     5d4:	000a5bc0 	call	a5bc <strlen>
     5d8:	1007883a 	mov	r3,r2
     5dc:	e0bff217 	ldw	r2,-56(fp)
     5e0:	10c5883a 	add	r2,r2,r3
     5e4:	e0bff215 	stw	r2,-56(fp)
		*p = (i < mlen - 1) ? ' ' : 0;
     5e8:	e0bff317 	ldw	r2,-52(fp)
     5ec:	10bfffc4 	addi	r2,r2,-1
     5f0:	e0ffef17 	ldw	r3,-68(fp)
     5f4:	1880020e 	bge	r3,r2,600 <mnemonic_from_data+0x1fc>
     5f8:	00800804 	movi	r2,32
     5fc:	00000106 	br	604 <mnemonic_from_data+0x200>
     600:	0005883a 	mov	r2,zero
     604:	e0fff217 	ldw	r3,-56(fp)
     608:	18800005 	stb	r2,0(r3)
		p++;
     60c:	e0bff217 	ldw	r2,-56(fp)
     610:	10800044 	addi	r2,r2,1
     614:	e0bff215 	stw	r2,-56(fp)
	int mlen = len * 3 / 4;
	static CONFIDENTIAL char mnemo[24 * 10];

	int i, j, idx;
	char *p = mnemo;
	for (i = 0; i < mlen; i++) {
     618:	e0bfef17 	ldw	r2,-68(fp)
     61c:	10800044 	addi	r2,r2,1
     620:	e0bfef15 	stw	r2,-68(fp)
     624:	e0ffef17 	ldw	r3,-68(fp)
     628:	e0bff317 	ldw	r2,-52(fp)
     62c:	18bfa416 	blt	r3,r2,4c0 <__alt_mem_epcs_flash_controller+0xfdff74c0>
		strcpy(p, wordlist[idx]);
		p += strlen(wordlist[idx]);
		*p = (i < mlen - 1) ? ' ' : 0;
		p++;
	}
	memzero(bits, sizeof(bits));
     630:	e0bff404 	addi	r2,fp,-48
     634:	01400844 	movi	r5,33
     638:	1009883a 	mov	r4,r2
     63c:	00018040 	call	1804 <memzero>

	return mnemo;
     640:	008000b4 	movhi	r2,2
     644:	10a94f04 	addi	r2,r2,-23236
}
     648:	e6ffff04 	addi	sp,fp,-4
     64c:	dfc00217 	ldw	ra,8(sp)
     650:	df000117 	ldw	fp,4(sp)
     654:	dc000017 	ldw	r16,0(sp)
     658:	dec00304 	addi	sp,sp,12
     65c:	f800283a 	ret

00000660 <mnemonic_to_seed>:

// passphrase must be at most 256 characters or code may crash
void mnemonic_to_seed(const char *mnemonic, const char *passphrase, uint8_t seed[512 / 8], void (*progress_callback)(uint32_t current, uint32_t total))
{
     660:	deffb104 	addi	sp,sp,-316
     664:	dfc04e15 	stw	ra,312(sp)
     668:	df004d15 	stw	fp,308(sp)
     66c:	dc004c15 	stw	r16,304(sp)
     670:	df004d04 	addi	fp,sp,308
     674:	e13ffb15 	stw	r4,-20(fp)
     678:	e17ffc15 	stw	r5,-16(fp)
     67c:	e1bffd15 	stw	r6,-12(fp)
     680:	e1fffe15 	stw	r7,-8(fp)
	int passphraselen = strlen(passphrase);
     684:	e13ffc17 	ldw	r4,-16(fp)
     688:	000a5bc0 	call	a5bc <strlen>
     68c:	e0bfb715 	stw	r2,-292(fp)
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
     690:	e13ffb17 	ldw	r4,-20(fp)
     694:	000a5bc0 	call	a5bc <strlen>
     698:	e0bfb815 	stw	r2,-288(fp)
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
     69c:	e0bfb817 	ldw	r2,-288(fp)
     6a0:	10804008 	cmpgei	r2,r2,256
     6a4:	1000401e 	bne	r2,zero,7a8 <mnemonic_to_seed+0x148>
     6a8:	e0bfb717 	ldw	r2,-292(fp)
     6ac:	10801008 	cmpgei	r2,r2,64
     6b0:	10003d1e 	bne	r2,zero,7a8 <mnemonic_to_seed+0x148>
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
     6b4:	e03fb515 	stw	zero,-300(fp)
     6b8:	00003806 	br	79c <mnemonic_to_seed+0x13c>
			if (!bip39_cache[i].set) continue;
     6bc:	040000b4 	movhi	r16,2
     6c0:	8427ce04 	addi	r16,r16,-24776
     6c4:	e0bfb517 	ldw	r2,-300(fp)
     6c8:	01406044 	movi	r5,385
     6cc:	1009883a 	mov	r4,r2
     6d0:	000a0a40 	call	a0a4 <__mulsi3>
     6d4:	8085883a 	add	r2,r16,r2
     6d8:	10800003 	ldbu	r2,0(r2)
     6dc:	1080005c 	xori	r2,r2,1
     6e0:	10803fcc 	andi	r2,r2,255
     6e4:	1000251e 	bne	r2,zero,77c <mnemonic_to_seed+0x11c>
			if (strcmp(bip39_cache[i].mnemonic, mnemonic) != 0) continue;
     6e8:	01406044 	movi	r5,385
     6ec:	e13fb517 	ldw	r4,-300(fp)
     6f0:	000a0a40 	call	a0a4 <__mulsi3>
     6f4:	1007883a 	mov	r3,r2
     6f8:	008000b4 	movhi	r2,2
     6fc:	10a7ce04 	addi	r2,r2,-24776
     700:	1885883a 	add	r2,r3,r2
     704:	10800044 	addi	r2,r2,1
     708:	e17ffb17 	ldw	r5,-20(fp)
     70c:	1009883a 	mov	r4,r2
     710:	000a5580 	call	a558 <strcmp>
     714:	10001b1e 	bne	r2,zero,784 <mnemonic_to_seed+0x124>
			if (strcmp(bip39_cache[i].passphrase, passphrase) != 0) continue;
     718:	01406044 	movi	r5,385
     71c:	e13fb517 	ldw	r4,-300(fp)
     720:	000a0a40 	call	a0a4 <__mulsi3>
     724:	10c04004 	addi	r3,r2,256
     728:	008000b4 	movhi	r2,2
     72c:	10a7ce04 	addi	r2,r2,-24776
     730:	1885883a 	add	r2,r3,r2
     734:	10800044 	addi	r2,r2,1
     738:	e17ffc17 	ldw	r5,-16(fp)
     73c:	1009883a 	mov	r4,r2
     740:	000a5580 	call	a558 <strcmp>
     744:	1000111e 	bne	r2,zero,78c <mnemonic_to_seed+0x12c>
			// found the correct entry
			memcpy(seed, bip39_cache[i].seed, 512 / 8);
     748:	01406044 	movi	r5,385
     74c:	e13fb517 	ldw	r4,-300(fp)
     750:	000a0a40 	call	a0a4 <__mulsi3>
     754:	10c05004 	addi	r3,r2,320
     758:	008000b4 	movhi	r2,2
     75c:	10a7ce04 	addi	r2,r2,-24776
     760:	1885883a 	add	r2,r3,r2
     764:	10800044 	addi	r2,r2,1
     768:	01801004 	movi	r6,64
     76c:	100b883a 	mov	r5,r2
     770:	e13ffd17 	ldw	r4,-12(fp)
     774:	000a0f40 	call	a0f4 <memcpy>
			return;
     778:	00008d06 	br	9b0 <mnemonic_to_seed+0x350>
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
			if (!bip39_cache[i].set) continue;
     77c:	0001883a 	nop
     780:	00000306 	br	790 <mnemonic_to_seed+0x130>
			if (strcmp(bip39_cache[i].mnemonic, mnemonic) != 0) continue;
     784:	0001883a 	nop
     788:	00000106 	br	790 <mnemonic_to_seed+0x130>
			if (strcmp(bip39_cache[i].passphrase, passphrase) != 0) continue;
     78c:	0001883a 	nop
	int passphraselen = strlen(passphrase);
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
     790:	e0bfb517 	ldw	r2,-300(fp)
     794:	10800044 	addi	r2,r2,1
     798:	e0bfb515 	stw	r2,-300(fp)
     79c:	e0bfb517 	ldw	r2,-300(fp)
     7a0:	10800110 	cmplti	r2,r2,4
     7a4:	103fc51e 	bne	r2,zero,6bc <__alt_mem_epcs_flash_controller+0xfdff76bc>
			return;
		}
	}
#endif
	uint8_t salt[8 + 256];
	memcpy(salt, "mnemonic", 8);
     7a8:	e0bfb904 	addi	r2,fp,-284
     7ac:	01800204 	movi	r6,8
     7b0:	01400074 	movhi	r5,1
     7b4:	29536604 	addi	r5,r5,19864
     7b8:	1009883a 	mov	r4,r2
     7bc:	000a0f40 	call	a0f4 <memcpy>
	memcpy(salt + 8, passphrase, passphraselen);
     7c0:	e0bfb904 	addi	r2,fp,-284
     7c4:	10800204 	addi	r2,r2,8
     7c8:	e0ffb717 	ldw	r3,-292(fp)
     7cc:	180d883a 	mov	r6,r3
     7d0:	e17ffc17 	ldw	r5,-16(fp)
     7d4:	1009883a 	mov	r4,r2
     7d8:	000a0f40 	call	a0f4 <memcpy>
	static CONFIDENTIAL PBKDF2_HMAC_SHA512_CTX pctx;
	pbkdf2_hmac_sha512_Init(&pctx, (const uint8_t *)mnemonic, strlen(mnemonic), salt, passphraselen + 8, 1);
     7dc:	e13ffb17 	ldw	r4,-20(fp)
     7e0:	000a5bc0 	call	a5bc <strlen>
     7e4:	100b883a 	mov	r5,r2
     7e8:	e0bfb717 	ldw	r2,-292(fp)
     7ec:	10800204 	addi	r2,r2,8
     7f0:	e13fb904 	addi	r4,fp,-284
     7f4:	00c00044 	movi	r3,1
     7f8:	d8c00115 	stw	r3,4(sp)
     7fc:	d8800015 	stw	r2,0(sp)
     800:	200f883a 	mov	r7,r4
     804:	280d883a 	mov	r6,r5
     808:	e17ffb17 	ldw	r5,-20(fp)
     80c:	010000b4 	movhi	r4,2
     810:	21298b04 	addi	r4,r4,-22996
     814:	0001dec0 	call	1dec <pbkdf2_hmac_sha512_Init>
	if (progress_callback) {
     818:	e0bffe17 	ldw	r2,-8(fp)
     81c:	10000426 	beq	r2,zero,830 <mnemonic_to_seed+0x1d0>
		progress_callback(0, BIP39_PBKDF2_ROUNDS);
     820:	e0bffe17 	ldw	r2,-8(fp)
     824:	01420004 	movi	r5,2048
     828:	0009883a 	mov	r4,zero
     82c:	103ee83a 	callr	r2
	}
	for (int i = 0; i < 16; i++) {
     830:	e03fb615 	stw	zero,-296(fp)
     834:	00001406 	br	888 <mnemonic_to_seed+0x228>
		pbkdf2_hmac_sha512_Update(&pctx, BIP39_PBKDF2_ROUNDS / 16);
     838:	01402004 	movi	r5,128
     83c:	010000b4 	movhi	r4,2
     840:	21298b04 	addi	r4,r4,-22996
     844:	00021600 	call	2160 <pbkdf2_hmac_sha512_Update>
		if (progress_callback) {
     848:	e0bffe17 	ldw	r2,-8(fp)
     84c:	10000b26 	beq	r2,zero,87c <mnemonic_to_seed+0x21c>
			progress_callback((i + 1) * BIP39_PBKDF2_ROUNDS / 16, BIP39_PBKDF2_ROUNDS);
     850:	e0bfb617 	ldw	r2,-296(fp)
     854:	10800044 	addi	r2,r2,1
     858:	100492fa 	slli	r2,r2,11
     85c:	1000010e 	bge	r2,zero,864 <mnemonic_to_seed+0x204>
     860:	108003c4 	addi	r2,r2,15
     864:	1005d13a 	srai	r2,r2,4
     868:	1007883a 	mov	r3,r2
     86c:	e0bffe17 	ldw	r2,-8(fp)
     870:	01420004 	movi	r5,2048
     874:	1809883a 	mov	r4,r3
     878:	103ee83a 	callr	r2
	static CONFIDENTIAL PBKDF2_HMAC_SHA512_CTX pctx;
	pbkdf2_hmac_sha512_Init(&pctx, (const uint8_t *)mnemonic, strlen(mnemonic), salt, passphraselen + 8, 1);
	if (progress_callback) {
		progress_callback(0, BIP39_PBKDF2_ROUNDS);
	}
	for (int i = 0; i < 16; i++) {
     87c:	e0bfb617 	ldw	r2,-296(fp)
     880:	10800044 	addi	r2,r2,1
     884:	e0bfb615 	stw	r2,-296(fp)
     888:	e0bfb617 	ldw	r2,-296(fp)
     88c:	10800410 	cmplti	r2,r2,16
     890:	103fe91e 	bne	r2,zero,838 <__alt_mem_epcs_flash_controller+0xfdff7838>
		pbkdf2_hmac_sha512_Update(&pctx, BIP39_PBKDF2_ROUNDS / 16);
		if (progress_callback) {
			progress_callback((i + 1) * BIP39_PBKDF2_ROUNDS / 16, BIP39_PBKDF2_ROUNDS);
		}
	}
	pbkdf2_hmac_sha512_Final(&pctx, seed);
     894:	e17ffd17 	ldw	r5,-12(fp)
     898:	010000b4 	movhi	r4,2
     89c:	21298b04 	addi	r4,r4,-22996
     8a0:	00022a40 	call	22a4 <pbkdf2_hmac_sha512_Final>
	memzero(salt, sizeof(salt));
     8a4:	e0bfb904 	addi	r2,fp,-284
     8a8:	01404204 	movi	r5,264
     8ac:	1009883a 	mov	r4,r2
     8b0:	00018040 	call	1804 <memzero>
#if USE_BIP39_CACHE
	// store to cache
	if (mnemoniclen < 256 && passphraselen < 64) {
     8b4:	e0bfb817 	ldw	r2,-288(fp)
     8b8:	10804008 	cmpgei	r2,r2,256
     8bc:	10003c1e 	bne	r2,zero,9b0 <mnemonic_to_seed+0x350>
     8c0:	e0bfb717 	ldw	r2,-292(fp)
     8c4:	10801008 	cmpgei	r2,r2,64
     8c8:	1000391e 	bne	r2,zero,9b0 <mnemonic_to_seed+0x350>
		bip39_cache[bip39_cache_index].set = true;
     8cc:	d0a50b17 	ldw	r2,-27604(gp)
     8d0:	040000b4 	movhi	r16,2
     8d4:	8427ce04 	addi	r16,r16,-24776
     8d8:	01406044 	movi	r5,385
     8dc:	1009883a 	mov	r4,r2
     8e0:	000a0a40 	call	a0a4 <__mulsi3>
     8e4:	8085883a 	add	r2,r16,r2
     8e8:	00c00044 	movi	r3,1
     8ec:	10c00005 	stb	r3,0(r2)
		strcpy(bip39_cache[bip39_cache_index].mnemonic, mnemonic);
     8f0:	d0a50b17 	ldw	r2,-27604(gp)
     8f4:	01406044 	movi	r5,385
     8f8:	1009883a 	mov	r4,r2
     8fc:	000a0a40 	call	a0a4 <__mulsi3>
     900:	1007883a 	mov	r3,r2
     904:	008000b4 	movhi	r2,2
     908:	10a7ce04 	addi	r2,r2,-24776
     90c:	1885883a 	add	r2,r3,r2
     910:	10800044 	addi	r2,r2,1
     914:	e17ffb17 	ldw	r5,-20(fp)
     918:	1009883a 	mov	r4,r2
     91c:	000a5900 	call	a590 <strcpy>
		strcpy(bip39_cache[bip39_cache_index].passphrase, passphrase);
     920:	d0a50b17 	ldw	r2,-27604(gp)
     924:	01406044 	movi	r5,385
     928:	1009883a 	mov	r4,r2
     92c:	000a0a40 	call	a0a4 <__mulsi3>
     930:	10c04004 	addi	r3,r2,256
     934:	008000b4 	movhi	r2,2
     938:	10a7ce04 	addi	r2,r2,-24776
     93c:	1885883a 	add	r2,r3,r2
     940:	10800044 	addi	r2,r2,1
     944:	e17ffc17 	ldw	r5,-16(fp)
     948:	1009883a 	mov	r4,r2
     94c:	000a5900 	call	a590 <strcpy>
		memcpy(bip39_cache[bip39_cache_index].seed, seed, 512 / 8);
     950:	d0a50b17 	ldw	r2,-27604(gp)
     954:	01406044 	movi	r5,385
     958:	1009883a 	mov	r4,r2
     95c:	000a0a40 	call	a0a4 <__mulsi3>
     960:	10c05004 	addi	r3,r2,320
     964:	008000b4 	movhi	r2,2
     968:	10a7ce04 	addi	r2,r2,-24776
     96c:	1885883a 	add	r2,r3,r2
     970:	10800044 	addi	r2,r2,1
     974:	01801004 	movi	r6,64
     978:	e17ffd17 	ldw	r5,-12(fp)
     97c:	1009883a 	mov	r4,r2
     980:	000a0f40 	call	a0f4 <memcpy>
		bip39_cache_index = (bip39_cache_index + 1) % BIP39_CACHE_SIZE;
     984:	d0a50b17 	ldw	r2,-27604(gp)
     988:	10c00044 	addi	r3,r2,1
     98c:	00a00034 	movhi	r2,32768
     990:	108000c4 	addi	r2,r2,3
     994:	1884703a 	and	r2,r3,r2
     998:	1000040e 	bge	r2,zero,9ac <mnemonic_to_seed+0x34c>
     99c:	10bfffc4 	addi	r2,r2,-1
     9a0:	00ffff04 	movi	r3,-4
     9a4:	10c4b03a 	or	r2,r2,r3
     9a8:	10800044 	addi	r2,r2,1
     9ac:	d0a50b15 	stw	r2,-27604(gp)
	}
#endif
}
     9b0:	e6ffff04 	addi	sp,fp,-4
     9b4:	dfc00217 	ldw	ra,8(sp)
     9b8:	df000117 	ldw	fp,4(sp)
     9bc:	dc000017 	ldw	r16,0(sp)
     9c0:	dec00304 	addi	sp,sp,12
     9c4:	f800283a 	ret

000009c8 <mnemonic_to_entropy>:

int mnemonic_to_entropy(const char *mnemonic, uint8_t* entropy)
{
     9c8:	deffeb04 	addi	sp,sp,-84
     9cc:	dfc01415 	stw	ra,80(sp)
     9d0:	df001315 	stw	fp,76(sp)
     9d4:	df001304 	addi	fp,sp,76
     9d8:	e13ffe15 	stw	r4,-8(fp)
     9dc:	e17fff15 	stw	r5,-4(fp)
	if (!mnemonic) {
     9e0:	e0bffe17 	ldw	r2,-8(fp)
     9e4:	1000021e 	bne	r2,zero,9f0 <mnemonic_to_entropy+0x28>
		return 0;
     9e8:	0005883a 	mov	r2,zero
     9ec:	0000be06 	br	ce8 <mnemonic_to_entropy+0x320>
	}

	uint32_t i = 0, n = 0;
     9f0:	e03fed15 	stw	zero,-76(fp)
     9f4:	e03fee15 	stw	zero,-72(fp)

	while (mnemonic[i]) {
     9f8:	00000f06 	br	a38 <mnemonic_to_entropy+0x70>
		if (mnemonic[i] == ' ') {
     9fc:	e0fffe17 	ldw	r3,-8(fp)
     a00:	e0bfed17 	ldw	r2,-76(fp)
     a04:	1885883a 	add	r2,r3,r2
     a08:	10800003 	ldbu	r2,0(r2)
     a0c:	10803fcc 	andi	r2,r2,255
     a10:	1080201c 	xori	r2,r2,128
     a14:	10bfe004 	addi	r2,r2,-128
     a18:	10800818 	cmpnei	r2,r2,32
     a1c:	1000031e 	bne	r2,zero,a2c <mnemonic_to_entropy+0x64>
			n++;
     a20:	e0bfee17 	ldw	r2,-72(fp)
     a24:	10800044 	addi	r2,r2,1
     a28:	e0bfee15 	stw	r2,-72(fp)
		}
		i++;
     a2c:	e0bfed17 	ldw	r2,-76(fp)
     a30:	10800044 	addi	r2,r2,1
     a34:	e0bfed15 	stw	r2,-76(fp)
		return 0;
	}

	uint32_t i = 0, n = 0;

	while (mnemonic[i]) {
     a38:	e0fffe17 	ldw	r3,-8(fp)
     a3c:	e0bfed17 	ldw	r2,-76(fp)
     a40:	1885883a 	add	r2,r3,r2
     a44:	10800003 	ldbu	r2,0(r2)
     a48:	10803fcc 	andi	r2,r2,255
     a4c:	1080201c 	xori	r2,r2,128
     a50:	10bfe004 	addi	r2,r2,-128
     a54:	103fe91e 	bne	r2,zero,9fc <__alt_mem_epcs_flash_controller+0xfdff79fc>
		if (mnemonic[i] == ' ') {
			n++;
		}
		i++;
	}
	n++;
     a58:	e0bfee17 	ldw	r2,-72(fp)
     a5c:	10800044 	addi	r2,r2,1
     a60:	e0bfee15 	stw	r2,-72(fp)

	// check number of words
	if (n != 12 && n != 18 && n != 24) {
     a64:	e0bfee17 	ldw	r2,-72(fp)
     a68:	10800320 	cmpeqi	r2,r2,12
     a6c:	1000081e 	bne	r2,zero,a90 <mnemonic_to_entropy+0xc8>
     a70:	e0bfee17 	ldw	r2,-72(fp)
     a74:	108004a0 	cmpeqi	r2,r2,18
     a78:	1000051e 	bne	r2,zero,a90 <mnemonic_to_entropy+0xc8>
     a7c:	e0bfee17 	ldw	r2,-72(fp)
     a80:	10800620 	cmpeqi	r2,r2,24
     a84:	1000021e 	bne	r2,zero,a90 <mnemonic_to_entropy+0xc8>
		return 0;
     a88:	0005883a 	mov	r2,zero
     a8c:	00009606 	br	ce8 <mnemonic_to_entropy+0x320>
	}

	char current_word[10];
	uint32_t j, k, ki, bi = 0;
     a90:	e03ff215 	stw	zero,-56(fp)
	uint8_t bits[32 + 1];

	memzero(bits, sizeof(bits));
     a94:	e0bff584 	addi	r2,fp,-42
     a98:	01400844 	movi	r5,33
     a9c:	1009883a 	mov	r4,r2
     aa0:	00018040 	call	1804 <memzero>
	i = 0;
     aa4:	e03fed15 	stw	zero,-76(fp)
	while (mnemonic[i]) {
     aa8:	00007506 	br	c80 <mnemonic_to_entropy+0x2b8>
		j = 0;
     aac:	e03fef15 	stw	zero,-68(fp)
		while (mnemonic[i] != ' ' && mnemonic[i] != 0) {
     ab0:	00001306 	br	b00 <mnemonic_to_entropy+0x138>
			if (j >= sizeof(current_word) - 1) {
     ab4:	e0bfef17 	ldw	r2,-68(fp)
     ab8:	10800270 	cmpltui	r2,r2,9
     abc:	1000021e 	bne	r2,zero,ac8 <mnemonic_to_entropy+0x100>
				return 0;
     ac0:	0005883a 	mov	r2,zero
     ac4:	00008806 	br	ce8 <mnemonic_to_entropy+0x320>
			}
			current_word[j] = mnemonic[i];
     ac8:	e0fffe17 	ldw	r3,-8(fp)
     acc:	e0bfed17 	ldw	r2,-76(fp)
     ad0:	1885883a 	add	r2,r3,r2
     ad4:	10c00003 	ldbu	r3,0(r2)
     ad8:	e13ff304 	addi	r4,fp,-52
     adc:	e0bfef17 	ldw	r2,-68(fp)
     ae0:	2085883a 	add	r2,r4,r2
     ae4:	10c00005 	stb	r3,0(r2)
			i++; j++;
     ae8:	e0bfed17 	ldw	r2,-76(fp)
     aec:	10800044 	addi	r2,r2,1
     af0:	e0bfed15 	stw	r2,-76(fp)
     af4:	e0bfef17 	ldw	r2,-68(fp)
     af8:	10800044 	addi	r2,r2,1
     afc:	e0bfef15 	stw	r2,-68(fp)

	memzero(bits, sizeof(bits));
	i = 0;
	while (mnemonic[i]) {
		j = 0;
		while (mnemonic[i] != ' ' && mnemonic[i] != 0) {
     b00:	e0fffe17 	ldw	r3,-8(fp)
     b04:	e0bfed17 	ldw	r2,-76(fp)
     b08:	1885883a 	add	r2,r3,r2
     b0c:	10800003 	ldbu	r2,0(r2)
     b10:	10803fcc 	andi	r2,r2,255
     b14:	1080201c 	xori	r2,r2,128
     b18:	10bfe004 	addi	r2,r2,-128
     b1c:	10800820 	cmpeqi	r2,r2,32
     b20:	1000081e 	bne	r2,zero,b44 <mnemonic_to_entropy+0x17c>
     b24:	e0fffe17 	ldw	r3,-8(fp)
     b28:	e0bfed17 	ldw	r2,-76(fp)
     b2c:	1885883a 	add	r2,r3,r2
     b30:	10800003 	ldbu	r2,0(r2)
     b34:	10803fcc 	andi	r2,r2,255
     b38:	1080201c 	xori	r2,r2,128
     b3c:	10bfe004 	addi	r2,r2,-128
     b40:	103fdc1e 	bne	r2,zero,ab4 <__alt_mem_epcs_flash_controller+0xfdff7ab4>
				return 0;
			}
			current_word[j] = mnemonic[i];
			i++; j++;
		}
		current_word[j] = 0;
     b44:	e0fff304 	addi	r3,fp,-52
     b48:	e0bfef17 	ldw	r2,-68(fp)
     b4c:	1885883a 	add	r2,r3,r2
     b50:	10000005 	stb	zero,0(r2)
		if (mnemonic[i] != 0) {
     b54:	e0fffe17 	ldw	r3,-8(fp)
     b58:	e0bfed17 	ldw	r2,-76(fp)
     b5c:	1885883a 	add	r2,r3,r2
     b60:	10800003 	ldbu	r2,0(r2)
     b64:	10803fcc 	andi	r2,r2,255
     b68:	1080201c 	xori	r2,r2,128
     b6c:	10bfe004 	addi	r2,r2,-128
     b70:	10000326 	beq	r2,zero,b80 <mnemonic_to_entropy+0x1b8>
			i++;
     b74:	e0bfed17 	ldw	r2,-76(fp)
     b78:	10800044 	addi	r2,r2,1
     b7c:	e0bfed15 	stw	r2,-76(fp)
		}
		k = 0;
     b80:	e03ff015 	stw	zero,-64(fp)
		for (;;) {
			if (!wordlist[k]) { // word not found
     b84:	00800074 	movhi	r2,1
     b88:	108b6504 	addi	r2,r2,11668
     b8c:	e0fff017 	ldw	r3,-64(fp)
     b90:	18c7883a 	add	r3,r3,r3
     b94:	18c7883a 	add	r3,r3,r3
     b98:	10c5883a 	add	r2,r2,r3
     b9c:	10800017 	ldw	r2,0(r2)
     ba0:	1000021e 	bne	r2,zero,bac <mnemonic_to_entropy+0x1e4>
				return 0;
     ba4:	0005883a 	mov	r2,zero
     ba8:	00004f06 	br	ce8 <mnemonic_to_entropy+0x320>
			}
			if (strcmp(current_word, wordlist[k]) == 0) { // word found on index k
     bac:	00800074 	movhi	r2,1
     bb0:	108b6504 	addi	r2,r2,11668
     bb4:	e0fff017 	ldw	r3,-64(fp)
     bb8:	18c7883a 	add	r3,r3,r3
     bbc:	18c7883a 	add	r3,r3,r3
     bc0:	10c5883a 	add	r2,r2,r3
     bc4:	10c00017 	ldw	r3,0(r2)
     bc8:	e0bff304 	addi	r2,fp,-52
     bcc:	180b883a 	mov	r5,r3
     bd0:	1009883a 	mov	r4,r2
     bd4:	000a5580 	call	a558 <strcmp>
     bd8:	1000251e 	bne	r2,zero,c70 <mnemonic_to_entropy+0x2a8>
				for (ki = 0; ki < 11; ki++) {
     bdc:	e03ff115 	stw	zero,-60(fp)
     be0:	00001f06 	br	c60 <mnemonic_to_entropy+0x298>
					if (k & (1 << (10 - ki))) {
     be4:	00c00284 	movi	r3,10
     be8:	e0bff117 	ldw	r2,-60(fp)
     bec:	1885c83a 	sub	r2,r3,r2
     bf0:	00c00044 	movi	r3,1
     bf4:	1884983a 	sll	r2,r3,r2
     bf8:	1007883a 	mov	r3,r2
     bfc:	e0bff017 	ldw	r2,-64(fp)
     c00:	1884703a 	and	r2,r3,r2
     c04:	10001026 	beq	r2,zero,c48 <mnemonic_to_entropy+0x280>
						bits[bi / 8] |= 1 << (7 - (bi % 8));
     c08:	e0bff217 	ldw	r2,-56(fp)
     c0c:	1004d0fa 	srli	r2,r2,3
     c10:	e0fff584 	addi	r3,fp,-42
     c14:	1887883a 	add	r3,r3,r2
     c18:	18c00003 	ldbu	r3,0(r3)
     c1c:	180b883a 	mov	r5,r3
     c20:	e0fff217 	ldw	r3,-56(fp)
     c24:	00c6303a 	nor	r3,zero,r3
     c28:	18c001cc 	andi	r3,r3,7
     c2c:	01000044 	movi	r4,1
     c30:	20c6983a 	sll	r3,r4,r3
     c34:	28c6b03a 	or	r3,r5,r3
     c38:	1809883a 	mov	r4,r3
     c3c:	e0fff584 	addi	r3,fp,-42
     c40:	1885883a 	add	r2,r3,r2
     c44:	11000005 	stb	r4,0(r2)
					}
					bi++;
     c48:	e0bff217 	ldw	r2,-56(fp)
     c4c:	10800044 	addi	r2,r2,1
     c50:	e0bff215 	stw	r2,-56(fp)
		for (;;) {
			if (!wordlist[k]) { // word not found
				return 0;
			}
			if (strcmp(current_word, wordlist[k]) == 0) { // word found on index k
				for (ki = 0; ki < 11; ki++) {
     c54:	e0bff117 	ldw	r2,-60(fp)
     c58:	10800044 	addi	r2,r2,1
     c5c:	e0bff115 	stw	r2,-60(fp)
     c60:	e0bff117 	ldw	r2,-60(fp)
     c64:	108002f0 	cmpltui	r2,r2,11
     c68:	103fde1e 	bne	r2,zero,be4 <__alt_mem_epcs_flash_controller+0xfdff7be4>
					if (k & (1 << (10 - ki))) {
						bits[bi / 8] |= 1 << (7 - (bi % 8));
					}
					bi++;
				}
				break;
     c6c:	00000406 	br	c80 <mnemonic_to_entropy+0x2b8>
			}
			k++;
     c70:	e0bff017 	ldw	r2,-64(fp)
     c74:	10800044 	addi	r2,r2,1
     c78:	e0bff015 	stw	r2,-64(fp)
		}
     c7c:	003fc106 	br	b84 <__alt_mem_epcs_flash_controller+0xfdff7b84>
	uint32_t j, k, ki, bi = 0;
	uint8_t bits[32 + 1];

	memzero(bits, sizeof(bits));
	i = 0;
	while (mnemonic[i]) {
     c80:	e0fffe17 	ldw	r3,-8(fp)
     c84:	e0bfed17 	ldw	r2,-76(fp)
     c88:	1885883a 	add	r2,r3,r2
     c8c:	10800003 	ldbu	r2,0(r2)
     c90:	10803fcc 	andi	r2,r2,255
     c94:	1080201c 	xori	r2,r2,128
     c98:	10bfe004 	addi	r2,r2,-128
     c9c:	103f831e 	bne	r2,zero,aac <__alt_mem_epcs_flash_controller+0xfdff7aac>
				break;
			}
			k++;
		}
	}
	if (bi != n * 11) {
     ca0:	014002c4 	movi	r5,11
     ca4:	e13fee17 	ldw	r4,-72(fp)
     ca8:	000a0a40 	call	a0a4 <__mulsi3>
     cac:	1007883a 	mov	r3,r2
     cb0:	e0bff217 	ldw	r2,-56(fp)
     cb4:	18800226 	beq	r3,r2,cc0 <mnemonic_to_entropy+0x2f8>
		return 0;
     cb8:	0005883a 	mov	r2,zero
     cbc:	00000a06 	br	ce8 <mnemonic_to_entropy+0x320>
	}
	memcpy(entropy, bits, sizeof(bits));
     cc0:	e0bfff17 	ldw	r2,-4(fp)
     cc4:	1009883a 	mov	r4,r2
     cc8:	e0bff584 	addi	r2,fp,-42
     ccc:	00c00844 	movi	r3,33
     cd0:	180d883a 	mov	r6,r3
     cd4:	100b883a 	mov	r5,r2
     cd8:	000a0f40 	call	a0f4 <memcpy>
	return n * 11;
     cdc:	014002c4 	movi	r5,11
     ce0:	e13fee17 	ldw	r4,-72(fp)
     ce4:	000a0a40 	call	a0a4 <__mulsi3>
}
     ce8:	e037883a 	mov	sp,fp
     cec:	dfc00117 	ldw	ra,4(sp)
     cf0:	df000017 	ldw	fp,0(sp)
     cf4:	dec00204 	addi	sp,sp,8
     cf8:	f800283a 	ret

00000cfc <hd_gen_master>:
//    btc_privkey_cleanse(&key);
//    return true;
//}

btc_bool hd_gen_master(const btc_chainparams* chain, char* masterkeyhex, size_t strsize)
{
     cfc:	deff9704 	addi	sp,sp,-420
     d00:	dfc06815 	stw	ra,416(sp)
     d04:	df006715 	stw	fp,412(sp)
     d08:	df006704 	addi	fp,sp,412
     d0c:	e13ffd15 	stw	r4,-12(fp)
     d10:	e17ffe15 	stw	r5,-8(fp)
     d14:	e1bfff15 	stw	r6,-4(fp)
    btc_hdnode node;
    uint8_t seed[32];
    random_buffer(seed, 32); // I REMOVED ASSERT FROM HERE
     d18:	e0bff504 	addi	r2,fp,-44
     d1c:	01400804 	movi	r5,32
     d20:	1009883a 	mov	r4,r2
     d24:	00026540 	call	2654 <random_buffer>
    btc_hdnode_from_seed(seed, 32, &node);
     d28:	e0bff504 	addi	r2,fp,-44
     d2c:	e1bf9904 	addi	r6,fp,-412
     d30:	01400804 	movi	r5,32
     d34:	1009883a 	mov	r4,r2
     d38:	000026c0 	call	26c <btc_hdnode_from_seed>
//    memset(seed, 0, 32);
//    btc_hdnode_serialize_private(&node, chain, masterkeyhex, strsize);
//    memset(&node, 0, sizeof(node));
    return true;
     d3c:	00800044 	movi	r2,1
}
     d40:	e037883a 	mov	sp,fp
     d44:	dfc00117 	ldw	ra,4(sp)
     d48:	df000017 	ldw	fp,0(sp)
     d4c:	dec00204 	addi	sp,sp,8
     d50:	f800283a 	ret

00000d54 <btc_ecc_verify_privatekey>:
//    return true;
//}
//
//
btc_bool btc_ecc_verify_privatekey(const uint8_t* private_key)
{
     d54:	defffd04 	addi	sp,sp,-12
     d58:	dfc00215 	stw	ra,8(sp)
     d5c:	df000115 	stw	fp,4(sp)
     d60:	df000104 	addi	fp,sp,4
     d64:	e13fff15 	stw	r4,-4(fp)
//    assert(secp256k1_ctx);
    return secp256k1_ec_seckey_verify(secp256k1_ctx, (const unsigned char*)private_key);
     d68:	d0a50c17 	ldw	r2,-27600(gp)
     d6c:	e17fff17 	ldw	r5,-4(fp)
     d70:	1009883a 	mov	r4,r2
     d74:	000313c0 	call	313c <secp256k1_ec_seckey_verify>
}
     d78:	e037883a 	mov	sp,fp
     d7c:	dfc00117 	ldw	ra,4(sp)
     d80:	df000017 	ldw	fp,0(sp)
     d84:	dec00204 	addi	sp,sp,8
     d88:	f800283a 	ret

00000d8c <trezor_hmac_sha256_Init>:
#include "..\Include\hmac.h"
#include "..\Include\options.h"
#include "..\Include\memzero.h"

void trezor_hmac_sha256_Init(HMAC_SHA256_CTX *hctx, const uint8_t *key, const uint32_t keylen)
{
     d8c:	defffa04 	addi	sp,sp,-24
     d90:	dfc00515 	stw	ra,20(sp)
     d94:	df000415 	stw	fp,16(sp)
     d98:	df000404 	addi	fp,sp,16
     d9c:	e13ffd15 	stw	r4,-12(fp)
     da0:	e17ffe15 	stw	r5,-8(fp)
     da4:	e1bfff15 	stw	r6,-4(fp)
	static CONFIDENTIAL uint8_t i_key_pad[SHA256_BLOCK_LENGTH];
	memset(i_key_pad, 0, SHA256_BLOCK_LENGTH);
     da8:	01801004 	movi	r6,64
     dac:	000b883a 	mov	r5,zero
     db0:	010000b4 	movhi	r4,2
     db4:	2129dc04 	addi	r4,r4,-22672
     db8:	000a11c0 	call	a11c <memset>
	if (keylen > SHA256_BLOCK_LENGTH) {
     dbc:	e0bfff17 	ldw	r2,-4(fp)
     dc0:	10801070 	cmpltui	r2,r2,65
     dc4:	1000061e 	bne	r2,zero,de0 <trezor_hmac_sha256_Init+0x54>
		trezor_sha256_Raw(key, keylen, i_key_pad);
     dc8:	018000b4 	movhi	r6,2
     dcc:	31a9dc04 	addi	r6,r6,-22672
     dd0:	e17fff17 	ldw	r5,-4(fp)
     dd4:	e13ffe17 	ldw	r4,-8(fp)
     dd8:	0007d840 	call	7d84 <trezor_sha256_Raw>
     ddc:	00000506 	br	df4 <trezor_hmac_sha256_Init+0x68>
	} else {
		memcpy(i_key_pad, key, keylen);
     de0:	e1bfff17 	ldw	r6,-4(fp)
     de4:	e17ffe17 	ldw	r5,-8(fp)
     de8:	010000b4 	movhi	r4,2
     dec:	2129dc04 	addi	r4,r4,-22672
     df0:	000a0f40 	call	a0f4 <memcpy>
	}
	for (int i = 0; i < SHA256_BLOCK_LENGTH; i++) {
     df4:	e03ffc15 	stw	zero,-16(fp)
     df8:	00001a06 	br	e64 <trezor_hmac_sha256_Init+0xd8>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
     dfc:	008000b4 	movhi	r2,2
     e00:	10a9dc04 	addi	r2,r2,-22672
     e04:	e0fffc17 	ldw	r3,-16(fp)
     e08:	10c5883a 	add	r2,r2,r3
     e0c:	10800003 	ldbu	r2,0(r2)
     e10:	1080171c 	xori	r2,r2,92
     e14:	1009883a 	mov	r4,r2
     e18:	e0fffd17 	ldw	r3,-12(fp)
     e1c:	e0bffc17 	ldw	r2,-16(fp)
     e20:	1885883a 	add	r2,r3,r2
     e24:	11000005 	stb	r4,0(r2)
		i_key_pad[i] ^= 0x36;
     e28:	008000b4 	movhi	r2,2
     e2c:	10a9dc04 	addi	r2,r2,-22672
     e30:	e0fffc17 	ldw	r3,-16(fp)
     e34:	10c5883a 	add	r2,r2,r3
     e38:	10800003 	ldbu	r2,0(r2)
     e3c:	10800d9c 	xori	r2,r2,54
     e40:	1009883a 	mov	r4,r2
     e44:	008000b4 	movhi	r2,2
     e48:	10a9dc04 	addi	r2,r2,-22672
     e4c:	e0fffc17 	ldw	r3,-16(fp)
     e50:	10c5883a 	add	r2,r2,r3
     e54:	11000005 	stb	r4,0(r2)
	if (keylen > SHA256_BLOCK_LENGTH) {
		trezor_sha256_Raw(key, keylen, i_key_pad);
	} else {
		memcpy(i_key_pad, key, keylen);
	}
	for (int i = 0; i < SHA256_BLOCK_LENGTH; i++) {
     e58:	e0bffc17 	ldw	r2,-16(fp)
     e5c:	10800044 	addi	r2,r2,1
     e60:	e0bffc15 	stw	r2,-16(fp)
     e64:	e0bffc17 	ldw	r2,-16(fp)
     e68:	10801010 	cmplti	r2,r2,64
     e6c:	103fe31e 	bne	r2,zero,dfc <__alt_mem_epcs_flash_controller+0xfdff7dfc>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
		i_key_pad[i] ^= 0x36;
	}
	trezor_sha256_Init(&(hctx->ctx));
     e70:	e0bffd17 	ldw	r2,-12(fp)
     e74:	10801004 	addi	r2,r2,64
     e78:	1009883a 	mov	r4,r2
     e7c:	0006f0c0 	call	6f0c <trezor_sha256_Init>
	trezor_sha256_Update(&(hctx->ctx), i_key_pad, SHA256_BLOCK_LENGTH);
     e80:	e0bffd17 	ldw	r2,-12(fp)
     e84:	10801004 	addi	r2,r2,64
     e88:	01801004 	movi	r6,64
     e8c:	014000b4 	movhi	r5,2
     e90:	2969dc04 	addi	r5,r5,-22672
     e94:	1009883a 	mov	r4,r2
     e98:	00075440 	call	7544 <trezor_sha256_Update>
	memzero(i_key_pad, sizeof(i_key_pad));
     e9c:	01401004 	movi	r5,64
     ea0:	010000b4 	movhi	r4,2
     ea4:	2129dc04 	addi	r4,r4,-22672
     ea8:	00018040 	call	1804 <memzero>
}
     eac:	0001883a 	nop
     eb0:	e037883a 	mov	sp,fp
     eb4:	dfc00117 	ldw	ra,4(sp)
     eb8:	df000017 	ldw	fp,0(sp)
     ebc:	dec00204 	addi	sp,sp,8
     ec0:	f800283a 	ret

00000ec4 <trezor_hmac_sha256_Update>:

void trezor_hmac_sha256_Update(HMAC_SHA256_CTX *hctx, const uint8_t *msg, const uint32_t msglen)
{
     ec4:	defffb04 	addi	sp,sp,-20
     ec8:	dfc00415 	stw	ra,16(sp)
     ecc:	df000315 	stw	fp,12(sp)
     ed0:	df000304 	addi	fp,sp,12
     ed4:	e13ffd15 	stw	r4,-12(fp)
     ed8:	e17ffe15 	stw	r5,-8(fp)
     edc:	e1bfff15 	stw	r6,-4(fp)
	trezor_sha256_Update(&(hctx->ctx), msg, msglen);
     ee0:	e0bffd17 	ldw	r2,-12(fp)
     ee4:	10801004 	addi	r2,r2,64
     ee8:	e1bfff17 	ldw	r6,-4(fp)
     eec:	e17ffe17 	ldw	r5,-8(fp)
     ef0:	1009883a 	mov	r4,r2
     ef4:	00075440 	call	7544 <trezor_sha256_Update>
}
     ef8:	0001883a 	nop
     efc:	e037883a 	mov	sp,fp
     f00:	dfc00117 	ldw	ra,4(sp)
     f04:	df000017 	ldw	fp,0(sp)
     f08:	dec00204 	addi	sp,sp,8
     f0c:	f800283a 	ret

00000f10 <trezor_hmac_sha256_Final>:

void trezor_hmac_sha256_Final(HMAC_SHA256_CTX *hctx, uint8_t *hmac)
{
     f10:	defffc04 	addi	sp,sp,-16
     f14:	dfc00315 	stw	ra,12(sp)
     f18:	df000215 	stw	fp,8(sp)
     f1c:	df000204 	addi	fp,sp,8
     f20:	e13ffe15 	stw	r4,-8(fp)
     f24:	e17fff15 	stw	r5,-4(fp)
	trezor_sha256_Final(&(hctx->ctx), hmac);
     f28:	e0bffe17 	ldw	r2,-8(fp)
     f2c:	10801004 	addi	r2,r2,64
     f30:	e17fff17 	ldw	r5,-4(fp)
     f34:	1009883a 	mov	r4,r2
     f38:	000794c0 	call	794c <trezor_sha256_Final>
	trezor_sha256_Init(&(hctx->ctx));
     f3c:	e0bffe17 	ldw	r2,-8(fp)
     f40:	10801004 	addi	r2,r2,64
     f44:	1009883a 	mov	r4,r2
     f48:	0006f0c0 	call	6f0c <trezor_sha256_Init>
	trezor_sha256_Update(&(hctx->ctx), hctx->o_key_pad, SHA256_BLOCK_LENGTH);
     f4c:	e0bffe17 	ldw	r2,-8(fp)
     f50:	10801004 	addi	r2,r2,64
     f54:	e0fffe17 	ldw	r3,-8(fp)
     f58:	01801004 	movi	r6,64
     f5c:	180b883a 	mov	r5,r3
     f60:	1009883a 	mov	r4,r2
     f64:	00075440 	call	7544 <trezor_sha256_Update>
	trezor_sha256_Update(&(hctx->ctx), hmac, SHA256_DIGEST_LENGTH);
     f68:	e0bffe17 	ldw	r2,-8(fp)
     f6c:	10801004 	addi	r2,r2,64
     f70:	01800804 	movi	r6,32
     f74:	e17fff17 	ldw	r5,-4(fp)
     f78:	1009883a 	mov	r4,r2
     f7c:	00075440 	call	7544 <trezor_sha256_Update>
	trezor_sha256_Final(&(hctx->ctx), hmac);
     f80:	e0bffe17 	ldw	r2,-8(fp)
     f84:	10801004 	addi	r2,r2,64
     f88:	e17fff17 	ldw	r5,-4(fp)
     f8c:	1009883a 	mov	r4,r2
     f90:	000794c0 	call	794c <trezor_sha256_Final>
	memzero(hctx, sizeof(HMAC_SHA256_CTX));
     f94:	01402a04 	movi	r5,168
     f98:	e13ffe17 	ldw	r4,-8(fp)
     f9c:	00018040 	call	1804 <memzero>
}
     fa0:	0001883a 	nop
     fa4:	e037883a 	mov	sp,fp
     fa8:	dfc00117 	ldw	ra,4(sp)
     fac:	df000017 	ldw	fp,0(sp)
     fb0:	dec00204 	addi	sp,sp,8
     fb4:	f800283a 	ret

00000fb8 <trezor_hmac_sha256>:

void trezor_hmac_sha256(const uint8_t *key, const uint32_t keylen, const uint8_t *msg, const uint32_t msglen, uint8_t *hmac)
{
     fb8:	defffa04 	addi	sp,sp,-24
     fbc:	dfc00515 	stw	ra,20(sp)
     fc0:	df000415 	stw	fp,16(sp)
     fc4:	df000404 	addi	fp,sp,16
     fc8:	e13ffc15 	stw	r4,-16(fp)
     fcc:	e17ffd15 	stw	r5,-12(fp)
     fd0:	e1bffe15 	stw	r6,-8(fp)
     fd4:	e1ffff15 	stw	r7,-4(fp)
	static CONFIDENTIAL HMAC_SHA256_CTX hctx;
	trezor_hmac_sha256_Init(&hctx, key, keylen);
     fd8:	e1bffd17 	ldw	r6,-12(fp)
     fdc:	e17ffc17 	ldw	r5,-16(fp)
     fe0:	010000b4 	movhi	r4,2
     fe4:	2129ec04 	addi	r4,r4,-22608
     fe8:	0000d8c0 	call	d8c <trezor_hmac_sha256_Init>
	trezor_hmac_sha256_Update(&hctx, msg, msglen);
     fec:	e1bfff17 	ldw	r6,-4(fp)
     ff0:	e17ffe17 	ldw	r5,-8(fp)
     ff4:	010000b4 	movhi	r4,2
     ff8:	2129ec04 	addi	r4,r4,-22608
     ffc:	0000ec40 	call	ec4 <trezor_hmac_sha256_Update>
	trezor_hmac_sha256_Final(&hctx, hmac);
    1000:	e1400217 	ldw	r5,8(fp)
    1004:	010000b4 	movhi	r4,2
    1008:	2129ec04 	addi	r4,r4,-22608
    100c:	0000f100 	call	f10 <trezor_hmac_sha256_Final>
}
    1010:	0001883a 	nop
    1014:	e037883a 	mov	sp,fp
    1018:	dfc00117 	ldw	ra,4(sp)
    101c:	df000017 	ldw	fp,0(sp)
    1020:	dec00204 	addi	sp,sp,8
    1024:	f800283a 	ret

00001028 <trezor_hmac_sha256_prepare>:

void trezor_hmac_sha256_prepare(const uint8_t *key, const uint32_t keylen, uint32_t *opad_digest, uint32_t *ipad_digest)
{
    1028:	defff604 	addi	sp,sp,-40
    102c:	dfc00915 	stw	ra,36(sp)
    1030:	df000815 	stw	fp,32(sp)
    1034:	df000804 	addi	fp,sp,32
    1038:	e13ffc15 	stw	r4,-16(fp)
    103c:	e17ffd15 	stw	r5,-12(fp)
    1040:	e1bffe15 	stw	r6,-8(fp)
    1044:	e1ffff15 	stw	r7,-4(fp)
	static CONFIDENTIAL uint32_t key_pad[SHA256_BLOCK_LENGTH/sizeof(uint32_t)];

	memzero(key_pad, sizeof(key_pad));
    1048:	01401004 	movi	r5,64
    104c:	010000b4 	movhi	r4,2
    1050:	212a1604 	addi	r4,r4,-22440
    1054:	00018040 	call	1804 <memzero>
	if (keylen > SHA256_BLOCK_LENGTH) {
    1058:	e0bffd17 	ldw	r2,-12(fp)
    105c:	10801070 	cmpltui	r2,r2,65
    1060:	10000e1e 	bne	r2,zero,109c <trezor_hmac_sha256_prepare+0x74>
		static CONFIDENTIAL SHA256_CTX context;
		trezor_sha256_Init(&context);
    1064:	010000b4 	movhi	r4,2
    1068:	212a2604 	addi	r4,r4,-22376
    106c:	0006f0c0 	call	6f0c <trezor_sha256_Init>
		trezor_sha256_Update(&context, key, keylen);
    1070:	e1bffd17 	ldw	r6,-12(fp)
    1074:	e17ffc17 	ldw	r5,-16(fp)
    1078:	010000b4 	movhi	r4,2
    107c:	212a2604 	addi	r4,r4,-22376
    1080:	00075440 	call	7544 <trezor_sha256_Update>
		trezor_sha256_Final(&context, (uint8_t*)key_pad);
    1084:	014000b4 	movhi	r5,2
    1088:	296a1604 	addi	r5,r5,-22440
    108c:	010000b4 	movhi	r4,2
    1090:	212a2604 	addi	r4,r4,-22376
    1094:	000794c0 	call	794c <trezor_sha256_Final>
    1098:	00000506 	br	10b0 <trezor_hmac_sha256_prepare+0x88>
	} else {
		memcpy(key_pad, key, keylen);
    109c:	e1bffd17 	ldw	r6,-12(fp)
    10a0:	e17ffc17 	ldw	r5,-16(fp)
    10a4:	010000b4 	movhi	r4,2
    10a8:	212a1604 	addi	r4,r4,-22440
    10ac:	000a0f40 	call	a0f4 <memcpy>
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
    10b0:	e03ff815 	stw	zero,-32(fp)
    10b4:	00002506 	br	114c <trezor_hmac_sha256_prepare+0x124>
		uint32_t data;
#if BYTE_ORDER == LITTLE_ENDIAN
		REVERSE32(key_pad[i], data);
    10b8:	008000b4 	movhi	r2,2
    10bc:	10aa1604 	addi	r2,r2,-22440
    10c0:	e0fff817 	ldw	r3,-32(fp)
    10c4:	18c7883a 	add	r3,r3,r3
    10c8:	18c7883a 	add	r3,r3,r3
    10cc:	10c5883a 	add	r2,r2,r3
    10d0:	10800017 	ldw	r2,0(r2)
    10d4:	e0bffa15 	stw	r2,-24(fp)
    10d8:	e0bffa17 	ldw	r2,-24(fp)
    10dc:	1004143a 	roli	r2,r2,16
    10e0:	e0bffa15 	stw	r2,-24(fp)
    10e4:	e0fffa17 	ldw	r3,-24(fp)
    10e8:	00bfc074 	movhi	r2,65281
    10ec:	10bfc004 	addi	r2,r2,-256
    10f0:	1884703a 	and	r2,r3,r2
    10f4:	1006d23a 	srli	r3,r2,8
    10f8:	e13ffa17 	ldw	r4,-24(fp)
    10fc:	00803ff4 	movhi	r2,255
    1100:	10803fc4 	addi	r2,r2,255
    1104:	2084703a 	and	r2,r4,r2
    1108:	1004923a 	slli	r2,r2,8
    110c:	1884b03a 	or	r2,r3,r2
    1110:	e0bffb15 	stw	r2,-20(fp)
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c;
    1114:	e0fffb17 	ldw	r3,-20(fp)
    1118:	00971734 	movhi	r2,23644
    111c:	10971704 	addi	r2,r2,23644
    1120:	1888f03a 	xor	r4,r3,r2
    1124:	008000b4 	movhi	r2,2
    1128:	10aa1604 	addi	r2,r2,-22440
    112c:	e0fff817 	ldw	r3,-32(fp)
    1130:	18c7883a 	add	r3,r3,r3
    1134:	18c7883a 	add	r3,r3,r3
    1138:	10c5883a 	add	r2,r2,r3
    113c:	11000015 	stw	r4,0(r2)
	} else {
		memcpy(key_pad, key, keylen);
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
    1140:	e0bff817 	ldw	r2,-32(fp)
    1144:	10800044 	addi	r2,r2,1
    1148:	e0bff815 	stw	r2,-32(fp)
    114c:	e0bff817 	ldw	r2,-32(fp)
    1150:	10800410 	cmplti	r2,r2,16
    1154:	103fd81e 	bne	r2,zero,10b8 <__alt_mem_epcs_flash_controller+0xfdff80b8>
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c;
	}
	trezor_sha256_Transform(sha256_initial_hash_value, key_pad, opad_digest);
    1158:	e1bffe17 	ldw	r6,-8(fp)
    115c:	014000b4 	movhi	r5,2
    1160:	296a1604 	addi	r5,r5,-22440
    1164:	01000074 	movhi	r4,1
    1168:	211c9304 	addi	r4,r4,29260
    116c:	0006f7c0 	call	6f7c <trezor_sha256_Transform>

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
    1170:	e03ff915 	stw	zero,-28(fp)
    1174:	00001406 	br	11c8 <trezor_hmac_sha256_prepare+0x1a0>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c ^ 0x36363636;
    1178:	008000b4 	movhi	r2,2
    117c:	10aa1604 	addi	r2,r2,-22440
    1180:	e0fff917 	ldw	r3,-28(fp)
    1184:	18c7883a 	add	r3,r3,r3
    1188:	18c7883a 	add	r3,r3,r3
    118c:	10c5883a 	add	r2,r2,r3
    1190:	10c00017 	ldw	r3,0(r2)
    1194:	009a9ab4 	movhi	r2,27242
    1198:	109a9a84 	addi	r2,r2,27242
    119c:	1888f03a 	xor	r4,r3,r2
    11a0:	008000b4 	movhi	r2,2
    11a4:	10aa1604 	addi	r2,r2,-22440
    11a8:	e0fff917 	ldw	r3,-28(fp)
    11ac:	18c7883a 	add	r3,r3,r3
    11b0:	18c7883a 	add	r3,r3,r3
    11b4:	10c5883a 	add	r2,r2,r3
    11b8:	11000015 	stw	r4,0(r2)
		key_pad[i] = data ^ 0x5c5c5c5c;
	}
	trezor_sha256_Transform(sha256_initial_hash_value, key_pad, opad_digest);

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
    11bc:	e0bff917 	ldw	r2,-28(fp)
    11c0:	10800044 	addi	r2,r2,1
    11c4:	e0bff915 	stw	r2,-28(fp)
    11c8:	e0bff917 	ldw	r2,-28(fp)
    11cc:	10800410 	cmplti	r2,r2,16
    11d0:	103fe91e 	bne	r2,zero,1178 <__alt_mem_epcs_flash_controller+0xfdff8178>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c ^ 0x36363636;
	}
	trezor_sha256_Transform(sha256_initial_hash_value, key_pad, ipad_digest);
    11d4:	e1bfff17 	ldw	r6,-4(fp)
    11d8:	014000b4 	movhi	r5,2
    11dc:	296a1604 	addi	r5,r5,-22440
    11e0:	01000074 	movhi	r4,1
    11e4:	211c9304 	addi	r4,r4,29260
    11e8:	0006f7c0 	call	6f7c <trezor_sha256_Transform>
	memzero(key_pad, sizeof(key_pad));
    11ec:	01401004 	movi	r5,64
    11f0:	010000b4 	movhi	r4,2
    11f4:	212a1604 	addi	r4,r4,-22440
    11f8:	00018040 	call	1804 <memzero>
}
    11fc:	0001883a 	nop
    1200:	e037883a 	mov	sp,fp
    1204:	dfc00117 	ldw	ra,4(sp)
    1208:	df000017 	ldw	fp,0(sp)
    120c:	dec00204 	addi	sp,sp,8
    1210:	f800283a 	ret

00001214 <trezor_hmac_sha512_Init>:

void trezor_hmac_sha512_Init(HMAC_SHA512_CTX *hctx, const uint8_t *key, const uint32_t keylen)
{
    1214:	defffa04 	addi	sp,sp,-24
    1218:	dfc00515 	stw	ra,20(sp)
    121c:	df000415 	stw	fp,16(sp)
    1220:	df000404 	addi	fp,sp,16
    1224:	e13ffd15 	stw	r4,-12(fp)
    1228:	e17ffe15 	stw	r5,-8(fp)
    122c:	e1bfff15 	stw	r6,-4(fp)
	static CONFIDENTIAL uint8_t i_key_pad[SHA512_BLOCK_LENGTH];
	memset(i_key_pad, 0, SHA512_BLOCK_LENGTH);
    1230:	01802004 	movi	r6,128
    1234:	000b883a 	mov	r5,zero
    1238:	010000b4 	movhi	r4,2
    123c:	212a4004 	addi	r4,r4,-22272
    1240:	000a11c0 	call	a11c <memset>
	if (keylen > SHA512_BLOCK_LENGTH) {
    1244:	e0bfff17 	ldw	r2,-4(fp)
    1248:	10802070 	cmpltui	r2,r2,129
    124c:	1000061e 	bne	r2,zero,1268 <trezor_hmac_sha512_Init+0x54>
		trezor_sha512_Raw(key, keylen, i_key_pad);
    1250:	018000b4 	movhi	r6,2
    1254:	31aa4004 	addi	r6,r6,-22272
    1258:	e17fff17 	ldw	r5,-4(fp)
    125c:	e13ffe17 	ldw	r4,-8(fp)
    1260:	0009e840 	call	9e84 <trezor_sha512_Raw>
    1264:	00000506 	br	127c <trezor_hmac_sha512_Init+0x68>
	} else {
		memcpy(i_key_pad, key, keylen);
    1268:	e1bfff17 	ldw	r6,-4(fp)
    126c:	e17ffe17 	ldw	r5,-8(fp)
    1270:	010000b4 	movhi	r4,2
    1274:	212a4004 	addi	r4,r4,-22272
    1278:	000a0f40 	call	a0f4 <memcpy>
	}
	for (int i = 0; i < SHA512_BLOCK_LENGTH; i++) {
    127c:	e03ffc15 	stw	zero,-16(fp)
    1280:	00001a06 	br	12ec <trezor_hmac_sha512_Init+0xd8>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
    1284:	008000b4 	movhi	r2,2
    1288:	10aa4004 	addi	r2,r2,-22272
    128c:	e0fffc17 	ldw	r3,-16(fp)
    1290:	10c5883a 	add	r2,r2,r3
    1294:	10800003 	ldbu	r2,0(r2)
    1298:	1080171c 	xori	r2,r2,92
    129c:	1009883a 	mov	r4,r2
    12a0:	e0fffd17 	ldw	r3,-12(fp)
    12a4:	e0bffc17 	ldw	r2,-16(fp)
    12a8:	1885883a 	add	r2,r3,r2
    12ac:	11000005 	stb	r4,0(r2)
		i_key_pad[i] ^= 0x36;
    12b0:	008000b4 	movhi	r2,2
    12b4:	10aa4004 	addi	r2,r2,-22272
    12b8:	e0fffc17 	ldw	r3,-16(fp)
    12bc:	10c5883a 	add	r2,r2,r3
    12c0:	10800003 	ldbu	r2,0(r2)
    12c4:	10800d9c 	xori	r2,r2,54
    12c8:	1009883a 	mov	r4,r2
    12cc:	008000b4 	movhi	r2,2
    12d0:	10aa4004 	addi	r2,r2,-22272
    12d4:	e0fffc17 	ldw	r3,-16(fp)
    12d8:	10c5883a 	add	r2,r2,r3
    12dc:	11000005 	stb	r4,0(r2)
	if (keylen > SHA512_BLOCK_LENGTH) {
		trezor_sha512_Raw(key, keylen, i_key_pad);
	} else {
		memcpy(i_key_pad, key, keylen);
	}
	for (int i = 0; i < SHA512_BLOCK_LENGTH; i++) {
    12e0:	e0bffc17 	ldw	r2,-16(fp)
    12e4:	10800044 	addi	r2,r2,1
    12e8:	e0bffc15 	stw	r2,-16(fp)
    12ec:	e0bffc17 	ldw	r2,-16(fp)
    12f0:	10802010 	cmplti	r2,r2,128
    12f4:	103fe31e 	bne	r2,zero,1284 <__alt_mem_epcs_flash_controller+0xfdff8284>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
		i_key_pad[i] ^= 0x36;
	}
	trezor_sha512_Init(&(hctx->ctx));
    12f8:	e0bffd17 	ldw	r2,-12(fp)
    12fc:	10802004 	addi	r2,r2,128
    1300:	1009883a 	mov	r4,r2
    1304:	0007e300 	call	7e30 <trezor_sha512_Init>
	trezor_sha512_Update(&(hctx->ctx), i_key_pad, SHA512_BLOCK_LENGTH);
    1308:	e0bffd17 	ldw	r2,-12(fp)
    130c:	10802004 	addi	r2,r2,128
    1310:	01802004 	movi	r6,128
    1314:	014000b4 	movhi	r5,2
    1318:	296a4004 	addi	r5,r5,-22272
    131c:	1009883a 	mov	r4,r2
    1320:	0008dd80 	call	8dd8 <trezor_sha512_Update>
	memzero(i_key_pad, sizeof(i_key_pad));
    1324:	01402004 	movi	r5,128
    1328:	010000b4 	movhi	r4,2
    132c:	212a4004 	addi	r4,r4,-22272
    1330:	00018040 	call	1804 <memzero>
}
    1334:	0001883a 	nop
    1338:	e037883a 	mov	sp,fp
    133c:	dfc00117 	ldw	ra,4(sp)
    1340:	df000017 	ldw	fp,0(sp)
    1344:	dec00204 	addi	sp,sp,8
    1348:	f800283a 	ret

0000134c <trezor_hmac_sha512_Update>:

void trezor_hmac_sha512_Update(HMAC_SHA512_CTX *hctx, const uint8_t *msg, const uint32_t msglen)
{
    134c:	defffb04 	addi	sp,sp,-20
    1350:	dfc00415 	stw	ra,16(sp)
    1354:	df000315 	stw	fp,12(sp)
    1358:	df000304 	addi	fp,sp,12
    135c:	e13ffd15 	stw	r4,-12(fp)
    1360:	e17ffe15 	stw	r5,-8(fp)
    1364:	e1bfff15 	stw	r6,-4(fp)
	trezor_sha512_Update(&(hctx->ctx), msg, msglen);
    1368:	e0bffd17 	ldw	r2,-12(fp)
    136c:	10802004 	addi	r2,r2,128
    1370:	e1bfff17 	ldw	r6,-4(fp)
    1374:	e17ffe17 	ldw	r5,-8(fp)
    1378:	1009883a 	mov	r4,r2
    137c:	0008dd80 	call	8dd8 <trezor_sha512_Update>
}
    1380:	0001883a 	nop
    1384:	e037883a 	mov	sp,fp
    1388:	dfc00117 	ldw	ra,4(sp)
    138c:	df000017 	ldw	fp,0(sp)
    1390:	dec00204 	addi	sp,sp,8
    1394:	f800283a 	ret

00001398 <trezor_hmac_sha512_Final>:

void trezor_hmac_sha512_Final(HMAC_SHA512_CTX *hctx, uint8_t *hmac)
{
    1398:	defffc04 	addi	sp,sp,-16
    139c:	dfc00315 	stw	ra,12(sp)
    13a0:	df000215 	stw	fp,8(sp)
    13a4:	df000204 	addi	fp,sp,8
    13a8:	e13ffe15 	stw	r4,-8(fp)
    13ac:	e17fff15 	stw	r5,-4(fp)
	trezor_sha512_Final(&(hctx->ctx), hmac);
    13b0:	e0bffe17 	ldw	r2,-8(fp)
    13b4:	10802004 	addi	r2,r2,128
    13b8:	e17fff17 	ldw	r5,-4(fp)
    13bc:	1009883a 	mov	r4,r2
    13c0:	0009b540 	call	9b54 <trezor_sha512_Final>
	trezor_sha512_Init(&(hctx->ctx));
    13c4:	e0bffe17 	ldw	r2,-8(fp)
    13c8:	10802004 	addi	r2,r2,128
    13cc:	1009883a 	mov	r4,r2
    13d0:	0007e300 	call	7e30 <trezor_sha512_Init>
	trezor_sha512_Update(&(hctx->ctx), hctx->o_key_pad, SHA512_BLOCK_LENGTH);
    13d4:	e0bffe17 	ldw	r2,-8(fp)
    13d8:	10802004 	addi	r2,r2,128
    13dc:	e0fffe17 	ldw	r3,-8(fp)
    13e0:	01802004 	movi	r6,128
    13e4:	180b883a 	mov	r5,r3
    13e8:	1009883a 	mov	r4,r2
    13ec:	0008dd80 	call	8dd8 <trezor_sha512_Update>
	trezor_sha512_Update(&(hctx->ctx), hmac, SHA512_DIGEST_LENGTH);
    13f0:	e0bffe17 	ldw	r2,-8(fp)
    13f4:	10802004 	addi	r2,r2,128
    13f8:	01801004 	movi	r6,64
    13fc:	e17fff17 	ldw	r5,-4(fp)
    1400:	1009883a 	mov	r4,r2
    1404:	0008dd80 	call	8dd8 <trezor_sha512_Update>
	trezor_sha512_Final(&(hctx->ctx), hmac);
    1408:	e0bffe17 	ldw	r2,-8(fp)
    140c:	10802004 	addi	r2,r2,128
    1410:	e17fff17 	ldw	r5,-4(fp)
    1414:	1009883a 	mov	r4,r2
    1418:	0009b540 	call	9b54 <trezor_sha512_Final>
	memzero(hctx, sizeof(HMAC_SHA512_CTX));
    141c:	01405404 	movi	r5,336
    1420:	e13ffe17 	ldw	r4,-8(fp)
    1424:	00018040 	call	1804 <memzero>
}
    1428:	0001883a 	nop
    142c:	e037883a 	mov	sp,fp
    1430:	dfc00117 	ldw	ra,4(sp)
    1434:	df000017 	ldw	fp,0(sp)
    1438:	dec00204 	addi	sp,sp,8
    143c:	f800283a 	ret

00001440 <trezor_hmac_sha512>:

void trezor_hmac_sha512(const uint8_t *key, const uint32_t keylen, const uint8_t *msg, const uint32_t msglen, uint8_t *hmac)
{
    1440:	deffa604 	addi	sp,sp,-360
    1444:	dfc05915 	stw	ra,356(sp)
    1448:	df005815 	stw	fp,352(sp)
    144c:	df005804 	addi	fp,sp,352
    1450:	e13ffc15 	stw	r4,-16(fp)
    1454:	e17ffd15 	stw	r5,-12(fp)
    1458:	e1bffe15 	stw	r6,-8(fp)
    145c:	e1ffff15 	stw	r7,-4(fp)
	HMAC_SHA512_CTX hctx;
	trezor_hmac_sha512_Init(&hctx, key, keylen);
    1460:	e1bffd17 	ldw	r6,-12(fp)
    1464:	e17ffc17 	ldw	r5,-16(fp)
    1468:	e13fa804 	addi	r4,fp,-352
    146c:	00012140 	call	1214 <trezor_hmac_sha512_Init>
	trezor_hmac_sha512_Update(&hctx, msg, msglen);
    1470:	e1bfff17 	ldw	r6,-4(fp)
    1474:	e17ffe17 	ldw	r5,-8(fp)
    1478:	e13fa804 	addi	r4,fp,-352
    147c:	000134c0 	call	134c <trezor_hmac_sha512_Update>
	trezor_hmac_sha512_Final(&hctx, hmac);
    1480:	e1400217 	ldw	r5,8(fp)
    1484:	e13fa804 	addi	r4,fp,-352
    1488:	00013980 	call	1398 <trezor_hmac_sha512_Final>
}
    148c:	0001883a 	nop
    1490:	e037883a 	mov	sp,fp
    1494:	dfc00117 	ldw	ra,4(sp)
    1498:	df000017 	ldw	fp,0(sp)
    149c:	dec00204 	addi	sp,sp,8
    14a0:	f800283a 	ret

000014a4 <trezor_hmac_sha512_prepare>:

void trezor_hmac_sha512_prepare(const uint8_t *key, const uint32_t keylen, uint64_t *opad_digest, uint64_t *ipad_digest)
{
    14a4:	deffde04 	addi	sp,sp,-136
    14a8:	dfc02115 	stw	ra,132(sp)
    14ac:	df002015 	stw	fp,128(sp)
    14b0:	ddc01f15 	stw	r23,124(sp)
    14b4:	dd801e15 	stw	r22,120(sp)
    14b8:	dd401d15 	stw	r21,116(sp)
    14bc:	dd001c15 	stw	r20,112(sp)
    14c0:	dcc01b15 	stw	r19,108(sp)
    14c4:	dc801a15 	stw	r18,104(sp)
    14c8:	dc401915 	stw	r17,100(sp)
    14cc:	dc001815 	stw	r16,96(sp)
    14d0:	df002004 	addi	fp,sp,128
    14d4:	e13fe615 	stw	r4,-104(fp)
    14d8:	e17fe715 	stw	r5,-100(fp)
    14dc:	e1bfe815 	stw	r6,-96(fp)
    14e0:	e1ffe915 	stw	r7,-92(fp)
	static CONFIDENTIAL uint64_t key_pad[SHA512_BLOCK_LENGTH/sizeof(uint64_t)];

	memzero(key_pad, sizeof(key_pad));
    14e4:	01402004 	movi	r5,128
    14e8:	010000b4 	movhi	r4,2
    14ec:	212a6004 	addi	r4,r4,-22144
    14f0:	00018040 	call	1804 <memzero>
	if (keylen > SHA512_BLOCK_LENGTH) {
    14f4:	e0bfe717 	ldw	r2,-100(fp)
    14f8:	10802070 	cmpltui	r2,r2,129
    14fc:	10000e1e 	bne	r2,zero,1538 <trezor_hmac_sha512_prepare+0x94>
		static CONFIDENTIAL SHA512_CTX context;
		trezor_sha512_Init(&context);
    1500:	010000b4 	movhi	r4,2
    1504:	212a8004 	addi	r4,r4,-22016
    1508:	0007e300 	call	7e30 <trezor_sha512_Init>
		trezor_sha512_Update(&context, key, keylen);
    150c:	e1bfe717 	ldw	r6,-100(fp)
    1510:	e17fe617 	ldw	r5,-104(fp)
    1514:	010000b4 	movhi	r4,2
    1518:	212a8004 	addi	r4,r4,-22016
    151c:	0008dd80 	call	8dd8 <trezor_sha512_Update>
		trezor_sha512_Final(&context, (uint8_t*)key_pad);
    1520:	014000b4 	movhi	r5,2
    1524:	296a6004 	addi	r5,r5,-22144
    1528:	010000b4 	movhi	r4,2
    152c:	212a8004 	addi	r4,r4,-22016
    1530:	0009b540 	call	9b54 <trezor_sha512_Final>
    1534:	00000506 	br	154c <trezor_hmac_sha512_prepare+0xa8>
	} else {
		memcpy(key_pad, key, keylen);
    1538:	e1bfe717 	ldw	r6,-100(fp)
    153c:	e17fe617 	ldw	r5,-104(fp)
    1540:	010000b4 	movhi	r4,2
    1544:	212a6004 	addi	r4,r4,-22144
    1548:	000a0f40 	call	a0f4 <memcpy>
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    154c:	e03fe015 	stw	zero,-128(fp)
    1550:	00006b06 	br	1700 <trezor_hmac_sha512_prepare+0x25c>
		uint64_t data;
#if BYTE_ORDER == LITTLE_ENDIAN
		REVERSE64(key_pad[i], data);
    1554:	008000b4 	movhi	r2,2
    1558:	10aa6004 	addi	r2,r2,-22144
    155c:	e0ffe017 	ldw	r3,-128(fp)
    1560:	180690fa 	slli	r3,r3,3
    1564:	10c5883a 	add	r2,r2,r3
    1568:	10c00017 	ldw	r3,0(r2)
    156c:	e0ffe215 	stw	r3,-120(fp)
    1570:	10800117 	ldw	r2,4(r2)
    1574:	e0bfe315 	stw	r2,-116(fp)
    1578:	e0bfe317 	ldw	r2,-116(fp)
    157c:	e0bff615 	stw	r2,-40(fp)
    1580:	e0ffe217 	ldw	r3,-120(fp)
    1584:	e0fff715 	stw	r3,-36(fp)
    1588:	e0bff617 	ldw	r2,-40(fp)
    158c:	e0bfe215 	stw	r2,-120(fp)
    1590:	e0fff717 	ldw	r3,-36(fp)
    1594:	e0ffe315 	stw	r3,-116(fp)
    1598:	e0ffe217 	ldw	r3,-120(fp)
    159c:	00bfc074 	movhi	r2,65281
    15a0:	10bfc004 	addi	r2,r2,-256
    15a4:	1884703a 	and	r2,r3,r2
    15a8:	e0bfea15 	stw	r2,-88(fp)
    15ac:	e0ffe317 	ldw	r3,-116(fp)
    15b0:	00bfc074 	movhi	r2,65281
    15b4:	10bfc004 	addi	r2,r2,-256
    15b8:	1884703a 	and	r2,r3,r2
    15bc:	e0bfeb15 	stw	r2,-84(fp)
    15c0:	e0ffeb17 	ldw	r3,-84(fp)
    15c4:	1804963a 	slli	r2,r3,24
    15c8:	e0ffea17 	ldw	r3,-88(fp)
    15cc:	1820d23a 	srli	r16,r3,8
    15d0:	1420b03a 	or	r16,r2,r16
    15d4:	e0bfeb17 	ldw	r2,-84(fp)
    15d8:	1022d23a 	srli	r17,r2,8
    15dc:	e0ffe217 	ldw	r3,-120(fp)
    15e0:	00803ff4 	movhi	r2,255
    15e4:	10803fc4 	addi	r2,r2,255
    15e8:	1884703a 	and	r2,r3,r2
    15ec:	e0bfec15 	stw	r2,-80(fp)
    15f0:	e0ffe317 	ldw	r3,-116(fp)
    15f4:	00803ff4 	movhi	r2,255
    15f8:	10803fc4 	addi	r2,r2,255
    15fc:	1884703a 	and	r2,r3,r2
    1600:	e0bfed15 	stw	r2,-76(fp)
    1604:	e0ffec17 	ldw	r3,-80(fp)
    1608:	1804d63a 	srli	r2,r3,24
    160c:	e0ffed17 	ldw	r3,-76(fp)
    1610:	1826923a 	slli	r19,r3,8
    1614:	14e6b03a 	or	r19,r2,r19
    1618:	e0bfec17 	ldw	r2,-80(fp)
    161c:	1024923a 	slli	r18,r2,8
    1620:	8484b03a 	or	r2,r16,r18
    1624:	e0bfe215 	stw	r2,-120(fp)
    1628:	8cc4b03a 	or	r2,r17,r19
    162c:	e0bfe315 	stw	r2,-116(fp)
    1630:	e0bfe217 	ldw	r2,-120(fp)
    1634:	10bfffec 	andhi	r2,r2,65535
    1638:	e0bfee15 	stw	r2,-72(fp)
    163c:	e0bfe317 	ldw	r2,-116(fp)
    1640:	10bfffec 	andhi	r2,r2,65535
    1644:	e0bfef15 	stw	r2,-68(fp)
    1648:	e0ffef17 	ldw	r3,-68(fp)
    164c:	1804943a 	slli	r2,r3,16
    1650:	e0ffee17 	ldw	r3,-72(fp)
    1654:	1828d43a 	srli	r20,r3,16
    1658:	1528b03a 	or	r20,r2,r20
    165c:	e0bfef17 	ldw	r2,-68(fp)
    1660:	102ad43a 	srli	r21,r2,16
    1664:	e0bfe217 	ldw	r2,-120(fp)
    1668:	10bfffcc 	andi	r2,r2,65535
    166c:	e0bff015 	stw	r2,-64(fp)
    1670:	e0bfe317 	ldw	r2,-116(fp)
    1674:	10bfffcc 	andi	r2,r2,65535
    1678:	e0bff115 	stw	r2,-60(fp)
    167c:	e0fff017 	ldw	r3,-64(fp)
    1680:	1804d43a 	srli	r2,r3,16
    1684:	e0fff117 	ldw	r3,-60(fp)
    1688:	182e943a 	slli	r23,r3,16
    168c:	15eeb03a 	or	r23,r2,r23
    1690:	e0bff017 	ldw	r2,-64(fp)
    1694:	102c943a 	slli	r22,r2,16
    1698:	a584b03a 	or	r2,r20,r22
    169c:	e0bfe415 	stw	r2,-112(fp)
    16a0:	adc4b03a 	or	r2,r21,r23
    16a4:	e0bfe515 	stw	r2,-108(fp)
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
    16a8:	e0ffe417 	ldw	r3,-112(fp)
    16ac:	00971734 	movhi	r2,23644
    16b0:	10971704 	addi	r2,r2,23644
    16b4:	1884f03a 	xor	r2,r3,r2
    16b8:	e0bff215 	stw	r2,-56(fp)
    16bc:	e0ffe517 	ldw	r3,-108(fp)
    16c0:	00971734 	movhi	r2,23644
    16c4:	10971704 	addi	r2,r2,23644
    16c8:	1884f03a 	xor	r2,r3,r2
    16cc:	e0bff315 	stw	r2,-52(fp)
    16d0:	008000b4 	movhi	r2,2
    16d4:	10aa6004 	addi	r2,r2,-22144
    16d8:	e0ffe017 	ldw	r3,-128(fp)
    16dc:	180690fa 	slli	r3,r3,3
    16e0:	10c5883a 	add	r2,r2,r3
    16e4:	e0fff217 	ldw	r3,-56(fp)
    16e8:	10c00015 	stw	r3,0(r2)
    16ec:	e0fff317 	ldw	r3,-52(fp)
    16f0:	10c00115 	stw	r3,4(r2)
	} else {
		memcpy(key_pad, key, keylen);
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    16f4:	e0bfe017 	ldw	r2,-128(fp)
    16f8:	10800044 	addi	r2,r2,1
    16fc:	e0bfe015 	stw	r2,-128(fp)
    1700:	e0bfe017 	ldw	r2,-128(fp)
    1704:	10800410 	cmplti	r2,r2,16
    1708:	103f921e 	bne	r2,zero,1554 <__alt_mem_epcs_flash_controller+0xfdff8554>
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
	}
	trezor_sha512_Transform(sha512_initial_hash_value, key_pad, opad_digest);
    170c:	e1bfe817 	ldw	r6,-96(fp)
    1710:	014000b4 	movhi	r5,2
    1714:	296a6004 	addi	r5,r5,-22144
    1718:	01000074 	movhi	r4,1
    171c:	211d3b04 	addi	r4,r4,29932
    1720:	0007eb80 	call	7eb8 <trezor_sha512_Transform>

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    1724:	e03fe115 	stw	zero,-124(fp)
    1728:	00001b06 	br	1798 <trezor_hmac_sha512_prepare+0x2f4>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c5c5c5c5c ^ 0x3636363636363636;
    172c:	008000b4 	movhi	r2,2
    1730:	10aa6004 	addi	r2,r2,-22144
    1734:	e0ffe117 	ldw	r3,-124(fp)
    1738:	180690fa 	slli	r3,r3,3
    173c:	10c9883a 	add	r4,r2,r3
    1740:	20800017 	ldw	r2,0(r4)
    1744:	20c00117 	ldw	r3,4(r4)
    1748:	011a9ab4 	movhi	r4,27242
    174c:	211a9a84 	addi	r4,r4,27242
    1750:	1108f03a 	xor	r4,r2,r4
    1754:	e13ff415 	stw	r4,-48(fp)
    1758:	011a9ab4 	movhi	r4,27242
    175c:	211a9a84 	addi	r4,r4,27242
    1760:	1908f03a 	xor	r4,r3,r4
    1764:	e13ff515 	stw	r4,-44(fp)
    1768:	008000b4 	movhi	r2,2
    176c:	10aa6004 	addi	r2,r2,-22144
    1770:	e0ffe117 	ldw	r3,-124(fp)
    1774:	180690fa 	slli	r3,r3,3
    1778:	10c5883a 	add	r2,r2,r3
    177c:	e0fff417 	ldw	r3,-48(fp)
    1780:	10c00015 	stw	r3,0(r2)
    1784:	e0fff517 	ldw	r3,-44(fp)
    1788:	10c00115 	stw	r3,4(r2)
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
	}
	trezor_sha512_Transform(sha512_initial_hash_value, key_pad, opad_digest);

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    178c:	e0bfe117 	ldw	r2,-124(fp)
    1790:	10800044 	addi	r2,r2,1
    1794:	e0bfe115 	stw	r2,-124(fp)
    1798:	e0bfe117 	ldw	r2,-124(fp)
    179c:	10800410 	cmplti	r2,r2,16
    17a0:	103fe21e 	bne	r2,zero,172c <__alt_mem_epcs_flash_controller+0xfdff872c>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c5c5c5c5c ^ 0x3636363636363636;
	}
	trezor_sha512_Transform(sha512_initial_hash_value, key_pad, ipad_digest);
    17a4:	e1bfe917 	ldw	r6,-92(fp)
    17a8:	014000b4 	movhi	r5,2
    17ac:	296a6004 	addi	r5,r5,-22144
    17b0:	01000074 	movhi	r4,1
    17b4:	211d3b04 	addi	r4,r4,29932
    17b8:	0007eb80 	call	7eb8 <trezor_sha512_Transform>
	memzero(key_pad, sizeof(key_pad));
    17bc:	01402004 	movi	r5,128
    17c0:	010000b4 	movhi	r4,2
    17c4:	212a6004 	addi	r4,r4,-22144
    17c8:	00018040 	call	1804 <memzero>
}
    17cc:	0001883a 	nop
    17d0:	e6fff804 	addi	sp,fp,-32
    17d4:	dfc00917 	ldw	ra,36(sp)
    17d8:	df000817 	ldw	fp,32(sp)
    17dc:	ddc00717 	ldw	r23,28(sp)
    17e0:	dd800617 	ldw	r22,24(sp)
    17e4:	dd400517 	ldw	r21,20(sp)
    17e8:	dd000417 	ldw	r20,16(sp)
    17ec:	dcc00317 	ldw	r19,12(sp)
    17f0:	dc800217 	ldw	r18,8(sp)
    17f4:	dc400117 	ldw	r17,4(sp)
    17f8:	dc000017 	ldw	r16,0(sp)
    17fc:	dec00a04 	addi	sp,sp,40
    1800:	f800283a 	ret

00001804 <memzero>:
#include <string.h>

void memzero(void *s, size_t n)
{
    1804:	defffc04 	addi	sp,sp,-16
    1808:	dfc00315 	stw	ra,12(sp)
    180c:	df000215 	stw	fp,8(sp)
    1810:	df000204 	addi	fp,sp,8
    1814:	e13ffe15 	stw	r4,-8(fp)
    1818:	e17fff15 	stw	r5,-4(fp)
	memset(s, 0, n);
    181c:	e1bfff17 	ldw	r6,-4(fp)
    1820:	000b883a 	mov	r5,zero
    1824:	e13ffe17 	ldw	r4,-8(fp)
    1828:	000a11c0 	call	a11c <memset>
}
    182c:	0001883a 	nop
    1830:	e037883a 	mov	sp,fp
    1834:	dfc00117 	ldw	ra,4(sp)
    1838:	df000017 	ldw	fp,0(sp)
    183c:	dec00204 	addi	sp,sp,8
    1840:	f800283a 	ret

00001844 <pbkdf2_hmac_sha256_Init>:
#include "..\Include\hmac.h"
#include "..\Include\sha2mnemonic.h"
#include "..\Include\memzero.h"

void pbkdf2_hmac_sha256_Init(PBKDF2_HMAC_SHA256_CTX *pctx, const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t blocknr)
{
    1844:	deffdd04 	addi	sp,sp,-140
    1848:	dfc02215 	stw	ra,136(sp)
    184c:	df002115 	stw	fp,132(sp)
    1850:	df002104 	addi	fp,sp,132
    1854:	e13ffc15 	stw	r4,-16(fp)
    1858:	e17ffd15 	stw	r5,-12(fp)
    185c:	e1bffe15 	stw	r6,-8(fp)
    1860:	e1ffff15 	stw	r7,-4(fp)
	SHA256_CTX ctx;
#if BYTE_ORDER == LITTLE_ENDIAN
	REVERSE32(blocknr, blocknr);
    1864:	e0800317 	ldw	r2,12(fp)
    1868:	e0bfe015 	stw	r2,-128(fp)
    186c:	e0bfe017 	ldw	r2,-128(fp)
    1870:	1004143a 	roli	r2,r2,16
    1874:	e0bfe015 	stw	r2,-128(fp)
    1878:	e0ffe017 	ldw	r3,-128(fp)
    187c:	00bfc074 	movhi	r2,65281
    1880:	10bfc004 	addi	r2,r2,-256
    1884:	1884703a 	and	r2,r3,r2
    1888:	1006d23a 	srli	r3,r2,8
    188c:	e13fe017 	ldw	r4,-128(fp)
    1890:	00803ff4 	movhi	r2,255
    1894:	10803fc4 	addi	r2,r2,255
    1898:	2084703a 	and	r2,r4,r2
    189c:	1004923a 	slli	r2,r2,8
    18a0:	1884b03a 	or	r2,r3,r2
    18a4:	e0800315 	stw	r2,12(fp)
#endif

	trezor_hmac_sha256_prepare(pass, passlen, pctx->odig, pctx->idig);
    18a8:	e0fffe17 	ldw	r3,-8(fp)
    18ac:	e13ffc17 	ldw	r4,-16(fp)
    18b0:	e0bffc17 	ldw	r2,-16(fp)
    18b4:	10800804 	addi	r2,r2,32
    18b8:	100f883a 	mov	r7,r2
    18bc:	200d883a 	mov	r6,r4
    18c0:	180b883a 	mov	r5,r3
    18c4:	e13ffd17 	ldw	r4,-12(fp)
    18c8:	00010280 	call	1028 <trezor_hmac_sha256_prepare>
	memset(pctx->g, 0, sizeof(pctx->g));
    18cc:	e0bffc17 	ldw	r2,-16(fp)
    18d0:	10801804 	addi	r2,r2,96
    18d4:	01801004 	movi	r6,64
    18d8:	000b883a 	mov	r5,zero
    18dc:	1009883a 	mov	r4,r2
    18e0:	000a11c0 	call	a11c <memset>
	pctx->g[8] = 0x80000000;
    18e4:	e0bffc17 	ldw	r2,-16(fp)
    18e8:	00e00034 	movhi	r3,32768
    18ec:	10c02015 	stw	r3,128(r2)
	pctx->g[15] = (SHA256_BLOCK_LENGTH + SHA256_DIGEST_LENGTH) * 8;
    18f0:	e0bffc17 	ldw	r2,-16(fp)
    18f4:	00c0c004 	movi	r3,768
    18f8:	10c02715 	stw	r3,156(r2)

	memcpy (ctx.state, pctx->idig, sizeof(pctx->idig));
    18fc:	e0bffc17 	ldw	r2,-16(fp)
    1900:	10c00804 	addi	r3,r2,32
    1904:	e0bfe204 	addi	r2,fp,-120
    1908:	01800804 	movi	r6,32
    190c:	180b883a 	mov	r5,r3
    1910:	1009883a 	mov	r4,r2
    1914:	000a0f40 	call	a0f4 <memcpy>
	ctx.bitcount = SHA256_BLOCK_LENGTH * 8;
    1918:	00808004 	movi	r2,512
    191c:	e0bfea15 	stw	r2,-88(fp)
    1920:	e03feb15 	stw	zero,-84(fp)
	trezor_sha256_Update(&ctx, salt, saltlen);
    1924:	e0bfe204 	addi	r2,fp,-120
    1928:	e1800217 	ldw	r6,8(fp)
    192c:	e17fff17 	ldw	r5,-4(fp)
    1930:	1009883a 	mov	r4,r2
    1934:	00075440 	call	7544 <trezor_sha256_Update>
	trezor_sha256_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
    1938:	e0c00304 	addi	r3,fp,12
    193c:	e0bfe204 	addi	r2,fp,-120
    1940:	01800104 	movi	r6,4
    1944:	180b883a 	mov	r5,r3
    1948:	1009883a 	mov	r4,r2
    194c:	00075440 	call	7544 <trezor_sha256_Update>
	trezor_sha256_Final(&ctx, (uint8_t*)pctx->g);
    1950:	e0bffc17 	ldw	r2,-16(fp)
    1954:	10c01804 	addi	r3,r2,96
    1958:	e0bfe204 	addi	r2,fp,-120
    195c:	180b883a 	mov	r5,r3
    1960:	1009883a 	mov	r4,r2
    1964:	000794c0 	call	794c <trezor_sha256_Final>
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH / sizeof(uint32_t); k++) {
    1968:	e03fdf15 	stw	zero,-132(fp)
    196c:	00002006 	br	19f0 <pbkdf2_hmac_sha256_Init+0x1ac>
		REVERSE32(pctx->g[k], pctx->g[k]);
    1970:	e0fffc17 	ldw	r3,-16(fp)
    1974:	e0bfdf17 	ldw	r2,-132(fp)
    1978:	10800604 	addi	r2,r2,24
    197c:	1085883a 	add	r2,r2,r2
    1980:	1085883a 	add	r2,r2,r2
    1984:	1885883a 	add	r2,r3,r2
    1988:	10800017 	ldw	r2,0(r2)
    198c:	e0bfe115 	stw	r2,-124(fp)
    1990:	e0bfe117 	ldw	r2,-124(fp)
    1994:	1004143a 	roli	r2,r2,16
    1998:	e0bfe115 	stw	r2,-124(fp)
    199c:	e0ffe117 	ldw	r3,-124(fp)
    19a0:	00bfc074 	movhi	r2,65281
    19a4:	10bfc004 	addi	r2,r2,-256
    19a8:	1884703a 	and	r2,r3,r2
    19ac:	1006d23a 	srli	r3,r2,8
    19b0:	e13fe117 	ldw	r4,-124(fp)
    19b4:	00803ff4 	movhi	r2,255
    19b8:	10803fc4 	addi	r2,r2,255
    19bc:	2084703a 	and	r2,r4,r2
    19c0:	1004923a 	slli	r2,r2,8
    19c4:	1886b03a 	or	r3,r3,r2
    19c8:	e13ffc17 	ldw	r4,-16(fp)
    19cc:	e0bfdf17 	ldw	r2,-132(fp)
    19d0:	10800604 	addi	r2,r2,24
    19d4:	1085883a 	add	r2,r2,r2
    19d8:	1085883a 	add	r2,r2,r2
    19dc:	2085883a 	add	r2,r4,r2
    19e0:	10c00015 	stw	r3,0(r2)
	ctx.bitcount = SHA256_BLOCK_LENGTH * 8;
	trezor_sha256_Update(&ctx, salt, saltlen);
	trezor_sha256_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
	trezor_sha256_Final(&ctx, (uint8_t*)pctx->g);
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH / sizeof(uint32_t); k++) {
    19e4:	e0bfdf17 	ldw	r2,-132(fp)
    19e8:	10800044 	addi	r2,r2,1
    19ec:	e0bfdf15 	stw	r2,-132(fp)
    19f0:	e0bfdf17 	ldw	r2,-132(fp)
    19f4:	10800230 	cmpltui	r2,r2,8
    19f8:	103fdd1e 	bne	r2,zero,1970 <__alt_mem_epcs_flash_controller+0xfdff8970>
		REVERSE32(pctx->g[k], pctx->g[k]);
	}
#endif
	trezor_sha256_Transform(pctx->odig, pctx->g, pctx->g);
    19fc:	e0fffc17 	ldw	r3,-16(fp)
    1a00:	e0bffc17 	ldw	r2,-16(fp)
    1a04:	11001804 	addi	r4,r2,96
    1a08:	e0bffc17 	ldw	r2,-16(fp)
    1a0c:	10801804 	addi	r2,r2,96
    1a10:	100d883a 	mov	r6,r2
    1a14:	200b883a 	mov	r5,r4
    1a18:	1809883a 	mov	r4,r3
    1a1c:	0006f7c0 	call	6f7c <trezor_sha256_Transform>
	memcpy(pctx->f, pctx->g, SHA256_DIGEST_LENGTH);
    1a20:	e0bffc17 	ldw	r2,-16(fp)
    1a24:	10c01004 	addi	r3,r2,64
    1a28:	e0bffc17 	ldw	r2,-16(fp)
    1a2c:	10801804 	addi	r2,r2,96
    1a30:	01800804 	movi	r6,32
    1a34:	100b883a 	mov	r5,r2
    1a38:	1809883a 	mov	r4,r3
    1a3c:	000a0f40 	call	a0f4 <memcpy>
	pctx->first = 1;
    1a40:	e0bffc17 	ldw	r2,-16(fp)
    1a44:	00c00044 	movi	r3,1
    1a48:	10c02805 	stb	r3,160(r2)
}
    1a4c:	0001883a 	nop
    1a50:	e037883a 	mov	sp,fp
    1a54:	dfc00117 	ldw	ra,4(sp)
    1a58:	df000017 	ldw	fp,0(sp)
    1a5c:	dec00204 	addi	sp,sp,8
    1a60:	f800283a 	ret

00001a64 <pbkdf2_hmac_sha256_Update>:

void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
    1a64:	defffa04 	addi	sp,sp,-24
    1a68:	dfc00515 	stw	ra,20(sp)
    1a6c:	df000415 	stw	fp,16(sp)
    1a70:	df000404 	addi	fp,sp,16
    1a74:	e13ffe15 	stw	r4,-8(fp)
    1a78:	e17fff15 	stw	r5,-4(fp)
	for (uint32_t i = pctx->first; i < iterations; i++) {
    1a7c:	e0bffe17 	ldw	r2,-8(fp)
    1a80:	10802803 	ldbu	r2,160(r2)
    1a84:	10803fcc 	andi	r2,r2,255
    1a88:	1080201c 	xori	r2,r2,128
    1a8c:	10bfe004 	addi	r2,r2,-128
    1a90:	e0bffc15 	stw	r2,-16(fp)
    1a94:	00003406 	br	1b68 <pbkdf2_hmac_sha256_Update+0x104>
		trezor_sha256_Transform(pctx->idig, pctx->g, pctx->g);
    1a98:	e0bffe17 	ldw	r2,-8(fp)
    1a9c:	10c00804 	addi	r3,r2,32
    1aa0:	e0bffe17 	ldw	r2,-8(fp)
    1aa4:	11001804 	addi	r4,r2,96
    1aa8:	e0bffe17 	ldw	r2,-8(fp)
    1aac:	10801804 	addi	r2,r2,96
    1ab0:	100d883a 	mov	r6,r2
    1ab4:	200b883a 	mov	r5,r4
    1ab8:	1809883a 	mov	r4,r3
    1abc:	0006f7c0 	call	6f7c <trezor_sha256_Transform>
		trezor_sha256_Transform(pctx->odig, pctx->g, pctx->g);
    1ac0:	e0fffe17 	ldw	r3,-8(fp)
    1ac4:	e0bffe17 	ldw	r2,-8(fp)
    1ac8:	11001804 	addi	r4,r2,96
    1acc:	e0bffe17 	ldw	r2,-8(fp)
    1ad0:	10801804 	addi	r2,r2,96
    1ad4:	100d883a 	mov	r6,r2
    1ad8:	200b883a 	mov	r5,r4
    1adc:	1809883a 	mov	r4,r3
    1ae0:	0006f7c0 	call	6f7c <trezor_sha256_Transform>
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
    1ae4:	e03ffd15 	stw	zero,-12(fp)
    1ae8:	00001906 	br	1b50 <pbkdf2_hmac_sha256_Update+0xec>
			pctx->f[j] ^= pctx->g[j];
    1aec:	e0fffe17 	ldw	r3,-8(fp)
    1af0:	e0bffd17 	ldw	r2,-12(fp)
    1af4:	10800404 	addi	r2,r2,16
    1af8:	1085883a 	add	r2,r2,r2
    1afc:	1085883a 	add	r2,r2,r2
    1b00:	1885883a 	add	r2,r3,r2
    1b04:	10c00017 	ldw	r3,0(r2)
    1b08:	e13ffe17 	ldw	r4,-8(fp)
    1b0c:	e0bffd17 	ldw	r2,-12(fp)
    1b10:	10800604 	addi	r2,r2,24
    1b14:	1085883a 	add	r2,r2,r2
    1b18:	1085883a 	add	r2,r2,r2
    1b1c:	2085883a 	add	r2,r4,r2
    1b20:	10800017 	ldw	r2,0(r2)
    1b24:	1886f03a 	xor	r3,r3,r2
    1b28:	e13ffe17 	ldw	r4,-8(fp)
    1b2c:	e0bffd17 	ldw	r2,-12(fp)
    1b30:	10800404 	addi	r2,r2,16
    1b34:	1085883a 	add	r2,r2,r2
    1b38:	1085883a 	add	r2,r2,r2
    1b3c:	2085883a 	add	r2,r4,r2
    1b40:	10c00015 	stw	r3,0(r2)
void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
		trezor_sha256_Transform(pctx->idig, pctx->g, pctx->g);
		trezor_sha256_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
    1b44:	e0bffd17 	ldw	r2,-12(fp)
    1b48:	10800044 	addi	r2,r2,1
    1b4c:	e0bffd15 	stw	r2,-12(fp)
    1b50:	e0bffd17 	ldw	r2,-12(fp)
    1b54:	10800230 	cmpltui	r2,r2,8
    1b58:	103fe41e 	bne	r2,zero,1aec <__alt_mem_epcs_flash_controller+0xfdff8aec>
	pctx->first = 1;
}

void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
    1b5c:	e0bffc17 	ldw	r2,-16(fp)
    1b60:	10800044 	addi	r2,r2,1
    1b64:	e0bffc15 	stw	r2,-16(fp)
    1b68:	e0fffc17 	ldw	r3,-16(fp)
    1b6c:	e0bfff17 	ldw	r2,-4(fp)
    1b70:	18bfc936 	bltu	r3,r2,1a98 <__alt_mem_epcs_flash_controller+0xfdff8a98>
		trezor_sha256_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
			pctx->f[j] ^= pctx->g[j];
		}
	}
	pctx->first = 0;
    1b74:	e0bffe17 	ldw	r2,-8(fp)
    1b78:	10002805 	stb	zero,160(r2)
}
    1b7c:	0001883a 	nop
    1b80:	e037883a 	mov	sp,fp
    1b84:	dfc00117 	ldw	ra,4(sp)
    1b88:	df000017 	ldw	fp,0(sp)
    1b8c:	dec00204 	addi	sp,sp,8
    1b90:	f800283a 	ret

00001b94 <pbkdf2_hmac_sha256_Final>:

void pbkdf2_hmac_sha256_Final(PBKDF2_HMAC_SHA256_CTX *pctx, uint8_t *key)
{
    1b94:	defffa04 	addi	sp,sp,-24
    1b98:	dfc00515 	stw	ra,20(sp)
    1b9c:	df000415 	stw	fp,16(sp)
    1ba0:	df000404 	addi	fp,sp,16
    1ba4:	e13ffe15 	stw	r4,-8(fp)
    1ba8:	e17fff15 	stw	r5,-4(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH/sizeof(uint32_t); k++) {
    1bac:	e03ffc15 	stw	zero,-16(fp)
    1bb0:	00002006 	br	1c34 <pbkdf2_hmac_sha256_Final+0xa0>
		REVERSE32(pctx->f[k], pctx->f[k]);
    1bb4:	e0fffe17 	ldw	r3,-8(fp)
    1bb8:	e0bffc17 	ldw	r2,-16(fp)
    1bbc:	10800404 	addi	r2,r2,16
    1bc0:	1085883a 	add	r2,r2,r2
    1bc4:	1085883a 	add	r2,r2,r2
    1bc8:	1885883a 	add	r2,r3,r2
    1bcc:	10800017 	ldw	r2,0(r2)
    1bd0:	e0bffd15 	stw	r2,-12(fp)
    1bd4:	e0bffd17 	ldw	r2,-12(fp)
    1bd8:	1004143a 	roli	r2,r2,16
    1bdc:	e0bffd15 	stw	r2,-12(fp)
    1be0:	e0fffd17 	ldw	r3,-12(fp)
    1be4:	00bfc074 	movhi	r2,65281
    1be8:	10bfc004 	addi	r2,r2,-256
    1bec:	1884703a 	and	r2,r3,r2
    1bf0:	1006d23a 	srli	r3,r2,8
    1bf4:	e13ffd17 	ldw	r4,-12(fp)
    1bf8:	00803ff4 	movhi	r2,255
    1bfc:	10803fc4 	addi	r2,r2,255
    1c00:	2084703a 	and	r2,r4,r2
    1c04:	1004923a 	slli	r2,r2,8
    1c08:	1886b03a 	or	r3,r3,r2
    1c0c:	e13ffe17 	ldw	r4,-8(fp)
    1c10:	e0bffc17 	ldw	r2,-16(fp)
    1c14:	10800404 	addi	r2,r2,16
    1c18:	1085883a 	add	r2,r2,r2
    1c1c:	1085883a 	add	r2,r2,r2
    1c20:	2085883a 	add	r2,r4,r2
    1c24:	10c00015 	stw	r3,0(r2)
}

void pbkdf2_hmac_sha256_Final(PBKDF2_HMAC_SHA256_CTX *pctx, uint8_t *key)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH/sizeof(uint32_t); k++) {
    1c28:	e0bffc17 	ldw	r2,-16(fp)
    1c2c:	10800044 	addi	r2,r2,1
    1c30:	e0bffc15 	stw	r2,-16(fp)
    1c34:	e0bffc17 	ldw	r2,-16(fp)
    1c38:	10800230 	cmpltui	r2,r2,8
    1c3c:	103fdd1e 	bne	r2,zero,1bb4 <__alt_mem_epcs_flash_controller+0xfdff8bb4>
		REVERSE32(pctx->f[k], pctx->f[k]);
	}
#endif
	memcpy(key, pctx->f, SHA256_DIGEST_LENGTH);
    1c40:	e0bffe17 	ldw	r2,-8(fp)
    1c44:	10801004 	addi	r2,r2,64
    1c48:	01800804 	movi	r6,32
    1c4c:	100b883a 	mov	r5,r2
    1c50:	e13fff17 	ldw	r4,-4(fp)
    1c54:	000a0f40 	call	a0f4 <memcpy>
	memzero(pctx, sizeof(PBKDF2_HMAC_SHA256_CTX));
    1c58:	01402904 	movi	r5,164
    1c5c:	e13ffe17 	ldw	r4,-8(fp)
    1c60:	00018040 	call	1804 <memzero>
}
    1c64:	0001883a 	nop
    1c68:	e037883a 	mov	sp,fp
    1c6c:	dfc00117 	ldw	ra,4(sp)
    1c70:	df000017 	ldw	fp,0(sp)
    1c74:	dec00204 	addi	sp,sp,8
    1c78:	f800283a 	ret

00001c7c <pbkdf2_hmac_sha256>:

void pbkdf2_hmac_sha256(const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t iterations, uint8_t *key, int keylen)
{
    1c7c:	deffc304 	addi	sp,sp,-244
    1c80:	dfc03c15 	stw	ra,240(sp)
    1c84:	df003b15 	stw	fp,236(sp)
    1c88:	df003b04 	addi	fp,sp,236
    1c8c:	e13ffc15 	stw	r4,-16(fp)
    1c90:	e17ffd15 	stw	r5,-12(fp)
    1c94:	e1bffe15 	stw	r6,-8(fp)
    1c98:	e1ffff15 	stw	r7,-4(fp)
	uint32_t last_block_size = keylen % SHA256_DIGEST_LENGTH;
    1c9c:	e0c00417 	ldw	r3,16(fp)
    1ca0:	00a00034 	movhi	r2,32768
    1ca4:	108007c4 	addi	r2,r2,31
    1ca8:	1884703a 	and	r2,r3,r2
    1cac:	1000040e 	bge	r2,zero,1cc0 <pbkdf2_hmac_sha256+0x44>
    1cb0:	10bfffc4 	addi	r2,r2,-1
    1cb4:	00fff804 	movi	r3,-32
    1cb8:	10c4b03a 	or	r2,r2,r3
    1cbc:	10800044 	addi	r2,r2,1
    1cc0:	e0bfc715 	stw	r2,-228(fp)
	uint32_t blocks_count = keylen / SHA256_DIGEST_LENGTH;
    1cc4:	e0800417 	ldw	r2,16(fp)
    1cc8:	1000010e 	bge	r2,zero,1cd0 <pbkdf2_hmac_sha256+0x54>
    1ccc:	108007c4 	addi	r2,r2,31
    1cd0:	1005d17a 	srai	r2,r2,5
    1cd4:	e0bfc815 	stw	r2,-224(fp)
	if (last_block_size) {
    1cd8:	e0bfc717 	ldw	r2,-228(fp)
    1cdc:	10000426 	beq	r2,zero,1cf0 <pbkdf2_hmac_sha256+0x74>
		blocks_count++;
    1ce0:	e0bfc817 	ldw	r2,-224(fp)
    1ce4:	10800044 	addi	r2,r2,1
    1ce8:	e0bfc815 	stw	r2,-224(fp)
    1cec:	00000206 	br	1cf8 <pbkdf2_hmac_sha256+0x7c>
	} else {
		last_block_size = SHA256_DIGEST_LENGTH;
    1cf0:	00800804 	movi	r2,32
    1cf4:	e0bfc715 	stw	r2,-228(fp)
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    1cf8:	00800044 	movi	r2,1
    1cfc:	e0bfc915 	stw	r2,-220(fp)
    1d00:	00003106 	br	1dc8 <pbkdf2_hmac_sha256+0x14c>
		PBKDF2_HMAC_SHA256_CTX pctx;
		pbkdf2_hmac_sha256_Init(&pctx, pass, passlen, salt, saltlen, blocknr);
    1d04:	e0ffcb04 	addi	r3,fp,-212
    1d08:	e0bfc917 	ldw	r2,-220(fp)
    1d0c:	d8800115 	stw	r2,4(sp)
    1d10:	e0bfff17 	ldw	r2,-4(fp)
    1d14:	d8800015 	stw	r2,0(sp)
    1d18:	e1fffe17 	ldw	r7,-8(fp)
    1d1c:	e1bffd17 	ldw	r6,-12(fp)
    1d20:	e17ffc17 	ldw	r5,-16(fp)
    1d24:	1809883a 	mov	r4,r3
    1d28:	00018440 	call	1844 <pbkdf2_hmac_sha256_Init>
		pbkdf2_hmac_sha256_Update(&pctx, iterations);
    1d2c:	e0bfcb04 	addi	r2,fp,-212
    1d30:	e1400217 	ldw	r5,8(fp)
    1d34:	1009883a 	mov	r4,r2
    1d38:	0001a640 	call	1a64 <pbkdf2_hmac_sha256_Update>
		uint8_t digest[SHA256_DIGEST_LENGTH];
		pbkdf2_hmac_sha256_Final(&pctx, digest);
    1d3c:	e0fff404 	addi	r3,fp,-48
    1d40:	e0bfcb04 	addi	r2,fp,-212
    1d44:	180b883a 	mov	r5,r3
    1d48:	1009883a 	mov	r4,r2
    1d4c:	0001b940 	call	1b94 <pbkdf2_hmac_sha256_Final>
		uint32_t key_offset = (blocknr - 1) * SHA256_DIGEST_LENGTH;
    1d50:	e0ffc917 	ldw	r3,-220(fp)
    1d54:	00820034 	movhi	r2,2048
    1d58:	10bfffc4 	addi	r2,r2,-1
    1d5c:	1885883a 	add	r2,r3,r2
    1d60:	1004917a 	slli	r2,r2,5
    1d64:	e0bfca15 	stw	r2,-216(fp)
		if (blocknr < blocks_count) {
    1d68:	e0ffc917 	ldw	r3,-220(fp)
    1d6c:	e0bfc817 	ldw	r2,-224(fp)
    1d70:	18800a2e 	bgeu	r3,r2,1d9c <pbkdf2_hmac_sha256+0x120>
			memcpy(key + key_offset, digest, SHA256_DIGEST_LENGTH);
    1d74:	e0c00317 	ldw	r3,12(fp)
    1d78:	e0bfca17 	ldw	r2,-216(fp)
    1d7c:	1885883a 	add	r2,r3,r2
    1d80:	1009883a 	mov	r4,r2
    1d84:	e0bff404 	addi	r2,fp,-48
    1d88:	00c00804 	movi	r3,32
    1d8c:	180d883a 	mov	r6,r3
    1d90:	100b883a 	mov	r5,r2
    1d94:	000a0f40 	call	a0f4 <memcpy>
    1d98:	00000806 	br	1dbc <pbkdf2_hmac_sha256+0x140>
		} else {
			memcpy(key + key_offset, digest, last_block_size);
    1d9c:	e0c00317 	ldw	r3,12(fp)
    1da0:	e0bfca17 	ldw	r2,-216(fp)
    1da4:	1885883a 	add	r2,r3,r2
    1da8:	e0fff404 	addi	r3,fp,-48
    1dac:	e1bfc717 	ldw	r6,-228(fp)
    1db0:	180b883a 	mov	r5,r3
    1db4:	1009883a 	mov	r4,r2
    1db8:	000a0f40 	call	a0f4 <memcpy>
	if (last_block_size) {
		blocks_count++;
	} else {
		last_block_size = SHA256_DIGEST_LENGTH;
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    1dbc:	e0bfc917 	ldw	r2,-220(fp)
    1dc0:	10800044 	addi	r2,r2,1
    1dc4:	e0bfc915 	stw	r2,-220(fp)
    1dc8:	e0bfc917 	ldw	r2,-220(fp)
    1dcc:	e0ffc817 	ldw	r3,-224(fp)
    1dd0:	18bfcc2e 	bgeu	r3,r2,1d04 <__alt_mem_epcs_flash_controller+0xfdff8d04>
			memcpy(key + key_offset, digest, SHA256_DIGEST_LENGTH);
		} else {
			memcpy(key + key_offset, digest, last_block_size);
		}
	}
}
    1dd4:	0001883a 	nop
    1dd8:	e037883a 	mov	sp,fp
    1ddc:	dfc00117 	ldw	ra,4(sp)
    1de0:	df000017 	ldw	fp,0(sp)
    1de4:	dec00204 	addi	sp,sp,8
    1de8:	f800283a 	ret

00001dec <pbkdf2_hmac_sha512_Init>:

void pbkdf2_hmac_sha512_Init(PBKDF2_HMAC_SHA512_CTX *pctx, const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t blocknr)
{
    1dec:	deffae04 	addi	sp,sp,-328
    1df0:	dfc05115 	stw	ra,324(sp)
    1df4:	df005015 	stw	fp,320(sp)
    1df8:	ddc04f15 	stw	r23,316(sp)
    1dfc:	dd804e15 	stw	r22,312(sp)
    1e00:	dd404d15 	stw	r21,308(sp)
    1e04:	dd004c15 	stw	r20,304(sp)
    1e08:	dcc04b15 	stw	r19,300(sp)
    1e0c:	dc804a15 	stw	r18,296(sp)
    1e10:	dc404915 	stw	r17,292(sp)
    1e14:	dc004815 	stw	r16,288(sp)
    1e18:	df005004 	addi	fp,sp,320
    1e1c:	e13fe815 	stw	r4,-96(fp)
    1e20:	e17fe915 	stw	r5,-92(fp)
    1e24:	e1bfea15 	stw	r6,-88(fp)
    1e28:	e1ffeb15 	stw	r7,-84(fp)
	SHA512_CTX ctx;
#if BYTE_ORDER == LITTLE_ENDIAN
	REVERSE32(blocknr, blocknr);
    1e2c:	e0800317 	ldw	r2,12(fp)
    1e30:	e0bfb115 	stw	r2,-316(fp)
    1e34:	e0bfb117 	ldw	r2,-316(fp)
    1e38:	1004143a 	roli	r2,r2,16
    1e3c:	e0bfb115 	stw	r2,-316(fp)
    1e40:	e0ffb117 	ldw	r3,-316(fp)
    1e44:	00bfc074 	movhi	r2,65281
    1e48:	10bfc004 	addi	r2,r2,-256
    1e4c:	1884703a 	and	r2,r3,r2
    1e50:	1006d23a 	srli	r3,r2,8
    1e54:	e13fb117 	ldw	r4,-316(fp)
    1e58:	00803ff4 	movhi	r2,255
    1e5c:	10803fc4 	addi	r2,r2,255
    1e60:	2084703a 	and	r2,r4,r2
    1e64:	1004923a 	slli	r2,r2,8
    1e68:	1884b03a 	or	r2,r3,r2
    1e6c:	e0800315 	stw	r2,12(fp)
#endif

	trezor_hmac_sha512_prepare(pass, passlen, pctx->odig, pctx->idig);
    1e70:	e0ffea17 	ldw	r3,-88(fp)
    1e74:	e13fe817 	ldw	r4,-96(fp)
    1e78:	e0bfe817 	ldw	r2,-96(fp)
    1e7c:	10801004 	addi	r2,r2,64
    1e80:	100f883a 	mov	r7,r2
    1e84:	200d883a 	mov	r6,r4
    1e88:	180b883a 	mov	r5,r3
    1e8c:	e13fe917 	ldw	r4,-92(fp)
    1e90:	00014a40 	call	14a4 <trezor_hmac_sha512_prepare>
	memset(pctx->g, 0, sizeof(pctx->g));
    1e94:	e0bfe817 	ldw	r2,-96(fp)
    1e98:	10803004 	addi	r2,r2,192
    1e9c:	01802004 	movi	r6,128
    1ea0:	000b883a 	mov	r5,zero
    1ea4:	1009883a 	mov	r4,r2
    1ea8:	000a11c0 	call	a11c <memset>
	pctx->g[8] = 0x8000000000000000;
    1eac:	e0bfe817 	ldw	r2,-96(fp)
    1eb0:	10004015 	stw	zero,256(r2)
    1eb4:	00e00034 	movhi	r3,32768
    1eb8:	10c04115 	stw	r3,260(r2)
	pctx->g[15] = (SHA512_BLOCK_LENGTH + SHA512_DIGEST_LENGTH) * 8;
    1ebc:	e0bfe817 	ldw	r2,-96(fp)
    1ec0:	00c18004 	movi	r3,1536
    1ec4:	10c04e15 	stw	r3,312(r2)
    1ec8:	10004f15 	stw	zero,316(r2)

	memcpy (ctx.state, pctx->idig, sizeof(pctx->idig));
    1ecc:	e0bfe817 	ldw	r2,-96(fp)
    1ed0:	10c01004 	addi	r3,r2,64
    1ed4:	e0bfb404 	addi	r2,fp,-304
    1ed8:	01801004 	movi	r6,64
    1edc:	180b883a 	mov	r5,r3
    1ee0:	1009883a 	mov	r4,r2
    1ee4:	000a0f40 	call	a0f4 <memcpy>
	ctx.bitcount[0] = SHA512_BLOCK_LENGTH * 8;
    1ee8:	00810004 	movi	r2,1024
    1eec:	e0bfc415 	stw	r2,-240(fp)
    1ef0:	e03fc515 	stw	zero,-236(fp)
	ctx.bitcount[1] = 0;
    1ef4:	e03fc615 	stw	zero,-232(fp)
    1ef8:	e03fc715 	stw	zero,-228(fp)
	trezor_sha512_Update(&ctx, salt, saltlen);
    1efc:	e0bfb404 	addi	r2,fp,-304
    1f00:	e1800217 	ldw	r6,8(fp)
    1f04:	e17feb17 	ldw	r5,-84(fp)
    1f08:	1009883a 	mov	r4,r2
    1f0c:	0008dd80 	call	8dd8 <trezor_sha512_Update>
	trezor_sha512_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
    1f10:	e0c00304 	addi	r3,fp,12
    1f14:	e0bfb404 	addi	r2,fp,-304
    1f18:	01800104 	movi	r6,4
    1f1c:	180b883a 	mov	r5,r3
    1f20:	1009883a 	mov	r4,r2
    1f24:	0008dd80 	call	8dd8 <trezor_sha512_Update>
	trezor_sha512_Final(&ctx, (uint8_t*)pctx->g);
    1f28:	e0bfe817 	ldw	r2,-96(fp)
    1f2c:	10c03004 	addi	r3,r2,192
    1f30:	e0bfb404 	addi	r2,fp,-304
    1f34:	180b883a 	mov	r5,r3
    1f38:	1009883a 	mov	r4,r2
    1f3c:	0009b540 	call	9b54 <trezor_sha512_Final>
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH / sizeof(uint64_t); k++) {
    1f40:	e03fb015 	stw	zero,-320(fp)
    1f44:	00006106 	br	20cc <pbkdf2_hmac_sha512_Init+0x2e0>
		REVERSE64(pctx->g[k], pctx->g[k]);
    1f48:	e0ffe817 	ldw	r3,-96(fp)
    1f4c:	e0bfb017 	ldw	r2,-320(fp)
    1f50:	10800604 	addi	r2,r2,24
    1f54:	100490fa 	slli	r2,r2,3
    1f58:	1885883a 	add	r2,r3,r2
    1f5c:	10c00017 	ldw	r3,0(r2)
    1f60:	e0ffb215 	stw	r3,-312(fp)
    1f64:	10800117 	ldw	r2,4(r2)
    1f68:	e0bfb315 	stw	r2,-308(fp)
    1f6c:	e0bfb317 	ldw	r2,-308(fp)
    1f70:	e0bff615 	stw	r2,-40(fp)
    1f74:	e0ffb217 	ldw	r3,-312(fp)
    1f78:	e0fff715 	stw	r3,-36(fp)
    1f7c:	e0bff617 	ldw	r2,-40(fp)
    1f80:	e0bfb215 	stw	r2,-312(fp)
    1f84:	e0fff717 	ldw	r3,-36(fp)
    1f88:	e0ffb315 	stw	r3,-308(fp)
    1f8c:	e0ffb217 	ldw	r3,-312(fp)
    1f90:	00bfc074 	movhi	r2,65281
    1f94:	10bfc004 	addi	r2,r2,-256
    1f98:	1884703a 	and	r2,r3,r2
    1f9c:	e0bfec15 	stw	r2,-80(fp)
    1fa0:	e0ffb317 	ldw	r3,-308(fp)
    1fa4:	00bfc074 	movhi	r2,65281
    1fa8:	10bfc004 	addi	r2,r2,-256
    1fac:	1884703a 	and	r2,r3,r2
    1fb0:	e0bfed15 	stw	r2,-76(fp)
    1fb4:	e0ffed17 	ldw	r3,-76(fp)
    1fb8:	1804963a 	slli	r2,r3,24
    1fbc:	e0ffec17 	ldw	r3,-80(fp)
    1fc0:	1820d23a 	srli	r16,r3,8
    1fc4:	1420b03a 	or	r16,r2,r16
    1fc8:	e0bfed17 	ldw	r2,-76(fp)
    1fcc:	1022d23a 	srli	r17,r2,8
    1fd0:	e0ffb217 	ldw	r3,-312(fp)
    1fd4:	00803ff4 	movhi	r2,255
    1fd8:	10803fc4 	addi	r2,r2,255
    1fdc:	1884703a 	and	r2,r3,r2
    1fe0:	e0bfee15 	stw	r2,-72(fp)
    1fe4:	e0ffb317 	ldw	r3,-308(fp)
    1fe8:	00803ff4 	movhi	r2,255
    1fec:	10803fc4 	addi	r2,r2,255
    1ff0:	1884703a 	and	r2,r3,r2
    1ff4:	e0bfef15 	stw	r2,-68(fp)
    1ff8:	e0ffee17 	ldw	r3,-72(fp)
    1ffc:	1804d63a 	srli	r2,r3,24
    2000:	e0ffef17 	ldw	r3,-68(fp)
    2004:	1826923a 	slli	r19,r3,8
    2008:	14e6b03a 	or	r19,r2,r19
    200c:	e0bfee17 	ldw	r2,-72(fp)
    2010:	1024923a 	slli	r18,r2,8
    2014:	8484b03a 	or	r2,r16,r18
    2018:	e0bfb215 	stw	r2,-312(fp)
    201c:	8cc4b03a 	or	r2,r17,r19
    2020:	e0bfb315 	stw	r2,-308(fp)
    2024:	e0bfb217 	ldw	r2,-312(fp)
    2028:	10bfffec 	andhi	r2,r2,65535
    202c:	e0bff015 	stw	r2,-64(fp)
    2030:	e0bfb317 	ldw	r2,-308(fp)
    2034:	10bfffec 	andhi	r2,r2,65535
    2038:	e0bff115 	stw	r2,-60(fp)
    203c:	e0fff117 	ldw	r3,-60(fp)
    2040:	1804943a 	slli	r2,r3,16
    2044:	e0fff017 	ldw	r3,-64(fp)
    2048:	1828d43a 	srli	r20,r3,16
    204c:	1528b03a 	or	r20,r2,r20
    2050:	e0bff117 	ldw	r2,-60(fp)
    2054:	102ad43a 	srli	r21,r2,16
    2058:	e0bfb217 	ldw	r2,-312(fp)
    205c:	10bfffcc 	andi	r2,r2,65535
    2060:	e0bff215 	stw	r2,-56(fp)
    2064:	e0bfb317 	ldw	r2,-308(fp)
    2068:	10bfffcc 	andi	r2,r2,65535
    206c:	e0bff315 	stw	r2,-52(fp)
    2070:	e0fff217 	ldw	r3,-56(fp)
    2074:	1804d43a 	srli	r2,r3,16
    2078:	e0fff317 	ldw	r3,-52(fp)
    207c:	182e943a 	slli	r23,r3,16
    2080:	15eeb03a 	or	r23,r2,r23
    2084:	e0bff217 	ldw	r2,-56(fp)
    2088:	102c943a 	slli	r22,r2,16
    208c:	a586b03a 	or	r3,r20,r22
    2090:	e0fff415 	stw	r3,-48(fp)
    2094:	adc4b03a 	or	r2,r21,r23
    2098:	e0bff515 	stw	r2,-44(fp)
    209c:	e0ffe817 	ldw	r3,-96(fp)
    20a0:	e0bfb017 	ldw	r2,-320(fp)
    20a4:	10800604 	addi	r2,r2,24
    20a8:	100490fa 	slli	r2,r2,3
    20ac:	1885883a 	add	r2,r3,r2
    20b0:	e0fff417 	ldw	r3,-48(fp)
    20b4:	10c00015 	stw	r3,0(r2)
    20b8:	e0fff517 	ldw	r3,-44(fp)
    20bc:	10c00115 	stw	r3,4(r2)
	ctx.bitcount[1] = 0;
	trezor_sha512_Update(&ctx, salt, saltlen);
	trezor_sha512_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
	trezor_sha512_Final(&ctx, (uint8_t*)pctx->g);
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH / sizeof(uint64_t); k++) {
    20c0:	e0bfb017 	ldw	r2,-320(fp)
    20c4:	10800044 	addi	r2,r2,1
    20c8:	e0bfb015 	stw	r2,-320(fp)
    20cc:	e0bfb017 	ldw	r2,-320(fp)
    20d0:	10800230 	cmpltui	r2,r2,8
    20d4:	103f9c1e 	bne	r2,zero,1f48 <__alt_mem_epcs_flash_controller+0xfdff8f48>
		REVERSE64(pctx->g[k], pctx->g[k]);
	}
#endif
	trezor_sha512_Transform(pctx->odig, pctx->g, pctx->g);
    20d8:	e0ffe817 	ldw	r3,-96(fp)
    20dc:	e0bfe817 	ldw	r2,-96(fp)
    20e0:	11003004 	addi	r4,r2,192
    20e4:	e0bfe817 	ldw	r2,-96(fp)
    20e8:	10803004 	addi	r2,r2,192
    20ec:	100d883a 	mov	r6,r2
    20f0:	200b883a 	mov	r5,r4
    20f4:	1809883a 	mov	r4,r3
    20f8:	0007eb80 	call	7eb8 <trezor_sha512_Transform>
	memcpy(pctx->f, pctx->g, SHA512_DIGEST_LENGTH);
    20fc:	e0bfe817 	ldw	r2,-96(fp)
    2100:	10c02004 	addi	r3,r2,128
    2104:	e0bfe817 	ldw	r2,-96(fp)
    2108:	10803004 	addi	r2,r2,192
    210c:	01801004 	movi	r6,64
    2110:	100b883a 	mov	r5,r2
    2114:	1809883a 	mov	r4,r3
    2118:	000a0f40 	call	a0f4 <memcpy>
	pctx->first = 1;
    211c:	e0bfe817 	ldw	r2,-96(fp)
    2120:	00c00044 	movi	r3,1
    2124:	10c05005 	stb	r3,320(r2)
}
    2128:	0001883a 	nop
    212c:	e6fff804 	addi	sp,fp,-32
    2130:	dfc00917 	ldw	ra,36(sp)
    2134:	df000817 	ldw	fp,32(sp)
    2138:	ddc00717 	ldw	r23,28(sp)
    213c:	dd800617 	ldw	r22,24(sp)
    2140:	dd400517 	ldw	r21,20(sp)
    2144:	dd000417 	ldw	r20,16(sp)
    2148:	dcc00317 	ldw	r19,12(sp)
    214c:	dc800217 	ldw	r18,8(sp)
    2150:	dc400117 	ldw	r17,4(sp)
    2154:	dc000017 	ldw	r16,0(sp)
    2158:	dec00a04 	addi	sp,sp,40
    215c:	f800283a 	ret

00002160 <pbkdf2_hmac_sha512_Update>:

void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
    2160:	defff804 	addi	sp,sp,-32
    2164:	dfc00715 	stw	ra,28(sp)
    2168:	df000615 	stw	fp,24(sp)
    216c:	dc400515 	stw	r17,20(sp)
    2170:	dc000415 	stw	r16,16(sp)
    2174:	df000604 	addi	fp,sp,24
    2178:	e13ffc15 	stw	r4,-16(fp)
    217c:	e17ffd15 	stw	r5,-12(fp)
	for (uint32_t i = pctx->first; i < iterations; i++) {
    2180:	e0bffc17 	ldw	r2,-16(fp)
    2184:	10805003 	ldbu	r2,320(r2)
    2188:	10803fcc 	andi	r2,r2,255
    218c:	1080201c 	xori	r2,r2,128
    2190:	10bfe004 	addi	r2,r2,-128
    2194:	e0bffa15 	stw	r2,-24(fp)
    2198:	00003506 	br	2270 <pbkdf2_hmac_sha512_Update+0x110>
		trezor_sha512_Transform(pctx->idig, pctx->g, pctx->g);
    219c:	e0bffc17 	ldw	r2,-16(fp)
    21a0:	10c01004 	addi	r3,r2,64
    21a4:	e0bffc17 	ldw	r2,-16(fp)
    21a8:	11003004 	addi	r4,r2,192
    21ac:	e0bffc17 	ldw	r2,-16(fp)
    21b0:	10803004 	addi	r2,r2,192
    21b4:	100d883a 	mov	r6,r2
    21b8:	200b883a 	mov	r5,r4
    21bc:	1809883a 	mov	r4,r3
    21c0:	0007eb80 	call	7eb8 <trezor_sha512_Transform>
		trezor_sha512_Transform(pctx->odig, pctx->g, pctx->g);
    21c4:	e0fffc17 	ldw	r3,-16(fp)
    21c8:	e0bffc17 	ldw	r2,-16(fp)
    21cc:	11003004 	addi	r4,r2,192
    21d0:	e0bffc17 	ldw	r2,-16(fp)
    21d4:	10803004 	addi	r2,r2,192
    21d8:	100d883a 	mov	r6,r2
    21dc:	200b883a 	mov	r5,r4
    21e0:	1809883a 	mov	r4,r3
    21e4:	0007eb80 	call	7eb8 <trezor_sha512_Transform>
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
    21e8:	e03ffb15 	stw	zero,-20(fp)
    21ec:	00001a06 	br	2258 <pbkdf2_hmac_sha512_Update+0xf8>
			pctx->f[j] ^= pctx->g[j];
    21f0:	e0fffc17 	ldw	r3,-16(fp)
    21f4:	e0bffb17 	ldw	r2,-20(fp)
    21f8:	10800404 	addi	r2,r2,16
    21fc:	100490fa 	slli	r2,r2,3
    2200:	1885883a 	add	r2,r3,r2
    2204:	11000017 	ldw	r4,0(r2)
    2208:	11400117 	ldw	r5,4(r2)
    220c:	e0fffc17 	ldw	r3,-16(fp)
    2210:	e0bffb17 	ldw	r2,-20(fp)
    2214:	10800604 	addi	r2,r2,24
    2218:	100490fa 	slli	r2,r2,3
    221c:	188d883a 	add	r6,r3,r2
    2220:	30800017 	ldw	r2,0(r6)
    2224:	30c00117 	ldw	r3,4(r6)
    2228:	20a0f03a 	xor	r16,r4,r2
    222c:	28e2f03a 	xor	r17,r5,r3
    2230:	e0fffc17 	ldw	r3,-16(fp)
    2234:	e0bffb17 	ldw	r2,-20(fp)
    2238:	10800404 	addi	r2,r2,16
    223c:	100490fa 	slli	r2,r2,3
    2240:	1885883a 	add	r2,r3,r2
    2244:	14000015 	stw	r16,0(r2)
    2248:	14400115 	stw	r17,4(r2)
void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
		trezor_sha512_Transform(pctx->idig, pctx->g, pctx->g);
		trezor_sha512_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
    224c:	e0bffb17 	ldw	r2,-20(fp)
    2250:	10800044 	addi	r2,r2,1
    2254:	e0bffb15 	stw	r2,-20(fp)
    2258:	e0bffb17 	ldw	r2,-20(fp)
    225c:	10800230 	cmpltui	r2,r2,8
    2260:	103fe31e 	bne	r2,zero,21f0 <__alt_mem_epcs_flash_controller+0xfdff91f0>
	pctx->first = 1;
}

void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
    2264:	e0bffa17 	ldw	r2,-24(fp)
    2268:	10800044 	addi	r2,r2,1
    226c:	e0bffa15 	stw	r2,-24(fp)
    2270:	e0fffa17 	ldw	r3,-24(fp)
    2274:	e0bffd17 	ldw	r2,-12(fp)
    2278:	18bfc836 	bltu	r3,r2,219c <__alt_mem_epcs_flash_controller+0xfdff919c>
		trezor_sha512_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
			pctx->f[j] ^= pctx->g[j];
		}
	}
	pctx->first = 0;
    227c:	e0bffc17 	ldw	r2,-16(fp)
    2280:	10005005 	stb	zero,320(r2)
}
    2284:	0001883a 	nop
    2288:	e6fffe04 	addi	sp,fp,-8
    228c:	dfc00317 	ldw	ra,12(sp)
    2290:	df000217 	ldw	fp,8(sp)
    2294:	dc400117 	ldw	r17,4(sp)
    2298:	dc000017 	ldw	r16,0(sp)
    229c:	dec00404 	addi	sp,sp,16
    22a0:	f800283a 	ret

000022a4 <pbkdf2_hmac_sha512_Final>:

void pbkdf2_hmac_sha512_Final(PBKDF2_HMAC_SHA512_CTX *pctx, uint8_t *key)
{
    22a4:	defff104 	addi	sp,sp,-60
    22a8:	dfc00e15 	stw	ra,56(sp)
    22ac:	df000d15 	stw	fp,52(sp)
    22b0:	ddc00c15 	stw	r23,48(sp)
    22b4:	dd800b15 	stw	r22,44(sp)
    22b8:	dd400a15 	stw	r21,40(sp)
    22bc:	dd000915 	stw	r20,36(sp)
    22c0:	dcc00815 	stw	r19,32(sp)
    22c4:	dc800715 	stw	r18,28(sp)
    22c8:	dc400615 	stw	r17,24(sp)
    22cc:	dc000515 	stw	r16,20(sp)
    22d0:	df000d04 	addi	fp,sp,52
    22d4:	e13ff615 	stw	r4,-40(fp)
    22d8:	e17ff715 	stw	r5,-36(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH/sizeof(uint64_t); k++) {
    22dc:	e03ff315 	stw	zero,-52(fp)
    22e0:	00004506 	br	23f8 <pbkdf2_hmac_sha512_Final+0x154>
		REVERSE64(pctx->f[k], pctx->f[k]);
    22e4:	e17ff617 	ldw	r5,-40(fp)
    22e8:	e13ff317 	ldw	r4,-52(fp)
    22ec:	21000404 	addi	r4,r4,16
    22f0:	200890fa 	slli	r4,r4,3
    22f4:	2909883a 	add	r4,r5,r4
    22f8:	21400017 	ldw	r5,0(r4)
    22fc:	e17ff415 	stw	r5,-48(fp)
    2300:	21000117 	ldw	r4,4(r4)
    2304:	e13ff515 	stw	r4,-44(fp)
    2308:	e5bff517 	ldw	r22,-44(fp)
    230c:	e5fff417 	ldw	r23,-48(fp)
    2310:	e5bff415 	stw	r22,-48(fp)
    2314:	e5fff515 	stw	r23,-44(fp)
    2318:	e17ff417 	ldw	r5,-48(fp)
    231c:	013fc074 	movhi	r4,65281
    2320:	213fc004 	addi	r4,r4,-256
    2324:	2918703a 	and	r12,r5,r4
    2328:	e17ff517 	ldw	r5,-44(fp)
    232c:	013fc074 	movhi	r4,65281
    2330:	213fc004 	addi	r4,r4,-256
    2334:	291a703a 	and	r13,r5,r4
    2338:	6808963a 	slli	r4,r13,24
    233c:	6004d23a 	srli	r2,r12,8
    2340:	2084b03a 	or	r2,r4,r2
    2344:	6806d23a 	srli	r3,r13,8
    2348:	e17ff417 	ldw	r5,-48(fp)
    234c:	01003ff4 	movhi	r4,255
    2350:	21003fc4 	addi	r4,r4,255
    2354:	291c703a 	and	r14,r5,r4
    2358:	e17ff517 	ldw	r5,-44(fp)
    235c:	01003ff4 	movhi	r4,255
    2360:	21003fc4 	addi	r4,r4,255
    2364:	291e703a 	and	r15,r5,r4
    2368:	7008d63a 	srli	r4,r14,24
    236c:	780e923a 	slli	r7,r15,8
    2370:	21ceb03a 	or	r7,r4,r7
    2374:	700c923a 	slli	r6,r14,8
    2378:	1188b03a 	or	r4,r2,r6
    237c:	e13ff415 	stw	r4,-48(fp)
    2380:	19c8b03a 	or	r4,r3,r7
    2384:	e13ff515 	stw	r4,-44(fp)
    2388:	e13ff417 	ldw	r4,-48(fp)
    238c:	243fffec 	andhi	r16,r4,65535
    2390:	e13ff517 	ldw	r4,-44(fp)
    2394:	247fffec 	andhi	r17,r4,65535
    2398:	8808943a 	slli	r4,r17,16
    239c:	8010d43a 	srli	r8,r16,16
    23a0:	2210b03a 	or	r8,r4,r8
    23a4:	8812d43a 	srli	r9,r17,16
    23a8:	e13ff417 	ldw	r4,-48(fp)
    23ac:	24bfffcc 	andi	r18,r4,65535
    23b0:	e13ff517 	ldw	r4,-44(fp)
    23b4:	24ffffcc 	andi	r19,r4,65535
    23b8:	9008d43a 	srli	r4,r18,16
    23bc:	9816943a 	slli	r11,r19,16
    23c0:	22d6b03a 	or	r11,r4,r11
    23c4:	9014943a 	slli	r10,r18,16
    23c8:	42a8b03a 	or	r20,r8,r10
    23cc:	4aeab03a 	or	r21,r9,r11
    23d0:	e17ff617 	ldw	r5,-40(fp)
    23d4:	e13ff317 	ldw	r4,-52(fp)
    23d8:	21000404 	addi	r4,r4,16
    23dc:	200890fa 	slli	r4,r4,3
    23e0:	2909883a 	add	r4,r5,r4
    23e4:	25000015 	stw	r20,0(r4)
    23e8:	25400115 	stw	r21,4(r4)
}

void pbkdf2_hmac_sha512_Final(PBKDF2_HMAC_SHA512_CTX *pctx, uint8_t *key)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH/sizeof(uint64_t); k++) {
    23ec:	e13ff317 	ldw	r4,-52(fp)
    23f0:	21000044 	addi	r4,r4,1
    23f4:	e13ff315 	stw	r4,-52(fp)
    23f8:	e13ff317 	ldw	r4,-52(fp)
    23fc:	21000230 	cmpltui	r4,r4,8
    2400:	203fb81e 	bne	r4,zero,22e4 <__alt_mem_epcs_flash_controller+0xfdff92e4>
		REVERSE64(pctx->f[k], pctx->f[k]);
	}
#endif
	memcpy(key, pctx->f, SHA512_DIGEST_LENGTH);
    2404:	e0bff617 	ldw	r2,-40(fp)
    2408:	10802004 	addi	r2,r2,128
    240c:	01801004 	movi	r6,64
    2410:	100b883a 	mov	r5,r2
    2414:	e13ff717 	ldw	r4,-36(fp)
    2418:	000a0f40 	call	a0f4 <memcpy>
	memzero(pctx, sizeof(PBKDF2_HMAC_SHA512_CTX));
    241c:	01405104 	movi	r5,324
    2420:	e13ff617 	ldw	r4,-40(fp)
    2424:	00018040 	call	1804 <memzero>
}
    2428:	0001883a 	nop
    242c:	e6fff804 	addi	sp,fp,-32
    2430:	dfc00917 	ldw	ra,36(sp)
    2434:	df000817 	ldw	fp,32(sp)
    2438:	ddc00717 	ldw	r23,28(sp)
    243c:	dd800617 	ldw	r22,24(sp)
    2440:	dd400517 	ldw	r21,20(sp)
    2444:	dd000417 	ldw	r20,16(sp)
    2448:	dcc00317 	ldw	r19,12(sp)
    244c:	dc800217 	ldw	r18,8(sp)
    2450:	dc400117 	ldw	r17,4(sp)
    2454:	dc000017 	ldw	r16,0(sp)
    2458:	dec00a04 	addi	sp,sp,40
    245c:	f800283a 	ret

00002460 <pbkdf2_hmac_sha512>:

void pbkdf2_hmac_sha512(const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t iterations, uint8_t *key, int keylen)
{
    2460:	deff9304 	addi	sp,sp,-436
    2464:	dfc06c15 	stw	ra,432(sp)
    2468:	df006b15 	stw	fp,428(sp)
    246c:	df006b04 	addi	fp,sp,428
    2470:	e13ffc15 	stw	r4,-16(fp)
    2474:	e17ffd15 	stw	r5,-12(fp)
    2478:	e1bffe15 	stw	r6,-8(fp)
    247c:	e1ffff15 	stw	r7,-4(fp)
	uint32_t last_block_size = keylen % SHA512_DIGEST_LENGTH;
    2480:	e0c00417 	ldw	r3,16(fp)
    2484:	00a00034 	movhi	r2,32768
    2488:	10800fc4 	addi	r2,r2,63
    248c:	1884703a 	and	r2,r3,r2
    2490:	1000040e 	bge	r2,zero,24a4 <pbkdf2_hmac_sha512+0x44>
    2494:	10bfffc4 	addi	r2,r2,-1
    2498:	00fff004 	movi	r3,-64
    249c:	10c4b03a 	or	r2,r2,r3
    24a0:	10800044 	addi	r2,r2,1
    24a4:	e0bf9715 	stw	r2,-420(fp)
	uint32_t blocks_count = keylen / SHA512_DIGEST_LENGTH;
    24a8:	e0800417 	ldw	r2,16(fp)
    24ac:	1000010e 	bge	r2,zero,24b4 <pbkdf2_hmac_sha512+0x54>
    24b0:	10800fc4 	addi	r2,r2,63
    24b4:	1005d1ba 	srai	r2,r2,6
    24b8:	e0bf9815 	stw	r2,-416(fp)
	if (last_block_size) {
    24bc:	e0bf9717 	ldw	r2,-420(fp)
    24c0:	10000426 	beq	r2,zero,24d4 <pbkdf2_hmac_sha512+0x74>
		blocks_count++;
    24c4:	e0bf9817 	ldw	r2,-416(fp)
    24c8:	10800044 	addi	r2,r2,1
    24cc:	e0bf9815 	stw	r2,-416(fp)
    24d0:	00000206 	br	24dc <pbkdf2_hmac_sha512+0x7c>
	} else {
		last_block_size = SHA512_DIGEST_LENGTH;
    24d4:	00801004 	movi	r2,64
    24d8:	e0bf9715 	stw	r2,-420(fp)
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    24dc:	00800044 	movi	r2,1
    24e0:	e0bf9915 	stw	r2,-412(fp)
    24e4:	00003106 	br	25ac <pbkdf2_hmac_sha512+0x14c>
		PBKDF2_HMAC_SHA512_CTX pctx;
		pbkdf2_hmac_sha512_Init(&pctx, pass, passlen, salt, saltlen, blocknr);
    24e8:	e0ff9b04 	addi	r3,fp,-404
    24ec:	e0bf9917 	ldw	r2,-412(fp)
    24f0:	d8800115 	stw	r2,4(sp)
    24f4:	e0bfff17 	ldw	r2,-4(fp)
    24f8:	d8800015 	stw	r2,0(sp)
    24fc:	e1fffe17 	ldw	r7,-8(fp)
    2500:	e1bffd17 	ldw	r6,-12(fp)
    2504:	e17ffc17 	ldw	r5,-16(fp)
    2508:	1809883a 	mov	r4,r3
    250c:	0001dec0 	call	1dec <pbkdf2_hmac_sha512_Init>
		pbkdf2_hmac_sha512_Update(&pctx, iterations);
    2510:	e0bf9b04 	addi	r2,fp,-404
    2514:	e1400217 	ldw	r5,8(fp)
    2518:	1009883a 	mov	r4,r2
    251c:	00021600 	call	2160 <pbkdf2_hmac_sha512_Update>
		uint8_t digest[SHA512_DIGEST_LENGTH];
		pbkdf2_hmac_sha512_Final(&pctx, digest);
    2520:	e0ffec04 	addi	r3,fp,-80
    2524:	e0bf9b04 	addi	r2,fp,-404
    2528:	180b883a 	mov	r5,r3
    252c:	1009883a 	mov	r4,r2
    2530:	00022a40 	call	22a4 <pbkdf2_hmac_sha512_Final>
		uint32_t key_offset = (blocknr - 1) * SHA512_DIGEST_LENGTH;
    2534:	e0ff9917 	ldw	r3,-412(fp)
    2538:	00810034 	movhi	r2,1024
    253c:	10bfffc4 	addi	r2,r2,-1
    2540:	1885883a 	add	r2,r3,r2
    2544:	100491ba 	slli	r2,r2,6
    2548:	e0bf9a15 	stw	r2,-408(fp)
		if (blocknr < blocks_count) {
    254c:	e0ff9917 	ldw	r3,-412(fp)
    2550:	e0bf9817 	ldw	r2,-416(fp)
    2554:	18800a2e 	bgeu	r3,r2,2580 <pbkdf2_hmac_sha512+0x120>
			memcpy(key + key_offset, digest, SHA512_DIGEST_LENGTH);
    2558:	e0c00317 	ldw	r3,12(fp)
    255c:	e0bf9a17 	ldw	r2,-408(fp)
    2560:	1885883a 	add	r2,r3,r2
    2564:	1009883a 	mov	r4,r2
    2568:	e0bfec04 	addi	r2,fp,-80
    256c:	00c01004 	movi	r3,64
    2570:	180d883a 	mov	r6,r3
    2574:	100b883a 	mov	r5,r2
    2578:	000a0f40 	call	a0f4 <memcpy>
    257c:	00000806 	br	25a0 <pbkdf2_hmac_sha512+0x140>
		} else {
			memcpy(key + key_offset, digest, last_block_size);
    2580:	e0c00317 	ldw	r3,12(fp)
    2584:	e0bf9a17 	ldw	r2,-408(fp)
    2588:	1885883a 	add	r2,r3,r2
    258c:	e0ffec04 	addi	r3,fp,-80
    2590:	e1bf9717 	ldw	r6,-420(fp)
    2594:	180b883a 	mov	r5,r3
    2598:	1009883a 	mov	r4,r2
    259c:	000a0f40 	call	a0f4 <memcpy>
	if (last_block_size) {
		blocks_count++;
	} else {
		last_block_size = SHA512_DIGEST_LENGTH;
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    25a0:	e0bf9917 	ldw	r2,-412(fp)
    25a4:	10800044 	addi	r2,r2,1
    25a8:	e0bf9915 	stw	r2,-412(fp)
    25ac:	e0bf9917 	ldw	r2,-412(fp)
    25b0:	e0ff9817 	ldw	r3,-416(fp)
    25b4:	18bfcc2e 	bgeu	r3,r2,24e8 <__alt_mem_epcs_flash_controller+0xfdff94e8>
			memcpy(key + key_offset, digest, SHA512_DIGEST_LENGTH);
		} else {
			memcpy(key + key_offset, digest, last_block_size);
		}
	}
}
    25b8:	0001883a 	nop
    25bc:	e037883a 	mov	sp,fp
    25c0:	dfc00117 	ldw	ra,4(sp)
    25c4:	df000017 	ldw	fp,0(sp)
    25c8:	dec00204 	addi	sp,sp,8
    25cc:	f800283a 	ret

000025d0 <random32>:

#include <stdio.h>
#include <time.h>

uint32_t random32(void)
{
    25d0:	defffd04 	addi	sp,sp,-12
    25d4:	dfc00215 	stw	ra,8(sp)
    25d8:	df000115 	stw	fp,4(sp)
    25dc:	dc000015 	stw	r16,0(sp)
    25e0:	df000104 	addi	fp,sp,4
	static int initialized = 0;
	if (!initialized) {
    25e4:	d0a50d17 	ldw	r2,-27596(gp)
    25e8:	1000061e 	bne	r2,zero,2604 <random32+0x34>
		srand((unsigned)time(NULL));
    25ec:	0009883a 	mov	r4,zero
    25f0:	000a5d80 	call	a5d8 <time>
    25f4:	1009883a 	mov	r4,r2
    25f8:	000a4940 	call	a494 <srand>
		initialized = 1;
    25fc:	00800044 	movi	r2,1
    2600:	d0a50d15 	stw	r2,-27596(gp)
	}
	return ((rand() & 0xFF) | ((rand() & 0xFF) << 8) | ((rand() & 0xFF) << 16) | ((uint32_t) (rand() & 0xFF) << 24));
    2604:	000a4a80 	call	a4a8 <rand>
    2608:	14003fcc 	andi	r16,r2,255
    260c:	000a4a80 	call	a4a8 <rand>
    2610:	1004923a 	slli	r2,r2,8
    2614:	10bfffcc 	andi	r2,r2,65535
    2618:	80a0b03a 	or	r16,r16,r2
    261c:	000a4a80 	call	a4a8 <rand>
    2620:	10803fcc 	andi	r2,r2,255
    2624:	1004943a 	slli	r2,r2,16
    2628:	8084b03a 	or	r2,r16,r2
    262c:	1021883a 	mov	r16,r2
    2630:	000a4a80 	call	a4a8 <rand>
    2634:	1004963a 	slli	r2,r2,24
    2638:	8084b03a 	or	r2,r16,r2
}
    263c:	e6ffff04 	addi	sp,fp,-4
    2640:	dfc00217 	ldw	ra,8(sp)
    2644:	df000117 	ldw	fp,4(sp)
    2648:	dc000017 	ldw	r16,0(sp)
    264c:	dec00304 	addi	sp,sp,12
    2650:	f800283a 	ret

00002654 <random_buffer>:
//

//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(uint8_t *buf, size_t len)
{
    2654:	defffa04 	addi	sp,sp,-24
    2658:	dfc00515 	stw	ra,20(sp)
    265c:	df000415 	stw	fp,16(sp)
    2660:	df000404 	addi	fp,sp,16
    2664:	e13ffe15 	stw	r4,-8(fp)
    2668:	e17fff15 	stw	r5,-4(fp)
	uint32_t r = 0;
    266c:	e03ffc15 	stw	zero,-16(fp)
	for (size_t i = 0; i < len; i++) {
    2670:	e03ffd15 	stw	zero,-12(fp)
    2674:	00001106 	br	26bc <random_buffer+0x68>
		if (i % 4 == 0) {
    2678:	e0bffd17 	ldw	r2,-12(fp)
    267c:	108000cc 	andi	r2,r2,3
    2680:	1000021e 	bne	r2,zero,268c <random_buffer+0x38>
			r = random32();
    2684:	00025d00 	call	25d0 <random32>
    2688:	e0bffc15 	stw	r2,-16(fp)
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
    268c:	e0fffe17 	ldw	r3,-8(fp)
    2690:	e0bffd17 	ldw	r2,-12(fp)
    2694:	1885883a 	add	r2,r3,r2
    2698:	e0fffd17 	ldw	r3,-12(fp)
    269c:	18c000cc 	andi	r3,r3,3
    26a0:	180690fa 	slli	r3,r3,3
    26a4:	e13ffc17 	ldw	r4,-16(fp)
    26a8:	20c6d83a 	srl	r3,r4,r3
    26ac:	10c00005 	stb	r3,0(r2)
//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(uint8_t *buf, size_t len)
{
	uint32_t r = 0;
	for (size_t i = 0; i < len; i++) {
    26b0:	e0bffd17 	ldw	r2,-12(fp)
    26b4:	10800044 	addi	r2,r2,1
    26b8:	e0bffd15 	stw	r2,-12(fp)
    26bc:	e0fffd17 	ldw	r3,-12(fp)
    26c0:	e0bfff17 	ldw	r2,-4(fp)
    26c4:	18bfec36 	bltu	r3,r2,2678 <__alt_mem_epcs_flash_controller+0xfdff9678>
		if (i % 4 == 0) {
			r = random32();
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
	}
}
    26c8:	0001883a 	nop
    26cc:	e037883a 	mov	sp,fp
    26d0:	dfc00117 	ldw	ra,4(sp)
    26d4:	df000017 	ldw	fp,0(sp)
    26d8:	dec00204 	addi	sp,sp,8
    26dc:	f800283a 	ret

000026e0 <secp256k1_scalar_clear>:
#define SECP256K1_N_H_4 ((uint32_t)0xFFFFFFFFUL)
#define SECP256K1_N_H_5 ((uint32_t)0xFFFFFFFFUL)
#define SECP256K1_N_H_6 ((uint32_t)0xFFFFFFFFUL)
#define SECP256K1_N_H_7 ((uint32_t)0x7FFFFFFFUL)

SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {
    26e0:	defffe04 	addi	sp,sp,-8
    26e4:	df000115 	stw	fp,4(sp)
    26e8:	df000104 	addi	fp,sp,4
    26ec:	e13fff15 	stw	r4,-4(fp)
    r->d[0] = 0;
    26f0:	e0bfff17 	ldw	r2,-4(fp)
    26f4:	10000015 	stw	zero,0(r2)
    r->d[1] = 0;
    26f8:	e0bfff17 	ldw	r2,-4(fp)
    26fc:	10000115 	stw	zero,4(r2)
    r->d[2] = 0;
    2700:	e0bfff17 	ldw	r2,-4(fp)
    2704:	10000215 	stw	zero,8(r2)
    r->d[3] = 0;
    2708:	e0bfff17 	ldw	r2,-4(fp)
    270c:	10000315 	stw	zero,12(r2)
    r->d[4] = 0;
    2710:	e0bfff17 	ldw	r2,-4(fp)
    2714:	10000415 	stw	zero,16(r2)
    r->d[5] = 0;
    2718:	e0bfff17 	ldw	r2,-4(fp)
    271c:	10000515 	stw	zero,20(r2)
    r->d[6] = 0;
    2720:	e0bfff17 	ldw	r2,-4(fp)
    2724:	10000615 	stw	zero,24(r2)
    r->d[7] = 0;
    2728:	e0bfff17 	ldw	r2,-4(fp)
    272c:	10000715 	stw	zero,28(r2)
}
    2730:	0001883a 	nop
    2734:	e037883a 	mov	sp,fp
    2738:	df000017 	ldw	fp,0(sp)
    273c:	dec00104 	addi	sp,sp,4
    2740:	f800283a 	ret

00002744 <secp256k1_scalar_check_overflow>:
//        VERIFY_CHECK((offset >> 5) + 1 < 8);
//        return ((a->d[offset >> 5] >> (offset & 0x1F)) | (a->d[(offset >> 5) + 1] << (32 - (offset & 0x1F)))) & ((((uint32_t)1) << count) - 1);
//    }
//}

SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {
    2744:	defffc04 	addi	sp,sp,-16
    2748:	df000315 	stw	fp,12(sp)
    274c:	df000304 	addi	fp,sp,12
    2750:	e13fff15 	stw	r4,-4(fp)
    int yes = 0;
    2754:	e03ffd15 	stw	zero,-12(fp)
    int no = 0;
    2758:	e03ffe15 	stw	zero,-8(fp)
    no |= (a->d[7] < SECP256K1_N_7); /* No need for a > check. */
    275c:	e0bfff17 	ldw	r2,-4(fp)
    2760:	10800717 	ldw	r2,28(r2)
    2764:	10bfffd8 	cmpnei	r2,r2,-1
    2768:	10803fcc 	andi	r2,r2,255
    276c:	e0fffe17 	ldw	r3,-8(fp)
    2770:	1884b03a 	or	r2,r3,r2
    2774:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[6] < SECP256K1_N_6); /* No need for a > check. */
    2778:	e0bfff17 	ldw	r2,-4(fp)
    277c:	10800617 	ldw	r2,24(r2)
    2780:	10bfffd8 	cmpnei	r2,r2,-1
    2784:	10803fcc 	andi	r2,r2,255
    2788:	e0fffe17 	ldw	r3,-8(fp)
    278c:	1884b03a 	or	r2,r3,r2
    2790:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[5] < SECP256K1_N_5); /* No need for a > check. */
    2794:	e0bfff17 	ldw	r2,-4(fp)
    2798:	10800517 	ldw	r2,20(r2)
    279c:	10bfffd8 	cmpnei	r2,r2,-1
    27a0:	10803fcc 	andi	r2,r2,255
    27a4:	e0fffe17 	ldw	r3,-8(fp)
    27a8:	1884b03a 	or	r2,r3,r2
    27ac:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[4] < SECP256K1_N_4);
    27b0:	e0bfff17 	ldw	r2,-4(fp)
    27b4:	10800417 	ldw	r2,16(r2)
    27b8:	00ffff44 	movi	r3,-3
    27bc:	1885403a 	cmpgeu	r2,r3,r2
    27c0:	10803fcc 	andi	r2,r2,255
    27c4:	e0fffe17 	ldw	r3,-8(fp)
    27c8:	1884b03a 	or	r2,r3,r2
    27cc:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[4] > SECP256K1_N_4) & ~no;
    27d0:	e0bfff17 	ldw	r2,-4(fp)
    27d4:	10800417 	ldw	r2,16(r2)
    27d8:	10bfffe0 	cmpeqi	r2,r2,-1
    27dc:	10c03fcc 	andi	r3,r2,255
    27e0:	e0bffe17 	ldw	r2,-8(fp)
    27e4:	0084303a 	nor	r2,zero,r2
    27e8:	1884703a 	and	r2,r3,r2
    27ec:	e0fffd17 	ldw	r3,-12(fp)
    27f0:	1884b03a 	or	r2,r3,r2
    27f4:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[3] < SECP256K1_N_3) & ~yes;
    27f8:	e0bfff17 	ldw	r2,-4(fp)
    27fc:	10c00317 	ldw	r3,12(r2)
    2800:	00aeabf4 	movhi	r2,47791
    2804:	10b73944 	addi	r2,r2,-8987
    2808:	10c5403a 	cmpgeu	r2,r2,r3
    280c:	10c03fcc 	andi	r3,r2,255
    2810:	e0bffd17 	ldw	r2,-12(fp)
    2814:	0084303a 	nor	r2,zero,r2
    2818:	1884703a 	and	r2,r3,r2
    281c:	e0fffe17 	ldw	r3,-8(fp)
    2820:	1884b03a 	or	r2,r3,r2
    2824:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[3] > SECP256K1_N_3) & ~no;
    2828:	e0bfff17 	ldw	r2,-4(fp)
    282c:	10c00317 	ldw	r3,12(r2)
    2830:	00aeabf4 	movhi	r2,47791
    2834:	10b73984 	addi	r2,r2,-8986
    2838:	10c5803a 	cmpltu	r2,r2,r3
    283c:	10c03fcc 	andi	r3,r2,255
    2840:	e0bffe17 	ldw	r2,-8(fp)
    2844:	0084303a 	nor	r2,zero,r2
    2848:	1884703a 	and	r2,r3,r2
    284c:	e0fffd17 	ldw	r3,-12(fp)
    2850:	1884b03a 	or	r2,r3,r2
    2854:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[2] < SECP256K1_N_2) & ~yes;
    2858:	e0bfff17 	ldw	r2,-4(fp)
    285c:	10c00217 	ldw	r3,8(r2)
    2860:	00abd274 	movhi	r2,44873
    2864:	10a80e84 	addi	r2,r2,-24518
    2868:	10c5403a 	cmpgeu	r2,r2,r3
    286c:	10c03fcc 	andi	r3,r2,255
    2870:	e0bffd17 	ldw	r2,-12(fp)
    2874:	0084303a 	nor	r2,zero,r2
    2878:	1884703a 	and	r2,r3,r2
    287c:	e0fffe17 	ldw	r3,-8(fp)
    2880:	1884b03a 	or	r2,r3,r2
    2884:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[2] > SECP256K1_N_2) & ~no;
    2888:	e0bfff17 	ldw	r2,-4(fp)
    288c:	10c00217 	ldw	r3,8(r2)
    2890:	00abd274 	movhi	r2,44873
    2894:	10a80ec4 	addi	r2,r2,-24517
    2898:	10c5803a 	cmpltu	r2,r2,r3
    289c:	10c03fcc 	andi	r3,r2,255
    28a0:	e0bffe17 	ldw	r2,-8(fp)
    28a4:	0084303a 	nor	r2,zero,r2
    28a8:	1884703a 	and	r2,r3,r2
    28ac:	e0fffd17 	ldw	r3,-12(fp)
    28b0:	1884b03a 	or	r2,r3,r2
    28b4:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[1] < SECP256K1_N_1) & ~yes;
    28b8:	e0bfff17 	ldw	r2,-4(fp)
    28bc:	10c00117 	ldw	r3,4(r2)
    28c0:	00aff4b4 	movhi	r2,49106
    28c4:	1097a2c4 	addi	r2,r2,24203
    28c8:	10c5403a 	cmpgeu	r2,r2,r3
    28cc:	10c03fcc 	andi	r3,r2,255
    28d0:	e0bffd17 	ldw	r2,-12(fp)
    28d4:	0084303a 	nor	r2,zero,r2
    28d8:	1884703a 	and	r2,r3,r2
    28dc:	e0fffe17 	ldw	r3,-8(fp)
    28e0:	1884b03a 	or	r2,r3,r2
    28e4:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[1] > SECP256K1_N_1) & ~no;
    28e8:	e0bfff17 	ldw	r2,-4(fp)
    28ec:	10c00117 	ldw	r3,4(r2)
    28f0:	00aff4b4 	movhi	r2,49106
    28f4:	1097a304 	addi	r2,r2,24204
    28f8:	10c5803a 	cmpltu	r2,r2,r3
    28fc:	10c03fcc 	andi	r3,r2,255
    2900:	e0bffe17 	ldw	r2,-8(fp)
    2904:	0084303a 	nor	r2,zero,r2
    2908:	1884703a 	and	r2,r3,r2
    290c:	e0fffd17 	ldw	r3,-12(fp)
    2910:	1884b03a 	or	r2,r3,r2
    2914:	e0bffd15 	stw	r2,-12(fp)
    yes |= (a->d[0] >= SECP256K1_N_0) & ~no;
    2918:	e0bfff17 	ldw	r2,-4(fp)
    291c:	10c00017 	ldw	r3,0(r2)
    2920:	00b40db4 	movhi	r2,53302
    2924:	10905004 	addi	r2,r2,16704
    2928:	10c5803a 	cmpltu	r2,r2,r3
    292c:	10c03fcc 	andi	r3,r2,255
    2930:	e0bffe17 	ldw	r2,-8(fp)
    2934:	0084303a 	nor	r2,zero,r2
    2938:	1884703a 	and	r2,r3,r2
    293c:	e0fffd17 	ldw	r3,-12(fp)
    2940:	1884b03a 	or	r2,r3,r2
    2944:	e0bffd15 	stw	r2,-12(fp)
    return yes;
    2948:	e0bffd17 	ldw	r2,-12(fp)
}
    294c:	e037883a 	mov	sp,fp
    2950:	df000017 	ldw	fp,0(sp)
    2954:	dec00104 	addi	sp,sp,4
    2958:	f800283a 	ret

0000295c <secp256k1_scalar_reduce>:

SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, uint32_t overflow) {
    295c:	deffe004 	addi	sp,sp,-128
    2960:	dfc01f15 	stw	ra,124(sp)
    2964:	df001e15 	stw	fp,120(sp)
    2968:	ddc01d15 	stw	r23,116(sp)
    296c:	dd801c15 	stw	r22,112(sp)
    2970:	dd401b15 	stw	r21,108(sp)
    2974:	dd001a15 	stw	r20,104(sp)
    2978:	dcc01915 	stw	r19,100(sp)
    297c:	dc801815 	stw	r18,96(sp)
    2980:	dc401715 	stw	r17,92(sp)
    2984:	dc001615 	stw	r16,88(sp)
    2988:	df001e04 	addi	fp,sp,120
    298c:	e13fe415 	stw	r4,-112(fp)
    2990:	e17fe515 	stw	r5,-108(fp)
    uint64_t t;
    VERIFY_CHECK(overflow <= 1);
    t = (uint64_t)r->d[0] + overflow * SECP256K1_N_C_0;
    2994:	e0bfe417 	ldw	r2,-112(fp)
    2998:	10800017 	ldw	r2,0(r2)
    299c:	e0bfe615 	stw	r2,-104(fp)
    29a0:	e03fe715 	stw	zero,-100(fp)
    29a4:	014bf2b4 	movhi	r5,12234
    29a8:	296fafc4 	addi	r5,r5,-16705
    29ac:	e13fe517 	ldw	r4,-108(fp)
    29b0:	000a0a40 	call	a0a4 <__mulsi3>
    29b4:	e0bfe815 	stw	r2,-96(fp)
    29b8:	e03fe915 	stw	zero,-92(fp)
    29bc:	e13fe617 	ldw	r4,-104(fp)
    29c0:	e17fe817 	ldw	r5,-96(fp)
    29c4:	2145883a 	add	r2,r4,r5
    29c8:	e1bfe617 	ldw	r6,-104(fp)
    29cc:	1189803a 	cmpltu	r4,r2,r6
    29d0:	e1ffe717 	ldw	r7,-100(fp)
    29d4:	e17fe917 	ldw	r5,-92(fp)
    29d8:	3947883a 	add	r3,r7,r5
    29dc:	20c9883a 	add	r4,r4,r3
    29e0:	2007883a 	mov	r3,r4
    29e4:	e0bfe215 	stw	r2,-120(fp)
    29e8:	e0ffe315 	stw	r3,-116(fp)
    r->d[0] = t & 0xFFFFFFFFUL; t >>= 32;
    29ec:	e0ffe217 	ldw	r3,-120(fp)
    29f0:	e0bfe417 	ldw	r2,-112(fp)
    29f4:	10c00015 	stw	r3,0(r2)
    29f8:	e0bfe317 	ldw	r2,-116(fp)
    29fc:	1004d83a 	srl	r2,r2,zero
    2a00:	e0bfe215 	stw	r2,-120(fp)
    2a04:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[1] + overflow * SECP256K1_N_C_1;
    2a08:	e0bfe417 	ldw	r2,-112(fp)
    2a0c:	10800117 	ldw	r2,4(r2)
    2a10:	1021883a 	mov	r16,r2
    2a14:	0023883a 	mov	r17,zero
    2a18:	01500bb4 	movhi	r5,16430
    2a1c:	29685cc4 	addi	r5,r5,-24205
    2a20:	e13fe517 	ldw	r4,-108(fp)
    2a24:	000a0a40 	call	a0a4 <__mulsi3>
    2a28:	e0bfea15 	stw	r2,-88(fp)
    2a2c:	e03feb15 	stw	zero,-84(fp)
    2a30:	e1bfea17 	ldw	r6,-88(fp)
    2a34:	8185883a 	add	r2,r16,r6
    2a38:	1409803a 	cmpltu	r4,r2,r16
    2a3c:	e1ffeb17 	ldw	r7,-84(fp)
    2a40:	89c7883a 	add	r3,r17,r7
    2a44:	20c9883a 	add	r4,r4,r3
    2a48:	2007883a 	mov	r3,r4
    2a4c:	100d883a 	mov	r6,r2
    2a50:	180f883a 	mov	r7,r3
    2a54:	e13fe217 	ldw	r4,-120(fp)
    2a58:	e17fe317 	ldw	r5,-116(fp)
    2a5c:	2185883a 	add	r2,r4,r6
    2a60:	1111803a 	cmpltu	r8,r2,r4
    2a64:	29c7883a 	add	r3,r5,r7
    2a68:	40c9883a 	add	r4,r8,r3
    2a6c:	2007883a 	mov	r3,r4
    2a70:	e0bfe215 	stw	r2,-120(fp)
    2a74:	e0ffe315 	stw	r3,-116(fp)
    r->d[1] = t & 0xFFFFFFFFUL; t >>= 32;
    2a78:	e0ffe217 	ldw	r3,-120(fp)
    2a7c:	e0bfe417 	ldw	r2,-112(fp)
    2a80:	10c00115 	stw	r3,4(r2)
    2a84:	e0bfe317 	ldw	r2,-116(fp)
    2a88:	1004d83a 	srl	r2,r2,zero
    2a8c:	e0bfe215 	stw	r2,-120(fp)
    2a90:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[2] + overflow * SECP256K1_N_C_2;
    2a94:	e0bfe417 	ldw	r2,-112(fp)
    2a98:	10800217 	ldw	r2,8(r2)
    2a9c:	102d883a 	mov	r22,r2
    2aa0:	002f883a 	mov	r23,zero
    2aa4:	01542df4 	movhi	r5,20663
    2aa8:	2957f104 	addi	r5,r5,24516
    2aac:	e13fe517 	ldw	r4,-108(fp)
    2ab0:	000a0a40 	call	a0a4 <__mulsi3>
    2ab4:	e0bfec15 	stw	r2,-80(fp)
    2ab8:	e03fed15 	stw	zero,-76(fp)
    2abc:	e13fec17 	ldw	r4,-80(fp)
    2ac0:	b105883a 	add	r2,r22,r4
    2ac4:	1589803a 	cmpltu	r4,r2,r22
    2ac8:	e17fed17 	ldw	r5,-76(fp)
    2acc:	b947883a 	add	r3,r23,r5
    2ad0:	20c9883a 	add	r4,r4,r3
    2ad4:	2007883a 	mov	r3,r4
    2ad8:	100d883a 	mov	r6,r2
    2adc:	180f883a 	mov	r7,r3
    2ae0:	e13fe217 	ldw	r4,-120(fp)
    2ae4:	e17fe317 	ldw	r5,-116(fp)
    2ae8:	2185883a 	add	r2,r4,r6
    2aec:	1111803a 	cmpltu	r8,r2,r4
    2af0:	29c7883a 	add	r3,r5,r7
    2af4:	40c9883a 	add	r4,r8,r3
    2af8:	2007883a 	mov	r3,r4
    2afc:	e0bfe215 	stw	r2,-120(fp)
    2b00:	e0ffe315 	stw	r3,-116(fp)
    r->d[2] = t & 0xFFFFFFFFUL; t >>= 32;
    2b04:	e0ffe217 	ldw	r3,-120(fp)
    2b08:	e0bfe417 	ldw	r2,-112(fp)
    2b0c:	10c00215 	stw	r3,8(r2)
    2b10:	e0bfe317 	ldw	r2,-116(fp)
    2b14:	1004d83a 	srl	r2,r2,zero
    2b18:	e0bfe215 	stw	r2,-120(fp)
    2b1c:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[3] + overflow * SECP256K1_N_C_3;
    2b20:	e0bfe417 	ldw	r2,-112(fp)
    2b24:	10800317 	ldw	r2,12(r2)
    2b28:	1029883a 	mov	r20,r2
    2b2c:	002b883a 	mov	r21,zero
    2b30:	01515474 	movhi	r5,17745
    2b34:	2948c644 	addi	r5,r5,8985
    2b38:	e13fe517 	ldw	r4,-108(fp)
    2b3c:	000a0a40 	call	a0a4 <__mulsi3>
    2b40:	e0bfee15 	stw	r2,-72(fp)
    2b44:	e03fef15 	stw	zero,-68(fp)
    2b48:	e1bfee17 	ldw	r6,-72(fp)
    2b4c:	a185883a 	add	r2,r20,r6
    2b50:	1509803a 	cmpltu	r4,r2,r20
    2b54:	e1ffef17 	ldw	r7,-68(fp)
    2b58:	a9c7883a 	add	r3,r21,r7
    2b5c:	20c9883a 	add	r4,r4,r3
    2b60:	2007883a 	mov	r3,r4
    2b64:	100d883a 	mov	r6,r2
    2b68:	180f883a 	mov	r7,r3
    2b6c:	e13fe217 	ldw	r4,-120(fp)
    2b70:	e17fe317 	ldw	r5,-116(fp)
    2b74:	2185883a 	add	r2,r4,r6
    2b78:	1111803a 	cmpltu	r8,r2,r4
    2b7c:	29c7883a 	add	r3,r5,r7
    2b80:	40c9883a 	add	r4,r8,r3
    2b84:	2007883a 	mov	r3,r4
    2b88:	e0bfe215 	stw	r2,-120(fp)
    2b8c:	e0ffe315 	stw	r3,-116(fp)
    r->d[3] = t & 0xFFFFFFFFUL; t >>= 32;
    2b90:	e0ffe217 	ldw	r3,-120(fp)
    2b94:	e0bfe417 	ldw	r2,-112(fp)
    2b98:	10c00315 	stw	r3,12(r2)
    2b9c:	e0bfe317 	ldw	r2,-116(fp)
    2ba0:	1004d83a 	srl	r2,r2,zero
    2ba4:	e0bfe215 	stw	r2,-120(fp)
    2ba8:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[4] + overflow * SECP256K1_N_C_4;
    2bac:	e0bfe417 	ldw	r2,-112(fp)
    2bb0:	10800417 	ldw	r2,16(r2)
    2bb4:	1025883a 	mov	r18,r2
    2bb8:	0027883a 	mov	r19,zero
    2bbc:	e0bfe517 	ldw	r2,-108(fp)
    2bc0:	e0bff015 	stw	r2,-64(fp)
    2bc4:	e03ff115 	stw	zero,-60(fp)
    2bc8:	e13ff017 	ldw	r4,-64(fp)
    2bcc:	9105883a 	add	r2,r18,r4
    2bd0:	1489803a 	cmpltu	r4,r2,r18
    2bd4:	e17ff117 	ldw	r5,-60(fp)
    2bd8:	9947883a 	add	r3,r19,r5
    2bdc:	20c9883a 	add	r4,r4,r3
    2be0:	2007883a 	mov	r3,r4
    2be4:	100d883a 	mov	r6,r2
    2be8:	180f883a 	mov	r7,r3
    2bec:	e13fe217 	ldw	r4,-120(fp)
    2bf0:	e17fe317 	ldw	r5,-116(fp)
    2bf4:	2185883a 	add	r2,r4,r6
    2bf8:	1111803a 	cmpltu	r8,r2,r4
    2bfc:	29c7883a 	add	r3,r5,r7
    2c00:	40c9883a 	add	r4,r8,r3
    2c04:	2007883a 	mov	r3,r4
    2c08:	e0bfe215 	stw	r2,-120(fp)
    2c0c:	e0ffe315 	stw	r3,-116(fp)
    r->d[4] = t & 0xFFFFFFFFUL; t >>= 32;
    2c10:	e0ffe217 	ldw	r3,-120(fp)
    2c14:	e0bfe417 	ldw	r2,-112(fp)
    2c18:	10c00415 	stw	r3,16(r2)
    2c1c:	e0bfe317 	ldw	r2,-116(fp)
    2c20:	1004d83a 	srl	r2,r2,zero
    2c24:	e0bfe215 	stw	r2,-120(fp)
    2c28:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[5];
    2c2c:	e0bfe417 	ldw	r2,-112(fp)
    2c30:	10800517 	ldw	r2,20(r2)
    2c34:	e0bff215 	stw	r2,-56(fp)
    2c38:	e03ff315 	stw	zero,-52(fp)
    2c3c:	e13fe217 	ldw	r4,-120(fp)
    2c40:	e17fe317 	ldw	r5,-116(fp)
    2c44:	e1bff217 	ldw	r6,-56(fp)
    2c48:	2185883a 	add	r2,r4,r6
    2c4c:	110d803a 	cmpltu	r6,r2,r4
    2c50:	e1fff317 	ldw	r7,-52(fp)
    2c54:	29c7883a 	add	r3,r5,r7
    2c58:	30c9883a 	add	r4,r6,r3
    2c5c:	2007883a 	mov	r3,r4
    2c60:	e0bfe215 	stw	r2,-120(fp)
    2c64:	e0ffe315 	stw	r3,-116(fp)
    r->d[5] = t & 0xFFFFFFFFUL; t >>= 32;
    2c68:	e0ffe217 	ldw	r3,-120(fp)
    2c6c:	e0bfe417 	ldw	r2,-112(fp)
    2c70:	10c00515 	stw	r3,20(r2)
    2c74:	e0bfe317 	ldw	r2,-116(fp)
    2c78:	1004d83a 	srl	r2,r2,zero
    2c7c:	e0bfe215 	stw	r2,-120(fp)
    2c80:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[6];
    2c84:	e0bfe417 	ldw	r2,-112(fp)
    2c88:	10800617 	ldw	r2,24(r2)
    2c8c:	e0bff415 	stw	r2,-48(fp)
    2c90:	e03ff515 	stw	zero,-44(fp)
    2c94:	e13fe217 	ldw	r4,-120(fp)
    2c98:	e17fe317 	ldw	r5,-116(fp)
    2c9c:	e1bff417 	ldw	r6,-48(fp)
    2ca0:	2185883a 	add	r2,r4,r6
    2ca4:	110d803a 	cmpltu	r6,r2,r4
    2ca8:	e1fff517 	ldw	r7,-44(fp)
    2cac:	29c7883a 	add	r3,r5,r7
    2cb0:	30c9883a 	add	r4,r6,r3
    2cb4:	2007883a 	mov	r3,r4
    2cb8:	e0bfe215 	stw	r2,-120(fp)
    2cbc:	e0ffe315 	stw	r3,-116(fp)
    r->d[6] = t & 0xFFFFFFFFUL; t >>= 32;
    2cc0:	e0ffe217 	ldw	r3,-120(fp)
    2cc4:	e0bfe417 	ldw	r2,-112(fp)
    2cc8:	10c00615 	stw	r3,24(r2)
    2ccc:	e0bfe317 	ldw	r2,-116(fp)
    2cd0:	1004d83a 	srl	r2,r2,zero
    2cd4:	e0bfe215 	stw	r2,-120(fp)
    2cd8:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[7];
    2cdc:	e0bfe417 	ldw	r2,-112(fp)
    2ce0:	10800717 	ldw	r2,28(r2)
    2ce4:	e0bff615 	stw	r2,-40(fp)
    2ce8:	e03ff715 	stw	zero,-36(fp)
    2cec:	e13fe217 	ldw	r4,-120(fp)
    2cf0:	e17fe317 	ldw	r5,-116(fp)
    2cf4:	e1bff617 	ldw	r6,-40(fp)
    2cf8:	2185883a 	add	r2,r4,r6
    2cfc:	110d803a 	cmpltu	r6,r2,r4
    2d00:	e1fff717 	ldw	r7,-36(fp)
    2d04:	29c7883a 	add	r3,r5,r7
    2d08:	30c9883a 	add	r4,r6,r3
    2d0c:	2007883a 	mov	r3,r4
    2d10:	e0bfe215 	stw	r2,-120(fp)
    2d14:	e0ffe315 	stw	r3,-116(fp)
    r->d[7] = t & 0xFFFFFFFFUL;
    2d18:	e0ffe217 	ldw	r3,-120(fp)
    2d1c:	e0bfe417 	ldw	r2,-112(fp)
    2d20:	10c00715 	stw	r3,28(r2)
    return overflow;
    2d24:	e0bfe517 	ldw	r2,-108(fp)
}
    2d28:	e6fff804 	addi	sp,fp,-32
    2d2c:	dfc00917 	ldw	ra,36(sp)
    2d30:	df000817 	ldw	fp,32(sp)
    2d34:	ddc00717 	ldw	r23,28(sp)
    2d38:	dd800617 	ldw	r22,24(sp)
    2d3c:	dd400517 	ldw	r21,20(sp)
    2d40:	dd000417 	ldw	r20,16(sp)
    2d44:	dcc00317 	ldw	r19,12(sp)
    2d48:	dc800217 	ldw	r18,8(sp)
    2d4c:	dc400117 	ldw	r17,4(sp)
    2d50:	dc000017 	ldw	r16,0(sp)
    2d54:	dec00a04 	addi	sp,sp,40
    2d58:	f800283a 	ret

00002d5c <secp256k1_scalar_set_b32>:
//    VERIFY_CHECK((t >> 32) == 0);
//    VERIFY_CHECK(secp256k1_scalar_check_overflow(r) == 0);
//#endif
//}

static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {
    2d5c:	defffa04 	addi	sp,sp,-24
    2d60:	dfc00515 	stw	ra,20(sp)
    2d64:	df000415 	stw	fp,16(sp)
    2d68:	df000404 	addi	fp,sp,16
    2d6c:	e13ffd15 	stw	r4,-12(fp)
    2d70:	e17ffe15 	stw	r5,-8(fp)
    2d74:	e1bfff15 	stw	r6,-4(fp)
    int over;
    r->d[0] = (uint32_t)b32[31] | (uint32_t)b32[30] << 8 | (uint32_t)b32[29] << 16 | (uint32_t)b32[28] << 24;
    2d78:	e0bffe17 	ldw	r2,-8(fp)
    2d7c:	108007c4 	addi	r2,r2,31
    2d80:	10800003 	ldbu	r2,0(r2)
    2d84:	10c03fcc 	andi	r3,r2,255
    2d88:	e0bffe17 	ldw	r2,-8(fp)
    2d8c:	10800784 	addi	r2,r2,30
    2d90:	10800003 	ldbu	r2,0(r2)
    2d94:	10803fcc 	andi	r2,r2,255
    2d98:	1004923a 	slli	r2,r2,8
    2d9c:	1886b03a 	or	r3,r3,r2
    2da0:	e0bffe17 	ldw	r2,-8(fp)
    2da4:	10800744 	addi	r2,r2,29
    2da8:	10800003 	ldbu	r2,0(r2)
    2dac:	10803fcc 	andi	r2,r2,255
    2db0:	1004943a 	slli	r2,r2,16
    2db4:	1886b03a 	or	r3,r3,r2
    2db8:	e0bffe17 	ldw	r2,-8(fp)
    2dbc:	10800704 	addi	r2,r2,28
    2dc0:	10800003 	ldbu	r2,0(r2)
    2dc4:	10803fcc 	andi	r2,r2,255
    2dc8:	1004963a 	slli	r2,r2,24
    2dcc:	1886b03a 	or	r3,r3,r2
    2dd0:	e0bffd17 	ldw	r2,-12(fp)
    2dd4:	10c00015 	stw	r3,0(r2)
    r->d[1] = (uint32_t)b32[27] | (uint32_t)b32[26] << 8 | (uint32_t)b32[25] << 16 | (uint32_t)b32[24] << 24;
    2dd8:	e0bffe17 	ldw	r2,-8(fp)
    2ddc:	108006c4 	addi	r2,r2,27
    2de0:	10800003 	ldbu	r2,0(r2)
    2de4:	10c03fcc 	andi	r3,r2,255
    2de8:	e0bffe17 	ldw	r2,-8(fp)
    2dec:	10800684 	addi	r2,r2,26
    2df0:	10800003 	ldbu	r2,0(r2)
    2df4:	10803fcc 	andi	r2,r2,255
    2df8:	1004923a 	slli	r2,r2,8
    2dfc:	1886b03a 	or	r3,r3,r2
    2e00:	e0bffe17 	ldw	r2,-8(fp)
    2e04:	10800644 	addi	r2,r2,25
    2e08:	10800003 	ldbu	r2,0(r2)
    2e0c:	10803fcc 	andi	r2,r2,255
    2e10:	1004943a 	slli	r2,r2,16
    2e14:	1886b03a 	or	r3,r3,r2
    2e18:	e0bffe17 	ldw	r2,-8(fp)
    2e1c:	10800604 	addi	r2,r2,24
    2e20:	10800003 	ldbu	r2,0(r2)
    2e24:	10803fcc 	andi	r2,r2,255
    2e28:	1004963a 	slli	r2,r2,24
    2e2c:	1886b03a 	or	r3,r3,r2
    2e30:	e0bffd17 	ldw	r2,-12(fp)
    2e34:	10c00115 	stw	r3,4(r2)
    r->d[2] = (uint32_t)b32[23] | (uint32_t)b32[22] << 8 | (uint32_t)b32[21] << 16 | (uint32_t)b32[20] << 24;
    2e38:	e0bffe17 	ldw	r2,-8(fp)
    2e3c:	108005c4 	addi	r2,r2,23
    2e40:	10800003 	ldbu	r2,0(r2)
    2e44:	10c03fcc 	andi	r3,r2,255
    2e48:	e0bffe17 	ldw	r2,-8(fp)
    2e4c:	10800584 	addi	r2,r2,22
    2e50:	10800003 	ldbu	r2,0(r2)
    2e54:	10803fcc 	andi	r2,r2,255
    2e58:	1004923a 	slli	r2,r2,8
    2e5c:	1886b03a 	or	r3,r3,r2
    2e60:	e0bffe17 	ldw	r2,-8(fp)
    2e64:	10800544 	addi	r2,r2,21
    2e68:	10800003 	ldbu	r2,0(r2)
    2e6c:	10803fcc 	andi	r2,r2,255
    2e70:	1004943a 	slli	r2,r2,16
    2e74:	1886b03a 	or	r3,r3,r2
    2e78:	e0bffe17 	ldw	r2,-8(fp)
    2e7c:	10800504 	addi	r2,r2,20
    2e80:	10800003 	ldbu	r2,0(r2)
    2e84:	10803fcc 	andi	r2,r2,255
    2e88:	1004963a 	slli	r2,r2,24
    2e8c:	1886b03a 	or	r3,r3,r2
    2e90:	e0bffd17 	ldw	r2,-12(fp)
    2e94:	10c00215 	stw	r3,8(r2)
    r->d[3] = (uint32_t)b32[19] | (uint32_t)b32[18] << 8 | (uint32_t)b32[17] << 16 | (uint32_t)b32[16] << 24;
    2e98:	e0bffe17 	ldw	r2,-8(fp)
    2e9c:	108004c4 	addi	r2,r2,19
    2ea0:	10800003 	ldbu	r2,0(r2)
    2ea4:	10c03fcc 	andi	r3,r2,255
    2ea8:	e0bffe17 	ldw	r2,-8(fp)
    2eac:	10800484 	addi	r2,r2,18
    2eb0:	10800003 	ldbu	r2,0(r2)
    2eb4:	10803fcc 	andi	r2,r2,255
    2eb8:	1004923a 	slli	r2,r2,8
    2ebc:	1886b03a 	or	r3,r3,r2
    2ec0:	e0bffe17 	ldw	r2,-8(fp)
    2ec4:	10800444 	addi	r2,r2,17
    2ec8:	10800003 	ldbu	r2,0(r2)
    2ecc:	10803fcc 	andi	r2,r2,255
    2ed0:	1004943a 	slli	r2,r2,16
    2ed4:	1886b03a 	or	r3,r3,r2
    2ed8:	e0bffe17 	ldw	r2,-8(fp)
    2edc:	10800404 	addi	r2,r2,16
    2ee0:	10800003 	ldbu	r2,0(r2)
    2ee4:	10803fcc 	andi	r2,r2,255
    2ee8:	1004963a 	slli	r2,r2,24
    2eec:	1886b03a 	or	r3,r3,r2
    2ef0:	e0bffd17 	ldw	r2,-12(fp)
    2ef4:	10c00315 	stw	r3,12(r2)
    r->d[4] = (uint32_t)b32[15] | (uint32_t)b32[14] << 8 | (uint32_t)b32[13] << 16 | (uint32_t)b32[12] << 24;
    2ef8:	e0bffe17 	ldw	r2,-8(fp)
    2efc:	108003c4 	addi	r2,r2,15
    2f00:	10800003 	ldbu	r2,0(r2)
    2f04:	10c03fcc 	andi	r3,r2,255
    2f08:	e0bffe17 	ldw	r2,-8(fp)
    2f0c:	10800384 	addi	r2,r2,14
    2f10:	10800003 	ldbu	r2,0(r2)
    2f14:	10803fcc 	andi	r2,r2,255
    2f18:	1004923a 	slli	r2,r2,8
    2f1c:	1886b03a 	or	r3,r3,r2
    2f20:	e0bffe17 	ldw	r2,-8(fp)
    2f24:	10800344 	addi	r2,r2,13
    2f28:	10800003 	ldbu	r2,0(r2)
    2f2c:	10803fcc 	andi	r2,r2,255
    2f30:	1004943a 	slli	r2,r2,16
    2f34:	1886b03a 	or	r3,r3,r2
    2f38:	e0bffe17 	ldw	r2,-8(fp)
    2f3c:	10800304 	addi	r2,r2,12
    2f40:	10800003 	ldbu	r2,0(r2)
    2f44:	10803fcc 	andi	r2,r2,255
    2f48:	1004963a 	slli	r2,r2,24
    2f4c:	1886b03a 	or	r3,r3,r2
    2f50:	e0bffd17 	ldw	r2,-12(fp)
    2f54:	10c00415 	stw	r3,16(r2)
    r->d[5] = (uint32_t)b32[11] | (uint32_t)b32[10] << 8 | (uint32_t)b32[9] << 16 | (uint32_t)b32[8] << 24;
    2f58:	e0bffe17 	ldw	r2,-8(fp)
    2f5c:	108002c4 	addi	r2,r2,11
    2f60:	10800003 	ldbu	r2,0(r2)
    2f64:	10c03fcc 	andi	r3,r2,255
    2f68:	e0bffe17 	ldw	r2,-8(fp)
    2f6c:	10800284 	addi	r2,r2,10
    2f70:	10800003 	ldbu	r2,0(r2)
    2f74:	10803fcc 	andi	r2,r2,255
    2f78:	1004923a 	slli	r2,r2,8
    2f7c:	1886b03a 	or	r3,r3,r2
    2f80:	e0bffe17 	ldw	r2,-8(fp)
    2f84:	10800244 	addi	r2,r2,9
    2f88:	10800003 	ldbu	r2,0(r2)
    2f8c:	10803fcc 	andi	r2,r2,255
    2f90:	1004943a 	slli	r2,r2,16
    2f94:	1886b03a 	or	r3,r3,r2
    2f98:	e0bffe17 	ldw	r2,-8(fp)
    2f9c:	10800204 	addi	r2,r2,8
    2fa0:	10800003 	ldbu	r2,0(r2)
    2fa4:	10803fcc 	andi	r2,r2,255
    2fa8:	1004963a 	slli	r2,r2,24
    2fac:	1886b03a 	or	r3,r3,r2
    2fb0:	e0bffd17 	ldw	r2,-12(fp)
    2fb4:	10c00515 	stw	r3,20(r2)
    r->d[6] = (uint32_t)b32[7] | (uint32_t)b32[6] << 8 | (uint32_t)b32[5] << 16 | (uint32_t)b32[4] << 24;
    2fb8:	e0bffe17 	ldw	r2,-8(fp)
    2fbc:	108001c4 	addi	r2,r2,7
    2fc0:	10800003 	ldbu	r2,0(r2)
    2fc4:	10c03fcc 	andi	r3,r2,255
    2fc8:	e0bffe17 	ldw	r2,-8(fp)
    2fcc:	10800184 	addi	r2,r2,6
    2fd0:	10800003 	ldbu	r2,0(r2)
    2fd4:	10803fcc 	andi	r2,r2,255
    2fd8:	1004923a 	slli	r2,r2,8
    2fdc:	1886b03a 	or	r3,r3,r2
    2fe0:	e0bffe17 	ldw	r2,-8(fp)
    2fe4:	10800144 	addi	r2,r2,5
    2fe8:	10800003 	ldbu	r2,0(r2)
    2fec:	10803fcc 	andi	r2,r2,255
    2ff0:	1004943a 	slli	r2,r2,16
    2ff4:	1886b03a 	or	r3,r3,r2
    2ff8:	e0bffe17 	ldw	r2,-8(fp)
    2ffc:	10800104 	addi	r2,r2,4
    3000:	10800003 	ldbu	r2,0(r2)
    3004:	10803fcc 	andi	r2,r2,255
    3008:	1004963a 	slli	r2,r2,24
    300c:	1886b03a 	or	r3,r3,r2
    3010:	e0bffd17 	ldw	r2,-12(fp)
    3014:	10c00615 	stw	r3,24(r2)
    r->d[7] = (uint32_t)b32[3] | (uint32_t)b32[2] << 8 | (uint32_t)b32[1] << 16 | (uint32_t)b32[0] << 24;
    3018:	e0bffe17 	ldw	r2,-8(fp)
    301c:	108000c4 	addi	r2,r2,3
    3020:	10800003 	ldbu	r2,0(r2)
    3024:	10c03fcc 	andi	r3,r2,255
    3028:	e0bffe17 	ldw	r2,-8(fp)
    302c:	10800084 	addi	r2,r2,2
    3030:	10800003 	ldbu	r2,0(r2)
    3034:	10803fcc 	andi	r2,r2,255
    3038:	1004923a 	slli	r2,r2,8
    303c:	1886b03a 	or	r3,r3,r2
    3040:	e0bffe17 	ldw	r2,-8(fp)
    3044:	10800044 	addi	r2,r2,1
    3048:	10800003 	ldbu	r2,0(r2)
    304c:	10803fcc 	andi	r2,r2,255
    3050:	1004943a 	slli	r2,r2,16
    3054:	1886b03a 	or	r3,r3,r2
    3058:	e0bffe17 	ldw	r2,-8(fp)
    305c:	10800003 	ldbu	r2,0(r2)
    3060:	10803fcc 	andi	r2,r2,255
    3064:	1004963a 	slli	r2,r2,24
    3068:	1886b03a 	or	r3,r3,r2
    306c:	e0bffd17 	ldw	r2,-12(fp)
    3070:	10c00715 	stw	r3,28(r2)
    over = secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));
    3074:	e13ffd17 	ldw	r4,-12(fp)
    3078:	00027440 	call	2744 <secp256k1_scalar_check_overflow>
    307c:	100b883a 	mov	r5,r2
    3080:	e13ffd17 	ldw	r4,-12(fp)
    3084:	000295c0 	call	295c <secp256k1_scalar_reduce>
    3088:	e0bffc15 	stw	r2,-16(fp)
    if (overflow) {
    308c:	e0bfff17 	ldw	r2,-4(fp)
    3090:	10000326 	beq	r2,zero,30a0 <secp256k1_scalar_set_b32+0x344>
        *overflow = over;
    3094:	e0bfff17 	ldw	r2,-4(fp)
    3098:	e0fffc17 	ldw	r3,-16(fp)
    309c:	10c00015 	stw	r3,0(r2)
    }
}
    30a0:	0001883a 	nop
    30a4:	e037883a 	mov	sp,fp
    30a8:	dfc00117 	ldw	ra,4(sp)
    30ac:	df000017 	ldw	fp,0(sp)
    30b0:	dec00204 	addi	sp,sp,8
    30b4:	f800283a 	ret

000030b8 <secp256k1_scalar_is_zero>:
//    bin[20] = a->d[2] >> 24; bin[21] = a->d[2] >> 16; bin[22] = a->d[2] >> 8; bin[23] = a->d[2];
//    bin[24] = a->d[1] >> 24; bin[25] = a->d[1] >> 16; bin[26] = a->d[1] >> 8; bin[27] = a->d[1];
//    bin[28] = a->d[0] >> 24; bin[29] = a->d[0] >> 16; bin[30] = a->d[0] >> 8; bin[31] = a->d[0];
//}

SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {
    30b8:	defffe04 	addi	sp,sp,-8
    30bc:	df000115 	stw	fp,4(sp)
    30c0:	df000104 	addi	fp,sp,4
    30c4:	e13fff15 	stw	r4,-4(fp)
    return (a->d[0] | a->d[1] | a->d[2] | a->d[3] | a->d[4] | a->d[5] | a->d[6] | a->d[7]) == 0;
    30c8:	e0bfff17 	ldw	r2,-4(fp)
    30cc:	10c00017 	ldw	r3,0(r2)
    30d0:	e0bfff17 	ldw	r2,-4(fp)
    30d4:	10800117 	ldw	r2,4(r2)
    30d8:	1886b03a 	or	r3,r3,r2
    30dc:	e0bfff17 	ldw	r2,-4(fp)
    30e0:	10800217 	ldw	r2,8(r2)
    30e4:	1886b03a 	or	r3,r3,r2
    30e8:	e0bfff17 	ldw	r2,-4(fp)
    30ec:	10800317 	ldw	r2,12(r2)
    30f0:	1886b03a 	or	r3,r3,r2
    30f4:	e0bfff17 	ldw	r2,-4(fp)
    30f8:	10800417 	ldw	r2,16(r2)
    30fc:	1886b03a 	or	r3,r3,r2
    3100:	e0bfff17 	ldw	r2,-4(fp)
    3104:	10800517 	ldw	r2,20(r2)
    3108:	1886b03a 	or	r3,r3,r2
    310c:	e0bfff17 	ldw	r2,-4(fp)
    3110:	10800617 	ldw	r2,24(r2)
    3114:	1886b03a 	or	r3,r3,r2
    3118:	e0bfff17 	ldw	r2,-4(fp)
    311c:	10800717 	ldw	r2,28(r2)
    3120:	1884b03a 	or	r2,r3,r2
    3124:	1005003a 	cmpeq	r2,r2,zero
    3128:	10803fcc 	andi	r2,r2,255
}
    312c:	e037883a 	mov	sp,fp
    3130:	df000017 	ldw	fp,0(sp)
    3134:	dec00104 	addi	sp,sp,4
    3138:	f800283a 	ret

0000313c <secp256k1_ec_seckey_verify>:
//        memset(signature, 0, sizeof(*signature));
//    }
//    return ret;
//}
//
int secp256k1_ec_seckey_verify(const secp256k1_context* ctx, const unsigned char *seckey) {
    313c:	defff204 	addi	sp,sp,-56
    3140:	dfc00d15 	stw	ra,52(sp)
    3144:	df000c15 	stw	fp,48(sp)
    3148:	df000c04 	addi	fp,sp,48
    314c:	e13ffe15 	stw	r4,-8(fp)
    3150:	e17fff15 	stw	r5,-4(fp)
    int ret;
    int overflow;
    VERIFY_CHECK(ctx != NULL);
//    ARG_CHECK(seckey != NULL);

    secp256k1_scalar_set_b32(&sec, seckey, &overflow);
    3154:	e0fffd04 	addi	r3,fp,-12
    3158:	e0bff504 	addi	r2,fp,-44
    315c:	180d883a 	mov	r6,r3
    3160:	e17fff17 	ldw	r5,-4(fp)
    3164:	1009883a 	mov	r4,r2
    3168:	0002d5c0 	call	2d5c <secp256k1_scalar_set_b32>
    ret = !overflow && !secp256k1_scalar_is_zero(&sec);
    316c:	e0bffd17 	ldw	r2,-12(fp)
    3170:	1000061e 	bne	r2,zero,318c <secp256k1_ec_seckey_verify+0x50>
    3174:	e0bff504 	addi	r2,fp,-44
    3178:	1009883a 	mov	r4,r2
    317c:	00030b80 	call	30b8 <secp256k1_scalar_is_zero>
    3180:	1000021e 	bne	r2,zero,318c <secp256k1_ec_seckey_verify+0x50>
    3184:	00800044 	movi	r2,1
    3188:	00000106 	br	3190 <secp256k1_ec_seckey_verify+0x54>
    318c:	0005883a 	mov	r2,zero
    3190:	e0bff415 	stw	r2,-48(fp)
    secp256k1_scalar_clear(&sec);
    3194:	e0bff504 	addi	r2,fp,-44
    3198:	1009883a 	mov	r4,r2
    319c:	00026e00 	call	26e0 <secp256k1_scalar_clear>
    return ret;
    31a0:	e0bff417 	ldw	r2,-48(fp)
}
    31a4:	e037883a 	mov	sp,fp
    31a8:	dfc00117 	ldw	ra,4(sp)
    31ac:	df000017 	ldw	fp,0(sp)
    31b0:	dec00204 	addi	sp,sp,8
    31b4:	f800283a 	ret

000031b8 <sha256_Init>:
    0x5be0cd19137e2179ULL};


/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context)
{
    31b8:	defffd04 	addi	sp,sp,-12
    31bc:	dfc00215 	stw	ra,8(sp)
    31c0:	df000115 	stw	fp,4(sp)
    31c4:	df000104 	addi	fp,sp,4
    31c8:	e13fff15 	stw	r4,-4(fp)
    if (context == (SHA256_CTX*)0) {
    31cc:	e0bfff17 	ldw	r2,-4(fp)
    31d0:	10001026 	beq	r2,zero,3214 <sha256_Init+0x5c>
        return;
    }
    MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
    31d4:	e0bfff17 	ldw	r2,-4(fp)
    31d8:	01800804 	movi	r6,32
    31dc:	01400074 	movhi	r5,1
    31e0:	295b9604 	addi	r5,r5,28248
    31e4:	1009883a 	mov	r4,r2
    31e8:	000a0f40 	call	a0f4 <memcpy>
    MEMSET_BZERO(context->buffer, SHA256_BLOCK_LENGTH);
    31ec:	e0bfff17 	ldw	r2,-4(fp)
    31f0:	10800a04 	addi	r2,r2,40
    31f4:	01801004 	movi	r6,64
    31f8:	000b883a 	mov	r5,zero
    31fc:	1009883a 	mov	r4,r2
    3200:	000a11c0 	call	a11c <memset>
    context->bitcount = 0;
    3204:	e0bfff17 	ldw	r2,-4(fp)
    3208:	10000815 	stw	zero,32(r2)
    320c:	10000915 	stw	zero,36(r2)
    3210:	00000106 	br	3218 <sha256_Init+0x60>

/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context)
{
    if (context == (SHA256_CTX*)0) {
        return;
    3214:	0001883a 	nop
    }
    MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
    MEMSET_BZERO(context->buffer, SHA256_BLOCK_LENGTH);
    context->bitcount = 0;
}
    3218:	e037883a 	mov	sp,fp
    321c:	dfc00117 	ldw	ra,4(sp)
    3220:	df000017 	ldw	fp,0(sp)
    3224:	dec00204 	addi	sp,sp,8
    3228:	f800283a 	ret

0000322c <sha256_Transform>:
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha256_Transform(SHA256_CTX* context, const sha2_word32* data)
{
    322c:	deffee04 	addi	sp,sp,-72
    3230:	df001115 	stw	fp,68(sp)
    3234:	df001104 	addi	fp,sp,68
    3238:	e13ffe15 	stw	r4,-8(fp)
    323c:	e17fff15 	stw	r5,-4(fp)
    sha2_word32 a, b, c, d, e, f, g, h, s0, s1;
    sha2_word32 T1, T2, *W256;
    int j;

    W256 = (sha2_word32*)context->buffer;
    3240:	e0bffe17 	ldw	r2,-8(fp)
    3244:	10800a04 	addi	r2,r2,40
    3248:	e0bff815 	stw	r2,-32(fp)

    /* Initialize registers with the prev. intermediate value */
    a = context->state[0];
    324c:	e0bffe17 	ldw	r2,-8(fp)
    3250:	10800017 	ldw	r2,0(r2)
    3254:	e0bfef15 	stw	r2,-68(fp)
    b = context->state[1];
    3258:	e0bffe17 	ldw	r2,-8(fp)
    325c:	10800117 	ldw	r2,4(r2)
    3260:	e0bff015 	stw	r2,-64(fp)
    c = context->state[2];
    3264:	e0bffe17 	ldw	r2,-8(fp)
    3268:	10800217 	ldw	r2,8(r2)
    326c:	e0bff115 	stw	r2,-60(fp)
    d = context->state[3];
    3270:	e0bffe17 	ldw	r2,-8(fp)
    3274:	10800317 	ldw	r2,12(r2)
    3278:	e0bff215 	stw	r2,-56(fp)
    e = context->state[4];
    327c:	e0bffe17 	ldw	r2,-8(fp)
    3280:	10800417 	ldw	r2,16(r2)
    3284:	e0bff315 	stw	r2,-52(fp)
    f = context->state[5];
    3288:	e0bffe17 	ldw	r2,-8(fp)
    328c:	10800517 	ldw	r2,20(r2)
    3290:	e0bff415 	stw	r2,-48(fp)
    g = context->state[6];
    3294:	e0bffe17 	ldw	r2,-8(fp)
    3298:	10800617 	ldw	r2,24(r2)
    329c:	e0bff515 	stw	r2,-44(fp)
    h = context->state[7];
    32a0:	e0bffe17 	ldw	r2,-8(fp)
    32a4:	10800717 	ldw	r2,28(r2)
    32a8:	e0bff615 	stw	r2,-40(fp)

    j = 0;
    32ac:	e03ff715 	stw	zero,-36(fp)
    do {
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Copy data while converting to host byte order */
        REVERSE32(*data++, W256[j]);
    32b0:	e0bfff17 	ldw	r2,-4(fp)
    32b4:	10c00104 	addi	r3,r2,4
    32b8:	e0ffff15 	stw	r3,-4(fp)
    32bc:	10800017 	ldw	r2,0(r2)
    32c0:	e0bff915 	stw	r2,-28(fp)
    32c4:	e0bff917 	ldw	r2,-28(fp)
    32c8:	1004143a 	roli	r2,r2,16
    32cc:	e0bff915 	stw	r2,-28(fp)
    32d0:	e0bff717 	ldw	r2,-36(fp)
    32d4:	1085883a 	add	r2,r2,r2
    32d8:	1085883a 	add	r2,r2,r2
    32dc:	1007883a 	mov	r3,r2
    32e0:	e0bff817 	ldw	r2,-32(fp)
    32e4:	10c7883a 	add	r3,r2,r3
    32e8:	e13ff917 	ldw	r4,-28(fp)
    32ec:	00bfc074 	movhi	r2,65281
    32f0:	10bfc004 	addi	r2,r2,-256
    32f4:	2084703a 	and	r2,r4,r2
    32f8:	1008d23a 	srli	r4,r2,8
    32fc:	e17ff917 	ldw	r5,-28(fp)
    3300:	00803ff4 	movhi	r2,255
    3304:	10803fc4 	addi	r2,r2,255
    3308:	2884703a 	and	r2,r5,r2
    330c:	1004923a 	slli	r2,r2,8
    3310:	2084b03a 	or	r2,r4,r2
    3314:	18800015 	stw	r2,0(r3)
        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + W256[j];
    3318:	e0fff317 	ldw	r3,-52(fp)
    331c:	00800184 	movi	r2,6
    3320:	1886583a 	ror	r3,r3,r2
    3324:	e13ff317 	ldw	r4,-52(fp)
    3328:	008002c4 	movi	r2,11
    332c:	2084583a 	ror	r2,r4,r2
    3330:	1886f03a 	xor	r3,r3,r2
    3334:	e0bff317 	ldw	r2,-52(fp)
    3338:	100411fa 	roli	r2,r2,7
    333c:	1886f03a 	xor	r3,r3,r2
    3340:	e0bff617 	ldw	r2,-40(fp)
    3344:	1887883a 	add	r3,r3,r2
    3348:	e13ff317 	ldw	r4,-52(fp)
    334c:	e0bff417 	ldw	r2,-48(fp)
    3350:	2088703a 	and	r4,r4,r2
    3354:	e0bff317 	ldw	r2,-52(fp)
    3358:	008a303a 	nor	r5,zero,r2
    335c:	e0bff517 	ldw	r2,-44(fp)
    3360:	2884703a 	and	r2,r5,r2
    3364:	2084f03a 	xor	r2,r4,r2
    3368:	1889883a 	add	r4,r3,r2
    336c:	00800074 	movhi	r2,1
    3370:	109b5604 	addi	r2,r2,27992
    3374:	e0fff717 	ldw	r3,-36(fp)
    3378:	18c7883a 	add	r3,r3,r3
    337c:	18c7883a 	add	r3,r3,r3
    3380:	10c5883a 	add	r2,r2,r3
    3384:	10800017 	ldw	r2,0(r2)
    3388:	2087883a 	add	r3,r4,r2
    338c:	e0bff717 	ldw	r2,-36(fp)
    3390:	1085883a 	add	r2,r2,r2
    3394:	1085883a 	add	r2,r2,r2
    3398:	1009883a 	mov	r4,r2
    339c:	e0bff817 	ldw	r2,-32(fp)
    33a0:	1105883a 	add	r2,r2,r4
    33a4:	10800017 	ldw	r2,0(r2)
    33a8:	1885883a 	add	r2,r3,r2
    33ac:	e0bffa15 	stw	r2,-24(fp)
#else  /* BYTE_ORDER == LITTLE_ENDIAN */
        /* Apply the SHA-256 compression function to update a..h with copy */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
        T2 = Sigma0_256(a) + Maj(a, b, c);
    33b0:	e0ffef17 	ldw	r3,-68(fp)
    33b4:	00800084 	movi	r2,2
    33b8:	1886583a 	ror	r3,r3,r2
    33bc:	e13fef17 	ldw	r4,-68(fp)
    33c0:	00800344 	movi	r2,13
    33c4:	2084583a 	ror	r2,r4,r2
    33c8:	1886f03a 	xor	r3,r3,r2
    33cc:	e0bfef17 	ldw	r2,-68(fp)
    33d0:	100412ba 	roli	r2,r2,10
    33d4:	1886f03a 	xor	r3,r3,r2
    33d8:	e13fef17 	ldw	r4,-68(fp)
    33dc:	e0bff017 	ldw	r2,-64(fp)
    33e0:	2088703a 	and	r4,r4,r2
    33e4:	e17fef17 	ldw	r5,-68(fp)
    33e8:	e0bff117 	ldw	r2,-60(fp)
    33ec:	2884703a 	and	r2,r5,r2
    33f0:	2088f03a 	xor	r4,r4,r2
    33f4:	e17ff017 	ldw	r5,-64(fp)
    33f8:	e0bff117 	ldw	r2,-60(fp)
    33fc:	2884703a 	and	r2,r5,r2
    3400:	2084f03a 	xor	r2,r4,r2
    3404:	1885883a 	add	r2,r3,r2
    3408:	e0bffb15 	stw	r2,-20(fp)
        h = g;
    340c:	e0bff517 	ldw	r2,-44(fp)
    3410:	e0bff615 	stw	r2,-40(fp)
        g = f;
    3414:	e0bff417 	ldw	r2,-48(fp)
    3418:	e0bff515 	stw	r2,-44(fp)
        f = e;
    341c:	e0bff317 	ldw	r2,-52(fp)
    3420:	e0bff415 	stw	r2,-48(fp)
        e = d + T1;
    3424:	e0fff217 	ldw	r3,-56(fp)
    3428:	e0bffa17 	ldw	r2,-24(fp)
    342c:	1885883a 	add	r2,r3,r2
    3430:	e0bff315 	stw	r2,-52(fp)
        d = c;
    3434:	e0bff117 	ldw	r2,-60(fp)
    3438:	e0bff215 	stw	r2,-56(fp)
        c = b;
    343c:	e0bff017 	ldw	r2,-64(fp)
    3440:	e0bff115 	stw	r2,-60(fp)
        b = a;
    3444:	e0bfef17 	ldw	r2,-68(fp)
    3448:	e0bff015 	stw	r2,-64(fp)
        a = T1 + T2;
    344c:	e0fffa17 	ldw	r3,-24(fp)
    3450:	e0bffb17 	ldw	r2,-20(fp)
    3454:	1885883a 	add	r2,r3,r2
    3458:	e0bfef15 	stw	r2,-68(fp)

        j++;
    345c:	e0bff717 	ldw	r2,-36(fp)
    3460:	10800044 	addi	r2,r2,1
    3464:	e0bff715 	stw	r2,-36(fp)
    } while (j < 16);
    3468:	e0bff717 	ldw	r2,-36(fp)
    346c:	10800410 	cmplti	r2,r2,16
    3470:	103f8f1e 	bne	r2,zero,32b0 <__alt_mem_epcs_flash_controller+0xfdffa2b0>

    do {
        /* Part of the message block expansion: */
        s0 = W256[(j + 1) & 0x0f];
    3474:	e0bff717 	ldw	r2,-36(fp)
    3478:	10800044 	addi	r2,r2,1
    347c:	108003cc 	andi	r2,r2,15
    3480:	1085883a 	add	r2,r2,r2
    3484:	1085883a 	add	r2,r2,r2
    3488:	1007883a 	mov	r3,r2
    348c:	e0bff817 	ldw	r2,-32(fp)
    3490:	10c5883a 	add	r2,r2,r3
    3494:	10800017 	ldw	r2,0(r2)
    3498:	e0bffc15 	stw	r2,-16(fp)
        s0 = sigma0_256(s0);
    349c:	e0fffc17 	ldw	r3,-16(fp)
    34a0:	008001c4 	movi	r2,7
    34a4:	1886583a 	ror	r3,r3,r2
    34a8:	e0bffc17 	ldw	r2,-16(fp)
    34ac:	100413ba 	roli	r2,r2,14
    34b0:	1886f03a 	xor	r3,r3,r2
    34b4:	e0bffc17 	ldw	r2,-16(fp)
    34b8:	1004d0fa 	srli	r2,r2,3
    34bc:	1884f03a 	xor	r2,r3,r2
    34c0:	e0bffc15 	stw	r2,-16(fp)
        s1 = W256[(j + 14) & 0x0f];
    34c4:	e0bff717 	ldw	r2,-36(fp)
    34c8:	10800384 	addi	r2,r2,14
    34cc:	108003cc 	andi	r2,r2,15
    34d0:	1085883a 	add	r2,r2,r2
    34d4:	1085883a 	add	r2,r2,r2
    34d8:	1007883a 	mov	r3,r2
    34dc:	e0bff817 	ldw	r2,-32(fp)
    34e0:	10c5883a 	add	r2,r2,r3
    34e4:	10800017 	ldw	r2,0(r2)
    34e8:	e0bffd15 	stw	r2,-12(fp)
        s1 = sigma1_256(s1);
    34ec:	e0bffd17 	ldw	r2,-12(fp)
    34f0:	100613fa 	roli	r3,r2,15
    34f4:	e0bffd17 	ldw	r2,-12(fp)
    34f8:	1004137a 	roli	r2,r2,13
    34fc:	1886f03a 	xor	r3,r3,r2
    3500:	e0bffd17 	ldw	r2,-12(fp)
    3504:	1004d2ba 	srli	r2,r2,10
    3508:	1884f03a 	xor	r2,r3,r2
    350c:	e0bffd15 	stw	r2,-12(fp)

        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
    3510:	e0fff317 	ldw	r3,-52(fp)
    3514:	00800184 	movi	r2,6
    3518:	1886583a 	ror	r3,r3,r2
    351c:	e13ff317 	ldw	r4,-52(fp)
    3520:	008002c4 	movi	r2,11
    3524:	2084583a 	ror	r2,r4,r2
    3528:	1886f03a 	xor	r3,r3,r2
    352c:	e0bff317 	ldw	r2,-52(fp)
    3530:	100411fa 	roli	r2,r2,7
    3534:	1886f03a 	xor	r3,r3,r2
    3538:	e0bff617 	ldw	r2,-40(fp)
    353c:	1887883a 	add	r3,r3,r2
    3540:	e13ff317 	ldw	r4,-52(fp)
    3544:	e0bff417 	ldw	r2,-48(fp)
    3548:	2088703a 	and	r4,r4,r2
    354c:	e0bff317 	ldw	r2,-52(fp)
    3550:	008a303a 	nor	r5,zero,r2
    3554:	e0bff517 	ldw	r2,-44(fp)
    3558:	2884703a 	and	r2,r5,r2
    355c:	2084f03a 	xor	r2,r4,r2
    3560:	1889883a 	add	r4,r3,r2
    3564:	00800074 	movhi	r2,1
    3568:	109b5604 	addi	r2,r2,27992
    356c:	e0fff717 	ldw	r3,-36(fp)
    3570:	18c7883a 	add	r3,r3,r3
    3574:	18c7883a 	add	r3,r3,r3
    3578:	10c5883a 	add	r2,r2,r3
    357c:	10800017 	ldw	r2,0(r2)
    3580:	2089883a 	add	r4,r4,r2
             (W256[j & 0x0f] += s1 + W256[(j + 9) & 0x0f] + s0);
    3584:	e0bff717 	ldw	r2,-36(fp)
    3588:	108003cc 	andi	r2,r2,15
    358c:	1085883a 	add	r2,r2,r2
    3590:	1085883a 	add	r2,r2,r2
    3594:	1007883a 	mov	r3,r2
    3598:	e0bff817 	ldw	r2,-32(fp)
    359c:	10c5883a 	add	r2,r2,r3
    35a0:	e0fff717 	ldw	r3,-36(fp)
    35a4:	18c003cc 	andi	r3,r3,15
    35a8:	18c7883a 	add	r3,r3,r3
    35ac:	18c7883a 	add	r3,r3,r3
    35b0:	180b883a 	mov	r5,r3
    35b4:	e0fff817 	ldw	r3,-32(fp)
    35b8:	1947883a 	add	r3,r3,r5
    35bc:	19400017 	ldw	r5,0(r3)
    35c0:	e0fff717 	ldw	r3,-36(fp)
    35c4:	18c00244 	addi	r3,r3,9
    35c8:	18c003cc 	andi	r3,r3,15
    35cc:	18c7883a 	add	r3,r3,r3
    35d0:	18c7883a 	add	r3,r3,r3
    35d4:	180d883a 	mov	r6,r3
    35d8:	e0fff817 	ldw	r3,-32(fp)
    35dc:	1987883a 	add	r3,r3,r6
    35e0:	19800017 	ldw	r6,0(r3)
    35e4:	e0fffd17 	ldw	r3,-12(fp)
    35e8:	30cd883a 	add	r6,r6,r3
    35ec:	e0fffc17 	ldw	r3,-16(fp)
    35f0:	30c7883a 	add	r3,r6,r3
    35f4:	28c7883a 	add	r3,r5,r3
    35f8:	10c00015 	stw	r3,0(r2)
    35fc:	10800017 	ldw	r2,0(r2)
        s0 = sigma0_256(s0);
        s1 = W256[(j + 14) & 0x0f];
        s1 = sigma1_256(s1);

        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
    3600:	2085883a 	add	r2,r4,r2
    3604:	e0bffa15 	stw	r2,-24(fp)
             (W256[j & 0x0f] += s1 + W256[(j + 9) & 0x0f] + s0);
        T2 = Sigma0_256(a) + Maj(a, b, c);
    3608:	e0ffef17 	ldw	r3,-68(fp)
    360c:	00800084 	movi	r2,2
    3610:	1886583a 	ror	r3,r3,r2
    3614:	e13fef17 	ldw	r4,-68(fp)
    3618:	00800344 	movi	r2,13
    361c:	2084583a 	ror	r2,r4,r2
    3620:	1886f03a 	xor	r3,r3,r2
    3624:	e0bfef17 	ldw	r2,-68(fp)
    3628:	100412ba 	roli	r2,r2,10
    362c:	1886f03a 	xor	r3,r3,r2
    3630:	e13fef17 	ldw	r4,-68(fp)
    3634:	e0bff017 	ldw	r2,-64(fp)
    3638:	2088703a 	and	r4,r4,r2
    363c:	e17fef17 	ldw	r5,-68(fp)
    3640:	e0bff117 	ldw	r2,-60(fp)
    3644:	2884703a 	and	r2,r5,r2
    3648:	2088f03a 	xor	r4,r4,r2
    364c:	e17ff017 	ldw	r5,-64(fp)
    3650:	e0bff117 	ldw	r2,-60(fp)
    3654:	2884703a 	and	r2,r5,r2
    3658:	2084f03a 	xor	r2,r4,r2
    365c:	1885883a 	add	r2,r3,r2
    3660:	e0bffb15 	stw	r2,-20(fp)
        h = g;
    3664:	e0bff517 	ldw	r2,-44(fp)
    3668:	e0bff615 	stw	r2,-40(fp)
        g = f;
    366c:	e0bff417 	ldw	r2,-48(fp)
    3670:	e0bff515 	stw	r2,-44(fp)
        f = e;
    3674:	e0bff317 	ldw	r2,-52(fp)
    3678:	e0bff415 	stw	r2,-48(fp)
        e = d + T1;
    367c:	e0fff217 	ldw	r3,-56(fp)
    3680:	e0bffa17 	ldw	r2,-24(fp)
    3684:	1885883a 	add	r2,r3,r2
    3688:	e0bff315 	stw	r2,-52(fp)
        d = c;
    368c:	e0bff117 	ldw	r2,-60(fp)
    3690:	e0bff215 	stw	r2,-56(fp)
        c = b;
    3694:	e0bff017 	ldw	r2,-64(fp)
    3698:	e0bff115 	stw	r2,-60(fp)
        b = a;
    369c:	e0bfef17 	ldw	r2,-68(fp)
    36a0:	e0bff015 	stw	r2,-64(fp)
        a = T1 + T2;
    36a4:	e0fffa17 	ldw	r3,-24(fp)
    36a8:	e0bffb17 	ldw	r2,-20(fp)
    36ac:	1885883a 	add	r2,r3,r2
    36b0:	e0bfef15 	stw	r2,-68(fp)

        j++;
    36b4:	e0bff717 	ldw	r2,-36(fp)
    36b8:	10800044 	addi	r2,r2,1
    36bc:	e0bff715 	stw	r2,-36(fp)
    } while (j < 64);
    36c0:	e0bff717 	ldw	r2,-36(fp)
    36c4:	10801010 	cmplti	r2,r2,64
    36c8:	103f6a1e 	bne	r2,zero,3474 <__alt_mem_epcs_flash_controller+0xfdffa474>

    /* Compute the current intermediate hash value */
    context->state[0] += a;
    36cc:	e0bffe17 	ldw	r2,-8(fp)
    36d0:	10c00017 	ldw	r3,0(r2)
    36d4:	e0bfef17 	ldw	r2,-68(fp)
    36d8:	1887883a 	add	r3,r3,r2
    36dc:	e0bffe17 	ldw	r2,-8(fp)
    36e0:	10c00015 	stw	r3,0(r2)
    context->state[1] += b;
    36e4:	e0bffe17 	ldw	r2,-8(fp)
    36e8:	10c00117 	ldw	r3,4(r2)
    36ec:	e0bff017 	ldw	r2,-64(fp)
    36f0:	1887883a 	add	r3,r3,r2
    36f4:	e0bffe17 	ldw	r2,-8(fp)
    36f8:	10c00115 	stw	r3,4(r2)
    context->state[2] += c;
    36fc:	e0bffe17 	ldw	r2,-8(fp)
    3700:	10c00217 	ldw	r3,8(r2)
    3704:	e0bff117 	ldw	r2,-60(fp)
    3708:	1887883a 	add	r3,r3,r2
    370c:	e0bffe17 	ldw	r2,-8(fp)
    3710:	10c00215 	stw	r3,8(r2)
    context->state[3] += d;
    3714:	e0bffe17 	ldw	r2,-8(fp)
    3718:	10c00317 	ldw	r3,12(r2)
    371c:	e0bff217 	ldw	r2,-56(fp)
    3720:	1887883a 	add	r3,r3,r2
    3724:	e0bffe17 	ldw	r2,-8(fp)
    3728:	10c00315 	stw	r3,12(r2)
    context->state[4] += e;
    372c:	e0bffe17 	ldw	r2,-8(fp)
    3730:	10c00417 	ldw	r3,16(r2)
    3734:	e0bff317 	ldw	r2,-52(fp)
    3738:	1887883a 	add	r3,r3,r2
    373c:	e0bffe17 	ldw	r2,-8(fp)
    3740:	10c00415 	stw	r3,16(r2)
    context->state[5] += f;
    3744:	e0bffe17 	ldw	r2,-8(fp)
    3748:	10c00517 	ldw	r3,20(r2)
    374c:	e0bff417 	ldw	r2,-48(fp)
    3750:	1887883a 	add	r3,r3,r2
    3754:	e0bffe17 	ldw	r2,-8(fp)
    3758:	10c00515 	stw	r3,20(r2)
    context->state[6] += g;
    375c:	e0bffe17 	ldw	r2,-8(fp)
    3760:	10c00617 	ldw	r3,24(r2)
    3764:	e0bff517 	ldw	r2,-44(fp)
    3768:	1887883a 	add	r3,r3,r2
    376c:	e0bffe17 	ldw	r2,-8(fp)
    3770:	10c00615 	stw	r3,24(r2)
    context->state[7] += h;
    3774:	e0bffe17 	ldw	r2,-8(fp)
    3778:	10c00717 	ldw	r3,28(r2)
    377c:	e0bff617 	ldw	r2,-40(fp)
    3780:	1887883a 	add	r3,r3,r2
    3784:	e0bffe17 	ldw	r2,-8(fp)
    3788:	10c00715 	stw	r3,28(r2)

    /* Clean up */
    a = b = c = d = e = f = g = h = T1 = T2 = 0;
    378c:	e03ffb15 	stw	zero,-20(fp)
    3790:	e0bffb17 	ldw	r2,-20(fp)
    3794:	e0bffa15 	stw	r2,-24(fp)
    3798:	e0bffa17 	ldw	r2,-24(fp)
    379c:	e0bff615 	stw	r2,-40(fp)
    37a0:	e0bff617 	ldw	r2,-40(fp)
    37a4:	e0bff515 	stw	r2,-44(fp)
    37a8:	e0bff517 	ldw	r2,-44(fp)
    37ac:	e0bff415 	stw	r2,-48(fp)
    37b0:	e0bff417 	ldw	r2,-48(fp)
    37b4:	e0bff315 	stw	r2,-52(fp)
    37b8:	e0bff317 	ldw	r2,-52(fp)
    37bc:	e0bff215 	stw	r2,-56(fp)
    37c0:	e0bff217 	ldw	r2,-56(fp)
    37c4:	e0bff115 	stw	r2,-60(fp)
    37c8:	e0bff117 	ldw	r2,-60(fp)
    37cc:	e0bff015 	stw	r2,-64(fp)
    37d0:	e0bff017 	ldw	r2,-64(fp)
    37d4:	e0bfef15 	stw	r2,-68(fp)
}
    37d8:	0001883a 	nop
    37dc:	e037883a 	mov	sp,fp
    37e0:	df000017 	ldw	fp,0(sp)
    37e4:	dec00104 	addi	sp,sp,4
    37e8:	f800283a 	ret

000037ec <sha256_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha256_Update(SHA256_CTX* context, const sha2_byte* data, size_t len)
{
    37ec:	defff304 	addi	sp,sp,-52
    37f0:	dfc00c15 	stw	ra,48(sp)
    37f4:	df000b15 	stw	fp,44(sp)
    37f8:	dd400a15 	stw	r21,40(sp)
    37fc:	dd000915 	stw	r20,36(sp)
    3800:	dcc00815 	stw	r19,32(sp)
    3804:	dc800715 	stw	r18,28(sp)
    3808:	dc400615 	stw	r17,24(sp)
    380c:	dc000515 	stw	r16,20(sp)
    3810:	df000b04 	addi	fp,sp,44
    3814:	e13ff715 	stw	r4,-36(fp)
    3818:	e17ff815 	stw	r5,-32(fp)
    381c:	e1bff915 	stw	r6,-28(fp)
    unsigned int freespace, usedspace;

    if (len == 0) {
    3820:	e0bff917 	ldw	r2,-28(fp)
    3824:	10008f26 	beq	r2,zero,3a64 <sha256_Update+0x278>
        /* Calling with no data is valid - we do nothing */
        return;
    }

    usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    3828:	e13ff717 	ldw	r4,-36(fp)
    382c:	20800817 	ldw	r2,32(r4)
    3830:	20c00917 	ldw	r3,36(r4)
    3834:	1808977a 	slli	r4,r3,29
    3838:	100ed0fa 	srli	r7,r2,3
    383c:	21ceb03a 	or	r7,r4,r7
    3840:	1810d0fa 	srli	r8,r3,3
    3844:	3805883a 	mov	r2,r7
    3848:	10800fcc 	andi	r2,r2,63
    384c:	e0bff515 	stw	r2,-44(fp)
    if (usedspace > 0) {
    3850:	e0bff517 	ldw	r2,-44(fp)
    3854:	10006326 	beq	r2,zero,39e4 <sha256_Update+0x1f8>
        /* Calculate how much free space is available in the buffer */
        freespace = SHA256_BLOCK_LENGTH - usedspace;
    3858:	00c01004 	movi	r3,64
    385c:	e0bff517 	ldw	r2,-44(fp)
    3860:	1885c83a 	sub	r2,r3,r2
    3864:	e0bff615 	stw	r2,-40(fp)

        if (len >= freespace) {
    3868:	e0fff917 	ldw	r3,-28(fp)
    386c:	e0bff617 	ldw	r2,-40(fp)
    3870:	18802736 	bltu	r3,r2,3910 <sha256_Update+0x124>
            /* Fill the buffer completely and process it */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, freespace);
    3874:	e0bff517 	ldw	r2,-44(fp)
    3878:	10800a04 	addi	r2,r2,40
    387c:	e0fff717 	ldw	r3,-36(fp)
    3880:	1885883a 	add	r2,r3,r2
    3884:	e1bff617 	ldw	r6,-40(fp)
    3888:	e17ff817 	ldw	r5,-32(fp)
    388c:	1009883a 	mov	r4,r2
    3890:	000a0f40 	call	a0f4 <memcpy>
            context->bitcount += freespace << 3;
    3894:	e0bff717 	ldw	r2,-36(fp)
    3898:	11000817 	ldw	r4,32(r2)
    389c:	11400917 	ldw	r5,36(r2)
    38a0:	e0bff617 	ldw	r2,-40(fp)
    38a4:	100490fa 	slli	r2,r2,3
    38a8:	1029883a 	mov	r20,r2
    38ac:	002b883a 	mov	r21,zero
    38b0:	2505883a 	add	r2,r4,r20
    38b4:	110d803a 	cmpltu	r6,r2,r4
    38b8:	2d47883a 	add	r3,r5,r21
    38bc:	30c9883a 	add	r4,r6,r3
    38c0:	2007883a 	mov	r3,r4
    38c4:	1009883a 	mov	r4,r2
    38c8:	180b883a 	mov	r5,r3
    38cc:	e0bff717 	ldw	r2,-36(fp)
    38d0:	11000815 	stw	r4,32(r2)
    38d4:	11400915 	stw	r5,36(r2)
            len -= freespace;
    38d8:	e0fff917 	ldw	r3,-28(fp)
    38dc:	e0bff617 	ldw	r2,-40(fp)
    38e0:	1885c83a 	sub	r2,r3,r2
    38e4:	e0bff915 	stw	r2,-28(fp)
            data += freespace;
    38e8:	e0fff817 	ldw	r3,-32(fp)
    38ec:	e0bff617 	ldw	r2,-40(fp)
    38f0:	1885883a 	add	r2,r3,r2
    38f4:	e0bff815 	stw	r2,-32(fp)
            sha256_Transform(context, (sha2_word32*)context->buffer);
    38f8:	e0bff717 	ldw	r2,-36(fp)
    38fc:	10800a04 	addi	r2,r2,40
    3900:	100b883a 	mov	r5,r2
    3904:	e13ff717 	ldw	r4,-36(fp)
    3908:	000322c0 	call	322c <sha256_Transform>
    390c:	00003506 	br	39e4 <sha256_Update+0x1f8>
        } else {
            /* The buffer is not yet full */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, len);
    3910:	e0bff517 	ldw	r2,-44(fp)
    3914:	10800a04 	addi	r2,r2,40
    3918:	e0fff717 	ldw	r3,-36(fp)
    391c:	1885883a 	add	r2,r3,r2
    3920:	e1bff917 	ldw	r6,-28(fp)
    3924:	e17ff817 	ldw	r5,-32(fp)
    3928:	1009883a 	mov	r4,r2
    392c:	000a0f40 	call	a0f4 <memcpy>
            context->bitcount += len << 3;
    3930:	e0bff717 	ldw	r2,-36(fp)
    3934:	11000817 	ldw	r4,32(r2)
    3938:	11400917 	ldw	r5,36(r2)
    393c:	e0bff917 	ldw	r2,-28(fp)
    3940:	100490fa 	slli	r2,r2,3
    3944:	1025883a 	mov	r18,r2
    3948:	0027883a 	mov	r19,zero
    394c:	2485883a 	add	r2,r4,r18
    3950:	110d803a 	cmpltu	r6,r2,r4
    3954:	2cc7883a 	add	r3,r5,r19
    3958:	30c9883a 	add	r4,r6,r3
    395c:	2007883a 	mov	r3,r4
    3960:	1009883a 	mov	r4,r2
    3964:	180b883a 	mov	r5,r3
    3968:	e0bff717 	ldw	r2,-36(fp)
    396c:	11000815 	stw	r4,32(r2)
    3970:	11400915 	stw	r5,36(r2)
            /* Clean up: */
            usedspace = freespace = 0;
    3974:	e03ff615 	stw	zero,-40(fp)
    3978:	e0bff617 	ldw	r2,-40(fp)
    397c:	e0bff515 	stw	r2,-44(fp)
            return;
    3980:	00003906 	br	3a68 <sha256_Update+0x27c>
        }
    }
    while (len >= SHA256_BLOCK_LENGTH) {
        /* Process as many complete blocks as we can */
        sha256_Transform(context, (const sha2_word32*)data);
    3984:	e17ff817 	ldw	r5,-32(fp)
    3988:	e13ff717 	ldw	r4,-36(fp)
    398c:	000322c0 	call	322c <sha256_Transform>
        context->bitcount += SHA256_BLOCK_LENGTH << 3;
    3990:	e0bff717 	ldw	r2,-36(fp)
    3994:	11000817 	ldw	r4,32(r2)
    3998:	11400917 	ldw	r5,36(r2)
    399c:	01808004 	movi	r6,512
    39a0:	000f883a 	mov	r7,zero
    39a4:	2185883a 	add	r2,r4,r6
    39a8:	1111803a 	cmpltu	r8,r2,r4
    39ac:	29c7883a 	add	r3,r5,r7
    39b0:	40c9883a 	add	r4,r8,r3
    39b4:	2007883a 	mov	r3,r4
    39b8:	1009883a 	mov	r4,r2
    39bc:	180b883a 	mov	r5,r3
    39c0:	e0bff717 	ldw	r2,-36(fp)
    39c4:	11000815 	stw	r4,32(r2)
    39c8:	11400915 	stw	r5,36(r2)
        len -= SHA256_BLOCK_LENGTH;
    39cc:	e0bff917 	ldw	r2,-28(fp)
    39d0:	10bff004 	addi	r2,r2,-64
    39d4:	e0bff915 	stw	r2,-28(fp)
        data += SHA256_BLOCK_LENGTH;
    39d8:	e0bff817 	ldw	r2,-32(fp)
    39dc:	10801004 	addi	r2,r2,64
    39e0:	e0bff815 	stw	r2,-32(fp)
            /* Clean up: */
            usedspace = freespace = 0;
            return;
        }
    }
    while (len >= SHA256_BLOCK_LENGTH) {
    39e4:	e0bff917 	ldw	r2,-28(fp)
    39e8:	10801028 	cmpgeui	r2,r2,64
    39ec:	103fe51e 	bne	r2,zero,3984 <__alt_mem_epcs_flash_controller+0xfdffa984>
        sha256_Transform(context, (const sha2_word32*)data);
        context->bitcount += SHA256_BLOCK_LENGTH << 3;
        len -= SHA256_BLOCK_LENGTH;
        data += SHA256_BLOCK_LENGTH;
    }
    if (len > 0) {
    39f0:	e0bff917 	ldw	r2,-28(fp)
    39f4:	10001726 	beq	r2,zero,3a54 <sha256_Update+0x268>
        /* There's left-overs, so save 'em */
        MEMCPY_BCOPY(context->buffer, data, len);
    39f8:	e0bff717 	ldw	r2,-36(fp)
    39fc:	10800a04 	addi	r2,r2,40
    3a00:	e1bff917 	ldw	r6,-28(fp)
    3a04:	e17ff817 	ldw	r5,-32(fp)
    3a08:	1009883a 	mov	r4,r2
    3a0c:	000a0f40 	call	a0f4 <memcpy>
        context->bitcount += len << 3;
    3a10:	e0bff717 	ldw	r2,-36(fp)
    3a14:	11000817 	ldw	r4,32(r2)
    3a18:	11400917 	ldw	r5,36(r2)
    3a1c:	e0bff917 	ldw	r2,-28(fp)
    3a20:	100490fa 	slli	r2,r2,3
    3a24:	1021883a 	mov	r16,r2
    3a28:	0023883a 	mov	r17,zero
    3a2c:	2405883a 	add	r2,r4,r16
    3a30:	110d803a 	cmpltu	r6,r2,r4
    3a34:	2c47883a 	add	r3,r5,r17
    3a38:	30c9883a 	add	r4,r6,r3
    3a3c:	2007883a 	mov	r3,r4
    3a40:	1009883a 	mov	r4,r2
    3a44:	180b883a 	mov	r5,r3
    3a48:	e0bff717 	ldw	r2,-36(fp)
    3a4c:	11000815 	stw	r4,32(r2)
    3a50:	11400915 	stw	r5,36(r2)
    }
    /* Clean up: */
    usedspace = freespace = 0;
    3a54:	e03ff615 	stw	zero,-40(fp)
    3a58:	e0bff617 	ldw	r2,-40(fp)
    3a5c:	e0bff515 	stw	r2,-44(fp)
    3a60:	00000106 	br	3a68 <sha256_Update+0x27c>
{
    unsigned int freespace, usedspace;

    if (len == 0) {
        /* Calling with no data is valid - we do nothing */
        return;
    3a64:	0001883a 	nop
        MEMCPY_BCOPY(context->buffer, data, len);
        context->bitcount += len << 3;
    }
    /* Clean up: */
    usedspace = freespace = 0;
}
    3a68:	e6fffa04 	addi	sp,fp,-24
    3a6c:	dfc00717 	ldw	ra,28(sp)
    3a70:	df000617 	ldw	fp,24(sp)
    3a74:	dd400517 	ldw	r21,20(sp)
    3a78:	dd000417 	ldw	r20,16(sp)
    3a7c:	dcc00317 	ldw	r19,12(sp)
    3a80:	dc800217 	ldw	r18,8(sp)
    3a84:	dc400117 	ldw	r17,4(sp)
    3a88:	dc000017 	ldw	r16,0(sp)
    3a8c:	dec00804 	addi	sp,sp,32
    3a90:	f800283a 	ret

00003a94 <sha256_Final>:

void sha256_Final(sha2_byte digest[], SHA256_CTX* context)
{
    3a94:	deffe904 	addi	sp,sp,-92
    3a98:	dfc01615 	stw	ra,88(sp)
    3a9c:	df001515 	stw	fp,84(sp)
    3aa0:	ddc01415 	stw	r23,80(sp)
    3aa4:	dd801315 	stw	r22,76(sp)
    3aa8:	dd401215 	stw	r21,72(sp)
    3aac:	dd001115 	stw	r20,68(sp)
    3ab0:	dcc01015 	stw	r19,64(sp)
    3ab4:	dc800f15 	stw	r18,60(sp)
    3ab8:	dc400e15 	stw	r17,56(sp)
    3abc:	dc000d15 	stw	r16,52(sp)
    3ac0:	df001504 	addi	fp,sp,84
    3ac4:	e13ff215 	stw	r4,-56(fp)
    3ac8:	e17ff315 	stw	r5,-52(fp)
    sha2_word32* d = (sha2_word32*)digest;
    3acc:	e0bff217 	ldw	r2,-56(fp)
    3ad0:	e0bfeb15 	stw	r2,-84(fp)
    unsigned int usedspace;
    sha2_word64* t;

    /* If no digest buffer is passed, we don't bother doing this: */
    if (digest != (sha2_byte*)0) {
    3ad4:	e0bff217 	ldw	r2,-56(fp)
    3ad8:	1000c126 	beq	r2,zero,3de0 <sha256_Final+0x34c>
        usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    3adc:	e13ff317 	ldw	r4,-52(fp)
    3ae0:	20800817 	ldw	r2,32(r4)
    3ae4:	20c00917 	ldw	r3,36(r4)
    3ae8:	1808977a 	slli	r4,r3,29
    3aec:	102cd0fa 	srli	r22,r2,3
    3af0:	25acb03a 	or	r22,r4,r22
    3af4:	182ed0fa 	srli	r23,r3,3
    3af8:	b005883a 	mov	r2,r22
    3afc:	10800fcc 	andi	r2,r2,63
    3b00:	e0bfed15 	stw	r2,-76(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Convert FROM host byte order */
        REVERSE64(context->bitcount, context->bitcount);
    3b04:	e0bff317 	ldw	r2,-52(fp)
    3b08:	10c00817 	ldw	r3,32(r2)
    3b0c:	e0ffee15 	stw	r3,-72(fp)
    3b10:	10800917 	ldw	r2,36(r2)
    3b14:	e0bfef15 	stw	r2,-68(fp)
    3b18:	e0bfef17 	ldw	r2,-68(fp)
    3b1c:	e0bff615 	stw	r2,-40(fp)
    3b20:	e0ffee17 	ldw	r3,-72(fp)
    3b24:	e0fff715 	stw	r3,-36(fp)
    3b28:	e0bff617 	ldw	r2,-40(fp)
    3b2c:	e0bfee15 	stw	r2,-72(fp)
    3b30:	e0fff717 	ldw	r3,-36(fp)
    3b34:	e0ffef15 	stw	r3,-68(fp)
    3b38:	e0ffee17 	ldw	r3,-72(fp)
    3b3c:	00bfc074 	movhi	r2,65281
    3b40:	10bfc004 	addi	r2,r2,-256
    3b44:	18a8703a 	and	r20,r3,r2
    3b48:	e0ffef17 	ldw	r3,-68(fp)
    3b4c:	00bfc074 	movhi	r2,65281
    3b50:	10bfc004 	addi	r2,r2,-256
    3b54:	18aa703a 	and	r21,r3,r2
    3b58:	a804963a 	slli	r2,r21,24
    3b5c:	a018d23a 	srli	r12,r20,8
    3b60:	1318b03a 	or	r12,r2,r12
    3b64:	a81ad23a 	srli	r13,r21,8
    3b68:	e0ffee17 	ldw	r3,-72(fp)
    3b6c:	00803ff4 	movhi	r2,255
    3b70:	10803fc4 	addi	r2,r2,255
    3b74:	18a4703a 	and	r18,r3,r2
    3b78:	e0ffef17 	ldw	r3,-68(fp)
    3b7c:	00803ff4 	movhi	r2,255
    3b80:	10803fc4 	addi	r2,r2,255
    3b84:	18a6703a 	and	r19,r3,r2
    3b88:	9004d63a 	srli	r2,r18,24
    3b8c:	9816923a 	slli	r11,r19,8
    3b90:	12d6b03a 	or	r11,r2,r11
    3b94:	9014923a 	slli	r10,r18,8
    3b98:	6284b03a 	or	r2,r12,r10
    3b9c:	e0bfee15 	stw	r2,-72(fp)
    3ba0:	6ac4b03a 	or	r2,r13,r11
    3ba4:	e0bfef15 	stw	r2,-68(fp)
    3ba8:	e0bfee17 	ldw	r2,-72(fp)
    3bac:	143fffec 	andhi	r16,r2,65535
    3bb0:	e0bfef17 	ldw	r2,-68(fp)
    3bb4:	147fffec 	andhi	r17,r2,65535
    3bb8:	8804943a 	slli	r2,r17,16
    3bbc:	8010d43a 	srli	r8,r16,16
    3bc0:	1210b03a 	or	r8,r2,r8
    3bc4:	8812d43a 	srli	r9,r17,16
    3bc8:	e0bfee17 	ldw	r2,-72(fp)
    3bcc:	13bfffcc 	andi	r14,r2,65535
    3bd0:	e0bfef17 	ldw	r2,-68(fp)
    3bd4:	13ffffcc 	andi	r15,r2,65535
    3bd8:	7004d43a 	srli	r2,r14,16
    3bdc:	780e943a 	slli	r7,r15,16
    3be0:	11ceb03a 	or	r7,r2,r7
    3be4:	700c943a 	slli	r6,r14,16
    3be8:	4184b03a 	or	r2,r8,r6
    3bec:	e0bff415 	stw	r2,-48(fp)
    3bf0:	49c6b03a 	or	r3,r9,r7
    3bf4:	e0fff515 	stw	r3,-44(fp)
    3bf8:	e0bff317 	ldw	r2,-52(fp)
    3bfc:	e0fff417 	ldw	r3,-48(fp)
    3c00:	10c00815 	stw	r3,32(r2)
    3c04:	e0fff517 	ldw	r3,-44(fp)
    3c08:	10c00915 	stw	r3,36(r2)
#endif
        if (usedspace > 0) {
    3c0c:	e0bfed17 	ldw	r2,-76(fp)
    3c10:	10002f26 	beq	r2,zero,3cd0 <sha256_Final+0x23c>
            /* Begin padding with a 1 bit: */
            context->buffer[usedspace++] = 0x80;
    3c14:	e0bfed17 	ldw	r2,-76(fp)
    3c18:	10c00044 	addi	r3,r2,1
    3c1c:	e0ffed15 	stw	r3,-76(fp)
    3c20:	e0fff317 	ldw	r3,-52(fp)
    3c24:	1885883a 	add	r2,r3,r2
    3c28:	10800a04 	addi	r2,r2,40
    3c2c:	00ffe004 	movi	r3,-128
    3c30:	10c00005 	stb	r3,0(r2)

            if (usedspace <= SHA256_SHORT_BLOCK_LENGTH) {
    3c34:	e0bfed17 	ldw	r2,-76(fp)
    3c38:	10800e68 	cmpgeui	r2,r2,57
    3c3c:	10000b1e 	bne	r2,zero,3c6c <sha256_Final+0x1d8>
                /* Set-up for the last transform: */
                MEMSET_BZERO(&context->buffer[usedspace], SHA256_SHORT_BLOCK_LENGTH - usedspace);
    3c40:	e0bfed17 	ldw	r2,-76(fp)
    3c44:	10800a04 	addi	r2,r2,40
    3c48:	e0fff317 	ldw	r3,-52(fp)
    3c4c:	1889883a 	add	r4,r3,r2
    3c50:	00c00e04 	movi	r3,56
    3c54:	e0bfed17 	ldw	r2,-76(fp)
    3c58:	1885c83a 	sub	r2,r3,r2
    3c5c:	100d883a 	mov	r6,r2
    3c60:	000b883a 	mov	r5,zero
    3c64:	000a11c0 	call	a11c <memset>
    3c68:	00002206 	br	3cf4 <sha256_Final+0x260>
            } else {
                if (usedspace < SHA256_BLOCK_LENGTH) {
    3c6c:	e0bfed17 	ldw	r2,-76(fp)
    3c70:	10801028 	cmpgeui	r2,r2,64
    3c74:	10000a1e 	bne	r2,zero,3ca0 <sha256_Final+0x20c>
                    MEMSET_BZERO(&context->buffer[usedspace], SHA256_BLOCK_LENGTH - usedspace);
    3c78:	e0bfed17 	ldw	r2,-76(fp)
    3c7c:	10800a04 	addi	r2,r2,40
    3c80:	e0fff317 	ldw	r3,-52(fp)
    3c84:	1889883a 	add	r4,r3,r2
    3c88:	00c01004 	movi	r3,64
    3c8c:	e0bfed17 	ldw	r2,-76(fp)
    3c90:	1885c83a 	sub	r2,r3,r2
    3c94:	100d883a 	mov	r6,r2
    3c98:	000b883a 	mov	r5,zero
    3c9c:	000a11c0 	call	a11c <memset>
                }
                /* Do second-to-last transform: */
                sha256_Transform(context, (sha2_word32*)context->buffer);
    3ca0:	e0bff317 	ldw	r2,-52(fp)
    3ca4:	10800a04 	addi	r2,r2,40
    3ca8:	100b883a 	mov	r5,r2
    3cac:	e13ff317 	ldw	r4,-52(fp)
    3cb0:	000322c0 	call	322c <sha256_Transform>

                /* And set-up for the last transform: */
                MEMSET_BZERO(context->buffer, SHA256_SHORT_BLOCK_LENGTH);
    3cb4:	e0bff317 	ldw	r2,-52(fp)
    3cb8:	10800a04 	addi	r2,r2,40
    3cbc:	01800e04 	movi	r6,56
    3cc0:	000b883a 	mov	r5,zero
    3cc4:	1009883a 	mov	r4,r2
    3cc8:	000a11c0 	call	a11c <memset>
    3ccc:	00000906 	br	3cf4 <sha256_Final+0x260>
            }
        } else {
            /* Set-up for the last transform: */
            MEMSET_BZERO(context->buffer, SHA256_SHORT_BLOCK_LENGTH);
    3cd0:	e0bff317 	ldw	r2,-52(fp)
    3cd4:	10800a04 	addi	r2,r2,40
    3cd8:	01800e04 	movi	r6,56
    3cdc:	000b883a 	mov	r5,zero
    3ce0:	1009883a 	mov	r4,r2
    3ce4:	000a11c0 	call	a11c <memset>

            /* Begin padding with a 1 bit: */
            *context->buffer = 0x80;
    3ce8:	e0bff317 	ldw	r2,-52(fp)
    3cec:	00ffe004 	movi	r3,-128
    3cf0:	10c00a05 	stb	r3,40(r2)
        }
        /* Set the bit count: */
        t = (sha2_word64*)&context->buffer[SHA256_SHORT_BLOCK_LENGTH];
    3cf4:	e0bff317 	ldw	r2,-52(fp)
    3cf8:	10801804 	addi	r2,r2,96
    3cfc:	e0bff015 	stw	r2,-64(fp)
        *t = context->bitcount;
    3d00:	e13ff317 	ldw	r4,-52(fp)
    3d04:	20800817 	ldw	r2,32(r4)
    3d08:	20c00917 	ldw	r3,36(r4)
    3d0c:	e13ff017 	ldw	r4,-64(fp)
    3d10:	20800015 	stw	r2,0(r4)
    3d14:	20c00115 	stw	r3,4(r4)

        /* Final transform: */
        sha256_Transform(context, (sha2_word32*)context->buffer);
    3d18:	e0bff317 	ldw	r2,-52(fp)
    3d1c:	10800a04 	addi	r2,r2,40
    3d20:	100b883a 	mov	r5,r2
    3d24:	e13ff317 	ldw	r4,-52(fp)
    3d28:	000322c0 	call	322c <sha256_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
    3d2c:	e03fec15 	stw	zero,-80(fp)
    3d30:	00002806 	br	3dd4 <sha256_Final+0x340>
                REVERSE32(context->state[j], context->state[j]);
    3d34:	e0fff317 	ldw	r3,-52(fp)
    3d38:	e0bfec17 	ldw	r2,-80(fp)
    3d3c:	1085883a 	add	r2,r2,r2
    3d40:	1085883a 	add	r2,r2,r2
    3d44:	1885883a 	add	r2,r3,r2
    3d48:	10800017 	ldw	r2,0(r2)
    3d4c:	e0bff115 	stw	r2,-60(fp)
    3d50:	e0bff117 	ldw	r2,-60(fp)
    3d54:	1004143a 	roli	r2,r2,16
    3d58:	e0bff115 	stw	r2,-60(fp)
    3d5c:	e0fff117 	ldw	r3,-60(fp)
    3d60:	00bfc074 	movhi	r2,65281
    3d64:	10bfc004 	addi	r2,r2,-256
    3d68:	1884703a 	and	r2,r3,r2
    3d6c:	1006d23a 	srli	r3,r2,8
    3d70:	e13ff117 	ldw	r4,-60(fp)
    3d74:	00803ff4 	movhi	r2,255
    3d78:	10803fc4 	addi	r2,r2,255
    3d7c:	2084703a 	and	r2,r4,r2
    3d80:	1004923a 	slli	r2,r2,8
    3d84:	1886b03a 	or	r3,r3,r2
    3d88:	e13ff317 	ldw	r4,-52(fp)
    3d8c:	e0bfec17 	ldw	r2,-80(fp)
    3d90:	1085883a 	add	r2,r2,r2
    3d94:	1085883a 	add	r2,r2,r2
    3d98:	2085883a 	add	r2,r4,r2
    3d9c:	10c00015 	stw	r3,0(r2)
                *d++ = context->state[j];
    3da0:	e0bfeb17 	ldw	r2,-84(fp)
    3da4:	10c00104 	addi	r3,r2,4
    3da8:	e0ffeb15 	stw	r3,-84(fp)
    3dac:	e13ff317 	ldw	r4,-52(fp)
    3db0:	e0ffec17 	ldw	r3,-80(fp)
    3db4:	18c7883a 	add	r3,r3,r3
    3db8:	18c7883a 	add	r3,r3,r3
    3dbc:	20c7883a 	add	r3,r4,r3
    3dc0:	18c00017 	ldw	r3,0(r3)
    3dc4:	10c00015 	stw	r3,0(r2)

#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
    3dc8:	e0bfec17 	ldw	r2,-80(fp)
    3dcc:	10800044 	addi	r2,r2,1
    3dd0:	e0bfec15 	stw	r2,-80(fp)
    3dd4:	e0bfec17 	ldw	r2,-80(fp)
    3dd8:	10800210 	cmplti	r2,r2,8
    3ddc:	103fd51e 	bne	r2,zero,3d34 <__alt_mem_epcs_flash_controller+0xfdffad34>
        MEMCPY_BCOPY(d, context->state, SHA256_DIGEST_LENGTH);
#endif
    }

    /* Clean up state data: */
    MEMSET_BZERO(context, sizeof(SHA256_CTX));
    3de0:	01801a04 	movi	r6,104
    3de4:	000b883a 	mov	r5,zero
    3de8:	e13ff317 	ldw	r4,-52(fp)
    3dec:	000a11c0 	call	a11c <memset>
    usedspace = 0;
    3df0:	e03fed15 	stw	zero,-76(fp)
}
    3df4:	0001883a 	nop
    3df8:	e6fff804 	addi	sp,fp,-32
    3dfc:	dfc00917 	ldw	ra,36(sp)
    3e00:	df000817 	ldw	fp,32(sp)
    3e04:	ddc00717 	ldw	r23,28(sp)
    3e08:	dd800617 	ldw	r22,24(sp)
    3e0c:	dd400517 	ldw	r21,20(sp)
    3e10:	dd000417 	ldw	r20,16(sp)
    3e14:	dcc00317 	ldw	r19,12(sp)
    3e18:	dc800217 	ldw	r18,8(sp)
    3e1c:	dc400117 	ldw	r17,4(sp)
    3e20:	dc000017 	ldw	r16,0(sp)
    3e24:	dec00a04 	addi	sp,sp,40
    3e28:	f800283a 	ret

00003e2c <sha256_Raw>:

void sha256_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA256_DIGEST_LENGTH])
{
    3e2c:	deffe104 	addi	sp,sp,-124
    3e30:	dfc01e15 	stw	ra,120(sp)
    3e34:	df001d15 	stw	fp,116(sp)
    3e38:	df001d04 	addi	fp,sp,116
    3e3c:	e13ffd15 	stw	r4,-12(fp)
    3e40:	e17ffe15 	stw	r5,-8(fp)
    3e44:	e1bfff15 	stw	r6,-4(fp)
    SHA256_CTX context;
    sha256_Init(&context);
    3e48:	e13fe304 	addi	r4,fp,-116
    3e4c:	00031b80 	call	31b8 <sha256_Init>
    sha256_Update(&context, data, len);
    3e50:	e1bffe17 	ldw	r6,-8(fp)
    3e54:	e17ffd17 	ldw	r5,-12(fp)
    3e58:	e13fe304 	addi	r4,fp,-116
    3e5c:	00037ec0 	call	37ec <sha256_Update>
    sha256_Final(digest, &context);
    3e60:	e17fe304 	addi	r5,fp,-116
    3e64:	e13fff17 	ldw	r4,-4(fp)
    3e68:	0003a940 	call	3a94 <sha256_Final>
}
    3e6c:	0001883a 	nop
    3e70:	e037883a 	mov	sp,fp
    3e74:	dfc00117 	ldw	ra,4(sp)
    3e78:	df000017 	ldw	fp,0(sp)
    3e7c:	dec00204 	addi	sp,sp,8
    3e80:	f800283a 	ret

00003e84 <sha512_Init>:


/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context)
{
    3e84:	defffd04 	addi	sp,sp,-12
    3e88:	dfc00215 	stw	ra,8(sp)
    3e8c:	df000115 	stw	fp,4(sp)
    3e90:	df000104 	addi	fp,sp,4
    3e94:	e13fff15 	stw	r4,-4(fp)
    if (context == (SHA512_CTX*)0) {
    3e98:	e0bfff17 	ldw	r2,-4(fp)
    3e9c:	10001626 	beq	r2,zero,3ef8 <sha512_Init+0x74>
        return;
    }
    MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
    3ea0:	e0bfff17 	ldw	r2,-4(fp)
    3ea4:	01801004 	movi	r6,64
    3ea8:	01400074 	movhi	r5,1
    3eac:	295c3e04 	addi	r5,r5,28920
    3eb0:	1009883a 	mov	r4,r2
    3eb4:	000a0f40 	call	a0f4 <memcpy>
    MEMSET_BZERO(context->buffer, SHA512_BLOCK_LENGTH);
    3eb8:	e0bfff17 	ldw	r2,-4(fp)
    3ebc:	10801404 	addi	r2,r2,80
    3ec0:	01802004 	movi	r6,128
    3ec4:	000b883a 	mov	r5,zero
    3ec8:	1009883a 	mov	r4,r2
    3ecc:	000a11c0 	call	a11c <memset>
    context->bitcount[0] = context->bitcount[1] = 0;
    3ed0:	e0bfff17 	ldw	r2,-4(fp)
    3ed4:	10001215 	stw	zero,72(r2)
    3ed8:	10001315 	stw	zero,76(r2)
    3edc:	e13fff17 	ldw	r4,-4(fp)
    3ee0:	20801217 	ldw	r2,72(r4)
    3ee4:	20c01317 	ldw	r3,76(r4)
    3ee8:	e13fff17 	ldw	r4,-4(fp)
    3eec:	20801015 	stw	r2,64(r4)
    3ef0:	20c01115 	stw	r3,68(r4)
    3ef4:	00000106 	br	3efc <sha512_Init+0x78>

/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context)
{
    if (context == (SHA512_CTX*)0) {
        return;
    3ef8:	0001883a 	nop
    }
    MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
    MEMSET_BZERO(context->buffer, SHA512_BLOCK_LENGTH);
    context->bitcount[0] = context->bitcount[1] = 0;
}
    3efc:	e037883a 	mov	sp,fp
    3f00:	dfc00117 	ldw	ra,4(sp)
    3f04:	df000017 	ldw	fp,0(sp)
    3f08:	dec00204 	addi	sp,sp,8
    3f0c:	f800283a 	ret

00003f10 <sha512_Transform>:
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha512_Transform(SHA512_CTX* context, const sha2_word64* data)
{
    3f10:	deff7804 	addi	sp,sp,-544
    3f14:	df008715 	stw	fp,540(sp)
    3f18:	dd808615 	stw	r22,536(sp)
    3f1c:	dd408515 	stw	r21,532(sp)
    3f20:	dd008415 	stw	r20,528(sp)
    3f24:	dcc08315 	stw	r19,524(sp)
    3f28:	dc808215 	stw	r18,520(sp)
    3f2c:	dc408115 	stw	r17,516(sp)
    3f30:	dc008015 	stw	r16,512(sp)
    3f34:	df008704 	addi	fp,sp,540
    3f38:	e13f9515 	stw	r4,-428(fp)
    3f3c:	e17f9615 	stw	r5,-424(fp)
    sha2_word64 a, b, c, d, e, f, g, h, s0, s1;
    sha2_word64 T1, T2, *W512 = (sha2_word64*)context->buffer;
    3f40:	e0bf9517 	ldw	r2,-428(fp)
    3f44:	10801404 	addi	r2,r2,80
    3f48:	e0bf8a15 	stw	r2,-472(fp)
    int j;

    /* Initialize registers with the prev. intermediate value */
    a = context->state[0];
    3f4c:	e0ff9517 	ldw	r3,-428(fp)
    3f50:	18800017 	ldw	r2,0(r3)
    3f54:	e0bf7915 	stw	r2,-540(fp)
    3f58:	18800117 	ldw	r2,4(r3)
    3f5c:	e0bf7a15 	stw	r2,-536(fp)
    b = context->state[1];
    3f60:	e0ff9517 	ldw	r3,-428(fp)
    3f64:	18800217 	ldw	r2,8(r3)
    3f68:	e0bf7b15 	stw	r2,-532(fp)
    3f6c:	18800317 	ldw	r2,12(r3)
    3f70:	e0bf7c15 	stw	r2,-528(fp)
    c = context->state[2];
    3f74:	e0ff9517 	ldw	r3,-428(fp)
    3f78:	18800417 	ldw	r2,16(r3)
    3f7c:	e0bf7d15 	stw	r2,-524(fp)
    3f80:	18800517 	ldw	r2,20(r3)
    3f84:	e0bf7e15 	stw	r2,-520(fp)
    d = context->state[3];
    3f88:	e0ff9517 	ldw	r3,-428(fp)
    3f8c:	18800617 	ldw	r2,24(r3)
    3f90:	e0bf7f15 	stw	r2,-516(fp)
    3f94:	18800717 	ldw	r2,28(r3)
    3f98:	e0bf8015 	stw	r2,-512(fp)
    e = context->state[4];
    3f9c:	e0ff9517 	ldw	r3,-428(fp)
    3fa0:	18800817 	ldw	r2,32(r3)
    3fa4:	e0bf8115 	stw	r2,-508(fp)
    3fa8:	18800917 	ldw	r2,36(r3)
    3fac:	e0bf8215 	stw	r2,-504(fp)
    f = context->state[5];
    3fb0:	e0ff9517 	ldw	r3,-428(fp)
    3fb4:	18800a17 	ldw	r2,40(r3)
    3fb8:	e0bf8315 	stw	r2,-500(fp)
    3fbc:	18800b17 	ldw	r2,44(r3)
    3fc0:	e0bf8415 	stw	r2,-496(fp)
    g = context->state[6];
    3fc4:	e0ff9517 	ldw	r3,-428(fp)
    3fc8:	18800c17 	ldw	r2,48(r3)
    3fcc:	e0bf8515 	stw	r2,-492(fp)
    3fd0:	18800d17 	ldw	r2,52(r3)
    3fd4:	e0bf8615 	stw	r2,-488(fp)
    h = context->state[7];
    3fd8:	e0ff9517 	ldw	r3,-428(fp)
    3fdc:	18800e17 	ldw	r2,56(r3)
    3fe0:	e0bf8715 	stw	r2,-484(fp)
    3fe4:	18800f17 	ldw	r2,60(r3)
    3fe8:	e0bf8815 	stw	r2,-480(fp)

    j = 0;
    3fec:	e03f8915 	stw	zero,-476(fp)
    do {
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Convert TO host byte order */
        REVERSE64(*data++, W512[j]);
    3ff0:	e0ff9617 	ldw	r3,-424(fp)
    3ff4:	18800204 	addi	r2,r3,8
    3ff8:	e0bf9615 	stw	r2,-424(fp)
    3ffc:	18800017 	ldw	r2,0(r3)
    4000:	e0bf8b15 	stw	r2,-468(fp)
    4004:	18800117 	ldw	r2,4(r3)
    4008:	e0bf8c15 	stw	r2,-464(fp)
    400c:	e0bf8c17 	ldw	r2,-464(fp)
    4010:	e0bff715 	stw	r2,-36(fp)
    4014:	e0ff8b17 	ldw	r3,-468(fp)
    4018:	e0fff815 	stw	r3,-32(fp)
    401c:	e13ff717 	ldw	r4,-36(fp)
    4020:	e13f8b15 	stw	r4,-468(fp)
    4024:	e17ff817 	ldw	r5,-32(fp)
    4028:	e17f8c15 	stw	r5,-464(fp)
    402c:	e0ff8b17 	ldw	r3,-468(fp)
    4030:	00bfc074 	movhi	r2,65281
    4034:	10bfc004 	addi	r2,r2,-256
    4038:	1884703a 	and	r2,r3,r2
    403c:	e0bf9715 	stw	r2,-420(fp)
    4040:	e0ff8c17 	ldw	r3,-464(fp)
    4044:	00bfc074 	movhi	r2,65281
    4048:	10bfc004 	addi	r2,r2,-256
    404c:	1884703a 	and	r2,r3,r2
    4050:	e0bf9815 	stw	r2,-416(fp)
    4054:	e1bf9817 	ldw	r6,-416(fp)
    4058:	3004963a 	slli	r2,r6,24
    405c:	e1ff9717 	ldw	r7,-420(fp)
    4060:	380ed23a 	srli	r7,r7,8
    4064:	e1ff9915 	stw	r7,-412(fp)
    4068:	e0ff9917 	ldw	r3,-412(fp)
    406c:	10c4b03a 	or	r2,r2,r3
    4070:	e0bf9915 	stw	r2,-412(fp)
    4074:	e13f9817 	ldw	r4,-416(fp)
    4078:	2008d23a 	srli	r4,r4,8
    407c:	e13f9a15 	stw	r4,-408(fp)
    4080:	e0ff8b17 	ldw	r3,-468(fp)
    4084:	00803ff4 	movhi	r2,255
    4088:	10803fc4 	addi	r2,r2,255
    408c:	1884703a 	and	r2,r3,r2
    4090:	e0bf9b15 	stw	r2,-404(fp)
    4094:	e0ff8c17 	ldw	r3,-464(fp)
    4098:	00803ff4 	movhi	r2,255
    409c:	10803fc4 	addi	r2,r2,255
    40a0:	1884703a 	and	r2,r3,r2
    40a4:	e0bf9c15 	stw	r2,-400(fp)
    40a8:	e17f9b17 	ldw	r5,-404(fp)
    40ac:	2804d63a 	srli	r2,r5,24
    40b0:	e1bf9c17 	ldw	r6,-400(fp)
    40b4:	300c923a 	slli	r6,r6,8
    40b8:	e1bf9e15 	stw	r6,-392(fp)
    40bc:	e1ff9e17 	ldw	r7,-392(fp)
    40c0:	11c4b03a 	or	r2,r2,r7
    40c4:	e0bf9e15 	stw	r2,-392(fp)
    40c8:	e0bf9b17 	ldw	r2,-404(fp)
    40cc:	1004923a 	slli	r2,r2,8
    40d0:	e0bf9d15 	stw	r2,-396(fp)
    40d4:	e0ff9917 	ldw	r3,-412(fp)
    40d8:	e13f9d17 	ldw	r4,-396(fp)
    40dc:	1904b03a 	or	r2,r3,r4
    40e0:	e0bf8b15 	stw	r2,-468(fp)
    40e4:	e17f9a17 	ldw	r5,-408(fp)
    40e8:	e1bf9e17 	ldw	r6,-392(fp)
    40ec:	2984b03a 	or	r2,r5,r6
    40f0:	e0bf8c15 	stw	r2,-464(fp)
    40f4:	e0bf8917 	ldw	r2,-476(fp)
    40f8:	100690fa 	slli	r3,r2,3
    40fc:	e0bf8a17 	ldw	r2,-472(fp)
    4100:	10c7883a 	add	r3,r2,r3
    4104:	e0bf8b17 	ldw	r2,-468(fp)
    4108:	10bfffec 	andhi	r2,r2,65535
    410c:	e0bf9f15 	stw	r2,-388(fp)
    4110:	e0bf8c17 	ldw	r2,-464(fp)
    4114:	10bfffec 	andhi	r2,r2,65535
    4118:	e0bfa015 	stw	r2,-384(fp)
    411c:	e1ffa017 	ldw	r7,-384(fp)
    4120:	3804943a 	slli	r2,r7,16
    4124:	e13f9f17 	ldw	r4,-388(fp)
    4128:	2008d43a 	srli	r4,r4,16
    412c:	e13fa115 	stw	r4,-380(fp)
    4130:	e17fa117 	ldw	r5,-380(fp)
    4134:	1144b03a 	or	r2,r2,r5
    4138:	e0bfa115 	stw	r2,-380(fp)
    413c:	e1bfa017 	ldw	r6,-384(fp)
    4140:	300cd43a 	srli	r6,r6,16
    4144:	e1bfa215 	stw	r6,-376(fp)
    4148:	e0bf8b17 	ldw	r2,-468(fp)
    414c:	10bfffcc 	andi	r2,r2,65535
    4150:	e0bfa315 	stw	r2,-372(fp)
    4154:	e0bf8c17 	ldw	r2,-464(fp)
    4158:	10bfffcc 	andi	r2,r2,65535
    415c:	e0bfa415 	stw	r2,-368(fp)
    4160:	e1ffa317 	ldw	r7,-372(fp)
    4164:	3804d43a 	srli	r2,r7,16
    4168:	e13fa417 	ldw	r4,-368(fp)
    416c:	2008943a 	slli	r4,r4,16
    4170:	e13fa615 	stw	r4,-360(fp)
    4174:	e17fa617 	ldw	r5,-360(fp)
    4178:	1144b03a 	or	r2,r2,r5
    417c:	e0bfa615 	stw	r2,-360(fp)
    4180:	e1bfa317 	ldw	r6,-372(fp)
    4184:	300c943a 	slli	r6,r6,16
    4188:	e1bfa515 	stw	r6,-364(fp)
    418c:	e1ffa117 	ldw	r7,-380(fp)
    4190:	e0bfa517 	ldw	r2,-364(fp)
    4194:	388eb03a 	or	r7,r7,r2
    4198:	e1ffa715 	stw	r7,-356(fp)
    419c:	e13fa217 	ldw	r4,-376(fp)
    41a0:	e17fa617 	ldw	r5,-360(fp)
    41a4:	2148b03a 	or	r4,r4,r5
    41a8:	e13fa815 	stw	r4,-352(fp)
    41ac:	e1bfa717 	ldw	r6,-356(fp)
    41b0:	19800015 	stw	r6,0(r3)
    41b4:	e1ffa817 	ldw	r7,-352(fp)
    41b8:	19c00115 	stw	r7,4(r3)
        /* Apply the SHA-512 compression function to update a..h */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + W512[j];
    41bc:	e0bf8217 	ldw	r2,-504(fp)
    41c0:	100694ba 	slli	r3,r2,18
    41c4:	e0bf8117 	ldw	r2,-508(fp)
    41c8:	1004d3ba 	srli	r2,r2,14
    41cc:	1884b03a 	or	r2,r3,r2
    41d0:	e0bfa915 	stw	r2,-348(fp)
    41d4:	e0bf8117 	ldw	r2,-508(fp)
    41d8:	100694ba 	slli	r3,r2,18
    41dc:	e0bf8217 	ldw	r2,-504(fp)
    41e0:	1004d3ba 	srli	r2,r2,14
    41e4:	1884b03a 	or	r2,r3,r2
    41e8:	e0bfaa15 	stw	r2,-344(fp)
    41ec:	e0bf8217 	ldw	r2,-504(fp)
    41f0:	100693ba 	slli	r3,r2,14
    41f4:	e0bf8117 	ldw	r2,-508(fp)
    41f8:	1004d4ba 	srli	r2,r2,18
    41fc:	1884b03a 	or	r2,r3,r2
    4200:	e0bfab15 	stw	r2,-340(fp)
    4204:	e0bf8117 	ldw	r2,-508(fp)
    4208:	100693ba 	slli	r3,r2,14
    420c:	e0bf8217 	ldw	r2,-504(fp)
    4210:	1004d4ba 	srli	r2,r2,18
    4214:	1884b03a 	or	r2,r3,r2
    4218:	e0bfac15 	stw	r2,-336(fp)
    421c:	e0bfa917 	ldw	r2,-348(fp)
    4220:	e0ffab17 	ldw	r3,-340(fp)
    4224:	10c4f03a 	xor	r2,r2,r3
    4228:	e0bfad15 	stw	r2,-332(fp)
    422c:	e13faa17 	ldw	r4,-344(fp)
    4230:	e17fac17 	ldw	r5,-336(fp)
    4234:	2148f03a 	xor	r4,r4,r5
    4238:	e13fae15 	stw	r4,-328(fp)
    423c:	e0bf8117 	ldw	r2,-508(fp)
    4240:	1006d27a 	srli	r3,r2,9
    4244:	e0bf8217 	ldw	r2,-504(fp)
    4248:	100495fa 	slli	r2,r2,23
    424c:	1884b03a 	or	r2,r3,r2
    4250:	e0bfb015 	stw	r2,-320(fp)
    4254:	e0bf8217 	ldw	r2,-504(fp)
    4258:	1006d27a 	srli	r3,r2,9
    425c:	e0bf8117 	ldw	r2,-508(fp)
    4260:	100495fa 	slli	r2,r2,23
    4264:	1884b03a 	or	r2,r3,r2
    4268:	e0bfaf15 	stw	r2,-324(fp)
    426c:	e1bfad17 	ldw	r6,-332(fp)
    4270:	e1ffaf17 	ldw	r7,-324(fp)
    4274:	31eaf03a 	xor	r21,r6,r7
    4278:	e0bfae17 	ldw	r2,-328(fp)
    427c:	e0ffb017 	ldw	r3,-320(fp)
    4280:	10ecf03a 	xor	r22,r2,r3
    4284:	e0bf8717 	ldw	r2,-484(fp)
    4288:	e0ff8817 	ldw	r3,-480(fp)
    428c:	a889883a 	add	r4,r21,r2
    4290:	254d803a 	cmpltu	r6,r4,r21
    4294:	b0cb883a 	add	r5,r22,r3
    4298:	3145883a 	add	r2,r6,r5
    429c:	100b883a 	mov	r5,r2
    42a0:	200d883a 	mov	r6,r4
    42a4:	280f883a 	mov	r7,r5
    42a8:	e0ff8117 	ldw	r3,-508(fp)
    42ac:	e0bf8317 	ldw	r2,-500(fp)
    42b0:	1884703a 	and	r2,r3,r2
    42b4:	e0bfb115 	stw	r2,-316(fp)
    42b8:	e0ff8217 	ldw	r3,-504(fp)
    42bc:	e0bf8417 	ldw	r2,-496(fp)
    42c0:	1884703a 	and	r2,r3,r2
    42c4:	e0bfb215 	stw	r2,-312(fp)
    42c8:	e0bf8117 	ldw	r2,-508(fp)
    42cc:	0084303a 	nor	r2,zero,r2
    42d0:	e0bfb315 	stw	r2,-308(fp)
    42d4:	e0bf8217 	ldw	r2,-504(fp)
    42d8:	0084303a 	nor	r2,zero,r2
    42dc:	e0bfb415 	stw	r2,-304(fp)
    42e0:	e0bf8517 	ldw	r2,-492(fp)
    42e4:	e13fb317 	ldw	r4,-308(fp)
    42e8:	1104703a 	and	r2,r2,r4
    42ec:	e0bfb515 	stw	r2,-300(fp)
    42f0:	e0bf8617 	ldw	r2,-488(fp)
    42f4:	e17fb417 	ldw	r5,-304(fp)
    42f8:	1144703a 	and	r2,r2,r5
    42fc:	e0bfb615 	stw	r2,-296(fp)
    4300:	e0bfb117 	ldw	r2,-316(fp)
    4304:	e0ffb517 	ldw	r3,-300(fp)
    4308:	10c4f03a 	xor	r2,r2,r3
    430c:	e0bfb715 	stw	r2,-292(fp)
    4310:	e13fb217 	ldw	r4,-312(fp)
    4314:	e17fb617 	ldw	r5,-296(fp)
    4318:	2148f03a 	xor	r4,r4,r5
    431c:	e13fb815 	stw	r4,-288(fp)
    4320:	e13fb717 	ldw	r4,-292(fp)
    4324:	3105883a 	add	r2,r6,r4
    4328:	1189803a 	cmpltu	r4,r2,r6
    432c:	e17fb817 	ldw	r5,-288(fp)
    4330:	3947883a 	add	r3,r7,r5
    4334:	20c9883a 	add	r4,r4,r3
    4338:	2007883a 	mov	r3,r4
    433c:	100f883a 	mov	r7,r2
    4340:	1811883a 	mov	r8,r3
    4344:	00c00074 	movhi	r3,1
    4348:	18db9e04 	addi	r3,r3,28280
    434c:	e0bf8917 	ldw	r2,-476(fp)
    4350:	100490fa 	slli	r2,r2,3
    4354:	1889883a 	add	r4,r3,r2
    4358:	20800017 	ldw	r2,0(r4)
    435c:	20c00117 	ldw	r3,4(r4)
    4360:	3889883a 	add	r4,r7,r2
    4364:	21cd803a 	cmpltu	r6,r4,r7
    4368:	40cb883a 	add	r5,r8,r3
    436c:	3145883a 	add	r2,r6,r5
    4370:	100b883a 	mov	r5,r2
    4374:	200f883a 	mov	r7,r4
    4378:	2811883a 	mov	r8,r5
    437c:	e0bf8917 	ldw	r2,-476(fp)
    4380:	100690fa 	slli	r3,r2,3
    4384:	e0bf8a17 	ldw	r2,-472(fp)
    4388:	10c5883a 	add	r2,r2,r3
    438c:	11000017 	ldw	r4,0(r2)
    4390:	11400117 	ldw	r5,4(r2)
    4394:	3905883a 	add	r2,r7,r4
    4398:	11cd803a 	cmpltu	r6,r2,r7
    439c:	4147883a 	add	r3,r8,r5
    43a0:	30c9883a 	add	r4,r6,r3
    43a4:	2007883a 	mov	r3,r4
    43a8:	e0bf8d15 	stw	r2,-460(fp)
    43ac:	e0ff8e15 	stw	r3,-456(fp)
#else  /* BYTE_ORDER == LITTLE_ENDIAN */
        /* Apply the SHA-512 compression function to update a..h with copy */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + (W512[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
        T2 = Sigma0_512(a) + Maj(a, b, c);
    43b0:	e0bf7a17 	ldw	r2,-536(fp)
    43b4:	1006913a 	slli	r3,r2,4
    43b8:	e0bf7917 	ldw	r2,-540(fp)
    43bc:	1004d73a 	srli	r2,r2,28
    43c0:	1884b03a 	or	r2,r3,r2
    43c4:	e0bfb915 	stw	r2,-284(fp)
    43c8:	e0bf7917 	ldw	r2,-540(fp)
    43cc:	1006913a 	slli	r3,r2,4
    43d0:	e0bf7a17 	ldw	r2,-536(fp)
    43d4:	1004d73a 	srli	r2,r2,28
    43d8:	1884b03a 	or	r2,r3,r2
    43dc:	e0bfba15 	stw	r2,-280(fp)
    43e0:	e0bf7917 	ldw	r2,-540(fp)
    43e4:	1006d0ba 	srli	r3,r2,2
    43e8:	e0bf7a17 	ldw	r2,-536(fp)
    43ec:	100497ba 	slli	r2,r2,30
    43f0:	1884b03a 	or	r2,r3,r2
    43f4:	e0bfbc15 	stw	r2,-272(fp)
    43f8:	e0bf7a17 	ldw	r2,-536(fp)
    43fc:	1006d0ba 	srli	r3,r2,2
    4400:	e0bf7917 	ldw	r2,-540(fp)
    4404:	100497ba 	slli	r2,r2,30
    4408:	1884b03a 	or	r2,r3,r2
    440c:	e0bfbb15 	stw	r2,-276(fp)
    4410:	e1bfb917 	ldw	r6,-284(fp)
    4414:	e1ffbb17 	ldw	r7,-276(fp)
    4418:	31ccf03a 	xor	r6,r6,r7
    441c:	e1bfbd15 	stw	r6,-268(fp)
    4420:	e0bfba17 	ldw	r2,-280(fp)
    4424:	e0ffbc17 	ldw	r3,-272(fp)
    4428:	10c4f03a 	xor	r2,r2,r3
    442c:	e0bfbe15 	stw	r2,-264(fp)
    4430:	e0bf7917 	ldw	r2,-540(fp)
    4434:	1006d1fa 	srli	r3,r2,7
    4438:	e0bf7a17 	ldw	r2,-536(fp)
    443c:	1004967a 	slli	r2,r2,25
    4440:	1884b03a 	or	r2,r3,r2
    4444:	e0bfc015 	stw	r2,-256(fp)
    4448:	e0bf7a17 	ldw	r2,-536(fp)
    444c:	1006d1fa 	srli	r3,r2,7
    4450:	e0bf7917 	ldw	r2,-540(fp)
    4454:	1004967a 	slli	r2,r2,25
    4458:	1884b03a 	or	r2,r3,r2
    445c:	e0bfbf15 	stw	r2,-260(fp)
    4460:	e13fbd17 	ldw	r4,-268(fp)
    4464:	e17fbf17 	ldw	r5,-260(fp)
    4468:	2152f03a 	xor	r9,r4,r5
    446c:	e1bfbe17 	ldw	r6,-264(fp)
    4470:	e1ffc017 	ldw	r7,-256(fp)
    4474:	31d4f03a 	xor	r10,r6,r7
    4478:	e0ff7917 	ldw	r3,-540(fp)
    447c:	e0bf7b17 	ldw	r2,-532(fp)
    4480:	18a6703a 	and	r19,r3,r2
    4484:	e0ff7a17 	ldw	r3,-536(fp)
    4488:	e0bf7c17 	ldw	r2,-528(fp)
    448c:	18a8703a 	and	r20,r3,r2
    4490:	e0ff7917 	ldw	r3,-540(fp)
    4494:	e0bf7d17 	ldw	r2,-524(fp)
    4498:	18a2703a 	and	r17,r3,r2
    449c:	e0ff7a17 	ldw	r3,-536(fp)
    44a0:	e0bf7e17 	ldw	r2,-520(fp)
    44a4:	18a4703a 	and	r18,r3,r2
    44a8:	9c5ef03a 	xor	r15,r19,r17
    44ac:	a4a0f03a 	xor	r16,r20,r18
    44b0:	e0ff7b17 	ldw	r3,-532(fp)
    44b4:	e0bf7d17 	ldw	r2,-524(fp)
    44b8:	189a703a 	and	r13,r3,r2
    44bc:	e0ff7c17 	ldw	r3,-528(fp)
    44c0:	e0bf7e17 	ldw	r2,-520(fp)
    44c4:	189c703a 	and	r14,r3,r2
    44c8:	7b56f03a 	xor	r11,r15,r13
    44cc:	8398f03a 	xor	r12,r16,r14
    44d0:	4ac5883a 	add	r2,r9,r11
    44d4:	1249803a 	cmpltu	r4,r2,r9
    44d8:	5307883a 	add	r3,r10,r12
    44dc:	20c9883a 	add	r4,r4,r3
    44e0:	2007883a 	mov	r3,r4
    44e4:	e0bf8f15 	stw	r2,-452(fp)
    44e8:	e0ff9015 	stw	r3,-448(fp)
        h = g;
    44ec:	e0bf8517 	ldw	r2,-492(fp)
    44f0:	e0bf8715 	stw	r2,-484(fp)
    44f4:	e0bf8617 	ldw	r2,-488(fp)
    44f8:	e0bf8815 	stw	r2,-480(fp)
        g = f;
    44fc:	e0bf8317 	ldw	r2,-500(fp)
    4500:	e0bf8515 	stw	r2,-492(fp)
    4504:	e0bf8417 	ldw	r2,-496(fp)
    4508:	e0bf8615 	stw	r2,-488(fp)
        f = e;
    450c:	e0bf8117 	ldw	r2,-508(fp)
    4510:	e0bf8315 	stw	r2,-500(fp)
    4514:	e0bf8217 	ldw	r2,-504(fp)
    4518:	e0bf8415 	stw	r2,-496(fp)
        e = d + T1;
    451c:	e1ff7f17 	ldw	r7,-516(fp)
    4520:	e23f8017 	ldw	r8,-512(fp)
    4524:	e13f8d17 	ldw	r4,-460(fp)
    4528:	e17f8e17 	ldw	r5,-456(fp)
    452c:	3905883a 	add	r2,r7,r4
    4530:	11cd803a 	cmpltu	r6,r2,r7
    4534:	4147883a 	add	r3,r8,r5
    4538:	30c9883a 	add	r4,r6,r3
    453c:	2007883a 	mov	r3,r4
    4540:	e0bf8115 	stw	r2,-508(fp)
    4544:	e0ff8215 	stw	r3,-504(fp)
        d = c;
    4548:	e0bf7d17 	ldw	r2,-524(fp)
    454c:	e0bf7f15 	stw	r2,-516(fp)
    4550:	e0bf7e17 	ldw	r2,-520(fp)
    4554:	e0bf8015 	stw	r2,-512(fp)
        c = b;
    4558:	e0bf7b17 	ldw	r2,-532(fp)
    455c:	e0bf7d15 	stw	r2,-524(fp)
    4560:	e0bf7c17 	ldw	r2,-528(fp)
    4564:	e0bf7e15 	stw	r2,-520(fp)
        b = a;
    4568:	e0bf7917 	ldw	r2,-540(fp)
    456c:	e0bf7b15 	stw	r2,-532(fp)
    4570:	e0bf7a17 	ldw	r2,-536(fp)
    4574:	e0bf7c15 	stw	r2,-528(fp)
        a = T1 + T2;
    4578:	e1ff8d17 	ldw	r7,-460(fp)
    457c:	e23f8e17 	ldw	r8,-456(fp)
    4580:	e13f8f17 	ldw	r4,-452(fp)
    4584:	e17f9017 	ldw	r5,-448(fp)
    4588:	3905883a 	add	r2,r7,r4
    458c:	11cd803a 	cmpltu	r6,r2,r7
    4590:	4147883a 	add	r3,r8,r5
    4594:	30c9883a 	add	r4,r6,r3
    4598:	2007883a 	mov	r3,r4
    459c:	e0bf7915 	stw	r2,-540(fp)
    45a0:	e0ff7a15 	stw	r3,-536(fp)

        j++;
    45a4:	e0bf8917 	ldw	r2,-476(fp)
    45a8:	10800044 	addi	r2,r2,1
    45ac:	e0bf8915 	stw	r2,-476(fp)
    } while (j < 16);
    45b0:	e0bf8917 	ldw	r2,-476(fp)
    45b4:	10800410 	cmplti	r2,r2,16
    45b8:	103e8d1e 	bne	r2,zero,3ff0 <__alt_mem_epcs_flash_controller+0xfdffaff0>

    do {
        /* Part of the message block expansion: */
        s0 = W512[(j + 1) & 0x0f];
    45bc:	e0bf8917 	ldw	r2,-476(fp)
    45c0:	10800044 	addi	r2,r2,1
    45c4:	108003cc 	andi	r2,r2,15
    45c8:	100690fa 	slli	r3,r2,3
    45cc:	e0bf8a17 	ldw	r2,-472(fp)
    45d0:	10c7883a 	add	r3,r2,r3
    45d4:	18800017 	ldw	r2,0(r3)
    45d8:	e0bf9115 	stw	r2,-444(fp)
    45dc:	18800117 	ldw	r2,4(r3)
    45e0:	e0bf9215 	stw	r2,-440(fp)
        s0 = sigma0_512(s0);
    45e4:	e0bf9217 	ldw	r2,-440(fp)
    45e8:	100697fa 	slli	r3,r2,31
    45ec:	e0bf9117 	ldw	r2,-444(fp)
    45f0:	1004d07a 	srli	r2,r2,1
    45f4:	1884b03a 	or	r2,r3,r2
    45f8:	e0bfc115 	stw	r2,-252(fp)
    45fc:	e0bf9117 	ldw	r2,-444(fp)
    4600:	100697fa 	slli	r3,r2,31
    4604:	e0bf9217 	ldw	r2,-440(fp)
    4608:	1004d07a 	srli	r2,r2,1
    460c:	1884b03a 	or	r2,r3,r2
    4610:	e0bfc215 	stw	r2,-248(fp)
    4614:	e0bf9217 	ldw	r2,-440(fp)
    4618:	1006963a 	slli	r3,r2,24
    461c:	e0bf9117 	ldw	r2,-444(fp)
    4620:	1004d23a 	srli	r2,r2,8
    4624:	1884b03a 	or	r2,r3,r2
    4628:	e0bfc315 	stw	r2,-244(fp)
    462c:	e0bf9117 	ldw	r2,-444(fp)
    4630:	1006963a 	slli	r3,r2,24
    4634:	e0bf9217 	ldw	r2,-440(fp)
    4638:	1004d23a 	srli	r2,r2,8
    463c:	1884b03a 	or	r2,r3,r2
    4640:	e0bfc415 	stw	r2,-240(fp)
    4644:	e0bfc117 	ldw	r2,-252(fp)
    4648:	e0ffc317 	ldw	r3,-244(fp)
    464c:	10c4f03a 	xor	r2,r2,r3
    4650:	e0bfc515 	stw	r2,-236(fp)
    4654:	e13fc217 	ldw	r4,-248(fp)
    4658:	e17fc417 	ldw	r5,-240(fp)
    465c:	2148f03a 	xor	r4,r4,r5
    4660:	e13fc615 	stw	r4,-232(fp)
    4664:	e0bf9217 	ldw	r2,-440(fp)
    4668:	1006967a 	slli	r3,r2,25
    466c:	e0bf9117 	ldw	r2,-444(fp)
    4670:	1004d1fa 	srli	r2,r2,7
    4674:	e0bfc715 	stw	r2,-228(fp)
    4678:	e1bfc717 	ldw	r6,-228(fp)
    467c:	1986b03a 	or	r3,r3,r6
    4680:	e0ffc715 	stw	r3,-228(fp)
    4684:	e0bf9217 	ldw	r2,-440(fp)
    4688:	1004d1fa 	srli	r2,r2,7
    468c:	e0bfc815 	stw	r2,-224(fp)
    4690:	e1ffc517 	ldw	r7,-236(fp)
    4694:	e0ffc717 	ldw	r3,-228(fp)
    4698:	38c4f03a 	xor	r2,r7,r3
    469c:	e0bf9115 	stw	r2,-444(fp)
    46a0:	e13fc617 	ldw	r4,-232(fp)
    46a4:	e17fc817 	ldw	r5,-224(fp)
    46a8:	2144f03a 	xor	r2,r4,r5
    46ac:	e0bf9215 	stw	r2,-440(fp)
        s1 = W512[(j + 14) & 0x0f];
    46b0:	e0bf8917 	ldw	r2,-476(fp)
    46b4:	10800384 	addi	r2,r2,14
    46b8:	108003cc 	andi	r2,r2,15
    46bc:	100690fa 	slli	r3,r2,3
    46c0:	e0bf8a17 	ldw	r2,-472(fp)
    46c4:	10c7883a 	add	r3,r2,r3
    46c8:	18800017 	ldw	r2,0(r3)
    46cc:	e0bf9315 	stw	r2,-436(fp)
    46d0:	18800117 	ldw	r2,4(r3)
    46d4:	e0bf9415 	stw	r2,-432(fp)
        s1 = sigma1_512(s1);
    46d8:	e0bf9417 	ldw	r2,-432(fp)
    46dc:	1006937a 	slli	r3,r2,13
    46e0:	e0bf9317 	ldw	r2,-436(fp)
    46e4:	1004d4fa 	srli	r2,r2,19
    46e8:	1884b03a 	or	r2,r3,r2
    46ec:	e0bfc915 	stw	r2,-220(fp)
    46f0:	e0bf9317 	ldw	r2,-436(fp)
    46f4:	1006937a 	slli	r3,r2,13
    46f8:	e0bf9417 	ldw	r2,-432(fp)
    46fc:	1004d4fa 	srli	r2,r2,19
    4700:	1884b03a 	or	r2,r3,r2
    4704:	e0bfca15 	stw	r2,-216(fp)
    4708:	e0bf9317 	ldw	r2,-436(fp)
    470c:	1006d77a 	srli	r3,r2,29
    4710:	e0bf9417 	ldw	r2,-432(fp)
    4714:	100490fa 	slli	r2,r2,3
    4718:	1884b03a 	or	r2,r3,r2
    471c:	e0bfcc15 	stw	r2,-208(fp)
    4720:	e0bf9417 	ldw	r2,-432(fp)
    4724:	1006d77a 	srli	r3,r2,29
    4728:	e0bf9317 	ldw	r2,-436(fp)
    472c:	100490fa 	slli	r2,r2,3
    4730:	1884b03a 	or	r2,r3,r2
    4734:	e0bfcb15 	stw	r2,-212(fp)
    4738:	e1bfc917 	ldw	r6,-220(fp)
    473c:	e1ffcb17 	ldw	r7,-212(fp)
    4740:	31ccf03a 	xor	r6,r6,r7
    4744:	e1bfcd15 	stw	r6,-204(fp)
    4748:	e0bfca17 	ldw	r2,-216(fp)
    474c:	e0ffcc17 	ldw	r3,-208(fp)
    4750:	10c4f03a 	xor	r2,r2,r3
    4754:	e0bfce15 	stw	r2,-200(fp)
    4758:	e0bf9417 	ldw	r2,-432(fp)
    475c:	100696ba 	slli	r3,r2,26
    4760:	e0bf9317 	ldw	r2,-436(fp)
    4764:	1004d1ba 	srli	r2,r2,6
    4768:	e0bfcf15 	stw	r2,-196(fp)
    476c:	e13fcf17 	ldw	r4,-196(fp)
    4770:	1906b03a 	or	r3,r3,r4
    4774:	e0ffcf15 	stw	r3,-196(fp)
    4778:	e0bf9417 	ldw	r2,-432(fp)
    477c:	1004d1ba 	srli	r2,r2,6
    4780:	e0bfd015 	stw	r2,-192(fp)
    4784:	e17fcd17 	ldw	r5,-204(fp)
    4788:	e1bfcf17 	ldw	r6,-196(fp)
    478c:	2984f03a 	xor	r2,r5,r6
    4790:	e0bf9315 	stw	r2,-436(fp)
    4794:	e1ffce17 	ldw	r7,-200(fp)
    4798:	e0ffd017 	ldw	r3,-192(fp)
    479c:	38c4f03a 	xor	r2,r7,r3
    47a0:	e0bf9415 	stw	r2,-432(fp)

        /* Apply the SHA-512 compression function to update a..h */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    47a4:	e0bf8217 	ldw	r2,-504(fp)
    47a8:	100694ba 	slli	r3,r2,18
    47ac:	e0bf8117 	ldw	r2,-508(fp)
    47b0:	1004d3ba 	srli	r2,r2,14
    47b4:	1884b03a 	or	r2,r3,r2
    47b8:	e0bfd115 	stw	r2,-188(fp)
    47bc:	e0bf8117 	ldw	r2,-508(fp)
    47c0:	100694ba 	slli	r3,r2,18
    47c4:	e0bf8217 	ldw	r2,-504(fp)
    47c8:	1004d3ba 	srli	r2,r2,14
    47cc:	1884b03a 	or	r2,r3,r2
    47d0:	e0bfd215 	stw	r2,-184(fp)
    47d4:	e0bf8217 	ldw	r2,-504(fp)
    47d8:	100693ba 	slli	r3,r2,14
    47dc:	e0bf8117 	ldw	r2,-508(fp)
    47e0:	1004d4ba 	srli	r2,r2,18
    47e4:	1884b03a 	or	r2,r3,r2
    47e8:	e0bfd315 	stw	r2,-180(fp)
    47ec:	e0bf8117 	ldw	r2,-508(fp)
    47f0:	100693ba 	slli	r3,r2,14
    47f4:	e0bf8217 	ldw	r2,-504(fp)
    47f8:	1004d4ba 	srli	r2,r2,18
    47fc:	1884b03a 	or	r2,r3,r2
    4800:	e0bfd415 	stw	r2,-176(fp)
    4804:	e13fd117 	ldw	r4,-188(fp)
    4808:	e17fd317 	ldw	r5,-180(fp)
    480c:	2148f03a 	xor	r4,r4,r5
    4810:	e13fd515 	stw	r4,-172(fp)
    4814:	e1bfd217 	ldw	r6,-184(fp)
    4818:	e1ffd417 	ldw	r7,-176(fp)
    481c:	31ccf03a 	xor	r6,r6,r7
    4820:	e1bfd615 	stw	r6,-168(fp)
    4824:	e0bf8117 	ldw	r2,-508(fp)
    4828:	1006d27a 	srli	r3,r2,9
    482c:	e0bf8217 	ldw	r2,-504(fp)
    4830:	100495fa 	slli	r2,r2,23
    4834:	1884b03a 	or	r2,r3,r2
    4838:	e0bfd815 	stw	r2,-160(fp)
    483c:	e0bf8217 	ldw	r2,-504(fp)
    4840:	1006d27a 	srli	r3,r2,9
    4844:	e0bf8117 	ldw	r2,-508(fp)
    4848:	100495fa 	slli	r2,r2,23
    484c:	1884b03a 	or	r2,r3,r2
    4850:	e0bfd715 	stw	r2,-164(fp)
    4854:	e0bfd517 	ldw	r2,-172(fp)
    4858:	e0ffd717 	ldw	r3,-164(fp)
    485c:	10c4f03a 	xor	r2,r2,r3
    4860:	e0bfd915 	stw	r2,-156(fp)
    4864:	e13fd617 	ldw	r4,-168(fp)
    4868:	e17fd817 	ldw	r5,-160(fp)
    486c:	2148f03a 	xor	r4,r4,r5
    4870:	e13fda15 	stw	r4,-152(fp)
    4874:	e0bf8717 	ldw	r2,-484(fp)
    4878:	e0ff8817 	ldw	r3,-480(fp)
    487c:	e1bfd917 	ldw	r6,-156(fp)
    4880:	3089883a 	add	r4,r6,r2
    4884:	e1ffd917 	ldw	r7,-156(fp)
    4888:	21cd803a 	cmpltu	r6,r4,r7
    488c:	e1ffda17 	ldw	r7,-152(fp)
    4890:	38cb883a 	add	r5,r7,r3
    4894:	3145883a 	add	r2,r6,r5
    4898:	100b883a 	mov	r5,r2
    489c:	200d883a 	mov	r6,r4
    48a0:	280f883a 	mov	r7,r5
    48a4:	e0ff8117 	ldw	r3,-508(fp)
    48a8:	e0bf8317 	ldw	r2,-500(fp)
    48ac:	1884703a 	and	r2,r3,r2
    48b0:	e0bfdb15 	stw	r2,-148(fp)
    48b4:	e0ff8217 	ldw	r3,-504(fp)
    48b8:	e0bf8417 	ldw	r2,-496(fp)
    48bc:	1884703a 	and	r2,r3,r2
    48c0:	e0bfdc15 	stw	r2,-144(fp)
    48c4:	e0bf8117 	ldw	r2,-508(fp)
    48c8:	0084303a 	nor	r2,zero,r2
    48cc:	e0bfdd15 	stw	r2,-140(fp)
    48d0:	e0bf8217 	ldw	r2,-504(fp)
    48d4:	0084303a 	nor	r2,zero,r2
    48d8:	e0bfde15 	stw	r2,-136(fp)
    48dc:	e0bf8517 	ldw	r2,-492(fp)
    48e0:	e0ffdd17 	ldw	r3,-140(fp)
    48e4:	10c4703a 	and	r2,r2,r3
    48e8:	e0bfdf15 	stw	r2,-132(fp)
    48ec:	e0bf8617 	ldw	r2,-488(fp)
    48f0:	e13fde17 	ldw	r4,-136(fp)
    48f4:	1104703a 	and	r2,r2,r4
    48f8:	e0bfe015 	stw	r2,-128(fp)
    48fc:	e17fdb17 	ldw	r5,-148(fp)
    4900:	e0bfdf17 	ldw	r2,-132(fp)
    4904:	288af03a 	xor	r5,r5,r2
    4908:	e17fe115 	stw	r5,-124(fp)
    490c:	e0ffdc17 	ldw	r3,-144(fp)
    4910:	e13fe017 	ldw	r4,-128(fp)
    4914:	1906f03a 	xor	r3,r3,r4
    4918:	e0ffe215 	stw	r3,-120(fp)
    491c:	e17fe117 	ldw	r5,-124(fp)
    4920:	3145883a 	add	r2,r6,r5
    4924:	1189803a 	cmpltu	r4,r2,r6
    4928:	e17fe217 	ldw	r5,-120(fp)
    492c:	3947883a 	add	r3,r7,r5
    4930:	20c9883a 	add	r4,r4,r3
    4934:	2007883a 	mov	r3,r4
    4938:	100f883a 	mov	r7,r2
    493c:	1811883a 	mov	r8,r3
    4940:	00c00074 	movhi	r3,1
    4944:	18db9e04 	addi	r3,r3,28280
    4948:	e0bf8917 	ldw	r2,-476(fp)
    494c:	100490fa 	slli	r2,r2,3
    4950:	1889883a 	add	r4,r3,r2
    4954:	20800017 	ldw	r2,0(r4)
    4958:	20c00117 	ldw	r3,4(r4)
    495c:	3889883a 	add	r4,r7,r2
    4960:	21cd803a 	cmpltu	r6,r4,r7
    4964:	40cb883a 	add	r5,r8,r3
    4968:	3145883a 	add	r2,r6,r5
    496c:	100b883a 	mov	r5,r2
    4970:	2019883a 	mov	r12,r4
    4974:	281b883a 	mov	r13,r5
             (W512[j & 0x0f] += s1 + W512[(j + 9) & 0x0f] + s0);
    4978:	e0bf8917 	ldw	r2,-476(fp)
    497c:	108003cc 	andi	r2,r2,15
    4980:	100690fa 	slli	r3,r2,3
    4984:	e0bf8a17 	ldw	r2,-472(fp)
    4988:	10d7883a 	add	r11,r2,r3
    498c:	e0bf8917 	ldw	r2,-476(fp)
    4990:	108003cc 	andi	r2,r2,15
    4994:	100690fa 	slli	r3,r2,3
    4998:	e0bf8a17 	ldw	r2,-472(fp)
    499c:	10c5883a 	add	r2,r2,r3
    49a0:	12400017 	ldw	r9,0(r2)
    49a4:	12800117 	ldw	r10,4(r2)
    49a8:	e0bf8917 	ldw	r2,-476(fp)
    49ac:	10800244 	addi	r2,r2,9
    49b0:	108003cc 	andi	r2,r2,15
    49b4:	100690fa 	slli	r3,r2,3
    49b8:	e0bf8a17 	ldw	r2,-472(fp)
    49bc:	10c5883a 	add	r2,r2,r3
    49c0:	11c00017 	ldw	r7,0(r2)
    49c4:	12000117 	ldw	r8,4(r2)
    49c8:	e0bf9317 	ldw	r2,-436(fp)
    49cc:	e0ff9417 	ldw	r3,-432(fp)
    49d0:	3889883a 	add	r4,r7,r2
    49d4:	21cd803a 	cmpltu	r6,r4,r7
    49d8:	40cb883a 	add	r5,r8,r3
    49dc:	3145883a 	add	r2,r6,r5
    49e0:	100b883a 	mov	r5,r2
    49e4:	200f883a 	mov	r7,r4
    49e8:	2811883a 	mov	r8,r5
    49ec:	e0bf9117 	ldw	r2,-444(fp)
    49f0:	e0ff9217 	ldw	r3,-440(fp)
    49f4:	3889883a 	add	r4,r7,r2
    49f8:	21cd803a 	cmpltu	r6,r4,r7
    49fc:	40cb883a 	add	r5,r8,r3
    4a00:	3145883a 	add	r2,r6,r5
    4a04:	100b883a 	mov	r5,r2
    4a08:	200d883a 	mov	r6,r4
    4a0c:	280f883a 	mov	r7,r5
    4a10:	4989883a 	add	r4,r9,r6
    4a14:	2245803a 	cmpltu	r2,r4,r9
    4a18:	51cb883a 	add	r5,r10,r7
    4a1c:	1145883a 	add	r2,r2,r5
    4a20:	100b883a 	mov	r5,r2
    4a24:	2005883a 	mov	r2,r4
    4a28:	2807883a 	mov	r3,r5
    4a2c:	58800015 	stw	r2,0(r11)
    4a30:	58c00115 	stw	r3,4(r11)
    4a34:	59000017 	ldw	r4,0(r11)
    4a38:	59400117 	ldw	r5,4(r11)
        s0 = sigma0_512(s0);
        s1 = W512[(j + 14) & 0x0f];
        s1 = sigma1_512(s1);

        /* Apply the SHA-512 compression function to update a..h */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    4a3c:	6105883a 	add	r2,r12,r4
    4a40:	130d803a 	cmpltu	r6,r2,r12
    4a44:	6947883a 	add	r3,r13,r5
    4a48:	30c9883a 	add	r4,r6,r3
    4a4c:	2007883a 	mov	r3,r4
    4a50:	e0bf8d15 	stw	r2,-460(fp)
    4a54:	e0ff8e15 	stw	r3,-456(fp)
             (W512[j & 0x0f] += s1 + W512[(j + 9) & 0x0f] + s0);
        T2 = Sigma0_512(a) + Maj(a, b, c);
    4a58:	e0bf7a17 	ldw	r2,-536(fp)
    4a5c:	1006913a 	slli	r3,r2,4
    4a60:	e0bf7917 	ldw	r2,-540(fp)
    4a64:	1004d73a 	srli	r2,r2,28
    4a68:	1884b03a 	or	r2,r3,r2
    4a6c:	e0bfe315 	stw	r2,-116(fp)
    4a70:	e0bf7917 	ldw	r2,-540(fp)
    4a74:	1006913a 	slli	r3,r2,4
    4a78:	e0bf7a17 	ldw	r2,-536(fp)
    4a7c:	1004d73a 	srli	r2,r2,28
    4a80:	1884b03a 	or	r2,r3,r2
    4a84:	e0bfe415 	stw	r2,-112(fp)
    4a88:	e0bf7917 	ldw	r2,-540(fp)
    4a8c:	1006d0ba 	srli	r3,r2,2
    4a90:	e0bf7a17 	ldw	r2,-536(fp)
    4a94:	100497ba 	slli	r2,r2,30
    4a98:	1884b03a 	or	r2,r3,r2
    4a9c:	e0bfe615 	stw	r2,-104(fp)
    4aa0:	e0bf7a17 	ldw	r2,-536(fp)
    4aa4:	1006d0ba 	srli	r3,r2,2
    4aa8:	e0bf7917 	ldw	r2,-540(fp)
    4aac:	100497ba 	slli	r2,r2,30
    4ab0:	1884b03a 	or	r2,r3,r2
    4ab4:	e0bfe515 	stw	r2,-108(fp)
    4ab8:	e1bfe317 	ldw	r6,-116(fp)
    4abc:	e1ffe517 	ldw	r7,-108(fp)
    4ac0:	31ccf03a 	xor	r6,r6,r7
    4ac4:	e1bfe715 	stw	r6,-100(fp)
    4ac8:	e0bfe417 	ldw	r2,-112(fp)
    4acc:	e0ffe617 	ldw	r3,-104(fp)
    4ad0:	10c4f03a 	xor	r2,r2,r3
    4ad4:	e0bfe815 	stw	r2,-96(fp)
    4ad8:	e0bf7917 	ldw	r2,-540(fp)
    4adc:	1006d1fa 	srli	r3,r2,7
    4ae0:	e0bf7a17 	ldw	r2,-536(fp)
    4ae4:	1004967a 	slli	r2,r2,25
    4ae8:	1884b03a 	or	r2,r3,r2
    4aec:	e0bfea15 	stw	r2,-88(fp)
    4af0:	e0bf7a17 	ldw	r2,-536(fp)
    4af4:	1006d1fa 	srli	r3,r2,7
    4af8:	e0bf7917 	ldw	r2,-540(fp)
    4afc:	1004967a 	slli	r2,r2,25
    4b00:	1884b03a 	or	r2,r3,r2
    4b04:	e0bfe915 	stw	r2,-92(fp)
    4b08:	e13fe717 	ldw	r4,-100(fp)
    4b0c:	e17fe917 	ldw	r5,-92(fp)
    4b10:	2148f03a 	xor	r4,r4,r5
    4b14:	e13feb15 	stw	r4,-84(fp)
    4b18:	e1bfe817 	ldw	r6,-96(fp)
    4b1c:	e1ffea17 	ldw	r7,-88(fp)
    4b20:	31ccf03a 	xor	r6,r6,r7
    4b24:	e1bfec15 	stw	r6,-80(fp)
    4b28:	e0ff7917 	ldw	r3,-540(fp)
    4b2c:	e0bf7b17 	ldw	r2,-532(fp)
    4b30:	1884703a 	and	r2,r3,r2
    4b34:	e0bfed15 	stw	r2,-76(fp)
    4b38:	e0ff7a17 	ldw	r3,-536(fp)
    4b3c:	e0bf7c17 	ldw	r2,-528(fp)
    4b40:	1884703a 	and	r2,r3,r2
    4b44:	e0bfee15 	stw	r2,-72(fp)
    4b48:	e0ff7917 	ldw	r3,-540(fp)
    4b4c:	e0bf7d17 	ldw	r2,-524(fp)
    4b50:	1884703a 	and	r2,r3,r2
    4b54:	e0bfef15 	stw	r2,-68(fp)
    4b58:	e0ff7a17 	ldw	r3,-536(fp)
    4b5c:	e0bf7e17 	ldw	r2,-520(fp)
    4b60:	1884703a 	and	r2,r3,r2
    4b64:	e0bff015 	stw	r2,-64(fp)
    4b68:	e0bfed17 	ldw	r2,-76(fp)
    4b6c:	e0ffef17 	ldw	r3,-68(fp)
    4b70:	10c4f03a 	xor	r2,r2,r3
    4b74:	e0bff115 	stw	r2,-60(fp)
    4b78:	e13fee17 	ldw	r4,-72(fp)
    4b7c:	e17ff017 	ldw	r5,-64(fp)
    4b80:	2148f03a 	xor	r4,r4,r5
    4b84:	e13ff215 	stw	r4,-56(fp)
    4b88:	e0ff7b17 	ldw	r3,-532(fp)
    4b8c:	e0bf7d17 	ldw	r2,-524(fp)
    4b90:	1884703a 	and	r2,r3,r2
    4b94:	e0bff315 	stw	r2,-52(fp)
    4b98:	e0ff7c17 	ldw	r3,-528(fp)
    4b9c:	e0bf7e17 	ldw	r2,-520(fp)
    4ba0:	1884703a 	and	r2,r3,r2
    4ba4:	e0bff415 	stw	r2,-48(fp)
    4ba8:	e1bff117 	ldw	r6,-60(fp)
    4bac:	e1fff317 	ldw	r7,-52(fp)
    4bb0:	31ccf03a 	xor	r6,r6,r7
    4bb4:	e1bff515 	stw	r6,-44(fp)
    4bb8:	e0bff217 	ldw	r2,-56(fp)
    4bbc:	e0fff417 	ldw	r3,-48(fp)
    4bc0:	10c4f03a 	xor	r2,r2,r3
    4bc4:	e0bff615 	stw	r2,-40(fp)
    4bc8:	e13feb17 	ldw	r4,-84(fp)
    4bcc:	e17ff517 	ldw	r5,-44(fp)
    4bd0:	2145883a 	add	r2,r4,r5
    4bd4:	e1bfeb17 	ldw	r6,-84(fp)
    4bd8:	1189803a 	cmpltu	r4,r2,r6
    4bdc:	e1ffec17 	ldw	r7,-80(fp)
    4be0:	e17ff617 	ldw	r5,-40(fp)
    4be4:	3947883a 	add	r3,r7,r5
    4be8:	20c9883a 	add	r4,r4,r3
    4bec:	2007883a 	mov	r3,r4
    4bf0:	e0bf8f15 	stw	r2,-452(fp)
    4bf4:	e0ff9015 	stw	r3,-448(fp)
        h = g;
    4bf8:	e0bf8517 	ldw	r2,-492(fp)
    4bfc:	e0bf8715 	stw	r2,-484(fp)
    4c00:	e0bf8617 	ldw	r2,-488(fp)
    4c04:	e0bf8815 	stw	r2,-480(fp)
        g = f;
    4c08:	e0bf8317 	ldw	r2,-500(fp)
    4c0c:	e0bf8515 	stw	r2,-492(fp)
    4c10:	e0bf8417 	ldw	r2,-496(fp)
    4c14:	e0bf8615 	stw	r2,-488(fp)
        f = e;
    4c18:	e0bf8117 	ldw	r2,-508(fp)
    4c1c:	e0bf8315 	stw	r2,-500(fp)
    4c20:	e0bf8217 	ldw	r2,-504(fp)
    4c24:	e0bf8415 	stw	r2,-496(fp)
        e = d + T1;
    4c28:	e1ff7f17 	ldw	r7,-516(fp)
    4c2c:	e23f8017 	ldw	r8,-512(fp)
    4c30:	e13f8d17 	ldw	r4,-460(fp)
    4c34:	e17f8e17 	ldw	r5,-456(fp)
    4c38:	3905883a 	add	r2,r7,r4
    4c3c:	11cd803a 	cmpltu	r6,r2,r7
    4c40:	4147883a 	add	r3,r8,r5
    4c44:	30c9883a 	add	r4,r6,r3
    4c48:	2007883a 	mov	r3,r4
    4c4c:	e0bf8115 	stw	r2,-508(fp)
    4c50:	e0ff8215 	stw	r3,-504(fp)
        d = c;
    4c54:	e0bf7d17 	ldw	r2,-524(fp)
    4c58:	e0bf7f15 	stw	r2,-516(fp)
    4c5c:	e0bf7e17 	ldw	r2,-520(fp)
    4c60:	e0bf8015 	stw	r2,-512(fp)
        c = b;
    4c64:	e0bf7b17 	ldw	r2,-532(fp)
    4c68:	e0bf7d15 	stw	r2,-524(fp)
    4c6c:	e0bf7c17 	ldw	r2,-528(fp)
    4c70:	e0bf7e15 	stw	r2,-520(fp)
        b = a;
    4c74:	e0bf7917 	ldw	r2,-540(fp)
    4c78:	e0bf7b15 	stw	r2,-532(fp)
    4c7c:	e0bf7a17 	ldw	r2,-536(fp)
    4c80:	e0bf7c15 	stw	r2,-528(fp)
        a = T1 + T2;
    4c84:	e1ff8d17 	ldw	r7,-460(fp)
    4c88:	e23f8e17 	ldw	r8,-456(fp)
    4c8c:	e13f8f17 	ldw	r4,-452(fp)
    4c90:	e17f9017 	ldw	r5,-448(fp)
    4c94:	3905883a 	add	r2,r7,r4
    4c98:	11cd803a 	cmpltu	r6,r2,r7
    4c9c:	4147883a 	add	r3,r8,r5
    4ca0:	30c9883a 	add	r4,r6,r3
    4ca4:	2007883a 	mov	r3,r4
    4ca8:	e0bf7915 	stw	r2,-540(fp)
    4cac:	e0ff7a15 	stw	r3,-536(fp)

        j++;
    4cb0:	e0bf8917 	ldw	r2,-476(fp)
    4cb4:	10800044 	addi	r2,r2,1
    4cb8:	e0bf8915 	stw	r2,-476(fp)
    } while (j < 80);
    4cbc:	e0bf8917 	ldw	r2,-476(fp)
    4cc0:	10801410 	cmplti	r2,r2,80
    4cc4:	103e3d1e 	bne	r2,zero,45bc <__alt_mem_epcs_flash_controller+0xfdffb5bc>

    /* Compute the current intermediate hash value */
    context->state[0] += a;
    4cc8:	e0bf9517 	ldw	r2,-428(fp)
    4ccc:	11000017 	ldw	r4,0(r2)
    4cd0:	11400117 	ldw	r5,4(r2)
    4cd4:	e1bf7917 	ldw	r6,-540(fp)
    4cd8:	e1ff7a17 	ldw	r7,-536(fp)
    4cdc:	2185883a 	add	r2,r4,r6
    4ce0:	1111803a 	cmpltu	r8,r2,r4
    4ce4:	29c7883a 	add	r3,r5,r7
    4ce8:	40c9883a 	add	r4,r8,r3
    4cec:	2007883a 	mov	r3,r4
    4cf0:	1009883a 	mov	r4,r2
    4cf4:	180b883a 	mov	r5,r3
    4cf8:	e0bf9517 	ldw	r2,-428(fp)
    4cfc:	11000015 	stw	r4,0(r2)
    4d00:	11400115 	stw	r5,4(r2)
    context->state[1] += b;
    4d04:	e0bf9517 	ldw	r2,-428(fp)
    4d08:	11000217 	ldw	r4,8(r2)
    4d0c:	11400317 	ldw	r5,12(r2)
    4d10:	e1bf7b17 	ldw	r6,-532(fp)
    4d14:	e1ff7c17 	ldw	r7,-528(fp)
    4d18:	2185883a 	add	r2,r4,r6
    4d1c:	1111803a 	cmpltu	r8,r2,r4
    4d20:	29c7883a 	add	r3,r5,r7
    4d24:	40c9883a 	add	r4,r8,r3
    4d28:	2007883a 	mov	r3,r4
    4d2c:	1009883a 	mov	r4,r2
    4d30:	180b883a 	mov	r5,r3
    4d34:	e0bf9517 	ldw	r2,-428(fp)
    4d38:	11000215 	stw	r4,8(r2)
    4d3c:	11400315 	stw	r5,12(r2)
    context->state[2] += c;
    4d40:	e0bf9517 	ldw	r2,-428(fp)
    4d44:	11000417 	ldw	r4,16(r2)
    4d48:	11400517 	ldw	r5,20(r2)
    4d4c:	e1bf7d17 	ldw	r6,-524(fp)
    4d50:	e1ff7e17 	ldw	r7,-520(fp)
    4d54:	2185883a 	add	r2,r4,r6
    4d58:	1111803a 	cmpltu	r8,r2,r4
    4d5c:	29c7883a 	add	r3,r5,r7
    4d60:	40c9883a 	add	r4,r8,r3
    4d64:	2007883a 	mov	r3,r4
    4d68:	1009883a 	mov	r4,r2
    4d6c:	180b883a 	mov	r5,r3
    4d70:	e0bf9517 	ldw	r2,-428(fp)
    4d74:	11000415 	stw	r4,16(r2)
    4d78:	11400515 	stw	r5,20(r2)
    context->state[3] += d;
    4d7c:	e0bf9517 	ldw	r2,-428(fp)
    4d80:	11000617 	ldw	r4,24(r2)
    4d84:	11400717 	ldw	r5,28(r2)
    4d88:	e1bf7f17 	ldw	r6,-516(fp)
    4d8c:	e1ff8017 	ldw	r7,-512(fp)
    4d90:	2185883a 	add	r2,r4,r6
    4d94:	1111803a 	cmpltu	r8,r2,r4
    4d98:	29c7883a 	add	r3,r5,r7
    4d9c:	40c9883a 	add	r4,r8,r3
    4da0:	2007883a 	mov	r3,r4
    4da4:	1009883a 	mov	r4,r2
    4da8:	180b883a 	mov	r5,r3
    4dac:	e0bf9517 	ldw	r2,-428(fp)
    4db0:	11000615 	stw	r4,24(r2)
    4db4:	11400715 	stw	r5,28(r2)
    context->state[4] += e;
    4db8:	e0bf9517 	ldw	r2,-428(fp)
    4dbc:	11000817 	ldw	r4,32(r2)
    4dc0:	11400917 	ldw	r5,36(r2)
    4dc4:	e1bf8117 	ldw	r6,-508(fp)
    4dc8:	e1ff8217 	ldw	r7,-504(fp)
    4dcc:	2185883a 	add	r2,r4,r6
    4dd0:	1111803a 	cmpltu	r8,r2,r4
    4dd4:	29c7883a 	add	r3,r5,r7
    4dd8:	40c9883a 	add	r4,r8,r3
    4ddc:	2007883a 	mov	r3,r4
    4de0:	1009883a 	mov	r4,r2
    4de4:	180b883a 	mov	r5,r3
    4de8:	e0bf9517 	ldw	r2,-428(fp)
    4dec:	11000815 	stw	r4,32(r2)
    4df0:	11400915 	stw	r5,36(r2)
    context->state[5] += f;
    4df4:	e0bf9517 	ldw	r2,-428(fp)
    4df8:	11000a17 	ldw	r4,40(r2)
    4dfc:	11400b17 	ldw	r5,44(r2)
    4e00:	e1bf8317 	ldw	r6,-500(fp)
    4e04:	e1ff8417 	ldw	r7,-496(fp)
    4e08:	2185883a 	add	r2,r4,r6
    4e0c:	1111803a 	cmpltu	r8,r2,r4
    4e10:	29c7883a 	add	r3,r5,r7
    4e14:	40c9883a 	add	r4,r8,r3
    4e18:	2007883a 	mov	r3,r4
    4e1c:	1009883a 	mov	r4,r2
    4e20:	180b883a 	mov	r5,r3
    4e24:	e0bf9517 	ldw	r2,-428(fp)
    4e28:	11000a15 	stw	r4,40(r2)
    4e2c:	11400b15 	stw	r5,44(r2)
    context->state[6] += g;
    4e30:	e0bf9517 	ldw	r2,-428(fp)
    4e34:	11000c17 	ldw	r4,48(r2)
    4e38:	11400d17 	ldw	r5,52(r2)
    4e3c:	e1bf8517 	ldw	r6,-492(fp)
    4e40:	e1ff8617 	ldw	r7,-488(fp)
    4e44:	2185883a 	add	r2,r4,r6
    4e48:	1111803a 	cmpltu	r8,r2,r4
    4e4c:	29c7883a 	add	r3,r5,r7
    4e50:	40c9883a 	add	r4,r8,r3
    4e54:	2007883a 	mov	r3,r4
    4e58:	1009883a 	mov	r4,r2
    4e5c:	180b883a 	mov	r5,r3
    4e60:	e0bf9517 	ldw	r2,-428(fp)
    4e64:	11000c15 	stw	r4,48(r2)
    4e68:	11400d15 	stw	r5,52(r2)
    context->state[7] += h;
    4e6c:	e0bf9517 	ldw	r2,-428(fp)
    4e70:	11000e17 	ldw	r4,56(r2)
    4e74:	11400f17 	ldw	r5,60(r2)
    4e78:	e1bf8717 	ldw	r6,-484(fp)
    4e7c:	e1ff8817 	ldw	r7,-480(fp)
    4e80:	2185883a 	add	r2,r4,r6
    4e84:	1111803a 	cmpltu	r8,r2,r4
    4e88:	29c7883a 	add	r3,r5,r7
    4e8c:	40c9883a 	add	r4,r8,r3
    4e90:	2007883a 	mov	r3,r4
    4e94:	1009883a 	mov	r4,r2
    4e98:	180b883a 	mov	r5,r3
    4e9c:	e0bf9517 	ldw	r2,-428(fp)
    4ea0:	11000e15 	stw	r4,56(r2)
    4ea4:	11400f15 	stw	r5,60(r2)

    /* Clean up */
    a = b = c = d = e = f = g = h = T1 = T2 = 0;
    4ea8:	e03f8f15 	stw	zero,-452(fp)
    4eac:	e03f9015 	stw	zero,-448(fp)
    4eb0:	e0bf8f17 	ldw	r2,-452(fp)
    4eb4:	e0bf8d15 	stw	r2,-460(fp)
    4eb8:	e0bf9017 	ldw	r2,-448(fp)
    4ebc:	e0bf8e15 	stw	r2,-456(fp)
    4ec0:	e0bf8d17 	ldw	r2,-460(fp)
    4ec4:	e0bf8715 	stw	r2,-484(fp)
    4ec8:	e0bf8e17 	ldw	r2,-456(fp)
    4ecc:	e0bf8815 	stw	r2,-480(fp)
    4ed0:	e0bf8717 	ldw	r2,-484(fp)
    4ed4:	e0bf8515 	stw	r2,-492(fp)
    4ed8:	e0bf8817 	ldw	r2,-480(fp)
    4edc:	e0bf8615 	stw	r2,-488(fp)
    4ee0:	e0bf8517 	ldw	r2,-492(fp)
    4ee4:	e0bf8315 	stw	r2,-500(fp)
    4ee8:	e0bf8617 	ldw	r2,-488(fp)
    4eec:	e0bf8415 	stw	r2,-496(fp)
    4ef0:	e0bf8317 	ldw	r2,-500(fp)
    4ef4:	e0bf8115 	stw	r2,-508(fp)
    4ef8:	e0bf8417 	ldw	r2,-496(fp)
    4efc:	e0bf8215 	stw	r2,-504(fp)
    4f00:	e0bf8117 	ldw	r2,-508(fp)
    4f04:	e0bf7f15 	stw	r2,-516(fp)
    4f08:	e0bf8217 	ldw	r2,-504(fp)
    4f0c:	e0bf8015 	stw	r2,-512(fp)
    4f10:	e0bf7f17 	ldw	r2,-516(fp)
    4f14:	e0bf7d15 	stw	r2,-524(fp)
    4f18:	e0bf8017 	ldw	r2,-512(fp)
    4f1c:	e0bf7e15 	stw	r2,-520(fp)
    4f20:	e0bf7d17 	ldw	r2,-524(fp)
    4f24:	e0bf7b15 	stw	r2,-532(fp)
    4f28:	e0bf7e17 	ldw	r2,-520(fp)
    4f2c:	e0bf7c15 	stw	r2,-528(fp)
    4f30:	e0bf7b17 	ldw	r2,-532(fp)
    4f34:	e0bf7915 	stw	r2,-540(fp)
    4f38:	e0bf7c17 	ldw	r2,-528(fp)
    4f3c:	e0bf7a15 	stw	r2,-536(fp)
}
    4f40:	0001883a 	nop
    4f44:	e6fff904 	addi	sp,fp,-28
    4f48:	df000717 	ldw	fp,28(sp)
    4f4c:	dd800617 	ldw	r22,24(sp)
    4f50:	dd400517 	ldw	r21,20(sp)
    4f54:	dd000417 	ldw	r20,16(sp)
    4f58:	dcc00317 	ldw	r19,12(sp)
    4f5c:	dc800217 	ldw	r18,8(sp)
    4f60:	dc400117 	ldw	r17,4(sp)
    4f64:	dc000017 	ldw	r16,0(sp)
    4f68:	dec00804 	addi	sp,sp,32
    4f6c:	f800283a 	ret

00004f70 <sha512_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha512_Update(SHA512_CTX* context, const sha2_byte* data, size_t len)
{
    4f70:	deffed04 	addi	sp,sp,-76
    4f74:	dfc01215 	stw	ra,72(sp)
    4f78:	df001115 	stw	fp,68(sp)
    4f7c:	ddc01015 	stw	r23,64(sp)
    4f80:	dd800f15 	stw	r22,60(sp)
    4f84:	dd400e15 	stw	r21,56(sp)
    4f88:	dd000d15 	stw	r20,52(sp)
    4f8c:	dcc00c15 	stw	r19,48(sp)
    4f90:	dc800b15 	stw	r18,44(sp)
    4f94:	dc400a15 	stw	r17,40(sp)
    4f98:	dc000915 	stw	r16,36(sp)
    4f9c:	df001104 	addi	fp,sp,68
    4fa0:	e13ff115 	stw	r4,-60(fp)
    4fa4:	e17ff215 	stw	r5,-56(fp)
    4fa8:	e1bff315 	stw	r6,-52(fp)
    unsigned int freespace, usedspace;

    if (len == 0) {
    4fac:	e0bff317 	ldw	r2,-52(fp)
    4fb0:	1000f426 	beq	r2,zero,5384 <sha512_Update+0x414>
        /* Calling with no data is valid - we do nothing */
        return;
    }

    usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    4fb4:	e13ff117 	ldw	r4,-60(fp)
    4fb8:	20801017 	ldw	r2,64(r4)
    4fbc:	20c01117 	ldw	r3,68(r4)
    4fc0:	1808977a 	slli	r4,r3,29
    4fc4:	100ed0fa 	srli	r7,r2,3
    4fc8:	21ceb03a 	or	r7,r4,r7
    4fcc:	1810d0fa 	srli	r8,r3,3
    4fd0:	3805883a 	mov	r2,r7
    4fd4:	10801fcc 	andi	r2,r2,127
    4fd8:	e0bfef15 	stw	r2,-68(fp)
    if (usedspace > 0) {
    4fdc:	e0bfef17 	ldw	r2,-68(fp)
    4fe0:	1000af26 	beq	r2,zero,52a0 <sha512_Update+0x330>
        /* Calculate how much free space is available in the buffer */
        freespace = SHA512_BLOCK_LENGTH - usedspace;
    4fe4:	00c02004 	movi	r3,128
    4fe8:	e0bfef17 	ldw	r2,-68(fp)
    4fec:	1885c83a 	sub	r2,r3,r2
    4ff0:	e0bff015 	stw	r2,-64(fp)

        if (len >= freespace) {
    4ff4:	e0fff317 	ldw	r3,-52(fp)
    4ff8:	e0bff017 	ldw	r2,-64(fp)
    4ffc:	18804236 	bltu	r3,r2,5108 <sha512_Update+0x198>
            /* Fill the buffer completely and process it */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, freespace);
    5000:	e0bfef17 	ldw	r2,-68(fp)
    5004:	10801404 	addi	r2,r2,80
    5008:	e0fff117 	ldw	r3,-60(fp)
    500c:	1885883a 	add	r2,r3,r2
    5010:	e1bff017 	ldw	r6,-64(fp)
    5014:	e17ff217 	ldw	r5,-56(fp)
    5018:	1009883a 	mov	r4,r2
    501c:	000a0f40 	call	a0f4 <memcpy>
            ADDINC128(context->bitcount, freespace << 3);
    5020:	e0bff117 	ldw	r2,-60(fp)
    5024:	11001017 	ldw	r4,64(r2)
    5028:	11401117 	ldw	r5,68(r2)
    502c:	e0bff017 	ldw	r2,-64(fp)
    5030:	100490fa 	slli	r2,r2,3
    5034:	e0bff615 	stw	r2,-40(fp)
    5038:	e03ff715 	stw	zero,-36(fp)
    503c:	e1bff617 	ldw	r6,-40(fp)
    5040:	2185883a 	add	r2,r4,r6
    5044:	110d803a 	cmpltu	r6,r2,r4
    5048:	e1fff717 	ldw	r7,-36(fp)
    504c:	29c7883a 	add	r3,r5,r7
    5050:	30c9883a 	add	r4,r6,r3
    5054:	2007883a 	mov	r3,r4
    5058:	1009883a 	mov	r4,r2
    505c:	180b883a 	mov	r5,r3
    5060:	e0bff117 	ldw	r2,-60(fp)
    5064:	11001015 	stw	r4,64(r2)
    5068:	11401115 	stw	r5,68(r2)
    506c:	e13ff117 	ldw	r4,-60(fp)
    5070:	20801017 	ldw	r2,64(r4)
    5074:	20c01117 	ldw	r3,68(r4)
    5078:	e13ff017 	ldw	r4,-64(fp)
    507c:	200890fa 	slli	r4,r4,3
    5080:	2029883a 	mov	r20,r4
    5084:	002b883a 	mov	r21,zero
    5088:	1d400236 	bltu	r3,r21,5094 <sha512_Update+0x124>
    508c:	a8c0101e 	bne	r21,r3,50d0 <sha512_Update+0x160>
    5090:	15000f2e 	bgeu	r2,r20,50d0 <sha512_Update+0x160>
    5094:	e0bff117 	ldw	r2,-60(fp)
    5098:	11001217 	ldw	r4,72(r2)
    509c:	11401317 	ldw	r5,76(r2)
    50a0:	01800044 	movi	r6,1
    50a4:	000f883a 	mov	r7,zero
    50a8:	2185883a 	add	r2,r4,r6
    50ac:	1111803a 	cmpltu	r8,r2,r4
    50b0:	29c7883a 	add	r3,r5,r7
    50b4:	40c9883a 	add	r4,r8,r3
    50b8:	2007883a 	mov	r3,r4
    50bc:	1009883a 	mov	r4,r2
    50c0:	180b883a 	mov	r5,r3
    50c4:	e0bff117 	ldw	r2,-60(fp)
    50c8:	11001215 	stw	r4,72(r2)
    50cc:	11401315 	stw	r5,76(r2)
            len -= freespace;
    50d0:	e0fff317 	ldw	r3,-52(fp)
    50d4:	e0bff017 	ldw	r2,-64(fp)
    50d8:	1885c83a 	sub	r2,r3,r2
    50dc:	e0bff315 	stw	r2,-52(fp)
            data += freespace;
    50e0:	e0fff217 	ldw	r3,-56(fp)
    50e4:	e0bff017 	ldw	r2,-64(fp)
    50e8:	1885883a 	add	r2,r3,r2
    50ec:	e0bff215 	stw	r2,-56(fp)
            sha512_Transform(context, (sha2_word64*)context->buffer);
    50f0:	e0bff117 	ldw	r2,-60(fp)
    50f4:	10801404 	addi	r2,r2,80
    50f8:	100b883a 	mov	r5,r2
    50fc:	e13ff117 	ldw	r4,-60(fp)
    5100:	0003f100 	call	3f10 <sha512_Transform>
    5104:	00006606 	br	52a0 <sha512_Update+0x330>
        } else {
            /* The buffer is not yet full */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, len);
    5108:	e0bfef17 	ldw	r2,-68(fp)
    510c:	10801404 	addi	r2,r2,80
    5110:	e0fff117 	ldw	r3,-60(fp)
    5114:	1885883a 	add	r2,r3,r2
    5118:	e1bff317 	ldw	r6,-52(fp)
    511c:	e17ff217 	ldw	r5,-56(fp)
    5120:	1009883a 	mov	r4,r2
    5124:	000a0f40 	call	a0f4 <memcpy>
            ADDINC128(context->bitcount, len << 3);
    5128:	e0bff117 	ldw	r2,-60(fp)
    512c:	11001017 	ldw	r4,64(r2)
    5130:	11401117 	ldw	r5,68(r2)
    5134:	e0bff317 	ldw	r2,-52(fp)
    5138:	100490fa 	slli	r2,r2,3
    513c:	e0bff415 	stw	r2,-48(fp)
    5140:	e03ff515 	stw	zero,-44(fp)
    5144:	e1bff417 	ldw	r6,-48(fp)
    5148:	2185883a 	add	r2,r4,r6
    514c:	110d803a 	cmpltu	r6,r2,r4
    5150:	e1fff517 	ldw	r7,-44(fp)
    5154:	29c7883a 	add	r3,r5,r7
    5158:	30c9883a 	add	r4,r6,r3
    515c:	2007883a 	mov	r3,r4
    5160:	1009883a 	mov	r4,r2
    5164:	180b883a 	mov	r5,r3
    5168:	e0bff117 	ldw	r2,-60(fp)
    516c:	11001015 	stw	r4,64(r2)
    5170:	11401115 	stw	r5,68(r2)
    5174:	e13ff117 	ldw	r4,-60(fp)
    5178:	20801017 	ldw	r2,64(r4)
    517c:	20c01117 	ldw	r3,68(r4)
    5180:	e13ff317 	ldw	r4,-52(fp)
    5184:	200890fa 	slli	r4,r4,3
    5188:	2025883a 	mov	r18,r4
    518c:	0027883a 	mov	r19,zero
    5190:	1cc00236 	bltu	r3,r19,519c <sha512_Update+0x22c>
    5194:	98c0101e 	bne	r19,r3,51d8 <sha512_Update+0x268>
    5198:	14800f2e 	bgeu	r2,r18,51d8 <sha512_Update+0x268>
    519c:	e0bff117 	ldw	r2,-60(fp)
    51a0:	11001217 	ldw	r4,72(r2)
    51a4:	11401317 	ldw	r5,76(r2)
    51a8:	01800044 	movi	r6,1
    51ac:	000f883a 	mov	r7,zero
    51b0:	2185883a 	add	r2,r4,r6
    51b4:	1111803a 	cmpltu	r8,r2,r4
    51b8:	29c7883a 	add	r3,r5,r7
    51bc:	40c9883a 	add	r4,r8,r3
    51c0:	2007883a 	mov	r3,r4
    51c4:	1009883a 	mov	r4,r2
    51c8:	180b883a 	mov	r5,r3
    51cc:	e0bff117 	ldw	r2,-60(fp)
    51d0:	11001215 	stw	r4,72(r2)
    51d4:	11401315 	stw	r5,76(r2)
            /* Clean up: */
            usedspace = freespace = 0;
    51d8:	e03ff015 	stw	zero,-64(fp)
    51dc:	e0bff017 	ldw	r2,-64(fp)
    51e0:	e0bfef15 	stw	r2,-68(fp)
            return;
    51e4:	00006806 	br	5388 <sha512_Update+0x418>
        }
    }
    while (len >= SHA512_BLOCK_LENGTH) {
        /* Process as many complete blocks as we can */
        sha512_Transform(context, (const sha2_word64*)data);
    51e8:	e17ff217 	ldw	r5,-56(fp)
    51ec:	e13ff117 	ldw	r4,-60(fp)
    51f0:	0003f100 	call	3f10 <sha512_Transform>
        ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
    51f4:	e0bff117 	ldw	r2,-60(fp)
    51f8:	11001017 	ldw	r4,64(r2)
    51fc:	11401117 	ldw	r5,68(r2)
    5200:	01810004 	movi	r6,1024
    5204:	000f883a 	mov	r7,zero
    5208:	2185883a 	add	r2,r4,r6
    520c:	1111803a 	cmpltu	r8,r2,r4
    5210:	29c7883a 	add	r3,r5,r7
    5214:	40c9883a 	add	r4,r8,r3
    5218:	2007883a 	mov	r3,r4
    521c:	1009883a 	mov	r4,r2
    5220:	180b883a 	mov	r5,r3
    5224:	e0bff117 	ldw	r2,-60(fp)
    5228:	11001015 	stw	r4,64(r2)
    522c:	11401115 	stw	r5,68(r2)
    5230:	e13ff117 	ldw	r4,-60(fp)
    5234:	20801017 	ldw	r2,64(r4)
    5238:	20c01117 	ldw	r3,68(r4)
    523c:	1800121e 	bne	r3,zero,5288 <sha512_Update+0x318>
    5240:	1800021e 	bne	r3,zero,524c <sha512_Update+0x2dc>
    5244:	10810028 	cmpgeui	r2,r2,1024
    5248:	10000f1e 	bne	r2,zero,5288 <sha512_Update+0x318>
    524c:	e0bff117 	ldw	r2,-60(fp)
    5250:	11001217 	ldw	r4,72(r2)
    5254:	11401317 	ldw	r5,76(r2)
    5258:	01800044 	movi	r6,1
    525c:	000f883a 	mov	r7,zero
    5260:	2185883a 	add	r2,r4,r6
    5264:	1111803a 	cmpltu	r8,r2,r4
    5268:	29c7883a 	add	r3,r5,r7
    526c:	40c9883a 	add	r4,r8,r3
    5270:	2007883a 	mov	r3,r4
    5274:	1009883a 	mov	r4,r2
    5278:	180b883a 	mov	r5,r3
    527c:	e0bff117 	ldw	r2,-60(fp)
    5280:	11001215 	stw	r4,72(r2)
    5284:	11401315 	stw	r5,76(r2)
        len -= SHA512_BLOCK_LENGTH;
    5288:	e0bff317 	ldw	r2,-52(fp)
    528c:	10bfe004 	addi	r2,r2,-128
    5290:	e0bff315 	stw	r2,-52(fp)
        data += SHA512_BLOCK_LENGTH;
    5294:	e0bff217 	ldw	r2,-56(fp)
    5298:	10802004 	addi	r2,r2,128
    529c:	e0bff215 	stw	r2,-56(fp)
            /* Clean up: */
            usedspace = freespace = 0;
            return;
        }
    }
    while (len >= SHA512_BLOCK_LENGTH) {
    52a0:	e0bff317 	ldw	r2,-52(fp)
    52a4:	10802028 	cmpgeui	r2,r2,128
    52a8:	103fcf1e 	bne	r2,zero,51e8 <__alt_mem_epcs_flash_controller+0xfdffc1e8>
        sha512_Transform(context, (const sha2_word64*)data);
        ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
        len -= SHA512_BLOCK_LENGTH;
        data += SHA512_BLOCK_LENGTH;
    }
    if (len > 0) {
    52ac:	e0bff317 	ldw	r2,-52(fp)
    52b0:	10003026 	beq	r2,zero,5374 <sha512_Update+0x404>
        /* There's left-overs, so save 'em */
        MEMCPY_BCOPY(context->buffer, data, len);
    52b4:	e0bff117 	ldw	r2,-60(fp)
    52b8:	10801404 	addi	r2,r2,80
    52bc:	e1bff317 	ldw	r6,-52(fp)
    52c0:	e17ff217 	ldw	r5,-56(fp)
    52c4:	1009883a 	mov	r4,r2
    52c8:	000a0f40 	call	a0f4 <memcpy>
        ADDINC128(context->bitcount, len << 3);
    52cc:	e0bff117 	ldw	r2,-60(fp)
    52d0:	11001017 	ldw	r4,64(r2)
    52d4:	11401117 	ldw	r5,68(r2)
    52d8:	e0bff317 	ldw	r2,-52(fp)
    52dc:	100490fa 	slli	r2,r2,3
    52e0:	102d883a 	mov	r22,r2
    52e4:	002f883a 	mov	r23,zero
    52e8:	2585883a 	add	r2,r4,r22
    52ec:	110d803a 	cmpltu	r6,r2,r4
    52f0:	2dc7883a 	add	r3,r5,r23
    52f4:	30c9883a 	add	r4,r6,r3
    52f8:	2007883a 	mov	r3,r4
    52fc:	1009883a 	mov	r4,r2
    5300:	180b883a 	mov	r5,r3
    5304:	e0bff117 	ldw	r2,-60(fp)
    5308:	11001015 	stw	r4,64(r2)
    530c:	11401115 	stw	r5,68(r2)
    5310:	e13ff117 	ldw	r4,-60(fp)
    5314:	20801017 	ldw	r2,64(r4)
    5318:	20c01117 	ldw	r3,68(r4)
    531c:	e13ff317 	ldw	r4,-52(fp)
    5320:	200890fa 	slli	r4,r4,3
    5324:	2021883a 	mov	r16,r4
    5328:	0023883a 	mov	r17,zero
    532c:	1c400236 	bltu	r3,r17,5338 <sha512_Update+0x3c8>
    5330:	88c0101e 	bne	r17,r3,5374 <sha512_Update+0x404>
    5334:	14000f2e 	bgeu	r2,r16,5374 <sha512_Update+0x404>
    5338:	e0bff117 	ldw	r2,-60(fp)
    533c:	11001217 	ldw	r4,72(r2)
    5340:	11401317 	ldw	r5,76(r2)
    5344:	01800044 	movi	r6,1
    5348:	000f883a 	mov	r7,zero
    534c:	2185883a 	add	r2,r4,r6
    5350:	1111803a 	cmpltu	r8,r2,r4
    5354:	29c7883a 	add	r3,r5,r7
    5358:	40c9883a 	add	r4,r8,r3
    535c:	2007883a 	mov	r3,r4
    5360:	1009883a 	mov	r4,r2
    5364:	180b883a 	mov	r5,r3
    5368:	e0bff117 	ldw	r2,-60(fp)
    536c:	11001215 	stw	r4,72(r2)
    5370:	11401315 	stw	r5,76(r2)
    }
    /* Clean up: */
    usedspace = freespace = 0;
    5374:	e03ff015 	stw	zero,-64(fp)
    5378:	e0bff017 	ldw	r2,-64(fp)
    537c:	e0bfef15 	stw	r2,-68(fp)
    5380:	00000106 	br	5388 <sha512_Update+0x418>
{
    unsigned int freespace, usedspace;

    if (len == 0) {
        /* Calling with no data is valid - we do nothing */
        return;
    5384:	0001883a 	nop
        MEMCPY_BCOPY(context->buffer, data, len);
        ADDINC128(context->bitcount, len << 3);
    }
    /* Clean up: */
    usedspace = freespace = 0;
}
    5388:	e6fff804 	addi	sp,fp,-32
    538c:	dfc00917 	ldw	ra,36(sp)
    5390:	df000817 	ldw	fp,32(sp)
    5394:	ddc00717 	ldw	r23,28(sp)
    5398:	dd800617 	ldw	r22,24(sp)
    539c:	dd400517 	ldw	r21,20(sp)
    53a0:	dd000417 	ldw	r20,16(sp)
    53a4:	dcc00317 	ldw	r19,12(sp)
    53a8:	dc800217 	ldw	r18,8(sp)
    53ac:	dc400117 	ldw	r17,4(sp)
    53b0:	dc000017 	ldw	r16,0(sp)
    53b4:	dec00a04 	addi	sp,sp,40
    53b8:	f800283a 	ret

000053bc <sha512_Last>:

void sha512_Last(SHA512_CTX* context)
{
    53bc:	deffd804 	addi	sp,sp,-160
    53c0:	dfc02715 	stw	ra,156(sp)
    53c4:	df002615 	stw	fp,152(sp)
    53c8:	dd802515 	stw	r22,148(sp)
    53cc:	dd402415 	stw	r21,144(sp)
    53d0:	dd002315 	stw	r20,140(sp)
    53d4:	dcc02215 	stw	r19,136(sp)
    53d8:	dc802115 	stw	r18,132(sp)
    53dc:	dc402015 	stw	r17,128(sp)
    53e0:	dc001f15 	stw	r16,124(sp)
    53e4:	df002604 	addi	fp,sp,152
    53e8:	e13fe015 	stw	r4,-128(fp)
    unsigned int usedspace;
    sha2_word64* t;

    usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    53ec:	e13fe017 	ldw	r4,-128(fp)
    53f0:	20801017 	ldw	r2,64(r4)
    53f4:	20c01117 	ldw	r3,68(r4)
    53f8:	1808977a 	slli	r4,r3,29
    53fc:	100ad0fa 	srli	r5,r2,3
    5400:	214ab03a 	or	r5,r4,r5
    5404:	180cd0fa 	srli	r6,r3,3
    5408:	2805883a 	mov	r2,r5
    540c:	10801fcc 	andi	r2,r2,127
    5410:	e0bfda15 	stw	r2,-152(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
    /* Convert FROM host byte order */
    REVERSE64(context->bitcount[0], context->bitcount[0]);
    5414:	e0ffe017 	ldw	r3,-128(fp)
    5418:	18801017 	ldw	r2,64(r3)
    541c:	e0bfdb15 	stw	r2,-148(fp)
    5420:	18801117 	ldw	r2,68(r3)
    5424:	e0bfdc15 	stw	r2,-144(fp)
    5428:	e1ffdc17 	ldw	r7,-144(fp)
    542c:	e23fdb17 	ldw	r8,-148(fp)
    5430:	e1ffdb15 	stw	r7,-148(fp)
    5434:	e23fdc15 	stw	r8,-144(fp)
    5438:	e0ffdb17 	ldw	r3,-148(fp)
    543c:	00bfc074 	movhi	r2,65281
    5440:	10bfc004 	addi	r2,r2,-256
    5444:	1892703a 	and	r9,r3,r2
    5448:	e0ffdc17 	ldw	r3,-144(fp)
    544c:	00bfc074 	movhi	r2,65281
    5450:	10bfc004 	addi	r2,r2,-256
    5454:	1894703a 	and	r10,r3,r2
    5458:	5004963a 	slli	r2,r10,24
    545c:	4806d23a 	srli	r3,r9,8
    5460:	e0ffe115 	stw	r3,-124(fp)
    5464:	e0ffe117 	ldw	r3,-124(fp)
    5468:	10c4b03a 	or	r2,r2,r3
    546c:	e0bfe115 	stw	r2,-124(fp)
    5470:	5004d23a 	srli	r2,r10,8
    5474:	e0bfe215 	stw	r2,-120(fp)
    5478:	e0ffdb17 	ldw	r3,-148(fp)
    547c:	00803ff4 	movhi	r2,255
    5480:	10803fc4 	addi	r2,r2,255
    5484:	189a703a 	and	r13,r3,r2
    5488:	e0ffdc17 	ldw	r3,-144(fp)
    548c:	00803ff4 	movhi	r2,255
    5490:	10803fc4 	addi	r2,r2,255
    5494:	189c703a 	and	r14,r3,r2
    5498:	6804d63a 	srli	r2,r13,24
    549c:	7018923a 	slli	r12,r14,8
    54a0:	1318b03a 	or	r12,r2,r12
    54a4:	6816923a 	slli	r11,r13,8
    54a8:	e0ffe117 	ldw	r3,-124(fp)
    54ac:	1ac4b03a 	or	r2,r3,r11
    54b0:	e0bfdb15 	stw	r2,-148(fp)
    54b4:	e0ffe217 	ldw	r3,-120(fp)
    54b8:	1b04b03a 	or	r2,r3,r12
    54bc:	e0bfdc15 	stw	r2,-144(fp)
    54c0:	e0bfdb17 	ldw	r2,-148(fp)
    54c4:	10bfffec 	andhi	r2,r2,65535
    54c8:	e0bfe315 	stw	r2,-116(fp)
    54cc:	e0bfdc17 	ldw	r2,-144(fp)
    54d0:	10bfffec 	andhi	r2,r2,65535
    54d4:	e0bfe415 	stw	r2,-112(fp)
    54d8:	e0ffe417 	ldw	r3,-112(fp)
    54dc:	1804943a 	slli	r2,r3,16
    54e0:	e0ffe317 	ldw	r3,-116(fp)
    54e4:	1806d43a 	srli	r3,r3,16
    54e8:	e0ffe515 	stw	r3,-108(fp)
    54ec:	e0ffe517 	ldw	r3,-108(fp)
    54f0:	10c4b03a 	or	r2,r2,r3
    54f4:	e0bfe515 	stw	r2,-108(fp)
    54f8:	e0bfe417 	ldw	r2,-112(fp)
    54fc:	1004d43a 	srli	r2,r2,16
    5500:	e0bfe615 	stw	r2,-104(fp)
    5504:	e0bfdb17 	ldw	r2,-148(fp)
    5508:	10bfffcc 	andi	r2,r2,65535
    550c:	e0bfe715 	stw	r2,-100(fp)
    5510:	e0bfdc17 	ldw	r2,-144(fp)
    5514:	10bfffcc 	andi	r2,r2,65535
    5518:	e0bfe815 	stw	r2,-96(fp)
    551c:	e0ffe717 	ldw	r3,-100(fp)
    5520:	1804d43a 	srli	r2,r3,16
    5524:	e0ffe817 	ldw	r3,-96(fp)
    5528:	1806943a 	slli	r3,r3,16
    552c:	e0ffea15 	stw	r3,-88(fp)
    5530:	e0ffea17 	ldw	r3,-88(fp)
    5534:	10c4b03a 	or	r2,r2,r3
    5538:	e0bfea15 	stw	r2,-88(fp)
    553c:	e0bfe717 	ldw	r2,-100(fp)
    5540:	1004943a 	slli	r2,r2,16
    5544:	e0bfe915 	stw	r2,-92(fp)
    5548:	e0ffe517 	ldw	r3,-108(fp)
    554c:	e0bfe917 	ldw	r2,-92(fp)
    5550:	1886b03a 	or	r3,r3,r2
    5554:	e0ffeb15 	stw	r3,-84(fp)
    5558:	e0ffe617 	ldw	r3,-104(fp)
    555c:	e0bfea17 	ldw	r2,-88(fp)
    5560:	1886b03a 	or	r3,r3,r2
    5564:	e0ffec15 	stw	r3,-80(fp)
    5568:	e0bfe017 	ldw	r2,-128(fp)
    556c:	e0ffeb17 	ldw	r3,-84(fp)
    5570:	10c01015 	stw	r3,64(r2)
    5574:	e0ffec17 	ldw	r3,-80(fp)
    5578:	10c01115 	stw	r3,68(r2)
    REVERSE64(context->bitcount[1], context->bitcount[1]);
    557c:	e0bfe017 	ldw	r2,-128(fp)
    5580:	10c01217 	ldw	r3,72(r2)
    5584:	e0ffdd15 	stw	r3,-140(fp)
    5588:	10801317 	ldw	r2,76(r2)
    558c:	e0bfde15 	stw	r2,-136(fp)
    5590:	e0bfde17 	ldw	r2,-136(fp)
    5594:	e0bff715 	stw	r2,-36(fp)
    5598:	e0ffdd17 	ldw	r3,-140(fp)
    559c:	e0fff815 	stw	r3,-32(fp)
    55a0:	e0bff717 	ldw	r2,-36(fp)
    55a4:	e0bfdd15 	stw	r2,-140(fp)
    55a8:	e0fff817 	ldw	r3,-32(fp)
    55ac:	e0ffde15 	stw	r3,-136(fp)
    55b0:	e0ffdd17 	ldw	r3,-140(fp)
    55b4:	00bfc074 	movhi	r2,65281
    55b8:	10bfc004 	addi	r2,r2,-256
    55bc:	1884703a 	and	r2,r3,r2
    55c0:	e0bfed15 	stw	r2,-76(fp)
    55c4:	e0ffde17 	ldw	r3,-136(fp)
    55c8:	00bfc074 	movhi	r2,65281
    55cc:	10bfc004 	addi	r2,r2,-256
    55d0:	1884703a 	and	r2,r3,r2
    55d4:	e0bfee15 	stw	r2,-72(fp)
    55d8:	e0ffee17 	ldw	r3,-72(fp)
    55dc:	1804963a 	slli	r2,r3,24
    55e0:	e0ffed17 	ldw	r3,-76(fp)
    55e4:	182ad23a 	srli	r21,r3,8
    55e8:	156ab03a 	or	r21,r2,r21
    55ec:	e0bfee17 	ldw	r2,-72(fp)
    55f0:	102cd23a 	srli	r22,r2,8
    55f4:	e0ffdd17 	ldw	r3,-140(fp)
    55f8:	00803ff4 	movhi	r2,255
    55fc:	10803fc4 	addi	r2,r2,255
    5600:	1884703a 	and	r2,r3,r2
    5604:	e0bfef15 	stw	r2,-68(fp)
    5608:	e0ffde17 	ldw	r3,-136(fp)
    560c:	00803ff4 	movhi	r2,255
    5610:	10803fc4 	addi	r2,r2,255
    5614:	1884703a 	and	r2,r3,r2
    5618:	e0bff015 	stw	r2,-64(fp)
    561c:	e0ffef17 	ldw	r3,-68(fp)
    5620:	1804d63a 	srli	r2,r3,24
    5624:	e0fff017 	ldw	r3,-64(fp)
    5628:	1828923a 	slli	r20,r3,8
    562c:	1528b03a 	or	r20,r2,r20
    5630:	e0bfef17 	ldw	r2,-68(fp)
    5634:	1026923a 	slli	r19,r2,8
    5638:	acc4b03a 	or	r2,r21,r19
    563c:	e0bfdd15 	stw	r2,-140(fp)
    5640:	b504b03a 	or	r2,r22,r20
    5644:	e0bfde15 	stw	r2,-136(fp)
    5648:	e0bfdd17 	ldw	r2,-140(fp)
    564c:	10bfffec 	andhi	r2,r2,65535
    5650:	e0bff115 	stw	r2,-60(fp)
    5654:	e0bfde17 	ldw	r2,-136(fp)
    5658:	10bfffec 	andhi	r2,r2,65535
    565c:	e0bff215 	stw	r2,-56(fp)
    5660:	e0fff217 	ldw	r3,-56(fp)
    5664:	1804943a 	slli	r2,r3,16
    5668:	e0fff117 	ldw	r3,-60(fp)
    566c:	1822d43a 	srli	r17,r3,16
    5670:	1462b03a 	or	r17,r2,r17
    5674:	e0bff217 	ldw	r2,-56(fp)
    5678:	1024d43a 	srli	r18,r2,16
    567c:	e0bfdd17 	ldw	r2,-140(fp)
    5680:	10bfffcc 	andi	r2,r2,65535
    5684:	e0bff315 	stw	r2,-52(fp)
    5688:	e0bfde17 	ldw	r2,-136(fp)
    568c:	10bfffcc 	andi	r2,r2,65535
    5690:	e0bff415 	stw	r2,-48(fp)
    5694:	e0fff317 	ldw	r3,-52(fp)
    5698:	1804d43a 	srli	r2,r3,16
    569c:	e0fff417 	ldw	r3,-48(fp)
    56a0:	1820943a 	slli	r16,r3,16
    56a4:	1420b03a 	or	r16,r2,r16
    56a8:	e0bff317 	ldw	r2,-52(fp)
    56ac:	101e943a 	slli	r15,r2,16
    56b0:	8bc6b03a 	or	r3,r17,r15
    56b4:	e0fff515 	stw	r3,-44(fp)
    56b8:	9404b03a 	or	r2,r18,r16
    56bc:	e0bff615 	stw	r2,-40(fp)
    56c0:	e0bfe017 	ldw	r2,-128(fp)
    56c4:	e0fff517 	ldw	r3,-44(fp)
    56c8:	10c01215 	stw	r3,72(r2)
    56cc:	e0fff617 	ldw	r3,-40(fp)
    56d0:	10c01315 	stw	r3,76(r2)
#endif
    if (usedspace > 0) {
    56d4:	e0bfda17 	ldw	r2,-152(fp)
    56d8:	10002f26 	beq	r2,zero,5798 <sha512_Last+0x3dc>
        /* Begin padding with a 1 bit: */
        context->buffer[usedspace++] = 0x80;
    56dc:	e0bfda17 	ldw	r2,-152(fp)
    56e0:	10c00044 	addi	r3,r2,1
    56e4:	e0ffda15 	stw	r3,-152(fp)
    56e8:	e0ffe017 	ldw	r3,-128(fp)
    56ec:	1885883a 	add	r2,r3,r2
    56f0:	10801404 	addi	r2,r2,80
    56f4:	00ffe004 	movi	r3,-128
    56f8:	10c00005 	stb	r3,0(r2)

        if (usedspace <= SHA512_SHORT_BLOCK_LENGTH) {
    56fc:	e0bfda17 	ldw	r2,-152(fp)
    5700:	10801c68 	cmpgeui	r2,r2,113
    5704:	10000b1e 	bne	r2,zero,5734 <sha512_Last+0x378>
            /* Set-up for the last transform: */
            MEMSET_BZERO(&context->buffer[usedspace], SHA512_SHORT_BLOCK_LENGTH - usedspace);
    5708:	e0bfda17 	ldw	r2,-152(fp)
    570c:	10801404 	addi	r2,r2,80
    5710:	e0ffe017 	ldw	r3,-128(fp)
    5714:	1889883a 	add	r4,r3,r2
    5718:	00c01c04 	movi	r3,112
    571c:	e0bfda17 	ldw	r2,-152(fp)
    5720:	1885c83a 	sub	r2,r3,r2
    5724:	100d883a 	mov	r6,r2
    5728:	000b883a 	mov	r5,zero
    572c:	000a11c0 	call	a11c <memset>
    5730:	00002206 	br	57bc <sha512_Last+0x400>
        } else {
            if (usedspace < SHA512_BLOCK_LENGTH) {
    5734:	e0bfda17 	ldw	r2,-152(fp)
    5738:	10802028 	cmpgeui	r2,r2,128
    573c:	10000a1e 	bne	r2,zero,5768 <sha512_Last+0x3ac>
                MEMSET_BZERO(&context->buffer[usedspace], SHA512_BLOCK_LENGTH - usedspace);
    5740:	e0bfda17 	ldw	r2,-152(fp)
    5744:	10801404 	addi	r2,r2,80
    5748:	e0ffe017 	ldw	r3,-128(fp)
    574c:	1889883a 	add	r4,r3,r2
    5750:	00c02004 	movi	r3,128
    5754:	e0bfda17 	ldw	r2,-152(fp)
    5758:	1885c83a 	sub	r2,r3,r2
    575c:	100d883a 	mov	r6,r2
    5760:	000b883a 	mov	r5,zero
    5764:	000a11c0 	call	a11c <memset>
            }
            /* Do second-to-last transform: */
            sha512_Transform(context, (sha2_word64*)context->buffer);
    5768:	e0bfe017 	ldw	r2,-128(fp)
    576c:	10801404 	addi	r2,r2,80
    5770:	100b883a 	mov	r5,r2
    5774:	e13fe017 	ldw	r4,-128(fp)
    5778:	0003f100 	call	3f10 <sha512_Transform>

            /* And set-up for the last transform: */
            MEMSET_BZERO(context->buffer, SHA512_BLOCK_LENGTH - 2);
    577c:	e0bfe017 	ldw	r2,-128(fp)
    5780:	10801404 	addi	r2,r2,80
    5784:	01801f84 	movi	r6,126
    5788:	000b883a 	mov	r5,zero
    578c:	1009883a 	mov	r4,r2
    5790:	000a11c0 	call	a11c <memset>
    5794:	00000906 	br	57bc <sha512_Last+0x400>
        }
    } else {
        /* Prepare for final transform: */
        MEMSET_BZERO(context->buffer, SHA512_SHORT_BLOCK_LENGTH);
    5798:	e0bfe017 	ldw	r2,-128(fp)
    579c:	10801404 	addi	r2,r2,80
    57a0:	01801c04 	movi	r6,112
    57a4:	000b883a 	mov	r5,zero
    57a8:	1009883a 	mov	r4,r2
    57ac:	000a11c0 	call	a11c <memset>

        /* Begin padding with a 1 bit: */
        *context->buffer = 0x80;
    57b0:	e0bfe017 	ldw	r2,-128(fp)
    57b4:	00ffe004 	movi	r3,-128
    57b8:	10c01405 	stb	r3,80(r2)
    }
    /* Store the length of input data (in bits): */
    t = (sha2_word64*)&context->buffer[SHA512_SHORT_BLOCK_LENGTH];
    57bc:	e0bfe017 	ldw	r2,-128(fp)
    57c0:	10803004 	addi	r2,r2,192
    57c4:	e0bfdf15 	stw	r2,-132(fp)
    *t = context->bitcount[1];
    57c8:	e13fe017 	ldw	r4,-128(fp)
    57cc:	20801217 	ldw	r2,72(r4)
    57d0:	20c01317 	ldw	r3,76(r4)
    57d4:	e13fdf17 	ldw	r4,-132(fp)
    57d8:	20800015 	stw	r2,0(r4)
    57dc:	20c00115 	stw	r3,4(r4)
    t = (sha2_word64*)&context->buffer[SHA512_SHORT_BLOCK_LENGTH + 8];
    57e0:	e0bfe017 	ldw	r2,-128(fp)
    57e4:	10803204 	addi	r2,r2,200
    57e8:	e0bfdf15 	stw	r2,-132(fp)
    *t = context->bitcount[0];
    57ec:	e13fe017 	ldw	r4,-128(fp)
    57f0:	20801017 	ldw	r2,64(r4)
    57f4:	20c01117 	ldw	r3,68(r4)
    57f8:	e13fdf17 	ldw	r4,-132(fp)
    57fc:	20800015 	stw	r2,0(r4)
    5800:	20c00115 	stw	r3,4(r4)

    /* Final transform: */
    sha512_Transform(context, (sha2_word64*)context->buffer);
    5804:	e0bfe017 	ldw	r2,-128(fp)
    5808:	10801404 	addi	r2,r2,80
    580c:	100b883a 	mov	r5,r2
    5810:	e13fe017 	ldw	r4,-128(fp)
    5814:	0003f100 	call	3f10 <sha512_Transform>
}
    5818:	0001883a 	nop
    581c:	e6fff904 	addi	sp,fp,-28
    5820:	dfc00817 	ldw	ra,32(sp)
    5824:	df000717 	ldw	fp,28(sp)
    5828:	dd800617 	ldw	r22,24(sp)
    582c:	dd400517 	ldw	r21,20(sp)
    5830:	dd000417 	ldw	r20,16(sp)
    5834:	dcc00317 	ldw	r19,12(sp)
    5838:	dc800217 	ldw	r18,8(sp)
    583c:	dc400117 	ldw	r17,4(sp)
    5840:	dc000017 	ldw	r16,0(sp)
    5844:	dec00904 	addi	sp,sp,36
    5848:	f800283a 	ret

0000584c <sha512_Final>:

void sha512_Final(sha2_byte digest[], SHA512_CTX* context)
{
    584c:	deffe404 	addi	sp,sp,-112
    5850:	dfc01b15 	stw	ra,108(sp)
    5854:	df001a15 	stw	fp,104(sp)
    5858:	ddc01915 	stw	r23,100(sp)
    585c:	dd801815 	stw	r22,96(sp)
    5860:	dd401715 	stw	r21,92(sp)
    5864:	dd001615 	stw	r20,88(sp)
    5868:	dcc01515 	stw	r19,84(sp)
    586c:	dc801415 	stw	r18,80(sp)
    5870:	dc401315 	stw	r17,76(sp)
    5874:	dc001215 	stw	r16,72(sp)
    5878:	df001a04 	addi	fp,sp,104
    587c:	e13fea15 	stw	r4,-88(fp)
    5880:	e17feb15 	stw	r5,-84(fp)
    sha2_word64* d = (sha2_word64*)digest;
    5884:	e0bfea17 	ldw	r2,-88(fp)
    5888:	e0bfe615 	stw	r2,-104(fp)

    /* If no digest buffer is passed, we don't bother doing this: */
    if (digest != (sha2_byte*)0) {
    588c:	e0bfea17 	ldw	r2,-88(fp)
    5890:	10007126 	beq	r2,zero,5a58 <sha512_Final+0x20c>
        sha512_Last(context);
    5894:	e13feb17 	ldw	r4,-84(fp)
    5898:	00053bc0 	call	53bc <sha512_Last>
/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
    589c:	e03fe715 	stw	zero,-100(fp)
    58a0:	00006a06 	br	5a4c <sha512_Final+0x200>
                REVERSE64(context->state[j], context->state[j]);
    58a4:	e0ffeb17 	ldw	r3,-84(fp)
    58a8:	e0bfe717 	ldw	r2,-100(fp)
    58ac:	100490fa 	slli	r2,r2,3
    58b0:	1885883a 	add	r2,r3,r2
    58b4:	10c00017 	ldw	r3,0(r2)
    58b8:	e0ffe815 	stw	r3,-96(fp)
    58bc:	10800117 	ldw	r2,4(r2)
    58c0:	e0bfe915 	stw	r2,-92(fp)
    58c4:	e0bfe917 	ldw	r2,-92(fp)
    58c8:	e0bff615 	stw	r2,-40(fp)
    58cc:	e0ffe817 	ldw	r3,-96(fp)
    58d0:	e0fff715 	stw	r3,-36(fp)
    58d4:	e0bff617 	ldw	r2,-40(fp)
    58d8:	e0bfe815 	stw	r2,-96(fp)
    58dc:	e0fff717 	ldw	r3,-36(fp)
    58e0:	e0ffe915 	stw	r3,-92(fp)
    58e4:	e0ffe817 	ldw	r3,-96(fp)
    58e8:	00bfc074 	movhi	r2,65281
    58ec:	10bfc004 	addi	r2,r2,-256
    58f0:	1884703a 	and	r2,r3,r2
    58f4:	e0bfec15 	stw	r2,-80(fp)
    58f8:	e0ffe917 	ldw	r3,-92(fp)
    58fc:	00bfc074 	movhi	r2,65281
    5900:	10bfc004 	addi	r2,r2,-256
    5904:	1884703a 	and	r2,r3,r2
    5908:	e0bfed15 	stw	r2,-76(fp)
    590c:	e0ffed17 	ldw	r3,-76(fp)
    5910:	1804963a 	slli	r2,r3,24
    5914:	e0ffec17 	ldw	r3,-80(fp)
    5918:	1820d23a 	srli	r16,r3,8
    591c:	1420b03a 	or	r16,r2,r16
    5920:	e0bfed17 	ldw	r2,-76(fp)
    5924:	1022d23a 	srli	r17,r2,8
    5928:	e0ffe817 	ldw	r3,-96(fp)
    592c:	00803ff4 	movhi	r2,255
    5930:	10803fc4 	addi	r2,r2,255
    5934:	1884703a 	and	r2,r3,r2
    5938:	e0bfee15 	stw	r2,-72(fp)
    593c:	e0ffe917 	ldw	r3,-92(fp)
    5940:	00803ff4 	movhi	r2,255
    5944:	10803fc4 	addi	r2,r2,255
    5948:	1884703a 	and	r2,r3,r2
    594c:	e0bfef15 	stw	r2,-68(fp)
    5950:	e0ffee17 	ldw	r3,-72(fp)
    5954:	1804d63a 	srli	r2,r3,24
    5958:	e0ffef17 	ldw	r3,-68(fp)
    595c:	1826923a 	slli	r19,r3,8
    5960:	14e6b03a 	or	r19,r2,r19
    5964:	e0bfee17 	ldw	r2,-72(fp)
    5968:	1024923a 	slli	r18,r2,8
    596c:	8484b03a 	or	r2,r16,r18
    5970:	e0bfe815 	stw	r2,-96(fp)
    5974:	8cc4b03a 	or	r2,r17,r19
    5978:	e0bfe915 	stw	r2,-92(fp)
    597c:	e0bfe817 	ldw	r2,-96(fp)
    5980:	10bfffec 	andhi	r2,r2,65535
    5984:	e0bff015 	stw	r2,-64(fp)
    5988:	e0bfe917 	ldw	r2,-92(fp)
    598c:	10bfffec 	andhi	r2,r2,65535
    5990:	e0bff115 	stw	r2,-60(fp)
    5994:	e0fff117 	ldw	r3,-60(fp)
    5998:	1804943a 	slli	r2,r3,16
    599c:	e0fff017 	ldw	r3,-64(fp)
    59a0:	1828d43a 	srli	r20,r3,16
    59a4:	1528b03a 	or	r20,r2,r20
    59a8:	e0bff117 	ldw	r2,-60(fp)
    59ac:	102ad43a 	srli	r21,r2,16
    59b0:	e0bfe817 	ldw	r2,-96(fp)
    59b4:	10bfffcc 	andi	r2,r2,65535
    59b8:	e0bff215 	stw	r2,-56(fp)
    59bc:	e0bfe917 	ldw	r2,-92(fp)
    59c0:	10bfffcc 	andi	r2,r2,65535
    59c4:	e0bff315 	stw	r2,-52(fp)
    59c8:	e0fff217 	ldw	r3,-56(fp)
    59cc:	1804d43a 	srli	r2,r3,16
    59d0:	e0fff317 	ldw	r3,-52(fp)
    59d4:	182e943a 	slli	r23,r3,16
    59d8:	15eeb03a 	or	r23,r2,r23
    59dc:	e0bff217 	ldw	r2,-56(fp)
    59e0:	102c943a 	slli	r22,r2,16
    59e4:	a586b03a 	or	r3,r20,r22
    59e8:	e0fff415 	stw	r3,-48(fp)
    59ec:	adc4b03a 	or	r2,r21,r23
    59f0:	e0bff515 	stw	r2,-44(fp)
    59f4:	e0ffeb17 	ldw	r3,-84(fp)
    59f8:	e0bfe717 	ldw	r2,-100(fp)
    59fc:	100490fa 	slli	r2,r2,3
    5a00:	1885883a 	add	r2,r3,r2
    5a04:	e0fff417 	ldw	r3,-48(fp)
    5a08:	10c00015 	stw	r3,0(r2)
    5a0c:	e0fff517 	ldw	r3,-44(fp)
    5a10:	10c00115 	stw	r3,4(r2)
                *d++ = context->state[j];
    5a14:	e13fe617 	ldw	r4,-104(fp)
    5a18:	20800204 	addi	r2,r4,8
    5a1c:	e0bfe615 	stw	r2,-104(fp)
    5a20:	e0ffeb17 	ldw	r3,-84(fp)
    5a24:	e0bfe717 	ldw	r2,-100(fp)
    5a28:	100490fa 	slli	r2,r2,3
    5a2c:	188b883a 	add	r5,r3,r2
    5a30:	28800017 	ldw	r2,0(r5)
    5a34:	28c00117 	ldw	r3,4(r5)
    5a38:	20800015 	stw	r2,0(r4)
    5a3c:	20c00115 	stw	r3,4(r4)
/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
    5a40:	e0bfe717 	ldw	r2,-100(fp)
    5a44:	10800044 	addi	r2,r2,1
    5a48:	e0bfe715 	stw	r2,-100(fp)
    5a4c:	e0bfe717 	ldw	r2,-100(fp)
    5a50:	10800210 	cmplti	r2,r2,8
    5a54:	103f931e 	bne	r2,zero,58a4 <__alt_mem_epcs_flash_controller+0xfdffc8a4>
        MEMCPY_BCOPY(d, context->state, SHA512_DIGEST_LENGTH);
#endif
    }

    /* Zero out state data */
    MEMSET_BZERO(context, sizeof(SHA512_CTX));
    5a58:	01803404 	movi	r6,208
    5a5c:	000b883a 	mov	r5,zero
    5a60:	e13feb17 	ldw	r4,-84(fp)
    5a64:	000a11c0 	call	a11c <memset>
}
    5a68:	0001883a 	nop
    5a6c:	e6fff804 	addi	sp,fp,-32
    5a70:	dfc00917 	ldw	ra,36(sp)
    5a74:	df000817 	ldw	fp,32(sp)
    5a78:	ddc00717 	ldw	r23,28(sp)
    5a7c:	dd800617 	ldw	r22,24(sp)
    5a80:	dd400517 	ldw	r21,20(sp)
    5a84:	dd000417 	ldw	r20,16(sp)
    5a88:	dcc00317 	ldw	r19,12(sp)
    5a8c:	dc800217 	ldw	r18,8(sp)
    5a90:	dc400117 	ldw	r17,4(sp)
    5a94:	dc000017 	ldw	r16,0(sp)
    5a98:	dec00a04 	addi	sp,sp,40
    5a9c:	f800283a 	ret

00005aa0 <sha512_Raw>:

void sha512_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA512_DIGEST_LENGTH])
{
    5aa0:	deffc704 	addi	sp,sp,-228
    5aa4:	dfc03815 	stw	ra,224(sp)
    5aa8:	df003715 	stw	fp,220(sp)
    5aac:	df003704 	addi	fp,sp,220
    5ab0:	e13ffd15 	stw	r4,-12(fp)
    5ab4:	e17ffe15 	stw	r5,-8(fp)
    5ab8:	e1bfff15 	stw	r6,-4(fp)
    SHA512_CTX context;
    sha512_Init(&context);
    5abc:	e13fc904 	addi	r4,fp,-220
    5ac0:	0003e840 	call	3e84 <sha512_Init>
    sha512_Update(&context, data, len);
    5ac4:	e1bffe17 	ldw	r6,-8(fp)
    5ac8:	e17ffd17 	ldw	r5,-12(fp)
    5acc:	e13fc904 	addi	r4,fp,-220
    5ad0:	0004f700 	call	4f70 <sha512_Update>
    sha512_Final(digest, &context);
    5ad4:	e17fc904 	addi	r5,fp,-220
    5ad8:	e13fff17 	ldw	r4,-4(fp)
    5adc:	000584c0 	call	584c <sha512_Final>
}
    5ae0:	0001883a 	nop
    5ae4:	e037883a 	mov	sp,fp
    5ae8:	dfc00117 	ldw	ra,4(sp)
    5aec:	df000017 	ldw	fp,0(sp)
    5af0:	dec00204 	addi	sp,sp,8
    5af4:	f800283a 	ret

00005af8 <hmac_sha256>:

void hmac_sha256(const uint8_t* key, const uint32_t keylen, const uint8_t* msg, const uint32_t msglen, uint8_t* hmac)
{
    5af8:	deffaf04 	addi	sp,sp,-324
    5afc:	dfc05015 	stw	ra,320(sp)
    5b00:	df004f15 	stw	fp,316(sp)
    5b04:	df004f04 	addi	fp,sp,316
    5b08:	e13ffc15 	stw	r4,-16(fp)
    5b0c:	e17ffd15 	stw	r5,-12(fp)
    5b10:	e1bffe15 	stw	r6,-8(fp)
    5b14:	e1ffff15 	stw	r7,-4(fp)
    int i;
    uint8_t buf[SHA256_BLOCK_LENGTH], o_key_pad[SHA256_BLOCK_LENGTH],
        i_key_pad[SHA256_BLOCK_LENGTH];
    SHA256_CTX ctx;

    memset(buf, 0, SHA256_BLOCK_LENGTH);
    5b18:	e0bfb204 	addi	r2,fp,-312
    5b1c:	01801004 	movi	r6,64
    5b20:	000b883a 	mov	r5,zero
    5b24:	1009883a 	mov	r4,r2
    5b28:	000a11c0 	call	a11c <memset>
    if (keylen > SHA256_BLOCK_LENGTH) {
    5b2c:	e0bffd17 	ldw	r2,-12(fp)
    5b30:	10801070 	cmpltui	r2,r2,65
    5b34:	1000061e 	bne	r2,zero,5b50 <hmac_sha256+0x58>
        sha256_Raw(key, keylen, buf);
    5b38:	e0bfb204 	addi	r2,fp,-312
    5b3c:	100d883a 	mov	r6,r2
    5b40:	e17ffd17 	ldw	r5,-12(fp)
    5b44:	e13ffc17 	ldw	r4,-16(fp)
    5b48:	0003e2c0 	call	3e2c <sha256_Raw>
    5b4c:	00000506 	br	5b64 <hmac_sha256+0x6c>
    } else {
        memcpy(buf, key, keylen);
    5b50:	e0bfb204 	addi	r2,fp,-312
    5b54:	e1bffd17 	ldw	r6,-12(fp)
    5b58:	e17ffc17 	ldw	r5,-16(fp)
    5b5c:	1009883a 	mov	r4,r2
    5b60:	000a0f40 	call	a0f4 <memcpy>
    }

    for (i = 0; i < SHA256_BLOCK_LENGTH; i++) {
    5b64:	e03fb115 	stw	zero,-316(fp)
    5b68:	00001706 	br	5bc8 <hmac_sha256+0xd0>
        o_key_pad[i] = buf[i] ^ 0x5c;
    5b6c:	e0ffb204 	addi	r3,fp,-312
    5b70:	e0bfb117 	ldw	r2,-316(fp)
    5b74:	1885883a 	add	r2,r3,r2
    5b78:	10800003 	ldbu	r2,0(r2)
    5b7c:	1080171c 	xori	r2,r2,92
    5b80:	1009883a 	mov	r4,r2
    5b84:	e0ffc204 	addi	r3,fp,-248
    5b88:	e0bfb117 	ldw	r2,-316(fp)
    5b8c:	1885883a 	add	r2,r3,r2
    5b90:	11000005 	stb	r4,0(r2)
        i_key_pad[i] = buf[i] ^ 0x36;
    5b94:	e0ffb204 	addi	r3,fp,-312
    5b98:	e0bfb117 	ldw	r2,-316(fp)
    5b9c:	1885883a 	add	r2,r3,r2
    5ba0:	10800003 	ldbu	r2,0(r2)
    5ba4:	10800d9c 	xori	r2,r2,54
    5ba8:	1009883a 	mov	r4,r2
    5bac:	e0ffd204 	addi	r3,fp,-184
    5bb0:	e0bfb117 	ldw	r2,-316(fp)
    5bb4:	1885883a 	add	r2,r3,r2
    5bb8:	11000005 	stb	r4,0(r2)
        sha256_Raw(key, keylen, buf);
    } else {
        memcpy(buf, key, keylen);
    }

    for (i = 0; i < SHA256_BLOCK_LENGTH; i++) {
    5bbc:	e0bfb117 	ldw	r2,-316(fp)
    5bc0:	10800044 	addi	r2,r2,1
    5bc4:	e0bfb115 	stw	r2,-316(fp)
    5bc8:	e0bfb117 	ldw	r2,-316(fp)
    5bcc:	10801010 	cmplti	r2,r2,64
    5bd0:	103fe61e 	bne	r2,zero,5b6c <__alt_mem_epcs_flash_controller+0xfdffcb6c>
        o_key_pad[i] = buf[i] ^ 0x5c;
        i_key_pad[i] = buf[i] ^ 0x36;
    }

    sha256_Init(&ctx);
    5bd4:	e0bfe204 	addi	r2,fp,-120
    5bd8:	1009883a 	mov	r4,r2
    5bdc:	00031b80 	call	31b8 <sha256_Init>
    sha256_Update(&ctx, i_key_pad, SHA256_BLOCK_LENGTH);
    5be0:	e0ffd204 	addi	r3,fp,-184
    5be4:	e0bfe204 	addi	r2,fp,-120
    5be8:	01801004 	movi	r6,64
    5bec:	180b883a 	mov	r5,r3
    5bf0:	1009883a 	mov	r4,r2
    5bf4:	00037ec0 	call	37ec <sha256_Update>
    sha256_Update(&ctx, msg, msglen);
    5bf8:	e0bfe204 	addi	r2,fp,-120
    5bfc:	e1bfff17 	ldw	r6,-4(fp)
    5c00:	e17ffe17 	ldw	r5,-8(fp)
    5c04:	1009883a 	mov	r4,r2
    5c08:	00037ec0 	call	37ec <sha256_Update>
    sha256_Final(buf, &ctx);
    5c0c:	e0ffe204 	addi	r3,fp,-120
    5c10:	e0bfb204 	addi	r2,fp,-312
    5c14:	180b883a 	mov	r5,r3
    5c18:	1009883a 	mov	r4,r2
    5c1c:	0003a940 	call	3a94 <sha256_Final>

    sha256_Init(&ctx);
    5c20:	e0bfe204 	addi	r2,fp,-120
    5c24:	1009883a 	mov	r4,r2
    5c28:	00031b80 	call	31b8 <sha256_Init>
    sha256_Update(&ctx, o_key_pad, SHA256_BLOCK_LENGTH);
    5c2c:	e0ffc204 	addi	r3,fp,-248
    5c30:	e0bfe204 	addi	r2,fp,-120
    5c34:	01801004 	movi	r6,64
    5c38:	180b883a 	mov	r5,r3
    5c3c:	1009883a 	mov	r4,r2
    5c40:	00037ec0 	call	37ec <sha256_Update>
    sha256_Update(&ctx, buf, SHA256_DIGEST_LENGTH);
    5c44:	e0ffb204 	addi	r3,fp,-312
    5c48:	e0bfe204 	addi	r2,fp,-120
    5c4c:	01800804 	movi	r6,32
    5c50:	180b883a 	mov	r5,r3
    5c54:	1009883a 	mov	r4,r2
    5c58:	00037ec0 	call	37ec <sha256_Update>
    sha256_Final(hmac, &ctx);
    5c5c:	e0bfe204 	addi	r2,fp,-120
    5c60:	100b883a 	mov	r5,r2
    5c64:	e1000217 	ldw	r4,8(fp)
    5c68:	0003a940 	call	3a94 <sha256_Final>
}
    5c6c:	0001883a 	nop
    5c70:	e037883a 	mov	sp,fp
    5c74:	dfc00117 	ldw	ra,4(sp)
    5c78:	df000017 	ldw	fp,0(sp)
    5c7c:	dec00204 	addi	sp,sp,8
    5c80:	f800283a 	ret

00005c84 <hmac_sha512>:

void hmac_sha512(const uint8_t* key, const uint32_t keylen, const uint8_t* msg, const uint32_t msglen, uint8_t* hmac)
{
    5c84:	deff6504 	addi	sp,sp,-620
    5c88:	dfc09a15 	stw	ra,616(sp)
    5c8c:	df009915 	stw	fp,612(sp)
    5c90:	df009904 	addi	fp,sp,612
    5c94:	e13ffc15 	stw	r4,-16(fp)
    5c98:	e17ffd15 	stw	r5,-12(fp)
    5c9c:	e1bffe15 	stw	r6,-8(fp)
    5ca0:	e1ffff15 	stw	r7,-4(fp)
    int i;
    uint8_t buf[SHA512_BLOCK_LENGTH], o_key_pad[SHA512_BLOCK_LENGTH],
        i_key_pad[SHA512_BLOCK_LENGTH];
    SHA512_CTX ctx;

    memset(buf, 0, SHA512_BLOCK_LENGTH);
    5ca4:	e0bf6804 	addi	r2,fp,-608
    5ca8:	01802004 	movi	r6,128
    5cac:	000b883a 	mov	r5,zero
    5cb0:	1009883a 	mov	r4,r2
    5cb4:	000a11c0 	call	a11c <memset>
    if (keylen > SHA512_BLOCK_LENGTH) {
    5cb8:	e0bffd17 	ldw	r2,-12(fp)
    5cbc:	10802070 	cmpltui	r2,r2,129
    5cc0:	1000061e 	bne	r2,zero,5cdc <hmac_sha512+0x58>
        sha512_Raw(key, keylen, buf);
    5cc4:	e0bf6804 	addi	r2,fp,-608
    5cc8:	100d883a 	mov	r6,r2
    5ccc:	e17ffd17 	ldw	r5,-12(fp)
    5cd0:	e13ffc17 	ldw	r4,-16(fp)
    5cd4:	0005aa00 	call	5aa0 <sha512_Raw>
    5cd8:	00000506 	br	5cf0 <hmac_sha512+0x6c>
    } else {
        memcpy(buf, key, keylen);
    5cdc:	e0bf6804 	addi	r2,fp,-608
    5ce0:	e1bffd17 	ldw	r6,-12(fp)
    5ce4:	e17ffc17 	ldw	r5,-16(fp)
    5ce8:	1009883a 	mov	r4,r2
    5cec:	000a0f40 	call	a0f4 <memcpy>
    }

    for (i = 0; i < SHA512_BLOCK_LENGTH; i++) {
    5cf0:	e03f6715 	stw	zero,-612(fp)
    5cf4:	00001706 	br	5d54 <hmac_sha512+0xd0>
        o_key_pad[i] = buf[i] ^ 0x5c;
    5cf8:	e0ff6804 	addi	r3,fp,-608
    5cfc:	e0bf6717 	ldw	r2,-612(fp)
    5d00:	1885883a 	add	r2,r3,r2
    5d04:	10800003 	ldbu	r2,0(r2)
    5d08:	1080171c 	xori	r2,r2,92
    5d0c:	1009883a 	mov	r4,r2
    5d10:	e0ff8804 	addi	r3,fp,-480
    5d14:	e0bf6717 	ldw	r2,-612(fp)
    5d18:	1885883a 	add	r2,r3,r2
    5d1c:	11000005 	stb	r4,0(r2)
        i_key_pad[i] = buf[i] ^ 0x36;
    5d20:	e0ff6804 	addi	r3,fp,-608
    5d24:	e0bf6717 	ldw	r2,-612(fp)
    5d28:	1885883a 	add	r2,r3,r2
    5d2c:	10800003 	ldbu	r2,0(r2)
    5d30:	10800d9c 	xori	r2,r2,54
    5d34:	1009883a 	mov	r4,r2
    5d38:	e0ffa804 	addi	r3,fp,-352
    5d3c:	e0bf6717 	ldw	r2,-612(fp)
    5d40:	1885883a 	add	r2,r3,r2
    5d44:	11000005 	stb	r4,0(r2)
        sha512_Raw(key, keylen, buf);
    } else {
        memcpy(buf, key, keylen);
    }

    for (i = 0; i < SHA512_BLOCK_LENGTH; i++) {
    5d48:	e0bf6717 	ldw	r2,-612(fp)
    5d4c:	10800044 	addi	r2,r2,1
    5d50:	e0bf6715 	stw	r2,-612(fp)
    5d54:	e0bf6717 	ldw	r2,-612(fp)
    5d58:	10802010 	cmplti	r2,r2,128
    5d5c:	103fe61e 	bne	r2,zero,5cf8 <__alt_mem_epcs_flash_controller+0xfdffccf8>
        o_key_pad[i] = buf[i] ^ 0x5c;
        i_key_pad[i] = buf[i] ^ 0x36;
    }

    sha512_Init(&ctx);
    5d60:	e0bfc804 	addi	r2,fp,-224
    5d64:	1009883a 	mov	r4,r2
    5d68:	0003e840 	call	3e84 <sha512_Init>
    sha512_Update(&ctx, i_key_pad, SHA512_BLOCK_LENGTH);
    5d6c:	e0ffa804 	addi	r3,fp,-352
    5d70:	e0bfc804 	addi	r2,fp,-224
    5d74:	01802004 	movi	r6,128
    5d78:	180b883a 	mov	r5,r3
    5d7c:	1009883a 	mov	r4,r2
    5d80:	0004f700 	call	4f70 <sha512_Update>
    sha512_Update(&ctx, msg, msglen);
    5d84:	e0bfc804 	addi	r2,fp,-224
    5d88:	e1bfff17 	ldw	r6,-4(fp)
    5d8c:	e17ffe17 	ldw	r5,-8(fp)
    5d90:	1009883a 	mov	r4,r2
    5d94:	0004f700 	call	4f70 <sha512_Update>
    sha512_Final(buf, &ctx);
    5d98:	e0ffc804 	addi	r3,fp,-224
    5d9c:	e0bf6804 	addi	r2,fp,-608
    5da0:	180b883a 	mov	r5,r3
    5da4:	1009883a 	mov	r4,r2
    5da8:	000584c0 	call	584c <sha512_Final>

    sha512_Init(&ctx);
    5dac:	e0bfc804 	addi	r2,fp,-224
    5db0:	1009883a 	mov	r4,r2
    5db4:	0003e840 	call	3e84 <sha512_Init>
    sha512_Update(&ctx, o_key_pad, SHA512_BLOCK_LENGTH);
    5db8:	e0ff8804 	addi	r3,fp,-480
    5dbc:	e0bfc804 	addi	r2,fp,-224
    5dc0:	01802004 	movi	r6,128
    5dc4:	180b883a 	mov	r5,r3
    5dc8:	1009883a 	mov	r4,r2
    5dcc:	0004f700 	call	4f70 <sha512_Update>
    sha512_Update(&ctx, buf, SHA512_DIGEST_LENGTH);
    5dd0:	e0ff6804 	addi	r3,fp,-608
    5dd4:	e0bfc804 	addi	r2,fp,-224
    5dd8:	01801004 	movi	r6,64
    5ddc:	180b883a 	mov	r5,r3
    5de0:	1009883a 	mov	r4,r2
    5de4:	0004f700 	call	4f70 <sha512_Update>
    sha512_Final(hmac, &ctx);
    5de8:	e0bfc804 	addi	r2,fp,-224
    5dec:	100b883a 	mov	r5,r2
    5df0:	e1000217 	ldw	r4,8(fp)
    5df4:	000584c0 	call	584c <sha512_Final>
}
    5df8:	0001883a 	nop
    5dfc:	e037883a 	mov	sp,fp
    5e00:	dfc00117 	ldw	ra,4(sp)
    5e04:	df000017 	ldw	fp,0(sp)
    5e08:	dec00204 	addi	sp,sp,8
    5e0c:	f800283a 	ret

00005e10 <trezor_sha1_Init>:
 */
static const char *sha2_hex_digits = "0123456789abcdef";


/*** SHA-1: ***********************************************************/
void trezor_sha1_Init(SHA1_CTX* context) {
    5e10:	defffd04 	addi	sp,sp,-12
    5e14:	dfc00215 	stw	ra,8(sp)
    5e18:	df000115 	stw	fp,4(sp)
    5e1c:	df000104 	addi	fp,sp,4
    5e20:	e13fff15 	stw	r4,-4(fp)
	MEMCPY_BCOPY(context->state, sha1_initial_hash_value, SHA1_DIGEST_LENGTH);
    5e24:	e0bfff17 	ldw	r2,-4(fp)
    5e28:	01800504 	movi	r6,20
    5e2c:	01400074 	movhi	r5,1
    5e30:	295c4e04 	addi	r5,r5,28984
    5e34:	1009883a 	mov	r4,r2
    5e38:	000a0f40 	call	a0f4 <memcpy>
	memzero(context->buffer, SHA1_BLOCK_LENGTH);
    5e3c:	e0bfff17 	ldw	r2,-4(fp)
    5e40:	10800704 	addi	r2,r2,28
    5e44:	01401004 	movi	r5,64
    5e48:	1009883a 	mov	r4,r2
    5e4c:	00018040 	call	1804 <memzero>
	context->bitcount = 0;
    5e50:	e0bfff17 	ldw	r2,-4(fp)
    5e54:	10000515 	stw	zero,20(r2)
    5e58:	10000615 	stw	zero,24(r2)
}
    5e5c:	0001883a 	nop
    5e60:	e037883a 	mov	sp,fp
    5e64:	dfc00117 	ldw	ra,4(sp)
    5e68:	df000017 	ldw	fp,0(sp)
    5e6c:	dec00204 	addi	sp,sp,8
    5e70:	f800283a 	ret

00005e74 <trezor_sha1_Transform>:
	a = b = c = d = e = T1 = 0;
}

#else  /* SHA2_UNROLL_TRANSFORM */

void trezor_sha1_Transform(const sha2_word32* state_in, const sha2_word32* data, sha2_word32* state_out) {
    5e74:	deffe504 	addi	sp,sp,-108
    5e78:	df001a15 	stw	fp,104(sp)
    5e7c:	df001a04 	addi	fp,sp,104
    5e80:	e13ffd15 	stw	r4,-12(fp)
    5e84:	e17ffe15 	stw	r5,-8(fp)
    5e88:	e1bfff15 	stw	r6,-4(fp)
	sha2_word32	T1;
	sha2_word32	W1[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    5e8c:	e0bffd17 	ldw	r2,-12(fp)
    5e90:	10800017 	ldw	r2,0(r2)
    5e94:	e0bfe615 	stw	r2,-104(fp)
	b = state_in[1];
    5e98:	e0bffd17 	ldw	r2,-12(fp)
    5e9c:	10800117 	ldw	r2,4(r2)
    5ea0:	e0bfe715 	stw	r2,-100(fp)
	c = state_in[2];
    5ea4:	e0bffd17 	ldw	r2,-12(fp)
    5ea8:	10800217 	ldw	r2,8(r2)
    5eac:	e0bfe815 	stw	r2,-96(fp)
	d = state_in[3];
    5eb0:	e0bffd17 	ldw	r2,-12(fp)
    5eb4:	10800317 	ldw	r2,12(r2)
    5eb8:	e0bfe915 	stw	r2,-92(fp)
	e = state_in[4];
    5ebc:	e0bffd17 	ldw	r2,-12(fp)
    5ec0:	10800417 	ldw	r2,16(r2)
    5ec4:	e0bfea15 	stw	r2,-88(fp)
	j = 0;
    5ec8:	e03feb15 	stw	zero,-84(fp)
	do {
		T1 = ROTL32(5, a) + Ch(b, c, d) + e + K1_0_TO_19 + (W1[j] = *data++);
    5ecc:	e0bfe617 	ldw	r2,-104(fp)
    5ed0:	1006117a 	roli	r3,r2,5
    5ed4:	e13fe717 	ldw	r4,-100(fp)
    5ed8:	e0bfe817 	ldw	r2,-96(fp)
    5edc:	2088703a 	and	r4,r4,r2
    5ee0:	e0bfe717 	ldw	r2,-100(fp)
    5ee4:	008a303a 	nor	r5,zero,r2
    5ee8:	e0bfe917 	ldw	r2,-92(fp)
    5eec:	2884703a 	and	r2,r5,r2
    5ef0:	2084f03a 	xor	r2,r4,r2
    5ef4:	1887883a 	add	r3,r3,r2
    5ef8:	e0bfea17 	ldw	r2,-88(fp)
    5efc:	1887883a 	add	r3,r3,r2
    5f00:	e0bffe17 	ldw	r2,-8(fp)
    5f04:	11000104 	addi	r4,r2,4
    5f08:	e13ffe15 	stw	r4,-8(fp)
    5f0c:	11000017 	ldw	r4,0(r2)
    5f10:	e0bfeb17 	ldw	r2,-84(fp)
    5f14:	1085883a 	add	r2,r2,r2
    5f18:	1085883a 	add	r2,r2,r2
    5f1c:	e17fe604 	addi	r5,fp,-104
    5f20:	2885883a 	add	r2,r5,r2
    5f24:	10800704 	addi	r2,r2,28
    5f28:	11000015 	stw	r4,0(r2)
    5f2c:	e0bfeb17 	ldw	r2,-84(fp)
    5f30:	1085883a 	add	r2,r2,r2
    5f34:	1085883a 	add	r2,r2,r2
    5f38:	e1bfe604 	addi	r6,fp,-104
    5f3c:	3085883a 	add	r2,r6,r2
    5f40:	10800704 	addi	r2,r2,28
    5f44:	10800017 	ldw	r2,0(r2)
    5f48:	1887883a 	add	r3,r3,r2
    5f4c:	0096a0b4 	movhi	r2,23170
    5f50:	109e6644 	addi	r2,r2,31129
    5f54:	1885883a 	add	r2,r3,r2
    5f58:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    5f5c:	e0bfe917 	ldw	r2,-92(fp)
    5f60:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    5f64:	e0bfe817 	ldw	r2,-96(fp)
    5f68:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    5f6c:	e0ffe717 	ldw	r3,-100(fp)
    5f70:	00800084 	movi	r2,2
    5f74:	1884583a 	ror	r2,r3,r2
    5f78:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    5f7c:	e0bfe617 	ldw	r2,-104(fp)
    5f80:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    5f84:	e0bfec17 	ldw	r2,-80(fp)
    5f88:	e0bfe615 	stw	r2,-104(fp)
		j++;
    5f8c:	e0bfeb17 	ldw	r2,-84(fp)
    5f90:	10800044 	addi	r2,r2,1
    5f94:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 16);
    5f98:	e0bfeb17 	ldw	r2,-84(fp)
    5f9c:	10800410 	cmplti	r2,r2,16
    5fa0:	103fca1e 	bne	r2,zero,5ecc <__alt_mem_epcs_flash_controller+0xfdffcecc>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    5fa4:	e0bfeb17 	ldw	r2,-84(fp)
    5fa8:	10800344 	addi	r2,r2,13
    5fac:	108003cc 	andi	r2,r2,15
    5fb0:	1085883a 	add	r2,r2,r2
    5fb4:	1085883a 	add	r2,r2,r2
    5fb8:	e0ffe604 	addi	r3,fp,-104
    5fbc:	1885883a 	add	r2,r3,r2
    5fc0:	10800704 	addi	r2,r2,28
    5fc4:	10c00017 	ldw	r3,0(r2)
    5fc8:	e0bfeb17 	ldw	r2,-84(fp)
    5fcc:	10800204 	addi	r2,r2,8
    5fd0:	108003cc 	andi	r2,r2,15
    5fd4:	1085883a 	add	r2,r2,r2
    5fd8:	1085883a 	add	r2,r2,r2
    5fdc:	e13fe604 	addi	r4,fp,-104
    5fe0:	2085883a 	add	r2,r4,r2
    5fe4:	10800704 	addi	r2,r2,28
    5fe8:	10800017 	ldw	r2,0(r2)
    5fec:	1886f03a 	xor	r3,r3,r2
    5ff0:	e0bfeb17 	ldw	r2,-84(fp)
    5ff4:	10800084 	addi	r2,r2,2
    5ff8:	108003cc 	andi	r2,r2,15
    5ffc:	1085883a 	add	r2,r2,r2
    6000:	1085883a 	add	r2,r2,r2
    6004:	e17fe604 	addi	r5,fp,-104
    6008:	2885883a 	add	r2,r5,r2
    600c:	10800704 	addi	r2,r2,28
    6010:	10800017 	ldw	r2,0(r2)
    6014:	1886f03a 	xor	r3,r3,r2
    6018:	e0bfeb17 	ldw	r2,-84(fp)
    601c:	108003cc 	andi	r2,r2,15
    6020:	1085883a 	add	r2,r2,r2
    6024:	1085883a 	add	r2,r2,r2
    6028:	e1bfe604 	addi	r6,fp,-104
    602c:	3085883a 	add	r2,r6,r2
    6030:	10800704 	addi	r2,r2,28
    6034:	10800017 	ldw	r2,0(r2)
    6038:	1884f03a 	xor	r2,r3,r2
    603c:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Ch(b,c,d) + e + K1_0_TO_19 + (W1[j&0x0f] = ROTL32(1, T1));
    6040:	e0bfe617 	ldw	r2,-104(fp)
    6044:	1006117a 	roli	r3,r2,5
    6048:	e13fe717 	ldw	r4,-100(fp)
    604c:	e0bfe817 	ldw	r2,-96(fp)
    6050:	2088703a 	and	r4,r4,r2
    6054:	e0bfe717 	ldw	r2,-100(fp)
    6058:	008a303a 	nor	r5,zero,r2
    605c:	e0bfe917 	ldw	r2,-92(fp)
    6060:	2884703a 	and	r2,r5,r2
    6064:	2084f03a 	xor	r2,r4,r2
    6068:	1887883a 	add	r3,r3,r2
    606c:	e0bfea17 	ldw	r2,-88(fp)
    6070:	1889883a 	add	r4,r3,r2
    6074:	e0bfeb17 	ldw	r2,-84(fp)
    6078:	108003cc 	andi	r2,r2,15
    607c:	e0ffec17 	ldw	r3,-80(fp)
    6080:	180a107a 	roli	r5,r3,1
    6084:	1087883a 	add	r3,r2,r2
    6088:	18c7883a 	add	r3,r3,r3
    608c:	e1bfe604 	addi	r6,fp,-104
    6090:	30c7883a 	add	r3,r6,r3
    6094:	18c00704 	addi	r3,r3,28
    6098:	19400015 	stw	r5,0(r3)
    609c:	1085883a 	add	r2,r2,r2
    60a0:	1085883a 	add	r2,r2,r2
    60a4:	e0ffe604 	addi	r3,fp,-104
    60a8:	1885883a 	add	r2,r3,r2
    60ac:	10800704 	addi	r2,r2,28
    60b0:	10800017 	ldw	r2,0(r2)
    60b4:	2087883a 	add	r3,r4,r2
    60b8:	0096a0b4 	movhi	r2,23170
    60bc:	109e6644 	addi	r2,r2,31129
    60c0:	1885883a 	add	r2,r3,r2
    60c4:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    60c8:	e0bfe917 	ldw	r2,-92(fp)
    60cc:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    60d0:	e0bfe817 	ldw	r2,-96(fp)
    60d4:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    60d8:	e0ffe717 	ldw	r3,-100(fp)
    60dc:	00800084 	movi	r2,2
    60e0:	1884583a 	ror	r2,r3,r2
    60e4:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    60e8:	e0bfe617 	ldw	r2,-104(fp)
    60ec:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    60f0:	e0bfec17 	ldw	r2,-80(fp)
    60f4:	e0bfe615 	stw	r2,-104(fp)
		j++;
    60f8:	e0bfeb17 	ldw	r2,-84(fp)
    60fc:	10800044 	addi	r2,r2,1
    6100:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 20);
    6104:	e0bfeb17 	ldw	r2,-84(fp)
    6108:	10800510 	cmplti	r2,r2,20
    610c:	103fa51e 	bne	r2,zero,5fa4 <__alt_mem_epcs_flash_controller+0xfdffcfa4>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    6110:	e0bfeb17 	ldw	r2,-84(fp)
    6114:	10800344 	addi	r2,r2,13
    6118:	108003cc 	andi	r2,r2,15
    611c:	1085883a 	add	r2,r2,r2
    6120:	1085883a 	add	r2,r2,r2
    6124:	e13fe604 	addi	r4,fp,-104
    6128:	2085883a 	add	r2,r4,r2
    612c:	10800704 	addi	r2,r2,28
    6130:	10c00017 	ldw	r3,0(r2)
    6134:	e0bfeb17 	ldw	r2,-84(fp)
    6138:	10800204 	addi	r2,r2,8
    613c:	108003cc 	andi	r2,r2,15
    6140:	1085883a 	add	r2,r2,r2
    6144:	1085883a 	add	r2,r2,r2
    6148:	e17fe604 	addi	r5,fp,-104
    614c:	2885883a 	add	r2,r5,r2
    6150:	10800704 	addi	r2,r2,28
    6154:	10800017 	ldw	r2,0(r2)
    6158:	1886f03a 	xor	r3,r3,r2
    615c:	e0bfeb17 	ldw	r2,-84(fp)
    6160:	10800084 	addi	r2,r2,2
    6164:	108003cc 	andi	r2,r2,15
    6168:	1085883a 	add	r2,r2,r2
    616c:	1085883a 	add	r2,r2,r2
    6170:	e1bfe604 	addi	r6,fp,-104
    6174:	3085883a 	add	r2,r6,r2
    6178:	10800704 	addi	r2,r2,28
    617c:	10800017 	ldw	r2,0(r2)
    6180:	1886f03a 	xor	r3,r3,r2
    6184:	e0bfeb17 	ldw	r2,-84(fp)
    6188:	108003cc 	andi	r2,r2,15
    618c:	1085883a 	add	r2,r2,r2
    6190:	1085883a 	add	r2,r2,r2
    6194:	e13fe604 	addi	r4,fp,-104
    6198:	2085883a 	add	r2,r4,r2
    619c:	10800704 	addi	r2,r2,28
    61a0:	10800017 	ldw	r2,0(r2)
    61a4:	1884f03a 	xor	r2,r3,r2
    61a8:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Parity(b,c,d) + e + K1_20_TO_39 + (W1[j&0x0f] = ROTL32(1, T1));
    61ac:	e0bfe617 	ldw	r2,-104(fp)
    61b0:	1006117a 	roli	r3,r2,5
    61b4:	e13fe717 	ldw	r4,-100(fp)
    61b8:	e0bfe817 	ldw	r2,-96(fp)
    61bc:	2088f03a 	xor	r4,r4,r2
    61c0:	e0bfe917 	ldw	r2,-92(fp)
    61c4:	2084f03a 	xor	r2,r4,r2
    61c8:	1887883a 	add	r3,r3,r2
    61cc:	e0bfea17 	ldw	r2,-88(fp)
    61d0:	1889883a 	add	r4,r3,r2
    61d4:	e0bfeb17 	ldw	r2,-84(fp)
    61d8:	108003cc 	andi	r2,r2,15
    61dc:	e0ffec17 	ldw	r3,-80(fp)
    61e0:	180a107a 	roli	r5,r3,1
    61e4:	1087883a 	add	r3,r2,r2
    61e8:	18c7883a 	add	r3,r3,r3
    61ec:	e1bfe604 	addi	r6,fp,-104
    61f0:	30c7883a 	add	r3,r6,r3
    61f4:	18c00704 	addi	r3,r3,28
    61f8:	19400015 	stw	r5,0(r3)
    61fc:	1085883a 	add	r2,r2,r2
    6200:	1085883a 	add	r2,r2,r2
    6204:	e0ffe604 	addi	r3,fp,-104
    6208:	1885883a 	add	r2,r3,r2
    620c:	10800704 	addi	r2,r2,28
    6210:	10800017 	ldw	r2,0(r2)
    6214:	2087883a 	add	r3,r4,r2
    6218:	009bb6b4 	movhi	r2,28378
    621c:	10bae844 	addi	r2,r2,-5215
    6220:	1885883a 	add	r2,r3,r2
    6224:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    6228:	e0bfe917 	ldw	r2,-92(fp)
    622c:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    6230:	e0bfe817 	ldw	r2,-96(fp)
    6234:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    6238:	e0ffe717 	ldw	r3,-100(fp)
    623c:	00800084 	movi	r2,2
    6240:	1884583a 	ror	r2,r3,r2
    6244:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    6248:	e0bfe617 	ldw	r2,-104(fp)
    624c:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    6250:	e0bfec17 	ldw	r2,-80(fp)
    6254:	e0bfe615 	stw	r2,-104(fp)
		j++;
    6258:	e0bfeb17 	ldw	r2,-84(fp)
    625c:	10800044 	addi	r2,r2,1
    6260:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 40);
    6264:	e0bfeb17 	ldw	r2,-84(fp)
    6268:	10800a10 	cmplti	r2,r2,40
    626c:	103fa81e 	bne	r2,zero,6110 <__alt_mem_epcs_flash_controller+0xfdffd110>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    6270:	e0bfeb17 	ldw	r2,-84(fp)
    6274:	10800344 	addi	r2,r2,13
    6278:	108003cc 	andi	r2,r2,15
    627c:	1085883a 	add	r2,r2,r2
    6280:	1085883a 	add	r2,r2,r2
    6284:	e13fe604 	addi	r4,fp,-104
    6288:	2085883a 	add	r2,r4,r2
    628c:	10800704 	addi	r2,r2,28
    6290:	10c00017 	ldw	r3,0(r2)
    6294:	e0bfeb17 	ldw	r2,-84(fp)
    6298:	10800204 	addi	r2,r2,8
    629c:	108003cc 	andi	r2,r2,15
    62a0:	1085883a 	add	r2,r2,r2
    62a4:	1085883a 	add	r2,r2,r2
    62a8:	e17fe604 	addi	r5,fp,-104
    62ac:	2885883a 	add	r2,r5,r2
    62b0:	10800704 	addi	r2,r2,28
    62b4:	10800017 	ldw	r2,0(r2)
    62b8:	1886f03a 	xor	r3,r3,r2
    62bc:	e0bfeb17 	ldw	r2,-84(fp)
    62c0:	10800084 	addi	r2,r2,2
    62c4:	108003cc 	andi	r2,r2,15
    62c8:	1085883a 	add	r2,r2,r2
    62cc:	1085883a 	add	r2,r2,r2
    62d0:	e1bfe604 	addi	r6,fp,-104
    62d4:	3085883a 	add	r2,r6,r2
    62d8:	10800704 	addi	r2,r2,28
    62dc:	10800017 	ldw	r2,0(r2)
    62e0:	1886f03a 	xor	r3,r3,r2
    62e4:	e0bfeb17 	ldw	r2,-84(fp)
    62e8:	108003cc 	andi	r2,r2,15
    62ec:	1085883a 	add	r2,r2,r2
    62f0:	1085883a 	add	r2,r2,r2
    62f4:	e13fe604 	addi	r4,fp,-104
    62f8:	2085883a 	add	r2,r4,r2
    62fc:	10800704 	addi	r2,r2,28
    6300:	10800017 	ldw	r2,0(r2)
    6304:	1884f03a 	xor	r2,r3,r2
    6308:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Maj(b,c,d) + e + K1_40_TO_59 + (W1[j&0x0f] = ROTL32(1, T1));
    630c:	e0bfe617 	ldw	r2,-104(fp)
    6310:	1006117a 	roli	r3,r2,5
    6314:	e13fe717 	ldw	r4,-100(fp)
    6318:	e0bfe817 	ldw	r2,-96(fp)
    631c:	2088703a 	and	r4,r4,r2
    6320:	e17fe717 	ldw	r5,-100(fp)
    6324:	e0bfe917 	ldw	r2,-92(fp)
    6328:	2884703a 	and	r2,r5,r2
    632c:	2088f03a 	xor	r4,r4,r2
    6330:	e17fe817 	ldw	r5,-96(fp)
    6334:	e0bfe917 	ldw	r2,-92(fp)
    6338:	2884703a 	and	r2,r5,r2
    633c:	2084f03a 	xor	r2,r4,r2
    6340:	1887883a 	add	r3,r3,r2
    6344:	e0bfea17 	ldw	r2,-88(fp)
    6348:	1889883a 	add	r4,r3,r2
    634c:	e0bfeb17 	ldw	r2,-84(fp)
    6350:	108003cc 	andi	r2,r2,15
    6354:	e0ffec17 	ldw	r3,-80(fp)
    6358:	180a107a 	roli	r5,r3,1
    635c:	1087883a 	add	r3,r2,r2
    6360:	18c7883a 	add	r3,r3,r3
    6364:	e1bfe604 	addi	r6,fp,-104
    6368:	30c7883a 	add	r3,r6,r3
    636c:	18c00704 	addi	r3,r3,28
    6370:	19400015 	stw	r5,0(r3)
    6374:	1085883a 	add	r2,r2,r2
    6378:	1085883a 	add	r2,r2,r2
    637c:	e0ffe604 	addi	r3,fp,-104
    6380:	1885883a 	add	r2,r3,r2
    6384:	10800704 	addi	r2,r2,28
    6388:	10800017 	ldw	r2,0(r2)
    638c:	2087883a 	add	r3,r4,r2
    6390:	00a3c734 	movhi	r2,36636
    6394:	10af3704 	addi	r2,r2,-17188
    6398:	1885883a 	add	r2,r3,r2
    639c:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    63a0:	e0bfe917 	ldw	r2,-92(fp)
    63a4:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    63a8:	e0bfe817 	ldw	r2,-96(fp)
    63ac:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    63b0:	e0ffe717 	ldw	r3,-100(fp)
    63b4:	00800084 	movi	r2,2
    63b8:	1884583a 	ror	r2,r3,r2
    63bc:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    63c0:	e0bfe617 	ldw	r2,-104(fp)
    63c4:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    63c8:	e0bfec17 	ldw	r2,-80(fp)
    63cc:	e0bfe615 	stw	r2,-104(fp)
		j++;
    63d0:	e0bfeb17 	ldw	r2,-84(fp)
    63d4:	10800044 	addi	r2,r2,1
    63d8:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 60);
    63dc:	e0bfeb17 	ldw	r2,-84(fp)
    63e0:	10800f10 	cmplti	r2,r2,60
    63e4:	103fa21e 	bne	r2,zero,6270 <__alt_mem_epcs_flash_controller+0xfdffd270>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    63e8:	e0bfeb17 	ldw	r2,-84(fp)
    63ec:	10800344 	addi	r2,r2,13
    63f0:	108003cc 	andi	r2,r2,15
    63f4:	1085883a 	add	r2,r2,r2
    63f8:	1085883a 	add	r2,r2,r2
    63fc:	e13fe604 	addi	r4,fp,-104
    6400:	2085883a 	add	r2,r4,r2
    6404:	10800704 	addi	r2,r2,28
    6408:	10c00017 	ldw	r3,0(r2)
    640c:	e0bfeb17 	ldw	r2,-84(fp)
    6410:	10800204 	addi	r2,r2,8
    6414:	108003cc 	andi	r2,r2,15
    6418:	1085883a 	add	r2,r2,r2
    641c:	1085883a 	add	r2,r2,r2
    6420:	e17fe604 	addi	r5,fp,-104
    6424:	2885883a 	add	r2,r5,r2
    6428:	10800704 	addi	r2,r2,28
    642c:	10800017 	ldw	r2,0(r2)
    6430:	1886f03a 	xor	r3,r3,r2
    6434:	e0bfeb17 	ldw	r2,-84(fp)
    6438:	10800084 	addi	r2,r2,2
    643c:	108003cc 	andi	r2,r2,15
    6440:	1085883a 	add	r2,r2,r2
    6444:	1085883a 	add	r2,r2,r2
    6448:	e1bfe604 	addi	r6,fp,-104
    644c:	3085883a 	add	r2,r6,r2
    6450:	10800704 	addi	r2,r2,28
    6454:	10800017 	ldw	r2,0(r2)
    6458:	1886f03a 	xor	r3,r3,r2
    645c:	e0bfeb17 	ldw	r2,-84(fp)
    6460:	108003cc 	andi	r2,r2,15
    6464:	1085883a 	add	r2,r2,r2
    6468:	1085883a 	add	r2,r2,r2
    646c:	e13fe604 	addi	r4,fp,-104
    6470:	2085883a 	add	r2,r4,r2
    6474:	10800704 	addi	r2,r2,28
    6478:	10800017 	ldw	r2,0(r2)
    647c:	1884f03a 	xor	r2,r3,r2
    6480:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Parity(b,c,d) + e + K1_60_TO_79 + (W1[j&0x0f] = ROTL32(1, T1));
    6484:	e0bfe617 	ldw	r2,-104(fp)
    6488:	1006117a 	roli	r3,r2,5
    648c:	e13fe717 	ldw	r4,-100(fp)
    6490:	e0bfe817 	ldw	r2,-96(fp)
    6494:	2088f03a 	xor	r4,r4,r2
    6498:	e0bfe917 	ldw	r2,-92(fp)
    649c:	2084f03a 	xor	r2,r4,r2
    64a0:	1887883a 	add	r3,r3,r2
    64a4:	e0bfea17 	ldw	r2,-88(fp)
    64a8:	1889883a 	add	r4,r3,r2
    64ac:	e0bfeb17 	ldw	r2,-84(fp)
    64b0:	108003cc 	andi	r2,r2,15
    64b4:	e0ffec17 	ldw	r3,-80(fp)
    64b8:	180a107a 	roli	r5,r3,1
    64bc:	1087883a 	add	r3,r2,r2
    64c0:	18c7883a 	add	r3,r3,r3
    64c4:	e1bfe604 	addi	r6,fp,-104
    64c8:	30c7883a 	add	r3,r6,r3
    64cc:	18c00704 	addi	r3,r3,28
    64d0:	19400015 	stw	r5,0(r3)
    64d4:	1085883a 	add	r2,r2,r2
    64d8:	1085883a 	add	r2,r2,r2
    64dc:	e0ffe604 	addi	r3,fp,-104
    64e0:	1885883a 	add	r2,r3,r2
    64e4:	10800704 	addi	r2,r2,28
    64e8:	10800017 	ldw	r2,0(r2)
    64ec:	2087883a 	add	r3,r4,r2
    64f0:	00b298f4 	movhi	r2,51811
    64f4:	10b07584 	addi	r2,r2,-15914
    64f8:	1885883a 	add	r2,r3,r2
    64fc:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    6500:	e0bfe917 	ldw	r2,-92(fp)
    6504:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    6508:	e0bfe817 	ldw	r2,-96(fp)
    650c:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    6510:	e0ffe717 	ldw	r3,-100(fp)
    6514:	00800084 	movi	r2,2
    6518:	1884583a 	ror	r2,r3,r2
    651c:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    6520:	e0bfe617 	ldw	r2,-104(fp)
    6524:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    6528:	e0bfec17 	ldw	r2,-80(fp)
    652c:	e0bfe615 	stw	r2,-104(fp)
		j++;
    6530:	e0bfeb17 	ldw	r2,-84(fp)
    6534:	10800044 	addi	r2,r2,1
    6538:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 80);
    653c:	e0bfeb17 	ldw	r2,-84(fp)
    6540:	10801410 	cmplti	r2,r2,80
    6544:	103fa81e 	bne	r2,zero,63e8 <__alt_mem_epcs_flash_controller+0xfdffd3e8>


	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    6548:	e0bffd17 	ldw	r2,-12(fp)
    654c:	10c00017 	ldw	r3,0(r2)
    6550:	e0bfe617 	ldw	r2,-104(fp)
    6554:	1887883a 	add	r3,r3,r2
    6558:	e0bfff17 	ldw	r2,-4(fp)
    655c:	10c00015 	stw	r3,0(r2)
	state_out[1] = state_in[1] + b;
    6560:	e0bfff17 	ldw	r2,-4(fp)
    6564:	10800104 	addi	r2,r2,4
    6568:	e0fffd17 	ldw	r3,-12(fp)
    656c:	18c00104 	addi	r3,r3,4
    6570:	19000017 	ldw	r4,0(r3)
    6574:	e0ffe717 	ldw	r3,-100(fp)
    6578:	20c7883a 	add	r3,r4,r3
    657c:	10c00015 	stw	r3,0(r2)
	state_out[2] = state_in[2] + c;
    6580:	e0bfff17 	ldw	r2,-4(fp)
    6584:	10800204 	addi	r2,r2,8
    6588:	e0fffd17 	ldw	r3,-12(fp)
    658c:	18c00204 	addi	r3,r3,8
    6590:	19000017 	ldw	r4,0(r3)
    6594:	e0ffe817 	ldw	r3,-96(fp)
    6598:	20c7883a 	add	r3,r4,r3
    659c:	10c00015 	stw	r3,0(r2)
	state_out[3] = state_in[3] + d;
    65a0:	e0bfff17 	ldw	r2,-4(fp)
    65a4:	10800304 	addi	r2,r2,12
    65a8:	e0fffd17 	ldw	r3,-12(fp)
    65ac:	18c00304 	addi	r3,r3,12
    65b0:	19000017 	ldw	r4,0(r3)
    65b4:	e0ffe917 	ldw	r3,-92(fp)
    65b8:	20c7883a 	add	r3,r4,r3
    65bc:	10c00015 	stw	r3,0(r2)
	state_out[4] = state_in[4] + e;
    65c0:	e0bfff17 	ldw	r2,-4(fp)
    65c4:	10800404 	addi	r2,r2,16
    65c8:	e0fffd17 	ldw	r3,-12(fp)
    65cc:	18c00404 	addi	r3,r3,16
    65d0:	19000017 	ldw	r4,0(r3)
    65d4:	e0ffea17 	ldw	r3,-88(fp)
    65d8:	20c7883a 	add	r3,r4,r3
    65dc:	10c00015 	stw	r3,0(r2)

	/* Clean up */
	a = b = c = d = e = T1 = 0;
    65e0:	e03fec15 	stw	zero,-80(fp)
    65e4:	e0bfec17 	ldw	r2,-80(fp)
    65e8:	e0bfea15 	stw	r2,-88(fp)
    65ec:	e0bfea17 	ldw	r2,-88(fp)
    65f0:	e0bfe915 	stw	r2,-92(fp)
    65f4:	e0bfe917 	ldw	r2,-92(fp)
    65f8:	e0bfe815 	stw	r2,-96(fp)
    65fc:	e0bfe817 	ldw	r2,-96(fp)
    6600:	e0bfe715 	stw	r2,-100(fp)
    6604:	e0bfe717 	ldw	r2,-100(fp)
    6608:	e0bfe615 	stw	r2,-104(fp)
}
    660c:	0001883a 	nop
    6610:	e037883a 	mov	sp,fp
    6614:	df000017 	ldw	fp,0(sp)
    6618:	dec00104 	addi	sp,sp,4
    661c:	f800283a 	ret

00006620 <trezor_sha1_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void trezor_sha1_Update(SHA1_CTX* context, const sha2_byte *data, size_t len) {
    6620:	deffef04 	addi	sp,sp,-68
    6624:	dfc01015 	stw	ra,64(sp)
    6628:	df000f15 	stw	fp,60(sp)
    662c:	dd400e15 	stw	r21,56(sp)
    6630:	dd000d15 	stw	r20,52(sp)
    6634:	dcc00c15 	stw	r19,48(sp)
    6638:	dc800b15 	stw	r18,44(sp)
    663c:	dc400a15 	stw	r17,40(sp)
    6640:	dc000915 	stw	r16,36(sp)
    6644:	df000f04 	addi	fp,sp,60
    6648:	e13ff715 	stw	r4,-36(fp)
    664c:	e17ff815 	stw	r5,-32(fp)
    6650:	e1bff915 	stw	r6,-28(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    6654:	e0bff917 	ldw	r2,-28(fp)
    6658:	1000e726 	beq	r2,zero,69f8 <trezor_sha1_Update+0x3d8>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount >> 3) % SHA1_BLOCK_LENGTH;
    665c:	e13ff717 	ldw	r4,-36(fp)
    6660:	20800517 	ldw	r2,20(r4)
    6664:	20c00617 	ldw	r3,24(r4)
    6668:	1808977a 	slli	r4,r3,29
    666c:	100ed0fa 	srli	r7,r2,3
    6670:	21ceb03a 	or	r7,r4,r7
    6674:	1810d0fa 	srli	r8,r3,3
    6678:	3805883a 	mov	r2,r7
    667c:	10800fcc 	andi	r2,r2,63
    6680:	e0bff315 	stw	r2,-52(fp)
	if (usedspace > 0) {
    6684:	e0bff317 	ldw	r2,-52(fp)
    6688:	1000bb26 	beq	r2,zero,6978 <trezor_sha1_Update+0x358>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA1_BLOCK_LENGTH - usedspace;
    668c:	00c01004 	movi	r3,64
    6690:	e0bff317 	ldw	r2,-52(fp)
    6694:	1885c83a 	sub	r2,r3,r2
    6698:	e0bff415 	stw	r2,-48(fp)

		if (len >= freespace) {
    669c:	e0fff917 	ldw	r3,-28(fp)
    66a0:	e0bff417 	ldw	r2,-48(fp)
    66a4:	18804f36 	bltu	r3,r2,67e4 <trezor_sha1_Update+0x1c4>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    66a8:	e0bff717 	ldw	r2,-36(fp)
    66ac:	10c00704 	addi	r3,r2,28
    66b0:	e0bff317 	ldw	r2,-52(fp)
    66b4:	1885883a 	add	r2,r3,r2
    66b8:	e1bff417 	ldw	r6,-48(fp)
    66bc:	e17ff817 	ldw	r5,-32(fp)
    66c0:	1009883a 	mov	r4,r2
    66c4:	000a0f40 	call	a0f4 <memcpy>
			context->bitcount += freespace << 3;
    66c8:	e0bff717 	ldw	r2,-36(fp)
    66cc:	11000517 	ldw	r4,20(r2)
    66d0:	11400617 	ldw	r5,24(r2)
    66d4:	e0bff417 	ldw	r2,-48(fp)
    66d8:	100490fa 	slli	r2,r2,3
    66dc:	1029883a 	mov	r20,r2
    66e0:	002b883a 	mov	r21,zero
    66e4:	2505883a 	add	r2,r4,r20
    66e8:	110d803a 	cmpltu	r6,r2,r4
    66ec:	2d47883a 	add	r3,r5,r21
    66f0:	30c9883a 	add	r4,r6,r3
    66f4:	2007883a 	mov	r3,r4
    66f8:	1009883a 	mov	r4,r2
    66fc:	180b883a 	mov	r5,r3
    6700:	e0bff717 	ldw	r2,-36(fp)
    6704:	11000515 	stw	r4,20(r2)
    6708:	11400615 	stw	r5,24(r2)
			len -= freespace;
    670c:	e0fff917 	ldw	r3,-28(fp)
    6710:	e0bff417 	ldw	r2,-48(fp)
    6714:	1885c83a 	sub	r2,r3,r2
    6718:	e0bff915 	stw	r2,-28(fp)
			data += freespace;
    671c:	e0fff817 	ldw	r3,-32(fp)
    6720:	e0bff417 	ldw	r2,-48(fp)
    6724:	1885883a 	add	r2,r3,r2
    6728:	e0bff815 	stw	r2,-32(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    672c:	e03ff115 	stw	zero,-60(fp)
    6730:	00002006 	br	67b4 <trezor_sha1_Update+0x194>
				REVERSE32(context->buffer[j],context->buffer[j]);
    6734:	e0fff717 	ldw	r3,-36(fp)
    6738:	e0bff117 	ldw	r2,-60(fp)
    673c:	108001c4 	addi	r2,r2,7
    6740:	1085883a 	add	r2,r2,r2
    6744:	1085883a 	add	r2,r2,r2
    6748:	1885883a 	add	r2,r3,r2
    674c:	10800017 	ldw	r2,0(r2)
    6750:	e0bff515 	stw	r2,-44(fp)
    6754:	e0bff517 	ldw	r2,-44(fp)
    6758:	1004143a 	roli	r2,r2,16
    675c:	e0bff515 	stw	r2,-44(fp)
    6760:	e0fff517 	ldw	r3,-44(fp)
    6764:	00bfc074 	movhi	r2,65281
    6768:	10bfc004 	addi	r2,r2,-256
    676c:	1884703a 	and	r2,r3,r2
    6770:	1006d23a 	srli	r3,r2,8
    6774:	e13ff517 	ldw	r4,-44(fp)
    6778:	00803ff4 	movhi	r2,255
    677c:	10803fc4 	addi	r2,r2,255
    6780:	2084703a 	and	r2,r4,r2
    6784:	1004923a 	slli	r2,r2,8
    6788:	1886b03a 	or	r3,r3,r2
    678c:	e13ff717 	ldw	r4,-36(fp)
    6790:	e0bff117 	ldw	r2,-60(fp)
    6794:	108001c4 	addi	r2,r2,7
    6798:	1085883a 	add	r2,r2,r2
    679c:	1085883a 	add	r2,r2,r2
    67a0:	2085883a 	add	r2,r4,r2
    67a4:	10c00015 	stw	r3,0(r2)
			context->bitcount += freespace << 3;
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    67a8:	e0bff117 	ldw	r2,-60(fp)
    67ac:	10800044 	addi	r2,r2,1
    67b0:	e0bff115 	stw	r2,-60(fp)
    67b4:	e0bff117 	ldw	r2,-60(fp)
    67b8:	10800410 	cmplti	r2,r2,16
    67bc:	103fdd1e 	bne	r2,zero,6734 <__alt_mem_epcs_flash_controller+0xfdffd734>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			trezor_sha1_Transform(context->state, context->buffer, context->state);
    67c0:	e0fff717 	ldw	r3,-36(fp)
    67c4:	e0bff717 	ldw	r2,-36(fp)
    67c8:	10800704 	addi	r2,r2,28
    67cc:	e13ff717 	ldw	r4,-36(fp)
    67d0:	200d883a 	mov	r6,r4
    67d4:	100b883a 	mov	r5,r2
    67d8:	1809883a 	mov	r4,r3
    67dc:	0005e740 	call	5e74 <trezor_sha1_Transform>
    67e0:	00006506 	br	6978 <trezor_sha1_Update+0x358>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    67e4:	e0bff717 	ldw	r2,-36(fp)
    67e8:	10c00704 	addi	r3,r2,28
    67ec:	e0bff317 	ldw	r2,-52(fp)
    67f0:	1885883a 	add	r2,r3,r2
    67f4:	e1bff917 	ldw	r6,-28(fp)
    67f8:	e17ff817 	ldw	r5,-32(fp)
    67fc:	1009883a 	mov	r4,r2
    6800:	000a0f40 	call	a0f4 <memcpy>
			context->bitcount += len << 3;
    6804:	e0bff717 	ldw	r2,-36(fp)
    6808:	11000517 	ldw	r4,20(r2)
    680c:	11400617 	ldw	r5,24(r2)
    6810:	e0bff917 	ldw	r2,-28(fp)
    6814:	100490fa 	slli	r2,r2,3
    6818:	1025883a 	mov	r18,r2
    681c:	0027883a 	mov	r19,zero
    6820:	2485883a 	add	r2,r4,r18
    6824:	110d803a 	cmpltu	r6,r2,r4
    6828:	2cc7883a 	add	r3,r5,r19
    682c:	30c9883a 	add	r4,r6,r3
    6830:	2007883a 	mov	r3,r4
    6834:	1009883a 	mov	r4,r2
    6838:	180b883a 	mov	r5,r3
    683c:	e0bff717 	ldw	r2,-36(fp)
    6840:	11000515 	stw	r4,20(r2)
    6844:	11400615 	stw	r5,24(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    6848:	e03ff415 	stw	zero,-48(fp)
    684c:	e0bff417 	ldw	r2,-48(fp)
    6850:	e0bff315 	stw	r2,-52(fp)
			return;
    6854:	00006906 	br	69fc <trezor_sha1_Update+0x3dc>
		}
	}
	while (len >= SHA1_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA1_BLOCK_LENGTH);
    6858:	e0bff717 	ldw	r2,-36(fp)
    685c:	10800704 	addi	r2,r2,28
    6860:	01801004 	movi	r6,64
    6864:	e17ff817 	ldw	r5,-32(fp)
    6868:	1009883a 	mov	r4,r2
    686c:	000a0f40 	call	a0f4 <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    6870:	e03ff215 	stw	zero,-56(fp)
    6874:	00002006 	br	68f8 <trezor_sha1_Update+0x2d8>
			REVERSE32(context->buffer[j],context->buffer[j]);
    6878:	e0fff717 	ldw	r3,-36(fp)
    687c:	e0bff217 	ldw	r2,-56(fp)
    6880:	108001c4 	addi	r2,r2,7
    6884:	1085883a 	add	r2,r2,r2
    6888:	1085883a 	add	r2,r2,r2
    688c:	1885883a 	add	r2,r3,r2
    6890:	10800017 	ldw	r2,0(r2)
    6894:	e0bff615 	stw	r2,-40(fp)
    6898:	e0bff617 	ldw	r2,-40(fp)
    689c:	1004143a 	roli	r2,r2,16
    68a0:	e0bff615 	stw	r2,-40(fp)
    68a4:	e0fff617 	ldw	r3,-40(fp)
    68a8:	00bfc074 	movhi	r2,65281
    68ac:	10bfc004 	addi	r2,r2,-256
    68b0:	1884703a 	and	r2,r3,r2
    68b4:	1006d23a 	srli	r3,r2,8
    68b8:	e13ff617 	ldw	r4,-40(fp)
    68bc:	00803ff4 	movhi	r2,255
    68c0:	10803fc4 	addi	r2,r2,255
    68c4:	2084703a 	and	r2,r4,r2
    68c8:	1004923a 	slli	r2,r2,8
    68cc:	1886b03a 	or	r3,r3,r2
    68d0:	e13ff717 	ldw	r4,-36(fp)
    68d4:	e0bff217 	ldw	r2,-56(fp)
    68d8:	108001c4 	addi	r2,r2,7
    68dc:	1085883a 	add	r2,r2,r2
    68e0:	1085883a 	add	r2,r2,r2
    68e4:	2085883a 	add	r2,r4,r2
    68e8:	10c00015 	stw	r3,0(r2)
	while (len >= SHA1_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA1_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    68ec:	e0bff217 	ldw	r2,-56(fp)
    68f0:	10800044 	addi	r2,r2,1
    68f4:	e0bff215 	stw	r2,-56(fp)
    68f8:	e0bff217 	ldw	r2,-56(fp)
    68fc:	10800410 	cmplti	r2,r2,16
    6900:	103fdd1e 	bne	r2,zero,6878 <__alt_mem_epcs_flash_controller+0xfdffd878>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		trezor_sha1_Transform(context->state, context->buffer, context->state);
    6904:	e0fff717 	ldw	r3,-36(fp)
    6908:	e0bff717 	ldw	r2,-36(fp)
    690c:	10800704 	addi	r2,r2,28
    6910:	e13ff717 	ldw	r4,-36(fp)
    6914:	200d883a 	mov	r6,r4
    6918:	100b883a 	mov	r5,r2
    691c:	1809883a 	mov	r4,r3
    6920:	0005e740 	call	5e74 <trezor_sha1_Transform>
		context->bitcount += SHA1_BLOCK_LENGTH << 3;
    6924:	e0bff717 	ldw	r2,-36(fp)
    6928:	11000517 	ldw	r4,20(r2)
    692c:	11400617 	ldw	r5,24(r2)
    6930:	01808004 	movi	r6,512
    6934:	000f883a 	mov	r7,zero
    6938:	2185883a 	add	r2,r4,r6
    693c:	1111803a 	cmpltu	r8,r2,r4
    6940:	29c7883a 	add	r3,r5,r7
    6944:	40c9883a 	add	r4,r8,r3
    6948:	2007883a 	mov	r3,r4
    694c:	1009883a 	mov	r4,r2
    6950:	180b883a 	mov	r5,r3
    6954:	e0bff717 	ldw	r2,-36(fp)
    6958:	11000515 	stw	r4,20(r2)
    695c:	11400615 	stw	r5,24(r2)
		len -= SHA1_BLOCK_LENGTH;
    6960:	e0bff917 	ldw	r2,-28(fp)
    6964:	10bff004 	addi	r2,r2,-64
    6968:	e0bff915 	stw	r2,-28(fp)
		data += SHA1_BLOCK_LENGTH;
    696c:	e0bff817 	ldw	r2,-32(fp)
    6970:	10801004 	addi	r2,r2,64
    6974:	e0bff815 	stw	r2,-32(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA1_BLOCK_LENGTH) {
    6978:	e0bff917 	ldw	r2,-28(fp)
    697c:	10801028 	cmpgeui	r2,r2,64
    6980:	103fb51e 	bne	r2,zero,6858 <__alt_mem_epcs_flash_controller+0xfdffd858>
		trezor_sha1_Transform(context->state, context->buffer, context->state);
		context->bitcount += SHA1_BLOCK_LENGTH << 3;
		len -= SHA1_BLOCK_LENGTH;
		data += SHA1_BLOCK_LENGTH;
	}
	if (len > 0) {
    6984:	e0bff917 	ldw	r2,-28(fp)
    6988:	10001726 	beq	r2,zero,69e8 <trezor_sha1_Update+0x3c8>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    698c:	e0bff717 	ldw	r2,-36(fp)
    6990:	10800704 	addi	r2,r2,28
    6994:	e1bff917 	ldw	r6,-28(fp)
    6998:	e17ff817 	ldw	r5,-32(fp)
    699c:	1009883a 	mov	r4,r2
    69a0:	000a0f40 	call	a0f4 <memcpy>
		context->bitcount += len << 3;
    69a4:	e0bff717 	ldw	r2,-36(fp)
    69a8:	11000517 	ldw	r4,20(r2)
    69ac:	11400617 	ldw	r5,24(r2)
    69b0:	e0bff917 	ldw	r2,-28(fp)
    69b4:	100490fa 	slli	r2,r2,3
    69b8:	1021883a 	mov	r16,r2
    69bc:	0023883a 	mov	r17,zero
    69c0:	2405883a 	add	r2,r4,r16
    69c4:	110d803a 	cmpltu	r6,r2,r4
    69c8:	2c47883a 	add	r3,r5,r17
    69cc:	30c9883a 	add	r4,r6,r3
    69d0:	2007883a 	mov	r3,r4
    69d4:	1009883a 	mov	r4,r2
    69d8:	180b883a 	mov	r5,r3
    69dc:	e0bff717 	ldw	r2,-36(fp)
    69e0:	11000515 	stw	r4,20(r2)
    69e4:	11400615 	stw	r5,24(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    69e8:	e03ff415 	stw	zero,-48(fp)
    69ec:	e0bff417 	ldw	r2,-48(fp)
    69f0:	e0bff315 	stw	r2,-52(fp)
    69f4:	00000106 	br	69fc <trezor_sha1_Update+0x3dc>
void trezor_sha1_Update(SHA1_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    69f8:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		context->bitcount += len << 3;
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    69fc:	e6fffa04 	addi	sp,fp,-24
    6a00:	dfc00717 	ldw	ra,28(sp)
    6a04:	df000617 	ldw	fp,24(sp)
    6a08:	dd400517 	ldw	r21,20(sp)
    6a0c:	dd000417 	ldw	r20,16(sp)
    6a10:	dcc00317 	ldw	r19,12(sp)
    6a14:	dc800217 	ldw	r18,8(sp)
    6a18:	dc400117 	ldw	r17,4(sp)
    6a1c:	dc000017 	ldw	r16,0(sp)
    6a20:	dec00804 	addi	sp,sp,32
    6a24:	f800283a 	ret

00006a28 <trezor_sha1_Final>:

void trezor_sha1_Final(SHA1_CTX* context, sha2_byte digest[]) {
    6a28:	defff304 	addi	sp,sp,-52
    6a2c:	dfc00c15 	stw	ra,48(sp)
    6a30:	df000b15 	stw	fp,44(sp)
    6a34:	dc400a15 	stw	r17,40(sp)
    6a38:	dc000915 	stw	r16,36(sp)
    6a3c:	df000b04 	addi	fp,sp,44
    6a40:	e13ffc15 	stw	r4,-16(fp)
    6a44:	e17ffd15 	stw	r5,-12(fp)
	unsigned int	usedspace;

	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    6a48:	e0bffd17 	ldw	r2,-12(fp)
    6a4c:	1000b826 	beq	r2,zero,6d30 <trezor_sha1_Final+0x308>
		usedspace = (context->bitcount >> 3) % SHA1_BLOCK_LENGTH;
    6a50:	e13ffc17 	ldw	r4,-16(fp)
    6a54:	20800517 	ldw	r2,20(r4)
    6a58:	20c00617 	ldw	r3,24(r4)
    6a5c:	1808977a 	slli	r4,r3,29
    6a60:	100cd0fa 	srli	r6,r2,3
    6a64:	218cb03a 	or	r6,r4,r6
    6a68:	180ed0fa 	srli	r7,r3,3
    6a6c:	3005883a 	mov	r2,r6
    6a70:	10800fcc 	andi	r2,r2,63
    6a74:	e0bff515 	stw	r2,-44(fp)
		/* Begin padding with a 1 bit: */
		((uint8_t*)context->buffer)[usedspace++] = 0x80;
    6a78:	e0bffc17 	ldw	r2,-16(fp)
    6a7c:	10c00704 	addi	r3,r2,28
    6a80:	e0bff517 	ldw	r2,-44(fp)
    6a84:	11000044 	addi	r4,r2,1
    6a88:	e13ff515 	stw	r4,-44(fp)
    6a8c:	1885883a 	add	r2,r3,r2
    6a90:	00ffe004 	movi	r3,-128
    6a94:	10c00005 	stb	r3,0(r2)

		if (usedspace > SHA1_SHORT_BLOCK_LENGTH) {
    6a98:	e0bff517 	ldw	r2,-44(fp)
    6a9c:	10800e70 	cmpltui	r2,r2,57
    6aa0:	1000371e 	bne	r2,zero,6b80 <trezor_sha1_Final+0x158>
			memzero(((uint8_t*)context->buffer) + usedspace, SHA1_BLOCK_LENGTH - usedspace);
    6aa4:	e0bffc17 	ldw	r2,-16(fp)
    6aa8:	10c00704 	addi	r3,r2,28
    6aac:	e0bff517 	ldw	r2,-44(fp)
    6ab0:	1889883a 	add	r4,r3,r2
    6ab4:	00c01004 	movi	r3,64
    6ab8:	e0bff517 	ldw	r2,-44(fp)
    6abc:	1885c83a 	sub	r2,r3,r2
    6ac0:	100b883a 	mov	r5,r2
    6ac4:	00018040 	call	1804 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    6ac8:	e03ff615 	stw	zero,-40(fp)
    6acc:	00002006 	br	6b50 <trezor_sha1_Final+0x128>
				REVERSE32(context->buffer[j],context->buffer[j]);
    6ad0:	e0fffc17 	ldw	r3,-16(fp)
    6ad4:	e0bff617 	ldw	r2,-40(fp)
    6ad8:	108001c4 	addi	r2,r2,7
    6adc:	1085883a 	add	r2,r2,r2
    6ae0:	1085883a 	add	r2,r2,r2
    6ae4:	1885883a 	add	r2,r3,r2
    6ae8:	10800017 	ldw	r2,0(r2)
    6aec:	e0bff915 	stw	r2,-28(fp)
    6af0:	e0bff917 	ldw	r2,-28(fp)
    6af4:	1004143a 	roli	r2,r2,16
    6af8:	e0bff915 	stw	r2,-28(fp)
    6afc:	e0fff917 	ldw	r3,-28(fp)
    6b00:	00bfc074 	movhi	r2,65281
    6b04:	10bfc004 	addi	r2,r2,-256
    6b08:	1884703a 	and	r2,r3,r2
    6b0c:	1006d23a 	srli	r3,r2,8
    6b10:	e13ff917 	ldw	r4,-28(fp)
    6b14:	00803ff4 	movhi	r2,255
    6b18:	10803fc4 	addi	r2,r2,255
    6b1c:	2084703a 	and	r2,r4,r2
    6b20:	1004923a 	slli	r2,r2,8
    6b24:	1886b03a 	or	r3,r3,r2
    6b28:	e13ffc17 	ldw	r4,-16(fp)
    6b2c:	e0bff617 	ldw	r2,-40(fp)
    6b30:	108001c4 	addi	r2,r2,7
    6b34:	1085883a 	add	r2,r2,r2
    6b38:	1085883a 	add	r2,r2,r2
    6b3c:	2085883a 	add	r2,r4,r2
    6b40:	10c00015 	stw	r3,0(r2)
		if (usedspace > SHA1_SHORT_BLOCK_LENGTH) {
			memzero(((uint8_t*)context->buffer) + usedspace, SHA1_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    6b44:	e0bff617 	ldw	r2,-40(fp)
    6b48:	10800044 	addi	r2,r2,1
    6b4c:	e0bff615 	stw	r2,-40(fp)
    6b50:	e0bff617 	ldw	r2,-40(fp)
    6b54:	10800410 	cmplti	r2,r2,16
    6b58:	103fdd1e 	bne	r2,zero,6ad0 <__alt_mem_epcs_flash_controller+0xfdffdad0>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			/* Do second-to-last transform: */
			trezor_sha1_Transform(context->state, context->buffer, context->state);
    6b5c:	e0fffc17 	ldw	r3,-16(fp)
    6b60:	e0bffc17 	ldw	r2,-16(fp)
    6b64:	10800704 	addi	r2,r2,28
    6b68:	e13ffc17 	ldw	r4,-16(fp)
    6b6c:	200d883a 	mov	r6,r4
    6b70:	100b883a 	mov	r5,r2
    6b74:	1809883a 	mov	r4,r3
    6b78:	0005e740 	call	5e74 <trezor_sha1_Transform>

			/* And prepare the last transform: */
			usedspace = 0;
    6b7c:	e03ff515 	stw	zero,-44(fp)
		}
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA1_SHORT_BLOCK_LENGTH - usedspace);
    6b80:	e0bffc17 	ldw	r2,-16(fp)
    6b84:	10c00704 	addi	r3,r2,28
    6b88:	e0bff517 	ldw	r2,-44(fp)
    6b8c:	1889883a 	add	r4,r3,r2
    6b90:	00c00e04 	movi	r3,56
    6b94:	e0bff517 	ldw	r2,-44(fp)
    6b98:	1885c83a 	sub	r2,r3,r2
    6b9c:	100b883a 	mov	r5,r2
    6ba0:	00018040 	call	1804 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    6ba4:	e03ff715 	stw	zero,-36(fp)
    6ba8:	00002006 	br	6c2c <trezor_sha1_Final+0x204>
			REVERSE32(context->buffer[j],context->buffer[j]);
    6bac:	e0fffc17 	ldw	r3,-16(fp)
    6bb0:	e0bff717 	ldw	r2,-36(fp)
    6bb4:	108001c4 	addi	r2,r2,7
    6bb8:	1085883a 	add	r2,r2,r2
    6bbc:	1085883a 	add	r2,r2,r2
    6bc0:	1885883a 	add	r2,r3,r2
    6bc4:	10800017 	ldw	r2,0(r2)
    6bc8:	e0bffa15 	stw	r2,-24(fp)
    6bcc:	e0bffa17 	ldw	r2,-24(fp)
    6bd0:	1004143a 	roli	r2,r2,16
    6bd4:	e0bffa15 	stw	r2,-24(fp)
    6bd8:	e0fffa17 	ldw	r3,-24(fp)
    6bdc:	00bfc074 	movhi	r2,65281
    6be0:	10bfc004 	addi	r2,r2,-256
    6be4:	1884703a 	and	r2,r3,r2
    6be8:	1006d23a 	srli	r3,r2,8
    6bec:	e13ffa17 	ldw	r4,-24(fp)
    6bf0:	00803ff4 	movhi	r2,255
    6bf4:	10803fc4 	addi	r2,r2,255
    6bf8:	2084703a 	and	r2,r4,r2
    6bfc:	1004923a 	slli	r2,r2,8
    6c00:	1886b03a 	or	r3,r3,r2
    6c04:	e13ffc17 	ldw	r4,-16(fp)
    6c08:	e0bff717 	ldw	r2,-36(fp)
    6c0c:	108001c4 	addi	r2,r2,7
    6c10:	1085883a 	add	r2,r2,r2
    6c14:	1085883a 	add	r2,r2,r2
    6c18:	2085883a 	add	r2,r4,r2
    6c1c:	10c00015 	stw	r3,0(r2)
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA1_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    6c20:	e0bff717 	ldw	r2,-36(fp)
    6c24:	10800044 	addi	r2,r2,1
    6c28:	e0bff715 	stw	r2,-36(fp)
    6c2c:	e0bff717 	ldw	r2,-36(fp)
    6c30:	10800390 	cmplti	r2,r2,14
    6c34:	103fdd1e 	bne	r2,zero,6bac <__alt_mem_epcs_flash_controller+0xfdffdbac>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Set the bit count: */
		context->buffer[14] = context->bitcount >> 32;
    6c38:	e13ffc17 	ldw	r4,-16(fp)
    6c3c:	20800517 	ldw	r2,20(r4)
    6c40:	20c00617 	ldw	r3,24(r4)
    6c44:	1820d83a 	srl	r16,r3,zero
    6c48:	0023883a 	mov	r17,zero
    6c4c:	8007883a 	mov	r3,r16
    6c50:	e0bffc17 	ldw	r2,-16(fp)
    6c54:	10c01515 	stw	r3,84(r2)
		context->buffer[15] = context->bitcount & 0xffffffff;
    6c58:	e13ffc17 	ldw	r4,-16(fp)
    6c5c:	20800517 	ldw	r2,20(r4)
    6c60:	20c00617 	ldw	r3,24(r4)
    6c64:	1007883a 	mov	r3,r2
    6c68:	e0bffc17 	ldw	r2,-16(fp)
    6c6c:	10c01615 	stw	r3,88(r2)

		/* Final transform: */
		trezor_sha1_Transform(context->state, context->buffer, context->state);
    6c70:	e0fffc17 	ldw	r3,-16(fp)
    6c74:	e0bffc17 	ldw	r2,-16(fp)
    6c78:	10800704 	addi	r2,r2,28
    6c7c:	e13ffc17 	ldw	r4,-16(fp)
    6c80:	200d883a 	mov	r6,r4
    6c84:	100b883a 	mov	r5,r2
    6c88:	1809883a 	mov	r4,r3
    6c8c:	0005e740 	call	5e74 <trezor_sha1_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 5; j++) {
    6c90:	e03ff815 	stw	zero,-32(fp)
    6c94:	00001e06 	br	6d10 <trezor_sha1_Final+0x2e8>
			REVERSE32(context->state[j],context->state[j]);
    6c98:	e0fffc17 	ldw	r3,-16(fp)
    6c9c:	e0bff817 	ldw	r2,-32(fp)
    6ca0:	1085883a 	add	r2,r2,r2
    6ca4:	1085883a 	add	r2,r2,r2
    6ca8:	1885883a 	add	r2,r3,r2
    6cac:	10800017 	ldw	r2,0(r2)
    6cb0:	e0bffb15 	stw	r2,-20(fp)
    6cb4:	e0bffb17 	ldw	r2,-20(fp)
    6cb8:	1004143a 	roli	r2,r2,16
    6cbc:	e0bffb15 	stw	r2,-20(fp)
    6cc0:	e0fffb17 	ldw	r3,-20(fp)
    6cc4:	00bfc074 	movhi	r2,65281
    6cc8:	10bfc004 	addi	r2,r2,-256
    6ccc:	1884703a 	and	r2,r3,r2
    6cd0:	1006d23a 	srli	r3,r2,8
    6cd4:	e13ffb17 	ldw	r4,-20(fp)
    6cd8:	00803ff4 	movhi	r2,255
    6cdc:	10803fc4 	addi	r2,r2,255
    6ce0:	2084703a 	and	r2,r4,r2
    6ce4:	1004923a 	slli	r2,r2,8
    6ce8:	1886b03a 	or	r3,r3,r2
    6cec:	e13ffc17 	ldw	r4,-16(fp)
    6cf0:	e0bff817 	ldw	r2,-32(fp)
    6cf4:	1085883a 	add	r2,r2,r2
    6cf8:	1085883a 	add	r2,r2,r2
    6cfc:	2085883a 	add	r2,r4,r2
    6d00:	10c00015 	stw	r3,0(r2)
		/* Final transform: */
		trezor_sha1_Transform(context->state, context->buffer, context->state);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 5; j++) {
    6d04:	e0bff817 	ldw	r2,-32(fp)
    6d08:	10800044 	addi	r2,r2,1
    6d0c:	e0bff815 	stw	r2,-32(fp)
    6d10:	e0bff817 	ldw	r2,-32(fp)
    6d14:	10800150 	cmplti	r2,r2,5
    6d18:	103fdf1e 	bne	r2,zero,6c98 <__alt_mem_epcs_flash_controller+0xfdffdc98>
			REVERSE32(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA1_DIGEST_LENGTH);
    6d1c:	e0bffc17 	ldw	r2,-16(fp)
    6d20:	01800504 	movi	r6,20
    6d24:	100b883a 	mov	r5,r2
    6d28:	e13ffd17 	ldw	r4,-12(fp)
    6d2c:	000a0f40 	call	a0f4 <memcpy>
	}

	/* Clean up state data: */
	memzero(context, sizeof(SHA1_CTX));
    6d30:	01401704 	movi	r5,92
    6d34:	e13ffc17 	ldw	r4,-16(fp)
    6d38:	00018040 	call	1804 <memzero>
	usedspace = 0;
    6d3c:	e03ff515 	stw	zero,-44(fp)
}
    6d40:	0001883a 	nop
    6d44:	e6fffe04 	addi	sp,fp,-8
    6d48:	dfc00317 	ldw	ra,12(sp)
    6d4c:	df000217 	ldw	fp,8(sp)
    6d50:	dc400117 	ldw	r17,4(sp)
    6d54:	dc000017 	ldw	r16,0(sp)
    6d58:	dec00404 	addi	sp,sp,16
    6d5c:	f800283a 	ret

00006d60 <trezor_sha1_End>:

char *trezor_sha1_End(SHA1_CTX* context, char buffer[]) {
    6d60:	defff504 	addi	sp,sp,-44
    6d64:	dfc00a15 	stw	ra,40(sp)
    6d68:	df000915 	stw	fp,36(sp)
    6d6c:	df000904 	addi	fp,sp,36
    6d70:	e13ffe15 	stw	r4,-8(fp)
    6d74:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA1_DIGEST_LENGTH], *d = digest;
    6d78:	e0bff904 	addi	r2,fp,-28
    6d7c:	e0bff715 	stw	r2,-36(fp)
	int		i;

	if (buffer != (char*)0) {
    6d80:	e0bfff17 	ldw	r2,-4(fp)
    6d84:	10002926 	beq	r2,zero,6e2c <trezor_sha1_End+0xcc>
		trezor_sha1_Final(context, digest);
    6d88:	e0bff904 	addi	r2,fp,-28
    6d8c:	100b883a 	mov	r5,r2
    6d90:	e13ffe17 	ldw	r4,-8(fp)
    6d94:	0006a280 	call	6a28 <trezor_sha1_Final>

		for (i = 0; i < SHA1_DIGEST_LENGTH; i++) {
    6d98:	e03ff815 	stw	zero,-32(fp)
    6d9c:	00001d06 	br	6e14 <trezor_sha1_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    6da0:	e0bfff17 	ldw	r2,-4(fp)
    6da4:	10c00044 	addi	r3,r2,1
    6da8:	e0ffff15 	stw	r3,-4(fp)
    6dac:	d1200017 	ldw	r4,-32768(gp)
    6db0:	e0fff717 	ldw	r3,-36(fp)
    6db4:	18c00003 	ldbu	r3,0(r3)
    6db8:	18c03fcc 	andi	r3,r3,255
    6dbc:	1806d13a 	srli	r3,r3,4
    6dc0:	18c03fcc 	andi	r3,r3,255
    6dc4:	20c7883a 	add	r3,r4,r3
    6dc8:	18c00003 	ldbu	r3,0(r3)
    6dcc:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    6dd0:	e0bfff17 	ldw	r2,-4(fp)
    6dd4:	10c00044 	addi	r3,r2,1
    6dd8:	e0ffff15 	stw	r3,-4(fp)
    6ddc:	d1200017 	ldw	r4,-32768(gp)
    6de0:	e0fff717 	ldw	r3,-36(fp)
    6de4:	18c00003 	ldbu	r3,0(r3)
    6de8:	18c03fcc 	andi	r3,r3,255
    6dec:	18c003cc 	andi	r3,r3,15
    6df0:	20c7883a 	add	r3,r4,r3
    6df4:	18c00003 	ldbu	r3,0(r3)
    6df8:	10c00005 	stb	r3,0(r2)
			d++;
    6dfc:	e0bff717 	ldw	r2,-36(fp)
    6e00:	10800044 	addi	r2,r2,1
    6e04:	e0bff715 	stw	r2,-36(fp)
	int		i;

	if (buffer != (char*)0) {
		trezor_sha1_Final(context, digest);

		for (i = 0; i < SHA1_DIGEST_LENGTH; i++) {
    6e08:	e0bff817 	ldw	r2,-32(fp)
    6e0c:	10800044 	addi	r2,r2,1
    6e10:	e0bff815 	stw	r2,-32(fp)
    6e14:	e0bff817 	ldw	r2,-32(fp)
    6e18:	10800510 	cmplti	r2,r2,20
    6e1c:	103fe01e 	bne	r2,zero,6da0 <__alt_mem_epcs_flash_controller+0xfdffdda0>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    6e20:	e0bfff17 	ldw	r2,-4(fp)
    6e24:	10000005 	stb	zero,0(r2)
    6e28:	00000306 	br	6e38 <trezor_sha1_End+0xd8>
	} else {
		memzero(context, sizeof(SHA1_CTX));
    6e2c:	01401704 	movi	r5,92
    6e30:	e13ffe17 	ldw	r4,-8(fp)
    6e34:	00018040 	call	1804 <memzero>
	}
	memzero(digest, SHA1_DIGEST_LENGTH);
    6e38:	e0bff904 	addi	r2,fp,-28
    6e3c:	01400504 	movi	r5,20
    6e40:	1009883a 	mov	r4,r2
    6e44:	00018040 	call	1804 <memzero>
	return buffer;
    6e48:	e0bfff17 	ldw	r2,-4(fp)
}
    6e4c:	e037883a 	mov	sp,fp
    6e50:	dfc00117 	ldw	ra,4(sp)
    6e54:	df000017 	ldw	fp,0(sp)
    6e58:	dec00204 	addi	sp,sp,8
    6e5c:	f800283a 	ret

00006e60 <trezor_sha1_Raw>:

void trezor_sha1_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA1_DIGEST_LENGTH]) {
    6e60:	deffe404 	addi	sp,sp,-112
    6e64:	dfc01b15 	stw	ra,108(sp)
    6e68:	df001a15 	stw	fp,104(sp)
    6e6c:	df001a04 	addi	fp,sp,104
    6e70:	e13ffd15 	stw	r4,-12(fp)
    6e74:	e17ffe15 	stw	r5,-8(fp)
    6e78:	e1bfff15 	stw	r6,-4(fp)
	SHA1_CTX	context;
	trezor_sha1_Init(&context);
    6e7c:	e13fe604 	addi	r4,fp,-104
    6e80:	0005e100 	call	5e10 <trezor_sha1_Init>
	trezor_sha1_Update(&context, data, len);
    6e84:	e1bffe17 	ldw	r6,-8(fp)
    6e88:	e17ffd17 	ldw	r5,-12(fp)
    6e8c:	e13fe604 	addi	r4,fp,-104
    6e90:	00066200 	call	6620 <trezor_sha1_Update>
	trezor_sha1_Final(&context, digest);
    6e94:	e17fff17 	ldw	r5,-4(fp)
    6e98:	e13fe604 	addi	r4,fp,-104
    6e9c:	0006a280 	call	6a28 <trezor_sha1_Final>
}
    6ea0:	0001883a 	nop
    6ea4:	e037883a 	mov	sp,fp
    6ea8:	dfc00117 	ldw	ra,4(sp)
    6eac:	df000017 	ldw	fp,0(sp)
    6eb0:	dec00204 	addi	sp,sp,8
    6eb4:	f800283a 	ret

00006eb8 <trezor_sha1_Data>:

char* trezor_sha1_Data(const sha2_byte* data, size_t len, char digest[SHA1_DIGEST_STRING_LENGTH]) {
    6eb8:	deffe404 	addi	sp,sp,-112
    6ebc:	dfc01b15 	stw	ra,108(sp)
    6ec0:	df001a15 	stw	fp,104(sp)
    6ec4:	df001a04 	addi	fp,sp,104
    6ec8:	e13ffd15 	stw	r4,-12(fp)
    6ecc:	e17ffe15 	stw	r5,-8(fp)
    6ed0:	e1bfff15 	stw	r6,-4(fp)
	SHA1_CTX	context;

	trezor_sha1_Init(&context);
    6ed4:	e13fe604 	addi	r4,fp,-104
    6ed8:	0005e100 	call	5e10 <trezor_sha1_Init>
	trezor_sha1_Update(&context, data, len);
    6edc:	e1bffe17 	ldw	r6,-8(fp)
    6ee0:	e17ffd17 	ldw	r5,-12(fp)
    6ee4:	e13fe604 	addi	r4,fp,-104
    6ee8:	00066200 	call	6620 <trezor_sha1_Update>
	return trezor_sha1_End(&context, digest);
    6eec:	e17fff17 	ldw	r5,-4(fp)
    6ef0:	e13fe604 	addi	r4,fp,-104
    6ef4:	0006d600 	call	6d60 <trezor_sha1_End>
}
    6ef8:	e037883a 	mov	sp,fp
    6efc:	dfc00117 	ldw	ra,4(sp)
    6f00:	df000017 	ldw	fp,0(sp)
    6f04:	dec00204 	addi	sp,sp,8
    6f08:	f800283a 	ret

00006f0c <trezor_sha256_Init>:

/*** SHA-256: *********************************************************/
void trezor_sha256_Init(SHA256_CTX* context) {
    6f0c:	defffd04 	addi	sp,sp,-12
    6f10:	dfc00215 	stw	ra,8(sp)
    6f14:	df000115 	stw	fp,4(sp)
    6f18:	df000104 	addi	fp,sp,4
    6f1c:	e13fff15 	stw	r4,-4(fp)
	if (context == (SHA256_CTX*)0) {
    6f20:	e0bfff17 	ldw	r2,-4(fp)
    6f24:	10000f26 	beq	r2,zero,6f64 <trezor_sha256_Init+0x58>
		return;
	}
	MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
    6f28:	e0bfff17 	ldw	r2,-4(fp)
    6f2c:	01800804 	movi	r6,32
    6f30:	01400074 	movhi	r5,1
    6f34:	295c9304 	addi	r5,r5,29260
    6f38:	1009883a 	mov	r4,r2
    6f3c:	000a0f40 	call	a0f4 <memcpy>
	memzero(context->buffer, SHA256_BLOCK_LENGTH);
    6f40:	e0bfff17 	ldw	r2,-4(fp)
    6f44:	10800a04 	addi	r2,r2,40
    6f48:	01401004 	movi	r5,64
    6f4c:	1009883a 	mov	r4,r2
    6f50:	00018040 	call	1804 <memzero>
	context->bitcount = 0;
    6f54:	e0bfff17 	ldw	r2,-4(fp)
    6f58:	10000815 	stw	zero,32(r2)
    6f5c:	10000915 	stw	zero,36(r2)
    6f60:	00000106 	br	6f68 <trezor_sha256_Init+0x5c>
}

/*** SHA-256: *********************************************************/
void trezor_sha256_Init(SHA256_CTX* context) {
	if (context == (SHA256_CTX*)0) {
		return;
    6f64:	0001883a 	nop
	}
	MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
	memzero(context->buffer, SHA256_BLOCK_LENGTH);
	context->bitcount = 0;
}
    6f68:	e037883a 	mov	sp,fp
    6f6c:	dfc00117 	ldw	ra,4(sp)
    6f70:	df000017 	ldw	fp,0(sp)
    6f74:	dec00204 	addi	sp,sp,8
    6f78:	f800283a 	ret

00006f7c <trezor_sha256_Transform>:
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void trezor_sha256_Transform(const sha2_word32* state_in, const sha2_word32* data, sha2_word32* state_out) {
    6f7c:	deffdf04 	addi	sp,sp,-132
    6f80:	df002015 	stw	fp,128(sp)
    6f84:	df002004 	addi	fp,sp,128
    6f88:	e13ffd15 	stw	r4,-12(fp)
    6f8c:	e17ffe15 	stw	r5,-8(fp)
    6f90:	e1bfff15 	stw	r6,-4(fp)
	sha2_word32	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word32	T1, T2, W256[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    6f94:	e0bffd17 	ldw	r2,-12(fp)
    6f98:	10800017 	ldw	r2,0(r2)
    6f9c:	e0bfe015 	stw	r2,-128(fp)
	b = state_in[1];
    6fa0:	e0bffd17 	ldw	r2,-12(fp)
    6fa4:	10800117 	ldw	r2,4(r2)
    6fa8:	e0bfe115 	stw	r2,-124(fp)
	c = state_in[2];
    6fac:	e0bffd17 	ldw	r2,-12(fp)
    6fb0:	10800217 	ldw	r2,8(r2)
    6fb4:	e0bfe215 	stw	r2,-120(fp)
	d = state_in[3];
    6fb8:	e0bffd17 	ldw	r2,-12(fp)
    6fbc:	10800317 	ldw	r2,12(r2)
    6fc0:	e0bfe315 	stw	r2,-116(fp)
	e = state_in[4];
    6fc4:	e0bffd17 	ldw	r2,-12(fp)
    6fc8:	10800417 	ldw	r2,16(r2)
    6fcc:	e0bfe415 	stw	r2,-112(fp)
	f = state_in[5];
    6fd0:	e0bffd17 	ldw	r2,-12(fp)
    6fd4:	10800517 	ldw	r2,20(r2)
    6fd8:	e0bfe515 	stw	r2,-108(fp)
	g = state_in[6];
    6fdc:	e0bffd17 	ldw	r2,-12(fp)
    6fe0:	10800617 	ldw	r2,24(r2)
    6fe4:	e0bfe615 	stw	r2,-104(fp)
	h = state_in[7];
    6fe8:	e0bffd17 	ldw	r2,-12(fp)
    6fec:	10800717 	ldw	r2,28(r2)
    6ff0:	e0bfe715 	stw	r2,-100(fp)

	j = 0;
    6ff4:	e03fe815 	stw	zero,-96(fp)
	do {
		/* Apply the SHA-256 compression function to update a..h with copy */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
    6ff8:	e0ffe417 	ldw	r3,-112(fp)
    6ffc:	00800184 	movi	r2,6
    7000:	1886583a 	ror	r3,r3,r2
    7004:	e13fe417 	ldw	r4,-112(fp)
    7008:	008002c4 	movi	r2,11
    700c:	2084583a 	ror	r2,r4,r2
    7010:	1886f03a 	xor	r3,r3,r2
    7014:	e0bfe417 	ldw	r2,-112(fp)
    7018:	100411fa 	roli	r2,r2,7
    701c:	1886f03a 	xor	r3,r3,r2
    7020:	e0bfe717 	ldw	r2,-100(fp)
    7024:	1887883a 	add	r3,r3,r2
    7028:	e13fe417 	ldw	r4,-112(fp)
    702c:	e0bfe517 	ldw	r2,-108(fp)
    7030:	2088703a 	and	r4,r4,r2
    7034:	e0bfe417 	ldw	r2,-112(fp)
    7038:	008a303a 	nor	r5,zero,r2
    703c:	e0bfe617 	ldw	r2,-104(fp)
    7040:	2884703a 	and	r2,r5,r2
    7044:	2084f03a 	xor	r2,r4,r2
    7048:	1889883a 	add	r4,r3,r2
    704c:	00800074 	movhi	r2,1
    7050:	109c5304 	addi	r2,r2,29004
    7054:	e0ffe817 	ldw	r3,-96(fp)
    7058:	18c7883a 	add	r3,r3,r3
    705c:	18c7883a 	add	r3,r3,r3
    7060:	10c5883a 	add	r2,r2,r3
    7064:	10800017 	ldw	r2,0(r2)
    7068:	2087883a 	add	r3,r4,r2
    706c:	e0bffe17 	ldw	r2,-8(fp)
    7070:	11000104 	addi	r4,r2,4
    7074:	e13ffe15 	stw	r4,-8(fp)
    7078:	11000017 	ldw	r4,0(r2)
    707c:	e0bfe817 	ldw	r2,-96(fp)
    7080:	1085883a 	add	r2,r2,r2
    7084:	1085883a 	add	r2,r2,r2
    7088:	e17fe004 	addi	r5,fp,-128
    708c:	2885883a 	add	r2,r5,r2
    7090:	10800d04 	addi	r2,r2,52
    7094:	11000015 	stw	r4,0(r2)
    7098:	e0bfe817 	ldw	r2,-96(fp)
    709c:	1085883a 	add	r2,r2,r2
    70a0:	1085883a 	add	r2,r2,r2
    70a4:	e1bfe004 	addi	r6,fp,-128
    70a8:	3085883a 	add	r2,r6,r2
    70ac:	10800d04 	addi	r2,r2,52
    70b0:	10800017 	ldw	r2,0(r2)
    70b4:	1885883a 	add	r2,r3,r2
    70b8:	e0bfe915 	stw	r2,-92(fp)
		T2 = Sigma0_256(a) + Maj(a, b, c);
    70bc:	e0ffe017 	ldw	r3,-128(fp)
    70c0:	00800084 	movi	r2,2
    70c4:	1886583a 	ror	r3,r3,r2
    70c8:	e13fe017 	ldw	r4,-128(fp)
    70cc:	00800344 	movi	r2,13
    70d0:	2084583a 	ror	r2,r4,r2
    70d4:	1886f03a 	xor	r3,r3,r2
    70d8:	e0bfe017 	ldw	r2,-128(fp)
    70dc:	100412ba 	roli	r2,r2,10
    70e0:	1886f03a 	xor	r3,r3,r2
    70e4:	e13fe017 	ldw	r4,-128(fp)
    70e8:	e0bfe117 	ldw	r2,-124(fp)
    70ec:	2088703a 	and	r4,r4,r2
    70f0:	e17fe017 	ldw	r5,-128(fp)
    70f4:	e0bfe217 	ldw	r2,-120(fp)
    70f8:	2884703a 	and	r2,r5,r2
    70fc:	2088f03a 	xor	r4,r4,r2
    7100:	e17fe117 	ldw	r5,-124(fp)
    7104:	e0bfe217 	ldw	r2,-120(fp)
    7108:	2884703a 	and	r2,r5,r2
    710c:	2084f03a 	xor	r2,r4,r2
    7110:	1885883a 	add	r2,r3,r2
    7114:	e0bfea15 	stw	r2,-88(fp)
		h = g;
    7118:	e0bfe617 	ldw	r2,-104(fp)
    711c:	e0bfe715 	stw	r2,-100(fp)
		g = f;
    7120:	e0bfe517 	ldw	r2,-108(fp)
    7124:	e0bfe615 	stw	r2,-104(fp)
		f = e;
    7128:	e0bfe417 	ldw	r2,-112(fp)
    712c:	e0bfe515 	stw	r2,-108(fp)
		e = d + T1;
    7130:	e0ffe317 	ldw	r3,-116(fp)
    7134:	e0bfe917 	ldw	r2,-92(fp)
    7138:	1885883a 	add	r2,r3,r2
    713c:	e0bfe415 	stw	r2,-112(fp)
		d = c;
    7140:	e0bfe217 	ldw	r2,-120(fp)
    7144:	e0bfe315 	stw	r2,-116(fp)
		c = b;
    7148:	e0bfe117 	ldw	r2,-124(fp)
    714c:	e0bfe215 	stw	r2,-120(fp)
		b = a;
    7150:	e0bfe017 	ldw	r2,-128(fp)
    7154:	e0bfe115 	stw	r2,-124(fp)
		a = T1 + T2;
    7158:	e0ffe917 	ldw	r3,-92(fp)
    715c:	e0bfea17 	ldw	r2,-88(fp)
    7160:	1885883a 	add	r2,r3,r2
    7164:	e0bfe015 	stw	r2,-128(fp)

		j++;
    7168:	e0bfe817 	ldw	r2,-96(fp)
    716c:	10800044 	addi	r2,r2,1
    7170:	e0bfe815 	stw	r2,-96(fp)
	} while (j < 16);
    7174:	e0bfe817 	ldw	r2,-96(fp)
    7178:	10800410 	cmplti	r2,r2,16
    717c:	103f9e1e 	bne	r2,zero,6ff8 <__alt_mem_epcs_flash_controller+0xfdffdff8>

	do {
		/* Part of the message block expansion: */
		s0 = W256[(j+1)&0x0f];
    7180:	e0bfe817 	ldw	r2,-96(fp)
    7184:	10800044 	addi	r2,r2,1
    7188:	108003cc 	andi	r2,r2,15
    718c:	1085883a 	add	r2,r2,r2
    7190:	1085883a 	add	r2,r2,r2
    7194:	e0ffe004 	addi	r3,fp,-128
    7198:	1885883a 	add	r2,r3,r2
    719c:	10800d04 	addi	r2,r2,52
    71a0:	10800017 	ldw	r2,0(r2)
    71a4:	e0bfeb15 	stw	r2,-84(fp)
		s0 = sigma0_256(s0);
    71a8:	e0ffeb17 	ldw	r3,-84(fp)
    71ac:	008001c4 	movi	r2,7
    71b0:	1886583a 	ror	r3,r3,r2
    71b4:	e0bfeb17 	ldw	r2,-84(fp)
    71b8:	100413ba 	roli	r2,r2,14
    71bc:	1886f03a 	xor	r3,r3,r2
    71c0:	e0bfeb17 	ldw	r2,-84(fp)
    71c4:	1004d0fa 	srli	r2,r2,3
    71c8:	1884f03a 	xor	r2,r3,r2
    71cc:	e0bfeb15 	stw	r2,-84(fp)
		s1 = W256[(j+14)&0x0f];	
    71d0:	e0bfe817 	ldw	r2,-96(fp)
    71d4:	10800384 	addi	r2,r2,14
    71d8:	108003cc 	andi	r2,r2,15
    71dc:	1085883a 	add	r2,r2,r2
    71e0:	1085883a 	add	r2,r2,r2
    71e4:	e13fe004 	addi	r4,fp,-128
    71e8:	2085883a 	add	r2,r4,r2
    71ec:	10800d04 	addi	r2,r2,52
    71f0:	10800017 	ldw	r2,0(r2)
    71f4:	e0bfec15 	stw	r2,-80(fp)
		s1 = sigma1_256(s1);
    71f8:	e0bfec17 	ldw	r2,-80(fp)
    71fc:	100613fa 	roli	r3,r2,15
    7200:	e0bfec17 	ldw	r2,-80(fp)
    7204:	1004137a 	roli	r2,r2,13
    7208:	1886f03a 	xor	r3,r3,r2
    720c:	e0bfec17 	ldw	r2,-80(fp)
    7210:	1004d2ba 	srli	r2,r2,10
    7214:	1884f03a 	xor	r2,r3,r2
    7218:	e0bfec15 	stw	r2,-80(fp)

		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + 
    721c:	e0ffe417 	ldw	r3,-112(fp)
    7220:	00800184 	movi	r2,6
    7224:	1886583a 	ror	r3,r3,r2
    7228:	e13fe417 	ldw	r4,-112(fp)
    722c:	008002c4 	movi	r2,11
    7230:	2084583a 	ror	r2,r4,r2
    7234:	1886f03a 	xor	r3,r3,r2
    7238:	e0bfe417 	ldw	r2,-112(fp)
    723c:	100411fa 	roli	r2,r2,7
    7240:	1886f03a 	xor	r3,r3,r2
    7244:	e0bfe717 	ldw	r2,-100(fp)
    7248:	1887883a 	add	r3,r3,r2
    724c:	e13fe417 	ldw	r4,-112(fp)
    7250:	e0bfe517 	ldw	r2,-108(fp)
    7254:	2088703a 	and	r4,r4,r2
    7258:	e0bfe417 	ldw	r2,-112(fp)
    725c:	008a303a 	nor	r5,zero,r2
    7260:	e0bfe617 	ldw	r2,-104(fp)
    7264:	2884703a 	and	r2,r5,r2
    7268:	2084f03a 	xor	r2,r4,r2
    726c:	1889883a 	add	r4,r3,r2
    7270:	00800074 	movhi	r2,1
    7274:	109c5304 	addi	r2,r2,29004
    7278:	e0ffe817 	ldw	r3,-96(fp)
    727c:	18c7883a 	add	r3,r3,r3
    7280:	18c7883a 	add	r3,r3,r3
    7284:	10c5883a 	add	r2,r2,r3
    7288:	10800017 	ldw	r2,0(r2)
    728c:	2089883a 	add	r4,r4,r2
		     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
    7290:	e0bfe817 	ldw	r2,-96(fp)
    7294:	108003cc 	andi	r2,r2,15
    7298:	e0ffe817 	ldw	r3,-96(fp)
    729c:	18c003cc 	andi	r3,r3,15
    72a0:	18c7883a 	add	r3,r3,r3
    72a4:	18c7883a 	add	r3,r3,r3
    72a8:	e17fe004 	addi	r5,fp,-128
    72ac:	28c7883a 	add	r3,r5,r3
    72b0:	18c00d04 	addi	r3,r3,52
    72b4:	19400017 	ldw	r5,0(r3)
    72b8:	e0ffe817 	ldw	r3,-96(fp)
    72bc:	18c00244 	addi	r3,r3,9
    72c0:	18c003cc 	andi	r3,r3,15
    72c4:	18c7883a 	add	r3,r3,r3
    72c8:	18c7883a 	add	r3,r3,r3
    72cc:	e1bfe004 	addi	r6,fp,-128
    72d0:	30c7883a 	add	r3,r6,r3
    72d4:	18c00d04 	addi	r3,r3,52
    72d8:	19800017 	ldw	r6,0(r3)
    72dc:	e0ffec17 	ldw	r3,-80(fp)
    72e0:	30cd883a 	add	r6,r6,r3
    72e4:	e0ffeb17 	ldw	r3,-84(fp)
    72e8:	30c7883a 	add	r3,r6,r3
    72ec:	28cb883a 	add	r5,r5,r3
    72f0:	1087883a 	add	r3,r2,r2
    72f4:	18c7883a 	add	r3,r3,r3
    72f8:	e1bfe004 	addi	r6,fp,-128
    72fc:	30c7883a 	add	r3,r6,r3
    7300:	18c00d04 	addi	r3,r3,52
    7304:	19400015 	stw	r5,0(r3)
    7308:	1085883a 	add	r2,r2,r2
    730c:	1085883a 	add	r2,r2,r2
    7310:	e0ffe004 	addi	r3,fp,-128
    7314:	1885883a 	add	r2,r3,r2
    7318:	10800d04 	addi	r2,r2,52
    731c:	10800017 	ldw	r2,0(r2)
		s0 = sigma0_256(s0);
		s1 = W256[(j+14)&0x0f];	
		s1 = sigma1_256(s1);

		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + 
    7320:	2085883a 	add	r2,r4,r2
    7324:	e0bfe915 	stw	r2,-92(fp)
		     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
		T2 = Sigma0_256(a) + Maj(a, b, c);
    7328:	e0ffe017 	ldw	r3,-128(fp)
    732c:	00800084 	movi	r2,2
    7330:	1886583a 	ror	r3,r3,r2
    7334:	e13fe017 	ldw	r4,-128(fp)
    7338:	00800344 	movi	r2,13
    733c:	2084583a 	ror	r2,r4,r2
    7340:	1886f03a 	xor	r3,r3,r2
    7344:	e0bfe017 	ldw	r2,-128(fp)
    7348:	100412ba 	roli	r2,r2,10
    734c:	1886f03a 	xor	r3,r3,r2
    7350:	e13fe017 	ldw	r4,-128(fp)
    7354:	e0bfe117 	ldw	r2,-124(fp)
    7358:	2088703a 	and	r4,r4,r2
    735c:	e17fe017 	ldw	r5,-128(fp)
    7360:	e0bfe217 	ldw	r2,-120(fp)
    7364:	2884703a 	and	r2,r5,r2
    7368:	2088f03a 	xor	r4,r4,r2
    736c:	e17fe117 	ldw	r5,-124(fp)
    7370:	e0bfe217 	ldw	r2,-120(fp)
    7374:	2884703a 	and	r2,r5,r2
    7378:	2084f03a 	xor	r2,r4,r2
    737c:	1885883a 	add	r2,r3,r2
    7380:	e0bfea15 	stw	r2,-88(fp)
		h = g;
    7384:	e0bfe617 	ldw	r2,-104(fp)
    7388:	e0bfe715 	stw	r2,-100(fp)
		g = f;
    738c:	e0bfe517 	ldw	r2,-108(fp)
    7390:	e0bfe615 	stw	r2,-104(fp)
		f = e;
    7394:	e0bfe417 	ldw	r2,-112(fp)
    7398:	e0bfe515 	stw	r2,-108(fp)
		e = d + T1;
    739c:	e0ffe317 	ldw	r3,-116(fp)
    73a0:	e0bfe917 	ldw	r2,-92(fp)
    73a4:	1885883a 	add	r2,r3,r2
    73a8:	e0bfe415 	stw	r2,-112(fp)
		d = c;
    73ac:	e0bfe217 	ldw	r2,-120(fp)
    73b0:	e0bfe315 	stw	r2,-116(fp)
		c = b;
    73b4:	e0bfe117 	ldw	r2,-124(fp)
    73b8:	e0bfe215 	stw	r2,-120(fp)
		b = a;
    73bc:	e0bfe017 	ldw	r2,-128(fp)
    73c0:	e0bfe115 	stw	r2,-124(fp)
		a = T1 + T2;
    73c4:	e0ffe917 	ldw	r3,-92(fp)
    73c8:	e0bfea17 	ldw	r2,-88(fp)
    73cc:	1885883a 	add	r2,r3,r2
    73d0:	e0bfe015 	stw	r2,-128(fp)

		j++;
    73d4:	e0bfe817 	ldw	r2,-96(fp)
    73d8:	10800044 	addi	r2,r2,1
    73dc:	e0bfe815 	stw	r2,-96(fp)
	} while (j < 64);
    73e0:	e0bfe817 	ldw	r2,-96(fp)
    73e4:	10801010 	cmplti	r2,r2,64
    73e8:	103f651e 	bne	r2,zero,7180 <__alt_mem_epcs_flash_controller+0xfdffe180>

	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    73ec:	e0bffd17 	ldw	r2,-12(fp)
    73f0:	10c00017 	ldw	r3,0(r2)
    73f4:	e0bfe017 	ldw	r2,-128(fp)
    73f8:	1887883a 	add	r3,r3,r2
    73fc:	e0bfff17 	ldw	r2,-4(fp)
    7400:	10c00015 	stw	r3,0(r2)
	state_out[1] = state_in[1] + b;
    7404:	e0bfff17 	ldw	r2,-4(fp)
    7408:	10800104 	addi	r2,r2,4
    740c:	e0fffd17 	ldw	r3,-12(fp)
    7410:	18c00104 	addi	r3,r3,4
    7414:	19000017 	ldw	r4,0(r3)
    7418:	e0ffe117 	ldw	r3,-124(fp)
    741c:	20c7883a 	add	r3,r4,r3
    7420:	10c00015 	stw	r3,0(r2)
	state_out[2] = state_in[2] + c;
    7424:	e0bfff17 	ldw	r2,-4(fp)
    7428:	10800204 	addi	r2,r2,8
    742c:	e0fffd17 	ldw	r3,-12(fp)
    7430:	18c00204 	addi	r3,r3,8
    7434:	19000017 	ldw	r4,0(r3)
    7438:	e0ffe217 	ldw	r3,-120(fp)
    743c:	20c7883a 	add	r3,r4,r3
    7440:	10c00015 	stw	r3,0(r2)
	state_out[3] = state_in[3] + d;
    7444:	e0bfff17 	ldw	r2,-4(fp)
    7448:	10800304 	addi	r2,r2,12
    744c:	e0fffd17 	ldw	r3,-12(fp)
    7450:	18c00304 	addi	r3,r3,12
    7454:	19000017 	ldw	r4,0(r3)
    7458:	e0ffe317 	ldw	r3,-116(fp)
    745c:	20c7883a 	add	r3,r4,r3
    7460:	10c00015 	stw	r3,0(r2)
	state_out[4] = state_in[4] + e;
    7464:	e0bfff17 	ldw	r2,-4(fp)
    7468:	10800404 	addi	r2,r2,16
    746c:	e0fffd17 	ldw	r3,-12(fp)
    7470:	18c00404 	addi	r3,r3,16
    7474:	19000017 	ldw	r4,0(r3)
    7478:	e0ffe417 	ldw	r3,-112(fp)
    747c:	20c7883a 	add	r3,r4,r3
    7480:	10c00015 	stw	r3,0(r2)
	state_out[5] = state_in[5] + f;
    7484:	e0bfff17 	ldw	r2,-4(fp)
    7488:	10800504 	addi	r2,r2,20
    748c:	e0fffd17 	ldw	r3,-12(fp)
    7490:	18c00504 	addi	r3,r3,20
    7494:	19000017 	ldw	r4,0(r3)
    7498:	e0ffe517 	ldw	r3,-108(fp)
    749c:	20c7883a 	add	r3,r4,r3
    74a0:	10c00015 	stw	r3,0(r2)
	state_out[6] = state_in[6] + g;
    74a4:	e0bfff17 	ldw	r2,-4(fp)
    74a8:	10800604 	addi	r2,r2,24
    74ac:	e0fffd17 	ldw	r3,-12(fp)
    74b0:	18c00604 	addi	r3,r3,24
    74b4:	19000017 	ldw	r4,0(r3)
    74b8:	e0ffe617 	ldw	r3,-104(fp)
    74bc:	20c7883a 	add	r3,r4,r3
    74c0:	10c00015 	stw	r3,0(r2)
	state_out[7] = state_in[7] + h;
    74c4:	e0bfff17 	ldw	r2,-4(fp)
    74c8:	10800704 	addi	r2,r2,28
    74cc:	e0fffd17 	ldw	r3,-12(fp)
    74d0:	18c00704 	addi	r3,r3,28
    74d4:	19000017 	ldw	r4,0(r3)
    74d8:	e0ffe717 	ldw	r3,-100(fp)
    74dc:	20c7883a 	add	r3,r4,r3
    74e0:	10c00015 	stw	r3,0(r2)

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
    74e4:	e03fea15 	stw	zero,-88(fp)
    74e8:	e0bfea17 	ldw	r2,-88(fp)
    74ec:	e0bfe915 	stw	r2,-92(fp)
    74f0:	e0bfe917 	ldw	r2,-92(fp)
    74f4:	e0bfe715 	stw	r2,-100(fp)
    74f8:	e0bfe717 	ldw	r2,-100(fp)
    74fc:	e0bfe615 	stw	r2,-104(fp)
    7500:	e0bfe617 	ldw	r2,-104(fp)
    7504:	e0bfe515 	stw	r2,-108(fp)
    7508:	e0bfe517 	ldw	r2,-108(fp)
    750c:	e0bfe415 	stw	r2,-112(fp)
    7510:	e0bfe417 	ldw	r2,-112(fp)
    7514:	e0bfe315 	stw	r2,-116(fp)
    7518:	e0bfe317 	ldw	r2,-116(fp)
    751c:	e0bfe215 	stw	r2,-120(fp)
    7520:	e0bfe217 	ldw	r2,-120(fp)
    7524:	e0bfe115 	stw	r2,-124(fp)
    7528:	e0bfe117 	ldw	r2,-124(fp)
    752c:	e0bfe015 	stw	r2,-128(fp)
}
    7530:	0001883a 	nop
    7534:	e037883a 	mov	sp,fp
    7538:	df000017 	ldw	fp,0(sp)
    753c:	dec00104 	addi	sp,sp,4
    7540:	f800283a 	ret

00007544 <trezor_sha256_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void trezor_sha256_Update(SHA256_CTX* context, const sha2_byte *data, size_t len) {
    7544:	deffef04 	addi	sp,sp,-68
    7548:	dfc01015 	stw	ra,64(sp)
    754c:	df000f15 	stw	fp,60(sp)
    7550:	dd400e15 	stw	r21,56(sp)
    7554:	dd000d15 	stw	r20,52(sp)
    7558:	dcc00c15 	stw	r19,48(sp)
    755c:	dc800b15 	stw	r18,44(sp)
    7560:	dc400a15 	stw	r17,40(sp)
    7564:	dc000915 	stw	r16,36(sp)
    7568:	df000f04 	addi	fp,sp,60
    756c:	e13ff715 	stw	r4,-36(fp)
    7570:	e17ff815 	stw	r5,-32(fp)
    7574:	e1bff915 	stw	r6,-28(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    7578:	e0bff917 	ldw	r2,-28(fp)
    757c:	1000e726 	beq	r2,zero,791c <trezor_sha256_Update+0x3d8>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    7580:	e13ff717 	ldw	r4,-36(fp)
    7584:	20800817 	ldw	r2,32(r4)
    7588:	20c00917 	ldw	r3,36(r4)
    758c:	1808977a 	slli	r4,r3,29
    7590:	100ed0fa 	srli	r7,r2,3
    7594:	21ceb03a 	or	r7,r4,r7
    7598:	1810d0fa 	srli	r8,r3,3
    759c:	3805883a 	mov	r2,r7
    75a0:	10800fcc 	andi	r2,r2,63
    75a4:	e0bff315 	stw	r2,-52(fp)
	if (usedspace > 0) {
    75a8:	e0bff317 	ldw	r2,-52(fp)
    75ac:	1000bb26 	beq	r2,zero,789c <trezor_sha256_Update+0x358>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA256_BLOCK_LENGTH - usedspace;
    75b0:	00c01004 	movi	r3,64
    75b4:	e0bff317 	ldw	r2,-52(fp)
    75b8:	1885c83a 	sub	r2,r3,r2
    75bc:	e0bff415 	stw	r2,-48(fp)

		if (len >= freespace) {
    75c0:	e0fff917 	ldw	r3,-28(fp)
    75c4:	e0bff417 	ldw	r2,-48(fp)
    75c8:	18804f36 	bltu	r3,r2,7708 <trezor_sha256_Update+0x1c4>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    75cc:	e0bff717 	ldw	r2,-36(fp)
    75d0:	10c00a04 	addi	r3,r2,40
    75d4:	e0bff317 	ldw	r2,-52(fp)
    75d8:	1885883a 	add	r2,r3,r2
    75dc:	e1bff417 	ldw	r6,-48(fp)
    75e0:	e17ff817 	ldw	r5,-32(fp)
    75e4:	1009883a 	mov	r4,r2
    75e8:	000a0f40 	call	a0f4 <memcpy>
			context->bitcount += freespace << 3;
    75ec:	e0bff717 	ldw	r2,-36(fp)
    75f0:	11000817 	ldw	r4,32(r2)
    75f4:	11400917 	ldw	r5,36(r2)
    75f8:	e0bff417 	ldw	r2,-48(fp)
    75fc:	100490fa 	slli	r2,r2,3
    7600:	1029883a 	mov	r20,r2
    7604:	002b883a 	mov	r21,zero
    7608:	2505883a 	add	r2,r4,r20
    760c:	110d803a 	cmpltu	r6,r2,r4
    7610:	2d47883a 	add	r3,r5,r21
    7614:	30c9883a 	add	r4,r6,r3
    7618:	2007883a 	mov	r3,r4
    761c:	1009883a 	mov	r4,r2
    7620:	180b883a 	mov	r5,r3
    7624:	e0bff717 	ldw	r2,-36(fp)
    7628:	11000815 	stw	r4,32(r2)
    762c:	11400915 	stw	r5,36(r2)
			len -= freespace;
    7630:	e0fff917 	ldw	r3,-28(fp)
    7634:	e0bff417 	ldw	r2,-48(fp)
    7638:	1885c83a 	sub	r2,r3,r2
    763c:	e0bff915 	stw	r2,-28(fp)
			data += freespace;
    7640:	e0fff817 	ldw	r3,-32(fp)
    7644:	e0bff417 	ldw	r2,-48(fp)
    7648:	1885883a 	add	r2,r3,r2
    764c:	e0bff815 	stw	r2,-32(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    7650:	e03ff115 	stw	zero,-60(fp)
    7654:	00002006 	br	76d8 <trezor_sha256_Update+0x194>
				REVERSE32(context->buffer[j],context->buffer[j]);
    7658:	e0fff717 	ldw	r3,-36(fp)
    765c:	e0bff117 	ldw	r2,-60(fp)
    7660:	10800284 	addi	r2,r2,10
    7664:	1085883a 	add	r2,r2,r2
    7668:	1085883a 	add	r2,r2,r2
    766c:	1885883a 	add	r2,r3,r2
    7670:	10800017 	ldw	r2,0(r2)
    7674:	e0bff515 	stw	r2,-44(fp)
    7678:	e0bff517 	ldw	r2,-44(fp)
    767c:	1004143a 	roli	r2,r2,16
    7680:	e0bff515 	stw	r2,-44(fp)
    7684:	e0fff517 	ldw	r3,-44(fp)
    7688:	00bfc074 	movhi	r2,65281
    768c:	10bfc004 	addi	r2,r2,-256
    7690:	1884703a 	and	r2,r3,r2
    7694:	1006d23a 	srli	r3,r2,8
    7698:	e13ff517 	ldw	r4,-44(fp)
    769c:	00803ff4 	movhi	r2,255
    76a0:	10803fc4 	addi	r2,r2,255
    76a4:	2084703a 	and	r2,r4,r2
    76a8:	1004923a 	slli	r2,r2,8
    76ac:	1886b03a 	or	r3,r3,r2
    76b0:	e13ff717 	ldw	r4,-36(fp)
    76b4:	e0bff117 	ldw	r2,-60(fp)
    76b8:	10800284 	addi	r2,r2,10
    76bc:	1085883a 	add	r2,r2,r2
    76c0:	1085883a 	add	r2,r2,r2
    76c4:	2085883a 	add	r2,r4,r2
    76c8:	10c00015 	stw	r3,0(r2)
			context->bitcount += freespace << 3;
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    76cc:	e0bff117 	ldw	r2,-60(fp)
    76d0:	10800044 	addi	r2,r2,1
    76d4:	e0bff115 	stw	r2,-60(fp)
    76d8:	e0bff117 	ldw	r2,-60(fp)
    76dc:	10800410 	cmplti	r2,r2,16
    76e0:	103fdd1e 	bne	r2,zero,7658 <__alt_mem_epcs_flash_controller+0xfdffe658>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			trezor_sha256_Transform(context->state, context->buffer, context->state);
    76e4:	e0fff717 	ldw	r3,-36(fp)
    76e8:	e0bff717 	ldw	r2,-36(fp)
    76ec:	10800a04 	addi	r2,r2,40
    76f0:	e13ff717 	ldw	r4,-36(fp)
    76f4:	200d883a 	mov	r6,r4
    76f8:	100b883a 	mov	r5,r2
    76fc:	1809883a 	mov	r4,r3
    7700:	0006f7c0 	call	6f7c <trezor_sha256_Transform>
    7704:	00006506 	br	789c <trezor_sha256_Update+0x358>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    7708:	e0bff717 	ldw	r2,-36(fp)
    770c:	10c00a04 	addi	r3,r2,40
    7710:	e0bff317 	ldw	r2,-52(fp)
    7714:	1885883a 	add	r2,r3,r2
    7718:	e1bff917 	ldw	r6,-28(fp)
    771c:	e17ff817 	ldw	r5,-32(fp)
    7720:	1009883a 	mov	r4,r2
    7724:	000a0f40 	call	a0f4 <memcpy>
			context->bitcount += len << 3;
    7728:	e0bff717 	ldw	r2,-36(fp)
    772c:	11000817 	ldw	r4,32(r2)
    7730:	11400917 	ldw	r5,36(r2)
    7734:	e0bff917 	ldw	r2,-28(fp)
    7738:	100490fa 	slli	r2,r2,3
    773c:	1025883a 	mov	r18,r2
    7740:	0027883a 	mov	r19,zero
    7744:	2485883a 	add	r2,r4,r18
    7748:	110d803a 	cmpltu	r6,r2,r4
    774c:	2cc7883a 	add	r3,r5,r19
    7750:	30c9883a 	add	r4,r6,r3
    7754:	2007883a 	mov	r3,r4
    7758:	1009883a 	mov	r4,r2
    775c:	180b883a 	mov	r5,r3
    7760:	e0bff717 	ldw	r2,-36(fp)
    7764:	11000815 	stw	r4,32(r2)
    7768:	11400915 	stw	r5,36(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    776c:	e03ff415 	stw	zero,-48(fp)
    7770:	e0bff417 	ldw	r2,-48(fp)
    7774:	e0bff315 	stw	r2,-52(fp)
			return;
    7778:	00006906 	br	7920 <trezor_sha256_Update+0x3dc>
		}
	}
	while (len >= SHA256_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA256_BLOCK_LENGTH);
    777c:	e0bff717 	ldw	r2,-36(fp)
    7780:	10800a04 	addi	r2,r2,40
    7784:	01801004 	movi	r6,64
    7788:	e17ff817 	ldw	r5,-32(fp)
    778c:	1009883a 	mov	r4,r2
    7790:	000a0f40 	call	a0f4 <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    7794:	e03ff215 	stw	zero,-56(fp)
    7798:	00002006 	br	781c <trezor_sha256_Update+0x2d8>
			REVERSE32(context->buffer[j],context->buffer[j]);
    779c:	e0fff717 	ldw	r3,-36(fp)
    77a0:	e0bff217 	ldw	r2,-56(fp)
    77a4:	10800284 	addi	r2,r2,10
    77a8:	1085883a 	add	r2,r2,r2
    77ac:	1085883a 	add	r2,r2,r2
    77b0:	1885883a 	add	r2,r3,r2
    77b4:	10800017 	ldw	r2,0(r2)
    77b8:	e0bff615 	stw	r2,-40(fp)
    77bc:	e0bff617 	ldw	r2,-40(fp)
    77c0:	1004143a 	roli	r2,r2,16
    77c4:	e0bff615 	stw	r2,-40(fp)
    77c8:	e0fff617 	ldw	r3,-40(fp)
    77cc:	00bfc074 	movhi	r2,65281
    77d0:	10bfc004 	addi	r2,r2,-256
    77d4:	1884703a 	and	r2,r3,r2
    77d8:	1006d23a 	srli	r3,r2,8
    77dc:	e13ff617 	ldw	r4,-40(fp)
    77e0:	00803ff4 	movhi	r2,255
    77e4:	10803fc4 	addi	r2,r2,255
    77e8:	2084703a 	and	r2,r4,r2
    77ec:	1004923a 	slli	r2,r2,8
    77f0:	1886b03a 	or	r3,r3,r2
    77f4:	e13ff717 	ldw	r4,-36(fp)
    77f8:	e0bff217 	ldw	r2,-56(fp)
    77fc:	10800284 	addi	r2,r2,10
    7800:	1085883a 	add	r2,r2,r2
    7804:	1085883a 	add	r2,r2,r2
    7808:	2085883a 	add	r2,r4,r2
    780c:	10c00015 	stw	r3,0(r2)
	while (len >= SHA256_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA256_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    7810:	e0bff217 	ldw	r2,-56(fp)
    7814:	10800044 	addi	r2,r2,1
    7818:	e0bff215 	stw	r2,-56(fp)
    781c:	e0bff217 	ldw	r2,-56(fp)
    7820:	10800410 	cmplti	r2,r2,16
    7824:	103fdd1e 	bne	r2,zero,779c <__alt_mem_epcs_flash_controller+0xfdffe79c>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		trezor_sha256_Transform(context->state, context->buffer, context->state);
    7828:	e0fff717 	ldw	r3,-36(fp)
    782c:	e0bff717 	ldw	r2,-36(fp)
    7830:	10800a04 	addi	r2,r2,40
    7834:	e13ff717 	ldw	r4,-36(fp)
    7838:	200d883a 	mov	r6,r4
    783c:	100b883a 	mov	r5,r2
    7840:	1809883a 	mov	r4,r3
    7844:	0006f7c0 	call	6f7c <trezor_sha256_Transform>
		context->bitcount += SHA256_BLOCK_LENGTH << 3;
    7848:	e0bff717 	ldw	r2,-36(fp)
    784c:	11000817 	ldw	r4,32(r2)
    7850:	11400917 	ldw	r5,36(r2)
    7854:	01808004 	movi	r6,512
    7858:	000f883a 	mov	r7,zero
    785c:	2185883a 	add	r2,r4,r6
    7860:	1111803a 	cmpltu	r8,r2,r4
    7864:	29c7883a 	add	r3,r5,r7
    7868:	40c9883a 	add	r4,r8,r3
    786c:	2007883a 	mov	r3,r4
    7870:	1009883a 	mov	r4,r2
    7874:	180b883a 	mov	r5,r3
    7878:	e0bff717 	ldw	r2,-36(fp)
    787c:	11000815 	stw	r4,32(r2)
    7880:	11400915 	stw	r5,36(r2)
		len -= SHA256_BLOCK_LENGTH;
    7884:	e0bff917 	ldw	r2,-28(fp)
    7888:	10bff004 	addi	r2,r2,-64
    788c:	e0bff915 	stw	r2,-28(fp)
		data += SHA256_BLOCK_LENGTH;
    7890:	e0bff817 	ldw	r2,-32(fp)
    7894:	10801004 	addi	r2,r2,64
    7898:	e0bff815 	stw	r2,-32(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA256_BLOCK_LENGTH) {
    789c:	e0bff917 	ldw	r2,-28(fp)
    78a0:	10801028 	cmpgeui	r2,r2,64
    78a4:	103fb51e 	bne	r2,zero,777c <__alt_mem_epcs_flash_controller+0xfdffe77c>
		trezor_sha256_Transform(context->state, context->buffer, context->state);
		context->bitcount += SHA256_BLOCK_LENGTH << 3;
		len -= SHA256_BLOCK_LENGTH;
		data += SHA256_BLOCK_LENGTH;
	}
	if (len > 0) {
    78a8:	e0bff917 	ldw	r2,-28(fp)
    78ac:	10001726 	beq	r2,zero,790c <trezor_sha256_Update+0x3c8>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    78b0:	e0bff717 	ldw	r2,-36(fp)
    78b4:	10800a04 	addi	r2,r2,40
    78b8:	e1bff917 	ldw	r6,-28(fp)
    78bc:	e17ff817 	ldw	r5,-32(fp)
    78c0:	1009883a 	mov	r4,r2
    78c4:	000a0f40 	call	a0f4 <memcpy>
		context->bitcount += len << 3;
    78c8:	e0bff717 	ldw	r2,-36(fp)
    78cc:	11000817 	ldw	r4,32(r2)
    78d0:	11400917 	ldw	r5,36(r2)
    78d4:	e0bff917 	ldw	r2,-28(fp)
    78d8:	100490fa 	slli	r2,r2,3
    78dc:	1021883a 	mov	r16,r2
    78e0:	0023883a 	mov	r17,zero
    78e4:	2405883a 	add	r2,r4,r16
    78e8:	110d803a 	cmpltu	r6,r2,r4
    78ec:	2c47883a 	add	r3,r5,r17
    78f0:	30c9883a 	add	r4,r6,r3
    78f4:	2007883a 	mov	r3,r4
    78f8:	1009883a 	mov	r4,r2
    78fc:	180b883a 	mov	r5,r3
    7900:	e0bff717 	ldw	r2,-36(fp)
    7904:	11000815 	stw	r4,32(r2)
    7908:	11400915 	stw	r5,36(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    790c:	e03ff415 	stw	zero,-48(fp)
    7910:	e0bff417 	ldw	r2,-48(fp)
    7914:	e0bff315 	stw	r2,-52(fp)
    7918:	00000106 	br	7920 <trezor_sha256_Update+0x3dc>
void trezor_sha256_Update(SHA256_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    791c:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		context->bitcount += len << 3;
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    7920:	e6fffa04 	addi	sp,fp,-24
    7924:	dfc00717 	ldw	ra,28(sp)
    7928:	df000617 	ldw	fp,24(sp)
    792c:	dd400517 	ldw	r21,20(sp)
    7930:	dd000417 	ldw	r20,16(sp)
    7934:	dcc00317 	ldw	r19,12(sp)
    7938:	dc800217 	ldw	r18,8(sp)
    793c:	dc400117 	ldw	r17,4(sp)
    7940:	dc000017 	ldw	r16,0(sp)
    7944:	dec00804 	addi	sp,sp,32
    7948:	f800283a 	ret

0000794c <trezor_sha256_Final>:

void trezor_sha256_Final(SHA256_CTX* context, sha2_byte digest[]) {
    794c:	defff304 	addi	sp,sp,-52
    7950:	dfc00c15 	stw	ra,48(sp)
    7954:	df000b15 	stw	fp,44(sp)
    7958:	dc400a15 	stw	r17,40(sp)
    795c:	dc000915 	stw	r16,36(sp)
    7960:	df000b04 	addi	fp,sp,44
    7964:	e13ffc15 	stw	r4,-16(fp)
    7968:	e17ffd15 	stw	r5,-12(fp)
	unsigned int	usedspace;

	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    796c:	e0bffd17 	ldw	r2,-12(fp)
    7970:	1000b826 	beq	r2,zero,7c54 <trezor_sha256_Final+0x308>
		usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    7974:	e13ffc17 	ldw	r4,-16(fp)
    7978:	20800817 	ldw	r2,32(r4)
    797c:	20c00917 	ldw	r3,36(r4)
    7980:	1808977a 	slli	r4,r3,29
    7984:	100cd0fa 	srli	r6,r2,3
    7988:	218cb03a 	or	r6,r4,r6
    798c:	180ed0fa 	srli	r7,r3,3
    7990:	3005883a 	mov	r2,r6
    7994:	10800fcc 	andi	r2,r2,63
    7998:	e0bff515 	stw	r2,-44(fp)
		/* Begin padding with a 1 bit: */
		((uint8_t*)context->buffer)[usedspace++] = 0x80;
    799c:	e0bffc17 	ldw	r2,-16(fp)
    79a0:	10c00a04 	addi	r3,r2,40
    79a4:	e0bff517 	ldw	r2,-44(fp)
    79a8:	11000044 	addi	r4,r2,1
    79ac:	e13ff515 	stw	r4,-44(fp)
    79b0:	1885883a 	add	r2,r3,r2
    79b4:	00ffe004 	movi	r3,-128
    79b8:	10c00005 	stb	r3,0(r2)
		
		if (usedspace > SHA256_SHORT_BLOCK_LENGTH) {
    79bc:	e0bff517 	ldw	r2,-44(fp)
    79c0:	10800e70 	cmpltui	r2,r2,57
    79c4:	1000371e 	bne	r2,zero,7aa4 <trezor_sha256_Final+0x158>
			memzero(((uint8_t*)context->buffer) + usedspace, SHA256_BLOCK_LENGTH - usedspace);
    79c8:	e0bffc17 	ldw	r2,-16(fp)
    79cc:	10c00a04 	addi	r3,r2,40
    79d0:	e0bff517 	ldw	r2,-44(fp)
    79d4:	1889883a 	add	r4,r3,r2
    79d8:	00c01004 	movi	r3,64
    79dc:	e0bff517 	ldw	r2,-44(fp)
    79e0:	1885c83a 	sub	r2,r3,r2
    79e4:	100b883a 	mov	r5,r2
    79e8:	00018040 	call	1804 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    79ec:	e03ff615 	stw	zero,-40(fp)
    79f0:	00002006 	br	7a74 <trezor_sha256_Final+0x128>
				REVERSE32(context->buffer[j],context->buffer[j]);
    79f4:	e0fffc17 	ldw	r3,-16(fp)
    79f8:	e0bff617 	ldw	r2,-40(fp)
    79fc:	10800284 	addi	r2,r2,10
    7a00:	1085883a 	add	r2,r2,r2
    7a04:	1085883a 	add	r2,r2,r2
    7a08:	1885883a 	add	r2,r3,r2
    7a0c:	10800017 	ldw	r2,0(r2)
    7a10:	e0bff915 	stw	r2,-28(fp)
    7a14:	e0bff917 	ldw	r2,-28(fp)
    7a18:	1004143a 	roli	r2,r2,16
    7a1c:	e0bff915 	stw	r2,-28(fp)
    7a20:	e0fff917 	ldw	r3,-28(fp)
    7a24:	00bfc074 	movhi	r2,65281
    7a28:	10bfc004 	addi	r2,r2,-256
    7a2c:	1884703a 	and	r2,r3,r2
    7a30:	1006d23a 	srli	r3,r2,8
    7a34:	e13ff917 	ldw	r4,-28(fp)
    7a38:	00803ff4 	movhi	r2,255
    7a3c:	10803fc4 	addi	r2,r2,255
    7a40:	2084703a 	and	r2,r4,r2
    7a44:	1004923a 	slli	r2,r2,8
    7a48:	1886b03a 	or	r3,r3,r2
    7a4c:	e13ffc17 	ldw	r4,-16(fp)
    7a50:	e0bff617 	ldw	r2,-40(fp)
    7a54:	10800284 	addi	r2,r2,10
    7a58:	1085883a 	add	r2,r2,r2
    7a5c:	1085883a 	add	r2,r2,r2
    7a60:	2085883a 	add	r2,r4,r2
    7a64:	10c00015 	stw	r3,0(r2)
		if (usedspace > SHA256_SHORT_BLOCK_LENGTH) {
			memzero(((uint8_t*)context->buffer) + usedspace, SHA256_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    7a68:	e0bff617 	ldw	r2,-40(fp)
    7a6c:	10800044 	addi	r2,r2,1
    7a70:	e0bff615 	stw	r2,-40(fp)
    7a74:	e0bff617 	ldw	r2,-40(fp)
    7a78:	10800410 	cmplti	r2,r2,16
    7a7c:	103fdd1e 	bne	r2,zero,79f4 <__alt_mem_epcs_flash_controller+0xfdffe9f4>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			/* Do second-to-last transform: */
			trezor_sha256_Transform(context->state, context->buffer, context->state);
    7a80:	e0fffc17 	ldw	r3,-16(fp)
    7a84:	e0bffc17 	ldw	r2,-16(fp)
    7a88:	10800a04 	addi	r2,r2,40
    7a8c:	e13ffc17 	ldw	r4,-16(fp)
    7a90:	200d883a 	mov	r6,r4
    7a94:	100b883a 	mov	r5,r2
    7a98:	1809883a 	mov	r4,r3
    7a9c:	0006f7c0 	call	6f7c <trezor_sha256_Transform>
			
			/* And prepare the last transform: */
			usedspace = 0;
    7aa0:	e03ff515 	stw	zero,-44(fp)
		}
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA256_SHORT_BLOCK_LENGTH - usedspace);
    7aa4:	e0bffc17 	ldw	r2,-16(fp)
    7aa8:	10c00a04 	addi	r3,r2,40
    7aac:	e0bff517 	ldw	r2,-44(fp)
    7ab0:	1889883a 	add	r4,r3,r2
    7ab4:	00c00e04 	movi	r3,56
    7ab8:	e0bff517 	ldw	r2,-44(fp)
    7abc:	1885c83a 	sub	r2,r3,r2
    7ac0:	100b883a 	mov	r5,r2
    7ac4:	00018040 	call	1804 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    7ac8:	e03ff715 	stw	zero,-36(fp)
    7acc:	00002006 	br	7b50 <trezor_sha256_Final+0x204>
			REVERSE32(context->buffer[j],context->buffer[j]);
    7ad0:	e0fffc17 	ldw	r3,-16(fp)
    7ad4:	e0bff717 	ldw	r2,-36(fp)
    7ad8:	10800284 	addi	r2,r2,10
    7adc:	1085883a 	add	r2,r2,r2
    7ae0:	1085883a 	add	r2,r2,r2
    7ae4:	1885883a 	add	r2,r3,r2
    7ae8:	10800017 	ldw	r2,0(r2)
    7aec:	e0bffa15 	stw	r2,-24(fp)
    7af0:	e0bffa17 	ldw	r2,-24(fp)
    7af4:	1004143a 	roli	r2,r2,16
    7af8:	e0bffa15 	stw	r2,-24(fp)
    7afc:	e0fffa17 	ldw	r3,-24(fp)
    7b00:	00bfc074 	movhi	r2,65281
    7b04:	10bfc004 	addi	r2,r2,-256
    7b08:	1884703a 	and	r2,r3,r2
    7b0c:	1006d23a 	srli	r3,r2,8
    7b10:	e13ffa17 	ldw	r4,-24(fp)
    7b14:	00803ff4 	movhi	r2,255
    7b18:	10803fc4 	addi	r2,r2,255
    7b1c:	2084703a 	and	r2,r4,r2
    7b20:	1004923a 	slli	r2,r2,8
    7b24:	1886b03a 	or	r3,r3,r2
    7b28:	e13ffc17 	ldw	r4,-16(fp)
    7b2c:	e0bff717 	ldw	r2,-36(fp)
    7b30:	10800284 	addi	r2,r2,10
    7b34:	1085883a 	add	r2,r2,r2
    7b38:	1085883a 	add	r2,r2,r2
    7b3c:	2085883a 	add	r2,r4,r2
    7b40:	10c00015 	stw	r3,0(r2)
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA256_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    7b44:	e0bff717 	ldw	r2,-36(fp)
    7b48:	10800044 	addi	r2,r2,1
    7b4c:	e0bff715 	stw	r2,-36(fp)
    7b50:	e0bff717 	ldw	r2,-36(fp)
    7b54:	10800390 	cmplti	r2,r2,14
    7b58:	103fdd1e 	bne	r2,zero,7ad0 <__alt_mem_epcs_flash_controller+0xfdffead0>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Set the bit count: */
		context->buffer[14] = context->bitcount >> 32;
    7b5c:	e13ffc17 	ldw	r4,-16(fp)
    7b60:	20800817 	ldw	r2,32(r4)
    7b64:	20c00917 	ldw	r3,36(r4)
    7b68:	1820d83a 	srl	r16,r3,zero
    7b6c:	0023883a 	mov	r17,zero
    7b70:	8007883a 	mov	r3,r16
    7b74:	e0bffc17 	ldw	r2,-16(fp)
    7b78:	10c01815 	stw	r3,96(r2)
		context->buffer[15] = context->bitcount & 0xffffffff;
    7b7c:	e13ffc17 	ldw	r4,-16(fp)
    7b80:	20800817 	ldw	r2,32(r4)
    7b84:	20c00917 	ldw	r3,36(r4)
    7b88:	1007883a 	mov	r3,r2
    7b8c:	e0bffc17 	ldw	r2,-16(fp)
    7b90:	10c01915 	stw	r3,100(r2)

		/* Final transform: */
		trezor_sha256_Transform(context->state, context->buffer, context->state);
    7b94:	e0fffc17 	ldw	r3,-16(fp)
    7b98:	e0bffc17 	ldw	r2,-16(fp)
    7b9c:	10800a04 	addi	r2,r2,40
    7ba0:	e13ffc17 	ldw	r4,-16(fp)
    7ba4:	200d883a 	mov	r6,r4
    7ba8:	100b883a 	mov	r5,r2
    7bac:	1809883a 	mov	r4,r3
    7bb0:	0006f7c0 	call	6f7c <trezor_sha256_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    7bb4:	e03ff815 	stw	zero,-32(fp)
    7bb8:	00001e06 	br	7c34 <trezor_sha256_Final+0x2e8>
			REVERSE32(context->state[j],context->state[j]);
    7bbc:	e0fffc17 	ldw	r3,-16(fp)
    7bc0:	e0bff817 	ldw	r2,-32(fp)
    7bc4:	1085883a 	add	r2,r2,r2
    7bc8:	1085883a 	add	r2,r2,r2
    7bcc:	1885883a 	add	r2,r3,r2
    7bd0:	10800017 	ldw	r2,0(r2)
    7bd4:	e0bffb15 	stw	r2,-20(fp)
    7bd8:	e0bffb17 	ldw	r2,-20(fp)
    7bdc:	1004143a 	roli	r2,r2,16
    7be0:	e0bffb15 	stw	r2,-20(fp)
    7be4:	e0fffb17 	ldw	r3,-20(fp)
    7be8:	00bfc074 	movhi	r2,65281
    7bec:	10bfc004 	addi	r2,r2,-256
    7bf0:	1884703a 	and	r2,r3,r2
    7bf4:	1006d23a 	srli	r3,r2,8
    7bf8:	e13ffb17 	ldw	r4,-20(fp)
    7bfc:	00803ff4 	movhi	r2,255
    7c00:	10803fc4 	addi	r2,r2,255
    7c04:	2084703a 	and	r2,r4,r2
    7c08:	1004923a 	slli	r2,r2,8
    7c0c:	1886b03a 	or	r3,r3,r2
    7c10:	e13ffc17 	ldw	r4,-16(fp)
    7c14:	e0bff817 	ldw	r2,-32(fp)
    7c18:	1085883a 	add	r2,r2,r2
    7c1c:	1085883a 	add	r2,r2,r2
    7c20:	2085883a 	add	r2,r4,r2
    7c24:	10c00015 	stw	r3,0(r2)
		/* Final transform: */
		trezor_sha256_Transform(context->state, context->buffer, context->state);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    7c28:	e0bff817 	ldw	r2,-32(fp)
    7c2c:	10800044 	addi	r2,r2,1
    7c30:	e0bff815 	stw	r2,-32(fp)
    7c34:	e0bff817 	ldw	r2,-32(fp)
    7c38:	10800210 	cmplti	r2,r2,8
    7c3c:	103fdf1e 	bne	r2,zero,7bbc <__alt_mem_epcs_flash_controller+0xfdffebbc>
			REVERSE32(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA256_DIGEST_LENGTH);
    7c40:	e0bffc17 	ldw	r2,-16(fp)
    7c44:	01800804 	movi	r6,32
    7c48:	100b883a 	mov	r5,r2
    7c4c:	e13ffd17 	ldw	r4,-12(fp)
    7c50:	000a0f40 	call	a0f4 <memcpy>
	}

	/* Clean up state data: */
	memzero(context, sizeof(SHA256_CTX));
    7c54:	01401a04 	movi	r5,104
    7c58:	e13ffc17 	ldw	r4,-16(fp)
    7c5c:	00018040 	call	1804 <memzero>
	usedspace = 0;
    7c60:	e03ff515 	stw	zero,-44(fp)
}
    7c64:	0001883a 	nop
    7c68:	e6fffe04 	addi	sp,fp,-8
    7c6c:	dfc00317 	ldw	ra,12(sp)
    7c70:	df000217 	ldw	fp,8(sp)
    7c74:	dc400117 	ldw	r17,4(sp)
    7c78:	dc000017 	ldw	r16,0(sp)
    7c7c:	dec00404 	addi	sp,sp,16
    7c80:	f800283a 	ret

00007c84 <trezor_sha256_End>:

char *trezor_sha256_End(SHA256_CTX* context, char buffer[]) {
    7c84:	defff204 	addi	sp,sp,-56
    7c88:	dfc00d15 	stw	ra,52(sp)
    7c8c:	df000c15 	stw	fp,48(sp)
    7c90:	df000c04 	addi	fp,sp,48
    7c94:	e13ffe15 	stw	r4,-8(fp)
    7c98:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA256_DIGEST_LENGTH], *d = digest;
    7c9c:	e0bff604 	addi	r2,fp,-40
    7ca0:	e0bff415 	stw	r2,-48(fp)
	int		i;

	if (buffer != (char*)0) {
    7ca4:	e0bfff17 	ldw	r2,-4(fp)
    7ca8:	10002926 	beq	r2,zero,7d50 <trezor_sha256_End+0xcc>
		trezor_sha256_Final(context, digest);
    7cac:	e0bff604 	addi	r2,fp,-40
    7cb0:	100b883a 	mov	r5,r2
    7cb4:	e13ffe17 	ldw	r4,-8(fp)
    7cb8:	000794c0 	call	794c <trezor_sha256_Final>

		for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
    7cbc:	e03ff515 	stw	zero,-44(fp)
    7cc0:	00001d06 	br	7d38 <trezor_sha256_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    7cc4:	e0bfff17 	ldw	r2,-4(fp)
    7cc8:	10c00044 	addi	r3,r2,1
    7ccc:	e0ffff15 	stw	r3,-4(fp)
    7cd0:	d1200017 	ldw	r4,-32768(gp)
    7cd4:	e0fff417 	ldw	r3,-48(fp)
    7cd8:	18c00003 	ldbu	r3,0(r3)
    7cdc:	18c03fcc 	andi	r3,r3,255
    7ce0:	1806d13a 	srli	r3,r3,4
    7ce4:	18c03fcc 	andi	r3,r3,255
    7ce8:	20c7883a 	add	r3,r4,r3
    7cec:	18c00003 	ldbu	r3,0(r3)
    7cf0:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    7cf4:	e0bfff17 	ldw	r2,-4(fp)
    7cf8:	10c00044 	addi	r3,r2,1
    7cfc:	e0ffff15 	stw	r3,-4(fp)
    7d00:	d1200017 	ldw	r4,-32768(gp)
    7d04:	e0fff417 	ldw	r3,-48(fp)
    7d08:	18c00003 	ldbu	r3,0(r3)
    7d0c:	18c03fcc 	andi	r3,r3,255
    7d10:	18c003cc 	andi	r3,r3,15
    7d14:	20c7883a 	add	r3,r4,r3
    7d18:	18c00003 	ldbu	r3,0(r3)
    7d1c:	10c00005 	stb	r3,0(r2)
			d++;
    7d20:	e0bff417 	ldw	r2,-48(fp)
    7d24:	10800044 	addi	r2,r2,1
    7d28:	e0bff415 	stw	r2,-48(fp)
	int		i;

	if (buffer != (char*)0) {
		trezor_sha256_Final(context, digest);

		for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
    7d2c:	e0bff517 	ldw	r2,-44(fp)
    7d30:	10800044 	addi	r2,r2,1
    7d34:	e0bff515 	stw	r2,-44(fp)
    7d38:	e0bff517 	ldw	r2,-44(fp)
    7d3c:	10800810 	cmplti	r2,r2,32
    7d40:	103fe01e 	bne	r2,zero,7cc4 <__alt_mem_epcs_flash_controller+0xfdffecc4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    7d44:	e0bfff17 	ldw	r2,-4(fp)
    7d48:	10000005 	stb	zero,0(r2)
    7d4c:	00000306 	br	7d5c <trezor_sha256_End+0xd8>
	} else {
		memzero(context, sizeof(SHA256_CTX));
    7d50:	01401a04 	movi	r5,104
    7d54:	e13ffe17 	ldw	r4,-8(fp)
    7d58:	00018040 	call	1804 <memzero>
	}
	memzero(digest, SHA256_DIGEST_LENGTH);
    7d5c:	e0bff604 	addi	r2,fp,-40
    7d60:	01400804 	movi	r5,32
    7d64:	1009883a 	mov	r4,r2
    7d68:	00018040 	call	1804 <memzero>
	return buffer;
    7d6c:	e0bfff17 	ldw	r2,-4(fp)
}
    7d70:	e037883a 	mov	sp,fp
    7d74:	dfc00117 	ldw	ra,4(sp)
    7d78:	df000017 	ldw	fp,0(sp)
    7d7c:	dec00204 	addi	sp,sp,8
    7d80:	f800283a 	ret

00007d84 <trezor_sha256_Raw>:

void trezor_sha256_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA256_DIGEST_LENGTH]) {
    7d84:	deffe104 	addi	sp,sp,-124
    7d88:	dfc01e15 	stw	ra,120(sp)
    7d8c:	df001d15 	stw	fp,116(sp)
    7d90:	df001d04 	addi	fp,sp,116
    7d94:	e13ffd15 	stw	r4,-12(fp)
    7d98:	e17ffe15 	stw	r5,-8(fp)
    7d9c:	e1bfff15 	stw	r6,-4(fp)
	SHA256_CTX	context;
	trezor_sha256_Init(&context);
    7da0:	e13fe304 	addi	r4,fp,-116
    7da4:	0006f0c0 	call	6f0c <trezor_sha256_Init>
	trezor_sha256_Update(&context, data, len);
    7da8:	e1bffe17 	ldw	r6,-8(fp)
    7dac:	e17ffd17 	ldw	r5,-12(fp)
    7db0:	e13fe304 	addi	r4,fp,-116
    7db4:	00075440 	call	7544 <trezor_sha256_Update>
	trezor_sha256_Final(&context, digest);
    7db8:	e17fff17 	ldw	r5,-4(fp)
    7dbc:	e13fe304 	addi	r4,fp,-116
    7dc0:	000794c0 	call	794c <trezor_sha256_Final>
}
    7dc4:	0001883a 	nop
    7dc8:	e037883a 	mov	sp,fp
    7dcc:	dfc00117 	ldw	ra,4(sp)
    7dd0:	df000017 	ldw	fp,0(sp)
    7dd4:	dec00204 	addi	sp,sp,8
    7dd8:	f800283a 	ret

00007ddc <sha256_Data>:

char* sha256_Data(const sha2_byte* data, size_t len, char digest[SHA256_DIGEST_STRING_LENGTH]) {
    7ddc:	deffe104 	addi	sp,sp,-124
    7de0:	dfc01e15 	stw	ra,120(sp)
    7de4:	df001d15 	stw	fp,116(sp)
    7de8:	df001d04 	addi	fp,sp,116
    7dec:	e13ffd15 	stw	r4,-12(fp)
    7df0:	e17ffe15 	stw	r5,-8(fp)
    7df4:	e1bfff15 	stw	r6,-4(fp)
	SHA256_CTX	context;

	trezor_sha256_Init(&context);
    7df8:	e13fe304 	addi	r4,fp,-116
    7dfc:	0006f0c0 	call	6f0c <trezor_sha256_Init>
	trezor_sha256_Update(&context, data, len);
    7e00:	e1bffe17 	ldw	r6,-8(fp)
    7e04:	e17ffd17 	ldw	r5,-12(fp)
    7e08:	e13fe304 	addi	r4,fp,-116
    7e0c:	00075440 	call	7544 <trezor_sha256_Update>
	return trezor_sha256_End(&context, digest);
    7e10:	e17fff17 	ldw	r5,-4(fp)
    7e14:	e13fe304 	addi	r4,fp,-116
    7e18:	0007c840 	call	7c84 <trezor_sha256_End>
}
    7e1c:	e037883a 	mov	sp,fp
    7e20:	dfc00117 	ldw	ra,4(sp)
    7e24:	df000017 	ldw	fp,0(sp)
    7e28:	dec00204 	addi	sp,sp,8
    7e2c:	f800283a 	ret

00007e30 <trezor_sha512_Init>:


/*** SHA-512: *********************************************************/
void trezor_sha512_Init(SHA512_CTX* context) {
    7e30:	defffd04 	addi	sp,sp,-12
    7e34:	dfc00215 	stw	ra,8(sp)
    7e38:	df000115 	stw	fp,4(sp)
    7e3c:	df000104 	addi	fp,sp,4
    7e40:	e13fff15 	stw	r4,-4(fp)
	if (context == (SHA512_CTX*)0) {
    7e44:	e0bfff17 	ldw	r2,-4(fp)
    7e48:	10001526 	beq	r2,zero,7ea0 <trezor_sha512_Init+0x70>
		return;
	}
	MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
    7e4c:	e0bfff17 	ldw	r2,-4(fp)
    7e50:	01801004 	movi	r6,64
    7e54:	01400074 	movhi	r5,1
    7e58:	295d3b04 	addi	r5,r5,29932
    7e5c:	1009883a 	mov	r4,r2
    7e60:	000a0f40 	call	a0f4 <memcpy>
	memzero(context->buffer, SHA512_BLOCK_LENGTH);
    7e64:	e0bfff17 	ldw	r2,-4(fp)
    7e68:	10801404 	addi	r2,r2,80
    7e6c:	01402004 	movi	r5,128
    7e70:	1009883a 	mov	r4,r2
    7e74:	00018040 	call	1804 <memzero>
	context->bitcount[0] = context->bitcount[1] =  0;
    7e78:	e0bfff17 	ldw	r2,-4(fp)
    7e7c:	10001215 	stw	zero,72(r2)
    7e80:	10001315 	stw	zero,76(r2)
    7e84:	e13fff17 	ldw	r4,-4(fp)
    7e88:	20801217 	ldw	r2,72(r4)
    7e8c:	20c01317 	ldw	r3,76(r4)
    7e90:	e13fff17 	ldw	r4,-4(fp)
    7e94:	20801015 	stw	r2,64(r4)
    7e98:	20c01115 	stw	r3,68(r4)
    7e9c:	00000106 	br	7ea4 <trezor_sha512_Init+0x74>


/*** SHA-512: *********************************************************/
void trezor_sha512_Init(SHA512_CTX* context) {
	if (context == (SHA512_CTX*)0) {
		return;
    7ea0:	0001883a 	nop
	}
	MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
	memzero(context->buffer, SHA512_BLOCK_LENGTH);
	context->bitcount[0] = context->bitcount[1] =  0;
}
    7ea4:	e037883a 	mov	sp,fp
    7ea8:	dfc00117 	ldw	ra,4(sp)
    7eac:	df000017 	ldw	fp,0(sp)
    7eb0:	dec00204 	addi	sp,sp,8
    7eb4:	f800283a 	ret

00007eb8 <trezor_sha512_Transform>:
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void trezor_sha512_Transform(const sha2_word64* state_in, const sha2_word64* data, sha2_word64* state_out) {
    7eb8:	deff6e04 	addi	sp,sp,-584
    7ebc:	df009115 	stw	fp,580(sp)
    7ec0:	dd809015 	stw	r22,576(sp)
    7ec4:	dd408f15 	stw	r21,572(sp)
    7ec8:	dd008e15 	stw	r20,568(sp)
    7ecc:	dcc08d15 	stw	r19,564(sp)
    7ed0:	dc808c15 	stw	r18,560(sp)
    7ed4:	dc408b15 	stw	r17,556(sp)
    7ed8:	dc008a15 	stw	r16,552(sp)
    7edc:	df009104 	addi	fp,sp,580
    7ee0:	e13fa815 	stw	r4,-352(fp)
    7ee4:	e17fa915 	stw	r5,-348(fp)
    7ee8:	e1bfaa15 	stw	r6,-344(fp)
	sha2_word64	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word64	T1, T2, W512[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    7eec:	e0ffa817 	ldw	r3,-352(fp)
    7ef0:	18800017 	ldw	r2,0(r3)
    7ef4:	e0bf6f15 	stw	r2,-580(fp)
    7ef8:	18800117 	ldw	r2,4(r3)
    7efc:	e0bf7015 	stw	r2,-576(fp)
	b = state_in[1];
    7f00:	e0ffa817 	ldw	r3,-352(fp)
    7f04:	18800217 	ldw	r2,8(r3)
    7f08:	e0bf7115 	stw	r2,-572(fp)
    7f0c:	18800317 	ldw	r2,12(r3)
    7f10:	e0bf7215 	stw	r2,-568(fp)
	c = state_in[2];
    7f14:	e0ffa817 	ldw	r3,-352(fp)
    7f18:	18800417 	ldw	r2,16(r3)
    7f1c:	e0bf7315 	stw	r2,-564(fp)
    7f20:	18800517 	ldw	r2,20(r3)
    7f24:	e0bf7415 	stw	r2,-560(fp)
	d = state_in[3];
    7f28:	e0ffa817 	ldw	r3,-352(fp)
    7f2c:	18800617 	ldw	r2,24(r3)
    7f30:	e0bf7515 	stw	r2,-556(fp)
    7f34:	18800717 	ldw	r2,28(r3)
    7f38:	e0bf7615 	stw	r2,-552(fp)
	e = state_in[4];
    7f3c:	e0ffa817 	ldw	r3,-352(fp)
    7f40:	18800817 	ldw	r2,32(r3)
    7f44:	e0bf7715 	stw	r2,-548(fp)
    7f48:	18800917 	ldw	r2,36(r3)
    7f4c:	e0bf7815 	stw	r2,-544(fp)
	f = state_in[5];
    7f50:	e0ffa817 	ldw	r3,-352(fp)
    7f54:	18800a17 	ldw	r2,40(r3)
    7f58:	e0bf7915 	stw	r2,-540(fp)
    7f5c:	18800b17 	ldw	r2,44(r3)
    7f60:	e0bf7a15 	stw	r2,-536(fp)
	g = state_in[6];
    7f64:	e0ffa817 	ldw	r3,-352(fp)
    7f68:	18800c17 	ldw	r2,48(r3)
    7f6c:	e0bf7b15 	stw	r2,-532(fp)
    7f70:	18800d17 	ldw	r2,52(r3)
    7f74:	e0bf7c15 	stw	r2,-528(fp)
	h = state_in[7];
    7f78:	e0ffa817 	ldw	r3,-352(fp)
    7f7c:	18800e17 	ldw	r2,56(r3)
    7f80:	e0bf7d15 	stw	r2,-524(fp)
    7f84:	18800f17 	ldw	r2,60(r3)
    7f88:	e0bf7e15 	stw	r2,-520(fp)

	j = 0;
    7f8c:	e03f7f15 	stw	zero,-516(fp)
	do {
		/* Apply the SHA-512 compression function to update a..h with copy */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + (W512[j] = *data++);
    7f90:	e0bf7817 	ldw	r2,-544(fp)
    7f94:	100694ba 	slli	r3,r2,18
    7f98:	e0bf7717 	ldw	r2,-548(fp)
    7f9c:	1004d3ba 	srli	r2,r2,14
    7fa0:	1884b03a 	or	r2,r3,r2
    7fa4:	e0bfab15 	stw	r2,-340(fp)
    7fa8:	e0bf7717 	ldw	r2,-548(fp)
    7fac:	100694ba 	slli	r3,r2,18
    7fb0:	e0bf7817 	ldw	r2,-544(fp)
    7fb4:	1004d3ba 	srli	r2,r2,14
    7fb8:	1884b03a 	or	r2,r3,r2
    7fbc:	e0bfac15 	stw	r2,-336(fp)
    7fc0:	e0bf7817 	ldw	r2,-544(fp)
    7fc4:	100693ba 	slli	r3,r2,14
    7fc8:	e0bf7717 	ldw	r2,-548(fp)
    7fcc:	1004d4ba 	srli	r2,r2,18
    7fd0:	1884b03a 	or	r2,r3,r2
    7fd4:	e0bfad15 	stw	r2,-332(fp)
    7fd8:	e0bf7717 	ldw	r2,-548(fp)
    7fdc:	100693ba 	slli	r3,r2,14
    7fe0:	e0bf7817 	ldw	r2,-544(fp)
    7fe4:	1004d4ba 	srli	r2,r2,18
    7fe8:	1884b03a 	or	r2,r3,r2
    7fec:	e0bfae15 	stw	r2,-328(fp)
    7ff0:	e0bfab17 	ldw	r2,-340(fp)
    7ff4:	e0ffad17 	ldw	r3,-332(fp)
    7ff8:	10c4f03a 	xor	r2,r2,r3
    7ffc:	e0bfaf15 	stw	r2,-324(fp)
    8000:	e13fac17 	ldw	r4,-336(fp)
    8004:	e17fae17 	ldw	r5,-328(fp)
    8008:	2148f03a 	xor	r4,r4,r5
    800c:	e13fb015 	stw	r4,-320(fp)
    8010:	e0bf7717 	ldw	r2,-548(fp)
    8014:	1006d27a 	srli	r3,r2,9
    8018:	e0bf7817 	ldw	r2,-544(fp)
    801c:	100495fa 	slli	r2,r2,23
    8020:	1884b03a 	or	r2,r3,r2
    8024:	e0bfb215 	stw	r2,-312(fp)
    8028:	e0bf7817 	ldw	r2,-544(fp)
    802c:	1006d27a 	srli	r3,r2,9
    8030:	e0bf7717 	ldw	r2,-548(fp)
    8034:	100495fa 	slli	r2,r2,23
    8038:	1884b03a 	or	r2,r3,r2
    803c:	e0bfb115 	stw	r2,-316(fp)
    8040:	e1bfaf17 	ldw	r6,-324(fp)
    8044:	e1ffb117 	ldw	r7,-316(fp)
    8048:	31ccf03a 	xor	r6,r6,r7
    804c:	e1bfb315 	stw	r6,-308(fp)
    8050:	e0bfb017 	ldw	r2,-320(fp)
    8054:	e0ffb217 	ldw	r3,-312(fp)
    8058:	10c4f03a 	xor	r2,r2,r3
    805c:	e0bfb415 	stw	r2,-304(fp)
    8060:	e0bf7d17 	ldw	r2,-524(fp)
    8064:	e0ff7e17 	ldw	r3,-520(fp)
    8068:	e1bfb317 	ldw	r6,-308(fp)
    806c:	3089883a 	add	r4,r6,r2
    8070:	e1ffb317 	ldw	r7,-308(fp)
    8074:	21cd803a 	cmpltu	r6,r4,r7
    8078:	e1ffb417 	ldw	r7,-304(fp)
    807c:	38cb883a 	add	r5,r7,r3
    8080:	3145883a 	add	r2,r6,r5
    8084:	100b883a 	mov	r5,r2
    8088:	200d883a 	mov	r6,r4
    808c:	280f883a 	mov	r7,r5
    8090:	e0ff7717 	ldw	r3,-548(fp)
    8094:	e0bf7917 	ldw	r2,-540(fp)
    8098:	1884703a 	and	r2,r3,r2
    809c:	e0bfb515 	stw	r2,-300(fp)
    80a0:	e0ff7817 	ldw	r3,-544(fp)
    80a4:	e0bf7a17 	ldw	r2,-536(fp)
    80a8:	1884703a 	and	r2,r3,r2
    80ac:	e0bfb615 	stw	r2,-296(fp)
    80b0:	e0bf7717 	ldw	r2,-548(fp)
    80b4:	0084303a 	nor	r2,zero,r2
    80b8:	e0bfb715 	stw	r2,-292(fp)
    80bc:	e0bf7817 	ldw	r2,-544(fp)
    80c0:	0084303a 	nor	r2,zero,r2
    80c4:	e0bfb815 	stw	r2,-288(fp)
    80c8:	e0bf7b17 	ldw	r2,-532(fp)
    80cc:	e0ffb717 	ldw	r3,-292(fp)
    80d0:	10c4703a 	and	r2,r2,r3
    80d4:	e0bfb915 	stw	r2,-284(fp)
    80d8:	e0bf7c17 	ldw	r2,-528(fp)
    80dc:	e13fb817 	ldw	r4,-288(fp)
    80e0:	1104703a 	and	r2,r2,r4
    80e4:	e0bfba15 	stw	r2,-280(fp)
    80e8:	e17fb517 	ldw	r5,-300(fp)
    80ec:	e0bfb917 	ldw	r2,-284(fp)
    80f0:	288af03a 	xor	r5,r5,r2
    80f4:	e17fbb15 	stw	r5,-276(fp)
    80f8:	e0ffb617 	ldw	r3,-296(fp)
    80fc:	e13fba17 	ldw	r4,-280(fp)
    8100:	1906f03a 	xor	r3,r3,r4
    8104:	e0ffbc15 	stw	r3,-272(fp)
    8108:	e17fbb17 	ldw	r5,-276(fp)
    810c:	3145883a 	add	r2,r6,r5
    8110:	1189803a 	cmpltu	r4,r2,r6
    8114:	e17fbc17 	ldw	r5,-272(fp)
    8118:	3947883a 	add	r3,r7,r5
    811c:	20c9883a 	add	r4,r4,r3
    8120:	2007883a 	mov	r3,r4
    8124:	100f883a 	mov	r7,r2
    8128:	1811883a 	mov	r8,r3
    812c:	00c00074 	movhi	r3,1
    8130:	18dc9b04 	addi	r3,r3,29292
    8134:	e0bf7f17 	ldw	r2,-516(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1889883a 	add	r4,r3,r2
    8140:	20800017 	ldw	r2,0(r4)
    8144:	20c00117 	ldw	r3,4(r4)
    8148:	3889883a 	add	r4,r7,r2
    814c:	21cd803a 	cmpltu	r6,r4,r7
    8150:	40cb883a 	add	r5,r8,r3
    8154:	3145883a 	add	r2,r6,r5
    8158:	100b883a 	mov	r5,r2
    815c:	200f883a 	mov	r7,r4
    8160:	2811883a 	mov	r8,r5
    8164:	e0ffa917 	ldw	r3,-348(fp)
    8168:	18800204 	addi	r2,r3,8
    816c:	e0bfa915 	stw	r2,-348(fp)
    8170:	19000017 	ldw	r4,0(r3)
    8174:	19400117 	ldw	r5,4(r3)
    8178:	e0bf7f17 	ldw	r2,-516(fp)
    817c:	100490fa 	slli	r2,r2,3
    8180:	e1bf6f04 	addi	r6,fp,-580
    8184:	3085883a 	add	r2,r6,r2
    8188:	10801904 	addi	r2,r2,100
    818c:	11000015 	stw	r4,0(r2)
    8190:	11400115 	stw	r5,4(r2)
    8194:	e0bf7f17 	ldw	r2,-516(fp)
    8198:	100490fa 	slli	r2,r2,3
    819c:	e0ff6f04 	addi	r3,fp,-580
    81a0:	1885883a 	add	r2,r3,r2
    81a4:	10801904 	addi	r2,r2,100
    81a8:	11000017 	ldw	r4,0(r2)
    81ac:	11400117 	ldw	r5,4(r2)
    81b0:	3905883a 	add	r2,r7,r4
    81b4:	11cd803a 	cmpltu	r6,r2,r7
    81b8:	4147883a 	add	r3,r8,r5
    81bc:	30c9883a 	add	r4,r6,r3
    81c0:	2007883a 	mov	r3,r4
    81c4:	e0bf8015 	stw	r2,-512(fp)
    81c8:	e0ff8115 	stw	r3,-508(fp)
		T2 = Sigma0_512(a) + Maj(a, b, c);
    81cc:	e0bf7017 	ldw	r2,-576(fp)
    81d0:	1006913a 	slli	r3,r2,4
    81d4:	e0bf6f17 	ldw	r2,-580(fp)
    81d8:	1004d73a 	srli	r2,r2,28
    81dc:	1884b03a 	or	r2,r3,r2
    81e0:	e0bfbd15 	stw	r2,-268(fp)
    81e4:	e0bf6f17 	ldw	r2,-580(fp)
    81e8:	1006913a 	slli	r3,r2,4
    81ec:	e0bf7017 	ldw	r2,-576(fp)
    81f0:	1004d73a 	srli	r2,r2,28
    81f4:	1884b03a 	or	r2,r3,r2
    81f8:	e0bfbe15 	stw	r2,-264(fp)
    81fc:	e0bf6f17 	ldw	r2,-580(fp)
    8200:	1006d0ba 	srli	r3,r2,2
    8204:	e0bf7017 	ldw	r2,-576(fp)
    8208:	100497ba 	slli	r2,r2,30
    820c:	1884b03a 	or	r2,r3,r2
    8210:	e0bfc015 	stw	r2,-256(fp)
    8214:	e0bf7017 	ldw	r2,-576(fp)
    8218:	1006d0ba 	srli	r3,r2,2
    821c:	e0bf6f17 	ldw	r2,-580(fp)
    8220:	100497ba 	slli	r2,r2,30
    8224:	1884b03a 	or	r2,r3,r2
    8228:	e0bfbf15 	stw	r2,-260(fp)
    822c:	e13fbd17 	ldw	r4,-268(fp)
    8230:	e17fbf17 	ldw	r5,-260(fp)
    8234:	2148f03a 	xor	r4,r4,r5
    8238:	e13fc115 	stw	r4,-252(fp)
    823c:	e1bfbe17 	ldw	r6,-264(fp)
    8240:	e1ffc017 	ldw	r7,-256(fp)
    8244:	31ccf03a 	xor	r6,r6,r7
    8248:	e1bfc215 	stw	r6,-248(fp)
    824c:	e0bf6f17 	ldw	r2,-580(fp)
    8250:	1006d1fa 	srli	r3,r2,7
    8254:	e0bf7017 	ldw	r2,-576(fp)
    8258:	1004967a 	slli	r2,r2,25
    825c:	18acb03a 	or	r22,r3,r2
    8260:	e0bf7017 	ldw	r2,-576(fp)
    8264:	1006d1fa 	srli	r3,r2,7
    8268:	e0bf6f17 	ldw	r2,-580(fp)
    826c:	1004967a 	slli	r2,r2,25
    8270:	18aab03a 	or	r21,r3,r2
    8274:	e0bfc117 	ldw	r2,-252(fp)
    8278:	1552f03a 	xor	r9,r2,r21
    827c:	e0ffc217 	ldw	r3,-248(fp)
    8280:	1d94f03a 	xor	r10,r3,r22
    8284:	e0ff6f17 	ldw	r3,-580(fp)
    8288:	e0bf7117 	ldw	r2,-572(fp)
    828c:	18a6703a 	and	r19,r3,r2
    8290:	e0ff7017 	ldw	r3,-576(fp)
    8294:	e0bf7217 	ldw	r2,-568(fp)
    8298:	18a8703a 	and	r20,r3,r2
    829c:	e0ff6f17 	ldw	r3,-580(fp)
    82a0:	e0bf7317 	ldw	r2,-564(fp)
    82a4:	18a2703a 	and	r17,r3,r2
    82a8:	e0ff7017 	ldw	r3,-576(fp)
    82ac:	e0bf7417 	ldw	r2,-560(fp)
    82b0:	18a4703a 	and	r18,r3,r2
    82b4:	9c5ef03a 	xor	r15,r19,r17
    82b8:	a4a0f03a 	xor	r16,r20,r18
    82bc:	e0ff7117 	ldw	r3,-572(fp)
    82c0:	e0bf7317 	ldw	r2,-564(fp)
    82c4:	189a703a 	and	r13,r3,r2
    82c8:	e0ff7217 	ldw	r3,-568(fp)
    82cc:	e0bf7417 	ldw	r2,-560(fp)
    82d0:	189c703a 	and	r14,r3,r2
    82d4:	7b56f03a 	xor	r11,r15,r13
    82d8:	8398f03a 	xor	r12,r16,r14
    82dc:	4ac5883a 	add	r2,r9,r11
    82e0:	1249803a 	cmpltu	r4,r2,r9
    82e4:	5307883a 	add	r3,r10,r12
    82e8:	20c9883a 	add	r4,r4,r3
    82ec:	2007883a 	mov	r3,r4
    82f0:	e0bf8215 	stw	r2,-504(fp)
    82f4:	e0ff8315 	stw	r3,-500(fp)
		h = g;
    82f8:	e0bf7b17 	ldw	r2,-532(fp)
    82fc:	e0bf7d15 	stw	r2,-524(fp)
    8300:	e0bf7c17 	ldw	r2,-528(fp)
    8304:	e0bf7e15 	stw	r2,-520(fp)
		g = f;
    8308:	e0bf7917 	ldw	r2,-540(fp)
    830c:	e0bf7b15 	stw	r2,-532(fp)
    8310:	e0bf7a17 	ldw	r2,-536(fp)
    8314:	e0bf7c15 	stw	r2,-528(fp)
		f = e;
    8318:	e0bf7717 	ldw	r2,-548(fp)
    831c:	e0bf7915 	stw	r2,-540(fp)
    8320:	e0bf7817 	ldw	r2,-544(fp)
    8324:	e0bf7a15 	stw	r2,-536(fp)
		e = d + T1;
    8328:	e1ff7517 	ldw	r7,-556(fp)
    832c:	e23f7617 	ldw	r8,-552(fp)
    8330:	e13f8017 	ldw	r4,-512(fp)
    8334:	e17f8117 	ldw	r5,-508(fp)
    8338:	3905883a 	add	r2,r7,r4
    833c:	11cd803a 	cmpltu	r6,r2,r7
    8340:	4147883a 	add	r3,r8,r5
    8344:	30c9883a 	add	r4,r6,r3
    8348:	2007883a 	mov	r3,r4
    834c:	e0bf7715 	stw	r2,-548(fp)
    8350:	e0ff7815 	stw	r3,-544(fp)
		d = c;
    8354:	e0bf7317 	ldw	r2,-564(fp)
    8358:	e0bf7515 	stw	r2,-556(fp)
    835c:	e0bf7417 	ldw	r2,-560(fp)
    8360:	e0bf7615 	stw	r2,-552(fp)
		c = b;
    8364:	e0bf7117 	ldw	r2,-572(fp)
    8368:	e0bf7315 	stw	r2,-564(fp)
    836c:	e0bf7217 	ldw	r2,-568(fp)
    8370:	e0bf7415 	stw	r2,-560(fp)
		b = a;
    8374:	e0bf6f17 	ldw	r2,-580(fp)
    8378:	e0bf7115 	stw	r2,-572(fp)
    837c:	e0bf7017 	ldw	r2,-576(fp)
    8380:	e0bf7215 	stw	r2,-568(fp)
		a = T1 + T2;
    8384:	e1ff8017 	ldw	r7,-512(fp)
    8388:	e23f8117 	ldw	r8,-508(fp)
    838c:	e13f8217 	ldw	r4,-504(fp)
    8390:	e17f8317 	ldw	r5,-500(fp)
    8394:	3905883a 	add	r2,r7,r4
    8398:	11cd803a 	cmpltu	r6,r2,r7
    839c:	4147883a 	add	r3,r8,r5
    83a0:	30c9883a 	add	r4,r6,r3
    83a4:	2007883a 	mov	r3,r4
    83a8:	e0bf6f15 	stw	r2,-580(fp)
    83ac:	e0ff7015 	stw	r3,-576(fp)

		j++;
    83b0:	e0bf7f17 	ldw	r2,-516(fp)
    83b4:	10800044 	addi	r2,r2,1
    83b8:	e0bf7f15 	stw	r2,-516(fp)
	} while (j < 16);
    83bc:	e0bf7f17 	ldw	r2,-516(fp)
    83c0:	10800410 	cmplti	r2,r2,16
    83c4:	103ef21e 	bne	r2,zero,7f90 <__alt_mem_epcs_flash_controller+0xfdffef90>

	do {
		/* Part of the message block expansion: */
		s0 = W512[(j+1)&0x0f];
    83c8:	e0bf7f17 	ldw	r2,-516(fp)
    83cc:	10800044 	addi	r2,r2,1
    83d0:	108003cc 	andi	r2,r2,15
    83d4:	100490fa 	slli	r2,r2,3
    83d8:	e13f6f04 	addi	r4,fp,-580
    83dc:	2085883a 	add	r2,r4,r2
    83e0:	10c01904 	addi	r3,r2,100
    83e4:	18800017 	ldw	r2,0(r3)
    83e8:	e0bf8415 	stw	r2,-496(fp)
    83ec:	18800117 	ldw	r2,4(r3)
    83f0:	e0bf8515 	stw	r2,-492(fp)
		s0 = sigma0_512(s0);
    83f4:	e0bf8517 	ldw	r2,-492(fp)
    83f8:	100697fa 	slli	r3,r2,31
    83fc:	e0bf8417 	ldw	r2,-496(fp)
    8400:	1004d07a 	srli	r2,r2,1
    8404:	1884b03a 	or	r2,r3,r2
    8408:	e0bfc315 	stw	r2,-244(fp)
    840c:	e0bf8417 	ldw	r2,-496(fp)
    8410:	100697fa 	slli	r3,r2,31
    8414:	e0bf8517 	ldw	r2,-492(fp)
    8418:	1004d07a 	srli	r2,r2,1
    841c:	1884b03a 	or	r2,r3,r2
    8420:	e0bfc415 	stw	r2,-240(fp)
    8424:	e0bf8517 	ldw	r2,-492(fp)
    8428:	1006963a 	slli	r3,r2,24
    842c:	e0bf8417 	ldw	r2,-496(fp)
    8430:	1004d23a 	srli	r2,r2,8
    8434:	1884b03a 	or	r2,r3,r2
    8438:	e0bfc515 	stw	r2,-236(fp)
    843c:	e0bf8417 	ldw	r2,-496(fp)
    8440:	1006963a 	slli	r3,r2,24
    8444:	e0bf8517 	ldw	r2,-492(fp)
    8448:	1004d23a 	srli	r2,r2,8
    844c:	1884b03a 	or	r2,r3,r2
    8450:	e0bfc615 	stw	r2,-232(fp)
    8454:	e17fc317 	ldw	r5,-244(fp)
    8458:	e1bfc517 	ldw	r6,-236(fp)
    845c:	298af03a 	xor	r5,r5,r6
    8460:	e17fc715 	stw	r5,-228(fp)
    8464:	e1ffc417 	ldw	r7,-240(fp)
    8468:	e0bfc617 	ldw	r2,-232(fp)
    846c:	388ef03a 	xor	r7,r7,r2
    8470:	e1ffc815 	stw	r7,-224(fp)
    8474:	e0bf8517 	ldw	r2,-492(fp)
    8478:	1006967a 	slli	r3,r2,25
    847c:	e0bf8417 	ldw	r2,-496(fp)
    8480:	1004d1fa 	srli	r2,r2,7
    8484:	e0bfc915 	stw	r2,-220(fp)
    8488:	e13fc917 	ldw	r4,-220(fp)
    848c:	1906b03a 	or	r3,r3,r4
    8490:	e0ffc915 	stw	r3,-220(fp)
    8494:	e0bf8517 	ldw	r2,-492(fp)
    8498:	1004d1fa 	srli	r2,r2,7
    849c:	e0bfca15 	stw	r2,-216(fp)
    84a0:	e17fc717 	ldw	r5,-228(fp)
    84a4:	e1bfc917 	ldw	r6,-220(fp)
    84a8:	2984f03a 	xor	r2,r5,r6
    84ac:	e0bf8415 	stw	r2,-496(fp)
    84b0:	e1ffc817 	ldw	r7,-224(fp)
    84b4:	e0ffca17 	ldw	r3,-216(fp)
    84b8:	38c4f03a 	xor	r2,r7,r3
    84bc:	e0bf8515 	stw	r2,-492(fp)
		s1 = W512[(j+14)&0x0f];
    84c0:	e0bf7f17 	ldw	r2,-516(fp)
    84c4:	10800384 	addi	r2,r2,14
    84c8:	108003cc 	andi	r2,r2,15
    84cc:	100490fa 	slli	r2,r2,3
    84d0:	e13f6f04 	addi	r4,fp,-580
    84d4:	2085883a 	add	r2,r4,r2
    84d8:	10c01904 	addi	r3,r2,100
    84dc:	18800017 	ldw	r2,0(r3)
    84e0:	e0bf8615 	stw	r2,-488(fp)
    84e4:	18800117 	ldw	r2,4(r3)
    84e8:	e0bf8715 	stw	r2,-484(fp)
		s1 =  sigma1_512(s1);
    84ec:	e0bf8717 	ldw	r2,-484(fp)
    84f0:	1006937a 	slli	r3,r2,13
    84f4:	e0bf8617 	ldw	r2,-488(fp)
    84f8:	1004d4fa 	srli	r2,r2,19
    84fc:	1884b03a 	or	r2,r3,r2
    8500:	e0bfcb15 	stw	r2,-212(fp)
    8504:	e0bf8617 	ldw	r2,-488(fp)
    8508:	1006937a 	slli	r3,r2,13
    850c:	e0bf8717 	ldw	r2,-484(fp)
    8510:	1004d4fa 	srli	r2,r2,19
    8514:	1884b03a 	or	r2,r3,r2
    8518:	e0bfcc15 	stw	r2,-208(fp)
    851c:	e0bf8617 	ldw	r2,-488(fp)
    8520:	1006d77a 	srli	r3,r2,29
    8524:	e0bf8717 	ldw	r2,-484(fp)
    8528:	100490fa 	slli	r2,r2,3
    852c:	1884b03a 	or	r2,r3,r2
    8530:	e0bfce15 	stw	r2,-200(fp)
    8534:	e0bf8717 	ldw	r2,-484(fp)
    8538:	1006d77a 	srli	r3,r2,29
    853c:	e0bf8617 	ldw	r2,-488(fp)
    8540:	100490fa 	slli	r2,r2,3
    8544:	1884b03a 	or	r2,r3,r2
    8548:	e0bfcd15 	stw	r2,-204(fp)
    854c:	e17fcb17 	ldw	r5,-212(fp)
    8550:	e1bfcd17 	ldw	r6,-204(fp)
    8554:	298af03a 	xor	r5,r5,r6
    8558:	e17fcf15 	stw	r5,-196(fp)
    855c:	e1ffcc17 	ldw	r7,-208(fp)
    8560:	e0bfce17 	ldw	r2,-200(fp)
    8564:	388ef03a 	xor	r7,r7,r2
    8568:	e1ffd015 	stw	r7,-192(fp)
    856c:	e0bf8717 	ldw	r2,-484(fp)
    8570:	100696ba 	slli	r3,r2,26
    8574:	e0bf8617 	ldw	r2,-488(fp)
    8578:	1004d1ba 	srli	r2,r2,6
    857c:	e0bfd115 	stw	r2,-188(fp)
    8580:	e13fd117 	ldw	r4,-188(fp)
    8584:	1906b03a 	or	r3,r3,r4
    8588:	e0ffd115 	stw	r3,-188(fp)
    858c:	e0bf8717 	ldw	r2,-484(fp)
    8590:	1004d1ba 	srli	r2,r2,6
    8594:	e0bfd215 	stw	r2,-184(fp)
    8598:	e17fcf17 	ldw	r5,-196(fp)
    859c:	e1bfd117 	ldw	r6,-188(fp)
    85a0:	2984f03a 	xor	r2,r5,r6
    85a4:	e0bf8615 	stw	r2,-488(fp)
    85a8:	e1ffd017 	ldw	r7,-192(fp)
    85ac:	e0ffd217 	ldw	r3,-184(fp)
    85b0:	38c4f03a 	xor	r2,r7,r3
    85b4:	e0bf8715 	stw	r2,-484(fp)

		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    85b8:	e0bf7817 	ldw	r2,-544(fp)
    85bc:	100694ba 	slli	r3,r2,18
    85c0:	e0bf7717 	ldw	r2,-548(fp)
    85c4:	1004d3ba 	srli	r2,r2,14
    85c8:	1884b03a 	or	r2,r3,r2
    85cc:	e0bfd315 	stw	r2,-180(fp)
    85d0:	e0bf7717 	ldw	r2,-548(fp)
    85d4:	100694ba 	slli	r3,r2,18
    85d8:	e0bf7817 	ldw	r2,-544(fp)
    85dc:	1004d3ba 	srli	r2,r2,14
    85e0:	1884b03a 	or	r2,r3,r2
    85e4:	e0bfd415 	stw	r2,-176(fp)
    85e8:	e0bf7817 	ldw	r2,-544(fp)
    85ec:	100693ba 	slli	r3,r2,14
    85f0:	e0bf7717 	ldw	r2,-548(fp)
    85f4:	1004d4ba 	srli	r2,r2,18
    85f8:	1884b03a 	or	r2,r3,r2
    85fc:	e0bfd515 	stw	r2,-172(fp)
    8600:	e0bf7717 	ldw	r2,-548(fp)
    8604:	100693ba 	slli	r3,r2,14
    8608:	e0bf7817 	ldw	r2,-544(fp)
    860c:	1004d4ba 	srli	r2,r2,18
    8610:	1884b03a 	or	r2,r3,r2
    8614:	e0bfd615 	stw	r2,-168(fp)
    8618:	e13fd317 	ldw	r4,-180(fp)
    861c:	e17fd517 	ldw	r5,-172(fp)
    8620:	2148f03a 	xor	r4,r4,r5
    8624:	e13fd715 	stw	r4,-164(fp)
    8628:	e1bfd417 	ldw	r6,-176(fp)
    862c:	e1ffd617 	ldw	r7,-168(fp)
    8630:	31ccf03a 	xor	r6,r6,r7
    8634:	e1bfd815 	stw	r6,-160(fp)
    8638:	e0bf7717 	ldw	r2,-548(fp)
    863c:	1006d27a 	srli	r3,r2,9
    8640:	e0bf7817 	ldw	r2,-544(fp)
    8644:	100495fa 	slli	r2,r2,23
    8648:	1884b03a 	or	r2,r3,r2
    864c:	e0bfda15 	stw	r2,-152(fp)
    8650:	e0bf7817 	ldw	r2,-544(fp)
    8654:	1006d27a 	srli	r3,r2,9
    8658:	e0bf7717 	ldw	r2,-548(fp)
    865c:	100495fa 	slli	r2,r2,23
    8660:	1884b03a 	or	r2,r3,r2
    8664:	e0bfd915 	stw	r2,-156(fp)
    8668:	e0bfd717 	ldw	r2,-164(fp)
    866c:	e0ffd917 	ldw	r3,-156(fp)
    8670:	10c4f03a 	xor	r2,r2,r3
    8674:	e0bfdb15 	stw	r2,-148(fp)
    8678:	e13fd817 	ldw	r4,-160(fp)
    867c:	e17fda17 	ldw	r5,-152(fp)
    8680:	2148f03a 	xor	r4,r4,r5
    8684:	e13fdc15 	stw	r4,-144(fp)
    8688:	e0bf7d17 	ldw	r2,-524(fp)
    868c:	e0ff7e17 	ldw	r3,-520(fp)
    8690:	e1bfdb17 	ldw	r6,-148(fp)
    8694:	3089883a 	add	r4,r6,r2
    8698:	e1ffdb17 	ldw	r7,-148(fp)
    869c:	21cd803a 	cmpltu	r6,r4,r7
    86a0:	e1ffdc17 	ldw	r7,-144(fp)
    86a4:	38cb883a 	add	r5,r7,r3
    86a8:	3145883a 	add	r2,r6,r5
    86ac:	100b883a 	mov	r5,r2
    86b0:	200d883a 	mov	r6,r4
    86b4:	280f883a 	mov	r7,r5
    86b8:	e0ff7717 	ldw	r3,-548(fp)
    86bc:	e0bf7917 	ldw	r2,-540(fp)
    86c0:	1884703a 	and	r2,r3,r2
    86c4:	e0bfdd15 	stw	r2,-140(fp)
    86c8:	e0ff7817 	ldw	r3,-544(fp)
    86cc:	e0bf7a17 	ldw	r2,-536(fp)
    86d0:	1884703a 	and	r2,r3,r2
    86d4:	e0bfde15 	stw	r2,-136(fp)
    86d8:	e0bf7717 	ldw	r2,-548(fp)
    86dc:	0084303a 	nor	r2,zero,r2
    86e0:	e0bfdf15 	stw	r2,-132(fp)
    86e4:	e0bf7817 	ldw	r2,-544(fp)
    86e8:	0084303a 	nor	r2,zero,r2
    86ec:	e0bfe015 	stw	r2,-128(fp)
    86f0:	e0bf7b17 	ldw	r2,-532(fp)
    86f4:	e0ffdf17 	ldw	r3,-132(fp)
    86f8:	10c4703a 	and	r2,r2,r3
    86fc:	e0bfe115 	stw	r2,-124(fp)
    8700:	e0bf7c17 	ldw	r2,-528(fp)
    8704:	e13fe017 	ldw	r4,-128(fp)
    8708:	1104703a 	and	r2,r2,r4
    870c:	e0bfe215 	stw	r2,-120(fp)
    8710:	e17fdd17 	ldw	r5,-140(fp)
    8714:	e0bfe117 	ldw	r2,-124(fp)
    8718:	288af03a 	xor	r5,r5,r2
    871c:	e17fe315 	stw	r5,-116(fp)
    8720:	e0ffde17 	ldw	r3,-136(fp)
    8724:	e13fe217 	ldw	r4,-120(fp)
    8728:	1906f03a 	xor	r3,r3,r4
    872c:	e0ffe415 	stw	r3,-112(fp)
    8730:	e17fe317 	ldw	r5,-116(fp)
    8734:	3145883a 	add	r2,r6,r5
    8738:	1189803a 	cmpltu	r4,r2,r6
    873c:	e17fe417 	ldw	r5,-112(fp)
    8740:	3947883a 	add	r3,r7,r5
    8744:	20c9883a 	add	r4,r4,r3
    8748:	2007883a 	mov	r3,r4
    874c:	100f883a 	mov	r7,r2
    8750:	1811883a 	mov	r8,r3
    8754:	00c00074 	movhi	r3,1
    8758:	18dc9b04 	addi	r3,r3,29292
    875c:	e0bf7f17 	ldw	r2,-516(fp)
    8760:	100490fa 	slli	r2,r2,3
    8764:	1889883a 	add	r4,r3,r2
    8768:	20800017 	ldw	r2,0(r4)
    876c:	20c00117 	ldw	r3,4(r4)
    8770:	3889883a 	add	r4,r7,r2
    8774:	21cd803a 	cmpltu	r6,r4,r7
    8778:	40cb883a 	add	r5,r8,r3
    877c:	3145883a 	add	r2,r6,r5
    8780:	100b883a 	mov	r5,r2
    8784:	2017883a 	mov	r11,r4
    8788:	2819883a 	mov	r12,r5
		     (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);
    878c:	e0bf7f17 	ldw	r2,-516(fp)
    8790:	134003cc 	andi	r13,r2,15
    8794:	e0bf7f17 	ldw	r2,-516(fp)
    8798:	108003cc 	andi	r2,r2,15
    879c:	100490fa 	slli	r2,r2,3
    87a0:	e1bf6f04 	addi	r6,fp,-580
    87a4:	3085883a 	add	r2,r6,r2
    87a8:	10801904 	addi	r2,r2,100
    87ac:	12400017 	ldw	r9,0(r2)
    87b0:	12800117 	ldw	r10,4(r2)
    87b4:	e0bf7f17 	ldw	r2,-516(fp)
    87b8:	10800244 	addi	r2,r2,9
    87bc:	108003cc 	andi	r2,r2,15
    87c0:	100490fa 	slli	r2,r2,3
    87c4:	e1ff6f04 	addi	r7,fp,-580
    87c8:	3885883a 	add	r2,r7,r2
    87cc:	10801904 	addi	r2,r2,100
    87d0:	11c00017 	ldw	r7,0(r2)
    87d4:	12000117 	ldw	r8,4(r2)
    87d8:	e0bf8617 	ldw	r2,-488(fp)
    87dc:	e0ff8717 	ldw	r3,-484(fp)
    87e0:	3889883a 	add	r4,r7,r2
    87e4:	21cd803a 	cmpltu	r6,r4,r7
    87e8:	40cb883a 	add	r5,r8,r3
    87ec:	3145883a 	add	r2,r6,r5
    87f0:	100b883a 	mov	r5,r2
    87f4:	200f883a 	mov	r7,r4
    87f8:	2811883a 	mov	r8,r5
    87fc:	e0bf8417 	ldw	r2,-496(fp)
    8800:	e0ff8517 	ldw	r3,-492(fp)
    8804:	3889883a 	add	r4,r7,r2
    8808:	21cd803a 	cmpltu	r6,r4,r7
    880c:	40cb883a 	add	r5,r8,r3
    8810:	3145883a 	add	r2,r6,r5
    8814:	100b883a 	mov	r5,r2
    8818:	200d883a 	mov	r6,r4
    881c:	280f883a 	mov	r7,r5
    8820:	4985883a 	add	r2,r9,r6
    8824:	1249803a 	cmpltu	r4,r2,r9
    8828:	51c7883a 	add	r3,r10,r7
    882c:	20c9883a 	add	r4,r4,r3
    8830:	2007883a 	mov	r3,r4
    8834:	1009883a 	mov	r4,r2
    8838:	180b883a 	mov	r5,r3
    883c:	680490fa 	slli	r2,r13,3
    8840:	e0ff6f04 	addi	r3,fp,-580
    8844:	1885883a 	add	r2,r3,r2
    8848:	10801904 	addi	r2,r2,100
    884c:	11000015 	stw	r4,0(r2)
    8850:	11400115 	stw	r5,4(r2)
    8854:	680490fa 	slli	r2,r13,3
    8858:	e13f6f04 	addi	r4,fp,-580
    885c:	2085883a 	add	r2,r4,r2
    8860:	10801904 	addi	r2,r2,100
    8864:	11000017 	ldw	r4,0(r2)
    8868:	11400117 	ldw	r5,4(r2)
		s0 = sigma0_512(s0);
		s1 = W512[(j+14)&0x0f];
		s1 =  sigma1_512(s1);

		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    886c:	5905883a 	add	r2,r11,r4
    8870:	12cd803a 	cmpltu	r6,r2,r11
    8874:	6147883a 	add	r3,r12,r5
    8878:	30c9883a 	add	r4,r6,r3
    887c:	2007883a 	mov	r3,r4
    8880:	e0bf8015 	stw	r2,-512(fp)
    8884:	e0ff8115 	stw	r3,-508(fp)
		     (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);
		T2 = Sigma0_512(a) + Maj(a, b, c);
    8888:	e0bf7017 	ldw	r2,-576(fp)
    888c:	1006913a 	slli	r3,r2,4
    8890:	e0bf6f17 	ldw	r2,-580(fp)
    8894:	1004d73a 	srli	r2,r2,28
    8898:	1884b03a 	or	r2,r3,r2
    889c:	e0bfe515 	stw	r2,-108(fp)
    88a0:	e0bf6f17 	ldw	r2,-580(fp)
    88a4:	1006913a 	slli	r3,r2,4
    88a8:	e0bf7017 	ldw	r2,-576(fp)
    88ac:	1004d73a 	srli	r2,r2,28
    88b0:	1884b03a 	or	r2,r3,r2
    88b4:	e0bfe615 	stw	r2,-104(fp)
    88b8:	e0bf6f17 	ldw	r2,-580(fp)
    88bc:	1006d0ba 	srli	r3,r2,2
    88c0:	e0bf7017 	ldw	r2,-576(fp)
    88c4:	100497ba 	slli	r2,r2,30
    88c8:	1884b03a 	or	r2,r3,r2
    88cc:	e0bfe815 	stw	r2,-96(fp)
    88d0:	e0bf7017 	ldw	r2,-576(fp)
    88d4:	1006d0ba 	srli	r3,r2,2
    88d8:	e0bf6f17 	ldw	r2,-580(fp)
    88dc:	100497ba 	slli	r2,r2,30
    88e0:	1884b03a 	or	r2,r3,r2
    88e4:	e0bfe715 	stw	r2,-100(fp)
    88e8:	e17fe517 	ldw	r5,-108(fp)
    88ec:	e1bfe717 	ldw	r6,-100(fp)
    88f0:	298af03a 	xor	r5,r5,r6
    88f4:	e17fe915 	stw	r5,-92(fp)
    88f8:	e1ffe617 	ldw	r7,-104(fp)
    88fc:	e0bfe817 	ldw	r2,-96(fp)
    8900:	388ef03a 	xor	r7,r7,r2
    8904:	e1ffea15 	stw	r7,-88(fp)
    8908:	e0bf6f17 	ldw	r2,-580(fp)
    890c:	1006d1fa 	srli	r3,r2,7
    8910:	e0bf7017 	ldw	r2,-576(fp)
    8914:	1004967a 	slli	r2,r2,25
    8918:	1884b03a 	or	r2,r3,r2
    891c:	e0bfec15 	stw	r2,-80(fp)
    8920:	e0bf7017 	ldw	r2,-576(fp)
    8924:	1006d1fa 	srli	r3,r2,7
    8928:	e0bf6f17 	ldw	r2,-580(fp)
    892c:	1004967a 	slli	r2,r2,25
    8930:	1884b03a 	or	r2,r3,r2
    8934:	e0bfeb15 	stw	r2,-84(fp)
    8938:	e0ffe917 	ldw	r3,-92(fp)
    893c:	e13feb17 	ldw	r4,-84(fp)
    8940:	1906f03a 	xor	r3,r3,r4
    8944:	e0ffed15 	stw	r3,-76(fp)
    8948:	e17fea17 	ldw	r5,-88(fp)
    894c:	e1bfec17 	ldw	r6,-80(fp)
    8950:	298af03a 	xor	r5,r5,r6
    8954:	e17fee15 	stw	r5,-72(fp)
    8958:	e0ff6f17 	ldw	r3,-580(fp)
    895c:	e0bf7117 	ldw	r2,-572(fp)
    8960:	1884703a 	and	r2,r3,r2
    8964:	e0bfef15 	stw	r2,-68(fp)
    8968:	e0ff7017 	ldw	r3,-576(fp)
    896c:	e0bf7217 	ldw	r2,-568(fp)
    8970:	1884703a 	and	r2,r3,r2
    8974:	e0bff015 	stw	r2,-64(fp)
    8978:	e0ff6f17 	ldw	r3,-580(fp)
    897c:	e0bf7317 	ldw	r2,-564(fp)
    8980:	1884703a 	and	r2,r3,r2
    8984:	e0bff115 	stw	r2,-60(fp)
    8988:	e0ff7017 	ldw	r3,-576(fp)
    898c:	e0bf7417 	ldw	r2,-560(fp)
    8990:	1884703a 	and	r2,r3,r2
    8994:	e0bff215 	stw	r2,-56(fp)
    8998:	e1ffef17 	ldw	r7,-68(fp)
    899c:	e0bff117 	ldw	r2,-60(fp)
    89a0:	388ef03a 	xor	r7,r7,r2
    89a4:	e1fff315 	stw	r7,-52(fp)
    89a8:	e0fff017 	ldw	r3,-64(fp)
    89ac:	e13ff217 	ldw	r4,-56(fp)
    89b0:	1906f03a 	xor	r3,r3,r4
    89b4:	e0fff415 	stw	r3,-48(fp)
    89b8:	e0ff7117 	ldw	r3,-572(fp)
    89bc:	e0bf7317 	ldw	r2,-564(fp)
    89c0:	1884703a 	and	r2,r3,r2
    89c4:	e0bff515 	stw	r2,-44(fp)
    89c8:	e0ff7217 	ldw	r3,-568(fp)
    89cc:	e0bf7417 	ldw	r2,-560(fp)
    89d0:	1884703a 	and	r2,r3,r2
    89d4:	e0bff615 	stw	r2,-40(fp)
    89d8:	e17ff317 	ldw	r5,-52(fp)
    89dc:	e1bff517 	ldw	r6,-44(fp)
    89e0:	298af03a 	xor	r5,r5,r6
    89e4:	e17ff715 	stw	r5,-36(fp)
    89e8:	e1fff417 	ldw	r7,-48(fp)
    89ec:	e0bff617 	ldw	r2,-40(fp)
    89f0:	388ef03a 	xor	r7,r7,r2
    89f4:	e1fff815 	stw	r7,-32(fp)
    89f8:	e13fed17 	ldw	r4,-76(fp)
    89fc:	e17ff717 	ldw	r5,-36(fp)
    8a00:	2145883a 	add	r2,r4,r5
    8a04:	e1bfed17 	ldw	r6,-76(fp)
    8a08:	1189803a 	cmpltu	r4,r2,r6
    8a0c:	e1ffee17 	ldw	r7,-72(fp)
    8a10:	e17ff817 	ldw	r5,-32(fp)
    8a14:	3947883a 	add	r3,r7,r5
    8a18:	20c9883a 	add	r4,r4,r3
    8a1c:	2007883a 	mov	r3,r4
    8a20:	e0bf8215 	stw	r2,-504(fp)
    8a24:	e0ff8315 	stw	r3,-500(fp)
		h = g;
    8a28:	e0bf7b17 	ldw	r2,-532(fp)
    8a2c:	e0bf7d15 	stw	r2,-524(fp)
    8a30:	e0bf7c17 	ldw	r2,-528(fp)
    8a34:	e0bf7e15 	stw	r2,-520(fp)
		g = f;
    8a38:	e0bf7917 	ldw	r2,-540(fp)
    8a3c:	e0bf7b15 	stw	r2,-532(fp)
    8a40:	e0bf7a17 	ldw	r2,-536(fp)
    8a44:	e0bf7c15 	stw	r2,-528(fp)
		f = e;
    8a48:	e0bf7717 	ldw	r2,-548(fp)
    8a4c:	e0bf7915 	stw	r2,-540(fp)
    8a50:	e0bf7817 	ldw	r2,-544(fp)
    8a54:	e0bf7a15 	stw	r2,-536(fp)
		e = d + T1;
    8a58:	e1ff7517 	ldw	r7,-556(fp)
    8a5c:	e23f7617 	ldw	r8,-552(fp)
    8a60:	e13f8017 	ldw	r4,-512(fp)
    8a64:	e17f8117 	ldw	r5,-508(fp)
    8a68:	3905883a 	add	r2,r7,r4
    8a6c:	11cd803a 	cmpltu	r6,r2,r7
    8a70:	4147883a 	add	r3,r8,r5
    8a74:	30c9883a 	add	r4,r6,r3
    8a78:	2007883a 	mov	r3,r4
    8a7c:	e0bf7715 	stw	r2,-548(fp)
    8a80:	e0ff7815 	stw	r3,-544(fp)
		d = c;
    8a84:	e0bf7317 	ldw	r2,-564(fp)
    8a88:	e0bf7515 	stw	r2,-556(fp)
    8a8c:	e0bf7417 	ldw	r2,-560(fp)
    8a90:	e0bf7615 	stw	r2,-552(fp)
		c = b;
    8a94:	e0bf7117 	ldw	r2,-572(fp)
    8a98:	e0bf7315 	stw	r2,-564(fp)
    8a9c:	e0bf7217 	ldw	r2,-568(fp)
    8aa0:	e0bf7415 	stw	r2,-560(fp)
		b = a;
    8aa4:	e0bf6f17 	ldw	r2,-580(fp)
    8aa8:	e0bf7115 	stw	r2,-572(fp)
    8aac:	e0bf7017 	ldw	r2,-576(fp)
    8ab0:	e0bf7215 	stw	r2,-568(fp)
		a = T1 + T2;
    8ab4:	e1ff8017 	ldw	r7,-512(fp)
    8ab8:	e23f8117 	ldw	r8,-508(fp)
    8abc:	e13f8217 	ldw	r4,-504(fp)
    8ac0:	e17f8317 	ldw	r5,-500(fp)
    8ac4:	3905883a 	add	r2,r7,r4
    8ac8:	11cd803a 	cmpltu	r6,r2,r7
    8acc:	4147883a 	add	r3,r8,r5
    8ad0:	30c9883a 	add	r4,r6,r3
    8ad4:	2007883a 	mov	r3,r4
    8ad8:	e0bf6f15 	stw	r2,-580(fp)
    8adc:	e0ff7015 	stw	r3,-576(fp)

		j++;
    8ae0:	e0bf7f17 	ldw	r2,-516(fp)
    8ae4:	10800044 	addi	r2,r2,1
    8ae8:	e0bf7f15 	stw	r2,-516(fp)
	} while (j < 80);
    8aec:	e0bf7f17 	ldw	r2,-516(fp)
    8af0:	10801410 	cmplti	r2,r2,80
    8af4:	103e341e 	bne	r2,zero,83c8 <__alt_mem_epcs_flash_controller+0xfdfff3c8>

	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    8af8:	e0bfa817 	ldw	r2,-352(fp)
    8afc:	11000017 	ldw	r4,0(r2)
    8b00:	11400117 	ldw	r5,4(r2)
    8b04:	e1bf6f17 	ldw	r6,-580(fp)
    8b08:	e1ff7017 	ldw	r7,-576(fp)
    8b0c:	2185883a 	add	r2,r4,r6
    8b10:	1111803a 	cmpltu	r8,r2,r4
    8b14:	29c7883a 	add	r3,r5,r7
    8b18:	40c9883a 	add	r4,r8,r3
    8b1c:	2007883a 	mov	r3,r4
    8b20:	1009883a 	mov	r4,r2
    8b24:	180b883a 	mov	r5,r3
    8b28:	e0bfaa17 	ldw	r2,-344(fp)
    8b2c:	11000015 	stw	r4,0(r2)
    8b30:	11400115 	stw	r5,4(r2)
	state_out[1] = state_in[1] + b;
    8b34:	e0bfaa17 	ldw	r2,-344(fp)
    8b38:	12000204 	addi	r8,r2,8
    8b3c:	e0bfa817 	ldw	r2,-352(fp)
    8b40:	10800204 	addi	r2,r2,8
    8b44:	11000017 	ldw	r4,0(r2)
    8b48:	11400117 	ldw	r5,4(r2)
    8b4c:	e1bf7117 	ldw	r6,-572(fp)
    8b50:	e1ff7217 	ldw	r7,-568(fp)
    8b54:	2185883a 	add	r2,r4,r6
    8b58:	1113803a 	cmpltu	r9,r2,r4
    8b5c:	29c7883a 	add	r3,r5,r7
    8b60:	48c9883a 	add	r4,r9,r3
    8b64:	2007883a 	mov	r3,r4
    8b68:	1009883a 	mov	r4,r2
    8b6c:	180b883a 	mov	r5,r3
    8b70:	41000015 	stw	r4,0(r8)
    8b74:	41400115 	stw	r5,4(r8)
	state_out[2] = state_in[2] + c;
    8b78:	e0bfaa17 	ldw	r2,-344(fp)
    8b7c:	12000404 	addi	r8,r2,16
    8b80:	e0bfa817 	ldw	r2,-352(fp)
    8b84:	10800404 	addi	r2,r2,16
    8b88:	11000017 	ldw	r4,0(r2)
    8b8c:	11400117 	ldw	r5,4(r2)
    8b90:	e1bf7317 	ldw	r6,-564(fp)
    8b94:	e1ff7417 	ldw	r7,-560(fp)
    8b98:	2185883a 	add	r2,r4,r6
    8b9c:	1113803a 	cmpltu	r9,r2,r4
    8ba0:	29c7883a 	add	r3,r5,r7
    8ba4:	48c9883a 	add	r4,r9,r3
    8ba8:	2007883a 	mov	r3,r4
    8bac:	1009883a 	mov	r4,r2
    8bb0:	180b883a 	mov	r5,r3
    8bb4:	41000015 	stw	r4,0(r8)
    8bb8:	41400115 	stw	r5,4(r8)
	state_out[3] = state_in[3] + d;
    8bbc:	e0bfaa17 	ldw	r2,-344(fp)
    8bc0:	12000604 	addi	r8,r2,24
    8bc4:	e0bfa817 	ldw	r2,-352(fp)
    8bc8:	10800604 	addi	r2,r2,24
    8bcc:	11000017 	ldw	r4,0(r2)
    8bd0:	11400117 	ldw	r5,4(r2)
    8bd4:	e1bf7517 	ldw	r6,-556(fp)
    8bd8:	e1ff7617 	ldw	r7,-552(fp)
    8bdc:	2185883a 	add	r2,r4,r6
    8be0:	1113803a 	cmpltu	r9,r2,r4
    8be4:	29c7883a 	add	r3,r5,r7
    8be8:	48c9883a 	add	r4,r9,r3
    8bec:	2007883a 	mov	r3,r4
    8bf0:	1009883a 	mov	r4,r2
    8bf4:	180b883a 	mov	r5,r3
    8bf8:	41000015 	stw	r4,0(r8)
    8bfc:	41400115 	stw	r5,4(r8)
	state_out[4] = state_in[4] + e;
    8c00:	e0bfaa17 	ldw	r2,-344(fp)
    8c04:	12000804 	addi	r8,r2,32
    8c08:	e0bfa817 	ldw	r2,-352(fp)
    8c0c:	10800804 	addi	r2,r2,32
    8c10:	11000017 	ldw	r4,0(r2)
    8c14:	11400117 	ldw	r5,4(r2)
    8c18:	e1bf7717 	ldw	r6,-548(fp)
    8c1c:	e1ff7817 	ldw	r7,-544(fp)
    8c20:	2185883a 	add	r2,r4,r6
    8c24:	1113803a 	cmpltu	r9,r2,r4
    8c28:	29c7883a 	add	r3,r5,r7
    8c2c:	48c9883a 	add	r4,r9,r3
    8c30:	2007883a 	mov	r3,r4
    8c34:	1009883a 	mov	r4,r2
    8c38:	180b883a 	mov	r5,r3
    8c3c:	41000015 	stw	r4,0(r8)
    8c40:	41400115 	stw	r5,4(r8)
	state_out[5] = state_in[5] + f;
    8c44:	e0bfaa17 	ldw	r2,-344(fp)
    8c48:	12000a04 	addi	r8,r2,40
    8c4c:	e0bfa817 	ldw	r2,-352(fp)
    8c50:	10800a04 	addi	r2,r2,40
    8c54:	11000017 	ldw	r4,0(r2)
    8c58:	11400117 	ldw	r5,4(r2)
    8c5c:	e1bf7917 	ldw	r6,-540(fp)
    8c60:	e1ff7a17 	ldw	r7,-536(fp)
    8c64:	2185883a 	add	r2,r4,r6
    8c68:	1113803a 	cmpltu	r9,r2,r4
    8c6c:	29c7883a 	add	r3,r5,r7
    8c70:	48c9883a 	add	r4,r9,r3
    8c74:	2007883a 	mov	r3,r4
    8c78:	1009883a 	mov	r4,r2
    8c7c:	180b883a 	mov	r5,r3
    8c80:	41000015 	stw	r4,0(r8)
    8c84:	41400115 	stw	r5,4(r8)
	state_out[6] = state_in[6] + g;
    8c88:	e0bfaa17 	ldw	r2,-344(fp)
    8c8c:	12000c04 	addi	r8,r2,48
    8c90:	e0bfa817 	ldw	r2,-352(fp)
    8c94:	10800c04 	addi	r2,r2,48
    8c98:	11000017 	ldw	r4,0(r2)
    8c9c:	11400117 	ldw	r5,4(r2)
    8ca0:	e1bf7b17 	ldw	r6,-532(fp)
    8ca4:	e1ff7c17 	ldw	r7,-528(fp)
    8ca8:	2185883a 	add	r2,r4,r6
    8cac:	1113803a 	cmpltu	r9,r2,r4
    8cb0:	29c7883a 	add	r3,r5,r7
    8cb4:	48c9883a 	add	r4,r9,r3
    8cb8:	2007883a 	mov	r3,r4
    8cbc:	1009883a 	mov	r4,r2
    8cc0:	180b883a 	mov	r5,r3
    8cc4:	41000015 	stw	r4,0(r8)
    8cc8:	41400115 	stw	r5,4(r8)
	state_out[7] = state_in[7] + h;
    8ccc:	e0bfaa17 	ldw	r2,-344(fp)
    8cd0:	12000e04 	addi	r8,r2,56
    8cd4:	e0bfa817 	ldw	r2,-352(fp)
    8cd8:	10800e04 	addi	r2,r2,56
    8cdc:	11000017 	ldw	r4,0(r2)
    8ce0:	11400117 	ldw	r5,4(r2)
    8ce4:	e1bf7d17 	ldw	r6,-524(fp)
    8ce8:	e1ff7e17 	ldw	r7,-520(fp)
    8cec:	2185883a 	add	r2,r4,r6
    8cf0:	1113803a 	cmpltu	r9,r2,r4
    8cf4:	29c7883a 	add	r3,r5,r7
    8cf8:	48c9883a 	add	r4,r9,r3
    8cfc:	2007883a 	mov	r3,r4
    8d00:	1009883a 	mov	r4,r2
    8d04:	180b883a 	mov	r5,r3
    8d08:	41000015 	stw	r4,0(r8)
    8d0c:	41400115 	stw	r5,4(r8)

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
    8d10:	e03f8215 	stw	zero,-504(fp)
    8d14:	e03f8315 	stw	zero,-500(fp)
    8d18:	e0bf8217 	ldw	r2,-504(fp)
    8d1c:	e0bf8015 	stw	r2,-512(fp)
    8d20:	e0bf8317 	ldw	r2,-500(fp)
    8d24:	e0bf8115 	stw	r2,-508(fp)
    8d28:	e0bf8017 	ldw	r2,-512(fp)
    8d2c:	e0bf7d15 	stw	r2,-524(fp)
    8d30:	e0bf8117 	ldw	r2,-508(fp)
    8d34:	e0bf7e15 	stw	r2,-520(fp)
    8d38:	e0bf7d17 	ldw	r2,-524(fp)
    8d3c:	e0bf7b15 	stw	r2,-532(fp)
    8d40:	e0bf7e17 	ldw	r2,-520(fp)
    8d44:	e0bf7c15 	stw	r2,-528(fp)
    8d48:	e0bf7b17 	ldw	r2,-532(fp)
    8d4c:	e0bf7915 	stw	r2,-540(fp)
    8d50:	e0bf7c17 	ldw	r2,-528(fp)
    8d54:	e0bf7a15 	stw	r2,-536(fp)
    8d58:	e0bf7917 	ldw	r2,-540(fp)
    8d5c:	e0bf7715 	stw	r2,-548(fp)
    8d60:	e0bf7a17 	ldw	r2,-536(fp)
    8d64:	e0bf7815 	stw	r2,-544(fp)
    8d68:	e0bf7717 	ldw	r2,-548(fp)
    8d6c:	e0bf7515 	stw	r2,-556(fp)
    8d70:	e0bf7817 	ldw	r2,-544(fp)
    8d74:	e0bf7615 	stw	r2,-552(fp)
    8d78:	e0bf7517 	ldw	r2,-556(fp)
    8d7c:	e0bf7315 	stw	r2,-564(fp)
    8d80:	e0bf7617 	ldw	r2,-552(fp)
    8d84:	e0bf7415 	stw	r2,-560(fp)
    8d88:	e0bf7317 	ldw	r2,-564(fp)
    8d8c:	e0bf7115 	stw	r2,-572(fp)
    8d90:	e0bf7417 	ldw	r2,-560(fp)
    8d94:	e0bf7215 	stw	r2,-568(fp)
    8d98:	e0bf7117 	ldw	r2,-572(fp)
    8d9c:	e0bf6f15 	stw	r2,-580(fp)
    8da0:	e0bf7217 	ldw	r2,-568(fp)
    8da4:	e0bf7015 	stw	r2,-576(fp)
}
    8da8:	0001883a 	nop
    8dac:	e6fff904 	addi	sp,fp,-28
    8db0:	df000717 	ldw	fp,28(sp)
    8db4:	dd800617 	ldw	r22,24(sp)
    8db8:	dd400517 	ldw	r21,20(sp)
    8dbc:	dd000417 	ldw	r20,16(sp)
    8dc0:	dcc00317 	ldw	r19,12(sp)
    8dc4:	dc800217 	ldw	r18,8(sp)
    8dc8:	dc400117 	ldw	r17,4(sp)
    8dcc:	dc000017 	ldw	r16,0(sp)
    8dd0:	dec00804 	addi	sp,sp,32
    8dd4:	f800283a 	ret

00008dd8 <trezor_sha512_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void trezor_sha512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
    8dd8:	deffbf04 	addi	sp,sp,-260
    8ddc:	dfc04015 	stw	ra,256(sp)
    8de0:	df003f15 	stw	fp,252(sp)
    8de4:	ddc03e15 	stw	r23,248(sp)
    8de8:	dd803d15 	stw	r22,244(sp)
    8dec:	dd403c15 	stw	r21,240(sp)
    8df0:	dd003b15 	stw	r20,236(sp)
    8df4:	dcc03a15 	stw	r19,232(sp)
    8df8:	dc803915 	stw	r18,228(sp)
    8dfc:	dc403815 	stw	r17,224(sp)
    8e00:	dc003715 	stw	r16,220(sp)
    8e04:	df003f04 	addi	fp,sp,252
    8e08:	e13fc915 	stw	r4,-220(fp)
    8e0c:	e17fca15 	stw	r5,-216(fp)
    8e10:	e1bfcb15 	stw	r6,-212(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    8e14:	e0bfcb17 	ldw	r2,-212(fp)
    8e18:	1001fd26 	beq	r2,zero,9610 <trezor_sha512_Update+0x838>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    8e1c:	e13fc917 	ldw	r4,-220(fp)
    8e20:	20801017 	ldw	r2,64(r4)
    8e24:	20c01117 	ldw	r3,68(r4)
    8e28:	1808977a 	slli	r4,r3,29
    8e2c:	100ed0fa 	srli	r7,r2,3
    8e30:	21ceb03a 	or	r7,r4,r7
    8e34:	1810d0fa 	srli	r8,r3,3
    8e38:	3805883a 	mov	r2,r7
    8e3c:	10801fcc 	andi	r2,r2,127
    8e40:	e0bfc315 	stw	r2,-244(fp)
	if (usedspace > 0) {
    8e44:	e0bfc317 	ldw	r2,-244(fp)
    8e48:	1001b326 	beq	r2,zero,9518 <trezor_sha512_Update+0x740>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA512_BLOCK_LENGTH - usedspace;
    8e4c:	00c02004 	movi	r3,128
    8e50:	e0bfc317 	ldw	r2,-244(fp)
    8e54:	1885c83a 	sub	r2,r3,r2
    8e58:	e0bfc415 	stw	r2,-240(fp)

		if (len >= freespace) {
    8e5c:	e0ffcb17 	ldw	r3,-212(fp)
    8e60:	e0bfc417 	ldw	r2,-240(fp)
    8e64:	1880c036 	bltu	r3,r2,9168 <trezor_sha512_Update+0x390>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    8e68:	e0bfc917 	ldw	r2,-220(fp)
    8e6c:	10c01404 	addi	r3,r2,80
    8e70:	e0bfc317 	ldw	r2,-244(fp)
    8e74:	1885883a 	add	r2,r3,r2
    8e78:	e1bfc417 	ldw	r6,-240(fp)
    8e7c:	e17fca17 	ldw	r5,-216(fp)
    8e80:	1009883a 	mov	r4,r2
    8e84:	000a0f40 	call	a0f4 <memcpy>
			ADDINC128(context->bitcount, freespace << 3);
    8e88:	e0bfc917 	ldw	r2,-220(fp)
    8e8c:	11401017 	ldw	r5,64(r2)
    8e90:	11801117 	ldw	r6,68(r2)
    8e94:	e0bfc417 	ldw	r2,-240(fp)
    8e98:	100490fa 	slli	r2,r2,3
    8e9c:	102d883a 	mov	r22,r2
    8ea0:	002f883a 	mov	r23,zero
    8ea4:	2d85883a 	add	r2,r5,r22
    8ea8:	1149803a 	cmpltu	r4,r2,r5
    8eac:	35c7883a 	add	r3,r6,r23
    8eb0:	20c9883a 	add	r4,r4,r3
    8eb4:	2007883a 	mov	r3,r4
    8eb8:	1009883a 	mov	r4,r2
    8ebc:	180b883a 	mov	r5,r3
    8ec0:	e0bfc917 	ldw	r2,-220(fp)
    8ec4:	11001015 	stw	r4,64(r2)
    8ec8:	11401115 	stw	r5,68(r2)
    8ecc:	e0bfc917 	ldw	r2,-220(fp)
    8ed0:	10c01017 	ldw	r3,64(r2)
    8ed4:	11001117 	ldw	r4,68(r2)
    8ed8:	e0bfc417 	ldw	r2,-240(fp)
    8edc:	100490fa 	slli	r2,r2,3
    8ee0:	1029883a 	mov	r20,r2
    8ee4:	002b883a 	mov	r21,zero
    8ee8:	25400236 	bltu	r4,r21,8ef4 <trezor_sha512_Update+0x11c>
    8eec:	a900101e 	bne	r21,r4,8f30 <trezor_sha512_Update+0x158>
    8ef0:	1d000f2e 	bgeu	r3,r20,8f30 <trezor_sha512_Update+0x158>
    8ef4:	e0bfc917 	ldw	r2,-220(fp)
    8ef8:	11c01217 	ldw	r7,72(r2)
    8efc:	12001317 	ldw	r8,76(r2)
    8f00:	01000044 	movi	r4,1
    8f04:	000b883a 	mov	r5,zero
    8f08:	3905883a 	add	r2,r7,r4
    8f0c:	11cd803a 	cmpltu	r6,r2,r7
    8f10:	4147883a 	add	r3,r8,r5
    8f14:	30c9883a 	add	r4,r6,r3
    8f18:	2007883a 	mov	r3,r4
    8f1c:	1009883a 	mov	r4,r2
    8f20:	180b883a 	mov	r5,r3
    8f24:	e0bfc917 	ldw	r2,-220(fp)
    8f28:	11001215 	stw	r4,72(r2)
    8f2c:	11401315 	stw	r5,76(r2)
			len -= freespace;
    8f30:	e0ffcb17 	ldw	r3,-212(fp)
    8f34:	e0bfc417 	ldw	r2,-240(fp)
    8f38:	1885c83a 	sub	r2,r3,r2
    8f3c:	e0bfcb15 	stw	r2,-212(fp)
			data += freespace;
    8f40:	e0ffca17 	ldw	r3,-216(fp)
    8f44:	e0bfc417 	ldw	r2,-240(fp)
    8f48:	1885883a 	add	r2,r3,r2
    8f4c:	e0bfca15 	stw	r2,-216(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    8f50:	e03fc115 	stw	zero,-252(fp)
    8f54:	00007906 	br	913c <trezor_sha512_Update+0x364>
				REVERSE64(context->buffer[j],context->buffer[j]);
    8f58:	e0ffc917 	ldw	r3,-220(fp)
    8f5c:	e0bfc117 	ldw	r2,-252(fp)
    8f60:	10800284 	addi	r2,r2,10
    8f64:	100490fa 	slli	r2,r2,3
    8f68:	1887883a 	add	r3,r3,r2
    8f6c:	18800017 	ldw	r2,0(r3)
    8f70:	e0bfc515 	stw	r2,-236(fp)
    8f74:	18800117 	ldw	r2,4(r3)
    8f78:	e0bfc615 	stw	r2,-232(fp)
    8f7c:	e0bfc617 	ldw	r2,-232(fp)
    8f80:	e0bff415 	stw	r2,-48(fp)
    8f84:	e0ffc517 	ldw	r3,-236(fp)
    8f88:	e0fff515 	stw	r3,-44(fp)
    8f8c:	e13ff417 	ldw	r4,-48(fp)
    8f90:	e13fc515 	stw	r4,-236(fp)
    8f94:	e1bff517 	ldw	r6,-44(fp)
    8f98:	e1bfc615 	stw	r6,-232(fp)
    8f9c:	e0ffc517 	ldw	r3,-236(fp)
    8fa0:	00bfc074 	movhi	r2,65281
    8fa4:	10bfc004 	addi	r2,r2,-256
    8fa8:	1884703a 	and	r2,r3,r2
    8fac:	e0bfcc15 	stw	r2,-208(fp)
    8fb0:	e0ffc617 	ldw	r3,-232(fp)
    8fb4:	00bfc074 	movhi	r2,65281
    8fb8:	10bfc004 	addi	r2,r2,-256
    8fbc:	1884703a 	and	r2,r3,r2
    8fc0:	e0bfcd15 	stw	r2,-204(fp)
    8fc4:	e1ffcd17 	ldw	r7,-204(fp)
    8fc8:	3804963a 	slli	r2,r7,24
    8fcc:	e0ffcc17 	ldw	r3,-208(fp)
    8fd0:	1806d23a 	srli	r3,r3,8
    8fd4:	e0ffce15 	stw	r3,-200(fp)
    8fd8:	e13fce17 	ldw	r4,-200(fp)
    8fdc:	1104b03a 	or	r2,r2,r4
    8fe0:	e0bfce15 	stw	r2,-200(fp)
    8fe4:	e1bfcd17 	ldw	r6,-204(fp)
    8fe8:	300cd23a 	srli	r6,r6,8
    8fec:	e1bfcf15 	stw	r6,-196(fp)
    8ff0:	e0ffc517 	ldw	r3,-236(fp)
    8ff4:	00803ff4 	movhi	r2,255
    8ff8:	10803fc4 	addi	r2,r2,255
    8ffc:	1884703a 	and	r2,r3,r2
    9000:	e0bfd015 	stw	r2,-192(fp)
    9004:	e0ffc617 	ldw	r3,-232(fp)
    9008:	00803ff4 	movhi	r2,255
    900c:	10803fc4 	addi	r2,r2,255
    9010:	1884703a 	and	r2,r3,r2
    9014:	e0bfd115 	stw	r2,-188(fp)
    9018:	e1ffd017 	ldw	r7,-192(fp)
    901c:	3804d63a 	srli	r2,r7,24
    9020:	e0ffd117 	ldw	r3,-188(fp)
    9024:	1806923a 	slli	r3,r3,8
    9028:	e0ffd315 	stw	r3,-180(fp)
    902c:	e13fd317 	ldw	r4,-180(fp)
    9030:	1104b03a 	or	r2,r2,r4
    9034:	e0bfd315 	stw	r2,-180(fp)
    9038:	e1bfd017 	ldw	r6,-192(fp)
    903c:	300c923a 	slli	r6,r6,8
    9040:	e1bfd215 	stw	r6,-184(fp)
    9044:	e1ffce17 	ldw	r7,-200(fp)
    9048:	e0ffd217 	ldw	r3,-184(fp)
    904c:	38c4b03a 	or	r2,r7,r3
    9050:	e0bfc515 	stw	r2,-236(fp)
    9054:	e13fcf17 	ldw	r4,-196(fp)
    9058:	e1bfd317 	ldw	r6,-180(fp)
    905c:	2184b03a 	or	r2,r4,r6
    9060:	e0bfc615 	stw	r2,-232(fp)
    9064:	e0bfc517 	ldw	r2,-236(fp)
    9068:	10bfffec 	andhi	r2,r2,65535
    906c:	e0bfd415 	stw	r2,-176(fp)
    9070:	e0bfc617 	ldw	r2,-232(fp)
    9074:	10bfffec 	andhi	r2,r2,65535
    9078:	e0bfd515 	stw	r2,-172(fp)
    907c:	e1ffd517 	ldw	r7,-172(fp)
    9080:	3804943a 	slli	r2,r7,16
    9084:	e0ffd417 	ldw	r3,-176(fp)
    9088:	1806d43a 	srli	r3,r3,16
    908c:	e0ffd615 	stw	r3,-168(fp)
    9090:	e13fd617 	ldw	r4,-168(fp)
    9094:	1104b03a 	or	r2,r2,r4
    9098:	e0bfd615 	stw	r2,-168(fp)
    909c:	e1bfd517 	ldw	r6,-172(fp)
    90a0:	300cd43a 	srli	r6,r6,16
    90a4:	e1bfd715 	stw	r6,-164(fp)
    90a8:	e0bfc517 	ldw	r2,-236(fp)
    90ac:	10bfffcc 	andi	r2,r2,65535
    90b0:	e0bfd815 	stw	r2,-160(fp)
    90b4:	e0bfc617 	ldw	r2,-232(fp)
    90b8:	10bfffcc 	andi	r2,r2,65535
    90bc:	e0bfd915 	stw	r2,-156(fp)
    90c0:	e1ffd817 	ldw	r7,-160(fp)
    90c4:	3804d43a 	srli	r2,r7,16
    90c8:	e0ffd917 	ldw	r3,-156(fp)
    90cc:	1806943a 	slli	r3,r3,16
    90d0:	e0ffdb15 	stw	r3,-148(fp)
    90d4:	e13fdb17 	ldw	r4,-148(fp)
    90d8:	1104b03a 	or	r2,r2,r4
    90dc:	e0bfdb15 	stw	r2,-148(fp)
    90e0:	e1bfd817 	ldw	r6,-160(fp)
    90e4:	300c943a 	slli	r6,r6,16
    90e8:	e1bfda15 	stw	r6,-152(fp)
    90ec:	e1ffd617 	ldw	r7,-168(fp)
    90f0:	e0bfda17 	ldw	r2,-152(fp)
    90f4:	388eb03a 	or	r7,r7,r2
    90f8:	e1ffdc15 	stw	r7,-144(fp)
    90fc:	e0ffd717 	ldw	r3,-164(fp)
    9100:	e13fdb17 	ldw	r4,-148(fp)
    9104:	1906b03a 	or	r3,r3,r4
    9108:	e0ffdd15 	stw	r3,-140(fp)
    910c:	e0ffc917 	ldw	r3,-220(fp)
    9110:	e0bfc117 	ldw	r2,-252(fp)
    9114:	10800284 	addi	r2,r2,10
    9118:	100490fa 	slli	r2,r2,3
    911c:	1885883a 	add	r2,r3,r2
    9120:	e1bfdc17 	ldw	r6,-144(fp)
    9124:	11800015 	stw	r6,0(r2)
    9128:	e1ffdd17 	ldw	r7,-140(fp)
    912c:	11c00115 	stw	r7,4(r2)
			ADDINC128(context->bitcount, freespace << 3);
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    9130:	e0bfc117 	ldw	r2,-252(fp)
    9134:	10800044 	addi	r2,r2,1
    9138:	e0bfc115 	stw	r2,-252(fp)
    913c:	e0bfc117 	ldw	r2,-252(fp)
    9140:	10800410 	cmplti	r2,r2,16
    9144:	103f841e 	bne	r2,zero,8f58 <__alt_mem_epcs_flash_controller+0xfdffff58>
				REVERSE64(context->buffer[j],context->buffer[j]);
			}
#endif
			trezor_sha512_Transform(context->state, context->buffer, context->state);
    9148:	e13fc917 	ldw	r4,-220(fp)
    914c:	e0bfc917 	ldw	r2,-220(fp)
    9150:	10c01404 	addi	r3,r2,80
    9154:	e0bfc917 	ldw	r2,-220(fp)
    9158:	100d883a 	mov	r6,r2
    915c:	180b883a 	mov	r5,r3
    9160:	0007eb80 	call	7eb8 <trezor_sha512_Transform>
    9164:	0000ec06 	br	9518 <trezor_sha512_Update+0x740>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    9168:	e0bfc917 	ldw	r2,-220(fp)
    916c:	10c01404 	addi	r3,r2,80
    9170:	e0bfc317 	ldw	r2,-244(fp)
    9174:	1885883a 	add	r2,r3,r2
    9178:	e1bfcb17 	ldw	r6,-212(fp)
    917c:	e17fca17 	ldw	r5,-216(fp)
    9180:	1009883a 	mov	r4,r2
    9184:	000a0f40 	call	a0f4 <memcpy>
			ADDINC128(context->bitcount, len << 3);
    9188:	e0bfc917 	ldw	r2,-220(fp)
    918c:	11001017 	ldw	r4,64(r2)
    9190:	11401117 	ldw	r5,68(r2)
    9194:	e0bfcb17 	ldw	r2,-212(fp)
    9198:	100490fa 	slli	r2,r2,3
    919c:	1025883a 	mov	r18,r2
    91a0:	0027883a 	mov	r19,zero
    91a4:	2485883a 	add	r2,r4,r18
    91a8:	110d803a 	cmpltu	r6,r2,r4
    91ac:	2cc7883a 	add	r3,r5,r19
    91b0:	30c9883a 	add	r4,r6,r3
    91b4:	2007883a 	mov	r3,r4
    91b8:	1009883a 	mov	r4,r2
    91bc:	180b883a 	mov	r5,r3
    91c0:	e0bfc917 	ldw	r2,-220(fp)
    91c4:	11001015 	stw	r4,64(r2)
    91c8:	11401115 	stw	r5,68(r2)
    91cc:	e13fc917 	ldw	r4,-220(fp)
    91d0:	20801017 	ldw	r2,64(r4)
    91d4:	20c01117 	ldw	r3,68(r4)
    91d8:	e13fcb17 	ldw	r4,-212(fp)
    91dc:	200890fa 	slli	r4,r4,3
    91e0:	2021883a 	mov	r16,r4
    91e4:	0023883a 	mov	r17,zero
    91e8:	1c400236 	bltu	r3,r17,91f4 <trezor_sha512_Update+0x41c>
    91ec:	88c0101e 	bne	r17,r3,9230 <trezor_sha512_Update+0x458>
    91f0:	14000f2e 	bgeu	r2,r16,9230 <trezor_sha512_Update+0x458>
    91f4:	e0bfc917 	ldw	r2,-220(fp)
    91f8:	11001217 	ldw	r4,72(r2)
    91fc:	11401317 	ldw	r5,76(r2)
    9200:	01800044 	movi	r6,1
    9204:	000f883a 	mov	r7,zero
    9208:	2185883a 	add	r2,r4,r6
    920c:	1111803a 	cmpltu	r8,r2,r4
    9210:	29c7883a 	add	r3,r5,r7
    9214:	40c9883a 	add	r4,r8,r3
    9218:	2007883a 	mov	r3,r4
    921c:	1009883a 	mov	r4,r2
    9220:	180b883a 	mov	r5,r3
    9224:	e0bfc917 	ldw	r2,-220(fp)
    9228:	11001215 	stw	r4,72(r2)
    922c:	11401315 	stw	r5,76(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    9230:	e03fc415 	stw	zero,-240(fp)
    9234:	e0bfc417 	ldw	r2,-240(fp)
    9238:	e0bfc315 	stw	r2,-244(fp)
			return;
    923c:	0000f506 	br	9614 <trezor_sha512_Update+0x83c>
		}
	}
	while (len >= SHA512_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA512_BLOCK_LENGTH);
    9240:	e0bfc917 	ldw	r2,-220(fp)
    9244:	10801404 	addi	r2,r2,80
    9248:	01802004 	movi	r6,128
    924c:	e17fca17 	ldw	r5,-216(fp)
    9250:	1009883a 	mov	r4,r2
    9254:	000a0f40 	call	a0f4 <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    9258:	e03fc215 	stw	zero,-248(fp)
    925c:	00007906 	br	9444 <trezor_sha512_Update+0x66c>
			REVERSE64(context->buffer[j],context->buffer[j]);
    9260:	e0ffc917 	ldw	r3,-220(fp)
    9264:	e0bfc217 	ldw	r2,-248(fp)
    9268:	10800284 	addi	r2,r2,10
    926c:	100490fa 	slli	r2,r2,3
    9270:	1887883a 	add	r3,r3,r2
    9274:	18800017 	ldw	r2,0(r3)
    9278:	e0bfc715 	stw	r2,-228(fp)
    927c:	18800117 	ldw	r2,4(r3)
    9280:	e0bfc815 	stw	r2,-224(fp)
    9284:	e0bfc817 	ldw	r2,-224(fp)
    9288:	e0bff615 	stw	r2,-40(fp)
    928c:	e0ffc717 	ldw	r3,-228(fp)
    9290:	e0fff715 	stw	r3,-36(fp)
    9294:	e13ff617 	ldw	r4,-40(fp)
    9298:	e13fc715 	stw	r4,-228(fp)
    929c:	e1bff717 	ldw	r6,-36(fp)
    92a0:	e1bfc815 	stw	r6,-224(fp)
    92a4:	e0ffc717 	ldw	r3,-228(fp)
    92a8:	00bfc074 	movhi	r2,65281
    92ac:	10bfc004 	addi	r2,r2,-256
    92b0:	1884703a 	and	r2,r3,r2
    92b4:	e0bfde15 	stw	r2,-136(fp)
    92b8:	e0ffc817 	ldw	r3,-224(fp)
    92bc:	00bfc074 	movhi	r2,65281
    92c0:	10bfc004 	addi	r2,r2,-256
    92c4:	1884703a 	and	r2,r3,r2
    92c8:	e0bfdf15 	stw	r2,-132(fp)
    92cc:	e1ffdf17 	ldw	r7,-132(fp)
    92d0:	3804963a 	slli	r2,r7,24
    92d4:	e0ffde17 	ldw	r3,-136(fp)
    92d8:	1806d23a 	srli	r3,r3,8
    92dc:	e0ffe015 	stw	r3,-128(fp)
    92e0:	e13fe017 	ldw	r4,-128(fp)
    92e4:	1104b03a 	or	r2,r2,r4
    92e8:	e0bfe015 	stw	r2,-128(fp)
    92ec:	e1bfdf17 	ldw	r6,-132(fp)
    92f0:	300cd23a 	srli	r6,r6,8
    92f4:	e1bfe115 	stw	r6,-124(fp)
    92f8:	e0ffc717 	ldw	r3,-228(fp)
    92fc:	00803ff4 	movhi	r2,255
    9300:	10803fc4 	addi	r2,r2,255
    9304:	1884703a 	and	r2,r3,r2
    9308:	e0bfe215 	stw	r2,-120(fp)
    930c:	e0ffc817 	ldw	r3,-224(fp)
    9310:	00803ff4 	movhi	r2,255
    9314:	10803fc4 	addi	r2,r2,255
    9318:	1884703a 	and	r2,r3,r2
    931c:	e0bfe315 	stw	r2,-116(fp)
    9320:	e1ffe217 	ldw	r7,-120(fp)
    9324:	3804d63a 	srli	r2,r7,24
    9328:	e0ffe317 	ldw	r3,-116(fp)
    932c:	1806923a 	slli	r3,r3,8
    9330:	e0ffe515 	stw	r3,-108(fp)
    9334:	e13fe517 	ldw	r4,-108(fp)
    9338:	1104b03a 	or	r2,r2,r4
    933c:	e0bfe515 	stw	r2,-108(fp)
    9340:	e1bfe217 	ldw	r6,-120(fp)
    9344:	300c923a 	slli	r6,r6,8
    9348:	e1bfe415 	stw	r6,-112(fp)
    934c:	e1ffe017 	ldw	r7,-128(fp)
    9350:	e0ffe417 	ldw	r3,-112(fp)
    9354:	38c4b03a 	or	r2,r7,r3
    9358:	e0bfc715 	stw	r2,-228(fp)
    935c:	e13fe117 	ldw	r4,-124(fp)
    9360:	e1bfe517 	ldw	r6,-108(fp)
    9364:	2184b03a 	or	r2,r4,r6
    9368:	e0bfc815 	stw	r2,-224(fp)
    936c:	e0bfc717 	ldw	r2,-228(fp)
    9370:	10bfffec 	andhi	r2,r2,65535
    9374:	e0bfe615 	stw	r2,-104(fp)
    9378:	e0bfc817 	ldw	r2,-224(fp)
    937c:	10bfffec 	andhi	r2,r2,65535
    9380:	e0bfe715 	stw	r2,-100(fp)
    9384:	e1ffe717 	ldw	r7,-100(fp)
    9388:	3804943a 	slli	r2,r7,16
    938c:	e0ffe617 	ldw	r3,-104(fp)
    9390:	1806d43a 	srli	r3,r3,16
    9394:	e0ffe815 	stw	r3,-96(fp)
    9398:	e13fe817 	ldw	r4,-96(fp)
    939c:	1104b03a 	or	r2,r2,r4
    93a0:	e0bfe815 	stw	r2,-96(fp)
    93a4:	e1bfe717 	ldw	r6,-100(fp)
    93a8:	300cd43a 	srli	r6,r6,16
    93ac:	e1bfe915 	stw	r6,-92(fp)
    93b0:	e0bfc717 	ldw	r2,-228(fp)
    93b4:	10bfffcc 	andi	r2,r2,65535
    93b8:	e0bfea15 	stw	r2,-88(fp)
    93bc:	e0bfc817 	ldw	r2,-224(fp)
    93c0:	10bfffcc 	andi	r2,r2,65535
    93c4:	e0bfeb15 	stw	r2,-84(fp)
    93c8:	e1ffea17 	ldw	r7,-88(fp)
    93cc:	3804d43a 	srli	r2,r7,16
    93d0:	e0ffeb17 	ldw	r3,-84(fp)
    93d4:	1806943a 	slli	r3,r3,16
    93d8:	e0ffed15 	stw	r3,-76(fp)
    93dc:	e13fed17 	ldw	r4,-76(fp)
    93e0:	1104b03a 	or	r2,r2,r4
    93e4:	e0bfed15 	stw	r2,-76(fp)
    93e8:	e1bfea17 	ldw	r6,-88(fp)
    93ec:	300c943a 	slli	r6,r6,16
    93f0:	e1bfec15 	stw	r6,-80(fp)
    93f4:	e1ffe817 	ldw	r7,-96(fp)
    93f8:	e0bfec17 	ldw	r2,-80(fp)
    93fc:	388eb03a 	or	r7,r7,r2
    9400:	e1ffee15 	stw	r7,-72(fp)
    9404:	e0ffe917 	ldw	r3,-92(fp)
    9408:	e13fed17 	ldw	r4,-76(fp)
    940c:	1906b03a 	or	r3,r3,r4
    9410:	e0ffef15 	stw	r3,-68(fp)
    9414:	e0ffc917 	ldw	r3,-220(fp)
    9418:	e0bfc217 	ldw	r2,-248(fp)
    941c:	10800284 	addi	r2,r2,10
    9420:	100490fa 	slli	r2,r2,3
    9424:	1885883a 	add	r2,r3,r2
    9428:	e1bfee17 	ldw	r6,-72(fp)
    942c:	11800015 	stw	r6,0(r2)
    9430:	e1ffef17 	ldw	r7,-68(fp)
    9434:	11c00115 	stw	r7,4(r2)
	while (len >= SHA512_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA512_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    9438:	e0bfc217 	ldw	r2,-248(fp)
    943c:	10800044 	addi	r2,r2,1
    9440:	e0bfc215 	stw	r2,-248(fp)
    9444:	e0bfc217 	ldw	r2,-248(fp)
    9448:	10800410 	cmplti	r2,r2,16
    944c:	103f841e 	bne	r2,zero,9260 <__alt_mem_epcs_flash_controller+0xfe000260>
			REVERSE64(context->buffer[j],context->buffer[j]);
		}
#endif
		trezor_sha512_Transform(context->state, context->buffer, context->state);
    9450:	e13fc917 	ldw	r4,-220(fp)
    9454:	e0bfc917 	ldw	r2,-220(fp)
    9458:	10c01404 	addi	r3,r2,80
    945c:	e0bfc917 	ldw	r2,-220(fp)
    9460:	100d883a 	mov	r6,r2
    9464:	180b883a 	mov	r5,r3
    9468:	0007eb80 	call	7eb8 <trezor_sha512_Transform>
		ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
    946c:	e0bfc917 	ldw	r2,-220(fp)
    9470:	11c01017 	ldw	r7,64(r2)
    9474:	12001117 	ldw	r8,68(r2)
    9478:	01010004 	movi	r4,1024
    947c:	000b883a 	mov	r5,zero
    9480:	3905883a 	add	r2,r7,r4
    9484:	11cd803a 	cmpltu	r6,r2,r7
    9488:	4147883a 	add	r3,r8,r5
    948c:	30c9883a 	add	r4,r6,r3
    9490:	2007883a 	mov	r3,r4
    9494:	1009883a 	mov	r4,r2
    9498:	180b883a 	mov	r5,r3
    949c:	e0bfc917 	ldw	r2,-220(fp)
    94a0:	11001015 	stw	r4,64(r2)
    94a4:	11401115 	stw	r5,68(r2)
    94a8:	e13fc917 	ldw	r4,-220(fp)
    94ac:	20801017 	ldw	r2,64(r4)
    94b0:	20c01117 	ldw	r3,68(r4)
    94b4:	1800121e 	bne	r3,zero,9500 <trezor_sha512_Update+0x728>
    94b8:	1800021e 	bne	r3,zero,94c4 <trezor_sha512_Update+0x6ec>
    94bc:	10810028 	cmpgeui	r2,r2,1024
    94c0:	10000f1e 	bne	r2,zero,9500 <trezor_sha512_Update+0x728>
    94c4:	e0bfc917 	ldw	r2,-220(fp)
    94c8:	11c01217 	ldw	r7,72(r2)
    94cc:	12001317 	ldw	r8,76(r2)
    94d0:	01000044 	movi	r4,1
    94d4:	000b883a 	mov	r5,zero
    94d8:	3905883a 	add	r2,r7,r4
    94dc:	11cd803a 	cmpltu	r6,r2,r7
    94e0:	4147883a 	add	r3,r8,r5
    94e4:	30c9883a 	add	r4,r6,r3
    94e8:	2007883a 	mov	r3,r4
    94ec:	1009883a 	mov	r4,r2
    94f0:	180b883a 	mov	r5,r3
    94f4:	e0bfc917 	ldw	r2,-220(fp)
    94f8:	11001215 	stw	r4,72(r2)
    94fc:	11401315 	stw	r5,76(r2)
		len -= SHA512_BLOCK_LENGTH;
    9500:	e0bfcb17 	ldw	r2,-212(fp)
    9504:	10bfe004 	addi	r2,r2,-128
    9508:	e0bfcb15 	stw	r2,-212(fp)
		data += SHA512_BLOCK_LENGTH;
    950c:	e0bfca17 	ldw	r2,-216(fp)
    9510:	10802004 	addi	r2,r2,128
    9514:	e0bfca15 	stw	r2,-216(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA512_BLOCK_LENGTH) {
    9518:	e0bfcb17 	ldw	r2,-212(fp)
    951c:	10802028 	cmpgeui	r2,r2,128
    9520:	103f471e 	bne	r2,zero,9240 <__alt_mem_epcs_flash_controller+0xfe000240>
		trezor_sha512_Transform(context->state, context->buffer, context->state);
		ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
		len -= SHA512_BLOCK_LENGTH;
		data += SHA512_BLOCK_LENGTH;
	}
	if (len > 0) {
    9524:	e0bfcb17 	ldw	r2,-212(fp)
    9528:	10003526 	beq	r2,zero,9600 <trezor_sha512_Update+0x828>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    952c:	e0bfc917 	ldw	r2,-220(fp)
    9530:	10801404 	addi	r2,r2,80
    9534:	e1bfcb17 	ldw	r6,-212(fp)
    9538:	e17fca17 	ldw	r5,-216(fp)
    953c:	1009883a 	mov	r4,r2
    9540:	000a0f40 	call	a0f4 <memcpy>
		ADDINC128(context->bitcount, len << 3);
    9544:	e0bfc917 	ldw	r2,-220(fp)
    9548:	11001017 	ldw	r4,64(r2)
    954c:	11401117 	ldw	r5,68(r2)
    9550:	e0bfcb17 	ldw	r2,-212(fp)
    9554:	100490fa 	slli	r2,r2,3
    9558:	e0bff015 	stw	r2,-64(fp)
    955c:	e03ff115 	stw	zero,-60(fp)
    9560:	e1bff017 	ldw	r6,-64(fp)
    9564:	2185883a 	add	r2,r4,r6
    9568:	110d803a 	cmpltu	r6,r2,r4
    956c:	e1fff117 	ldw	r7,-60(fp)
    9570:	29c7883a 	add	r3,r5,r7
    9574:	30c9883a 	add	r4,r6,r3
    9578:	2007883a 	mov	r3,r4
    957c:	1009883a 	mov	r4,r2
    9580:	180b883a 	mov	r5,r3
    9584:	e0bfc917 	ldw	r2,-220(fp)
    9588:	11001015 	stw	r4,64(r2)
    958c:	11401115 	stw	r5,68(r2)
    9590:	e13fc917 	ldw	r4,-220(fp)
    9594:	20801017 	ldw	r2,64(r4)
    9598:	20c01117 	ldw	r3,68(r4)
    959c:	e13fcb17 	ldw	r4,-212(fp)
    95a0:	200890fa 	slli	r4,r4,3
    95a4:	e13ff215 	stw	r4,-56(fp)
    95a8:	e03ff315 	stw	zero,-52(fp)
    95ac:	e13ff317 	ldw	r4,-52(fp)
    95b0:	19000436 	bltu	r3,r4,95c4 <trezor_sha512_Update+0x7ec>
    95b4:	e1bff317 	ldw	r6,-52(fp)
    95b8:	30c0111e 	bne	r6,r3,9600 <trezor_sha512_Update+0x828>
    95bc:	e1fff217 	ldw	r7,-56(fp)
    95c0:	11c00f2e 	bgeu	r2,r7,9600 <trezor_sha512_Update+0x828>
    95c4:	e0bfc917 	ldw	r2,-220(fp)
    95c8:	11001217 	ldw	r4,72(r2)
    95cc:	11401317 	ldw	r5,76(r2)
    95d0:	01800044 	movi	r6,1
    95d4:	000f883a 	mov	r7,zero
    95d8:	2185883a 	add	r2,r4,r6
    95dc:	1111803a 	cmpltu	r8,r2,r4
    95e0:	29c7883a 	add	r3,r5,r7
    95e4:	40c9883a 	add	r4,r8,r3
    95e8:	2007883a 	mov	r3,r4
    95ec:	1009883a 	mov	r4,r2
    95f0:	180b883a 	mov	r5,r3
    95f4:	e0bfc917 	ldw	r2,-220(fp)
    95f8:	11001215 	stw	r4,72(r2)
    95fc:	11401315 	stw	r5,76(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    9600:	e03fc415 	stw	zero,-240(fp)
    9604:	e0bfc417 	ldw	r2,-240(fp)
    9608:	e0bfc315 	stw	r2,-244(fp)
    960c:	00000106 	br	9614 <trezor_sha512_Update+0x83c>
void trezor_sha512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    9610:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		ADDINC128(context->bitcount, len << 3);
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    9614:	e6fff804 	addi	sp,fp,-32
    9618:	dfc00917 	ldw	ra,36(sp)
    961c:	df000817 	ldw	fp,32(sp)
    9620:	ddc00717 	ldw	r23,28(sp)
    9624:	dd800617 	ldw	r22,24(sp)
    9628:	dd400517 	ldw	r21,20(sp)
    962c:	dd000417 	ldw	r20,16(sp)
    9630:	dcc00317 	ldw	r19,12(sp)
    9634:	dc800217 	ldw	r18,8(sp)
    9638:	dc400117 	ldw	r17,4(sp)
    963c:	dc000017 	ldw	r16,0(sp)
    9640:	dec00a04 	addi	sp,sp,40
    9644:	f800283a 	ret

00009648 <trezor_sha512_Last>:

static void trezor_sha512_Last(SHA512_CTX* context) {
    9648:	deffce04 	addi	sp,sp,-200
    964c:	dfc03115 	stw	ra,196(sp)
    9650:	df003015 	stw	fp,192(sp)
    9654:	ddc02f15 	stw	r23,188(sp)
    9658:	dd802e15 	stw	r22,184(sp)
    965c:	dd402d15 	stw	r21,180(sp)
    9660:	dd002c15 	stw	r20,176(sp)
    9664:	dcc02b15 	stw	r19,172(sp)
    9668:	dc802a15 	stw	r18,168(sp)
    966c:	dc402915 	stw	r17,164(sp)
    9670:	dc002815 	stw	r16,160(sp)
    9674:	df003004 	addi	fp,sp,192
    9678:	e13fd715 	stw	r4,-164(fp)
	unsigned int	usedspace;

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    967c:	e13fd717 	ldw	r4,-164(fp)
    9680:	20801017 	ldw	r2,64(r4)
    9684:	20c01117 	ldw	r3,68(r4)
    9688:	1808977a 	slli	r4,r3,29
    968c:	100ad0fa 	srli	r5,r2,3
    9690:	214ab03a 	or	r5,r4,r5
    9694:	180cd0fa 	srli	r6,r3,3
    9698:	2805883a 	mov	r2,r5
    969c:	10801fcc 	andi	r2,r2,127
    96a0:	e0bfd015 	stw	r2,-192(fp)
	/* Begin padding with a 1 bit: */
	((uint8_t*)context->buffer)[usedspace++] = 0x80;
    96a4:	e0bfd717 	ldw	r2,-164(fp)
    96a8:	11001404 	addi	r4,r2,80
    96ac:	e0ffd017 	ldw	r3,-192(fp)
    96b0:	18800044 	addi	r2,r3,1
    96b4:	e0bfd015 	stw	r2,-192(fp)
    96b8:	20c7883a 	add	r3,r4,r3
    96bc:	00bfe004 	movi	r2,-128
    96c0:	18800005 	stb	r2,0(r3)
	
	if (usedspace > SHA512_SHORT_BLOCK_LENGTH) {
    96c4:	e0bfd017 	ldw	r2,-192(fp)
    96c8:	10801c70 	cmpltui	r2,r2,113
    96cc:	1000901e 	bne	r2,zero,9910 <trezor_sha512_Last+0x2c8>
		memzero(((uint8_t*)context->buffer) + usedspace, SHA512_BLOCK_LENGTH - usedspace);
    96d0:	e0bfd717 	ldw	r2,-164(fp)
    96d4:	10c01404 	addi	r3,r2,80
    96d8:	e0bfd017 	ldw	r2,-192(fp)
    96dc:	1889883a 	add	r4,r3,r2
    96e0:	00c02004 	movi	r3,128
    96e4:	e0bfd017 	ldw	r2,-192(fp)
    96e8:	1885c83a 	sub	r2,r3,r2
    96ec:	100b883a 	mov	r5,r2
    96f0:	00018040 	call	1804 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    96f4:	e03fd115 	stw	zero,-188(fp)
    96f8:	00007906 	br	98e0 <trezor_sha512_Last+0x298>
			REVERSE64(context->buffer[j],context->buffer[j]);
    96fc:	e0ffd717 	ldw	r3,-164(fp)
    9700:	e0bfd117 	ldw	r2,-188(fp)
    9704:	10800284 	addi	r2,r2,10
    9708:	100490fa 	slli	r2,r2,3
    970c:	1887883a 	add	r3,r3,r2
    9710:	18800017 	ldw	r2,0(r3)
    9714:	e0bfd315 	stw	r2,-180(fp)
    9718:	18800117 	ldw	r2,4(r3)
    971c:	e0bfd415 	stw	r2,-176(fp)
    9720:	e0bfd417 	ldw	r2,-176(fp)
    9724:	e0bff415 	stw	r2,-48(fp)
    9728:	e0ffd317 	ldw	r3,-180(fp)
    972c:	e0fff515 	stw	r3,-44(fp)
    9730:	e13ff417 	ldw	r4,-48(fp)
    9734:	e13fd315 	stw	r4,-180(fp)
    9738:	e0bff517 	ldw	r2,-44(fp)
    973c:	e0bfd415 	stw	r2,-176(fp)
    9740:	e0ffd317 	ldw	r3,-180(fp)
    9744:	00bfc074 	movhi	r2,65281
    9748:	10bfc004 	addi	r2,r2,-256
    974c:	1884703a 	and	r2,r3,r2
    9750:	e0bfd815 	stw	r2,-160(fp)
    9754:	e0ffd417 	ldw	r3,-176(fp)
    9758:	00bfc074 	movhi	r2,65281
    975c:	10bfc004 	addi	r2,r2,-256
    9760:	1884703a 	and	r2,r3,r2
    9764:	e0bfd915 	stw	r2,-156(fp)
    9768:	e0ffd917 	ldw	r3,-156(fp)
    976c:	1804963a 	slli	r2,r3,24
    9770:	e13fd817 	ldw	r4,-160(fp)
    9774:	2008d23a 	srli	r4,r4,8
    9778:	e13fda15 	stw	r4,-152(fp)
    977c:	e0ffda17 	ldw	r3,-152(fp)
    9780:	10c4b03a 	or	r2,r2,r3
    9784:	e0bfda15 	stw	r2,-152(fp)
    9788:	e13fd917 	ldw	r4,-156(fp)
    978c:	2008d23a 	srli	r4,r4,8
    9790:	e13fdb15 	stw	r4,-148(fp)
    9794:	e0ffd317 	ldw	r3,-180(fp)
    9798:	00803ff4 	movhi	r2,255
    979c:	10803fc4 	addi	r2,r2,255
    97a0:	1884703a 	and	r2,r3,r2
    97a4:	e0bfdc15 	stw	r2,-144(fp)
    97a8:	e0ffd417 	ldw	r3,-176(fp)
    97ac:	00803ff4 	movhi	r2,255
    97b0:	10803fc4 	addi	r2,r2,255
    97b4:	1884703a 	and	r2,r3,r2
    97b8:	e0bfdd15 	stw	r2,-140(fp)
    97bc:	e0ffdc17 	ldw	r3,-144(fp)
    97c0:	1804d63a 	srli	r2,r3,24
    97c4:	e13fdd17 	ldw	r4,-140(fp)
    97c8:	2008923a 	slli	r4,r4,8
    97cc:	e13fdf15 	stw	r4,-132(fp)
    97d0:	e0ffdf17 	ldw	r3,-132(fp)
    97d4:	10c4b03a 	or	r2,r2,r3
    97d8:	e0bfdf15 	stw	r2,-132(fp)
    97dc:	e13fdc17 	ldw	r4,-144(fp)
    97e0:	2008923a 	slli	r4,r4,8
    97e4:	e13fde15 	stw	r4,-136(fp)
    97e8:	e0ffda17 	ldw	r3,-152(fp)
    97ec:	e13fde17 	ldw	r4,-136(fp)
    97f0:	1904b03a 	or	r2,r3,r4
    97f4:	e0bfd315 	stw	r2,-180(fp)
    97f8:	e0ffdb17 	ldw	r3,-148(fp)
    97fc:	e13fdf17 	ldw	r4,-132(fp)
    9800:	1904b03a 	or	r2,r3,r4
    9804:	e0bfd415 	stw	r2,-176(fp)
    9808:	e0bfd317 	ldw	r2,-180(fp)
    980c:	10bfffec 	andhi	r2,r2,65535
    9810:	e0bfe015 	stw	r2,-128(fp)
    9814:	e0bfd417 	ldw	r2,-176(fp)
    9818:	10bfffec 	andhi	r2,r2,65535
    981c:	e0bfe115 	stw	r2,-124(fp)
    9820:	e0ffe117 	ldw	r3,-124(fp)
    9824:	1804943a 	slli	r2,r3,16
    9828:	e13fe017 	ldw	r4,-128(fp)
    982c:	2008d43a 	srli	r4,r4,16
    9830:	e13fe215 	stw	r4,-120(fp)
    9834:	e0ffe217 	ldw	r3,-120(fp)
    9838:	10c4b03a 	or	r2,r2,r3
    983c:	e0bfe215 	stw	r2,-120(fp)
    9840:	e13fe117 	ldw	r4,-124(fp)
    9844:	2008d43a 	srli	r4,r4,16
    9848:	e13fe315 	stw	r4,-116(fp)
    984c:	e0bfd317 	ldw	r2,-180(fp)
    9850:	10bfffcc 	andi	r2,r2,65535
    9854:	e0bfe415 	stw	r2,-112(fp)
    9858:	e0bfd417 	ldw	r2,-176(fp)
    985c:	10bfffcc 	andi	r2,r2,65535
    9860:	e0bfe515 	stw	r2,-108(fp)
    9864:	e0ffe417 	ldw	r3,-112(fp)
    9868:	1804d43a 	srli	r2,r3,16
    986c:	e13fe517 	ldw	r4,-108(fp)
    9870:	2008943a 	slli	r4,r4,16
    9874:	e13fe715 	stw	r4,-100(fp)
    9878:	e0ffe717 	ldw	r3,-100(fp)
    987c:	10c4b03a 	or	r2,r2,r3
    9880:	e0bfe715 	stw	r2,-100(fp)
    9884:	e13fe417 	ldw	r4,-112(fp)
    9888:	2008943a 	slli	r4,r4,16
    988c:	e13fe615 	stw	r4,-104(fp)
    9890:	e0bfe217 	ldw	r2,-120(fp)
    9894:	e0ffe617 	ldw	r3,-104(fp)
    9898:	10c4b03a 	or	r2,r2,r3
    989c:	e0bfe815 	stw	r2,-96(fp)
    98a0:	e13fe317 	ldw	r4,-116(fp)
    98a4:	e0bfe717 	ldw	r2,-100(fp)
    98a8:	2088b03a 	or	r4,r4,r2
    98ac:	e13fe915 	stw	r4,-92(fp)
    98b0:	e0ffd717 	ldw	r3,-164(fp)
    98b4:	e0bfd117 	ldw	r2,-188(fp)
    98b8:	10800284 	addi	r2,r2,10
    98bc:	100490fa 	slli	r2,r2,3
    98c0:	1885883a 	add	r2,r3,r2
    98c4:	e0ffe817 	ldw	r3,-96(fp)
    98c8:	10c00015 	stw	r3,0(r2)
    98cc:	e13fe917 	ldw	r4,-92(fp)
    98d0:	11000115 	stw	r4,4(r2)
	if (usedspace > SHA512_SHORT_BLOCK_LENGTH) {
		memzero(((uint8_t*)context->buffer) + usedspace, SHA512_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    98d4:	e0bfd117 	ldw	r2,-188(fp)
    98d8:	10800044 	addi	r2,r2,1
    98dc:	e0bfd115 	stw	r2,-188(fp)
    98e0:	e0bfd117 	ldw	r2,-188(fp)
    98e4:	10800410 	cmplti	r2,r2,16
    98e8:	103f841e 	bne	r2,zero,96fc <__alt_mem_epcs_flash_controller+0xfe0006fc>
			REVERSE64(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Do second-to-last transform: */
		trezor_sha512_Transform(context->state, context->buffer, context->state);
    98ec:	e0ffd717 	ldw	r3,-164(fp)
    98f0:	e0bfd717 	ldw	r2,-164(fp)
    98f4:	10801404 	addi	r2,r2,80
    98f8:	e13fd717 	ldw	r4,-164(fp)
    98fc:	200d883a 	mov	r6,r4
    9900:	100b883a 	mov	r5,r2
    9904:	1809883a 	mov	r4,r3
    9908:	0007eb80 	call	7eb8 <trezor_sha512_Transform>

		/* And prepare the last transform: */
		usedspace = 0;
    990c:	e03fd015 	stw	zero,-192(fp)
	}
	/* Set-up for the last transform: */
	memzero(((uint8_t*)context->buffer) + usedspace, SHA512_SHORT_BLOCK_LENGTH - usedspace);
    9910:	e0bfd717 	ldw	r2,-164(fp)
    9914:	10c01404 	addi	r3,r2,80
    9918:	e0bfd017 	ldw	r2,-192(fp)
    991c:	1889883a 	add	r4,r3,r2
    9920:	00c01c04 	movi	r3,112
    9924:	e0bfd017 	ldw	r2,-192(fp)
    9928:	1885c83a 	sub	r2,r3,r2
    992c:	100b883a 	mov	r5,r2
    9930:	00018040 	call	1804 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert TO host byte order */
	for (int j = 0; j < 14; j++) {
    9934:	e03fd215 	stw	zero,-184(fp)
    9938:	00006106 	br	9ac0 <trezor_sha512_Last+0x478>
		REVERSE64(context->buffer[j],context->buffer[j]);
    993c:	e0ffd717 	ldw	r3,-164(fp)
    9940:	e0bfd217 	ldw	r2,-184(fp)
    9944:	10800284 	addi	r2,r2,10
    9948:	100490fa 	slli	r2,r2,3
    994c:	1885883a 	add	r2,r3,r2
    9950:	10c00017 	ldw	r3,0(r2)
    9954:	e0ffd515 	stw	r3,-172(fp)
    9958:	10800117 	ldw	r2,4(r2)
    995c:	e0bfd615 	stw	r2,-168(fp)
    9960:	e0bfd617 	ldw	r2,-168(fp)
    9964:	e0bff615 	stw	r2,-40(fp)
    9968:	e0ffd517 	ldw	r3,-172(fp)
    996c:	e0fff715 	stw	r3,-36(fp)
    9970:	e13ff617 	ldw	r4,-40(fp)
    9974:	e13fd515 	stw	r4,-172(fp)
    9978:	e0bff717 	ldw	r2,-36(fp)
    997c:	e0bfd615 	stw	r2,-168(fp)
    9980:	e0ffd517 	ldw	r3,-172(fp)
    9984:	00bfc074 	movhi	r2,65281
    9988:	10bfc004 	addi	r2,r2,-256
    998c:	1884703a 	and	r2,r3,r2
    9990:	e0bfea15 	stw	r2,-88(fp)
    9994:	e0ffd617 	ldw	r3,-168(fp)
    9998:	00bfc074 	movhi	r2,65281
    999c:	10bfc004 	addi	r2,r2,-256
    99a0:	1884703a 	and	r2,r3,r2
    99a4:	e0bfeb15 	stw	r2,-84(fp)
    99a8:	e0ffeb17 	ldw	r3,-84(fp)
    99ac:	1804963a 	slli	r2,r3,24
    99b0:	e13fea17 	ldw	r4,-88(fp)
    99b4:	2020d23a 	srli	r16,r4,8
    99b8:	1420b03a 	or	r16,r2,r16
    99bc:	e0bfeb17 	ldw	r2,-84(fp)
    99c0:	1022d23a 	srli	r17,r2,8
    99c4:	e0ffd517 	ldw	r3,-172(fp)
    99c8:	00803ff4 	movhi	r2,255
    99cc:	10803fc4 	addi	r2,r2,255
    99d0:	1884703a 	and	r2,r3,r2
    99d4:	e0bfec15 	stw	r2,-80(fp)
    99d8:	e0ffd617 	ldw	r3,-168(fp)
    99dc:	00803ff4 	movhi	r2,255
    99e0:	10803fc4 	addi	r2,r2,255
    99e4:	1884703a 	and	r2,r3,r2
    99e8:	e0bfed15 	stw	r2,-76(fp)
    99ec:	e0ffec17 	ldw	r3,-80(fp)
    99f0:	1804d63a 	srli	r2,r3,24
    99f4:	e13fed17 	ldw	r4,-76(fp)
    99f8:	2026923a 	slli	r19,r4,8
    99fc:	14e6b03a 	or	r19,r2,r19
    9a00:	e0bfec17 	ldw	r2,-80(fp)
    9a04:	1024923a 	slli	r18,r2,8
    9a08:	8484b03a 	or	r2,r16,r18
    9a0c:	e0bfd515 	stw	r2,-172(fp)
    9a10:	8cc4b03a 	or	r2,r17,r19
    9a14:	e0bfd615 	stw	r2,-168(fp)
    9a18:	e0bfd517 	ldw	r2,-172(fp)
    9a1c:	10bfffec 	andhi	r2,r2,65535
    9a20:	e0bfee15 	stw	r2,-72(fp)
    9a24:	e0bfd617 	ldw	r2,-168(fp)
    9a28:	10bfffec 	andhi	r2,r2,65535
    9a2c:	e0bfef15 	stw	r2,-68(fp)
    9a30:	e0ffef17 	ldw	r3,-68(fp)
    9a34:	1804943a 	slli	r2,r3,16
    9a38:	e13fee17 	ldw	r4,-72(fp)
    9a3c:	2028d43a 	srli	r20,r4,16
    9a40:	1528b03a 	or	r20,r2,r20
    9a44:	e0bfef17 	ldw	r2,-68(fp)
    9a48:	102ad43a 	srli	r21,r2,16
    9a4c:	e0bfd517 	ldw	r2,-172(fp)
    9a50:	10bfffcc 	andi	r2,r2,65535
    9a54:	e0bff015 	stw	r2,-64(fp)
    9a58:	e0bfd617 	ldw	r2,-168(fp)
    9a5c:	10bfffcc 	andi	r2,r2,65535
    9a60:	e0bff115 	stw	r2,-60(fp)
    9a64:	e0fff017 	ldw	r3,-64(fp)
    9a68:	1804d43a 	srli	r2,r3,16
    9a6c:	e13ff117 	ldw	r4,-60(fp)
    9a70:	202e943a 	slli	r23,r4,16
    9a74:	15eeb03a 	or	r23,r2,r23
    9a78:	e0bff017 	ldw	r2,-64(fp)
    9a7c:	102c943a 	slli	r22,r2,16
    9a80:	a586b03a 	or	r3,r20,r22
    9a84:	e0fff215 	stw	r3,-56(fp)
    9a88:	adc8b03a 	or	r4,r21,r23
    9a8c:	e13ff315 	stw	r4,-52(fp)
    9a90:	e0ffd717 	ldw	r3,-164(fp)
    9a94:	e0bfd217 	ldw	r2,-184(fp)
    9a98:	10800284 	addi	r2,r2,10
    9a9c:	100490fa 	slli	r2,r2,3
    9aa0:	1885883a 	add	r2,r3,r2
    9aa4:	e0fff217 	ldw	r3,-56(fp)
    9aa8:	10c00015 	stw	r3,0(r2)
    9aac:	e13ff317 	ldw	r4,-52(fp)
    9ab0:	11000115 	stw	r4,4(r2)
	/* Set-up for the last transform: */
	memzero(((uint8_t*)context->buffer) + usedspace, SHA512_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert TO host byte order */
	for (int j = 0; j < 14; j++) {
    9ab4:	e0bfd217 	ldw	r2,-184(fp)
    9ab8:	10800044 	addi	r2,r2,1
    9abc:	e0bfd215 	stw	r2,-184(fp)
    9ac0:	e0bfd217 	ldw	r2,-184(fp)
    9ac4:	10800390 	cmplti	r2,r2,14
    9ac8:	103f9c1e 	bne	r2,zero,993c <__alt_mem_epcs_flash_controller+0xfe00093c>
		REVERSE64(context->buffer[j],context->buffer[j]);
	}
#endif
	/* Store the length of input data (in bits): */
	context->buffer[14] = context->bitcount[1];
    9acc:	e13fd717 	ldw	r4,-164(fp)
    9ad0:	20801217 	ldw	r2,72(r4)
    9ad4:	20c01317 	ldw	r3,76(r4)
    9ad8:	e13fd717 	ldw	r4,-164(fp)
    9adc:	20803015 	stw	r2,192(r4)
    9ae0:	20c03115 	stw	r3,196(r4)
	context->buffer[15] = context->bitcount[0];
    9ae4:	e13fd717 	ldw	r4,-164(fp)
    9ae8:	20801017 	ldw	r2,64(r4)
    9aec:	20c01117 	ldw	r3,68(r4)
    9af0:	e13fd717 	ldw	r4,-164(fp)
    9af4:	20803215 	stw	r2,200(r4)
    9af8:	20c03315 	stw	r3,204(r4)

	/* Final transform: */
	trezor_sha512_Transform(context->state, context->buffer, context->state);
    9afc:	e0ffd717 	ldw	r3,-164(fp)
    9b00:	e0bfd717 	ldw	r2,-164(fp)
    9b04:	10801404 	addi	r2,r2,80
    9b08:	e13fd717 	ldw	r4,-164(fp)
    9b0c:	200d883a 	mov	r6,r4
    9b10:	100b883a 	mov	r5,r2
    9b14:	1809883a 	mov	r4,r3
    9b18:	0007eb80 	call	7eb8 <trezor_sha512_Transform>
}
    9b1c:	0001883a 	nop
    9b20:	e6fff804 	addi	sp,fp,-32
    9b24:	dfc00917 	ldw	ra,36(sp)
    9b28:	df000817 	ldw	fp,32(sp)
    9b2c:	ddc00717 	ldw	r23,28(sp)
    9b30:	dd800617 	ldw	r22,24(sp)
    9b34:	dd400517 	ldw	r21,20(sp)
    9b38:	dd000417 	ldw	r20,16(sp)
    9b3c:	dcc00317 	ldw	r19,12(sp)
    9b40:	dc800217 	ldw	r18,8(sp)
    9b44:	dc400117 	ldw	r17,4(sp)
    9b48:	dc000017 	ldw	r16,0(sp)
    9b4c:	dec00a04 	addi	sp,sp,40
    9b50:	f800283a 	ret

00009b54 <trezor_sha512_Final>:

void trezor_sha512_Final(SHA512_CTX* context, sha2_byte digest[]) {
    9b54:	deffe504 	addi	sp,sp,-108
    9b58:	dfc01a15 	stw	ra,104(sp)
    9b5c:	df001915 	stw	fp,100(sp)
    9b60:	ddc01815 	stw	r23,96(sp)
    9b64:	dd801715 	stw	r22,92(sp)
    9b68:	dd401615 	stw	r21,88(sp)
    9b6c:	dd001515 	stw	r20,84(sp)
    9b70:	dcc01415 	stw	r19,80(sp)
    9b74:	dc801315 	stw	r18,76(sp)
    9b78:	dc401215 	stw	r17,72(sp)
    9b7c:	dc001115 	stw	r16,68(sp)
    9b80:	df001904 	addi	fp,sp,100
    9b84:	e13fea15 	stw	r4,-88(fp)
    9b88:	e17feb15 	stw	r5,-84(fp)
	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    9b8c:	e0bfeb17 	ldw	r2,-84(fp)
    9b90:	10006b26 	beq	r2,zero,9d40 <trezor_sha512_Final+0x1ec>
		trezor_sha512_Last(context);
    9b94:	e13fea17 	ldw	r4,-88(fp)
    9b98:	00096480 	call	9648 <trezor_sha512_Last>

		/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    9b9c:	e03fe715 	stw	zero,-100(fp)
    9ba0:	00005f06 	br	9d20 <trezor_sha512_Final+0x1cc>
			REVERSE64(context->state[j],context->state[j]);
    9ba4:	e0ffea17 	ldw	r3,-88(fp)
    9ba8:	e0bfe717 	ldw	r2,-100(fp)
    9bac:	100490fa 	slli	r2,r2,3
    9bb0:	1885883a 	add	r2,r3,r2
    9bb4:	10c00017 	ldw	r3,0(r2)
    9bb8:	e0ffe815 	stw	r3,-96(fp)
    9bbc:	10800117 	ldw	r2,4(r2)
    9bc0:	e0bfe915 	stw	r2,-92(fp)
    9bc4:	e0bfe917 	ldw	r2,-92(fp)
    9bc8:	e0bff615 	stw	r2,-40(fp)
    9bcc:	e0ffe817 	ldw	r3,-96(fp)
    9bd0:	e0fff715 	stw	r3,-36(fp)
    9bd4:	e0bff617 	ldw	r2,-40(fp)
    9bd8:	e0bfe815 	stw	r2,-96(fp)
    9bdc:	e0fff717 	ldw	r3,-36(fp)
    9be0:	e0ffe915 	stw	r3,-92(fp)
    9be4:	e0ffe817 	ldw	r3,-96(fp)
    9be8:	00bfc074 	movhi	r2,65281
    9bec:	10bfc004 	addi	r2,r2,-256
    9bf0:	1884703a 	and	r2,r3,r2
    9bf4:	e0bfec15 	stw	r2,-80(fp)
    9bf8:	e0ffe917 	ldw	r3,-92(fp)
    9bfc:	00bfc074 	movhi	r2,65281
    9c00:	10bfc004 	addi	r2,r2,-256
    9c04:	1884703a 	and	r2,r3,r2
    9c08:	e0bfed15 	stw	r2,-76(fp)
    9c0c:	e0ffed17 	ldw	r3,-76(fp)
    9c10:	1804963a 	slli	r2,r3,24
    9c14:	e0ffec17 	ldw	r3,-80(fp)
    9c18:	1820d23a 	srli	r16,r3,8
    9c1c:	1420b03a 	or	r16,r2,r16
    9c20:	e0bfed17 	ldw	r2,-76(fp)
    9c24:	1022d23a 	srli	r17,r2,8
    9c28:	e0ffe817 	ldw	r3,-96(fp)
    9c2c:	00803ff4 	movhi	r2,255
    9c30:	10803fc4 	addi	r2,r2,255
    9c34:	1884703a 	and	r2,r3,r2
    9c38:	e0bfee15 	stw	r2,-72(fp)
    9c3c:	e0ffe917 	ldw	r3,-92(fp)
    9c40:	00803ff4 	movhi	r2,255
    9c44:	10803fc4 	addi	r2,r2,255
    9c48:	1884703a 	and	r2,r3,r2
    9c4c:	e0bfef15 	stw	r2,-68(fp)
    9c50:	e0ffee17 	ldw	r3,-72(fp)
    9c54:	1804d63a 	srli	r2,r3,24
    9c58:	e0ffef17 	ldw	r3,-68(fp)
    9c5c:	1826923a 	slli	r19,r3,8
    9c60:	14e6b03a 	or	r19,r2,r19
    9c64:	e0bfee17 	ldw	r2,-72(fp)
    9c68:	1024923a 	slli	r18,r2,8
    9c6c:	8484b03a 	or	r2,r16,r18
    9c70:	e0bfe815 	stw	r2,-96(fp)
    9c74:	8cc4b03a 	or	r2,r17,r19
    9c78:	e0bfe915 	stw	r2,-92(fp)
    9c7c:	e0bfe817 	ldw	r2,-96(fp)
    9c80:	10bfffec 	andhi	r2,r2,65535
    9c84:	e0bff015 	stw	r2,-64(fp)
    9c88:	e0bfe917 	ldw	r2,-92(fp)
    9c8c:	10bfffec 	andhi	r2,r2,65535
    9c90:	e0bff115 	stw	r2,-60(fp)
    9c94:	e0fff117 	ldw	r3,-60(fp)
    9c98:	1804943a 	slli	r2,r3,16
    9c9c:	e0fff017 	ldw	r3,-64(fp)
    9ca0:	1828d43a 	srli	r20,r3,16
    9ca4:	1528b03a 	or	r20,r2,r20
    9ca8:	e0bff117 	ldw	r2,-60(fp)
    9cac:	102ad43a 	srli	r21,r2,16
    9cb0:	e0bfe817 	ldw	r2,-96(fp)
    9cb4:	10bfffcc 	andi	r2,r2,65535
    9cb8:	e0bff215 	stw	r2,-56(fp)
    9cbc:	e0bfe917 	ldw	r2,-92(fp)
    9cc0:	10bfffcc 	andi	r2,r2,65535
    9cc4:	e0bff315 	stw	r2,-52(fp)
    9cc8:	e0fff217 	ldw	r3,-56(fp)
    9ccc:	1804d43a 	srli	r2,r3,16
    9cd0:	e0fff317 	ldw	r3,-52(fp)
    9cd4:	182e943a 	slli	r23,r3,16
    9cd8:	15eeb03a 	or	r23,r2,r23
    9cdc:	e0bff217 	ldw	r2,-56(fp)
    9ce0:	102c943a 	slli	r22,r2,16
    9ce4:	a586b03a 	or	r3,r20,r22
    9ce8:	e0fff415 	stw	r3,-48(fp)
    9cec:	adc4b03a 	or	r2,r21,r23
    9cf0:	e0bff515 	stw	r2,-44(fp)
    9cf4:	e0ffea17 	ldw	r3,-88(fp)
    9cf8:	e0bfe717 	ldw	r2,-100(fp)
    9cfc:	100490fa 	slli	r2,r2,3
    9d00:	1885883a 	add	r2,r3,r2
    9d04:	e0fff417 	ldw	r3,-48(fp)
    9d08:	10c00015 	stw	r3,0(r2)
    9d0c:	e0fff517 	ldw	r3,-44(fp)
    9d10:	10c00115 	stw	r3,4(r2)
		trezor_sha512_Last(context);

		/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    9d14:	e0bfe717 	ldw	r2,-100(fp)
    9d18:	10800044 	addi	r2,r2,1
    9d1c:	e0bfe715 	stw	r2,-100(fp)
    9d20:	e0bfe717 	ldw	r2,-100(fp)
    9d24:	10800210 	cmplti	r2,r2,8
    9d28:	103f9e1e 	bne	r2,zero,9ba4 <__alt_mem_epcs_flash_controller+0xfe000ba4>
			REVERSE64(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA512_DIGEST_LENGTH);
    9d2c:	e0bfea17 	ldw	r2,-88(fp)
    9d30:	01801004 	movi	r6,64
    9d34:	100b883a 	mov	r5,r2
    9d38:	e13feb17 	ldw	r4,-84(fp)
    9d3c:	000a0f40 	call	a0f4 <memcpy>
	}

	/* Zero out state data */
	memzero(context, sizeof(SHA512_CTX));
    9d40:	01403404 	movi	r5,208
    9d44:	e13fea17 	ldw	r4,-88(fp)
    9d48:	00018040 	call	1804 <memzero>
}
    9d4c:	0001883a 	nop
    9d50:	e6fff804 	addi	sp,fp,-32
    9d54:	dfc00917 	ldw	ra,36(sp)
    9d58:	df000817 	ldw	fp,32(sp)
    9d5c:	ddc00717 	ldw	r23,28(sp)
    9d60:	dd800617 	ldw	r22,24(sp)
    9d64:	dd400517 	ldw	r21,20(sp)
    9d68:	dd000417 	ldw	r20,16(sp)
    9d6c:	dcc00317 	ldw	r19,12(sp)
    9d70:	dc800217 	ldw	r18,8(sp)
    9d74:	dc400117 	ldw	r17,4(sp)
    9d78:	dc000017 	ldw	r16,0(sp)
    9d7c:	dec00a04 	addi	sp,sp,40
    9d80:	f800283a 	ret

00009d84 <trezor_sha512_End>:

char *trezor_sha512_End(SHA512_CTX* context, char buffer[]) {
    9d84:	deffea04 	addi	sp,sp,-88
    9d88:	dfc01515 	stw	ra,84(sp)
    9d8c:	df001415 	stw	fp,80(sp)
    9d90:	df001404 	addi	fp,sp,80
    9d94:	e13ffe15 	stw	r4,-8(fp)
    9d98:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA512_DIGEST_LENGTH], *d = digest;
    9d9c:	e0bfee04 	addi	r2,fp,-72
    9da0:	e0bfec15 	stw	r2,-80(fp)
	int		i;

	if (buffer != (char*)0) {
    9da4:	e0bfff17 	ldw	r2,-4(fp)
    9da8:	10002926 	beq	r2,zero,9e50 <trezor_sha512_End+0xcc>
		trezor_sha512_Final(context, digest);
    9dac:	e0bfee04 	addi	r2,fp,-72
    9db0:	100b883a 	mov	r5,r2
    9db4:	e13ffe17 	ldw	r4,-8(fp)
    9db8:	0009b540 	call	9b54 <trezor_sha512_Final>

		for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
    9dbc:	e03fed15 	stw	zero,-76(fp)
    9dc0:	00001d06 	br	9e38 <trezor_sha512_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    9dc4:	e0bfff17 	ldw	r2,-4(fp)
    9dc8:	10c00044 	addi	r3,r2,1
    9dcc:	e0ffff15 	stw	r3,-4(fp)
    9dd0:	d1200017 	ldw	r4,-32768(gp)
    9dd4:	e0ffec17 	ldw	r3,-80(fp)
    9dd8:	18c00003 	ldbu	r3,0(r3)
    9ddc:	18c03fcc 	andi	r3,r3,255
    9de0:	1806d13a 	srli	r3,r3,4
    9de4:	18c03fcc 	andi	r3,r3,255
    9de8:	20c7883a 	add	r3,r4,r3
    9dec:	18c00003 	ldbu	r3,0(r3)
    9df0:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    9df4:	e0bfff17 	ldw	r2,-4(fp)
    9df8:	10c00044 	addi	r3,r2,1
    9dfc:	e0ffff15 	stw	r3,-4(fp)
    9e00:	d1200017 	ldw	r4,-32768(gp)
    9e04:	e0ffec17 	ldw	r3,-80(fp)
    9e08:	18c00003 	ldbu	r3,0(r3)
    9e0c:	18c03fcc 	andi	r3,r3,255
    9e10:	18c003cc 	andi	r3,r3,15
    9e14:	20c7883a 	add	r3,r4,r3
    9e18:	18c00003 	ldbu	r3,0(r3)
    9e1c:	10c00005 	stb	r3,0(r2)
			d++;
    9e20:	e0bfec17 	ldw	r2,-80(fp)
    9e24:	10800044 	addi	r2,r2,1
    9e28:	e0bfec15 	stw	r2,-80(fp)
	int		i;

	if (buffer != (char*)0) {
		trezor_sha512_Final(context, digest);

		for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
    9e2c:	e0bfed17 	ldw	r2,-76(fp)
    9e30:	10800044 	addi	r2,r2,1
    9e34:	e0bfed15 	stw	r2,-76(fp)
    9e38:	e0bfed17 	ldw	r2,-76(fp)
    9e3c:	10801010 	cmplti	r2,r2,64
    9e40:	103fe01e 	bne	r2,zero,9dc4 <__alt_mem_epcs_flash_controller+0xfe000dc4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    9e44:	e0bfff17 	ldw	r2,-4(fp)
    9e48:	10000005 	stb	zero,0(r2)
    9e4c:	00000306 	br	9e5c <trezor_sha512_End+0xd8>
	} else {
		memzero(context, sizeof(SHA512_CTX));
    9e50:	01403404 	movi	r5,208
    9e54:	e13ffe17 	ldw	r4,-8(fp)
    9e58:	00018040 	call	1804 <memzero>
	}
	memzero(digest, SHA512_DIGEST_LENGTH);
    9e5c:	e0bfee04 	addi	r2,fp,-72
    9e60:	01401004 	movi	r5,64
    9e64:	1009883a 	mov	r4,r2
    9e68:	00018040 	call	1804 <memzero>
	return buffer;
    9e6c:	e0bfff17 	ldw	r2,-4(fp)
}
    9e70:	e037883a 	mov	sp,fp
    9e74:	dfc00117 	ldw	ra,4(sp)
    9e78:	df000017 	ldw	fp,0(sp)
    9e7c:	dec00204 	addi	sp,sp,8
    9e80:	f800283a 	ret

00009e84 <trezor_sha512_Raw>:

void trezor_sha512_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA512_DIGEST_LENGTH]) {
    9e84:	deffc704 	addi	sp,sp,-228
    9e88:	dfc03815 	stw	ra,224(sp)
    9e8c:	df003715 	stw	fp,220(sp)
    9e90:	df003704 	addi	fp,sp,220
    9e94:	e13ffd15 	stw	r4,-12(fp)
    9e98:	e17ffe15 	stw	r5,-8(fp)
    9e9c:	e1bfff15 	stw	r6,-4(fp)
	SHA512_CTX	context;
	trezor_sha512_Init(&context);
    9ea0:	e13fc904 	addi	r4,fp,-220
    9ea4:	0007e300 	call	7e30 <trezor_sha512_Init>
	trezor_sha512_Update(&context, data, len);
    9ea8:	e1bffe17 	ldw	r6,-8(fp)
    9eac:	e17ffd17 	ldw	r5,-12(fp)
    9eb0:	e13fc904 	addi	r4,fp,-220
    9eb4:	0008dd80 	call	8dd8 <trezor_sha512_Update>
	trezor_sha512_Final(&context, digest);
    9eb8:	e17fff17 	ldw	r5,-4(fp)
    9ebc:	e13fc904 	addi	r4,fp,-220
    9ec0:	0009b540 	call	9b54 <trezor_sha512_Final>
}
    9ec4:	0001883a 	nop
    9ec8:	e037883a 	mov	sp,fp
    9ecc:	dfc00117 	ldw	ra,4(sp)
    9ed0:	df000017 	ldw	fp,0(sp)
    9ed4:	dec00204 	addi	sp,sp,8
    9ed8:	f800283a 	ret

00009edc <trezor_sha512_Data>:

char* trezor_sha512_Data(const sha2_byte* data, size_t len, char digest[SHA512_DIGEST_STRING_LENGTH]) {
    9edc:	deffc704 	addi	sp,sp,-228
    9ee0:	dfc03815 	stw	ra,224(sp)
    9ee4:	df003715 	stw	fp,220(sp)
    9ee8:	df003704 	addi	fp,sp,220
    9eec:	e13ffd15 	stw	r4,-12(fp)
    9ef0:	e17ffe15 	stw	r5,-8(fp)
    9ef4:	e1bfff15 	stw	r6,-4(fp)
	SHA512_CTX	context;

	trezor_sha512_Init(&context);
    9ef8:	e13fc904 	addi	r4,fp,-220
    9efc:	0007e300 	call	7e30 <trezor_sha512_Init>
	trezor_sha512_Update(&context, data, len);
    9f00:	e1bffe17 	ldw	r6,-8(fp)
    9f04:	e17ffd17 	ldw	r5,-12(fp)
    9f08:	e13fc904 	addi	r4,fp,-220
    9f0c:	0008dd80 	call	8dd8 <trezor_sha512_Update>
	return trezor_sha512_End(&context, digest);
    9f10:	e17fff17 	ldw	r5,-4(fp)
    9f14:	e13fc904 	addi	r4,fp,-220
    9f18:	0009d840 	call	9d84 <trezor_sha512_End>
}
    9f1c:	e037883a 	mov	sp,fp
    9f20:	dfc00117 	ldw	ra,4(sp)
    9f24:	df000017 	ldw	fp,0(sp)
    9f28:	dec00204 	addi	sp,sp,8
    9f2c:	f800283a 	ret

00009f30 <main>:
#include <stdlib.h>
#include <stdio.h>


int main()
{
    9f30:	deffee04 	addi	sp,sp,-72
    9f34:	dfc01115 	stw	ra,68(sp)
    9f38:	df001015 	stw	fp,64(sp)
    9f3c:	ddc00f15 	stw	r23,60(sp)
    9f40:	dd800e15 	stw	r22,56(sp)
    9f44:	dd400d15 	stw	r21,52(sp)
    9f48:	dd000c15 	stw	r20,48(sp)
    9f4c:	dcc00b15 	stw	r19,44(sp)
    9f50:	dc800a15 	stw	r18,40(sp)
    9f54:	dc400915 	stw	r17,36(sp)
    9f58:	dc000815 	stw	r16,32(sp)
    9f5c:	df001004 	addi	fp,sp,64
	printf("Hello World from NIOS II hol\n");
    9f60:	01000074 	movhi	r4,1
    9f64:	211d5004 	addi	r4,r4,30016
    9f68:	000a4800 	call	a480 <puts>
	printf("Software Version: %d.%d.%d\n\n", SOFTWARE_VERSION_MAJOR, SOFTWARE_VERSION_MINOR, SOFTWARE_VERSION_REV);
    9f6c:	000f883a 	mov	r7,zero
    9f70:	000d883a 	mov	r6,zero
    9f74:	01400044 	movi	r5,1
    9f78:	01000074 	movhi	r4,1
    9f7c:	211d5804 	addi	r4,r4,30048
    9f80:	000a3b40 	call	a3b4 <printf>

	void *lots_of_memory = malloc(1024 * 1024 * 10);	// attempt to allocate 10MB
    9f84:	01002834 	movhi	r4,160
    9f88:	000a0cc0 	call	a0cc <malloc>
    9f8c:	e0bff215 	stw	r2,-56(fp)
    printf("SDRAM malloc returned 0x%08lx\n", (alt_u32)lots_of_memory);
    9f90:	e0bff217 	ldw	r2,-56(fp)
    9f94:	100b883a 	mov	r5,r2
    9f98:	01000074 	movhi	r4,1
    9f9c:	211d6004 	addi	r4,r4,30080
    9fa0:	000a3b40 	call	a3b4 <printf>

    const btc_chainparams* chain = &btc_chainparams_test;
    9fa4:	00800074 	movhi	r2,1
    9fa8:	10957d04 	addi	r2,r2,22004
    9fac:	e0bff315 	stw	r2,-52(fp)

    size_t sizeout = 128;
    9fb0:	00802004 	movi	r2,128
    9fb4:	e0bff415 	stw	r2,-48(fp)
	char masterkey[sizeout];
    9fb8:	e0bff417 	ldw	r2,-48(fp)
    9fbc:	1007883a 	mov	r3,r2
    9fc0:	18ffffc4 	addi	r3,r3,-1
    9fc4:	e0fff515 	stw	r3,-44(fp)
    9fc8:	102d883a 	mov	r22,r2
    9fcc:	002f883a 	mov	r23,zero
    9fd0:	b006d77a 	srli	r3,r22,29
    9fd4:	b82690fa 	slli	r19,r23,3
    9fd8:	1ce6b03a 	or	r19,r3,r19
    9fdc:	b02490fa 	slli	r18,r22,3
    9fe0:	1029883a 	mov	r20,r2
    9fe4:	002b883a 	mov	r21,zero
    9fe8:	a006d77a 	srli	r3,r20,29
    9fec:	a82290fa 	slli	r17,r21,3
    9ff0:	1c62b03a 	or	r17,r3,r17
    9ff4:	a02090fa 	slli	r16,r20,3
    9ff8:	108000c4 	addi	r2,r2,3
    9ffc:	1004d0ba 	srli	r2,r2,2
    a000:	1085883a 	add	r2,r2,r2
    a004:	1085883a 	add	r2,r2,r2
    a008:	d8b7c83a 	sub	sp,sp,r2
    a00c:	d805883a 	mov	r2,sp
    a010:	1005883a 	mov	r2,r2
    a014:	e0bff615 	stw	r2,-40(fp)

	/* generate a new hd master key */
	hd_gen_master(chain, masterkey, sizeout);
    a018:	e0bff617 	ldw	r2,-40(fp)
    a01c:	e1bff417 	ldw	r6,-48(fp)
    a020:	100b883a 	mov	r5,r2
    a024:	e13ff317 	ldw	r4,-52(fp)
    a028:	0000cfc0 	call	cfc <hd_gen_master>

    printf("byte: %d\n", BYTE_ORDER);
    a02c:	01413484 	movi	r5,1234
    a030:	01000074 	movhi	r4,1
    a034:	211d6804 	addi	r4,r4,30112
    a038:	000a3b40 	call	a3b4 <printf>

//    uint8_t seed[64];
//
    const char *mnemonic_phrase = mnemonic_generate(128);
    a03c:	01002004 	movi	r4,128
    a040:	00003640 	call	364 <mnemonic_generate>
    a044:	e0bff715 	stw	r2,-36(fp)
    printf("MNEMONIC PHRASE: %s", mnemonic_phrase);
    a048:	e17ff717 	ldw	r5,-36(fp)
    a04c:	01000074 	movhi	r4,1
    a050:	211d6b04 	addi	r4,r4,30124
    a054:	000a3b40 	call	a3b4 <printf>
//		printf("%x", seed[i]);
//	}
//	printf("\n");


    int count = 0;
    a058:	e03ff015 	stw	zero,-64(fp)
    int delay;

    // main loop
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
    a05c:	e0bff017 	ldw	r2,-64(fp)
    a060:	10c03fcc 	andi	r3,r2,255
    a064:	00808074 	movhi	r2,513
    a068:	10a80804 	addi	r2,r2,-24544
    a06c:	10c00035 	stwio	r3,0(r2)
        delay = 0;
    a070:	e03ff115 	stw	zero,-60(fp)
        while(delay < 200000)
    a074:	00000306 	br	a084 <main+0x154>
        {
            delay++;
    a078:	e0bff117 	ldw	r2,-60(fp)
    a07c:	10800044 	addi	r2,r2,1
    a080:	e0bff115 	stw	r2,-60(fp)
    // main loop
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
        delay = 0;
        while(delay < 200000)
    a084:	e0fff117 	ldw	r3,-60(fp)
    a088:	008000f4 	movhi	r2,3
    a08c:	10834fc4 	addi	r2,r2,3391
    a090:	10fff90e 	bge	r2,r3,a078 <__alt_mem_epcs_flash_controller+0xfe001078>
        {
            delay++;
        }
        count++;
    a094:	e0bff017 	ldw	r2,-64(fp)
    a098:	10800044 	addi	r2,r2,1
    a09c:	e0bff015 	stw	r2,-64(fp)
    }
    a0a0:	003fee06 	br	a05c <__alt_mem_epcs_flash_controller+0xfe00105c>

0000a0a4 <__mulsi3>:
    a0a4:	0005883a 	mov	r2,zero
    a0a8:	20000726 	beq	r4,zero,a0c8 <__mulsi3+0x24>
    a0ac:	20c0004c 	andi	r3,r4,1
    a0b0:	2008d07a 	srli	r4,r4,1
    a0b4:	18000126 	beq	r3,zero,a0bc <__mulsi3+0x18>
    a0b8:	1145883a 	add	r2,r2,r5
    a0bc:	294b883a 	add	r5,r5,r5
    a0c0:	203ffa1e 	bne	r4,zero,a0ac <__alt_mem_epcs_flash_controller+0xfe0010ac>
    a0c4:	f800283a 	ret
    a0c8:	f800283a 	ret

0000a0cc <malloc>:
    a0cc:	008000b4 	movhi	r2,2
    a0d0:	10a2b204 	addi	r2,r2,-30008
    a0d4:	200b883a 	mov	r5,r4
    a0d8:	11000017 	ldw	r4,0(r2)
    a0dc:	000a2201 	jmpi	a220 <_malloc_r>

0000a0e0 <free>:
    a0e0:	008000b4 	movhi	r2,2
    a0e4:	10a2b204 	addi	r2,r2,-30008
    a0e8:	200b883a 	mov	r5,r4
    a0ec:	11000017 	ldw	r4,0(r2)
    a0f0:	000a13c1 	jmpi	a13c <_free_r>

0000a0f4 <memcpy>:
    a0f4:	2005883a 	mov	r2,r4
    a0f8:	2007883a 	mov	r3,r4
    a0fc:	218d883a 	add	r6,r4,r6
    a100:	19800526 	beq	r3,r6,a118 <memcpy+0x24>
    a104:	29000003 	ldbu	r4,0(r5)
    a108:	18c00044 	addi	r3,r3,1
    a10c:	29400044 	addi	r5,r5,1
    a110:	193fffc5 	stb	r4,-1(r3)
    a114:	003ffa06 	br	a100 <__alt_mem_epcs_flash_controller+0xfe001100>
    a118:	f800283a 	ret

0000a11c <memset>:
    a11c:	2005883a 	mov	r2,r4
    a120:	2007883a 	mov	r3,r4
    a124:	218d883a 	add	r6,r4,r6
    a128:	19800326 	beq	r3,r6,a138 <memset+0x1c>
    a12c:	19400005 	stb	r5,0(r3)
    a130:	18c00044 	addi	r3,r3,1
    a134:	003ffc06 	br	a128 <__alt_mem_epcs_flash_controller+0xfe001128>
    a138:	f800283a 	ret

0000a13c <_free_r>:
    a13c:	28003726 	beq	r5,zero,a21c <_free_r+0xe0>
    a140:	28ffff17 	ldw	r3,-4(r5)
    a144:	28bfff04 	addi	r2,r5,-4
    a148:	1800010e 	bge	r3,zero,a150 <_free_r+0x14>
    a14c:	10c5883a 	add	r2,r2,r3
    a150:	014000b4 	movhi	r5,2
    a154:	2967bf04 	addi	r5,r5,-24836
    a158:	28c00017 	ldw	r3,0(r5)
    a15c:	280d883a 	mov	r6,r5
    a160:	1800031e 	bne	r3,zero,a170 <_free_r+0x34>
    a164:	10000115 	stw	zero,4(r2)
    a168:	28800015 	stw	r2,0(r5)
    a16c:	f800283a 	ret
    a170:	10c00c2e 	bgeu	r2,r3,a1a4 <_free_r+0x68>
    a174:	11000017 	ldw	r4,0(r2)
    a178:	110b883a 	add	r5,r2,r4
    a17c:	1940041e 	bne	r3,r5,a190 <_free_r+0x54>
    a180:	19400017 	ldw	r5,0(r3)
    a184:	18c00117 	ldw	r3,4(r3)
    a188:	2909883a 	add	r4,r5,r4
    a18c:	11000015 	stw	r4,0(r2)
    a190:	10c00115 	stw	r3,4(r2)
    a194:	30800015 	stw	r2,0(r6)
    a198:	f800283a 	ret
    a19c:	11400336 	bltu	r2,r5,a1ac <_free_r+0x70>
    a1a0:	2807883a 	mov	r3,r5
    a1a4:	19400117 	ldw	r5,4(r3)
    a1a8:	283ffc1e 	bne	r5,zero,a19c <__alt_mem_epcs_flash_controller+0xfe00119c>
    a1ac:	19c00017 	ldw	r7,0(r3)
    a1b0:	19cd883a 	add	r6,r3,r7
    a1b4:	30800a1e 	bne	r6,r2,a1e0 <_free_r+0xa4>
    a1b8:	10800017 	ldw	r2,0(r2)
    a1bc:	3885883a 	add	r2,r7,r2
    a1c0:	18800015 	stw	r2,0(r3)
    a1c4:	1889883a 	add	r4,r3,r2
    a1c8:	2900141e 	bne	r5,r4,a21c <_free_r+0xe0>
    a1cc:	29000017 	ldw	r4,0(r5)
    a1d0:	2085883a 	add	r2,r4,r2
    a1d4:	18800015 	stw	r2,0(r3)
    a1d8:	28800117 	ldw	r2,4(r5)
    a1dc:	00000e06 	br	a218 <_free_r+0xdc>
    a1e0:	1180032e 	bgeu	r2,r6,a1f0 <_free_r+0xb4>
    a1e4:	00800304 	movi	r2,12
    a1e8:	20800015 	stw	r2,0(r4)
    a1ec:	f800283a 	ret
    a1f0:	11000017 	ldw	r4,0(r2)
    a1f4:	110d883a 	add	r6,r2,r4
    a1f8:	2980061e 	bne	r5,r6,a214 <_free_r+0xd8>
    a1fc:	29800017 	ldw	r6,0(r5)
    a200:	3109883a 	add	r4,r6,r4
    a204:	11000015 	stw	r4,0(r2)
    a208:	29000117 	ldw	r4,4(r5)
    a20c:	11000115 	stw	r4,4(r2)
    a210:	00000106 	br	a218 <_free_r+0xdc>
    a214:	11400115 	stw	r5,4(r2)
    a218:	18800115 	stw	r2,4(r3)
    a21c:	f800283a 	ret

0000a220 <_malloc_r>:
    a220:	defffb04 	addi	sp,sp,-20
    a224:	00bfff04 	movi	r2,-4
    a228:	dc400115 	stw	r17,4(sp)
    a22c:	2c4000c4 	addi	r17,r5,3
    a230:	88a2703a 	and	r17,r17,r2
    a234:	dc800215 	stw	r18,8(sp)
    a238:	dfc00415 	stw	ra,16(sp)
    a23c:	dcc00315 	stw	r19,12(sp)
    a240:	dc000015 	stw	r16,0(sp)
    a244:	8c400204 	addi	r17,r17,8
    a248:	00800304 	movi	r2,12
    a24c:	2025883a 	mov	r18,r4
    a250:	8880022e 	bgeu	r17,r2,a25c <_malloc_r+0x3c>
    a254:	1023883a 	mov	r17,r2
    a258:	00000506 	br	a270 <_malloc_r+0x50>
    a25c:	8800040e 	bge	r17,zero,a270 <_malloc_r+0x50>
    a260:	00800304 	movi	r2,12
    a264:	90800015 	stw	r2,0(r18)
    a268:	0005883a 	mov	r2,zero
    a26c:	00003b06 	br	a35c <_malloc_r+0x13c>
    a270:	897ffb36 	bltu	r17,r5,a260 <__alt_mem_epcs_flash_controller+0xfe001260>
    a274:	008000b4 	movhi	r2,2
    a278:	10a7bf04 	addi	r2,r2,-24836
    a27c:	10c00017 	ldw	r3,0(r2)
    a280:	1009883a 	mov	r4,r2
    a284:	1821883a 	mov	r16,r3
    a288:	80000926 	beq	r16,zero,a2b0 <_malloc_r+0x90>
    a28c:	80800017 	ldw	r2,0(r16)
    a290:	1445c83a 	sub	r2,r2,r17
    a294:	10001516 	blt	r2,zero,a2ec <_malloc_r+0xcc>
    a298:	014002c4 	movi	r5,11
    a29c:	28800d2e 	bgeu	r5,r2,a2d4 <_malloc_r+0xb4>
    a2a0:	80800015 	stw	r2,0(r16)
    a2a4:	80a1883a 	add	r16,r16,r2
    a2a8:	84400015 	stw	r17,0(r16)
    a2ac:	8000221e 	bne	r16,zero,a338 <_malloc_r+0x118>
    a2b0:	040000b4 	movhi	r16,2
    a2b4:	8427be04 	addi	r16,r16,-24840
    a2b8:	80800017 	ldw	r2,0(r16)
    a2bc:	10000e1e 	bne	r2,zero,a2f8 <_malloc_r+0xd8>
    a2c0:	000b883a 	mov	r5,zero
    a2c4:	9009883a 	mov	r4,r18
    a2c8:	000a5080 	call	a508 <_sbrk_r>
    a2cc:	80800015 	stw	r2,0(r16)
    a2d0:	00000906 	br	a2f8 <_malloc_r+0xd8>
    a2d4:	80800117 	ldw	r2,4(r16)
    a2d8:	1c00021e 	bne	r3,r16,a2e4 <_malloc_r+0xc4>
    a2dc:	20800015 	stw	r2,0(r4)
    a2e0:	00001506 	br	a338 <_malloc_r+0x118>
    a2e4:	18800115 	stw	r2,4(r3)
    a2e8:	00001306 	br	a338 <_malloc_r+0x118>
    a2ec:	8007883a 	mov	r3,r16
    a2f0:	84000117 	ldw	r16,4(r16)
    a2f4:	003fe406 	br	a288 <__alt_mem_epcs_flash_controller+0xfe001288>
    a2f8:	880b883a 	mov	r5,r17
    a2fc:	9009883a 	mov	r4,r18
    a300:	000a5080 	call	a508 <_sbrk_r>
    a304:	04ffffc4 	movi	r19,-1
    a308:	14ffd526 	beq	r2,r19,a260 <__alt_mem_epcs_flash_controller+0xfe001260>
    a30c:	140000c4 	addi	r16,r2,3
    a310:	00ffff04 	movi	r3,-4
    a314:	80e0703a 	and	r16,r16,r3
    a318:	1400021e 	bne	r2,r16,a324 <_malloc_r+0x104>
    a31c:	84400015 	stw	r17,0(r16)
    a320:	00000506 	br	a338 <_malloc_r+0x118>
    a324:	808bc83a 	sub	r5,r16,r2
    a328:	9009883a 	mov	r4,r18
    a32c:	000a5080 	call	a508 <_sbrk_r>
    a330:	14fffa1e 	bne	r2,r19,a31c <__alt_mem_epcs_flash_controller+0xfe00131c>
    a334:	003fca06 	br	a260 <__alt_mem_epcs_flash_controller+0xfe001260>
    a338:	810002c4 	addi	r4,r16,11
    a33c:	00bffe04 	movi	r2,-8
    a340:	80c00104 	addi	r3,r16,4
    a344:	2084703a 	and	r2,r4,r2
    a348:	10c7c83a 	sub	r3,r2,r3
    a34c:	18000326 	beq	r3,zero,a35c <_malloc_r+0x13c>
    a350:	80e1883a 	add	r16,r16,r3
    a354:	00c7c83a 	sub	r3,zero,r3
    a358:	80c00015 	stw	r3,0(r16)
    a35c:	dfc00417 	ldw	ra,16(sp)
    a360:	dcc00317 	ldw	r19,12(sp)
    a364:	dc800217 	ldw	r18,8(sp)
    a368:	dc400117 	ldw	r17,4(sp)
    a36c:	dc000017 	ldw	r16,0(sp)
    a370:	dec00504 	addi	sp,sp,20
    a374:	f800283a 	ret

0000a378 <_printf_r>:
    a378:	defffd04 	addi	sp,sp,-12
    a37c:	dfc00015 	stw	ra,0(sp)
    a380:	d9800115 	stw	r6,4(sp)
    a384:	d9c00215 	stw	r7,8(sp)
    a388:	20c00217 	ldw	r3,8(r4)
    a38c:	01800074 	movhi	r6,1
    a390:	31aaf704 	addi	r6,r6,-21540
    a394:	19800115 	stw	r6,4(r3)
    a398:	280d883a 	mov	r6,r5
    a39c:	21400217 	ldw	r5,8(r4)
    a3a0:	d9c00104 	addi	r7,sp,4
    a3a4:	000a6940 	call	a694 <___vfprintf_internal_r>
    a3a8:	dfc00017 	ldw	ra,0(sp)
    a3ac:	dec00304 	addi	sp,sp,12
    a3b0:	f800283a 	ret

0000a3b4 <printf>:
    a3b4:	defffc04 	addi	sp,sp,-16
    a3b8:	dfc00015 	stw	ra,0(sp)
    a3bc:	d9400115 	stw	r5,4(sp)
    a3c0:	d9800215 	stw	r6,8(sp)
    a3c4:	d9c00315 	stw	r7,12(sp)
    a3c8:	008000b4 	movhi	r2,2
    a3cc:	10a2b204 	addi	r2,r2,-30008
    a3d0:	10800017 	ldw	r2,0(r2)
    a3d4:	01400074 	movhi	r5,1
    a3d8:	296af704 	addi	r5,r5,-21540
    a3dc:	10c00217 	ldw	r3,8(r2)
    a3e0:	d9800104 	addi	r6,sp,4
    a3e4:	19400115 	stw	r5,4(r3)
    a3e8:	200b883a 	mov	r5,r4
    a3ec:	11000217 	ldw	r4,8(r2)
    a3f0:	000abc00 	call	abc0 <__vfprintf_internal>
    a3f4:	dfc00017 	ldw	ra,0(sp)
    a3f8:	dec00404 	addi	sp,sp,16
    a3fc:	f800283a 	ret

0000a400 <_puts_r>:
    a400:	defffd04 	addi	sp,sp,-12
    a404:	dc000015 	stw	r16,0(sp)
    a408:	2021883a 	mov	r16,r4
    a40c:	2809883a 	mov	r4,r5
    a410:	dfc00215 	stw	ra,8(sp)
    a414:	dc400115 	stw	r17,4(sp)
    a418:	2823883a 	mov	r17,r5
    a41c:	000a5bc0 	call	a5bc <strlen>
    a420:	81400217 	ldw	r5,8(r16)
    a424:	01000074 	movhi	r4,1
    a428:	212af704 	addi	r4,r4,-21540
    a42c:	29000115 	stw	r4,4(r5)
    a430:	100f883a 	mov	r7,r2
    a434:	880d883a 	mov	r6,r17
    a438:	8009883a 	mov	r4,r16
    a43c:	000abdc0 	call	abdc <__sfvwrite_small_dev>
    a440:	00ffffc4 	movi	r3,-1
    a444:	10c00926 	beq	r2,r3,a46c <_puts_r+0x6c>
    a448:	81400217 	ldw	r5,8(r16)
    a44c:	01800074 	movhi	r6,1
    a450:	01c00044 	movi	r7,1
    a454:	28800117 	ldw	r2,4(r5)
    a458:	319d7004 	addi	r6,r6,30144
    a45c:	8009883a 	mov	r4,r16
    a460:	103ee83a 	callr	r2
    a464:	10bfffe0 	cmpeqi	r2,r2,-1
    a468:	0085c83a 	sub	r2,zero,r2
    a46c:	dfc00217 	ldw	ra,8(sp)
    a470:	dc400117 	ldw	r17,4(sp)
    a474:	dc000017 	ldw	r16,0(sp)
    a478:	dec00304 	addi	sp,sp,12
    a47c:	f800283a 	ret

0000a480 <puts>:
    a480:	008000b4 	movhi	r2,2
    a484:	10a2b204 	addi	r2,r2,-30008
    a488:	200b883a 	mov	r5,r4
    a48c:	11000017 	ldw	r4,0(r2)
    a490:	000a4001 	jmpi	a400 <_puts_r>

0000a494 <srand>:
    a494:	008000b4 	movhi	r2,2
    a498:	10a7c004 	addi	r2,r2,-24832
    a49c:	11000015 	stw	r4,0(r2)
    a4a0:	10000115 	stw	zero,4(r2)
    a4a4:	f800283a 	ret

0000a4a8 <rand>:
    a4a8:	defffe04 	addi	sp,sp,-8
    a4ac:	dc000015 	stw	r16,0(sp)
    a4b0:	040000b4 	movhi	r16,2
    a4b4:	8427c004 	addi	r16,r16,-24832
    a4b8:	81000017 	ldw	r4,0(r16)
    a4bc:	81400117 	ldw	r5,4(r16)
    a4c0:	01932574 	movhi	r6,19605
    a4c4:	01d614b4 	movhi	r7,22610
    a4c8:	319fcb44 	addi	r6,r6,32557
    a4cc:	39fd0b44 	addi	r7,r7,-3027
    a4d0:	dfc00115 	stw	ra,4(sp)
    a4d4:	000ad400 	call	ad40 <__muldi3>
    a4d8:	11000044 	addi	r4,r2,1
    a4dc:	2085803a 	cmpltu	r2,r4,r2
    a4e0:	10c7883a 	add	r3,r2,r3
    a4e4:	00a00034 	movhi	r2,32768
    a4e8:	10bfffc4 	addi	r2,r2,-1
    a4ec:	1884703a 	and	r2,r3,r2
    a4f0:	81000015 	stw	r4,0(r16)
    a4f4:	80c00115 	stw	r3,4(r16)
    a4f8:	dfc00117 	ldw	ra,4(sp)
    a4fc:	dc000017 	ldw	r16,0(sp)
    a500:	dec00204 	addi	sp,sp,8
    a504:	f800283a 	ret

0000a508 <_sbrk_r>:
    a508:	defffd04 	addi	sp,sp,-12
    a50c:	dc000015 	stw	r16,0(sp)
    a510:	040000b4 	movhi	r16,2
    a514:	dc400115 	stw	r17,4(sp)
    a518:	8427c204 	addi	r16,r16,-24824
    a51c:	2023883a 	mov	r17,r4
    a520:	2809883a 	mov	r4,r5
    a524:	dfc00215 	stw	ra,8(sp)
    a528:	80000015 	stw	zero,0(r16)
    a52c:	000b35c0 	call	b35c <sbrk>
    a530:	00ffffc4 	movi	r3,-1
    a534:	10c0031e 	bne	r2,r3,a544 <_sbrk_r+0x3c>
    a538:	80c00017 	ldw	r3,0(r16)
    a53c:	18000126 	beq	r3,zero,a544 <_sbrk_r+0x3c>
    a540:	88c00015 	stw	r3,0(r17)
    a544:	dfc00217 	ldw	ra,8(sp)
    a548:	dc400117 	ldw	r17,4(sp)
    a54c:	dc000017 	ldw	r16,0(sp)
    a550:	dec00304 	addi	sp,sp,12
    a554:	f800283a 	ret

0000a558 <strcmp>:
    a558:	20800003 	ldbu	r2,0(r4)
    a55c:	10c03fcc 	andi	r3,r2,255
    a560:	18c0201c 	xori	r3,r3,128
    a564:	18ffe004 	addi	r3,r3,-128
    a568:	18000526 	beq	r3,zero,a580 <strcmp+0x28>
    a56c:	29800007 	ldb	r6,0(r5)
    a570:	1980031e 	bne	r3,r6,a580 <strcmp+0x28>
    a574:	21000044 	addi	r4,r4,1
    a578:	29400044 	addi	r5,r5,1
    a57c:	003ff606 	br	a558 <__alt_mem_epcs_flash_controller+0xfe001558>
    a580:	28c00003 	ldbu	r3,0(r5)
    a584:	10803fcc 	andi	r2,r2,255
    a588:	10c5c83a 	sub	r2,r2,r3
    a58c:	f800283a 	ret

0000a590 <strcpy>:
    a590:	2005883a 	mov	r2,r4
    a594:	200d883a 	mov	r6,r4
    a598:	28c00003 	ldbu	r3,0(r5)
    a59c:	31800044 	addi	r6,r6,1
    a5a0:	29400044 	addi	r5,r5,1
    a5a4:	30ffffc5 	stb	r3,-1(r6)
    a5a8:	18c03fcc 	andi	r3,r3,255
    a5ac:	18c0201c 	xori	r3,r3,128
    a5b0:	18ffe004 	addi	r3,r3,-128
    a5b4:	183ff81e 	bne	r3,zero,a598 <__alt_mem_epcs_flash_controller+0xfe001598>
    a5b8:	f800283a 	ret

0000a5bc <strlen>:
    a5bc:	2005883a 	mov	r2,r4
    a5c0:	10c00007 	ldb	r3,0(r2)
    a5c4:	18000226 	beq	r3,zero,a5d0 <strlen+0x14>
    a5c8:	10800044 	addi	r2,r2,1
    a5cc:	003ffc06 	br	a5c0 <__alt_mem_epcs_flash_controller+0xfe0015c0>
    a5d0:	1105c83a 	sub	r2,r2,r4
    a5d4:	f800283a 	ret

0000a5d8 <time>:
    a5d8:	008000b4 	movhi	r2,2
    a5dc:	defffc04 	addi	sp,sp,-16
    a5e0:	10a2b204 	addi	r2,r2,-30008
    a5e4:	dc000215 	stw	r16,8(sp)
    a5e8:	2021883a 	mov	r16,r4
    a5ec:	11000017 	ldw	r4,0(r2)
    a5f0:	000d883a 	mov	r6,zero
    a5f4:	d80b883a 	mov	r5,sp
    a5f8:	dfc00315 	stw	ra,12(sp)
    a5fc:	000ac940 	call	ac94 <_gettimeofday_r>
    a600:	10000416 	blt	r2,zero,a614 <time+0x3c>
    a604:	d8800017 	ldw	r2,0(sp)
    a608:	80000326 	beq	r16,zero,a618 <time+0x40>
    a60c:	80800015 	stw	r2,0(r16)
    a610:	00000106 	br	a618 <time+0x40>
    a614:	00bfffc4 	movi	r2,-1
    a618:	dfc00317 	ldw	ra,12(sp)
    a61c:	dc000217 	ldw	r16,8(sp)
    a620:	dec00404 	addi	sp,sp,16
    a624:	f800283a 	ret

0000a628 <print_repeat>:
    a628:	defffb04 	addi	sp,sp,-20
    a62c:	dc800315 	stw	r18,12(sp)
    a630:	dc400215 	stw	r17,8(sp)
    a634:	dc000115 	stw	r16,4(sp)
    a638:	dfc00415 	stw	ra,16(sp)
    a63c:	2025883a 	mov	r18,r4
    a640:	2823883a 	mov	r17,r5
    a644:	d9800005 	stb	r6,0(sp)
    a648:	3821883a 	mov	r16,r7
    a64c:	04000a0e 	bge	zero,r16,a678 <print_repeat+0x50>
    a650:	88800117 	ldw	r2,4(r17)
    a654:	01c00044 	movi	r7,1
    a658:	d80d883a 	mov	r6,sp
    a65c:	880b883a 	mov	r5,r17
    a660:	9009883a 	mov	r4,r18
    a664:	103ee83a 	callr	r2
    a668:	843fffc4 	addi	r16,r16,-1
    a66c:	103ff726 	beq	r2,zero,a64c <__alt_mem_epcs_flash_controller+0xfe00164c>
    a670:	00bfffc4 	movi	r2,-1
    a674:	00000106 	br	a67c <print_repeat+0x54>
    a678:	0005883a 	mov	r2,zero
    a67c:	dfc00417 	ldw	ra,16(sp)
    a680:	dc800317 	ldw	r18,12(sp)
    a684:	dc400217 	ldw	r17,8(sp)
    a688:	dc000117 	ldw	r16,4(sp)
    a68c:	dec00504 	addi	sp,sp,20
    a690:	f800283a 	ret

0000a694 <___vfprintf_internal_r>:
    a694:	deffe504 	addi	sp,sp,-108
    a698:	d8c00804 	addi	r3,sp,32
    a69c:	ddc01815 	stw	r23,96(sp)
    a6a0:	dd801715 	stw	r22,92(sp)
    a6a4:	dd401615 	stw	r21,88(sp)
    a6a8:	dd001515 	stw	r20,84(sp)
    a6ac:	dcc01415 	stw	r19,80(sp)
    a6b0:	dc801315 	stw	r18,76(sp)
    a6b4:	dc401215 	stw	r17,72(sp)
    a6b8:	dc001115 	stw	r16,68(sp)
    a6bc:	dfc01a15 	stw	ra,104(sp)
    a6c0:	df001915 	stw	fp,100(sp)
    a6c4:	2029883a 	mov	r20,r4
    a6c8:	2823883a 	mov	r17,r5
    a6cc:	382d883a 	mov	r22,r7
    a6d0:	d9800f15 	stw	r6,60(sp)
    a6d4:	0021883a 	mov	r16,zero
    a6d8:	d8000e15 	stw	zero,56(sp)
    a6dc:	d8000a15 	stw	zero,40(sp)
    a6e0:	002b883a 	mov	r21,zero
    a6e4:	0027883a 	mov	r19,zero
    a6e8:	0025883a 	mov	r18,zero
    a6ec:	d8000c15 	stw	zero,48(sp)
    a6f0:	d8000b15 	stw	zero,44(sp)
    a6f4:	002f883a 	mov	r23,zero
    a6f8:	d8c00915 	stw	r3,36(sp)
    a6fc:	d8c00f17 	ldw	r3,60(sp)
    a700:	19000003 	ldbu	r4,0(r3)
    a704:	20803fcc 	andi	r2,r4,255
    a708:	1080201c 	xori	r2,r2,128
    a70c:	10bfe004 	addi	r2,r2,-128
    a710:	10011e26 	beq	r2,zero,ab8c <___vfprintf_internal_r+0x4f8>
    a714:	00c00044 	movi	r3,1
    a718:	b8c01426 	beq	r23,r3,a76c <___vfprintf_internal_r+0xd8>
    a71c:	1dc00216 	blt	r3,r23,a728 <___vfprintf_internal_r+0x94>
    a720:	b8000626 	beq	r23,zero,a73c <___vfprintf_internal_r+0xa8>
    a724:	00011506 	br	ab7c <___vfprintf_internal_r+0x4e8>
    a728:	01400084 	movi	r5,2
    a72c:	b9401d26 	beq	r23,r5,a7a4 <___vfprintf_internal_r+0x110>
    a730:	014000c4 	movi	r5,3
    a734:	b9402b26 	beq	r23,r5,a7e4 <___vfprintf_internal_r+0x150>
    a738:	00011006 	br	ab7c <___vfprintf_internal_r+0x4e8>
    a73c:	01400944 	movi	r5,37
    a740:	1140fc26 	beq	r2,r5,ab34 <___vfprintf_internal_r+0x4a0>
    a744:	88800117 	ldw	r2,4(r17)
    a748:	d9000005 	stb	r4,0(sp)
    a74c:	01c00044 	movi	r7,1
    a750:	d80d883a 	mov	r6,sp
    a754:	880b883a 	mov	r5,r17
    a758:	a009883a 	mov	r4,r20
    a75c:	103ee83a 	callr	r2
    a760:	1000d81e 	bne	r2,zero,aac4 <___vfprintf_internal_r+0x430>
    a764:	84000044 	addi	r16,r16,1
    a768:	00010406 	br	ab7c <___vfprintf_internal_r+0x4e8>
    a76c:	01400c04 	movi	r5,48
    a770:	1140fa26 	beq	r2,r5,ab5c <___vfprintf_internal_r+0x4c8>
    a774:	01400944 	movi	r5,37
    a778:	11400a1e 	bne	r2,r5,a7a4 <___vfprintf_internal_r+0x110>
    a77c:	d8800005 	stb	r2,0(sp)
    a780:	88800117 	ldw	r2,4(r17)
    a784:	b80f883a 	mov	r7,r23
    a788:	d80d883a 	mov	r6,sp
    a78c:	880b883a 	mov	r5,r17
    a790:	a009883a 	mov	r4,r20
    a794:	103ee83a 	callr	r2
    a798:	1000ca1e 	bne	r2,zero,aac4 <___vfprintf_internal_r+0x430>
    a79c:	84000044 	addi	r16,r16,1
    a7a0:	0000f506 	br	ab78 <___vfprintf_internal_r+0x4e4>
    a7a4:	25fff404 	addi	r23,r4,-48
    a7a8:	bdc03fcc 	andi	r23,r23,255
    a7ac:	00c00244 	movi	r3,9
    a7b0:	1dc00936 	bltu	r3,r23,a7d8 <___vfprintf_internal_r+0x144>
    a7b4:	00bfffc4 	movi	r2,-1
    a7b8:	90800426 	beq	r18,r2,a7cc <___vfprintf_internal_r+0x138>
    a7bc:	01400284 	movi	r5,10
    a7c0:	9009883a 	mov	r4,r18
    a7c4:	000a0a40 	call	a0a4 <__mulsi3>
    a7c8:	00000106 	br	a7d0 <___vfprintf_internal_r+0x13c>
    a7cc:	0005883a 	mov	r2,zero
    a7d0:	b8a5883a 	add	r18,r23,r2
    a7d4:	0000e206 	br	ab60 <___vfprintf_internal_r+0x4cc>
    a7d8:	01400b84 	movi	r5,46
    a7dc:	1140e426 	beq	r2,r5,ab70 <___vfprintf_internal_r+0x4dc>
    a7e0:	05c00084 	movi	r23,2
    a7e4:	213ff404 	addi	r4,r4,-48
    a7e8:	27003fcc 	andi	fp,r4,255
    a7ec:	00c00244 	movi	r3,9
    a7f0:	1f000936 	bltu	r3,fp,a818 <___vfprintf_internal_r+0x184>
    a7f4:	00bfffc4 	movi	r2,-1
    a7f8:	98800426 	beq	r19,r2,a80c <___vfprintf_internal_r+0x178>
    a7fc:	01400284 	movi	r5,10
    a800:	9809883a 	mov	r4,r19
    a804:	000a0a40 	call	a0a4 <__mulsi3>
    a808:	00000106 	br	a810 <___vfprintf_internal_r+0x17c>
    a80c:	0005883a 	mov	r2,zero
    a810:	e0a7883a 	add	r19,fp,r2
    a814:	0000d906 	br	ab7c <___vfprintf_internal_r+0x4e8>
    a818:	00c01b04 	movi	r3,108
    a81c:	10c0d226 	beq	r2,r3,ab68 <___vfprintf_internal_r+0x4d4>
    a820:	013fffc4 	movi	r4,-1
    a824:	99000226 	beq	r19,r4,a830 <___vfprintf_internal_r+0x19c>
    a828:	d8000b15 	stw	zero,44(sp)
    a82c:	00000106 	br	a834 <___vfprintf_internal_r+0x1a0>
    a830:	04c00044 	movi	r19,1
    a834:	01001a44 	movi	r4,105
    a838:	11001626 	beq	r2,r4,a894 <___vfprintf_internal_r+0x200>
    a83c:	20800916 	blt	r4,r2,a864 <___vfprintf_internal_r+0x1d0>
    a840:	010018c4 	movi	r4,99
    a844:	11008826 	beq	r2,r4,aa68 <___vfprintf_internal_r+0x3d4>
    a848:	01001904 	movi	r4,100
    a84c:	11001126 	beq	r2,r4,a894 <___vfprintf_internal_r+0x200>
    a850:	01001604 	movi	r4,88
    a854:	1100c81e 	bne	r2,r4,ab78 <___vfprintf_internal_r+0x4e4>
    a858:	00c00044 	movi	r3,1
    a85c:	d8c00e15 	stw	r3,56(sp)
    a860:	00001506 	br	a8b8 <___vfprintf_internal_r+0x224>
    a864:	01001cc4 	movi	r4,115
    a868:	11009826 	beq	r2,r4,aacc <___vfprintf_internal_r+0x438>
    a86c:	20800416 	blt	r4,r2,a880 <___vfprintf_internal_r+0x1ec>
    a870:	01001bc4 	movi	r4,111
    a874:	1100c01e 	bne	r2,r4,ab78 <___vfprintf_internal_r+0x4e4>
    a878:	05400204 	movi	r21,8
    a87c:	00000f06 	br	a8bc <___vfprintf_internal_r+0x228>
    a880:	01001d44 	movi	r4,117
    a884:	11000d26 	beq	r2,r4,a8bc <___vfprintf_internal_r+0x228>
    a888:	01001e04 	movi	r4,120
    a88c:	11000a26 	beq	r2,r4,a8b8 <___vfprintf_internal_r+0x224>
    a890:	0000b906 	br	ab78 <___vfprintf_internal_r+0x4e4>
    a894:	d8c00a17 	ldw	r3,40(sp)
    a898:	b7000104 	addi	fp,r22,4
    a89c:	18000726 	beq	r3,zero,a8bc <___vfprintf_internal_r+0x228>
    a8a0:	df000d15 	stw	fp,52(sp)
    a8a4:	b5c00017 	ldw	r23,0(r22)
    a8a8:	b800080e 	bge	r23,zero,a8cc <___vfprintf_internal_r+0x238>
    a8ac:	05efc83a 	sub	r23,zero,r23
    a8b0:	02400044 	movi	r9,1
    a8b4:	00000606 	br	a8d0 <___vfprintf_internal_r+0x23c>
    a8b8:	05400404 	movi	r21,16
    a8bc:	b0c00104 	addi	r3,r22,4
    a8c0:	d8c00d15 	stw	r3,52(sp)
    a8c4:	b5c00017 	ldw	r23,0(r22)
    a8c8:	d8000a15 	stw	zero,40(sp)
    a8cc:	0013883a 	mov	r9,zero
    a8d0:	d839883a 	mov	fp,sp
    a8d4:	b8001726 	beq	r23,zero,a934 <___vfprintf_internal_r+0x2a0>
    a8d8:	a80b883a 	mov	r5,r21
    a8dc:	b809883a 	mov	r4,r23
    a8e0:	da401015 	stw	r9,64(sp)
    a8e4:	000af440 	call	af44 <__udivsi3>
    a8e8:	a80b883a 	mov	r5,r21
    a8ec:	1009883a 	mov	r4,r2
    a8f0:	102d883a 	mov	r22,r2
    a8f4:	000a0a40 	call	a0a4 <__mulsi3>
    a8f8:	b885c83a 	sub	r2,r23,r2
    a8fc:	00c00244 	movi	r3,9
    a900:	da401017 	ldw	r9,64(sp)
    a904:	18800216 	blt	r3,r2,a910 <___vfprintf_internal_r+0x27c>
    a908:	10800c04 	addi	r2,r2,48
    a90c:	00000506 	br	a924 <___vfprintf_internal_r+0x290>
    a910:	d8c00e17 	ldw	r3,56(sp)
    a914:	18000226 	beq	r3,zero,a920 <___vfprintf_internal_r+0x28c>
    a918:	10800dc4 	addi	r2,r2,55
    a91c:	00000106 	br	a924 <___vfprintf_internal_r+0x290>
    a920:	108015c4 	addi	r2,r2,87
    a924:	e0800005 	stb	r2,0(fp)
    a928:	b02f883a 	mov	r23,r22
    a92c:	e7000044 	addi	fp,fp,1
    a930:	003fe806 	br	a8d4 <__alt_mem_epcs_flash_controller+0xfe0018d4>
    a934:	e6efc83a 	sub	r23,fp,sp
    a938:	9dc5c83a 	sub	r2,r19,r23
    a93c:	0080090e 	bge	zero,r2,a964 <___vfprintf_internal_r+0x2d0>
    a940:	e085883a 	add	r2,fp,r2
    a944:	01400c04 	movi	r5,48
    a948:	d8c00917 	ldw	r3,36(sp)
    a94c:	e009883a 	mov	r4,fp
    a950:	e0c0032e 	bgeu	fp,r3,a960 <___vfprintf_internal_r+0x2cc>
    a954:	e7000044 	addi	fp,fp,1
    a958:	21400005 	stb	r5,0(r4)
    a95c:	e0bffa1e 	bne	fp,r2,a948 <__alt_mem_epcs_flash_controller+0xfe001948>
    a960:	e6efc83a 	sub	r23,fp,sp
    a964:	d8c00b17 	ldw	r3,44(sp)
    a968:	4dd1883a 	add	r8,r9,r23
    a96c:	922dc83a 	sub	r22,r18,r8
    a970:	18001626 	beq	r3,zero,a9cc <___vfprintf_internal_r+0x338>
    a974:	48000a26 	beq	r9,zero,a9a0 <___vfprintf_internal_r+0x30c>
    a978:	00800b44 	movi	r2,45
    a97c:	d8800805 	stb	r2,32(sp)
    a980:	88800117 	ldw	r2,4(r17)
    a984:	01c00044 	movi	r7,1
    a988:	d9800804 	addi	r6,sp,32
    a98c:	880b883a 	mov	r5,r17
    a990:	a009883a 	mov	r4,r20
    a994:	103ee83a 	callr	r2
    a998:	10004a1e 	bne	r2,zero,aac4 <___vfprintf_internal_r+0x430>
    a99c:	84000044 	addi	r16,r16,1
    a9a0:	0580070e 	bge	zero,r22,a9c0 <___vfprintf_internal_r+0x32c>
    a9a4:	b00f883a 	mov	r7,r22
    a9a8:	01800c04 	movi	r6,48
    a9ac:	880b883a 	mov	r5,r17
    a9b0:	a009883a 	mov	r4,r20
    a9b4:	000a6280 	call	a628 <print_repeat>
    a9b8:	1000421e 	bne	r2,zero,aac4 <___vfprintf_internal_r+0x430>
    a9bc:	85a1883a 	add	r16,r16,r22
    a9c0:	e02d883a 	mov	r22,fp
    a9c4:	bf2fc83a 	sub	r23,r23,fp
    a9c8:	00002006 	br	aa4c <___vfprintf_internal_r+0x3b8>
    a9cc:	0580090e 	bge	zero,r22,a9f4 <___vfprintf_internal_r+0x360>
    a9d0:	b00f883a 	mov	r7,r22
    a9d4:	01800804 	movi	r6,32
    a9d8:	880b883a 	mov	r5,r17
    a9dc:	a009883a 	mov	r4,r20
    a9e0:	da401015 	stw	r9,64(sp)
    a9e4:	000a6280 	call	a628 <print_repeat>
    a9e8:	da401017 	ldw	r9,64(sp)
    a9ec:	1000351e 	bne	r2,zero,aac4 <___vfprintf_internal_r+0x430>
    a9f0:	85a1883a 	add	r16,r16,r22
    a9f4:	483ff226 	beq	r9,zero,a9c0 <__alt_mem_epcs_flash_controller+0xfe0019c0>
    a9f8:	00800b44 	movi	r2,45
    a9fc:	d8800805 	stb	r2,32(sp)
    aa00:	88800117 	ldw	r2,4(r17)
    aa04:	01c00044 	movi	r7,1
    aa08:	d9800804 	addi	r6,sp,32
    aa0c:	880b883a 	mov	r5,r17
    aa10:	a009883a 	mov	r4,r20
    aa14:	103ee83a 	callr	r2
    aa18:	10002a1e 	bne	r2,zero,aac4 <___vfprintf_internal_r+0x430>
    aa1c:	84000044 	addi	r16,r16,1
    aa20:	003fe706 	br	a9c0 <__alt_mem_epcs_flash_controller+0xfe0019c0>
    aa24:	b5bfffc4 	addi	r22,r22,-1
    aa28:	b0800003 	ldbu	r2,0(r22)
    aa2c:	01c00044 	movi	r7,1
    aa30:	d9800804 	addi	r6,sp,32
    aa34:	d8800805 	stb	r2,32(sp)
    aa38:	88800117 	ldw	r2,4(r17)
    aa3c:	880b883a 	mov	r5,r17
    aa40:	a009883a 	mov	r4,r20
    aa44:	103ee83a 	callr	r2
    aa48:	10001e1e 	bne	r2,zero,aac4 <___vfprintf_internal_r+0x430>
    aa4c:	8585c83a 	sub	r2,r16,r22
    aa50:	b5c9883a 	add	r4,r22,r23
    aa54:	e085883a 	add	r2,fp,r2
    aa58:	013ff216 	blt	zero,r4,aa24 <__alt_mem_epcs_flash_controller+0xfe001a24>
    aa5c:	1021883a 	mov	r16,r2
    aa60:	dd800d17 	ldw	r22,52(sp)
    aa64:	00004406 	br	ab78 <___vfprintf_internal_r+0x4e4>
    aa68:	00800044 	movi	r2,1
    aa6c:	1480080e 	bge	r2,r18,aa90 <___vfprintf_internal_r+0x3fc>
    aa70:	95ffffc4 	addi	r23,r18,-1
    aa74:	b80f883a 	mov	r7,r23
    aa78:	01800804 	movi	r6,32
    aa7c:	880b883a 	mov	r5,r17
    aa80:	a009883a 	mov	r4,r20
    aa84:	000a6280 	call	a628 <print_repeat>
    aa88:	10000e1e 	bne	r2,zero,aac4 <___vfprintf_internal_r+0x430>
    aa8c:	85e1883a 	add	r16,r16,r23
    aa90:	b0800017 	ldw	r2,0(r22)
    aa94:	01c00044 	movi	r7,1
    aa98:	d80d883a 	mov	r6,sp
    aa9c:	d8800005 	stb	r2,0(sp)
    aaa0:	88800117 	ldw	r2,4(r17)
    aaa4:	880b883a 	mov	r5,r17
    aaa8:	a009883a 	mov	r4,r20
    aaac:	b5c00104 	addi	r23,r22,4
    aab0:	103ee83a 	callr	r2
    aab4:	1000031e 	bne	r2,zero,aac4 <___vfprintf_internal_r+0x430>
    aab8:	84000044 	addi	r16,r16,1
    aabc:	b82d883a 	mov	r22,r23
    aac0:	00002d06 	br	ab78 <___vfprintf_internal_r+0x4e4>
    aac4:	00bfffc4 	movi	r2,-1
    aac8:	00003106 	br	ab90 <___vfprintf_internal_r+0x4fc>
    aacc:	b5c00017 	ldw	r23,0(r22)
    aad0:	b7000104 	addi	fp,r22,4
    aad4:	b809883a 	mov	r4,r23
    aad8:	000a5bc0 	call	a5bc <strlen>
    aadc:	9091c83a 	sub	r8,r18,r2
    aae0:	102d883a 	mov	r22,r2
    aae4:	0200090e 	bge	zero,r8,ab0c <___vfprintf_internal_r+0x478>
    aae8:	400f883a 	mov	r7,r8
    aaec:	01800804 	movi	r6,32
    aaf0:	880b883a 	mov	r5,r17
    aaf4:	a009883a 	mov	r4,r20
    aaf8:	da001015 	stw	r8,64(sp)
    aafc:	000a6280 	call	a628 <print_repeat>
    ab00:	da001017 	ldw	r8,64(sp)
    ab04:	103fef1e 	bne	r2,zero,aac4 <__alt_mem_epcs_flash_controller+0xfe001ac4>
    ab08:	8221883a 	add	r16,r16,r8
    ab0c:	88800117 	ldw	r2,4(r17)
    ab10:	b00f883a 	mov	r7,r22
    ab14:	b80d883a 	mov	r6,r23
    ab18:	880b883a 	mov	r5,r17
    ab1c:	a009883a 	mov	r4,r20
    ab20:	103ee83a 	callr	r2
    ab24:	103fe71e 	bne	r2,zero,aac4 <__alt_mem_epcs_flash_controller+0xfe001ac4>
    ab28:	85a1883a 	add	r16,r16,r22
    ab2c:	e02d883a 	mov	r22,fp
    ab30:	00001106 	br	ab78 <___vfprintf_internal_r+0x4e4>
    ab34:	00c00044 	movi	r3,1
    ab38:	04ffffc4 	movi	r19,-1
    ab3c:	d8000e15 	stw	zero,56(sp)
    ab40:	d8c00a15 	stw	r3,40(sp)
    ab44:	05400284 	movi	r21,10
    ab48:	9825883a 	mov	r18,r19
    ab4c:	d8000c15 	stw	zero,48(sp)
    ab50:	d8000b15 	stw	zero,44(sp)
    ab54:	182f883a 	mov	r23,r3
    ab58:	00000806 	br	ab7c <___vfprintf_internal_r+0x4e8>
    ab5c:	ddc00b15 	stw	r23,44(sp)
    ab60:	05c00084 	movi	r23,2
    ab64:	00000506 	br	ab7c <___vfprintf_internal_r+0x4e8>
    ab68:	00c00044 	movi	r3,1
    ab6c:	d8c00c15 	stw	r3,48(sp)
    ab70:	05c000c4 	movi	r23,3
    ab74:	00000106 	br	ab7c <___vfprintf_internal_r+0x4e8>
    ab78:	002f883a 	mov	r23,zero
    ab7c:	d8c00f17 	ldw	r3,60(sp)
    ab80:	18c00044 	addi	r3,r3,1
    ab84:	d8c00f15 	stw	r3,60(sp)
    ab88:	003edc06 	br	a6fc <__alt_mem_epcs_flash_controller+0xfe0016fc>
    ab8c:	8005883a 	mov	r2,r16
    ab90:	dfc01a17 	ldw	ra,104(sp)
    ab94:	df001917 	ldw	fp,100(sp)
    ab98:	ddc01817 	ldw	r23,96(sp)
    ab9c:	dd801717 	ldw	r22,92(sp)
    aba0:	dd401617 	ldw	r21,88(sp)
    aba4:	dd001517 	ldw	r20,84(sp)
    aba8:	dcc01417 	ldw	r19,80(sp)
    abac:	dc801317 	ldw	r18,76(sp)
    abb0:	dc401217 	ldw	r17,72(sp)
    abb4:	dc001117 	ldw	r16,68(sp)
    abb8:	dec01b04 	addi	sp,sp,108
    abbc:	f800283a 	ret

0000abc0 <__vfprintf_internal>:
    abc0:	008000b4 	movhi	r2,2
    abc4:	10a2b204 	addi	r2,r2,-30008
    abc8:	300f883a 	mov	r7,r6
    abcc:	280d883a 	mov	r6,r5
    abd0:	200b883a 	mov	r5,r4
    abd4:	11000017 	ldw	r4,0(r2)
    abd8:	000a6941 	jmpi	a694 <___vfprintf_internal_r>

0000abdc <__sfvwrite_small_dev>:
    abdc:	2880000b 	ldhu	r2,0(r5)
    abe0:	1080020c 	andi	r2,r2,8
    abe4:	10002126 	beq	r2,zero,ac6c <__sfvwrite_small_dev+0x90>
    abe8:	2880008f 	ldh	r2,2(r5)
    abec:	defffa04 	addi	sp,sp,-24
    abf0:	dc000015 	stw	r16,0(sp)
    abf4:	dfc00515 	stw	ra,20(sp)
    abf8:	dd000415 	stw	r20,16(sp)
    abfc:	dcc00315 	stw	r19,12(sp)
    ac00:	dc800215 	stw	r18,8(sp)
    ac04:	dc400115 	stw	r17,4(sp)
    ac08:	2821883a 	mov	r16,r5
    ac0c:	10001216 	blt	r2,zero,ac58 <__sfvwrite_small_dev+0x7c>
    ac10:	2027883a 	mov	r19,r4
    ac14:	3025883a 	mov	r18,r6
    ac18:	3823883a 	mov	r17,r7
    ac1c:	05010004 	movi	r20,1024
    ac20:	04400b0e 	bge	zero,r17,ac50 <__sfvwrite_small_dev+0x74>
    ac24:	880f883a 	mov	r7,r17
    ac28:	a440010e 	bge	r20,r17,ac30 <__sfvwrite_small_dev+0x54>
    ac2c:	01c10004 	movi	r7,1024
    ac30:	8140008f 	ldh	r5,2(r16)
    ac34:	900d883a 	mov	r6,r18
    ac38:	9809883a 	mov	r4,r19
    ac3c:	000ace80 	call	ace8 <_write_r>
    ac40:	0080050e 	bge	zero,r2,ac58 <__sfvwrite_small_dev+0x7c>
    ac44:	88a3c83a 	sub	r17,r17,r2
    ac48:	90a5883a 	add	r18,r18,r2
    ac4c:	003ff406 	br	ac20 <__alt_mem_epcs_flash_controller+0xfe001c20>
    ac50:	0005883a 	mov	r2,zero
    ac54:	00000706 	br	ac74 <__sfvwrite_small_dev+0x98>
    ac58:	8080000b 	ldhu	r2,0(r16)
    ac5c:	10801014 	ori	r2,r2,64
    ac60:	8080000d 	sth	r2,0(r16)
    ac64:	00bfffc4 	movi	r2,-1
    ac68:	00000206 	br	ac74 <__sfvwrite_small_dev+0x98>
    ac6c:	00bfffc4 	movi	r2,-1
    ac70:	f800283a 	ret
    ac74:	dfc00517 	ldw	ra,20(sp)
    ac78:	dd000417 	ldw	r20,16(sp)
    ac7c:	dcc00317 	ldw	r19,12(sp)
    ac80:	dc800217 	ldw	r18,8(sp)
    ac84:	dc400117 	ldw	r17,4(sp)
    ac88:	dc000017 	ldw	r16,0(sp)
    ac8c:	dec00604 	addi	sp,sp,24
    ac90:	f800283a 	ret

0000ac94 <_gettimeofday_r>:
    ac94:	defffd04 	addi	sp,sp,-12
    ac98:	dc000015 	stw	r16,0(sp)
    ac9c:	040000b4 	movhi	r16,2
    aca0:	dc400115 	stw	r17,4(sp)
    aca4:	8427c204 	addi	r16,r16,-24824
    aca8:	2023883a 	mov	r17,r4
    acac:	2809883a 	mov	r4,r5
    acb0:	300b883a 	mov	r5,r6
    acb4:	dfc00215 	stw	ra,8(sp)
    acb8:	80000015 	stw	zero,0(r16)
    acbc:	000b0000 	call	b000 <gettimeofday>
    acc0:	00ffffc4 	movi	r3,-1
    acc4:	10c0031e 	bne	r2,r3,acd4 <_gettimeofday_r+0x40>
    acc8:	80c00017 	ldw	r3,0(r16)
    accc:	18000126 	beq	r3,zero,acd4 <_gettimeofday_r+0x40>
    acd0:	88c00015 	stw	r3,0(r17)
    acd4:	dfc00217 	ldw	ra,8(sp)
    acd8:	dc400117 	ldw	r17,4(sp)
    acdc:	dc000017 	ldw	r16,0(sp)
    ace0:	dec00304 	addi	sp,sp,12
    ace4:	f800283a 	ret

0000ace8 <_write_r>:
    ace8:	defffd04 	addi	sp,sp,-12
    acec:	dc000015 	stw	r16,0(sp)
    acf0:	040000b4 	movhi	r16,2
    acf4:	dc400115 	stw	r17,4(sp)
    acf8:	8427c204 	addi	r16,r16,-24824
    acfc:	2023883a 	mov	r17,r4
    ad00:	2809883a 	mov	r4,r5
    ad04:	300b883a 	mov	r5,r6
    ad08:	380d883a 	mov	r6,r7
    ad0c:	dfc00215 	stw	ra,8(sp)
    ad10:	80000015 	stw	zero,0(r16)
    ad14:	000b5ec0 	call	b5ec <write>
    ad18:	00ffffc4 	movi	r3,-1
    ad1c:	10c0031e 	bne	r2,r3,ad2c <_write_r+0x44>
    ad20:	80c00017 	ldw	r3,0(r16)
    ad24:	18000126 	beq	r3,zero,ad2c <_write_r+0x44>
    ad28:	88c00015 	stw	r3,0(r17)
    ad2c:	dfc00217 	ldw	ra,8(sp)
    ad30:	dc400117 	ldw	r17,4(sp)
    ad34:	dc000017 	ldw	r16,0(sp)
    ad38:	dec00304 	addi	sp,sp,12
    ad3c:	f800283a 	ret

0000ad40 <__muldi3>:
    ad40:	defff604 	addi	sp,sp,-40
    ad44:	dd800615 	stw	r22,24(sp)
    ad48:	dd400515 	stw	r21,20(sp)
    ad4c:	dc400115 	stw	r17,4(sp)
    ad50:	357fffcc 	andi	r21,r6,65535
    ad54:	2022d43a 	srli	r17,r4,16
    ad58:	25bfffcc 	andi	r22,r4,65535
    ad5c:	dcc00315 	stw	r19,12(sp)
    ad60:	dc800215 	stw	r18,8(sp)
    ad64:	2027883a 	mov	r19,r4
    ad68:	2825883a 	mov	r18,r5
    ad6c:	b009883a 	mov	r4,r22
    ad70:	a80b883a 	mov	r5,r21
    ad74:	dfc00915 	stw	ra,36(sp)
    ad78:	df000815 	stw	fp,32(sp)
    ad7c:	ddc00715 	stw	r23,28(sp)
    ad80:	3839883a 	mov	fp,r7
    ad84:	302ed43a 	srli	r23,r6,16
    ad88:	dd000415 	stw	r20,16(sp)
    ad8c:	dc000015 	stw	r16,0(sp)
    ad90:	3029883a 	mov	r20,r6
    ad94:	000a0a40 	call	a0a4 <__mulsi3>
    ad98:	a80b883a 	mov	r5,r21
    ad9c:	8809883a 	mov	r4,r17
    ada0:	1021883a 	mov	r16,r2
    ada4:	000a0a40 	call	a0a4 <__mulsi3>
    ada8:	8809883a 	mov	r4,r17
    adac:	b80b883a 	mov	r5,r23
    adb0:	102b883a 	mov	r21,r2
    adb4:	000a0a40 	call	a0a4 <__mulsi3>
    adb8:	b80b883a 	mov	r5,r23
    adbc:	b009883a 	mov	r4,r22
    adc0:	1023883a 	mov	r17,r2
    adc4:	000a0a40 	call	a0a4 <__mulsi3>
    adc8:	8006d43a 	srli	r3,r16,16
    adcc:	1545883a 	add	r2,r2,r21
    add0:	1885883a 	add	r2,r3,r2
    add4:	1540022e 	bgeu	r2,r21,ade0 <__muldi3+0xa0>
    add8:	00c00074 	movhi	r3,1
    addc:	88e3883a 	add	r17,r17,r3
    ade0:	1006d43a 	srli	r3,r2,16
    ade4:	1004943a 	slli	r2,r2,16
    ade8:	e00b883a 	mov	r5,fp
    adec:	9809883a 	mov	r4,r19
    adf0:	843fffcc 	andi	r16,r16,65535
    adf4:	1c63883a 	add	r17,r3,r17
    adf8:	1421883a 	add	r16,r2,r16
    adfc:	000a0a40 	call	a0a4 <__mulsi3>
    ae00:	900b883a 	mov	r5,r18
    ae04:	a009883a 	mov	r4,r20
    ae08:	1027883a 	mov	r19,r2
    ae0c:	000a0a40 	call	a0a4 <__mulsi3>
    ae10:	9885883a 	add	r2,r19,r2
    ae14:	1447883a 	add	r3,r2,r17
    ae18:	8005883a 	mov	r2,r16
    ae1c:	dfc00917 	ldw	ra,36(sp)
    ae20:	df000817 	ldw	fp,32(sp)
    ae24:	ddc00717 	ldw	r23,28(sp)
    ae28:	dd800617 	ldw	r22,24(sp)
    ae2c:	dd400517 	ldw	r21,20(sp)
    ae30:	dd000417 	ldw	r20,16(sp)
    ae34:	dcc00317 	ldw	r19,12(sp)
    ae38:	dc800217 	ldw	r18,8(sp)
    ae3c:	dc400117 	ldw	r17,4(sp)
    ae40:	dc000017 	ldw	r16,0(sp)
    ae44:	dec00a04 	addi	sp,sp,40
    ae48:	f800283a 	ret

0000ae4c <__divsi3>:
    ae4c:	20001b16 	blt	r4,zero,aebc <__divsi3+0x70>
    ae50:	000f883a 	mov	r7,zero
    ae54:	28001616 	blt	r5,zero,aeb0 <__divsi3+0x64>
    ae58:	200d883a 	mov	r6,r4
    ae5c:	29001a2e 	bgeu	r5,r4,aec8 <__divsi3+0x7c>
    ae60:	00800804 	movi	r2,32
    ae64:	00c00044 	movi	r3,1
    ae68:	00000106 	br	ae70 <__divsi3+0x24>
    ae6c:	10000d26 	beq	r2,zero,aea4 <__divsi3+0x58>
    ae70:	294b883a 	add	r5,r5,r5
    ae74:	10bfffc4 	addi	r2,r2,-1
    ae78:	18c7883a 	add	r3,r3,r3
    ae7c:	293ffb36 	bltu	r5,r4,ae6c <__alt_mem_epcs_flash_controller+0xfe001e6c>
    ae80:	0005883a 	mov	r2,zero
    ae84:	18000726 	beq	r3,zero,aea4 <__divsi3+0x58>
    ae88:	0005883a 	mov	r2,zero
    ae8c:	31400236 	bltu	r6,r5,ae98 <__divsi3+0x4c>
    ae90:	314dc83a 	sub	r6,r6,r5
    ae94:	10c4b03a 	or	r2,r2,r3
    ae98:	1806d07a 	srli	r3,r3,1
    ae9c:	280ad07a 	srli	r5,r5,1
    aea0:	183ffa1e 	bne	r3,zero,ae8c <__alt_mem_epcs_flash_controller+0xfe001e8c>
    aea4:	38000126 	beq	r7,zero,aeac <__divsi3+0x60>
    aea8:	0085c83a 	sub	r2,zero,r2
    aeac:	f800283a 	ret
    aeb0:	014bc83a 	sub	r5,zero,r5
    aeb4:	39c0005c 	xori	r7,r7,1
    aeb8:	003fe706 	br	ae58 <__alt_mem_epcs_flash_controller+0xfe001e58>
    aebc:	0109c83a 	sub	r4,zero,r4
    aec0:	01c00044 	movi	r7,1
    aec4:	003fe306 	br	ae54 <__alt_mem_epcs_flash_controller+0xfe001e54>
    aec8:	00c00044 	movi	r3,1
    aecc:	003fee06 	br	ae88 <__alt_mem_epcs_flash_controller+0xfe001e88>

0000aed0 <__modsi3>:
    aed0:	20001716 	blt	r4,zero,af30 <__modsi3+0x60>
    aed4:	000f883a 	mov	r7,zero
    aed8:	2005883a 	mov	r2,r4
    aedc:	28001216 	blt	r5,zero,af28 <__modsi3+0x58>
    aee0:	2900162e 	bgeu	r5,r4,af3c <__modsi3+0x6c>
    aee4:	01800804 	movi	r6,32
    aee8:	00c00044 	movi	r3,1
    aeec:	00000106 	br	aef4 <__modsi3+0x24>
    aef0:	30000a26 	beq	r6,zero,af1c <__modsi3+0x4c>
    aef4:	294b883a 	add	r5,r5,r5
    aef8:	31bfffc4 	addi	r6,r6,-1
    aefc:	18c7883a 	add	r3,r3,r3
    af00:	293ffb36 	bltu	r5,r4,aef0 <__alt_mem_epcs_flash_controller+0xfe001ef0>
    af04:	18000526 	beq	r3,zero,af1c <__modsi3+0x4c>
    af08:	1806d07a 	srli	r3,r3,1
    af0c:	11400136 	bltu	r2,r5,af14 <__modsi3+0x44>
    af10:	1145c83a 	sub	r2,r2,r5
    af14:	280ad07a 	srli	r5,r5,1
    af18:	183ffb1e 	bne	r3,zero,af08 <__alt_mem_epcs_flash_controller+0xfe001f08>
    af1c:	38000126 	beq	r7,zero,af24 <__modsi3+0x54>
    af20:	0085c83a 	sub	r2,zero,r2
    af24:	f800283a 	ret
    af28:	014bc83a 	sub	r5,zero,r5
    af2c:	003fec06 	br	aee0 <__alt_mem_epcs_flash_controller+0xfe001ee0>
    af30:	0109c83a 	sub	r4,zero,r4
    af34:	01c00044 	movi	r7,1
    af38:	003fe706 	br	aed8 <__alt_mem_epcs_flash_controller+0xfe001ed8>
    af3c:	00c00044 	movi	r3,1
    af40:	003ff106 	br	af08 <__alt_mem_epcs_flash_controller+0xfe001f08>

0000af44 <__udivsi3>:
    af44:	200d883a 	mov	r6,r4
    af48:	2900152e 	bgeu	r5,r4,afa0 <__udivsi3+0x5c>
    af4c:	28001416 	blt	r5,zero,afa0 <__udivsi3+0x5c>
    af50:	00800804 	movi	r2,32
    af54:	00c00044 	movi	r3,1
    af58:	00000206 	br	af64 <__udivsi3+0x20>
    af5c:	10000e26 	beq	r2,zero,af98 <__udivsi3+0x54>
    af60:	28000516 	blt	r5,zero,af78 <__udivsi3+0x34>
    af64:	294b883a 	add	r5,r5,r5
    af68:	10bfffc4 	addi	r2,r2,-1
    af6c:	18c7883a 	add	r3,r3,r3
    af70:	293ffa36 	bltu	r5,r4,af5c <__alt_mem_epcs_flash_controller+0xfe001f5c>
    af74:	18000826 	beq	r3,zero,af98 <__udivsi3+0x54>
    af78:	0005883a 	mov	r2,zero
    af7c:	31400236 	bltu	r6,r5,af88 <__udivsi3+0x44>
    af80:	314dc83a 	sub	r6,r6,r5
    af84:	10c4b03a 	or	r2,r2,r3
    af88:	1806d07a 	srli	r3,r3,1
    af8c:	280ad07a 	srli	r5,r5,1
    af90:	183ffa1e 	bne	r3,zero,af7c <__alt_mem_epcs_flash_controller+0xfe001f7c>
    af94:	f800283a 	ret
    af98:	0005883a 	mov	r2,zero
    af9c:	f800283a 	ret
    afa0:	00c00044 	movi	r3,1
    afa4:	003ff406 	br	af78 <__alt_mem_epcs_flash_controller+0xfe001f78>

0000afa8 <__umodsi3>:
    afa8:	2005883a 	mov	r2,r4
    afac:	2900122e 	bgeu	r5,r4,aff8 <__umodsi3+0x50>
    afb0:	28001116 	blt	r5,zero,aff8 <__umodsi3+0x50>
    afb4:	01800804 	movi	r6,32
    afb8:	00c00044 	movi	r3,1
    afbc:	00000206 	br	afc8 <__umodsi3+0x20>
    afc0:	30000c26 	beq	r6,zero,aff4 <__umodsi3+0x4c>
    afc4:	28000516 	blt	r5,zero,afdc <__umodsi3+0x34>
    afc8:	294b883a 	add	r5,r5,r5
    afcc:	31bfffc4 	addi	r6,r6,-1
    afd0:	18c7883a 	add	r3,r3,r3
    afd4:	293ffa36 	bltu	r5,r4,afc0 <__alt_mem_epcs_flash_controller+0xfe001fc0>
    afd8:	18000626 	beq	r3,zero,aff4 <__umodsi3+0x4c>
    afdc:	1806d07a 	srli	r3,r3,1
    afe0:	11400136 	bltu	r2,r5,afe8 <__umodsi3+0x40>
    afe4:	1145c83a 	sub	r2,r2,r5
    afe8:	280ad07a 	srli	r5,r5,1
    afec:	183ffb1e 	bne	r3,zero,afdc <__alt_mem_epcs_flash_controller+0xfe001fdc>
    aff0:	f800283a 	ret
    aff4:	f800283a 	ret
    aff8:	00c00044 	movi	r3,1
    affc:	003ff706 	br	afdc <__alt_mem_epcs_flash_controller+0xfe001fdc>

0000b000 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    b000:	defff404 	addi	sp,sp,-48
    b004:	dfc00b15 	stw	ra,44(sp)
    b008:	df000a15 	stw	fp,40(sp)
    b00c:	dd000915 	stw	r20,36(sp)
    b010:	dcc00815 	stw	r19,32(sp)
    b014:	dc800715 	stw	r18,28(sp)
    b018:	dc400615 	stw	r17,24(sp)
    b01c:	dc000515 	stw	r16,20(sp)
    b020:	df000a04 	addi	fp,sp,40
    b024:	e13ff915 	stw	r4,-28(fp)
    b028:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    b02c:	e0bffa17 	ldw	r2,-24(fp)
    b030:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b034:	d0a51b17 	ldw	r2,-27540(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    b038:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b03c:	d0a51a17 	ldw	r2,-27544(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
    b040:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    b044:	e0bff817 	ldw	r2,-32(fp)
    b048:	10005f26 	beq	r2,zero,b1c8 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    b04c:	d0a51517 	ldw	r2,-27564(gp)
    b050:	1029883a 	mov	r20,r2
    b054:	e17ff817 	ldw	r5,-32(fp)
    b058:	e13ff717 	ldw	r4,-36(fp)
    b05c:	000af440 	call	af44 <__udivsi3>
    b060:	a085883a 	add	r2,r20,r2
    b064:	1007883a 	mov	r3,r2
    b068:	e0bff917 	ldw	r2,-28(fp)
    b06c:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    b070:	d0a51617 	ldw	r2,-27560(gp)
    b074:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    b078:	e0bff717 	ldw	r2,-36(fp)
    b07c:	1021883a 	mov	r16,r2
    b080:	0023883a 	mov	r17,zero
    b084:	e17ff817 	ldw	r5,-32(fp)
    b088:	010003f4 	movhi	r4,15
    b08c:	21109004 	addi	r4,r4,16960
    b090:	000af440 	call	af44 <__udivsi3>
    b094:	1025883a 	mov	r18,r2
    b098:	0027883a 	mov	r19,zero
    b09c:	900d883a 	mov	r6,r18
    b0a0:	980f883a 	mov	r7,r19
    b0a4:	8009883a 	mov	r4,r16
    b0a8:	880b883a 	mov	r5,r17
    b0ac:	000ad400 	call	ad40 <__muldi3>
    b0b0:	1009883a 	mov	r4,r2
    b0b4:	180b883a 	mov	r5,r3
    b0b8:	2005883a 	mov	r2,r4
    b0bc:	2807883a 	mov	r3,r5
    b0c0:	018003f4 	movhi	r6,15
    b0c4:	31909004 	addi	r6,r6,16960
    b0c8:	000f883a 	mov	r7,zero
    b0cc:	1009883a 	mov	r4,r2
    b0d0:	180b883a 	mov	r5,r3
    b0d4:	000e7c40 	call	e7c4 <__umoddi3>
    b0d8:	1009883a 	mov	r4,r2
    b0dc:	180b883a 	mov	r5,r3
    b0e0:	2005883a 	mov	r2,r4
    b0e4:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    b0e8:	a085883a 	add	r2,r20,r2
    b0ec:	1007883a 	mov	r3,r2
    b0f0:	e0bff917 	ldw	r2,-28(fp)
    b0f4:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    b0f8:	00001406 	br	b14c <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
    b0fc:	e0bff917 	ldw	r2,-28(fp)
    b100:	10800017 	ldw	r2,0(r2)
    b104:	00800516 	blt	zero,r2,b11c <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
    b108:	e0bff917 	ldw	r2,-28(fp)
    b10c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
    b110:	e0bff917 	ldw	r2,-28(fp)
    b114:	10000115 	stw	zero,4(r2)
          break;
    b118:	00000f06 	br	b158 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
    b11c:	e0bff917 	ldw	r2,-28(fp)
    b120:	10800017 	ldw	r2,0(r2)
    b124:	10ffffc4 	addi	r3,r2,-1
    b128:	e0bff917 	ldw	r2,-28(fp)
    b12c:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
    b130:	e0bff917 	ldw	r2,-28(fp)
    b134:	10c00117 	ldw	r3,4(r2)
    b138:	008003f4 	movhi	r2,15
    b13c:	10909004 	addi	r2,r2,16960
    b140:	1887883a 	add	r3,r3,r2
    b144:	e0bff917 	ldw	r2,-28(fp)
    b148:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    b14c:	e0bff917 	ldw	r2,-28(fp)
    b150:	10800117 	ldw	r2,4(r2)
    b154:	103fe916 	blt	r2,zero,b0fc <__alt_mem_epcs_flash_controller+0xfe0020fc>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    b158:	00000c06 	br	b18c <gettimeofday+0x18c>
      ptimeval->tv_sec++;
    b15c:	e0bff917 	ldw	r2,-28(fp)
    b160:	10800017 	ldw	r2,0(r2)
    b164:	10c00044 	addi	r3,r2,1
    b168:	e0bff917 	ldw	r2,-28(fp)
    b16c:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
    b170:	e0bff917 	ldw	r2,-28(fp)
    b174:	10c00117 	ldw	r3,4(r2)
    b178:	00bffc74 	movhi	r2,65521
    b17c:	10af7004 	addi	r2,r2,-16960
    b180:	1887883a 	add	r3,r3,r2
    b184:	e0bff917 	ldw	r2,-28(fp)
    b188:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    b18c:	e0bff917 	ldw	r2,-28(fp)
    b190:	10c00117 	ldw	r3,4(r2)
    b194:	008003f4 	movhi	r2,15
    b198:	10908fc4 	addi	r2,r2,16959
    b19c:	10ffef16 	blt	r2,r3,b15c <__alt_mem_epcs_flash_controller+0xfe00215c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    b1a0:	e0bff617 	ldw	r2,-40(fp)
    b1a4:	10000626 	beq	r2,zero,b1c0 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    b1a8:	d0e51317 	ldw	r3,-27572(gp)
    b1ac:	e0bff617 	ldw	r2,-40(fp)
    b1b0:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    b1b4:	d0e51417 	ldw	r3,-27568(gp)
    b1b8:	e0bff617 	ldw	r2,-40(fp)
    b1bc:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    b1c0:	0005883a 	mov	r2,zero
    b1c4:	00000106 	br	b1cc <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
    b1c8:	00bfde84 	movi	r2,-134
}
    b1cc:	e6fffb04 	addi	sp,fp,-20
    b1d0:	dfc00617 	ldw	ra,24(sp)
    b1d4:	df000517 	ldw	fp,20(sp)
    b1d8:	dd000417 	ldw	r20,16(sp)
    b1dc:	dcc00317 	ldw	r19,12(sp)
    b1e0:	dc800217 	ldw	r18,8(sp)
    b1e4:	dc400117 	ldw	r17,4(sp)
    b1e8:	dc000017 	ldw	r16,0(sp)
    b1ec:	dec00704 	addi	sp,sp,28
    b1f0:	f800283a 	ret

0000b1f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b1f4:	defffc04 	addi	sp,sp,-16
    b1f8:	df000315 	stw	fp,12(sp)
    b1fc:	df000304 	addi	fp,sp,12
    b200:	e13ffd15 	stw	r4,-12(fp)
    b204:	e17ffe15 	stw	r5,-8(fp)
    b208:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b20c:	e0fffe17 	ldw	r3,-8(fp)
    b210:	e0bffd17 	ldw	r2,-12(fp)
    b214:	18800c26 	beq	r3,r2,b248 <alt_load_section+0x54>
  {
    while( to != end )
    b218:	00000806 	br	b23c <alt_load_section+0x48>
    {
      *to++ = *from++;
    b21c:	e0bffe17 	ldw	r2,-8(fp)
    b220:	10c00104 	addi	r3,r2,4
    b224:	e0fffe15 	stw	r3,-8(fp)
    b228:	e0fffd17 	ldw	r3,-12(fp)
    b22c:	19000104 	addi	r4,r3,4
    b230:	e13ffd15 	stw	r4,-12(fp)
    b234:	18c00017 	ldw	r3,0(r3)
    b238:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b23c:	e0fffe17 	ldw	r3,-8(fp)
    b240:	e0bfff17 	ldw	r2,-4(fp)
    b244:	18bff51e 	bne	r3,r2,b21c <__alt_mem_epcs_flash_controller+0xfe00221c>
    {
      *to++ = *from++;
    }
  }
}
    b248:	0001883a 	nop
    b24c:	e037883a 	mov	sp,fp
    b250:	df000017 	ldw	fp,0(sp)
    b254:	dec00104 	addi	sp,sp,4
    b258:	f800283a 	ret

0000b25c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b25c:	defffe04 	addi	sp,sp,-8
    b260:	dfc00115 	stw	ra,4(sp)
    b264:	df000015 	stw	fp,0(sp)
    b268:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b26c:	018000b4 	movhi	r6,2
    b270:	31a2bf04 	addi	r6,r6,-29956
    b274:	01400074 	movhi	r5,1
    b278:	295dc304 	addi	r5,r5,30476
    b27c:	010000b4 	movhi	r4,2
    b280:	2122bf04 	addi	r4,r4,-29956
    b284:	000b1f40 	call	b1f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b288:	01800034 	movhi	r6,0
    b28c:	31808c04 	addi	r6,r6,560
    b290:	01400034 	movhi	r5,0
    b294:	29400804 	addi	r5,r5,32
    b298:	01000034 	movhi	r4,0
    b29c:	21000804 	addi	r4,r4,32
    b2a0:	000b1f40 	call	b1f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b2a4:	01800074 	movhi	r6,1
    b2a8:	319dc304 	addi	r6,r6,30476
    b2ac:	01400074 	movhi	r5,1
    b2b0:	297b6f04 	addi	r5,r5,-4676
    b2b4:	01000074 	movhi	r4,1
    b2b8:	213b6f04 	addi	r4,r4,-4676
    b2bc:	000b1f40 	call	b1f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b2c0:	000d5900 	call	d590 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b2c4:	000d8380 	call	d838 <alt_icache_flush_all>
}
    b2c8:	0001883a 	nop
    b2cc:	e037883a 	mov	sp,fp
    b2d0:	dfc00117 	ldw	ra,4(sp)
    b2d4:	df000017 	ldw	fp,0(sp)
    b2d8:	dec00204 	addi	sp,sp,8
    b2dc:	f800283a 	ret

0000b2e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b2e0:	defffd04 	addi	sp,sp,-12
    b2e4:	dfc00215 	stw	ra,8(sp)
    b2e8:	df000115 	stw	fp,4(sp)
    b2ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b2f0:	0009883a 	mov	r4,zero
    b2f4:	000b7200 	call	b720 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b2f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b2fc:	000b7580 	call	b758 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b300:	01800074 	movhi	r6,1
    b304:	319d7104 	addi	r6,r6,30148
    b308:	01400074 	movhi	r5,1
    b30c:	295d7104 	addi	r5,r5,30148
    b310:	01000074 	movhi	r4,1
    b314:	211d7104 	addi	r4,r4,30148
    b318:	000dbdc0 	call	dbdc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b31c:	000d6bc0 	call	d6bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b320:	01000074 	movhi	r4,1
    b324:	2135c704 	addi	r4,r4,-10468
    b328:	000e4780 	call	e478 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b32c:	d0a51717 	ldw	r2,-27556(gp)
    b330:	d0e51817 	ldw	r3,-27552(gp)
    b334:	d1251917 	ldw	r4,-27548(gp)
    b338:	200d883a 	mov	r6,r4
    b33c:	180b883a 	mov	r5,r3
    b340:	1009883a 	mov	r4,r2
    b344:	0009f300 	call	9f30 <main>
    b348:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b34c:	01000044 	movi	r4,1
    b350:	000d4b80 	call	d4b8 <close>
  exit (result);
    b354:	e13fff17 	ldw	r4,-4(fp)
    b358:	000e48c0 	call	e48c <exit>

0000b35c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b35c:	defff904 	addi	sp,sp,-28
    b360:	df000615 	stw	fp,24(sp)
    b364:	df000604 	addi	fp,sp,24
    b368:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b36c:	0005303a 	rdctl	r2,status
    b370:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b374:	e0fffe17 	ldw	r3,-8(fp)
    b378:	00bfff84 	movi	r2,-2
    b37c:	1884703a 	and	r2,r3,r2
    b380:	1001703a 	wrctl	status,r2
  
  return context;
    b384:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b388:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b38c:	d0a00317 	ldw	r2,-32756(gp)
    b390:	10c000c4 	addi	r3,r2,3
    b394:	00bfff04 	movi	r2,-4
    b398:	1884703a 	and	r2,r3,r2
    b39c:	d0a00315 	stw	r2,-32756(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b3a0:	d0e00317 	ldw	r3,-32756(gp)
    b3a4:	e0bfff17 	ldw	r2,-4(fp)
    b3a8:	1887883a 	add	r3,r3,r2
    b3ac:	00808034 	movhi	r2,512
    b3b0:	10800004 	addi	r2,r2,0
    b3b4:	10c0062e 	bgeu	r2,r3,b3d0 <sbrk+0x74>
    b3b8:	e0bffb17 	ldw	r2,-20(fp)
    b3bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3c0:	e0bffa17 	ldw	r2,-24(fp)
    b3c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b3c8:	00bfffc4 	movi	r2,-1
    b3cc:	00000b06 	br	b3fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    b3d0:	d0a00317 	ldw	r2,-32756(gp)
    b3d4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    b3d8:	d0e00317 	ldw	r3,-32756(gp)
    b3dc:	e0bfff17 	ldw	r2,-4(fp)
    b3e0:	1885883a 	add	r2,r3,r2
    b3e4:	d0a00315 	stw	r2,-32756(gp)
    b3e8:	e0bffb17 	ldw	r2,-20(fp)
    b3ec:	e0bffc15 	stw	r2,-16(fp)
    b3f0:	e0bffc17 	ldw	r2,-16(fp)
    b3f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b3f8:	e0bffd17 	ldw	r2,-12(fp)
} 
    b3fc:	e037883a 	mov	sp,fp
    b400:	df000017 	ldw	fp,0(sp)
    b404:	dec00104 	addi	sp,sp,4
    b408:	f800283a 	ret

0000b40c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b40c:	defffa04 	addi	sp,sp,-24
    b410:	df000515 	stw	fp,20(sp)
    b414:	df000504 	addi	fp,sp,20
    b418:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b41c:	0005303a 	rdctl	r2,status
    b420:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b424:	e0fffc17 	ldw	r3,-16(fp)
    b428:	00bfff84 	movi	r2,-2
    b42c:	1884703a 	and	r2,r3,r2
    b430:	1001703a 	wrctl	status,r2
  
  return context;
    b434:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b438:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    b43c:	e0bfff17 	ldw	r2,-4(fp)
    b440:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b444:	e0bffd17 	ldw	r2,-12(fp)
    b448:	10800017 	ldw	r2,0(r2)
    b44c:	e0fffd17 	ldw	r3,-12(fp)
    b450:	18c00117 	ldw	r3,4(r3)
    b454:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    b458:	e0bffd17 	ldw	r2,-12(fp)
    b45c:	10800117 	ldw	r2,4(r2)
    b460:	e0fffd17 	ldw	r3,-12(fp)
    b464:	18c00017 	ldw	r3,0(r3)
    b468:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b46c:	e0bffd17 	ldw	r2,-12(fp)
    b470:	e0fffd17 	ldw	r3,-12(fp)
    b474:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    b478:	e0bffd17 	ldw	r2,-12(fp)
    b47c:	e0fffd17 	ldw	r3,-12(fp)
    b480:	10c00015 	stw	r3,0(r2)
    b484:	e0bffb17 	ldw	r2,-20(fp)
    b488:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b48c:	e0bffe17 	ldw	r2,-8(fp)
    b490:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    b494:	0001883a 	nop
    b498:	e037883a 	mov	sp,fp
    b49c:	df000017 	ldw	fp,0(sp)
    b4a0:	dec00104 	addi	sp,sp,4
    b4a4:	f800283a 	ret

0000b4a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b4a8:	defffb04 	addi	sp,sp,-20
    b4ac:	dfc00415 	stw	ra,16(sp)
    b4b0:	df000315 	stw	fp,12(sp)
    b4b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b4b8:	d0a00417 	ldw	r2,-32752(gp)
    b4bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b4c0:	d0a51b17 	ldw	r2,-27540(gp)
    b4c4:	10800044 	addi	r2,r2,1
    b4c8:	d0a51b15 	stw	r2,-27540(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b4cc:	00002e06 	br	b588 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    b4d0:	e0bffd17 	ldw	r2,-12(fp)
    b4d4:	10800017 	ldw	r2,0(r2)
    b4d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    b4dc:	e0bffd17 	ldw	r2,-12(fp)
    b4e0:	10800403 	ldbu	r2,16(r2)
    b4e4:	10803fcc 	andi	r2,r2,255
    b4e8:	10000426 	beq	r2,zero,b4fc <alt_tick+0x54>
    b4ec:	d0a51b17 	ldw	r2,-27540(gp)
    b4f0:	1000021e 	bne	r2,zero,b4fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
    b4f4:	e0bffd17 	ldw	r2,-12(fp)
    b4f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    b4fc:	e0bffd17 	ldw	r2,-12(fp)
    b500:	10800217 	ldw	r2,8(r2)
    b504:	d0e51b17 	ldw	r3,-27540(gp)
    b508:	18801d36 	bltu	r3,r2,b580 <alt_tick+0xd8>
    b50c:	e0bffd17 	ldw	r2,-12(fp)
    b510:	10800403 	ldbu	r2,16(r2)
    b514:	10803fcc 	andi	r2,r2,255
    b518:	1000191e 	bne	r2,zero,b580 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    b51c:	e0bffd17 	ldw	r2,-12(fp)
    b520:	10800317 	ldw	r2,12(r2)
    b524:	e0fffd17 	ldw	r3,-12(fp)
    b528:	18c00517 	ldw	r3,20(r3)
    b52c:	1809883a 	mov	r4,r3
    b530:	103ee83a 	callr	r2
    b534:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b538:	e0bfff17 	ldw	r2,-4(fp)
    b53c:	1000031e 	bne	r2,zero,b54c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    b540:	e13ffd17 	ldw	r4,-12(fp)
    b544:	000b40c0 	call	b40c <alt_alarm_stop>
    b548:	00000d06 	br	b580 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    b54c:	e0bffd17 	ldw	r2,-12(fp)
    b550:	10c00217 	ldw	r3,8(r2)
    b554:	e0bfff17 	ldw	r2,-4(fp)
    b558:	1887883a 	add	r3,r3,r2
    b55c:	e0bffd17 	ldw	r2,-12(fp)
    b560:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    b564:	e0bffd17 	ldw	r2,-12(fp)
    b568:	10c00217 	ldw	r3,8(r2)
    b56c:	d0a51b17 	ldw	r2,-27540(gp)
    b570:	1880032e 	bgeu	r3,r2,b580 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    b574:	e0bffd17 	ldw	r2,-12(fp)
    b578:	00c00044 	movi	r3,1
    b57c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    b580:	e0bffe17 	ldw	r2,-8(fp)
    b584:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b588:	e0fffd17 	ldw	r3,-12(fp)
    b58c:	d0a00404 	addi	r2,gp,-32752
    b590:	18bfcf1e 	bne	r3,r2,b4d0 <__alt_mem_epcs_flash_controller+0xfe0024d0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    b594:	0001883a 	nop
}
    b598:	0001883a 	nop
    b59c:	e037883a 	mov	sp,fp
    b5a0:	dfc00117 	ldw	ra,4(sp)
    b5a4:	df000017 	ldw	fp,0(sp)
    b5a8:	dec00204 	addi	sp,sp,8
    b5ac:	f800283a 	ret

0000b5b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b5b0:	defffe04 	addi	sp,sp,-8
    b5b4:	dfc00115 	stw	ra,4(sp)
    b5b8:	df000015 	stw	fp,0(sp)
    b5bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b5c0:	d0a00b17 	ldw	r2,-32724(gp)
    b5c4:	10000326 	beq	r2,zero,b5d4 <alt_get_errno+0x24>
    b5c8:	d0a00b17 	ldw	r2,-32724(gp)
    b5cc:	103ee83a 	callr	r2
    b5d0:	00000106 	br	b5d8 <alt_get_errno+0x28>
    b5d4:	d0a51204 	addi	r2,gp,-27576
}
    b5d8:	e037883a 	mov	sp,fp
    b5dc:	dfc00117 	ldw	ra,4(sp)
    b5e0:	df000017 	ldw	fp,0(sp)
    b5e4:	dec00204 	addi	sp,sp,8
    b5e8:	f800283a 	ret

0000b5ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b5ec:	defff904 	addi	sp,sp,-28
    b5f0:	dfc00615 	stw	ra,24(sp)
    b5f4:	df000515 	stw	fp,20(sp)
    b5f8:	df000504 	addi	fp,sp,20
    b5fc:	e13ffd15 	stw	r4,-12(fp)
    b600:	e17ffe15 	stw	r5,-8(fp)
    b604:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b608:	e0bffd17 	ldw	r2,-12(fp)
    b60c:	10000816 	blt	r2,zero,b630 <write+0x44>
    b610:	01400304 	movi	r5,12
    b614:	e13ffd17 	ldw	r4,-12(fp)
    b618:	000a0a40 	call	a0a4 <__mulsi3>
    b61c:	1007883a 	mov	r3,r2
    b620:	008000b4 	movhi	r2,2
    b624:	10a25004 	addi	r2,r2,-30400
    b628:	1885883a 	add	r2,r3,r2
    b62c:	00000106 	br	b634 <write+0x48>
    b630:	0005883a 	mov	r2,zero
    b634:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b638:	e0bffb17 	ldw	r2,-20(fp)
    b63c:	10002126 	beq	r2,zero,b6c4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b640:	e0bffb17 	ldw	r2,-20(fp)
    b644:	10800217 	ldw	r2,8(r2)
    b648:	108000cc 	andi	r2,r2,3
    b64c:	10001826 	beq	r2,zero,b6b0 <write+0xc4>
    b650:	e0bffb17 	ldw	r2,-20(fp)
    b654:	10800017 	ldw	r2,0(r2)
    b658:	10800617 	ldw	r2,24(r2)
    b65c:	10001426 	beq	r2,zero,b6b0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b660:	e0bffb17 	ldw	r2,-20(fp)
    b664:	10800017 	ldw	r2,0(r2)
    b668:	10800617 	ldw	r2,24(r2)
    b66c:	e0ffff17 	ldw	r3,-4(fp)
    b670:	180d883a 	mov	r6,r3
    b674:	e17ffe17 	ldw	r5,-8(fp)
    b678:	e13ffb17 	ldw	r4,-20(fp)
    b67c:	103ee83a 	callr	r2
    b680:	e0bffc15 	stw	r2,-16(fp)
    b684:	e0bffc17 	ldw	r2,-16(fp)
    b688:	1000070e 	bge	r2,zero,b6a8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    b68c:	000b5b00 	call	b5b0 <alt_get_errno>
    b690:	1007883a 	mov	r3,r2
    b694:	e0bffc17 	ldw	r2,-16(fp)
    b698:	0085c83a 	sub	r2,zero,r2
    b69c:	18800015 	stw	r2,0(r3)
        return -1;
    b6a0:	00bfffc4 	movi	r2,-1
    b6a4:	00000c06 	br	b6d8 <write+0xec>
      }
      return rval;
    b6a8:	e0bffc17 	ldw	r2,-16(fp)
    b6ac:	00000a06 	br	b6d8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b6b0:	000b5b00 	call	b5b0 <alt_get_errno>
    b6b4:	1007883a 	mov	r3,r2
    b6b8:	00800344 	movi	r2,13
    b6bc:	18800015 	stw	r2,0(r3)
    b6c0:	00000406 	br	b6d4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b6c4:	000b5b00 	call	b5b0 <alt_get_errno>
    b6c8:	1007883a 	mov	r3,r2
    b6cc:	00801444 	movi	r2,81
    b6d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b6d4:	00bfffc4 	movi	r2,-1
}
    b6d8:	e037883a 	mov	sp,fp
    b6dc:	dfc00117 	ldw	ra,4(sp)
    b6e0:	df000017 	ldw	fp,0(sp)
    b6e4:	dec00204 	addi	sp,sp,8
    b6e8:	f800283a 	ret

0000b6ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b6ec:	defffd04 	addi	sp,sp,-12
    b6f0:	dfc00215 	stw	ra,8(sp)
    b6f4:	df000115 	stw	fp,4(sp)
    b6f8:	df000104 	addi	fp,sp,4
    b6fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b700:	d1600804 	addi	r5,gp,-32736
    b704:	e13fff17 	ldw	r4,-4(fp)
    b708:	000d6180 	call	d618 <alt_dev_llist_insert>
}
    b70c:	e037883a 	mov	sp,fp
    b710:	dfc00117 	ldw	ra,4(sp)
    b714:	df000017 	ldw	fp,0(sp)
    b718:	dec00204 	addi	sp,sp,8
    b71c:	f800283a 	ret

0000b720 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b720:	defffd04 	addi	sp,sp,-12
    b724:	dfc00215 	stw	ra,8(sp)
    b728:	df000115 	stw	fp,4(sp)
    b72c:	df000104 	addi	fp,sp,4
    b730:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    b734:	000df600 	call	df60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b738:	00800044 	movi	r2,1
    b73c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b740:	0001883a 	nop
    b744:	e037883a 	mov	sp,fp
    b748:	dfc00117 	ldw	ra,4(sp)
    b74c:	df000017 	ldw	fp,0(sp)
    b750:	dec00204 	addi	sp,sp,8
    b754:	f800283a 	ret

0000b758 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b758:	defffe04 	addi	sp,sp,-8
    b75c:	dfc00115 	stw	ra,4(sp)
    b760:	df000015 	stw	fp,0(sp)
    b764:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
    b768:	01000074 	movhi	r4,1
    b76c:	211dfb04 	addi	r4,r4,30700
    b770:	000b7e40 	call	b7e4 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    b774:	01800044 	movi	r6,1
    b778:	000b883a 	mov	r5,zero
    b77c:	01000074 	movhi	r4,1
    b780:	211e3804 	addi	r4,r4,30944
    b784:	000c4100 	call	c410 <altera_avalon_jtag_uart_init>
    b788:	01000074 	movhi	r4,1
    b78c:	211e2e04 	addi	r4,r4,30904
    b790:	000b6ec0 	call	b6ec <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    b794:	0001883a 	nop
}
    b798:	0001883a 	nop
    b79c:	e037883a 	mov	sp,fp
    b7a0:	dfc00117 	ldw	ra,4(sp)
    b7a4:	df000017 	ldw	fp,0(sp)
    b7a8:	dec00204 	addi	sp,sp,8
    b7ac:	f800283a 	ret

0000b7b0 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    b7b0:	defffd04 	addi	sp,sp,-12
    b7b4:	dfc00215 	stw	ra,8(sp)
    b7b8:	df000115 	stw	fp,4(sp)
    b7bc:	df000104 	addi	fp,sp,4
    b7c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    b7c4:	d1600c04 	addi	r5,gp,-32720
    b7c8:	e13fff17 	ldw	r4,-4(fp)
    b7cc:	000d6180 	call	d618 <alt_dev_llist_insert>
}
    b7d0:	e037883a 	mov	sp,fp
    b7d4:	dfc00117 	ldw	ra,4(sp)
    b7d8:	df000017 	ldw	fp,0(sp)
    b7dc:	dec00204 	addi	sp,sp,8
    b7e0:	f800283a 	ret

0000b7e4 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    b7e4:	defffc04 	addi	sp,sp,-16
    b7e8:	dfc00315 	stw	ra,12(sp)
    b7ec:	df000215 	stw	fp,8(sp)
    b7f0:	df000204 	addi	fp,sp,8
    b7f4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    b7f8:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    b7fc:	e13fff17 	ldw	r4,-4(fp)
    b800:	000b8380 	call	b838 <alt_epcs_flash_query>
    b804:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    b808:	e0bffe17 	ldw	r2,-8(fp)
    b80c:	1000041e 	bne	r2,zero,b820 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    b810:	e0bfff17 	ldw	r2,-4(fp)
    b814:	1009883a 	mov	r4,r2
    b818:	000b7b00 	call	b7b0 <alt_flash_device_register>
    b81c:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    b820:	e0bffe17 	ldw	r2,-8(fp)
}
    b824:	e037883a 	mov	sp,fp
    b828:	dfc00117 	ldw	ra,4(sp)
    b82c:	df000017 	ldw	fp,0(sp)
    b830:	dec00204 	addi	sp,sp,8
    b834:	f800283a 	ret

0000b838 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    b838:	defffc04 	addi	sp,sp,-16
    b83c:	dfc00315 	stw	ra,12(sp)
    b840:	df000215 	stw	fp,8(sp)
    b844:	df000204 	addi	fp,sp,8
    b848:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    b84c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    b850:	e0bfff17 	ldw	r2,-4(fp)
    b854:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
    b858:	e0bfff17 	ldw	r2,-4(fp)
    b85c:	10802e17 	ldw	r2,184(r2)
    b860:	1009883a 	mov	r4,r2
    b864:	000d1b00 	call	d1b0 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
    b868:	10c03fcc 	andi	r3,r2,255
    b86c:	e0bfff17 	ldw	r2,-4(fp)
    b870:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    b874:	e0bfff17 	ldw	r2,-4(fp)
    b878:	10803017 	ldw	r2,192(r2)
    b87c:	10800598 	cmpnei	r2,r2,22
    b880:	10000a1e 	bne	r2,zero,b8ac <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    b884:	e0bfff17 	ldw	r2,-4(fp)
    b888:	00c02034 	movhi	r3,128
    b88c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
    b890:	e0bfff17 	ldw	r2,-4(fp)
    b894:	00c02004 	movi	r3,128
    b898:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    b89c:	e0bfff17 	ldw	r2,-4(fp)
    b8a0:	00c00074 	movhi	r3,1
    b8a4:	10c01015 	stw	r3,64(r2)
    b8a8:	0000ce06 	br	bbe4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    b8ac:	e0bfff17 	ldw	r2,-4(fp)
    b8b0:	10803017 	ldw	r2,192(r2)
    b8b4:	10800518 	cmpnei	r2,r2,20
    b8b8:	10000a1e 	bne	r2,zero,b8e4 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    b8bc:	e0bfff17 	ldw	r2,-4(fp)
    b8c0:	00c00834 	movhi	r3,32
    b8c4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
    b8c8:	e0bfff17 	ldw	r2,-4(fp)
    b8cc:	00c00804 	movi	r3,32
    b8d0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    b8d4:	e0bfff17 	ldw	r2,-4(fp)
    b8d8:	00c00074 	movhi	r3,1
    b8dc:	10c01015 	stw	r3,64(r2)
    b8e0:	0000c006 	br	bbe4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    b8e4:	e0bfff17 	ldw	r2,-4(fp)
    b8e8:	10803017 	ldw	r2,192(r2)
    b8ec:	108004d8 	cmpnei	r2,r2,19
    b8f0:	10000a1e 	bne	r2,zero,b91c <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    b8f4:	e0bfff17 	ldw	r2,-4(fp)
    b8f8:	00c00434 	movhi	r3,16
    b8fc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
    b900:	e0bfff17 	ldw	r2,-4(fp)
    b904:	00c00404 	movi	r3,16
    b908:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    b90c:	e0bfff17 	ldw	r2,-4(fp)
    b910:	00c00074 	movhi	r3,1
    b914:	10c01015 	stw	r3,64(r2)
    b918:	0000b206 	br	bbe4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    b91c:	e0bfff17 	ldw	r2,-4(fp)
    b920:	10803017 	ldw	r2,192(r2)
    b924:	10800498 	cmpnei	r2,r2,18
    b928:	10000a1e 	bne	r2,zero,b954 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    b92c:	e0bfff17 	ldw	r2,-4(fp)
    b930:	00c00234 	movhi	r3,8
    b934:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
    b938:	e0bfff17 	ldw	r2,-4(fp)
    b93c:	00c00204 	movi	r3,8
    b940:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    b944:	e0bfff17 	ldw	r2,-4(fp)
    b948:	00c00074 	movhi	r3,1
    b94c:	10c01015 	stw	r3,64(r2)
    b950:	0000a406 	br	bbe4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    b954:	e0bfff17 	ldw	r2,-4(fp)
    b958:	10803017 	ldw	r2,192(r2)
    b95c:	10800418 	cmpnei	r2,r2,16
    b960:	10000a1e 	bne	r2,zero,b98c <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    b964:	e0bfff17 	ldw	r2,-4(fp)
    b968:	00c000b4 	movhi	r3,2
    b96c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
    b970:	e0bfff17 	ldw	r2,-4(fp)
    b974:	00c00104 	movi	r3,4
    b978:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
    b97c:	e0bfff17 	ldw	r2,-4(fp)
    b980:	00e00014 	movui	r3,32768
    b984:	10c01015 	stw	r3,64(r2)
    b988:	00009606 	br	bbe4 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    b98c:	e0bfff17 	ldw	r2,-4(fp)
    b990:	10802e17 	ldw	r2,184(r2)
    b994:	1009883a 	mov	r4,r2
    b998:	000d2180 	call	d218 <epcs_read_device_id>
    b99c:	1007883a 	mov	r3,r2
    b9a0:	e0bfff17 	ldw	r2,-4(fp)
    b9a4:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
    b9a8:	e0bfff17 	ldw	r2,-4(fp)
    b9ac:	10c03017 	ldw	r3,192(r2)
    b9b0:	00804034 	movhi	r2,256
    b9b4:	10bfffc4 	addi	r2,r2,-1
    b9b8:	1886703a 	and	r3,r3,r2
    b9bc:	00800874 	movhi	r2,33
    b9c0:	10ae8544 	addi	r2,r2,-17899
    b9c4:	18800a1e 	bne	r3,r2,b9f0 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    b9c8:	e0bfff17 	ldw	r2,-4(fp)
    b9cc:	00c00834 	movhi	r3,32
    b9d0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
    b9d4:	e0bfff17 	ldw	r2,-4(fp)
    b9d8:	00c00804 	movi	r3,32
    b9dc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    b9e0:	e0bfff17 	ldw	r2,-4(fp)
    b9e4:	00c00074 	movhi	r3,1
    b9e8:	10c01015 	stw	r3,64(r2)
    b9ec:	00007d06 	br	bbe4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
    b9f0:	e0bfff17 	ldw	r2,-4(fp)
    b9f4:	10c03017 	ldw	r3,192(r2)
    b9f8:	00804034 	movhi	r2,256
    b9fc:	10bfffc4 	addi	r2,r2,-1
    ba00:	1886703a 	and	r3,r3,r2
    ba04:	00800874 	movhi	r2,33
    ba08:	10ae8584 	addi	r2,r2,-17898
    ba0c:	18800a1e 	bne	r3,r2,ba38 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
    ba10:	e0bfff17 	ldw	r2,-4(fp)
    ba14:	00c01034 	movhi	r3,64
    ba18:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
    ba1c:	e0bfff17 	ldw	r2,-4(fp)
    ba20:	00c01004 	movi	r3,64
    ba24:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ba28:	e0bfff17 	ldw	r2,-4(fp)
    ba2c:	00c00074 	movhi	r3,1
    ba30:	10c01015 	stw	r3,64(r2)
    ba34:	00006b06 	br	bbe4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
    ba38:	e0bfff17 	ldw	r2,-4(fp)
    ba3c:	10c03017 	ldw	r3,192(r2)
    ba40:	00804034 	movhi	r2,256
    ba44:	10bfffc4 	addi	r2,r2,-1
    ba48:	1886703a 	and	r3,r3,r2
    ba4c:	00800874 	movhi	r2,33
    ba50:	10ae85c4 	addi	r2,r2,-17897
    ba54:	18800a1e 	bne	r3,r2,ba80 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    ba58:	e0bfff17 	ldw	r2,-4(fp)
    ba5c:	00c02034 	movhi	r3,128
    ba60:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
    ba64:	e0bfff17 	ldw	r2,-4(fp)
    ba68:	00c02004 	movi	r3,128
    ba6c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ba70:	e0bfff17 	ldw	r2,-4(fp)
    ba74:	00c00074 	movhi	r3,1
    ba78:	10c01015 	stw	r3,64(r2)
    ba7c:	00005906 	br	bbe4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    ba80:	e0bfff17 	ldw	r2,-4(fp)
    ba84:	10c03017 	ldw	r3,192(r2)
    ba88:	00804034 	movhi	r2,256
    ba8c:	10bfffc4 	addi	r2,r2,-1
    ba90:	1886703a 	and	r3,r3,r2
    ba94:	00800874 	movhi	r2,33
    ba98:	10ae8604 	addi	r2,r2,-17896
    ba9c:	18800a1e 	bne	r3,r2,bac8 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    baa0:	e0bfff17 	ldw	r2,-4(fp)
    baa4:	00c04034 	movhi	r3,256
    baa8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    baac:	e0bfff17 	ldw	r2,-4(fp)
    bab0:	00c04004 	movi	r3,256
    bab4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    bab8:	e0bfff17 	ldw	r2,-4(fp)
    babc:	00c00074 	movhi	r3,1
    bac0:	10c01015 	stw	r3,64(r2)
    bac4:	00004706 	br	bbe4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    bac8:	e0bfff17 	ldw	r2,-4(fp)
    bacc:	10803017 	ldw	r2,192(r2)
    bad0:	10803fcc 	andi	r2,r2,255
    bad4:	10800618 	cmpnei	r2,r2,24
    bad8:	10000a1e 	bne	r2,zero,bb04 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    badc:	e0bfff17 	ldw	r2,-4(fp)
    bae0:	00c04034 	movhi	r3,256
    bae4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
    bae8:	e0bfff17 	ldw	r2,-4(fp)
    baec:	00c01004 	movi	r3,64
    baf0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
    baf4:	e0bfff17 	ldw	r2,-4(fp)
    baf8:	00c00134 	movhi	r3,4
    bafc:	10c01015 	stw	r3,64(r2)
    bb00:	00003806 	br	bbe4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    bb04:	e0bfff17 	ldw	r2,-4(fp)
    bb08:	10803017 	ldw	r2,192(r2)
    bb0c:	10803fcc 	andi	r2,r2,255
    bb10:	10800658 	cmpnei	r2,r2,25
    bb14:	10000d1e 	bne	r2,zero,bb4c <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    bb18:	e0bfff17 	ldw	r2,-4(fp)
    bb1c:	00c08034 	movhi	r3,512
    bb20:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    bb24:	e0bfff17 	ldw	r2,-4(fp)
    bb28:	00c08004 	movi	r3,512
    bb2c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    bb30:	e0bfff17 	ldw	r2,-4(fp)
    bb34:	00c00074 	movhi	r3,1
    bb38:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    bb3c:	e0bfff17 	ldw	r2,-4(fp)
    bb40:	00c00044 	movi	r3,1
    bb44:	10c03215 	stw	r3,200(r2)
    bb48:	00002606 	br	bbe4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
    bb4c:	e0bfff17 	ldw	r2,-4(fp)
    bb50:	10803017 	ldw	r2,192(r2)
    bb54:	10803fcc 	andi	r2,r2,255
    bb58:	10800818 	cmpnei	r2,r2,32
    bb5c:	10000d1e 	bne	r2,zero,bb94 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
    bb60:	e0bfff17 	ldw	r2,-4(fp)
    bb64:	00c10034 	movhi	r3,1024
    bb68:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
    bb6c:	e0bfff17 	ldw	r2,-4(fp)
    bb70:	00c10004 	movi	r3,1024
    bb74:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    bb78:	e0bfff17 	ldw	r2,-4(fp)
    bb7c:	00c00074 	movhi	r3,1
    bb80:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    bb84:	e0bfff17 	ldw	r2,-4(fp)
    bb88:	00c00044 	movi	r3,1
    bb8c:	10c03215 	stw	r3,200(r2)
    bb90:	00001406 	br	bbe4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
    bb94:	e0bfff17 	ldw	r2,-4(fp)
    bb98:	10803017 	ldw	r2,192(r2)
    bb9c:	10803fcc 	andi	r2,r2,255
    bba0:	10800858 	cmpnei	r2,r2,33
    bba4:	10000d1e 	bne	r2,zero,bbdc <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
    bba8:	e0bfff17 	ldw	r2,-4(fp)
    bbac:	00c20034 	movhi	r3,2048
    bbb0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
    bbb4:	e0bfff17 	ldw	r2,-4(fp)
    bbb8:	00c20004 	movi	r3,2048
    bbbc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    bbc0:	e0bfff17 	ldw	r2,-4(fp)
    bbc4:	00c00074 	movhi	r3,1
    bbc8:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    bbcc:	e0bfff17 	ldw	r2,-4(fp)
    bbd0:	00c00044 	movi	r3,1
    bbd4:	10c03215 	stw	r3,200(r2)
    bbd8:	00000206 	br	bbe4 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    bbdc:	00bffb44 	movi	r2,-19
    bbe0:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    bbe4:	e0bfff17 	ldw	r2,-4(fp)
    bbe8:	10800e17 	ldw	r2,56(r2)
    bbec:	1007883a 	mov	r3,r2
    bbf0:	e0bfff17 	ldw	r2,-4(fp)
    bbf4:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
    bbf8:	e0bfff17 	ldw	r2,-4(fp)
    bbfc:	00c00044 	movi	r3,1
    bc00:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
    bc04:	e0bfff17 	ldw	r2,-4(fp)
    bc08:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    bc0c:	e0bfff17 	ldw	r2,-4(fp)
    bc10:	00c04004 	movi	r3,256
    bc14:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
    bc18:	e0bffe17 	ldw	r2,-8(fp)
}
    bc1c:	e037883a 	mov	sp,fp
    bc20:	dfc00117 	ldw	ra,4(sp)
    bc24:	df000017 	ldw	fp,0(sp)
    bc28:	dec00204 	addi	sp,sp,8
    bc2c:	f800283a 	ret

0000bc30 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    bc30:	deffee04 	addi	sp,sp,-72
    bc34:	dfc01115 	stw	ra,68(sp)
    bc38:	df001015 	stw	fp,64(sp)
    bc3c:	df001004 	addi	fp,sp,64
    bc40:	e13ffc15 	stw	r4,-16(fp)
    bc44:	e17ffd15 	stw	r5,-12(fp)
    bc48:	e1bffe15 	stw	r6,-8(fp)
    bc4c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    bc50:	00800804 	movi	r2,32
    bc54:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
    bc58:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
    bc5c:	00002706 	br	bcfc <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    bc60:	e0fff117 	ldw	r3,-60(fp)
    bc64:	e0bfff17 	ldw	r2,-4(fp)
    bc68:	1880012e 	bgeu	r3,r2,bc70 <alt_epcs_flash_memcmp+0x40>
    bc6c:	1805883a 	mov	r2,r3
    bc70:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    bc74:	e0fffe17 	ldw	r3,-8(fp)
    bc78:	e0bff017 	ldw	r2,-64(fp)
    bc7c:	1885883a 	add	r2,r3,r2
    bc80:	e0fff404 	addi	r3,fp,-48
    bc84:	e1fff217 	ldw	r7,-56(fp)
    bc88:	180d883a 	mov	r6,r3
    bc8c:	100b883a 	mov	r5,r2
    bc90:	e13ffc17 	ldw	r4,-16(fp)
    bc94:	000c2140 	call	c214 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    bc98:	1000020e 	bge	r2,zero,bca4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    bc9c:	00bfffc4 	movi	r2,-1
    bca0:	00001906 	br	bd08 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    bca4:	e0bff017 	ldw	r2,-64(fp)
    bca8:	e0fffd17 	ldw	r3,-12(fp)
    bcac:	1885883a 	add	r2,r3,r2
    bcb0:	e13ff217 	ldw	r4,-56(fp)
    bcb4:	e0fff404 	addi	r3,fp,-48
    bcb8:	200d883a 	mov	r6,r4
    bcbc:	180b883a 	mov	r5,r3
    bcc0:	1009883a 	mov	r4,r2
    bcc4:	000e4ac0 	call	e4ac <memcmp>
    bcc8:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
    bccc:	e0bff317 	ldw	r2,-52(fp)
    bcd0:	10000226 	beq	r2,zero,bcdc <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
    bcd4:	e0bff317 	ldw	r2,-52(fp)
    bcd8:	00000b06 	br	bd08 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
    bcdc:	e0bff217 	ldw	r2,-56(fp)
    bce0:	e0ffff17 	ldw	r3,-4(fp)
    bce4:	1885c83a 	sub	r2,r3,r2
    bce8:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
    bcec:	e0fff017 	ldw	r3,-64(fp)
    bcf0:	e0bff217 	ldw	r2,-56(fp)
    bcf4:	1885883a 	add	r2,r3,r2
    bcf8:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    bcfc:	e0bfff17 	ldw	r2,-4(fp)
    bd00:	103fd71e 	bne	r2,zero,bc60 <__alt_mem_epcs_flash_controller+0xfe002c60>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    bd04:	0005883a 	mov	r2,zero
}
    bd08:	e037883a 	mov	sp,fp
    bd0c:	dfc00117 	ldw	ra,4(sp)
    bd10:	df000017 	ldw	fp,0(sp)
    bd14:	dec00204 	addi	sp,sp,8
    bd18:	f800283a 	ret

0000bd1c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    bd1c:	defff404 	addi	sp,sp,-48
    bd20:	dfc00b15 	stw	ra,44(sp)
    bd24:	df000a15 	stw	fp,40(sp)
    bd28:	df000a04 	addi	fp,sp,40
    bd2c:	e13ffc15 	stw	r4,-16(fp)
    bd30:	e17ffd15 	stw	r5,-12(fp)
    bd34:	e1bffe15 	stw	r6,-8(fp)
    bd38:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
    bd3c:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    bd40:	e03ff815 	stw	zero,-32(fp)
    bd44:	00008306 	br	bf54 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    bd48:	e0fffc17 	ldw	r3,-16(fp)
    bd4c:	e0bff817 	ldw	r2,-32(fp)
    bd50:	1004913a 	slli	r2,r2,4
    bd54:	1885883a 	add	r2,r3,r2
    bd58:	10800d04 	addi	r2,r2,52
    bd5c:	10800017 	ldw	r2,0(r2)
    bd60:	e0fffd17 	ldw	r3,-12(fp)
    bd64:	18807816 	blt	r3,r2,bf48 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
    bd68:	e0fffc17 	ldw	r3,-16(fp)
    bd6c:	e0bff817 	ldw	r2,-32(fp)
    bd70:	1004913a 	slli	r2,r2,4
    bd74:	1885883a 	add	r2,r3,r2
    bd78:	10800d04 	addi	r2,r2,52
    bd7c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
    bd80:	e13ffc17 	ldw	r4,-16(fp)
    bd84:	e0bff817 	ldw	r2,-32(fp)
    bd88:	1004913a 	slli	r2,r2,4
    bd8c:	2085883a 	add	r2,r4,r2
    bd90:	10800e04 	addi	r2,r2,56
    bd94:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
    bd98:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    bd9c:	e0fffd17 	ldw	r3,-12(fp)
    bda0:	1880690e 	bge	r3,r2,bf48 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    bda4:	e0fffc17 	ldw	r3,-16(fp)
    bda8:	e0bff817 	ldw	r2,-32(fp)
    bdac:	1004913a 	slli	r2,r2,4
    bdb0:	1885883a 	add	r2,r3,r2
    bdb4:	10800d04 	addi	r2,r2,52
    bdb8:	10800017 	ldw	r2,0(r2)
    bdbc:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    bdc0:	e03ff915 	stw	zero,-28(fp)
    bdc4:	00005806 	br	bf28 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
    bdc8:	e0fffd17 	ldw	r3,-12(fp)
    bdcc:	e0bffa17 	ldw	r2,-24(fp)
    bdd0:	18804916 	blt	r3,r2,bef8 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
    bdd4:	e0fffc17 	ldw	r3,-16(fp)
    bdd8:	e0bff817 	ldw	r2,-32(fp)
    bddc:	10800104 	addi	r2,r2,4
    bde0:	1004913a 	slli	r2,r2,4
    bde4:	1885883a 	add	r2,r3,r2
    bde8:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
    bdec:	e0bffa17 	ldw	r2,-24(fp)
    bdf0:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
    bdf4:	e0fffd17 	ldw	r3,-12(fp)
    bdf8:	18803f0e 	bge	r3,r2,bef8 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    bdfc:	e0fffc17 	ldw	r3,-16(fp)
    be00:	e0bff817 	ldw	r2,-32(fp)
    be04:	10800104 	addi	r2,r2,4
    be08:	1004913a 	slli	r2,r2,4
    be0c:	1885883a 	add	r2,r3,r2
    be10:	10c00017 	ldw	r3,0(r2)
    be14:	e0bffa17 	ldw	r2,-24(fp)
    be18:	1887883a 	add	r3,r3,r2
    be1c:	e0bffd17 	ldw	r2,-12(fp)
    be20:	1885c83a 	sub	r2,r3,r2
    be24:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    be28:	e0fffb17 	ldw	r3,-20(fp)
    be2c:	e0bfff17 	ldw	r2,-4(fp)
    be30:	1880010e 	bge	r3,r2,be38 <alt_epcs_flash_write+0x11c>
    be34:	1805883a 	mov	r2,r3
    be38:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    be3c:	e0bffb17 	ldw	r2,-20(fp)
    be40:	100f883a 	mov	r7,r2
    be44:	e1bffd17 	ldw	r6,-12(fp)
    be48:	e17ffe17 	ldw	r5,-8(fp)
    be4c:	e13ffc17 	ldw	r4,-16(fp)
    be50:	000bc300 	call	bc30 <alt_epcs_flash_memcmp>
    be54:	10001226 	beq	r2,zero,bea0 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    be58:	e0bffc17 	ldw	r2,-16(fp)
    be5c:	10800817 	ldw	r2,32(r2)
    be60:	e17ffa17 	ldw	r5,-24(fp)
    be64:	e13ffc17 	ldw	r4,-16(fp)
    be68:	103ee83a 	callr	r2
    be6c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
    be70:	e0bff717 	ldw	r2,-36(fp)
    be74:	10000a1e 	bne	r2,zero,bea0 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
    be78:	e0bffc17 	ldw	r2,-16(fp)
    be7c:	10800917 	ldw	r2,36(r2)
    be80:	e0fffb17 	ldw	r3,-20(fp)
    be84:	d8c00015 	stw	r3,0(sp)
    be88:	e1fffe17 	ldw	r7,-8(fp)
    be8c:	e1bffd17 	ldw	r6,-12(fp)
    be90:	e17ffa17 	ldw	r5,-24(fp)
    be94:	e13ffc17 	ldw	r4,-16(fp)
    be98:	103ee83a 	callr	r2
    be9c:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    bea0:	e0ffff17 	ldw	r3,-4(fp)
    bea4:	e0bffb17 	ldw	r2,-20(fp)
    bea8:	18802e26 	beq	r3,r2,bf64 <alt_epcs_flash_write+0x248>
    beac:	e0bff717 	ldw	r2,-36(fp)
    beb0:	10002c1e 	bne	r2,zero,bf64 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
    beb4:	e0ffff17 	ldw	r3,-4(fp)
    beb8:	e0bffb17 	ldw	r2,-20(fp)
    bebc:	1885c83a 	sub	r2,r3,r2
    bec0:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    bec4:	e0fffc17 	ldw	r3,-16(fp)
    bec8:	e0bff817 	ldw	r2,-32(fp)
    becc:	10800104 	addi	r2,r2,4
    bed0:	1004913a 	slli	r2,r2,4
    bed4:	1885883a 	add	r2,r3,r2
    bed8:	10c00017 	ldw	r3,0(r2)
    bedc:	e0bffa17 	ldw	r2,-24(fp)
    bee0:	1885883a 	add	r2,r3,r2
    bee4:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    bee8:	e0bffb17 	ldw	r2,-20(fp)
    beec:	e0fffe17 	ldw	r3,-8(fp)
    bef0:	1885883a 	add	r2,r3,r2
    bef4:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    bef8:	e0fffc17 	ldw	r3,-16(fp)
    befc:	e0bff817 	ldw	r2,-32(fp)
    bf00:	10800104 	addi	r2,r2,4
    bf04:	1004913a 	slli	r2,r2,4
    bf08:	1885883a 	add	r2,r3,r2
    bf0c:	10800017 	ldw	r2,0(r2)
    bf10:	e0fffa17 	ldw	r3,-24(fp)
    bf14:	1885883a 	add	r2,r3,r2
    bf18:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    bf1c:	e0bff917 	ldw	r2,-28(fp)
    bf20:	10800044 	addi	r2,r2,1
    bf24:	e0bff915 	stw	r2,-28(fp)
    bf28:	e0fffc17 	ldw	r3,-16(fp)
    bf2c:	e0bff817 	ldw	r2,-32(fp)
    bf30:	1004913a 	slli	r2,r2,4
    bf34:	1885883a 	add	r2,r3,r2
    bf38:	10800f04 	addi	r2,r2,60
    bf3c:	10800017 	ldw	r2,0(r2)
    bf40:	e0fff917 	ldw	r3,-28(fp)
    bf44:	18bfa016 	blt	r3,r2,bdc8 <__alt_mem_epcs_flash_controller+0xfe002dc8>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    bf48:	e0bff817 	ldw	r2,-32(fp)
    bf4c:	10800044 	addi	r2,r2,1
    bf50:	e0bff815 	stw	r2,-32(fp)
    bf54:	e0bffc17 	ldw	r2,-16(fp)
    bf58:	10800c17 	ldw	r2,48(r2)
    bf5c:	e0fff817 	ldw	r3,-32(fp)
    bf60:	18bf7916 	blt	r3,r2,bd48 <__alt_mem_epcs_flash_controller+0xfe002d48>
      }
    }
  }

finished:
  return ret_code;
    bf64:	e0bff717 	ldw	r2,-36(fp)
}
    bf68:	e037883a 	mov	sp,fp
    bf6c:	dfc00117 	ldw	ra,4(sp)
    bf70:	df000017 	ldw	fp,0(sp)
    bf74:	dec00204 	addi	sp,sp,8
    bf78:	f800283a 	ret

0000bf7c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    bf7c:	defffa04 	addi	sp,sp,-24
    bf80:	df000515 	stw	fp,20(sp)
    bf84:	df000504 	addi	fp,sp,20
    bf88:	e13ffd15 	stw	r4,-12(fp)
    bf8c:	e17ffe15 	stw	r5,-8(fp)
    bf90:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    bf94:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    bf98:	e0bffd17 	ldw	r2,-12(fp)
    bf9c:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
    bfa0:	e0bffc17 	ldw	r2,-16(fp)
    bfa4:	10c00c17 	ldw	r3,48(r2)
    bfa8:	e0bfff17 	ldw	r2,-4(fp)
    bfac:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    bfb0:	e0bffc17 	ldw	r2,-16(fp)
    bfb4:	10800c17 	ldw	r2,48(r2)
    bfb8:	1000031e 	bne	r2,zero,bfc8 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
    bfbc:	00bffec4 	movi	r2,-5
    bfc0:	e0bffb15 	stw	r2,-20(fp)
    bfc4:	00000b06 	br	bff4 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    bfc8:	e0bffc17 	ldw	r2,-16(fp)
    bfcc:	10800c17 	ldw	r2,48(r2)
    bfd0:	10800250 	cmplti	r2,r2,9
    bfd4:	1000031e 	bne	r2,zero,bfe4 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
    bfd8:	00bffd04 	movi	r2,-12
    bfdc:	e0bffb15 	stw	r2,-20(fp)
    bfe0:	00000406 	br	bff4 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
    bfe4:	e0bffc17 	ldw	r2,-16(fp)
    bfe8:	10c00d04 	addi	r3,r2,52
    bfec:	e0bffe17 	ldw	r2,-8(fp)
    bff0:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    bff4:	e0bffb17 	ldw	r2,-20(fp)
}
    bff8:	e037883a 	mov	sp,fp
    bffc:	df000017 	ldw	fp,0(sp)
    c000:	dec00104 	addi	sp,sp,4
    c004:	f800283a 	ret

0000c008 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    c008:	defff904 	addi	sp,sp,-28
    c00c:	df000615 	stw	fp,24(sp)
    c010:	df000604 	addi	fp,sp,24
    c014:	e13ffe15 	stw	r4,-8(fp)
    c018:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    c01c:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    c020:	e0bffe17 	ldw	r2,-8(fp)
    c024:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    c028:	e0bffb17 	ldw	r2,-20(fp)
    c02c:	10800c17 	ldw	r2,48(r2)
    c030:	10bfffc4 	addi	r2,r2,-1
    c034:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    c038:	e0fffb17 	ldw	r3,-20(fp)
    c03c:	e0bffc17 	ldw	r2,-16(fp)
    c040:	1004913a 	slli	r2,r2,4
    c044:	1885883a 	add	r2,r3,r2
    c048:	10800d04 	addi	r2,r2,52
    c04c:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    c050:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    c054:	e13ffb17 	ldw	r4,-20(fp)
    c058:	e0bffc17 	ldw	r2,-16(fp)
    c05c:	1004913a 	slli	r2,r2,4
    c060:	2085883a 	add	r2,r4,r2
    c064:	10800e04 	addi	r2,r2,56
    c068:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    c06c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    c070:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    c074:	e0bfff17 	ldw	r2,-4(fp)
    c078:	e0fffd17 	ldw	r3,-12(fp)
    c07c:	1880022e 	bgeu	r3,r2,c088 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    c080:	00bffec4 	movi	r2,-5
    c084:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
    c088:	e0bffa17 	ldw	r2,-24(fp)
}
    c08c:	e037883a 	mov	sp,fp
    c090:	df000017 	ldw	fp,0(sp)
    c094:	dec00104 	addi	sp,sp,4
    c098:	f800283a 	ret

0000c09c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    c09c:	defffa04 	addi	sp,sp,-24
    c0a0:	dfc00515 	stw	ra,20(sp)
    c0a4:	df000415 	stw	fp,16(sp)
    c0a8:	df000404 	addi	fp,sp,16
    c0ac:	e13ffe15 	stw	r4,-8(fp)
    c0b0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    c0b4:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    c0b8:	e0bffe17 	ldw	r2,-8(fp)
    c0bc:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    c0c0:	e17fff17 	ldw	r5,-4(fp)
    c0c4:	e13ffe17 	ldw	r4,-8(fp)
    c0c8:	000c0080 	call	c008 <alt_epcs_test_address>
    c0cc:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
    c0d0:	e0bffc17 	ldw	r2,-16(fp)
    c0d4:	10000916 	blt	r2,zero,c0fc <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    c0d8:	e0bffd17 	ldw	r2,-12(fp)
    c0dc:	10c02e17 	ldw	r3,184(r2)
    c0e0:	e13fff17 	ldw	r4,-4(fp)
    c0e4:	e0bffd17 	ldw	r2,-12(fp)
    c0e8:	10803217 	ldw	r2,200(r2)
    c0ec:	100d883a 	mov	r6,r2
    c0f0:	200b883a 	mov	r5,r4
    c0f4:	1809883a 	mov	r4,r3
    c0f8:	000cde40 	call	cde4 <epcs_sector_erase>
  }
  return ret_code;
    c0fc:	e0bffc17 	ldw	r2,-16(fp)
}
    c100:	e037883a 	mov	sp,fp
    c104:	dfc00117 	ldw	ra,4(sp)
    c108:	df000017 	ldw	fp,0(sp)
    c10c:	dec00204 	addi	sp,sp,8
    c110:	f800283a 	ret

0000c114 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    c114:	defff404 	addi	sp,sp,-48
    c118:	dfc00b15 	stw	ra,44(sp)
    c11c:	df000a15 	stw	fp,40(sp)
    c120:	df000a04 	addi	fp,sp,40
    c124:	e13ffc15 	stw	r4,-16(fp)
    c128:	e17ffd15 	stw	r5,-12(fp)
    c12c:	e1bffe15 	stw	r6,-8(fp)
    c130:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    c134:	e0bffc17 	ldw	r2,-16(fp)
    c138:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    c13c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    c140:	e17ffe17 	ldw	r5,-8(fp)
    c144:	e13ffc17 	ldw	r4,-16(fp)
    c148:	000c0080 	call	c008 <alt_epcs_test_address>
    c14c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    c150:	e0bff917 	ldw	r2,-28(fp)
    c154:	10002916 	blt	r2,zero,c1fc <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    c158:	00002606 	br	c1f4 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    c15c:	e0bff817 	ldw	r2,-32(fp)
    c160:	10c03117 	ldw	r3,196(r2)
    c164:	e0bffe17 	ldw	r2,-8(fp)
    c168:	1887883a 	add	r3,r3,r2
    c16c:	e0bff817 	ldw	r2,-32(fp)
    c170:	10803117 	ldw	r2,196(r2)
    c174:	0085c83a 	sub	r2,zero,r2
    c178:	1884703a 	and	r2,r3,r2
    c17c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    c180:	e0fffa17 	ldw	r3,-24(fp)
    c184:	e0bffe17 	ldw	r2,-8(fp)
    c188:	1885c83a 	sub	r2,r3,r2
    c18c:	e0c00217 	ldw	r3,8(fp)
    c190:	1880010e 	bge	r3,r2,c198 <alt_epcs_flash_write_block+0x84>
    c194:	1805883a 	mov	r2,r3
    c198:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    c19c:	e0bff817 	ldw	r2,-32(fp)
    c1a0:	11002e17 	ldw	r4,184(r2)
    c1a4:	e0bff717 	ldw	r2,-36(fp)
    c1a8:	e0ffff17 	ldw	r3,-4(fp)
    c1ac:	1887883a 	add	r3,r3,r2
    c1b0:	e0bff817 	ldw	r2,-32(fp)
    c1b4:	10803217 	ldw	r2,200(r2)
    c1b8:	d8800015 	stw	r2,0(sp)
    c1bc:	e1fffb17 	ldw	r7,-20(fp)
    c1c0:	180d883a 	mov	r6,r3
    c1c4:	e17ffe17 	ldw	r5,-8(fp)
    c1c8:	000d0940 	call	d094 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    c1cc:	e0c00217 	ldw	r3,8(fp)
    c1d0:	e0bffb17 	ldw	r2,-20(fp)
    c1d4:	1885c83a 	sub	r2,r3,r2
    c1d8:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    c1dc:	e0fff717 	ldw	r3,-36(fp)
    c1e0:	e0bffb17 	ldw	r2,-20(fp)
    c1e4:	1885883a 	add	r2,r3,r2
    c1e8:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    c1ec:	e0bffa17 	ldw	r2,-24(fp)
    c1f0:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    c1f4:	e0800217 	ldw	r2,8(fp)
    c1f8:	103fd81e 	bne	r2,zero,c15c <__alt_mem_epcs_flash_controller+0xfe00315c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    c1fc:	e0bff917 	ldw	r2,-28(fp)
}
    c200:	e037883a 	mov	sp,fp
    c204:	dfc00117 	ldw	ra,4(sp)
    c208:	df000017 	ldw	fp,0(sp)
    c20c:	dec00204 	addi	sp,sp,8
    c210:	f800283a 	ret

0000c214 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    c214:	defff704 	addi	sp,sp,-36
    c218:	dfc00815 	stw	ra,32(sp)
    c21c:	df000715 	stw	fp,28(sp)
    c220:	df000704 	addi	fp,sp,28
    c224:	e13ffc15 	stw	r4,-16(fp)
    c228:	e17ffd15 	stw	r5,-12(fp)
    c22c:	e1bffe15 	stw	r6,-8(fp)
    c230:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    c234:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    c238:	e0bffc17 	ldw	r2,-16(fp)
    c23c:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    c240:	e17ffd17 	ldw	r5,-12(fp)
    c244:	e13ffc17 	ldw	r4,-16(fp)
    c248:	000c0080 	call	c008 <alt_epcs_test_address>
    c24c:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
    c250:	e0bffa17 	ldw	r2,-24(fp)
    c254:	10000f16 	blt	r2,zero,c294 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    c258:	e0bffb17 	ldw	r2,-20(fp)
    c25c:	10c02e17 	ldw	r3,184(r2)
    c260:	e0bffb17 	ldw	r2,-20(fp)
    c264:	10803217 	ldw	r2,200(r2)
    c268:	d8800015 	stw	r2,0(sp)
    c26c:	e1ffff17 	ldw	r7,-4(fp)
    c270:	e1bffe17 	ldw	r6,-8(fp)
    c274:	e17ffd17 	ldw	r5,-12(fp)
    c278:	1809883a 	mov	r4,r3
    c27c:	000cee00 	call	cee0 <epcs_read_buffer>
    c280:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    c284:	e0fffa17 	ldw	r3,-24(fp)
    c288:	e0bfff17 	ldw	r2,-4(fp)
    c28c:	1880011e 	bne	r3,r2,c294 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    c290:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
    c294:	e0bffa17 	ldw	r2,-24(fp)
}
    c298:	e037883a 	mov	sp,fp
    c29c:	dfc00117 	ldw	ra,4(sp)
    c2a0:	df000017 	ldw	fp,0(sp)
    c2a4:	dec00204 	addi	sp,sp,8
    c2a8:	f800283a 	ret

0000c2ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c2ac:	defffa04 	addi	sp,sp,-24
    c2b0:	dfc00515 	stw	ra,20(sp)
    c2b4:	df000415 	stw	fp,16(sp)
    c2b8:	df000404 	addi	fp,sp,16
    c2bc:	e13ffd15 	stw	r4,-12(fp)
    c2c0:	e17ffe15 	stw	r5,-8(fp)
    c2c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c2c8:	e0bffd17 	ldw	r2,-12(fp)
    c2cc:	10800017 	ldw	r2,0(r2)
    c2d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c2d4:	e0bffc17 	ldw	r2,-16(fp)
    c2d8:	10c00a04 	addi	r3,r2,40
    c2dc:	e0bffd17 	ldw	r2,-12(fp)
    c2e0:	10800217 	ldw	r2,8(r2)
    c2e4:	100f883a 	mov	r7,r2
    c2e8:	e1bfff17 	ldw	r6,-4(fp)
    c2ec:	e17ffe17 	ldw	r5,-8(fp)
    c2f0:	1809883a 	mov	r4,r3
    c2f4:	000c8d40 	call	c8d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c2f8:	e037883a 	mov	sp,fp
    c2fc:	dfc00117 	ldw	ra,4(sp)
    c300:	df000017 	ldw	fp,0(sp)
    c304:	dec00204 	addi	sp,sp,8
    c308:	f800283a 	ret

0000c30c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c30c:	defffa04 	addi	sp,sp,-24
    c310:	dfc00515 	stw	ra,20(sp)
    c314:	df000415 	stw	fp,16(sp)
    c318:	df000404 	addi	fp,sp,16
    c31c:	e13ffd15 	stw	r4,-12(fp)
    c320:	e17ffe15 	stw	r5,-8(fp)
    c324:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c328:	e0bffd17 	ldw	r2,-12(fp)
    c32c:	10800017 	ldw	r2,0(r2)
    c330:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c334:	e0bffc17 	ldw	r2,-16(fp)
    c338:	10c00a04 	addi	r3,r2,40
    c33c:	e0bffd17 	ldw	r2,-12(fp)
    c340:	10800217 	ldw	r2,8(r2)
    c344:	100f883a 	mov	r7,r2
    c348:	e1bfff17 	ldw	r6,-4(fp)
    c34c:	e17ffe17 	ldw	r5,-8(fp)
    c350:	1809883a 	mov	r4,r3
    c354:	000caf00 	call	caf0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c358:	e037883a 	mov	sp,fp
    c35c:	dfc00117 	ldw	ra,4(sp)
    c360:	df000017 	ldw	fp,0(sp)
    c364:	dec00204 	addi	sp,sp,8
    c368:	f800283a 	ret

0000c36c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c36c:	defffc04 	addi	sp,sp,-16
    c370:	dfc00315 	stw	ra,12(sp)
    c374:	df000215 	stw	fp,8(sp)
    c378:	df000204 	addi	fp,sp,8
    c37c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c380:	e0bfff17 	ldw	r2,-4(fp)
    c384:	10800017 	ldw	r2,0(r2)
    c388:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c38c:	e0bffe17 	ldw	r2,-8(fp)
    c390:	10c00a04 	addi	r3,r2,40
    c394:	e0bfff17 	ldw	r2,-4(fp)
    c398:	10800217 	ldw	r2,8(r2)
    c39c:	100b883a 	mov	r5,r2
    c3a0:	1809883a 	mov	r4,r3
    c3a4:	000c77c0 	call	c77c <altera_avalon_jtag_uart_close>
}
    c3a8:	e037883a 	mov	sp,fp
    c3ac:	dfc00117 	ldw	ra,4(sp)
    c3b0:	df000017 	ldw	fp,0(sp)
    c3b4:	dec00204 	addi	sp,sp,8
    c3b8:	f800283a 	ret

0000c3bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c3bc:	defffa04 	addi	sp,sp,-24
    c3c0:	dfc00515 	stw	ra,20(sp)
    c3c4:	df000415 	stw	fp,16(sp)
    c3c8:	df000404 	addi	fp,sp,16
    c3cc:	e13ffd15 	stw	r4,-12(fp)
    c3d0:	e17ffe15 	stw	r5,-8(fp)
    c3d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c3d8:	e0bffd17 	ldw	r2,-12(fp)
    c3dc:	10800017 	ldw	r2,0(r2)
    c3e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c3e4:	e0bffc17 	ldw	r2,-16(fp)
    c3e8:	10800a04 	addi	r2,r2,40
    c3ec:	e1bfff17 	ldw	r6,-4(fp)
    c3f0:	e17ffe17 	ldw	r5,-8(fp)
    c3f4:	1009883a 	mov	r4,r2
    c3f8:	000c7e40 	call	c7e4 <altera_avalon_jtag_uart_ioctl>
}
    c3fc:	e037883a 	mov	sp,fp
    c400:	dfc00117 	ldw	ra,4(sp)
    c404:	df000017 	ldw	fp,0(sp)
    c408:	dec00204 	addi	sp,sp,8
    c40c:	f800283a 	ret

0000c410 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c410:	defffa04 	addi	sp,sp,-24
    c414:	dfc00515 	stw	ra,20(sp)
    c418:	df000415 	stw	fp,16(sp)
    c41c:	df000404 	addi	fp,sp,16
    c420:	e13ffd15 	stw	r4,-12(fp)
    c424:	e17ffe15 	stw	r5,-8(fp)
    c428:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c42c:	e0bffd17 	ldw	r2,-12(fp)
    c430:	00c00044 	movi	r3,1
    c434:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c438:	e0bffd17 	ldw	r2,-12(fp)
    c43c:	10800017 	ldw	r2,0(r2)
    c440:	10800104 	addi	r2,r2,4
    c444:	1007883a 	mov	r3,r2
    c448:	e0bffd17 	ldw	r2,-12(fp)
    c44c:	10800817 	ldw	r2,32(r2)
    c450:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c454:	e0bffe17 	ldw	r2,-8(fp)
    c458:	e0ffff17 	ldw	r3,-4(fp)
    c45c:	d8000015 	stw	zero,0(sp)
    c460:	e1fffd17 	ldw	r7,-12(fp)
    c464:	01800074 	movhi	r6,1
    c468:	31b13404 	addi	r6,r6,-15152
    c46c:	180b883a 	mov	r5,r3
    c470:	1009883a 	mov	r4,r2
    c474:	000d8580 	call	d858 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c478:	e0bffd17 	ldw	r2,-12(fp)
    c47c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c480:	e0bffd17 	ldw	r2,-12(fp)
    c484:	10800204 	addi	r2,r2,8
    c488:	d0e51a17 	ldw	r3,-27544(gp)
    c48c:	e1fffd17 	ldw	r7,-12(fp)
    c490:	01800074 	movhi	r6,1
    c494:	31b1b704 	addi	r6,r6,-14628
    c498:	180b883a 	mov	r5,r3
    c49c:	1009883a 	mov	r4,r2
    c4a0:	000d3500 	call	d350 <alt_alarm_start>
    c4a4:	1000040e 	bge	r2,zero,c4b8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c4a8:	e0fffd17 	ldw	r3,-12(fp)
    c4ac:	00a00034 	movhi	r2,32768
    c4b0:	10bfffc4 	addi	r2,r2,-1
    c4b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c4b8:	0001883a 	nop
    c4bc:	e037883a 	mov	sp,fp
    c4c0:	dfc00117 	ldw	ra,4(sp)
    c4c4:	df000017 	ldw	fp,0(sp)
    c4c8:	dec00204 	addi	sp,sp,8
    c4cc:	f800283a 	ret

0000c4d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c4d0:	defff804 	addi	sp,sp,-32
    c4d4:	df000715 	stw	fp,28(sp)
    c4d8:	df000704 	addi	fp,sp,28
    c4dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c4e0:	e0bfff17 	ldw	r2,-4(fp)
    c4e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    c4e8:	e0bffb17 	ldw	r2,-20(fp)
    c4ec:	10800017 	ldw	r2,0(r2)
    c4f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c4f4:	e0bffc17 	ldw	r2,-16(fp)
    c4f8:	10800104 	addi	r2,r2,4
    c4fc:	10800037 	ldwio	r2,0(r2)
    c500:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c504:	e0bffd17 	ldw	r2,-12(fp)
    c508:	1080c00c 	andi	r2,r2,768
    c50c:	10006d26 	beq	r2,zero,c6c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c510:	e0bffd17 	ldw	r2,-12(fp)
    c514:	1080400c 	andi	r2,r2,256
    c518:	10003526 	beq	r2,zero,c5f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c51c:	00800074 	movhi	r2,1
    c520:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c524:	e0bffb17 	ldw	r2,-20(fp)
    c528:	10800a17 	ldw	r2,40(r2)
    c52c:	10800044 	addi	r2,r2,1
    c530:	1081ffcc 	andi	r2,r2,2047
    c534:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    c538:	e0bffb17 	ldw	r2,-20(fp)
    c53c:	10c00b17 	ldw	r3,44(r2)
    c540:	e0bffe17 	ldw	r2,-8(fp)
    c544:	18801526 	beq	r3,r2,c59c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c548:	e0bffc17 	ldw	r2,-16(fp)
    c54c:	10800037 	ldwio	r2,0(r2)
    c550:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c554:	e0bff917 	ldw	r2,-28(fp)
    c558:	10a0000c 	andi	r2,r2,32768
    c55c:	10001126 	beq	r2,zero,c5a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c560:	e0bffb17 	ldw	r2,-20(fp)
    c564:	10800a17 	ldw	r2,40(r2)
    c568:	e0fff917 	ldw	r3,-28(fp)
    c56c:	1809883a 	mov	r4,r3
    c570:	e0fffb17 	ldw	r3,-20(fp)
    c574:	1885883a 	add	r2,r3,r2
    c578:	10800e04 	addi	r2,r2,56
    c57c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c580:	e0bffb17 	ldw	r2,-20(fp)
    c584:	10800a17 	ldw	r2,40(r2)
    c588:	10800044 	addi	r2,r2,1
    c58c:	10c1ffcc 	andi	r3,r2,2047
    c590:	e0bffb17 	ldw	r2,-20(fp)
    c594:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c598:	003fe206 	br	c524 <__alt_mem_epcs_flash_controller+0xfe003524>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    c59c:	0001883a 	nop
    c5a0:	00000106 	br	c5a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    c5a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c5a8:	e0bff917 	ldw	r2,-28(fp)
    c5ac:	10bfffec 	andhi	r2,r2,65535
    c5b0:	10000f26 	beq	r2,zero,c5f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c5b4:	e0bffb17 	ldw	r2,-20(fp)
    c5b8:	10c00817 	ldw	r3,32(r2)
    c5bc:	00bfff84 	movi	r2,-2
    c5c0:	1886703a 	and	r3,r3,r2
    c5c4:	e0bffb17 	ldw	r2,-20(fp)
    c5c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c5cc:	e0bffc17 	ldw	r2,-16(fp)
    c5d0:	10800104 	addi	r2,r2,4
    c5d4:	1007883a 	mov	r3,r2
    c5d8:	e0bffb17 	ldw	r2,-20(fp)
    c5dc:	10800817 	ldw	r2,32(r2)
    c5e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c5e4:	e0bffc17 	ldw	r2,-16(fp)
    c5e8:	10800104 	addi	r2,r2,4
    c5ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c5f0:	e0bffd17 	ldw	r2,-12(fp)
    c5f4:	1080800c 	andi	r2,r2,512
    c5f8:	103fbe26 	beq	r2,zero,c4f4 <__alt_mem_epcs_flash_controller+0xfe0034f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c5fc:	e0bffd17 	ldw	r2,-12(fp)
    c600:	1004d43a 	srli	r2,r2,16
    c604:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c608:	00001406 	br	c65c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c60c:	e0bffc17 	ldw	r2,-16(fp)
    c610:	e0fffb17 	ldw	r3,-20(fp)
    c614:	18c00d17 	ldw	r3,52(r3)
    c618:	e13ffb17 	ldw	r4,-20(fp)
    c61c:	20c7883a 	add	r3,r4,r3
    c620:	18c20e04 	addi	r3,r3,2104
    c624:	18c00003 	ldbu	r3,0(r3)
    c628:	18c03fcc 	andi	r3,r3,255
    c62c:	18c0201c 	xori	r3,r3,128
    c630:	18ffe004 	addi	r3,r3,-128
    c634:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c638:	e0bffb17 	ldw	r2,-20(fp)
    c63c:	10800d17 	ldw	r2,52(r2)
    c640:	10800044 	addi	r2,r2,1
    c644:	10c1ffcc 	andi	r3,r2,2047
    c648:	e0bffb17 	ldw	r2,-20(fp)
    c64c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c650:	e0bffa17 	ldw	r2,-24(fp)
    c654:	10bfffc4 	addi	r2,r2,-1
    c658:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c65c:	e0bffa17 	ldw	r2,-24(fp)
    c660:	10000526 	beq	r2,zero,c678 <altera_avalon_jtag_uart_irq+0x1a8>
    c664:	e0bffb17 	ldw	r2,-20(fp)
    c668:	10c00d17 	ldw	r3,52(r2)
    c66c:	e0bffb17 	ldw	r2,-20(fp)
    c670:	10800c17 	ldw	r2,48(r2)
    c674:	18bfe51e 	bne	r3,r2,c60c <__alt_mem_epcs_flash_controller+0xfe00360c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c678:	e0bffa17 	ldw	r2,-24(fp)
    c67c:	103f9d26 	beq	r2,zero,c4f4 <__alt_mem_epcs_flash_controller+0xfe0034f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c680:	e0bffb17 	ldw	r2,-20(fp)
    c684:	10c00817 	ldw	r3,32(r2)
    c688:	00bfff44 	movi	r2,-3
    c68c:	1886703a 	and	r3,r3,r2
    c690:	e0bffb17 	ldw	r2,-20(fp)
    c694:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c698:	e0bffb17 	ldw	r2,-20(fp)
    c69c:	10800017 	ldw	r2,0(r2)
    c6a0:	10800104 	addi	r2,r2,4
    c6a4:	1007883a 	mov	r3,r2
    c6a8:	e0bffb17 	ldw	r2,-20(fp)
    c6ac:	10800817 	ldw	r2,32(r2)
    c6b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c6b4:	e0bffc17 	ldw	r2,-16(fp)
    c6b8:	10800104 	addi	r2,r2,4
    c6bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c6c0:	003f8c06 	br	c4f4 <__alt_mem_epcs_flash_controller+0xfe0034f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    c6c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    c6c8:	0001883a 	nop
    c6cc:	e037883a 	mov	sp,fp
    c6d0:	df000017 	ldw	fp,0(sp)
    c6d4:	dec00104 	addi	sp,sp,4
    c6d8:	f800283a 	ret

0000c6dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c6dc:	defff804 	addi	sp,sp,-32
    c6e0:	df000715 	stw	fp,28(sp)
    c6e4:	df000704 	addi	fp,sp,28
    c6e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c6ec:	e0bffb17 	ldw	r2,-20(fp)
    c6f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c6f4:	e0bff917 	ldw	r2,-28(fp)
    c6f8:	10800017 	ldw	r2,0(r2)
    c6fc:	10800104 	addi	r2,r2,4
    c700:	10800037 	ldwio	r2,0(r2)
    c704:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c708:	e0bffa17 	ldw	r2,-24(fp)
    c70c:	1081000c 	andi	r2,r2,1024
    c710:	10000b26 	beq	r2,zero,c740 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c714:	e0bff917 	ldw	r2,-28(fp)
    c718:	10800017 	ldw	r2,0(r2)
    c71c:	10800104 	addi	r2,r2,4
    c720:	1007883a 	mov	r3,r2
    c724:	e0bff917 	ldw	r2,-28(fp)
    c728:	10800817 	ldw	r2,32(r2)
    c72c:	10810014 	ori	r2,r2,1024
    c730:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    c734:	e0bff917 	ldw	r2,-28(fp)
    c738:	10000915 	stw	zero,36(r2)
    c73c:	00000a06 	br	c768 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c740:	e0bff917 	ldw	r2,-28(fp)
    c744:	10c00917 	ldw	r3,36(r2)
    c748:	00a00034 	movhi	r2,32768
    c74c:	10bfff04 	addi	r2,r2,-4
    c750:	10c00536 	bltu	r2,r3,c768 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    c754:	e0bff917 	ldw	r2,-28(fp)
    c758:	10800917 	ldw	r2,36(r2)
    c75c:	10c00044 	addi	r3,r2,1
    c760:	e0bff917 	ldw	r2,-28(fp)
    c764:	10c00915 	stw	r3,36(r2)
    c768:	d0a51a17 	ldw	r2,-27544(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c76c:	e037883a 	mov	sp,fp
    c770:	df000017 	ldw	fp,0(sp)
    c774:	dec00104 	addi	sp,sp,4
    c778:	f800283a 	ret

0000c77c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c77c:	defffd04 	addi	sp,sp,-12
    c780:	df000215 	stw	fp,8(sp)
    c784:	df000204 	addi	fp,sp,8
    c788:	e13ffe15 	stw	r4,-8(fp)
    c78c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c790:	00000506 	br	c7a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    c794:	e0bfff17 	ldw	r2,-4(fp)
    c798:	1090000c 	andi	r2,r2,16384
    c79c:	10000226 	beq	r2,zero,c7a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    c7a0:	00bffd44 	movi	r2,-11
    c7a4:	00000b06 	br	c7d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c7a8:	e0bffe17 	ldw	r2,-8(fp)
    c7ac:	10c00d17 	ldw	r3,52(r2)
    c7b0:	e0bffe17 	ldw	r2,-8(fp)
    c7b4:	10800c17 	ldw	r2,48(r2)
    c7b8:	18800526 	beq	r3,r2,c7d0 <altera_avalon_jtag_uart_close+0x54>
    c7bc:	e0bffe17 	ldw	r2,-8(fp)
    c7c0:	10c00917 	ldw	r3,36(r2)
    c7c4:	e0bffe17 	ldw	r2,-8(fp)
    c7c8:	10800117 	ldw	r2,4(r2)
    c7cc:	18bff136 	bltu	r3,r2,c794 <__alt_mem_epcs_flash_controller+0xfe003794>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c7d0:	0005883a 	mov	r2,zero
}
    c7d4:	e037883a 	mov	sp,fp
    c7d8:	df000017 	ldw	fp,0(sp)
    c7dc:	dec00104 	addi	sp,sp,4
    c7e0:	f800283a 	ret

0000c7e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c7e4:	defffa04 	addi	sp,sp,-24
    c7e8:	df000515 	stw	fp,20(sp)
    c7ec:	df000504 	addi	fp,sp,20
    c7f0:	e13ffd15 	stw	r4,-12(fp)
    c7f4:	e17ffe15 	stw	r5,-8(fp)
    c7f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    c7fc:	00bff9c4 	movi	r2,-25
    c800:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    c804:	e0bffe17 	ldw	r2,-8(fp)
    c808:	10da8060 	cmpeqi	r3,r2,27137
    c80c:	1800031e 	bne	r3,zero,c81c <altera_avalon_jtag_uart_ioctl+0x38>
    c810:	109a80a0 	cmpeqi	r2,r2,27138
    c814:	1000181e 	bne	r2,zero,c878 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    c818:	00002906 	br	c8c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c81c:	e0bffd17 	ldw	r2,-12(fp)
    c820:	10c00117 	ldw	r3,4(r2)
    c824:	00a00034 	movhi	r2,32768
    c828:	10bfffc4 	addi	r2,r2,-1
    c82c:	18802126 	beq	r3,r2,c8b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    c830:	e0bfff17 	ldw	r2,-4(fp)
    c834:	10800017 	ldw	r2,0(r2)
    c838:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c83c:	e0bffc17 	ldw	r2,-16(fp)
    c840:	10800090 	cmplti	r2,r2,2
    c844:	1000061e 	bne	r2,zero,c860 <altera_avalon_jtag_uart_ioctl+0x7c>
    c848:	e0fffc17 	ldw	r3,-16(fp)
    c84c:	00a00034 	movhi	r2,32768
    c850:	10bfffc4 	addi	r2,r2,-1
    c854:	18800226 	beq	r3,r2,c860 <altera_avalon_jtag_uart_ioctl+0x7c>
    c858:	e0bffc17 	ldw	r2,-16(fp)
    c85c:	00000206 	br	c868 <altera_avalon_jtag_uart_ioctl+0x84>
    c860:	00a00034 	movhi	r2,32768
    c864:	10bfff84 	addi	r2,r2,-2
    c868:	e0fffd17 	ldw	r3,-12(fp)
    c86c:	18800115 	stw	r2,4(r3)
      rc = 0;
    c870:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    c874:	00000f06 	br	c8b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c878:	e0bffd17 	ldw	r2,-12(fp)
    c87c:	10c00117 	ldw	r3,4(r2)
    c880:	00a00034 	movhi	r2,32768
    c884:	10bfffc4 	addi	r2,r2,-1
    c888:	18800c26 	beq	r3,r2,c8bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c88c:	e0bffd17 	ldw	r2,-12(fp)
    c890:	10c00917 	ldw	r3,36(r2)
    c894:	e0bffd17 	ldw	r2,-12(fp)
    c898:	10800117 	ldw	r2,4(r2)
    c89c:	1885803a 	cmpltu	r2,r3,r2
    c8a0:	10c03fcc 	andi	r3,r2,255
    c8a4:	e0bfff17 	ldw	r2,-4(fp)
    c8a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    c8ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    c8b0:	00000206 	br	c8bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    c8b4:	0001883a 	nop
    c8b8:	00000106 	br	c8c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    c8bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
    c8c0:	e0bffb17 	ldw	r2,-20(fp)
}
    c8c4:	e037883a 	mov	sp,fp
    c8c8:	df000017 	ldw	fp,0(sp)
    c8cc:	dec00104 	addi	sp,sp,4
    c8d0:	f800283a 	ret

0000c8d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c8d4:	defff304 	addi	sp,sp,-52
    c8d8:	dfc00c15 	stw	ra,48(sp)
    c8dc:	df000b15 	stw	fp,44(sp)
    c8e0:	df000b04 	addi	fp,sp,44
    c8e4:	e13ffc15 	stw	r4,-16(fp)
    c8e8:	e17ffd15 	stw	r5,-12(fp)
    c8ec:	e1bffe15 	stw	r6,-8(fp)
    c8f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    c8f4:	e0bffd17 	ldw	r2,-12(fp)
    c8f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c8fc:	00004706 	br	ca1c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c900:	e0bffc17 	ldw	r2,-16(fp)
    c904:	10800a17 	ldw	r2,40(r2)
    c908:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c90c:	e0bffc17 	ldw	r2,-16(fp)
    c910:	10800b17 	ldw	r2,44(r2)
    c914:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    c918:	e0fff717 	ldw	r3,-36(fp)
    c91c:	e0bff817 	ldw	r2,-32(fp)
    c920:	18800536 	bltu	r3,r2,c938 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c924:	e0fff717 	ldw	r3,-36(fp)
    c928:	e0bff817 	ldw	r2,-32(fp)
    c92c:	1885c83a 	sub	r2,r3,r2
    c930:	e0bff615 	stw	r2,-40(fp)
    c934:	00000406 	br	c948 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c938:	00c20004 	movi	r3,2048
    c93c:	e0bff817 	ldw	r2,-32(fp)
    c940:	1885c83a 	sub	r2,r3,r2
    c944:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    c948:	e0bff617 	ldw	r2,-40(fp)
    c94c:	10001e26 	beq	r2,zero,c9c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    c950:	e0fffe17 	ldw	r3,-8(fp)
    c954:	e0bff617 	ldw	r2,-40(fp)
    c958:	1880022e 	bgeu	r3,r2,c964 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    c95c:	e0bffe17 	ldw	r2,-8(fp)
    c960:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c964:	e0bffc17 	ldw	r2,-16(fp)
    c968:	10c00e04 	addi	r3,r2,56
    c96c:	e0bff817 	ldw	r2,-32(fp)
    c970:	1885883a 	add	r2,r3,r2
    c974:	e1bff617 	ldw	r6,-40(fp)
    c978:	100b883a 	mov	r5,r2
    c97c:	e13ff517 	ldw	r4,-44(fp)
    c980:	000a0f40 	call	a0f4 <memcpy>
      ptr   += n;
    c984:	e0fff517 	ldw	r3,-44(fp)
    c988:	e0bff617 	ldw	r2,-40(fp)
    c98c:	1885883a 	add	r2,r3,r2
    c990:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    c994:	e0fffe17 	ldw	r3,-8(fp)
    c998:	e0bff617 	ldw	r2,-40(fp)
    c99c:	1885c83a 	sub	r2,r3,r2
    c9a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c9a4:	e0fff817 	ldw	r3,-32(fp)
    c9a8:	e0bff617 	ldw	r2,-40(fp)
    c9ac:	1885883a 	add	r2,r3,r2
    c9b0:	10c1ffcc 	andi	r3,r2,2047
    c9b4:	e0bffc17 	ldw	r2,-16(fp)
    c9b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c9bc:	e0bffe17 	ldw	r2,-8(fp)
    c9c0:	00bfcf16 	blt	zero,r2,c900 <__alt_mem_epcs_flash_controller+0xfe003900>
    c9c4:	00000106 	br	c9cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    c9c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    c9cc:	e0fff517 	ldw	r3,-44(fp)
    c9d0:	e0bffd17 	ldw	r2,-12(fp)
    c9d4:	1880141e 	bne	r3,r2,ca28 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c9d8:	e0bfff17 	ldw	r2,-4(fp)
    c9dc:	1090000c 	andi	r2,r2,16384
    c9e0:	1000131e 	bne	r2,zero,ca30 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c9e4:	0001883a 	nop
    c9e8:	e0bffc17 	ldw	r2,-16(fp)
    c9ec:	10c00a17 	ldw	r3,40(r2)
    c9f0:	e0bff717 	ldw	r2,-36(fp)
    c9f4:	1880051e 	bne	r3,r2,ca0c <altera_avalon_jtag_uart_read+0x138>
    c9f8:	e0bffc17 	ldw	r2,-16(fp)
    c9fc:	10c00917 	ldw	r3,36(r2)
    ca00:	e0bffc17 	ldw	r2,-16(fp)
    ca04:	10800117 	ldw	r2,4(r2)
    ca08:	18bff736 	bltu	r3,r2,c9e8 <__alt_mem_epcs_flash_controller+0xfe0039e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ca0c:	e0bffc17 	ldw	r2,-16(fp)
    ca10:	10c00a17 	ldw	r3,40(r2)
    ca14:	e0bff717 	ldw	r2,-36(fp)
    ca18:	18800726 	beq	r3,r2,ca38 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ca1c:	e0bffe17 	ldw	r2,-8(fp)
    ca20:	00bfb716 	blt	zero,r2,c900 <__alt_mem_epcs_flash_controller+0xfe003900>
    ca24:	00000506 	br	ca3c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ca28:	0001883a 	nop
    ca2c:	00000306 	br	ca3c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    ca30:	0001883a 	nop
    ca34:	00000106 	br	ca3c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ca38:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ca3c:	e0fff517 	ldw	r3,-44(fp)
    ca40:	e0bffd17 	ldw	r2,-12(fp)
    ca44:	18801826 	beq	r3,r2,caa8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ca48:	0005303a 	rdctl	r2,status
    ca4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ca50:	e0fffb17 	ldw	r3,-20(fp)
    ca54:	00bfff84 	movi	r2,-2
    ca58:	1884703a 	and	r2,r3,r2
    ca5c:	1001703a 	wrctl	status,r2
  
  return context;
    ca60:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ca64:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ca68:	e0bffc17 	ldw	r2,-16(fp)
    ca6c:	10800817 	ldw	r2,32(r2)
    ca70:	10c00054 	ori	r3,r2,1
    ca74:	e0bffc17 	ldw	r2,-16(fp)
    ca78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ca7c:	e0bffc17 	ldw	r2,-16(fp)
    ca80:	10800017 	ldw	r2,0(r2)
    ca84:	10800104 	addi	r2,r2,4
    ca88:	1007883a 	mov	r3,r2
    ca8c:	e0bffc17 	ldw	r2,-16(fp)
    ca90:	10800817 	ldw	r2,32(r2)
    ca94:	18800035 	stwio	r2,0(r3)
    ca98:	e0bffa17 	ldw	r2,-24(fp)
    ca9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    caa0:	e0bff917 	ldw	r2,-28(fp)
    caa4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    caa8:	e0fff517 	ldw	r3,-44(fp)
    caac:	e0bffd17 	ldw	r2,-12(fp)
    cab0:	18800426 	beq	r3,r2,cac4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    cab4:	e0fff517 	ldw	r3,-44(fp)
    cab8:	e0bffd17 	ldw	r2,-12(fp)
    cabc:	1885c83a 	sub	r2,r3,r2
    cac0:	00000606 	br	cadc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    cac4:	e0bfff17 	ldw	r2,-4(fp)
    cac8:	1090000c 	andi	r2,r2,16384
    cacc:	10000226 	beq	r2,zero,cad8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    cad0:	00bffd44 	movi	r2,-11
    cad4:	00000106 	br	cadc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    cad8:	00bffec4 	movi	r2,-5
}
    cadc:	e037883a 	mov	sp,fp
    cae0:	dfc00117 	ldw	ra,4(sp)
    cae4:	df000017 	ldw	fp,0(sp)
    cae8:	dec00204 	addi	sp,sp,8
    caec:	f800283a 	ret

0000caf0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    caf0:	defff304 	addi	sp,sp,-52
    caf4:	dfc00c15 	stw	ra,48(sp)
    caf8:	df000b15 	stw	fp,44(sp)
    cafc:	df000b04 	addi	fp,sp,44
    cb00:	e13ffc15 	stw	r4,-16(fp)
    cb04:	e17ffd15 	stw	r5,-12(fp)
    cb08:	e1bffe15 	stw	r6,-8(fp)
    cb0c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    cb10:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    cb14:	e0bffd17 	ldw	r2,-12(fp)
    cb18:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cb1c:	00003706 	br	cbfc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    cb20:	e0bffc17 	ldw	r2,-16(fp)
    cb24:	10800c17 	ldw	r2,48(r2)
    cb28:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    cb2c:	e0bffc17 	ldw	r2,-16(fp)
    cb30:	10800d17 	ldw	r2,52(r2)
    cb34:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    cb38:	e0fff917 	ldw	r3,-28(fp)
    cb3c:	e0bff517 	ldw	r2,-44(fp)
    cb40:	1880062e 	bgeu	r3,r2,cb5c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    cb44:	e0fff517 	ldw	r3,-44(fp)
    cb48:	e0bff917 	ldw	r2,-28(fp)
    cb4c:	1885c83a 	sub	r2,r3,r2
    cb50:	10bfffc4 	addi	r2,r2,-1
    cb54:	e0bff615 	stw	r2,-40(fp)
    cb58:	00000b06 	br	cb88 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    cb5c:	e0bff517 	ldw	r2,-44(fp)
    cb60:	10000526 	beq	r2,zero,cb78 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    cb64:	00c20004 	movi	r3,2048
    cb68:	e0bff917 	ldw	r2,-28(fp)
    cb6c:	1885c83a 	sub	r2,r3,r2
    cb70:	e0bff615 	stw	r2,-40(fp)
    cb74:	00000406 	br	cb88 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    cb78:	00c1ffc4 	movi	r3,2047
    cb7c:	e0bff917 	ldw	r2,-28(fp)
    cb80:	1885c83a 	sub	r2,r3,r2
    cb84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    cb88:	e0bff617 	ldw	r2,-40(fp)
    cb8c:	10001e26 	beq	r2,zero,cc08 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    cb90:	e0fffe17 	ldw	r3,-8(fp)
    cb94:	e0bff617 	ldw	r2,-40(fp)
    cb98:	1880022e 	bgeu	r3,r2,cba4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    cb9c:	e0bffe17 	ldw	r2,-8(fp)
    cba0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    cba4:	e0bffc17 	ldw	r2,-16(fp)
    cba8:	10c20e04 	addi	r3,r2,2104
    cbac:	e0bff917 	ldw	r2,-28(fp)
    cbb0:	1885883a 	add	r2,r3,r2
    cbb4:	e1bff617 	ldw	r6,-40(fp)
    cbb8:	e17ffd17 	ldw	r5,-12(fp)
    cbbc:	1009883a 	mov	r4,r2
    cbc0:	000a0f40 	call	a0f4 <memcpy>
      ptr   += n;
    cbc4:	e0fffd17 	ldw	r3,-12(fp)
    cbc8:	e0bff617 	ldw	r2,-40(fp)
    cbcc:	1885883a 	add	r2,r3,r2
    cbd0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    cbd4:	e0fffe17 	ldw	r3,-8(fp)
    cbd8:	e0bff617 	ldw	r2,-40(fp)
    cbdc:	1885c83a 	sub	r2,r3,r2
    cbe0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cbe4:	e0fff917 	ldw	r3,-28(fp)
    cbe8:	e0bff617 	ldw	r2,-40(fp)
    cbec:	1885883a 	add	r2,r3,r2
    cbf0:	10c1ffcc 	andi	r3,r2,2047
    cbf4:	e0bffc17 	ldw	r2,-16(fp)
    cbf8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cbfc:	e0bffe17 	ldw	r2,-8(fp)
    cc00:	00bfc716 	blt	zero,r2,cb20 <__alt_mem_epcs_flash_controller+0xfe003b20>
    cc04:	00000106 	br	cc0c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    cc08:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cc0c:	0005303a 	rdctl	r2,status
    cc10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cc14:	e0fffb17 	ldw	r3,-20(fp)
    cc18:	00bfff84 	movi	r2,-2
    cc1c:	1884703a 	and	r2,r3,r2
    cc20:	1001703a 	wrctl	status,r2
  
  return context;
    cc24:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    cc28:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cc2c:	e0bffc17 	ldw	r2,-16(fp)
    cc30:	10800817 	ldw	r2,32(r2)
    cc34:	10c00094 	ori	r3,r2,2
    cc38:	e0bffc17 	ldw	r2,-16(fp)
    cc3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cc40:	e0bffc17 	ldw	r2,-16(fp)
    cc44:	10800017 	ldw	r2,0(r2)
    cc48:	10800104 	addi	r2,r2,4
    cc4c:	1007883a 	mov	r3,r2
    cc50:	e0bffc17 	ldw	r2,-16(fp)
    cc54:	10800817 	ldw	r2,32(r2)
    cc58:	18800035 	stwio	r2,0(r3)
    cc5c:	e0bffa17 	ldw	r2,-24(fp)
    cc60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc64:	e0bff817 	ldw	r2,-32(fp)
    cc68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    cc6c:	e0bffe17 	ldw	r2,-8(fp)
    cc70:	0080100e 	bge	zero,r2,ccb4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    cc74:	e0bfff17 	ldw	r2,-4(fp)
    cc78:	1090000c 	andi	r2,r2,16384
    cc7c:	1000101e 	bne	r2,zero,ccc0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    cc80:	0001883a 	nop
    cc84:	e0bffc17 	ldw	r2,-16(fp)
    cc88:	10c00d17 	ldw	r3,52(r2)
    cc8c:	e0bff517 	ldw	r2,-44(fp)
    cc90:	1880051e 	bne	r3,r2,cca8 <altera_avalon_jtag_uart_write+0x1b8>
    cc94:	e0bffc17 	ldw	r2,-16(fp)
    cc98:	10c00917 	ldw	r3,36(r2)
    cc9c:	e0bffc17 	ldw	r2,-16(fp)
    cca0:	10800117 	ldw	r2,4(r2)
    cca4:	18bff736 	bltu	r3,r2,cc84 <__alt_mem_epcs_flash_controller+0xfe003c84>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    cca8:	e0bffc17 	ldw	r2,-16(fp)
    ccac:	10800917 	ldw	r2,36(r2)
    ccb0:	1000051e 	bne	r2,zero,ccc8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    ccb4:	e0bffe17 	ldw	r2,-8(fp)
    ccb8:	00bfd016 	blt	zero,r2,cbfc <__alt_mem_epcs_flash_controller+0xfe003bfc>
    ccbc:	00000306 	br	cccc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    ccc0:	0001883a 	nop
    ccc4:	00000106 	br	cccc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    ccc8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    cccc:	e0fffd17 	ldw	r3,-12(fp)
    ccd0:	e0bff717 	ldw	r2,-36(fp)
    ccd4:	18800426 	beq	r3,r2,cce8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    ccd8:	e0fffd17 	ldw	r3,-12(fp)
    ccdc:	e0bff717 	ldw	r2,-36(fp)
    cce0:	1885c83a 	sub	r2,r3,r2
    cce4:	00000606 	br	cd00 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    cce8:	e0bfff17 	ldw	r2,-4(fp)
    ccec:	1090000c 	andi	r2,r2,16384
    ccf0:	10000226 	beq	r2,zero,ccfc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    ccf4:	00bffd44 	movi	r2,-11
    ccf8:	00000106 	br	cd00 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ccfc:	00bffec4 	movi	r2,-5
}
    cd00:	e037883a 	mov	sp,fp
    cd04:	dfc00117 	ldw	ra,4(sp)
    cd08:	df000017 	ldw	fp,0(sp)
    cd0c:	dec00204 	addi	sp,sp,8
    cd10:	f800283a 	ret

0000cd14 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    cd14:	defff904 	addi	sp,sp,-28
    cd18:	dfc00615 	stw	ra,24(sp)
    cd1c:	df000515 	stw	fp,20(sp)
    cd20:	df000504 	addi	fp,sp,20
    cd24:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    cd28:	00800144 	movi	r2,5
    cd2c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    cd30:	d8000215 	stw	zero,8(sp)
    cd34:	e0bffe44 	addi	r2,fp,-7
    cd38:	d8800115 	stw	r2,4(sp)
    cd3c:	00800044 	movi	r2,1
    cd40:	d8800015 	stw	r2,0(sp)
    cd44:	e1fffe04 	addi	r7,fp,-8
    cd48:	01800044 	movi	r6,1
    cd4c:	000b883a 	mov	r5,zero
    cd50:	e13fff17 	ldw	r4,-4(fp)
    cd54:	000df840 	call	df84 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    cd58:	e0bffe43 	ldbu	r2,-7(fp)
}
    cd5c:	e037883a 	mov	sp,fp
    cd60:	dfc00117 	ldw	ra,4(sp)
    cd64:	df000017 	ldw	fp,0(sp)
    cd68:	dec00204 	addi	sp,sp,8
    cd6c:	f800283a 	ret

0000cd70 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    cd70:	defffd04 	addi	sp,sp,-12
    cd74:	dfc00215 	stw	ra,8(sp)
    cd78:	df000115 	stw	fp,4(sp)
    cd7c:	df000104 	addi	fp,sp,4
    cd80:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    cd84:	e13fff17 	ldw	r4,-4(fp)
    cd88:	000cd140 	call	cd14 <epcs_read_status_register>
    cd8c:	10803fcc 	andi	r2,r2,255
    cd90:	1080004c 	andi	r2,r2,1
}
    cd94:	e037883a 	mov	sp,fp
    cd98:	dfc00117 	ldw	ra,4(sp)
    cd9c:	df000017 	ldw	fp,0(sp)
    cda0:	dec00204 	addi	sp,sp,8
    cda4:	f800283a 	ret

0000cda8 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    cda8:	defffd04 	addi	sp,sp,-12
    cdac:	dfc00215 	stw	ra,8(sp)
    cdb0:	df000115 	stw	fp,4(sp)
    cdb4:	df000104 	addi	fp,sp,4
    cdb8:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    cdbc:	0001883a 	nop
    cdc0:	e13fff17 	ldw	r4,-4(fp)
    cdc4:	000cd700 	call	cd70 <epcs_test_wip>
    cdc8:	103ffd1e 	bne	r2,zero,cdc0 <__alt_mem_epcs_flash_controller+0xfe003dc0>
  {
  }
}
    cdcc:	0001883a 	nop
    cdd0:	e037883a 	mov	sp,fp
    cdd4:	dfc00117 	ldw	ra,4(sp)
    cdd8:	df000017 	ldw	fp,0(sp)
    cddc:	dec00204 	addi	sp,sp,8
    cde0:	f800283a 	ret

0000cde4 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    cde4:	defff604 	addi	sp,sp,-40
    cde8:	dfc00915 	stw	ra,36(sp)
    cdec:	df000815 	stw	fp,32(sp)
    cdf0:	df000804 	addi	fp,sp,32
    cdf4:	e13ffd15 	stw	r4,-12(fp)
    cdf8:	e17ffe15 	stw	r5,-8(fp)
    cdfc:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    ce00:	e0bfff17 	ldw	r2,-4(fp)
    ce04:	10001226 	beq	r2,zero,ce50 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    ce08:	00bff604 	movi	r2,-40
    ce0c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    ce10:	e0bffe17 	ldw	r2,-8(fp)
    ce14:	1004d63a 	srli	r2,r2,24
    ce18:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    ce1c:	e0bffe17 	ldw	r2,-8(fp)
    ce20:	1004d43a 	srli	r2,r2,16
    ce24:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    ce28:	e0bffe17 	ldw	r2,-8(fp)
    ce2c:	1004d23a 	srli	r2,r2,8
    ce30:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    ce34:	e0bffe17 	ldw	r2,-8(fp)
    ce38:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    ce3c:	00800144 	movi	r2,5
    ce40:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    ce44:	e13ffd17 	ldw	r4,-12(fp)
    ce48:	000d2980 	call	d298 <epcs_enter_4_bytes_mode>
    ce4c:	00000c06 	br	ce80 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
    ce50:	00bff604 	movi	r2,-40
    ce54:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    ce58:	e0bffe17 	ldw	r2,-8(fp)
    ce5c:	1004d43a 	srli	r2,r2,16
    ce60:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    ce64:	e0bffe17 	ldw	r2,-8(fp)
    ce68:	1004d23a 	srli	r2,r2,8
    ce6c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    ce70:	e0bffe17 	ldw	r2,-8(fp)
    ce74:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    ce78:	00800104 	movi	r2,4
    ce7c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    ce80:	e13ffd17 	ldw	r4,-12(fp)
    ce84:	000cfd40 	call	cfd4 <epcs_write_enable>

  alt_avalon_spi_command(
    ce88:	e0bffb03 	ldbu	r2,-20(fp)
    ce8c:	e0fffb44 	addi	r3,fp,-19
    ce90:	d8000215 	stw	zero,8(sp)
    ce94:	d8000115 	stw	zero,4(sp)
    ce98:	d8000015 	stw	zero,0(sp)
    ce9c:	180f883a 	mov	r7,r3
    cea0:	100d883a 	mov	r6,r2
    cea4:	000b883a 	mov	r5,zero
    cea8:	e13ffd17 	ldw	r4,-12(fp)
    ceac:	000df840 	call	df84 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    ceb0:	e13ffd17 	ldw	r4,-12(fp)
    ceb4:	000cda80 	call	cda8 <epcs_await_wip_released>

  if(four_bytes_mode)
    ceb8:	e0bfff17 	ldw	r2,-4(fp)
    cebc:	10000226 	beq	r2,zero,cec8 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    cec0:	e13ffd17 	ldw	r4,-12(fp)
    cec4:	000d2f40 	call	d2f4 <epcs_exit_4_bytes_mode>
  }
}
    cec8:	0001883a 	nop
    cecc:	e037883a 	mov	sp,fp
    ced0:	dfc00117 	ldw	ra,4(sp)
    ced4:	df000017 	ldw	fp,0(sp)
    ced8:	dec00204 	addi	sp,sp,8
    cedc:	f800283a 	ret

0000cee0 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    cee0:	defff404 	addi	sp,sp,-48
    cee4:	dfc00b15 	stw	ra,44(sp)
    cee8:	df000a15 	stw	fp,40(sp)
    ceec:	df000a04 	addi	fp,sp,40
    cef0:	e13ffc15 	stw	r4,-16(fp)
    cef4:	e17ffd15 	stw	r5,-12(fp)
    cef8:	e1bffe15 	stw	r6,-8(fp)
    cefc:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    cf00:	008000c4 	movi	r2,3
    cf04:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    cf08:	e0800217 	ldw	r2,8(fp)
    cf0c:	10001026 	beq	r2,zero,cf50 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    cf10:	e0bffd17 	ldw	r2,-12(fp)
    cf14:	1004d63a 	srli	r2,r2,24
    cf18:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    cf1c:	e0bffd17 	ldw	r2,-12(fp)
    cf20:	1005d43a 	srai	r2,r2,16
    cf24:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    cf28:	e0bffd17 	ldw	r2,-12(fp)
    cf2c:	1005d23a 	srai	r2,r2,8
    cf30:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    cf34:	e0bffd17 	ldw	r2,-12(fp)
    cf38:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    cf3c:	00800144 	movi	r2,5
    cf40:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    cf44:	e13ffc17 	ldw	r4,-16(fp)
    cf48:	000d2980 	call	d298 <epcs_enter_4_bytes_mode>
    cf4c:	00000a06 	br	cf78 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    cf50:	e0bffd17 	ldw	r2,-12(fp)
    cf54:	1005d43a 	srai	r2,r2,16
    cf58:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    cf5c:	e0bffd17 	ldw	r2,-12(fp)
    cf60:	1005d23a 	srai	r2,r2,8
    cf64:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    cf68:	e0bffd17 	ldw	r2,-12(fp)
    cf6c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    cf70:	00800104 	movi	r2,4
    cf74:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    cf78:	e13ffc17 	ldw	r4,-16(fp)
    cf7c:	000cda80 	call	cda8 <epcs_await_wip_released>

  alt_avalon_spi_command(
    cf80:	e0bfff17 	ldw	r2,-4(fp)
    cf84:	e13ffa04 	addi	r4,fp,-24
    cf88:	d8000215 	stw	zero,8(sp)
    cf8c:	e0fffe17 	ldw	r3,-8(fp)
    cf90:	d8c00115 	stw	r3,4(sp)
    cf94:	d8800015 	stw	r2,0(sp)
    cf98:	200f883a 	mov	r7,r4
    cf9c:	e1bff917 	ldw	r6,-28(fp)
    cfa0:	000b883a 	mov	r5,zero
    cfa4:	e13ffc17 	ldw	r4,-16(fp)
    cfa8:	000df840 	call	df84 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    cfac:	e0800217 	ldw	r2,8(fp)
    cfb0:	10000226 	beq	r2,zero,cfbc <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
    cfb4:	e13ffc17 	ldw	r4,-16(fp)
    cfb8:	000d2f40 	call	d2f4 <epcs_exit_4_bytes_mode>
  }

  return length;
    cfbc:	e0bfff17 	ldw	r2,-4(fp)
}
    cfc0:	e037883a 	mov	sp,fp
    cfc4:	dfc00117 	ldw	ra,4(sp)
    cfc8:	df000017 	ldw	fp,0(sp)
    cfcc:	dec00204 	addi	sp,sp,8
    cfd0:	f800283a 	ret

0000cfd4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    cfd4:	defff904 	addi	sp,sp,-28
    cfd8:	dfc00615 	stw	ra,24(sp)
    cfdc:	df000515 	stw	fp,20(sp)
    cfe0:	df000504 	addi	fp,sp,20
    cfe4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    cfe8:	00800184 	movi	r2,6
    cfec:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    cff0:	d8000215 	stw	zero,8(sp)
    cff4:	d8000115 	stw	zero,4(sp)
    cff8:	d8000015 	stw	zero,0(sp)
    cffc:	e1fffe04 	addi	r7,fp,-8
    d000:	01800044 	movi	r6,1
    d004:	000b883a 	mov	r5,zero
    d008:	e13fff17 	ldw	r4,-4(fp)
    d00c:	000df840 	call	df84 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    d010:	0001883a 	nop
    d014:	e037883a 	mov	sp,fp
    d018:	dfc00117 	ldw	ra,4(sp)
    d01c:	df000017 	ldw	fp,0(sp)
    d020:	dec00204 	addi	sp,sp,8
    d024:	f800283a 	ret

0000d028 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    d028:	defff804 	addi	sp,sp,-32
    d02c:	dfc00715 	stw	ra,28(sp)
    d030:	df000615 	stw	fp,24(sp)
    d034:	df000604 	addi	fp,sp,24
    d038:	e13ffe15 	stw	r4,-8(fp)
    d03c:	2805883a 	mov	r2,r5
    d040:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    d044:	00800044 	movi	r2,1
    d048:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    d04c:	e0bfff03 	ldbu	r2,-4(fp)
    d050:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    d054:	d8000215 	stw	zero,8(sp)
    d058:	d8000115 	stw	zero,4(sp)
    d05c:	d8000015 	stw	zero,0(sp)
    d060:	e1fffd04 	addi	r7,fp,-12
    d064:	01800084 	movi	r6,2
    d068:	000b883a 	mov	r5,zero
    d06c:	e13ffe17 	ldw	r4,-8(fp)
    d070:	000df840 	call	df84 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    d074:	e13ffe17 	ldw	r4,-8(fp)
    d078:	000cda80 	call	cda8 <epcs_await_wip_released>
}
    d07c:	0001883a 	nop
    d080:	e037883a 	mov	sp,fp
    d084:	dfc00117 	ldw	ra,4(sp)
    d088:	df000017 	ldw	fp,0(sp)
    d08c:	dec00204 	addi	sp,sp,8
    d090:	f800283a 	ret

0000d094 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    d094:	defff404 	addi	sp,sp,-48
    d098:	dfc00b15 	stw	ra,44(sp)
    d09c:	df000a15 	stw	fp,40(sp)
    d0a0:	df000a04 	addi	fp,sp,40
    d0a4:	e13ffc15 	stw	r4,-16(fp)
    d0a8:	e17ffd15 	stw	r5,-12(fp)
    d0ac:	e1bffe15 	stw	r6,-8(fp)
    d0b0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    d0b4:	00800084 	movi	r2,2
    d0b8:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    d0bc:	e0800217 	ldw	r2,8(fp)
    d0c0:	10001026 	beq	r2,zero,d104 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
    d0c4:	e0bffd17 	ldw	r2,-12(fp)
    d0c8:	1004d63a 	srli	r2,r2,24
    d0cc:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    d0d0:	e0bffd17 	ldw	r2,-12(fp)
    d0d4:	1005d43a 	srai	r2,r2,16
    d0d8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    d0dc:	e0bffd17 	ldw	r2,-12(fp)
    d0e0:	1005d23a 	srai	r2,r2,8
    d0e4:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    d0e8:	e0bffd17 	ldw	r2,-12(fp)
    d0ec:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    d0f0:	00800144 	movi	r2,5
    d0f4:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    d0f8:	e13ffc17 	ldw	r4,-16(fp)
    d0fc:	000d2980 	call	d298 <epcs_enter_4_bytes_mode>
    d100:	00000a06 	br	d12c <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    d104:	e0bffd17 	ldw	r2,-12(fp)
    d108:	1005d43a 	srai	r2,r2,16
    d10c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    d110:	e0bffd17 	ldw	r2,-12(fp)
    d114:	1005d23a 	srai	r2,r2,8
    d118:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    d11c:	e0bffd17 	ldw	r2,-12(fp)
    d120:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    d124:	00800104 	movi	r2,4
    d128:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    d12c:	e13ffc17 	ldw	r4,-16(fp)
    d130:	000cfd40 	call	cfd4 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    d134:	e0fffa04 	addi	r3,fp,-24
    d138:	00800044 	movi	r2,1
    d13c:	d8800215 	stw	r2,8(sp)
    d140:	d8000115 	stw	zero,4(sp)
    d144:	d8000015 	stw	zero,0(sp)
    d148:	180f883a 	mov	r7,r3
    d14c:	e1bff917 	ldw	r6,-28(fp)
    d150:	000b883a 	mov	r5,zero
    d154:	e13ffc17 	ldw	r4,-16(fp)
    d158:	000df840 	call	df84 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    d15c:	e0bfff17 	ldw	r2,-4(fp)
    d160:	d8000215 	stw	zero,8(sp)
    d164:	d8000115 	stw	zero,4(sp)
    d168:	d8000015 	stw	zero,0(sp)
    d16c:	e1fffe17 	ldw	r7,-8(fp)
    d170:	100d883a 	mov	r6,r2
    d174:	000b883a 	mov	r5,zero
    d178:	e13ffc17 	ldw	r4,-16(fp)
    d17c:	000df840 	call	df84 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    d180:	e13ffc17 	ldw	r4,-16(fp)
    d184:	000cda80 	call	cda8 <epcs_await_wip_released>

  if(four_bytes_mode)
    d188:	e0800217 	ldw	r2,8(fp)
    d18c:	10000226 	beq	r2,zero,d198 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
    d190:	e13ffc17 	ldw	r4,-16(fp)
    d194:	000d2f40 	call	d2f4 <epcs_exit_4_bytes_mode>
  }

  return length;
    d198:	e0bfff17 	ldw	r2,-4(fp)
}
    d19c:	e037883a 	mov	sp,fp
    d1a0:	dfc00117 	ldw	ra,4(sp)
    d1a4:	df000017 	ldw	fp,0(sp)
    d1a8:	dec00204 	addi	sp,sp,8
    d1ac:	f800283a 	ret

0000d1b0 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    d1b0:	defff804 	addi	sp,sp,-32
    d1b4:	dfc00715 	stw	ra,28(sp)
    d1b8:	df000615 	stw	fp,24(sp)
    d1bc:	df000604 	addi	fp,sp,24
    d1c0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    d1c4:	00bfeac4 	movi	r2,-85
    d1c8:	e0bffd05 	stb	r2,-12(fp)
    d1cc:	e03ffd45 	stb	zero,-11(fp)
    d1d0:	e03ffd85 	stb	zero,-10(fp)
    d1d4:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    d1d8:	d8000215 	stw	zero,8(sp)
    d1dc:	e0bffe04 	addi	r2,fp,-8
    d1e0:	d8800115 	stw	r2,4(sp)
    d1e4:	00800044 	movi	r2,1
    d1e8:	d8800015 	stw	r2,0(sp)
    d1ec:	e1fffd04 	addi	r7,fp,-12
    d1f0:	01800104 	movi	r6,4
    d1f4:	000b883a 	mov	r5,zero
    d1f8:	e13fff17 	ldw	r4,-4(fp)
    d1fc:	000df840 	call	df84 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    d200:	e0bffe03 	ldbu	r2,-8(fp)
}
    d204:	e037883a 	mov	sp,fp
    d208:	dfc00117 	ldw	ra,4(sp)
    d20c:	df000017 	ldw	fp,0(sp)
    d210:	dec00204 	addi	sp,sp,8
    d214:	f800283a 	ret

0000d218 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    d218:	defff904 	addi	sp,sp,-28
    d21c:	dfc00615 	stw	ra,24(sp)
    d220:	df000515 	stw	fp,20(sp)
    d224:	df000504 	addi	fp,sp,20
    d228:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    d22c:	00bfe7c4 	movi	r2,-97
    d230:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    d234:	d8000215 	stw	zero,8(sp)
    d238:	e0bffe44 	addi	r2,fp,-7
    d23c:	d8800115 	stw	r2,4(sp)
    d240:	008000c4 	movi	r2,3
    d244:	d8800015 	stw	r2,0(sp)
    d248:	e1fffe04 	addi	r7,fp,-8
    d24c:	01800044 	movi	r6,1
    d250:	000b883a 	mov	r5,zero
    d254:	e13fff17 	ldw	r4,-4(fp)
    d258:	000df840 	call	df84 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    d25c:	e0bffe43 	ldbu	r2,-7(fp)
    d260:	10803fcc 	andi	r2,r2,255
    d264:	1006943a 	slli	r3,r2,16
    d268:	e0bffe83 	ldbu	r2,-6(fp)
    d26c:	10803fcc 	andi	r2,r2,255
    d270:	1004923a 	slli	r2,r2,8
    d274:	1886b03a 	or	r3,r3,r2
    d278:	e0bffec3 	ldbu	r2,-5(fp)
    d27c:	10803fcc 	andi	r2,r2,255
    d280:	1884b03a 	or	r2,r3,r2
}
    d284:	e037883a 	mov	sp,fp
    d288:	dfc00117 	ldw	ra,4(sp)
    d28c:	df000017 	ldw	fp,0(sp)
    d290:	dec00204 	addi	sp,sp,8
    d294:	f800283a 	ret

0000d298 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    d298:	defff904 	addi	sp,sp,-28
    d29c:	dfc00615 	stw	ra,24(sp)
    d2a0:	df000515 	stw	fp,20(sp)
    d2a4:	df000504 	addi	fp,sp,20
    d2a8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    d2ac:	00bfedc4 	movi	r2,-73
    d2b0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    d2b4:	e13fff17 	ldw	r4,-4(fp)
    d2b8:	000cfd40 	call	cfd4 <epcs_write_enable>

  alt_avalon_spi_command(
    d2bc:	d8000215 	stw	zero,8(sp)
    d2c0:	d8000115 	stw	zero,4(sp)
    d2c4:	d8000015 	stw	zero,0(sp)
    d2c8:	e1fffe04 	addi	r7,fp,-8
    d2cc:	01800044 	movi	r6,1
    d2d0:	000b883a 	mov	r5,zero
    d2d4:	e13fff17 	ldw	r4,-4(fp)
    d2d8:	000df840 	call	df84 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    d2dc:	0001883a 	nop
}
    d2e0:	e037883a 	mov	sp,fp
    d2e4:	dfc00117 	ldw	ra,4(sp)
    d2e8:	df000017 	ldw	fp,0(sp)
    d2ec:	dec00204 	addi	sp,sp,8
    d2f0:	f800283a 	ret

0000d2f4 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    d2f4:	defff904 	addi	sp,sp,-28
    d2f8:	dfc00615 	stw	ra,24(sp)
    d2fc:	df000515 	stw	fp,20(sp)
    d300:	df000504 	addi	fp,sp,20
    d304:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    d308:	00bffa44 	movi	r2,-23
    d30c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    d310:	e13fff17 	ldw	r4,-4(fp)
    d314:	000cfd40 	call	cfd4 <epcs_write_enable>

  alt_avalon_spi_command(
    d318:	d8000215 	stw	zero,8(sp)
    d31c:	d8000115 	stw	zero,4(sp)
    d320:	d8000015 	stw	zero,0(sp)
    d324:	e1fffe04 	addi	r7,fp,-8
    d328:	01800044 	movi	r6,1
    d32c:	000b883a 	mov	r5,zero
    d330:	e13fff17 	ldw	r4,-4(fp)
    d334:	000df840 	call	df84 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    d338:	0001883a 	nop
}
    d33c:	e037883a 	mov	sp,fp
    d340:	dfc00117 	ldw	ra,4(sp)
    d344:	df000017 	ldw	fp,0(sp)
    d348:	dec00204 	addi	sp,sp,8
    d34c:	f800283a 	ret

0000d350 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    d350:	defff504 	addi	sp,sp,-44
    d354:	df000a15 	stw	fp,40(sp)
    d358:	df000a04 	addi	fp,sp,40
    d35c:	e13ffc15 	stw	r4,-16(fp)
    d360:	e17ffd15 	stw	r5,-12(fp)
    d364:	e1bffe15 	stw	r6,-8(fp)
    d368:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    d36c:	e03ff615 	stw	zero,-40(fp)
    d370:	d0a51a17 	ldw	r2,-27544(gp)
  
  if (alt_ticks_per_second ())
    d374:	10003c26 	beq	r2,zero,d468 <alt_alarm_start+0x118>
  {
    if (alarm)
    d378:	e0bffc17 	ldw	r2,-16(fp)
    d37c:	10003826 	beq	r2,zero,d460 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    d380:	e0bffc17 	ldw	r2,-16(fp)
    d384:	e0fffe17 	ldw	r3,-8(fp)
    d388:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    d38c:	e0bffc17 	ldw	r2,-16(fp)
    d390:	e0ffff17 	ldw	r3,-4(fp)
    d394:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d398:	0005303a 	rdctl	r2,status
    d39c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d3a0:	e0fff917 	ldw	r3,-28(fp)
    d3a4:	00bfff84 	movi	r2,-2
    d3a8:	1884703a 	and	r2,r3,r2
    d3ac:	1001703a 	wrctl	status,r2
  
  return context;
    d3b0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    d3b4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    d3b8:	d0a51b17 	ldw	r2,-27540(gp)
      
      current_nticks = alt_nticks();
    d3bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    d3c0:	e0fffd17 	ldw	r3,-12(fp)
    d3c4:	e0bff617 	ldw	r2,-40(fp)
    d3c8:	1885883a 	add	r2,r3,r2
    d3cc:	10c00044 	addi	r3,r2,1
    d3d0:	e0bffc17 	ldw	r2,-16(fp)
    d3d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    d3d8:	e0bffc17 	ldw	r2,-16(fp)
    d3dc:	10c00217 	ldw	r3,8(r2)
    d3e0:	e0bff617 	ldw	r2,-40(fp)
    d3e4:	1880042e 	bgeu	r3,r2,d3f8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    d3e8:	e0bffc17 	ldw	r2,-16(fp)
    d3ec:	00c00044 	movi	r3,1
    d3f0:	10c00405 	stb	r3,16(r2)
    d3f4:	00000206 	br	d400 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    d3f8:	e0bffc17 	ldw	r2,-16(fp)
    d3fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    d400:	e0bffc17 	ldw	r2,-16(fp)
    d404:	d0e00404 	addi	r3,gp,-32752
    d408:	e0fffa15 	stw	r3,-24(fp)
    d40c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d410:	e0bffb17 	ldw	r2,-20(fp)
    d414:	e0fffa17 	ldw	r3,-24(fp)
    d418:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    d41c:	e0bffa17 	ldw	r2,-24(fp)
    d420:	10c00017 	ldw	r3,0(r2)
    d424:	e0bffb17 	ldw	r2,-20(fp)
    d428:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d42c:	e0bffa17 	ldw	r2,-24(fp)
    d430:	10800017 	ldw	r2,0(r2)
    d434:	e0fffb17 	ldw	r3,-20(fp)
    d438:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    d43c:	e0bffa17 	ldw	r2,-24(fp)
    d440:	e0fffb17 	ldw	r3,-20(fp)
    d444:	10c00015 	stw	r3,0(r2)
    d448:	e0bff817 	ldw	r2,-32(fp)
    d44c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d450:	e0bff717 	ldw	r2,-36(fp)
    d454:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    d458:	0005883a 	mov	r2,zero
    d45c:	00000306 	br	d46c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    d460:	00bffa84 	movi	r2,-22
    d464:	00000106 	br	d46c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    d468:	00bfde84 	movi	r2,-134
  }
}
    d46c:	e037883a 	mov	sp,fp
    d470:	df000017 	ldw	fp,0(sp)
    d474:	dec00104 	addi	sp,sp,4
    d478:	f800283a 	ret

0000d47c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d47c:	defffe04 	addi	sp,sp,-8
    d480:	dfc00115 	stw	ra,4(sp)
    d484:	df000015 	stw	fp,0(sp)
    d488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d48c:	d0a00b17 	ldw	r2,-32724(gp)
    d490:	10000326 	beq	r2,zero,d4a0 <alt_get_errno+0x24>
    d494:	d0a00b17 	ldw	r2,-32724(gp)
    d498:	103ee83a 	callr	r2
    d49c:	00000106 	br	d4a4 <alt_get_errno+0x28>
    d4a0:	d0a51204 	addi	r2,gp,-27576
}
    d4a4:	e037883a 	mov	sp,fp
    d4a8:	dfc00117 	ldw	ra,4(sp)
    d4ac:	df000017 	ldw	fp,0(sp)
    d4b0:	dec00204 	addi	sp,sp,8
    d4b4:	f800283a 	ret

0000d4b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d4b8:	defffb04 	addi	sp,sp,-20
    d4bc:	dfc00415 	stw	ra,16(sp)
    d4c0:	df000315 	stw	fp,12(sp)
    d4c4:	df000304 	addi	fp,sp,12
    d4c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d4cc:	e0bfff17 	ldw	r2,-4(fp)
    d4d0:	10000816 	blt	r2,zero,d4f4 <close+0x3c>
    d4d4:	01400304 	movi	r5,12
    d4d8:	e13fff17 	ldw	r4,-4(fp)
    d4dc:	000a0a40 	call	a0a4 <__mulsi3>
    d4e0:	1007883a 	mov	r3,r2
    d4e4:	008000b4 	movhi	r2,2
    d4e8:	10a25004 	addi	r2,r2,-30400
    d4ec:	1885883a 	add	r2,r3,r2
    d4f0:	00000106 	br	d4f8 <close+0x40>
    d4f4:	0005883a 	mov	r2,zero
    d4f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d4fc:	e0bffd17 	ldw	r2,-12(fp)
    d500:	10001926 	beq	r2,zero,d568 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d504:	e0bffd17 	ldw	r2,-12(fp)
    d508:	10800017 	ldw	r2,0(r2)
    d50c:	10800417 	ldw	r2,16(r2)
    d510:	10000626 	beq	r2,zero,d52c <close+0x74>
    d514:	e0bffd17 	ldw	r2,-12(fp)
    d518:	10800017 	ldw	r2,0(r2)
    d51c:	10800417 	ldw	r2,16(r2)
    d520:	e13ffd17 	ldw	r4,-12(fp)
    d524:	103ee83a 	callr	r2
    d528:	00000106 	br	d530 <close+0x78>
    d52c:	0005883a 	mov	r2,zero
    d530:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d534:	e13fff17 	ldw	r4,-4(fp)
    d538:	000dedc0 	call	dedc <alt_release_fd>
    if (rval < 0)
    d53c:	e0bffe17 	ldw	r2,-8(fp)
    d540:	1000070e 	bge	r2,zero,d560 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d544:	000d47c0 	call	d47c <alt_get_errno>
    d548:	1007883a 	mov	r3,r2
    d54c:	e0bffe17 	ldw	r2,-8(fp)
    d550:	0085c83a 	sub	r2,zero,r2
    d554:	18800015 	stw	r2,0(r3)
      return -1;
    d558:	00bfffc4 	movi	r2,-1
    d55c:	00000706 	br	d57c <close+0xc4>
    }
    return 0;
    d560:	0005883a 	mov	r2,zero
    d564:	00000506 	br	d57c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d568:	000d47c0 	call	d47c <alt_get_errno>
    d56c:	1007883a 	mov	r3,r2
    d570:	00801444 	movi	r2,81
    d574:	18800015 	stw	r2,0(r3)
    return -1;
    d578:	00bfffc4 	movi	r2,-1
  }
}
    d57c:	e037883a 	mov	sp,fp
    d580:	dfc00117 	ldw	ra,4(sp)
    d584:	df000017 	ldw	fp,0(sp)
    d588:	dec00204 	addi	sp,sp,8
    d58c:	f800283a 	ret

0000d590 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d590:	deffff04 	addi	sp,sp,-4
    d594:	df000015 	stw	fp,0(sp)
    d598:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d59c:	0001883a 	nop
    d5a0:	e037883a 	mov	sp,fp
    d5a4:	df000017 	ldw	fp,0(sp)
    d5a8:	dec00104 	addi	sp,sp,4
    d5ac:	f800283a 	ret

0000d5b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d5b0:	defffc04 	addi	sp,sp,-16
    d5b4:	df000315 	stw	fp,12(sp)
    d5b8:	df000304 	addi	fp,sp,12
    d5bc:	e13ffd15 	stw	r4,-12(fp)
    d5c0:	e17ffe15 	stw	r5,-8(fp)
    d5c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d5c8:	e0bfff17 	ldw	r2,-4(fp)
}
    d5cc:	e037883a 	mov	sp,fp
    d5d0:	df000017 	ldw	fp,0(sp)
    d5d4:	dec00104 	addi	sp,sp,4
    d5d8:	f800283a 	ret

0000d5dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d5dc:	defffe04 	addi	sp,sp,-8
    d5e0:	dfc00115 	stw	ra,4(sp)
    d5e4:	df000015 	stw	fp,0(sp)
    d5e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5ec:	d0a00b17 	ldw	r2,-32724(gp)
    d5f0:	10000326 	beq	r2,zero,d600 <alt_get_errno+0x24>
    d5f4:	d0a00b17 	ldw	r2,-32724(gp)
    d5f8:	103ee83a 	callr	r2
    d5fc:	00000106 	br	d604 <alt_get_errno+0x28>
    d600:	d0a51204 	addi	r2,gp,-27576
}
    d604:	e037883a 	mov	sp,fp
    d608:	dfc00117 	ldw	ra,4(sp)
    d60c:	df000017 	ldw	fp,0(sp)
    d610:	dec00204 	addi	sp,sp,8
    d614:	f800283a 	ret

0000d618 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d618:	defffa04 	addi	sp,sp,-24
    d61c:	dfc00515 	stw	ra,20(sp)
    d620:	df000415 	stw	fp,16(sp)
    d624:	df000404 	addi	fp,sp,16
    d628:	e13ffe15 	stw	r4,-8(fp)
    d62c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d630:	e0bffe17 	ldw	r2,-8(fp)
    d634:	10000326 	beq	r2,zero,d644 <alt_dev_llist_insert+0x2c>
    d638:	e0bffe17 	ldw	r2,-8(fp)
    d63c:	10800217 	ldw	r2,8(r2)
    d640:	1000061e 	bne	r2,zero,d65c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    d644:	000d5dc0 	call	d5dc <alt_get_errno>
    d648:	1007883a 	mov	r3,r2
    d64c:	00800584 	movi	r2,22
    d650:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d654:	00bffa84 	movi	r2,-22
    d658:	00001306 	br	d6a8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d65c:	e0bffe17 	ldw	r2,-8(fp)
    d660:	e0ffff17 	ldw	r3,-4(fp)
    d664:	e0fffc15 	stw	r3,-16(fp)
    d668:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d66c:	e0bffd17 	ldw	r2,-12(fp)
    d670:	e0fffc17 	ldw	r3,-16(fp)
    d674:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    d678:	e0bffc17 	ldw	r2,-16(fp)
    d67c:	10c00017 	ldw	r3,0(r2)
    d680:	e0bffd17 	ldw	r2,-12(fp)
    d684:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d688:	e0bffc17 	ldw	r2,-16(fp)
    d68c:	10800017 	ldw	r2,0(r2)
    d690:	e0fffd17 	ldw	r3,-12(fp)
    d694:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    d698:	e0bffc17 	ldw	r2,-16(fp)
    d69c:	e0fffd17 	ldw	r3,-12(fp)
    d6a0:	10c00015 	stw	r3,0(r2)

  return 0;  
    d6a4:	0005883a 	mov	r2,zero
}
    d6a8:	e037883a 	mov	sp,fp
    d6ac:	dfc00117 	ldw	ra,4(sp)
    d6b0:	df000017 	ldw	fp,0(sp)
    d6b4:	dec00204 	addi	sp,sp,8
    d6b8:	f800283a 	ret

0000d6bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d6bc:	defffd04 	addi	sp,sp,-12
    d6c0:	dfc00215 	stw	ra,8(sp)
    d6c4:	df000115 	stw	fp,4(sp)
    d6c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d6cc:	00800074 	movhi	r2,1
    d6d0:	10bb6e04 	addi	r2,r2,-4680
    d6d4:	e0bfff15 	stw	r2,-4(fp)
    d6d8:	00000606 	br	d6f4 <_do_ctors+0x38>
        (*ctor) (); 
    d6dc:	e0bfff17 	ldw	r2,-4(fp)
    d6e0:	10800017 	ldw	r2,0(r2)
    d6e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d6e8:	e0bfff17 	ldw	r2,-4(fp)
    d6ec:	10bfff04 	addi	r2,r2,-4
    d6f0:	e0bfff15 	stw	r2,-4(fp)
    d6f4:	e0ffff17 	ldw	r3,-4(fp)
    d6f8:	00800074 	movhi	r2,1
    d6fc:	10bb6f04 	addi	r2,r2,-4676
    d700:	18bff62e 	bgeu	r3,r2,d6dc <__alt_mem_epcs_flash_controller+0xfe0046dc>
        (*ctor) (); 
}
    d704:	0001883a 	nop
    d708:	e037883a 	mov	sp,fp
    d70c:	dfc00117 	ldw	ra,4(sp)
    d710:	df000017 	ldw	fp,0(sp)
    d714:	dec00204 	addi	sp,sp,8
    d718:	f800283a 	ret

0000d71c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    d71c:	defffd04 	addi	sp,sp,-12
    d720:	dfc00215 	stw	ra,8(sp)
    d724:	df000115 	stw	fp,4(sp)
    d728:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d72c:	00800074 	movhi	r2,1
    d730:	10bb6e04 	addi	r2,r2,-4680
    d734:	e0bfff15 	stw	r2,-4(fp)
    d738:	00000606 	br	d754 <_do_dtors+0x38>
        (*dtor) (); 
    d73c:	e0bfff17 	ldw	r2,-4(fp)
    d740:	10800017 	ldw	r2,0(r2)
    d744:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d748:	e0bfff17 	ldw	r2,-4(fp)
    d74c:	10bfff04 	addi	r2,r2,-4
    d750:	e0bfff15 	stw	r2,-4(fp)
    d754:	e0ffff17 	ldw	r3,-4(fp)
    d758:	00800074 	movhi	r2,1
    d75c:	10bb6f04 	addi	r2,r2,-4676
    d760:	18bff62e 	bgeu	r3,r2,d73c <__alt_mem_epcs_flash_controller+0xfe00473c>
        (*dtor) (); 
}
    d764:	0001883a 	nop
    d768:	e037883a 	mov	sp,fp
    d76c:	dfc00117 	ldw	ra,4(sp)
    d770:	df000017 	ldw	fp,0(sp)
    d774:	dec00204 	addi	sp,sp,8
    d778:	f800283a 	ret

0000d77c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    d77c:	defffc04 	addi	sp,sp,-16
    d780:	dfc00315 	stw	ra,12(sp)
    d784:	df000215 	stw	fp,8(sp)
    d788:	df000204 	addi	fp,sp,8
    d78c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    d790:	d1600c04 	addi	r5,gp,-32720
    d794:	e13fff17 	ldw	r4,-4(fp)
    d798:	000e1800 	call	e180 <alt_find_dev>
    d79c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
    d7a0:	e0bffe17 	ldw	r2,-8(fp)
    d7a4:	10000926 	beq	r2,zero,d7cc <alt_flash_open_dev+0x50>
    d7a8:	e0bffe17 	ldw	r2,-8(fp)
    d7ac:	10800317 	ldw	r2,12(r2)
    d7b0:	10000626 	beq	r2,zero,d7cc <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
    d7b4:	e0bffe17 	ldw	r2,-8(fp)
    d7b8:	10800317 	ldw	r2,12(r2)
    d7bc:	e17fff17 	ldw	r5,-4(fp)
    d7c0:	e13ffe17 	ldw	r4,-8(fp)
    d7c4:	103ee83a 	callr	r2
    d7c8:	00000106 	br	d7d0 <alt_flash_open_dev+0x54>
  }

  return dev;
    d7cc:	e0bffe17 	ldw	r2,-8(fp)
}
    d7d0:	e037883a 	mov	sp,fp
    d7d4:	dfc00117 	ldw	ra,4(sp)
    d7d8:	df000017 	ldw	fp,0(sp)
    d7dc:	dec00204 	addi	sp,sp,8
    d7e0:	f800283a 	ret

0000d7e4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    d7e4:	defffd04 	addi	sp,sp,-12
    d7e8:	dfc00215 	stw	ra,8(sp)
    d7ec:	df000115 	stw	fp,4(sp)
    d7f0:	df000104 	addi	fp,sp,4
    d7f4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    d7f8:	e0bfff17 	ldw	r2,-4(fp)
    d7fc:	10000826 	beq	r2,zero,d820 <alt_flash_close_dev+0x3c>
    d800:	e0bfff17 	ldw	r2,-4(fp)
    d804:	10800417 	ldw	r2,16(r2)
    d808:	10000526 	beq	r2,zero,d820 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
    d80c:	e0bfff17 	ldw	r2,-4(fp)
    d810:	10800417 	ldw	r2,16(r2)
    d814:	e13fff17 	ldw	r4,-4(fp)
    d818:	103ee83a 	callr	r2
  }
  return;
    d81c:	0001883a 	nop
    d820:	0001883a 	nop
}
    d824:	e037883a 	mov	sp,fp
    d828:	dfc00117 	ldw	ra,4(sp)
    d82c:	df000017 	ldw	fp,0(sp)
    d830:	dec00204 	addi	sp,sp,8
    d834:	f800283a 	ret

0000d838 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d838:	deffff04 	addi	sp,sp,-4
    d83c:	df000015 	stw	fp,0(sp)
    d840:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    d844:	0001883a 	nop
    d848:	e037883a 	mov	sp,fp
    d84c:	df000017 	ldw	fp,0(sp)
    d850:	dec00104 	addi	sp,sp,4
    d854:	f800283a 	ret

0000d858 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d858:	defff904 	addi	sp,sp,-28
    d85c:	dfc00615 	stw	ra,24(sp)
    d860:	df000515 	stw	fp,20(sp)
    d864:	df000504 	addi	fp,sp,20
    d868:	e13ffc15 	stw	r4,-16(fp)
    d86c:	e17ffd15 	stw	r5,-12(fp)
    d870:	e1bffe15 	stw	r6,-8(fp)
    d874:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d878:	e0800217 	ldw	r2,8(fp)
    d87c:	d8800015 	stw	r2,0(sp)
    d880:	e1ffff17 	ldw	r7,-4(fp)
    d884:	e1bffe17 	ldw	r6,-8(fp)
    d888:	e17ffd17 	ldw	r5,-12(fp)
    d88c:	e13ffc17 	ldw	r4,-16(fp)
    d890:	000da080 	call	da08 <alt_iic_isr_register>
}  
    d894:	e037883a 	mov	sp,fp
    d898:	dfc00117 	ldw	ra,4(sp)
    d89c:	df000017 	ldw	fp,0(sp)
    d8a0:	dec00204 	addi	sp,sp,8
    d8a4:	f800283a 	ret

0000d8a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d8a8:	defff904 	addi	sp,sp,-28
    d8ac:	df000615 	stw	fp,24(sp)
    d8b0:	df000604 	addi	fp,sp,24
    d8b4:	e13ffe15 	stw	r4,-8(fp)
    d8b8:	e17fff15 	stw	r5,-4(fp)
    d8bc:	e0bfff17 	ldw	r2,-4(fp)
    d8c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d8c4:	0005303a 	rdctl	r2,status
    d8c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d8cc:	e0fffb17 	ldw	r3,-20(fp)
    d8d0:	00bfff84 	movi	r2,-2
    d8d4:	1884703a 	and	r2,r3,r2
    d8d8:	1001703a 	wrctl	status,r2
  
  return context;
    d8dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d8e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    d8e4:	00c00044 	movi	r3,1
    d8e8:	e0bffa17 	ldw	r2,-24(fp)
    d8ec:	1884983a 	sll	r2,r3,r2
    d8f0:	1007883a 	mov	r3,r2
    d8f4:	d0a51c17 	ldw	r2,-27536(gp)
    d8f8:	1884b03a 	or	r2,r3,r2
    d8fc:	d0a51c15 	stw	r2,-27536(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d900:	d0a51c17 	ldw	r2,-27536(gp)
    d904:	100170fa 	wrctl	ienable,r2
    d908:	e0bffc17 	ldw	r2,-16(fp)
    d90c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d910:	e0bffd17 	ldw	r2,-12(fp)
    d914:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d918:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    d91c:	0001883a 	nop
}
    d920:	e037883a 	mov	sp,fp
    d924:	df000017 	ldw	fp,0(sp)
    d928:	dec00104 	addi	sp,sp,4
    d92c:	f800283a 	ret

0000d930 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d930:	defff904 	addi	sp,sp,-28
    d934:	df000615 	stw	fp,24(sp)
    d938:	df000604 	addi	fp,sp,24
    d93c:	e13ffe15 	stw	r4,-8(fp)
    d940:	e17fff15 	stw	r5,-4(fp)
    d944:	e0bfff17 	ldw	r2,-4(fp)
    d948:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d94c:	0005303a 	rdctl	r2,status
    d950:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d954:	e0fffb17 	ldw	r3,-20(fp)
    d958:	00bfff84 	movi	r2,-2
    d95c:	1884703a 	and	r2,r3,r2
    d960:	1001703a 	wrctl	status,r2
  
  return context;
    d964:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d968:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    d96c:	00c00044 	movi	r3,1
    d970:	e0bffa17 	ldw	r2,-24(fp)
    d974:	1884983a 	sll	r2,r3,r2
    d978:	0084303a 	nor	r2,zero,r2
    d97c:	1007883a 	mov	r3,r2
    d980:	d0a51c17 	ldw	r2,-27536(gp)
    d984:	1884703a 	and	r2,r3,r2
    d988:	d0a51c15 	stw	r2,-27536(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d98c:	d0a51c17 	ldw	r2,-27536(gp)
    d990:	100170fa 	wrctl	ienable,r2
    d994:	e0bffc17 	ldw	r2,-16(fp)
    d998:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d99c:	e0bffd17 	ldw	r2,-12(fp)
    d9a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d9a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    d9a8:	0001883a 	nop
}
    d9ac:	e037883a 	mov	sp,fp
    d9b0:	df000017 	ldw	fp,0(sp)
    d9b4:	dec00104 	addi	sp,sp,4
    d9b8:	f800283a 	ret

0000d9bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d9bc:	defffc04 	addi	sp,sp,-16
    d9c0:	df000315 	stw	fp,12(sp)
    d9c4:	df000304 	addi	fp,sp,12
    d9c8:	e13ffe15 	stw	r4,-8(fp)
    d9cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d9d0:	000530fa 	rdctl	r2,ienable
    d9d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d9d8:	00c00044 	movi	r3,1
    d9dc:	e0bfff17 	ldw	r2,-4(fp)
    d9e0:	1884983a 	sll	r2,r3,r2
    d9e4:	1007883a 	mov	r3,r2
    d9e8:	e0bffd17 	ldw	r2,-12(fp)
    d9ec:	1884703a 	and	r2,r3,r2
    d9f0:	1004c03a 	cmpne	r2,r2,zero
    d9f4:	10803fcc 	andi	r2,r2,255
}
    d9f8:	e037883a 	mov	sp,fp
    d9fc:	df000017 	ldw	fp,0(sp)
    da00:	dec00104 	addi	sp,sp,4
    da04:	f800283a 	ret

0000da08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    da08:	defff504 	addi	sp,sp,-44
    da0c:	dfc00a15 	stw	ra,40(sp)
    da10:	df000915 	stw	fp,36(sp)
    da14:	df000904 	addi	fp,sp,36
    da18:	e13ffc15 	stw	r4,-16(fp)
    da1c:	e17ffd15 	stw	r5,-12(fp)
    da20:	e1bffe15 	stw	r6,-8(fp)
    da24:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    da28:	00bffa84 	movi	r2,-22
    da2c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    da30:	e0bffd17 	ldw	r2,-12(fp)
    da34:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    da38:	e0bff817 	ldw	r2,-32(fp)
    da3c:	10800808 	cmpgei	r2,r2,32
    da40:	1000271e 	bne	r2,zero,dae0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da44:	0005303a 	rdctl	r2,status
    da48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da4c:	e0fffb17 	ldw	r3,-20(fp)
    da50:	00bfff84 	movi	r2,-2
    da54:	1884703a 	and	r2,r3,r2
    da58:	1001703a 	wrctl	status,r2
  
  return context;
    da5c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    da60:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    da64:	008000b4 	movhi	r2,2
    da68:	10aab404 	addi	r2,r2,-21808
    da6c:	e0fff817 	ldw	r3,-32(fp)
    da70:	180690fa 	slli	r3,r3,3
    da74:	10c5883a 	add	r2,r2,r3
    da78:	e0fffe17 	ldw	r3,-8(fp)
    da7c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    da80:	008000b4 	movhi	r2,2
    da84:	10aab404 	addi	r2,r2,-21808
    da88:	e0fff817 	ldw	r3,-32(fp)
    da8c:	180690fa 	slli	r3,r3,3
    da90:	10c5883a 	add	r2,r2,r3
    da94:	10800104 	addi	r2,r2,4
    da98:	e0ffff17 	ldw	r3,-4(fp)
    da9c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    daa0:	e0bffe17 	ldw	r2,-8(fp)
    daa4:	10000526 	beq	r2,zero,dabc <alt_iic_isr_register+0xb4>
    daa8:	e0bff817 	ldw	r2,-32(fp)
    daac:	100b883a 	mov	r5,r2
    dab0:	e13ffc17 	ldw	r4,-16(fp)
    dab4:	000d8a80 	call	d8a8 <alt_ic_irq_enable>
    dab8:	00000406 	br	dacc <alt_iic_isr_register+0xc4>
    dabc:	e0bff817 	ldw	r2,-32(fp)
    dac0:	100b883a 	mov	r5,r2
    dac4:	e13ffc17 	ldw	r4,-16(fp)
    dac8:	000d9300 	call	d930 <alt_ic_irq_disable>
    dacc:	e0bff715 	stw	r2,-36(fp)
    dad0:	e0bffa17 	ldw	r2,-24(fp)
    dad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dad8:	e0bff917 	ldw	r2,-28(fp)
    dadc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    dae0:	e0bff717 	ldw	r2,-36(fp)
}
    dae4:	e037883a 	mov	sp,fp
    dae8:	dfc00117 	ldw	ra,4(sp)
    daec:	df000017 	ldw	fp,0(sp)
    daf0:	dec00204 	addi	sp,sp,8
    daf4:	f800283a 	ret

0000daf8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    daf8:	defff804 	addi	sp,sp,-32
    dafc:	dfc00715 	stw	ra,28(sp)
    db00:	df000615 	stw	fp,24(sp)
    db04:	dc000515 	stw	r16,20(sp)
    db08:	df000604 	addi	fp,sp,24
    db0c:	e13ffb15 	stw	r4,-20(fp)
    db10:	e17ffc15 	stw	r5,-16(fp)
    db14:	e1bffd15 	stw	r6,-12(fp)
    db18:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    db1c:	e1bffe17 	ldw	r6,-8(fp)
    db20:	e17ffd17 	ldw	r5,-12(fp)
    db24:	e13ffc17 	ldw	r4,-16(fp)
    db28:	000dd800 	call	dd80 <open>
    db2c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    db30:	e0bffa17 	ldw	r2,-24(fp)
    db34:	10002216 	blt	r2,zero,dbc0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    db38:	040000b4 	movhi	r16,2
    db3c:	84225004 	addi	r16,r16,-30400
    db40:	e0bffa17 	ldw	r2,-24(fp)
    db44:	01400304 	movi	r5,12
    db48:	1009883a 	mov	r4,r2
    db4c:	000a0a40 	call	a0a4 <__mulsi3>
    db50:	8085883a 	add	r2,r16,r2
    db54:	10c00017 	ldw	r3,0(r2)
    db58:	e0bffb17 	ldw	r2,-20(fp)
    db5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    db60:	040000b4 	movhi	r16,2
    db64:	84225004 	addi	r16,r16,-30400
    db68:	e0bffa17 	ldw	r2,-24(fp)
    db6c:	01400304 	movi	r5,12
    db70:	1009883a 	mov	r4,r2
    db74:	000a0a40 	call	a0a4 <__mulsi3>
    db78:	8085883a 	add	r2,r16,r2
    db7c:	10800104 	addi	r2,r2,4
    db80:	10c00017 	ldw	r3,0(r2)
    db84:	e0bffb17 	ldw	r2,-20(fp)
    db88:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    db8c:	040000b4 	movhi	r16,2
    db90:	84225004 	addi	r16,r16,-30400
    db94:	e0bffa17 	ldw	r2,-24(fp)
    db98:	01400304 	movi	r5,12
    db9c:	1009883a 	mov	r4,r2
    dba0:	000a0a40 	call	a0a4 <__mulsi3>
    dba4:	8085883a 	add	r2,r16,r2
    dba8:	10800204 	addi	r2,r2,8
    dbac:	10c00017 	ldw	r3,0(r2)
    dbb0:	e0bffb17 	ldw	r2,-20(fp)
    dbb4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    dbb8:	e13ffa17 	ldw	r4,-24(fp)
    dbbc:	000dedc0 	call	dedc <alt_release_fd>
  }
} 
    dbc0:	0001883a 	nop
    dbc4:	e6ffff04 	addi	sp,fp,-4
    dbc8:	dfc00217 	ldw	ra,8(sp)
    dbcc:	df000117 	ldw	fp,4(sp)
    dbd0:	dc000017 	ldw	r16,0(sp)
    dbd4:	dec00304 	addi	sp,sp,12
    dbd8:	f800283a 	ret

0000dbdc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    dbdc:	defffb04 	addi	sp,sp,-20
    dbe0:	dfc00415 	stw	ra,16(sp)
    dbe4:	df000315 	stw	fp,12(sp)
    dbe8:	df000304 	addi	fp,sp,12
    dbec:	e13ffd15 	stw	r4,-12(fp)
    dbf0:	e17ffe15 	stw	r5,-8(fp)
    dbf4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    dbf8:	01c07fc4 	movi	r7,511
    dbfc:	01800044 	movi	r6,1
    dc00:	e17ffd17 	ldw	r5,-12(fp)
    dc04:	010000b4 	movhi	r4,2
    dc08:	21225304 	addi	r4,r4,-30388
    dc0c:	000daf80 	call	daf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    dc10:	01c07fc4 	movi	r7,511
    dc14:	000d883a 	mov	r6,zero
    dc18:	e17ffe17 	ldw	r5,-8(fp)
    dc1c:	010000b4 	movhi	r4,2
    dc20:	21225004 	addi	r4,r4,-30400
    dc24:	000daf80 	call	daf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    dc28:	01c07fc4 	movi	r7,511
    dc2c:	01800044 	movi	r6,1
    dc30:	e17fff17 	ldw	r5,-4(fp)
    dc34:	010000b4 	movhi	r4,2
    dc38:	21225604 	addi	r4,r4,-30376
    dc3c:	000daf80 	call	daf8 <alt_open_fd>
}  
    dc40:	0001883a 	nop
    dc44:	e037883a 	mov	sp,fp
    dc48:	dfc00117 	ldw	ra,4(sp)
    dc4c:	df000017 	ldw	fp,0(sp)
    dc50:	dec00204 	addi	sp,sp,8
    dc54:	f800283a 	ret

0000dc58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dc58:	defffe04 	addi	sp,sp,-8
    dc5c:	dfc00115 	stw	ra,4(sp)
    dc60:	df000015 	stw	fp,0(sp)
    dc64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dc68:	d0a00b17 	ldw	r2,-32724(gp)
    dc6c:	10000326 	beq	r2,zero,dc7c <alt_get_errno+0x24>
    dc70:	d0a00b17 	ldw	r2,-32724(gp)
    dc74:	103ee83a 	callr	r2
    dc78:	00000106 	br	dc80 <alt_get_errno+0x28>
    dc7c:	d0a51204 	addi	r2,gp,-27576
}
    dc80:	e037883a 	mov	sp,fp
    dc84:	dfc00117 	ldw	ra,4(sp)
    dc88:	df000017 	ldw	fp,0(sp)
    dc8c:	dec00204 	addi	sp,sp,8
    dc90:	f800283a 	ret

0000dc94 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    dc94:	defffb04 	addi	sp,sp,-20
    dc98:	dfc00415 	stw	ra,16(sp)
    dc9c:	df000315 	stw	fp,12(sp)
    dca0:	dc000215 	stw	r16,8(sp)
    dca4:	df000304 	addi	fp,sp,12
    dca8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    dcac:	e0bffe17 	ldw	r2,-8(fp)
    dcb0:	10800217 	ldw	r2,8(r2)
    dcb4:	10d00034 	orhi	r3,r2,16384
    dcb8:	e0bffe17 	ldw	r2,-8(fp)
    dcbc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    dcc0:	e03ffd15 	stw	zero,-12(fp)
    dcc4:	00002306 	br	dd54 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    dcc8:	040000b4 	movhi	r16,2
    dccc:	84225004 	addi	r16,r16,-30400
    dcd0:	e0bffd17 	ldw	r2,-12(fp)
    dcd4:	01400304 	movi	r5,12
    dcd8:	1009883a 	mov	r4,r2
    dcdc:	000a0a40 	call	a0a4 <__mulsi3>
    dce0:	8085883a 	add	r2,r16,r2
    dce4:	10c00017 	ldw	r3,0(r2)
    dce8:	e0bffe17 	ldw	r2,-8(fp)
    dcec:	10800017 	ldw	r2,0(r2)
    dcf0:	1880151e 	bne	r3,r2,dd48 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    dcf4:	040000b4 	movhi	r16,2
    dcf8:	84225004 	addi	r16,r16,-30400
    dcfc:	e0bffd17 	ldw	r2,-12(fp)
    dd00:	01400304 	movi	r5,12
    dd04:	1009883a 	mov	r4,r2
    dd08:	000a0a40 	call	a0a4 <__mulsi3>
    dd0c:	8085883a 	add	r2,r16,r2
    dd10:	10800204 	addi	r2,r2,8
    dd14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    dd18:	10000b0e 	bge	r2,zero,dd48 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    dd1c:	01400304 	movi	r5,12
    dd20:	e13ffd17 	ldw	r4,-12(fp)
    dd24:	000a0a40 	call	a0a4 <__mulsi3>
    dd28:	1007883a 	mov	r3,r2
    dd2c:	008000b4 	movhi	r2,2
    dd30:	10a25004 	addi	r2,r2,-30400
    dd34:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    dd38:	e0bffe17 	ldw	r2,-8(fp)
    dd3c:	18800226 	beq	r3,r2,dd48 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    dd40:	00bffcc4 	movi	r2,-13
    dd44:	00000806 	br	dd68 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    dd48:	e0bffd17 	ldw	r2,-12(fp)
    dd4c:	10800044 	addi	r2,r2,1
    dd50:	e0bffd15 	stw	r2,-12(fp)
    dd54:	d0a00a17 	ldw	r2,-32728(gp)
    dd58:	1007883a 	mov	r3,r2
    dd5c:	e0bffd17 	ldw	r2,-12(fp)
    dd60:	18bfd92e 	bgeu	r3,r2,dcc8 <__alt_mem_epcs_flash_controller+0xfe004cc8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    dd64:	0005883a 	mov	r2,zero
}
    dd68:	e6ffff04 	addi	sp,fp,-4
    dd6c:	dfc00217 	ldw	ra,8(sp)
    dd70:	df000117 	ldw	fp,4(sp)
    dd74:	dc000017 	ldw	r16,0(sp)
    dd78:	dec00304 	addi	sp,sp,12
    dd7c:	f800283a 	ret

0000dd80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    dd80:	defff604 	addi	sp,sp,-40
    dd84:	dfc00915 	stw	ra,36(sp)
    dd88:	df000815 	stw	fp,32(sp)
    dd8c:	df000804 	addi	fp,sp,32
    dd90:	e13ffd15 	stw	r4,-12(fp)
    dd94:	e17ffe15 	stw	r5,-8(fp)
    dd98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    dd9c:	00bfffc4 	movi	r2,-1
    dda0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    dda4:	00bffb44 	movi	r2,-19
    dda8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    ddac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ddb0:	d1600804 	addi	r5,gp,-32736
    ddb4:	e13ffd17 	ldw	r4,-12(fp)
    ddb8:	000e1800 	call	e180 <alt_find_dev>
    ddbc:	e0bff815 	stw	r2,-32(fp)
    ddc0:	e0bff817 	ldw	r2,-32(fp)
    ddc4:	1000051e 	bne	r2,zero,dddc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ddc8:	e13ffd17 	ldw	r4,-12(fp)
    ddcc:	000e2100 	call	e210 <alt_find_file>
    ddd0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    ddd4:	00800044 	movi	r2,1
    ddd8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    dddc:	e0bff817 	ldw	r2,-32(fp)
    dde0:	10002b26 	beq	r2,zero,de90 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    dde4:	e13ff817 	ldw	r4,-32(fp)
    dde8:	000e3180 	call	e318 <alt_get_fd>
    ddec:	e0bff915 	stw	r2,-28(fp)
    ddf0:	e0bff917 	ldw	r2,-28(fp)
    ddf4:	1000030e 	bge	r2,zero,de04 <open+0x84>
    {
      status = index;
    ddf8:	e0bff917 	ldw	r2,-28(fp)
    ddfc:	e0bffa15 	stw	r2,-24(fp)
    de00:	00002506 	br	de98 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    de04:	01400304 	movi	r5,12
    de08:	e13ff917 	ldw	r4,-28(fp)
    de0c:	000a0a40 	call	a0a4 <__mulsi3>
    de10:	1007883a 	mov	r3,r2
    de14:	008000b4 	movhi	r2,2
    de18:	10a25004 	addi	r2,r2,-30400
    de1c:	1885883a 	add	r2,r3,r2
    de20:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    de24:	e0fffe17 	ldw	r3,-8(fp)
    de28:	00900034 	movhi	r2,16384
    de2c:	10bfffc4 	addi	r2,r2,-1
    de30:	1886703a 	and	r3,r3,r2
    de34:	e0bffc17 	ldw	r2,-16(fp)
    de38:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    de3c:	e0bffb17 	ldw	r2,-20(fp)
    de40:	1000051e 	bne	r2,zero,de58 <open+0xd8>
    de44:	e13ffc17 	ldw	r4,-16(fp)
    de48:	000dc940 	call	dc94 <alt_file_locked>
    de4c:	e0bffa15 	stw	r2,-24(fp)
    de50:	e0bffa17 	ldw	r2,-24(fp)
    de54:	10001016 	blt	r2,zero,de98 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    de58:	e0bff817 	ldw	r2,-32(fp)
    de5c:	10800317 	ldw	r2,12(r2)
    de60:	10000826 	beq	r2,zero,de84 <open+0x104>
    de64:	e0bff817 	ldw	r2,-32(fp)
    de68:	10800317 	ldw	r2,12(r2)
    de6c:	e1ffff17 	ldw	r7,-4(fp)
    de70:	e1bffe17 	ldw	r6,-8(fp)
    de74:	e17ffd17 	ldw	r5,-12(fp)
    de78:	e13ffc17 	ldw	r4,-16(fp)
    de7c:	103ee83a 	callr	r2
    de80:	00000106 	br	de88 <open+0x108>
    de84:	0005883a 	mov	r2,zero
    de88:	e0bffa15 	stw	r2,-24(fp)
    de8c:	00000206 	br	de98 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    de90:	00bffb44 	movi	r2,-19
    de94:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    de98:	e0bffa17 	ldw	r2,-24(fp)
    de9c:	1000090e 	bge	r2,zero,dec4 <open+0x144>
  {
    alt_release_fd (index);  
    dea0:	e13ff917 	ldw	r4,-28(fp)
    dea4:	000dedc0 	call	dedc <alt_release_fd>
    ALT_ERRNO = -status;
    dea8:	000dc580 	call	dc58 <alt_get_errno>
    deac:	1007883a 	mov	r3,r2
    deb0:	e0bffa17 	ldw	r2,-24(fp)
    deb4:	0085c83a 	sub	r2,zero,r2
    deb8:	18800015 	stw	r2,0(r3)
    return -1;
    debc:	00bfffc4 	movi	r2,-1
    dec0:	00000106 	br	dec8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    dec4:	e0bff917 	ldw	r2,-28(fp)
}
    dec8:	e037883a 	mov	sp,fp
    decc:	dfc00117 	ldw	ra,4(sp)
    ded0:	df000017 	ldw	fp,0(sp)
    ded4:	dec00204 	addi	sp,sp,8
    ded8:	f800283a 	ret

0000dedc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    dedc:	defffc04 	addi	sp,sp,-16
    dee0:	dfc00315 	stw	ra,12(sp)
    dee4:	df000215 	stw	fp,8(sp)
    dee8:	dc000115 	stw	r16,4(sp)
    deec:	df000204 	addi	fp,sp,8
    def0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    def4:	e0bffe17 	ldw	r2,-8(fp)
    def8:	108000d0 	cmplti	r2,r2,3
    defc:	1000111e 	bne	r2,zero,df44 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    df00:	040000b4 	movhi	r16,2
    df04:	84225004 	addi	r16,r16,-30400
    df08:	e0bffe17 	ldw	r2,-8(fp)
    df0c:	01400304 	movi	r5,12
    df10:	1009883a 	mov	r4,r2
    df14:	000a0a40 	call	a0a4 <__mulsi3>
    df18:	8085883a 	add	r2,r16,r2
    df1c:	10800204 	addi	r2,r2,8
    df20:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    df24:	040000b4 	movhi	r16,2
    df28:	84225004 	addi	r16,r16,-30400
    df2c:	e0bffe17 	ldw	r2,-8(fp)
    df30:	01400304 	movi	r5,12
    df34:	1009883a 	mov	r4,r2
    df38:	000a0a40 	call	a0a4 <__mulsi3>
    df3c:	8085883a 	add	r2,r16,r2
    df40:	10000015 	stw	zero,0(r2)
  }
}
    df44:	0001883a 	nop
    df48:	e6ffff04 	addi	sp,fp,-4
    df4c:	dfc00217 	ldw	ra,8(sp)
    df50:	df000117 	ldw	fp,4(sp)
    df54:	dc000017 	ldw	r16,0(sp)
    df58:	dec00304 	addi	sp,sp,12
    df5c:	f800283a 	ret

0000df60 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    df60:	deffff04 	addi	sp,sp,-4
    df64:	df000015 	stw	fp,0(sp)
    df68:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    df6c:	000170fa 	wrctl	ienable,zero
}
    df70:	0001883a 	nop
    df74:	e037883a 	mov	sp,fp
    df78:	df000017 	ldw	fp,0(sp)
    df7c:	dec00104 	addi	sp,sp,4
    df80:	f800283a 	ret

0000df84 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    df84:	defff404 	addi	sp,sp,-48
    df88:	df000b15 	stw	fp,44(sp)
    df8c:	df000b04 	addi	fp,sp,44
    df90:	e13ffc15 	stw	r4,-16(fp)
    df94:	e17ffd15 	stw	r5,-12(fp)
    df98:	e1bffe15 	stw	r6,-8(fp)
    df9c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    dfa0:	e0ffff17 	ldw	r3,-4(fp)
    dfa4:	e0bffe17 	ldw	r2,-8(fp)
    dfa8:	1885883a 	add	r2,r3,r2
    dfac:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    dfb0:	e0c00217 	ldw	r3,8(fp)
    dfb4:	e0800117 	ldw	r2,4(fp)
    dfb8:	1885883a 	add	r2,r3,r2
    dfbc:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    dfc0:	e0800117 	ldw	r2,4(fp)
    dfc4:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    dfc8:	e0bffe17 	ldw	r2,-8(fp)
    dfcc:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    dfd0:	00800044 	movi	r2,1
    dfd4:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    dfd8:	e0bffc17 	ldw	r2,-16(fp)
    dfdc:	10800504 	addi	r2,r2,20
    dfe0:	1009883a 	mov	r4,r2
    dfe4:	00c00044 	movi	r3,1
    dfe8:	e0bffd17 	ldw	r2,-12(fp)
    dfec:	1884983a 	sll	r2,r3,r2
    dff0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    dff4:	e0800317 	ldw	r2,12(fp)
    dff8:	1080008c 	andi	r2,r2,2
    dffc:	1000051e 	bne	r2,zero,e014 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    e000:	e0bffc17 	ldw	r2,-16(fp)
    e004:	10800304 	addi	r2,r2,12
    e008:	1007883a 	mov	r3,r2
    e00c:	00810004 	movi	r2,1024
    e010:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    e014:	e0bffc17 	ldw	r2,-16(fp)
    e018:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    e01c:	e0bffc17 	ldw	r2,-16(fp)
    e020:	10800204 	addi	r2,r2,8
    e024:	10800037 	ldwio	r2,0(r2)
    e028:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    e02c:	e0bffa17 	ldw	r2,-24(fp)
    e030:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    e034:	10000226 	beq	r2,zero,e040 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    e038:	e0bff717 	ldw	r2,-36(fp)
    e03c:	1000031e 	bne	r2,zero,e04c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    e040:	e0bffa17 	ldw	r2,-24(fp)
    e044:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    e048:	103ff426 	beq	r2,zero,e01c <__alt_mem_epcs_flash_controller+0xfe00501c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    e04c:	e0bffa17 	ldw	r2,-24(fp)
    e050:	1080100c 	andi	r2,r2,64
    e054:	10001e26 	beq	r2,zero,e0d0 <alt_avalon_spi_command+0x14c>
    e058:	e0bff717 	ldw	r2,-36(fp)
    e05c:	00801c0e 	bge	zero,r2,e0d0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    e060:	e0bff717 	ldw	r2,-36(fp)
    e064:	10bfffc4 	addi	r2,r2,-1
    e068:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    e06c:	e0ffff17 	ldw	r3,-4(fp)
    e070:	e0bff817 	ldw	r2,-32(fp)
    e074:	18800a2e 	bgeu	r3,r2,e0a0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    e078:	e0bffc17 	ldw	r2,-16(fp)
    e07c:	10800104 	addi	r2,r2,4
    e080:	1009883a 	mov	r4,r2
    e084:	e0bfff17 	ldw	r2,-4(fp)
    e088:	10c00044 	addi	r3,r2,1
    e08c:	e0ffff15 	stw	r3,-4(fp)
    e090:	10800003 	ldbu	r2,0(r2)
    e094:	10803fcc 	andi	r2,r2,255
    e098:	20800035 	stwio	r2,0(r4)
    e09c:	00000c06 	br	e0d0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    e0a0:	e0bff517 	ldw	r2,-44(fp)
    e0a4:	10000826 	beq	r2,zero,e0c8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    e0a8:	e0bff517 	ldw	r2,-44(fp)
    e0ac:	10bfffc4 	addi	r2,r2,-1
    e0b0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    e0b4:	e0bffc17 	ldw	r2,-16(fp)
    e0b8:	10800104 	addi	r2,r2,4
    e0bc:	0007883a 	mov	r3,zero
    e0c0:	10c00035 	stwio	r3,0(r2)
    e0c4:	00000206 	br	e0d0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    e0c8:	00bf0004 	movi	r2,-1024
    e0cc:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    e0d0:	e0bffa17 	ldw	r2,-24(fp)
    e0d4:	1080200c 	andi	r2,r2,128
    e0d8:	103fd026 	beq	r2,zero,e01c <__alt_mem_epcs_flash_controller+0xfe00501c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    e0dc:	e0bffc17 	ldw	r2,-16(fp)
    e0e0:	10800037 	ldwio	r2,0(r2)
    e0e4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    e0e8:	e0bff617 	ldw	r2,-40(fp)
    e0ec:	10000426 	beq	r2,zero,e100 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    e0f0:	e0bff617 	ldw	r2,-40(fp)
    e0f4:	10bfffc4 	addi	r2,r2,-1
    e0f8:	e0bff615 	stw	r2,-40(fp)
    e0fc:	00000506 	br	e114 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    e100:	e0800217 	ldw	r2,8(fp)
    e104:	10c00044 	addi	r3,r2,1
    e108:	e0c00215 	stw	r3,8(fp)
    e10c:	e0fffb17 	ldw	r3,-20(fp)
    e110:	10c00005 	stb	r3,0(r2)
      credits++;
    e114:	e0bff717 	ldw	r2,-36(fp)
    e118:	10800044 	addi	r2,r2,1
    e11c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    e120:	e0bff617 	ldw	r2,-40(fp)
    e124:	103fbd1e 	bne	r2,zero,e01c <__alt_mem_epcs_flash_controller+0xfe00501c>
    e128:	e0c00217 	ldw	r3,8(fp)
    e12c:	e0bff917 	ldw	r2,-28(fp)
    e130:	18bfba1e 	bne	r3,r2,e01c <__alt_mem_epcs_flash_controller+0xfe00501c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    e134:	e0bffc17 	ldw	r2,-16(fp)
    e138:	10800204 	addi	r2,r2,8
    e13c:	10800037 	ldwio	r2,0(r2)
    e140:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    e144:	e0bffa17 	ldw	r2,-24(fp)
    e148:	1080080c 	andi	r2,r2,32
    e14c:	103ff926 	beq	r2,zero,e134 <__alt_mem_epcs_flash_controller+0xfe005134>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    e150:	e0800317 	ldw	r2,12(fp)
    e154:	1080004c 	andi	r2,r2,1
    e158:	1000041e 	bne	r2,zero,e16c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    e15c:	e0bffc17 	ldw	r2,-16(fp)
    e160:	10800304 	addi	r2,r2,12
    e164:	0007883a 	mov	r3,zero
    e168:	10c00035 	stwio	r3,0(r2)

  return read_length;
    e16c:	e0800117 	ldw	r2,4(fp)
}
    e170:	e037883a 	mov	sp,fp
    e174:	df000017 	ldw	fp,0(sp)
    e178:	dec00104 	addi	sp,sp,4
    e17c:	f800283a 	ret

0000e180 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e180:	defffa04 	addi	sp,sp,-24
    e184:	dfc00515 	stw	ra,20(sp)
    e188:	df000415 	stw	fp,16(sp)
    e18c:	df000404 	addi	fp,sp,16
    e190:	e13ffe15 	stw	r4,-8(fp)
    e194:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e198:	e0bfff17 	ldw	r2,-4(fp)
    e19c:	10800017 	ldw	r2,0(r2)
    e1a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e1a4:	e13ffe17 	ldw	r4,-8(fp)
    e1a8:	000a5bc0 	call	a5bc <strlen>
    e1ac:	10800044 	addi	r2,r2,1
    e1b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e1b4:	00000d06 	br	e1ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e1b8:	e0bffc17 	ldw	r2,-16(fp)
    e1bc:	10800217 	ldw	r2,8(r2)
    e1c0:	e0fffd17 	ldw	r3,-12(fp)
    e1c4:	180d883a 	mov	r6,r3
    e1c8:	e17ffe17 	ldw	r5,-8(fp)
    e1cc:	1009883a 	mov	r4,r2
    e1d0:	000e4ac0 	call	e4ac <memcmp>
    e1d4:	1000021e 	bne	r2,zero,e1e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e1d8:	e0bffc17 	ldw	r2,-16(fp)
    e1dc:	00000706 	br	e1fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e1e0:	e0bffc17 	ldw	r2,-16(fp)
    e1e4:	10800017 	ldw	r2,0(r2)
    e1e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e1ec:	e0fffc17 	ldw	r3,-16(fp)
    e1f0:	e0bfff17 	ldw	r2,-4(fp)
    e1f4:	18bff01e 	bne	r3,r2,e1b8 <__alt_mem_epcs_flash_controller+0xfe0051b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    e1f8:	0005883a 	mov	r2,zero
}
    e1fc:	e037883a 	mov	sp,fp
    e200:	dfc00117 	ldw	ra,4(sp)
    e204:	df000017 	ldw	fp,0(sp)
    e208:	dec00204 	addi	sp,sp,8
    e20c:	f800283a 	ret

0000e210 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    e210:	defffb04 	addi	sp,sp,-20
    e214:	dfc00415 	stw	ra,16(sp)
    e218:	df000315 	stw	fp,12(sp)
    e21c:	df000304 	addi	fp,sp,12
    e220:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    e224:	d0a00617 	ldw	r2,-32744(gp)
    e228:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e22c:	00003106 	br	e2f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    e230:	e0bffd17 	ldw	r2,-12(fp)
    e234:	10800217 	ldw	r2,8(r2)
    e238:	1009883a 	mov	r4,r2
    e23c:	000a5bc0 	call	a5bc <strlen>
    e240:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    e244:	e0bffd17 	ldw	r2,-12(fp)
    e248:	10c00217 	ldw	r3,8(r2)
    e24c:	e0bffe17 	ldw	r2,-8(fp)
    e250:	10bfffc4 	addi	r2,r2,-1
    e254:	1885883a 	add	r2,r3,r2
    e258:	10800003 	ldbu	r2,0(r2)
    e25c:	10803fcc 	andi	r2,r2,255
    e260:	1080201c 	xori	r2,r2,128
    e264:	10bfe004 	addi	r2,r2,-128
    e268:	10800bd8 	cmpnei	r2,r2,47
    e26c:	1000031e 	bne	r2,zero,e27c <alt_find_file+0x6c>
    {
      len -= 1;
    e270:	e0bffe17 	ldw	r2,-8(fp)
    e274:	10bfffc4 	addi	r2,r2,-1
    e278:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e27c:	e0bffe17 	ldw	r2,-8(fp)
    e280:	e0ffff17 	ldw	r3,-4(fp)
    e284:	1885883a 	add	r2,r3,r2
    e288:	10800003 	ldbu	r2,0(r2)
    e28c:	10803fcc 	andi	r2,r2,255
    e290:	1080201c 	xori	r2,r2,128
    e294:	10bfe004 	addi	r2,r2,-128
    e298:	10800be0 	cmpeqi	r2,r2,47
    e29c:	1000081e 	bne	r2,zero,e2c0 <alt_find_file+0xb0>
    e2a0:	e0bffe17 	ldw	r2,-8(fp)
    e2a4:	e0ffff17 	ldw	r3,-4(fp)
    e2a8:	1885883a 	add	r2,r3,r2
    e2ac:	10800003 	ldbu	r2,0(r2)
    e2b0:	10803fcc 	andi	r2,r2,255
    e2b4:	1080201c 	xori	r2,r2,128
    e2b8:	10bfe004 	addi	r2,r2,-128
    e2bc:	10000a1e 	bne	r2,zero,e2e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    e2c0:	e0bffd17 	ldw	r2,-12(fp)
    e2c4:	10800217 	ldw	r2,8(r2)
    e2c8:	e0fffe17 	ldw	r3,-8(fp)
    e2cc:	180d883a 	mov	r6,r3
    e2d0:	e17fff17 	ldw	r5,-4(fp)
    e2d4:	1009883a 	mov	r4,r2
    e2d8:	000e4ac0 	call	e4ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e2dc:	1000021e 	bne	r2,zero,e2e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    e2e0:	e0bffd17 	ldw	r2,-12(fp)
    e2e4:	00000706 	br	e304 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    e2e8:	e0bffd17 	ldw	r2,-12(fp)
    e2ec:	10800017 	ldw	r2,0(r2)
    e2f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e2f4:	e0fffd17 	ldw	r3,-12(fp)
    e2f8:	d0a00604 	addi	r2,gp,-32744
    e2fc:	18bfcc1e 	bne	r3,r2,e230 <__alt_mem_epcs_flash_controller+0xfe005230>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    e300:	0005883a 	mov	r2,zero
}
    e304:	e037883a 	mov	sp,fp
    e308:	dfc00117 	ldw	ra,4(sp)
    e30c:	df000017 	ldw	fp,0(sp)
    e310:	dec00204 	addi	sp,sp,8
    e314:	f800283a 	ret

0000e318 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e318:	defffa04 	addi	sp,sp,-24
    e31c:	dfc00515 	stw	ra,20(sp)
    e320:	df000415 	stw	fp,16(sp)
    e324:	dc000315 	stw	r16,12(sp)
    e328:	df000404 	addi	fp,sp,16
    e32c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    e330:	00bffa04 	movi	r2,-24
    e334:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e338:	e03ffc15 	stw	zero,-16(fp)
    e33c:	00001d06 	br	e3b4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    e340:	040000b4 	movhi	r16,2
    e344:	84225004 	addi	r16,r16,-30400
    e348:	e0bffc17 	ldw	r2,-16(fp)
    e34c:	01400304 	movi	r5,12
    e350:	1009883a 	mov	r4,r2
    e354:	000a0a40 	call	a0a4 <__mulsi3>
    e358:	8085883a 	add	r2,r16,r2
    e35c:	10800017 	ldw	r2,0(r2)
    e360:	1000111e 	bne	r2,zero,e3a8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    e364:	040000b4 	movhi	r16,2
    e368:	84225004 	addi	r16,r16,-30400
    e36c:	e0bffc17 	ldw	r2,-16(fp)
    e370:	01400304 	movi	r5,12
    e374:	1009883a 	mov	r4,r2
    e378:	000a0a40 	call	a0a4 <__mulsi3>
    e37c:	8085883a 	add	r2,r16,r2
    e380:	e0fffe17 	ldw	r3,-8(fp)
    e384:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    e388:	d0e00a17 	ldw	r3,-32728(gp)
    e38c:	e0bffc17 	ldw	r2,-16(fp)
    e390:	1880020e 	bge	r3,r2,e39c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    e394:	e0bffc17 	ldw	r2,-16(fp)
    e398:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    e39c:	e0bffc17 	ldw	r2,-16(fp)
    e3a0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    e3a4:	00000606 	br	e3c0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e3a8:	e0bffc17 	ldw	r2,-16(fp)
    e3ac:	10800044 	addi	r2,r2,1
    e3b0:	e0bffc15 	stw	r2,-16(fp)
    e3b4:	e0bffc17 	ldw	r2,-16(fp)
    e3b8:	10800810 	cmplti	r2,r2,32
    e3bc:	103fe01e 	bne	r2,zero,e340 <__alt_mem_epcs_flash_controller+0xfe005340>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    e3c0:	e0bffd17 	ldw	r2,-12(fp)
}
    e3c4:	e6ffff04 	addi	sp,fp,-4
    e3c8:	dfc00217 	ldw	ra,8(sp)
    e3cc:	df000117 	ldw	fp,4(sp)
    e3d0:	dc000017 	ldw	r16,0(sp)
    e3d4:	dec00304 	addi	sp,sp,12
    e3d8:	f800283a 	ret

0000e3dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    e3dc:	defffe04 	addi	sp,sp,-8
    e3e0:	df000115 	stw	fp,4(sp)
    e3e4:	df000104 	addi	fp,sp,4
    e3e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    e3ec:	e0bfff17 	ldw	r2,-4(fp)
    e3f0:	10bffe84 	addi	r2,r2,-6
    e3f4:	10c00428 	cmpgeui	r3,r2,16
    e3f8:	18001a1e 	bne	r3,zero,e464 <alt_exception_cause_generated_bad_addr+0x88>
    e3fc:	100690ba 	slli	r3,r2,2
    e400:	00800074 	movhi	r2,1
    e404:	10b90504 	addi	r2,r2,-7148
    e408:	1885883a 	add	r2,r3,r2
    e40c:	10800017 	ldw	r2,0(r2)
    e410:	1000683a 	jmp	r2
    e414:	0000e454 	movui	zero,913
    e418:	0000e454 	movui	zero,913
    e41c:	0000e464 	muli	zero,zero,913
    e420:	0000e464 	muli	zero,zero,913
    e424:	0000e464 	muli	zero,zero,913
    e428:	0000e454 	movui	zero,913
    e42c:	0000e45c 	xori	zero,zero,913
    e430:	0000e464 	muli	zero,zero,913
    e434:	0000e454 	movui	zero,913
    e438:	0000e454 	movui	zero,913
    e43c:	0000e464 	muli	zero,zero,913
    e440:	0000e454 	movui	zero,913
    e444:	0000e45c 	xori	zero,zero,913
    e448:	0000e464 	muli	zero,zero,913
    e44c:	0000e464 	muli	zero,zero,913
    e450:	0000e454 	movui	zero,913
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    e454:	00800044 	movi	r2,1
    e458:	00000306 	br	e468 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    e45c:	0005883a 	mov	r2,zero
    e460:	00000106 	br	e468 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    e464:	0005883a 	mov	r2,zero
  }
}
    e468:	e037883a 	mov	sp,fp
    e46c:	df000017 	ldw	fp,0(sp)
    e470:	dec00104 	addi	sp,sp,4
    e474:	f800283a 	ret

0000e478 <atexit>:
    e478:	200b883a 	mov	r5,r4
    e47c:	000f883a 	mov	r7,zero
    e480:	000d883a 	mov	r6,zero
    e484:	0009883a 	mov	r4,zero
    e488:	000e4dc1 	jmpi	e4dc <__register_exitproc>

0000e48c <exit>:
    e48c:	defffe04 	addi	sp,sp,-8
    e490:	000b883a 	mov	r5,zero
    e494:	dc000015 	stw	r16,0(sp)
    e498:	dfc00115 	stw	ra,4(sp)
    e49c:	2021883a 	mov	r16,r4
    e4a0:	000e6340 	call	e634 <__call_exitprocs>
    e4a4:	8009883a 	mov	r4,r16
    e4a8:	000ed880 	call	ed88 <_exit>

0000e4ac <memcmp>:
    e4ac:	218d883a 	add	r6,r4,r6
    e4b0:	21800826 	beq	r4,r6,e4d4 <memcmp+0x28>
    e4b4:	20800003 	ldbu	r2,0(r4)
    e4b8:	28c00003 	ldbu	r3,0(r5)
    e4bc:	10c00226 	beq	r2,r3,e4c8 <memcmp+0x1c>
    e4c0:	10c5c83a 	sub	r2,r2,r3
    e4c4:	f800283a 	ret
    e4c8:	21000044 	addi	r4,r4,1
    e4cc:	29400044 	addi	r5,r5,1
    e4d0:	003ff706 	br	e4b0 <__alt_mem_epcs_flash_controller+0xfe0054b0>
    e4d4:	0005883a 	mov	r2,zero
    e4d8:	f800283a 	ret

0000e4dc <__register_exitproc>:
    e4dc:	008000b4 	movhi	r2,2
    e4e0:	10a2b104 	addi	r2,r2,-30012
    e4e4:	10c00017 	ldw	r3,0(r2)
    e4e8:	defff904 	addi	sp,sp,-28
    e4ec:	dc000015 	stw	r16,0(sp)
    e4f0:	1c000c17 	ldw	r16,48(r3)
    e4f4:	dd400515 	stw	r21,20(sp)
    e4f8:	dd000415 	stw	r20,16(sp)
    e4fc:	dcc00315 	stw	r19,12(sp)
    e500:	dc800215 	stw	r18,8(sp)
    e504:	dc400115 	stw	r17,4(sp)
    e508:	dfc00615 	stw	ra,24(sp)
    e50c:	202b883a 	mov	r21,r4
    e510:	2823883a 	mov	r17,r5
    e514:	3027883a 	mov	r19,r6
    e518:	3825883a 	mov	r18,r7
    e51c:	1029883a 	mov	r20,r2
    e520:	8000021e 	bne	r16,zero,e52c <__register_exitproc+0x50>
    e524:	1c000d04 	addi	r16,r3,52
    e528:	1c000c15 	stw	r16,48(r3)
    e52c:	80800117 	ldw	r2,4(r16)
    e530:	00c007c4 	movi	r3,31
    e534:	1880110e 	bge	r3,r2,e57c <__register_exitproc+0xa0>
    e538:	00800074 	movhi	r2,1
    e53c:	10a83304 	addi	r2,r2,-24372
    e540:	1000021e 	bne	r2,zero,e54c <__register_exitproc+0x70>
    e544:	00bfffc4 	movi	r2,-1
    e548:	00003106 	br	e610 <__register_exitproc+0x134>
    e54c:	01002304 	movi	r4,140
    e550:	000a0cc0 	call	a0cc <malloc>
    e554:	1021883a 	mov	r16,r2
    e558:	103ffa26 	beq	r2,zero,e544 <__alt_mem_epcs_flash_controller+0xfe005544>
    e55c:	10000115 	stw	zero,4(r2)
    e560:	a0800017 	ldw	r2,0(r20)
    e564:	10c00c17 	ldw	r3,48(r2)
    e568:	80c00015 	stw	r3,0(r16)
    e56c:	14000c15 	stw	r16,48(r2)
    e570:	80002215 	stw	zero,136(r16)
    e574:	a8001d26 	beq	r21,zero,e5ec <__register_exitproc+0x110>
    e578:	00000606 	br	e594 <__register_exitproc+0xb8>
    e57c:	a8001b26 	beq	r21,zero,e5ec <__register_exitproc+0x110>
    e580:	80802217 	ldw	r2,136(r16)
    e584:	1000091e 	bne	r2,zero,e5ac <__register_exitproc+0xd0>
    e588:	00800074 	movhi	r2,1
    e58c:	10a83304 	addi	r2,r2,-24372
    e590:	103fec26 	beq	r2,zero,e544 <__alt_mem_epcs_flash_controller+0xfe005544>
    e594:	01004204 	movi	r4,264
    e598:	000a0cc0 	call	a0cc <malloc>
    e59c:	103fe926 	beq	r2,zero,e544 <__alt_mem_epcs_flash_controller+0xfe005544>
    e5a0:	10004015 	stw	zero,256(r2)
    e5a4:	10004115 	stw	zero,260(r2)
    e5a8:	80802215 	stw	r2,136(r16)
    e5ac:	81400117 	ldw	r5,4(r16)
    e5b0:	01000044 	movi	r4,1
    e5b4:	2947883a 	add	r3,r5,r5
    e5b8:	18c7883a 	add	r3,r3,r3
    e5bc:	10c7883a 	add	r3,r2,r3
    e5c0:	1cc00015 	stw	r19,0(r3)
    e5c4:	2148983a 	sll	r4,r4,r5
    e5c8:	11404017 	ldw	r5,256(r2)
    e5cc:	290ab03a 	or	r5,r5,r4
    e5d0:	11404015 	stw	r5,256(r2)
    e5d4:	1c802015 	stw	r18,128(r3)
    e5d8:	00c00084 	movi	r3,2
    e5dc:	a8c0031e 	bne	r21,r3,e5ec <__register_exitproc+0x110>
    e5e0:	10c04117 	ldw	r3,260(r2)
    e5e4:	1908b03a 	or	r4,r3,r4
    e5e8:	11004115 	stw	r4,260(r2)
    e5ec:	80800117 	ldw	r2,4(r16)
    e5f0:	10c00044 	addi	r3,r2,1
    e5f4:	10800084 	addi	r2,r2,2
    e5f8:	1085883a 	add	r2,r2,r2
    e5fc:	1085883a 	add	r2,r2,r2
    e600:	80c00115 	stw	r3,4(r16)
    e604:	80a1883a 	add	r16,r16,r2
    e608:	84400015 	stw	r17,0(r16)
    e60c:	0005883a 	mov	r2,zero
    e610:	dfc00617 	ldw	ra,24(sp)
    e614:	dd400517 	ldw	r21,20(sp)
    e618:	dd000417 	ldw	r20,16(sp)
    e61c:	dcc00317 	ldw	r19,12(sp)
    e620:	dc800217 	ldw	r18,8(sp)
    e624:	dc400117 	ldw	r17,4(sp)
    e628:	dc000017 	ldw	r16,0(sp)
    e62c:	dec00704 	addi	sp,sp,28
    e630:	f800283a 	ret

0000e634 <__call_exitprocs>:
    e634:	defff504 	addi	sp,sp,-44
    e638:	dd000515 	stw	r20,20(sp)
    e63c:	050000b4 	movhi	r20,2
    e640:	dc800315 	stw	r18,12(sp)
    e644:	dfc00a15 	stw	ra,40(sp)
    e648:	df000915 	stw	fp,36(sp)
    e64c:	ddc00815 	stw	r23,32(sp)
    e650:	dd800715 	stw	r22,28(sp)
    e654:	dd400615 	stw	r21,24(sp)
    e658:	dcc00415 	stw	r19,16(sp)
    e65c:	dc400215 	stw	r17,8(sp)
    e660:	dc000115 	stw	r16,4(sp)
    e664:	d9000015 	stw	r4,0(sp)
    e668:	2825883a 	mov	r18,r5
    e66c:	a522b104 	addi	r20,r20,-30012
    e670:	a4400017 	ldw	r17,0(r20)
    e674:	8cc00c17 	ldw	r19,48(r17)
    e678:	8c400c04 	addi	r17,r17,48
    e67c:	98004526 	beq	r19,zero,e794 <__call_exitprocs+0x160>
    e680:	9c000117 	ldw	r16,4(r19)
    e684:	00900034 	movhi	r2,16384
    e688:	10bfffc4 	addi	r2,r2,-1
    e68c:	9d402217 	ldw	r21,136(r19)
    e690:	85bfffc4 	addi	r22,r16,-1
    e694:	80a1883a 	add	r16,r16,r2
    e698:	8421883a 	add	r16,r16,r16
    e69c:	8421883a 	add	r16,r16,r16
    e6a0:	ac2f883a 	add	r23,r21,r16
    e6a4:	84000204 	addi	r16,r16,8
    e6a8:	9c21883a 	add	r16,r19,r16
    e6ac:	b0002716 	blt	r22,zero,e74c <__call_exitprocs+0x118>
    e6b0:	90000726 	beq	r18,zero,e6d0 <__call_exitprocs+0x9c>
    e6b4:	a800041e 	bne	r21,zero,e6c8 <__call_exitprocs+0x94>
    e6b8:	b5bfffc4 	addi	r22,r22,-1
    e6bc:	bdffff04 	addi	r23,r23,-4
    e6c0:	843fff04 	addi	r16,r16,-4
    e6c4:	003ff906 	br	e6ac <__alt_mem_epcs_flash_controller+0xfe0056ac>
    e6c8:	b9002017 	ldw	r4,128(r23)
    e6cc:	913ffa1e 	bne	r18,r4,e6b8 <__alt_mem_epcs_flash_controller+0xfe0056b8>
    e6d0:	99000117 	ldw	r4,4(r19)
    e6d4:	82000017 	ldw	r8,0(r16)
    e6d8:	213fffc4 	addi	r4,r4,-1
    e6dc:	b100021e 	bne	r22,r4,e6e8 <__call_exitprocs+0xb4>
    e6e0:	9d800115 	stw	r22,4(r19)
    e6e4:	00000106 	br	e6ec <__call_exitprocs+0xb8>
    e6e8:	80000015 	stw	zero,0(r16)
    e6ec:	403ff226 	beq	r8,zero,e6b8 <__alt_mem_epcs_flash_controller+0xfe0056b8>
    e6f0:	9f000117 	ldw	fp,4(r19)
    e6f4:	a8000526 	beq	r21,zero,e70c <__call_exitprocs+0xd8>
    e6f8:	00800044 	movi	r2,1
    e6fc:	1592983a 	sll	r9,r2,r22
    e700:	a9404017 	ldw	r5,256(r21)
    e704:	494a703a 	and	r5,r9,r5
    e708:	2800021e 	bne	r5,zero,e714 <__call_exitprocs+0xe0>
    e70c:	403ee83a 	callr	r8
    e710:	00000906 	br	e738 <__call_exitprocs+0x104>
    e714:	a9004117 	ldw	r4,260(r21)
    e718:	4908703a 	and	r4,r9,r4
    e71c:	2000041e 	bne	r4,zero,e730 <__call_exitprocs+0xfc>
    e720:	b9400017 	ldw	r5,0(r23)
    e724:	d9000017 	ldw	r4,0(sp)
    e728:	403ee83a 	callr	r8
    e72c:	00000206 	br	e738 <__call_exitprocs+0x104>
    e730:	b9000017 	ldw	r4,0(r23)
    e734:	403ee83a 	callr	r8
    e738:	99000117 	ldw	r4,4(r19)
    e73c:	e13fcc1e 	bne	fp,r4,e670 <__alt_mem_epcs_flash_controller+0xfe005670>
    e740:	89000017 	ldw	r4,0(r17)
    e744:	993fdc26 	beq	r19,r4,e6b8 <__alt_mem_epcs_flash_controller+0xfe0056b8>
    e748:	003fc906 	br	e670 <__alt_mem_epcs_flash_controller+0xfe005670>
    e74c:	00800074 	movhi	r2,1
    e750:	10a83804 	addi	r2,r2,-24352
    e754:	10000f26 	beq	r2,zero,e794 <__call_exitprocs+0x160>
    e758:	99400117 	ldw	r5,4(r19)
    e75c:	99000017 	ldw	r4,0(r19)
    e760:	2800091e 	bne	r5,zero,e788 <__call_exitprocs+0x154>
    e764:	20000826 	beq	r4,zero,e788 <__call_exitprocs+0x154>
    e768:	89000015 	stw	r4,0(r17)
    e76c:	a8000226 	beq	r21,zero,e778 <__call_exitprocs+0x144>
    e770:	a809883a 	mov	r4,r21
    e774:	000a0e00 	call	a0e0 <free>
    e778:	9809883a 	mov	r4,r19
    e77c:	000a0e00 	call	a0e0 <free>
    e780:	8cc00017 	ldw	r19,0(r17)
    e784:	003fbd06 	br	e67c <__alt_mem_epcs_flash_controller+0xfe00567c>
    e788:	9823883a 	mov	r17,r19
    e78c:	2027883a 	mov	r19,r4
    e790:	003fba06 	br	e67c <__alt_mem_epcs_flash_controller+0xfe00567c>
    e794:	dfc00a17 	ldw	ra,40(sp)
    e798:	df000917 	ldw	fp,36(sp)
    e79c:	ddc00817 	ldw	r23,32(sp)
    e7a0:	dd800717 	ldw	r22,28(sp)
    e7a4:	dd400617 	ldw	r21,24(sp)
    e7a8:	dd000517 	ldw	r20,20(sp)
    e7ac:	dcc00417 	ldw	r19,16(sp)
    e7b0:	dc800317 	ldw	r18,12(sp)
    e7b4:	dc400217 	ldw	r17,8(sp)
    e7b8:	dc000117 	ldw	r16,4(sp)
    e7bc:	dec00b04 	addi	sp,sp,44
    e7c0:	f800283a 	ret

0000e7c4 <__umoddi3>:
    e7c4:	defff304 	addi	sp,sp,-52
    e7c8:	df000b15 	stw	fp,44(sp)
    e7cc:	dc400415 	stw	r17,16(sp)
    e7d0:	dc000315 	stw	r16,12(sp)
    e7d4:	dfc00c15 	stw	ra,48(sp)
    e7d8:	ddc00a15 	stw	r23,40(sp)
    e7dc:	dd800915 	stw	r22,36(sp)
    e7e0:	dd400815 	stw	r21,32(sp)
    e7e4:	dd000715 	stw	r20,28(sp)
    e7e8:	dcc00615 	stw	r19,24(sp)
    e7ec:	dc800515 	stw	r18,20(sp)
    e7f0:	2021883a 	mov	r16,r4
    e7f4:	2823883a 	mov	r17,r5
    e7f8:	2839883a 	mov	fp,r5
    e7fc:	3800401e 	bne	r7,zero,e900 <__umoddi3+0x13c>
    e800:	3027883a 	mov	r19,r6
    e804:	2029883a 	mov	r20,r4
    e808:	2980552e 	bgeu	r5,r6,e960 <__umoddi3+0x19c>
    e80c:	00bfffd4 	movui	r2,65535
    e810:	1180a236 	bltu	r2,r6,ea9c <__umoddi3+0x2d8>
    e814:	01003fc4 	movi	r4,255
    e818:	2189803a 	cmpltu	r4,r4,r6
    e81c:	200890fa 	slli	r4,r4,3
    e820:	3104d83a 	srl	r2,r6,r4
    e824:	00c00074 	movhi	r3,1
    e828:	18dd8284 	addi	r3,r3,30218
    e82c:	1885883a 	add	r2,r3,r2
    e830:	10c00003 	ldbu	r3,0(r2)
    e834:	00800804 	movi	r2,32
    e838:	1909883a 	add	r4,r3,r4
    e83c:	1125c83a 	sub	r18,r2,r4
    e840:	90000526 	beq	r18,zero,e858 <__umoddi3+0x94>
    e844:	8ca2983a 	sll	r17,r17,r18
    e848:	8108d83a 	srl	r4,r16,r4
    e84c:	34a6983a 	sll	r19,r6,r18
    e850:	84a8983a 	sll	r20,r16,r18
    e854:	2478b03a 	or	fp,r4,r17
    e858:	982cd43a 	srli	r22,r19,16
    e85c:	e009883a 	mov	r4,fp
    e860:	9dffffcc 	andi	r23,r19,65535
    e864:	b00b883a 	mov	r5,r22
    e868:	000afa80 	call	afa8 <__umodsi3>
    e86c:	b00b883a 	mov	r5,r22
    e870:	e009883a 	mov	r4,fp
    e874:	102b883a 	mov	r21,r2
    e878:	000af440 	call	af44 <__udivsi3>
    e87c:	100b883a 	mov	r5,r2
    e880:	b809883a 	mov	r4,r23
    e884:	000a0a40 	call	a0a4 <__mulsi3>
    e888:	a82a943a 	slli	r21,r21,16
    e88c:	a006d43a 	srli	r3,r20,16
    e890:	1d46b03a 	or	r3,r3,r21
    e894:	1880032e 	bgeu	r3,r2,e8a4 <__umoddi3+0xe0>
    e898:	1cc7883a 	add	r3,r3,r19
    e89c:	1cc00136 	bltu	r3,r19,e8a4 <__umoddi3+0xe0>
    e8a0:	18813136 	bltu	r3,r2,ed68 <__umoddi3+0x5a4>
    e8a4:	18a1c83a 	sub	r16,r3,r2
    e8a8:	b00b883a 	mov	r5,r22
    e8ac:	8009883a 	mov	r4,r16
    e8b0:	000afa80 	call	afa8 <__umodsi3>
    e8b4:	b00b883a 	mov	r5,r22
    e8b8:	8009883a 	mov	r4,r16
    e8bc:	1023883a 	mov	r17,r2
    e8c0:	000af440 	call	af44 <__udivsi3>
    e8c4:	100b883a 	mov	r5,r2
    e8c8:	b809883a 	mov	r4,r23
    e8cc:	8822943a 	slli	r17,r17,16
    e8d0:	000a0a40 	call	a0a4 <__mulsi3>
    e8d4:	a0ffffcc 	andi	r3,r20,65535
    e8d8:	1c46b03a 	or	r3,r3,r17
    e8dc:	1880042e 	bgeu	r3,r2,e8f0 <__umoddi3+0x12c>
    e8e0:	1cc7883a 	add	r3,r3,r19
    e8e4:	1cc00236 	bltu	r3,r19,e8f0 <__umoddi3+0x12c>
    e8e8:	1880012e 	bgeu	r3,r2,e8f0 <__umoddi3+0x12c>
    e8ec:	1cc7883a 	add	r3,r3,r19
    e8f0:	1885c83a 	sub	r2,r3,r2
    e8f4:	1484d83a 	srl	r2,r2,r18
    e8f8:	0007883a 	mov	r3,zero
    e8fc:	00005306 	br	ea4c <__umoddi3+0x288>
    e900:	29c05036 	bltu	r5,r7,ea44 <__umoddi3+0x280>
    e904:	00bfffd4 	movui	r2,65535
    e908:	11c05c2e 	bgeu	r2,r7,ea7c <__umoddi3+0x2b8>
    e90c:	00804034 	movhi	r2,256
    e910:	10bfffc4 	addi	r2,r2,-1
    e914:	11c10636 	bltu	r2,r7,ed30 <__umoddi3+0x56c>
    e918:	01000404 	movi	r4,16
    e91c:	3904d83a 	srl	r2,r7,r4
    e920:	00c00074 	movhi	r3,1
    e924:	18dd8284 	addi	r3,r3,30218
    e928:	1885883a 	add	r2,r3,r2
    e92c:	14c00003 	ldbu	r19,0(r2)
    e930:	00c00804 	movi	r3,32
    e934:	9927883a 	add	r19,r19,r4
    e938:	1ce9c83a 	sub	r20,r3,r19
    e93c:	a0005c1e 	bne	r20,zero,eab0 <__umoddi3+0x2ec>
    e940:	3c400136 	bltu	r7,r17,e948 <__umoddi3+0x184>
    e944:	81810a36 	bltu	r16,r6,ed70 <__umoddi3+0x5ac>
    e948:	8185c83a 	sub	r2,r16,r6
    e94c:	89e3c83a 	sub	r17,r17,r7
    e950:	8089803a 	cmpltu	r4,r16,r2
    e954:	8939c83a 	sub	fp,r17,r4
    e958:	e007883a 	mov	r3,fp
    e95c:	00003b06 	br	ea4c <__umoddi3+0x288>
    e960:	3000041e 	bne	r6,zero,e974 <__umoddi3+0x1b0>
    e964:	000b883a 	mov	r5,zero
    e968:	01000044 	movi	r4,1
    e96c:	000af440 	call	af44 <__udivsi3>
    e970:	1027883a 	mov	r19,r2
    e974:	00bfffd4 	movui	r2,65535
    e978:	14c0442e 	bgeu	r2,r19,ea8c <__umoddi3+0x2c8>
    e97c:	00804034 	movhi	r2,256
    e980:	10bfffc4 	addi	r2,r2,-1
    e984:	14c0ec36 	bltu	r2,r19,ed38 <__umoddi3+0x574>
    e988:	00800404 	movi	r2,16
    e98c:	9886d83a 	srl	r3,r19,r2
    e990:	01000074 	movhi	r4,1
    e994:	211d8284 	addi	r4,r4,30218
    e998:	20c7883a 	add	r3,r4,r3
    e99c:	18c00003 	ldbu	r3,0(r3)
    e9a0:	1887883a 	add	r3,r3,r2
    e9a4:	00800804 	movi	r2,32
    e9a8:	10e5c83a 	sub	r18,r2,r3
    e9ac:	9000ab1e 	bne	r18,zero,ec5c <__umoddi3+0x498>
    e9b0:	982cd43a 	srli	r22,r19,16
    e9b4:	8ce3c83a 	sub	r17,r17,r19
    e9b8:	9dffffcc 	andi	r23,r19,65535
    e9bc:	b00b883a 	mov	r5,r22
    e9c0:	8809883a 	mov	r4,r17
    e9c4:	000afa80 	call	afa8 <__umodsi3>
    e9c8:	b00b883a 	mov	r5,r22
    e9cc:	8809883a 	mov	r4,r17
    e9d0:	102b883a 	mov	r21,r2
    e9d4:	000af440 	call	af44 <__udivsi3>
    e9d8:	b80b883a 	mov	r5,r23
    e9dc:	1009883a 	mov	r4,r2
    e9e0:	000a0a40 	call	a0a4 <__mulsi3>
    e9e4:	a82a943a 	slli	r21,r21,16
    e9e8:	a006d43a 	srli	r3,r20,16
    e9ec:	1d46b03a 	or	r3,r3,r21
    e9f0:	1880042e 	bgeu	r3,r2,ea04 <__umoddi3+0x240>
    e9f4:	1cc7883a 	add	r3,r3,r19
    e9f8:	1cc00236 	bltu	r3,r19,ea04 <__umoddi3+0x240>
    e9fc:	1880012e 	bgeu	r3,r2,ea04 <__umoddi3+0x240>
    ea00:	1cc7883a 	add	r3,r3,r19
    ea04:	18a1c83a 	sub	r16,r3,r2
    ea08:	b00b883a 	mov	r5,r22
    ea0c:	8009883a 	mov	r4,r16
    ea10:	000afa80 	call	afa8 <__umodsi3>
    ea14:	1023883a 	mov	r17,r2
    ea18:	b00b883a 	mov	r5,r22
    ea1c:	8009883a 	mov	r4,r16
    ea20:	000af440 	call	af44 <__udivsi3>
    ea24:	8822943a 	slli	r17,r17,16
    ea28:	b80b883a 	mov	r5,r23
    ea2c:	1009883a 	mov	r4,r2
    ea30:	000a0a40 	call	a0a4 <__mulsi3>
    ea34:	a53fffcc 	andi	r20,r20,65535
    ea38:	a446b03a 	or	r3,r20,r17
    ea3c:	18bfac2e 	bgeu	r3,r2,e8f0 <__alt_mem_epcs_flash_controller+0xfe0058f0>
    ea40:	003fa706 	br	e8e0 <__alt_mem_epcs_flash_controller+0xfe0058e0>
    ea44:	2005883a 	mov	r2,r4
    ea48:	2807883a 	mov	r3,r5
    ea4c:	dfc00c17 	ldw	ra,48(sp)
    ea50:	df000b17 	ldw	fp,44(sp)
    ea54:	ddc00a17 	ldw	r23,40(sp)
    ea58:	dd800917 	ldw	r22,36(sp)
    ea5c:	dd400817 	ldw	r21,32(sp)
    ea60:	dd000717 	ldw	r20,28(sp)
    ea64:	dcc00617 	ldw	r19,24(sp)
    ea68:	dc800517 	ldw	r18,20(sp)
    ea6c:	dc400417 	ldw	r17,16(sp)
    ea70:	dc000317 	ldw	r16,12(sp)
    ea74:	dec00d04 	addi	sp,sp,52
    ea78:	f800283a 	ret
    ea7c:	04c03fc4 	movi	r19,255
    ea80:	99c9803a 	cmpltu	r4,r19,r7
    ea84:	200890fa 	slli	r4,r4,3
    ea88:	003fa406 	br	e91c <__alt_mem_epcs_flash_controller+0xfe00591c>
    ea8c:	00803fc4 	movi	r2,255
    ea90:	14c5803a 	cmpltu	r2,r2,r19
    ea94:	100490fa 	slli	r2,r2,3
    ea98:	003fbc06 	br	e98c <__alt_mem_epcs_flash_controller+0xfe00598c>
    ea9c:	00804034 	movhi	r2,256
    eaa0:	10bfffc4 	addi	r2,r2,-1
    eaa4:	1180a636 	bltu	r2,r6,ed40 <__umoddi3+0x57c>
    eaa8:	01000404 	movi	r4,16
    eaac:	003f5c06 	br	e820 <__alt_mem_epcs_flash_controller+0xfe005820>
    eab0:	3d0e983a 	sll	r7,r7,r20
    eab4:	34ead83a 	srl	r21,r6,r19
    eab8:	8cc6d83a 	srl	r3,r17,r19
    eabc:	8d10983a 	sll	r8,r17,r20
    eac0:	3d6ab03a 	or	r21,r7,r21
    eac4:	a82cd43a 	srli	r22,r21,16
    eac8:	84e2d83a 	srl	r17,r16,r19
    eacc:	1809883a 	mov	r4,r3
    ead0:	b00b883a 	mov	r5,r22
    ead4:	8a22b03a 	or	r17,r17,r8
    ead8:	3524983a 	sll	r18,r6,r20
    eadc:	dc400015 	stw	r17,0(sp)
    eae0:	d8c00115 	stw	r3,4(sp)
    eae4:	000afa80 	call	afa8 <__umodsi3>
    eae8:	d8c00117 	ldw	r3,4(sp)
    eaec:	b00b883a 	mov	r5,r22
    eaf0:	1039883a 	mov	fp,r2
    eaf4:	1809883a 	mov	r4,r3
    eaf8:	000af440 	call	af44 <__udivsi3>
    eafc:	adffffcc 	andi	r23,r21,65535
    eb00:	100b883a 	mov	r5,r2
    eb04:	b809883a 	mov	r4,r23
    eb08:	1023883a 	mov	r17,r2
    eb0c:	000a0a40 	call	a0a4 <__mulsi3>
    eb10:	d9400017 	ldw	r5,0(sp)
    eb14:	e008943a 	slli	r4,fp,16
    eb18:	8520983a 	sll	r16,r16,r20
    eb1c:	2806d43a 	srli	r3,r5,16
    eb20:	1906b03a 	or	r3,r3,r4
    eb24:	1880042e 	bgeu	r3,r2,eb38 <__umoddi3+0x374>
    eb28:	1d47883a 	add	r3,r3,r21
    eb2c:	893fffc4 	addi	r4,r17,-1
    eb30:	1d40892e 	bgeu	r3,r21,ed58 <__umoddi3+0x594>
    eb34:	2023883a 	mov	r17,r4
    eb38:	18b9c83a 	sub	fp,r3,r2
    eb3c:	b00b883a 	mov	r5,r22
    eb40:	e009883a 	mov	r4,fp
    eb44:	000afa80 	call	afa8 <__umodsi3>
    eb48:	b00b883a 	mov	r5,r22
    eb4c:	e009883a 	mov	r4,fp
    eb50:	d8800215 	stw	r2,8(sp)
    eb54:	000af440 	call	af44 <__udivsi3>
    eb58:	100b883a 	mov	r5,r2
    eb5c:	b809883a 	mov	r4,r23
    eb60:	102d883a 	mov	r22,r2
    eb64:	000a0a40 	call	a0a4 <__mulsi3>
    eb68:	d9800217 	ldw	r6,8(sp)
    eb6c:	d8c00017 	ldw	r3,0(sp)
    eb70:	300c943a 	slli	r6,r6,16
    eb74:	1a3fffcc 	andi	r8,r3,65535
    eb78:	4190b03a 	or	r8,r8,r6
    eb7c:	4080042e 	bgeu	r8,r2,eb90 <__umoddi3+0x3cc>
    eb80:	4551883a 	add	r8,r8,r21
    eb84:	b0ffffc4 	addi	r3,r22,-1
    eb88:	45406f2e 	bgeu	r8,r21,ed48 <__umoddi3+0x584>
    eb8c:	182d883a 	mov	r22,r3
    eb90:	880e943a 	slli	r7,r17,16
    eb94:	9006d43a 	srli	r3,r18,16
    eb98:	91bfffcc 	andi	r6,r18,65535
    eb9c:	3dacb03a 	or	r22,r7,r22
    eba0:	b02ed43a 	srli	r23,r22,16
    eba4:	b5bfffcc 	andi	r22,r22,65535
    eba8:	300b883a 	mov	r5,r6
    ebac:	b009883a 	mov	r4,r22
    ebb0:	40a3c83a 	sub	r17,r8,r2
    ebb4:	d8c00115 	stw	r3,4(sp)
    ebb8:	d9800215 	stw	r6,8(sp)
    ebbc:	000a0a40 	call	a0a4 <__mulsi3>
    ebc0:	d9800217 	ldw	r6,8(sp)
    ebc4:	b809883a 	mov	r4,r23
    ebc8:	1039883a 	mov	fp,r2
    ebcc:	300b883a 	mov	r5,r6
    ebd0:	000a0a40 	call	a0a4 <__mulsi3>
    ebd4:	d8c00117 	ldw	r3,4(sp)
    ebd8:	b809883a 	mov	r4,r23
    ebdc:	d8800215 	stw	r2,8(sp)
    ebe0:	180b883a 	mov	r5,r3
    ebe4:	000a0a40 	call	a0a4 <__mulsi3>
    ebe8:	d8c00117 	ldw	r3,4(sp)
    ebec:	b009883a 	mov	r4,r22
    ebf0:	102f883a 	mov	r23,r2
    ebf4:	180b883a 	mov	r5,r3
    ebf8:	000a0a40 	call	a0a4 <__mulsi3>
    ebfc:	d9800217 	ldw	r6,8(sp)
    ec00:	e006d43a 	srli	r3,fp,16
    ec04:	1185883a 	add	r2,r2,r6
    ec08:	1885883a 	add	r2,r3,r2
    ec0c:	1180022e 	bgeu	r2,r6,ec18 <__umoddi3+0x454>
    ec10:	00c00074 	movhi	r3,1
    ec14:	b8ef883a 	add	r23,r23,r3
    ec18:	1006d43a 	srli	r3,r2,16
    ec1c:	1004943a 	slli	r2,r2,16
    ec20:	e73fffcc 	andi	fp,fp,65535
    ec24:	1dc7883a 	add	r3,r3,r23
    ec28:	1739883a 	add	fp,r2,fp
    ec2c:	88c03a36 	bltu	r17,r3,ed18 <__umoddi3+0x554>
    ec30:	88c05126 	beq	r17,r3,ed78 <__umoddi3+0x5b4>
    ec34:	88c9c83a 	sub	r4,r17,r3
    ec38:	e00f883a 	mov	r7,fp
    ec3c:	81cfc83a 	sub	r7,r16,r7
    ec40:	81c7803a 	cmpltu	r3,r16,r7
    ec44:	20c7c83a 	sub	r3,r4,r3
    ec48:	1cc4983a 	sll	r2,r3,r19
    ec4c:	3d0ed83a 	srl	r7,r7,r20
    ec50:	1d06d83a 	srl	r3,r3,r20
    ec54:	11c4b03a 	or	r2,r2,r7
    ec58:	003f7c06 	br	ea4c <__alt_mem_epcs_flash_controller+0xfe005a4c>
    ec5c:	9ca6983a 	sll	r19,r19,r18
    ec60:	88f8d83a 	srl	fp,r17,r3
    ec64:	80c4d83a 	srl	r2,r16,r3
    ec68:	982cd43a 	srli	r22,r19,16
    ec6c:	8ca2983a 	sll	r17,r17,r18
    ec70:	e009883a 	mov	r4,fp
    ec74:	b00b883a 	mov	r5,r22
    ec78:	146ab03a 	or	r21,r2,r17
    ec7c:	000afa80 	call	afa8 <__umodsi3>
    ec80:	b00b883a 	mov	r5,r22
    ec84:	e009883a 	mov	r4,fp
    ec88:	1029883a 	mov	r20,r2
    ec8c:	9dffffcc 	andi	r23,r19,65535
    ec90:	000af440 	call	af44 <__udivsi3>
    ec94:	b809883a 	mov	r4,r23
    ec98:	100b883a 	mov	r5,r2
    ec9c:	000a0a40 	call	a0a4 <__mulsi3>
    eca0:	a008943a 	slli	r4,r20,16
    eca4:	a806d43a 	srli	r3,r21,16
    eca8:	84a8983a 	sll	r20,r16,r18
    ecac:	1906b03a 	or	r3,r3,r4
    ecb0:	1880042e 	bgeu	r3,r2,ecc4 <__umoddi3+0x500>
    ecb4:	1cc7883a 	add	r3,r3,r19
    ecb8:	1cc00236 	bltu	r3,r19,ecc4 <__umoddi3+0x500>
    ecbc:	1880012e 	bgeu	r3,r2,ecc4 <__umoddi3+0x500>
    ecc0:	1cc7883a 	add	r3,r3,r19
    ecc4:	18a3c83a 	sub	r17,r3,r2
    ecc8:	b00b883a 	mov	r5,r22
    eccc:	8809883a 	mov	r4,r17
    ecd0:	000afa80 	call	afa8 <__umodsi3>
    ecd4:	b00b883a 	mov	r5,r22
    ecd8:	8809883a 	mov	r4,r17
    ecdc:	1021883a 	mov	r16,r2
    ece0:	000af440 	call	af44 <__udivsi3>
    ece4:	100b883a 	mov	r5,r2
    ece8:	b809883a 	mov	r4,r23
    ecec:	8020943a 	slli	r16,r16,16
    ecf0:	000a0a40 	call	a0a4 <__mulsi3>
    ecf4:	a8ffffcc 	andi	r3,r21,65535
    ecf8:	1c06b03a 	or	r3,r3,r16
    ecfc:	1880042e 	bgeu	r3,r2,ed10 <__umoddi3+0x54c>
    ed00:	1cc7883a 	add	r3,r3,r19
    ed04:	1cc00236 	bltu	r3,r19,ed10 <__umoddi3+0x54c>
    ed08:	1880012e 	bgeu	r3,r2,ed10 <__umoddi3+0x54c>
    ed0c:	1cc7883a 	add	r3,r3,r19
    ed10:	18a3c83a 	sub	r17,r3,r2
    ed14:	003f2906 	br	e9bc <__alt_mem_epcs_flash_controller+0xfe0059bc>
    ed18:	e48fc83a 	sub	r7,fp,r18
    ed1c:	1d49c83a 	sub	r4,r3,r21
    ed20:	e1f9803a 	cmpltu	fp,fp,r7
    ed24:	2739c83a 	sub	fp,r4,fp
    ed28:	8f09c83a 	sub	r4,r17,fp
    ed2c:	003fc306 	br	ec3c <__alt_mem_epcs_flash_controller+0xfe005c3c>
    ed30:	01000604 	movi	r4,24
    ed34:	003ef906 	br	e91c <__alt_mem_epcs_flash_controller+0xfe00591c>
    ed38:	00800604 	movi	r2,24
    ed3c:	003f1306 	br	e98c <__alt_mem_epcs_flash_controller+0xfe00598c>
    ed40:	01000604 	movi	r4,24
    ed44:	003eb606 	br	e820 <__alt_mem_epcs_flash_controller+0xfe005820>
    ed48:	40bf902e 	bgeu	r8,r2,eb8c <__alt_mem_epcs_flash_controller+0xfe005b8c>
    ed4c:	b5bfff84 	addi	r22,r22,-2
    ed50:	4551883a 	add	r8,r8,r21
    ed54:	003f8e06 	br	eb90 <__alt_mem_epcs_flash_controller+0xfe005b90>
    ed58:	18bf762e 	bgeu	r3,r2,eb34 <__alt_mem_epcs_flash_controller+0xfe005b34>
    ed5c:	8c7fff84 	addi	r17,r17,-2
    ed60:	1d47883a 	add	r3,r3,r21
    ed64:	003f7406 	br	eb38 <__alt_mem_epcs_flash_controller+0xfe005b38>
    ed68:	1cc7883a 	add	r3,r3,r19
    ed6c:	003ecd06 	br	e8a4 <__alt_mem_epcs_flash_controller+0xfe0058a4>
    ed70:	8005883a 	mov	r2,r16
    ed74:	003ef806 	br	e958 <__alt_mem_epcs_flash_controller+0xfe005958>
    ed78:	873fe736 	bltu	r16,fp,ed18 <__alt_mem_epcs_flash_controller+0xfe005d18>
    ed7c:	e00f883a 	mov	r7,fp
    ed80:	0009883a 	mov	r4,zero
    ed84:	003fad06 	br	ec3c <__alt_mem_epcs_flash_controller+0xfe005c3c>

0000ed88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ed88:	defffd04 	addi	sp,sp,-12
    ed8c:	df000215 	stw	fp,8(sp)
    ed90:	df000204 	addi	fp,sp,8
    ed94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ed98:	0001883a 	nop
    ed9c:	e0bfff17 	ldw	r2,-4(fp)
    eda0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    eda4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    eda8:	10000226 	beq	r2,zero,edb4 <_exit+0x2c>
    ALT_SIM_FAIL();
    edac:	002af070 	cmpltui	zero,zero,43969
    edb0:	00000106 	br	edb8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    edb4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    edb8:	003fff06 	br	edb8 <__alt_mem_epcs_flash_controller+0xfe005db8>
