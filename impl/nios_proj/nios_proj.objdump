
nios_proj.elf:     file format elf32-littlenios2
nios_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000117f8 memsz 0x000117f8 flags r-x
    LOAD off    0x00012818 vaddr 0x00011818 paddr 0x00012c08 align 2**12
         filesz 0x000013f0 memsz 0x000013f0 flags rw-
    LOAD off    0x00013ff8 vaddr 0x00013ff8 paddr 0x00013ff8 align 2**12
         filesz 0x00000000 memsz 0x00000ce0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b038  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000065b0  0000b268  0000b268  0000c268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013f0  00011818  00012c08  00012818  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000ce0  00013ff8  00013ff8  00013ff8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00014cd8  00014cd8  00013c08  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  02000000  02000000  00013c08  2**0
                  CONTENTS
  8 .epcs_flash_controller 00000000  02009000  02009000  00013c08  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00013c08  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a30  00000000  00000000  00013c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00011175  00000000  00000000  00014660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000545d  00000000  00000000  000257d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006729  00000000  00000000  0002ac32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d8c  00000000  00000000  0003135c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003135  00000000  00000000  000330e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00003022  00000000  00000000  0003621d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00039240  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000005a8  00000000  00000000  00039250  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003c669  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  0003c66c  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003c66f  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003c670  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0003c671  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0003c675  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0003c679  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  0003c67d  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  0003c686  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0003c68f  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000d  00000000  00000000  0003c698  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003d  00000000  00000000  0003c6a5  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00054373  00000000  00000000  0003c6e2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0000b268 l    d  .rodata	00000000 .rodata
00011818 l    d  .rwdata	00000000 .rwdata
00013ff8 l    d  .bss	00000000 .bss
00014cd8 l    d  .sdram	00000000 .sdram
02000000 l    d  .onchip_memory2	00000000 .onchip_memory2
02009000 l    d  .epcs_flash_controller	00000000 .epcs_flash_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Class2018/Documents/Projects/Crypto_wallet/impl/nios_proj_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 bip39.c
0000f22c l     O .rodata	00002004 wordlist
00013ff8 l     O .bss	00000004 bip39_cache_index
00014040 l     O .bss	00000604 bip39_cache
00014644 l     O .bss	000000f0 mnemo.3380
00014734 l     O .bss	00000144 pctx.3407
00000000 l    df *ABS*	00000000 hmac.c
00014878 l     O .bss	00000040 i_key_pad.2093
000148b8 l     O .bss	000000a8 hctx.2114
00014960 l     O .bss	00000040 key_pad.2121
000149a0 l     O .bss	00000068 context.2122
00014a08 l     O .bss	00000080 i_key_pad.2138
00014a88 l     O .bss	00000080 key_pad.2166
00014b08 l     O .bss	000000d0 context.2167
00000000 l    df *ABS*	00000000 memzero.c
00000000 l    df *ABS*	00000000 pbkdf2.c
00000000 l    df *ABS*	00000000 rand.c
00013ffc l     O .bss	00000004 initialized.3065
00000000 l    df *ABS*	00000000 sha2.c
00011250 l     O .rodata	00000100 K256
00011370 l     O .rodata	00000280 K512
00012bcc l     O .rwdata	00000004 sha2_hex_digits
00005a68 l     F .text	0000050c sha512_Last
00000000 l    df *ABS*	00000000 wallet_main.c
00000000 l    df *ABS*	00000000 wallet_system.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00014008 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00006a28 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
00011818 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
000076a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012bd8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00007a5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00007b98 l     F .text	00000034 alt_dev_reg
000118f8 l     O .rwdata	000000cc epcs_flash_controller
000119c4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00007c5c l     F .text	00000034 alt_flash_device_register
00007ce4 l     F .text	000003f8 alt_epcs_flash_query
000080dc l     F .text	000000ec alt_epcs_flash_memcmp
000084b4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000897c l     F .text	0000020c altera_avalon_jtag_uart_irq
00008b88 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
0000921c l     F .text	00000038 epcs_test_wip
00009254 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00009928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009a5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009a88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009fa4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000a104 l     F .text	0000003c alt_get_errno
0000a140 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001403c g     O .bss	00000004 alt_instruction_exception_handler
000067e4 g     F .text	0000001c putchar
00008428 g     F .text	0000008c alt_epcs_flash_get_info
0000778c g     F .text	0000007c alt_main
00006990 g     F .text	0000002c strcpy
00002294 g     F .text	000007ac sha1_Transform
00006800 g     F .text	00000080 _puts_r
00014bd8 g     O .bss	00000100 alt_irq
00012c08 g       *ABS*	00000000 __flash_rwdata_start
00007094 g     F .text	00000054 _gettimeofday_r
00014cd8 g       *ABS*	00000000 __alt_heap_start
00006790 g     F .text	0000004c printf
00001938 g     F .text	00000378 pbkdf2_hmac_sha512_Init
000115f0 g     O .rodata	00000040 sha512_initial_hash_value
000062a4 g     F .text	00000058 sha512_Raw
0000a40c g     F .text	00000024 altera_nios2_gen2_irq_init
00009290 g     F .text	000000fc epcs_sector_erase
000040a4 g     F .text	00000100 sha256_End
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00014010 g     O .bss	00000004 errno
00014028 g     O .bss	00000004 alt_argv
0001abcc g       *ABS*	00000000 _gp
000008d4 g     F .text	00000138 hmac_sha256_Init
00012a4c g     O .rwdata	00000180 alt_fd_list
000067dc g     F .text	00000008 _putchar_r
000094d4 g     F .text	0000006c epcs_write_status_register
0000a62c g     F .text	00000090 alt_find_dev
000064d0 g     F .text	00000028 memcpy
000041a4 g     F .text	00000058 sha256_Raw
0000a088 g     F .text	0000007c alt_io_redirect
0000b268 g       *ABS*	00000000 __DTOR_END__
00006880 g     F .text	00000014 puts
0000a888 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000085c0 g     F .text	00000100 alt_epcs_flash_write_block
00008d80 g     F .text	0000021c altera_avalon_jtag_uart_read
000064a8 g     F .text	00000014 malloc
00006754 g     F .text	0000003c _printf_r
000073f0 g     F .text	00000064 .hidden __udivsi3
00014014 g     O .bss	00000008 alt_timezone
00006908 g     F .text	00000050 _sbrk_r
00001cb0 g     F .text	00000144 pbkdf2_hmac_sha512_Update
00012bf4 g     O .rwdata	00000004 alt_max_fd
00008548 g     F .text	00000078 alt_epcs_flash_erase_block
0000ac70 g     F .text	000005c4 .hidden __umoddi3
00012bd0 g     O .rwdata	00000004 _global_impure_ptr
000097a0 g     F .text	0000005c epcs_exit_4_bytes_mode
00003180 g     F .text	00000100 sha1_End
00014cd8 g       *ABS*	00000000 __bss_end
00009eb4 g     F .text	000000f0 alt_iic_isr_register
00007954 g     F .text	00000108 alt_tick
00000b70 g     F .text	000001ec hmac_sha256_prepare
00009e68 g     F .text	0000004c alt_ic_irq_enabled
000078b8 g     F .text	0000009c alt_alarm_stop
0000134c g     F .text	00000040 memzero
00014038 g     O .bss	00000004 alt_irq_active
000041fc g     F .text	00000054 sha256_Data
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012a24 g     O .rwdata	00000028 alt_dev_null
00000b00 g     F .text	00000070 hmac_sha256
00009a3c g     F .text	00000020 alt_dcache_flush_all
00012c08 g       *ABS*	00000000 __ram_rwdata_end
00012bec g     O .rwdata	00000008 alt_dev_list
00007a98 g     F .text	00000100 write
0000713c g     F .text	00000058 _putc_r
00011818 g       *ABS*	00000000 __ram_rodata_end
00007454 g     F .text	00000058 .hidden __umodsi3
0000965c g     F .text	00000068 epcs_read_electronic_signature
00014cd8 g       *ABS*	00000000 end
000021a4  w    F .text	0000008c random_buffer
0000332c g     F .text	00000070 sha256_Init
00000e94 g     F .text	0000004c hmac_sha512_Update
00002e48 g     F .text	00000338 sha1_Final
000088bc g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000b268 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00005f74 g     F .text	00000230 sha512_Final
00008f9c g     F .text	00000224 altera_avalon_jtag_uart_write
00002230 g     F .text	00000064 sha1_Init
00006a94 g     F .text	0000052c ___vfprintf_internal_r
00006518 g     F .text	000000e4 _free_r
00000d5c g     F .text	00000138 hmac_sha512_Init
0000aae0 g     F .text	00000190 __call_exitprocs
00001fb0 g     F .text	00000170 pbkdf2_hmac_sha512
00000230 g     F .text	0000003c _start
00014030 g     O .bss	00000004 _alt_tick_rate
000068a8 g     F .text	00000060 rand
0000a430 g     F .text	000001fc alt_avalon_spi_command
00014034 g     O .bss	00000004 _alt_nticks
00007c04 g     F .text	00000058 alt_sys_init
0000a988 g     F .text	00000158 __register_exitproc
00008c28 g     F .text	00000068 altera_avalon_jtag_uart_close
00006480 g     F .text	00000028 .hidden __mulsi3
00011818 g       *ABS*	00000000 __ram_rwdata_start
0000b268 g       *ABS*	00000000 __ram_rodata_start
000091c0 g     F .text	0000005c epcs_read_status_register
0000339c g     F .text	000005c8 sha256_Transform
00008758 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a7c4 g     F .text	000000c4 alt_get_fd
0000138c g     F .text	00000224 pbkdf2_hmac_sha256_Init
000016e0 g     F .text	000000e8 pbkdf2_hmac_sha256_Final
000096c4 g     F .text	00000080 epcs_read_device_id
0000a958 g     F .text	00000030 memcmp
00008818 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014cd8 g       *ABS*	00000000 __alt_stack_base
00008868 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
0000a6bc g     F .text	00000108 alt_find_file
00002120 g     F .text	00000084 random32
00009ac4 g     F .text	000000a4 alt_dev_llist_insert
00007808 g     F .text	000000b0 sbrk
00000a58 g     F .text	000000a8 hmac_sha256_Final
00003280 g     F .text	00000058 sha1_Raw
00012bfc g     O .rwdata	00000008 alt_flash_dev_list
00006fdc g     F .text	000000b8 __sfvwrite_small_dev
000074ac g     F .text	000001f4 gettimeofday
00013ff8 g       *ABS*	00000000 __bss_start
000064f8 g     F .text	00000020 memset
00006350 g     F .text	00000130 main
00003d6c g     F .text	00000338 sha256_Final
0001402c g     O .bss	00000004 alt_envp
000087b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00006894 g     F .text	00000014 srand
0000026c g     F .text	000000a0 mnemonic_generate
02000000 g       *ABS*	00000000 __alt_heap_limit
000065fc g     F .text	00000158 _malloc_r
000069d8 g     F .text	00000050 time
00012bf8 g     O .rwdata	00000004 alt_errno
000070e8 g     F .text	00000054 putc
000072f8 g     F .text	00000084 .hidden __divsi3
0000b268 g       *ABS*	00000000 __CTOR_END__
000081c8 g     F .text	00000260 alt_epcs_flash_write
00006958 g     F .text	00000038 strcmp
0000b268 g       *ABS*	00000000 __flash_rodata_start
0000b268 g       *ABS*	00000000 __DTOR_LIST__
000051f8 g     F .text	00000870 sha512_Update
00007bcc g     F .text	00000038 alt_irq_init
0000a388 g     F .text	00000084 alt_release_fd
00004250 g     F .text	00000088 sha512_Init
00011716 g     O .rodata	00000100 .hidden __clz_tab
0000030c g     F .text	00000260 mnemonic_from_data
0000a924 g     F .text	00000014 atexit
00007194 g     F .text	00000058 _write_r
00012bd4 g     O .rwdata	00000004 _impure_ptr
00014024 g     O .bss	00000004 alt_argc
00009bc8 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
0001123c g     O .rodata	00000014 sha1_initial_hash_value
00012be4 g     O .rwdata	00000008 alt_fs_list
000032d8 g     F .text	00000054 sha1_Data
00000a0c g     F .text	0000004c hmac_sha256_Update
0001401c g     O .bss	00000008 alt_resettime
000042d8 g     F .text	00000f20 sha512_Transform
00000ee0 g     F .text	000000a8 hmac_sha512_Final
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000938c g     F .text	000000f4 epcs_read_buffer
02000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000062fc g     F .text	00000054 sha512_Data
00011350 g     O .rodata	00000020 sha256_initial_hash_value
000061a4 g     F .text	00000100 sha512_End
00007c90 g     F .text	00000054 alt_epcs_flash_init
00009d04 g     F .text	00000050 alt_ic_isr_register
00012c08 g       *ABS*	00000000 _edata
00014cd8 g       *ABS*	00000000 _end
00009c28 g     F .text	00000068 alt_flash_open_dev
00000230 g       *ABS*	00000000 __ram_exceptions_end
00008c90 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00000fec g     F .text	00000360 hmac_sha512_prepare
00009ddc g     F .text	0000008c alt_ic_irq_disable
00009744 g     F .text	0000005c epcs_enter_4_bytes_mode
000015b0 g     F .text	00000130 pbkdf2_hmac_sha256_Update
00003964 g     F .text	00000408 sha256_Update
0000a938 g     F .text	00000020 exit
00009c90 g     F .text	00000054 alt_flash_close_dev
0000737c g     F .text	00000074 .hidden __modsi3
00001df4 g     F .text	000001bc pbkdf2_hmac_sha512_Final
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000b234 g     F .text	00000034 _exit
000097fc g     F .text	0000012c alt_alarm_start
000071ec g     F .text	0000010c .hidden __muldi3
000069bc g     F .text	0000001c strlen
00009480 g     F .text	00000054 epcs_write_enable
0000a22c g     F .text	0000015c open
000017c8 g     F .text	00000170 pbkdf2_hmac_sha256
00014000 g     O .bss	00000004 __malloc_sbrk_start
00009ce4 g     F .text	00000020 alt_icache_flush_all
0000056c g     F .text	00000368 mnemonic_to_seed
00002a40 g     F .text	00000408 sha1_Update
00000f88 g     F .text	00000064 hmac_sha512
00012c04 g     O .rwdata	00000004 alt_priority_mask
00014004 g     O .bss	00000004 __malloc_free_list
00009d54 g     F .text	00000088 alt_ic_irq_enable
00006fc0 g     F .text	0000001c __vfprintf_internal
000086c0 g     F .text	00000098 alt_epcs_flash_read
00012bdc g     O .rwdata	00000008 alt_alarm_list
00009b68 g     F .text	00000060 _do_ctors
00009964 g     F .text	000000d8 close
00007708 g     F .text	00000084 alt_load
000064bc g     F .text	00000014 free
00009540 g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1092f604 	addi	r2,r2,19416
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1092f604 	addi	r2,r2,19416
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_epcs_flash_controller+0xfdff712c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_epcs_flash_controller+0xfdff7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a51c17 	ldw	r2,-27536(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a51c17 	ldw	r2,-27536(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6aaf314 	ori	gp,gp,43980
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	108ffe14 	ori	r2,r2,16376

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d33614 	ori	r3,r3,19672

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_epcs_flash_controller+0xfdff7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00077080 	call	7708 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000778c0 	call	778c <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_epcs_flash_controller+0xfdff7268>

0000026c <mnemonic_generate>:
//	printf("\n");
//    return 0;
//}

const char *mnemonic_generate(int strength)
{
     26c:	defff404 	addi	sp,sp,-48
     270:	dfc00b15 	stw	ra,44(sp)
     274:	df000a15 	stw	fp,40(sp)
     278:	df000a04 	addi	fp,sp,40
     27c:	e13fff15 	stw	r4,-4(fp)
	if (strength % 32 || strength < 128 || strength > 256) {
     280:	e0bfff17 	ldw	r2,-4(fp)
     284:	108007cc 	andi	r2,r2,31
     288:	1000061e 	bne	r2,zero,2a4 <mnemonic_generate+0x38>
     28c:	e0bfff17 	ldw	r2,-4(fp)
     290:	10802010 	cmplti	r2,r2,128
     294:	1000031e 	bne	r2,zero,2a4 <mnemonic_generate+0x38>
     298:	e0bfff17 	ldw	r2,-4(fp)
     29c:	10804050 	cmplti	r2,r2,257
     2a0:	1000021e 	bne	r2,zero,2ac <mnemonic_generate+0x40>
		return 0;
     2a4:	0005883a 	mov	r2,zero
     2a8:	00001306 	br	2f8 <mnemonic_generate+0x8c>
	}
	uint8_t data[32];
	random_buffer(data, 32);
     2ac:	e0bff704 	addi	r2,fp,-36
     2b0:	01400804 	movi	r5,32
     2b4:	1009883a 	mov	r4,r2
     2b8:	00021a40 	call	21a4 <random_buffer>
	// for(int i = 0; i < 32; i++){
	// 	printf("%x\n", data[i]);
	// }
	const char *r = mnemonic_from_data(data, strength / 8);
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	1000010e 	bge	r2,zero,2c8 <mnemonic_generate+0x5c>
     2c4:	108001c4 	addi	r2,r2,7
     2c8:	1005d0fa 	srai	r2,r2,3
     2cc:	1007883a 	mov	r3,r2
     2d0:	e0bff704 	addi	r2,fp,-36
     2d4:	180b883a 	mov	r5,r3
     2d8:	1009883a 	mov	r4,r2
     2dc:	000030c0 	call	30c <mnemonic_from_data>
     2e0:	e0bff615 	stw	r2,-40(fp)
	memzero(data, sizeof(data));
     2e4:	e0bff704 	addi	r2,fp,-36
     2e8:	01400804 	movi	r5,32
     2ec:	1009883a 	mov	r4,r2
     2f0:	000134c0 	call	134c <memzero>
	return r;
     2f4:	e0bff617 	ldw	r2,-40(fp)
}
     2f8:	e037883a 	mov	sp,fp
     2fc:	dfc00117 	ldw	ra,4(sp)
     300:	df000017 	ldw	fp,0(sp)
     304:	dec00204 	addi	sp,sp,8
     308:	f800283a 	ret

0000030c <mnemonic_from_data>:

const char *mnemonic_from_data(const uint8_t *data, int len)
{
     30c:	deffed04 	addi	sp,sp,-76
     310:	dfc01215 	stw	ra,72(sp)
     314:	df001115 	stw	fp,68(sp)
     318:	dc001015 	stw	r16,64(sp)
     31c:	df001104 	addi	fp,sp,68
     320:	e13ffd15 	stw	r4,-12(fp)
     324:	e17ffe15 	stw	r5,-8(fp)
	if (len % 4 || len < 16 || len > 32) {
     328:	e0bffe17 	ldw	r2,-8(fp)
     32c:	108000cc 	andi	r2,r2,3
     330:	1000061e 	bne	r2,zero,34c <mnemonic_from_data+0x40>
     334:	e0bffe17 	ldw	r2,-8(fp)
     338:	10800410 	cmplti	r2,r2,16
     33c:	1000031e 	bne	r2,zero,34c <mnemonic_from_data+0x40>
     340:	e0bffe17 	ldw	r2,-8(fp)
     344:	10800850 	cmplti	r2,r2,33
     348:	1000021e 	bne	r2,zero,354 <mnemonic_from_data+0x48>
		return 0;
     34c:	0005883a 	mov	r2,zero
     350:	00008006 	br	554 <mnemonic_from_data+0x248>
	}

	uint8_t bits[32 + 1];

	sha256_Raw(data, len, bits);
     354:	e0bffe17 	ldw	r2,-8(fp)
     358:	e0fff404 	addi	r3,fp,-48
     35c:	180d883a 	mov	r6,r3
     360:	100b883a 	mov	r5,r2
     364:	e13ffd17 	ldw	r4,-12(fp)
     368:	00041a40 	call	41a4 <sha256_Raw>
	// checksum
	bits[len] = bits[0];
     36c:	e0fff403 	ldbu	r3,-48(fp)
     370:	e13ff404 	addi	r4,fp,-48
     374:	e0bffe17 	ldw	r2,-8(fp)
     378:	2085883a 	add	r2,r4,r2
     37c:	10c00005 	stb	r3,0(r2)
	// data
	memcpy(bits, data, len);
     380:	e0fffe17 	ldw	r3,-8(fp)
     384:	e0bff404 	addi	r2,fp,-48
     388:	180d883a 	mov	r6,r3
     38c:	e17ffd17 	ldw	r5,-12(fp)
     390:	1009883a 	mov	r4,r2
     394:	00064d00 	call	64d0 <memcpy>

	int mlen = len * 3 / 4;
     398:	e0fffe17 	ldw	r3,-8(fp)
     39c:	1805883a 	mov	r2,r3
     3a0:	1085883a 	add	r2,r2,r2
     3a4:	10c5883a 	add	r2,r2,r3
     3a8:	1000010e 	bge	r2,zero,3b0 <mnemonic_from_data+0xa4>
     3ac:	108000c4 	addi	r2,r2,3
     3b0:	1005d0ba 	srai	r2,r2,2
     3b4:	e0bff315 	stw	r2,-52(fp)
	static CONFIDENTIAL char mnemo[24 * 10];

	int i, j, idx;
	char *p = mnemo;
     3b8:	00800074 	movhi	r2,1
     3bc:	10919104 	addi	r2,r2,17988
     3c0:	e0bff215 	stw	r2,-56(fp)
	for (i = 0; i < mlen; i++) {
     3c4:	e03fef15 	stw	zero,-68(fp)
     3c8:	00005906 	br	530 <mnemonic_from_data+0x224>
		idx = 0;
     3cc:	e03ff115 	stw	zero,-60(fp)
		for (j = 0; j < 11; j++) {
     3d0:	e03ff015 	stw	zero,-64(fp)
     3d4:	00002d06 	br	48c <mnemonic_from_data+0x180>
			idx <<= 1;
     3d8:	e0bff117 	ldw	r2,-60(fp)
     3dc:	1085883a 	add	r2,r2,r2
     3e0:	e0bff115 	stw	r2,-60(fp)
			idx += (bits[(i * 11 + j) / 8] & (1 << (7 - ((i * 11 + j) % 8)))) > 0;
     3e4:	014002c4 	movi	r5,11
     3e8:	e13fef17 	ldw	r4,-68(fp)
     3ec:	00064800 	call	6480 <__mulsi3>
     3f0:	1007883a 	mov	r3,r2
     3f4:	e0bff017 	ldw	r2,-64(fp)
     3f8:	1885883a 	add	r2,r3,r2
     3fc:	1000010e 	bge	r2,zero,404 <mnemonic_from_data+0xf8>
     400:	108001c4 	addi	r2,r2,7
     404:	1005d0fa 	srai	r2,r2,3
     408:	1007883a 	mov	r3,r2
     40c:	e0bff404 	addi	r2,fp,-48
     410:	10c5883a 	add	r2,r2,r3
     414:	10800003 	ldbu	r2,0(r2)
     418:	14003fcc 	andi	r16,r2,255
     41c:	014002c4 	movi	r5,11
     420:	e13fef17 	ldw	r4,-68(fp)
     424:	00064800 	call	6480 <__mulsi3>
     428:	1007883a 	mov	r3,r2
     42c:	e0bff017 	ldw	r2,-64(fp)
     430:	1887883a 	add	r3,r3,r2
     434:	00a00034 	movhi	r2,32768
     438:	108001c4 	addi	r2,r2,7
     43c:	1884703a 	and	r2,r3,r2
     440:	1000040e 	bge	r2,zero,454 <mnemonic_from_data+0x148>
     444:	10bfffc4 	addi	r2,r2,-1
     448:	00fffe04 	movi	r3,-8
     44c:	10c4b03a 	or	r2,r2,r3
     450:	10800044 	addi	r2,r2,1
     454:	1007883a 	mov	r3,r2
     458:	008001c4 	movi	r2,7
     45c:	10c5c83a 	sub	r2,r2,r3
     460:	00c00044 	movi	r3,1
     464:	1884983a 	sll	r2,r3,r2
     468:	8084703a 	and	r2,r16,r2
     46c:	0084803a 	cmplt	r2,zero,r2
     470:	10803fcc 	andi	r2,r2,255
     474:	e0fff117 	ldw	r3,-60(fp)
     478:	1885883a 	add	r2,r3,r2
     47c:	e0bff115 	stw	r2,-60(fp)

	int i, j, idx;
	char *p = mnemo;
	for (i = 0; i < mlen; i++) {
		idx = 0;
		for (j = 0; j < 11; j++) {
     480:	e0bff017 	ldw	r2,-64(fp)
     484:	10800044 	addi	r2,r2,1
     488:	e0bff015 	stw	r2,-64(fp)
     48c:	e0bff017 	ldw	r2,-64(fp)
     490:	108002d0 	cmplti	r2,r2,11
     494:	103fd01e 	bne	r2,zero,3d8 <__alt_mem_epcs_flash_controller+0xfdff73d8>
			idx <<= 1;
			idx += (bits[(i * 11 + j) / 8] & (1 << (7 - ((i * 11 + j) % 8)))) > 0;
		}
		strcpy(p, wordlist[idx]);
     498:	00800074 	movhi	r2,1
     49c:	10bc8b04 	addi	r2,r2,-3540
     4a0:	e0fff117 	ldw	r3,-60(fp)
     4a4:	18c7883a 	add	r3,r3,r3
     4a8:	18c7883a 	add	r3,r3,r3
     4ac:	10c5883a 	add	r2,r2,r3
     4b0:	10800017 	ldw	r2,0(r2)
     4b4:	100b883a 	mov	r5,r2
     4b8:	e13ff217 	ldw	r4,-56(fp)
     4bc:	00069900 	call	6990 <strcpy>
		p += strlen(wordlist[idx]);
     4c0:	00800074 	movhi	r2,1
     4c4:	10bc8b04 	addi	r2,r2,-3540
     4c8:	e0fff117 	ldw	r3,-60(fp)
     4cc:	18c7883a 	add	r3,r3,r3
     4d0:	18c7883a 	add	r3,r3,r3
     4d4:	10c5883a 	add	r2,r2,r3
     4d8:	10800017 	ldw	r2,0(r2)
     4dc:	1009883a 	mov	r4,r2
     4e0:	00069bc0 	call	69bc <strlen>
     4e4:	1007883a 	mov	r3,r2
     4e8:	e0bff217 	ldw	r2,-56(fp)
     4ec:	10c5883a 	add	r2,r2,r3
     4f0:	e0bff215 	stw	r2,-56(fp)
		*p = (i < mlen - 1) ? ' ' : 0;
     4f4:	e0bff317 	ldw	r2,-52(fp)
     4f8:	10bfffc4 	addi	r2,r2,-1
     4fc:	e0ffef17 	ldw	r3,-68(fp)
     500:	1880020e 	bge	r3,r2,50c <mnemonic_from_data+0x200>
     504:	00800804 	movi	r2,32
     508:	00000106 	br	510 <mnemonic_from_data+0x204>
     50c:	0005883a 	mov	r2,zero
     510:	e0fff217 	ldw	r3,-56(fp)
     514:	18800005 	stb	r2,0(r3)
		p++;
     518:	e0bff217 	ldw	r2,-56(fp)
     51c:	10800044 	addi	r2,r2,1
     520:	e0bff215 	stw	r2,-56(fp)
	int mlen = len * 3 / 4;
	static CONFIDENTIAL char mnemo[24 * 10];

	int i, j, idx;
	char *p = mnemo;
	for (i = 0; i < mlen; i++) {
     524:	e0bfef17 	ldw	r2,-68(fp)
     528:	10800044 	addi	r2,r2,1
     52c:	e0bfef15 	stw	r2,-68(fp)
     530:	e0ffef17 	ldw	r3,-68(fp)
     534:	e0bff317 	ldw	r2,-52(fp)
     538:	18bfa416 	blt	r3,r2,3cc <__alt_mem_epcs_flash_controller+0xfdff73cc>
		strcpy(p, wordlist[idx]);
		p += strlen(wordlist[idx]);
		*p = (i < mlen - 1) ? ' ' : 0;
		p++;
	}
	memzero(bits, sizeof(bits));
     53c:	e0bff404 	addi	r2,fp,-48
     540:	01400844 	movi	r5,33
     544:	1009883a 	mov	r4,r2
     548:	000134c0 	call	134c <memzero>

	return mnemo;
     54c:	00800074 	movhi	r2,1
     550:	10919104 	addi	r2,r2,17988
}
     554:	e6ffff04 	addi	sp,fp,-4
     558:	dfc00217 	ldw	ra,8(sp)
     55c:	df000117 	ldw	fp,4(sp)
     560:	dc000017 	ldw	r16,0(sp)
     564:	dec00304 	addi	sp,sp,12
     568:	f800283a 	ret

0000056c <mnemonic_to_seed>:

// passphrase must be at most 256 characters or code may crash
void mnemonic_to_seed(const char *mnemonic, const char *passphrase, uint8_t seed[512 / 8], void (*progress_callback)(uint32_t current, uint32_t total))
{
     56c:	deffb104 	addi	sp,sp,-316
     570:	dfc04e15 	stw	ra,312(sp)
     574:	df004d15 	stw	fp,308(sp)
     578:	dc004c15 	stw	r16,304(sp)
     57c:	df004d04 	addi	fp,sp,308
     580:	e13ffb15 	stw	r4,-20(fp)
     584:	e17ffc15 	stw	r5,-16(fp)
     588:	e1bffd15 	stw	r6,-12(fp)
     58c:	e1fffe15 	stw	r7,-8(fp)
	int passphraselen = strlen(passphrase);
     590:	e13ffc17 	ldw	r4,-16(fp)
     594:	00069bc0 	call	69bc <strlen>
     598:	e0bfb715 	stw	r2,-292(fp)
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
     59c:	e13ffb17 	ldw	r4,-20(fp)
     5a0:	00069bc0 	call	69bc <strlen>
     5a4:	e0bfb815 	stw	r2,-288(fp)
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
     5a8:	e0bfb817 	ldw	r2,-288(fp)
     5ac:	10804008 	cmpgei	r2,r2,256
     5b0:	1000401e 	bne	r2,zero,6b4 <mnemonic_to_seed+0x148>
     5b4:	e0bfb717 	ldw	r2,-292(fp)
     5b8:	10801008 	cmpgei	r2,r2,64
     5bc:	10003d1e 	bne	r2,zero,6b4 <mnemonic_to_seed+0x148>
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
     5c0:	e03fb515 	stw	zero,-300(fp)
     5c4:	00003806 	br	6a8 <mnemonic_to_seed+0x13c>
			if (!bip39_cache[i].set) continue;
     5c8:	04000074 	movhi	r16,1
     5cc:	84101004 	addi	r16,r16,16448
     5d0:	e0bfb517 	ldw	r2,-300(fp)
     5d4:	01406044 	movi	r5,385
     5d8:	1009883a 	mov	r4,r2
     5dc:	00064800 	call	6480 <__mulsi3>
     5e0:	8085883a 	add	r2,r16,r2
     5e4:	10800003 	ldbu	r2,0(r2)
     5e8:	1080005c 	xori	r2,r2,1
     5ec:	10803fcc 	andi	r2,r2,255
     5f0:	1000251e 	bne	r2,zero,688 <mnemonic_to_seed+0x11c>
			if (strcmp(bip39_cache[i].mnemonic, mnemonic) != 0) continue;
     5f4:	01406044 	movi	r5,385
     5f8:	e13fb517 	ldw	r4,-300(fp)
     5fc:	00064800 	call	6480 <__mulsi3>
     600:	1007883a 	mov	r3,r2
     604:	00800074 	movhi	r2,1
     608:	10901004 	addi	r2,r2,16448
     60c:	1885883a 	add	r2,r3,r2
     610:	10800044 	addi	r2,r2,1
     614:	e17ffb17 	ldw	r5,-20(fp)
     618:	1009883a 	mov	r4,r2
     61c:	00069580 	call	6958 <strcmp>
     620:	10001b1e 	bne	r2,zero,690 <mnemonic_to_seed+0x124>
			if (strcmp(bip39_cache[i].passphrase, passphrase) != 0) continue;
     624:	01406044 	movi	r5,385
     628:	e13fb517 	ldw	r4,-300(fp)
     62c:	00064800 	call	6480 <__mulsi3>
     630:	10c04004 	addi	r3,r2,256
     634:	00800074 	movhi	r2,1
     638:	10901004 	addi	r2,r2,16448
     63c:	1885883a 	add	r2,r3,r2
     640:	10800044 	addi	r2,r2,1
     644:	e17ffc17 	ldw	r5,-16(fp)
     648:	1009883a 	mov	r4,r2
     64c:	00069580 	call	6958 <strcmp>
     650:	1000111e 	bne	r2,zero,698 <mnemonic_to_seed+0x12c>
			// found the correct entry
			memcpy(seed, bip39_cache[i].seed, 512 / 8);
     654:	01406044 	movi	r5,385
     658:	e13fb517 	ldw	r4,-300(fp)
     65c:	00064800 	call	6480 <__mulsi3>
     660:	10c05004 	addi	r3,r2,320
     664:	00800074 	movhi	r2,1
     668:	10901004 	addi	r2,r2,16448
     66c:	1885883a 	add	r2,r3,r2
     670:	10800044 	addi	r2,r2,1
     674:	01801004 	movi	r6,64
     678:	100b883a 	mov	r5,r2
     67c:	e13ffd17 	ldw	r4,-12(fp)
     680:	00064d00 	call	64d0 <memcpy>
			return;
     684:	00008d06 	br	8bc <mnemonic_to_seed+0x350>
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
			if (!bip39_cache[i].set) continue;
     688:	0001883a 	nop
     68c:	00000306 	br	69c <mnemonic_to_seed+0x130>
			if (strcmp(bip39_cache[i].mnemonic, mnemonic) != 0) continue;
     690:	0001883a 	nop
     694:	00000106 	br	69c <mnemonic_to_seed+0x130>
			if (strcmp(bip39_cache[i].passphrase, passphrase) != 0) continue;
     698:	0001883a 	nop
	int passphraselen = strlen(passphrase);
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
     69c:	e0bfb517 	ldw	r2,-300(fp)
     6a0:	10800044 	addi	r2,r2,1
     6a4:	e0bfb515 	stw	r2,-300(fp)
     6a8:	e0bfb517 	ldw	r2,-300(fp)
     6ac:	10800110 	cmplti	r2,r2,4
     6b0:	103fc51e 	bne	r2,zero,5c8 <__alt_mem_epcs_flash_controller+0xfdff75c8>
			return;
		}
	}
#endif
	uint8_t salt[8 + 256];
	memcpy(salt, "mnemonic", 8);
     6b4:	e0bfb904 	addi	r2,fp,-284
     6b8:	01800204 	movi	r6,8
     6bc:	01400074 	movhi	r5,1
     6c0:	29448c04 	addi	r5,r5,4656
     6c4:	1009883a 	mov	r4,r2
     6c8:	00064d00 	call	64d0 <memcpy>
	memcpy(salt + 8, passphrase, passphraselen);
     6cc:	e0bfb904 	addi	r2,fp,-284
     6d0:	10800204 	addi	r2,r2,8
     6d4:	e0ffb717 	ldw	r3,-292(fp)
     6d8:	180d883a 	mov	r6,r3
     6dc:	e17ffc17 	ldw	r5,-16(fp)
     6e0:	1009883a 	mov	r4,r2
     6e4:	00064d00 	call	64d0 <memcpy>
	static CONFIDENTIAL PBKDF2_HMAC_SHA512_CTX pctx;
	pbkdf2_hmac_sha512_Init(&pctx, (const uint8_t *)mnemonic, strlen(mnemonic), salt, passphraselen + 8, 1);
     6e8:	e13ffb17 	ldw	r4,-20(fp)
     6ec:	00069bc0 	call	69bc <strlen>
     6f0:	100b883a 	mov	r5,r2
     6f4:	e0bfb717 	ldw	r2,-292(fp)
     6f8:	10800204 	addi	r2,r2,8
     6fc:	e13fb904 	addi	r4,fp,-284
     700:	00c00044 	movi	r3,1
     704:	d8c00115 	stw	r3,4(sp)
     708:	d8800015 	stw	r2,0(sp)
     70c:	200f883a 	mov	r7,r4
     710:	280d883a 	mov	r6,r5
     714:	e17ffb17 	ldw	r5,-20(fp)
     718:	01000074 	movhi	r4,1
     71c:	2111cd04 	addi	r4,r4,18228
     720:	00019380 	call	1938 <pbkdf2_hmac_sha512_Init>
	if (progress_callback) {
     724:	e0bffe17 	ldw	r2,-8(fp)
     728:	10000426 	beq	r2,zero,73c <mnemonic_to_seed+0x1d0>
		progress_callback(0, BIP39_PBKDF2_ROUNDS);
     72c:	e0bffe17 	ldw	r2,-8(fp)
     730:	01420004 	movi	r5,2048
     734:	0009883a 	mov	r4,zero
     738:	103ee83a 	callr	r2
	}
	for (int i = 0; i < 16; i++) {
     73c:	e03fb615 	stw	zero,-296(fp)
     740:	00001406 	br	794 <mnemonic_to_seed+0x228>
		pbkdf2_hmac_sha512_Update(&pctx, BIP39_PBKDF2_ROUNDS / 16);
     744:	01402004 	movi	r5,128
     748:	01000074 	movhi	r4,1
     74c:	2111cd04 	addi	r4,r4,18228
     750:	0001cb00 	call	1cb0 <pbkdf2_hmac_sha512_Update>
		if (progress_callback) {
     754:	e0bffe17 	ldw	r2,-8(fp)
     758:	10000b26 	beq	r2,zero,788 <mnemonic_to_seed+0x21c>
			progress_callback((i + 1) * BIP39_PBKDF2_ROUNDS / 16, BIP39_PBKDF2_ROUNDS);
     75c:	e0bfb617 	ldw	r2,-296(fp)
     760:	10800044 	addi	r2,r2,1
     764:	100492fa 	slli	r2,r2,11
     768:	1000010e 	bge	r2,zero,770 <mnemonic_to_seed+0x204>
     76c:	108003c4 	addi	r2,r2,15
     770:	1005d13a 	srai	r2,r2,4
     774:	1007883a 	mov	r3,r2
     778:	e0bffe17 	ldw	r2,-8(fp)
     77c:	01420004 	movi	r5,2048
     780:	1809883a 	mov	r4,r3
     784:	103ee83a 	callr	r2
	static CONFIDENTIAL PBKDF2_HMAC_SHA512_CTX pctx;
	pbkdf2_hmac_sha512_Init(&pctx, (const uint8_t *)mnemonic, strlen(mnemonic), salt, passphraselen + 8, 1);
	if (progress_callback) {
		progress_callback(0, BIP39_PBKDF2_ROUNDS);
	}
	for (int i = 0; i < 16; i++) {
     788:	e0bfb617 	ldw	r2,-296(fp)
     78c:	10800044 	addi	r2,r2,1
     790:	e0bfb615 	stw	r2,-296(fp)
     794:	e0bfb617 	ldw	r2,-296(fp)
     798:	10800410 	cmplti	r2,r2,16
     79c:	103fe91e 	bne	r2,zero,744 <__alt_mem_epcs_flash_controller+0xfdff7744>
		pbkdf2_hmac_sha512_Update(&pctx, BIP39_PBKDF2_ROUNDS / 16);
		if (progress_callback) {
			progress_callback((i + 1) * BIP39_PBKDF2_ROUNDS / 16, BIP39_PBKDF2_ROUNDS);
		}
	}
	pbkdf2_hmac_sha512_Final(&pctx, seed);
     7a0:	e17ffd17 	ldw	r5,-12(fp)
     7a4:	01000074 	movhi	r4,1
     7a8:	2111cd04 	addi	r4,r4,18228
     7ac:	0001df40 	call	1df4 <pbkdf2_hmac_sha512_Final>
	memzero(salt, sizeof(salt));
     7b0:	e0bfb904 	addi	r2,fp,-284
     7b4:	01404204 	movi	r5,264
     7b8:	1009883a 	mov	r4,r2
     7bc:	000134c0 	call	134c <memzero>
#if USE_BIP39_CACHE
	// store to cache
	if (mnemoniclen < 256 && passphraselen < 64) {
     7c0:	e0bfb817 	ldw	r2,-288(fp)
     7c4:	10804008 	cmpgei	r2,r2,256
     7c8:	10003c1e 	bne	r2,zero,8bc <mnemonic_to_seed+0x350>
     7cc:	e0bfb717 	ldw	r2,-292(fp)
     7d0:	10801008 	cmpgei	r2,r2,64
     7d4:	1000391e 	bne	r2,zero,8bc <mnemonic_to_seed+0x350>
		bip39_cache[bip39_cache_index].set = true;
     7d8:	d0a50b17 	ldw	r2,-27604(gp)
     7dc:	04000074 	movhi	r16,1
     7e0:	84101004 	addi	r16,r16,16448
     7e4:	01406044 	movi	r5,385
     7e8:	1009883a 	mov	r4,r2
     7ec:	00064800 	call	6480 <__mulsi3>
     7f0:	8085883a 	add	r2,r16,r2
     7f4:	00c00044 	movi	r3,1
     7f8:	10c00005 	stb	r3,0(r2)
		strcpy(bip39_cache[bip39_cache_index].mnemonic, mnemonic);
     7fc:	d0a50b17 	ldw	r2,-27604(gp)
     800:	01406044 	movi	r5,385
     804:	1009883a 	mov	r4,r2
     808:	00064800 	call	6480 <__mulsi3>
     80c:	1007883a 	mov	r3,r2
     810:	00800074 	movhi	r2,1
     814:	10901004 	addi	r2,r2,16448
     818:	1885883a 	add	r2,r3,r2
     81c:	10800044 	addi	r2,r2,1
     820:	e17ffb17 	ldw	r5,-20(fp)
     824:	1009883a 	mov	r4,r2
     828:	00069900 	call	6990 <strcpy>
		strcpy(bip39_cache[bip39_cache_index].passphrase, passphrase);
     82c:	d0a50b17 	ldw	r2,-27604(gp)
     830:	01406044 	movi	r5,385
     834:	1009883a 	mov	r4,r2
     838:	00064800 	call	6480 <__mulsi3>
     83c:	10c04004 	addi	r3,r2,256
     840:	00800074 	movhi	r2,1
     844:	10901004 	addi	r2,r2,16448
     848:	1885883a 	add	r2,r3,r2
     84c:	10800044 	addi	r2,r2,1
     850:	e17ffc17 	ldw	r5,-16(fp)
     854:	1009883a 	mov	r4,r2
     858:	00069900 	call	6990 <strcpy>
		memcpy(bip39_cache[bip39_cache_index].seed, seed, 512 / 8);
     85c:	d0a50b17 	ldw	r2,-27604(gp)
     860:	01406044 	movi	r5,385
     864:	1009883a 	mov	r4,r2
     868:	00064800 	call	6480 <__mulsi3>
     86c:	10c05004 	addi	r3,r2,320
     870:	00800074 	movhi	r2,1
     874:	10901004 	addi	r2,r2,16448
     878:	1885883a 	add	r2,r3,r2
     87c:	10800044 	addi	r2,r2,1
     880:	01801004 	movi	r6,64
     884:	e17ffd17 	ldw	r5,-12(fp)
     888:	1009883a 	mov	r4,r2
     88c:	00064d00 	call	64d0 <memcpy>
		bip39_cache_index = (bip39_cache_index + 1) % BIP39_CACHE_SIZE;
     890:	d0a50b17 	ldw	r2,-27604(gp)
     894:	10c00044 	addi	r3,r2,1
     898:	00a00034 	movhi	r2,32768
     89c:	108000c4 	addi	r2,r2,3
     8a0:	1884703a 	and	r2,r3,r2
     8a4:	1000040e 	bge	r2,zero,8b8 <mnemonic_to_seed+0x34c>
     8a8:	10bfffc4 	addi	r2,r2,-1
     8ac:	00ffff04 	movi	r3,-4
     8b0:	10c4b03a 	or	r2,r2,r3
     8b4:	10800044 	addi	r2,r2,1
     8b8:	d0a50b15 	stw	r2,-27604(gp)
	}
#endif
}
     8bc:	e6ffff04 	addi	sp,fp,-4
     8c0:	dfc00217 	ldw	ra,8(sp)
     8c4:	df000117 	ldw	fp,4(sp)
     8c8:	dc000017 	ldw	r16,0(sp)
     8cc:	dec00304 	addi	sp,sp,12
     8d0:	f800283a 	ret

000008d4 <hmac_sha256_Init>:
#include "..\Include\hmac.h"
#include "..\Include\options.h"
#include "..\Include\memzero.h"

void hmac_sha256_Init(HMAC_SHA256_CTX *hctx, const uint8_t *key, const uint32_t keylen)
{
     8d4:	defffa04 	addi	sp,sp,-24
     8d8:	dfc00515 	stw	ra,20(sp)
     8dc:	df000415 	stw	fp,16(sp)
     8e0:	df000404 	addi	fp,sp,16
     8e4:	e13ffd15 	stw	r4,-12(fp)
     8e8:	e17ffe15 	stw	r5,-8(fp)
     8ec:	e1bfff15 	stw	r6,-4(fp)
	static CONFIDENTIAL uint8_t i_key_pad[SHA256_BLOCK_LENGTH];
	memset(i_key_pad, 0, SHA256_BLOCK_LENGTH);
     8f0:	01801004 	movi	r6,64
     8f4:	000b883a 	mov	r5,zero
     8f8:	01000074 	movhi	r4,1
     8fc:	21121e04 	addi	r4,r4,18552
     900:	00064f80 	call	64f8 <memset>
	if (keylen > SHA256_BLOCK_LENGTH) {
     904:	e0bfff17 	ldw	r2,-4(fp)
     908:	10801070 	cmpltui	r2,r2,65
     90c:	1000061e 	bne	r2,zero,928 <hmac_sha256_Init+0x54>
		sha256_Raw(key, keylen, i_key_pad);
     910:	01800074 	movhi	r6,1
     914:	31921e04 	addi	r6,r6,18552
     918:	e17fff17 	ldw	r5,-4(fp)
     91c:	e13ffe17 	ldw	r4,-8(fp)
     920:	00041a40 	call	41a4 <sha256_Raw>
     924:	00000506 	br	93c <hmac_sha256_Init+0x68>
	} else {
		memcpy(i_key_pad, key, keylen);
     928:	e1bfff17 	ldw	r6,-4(fp)
     92c:	e17ffe17 	ldw	r5,-8(fp)
     930:	01000074 	movhi	r4,1
     934:	21121e04 	addi	r4,r4,18552
     938:	00064d00 	call	64d0 <memcpy>
	}
	for (int i = 0; i < SHA256_BLOCK_LENGTH; i++) {
     93c:	e03ffc15 	stw	zero,-16(fp)
     940:	00001a06 	br	9ac <hmac_sha256_Init+0xd8>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
     944:	00800074 	movhi	r2,1
     948:	10921e04 	addi	r2,r2,18552
     94c:	e0fffc17 	ldw	r3,-16(fp)
     950:	10c5883a 	add	r2,r2,r3
     954:	10800003 	ldbu	r2,0(r2)
     958:	1080171c 	xori	r2,r2,92
     95c:	1009883a 	mov	r4,r2
     960:	e0fffd17 	ldw	r3,-12(fp)
     964:	e0bffc17 	ldw	r2,-16(fp)
     968:	1885883a 	add	r2,r3,r2
     96c:	11000005 	stb	r4,0(r2)
		i_key_pad[i] ^= 0x36;
     970:	00800074 	movhi	r2,1
     974:	10921e04 	addi	r2,r2,18552
     978:	e0fffc17 	ldw	r3,-16(fp)
     97c:	10c5883a 	add	r2,r2,r3
     980:	10800003 	ldbu	r2,0(r2)
     984:	10800d9c 	xori	r2,r2,54
     988:	1009883a 	mov	r4,r2
     98c:	00800074 	movhi	r2,1
     990:	10921e04 	addi	r2,r2,18552
     994:	e0fffc17 	ldw	r3,-16(fp)
     998:	10c5883a 	add	r2,r2,r3
     99c:	11000005 	stb	r4,0(r2)
	if (keylen > SHA256_BLOCK_LENGTH) {
		sha256_Raw(key, keylen, i_key_pad);
	} else {
		memcpy(i_key_pad, key, keylen);
	}
	for (int i = 0; i < SHA256_BLOCK_LENGTH; i++) {
     9a0:	e0bffc17 	ldw	r2,-16(fp)
     9a4:	10800044 	addi	r2,r2,1
     9a8:	e0bffc15 	stw	r2,-16(fp)
     9ac:	e0bffc17 	ldw	r2,-16(fp)
     9b0:	10801010 	cmplti	r2,r2,64
     9b4:	103fe31e 	bne	r2,zero,944 <__alt_mem_epcs_flash_controller+0xfdff7944>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
		i_key_pad[i] ^= 0x36;
	}
	sha256_Init(&(hctx->ctx));
     9b8:	e0bffd17 	ldw	r2,-12(fp)
     9bc:	10801004 	addi	r2,r2,64
     9c0:	1009883a 	mov	r4,r2
     9c4:	000332c0 	call	332c <sha256_Init>
	sha256_Update(&(hctx->ctx), i_key_pad, SHA256_BLOCK_LENGTH);
     9c8:	e0bffd17 	ldw	r2,-12(fp)
     9cc:	10801004 	addi	r2,r2,64
     9d0:	01801004 	movi	r6,64
     9d4:	01400074 	movhi	r5,1
     9d8:	29521e04 	addi	r5,r5,18552
     9dc:	1009883a 	mov	r4,r2
     9e0:	00039640 	call	3964 <sha256_Update>
	memzero(i_key_pad, sizeof(i_key_pad));
     9e4:	01401004 	movi	r5,64
     9e8:	01000074 	movhi	r4,1
     9ec:	21121e04 	addi	r4,r4,18552
     9f0:	000134c0 	call	134c <memzero>
}
     9f4:	0001883a 	nop
     9f8:	e037883a 	mov	sp,fp
     9fc:	dfc00117 	ldw	ra,4(sp)
     a00:	df000017 	ldw	fp,0(sp)
     a04:	dec00204 	addi	sp,sp,8
     a08:	f800283a 	ret

00000a0c <hmac_sha256_Update>:

void hmac_sha256_Update(HMAC_SHA256_CTX *hctx, const uint8_t *msg, const uint32_t msglen)
{
     a0c:	defffb04 	addi	sp,sp,-20
     a10:	dfc00415 	stw	ra,16(sp)
     a14:	df000315 	stw	fp,12(sp)
     a18:	df000304 	addi	fp,sp,12
     a1c:	e13ffd15 	stw	r4,-12(fp)
     a20:	e17ffe15 	stw	r5,-8(fp)
     a24:	e1bfff15 	stw	r6,-4(fp)
	sha256_Update(&(hctx->ctx), msg, msglen);
     a28:	e0bffd17 	ldw	r2,-12(fp)
     a2c:	10801004 	addi	r2,r2,64
     a30:	e1bfff17 	ldw	r6,-4(fp)
     a34:	e17ffe17 	ldw	r5,-8(fp)
     a38:	1009883a 	mov	r4,r2
     a3c:	00039640 	call	3964 <sha256_Update>
}
     a40:	0001883a 	nop
     a44:	e037883a 	mov	sp,fp
     a48:	dfc00117 	ldw	ra,4(sp)
     a4c:	df000017 	ldw	fp,0(sp)
     a50:	dec00204 	addi	sp,sp,8
     a54:	f800283a 	ret

00000a58 <hmac_sha256_Final>:

void hmac_sha256_Final(HMAC_SHA256_CTX *hctx, uint8_t *hmac)
{
     a58:	defffc04 	addi	sp,sp,-16
     a5c:	dfc00315 	stw	ra,12(sp)
     a60:	df000215 	stw	fp,8(sp)
     a64:	df000204 	addi	fp,sp,8
     a68:	e13ffe15 	stw	r4,-8(fp)
     a6c:	e17fff15 	stw	r5,-4(fp)
	sha256_Final(&(hctx->ctx), hmac);
     a70:	e0bffe17 	ldw	r2,-8(fp)
     a74:	10801004 	addi	r2,r2,64
     a78:	e17fff17 	ldw	r5,-4(fp)
     a7c:	1009883a 	mov	r4,r2
     a80:	0003d6c0 	call	3d6c <sha256_Final>
	sha256_Init(&(hctx->ctx));
     a84:	e0bffe17 	ldw	r2,-8(fp)
     a88:	10801004 	addi	r2,r2,64
     a8c:	1009883a 	mov	r4,r2
     a90:	000332c0 	call	332c <sha256_Init>
	sha256_Update(&(hctx->ctx), hctx->o_key_pad, SHA256_BLOCK_LENGTH);
     a94:	e0bffe17 	ldw	r2,-8(fp)
     a98:	10801004 	addi	r2,r2,64
     a9c:	e0fffe17 	ldw	r3,-8(fp)
     aa0:	01801004 	movi	r6,64
     aa4:	180b883a 	mov	r5,r3
     aa8:	1009883a 	mov	r4,r2
     aac:	00039640 	call	3964 <sha256_Update>
	sha256_Update(&(hctx->ctx), hmac, SHA256_DIGEST_LENGTH);
     ab0:	e0bffe17 	ldw	r2,-8(fp)
     ab4:	10801004 	addi	r2,r2,64
     ab8:	01800804 	movi	r6,32
     abc:	e17fff17 	ldw	r5,-4(fp)
     ac0:	1009883a 	mov	r4,r2
     ac4:	00039640 	call	3964 <sha256_Update>
	sha256_Final(&(hctx->ctx), hmac);
     ac8:	e0bffe17 	ldw	r2,-8(fp)
     acc:	10801004 	addi	r2,r2,64
     ad0:	e17fff17 	ldw	r5,-4(fp)
     ad4:	1009883a 	mov	r4,r2
     ad8:	0003d6c0 	call	3d6c <sha256_Final>
	memzero(hctx, sizeof(HMAC_SHA256_CTX));
     adc:	01402a04 	movi	r5,168
     ae0:	e13ffe17 	ldw	r4,-8(fp)
     ae4:	000134c0 	call	134c <memzero>
}
     ae8:	0001883a 	nop
     aec:	e037883a 	mov	sp,fp
     af0:	dfc00117 	ldw	ra,4(sp)
     af4:	df000017 	ldw	fp,0(sp)
     af8:	dec00204 	addi	sp,sp,8
     afc:	f800283a 	ret

00000b00 <hmac_sha256>:

void hmac_sha256(const uint8_t *key, const uint32_t keylen, const uint8_t *msg, const uint32_t msglen, uint8_t *hmac)
{
     b00:	defffa04 	addi	sp,sp,-24
     b04:	dfc00515 	stw	ra,20(sp)
     b08:	df000415 	stw	fp,16(sp)
     b0c:	df000404 	addi	fp,sp,16
     b10:	e13ffc15 	stw	r4,-16(fp)
     b14:	e17ffd15 	stw	r5,-12(fp)
     b18:	e1bffe15 	stw	r6,-8(fp)
     b1c:	e1ffff15 	stw	r7,-4(fp)
	static CONFIDENTIAL HMAC_SHA256_CTX hctx;
	hmac_sha256_Init(&hctx, key, keylen);
     b20:	e1bffd17 	ldw	r6,-12(fp)
     b24:	e17ffc17 	ldw	r5,-16(fp)
     b28:	01000074 	movhi	r4,1
     b2c:	21122e04 	addi	r4,r4,18616
     b30:	00008d40 	call	8d4 <hmac_sha256_Init>
	hmac_sha256_Update(&hctx, msg, msglen);
     b34:	e1bfff17 	ldw	r6,-4(fp)
     b38:	e17ffe17 	ldw	r5,-8(fp)
     b3c:	01000074 	movhi	r4,1
     b40:	21122e04 	addi	r4,r4,18616
     b44:	0000a0c0 	call	a0c <hmac_sha256_Update>
	hmac_sha256_Final(&hctx, hmac);
     b48:	e1400217 	ldw	r5,8(fp)
     b4c:	01000074 	movhi	r4,1
     b50:	21122e04 	addi	r4,r4,18616
     b54:	0000a580 	call	a58 <hmac_sha256_Final>
}
     b58:	0001883a 	nop
     b5c:	e037883a 	mov	sp,fp
     b60:	dfc00117 	ldw	ra,4(sp)
     b64:	df000017 	ldw	fp,0(sp)
     b68:	dec00204 	addi	sp,sp,8
     b6c:	f800283a 	ret

00000b70 <hmac_sha256_prepare>:

void hmac_sha256_prepare(const uint8_t *key, const uint32_t keylen, uint32_t *opad_digest, uint32_t *ipad_digest)
{
     b70:	defff604 	addi	sp,sp,-40
     b74:	dfc00915 	stw	ra,36(sp)
     b78:	df000815 	stw	fp,32(sp)
     b7c:	df000804 	addi	fp,sp,32
     b80:	e13ffc15 	stw	r4,-16(fp)
     b84:	e17ffd15 	stw	r5,-12(fp)
     b88:	e1bffe15 	stw	r6,-8(fp)
     b8c:	e1ffff15 	stw	r7,-4(fp)
	static CONFIDENTIAL uint32_t key_pad[SHA256_BLOCK_LENGTH/sizeof(uint32_t)];

	memzero(key_pad, sizeof(key_pad));
     b90:	01401004 	movi	r5,64
     b94:	01000074 	movhi	r4,1
     b98:	21125804 	addi	r4,r4,18784
     b9c:	000134c0 	call	134c <memzero>
	if (keylen > SHA256_BLOCK_LENGTH) {
     ba0:	e0bffd17 	ldw	r2,-12(fp)
     ba4:	10801070 	cmpltui	r2,r2,65
     ba8:	10000e1e 	bne	r2,zero,be4 <hmac_sha256_prepare+0x74>
		static CONFIDENTIAL SHA256_CTX context;
		sha256_Init(&context);
     bac:	01000074 	movhi	r4,1
     bb0:	21126804 	addi	r4,r4,18848
     bb4:	000332c0 	call	332c <sha256_Init>
		sha256_Update(&context, key, keylen);
     bb8:	e1bffd17 	ldw	r6,-12(fp)
     bbc:	e17ffc17 	ldw	r5,-16(fp)
     bc0:	01000074 	movhi	r4,1
     bc4:	21126804 	addi	r4,r4,18848
     bc8:	00039640 	call	3964 <sha256_Update>
		sha256_Final(&context, (uint8_t*)key_pad);
     bcc:	01400074 	movhi	r5,1
     bd0:	29525804 	addi	r5,r5,18784
     bd4:	01000074 	movhi	r4,1
     bd8:	21126804 	addi	r4,r4,18848
     bdc:	0003d6c0 	call	3d6c <sha256_Final>
     be0:	00000506 	br	bf8 <hmac_sha256_prepare+0x88>
	} else {
		memcpy(key_pad, key, keylen);
     be4:	e1bffd17 	ldw	r6,-12(fp)
     be8:	e17ffc17 	ldw	r5,-16(fp)
     bec:	01000074 	movhi	r4,1
     bf0:	21125804 	addi	r4,r4,18784
     bf4:	00064d00 	call	64d0 <memcpy>
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
     bf8:	e03ff815 	stw	zero,-32(fp)
     bfc:	00002506 	br	c94 <hmac_sha256_prepare+0x124>
		uint32_t data;
#if BYTE_ORDER == LITTLE_ENDIAN
		REVERSE32(key_pad[i], data);
     c00:	00800074 	movhi	r2,1
     c04:	10925804 	addi	r2,r2,18784
     c08:	e0fff817 	ldw	r3,-32(fp)
     c0c:	18c7883a 	add	r3,r3,r3
     c10:	18c7883a 	add	r3,r3,r3
     c14:	10c5883a 	add	r2,r2,r3
     c18:	10800017 	ldw	r2,0(r2)
     c1c:	e0bffa15 	stw	r2,-24(fp)
     c20:	e0bffa17 	ldw	r2,-24(fp)
     c24:	1004143a 	roli	r2,r2,16
     c28:	e0bffa15 	stw	r2,-24(fp)
     c2c:	e0fffa17 	ldw	r3,-24(fp)
     c30:	00bfc074 	movhi	r2,65281
     c34:	10bfc004 	addi	r2,r2,-256
     c38:	1884703a 	and	r2,r3,r2
     c3c:	1006d23a 	srli	r3,r2,8
     c40:	e13ffa17 	ldw	r4,-24(fp)
     c44:	00803ff4 	movhi	r2,255
     c48:	10803fc4 	addi	r2,r2,255
     c4c:	2084703a 	and	r2,r4,r2
     c50:	1004923a 	slli	r2,r2,8
     c54:	1884b03a 	or	r2,r3,r2
     c58:	e0bffb15 	stw	r2,-20(fp)
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c;
     c5c:	e0fffb17 	ldw	r3,-20(fp)
     c60:	00971734 	movhi	r2,23644
     c64:	10971704 	addi	r2,r2,23644
     c68:	1888f03a 	xor	r4,r3,r2
     c6c:	00800074 	movhi	r2,1
     c70:	10925804 	addi	r2,r2,18784
     c74:	e0fff817 	ldw	r3,-32(fp)
     c78:	18c7883a 	add	r3,r3,r3
     c7c:	18c7883a 	add	r3,r3,r3
     c80:	10c5883a 	add	r2,r2,r3
     c84:	11000015 	stw	r4,0(r2)
	} else {
		memcpy(key_pad, key, keylen);
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
     c88:	e0bff817 	ldw	r2,-32(fp)
     c8c:	10800044 	addi	r2,r2,1
     c90:	e0bff815 	stw	r2,-32(fp)
     c94:	e0bff817 	ldw	r2,-32(fp)
     c98:	10800410 	cmplti	r2,r2,16
     c9c:	103fd81e 	bne	r2,zero,c00 <__alt_mem_epcs_flash_controller+0xfdff7c00>
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c;
	}
	sha256_Transform(sha256_initial_hash_value, key_pad, opad_digest);
     ca0:	e1bffe17 	ldw	r6,-8(fp)
     ca4:	01400074 	movhi	r5,1
     ca8:	29525804 	addi	r5,r5,18784
     cac:	01000074 	movhi	r4,1
     cb0:	2104d404 	addi	r4,r4,4944
     cb4:	000339c0 	call	339c <sha256_Transform>

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
     cb8:	e03ff915 	stw	zero,-28(fp)
     cbc:	00001406 	br	d10 <hmac_sha256_prepare+0x1a0>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c ^ 0x36363636;
     cc0:	00800074 	movhi	r2,1
     cc4:	10925804 	addi	r2,r2,18784
     cc8:	e0fff917 	ldw	r3,-28(fp)
     ccc:	18c7883a 	add	r3,r3,r3
     cd0:	18c7883a 	add	r3,r3,r3
     cd4:	10c5883a 	add	r2,r2,r3
     cd8:	10c00017 	ldw	r3,0(r2)
     cdc:	009a9ab4 	movhi	r2,27242
     ce0:	109a9a84 	addi	r2,r2,27242
     ce4:	1888f03a 	xor	r4,r3,r2
     ce8:	00800074 	movhi	r2,1
     cec:	10925804 	addi	r2,r2,18784
     cf0:	e0fff917 	ldw	r3,-28(fp)
     cf4:	18c7883a 	add	r3,r3,r3
     cf8:	18c7883a 	add	r3,r3,r3
     cfc:	10c5883a 	add	r2,r2,r3
     d00:	11000015 	stw	r4,0(r2)
		key_pad[i] = data ^ 0x5c5c5c5c;
	}
	sha256_Transform(sha256_initial_hash_value, key_pad, opad_digest);

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
     d04:	e0bff917 	ldw	r2,-28(fp)
     d08:	10800044 	addi	r2,r2,1
     d0c:	e0bff915 	stw	r2,-28(fp)
     d10:	e0bff917 	ldw	r2,-28(fp)
     d14:	10800410 	cmplti	r2,r2,16
     d18:	103fe91e 	bne	r2,zero,cc0 <__alt_mem_epcs_flash_controller+0xfdff7cc0>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c ^ 0x36363636;
	}
	sha256_Transform(sha256_initial_hash_value, key_pad, ipad_digest);
     d1c:	e1bfff17 	ldw	r6,-4(fp)
     d20:	01400074 	movhi	r5,1
     d24:	29525804 	addi	r5,r5,18784
     d28:	01000074 	movhi	r4,1
     d2c:	2104d404 	addi	r4,r4,4944
     d30:	000339c0 	call	339c <sha256_Transform>
	memzero(key_pad, sizeof(key_pad));
     d34:	01401004 	movi	r5,64
     d38:	01000074 	movhi	r4,1
     d3c:	21125804 	addi	r4,r4,18784
     d40:	000134c0 	call	134c <memzero>
}
     d44:	0001883a 	nop
     d48:	e037883a 	mov	sp,fp
     d4c:	dfc00117 	ldw	ra,4(sp)
     d50:	df000017 	ldw	fp,0(sp)
     d54:	dec00204 	addi	sp,sp,8
     d58:	f800283a 	ret

00000d5c <hmac_sha512_Init>:

void hmac_sha512_Init(HMAC_SHA512_CTX *hctx, const uint8_t *key, const uint32_t keylen)
{
     d5c:	defffa04 	addi	sp,sp,-24
     d60:	dfc00515 	stw	ra,20(sp)
     d64:	df000415 	stw	fp,16(sp)
     d68:	df000404 	addi	fp,sp,16
     d6c:	e13ffd15 	stw	r4,-12(fp)
     d70:	e17ffe15 	stw	r5,-8(fp)
     d74:	e1bfff15 	stw	r6,-4(fp)
	static CONFIDENTIAL uint8_t i_key_pad[SHA512_BLOCK_LENGTH];
	memset(i_key_pad, 0, SHA512_BLOCK_LENGTH);
     d78:	01802004 	movi	r6,128
     d7c:	000b883a 	mov	r5,zero
     d80:	01000074 	movhi	r4,1
     d84:	21128204 	addi	r4,r4,18952
     d88:	00064f80 	call	64f8 <memset>
	if (keylen > SHA512_BLOCK_LENGTH) {
     d8c:	e0bfff17 	ldw	r2,-4(fp)
     d90:	10802070 	cmpltui	r2,r2,129
     d94:	1000061e 	bne	r2,zero,db0 <hmac_sha512_Init+0x54>
		sha512_Raw(key, keylen, i_key_pad);
     d98:	01800074 	movhi	r6,1
     d9c:	31928204 	addi	r6,r6,18952
     da0:	e17fff17 	ldw	r5,-4(fp)
     da4:	e13ffe17 	ldw	r4,-8(fp)
     da8:	00062a40 	call	62a4 <sha512_Raw>
     dac:	00000506 	br	dc4 <hmac_sha512_Init+0x68>
	} else {
		memcpy(i_key_pad, key, keylen);
     db0:	e1bfff17 	ldw	r6,-4(fp)
     db4:	e17ffe17 	ldw	r5,-8(fp)
     db8:	01000074 	movhi	r4,1
     dbc:	21128204 	addi	r4,r4,18952
     dc0:	00064d00 	call	64d0 <memcpy>
	}
	for (int i = 0; i < SHA512_BLOCK_LENGTH; i++) {
     dc4:	e03ffc15 	stw	zero,-16(fp)
     dc8:	00001a06 	br	e34 <hmac_sha512_Init+0xd8>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
     dcc:	00800074 	movhi	r2,1
     dd0:	10928204 	addi	r2,r2,18952
     dd4:	e0fffc17 	ldw	r3,-16(fp)
     dd8:	10c5883a 	add	r2,r2,r3
     ddc:	10800003 	ldbu	r2,0(r2)
     de0:	1080171c 	xori	r2,r2,92
     de4:	1009883a 	mov	r4,r2
     de8:	e0fffd17 	ldw	r3,-12(fp)
     dec:	e0bffc17 	ldw	r2,-16(fp)
     df0:	1885883a 	add	r2,r3,r2
     df4:	11000005 	stb	r4,0(r2)
		i_key_pad[i] ^= 0x36;
     df8:	00800074 	movhi	r2,1
     dfc:	10928204 	addi	r2,r2,18952
     e00:	e0fffc17 	ldw	r3,-16(fp)
     e04:	10c5883a 	add	r2,r2,r3
     e08:	10800003 	ldbu	r2,0(r2)
     e0c:	10800d9c 	xori	r2,r2,54
     e10:	1009883a 	mov	r4,r2
     e14:	00800074 	movhi	r2,1
     e18:	10928204 	addi	r2,r2,18952
     e1c:	e0fffc17 	ldw	r3,-16(fp)
     e20:	10c5883a 	add	r2,r2,r3
     e24:	11000005 	stb	r4,0(r2)
	if (keylen > SHA512_BLOCK_LENGTH) {
		sha512_Raw(key, keylen, i_key_pad);
	} else {
		memcpy(i_key_pad, key, keylen);
	}
	for (int i = 0; i < SHA512_BLOCK_LENGTH; i++) {
     e28:	e0bffc17 	ldw	r2,-16(fp)
     e2c:	10800044 	addi	r2,r2,1
     e30:	e0bffc15 	stw	r2,-16(fp)
     e34:	e0bffc17 	ldw	r2,-16(fp)
     e38:	10802010 	cmplti	r2,r2,128
     e3c:	103fe31e 	bne	r2,zero,dcc <__alt_mem_epcs_flash_controller+0xfdff7dcc>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
		i_key_pad[i] ^= 0x36;
	}
	sha512_Init(&(hctx->ctx));
     e40:	e0bffd17 	ldw	r2,-12(fp)
     e44:	10802004 	addi	r2,r2,128
     e48:	1009883a 	mov	r4,r2
     e4c:	00042500 	call	4250 <sha512_Init>
	sha512_Update(&(hctx->ctx), i_key_pad, SHA512_BLOCK_LENGTH);
     e50:	e0bffd17 	ldw	r2,-12(fp)
     e54:	10802004 	addi	r2,r2,128
     e58:	01802004 	movi	r6,128
     e5c:	01400074 	movhi	r5,1
     e60:	29528204 	addi	r5,r5,18952
     e64:	1009883a 	mov	r4,r2
     e68:	00051f80 	call	51f8 <sha512_Update>
	memzero(i_key_pad, sizeof(i_key_pad));
     e6c:	01402004 	movi	r5,128
     e70:	01000074 	movhi	r4,1
     e74:	21128204 	addi	r4,r4,18952
     e78:	000134c0 	call	134c <memzero>
}
     e7c:	0001883a 	nop
     e80:	e037883a 	mov	sp,fp
     e84:	dfc00117 	ldw	ra,4(sp)
     e88:	df000017 	ldw	fp,0(sp)
     e8c:	dec00204 	addi	sp,sp,8
     e90:	f800283a 	ret

00000e94 <hmac_sha512_Update>:

void hmac_sha512_Update(HMAC_SHA512_CTX *hctx, const uint8_t *msg, const uint32_t msglen)
{
     e94:	defffb04 	addi	sp,sp,-20
     e98:	dfc00415 	stw	ra,16(sp)
     e9c:	df000315 	stw	fp,12(sp)
     ea0:	df000304 	addi	fp,sp,12
     ea4:	e13ffd15 	stw	r4,-12(fp)
     ea8:	e17ffe15 	stw	r5,-8(fp)
     eac:	e1bfff15 	stw	r6,-4(fp)
	sha512_Update(&(hctx->ctx), msg, msglen);
     eb0:	e0bffd17 	ldw	r2,-12(fp)
     eb4:	10802004 	addi	r2,r2,128
     eb8:	e1bfff17 	ldw	r6,-4(fp)
     ebc:	e17ffe17 	ldw	r5,-8(fp)
     ec0:	1009883a 	mov	r4,r2
     ec4:	00051f80 	call	51f8 <sha512_Update>
}
     ec8:	0001883a 	nop
     ecc:	e037883a 	mov	sp,fp
     ed0:	dfc00117 	ldw	ra,4(sp)
     ed4:	df000017 	ldw	fp,0(sp)
     ed8:	dec00204 	addi	sp,sp,8
     edc:	f800283a 	ret

00000ee0 <hmac_sha512_Final>:

void hmac_sha512_Final(HMAC_SHA512_CTX *hctx, uint8_t *hmac)
{
     ee0:	defffc04 	addi	sp,sp,-16
     ee4:	dfc00315 	stw	ra,12(sp)
     ee8:	df000215 	stw	fp,8(sp)
     eec:	df000204 	addi	fp,sp,8
     ef0:	e13ffe15 	stw	r4,-8(fp)
     ef4:	e17fff15 	stw	r5,-4(fp)
	sha512_Final(&(hctx->ctx), hmac);
     ef8:	e0bffe17 	ldw	r2,-8(fp)
     efc:	10802004 	addi	r2,r2,128
     f00:	e17fff17 	ldw	r5,-4(fp)
     f04:	1009883a 	mov	r4,r2
     f08:	0005f740 	call	5f74 <sha512_Final>
	sha512_Init(&(hctx->ctx));
     f0c:	e0bffe17 	ldw	r2,-8(fp)
     f10:	10802004 	addi	r2,r2,128
     f14:	1009883a 	mov	r4,r2
     f18:	00042500 	call	4250 <sha512_Init>
	sha512_Update(&(hctx->ctx), hctx->o_key_pad, SHA512_BLOCK_LENGTH);
     f1c:	e0bffe17 	ldw	r2,-8(fp)
     f20:	10802004 	addi	r2,r2,128
     f24:	e0fffe17 	ldw	r3,-8(fp)
     f28:	01802004 	movi	r6,128
     f2c:	180b883a 	mov	r5,r3
     f30:	1009883a 	mov	r4,r2
     f34:	00051f80 	call	51f8 <sha512_Update>
	sha512_Update(&(hctx->ctx), hmac, SHA512_DIGEST_LENGTH);
     f38:	e0bffe17 	ldw	r2,-8(fp)
     f3c:	10802004 	addi	r2,r2,128
     f40:	01801004 	movi	r6,64
     f44:	e17fff17 	ldw	r5,-4(fp)
     f48:	1009883a 	mov	r4,r2
     f4c:	00051f80 	call	51f8 <sha512_Update>
	sha512_Final(&(hctx->ctx), hmac);
     f50:	e0bffe17 	ldw	r2,-8(fp)
     f54:	10802004 	addi	r2,r2,128
     f58:	e17fff17 	ldw	r5,-4(fp)
     f5c:	1009883a 	mov	r4,r2
     f60:	0005f740 	call	5f74 <sha512_Final>
	memzero(hctx, sizeof(HMAC_SHA512_CTX));
     f64:	01405404 	movi	r5,336
     f68:	e13ffe17 	ldw	r4,-8(fp)
     f6c:	000134c0 	call	134c <memzero>
}
     f70:	0001883a 	nop
     f74:	e037883a 	mov	sp,fp
     f78:	dfc00117 	ldw	ra,4(sp)
     f7c:	df000017 	ldw	fp,0(sp)
     f80:	dec00204 	addi	sp,sp,8
     f84:	f800283a 	ret

00000f88 <hmac_sha512>:

void hmac_sha512(const uint8_t *key, const uint32_t keylen, const uint8_t *msg, const uint32_t msglen, uint8_t *hmac)
{
     f88:	deffa604 	addi	sp,sp,-360
     f8c:	dfc05915 	stw	ra,356(sp)
     f90:	df005815 	stw	fp,352(sp)
     f94:	df005804 	addi	fp,sp,352
     f98:	e13ffc15 	stw	r4,-16(fp)
     f9c:	e17ffd15 	stw	r5,-12(fp)
     fa0:	e1bffe15 	stw	r6,-8(fp)
     fa4:	e1ffff15 	stw	r7,-4(fp)
	HMAC_SHA512_CTX hctx;
	hmac_sha512_Init(&hctx, key, keylen);
     fa8:	e1bffd17 	ldw	r6,-12(fp)
     fac:	e17ffc17 	ldw	r5,-16(fp)
     fb0:	e13fa804 	addi	r4,fp,-352
     fb4:	0000d5c0 	call	d5c <hmac_sha512_Init>
	hmac_sha512_Update(&hctx, msg, msglen);
     fb8:	e1bfff17 	ldw	r6,-4(fp)
     fbc:	e17ffe17 	ldw	r5,-8(fp)
     fc0:	e13fa804 	addi	r4,fp,-352
     fc4:	0000e940 	call	e94 <hmac_sha512_Update>
	hmac_sha512_Final(&hctx, hmac);
     fc8:	e1400217 	ldw	r5,8(fp)
     fcc:	e13fa804 	addi	r4,fp,-352
     fd0:	0000ee00 	call	ee0 <hmac_sha512_Final>
}
     fd4:	0001883a 	nop
     fd8:	e037883a 	mov	sp,fp
     fdc:	dfc00117 	ldw	ra,4(sp)
     fe0:	df000017 	ldw	fp,0(sp)
     fe4:	dec00204 	addi	sp,sp,8
     fe8:	f800283a 	ret

00000fec <hmac_sha512_prepare>:

void hmac_sha512_prepare(const uint8_t *key, const uint32_t keylen, uint64_t *opad_digest, uint64_t *ipad_digest)
{
     fec:	deffde04 	addi	sp,sp,-136
     ff0:	dfc02115 	stw	ra,132(sp)
     ff4:	df002015 	stw	fp,128(sp)
     ff8:	ddc01f15 	stw	r23,124(sp)
     ffc:	dd801e15 	stw	r22,120(sp)
    1000:	dd401d15 	stw	r21,116(sp)
    1004:	dd001c15 	stw	r20,112(sp)
    1008:	dcc01b15 	stw	r19,108(sp)
    100c:	dc801a15 	stw	r18,104(sp)
    1010:	dc401915 	stw	r17,100(sp)
    1014:	dc001815 	stw	r16,96(sp)
    1018:	df002004 	addi	fp,sp,128
    101c:	e13fe615 	stw	r4,-104(fp)
    1020:	e17fe715 	stw	r5,-100(fp)
    1024:	e1bfe815 	stw	r6,-96(fp)
    1028:	e1ffe915 	stw	r7,-92(fp)
	static CONFIDENTIAL uint64_t key_pad[SHA512_BLOCK_LENGTH/sizeof(uint64_t)];

	memzero(key_pad, sizeof(key_pad));
    102c:	01402004 	movi	r5,128
    1030:	01000074 	movhi	r4,1
    1034:	2112a204 	addi	r4,r4,19080
    1038:	000134c0 	call	134c <memzero>
	if (keylen > SHA512_BLOCK_LENGTH) {
    103c:	e0bfe717 	ldw	r2,-100(fp)
    1040:	10802070 	cmpltui	r2,r2,129
    1044:	10000e1e 	bne	r2,zero,1080 <hmac_sha512_prepare+0x94>
		static CONFIDENTIAL SHA512_CTX context;
		sha512_Init(&context);
    1048:	01000074 	movhi	r4,1
    104c:	2112c204 	addi	r4,r4,19208
    1050:	00042500 	call	4250 <sha512_Init>
		sha512_Update(&context, key, keylen);
    1054:	e1bfe717 	ldw	r6,-100(fp)
    1058:	e17fe617 	ldw	r5,-104(fp)
    105c:	01000074 	movhi	r4,1
    1060:	2112c204 	addi	r4,r4,19208
    1064:	00051f80 	call	51f8 <sha512_Update>
		sha512_Final(&context, (uint8_t*)key_pad);
    1068:	01400074 	movhi	r5,1
    106c:	2952a204 	addi	r5,r5,19080
    1070:	01000074 	movhi	r4,1
    1074:	2112c204 	addi	r4,r4,19208
    1078:	0005f740 	call	5f74 <sha512_Final>
    107c:	00000506 	br	1094 <hmac_sha512_prepare+0xa8>
	} else {
		memcpy(key_pad, key, keylen);
    1080:	e1bfe717 	ldw	r6,-100(fp)
    1084:	e17fe617 	ldw	r5,-104(fp)
    1088:	01000074 	movhi	r4,1
    108c:	2112a204 	addi	r4,r4,19080
    1090:	00064d00 	call	64d0 <memcpy>
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    1094:	e03fe015 	stw	zero,-128(fp)
    1098:	00006b06 	br	1248 <hmac_sha512_prepare+0x25c>
		uint64_t data;
#if BYTE_ORDER == LITTLE_ENDIAN
		REVERSE64(key_pad[i], data);
    109c:	00800074 	movhi	r2,1
    10a0:	1092a204 	addi	r2,r2,19080
    10a4:	e0ffe017 	ldw	r3,-128(fp)
    10a8:	180690fa 	slli	r3,r3,3
    10ac:	10c5883a 	add	r2,r2,r3
    10b0:	10c00017 	ldw	r3,0(r2)
    10b4:	e0ffe215 	stw	r3,-120(fp)
    10b8:	10800117 	ldw	r2,4(r2)
    10bc:	e0bfe315 	stw	r2,-116(fp)
    10c0:	e0bfe317 	ldw	r2,-116(fp)
    10c4:	e0bff615 	stw	r2,-40(fp)
    10c8:	e0ffe217 	ldw	r3,-120(fp)
    10cc:	e0fff715 	stw	r3,-36(fp)
    10d0:	e0bff617 	ldw	r2,-40(fp)
    10d4:	e0bfe215 	stw	r2,-120(fp)
    10d8:	e0fff717 	ldw	r3,-36(fp)
    10dc:	e0ffe315 	stw	r3,-116(fp)
    10e0:	e0ffe217 	ldw	r3,-120(fp)
    10e4:	00bfc074 	movhi	r2,65281
    10e8:	10bfc004 	addi	r2,r2,-256
    10ec:	1884703a 	and	r2,r3,r2
    10f0:	e0bfea15 	stw	r2,-88(fp)
    10f4:	e0ffe317 	ldw	r3,-116(fp)
    10f8:	00bfc074 	movhi	r2,65281
    10fc:	10bfc004 	addi	r2,r2,-256
    1100:	1884703a 	and	r2,r3,r2
    1104:	e0bfeb15 	stw	r2,-84(fp)
    1108:	e0ffeb17 	ldw	r3,-84(fp)
    110c:	1804963a 	slli	r2,r3,24
    1110:	e0ffea17 	ldw	r3,-88(fp)
    1114:	1820d23a 	srli	r16,r3,8
    1118:	1420b03a 	or	r16,r2,r16
    111c:	e0bfeb17 	ldw	r2,-84(fp)
    1120:	1022d23a 	srli	r17,r2,8
    1124:	e0ffe217 	ldw	r3,-120(fp)
    1128:	00803ff4 	movhi	r2,255
    112c:	10803fc4 	addi	r2,r2,255
    1130:	1884703a 	and	r2,r3,r2
    1134:	e0bfec15 	stw	r2,-80(fp)
    1138:	e0ffe317 	ldw	r3,-116(fp)
    113c:	00803ff4 	movhi	r2,255
    1140:	10803fc4 	addi	r2,r2,255
    1144:	1884703a 	and	r2,r3,r2
    1148:	e0bfed15 	stw	r2,-76(fp)
    114c:	e0ffec17 	ldw	r3,-80(fp)
    1150:	1804d63a 	srli	r2,r3,24
    1154:	e0ffed17 	ldw	r3,-76(fp)
    1158:	1826923a 	slli	r19,r3,8
    115c:	14e6b03a 	or	r19,r2,r19
    1160:	e0bfec17 	ldw	r2,-80(fp)
    1164:	1024923a 	slli	r18,r2,8
    1168:	8484b03a 	or	r2,r16,r18
    116c:	e0bfe215 	stw	r2,-120(fp)
    1170:	8cc4b03a 	or	r2,r17,r19
    1174:	e0bfe315 	stw	r2,-116(fp)
    1178:	e0bfe217 	ldw	r2,-120(fp)
    117c:	10bfffec 	andhi	r2,r2,65535
    1180:	e0bfee15 	stw	r2,-72(fp)
    1184:	e0bfe317 	ldw	r2,-116(fp)
    1188:	10bfffec 	andhi	r2,r2,65535
    118c:	e0bfef15 	stw	r2,-68(fp)
    1190:	e0ffef17 	ldw	r3,-68(fp)
    1194:	1804943a 	slli	r2,r3,16
    1198:	e0ffee17 	ldw	r3,-72(fp)
    119c:	1828d43a 	srli	r20,r3,16
    11a0:	1528b03a 	or	r20,r2,r20
    11a4:	e0bfef17 	ldw	r2,-68(fp)
    11a8:	102ad43a 	srli	r21,r2,16
    11ac:	e0bfe217 	ldw	r2,-120(fp)
    11b0:	10bfffcc 	andi	r2,r2,65535
    11b4:	e0bff015 	stw	r2,-64(fp)
    11b8:	e0bfe317 	ldw	r2,-116(fp)
    11bc:	10bfffcc 	andi	r2,r2,65535
    11c0:	e0bff115 	stw	r2,-60(fp)
    11c4:	e0fff017 	ldw	r3,-64(fp)
    11c8:	1804d43a 	srli	r2,r3,16
    11cc:	e0fff117 	ldw	r3,-60(fp)
    11d0:	182e943a 	slli	r23,r3,16
    11d4:	15eeb03a 	or	r23,r2,r23
    11d8:	e0bff017 	ldw	r2,-64(fp)
    11dc:	102c943a 	slli	r22,r2,16
    11e0:	a584b03a 	or	r2,r20,r22
    11e4:	e0bfe415 	stw	r2,-112(fp)
    11e8:	adc4b03a 	or	r2,r21,r23
    11ec:	e0bfe515 	stw	r2,-108(fp)
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
    11f0:	e0ffe417 	ldw	r3,-112(fp)
    11f4:	00971734 	movhi	r2,23644
    11f8:	10971704 	addi	r2,r2,23644
    11fc:	1884f03a 	xor	r2,r3,r2
    1200:	e0bff215 	stw	r2,-56(fp)
    1204:	e0ffe517 	ldw	r3,-108(fp)
    1208:	00971734 	movhi	r2,23644
    120c:	10971704 	addi	r2,r2,23644
    1210:	1884f03a 	xor	r2,r3,r2
    1214:	e0bff315 	stw	r2,-52(fp)
    1218:	00800074 	movhi	r2,1
    121c:	1092a204 	addi	r2,r2,19080
    1220:	e0ffe017 	ldw	r3,-128(fp)
    1224:	180690fa 	slli	r3,r3,3
    1228:	10c5883a 	add	r2,r2,r3
    122c:	e0fff217 	ldw	r3,-56(fp)
    1230:	10c00015 	stw	r3,0(r2)
    1234:	e0fff317 	ldw	r3,-52(fp)
    1238:	10c00115 	stw	r3,4(r2)
	} else {
		memcpy(key_pad, key, keylen);
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    123c:	e0bfe017 	ldw	r2,-128(fp)
    1240:	10800044 	addi	r2,r2,1
    1244:	e0bfe015 	stw	r2,-128(fp)
    1248:	e0bfe017 	ldw	r2,-128(fp)
    124c:	10800410 	cmplti	r2,r2,16
    1250:	103f921e 	bne	r2,zero,109c <__alt_mem_epcs_flash_controller+0xfdff809c>
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
	}
	sha512_Transform(sha512_initial_hash_value, key_pad, opad_digest);
    1254:	e1bfe817 	ldw	r6,-96(fp)
    1258:	01400074 	movhi	r5,1
    125c:	2952a204 	addi	r5,r5,19080
    1260:	01000074 	movhi	r4,1
    1264:	21057c04 	addi	r4,r4,5616
    1268:	00042d80 	call	42d8 <sha512_Transform>

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    126c:	e03fe115 	stw	zero,-124(fp)
    1270:	00001b06 	br	12e0 <hmac_sha512_prepare+0x2f4>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c5c5c5c5c ^ 0x3636363636363636;
    1274:	00800074 	movhi	r2,1
    1278:	1092a204 	addi	r2,r2,19080
    127c:	e0ffe117 	ldw	r3,-124(fp)
    1280:	180690fa 	slli	r3,r3,3
    1284:	10c9883a 	add	r4,r2,r3
    1288:	20800017 	ldw	r2,0(r4)
    128c:	20c00117 	ldw	r3,4(r4)
    1290:	011a9ab4 	movhi	r4,27242
    1294:	211a9a84 	addi	r4,r4,27242
    1298:	1108f03a 	xor	r4,r2,r4
    129c:	e13ff415 	stw	r4,-48(fp)
    12a0:	011a9ab4 	movhi	r4,27242
    12a4:	211a9a84 	addi	r4,r4,27242
    12a8:	1908f03a 	xor	r4,r3,r4
    12ac:	e13ff515 	stw	r4,-44(fp)
    12b0:	00800074 	movhi	r2,1
    12b4:	1092a204 	addi	r2,r2,19080
    12b8:	e0ffe117 	ldw	r3,-124(fp)
    12bc:	180690fa 	slli	r3,r3,3
    12c0:	10c5883a 	add	r2,r2,r3
    12c4:	e0fff417 	ldw	r3,-48(fp)
    12c8:	10c00015 	stw	r3,0(r2)
    12cc:	e0fff517 	ldw	r3,-44(fp)
    12d0:	10c00115 	stw	r3,4(r2)
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
	}
	sha512_Transform(sha512_initial_hash_value, key_pad, opad_digest);

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    12d4:	e0bfe117 	ldw	r2,-124(fp)
    12d8:	10800044 	addi	r2,r2,1
    12dc:	e0bfe115 	stw	r2,-124(fp)
    12e0:	e0bfe117 	ldw	r2,-124(fp)
    12e4:	10800410 	cmplti	r2,r2,16
    12e8:	103fe21e 	bne	r2,zero,1274 <__alt_mem_epcs_flash_controller+0xfdff8274>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c5c5c5c5c ^ 0x3636363636363636;
	}
	sha512_Transform(sha512_initial_hash_value, key_pad, ipad_digest);
    12ec:	e1bfe917 	ldw	r6,-92(fp)
    12f0:	01400074 	movhi	r5,1
    12f4:	2952a204 	addi	r5,r5,19080
    12f8:	01000074 	movhi	r4,1
    12fc:	21057c04 	addi	r4,r4,5616
    1300:	00042d80 	call	42d8 <sha512_Transform>
	memzero(key_pad, sizeof(key_pad));
    1304:	01402004 	movi	r5,128
    1308:	01000074 	movhi	r4,1
    130c:	2112a204 	addi	r4,r4,19080
    1310:	000134c0 	call	134c <memzero>
}
    1314:	0001883a 	nop
    1318:	e6fff804 	addi	sp,fp,-32
    131c:	dfc00917 	ldw	ra,36(sp)
    1320:	df000817 	ldw	fp,32(sp)
    1324:	ddc00717 	ldw	r23,28(sp)
    1328:	dd800617 	ldw	r22,24(sp)
    132c:	dd400517 	ldw	r21,20(sp)
    1330:	dd000417 	ldw	r20,16(sp)
    1334:	dcc00317 	ldw	r19,12(sp)
    1338:	dc800217 	ldw	r18,8(sp)
    133c:	dc400117 	ldw	r17,4(sp)
    1340:	dc000017 	ldw	r16,0(sp)
    1344:	dec00a04 	addi	sp,sp,40
    1348:	f800283a 	ret

0000134c <memzero>:
#include <string.h>

void memzero(void *s, size_t n)
{
    134c:	defffc04 	addi	sp,sp,-16
    1350:	dfc00315 	stw	ra,12(sp)
    1354:	df000215 	stw	fp,8(sp)
    1358:	df000204 	addi	fp,sp,8
    135c:	e13ffe15 	stw	r4,-8(fp)
    1360:	e17fff15 	stw	r5,-4(fp)
	memset(s, 0, n);
    1364:	e1bfff17 	ldw	r6,-4(fp)
    1368:	000b883a 	mov	r5,zero
    136c:	e13ffe17 	ldw	r4,-8(fp)
    1370:	00064f80 	call	64f8 <memset>
}
    1374:	0001883a 	nop
    1378:	e037883a 	mov	sp,fp
    137c:	dfc00117 	ldw	ra,4(sp)
    1380:	df000017 	ldw	fp,0(sp)
    1384:	dec00204 	addi	sp,sp,8
    1388:	f800283a 	ret

0000138c <pbkdf2_hmac_sha256_Init>:
#include "..\Include\hmac.h"
#include "..\Include\sha2.h"
#include "..\Include\memzero.h"

void pbkdf2_hmac_sha256_Init(PBKDF2_HMAC_SHA256_CTX *pctx, const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t blocknr)
{
    138c:	deffdd04 	addi	sp,sp,-140
    1390:	dfc02215 	stw	ra,136(sp)
    1394:	df002115 	stw	fp,132(sp)
    1398:	df002104 	addi	fp,sp,132
    139c:	e13ffc15 	stw	r4,-16(fp)
    13a0:	e17ffd15 	stw	r5,-12(fp)
    13a4:	e1bffe15 	stw	r6,-8(fp)
    13a8:	e1ffff15 	stw	r7,-4(fp)
	SHA256_CTX ctx;
#if BYTE_ORDER == LITTLE_ENDIAN
	REVERSE32(blocknr, blocknr);
    13ac:	e0800317 	ldw	r2,12(fp)
    13b0:	e0bfe015 	stw	r2,-128(fp)
    13b4:	e0bfe017 	ldw	r2,-128(fp)
    13b8:	1004143a 	roli	r2,r2,16
    13bc:	e0bfe015 	stw	r2,-128(fp)
    13c0:	e0ffe017 	ldw	r3,-128(fp)
    13c4:	00bfc074 	movhi	r2,65281
    13c8:	10bfc004 	addi	r2,r2,-256
    13cc:	1884703a 	and	r2,r3,r2
    13d0:	1006d23a 	srli	r3,r2,8
    13d4:	e13fe017 	ldw	r4,-128(fp)
    13d8:	00803ff4 	movhi	r2,255
    13dc:	10803fc4 	addi	r2,r2,255
    13e0:	2084703a 	and	r2,r4,r2
    13e4:	1004923a 	slli	r2,r2,8
    13e8:	1884b03a 	or	r2,r3,r2
    13ec:	e0800315 	stw	r2,12(fp)
#endif

	hmac_sha256_prepare(pass, passlen, pctx->odig, pctx->idig);
    13f0:	e0fffe17 	ldw	r3,-8(fp)
    13f4:	e13ffc17 	ldw	r4,-16(fp)
    13f8:	e0bffc17 	ldw	r2,-16(fp)
    13fc:	10800804 	addi	r2,r2,32
    1400:	100f883a 	mov	r7,r2
    1404:	200d883a 	mov	r6,r4
    1408:	180b883a 	mov	r5,r3
    140c:	e13ffd17 	ldw	r4,-12(fp)
    1410:	0000b700 	call	b70 <hmac_sha256_prepare>
	memset(pctx->g, 0, sizeof(pctx->g));
    1414:	e0bffc17 	ldw	r2,-16(fp)
    1418:	10801804 	addi	r2,r2,96
    141c:	01801004 	movi	r6,64
    1420:	000b883a 	mov	r5,zero
    1424:	1009883a 	mov	r4,r2
    1428:	00064f80 	call	64f8 <memset>
	pctx->g[8] = 0x80000000;
    142c:	e0bffc17 	ldw	r2,-16(fp)
    1430:	00e00034 	movhi	r3,32768
    1434:	10c02015 	stw	r3,128(r2)
	pctx->g[15] = (SHA256_BLOCK_LENGTH + SHA256_DIGEST_LENGTH) * 8;
    1438:	e0bffc17 	ldw	r2,-16(fp)
    143c:	00c0c004 	movi	r3,768
    1440:	10c02715 	stw	r3,156(r2)

	memcpy (ctx.state, pctx->idig, sizeof(pctx->idig));
    1444:	e0bffc17 	ldw	r2,-16(fp)
    1448:	10c00804 	addi	r3,r2,32
    144c:	e0bfe204 	addi	r2,fp,-120
    1450:	01800804 	movi	r6,32
    1454:	180b883a 	mov	r5,r3
    1458:	1009883a 	mov	r4,r2
    145c:	00064d00 	call	64d0 <memcpy>
	ctx.bitcount = SHA256_BLOCK_LENGTH * 8;
    1460:	00808004 	movi	r2,512
    1464:	e0bfea15 	stw	r2,-88(fp)
    1468:	e03feb15 	stw	zero,-84(fp)
	sha256_Update(&ctx, salt, saltlen);
    146c:	e0c00217 	ldw	r3,8(fp)
    1470:	e0bfe204 	addi	r2,fp,-120
    1474:	180d883a 	mov	r6,r3
    1478:	e17fff17 	ldw	r5,-4(fp)
    147c:	1009883a 	mov	r4,r2
    1480:	00039640 	call	3964 <sha256_Update>
	sha256_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
    1484:	e0c00304 	addi	r3,fp,12
    1488:	e0bfe204 	addi	r2,fp,-120
    148c:	01800104 	movi	r6,4
    1490:	180b883a 	mov	r5,r3
    1494:	1009883a 	mov	r4,r2
    1498:	00039640 	call	3964 <sha256_Update>
	sha256_Final(&ctx, (uint8_t*)pctx->g);
    149c:	e0bffc17 	ldw	r2,-16(fp)
    14a0:	10c01804 	addi	r3,r2,96
    14a4:	e0bfe204 	addi	r2,fp,-120
    14a8:	180b883a 	mov	r5,r3
    14ac:	1009883a 	mov	r4,r2
    14b0:	0003d6c0 	call	3d6c <sha256_Final>
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH / sizeof(uint32_t); k++) {
    14b4:	e03fdf15 	stw	zero,-132(fp)
    14b8:	00002006 	br	153c <pbkdf2_hmac_sha256_Init+0x1b0>
		REVERSE32(pctx->g[k], pctx->g[k]);
    14bc:	e0fffc17 	ldw	r3,-16(fp)
    14c0:	e0bfdf17 	ldw	r2,-132(fp)
    14c4:	10800604 	addi	r2,r2,24
    14c8:	1085883a 	add	r2,r2,r2
    14cc:	1085883a 	add	r2,r2,r2
    14d0:	1885883a 	add	r2,r3,r2
    14d4:	10800017 	ldw	r2,0(r2)
    14d8:	e0bfe115 	stw	r2,-124(fp)
    14dc:	e0bfe117 	ldw	r2,-124(fp)
    14e0:	1004143a 	roli	r2,r2,16
    14e4:	e0bfe115 	stw	r2,-124(fp)
    14e8:	e0ffe117 	ldw	r3,-124(fp)
    14ec:	00bfc074 	movhi	r2,65281
    14f0:	10bfc004 	addi	r2,r2,-256
    14f4:	1884703a 	and	r2,r3,r2
    14f8:	1006d23a 	srli	r3,r2,8
    14fc:	e13fe117 	ldw	r4,-124(fp)
    1500:	00803ff4 	movhi	r2,255
    1504:	10803fc4 	addi	r2,r2,255
    1508:	2084703a 	and	r2,r4,r2
    150c:	1004923a 	slli	r2,r2,8
    1510:	1886b03a 	or	r3,r3,r2
    1514:	e13ffc17 	ldw	r4,-16(fp)
    1518:	e0bfdf17 	ldw	r2,-132(fp)
    151c:	10800604 	addi	r2,r2,24
    1520:	1085883a 	add	r2,r2,r2
    1524:	1085883a 	add	r2,r2,r2
    1528:	2085883a 	add	r2,r4,r2
    152c:	10c00015 	stw	r3,0(r2)
	ctx.bitcount = SHA256_BLOCK_LENGTH * 8;
	sha256_Update(&ctx, salt, saltlen);
	sha256_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
	sha256_Final(&ctx, (uint8_t*)pctx->g);
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH / sizeof(uint32_t); k++) {
    1530:	e0bfdf17 	ldw	r2,-132(fp)
    1534:	10800044 	addi	r2,r2,1
    1538:	e0bfdf15 	stw	r2,-132(fp)
    153c:	e0bfdf17 	ldw	r2,-132(fp)
    1540:	10800230 	cmpltui	r2,r2,8
    1544:	103fdd1e 	bne	r2,zero,14bc <__alt_mem_epcs_flash_controller+0xfdff84bc>
		REVERSE32(pctx->g[k], pctx->g[k]);
	}
#endif
	sha256_Transform(pctx->odig, pctx->g, pctx->g);
    1548:	e0fffc17 	ldw	r3,-16(fp)
    154c:	e0bffc17 	ldw	r2,-16(fp)
    1550:	11001804 	addi	r4,r2,96
    1554:	e0bffc17 	ldw	r2,-16(fp)
    1558:	10801804 	addi	r2,r2,96
    155c:	100d883a 	mov	r6,r2
    1560:	200b883a 	mov	r5,r4
    1564:	1809883a 	mov	r4,r3
    1568:	000339c0 	call	339c <sha256_Transform>
	memcpy(pctx->f, pctx->g, SHA256_DIGEST_LENGTH);
    156c:	e0bffc17 	ldw	r2,-16(fp)
    1570:	10c01004 	addi	r3,r2,64
    1574:	e0bffc17 	ldw	r2,-16(fp)
    1578:	10801804 	addi	r2,r2,96
    157c:	01800804 	movi	r6,32
    1580:	100b883a 	mov	r5,r2
    1584:	1809883a 	mov	r4,r3
    1588:	00064d00 	call	64d0 <memcpy>
	pctx->first = 1;
    158c:	e0bffc17 	ldw	r2,-16(fp)
    1590:	00c00044 	movi	r3,1
    1594:	10c02805 	stb	r3,160(r2)
}
    1598:	0001883a 	nop
    159c:	e037883a 	mov	sp,fp
    15a0:	dfc00117 	ldw	ra,4(sp)
    15a4:	df000017 	ldw	fp,0(sp)
    15a8:	dec00204 	addi	sp,sp,8
    15ac:	f800283a 	ret

000015b0 <pbkdf2_hmac_sha256_Update>:

void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
    15b0:	defffa04 	addi	sp,sp,-24
    15b4:	dfc00515 	stw	ra,20(sp)
    15b8:	df000415 	stw	fp,16(sp)
    15bc:	df000404 	addi	fp,sp,16
    15c0:	e13ffe15 	stw	r4,-8(fp)
    15c4:	e17fff15 	stw	r5,-4(fp)
	for (uint32_t i = pctx->first; i < iterations; i++) {
    15c8:	e0bffe17 	ldw	r2,-8(fp)
    15cc:	10802803 	ldbu	r2,160(r2)
    15d0:	10803fcc 	andi	r2,r2,255
    15d4:	1080201c 	xori	r2,r2,128
    15d8:	10bfe004 	addi	r2,r2,-128
    15dc:	e0bffc15 	stw	r2,-16(fp)
    15e0:	00003406 	br	16b4 <pbkdf2_hmac_sha256_Update+0x104>
		sha256_Transform(pctx->idig, pctx->g, pctx->g);
    15e4:	e0bffe17 	ldw	r2,-8(fp)
    15e8:	10c00804 	addi	r3,r2,32
    15ec:	e0bffe17 	ldw	r2,-8(fp)
    15f0:	11001804 	addi	r4,r2,96
    15f4:	e0bffe17 	ldw	r2,-8(fp)
    15f8:	10801804 	addi	r2,r2,96
    15fc:	100d883a 	mov	r6,r2
    1600:	200b883a 	mov	r5,r4
    1604:	1809883a 	mov	r4,r3
    1608:	000339c0 	call	339c <sha256_Transform>
		sha256_Transform(pctx->odig, pctx->g, pctx->g);
    160c:	e0fffe17 	ldw	r3,-8(fp)
    1610:	e0bffe17 	ldw	r2,-8(fp)
    1614:	11001804 	addi	r4,r2,96
    1618:	e0bffe17 	ldw	r2,-8(fp)
    161c:	10801804 	addi	r2,r2,96
    1620:	100d883a 	mov	r6,r2
    1624:	200b883a 	mov	r5,r4
    1628:	1809883a 	mov	r4,r3
    162c:	000339c0 	call	339c <sha256_Transform>
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
    1630:	e03ffd15 	stw	zero,-12(fp)
    1634:	00001906 	br	169c <pbkdf2_hmac_sha256_Update+0xec>
			pctx->f[j] ^= pctx->g[j];
    1638:	e0fffe17 	ldw	r3,-8(fp)
    163c:	e0bffd17 	ldw	r2,-12(fp)
    1640:	10800404 	addi	r2,r2,16
    1644:	1085883a 	add	r2,r2,r2
    1648:	1085883a 	add	r2,r2,r2
    164c:	1885883a 	add	r2,r3,r2
    1650:	10c00017 	ldw	r3,0(r2)
    1654:	e13ffe17 	ldw	r4,-8(fp)
    1658:	e0bffd17 	ldw	r2,-12(fp)
    165c:	10800604 	addi	r2,r2,24
    1660:	1085883a 	add	r2,r2,r2
    1664:	1085883a 	add	r2,r2,r2
    1668:	2085883a 	add	r2,r4,r2
    166c:	10800017 	ldw	r2,0(r2)
    1670:	1886f03a 	xor	r3,r3,r2
    1674:	e13ffe17 	ldw	r4,-8(fp)
    1678:	e0bffd17 	ldw	r2,-12(fp)
    167c:	10800404 	addi	r2,r2,16
    1680:	1085883a 	add	r2,r2,r2
    1684:	1085883a 	add	r2,r2,r2
    1688:	2085883a 	add	r2,r4,r2
    168c:	10c00015 	stw	r3,0(r2)
void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
		sha256_Transform(pctx->idig, pctx->g, pctx->g);
		sha256_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
    1690:	e0bffd17 	ldw	r2,-12(fp)
    1694:	10800044 	addi	r2,r2,1
    1698:	e0bffd15 	stw	r2,-12(fp)
    169c:	e0bffd17 	ldw	r2,-12(fp)
    16a0:	10800230 	cmpltui	r2,r2,8
    16a4:	103fe41e 	bne	r2,zero,1638 <__alt_mem_epcs_flash_controller+0xfdff8638>
	pctx->first = 1;
}

void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
    16a8:	e0bffc17 	ldw	r2,-16(fp)
    16ac:	10800044 	addi	r2,r2,1
    16b0:	e0bffc15 	stw	r2,-16(fp)
    16b4:	e0fffc17 	ldw	r3,-16(fp)
    16b8:	e0bfff17 	ldw	r2,-4(fp)
    16bc:	18bfc936 	bltu	r3,r2,15e4 <__alt_mem_epcs_flash_controller+0xfdff85e4>
		sha256_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
			pctx->f[j] ^= pctx->g[j];
		}
	}
	pctx->first = 0;
    16c0:	e0bffe17 	ldw	r2,-8(fp)
    16c4:	10002805 	stb	zero,160(r2)
}
    16c8:	0001883a 	nop
    16cc:	e037883a 	mov	sp,fp
    16d0:	dfc00117 	ldw	ra,4(sp)
    16d4:	df000017 	ldw	fp,0(sp)
    16d8:	dec00204 	addi	sp,sp,8
    16dc:	f800283a 	ret

000016e0 <pbkdf2_hmac_sha256_Final>:

void pbkdf2_hmac_sha256_Final(PBKDF2_HMAC_SHA256_CTX *pctx, uint8_t *key)
{
    16e0:	defffa04 	addi	sp,sp,-24
    16e4:	dfc00515 	stw	ra,20(sp)
    16e8:	df000415 	stw	fp,16(sp)
    16ec:	df000404 	addi	fp,sp,16
    16f0:	e13ffe15 	stw	r4,-8(fp)
    16f4:	e17fff15 	stw	r5,-4(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH/sizeof(uint32_t); k++) {
    16f8:	e03ffc15 	stw	zero,-16(fp)
    16fc:	00002006 	br	1780 <pbkdf2_hmac_sha256_Final+0xa0>
		REVERSE32(pctx->f[k], pctx->f[k]);
    1700:	e0fffe17 	ldw	r3,-8(fp)
    1704:	e0bffc17 	ldw	r2,-16(fp)
    1708:	10800404 	addi	r2,r2,16
    170c:	1085883a 	add	r2,r2,r2
    1710:	1085883a 	add	r2,r2,r2
    1714:	1885883a 	add	r2,r3,r2
    1718:	10800017 	ldw	r2,0(r2)
    171c:	e0bffd15 	stw	r2,-12(fp)
    1720:	e0bffd17 	ldw	r2,-12(fp)
    1724:	1004143a 	roli	r2,r2,16
    1728:	e0bffd15 	stw	r2,-12(fp)
    172c:	e0fffd17 	ldw	r3,-12(fp)
    1730:	00bfc074 	movhi	r2,65281
    1734:	10bfc004 	addi	r2,r2,-256
    1738:	1884703a 	and	r2,r3,r2
    173c:	1006d23a 	srli	r3,r2,8
    1740:	e13ffd17 	ldw	r4,-12(fp)
    1744:	00803ff4 	movhi	r2,255
    1748:	10803fc4 	addi	r2,r2,255
    174c:	2084703a 	and	r2,r4,r2
    1750:	1004923a 	slli	r2,r2,8
    1754:	1886b03a 	or	r3,r3,r2
    1758:	e13ffe17 	ldw	r4,-8(fp)
    175c:	e0bffc17 	ldw	r2,-16(fp)
    1760:	10800404 	addi	r2,r2,16
    1764:	1085883a 	add	r2,r2,r2
    1768:	1085883a 	add	r2,r2,r2
    176c:	2085883a 	add	r2,r4,r2
    1770:	10c00015 	stw	r3,0(r2)
}

void pbkdf2_hmac_sha256_Final(PBKDF2_HMAC_SHA256_CTX *pctx, uint8_t *key)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH/sizeof(uint32_t); k++) {
    1774:	e0bffc17 	ldw	r2,-16(fp)
    1778:	10800044 	addi	r2,r2,1
    177c:	e0bffc15 	stw	r2,-16(fp)
    1780:	e0bffc17 	ldw	r2,-16(fp)
    1784:	10800230 	cmpltui	r2,r2,8
    1788:	103fdd1e 	bne	r2,zero,1700 <__alt_mem_epcs_flash_controller+0xfdff8700>
		REVERSE32(pctx->f[k], pctx->f[k]);
	}
#endif
	memcpy(key, pctx->f, SHA256_DIGEST_LENGTH);
    178c:	e0bffe17 	ldw	r2,-8(fp)
    1790:	10801004 	addi	r2,r2,64
    1794:	01800804 	movi	r6,32
    1798:	100b883a 	mov	r5,r2
    179c:	e13fff17 	ldw	r4,-4(fp)
    17a0:	00064d00 	call	64d0 <memcpy>
	memzero(pctx, sizeof(PBKDF2_HMAC_SHA256_CTX));
    17a4:	01402904 	movi	r5,164
    17a8:	e13ffe17 	ldw	r4,-8(fp)
    17ac:	000134c0 	call	134c <memzero>
}
    17b0:	0001883a 	nop
    17b4:	e037883a 	mov	sp,fp
    17b8:	dfc00117 	ldw	ra,4(sp)
    17bc:	df000017 	ldw	fp,0(sp)
    17c0:	dec00204 	addi	sp,sp,8
    17c4:	f800283a 	ret

000017c8 <pbkdf2_hmac_sha256>:

void pbkdf2_hmac_sha256(const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t iterations, uint8_t *key, int keylen)
{
    17c8:	deffc304 	addi	sp,sp,-244
    17cc:	dfc03c15 	stw	ra,240(sp)
    17d0:	df003b15 	stw	fp,236(sp)
    17d4:	df003b04 	addi	fp,sp,236
    17d8:	e13ffc15 	stw	r4,-16(fp)
    17dc:	e17ffd15 	stw	r5,-12(fp)
    17e0:	e1bffe15 	stw	r6,-8(fp)
    17e4:	e1ffff15 	stw	r7,-4(fp)
	uint32_t last_block_size = keylen % SHA256_DIGEST_LENGTH;
    17e8:	e0c00417 	ldw	r3,16(fp)
    17ec:	00a00034 	movhi	r2,32768
    17f0:	108007c4 	addi	r2,r2,31
    17f4:	1884703a 	and	r2,r3,r2
    17f8:	1000040e 	bge	r2,zero,180c <pbkdf2_hmac_sha256+0x44>
    17fc:	10bfffc4 	addi	r2,r2,-1
    1800:	00fff804 	movi	r3,-32
    1804:	10c4b03a 	or	r2,r2,r3
    1808:	10800044 	addi	r2,r2,1
    180c:	e0bfc715 	stw	r2,-228(fp)
	uint32_t blocks_count = keylen / SHA256_DIGEST_LENGTH;
    1810:	e0800417 	ldw	r2,16(fp)
    1814:	1000010e 	bge	r2,zero,181c <pbkdf2_hmac_sha256+0x54>
    1818:	108007c4 	addi	r2,r2,31
    181c:	1005d17a 	srai	r2,r2,5
    1820:	e0bfc815 	stw	r2,-224(fp)
	if (last_block_size) {
    1824:	e0bfc717 	ldw	r2,-228(fp)
    1828:	10000426 	beq	r2,zero,183c <pbkdf2_hmac_sha256+0x74>
		blocks_count++;
    182c:	e0bfc817 	ldw	r2,-224(fp)
    1830:	10800044 	addi	r2,r2,1
    1834:	e0bfc815 	stw	r2,-224(fp)
    1838:	00000206 	br	1844 <pbkdf2_hmac_sha256+0x7c>
	} else {
		last_block_size = SHA256_DIGEST_LENGTH;
    183c:	00800804 	movi	r2,32
    1840:	e0bfc715 	stw	r2,-228(fp)
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    1844:	00800044 	movi	r2,1
    1848:	e0bfc915 	stw	r2,-220(fp)
    184c:	00003106 	br	1914 <pbkdf2_hmac_sha256+0x14c>
		PBKDF2_HMAC_SHA256_CTX pctx;
		pbkdf2_hmac_sha256_Init(&pctx, pass, passlen, salt, saltlen, blocknr);
    1850:	e0ffcb04 	addi	r3,fp,-212
    1854:	e0bfc917 	ldw	r2,-220(fp)
    1858:	d8800115 	stw	r2,4(sp)
    185c:	e0bfff17 	ldw	r2,-4(fp)
    1860:	d8800015 	stw	r2,0(sp)
    1864:	e1fffe17 	ldw	r7,-8(fp)
    1868:	e1bffd17 	ldw	r6,-12(fp)
    186c:	e17ffc17 	ldw	r5,-16(fp)
    1870:	1809883a 	mov	r4,r3
    1874:	000138c0 	call	138c <pbkdf2_hmac_sha256_Init>
		pbkdf2_hmac_sha256_Update(&pctx, iterations);
    1878:	e0bfcb04 	addi	r2,fp,-212
    187c:	e1400217 	ldw	r5,8(fp)
    1880:	1009883a 	mov	r4,r2
    1884:	00015b00 	call	15b0 <pbkdf2_hmac_sha256_Update>
		uint8_t digest[SHA256_DIGEST_LENGTH];
		pbkdf2_hmac_sha256_Final(&pctx, digest);
    1888:	e0fff404 	addi	r3,fp,-48
    188c:	e0bfcb04 	addi	r2,fp,-212
    1890:	180b883a 	mov	r5,r3
    1894:	1009883a 	mov	r4,r2
    1898:	00016e00 	call	16e0 <pbkdf2_hmac_sha256_Final>
		uint32_t key_offset = (blocknr - 1) * SHA256_DIGEST_LENGTH;
    189c:	e0ffc917 	ldw	r3,-220(fp)
    18a0:	00820034 	movhi	r2,2048
    18a4:	10bfffc4 	addi	r2,r2,-1
    18a8:	1885883a 	add	r2,r3,r2
    18ac:	1004917a 	slli	r2,r2,5
    18b0:	e0bfca15 	stw	r2,-216(fp)
		if (blocknr < blocks_count) {
    18b4:	e0ffc917 	ldw	r3,-220(fp)
    18b8:	e0bfc817 	ldw	r2,-224(fp)
    18bc:	18800a2e 	bgeu	r3,r2,18e8 <pbkdf2_hmac_sha256+0x120>
			memcpy(key + key_offset, digest, SHA256_DIGEST_LENGTH);
    18c0:	e0c00317 	ldw	r3,12(fp)
    18c4:	e0bfca17 	ldw	r2,-216(fp)
    18c8:	1885883a 	add	r2,r3,r2
    18cc:	1009883a 	mov	r4,r2
    18d0:	e0bff404 	addi	r2,fp,-48
    18d4:	00c00804 	movi	r3,32
    18d8:	180d883a 	mov	r6,r3
    18dc:	100b883a 	mov	r5,r2
    18e0:	00064d00 	call	64d0 <memcpy>
    18e4:	00000806 	br	1908 <pbkdf2_hmac_sha256+0x140>
		} else {
			memcpy(key + key_offset, digest, last_block_size);
    18e8:	e0c00317 	ldw	r3,12(fp)
    18ec:	e0bfca17 	ldw	r2,-216(fp)
    18f0:	1885883a 	add	r2,r3,r2
    18f4:	e0fff404 	addi	r3,fp,-48
    18f8:	e1bfc717 	ldw	r6,-228(fp)
    18fc:	180b883a 	mov	r5,r3
    1900:	1009883a 	mov	r4,r2
    1904:	00064d00 	call	64d0 <memcpy>
	if (last_block_size) {
		blocks_count++;
	} else {
		last_block_size = SHA256_DIGEST_LENGTH;
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    1908:	e0bfc917 	ldw	r2,-220(fp)
    190c:	10800044 	addi	r2,r2,1
    1910:	e0bfc915 	stw	r2,-220(fp)
    1914:	e0bfc917 	ldw	r2,-220(fp)
    1918:	e0ffc817 	ldw	r3,-224(fp)
    191c:	18bfcc2e 	bgeu	r3,r2,1850 <__alt_mem_epcs_flash_controller+0xfdff8850>
			memcpy(key + key_offset, digest, SHA256_DIGEST_LENGTH);
		} else {
			memcpy(key + key_offset, digest, last_block_size);
		}
	}
}
    1920:	0001883a 	nop
    1924:	e037883a 	mov	sp,fp
    1928:	dfc00117 	ldw	ra,4(sp)
    192c:	df000017 	ldw	fp,0(sp)
    1930:	dec00204 	addi	sp,sp,8
    1934:	f800283a 	ret

00001938 <pbkdf2_hmac_sha512_Init>:

void pbkdf2_hmac_sha512_Init(PBKDF2_HMAC_SHA512_CTX *pctx, const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t blocknr)
{
    1938:	deffae04 	addi	sp,sp,-328
    193c:	dfc05115 	stw	ra,324(sp)
    1940:	df005015 	stw	fp,320(sp)
    1944:	ddc04f15 	stw	r23,316(sp)
    1948:	dd804e15 	stw	r22,312(sp)
    194c:	dd404d15 	stw	r21,308(sp)
    1950:	dd004c15 	stw	r20,304(sp)
    1954:	dcc04b15 	stw	r19,300(sp)
    1958:	dc804a15 	stw	r18,296(sp)
    195c:	dc404915 	stw	r17,292(sp)
    1960:	dc004815 	stw	r16,288(sp)
    1964:	df005004 	addi	fp,sp,320
    1968:	e13fe815 	stw	r4,-96(fp)
    196c:	e17fe915 	stw	r5,-92(fp)
    1970:	e1bfea15 	stw	r6,-88(fp)
    1974:	e1ffeb15 	stw	r7,-84(fp)
	SHA512_CTX ctx;
#if BYTE_ORDER == LITTLE_ENDIAN
	REVERSE32(blocknr, blocknr);
    1978:	e0800317 	ldw	r2,12(fp)
    197c:	e0bfb115 	stw	r2,-316(fp)
    1980:	e0bfb117 	ldw	r2,-316(fp)
    1984:	1004143a 	roli	r2,r2,16
    1988:	e0bfb115 	stw	r2,-316(fp)
    198c:	e0ffb117 	ldw	r3,-316(fp)
    1990:	00bfc074 	movhi	r2,65281
    1994:	10bfc004 	addi	r2,r2,-256
    1998:	1884703a 	and	r2,r3,r2
    199c:	1006d23a 	srli	r3,r2,8
    19a0:	e13fb117 	ldw	r4,-316(fp)
    19a4:	00803ff4 	movhi	r2,255
    19a8:	10803fc4 	addi	r2,r2,255
    19ac:	2084703a 	and	r2,r4,r2
    19b0:	1004923a 	slli	r2,r2,8
    19b4:	1884b03a 	or	r2,r3,r2
    19b8:	e0800315 	stw	r2,12(fp)
#endif

	hmac_sha512_prepare(pass, passlen, pctx->odig, pctx->idig);
    19bc:	e0ffea17 	ldw	r3,-88(fp)
    19c0:	e13fe817 	ldw	r4,-96(fp)
    19c4:	e0bfe817 	ldw	r2,-96(fp)
    19c8:	10801004 	addi	r2,r2,64
    19cc:	100f883a 	mov	r7,r2
    19d0:	200d883a 	mov	r6,r4
    19d4:	180b883a 	mov	r5,r3
    19d8:	e13fe917 	ldw	r4,-92(fp)
    19dc:	0000fec0 	call	fec <hmac_sha512_prepare>
	memset(pctx->g, 0, sizeof(pctx->g));
    19e0:	e0bfe817 	ldw	r2,-96(fp)
    19e4:	10803004 	addi	r2,r2,192
    19e8:	01802004 	movi	r6,128
    19ec:	000b883a 	mov	r5,zero
    19f0:	1009883a 	mov	r4,r2
    19f4:	00064f80 	call	64f8 <memset>
	pctx->g[8] = 0x8000000000000000;
    19f8:	e0bfe817 	ldw	r2,-96(fp)
    19fc:	10004015 	stw	zero,256(r2)
    1a00:	00e00034 	movhi	r3,32768
    1a04:	10c04115 	stw	r3,260(r2)
	pctx->g[15] = (SHA512_BLOCK_LENGTH + SHA512_DIGEST_LENGTH) * 8;
    1a08:	e0bfe817 	ldw	r2,-96(fp)
    1a0c:	00c18004 	movi	r3,1536
    1a10:	10c04e15 	stw	r3,312(r2)
    1a14:	10004f15 	stw	zero,316(r2)

	memcpy (ctx.state, pctx->idig, sizeof(pctx->idig));
    1a18:	e0bfe817 	ldw	r2,-96(fp)
    1a1c:	10c01004 	addi	r3,r2,64
    1a20:	e0bfb404 	addi	r2,fp,-304
    1a24:	01801004 	movi	r6,64
    1a28:	180b883a 	mov	r5,r3
    1a2c:	1009883a 	mov	r4,r2
    1a30:	00064d00 	call	64d0 <memcpy>
	ctx.bitcount[0] = SHA512_BLOCK_LENGTH * 8;
    1a34:	00810004 	movi	r2,1024
    1a38:	e0bfc415 	stw	r2,-240(fp)
    1a3c:	e03fc515 	stw	zero,-236(fp)
	ctx.bitcount[1] = 0;
    1a40:	e03fc615 	stw	zero,-232(fp)
    1a44:	e03fc715 	stw	zero,-228(fp)
	sha512_Update(&ctx, salt, saltlen);
    1a48:	e0c00217 	ldw	r3,8(fp)
    1a4c:	e0bfb404 	addi	r2,fp,-304
    1a50:	180d883a 	mov	r6,r3
    1a54:	e17feb17 	ldw	r5,-84(fp)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	00051f80 	call	51f8 <sha512_Update>
	sha512_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
    1a60:	e0c00304 	addi	r3,fp,12
    1a64:	e0bfb404 	addi	r2,fp,-304
    1a68:	01800104 	movi	r6,4
    1a6c:	180b883a 	mov	r5,r3
    1a70:	1009883a 	mov	r4,r2
    1a74:	00051f80 	call	51f8 <sha512_Update>
	sha512_Final(&ctx, (uint8_t*)pctx->g);
    1a78:	e0bfe817 	ldw	r2,-96(fp)
    1a7c:	10c03004 	addi	r3,r2,192
    1a80:	e0bfb404 	addi	r2,fp,-304
    1a84:	180b883a 	mov	r5,r3
    1a88:	1009883a 	mov	r4,r2
    1a8c:	0005f740 	call	5f74 <sha512_Final>
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH / sizeof(uint64_t); k++) {
    1a90:	e03fb015 	stw	zero,-320(fp)
    1a94:	00006106 	br	1c1c <pbkdf2_hmac_sha512_Init+0x2e4>
		REVERSE64(pctx->g[k], pctx->g[k]);
    1a98:	e0ffe817 	ldw	r3,-96(fp)
    1a9c:	e0bfb017 	ldw	r2,-320(fp)
    1aa0:	10800604 	addi	r2,r2,24
    1aa4:	100490fa 	slli	r2,r2,3
    1aa8:	1885883a 	add	r2,r3,r2
    1aac:	10c00017 	ldw	r3,0(r2)
    1ab0:	e0ffb215 	stw	r3,-312(fp)
    1ab4:	10800117 	ldw	r2,4(r2)
    1ab8:	e0bfb315 	stw	r2,-308(fp)
    1abc:	e0bfb317 	ldw	r2,-308(fp)
    1ac0:	e0bff615 	stw	r2,-40(fp)
    1ac4:	e0ffb217 	ldw	r3,-312(fp)
    1ac8:	e0fff715 	stw	r3,-36(fp)
    1acc:	e0bff617 	ldw	r2,-40(fp)
    1ad0:	e0bfb215 	stw	r2,-312(fp)
    1ad4:	e0fff717 	ldw	r3,-36(fp)
    1ad8:	e0ffb315 	stw	r3,-308(fp)
    1adc:	e0ffb217 	ldw	r3,-312(fp)
    1ae0:	00bfc074 	movhi	r2,65281
    1ae4:	10bfc004 	addi	r2,r2,-256
    1ae8:	1884703a 	and	r2,r3,r2
    1aec:	e0bfec15 	stw	r2,-80(fp)
    1af0:	e0ffb317 	ldw	r3,-308(fp)
    1af4:	00bfc074 	movhi	r2,65281
    1af8:	10bfc004 	addi	r2,r2,-256
    1afc:	1884703a 	and	r2,r3,r2
    1b00:	e0bfed15 	stw	r2,-76(fp)
    1b04:	e0ffed17 	ldw	r3,-76(fp)
    1b08:	1804963a 	slli	r2,r3,24
    1b0c:	e0ffec17 	ldw	r3,-80(fp)
    1b10:	1820d23a 	srli	r16,r3,8
    1b14:	1420b03a 	or	r16,r2,r16
    1b18:	e0bfed17 	ldw	r2,-76(fp)
    1b1c:	1022d23a 	srli	r17,r2,8
    1b20:	e0ffb217 	ldw	r3,-312(fp)
    1b24:	00803ff4 	movhi	r2,255
    1b28:	10803fc4 	addi	r2,r2,255
    1b2c:	1884703a 	and	r2,r3,r2
    1b30:	e0bfee15 	stw	r2,-72(fp)
    1b34:	e0ffb317 	ldw	r3,-308(fp)
    1b38:	00803ff4 	movhi	r2,255
    1b3c:	10803fc4 	addi	r2,r2,255
    1b40:	1884703a 	and	r2,r3,r2
    1b44:	e0bfef15 	stw	r2,-68(fp)
    1b48:	e0ffee17 	ldw	r3,-72(fp)
    1b4c:	1804d63a 	srli	r2,r3,24
    1b50:	e0ffef17 	ldw	r3,-68(fp)
    1b54:	1826923a 	slli	r19,r3,8
    1b58:	14e6b03a 	or	r19,r2,r19
    1b5c:	e0bfee17 	ldw	r2,-72(fp)
    1b60:	1024923a 	slli	r18,r2,8
    1b64:	8484b03a 	or	r2,r16,r18
    1b68:	e0bfb215 	stw	r2,-312(fp)
    1b6c:	8cc4b03a 	or	r2,r17,r19
    1b70:	e0bfb315 	stw	r2,-308(fp)
    1b74:	e0bfb217 	ldw	r2,-312(fp)
    1b78:	10bfffec 	andhi	r2,r2,65535
    1b7c:	e0bff015 	stw	r2,-64(fp)
    1b80:	e0bfb317 	ldw	r2,-308(fp)
    1b84:	10bfffec 	andhi	r2,r2,65535
    1b88:	e0bff115 	stw	r2,-60(fp)
    1b8c:	e0fff117 	ldw	r3,-60(fp)
    1b90:	1804943a 	slli	r2,r3,16
    1b94:	e0fff017 	ldw	r3,-64(fp)
    1b98:	1828d43a 	srli	r20,r3,16
    1b9c:	1528b03a 	or	r20,r2,r20
    1ba0:	e0bff117 	ldw	r2,-60(fp)
    1ba4:	102ad43a 	srli	r21,r2,16
    1ba8:	e0bfb217 	ldw	r2,-312(fp)
    1bac:	10bfffcc 	andi	r2,r2,65535
    1bb0:	e0bff215 	stw	r2,-56(fp)
    1bb4:	e0bfb317 	ldw	r2,-308(fp)
    1bb8:	10bfffcc 	andi	r2,r2,65535
    1bbc:	e0bff315 	stw	r2,-52(fp)
    1bc0:	e0fff217 	ldw	r3,-56(fp)
    1bc4:	1804d43a 	srli	r2,r3,16
    1bc8:	e0fff317 	ldw	r3,-52(fp)
    1bcc:	182e943a 	slli	r23,r3,16
    1bd0:	15eeb03a 	or	r23,r2,r23
    1bd4:	e0bff217 	ldw	r2,-56(fp)
    1bd8:	102c943a 	slli	r22,r2,16
    1bdc:	a586b03a 	or	r3,r20,r22
    1be0:	e0fff415 	stw	r3,-48(fp)
    1be4:	adc4b03a 	or	r2,r21,r23
    1be8:	e0bff515 	stw	r2,-44(fp)
    1bec:	e0ffe817 	ldw	r3,-96(fp)
    1bf0:	e0bfb017 	ldw	r2,-320(fp)
    1bf4:	10800604 	addi	r2,r2,24
    1bf8:	100490fa 	slli	r2,r2,3
    1bfc:	1885883a 	add	r2,r3,r2
    1c00:	e0fff417 	ldw	r3,-48(fp)
    1c04:	10c00015 	stw	r3,0(r2)
    1c08:	e0fff517 	ldw	r3,-44(fp)
    1c0c:	10c00115 	stw	r3,4(r2)
	ctx.bitcount[1] = 0;
	sha512_Update(&ctx, salt, saltlen);
	sha512_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
	sha512_Final(&ctx, (uint8_t*)pctx->g);
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH / sizeof(uint64_t); k++) {
    1c10:	e0bfb017 	ldw	r2,-320(fp)
    1c14:	10800044 	addi	r2,r2,1
    1c18:	e0bfb015 	stw	r2,-320(fp)
    1c1c:	e0bfb017 	ldw	r2,-320(fp)
    1c20:	10800230 	cmpltui	r2,r2,8
    1c24:	103f9c1e 	bne	r2,zero,1a98 <__alt_mem_epcs_flash_controller+0xfdff8a98>
		REVERSE64(pctx->g[k], pctx->g[k]);
	}
#endif
	sha512_Transform(pctx->odig, pctx->g, pctx->g);
    1c28:	e0ffe817 	ldw	r3,-96(fp)
    1c2c:	e0bfe817 	ldw	r2,-96(fp)
    1c30:	11003004 	addi	r4,r2,192
    1c34:	e0bfe817 	ldw	r2,-96(fp)
    1c38:	10803004 	addi	r2,r2,192
    1c3c:	100d883a 	mov	r6,r2
    1c40:	200b883a 	mov	r5,r4
    1c44:	1809883a 	mov	r4,r3
    1c48:	00042d80 	call	42d8 <sha512_Transform>
	memcpy(pctx->f, pctx->g, SHA512_DIGEST_LENGTH);
    1c4c:	e0bfe817 	ldw	r2,-96(fp)
    1c50:	10c02004 	addi	r3,r2,128
    1c54:	e0bfe817 	ldw	r2,-96(fp)
    1c58:	10803004 	addi	r2,r2,192
    1c5c:	01801004 	movi	r6,64
    1c60:	100b883a 	mov	r5,r2
    1c64:	1809883a 	mov	r4,r3
    1c68:	00064d00 	call	64d0 <memcpy>
	pctx->first = 1;
    1c6c:	e0bfe817 	ldw	r2,-96(fp)
    1c70:	00c00044 	movi	r3,1
    1c74:	10c05005 	stb	r3,320(r2)
}
    1c78:	0001883a 	nop
    1c7c:	e6fff804 	addi	sp,fp,-32
    1c80:	dfc00917 	ldw	ra,36(sp)
    1c84:	df000817 	ldw	fp,32(sp)
    1c88:	ddc00717 	ldw	r23,28(sp)
    1c8c:	dd800617 	ldw	r22,24(sp)
    1c90:	dd400517 	ldw	r21,20(sp)
    1c94:	dd000417 	ldw	r20,16(sp)
    1c98:	dcc00317 	ldw	r19,12(sp)
    1c9c:	dc800217 	ldw	r18,8(sp)
    1ca0:	dc400117 	ldw	r17,4(sp)
    1ca4:	dc000017 	ldw	r16,0(sp)
    1ca8:	dec00a04 	addi	sp,sp,40
    1cac:	f800283a 	ret

00001cb0 <pbkdf2_hmac_sha512_Update>:

void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
    1cb0:	defff804 	addi	sp,sp,-32
    1cb4:	dfc00715 	stw	ra,28(sp)
    1cb8:	df000615 	stw	fp,24(sp)
    1cbc:	dc400515 	stw	r17,20(sp)
    1cc0:	dc000415 	stw	r16,16(sp)
    1cc4:	df000604 	addi	fp,sp,24
    1cc8:	e13ffc15 	stw	r4,-16(fp)
    1ccc:	e17ffd15 	stw	r5,-12(fp)
	for (uint32_t i = pctx->first; i < iterations; i++) {
    1cd0:	e0bffc17 	ldw	r2,-16(fp)
    1cd4:	10805003 	ldbu	r2,320(r2)
    1cd8:	10803fcc 	andi	r2,r2,255
    1cdc:	1080201c 	xori	r2,r2,128
    1ce0:	10bfe004 	addi	r2,r2,-128
    1ce4:	e0bffa15 	stw	r2,-24(fp)
    1ce8:	00003506 	br	1dc0 <pbkdf2_hmac_sha512_Update+0x110>
		sha512_Transform(pctx->idig, pctx->g, pctx->g);
    1cec:	e0bffc17 	ldw	r2,-16(fp)
    1cf0:	10c01004 	addi	r3,r2,64
    1cf4:	e0bffc17 	ldw	r2,-16(fp)
    1cf8:	11003004 	addi	r4,r2,192
    1cfc:	e0bffc17 	ldw	r2,-16(fp)
    1d00:	10803004 	addi	r2,r2,192
    1d04:	100d883a 	mov	r6,r2
    1d08:	200b883a 	mov	r5,r4
    1d0c:	1809883a 	mov	r4,r3
    1d10:	00042d80 	call	42d8 <sha512_Transform>
		sha512_Transform(pctx->odig, pctx->g, pctx->g);
    1d14:	e0fffc17 	ldw	r3,-16(fp)
    1d18:	e0bffc17 	ldw	r2,-16(fp)
    1d1c:	11003004 	addi	r4,r2,192
    1d20:	e0bffc17 	ldw	r2,-16(fp)
    1d24:	10803004 	addi	r2,r2,192
    1d28:	100d883a 	mov	r6,r2
    1d2c:	200b883a 	mov	r5,r4
    1d30:	1809883a 	mov	r4,r3
    1d34:	00042d80 	call	42d8 <sha512_Transform>
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
    1d38:	e03ffb15 	stw	zero,-20(fp)
    1d3c:	00001a06 	br	1da8 <pbkdf2_hmac_sha512_Update+0xf8>
			pctx->f[j] ^= pctx->g[j];
    1d40:	e0fffc17 	ldw	r3,-16(fp)
    1d44:	e0bffb17 	ldw	r2,-20(fp)
    1d48:	10800404 	addi	r2,r2,16
    1d4c:	100490fa 	slli	r2,r2,3
    1d50:	1885883a 	add	r2,r3,r2
    1d54:	11000017 	ldw	r4,0(r2)
    1d58:	11400117 	ldw	r5,4(r2)
    1d5c:	e0fffc17 	ldw	r3,-16(fp)
    1d60:	e0bffb17 	ldw	r2,-20(fp)
    1d64:	10800604 	addi	r2,r2,24
    1d68:	100490fa 	slli	r2,r2,3
    1d6c:	188d883a 	add	r6,r3,r2
    1d70:	30800017 	ldw	r2,0(r6)
    1d74:	30c00117 	ldw	r3,4(r6)
    1d78:	20a0f03a 	xor	r16,r4,r2
    1d7c:	28e2f03a 	xor	r17,r5,r3
    1d80:	e0fffc17 	ldw	r3,-16(fp)
    1d84:	e0bffb17 	ldw	r2,-20(fp)
    1d88:	10800404 	addi	r2,r2,16
    1d8c:	100490fa 	slli	r2,r2,3
    1d90:	1885883a 	add	r2,r3,r2
    1d94:	14000015 	stw	r16,0(r2)
    1d98:	14400115 	stw	r17,4(r2)
void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
		sha512_Transform(pctx->idig, pctx->g, pctx->g);
		sha512_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
    1d9c:	e0bffb17 	ldw	r2,-20(fp)
    1da0:	10800044 	addi	r2,r2,1
    1da4:	e0bffb15 	stw	r2,-20(fp)
    1da8:	e0bffb17 	ldw	r2,-20(fp)
    1dac:	10800230 	cmpltui	r2,r2,8
    1db0:	103fe31e 	bne	r2,zero,1d40 <__alt_mem_epcs_flash_controller+0xfdff8d40>
	pctx->first = 1;
}

void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
    1db4:	e0bffa17 	ldw	r2,-24(fp)
    1db8:	10800044 	addi	r2,r2,1
    1dbc:	e0bffa15 	stw	r2,-24(fp)
    1dc0:	e0fffa17 	ldw	r3,-24(fp)
    1dc4:	e0bffd17 	ldw	r2,-12(fp)
    1dc8:	18bfc836 	bltu	r3,r2,1cec <__alt_mem_epcs_flash_controller+0xfdff8cec>
		sha512_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
			pctx->f[j] ^= pctx->g[j];
		}
	}
	pctx->first = 0;
    1dcc:	e0bffc17 	ldw	r2,-16(fp)
    1dd0:	10005005 	stb	zero,320(r2)
}
    1dd4:	0001883a 	nop
    1dd8:	e6fffe04 	addi	sp,fp,-8
    1ddc:	dfc00317 	ldw	ra,12(sp)
    1de0:	df000217 	ldw	fp,8(sp)
    1de4:	dc400117 	ldw	r17,4(sp)
    1de8:	dc000017 	ldw	r16,0(sp)
    1dec:	dec00404 	addi	sp,sp,16
    1df0:	f800283a 	ret

00001df4 <pbkdf2_hmac_sha512_Final>:

void pbkdf2_hmac_sha512_Final(PBKDF2_HMAC_SHA512_CTX *pctx, uint8_t *key)
{
    1df4:	defff104 	addi	sp,sp,-60
    1df8:	dfc00e15 	stw	ra,56(sp)
    1dfc:	df000d15 	stw	fp,52(sp)
    1e00:	ddc00c15 	stw	r23,48(sp)
    1e04:	dd800b15 	stw	r22,44(sp)
    1e08:	dd400a15 	stw	r21,40(sp)
    1e0c:	dd000915 	stw	r20,36(sp)
    1e10:	dcc00815 	stw	r19,32(sp)
    1e14:	dc800715 	stw	r18,28(sp)
    1e18:	dc400615 	stw	r17,24(sp)
    1e1c:	dc000515 	stw	r16,20(sp)
    1e20:	df000d04 	addi	fp,sp,52
    1e24:	e13ff615 	stw	r4,-40(fp)
    1e28:	e17ff715 	stw	r5,-36(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH/sizeof(uint64_t); k++) {
    1e2c:	e03ff315 	stw	zero,-52(fp)
    1e30:	00004506 	br	1f48 <pbkdf2_hmac_sha512_Final+0x154>
		REVERSE64(pctx->f[k], pctx->f[k]);
    1e34:	e17ff617 	ldw	r5,-40(fp)
    1e38:	e13ff317 	ldw	r4,-52(fp)
    1e3c:	21000404 	addi	r4,r4,16
    1e40:	200890fa 	slli	r4,r4,3
    1e44:	2909883a 	add	r4,r5,r4
    1e48:	21400017 	ldw	r5,0(r4)
    1e4c:	e17ff415 	stw	r5,-48(fp)
    1e50:	21000117 	ldw	r4,4(r4)
    1e54:	e13ff515 	stw	r4,-44(fp)
    1e58:	e5bff517 	ldw	r22,-44(fp)
    1e5c:	e5fff417 	ldw	r23,-48(fp)
    1e60:	e5bff415 	stw	r22,-48(fp)
    1e64:	e5fff515 	stw	r23,-44(fp)
    1e68:	e17ff417 	ldw	r5,-48(fp)
    1e6c:	013fc074 	movhi	r4,65281
    1e70:	213fc004 	addi	r4,r4,-256
    1e74:	2918703a 	and	r12,r5,r4
    1e78:	e17ff517 	ldw	r5,-44(fp)
    1e7c:	013fc074 	movhi	r4,65281
    1e80:	213fc004 	addi	r4,r4,-256
    1e84:	291a703a 	and	r13,r5,r4
    1e88:	6808963a 	slli	r4,r13,24
    1e8c:	6004d23a 	srli	r2,r12,8
    1e90:	2084b03a 	or	r2,r4,r2
    1e94:	6806d23a 	srli	r3,r13,8
    1e98:	e17ff417 	ldw	r5,-48(fp)
    1e9c:	01003ff4 	movhi	r4,255
    1ea0:	21003fc4 	addi	r4,r4,255
    1ea4:	291c703a 	and	r14,r5,r4
    1ea8:	e17ff517 	ldw	r5,-44(fp)
    1eac:	01003ff4 	movhi	r4,255
    1eb0:	21003fc4 	addi	r4,r4,255
    1eb4:	291e703a 	and	r15,r5,r4
    1eb8:	7008d63a 	srli	r4,r14,24
    1ebc:	780e923a 	slli	r7,r15,8
    1ec0:	21ceb03a 	or	r7,r4,r7
    1ec4:	700c923a 	slli	r6,r14,8
    1ec8:	1188b03a 	or	r4,r2,r6
    1ecc:	e13ff415 	stw	r4,-48(fp)
    1ed0:	19c8b03a 	or	r4,r3,r7
    1ed4:	e13ff515 	stw	r4,-44(fp)
    1ed8:	e13ff417 	ldw	r4,-48(fp)
    1edc:	243fffec 	andhi	r16,r4,65535
    1ee0:	e13ff517 	ldw	r4,-44(fp)
    1ee4:	247fffec 	andhi	r17,r4,65535
    1ee8:	8808943a 	slli	r4,r17,16
    1eec:	8010d43a 	srli	r8,r16,16
    1ef0:	2210b03a 	or	r8,r4,r8
    1ef4:	8812d43a 	srli	r9,r17,16
    1ef8:	e13ff417 	ldw	r4,-48(fp)
    1efc:	24bfffcc 	andi	r18,r4,65535
    1f00:	e13ff517 	ldw	r4,-44(fp)
    1f04:	24ffffcc 	andi	r19,r4,65535
    1f08:	9008d43a 	srli	r4,r18,16
    1f0c:	9816943a 	slli	r11,r19,16
    1f10:	22d6b03a 	or	r11,r4,r11
    1f14:	9014943a 	slli	r10,r18,16
    1f18:	42a8b03a 	or	r20,r8,r10
    1f1c:	4aeab03a 	or	r21,r9,r11
    1f20:	e17ff617 	ldw	r5,-40(fp)
    1f24:	e13ff317 	ldw	r4,-52(fp)
    1f28:	21000404 	addi	r4,r4,16
    1f2c:	200890fa 	slli	r4,r4,3
    1f30:	2909883a 	add	r4,r5,r4
    1f34:	25000015 	stw	r20,0(r4)
    1f38:	25400115 	stw	r21,4(r4)
}

void pbkdf2_hmac_sha512_Final(PBKDF2_HMAC_SHA512_CTX *pctx, uint8_t *key)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH/sizeof(uint64_t); k++) {
    1f3c:	e13ff317 	ldw	r4,-52(fp)
    1f40:	21000044 	addi	r4,r4,1
    1f44:	e13ff315 	stw	r4,-52(fp)
    1f48:	e13ff317 	ldw	r4,-52(fp)
    1f4c:	21000230 	cmpltui	r4,r4,8
    1f50:	203fb81e 	bne	r4,zero,1e34 <__alt_mem_epcs_flash_controller+0xfdff8e34>
		REVERSE64(pctx->f[k], pctx->f[k]);
	}
#endif
	memcpy(key, pctx->f, SHA512_DIGEST_LENGTH);
    1f54:	e0bff617 	ldw	r2,-40(fp)
    1f58:	10802004 	addi	r2,r2,128
    1f5c:	01801004 	movi	r6,64
    1f60:	100b883a 	mov	r5,r2
    1f64:	e13ff717 	ldw	r4,-36(fp)
    1f68:	00064d00 	call	64d0 <memcpy>
	memzero(pctx, sizeof(PBKDF2_HMAC_SHA512_CTX));
    1f6c:	01405104 	movi	r5,324
    1f70:	e13ff617 	ldw	r4,-40(fp)
    1f74:	000134c0 	call	134c <memzero>
}
    1f78:	0001883a 	nop
    1f7c:	e6fff804 	addi	sp,fp,-32
    1f80:	dfc00917 	ldw	ra,36(sp)
    1f84:	df000817 	ldw	fp,32(sp)
    1f88:	ddc00717 	ldw	r23,28(sp)
    1f8c:	dd800617 	ldw	r22,24(sp)
    1f90:	dd400517 	ldw	r21,20(sp)
    1f94:	dd000417 	ldw	r20,16(sp)
    1f98:	dcc00317 	ldw	r19,12(sp)
    1f9c:	dc800217 	ldw	r18,8(sp)
    1fa0:	dc400117 	ldw	r17,4(sp)
    1fa4:	dc000017 	ldw	r16,0(sp)
    1fa8:	dec00a04 	addi	sp,sp,40
    1fac:	f800283a 	ret

00001fb0 <pbkdf2_hmac_sha512>:

void pbkdf2_hmac_sha512(const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t iterations, uint8_t *key, int keylen)
{
    1fb0:	deff9304 	addi	sp,sp,-436
    1fb4:	dfc06c15 	stw	ra,432(sp)
    1fb8:	df006b15 	stw	fp,428(sp)
    1fbc:	df006b04 	addi	fp,sp,428
    1fc0:	e13ffc15 	stw	r4,-16(fp)
    1fc4:	e17ffd15 	stw	r5,-12(fp)
    1fc8:	e1bffe15 	stw	r6,-8(fp)
    1fcc:	e1ffff15 	stw	r7,-4(fp)
	uint32_t last_block_size = keylen % SHA512_DIGEST_LENGTH;
    1fd0:	e0c00417 	ldw	r3,16(fp)
    1fd4:	00a00034 	movhi	r2,32768
    1fd8:	10800fc4 	addi	r2,r2,63
    1fdc:	1884703a 	and	r2,r3,r2
    1fe0:	1000040e 	bge	r2,zero,1ff4 <pbkdf2_hmac_sha512+0x44>
    1fe4:	10bfffc4 	addi	r2,r2,-1
    1fe8:	00fff004 	movi	r3,-64
    1fec:	10c4b03a 	or	r2,r2,r3
    1ff0:	10800044 	addi	r2,r2,1
    1ff4:	e0bf9715 	stw	r2,-420(fp)
	uint32_t blocks_count = keylen / SHA512_DIGEST_LENGTH;
    1ff8:	e0800417 	ldw	r2,16(fp)
    1ffc:	1000010e 	bge	r2,zero,2004 <pbkdf2_hmac_sha512+0x54>
    2000:	10800fc4 	addi	r2,r2,63
    2004:	1005d1ba 	srai	r2,r2,6
    2008:	e0bf9815 	stw	r2,-416(fp)
	if (last_block_size) {
    200c:	e0bf9717 	ldw	r2,-420(fp)
    2010:	10000426 	beq	r2,zero,2024 <pbkdf2_hmac_sha512+0x74>
		blocks_count++;
    2014:	e0bf9817 	ldw	r2,-416(fp)
    2018:	10800044 	addi	r2,r2,1
    201c:	e0bf9815 	stw	r2,-416(fp)
    2020:	00000206 	br	202c <pbkdf2_hmac_sha512+0x7c>
	} else {
		last_block_size = SHA512_DIGEST_LENGTH;
    2024:	00801004 	movi	r2,64
    2028:	e0bf9715 	stw	r2,-420(fp)
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    202c:	00800044 	movi	r2,1
    2030:	e0bf9915 	stw	r2,-412(fp)
    2034:	00003106 	br	20fc <pbkdf2_hmac_sha512+0x14c>
		PBKDF2_HMAC_SHA512_CTX pctx;
		pbkdf2_hmac_sha512_Init(&pctx, pass, passlen, salt, saltlen, blocknr);
    2038:	e0ff9b04 	addi	r3,fp,-404
    203c:	e0bf9917 	ldw	r2,-412(fp)
    2040:	d8800115 	stw	r2,4(sp)
    2044:	e0bfff17 	ldw	r2,-4(fp)
    2048:	d8800015 	stw	r2,0(sp)
    204c:	e1fffe17 	ldw	r7,-8(fp)
    2050:	e1bffd17 	ldw	r6,-12(fp)
    2054:	e17ffc17 	ldw	r5,-16(fp)
    2058:	1809883a 	mov	r4,r3
    205c:	00019380 	call	1938 <pbkdf2_hmac_sha512_Init>
		pbkdf2_hmac_sha512_Update(&pctx, iterations);
    2060:	e0bf9b04 	addi	r2,fp,-404
    2064:	e1400217 	ldw	r5,8(fp)
    2068:	1009883a 	mov	r4,r2
    206c:	0001cb00 	call	1cb0 <pbkdf2_hmac_sha512_Update>
		uint8_t digest[SHA512_DIGEST_LENGTH];
		pbkdf2_hmac_sha512_Final(&pctx, digest);
    2070:	e0ffec04 	addi	r3,fp,-80
    2074:	e0bf9b04 	addi	r2,fp,-404
    2078:	180b883a 	mov	r5,r3
    207c:	1009883a 	mov	r4,r2
    2080:	0001df40 	call	1df4 <pbkdf2_hmac_sha512_Final>
		uint32_t key_offset = (blocknr - 1) * SHA512_DIGEST_LENGTH;
    2084:	e0ff9917 	ldw	r3,-412(fp)
    2088:	00810034 	movhi	r2,1024
    208c:	10bfffc4 	addi	r2,r2,-1
    2090:	1885883a 	add	r2,r3,r2
    2094:	100491ba 	slli	r2,r2,6
    2098:	e0bf9a15 	stw	r2,-408(fp)
		if (blocknr < blocks_count) {
    209c:	e0ff9917 	ldw	r3,-412(fp)
    20a0:	e0bf9817 	ldw	r2,-416(fp)
    20a4:	18800a2e 	bgeu	r3,r2,20d0 <pbkdf2_hmac_sha512+0x120>
			memcpy(key + key_offset, digest, SHA512_DIGEST_LENGTH);
    20a8:	e0c00317 	ldw	r3,12(fp)
    20ac:	e0bf9a17 	ldw	r2,-408(fp)
    20b0:	1885883a 	add	r2,r3,r2
    20b4:	1009883a 	mov	r4,r2
    20b8:	e0bfec04 	addi	r2,fp,-80
    20bc:	00c01004 	movi	r3,64
    20c0:	180d883a 	mov	r6,r3
    20c4:	100b883a 	mov	r5,r2
    20c8:	00064d00 	call	64d0 <memcpy>
    20cc:	00000806 	br	20f0 <pbkdf2_hmac_sha512+0x140>
		} else {
			memcpy(key + key_offset, digest, last_block_size);
    20d0:	e0c00317 	ldw	r3,12(fp)
    20d4:	e0bf9a17 	ldw	r2,-408(fp)
    20d8:	1885883a 	add	r2,r3,r2
    20dc:	e0ffec04 	addi	r3,fp,-80
    20e0:	e1bf9717 	ldw	r6,-420(fp)
    20e4:	180b883a 	mov	r5,r3
    20e8:	1009883a 	mov	r4,r2
    20ec:	00064d00 	call	64d0 <memcpy>
	if (last_block_size) {
		blocks_count++;
	} else {
		last_block_size = SHA512_DIGEST_LENGTH;
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    20f0:	e0bf9917 	ldw	r2,-412(fp)
    20f4:	10800044 	addi	r2,r2,1
    20f8:	e0bf9915 	stw	r2,-412(fp)
    20fc:	e0bf9917 	ldw	r2,-412(fp)
    2100:	e0ff9817 	ldw	r3,-416(fp)
    2104:	18bfcc2e 	bgeu	r3,r2,2038 <__alt_mem_epcs_flash_controller+0xfdff9038>
			memcpy(key + key_offset, digest, SHA512_DIGEST_LENGTH);
		} else {
			memcpy(key + key_offset, digest, last_block_size);
		}
	}
}
    2108:	0001883a 	nop
    210c:	e037883a 	mov	sp,fp
    2110:	dfc00117 	ldw	ra,4(sp)
    2114:	df000017 	ldw	fp,0(sp)
    2118:	dec00204 	addi	sp,sp,8
    211c:	f800283a 	ret

00002120 <random32>:

#include <stdio.h>
#include <time.h>

uint32_t random32(void)
{
    2120:	defffd04 	addi	sp,sp,-12
    2124:	dfc00215 	stw	ra,8(sp)
    2128:	df000115 	stw	fp,4(sp)
    212c:	dc000015 	stw	r16,0(sp)
    2130:	df000104 	addi	fp,sp,4
	static int initialized = 0;
	if (!initialized) {
    2134:	d0a50c17 	ldw	r2,-27600(gp)
    2138:	1000061e 	bne	r2,zero,2154 <random32+0x34>
		srand((unsigned)time(NULL));
    213c:	0009883a 	mov	r4,zero
    2140:	00069d80 	call	69d8 <time>
    2144:	1009883a 	mov	r4,r2
    2148:	00068940 	call	6894 <srand>
		initialized = 1;
    214c:	00800044 	movi	r2,1
    2150:	d0a50c15 	stw	r2,-27600(gp)
	}
	return ((rand() & 0xFF) | ((rand() & 0xFF) << 8) | ((rand() & 0xFF) << 16) | ((uint32_t) (rand() & 0xFF) << 24));
    2154:	00068a80 	call	68a8 <rand>
    2158:	14003fcc 	andi	r16,r2,255
    215c:	00068a80 	call	68a8 <rand>
    2160:	1004923a 	slli	r2,r2,8
    2164:	10bfffcc 	andi	r2,r2,65535
    2168:	80a0b03a 	or	r16,r16,r2
    216c:	00068a80 	call	68a8 <rand>
    2170:	10803fcc 	andi	r2,r2,255
    2174:	1004943a 	slli	r2,r2,16
    2178:	8084b03a 	or	r2,r16,r2
    217c:	1021883a 	mov	r16,r2
    2180:	00068a80 	call	68a8 <rand>
    2184:	1004963a 	slli	r2,r2,24
    2188:	8084b03a 	or	r2,r16,r2
}
    218c:	e6ffff04 	addi	sp,fp,-4
    2190:	dfc00217 	ldw	ra,8(sp)
    2194:	df000117 	ldw	fp,4(sp)
    2198:	dc000017 	ldw	r16,0(sp)
    219c:	dec00304 	addi	sp,sp,12
    21a0:	f800283a 	ret

000021a4 <random_buffer>:
//

//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(uint8_t *buf, size_t len)
{
    21a4:	defffa04 	addi	sp,sp,-24
    21a8:	dfc00515 	stw	ra,20(sp)
    21ac:	df000415 	stw	fp,16(sp)
    21b0:	df000404 	addi	fp,sp,16
    21b4:	e13ffe15 	stw	r4,-8(fp)
    21b8:	e17fff15 	stw	r5,-4(fp)
	uint32_t r = 0;
    21bc:	e03ffc15 	stw	zero,-16(fp)
	for (size_t i = 0; i < len; i++) {
    21c0:	e03ffd15 	stw	zero,-12(fp)
    21c4:	00001106 	br	220c <random_buffer+0x68>
		if (i % 4 == 0) {
    21c8:	e0bffd17 	ldw	r2,-12(fp)
    21cc:	108000cc 	andi	r2,r2,3
    21d0:	1000021e 	bne	r2,zero,21dc <random_buffer+0x38>
			r = random32();
    21d4:	00021200 	call	2120 <random32>
    21d8:	e0bffc15 	stw	r2,-16(fp)
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
    21dc:	e0fffe17 	ldw	r3,-8(fp)
    21e0:	e0bffd17 	ldw	r2,-12(fp)
    21e4:	1885883a 	add	r2,r3,r2
    21e8:	e0fffd17 	ldw	r3,-12(fp)
    21ec:	18c000cc 	andi	r3,r3,3
    21f0:	180690fa 	slli	r3,r3,3
    21f4:	e13ffc17 	ldw	r4,-16(fp)
    21f8:	20c6d83a 	srl	r3,r4,r3
    21fc:	10c00005 	stb	r3,0(r2)
//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(uint8_t *buf, size_t len)
{
	uint32_t r = 0;
	for (size_t i = 0; i < len; i++) {
    2200:	e0bffd17 	ldw	r2,-12(fp)
    2204:	10800044 	addi	r2,r2,1
    2208:	e0bffd15 	stw	r2,-12(fp)
    220c:	e0fffd17 	ldw	r3,-12(fp)
    2210:	e0bfff17 	ldw	r2,-4(fp)
    2214:	18bfec36 	bltu	r3,r2,21c8 <__alt_mem_epcs_flash_controller+0xfdff91c8>
		if (i % 4 == 0) {
			r = random32();
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
	}
}
    2218:	0001883a 	nop
    221c:	e037883a 	mov	sp,fp
    2220:	dfc00117 	ldw	ra,4(sp)
    2224:	df000017 	ldw	fp,0(sp)
    2228:	dec00204 	addi	sp,sp,8
    222c:	f800283a 	ret

00002230 <sha1_Init>:
 */
static const char *sha2_hex_digits = "0123456789abcdef";


/*** SHA-1: ***********************************************************/
void sha1_Init(SHA1_CTX* context) {
    2230:	defffd04 	addi	sp,sp,-12
    2234:	dfc00215 	stw	ra,8(sp)
    2238:	df000115 	stw	fp,4(sp)
    223c:	df000104 	addi	fp,sp,4
    2240:	e13fff15 	stw	r4,-4(fp)
	MEMCPY_BCOPY(context->state, sha1_initial_hash_value, SHA1_DIGEST_LENGTH);
    2244:	e0bfff17 	ldw	r2,-4(fp)
    2248:	01800504 	movi	r6,20
    224c:	01400074 	movhi	r5,1
    2250:	29448f04 	addi	r5,r5,4668
    2254:	1009883a 	mov	r4,r2
    2258:	00064d00 	call	64d0 <memcpy>
	memzero(context->buffer, SHA1_BLOCK_LENGTH);
    225c:	e0bfff17 	ldw	r2,-4(fp)
    2260:	10800704 	addi	r2,r2,28
    2264:	01401004 	movi	r5,64
    2268:	1009883a 	mov	r4,r2
    226c:	000134c0 	call	134c <memzero>
	context->bitcount = 0;
    2270:	e0bfff17 	ldw	r2,-4(fp)
    2274:	10000515 	stw	zero,20(r2)
    2278:	10000615 	stw	zero,24(r2)
}
    227c:	0001883a 	nop
    2280:	e037883a 	mov	sp,fp
    2284:	dfc00117 	ldw	ra,4(sp)
    2288:	df000017 	ldw	fp,0(sp)
    228c:	dec00204 	addi	sp,sp,8
    2290:	f800283a 	ret

00002294 <sha1_Transform>:
	a = b = c = d = e = T1 = 0;
}

#else  /* SHA2_UNROLL_TRANSFORM */

void sha1_Transform(const sha2_word32* state_in, const sha2_word32* data, sha2_word32* state_out) {
    2294:	deffe504 	addi	sp,sp,-108
    2298:	df001a15 	stw	fp,104(sp)
    229c:	df001a04 	addi	fp,sp,104
    22a0:	e13ffd15 	stw	r4,-12(fp)
    22a4:	e17ffe15 	stw	r5,-8(fp)
    22a8:	e1bfff15 	stw	r6,-4(fp)
	sha2_word32	T1;
	sha2_word32	W1[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    22ac:	e0bffd17 	ldw	r2,-12(fp)
    22b0:	10800017 	ldw	r2,0(r2)
    22b4:	e0bfe615 	stw	r2,-104(fp)
	b = state_in[1];
    22b8:	e0bffd17 	ldw	r2,-12(fp)
    22bc:	10800117 	ldw	r2,4(r2)
    22c0:	e0bfe715 	stw	r2,-100(fp)
	c = state_in[2];
    22c4:	e0bffd17 	ldw	r2,-12(fp)
    22c8:	10800217 	ldw	r2,8(r2)
    22cc:	e0bfe815 	stw	r2,-96(fp)
	d = state_in[3];
    22d0:	e0bffd17 	ldw	r2,-12(fp)
    22d4:	10800317 	ldw	r2,12(r2)
    22d8:	e0bfe915 	stw	r2,-92(fp)
	e = state_in[4];
    22dc:	e0bffd17 	ldw	r2,-12(fp)
    22e0:	10800417 	ldw	r2,16(r2)
    22e4:	e0bfea15 	stw	r2,-88(fp)
	j = 0;
    22e8:	e03feb15 	stw	zero,-84(fp)
	do {
		T1 = ROTL32(5, a) + Ch(b, c, d) + e + K1_0_TO_19 + (W1[j] = *data++);
    22ec:	e0bfe617 	ldw	r2,-104(fp)
    22f0:	1006117a 	roli	r3,r2,5
    22f4:	e13fe717 	ldw	r4,-100(fp)
    22f8:	e0bfe817 	ldw	r2,-96(fp)
    22fc:	2088703a 	and	r4,r4,r2
    2300:	e0bfe717 	ldw	r2,-100(fp)
    2304:	008a303a 	nor	r5,zero,r2
    2308:	e0bfe917 	ldw	r2,-92(fp)
    230c:	2884703a 	and	r2,r5,r2
    2310:	2084f03a 	xor	r2,r4,r2
    2314:	1887883a 	add	r3,r3,r2
    2318:	e0bfea17 	ldw	r2,-88(fp)
    231c:	1887883a 	add	r3,r3,r2
    2320:	e0bffe17 	ldw	r2,-8(fp)
    2324:	11000104 	addi	r4,r2,4
    2328:	e13ffe15 	stw	r4,-8(fp)
    232c:	11000017 	ldw	r4,0(r2)
    2330:	e0bfeb17 	ldw	r2,-84(fp)
    2334:	1085883a 	add	r2,r2,r2
    2338:	1085883a 	add	r2,r2,r2
    233c:	e17fe604 	addi	r5,fp,-104
    2340:	2885883a 	add	r2,r5,r2
    2344:	10800704 	addi	r2,r2,28
    2348:	11000015 	stw	r4,0(r2)
    234c:	e0bfeb17 	ldw	r2,-84(fp)
    2350:	1085883a 	add	r2,r2,r2
    2354:	1085883a 	add	r2,r2,r2
    2358:	e1bfe604 	addi	r6,fp,-104
    235c:	3085883a 	add	r2,r6,r2
    2360:	10800704 	addi	r2,r2,28
    2364:	10800017 	ldw	r2,0(r2)
    2368:	1887883a 	add	r3,r3,r2
    236c:	0096a0b4 	movhi	r2,23170
    2370:	109e6644 	addi	r2,r2,31129
    2374:	1885883a 	add	r2,r3,r2
    2378:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    237c:	e0bfe917 	ldw	r2,-92(fp)
    2380:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    2384:	e0bfe817 	ldw	r2,-96(fp)
    2388:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    238c:	e0ffe717 	ldw	r3,-100(fp)
    2390:	00800084 	movi	r2,2
    2394:	1884583a 	ror	r2,r3,r2
    2398:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    239c:	e0bfe617 	ldw	r2,-104(fp)
    23a0:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    23a4:	e0bfec17 	ldw	r2,-80(fp)
    23a8:	e0bfe615 	stw	r2,-104(fp)
		j++;
    23ac:	e0bfeb17 	ldw	r2,-84(fp)
    23b0:	10800044 	addi	r2,r2,1
    23b4:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 16);
    23b8:	e0bfeb17 	ldw	r2,-84(fp)
    23bc:	10800410 	cmplti	r2,r2,16
    23c0:	103fca1e 	bne	r2,zero,22ec <__alt_mem_epcs_flash_controller+0xfdff92ec>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    23c4:	e0bfeb17 	ldw	r2,-84(fp)
    23c8:	10800344 	addi	r2,r2,13
    23cc:	108003cc 	andi	r2,r2,15
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	e0ffe604 	addi	r3,fp,-104
    23dc:	1885883a 	add	r2,r3,r2
    23e0:	10800704 	addi	r2,r2,28
    23e4:	10c00017 	ldw	r3,0(r2)
    23e8:	e0bfeb17 	ldw	r2,-84(fp)
    23ec:	10800204 	addi	r2,r2,8
    23f0:	108003cc 	andi	r2,r2,15
    23f4:	1085883a 	add	r2,r2,r2
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	e13fe604 	addi	r4,fp,-104
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800704 	addi	r2,r2,28
    2408:	10800017 	ldw	r2,0(r2)
    240c:	1886f03a 	xor	r3,r3,r2
    2410:	e0bfeb17 	ldw	r2,-84(fp)
    2414:	10800084 	addi	r2,r2,2
    2418:	108003cc 	andi	r2,r2,15
    241c:	1085883a 	add	r2,r2,r2
    2420:	1085883a 	add	r2,r2,r2
    2424:	e17fe604 	addi	r5,fp,-104
    2428:	2885883a 	add	r2,r5,r2
    242c:	10800704 	addi	r2,r2,28
    2430:	10800017 	ldw	r2,0(r2)
    2434:	1886f03a 	xor	r3,r3,r2
    2438:	e0bfeb17 	ldw	r2,-84(fp)
    243c:	108003cc 	andi	r2,r2,15
    2440:	1085883a 	add	r2,r2,r2
    2444:	1085883a 	add	r2,r2,r2
    2448:	e1bfe604 	addi	r6,fp,-104
    244c:	3085883a 	add	r2,r6,r2
    2450:	10800704 	addi	r2,r2,28
    2454:	10800017 	ldw	r2,0(r2)
    2458:	1884f03a 	xor	r2,r3,r2
    245c:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Ch(b,c,d) + e + K1_0_TO_19 + (W1[j&0x0f] = ROTL32(1, T1));
    2460:	e0bfe617 	ldw	r2,-104(fp)
    2464:	1006117a 	roli	r3,r2,5
    2468:	e13fe717 	ldw	r4,-100(fp)
    246c:	e0bfe817 	ldw	r2,-96(fp)
    2470:	2088703a 	and	r4,r4,r2
    2474:	e0bfe717 	ldw	r2,-100(fp)
    2478:	008a303a 	nor	r5,zero,r2
    247c:	e0bfe917 	ldw	r2,-92(fp)
    2480:	2884703a 	and	r2,r5,r2
    2484:	2084f03a 	xor	r2,r4,r2
    2488:	1887883a 	add	r3,r3,r2
    248c:	e0bfea17 	ldw	r2,-88(fp)
    2490:	1889883a 	add	r4,r3,r2
    2494:	e0bfeb17 	ldw	r2,-84(fp)
    2498:	108003cc 	andi	r2,r2,15
    249c:	e0ffec17 	ldw	r3,-80(fp)
    24a0:	180a107a 	roli	r5,r3,1
    24a4:	1087883a 	add	r3,r2,r2
    24a8:	18c7883a 	add	r3,r3,r3
    24ac:	e1bfe604 	addi	r6,fp,-104
    24b0:	30c7883a 	add	r3,r6,r3
    24b4:	18c00704 	addi	r3,r3,28
    24b8:	19400015 	stw	r5,0(r3)
    24bc:	1085883a 	add	r2,r2,r2
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	e0ffe604 	addi	r3,fp,-104
    24c8:	1885883a 	add	r2,r3,r2
    24cc:	10800704 	addi	r2,r2,28
    24d0:	10800017 	ldw	r2,0(r2)
    24d4:	2087883a 	add	r3,r4,r2
    24d8:	0096a0b4 	movhi	r2,23170
    24dc:	109e6644 	addi	r2,r2,31129
    24e0:	1885883a 	add	r2,r3,r2
    24e4:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    24e8:	e0bfe917 	ldw	r2,-92(fp)
    24ec:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    24f0:	e0bfe817 	ldw	r2,-96(fp)
    24f4:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    24f8:	e0ffe717 	ldw	r3,-100(fp)
    24fc:	00800084 	movi	r2,2
    2500:	1884583a 	ror	r2,r3,r2
    2504:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    2508:	e0bfe617 	ldw	r2,-104(fp)
    250c:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    2510:	e0bfec17 	ldw	r2,-80(fp)
    2514:	e0bfe615 	stw	r2,-104(fp)
		j++;
    2518:	e0bfeb17 	ldw	r2,-84(fp)
    251c:	10800044 	addi	r2,r2,1
    2520:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 20);
    2524:	e0bfeb17 	ldw	r2,-84(fp)
    2528:	10800510 	cmplti	r2,r2,20
    252c:	103fa51e 	bne	r2,zero,23c4 <__alt_mem_epcs_flash_controller+0xfdff93c4>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    2530:	e0bfeb17 	ldw	r2,-84(fp)
    2534:	10800344 	addi	r2,r2,13
    2538:	108003cc 	andi	r2,r2,15
    253c:	1085883a 	add	r2,r2,r2
    2540:	1085883a 	add	r2,r2,r2
    2544:	e13fe604 	addi	r4,fp,-104
    2548:	2085883a 	add	r2,r4,r2
    254c:	10800704 	addi	r2,r2,28
    2550:	10c00017 	ldw	r3,0(r2)
    2554:	e0bfeb17 	ldw	r2,-84(fp)
    2558:	10800204 	addi	r2,r2,8
    255c:	108003cc 	andi	r2,r2,15
    2560:	1085883a 	add	r2,r2,r2
    2564:	1085883a 	add	r2,r2,r2
    2568:	e17fe604 	addi	r5,fp,-104
    256c:	2885883a 	add	r2,r5,r2
    2570:	10800704 	addi	r2,r2,28
    2574:	10800017 	ldw	r2,0(r2)
    2578:	1886f03a 	xor	r3,r3,r2
    257c:	e0bfeb17 	ldw	r2,-84(fp)
    2580:	10800084 	addi	r2,r2,2
    2584:	108003cc 	andi	r2,r2,15
    2588:	1085883a 	add	r2,r2,r2
    258c:	1085883a 	add	r2,r2,r2
    2590:	e1bfe604 	addi	r6,fp,-104
    2594:	3085883a 	add	r2,r6,r2
    2598:	10800704 	addi	r2,r2,28
    259c:	10800017 	ldw	r2,0(r2)
    25a0:	1886f03a 	xor	r3,r3,r2
    25a4:	e0bfeb17 	ldw	r2,-84(fp)
    25a8:	108003cc 	andi	r2,r2,15
    25ac:	1085883a 	add	r2,r2,r2
    25b0:	1085883a 	add	r2,r2,r2
    25b4:	e13fe604 	addi	r4,fp,-104
    25b8:	2085883a 	add	r2,r4,r2
    25bc:	10800704 	addi	r2,r2,28
    25c0:	10800017 	ldw	r2,0(r2)
    25c4:	1884f03a 	xor	r2,r3,r2
    25c8:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Parity(b,c,d) + e + K1_20_TO_39 + (W1[j&0x0f] = ROTL32(1, T1));
    25cc:	e0bfe617 	ldw	r2,-104(fp)
    25d0:	1006117a 	roli	r3,r2,5
    25d4:	e13fe717 	ldw	r4,-100(fp)
    25d8:	e0bfe817 	ldw	r2,-96(fp)
    25dc:	2088f03a 	xor	r4,r4,r2
    25e0:	e0bfe917 	ldw	r2,-92(fp)
    25e4:	2084f03a 	xor	r2,r4,r2
    25e8:	1887883a 	add	r3,r3,r2
    25ec:	e0bfea17 	ldw	r2,-88(fp)
    25f0:	1889883a 	add	r4,r3,r2
    25f4:	e0bfeb17 	ldw	r2,-84(fp)
    25f8:	108003cc 	andi	r2,r2,15
    25fc:	e0ffec17 	ldw	r3,-80(fp)
    2600:	180a107a 	roli	r5,r3,1
    2604:	1087883a 	add	r3,r2,r2
    2608:	18c7883a 	add	r3,r3,r3
    260c:	e1bfe604 	addi	r6,fp,-104
    2610:	30c7883a 	add	r3,r6,r3
    2614:	18c00704 	addi	r3,r3,28
    2618:	19400015 	stw	r5,0(r3)
    261c:	1085883a 	add	r2,r2,r2
    2620:	1085883a 	add	r2,r2,r2
    2624:	e0ffe604 	addi	r3,fp,-104
    2628:	1885883a 	add	r2,r3,r2
    262c:	10800704 	addi	r2,r2,28
    2630:	10800017 	ldw	r2,0(r2)
    2634:	2087883a 	add	r3,r4,r2
    2638:	009bb6b4 	movhi	r2,28378
    263c:	10bae844 	addi	r2,r2,-5215
    2640:	1885883a 	add	r2,r3,r2
    2644:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    2648:	e0bfe917 	ldw	r2,-92(fp)
    264c:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    2650:	e0bfe817 	ldw	r2,-96(fp)
    2654:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    2658:	e0ffe717 	ldw	r3,-100(fp)
    265c:	00800084 	movi	r2,2
    2660:	1884583a 	ror	r2,r3,r2
    2664:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    2668:	e0bfe617 	ldw	r2,-104(fp)
    266c:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    2670:	e0bfec17 	ldw	r2,-80(fp)
    2674:	e0bfe615 	stw	r2,-104(fp)
		j++;
    2678:	e0bfeb17 	ldw	r2,-84(fp)
    267c:	10800044 	addi	r2,r2,1
    2680:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 40);
    2684:	e0bfeb17 	ldw	r2,-84(fp)
    2688:	10800a10 	cmplti	r2,r2,40
    268c:	103fa81e 	bne	r2,zero,2530 <__alt_mem_epcs_flash_controller+0xfdff9530>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    2690:	e0bfeb17 	ldw	r2,-84(fp)
    2694:	10800344 	addi	r2,r2,13
    2698:	108003cc 	andi	r2,r2,15
    269c:	1085883a 	add	r2,r2,r2
    26a0:	1085883a 	add	r2,r2,r2
    26a4:	e13fe604 	addi	r4,fp,-104
    26a8:	2085883a 	add	r2,r4,r2
    26ac:	10800704 	addi	r2,r2,28
    26b0:	10c00017 	ldw	r3,0(r2)
    26b4:	e0bfeb17 	ldw	r2,-84(fp)
    26b8:	10800204 	addi	r2,r2,8
    26bc:	108003cc 	andi	r2,r2,15
    26c0:	1085883a 	add	r2,r2,r2
    26c4:	1085883a 	add	r2,r2,r2
    26c8:	e17fe604 	addi	r5,fp,-104
    26cc:	2885883a 	add	r2,r5,r2
    26d0:	10800704 	addi	r2,r2,28
    26d4:	10800017 	ldw	r2,0(r2)
    26d8:	1886f03a 	xor	r3,r3,r2
    26dc:	e0bfeb17 	ldw	r2,-84(fp)
    26e0:	10800084 	addi	r2,r2,2
    26e4:	108003cc 	andi	r2,r2,15
    26e8:	1085883a 	add	r2,r2,r2
    26ec:	1085883a 	add	r2,r2,r2
    26f0:	e1bfe604 	addi	r6,fp,-104
    26f4:	3085883a 	add	r2,r6,r2
    26f8:	10800704 	addi	r2,r2,28
    26fc:	10800017 	ldw	r2,0(r2)
    2700:	1886f03a 	xor	r3,r3,r2
    2704:	e0bfeb17 	ldw	r2,-84(fp)
    2708:	108003cc 	andi	r2,r2,15
    270c:	1085883a 	add	r2,r2,r2
    2710:	1085883a 	add	r2,r2,r2
    2714:	e13fe604 	addi	r4,fp,-104
    2718:	2085883a 	add	r2,r4,r2
    271c:	10800704 	addi	r2,r2,28
    2720:	10800017 	ldw	r2,0(r2)
    2724:	1884f03a 	xor	r2,r3,r2
    2728:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Maj(b,c,d) + e + K1_40_TO_59 + (W1[j&0x0f] = ROTL32(1, T1));
    272c:	e0bfe617 	ldw	r2,-104(fp)
    2730:	1006117a 	roli	r3,r2,5
    2734:	e13fe717 	ldw	r4,-100(fp)
    2738:	e0bfe817 	ldw	r2,-96(fp)
    273c:	2088703a 	and	r4,r4,r2
    2740:	e17fe717 	ldw	r5,-100(fp)
    2744:	e0bfe917 	ldw	r2,-92(fp)
    2748:	2884703a 	and	r2,r5,r2
    274c:	2088f03a 	xor	r4,r4,r2
    2750:	e17fe817 	ldw	r5,-96(fp)
    2754:	e0bfe917 	ldw	r2,-92(fp)
    2758:	2884703a 	and	r2,r5,r2
    275c:	2084f03a 	xor	r2,r4,r2
    2760:	1887883a 	add	r3,r3,r2
    2764:	e0bfea17 	ldw	r2,-88(fp)
    2768:	1889883a 	add	r4,r3,r2
    276c:	e0bfeb17 	ldw	r2,-84(fp)
    2770:	108003cc 	andi	r2,r2,15
    2774:	e0ffec17 	ldw	r3,-80(fp)
    2778:	180a107a 	roli	r5,r3,1
    277c:	1087883a 	add	r3,r2,r2
    2780:	18c7883a 	add	r3,r3,r3
    2784:	e1bfe604 	addi	r6,fp,-104
    2788:	30c7883a 	add	r3,r6,r3
    278c:	18c00704 	addi	r3,r3,28
    2790:	19400015 	stw	r5,0(r3)
    2794:	1085883a 	add	r2,r2,r2
    2798:	1085883a 	add	r2,r2,r2
    279c:	e0ffe604 	addi	r3,fp,-104
    27a0:	1885883a 	add	r2,r3,r2
    27a4:	10800704 	addi	r2,r2,28
    27a8:	10800017 	ldw	r2,0(r2)
    27ac:	2087883a 	add	r3,r4,r2
    27b0:	00a3c734 	movhi	r2,36636
    27b4:	10af3704 	addi	r2,r2,-17188
    27b8:	1885883a 	add	r2,r3,r2
    27bc:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    27c0:	e0bfe917 	ldw	r2,-92(fp)
    27c4:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    27c8:	e0bfe817 	ldw	r2,-96(fp)
    27cc:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    27d0:	e0ffe717 	ldw	r3,-100(fp)
    27d4:	00800084 	movi	r2,2
    27d8:	1884583a 	ror	r2,r3,r2
    27dc:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    27e0:	e0bfe617 	ldw	r2,-104(fp)
    27e4:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    27e8:	e0bfec17 	ldw	r2,-80(fp)
    27ec:	e0bfe615 	stw	r2,-104(fp)
		j++;
    27f0:	e0bfeb17 	ldw	r2,-84(fp)
    27f4:	10800044 	addi	r2,r2,1
    27f8:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 60);
    27fc:	e0bfeb17 	ldw	r2,-84(fp)
    2800:	10800f10 	cmplti	r2,r2,60
    2804:	103fa21e 	bne	r2,zero,2690 <__alt_mem_epcs_flash_controller+0xfdff9690>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    2808:	e0bfeb17 	ldw	r2,-84(fp)
    280c:	10800344 	addi	r2,r2,13
    2810:	108003cc 	andi	r2,r2,15
    2814:	1085883a 	add	r2,r2,r2
    2818:	1085883a 	add	r2,r2,r2
    281c:	e13fe604 	addi	r4,fp,-104
    2820:	2085883a 	add	r2,r4,r2
    2824:	10800704 	addi	r2,r2,28
    2828:	10c00017 	ldw	r3,0(r2)
    282c:	e0bfeb17 	ldw	r2,-84(fp)
    2830:	10800204 	addi	r2,r2,8
    2834:	108003cc 	andi	r2,r2,15
    2838:	1085883a 	add	r2,r2,r2
    283c:	1085883a 	add	r2,r2,r2
    2840:	e17fe604 	addi	r5,fp,-104
    2844:	2885883a 	add	r2,r5,r2
    2848:	10800704 	addi	r2,r2,28
    284c:	10800017 	ldw	r2,0(r2)
    2850:	1886f03a 	xor	r3,r3,r2
    2854:	e0bfeb17 	ldw	r2,-84(fp)
    2858:	10800084 	addi	r2,r2,2
    285c:	108003cc 	andi	r2,r2,15
    2860:	1085883a 	add	r2,r2,r2
    2864:	1085883a 	add	r2,r2,r2
    2868:	e1bfe604 	addi	r6,fp,-104
    286c:	3085883a 	add	r2,r6,r2
    2870:	10800704 	addi	r2,r2,28
    2874:	10800017 	ldw	r2,0(r2)
    2878:	1886f03a 	xor	r3,r3,r2
    287c:	e0bfeb17 	ldw	r2,-84(fp)
    2880:	108003cc 	andi	r2,r2,15
    2884:	1085883a 	add	r2,r2,r2
    2888:	1085883a 	add	r2,r2,r2
    288c:	e13fe604 	addi	r4,fp,-104
    2890:	2085883a 	add	r2,r4,r2
    2894:	10800704 	addi	r2,r2,28
    2898:	10800017 	ldw	r2,0(r2)
    289c:	1884f03a 	xor	r2,r3,r2
    28a0:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Parity(b,c,d) + e + K1_60_TO_79 + (W1[j&0x0f] = ROTL32(1, T1));
    28a4:	e0bfe617 	ldw	r2,-104(fp)
    28a8:	1006117a 	roli	r3,r2,5
    28ac:	e13fe717 	ldw	r4,-100(fp)
    28b0:	e0bfe817 	ldw	r2,-96(fp)
    28b4:	2088f03a 	xor	r4,r4,r2
    28b8:	e0bfe917 	ldw	r2,-92(fp)
    28bc:	2084f03a 	xor	r2,r4,r2
    28c0:	1887883a 	add	r3,r3,r2
    28c4:	e0bfea17 	ldw	r2,-88(fp)
    28c8:	1889883a 	add	r4,r3,r2
    28cc:	e0bfeb17 	ldw	r2,-84(fp)
    28d0:	108003cc 	andi	r2,r2,15
    28d4:	e0ffec17 	ldw	r3,-80(fp)
    28d8:	180a107a 	roli	r5,r3,1
    28dc:	1087883a 	add	r3,r2,r2
    28e0:	18c7883a 	add	r3,r3,r3
    28e4:	e1bfe604 	addi	r6,fp,-104
    28e8:	30c7883a 	add	r3,r6,r3
    28ec:	18c00704 	addi	r3,r3,28
    28f0:	19400015 	stw	r5,0(r3)
    28f4:	1085883a 	add	r2,r2,r2
    28f8:	1085883a 	add	r2,r2,r2
    28fc:	e0ffe604 	addi	r3,fp,-104
    2900:	1885883a 	add	r2,r3,r2
    2904:	10800704 	addi	r2,r2,28
    2908:	10800017 	ldw	r2,0(r2)
    290c:	2087883a 	add	r3,r4,r2
    2910:	00b298f4 	movhi	r2,51811
    2914:	10b07584 	addi	r2,r2,-15914
    2918:	1885883a 	add	r2,r3,r2
    291c:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    2920:	e0bfe917 	ldw	r2,-92(fp)
    2924:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    2928:	e0bfe817 	ldw	r2,-96(fp)
    292c:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    2930:	e0ffe717 	ldw	r3,-100(fp)
    2934:	00800084 	movi	r2,2
    2938:	1884583a 	ror	r2,r3,r2
    293c:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    2940:	e0bfe617 	ldw	r2,-104(fp)
    2944:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    2948:	e0bfec17 	ldw	r2,-80(fp)
    294c:	e0bfe615 	stw	r2,-104(fp)
		j++;
    2950:	e0bfeb17 	ldw	r2,-84(fp)
    2954:	10800044 	addi	r2,r2,1
    2958:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 80);
    295c:	e0bfeb17 	ldw	r2,-84(fp)
    2960:	10801410 	cmplti	r2,r2,80
    2964:	103fa81e 	bne	r2,zero,2808 <__alt_mem_epcs_flash_controller+0xfdff9808>


	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    2968:	e0bffd17 	ldw	r2,-12(fp)
    296c:	10c00017 	ldw	r3,0(r2)
    2970:	e0bfe617 	ldw	r2,-104(fp)
    2974:	1887883a 	add	r3,r3,r2
    2978:	e0bfff17 	ldw	r2,-4(fp)
    297c:	10c00015 	stw	r3,0(r2)
	state_out[1] = state_in[1] + b;
    2980:	e0bfff17 	ldw	r2,-4(fp)
    2984:	10800104 	addi	r2,r2,4
    2988:	e0fffd17 	ldw	r3,-12(fp)
    298c:	18c00104 	addi	r3,r3,4
    2990:	19000017 	ldw	r4,0(r3)
    2994:	e0ffe717 	ldw	r3,-100(fp)
    2998:	20c7883a 	add	r3,r4,r3
    299c:	10c00015 	stw	r3,0(r2)
	state_out[2] = state_in[2] + c;
    29a0:	e0bfff17 	ldw	r2,-4(fp)
    29a4:	10800204 	addi	r2,r2,8
    29a8:	e0fffd17 	ldw	r3,-12(fp)
    29ac:	18c00204 	addi	r3,r3,8
    29b0:	19000017 	ldw	r4,0(r3)
    29b4:	e0ffe817 	ldw	r3,-96(fp)
    29b8:	20c7883a 	add	r3,r4,r3
    29bc:	10c00015 	stw	r3,0(r2)
	state_out[3] = state_in[3] + d;
    29c0:	e0bfff17 	ldw	r2,-4(fp)
    29c4:	10800304 	addi	r2,r2,12
    29c8:	e0fffd17 	ldw	r3,-12(fp)
    29cc:	18c00304 	addi	r3,r3,12
    29d0:	19000017 	ldw	r4,0(r3)
    29d4:	e0ffe917 	ldw	r3,-92(fp)
    29d8:	20c7883a 	add	r3,r4,r3
    29dc:	10c00015 	stw	r3,0(r2)
	state_out[4] = state_in[4] + e;
    29e0:	e0bfff17 	ldw	r2,-4(fp)
    29e4:	10800404 	addi	r2,r2,16
    29e8:	e0fffd17 	ldw	r3,-12(fp)
    29ec:	18c00404 	addi	r3,r3,16
    29f0:	19000017 	ldw	r4,0(r3)
    29f4:	e0ffea17 	ldw	r3,-88(fp)
    29f8:	20c7883a 	add	r3,r4,r3
    29fc:	10c00015 	stw	r3,0(r2)

	/* Clean up */
	a = b = c = d = e = T1 = 0;
    2a00:	e03fec15 	stw	zero,-80(fp)
    2a04:	e0bfec17 	ldw	r2,-80(fp)
    2a08:	e0bfea15 	stw	r2,-88(fp)
    2a0c:	e0bfea17 	ldw	r2,-88(fp)
    2a10:	e0bfe915 	stw	r2,-92(fp)
    2a14:	e0bfe917 	ldw	r2,-92(fp)
    2a18:	e0bfe815 	stw	r2,-96(fp)
    2a1c:	e0bfe817 	ldw	r2,-96(fp)
    2a20:	e0bfe715 	stw	r2,-100(fp)
    2a24:	e0bfe717 	ldw	r2,-100(fp)
    2a28:	e0bfe615 	stw	r2,-104(fp)
}
    2a2c:	0001883a 	nop
    2a30:	e037883a 	mov	sp,fp
    2a34:	df000017 	ldw	fp,0(sp)
    2a38:	dec00104 	addi	sp,sp,4
    2a3c:	f800283a 	ret

00002a40 <sha1_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha1_Update(SHA1_CTX* context, const sha2_byte *data, size_t len) {
    2a40:	deffef04 	addi	sp,sp,-68
    2a44:	dfc01015 	stw	ra,64(sp)
    2a48:	df000f15 	stw	fp,60(sp)
    2a4c:	dd400e15 	stw	r21,56(sp)
    2a50:	dd000d15 	stw	r20,52(sp)
    2a54:	dcc00c15 	stw	r19,48(sp)
    2a58:	dc800b15 	stw	r18,44(sp)
    2a5c:	dc400a15 	stw	r17,40(sp)
    2a60:	dc000915 	stw	r16,36(sp)
    2a64:	df000f04 	addi	fp,sp,60
    2a68:	e13ff715 	stw	r4,-36(fp)
    2a6c:	e17ff815 	stw	r5,-32(fp)
    2a70:	e1bff915 	stw	r6,-28(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    2a74:	e0bff917 	ldw	r2,-28(fp)
    2a78:	1000e726 	beq	r2,zero,2e18 <sha1_Update+0x3d8>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount >> 3) % SHA1_BLOCK_LENGTH;
    2a7c:	e13ff717 	ldw	r4,-36(fp)
    2a80:	20800517 	ldw	r2,20(r4)
    2a84:	20c00617 	ldw	r3,24(r4)
    2a88:	1808977a 	slli	r4,r3,29
    2a8c:	100ed0fa 	srli	r7,r2,3
    2a90:	21ceb03a 	or	r7,r4,r7
    2a94:	1810d0fa 	srli	r8,r3,3
    2a98:	3805883a 	mov	r2,r7
    2a9c:	10800fcc 	andi	r2,r2,63
    2aa0:	e0bff315 	stw	r2,-52(fp)
	if (usedspace > 0) {
    2aa4:	e0bff317 	ldw	r2,-52(fp)
    2aa8:	1000bb26 	beq	r2,zero,2d98 <sha1_Update+0x358>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA1_BLOCK_LENGTH - usedspace;
    2aac:	00c01004 	movi	r3,64
    2ab0:	e0bff317 	ldw	r2,-52(fp)
    2ab4:	1885c83a 	sub	r2,r3,r2
    2ab8:	e0bff415 	stw	r2,-48(fp)

		if (len >= freespace) {
    2abc:	e0fff917 	ldw	r3,-28(fp)
    2ac0:	e0bff417 	ldw	r2,-48(fp)
    2ac4:	18804f36 	bltu	r3,r2,2c04 <sha1_Update+0x1c4>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    2ac8:	e0bff717 	ldw	r2,-36(fp)
    2acc:	10c00704 	addi	r3,r2,28
    2ad0:	e0bff317 	ldw	r2,-52(fp)
    2ad4:	1885883a 	add	r2,r3,r2
    2ad8:	e1bff417 	ldw	r6,-48(fp)
    2adc:	e17ff817 	ldw	r5,-32(fp)
    2ae0:	1009883a 	mov	r4,r2
    2ae4:	00064d00 	call	64d0 <memcpy>
			context->bitcount += freespace << 3;
    2ae8:	e0bff717 	ldw	r2,-36(fp)
    2aec:	11000517 	ldw	r4,20(r2)
    2af0:	11400617 	ldw	r5,24(r2)
    2af4:	e0bff417 	ldw	r2,-48(fp)
    2af8:	100490fa 	slli	r2,r2,3
    2afc:	1029883a 	mov	r20,r2
    2b00:	002b883a 	mov	r21,zero
    2b04:	2505883a 	add	r2,r4,r20
    2b08:	110d803a 	cmpltu	r6,r2,r4
    2b0c:	2d47883a 	add	r3,r5,r21
    2b10:	30c9883a 	add	r4,r6,r3
    2b14:	2007883a 	mov	r3,r4
    2b18:	1009883a 	mov	r4,r2
    2b1c:	180b883a 	mov	r5,r3
    2b20:	e0bff717 	ldw	r2,-36(fp)
    2b24:	11000515 	stw	r4,20(r2)
    2b28:	11400615 	stw	r5,24(r2)
			len -= freespace;
    2b2c:	e0fff917 	ldw	r3,-28(fp)
    2b30:	e0bff417 	ldw	r2,-48(fp)
    2b34:	1885c83a 	sub	r2,r3,r2
    2b38:	e0bff915 	stw	r2,-28(fp)
			data += freespace;
    2b3c:	e0fff817 	ldw	r3,-32(fp)
    2b40:	e0bff417 	ldw	r2,-48(fp)
    2b44:	1885883a 	add	r2,r3,r2
    2b48:	e0bff815 	stw	r2,-32(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    2b4c:	e03ff115 	stw	zero,-60(fp)
    2b50:	00002006 	br	2bd4 <sha1_Update+0x194>
				REVERSE32(context->buffer[j],context->buffer[j]);
    2b54:	e0fff717 	ldw	r3,-36(fp)
    2b58:	e0bff117 	ldw	r2,-60(fp)
    2b5c:	108001c4 	addi	r2,r2,7
    2b60:	1085883a 	add	r2,r2,r2
    2b64:	1085883a 	add	r2,r2,r2
    2b68:	1885883a 	add	r2,r3,r2
    2b6c:	10800017 	ldw	r2,0(r2)
    2b70:	e0bff515 	stw	r2,-44(fp)
    2b74:	e0bff517 	ldw	r2,-44(fp)
    2b78:	1004143a 	roli	r2,r2,16
    2b7c:	e0bff515 	stw	r2,-44(fp)
    2b80:	e0fff517 	ldw	r3,-44(fp)
    2b84:	00bfc074 	movhi	r2,65281
    2b88:	10bfc004 	addi	r2,r2,-256
    2b8c:	1884703a 	and	r2,r3,r2
    2b90:	1006d23a 	srli	r3,r2,8
    2b94:	e13ff517 	ldw	r4,-44(fp)
    2b98:	00803ff4 	movhi	r2,255
    2b9c:	10803fc4 	addi	r2,r2,255
    2ba0:	2084703a 	and	r2,r4,r2
    2ba4:	1004923a 	slli	r2,r2,8
    2ba8:	1886b03a 	or	r3,r3,r2
    2bac:	e13ff717 	ldw	r4,-36(fp)
    2bb0:	e0bff117 	ldw	r2,-60(fp)
    2bb4:	108001c4 	addi	r2,r2,7
    2bb8:	1085883a 	add	r2,r2,r2
    2bbc:	1085883a 	add	r2,r2,r2
    2bc0:	2085883a 	add	r2,r4,r2
    2bc4:	10c00015 	stw	r3,0(r2)
			context->bitcount += freespace << 3;
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    2bc8:	e0bff117 	ldw	r2,-60(fp)
    2bcc:	10800044 	addi	r2,r2,1
    2bd0:	e0bff115 	stw	r2,-60(fp)
    2bd4:	e0bff117 	ldw	r2,-60(fp)
    2bd8:	10800410 	cmplti	r2,r2,16
    2bdc:	103fdd1e 	bne	r2,zero,2b54 <__alt_mem_epcs_flash_controller+0xfdff9b54>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			sha1_Transform(context->state, context->buffer, context->state);
    2be0:	e0fff717 	ldw	r3,-36(fp)
    2be4:	e0bff717 	ldw	r2,-36(fp)
    2be8:	10800704 	addi	r2,r2,28
    2bec:	e13ff717 	ldw	r4,-36(fp)
    2bf0:	200d883a 	mov	r6,r4
    2bf4:	100b883a 	mov	r5,r2
    2bf8:	1809883a 	mov	r4,r3
    2bfc:	00022940 	call	2294 <sha1_Transform>
    2c00:	00006506 	br	2d98 <sha1_Update+0x358>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    2c04:	e0bff717 	ldw	r2,-36(fp)
    2c08:	10c00704 	addi	r3,r2,28
    2c0c:	e0bff317 	ldw	r2,-52(fp)
    2c10:	1885883a 	add	r2,r3,r2
    2c14:	e1bff917 	ldw	r6,-28(fp)
    2c18:	e17ff817 	ldw	r5,-32(fp)
    2c1c:	1009883a 	mov	r4,r2
    2c20:	00064d00 	call	64d0 <memcpy>
			context->bitcount += len << 3;
    2c24:	e0bff717 	ldw	r2,-36(fp)
    2c28:	11000517 	ldw	r4,20(r2)
    2c2c:	11400617 	ldw	r5,24(r2)
    2c30:	e0bff917 	ldw	r2,-28(fp)
    2c34:	100490fa 	slli	r2,r2,3
    2c38:	1025883a 	mov	r18,r2
    2c3c:	0027883a 	mov	r19,zero
    2c40:	2485883a 	add	r2,r4,r18
    2c44:	110d803a 	cmpltu	r6,r2,r4
    2c48:	2cc7883a 	add	r3,r5,r19
    2c4c:	30c9883a 	add	r4,r6,r3
    2c50:	2007883a 	mov	r3,r4
    2c54:	1009883a 	mov	r4,r2
    2c58:	180b883a 	mov	r5,r3
    2c5c:	e0bff717 	ldw	r2,-36(fp)
    2c60:	11000515 	stw	r4,20(r2)
    2c64:	11400615 	stw	r5,24(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    2c68:	e03ff415 	stw	zero,-48(fp)
    2c6c:	e0bff417 	ldw	r2,-48(fp)
    2c70:	e0bff315 	stw	r2,-52(fp)
			return;
    2c74:	00006906 	br	2e1c <sha1_Update+0x3dc>
		}
	}
	while (len >= SHA1_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA1_BLOCK_LENGTH);
    2c78:	e0bff717 	ldw	r2,-36(fp)
    2c7c:	10800704 	addi	r2,r2,28
    2c80:	01801004 	movi	r6,64
    2c84:	e17ff817 	ldw	r5,-32(fp)
    2c88:	1009883a 	mov	r4,r2
    2c8c:	00064d00 	call	64d0 <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    2c90:	e03ff215 	stw	zero,-56(fp)
    2c94:	00002006 	br	2d18 <sha1_Update+0x2d8>
			REVERSE32(context->buffer[j],context->buffer[j]);
    2c98:	e0fff717 	ldw	r3,-36(fp)
    2c9c:	e0bff217 	ldw	r2,-56(fp)
    2ca0:	108001c4 	addi	r2,r2,7
    2ca4:	1085883a 	add	r2,r2,r2
    2ca8:	1085883a 	add	r2,r2,r2
    2cac:	1885883a 	add	r2,r3,r2
    2cb0:	10800017 	ldw	r2,0(r2)
    2cb4:	e0bff615 	stw	r2,-40(fp)
    2cb8:	e0bff617 	ldw	r2,-40(fp)
    2cbc:	1004143a 	roli	r2,r2,16
    2cc0:	e0bff615 	stw	r2,-40(fp)
    2cc4:	e0fff617 	ldw	r3,-40(fp)
    2cc8:	00bfc074 	movhi	r2,65281
    2ccc:	10bfc004 	addi	r2,r2,-256
    2cd0:	1884703a 	and	r2,r3,r2
    2cd4:	1006d23a 	srli	r3,r2,8
    2cd8:	e13ff617 	ldw	r4,-40(fp)
    2cdc:	00803ff4 	movhi	r2,255
    2ce0:	10803fc4 	addi	r2,r2,255
    2ce4:	2084703a 	and	r2,r4,r2
    2ce8:	1004923a 	slli	r2,r2,8
    2cec:	1886b03a 	or	r3,r3,r2
    2cf0:	e13ff717 	ldw	r4,-36(fp)
    2cf4:	e0bff217 	ldw	r2,-56(fp)
    2cf8:	108001c4 	addi	r2,r2,7
    2cfc:	1085883a 	add	r2,r2,r2
    2d00:	1085883a 	add	r2,r2,r2
    2d04:	2085883a 	add	r2,r4,r2
    2d08:	10c00015 	stw	r3,0(r2)
	while (len >= SHA1_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA1_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    2d0c:	e0bff217 	ldw	r2,-56(fp)
    2d10:	10800044 	addi	r2,r2,1
    2d14:	e0bff215 	stw	r2,-56(fp)
    2d18:	e0bff217 	ldw	r2,-56(fp)
    2d1c:	10800410 	cmplti	r2,r2,16
    2d20:	103fdd1e 	bne	r2,zero,2c98 <__alt_mem_epcs_flash_controller+0xfdff9c98>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		sha1_Transform(context->state, context->buffer, context->state);
    2d24:	e0fff717 	ldw	r3,-36(fp)
    2d28:	e0bff717 	ldw	r2,-36(fp)
    2d2c:	10800704 	addi	r2,r2,28
    2d30:	e13ff717 	ldw	r4,-36(fp)
    2d34:	200d883a 	mov	r6,r4
    2d38:	100b883a 	mov	r5,r2
    2d3c:	1809883a 	mov	r4,r3
    2d40:	00022940 	call	2294 <sha1_Transform>
		context->bitcount += SHA1_BLOCK_LENGTH << 3;
    2d44:	e0bff717 	ldw	r2,-36(fp)
    2d48:	11000517 	ldw	r4,20(r2)
    2d4c:	11400617 	ldw	r5,24(r2)
    2d50:	01808004 	movi	r6,512
    2d54:	000f883a 	mov	r7,zero
    2d58:	2185883a 	add	r2,r4,r6
    2d5c:	1111803a 	cmpltu	r8,r2,r4
    2d60:	29c7883a 	add	r3,r5,r7
    2d64:	40c9883a 	add	r4,r8,r3
    2d68:	2007883a 	mov	r3,r4
    2d6c:	1009883a 	mov	r4,r2
    2d70:	180b883a 	mov	r5,r3
    2d74:	e0bff717 	ldw	r2,-36(fp)
    2d78:	11000515 	stw	r4,20(r2)
    2d7c:	11400615 	stw	r5,24(r2)
		len -= SHA1_BLOCK_LENGTH;
    2d80:	e0bff917 	ldw	r2,-28(fp)
    2d84:	10bff004 	addi	r2,r2,-64
    2d88:	e0bff915 	stw	r2,-28(fp)
		data += SHA1_BLOCK_LENGTH;
    2d8c:	e0bff817 	ldw	r2,-32(fp)
    2d90:	10801004 	addi	r2,r2,64
    2d94:	e0bff815 	stw	r2,-32(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA1_BLOCK_LENGTH) {
    2d98:	e0bff917 	ldw	r2,-28(fp)
    2d9c:	10801028 	cmpgeui	r2,r2,64
    2da0:	103fb51e 	bne	r2,zero,2c78 <__alt_mem_epcs_flash_controller+0xfdff9c78>
		sha1_Transform(context->state, context->buffer, context->state);
		context->bitcount += SHA1_BLOCK_LENGTH << 3;
		len -= SHA1_BLOCK_LENGTH;
		data += SHA1_BLOCK_LENGTH;
	}
	if (len > 0) {
    2da4:	e0bff917 	ldw	r2,-28(fp)
    2da8:	10001726 	beq	r2,zero,2e08 <sha1_Update+0x3c8>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    2dac:	e0bff717 	ldw	r2,-36(fp)
    2db0:	10800704 	addi	r2,r2,28
    2db4:	e1bff917 	ldw	r6,-28(fp)
    2db8:	e17ff817 	ldw	r5,-32(fp)
    2dbc:	1009883a 	mov	r4,r2
    2dc0:	00064d00 	call	64d0 <memcpy>
		context->bitcount += len << 3;
    2dc4:	e0bff717 	ldw	r2,-36(fp)
    2dc8:	11000517 	ldw	r4,20(r2)
    2dcc:	11400617 	ldw	r5,24(r2)
    2dd0:	e0bff917 	ldw	r2,-28(fp)
    2dd4:	100490fa 	slli	r2,r2,3
    2dd8:	1021883a 	mov	r16,r2
    2ddc:	0023883a 	mov	r17,zero
    2de0:	2405883a 	add	r2,r4,r16
    2de4:	110d803a 	cmpltu	r6,r2,r4
    2de8:	2c47883a 	add	r3,r5,r17
    2dec:	30c9883a 	add	r4,r6,r3
    2df0:	2007883a 	mov	r3,r4
    2df4:	1009883a 	mov	r4,r2
    2df8:	180b883a 	mov	r5,r3
    2dfc:	e0bff717 	ldw	r2,-36(fp)
    2e00:	11000515 	stw	r4,20(r2)
    2e04:	11400615 	stw	r5,24(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    2e08:	e03ff415 	stw	zero,-48(fp)
    2e0c:	e0bff417 	ldw	r2,-48(fp)
    2e10:	e0bff315 	stw	r2,-52(fp)
    2e14:	00000106 	br	2e1c <sha1_Update+0x3dc>
void sha1_Update(SHA1_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    2e18:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		context->bitcount += len << 3;
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    2e1c:	e6fffa04 	addi	sp,fp,-24
    2e20:	dfc00717 	ldw	ra,28(sp)
    2e24:	df000617 	ldw	fp,24(sp)
    2e28:	dd400517 	ldw	r21,20(sp)
    2e2c:	dd000417 	ldw	r20,16(sp)
    2e30:	dcc00317 	ldw	r19,12(sp)
    2e34:	dc800217 	ldw	r18,8(sp)
    2e38:	dc400117 	ldw	r17,4(sp)
    2e3c:	dc000017 	ldw	r16,0(sp)
    2e40:	dec00804 	addi	sp,sp,32
    2e44:	f800283a 	ret

00002e48 <sha1_Final>:

void sha1_Final(SHA1_CTX* context, sha2_byte digest[]) {
    2e48:	defff304 	addi	sp,sp,-52
    2e4c:	dfc00c15 	stw	ra,48(sp)
    2e50:	df000b15 	stw	fp,44(sp)
    2e54:	dc400a15 	stw	r17,40(sp)
    2e58:	dc000915 	stw	r16,36(sp)
    2e5c:	df000b04 	addi	fp,sp,44
    2e60:	e13ffc15 	stw	r4,-16(fp)
    2e64:	e17ffd15 	stw	r5,-12(fp)
	unsigned int	usedspace;

	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    2e68:	e0bffd17 	ldw	r2,-12(fp)
    2e6c:	1000b826 	beq	r2,zero,3150 <sha1_Final+0x308>
		usedspace = (context->bitcount >> 3) % SHA1_BLOCK_LENGTH;
    2e70:	e13ffc17 	ldw	r4,-16(fp)
    2e74:	20800517 	ldw	r2,20(r4)
    2e78:	20c00617 	ldw	r3,24(r4)
    2e7c:	1808977a 	slli	r4,r3,29
    2e80:	100cd0fa 	srli	r6,r2,3
    2e84:	218cb03a 	or	r6,r4,r6
    2e88:	180ed0fa 	srli	r7,r3,3
    2e8c:	3005883a 	mov	r2,r6
    2e90:	10800fcc 	andi	r2,r2,63
    2e94:	e0bff515 	stw	r2,-44(fp)
		/* Begin padding with a 1 bit: */
		((uint8_t*)context->buffer)[usedspace++] = 0x80;
    2e98:	e0bffc17 	ldw	r2,-16(fp)
    2e9c:	10c00704 	addi	r3,r2,28
    2ea0:	e0bff517 	ldw	r2,-44(fp)
    2ea4:	11000044 	addi	r4,r2,1
    2ea8:	e13ff515 	stw	r4,-44(fp)
    2eac:	1885883a 	add	r2,r3,r2
    2eb0:	00ffe004 	movi	r3,-128
    2eb4:	10c00005 	stb	r3,0(r2)

		if (usedspace > SHA1_SHORT_BLOCK_LENGTH) {
    2eb8:	e0bff517 	ldw	r2,-44(fp)
    2ebc:	10800e70 	cmpltui	r2,r2,57
    2ec0:	1000371e 	bne	r2,zero,2fa0 <sha1_Final+0x158>
			memzero(((uint8_t*)context->buffer) + usedspace, SHA1_BLOCK_LENGTH - usedspace);
    2ec4:	e0bffc17 	ldw	r2,-16(fp)
    2ec8:	10c00704 	addi	r3,r2,28
    2ecc:	e0bff517 	ldw	r2,-44(fp)
    2ed0:	1889883a 	add	r4,r3,r2
    2ed4:	00c01004 	movi	r3,64
    2ed8:	e0bff517 	ldw	r2,-44(fp)
    2edc:	1885c83a 	sub	r2,r3,r2
    2ee0:	100b883a 	mov	r5,r2
    2ee4:	000134c0 	call	134c <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    2ee8:	e03ff615 	stw	zero,-40(fp)
    2eec:	00002006 	br	2f70 <sha1_Final+0x128>
				REVERSE32(context->buffer[j],context->buffer[j]);
    2ef0:	e0fffc17 	ldw	r3,-16(fp)
    2ef4:	e0bff617 	ldw	r2,-40(fp)
    2ef8:	108001c4 	addi	r2,r2,7
    2efc:	1085883a 	add	r2,r2,r2
    2f00:	1085883a 	add	r2,r2,r2
    2f04:	1885883a 	add	r2,r3,r2
    2f08:	10800017 	ldw	r2,0(r2)
    2f0c:	e0bff915 	stw	r2,-28(fp)
    2f10:	e0bff917 	ldw	r2,-28(fp)
    2f14:	1004143a 	roli	r2,r2,16
    2f18:	e0bff915 	stw	r2,-28(fp)
    2f1c:	e0fff917 	ldw	r3,-28(fp)
    2f20:	00bfc074 	movhi	r2,65281
    2f24:	10bfc004 	addi	r2,r2,-256
    2f28:	1884703a 	and	r2,r3,r2
    2f2c:	1006d23a 	srli	r3,r2,8
    2f30:	e13ff917 	ldw	r4,-28(fp)
    2f34:	00803ff4 	movhi	r2,255
    2f38:	10803fc4 	addi	r2,r2,255
    2f3c:	2084703a 	and	r2,r4,r2
    2f40:	1004923a 	slli	r2,r2,8
    2f44:	1886b03a 	or	r3,r3,r2
    2f48:	e13ffc17 	ldw	r4,-16(fp)
    2f4c:	e0bff617 	ldw	r2,-40(fp)
    2f50:	108001c4 	addi	r2,r2,7
    2f54:	1085883a 	add	r2,r2,r2
    2f58:	1085883a 	add	r2,r2,r2
    2f5c:	2085883a 	add	r2,r4,r2
    2f60:	10c00015 	stw	r3,0(r2)
		if (usedspace > SHA1_SHORT_BLOCK_LENGTH) {
			memzero(((uint8_t*)context->buffer) + usedspace, SHA1_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    2f64:	e0bff617 	ldw	r2,-40(fp)
    2f68:	10800044 	addi	r2,r2,1
    2f6c:	e0bff615 	stw	r2,-40(fp)
    2f70:	e0bff617 	ldw	r2,-40(fp)
    2f74:	10800410 	cmplti	r2,r2,16
    2f78:	103fdd1e 	bne	r2,zero,2ef0 <__alt_mem_epcs_flash_controller+0xfdff9ef0>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			/* Do second-to-last transform: */
			sha1_Transform(context->state, context->buffer, context->state);
    2f7c:	e0fffc17 	ldw	r3,-16(fp)
    2f80:	e0bffc17 	ldw	r2,-16(fp)
    2f84:	10800704 	addi	r2,r2,28
    2f88:	e13ffc17 	ldw	r4,-16(fp)
    2f8c:	200d883a 	mov	r6,r4
    2f90:	100b883a 	mov	r5,r2
    2f94:	1809883a 	mov	r4,r3
    2f98:	00022940 	call	2294 <sha1_Transform>

			/* And prepare the last transform: */
			usedspace = 0;
    2f9c:	e03ff515 	stw	zero,-44(fp)
		}
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA1_SHORT_BLOCK_LENGTH - usedspace);
    2fa0:	e0bffc17 	ldw	r2,-16(fp)
    2fa4:	10c00704 	addi	r3,r2,28
    2fa8:	e0bff517 	ldw	r2,-44(fp)
    2fac:	1889883a 	add	r4,r3,r2
    2fb0:	00c00e04 	movi	r3,56
    2fb4:	e0bff517 	ldw	r2,-44(fp)
    2fb8:	1885c83a 	sub	r2,r3,r2
    2fbc:	100b883a 	mov	r5,r2
    2fc0:	000134c0 	call	134c <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    2fc4:	e03ff715 	stw	zero,-36(fp)
    2fc8:	00002006 	br	304c <sha1_Final+0x204>
			REVERSE32(context->buffer[j],context->buffer[j]);
    2fcc:	e0fffc17 	ldw	r3,-16(fp)
    2fd0:	e0bff717 	ldw	r2,-36(fp)
    2fd4:	108001c4 	addi	r2,r2,7
    2fd8:	1085883a 	add	r2,r2,r2
    2fdc:	1085883a 	add	r2,r2,r2
    2fe0:	1885883a 	add	r2,r3,r2
    2fe4:	10800017 	ldw	r2,0(r2)
    2fe8:	e0bffa15 	stw	r2,-24(fp)
    2fec:	e0bffa17 	ldw	r2,-24(fp)
    2ff0:	1004143a 	roli	r2,r2,16
    2ff4:	e0bffa15 	stw	r2,-24(fp)
    2ff8:	e0fffa17 	ldw	r3,-24(fp)
    2ffc:	00bfc074 	movhi	r2,65281
    3000:	10bfc004 	addi	r2,r2,-256
    3004:	1884703a 	and	r2,r3,r2
    3008:	1006d23a 	srli	r3,r2,8
    300c:	e13ffa17 	ldw	r4,-24(fp)
    3010:	00803ff4 	movhi	r2,255
    3014:	10803fc4 	addi	r2,r2,255
    3018:	2084703a 	and	r2,r4,r2
    301c:	1004923a 	slli	r2,r2,8
    3020:	1886b03a 	or	r3,r3,r2
    3024:	e13ffc17 	ldw	r4,-16(fp)
    3028:	e0bff717 	ldw	r2,-36(fp)
    302c:	108001c4 	addi	r2,r2,7
    3030:	1085883a 	add	r2,r2,r2
    3034:	1085883a 	add	r2,r2,r2
    3038:	2085883a 	add	r2,r4,r2
    303c:	10c00015 	stw	r3,0(r2)
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA1_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    3040:	e0bff717 	ldw	r2,-36(fp)
    3044:	10800044 	addi	r2,r2,1
    3048:	e0bff715 	stw	r2,-36(fp)
    304c:	e0bff717 	ldw	r2,-36(fp)
    3050:	10800390 	cmplti	r2,r2,14
    3054:	103fdd1e 	bne	r2,zero,2fcc <__alt_mem_epcs_flash_controller+0xfdff9fcc>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Set the bit count: */
		context->buffer[14] = context->bitcount >> 32;
    3058:	e13ffc17 	ldw	r4,-16(fp)
    305c:	20800517 	ldw	r2,20(r4)
    3060:	20c00617 	ldw	r3,24(r4)
    3064:	1820d83a 	srl	r16,r3,zero
    3068:	0023883a 	mov	r17,zero
    306c:	8007883a 	mov	r3,r16
    3070:	e0bffc17 	ldw	r2,-16(fp)
    3074:	10c01515 	stw	r3,84(r2)
		context->buffer[15] = context->bitcount & 0xffffffff;
    3078:	e13ffc17 	ldw	r4,-16(fp)
    307c:	20800517 	ldw	r2,20(r4)
    3080:	20c00617 	ldw	r3,24(r4)
    3084:	1007883a 	mov	r3,r2
    3088:	e0bffc17 	ldw	r2,-16(fp)
    308c:	10c01615 	stw	r3,88(r2)

		/* Final transform: */
		sha1_Transform(context->state, context->buffer, context->state);
    3090:	e0fffc17 	ldw	r3,-16(fp)
    3094:	e0bffc17 	ldw	r2,-16(fp)
    3098:	10800704 	addi	r2,r2,28
    309c:	e13ffc17 	ldw	r4,-16(fp)
    30a0:	200d883a 	mov	r6,r4
    30a4:	100b883a 	mov	r5,r2
    30a8:	1809883a 	mov	r4,r3
    30ac:	00022940 	call	2294 <sha1_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 5; j++) {
    30b0:	e03ff815 	stw	zero,-32(fp)
    30b4:	00001e06 	br	3130 <sha1_Final+0x2e8>
			REVERSE32(context->state[j],context->state[j]);
    30b8:	e0fffc17 	ldw	r3,-16(fp)
    30bc:	e0bff817 	ldw	r2,-32(fp)
    30c0:	1085883a 	add	r2,r2,r2
    30c4:	1085883a 	add	r2,r2,r2
    30c8:	1885883a 	add	r2,r3,r2
    30cc:	10800017 	ldw	r2,0(r2)
    30d0:	e0bffb15 	stw	r2,-20(fp)
    30d4:	e0bffb17 	ldw	r2,-20(fp)
    30d8:	1004143a 	roli	r2,r2,16
    30dc:	e0bffb15 	stw	r2,-20(fp)
    30e0:	e0fffb17 	ldw	r3,-20(fp)
    30e4:	00bfc074 	movhi	r2,65281
    30e8:	10bfc004 	addi	r2,r2,-256
    30ec:	1884703a 	and	r2,r3,r2
    30f0:	1006d23a 	srli	r3,r2,8
    30f4:	e13ffb17 	ldw	r4,-20(fp)
    30f8:	00803ff4 	movhi	r2,255
    30fc:	10803fc4 	addi	r2,r2,255
    3100:	2084703a 	and	r2,r4,r2
    3104:	1004923a 	slli	r2,r2,8
    3108:	1886b03a 	or	r3,r3,r2
    310c:	e13ffc17 	ldw	r4,-16(fp)
    3110:	e0bff817 	ldw	r2,-32(fp)
    3114:	1085883a 	add	r2,r2,r2
    3118:	1085883a 	add	r2,r2,r2
    311c:	2085883a 	add	r2,r4,r2
    3120:	10c00015 	stw	r3,0(r2)
		/* Final transform: */
		sha1_Transform(context->state, context->buffer, context->state);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 5; j++) {
    3124:	e0bff817 	ldw	r2,-32(fp)
    3128:	10800044 	addi	r2,r2,1
    312c:	e0bff815 	stw	r2,-32(fp)
    3130:	e0bff817 	ldw	r2,-32(fp)
    3134:	10800150 	cmplti	r2,r2,5
    3138:	103fdf1e 	bne	r2,zero,30b8 <__alt_mem_epcs_flash_controller+0xfdffa0b8>
			REVERSE32(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA1_DIGEST_LENGTH);
    313c:	e0bffc17 	ldw	r2,-16(fp)
    3140:	01800504 	movi	r6,20
    3144:	100b883a 	mov	r5,r2
    3148:	e13ffd17 	ldw	r4,-12(fp)
    314c:	00064d00 	call	64d0 <memcpy>
	}

	/* Clean up state data: */
	memzero(context, sizeof(SHA1_CTX));
    3150:	01401704 	movi	r5,92
    3154:	e13ffc17 	ldw	r4,-16(fp)
    3158:	000134c0 	call	134c <memzero>
	usedspace = 0;
    315c:	e03ff515 	stw	zero,-44(fp)
}
    3160:	0001883a 	nop
    3164:	e6fffe04 	addi	sp,fp,-8
    3168:	dfc00317 	ldw	ra,12(sp)
    316c:	df000217 	ldw	fp,8(sp)
    3170:	dc400117 	ldw	r17,4(sp)
    3174:	dc000017 	ldw	r16,0(sp)
    3178:	dec00404 	addi	sp,sp,16
    317c:	f800283a 	ret

00003180 <sha1_End>:

char *sha1_End(SHA1_CTX* context, char buffer[]) {
    3180:	defff504 	addi	sp,sp,-44
    3184:	dfc00a15 	stw	ra,40(sp)
    3188:	df000915 	stw	fp,36(sp)
    318c:	df000904 	addi	fp,sp,36
    3190:	e13ffe15 	stw	r4,-8(fp)
    3194:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA1_DIGEST_LENGTH], *d = digest;
    3198:	e0bff904 	addi	r2,fp,-28
    319c:	e0bff715 	stw	r2,-36(fp)
	int		i;

	if (buffer != (char*)0) {
    31a0:	e0bfff17 	ldw	r2,-4(fp)
    31a4:	10002926 	beq	r2,zero,324c <sha1_End+0xcc>
		sha1_Final(context, digest);
    31a8:	e0bff904 	addi	r2,fp,-28
    31ac:	100b883a 	mov	r5,r2
    31b0:	e13ffe17 	ldw	r4,-8(fp)
    31b4:	0002e480 	call	2e48 <sha1_Final>

		for (i = 0; i < SHA1_DIGEST_LENGTH; i++) {
    31b8:	e03ff815 	stw	zero,-32(fp)
    31bc:	00001d06 	br	3234 <sha1_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    31c0:	e0bfff17 	ldw	r2,-4(fp)
    31c4:	10c00044 	addi	r3,r2,1
    31c8:	e0ffff15 	stw	r3,-4(fp)
    31cc:	d1200017 	ldw	r4,-32768(gp)
    31d0:	e0fff717 	ldw	r3,-36(fp)
    31d4:	18c00003 	ldbu	r3,0(r3)
    31d8:	18c03fcc 	andi	r3,r3,255
    31dc:	1806d13a 	srli	r3,r3,4
    31e0:	18c03fcc 	andi	r3,r3,255
    31e4:	20c7883a 	add	r3,r4,r3
    31e8:	18c00003 	ldbu	r3,0(r3)
    31ec:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    31f0:	e0bfff17 	ldw	r2,-4(fp)
    31f4:	10c00044 	addi	r3,r2,1
    31f8:	e0ffff15 	stw	r3,-4(fp)
    31fc:	d1200017 	ldw	r4,-32768(gp)
    3200:	e0fff717 	ldw	r3,-36(fp)
    3204:	18c00003 	ldbu	r3,0(r3)
    3208:	18c03fcc 	andi	r3,r3,255
    320c:	18c003cc 	andi	r3,r3,15
    3210:	20c7883a 	add	r3,r4,r3
    3214:	18c00003 	ldbu	r3,0(r3)
    3218:	10c00005 	stb	r3,0(r2)
			d++;
    321c:	e0bff717 	ldw	r2,-36(fp)
    3220:	10800044 	addi	r2,r2,1
    3224:	e0bff715 	stw	r2,-36(fp)
	int		i;

	if (buffer != (char*)0) {
		sha1_Final(context, digest);

		for (i = 0; i < SHA1_DIGEST_LENGTH; i++) {
    3228:	e0bff817 	ldw	r2,-32(fp)
    322c:	10800044 	addi	r2,r2,1
    3230:	e0bff815 	stw	r2,-32(fp)
    3234:	e0bff817 	ldw	r2,-32(fp)
    3238:	10800510 	cmplti	r2,r2,20
    323c:	103fe01e 	bne	r2,zero,31c0 <__alt_mem_epcs_flash_controller+0xfdffa1c0>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    3240:	e0bfff17 	ldw	r2,-4(fp)
    3244:	10000005 	stb	zero,0(r2)
    3248:	00000306 	br	3258 <sha1_End+0xd8>
	} else {
		memzero(context, sizeof(SHA1_CTX));
    324c:	01401704 	movi	r5,92
    3250:	e13ffe17 	ldw	r4,-8(fp)
    3254:	000134c0 	call	134c <memzero>
	}
	memzero(digest, SHA1_DIGEST_LENGTH);
    3258:	e0bff904 	addi	r2,fp,-28
    325c:	01400504 	movi	r5,20
    3260:	1009883a 	mov	r4,r2
    3264:	000134c0 	call	134c <memzero>
	return buffer;
    3268:	e0bfff17 	ldw	r2,-4(fp)
}
    326c:	e037883a 	mov	sp,fp
    3270:	dfc00117 	ldw	ra,4(sp)
    3274:	df000017 	ldw	fp,0(sp)
    3278:	dec00204 	addi	sp,sp,8
    327c:	f800283a 	ret

00003280 <sha1_Raw>:

void sha1_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA1_DIGEST_LENGTH]) {
    3280:	deffe404 	addi	sp,sp,-112
    3284:	dfc01b15 	stw	ra,108(sp)
    3288:	df001a15 	stw	fp,104(sp)
    328c:	df001a04 	addi	fp,sp,104
    3290:	e13ffd15 	stw	r4,-12(fp)
    3294:	e17ffe15 	stw	r5,-8(fp)
    3298:	e1bfff15 	stw	r6,-4(fp)
	SHA1_CTX	context;
	sha1_Init(&context);
    329c:	e13fe604 	addi	r4,fp,-104
    32a0:	00022300 	call	2230 <sha1_Init>
	sha1_Update(&context, data, len);
    32a4:	e1bffe17 	ldw	r6,-8(fp)
    32a8:	e17ffd17 	ldw	r5,-12(fp)
    32ac:	e13fe604 	addi	r4,fp,-104
    32b0:	0002a400 	call	2a40 <sha1_Update>
	sha1_Final(&context, digest);
    32b4:	e17fff17 	ldw	r5,-4(fp)
    32b8:	e13fe604 	addi	r4,fp,-104
    32bc:	0002e480 	call	2e48 <sha1_Final>
}
    32c0:	0001883a 	nop
    32c4:	e037883a 	mov	sp,fp
    32c8:	dfc00117 	ldw	ra,4(sp)
    32cc:	df000017 	ldw	fp,0(sp)
    32d0:	dec00204 	addi	sp,sp,8
    32d4:	f800283a 	ret

000032d8 <sha1_Data>:

char* sha1_Data(const sha2_byte* data, size_t len, char digest[SHA1_DIGEST_STRING_LENGTH]) {
    32d8:	deffe404 	addi	sp,sp,-112
    32dc:	dfc01b15 	stw	ra,108(sp)
    32e0:	df001a15 	stw	fp,104(sp)
    32e4:	df001a04 	addi	fp,sp,104
    32e8:	e13ffd15 	stw	r4,-12(fp)
    32ec:	e17ffe15 	stw	r5,-8(fp)
    32f0:	e1bfff15 	stw	r6,-4(fp)
	SHA1_CTX	context;

	sha1_Init(&context);
    32f4:	e13fe604 	addi	r4,fp,-104
    32f8:	00022300 	call	2230 <sha1_Init>
	sha1_Update(&context, data, len);
    32fc:	e1bffe17 	ldw	r6,-8(fp)
    3300:	e17ffd17 	ldw	r5,-12(fp)
    3304:	e13fe604 	addi	r4,fp,-104
    3308:	0002a400 	call	2a40 <sha1_Update>
	return sha1_End(&context, digest);
    330c:	e17fff17 	ldw	r5,-4(fp)
    3310:	e13fe604 	addi	r4,fp,-104
    3314:	00031800 	call	3180 <sha1_End>
}
    3318:	e037883a 	mov	sp,fp
    331c:	dfc00117 	ldw	ra,4(sp)
    3320:	df000017 	ldw	fp,0(sp)
    3324:	dec00204 	addi	sp,sp,8
    3328:	f800283a 	ret

0000332c <sha256_Init>:

/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context) {
    332c:	defffd04 	addi	sp,sp,-12
    3330:	dfc00215 	stw	ra,8(sp)
    3334:	df000115 	stw	fp,4(sp)
    3338:	df000104 	addi	fp,sp,4
    333c:	e13fff15 	stw	r4,-4(fp)
	if (context == (SHA256_CTX*)0) {
    3340:	e0bfff17 	ldw	r2,-4(fp)
    3344:	10000f26 	beq	r2,zero,3384 <sha256_Init+0x58>
		return;
	}
	MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
    3348:	e0bfff17 	ldw	r2,-4(fp)
    334c:	01800804 	movi	r6,32
    3350:	01400074 	movhi	r5,1
    3354:	2944d404 	addi	r5,r5,4944
    3358:	1009883a 	mov	r4,r2
    335c:	00064d00 	call	64d0 <memcpy>
	memzero(context->buffer, SHA256_BLOCK_LENGTH);
    3360:	e0bfff17 	ldw	r2,-4(fp)
    3364:	10800a04 	addi	r2,r2,40
    3368:	01401004 	movi	r5,64
    336c:	1009883a 	mov	r4,r2
    3370:	000134c0 	call	134c <memzero>
	context->bitcount = 0;
    3374:	e0bfff17 	ldw	r2,-4(fp)
    3378:	10000815 	stw	zero,32(r2)
    337c:	10000915 	stw	zero,36(r2)
    3380:	00000106 	br	3388 <sha256_Init+0x5c>
}

/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context) {
	if (context == (SHA256_CTX*)0) {
		return;
    3384:	0001883a 	nop
	}
	MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
	memzero(context->buffer, SHA256_BLOCK_LENGTH);
	context->bitcount = 0;
}
    3388:	e037883a 	mov	sp,fp
    338c:	dfc00117 	ldw	ra,4(sp)
    3390:	df000017 	ldw	fp,0(sp)
    3394:	dec00204 	addi	sp,sp,8
    3398:	f800283a 	ret

0000339c <sha256_Transform>:
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha256_Transform(const sha2_word32* state_in, const sha2_word32* data, sha2_word32* state_out) {
    339c:	deffdf04 	addi	sp,sp,-132
    33a0:	df002015 	stw	fp,128(sp)
    33a4:	df002004 	addi	fp,sp,128
    33a8:	e13ffd15 	stw	r4,-12(fp)
    33ac:	e17ffe15 	stw	r5,-8(fp)
    33b0:	e1bfff15 	stw	r6,-4(fp)
	sha2_word32	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word32	T1, T2, W256[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    33b4:	e0bffd17 	ldw	r2,-12(fp)
    33b8:	10800017 	ldw	r2,0(r2)
    33bc:	e0bfe015 	stw	r2,-128(fp)
	b = state_in[1];
    33c0:	e0bffd17 	ldw	r2,-12(fp)
    33c4:	10800117 	ldw	r2,4(r2)
    33c8:	e0bfe115 	stw	r2,-124(fp)
	c = state_in[2];
    33cc:	e0bffd17 	ldw	r2,-12(fp)
    33d0:	10800217 	ldw	r2,8(r2)
    33d4:	e0bfe215 	stw	r2,-120(fp)
	d = state_in[3];
    33d8:	e0bffd17 	ldw	r2,-12(fp)
    33dc:	10800317 	ldw	r2,12(r2)
    33e0:	e0bfe315 	stw	r2,-116(fp)
	e = state_in[4];
    33e4:	e0bffd17 	ldw	r2,-12(fp)
    33e8:	10800417 	ldw	r2,16(r2)
    33ec:	e0bfe415 	stw	r2,-112(fp)
	f = state_in[5];
    33f0:	e0bffd17 	ldw	r2,-12(fp)
    33f4:	10800517 	ldw	r2,20(r2)
    33f8:	e0bfe515 	stw	r2,-108(fp)
	g = state_in[6];
    33fc:	e0bffd17 	ldw	r2,-12(fp)
    3400:	10800617 	ldw	r2,24(r2)
    3404:	e0bfe615 	stw	r2,-104(fp)
	h = state_in[7];
    3408:	e0bffd17 	ldw	r2,-12(fp)
    340c:	10800717 	ldw	r2,28(r2)
    3410:	e0bfe715 	stw	r2,-100(fp)

	j = 0;
    3414:	e03fe815 	stw	zero,-96(fp)
	do {
		/* Apply the SHA-256 compression function to update a..h with copy */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
    3418:	e0ffe417 	ldw	r3,-112(fp)
    341c:	00800184 	movi	r2,6
    3420:	1886583a 	ror	r3,r3,r2
    3424:	e13fe417 	ldw	r4,-112(fp)
    3428:	008002c4 	movi	r2,11
    342c:	2084583a 	ror	r2,r4,r2
    3430:	1886f03a 	xor	r3,r3,r2
    3434:	e0bfe417 	ldw	r2,-112(fp)
    3438:	100411fa 	roli	r2,r2,7
    343c:	1886f03a 	xor	r3,r3,r2
    3440:	e0bfe717 	ldw	r2,-100(fp)
    3444:	1887883a 	add	r3,r3,r2
    3448:	e13fe417 	ldw	r4,-112(fp)
    344c:	e0bfe517 	ldw	r2,-108(fp)
    3450:	2088703a 	and	r4,r4,r2
    3454:	e0bfe417 	ldw	r2,-112(fp)
    3458:	008a303a 	nor	r5,zero,r2
    345c:	e0bfe617 	ldw	r2,-104(fp)
    3460:	2884703a 	and	r2,r5,r2
    3464:	2084f03a 	xor	r2,r4,r2
    3468:	1889883a 	add	r4,r3,r2
    346c:	00800074 	movhi	r2,1
    3470:	10849404 	addi	r2,r2,4688
    3474:	e0ffe817 	ldw	r3,-96(fp)
    3478:	18c7883a 	add	r3,r3,r3
    347c:	18c7883a 	add	r3,r3,r3
    3480:	10c5883a 	add	r2,r2,r3
    3484:	10800017 	ldw	r2,0(r2)
    3488:	2087883a 	add	r3,r4,r2
    348c:	e0bffe17 	ldw	r2,-8(fp)
    3490:	11000104 	addi	r4,r2,4
    3494:	e13ffe15 	stw	r4,-8(fp)
    3498:	11000017 	ldw	r4,0(r2)
    349c:	e0bfe817 	ldw	r2,-96(fp)
    34a0:	1085883a 	add	r2,r2,r2
    34a4:	1085883a 	add	r2,r2,r2
    34a8:	e17fe004 	addi	r5,fp,-128
    34ac:	2885883a 	add	r2,r5,r2
    34b0:	10800d04 	addi	r2,r2,52
    34b4:	11000015 	stw	r4,0(r2)
    34b8:	e0bfe817 	ldw	r2,-96(fp)
    34bc:	1085883a 	add	r2,r2,r2
    34c0:	1085883a 	add	r2,r2,r2
    34c4:	e1bfe004 	addi	r6,fp,-128
    34c8:	3085883a 	add	r2,r6,r2
    34cc:	10800d04 	addi	r2,r2,52
    34d0:	10800017 	ldw	r2,0(r2)
    34d4:	1885883a 	add	r2,r3,r2
    34d8:	e0bfe915 	stw	r2,-92(fp)
		T2 = Sigma0_256(a) + Maj(a, b, c);
    34dc:	e0ffe017 	ldw	r3,-128(fp)
    34e0:	00800084 	movi	r2,2
    34e4:	1886583a 	ror	r3,r3,r2
    34e8:	e13fe017 	ldw	r4,-128(fp)
    34ec:	00800344 	movi	r2,13
    34f0:	2084583a 	ror	r2,r4,r2
    34f4:	1886f03a 	xor	r3,r3,r2
    34f8:	e0bfe017 	ldw	r2,-128(fp)
    34fc:	100412ba 	roli	r2,r2,10
    3500:	1886f03a 	xor	r3,r3,r2
    3504:	e13fe017 	ldw	r4,-128(fp)
    3508:	e0bfe117 	ldw	r2,-124(fp)
    350c:	2088703a 	and	r4,r4,r2
    3510:	e17fe017 	ldw	r5,-128(fp)
    3514:	e0bfe217 	ldw	r2,-120(fp)
    3518:	2884703a 	and	r2,r5,r2
    351c:	2088f03a 	xor	r4,r4,r2
    3520:	e17fe117 	ldw	r5,-124(fp)
    3524:	e0bfe217 	ldw	r2,-120(fp)
    3528:	2884703a 	and	r2,r5,r2
    352c:	2084f03a 	xor	r2,r4,r2
    3530:	1885883a 	add	r2,r3,r2
    3534:	e0bfea15 	stw	r2,-88(fp)
		h = g;
    3538:	e0bfe617 	ldw	r2,-104(fp)
    353c:	e0bfe715 	stw	r2,-100(fp)
		g = f;
    3540:	e0bfe517 	ldw	r2,-108(fp)
    3544:	e0bfe615 	stw	r2,-104(fp)
		f = e;
    3548:	e0bfe417 	ldw	r2,-112(fp)
    354c:	e0bfe515 	stw	r2,-108(fp)
		e = d + T1;
    3550:	e0ffe317 	ldw	r3,-116(fp)
    3554:	e0bfe917 	ldw	r2,-92(fp)
    3558:	1885883a 	add	r2,r3,r2
    355c:	e0bfe415 	stw	r2,-112(fp)
		d = c;
    3560:	e0bfe217 	ldw	r2,-120(fp)
    3564:	e0bfe315 	stw	r2,-116(fp)
		c = b;
    3568:	e0bfe117 	ldw	r2,-124(fp)
    356c:	e0bfe215 	stw	r2,-120(fp)
		b = a;
    3570:	e0bfe017 	ldw	r2,-128(fp)
    3574:	e0bfe115 	stw	r2,-124(fp)
		a = T1 + T2;
    3578:	e0ffe917 	ldw	r3,-92(fp)
    357c:	e0bfea17 	ldw	r2,-88(fp)
    3580:	1885883a 	add	r2,r3,r2
    3584:	e0bfe015 	stw	r2,-128(fp)

		j++;
    3588:	e0bfe817 	ldw	r2,-96(fp)
    358c:	10800044 	addi	r2,r2,1
    3590:	e0bfe815 	stw	r2,-96(fp)
	} while (j < 16);
    3594:	e0bfe817 	ldw	r2,-96(fp)
    3598:	10800410 	cmplti	r2,r2,16
    359c:	103f9e1e 	bne	r2,zero,3418 <__alt_mem_epcs_flash_controller+0xfdffa418>

	do {
		/* Part of the message block expansion: */
		s0 = W256[(j+1)&0x0f];
    35a0:	e0bfe817 	ldw	r2,-96(fp)
    35a4:	10800044 	addi	r2,r2,1
    35a8:	108003cc 	andi	r2,r2,15
    35ac:	1085883a 	add	r2,r2,r2
    35b0:	1085883a 	add	r2,r2,r2
    35b4:	e0ffe004 	addi	r3,fp,-128
    35b8:	1885883a 	add	r2,r3,r2
    35bc:	10800d04 	addi	r2,r2,52
    35c0:	10800017 	ldw	r2,0(r2)
    35c4:	e0bfeb15 	stw	r2,-84(fp)
		s0 = sigma0_256(s0);
    35c8:	e0ffeb17 	ldw	r3,-84(fp)
    35cc:	008001c4 	movi	r2,7
    35d0:	1886583a 	ror	r3,r3,r2
    35d4:	e0bfeb17 	ldw	r2,-84(fp)
    35d8:	100413ba 	roli	r2,r2,14
    35dc:	1886f03a 	xor	r3,r3,r2
    35e0:	e0bfeb17 	ldw	r2,-84(fp)
    35e4:	1004d0fa 	srli	r2,r2,3
    35e8:	1884f03a 	xor	r2,r3,r2
    35ec:	e0bfeb15 	stw	r2,-84(fp)
		s1 = W256[(j+14)&0x0f];	
    35f0:	e0bfe817 	ldw	r2,-96(fp)
    35f4:	10800384 	addi	r2,r2,14
    35f8:	108003cc 	andi	r2,r2,15
    35fc:	1085883a 	add	r2,r2,r2
    3600:	1085883a 	add	r2,r2,r2
    3604:	e13fe004 	addi	r4,fp,-128
    3608:	2085883a 	add	r2,r4,r2
    360c:	10800d04 	addi	r2,r2,52
    3610:	10800017 	ldw	r2,0(r2)
    3614:	e0bfec15 	stw	r2,-80(fp)
		s1 = sigma1_256(s1);
    3618:	e0bfec17 	ldw	r2,-80(fp)
    361c:	100613fa 	roli	r3,r2,15
    3620:	e0bfec17 	ldw	r2,-80(fp)
    3624:	1004137a 	roli	r2,r2,13
    3628:	1886f03a 	xor	r3,r3,r2
    362c:	e0bfec17 	ldw	r2,-80(fp)
    3630:	1004d2ba 	srli	r2,r2,10
    3634:	1884f03a 	xor	r2,r3,r2
    3638:	e0bfec15 	stw	r2,-80(fp)

		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + 
    363c:	e0ffe417 	ldw	r3,-112(fp)
    3640:	00800184 	movi	r2,6
    3644:	1886583a 	ror	r3,r3,r2
    3648:	e13fe417 	ldw	r4,-112(fp)
    364c:	008002c4 	movi	r2,11
    3650:	2084583a 	ror	r2,r4,r2
    3654:	1886f03a 	xor	r3,r3,r2
    3658:	e0bfe417 	ldw	r2,-112(fp)
    365c:	100411fa 	roli	r2,r2,7
    3660:	1886f03a 	xor	r3,r3,r2
    3664:	e0bfe717 	ldw	r2,-100(fp)
    3668:	1887883a 	add	r3,r3,r2
    366c:	e13fe417 	ldw	r4,-112(fp)
    3670:	e0bfe517 	ldw	r2,-108(fp)
    3674:	2088703a 	and	r4,r4,r2
    3678:	e0bfe417 	ldw	r2,-112(fp)
    367c:	008a303a 	nor	r5,zero,r2
    3680:	e0bfe617 	ldw	r2,-104(fp)
    3684:	2884703a 	and	r2,r5,r2
    3688:	2084f03a 	xor	r2,r4,r2
    368c:	1889883a 	add	r4,r3,r2
    3690:	00800074 	movhi	r2,1
    3694:	10849404 	addi	r2,r2,4688
    3698:	e0ffe817 	ldw	r3,-96(fp)
    369c:	18c7883a 	add	r3,r3,r3
    36a0:	18c7883a 	add	r3,r3,r3
    36a4:	10c5883a 	add	r2,r2,r3
    36a8:	10800017 	ldw	r2,0(r2)
    36ac:	2089883a 	add	r4,r4,r2
		     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
    36b0:	e0bfe817 	ldw	r2,-96(fp)
    36b4:	108003cc 	andi	r2,r2,15
    36b8:	e0ffe817 	ldw	r3,-96(fp)
    36bc:	18c003cc 	andi	r3,r3,15
    36c0:	18c7883a 	add	r3,r3,r3
    36c4:	18c7883a 	add	r3,r3,r3
    36c8:	e17fe004 	addi	r5,fp,-128
    36cc:	28c7883a 	add	r3,r5,r3
    36d0:	18c00d04 	addi	r3,r3,52
    36d4:	19400017 	ldw	r5,0(r3)
    36d8:	e0ffe817 	ldw	r3,-96(fp)
    36dc:	18c00244 	addi	r3,r3,9
    36e0:	18c003cc 	andi	r3,r3,15
    36e4:	18c7883a 	add	r3,r3,r3
    36e8:	18c7883a 	add	r3,r3,r3
    36ec:	e1bfe004 	addi	r6,fp,-128
    36f0:	30c7883a 	add	r3,r6,r3
    36f4:	18c00d04 	addi	r3,r3,52
    36f8:	19800017 	ldw	r6,0(r3)
    36fc:	e0ffec17 	ldw	r3,-80(fp)
    3700:	30cd883a 	add	r6,r6,r3
    3704:	e0ffeb17 	ldw	r3,-84(fp)
    3708:	30c7883a 	add	r3,r6,r3
    370c:	28cb883a 	add	r5,r5,r3
    3710:	1087883a 	add	r3,r2,r2
    3714:	18c7883a 	add	r3,r3,r3
    3718:	e1bfe004 	addi	r6,fp,-128
    371c:	30c7883a 	add	r3,r6,r3
    3720:	18c00d04 	addi	r3,r3,52
    3724:	19400015 	stw	r5,0(r3)
    3728:	1085883a 	add	r2,r2,r2
    372c:	1085883a 	add	r2,r2,r2
    3730:	e0ffe004 	addi	r3,fp,-128
    3734:	1885883a 	add	r2,r3,r2
    3738:	10800d04 	addi	r2,r2,52
    373c:	10800017 	ldw	r2,0(r2)
		s0 = sigma0_256(s0);
		s1 = W256[(j+14)&0x0f];	
		s1 = sigma1_256(s1);

		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + 
    3740:	2085883a 	add	r2,r4,r2
    3744:	e0bfe915 	stw	r2,-92(fp)
		     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
		T2 = Sigma0_256(a) + Maj(a, b, c);
    3748:	e0ffe017 	ldw	r3,-128(fp)
    374c:	00800084 	movi	r2,2
    3750:	1886583a 	ror	r3,r3,r2
    3754:	e13fe017 	ldw	r4,-128(fp)
    3758:	00800344 	movi	r2,13
    375c:	2084583a 	ror	r2,r4,r2
    3760:	1886f03a 	xor	r3,r3,r2
    3764:	e0bfe017 	ldw	r2,-128(fp)
    3768:	100412ba 	roli	r2,r2,10
    376c:	1886f03a 	xor	r3,r3,r2
    3770:	e13fe017 	ldw	r4,-128(fp)
    3774:	e0bfe117 	ldw	r2,-124(fp)
    3778:	2088703a 	and	r4,r4,r2
    377c:	e17fe017 	ldw	r5,-128(fp)
    3780:	e0bfe217 	ldw	r2,-120(fp)
    3784:	2884703a 	and	r2,r5,r2
    3788:	2088f03a 	xor	r4,r4,r2
    378c:	e17fe117 	ldw	r5,-124(fp)
    3790:	e0bfe217 	ldw	r2,-120(fp)
    3794:	2884703a 	and	r2,r5,r2
    3798:	2084f03a 	xor	r2,r4,r2
    379c:	1885883a 	add	r2,r3,r2
    37a0:	e0bfea15 	stw	r2,-88(fp)
		h = g;
    37a4:	e0bfe617 	ldw	r2,-104(fp)
    37a8:	e0bfe715 	stw	r2,-100(fp)
		g = f;
    37ac:	e0bfe517 	ldw	r2,-108(fp)
    37b0:	e0bfe615 	stw	r2,-104(fp)
		f = e;
    37b4:	e0bfe417 	ldw	r2,-112(fp)
    37b8:	e0bfe515 	stw	r2,-108(fp)
		e = d + T1;
    37bc:	e0ffe317 	ldw	r3,-116(fp)
    37c0:	e0bfe917 	ldw	r2,-92(fp)
    37c4:	1885883a 	add	r2,r3,r2
    37c8:	e0bfe415 	stw	r2,-112(fp)
		d = c;
    37cc:	e0bfe217 	ldw	r2,-120(fp)
    37d0:	e0bfe315 	stw	r2,-116(fp)
		c = b;
    37d4:	e0bfe117 	ldw	r2,-124(fp)
    37d8:	e0bfe215 	stw	r2,-120(fp)
		b = a;
    37dc:	e0bfe017 	ldw	r2,-128(fp)
    37e0:	e0bfe115 	stw	r2,-124(fp)
		a = T1 + T2;
    37e4:	e0ffe917 	ldw	r3,-92(fp)
    37e8:	e0bfea17 	ldw	r2,-88(fp)
    37ec:	1885883a 	add	r2,r3,r2
    37f0:	e0bfe015 	stw	r2,-128(fp)

		j++;
    37f4:	e0bfe817 	ldw	r2,-96(fp)
    37f8:	10800044 	addi	r2,r2,1
    37fc:	e0bfe815 	stw	r2,-96(fp)
	} while (j < 64);
    3800:	e0bfe817 	ldw	r2,-96(fp)
    3804:	10801010 	cmplti	r2,r2,64
    3808:	103f651e 	bne	r2,zero,35a0 <__alt_mem_epcs_flash_controller+0xfdffa5a0>

	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    380c:	e0bffd17 	ldw	r2,-12(fp)
    3810:	10c00017 	ldw	r3,0(r2)
    3814:	e0bfe017 	ldw	r2,-128(fp)
    3818:	1887883a 	add	r3,r3,r2
    381c:	e0bfff17 	ldw	r2,-4(fp)
    3820:	10c00015 	stw	r3,0(r2)
	state_out[1] = state_in[1] + b;
    3824:	e0bfff17 	ldw	r2,-4(fp)
    3828:	10800104 	addi	r2,r2,4
    382c:	e0fffd17 	ldw	r3,-12(fp)
    3830:	18c00104 	addi	r3,r3,4
    3834:	19000017 	ldw	r4,0(r3)
    3838:	e0ffe117 	ldw	r3,-124(fp)
    383c:	20c7883a 	add	r3,r4,r3
    3840:	10c00015 	stw	r3,0(r2)
	state_out[2] = state_in[2] + c;
    3844:	e0bfff17 	ldw	r2,-4(fp)
    3848:	10800204 	addi	r2,r2,8
    384c:	e0fffd17 	ldw	r3,-12(fp)
    3850:	18c00204 	addi	r3,r3,8
    3854:	19000017 	ldw	r4,0(r3)
    3858:	e0ffe217 	ldw	r3,-120(fp)
    385c:	20c7883a 	add	r3,r4,r3
    3860:	10c00015 	stw	r3,0(r2)
	state_out[3] = state_in[3] + d;
    3864:	e0bfff17 	ldw	r2,-4(fp)
    3868:	10800304 	addi	r2,r2,12
    386c:	e0fffd17 	ldw	r3,-12(fp)
    3870:	18c00304 	addi	r3,r3,12
    3874:	19000017 	ldw	r4,0(r3)
    3878:	e0ffe317 	ldw	r3,-116(fp)
    387c:	20c7883a 	add	r3,r4,r3
    3880:	10c00015 	stw	r3,0(r2)
	state_out[4] = state_in[4] + e;
    3884:	e0bfff17 	ldw	r2,-4(fp)
    3888:	10800404 	addi	r2,r2,16
    388c:	e0fffd17 	ldw	r3,-12(fp)
    3890:	18c00404 	addi	r3,r3,16
    3894:	19000017 	ldw	r4,0(r3)
    3898:	e0ffe417 	ldw	r3,-112(fp)
    389c:	20c7883a 	add	r3,r4,r3
    38a0:	10c00015 	stw	r3,0(r2)
	state_out[5] = state_in[5] + f;
    38a4:	e0bfff17 	ldw	r2,-4(fp)
    38a8:	10800504 	addi	r2,r2,20
    38ac:	e0fffd17 	ldw	r3,-12(fp)
    38b0:	18c00504 	addi	r3,r3,20
    38b4:	19000017 	ldw	r4,0(r3)
    38b8:	e0ffe517 	ldw	r3,-108(fp)
    38bc:	20c7883a 	add	r3,r4,r3
    38c0:	10c00015 	stw	r3,0(r2)
	state_out[6] = state_in[6] + g;
    38c4:	e0bfff17 	ldw	r2,-4(fp)
    38c8:	10800604 	addi	r2,r2,24
    38cc:	e0fffd17 	ldw	r3,-12(fp)
    38d0:	18c00604 	addi	r3,r3,24
    38d4:	19000017 	ldw	r4,0(r3)
    38d8:	e0ffe617 	ldw	r3,-104(fp)
    38dc:	20c7883a 	add	r3,r4,r3
    38e0:	10c00015 	stw	r3,0(r2)
	state_out[7] = state_in[7] + h;
    38e4:	e0bfff17 	ldw	r2,-4(fp)
    38e8:	10800704 	addi	r2,r2,28
    38ec:	e0fffd17 	ldw	r3,-12(fp)
    38f0:	18c00704 	addi	r3,r3,28
    38f4:	19000017 	ldw	r4,0(r3)
    38f8:	e0ffe717 	ldw	r3,-100(fp)
    38fc:	20c7883a 	add	r3,r4,r3
    3900:	10c00015 	stw	r3,0(r2)

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
    3904:	e03fea15 	stw	zero,-88(fp)
    3908:	e0bfea17 	ldw	r2,-88(fp)
    390c:	e0bfe915 	stw	r2,-92(fp)
    3910:	e0bfe917 	ldw	r2,-92(fp)
    3914:	e0bfe715 	stw	r2,-100(fp)
    3918:	e0bfe717 	ldw	r2,-100(fp)
    391c:	e0bfe615 	stw	r2,-104(fp)
    3920:	e0bfe617 	ldw	r2,-104(fp)
    3924:	e0bfe515 	stw	r2,-108(fp)
    3928:	e0bfe517 	ldw	r2,-108(fp)
    392c:	e0bfe415 	stw	r2,-112(fp)
    3930:	e0bfe417 	ldw	r2,-112(fp)
    3934:	e0bfe315 	stw	r2,-116(fp)
    3938:	e0bfe317 	ldw	r2,-116(fp)
    393c:	e0bfe215 	stw	r2,-120(fp)
    3940:	e0bfe217 	ldw	r2,-120(fp)
    3944:	e0bfe115 	stw	r2,-124(fp)
    3948:	e0bfe117 	ldw	r2,-124(fp)
    394c:	e0bfe015 	stw	r2,-128(fp)
}
    3950:	0001883a 	nop
    3954:	e037883a 	mov	sp,fp
    3958:	df000017 	ldw	fp,0(sp)
    395c:	dec00104 	addi	sp,sp,4
    3960:	f800283a 	ret

00003964 <sha256_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha256_Update(SHA256_CTX* context, const sha2_byte *data, size_t len) {
    3964:	deffef04 	addi	sp,sp,-68
    3968:	dfc01015 	stw	ra,64(sp)
    396c:	df000f15 	stw	fp,60(sp)
    3970:	dd400e15 	stw	r21,56(sp)
    3974:	dd000d15 	stw	r20,52(sp)
    3978:	dcc00c15 	stw	r19,48(sp)
    397c:	dc800b15 	stw	r18,44(sp)
    3980:	dc400a15 	stw	r17,40(sp)
    3984:	dc000915 	stw	r16,36(sp)
    3988:	df000f04 	addi	fp,sp,60
    398c:	e13ff715 	stw	r4,-36(fp)
    3990:	e17ff815 	stw	r5,-32(fp)
    3994:	e1bff915 	stw	r6,-28(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    3998:	e0bff917 	ldw	r2,-28(fp)
    399c:	1000e726 	beq	r2,zero,3d3c <sha256_Update+0x3d8>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    39a0:	e13ff717 	ldw	r4,-36(fp)
    39a4:	20800817 	ldw	r2,32(r4)
    39a8:	20c00917 	ldw	r3,36(r4)
    39ac:	1808977a 	slli	r4,r3,29
    39b0:	100ed0fa 	srli	r7,r2,3
    39b4:	21ceb03a 	or	r7,r4,r7
    39b8:	1810d0fa 	srli	r8,r3,3
    39bc:	3805883a 	mov	r2,r7
    39c0:	10800fcc 	andi	r2,r2,63
    39c4:	e0bff315 	stw	r2,-52(fp)
	if (usedspace > 0) {
    39c8:	e0bff317 	ldw	r2,-52(fp)
    39cc:	1000bb26 	beq	r2,zero,3cbc <sha256_Update+0x358>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA256_BLOCK_LENGTH - usedspace;
    39d0:	00c01004 	movi	r3,64
    39d4:	e0bff317 	ldw	r2,-52(fp)
    39d8:	1885c83a 	sub	r2,r3,r2
    39dc:	e0bff415 	stw	r2,-48(fp)

		if (len >= freespace) {
    39e0:	e0fff917 	ldw	r3,-28(fp)
    39e4:	e0bff417 	ldw	r2,-48(fp)
    39e8:	18804f36 	bltu	r3,r2,3b28 <sha256_Update+0x1c4>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    39ec:	e0bff717 	ldw	r2,-36(fp)
    39f0:	10c00a04 	addi	r3,r2,40
    39f4:	e0bff317 	ldw	r2,-52(fp)
    39f8:	1885883a 	add	r2,r3,r2
    39fc:	e1bff417 	ldw	r6,-48(fp)
    3a00:	e17ff817 	ldw	r5,-32(fp)
    3a04:	1009883a 	mov	r4,r2
    3a08:	00064d00 	call	64d0 <memcpy>
			context->bitcount += freespace << 3;
    3a0c:	e0bff717 	ldw	r2,-36(fp)
    3a10:	11000817 	ldw	r4,32(r2)
    3a14:	11400917 	ldw	r5,36(r2)
    3a18:	e0bff417 	ldw	r2,-48(fp)
    3a1c:	100490fa 	slli	r2,r2,3
    3a20:	1029883a 	mov	r20,r2
    3a24:	002b883a 	mov	r21,zero
    3a28:	2505883a 	add	r2,r4,r20
    3a2c:	110d803a 	cmpltu	r6,r2,r4
    3a30:	2d47883a 	add	r3,r5,r21
    3a34:	30c9883a 	add	r4,r6,r3
    3a38:	2007883a 	mov	r3,r4
    3a3c:	1009883a 	mov	r4,r2
    3a40:	180b883a 	mov	r5,r3
    3a44:	e0bff717 	ldw	r2,-36(fp)
    3a48:	11000815 	stw	r4,32(r2)
    3a4c:	11400915 	stw	r5,36(r2)
			len -= freespace;
    3a50:	e0fff917 	ldw	r3,-28(fp)
    3a54:	e0bff417 	ldw	r2,-48(fp)
    3a58:	1885c83a 	sub	r2,r3,r2
    3a5c:	e0bff915 	stw	r2,-28(fp)
			data += freespace;
    3a60:	e0fff817 	ldw	r3,-32(fp)
    3a64:	e0bff417 	ldw	r2,-48(fp)
    3a68:	1885883a 	add	r2,r3,r2
    3a6c:	e0bff815 	stw	r2,-32(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    3a70:	e03ff115 	stw	zero,-60(fp)
    3a74:	00002006 	br	3af8 <sha256_Update+0x194>
				REVERSE32(context->buffer[j],context->buffer[j]);
    3a78:	e0fff717 	ldw	r3,-36(fp)
    3a7c:	e0bff117 	ldw	r2,-60(fp)
    3a80:	10800284 	addi	r2,r2,10
    3a84:	1085883a 	add	r2,r2,r2
    3a88:	1085883a 	add	r2,r2,r2
    3a8c:	1885883a 	add	r2,r3,r2
    3a90:	10800017 	ldw	r2,0(r2)
    3a94:	e0bff515 	stw	r2,-44(fp)
    3a98:	e0bff517 	ldw	r2,-44(fp)
    3a9c:	1004143a 	roli	r2,r2,16
    3aa0:	e0bff515 	stw	r2,-44(fp)
    3aa4:	e0fff517 	ldw	r3,-44(fp)
    3aa8:	00bfc074 	movhi	r2,65281
    3aac:	10bfc004 	addi	r2,r2,-256
    3ab0:	1884703a 	and	r2,r3,r2
    3ab4:	1006d23a 	srli	r3,r2,8
    3ab8:	e13ff517 	ldw	r4,-44(fp)
    3abc:	00803ff4 	movhi	r2,255
    3ac0:	10803fc4 	addi	r2,r2,255
    3ac4:	2084703a 	and	r2,r4,r2
    3ac8:	1004923a 	slli	r2,r2,8
    3acc:	1886b03a 	or	r3,r3,r2
    3ad0:	e13ff717 	ldw	r4,-36(fp)
    3ad4:	e0bff117 	ldw	r2,-60(fp)
    3ad8:	10800284 	addi	r2,r2,10
    3adc:	1085883a 	add	r2,r2,r2
    3ae0:	1085883a 	add	r2,r2,r2
    3ae4:	2085883a 	add	r2,r4,r2
    3ae8:	10c00015 	stw	r3,0(r2)
			context->bitcount += freespace << 3;
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    3aec:	e0bff117 	ldw	r2,-60(fp)
    3af0:	10800044 	addi	r2,r2,1
    3af4:	e0bff115 	stw	r2,-60(fp)
    3af8:	e0bff117 	ldw	r2,-60(fp)
    3afc:	10800410 	cmplti	r2,r2,16
    3b00:	103fdd1e 	bne	r2,zero,3a78 <__alt_mem_epcs_flash_controller+0xfdffaa78>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			sha256_Transform(context->state, context->buffer, context->state);
    3b04:	e0fff717 	ldw	r3,-36(fp)
    3b08:	e0bff717 	ldw	r2,-36(fp)
    3b0c:	10800a04 	addi	r2,r2,40
    3b10:	e13ff717 	ldw	r4,-36(fp)
    3b14:	200d883a 	mov	r6,r4
    3b18:	100b883a 	mov	r5,r2
    3b1c:	1809883a 	mov	r4,r3
    3b20:	000339c0 	call	339c <sha256_Transform>
    3b24:	00006506 	br	3cbc <sha256_Update+0x358>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    3b28:	e0bff717 	ldw	r2,-36(fp)
    3b2c:	10c00a04 	addi	r3,r2,40
    3b30:	e0bff317 	ldw	r2,-52(fp)
    3b34:	1885883a 	add	r2,r3,r2
    3b38:	e1bff917 	ldw	r6,-28(fp)
    3b3c:	e17ff817 	ldw	r5,-32(fp)
    3b40:	1009883a 	mov	r4,r2
    3b44:	00064d00 	call	64d0 <memcpy>
			context->bitcount += len << 3;
    3b48:	e0bff717 	ldw	r2,-36(fp)
    3b4c:	11000817 	ldw	r4,32(r2)
    3b50:	11400917 	ldw	r5,36(r2)
    3b54:	e0bff917 	ldw	r2,-28(fp)
    3b58:	100490fa 	slli	r2,r2,3
    3b5c:	1025883a 	mov	r18,r2
    3b60:	0027883a 	mov	r19,zero
    3b64:	2485883a 	add	r2,r4,r18
    3b68:	110d803a 	cmpltu	r6,r2,r4
    3b6c:	2cc7883a 	add	r3,r5,r19
    3b70:	30c9883a 	add	r4,r6,r3
    3b74:	2007883a 	mov	r3,r4
    3b78:	1009883a 	mov	r4,r2
    3b7c:	180b883a 	mov	r5,r3
    3b80:	e0bff717 	ldw	r2,-36(fp)
    3b84:	11000815 	stw	r4,32(r2)
    3b88:	11400915 	stw	r5,36(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    3b8c:	e03ff415 	stw	zero,-48(fp)
    3b90:	e0bff417 	ldw	r2,-48(fp)
    3b94:	e0bff315 	stw	r2,-52(fp)
			return;
    3b98:	00006906 	br	3d40 <sha256_Update+0x3dc>
		}
	}
	while (len >= SHA256_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA256_BLOCK_LENGTH);
    3b9c:	e0bff717 	ldw	r2,-36(fp)
    3ba0:	10800a04 	addi	r2,r2,40
    3ba4:	01801004 	movi	r6,64
    3ba8:	e17ff817 	ldw	r5,-32(fp)
    3bac:	1009883a 	mov	r4,r2
    3bb0:	00064d00 	call	64d0 <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    3bb4:	e03ff215 	stw	zero,-56(fp)
    3bb8:	00002006 	br	3c3c <sha256_Update+0x2d8>
			REVERSE32(context->buffer[j],context->buffer[j]);
    3bbc:	e0fff717 	ldw	r3,-36(fp)
    3bc0:	e0bff217 	ldw	r2,-56(fp)
    3bc4:	10800284 	addi	r2,r2,10
    3bc8:	1085883a 	add	r2,r2,r2
    3bcc:	1085883a 	add	r2,r2,r2
    3bd0:	1885883a 	add	r2,r3,r2
    3bd4:	10800017 	ldw	r2,0(r2)
    3bd8:	e0bff615 	stw	r2,-40(fp)
    3bdc:	e0bff617 	ldw	r2,-40(fp)
    3be0:	1004143a 	roli	r2,r2,16
    3be4:	e0bff615 	stw	r2,-40(fp)
    3be8:	e0fff617 	ldw	r3,-40(fp)
    3bec:	00bfc074 	movhi	r2,65281
    3bf0:	10bfc004 	addi	r2,r2,-256
    3bf4:	1884703a 	and	r2,r3,r2
    3bf8:	1006d23a 	srli	r3,r2,8
    3bfc:	e13ff617 	ldw	r4,-40(fp)
    3c00:	00803ff4 	movhi	r2,255
    3c04:	10803fc4 	addi	r2,r2,255
    3c08:	2084703a 	and	r2,r4,r2
    3c0c:	1004923a 	slli	r2,r2,8
    3c10:	1886b03a 	or	r3,r3,r2
    3c14:	e13ff717 	ldw	r4,-36(fp)
    3c18:	e0bff217 	ldw	r2,-56(fp)
    3c1c:	10800284 	addi	r2,r2,10
    3c20:	1085883a 	add	r2,r2,r2
    3c24:	1085883a 	add	r2,r2,r2
    3c28:	2085883a 	add	r2,r4,r2
    3c2c:	10c00015 	stw	r3,0(r2)
	while (len >= SHA256_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA256_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    3c30:	e0bff217 	ldw	r2,-56(fp)
    3c34:	10800044 	addi	r2,r2,1
    3c38:	e0bff215 	stw	r2,-56(fp)
    3c3c:	e0bff217 	ldw	r2,-56(fp)
    3c40:	10800410 	cmplti	r2,r2,16
    3c44:	103fdd1e 	bne	r2,zero,3bbc <__alt_mem_epcs_flash_controller+0xfdffabbc>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		sha256_Transform(context->state, context->buffer, context->state);
    3c48:	e0fff717 	ldw	r3,-36(fp)
    3c4c:	e0bff717 	ldw	r2,-36(fp)
    3c50:	10800a04 	addi	r2,r2,40
    3c54:	e13ff717 	ldw	r4,-36(fp)
    3c58:	200d883a 	mov	r6,r4
    3c5c:	100b883a 	mov	r5,r2
    3c60:	1809883a 	mov	r4,r3
    3c64:	000339c0 	call	339c <sha256_Transform>
		context->bitcount += SHA256_BLOCK_LENGTH << 3;
    3c68:	e0bff717 	ldw	r2,-36(fp)
    3c6c:	11000817 	ldw	r4,32(r2)
    3c70:	11400917 	ldw	r5,36(r2)
    3c74:	01808004 	movi	r6,512
    3c78:	000f883a 	mov	r7,zero
    3c7c:	2185883a 	add	r2,r4,r6
    3c80:	1111803a 	cmpltu	r8,r2,r4
    3c84:	29c7883a 	add	r3,r5,r7
    3c88:	40c9883a 	add	r4,r8,r3
    3c8c:	2007883a 	mov	r3,r4
    3c90:	1009883a 	mov	r4,r2
    3c94:	180b883a 	mov	r5,r3
    3c98:	e0bff717 	ldw	r2,-36(fp)
    3c9c:	11000815 	stw	r4,32(r2)
    3ca0:	11400915 	stw	r5,36(r2)
		len -= SHA256_BLOCK_LENGTH;
    3ca4:	e0bff917 	ldw	r2,-28(fp)
    3ca8:	10bff004 	addi	r2,r2,-64
    3cac:	e0bff915 	stw	r2,-28(fp)
		data += SHA256_BLOCK_LENGTH;
    3cb0:	e0bff817 	ldw	r2,-32(fp)
    3cb4:	10801004 	addi	r2,r2,64
    3cb8:	e0bff815 	stw	r2,-32(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA256_BLOCK_LENGTH) {
    3cbc:	e0bff917 	ldw	r2,-28(fp)
    3cc0:	10801028 	cmpgeui	r2,r2,64
    3cc4:	103fb51e 	bne	r2,zero,3b9c <__alt_mem_epcs_flash_controller+0xfdffab9c>
		sha256_Transform(context->state, context->buffer, context->state);
		context->bitcount += SHA256_BLOCK_LENGTH << 3;
		len -= SHA256_BLOCK_LENGTH;
		data += SHA256_BLOCK_LENGTH;
	}
	if (len > 0) {
    3cc8:	e0bff917 	ldw	r2,-28(fp)
    3ccc:	10001726 	beq	r2,zero,3d2c <sha256_Update+0x3c8>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    3cd0:	e0bff717 	ldw	r2,-36(fp)
    3cd4:	10800a04 	addi	r2,r2,40
    3cd8:	e1bff917 	ldw	r6,-28(fp)
    3cdc:	e17ff817 	ldw	r5,-32(fp)
    3ce0:	1009883a 	mov	r4,r2
    3ce4:	00064d00 	call	64d0 <memcpy>
		context->bitcount += len << 3;
    3ce8:	e0bff717 	ldw	r2,-36(fp)
    3cec:	11000817 	ldw	r4,32(r2)
    3cf0:	11400917 	ldw	r5,36(r2)
    3cf4:	e0bff917 	ldw	r2,-28(fp)
    3cf8:	100490fa 	slli	r2,r2,3
    3cfc:	1021883a 	mov	r16,r2
    3d00:	0023883a 	mov	r17,zero
    3d04:	2405883a 	add	r2,r4,r16
    3d08:	110d803a 	cmpltu	r6,r2,r4
    3d0c:	2c47883a 	add	r3,r5,r17
    3d10:	30c9883a 	add	r4,r6,r3
    3d14:	2007883a 	mov	r3,r4
    3d18:	1009883a 	mov	r4,r2
    3d1c:	180b883a 	mov	r5,r3
    3d20:	e0bff717 	ldw	r2,-36(fp)
    3d24:	11000815 	stw	r4,32(r2)
    3d28:	11400915 	stw	r5,36(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    3d2c:	e03ff415 	stw	zero,-48(fp)
    3d30:	e0bff417 	ldw	r2,-48(fp)
    3d34:	e0bff315 	stw	r2,-52(fp)
    3d38:	00000106 	br	3d40 <sha256_Update+0x3dc>
void sha256_Update(SHA256_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    3d3c:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		context->bitcount += len << 3;
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    3d40:	e6fffa04 	addi	sp,fp,-24
    3d44:	dfc00717 	ldw	ra,28(sp)
    3d48:	df000617 	ldw	fp,24(sp)
    3d4c:	dd400517 	ldw	r21,20(sp)
    3d50:	dd000417 	ldw	r20,16(sp)
    3d54:	dcc00317 	ldw	r19,12(sp)
    3d58:	dc800217 	ldw	r18,8(sp)
    3d5c:	dc400117 	ldw	r17,4(sp)
    3d60:	dc000017 	ldw	r16,0(sp)
    3d64:	dec00804 	addi	sp,sp,32
    3d68:	f800283a 	ret

00003d6c <sha256_Final>:

void sha256_Final(SHA256_CTX* context, sha2_byte digest[]) {
    3d6c:	defff304 	addi	sp,sp,-52
    3d70:	dfc00c15 	stw	ra,48(sp)
    3d74:	df000b15 	stw	fp,44(sp)
    3d78:	dc400a15 	stw	r17,40(sp)
    3d7c:	dc000915 	stw	r16,36(sp)
    3d80:	df000b04 	addi	fp,sp,44
    3d84:	e13ffc15 	stw	r4,-16(fp)
    3d88:	e17ffd15 	stw	r5,-12(fp)
	unsigned int	usedspace;

	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    3d8c:	e0bffd17 	ldw	r2,-12(fp)
    3d90:	1000b826 	beq	r2,zero,4074 <sha256_Final+0x308>
		usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    3d94:	e13ffc17 	ldw	r4,-16(fp)
    3d98:	20800817 	ldw	r2,32(r4)
    3d9c:	20c00917 	ldw	r3,36(r4)
    3da0:	1808977a 	slli	r4,r3,29
    3da4:	100cd0fa 	srli	r6,r2,3
    3da8:	218cb03a 	or	r6,r4,r6
    3dac:	180ed0fa 	srli	r7,r3,3
    3db0:	3005883a 	mov	r2,r6
    3db4:	10800fcc 	andi	r2,r2,63
    3db8:	e0bff515 	stw	r2,-44(fp)
		/* Begin padding with a 1 bit: */
		((uint8_t*)context->buffer)[usedspace++] = 0x80;
    3dbc:	e0bffc17 	ldw	r2,-16(fp)
    3dc0:	10c00a04 	addi	r3,r2,40
    3dc4:	e0bff517 	ldw	r2,-44(fp)
    3dc8:	11000044 	addi	r4,r2,1
    3dcc:	e13ff515 	stw	r4,-44(fp)
    3dd0:	1885883a 	add	r2,r3,r2
    3dd4:	00ffe004 	movi	r3,-128
    3dd8:	10c00005 	stb	r3,0(r2)
		
		if (usedspace > SHA256_SHORT_BLOCK_LENGTH) {
    3ddc:	e0bff517 	ldw	r2,-44(fp)
    3de0:	10800e70 	cmpltui	r2,r2,57
    3de4:	1000371e 	bne	r2,zero,3ec4 <sha256_Final+0x158>
			memzero(((uint8_t*)context->buffer) + usedspace, SHA256_BLOCK_LENGTH - usedspace);
    3de8:	e0bffc17 	ldw	r2,-16(fp)
    3dec:	10c00a04 	addi	r3,r2,40
    3df0:	e0bff517 	ldw	r2,-44(fp)
    3df4:	1889883a 	add	r4,r3,r2
    3df8:	00c01004 	movi	r3,64
    3dfc:	e0bff517 	ldw	r2,-44(fp)
    3e00:	1885c83a 	sub	r2,r3,r2
    3e04:	100b883a 	mov	r5,r2
    3e08:	000134c0 	call	134c <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    3e0c:	e03ff615 	stw	zero,-40(fp)
    3e10:	00002006 	br	3e94 <sha256_Final+0x128>
				REVERSE32(context->buffer[j],context->buffer[j]);
    3e14:	e0fffc17 	ldw	r3,-16(fp)
    3e18:	e0bff617 	ldw	r2,-40(fp)
    3e1c:	10800284 	addi	r2,r2,10
    3e20:	1085883a 	add	r2,r2,r2
    3e24:	1085883a 	add	r2,r2,r2
    3e28:	1885883a 	add	r2,r3,r2
    3e2c:	10800017 	ldw	r2,0(r2)
    3e30:	e0bff915 	stw	r2,-28(fp)
    3e34:	e0bff917 	ldw	r2,-28(fp)
    3e38:	1004143a 	roli	r2,r2,16
    3e3c:	e0bff915 	stw	r2,-28(fp)
    3e40:	e0fff917 	ldw	r3,-28(fp)
    3e44:	00bfc074 	movhi	r2,65281
    3e48:	10bfc004 	addi	r2,r2,-256
    3e4c:	1884703a 	and	r2,r3,r2
    3e50:	1006d23a 	srli	r3,r2,8
    3e54:	e13ff917 	ldw	r4,-28(fp)
    3e58:	00803ff4 	movhi	r2,255
    3e5c:	10803fc4 	addi	r2,r2,255
    3e60:	2084703a 	and	r2,r4,r2
    3e64:	1004923a 	slli	r2,r2,8
    3e68:	1886b03a 	or	r3,r3,r2
    3e6c:	e13ffc17 	ldw	r4,-16(fp)
    3e70:	e0bff617 	ldw	r2,-40(fp)
    3e74:	10800284 	addi	r2,r2,10
    3e78:	1085883a 	add	r2,r2,r2
    3e7c:	1085883a 	add	r2,r2,r2
    3e80:	2085883a 	add	r2,r4,r2
    3e84:	10c00015 	stw	r3,0(r2)
		if (usedspace > SHA256_SHORT_BLOCK_LENGTH) {
			memzero(((uint8_t*)context->buffer) + usedspace, SHA256_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    3e88:	e0bff617 	ldw	r2,-40(fp)
    3e8c:	10800044 	addi	r2,r2,1
    3e90:	e0bff615 	stw	r2,-40(fp)
    3e94:	e0bff617 	ldw	r2,-40(fp)
    3e98:	10800410 	cmplti	r2,r2,16
    3e9c:	103fdd1e 	bne	r2,zero,3e14 <__alt_mem_epcs_flash_controller+0xfdffae14>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			/* Do second-to-last transform: */
			sha256_Transform(context->state, context->buffer, context->state);
    3ea0:	e0fffc17 	ldw	r3,-16(fp)
    3ea4:	e0bffc17 	ldw	r2,-16(fp)
    3ea8:	10800a04 	addi	r2,r2,40
    3eac:	e13ffc17 	ldw	r4,-16(fp)
    3eb0:	200d883a 	mov	r6,r4
    3eb4:	100b883a 	mov	r5,r2
    3eb8:	1809883a 	mov	r4,r3
    3ebc:	000339c0 	call	339c <sha256_Transform>
			
			/* And prepare the last transform: */
			usedspace = 0;
    3ec0:	e03ff515 	stw	zero,-44(fp)
		}
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA256_SHORT_BLOCK_LENGTH - usedspace);
    3ec4:	e0bffc17 	ldw	r2,-16(fp)
    3ec8:	10c00a04 	addi	r3,r2,40
    3ecc:	e0bff517 	ldw	r2,-44(fp)
    3ed0:	1889883a 	add	r4,r3,r2
    3ed4:	00c00e04 	movi	r3,56
    3ed8:	e0bff517 	ldw	r2,-44(fp)
    3edc:	1885c83a 	sub	r2,r3,r2
    3ee0:	100b883a 	mov	r5,r2
    3ee4:	000134c0 	call	134c <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    3ee8:	e03ff715 	stw	zero,-36(fp)
    3eec:	00002006 	br	3f70 <sha256_Final+0x204>
			REVERSE32(context->buffer[j],context->buffer[j]);
    3ef0:	e0fffc17 	ldw	r3,-16(fp)
    3ef4:	e0bff717 	ldw	r2,-36(fp)
    3ef8:	10800284 	addi	r2,r2,10
    3efc:	1085883a 	add	r2,r2,r2
    3f00:	1085883a 	add	r2,r2,r2
    3f04:	1885883a 	add	r2,r3,r2
    3f08:	10800017 	ldw	r2,0(r2)
    3f0c:	e0bffa15 	stw	r2,-24(fp)
    3f10:	e0bffa17 	ldw	r2,-24(fp)
    3f14:	1004143a 	roli	r2,r2,16
    3f18:	e0bffa15 	stw	r2,-24(fp)
    3f1c:	e0fffa17 	ldw	r3,-24(fp)
    3f20:	00bfc074 	movhi	r2,65281
    3f24:	10bfc004 	addi	r2,r2,-256
    3f28:	1884703a 	and	r2,r3,r2
    3f2c:	1006d23a 	srli	r3,r2,8
    3f30:	e13ffa17 	ldw	r4,-24(fp)
    3f34:	00803ff4 	movhi	r2,255
    3f38:	10803fc4 	addi	r2,r2,255
    3f3c:	2084703a 	and	r2,r4,r2
    3f40:	1004923a 	slli	r2,r2,8
    3f44:	1886b03a 	or	r3,r3,r2
    3f48:	e13ffc17 	ldw	r4,-16(fp)
    3f4c:	e0bff717 	ldw	r2,-36(fp)
    3f50:	10800284 	addi	r2,r2,10
    3f54:	1085883a 	add	r2,r2,r2
    3f58:	1085883a 	add	r2,r2,r2
    3f5c:	2085883a 	add	r2,r4,r2
    3f60:	10c00015 	stw	r3,0(r2)
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA256_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    3f64:	e0bff717 	ldw	r2,-36(fp)
    3f68:	10800044 	addi	r2,r2,1
    3f6c:	e0bff715 	stw	r2,-36(fp)
    3f70:	e0bff717 	ldw	r2,-36(fp)
    3f74:	10800390 	cmplti	r2,r2,14
    3f78:	103fdd1e 	bne	r2,zero,3ef0 <__alt_mem_epcs_flash_controller+0xfdffaef0>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Set the bit count: */
		context->buffer[14] = context->bitcount >> 32;
    3f7c:	e13ffc17 	ldw	r4,-16(fp)
    3f80:	20800817 	ldw	r2,32(r4)
    3f84:	20c00917 	ldw	r3,36(r4)
    3f88:	1820d83a 	srl	r16,r3,zero
    3f8c:	0023883a 	mov	r17,zero
    3f90:	8007883a 	mov	r3,r16
    3f94:	e0bffc17 	ldw	r2,-16(fp)
    3f98:	10c01815 	stw	r3,96(r2)
		context->buffer[15] = context->bitcount & 0xffffffff;
    3f9c:	e13ffc17 	ldw	r4,-16(fp)
    3fa0:	20800817 	ldw	r2,32(r4)
    3fa4:	20c00917 	ldw	r3,36(r4)
    3fa8:	1007883a 	mov	r3,r2
    3fac:	e0bffc17 	ldw	r2,-16(fp)
    3fb0:	10c01915 	stw	r3,100(r2)

		/* Final transform: */
		sha256_Transform(context->state, context->buffer, context->state);
    3fb4:	e0fffc17 	ldw	r3,-16(fp)
    3fb8:	e0bffc17 	ldw	r2,-16(fp)
    3fbc:	10800a04 	addi	r2,r2,40
    3fc0:	e13ffc17 	ldw	r4,-16(fp)
    3fc4:	200d883a 	mov	r6,r4
    3fc8:	100b883a 	mov	r5,r2
    3fcc:	1809883a 	mov	r4,r3
    3fd0:	000339c0 	call	339c <sha256_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    3fd4:	e03ff815 	stw	zero,-32(fp)
    3fd8:	00001e06 	br	4054 <sha256_Final+0x2e8>
			REVERSE32(context->state[j],context->state[j]);
    3fdc:	e0fffc17 	ldw	r3,-16(fp)
    3fe0:	e0bff817 	ldw	r2,-32(fp)
    3fe4:	1085883a 	add	r2,r2,r2
    3fe8:	1085883a 	add	r2,r2,r2
    3fec:	1885883a 	add	r2,r3,r2
    3ff0:	10800017 	ldw	r2,0(r2)
    3ff4:	e0bffb15 	stw	r2,-20(fp)
    3ff8:	e0bffb17 	ldw	r2,-20(fp)
    3ffc:	1004143a 	roli	r2,r2,16
    4000:	e0bffb15 	stw	r2,-20(fp)
    4004:	e0fffb17 	ldw	r3,-20(fp)
    4008:	00bfc074 	movhi	r2,65281
    400c:	10bfc004 	addi	r2,r2,-256
    4010:	1884703a 	and	r2,r3,r2
    4014:	1006d23a 	srli	r3,r2,8
    4018:	e13ffb17 	ldw	r4,-20(fp)
    401c:	00803ff4 	movhi	r2,255
    4020:	10803fc4 	addi	r2,r2,255
    4024:	2084703a 	and	r2,r4,r2
    4028:	1004923a 	slli	r2,r2,8
    402c:	1886b03a 	or	r3,r3,r2
    4030:	e13ffc17 	ldw	r4,-16(fp)
    4034:	e0bff817 	ldw	r2,-32(fp)
    4038:	1085883a 	add	r2,r2,r2
    403c:	1085883a 	add	r2,r2,r2
    4040:	2085883a 	add	r2,r4,r2
    4044:	10c00015 	stw	r3,0(r2)
		/* Final transform: */
		sha256_Transform(context->state, context->buffer, context->state);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    4048:	e0bff817 	ldw	r2,-32(fp)
    404c:	10800044 	addi	r2,r2,1
    4050:	e0bff815 	stw	r2,-32(fp)
    4054:	e0bff817 	ldw	r2,-32(fp)
    4058:	10800210 	cmplti	r2,r2,8
    405c:	103fdf1e 	bne	r2,zero,3fdc <__alt_mem_epcs_flash_controller+0xfdffafdc>
			REVERSE32(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA256_DIGEST_LENGTH);
    4060:	e0bffc17 	ldw	r2,-16(fp)
    4064:	01800804 	movi	r6,32
    4068:	100b883a 	mov	r5,r2
    406c:	e13ffd17 	ldw	r4,-12(fp)
    4070:	00064d00 	call	64d0 <memcpy>
	}

	/* Clean up state data: */
	memzero(context, sizeof(SHA256_CTX));
    4074:	01401a04 	movi	r5,104
    4078:	e13ffc17 	ldw	r4,-16(fp)
    407c:	000134c0 	call	134c <memzero>
	usedspace = 0;
    4080:	e03ff515 	stw	zero,-44(fp)
}
    4084:	0001883a 	nop
    4088:	e6fffe04 	addi	sp,fp,-8
    408c:	dfc00317 	ldw	ra,12(sp)
    4090:	df000217 	ldw	fp,8(sp)
    4094:	dc400117 	ldw	r17,4(sp)
    4098:	dc000017 	ldw	r16,0(sp)
    409c:	dec00404 	addi	sp,sp,16
    40a0:	f800283a 	ret

000040a4 <sha256_End>:

char *sha256_End(SHA256_CTX* context, char buffer[]) {
    40a4:	defff204 	addi	sp,sp,-56
    40a8:	dfc00d15 	stw	ra,52(sp)
    40ac:	df000c15 	stw	fp,48(sp)
    40b0:	df000c04 	addi	fp,sp,48
    40b4:	e13ffe15 	stw	r4,-8(fp)
    40b8:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA256_DIGEST_LENGTH], *d = digest;
    40bc:	e0bff604 	addi	r2,fp,-40
    40c0:	e0bff415 	stw	r2,-48(fp)
	int		i;

	if (buffer != (char*)0) {
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10002926 	beq	r2,zero,4170 <sha256_End+0xcc>
		sha256_Final(context, digest);
    40cc:	e0bff604 	addi	r2,fp,-40
    40d0:	100b883a 	mov	r5,r2
    40d4:	e13ffe17 	ldw	r4,-8(fp)
    40d8:	0003d6c0 	call	3d6c <sha256_Final>

		for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
    40dc:	e03ff515 	stw	zero,-44(fp)
    40e0:	00001d06 	br	4158 <sha256_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    40e4:	e0bfff17 	ldw	r2,-4(fp)
    40e8:	10c00044 	addi	r3,r2,1
    40ec:	e0ffff15 	stw	r3,-4(fp)
    40f0:	d1200017 	ldw	r4,-32768(gp)
    40f4:	e0fff417 	ldw	r3,-48(fp)
    40f8:	18c00003 	ldbu	r3,0(r3)
    40fc:	18c03fcc 	andi	r3,r3,255
    4100:	1806d13a 	srli	r3,r3,4
    4104:	18c03fcc 	andi	r3,r3,255
    4108:	20c7883a 	add	r3,r4,r3
    410c:	18c00003 	ldbu	r3,0(r3)
    4110:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    4114:	e0bfff17 	ldw	r2,-4(fp)
    4118:	10c00044 	addi	r3,r2,1
    411c:	e0ffff15 	stw	r3,-4(fp)
    4120:	d1200017 	ldw	r4,-32768(gp)
    4124:	e0fff417 	ldw	r3,-48(fp)
    4128:	18c00003 	ldbu	r3,0(r3)
    412c:	18c03fcc 	andi	r3,r3,255
    4130:	18c003cc 	andi	r3,r3,15
    4134:	20c7883a 	add	r3,r4,r3
    4138:	18c00003 	ldbu	r3,0(r3)
    413c:	10c00005 	stb	r3,0(r2)
			d++;
    4140:	e0bff417 	ldw	r2,-48(fp)
    4144:	10800044 	addi	r2,r2,1
    4148:	e0bff415 	stw	r2,-48(fp)
	int		i;

	if (buffer != (char*)0) {
		sha256_Final(context, digest);

		for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
    414c:	e0bff517 	ldw	r2,-44(fp)
    4150:	10800044 	addi	r2,r2,1
    4154:	e0bff515 	stw	r2,-44(fp)
    4158:	e0bff517 	ldw	r2,-44(fp)
    415c:	10800810 	cmplti	r2,r2,32
    4160:	103fe01e 	bne	r2,zero,40e4 <__alt_mem_epcs_flash_controller+0xfdffb0e4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    4164:	e0bfff17 	ldw	r2,-4(fp)
    4168:	10000005 	stb	zero,0(r2)
    416c:	00000306 	br	417c <sha256_End+0xd8>
	} else {
		memzero(context, sizeof(SHA256_CTX));
    4170:	01401a04 	movi	r5,104
    4174:	e13ffe17 	ldw	r4,-8(fp)
    4178:	000134c0 	call	134c <memzero>
	}
	memzero(digest, SHA256_DIGEST_LENGTH);
    417c:	e0bff604 	addi	r2,fp,-40
    4180:	01400804 	movi	r5,32
    4184:	1009883a 	mov	r4,r2
    4188:	000134c0 	call	134c <memzero>
	return buffer;
    418c:	e0bfff17 	ldw	r2,-4(fp)
}
    4190:	e037883a 	mov	sp,fp
    4194:	dfc00117 	ldw	ra,4(sp)
    4198:	df000017 	ldw	fp,0(sp)
    419c:	dec00204 	addi	sp,sp,8
    41a0:	f800283a 	ret

000041a4 <sha256_Raw>:

void sha256_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA256_DIGEST_LENGTH]) {
    41a4:	deffe104 	addi	sp,sp,-124
    41a8:	dfc01e15 	stw	ra,120(sp)
    41ac:	df001d15 	stw	fp,116(sp)
    41b0:	df001d04 	addi	fp,sp,116
    41b4:	e13ffd15 	stw	r4,-12(fp)
    41b8:	e17ffe15 	stw	r5,-8(fp)
    41bc:	e1bfff15 	stw	r6,-4(fp)
	SHA256_CTX	context;
	sha256_Init(&context);
    41c0:	e13fe304 	addi	r4,fp,-116
    41c4:	000332c0 	call	332c <sha256_Init>
	sha256_Update(&context, data, len);
    41c8:	e1bffe17 	ldw	r6,-8(fp)
    41cc:	e17ffd17 	ldw	r5,-12(fp)
    41d0:	e13fe304 	addi	r4,fp,-116
    41d4:	00039640 	call	3964 <sha256_Update>
	sha256_Final(&context, digest);
    41d8:	e17fff17 	ldw	r5,-4(fp)
    41dc:	e13fe304 	addi	r4,fp,-116
    41e0:	0003d6c0 	call	3d6c <sha256_Final>
}
    41e4:	0001883a 	nop
    41e8:	e037883a 	mov	sp,fp
    41ec:	dfc00117 	ldw	ra,4(sp)
    41f0:	df000017 	ldw	fp,0(sp)
    41f4:	dec00204 	addi	sp,sp,8
    41f8:	f800283a 	ret

000041fc <sha256_Data>:

char* sha256_Data(const sha2_byte* data, size_t len, char digest[SHA256_DIGEST_STRING_LENGTH]) {
    41fc:	deffe104 	addi	sp,sp,-124
    4200:	dfc01e15 	stw	ra,120(sp)
    4204:	df001d15 	stw	fp,116(sp)
    4208:	df001d04 	addi	fp,sp,116
    420c:	e13ffd15 	stw	r4,-12(fp)
    4210:	e17ffe15 	stw	r5,-8(fp)
    4214:	e1bfff15 	stw	r6,-4(fp)
	SHA256_CTX	context;

	sha256_Init(&context);
    4218:	e13fe304 	addi	r4,fp,-116
    421c:	000332c0 	call	332c <sha256_Init>
	sha256_Update(&context, data, len);
    4220:	e1bffe17 	ldw	r6,-8(fp)
    4224:	e17ffd17 	ldw	r5,-12(fp)
    4228:	e13fe304 	addi	r4,fp,-116
    422c:	00039640 	call	3964 <sha256_Update>
	return sha256_End(&context, digest);
    4230:	e17fff17 	ldw	r5,-4(fp)
    4234:	e13fe304 	addi	r4,fp,-116
    4238:	00040a40 	call	40a4 <sha256_End>
}
    423c:	e037883a 	mov	sp,fp
    4240:	dfc00117 	ldw	ra,4(sp)
    4244:	df000017 	ldw	fp,0(sp)
    4248:	dec00204 	addi	sp,sp,8
    424c:	f800283a 	ret

00004250 <sha512_Init>:


/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context) {
    4250:	defffd04 	addi	sp,sp,-12
    4254:	dfc00215 	stw	ra,8(sp)
    4258:	df000115 	stw	fp,4(sp)
    425c:	df000104 	addi	fp,sp,4
    4260:	e13fff15 	stw	r4,-4(fp)
	if (context == (SHA512_CTX*)0) {
    4264:	e0bfff17 	ldw	r2,-4(fp)
    4268:	10001526 	beq	r2,zero,42c0 <sha512_Init+0x70>
		return;
	}
	MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
    426c:	e0bfff17 	ldw	r2,-4(fp)
    4270:	01801004 	movi	r6,64
    4274:	01400074 	movhi	r5,1
    4278:	29457c04 	addi	r5,r5,5616
    427c:	1009883a 	mov	r4,r2
    4280:	00064d00 	call	64d0 <memcpy>
	memzero(context->buffer, SHA512_BLOCK_LENGTH);
    4284:	e0bfff17 	ldw	r2,-4(fp)
    4288:	10801404 	addi	r2,r2,80
    428c:	01402004 	movi	r5,128
    4290:	1009883a 	mov	r4,r2
    4294:	000134c0 	call	134c <memzero>
	context->bitcount[0] = context->bitcount[1] =  0;
    4298:	e0bfff17 	ldw	r2,-4(fp)
    429c:	10001215 	stw	zero,72(r2)
    42a0:	10001315 	stw	zero,76(r2)
    42a4:	e13fff17 	ldw	r4,-4(fp)
    42a8:	20801217 	ldw	r2,72(r4)
    42ac:	20c01317 	ldw	r3,76(r4)
    42b0:	e13fff17 	ldw	r4,-4(fp)
    42b4:	20801015 	stw	r2,64(r4)
    42b8:	20c01115 	stw	r3,68(r4)
    42bc:	00000106 	br	42c4 <sha512_Init+0x74>


/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context) {
	if (context == (SHA512_CTX*)0) {
		return;
    42c0:	0001883a 	nop
	}
	MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
	memzero(context->buffer, SHA512_BLOCK_LENGTH);
	context->bitcount[0] = context->bitcount[1] =  0;
}
    42c4:	e037883a 	mov	sp,fp
    42c8:	dfc00117 	ldw	ra,4(sp)
    42cc:	df000017 	ldw	fp,0(sp)
    42d0:	dec00204 	addi	sp,sp,8
    42d4:	f800283a 	ret

000042d8 <sha512_Transform>:
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha512_Transform(const sha2_word64* state_in, const sha2_word64* data, sha2_word64* state_out) {
    42d8:	deff6e04 	addi	sp,sp,-584
    42dc:	df009115 	stw	fp,580(sp)
    42e0:	dd809015 	stw	r22,576(sp)
    42e4:	dd408f15 	stw	r21,572(sp)
    42e8:	dd008e15 	stw	r20,568(sp)
    42ec:	dcc08d15 	stw	r19,564(sp)
    42f0:	dc808c15 	stw	r18,560(sp)
    42f4:	dc408b15 	stw	r17,556(sp)
    42f8:	dc008a15 	stw	r16,552(sp)
    42fc:	df009104 	addi	fp,sp,580
    4300:	e13fa815 	stw	r4,-352(fp)
    4304:	e17fa915 	stw	r5,-348(fp)
    4308:	e1bfaa15 	stw	r6,-344(fp)
	sha2_word64	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word64	T1, T2, W512[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    430c:	e0ffa817 	ldw	r3,-352(fp)
    4310:	18800017 	ldw	r2,0(r3)
    4314:	e0bf6f15 	stw	r2,-580(fp)
    4318:	18800117 	ldw	r2,4(r3)
    431c:	e0bf7015 	stw	r2,-576(fp)
	b = state_in[1];
    4320:	e0ffa817 	ldw	r3,-352(fp)
    4324:	18800217 	ldw	r2,8(r3)
    4328:	e0bf7115 	stw	r2,-572(fp)
    432c:	18800317 	ldw	r2,12(r3)
    4330:	e0bf7215 	stw	r2,-568(fp)
	c = state_in[2];
    4334:	e0ffa817 	ldw	r3,-352(fp)
    4338:	18800417 	ldw	r2,16(r3)
    433c:	e0bf7315 	stw	r2,-564(fp)
    4340:	18800517 	ldw	r2,20(r3)
    4344:	e0bf7415 	stw	r2,-560(fp)
	d = state_in[3];
    4348:	e0ffa817 	ldw	r3,-352(fp)
    434c:	18800617 	ldw	r2,24(r3)
    4350:	e0bf7515 	stw	r2,-556(fp)
    4354:	18800717 	ldw	r2,28(r3)
    4358:	e0bf7615 	stw	r2,-552(fp)
	e = state_in[4];
    435c:	e0ffa817 	ldw	r3,-352(fp)
    4360:	18800817 	ldw	r2,32(r3)
    4364:	e0bf7715 	stw	r2,-548(fp)
    4368:	18800917 	ldw	r2,36(r3)
    436c:	e0bf7815 	stw	r2,-544(fp)
	f = state_in[5];
    4370:	e0ffa817 	ldw	r3,-352(fp)
    4374:	18800a17 	ldw	r2,40(r3)
    4378:	e0bf7915 	stw	r2,-540(fp)
    437c:	18800b17 	ldw	r2,44(r3)
    4380:	e0bf7a15 	stw	r2,-536(fp)
	g = state_in[6];
    4384:	e0ffa817 	ldw	r3,-352(fp)
    4388:	18800c17 	ldw	r2,48(r3)
    438c:	e0bf7b15 	stw	r2,-532(fp)
    4390:	18800d17 	ldw	r2,52(r3)
    4394:	e0bf7c15 	stw	r2,-528(fp)
	h = state_in[7];
    4398:	e0ffa817 	ldw	r3,-352(fp)
    439c:	18800e17 	ldw	r2,56(r3)
    43a0:	e0bf7d15 	stw	r2,-524(fp)
    43a4:	18800f17 	ldw	r2,60(r3)
    43a8:	e0bf7e15 	stw	r2,-520(fp)

	j = 0;
    43ac:	e03f7f15 	stw	zero,-516(fp)
	do {
		/* Apply the SHA-512 compression function to update a..h with copy */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + (W512[j] = *data++);
    43b0:	e0bf7817 	ldw	r2,-544(fp)
    43b4:	100694ba 	slli	r3,r2,18
    43b8:	e0bf7717 	ldw	r2,-548(fp)
    43bc:	1004d3ba 	srli	r2,r2,14
    43c0:	1884b03a 	or	r2,r3,r2
    43c4:	e0bfab15 	stw	r2,-340(fp)
    43c8:	e0bf7717 	ldw	r2,-548(fp)
    43cc:	100694ba 	slli	r3,r2,18
    43d0:	e0bf7817 	ldw	r2,-544(fp)
    43d4:	1004d3ba 	srli	r2,r2,14
    43d8:	1884b03a 	or	r2,r3,r2
    43dc:	e0bfac15 	stw	r2,-336(fp)
    43e0:	e0bf7817 	ldw	r2,-544(fp)
    43e4:	100693ba 	slli	r3,r2,14
    43e8:	e0bf7717 	ldw	r2,-548(fp)
    43ec:	1004d4ba 	srli	r2,r2,18
    43f0:	1884b03a 	or	r2,r3,r2
    43f4:	e0bfad15 	stw	r2,-332(fp)
    43f8:	e0bf7717 	ldw	r2,-548(fp)
    43fc:	100693ba 	slli	r3,r2,14
    4400:	e0bf7817 	ldw	r2,-544(fp)
    4404:	1004d4ba 	srli	r2,r2,18
    4408:	1884b03a 	or	r2,r3,r2
    440c:	e0bfae15 	stw	r2,-328(fp)
    4410:	e0bfab17 	ldw	r2,-340(fp)
    4414:	e0ffad17 	ldw	r3,-332(fp)
    4418:	10c4f03a 	xor	r2,r2,r3
    441c:	e0bfaf15 	stw	r2,-324(fp)
    4420:	e13fac17 	ldw	r4,-336(fp)
    4424:	e17fae17 	ldw	r5,-328(fp)
    4428:	2148f03a 	xor	r4,r4,r5
    442c:	e13fb015 	stw	r4,-320(fp)
    4430:	e0bf7717 	ldw	r2,-548(fp)
    4434:	1006d27a 	srli	r3,r2,9
    4438:	e0bf7817 	ldw	r2,-544(fp)
    443c:	100495fa 	slli	r2,r2,23
    4440:	1884b03a 	or	r2,r3,r2
    4444:	e0bfb215 	stw	r2,-312(fp)
    4448:	e0bf7817 	ldw	r2,-544(fp)
    444c:	1006d27a 	srli	r3,r2,9
    4450:	e0bf7717 	ldw	r2,-548(fp)
    4454:	100495fa 	slli	r2,r2,23
    4458:	1884b03a 	or	r2,r3,r2
    445c:	e0bfb115 	stw	r2,-316(fp)
    4460:	e1bfaf17 	ldw	r6,-324(fp)
    4464:	e1ffb117 	ldw	r7,-316(fp)
    4468:	31ccf03a 	xor	r6,r6,r7
    446c:	e1bfb315 	stw	r6,-308(fp)
    4470:	e0bfb017 	ldw	r2,-320(fp)
    4474:	e0ffb217 	ldw	r3,-312(fp)
    4478:	10c4f03a 	xor	r2,r2,r3
    447c:	e0bfb415 	stw	r2,-304(fp)
    4480:	e0bf7d17 	ldw	r2,-524(fp)
    4484:	e0ff7e17 	ldw	r3,-520(fp)
    4488:	e1bfb317 	ldw	r6,-308(fp)
    448c:	3089883a 	add	r4,r6,r2
    4490:	e1ffb317 	ldw	r7,-308(fp)
    4494:	21cd803a 	cmpltu	r6,r4,r7
    4498:	e1ffb417 	ldw	r7,-304(fp)
    449c:	38cb883a 	add	r5,r7,r3
    44a0:	3145883a 	add	r2,r6,r5
    44a4:	100b883a 	mov	r5,r2
    44a8:	200d883a 	mov	r6,r4
    44ac:	280f883a 	mov	r7,r5
    44b0:	e0ff7717 	ldw	r3,-548(fp)
    44b4:	e0bf7917 	ldw	r2,-540(fp)
    44b8:	1884703a 	and	r2,r3,r2
    44bc:	e0bfb515 	stw	r2,-300(fp)
    44c0:	e0ff7817 	ldw	r3,-544(fp)
    44c4:	e0bf7a17 	ldw	r2,-536(fp)
    44c8:	1884703a 	and	r2,r3,r2
    44cc:	e0bfb615 	stw	r2,-296(fp)
    44d0:	e0bf7717 	ldw	r2,-548(fp)
    44d4:	0084303a 	nor	r2,zero,r2
    44d8:	e0bfb715 	stw	r2,-292(fp)
    44dc:	e0bf7817 	ldw	r2,-544(fp)
    44e0:	0084303a 	nor	r2,zero,r2
    44e4:	e0bfb815 	stw	r2,-288(fp)
    44e8:	e0bf7b17 	ldw	r2,-532(fp)
    44ec:	e0ffb717 	ldw	r3,-292(fp)
    44f0:	10c4703a 	and	r2,r2,r3
    44f4:	e0bfb915 	stw	r2,-284(fp)
    44f8:	e0bf7c17 	ldw	r2,-528(fp)
    44fc:	e13fb817 	ldw	r4,-288(fp)
    4500:	1104703a 	and	r2,r2,r4
    4504:	e0bfba15 	stw	r2,-280(fp)
    4508:	e17fb517 	ldw	r5,-300(fp)
    450c:	e0bfb917 	ldw	r2,-284(fp)
    4510:	288af03a 	xor	r5,r5,r2
    4514:	e17fbb15 	stw	r5,-276(fp)
    4518:	e0ffb617 	ldw	r3,-296(fp)
    451c:	e13fba17 	ldw	r4,-280(fp)
    4520:	1906f03a 	xor	r3,r3,r4
    4524:	e0ffbc15 	stw	r3,-272(fp)
    4528:	e17fbb17 	ldw	r5,-276(fp)
    452c:	3145883a 	add	r2,r6,r5
    4530:	1189803a 	cmpltu	r4,r2,r6
    4534:	e17fbc17 	ldw	r5,-272(fp)
    4538:	3947883a 	add	r3,r7,r5
    453c:	20c9883a 	add	r4,r4,r3
    4540:	2007883a 	mov	r3,r4
    4544:	100f883a 	mov	r7,r2
    4548:	1811883a 	mov	r8,r3
    454c:	00c00074 	movhi	r3,1
    4550:	18c4dc04 	addi	r3,r3,4976
    4554:	e0bf7f17 	ldw	r2,-516(fp)
    4558:	100490fa 	slli	r2,r2,3
    455c:	1889883a 	add	r4,r3,r2
    4560:	20800017 	ldw	r2,0(r4)
    4564:	20c00117 	ldw	r3,4(r4)
    4568:	3889883a 	add	r4,r7,r2
    456c:	21cd803a 	cmpltu	r6,r4,r7
    4570:	40cb883a 	add	r5,r8,r3
    4574:	3145883a 	add	r2,r6,r5
    4578:	100b883a 	mov	r5,r2
    457c:	200f883a 	mov	r7,r4
    4580:	2811883a 	mov	r8,r5
    4584:	e0ffa917 	ldw	r3,-348(fp)
    4588:	18800204 	addi	r2,r3,8
    458c:	e0bfa915 	stw	r2,-348(fp)
    4590:	19000017 	ldw	r4,0(r3)
    4594:	19400117 	ldw	r5,4(r3)
    4598:	e0bf7f17 	ldw	r2,-516(fp)
    459c:	100490fa 	slli	r2,r2,3
    45a0:	e1bf6f04 	addi	r6,fp,-580
    45a4:	3085883a 	add	r2,r6,r2
    45a8:	10801904 	addi	r2,r2,100
    45ac:	11000015 	stw	r4,0(r2)
    45b0:	11400115 	stw	r5,4(r2)
    45b4:	e0bf7f17 	ldw	r2,-516(fp)
    45b8:	100490fa 	slli	r2,r2,3
    45bc:	e0ff6f04 	addi	r3,fp,-580
    45c0:	1885883a 	add	r2,r3,r2
    45c4:	10801904 	addi	r2,r2,100
    45c8:	11000017 	ldw	r4,0(r2)
    45cc:	11400117 	ldw	r5,4(r2)
    45d0:	3905883a 	add	r2,r7,r4
    45d4:	11cd803a 	cmpltu	r6,r2,r7
    45d8:	4147883a 	add	r3,r8,r5
    45dc:	30c9883a 	add	r4,r6,r3
    45e0:	2007883a 	mov	r3,r4
    45e4:	e0bf8015 	stw	r2,-512(fp)
    45e8:	e0ff8115 	stw	r3,-508(fp)
		T2 = Sigma0_512(a) + Maj(a, b, c);
    45ec:	e0bf7017 	ldw	r2,-576(fp)
    45f0:	1006913a 	slli	r3,r2,4
    45f4:	e0bf6f17 	ldw	r2,-580(fp)
    45f8:	1004d73a 	srli	r2,r2,28
    45fc:	1884b03a 	or	r2,r3,r2
    4600:	e0bfbd15 	stw	r2,-268(fp)
    4604:	e0bf6f17 	ldw	r2,-580(fp)
    4608:	1006913a 	slli	r3,r2,4
    460c:	e0bf7017 	ldw	r2,-576(fp)
    4610:	1004d73a 	srli	r2,r2,28
    4614:	1884b03a 	or	r2,r3,r2
    4618:	e0bfbe15 	stw	r2,-264(fp)
    461c:	e0bf6f17 	ldw	r2,-580(fp)
    4620:	1006d0ba 	srli	r3,r2,2
    4624:	e0bf7017 	ldw	r2,-576(fp)
    4628:	100497ba 	slli	r2,r2,30
    462c:	1884b03a 	or	r2,r3,r2
    4630:	e0bfc015 	stw	r2,-256(fp)
    4634:	e0bf7017 	ldw	r2,-576(fp)
    4638:	1006d0ba 	srli	r3,r2,2
    463c:	e0bf6f17 	ldw	r2,-580(fp)
    4640:	100497ba 	slli	r2,r2,30
    4644:	1884b03a 	or	r2,r3,r2
    4648:	e0bfbf15 	stw	r2,-260(fp)
    464c:	e13fbd17 	ldw	r4,-268(fp)
    4650:	e17fbf17 	ldw	r5,-260(fp)
    4654:	2148f03a 	xor	r4,r4,r5
    4658:	e13fc115 	stw	r4,-252(fp)
    465c:	e1bfbe17 	ldw	r6,-264(fp)
    4660:	e1ffc017 	ldw	r7,-256(fp)
    4664:	31ccf03a 	xor	r6,r6,r7
    4668:	e1bfc215 	stw	r6,-248(fp)
    466c:	e0bf6f17 	ldw	r2,-580(fp)
    4670:	1006d1fa 	srli	r3,r2,7
    4674:	e0bf7017 	ldw	r2,-576(fp)
    4678:	1004967a 	slli	r2,r2,25
    467c:	18acb03a 	or	r22,r3,r2
    4680:	e0bf7017 	ldw	r2,-576(fp)
    4684:	1006d1fa 	srli	r3,r2,7
    4688:	e0bf6f17 	ldw	r2,-580(fp)
    468c:	1004967a 	slli	r2,r2,25
    4690:	18aab03a 	or	r21,r3,r2
    4694:	e0bfc117 	ldw	r2,-252(fp)
    4698:	1552f03a 	xor	r9,r2,r21
    469c:	e0ffc217 	ldw	r3,-248(fp)
    46a0:	1d94f03a 	xor	r10,r3,r22
    46a4:	e0ff6f17 	ldw	r3,-580(fp)
    46a8:	e0bf7117 	ldw	r2,-572(fp)
    46ac:	18a6703a 	and	r19,r3,r2
    46b0:	e0ff7017 	ldw	r3,-576(fp)
    46b4:	e0bf7217 	ldw	r2,-568(fp)
    46b8:	18a8703a 	and	r20,r3,r2
    46bc:	e0ff6f17 	ldw	r3,-580(fp)
    46c0:	e0bf7317 	ldw	r2,-564(fp)
    46c4:	18a2703a 	and	r17,r3,r2
    46c8:	e0ff7017 	ldw	r3,-576(fp)
    46cc:	e0bf7417 	ldw	r2,-560(fp)
    46d0:	18a4703a 	and	r18,r3,r2
    46d4:	9c5ef03a 	xor	r15,r19,r17
    46d8:	a4a0f03a 	xor	r16,r20,r18
    46dc:	e0ff7117 	ldw	r3,-572(fp)
    46e0:	e0bf7317 	ldw	r2,-564(fp)
    46e4:	189a703a 	and	r13,r3,r2
    46e8:	e0ff7217 	ldw	r3,-568(fp)
    46ec:	e0bf7417 	ldw	r2,-560(fp)
    46f0:	189c703a 	and	r14,r3,r2
    46f4:	7b56f03a 	xor	r11,r15,r13
    46f8:	8398f03a 	xor	r12,r16,r14
    46fc:	4ac5883a 	add	r2,r9,r11
    4700:	1249803a 	cmpltu	r4,r2,r9
    4704:	5307883a 	add	r3,r10,r12
    4708:	20c9883a 	add	r4,r4,r3
    470c:	2007883a 	mov	r3,r4
    4710:	e0bf8215 	stw	r2,-504(fp)
    4714:	e0ff8315 	stw	r3,-500(fp)
		h = g;
    4718:	e0bf7b17 	ldw	r2,-532(fp)
    471c:	e0bf7d15 	stw	r2,-524(fp)
    4720:	e0bf7c17 	ldw	r2,-528(fp)
    4724:	e0bf7e15 	stw	r2,-520(fp)
		g = f;
    4728:	e0bf7917 	ldw	r2,-540(fp)
    472c:	e0bf7b15 	stw	r2,-532(fp)
    4730:	e0bf7a17 	ldw	r2,-536(fp)
    4734:	e0bf7c15 	stw	r2,-528(fp)
		f = e;
    4738:	e0bf7717 	ldw	r2,-548(fp)
    473c:	e0bf7915 	stw	r2,-540(fp)
    4740:	e0bf7817 	ldw	r2,-544(fp)
    4744:	e0bf7a15 	stw	r2,-536(fp)
		e = d + T1;
    4748:	e1ff7517 	ldw	r7,-556(fp)
    474c:	e23f7617 	ldw	r8,-552(fp)
    4750:	e13f8017 	ldw	r4,-512(fp)
    4754:	e17f8117 	ldw	r5,-508(fp)
    4758:	3905883a 	add	r2,r7,r4
    475c:	11cd803a 	cmpltu	r6,r2,r7
    4760:	4147883a 	add	r3,r8,r5
    4764:	30c9883a 	add	r4,r6,r3
    4768:	2007883a 	mov	r3,r4
    476c:	e0bf7715 	stw	r2,-548(fp)
    4770:	e0ff7815 	stw	r3,-544(fp)
		d = c;
    4774:	e0bf7317 	ldw	r2,-564(fp)
    4778:	e0bf7515 	stw	r2,-556(fp)
    477c:	e0bf7417 	ldw	r2,-560(fp)
    4780:	e0bf7615 	stw	r2,-552(fp)
		c = b;
    4784:	e0bf7117 	ldw	r2,-572(fp)
    4788:	e0bf7315 	stw	r2,-564(fp)
    478c:	e0bf7217 	ldw	r2,-568(fp)
    4790:	e0bf7415 	stw	r2,-560(fp)
		b = a;
    4794:	e0bf6f17 	ldw	r2,-580(fp)
    4798:	e0bf7115 	stw	r2,-572(fp)
    479c:	e0bf7017 	ldw	r2,-576(fp)
    47a0:	e0bf7215 	stw	r2,-568(fp)
		a = T1 + T2;
    47a4:	e1ff8017 	ldw	r7,-512(fp)
    47a8:	e23f8117 	ldw	r8,-508(fp)
    47ac:	e13f8217 	ldw	r4,-504(fp)
    47b0:	e17f8317 	ldw	r5,-500(fp)
    47b4:	3905883a 	add	r2,r7,r4
    47b8:	11cd803a 	cmpltu	r6,r2,r7
    47bc:	4147883a 	add	r3,r8,r5
    47c0:	30c9883a 	add	r4,r6,r3
    47c4:	2007883a 	mov	r3,r4
    47c8:	e0bf6f15 	stw	r2,-580(fp)
    47cc:	e0ff7015 	stw	r3,-576(fp)

		j++;
    47d0:	e0bf7f17 	ldw	r2,-516(fp)
    47d4:	10800044 	addi	r2,r2,1
    47d8:	e0bf7f15 	stw	r2,-516(fp)
	} while (j < 16);
    47dc:	e0bf7f17 	ldw	r2,-516(fp)
    47e0:	10800410 	cmplti	r2,r2,16
    47e4:	103ef21e 	bne	r2,zero,43b0 <__alt_mem_epcs_flash_controller+0xfdffb3b0>

	do {
		/* Part of the message block expansion: */
		s0 = W512[(j+1)&0x0f];
    47e8:	e0bf7f17 	ldw	r2,-516(fp)
    47ec:	10800044 	addi	r2,r2,1
    47f0:	108003cc 	andi	r2,r2,15
    47f4:	100490fa 	slli	r2,r2,3
    47f8:	e13f6f04 	addi	r4,fp,-580
    47fc:	2085883a 	add	r2,r4,r2
    4800:	10c01904 	addi	r3,r2,100
    4804:	18800017 	ldw	r2,0(r3)
    4808:	e0bf8415 	stw	r2,-496(fp)
    480c:	18800117 	ldw	r2,4(r3)
    4810:	e0bf8515 	stw	r2,-492(fp)
		s0 = sigma0_512(s0);
    4814:	e0bf8517 	ldw	r2,-492(fp)
    4818:	100697fa 	slli	r3,r2,31
    481c:	e0bf8417 	ldw	r2,-496(fp)
    4820:	1004d07a 	srli	r2,r2,1
    4824:	1884b03a 	or	r2,r3,r2
    4828:	e0bfc315 	stw	r2,-244(fp)
    482c:	e0bf8417 	ldw	r2,-496(fp)
    4830:	100697fa 	slli	r3,r2,31
    4834:	e0bf8517 	ldw	r2,-492(fp)
    4838:	1004d07a 	srli	r2,r2,1
    483c:	1884b03a 	or	r2,r3,r2
    4840:	e0bfc415 	stw	r2,-240(fp)
    4844:	e0bf8517 	ldw	r2,-492(fp)
    4848:	1006963a 	slli	r3,r2,24
    484c:	e0bf8417 	ldw	r2,-496(fp)
    4850:	1004d23a 	srli	r2,r2,8
    4854:	1884b03a 	or	r2,r3,r2
    4858:	e0bfc515 	stw	r2,-236(fp)
    485c:	e0bf8417 	ldw	r2,-496(fp)
    4860:	1006963a 	slli	r3,r2,24
    4864:	e0bf8517 	ldw	r2,-492(fp)
    4868:	1004d23a 	srli	r2,r2,8
    486c:	1884b03a 	or	r2,r3,r2
    4870:	e0bfc615 	stw	r2,-232(fp)
    4874:	e17fc317 	ldw	r5,-244(fp)
    4878:	e1bfc517 	ldw	r6,-236(fp)
    487c:	298af03a 	xor	r5,r5,r6
    4880:	e17fc715 	stw	r5,-228(fp)
    4884:	e1ffc417 	ldw	r7,-240(fp)
    4888:	e0bfc617 	ldw	r2,-232(fp)
    488c:	388ef03a 	xor	r7,r7,r2
    4890:	e1ffc815 	stw	r7,-224(fp)
    4894:	e0bf8517 	ldw	r2,-492(fp)
    4898:	1006967a 	slli	r3,r2,25
    489c:	e0bf8417 	ldw	r2,-496(fp)
    48a0:	1004d1fa 	srli	r2,r2,7
    48a4:	e0bfc915 	stw	r2,-220(fp)
    48a8:	e13fc917 	ldw	r4,-220(fp)
    48ac:	1906b03a 	or	r3,r3,r4
    48b0:	e0ffc915 	stw	r3,-220(fp)
    48b4:	e0bf8517 	ldw	r2,-492(fp)
    48b8:	1004d1fa 	srli	r2,r2,7
    48bc:	e0bfca15 	stw	r2,-216(fp)
    48c0:	e17fc717 	ldw	r5,-228(fp)
    48c4:	e1bfc917 	ldw	r6,-220(fp)
    48c8:	2984f03a 	xor	r2,r5,r6
    48cc:	e0bf8415 	stw	r2,-496(fp)
    48d0:	e1ffc817 	ldw	r7,-224(fp)
    48d4:	e0ffca17 	ldw	r3,-216(fp)
    48d8:	38c4f03a 	xor	r2,r7,r3
    48dc:	e0bf8515 	stw	r2,-492(fp)
		s1 = W512[(j+14)&0x0f];
    48e0:	e0bf7f17 	ldw	r2,-516(fp)
    48e4:	10800384 	addi	r2,r2,14
    48e8:	108003cc 	andi	r2,r2,15
    48ec:	100490fa 	slli	r2,r2,3
    48f0:	e13f6f04 	addi	r4,fp,-580
    48f4:	2085883a 	add	r2,r4,r2
    48f8:	10c01904 	addi	r3,r2,100
    48fc:	18800017 	ldw	r2,0(r3)
    4900:	e0bf8615 	stw	r2,-488(fp)
    4904:	18800117 	ldw	r2,4(r3)
    4908:	e0bf8715 	stw	r2,-484(fp)
		s1 =  sigma1_512(s1);
    490c:	e0bf8717 	ldw	r2,-484(fp)
    4910:	1006937a 	slli	r3,r2,13
    4914:	e0bf8617 	ldw	r2,-488(fp)
    4918:	1004d4fa 	srli	r2,r2,19
    491c:	1884b03a 	or	r2,r3,r2
    4920:	e0bfcb15 	stw	r2,-212(fp)
    4924:	e0bf8617 	ldw	r2,-488(fp)
    4928:	1006937a 	slli	r3,r2,13
    492c:	e0bf8717 	ldw	r2,-484(fp)
    4930:	1004d4fa 	srli	r2,r2,19
    4934:	1884b03a 	or	r2,r3,r2
    4938:	e0bfcc15 	stw	r2,-208(fp)
    493c:	e0bf8617 	ldw	r2,-488(fp)
    4940:	1006d77a 	srli	r3,r2,29
    4944:	e0bf8717 	ldw	r2,-484(fp)
    4948:	100490fa 	slli	r2,r2,3
    494c:	1884b03a 	or	r2,r3,r2
    4950:	e0bfce15 	stw	r2,-200(fp)
    4954:	e0bf8717 	ldw	r2,-484(fp)
    4958:	1006d77a 	srli	r3,r2,29
    495c:	e0bf8617 	ldw	r2,-488(fp)
    4960:	100490fa 	slli	r2,r2,3
    4964:	1884b03a 	or	r2,r3,r2
    4968:	e0bfcd15 	stw	r2,-204(fp)
    496c:	e17fcb17 	ldw	r5,-212(fp)
    4970:	e1bfcd17 	ldw	r6,-204(fp)
    4974:	298af03a 	xor	r5,r5,r6
    4978:	e17fcf15 	stw	r5,-196(fp)
    497c:	e1ffcc17 	ldw	r7,-208(fp)
    4980:	e0bfce17 	ldw	r2,-200(fp)
    4984:	388ef03a 	xor	r7,r7,r2
    4988:	e1ffd015 	stw	r7,-192(fp)
    498c:	e0bf8717 	ldw	r2,-484(fp)
    4990:	100696ba 	slli	r3,r2,26
    4994:	e0bf8617 	ldw	r2,-488(fp)
    4998:	1004d1ba 	srli	r2,r2,6
    499c:	e0bfd115 	stw	r2,-188(fp)
    49a0:	e13fd117 	ldw	r4,-188(fp)
    49a4:	1906b03a 	or	r3,r3,r4
    49a8:	e0ffd115 	stw	r3,-188(fp)
    49ac:	e0bf8717 	ldw	r2,-484(fp)
    49b0:	1004d1ba 	srli	r2,r2,6
    49b4:	e0bfd215 	stw	r2,-184(fp)
    49b8:	e17fcf17 	ldw	r5,-196(fp)
    49bc:	e1bfd117 	ldw	r6,-188(fp)
    49c0:	2984f03a 	xor	r2,r5,r6
    49c4:	e0bf8615 	stw	r2,-488(fp)
    49c8:	e1ffd017 	ldw	r7,-192(fp)
    49cc:	e0ffd217 	ldw	r3,-184(fp)
    49d0:	38c4f03a 	xor	r2,r7,r3
    49d4:	e0bf8715 	stw	r2,-484(fp)

		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    49d8:	e0bf7817 	ldw	r2,-544(fp)
    49dc:	100694ba 	slli	r3,r2,18
    49e0:	e0bf7717 	ldw	r2,-548(fp)
    49e4:	1004d3ba 	srli	r2,r2,14
    49e8:	1884b03a 	or	r2,r3,r2
    49ec:	e0bfd315 	stw	r2,-180(fp)
    49f0:	e0bf7717 	ldw	r2,-548(fp)
    49f4:	100694ba 	slli	r3,r2,18
    49f8:	e0bf7817 	ldw	r2,-544(fp)
    49fc:	1004d3ba 	srli	r2,r2,14
    4a00:	1884b03a 	or	r2,r3,r2
    4a04:	e0bfd415 	stw	r2,-176(fp)
    4a08:	e0bf7817 	ldw	r2,-544(fp)
    4a0c:	100693ba 	slli	r3,r2,14
    4a10:	e0bf7717 	ldw	r2,-548(fp)
    4a14:	1004d4ba 	srli	r2,r2,18
    4a18:	1884b03a 	or	r2,r3,r2
    4a1c:	e0bfd515 	stw	r2,-172(fp)
    4a20:	e0bf7717 	ldw	r2,-548(fp)
    4a24:	100693ba 	slli	r3,r2,14
    4a28:	e0bf7817 	ldw	r2,-544(fp)
    4a2c:	1004d4ba 	srli	r2,r2,18
    4a30:	1884b03a 	or	r2,r3,r2
    4a34:	e0bfd615 	stw	r2,-168(fp)
    4a38:	e13fd317 	ldw	r4,-180(fp)
    4a3c:	e17fd517 	ldw	r5,-172(fp)
    4a40:	2148f03a 	xor	r4,r4,r5
    4a44:	e13fd715 	stw	r4,-164(fp)
    4a48:	e1bfd417 	ldw	r6,-176(fp)
    4a4c:	e1ffd617 	ldw	r7,-168(fp)
    4a50:	31ccf03a 	xor	r6,r6,r7
    4a54:	e1bfd815 	stw	r6,-160(fp)
    4a58:	e0bf7717 	ldw	r2,-548(fp)
    4a5c:	1006d27a 	srli	r3,r2,9
    4a60:	e0bf7817 	ldw	r2,-544(fp)
    4a64:	100495fa 	slli	r2,r2,23
    4a68:	1884b03a 	or	r2,r3,r2
    4a6c:	e0bfda15 	stw	r2,-152(fp)
    4a70:	e0bf7817 	ldw	r2,-544(fp)
    4a74:	1006d27a 	srli	r3,r2,9
    4a78:	e0bf7717 	ldw	r2,-548(fp)
    4a7c:	100495fa 	slli	r2,r2,23
    4a80:	1884b03a 	or	r2,r3,r2
    4a84:	e0bfd915 	stw	r2,-156(fp)
    4a88:	e0bfd717 	ldw	r2,-164(fp)
    4a8c:	e0ffd917 	ldw	r3,-156(fp)
    4a90:	10c4f03a 	xor	r2,r2,r3
    4a94:	e0bfdb15 	stw	r2,-148(fp)
    4a98:	e13fd817 	ldw	r4,-160(fp)
    4a9c:	e17fda17 	ldw	r5,-152(fp)
    4aa0:	2148f03a 	xor	r4,r4,r5
    4aa4:	e13fdc15 	stw	r4,-144(fp)
    4aa8:	e0bf7d17 	ldw	r2,-524(fp)
    4aac:	e0ff7e17 	ldw	r3,-520(fp)
    4ab0:	e1bfdb17 	ldw	r6,-148(fp)
    4ab4:	3089883a 	add	r4,r6,r2
    4ab8:	e1ffdb17 	ldw	r7,-148(fp)
    4abc:	21cd803a 	cmpltu	r6,r4,r7
    4ac0:	e1ffdc17 	ldw	r7,-144(fp)
    4ac4:	38cb883a 	add	r5,r7,r3
    4ac8:	3145883a 	add	r2,r6,r5
    4acc:	100b883a 	mov	r5,r2
    4ad0:	200d883a 	mov	r6,r4
    4ad4:	280f883a 	mov	r7,r5
    4ad8:	e0ff7717 	ldw	r3,-548(fp)
    4adc:	e0bf7917 	ldw	r2,-540(fp)
    4ae0:	1884703a 	and	r2,r3,r2
    4ae4:	e0bfdd15 	stw	r2,-140(fp)
    4ae8:	e0ff7817 	ldw	r3,-544(fp)
    4aec:	e0bf7a17 	ldw	r2,-536(fp)
    4af0:	1884703a 	and	r2,r3,r2
    4af4:	e0bfde15 	stw	r2,-136(fp)
    4af8:	e0bf7717 	ldw	r2,-548(fp)
    4afc:	0084303a 	nor	r2,zero,r2
    4b00:	e0bfdf15 	stw	r2,-132(fp)
    4b04:	e0bf7817 	ldw	r2,-544(fp)
    4b08:	0084303a 	nor	r2,zero,r2
    4b0c:	e0bfe015 	stw	r2,-128(fp)
    4b10:	e0bf7b17 	ldw	r2,-532(fp)
    4b14:	e0ffdf17 	ldw	r3,-132(fp)
    4b18:	10c4703a 	and	r2,r2,r3
    4b1c:	e0bfe115 	stw	r2,-124(fp)
    4b20:	e0bf7c17 	ldw	r2,-528(fp)
    4b24:	e13fe017 	ldw	r4,-128(fp)
    4b28:	1104703a 	and	r2,r2,r4
    4b2c:	e0bfe215 	stw	r2,-120(fp)
    4b30:	e17fdd17 	ldw	r5,-140(fp)
    4b34:	e0bfe117 	ldw	r2,-124(fp)
    4b38:	288af03a 	xor	r5,r5,r2
    4b3c:	e17fe315 	stw	r5,-116(fp)
    4b40:	e0ffde17 	ldw	r3,-136(fp)
    4b44:	e13fe217 	ldw	r4,-120(fp)
    4b48:	1906f03a 	xor	r3,r3,r4
    4b4c:	e0ffe415 	stw	r3,-112(fp)
    4b50:	e17fe317 	ldw	r5,-116(fp)
    4b54:	3145883a 	add	r2,r6,r5
    4b58:	1189803a 	cmpltu	r4,r2,r6
    4b5c:	e17fe417 	ldw	r5,-112(fp)
    4b60:	3947883a 	add	r3,r7,r5
    4b64:	20c9883a 	add	r4,r4,r3
    4b68:	2007883a 	mov	r3,r4
    4b6c:	100f883a 	mov	r7,r2
    4b70:	1811883a 	mov	r8,r3
    4b74:	00c00074 	movhi	r3,1
    4b78:	18c4dc04 	addi	r3,r3,4976
    4b7c:	e0bf7f17 	ldw	r2,-516(fp)
    4b80:	100490fa 	slli	r2,r2,3
    4b84:	1889883a 	add	r4,r3,r2
    4b88:	20800017 	ldw	r2,0(r4)
    4b8c:	20c00117 	ldw	r3,4(r4)
    4b90:	3889883a 	add	r4,r7,r2
    4b94:	21cd803a 	cmpltu	r6,r4,r7
    4b98:	40cb883a 	add	r5,r8,r3
    4b9c:	3145883a 	add	r2,r6,r5
    4ba0:	100b883a 	mov	r5,r2
    4ba4:	2017883a 	mov	r11,r4
    4ba8:	2819883a 	mov	r12,r5
		     (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);
    4bac:	e0bf7f17 	ldw	r2,-516(fp)
    4bb0:	134003cc 	andi	r13,r2,15
    4bb4:	e0bf7f17 	ldw	r2,-516(fp)
    4bb8:	108003cc 	andi	r2,r2,15
    4bbc:	100490fa 	slli	r2,r2,3
    4bc0:	e1bf6f04 	addi	r6,fp,-580
    4bc4:	3085883a 	add	r2,r6,r2
    4bc8:	10801904 	addi	r2,r2,100
    4bcc:	12400017 	ldw	r9,0(r2)
    4bd0:	12800117 	ldw	r10,4(r2)
    4bd4:	e0bf7f17 	ldw	r2,-516(fp)
    4bd8:	10800244 	addi	r2,r2,9
    4bdc:	108003cc 	andi	r2,r2,15
    4be0:	100490fa 	slli	r2,r2,3
    4be4:	e1ff6f04 	addi	r7,fp,-580
    4be8:	3885883a 	add	r2,r7,r2
    4bec:	10801904 	addi	r2,r2,100
    4bf0:	11c00017 	ldw	r7,0(r2)
    4bf4:	12000117 	ldw	r8,4(r2)
    4bf8:	e0bf8617 	ldw	r2,-488(fp)
    4bfc:	e0ff8717 	ldw	r3,-484(fp)
    4c00:	3889883a 	add	r4,r7,r2
    4c04:	21cd803a 	cmpltu	r6,r4,r7
    4c08:	40cb883a 	add	r5,r8,r3
    4c0c:	3145883a 	add	r2,r6,r5
    4c10:	100b883a 	mov	r5,r2
    4c14:	200f883a 	mov	r7,r4
    4c18:	2811883a 	mov	r8,r5
    4c1c:	e0bf8417 	ldw	r2,-496(fp)
    4c20:	e0ff8517 	ldw	r3,-492(fp)
    4c24:	3889883a 	add	r4,r7,r2
    4c28:	21cd803a 	cmpltu	r6,r4,r7
    4c2c:	40cb883a 	add	r5,r8,r3
    4c30:	3145883a 	add	r2,r6,r5
    4c34:	100b883a 	mov	r5,r2
    4c38:	200d883a 	mov	r6,r4
    4c3c:	280f883a 	mov	r7,r5
    4c40:	4985883a 	add	r2,r9,r6
    4c44:	1249803a 	cmpltu	r4,r2,r9
    4c48:	51c7883a 	add	r3,r10,r7
    4c4c:	20c9883a 	add	r4,r4,r3
    4c50:	2007883a 	mov	r3,r4
    4c54:	1009883a 	mov	r4,r2
    4c58:	180b883a 	mov	r5,r3
    4c5c:	680490fa 	slli	r2,r13,3
    4c60:	e0ff6f04 	addi	r3,fp,-580
    4c64:	1885883a 	add	r2,r3,r2
    4c68:	10801904 	addi	r2,r2,100
    4c6c:	11000015 	stw	r4,0(r2)
    4c70:	11400115 	stw	r5,4(r2)
    4c74:	680490fa 	slli	r2,r13,3
    4c78:	e13f6f04 	addi	r4,fp,-580
    4c7c:	2085883a 	add	r2,r4,r2
    4c80:	10801904 	addi	r2,r2,100
    4c84:	11000017 	ldw	r4,0(r2)
    4c88:	11400117 	ldw	r5,4(r2)
		s0 = sigma0_512(s0);
		s1 = W512[(j+14)&0x0f];
		s1 =  sigma1_512(s1);

		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    4c8c:	5905883a 	add	r2,r11,r4
    4c90:	12cd803a 	cmpltu	r6,r2,r11
    4c94:	6147883a 	add	r3,r12,r5
    4c98:	30c9883a 	add	r4,r6,r3
    4c9c:	2007883a 	mov	r3,r4
    4ca0:	e0bf8015 	stw	r2,-512(fp)
    4ca4:	e0ff8115 	stw	r3,-508(fp)
		     (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);
		T2 = Sigma0_512(a) + Maj(a, b, c);
    4ca8:	e0bf7017 	ldw	r2,-576(fp)
    4cac:	1006913a 	slli	r3,r2,4
    4cb0:	e0bf6f17 	ldw	r2,-580(fp)
    4cb4:	1004d73a 	srli	r2,r2,28
    4cb8:	1884b03a 	or	r2,r3,r2
    4cbc:	e0bfe515 	stw	r2,-108(fp)
    4cc0:	e0bf6f17 	ldw	r2,-580(fp)
    4cc4:	1006913a 	slli	r3,r2,4
    4cc8:	e0bf7017 	ldw	r2,-576(fp)
    4ccc:	1004d73a 	srli	r2,r2,28
    4cd0:	1884b03a 	or	r2,r3,r2
    4cd4:	e0bfe615 	stw	r2,-104(fp)
    4cd8:	e0bf6f17 	ldw	r2,-580(fp)
    4cdc:	1006d0ba 	srli	r3,r2,2
    4ce0:	e0bf7017 	ldw	r2,-576(fp)
    4ce4:	100497ba 	slli	r2,r2,30
    4ce8:	1884b03a 	or	r2,r3,r2
    4cec:	e0bfe815 	stw	r2,-96(fp)
    4cf0:	e0bf7017 	ldw	r2,-576(fp)
    4cf4:	1006d0ba 	srli	r3,r2,2
    4cf8:	e0bf6f17 	ldw	r2,-580(fp)
    4cfc:	100497ba 	slli	r2,r2,30
    4d00:	1884b03a 	or	r2,r3,r2
    4d04:	e0bfe715 	stw	r2,-100(fp)
    4d08:	e17fe517 	ldw	r5,-108(fp)
    4d0c:	e1bfe717 	ldw	r6,-100(fp)
    4d10:	298af03a 	xor	r5,r5,r6
    4d14:	e17fe915 	stw	r5,-92(fp)
    4d18:	e1ffe617 	ldw	r7,-104(fp)
    4d1c:	e0bfe817 	ldw	r2,-96(fp)
    4d20:	388ef03a 	xor	r7,r7,r2
    4d24:	e1ffea15 	stw	r7,-88(fp)
    4d28:	e0bf6f17 	ldw	r2,-580(fp)
    4d2c:	1006d1fa 	srli	r3,r2,7
    4d30:	e0bf7017 	ldw	r2,-576(fp)
    4d34:	1004967a 	slli	r2,r2,25
    4d38:	1884b03a 	or	r2,r3,r2
    4d3c:	e0bfec15 	stw	r2,-80(fp)
    4d40:	e0bf7017 	ldw	r2,-576(fp)
    4d44:	1006d1fa 	srli	r3,r2,7
    4d48:	e0bf6f17 	ldw	r2,-580(fp)
    4d4c:	1004967a 	slli	r2,r2,25
    4d50:	1884b03a 	or	r2,r3,r2
    4d54:	e0bfeb15 	stw	r2,-84(fp)
    4d58:	e0ffe917 	ldw	r3,-92(fp)
    4d5c:	e13feb17 	ldw	r4,-84(fp)
    4d60:	1906f03a 	xor	r3,r3,r4
    4d64:	e0ffed15 	stw	r3,-76(fp)
    4d68:	e17fea17 	ldw	r5,-88(fp)
    4d6c:	e1bfec17 	ldw	r6,-80(fp)
    4d70:	298af03a 	xor	r5,r5,r6
    4d74:	e17fee15 	stw	r5,-72(fp)
    4d78:	e0ff6f17 	ldw	r3,-580(fp)
    4d7c:	e0bf7117 	ldw	r2,-572(fp)
    4d80:	1884703a 	and	r2,r3,r2
    4d84:	e0bfef15 	stw	r2,-68(fp)
    4d88:	e0ff7017 	ldw	r3,-576(fp)
    4d8c:	e0bf7217 	ldw	r2,-568(fp)
    4d90:	1884703a 	and	r2,r3,r2
    4d94:	e0bff015 	stw	r2,-64(fp)
    4d98:	e0ff6f17 	ldw	r3,-580(fp)
    4d9c:	e0bf7317 	ldw	r2,-564(fp)
    4da0:	1884703a 	and	r2,r3,r2
    4da4:	e0bff115 	stw	r2,-60(fp)
    4da8:	e0ff7017 	ldw	r3,-576(fp)
    4dac:	e0bf7417 	ldw	r2,-560(fp)
    4db0:	1884703a 	and	r2,r3,r2
    4db4:	e0bff215 	stw	r2,-56(fp)
    4db8:	e1ffef17 	ldw	r7,-68(fp)
    4dbc:	e0bff117 	ldw	r2,-60(fp)
    4dc0:	388ef03a 	xor	r7,r7,r2
    4dc4:	e1fff315 	stw	r7,-52(fp)
    4dc8:	e0fff017 	ldw	r3,-64(fp)
    4dcc:	e13ff217 	ldw	r4,-56(fp)
    4dd0:	1906f03a 	xor	r3,r3,r4
    4dd4:	e0fff415 	stw	r3,-48(fp)
    4dd8:	e0ff7117 	ldw	r3,-572(fp)
    4ddc:	e0bf7317 	ldw	r2,-564(fp)
    4de0:	1884703a 	and	r2,r3,r2
    4de4:	e0bff515 	stw	r2,-44(fp)
    4de8:	e0ff7217 	ldw	r3,-568(fp)
    4dec:	e0bf7417 	ldw	r2,-560(fp)
    4df0:	1884703a 	and	r2,r3,r2
    4df4:	e0bff615 	stw	r2,-40(fp)
    4df8:	e17ff317 	ldw	r5,-52(fp)
    4dfc:	e1bff517 	ldw	r6,-44(fp)
    4e00:	298af03a 	xor	r5,r5,r6
    4e04:	e17ff715 	stw	r5,-36(fp)
    4e08:	e1fff417 	ldw	r7,-48(fp)
    4e0c:	e0bff617 	ldw	r2,-40(fp)
    4e10:	388ef03a 	xor	r7,r7,r2
    4e14:	e1fff815 	stw	r7,-32(fp)
    4e18:	e13fed17 	ldw	r4,-76(fp)
    4e1c:	e17ff717 	ldw	r5,-36(fp)
    4e20:	2145883a 	add	r2,r4,r5
    4e24:	e1bfed17 	ldw	r6,-76(fp)
    4e28:	1189803a 	cmpltu	r4,r2,r6
    4e2c:	e1ffee17 	ldw	r7,-72(fp)
    4e30:	e17ff817 	ldw	r5,-32(fp)
    4e34:	3947883a 	add	r3,r7,r5
    4e38:	20c9883a 	add	r4,r4,r3
    4e3c:	2007883a 	mov	r3,r4
    4e40:	e0bf8215 	stw	r2,-504(fp)
    4e44:	e0ff8315 	stw	r3,-500(fp)
		h = g;
    4e48:	e0bf7b17 	ldw	r2,-532(fp)
    4e4c:	e0bf7d15 	stw	r2,-524(fp)
    4e50:	e0bf7c17 	ldw	r2,-528(fp)
    4e54:	e0bf7e15 	stw	r2,-520(fp)
		g = f;
    4e58:	e0bf7917 	ldw	r2,-540(fp)
    4e5c:	e0bf7b15 	stw	r2,-532(fp)
    4e60:	e0bf7a17 	ldw	r2,-536(fp)
    4e64:	e0bf7c15 	stw	r2,-528(fp)
		f = e;
    4e68:	e0bf7717 	ldw	r2,-548(fp)
    4e6c:	e0bf7915 	stw	r2,-540(fp)
    4e70:	e0bf7817 	ldw	r2,-544(fp)
    4e74:	e0bf7a15 	stw	r2,-536(fp)
		e = d + T1;
    4e78:	e1ff7517 	ldw	r7,-556(fp)
    4e7c:	e23f7617 	ldw	r8,-552(fp)
    4e80:	e13f8017 	ldw	r4,-512(fp)
    4e84:	e17f8117 	ldw	r5,-508(fp)
    4e88:	3905883a 	add	r2,r7,r4
    4e8c:	11cd803a 	cmpltu	r6,r2,r7
    4e90:	4147883a 	add	r3,r8,r5
    4e94:	30c9883a 	add	r4,r6,r3
    4e98:	2007883a 	mov	r3,r4
    4e9c:	e0bf7715 	stw	r2,-548(fp)
    4ea0:	e0ff7815 	stw	r3,-544(fp)
		d = c;
    4ea4:	e0bf7317 	ldw	r2,-564(fp)
    4ea8:	e0bf7515 	stw	r2,-556(fp)
    4eac:	e0bf7417 	ldw	r2,-560(fp)
    4eb0:	e0bf7615 	stw	r2,-552(fp)
		c = b;
    4eb4:	e0bf7117 	ldw	r2,-572(fp)
    4eb8:	e0bf7315 	stw	r2,-564(fp)
    4ebc:	e0bf7217 	ldw	r2,-568(fp)
    4ec0:	e0bf7415 	stw	r2,-560(fp)
		b = a;
    4ec4:	e0bf6f17 	ldw	r2,-580(fp)
    4ec8:	e0bf7115 	stw	r2,-572(fp)
    4ecc:	e0bf7017 	ldw	r2,-576(fp)
    4ed0:	e0bf7215 	stw	r2,-568(fp)
		a = T1 + T2;
    4ed4:	e1ff8017 	ldw	r7,-512(fp)
    4ed8:	e23f8117 	ldw	r8,-508(fp)
    4edc:	e13f8217 	ldw	r4,-504(fp)
    4ee0:	e17f8317 	ldw	r5,-500(fp)
    4ee4:	3905883a 	add	r2,r7,r4
    4ee8:	11cd803a 	cmpltu	r6,r2,r7
    4eec:	4147883a 	add	r3,r8,r5
    4ef0:	30c9883a 	add	r4,r6,r3
    4ef4:	2007883a 	mov	r3,r4
    4ef8:	e0bf6f15 	stw	r2,-580(fp)
    4efc:	e0ff7015 	stw	r3,-576(fp)

		j++;
    4f00:	e0bf7f17 	ldw	r2,-516(fp)
    4f04:	10800044 	addi	r2,r2,1
    4f08:	e0bf7f15 	stw	r2,-516(fp)
	} while (j < 80);
    4f0c:	e0bf7f17 	ldw	r2,-516(fp)
    4f10:	10801410 	cmplti	r2,r2,80
    4f14:	103e341e 	bne	r2,zero,47e8 <__alt_mem_epcs_flash_controller+0xfdffb7e8>

	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    4f18:	e0bfa817 	ldw	r2,-352(fp)
    4f1c:	11000017 	ldw	r4,0(r2)
    4f20:	11400117 	ldw	r5,4(r2)
    4f24:	e1bf6f17 	ldw	r6,-580(fp)
    4f28:	e1ff7017 	ldw	r7,-576(fp)
    4f2c:	2185883a 	add	r2,r4,r6
    4f30:	1111803a 	cmpltu	r8,r2,r4
    4f34:	29c7883a 	add	r3,r5,r7
    4f38:	40c9883a 	add	r4,r8,r3
    4f3c:	2007883a 	mov	r3,r4
    4f40:	1009883a 	mov	r4,r2
    4f44:	180b883a 	mov	r5,r3
    4f48:	e0bfaa17 	ldw	r2,-344(fp)
    4f4c:	11000015 	stw	r4,0(r2)
    4f50:	11400115 	stw	r5,4(r2)
	state_out[1] = state_in[1] + b;
    4f54:	e0bfaa17 	ldw	r2,-344(fp)
    4f58:	12000204 	addi	r8,r2,8
    4f5c:	e0bfa817 	ldw	r2,-352(fp)
    4f60:	10800204 	addi	r2,r2,8
    4f64:	11000017 	ldw	r4,0(r2)
    4f68:	11400117 	ldw	r5,4(r2)
    4f6c:	e1bf7117 	ldw	r6,-572(fp)
    4f70:	e1ff7217 	ldw	r7,-568(fp)
    4f74:	2185883a 	add	r2,r4,r6
    4f78:	1113803a 	cmpltu	r9,r2,r4
    4f7c:	29c7883a 	add	r3,r5,r7
    4f80:	48c9883a 	add	r4,r9,r3
    4f84:	2007883a 	mov	r3,r4
    4f88:	1009883a 	mov	r4,r2
    4f8c:	180b883a 	mov	r5,r3
    4f90:	41000015 	stw	r4,0(r8)
    4f94:	41400115 	stw	r5,4(r8)
	state_out[2] = state_in[2] + c;
    4f98:	e0bfaa17 	ldw	r2,-344(fp)
    4f9c:	12000404 	addi	r8,r2,16
    4fa0:	e0bfa817 	ldw	r2,-352(fp)
    4fa4:	10800404 	addi	r2,r2,16
    4fa8:	11000017 	ldw	r4,0(r2)
    4fac:	11400117 	ldw	r5,4(r2)
    4fb0:	e1bf7317 	ldw	r6,-564(fp)
    4fb4:	e1ff7417 	ldw	r7,-560(fp)
    4fb8:	2185883a 	add	r2,r4,r6
    4fbc:	1113803a 	cmpltu	r9,r2,r4
    4fc0:	29c7883a 	add	r3,r5,r7
    4fc4:	48c9883a 	add	r4,r9,r3
    4fc8:	2007883a 	mov	r3,r4
    4fcc:	1009883a 	mov	r4,r2
    4fd0:	180b883a 	mov	r5,r3
    4fd4:	41000015 	stw	r4,0(r8)
    4fd8:	41400115 	stw	r5,4(r8)
	state_out[3] = state_in[3] + d;
    4fdc:	e0bfaa17 	ldw	r2,-344(fp)
    4fe0:	12000604 	addi	r8,r2,24
    4fe4:	e0bfa817 	ldw	r2,-352(fp)
    4fe8:	10800604 	addi	r2,r2,24
    4fec:	11000017 	ldw	r4,0(r2)
    4ff0:	11400117 	ldw	r5,4(r2)
    4ff4:	e1bf7517 	ldw	r6,-556(fp)
    4ff8:	e1ff7617 	ldw	r7,-552(fp)
    4ffc:	2185883a 	add	r2,r4,r6
    5000:	1113803a 	cmpltu	r9,r2,r4
    5004:	29c7883a 	add	r3,r5,r7
    5008:	48c9883a 	add	r4,r9,r3
    500c:	2007883a 	mov	r3,r4
    5010:	1009883a 	mov	r4,r2
    5014:	180b883a 	mov	r5,r3
    5018:	41000015 	stw	r4,0(r8)
    501c:	41400115 	stw	r5,4(r8)
	state_out[4] = state_in[4] + e;
    5020:	e0bfaa17 	ldw	r2,-344(fp)
    5024:	12000804 	addi	r8,r2,32
    5028:	e0bfa817 	ldw	r2,-352(fp)
    502c:	10800804 	addi	r2,r2,32
    5030:	11000017 	ldw	r4,0(r2)
    5034:	11400117 	ldw	r5,4(r2)
    5038:	e1bf7717 	ldw	r6,-548(fp)
    503c:	e1ff7817 	ldw	r7,-544(fp)
    5040:	2185883a 	add	r2,r4,r6
    5044:	1113803a 	cmpltu	r9,r2,r4
    5048:	29c7883a 	add	r3,r5,r7
    504c:	48c9883a 	add	r4,r9,r3
    5050:	2007883a 	mov	r3,r4
    5054:	1009883a 	mov	r4,r2
    5058:	180b883a 	mov	r5,r3
    505c:	41000015 	stw	r4,0(r8)
    5060:	41400115 	stw	r5,4(r8)
	state_out[5] = state_in[5] + f;
    5064:	e0bfaa17 	ldw	r2,-344(fp)
    5068:	12000a04 	addi	r8,r2,40
    506c:	e0bfa817 	ldw	r2,-352(fp)
    5070:	10800a04 	addi	r2,r2,40
    5074:	11000017 	ldw	r4,0(r2)
    5078:	11400117 	ldw	r5,4(r2)
    507c:	e1bf7917 	ldw	r6,-540(fp)
    5080:	e1ff7a17 	ldw	r7,-536(fp)
    5084:	2185883a 	add	r2,r4,r6
    5088:	1113803a 	cmpltu	r9,r2,r4
    508c:	29c7883a 	add	r3,r5,r7
    5090:	48c9883a 	add	r4,r9,r3
    5094:	2007883a 	mov	r3,r4
    5098:	1009883a 	mov	r4,r2
    509c:	180b883a 	mov	r5,r3
    50a0:	41000015 	stw	r4,0(r8)
    50a4:	41400115 	stw	r5,4(r8)
	state_out[6] = state_in[6] + g;
    50a8:	e0bfaa17 	ldw	r2,-344(fp)
    50ac:	12000c04 	addi	r8,r2,48
    50b0:	e0bfa817 	ldw	r2,-352(fp)
    50b4:	10800c04 	addi	r2,r2,48
    50b8:	11000017 	ldw	r4,0(r2)
    50bc:	11400117 	ldw	r5,4(r2)
    50c0:	e1bf7b17 	ldw	r6,-532(fp)
    50c4:	e1ff7c17 	ldw	r7,-528(fp)
    50c8:	2185883a 	add	r2,r4,r6
    50cc:	1113803a 	cmpltu	r9,r2,r4
    50d0:	29c7883a 	add	r3,r5,r7
    50d4:	48c9883a 	add	r4,r9,r3
    50d8:	2007883a 	mov	r3,r4
    50dc:	1009883a 	mov	r4,r2
    50e0:	180b883a 	mov	r5,r3
    50e4:	41000015 	stw	r4,0(r8)
    50e8:	41400115 	stw	r5,4(r8)
	state_out[7] = state_in[7] + h;
    50ec:	e0bfaa17 	ldw	r2,-344(fp)
    50f0:	12000e04 	addi	r8,r2,56
    50f4:	e0bfa817 	ldw	r2,-352(fp)
    50f8:	10800e04 	addi	r2,r2,56
    50fc:	11000017 	ldw	r4,0(r2)
    5100:	11400117 	ldw	r5,4(r2)
    5104:	e1bf7d17 	ldw	r6,-524(fp)
    5108:	e1ff7e17 	ldw	r7,-520(fp)
    510c:	2185883a 	add	r2,r4,r6
    5110:	1113803a 	cmpltu	r9,r2,r4
    5114:	29c7883a 	add	r3,r5,r7
    5118:	48c9883a 	add	r4,r9,r3
    511c:	2007883a 	mov	r3,r4
    5120:	1009883a 	mov	r4,r2
    5124:	180b883a 	mov	r5,r3
    5128:	41000015 	stw	r4,0(r8)
    512c:	41400115 	stw	r5,4(r8)

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
    5130:	e03f8215 	stw	zero,-504(fp)
    5134:	e03f8315 	stw	zero,-500(fp)
    5138:	e0bf8217 	ldw	r2,-504(fp)
    513c:	e0bf8015 	stw	r2,-512(fp)
    5140:	e0bf8317 	ldw	r2,-500(fp)
    5144:	e0bf8115 	stw	r2,-508(fp)
    5148:	e0bf8017 	ldw	r2,-512(fp)
    514c:	e0bf7d15 	stw	r2,-524(fp)
    5150:	e0bf8117 	ldw	r2,-508(fp)
    5154:	e0bf7e15 	stw	r2,-520(fp)
    5158:	e0bf7d17 	ldw	r2,-524(fp)
    515c:	e0bf7b15 	stw	r2,-532(fp)
    5160:	e0bf7e17 	ldw	r2,-520(fp)
    5164:	e0bf7c15 	stw	r2,-528(fp)
    5168:	e0bf7b17 	ldw	r2,-532(fp)
    516c:	e0bf7915 	stw	r2,-540(fp)
    5170:	e0bf7c17 	ldw	r2,-528(fp)
    5174:	e0bf7a15 	stw	r2,-536(fp)
    5178:	e0bf7917 	ldw	r2,-540(fp)
    517c:	e0bf7715 	stw	r2,-548(fp)
    5180:	e0bf7a17 	ldw	r2,-536(fp)
    5184:	e0bf7815 	stw	r2,-544(fp)
    5188:	e0bf7717 	ldw	r2,-548(fp)
    518c:	e0bf7515 	stw	r2,-556(fp)
    5190:	e0bf7817 	ldw	r2,-544(fp)
    5194:	e0bf7615 	stw	r2,-552(fp)
    5198:	e0bf7517 	ldw	r2,-556(fp)
    519c:	e0bf7315 	stw	r2,-564(fp)
    51a0:	e0bf7617 	ldw	r2,-552(fp)
    51a4:	e0bf7415 	stw	r2,-560(fp)
    51a8:	e0bf7317 	ldw	r2,-564(fp)
    51ac:	e0bf7115 	stw	r2,-572(fp)
    51b0:	e0bf7417 	ldw	r2,-560(fp)
    51b4:	e0bf7215 	stw	r2,-568(fp)
    51b8:	e0bf7117 	ldw	r2,-572(fp)
    51bc:	e0bf6f15 	stw	r2,-580(fp)
    51c0:	e0bf7217 	ldw	r2,-568(fp)
    51c4:	e0bf7015 	stw	r2,-576(fp)
}
    51c8:	0001883a 	nop
    51cc:	e6fff904 	addi	sp,fp,-28
    51d0:	df000717 	ldw	fp,28(sp)
    51d4:	dd800617 	ldw	r22,24(sp)
    51d8:	dd400517 	ldw	r21,20(sp)
    51dc:	dd000417 	ldw	r20,16(sp)
    51e0:	dcc00317 	ldw	r19,12(sp)
    51e4:	dc800217 	ldw	r18,8(sp)
    51e8:	dc400117 	ldw	r17,4(sp)
    51ec:	dc000017 	ldw	r16,0(sp)
    51f0:	dec00804 	addi	sp,sp,32
    51f4:	f800283a 	ret

000051f8 <sha512_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
    51f8:	deffbf04 	addi	sp,sp,-260
    51fc:	dfc04015 	stw	ra,256(sp)
    5200:	df003f15 	stw	fp,252(sp)
    5204:	ddc03e15 	stw	r23,248(sp)
    5208:	dd803d15 	stw	r22,244(sp)
    520c:	dd403c15 	stw	r21,240(sp)
    5210:	dd003b15 	stw	r20,236(sp)
    5214:	dcc03a15 	stw	r19,232(sp)
    5218:	dc803915 	stw	r18,228(sp)
    521c:	dc403815 	stw	r17,224(sp)
    5220:	dc003715 	stw	r16,220(sp)
    5224:	df003f04 	addi	fp,sp,252
    5228:	e13fc915 	stw	r4,-220(fp)
    522c:	e17fca15 	stw	r5,-216(fp)
    5230:	e1bfcb15 	stw	r6,-212(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    5234:	e0bfcb17 	ldw	r2,-212(fp)
    5238:	1001fd26 	beq	r2,zero,5a30 <sha512_Update+0x838>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    523c:	e13fc917 	ldw	r4,-220(fp)
    5240:	20801017 	ldw	r2,64(r4)
    5244:	20c01117 	ldw	r3,68(r4)
    5248:	1808977a 	slli	r4,r3,29
    524c:	100ed0fa 	srli	r7,r2,3
    5250:	21ceb03a 	or	r7,r4,r7
    5254:	1810d0fa 	srli	r8,r3,3
    5258:	3805883a 	mov	r2,r7
    525c:	10801fcc 	andi	r2,r2,127
    5260:	e0bfc315 	stw	r2,-244(fp)
	if (usedspace > 0) {
    5264:	e0bfc317 	ldw	r2,-244(fp)
    5268:	1001b326 	beq	r2,zero,5938 <sha512_Update+0x740>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA512_BLOCK_LENGTH - usedspace;
    526c:	00c02004 	movi	r3,128
    5270:	e0bfc317 	ldw	r2,-244(fp)
    5274:	1885c83a 	sub	r2,r3,r2
    5278:	e0bfc415 	stw	r2,-240(fp)

		if (len >= freespace) {
    527c:	e0ffcb17 	ldw	r3,-212(fp)
    5280:	e0bfc417 	ldw	r2,-240(fp)
    5284:	1880c036 	bltu	r3,r2,5588 <sha512_Update+0x390>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    5288:	e0bfc917 	ldw	r2,-220(fp)
    528c:	10c01404 	addi	r3,r2,80
    5290:	e0bfc317 	ldw	r2,-244(fp)
    5294:	1885883a 	add	r2,r3,r2
    5298:	e1bfc417 	ldw	r6,-240(fp)
    529c:	e17fca17 	ldw	r5,-216(fp)
    52a0:	1009883a 	mov	r4,r2
    52a4:	00064d00 	call	64d0 <memcpy>
			ADDINC128(context->bitcount, freespace << 3);
    52a8:	e0bfc917 	ldw	r2,-220(fp)
    52ac:	11401017 	ldw	r5,64(r2)
    52b0:	11801117 	ldw	r6,68(r2)
    52b4:	e0bfc417 	ldw	r2,-240(fp)
    52b8:	100490fa 	slli	r2,r2,3
    52bc:	102d883a 	mov	r22,r2
    52c0:	002f883a 	mov	r23,zero
    52c4:	2d85883a 	add	r2,r5,r22
    52c8:	1149803a 	cmpltu	r4,r2,r5
    52cc:	35c7883a 	add	r3,r6,r23
    52d0:	20c9883a 	add	r4,r4,r3
    52d4:	2007883a 	mov	r3,r4
    52d8:	1009883a 	mov	r4,r2
    52dc:	180b883a 	mov	r5,r3
    52e0:	e0bfc917 	ldw	r2,-220(fp)
    52e4:	11001015 	stw	r4,64(r2)
    52e8:	11401115 	stw	r5,68(r2)
    52ec:	e0bfc917 	ldw	r2,-220(fp)
    52f0:	10c01017 	ldw	r3,64(r2)
    52f4:	11001117 	ldw	r4,68(r2)
    52f8:	e0bfc417 	ldw	r2,-240(fp)
    52fc:	100490fa 	slli	r2,r2,3
    5300:	1029883a 	mov	r20,r2
    5304:	002b883a 	mov	r21,zero
    5308:	25400236 	bltu	r4,r21,5314 <sha512_Update+0x11c>
    530c:	a900101e 	bne	r21,r4,5350 <sha512_Update+0x158>
    5310:	1d000f2e 	bgeu	r3,r20,5350 <sha512_Update+0x158>
    5314:	e0bfc917 	ldw	r2,-220(fp)
    5318:	11c01217 	ldw	r7,72(r2)
    531c:	12001317 	ldw	r8,76(r2)
    5320:	01000044 	movi	r4,1
    5324:	000b883a 	mov	r5,zero
    5328:	3905883a 	add	r2,r7,r4
    532c:	11cd803a 	cmpltu	r6,r2,r7
    5330:	4147883a 	add	r3,r8,r5
    5334:	30c9883a 	add	r4,r6,r3
    5338:	2007883a 	mov	r3,r4
    533c:	1009883a 	mov	r4,r2
    5340:	180b883a 	mov	r5,r3
    5344:	e0bfc917 	ldw	r2,-220(fp)
    5348:	11001215 	stw	r4,72(r2)
    534c:	11401315 	stw	r5,76(r2)
			len -= freespace;
    5350:	e0ffcb17 	ldw	r3,-212(fp)
    5354:	e0bfc417 	ldw	r2,-240(fp)
    5358:	1885c83a 	sub	r2,r3,r2
    535c:	e0bfcb15 	stw	r2,-212(fp)
			data += freespace;
    5360:	e0ffca17 	ldw	r3,-216(fp)
    5364:	e0bfc417 	ldw	r2,-240(fp)
    5368:	1885883a 	add	r2,r3,r2
    536c:	e0bfca15 	stw	r2,-216(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    5370:	e03fc115 	stw	zero,-252(fp)
    5374:	00007906 	br	555c <sha512_Update+0x364>
				REVERSE64(context->buffer[j],context->buffer[j]);
    5378:	e0ffc917 	ldw	r3,-220(fp)
    537c:	e0bfc117 	ldw	r2,-252(fp)
    5380:	10800284 	addi	r2,r2,10
    5384:	100490fa 	slli	r2,r2,3
    5388:	1887883a 	add	r3,r3,r2
    538c:	18800017 	ldw	r2,0(r3)
    5390:	e0bfc515 	stw	r2,-236(fp)
    5394:	18800117 	ldw	r2,4(r3)
    5398:	e0bfc615 	stw	r2,-232(fp)
    539c:	e0bfc617 	ldw	r2,-232(fp)
    53a0:	e0bff415 	stw	r2,-48(fp)
    53a4:	e0ffc517 	ldw	r3,-236(fp)
    53a8:	e0fff515 	stw	r3,-44(fp)
    53ac:	e13ff417 	ldw	r4,-48(fp)
    53b0:	e13fc515 	stw	r4,-236(fp)
    53b4:	e1bff517 	ldw	r6,-44(fp)
    53b8:	e1bfc615 	stw	r6,-232(fp)
    53bc:	e0ffc517 	ldw	r3,-236(fp)
    53c0:	00bfc074 	movhi	r2,65281
    53c4:	10bfc004 	addi	r2,r2,-256
    53c8:	1884703a 	and	r2,r3,r2
    53cc:	e0bfcc15 	stw	r2,-208(fp)
    53d0:	e0ffc617 	ldw	r3,-232(fp)
    53d4:	00bfc074 	movhi	r2,65281
    53d8:	10bfc004 	addi	r2,r2,-256
    53dc:	1884703a 	and	r2,r3,r2
    53e0:	e0bfcd15 	stw	r2,-204(fp)
    53e4:	e1ffcd17 	ldw	r7,-204(fp)
    53e8:	3804963a 	slli	r2,r7,24
    53ec:	e0ffcc17 	ldw	r3,-208(fp)
    53f0:	1806d23a 	srli	r3,r3,8
    53f4:	e0ffce15 	stw	r3,-200(fp)
    53f8:	e13fce17 	ldw	r4,-200(fp)
    53fc:	1104b03a 	or	r2,r2,r4
    5400:	e0bfce15 	stw	r2,-200(fp)
    5404:	e1bfcd17 	ldw	r6,-204(fp)
    5408:	300cd23a 	srli	r6,r6,8
    540c:	e1bfcf15 	stw	r6,-196(fp)
    5410:	e0ffc517 	ldw	r3,-236(fp)
    5414:	00803ff4 	movhi	r2,255
    5418:	10803fc4 	addi	r2,r2,255
    541c:	1884703a 	and	r2,r3,r2
    5420:	e0bfd015 	stw	r2,-192(fp)
    5424:	e0ffc617 	ldw	r3,-232(fp)
    5428:	00803ff4 	movhi	r2,255
    542c:	10803fc4 	addi	r2,r2,255
    5430:	1884703a 	and	r2,r3,r2
    5434:	e0bfd115 	stw	r2,-188(fp)
    5438:	e1ffd017 	ldw	r7,-192(fp)
    543c:	3804d63a 	srli	r2,r7,24
    5440:	e0ffd117 	ldw	r3,-188(fp)
    5444:	1806923a 	slli	r3,r3,8
    5448:	e0ffd315 	stw	r3,-180(fp)
    544c:	e13fd317 	ldw	r4,-180(fp)
    5450:	1104b03a 	or	r2,r2,r4
    5454:	e0bfd315 	stw	r2,-180(fp)
    5458:	e1bfd017 	ldw	r6,-192(fp)
    545c:	300c923a 	slli	r6,r6,8
    5460:	e1bfd215 	stw	r6,-184(fp)
    5464:	e1ffce17 	ldw	r7,-200(fp)
    5468:	e0ffd217 	ldw	r3,-184(fp)
    546c:	38c4b03a 	or	r2,r7,r3
    5470:	e0bfc515 	stw	r2,-236(fp)
    5474:	e13fcf17 	ldw	r4,-196(fp)
    5478:	e1bfd317 	ldw	r6,-180(fp)
    547c:	2184b03a 	or	r2,r4,r6
    5480:	e0bfc615 	stw	r2,-232(fp)
    5484:	e0bfc517 	ldw	r2,-236(fp)
    5488:	10bfffec 	andhi	r2,r2,65535
    548c:	e0bfd415 	stw	r2,-176(fp)
    5490:	e0bfc617 	ldw	r2,-232(fp)
    5494:	10bfffec 	andhi	r2,r2,65535
    5498:	e0bfd515 	stw	r2,-172(fp)
    549c:	e1ffd517 	ldw	r7,-172(fp)
    54a0:	3804943a 	slli	r2,r7,16
    54a4:	e0ffd417 	ldw	r3,-176(fp)
    54a8:	1806d43a 	srli	r3,r3,16
    54ac:	e0ffd615 	stw	r3,-168(fp)
    54b0:	e13fd617 	ldw	r4,-168(fp)
    54b4:	1104b03a 	or	r2,r2,r4
    54b8:	e0bfd615 	stw	r2,-168(fp)
    54bc:	e1bfd517 	ldw	r6,-172(fp)
    54c0:	300cd43a 	srli	r6,r6,16
    54c4:	e1bfd715 	stw	r6,-164(fp)
    54c8:	e0bfc517 	ldw	r2,-236(fp)
    54cc:	10bfffcc 	andi	r2,r2,65535
    54d0:	e0bfd815 	stw	r2,-160(fp)
    54d4:	e0bfc617 	ldw	r2,-232(fp)
    54d8:	10bfffcc 	andi	r2,r2,65535
    54dc:	e0bfd915 	stw	r2,-156(fp)
    54e0:	e1ffd817 	ldw	r7,-160(fp)
    54e4:	3804d43a 	srli	r2,r7,16
    54e8:	e0ffd917 	ldw	r3,-156(fp)
    54ec:	1806943a 	slli	r3,r3,16
    54f0:	e0ffdb15 	stw	r3,-148(fp)
    54f4:	e13fdb17 	ldw	r4,-148(fp)
    54f8:	1104b03a 	or	r2,r2,r4
    54fc:	e0bfdb15 	stw	r2,-148(fp)
    5500:	e1bfd817 	ldw	r6,-160(fp)
    5504:	300c943a 	slli	r6,r6,16
    5508:	e1bfda15 	stw	r6,-152(fp)
    550c:	e1ffd617 	ldw	r7,-168(fp)
    5510:	e0bfda17 	ldw	r2,-152(fp)
    5514:	388eb03a 	or	r7,r7,r2
    5518:	e1ffdc15 	stw	r7,-144(fp)
    551c:	e0ffd717 	ldw	r3,-164(fp)
    5520:	e13fdb17 	ldw	r4,-148(fp)
    5524:	1906b03a 	or	r3,r3,r4
    5528:	e0ffdd15 	stw	r3,-140(fp)
    552c:	e0ffc917 	ldw	r3,-220(fp)
    5530:	e0bfc117 	ldw	r2,-252(fp)
    5534:	10800284 	addi	r2,r2,10
    5538:	100490fa 	slli	r2,r2,3
    553c:	1885883a 	add	r2,r3,r2
    5540:	e1bfdc17 	ldw	r6,-144(fp)
    5544:	11800015 	stw	r6,0(r2)
    5548:	e1ffdd17 	ldw	r7,-140(fp)
    554c:	11c00115 	stw	r7,4(r2)
			ADDINC128(context->bitcount, freespace << 3);
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    5550:	e0bfc117 	ldw	r2,-252(fp)
    5554:	10800044 	addi	r2,r2,1
    5558:	e0bfc115 	stw	r2,-252(fp)
    555c:	e0bfc117 	ldw	r2,-252(fp)
    5560:	10800410 	cmplti	r2,r2,16
    5564:	103f841e 	bne	r2,zero,5378 <__alt_mem_epcs_flash_controller+0xfdffc378>
				REVERSE64(context->buffer[j],context->buffer[j]);
			}
#endif
			sha512_Transform(context->state, context->buffer, context->state);
    5568:	e13fc917 	ldw	r4,-220(fp)
    556c:	e0bfc917 	ldw	r2,-220(fp)
    5570:	10c01404 	addi	r3,r2,80
    5574:	e0bfc917 	ldw	r2,-220(fp)
    5578:	100d883a 	mov	r6,r2
    557c:	180b883a 	mov	r5,r3
    5580:	00042d80 	call	42d8 <sha512_Transform>
    5584:	0000ec06 	br	5938 <sha512_Update+0x740>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    5588:	e0bfc917 	ldw	r2,-220(fp)
    558c:	10c01404 	addi	r3,r2,80
    5590:	e0bfc317 	ldw	r2,-244(fp)
    5594:	1885883a 	add	r2,r3,r2
    5598:	e1bfcb17 	ldw	r6,-212(fp)
    559c:	e17fca17 	ldw	r5,-216(fp)
    55a0:	1009883a 	mov	r4,r2
    55a4:	00064d00 	call	64d0 <memcpy>
			ADDINC128(context->bitcount, len << 3);
    55a8:	e0bfc917 	ldw	r2,-220(fp)
    55ac:	11001017 	ldw	r4,64(r2)
    55b0:	11401117 	ldw	r5,68(r2)
    55b4:	e0bfcb17 	ldw	r2,-212(fp)
    55b8:	100490fa 	slli	r2,r2,3
    55bc:	1025883a 	mov	r18,r2
    55c0:	0027883a 	mov	r19,zero
    55c4:	2485883a 	add	r2,r4,r18
    55c8:	110d803a 	cmpltu	r6,r2,r4
    55cc:	2cc7883a 	add	r3,r5,r19
    55d0:	30c9883a 	add	r4,r6,r3
    55d4:	2007883a 	mov	r3,r4
    55d8:	1009883a 	mov	r4,r2
    55dc:	180b883a 	mov	r5,r3
    55e0:	e0bfc917 	ldw	r2,-220(fp)
    55e4:	11001015 	stw	r4,64(r2)
    55e8:	11401115 	stw	r5,68(r2)
    55ec:	e13fc917 	ldw	r4,-220(fp)
    55f0:	20801017 	ldw	r2,64(r4)
    55f4:	20c01117 	ldw	r3,68(r4)
    55f8:	e13fcb17 	ldw	r4,-212(fp)
    55fc:	200890fa 	slli	r4,r4,3
    5600:	2021883a 	mov	r16,r4
    5604:	0023883a 	mov	r17,zero
    5608:	1c400236 	bltu	r3,r17,5614 <sha512_Update+0x41c>
    560c:	88c0101e 	bne	r17,r3,5650 <sha512_Update+0x458>
    5610:	14000f2e 	bgeu	r2,r16,5650 <sha512_Update+0x458>
    5614:	e0bfc917 	ldw	r2,-220(fp)
    5618:	11001217 	ldw	r4,72(r2)
    561c:	11401317 	ldw	r5,76(r2)
    5620:	01800044 	movi	r6,1
    5624:	000f883a 	mov	r7,zero
    5628:	2185883a 	add	r2,r4,r6
    562c:	1111803a 	cmpltu	r8,r2,r4
    5630:	29c7883a 	add	r3,r5,r7
    5634:	40c9883a 	add	r4,r8,r3
    5638:	2007883a 	mov	r3,r4
    563c:	1009883a 	mov	r4,r2
    5640:	180b883a 	mov	r5,r3
    5644:	e0bfc917 	ldw	r2,-220(fp)
    5648:	11001215 	stw	r4,72(r2)
    564c:	11401315 	stw	r5,76(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    5650:	e03fc415 	stw	zero,-240(fp)
    5654:	e0bfc417 	ldw	r2,-240(fp)
    5658:	e0bfc315 	stw	r2,-244(fp)
			return;
    565c:	0000f506 	br	5a34 <sha512_Update+0x83c>
		}
	}
	while (len >= SHA512_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA512_BLOCK_LENGTH);
    5660:	e0bfc917 	ldw	r2,-220(fp)
    5664:	10801404 	addi	r2,r2,80
    5668:	01802004 	movi	r6,128
    566c:	e17fca17 	ldw	r5,-216(fp)
    5670:	1009883a 	mov	r4,r2
    5674:	00064d00 	call	64d0 <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    5678:	e03fc215 	stw	zero,-248(fp)
    567c:	00007906 	br	5864 <sha512_Update+0x66c>
			REVERSE64(context->buffer[j],context->buffer[j]);
    5680:	e0ffc917 	ldw	r3,-220(fp)
    5684:	e0bfc217 	ldw	r2,-248(fp)
    5688:	10800284 	addi	r2,r2,10
    568c:	100490fa 	slli	r2,r2,3
    5690:	1887883a 	add	r3,r3,r2
    5694:	18800017 	ldw	r2,0(r3)
    5698:	e0bfc715 	stw	r2,-228(fp)
    569c:	18800117 	ldw	r2,4(r3)
    56a0:	e0bfc815 	stw	r2,-224(fp)
    56a4:	e0bfc817 	ldw	r2,-224(fp)
    56a8:	e0bff615 	stw	r2,-40(fp)
    56ac:	e0ffc717 	ldw	r3,-228(fp)
    56b0:	e0fff715 	stw	r3,-36(fp)
    56b4:	e13ff617 	ldw	r4,-40(fp)
    56b8:	e13fc715 	stw	r4,-228(fp)
    56bc:	e1bff717 	ldw	r6,-36(fp)
    56c0:	e1bfc815 	stw	r6,-224(fp)
    56c4:	e0ffc717 	ldw	r3,-228(fp)
    56c8:	00bfc074 	movhi	r2,65281
    56cc:	10bfc004 	addi	r2,r2,-256
    56d0:	1884703a 	and	r2,r3,r2
    56d4:	e0bfde15 	stw	r2,-136(fp)
    56d8:	e0ffc817 	ldw	r3,-224(fp)
    56dc:	00bfc074 	movhi	r2,65281
    56e0:	10bfc004 	addi	r2,r2,-256
    56e4:	1884703a 	and	r2,r3,r2
    56e8:	e0bfdf15 	stw	r2,-132(fp)
    56ec:	e1ffdf17 	ldw	r7,-132(fp)
    56f0:	3804963a 	slli	r2,r7,24
    56f4:	e0ffde17 	ldw	r3,-136(fp)
    56f8:	1806d23a 	srli	r3,r3,8
    56fc:	e0ffe015 	stw	r3,-128(fp)
    5700:	e13fe017 	ldw	r4,-128(fp)
    5704:	1104b03a 	or	r2,r2,r4
    5708:	e0bfe015 	stw	r2,-128(fp)
    570c:	e1bfdf17 	ldw	r6,-132(fp)
    5710:	300cd23a 	srli	r6,r6,8
    5714:	e1bfe115 	stw	r6,-124(fp)
    5718:	e0ffc717 	ldw	r3,-228(fp)
    571c:	00803ff4 	movhi	r2,255
    5720:	10803fc4 	addi	r2,r2,255
    5724:	1884703a 	and	r2,r3,r2
    5728:	e0bfe215 	stw	r2,-120(fp)
    572c:	e0ffc817 	ldw	r3,-224(fp)
    5730:	00803ff4 	movhi	r2,255
    5734:	10803fc4 	addi	r2,r2,255
    5738:	1884703a 	and	r2,r3,r2
    573c:	e0bfe315 	stw	r2,-116(fp)
    5740:	e1ffe217 	ldw	r7,-120(fp)
    5744:	3804d63a 	srli	r2,r7,24
    5748:	e0ffe317 	ldw	r3,-116(fp)
    574c:	1806923a 	slli	r3,r3,8
    5750:	e0ffe515 	stw	r3,-108(fp)
    5754:	e13fe517 	ldw	r4,-108(fp)
    5758:	1104b03a 	or	r2,r2,r4
    575c:	e0bfe515 	stw	r2,-108(fp)
    5760:	e1bfe217 	ldw	r6,-120(fp)
    5764:	300c923a 	slli	r6,r6,8
    5768:	e1bfe415 	stw	r6,-112(fp)
    576c:	e1ffe017 	ldw	r7,-128(fp)
    5770:	e0ffe417 	ldw	r3,-112(fp)
    5774:	38c4b03a 	or	r2,r7,r3
    5778:	e0bfc715 	stw	r2,-228(fp)
    577c:	e13fe117 	ldw	r4,-124(fp)
    5780:	e1bfe517 	ldw	r6,-108(fp)
    5784:	2184b03a 	or	r2,r4,r6
    5788:	e0bfc815 	stw	r2,-224(fp)
    578c:	e0bfc717 	ldw	r2,-228(fp)
    5790:	10bfffec 	andhi	r2,r2,65535
    5794:	e0bfe615 	stw	r2,-104(fp)
    5798:	e0bfc817 	ldw	r2,-224(fp)
    579c:	10bfffec 	andhi	r2,r2,65535
    57a0:	e0bfe715 	stw	r2,-100(fp)
    57a4:	e1ffe717 	ldw	r7,-100(fp)
    57a8:	3804943a 	slli	r2,r7,16
    57ac:	e0ffe617 	ldw	r3,-104(fp)
    57b0:	1806d43a 	srli	r3,r3,16
    57b4:	e0ffe815 	stw	r3,-96(fp)
    57b8:	e13fe817 	ldw	r4,-96(fp)
    57bc:	1104b03a 	or	r2,r2,r4
    57c0:	e0bfe815 	stw	r2,-96(fp)
    57c4:	e1bfe717 	ldw	r6,-100(fp)
    57c8:	300cd43a 	srli	r6,r6,16
    57cc:	e1bfe915 	stw	r6,-92(fp)
    57d0:	e0bfc717 	ldw	r2,-228(fp)
    57d4:	10bfffcc 	andi	r2,r2,65535
    57d8:	e0bfea15 	stw	r2,-88(fp)
    57dc:	e0bfc817 	ldw	r2,-224(fp)
    57e0:	10bfffcc 	andi	r2,r2,65535
    57e4:	e0bfeb15 	stw	r2,-84(fp)
    57e8:	e1ffea17 	ldw	r7,-88(fp)
    57ec:	3804d43a 	srli	r2,r7,16
    57f0:	e0ffeb17 	ldw	r3,-84(fp)
    57f4:	1806943a 	slli	r3,r3,16
    57f8:	e0ffed15 	stw	r3,-76(fp)
    57fc:	e13fed17 	ldw	r4,-76(fp)
    5800:	1104b03a 	or	r2,r2,r4
    5804:	e0bfed15 	stw	r2,-76(fp)
    5808:	e1bfea17 	ldw	r6,-88(fp)
    580c:	300c943a 	slli	r6,r6,16
    5810:	e1bfec15 	stw	r6,-80(fp)
    5814:	e1ffe817 	ldw	r7,-96(fp)
    5818:	e0bfec17 	ldw	r2,-80(fp)
    581c:	388eb03a 	or	r7,r7,r2
    5820:	e1ffee15 	stw	r7,-72(fp)
    5824:	e0ffe917 	ldw	r3,-92(fp)
    5828:	e13fed17 	ldw	r4,-76(fp)
    582c:	1906b03a 	or	r3,r3,r4
    5830:	e0ffef15 	stw	r3,-68(fp)
    5834:	e0ffc917 	ldw	r3,-220(fp)
    5838:	e0bfc217 	ldw	r2,-248(fp)
    583c:	10800284 	addi	r2,r2,10
    5840:	100490fa 	slli	r2,r2,3
    5844:	1885883a 	add	r2,r3,r2
    5848:	e1bfee17 	ldw	r6,-72(fp)
    584c:	11800015 	stw	r6,0(r2)
    5850:	e1ffef17 	ldw	r7,-68(fp)
    5854:	11c00115 	stw	r7,4(r2)
	while (len >= SHA512_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA512_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    5858:	e0bfc217 	ldw	r2,-248(fp)
    585c:	10800044 	addi	r2,r2,1
    5860:	e0bfc215 	stw	r2,-248(fp)
    5864:	e0bfc217 	ldw	r2,-248(fp)
    5868:	10800410 	cmplti	r2,r2,16
    586c:	103f841e 	bne	r2,zero,5680 <__alt_mem_epcs_flash_controller+0xfdffc680>
			REVERSE64(context->buffer[j],context->buffer[j]);
		}
#endif
		sha512_Transform(context->state, context->buffer, context->state);
    5870:	e13fc917 	ldw	r4,-220(fp)
    5874:	e0bfc917 	ldw	r2,-220(fp)
    5878:	10c01404 	addi	r3,r2,80
    587c:	e0bfc917 	ldw	r2,-220(fp)
    5880:	100d883a 	mov	r6,r2
    5884:	180b883a 	mov	r5,r3
    5888:	00042d80 	call	42d8 <sha512_Transform>
		ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
    588c:	e0bfc917 	ldw	r2,-220(fp)
    5890:	11c01017 	ldw	r7,64(r2)
    5894:	12001117 	ldw	r8,68(r2)
    5898:	01010004 	movi	r4,1024
    589c:	000b883a 	mov	r5,zero
    58a0:	3905883a 	add	r2,r7,r4
    58a4:	11cd803a 	cmpltu	r6,r2,r7
    58a8:	4147883a 	add	r3,r8,r5
    58ac:	30c9883a 	add	r4,r6,r3
    58b0:	2007883a 	mov	r3,r4
    58b4:	1009883a 	mov	r4,r2
    58b8:	180b883a 	mov	r5,r3
    58bc:	e0bfc917 	ldw	r2,-220(fp)
    58c0:	11001015 	stw	r4,64(r2)
    58c4:	11401115 	stw	r5,68(r2)
    58c8:	e13fc917 	ldw	r4,-220(fp)
    58cc:	20801017 	ldw	r2,64(r4)
    58d0:	20c01117 	ldw	r3,68(r4)
    58d4:	1800121e 	bne	r3,zero,5920 <sha512_Update+0x728>
    58d8:	1800021e 	bne	r3,zero,58e4 <sha512_Update+0x6ec>
    58dc:	10810028 	cmpgeui	r2,r2,1024
    58e0:	10000f1e 	bne	r2,zero,5920 <sha512_Update+0x728>
    58e4:	e0bfc917 	ldw	r2,-220(fp)
    58e8:	11c01217 	ldw	r7,72(r2)
    58ec:	12001317 	ldw	r8,76(r2)
    58f0:	01000044 	movi	r4,1
    58f4:	000b883a 	mov	r5,zero
    58f8:	3905883a 	add	r2,r7,r4
    58fc:	11cd803a 	cmpltu	r6,r2,r7
    5900:	4147883a 	add	r3,r8,r5
    5904:	30c9883a 	add	r4,r6,r3
    5908:	2007883a 	mov	r3,r4
    590c:	1009883a 	mov	r4,r2
    5910:	180b883a 	mov	r5,r3
    5914:	e0bfc917 	ldw	r2,-220(fp)
    5918:	11001215 	stw	r4,72(r2)
    591c:	11401315 	stw	r5,76(r2)
		len -= SHA512_BLOCK_LENGTH;
    5920:	e0bfcb17 	ldw	r2,-212(fp)
    5924:	10bfe004 	addi	r2,r2,-128
    5928:	e0bfcb15 	stw	r2,-212(fp)
		data += SHA512_BLOCK_LENGTH;
    592c:	e0bfca17 	ldw	r2,-216(fp)
    5930:	10802004 	addi	r2,r2,128
    5934:	e0bfca15 	stw	r2,-216(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA512_BLOCK_LENGTH) {
    5938:	e0bfcb17 	ldw	r2,-212(fp)
    593c:	10802028 	cmpgeui	r2,r2,128
    5940:	103f471e 	bne	r2,zero,5660 <__alt_mem_epcs_flash_controller+0xfdffc660>
		sha512_Transform(context->state, context->buffer, context->state);
		ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
		len -= SHA512_BLOCK_LENGTH;
		data += SHA512_BLOCK_LENGTH;
	}
	if (len > 0) {
    5944:	e0bfcb17 	ldw	r2,-212(fp)
    5948:	10003526 	beq	r2,zero,5a20 <sha512_Update+0x828>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    594c:	e0bfc917 	ldw	r2,-220(fp)
    5950:	10801404 	addi	r2,r2,80
    5954:	e1bfcb17 	ldw	r6,-212(fp)
    5958:	e17fca17 	ldw	r5,-216(fp)
    595c:	1009883a 	mov	r4,r2
    5960:	00064d00 	call	64d0 <memcpy>
		ADDINC128(context->bitcount, len << 3);
    5964:	e0bfc917 	ldw	r2,-220(fp)
    5968:	11001017 	ldw	r4,64(r2)
    596c:	11401117 	ldw	r5,68(r2)
    5970:	e0bfcb17 	ldw	r2,-212(fp)
    5974:	100490fa 	slli	r2,r2,3
    5978:	e0bff015 	stw	r2,-64(fp)
    597c:	e03ff115 	stw	zero,-60(fp)
    5980:	e1bff017 	ldw	r6,-64(fp)
    5984:	2185883a 	add	r2,r4,r6
    5988:	110d803a 	cmpltu	r6,r2,r4
    598c:	e1fff117 	ldw	r7,-60(fp)
    5990:	29c7883a 	add	r3,r5,r7
    5994:	30c9883a 	add	r4,r6,r3
    5998:	2007883a 	mov	r3,r4
    599c:	1009883a 	mov	r4,r2
    59a0:	180b883a 	mov	r5,r3
    59a4:	e0bfc917 	ldw	r2,-220(fp)
    59a8:	11001015 	stw	r4,64(r2)
    59ac:	11401115 	stw	r5,68(r2)
    59b0:	e13fc917 	ldw	r4,-220(fp)
    59b4:	20801017 	ldw	r2,64(r4)
    59b8:	20c01117 	ldw	r3,68(r4)
    59bc:	e13fcb17 	ldw	r4,-212(fp)
    59c0:	200890fa 	slli	r4,r4,3
    59c4:	e13ff215 	stw	r4,-56(fp)
    59c8:	e03ff315 	stw	zero,-52(fp)
    59cc:	e13ff317 	ldw	r4,-52(fp)
    59d0:	19000436 	bltu	r3,r4,59e4 <sha512_Update+0x7ec>
    59d4:	e1bff317 	ldw	r6,-52(fp)
    59d8:	30c0111e 	bne	r6,r3,5a20 <sha512_Update+0x828>
    59dc:	e1fff217 	ldw	r7,-56(fp)
    59e0:	11c00f2e 	bgeu	r2,r7,5a20 <sha512_Update+0x828>
    59e4:	e0bfc917 	ldw	r2,-220(fp)
    59e8:	11001217 	ldw	r4,72(r2)
    59ec:	11401317 	ldw	r5,76(r2)
    59f0:	01800044 	movi	r6,1
    59f4:	000f883a 	mov	r7,zero
    59f8:	2185883a 	add	r2,r4,r6
    59fc:	1111803a 	cmpltu	r8,r2,r4
    5a00:	29c7883a 	add	r3,r5,r7
    5a04:	40c9883a 	add	r4,r8,r3
    5a08:	2007883a 	mov	r3,r4
    5a0c:	1009883a 	mov	r4,r2
    5a10:	180b883a 	mov	r5,r3
    5a14:	e0bfc917 	ldw	r2,-220(fp)
    5a18:	11001215 	stw	r4,72(r2)
    5a1c:	11401315 	stw	r5,76(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    5a20:	e03fc415 	stw	zero,-240(fp)
    5a24:	e0bfc417 	ldw	r2,-240(fp)
    5a28:	e0bfc315 	stw	r2,-244(fp)
    5a2c:	00000106 	br	5a34 <sha512_Update+0x83c>
void sha512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    5a30:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		ADDINC128(context->bitcount, len << 3);
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    5a34:	e6fff804 	addi	sp,fp,-32
    5a38:	dfc00917 	ldw	ra,36(sp)
    5a3c:	df000817 	ldw	fp,32(sp)
    5a40:	ddc00717 	ldw	r23,28(sp)
    5a44:	dd800617 	ldw	r22,24(sp)
    5a48:	dd400517 	ldw	r21,20(sp)
    5a4c:	dd000417 	ldw	r20,16(sp)
    5a50:	dcc00317 	ldw	r19,12(sp)
    5a54:	dc800217 	ldw	r18,8(sp)
    5a58:	dc400117 	ldw	r17,4(sp)
    5a5c:	dc000017 	ldw	r16,0(sp)
    5a60:	dec00a04 	addi	sp,sp,40
    5a64:	f800283a 	ret

00005a68 <sha512_Last>:

static void sha512_Last(SHA512_CTX* context) {
    5a68:	deffce04 	addi	sp,sp,-200
    5a6c:	dfc03115 	stw	ra,196(sp)
    5a70:	df003015 	stw	fp,192(sp)
    5a74:	ddc02f15 	stw	r23,188(sp)
    5a78:	dd802e15 	stw	r22,184(sp)
    5a7c:	dd402d15 	stw	r21,180(sp)
    5a80:	dd002c15 	stw	r20,176(sp)
    5a84:	dcc02b15 	stw	r19,172(sp)
    5a88:	dc802a15 	stw	r18,168(sp)
    5a8c:	dc402915 	stw	r17,164(sp)
    5a90:	dc002815 	stw	r16,160(sp)
    5a94:	df003004 	addi	fp,sp,192
    5a98:	e13fd715 	stw	r4,-164(fp)
	unsigned int	usedspace;

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    5a9c:	e13fd717 	ldw	r4,-164(fp)
    5aa0:	20801017 	ldw	r2,64(r4)
    5aa4:	20c01117 	ldw	r3,68(r4)
    5aa8:	1808977a 	slli	r4,r3,29
    5aac:	100ad0fa 	srli	r5,r2,3
    5ab0:	214ab03a 	or	r5,r4,r5
    5ab4:	180cd0fa 	srli	r6,r3,3
    5ab8:	2805883a 	mov	r2,r5
    5abc:	10801fcc 	andi	r2,r2,127
    5ac0:	e0bfd015 	stw	r2,-192(fp)
	/* Begin padding with a 1 bit: */
	((uint8_t*)context->buffer)[usedspace++] = 0x80;
    5ac4:	e0bfd717 	ldw	r2,-164(fp)
    5ac8:	11001404 	addi	r4,r2,80
    5acc:	e0ffd017 	ldw	r3,-192(fp)
    5ad0:	18800044 	addi	r2,r3,1
    5ad4:	e0bfd015 	stw	r2,-192(fp)
    5ad8:	20c7883a 	add	r3,r4,r3
    5adc:	00bfe004 	movi	r2,-128
    5ae0:	18800005 	stb	r2,0(r3)
	
	if (usedspace > SHA512_SHORT_BLOCK_LENGTH) {
    5ae4:	e0bfd017 	ldw	r2,-192(fp)
    5ae8:	10801c70 	cmpltui	r2,r2,113
    5aec:	1000901e 	bne	r2,zero,5d30 <sha512_Last+0x2c8>
		memzero(((uint8_t*)context->buffer) + usedspace, SHA512_BLOCK_LENGTH - usedspace);
    5af0:	e0bfd717 	ldw	r2,-164(fp)
    5af4:	10c01404 	addi	r3,r2,80
    5af8:	e0bfd017 	ldw	r2,-192(fp)
    5afc:	1889883a 	add	r4,r3,r2
    5b00:	00c02004 	movi	r3,128
    5b04:	e0bfd017 	ldw	r2,-192(fp)
    5b08:	1885c83a 	sub	r2,r3,r2
    5b0c:	100b883a 	mov	r5,r2
    5b10:	000134c0 	call	134c <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    5b14:	e03fd115 	stw	zero,-188(fp)
    5b18:	00007906 	br	5d00 <sha512_Last+0x298>
			REVERSE64(context->buffer[j],context->buffer[j]);
    5b1c:	e0ffd717 	ldw	r3,-164(fp)
    5b20:	e0bfd117 	ldw	r2,-188(fp)
    5b24:	10800284 	addi	r2,r2,10
    5b28:	100490fa 	slli	r2,r2,3
    5b2c:	1887883a 	add	r3,r3,r2
    5b30:	18800017 	ldw	r2,0(r3)
    5b34:	e0bfd315 	stw	r2,-180(fp)
    5b38:	18800117 	ldw	r2,4(r3)
    5b3c:	e0bfd415 	stw	r2,-176(fp)
    5b40:	e0bfd417 	ldw	r2,-176(fp)
    5b44:	e0bff415 	stw	r2,-48(fp)
    5b48:	e0ffd317 	ldw	r3,-180(fp)
    5b4c:	e0fff515 	stw	r3,-44(fp)
    5b50:	e13ff417 	ldw	r4,-48(fp)
    5b54:	e13fd315 	stw	r4,-180(fp)
    5b58:	e0bff517 	ldw	r2,-44(fp)
    5b5c:	e0bfd415 	stw	r2,-176(fp)
    5b60:	e0ffd317 	ldw	r3,-180(fp)
    5b64:	00bfc074 	movhi	r2,65281
    5b68:	10bfc004 	addi	r2,r2,-256
    5b6c:	1884703a 	and	r2,r3,r2
    5b70:	e0bfd815 	stw	r2,-160(fp)
    5b74:	e0ffd417 	ldw	r3,-176(fp)
    5b78:	00bfc074 	movhi	r2,65281
    5b7c:	10bfc004 	addi	r2,r2,-256
    5b80:	1884703a 	and	r2,r3,r2
    5b84:	e0bfd915 	stw	r2,-156(fp)
    5b88:	e0ffd917 	ldw	r3,-156(fp)
    5b8c:	1804963a 	slli	r2,r3,24
    5b90:	e13fd817 	ldw	r4,-160(fp)
    5b94:	2008d23a 	srli	r4,r4,8
    5b98:	e13fda15 	stw	r4,-152(fp)
    5b9c:	e0ffda17 	ldw	r3,-152(fp)
    5ba0:	10c4b03a 	or	r2,r2,r3
    5ba4:	e0bfda15 	stw	r2,-152(fp)
    5ba8:	e13fd917 	ldw	r4,-156(fp)
    5bac:	2008d23a 	srli	r4,r4,8
    5bb0:	e13fdb15 	stw	r4,-148(fp)
    5bb4:	e0ffd317 	ldw	r3,-180(fp)
    5bb8:	00803ff4 	movhi	r2,255
    5bbc:	10803fc4 	addi	r2,r2,255
    5bc0:	1884703a 	and	r2,r3,r2
    5bc4:	e0bfdc15 	stw	r2,-144(fp)
    5bc8:	e0ffd417 	ldw	r3,-176(fp)
    5bcc:	00803ff4 	movhi	r2,255
    5bd0:	10803fc4 	addi	r2,r2,255
    5bd4:	1884703a 	and	r2,r3,r2
    5bd8:	e0bfdd15 	stw	r2,-140(fp)
    5bdc:	e0ffdc17 	ldw	r3,-144(fp)
    5be0:	1804d63a 	srli	r2,r3,24
    5be4:	e13fdd17 	ldw	r4,-140(fp)
    5be8:	2008923a 	slli	r4,r4,8
    5bec:	e13fdf15 	stw	r4,-132(fp)
    5bf0:	e0ffdf17 	ldw	r3,-132(fp)
    5bf4:	10c4b03a 	or	r2,r2,r3
    5bf8:	e0bfdf15 	stw	r2,-132(fp)
    5bfc:	e13fdc17 	ldw	r4,-144(fp)
    5c00:	2008923a 	slli	r4,r4,8
    5c04:	e13fde15 	stw	r4,-136(fp)
    5c08:	e0ffda17 	ldw	r3,-152(fp)
    5c0c:	e13fde17 	ldw	r4,-136(fp)
    5c10:	1904b03a 	or	r2,r3,r4
    5c14:	e0bfd315 	stw	r2,-180(fp)
    5c18:	e0ffdb17 	ldw	r3,-148(fp)
    5c1c:	e13fdf17 	ldw	r4,-132(fp)
    5c20:	1904b03a 	or	r2,r3,r4
    5c24:	e0bfd415 	stw	r2,-176(fp)
    5c28:	e0bfd317 	ldw	r2,-180(fp)
    5c2c:	10bfffec 	andhi	r2,r2,65535
    5c30:	e0bfe015 	stw	r2,-128(fp)
    5c34:	e0bfd417 	ldw	r2,-176(fp)
    5c38:	10bfffec 	andhi	r2,r2,65535
    5c3c:	e0bfe115 	stw	r2,-124(fp)
    5c40:	e0ffe117 	ldw	r3,-124(fp)
    5c44:	1804943a 	slli	r2,r3,16
    5c48:	e13fe017 	ldw	r4,-128(fp)
    5c4c:	2008d43a 	srli	r4,r4,16
    5c50:	e13fe215 	stw	r4,-120(fp)
    5c54:	e0ffe217 	ldw	r3,-120(fp)
    5c58:	10c4b03a 	or	r2,r2,r3
    5c5c:	e0bfe215 	stw	r2,-120(fp)
    5c60:	e13fe117 	ldw	r4,-124(fp)
    5c64:	2008d43a 	srli	r4,r4,16
    5c68:	e13fe315 	stw	r4,-116(fp)
    5c6c:	e0bfd317 	ldw	r2,-180(fp)
    5c70:	10bfffcc 	andi	r2,r2,65535
    5c74:	e0bfe415 	stw	r2,-112(fp)
    5c78:	e0bfd417 	ldw	r2,-176(fp)
    5c7c:	10bfffcc 	andi	r2,r2,65535
    5c80:	e0bfe515 	stw	r2,-108(fp)
    5c84:	e0ffe417 	ldw	r3,-112(fp)
    5c88:	1804d43a 	srli	r2,r3,16
    5c8c:	e13fe517 	ldw	r4,-108(fp)
    5c90:	2008943a 	slli	r4,r4,16
    5c94:	e13fe715 	stw	r4,-100(fp)
    5c98:	e0ffe717 	ldw	r3,-100(fp)
    5c9c:	10c4b03a 	or	r2,r2,r3
    5ca0:	e0bfe715 	stw	r2,-100(fp)
    5ca4:	e13fe417 	ldw	r4,-112(fp)
    5ca8:	2008943a 	slli	r4,r4,16
    5cac:	e13fe615 	stw	r4,-104(fp)
    5cb0:	e0bfe217 	ldw	r2,-120(fp)
    5cb4:	e0ffe617 	ldw	r3,-104(fp)
    5cb8:	10c4b03a 	or	r2,r2,r3
    5cbc:	e0bfe815 	stw	r2,-96(fp)
    5cc0:	e13fe317 	ldw	r4,-116(fp)
    5cc4:	e0bfe717 	ldw	r2,-100(fp)
    5cc8:	2088b03a 	or	r4,r4,r2
    5ccc:	e13fe915 	stw	r4,-92(fp)
    5cd0:	e0ffd717 	ldw	r3,-164(fp)
    5cd4:	e0bfd117 	ldw	r2,-188(fp)
    5cd8:	10800284 	addi	r2,r2,10
    5cdc:	100490fa 	slli	r2,r2,3
    5ce0:	1885883a 	add	r2,r3,r2
    5ce4:	e0ffe817 	ldw	r3,-96(fp)
    5ce8:	10c00015 	stw	r3,0(r2)
    5cec:	e13fe917 	ldw	r4,-92(fp)
    5cf0:	11000115 	stw	r4,4(r2)
	if (usedspace > SHA512_SHORT_BLOCK_LENGTH) {
		memzero(((uint8_t*)context->buffer) + usedspace, SHA512_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    5cf4:	e0bfd117 	ldw	r2,-188(fp)
    5cf8:	10800044 	addi	r2,r2,1
    5cfc:	e0bfd115 	stw	r2,-188(fp)
    5d00:	e0bfd117 	ldw	r2,-188(fp)
    5d04:	10800410 	cmplti	r2,r2,16
    5d08:	103f841e 	bne	r2,zero,5b1c <__alt_mem_epcs_flash_controller+0xfdffcb1c>
			REVERSE64(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Do second-to-last transform: */
		sha512_Transform(context->state, context->buffer, context->state);
    5d0c:	e0ffd717 	ldw	r3,-164(fp)
    5d10:	e0bfd717 	ldw	r2,-164(fp)
    5d14:	10801404 	addi	r2,r2,80
    5d18:	e13fd717 	ldw	r4,-164(fp)
    5d1c:	200d883a 	mov	r6,r4
    5d20:	100b883a 	mov	r5,r2
    5d24:	1809883a 	mov	r4,r3
    5d28:	00042d80 	call	42d8 <sha512_Transform>

		/* And prepare the last transform: */
		usedspace = 0;
    5d2c:	e03fd015 	stw	zero,-192(fp)
	}
	/* Set-up for the last transform: */
	memzero(((uint8_t*)context->buffer) + usedspace, SHA512_SHORT_BLOCK_LENGTH - usedspace);
    5d30:	e0bfd717 	ldw	r2,-164(fp)
    5d34:	10c01404 	addi	r3,r2,80
    5d38:	e0bfd017 	ldw	r2,-192(fp)
    5d3c:	1889883a 	add	r4,r3,r2
    5d40:	00c01c04 	movi	r3,112
    5d44:	e0bfd017 	ldw	r2,-192(fp)
    5d48:	1885c83a 	sub	r2,r3,r2
    5d4c:	100b883a 	mov	r5,r2
    5d50:	000134c0 	call	134c <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert TO host byte order */
	for (int j = 0; j < 14; j++) {
    5d54:	e03fd215 	stw	zero,-184(fp)
    5d58:	00006106 	br	5ee0 <sha512_Last+0x478>
		REVERSE64(context->buffer[j],context->buffer[j]);
    5d5c:	e0ffd717 	ldw	r3,-164(fp)
    5d60:	e0bfd217 	ldw	r2,-184(fp)
    5d64:	10800284 	addi	r2,r2,10
    5d68:	100490fa 	slli	r2,r2,3
    5d6c:	1885883a 	add	r2,r3,r2
    5d70:	10c00017 	ldw	r3,0(r2)
    5d74:	e0ffd515 	stw	r3,-172(fp)
    5d78:	10800117 	ldw	r2,4(r2)
    5d7c:	e0bfd615 	stw	r2,-168(fp)
    5d80:	e0bfd617 	ldw	r2,-168(fp)
    5d84:	e0bff615 	stw	r2,-40(fp)
    5d88:	e0ffd517 	ldw	r3,-172(fp)
    5d8c:	e0fff715 	stw	r3,-36(fp)
    5d90:	e13ff617 	ldw	r4,-40(fp)
    5d94:	e13fd515 	stw	r4,-172(fp)
    5d98:	e0bff717 	ldw	r2,-36(fp)
    5d9c:	e0bfd615 	stw	r2,-168(fp)
    5da0:	e0ffd517 	ldw	r3,-172(fp)
    5da4:	00bfc074 	movhi	r2,65281
    5da8:	10bfc004 	addi	r2,r2,-256
    5dac:	1884703a 	and	r2,r3,r2
    5db0:	e0bfea15 	stw	r2,-88(fp)
    5db4:	e0ffd617 	ldw	r3,-168(fp)
    5db8:	00bfc074 	movhi	r2,65281
    5dbc:	10bfc004 	addi	r2,r2,-256
    5dc0:	1884703a 	and	r2,r3,r2
    5dc4:	e0bfeb15 	stw	r2,-84(fp)
    5dc8:	e0ffeb17 	ldw	r3,-84(fp)
    5dcc:	1804963a 	slli	r2,r3,24
    5dd0:	e13fea17 	ldw	r4,-88(fp)
    5dd4:	2020d23a 	srli	r16,r4,8
    5dd8:	1420b03a 	or	r16,r2,r16
    5ddc:	e0bfeb17 	ldw	r2,-84(fp)
    5de0:	1022d23a 	srli	r17,r2,8
    5de4:	e0ffd517 	ldw	r3,-172(fp)
    5de8:	00803ff4 	movhi	r2,255
    5dec:	10803fc4 	addi	r2,r2,255
    5df0:	1884703a 	and	r2,r3,r2
    5df4:	e0bfec15 	stw	r2,-80(fp)
    5df8:	e0ffd617 	ldw	r3,-168(fp)
    5dfc:	00803ff4 	movhi	r2,255
    5e00:	10803fc4 	addi	r2,r2,255
    5e04:	1884703a 	and	r2,r3,r2
    5e08:	e0bfed15 	stw	r2,-76(fp)
    5e0c:	e0ffec17 	ldw	r3,-80(fp)
    5e10:	1804d63a 	srli	r2,r3,24
    5e14:	e13fed17 	ldw	r4,-76(fp)
    5e18:	2026923a 	slli	r19,r4,8
    5e1c:	14e6b03a 	or	r19,r2,r19
    5e20:	e0bfec17 	ldw	r2,-80(fp)
    5e24:	1024923a 	slli	r18,r2,8
    5e28:	8484b03a 	or	r2,r16,r18
    5e2c:	e0bfd515 	stw	r2,-172(fp)
    5e30:	8cc4b03a 	or	r2,r17,r19
    5e34:	e0bfd615 	stw	r2,-168(fp)
    5e38:	e0bfd517 	ldw	r2,-172(fp)
    5e3c:	10bfffec 	andhi	r2,r2,65535
    5e40:	e0bfee15 	stw	r2,-72(fp)
    5e44:	e0bfd617 	ldw	r2,-168(fp)
    5e48:	10bfffec 	andhi	r2,r2,65535
    5e4c:	e0bfef15 	stw	r2,-68(fp)
    5e50:	e0ffef17 	ldw	r3,-68(fp)
    5e54:	1804943a 	slli	r2,r3,16
    5e58:	e13fee17 	ldw	r4,-72(fp)
    5e5c:	2028d43a 	srli	r20,r4,16
    5e60:	1528b03a 	or	r20,r2,r20
    5e64:	e0bfef17 	ldw	r2,-68(fp)
    5e68:	102ad43a 	srli	r21,r2,16
    5e6c:	e0bfd517 	ldw	r2,-172(fp)
    5e70:	10bfffcc 	andi	r2,r2,65535
    5e74:	e0bff015 	stw	r2,-64(fp)
    5e78:	e0bfd617 	ldw	r2,-168(fp)
    5e7c:	10bfffcc 	andi	r2,r2,65535
    5e80:	e0bff115 	stw	r2,-60(fp)
    5e84:	e0fff017 	ldw	r3,-64(fp)
    5e88:	1804d43a 	srli	r2,r3,16
    5e8c:	e13ff117 	ldw	r4,-60(fp)
    5e90:	202e943a 	slli	r23,r4,16
    5e94:	15eeb03a 	or	r23,r2,r23
    5e98:	e0bff017 	ldw	r2,-64(fp)
    5e9c:	102c943a 	slli	r22,r2,16
    5ea0:	a586b03a 	or	r3,r20,r22
    5ea4:	e0fff215 	stw	r3,-56(fp)
    5ea8:	adc8b03a 	or	r4,r21,r23
    5eac:	e13ff315 	stw	r4,-52(fp)
    5eb0:	e0ffd717 	ldw	r3,-164(fp)
    5eb4:	e0bfd217 	ldw	r2,-184(fp)
    5eb8:	10800284 	addi	r2,r2,10
    5ebc:	100490fa 	slli	r2,r2,3
    5ec0:	1885883a 	add	r2,r3,r2
    5ec4:	e0fff217 	ldw	r3,-56(fp)
    5ec8:	10c00015 	stw	r3,0(r2)
    5ecc:	e13ff317 	ldw	r4,-52(fp)
    5ed0:	11000115 	stw	r4,4(r2)
	/* Set-up for the last transform: */
	memzero(((uint8_t*)context->buffer) + usedspace, SHA512_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert TO host byte order */
	for (int j = 0; j < 14; j++) {
    5ed4:	e0bfd217 	ldw	r2,-184(fp)
    5ed8:	10800044 	addi	r2,r2,1
    5edc:	e0bfd215 	stw	r2,-184(fp)
    5ee0:	e0bfd217 	ldw	r2,-184(fp)
    5ee4:	10800390 	cmplti	r2,r2,14
    5ee8:	103f9c1e 	bne	r2,zero,5d5c <__alt_mem_epcs_flash_controller+0xfdffcd5c>
		REVERSE64(context->buffer[j],context->buffer[j]);
	}
#endif
	/* Store the length of input data (in bits): */
	context->buffer[14] = context->bitcount[1];
    5eec:	e13fd717 	ldw	r4,-164(fp)
    5ef0:	20801217 	ldw	r2,72(r4)
    5ef4:	20c01317 	ldw	r3,76(r4)
    5ef8:	e13fd717 	ldw	r4,-164(fp)
    5efc:	20803015 	stw	r2,192(r4)
    5f00:	20c03115 	stw	r3,196(r4)
	context->buffer[15] = context->bitcount[0];
    5f04:	e13fd717 	ldw	r4,-164(fp)
    5f08:	20801017 	ldw	r2,64(r4)
    5f0c:	20c01117 	ldw	r3,68(r4)
    5f10:	e13fd717 	ldw	r4,-164(fp)
    5f14:	20803215 	stw	r2,200(r4)
    5f18:	20c03315 	stw	r3,204(r4)

	/* Final transform: */
	sha512_Transform(context->state, context->buffer, context->state);
    5f1c:	e0ffd717 	ldw	r3,-164(fp)
    5f20:	e0bfd717 	ldw	r2,-164(fp)
    5f24:	10801404 	addi	r2,r2,80
    5f28:	e13fd717 	ldw	r4,-164(fp)
    5f2c:	200d883a 	mov	r6,r4
    5f30:	100b883a 	mov	r5,r2
    5f34:	1809883a 	mov	r4,r3
    5f38:	00042d80 	call	42d8 <sha512_Transform>
}
    5f3c:	0001883a 	nop
    5f40:	e6fff804 	addi	sp,fp,-32
    5f44:	dfc00917 	ldw	ra,36(sp)
    5f48:	df000817 	ldw	fp,32(sp)
    5f4c:	ddc00717 	ldw	r23,28(sp)
    5f50:	dd800617 	ldw	r22,24(sp)
    5f54:	dd400517 	ldw	r21,20(sp)
    5f58:	dd000417 	ldw	r20,16(sp)
    5f5c:	dcc00317 	ldw	r19,12(sp)
    5f60:	dc800217 	ldw	r18,8(sp)
    5f64:	dc400117 	ldw	r17,4(sp)
    5f68:	dc000017 	ldw	r16,0(sp)
    5f6c:	dec00a04 	addi	sp,sp,40
    5f70:	f800283a 	ret

00005f74 <sha512_Final>:

void sha512_Final(SHA512_CTX* context, sha2_byte digest[]) {
    5f74:	deffe504 	addi	sp,sp,-108
    5f78:	dfc01a15 	stw	ra,104(sp)
    5f7c:	df001915 	stw	fp,100(sp)
    5f80:	ddc01815 	stw	r23,96(sp)
    5f84:	dd801715 	stw	r22,92(sp)
    5f88:	dd401615 	stw	r21,88(sp)
    5f8c:	dd001515 	stw	r20,84(sp)
    5f90:	dcc01415 	stw	r19,80(sp)
    5f94:	dc801315 	stw	r18,76(sp)
    5f98:	dc401215 	stw	r17,72(sp)
    5f9c:	dc001115 	stw	r16,68(sp)
    5fa0:	df001904 	addi	fp,sp,100
    5fa4:	e13fea15 	stw	r4,-88(fp)
    5fa8:	e17feb15 	stw	r5,-84(fp)
	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    5fac:	e0bfeb17 	ldw	r2,-84(fp)
    5fb0:	10006b26 	beq	r2,zero,6160 <sha512_Final+0x1ec>
		sha512_Last(context);
    5fb4:	e13fea17 	ldw	r4,-88(fp)
    5fb8:	0005a680 	call	5a68 <sha512_Last>

		/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    5fbc:	e03fe715 	stw	zero,-100(fp)
    5fc0:	00005f06 	br	6140 <sha512_Final+0x1cc>
			REVERSE64(context->state[j],context->state[j]);
    5fc4:	e0ffea17 	ldw	r3,-88(fp)
    5fc8:	e0bfe717 	ldw	r2,-100(fp)
    5fcc:	100490fa 	slli	r2,r2,3
    5fd0:	1885883a 	add	r2,r3,r2
    5fd4:	10c00017 	ldw	r3,0(r2)
    5fd8:	e0ffe815 	stw	r3,-96(fp)
    5fdc:	10800117 	ldw	r2,4(r2)
    5fe0:	e0bfe915 	stw	r2,-92(fp)
    5fe4:	e0bfe917 	ldw	r2,-92(fp)
    5fe8:	e0bff615 	stw	r2,-40(fp)
    5fec:	e0ffe817 	ldw	r3,-96(fp)
    5ff0:	e0fff715 	stw	r3,-36(fp)
    5ff4:	e0bff617 	ldw	r2,-40(fp)
    5ff8:	e0bfe815 	stw	r2,-96(fp)
    5ffc:	e0fff717 	ldw	r3,-36(fp)
    6000:	e0ffe915 	stw	r3,-92(fp)
    6004:	e0ffe817 	ldw	r3,-96(fp)
    6008:	00bfc074 	movhi	r2,65281
    600c:	10bfc004 	addi	r2,r2,-256
    6010:	1884703a 	and	r2,r3,r2
    6014:	e0bfec15 	stw	r2,-80(fp)
    6018:	e0ffe917 	ldw	r3,-92(fp)
    601c:	00bfc074 	movhi	r2,65281
    6020:	10bfc004 	addi	r2,r2,-256
    6024:	1884703a 	and	r2,r3,r2
    6028:	e0bfed15 	stw	r2,-76(fp)
    602c:	e0ffed17 	ldw	r3,-76(fp)
    6030:	1804963a 	slli	r2,r3,24
    6034:	e0ffec17 	ldw	r3,-80(fp)
    6038:	1820d23a 	srli	r16,r3,8
    603c:	1420b03a 	or	r16,r2,r16
    6040:	e0bfed17 	ldw	r2,-76(fp)
    6044:	1022d23a 	srli	r17,r2,8
    6048:	e0ffe817 	ldw	r3,-96(fp)
    604c:	00803ff4 	movhi	r2,255
    6050:	10803fc4 	addi	r2,r2,255
    6054:	1884703a 	and	r2,r3,r2
    6058:	e0bfee15 	stw	r2,-72(fp)
    605c:	e0ffe917 	ldw	r3,-92(fp)
    6060:	00803ff4 	movhi	r2,255
    6064:	10803fc4 	addi	r2,r2,255
    6068:	1884703a 	and	r2,r3,r2
    606c:	e0bfef15 	stw	r2,-68(fp)
    6070:	e0ffee17 	ldw	r3,-72(fp)
    6074:	1804d63a 	srli	r2,r3,24
    6078:	e0ffef17 	ldw	r3,-68(fp)
    607c:	1826923a 	slli	r19,r3,8
    6080:	14e6b03a 	or	r19,r2,r19
    6084:	e0bfee17 	ldw	r2,-72(fp)
    6088:	1024923a 	slli	r18,r2,8
    608c:	8484b03a 	or	r2,r16,r18
    6090:	e0bfe815 	stw	r2,-96(fp)
    6094:	8cc4b03a 	or	r2,r17,r19
    6098:	e0bfe915 	stw	r2,-92(fp)
    609c:	e0bfe817 	ldw	r2,-96(fp)
    60a0:	10bfffec 	andhi	r2,r2,65535
    60a4:	e0bff015 	stw	r2,-64(fp)
    60a8:	e0bfe917 	ldw	r2,-92(fp)
    60ac:	10bfffec 	andhi	r2,r2,65535
    60b0:	e0bff115 	stw	r2,-60(fp)
    60b4:	e0fff117 	ldw	r3,-60(fp)
    60b8:	1804943a 	slli	r2,r3,16
    60bc:	e0fff017 	ldw	r3,-64(fp)
    60c0:	1828d43a 	srli	r20,r3,16
    60c4:	1528b03a 	or	r20,r2,r20
    60c8:	e0bff117 	ldw	r2,-60(fp)
    60cc:	102ad43a 	srli	r21,r2,16
    60d0:	e0bfe817 	ldw	r2,-96(fp)
    60d4:	10bfffcc 	andi	r2,r2,65535
    60d8:	e0bff215 	stw	r2,-56(fp)
    60dc:	e0bfe917 	ldw	r2,-92(fp)
    60e0:	10bfffcc 	andi	r2,r2,65535
    60e4:	e0bff315 	stw	r2,-52(fp)
    60e8:	e0fff217 	ldw	r3,-56(fp)
    60ec:	1804d43a 	srli	r2,r3,16
    60f0:	e0fff317 	ldw	r3,-52(fp)
    60f4:	182e943a 	slli	r23,r3,16
    60f8:	15eeb03a 	or	r23,r2,r23
    60fc:	e0bff217 	ldw	r2,-56(fp)
    6100:	102c943a 	slli	r22,r2,16
    6104:	a586b03a 	or	r3,r20,r22
    6108:	e0fff415 	stw	r3,-48(fp)
    610c:	adc4b03a 	or	r2,r21,r23
    6110:	e0bff515 	stw	r2,-44(fp)
    6114:	e0ffea17 	ldw	r3,-88(fp)
    6118:	e0bfe717 	ldw	r2,-100(fp)
    611c:	100490fa 	slli	r2,r2,3
    6120:	1885883a 	add	r2,r3,r2
    6124:	e0fff417 	ldw	r3,-48(fp)
    6128:	10c00015 	stw	r3,0(r2)
    612c:	e0fff517 	ldw	r3,-44(fp)
    6130:	10c00115 	stw	r3,4(r2)
		sha512_Last(context);

		/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    6134:	e0bfe717 	ldw	r2,-100(fp)
    6138:	10800044 	addi	r2,r2,1
    613c:	e0bfe715 	stw	r2,-100(fp)
    6140:	e0bfe717 	ldw	r2,-100(fp)
    6144:	10800210 	cmplti	r2,r2,8
    6148:	103f9e1e 	bne	r2,zero,5fc4 <__alt_mem_epcs_flash_controller+0xfdffcfc4>
			REVERSE64(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA512_DIGEST_LENGTH);
    614c:	e0bfea17 	ldw	r2,-88(fp)
    6150:	01801004 	movi	r6,64
    6154:	100b883a 	mov	r5,r2
    6158:	e13feb17 	ldw	r4,-84(fp)
    615c:	00064d00 	call	64d0 <memcpy>
	}

	/* Zero out state data */
	memzero(context, sizeof(SHA512_CTX));
    6160:	01403404 	movi	r5,208
    6164:	e13fea17 	ldw	r4,-88(fp)
    6168:	000134c0 	call	134c <memzero>
}
    616c:	0001883a 	nop
    6170:	e6fff804 	addi	sp,fp,-32
    6174:	dfc00917 	ldw	ra,36(sp)
    6178:	df000817 	ldw	fp,32(sp)
    617c:	ddc00717 	ldw	r23,28(sp)
    6180:	dd800617 	ldw	r22,24(sp)
    6184:	dd400517 	ldw	r21,20(sp)
    6188:	dd000417 	ldw	r20,16(sp)
    618c:	dcc00317 	ldw	r19,12(sp)
    6190:	dc800217 	ldw	r18,8(sp)
    6194:	dc400117 	ldw	r17,4(sp)
    6198:	dc000017 	ldw	r16,0(sp)
    619c:	dec00a04 	addi	sp,sp,40
    61a0:	f800283a 	ret

000061a4 <sha512_End>:

char *sha512_End(SHA512_CTX* context, char buffer[]) {
    61a4:	deffea04 	addi	sp,sp,-88
    61a8:	dfc01515 	stw	ra,84(sp)
    61ac:	df001415 	stw	fp,80(sp)
    61b0:	df001404 	addi	fp,sp,80
    61b4:	e13ffe15 	stw	r4,-8(fp)
    61b8:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA512_DIGEST_LENGTH], *d = digest;
    61bc:	e0bfee04 	addi	r2,fp,-72
    61c0:	e0bfec15 	stw	r2,-80(fp)
	int		i;

	if (buffer != (char*)0) {
    61c4:	e0bfff17 	ldw	r2,-4(fp)
    61c8:	10002926 	beq	r2,zero,6270 <sha512_End+0xcc>
		sha512_Final(context, digest);
    61cc:	e0bfee04 	addi	r2,fp,-72
    61d0:	100b883a 	mov	r5,r2
    61d4:	e13ffe17 	ldw	r4,-8(fp)
    61d8:	0005f740 	call	5f74 <sha512_Final>

		for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
    61dc:	e03fed15 	stw	zero,-76(fp)
    61e0:	00001d06 	br	6258 <sha512_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    61e4:	e0bfff17 	ldw	r2,-4(fp)
    61e8:	10c00044 	addi	r3,r2,1
    61ec:	e0ffff15 	stw	r3,-4(fp)
    61f0:	d1200017 	ldw	r4,-32768(gp)
    61f4:	e0ffec17 	ldw	r3,-80(fp)
    61f8:	18c00003 	ldbu	r3,0(r3)
    61fc:	18c03fcc 	andi	r3,r3,255
    6200:	1806d13a 	srli	r3,r3,4
    6204:	18c03fcc 	andi	r3,r3,255
    6208:	20c7883a 	add	r3,r4,r3
    620c:	18c00003 	ldbu	r3,0(r3)
    6210:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    6214:	e0bfff17 	ldw	r2,-4(fp)
    6218:	10c00044 	addi	r3,r2,1
    621c:	e0ffff15 	stw	r3,-4(fp)
    6220:	d1200017 	ldw	r4,-32768(gp)
    6224:	e0ffec17 	ldw	r3,-80(fp)
    6228:	18c00003 	ldbu	r3,0(r3)
    622c:	18c03fcc 	andi	r3,r3,255
    6230:	18c003cc 	andi	r3,r3,15
    6234:	20c7883a 	add	r3,r4,r3
    6238:	18c00003 	ldbu	r3,0(r3)
    623c:	10c00005 	stb	r3,0(r2)
			d++;
    6240:	e0bfec17 	ldw	r2,-80(fp)
    6244:	10800044 	addi	r2,r2,1
    6248:	e0bfec15 	stw	r2,-80(fp)
	int		i;

	if (buffer != (char*)0) {
		sha512_Final(context, digest);

		for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
    624c:	e0bfed17 	ldw	r2,-76(fp)
    6250:	10800044 	addi	r2,r2,1
    6254:	e0bfed15 	stw	r2,-76(fp)
    6258:	e0bfed17 	ldw	r2,-76(fp)
    625c:	10801010 	cmplti	r2,r2,64
    6260:	103fe01e 	bne	r2,zero,61e4 <__alt_mem_epcs_flash_controller+0xfdffd1e4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    6264:	e0bfff17 	ldw	r2,-4(fp)
    6268:	10000005 	stb	zero,0(r2)
    626c:	00000306 	br	627c <sha512_End+0xd8>
	} else {
		memzero(context, sizeof(SHA512_CTX));
    6270:	01403404 	movi	r5,208
    6274:	e13ffe17 	ldw	r4,-8(fp)
    6278:	000134c0 	call	134c <memzero>
	}
	memzero(digest, SHA512_DIGEST_LENGTH);
    627c:	e0bfee04 	addi	r2,fp,-72
    6280:	01401004 	movi	r5,64
    6284:	1009883a 	mov	r4,r2
    6288:	000134c0 	call	134c <memzero>
	return buffer;
    628c:	e0bfff17 	ldw	r2,-4(fp)
}
    6290:	e037883a 	mov	sp,fp
    6294:	dfc00117 	ldw	ra,4(sp)
    6298:	df000017 	ldw	fp,0(sp)
    629c:	dec00204 	addi	sp,sp,8
    62a0:	f800283a 	ret

000062a4 <sha512_Raw>:

void sha512_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA512_DIGEST_LENGTH]) {
    62a4:	deffc704 	addi	sp,sp,-228
    62a8:	dfc03815 	stw	ra,224(sp)
    62ac:	df003715 	stw	fp,220(sp)
    62b0:	df003704 	addi	fp,sp,220
    62b4:	e13ffd15 	stw	r4,-12(fp)
    62b8:	e17ffe15 	stw	r5,-8(fp)
    62bc:	e1bfff15 	stw	r6,-4(fp)
	SHA512_CTX	context;
	sha512_Init(&context);
    62c0:	e13fc904 	addi	r4,fp,-220
    62c4:	00042500 	call	4250 <sha512_Init>
	sha512_Update(&context, data, len);
    62c8:	e1bffe17 	ldw	r6,-8(fp)
    62cc:	e17ffd17 	ldw	r5,-12(fp)
    62d0:	e13fc904 	addi	r4,fp,-220
    62d4:	00051f80 	call	51f8 <sha512_Update>
	sha512_Final(&context, digest);
    62d8:	e17fff17 	ldw	r5,-4(fp)
    62dc:	e13fc904 	addi	r4,fp,-220
    62e0:	0005f740 	call	5f74 <sha512_Final>
}
    62e4:	0001883a 	nop
    62e8:	e037883a 	mov	sp,fp
    62ec:	dfc00117 	ldw	ra,4(sp)
    62f0:	df000017 	ldw	fp,0(sp)
    62f4:	dec00204 	addi	sp,sp,8
    62f8:	f800283a 	ret

000062fc <sha512_Data>:

char* sha512_Data(const sha2_byte* data, size_t len, char digest[SHA512_DIGEST_STRING_LENGTH]) {
    62fc:	deffc704 	addi	sp,sp,-228
    6300:	dfc03815 	stw	ra,224(sp)
    6304:	df003715 	stw	fp,220(sp)
    6308:	df003704 	addi	fp,sp,220
    630c:	e13ffd15 	stw	r4,-12(fp)
    6310:	e17ffe15 	stw	r5,-8(fp)
    6314:	e1bfff15 	stw	r6,-4(fp)
	SHA512_CTX	context;

	sha512_Init(&context);
    6318:	e13fc904 	addi	r4,fp,-220
    631c:	00042500 	call	4250 <sha512_Init>
	sha512_Update(&context, data, len);
    6320:	e1bffe17 	ldw	r6,-8(fp)
    6324:	e17ffd17 	ldw	r5,-12(fp)
    6328:	e13fc904 	addi	r4,fp,-220
    632c:	00051f80 	call	51f8 <sha512_Update>
	return sha512_End(&context, digest);
    6330:	e17fff17 	ldw	r5,-4(fp)
    6334:	e13fc904 	addi	r4,fp,-220
    6338:	00061a40 	call	61a4 <sha512_End>
}
    633c:	e037883a 	mov	sp,fp
    6340:	dfc00117 	ldw	ra,4(sp)
    6344:	df000017 	ldw	fp,0(sp)
    6348:	dec00204 	addi	sp,sp,8
    634c:	f800283a 	ret

00006350 <main>:
#include <stdlib.h>
#include <stdio.h>


int main()
{
    6350:	deffe904 	addi	sp,sp,-92
    6354:	dfc01615 	stw	ra,88(sp)
    6358:	df001515 	stw	fp,84(sp)
    635c:	df001504 	addi	fp,sp,84
	printf("Hello World from NIOS II hol\n");
    6360:	01000074 	movhi	r4,1
    6364:	21059104 	addi	r4,r4,5700
    6368:	00068800 	call	6880 <puts>
	printf("Software Version: %d.%d.%d\n\n", SOFTWARE_VERSION_MAJOR, SOFTWARE_VERSION_MINOR, SOFTWARE_VERSION_REV);
    636c:	000f883a 	mov	r7,zero
    6370:	000d883a 	mov	r6,zero
    6374:	01400044 	movi	r5,1
    6378:	01000074 	movhi	r4,1
    637c:	21059904 	addi	r4,r4,5732
    6380:	00067900 	call	6790 <printf>

	void *lots_of_memory = malloc(1024 * 1024 * 10);	// attempt to allocate 10MB
    6384:	01002834 	movhi	r4,160
    6388:	00064a80 	call	64a8 <malloc>
    638c:	e0bfee15 	stw	r2,-72(fp)
    printf("SDRAM malloc returned 0x%08lx\n", (alt_u32)lots_of_memory);
    6390:	e0bfee17 	ldw	r2,-72(fp)
    6394:	100b883a 	mov	r5,r2
    6398:	01000074 	movhi	r4,1
    639c:	2105a104 	addi	r4,r4,5764
    63a0:	00067900 	call	6790 <printf>

    uint8_t seed[64];

    const char *mnemonic_phrase = mnemonic_generate(128);
    63a4:	01002004 	movi	r4,128
    63a8:	000026c0 	call	26c <mnemonic_generate>
    63ac:	e0bfef15 	stw	r2,-68(fp)
    printf("MNEMONIC PHRASE: %s", mnemonic_phrase);
    63b0:	e17fef17 	ldw	r5,-68(fp)
    63b4:	01000074 	movhi	r4,1
    63b8:	2105a904 	addi	r4,r4,5796
    63bc:	00067900 	call	6790 <printf>

    mnemonic_to_seed(mnemonic_phrase, "TEST", seed, 0);
    63c0:	e0bff004 	addi	r2,fp,-64
    63c4:	000f883a 	mov	r7,zero
    63c8:	100d883a 	mov	r6,r2
    63cc:	01400074 	movhi	r5,1
    63d0:	2945ae04 	addi	r5,r5,5816
    63d4:	e13fef17 	ldw	r4,-68(fp)
    63d8:	000056c0 	call	56c <mnemonic_to_seed>

	printf("Seed: ");
    63dc:	01000074 	movhi	r4,1
    63e0:	2105b004 	addi	r4,r4,5824
    63e4:	00067900 	call	6790 <printf>
	for(int i = 0; i < 64; i++){
    63e8:	e03feb15 	stw	zero,-84(fp)
    63ec:	00000c06 	br	6420 <main+0xd0>
		printf("%x", seed[i]);
    63f0:	e0fff004 	addi	r3,fp,-64
    63f4:	e0bfeb17 	ldw	r2,-84(fp)
    63f8:	1885883a 	add	r2,r3,r2
    63fc:	10800003 	ldbu	r2,0(r2)
    6400:	10803fcc 	andi	r2,r2,255
    6404:	100b883a 	mov	r5,r2
    6408:	01000074 	movhi	r4,1
    640c:	2105b204 	addi	r4,r4,5832
    6410:	00067900 	call	6790 <printf>
    printf("MNEMONIC PHRASE: %s", mnemonic_phrase);

    mnemonic_to_seed(mnemonic_phrase, "TEST", seed, 0);

	printf("Seed: ");
	for(int i = 0; i < 64; i++){
    6414:	e0bfeb17 	ldw	r2,-84(fp)
    6418:	10800044 	addi	r2,r2,1
    641c:	e0bfeb15 	stw	r2,-84(fp)
    6420:	e0bfeb17 	ldw	r2,-84(fp)
    6424:	10801010 	cmplti	r2,r2,64
    6428:	103ff11e 	bne	r2,zero,63f0 <__alt_mem_epcs_flash_controller+0xfdffd3f0>
		printf("%x", seed[i]);
	}
	printf("\n");
    642c:	01000284 	movi	r4,10
    6430:	00067e40 	call	67e4 <putchar>


    int count = 0;
    6434:	e03fec15 	stw	zero,-80(fp)
    int delay;

    // main loop
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
    6438:	e0bfec17 	ldw	r2,-80(fp)
    643c:	10c03fcc 	andi	r3,r2,255
    6440:	00808074 	movhi	r2,513
    6444:	10a80804 	addi	r2,r2,-24544
    6448:	10c00035 	stwio	r3,0(r2)
        delay = 0;
    644c:	e03fed15 	stw	zero,-76(fp)
        while(delay < 200000)
    6450:	00000306 	br	6460 <main+0x110>
        {
            delay++;
    6454:	e0bfed17 	ldw	r2,-76(fp)
    6458:	10800044 	addi	r2,r2,1
    645c:	e0bfed15 	stw	r2,-76(fp)
    // main loop
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
        delay = 0;
        while(delay < 200000)
    6460:	e0ffed17 	ldw	r3,-76(fp)
    6464:	008000f4 	movhi	r2,3
    6468:	10834fc4 	addi	r2,r2,3391
    646c:	10fff90e 	bge	r2,r3,6454 <__alt_mem_epcs_flash_controller+0xfdffd454>
        {
            delay++;
        }
        count++;
    6470:	e0bfec17 	ldw	r2,-80(fp)
    6474:	10800044 	addi	r2,r2,1
    6478:	e0bfec15 	stw	r2,-80(fp)
    }
    647c:	003fee06 	br	6438 <__alt_mem_epcs_flash_controller+0xfdffd438>

00006480 <__mulsi3>:
    6480:	0005883a 	mov	r2,zero
    6484:	20000726 	beq	r4,zero,64a4 <__mulsi3+0x24>
    6488:	20c0004c 	andi	r3,r4,1
    648c:	2008d07a 	srli	r4,r4,1
    6490:	18000126 	beq	r3,zero,6498 <__mulsi3+0x18>
    6494:	1145883a 	add	r2,r2,r5
    6498:	294b883a 	add	r5,r5,r5
    649c:	203ffa1e 	bne	r4,zero,6488 <__alt_mem_epcs_flash_controller+0xfdffd488>
    64a0:	f800283a 	ret
    64a4:	f800283a 	ret

000064a8 <malloc>:
    64a8:	00800074 	movhi	r2,1
    64ac:	108af504 	addi	r2,r2,11220
    64b0:	200b883a 	mov	r5,r4
    64b4:	11000017 	ldw	r4,0(r2)
    64b8:	00065fc1 	jmpi	65fc <_malloc_r>

000064bc <free>:
    64bc:	00800074 	movhi	r2,1
    64c0:	108af504 	addi	r2,r2,11220
    64c4:	200b883a 	mov	r5,r4
    64c8:	11000017 	ldw	r4,0(r2)
    64cc:	00065181 	jmpi	6518 <_free_r>

000064d0 <memcpy>:
    64d0:	2005883a 	mov	r2,r4
    64d4:	2007883a 	mov	r3,r4
    64d8:	218d883a 	add	r6,r4,r6
    64dc:	19800526 	beq	r3,r6,64f4 <memcpy+0x24>
    64e0:	29000003 	ldbu	r4,0(r5)
    64e4:	18c00044 	addi	r3,r3,1
    64e8:	29400044 	addi	r5,r5,1
    64ec:	193fffc5 	stb	r4,-1(r3)
    64f0:	003ffa06 	br	64dc <__alt_mem_epcs_flash_controller+0xfdffd4dc>
    64f4:	f800283a 	ret

000064f8 <memset>:
    64f8:	2005883a 	mov	r2,r4
    64fc:	2007883a 	mov	r3,r4
    6500:	218d883a 	add	r6,r4,r6
    6504:	19800326 	beq	r3,r6,6514 <memset+0x1c>
    6508:	19400005 	stb	r5,0(r3)
    650c:	18c00044 	addi	r3,r3,1
    6510:	003ffc06 	br	6504 <__alt_mem_epcs_flash_controller+0xfdffd504>
    6514:	f800283a 	ret

00006518 <_free_r>:
    6518:	28003726 	beq	r5,zero,65f8 <_free_r+0xe0>
    651c:	28ffff17 	ldw	r3,-4(r5)
    6520:	28bfff04 	addi	r2,r5,-4
    6524:	1800010e 	bge	r3,zero,652c <_free_r+0x14>
    6528:	10c5883a 	add	r2,r2,r3
    652c:	01400074 	movhi	r5,1
    6530:	29500104 	addi	r5,r5,16388
    6534:	28c00017 	ldw	r3,0(r5)
    6538:	280d883a 	mov	r6,r5
    653c:	1800031e 	bne	r3,zero,654c <_free_r+0x34>
    6540:	10000115 	stw	zero,4(r2)
    6544:	28800015 	stw	r2,0(r5)
    6548:	f800283a 	ret
    654c:	10c00c2e 	bgeu	r2,r3,6580 <_free_r+0x68>
    6550:	11000017 	ldw	r4,0(r2)
    6554:	110b883a 	add	r5,r2,r4
    6558:	1940041e 	bne	r3,r5,656c <_free_r+0x54>
    655c:	19400017 	ldw	r5,0(r3)
    6560:	18c00117 	ldw	r3,4(r3)
    6564:	2909883a 	add	r4,r5,r4
    6568:	11000015 	stw	r4,0(r2)
    656c:	10c00115 	stw	r3,4(r2)
    6570:	30800015 	stw	r2,0(r6)
    6574:	f800283a 	ret
    6578:	11400336 	bltu	r2,r5,6588 <_free_r+0x70>
    657c:	2807883a 	mov	r3,r5
    6580:	19400117 	ldw	r5,4(r3)
    6584:	283ffc1e 	bne	r5,zero,6578 <__alt_mem_epcs_flash_controller+0xfdffd578>
    6588:	19c00017 	ldw	r7,0(r3)
    658c:	19cd883a 	add	r6,r3,r7
    6590:	30800a1e 	bne	r6,r2,65bc <_free_r+0xa4>
    6594:	10800017 	ldw	r2,0(r2)
    6598:	3885883a 	add	r2,r7,r2
    659c:	18800015 	stw	r2,0(r3)
    65a0:	1889883a 	add	r4,r3,r2
    65a4:	2900141e 	bne	r5,r4,65f8 <_free_r+0xe0>
    65a8:	29000017 	ldw	r4,0(r5)
    65ac:	2085883a 	add	r2,r4,r2
    65b0:	18800015 	stw	r2,0(r3)
    65b4:	28800117 	ldw	r2,4(r5)
    65b8:	00000e06 	br	65f4 <_free_r+0xdc>
    65bc:	1180032e 	bgeu	r2,r6,65cc <_free_r+0xb4>
    65c0:	00800304 	movi	r2,12
    65c4:	20800015 	stw	r2,0(r4)
    65c8:	f800283a 	ret
    65cc:	11000017 	ldw	r4,0(r2)
    65d0:	110d883a 	add	r6,r2,r4
    65d4:	2980061e 	bne	r5,r6,65f0 <_free_r+0xd8>
    65d8:	29800017 	ldw	r6,0(r5)
    65dc:	3109883a 	add	r4,r6,r4
    65e0:	11000015 	stw	r4,0(r2)
    65e4:	29000117 	ldw	r4,4(r5)
    65e8:	11000115 	stw	r4,4(r2)
    65ec:	00000106 	br	65f4 <_free_r+0xdc>
    65f0:	11400115 	stw	r5,4(r2)
    65f4:	18800115 	stw	r2,4(r3)
    65f8:	f800283a 	ret

000065fc <_malloc_r>:
    65fc:	defffb04 	addi	sp,sp,-20
    6600:	00bfff04 	movi	r2,-4
    6604:	dc400115 	stw	r17,4(sp)
    6608:	2c4000c4 	addi	r17,r5,3
    660c:	88a2703a 	and	r17,r17,r2
    6610:	dc800215 	stw	r18,8(sp)
    6614:	dfc00415 	stw	ra,16(sp)
    6618:	dcc00315 	stw	r19,12(sp)
    661c:	dc000015 	stw	r16,0(sp)
    6620:	8c400204 	addi	r17,r17,8
    6624:	00800304 	movi	r2,12
    6628:	2025883a 	mov	r18,r4
    662c:	8880022e 	bgeu	r17,r2,6638 <_malloc_r+0x3c>
    6630:	1023883a 	mov	r17,r2
    6634:	00000506 	br	664c <_malloc_r+0x50>
    6638:	8800040e 	bge	r17,zero,664c <_malloc_r+0x50>
    663c:	00800304 	movi	r2,12
    6640:	90800015 	stw	r2,0(r18)
    6644:	0005883a 	mov	r2,zero
    6648:	00003b06 	br	6738 <_malloc_r+0x13c>
    664c:	897ffb36 	bltu	r17,r5,663c <__alt_mem_epcs_flash_controller+0xfdffd63c>
    6650:	00800074 	movhi	r2,1
    6654:	10900104 	addi	r2,r2,16388
    6658:	10c00017 	ldw	r3,0(r2)
    665c:	1009883a 	mov	r4,r2
    6660:	1821883a 	mov	r16,r3
    6664:	80000926 	beq	r16,zero,668c <_malloc_r+0x90>
    6668:	80800017 	ldw	r2,0(r16)
    666c:	1445c83a 	sub	r2,r2,r17
    6670:	10001516 	blt	r2,zero,66c8 <_malloc_r+0xcc>
    6674:	014002c4 	movi	r5,11
    6678:	28800d2e 	bgeu	r5,r2,66b0 <_malloc_r+0xb4>
    667c:	80800015 	stw	r2,0(r16)
    6680:	80a1883a 	add	r16,r16,r2
    6684:	84400015 	stw	r17,0(r16)
    6688:	8000221e 	bne	r16,zero,6714 <_malloc_r+0x118>
    668c:	04000074 	movhi	r16,1
    6690:	84100004 	addi	r16,r16,16384
    6694:	80800017 	ldw	r2,0(r16)
    6698:	10000e1e 	bne	r2,zero,66d4 <_malloc_r+0xd8>
    669c:	000b883a 	mov	r5,zero
    66a0:	9009883a 	mov	r4,r18
    66a4:	00069080 	call	6908 <_sbrk_r>
    66a8:	80800015 	stw	r2,0(r16)
    66ac:	00000906 	br	66d4 <_malloc_r+0xd8>
    66b0:	80800117 	ldw	r2,4(r16)
    66b4:	1c00021e 	bne	r3,r16,66c0 <_malloc_r+0xc4>
    66b8:	20800015 	stw	r2,0(r4)
    66bc:	00001506 	br	6714 <_malloc_r+0x118>
    66c0:	18800115 	stw	r2,4(r3)
    66c4:	00001306 	br	6714 <_malloc_r+0x118>
    66c8:	8007883a 	mov	r3,r16
    66cc:	84000117 	ldw	r16,4(r16)
    66d0:	003fe406 	br	6664 <__alt_mem_epcs_flash_controller+0xfdffd664>
    66d4:	880b883a 	mov	r5,r17
    66d8:	9009883a 	mov	r4,r18
    66dc:	00069080 	call	6908 <_sbrk_r>
    66e0:	04ffffc4 	movi	r19,-1
    66e4:	14ffd526 	beq	r2,r19,663c <__alt_mem_epcs_flash_controller+0xfdffd63c>
    66e8:	140000c4 	addi	r16,r2,3
    66ec:	00ffff04 	movi	r3,-4
    66f0:	80e0703a 	and	r16,r16,r3
    66f4:	1400021e 	bne	r2,r16,6700 <_malloc_r+0x104>
    66f8:	84400015 	stw	r17,0(r16)
    66fc:	00000506 	br	6714 <_malloc_r+0x118>
    6700:	808bc83a 	sub	r5,r16,r2
    6704:	9009883a 	mov	r4,r18
    6708:	00069080 	call	6908 <_sbrk_r>
    670c:	14fffa1e 	bne	r2,r19,66f8 <__alt_mem_epcs_flash_controller+0xfdffd6f8>
    6710:	003fca06 	br	663c <__alt_mem_epcs_flash_controller+0xfdffd63c>
    6714:	810002c4 	addi	r4,r16,11
    6718:	00bffe04 	movi	r2,-8
    671c:	80c00104 	addi	r3,r16,4
    6720:	2084703a 	and	r2,r4,r2
    6724:	10c7c83a 	sub	r3,r2,r3
    6728:	18000326 	beq	r3,zero,6738 <_malloc_r+0x13c>
    672c:	80e1883a 	add	r16,r16,r3
    6730:	00c7c83a 	sub	r3,zero,r3
    6734:	80c00015 	stw	r3,0(r16)
    6738:	dfc00417 	ldw	ra,16(sp)
    673c:	dcc00317 	ldw	r19,12(sp)
    6740:	dc800217 	ldw	r18,8(sp)
    6744:	dc400117 	ldw	r17,4(sp)
    6748:	dc000017 	ldw	r16,0(sp)
    674c:	dec00504 	addi	sp,sp,20
    6750:	f800283a 	ret

00006754 <_printf_r>:
    6754:	defffd04 	addi	sp,sp,-12
    6758:	dfc00015 	stw	ra,0(sp)
    675c:	d9800115 	stw	r6,4(sp)
    6760:	d9c00215 	stw	r7,8(sp)
    6764:	20c00217 	ldw	r3,8(r4)
    6768:	01800034 	movhi	r6,0
    676c:	319bf704 	addi	r6,r6,28636
    6770:	19800115 	stw	r6,4(r3)
    6774:	280d883a 	mov	r6,r5
    6778:	21400217 	ldw	r5,8(r4)
    677c:	d9c00104 	addi	r7,sp,4
    6780:	0006a940 	call	6a94 <___vfprintf_internal_r>
    6784:	dfc00017 	ldw	ra,0(sp)
    6788:	dec00304 	addi	sp,sp,12
    678c:	f800283a 	ret

00006790 <printf>:
    6790:	defffc04 	addi	sp,sp,-16
    6794:	dfc00015 	stw	ra,0(sp)
    6798:	d9400115 	stw	r5,4(sp)
    679c:	d9800215 	stw	r6,8(sp)
    67a0:	d9c00315 	stw	r7,12(sp)
    67a4:	00800074 	movhi	r2,1
    67a8:	108af504 	addi	r2,r2,11220
    67ac:	10800017 	ldw	r2,0(r2)
    67b0:	01400034 	movhi	r5,0
    67b4:	295bf704 	addi	r5,r5,28636
    67b8:	10c00217 	ldw	r3,8(r2)
    67bc:	d9800104 	addi	r6,sp,4
    67c0:	19400115 	stw	r5,4(r3)
    67c4:	200b883a 	mov	r5,r4
    67c8:	11000217 	ldw	r4,8(r2)
    67cc:	0006fc00 	call	6fc0 <__vfprintf_internal>
    67d0:	dfc00017 	ldw	ra,0(sp)
    67d4:	dec00404 	addi	sp,sp,16
    67d8:	f800283a 	ret

000067dc <_putchar_r>:
    67dc:	21800217 	ldw	r6,8(r4)
    67e0:	000713c1 	jmpi	713c <_putc_r>

000067e4 <putchar>:
    67e4:	00800074 	movhi	r2,1
    67e8:	108af504 	addi	r2,r2,11220
    67ec:	10800017 	ldw	r2,0(r2)
    67f0:	200b883a 	mov	r5,r4
    67f4:	11800217 	ldw	r6,8(r2)
    67f8:	1009883a 	mov	r4,r2
    67fc:	000713c1 	jmpi	713c <_putc_r>

00006800 <_puts_r>:
    6800:	defffd04 	addi	sp,sp,-12
    6804:	dc000015 	stw	r16,0(sp)
    6808:	2021883a 	mov	r16,r4
    680c:	2809883a 	mov	r4,r5
    6810:	dfc00215 	stw	ra,8(sp)
    6814:	dc400115 	stw	r17,4(sp)
    6818:	2823883a 	mov	r17,r5
    681c:	00069bc0 	call	69bc <strlen>
    6820:	81400217 	ldw	r5,8(r16)
    6824:	01000034 	movhi	r4,0
    6828:	211bf704 	addi	r4,r4,28636
    682c:	29000115 	stw	r4,4(r5)
    6830:	100f883a 	mov	r7,r2
    6834:	880d883a 	mov	r6,r17
    6838:	8009883a 	mov	r4,r16
    683c:	0006fdc0 	call	6fdc <__sfvwrite_small_dev>
    6840:	00ffffc4 	movi	r3,-1
    6844:	10c00926 	beq	r2,r3,686c <_puts_r+0x6c>
    6848:	81400217 	ldw	r5,8(r16)
    684c:	01800074 	movhi	r6,1
    6850:	01c00044 	movi	r7,1
    6854:	28800117 	ldw	r2,4(r5)
    6858:	3185b304 	addi	r6,r6,5836
    685c:	8009883a 	mov	r4,r16
    6860:	103ee83a 	callr	r2
    6864:	10bfffe0 	cmpeqi	r2,r2,-1
    6868:	0085c83a 	sub	r2,zero,r2
    686c:	dfc00217 	ldw	ra,8(sp)
    6870:	dc400117 	ldw	r17,4(sp)
    6874:	dc000017 	ldw	r16,0(sp)
    6878:	dec00304 	addi	sp,sp,12
    687c:	f800283a 	ret

00006880 <puts>:
    6880:	00800074 	movhi	r2,1
    6884:	108af504 	addi	r2,r2,11220
    6888:	200b883a 	mov	r5,r4
    688c:	11000017 	ldw	r4,0(r2)
    6890:	00068001 	jmpi	6800 <_puts_r>

00006894 <srand>:
    6894:	00800074 	movhi	r2,1
    6898:	10900204 	addi	r2,r2,16392
    689c:	11000015 	stw	r4,0(r2)
    68a0:	10000115 	stw	zero,4(r2)
    68a4:	f800283a 	ret

000068a8 <rand>:
    68a8:	defffe04 	addi	sp,sp,-8
    68ac:	dc000015 	stw	r16,0(sp)
    68b0:	04000074 	movhi	r16,1
    68b4:	84100204 	addi	r16,r16,16392
    68b8:	81000017 	ldw	r4,0(r16)
    68bc:	81400117 	ldw	r5,4(r16)
    68c0:	01932574 	movhi	r6,19605
    68c4:	01d614b4 	movhi	r7,22610
    68c8:	319fcb44 	addi	r6,r6,32557
    68cc:	39fd0b44 	addi	r7,r7,-3027
    68d0:	dfc00115 	stw	ra,4(sp)
    68d4:	00071ec0 	call	71ec <__muldi3>
    68d8:	11000044 	addi	r4,r2,1
    68dc:	2085803a 	cmpltu	r2,r4,r2
    68e0:	10c7883a 	add	r3,r2,r3
    68e4:	00a00034 	movhi	r2,32768
    68e8:	10bfffc4 	addi	r2,r2,-1
    68ec:	1884703a 	and	r2,r3,r2
    68f0:	81000015 	stw	r4,0(r16)
    68f4:	80c00115 	stw	r3,4(r16)
    68f8:	dfc00117 	ldw	ra,4(sp)
    68fc:	dc000017 	ldw	r16,0(sp)
    6900:	dec00204 	addi	sp,sp,8
    6904:	f800283a 	ret

00006908 <_sbrk_r>:
    6908:	defffd04 	addi	sp,sp,-12
    690c:	dc000015 	stw	r16,0(sp)
    6910:	04000074 	movhi	r16,1
    6914:	dc400115 	stw	r17,4(sp)
    6918:	84100404 	addi	r16,r16,16400
    691c:	2023883a 	mov	r17,r4
    6920:	2809883a 	mov	r4,r5
    6924:	dfc00215 	stw	ra,8(sp)
    6928:	80000015 	stw	zero,0(r16)
    692c:	00078080 	call	7808 <sbrk>
    6930:	00ffffc4 	movi	r3,-1
    6934:	10c0031e 	bne	r2,r3,6944 <_sbrk_r+0x3c>
    6938:	80c00017 	ldw	r3,0(r16)
    693c:	18000126 	beq	r3,zero,6944 <_sbrk_r+0x3c>
    6940:	88c00015 	stw	r3,0(r17)
    6944:	dfc00217 	ldw	ra,8(sp)
    6948:	dc400117 	ldw	r17,4(sp)
    694c:	dc000017 	ldw	r16,0(sp)
    6950:	dec00304 	addi	sp,sp,12
    6954:	f800283a 	ret

00006958 <strcmp>:
    6958:	20800003 	ldbu	r2,0(r4)
    695c:	10c03fcc 	andi	r3,r2,255
    6960:	18c0201c 	xori	r3,r3,128
    6964:	18ffe004 	addi	r3,r3,-128
    6968:	18000526 	beq	r3,zero,6980 <strcmp+0x28>
    696c:	29800007 	ldb	r6,0(r5)
    6970:	1980031e 	bne	r3,r6,6980 <strcmp+0x28>
    6974:	21000044 	addi	r4,r4,1
    6978:	29400044 	addi	r5,r5,1
    697c:	003ff606 	br	6958 <__alt_mem_epcs_flash_controller+0xfdffd958>
    6980:	28c00003 	ldbu	r3,0(r5)
    6984:	10803fcc 	andi	r2,r2,255
    6988:	10c5c83a 	sub	r2,r2,r3
    698c:	f800283a 	ret

00006990 <strcpy>:
    6990:	2005883a 	mov	r2,r4
    6994:	200d883a 	mov	r6,r4
    6998:	28c00003 	ldbu	r3,0(r5)
    699c:	31800044 	addi	r6,r6,1
    69a0:	29400044 	addi	r5,r5,1
    69a4:	30ffffc5 	stb	r3,-1(r6)
    69a8:	18c03fcc 	andi	r3,r3,255
    69ac:	18c0201c 	xori	r3,r3,128
    69b0:	18ffe004 	addi	r3,r3,-128
    69b4:	183ff81e 	bne	r3,zero,6998 <__alt_mem_epcs_flash_controller+0xfdffd998>
    69b8:	f800283a 	ret

000069bc <strlen>:
    69bc:	2005883a 	mov	r2,r4
    69c0:	10c00007 	ldb	r3,0(r2)
    69c4:	18000226 	beq	r3,zero,69d0 <strlen+0x14>
    69c8:	10800044 	addi	r2,r2,1
    69cc:	003ffc06 	br	69c0 <__alt_mem_epcs_flash_controller+0xfdffd9c0>
    69d0:	1105c83a 	sub	r2,r2,r4
    69d4:	f800283a 	ret

000069d8 <time>:
    69d8:	00800074 	movhi	r2,1
    69dc:	defffc04 	addi	sp,sp,-16
    69e0:	108af504 	addi	r2,r2,11220
    69e4:	dc000215 	stw	r16,8(sp)
    69e8:	2021883a 	mov	r16,r4
    69ec:	11000017 	ldw	r4,0(r2)
    69f0:	000d883a 	mov	r6,zero
    69f4:	d80b883a 	mov	r5,sp
    69f8:	dfc00315 	stw	ra,12(sp)
    69fc:	00070940 	call	7094 <_gettimeofday_r>
    6a00:	10000416 	blt	r2,zero,6a14 <time+0x3c>
    6a04:	d8800017 	ldw	r2,0(sp)
    6a08:	80000326 	beq	r16,zero,6a18 <time+0x40>
    6a0c:	80800015 	stw	r2,0(r16)
    6a10:	00000106 	br	6a18 <time+0x40>
    6a14:	00bfffc4 	movi	r2,-1
    6a18:	dfc00317 	ldw	ra,12(sp)
    6a1c:	dc000217 	ldw	r16,8(sp)
    6a20:	dec00404 	addi	sp,sp,16
    6a24:	f800283a 	ret

00006a28 <print_repeat>:
    6a28:	defffb04 	addi	sp,sp,-20
    6a2c:	dc800315 	stw	r18,12(sp)
    6a30:	dc400215 	stw	r17,8(sp)
    6a34:	dc000115 	stw	r16,4(sp)
    6a38:	dfc00415 	stw	ra,16(sp)
    6a3c:	2025883a 	mov	r18,r4
    6a40:	2823883a 	mov	r17,r5
    6a44:	d9800005 	stb	r6,0(sp)
    6a48:	3821883a 	mov	r16,r7
    6a4c:	04000a0e 	bge	zero,r16,6a78 <print_repeat+0x50>
    6a50:	88800117 	ldw	r2,4(r17)
    6a54:	01c00044 	movi	r7,1
    6a58:	d80d883a 	mov	r6,sp
    6a5c:	880b883a 	mov	r5,r17
    6a60:	9009883a 	mov	r4,r18
    6a64:	103ee83a 	callr	r2
    6a68:	843fffc4 	addi	r16,r16,-1
    6a6c:	103ff726 	beq	r2,zero,6a4c <__alt_mem_epcs_flash_controller+0xfdffda4c>
    6a70:	00bfffc4 	movi	r2,-1
    6a74:	00000106 	br	6a7c <print_repeat+0x54>
    6a78:	0005883a 	mov	r2,zero
    6a7c:	dfc00417 	ldw	ra,16(sp)
    6a80:	dc800317 	ldw	r18,12(sp)
    6a84:	dc400217 	ldw	r17,8(sp)
    6a88:	dc000117 	ldw	r16,4(sp)
    6a8c:	dec00504 	addi	sp,sp,20
    6a90:	f800283a 	ret

00006a94 <___vfprintf_internal_r>:
    6a94:	deffe504 	addi	sp,sp,-108
    6a98:	d8c00804 	addi	r3,sp,32
    6a9c:	ddc01815 	stw	r23,96(sp)
    6aa0:	dd801715 	stw	r22,92(sp)
    6aa4:	dd401615 	stw	r21,88(sp)
    6aa8:	dd001515 	stw	r20,84(sp)
    6aac:	dcc01415 	stw	r19,80(sp)
    6ab0:	dc801315 	stw	r18,76(sp)
    6ab4:	dc401215 	stw	r17,72(sp)
    6ab8:	dc001115 	stw	r16,68(sp)
    6abc:	dfc01a15 	stw	ra,104(sp)
    6ac0:	df001915 	stw	fp,100(sp)
    6ac4:	2029883a 	mov	r20,r4
    6ac8:	2823883a 	mov	r17,r5
    6acc:	382d883a 	mov	r22,r7
    6ad0:	d9800f15 	stw	r6,60(sp)
    6ad4:	0021883a 	mov	r16,zero
    6ad8:	d8000e15 	stw	zero,56(sp)
    6adc:	d8000a15 	stw	zero,40(sp)
    6ae0:	002b883a 	mov	r21,zero
    6ae4:	0027883a 	mov	r19,zero
    6ae8:	0025883a 	mov	r18,zero
    6aec:	d8000c15 	stw	zero,48(sp)
    6af0:	d8000b15 	stw	zero,44(sp)
    6af4:	002f883a 	mov	r23,zero
    6af8:	d8c00915 	stw	r3,36(sp)
    6afc:	d8c00f17 	ldw	r3,60(sp)
    6b00:	19000003 	ldbu	r4,0(r3)
    6b04:	20803fcc 	andi	r2,r4,255
    6b08:	1080201c 	xori	r2,r2,128
    6b0c:	10bfe004 	addi	r2,r2,-128
    6b10:	10011e26 	beq	r2,zero,6f8c <___vfprintf_internal_r+0x4f8>
    6b14:	00c00044 	movi	r3,1
    6b18:	b8c01426 	beq	r23,r3,6b6c <___vfprintf_internal_r+0xd8>
    6b1c:	1dc00216 	blt	r3,r23,6b28 <___vfprintf_internal_r+0x94>
    6b20:	b8000626 	beq	r23,zero,6b3c <___vfprintf_internal_r+0xa8>
    6b24:	00011506 	br	6f7c <___vfprintf_internal_r+0x4e8>
    6b28:	01400084 	movi	r5,2
    6b2c:	b9401d26 	beq	r23,r5,6ba4 <___vfprintf_internal_r+0x110>
    6b30:	014000c4 	movi	r5,3
    6b34:	b9402b26 	beq	r23,r5,6be4 <___vfprintf_internal_r+0x150>
    6b38:	00011006 	br	6f7c <___vfprintf_internal_r+0x4e8>
    6b3c:	01400944 	movi	r5,37
    6b40:	1140fc26 	beq	r2,r5,6f34 <___vfprintf_internal_r+0x4a0>
    6b44:	88800117 	ldw	r2,4(r17)
    6b48:	d9000005 	stb	r4,0(sp)
    6b4c:	01c00044 	movi	r7,1
    6b50:	d80d883a 	mov	r6,sp
    6b54:	880b883a 	mov	r5,r17
    6b58:	a009883a 	mov	r4,r20
    6b5c:	103ee83a 	callr	r2
    6b60:	1000d81e 	bne	r2,zero,6ec4 <___vfprintf_internal_r+0x430>
    6b64:	84000044 	addi	r16,r16,1
    6b68:	00010406 	br	6f7c <___vfprintf_internal_r+0x4e8>
    6b6c:	01400c04 	movi	r5,48
    6b70:	1140fa26 	beq	r2,r5,6f5c <___vfprintf_internal_r+0x4c8>
    6b74:	01400944 	movi	r5,37
    6b78:	11400a1e 	bne	r2,r5,6ba4 <___vfprintf_internal_r+0x110>
    6b7c:	d8800005 	stb	r2,0(sp)
    6b80:	88800117 	ldw	r2,4(r17)
    6b84:	b80f883a 	mov	r7,r23
    6b88:	d80d883a 	mov	r6,sp
    6b8c:	880b883a 	mov	r5,r17
    6b90:	a009883a 	mov	r4,r20
    6b94:	103ee83a 	callr	r2
    6b98:	1000ca1e 	bne	r2,zero,6ec4 <___vfprintf_internal_r+0x430>
    6b9c:	84000044 	addi	r16,r16,1
    6ba0:	0000f506 	br	6f78 <___vfprintf_internal_r+0x4e4>
    6ba4:	25fff404 	addi	r23,r4,-48
    6ba8:	bdc03fcc 	andi	r23,r23,255
    6bac:	00c00244 	movi	r3,9
    6bb0:	1dc00936 	bltu	r3,r23,6bd8 <___vfprintf_internal_r+0x144>
    6bb4:	00bfffc4 	movi	r2,-1
    6bb8:	90800426 	beq	r18,r2,6bcc <___vfprintf_internal_r+0x138>
    6bbc:	01400284 	movi	r5,10
    6bc0:	9009883a 	mov	r4,r18
    6bc4:	00064800 	call	6480 <__mulsi3>
    6bc8:	00000106 	br	6bd0 <___vfprintf_internal_r+0x13c>
    6bcc:	0005883a 	mov	r2,zero
    6bd0:	b8a5883a 	add	r18,r23,r2
    6bd4:	0000e206 	br	6f60 <___vfprintf_internal_r+0x4cc>
    6bd8:	01400b84 	movi	r5,46
    6bdc:	1140e426 	beq	r2,r5,6f70 <___vfprintf_internal_r+0x4dc>
    6be0:	05c00084 	movi	r23,2
    6be4:	213ff404 	addi	r4,r4,-48
    6be8:	27003fcc 	andi	fp,r4,255
    6bec:	00c00244 	movi	r3,9
    6bf0:	1f000936 	bltu	r3,fp,6c18 <___vfprintf_internal_r+0x184>
    6bf4:	00bfffc4 	movi	r2,-1
    6bf8:	98800426 	beq	r19,r2,6c0c <___vfprintf_internal_r+0x178>
    6bfc:	01400284 	movi	r5,10
    6c00:	9809883a 	mov	r4,r19
    6c04:	00064800 	call	6480 <__mulsi3>
    6c08:	00000106 	br	6c10 <___vfprintf_internal_r+0x17c>
    6c0c:	0005883a 	mov	r2,zero
    6c10:	e0a7883a 	add	r19,fp,r2
    6c14:	0000d906 	br	6f7c <___vfprintf_internal_r+0x4e8>
    6c18:	00c01b04 	movi	r3,108
    6c1c:	10c0d226 	beq	r2,r3,6f68 <___vfprintf_internal_r+0x4d4>
    6c20:	013fffc4 	movi	r4,-1
    6c24:	99000226 	beq	r19,r4,6c30 <___vfprintf_internal_r+0x19c>
    6c28:	d8000b15 	stw	zero,44(sp)
    6c2c:	00000106 	br	6c34 <___vfprintf_internal_r+0x1a0>
    6c30:	04c00044 	movi	r19,1
    6c34:	01001a44 	movi	r4,105
    6c38:	11001626 	beq	r2,r4,6c94 <___vfprintf_internal_r+0x200>
    6c3c:	20800916 	blt	r4,r2,6c64 <___vfprintf_internal_r+0x1d0>
    6c40:	010018c4 	movi	r4,99
    6c44:	11008826 	beq	r2,r4,6e68 <___vfprintf_internal_r+0x3d4>
    6c48:	01001904 	movi	r4,100
    6c4c:	11001126 	beq	r2,r4,6c94 <___vfprintf_internal_r+0x200>
    6c50:	01001604 	movi	r4,88
    6c54:	1100c81e 	bne	r2,r4,6f78 <___vfprintf_internal_r+0x4e4>
    6c58:	00c00044 	movi	r3,1
    6c5c:	d8c00e15 	stw	r3,56(sp)
    6c60:	00001506 	br	6cb8 <___vfprintf_internal_r+0x224>
    6c64:	01001cc4 	movi	r4,115
    6c68:	11009826 	beq	r2,r4,6ecc <___vfprintf_internal_r+0x438>
    6c6c:	20800416 	blt	r4,r2,6c80 <___vfprintf_internal_r+0x1ec>
    6c70:	01001bc4 	movi	r4,111
    6c74:	1100c01e 	bne	r2,r4,6f78 <___vfprintf_internal_r+0x4e4>
    6c78:	05400204 	movi	r21,8
    6c7c:	00000f06 	br	6cbc <___vfprintf_internal_r+0x228>
    6c80:	01001d44 	movi	r4,117
    6c84:	11000d26 	beq	r2,r4,6cbc <___vfprintf_internal_r+0x228>
    6c88:	01001e04 	movi	r4,120
    6c8c:	11000a26 	beq	r2,r4,6cb8 <___vfprintf_internal_r+0x224>
    6c90:	0000b906 	br	6f78 <___vfprintf_internal_r+0x4e4>
    6c94:	d8c00a17 	ldw	r3,40(sp)
    6c98:	b7000104 	addi	fp,r22,4
    6c9c:	18000726 	beq	r3,zero,6cbc <___vfprintf_internal_r+0x228>
    6ca0:	df000d15 	stw	fp,52(sp)
    6ca4:	b5c00017 	ldw	r23,0(r22)
    6ca8:	b800080e 	bge	r23,zero,6ccc <___vfprintf_internal_r+0x238>
    6cac:	05efc83a 	sub	r23,zero,r23
    6cb0:	02400044 	movi	r9,1
    6cb4:	00000606 	br	6cd0 <___vfprintf_internal_r+0x23c>
    6cb8:	05400404 	movi	r21,16
    6cbc:	b0c00104 	addi	r3,r22,4
    6cc0:	d8c00d15 	stw	r3,52(sp)
    6cc4:	b5c00017 	ldw	r23,0(r22)
    6cc8:	d8000a15 	stw	zero,40(sp)
    6ccc:	0013883a 	mov	r9,zero
    6cd0:	d839883a 	mov	fp,sp
    6cd4:	b8001726 	beq	r23,zero,6d34 <___vfprintf_internal_r+0x2a0>
    6cd8:	a80b883a 	mov	r5,r21
    6cdc:	b809883a 	mov	r4,r23
    6ce0:	da401015 	stw	r9,64(sp)
    6ce4:	00073f00 	call	73f0 <__udivsi3>
    6ce8:	a80b883a 	mov	r5,r21
    6cec:	1009883a 	mov	r4,r2
    6cf0:	102d883a 	mov	r22,r2
    6cf4:	00064800 	call	6480 <__mulsi3>
    6cf8:	b885c83a 	sub	r2,r23,r2
    6cfc:	00c00244 	movi	r3,9
    6d00:	da401017 	ldw	r9,64(sp)
    6d04:	18800216 	blt	r3,r2,6d10 <___vfprintf_internal_r+0x27c>
    6d08:	10800c04 	addi	r2,r2,48
    6d0c:	00000506 	br	6d24 <___vfprintf_internal_r+0x290>
    6d10:	d8c00e17 	ldw	r3,56(sp)
    6d14:	18000226 	beq	r3,zero,6d20 <___vfprintf_internal_r+0x28c>
    6d18:	10800dc4 	addi	r2,r2,55
    6d1c:	00000106 	br	6d24 <___vfprintf_internal_r+0x290>
    6d20:	108015c4 	addi	r2,r2,87
    6d24:	e0800005 	stb	r2,0(fp)
    6d28:	b02f883a 	mov	r23,r22
    6d2c:	e7000044 	addi	fp,fp,1
    6d30:	003fe806 	br	6cd4 <__alt_mem_epcs_flash_controller+0xfdffdcd4>
    6d34:	e6efc83a 	sub	r23,fp,sp
    6d38:	9dc5c83a 	sub	r2,r19,r23
    6d3c:	0080090e 	bge	zero,r2,6d64 <___vfprintf_internal_r+0x2d0>
    6d40:	e085883a 	add	r2,fp,r2
    6d44:	01400c04 	movi	r5,48
    6d48:	d8c00917 	ldw	r3,36(sp)
    6d4c:	e009883a 	mov	r4,fp
    6d50:	e0c0032e 	bgeu	fp,r3,6d60 <___vfprintf_internal_r+0x2cc>
    6d54:	e7000044 	addi	fp,fp,1
    6d58:	21400005 	stb	r5,0(r4)
    6d5c:	e0bffa1e 	bne	fp,r2,6d48 <__alt_mem_epcs_flash_controller+0xfdffdd48>
    6d60:	e6efc83a 	sub	r23,fp,sp
    6d64:	d8c00b17 	ldw	r3,44(sp)
    6d68:	4dd1883a 	add	r8,r9,r23
    6d6c:	922dc83a 	sub	r22,r18,r8
    6d70:	18001626 	beq	r3,zero,6dcc <___vfprintf_internal_r+0x338>
    6d74:	48000a26 	beq	r9,zero,6da0 <___vfprintf_internal_r+0x30c>
    6d78:	00800b44 	movi	r2,45
    6d7c:	d8800805 	stb	r2,32(sp)
    6d80:	88800117 	ldw	r2,4(r17)
    6d84:	01c00044 	movi	r7,1
    6d88:	d9800804 	addi	r6,sp,32
    6d8c:	880b883a 	mov	r5,r17
    6d90:	a009883a 	mov	r4,r20
    6d94:	103ee83a 	callr	r2
    6d98:	10004a1e 	bne	r2,zero,6ec4 <___vfprintf_internal_r+0x430>
    6d9c:	84000044 	addi	r16,r16,1
    6da0:	0580070e 	bge	zero,r22,6dc0 <___vfprintf_internal_r+0x32c>
    6da4:	b00f883a 	mov	r7,r22
    6da8:	01800c04 	movi	r6,48
    6dac:	880b883a 	mov	r5,r17
    6db0:	a009883a 	mov	r4,r20
    6db4:	0006a280 	call	6a28 <print_repeat>
    6db8:	1000421e 	bne	r2,zero,6ec4 <___vfprintf_internal_r+0x430>
    6dbc:	85a1883a 	add	r16,r16,r22
    6dc0:	e02d883a 	mov	r22,fp
    6dc4:	bf2fc83a 	sub	r23,r23,fp
    6dc8:	00002006 	br	6e4c <___vfprintf_internal_r+0x3b8>
    6dcc:	0580090e 	bge	zero,r22,6df4 <___vfprintf_internal_r+0x360>
    6dd0:	b00f883a 	mov	r7,r22
    6dd4:	01800804 	movi	r6,32
    6dd8:	880b883a 	mov	r5,r17
    6ddc:	a009883a 	mov	r4,r20
    6de0:	da401015 	stw	r9,64(sp)
    6de4:	0006a280 	call	6a28 <print_repeat>
    6de8:	da401017 	ldw	r9,64(sp)
    6dec:	1000351e 	bne	r2,zero,6ec4 <___vfprintf_internal_r+0x430>
    6df0:	85a1883a 	add	r16,r16,r22
    6df4:	483ff226 	beq	r9,zero,6dc0 <__alt_mem_epcs_flash_controller+0xfdffddc0>
    6df8:	00800b44 	movi	r2,45
    6dfc:	d8800805 	stb	r2,32(sp)
    6e00:	88800117 	ldw	r2,4(r17)
    6e04:	01c00044 	movi	r7,1
    6e08:	d9800804 	addi	r6,sp,32
    6e0c:	880b883a 	mov	r5,r17
    6e10:	a009883a 	mov	r4,r20
    6e14:	103ee83a 	callr	r2
    6e18:	10002a1e 	bne	r2,zero,6ec4 <___vfprintf_internal_r+0x430>
    6e1c:	84000044 	addi	r16,r16,1
    6e20:	003fe706 	br	6dc0 <__alt_mem_epcs_flash_controller+0xfdffddc0>
    6e24:	b5bfffc4 	addi	r22,r22,-1
    6e28:	b0800003 	ldbu	r2,0(r22)
    6e2c:	01c00044 	movi	r7,1
    6e30:	d9800804 	addi	r6,sp,32
    6e34:	d8800805 	stb	r2,32(sp)
    6e38:	88800117 	ldw	r2,4(r17)
    6e3c:	880b883a 	mov	r5,r17
    6e40:	a009883a 	mov	r4,r20
    6e44:	103ee83a 	callr	r2
    6e48:	10001e1e 	bne	r2,zero,6ec4 <___vfprintf_internal_r+0x430>
    6e4c:	8585c83a 	sub	r2,r16,r22
    6e50:	b5c9883a 	add	r4,r22,r23
    6e54:	e085883a 	add	r2,fp,r2
    6e58:	013ff216 	blt	zero,r4,6e24 <__alt_mem_epcs_flash_controller+0xfdffde24>
    6e5c:	1021883a 	mov	r16,r2
    6e60:	dd800d17 	ldw	r22,52(sp)
    6e64:	00004406 	br	6f78 <___vfprintf_internal_r+0x4e4>
    6e68:	00800044 	movi	r2,1
    6e6c:	1480080e 	bge	r2,r18,6e90 <___vfprintf_internal_r+0x3fc>
    6e70:	95ffffc4 	addi	r23,r18,-1
    6e74:	b80f883a 	mov	r7,r23
    6e78:	01800804 	movi	r6,32
    6e7c:	880b883a 	mov	r5,r17
    6e80:	a009883a 	mov	r4,r20
    6e84:	0006a280 	call	6a28 <print_repeat>
    6e88:	10000e1e 	bne	r2,zero,6ec4 <___vfprintf_internal_r+0x430>
    6e8c:	85e1883a 	add	r16,r16,r23
    6e90:	b0800017 	ldw	r2,0(r22)
    6e94:	01c00044 	movi	r7,1
    6e98:	d80d883a 	mov	r6,sp
    6e9c:	d8800005 	stb	r2,0(sp)
    6ea0:	88800117 	ldw	r2,4(r17)
    6ea4:	880b883a 	mov	r5,r17
    6ea8:	a009883a 	mov	r4,r20
    6eac:	b5c00104 	addi	r23,r22,4
    6eb0:	103ee83a 	callr	r2
    6eb4:	1000031e 	bne	r2,zero,6ec4 <___vfprintf_internal_r+0x430>
    6eb8:	84000044 	addi	r16,r16,1
    6ebc:	b82d883a 	mov	r22,r23
    6ec0:	00002d06 	br	6f78 <___vfprintf_internal_r+0x4e4>
    6ec4:	00bfffc4 	movi	r2,-1
    6ec8:	00003106 	br	6f90 <___vfprintf_internal_r+0x4fc>
    6ecc:	b5c00017 	ldw	r23,0(r22)
    6ed0:	b7000104 	addi	fp,r22,4
    6ed4:	b809883a 	mov	r4,r23
    6ed8:	00069bc0 	call	69bc <strlen>
    6edc:	9091c83a 	sub	r8,r18,r2
    6ee0:	102d883a 	mov	r22,r2
    6ee4:	0200090e 	bge	zero,r8,6f0c <___vfprintf_internal_r+0x478>
    6ee8:	400f883a 	mov	r7,r8
    6eec:	01800804 	movi	r6,32
    6ef0:	880b883a 	mov	r5,r17
    6ef4:	a009883a 	mov	r4,r20
    6ef8:	da001015 	stw	r8,64(sp)
    6efc:	0006a280 	call	6a28 <print_repeat>
    6f00:	da001017 	ldw	r8,64(sp)
    6f04:	103fef1e 	bne	r2,zero,6ec4 <__alt_mem_epcs_flash_controller+0xfdffdec4>
    6f08:	8221883a 	add	r16,r16,r8
    6f0c:	88800117 	ldw	r2,4(r17)
    6f10:	b00f883a 	mov	r7,r22
    6f14:	b80d883a 	mov	r6,r23
    6f18:	880b883a 	mov	r5,r17
    6f1c:	a009883a 	mov	r4,r20
    6f20:	103ee83a 	callr	r2
    6f24:	103fe71e 	bne	r2,zero,6ec4 <__alt_mem_epcs_flash_controller+0xfdffdec4>
    6f28:	85a1883a 	add	r16,r16,r22
    6f2c:	e02d883a 	mov	r22,fp
    6f30:	00001106 	br	6f78 <___vfprintf_internal_r+0x4e4>
    6f34:	00c00044 	movi	r3,1
    6f38:	04ffffc4 	movi	r19,-1
    6f3c:	d8000e15 	stw	zero,56(sp)
    6f40:	d8c00a15 	stw	r3,40(sp)
    6f44:	05400284 	movi	r21,10
    6f48:	9825883a 	mov	r18,r19
    6f4c:	d8000c15 	stw	zero,48(sp)
    6f50:	d8000b15 	stw	zero,44(sp)
    6f54:	182f883a 	mov	r23,r3
    6f58:	00000806 	br	6f7c <___vfprintf_internal_r+0x4e8>
    6f5c:	ddc00b15 	stw	r23,44(sp)
    6f60:	05c00084 	movi	r23,2
    6f64:	00000506 	br	6f7c <___vfprintf_internal_r+0x4e8>
    6f68:	00c00044 	movi	r3,1
    6f6c:	d8c00c15 	stw	r3,48(sp)
    6f70:	05c000c4 	movi	r23,3
    6f74:	00000106 	br	6f7c <___vfprintf_internal_r+0x4e8>
    6f78:	002f883a 	mov	r23,zero
    6f7c:	d8c00f17 	ldw	r3,60(sp)
    6f80:	18c00044 	addi	r3,r3,1
    6f84:	d8c00f15 	stw	r3,60(sp)
    6f88:	003edc06 	br	6afc <__alt_mem_epcs_flash_controller+0xfdffdafc>
    6f8c:	8005883a 	mov	r2,r16
    6f90:	dfc01a17 	ldw	ra,104(sp)
    6f94:	df001917 	ldw	fp,100(sp)
    6f98:	ddc01817 	ldw	r23,96(sp)
    6f9c:	dd801717 	ldw	r22,92(sp)
    6fa0:	dd401617 	ldw	r21,88(sp)
    6fa4:	dd001517 	ldw	r20,84(sp)
    6fa8:	dcc01417 	ldw	r19,80(sp)
    6fac:	dc801317 	ldw	r18,76(sp)
    6fb0:	dc401217 	ldw	r17,72(sp)
    6fb4:	dc001117 	ldw	r16,68(sp)
    6fb8:	dec01b04 	addi	sp,sp,108
    6fbc:	f800283a 	ret

00006fc0 <__vfprintf_internal>:
    6fc0:	00800074 	movhi	r2,1
    6fc4:	108af504 	addi	r2,r2,11220
    6fc8:	300f883a 	mov	r7,r6
    6fcc:	280d883a 	mov	r6,r5
    6fd0:	200b883a 	mov	r5,r4
    6fd4:	11000017 	ldw	r4,0(r2)
    6fd8:	0006a941 	jmpi	6a94 <___vfprintf_internal_r>

00006fdc <__sfvwrite_small_dev>:
    6fdc:	2880000b 	ldhu	r2,0(r5)
    6fe0:	1080020c 	andi	r2,r2,8
    6fe4:	10002126 	beq	r2,zero,706c <__sfvwrite_small_dev+0x90>
    6fe8:	2880008f 	ldh	r2,2(r5)
    6fec:	defffa04 	addi	sp,sp,-24
    6ff0:	dc000015 	stw	r16,0(sp)
    6ff4:	dfc00515 	stw	ra,20(sp)
    6ff8:	dd000415 	stw	r20,16(sp)
    6ffc:	dcc00315 	stw	r19,12(sp)
    7000:	dc800215 	stw	r18,8(sp)
    7004:	dc400115 	stw	r17,4(sp)
    7008:	2821883a 	mov	r16,r5
    700c:	10001216 	blt	r2,zero,7058 <__sfvwrite_small_dev+0x7c>
    7010:	2027883a 	mov	r19,r4
    7014:	3025883a 	mov	r18,r6
    7018:	3823883a 	mov	r17,r7
    701c:	05010004 	movi	r20,1024
    7020:	04400b0e 	bge	zero,r17,7050 <__sfvwrite_small_dev+0x74>
    7024:	880f883a 	mov	r7,r17
    7028:	a440010e 	bge	r20,r17,7030 <__sfvwrite_small_dev+0x54>
    702c:	01c10004 	movi	r7,1024
    7030:	8140008f 	ldh	r5,2(r16)
    7034:	900d883a 	mov	r6,r18
    7038:	9809883a 	mov	r4,r19
    703c:	00071940 	call	7194 <_write_r>
    7040:	0080050e 	bge	zero,r2,7058 <__sfvwrite_small_dev+0x7c>
    7044:	88a3c83a 	sub	r17,r17,r2
    7048:	90a5883a 	add	r18,r18,r2
    704c:	003ff406 	br	7020 <__alt_mem_epcs_flash_controller+0xfdffe020>
    7050:	0005883a 	mov	r2,zero
    7054:	00000706 	br	7074 <__sfvwrite_small_dev+0x98>
    7058:	8080000b 	ldhu	r2,0(r16)
    705c:	10801014 	ori	r2,r2,64
    7060:	8080000d 	sth	r2,0(r16)
    7064:	00bfffc4 	movi	r2,-1
    7068:	00000206 	br	7074 <__sfvwrite_small_dev+0x98>
    706c:	00bfffc4 	movi	r2,-1
    7070:	f800283a 	ret
    7074:	dfc00517 	ldw	ra,20(sp)
    7078:	dd000417 	ldw	r20,16(sp)
    707c:	dcc00317 	ldw	r19,12(sp)
    7080:	dc800217 	ldw	r18,8(sp)
    7084:	dc400117 	ldw	r17,4(sp)
    7088:	dc000017 	ldw	r16,0(sp)
    708c:	dec00604 	addi	sp,sp,24
    7090:	f800283a 	ret

00007094 <_gettimeofday_r>:
    7094:	defffd04 	addi	sp,sp,-12
    7098:	dc000015 	stw	r16,0(sp)
    709c:	04000074 	movhi	r16,1
    70a0:	dc400115 	stw	r17,4(sp)
    70a4:	84100404 	addi	r16,r16,16400
    70a8:	2023883a 	mov	r17,r4
    70ac:	2809883a 	mov	r4,r5
    70b0:	300b883a 	mov	r5,r6
    70b4:	dfc00215 	stw	ra,8(sp)
    70b8:	80000015 	stw	zero,0(r16)
    70bc:	00074ac0 	call	74ac <gettimeofday>
    70c0:	00ffffc4 	movi	r3,-1
    70c4:	10c0031e 	bne	r2,r3,70d4 <_gettimeofday_r+0x40>
    70c8:	80c00017 	ldw	r3,0(r16)
    70cc:	18000126 	beq	r3,zero,70d4 <_gettimeofday_r+0x40>
    70d0:	88c00015 	stw	r3,0(r17)
    70d4:	dfc00217 	ldw	ra,8(sp)
    70d8:	dc400117 	ldw	r17,4(sp)
    70dc:	dc000017 	ldw	r16,0(sp)
    70e0:	dec00304 	addi	sp,sp,12
    70e4:	f800283a 	ret

000070e8 <putc>:
    70e8:	defffd04 	addi	sp,sp,-12
    70ec:	00800034 	movhi	r2,0
    70f0:	dc000115 	stw	r16,4(sp)
    70f4:	dfc00215 	stw	ra,8(sp)
    70f8:	109bf704 	addi	r2,r2,28636
    70fc:	28800115 	stw	r2,4(r5)
    7100:	00800074 	movhi	r2,1
    7104:	108af504 	addi	r2,r2,11220
    7108:	d9000005 	stb	r4,0(sp)
    710c:	2021883a 	mov	r16,r4
    7110:	11000017 	ldw	r4,0(r2)
    7114:	01c00044 	movi	r7,1
    7118:	d80d883a 	mov	r6,sp
    711c:	0006fdc0 	call	6fdc <__sfvwrite_small_dev>
    7120:	00ffffc4 	movi	r3,-1
    7124:	10c00126 	beq	r2,r3,712c <putc+0x44>
    7128:	8005883a 	mov	r2,r16
    712c:	dfc00217 	ldw	ra,8(sp)
    7130:	dc000117 	ldw	r16,4(sp)
    7134:	dec00304 	addi	sp,sp,12
    7138:	f800283a 	ret

0000713c <_putc_r>:
    713c:	defffd04 	addi	sp,sp,-12
    7140:	00800034 	movhi	r2,0
    7144:	dc000115 	stw	r16,4(sp)
    7148:	dfc00215 	stw	ra,8(sp)
    714c:	109bf704 	addi	r2,r2,28636
    7150:	30800115 	stw	r2,4(r6)
    7154:	00800074 	movhi	r2,1
    7158:	108af504 	addi	r2,r2,11220
    715c:	11000017 	ldw	r4,0(r2)
    7160:	2821883a 	mov	r16,r5
    7164:	01c00044 	movi	r7,1
    7168:	300b883a 	mov	r5,r6
    716c:	d80d883a 	mov	r6,sp
    7170:	dc000005 	stb	r16,0(sp)
    7174:	0006fdc0 	call	6fdc <__sfvwrite_small_dev>
    7178:	00ffffc4 	movi	r3,-1
    717c:	10c00126 	beq	r2,r3,7184 <_putc_r+0x48>
    7180:	8005883a 	mov	r2,r16
    7184:	dfc00217 	ldw	ra,8(sp)
    7188:	dc000117 	ldw	r16,4(sp)
    718c:	dec00304 	addi	sp,sp,12
    7190:	f800283a 	ret

00007194 <_write_r>:
    7194:	defffd04 	addi	sp,sp,-12
    7198:	dc000015 	stw	r16,0(sp)
    719c:	04000074 	movhi	r16,1
    71a0:	dc400115 	stw	r17,4(sp)
    71a4:	84100404 	addi	r16,r16,16400
    71a8:	2023883a 	mov	r17,r4
    71ac:	2809883a 	mov	r4,r5
    71b0:	300b883a 	mov	r5,r6
    71b4:	380d883a 	mov	r6,r7
    71b8:	dfc00215 	stw	ra,8(sp)
    71bc:	80000015 	stw	zero,0(r16)
    71c0:	0007a980 	call	7a98 <write>
    71c4:	00ffffc4 	movi	r3,-1
    71c8:	10c0031e 	bne	r2,r3,71d8 <_write_r+0x44>
    71cc:	80c00017 	ldw	r3,0(r16)
    71d0:	18000126 	beq	r3,zero,71d8 <_write_r+0x44>
    71d4:	88c00015 	stw	r3,0(r17)
    71d8:	dfc00217 	ldw	ra,8(sp)
    71dc:	dc400117 	ldw	r17,4(sp)
    71e0:	dc000017 	ldw	r16,0(sp)
    71e4:	dec00304 	addi	sp,sp,12
    71e8:	f800283a 	ret

000071ec <__muldi3>:
    71ec:	defff604 	addi	sp,sp,-40
    71f0:	dd800615 	stw	r22,24(sp)
    71f4:	dd400515 	stw	r21,20(sp)
    71f8:	dc400115 	stw	r17,4(sp)
    71fc:	357fffcc 	andi	r21,r6,65535
    7200:	2022d43a 	srli	r17,r4,16
    7204:	25bfffcc 	andi	r22,r4,65535
    7208:	dcc00315 	stw	r19,12(sp)
    720c:	dc800215 	stw	r18,8(sp)
    7210:	2027883a 	mov	r19,r4
    7214:	2825883a 	mov	r18,r5
    7218:	b009883a 	mov	r4,r22
    721c:	a80b883a 	mov	r5,r21
    7220:	dfc00915 	stw	ra,36(sp)
    7224:	df000815 	stw	fp,32(sp)
    7228:	ddc00715 	stw	r23,28(sp)
    722c:	3839883a 	mov	fp,r7
    7230:	302ed43a 	srli	r23,r6,16
    7234:	dd000415 	stw	r20,16(sp)
    7238:	dc000015 	stw	r16,0(sp)
    723c:	3029883a 	mov	r20,r6
    7240:	00064800 	call	6480 <__mulsi3>
    7244:	a80b883a 	mov	r5,r21
    7248:	8809883a 	mov	r4,r17
    724c:	1021883a 	mov	r16,r2
    7250:	00064800 	call	6480 <__mulsi3>
    7254:	8809883a 	mov	r4,r17
    7258:	b80b883a 	mov	r5,r23
    725c:	102b883a 	mov	r21,r2
    7260:	00064800 	call	6480 <__mulsi3>
    7264:	b80b883a 	mov	r5,r23
    7268:	b009883a 	mov	r4,r22
    726c:	1023883a 	mov	r17,r2
    7270:	00064800 	call	6480 <__mulsi3>
    7274:	8006d43a 	srli	r3,r16,16
    7278:	1545883a 	add	r2,r2,r21
    727c:	1885883a 	add	r2,r3,r2
    7280:	1540022e 	bgeu	r2,r21,728c <__muldi3+0xa0>
    7284:	00c00074 	movhi	r3,1
    7288:	88e3883a 	add	r17,r17,r3
    728c:	1006d43a 	srli	r3,r2,16
    7290:	1004943a 	slli	r2,r2,16
    7294:	e00b883a 	mov	r5,fp
    7298:	9809883a 	mov	r4,r19
    729c:	843fffcc 	andi	r16,r16,65535
    72a0:	1c63883a 	add	r17,r3,r17
    72a4:	1421883a 	add	r16,r2,r16
    72a8:	00064800 	call	6480 <__mulsi3>
    72ac:	900b883a 	mov	r5,r18
    72b0:	a009883a 	mov	r4,r20
    72b4:	1027883a 	mov	r19,r2
    72b8:	00064800 	call	6480 <__mulsi3>
    72bc:	9885883a 	add	r2,r19,r2
    72c0:	1447883a 	add	r3,r2,r17
    72c4:	8005883a 	mov	r2,r16
    72c8:	dfc00917 	ldw	ra,36(sp)
    72cc:	df000817 	ldw	fp,32(sp)
    72d0:	ddc00717 	ldw	r23,28(sp)
    72d4:	dd800617 	ldw	r22,24(sp)
    72d8:	dd400517 	ldw	r21,20(sp)
    72dc:	dd000417 	ldw	r20,16(sp)
    72e0:	dcc00317 	ldw	r19,12(sp)
    72e4:	dc800217 	ldw	r18,8(sp)
    72e8:	dc400117 	ldw	r17,4(sp)
    72ec:	dc000017 	ldw	r16,0(sp)
    72f0:	dec00a04 	addi	sp,sp,40
    72f4:	f800283a 	ret

000072f8 <__divsi3>:
    72f8:	20001b16 	blt	r4,zero,7368 <__divsi3+0x70>
    72fc:	000f883a 	mov	r7,zero
    7300:	28001616 	blt	r5,zero,735c <__divsi3+0x64>
    7304:	200d883a 	mov	r6,r4
    7308:	29001a2e 	bgeu	r5,r4,7374 <__divsi3+0x7c>
    730c:	00800804 	movi	r2,32
    7310:	00c00044 	movi	r3,1
    7314:	00000106 	br	731c <__divsi3+0x24>
    7318:	10000d26 	beq	r2,zero,7350 <__divsi3+0x58>
    731c:	294b883a 	add	r5,r5,r5
    7320:	10bfffc4 	addi	r2,r2,-1
    7324:	18c7883a 	add	r3,r3,r3
    7328:	293ffb36 	bltu	r5,r4,7318 <__alt_mem_epcs_flash_controller+0xfdffe318>
    732c:	0005883a 	mov	r2,zero
    7330:	18000726 	beq	r3,zero,7350 <__divsi3+0x58>
    7334:	0005883a 	mov	r2,zero
    7338:	31400236 	bltu	r6,r5,7344 <__divsi3+0x4c>
    733c:	314dc83a 	sub	r6,r6,r5
    7340:	10c4b03a 	or	r2,r2,r3
    7344:	1806d07a 	srli	r3,r3,1
    7348:	280ad07a 	srli	r5,r5,1
    734c:	183ffa1e 	bne	r3,zero,7338 <__alt_mem_epcs_flash_controller+0xfdffe338>
    7350:	38000126 	beq	r7,zero,7358 <__divsi3+0x60>
    7354:	0085c83a 	sub	r2,zero,r2
    7358:	f800283a 	ret
    735c:	014bc83a 	sub	r5,zero,r5
    7360:	39c0005c 	xori	r7,r7,1
    7364:	003fe706 	br	7304 <__alt_mem_epcs_flash_controller+0xfdffe304>
    7368:	0109c83a 	sub	r4,zero,r4
    736c:	01c00044 	movi	r7,1
    7370:	003fe306 	br	7300 <__alt_mem_epcs_flash_controller+0xfdffe300>
    7374:	00c00044 	movi	r3,1
    7378:	003fee06 	br	7334 <__alt_mem_epcs_flash_controller+0xfdffe334>

0000737c <__modsi3>:
    737c:	20001716 	blt	r4,zero,73dc <__modsi3+0x60>
    7380:	000f883a 	mov	r7,zero
    7384:	2005883a 	mov	r2,r4
    7388:	28001216 	blt	r5,zero,73d4 <__modsi3+0x58>
    738c:	2900162e 	bgeu	r5,r4,73e8 <__modsi3+0x6c>
    7390:	01800804 	movi	r6,32
    7394:	00c00044 	movi	r3,1
    7398:	00000106 	br	73a0 <__modsi3+0x24>
    739c:	30000a26 	beq	r6,zero,73c8 <__modsi3+0x4c>
    73a0:	294b883a 	add	r5,r5,r5
    73a4:	31bfffc4 	addi	r6,r6,-1
    73a8:	18c7883a 	add	r3,r3,r3
    73ac:	293ffb36 	bltu	r5,r4,739c <__alt_mem_epcs_flash_controller+0xfdffe39c>
    73b0:	18000526 	beq	r3,zero,73c8 <__modsi3+0x4c>
    73b4:	1806d07a 	srli	r3,r3,1
    73b8:	11400136 	bltu	r2,r5,73c0 <__modsi3+0x44>
    73bc:	1145c83a 	sub	r2,r2,r5
    73c0:	280ad07a 	srli	r5,r5,1
    73c4:	183ffb1e 	bne	r3,zero,73b4 <__alt_mem_epcs_flash_controller+0xfdffe3b4>
    73c8:	38000126 	beq	r7,zero,73d0 <__modsi3+0x54>
    73cc:	0085c83a 	sub	r2,zero,r2
    73d0:	f800283a 	ret
    73d4:	014bc83a 	sub	r5,zero,r5
    73d8:	003fec06 	br	738c <__alt_mem_epcs_flash_controller+0xfdffe38c>
    73dc:	0109c83a 	sub	r4,zero,r4
    73e0:	01c00044 	movi	r7,1
    73e4:	003fe706 	br	7384 <__alt_mem_epcs_flash_controller+0xfdffe384>
    73e8:	00c00044 	movi	r3,1
    73ec:	003ff106 	br	73b4 <__alt_mem_epcs_flash_controller+0xfdffe3b4>

000073f0 <__udivsi3>:
    73f0:	200d883a 	mov	r6,r4
    73f4:	2900152e 	bgeu	r5,r4,744c <__udivsi3+0x5c>
    73f8:	28001416 	blt	r5,zero,744c <__udivsi3+0x5c>
    73fc:	00800804 	movi	r2,32
    7400:	00c00044 	movi	r3,1
    7404:	00000206 	br	7410 <__udivsi3+0x20>
    7408:	10000e26 	beq	r2,zero,7444 <__udivsi3+0x54>
    740c:	28000516 	blt	r5,zero,7424 <__udivsi3+0x34>
    7410:	294b883a 	add	r5,r5,r5
    7414:	10bfffc4 	addi	r2,r2,-1
    7418:	18c7883a 	add	r3,r3,r3
    741c:	293ffa36 	bltu	r5,r4,7408 <__alt_mem_epcs_flash_controller+0xfdffe408>
    7420:	18000826 	beq	r3,zero,7444 <__udivsi3+0x54>
    7424:	0005883a 	mov	r2,zero
    7428:	31400236 	bltu	r6,r5,7434 <__udivsi3+0x44>
    742c:	314dc83a 	sub	r6,r6,r5
    7430:	10c4b03a 	or	r2,r2,r3
    7434:	1806d07a 	srli	r3,r3,1
    7438:	280ad07a 	srli	r5,r5,1
    743c:	183ffa1e 	bne	r3,zero,7428 <__alt_mem_epcs_flash_controller+0xfdffe428>
    7440:	f800283a 	ret
    7444:	0005883a 	mov	r2,zero
    7448:	f800283a 	ret
    744c:	00c00044 	movi	r3,1
    7450:	003ff406 	br	7424 <__alt_mem_epcs_flash_controller+0xfdffe424>

00007454 <__umodsi3>:
    7454:	2005883a 	mov	r2,r4
    7458:	2900122e 	bgeu	r5,r4,74a4 <__umodsi3+0x50>
    745c:	28001116 	blt	r5,zero,74a4 <__umodsi3+0x50>
    7460:	01800804 	movi	r6,32
    7464:	00c00044 	movi	r3,1
    7468:	00000206 	br	7474 <__umodsi3+0x20>
    746c:	30000c26 	beq	r6,zero,74a0 <__umodsi3+0x4c>
    7470:	28000516 	blt	r5,zero,7488 <__umodsi3+0x34>
    7474:	294b883a 	add	r5,r5,r5
    7478:	31bfffc4 	addi	r6,r6,-1
    747c:	18c7883a 	add	r3,r3,r3
    7480:	293ffa36 	bltu	r5,r4,746c <__alt_mem_epcs_flash_controller+0xfdffe46c>
    7484:	18000626 	beq	r3,zero,74a0 <__umodsi3+0x4c>
    7488:	1806d07a 	srli	r3,r3,1
    748c:	11400136 	bltu	r2,r5,7494 <__umodsi3+0x40>
    7490:	1145c83a 	sub	r2,r2,r5
    7494:	280ad07a 	srli	r5,r5,1
    7498:	183ffb1e 	bne	r3,zero,7488 <__alt_mem_epcs_flash_controller+0xfdffe488>
    749c:	f800283a 	ret
    74a0:	f800283a 	ret
    74a4:	00c00044 	movi	r3,1
    74a8:	003ff706 	br	7488 <__alt_mem_epcs_flash_controller+0xfdffe488>

000074ac <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    74ac:	defff404 	addi	sp,sp,-48
    74b0:	dfc00b15 	stw	ra,44(sp)
    74b4:	df000a15 	stw	fp,40(sp)
    74b8:	dd000915 	stw	r20,36(sp)
    74bc:	dcc00815 	stw	r19,32(sp)
    74c0:	dc800715 	stw	r18,28(sp)
    74c4:	dc400615 	stw	r17,24(sp)
    74c8:	dc000515 	stw	r16,20(sp)
    74cc:	df000a04 	addi	fp,sp,40
    74d0:	e13ff915 	stw	r4,-28(fp)
    74d4:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    74d8:	e0bffa17 	ldw	r2,-24(fp)
    74dc:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    74e0:	d0a51a17 	ldw	r2,-27544(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    74e4:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    74e8:	d0a51917 	ldw	r2,-27548(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
    74ec:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    74f0:	e0bff817 	ldw	r2,-32(fp)
    74f4:	10005f26 	beq	r2,zero,7674 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    74f8:	d0a51417 	ldw	r2,-27568(gp)
    74fc:	1029883a 	mov	r20,r2
    7500:	e17ff817 	ldw	r5,-32(fp)
    7504:	e13ff717 	ldw	r4,-36(fp)
    7508:	00073f00 	call	73f0 <__udivsi3>
    750c:	a085883a 	add	r2,r20,r2
    7510:	1007883a 	mov	r3,r2
    7514:	e0bff917 	ldw	r2,-28(fp)
    7518:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    751c:	d0a51517 	ldw	r2,-27564(gp)
    7520:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    7524:	e0bff717 	ldw	r2,-36(fp)
    7528:	1021883a 	mov	r16,r2
    752c:	0023883a 	mov	r17,zero
    7530:	e17ff817 	ldw	r5,-32(fp)
    7534:	010003f4 	movhi	r4,15
    7538:	21109004 	addi	r4,r4,16960
    753c:	00073f00 	call	73f0 <__udivsi3>
    7540:	1025883a 	mov	r18,r2
    7544:	0027883a 	mov	r19,zero
    7548:	900d883a 	mov	r6,r18
    754c:	980f883a 	mov	r7,r19
    7550:	8009883a 	mov	r4,r16
    7554:	880b883a 	mov	r5,r17
    7558:	00071ec0 	call	71ec <__muldi3>
    755c:	1009883a 	mov	r4,r2
    7560:	180b883a 	mov	r5,r3
    7564:	2005883a 	mov	r2,r4
    7568:	2807883a 	mov	r3,r5
    756c:	018003f4 	movhi	r6,15
    7570:	31909004 	addi	r6,r6,16960
    7574:	000f883a 	mov	r7,zero
    7578:	1009883a 	mov	r4,r2
    757c:	180b883a 	mov	r5,r3
    7580:	000ac700 	call	ac70 <__umoddi3>
    7584:	1009883a 	mov	r4,r2
    7588:	180b883a 	mov	r5,r3
    758c:	2005883a 	mov	r2,r4
    7590:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    7594:	a085883a 	add	r2,r20,r2
    7598:	1007883a 	mov	r3,r2
    759c:	e0bff917 	ldw	r2,-28(fp)
    75a0:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    75a4:	00001406 	br	75f8 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
    75a8:	e0bff917 	ldw	r2,-28(fp)
    75ac:	10800017 	ldw	r2,0(r2)
    75b0:	00800516 	blt	zero,r2,75c8 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
    75b4:	e0bff917 	ldw	r2,-28(fp)
    75b8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
    75bc:	e0bff917 	ldw	r2,-28(fp)
    75c0:	10000115 	stw	zero,4(r2)
          break;
    75c4:	00000f06 	br	7604 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
    75c8:	e0bff917 	ldw	r2,-28(fp)
    75cc:	10800017 	ldw	r2,0(r2)
    75d0:	10ffffc4 	addi	r3,r2,-1
    75d4:	e0bff917 	ldw	r2,-28(fp)
    75d8:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
    75dc:	e0bff917 	ldw	r2,-28(fp)
    75e0:	10c00117 	ldw	r3,4(r2)
    75e4:	008003f4 	movhi	r2,15
    75e8:	10909004 	addi	r2,r2,16960
    75ec:	1887883a 	add	r3,r3,r2
    75f0:	e0bff917 	ldw	r2,-28(fp)
    75f4:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    75f8:	e0bff917 	ldw	r2,-28(fp)
    75fc:	10800117 	ldw	r2,4(r2)
    7600:	103fe916 	blt	r2,zero,75a8 <__alt_mem_epcs_flash_controller+0xfdffe5a8>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    7604:	00000c06 	br	7638 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
    7608:	e0bff917 	ldw	r2,-28(fp)
    760c:	10800017 	ldw	r2,0(r2)
    7610:	10c00044 	addi	r3,r2,1
    7614:	e0bff917 	ldw	r2,-28(fp)
    7618:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
    761c:	e0bff917 	ldw	r2,-28(fp)
    7620:	10c00117 	ldw	r3,4(r2)
    7624:	00bffc74 	movhi	r2,65521
    7628:	10af7004 	addi	r2,r2,-16960
    762c:	1887883a 	add	r3,r3,r2
    7630:	e0bff917 	ldw	r2,-28(fp)
    7634:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    7638:	e0bff917 	ldw	r2,-28(fp)
    763c:	10c00117 	ldw	r3,4(r2)
    7640:	008003f4 	movhi	r2,15
    7644:	10908fc4 	addi	r2,r2,16959
    7648:	10ffef16 	blt	r2,r3,7608 <__alt_mem_epcs_flash_controller+0xfdffe608>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    764c:	e0bff617 	ldw	r2,-40(fp)
    7650:	10000626 	beq	r2,zero,766c <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    7654:	d0e51217 	ldw	r3,-27576(gp)
    7658:	e0bff617 	ldw	r2,-40(fp)
    765c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    7660:	d0e51317 	ldw	r3,-27572(gp)
    7664:	e0bff617 	ldw	r2,-40(fp)
    7668:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    766c:	0005883a 	mov	r2,zero
    7670:	00000106 	br	7678 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
    7674:	00bfde84 	movi	r2,-134
}
    7678:	e6fffb04 	addi	sp,fp,-20
    767c:	dfc00617 	ldw	ra,24(sp)
    7680:	df000517 	ldw	fp,20(sp)
    7684:	dd000417 	ldw	r20,16(sp)
    7688:	dcc00317 	ldw	r19,12(sp)
    768c:	dc800217 	ldw	r18,8(sp)
    7690:	dc400117 	ldw	r17,4(sp)
    7694:	dc000017 	ldw	r16,0(sp)
    7698:	dec00704 	addi	sp,sp,28
    769c:	f800283a 	ret

000076a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    76a0:	defffc04 	addi	sp,sp,-16
    76a4:	df000315 	stw	fp,12(sp)
    76a8:	df000304 	addi	fp,sp,12
    76ac:	e13ffd15 	stw	r4,-12(fp)
    76b0:	e17ffe15 	stw	r5,-8(fp)
    76b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    76b8:	e0fffe17 	ldw	r3,-8(fp)
    76bc:	e0bffd17 	ldw	r2,-12(fp)
    76c0:	18800c26 	beq	r3,r2,76f4 <alt_load_section+0x54>
  {
    while( to != end )
    76c4:	00000806 	br	76e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    76c8:	e0bffe17 	ldw	r2,-8(fp)
    76cc:	10c00104 	addi	r3,r2,4
    76d0:	e0fffe15 	stw	r3,-8(fp)
    76d4:	e0fffd17 	ldw	r3,-12(fp)
    76d8:	19000104 	addi	r4,r3,4
    76dc:	e13ffd15 	stw	r4,-12(fp)
    76e0:	18c00017 	ldw	r3,0(r3)
    76e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    76e8:	e0fffe17 	ldw	r3,-8(fp)
    76ec:	e0bfff17 	ldw	r2,-4(fp)
    76f0:	18bff51e 	bne	r3,r2,76c8 <__alt_mem_epcs_flash_controller+0xfdffe6c8>
    {
      *to++ = *from++;
    }
  }
}
    76f4:	0001883a 	nop
    76f8:	e037883a 	mov	sp,fp
    76fc:	df000017 	ldw	fp,0(sp)
    7700:	dec00104 	addi	sp,sp,4
    7704:	f800283a 	ret

00007708 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    7708:	defffe04 	addi	sp,sp,-8
    770c:	dfc00115 	stw	ra,4(sp)
    7710:	df000015 	stw	fp,0(sp)
    7714:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    7718:	01800074 	movhi	r6,1
    771c:	318b0204 	addi	r6,r6,11272
    7720:	01400074 	movhi	r5,1
    7724:	29460604 	addi	r5,r5,6168
    7728:	01000074 	movhi	r4,1
    772c:	210b0204 	addi	r4,r4,11272
    7730:	00076a00 	call	76a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    7734:	01800034 	movhi	r6,0
    7738:	31808c04 	addi	r6,r6,560
    773c:	01400034 	movhi	r5,0
    7740:	29400804 	addi	r5,r5,32
    7744:	01000034 	movhi	r4,0
    7748:	21000804 	addi	r4,r4,32
    774c:	00076a00 	call	76a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    7750:	01800074 	movhi	r6,1
    7754:	31860604 	addi	r6,r6,6168
    7758:	01400074 	movhi	r5,1
    775c:	296c9a04 	addi	r5,r5,-19864
    7760:	01000074 	movhi	r4,1
    7764:	212c9a04 	addi	r4,r4,-19864
    7768:	00076a00 	call	76a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    776c:	0009a3c0 	call	9a3c <alt_dcache_flush_all>
  alt_icache_flush_all();
    7770:	0009ce40 	call	9ce4 <alt_icache_flush_all>
}
    7774:	0001883a 	nop
    7778:	e037883a 	mov	sp,fp
    777c:	dfc00117 	ldw	ra,4(sp)
    7780:	df000017 	ldw	fp,0(sp)
    7784:	dec00204 	addi	sp,sp,8
    7788:	f800283a 	ret

0000778c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    778c:	defffd04 	addi	sp,sp,-12
    7790:	dfc00215 	stw	ra,8(sp)
    7794:	df000115 	stw	fp,4(sp)
    7798:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    779c:	0009883a 	mov	r4,zero
    77a0:	0007bcc0 	call	7bcc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    77a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    77a8:	0007c040 	call	7c04 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    77ac:	01800074 	movhi	r6,1
    77b0:	3185b404 	addi	r6,r6,5840
    77b4:	01400074 	movhi	r5,1
    77b8:	2945b404 	addi	r5,r5,5840
    77bc:	01000074 	movhi	r4,1
    77c0:	2105b404 	addi	r4,r4,5840
    77c4:	000a0880 	call	a088 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    77c8:	0009b680 	call	9b68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    77cc:	01000074 	movhi	r4,1
    77d0:	2126f204 	addi	r4,r4,-25656
    77d4:	000a9240 	call	a924 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    77d8:	d0a51617 	ldw	r2,-27560(gp)
    77dc:	d0e51717 	ldw	r3,-27556(gp)
    77e0:	d1251817 	ldw	r4,-27552(gp)
    77e4:	200d883a 	mov	r6,r4
    77e8:	180b883a 	mov	r5,r3
    77ec:	1009883a 	mov	r4,r2
    77f0:	00063500 	call	6350 <main>
    77f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    77f8:	01000044 	movi	r4,1
    77fc:	00099640 	call	9964 <close>
  exit (result);
    7800:	e13fff17 	ldw	r4,-4(fp)
    7804:	000a9380 	call	a938 <exit>

00007808 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    7808:	defff904 	addi	sp,sp,-28
    780c:	df000615 	stw	fp,24(sp)
    7810:	df000604 	addi	fp,sp,24
    7814:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7818:	0005303a 	rdctl	r2,status
    781c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7820:	e0fffe17 	ldw	r3,-8(fp)
    7824:	00bfff84 	movi	r2,-2
    7828:	1884703a 	and	r2,r3,r2
    782c:	1001703a 	wrctl	status,r2
  
  return context;
    7830:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    7834:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    7838:	d0a00317 	ldw	r2,-32756(gp)
    783c:	10c000c4 	addi	r3,r2,3
    7840:	00bfff04 	movi	r2,-4
    7844:	1884703a 	and	r2,r3,r2
    7848:	d0a00315 	stw	r2,-32756(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    784c:	d0e00317 	ldw	r3,-32756(gp)
    7850:	e0bfff17 	ldw	r2,-4(fp)
    7854:	1887883a 	add	r3,r3,r2
    7858:	00808034 	movhi	r2,512
    785c:	10800004 	addi	r2,r2,0
    7860:	10c0062e 	bgeu	r2,r3,787c <sbrk+0x74>
    7864:	e0bffb17 	ldw	r2,-20(fp)
    7868:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    786c:	e0bffa17 	ldw	r2,-24(fp)
    7870:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    7874:	00bfffc4 	movi	r2,-1
    7878:	00000b06 	br	78a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    787c:	d0a00317 	ldw	r2,-32756(gp)
    7880:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    7884:	d0e00317 	ldw	r3,-32756(gp)
    7888:	e0bfff17 	ldw	r2,-4(fp)
    788c:	1885883a 	add	r2,r3,r2
    7890:	d0a00315 	stw	r2,-32756(gp)
    7894:	e0bffb17 	ldw	r2,-20(fp)
    7898:	e0bffc15 	stw	r2,-16(fp)
    789c:	e0bffc17 	ldw	r2,-16(fp)
    78a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    78a4:	e0bffd17 	ldw	r2,-12(fp)
} 
    78a8:	e037883a 	mov	sp,fp
    78ac:	df000017 	ldw	fp,0(sp)
    78b0:	dec00104 	addi	sp,sp,4
    78b4:	f800283a 	ret

000078b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    78b8:	defffa04 	addi	sp,sp,-24
    78bc:	df000515 	stw	fp,20(sp)
    78c0:	df000504 	addi	fp,sp,20
    78c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    78c8:	0005303a 	rdctl	r2,status
    78cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    78d0:	e0fffc17 	ldw	r3,-16(fp)
    78d4:	00bfff84 	movi	r2,-2
    78d8:	1884703a 	and	r2,r3,r2
    78dc:	1001703a 	wrctl	status,r2
  
  return context;
    78e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    78e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    78e8:	e0bfff17 	ldw	r2,-4(fp)
    78ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    78f0:	e0bffd17 	ldw	r2,-12(fp)
    78f4:	10800017 	ldw	r2,0(r2)
    78f8:	e0fffd17 	ldw	r3,-12(fp)
    78fc:	18c00117 	ldw	r3,4(r3)
    7900:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    7904:	e0bffd17 	ldw	r2,-12(fp)
    7908:	10800117 	ldw	r2,4(r2)
    790c:	e0fffd17 	ldw	r3,-12(fp)
    7910:	18c00017 	ldw	r3,0(r3)
    7914:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    7918:	e0bffd17 	ldw	r2,-12(fp)
    791c:	e0fffd17 	ldw	r3,-12(fp)
    7920:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    7924:	e0bffd17 	ldw	r2,-12(fp)
    7928:	e0fffd17 	ldw	r3,-12(fp)
    792c:	10c00015 	stw	r3,0(r2)
    7930:	e0bffb17 	ldw	r2,-20(fp)
    7934:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7938:	e0bffe17 	ldw	r2,-8(fp)
    793c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    7940:	0001883a 	nop
    7944:	e037883a 	mov	sp,fp
    7948:	df000017 	ldw	fp,0(sp)
    794c:	dec00104 	addi	sp,sp,4
    7950:	f800283a 	ret

00007954 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    7954:	defffb04 	addi	sp,sp,-20
    7958:	dfc00415 	stw	ra,16(sp)
    795c:	df000315 	stw	fp,12(sp)
    7960:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    7964:	d0a00417 	ldw	r2,-32752(gp)
    7968:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    796c:	d0a51a17 	ldw	r2,-27544(gp)
    7970:	10800044 	addi	r2,r2,1
    7974:	d0a51a15 	stw	r2,-27544(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    7978:	00002e06 	br	7a34 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    797c:	e0bffd17 	ldw	r2,-12(fp)
    7980:	10800017 	ldw	r2,0(r2)
    7984:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    7988:	e0bffd17 	ldw	r2,-12(fp)
    798c:	10800403 	ldbu	r2,16(r2)
    7990:	10803fcc 	andi	r2,r2,255
    7994:	10000426 	beq	r2,zero,79a8 <alt_tick+0x54>
    7998:	d0a51a17 	ldw	r2,-27544(gp)
    799c:	1000021e 	bne	r2,zero,79a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    79a0:	e0bffd17 	ldw	r2,-12(fp)
    79a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    79a8:	e0bffd17 	ldw	r2,-12(fp)
    79ac:	10800217 	ldw	r2,8(r2)
    79b0:	d0e51a17 	ldw	r3,-27544(gp)
    79b4:	18801d36 	bltu	r3,r2,7a2c <alt_tick+0xd8>
    79b8:	e0bffd17 	ldw	r2,-12(fp)
    79bc:	10800403 	ldbu	r2,16(r2)
    79c0:	10803fcc 	andi	r2,r2,255
    79c4:	1000191e 	bne	r2,zero,7a2c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    79c8:	e0bffd17 	ldw	r2,-12(fp)
    79cc:	10800317 	ldw	r2,12(r2)
    79d0:	e0fffd17 	ldw	r3,-12(fp)
    79d4:	18c00517 	ldw	r3,20(r3)
    79d8:	1809883a 	mov	r4,r3
    79dc:	103ee83a 	callr	r2
    79e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    79e4:	e0bfff17 	ldw	r2,-4(fp)
    79e8:	1000031e 	bne	r2,zero,79f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    79ec:	e13ffd17 	ldw	r4,-12(fp)
    79f0:	00078b80 	call	78b8 <alt_alarm_stop>
    79f4:	00000d06 	br	7a2c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    79f8:	e0bffd17 	ldw	r2,-12(fp)
    79fc:	10c00217 	ldw	r3,8(r2)
    7a00:	e0bfff17 	ldw	r2,-4(fp)
    7a04:	1887883a 	add	r3,r3,r2
    7a08:	e0bffd17 	ldw	r2,-12(fp)
    7a0c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    7a10:	e0bffd17 	ldw	r2,-12(fp)
    7a14:	10c00217 	ldw	r3,8(r2)
    7a18:	d0a51a17 	ldw	r2,-27544(gp)
    7a1c:	1880032e 	bgeu	r3,r2,7a2c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    7a20:	e0bffd17 	ldw	r2,-12(fp)
    7a24:	00c00044 	movi	r3,1
    7a28:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    7a2c:	e0bffe17 	ldw	r2,-8(fp)
    7a30:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    7a34:	e0fffd17 	ldw	r3,-12(fp)
    7a38:	d0a00404 	addi	r2,gp,-32752
    7a3c:	18bfcf1e 	bne	r3,r2,797c <__alt_mem_epcs_flash_controller+0xfdffe97c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    7a40:	0001883a 	nop
}
    7a44:	0001883a 	nop
    7a48:	e037883a 	mov	sp,fp
    7a4c:	dfc00117 	ldw	ra,4(sp)
    7a50:	df000017 	ldw	fp,0(sp)
    7a54:	dec00204 	addi	sp,sp,8
    7a58:	f800283a 	ret

00007a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    7a5c:	defffe04 	addi	sp,sp,-8
    7a60:	dfc00115 	stw	ra,4(sp)
    7a64:	df000015 	stw	fp,0(sp)
    7a68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    7a6c:	d0a00b17 	ldw	r2,-32724(gp)
    7a70:	10000326 	beq	r2,zero,7a80 <alt_get_errno+0x24>
    7a74:	d0a00b17 	ldw	r2,-32724(gp)
    7a78:	103ee83a 	callr	r2
    7a7c:	00000106 	br	7a84 <alt_get_errno+0x28>
    7a80:	d0a51104 	addi	r2,gp,-27580
}
    7a84:	e037883a 	mov	sp,fp
    7a88:	dfc00117 	ldw	ra,4(sp)
    7a8c:	df000017 	ldw	fp,0(sp)
    7a90:	dec00204 	addi	sp,sp,8
    7a94:	f800283a 	ret

00007a98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    7a98:	defff904 	addi	sp,sp,-28
    7a9c:	dfc00615 	stw	ra,24(sp)
    7aa0:	df000515 	stw	fp,20(sp)
    7aa4:	df000504 	addi	fp,sp,20
    7aa8:	e13ffd15 	stw	r4,-12(fp)
    7aac:	e17ffe15 	stw	r5,-8(fp)
    7ab0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    7ab4:	e0bffd17 	ldw	r2,-12(fp)
    7ab8:	10000816 	blt	r2,zero,7adc <write+0x44>
    7abc:	01400304 	movi	r5,12
    7ac0:	e13ffd17 	ldw	r4,-12(fp)
    7ac4:	00064800 	call	6480 <__mulsi3>
    7ac8:	1007883a 	mov	r3,r2
    7acc:	00800074 	movhi	r2,1
    7ad0:	108a9304 	addi	r2,r2,10828
    7ad4:	1885883a 	add	r2,r3,r2
    7ad8:	00000106 	br	7ae0 <write+0x48>
    7adc:	0005883a 	mov	r2,zero
    7ae0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    7ae4:	e0bffb17 	ldw	r2,-20(fp)
    7ae8:	10002126 	beq	r2,zero,7b70 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    7aec:	e0bffb17 	ldw	r2,-20(fp)
    7af0:	10800217 	ldw	r2,8(r2)
    7af4:	108000cc 	andi	r2,r2,3
    7af8:	10001826 	beq	r2,zero,7b5c <write+0xc4>
    7afc:	e0bffb17 	ldw	r2,-20(fp)
    7b00:	10800017 	ldw	r2,0(r2)
    7b04:	10800617 	ldw	r2,24(r2)
    7b08:	10001426 	beq	r2,zero,7b5c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    7b0c:	e0bffb17 	ldw	r2,-20(fp)
    7b10:	10800017 	ldw	r2,0(r2)
    7b14:	10800617 	ldw	r2,24(r2)
    7b18:	e0ffff17 	ldw	r3,-4(fp)
    7b1c:	180d883a 	mov	r6,r3
    7b20:	e17ffe17 	ldw	r5,-8(fp)
    7b24:	e13ffb17 	ldw	r4,-20(fp)
    7b28:	103ee83a 	callr	r2
    7b2c:	e0bffc15 	stw	r2,-16(fp)
    7b30:	e0bffc17 	ldw	r2,-16(fp)
    7b34:	1000070e 	bge	r2,zero,7b54 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    7b38:	0007a5c0 	call	7a5c <alt_get_errno>
    7b3c:	1007883a 	mov	r3,r2
    7b40:	e0bffc17 	ldw	r2,-16(fp)
    7b44:	0085c83a 	sub	r2,zero,r2
    7b48:	18800015 	stw	r2,0(r3)
        return -1;
    7b4c:	00bfffc4 	movi	r2,-1
    7b50:	00000c06 	br	7b84 <write+0xec>
      }
      return rval;
    7b54:	e0bffc17 	ldw	r2,-16(fp)
    7b58:	00000a06 	br	7b84 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    7b5c:	0007a5c0 	call	7a5c <alt_get_errno>
    7b60:	1007883a 	mov	r3,r2
    7b64:	00800344 	movi	r2,13
    7b68:	18800015 	stw	r2,0(r3)
    7b6c:	00000406 	br	7b80 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    7b70:	0007a5c0 	call	7a5c <alt_get_errno>
    7b74:	1007883a 	mov	r3,r2
    7b78:	00801444 	movi	r2,81
    7b7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    7b80:	00bfffc4 	movi	r2,-1
}
    7b84:	e037883a 	mov	sp,fp
    7b88:	dfc00117 	ldw	ra,4(sp)
    7b8c:	df000017 	ldw	fp,0(sp)
    7b90:	dec00204 	addi	sp,sp,8
    7b94:	f800283a 	ret

00007b98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    7b98:	defffd04 	addi	sp,sp,-12
    7b9c:	dfc00215 	stw	ra,8(sp)
    7ba0:	df000115 	stw	fp,4(sp)
    7ba4:	df000104 	addi	fp,sp,4
    7ba8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    7bac:	d1600804 	addi	r5,gp,-32736
    7bb0:	e13fff17 	ldw	r4,-4(fp)
    7bb4:	0009ac40 	call	9ac4 <alt_dev_llist_insert>
}
    7bb8:	e037883a 	mov	sp,fp
    7bbc:	dfc00117 	ldw	ra,4(sp)
    7bc0:	df000017 	ldw	fp,0(sp)
    7bc4:	dec00204 	addi	sp,sp,8
    7bc8:	f800283a 	ret

00007bcc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    7bcc:	defffd04 	addi	sp,sp,-12
    7bd0:	dfc00215 	stw	ra,8(sp)
    7bd4:	df000115 	stw	fp,4(sp)
    7bd8:	df000104 	addi	fp,sp,4
    7bdc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    7be0:	000a40c0 	call	a40c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    7be4:	00800044 	movi	r2,1
    7be8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    7bec:	0001883a 	nop
    7bf0:	e037883a 	mov	sp,fp
    7bf4:	dfc00117 	ldw	ra,4(sp)
    7bf8:	df000017 	ldw	fp,0(sp)
    7bfc:	dec00204 	addi	sp,sp,8
    7c00:	f800283a 	ret

00007c04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    7c04:	defffe04 	addi	sp,sp,-8
    7c08:	dfc00115 	stw	ra,4(sp)
    7c0c:	df000015 	stw	fp,0(sp)
    7c10:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
    7c14:	01000074 	movhi	r4,1
    7c18:	21063e04 	addi	r4,r4,6392
    7c1c:	0007c900 	call	7c90 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    7c20:	01800044 	movi	r6,1
    7c24:	000b883a 	mov	r5,zero
    7c28:	01000074 	movhi	r4,1
    7c2c:	21067b04 	addi	r4,r4,6636
    7c30:	00088bc0 	call	88bc <altera_avalon_jtag_uart_init>
    7c34:	01000074 	movhi	r4,1
    7c38:	21067104 	addi	r4,r4,6596
    7c3c:	0007b980 	call	7b98 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    7c40:	0001883a 	nop
}
    7c44:	0001883a 	nop
    7c48:	e037883a 	mov	sp,fp
    7c4c:	dfc00117 	ldw	ra,4(sp)
    7c50:	df000017 	ldw	fp,0(sp)
    7c54:	dec00204 	addi	sp,sp,8
    7c58:	f800283a 	ret

00007c5c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    7c5c:	defffd04 	addi	sp,sp,-12
    7c60:	dfc00215 	stw	ra,8(sp)
    7c64:	df000115 	stw	fp,4(sp)
    7c68:	df000104 	addi	fp,sp,4
    7c6c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    7c70:	d1600c04 	addi	r5,gp,-32720
    7c74:	e13fff17 	ldw	r4,-4(fp)
    7c78:	0009ac40 	call	9ac4 <alt_dev_llist_insert>
}
    7c7c:	e037883a 	mov	sp,fp
    7c80:	dfc00117 	ldw	ra,4(sp)
    7c84:	df000017 	ldw	fp,0(sp)
    7c88:	dec00204 	addi	sp,sp,8
    7c8c:	f800283a 	ret

00007c90 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    7c90:	defffc04 	addi	sp,sp,-16
    7c94:	dfc00315 	stw	ra,12(sp)
    7c98:	df000215 	stw	fp,8(sp)
    7c9c:	df000204 	addi	fp,sp,8
    7ca0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    7ca4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    7ca8:	e13fff17 	ldw	r4,-4(fp)
    7cac:	0007ce40 	call	7ce4 <alt_epcs_flash_query>
    7cb0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    7cb4:	e0bffe17 	ldw	r2,-8(fp)
    7cb8:	1000041e 	bne	r2,zero,7ccc <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    7cbc:	e0bfff17 	ldw	r2,-4(fp)
    7cc0:	1009883a 	mov	r4,r2
    7cc4:	0007c5c0 	call	7c5c <alt_flash_device_register>
    7cc8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    7ccc:	e0bffe17 	ldw	r2,-8(fp)
}
    7cd0:	e037883a 	mov	sp,fp
    7cd4:	dfc00117 	ldw	ra,4(sp)
    7cd8:	df000017 	ldw	fp,0(sp)
    7cdc:	dec00204 	addi	sp,sp,8
    7ce0:	f800283a 	ret

00007ce4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    7ce4:	defffc04 	addi	sp,sp,-16
    7ce8:	dfc00315 	stw	ra,12(sp)
    7cec:	df000215 	stw	fp,8(sp)
    7cf0:	df000204 	addi	fp,sp,8
    7cf4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    7cf8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    7cfc:	e0bfff17 	ldw	r2,-4(fp)
    7d00:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
    7d04:	e0bfff17 	ldw	r2,-4(fp)
    7d08:	10802e17 	ldw	r2,184(r2)
    7d0c:	1009883a 	mov	r4,r2
    7d10:	000965c0 	call	965c <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
    7d14:	10c03fcc 	andi	r3,r2,255
    7d18:	e0bfff17 	ldw	r2,-4(fp)
    7d1c:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    7d20:	e0bfff17 	ldw	r2,-4(fp)
    7d24:	10803017 	ldw	r2,192(r2)
    7d28:	10800598 	cmpnei	r2,r2,22
    7d2c:	10000a1e 	bne	r2,zero,7d58 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    7d30:	e0bfff17 	ldw	r2,-4(fp)
    7d34:	00c02034 	movhi	r3,128
    7d38:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
    7d3c:	e0bfff17 	ldw	r2,-4(fp)
    7d40:	00c02004 	movi	r3,128
    7d44:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    7d48:	e0bfff17 	ldw	r2,-4(fp)
    7d4c:	00c00074 	movhi	r3,1
    7d50:	10c01015 	stw	r3,64(r2)
    7d54:	0000ce06 	br	8090 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    7d58:	e0bfff17 	ldw	r2,-4(fp)
    7d5c:	10803017 	ldw	r2,192(r2)
    7d60:	10800518 	cmpnei	r2,r2,20
    7d64:	10000a1e 	bne	r2,zero,7d90 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    7d68:	e0bfff17 	ldw	r2,-4(fp)
    7d6c:	00c00834 	movhi	r3,32
    7d70:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
    7d74:	e0bfff17 	ldw	r2,-4(fp)
    7d78:	00c00804 	movi	r3,32
    7d7c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    7d80:	e0bfff17 	ldw	r2,-4(fp)
    7d84:	00c00074 	movhi	r3,1
    7d88:	10c01015 	stw	r3,64(r2)
    7d8c:	0000c006 	br	8090 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    7d90:	e0bfff17 	ldw	r2,-4(fp)
    7d94:	10803017 	ldw	r2,192(r2)
    7d98:	108004d8 	cmpnei	r2,r2,19
    7d9c:	10000a1e 	bne	r2,zero,7dc8 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    7da0:	e0bfff17 	ldw	r2,-4(fp)
    7da4:	00c00434 	movhi	r3,16
    7da8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
    7dac:	e0bfff17 	ldw	r2,-4(fp)
    7db0:	00c00404 	movi	r3,16
    7db4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    7db8:	e0bfff17 	ldw	r2,-4(fp)
    7dbc:	00c00074 	movhi	r3,1
    7dc0:	10c01015 	stw	r3,64(r2)
    7dc4:	0000b206 	br	8090 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    7dc8:	e0bfff17 	ldw	r2,-4(fp)
    7dcc:	10803017 	ldw	r2,192(r2)
    7dd0:	10800498 	cmpnei	r2,r2,18
    7dd4:	10000a1e 	bne	r2,zero,7e00 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    7dd8:	e0bfff17 	ldw	r2,-4(fp)
    7ddc:	00c00234 	movhi	r3,8
    7de0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
    7de4:	e0bfff17 	ldw	r2,-4(fp)
    7de8:	00c00204 	movi	r3,8
    7dec:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    7df0:	e0bfff17 	ldw	r2,-4(fp)
    7df4:	00c00074 	movhi	r3,1
    7df8:	10c01015 	stw	r3,64(r2)
    7dfc:	0000a406 	br	8090 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    7e00:	e0bfff17 	ldw	r2,-4(fp)
    7e04:	10803017 	ldw	r2,192(r2)
    7e08:	10800418 	cmpnei	r2,r2,16
    7e0c:	10000a1e 	bne	r2,zero,7e38 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    7e10:	e0bfff17 	ldw	r2,-4(fp)
    7e14:	00c000b4 	movhi	r3,2
    7e18:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
    7e1c:	e0bfff17 	ldw	r2,-4(fp)
    7e20:	00c00104 	movi	r3,4
    7e24:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
    7e28:	e0bfff17 	ldw	r2,-4(fp)
    7e2c:	00e00014 	movui	r3,32768
    7e30:	10c01015 	stw	r3,64(r2)
    7e34:	00009606 	br	8090 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    7e38:	e0bfff17 	ldw	r2,-4(fp)
    7e3c:	10802e17 	ldw	r2,184(r2)
    7e40:	1009883a 	mov	r4,r2
    7e44:	00096c40 	call	96c4 <epcs_read_device_id>
    7e48:	1007883a 	mov	r3,r2
    7e4c:	e0bfff17 	ldw	r2,-4(fp)
    7e50:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
    7e54:	e0bfff17 	ldw	r2,-4(fp)
    7e58:	10c03017 	ldw	r3,192(r2)
    7e5c:	00804034 	movhi	r2,256
    7e60:	10bfffc4 	addi	r2,r2,-1
    7e64:	1886703a 	and	r3,r3,r2
    7e68:	00800874 	movhi	r2,33
    7e6c:	10ae8544 	addi	r2,r2,-17899
    7e70:	18800a1e 	bne	r3,r2,7e9c <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    7e74:	e0bfff17 	ldw	r2,-4(fp)
    7e78:	00c00834 	movhi	r3,32
    7e7c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
    7e80:	e0bfff17 	ldw	r2,-4(fp)
    7e84:	00c00804 	movi	r3,32
    7e88:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    7e8c:	e0bfff17 	ldw	r2,-4(fp)
    7e90:	00c00074 	movhi	r3,1
    7e94:	10c01015 	stw	r3,64(r2)
    7e98:	00007d06 	br	8090 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
    7e9c:	e0bfff17 	ldw	r2,-4(fp)
    7ea0:	10c03017 	ldw	r3,192(r2)
    7ea4:	00804034 	movhi	r2,256
    7ea8:	10bfffc4 	addi	r2,r2,-1
    7eac:	1886703a 	and	r3,r3,r2
    7eb0:	00800874 	movhi	r2,33
    7eb4:	10ae8584 	addi	r2,r2,-17898
    7eb8:	18800a1e 	bne	r3,r2,7ee4 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
    7ebc:	e0bfff17 	ldw	r2,-4(fp)
    7ec0:	00c01034 	movhi	r3,64
    7ec4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
    7ec8:	e0bfff17 	ldw	r2,-4(fp)
    7ecc:	00c01004 	movi	r3,64
    7ed0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    7ed4:	e0bfff17 	ldw	r2,-4(fp)
    7ed8:	00c00074 	movhi	r3,1
    7edc:	10c01015 	stw	r3,64(r2)
    7ee0:	00006b06 	br	8090 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
    7ee4:	e0bfff17 	ldw	r2,-4(fp)
    7ee8:	10c03017 	ldw	r3,192(r2)
    7eec:	00804034 	movhi	r2,256
    7ef0:	10bfffc4 	addi	r2,r2,-1
    7ef4:	1886703a 	and	r3,r3,r2
    7ef8:	00800874 	movhi	r2,33
    7efc:	10ae85c4 	addi	r2,r2,-17897
    7f00:	18800a1e 	bne	r3,r2,7f2c <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    7f04:	e0bfff17 	ldw	r2,-4(fp)
    7f08:	00c02034 	movhi	r3,128
    7f0c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
    7f10:	e0bfff17 	ldw	r2,-4(fp)
    7f14:	00c02004 	movi	r3,128
    7f18:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    7f1c:	e0bfff17 	ldw	r2,-4(fp)
    7f20:	00c00074 	movhi	r3,1
    7f24:	10c01015 	stw	r3,64(r2)
    7f28:	00005906 	br	8090 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    7f2c:	e0bfff17 	ldw	r2,-4(fp)
    7f30:	10c03017 	ldw	r3,192(r2)
    7f34:	00804034 	movhi	r2,256
    7f38:	10bfffc4 	addi	r2,r2,-1
    7f3c:	1886703a 	and	r3,r3,r2
    7f40:	00800874 	movhi	r2,33
    7f44:	10ae8604 	addi	r2,r2,-17896
    7f48:	18800a1e 	bne	r3,r2,7f74 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    7f4c:	e0bfff17 	ldw	r2,-4(fp)
    7f50:	00c04034 	movhi	r3,256
    7f54:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    7f58:	e0bfff17 	ldw	r2,-4(fp)
    7f5c:	00c04004 	movi	r3,256
    7f60:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    7f64:	e0bfff17 	ldw	r2,-4(fp)
    7f68:	00c00074 	movhi	r3,1
    7f6c:	10c01015 	stw	r3,64(r2)
    7f70:	00004706 	br	8090 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    7f74:	e0bfff17 	ldw	r2,-4(fp)
    7f78:	10803017 	ldw	r2,192(r2)
    7f7c:	10803fcc 	andi	r2,r2,255
    7f80:	10800618 	cmpnei	r2,r2,24
    7f84:	10000a1e 	bne	r2,zero,7fb0 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    7f88:	e0bfff17 	ldw	r2,-4(fp)
    7f8c:	00c04034 	movhi	r3,256
    7f90:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
    7f94:	e0bfff17 	ldw	r2,-4(fp)
    7f98:	00c01004 	movi	r3,64
    7f9c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
    7fa0:	e0bfff17 	ldw	r2,-4(fp)
    7fa4:	00c00134 	movhi	r3,4
    7fa8:	10c01015 	stw	r3,64(r2)
    7fac:	00003806 	br	8090 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    7fb0:	e0bfff17 	ldw	r2,-4(fp)
    7fb4:	10803017 	ldw	r2,192(r2)
    7fb8:	10803fcc 	andi	r2,r2,255
    7fbc:	10800658 	cmpnei	r2,r2,25
    7fc0:	10000d1e 	bne	r2,zero,7ff8 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    7fc4:	e0bfff17 	ldw	r2,-4(fp)
    7fc8:	00c08034 	movhi	r3,512
    7fcc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    7fd0:	e0bfff17 	ldw	r2,-4(fp)
    7fd4:	00c08004 	movi	r3,512
    7fd8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    7fdc:	e0bfff17 	ldw	r2,-4(fp)
    7fe0:	00c00074 	movhi	r3,1
    7fe4:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    7fe8:	e0bfff17 	ldw	r2,-4(fp)
    7fec:	00c00044 	movi	r3,1
    7ff0:	10c03215 	stw	r3,200(r2)
    7ff4:	00002606 	br	8090 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
    7ff8:	e0bfff17 	ldw	r2,-4(fp)
    7ffc:	10803017 	ldw	r2,192(r2)
    8000:	10803fcc 	andi	r2,r2,255
    8004:	10800818 	cmpnei	r2,r2,32
    8008:	10000d1e 	bne	r2,zero,8040 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
    800c:	e0bfff17 	ldw	r2,-4(fp)
    8010:	00c10034 	movhi	r3,1024
    8014:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
    8018:	e0bfff17 	ldw	r2,-4(fp)
    801c:	00c10004 	movi	r3,1024
    8020:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    8024:	e0bfff17 	ldw	r2,-4(fp)
    8028:	00c00074 	movhi	r3,1
    802c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    8030:	e0bfff17 	ldw	r2,-4(fp)
    8034:	00c00044 	movi	r3,1
    8038:	10c03215 	stw	r3,200(r2)
    803c:	00001406 	br	8090 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
    8040:	e0bfff17 	ldw	r2,-4(fp)
    8044:	10803017 	ldw	r2,192(r2)
    8048:	10803fcc 	andi	r2,r2,255
    804c:	10800858 	cmpnei	r2,r2,33
    8050:	10000d1e 	bne	r2,zero,8088 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
    8054:	e0bfff17 	ldw	r2,-4(fp)
    8058:	00c20034 	movhi	r3,2048
    805c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
    8060:	e0bfff17 	ldw	r2,-4(fp)
    8064:	00c20004 	movi	r3,2048
    8068:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    806c:	e0bfff17 	ldw	r2,-4(fp)
    8070:	00c00074 	movhi	r3,1
    8074:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    8078:	e0bfff17 	ldw	r2,-4(fp)
    807c:	00c00044 	movi	r3,1
    8080:	10c03215 	stw	r3,200(r2)
    8084:	00000206 	br	8090 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    8088:	00bffb44 	movi	r2,-19
    808c:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    8090:	e0bfff17 	ldw	r2,-4(fp)
    8094:	10800e17 	ldw	r2,56(r2)
    8098:	1007883a 	mov	r3,r2
    809c:	e0bfff17 	ldw	r2,-4(fp)
    80a0:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
    80a4:	e0bfff17 	ldw	r2,-4(fp)
    80a8:	00c00044 	movi	r3,1
    80ac:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
    80b0:	e0bfff17 	ldw	r2,-4(fp)
    80b4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    80b8:	e0bfff17 	ldw	r2,-4(fp)
    80bc:	00c04004 	movi	r3,256
    80c0:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
    80c4:	e0bffe17 	ldw	r2,-8(fp)
}
    80c8:	e037883a 	mov	sp,fp
    80cc:	dfc00117 	ldw	ra,4(sp)
    80d0:	df000017 	ldw	fp,0(sp)
    80d4:	dec00204 	addi	sp,sp,8
    80d8:	f800283a 	ret

000080dc <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    80dc:	deffee04 	addi	sp,sp,-72
    80e0:	dfc01115 	stw	ra,68(sp)
    80e4:	df001015 	stw	fp,64(sp)
    80e8:	df001004 	addi	fp,sp,64
    80ec:	e13ffc15 	stw	r4,-16(fp)
    80f0:	e17ffd15 	stw	r5,-12(fp)
    80f4:	e1bffe15 	stw	r6,-8(fp)
    80f8:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    80fc:	00800804 	movi	r2,32
    8100:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
    8104:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
    8108:	00002706 	br	81a8 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    810c:	e0fff117 	ldw	r3,-60(fp)
    8110:	e0bfff17 	ldw	r2,-4(fp)
    8114:	1880012e 	bgeu	r3,r2,811c <alt_epcs_flash_memcmp+0x40>
    8118:	1805883a 	mov	r2,r3
    811c:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    8120:	e0fffe17 	ldw	r3,-8(fp)
    8124:	e0bff017 	ldw	r2,-64(fp)
    8128:	1885883a 	add	r2,r3,r2
    812c:	e0fff404 	addi	r3,fp,-48
    8130:	e1fff217 	ldw	r7,-56(fp)
    8134:	180d883a 	mov	r6,r3
    8138:	100b883a 	mov	r5,r2
    813c:	e13ffc17 	ldw	r4,-16(fp)
    8140:	00086c00 	call	86c0 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    8144:	1000020e 	bge	r2,zero,8150 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    8148:	00bfffc4 	movi	r2,-1
    814c:	00001906 	br	81b4 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    8150:	e0bff017 	ldw	r2,-64(fp)
    8154:	e0fffd17 	ldw	r3,-12(fp)
    8158:	1885883a 	add	r2,r3,r2
    815c:	e13ff217 	ldw	r4,-56(fp)
    8160:	e0fff404 	addi	r3,fp,-48
    8164:	200d883a 	mov	r6,r4
    8168:	180b883a 	mov	r5,r3
    816c:	1009883a 	mov	r4,r2
    8170:	000a9580 	call	a958 <memcmp>
    8174:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
    8178:	e0bff317 	ldw	r2,-52(fp)
    817c:	10000226 	beq	r2,zero,8188 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
    8180:	e0bff317 	ldw	r2,-52(fp)
    8184:	00000b06 	br	81b4 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
    8188:	e0bff217 	ldw	r2,-56(fp)
    818c:	e0ffff17 	ldw	r3,-4(fp)
    8190:	1885c83a 	sub	r2,r3,r2
    8194:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
    8198:	e0fff017 	ldw	r3,-64(fp)
    819c:	e0bff217 	ldw	r2,-56(fp)
    81a0:	1885883a 	add	r2,r3,r2
    81a4:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    81a8:	e0bfff17 	ldw	r2,-4(fp)
    81ac:	103fd71e 	bne	r2,zero,810c <__alt_mem_epcs_flash_controller+0xfdfff10c>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    81b0:	0005883a 	mov	r2,zero
}
    81b4:	e037883a 	mov	sp,fp
    81b8:	dfc00117 	ldw	ra,4(sp)
    81bc:	df000017 	ldw	fp,0(sp)
    81c0:	dec00204 	addi	sp,sp,8
    81c4:	f800283a 	ret

000081c8 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    81c8:	defff404 	addi	sp,sp,-48
    81cc:	dfc00b15 	stw	ra,44(sp)
    81d0:	df000a15 	stw	fp,40(sp)
    81d4:	df000a04 	addi	fp,sp,40
    81d8:	e13ffc15 	stw	r4,-16(fp)
    81dc:	e17ffd15 	stw	r5,-12(fp)
    81e0:	e1bffe15 	stw	r6,-8(fp)
    81e4:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
    81e8:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    81ec:	e03ff815 	stw	zero,-32(fp)
    81f0:	00008306 	br	8400 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    81f4:	e0fffc17 	ldw	r3,-16(fp)
    81f8:	e0bff817 	ldw	r2,-32(fp)
    81fc:	1004913a 	slli	r2,r2,4
    8200:	1885883a 	add	r2,r3,r2
    8204:	10800d04 	addi	r2,r2,52
    8208:	10800017 	ldw	r2,0(r2)
    820c:	e0fffd17 	ldw	r3,-12(fp)
    8210:	18807816 	blt	r3,r2,83f4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
    8214:	e0fffc17 	ldw	r3,-16(fp)
    8218:	e0bff817 	ldw	r2,-32(fp)
    821c:	1004913a 	slli	r2,r2,4
    8220:	1885883a 	add	r2,r3,r2
    8224:	10800d04 	addi	r2,r2,52
    8228:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
    822c:	e13ffc17 	ldw	r4,-16(fp)
    8230:	e0bff817 	ldw	r2,-32(fp)
    8234:	1004913a 	slli	r2,r2,4
    8238:	2085883a 	add	r2,r4,r2
    823c:	10800e04 	addi	r2,r2,56
    8240:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
    8244:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    8248:	e0fffd17 	ldw	r3,-12(fp)
    824c:	1880690e 	bge	r3,r2,83f4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    8250:	e0fffc17 	ldw	r3,-16(fp)
    8254:	e0bff817 	ldw	r2,-32(fp)
    8258:	1004913a 	slli	r2,r2,4
    825c:	1885883a 	add	r2,r3,r2
    8260:	10800d04 	addi	r2,r2,52
    8264:	10800017 	ldw	r2,0(r2)
    8268:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    826c:	e03ff915 	stw	zero,-28(fp)
    8270:	00005806 	br	83d4 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
    8274:	e0fffd17 	ldw	r3,-12(fp)
    8278:	e0bffa17 	ldw	r2,-24(fp)
    827c:	18804916 	blt	r3,r2,83a4 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
    8280:	e0fffc17 	ldw	r3,-16(fp)
    8284:	e0bff817 	ldw	r2,-32(fp)
    8288:	10800104 	addi	r2,r2,4
    828c:	1004913a 	slli	r2,r2,4
    8290:	1885883a 	add	r2,r3,r2
    8294:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
    8298:	e0bffa17 	ldw	r2,-24(fp)
    829c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
    82a0:	e0fffd17 	ldw	r3,-12(fp)
    82a4:	18803f0e 	bge	r3,r2,83a4 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    82a8:	e0fffc17 	ldw	r3,-16(fp)
    82ac:	e0bff817 	ldw	r2,-32(fp)
    82b0:	10800104 	addi	r2,r2,4
    82b4:	1004913a 	slli	r2,r2,4
    82b8:	1885883a 	add	r2,r3,r2
    82bc:	10c00017 	ldw	r3,0(r2)
    82c0:	e0bffa17 	ldw	r2,-24(fp)
    82c4:	1887883a 	add	r3,r3,r2
    82c8:	e0bffd17 	ldw	r2,-12(fp)
    82cc:	1885c83a 	sub	r2,r3,r2
    82d0:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    82d4:	e0fffb17 	ldw	r3,-20(fp)
    82d8:	e0bfff17 	ldw	r2,-4(fp)
    82dc:	1880010e 	bge	r3,r2,82e4 <alt_epcs_flash_write+0x11c>
    82e0:	1805883a 	mov	r2,r3
    82e4:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    82e8:	e0bffb17 	ldw	r2,-20(fp)
    82ec:	100f883a 	mov	r7,r2
    82f0:	e1bffd17 	ldw	r6,-12(fp)
    82f4:	e17ffe17 	ldw	r5,-8(fp)
    82f8:	e13ffc17 	ldw	r4,-16(fp)
    82fc:	00080dc0 	call	80dc <alt_epcs_flash_memcmp>
    8300:	10001226 	beq	r2,zero,834c <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    8304:	e0bffc17 	ldw	r2,-16(fp)
    8308:	10800817 	ldw	r2,32(r2)
    830c:	e17ffa17 	ldw	r5,-24(fp)
    8310:	e13ffc17 	ldw	r4,-16(fp)
    8314:	103ee83a 	callr	r2
    8318:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
    831c:	e0bff717 	ldw	r2,-36(fp)
    8320:	10000a1e 	bne	r2,zero,834c <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
    8324:	e0bffc17 	ldw	r2,-16(fp)
    8328:	10800917 	ldw	r2,36(r2)
    832c:	e0fffb17 	ldw	r3,-20(fp)
    8330:	d8c00015 	stw	r3,0(sp)
    8334:	e1fffe17 	ldw	r7,-8(fp)
    8338:	e1bffd17 	ldw	r6,-12(fp)
    833c:	e17ffa17 	ldw	r5,-24(fp)
    8340:	e13ffc17 	ldw	r4,-16(fp)
    8344:	103ee83a 	callr	r2
    8348:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    834c:	e0ffff17 	ldw	r3,-4(fp)
    8350:	e0bffb17 	ldw	r2,-20(fp)
    8354:	18802e26 	beq	r3,r2,8410 <alt_epcs_flash_write+0x248>
    8358:	e0bff717 	ldw	r2,-36(fp)
    835c:	10002c1e 	bne	r2,zero,8410 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
    8360:	e0ffff17 	ldw	r3,-4(fp)
    8364:	e0bffb17 	ldw	r2,-20(fp)
    8368:	1885c83a 	sub	r2,r3,r2
    836c:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    8370:	e0fffc17 	ldw	r3,-16(fp)
    8374:	e0bff817 	ldw	r2,-32(fp)
    8378:	10800104 	addi	r2,r2,4
    837c:	1004913a 	slli	r2,r2,4
    8380:	1885883a 	add	r2,r3,r2
    8384:	10c00017 	ldw	r3,0(r2)
    8388:	e0bffa17 	ldw	r2,-24(fp)
    838c:	1885883a 	add	r2,r3,r2
    8390:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    8394:	e0bffb17 	ldw	r2,-20(fp)
    8398:	e0fffe17 	ldw	r3,-8(fp)
    839c:	1885883a 	add	r2,r3,r2
    83a0:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    83a4:	e0fffc17 	ldw	r3,-16(fp)
    83a8:	e0bff817 	ldw	r2,-32(fp)
    83ac:	10800104 	addi	r2,r2,4
    83b0:	1004913a 	slli	r2,r2,4
    83b4:	1885883a 	add	r2,r3,r2
    83b8:	10800017 	ldw	r2,0(r2)
    83bc:	e0fffa17 	ldw	r3,-24(fp)
    83c0:	1885883a 	add	r2,r3,r2
    83c4:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    83c8:	e0bff917 	ldw	r2,-28(fp)
    83cc:	10800044 	addi	r2,r2,1
    83d0:	e0bff915 	stw	r2,-28(fp)
    83d4:	e0fffc17 	ldw	r3,-16(fp)
    83d8:	e0bff817 	ldw	r2,-32(fp)
    83dc:	1004913a 	slli	r2,r2,4
    83e0:	1885883a 	add	r2,r3,r2
    83e4:	10800f04 	addi	r2,r2,60
    83e8:	10800017 	ldw	r2,0(r2)
    83ec:	e0fff917 	ldw	r3,-28(fp)
    83f0:	18bfa016 	blt	r3,r2,8274 <__alt_mem_epcs_flash_controller+0xfdfff274>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    83f4:	e0bff817 	ldw	r2,-32(fp)
    83f8:	10800044 	addi	r2,r2,1
    83fc:	e0bff815 	stw	r2,-32(fp)
    8400:	e0bffc17 	ldw	r2,-16(fp)
    8404:	10800c17 	ldw	r2,48(r2)
    8408:	e0fff817 	ldw	r3,-32(fp)
    840c:	18bf7916 	blt	r3,r2,81f4 <__alt_mem_epcs_flash_controller+0xfdfff1f4>
      }
    }
  }

finished:
  return ret_code;
    8410:	e0bff717 	ldw	r2,-36(fp)
}
    8414:	e037883a 	mov	sp,fp
    8418:	dfc00117 	ldw	ra,4(sp)
    841c:	df000017 	ldw	fp,0(sp)
    8420:	dec00204 	addi	sp,sp,8
    8424:	f800283a 	ret

00008428 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    8428:	defffa04 	addi	sp,sp,-24
    842c:	df000515 	stw	fp,20(sp)
    8430:	df000504 	addi	fp,sp,20
    8434:	e13ffd15 	stw	r4,-12(fp)
    8438:	e17ffe15 	stw	r5,-8(fp)
    843c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    8440:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    8444:	e0bffd17 	ldw	r2,-12(fp)
    8448:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
    844c:	e0bffc17 	ldw	r2,-16(fp)
    8450:	10c00c17 	ldw	r3,48(r2)
    8454:	e0bfff17 	ldw	r2,-4(fp)
    8458:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    845c:	e0bffc17 	ldw	r2,-16(fp)
    8460:	10800c17 	ldw	r2,48(r2)
    8464:	1000031e 	bne	r2,zero,8474 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
    8468:	00bffec4 	movi	r2,-5
    846c:	e0bffb15 	stw	r2,-20(fp)
    8470:	00000b06 	br	84a0 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    8474:	e0bffc17 	ldw	r2,-16(fp)
    8478:	10800c17 	ldw	r2,48(r2)
    847c:	10800250 	cmplti	r2,r2,9
    8480:	1000031e 	bne	r2,zero,8490 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
    8484:	00bffd04 	movi	r2,-12
    8488:	e0bffb15 	stw	r2,-20(fp)
    848c:	00000406 	br	84a0 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
    8490:	e0bffc17 	ldw	r2,-16(fp)
    8494:	10c00d04 	addi	r3,r2,52
    8498:	e0bffe17 	ldw	r2,-8(fp)
    849c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    84a0:	e0bffb17 	ldw	r2,-20(fp)
}
    84a4:	e037883a 	mov	sp,fp
    84a8:	df000017 	ldw	fp,0(sp)
    84ac:	dec00104 	addi	sp,sp,4
    84b0:	f800283a 	ret

000084b4 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    84b4:	defff904 	addi	sp,sp,-28
    84b8:	df000615 	stw	fp,24(sp)
    84bc:	df000604 	addi	fp,sp,24
    84c0:	e13ffe15 	stw	r4,-8(fp)
    84c4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    84c8:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    84cc:	e0bffe17 	ldw	r2,-8(fp)
    84d0:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    84d4:	e0bffb17 	ldw	r2,-20(fp)
    84d8:	10800c17 	ldw	r2,48(r2)
    84dc:	10bfffc4 	addi	r2,r2,-1
    84e0:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    84e4:	e0fffb17 	ldw	r3,-20(fp)
    84e8:	e0bffc17 	ldw	r2,-16(fp)
    84ec:	1004913a 	slli	r2,r2,4
    84f0:	1885883a 	add	r2,r3,r2
    84f4:	10800d04 	addi	r2,r2,52
    84f8:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    84fc:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    8500:	e13ffb17 	ldw	r4,-20(fp)
    8504:	e0bffc17 	ldw	r2,-16(fp)
    8508:	1004913a 	slli	r2,r2,4
    850c:	2085883a 	add	r2,r4,r2
    8510:	10800e04 	addi	r2,r2,56
    8514:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    8518:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    851c:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    8520:	e0bfff17 	ldw	r2,-4(fp)
    8524:	e0fffd17 	ldw	r3,-12(fp)
    8528:	1880022e 	bgeu	r3,r2,8534 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    852c:	00bffec4 	movi	r2,-5
    8530:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
    8534:	e0bffa17 	ldw	r2,-24(fp)
}
    8538:	e037883a 	mov	sp,fp
    853c:	df000017 	ldw	fp,0(sp)
    8540:	dec00104 	addi	sp,sp,4
    8544:	f800283a 	ret

00008548 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    8548:	defffa04 	addi	sp,sp,-24
    854c:	dfc00515 	stw	ra,20(sp)
    8550:	df000415 	stw	fp,16(sp)
    8554:	df000404 	addi	fp,sp,16
    8558:	e13ffe15 	stw	r4,-8(fp)
    855c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    8560:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    8564:	e0bffe17 	ldw	r2,-8(fp)
    8568:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    856c:	e17fff17 	ldw	r5,-4(fp)
    8570:	e13ffe17 	ldw	r4,-8(fp)
    8574:	00084b40 	call	84b4 <alt_epcs_test_address>
    8578:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
    857c:	e0bffc17 	ldw	r2,-16(fp)
    8580:	10000916 	blt	r2,zero,85a8 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    8584:	e0bffd17 	ldw	r2,-12(fp)
    8588:	10c02e17 	ldw	r3,184(r2)
    858c:	e13fff17 	ldw	r4,-4(fp)
    8590:	e0bffd17 	ldw	r2,-12(fp)
    8594:	10803217 	ldw	r2,200(r2)
    8598:	100d883a 	mov	r6,r2
    859c:	200b883a 	mov	r5,r4
    85a0:	1809883a 	mov	r4,r3
    85a4:	00092900 	call	9290 <epcs_sector_erase>
  }
  return ret_code;
    85a8:	e0bffc17 	ldw	r2,-16(fp)
}
    85ac:	e037883a 	mov	sp,fp
    85b0:	dfc00117 	ldw	ra,4(sp)
    85b4:	df000017 	ldw	fp,0(sp)
    85b8:	dec00204 	addi	sp,sp,8
    85bc:	f800283a 	ret

000085c0 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    85c0:	defff404 	addi	sp,sp,-48
    85c4:	dfc00b15 	stw	ra,44(sp)
    85c8:	df000a15 	stw	fp,40(sp)
    85cc:	df000a04 	addi	fp,sp,40
    85d0:	e13ffc15 	stw	r4,-16(fp)
    85d4:	e17ffd15 	stw	r5,-12(fp)
    85d8:	e1bffe15 	stw	r6,-8(fp)
    85dc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    85e0:	e0bffc17 	ldw	r2,-16(fp)
    85e4:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    85e8:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    85ec:	e17ffe17 	ldw	r5,-8(fp)
    85f0:	e13ffc17 	ldw	r4,-16(fp)
    85f4:	00084b40 	call	84b4 <alt_epcs_test_address>
    85f8:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    85fc:	e0bff917 	ldw	r2,-28(fp)
    8600:	10002916 	blt	r2,zero,86a8 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    8604:	00002606 	br	86a0 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    8608:	e0bff817 	ldw	r2,-32(fp)
    860c:	10c03117 	ldw	r3,196(r2)
    8610:	e0bffe17 	ldw	r2,-8(fp)
    8614:	1887883a 	add	r3,r3,r2
    8618:	e0bff817 	ldw	r2,-32(fp)
    861c:	10803117 	ldw	r2,196(r2)
    8620:	0085c83a 	sub	r2,zero,r2
    8624:	1884703a 	and	r2,r3,r2
    8628:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    862c:	e0fffa17 	ldw	r3,-24(fp)
    8630:	e0bffe17 	ldw	r2,-8(fp)
    8634:	1885c83a 	sub	r2,r3,r2
    8638:	e0c00217 	ldw	r3,8(fp)
    863c:	1880010e 	bge	r3,r2,8644 <alt_epcs_flash_write_block+0x84>
    8640:	1805883a 	mov	r2,r3
    8644:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    8648:	e0bff817 	ldw	r2,-32(fp)
    864c:	11002e17 	ldw	r4,184(r2)
    8650:	e0bff717 	ldw	r2,-36(fp)
    8654:	e0ffff17 	ldw	r3,-4(fp)
    8658:	1887883a 	add	r3,r3,r2
    865c:	e0bff817 	ldw	r2,-32(fp)
    8660:	10803217 	ldw	r2,200(r2)
    8664:	d8800015 	stw	r2,0(sp)
    8668:	e1fffb17 	ldw	r7,-20(fp)
    866c:	180d883a 	mov	r6,r3
    8670:	e17ffe17 	ldw	r5,-8(fp)
    8674:	00095400 	call	9540 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    8678:	e0c00217 	ldw	r3,8(fp)
    867c:	e0bffb17 	ldw	r2,-20(fp)
    8680:	1885c83a 	sub	r2,r3,r2
    8684:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    8688:	e0fff717 	ldw	r3,-36(fp)
    868c:	e0bffb17 	ldw	r2,-20(fp)
    8690:	1885883a 	add	r2,r3,r2
    8694:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    8698:	e0bffa17 	ldw	r2,-24(fp)
    869c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    86a0:	e0800217 	ldw	r2,8(fp)
    86a4:	103fd81e 	bne	r2,zero,8608 <__alt_mem_epcs_flash_controller+0xfdfff608>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    86a8:	e0bff917 	ldw	r2,-28(fp)
}
    86ac:	e037883a 	mov	sp,fp
    86b0:	dfc00117 	ldw	ra,4(sp)
    86b4:	df000017 	ldw	fp,0(sp)
    86b8:	dec00204 	addi	sp,sp,8
    86bc:	f800283a 	ret

000086c0 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    86c0:	defff704 	addi	sp,sp,-36
    86c4:	dfc00815 	stw	ra,32(sp)
    86c8:	df000715 	stw	fp,28(sp)
    86cc:	df000704 	addi	fp,sp,28
    86d0:	e13ffc15 	stw	r4,-16(fp)
    86d4:	e17ffd15 	stw	r5,-12(fp)
    86d8:	e1bffe15 	stw	r6,-8(fp)
    86dc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    86e0:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    86e4:	e0bffc17 	ldw	r2,-16(fp)
    86e8:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    86ec:	e17ffd17 	ldw	r5,-12(fp)
    86f0:	e13ffc17 	ldw	r4,-16(fp)
    86f4:	00084b40 	call	84b4 <alt_epcs_test_address>
    86f8:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
    86fc:	e0bffa17 	ldw	r2,-24(fp)
    8700:	10000f16 	blt	r2,zero,8740 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    8704:	e0bffb17 	ldw	r2,-20(fp)
    8708:	10c02e17 	ldw	r3,184(r2)
    870c:	e0bffb17 	ldw	r2,-20(fp)
    8710:	10803217 	ldw	r2,200(r2)
    8714:	d8800015 	stw	r2,0(sp)
    8718:	e1ffff17 	ldw	r7,-4(fp)
    871c:	e1bffe17 	ldw	r6,-8(fp)
    8720:	e17ffd17 	ldw	r5,-12(fp)
    8724:	1809883a 	mov	r4,r3
    8728:	000938c0 	call	938c <epcs_read_buffer>
    872c:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    8730:	e0fffa17 	ldw	r3,-24(fp)
    8734:	e0bfff17 	ldw	r2,-4(fp)
    8738:	1880011e 	bne	r3,r2,8740 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    873c:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
    8740:	e0bffa17 	ldw	r2,-24(fp)
}
    8744:	e037883a 	mov	sp,fp
    8748:	dfc00117 	ldw	ra,4(sp)
    874c:	df000017 	ldw	fp,0(sp)
    8750:	dec00204 	addi	sp,sp,8
    8754:	f800283a 	ret

00008758 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8758:	defffa04 	addi	sp,sp,-24
    875c:	dfc00515 	stw	ra,20(sp)
    8760:	df000415 	stw	fp,16(sp)
    8764:	df000404 	addi	fp,sp,16
    8768:	e13ffd15 	stw	r4,-12(fp)
    876c:	e17ffe15 	stw	r5,-8(fp)
    8770:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8774:	e0bffd17 	ldw	r2,-12(fp)
    8778:	10800017 	ldw	r2,0(r2)
    877c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8780:	e0bffc17 	ldw	r2,-16(fp)
    8784:	10c00a04 	addi	r3,r2,40
    8788:	e0bffd17 	ldw	r2,-12(fp)
    878c:	10800217 	ldw	r2,8(r2)
    8790:	100f883a 	mov	r7,r2
    8794:	e1bfff17 	ldw	r6,-4(fp)
    8798:	e17ffe17 	ldw	r5,-8(fp)
    879c:	1809883a 	mov	r4,r3
    87a0:	0008d800 	call	8d80 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    87a4:	e037883a 	mov	sp,fp
    87a8:	dfc00117 	ldw	ra,4(sp)
    87ac:	df000017 	ldw	fp,0(sp)
    87b0:	dec00204 	addi	sp,sp,8
    87b4:	f800283a 	ret

000087b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    87b8:	defffa04 	addi	sp,sp,-24
    87bc:	dfc00515 	stw	ra,20(sp)
    87c0:	df000415 	stw	fp,16(sp)
    87c4:	df000404 	addi	fp,sp,16
    87c8:	e13ffd15 	stw	r4,-12(fp)
    87cc:	e17ffe15 	stw	r5,-8(fp)
    87d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    87d4:	e0bffd17 	ldw	r2,-12(fp)
    87d8:	10800017 	ldw	r2,0(r2)
    87dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    87e0:	e0bffc17 	ldw	r2,-16(fp)
    87e4:	10c00a04 	addi	r3,r2,40
    87e8:	e0bffd17 	ldw	r2,-12(fp)
    87ec:	10800217 	ldw	r2,8(r2)
    87f0:	100f883a 	mov	r7,r2
    87f4:	e1bfff17 	ldw	r6,-4(fp)
    87f8:	e17ffe17 	ldw	r5,-8(fp)
    87fc:	1809883a 	mov	r4,r3
    8800:	0008f9c0 	call	8f9c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8804:	e037883a 	mov	sp,fp
    8808:	dfc00117 	ldw	ra,4(sp)
    880c:	df000017 	ldw	fp,0(sp)
    8810:	dec00204 	addi	sp,sp,8
    8814:	f800283a 	ret

00008818 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    8818:	defffc04 	addi	sp,sp,-16
    881c:	dfc00315 	stw	ra,12(sp)
    8820:	df000215 	stw	fp,8(sp)
    8824:	df000204 	addi	fp,sp,8
    8828:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    882c:	e0bfff17 	ldw	r2,-4(fp)
    8830:	10800017 	ldw	r2,0(r2)
    8834:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    8838:	e0bffe17 	ldw	r2,-8(fp)
    883c:	10c00a04 	addi	r3,r2,40
    8840:	e0bfff17 	ldw	r2,-4(fp)
    8844:	10800217 	ldw	r2,8(r2)
    8848:	100b883a 	mov	r5,r2
    884c:	1809883a 	mov	r4,r3
    8850:	0008c280 	call	8c28 <altera_avalon_jtag_uart_close>
}
    8854:	e037883a 	mov	sp,fp
    8858:	dfc00117 	ldw	ra,4(sp)
    885c:	df000017 	ldw	fp,0(sp)
    8860:	dec00204 	addi	sp,sp,8
    8864:	f800283a 	ret

00008868 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    8868:	defffa04 	addi	sp,sp,-24
    886c:	dfc00515 	stw	ra,20(sp)
    8870:	df000415 	stw	fp,16(sp)
    8874:	df000404 	addi	fp,sp,16
    8878:	e13ffd15 	stw	r4,-12(fp)
    887c:	e17ffe15 	stw	r5,-8(fp)
    8880:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    8884:	e0bffd17 	ldw	r2,-12(fp)
    8888:	10800017 	ldw	r2,0(r2)
    888c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    8890:	e0bffc17 	ldw	r2,-16(fp)
    8894:	10800a04 	addi	r2,r2,40
    8898:	e1bfff17 	ldw	r6,-4(fp)
    889c:	e17ffe17 	ldw	r5,-8(fp)
    88a0:	1009883a 	mov	r4,r2
    88a4:	0008c900 	call	8c90 <altera_avalon_jtag_uart_ioctl>
}
    88a8:	e037883a 	mov	sp,fp
    88ac:	dfc00117 	ldw	ra,4(sp)
    88b0:	df000017 	ldw	fp,0(sp)
    88b4:	dec00204 	addi	sp,sp,8
    88b8:	f800283a 	ret

000088bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    88bc:	defffa04 	addi	sp,sp,-24
    88c0:	dfc00515 	stw	ra,20(sp)
    88c4:	df000415 	stw	fp,16(sp)
    88c8:	df000404 	addi	fp,sp,16
    88cc:	e13ffd15 	stw	r4,-12(fp)
    88d0:	e17ffe15 	stw	r5,-8(fp)
    88d4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    88d8:	e0bffd17 	ldw	r2,-12(fp)
    88dc:	00c00044 	movi	r3,1
    88e0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    88e4:	e0bffd17 	ldw	r2,-12(fp)
    88e8:	10800017 	ldw	r2,0(r2)
    88ec:	10800104 	addi	r2,r2,4
    88f0:	1007883a 	mov	r3,r2
    88f4:	e0bffd17 	ldw	r2,-12(fp)
    88f8:	10800817 	ldw	r2,32(r2)
    88fc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    8900:	e0bffe17 	ldw	r2,-8(fp)
    8904:	e0ffff17 	ldw	r3,-4(fp)
    8908:	d8000015 	stw	zero,0(sp)
    890c:	e1fffd17 	ldw	r7,-12(fp)
    8910:	01800074 	movhi	r6,1
    8914:	31a25f04 	addi	r6,r6,-30340
    8918:	180b883a 	mov	r5,r3
    891c:	1009883a 	mov	r4,r2
    8920:	0009d040 	call	9d04 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    8924:	e0bffd17 	ldw	r2,-12(fp)
    8928:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    892c:	e0bffd17 	ldw	r2,-12(fp)
    8930:	10800204 	addi	r2,r2,8
    8934:	d0e51917 	ldw	r3,-27548(gp)
    8938:	e1fffd17 	ldw	r7,-12(fp)
    893c:	01800074 	movhi	r6,1
    8940:	31a2e204 	addi	r6,r6,-29816
    8944:	180b883a 	mov	r5,r3
    8948:	1009883a 	mov	r4,r2
    894c:	00097fc0 	call	97fc <alt_alarm_start>
    8950:	1000040e 	bge	r2,zero,8964 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    8954:	e0fffd17 	ldw	r3,-12(fp)
    8958:	00a00034 	movhi	r2,32768
    895c:	10bfffc4 	addi	r2,r2,-1
    8960:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    8964:	0001883a 	nop
    8968:	e037883a 	mov	sp,fp
    896c:	dfc00117 	ldw	ra,4(sp)
    8970:	df000017 	ldw	fp,0(sp)
    8974:	dec00204 	addi	sp,sp,8
    8978:	f800283a 	ret

0000897c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    897c:	defff804 	addi	sp,sp,-32
    8980:	df000715 	stw	fp,28(sp)
    8984:	df000704 	addi	fp,sp,28
    8988:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    898c:	e0bfff17 	ldw	r2,-4(fp)
    8990:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    8994:	e0bffb17 	ldw	r2,-20(fp)
    8998:	10800017 	ldw	r2,0(r2)
    899c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    89a0:	e0bffc17 	ldw	r2,-16(fp)
    89a4:	10800104 	addi	r2,r2,4
    89a8:	10800037 	ldwio	r2,0(r2)
    89ac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    89b0:	e0bffd17 	ldw	r2,-12(fp)
    89b4:	1080c00c 	andi	r2,r2,768
    89b8:	10006d26 	beq	r2,zero,8b70 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    89bc:	e0bffd17 	ldw	r2,-12(fp)
    89c0:	1080400c 	andi	r2,r2,256
    89c4:	10003526 	beq	r2,zero,8a9c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    89c8:	00800074 	movhi	r2,1
    89cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    89d0:	e0bffb17 	ldw	r2,-20(fp)
    89d4:	10800a17 	ldw	r2,40(r2)
    89d8:	10800044 	addi	r2,r2,1
    89dc:	1081ffcc 	andi	r2,r2,2047
    89e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    89e4:	e0bffb17 	ldw	r2,-20(fp)
    89e8:	10c00b17 	ldw	r3,44(r2)
    89ec:	e0bffe17 	ldw	r2,-8(fp)
    89f0:	18801526 	beq	r3,r2,8a48 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    89f4:	e0bffc17 	ldw	r2,-16(fp)
    89f8:	10800037 	ldwio	r2,0(r2)
    89fc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    8a00:	e0bff917 	ldw	r2,-28(fp)
    8a04:	10a0000c 	andi	r2,r2,32768
    8a08:	10001126 	beq	r2,zero,8a50 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8a0c:	e0bffb17 	ldw	r2,-20(fp)
    8a10:	10800a17 	ldw	r2,40(r2)
    8a14:	e0fff917 	ldw	r3,-28(fp)
    8a18:	1809883a 	mov	r4,r3
    8a1c:	e0fffb17 	ldw	r3,-20(fp)
    8a20:	1885883a 	add	r2,r3,r2
    8a24:	10800e04 	addi	r2,r2,56
    8a28:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8a2c:	e0bffb17 	ldw	r2,-20(fp)
    8a30:	10800a17 	ldw	r2,40(r2)
    8a34:	10800044 	addi	r2,r2,1
    8a38:	10c1ffcc 	andi	r3,r2,2047
    8a3c:	e0bffb17 	ldw	r2,-20(fp)
    8a40:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    8a44:	003fe206 	br	89d0 <__alt_mem_epcs_flash_controller+0xfdfff9d0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    8a48:	0001883a 	nop
    8a4c:	00000106 	br	8a54 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    8a50:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    8a54:	e0bff917 	ldw	r2,-28(fp)
    8a58:	10bfffec 	andhi	r2,r2,65535
    8a5c:	10000f26 	beq	r2,zero,8a9c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8a60:	e0bffb17 	ldw	r2,-20(fp)
    8a64:	10c00817 	ldw	r3,32(r2)
    8a68:	00bfff84 	movi	r2,-2
    8a6c:	1886703a 	and	r3,r3,r2
    8a70:	e0bffb17 	ldw	r2,-20(fp)
    8a74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    8a78:	e0bffc17 	ldw	r2,-16(fp)
    8a7c:	10800104 	addi	r2,r2,4
    8a80:	1007883a 	mov	r3,r2
    8a84:	e0bffb17 	ldw	r2,-20(fp)
    8a88:	10800817 	ldw	r2,32(r2)
    8a8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8a90:	e0bffc17 	ldw	r2,-16(fp)
    8a94:	10800104 	addi	r2,r2,4
    8a98:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    8a9c:	e0bffd17 	ldw	r2,-12(fp)
    8aa0:	1080800c 	andi	r2,r2,512
    8aa4:	103fbe26 	beq	r2,zero,89a0 <__alt_mem_epcs_flash_controller+0xfdfff9a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    8aa8:	e0bffd17 	ldw	r2,-12(fp)
    8aac:	1004d43a 	srli	r2,r2,16
    8ab0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    8ab4:	00001406 	br	8b08 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    8ab8:	e0bffc17 	ldw	r2,-16(fp)
    8abc:	e0fffb17 	ldw	r3,-20(fp)
    8ac0:	18c00d17 	ldw	r3,52(r3)
    8ac4:	e13ffb17 	ldw	r4,-20(fp)
    8ac8:	20c7883a 	add	r3,r4,r3
    8acc:	18c20e04 	addi	r3,r3,2104
    8ad0:	18c00003 	ldbu	r3,0(r3)
    8ad4:	18c03fcc 	andi	r3,r3,255
    8ad8:	18c0201c 	xori	r3,r3,128
    8adc:	18ffe004 	addi	r3,r3,-128
    8ae0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8ae4:	e0bffb17 	ldw	r2,-20(fp)
    8ae8:	10800d17 	ldw	r2,52(r2)
    8aec:	10800044 	addi	r2,r2,1
    8af0:	10c1ffcc 	andi	r3,r2,2047
    8af4:	e0bffb17 	ldw	r2,-20(fp)
    8af8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    8afc:	e0bffa17 	ldw	r2,-24(fp)
    8b00:	10bfffc4 	addi	r2,r2,-1
    8b04:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    8b08:	e0bffa17 	ldw	r2,-24(fp)
    8b0c:	10000526 	beq	r2,zero,8b24 <altera_avalon_jtag_uart_irq+0x1a8>
    8b10:	e0bffb17 	ldw	r2,-20(fp)
    8b14:	10c00d17 	ldw	r3,52(r2)
    8b18:	e0bffb17 	ldw	r2,-20(fp)
    8b1c:	10800c17 	ldw	r2,48(r2)
    8b20:	18bfe51e 	bne	r3,r2,8ab8 <__alt_mem_epcs_flash_controller+0xfdfffab8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    8b24:	e0bffa17 	ldw	r2,-24(fp)
    8b28:	103f9d26 	beq	r2,zero,89a0 <__alt_mem_epcs_flash_controller+0xfdfff9a0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    8b2c:	e0bffb17 	ldw	r2,-20(fp)
    8b30:	10c00817 	ldw	r3,32(r2)
    8b34:	00bfff44 	movi	r2,-3
    8b38:	1886703a 	and	r3,r3,r2
    8b3c:	e0bffb17 	ldw	r2,-20(fp)
    8b40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8b44:	e0bffb17 	ldw	r2,-20(fp)
    8b48:	10800017 	ldw	r2,0(r2)
    8b4c:	10800104 	addi	r2,r2,4
    8b50:	1007883a 	mov	r3,r2
    8b54:	e0bffb17 	ldw	r2,-20(fp)
    8b58:	10800817 	ldw	r2,32(r2)
    8b5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8b60:	e0bffc17 	ldw	r2,-16(fp)
    8b64:	10800104 	addi	r2,r2,4
    8b68:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    8b6c:	003f8c06 	br	89a0 <__alt_mem_epcs_flash_controller+0xfdfff9a0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    8b70:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    8b74:	0001883a 	nop
    8b78:	e037883a 	mov	sp,fp
    8b7c:	df000017 	ldw	fp,0(sp)
    8b80:	dec00104 	addi	sp,sp,4
    8b84:	f800283a 	ret

00008b88 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    8b88:	defff804 	addi	sp,sp,-32
    8b8c:	df000715 	stw	fp,28(sp)
    8b90:	df000704 	addi	fp,sp,28
    8b94:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    8b98:	e0bffb17 	ldw	r2,-20(fp)
    8b9c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    8ba0:	e0bff917 	ldw	r2,-28(fp)
    8ba4:	10800017 	ldw	r2,0(r2)
    8ba8:	10800104 	addi	r2,r2,4
    8bac:	10800037 	ldwio	r2,0(r2)
    8bb0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    8bb4:	e0bffa17 	ldw	r2,-24(fp)
    8bb8:	1081000c 	andi	r2,r2,1024
    8bbc:	10000b26 	beq	r2,zero,8bec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    8bc0:	e0bff917 	ldw	r2,-28(fp)
    8bc4:	10800017 	ldw	r2,0(r2)
    8bc8:	10800104 	addi	r2,r2,4
    8bcc:	1007883a 	mov	r3,r2
    8bd0:	e0bff917 	ldw	r2,-28(fp)
    8bd4:	10800817 	ldw	r2,32(r2)
    8bd8:	10810014 	ori	r2,r2,1024
    8bdc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    8be0:	e0bff917 	ldw	r2,-28(fp)
    8be4:	10000915 	stw	zero,36(r2)
    8be8:	00000a06 	br	8c14 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    8bec:	e0bff917 	ldw	r2,-28(fp)
    8bf0:	10c00917 	ldw	r3,36(r2)
    8bf4:	00a00034 	movhi	r2,32768
    8bf8:	10bfff04 	addi	r2,r2,-4
    8bfc:	10c00536 	bltu	r2,r3,8c14 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    8c00:	e0bff917 	ldw	r2,-28(fp)
    8c04:	10800917 	ldw	r2,36(r2)
    8c08:	10c00044 	addi	r3,r2,1
    8c0c:	e0bff917 	ldw	r2,-28(fp)
    8c10:	10c00915 	stw	r3,36(r2)
    8c14:	d0a51917 	ldw	r2,-27548(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    8c18:	e037883a 	mov	sp,fp
    8c1c:	df000017 	ldw	fp,0(sp)
    8c20:	dec00104 	addi	sp,sp,4
    8c24:	f800283a 	ret

00008c28 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    8c28:	defffd04 	addi	sp,sp,-12
    8c2c:	df000215 	stw	fp,8(sp)
    8c30:	df000204 	addi	fp,sp,8
    8c34:	e13ffe15 	stw	r4,-8(fp)
    8c38:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8c3c:	00000506 	br	8c54 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    8c40:	e0bfff17 	ldw	r2,-4(fp)
    8c44:	1090000c 	andi	r2,r2,16384
    8c48:	10000226 	beq	r2,zero,8c54 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    8c4c:	00bffd44 	movi	r2,-11
    8c50:	00000b06 	br	8c80 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8c54:	e0bffe17 	ldw	r2,-8(fp)
    8c58:	10c00d17 	ldw	r3,52(r2)
    8c5c:	e0bffe17 	ldw	r2,-8(fp)
    8c60:	10800c17 	ldw	r2,48(r2)
    8c64:	18800526 	beq	r3,r2,8c7c <altera_avalon_jtag_uart_close+0x54>
    8c68:	e0bffe17 	ldw	r2,-8(fp)
    8c6c:	10c00917 	ldw	r3,36(r2)
    8c70:	e0bffe17 	ldw	r2,-8(fp)
    8c74:	10800117 	ldw	r2,4(r2)
    8c78:	18bff136 	bltu	r3,r2,8c40 <__alt_mem_epcs_flash_controller+0xfdfffc40>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    8c7c:	0005883a 	mov	r2,zero
}
    8c80:	e037883a 	mov	sp,fp
    8c84:	df000017 	ldw	fp,0(sp)
    8c88:	dec00104 	addi	sp,sp,4
    8c8c:	f800283a 	ret

00008c90 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    8c90:	defffa04 	addi	sp,sp,-24
    8c94:	df000515 	stw	fp,20(sp)
    8c98:	df000504 	addi	fp,sp,20
    8c9c:	e13ffd15 	stw	r4,-12(fp)
    8ca0:	e17ffe15 	stw	r5,-8(fp)
    8ca4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    8ca8:	00bff9c4 	movi	r2,-25
    8cac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    8cb0:	e0bffe17 	ldw	r2,-8(fp)
    8cb4:	10da8060 	cmpeqi	r3,r2,27137
    8cb8:	1800031e 	bne	r3,zero,8cc8 <altera_avalon_jtag_uart_ioctl+0x38>
    8cbc:	109a80a0 	cmpeqi	r2,r2,27138
    8cc0:	1000181e 	bne	r2,zero,8d24 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    8cc4:	00002906 	br	8d6c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    8cc8:	e0bffd17 	ldw	r2,-12(fp)
    8ccc:	10c00117 	ldw	r3,4(r2)
    8cd0:	00a00034 	movhi	r2,32768
    8cd4:	10bfffc4 	addi	r2,r2,-1
    8cd8:	18802126 	beq	r3,r2,8d60 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    8cdc:	e0bfff17 	ldw	r2,-4(fp)
    8ce0:	10800017 	ldw	r2,0(r2)
    8ce4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    8ce8:	e0bffc17 	ldw	r2,-16(fp)
    8cec:	10800090 	cmplti	r2,r2,2
    8cf0:	1000061e 	bne	r2,zero,8d0c <altera_avalon_jtag_uart_ioctl+0x7c>
    8cf4:	e0fffc17 	ldw	r3,-16(fp)
    8cf8:	00a00034 	movhi	r2,32768
    8cfc:	10bfffc4 	addi	r2,r2,-1
    8d00:	18800226 	beq	r3,r2,8d0c <altera_avalon_jtag_uart_ioctl+0x7c>
    8d04:	e0bffc17 	ldw	r2,-16(fp)
    8d08:	00000206 	br	8d14 <altera_avalon_jtag_uart_ioctl+0x84>
    8d0c:	00a00034 	movhi	r2,32768
    8d10:	10bfff84 	addi	r2,r2,-2
    8d14:	e0fffd17 	ldw	r3,-12(fp)
    8d18:	18800115 	stw	r2,4(r3)
      rc = 0;
    8d1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    8d20:	00000f06 	br	8d60 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    8d24:	e0bffd17 	ldw	r2,-12(fp)
    8d28:	10c00117 	ldw	r3,4(r2)
    8d2c:	00a00034 	movhi	r2,32768
    8d30:	10bfffc4 	addi	r2,r2,-1
    8d34:	18800c26 	beq	r3,r2,8d68 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    8d38:	e0bffd17 	ldw	r2,-12(fp)
    8d3c:	10c00917 	ldw	r3,36(r2)
    8d40:	e0bffd17 	ldw	r2,-12(fp)
    8d44:	10800117 	ldw	r2,4(r2)
    8d48:	1885803a 	cmpltu	r2,r3,r2
    8d4c:	10c03fcc 	andi	r3,r2,255
    8d50:	e0bfff17 	ldw	r2,-4(fp)
    8d54:	10c00015 	stw	r3,0(r2)
      rc = 0;
    8d58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    8d5c:	00000206 	br	8d68 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    8d60:	0001883a 	nop
    8d64:	00000106 	br	8d6c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    8d68:	0001883a 	nop

  default:
    break;
  }

  return rc;
    8d6c:	e0bffb17 	ldw	r2,-20(fp)
}
    8d70:	e037883a 	mov	sp,fp
    8d74:	df000017 	ldw	fp,0(sp)
    8d78:	dec00104 	addi	sp,sp,4
    8d7c:	f800283a 	ret

00008d80 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    8d80:	defff304 	addi	sp,sp,-52
    8d84:	dfc00c15 	stw	ra,48(sp)
    8d88:	df000b15 	stw	fp,44(sp)
    8d8c:	df000b04 	addi	fp,sp,44
    8d90:	e13ffc15 	stw	r4,-16(fp)
    8d94:	e17ffd15 	stw	r5,-12(fp)
    8d98:	e1bffe15 	stw	r6,-8(fp)
    8d9c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    8da0:	e0bffd17 	ldw	r2,-12(fp)
    8da4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8da8:	00004706 	br	8ec8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    8dac:	e0bffc17 	ldw	r2,-16(fp)
    8db0:	10800a17 	ldw	r2,40(r2)
    8db4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    8db8:	e0bffc17 	ldw	r2,-16(fp)
    8dbc:	10800b17 	ldw	r2,44(r2)
    8dc0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    8dc4:	e0fff717 	ldw	r3,-36(fp)
    8dc8:	e0bff817 	ldw	r2,-32(fp)
    8dcc:	18800536 	bltu	r3,r2,8de4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    8dd0:	e0fff717 	ldw	r3,-36(fp)
    8dd4:	e0bff817 	ldw	r2,-32(fp)
    8dd8:	1885c83a 	sub	r2,r3,r2
    8ddc:	e0bff615 	stw	r2,-40(fp)
    8de0:	00000406 	br	8df4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    8de4:	00c20004 	movi	r3,2048
    8de8:	e0bff817 	ldw	r2,-32(fp)
    8dec:	1885c83a 	sub	r2,r3,r2
    8df0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    8df4:	e0bff617 	ldw	r2,-40(fp)
    8df8:	10001e26 	beq	r2,zero,8e74 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    8dfc:	e0fffe17 	ldw	r3,-8(fp)
    8e00:	e0bff617 	ldw	r2,-40(fp)
    8e04:	1880022e 	bgeu	r3,r2,8e10 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    8e08:	e0bffe17 	ldw	r2,-8(fp)
    8e0c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    8e10:	e0bffc17 	ldw	r2,-16(fp)
    8e14:	10c00e04 	addi	r3,r2,56
    8e18:	e0bff817 	ldw	r2,-32(fp)
    8e1c:	1885883a 	add	r2,r3,r2
    8e20:	e1bff617 	ldw	r6,-40(fp)
    8e24:	100b883a 	mov	r5,r2
    8e28:	e13ff517 	ldw	r4,-44(fp)
    8e2c:	00064d00 	call	64d0 <memcpy>
      ptr   += n;
    8e30:	e0fff517 	ldw	r3,-44(fp)
    8e34:	e0bff617 	ldw	r2,-40(fp)
    8e38:	1885883a 	add	r2,r3,r2
    8e3c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    8e40:	e0fffe17 	ldw	r3,-8(fp)
    8e44:	e0bff617 	ldw	r2,-40(fp)
    8e48:	1885c83a 	sub	r2,r3,r2
    8e4c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8e50:	e0fff817 	ldw	r3,-32(fp)
    8e54:	e0bff617 	ldw	r2,-40(fp)
    8e58:	1885883a 	add	r2,r3,r2
    8e5c:	10c1ffcc 	andi	r3,r2,2047
    8e60:	e0bffc17 	ldw	r2,-16(fp)
    8e64:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    8e68:	e0bffe17 	ldw	r2,-8(fp)
    8e6c:	00bfcf16 	blt	zero,r2,8dac <__alt_mem_epcs_flash_controller+0xfdfffdac>
    8e70:	00000106 	br	8e78 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    8e74:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    8e78:	e0fff517 	ldw	r3,-44(fp)
    8e7c:	e0bffd17 	ldw	r2,-12(fp)
    8e80:	1880141e 	bne	r3,r2,8ed4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    8e84:	e0bfff17 	ldw	r2,-4(fp)
    8e88:	1090000c 	andi	r2,r2,16384
    8e8c:	1000131e 	bne	r2,zero,8edc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    8e90:	0001883a 	nop
    8e94:	e0bffc17 	ldw	r2,-16(fp)
    8e98:	10c00a17 	ldw	r3,40(r2)
    8e9c:	e0bff717 	ldw	r2,-36(fp)
    8ea0:	1880051e 	bne	r3,r2,8eb8 <altera_avalon_jtag_uart_read+0x138>
    8ea4:	e0bffc17 	ldw	r2,-16(fp)
    8ea8:	10c00917 	ldw	r3,36(r2)
    8eac:	e0bffc17 	ldw	r2,-16(fp)
    8eb0:	10800117 	ldw	r2,4(r2)
    8eb4:	18bff736 	bltu	r3,r2,8e94 <__alt_mem_epcs_flash_controller+0xfdfffe94>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    8eb8:	e0bffc17 	ldw	r2,-16(fp)
    8ebc:	10c00a17 	ldw	r3,40(r2)
    8ec0:	e0bff717 	ldw	r2,-36(fp)
    8ec4:	18800726 	beq	r3,r2,8ee4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8ec8:	e0bffe17 	ldw	r2,-8(fp)
    8ecc:	00bfb716 	blt	zero,r2,8dac <__alt_mem_epcs_flash_controller+0xfdfffdac>
    8ed0:	00000506 	br	8ee8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    8ed4:	0001883a 	nop
    8ed8:	00000306 	br	8ee8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    8edc:	0001883a 	nop
    8ee0:	00000106 	br	8ee8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    8ee4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    8ee8:	e0fff517 	ldw	r3,-44(fp)
    8eec:	e0bffd17 	ldw	r2,-12(fp)
    8ef0:	18801826 	beq	r3,r2,8f54 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ef4:	0005303a 	rdctl	r2,status
    8ef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8efc:	e0fffb17 	ldw	r3,-20(fp)
    8f00:	00bfff84 	movi	r2,-2
    8f04:	1884703a 	and	r2,r3,r2
    8f08:	1001703a 	wrctl	status,r2
  
  return context;
    8f0c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    8f10:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8f14:	e0bffc17 	ldw	r2,-16(fp)
    8f18:	10800817 	ldw	r2,32(r2)
    8f1c:	10c00054 	ori	r3,r2,1
    8f20:	e0bffc17 	ldw	r2,-16(fp)
    8f24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8f28:	e0bffc17 	ldw	r2,-16(fp)
    8f2c:	10800017 	ldw	r2,0(r2)
    8f30:	10800104 	addi	r2,r2,4
    8f34:	1007883a 	mov	r3,r2
    8f38:	e0bffc17 	ldw	r2,-16(fp)
    8f3c:	10800817 	ldw	r2,32(r2)
    8f40:	18800035 	stwio	r2,0(r3)
    8f44:	e0bffa17 	ldw	r2,-24(fp)
    8f48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8f4c:	e0bff917 	ldw	r2,-28(fp)
    8f50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    8f54:	e0fff517 	ldw	r3,-44(fp)
    8f58:	e0bffd17 	ldw	r2,-12(fp)
    8f5c:	18800426 	beq	r3,r2,8f70 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    8f60:	e0fff517 	ldw	r3,-44(fp)
    8f64:	e0bffd17 	ldw	r2,-12(fp)
    8f68:	1885c83a 	sub	r2,r3,r2
    8f6c:	00000606 	br	8f88 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    8f70:	e0bfff17 	ldw	r2,-4(fp)
    8f74:	1090000c 	andi	r2,r2,16384
    8f78:	10000226 	beq	r2,zero,8f84 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    8f7c:	00bffd44 	movi	r2,-11
    8f80:	00000106 	br	8f88 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    8f84:	00bffec4 	movi	r2,-5
}
    8f88:	e037883a 	mov	sp,fp
    8f8c:	dfc00117 	ldw	ra,4(sp)
    8f90:	df000017 	ldw	fp,0(sp)
    8f94:	dec00204 	addi	sp,sp,8
    8f98:	f800283a 	ret

00008f9c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8f9c:	defff304 	addi	sp,sp,-52
    8fa0:	dfc00c15 	stw	ra,48(sp)
    8fa4:	df000b15 	stw	fp,44(sp)
    8fa8:	df000b04 	addi	fp,sp,44
    8fac:	e13ffc15 	stw	r4,-16(fp)
    8fb0:	e17ffd15 	stw	r5,-12(fp)
    8fb4:	e1bffe15 	stw	r6,-8(fp)
    8fb8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    8fbc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    8fc0:	e0bffd17 	ldw	r2,-12(fp)
    8fc4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    8fc8:	00003706 	br	90a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    8fcc:	e0bffc17 	ldw	r2,-16(fp)
    8fd0:	10800c17 	ldw	r2,48(r2)
    8fd4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    8fd8:	e0bffc17 	ldw	r2,-16(fp)
    8fdc:	10800d17 	ldw	r2,52(r2)
    8fe0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    8fe4:	e0fff917 	ldw	r3,-28(fp)
    8fe8:	e0bff517 	ldw	r2,-44(fp)
    8fec:	1880062e 	bgeu	r3,r2,9008 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    8ff0:	e0fff517 	ldw	r3,-44(fp)
    8ff4:	e0bff917 	ldw	r2,-28(fp)
    8ff8:	1885c83a 	sub	r2,r3,r2
    8ffc:	10bfffc4 	addi	r2,r2,-1
    9000:	e0bff615 	stw	r2,-40(fp)
    9004:	00000b06 	br	9034 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    9008:	e0bff517 	ldw	r2,-44(fp)
    900c:	10000526 	beq	r2,zero,9024 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    9010:	00c20004 	movi	r3,2048
    9014:	e0bff917 	ldw	r2,-28(fp)
    9018:	1885c83a 	sub	r2,r3,r2
    901c:	e0bff615 	stw	r2,-40(fp)
    9020:	00000406 	br	9034 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    9024:	00c1ffc4 	movi	r3,2047
    9028:	e0bff917 	ldw	r2,-28(fp)
    902c:	1885c83a 	sub	r2,r3,r2
    9030:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    9034:	e0bff617 	ldw	r2,-40(fp)
    9038:	10001e26 	beq	r2,zero,90b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    903c:	e0fffe17 	ldw	r3,-8(fp)
    9040:	e0bff617 	ldw	r2,-40(fp)
    9044:	1880022e 	bgeu	r3,r2,9050 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    9048:	e0bffe17 	ldw	r2,-8(fp)
    904c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    9050:	e0bffc17 	ldw	r2,-16(fp)
    9054:	10c20e04 	addi	r3,r2,2104
    9058:	e0bff917 	ldw	r2,-28(fp)
    905c:	1885883a 	add	r2,r3,r2
    9060:	e1bff617 	ldw	r6,-40(fp)
    9064:	e17ffd17 	ldw	r5,-12(fp)
    9068:	1009883a 	mov	r4,r2
    906c:	00064d00 	call	64d0 <memcpy>
      ptr   += n;
    9070:	e0fffd17 	ldw	r3,-12(fp)
    9074:	e0bff617 	ldw	r2,-40(fp)
    9078:	1885883a 	add	r2,r3,r2
    907c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    9080:	e0fffe17 	ldw	r3,-8(fp)
    9084:	e0bff617 	ldw	r2,-40(fp)
    9088:	1885c83a 	sub	r2,r3,r2
    908c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9090:	e0fff917 	ldw	r3,-28(fp)
    9094:	e0bff617 	ldw	r2,-40(fp)
    9098:	1885883a 	add	r2,r3,r2
    909c:	10c1ffcc 	andi	r3,r2,2047
    90a0:	e0bffc17 	ldw	r2,-16(fp)
    90a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    90a8:	e0bffe17 	ldw	r2,-8(fp)
    90ac:	00bfc716 	blt	zero,r2,8fcc <__alt_mem_epcs_flash_controller+0xfdffffcc>
    90b0:	00000106 	br	90b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    90b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    90b8:	0005303a 	rdctl	r2,status
    90bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    90c0:	e0fffb17 	ldw	r3,-20(fp)
    90c4:	00bfff84 	movi	r2,-2
    90c8:	1884703a 	and	r2,r3,r2
    90cc:	1001703a 	wrctl	status,r2
  
  return context;
    90d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    90d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    90d8:	e0bffc17 	ldw	r2,-16(fp)
    90dc:	10800817 	ldw	r2,32(r2)
    90e0:	10c00094 	ori	r3,r2,2
    90e4:	e0bffc17 	ldw	r2,-16(fp)
    90e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    90ec:	e0bffc17 	ldw	r2,-16(fp)
    90f0:	10800017 	ldw	r2,0(r2)
    90f4:	10800104 	addi	r2,r2,4
    90f8:	1007883a 	mov	r3,r2
    90fc:	e0bffc17 	ldw	r2,-16(fp)
    9100:	10800817 	ldw	r2,32(r2)
    9104:	18800035 	stwio	r2,0(r3)
    9108:	e0bffa17 	ldw	r2,-24(fp)
    910c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9110:	e0bff817 	ldw	r2,-32(fp)
    9114:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    9118:	e0bffe17 	ldw	r2,-8(fp)
    911c:	0080100e 	bge	zero,r2,9160 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    9120:	e0bfff17 	ldw	r2,-4(fp)
    9124:	1090000c 	andi	r2,r2,16384
    9128:	1000101e 	bne	r2,zero,916c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    912c:	0001883a 	nop
    9130:	e0bffc17 	ldw	r2,-16(fp)
    9134:	10c00d17 	ldw	r3,52(r2)
    9138:	e0bff517 	ldw	r2,-44(fp)
    913c:	1880051e 	bne	r3,r2,9154 <altera_avalon_jtag_uart_write+0x1b8>
    9140:	e0bffc17 	ldw	r2,-16(fp)
    9144:	10c00917 	ldw	r3,36(r2)
    9148:	e0bffc17 	ldw	r2,-16(fp)
    914c:	10800117 	ldw	r2,4(r2)
    9150:	18bff736 	bltu	r3,r2,9130 <__alt_mem_epcs_flash_controller+0xfe000130>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    9154:	e0bffc17 	ldw	r2,-16(fp)
    9158:	10800917 	ldw	r2,36(r2)
    915c:	1000051e 	bne	r2,zero,9174 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    9160:	e0bffe17 	ldw	r2,-8(fp)
    9164:	00bfd016 	blt	zero,r2,90a8 <__alt_mem_epcs_flash_controller+0xfe0000a8>
    9168:	00000306 	br	9178 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    916c:	0001883a 	nop
    9170:	00000106 	br	9178 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    9174:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    9178:	e0fffd17 	ldw	r3,-12(fp)
    917c:	e0bff717 	ldw	r2,-36(fp)
    9180:	18800426 	beq	r3,r2,9194 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    9184:	e0fffd17 	ldw	r3,-12(fp)
    9188:	e0bff717 	ldw	r2,-36(fp)
    918c:	1885c83a 	sub	r2,r3,r2
    9190:	00000606 	br	91ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    9194:	e0bfff17 	ldw	r2,-4(fp)
    9198:	1090000c 	andi	r2,r2,16384
    919c:	10000226 	beq	r2,zero,91a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    91a0:	00bffd44 	movi	r2,-11
    91a4:	00000106 	br	91ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    91a8:	00bffec4 	movi	r2,-5
}
    91ac:	e037883a 	mov	sp,fp
    91b0:	dfc00117 	ldw	ra,4(sp)
    91b4:	df000017 	ldw	fp,0(sp)
    91b8:	dec00204 	addi	sp,sp,8
    91bc:	f800283a 	ret

000091c0 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    91c0:	defff904 	addi	sp,sp,-28
    91c4:	dfc00615 	stw	ra,24(sp)
    91c8:	df000515 	stw	fp,20(sp)
    91cc:	df000504 	addi	fp,sp,20
    91d0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    91d4:	00800144 	movi	r2,5
    91d8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    91dc:	d8000215 	stw	zero,8(sp)
    91e0:	e0bffe44 	addi	r2,fp,-7
    91e4:	d8800115 	stw	r2,4(sp)
    91e8:	00800044 	movi	r2,1
    91ec:	d8800015 	stw	r2,0(sp)
    91f0:	e1fffe04 	addi	r7,fp,-8
    91f4:	01800044 	movi	r6,1
    91f8:	000b883a 	mov	r5,zero
    91fc:	e13fff17 	ldw	r4,-4(fp)
    9200:	000a4300 	call	a430 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    9204:	e0bffe43 	ldbu	r2,-7(fp)
}
    9208:	e037883a 	mov	sp,fp
    920c:	dfc00117 	ldw	ra,4(sp)
    9210:	df000017 	ldw	fp,0(sp)
    9214:	dec00204 	addi	sp,sp,8
    9218:	f800283a 	ret

0000921c <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    921c:	defffd04 	addi	sp,sp,-12
    9220:	dfc00215 	stw	ra,8(sp)
    9224:	df000115 	stw	fp,4(sp)
    9228:	df000104 	addi	fp,sp,4
    922c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    9230:	e13fff17 	ldw	r4,-4(fp)
    9234:	00091c00 	call	91c0 <epcs_read_status_register>
    9238:	10803fcc 	andi	r2,r2,255
    923c:	1080004c 	andi	r2,r2,1
}
    9240:	e037883a 	mov	sp,fp
    9244:	dfc00117 	ldw	ra,4(sp)
    9248:	df000017 	ldw	fp,0(sp)
    924c:	dec00204 	addi	sp,sp,8
    9250:	f800283a 	ret

00009254 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    9254:	defffd04 	addi	sp,sp,-12
    9258:	dfc00215 	stw	ra,8(sp)
    925c:	df000115 	stw	fp,4(sp)
    9260:	df000104 	addi	fp,sp,4
    9264:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    9268:	0001883a 	nop
    926c:	e13fff17 	ldw	r4,-4(fp)
    9270:	000921c0 	call	921c <epcs_test_wip>
    9274:	103ffd1e 	bne	r2,zero,926c <__alt_mem_epcs_flash_controller+0xfe00026c>
  {
  }
}
    9278:	0001883a 	nop
    927c:	e037883a 	mov	sp,fp
    9280:	dfc00117 	ldw	ra,4(sp)
    9284:	df000017 	ldw	fp,0(sp)
    9288:	dec00204 	addi	sp,sp,8
    928c:	f800283a 	ret

00009290 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    9290:	defff604 	addi	sp,sp,-40
    9294:	dfc00915 	stw	ra,36(sp)
    9298:	df000815 	stw	fp,32(sp)
    929c:	df000804 	addi	fp,sp,32
    92a0:	e13ffd15 	stw	r4,-12(fp)
    92a4:	e17ffe15 	stw	r5,-8(fp)
    92a8:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    92ac:	e0bfff17 	ldw	r2,-4(fp)
    92b0:	10001226 	beq	r2,zero,92fc <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    92b4:	00bff604 	movi	r2,-40
    92b8:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    92bc:	e0bffe17 	ldw	r2,-8(fp)
    92c0:	1004d63a 	srli	r2,r2,24
    92c4:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    92c8:	e0bffe17 	ldw	r2,-8(fp)
    92cc:	1004d43a 	srli	r2,r2,16
    92d0:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    92d4:	e0bffe17 	ldw	r2,-8(fp)
    92d8:	1004d23a 	srli	r2,r2,8
    92dc:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    92e0:	e0bffe17 	ldw	r2,-8(fp)
    92e4:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    92e8:	00800144 	movi	r2,5
    92ec:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    92f0:	e13ffd17 	ldw	r4,-12(fp)
    92f4:	00097440 	call	9744 <epcs_enter_4_bytes_mode>
    92f8:	00000c06 	br	932c <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
    92fc:	00bff604 	movi	r2,-40
    9300:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    9304:	e0bffe17 	ldw	r2,-8(fp)
    9308:	1004d43a 	srli	r2,r2,16
    930c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    9310:	e0bffe17 	ldw	r2,-8(fp)
    9314:	1004d23a 	srli	r2,r2,8
    9318:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    931c:	e0bffe17 	ldw	r2,-8(fp)
    9320:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    9324:	00800104 	movi	r2,4
    9328:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    932c:	e13ffd17 	ldw	r4,-12(fp)
    9330:	00094800 	call	9480 <epcs_write_enable>

  alt_avalon_spi_command(
    9334:	e0bffb03 	ldbu	r2,-20(fp)
    9338:	e0fffb44 	addi	r3,fp,-19
    933c:	d8000215 	stw	zero,8(sp)
    9340:	d8000115 	stw	zero,4(sp)
    9344:	d8000015 	stw	zero,0(sp)
    9348:	180f883a 	mov	r7,r3
    934c:	100d883a 	mov	r6,r2
    9350:	000b883a 	mov	r5,zero
    9354:	e13ffd17 	ldw	r4,-12(fp)
    9358:	000a4300 	call	a430 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    935c:	e13ffd17 	ldw	r4,-12(fp)
    9360:	00092540 	call	9254 <epcs_await_wip_released>

  if(four_bytes_mode)
    9364:	e0bfff17 	ldw	r2,-4(fp)
    9368:	10000226 	beq	r2,zero,9374 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    936c:	e13ffd17 	ldw	r4,-12(fp)
    9370:	00097a00 	call	97a0 <epcs_exit_4_bytes_mode>
  }
}
    9374:	0001883a 	nop
    9378:	e037883a 	mov	sp,fp
    937c:	dfc00117 	ldw	ra,4(sp)
    9380:	df000017 	ldw	fp,0(sp)
    9384:	dec00204 	addi	sp,sp,8
    9388:	f800283a 	ret

0000938c <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    938c:	defff404 	addi	sp,sp,-48
    9390:	dfc00b15 	stw	ra,44(sp)
    9394:	df000a15 	stw	fp,40(sp)
    9398:	df000a04 	addi	fp,sp,40
    939c:	e13ffc15 	stw	r4,-16(fp)
    93a0:	e17ffd15 	stw	r5,-12(fp)
    93a4:	e1bffe15 	stw	r6,-8(fp)
    93a8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    93ac:	008000c4 	movi	r2,3
    93b0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    93b4:	e0800217 	ldw	r2,8(fp)
    93b8:	10001026 	beq	r2,zero,93fc <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    93bc:	e0bffd17 	ldw	r2,-12(fp)
    93c0:	1004d63a 	srli	r2,r2,24
    93c4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    93c8:	e0bffd17 	ldw	r2,-12(fp)
    93cc:	1005d43a 	srai	r2,r2,16
    93d0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    93d4:	e0bffd17 	ldw	r2,-12(fp)
    93d8:	1005d23a 	srai	r2,r2,8
    93dc:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    93e0:	e0bffd17 	ldw	r2,-12(fp)
    93e4:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    93e8:	00800144 	movi	r2,5
    93ec:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    93f0:	e13ffc17 	ldw	r4,-16(fp)
    93f4:	00097440 	call	9744 <epcs_enter_4_bytes_mode>
    93f8:	00000a06 	br	9424 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    93fc:	e0bffd17 	ldw	r2,-12(fp)
    9400:	1005d43a 	srai	r2,r2,16
    9404:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    9408:	e0bffd17 	ldw	r2,-12(fp)
    940c:	1005d23a 	srai	r2,r2,8
    9410:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    9414:	e0bffd17 	ldw	r2,-12(fp)
    9418:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    941c:	00800104 	movi	r2,4
    9420:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    9424:	e13ffc17 	ldw	r4,-16(fp)
    9428:	00092540 	call	9254 <epcs_await_wip_released>

  alt_avalon_spi_command(
    942c:	e0bfff17 	ldw	r2,-4(fp)
    9430:	e13ffa04 	addi	r4,fp,-24
    9434:	d8000215 	stw	zero,8(sp)
    9438:	e0fffe17 	ldw	r3,-8(fp)
    943c:	d8c00115 	stw	r3,4(sp)
    9440:	d8800015 	stw	r2,0(sp)
    9444:	200f883a 	mov	r7,r4
    9448:	e1bff917 	ldw	r6,-28(fp)
    944c:	000b883a 	mov	r5,zero
    9450:	e13ffc17 	ldw	r4,-16(fp)
    9454:	000a4300 	call	a430 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    9458:	e0800217 	ldw	r2,8(fp)
    945c:	10000226 	beq	r2,zero,9468 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
    9460:	e13ffc17 	ldw	r4,-16(fp)
    9464:	00097a00 	call	97a0 <epcs_exit_4_bytes_mode>
  }

  return length;
    9468:	e0bfff17 	ldw	r2,-4(fp)
}
    946c:	e037883a 	mov	sp,fp
    9470:	dfc00117 	ldw	ra,4(sp)
    9474:	df000017 	ldw	fp,0(sp)
    9478:	dec00204 	addi	sp,sp,8
    947c:	f800283a 	ret

00009480 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    9480:	defff904 	addi	sp,sp,-28
    9484:	dfc00615 	stw	ra,24(sp)
    9488:	df000515 	stw	fp,20(sp)
    948c:	df000504 	addi	fp,sp,20
    9490:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    9494:	00800184 	movi	r2,6
    9498:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    949c:	d8000215 	stw	zero,8(sp)
    94a0:	d8000115 	stw	zero,4(sp)
    94a4:	d8000015 	stw	zero,0(sp)
    94a8:	e1fffe04 	addi	r7,fp,-8
    94ac:	01800044 	movi	r6,1
    94b0:	000b883a 	mov	r5,zero
    94b4:	e13fff17 	ldw	r4,-4(fp)
    94b8:	000a4300 	call	a430 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    94bc:	0001883a 	nop
    94c0:	e037883a 	mov	sp,fp
    94c4:	dfc00117 	ldw	ra,4(sp)
    94c8:	df000017 	ldw	fp,0(sp)
    94cc:	dec00204 	addi	sp,sp,8
    94d0:	f800283a 	ret

000094d4 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    94d4:	defff804 	addi	sp,sp,-32
    94d8:	dfc00715 	stw	ra,28(sp)
    94dc:	df000615 	stw	fp,24(sp)
    94e0:	df000604 	addi	fp,sp,24
    94e4:	e13ffe15 	stw	r4,-8(fp)
    94e8:	2805883a 	mov	r2,r5
    94ec:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    94f0:	00800044 	movi	r2,1
    94f4:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    94f8:	e0bfff03 	ldbu	r2,-4(fp)
    94fc:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    9500:	d8000215 	stw	zero,8(sp)
    9504:	d8000115 	stw	zero,4(sp)
    9508:	d8000015 	stw	zero,0(sp)
    950c:	e1fffd04 	addi	r7,fp,-12
    9510:	01800084 	movi	r6,2
    9514:	000b883a 	mov	r5,zero
    9518:	e13ffe17 	ldw	r4,-8(fp)
    951c:	000a4300 	call	a430 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    9520:	e13ffe17 	ldw	r4,-8(fp)
    9524:	00092540 	call	9254 <epcs_await_wip_released>
}
    9528:	0001883a 	nop
    952c:	e037883a 	mov	sp,fp
    9530:	dfc00117 	ldw	ra,4(sp)
    9534:	df000017 	ldw	fp,0(sp)
    9538:	dec00204 	addi	sp,sp,8
    953c:	f800283a 	ret

00009540 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    9540:	defff404 	addi	sp,sp,-48
    9544:	dfc00b15 	stw	ra,44(sp)
    9548:	df000a15 	stw	fp,40(sp)
    954c:	df000a04 	addi	fp,sp,40
    9550:	e13ffc15 	stw	r4,-16(fp)
    9554:	e17ffd15 	stw	r5,-12(fp)
    9558:	e1bffe15 	stw	r6,-8(fp)
    955c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    9560:	00800084 	movi	r2,2
    9564:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    9568:	e0800217 	ldw	r2,8(fp)
    956c:	10001026 	beq	r2,zero,95b0 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
    9570:	e0bffd17 	ldw	r2,-12(fp)
    9574:	1004d63a 	srli	r2,r2,24
    9578:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    957c:	e0bffd17 	ldw	r2,-12(fp)
    9580:	1005d43a 	srai	r2,r2,16
    9584:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    9588:	e0bffd17 	ldw	r2,-12(fp)
    958c:	1005d23a 	srai	r2,r2,8
    9590:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    9594:	e0bffd17 	ldw	r2,-12(fp)
    9598:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    959c:	00800144 	movi	r2,5
    95a0:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    95a4:	e13ffc17 	ldw	r4,-16(fp)
    95a8:	00097440 	call	9744 <epcs_enter_4_bytes_mode>
    95ac:	00000a06 	br	95d8 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    95b0:	e0bffd17 	ldw	r2,-12(fp)
    95b4:	1005d43a 	srai	r2,r2,16
    95b8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    95bc:	e0bffd17 	ldw	r2,-12(fp)
    95c0:	1005d23a 	srai	r2,r2,8
    95c4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    95c8:	e0bffd17 	ldw	r2,-12(fp)
    95cc:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    95d0:	00800104 	movi	r2,4
    95d4:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    95d8:	e13ffc17 	ldw	r4,-16(fp)
    95dc:	00094800 	call	9480 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    95e0:	e0fffa04 	addi	r3,fp,-24
    95e4:	00800044 	movi	r2,1
    95e8:	d8800215 	stw	r2,8(sp)
    95ec:	d8000115 	stw	zero,4(sp)
    95f0:	d8000015 	stw	zero,0(sp)
    95f4:	180f883a 	mov	r7,r3
    95f8:	e1bff917 	ldw	r6,-28(fp)
    95fc:	000b883a 	mov	r5,zero
    9600:	e13ffc17 	ldw	r4,-16(fp)
    9604:	000a4300 	call	a430 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    9608:	e0bfff17 	ldw	r2,-4(fp)
    960c:	d8000215 	stw	zero,8(sp)
    9610:	d8000115 	stw	zero,4(sp)
    9614:	d8000015 	stw	zero,0(sp)
    9618:	e1fffe17 	ldw	r7,-8(fp)
    961c:	100d883a 	mov	r6,r2
    9620:	000b883a 	mov	r5,zero
    9624:	e13ffc17 	ldw	r4,-16(fp)
    9628:	000a4300 	call	a430 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    962c:	e13ffc17 	ldw	r4,-16(fp)
    9630:	00092540 	call	9254 <epcs_await_wip_released>

  if(four_bytes_mode)
    9634:	e0800217 	ldw	r2,8(fp)
    9638:	10000226 	beq	r2,zero,9644 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
    963c:	e13ffc17 	ldw	r4,-16(fp)
    9640:	00097a00 	call	97a0 <epcs_exit_4_bytes_mode>
  }

  return length;
    9644:	e0bfff17 	ldw	r2,-4(fp)
}
    9648:	e037883a 	mov	sp,fp
    964c:	dfc00117 	ldw	ra,4(sp)
    9650:	df000017 	ldw	fp,0(sp)
    9654:	dec00204 	addi	sp,sp,8
    9658:	f800283a 	ret

0000965c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    965c:	defff804 	addi	sp,sp,-32
    9660:	dfc00715 	stw	ra,28(sp)
    9664:	df000615 	stw	fp,24(sp)
    9668:	df000604 	addi	fp,sp,24
    966c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    9670:	00bfeac4 	movi	r2,-85
    9674:	e0bffd05 	stb	r2,-12(fp)
    9678:	e03ffd45 	stb	zero,-11(fp)
    967c:	e03ffd85 	stb	zero,-10(fp)
    9680:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    9684:	d8000215 	stw	zero,8(sp)
    9688:	e0bffe04 	addi	r2,fp,-8
    968c:	d8800115 	stw	r2,4(sp)
    9690:	00800044 	movi	r2,1
    9694:	d8800015 	stw	r2,0(sp)
    9698:	e1fffd04 	addi	r7,fp,-12
    969c:	01800104 	movi	r6,4
    96a0:	000b883a 	mov	r5,zero
    96a4:	e13fff17 	ldw	r4,-4(fp)
    96a8:	000a4300 	call	a430 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    96ac:	e0bffe03 	ldbu	r2,-8(fp)
}
    96b0:	e037883a 	mov	sp,fp
    96b4:	dfc00117 	ldw	ra,4(sp)
    96b8:	df000017 	ldw	fp,0(sp)
    96bc:	dec00204 	addi	sp,sp,8
    96c0:	f800283a 	ret

000096c4 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    96c4:	defff904 	addi	sp,sp,-28
    96c8:	dfc00615 	stw	ra,24(sp)
    96cc:	df000515 	stw	fp,20(sp)
    96d0:	df000504 	addi	fp,sp,20
    96d4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    96d8:	00bfe7c4 	movi	r2,-97
    96dc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    96e0:	d8000215 	stw	zero,8(sp)
    96e4:	e0bffe44 	addi	r2,fp,-7
    96e8:	d8800115 	stw	r2,4(sp)
    96ec:	008000c4 	movi	r2,3
    96f0:	d8800015 	stw	r2,0(sp)
    96f4:	e1fffe04 	addi	r7,fp,-8
    96f8:	01800044 	movi	r6,1
    96fc:	000b883a 	mov	r5,zero
    9700:	e13fff17 	ldw	r4,-4(fp)
    9704:	000a4300 	call	a430 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    9708:	e0bffe43 	ldbu	r2,-7(fp)
    970c:	10803fcc 	andi	r2,r2,255
    9710:	1006943a 	slli	r3,r2,16
    9714:	e0bffe83 	ldbu	r2,-6(fp)
    9718:	10803fcc 	andi	r2,r2,255
    971c:	1004923a 	slli	r2,r2,8
    9720:	1886b03a 	or	r3,r3,r2
    9724:	e0bffec3 	ldbu	r2,-5(fp)
    9728:	10803fcc 	andi	r2,r2,255
    972c:	1884b03a 	or	r2,r3,r2
}
    9730:	e037883a 	mov	sp,fp
    9734:	dfc00117 	ldw	ra,4(sp)
    9738:	df000017 	ldw	fp,0(sp)
    973c:	dec00204 	addi	sp,sp,8
    9740:	f800283a 	ret

00009744 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    9744:	defff904 	addi	sp,sp,-28
    9748:	dfc00615 	stw	ra,24(sp)
    974c:	df000515 	stw	fp,20(sp)
    9750:	df000504 	addi	fp,sp,20
    9754:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    9758:	00bfedc4 	movi	r2,-73
    975c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    9760:	e13fff17 	ldw	r4,-4(fp)
    9764:	00094800 	call	9480 <epcs_write_enable>

  alt_avalon_spi_command(
    9768:	d8000215 	stw	zero,8(sp)
    976c:	d8000115 	stw	zero,4(sp)
    9770:	d8000015 	stw	zero,0(sp)
    9774:	e1fffe04 	addi	r7,fp,-8
    9778:	01800044 	movi	r6,1
    977c:	000b883a 	mov	r5,zero
    9780:	e13fff17 	ldw	r4,-4(fp)
    9784:	000a4300 	call	a430 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    9788:	0001883a 	nop
}
    978c:	e037883a 	mov	sp,fp
    9790:	dfc00117 	ldw	ra,4(sp)
    9794:	df000017 	ldw	fp,0(sp)
    9798:	dec00204 	addi	sp,sp,8
    979c:	f800283a 	ret

000097a0 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    97a0:	defff904 	addi	sp,sp,-28
    97a4:	dfc00615 	stw	ra,24(sp)
    97a8:	df000515 	stw	fp,20(sp)
    97ac:	df000504 	addi	fp,sp,20
    97b0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    97b4:	00bffa44 	movi	r2,-23
    97b8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    97bc:	e13fff17 	ldw	r4,-4(fp)
    97c0:	00094800 	call	9480 <epcs_write_enable>

  alt_avalon_spi_command(
    97c4:	d8000215 	stw	zero,8(sp)
    97c8:	d8000115 	stw	zero,4(sp)
    97cc:	d8000015 	stw	zero,0(sp)
    97d0:	e1fffe04 	addi	r7,fp,-8
    97d4:	01800044 	movi	r6,1
    97d8:	000b883a 	mov	r5,zero
    97dc:	e13fff17 	ldw	r4,-4(fp)
    97e0:	000a4300 	call	a430 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    97e4:	0001883a 	nop
}
    97e8:	e037883a 	mov	sp,fp
    97ec:	dfc00117 	ldw	ra,4(sp)
    97f0:	df000017 	ldw	fp,0(sp)
    97f4:	dec00204 	addi	sp,sp,8
    97f8:	f800283a 	ret

000097fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    97fc:	defff504 	addi	sp,sp,-44
    9800:	df000a15 	stw	fp,40(sp)
    9804:	df000a04 	addi	fp,sp,40
    9808:	e13ffc15 	stw	r4,-16(fp)
    980c:	e17ffd15 	stw	r5,-12(fp)
    9810:	e1bffe15 	stw	r6,-8(fp)
    9814:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    9818:	e03ff615 	stw	zero,-40(fp)
    981c:	d0a51917 	ldw	r2,-27548(gp)
  
  if (alt_ticks_per_second ())
    9820:	10003c26 	beq	r2,zero,9914 <alt_alarm_start+0x118>
  {
    if (alarm)
    9824:	e0bffc17 	ldw	r2,-16(fp)
    9828:	10003826 	beq	r2,zero,990c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    982c:	e0bffc17 	ldw	r2,-16(fp)
    9830:	e0fffe17 	ldw	r3,-8(fp)
    9834:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    9838:	e0bffc17 	ldw	r2,-16(fp)
    983c:	e0ffff17 	ldw	r3,-4(fp)
    9840:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9844:	0005303a 	rdctl	r2,status
    9848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    984c:	e0fff917 	ldw	r3,-28(fp)
    9850:	00bfff84 	movi	r2,-2
    9854:	1884703a 	and	r2,r3,r2
    9858:	1001703a 	wrctl	status,r2
  
  return context;
    985c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    9860:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    9864:	d0a51a17 	ldw	r2,-27544(gp)
      
      current_nticks = alt_nticks();
    9868:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    986c:	e0fffd17 	ldw	r3,-12(fp)
    9870:	e0bff617 	ldw	r2,-40(fp)
    9874:	1885883a 	add	r2,r3,r2
    9878:	10c00044 	addi	r3,r2,1
    987c:	e0bffc17 	ldw	r2,-16(fp)
    9880:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    9884:	e0bffc17 	ldw	r2,-16(fp)
    9888:	10c00217 	ldw	r3,8(r2)
    988c:	e0bff617 	ldw	r2,-40(fp)
    9890:	1880042e 	bgeu	r3,r2,98a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    9894:	e0bffc17 	ldw	r2,-16(fp)
    9898:	00c00044 	movi	r3,1
    989c:	10c00405 	stb	r3,16(r2)
    98a0:	00000206 	br	98ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    98a4:	e0bffc17 	ldw	r2,-16(fp)
    98a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    98ac:	e0bffc17 	ldw	r2,-16(fp)
    98b0:	d0e00404 	addi	r3,gp,-32752
    98b4:	e0fffa15 	stw	r3,-24(fp)
    98b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    98bc:	e0bffb17 	ldw	r2,-20(fp)
    98c0:	e0fffa17 	ldw	r3,-24(fp)
    98c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    98c8:	e0bffa17 	ldw	r2,-24(fp)
    98cc:	10c00017 	ldw	r3,0(r2)
    98d0:	e0bffb17 	ldw	r2,-20(fp)
    98d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    98d8:	e0bffa17 	ldw	r2,-24(fp)
    98dc:	10800017 	ldw	r2,0(r2)
    98e0:	e0fffb17 	ldw	r3,-20(fp)
    98e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    98e8:	e0bffa17 	ldw	r2,-24(fp)
    98ec:	e0fffb17 	ldw	r3,-20(fp)
    98f0:	10c00015 	stw	r3,0(r2)
    98f4:	e0bff817 	ldw	r2,-32(fp)
    98f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    98fc:	e0bff717 	ldw	r2,-36(fp)
    9900:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    9904:	0005883a 	mov	r2,zero
    9908:	00000306 	br	9918 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    990c:	00bffa84 	movi	r2,-22
    9910:	00000106 	br	9918 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    9914:	00bfde84 	movi	r2,-134
  }
}
    9918:	e037883a 	mov	sp,fp
    991c:	df000017 	ldw	fp,0(sp)
    9920:	dec00104 	addi	sp,sp,4
    9924:	f800283a 	ret

00009928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9928:	defffe04 	addi	sp,sp,-8
    992c:	dfc00115 	stw	ra,4(sp)
    9930:	df000015 	stw	fp,0(sp)
    9934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9938:	d0a00b17 	ldw	r2,-32724(gp)
    993c:	10000326 	beq	r2,zero,994c <alt_get_errno+0x24>
    9940:	d0a00b17 	ldw	r2,-32724(gp)
    9944:	103ee83a 	callr	r2
    9948:	00000106 	br	9950 <alt_get_errno+0x28>
    994c:	d0a51104 	addi	r2,gp,-27580
}
    9950:	e037883a 	mov	sp,fp
    9954:	dfc00117 	ldw	ra,4(sp)
    9958:	df000017 	ldw	fp,0(sp)
    995c:	dec00204 	addi	sp,sp,8
    9960:	f800283a 	ret

00009964 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9964:	defffb04 	addi	sp,sp,-20
    9968:	dfc00415 	stw	ra,16(sp)
    996c:	df000315 	stw	fp,12(sp)
    9970:	df000304 	addi	fp,sp,12
    9974:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9978:	e0bfff17 	ldw	r2,-4(fp)
    997c:	10000816 	blt	r2,zero,99a0 <close+0x3c>
    9980:	01400304 	movi	r5,12
    9984:	e13fff17 	ldw	r4,-4(fp)
    9988:	00064800 	call	6480 <__mulsi3>
    998c:	1007883a 	mov	r3,r2
    9990:	00800074 	movhi	r2,1
    9994:	108a9304 	addi	r2,r2,10828
    9998:	1885883a 	add	r2,r3,r2
    999c:	00000106 	br	99a4 <close+0x40>
    99a0:	0005883a 	mov	r2,zero
    99a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    99a8:	e0bffd17 	ldw	r2,-12(fp)
    99ac:	10001926 	beq	r2,zero,9a14 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    99b0:	e0bffd17 	ldw	r2,-12(fp)
    99b4:	10800017 	ldw	r2,0(r2)
    99b8:	10800417 	ldw	r2,16(r2)
    99bc:	10000626 	beq	r2,zero,99d8 <close+0x74>
    99c0:	e0bffd17 	ldw	r2,-12(fp)
    99c4:	10800017 	ldw	r2,0(r2)
    99c8:	10800417 	ldw	r2,16(r2)
    99cc:	e13ffd17 	ldw	r4,-12(fp)
    99d0:	103ee83a 	callr	r2
    99d4:	00000106 	br	99dc <close+0x78>
    99d8:	0005883a 	mov	r2,zero
    99dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    99e0:	e13fff17 	ldw	r4,-4(fp)
    99e4:	000a3880 	call	a388 <alt_release_fd>
    if (rval < 0)
    99e8:	e0bffe17 	ldw	r2,-8(fp)
    99ec:	1000070e 	bge	r2,zero,9a0c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    99f0:	00099280 	call	9928 <alt_get_errno>
    99f4:	1007883a 	mov	r3,r2
    99f8:	e0bffe17 	ldw	r2,-8(fp)
    99fc:	0085c83a 	sub	r2,zero,r2
    9a00:	18800015 	stw	r2,0(r3)
      return -1;
    9a04:	00bfffc4 	movi	r2,-1
    9a08:	00000706 	br	9a28 <close+0xc4>
    }
    return 0;
    9a0c:	0005883a 	mov	r2,zero
    9a10:	00000506 	br	9a28 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9a14:	00099280 	call	9928 <alt_get_errno>
    9a18:	1007883a 	mov	r3,r2
    9a1c:	00801444 	movi	r2,81
    9a20:	18800015 	stw	r2,0(r3)
    return -1;
    9a24:	00bfffc4 	movi	r2,-1
  }
}
    9a28:	e037883a 	mov	sp,fp
    9a2c:	dfc00117 	ldw	ra,4(sp)
    9a30:	df000017 	ldw	fp,0(sp)
    9a34:	dec00204 	addi	sp,sp,8
    9a38:	f800283a 	ret

00009a3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9a3c:	deffff04 	addi	sp,sp,-4
    9a40:	df000015 	stw	fp,0(sp)
    9a44:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9a48:	0001883a 	nop
    9a4c:	e037883a 	mov	sp,fp
    9a50:	df000017 	ldw	fp,0(sp)
    9a54:	dec00104 	addi	sp,sp,4
    9a58:	f800283a 	ret

00009a5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9a5c:	defffc04 	addi	sp,sp,-16
    9a60:	df000315 	stw	fp,12(sp)
    9a64:	df000304 	addi	fp,sp,12
    9a68:	e13ffd15 	stw	r4,-12(fp)
    9a6c:	e17ffe15 	stw	r5,-8(fp)
    9a70:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9a74:	e0bfff17 	ldw	r2,-4(fp)
}
    9a78:	e037883a 	mov	sp,fp
    9a7c:	df000017 	ldw	fp,0(sp)
    9a80:	dec00104 	addi	sp,sp,4
    9a84:	f800283a 	ret

00009a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9a88:	defffe04 	addi	sp,sp,-8
    9a8c:	dfc00115 	stw	ra,4(sp)
    9a90:	df000015 	stw	fp,0(sp)
    9a94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9a98:	d0a00b17 	ldw	r2,-32724(gp)
    9a9c:	10000326 	beq	r2,zero,9aac <alt_get_errno+0x24>
    9aa0:	d0a00b17 	ldw	r2,-32724(gp)
    9aa4:	103ee83a 	callr	r2
    9aa8:	00000106 	br	9ab0 <alt_get_errno+0x28>
    9aac:	d0a51104 	addi	r2,gp,-27580
}
    9ab0:	e037883a 	mov	sp,fp
    9ab4:	dfc00117 	ldw	ra,4(sp)
    9ab8:	df000017 	ldw	fp,0(sp)
    9abc:	dec00204 	addi	sp,sp,8
    9ac0:	f800283a 	ret

00009ac4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9ac4:	defffa04 	addi	sp,sp,-24
    9ac8:	dfc00515 	stw	ra,20(sp)
    9acc:	df000415 	stw	fp,16(sp)
    9ad0:	df000404 	addi	fp,sp,16
    9ad4:	e13ffe15 	stw	r4,-8(fp)
    9ad8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9adc:	e0bffe17 	ldw	r2,-8(fp)
    9ae0:	10000326 	beq	r2,zero,9af0 <alt_dev_llist_insert+0x2c>
    9ae4:	e0bffe17 	ldw	r2,-8(fp)
    9ae8:	10800217 	ldw	r2,8(r2)
    9aec:	1000061e 	bne	r2,zero,9b08 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9af0:	0009a880 	call	9a88 <alt_get_errno>
    9af4:	1007883a 	mov	r3,r2
    9af8:	00800584 	movi	r2,22
    9afc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9b00:	00bffa84 	movi	r2,-22
    9b04:	00001306 	br	9b54 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9b08:	e0bffe17 	ldw	r2,-8(fp)
    9b0c:	e0ffff17 	ldw	r3,-4(fp)
    9b10:	e0fffc15 	stw	r3,-16(fp)
    9b14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9b18:	e0bffd17 	ldw	r2,-12(fp)
    9b1c:	e0fffc17 	ldw	r3,-16(fp)
    9b20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9b24:	e0bffc17 	ldw	r2,-16(fp)
    9b28:	10c00017 	ldw	r3,0(r2)
    9b2c:	e0bffd17 	ldw	r2,-12(fp)
    9b30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9b34:	e0bffc17 	ldw	r2,-16(fp)
    9b38:	10800017 	ldw	r2,0(r2)
    9b3c:	e0fffd17 	ldw	r3,-12(fp)
    9b40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9b44:	e0bffc17 	ldw	r2,-16(fp)
    9b48:	e0fffd17 	ldw	r3,-12(fp)
    9b4c:	10c00015 	stw	r3,0(r2)

  return 0;  
    9b50:	0005883a 	mov	r2,zero
}
    9b54:	e037883a 	mov	sp,fp
    9b58:	dfc00117 	ldw	ra,4(sp)
    9b5c:	df000017 	ldw	fp,0(sp)
    9b60:	dec00204 	addi	sp,sp,8
    9b64:	f800283a 	ret

00009b68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9b68:	defffd04 	addi	sp,sp,-12
    9b6c:	dfc00215 	stw	ra,8(sp)
    9b70:	df000115 	stw	fp,4(sp)
    9b74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9b78:	00800074 	movhi	r2,1
    9b7c:	10ac9904 	addi	r2,r2,-19868
    9b80:	e0bfff15 	stw	r2,-4(fp)
    9b84:	00000606 	br	9ba0 <_do_ctors+0x38>
        (*ctor) (); 
    9b88:	e0bfff17 	ldw	r2,-4(fp)
    9b8c:	10800017 	ldw	r2,0(r2)
    9b90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9b94:	e0bfff17 	ldw	r2,-4(fp)
    9b98:	10bfff04 	addi	r2,r2,-4
    9b9c:	e0bfff15 	stw	r2,-4(fp)
    9ba0:	e0ffff17 	ldw	r3,-4(fp)
    9ba4:	00800074 	movhi	r2,1
    9ba8:	10ac9a04 	addi	r2,r2,-19864
    9bac:	18bff62e 	bgeu	r3,r2,9b88 <__alt_mem_epcs_flash_controller+0xfe000b88>
        (*ctor) (); 
}
    9bb0:	0001883a 	nop
    9bb4:	e037883a 	mov	sp,fp
    9bb8:	dfc00117 	ldw	ra,4(sp)
    9bbc:	df000017 	ldw	fp,0(sp)
    9bc0:	dec00204 	addi	sp,sp,8
    9bc4:	f800283a 	ret

00009bc8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9bc8:	defffd04 	addi	sp,sp,-12
    9bcc:	dfc00215 	stw	ra,8(sp)
    9bd0:	df000115 	stw	fp,4(sp)
    9bd4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9bd8:	00800074 	movhi	r2,1
    9bdc:	10ac9904 	addi	r2,r2,-19868
    9be0:	e0bfff15 	stw	r2,-4(fp)
    9be4:	00000606 	br	9c00 <_do_dtors+0x38>
        (*dtor) (); 
    9be8:	e0bfff17 	ldw	r2,-4(fp)
    9bec:	10800017 	ldw	r2,0(r2)
    9bf0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9bf4:	e0bfff17 	ldw	r2,-4(fp)
    9bf8:	10bfff04 	addi	r2,r2,-4
    9bfc:	e0bfff15 	stw	r2,-4(fp)
    9c00:	e0ffff17 	ldw	r3,-4(fp)
    9c04:	00800074 	movhi	r2,1
    9c08:	10ac9a04 	addi	r2,r2,-19864
    9c0c:	18bff62e 	bgeu	r3,r2,9be8 <__alt_mem_epcs_flash_controller+0xfe000be8>
        (*dtor) (); 
}
    9c10:	0001883a 	nop
    9c14:	e037883a 	mov	sp,fp
    9c18:	dfc00117 	ldw	ra,4(sp)
    9c1c:	df000017 	ldw	fp,0(sp)
    9c20:	dec00204 	addi	sp,sp,8
    9c24:	f800283a 	ret

00009c28 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    9c28:	defffc04 	addi	sp,sp,-16
    9c2c:	dfc00315 	stw	ra,12(sp)
    9c30:	df000215 	stw	fp,8(sp)
    9c34:	df000204 	addi	fp,sp,8
    9c38:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    9c3c:	d1600c04 	addi	r5,gp,-32720
    9c40:	e13fff17 	ldw	r4,-4(fp)
    9c44:	000a62c0 	call	a62c <alt_find_dev>
    9c48:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
    9c4c:	e0bffe17 	ldw	r2,-8(fp)
    9c50:	10000926 	beq	r2,zero,9c78 <alt_flash_open_dev+0x50>
    9c54:	e0bffe17 	ldw	r2,-8(fp)
    9c58:	10800317 	ldw	r2,12(r2)
    9c5c:	10000626 	beq	r2,zero,9c78 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
    9c60:	e0bffe17 	ldw	r2,-8(fp)
    9c64:	10800317 	ldw	r2,12(r2)
    9c68:	e17fff17 	ldw	r5,-4(fp)
    9c6c:	e13ffe17 	ldw	r4,-8(fp)
    9c70:	103ee83a 	callr	r2
    9c74:	00000106 	br	9c7c <alt_flash_open_dev+0x54>
  }

  return dev;
    9c78:	e0bffe17 	ldw	r2,-8(fp)
}
    9c7c:	e037883a 	mov	sp,fp
    9c80:	dfc00117 	ldw	ra,4(sp)
    9c84:	df000017 	ldw	fp,0(sp)
    9c88:	dec00204 	addi	sp,sp,8
    9c8c:	f800283a 	ret

00009c90 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    9c90:	defffd04 	addi	sp,sp,-12
    9c94:	dfc00215 	stw	ra,8(sp)
    9c98:	df000115 	stw	fp,4(sp)
    9c9c:	df000104 	addi	fp,sp,4
    9ca0:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    9ca4:	e0bfff17 	ldw	r2,-4(fp)
    9ca8:	10000826 	beq	r2,zero,9ccc <alt_flash_close_dev+0x3c>
    9cac:	e0bfff17 	ldw	r2,-4(fp)
    9cb0:	10800417 	ldw	r2,16(r2)
    9cb4:	10000526 	beq	r2,zero,9ccc <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
    9cb8:	e0bfff17 	ldw	r2,-4(fp)
    9cbc:	10800417 	ldw	r2,16(r2)
    9cc0:	e13fff17 	ldw	r4,-4(fp)
    9cc4:	103ee83a 	callr	r2
  }
  return;
    9cc8:	0001883a 	nop
    9ccc:	0001883a 	nop
}
    9cd0:	e037883a 	mov	sp,fp
    9cd4:	dfc00117 	ldw	ra,4(sp)
    9cd8:	df000017 	ldw	fp,0(sp)
    9cdc:	dec00204 	addi	sp,sp,8
    9ce0:	f800283a 	ret

00009ce4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9ce4:	deffff04 	addi	sp,sp,-4
    9ce8:	df000015 	stw	fp,0(sp)
    9cec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9cf0:	0001883a 	nop
    9cf4:	e037883a 	mov	sp,fp
    9cf8:	df000017 	ldw	fp,0(sp)
    9cfc:	dec00104 	addi	sp,sp,4
    9d00:	f800283a 	ret

00009d04 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9d04:	defff904 	addi	sp,sp,-28
    9d08:	dfc00615 	stw	ra,24(sp)
    9d0c:	df000515 	stw	fp,20(sp)
    9d10:	df000504 	addi	fp,sp,20
    9d14:	e13ffc15 	stw	r4,-16(fp)
    9d18:	e17ffd15 	stw	r5,-12(fp)
    9d1c:	e1bffe15 	stw	r6,-8(fp)
    9d20:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9d24:	e0800217 	ldw	r2,8(fp)
    9d28:	d8800015 	stw	r2,0(sp)
    9d2c:	e1ffff17 	ldw	r7,-4(fp)
    9d30:	e1bffe17 	ldw	r6,-8(fp)
    9d34:	e17ffd17 	ldw	r5,-12(fp)
    9d38:	e13ffc17 	ldw	r4,-16(fp)
    9d3c:	0009eb40 	call	9eb4 <alt_iic_isr_register>
}  
    9d40:	e037883a 	mov	sp,fp
    9d44:	dfc00117 	ldw	ra,4(sp)
    9d48:	df000017 	ldw	fp,0(sp)
    9d4c:	dec00204 	addi	sp,sp,8
    9d50:	f800283a 	ret

00009d54 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9d54:	defff904 	addi	sp,sp,-28
    9d58:	df000615 	stw	fp,24(sp)
    9d5c:	df000604 	addi	fp,sp,24
    9d60:	e13ffe15 	stw	r4,-8(fp)
    9d64:	e17fff15 	stw	r5,-4(fp)
    9d68:	e0bfff17 	ldw	r2,-4(fp)
    9d6c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d70:	0005303a 	rdctl	r2,status
    9d74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d78:	e0fffb17 	ldw	r3,-20(fp)
    9d7c:	00bfff84 	movi	r2,-2
    9d80:	1884703a 	and	r2,r3,r2
    9d84:	1001703a 	wrctl	status,r2
  
  return context;
    9d88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9d8c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9d90:	00c00044 	movi	r3,1
    9d94:	e0bffa17 	ldw	r2,-24(fp)
    9d98:	1884983a 	sll	r2,r3,r2
    9d9c:	1007883a 	mov	r3,r2
    9da0:	d0a51b17 	ldw	r2,-27540(gp)
    9da4:	1884b03a 	or	r2,r3,r2
    9da8:	d0a51b15 	stw	r2,-27540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9dac:	d0a51b17 	ldw	r2,-27540(gp)
    9db0:	100170fa 	wrctl	ienable,r2
    9db4:	e0bffc17 	ldw	r2,-16(fp)
    9db8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9dbc:	e0bffd17 	ldw	r2,-12(fp)
    9dc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9dc4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9dc8:	0001883a 	nop
}
    9dcc:	e037883a 	mov	sp,fp
    9dd0:	df000017 	ldw	fp,0(sp)
    9dd4:	dec00104 	addi	sp,sp,4
    9dd8:	f800283a 	ret

00009ddc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9ddc:	defff904 	addi	sp,sp,-28
    9de0:	df000615 	stw	fp,24(sp)
    9de4:	df000604 	addi	fp,sp,24
    9de8:	e13ffe15 	stw	r4,-8(fp)
    9dec:	e17fff15 	stw	r5,-4(fp)
    9df0:	e0bfff17 	ldw	r2,-4(fp)
    9df4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9df8:	0005303a 	rdctl	r2,status
    9dfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e00:	e0fffb17 	ldw	r3,-20(fp)
    9e04:	00bfff84 	movi	r2,-2
    9e08:	1884703a 	and	r2,r3,r2
    9e0c:	1001703a 	wrctl	status,r2
  
  return context;
    9e10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9e14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9e18:	00c00044 	movi	r3,1
    9e1c:	e0bffa17 	ldw	r2,-24(fp)
    9e20:	1884983a 	sll	r2,r3,r2
    9e24:	0084303a 	nor	r2,zero,r2
    9e28:	1007883a 	mov	r3,r2
    9e2c:	d0a51b17 	ldw	r2,-27540(gp)
    9e30:	1884703a 	and	r2,r3,r2
    9e34:	d0a51b15 	stw	r2,-27540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9e38:	d0a51b17 	ldw	r2,-27540(gp)
    9e3c:	100170fa 	wrctl	ienable,r2
    9e40:	e0bffc17 	ldw	r2,-16(fp)
    9e44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9e48:	e0bffd17 	ldw	r2,-12(fp)
    9e4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9e50:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9e54:	0001883a 	nop
}
    9e58:	e037883a 	mov	sp,fp
    9e5c:	df000017 	ldw	fp,0(sp)
    9e60:	dec00104 	addi	sp,sp,4
    9e64:	f800283a 	ret

00009e68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9e68:	defffc04 	addi	sp,sp,-16
    9e6c:	df000315 	stw	fp,12(sp)
    9e70:	df000304 	addi	fp,sp,12
    9e74:	e13ffe15 	stw	r4,-8(fp)
    9e78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9e7c:	000530fa 	rdctl	r2,ienable
    9e80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9e84:	00c00044 	movi	r3,1
    9e88:	e0bfff17 	ldw	r2,-4(fp)
    9e8c:	1884983a 	sll	r2,r3,r2
    9e90:	1007883a 	mov	r3,r2
    9e94:	e0bffd17 	ldw	r2,-12(fp)
    9e98:	1884703a 	and	r2,r3,r2
    9e9c:	1004c03a 	cmpne	r2,r2,zero
    9ea0:	10803fcc 	andi	r2,r2,255
}
    9ea4:	e037883a 	mov	sp,fp
    9ea8:	df000017 	ldw	fp,0(sp)
    9eac:	dec00104 	addi	sp,sp,4
    9eb0:	f800283a 	ret

00009eb4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9eb4:	defff504 	addi	sp,sp,-44
    9eb8:	dfc00a15 	stw	ra,40(sp)
    9ebc:	df000915 	stw	fp,36(sp)
    9ec0:	df000904 	addi	fp,sp,36
    9ec4:	e13ffc15 	stw	r4,-16(fp)
    9ec8:	e17ffd15 	stw	r5,-12(fp)
    9ecc:	e1bffe15 	stw	r6,-8(fp)
    9ed0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9ed4:	00bffa84 	movi	r2,-22
    9ed8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9edc:	e0bffd17 	ldw	r2,-12(fp)
    9ee0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9ee4:	e0bff817 	ldw	r2,-32(fp)
    9ee8:	10800808 	cmpgei	r2,r2,32
    9eec:	1000271e 	bne	r2,zero,9f8c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ef0:	0005303a 	rdctl	r2,status
    9ef4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ef8:	e0fffb17 	ldw	r3,-20(fp)
    9efc:	00bfff84 	movi	r2,-2
    9f00:	1884703a 	and	r2,r3,r2
    9f04:	1001703a 	wrctl	status,r2
  
  return context;
    9f08:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9f0c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    9f10:	00800074 	movhi	r2,1
    9f14:	1092f604 	addi	r2,r2,19416
    9f18:	e0fff817 	ldw	r3,-32(fp)
    9f1c:	180690fa 	slli	r3,r3,3
    9f20:	10c5883a 	add	r2,r2,r3
    9f24:	e0fffe17 	ldw	r3,-8(fp)
    9f28:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9f2c:	00800074 	movhi	r2,1
    9f30:	1092f604 	addi	r2,r2,19416
    9f34:	e0fff817 	ldw	r3,-32(fp)
    9f38:	180690fa 	slli	r3,r3,3
    9f3c:	10c5883a 	add	r2,r2,r3
    9f40:	10800104 	addi	r2,r2,4
    9f44:	e0ffff17 	ldw	r3,-4(fp)
    9f48:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9f4c:	e0bffe17 	ldw	r2,-8(fp)
    9f50:	10000526 	beq	r2,zero,9f68 <alt_iic_isr_register+0xb4>
    9f54:	e0bff817 	ldw	r2,-32(fp)
    9f58:	100b883a 	mov	r5,r2
    9f5c:	e13ffc17 	ldw	r4,-16(fp)
    9f60:	0009d540 	call	9d54 <alt_ic_irq_enable>
    9f64:	00000406 	br	9f78 <alt_iic_isr_register+0xc4>
    9f68:	e0bff817 	ldw	r2,-32(fp)
    9f6c:	100b883a 	mov	r5,r2
    9f70:	e13ffc17 	ldw	r4,-16(fp)
    9f74:	0009ddc0 	call	9ddc <alt_ic_irq_disable>
    9f78:	e0bff715 	stw	r2,-36(fp)
    9f7c:	e0bffa17 	ldw	r2,-24(fp)
    9f80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f84:	e0bff917 	ldw	r2,-28(fp)
    9f88:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9f8c:	e0bff717 	ldw	r2,-36(fp)
}
    9f90:	e037883a 	mov	sp,fp
    9f94:	dfc00117 	ldw	ra,4(sp)
    9f98:	df000017 	ldw	fp,0(sp)
    9f9c:	dec00204 	addi	sp,sp,8
    9fa0:	f800283a 	ret

00009fa4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9fa4:	defff804 	addi	sp,sp,-32
    9fa8:	dfc00715 	stw	ra,28(sp)
    9fac:	df000615 	stw	fp,24(sp)
    9fb0:	dc000515 	stw	r16,20(sp)
    9fb4:	df000604 	addi	fp,sp,24
    9fb8:	e13ffb15 	stw	r4,-20(fp)
    9fbc:	e17ffc15 	stw	r5,-16(fp)
    9fc0:	e1bffd15 	stw	r6,-12(fp)
    9fc4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9fc8:	e1bffe17 	ldw	r6,-8(fp)
    9fcc:	e17ffd17 	ldw	r5,-12(fp)
    9fd0:	e13ffc17 	ldw	r4,-16(fp)
    9fd4:	000a22c0 	call	a22c <open>
    9fd8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    9fdc:	e0bffa17 	ldw	r2,-24(fp)
    9fe0:	10002216 	blt	r2,zero,a06c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    9fe4:	04000074 	movhi	r16,1
    9fe8:	840a9304 	addi	r16,r16,10828
    9fec:	e0bffa17 	ldw	r2,-24(fp)
    9ff0:	01400304 	movi	r5,12
    9ff4:	1009883a 	mov	r4,r2
    9ff8:	00064800 	call	6480 <__mulsi3>
    9ffc:	8085883a 	add	r2,r16,r2
    a000:	10c00017 	ldw	r3,0(r2)
    a004:	e0bffb17 	ldw	r2,-20(fp)
    a008:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a00c:	04000074 	movhi	r16,1
    a010:	840a9304 	addi	r16,r16,10828
    a014:	e0bffa17 	ldw	r2,-24(fp)
    a018:	01400304 	movi	r5,12
    a01c:	1009883a 	mov	r4,r2
    a020:	00064800 	call	6480 <__mulsi3>
    a024:	8085883a 	add	r2,r16,r2
    a028:	10800104 	addi	r2,r2,4
    a02c:	10c00017 	ldw	r3,0(r2)
    a030:	e0bffb17 	ldw	r2,-20(fp)
    a034:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a038:	04000074 	movhi	r16,1
    a03c:	840a9304 	addi	r16,r16,10828
    a040:	e0bffa17 	ldw	r2,-24(fp)
    a044:	01400304 	movi	r5,12
    a048:	1009883a 	mov	r4,r2
    a04c:	00064800 	call	6480 <__mulsi3>
    a050:	8085883a 	add	r2,r16,r2
    a054:	10800204 	addi	r2,r2,8
    a058:	10c00017 	ldw	r3,0(r2)
    a05c:	e0bffb17 	ldw	r2,-20(fp)
    a060:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a064:	e13ffa17 	ldw	r4,-24(fp)
    a068:	000a3880 	call	a388 <alt_release_fd>
  }
} 
    a06c:	0001883a 	nop
    a070:	e6ffff04 	addi	sp,fp,-4
    a074:	dfc00217 	ldw	ra,8(sp)
    a078:	df000117 	ldw	fp,4(sp)
    a07c:	dc000017 	ldw	r16,0(sp)
    a080:	dec00304 	addi	sp,sp,12
    a084:	f800283a 	ret

0000a088 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a088:	defffb04 	addi	sp,sp,-20
    a08c:	dfc00415 	stw	ra,16(sp)
    a090:	df000315 	stw	fp,12(sp)
    a094:	df000304 	addi	fp,sp,12
    a098:	e13ffd15 	stw	r4,-12(fp)
    a09c:	e17ffe15 	stw	r5,-8(fp)
    a0a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a0a4:	01c07fc4 	movi	r7,511
    a0a8:	01800044 	movi	r6,1
    a0ac:	e17ffd17 	ldw	r5,-12(fp)
    a0b0:	01000074 	movhi	r4,1
    a0b4:	210a9604 	addi	r4,r4,10840
    a0b8:	0009fa40 	call	9fa4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a0bc:	01c07fc4 	movi	r7,511
    a0c0:	000d883a 	mov	r6,zero
    a0c4:	e17ffe17 	ldw	r5,-8(fp)
    a0c8:	01000074 	movhi	r4,1
    a0cc:	210a9304 	addi	r4,r4,10828
    a0d0:	0009fa40 	call	9fa4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a0d4:	01c07fc4 	movi	r7,511
    a0d8:	01800044 	movi	r6,1
    a0dc:	e17fff17 	ldw	r5,-4(fp)
    a0e0:	01000074 	movhi	r4,1
    a0e4:	210a9904 	addi	r4,r4,10852
    a0e8:	0009fa40 	call	9fa4 <alt_open_fd>
}  
    a0ec:	0001883a 	nop
    a0f0:	e037883a 	mov	sp,fp
    a0f4:	dfc00117 	ldw	ra,4(sp)
    a0f8:	df000017 	ldw	fp,0(sp)
    a0fc:	dec00204 	addi	sp,sp,8
    a100:	f800283a 	ret

0000a104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a104:	defffe04 	addi	sp,sp,-8
    a108:	dfc00115 	stw	ra,4(sp)
    a10c:	df000015 	stw	fp,0(sp)
    a110:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a114:	d0a00b17 	ldw	r2,-32724(gp)
    a118:	10000326 	beq	r2,zero,a128 <alt_get_errno+0x24>
    a11c:	d0a00b17 	ldw	r2,-32724(gp)
    a120:	103ee83a 	callr	r2
    a124:	00000106 	br	a12c <alt_get_errno+0x28>
    a128:	d0a51104 	addi	r2,gp,-27580
}
    a12c:	e037883a 	mov	sp,fp
    a130:	dfc00117 	ldw	ra,4(sp)
    a134:	df000017 	ldw	fp,0(sp)
    a138:	dec00204 	addi	sp,sp,8
    a13c:	f800283a 	ret

0000a140 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a140:	defffb04 	addi	sp,sp,-20
    a144:	dfc00415 	stw	ra,16(sp)
    a148:	df000315 	stw	fp,12(sp)
    a14c:	dc000215 	stw	r16,8(sp)
    a150:	df000304 	addi	fp,sp,12
    a154:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a158:	e0bffe17 	ldw	r2,-8(fp)
    a15c:	10800217 	ldw	r2,8(r2)
    a160:	10d00034 	orhi	r3,r2,16384
    a164:	e0bffe17 	ldw	r2,-8(fp)
    a168:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a16c:	e03ffd15 	stw	zero,-12(fp)
    a170:	00002306 	br	a200 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a174:	04000074 	movhi	r16,1
    a178:	840a9304 	addi	r16,r16,10828
    a17c:	e0bffd17 	ldw	r2,-12(fp)
    a180:	01400304 	movi	r5,12
    a184:	1009883a 	mov	r4,r2
    a188:	00064800 	call	6480 <__mulsi3>
    a18c:	8085883a 	add	r2,r16,r2
    a190:	10c00017 	ldw	r3,0(r2)
    a194:	e0bffe17 	ldw	r2,-8(fp)
    a198:	10800017 	ldw	r2,0(r2)
    a19c:	1880151e 	bne	r3,r2,a1f4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a1a0:	04000074 	movhi	r16,1
    a1a4:	840a9304 	addi	r16,r16,10828
    a1a8:	e0bffd17 	ldw	r2,-12(fp)
    a1ac:	01400304 	movi	r5,12
    a1b0:	1009883a 	mov	r4,r2
    a1b4:	00064800 	call	6480 <__mulsi3>
    a1b8:	8085883a 	add	r2,r16,r2
    a1bc:	10800204 	addi	r2,r2,8
    a1c0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a1c4:	10000b0e 	bge	r2,zero,a1f4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a1c8:	01400304 	movi	r5,12
    a1cc:	e13ffd17 	ldw	r4,-12(fp)
    a1d0:	00064800 	call	6480 <__mulsi3>
    a1d4:	1007883a 	mov	r3,r2
    a1d8:	00800074 	movhi	r2,1
    a1dc:	108a9304 	addi	r2,r2,10828
    a1e0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a1e4:	e0bffe17 	ldw	r2,-8(fp)
    a1e8:	18800226 	beq	r3,r2,a1f4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a1ec:	00bffcc4 	movi	r2,-13
    a1f0:	00000806 	br	a214 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a1f4:	e0bffd17 	ldw	r2,-12(fp)
    a1f8:	10800044 	addi	r2,r2,1
    a1fc:	e0bffd15 	stw	r2,-12(fp)
    a200:	d0a00a17 	ldw	r2,-32728(gp)
    a204:	1007883a 	mov	r3,r2
    a208:	e0bffd17 	ldw	r2,-12(fp)
    a20c:	18bfd92e 	bgeu	r3,r2,a174 <__alt_mem_epcs_flash_controller+0xfe001174>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a210:	0005883a 	mov	r2,zero
}
    a214:	e6ffff04 	addi	sp,fp,-4
    a218:	dfc00217 	ldw	ra,8(sp)
    a21c:	df000117 	ldw	fp,4(sp)
    a220:	dc000017 	ldw	r16,0(sp)
    a224:	dec00304 	addi	sp,sp,12
    a228:	f800283a 	ret

0000a22c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a22c:	defff604 	addi	sp,sp,-40
    a230:	dfc00915 	stw	ra,36(sp)
    a234:	df000815 	stw	fp,32(sp)
    a238:	df000804 	addi	fp,sp,32
    a23c:	e13ffd15 	stw	r4,-12(fp)
    a240:	e17ffe15 	stw	r5,-8(fp)
    a244:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a248:	00bfffc4 	movi	r2,-1
    a24c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a250:	00bffb44 	movi	r2,-19
    a254:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a258:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a25c:	d1600804 	addi	r5,gp,-32736
    a260:	e13ffd17 	ldw	r4,-12(fp)
    a264:	000a62c0 	call	a62c <alt_find_dev>
    a268:	e0bff815 	stw	r2,-32(fp)
    a26c:	e0bff817 	ldw	r2,-32(fp)
    a270:	1000051e 	bne	r2,zero,a288 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a274:	e13ffd17 	ldw	r4,-12(fp)
    a278:	000a6bc0 	call	a6bc <alt_find_file>
    a27c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a280:	00800044 	movi	r2,1
    a284:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a288:	e0bff817 	ldw	r2,-32(fp)
    a28c:	10002b26 	beq	r2,zero,a33c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a290:	e13ff817 	ldw	r4,-32(fp)
    a294:	000a7c40 	call	a7c4 <alt_get_fd>
    a298:	e0bff915 	stw	r2,-28(fp)
    a29c:	e0bff917 	ldw	r2,-28(fp)
    a2a0:	1000030e 	bge	r2,zero,a2b0 <open+0x84>
    {
      status = index;
    a2a4:	e0bff917 	ldw	r2,-28(fp)
    a2a8:	e0bffa15 	stw	r2,-24(fp)
    a2ac:	00002506 	br	a344 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    a2b0:	01400304 	movi	r5,12
    a2b4:	e13ff917 	ldw	r4,-28(fp)
    a2b8:	00064800 	call	6480 <__mulsi3>
    a2bc:	1007883a 	mov	r3,r2
    a2c0:	00800074 	movhi	r2,1
    a2c4:	108a9304 	addi	r2,r2,10828
    a2c8:	1885883a 	add	r2,r3,r2
    a2cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a2d0:	e0fffe17 	ldw	r3,-8(fp)
    a2d4:	00900034 	movhi	r2,16384
    a2d8:	10bfffc4 	addi	r2,r2,-1
    a2dc:	1886703a 	and	r3,r3,r2
    a2e0:	e0bffc17 	ldw	r2,-16(fp)
    a2e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a2e8:	e0bffb17 	ldw	r2,-20(fp)
    a2ec:	1000051e 	bne	r2,zero,a304 <open+0xd8>
    a2f0:	e13ffc17 	ldw	r4,-16(fp)
    a2f4:	000a1400 	call	a140 <alt_file_locked>
    a2f8:	e0bffa15 	stw	r2,-24(fp)
    a2fc:	e0bffa17 	ldw	r2,-24(fp)
    a300:	10001016 	blt	r2,zero,a344 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a304:	e0bff817 	ldw	r2,-32(fp)
    a308:	10800317 	ldw	r2,12(r2)
    a30c:	10000826 	beq	r2,zero,a330 <open+0x104>
    a310:	e0bff817 	ldw	r2,-32(fp)
    a314:	10800317 	ldw	r2,12(r2)
    a318:	e1ffff17 	ldw	r7,-4(fp)
    a31c:	e1bffe17 	ldw	r6,-8(fp)
    a320:	e17ffd17 	ldw	r5,-12(fp)
    a324:	e13ffc17 	ldw	r4,-16(fp)
    a328:	103ee83a 	callr	r2
    a32c:	00000106 	br	a334 <open+0x108>
    a330:	0005883a 	mov	r2,zero
    a334:	e0bffa15 	stw	r2,-24(fp)
    a338:	00000206 	br	a344 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a33c:	00bffb44 	movi	r2,-19
    a340:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a344:	e0bffa17 	ldw	r2,-24(fp)
    a348:	1000090e 	bge	r2,zero,a370 <open+0x144>
  {
    alt_release_fd (index);  
    a34c:	e13ff917 	ldw	r4,-28(fp)
    a350:	000a3880 	call	a388 <alt_release_fd>
    ALT_ERRNO = -status;
    a354:	000a1040 	call	a104 <alt_get_errno>
    a358:	1007883a 	mov	r3,r2
    a35c:	e0bffa17 	ldw	r2,-24(fp)
    a360:	0085c83a 	sub	r2,zero,r2
    a364:	18800015 	stw	r2,0(r3)
    return -1;
    a368:	00bfffc4 	movi	r2,-1
    a36c:	00000106 	br	a374 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    a370:	e0bff917 	ldw	r2,-28(fp)
}
    a374:	e037883a 	mov	sp,fp
    a378:	dfc00117 	ldw	ra,4(sp)
    a37c:	df000017 	ldw	fp,0(sp)
    a380:	dec00204 	addi	sp,sp,8
    a384:	f800283a 	ret

0000a388 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a388:	defffc04 	addi	sp,sp,-16
    a38c:	dfc00315 	stw	ra,12(sp)
    a390:	df000215 	stw	fp,8(sp)
    a394:	dc000115 	stw	r16,4(sp)
    a398:	df000204 	addi	fp,sp,8
    a39c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    a3a0:	e0bffe17 	ldw	r2,-8(fp)
    a3a4:	108000d0 	cmplti	r2,r2,3
    a3a8:	1000111e 	bne	r2,zero,a3f0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a3ac:	04000074 	movhi	r16,1
    a3b0:	840a9304 	addi	r16,r16,10828
    a3b4:	e0bffe17 	ldw	r2,-8(fp)
    a3b8:	01400304 	movi	r5,12
    a3bc:	1009883a 	mov	r4,r2
    a3c0:	00064800 	call	6480 <__mulsi3>
    a3c4:	8085883a 	add	r2,r16,r2
    a3c8:	10800204 	addi	r2,r2,8
    a3cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a3d0:	04000074 	movhi	r16,1
    a3d4:	840a9304 	addi	r16,r16,10828
    a3d8:	e0bffe17 	ldw	r2,-8(fp)
    a3dc:	01400304 	movi	r5,12
    a3e0:	1009883a 	mov	r4,r2
    a3e4:	00064800 	call	6480 <__mulsi3>
    a3e8:	8085883a 	add	r2,r16,r2
    a3ec:	10000015 	stw	zero,0(r2)
  }
}
    a3f0:	0001883a 	nop
    a3f4:	e6ffff04 	addi	sp,fp,-4
    a3f8:	dfc00217 	ldw	ra,8(sp)
    a3fc:	df000117 	ldw	fp,4(sp)
    a400:	dc000017 	ldw	r16,0(sp)
    a404:	dec00304 	addi	sp,sp,12
    a408:	f800283a 	ret

0000a40c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a40c:	deffff04 	addi	sp,sp,-4
    a410:	df000015 	stw	fp,0(sp)
    a414:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a418:	000170fa 	wrctl	ienable,zero
}
    a41c:	0001883a 	nop
    a420:	e037883a 	mov	sp,fp
    a424:	df000017 	ldw	fp,0(sp)
    a428:	dec00104 	addi	sp,sp,4
    a42c:	f800283a 	ret

0000a430 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    a430:	defff404 	addi	sp,sp,-48
    a434:	df000b15 	stw	fp,44(sp)
    a438:	df000b04 	addi	fp,sp,44
    a43c:	e13ffc15 	stw	r4,-16(fp)
    a440:	e17ffd15 	stw	r5,-12(fp)
    a444:	e1bffe15 	stw	r6,-8(fp)
    a448:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    a44c:	e0ffff17 	ldw	r3,-4(fp)
    a450:	e0bffe17 	ldw	r2,-8(fp)
    a454:	1885883a 	add	r2,r3,r2
    a458:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    a45c:	e0c00217 	ldw	r3,8(fp)
    a460:	e0800117 	ldw	r2,4(fp)
    a464:	1885883a 	add	r2,r3,r2
    a468:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    a46c:	e0800117 	ldw	r2,4(fp)
    a470:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    a474:	e0bffe17 	ldw	r2,-8(fp)
    a478:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    a47c:	00800044 	movi	r2,1
    a480:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    a484:	e0bffc17 	ldw	r2,-16(fp)
    a488:	10800504 	addi	r2,r2,20
    a48c:	1009883a 	mov	r4,r2
    a490:	00c00044 	movi	r3,1
    a494:	e0bffd17 	ldw	r2,-12(fp)
    a498:	1884983a 	sll	r2,r3,r2
    a49c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    a4a0:	e0800317 	ldw	r2,12(fp)
    a4a4:	1080008c 	andi	r2,r2,2
    a4a8:	1000051e 	bne	r2,zero,a4c0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    a4ac:	e0bffc17 	ldw	r2,-16(fp)
    a4b0:	10800304 	addi	r2,r2,12
    a4b4:	1007883a 	mov	r3,r2
    a4b8:	00810004 	movi	r2,1024
    a4bc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    a4c0:	e0bffc17 	ldw	r2,-16(fp)
    a4c4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    a4c8:	e0bffc17 	ldw	r2,-16(fp)
    a4cc:	10800204 	addi	r2,r2,8
    a4d0:	10800037 	ldwio	r2,0(r2)
    a4d4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    a4d8:	e0bffa17 	ldw	r2,-24(fp)
    a4dc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    a4e0:	10000226 	beq	r2,zero,a4ec <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    a4e4:	e0bff717 	ldw	r2,-36(fp)
    a4e8:	1000031e 	bne	r2,zero,a4f8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    a4ec:	e0bffa17 	ldw	r2,-24(fp)
    a4f0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    a4f4:	103ff426 	beq	r2,zero,a4c8 <__alt_mem_epcs_flash_controller+0xfe0014c8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    a4f8:	e0bffa17 	ldw	r2,-24(fp)
    a4fc:	1080100c 	andi	r2,r2,64
    a500:	10001e26 	beq	r2,zero,a57c <alt_avalon_spi_command+0x14c>
    a504:	e0bff717 	ldw	r2,-36(fp)
    a508:	00801c0e 	bge	zero,r2,a57c <alt_avalon_spi_command+0x14c>
    {
      credits--;
    a50c:	e0bff717 	ldw	r2,-36(fp)
    a510:	10bfffc4 	addi	r2,r2,-1
    a514:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    a518:	e0ffff17 	ldw	r3,-4(fp)
    a51c:	e0bff817 	ldw	r2,-32(fp)
    a520:	18800a2e 	bgeu	r3,r2,a54c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    a524:	e0bffc17 	ldw	r2,-16(fp)
    a528:	10800104 	addi	r2,r2,4
    a52c:	1009883a 	mov	r4,r2
    a530:	e0bfff17 	ldw	r2,-4(fp)
    a534:	10c00044 	addi	r3,r2,1
    a538:	e0ffff15 	stw	r3,-4(fp)
    a53c:	10800003 	ldbu	r2,0(r2)
    a540:	10803fcc 	andi	r2,r2,255
    a544:	20800035 	stwio	r2,0(r4)
    a548:	00000c06 	br	a57c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    a54c:	e0bff517 	ldw	r2,-44(fp)
    a550:	10000826 	beq	r2,zero,a574 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    a554:	e0bff517 	ldw	r2,-44(fp)
    a558:	10bfffc4 	addi	r2,r2,-1
    a55c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    a560:	e0bffc17 	ldw	r2,-16(fp)
    a564:	10800104 	addi	r2,r2,4
    a568:	0007883a 	mov	r3,zero
    a56c:	10c00035 	stwio	r3,0(r2)
    a570:	00000206 	br	a57c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    a574:	00bf0004 	movi	r2,-1024
    a578:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    a57c:	e0bffa17 	ldw	r2,-24(fp)
    a580:	1080200c 	andi	r2,r2,128
    a584:	103fd026 	beq	r2,zero,a4c8 <__alt_mem_epcs_flash_controller+0xfe0014c8>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    a588:	e0bffc17 	ldw	r2,-16(fp)
    a58c:	10800037 	ldwio	r2,0(r2)
    a590:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    a594:	e0bff617 	ldw	r2,-40(fp)
    a598:	10000426 	beq	r2,zero,a5ac <alt_avalon_spi_command+0x17c>
        read_ignore--;
    a59c:	e0bff617 	ldw	r2,-40(fp)
    a5a0:	10bfffc4 	addi	r2,r2,-1
    a5a4:	e0bff615 	stw	r2,-40(fp)
    a5a8:	00000506 	br	a5c0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    a5ac:	e0800217 	ldw	r2,8(fp)
    a5b0:	10c00044 	addi	r3,r2,1
    a5b4:	e0c00215 	stw	r3,8(fp)
    a5b8:	e0fffb17 	ldw	r3,-20(fp)
    a5bc:	10c00005 	stb	r3,0(r2)
      credits++;
    a5c0:	e0bff717 	ldw	r2,-36(fp)
    a5c4:	10800044 	addi	r2,r2,1
    a5c8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    a5cc:	e0bff617 	ldw	r2,-40(fp)
    a5d0:	103fbd1e 	bne	r2,zero,a4c8 <__alt_mem_epcs_flash_controller+0xfe0014c8>
    a5d4:	e0c00217 	ldw	r3,8(fp)
    a5d8:	e0bff917 	ldw	r2,-28(fp)
    a5dc:	18bfba1e 	bne	r3,r2,a4c8 <__alt_mem_epcs_flash_controller+0xfe0014c8>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    a5e0:	e0bffc17 	ldw	r2,-16(fp)
    a5e4:	10800204 	addi	r2,r2,8
    a5e8:	10800037 	ldwio	r2,0(r2)
    a5ec:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    a5f0:	e0bffa17 	ldw	r2,-24(fp)
    a5f4:	1080080c 	andi	r2,r2,32
    a5f8:	103ff926 	beq	r2,zero,a5e0 <__alt_mem_epcs_flash_controller+0xfe0015e0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    a5fc:	e0800317 	ldw	r2,12(fp)
    a600:	1080004c 	andi	r2,r2,1
    a604:	1000041e 	bne	r2,zero,a618 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    a608:	e0bffc17 	ldw	r2,-16(fp)
    a60c:	10800304 	addi	r2,r2,12
    a610:	0007883a 	mov	r3,zero
    a614:	10c00035 	stwio	r3,0(r2)

  return read_length;
    a618:	e0800117 	ldw	r2,4(fp)
}
    a61c:	e037883a 	mov	sp,fp
    a620:	df000017 	ldw	fp,0(sp)
    a624:	dec00104 	addi	sp,sp,4
    a628:	f800283a 	ret

0000a62c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a62c:	defffa04 	addi	sp,sp,-24
    a630:	dfc00515 	stw	ra,20(sp)
    a634:	df000415 	stw	fp,16(sp)
    a638:	df000404 	addi	fp,sp,16
    a63c:	e13ffe15 	stw	r4,-8(fp)
    a640:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a644:	e0bfff17 	ldw	r2,-4(fp)
    a648:	10800017 	ldw	r2,0(r2)
    a64c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a650:	e13ffe17 	ldw	r4,-8(fp)
    a654:	00069bc0 	call	69bc <strlen>
    a658:	10800044 	addi	r2,r2,1
    a65c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a660:	00000d06 	br	a698 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a664:	e0bffc17 	ldw	r2,-16(fp)
    a668:	10800217 	ldw	r2,8(r2)
    a66c:	e0fffd17 	ldw	r3,-12(fp)
    a670:	180d883a 	mov	r6,r3
    a674:	e17ffe17 	ldw	r5,-8(fp)
    a678:	1009883a 	mov	r4,r2
    a67c:	000a9580 	call	a958 <memcmp>
    a680:	1000021e 	bne	r2,zero,a68c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a684:	e0bffc17 	ldw	r2,-16(fp)
    a688:	00000706 	br	a6a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a68c:	e0bffc17 	ldw	r2,-16(fp)
    a690:	10800017 	ldw	r2,0(r2)
    a694:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a698:	e0fffc17 	ldw	r3,-16(fp)
    a69c:	e0bfff17 	ldw	r2,-4(fp)
    a6a0:	18bff01e 	bne	r3,r2,a664 <__alt_mem_epcs_flash_controller+0xfe001664>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a6a4:	0005883a 	mov	r2,zero
}
    a6a8:	e037883a 	mov	sp,fp
    a6ac:	dfc00117 	ldw	ra,4(sp)
    a6b0:	df000017 	ldw	fp,0(sp)
    a6b4:	dec00204 	addi	sp,sp,8
    a6b8:	f800283a 	ret

0000a6bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a6bc:	defffb04 	addi	sp,sp,-20
    a6c0:	dfc00415 	stw	ra,16(sp)
    a6c4:	df000315 	stw	fp,12(sp)
    a6c8:	df000304 	addi	fp,sp,12
    a6cc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a6d0:	d0a00617 	ldw	r2,-32744(gp)
    a6d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a6d8:	00003106 	br	a7a0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a6dc:	e0bffd17 	ldw	r2,-12(fp)
    a6e0:	10800217 	ldw	r2,8(r2)
    a6e4:	1009883a 	mov	r4,r2
    a6e8:	00069bc0 	call	69bc <strlen>
    a6ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a6f0:	e0bffd17 	ldw	r2,-12(fp)
    a6f4:	10c00217 	ldw	r3,8(r2)
    a6f8:	e0bffe17 	ldw	r2,-8(fp)
    a6fc:	10bfffc4 	addi	r2,r2,-1
    a700:	1885883a 	add	r2,r3,r2
    a704:	10800003 	ldbu	r2,0(r2)
    a708:	10803fcc 	andi	r2,r2,255
    a70c:	1080201c 	xori	r2,r2,128
    a710:	10bfe004 	addi	r2,r2,-128
    a714:	10800bd8 	cmpnei	r2,r2,47
    a718:	1000031e 	bne	r2,zero,a728 <alt_find_file+0x6c>
    {
      len -= 1;
    a71c:	e0bffe17 	ldw	r2,-8(fp)
    a720:	10bfffc4 	addi	r2,r2,-1
    a724:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a728:	e0bffe17 	ldw	r2,-8(fp)
    a72c:	e0ffff17 	ldw	r3,-4(fp)
    a730:	1885883a 	add	r2,r3,r2
    a734:	10800003 	ldbu	r2,0(r2)
    a738:	10803fcc 	andi	r2,r2,255
    a73c:	1080201c 	xori	r2,r2,128
    a740:	10bfe004 	addi	r2,r2,-128
    a744:	10800be0 	cmpeqi	r2,r2,47
    a748:	1000081e 	bne	r2,zero,a76c <alt_find_file+0xb0>
    a74c:	e0bffe17 	ldw	r2,-8(fp)
    a750:	e0ffff17 	ldw	r3,-4(fp)
    a754:	1885883a 	add	r2,r3,r2
    a758:	10800003 	ldbu	r2,0(r2)
    a75c:	10803fcc 	andi	r2,r2,255
    a760:	1080201c 	xori	r2,r2,128
    a764:	10bfe004 	addi	r2,r2,-128
    a768:	10000a1e 	bne	r2,zero,a794 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a76c:	e0bffd17 	ldw	r2,-12(fp)
    a770:	10800217 	ldw	r2,8(r2)
    a774:	e0fffe17 	ldw	r3,-8(fp)
    a778:	180d883a 	mov	r6,r3
    a77c:	e17fff17 	ldw	r5,-4(fp)
    a780:	1009883a 	mov	r4,r2
    a784:	000a9580 	call	a958 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a788:	1000021e 	bne	r2,zero,a794 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a78c:	e0bffd17 	ldw	r2,-12(fp)
    a790:	00000706 	br	a7b0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a794:	e0bffd17 	ldw	r2,-12(fp)
    a798:	10800017 	ldw	r2,0(r2)
    a79c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a7a0:	e0fffd17 	ldw	r3,-12(fp)
    a7a4:	d0a00604 	addi	r2,gp,-32744
    a7a8:	18bfcc1e 	bne	r3,r2,a6dc <__alt_mem_epcs_flash_controller+0xfe0016dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a7ac:	0005883a 	mov	r2,zero
}
    a7b0:	e037883a 	mov	sp,fp
    a7b4:	dfc00117 	ldw	ra,4(sp)
    a7b8:	df000017 	ldw	fp,0(sp)
    a7bc:	dec00204 	addi	sp,sp,8
    a7c0:	f800283a 	ret

0000a7c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a7c4:	defffa04 	addi	sp,sp,-24
    a7c8:	dfc00515 	stw	ra,20(sp)
    a7cc:	df000415 	stw	fp,16(sp)
    a7d0:	dc000315 	stw	r16,12(sp)
    a7d4:	df000404 	addi	fp,sp,16
    a7d8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    a7dc:	00bffa04 	movi	r2,-24
    a7e0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a7e4:	e03ffc15 	stw	zero,-16(fp)
    a7e8:	00001d06 	br	a860 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    a7ec:	04000074 	movhi	r16,1
    a7f0:	840a9304 	addi	r16,r16,10828
    a7f4:	e0bffc17 	ldw	r2,-16(fp)
    a7f8:	01400304 	movi	r5,12
    a7fc:	1009883a 	mov	r4,r2
    a800:	00064800 	call	6480 <__mulsi3>
    a804:	8085883a 	add	r2,r16,r2
    a808:	10800017 	ldw	r2,0(r2)
    a80c:	1000111e 	bne	r2,zero,a854 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    a810:	04000074 	movhi	r16,1
    a814:	840a9304 	addi	r16,r16,10828
    a818:	e0bffc17 	ldw	r2,-16(fp)
    a81c:	01400304 	movi	r5,12
    a820:	1009883a 	mov	r4,r2
    a824:	00064800 	call	6480 <__mulsi3>
    a828:	8085883a 	add	r2,r16,r2
    a82c:	e0fffe17 	ldw	r3,-8(fp)
    a830:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a834:	d0e00a17 	ldw	r3,-32728(gp)
    a838:	e0bffc17 	ldw	r2,-16(fp)
    a83c:	1880020e 	bge	r3,r2,a848 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    a840:	e0bffc17 	ldw	r2,-16(fp)
    a844:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    a848:	e0bffc17 	ldw	r2,-16(fp)
    a84c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a850:	00000606 	br	a86c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a854:	e0bffc17 	ldw	r2,-16(fp)
    a858:	10800044 	addi	r2,r2,1
    a85c:	e0bffc15 	stw	r2,-16(fp)
    a860:	e0bffc17 	ldw	r2,-16(fp)
    a864:	10800810 	cmplti	r2,r2,32
    a868:	103fe01e 	bne	r2,zero,a7ec <__alt_mem_epcs_flash_controller+0xfe0017ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a86c:	e0bffd17 	ldw	r2,-12(fp)
}
    a870:	e6ffff04 	addi	sp,fp,-4
    a874:	dfc00217 	ldw	ra,8(sp)
    a878:	df000117 	ldw	fp,4(sp)
    a87c:	dc000017 	ldw	r16,0(sp)
    a880:	dec00304 	addi	sp,sp,12
    a884:	f800283a 	ret

0000a888 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a888:	defffe04 	addi	sp,sp,-8
    a88c:	df000115 	stw	fp,4(sp)
    a890:	df000104 	addi	fp,sp,4
    a894:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a898:	e0bfff17 	ldw	r2,-4(fp)
    a89c:	10bffe84 	addi	r2,r2,-6
    a8a0:	10c00428 	cmpgeui	r3,r2,16
    a8a4:	18001a1e 	bne	r3,zero,a910 <alt_exception_cause_generated_bad_addr+0x88>
    a8a8:	100690ba 	slli	r3,r2,2
    a8ac:	00800074 	movhi	r2,1
    a8b0:	10aa3004 	addi	r2,r2,-22336
    a8b4:	1885883a 	add	r2,r3,r2
    a8b8:	10800017 	ldw	r2,0(r2)
    a8bc:	1000683a 	jmp	r2
    a8c0:	0000a900 	call	a90 <hmac_sha256_Final+0x38>
    a8c4:	0000a900 	call	a90 <hmac_sha256_Final+0x38>
    a8c8:	0000a910 	cmplti	zero,zero,676
    a8cc:	0000a910 	cmplti	zero,zero,676
    a8d0:	0000a910 	cmplti	zero,zero,676
    a8d4:	0000a900 	call	a90 <hmac_sha256_Final+0x38>
    a8d8:	0000a908 	cmpgei	zero,zero,676
    a8dc:	0000a910 	cmplti	zero,zero,676
    a8e0:	0000a900 	call	a90 <hmac_sha256_Final+0x38>
    a8e4:	0000a900 	call	a90 <hmac_sha256_Final+0x38>
    a8e8:	0000a910 	cmplti	zero,zero,676
    a8ec:	0000a900 	call	a90 <hmac_sha256_Final+0x38>
    a8f0:	0000a908 	cmpgei	zero,zero,676
    a8f4:	0000a910 	cmplti	zero,zero,676
    a8f8:	0000a910 	cmplti	zero,zero,676
    a8fc:	0000a900 	call	a90 <hmac_sha256_Final+0x38>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a900:	00800044 	movi	r2,1
    a904:	00000306 	br	a914 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a908:	0005883a 	mov	r2,zero
    a90c:	00000106 	br	a914 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a910:	0005883a 	mov	r2,zero
  }
}
    a914:	e037883a 	mov	sp,fp
    a918:	df000017 	ldw	fp,0(sp)
    a91c:	dec00104 	addi	sp,sp,4
    a920:	f800283a 	ret

0000a924 <atexit>:
    a924:	200b883a 	mov	r5,r4
    a928:	000f883a 	mov	r7,zero
    a92c:	000d883a 	mov	r6,zero
    a930:	0009883a 	mov	r4,zero
    a934:	000a9881 	jmpi	a988 <__register_exitproc>

0000a938 <exit>:
    a938:	defffe04 	addi	sp,sp,-8
    a93c:	000b883a 	mov	r5,zero
    a940:	dc000015 	stw	r16,0(sp)
    a944:	dfc00115 	stw	ra,4(sp)
    a948:	2021883a 	mov	r16,r4
    a94c:	000aae00 	call	aae0 <__call_exitprocs>
    a950:	8009883a 	mov	r4,r16
    a954:	000b2340 	call	b234 <_exit>

0000a958 <memcmp>:
    a958:	218d883a 	add	r6,r4,r6
    a95c:	21800826 	beq	r4,r6,a980 <memcmp+0x28>
    a960:	20800003 	ldbu	r2,0(r4)
    a964:	28c00003 	ldbu	r3,0(r5)
    a968:	10c00226 	beq	r2,r3,a974 <memcmp+0x1c>
    a96c:	10c5c83a 	sub	r2,r2,r3
    a970:	f800283a 	ret
    a974:	21000044 	addi	r4,r4,1
    a978:	29400044 	addi	r5,r5,1
    a97c:	003ff706 	br	a95c <__alt_mem_epcs_flash_controller+0xfe00195c>
    a980:	0005883a 	mov	r2,zero
    a984:	f800283a 	ret

0000a988 <__register_exitproc>:
    a988:	00800074 	movhi	r2,1
    a98c:	108af404 	addi	r2,r2,11216
    a990:	10c00017 	ldw	r3,0(r2)
    a994:	defff904 	addi	sp,sp,-28
    a998:	dc000015 	stw	r16,0(sp)
    a99c:	1c000c17 	ldw	r16,48(r3)
    a9a0:	dd400515 	stw	r21,20(sp)
    a9a4:	dd000415 	stw	r20,16(sp)
    a9a8:	dcc00315 	stw	r19,12(sp)
    a9ac:	dc800215 	stw	r18,8(sp)
    a9b0:	dc400115 	stw	r17,4(sp)
    a9b4:	dfc00615 	stw	ra,24(sp)
    a9b8:	202b883a 	mov	r21,r4
    a9bc:	2823883a 	mov	r17,r5
    a9c0:	3027883a 	mov	r19,r6
    a9c4:	3825883a 	mov	r18,r7
    a9c8:	1029883a 	mov	r20,r2
    a9cc:	8000021e 	bne	r16,zero,a9d8 <__register_exitproc+0x50>
    a9d0:	1c000d04 	addi	r16,r3,52
    a9d4:	1c000c15 	stw	r16,48(r3)
    a9d8:	80800117 	ldw	r2,4(r16)
    a9dc:	00c007c4 	movi	r3,31
    a9e0:	1880110e 	bge	r3,r2,aa28 <__register_exitproc+0xa0>
    a9e4:	00800034 	movhi	r2,0
    a9e8:	10992a04 	addi	r2,r2,25768
    a9ec:	1000021e 	bne	r2,zero,a9f8 <__register_exitproc+0x70>
    a9f0:	00bfffc4 	movi	r2,-1
    a9f4:	00003106 	br	aabc <__register_exitproc+0x134>
    a9f8:	01002304 	movi	r4,140
    a9fc:	00064a80 	call	64a8 <malloc>
    aa00:	1021883a 	mov	r16,r2
    aa04:	103ffa26 	beq	r2,zero,a9f0 <__alt_mem_epcs_flash_controller+0xfe0019f0>
    aa08:	10000115 	stw	zero,4(r2)
    aa0c:	a0800017 	ldw	r2,0(r20)
    aa10:	10c00c17 	ldw	r3,48(r2)
    aa14:	80c00015 	stw	r3,0(r16)
    aa18:	14000c15 	stw	r16,48(r2)
    aa1c:	80002215 	stw	zero,136(r16)
    aa20:	a8001d26 	beq	r21,zero,aa98 <__register_exitproc+0x110>
    aa24:	00000606 	br	aa40 <__register_exitproc+0xb8>
    aa28:	a8001b26 	beq	r21,zero,aa98 <__register_exitproc+0x110>
    aa2c:	80802217 	ldw	r2,136(r16)
    aa30:	1000091e 	bne	r2,zero,aa58 <__register_exitproc+0xd0>
    aa34:	00800034 	movhi	r2,0
    aa38:	10992a04 	addi	r2,r2,25768
    aa3c:	103fec26 	beq	r2,zero,a9f0 <__alt_mem_epcs_flash_controller+0xfe0019f0>
    aa40:	01004204 	movi	r4,264
    aa44:	00064a80 	call	64a8 <malloc>
    aa48:	103fe926 	beq	r2,zero,a9f0 <__alt_mem_epcs_flash_controller+0xfe0019f0>
    aa4c:	10004015 	stw	zero,256(r2)
    aa50:	10004115 	stw	zero,260(r2)
    aa54:	80802215 	stw	r2,136(r16)
    aa58:	81400117 	ldw	r5,4(r16)
    aa5c:	01000044 	movi	r4,1
    aa60:	2947883a 	add	r3,r5,r5
    aa64:	18c7883a 	add	r3,r3,r3
    aa68:	10c7883a 	add	r3,r2,r3
    aa6c:	1cc00015 	stw	r19,0(r3)
    aa70:	2148983a 	sll	r4,r4,r5
    aa74:	11404017 	ldw	r5,256(r2)
    aa78:	290ab03a 	or	r5,r5,r4
    aa7c:	11404015 	stw	r5,256(r2)
    aa80:	1c802015 	stw	r18,128(r3)
    aa84:	00c00084 	movi	r3,2
    aa88:	a8c0031e 	bne	r21,r3,aa98 <__register_exitproc+0x110>
    aa8c:	10c04117 	ldw	r3,260(r2)
    aa90:	1908b03a 	or	r4,r3,r4
    aa94:	11004115 	stw	r4,260(r2)
    aa98:	80800117 	ldw	r2,4(r16)
    aa9c:	10c00044 	addi	r3,r2,1
    aaa0:	10800084 	addi	r2,r2,2
    aaa4:	1085883a 	add	r2,r2,r2
    aaa8:	1085883a 	add	r2,r2,r2
    aaac:	80c00115 	stw	r3,4(r16)
    aab0:	80a1883a 	add	r16,r16,r2
    aab4:	84400015 	stw	r17,0(r16)
    aab8:	0005883a 	mov	r2,zero
    aabc:	dfc00617 	ldw	ra,24(sp)
    aac0:	dd400517 	ldw	r21,20(sp)
    aac4:	dd000417 	ldw	r20,16(sp)
    aac8:	dcc00317 	ldw	r19,12(sp)
    aacc:	dc800217 	ldw	r18,8(sp)
    aad0:	dc400117 	ldw	r17,4(sp)
    aad4:	dc000017 	ldw	r16,0(sp)
    aad8:	dec00704 	addi	sp,sp,28
    aadc:	f800283a 	ret

0000aae0 <__call_exitprocs>:
    aae0:	defff504 	addi	sp,sp,-44
    aae4:	dd000515 	stw	r20,20(sp)
    aae8:	05000074 	movhi	r20,1
    aaec:	dc800315 	stw	r18,12(sp)
    aaf0:	dfc00a15 	stw	ra,40(sp)
    aaf4:	df000915 	stw	fp,36(sp)
    aaf8:	ddc00815 	stw	r23,32(sp)
    aafc:	dd800715 	stw	r22,28(sp)
    ab00:	dd400615 	stw	r21,24(sp)
    ab04:	dcc00415 	stw	r19,16(sp)
    ab08:	dc400215 	stw	r17,8(sp)
    ab0c:	dc000115 	stw	r16,4(sp)
    ab10:	d9000015 	stw	r4,0(sp)
    ab14:	2825883a 	mov	r18,r5
    ab18:	a50af404 	addi	r20,r20,11216
    ab1c:	a4400017 	ldw	r17,0(r20)
    ab20:	8cc00c17 	ldw	r19,48(r17)
    ab24:	8c400c04 	addi	r17,r17,48
    ab28:	98004526 	beq	r19,zero,ac40 <__call_exitprocs+0x160>
    ab2c:	9c000117 	ldw	r16,4(r19)
    ab30:	00900034 	movhi	r2,16384
    ab34:	10bfffc4 	addi	r2,r2,-1
    ab38:	9d402217 	ldw	r21,136(r19)
    ab3c:	85bfffc4 	addi	r22,r16,-1
    ab40:	80a1883a 	add	r16,r16,r2
    ab44:	8421883a 	add	r16,r16,r16
    ab48:	8421883a 	add	r16,r16,r16
    ab4c:	ac2f883a 	add	r23,r21,r16
    ab50:	84000204 	addi	r16,r16,8
    ab54:	9c21883a 	add	r16,r19,r16
    ab58:	b0002716 	blt	r22,zero,abf8 <__call_exitprocs+0x118>
    ab5c:	90000726 	beq	r18,zero,ab7c <__call_exitprocs+0x9c>
    ab60:	a800041e 	bne	r21,zero,ab74 <__call_exitprocs+0x94>
    ab64:	b5bfffc4 	addi	r22,r22,-1
    ab68:	bdffff04 	addi	r23,r23,-4
    ab6c:	843fff04 	addi	r16,r16,-4
    ab70:	003ff906 	br	ab58 <__alt_mem_epcs_flash_controller+0xfe001b58>
    ab74:	b9002017 	ldw	r4,128(r23)
    ab78:	913ffa1e 	bne	r18,r4,ab64 <__alt_mem_epcs_flash_controller+0xfe001b64>
    ab7c:	99000117 	ldw	r4,4(r19)
    ab80:	82000017 	ldw	r8,0(r16)
    ab84:	213fffc4 	addi	r4,r4,-1
    ab88:	b100021e 	bne	r22,r4,ab94 <__call_exitprocs+0xb4>
    ab8c:	9d800115 	stw	r22,4(r19)
    ab90:	00000106 	br	ab98 <__call_exitprocs+0xb8>
    ab94:	80000015 	stw	zero,0(r16)
    ab98:	403ff226 	beq	r8,zero,ab64 <__alt_mem_epcs_flash_controller+0xfe001b64>
    ab9c:	9f000117 	ldw	fp,4(r19)
    aba0:	a8000526 	beq	r21,zero,abb8 <__call_exitprocs+0xd8>
    aba4:	00800044 	movi	r2,1
    aba8:	1592983a 	sll	r9,r2,r22
    abac:	a9404017 	ldw	r5,256(r21)
    abb0:	494a703a 	and	r5,r9,r5
    abb4:	2800021e 	bne	r5,zero,abc0 <__call_exitprocs+0xe0>
    abb8:	403ee83a 	callr	r8
    abbc:	00000906 	br	abe4 <__call_exitprocs+0x104>
    abc0:	a9004117 	ldw	r4,260(r21)
    abc4:	4908703a 	and	r4,r9,r4
    abc8:	2000041e 	bne	r4,zero,abdc <__call_exitprocs+0xfc>
    abcc:	b9400017 	ldw	r5,0(r23)
    abd0:	d9000017 	ldw	r4,0(sp)
    abd4:	403ee83a 	callr	r8
    abd8:	00000206 	br	abe4 <__call_exitprocs+0x104>
    abdc:	b9000017 	ldw	r4,0(r23)
    abe0:	403ee83a 	callr	r8
    abe4:	99000117 	ldw	r4,4(r19)
    abe8:	e13fcc1e 	bne	fp,r4,ab1c <__alt_mem_epcs_flash_controller+0xfe001b1c>
    abec:	89000017 	ldw	r4,0(r17)
    abf0:	993fdc26 	beq	r19,r4,ab64 <__alt_mem_epcs_flash_controller+0xfe001b64>
    abf4:	003fc906 	br	ab1c <__alt_mem_epcs_flash_controller+0xfe001b1c>
    abf8:	00800034 	movhi	r2,0
    abfc:	10992f04 	addi	r2,r2,25788
    ac00:	10000f26 	beq	r2,zero,ac40 <__call_exitprocs+0x160>
    ac04:	99400117 	ldw	r5,4(r19)
    ac08:	99000017 	ldw	r4,0(r19)
    ac0c:	2800091e 	bne	r5,zero,ac34 <__call_exitprocs+0x154>
    ac10:	20000826 	beq	r4,zero,ac34 <__call_exitprocs+0x154>
    ac14:	89000015 	stw	r4,0(r17)
    ac18:	a8000226 	beq	r21,zero,ac24 <__call_exitprocs+0x144>
    ac1c:	a809883a 	mov	r4,r21
    ac20:	00064bc0 	call	64bc <free>
    ac24:	9809883a 	mov	r4,r19
    ac28:	00064bc0 	call	64bc <free>
    ac2c:	8cc00017 	ldw	r19,0(r17)
    ac30:	003fbd06 	br	ab28 <__alt_mem_epcs_flash_controller+0xfe001b28>
    ac34:	9823883a 	mov	r17,r19
    ac38:	2027883a 	mov	r19,r4
    ac3c:	003fba06 	br	ab28 <__alt_mem_epcs_flash_controller+0xfe001b28>
    ac40:	dfc00a17 	ldw	ra,40(sp)
    ac44:	df000917 	ldw	fp,36(sp)
    ac48:	ddc00817 	ldw	r23,32(sp)
    ac4c:	dd800717 	ldw	r22,28(sp)
    ac50:	dd400617 	ldw	r21,24(sp)
    ac54:	dd000517 	ldw	r20,20(sp)
    ac58:	dcc00417 	ldw	r19,16(sp)
    ac5c:	dc800317 	ldw	r18,12(sp)
    ac60:	dc400217 	ldw	r17,8(sp)
    ac64:	dc000117 	ldw	r16,4(sp)
    ac68:	dec00b04 	addi	sp,sp,44
    ac6c:	f800283a 	ret

0000ac70 <__umoddi3>:
    ac70:	defff304 	addi	sp,sp,-52
    ac74:	df000b15 	stw	fp,44(sp)
    ac78:	dc400415 	stw	r17,16(sp)
    ac7c:	dc000315 	stw	r16,12(sp)
    ac80:	dfc00c15 	stw	ra,48(sp)
    ac84:	ddc00a15 	stw	r23,40(sp)
    ac88:	dd800915 	stw	r22,36(sp)
    ac8c:	dd400815 	stw	r21,32(sp)
    ac90:	dd000715 	stw	r20,28(sp)
    ac94:	dcc00615 	stw	r19,24(sp)
    ac98:	dc800515 	stw	r18,20(sp)
    ac9c:	2021883a 	mov	r16,r4
    aca0:	2823883a 	mov	r17,r5
    aca4:	2839883a 	mov	fp,r5
    aca8:	3800401e 	bne	r7,zero,adac <__umoddi3+0x13c>
    acac:	3027883a 	mov	r19,r6
    acb0:	2029883a 	mov	r20,r4
    acb4:	2980552e 	bgeu	r5,r6,ae0c <__umoddi3+0x19c>
    acb8:	00bfffd4 	movui	r2,65535
    acbc:	1180a236 	bltu	r2,r6,af48 <__umoddi3+0x2d8>
    acc0:	01003fc4 	movi	r4,255
    acc4:	2189803a 	cmpltu	r4,r4,r6
    acc8:	200890fa 	slli	r4,r4,3
    accc:	3104d83a 	srl	r2,r6,r4
    acd0:	00c00074 	movhi	r3,1
    acd4:	18c5c584 	addi	r3,r3,5910
    acd8:	1885883a 	add	r2,r3,r2
    acdc:	10c00003 	ldbu	r3,0(r2)
    ace0:	00800804 	movi	r2,32
    ace4:	1909883a 	add	r4,r3,r4
    ace8:	1125c83a 	sub	r18,r2,r4
    acec:	90000526 	beq	r18,zero,ad04 <__umoddi3+0x94>
    acf0:	8ca2983a 	sll	r17,r17,r18
    acf4:	8108d83a 	srl	r4,r16,r4
    acf8:	34a6983a 	sll	r19,r6,r18
    acfc:	84a8983a 	sll	r20,r16,r18
    ad00:	2478b03a 	or	fp,r4,r17
    ad04:	982cd43a 	srli	r22,r19,16
    ad08:	e009883a 	mov	r4,fp
    ad0c:	9dffffcc 	andi	r23,r19,65535
    ad10:	b00b883a 	mov	r5,r22
    ad14:	00074540 	call	7454 <__umodsi3>
    ad18:	b00b883a 	mov	r5,r22
    ad1c:	e009883a 	mov	r4,fp
    ad20:	102b883a 	mov	r21,r2
    ad24:	00073f00 	call	73f0 <__udivsi3>
    ad28:	100b883a 	mov	r5,r2
    ad2c:	b809883a 	mov	r4,r23
    ad30:	00064800 	call	6480 <__mulsi3>
    ad34:	a82a943a 	slli	r21,r21,16
    ad38:	a006d43a 	srli	r3,r20,16
    ad3c:	1d46b03a 	or	r3,r3,r21
    ad40:	1880032e 	bgeu	r3,r2,ad50 <__umoddi3+0xe0>
    ad44:	1cc7883a 	add	r3,r3,r19
    ad48:	1cc00136 	bltu	r3,r19,ad50 <__umoddi3+0xe0>
    ad4c:	18813136 	bltu	r3,r2,b214 <__umoddi3+0x5a4>
    ad50:	18a1c83a 	sub	r16,r3,r2
    ad54:	b00b883a 	mov	r5,r22
    ad58:	8009883a 	mov	r4,r16
    ad5c:	00074540 	call	7454 <__umodsi3>
    ad60:	b00b883a 	mov	r5,r22
    ad64:	8009883a 	mov	r4,r16
    ad68:	1023883a 	mov	r17,r2
    ad6c:	00073f00 	call	73f0 <__udivsi3>
    ad70:	100b883a 	mov	r5,r2
    ad74:	b809883a 	mov	r4,r23
    ad78:	8822943a 	slli	r17,r17,16
    ad7c:	00064800 	call	6480 <__mulsi3>
    ad80:	a0ffffcc 	andi	r3,r20,65535
    ad84:	1c46b03a 	or	r3,r3,r17
    ad88:	1880042e 	bgeu	r3,r2,ad9c <__umoddi3+0x12c>
    ad8c:	1cc7883a 	add	r3,r3,r19
    ad90:	1cc00236 	bltu	r3,r19,ad9c <__umoddi3+0x12c>
    ad94:	1880012e 	bgeu	r3,r2,ad9c <__umoddi3+0x12c>
    ad98:	1cc7883a 	add	r3,r3,r19
    ad9c:	1885c83a 	sub	r2,r3,r2
    ada0:	1484d83a 	srl	r2,r2,r18
    ada4:	0007883a 	mov	r3,zero
    ada8:	00005306 	br	aef8 <__umoddi3+0x288>
    adac:	29c05036 	bltu	r5,r7,aef0 <__umoddi3+0x280>
    adb0:	00bfffd4 	movui	r2,65535
    adb4:	11c05c2e 	bgeu	r2,r7,af28 <__umoddi3+0x2b8>
    adb8:	00804034 	movhi	r2,256
    adbc:	10bfffc4 	addi	r2,r2,-1
    adc0:	11c10636 	bltu	r2,r7,b1dc <__umoddi3+0x56c>
    adc4:	01000404 	movi	r4,16
    adc8:	3904d83a 	srl	r2,r7,r4
    adcc:	00c00074 	movhi	r3,1
    add0:	18c5c584 	addi	r3,r3,5910
    add4:	1885883a 	add	r2,r3,r2
    add8:	14c00003 	ldbu	r19,0(r2)
    addc:	00c00804 	movi	r3,32
    ade0:	9927883a 	add	r19,r19,r4
    ade4:	1ce9c83a 	sub	r20,r3,r19
    ade8:	a0005c1e 	bne	r20,zero,af5c <__umoddi3+0x2ec>
    adec:	3c400136 	bltu	r7,r17,adf4 <__umoddi3+0x184>
    adf0:	81810a36 	bltu	r16,r6,b21c <__umoddi3+0x5ac>
    adf4:	8185c83a 	sub	r2,r16,r6
    adf8:	89e3c83a 	sub	r17,r17,r7
    adfc:	8089803a 	cmpltu	r4,r16,r2
    ae00:	8939c83a 	sub	fp,r17,r4
    ae04:	e007883a 	mov	r3,fp
    ae08:	00003b06 	br	aef8 <__umoddi3+0x288>
    ae0c:	3000041e 	bne	r6,zero,ae20 <__umoddi3+0x1b0>
    ae10:	000b883a 	mov	r5,zero
    ae14:	01000044 	movi	r4,1
    ae18:	00073f00 	call	73f0 <__udivsi3>
    ae1c:	1027883a 	mov	r19,r2
    ae20:	00bfffd4 	movui	r2,65535
    ae24:	14c0442e 	bgeu	r2,r19,af38 <__umoddi3+0x2c8>
    ae28:	00804034 	movhi	r2,256
    ae2c:	10bfffc4 	addi	r2,r2,-1
    ae30:	14c0ec36 	bltu	r2,r19,b1e4 <__umoddi3+0x574>
    ae34:	00800404 	movi	r2,16
    ae38:	9886d83a 	srl	r3,r19,r2
    ae3c:	01000074 	movhi	r4,1
    ae40:	2105c584 	addi	r4,r4,5910
    ae44:	20c7883a 	add	r3,r4,r3
    ae48:	18c00003 	ldbu	r3,0(r3)
    ae4c:	1887883a 	add	r3,r3,r2
    ae50:	00800804 	movi	r2,32
    ae54:	10e5c83a 	sub	r18,r2,r3
    ae58:	9000ab1e 	bne	r18,zero,b108 <__umoddi3+0x498>
    ae5c:	982cd43a 	srli	r22,r19,16
    ae60:	8ce3c83a 	sub	r17,r17,r19
    ae64:	9dffffcc 	andi	r23,r19,65535
    ae68:	b00b883a 	mov	r5,r22
    ae6c:	8809883a 	mov	r4,r17
    ae70:	00074540 	call	7454 <__umodsi3>
    ae74:	b00b883a 	mov	r5,r22
    ae78:	8809883a 	mov	r4,r17
    ae7c:	102b883a 	mov	r21,r2
    ae80:	00073f00 	call	73f0 <__udivsi3>
    ae84:	b80b883a 	mov	r5,r23
    ae88:	1009883a 	mov	r4,r2
    ae8c:	00064800 	call	6480 <__mulsi3>
    ae90:	a82a943a 	slli	r21,r21,16
    ae94:	a006d43a 	srli	r3,r20,16
    ae98:	1d46b03a 	or	r3,r3,r21
    ae9c:	1880042e 	bgeu	r3,r2,aeb0 <__umoddi3+0x240>
    aea0:	1cc7883a 	add	r3,r3,r19
    aea4:	1cc00236 	bltu	r3,r19,aeb0 <__umoddi3+0x240>
    aea8:	1880012e 	bgeu	r3,r2,aeb0 <__umoddi3+0x240>
    aeac:	1cc7883a 	add	r3,r3,r19
    aeb0:	18a1c83a 	sub	r16,r3,r2
    aeb4:	b00b883a 	mov	r5,r22
    aeb8:	8009883a 	mov	r4,r16
    aebc:	00074540 	call	7454 <__umodsi3>
    aec0:	1023883a 	mov	r17,r2
    aec4:	b00b883a 	mov	r5,r22
    aec8:	8009883a 	mov	r4,r16
    aecc:	00073f00 	call	73f0 <__udivsi3>
    aed0:	8822943a 	slli	r17,r17,16
    aed4:	b80b883a 	mov	r5,r23
    aed8:	1009883a 	mov	r4,r2
    aedc:	00064800 	call	6480 <__mulsi3>
    aee0:	a53fffcc 	andi	r20,r20,65535
    aee4:	a446b03a 	or	r3,r20,r17
    aee8:	18bfac2e 	bgeu	r3,r2,ad9c <__alt_mem_epcs_flash_controller+0xfe001d9c>
    aeec:	003fa706 	br	ad8c <__alt_mem_epcs_flash_controller+0xfe001d8c>
    aef0:	2005883a 	mov	r2,r4
    aef4:	2807883a 	mov	r3,r5
    aef8:	dfc00c17 	ldw	ra,48(sp)
    aefc:	df000b17 	ldw	fp,44(sp)
    af00:	ddc00a17 	ldw	r23,40(sp)
    af04:	dd800917 	ldw	r22,36(sp)
    af08:	dd400817 	ldw	r21,32(sp)
    af0c:	dd000717 	ldw	r20,28(sp)
    af10:	dcc00617 	ldw	r19,24(sp)
    af14:	dc800517 	ldw	r18,20(sp)
    af18:	dc400417 	ldw	r17,16(sp)
    af1c:	dc000317 	ldw	r16,12(sp)
    af20:	dec00d04 	addi	sp,sp,52
    af24:	f800283a 	ret
    af28:	04c03fc4 	movi	r19,255
    af2c:	99c9803a 	cmpltu	r4,r19,r7
    af30:	200890fa 	slli	r4,r4,3
    af34:	003fa406 	br	adc8 <__alt_mem_epcs_flash_controller+0xfe001dc8>
    af38:	00803fc4 	movi	r2,255
    af3c:	14c5803a 	cmpltu	r2,r2,r19
    af40:	100490fa 	slli	r2,r2,3
    af44:	003fbc06 	br	ae38 <__alt_mem_epcs_flash_controller+0xfe001e38>
    af48:	00804034 	movhi	r2,256
    af4c:	10bfffc4 	addi	r2,r2,-1
    af50:	1180a636 	bltu	r2,r6,b1ec <__umoddi3+0x57c>
    af54:	01000404 	movi	r4,16
    af58:	003f5c06 	br	accc <__alt_mem_epcs_flash_controller+0xfe001ccc>
    af5c:	3d0e983a 	sll	r7,r7,r20
    af60:	34ead83a 	srl	r21,r6,r19
    af64:	8cc6d83a 	srl	r3,r17,r19
    af68:	8d10983a 	sll	r8,r17,r20
    af6c:	3d6ab03a 	or	r21,r7,r21
    af70:	a82cd43a 	srli	r22,r21,16
    af74:	84e2d83a 	srl	r17,r16,r19
    af78:	1809883a 	mov	r4,r3
    af7c:	b00b883a 	mov	r5,r22
    af80:	8a22b03a 	or	r17,r17,r8
    af84:	3524983a 	sll	r18,r6,r20
    af88:	dc400015 	stw	r17,0(sp)
    af8c:	d8c00115 	stw	r3,4(sp)
    af90:	00074540 	call	7454 <__umodsi3>
    af94:	d8c00117 	ldw	r3,4(sp)
    af98:	b00b883a 	mov	r5,r22
    af9c:	1039883a 	mov	fp,r2
    afa0:	1809883a 	mov	r4,r3
    afa4:	00073f00 	call	73f0 <__udivsi3>
    afa8:	adffffcc 	andi	r23,r21,65535
    afac:	100b883a 	mov	r5,r2
    afb0:	b809883a 	mov	r4,r23
    afb4:	1023883a 	mov	r17,r2
    afb8:	00064800 	call	6480 <__mulsi3>
    afbc:	d9400017 	ldw	r5,0(sp)
    afc0:	e008943a 	slli	r4,fp,16
    afc4:	8520983a 	sll	r16,r16,r20
    afc8:	2806d43a 	srli	r3,r5,16
    afcc:	1906b03a 	or	r3,r3,r4
    afd0:	1880042e 	bgeu	r3,r2,afe4 <__umoddi3+0x374>
    afd4:	1d47883a 	add	r3,r3,r21
    afd8:	893fffc4 	addi	r4,r17,-1
    afdc:	1d40892e 	bgeu	r3,r21,b204 <__umoddi3+0x594>
    afe0:	2023883a 	mov	r17,r4
    afe4:	18b9c83a 	sub	fp,r3,r2
    afe8:	b00b883a 	mov	r5,r22
    afec:	e009883a 	mov	r4,fp
    aff0:	00074540 	call	7454 <__umodsi3>
    aff4:	b00b883a 	mov	r5,r22
    aff8:	e009883a 	mov	r4,fp
    affc:	d8800215 	stw	r2,8(sp)
    b000:	00073f00 	call	73f0 <__udivsi3>
    b004:	100b883a 	mov	r5,r2
    b008:	b809883a 	mov	r4,r23
    b00c:	102d883a 	mov	r22,r2
    b010:	00064800 	call	6480 <__mulsi3>
    b014:	d9800217 	ldw	r6,8(sp)
    b018:	d8c00017 	ldw	r3,0(sp)
    b01c:	300c943a 	slli	r6,r6,16
    b020:	1a3fffcc 	andi	r8,r3,65535
    b024:	4190b03a 	or	r8,r8,r6
    b028:	4080042e 	bgeu	r8,r2,b03c <__umoddi3+0x3cc>
    b02c:	4551883a 	add	r8,r8,r21
    b030:	b0ffffc4 	addi	r3,r22,-1
    b034:	45406f2e 	bgeu	r8,r21,b1f4 <__umoddi3+0x584>
    b038:	182d883a 	mov	r22,r3
    b03c:	880e943a 	slli	r7,r17,16
    b040:	9006d43a 	srli	r3,r18,16
    b044:	91bfffcc 	andi	r6,r18,65535
    b048:	3dacb03a 	or	r22,r7,r22
    b04c:	b02ed43a 	srli	r23,r22,16
    b050:	b5bfffcc 	andi	r22,r22,65535
    b054:	300b883a 	mov	r5,r6
    b058:	b009883a 	mov	r4,r22
    b05c:	40a3c83a 	sub	r17,r8,r2
    b060:	d8c00115 	stw	r3,4(sp)
    b064:	d9800215 	stw	r6,8(sp)
    b068:	00064800 	call	6480 <__mulsi3>
    b06c:	d9800217 	ldw	r6,8(sp)
    b070:	b809883a 	mov	r4,r23
    b074:	1039883a 	mov	fp,r2
    b078:	300b883a 	mov	r5,r6
    b07c:	00064800 	call	6480 <__mulsi3>
    b080:	d8c00117 	ldw	r3,4(sp)
    b084:	b809883a 	mov	r4,r23
    b088:	d8800215 	stw	r2,8(sp)
    b08c:	180b883a 	mov	r5,r3
    b090:	00064800 	call	6480 <__mulsi3>
    b094:	d8c00117 	ldw	r3,4(sp)
    b098:	b009883a 	mov	r4,r22
    b09c:	102f883a 	mov	r23,r2
    b0a0:	180b883a 	mov	r5,r3
    b0a4:	00064800 	call	6480 <__mulsi3>
    b0a8:	d9800217 	ldw	r6,8(sp)
    b0ac:	e006d43a 	srli	r3,fp,16
    b0b0:	1185883a 	add	r2,r2,r6
    b0b4:	1885883a 	add	r2,r3,r2
    b0b8:	1180022e 	bgeu	r2,r6,b0c4 <__umoddi3+0x454>
    b0bc:	00c00074 	movhi	r3,1
    b0c0:	b8ef883a 	add	r23,r23,r3
    b0c4:	1006d43a 	srli	r3,r2,16
    b0c8:	1004943a 	slli	r2,r2,16
    b0cc:	e73fffcc 	andi	fp,fp,65535
    b0d0:	1dc7883a 	add	r3,r3,r23
    b0d4:	1739883a 	add	fp,r2,fp
    b0d8:	88c03a36 	bltu	r17,r3,b1c4 <__umoddi3+0x554>
    b0dc:	88c05126 	beq	r17,r3,b224 <__umoddi3+0x5b4>
    b0e0:	88c9c83a 	sub	r4,r17,r3
    b0e4:	e00f883a 	mov	r7,fp
    b0e8:	81cfc83a 	sub	r7,r16,r7
    b0ec:	81c7803a 	cmpltu	r3,r16,r7
    b0f0:	20c7c83a 	sub	r3,r4,r3
    b0f4:	1cc4983a 	sll	r2,r3,r19
    b0f8:	3d0ed83a 	srl	r7,r7,r20
    b0fc:	1d06d83a 	srl	r3,r3,r20
    b100:	11c4b03a 	or	r2,r2,r7
    b104:	003f7c06 	br	aef8 <__alt_mem_epcs_flash_controller+0xfe001ef8>
    b108:	9ca6983a 	sll	r19,r19,r18
    b10c:	88f8d83a 	srl	fp,r17,r3
    b110:	80c4d83a 	srl	r2,r16,r3
    b114:	982cd43a 	srli	r22,r19,16
    b118:	8ca2983a 	sll	r17,r17,r18
    b11c:	e009883a 	mov	r4,fp
    b120:	b00b883a 	mov	r5,r22
    b124:	146ab03a 	or	r21,r2,r17
    b128:	00074540 	call	7454 <__umodsi3>
    b12c:	b00b883a 	mov	r5,r22
    b130:	e009883a 	mov	r4,fp
    b134:	1029883a 	mov	r20,r2
    b138:	9dffffcc 	andi	r23,r19,65535
    b13c:	00073f00 	call	73f0 <__udivsi3>
    b140:	b809883a 	mov	r4,r23
    b144:	100b883a 	mov	r5,r2
    b148:	00064800 	call	6480 <__mulsi3>
    b14c:	a008943a 	slli	r4,r20,16
    b150:	a806d43a 	srli	r3,r21,16
    b154:	84a8983a 	sll	r20,r16,r18
    b158:	1906b03a 	or	r3,r3,r4
    b15c:	1880042e 	bgeu	r3,r2,b170 <__umoddi3+0x500>
    b160:	1cc7883a 	add	r3,r3,r19
    b164:	1cc00236 	bltu	r3,r19,b170 <__umoddi3+0x500>
    b168:	1880012e 	bgeu	r3,r2,b170 <__umoddi3+0x500>
    b16c:	1cc7883a 	add	r3,r3,r19
    b170:	18a3c83a 	sub	r17,r3,r2
    b174:	b00b883a 	mov	r5,r22
    b178:	8809883a 	mov	r4,r17
    b17c:	00074540 	call	7454 <__umodsi3>
    b180:	b00b883a 	mov	r5,r22
    b184:	8809883a 	mov	r4,r17
    b188:	1021883a 	mov	r16,r2
    b18c:	00073f00 	call	73f0 <__udivsi3>
    b190:	100b883a 	mov	r5,r2
    b194:	b809883a 	mov	r4,r23
    b198:	8020943a 	slli	r16,r16,16
    b19c:	00064800 	call	6480 <__mulsi3>
    b1a0:	a8ffffcc 	andi	r3,r21,65535
    b1a4:	1c06b03a 	or	r3,r3,r16
    b1a8:	1880042e 	bgeu	r3,r2,b1bc <__umoddi3+0x54c>
    b1ac:	1cc7883a 	add	r3,r3,r19
    b1b0:	1cc00236 	bltu	r3,r19,b1bc <__umoddi3+0x54c>
    b1b4:	1880012e 	bgeu	r3,r2,b1bc <__umoddi3+0x54c>
    b1b8:	1cc7883a 	add	r3,r3,r19
    b1bc:	18a3c83a 	sub	r17,r3,r2
    b1c0:	003f2906 	br	ae68 <__alt_mem_epcs_flash_controller+0xfe001e68>
    b1c4:	e48fc83a 	sub	r7,fp,r18
    b1c8:	1d49c83a 	sub	r4,r3,r21
    b1cc:	e1f9803a 	cmpltu	fp,fp,r7
    b1d0:	2739c83a 	sub	fp,r4,fp
    b1d4:	8f09c83a 	sub	r4,r17,fp
    b1d8:	003fc306 	br	b0e8 <__alt_mem_epcs_flash_controller+0xfe0020e8>
    b1dc:	01000604 	movi	r4,24
    b1e0:	003ef906 	br	adc8 <__alt_mem_epcs_flash_controller+0xfe001dc8>
    b1e4:	00800604 	movi	r2,24
    b1e8:	003f1306 	br	ae38 <__alt_mem_epcs_flash_controller+0xfe001e38>
    b1ec:	01000604 	movi	r4,24
    b1f0:	003eb606 	br	accc <__alt_mem_epcs_flash_controller+0xfe001ccc>
    b1f4:	40bf902e 	bgeu	r8,r2,b038 <__alt_mem_epcs_flash_controller+0xfe002038>
    b1f8:	b5bfff84 	addi	r22,r22,-2
    b1fc:	4551883a 	add	r8,r8,r21
    b200:	003f8e06 	br	b03c <__alt_mem_epcs_flash_controller+0xfe00203c>
    b204:	18bf762e 	bgeu	r3,r2,afe0 <__alt_mem_epcs_flash_controller+0xfe001fe0>
    b208:	8c7fff84 	addi	r17,r17,-2
    b20c:	1d47883a 	add	r3,r3,r21
    b210:	003f7406 	br	afe4 <__alt_mem_epcs_flash_controller+0xfe001fe4>
    b214:	1cc7883a 	add	r3,r3,r19
    b218:	003ecd06 	br	ad50 <__alt_mem_epcs_flash_controller+0xfe001d50>
    b21c:	8005883a 	mov	r2,r16
    b220:	003ef806 	br	ae04 <__alt_mem_epcs_flash_controller+0xfe001e04>
    b224:	873fe736 	bltu	r16,fp,b1c4 <__alt_mem_epcs_flash_controller+0xfe0021c4>
    b228:	e00f883a 	mov	r7,fp
    b22c:	0009883a 	mov	r4,zero
    b230:	003fad06 	br	b0e8 <__alt_mem_epcs_flash_controller+0xfe0020e8>

0000b234 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b234:	defffd04 	addi	sp,sp,-12
    b238:	df000215 	stw	fp,8(sp)
    b23c:	df000204 	addi	fp,sp,8
    b240:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    b244:	0001883a 	nop
    b248:	e0bfff17 	ldw	r2,-4(fp)
    b24c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    b250:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b254:	10000226 	beq	r2,zero,b260 <_exit+0x2c>
    ALT_SIM_FAIL();
    b258:	002af070 	cmpltui	zero,zero,43969
    b25c:	00000106 	br	b264 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    b260:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b264:	003fff06 	br	b264 <__alt_mem_epcs_flash_controller+0xfe002264>
