
nios_proj.elf:     file format elf32-littlenios2
nios_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0005d7dc memsz 0x0005d7dc flags r-x
    LOAD off    0x0005e7fc vaddr 0x0005d7fc paddr 0x0005f928 align 2**12
         filesz 0x0000212c memsz 0x0000212c flags rw-
    LOAD off    0x00060a54 vaddr 0x00061a54 paddr 0x00061a54 align 2**12
         filesz 0x00000000 memsz 0x00001980 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00058130  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00005488  00058374  00058374  00059374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000212c  0005d7fc  0005f928  0005e7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001980  00061a54  00061a54  00060a54  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000633d4  000633d4  00060928  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  02008000  02008000  00060928  2**0
                  CONTENTS
  8 .epcs_flash_controller 00000000  02011000  02011000  00060928  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00060928  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000017a0  00000000  00000000  00060950  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00046021  00000000  00000000  000620f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000f127  00000000  00000000  000a8111  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a447  00000000  00000000  000b7238  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007654  00000000  00000000  000d1680  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000084c1  00000000  00000000  000d8cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001e214  00000000  00000000  000e1195  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000ff3ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001e98  00000000  00000000  000ff410  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00109ddd  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  00109de0  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00109de3  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00109de4  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00109de5  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00109de9  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00109ded  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  00109df1  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  00109dfa  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  00109e03  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000018  00000000  00000000  00109e0c  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003d  00000000  00000000  00109e24  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000602be  00000000  00000000  00109e61  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00058374 l    d  .rodata	00000000 .rodata
0005d7fc l    d  .rwdata	00000000 .rwdata
00061a54 l    d  .bss	00000000 .bss
000633d4 l    d  .sdram	00000000 .sdram
02008000 l    d  .onchip_memory2	00000000 .onchip_memory2
02011000 l    d  .epcs_flash_controller	00000000 .epcs_flash_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Class2018/Documents/Projects/Crypto_wallet/impl/nios_proj_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hashmap.c
0005d7fc l     O .rwdata	00000400 crc32_tab
00000000 l    df *ABS*	00000000 main.c
0005f888 l     O .rwdata	00000004 MAX_SCRIPT_SIZE
00000bfc l     F .text	00000040 showError
000584d8 l     O .rodata	0000000d __func__.4475
0005dbfc l     O .rwdata	0000000b digits.4490
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 uart_usb.c
00002300 l     F .text	0000012c IsrUart
00000000 l    df *ABS*	00000000 base58.c
000584e8 l     O .rodata	00000080 b58digits_map
00058568 l     O .rodata	0000003b b58digits_ordered
00000000 l    df *ABS*	00000000 bip32.c
000034c4 l     F .text	00000044 btc_hash_sngl_sha256
000036ac l     F .text	00000074 write_be
00003720 l     F .text	00000074 read_be
00003ef0 l     F .text	000000fc btc_hdnode_serialize
00058640 l     O .rodata	00000014 __func__.3772
0005f890 l     O .rwdata	00000002 delim.3768
0005f894 l     O .rwdata	00000005 prime.3769
0005dc08 l     O .rwdata	0000000b digits.3770
00000000 l    df *ABS*	00000000 chainparams.c
00000000 l    df *ABS*	00000000 commontools.c
0005f89c l     O .rwdata	00000004 MAX_SCRIPT_SIZE
0005a7b8 l     O .rodata	00000016 __func__.4356
0005a7d0 l     O .rodata	00000017 __func__.4365
0005a7e8 l     O .rodata	0000000e __func__.4380
0005a7f8 l     O .rodata	0000000e __func__.4393
00000000 l    df *ABS*	00000000 ecc_key.c
00005054 l     F .text	00000054 btc_hash
000050a8 l     F .text	00000044 btc_hash_sngl_sha256
0005f8a0 l     O .rwdata	00000004 MAX_SCRIPT_SIZE
0005a8d8 l     O .rodata	00000010 __func__.3816
0005a8e8 l     O .rodata	0000001a __func__.3825
0005a904 l     O .rodata	00000017 __func__.3835
00000000 l    df *ABS*	00000000 ecc_libsecp256k1.c
00061a5c l     O .bss	00000004 secp256k1_ctx
0005a9b0 l     O .rodata	0000000e __func__.3322
0005a9c0 l     O .rodata	00000013 __func__.3336
0005a9d4 l     O .rodata	0000001e __func__.3341
0005a9f4 l     O .rodata	0000001d __func__.3348
0005aa14 l     O .rodata	0000001a __func__.3352
0005aa30 l     O .rodata	00000016 __func__.3358
0005aa48 l     O .rodata	0000000d __func__.3365
0005aa58 l     O .rodata	00000015 __func__.3373
0005aa70 l     O .rodata	00000021 __func__.3382
0005aa94 l     O .rodata	00000017 __func__.3391
0005aaac l     O .rodata	00000013 __func__.3401
0005aac0 l     O .rodata	00000022 __func__.3409
0005aae4 l     O .rodata	00000017 __func__.3417
00000000 l    df *ABS*	00000000 memory.c
0005aafc l     O .rodata	00000010 default_mem_mapper
0005dc14 l     O .rwdata	00000010 current_mem_mapper
00000000 l    df *ABS*	00000000 random.c
0005f8a4 l     O .rwdata	00000008 default_rnd_mapper
0005f8ac l     O .rwdata	00000008 current_rnd_mapper
00000000 l    df *ABS*	00000000 ripemd160.c
00006a64 l     F .text	00003c40 compress
00000000 l    df *ABS*	00000000 script.c
0005f8b4 l     O .rwdata	00000004 MAX_SCRIPT_SIZE
0000aae0 l     F .text	00000044 btc_hash_sngl_sha256
0005ac38 l     O .rodata	00000029 __func__.3795
0000b168 l     F .text	00000028 btc_script_is_pushdata
0000b190 l     F .text	00000034 btc_script_is_op
0000b1c4 l     F .text	000000a4 btc_script_is_op_pubkey
0000b268 l     F .text	00000064 btc_script_is_op_pubkeyhash
0000b5e8 l     F .text	00000058 btc_script_is_op_smallint
0005ac64 l     O .rodata	00000010 __func__.3882
0000bf28 l     F .text	00000078 btc_decode_op_n
0005ac74 l     O .rodata	00000010 __func__.3930
0005ac84 l     O .rodata	0000001d __func__.3937
00000000 l    df *ABS*	00000000 bench_internal.c
0000c15c l     F .text	0000004c secp256k1_callback_call
0000c1a8 l     F .text	00000054 checked_malloc
0000c1fc l     F .text	000000ac secp256k1_sha256_initialize
0000c2a8 l     F .text	00004f20 secp256k1_sha256_transform
000111c8 l     F .text	0000010c secp256k1_sha256_write
000112d4 l     F .text	000001c8 secp256k1_sha256_finalize
0005cb2c l     O .rodata	00000040 pad.3486
0001149c l     F .text	000001bc secp256k1_hmac_sha256_initialize
00011658 l     F .text	00000048 secp256k1_hmac_sha256_write
000116a0 l     F .text	0000007c secp256k1_hmac_sha256_finalize
0001171c l     F .text	000001a0 secp256k1_rfc6979_hmac_sha256_initialize
0005f8d0 l     O .rwdata	00000001 zero.3523
0005f8d1 l     O .rwdata	00000001 one.3524
000118bc l     F .text	0000019c secp256k1_rfc6979_hmac_sha256_generate
0005f8d2 l     O .rwdata	00000001 zero.3530
00011a58 l     F .text	00000060 secp256k1_rfc6979_hmac_sha256_finalize
00011ab8 l     F .text	000003c0 secp256k1_fe_verify
00011e78 l     F .text	00000600 secp256k1_fe_normalize
00012478 l     F .text	00000330 secp256k1_fe_normalize_weak
000127a8 l     F .text	000005f8 secp256k1_fe_normalize_var
00012da0 l     F .text	00000400 secp256k1_fe_normalizes_to_zero
000131a0 l     F .text	00000428 secp256k1_fe_normalizes_to_zero_var
000135c8 l     F .text	000000e4 secp256k1_fe_set_int
000136ac l     F .text	00000120 secp256k1_fe_is_zero
000137cc l     F .text	00000084 secp256k1_fe_is_odd
00013850 l     F .text	00000070 secp256k1_fe_clear
000138c0 l     F .text	00000168 secp256k1_fe_cmp_var
00013a28 l     F .text	00000284 secp256k1_fe_set_b32
00013cac l     F .text	00000178 secp256k1_fe_get_b32
00013e24 l     F .text	00000248 secp256k1_fe_negate
0001406c l     F .text	000001c8 secp256k1_fe_mul_int
00014234 l     F .text	0000017c secp256k1_fe_add
000143b0 l     F .text	00005968 secp256k1_fe_mul_inner
00019d18 l     F .text	000044d8 secp256k1_fe_sqr_inner
0001e1f0 l     F .text	00000154 secp256k1_fe_mul
0001e344 l     F .text	000000b0 secp256k1_fe_sqr
0001e3f4 l     F .text	0000023c secp256k1_fe_cmov
0001e630 l     F .text	000001a4 secp256k1_fe_storage_cmov
0001e7d4 l     F .text	000001a8 secp256k1_fe_to_storage
0001e97c l     F .text	000001e0 secp256k1_fe_from_storage
0001eb5c l     F .text	00000050 secp256k1_fe_equal
0001ebac l     F .text	00000050 secp256k1_fe_equal_var
0001ebfc l     F .text	000007f4 secp256k1_fe_sqrt
0001f3f0 l     F .text	00000848 secp256k1_fe_inv
0001fc38 l     F .text	0000003c secp256k1_fe_inv_var
0001fc74 l     F .text	000002dc secp256k1_fe_inv_all_var
0001ff50 l     F .text	00000034 secp256k1_fe_is_quad_var
0005bcb0 l     O .rodata	00000064 secp256k1_ge_const_g
0001ff84 l     F .text	000000a0 secp256k1_ge_set_gej_zinv
00020024 l     F .text	00000104 secp256k1_ge_set_xy
00020128 l     F .text	00000028 secp256k1_ge_is_infinity
00020150 l     F .text	00000080 secp256k1_ge_neg
000201d0 l     F .text	000001ac secp256k1_ge_set_gej
0002037c l     F .text	000001bc secp256k1_ge_set_gej_var
00020538 l     F .text	00000260 secp256k1_ge_set_all_gej_var
00020798 l     F .text	00000150 secp256k1_ge_set_table_gej_var
000208e8 l     F .text	00000320 secp256k1_ge_globalz_set_table_gej
00020c08 l     F .text	00000070 secp256k1_gej_set_infinity
00020c78 l     F .text	00000060 secp256k1_gej_clear
00020cd8 l     F .text	00000050 secp256k1_ge_clear
00020d28 l     F .text	000000f8 secp256k1_ge_set_xquad
00020e20 l     F .text	00000098 secp256k1_ge_set_xo_var
00020eb8 l     F .text	00000124 secp256k1_gej_set_ge
00020fdc l     F .text	00000118 secp256k1_gej_eq_x_var
000210f4 l     F .text	000001a8 secp256k1_gej_neg
0002129c l     F .text	00000028 secp256k1_gej_is_infinity
000212c4 l     F .text	00000108 secp256k1_gej_is_valid_var
000213cc l     F .text	000000c0 secp256k1_ge_is_valid_var
0002148c l     F .text	000002e8 secp256k1_gej_double_var
00021774 l     F .text	0000008c secp256k1_gej_double_nonzero
00021800 l     F .text	000004e8 secp256k1_gej_add_var
00021ce8 l     F .text	00000520 secp256k1_gej_add_ge_var
00022208 l     F .text	00000548 secp256k1_gej_add_zinv_var
00022750 l     F .text	000006f8 secp256k1_gej_add_ge
0005cb6c l     O .rodata	00000030 fe_1.4308
00022e48 l     F .text	000000fc secp256k1_gej_rescale
00022f44 l     F .text	0000017c secp256k1_ge_to_storage
000230c0 l     F .text	00000068 secp256k1_ge_from_storage
00023128 l     F .text	0000006c secp256k1_ge_storage_cmov
00023194 l     F .text	00000064 secp256k1_gej_has_quad_y_var
000231f8 l     F .text	00000064 secp256k1_scalar_clear
0002325c l     F .text	0000006c secp256k1_scalar_set_int
000232c8 l     F .text	000000c8 secp256k1_scalar_get_bits
00023390 l     F .text	000001b4 secp256k1_scalar_get_bits_var
00023544 l     F .text	00000218 secp256k1_scalar_check_overflow
0002375c l     F .text	00000444 secp256k1_scalar_reduce
00023ba0 l     F .text	000004ec secp256k1_scalar_add
0002408c l     F .text	00000600 secp256k1_scalar_cadd_bit
0002468c l     F .text	0000035c secp256k1_scalar_set_b32
000249e8 l     F .text	00000308 secp256k1_scalar_get_b32
00024cf0 l     F .text	00000084 secp256k1_scalar_is_zero
00024d74 l     F .text	00000494 secp256k1_scalar_negate
00025208 l     F .text	00000088 secp256k1_scalar_is_one
00025290 l     F .text	00000240 secp256k1_scalar_is_high
000254d0 l     F .text	000005c4 secp256k1_scalar_cond_negate
00025a94 l     F .text	00004bf0 secp256k1_scalar_reduce_512
0002a684 l     F .text	00004bec secp256k1_scalar_mul_512
0002f270 l     F .text	000052e8 secp256k1_scalar_sqr_512
00034558 l     F .text	00000050 secp256k1_scalar_mul
000345a8 l     F .text	0000025c secp256k1_scalar_shr_int
00034804 l     F .text	00000048 secp256k1_scalar_sqr
0003484c l     F .text	00000b44 secp256k1_scalar_inverse
00035390 l     F .text	0000003c secp256k1_scalar_inverse_var
000353cc l     F .text	00000408 secp256k1_ecmult_odd_multiples_table
000357d4 l     F .text	00000068 secp256k1_ecmult_odd_multiples_table_globalz_windowa
0003583c l     F .text	0000013c secp256k1_ecmult_odd_multiples_table_storage_var
00035978 l     F .text	0000002c secp256k1_ecmult_context_init
000359a4 l     F .text	00000084 secp256k1_ecmult_context_build
00035a28 l     F .text	0000008c secp256k1_ecmult_context_clone
00035ab4 l     F .text	00000030 secp256k1_ecmult_context_is_built
00035ae4 l     F .text	00000044 secp256k1_ecmult_context_clear
00035b28 l     F .text	000003e0 secp256k1_ecmult_wnaf
00035f08 l     F .text	0000046c secp256k1_ecmult
00036374 l     F .text	00000288 secp256k1_wnaf_const
000365fc l     F .text	0000076c secp256k1_ecmult_const
00036d68 l     F .text	000000c8 gettimedouble
0003720c l     F .text	0000002c secp256k1_ecmult_gen_context_init
00037238 l     F .text	00000864 secp256k1_ecmult_gen_context_build
0005cb9c l     O .rodata	00000021 nums_b32.6041
00037d98 l     F .text	000002d8 secp256k1_ecmult_gen_blind
00037a9c l     F .text	00000030 secp256k1_ecmult_gen_context_is_built
00037acc l     F .text	000000f0 secp256k1_ecmult_gen_context_clone
00037bbc l     F .text	00000064 secp256k1_ecmult_gen_context_clear
00037c20 l     F .text	00000178 secp256k1_ecmult_gen
0005c6c8 l     O .rodata	00000030 secp256k1_ecdsa_const_order_as_fe
0005c6f8 l     O .rodata	00000030 secp256k1_ecdsa_const_p_minus_order
00038070 l     F .text	00000180 secp256k1_der_read_len
000381f0 l     F .text	0000025c secp256k1_der_parse_integer
0003844c l     F .text	00000120 secp256k1_ecdsa_sig_parse
0003856c l     F .text	0000026c secp256k1_ecdsa_sig_serialize
000387d8 l     F .text	00000178 secp256k1_ecdsa_sig_verify
00038950 l     F .text	000001d0 secp256k1_ecdsa_sig_sign
00038b20 l     F .text	000001b0 secp256k1_eckey_pubkey_parse
00038cd0 l     F .text	000000f4 secp256k1_eckey_pubkey_serialize
00038dc4 l     F .text	00000054 secp256k1_eckey_privkey_tweak_add
00038e18 l     F .text	00000090 secp256k1_eckey_pubkey_tweak_add
00038ea8 l     F .text	00000054 secp256k1_eckey_privkey_tweak_mul
00038efc l     F .text	00000098 secp256k1_eckey_pubkey_tweak_mul
00038f94 l     F .text	00000038 default_illegal_callback_fn
0005f8b8 l     O .rwdata	00000008 default_illegal_callback
00038fcc l     F .text	00000038 default_error_callback_fn
0005f8c0 l     O .rwdata	00000008 default_error_callback
000392d8 l     F .text	0000008c secp256k1_pubkey_load
00039364 l     F .text	00000050 secp256k1_pubkey_save
000396dc l     F .text	00000064 secp256k1_ecdsa_signature_load
00039740 l     F .text	00000060 secp256k1_ecdsa_signature_save
00039f74 l     F .text	00000134 nonce_function_rfc6979
0003aee8 l     F .text	00000078 secp256k1_ecdsa_recoverable_signature_load
0003af60 l     F .text	00000074 secp256k1_ecdsa_recoverable_signature_save
0003b330 l     F .text	000001e0 secp256k1_ecdsa_sig_recover
0005cbbd l     O .rodata	00000020 init_x.6633
0005cbdd l     O .rodata	00000020 init_y.6634
00000000 l    df *ABS*	00000000 segwit_addr.c
0005f8d4 l     O .rwdata	00000004 charset
0005cc21 l     O .rodata	00000080 charset_rev
0003d104 l     F .text	00000178 convert_bits
00000000 l    df *ABS*	00000000 serialize.c
00000000 l    df *ABS*	00000000 sha2.c
0005cca4 l     O .rodata	00000100 K256
0005cda4 l     O .rodata	00000020 sha256_initial_hash_value
0005cdc4 l     O .rodata	00000280 K512
0005d044 l     O .rodata	00000040 sha512_initial_hash_value
00000000 l    df *ABS*	00000000 utils.c
00061aac l     O .bss	00000800 buffer_hex_to_uint8
000622ac l     O .bss	00000800 buffer_uint8_to_hex
0005dc24 l     O .rwdata	00000011 digits.3639
0005dc38 l     O .rwdata	00000011 digits.3648
00000000 l    df *ABS*	00000000 vector.c
00041a88 l     F .text	000000fc vector_free_data
00041bec l     F .text	000000bc vector_grow
00000000 l    df *ABS*	00000000 cstr.c
00042124 l     F .text	000000ec cstr_alloc_min_sz
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
0005d41c l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 getenv.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 impure.c
0005dc4c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strnlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
0005d5e6 l     O .rodata	00000010 zeroes.4389
0005d5f6 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
0005d606 l     O .rodata	00000010 zeroes.4404
0004b9d8 l     F .text	000000bc __sbprintf
0005d616 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0004bd68 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 environ.c
00061a6c l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004d898 l     F .text	00000008 __fp_unlock
0004d8ac l     F .text	0000019c __sinit.part.1
0004da48 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0005e498 l     O .rwdata	00000020 lc_ctype_charset
0005e478 l     O .rwdata	00000020 lc_message_charset
0005e4b8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
0005d644 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0005d778 l     O .rodata	00000010 blanks.4332
0005d768 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
000511a8 l     F .text	000000fc __sprint_r.part.0
0005d798 l     O .rodata	00000010 blanks.4348
0005d788 l     O .rodata	00000010 zeroes.4349
00052734 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00053cc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00053dcc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00053e74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00054414 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
000544f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00054660 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0005474c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00054920 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0005f914 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00054d40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00054e74 l     F .text	00000034 alt_dev_reg
0005e698 l     O .rwdata	000000cc epcs_flash_controller
0005e764 l     O .rwdata	00001060 jtag_uart
0005f7c4 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00054f58 l     F .text	00000034 alt_flash_device_register
00054fe0 l     F .text	000003f8 alt_epcs_flash_query
000553d8 l     F .text	000000ec alt_epcs_flash_memcmp
000557b0 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00055c78 l     F .text	0000020c altera_avalon_jtag_uart_irq
00055e84 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00056678 l     F .text	0000009c altera_avalon_uart_irq
00056714 l     F .text	000000e4 altera_avalon_uart_rxirq
000567f8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00056994 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00056bac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
00056df0 l     F .text	00000038 epcs_test_wip
00056e28 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0005769c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000579c8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00057b08 l     F .text	0000003c alt_get_errno
00057b44 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 __atexit.c
00061aa8 g     O .bss	00000004 alt_instruction_exception_handler
000024e0 g     F .text	0000003c EmptyUart
0000b3b0 g     F .text	00000140 btc_script_is_pubkeyhash
000064a8 g     F .text	00000090 btc_ecc_der_to_compact
000460d8 g     F .text	00000018 putchar
0004f90c g     F .text	00000074 _mprec_log10
0003ba14 g     F .text	000001e4 bench_setup
00055724 g     F .text	0000008c alt_epcs_flash_get_info
0003be48 g     F .text	00000088 bench_scalar_inverse_var
0004f9f8 g     F .text	0000008c __any_on
00052d64 g     F .text	00000054 _isatty_r
0005d650 g     O .rodata	00000028 __mprec_tinytens
0005485c g     F .text	0000007c alt_main
000049f0 g     F .text	00000080 gen_privatekey
00046e18 g     F .text	00000090 strcpy
00059704 g     O .rodata	00000858 btc_chainparams_regtest
000460f0 g     F .text	000000c0 _puts_r
000415e8 g     F .text	0000003c utils_hex_digit
000632d4 g     O .bss	00000100 alt_irq
00005a24 g     F .text	000000a4 btc_pubkey_getaddr_p2sh_p2wpkh
00052db8 g     F .text	00000060 _lseek_r
00039228 g     F .text	00000058 secp256k1_context_set_illegal_callback
0005f928 g       *ABS*	00000000 __flash_rwdata_start
00053b10 g     F .text	00000088 .hidden __eqdf2
0004266c g     F .text	00000044 cstr_append_c
000040a4 g     F .text	00000058 btc_hdnode_get_hash160
0004e6b0 g     F .text	0000005c _gettimeofday_r
00006840 g     F .text	00000034 btc_free_internal
000633d4 g       *ABS*	00000000 __alt_heap_start
00047240 g     F .text	00000008 strtok_r
00006904 g     F .text	00000038 btc_rnd_set_mapper
00004b30 g     F .text	000003fc hd_print_node
00046ab4 g     F .text	0000005c _kill_r
0000b824 g     F .text	000001dc btc_script_classify
0003aae8 g     F .text	000001b0 secp256k1_ec_pubkey_tweak_mul
000394d0 g     F .text	0000020c secp256k1_ec_pubkey_serialize
00046094 g     F .text	0000003c printf
00052e78 g     F .text	0000009c _wcrtomb_r
0004687c g     F .text	00000084 _signal_r
00039c90 g     F .text	00000114 secp256k1_ecdsa_signature_normalize
0003ac98 g     F .text	000000c4 secp256k1_context_randomize
0004fd38 g     F .text	0000005c __sseek
0004dbe8 g     F .text	00000010 __sinit
0003bd48 g     F .text	00000078 bench_scalar_mul
00041f5c g     F .text	00000060 vector_remove
00005c6c g     F .text	00000044 btc_ecc_stop
0003da3c g     F .text	00000058 deser_u32
000527f0 g     F .text	00000140 __swbuf_r
0004e70c g     F .text	0000007c _setlocale_r
0004da50 g     F .text	00000068 __sfmoreglue
000548fc g     F .text	00000024 __malloc_unlock
00005810 g     F .text	0000004c btc_key_sign_hash
00000818 g     F .text	0000010c hashmap_get
0004182c g     F .text	00000064 safe_malloc
00042394 g     F .text	00000044 cstr_new_cstr
000060c8 g     F .text	000000bc btc_ecc_sign_compact
000400a4 g     F .text	00000490 sha512_Last
00045de0 g     F .text	0000015c memmove
0004dbd0 g     F .text	00000018 _cleanup
0004ea88 g     F .text	000000a8 _Balloc
000471a4 g     F .text	0000009c __strtok_r
00040af8 g     F .text	00000050 utils_clear_buffers
00041b84 g     F .text	00000068 vector_free
00040788 g     F .text	00000058 sha512_Raw
00043d10 g     F .text	000000dc .hidden __gtdf2
00057d5c g     F .text	00000024 altera_nios2_gen2_irq_init
00040f20 g     F .text	000003dc utils_hex_to_uint8
00006680 g     F .text	00000044 btc_realloc
00056e64 g     F .text	000000fc epcs_sector_erase
0003c094 g     F .text	0000008c bench_field_inverse
00003308 g     F .text	000000fc btc_base58_decode_check
00000000 g     F .entry	0000001c __reset
0000bab8 g     F .text	000000f8 btc_script_append_pushdata
0003a0a8 g     F .text	000002e0 secp256k1_ecdsa_sign
0004529c g     F .text	0000002c getenv
00005dbc g     F .text	00000068 btc_ecc_private_key_tweak_add
00000020 g       *ABS*	00000000 __flash_exceptions_start
000058a8 g     F .text	00000054 btc_key_sign_hash_compact_recoverable
00006704 g     F .text	00000064 btc_malloc_internal
00052d08 g     F .text	0000005c _fstat_r
000059c0 g     F .text	00000064 btc_pubkey_verify_sig
00061a70 g     O .bss	00000004 errno
0003b158 g     F .text	0000010c secp256k1_ecdsa_recoverable_signature_serialize_compact
0004fcb4 g     F .text	00000008 __seofread
0004ff6c g     F .text	0000123c ___svfiprintf_internal_r
00005234 g     F .text	000000d4 btc_privkey_verify_pubkey
00061a98 g     O .bss	00000004 alt_argv
00067888 g       *ABS*	00000000 _gp
00054d10 g     F .text	00000030 usleep
0000be30 g     F .text	00000070 btc_script_get_scripthash
00053f60 g     F .text	00000020 getpid
0005f8c8 g     O .rwdata	00000004 secp256k1_nonce_function_rfc6979
00042210 g     F .text	00000090 cstr_alloc_minsize
0003a388 g     F .text	000000f0 secp256k1_ec_seckey_verify
0005e518 g     O .rwdata	00000180 alt_fd_list
000460d0 g     F .text	00000008 _putchar_r
000570a8 g     F .text	0000006c epcs_write_status_register
00057f7c g     F .text	00000090 alt_find_dev
00045c98 g     F .text	00000148 memcpy
0003eb14 g     F .text	00000058 sha256_Raw
0004d8a0 g     F .text	0000000c _cleanup_r
00044ef4 g     F .text	000000dc .hidden __floatsidf
00003e98 g     F .text	00000058 btc_hdnode_fill_public_key
00003508 g     F .text	000001a4 print_node
00002114 g     F .text	00000068 u32getRandom
00057a8c g     F .text	0000007c alt_io_redirect
00043dec g     F .text	000000f4 .hidden __ltdf2
0003c530 g     F .text	000000c0 bench_wnaf_const
00058374 g       *ABS*	00000000 __DTOR_END__
000461b0 g     F .text	00000014 puts
0005792c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0003bc70 g     F .text	0000006c bench_scalar_negate
00006184 g     F .text	000000c0 btc_ecc_sign_compact_recoverable
00003794 g     F .text	00000038 btc_hdnode_new
000558bc g     F .text	00000100 alt_epcs_flash_write_block
000037cc g     F .text	000000c4 btc_hdnode_copy
0004fbec g     F .text	00000074 __fpclassifyd
0004f868 g     F .text	000000a4 __ratio
00052718 g     F .text	0000001c __vfiprintf_internal
0005607c g     F .text	0000021c altera_avalon_jtag_uart_read
000453e8 g     F .text	00000014 malloc
00046064 g     F .text	00000030 _printf_r
0003c684 g     F .text	000000a4 bench_hmac_sha256
00042a98 g     F .text	00000064 .hidden __udivsi3
00054450 g     F .text	000000a4 isatty
0003d9e4 g     F .text	00000058 deser_s32
00046900 g     F .text	000000bc _raise_r
0004504c g     F .text	00000068 __assert_func
0005d6a0 g     O .rodata	000000c8 __mprec_tens
0004e788 g     F .text	0000000c __locale_charset
00061a80 g     O .bss	00000008 alt_timezone
000581b8 g     F .text	00000090 alt_icache_flush
00005554 g     F .text	00000058 btc_pubkey_init
00042754 g     F .text	000000dc cstr_compare
00061a68 g     O .bss	00000004 __malloc_top_pad
00046b10 g     F .text	00000004 _getpid_r
00005f60 g     F .text	000000b4 btc_ecc_verify_pubkey
000065a8 g     F .text	00000058 btc_mem_set_mapper
0005f8f0 g     O .rwdata	00000004 __mb_cur_max
0004e7b8 g     F .text	0000000c _localeconv_r
00047264 g     F .text	00000320 _strtoull_r
00003470 g     F .text	00000054 btc_p2wpkh_addr_from_hash160
0004ee94 g     F .text	0000003c __i2b
0004e06c g     F .text	000004bc __sfvwrite_r
000469bc g     F .text	000000a8 __sigtramp_r
0003dd2c g     F .text	00000104 deser_varstr
000467bc g     F .text	00000054 _sbrk_r
00039a44 g     F .text	00000138 secp256k1_ecdsa_signature_serialize_der
000068cc g     F .text	00000038 btc_rnd_set_mapper_default
0003ad5c g     F .text	0000018c secp256k1_ec_pubkey_combine
0003d518 g     F .text	0000004c ser_u16
000020ec g     F .text	00000028 u08getRandom
00052e18 g     F .text	00000060 _read_r
000053b8 g     F .text	0000019c btc_privkey_decode_wif
0000696c g     F .text	0000004c btc_random_bytes
0005f908 g     O .rwdata	00000004 alt_max_fd
00041890 g     F .text	0000007c btc_cheap_random_bytes
00041f1c g     F .text	00000040 vector_remove_idx
000529fc g     F .text	000000f0 _fclose_r
0003d640 g     F .text	0000004c ser_s64
0004d868 g     F .text	00000030 fflush
00061a64 g     O .bss	00000004 __malloc_max_sbrked_mem
0003c49c g     F .text	00000094 bench_ecmult_wnaf
0000b4f0 g     F .text	000000f8 btc_script_is_scripthash
0003d370 g     F .text	00000164 segwit_addr_decode
0003bbf8 g     F .text	00000078 bench_scalar_add
00042b7c g     F .text	000008ac .hidden __adddf3
00055844 g     F .text	00000078 alt_epcs_flash_erase_block
0003b264 g     F .text	000000cc secp256k1_ecdsa_recoverable_signature_convert
0004f610 g     F .text	0000010c __b2d
000535d8 g     F .text	00000538 .hidden __umoddi3
00054788 g     F .text	000000d4 lseek
0005f8dc g     O .rwdata	00000004 _global_impure_ptr
00057374 g     F .text	0000005c epcs_exit_4_bytes_mode
00046258 g     F .text	00000564 _realloc_r
000024ac g     F .text	00000034 closeUart
000633d4 g       *ABS*	00000000 __bss_end
00054324 g     F .text	000000f0 alt_iic_isr_register
00054c08 g     F .text	00000108 alt_tick
00053060 g     F .text	00000578 .hidden __udivdi3
00040b48 g     F .text	000003d8 utils_hex_to_bin
00052c64 g     F .text	00000024 _fputwc_r
0005d678 g     O .rodata	00000028 __mprec_bigtens
0004ec78 g     F .text	00000104 __s2b
000423d8 g     F .text	0000006c cstr_new
00045034 g     F .text	00000018 abort
00042620 g     F .text	0000004c cstr_append_cstr
00053c18 g     F .text	000000a8 .hidden __floatunsidf
0004f350 g     F .text	00000060 __mcmp
000565cc g     F .text	000000ac altera_avalon_uart_init
000050ec g     F .text	00000040 btc_privkey_init
0004dc08 g     F .text	00000018 __fp_lock_all
000542d8 g     F .text	0000004c alt_ic_irq_enabled
00054b6c g     F .text	0000009c alt_alarm_stop
0000390c g     F .text	000000fc btc_hdnode_from_seed
00061a90 g     O .bss	00000004 alt_irq_active
00047148 g     F .text	00000044 strnlen
000051ac g     F .text	00000088 btc_privkey_gen
00039004 g     F .text	00000110 secp256k1_context_create
000000fc g     F .exceptions	000000d4 alt_irq_handler
0005e4f0 g     O .rwdata	00000028 alt_dev_null
00042570 g     F .text	000000b0 cstr_append_buf
000407e0 g     F .text	0000018c hmac_sha256
00000e7c g     F .text	00000320 hd_save_node
00057654 g     F .text	00000048 alt_dcache_flush_all
0004ed7c g     F .text	00000068 __hi0bits
000424b0 g     F .text	000000c0 cstr_resize
00005620 g     F .text	00000048 btc_pubkey_is_valid
00053b98 g     F .text	00000080 .hidden __fixdfsi
000450c8 g     F .text	00000018 calloc
0003bfa0 g     F .text	00000080 bench_field_mul
0000480c g     F .text	0000010c addresses_from_pubkey
0000b78c g     F .text	00000098 btc_script_classify_ops
0003c7b4 g     F .text	0000005c bench_context_verify
0005f928 g       *ABS*	00000000 __ram_rwdata_end
0003c5f0 g     F .text	00000094 bench_sha256
0005f900 g     O .rwdata	00000008 alt_dev_list
00054d7c g     F .text	000000f8 write
0004fa84 g     F .text	000000a0 _putc_r
0000bfa0 g     F .text	000001bc btc_script_is_witnessprogram
00062ad4 g     O .bss	00000400 rx_buffer
0005f8ec g     O .rwdata	00000004 environ
0004190c g     F .text	000000a8 btc_get_default_datadir
0005d7fc g       *ABS*	00000000 __ram_rodata_end
00053eb0 g     F .text	000000b0 fstat
00045260 g     F .text	00000024 fprintf
00054530 g     F .text	00000130 kill
00043dec g     F .text	000000f4 .hidden __ledf2
00062ed4 g     O .bss	00000400 tx_buffer
0003d4d4 g     F .text	00000044 ser_bytes
000005f8 g     F .text	00000134 hashmap_rehash
0004f0c8 g     F .text	00000140 __pow5mult
00061a7c g     O .bss	00000004 __nlocale_changed
000512bc g     F .text	0000145c ___vfiprintf_internal_r
00042afc g     F .text	00000058 .hidden __umodsi3
00057230 g     F .text	00000068 epcs_read_electronic_signature
000633d4 g       *ABS*	00000000 end
000003bc g     F .text	00000118 hashmap_hash_int
000067d4 g     F .text	0000006c btc_realloc_internal
0003de68 g     F .text	00000074 sha256_Init
0000ab24 g     F .text	00000348 btc_script_copy_without_op_codeseperator
00003188 g     F .text	00000180 btc_base58_encode_check
00056be8 g     F .text	000001ac altera_avalon_uart_write
00055bb8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00058374 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00040534 g     F .text	00000254 sha512_Final
00003be0 g     F .text	000002b8 btc_hdnode_private_ckd
0005651c g     F .text	00000060 altera_avalon_uart_write_fd
00044fd0 g     F .text	00000064 .hidden __clzsi2
00005e24 g     F .text	000000dc btc_ecc_public_key_tweak_add
0005657c g     F .text	00000050 altera_avalon_uart_close_fd
00056298 g     F .text	00000224 altera_avalon_jtag_uart_write
0004dbf8 g     F .text	00000004 __sfp_lock_acquire
0004e9a4 g     F .text	000000e4 memchr
000497c4 g     F .text	000021f8 ___vfprintf_internal_r
0000119c g     F .text	00000704 hdderive
00046b14 g     F .text	00000058 _sprintf_r
0003a478 g     F .text	000001c8 secp256k1_ec_pubkey_create
0004dd5c g     F .text	00000310 _free_r
00000328 g     F .text	00000094 crc32
0004e794 g     F .text	00000010 __locale_mb_cur_max
0004bbe8 g     F .text	00000180 __call_exitprocs
0003de30 g     F .text	00000038 deser_s64
0003d8e8 g     F .text	000000a4 deser_bytes
0003daf4 g     F .text	0000003c deser_u256
00061a78 g     O .bss	00000004 __mlocale_changed
00036e30 g     F .text	000000d4 print_number
0004230c g     F .text	00000088 cstr_new_buf
0005f8e4 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00061aa0 g     O .bss	00000004 _alt_tick_rate
00004918 g     F .text	000000d8 pubkey_from_privatekey
000461dc g     F .text	00000064 rand
0003c020 g     F .text	00000074 bench_field_sqr
0003d868 g     F .text	00000080 deser_skip
0003c810 g     F .text	0000005c bench_context_sign
0004f208 g     F .text	00000148 __lshift
00057d80 g     F .text	000001fc alt_avalon_spi_command
00061aa4 g     O .bss	00000004 _alt_nticks
000018a0 g     F .text	0000015c parseData
00046a78 g     F .text	00000018 signal
0005495c g     F .text	000000fc read
00054ee0 g     F .text	00000078 alt_sys_init
0004fd9c g     F .text	000001d0 __ssprint_r
000022bc g     F .text	00000044 uartGetChar
000009f4 g     F .text	0000013c hashmap_remove
00002cb4 g     F .text	00000150 btc_b58check
0005825c g     F .text	00000118 __register_exitproc
0005a4f0 g     O .rodata	00000150 btc_mainnet_checkpoint_array
00046f8c g     F .text	000000d0 strncmp
00000de8 g     F .text	00000094 hdgenmaster
0004eed0 g     F .text	000001f8 __multiply
00055f24 g     F .text	00000068 altera_avalon_jtag_uart_close
00042b54 g     F .text	00000028 .hidden __mulsi3
0005d7fc g       *ABS*	00000000 __ram_rwdata_start
00058374 g       *ABS*	00000000 __ram_rodata_start
0004705c g     F .text	000000ec strncpy
00062aac g     O .bss	00000028 __malloc_current_mallinfo
0000a6a4 g     F .text	0000043c btc_ripemd160
00002e04 g     F .text	00000384 btc_base58_encode
0004f71c g     F .text	0000014c __d2b
0003afd4 g     F .text	00000184 secp256k1_ecdsa_recoverable_signature_parse_compact
00005728 g     F .text	00000070 btc_pubkey_get_hex
0000ae6c g     F .text	00000038 btc_script_op_new
00006874 g     F .text	00000058 btc_mem_zero
00056d94 g     F .text	0000005c epcs_read_status_register
0003dedc g     F .text	000005c0 sha256_Transform
00036f04 g     F .text	00000308 run_benchmark
00000b30 g     F .text	0000004c hashmap_free
00046240 g     F .text	00000018 realloc
0003a96c g     F .text	0000017c secp256k1_ec_privkey_tweak_mul
00055a54 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00058114 g     F .text	000000a4 alt_get_fd
000574fc g     F .text	00000158 alt_busy_sleep
00004404 g     F .text	000003a0 btc_hd_generate_key
000529a8 g     F .text	00000054 _close_r
0004718c g     F .text	00000018 strtok
00057298 g     F .text	00000080 epcs_read_device_id
00041fbc g     F .text	00000168 vector_resize
00045c1c g     F .text	0000007c memcmp
00055b14 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00042830 g     F .text	00000110 cstr_erase
000633d4 g       *ABS*	00000000 __alt_stack_base
00055b64 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0003bcdc g     F .text	0000006c bench_scalar_sqr
0004ba94 g     F .text	00000154 __swsetup_r
00043428 g     F .text	000008e8 .hidden __divdf3
0004dab8 g     F .text	00000118 __sfp
00000b7c g     F .text	00000040 hashmap_length
0004f980 g     F .text	00000078 __copybits
0005e070 g     O .rwdata	00000408 __malloc_av_
0004dc04 g     F .text	00000004 __sinit_lock_release
00000924 g     F .text	000000d0 hashmap_iterate
00005170 g     F .text	0000003c btc_privkey_cleanse
00043ee0 g     F .text	00000718 .hidden __muldf3
02011000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
0004fc60 g     F .text	00000054 __sread
0005800c g     F .text	00000108 alt_find_file
000576d8 g     F .text	000000a4 alt_dev_llist_insert
000548d8 g     F .text	00000024 __malloc_lock
00045238 g     F .text	00000028 _fprintf_r
00054abc g     F .text	000000b0 sbrk
00047584 g     F .text	000021d8 ___svfprintf_internal_r
0004d80c g     F .text	0000005c _fflush_r
000450e0 g     F .text	000000c4 _calloc_r
000391d0 g     F .text	00000058 secp256k1_context_destroy
00005798 g     F .text	00000078 btc_pubkey_from_key
0005f920 g     O .rwdata	00000008 alt_flash_dev_list
00047248 g     F .text	0000001c strtoull
00053f80 g     F .text	000001f4 gettimeofday
0000bdcc g     F .text	00000064 btc_script_build_p2sh
000422a0 g     F .text	0000006c cstr_new_sz
0000b640 g     F .text	0000014c btc_script_is_multisig
00061a54 g       *ABS*	00000000 __bss_start
00045f3c g     F .text	00000128 memset
0000ba00 g     F .text	00000074 btc_encode_op_n
000019fc g     F .text	0000068c main
0003e744 g     F .text	000003d0 sha256_Final
000069f0 g     F .text	00000074 btc_random_bytes_internal
00005b90 g     F .text	000000dc btc_ecc_start
00061a9c g     O .bss	00000004 alt_envp
00061a60 g     O .bss	00000004 __malloc_max_total_mem
00006768 g     F .text	0000006c btc_calloc_internal
00055ab4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00052930 g     F .text	00000018 __swbuf
000461c4 g     F .text	00000018 srand
000004d4 g     F .text	00000124 hashmap_hash
0003cce4 g     F .text	00000420 bech32_decode
0000512c g     F .text	00000044 btc_privkey_is_valid
000047a4 g     F .text	00000068 btc_hdnode_has_privkey
0004fd94 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00052aec g     F .text	00000014 fclose
000025e8 g     F .text	0000011c PutCUart
000452c8 g     F .text	00000104 _findenv_r
0004bf68 g     F .text	00001688 _dtoa_r
00045410 g     F .text	0000080c _malloc_r
00052fd4 g     F .text	00000030 __ascii_wctomb
0004975c g     F .text	00000050 time
0005f90c g     O .rwdata	00000004 alt_errno
000451dc g     F .text	00000020 _fiprintf_r
00046a90 g     F .text	00000010 _init_signal
00053e1c g     F .text	00000024 __env_unlock
0004e528 g     F .text	000000c4 _fwalk
00045284 g     F .text	00000018 _findenv
00058654 g     O .rodata	00000858 btc_chainparams_main
0003c2b0 g     F .text	00000084 bench_group_add_var
0004fb24 g     F .text	000000c8 putc
000429a0 g     F .text	00000084 .hidden __divsi3
0005f88c g     O .rwdata	00000004 chain
0004dc38 g     F .text	00000124 _malloc_trim_r
00058374 g       *ABS*	00000000 __CTOR_END__
000412fc g     F .text	000000ec utils_bin_to_hex
00002254 g     F .text	00000068 uartGetLine
00000c3c g     F .text	000001ac create_priv_key
000554c4 g     F .text	00000260 alt_epcs_flash_write
0000bbb0 g     F .text	00000148 btc_script_build_multisig
00046d3c g     F .text	000000dc strcmp
0003c86c g     F .text	000000b0 have_flag
00058374 g       *ABS*	00000000 __flash_rodata_start
000393b4 g     F .text	0000011c secp256k1_ec_pubkey_parse
00058374 g       *ABS*	00000000 __DTOR_LIST__
000040fc g     F .text	00000068 btc_hdnode_get_p2pkh_address
0000693c g     F .text	00000030 btc_random_init
0003fc58 g     F .text	0000044c sha512_Update
0003bdc0 g     F .text	00000088 bench_scalar_inverse
0003c1ac g     F .text	0000008c bench_field_sqrt
00053b10 g     F .text	00000088 .hidden __nedf2
00004048 g     F .text	0000005c btc_hdnode_serialize_private
00054ea8 g     F .text	00000038 alt_irq_init
00054a58 g     F .text	00000064 alt_release_fd
00003fec g     F .text	0000005c btc_hdnode_serialize_public
0003eb6c g     F .text	0000008c sha512_Init
00046b6c g     F .text	0000006c sprintf
0005d1da g     O .rodata	00000100 .hidden __clz_tab
00061a74 g     O .bss	00000004 _PathLocale
0003d7e4 g     F .text	00000084 ser_varstr
00041ca8 g     F .text	0000008c vector_find
00058248 g     F .text	00000014 atexit
00046ea8 g     F .text	0000004c strcspn
00052948 g     F .text	00000060 _write_r
0000af04 g     F .text	00000044 btc_script_op_free_cb
0003ca1c g     F .text	000002c8 bech32_encode
0004e7c4 g     F .text	00000018 setlocale
0005d084 g     O .rodata	00000100 p_util_hexdigit
0003c334 g     F .text	00000080 bench_group_add_affine
0003bf38 g     F .text	00000068 bench_field_normalize_weak
0003d5ec g     F .text	00000054 ser_u64
00004a70 g     F .text	000000c0 hd_gen_master
0003c238 g     F .text	00000078 bench_group_double_var
0005f8e0 g     O .rwdata	00000004 _impure_ptr
00061a94 g     O .bss	00000004 alt_argc
0003db30 g     F .text	00000118 deser_varlen
0004d5f0 g     F .text	0000021c __sflush_r
00006014 g     F .text	000000b4 btc_ecc_sign
000577dc g     F .text	00000060 _do_dtors
0003bed0 g     F .text	00000068 bench_field_normalize
0004e7b0 g     F .text	00000008 __locale_cjk_lang
000055ac g     F .text	00000074 btc_pubkey_get_length
0003d98c g     F .text	00000058 deser_u16
00061a58 g     O .bss	00000002 RxHead
00061a5a g     O .bss	00000002 RxTail
0000af48 g     F .text	00000220 btc_script_get_ops
0003d5ac g     F .text	00000040 ser_s32
00000020 g       .exceptions	00000000 alt_irq_entry
00005f00 g     F .text	00000060 btc_ecc_verify_privatekey
00003a08 g     F .text	000001d8 btc_hdnode_public_ckd
000066c4 g     F .text	00000040 btc_free
0004f5ac g     F .text	00000064 __ulp
0004dc20 g     F .text	00000018 __fp_unlock_all
00005668 g     F .text	0000004c btc_pubkey_cleanse
00000290 g     F .text	00000098 hashmap_new
0003d784 g     F .text	00000060 ser_str
0000bd74 g     F .text	00000058 btc_script_build_p2wpkh
0005f8f8 g     O .rwdata	00000008 alt_fs_list
00002704 g     F .text	000005b0 btc_base58_decode
0000585c g     F .text	0000004c btc_key_sign_hash_compact
00061a88 g     O .bss	00000008 alt_resettime
0003ebf8 g     F .text	00001060 sha512_Transform
0000072c g     F .text	000000ec hashmap_put
0003d6cc g     F .text	000000b8 ser_varlen
00000020 g       *ABS*	00000000 __ram_exceptions_start
0004e7dc g     F .text	0000000c localeconv
00056f60 g     F .text	000000f4 epcs_read_buffer
02008000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00002578 g     F .text	00000070 PutStrUart
00054f8c g     F .text	00000054 alt_epcs_flash_init
0005f8cc g     O .rwdata	00000004 secp256k1_nonce_function_default
000419b4 g     F .text	000000d4 vector_new
00054174 g     F .text	00000050 alt_ic_isr_register
000063fc g     F .text	000000ac btc_ecc_compact_to_der_normalized
00039114 g     F .text	000000bc secp256k1_context_clone
0005f928 g       *ABS*	00000000 _edata
000564bc g     F .text	00000060 altera_avalon_uart_read_fd
00041d34 g     F .text	000000a4 vector_add
000633d4 g       *ABS*	00000000 _end
0005783c g     F .text	00000068 alt_flash_open_dev
0000ba74 g     F .text	00000044 btc_script_append_op
00006538 g     F .text	00000070 btc_mem_set_mapper_default
0000217c g     F .text	00000070 getRandomBuffer
00006244 g     F .text	000000dc btc_ecc_recover_pubkey
00005b2c g     F .text	00000064 btc_pubkey_getaddr_p2wpkh
00052b00 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00055f8c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000397a0 g     F .text	00000124 secp256k1_ecdsa_signature_parse_der
00004164 g     F .text	0000006c btc_hdnode_get_pub_hex
0005424c g     F .text	0000008c alt_ic_irq_disable
00000bbc g     F .text	00000040 initialize
00057318 g     F .text	0000005c epcs_enter_4_bytes_mode
0004fcbc g     F .text	0000007c __swrite
0000bcf8 g     F .text	0000007c btc_script_build_p2pkh
0005f8e8 g     O .rwdata	00000004 __malloc_trim_threshold
0004e7a4 g     F .text	0000000c __locale_msgcharset
0003e49c g     F .text	000002a8 sha256_Update
000451a4 g     F .text	00000038 exit
000451fc g     F .text	0000003c fiprintf
000497ac g     F .text	00000018 _vfiprintf_r
0004e5ec g     F .text	000000c4 _fwalk_reent
000426b0 g     F .text	000000a4 cstr_equal
0004f3b0 g     F .text	000001fc __mdiff
0003c3b4 g     F .text	00000084 bench_group_add_affine_var
000021ec g     F .text	00000068 append
000578a4 g     F .text	00000054 alt_flash_close_dev
00041dd8 g     F .text	00000144 vector_remove_range
000398c4 g     F .text	00000180 secp256k1_ecdsa_signature_parse_compact
0003a640 g     F .text	0000017c secp256k1_ec_privkey_tweak_add
00042a24 g     F .text	00000074 .hidden __modsi3
0005f8d8 g     O .rwdata	00000004 __ctype_ptr__
00002088 g     F .text	00000064 initRandom
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0004dbfc g     F .text	00000004 __sfp_lock_release
00003890 g     F .text	0000007c btc_hdnode_free
00000000 g       *ABS*	00000000 __alt_mem_sdram
00039b7c g     F .text	00000114 secp256k1_ecdsa_signature_serialize_compact
000058fc g     F .text	000000c4 btc_key_sign_recover_pubkey
0003c438 g     F .text	00000064 bench_group_jacobi_var
0003d27c g     F .text	000000f4 segwit_addr_encode
0005d31b g     O .rodata	00000101 _ctype_
00006320 g     F .text	000000dc btc_ecc_verify_sig
00005308 g     F .text	000000b0 btc_privkey_encode_wif
000041d0 g     F .text	00000234 btc_hdnode_deserialize
0003b7fc g     F .text	00000218 secp256k1_ecdsa_recover
000056b4 g     F .text	00000074 btc_pubkey_get_hash160
0000b2cc g     F .text	000000e4 btc_script_is_pubkey
00056940 g     F .text	00000054 altera_avalon_uart_close
0003da94 g     F .text	00000060 deser_u64
0003dc48 g     F .text	000000e4 deser_str
00053e40 g     F .text	00000034 _exit
000573d0 g     F .text	0000012c alt_alarm_start
00004f2c g     F .text	00000128 hd_derive
00042940 g     F .text	00000060 .hidden __muldi3
0004e7e8 g     F .text	000001bc __smakebuf_r
00042444 g     F .text	0000006c cstr_free
00058eac g     O .rodata	00000858 btc_chainparams_test
00046ef4 g     F .text	00000098 strlen
00057054 g     F .text	00000054 epcs_write_enable
0003c728 g     F .text	0000008c bench_rfc6979_hmac_sha256
00046810 g     F .text	0000006c _init_signal_r
00057c08 g     F .text	00000154 open
0000bea0 g     F .text	00000088 btc_tx_out_type_to_str
00043d10 g     F .text	000000dc .hidden __gedf2
0003c91c g     F .text	00000100 bech32_polymod_step
0000663c g     F .text	00000044 btc_calloc
000450b4 g     F .text	00000014 __assert
00039280 g     F .text	00000058 secp256k1_context_set_error_callback
0005f8f4 g     O .rwdata	00000004 __wctomb
000512a4 g     F .text	00000018 __sprint_r
000578f8 g     F .text	00000034 alt_icache_flush_all
00046bd8 g     F .text	00000164 strchr
00005ac8 g     F .text	00000064 btc_pubkey_getaddr_p2pkh
0004096c g     F .text	0000018c hmac_sha512
00003404 g     F .text	0000006c btc_p2pkh_addr_from_hash160
00005cb0 g     F .text	0000010c btc_ecc_get_pubkey
00039da4 g     F .text	000001d0 secp256k1_ecdsa_verify
0005f910 g     O .rwdata	00000004 alt_priority_mask
00006600 g     F .text	0000003c btc_malloc
000541c4 g     F .text	00000088 alt_ic_irq_enable
0004b9bc g     F .text	0000001c __vfprintf_internal
0000aea4 g     F .text	00000060 btc_script_op_free
000569d0 g     F .text	000001dc altera_avalon_uart_read
00053004 g     F .text	0000005c _wctomb_r
00053df8 g     F .text	00000024 __env_lock
000445f8 g     F .text	000008fc .hidden __subdf3
0003b510 g     F .text	000002ec secp256k1_ecdsa_sign_recoverable
0003d564 g     F .text	00000048 ser_u32
000559bc g     F .text	00000098 alt_epcs_flash_read
0004ede4 g     F .text	000000b0 __lo0bits
000413e8 g     F .text	00000128 utils_uint8_to_hex
0005f918 g     O .rwdata	00000008 alt_alarm_list
0000242c g     F .text	00000080 initUart
0005777c g     F .text	00000060 _do_ctors
00046aa0 g     F .text	00000014 __sigtramp
000069b8 g     F .text	00000038 btc_random_init_internal
00052f14 g     F .text	000000c0 wcrtomb
00053cfc g     F .text	000000d0 close
0003c120 g     F .text	0000008c bench_field_inverse_var
0000251c g     F .text	0000005c GetCUart
0003d68c g     F .text	00000040 ser_u256
000546c8 g     F .text	00000084 alt_load
00041624 g     F .text	00000208 utils_uint256_sethex
0003a7bc g     F .text	000001b0 secp256k1_ec_pubkey_tweak_add
00041510 g     F .text	000000d8 utils_reverse_hex
00061a54 g     O .bss	00000002 TxHead
00052c88 g     F .text	00000080 fputwc
00046a64 g     F .text	00000014 raise
000453fc g     F .text	00000014 free
0004dc00 g     F .text	00000004 __sinit_lock_acquire
00057114 g     F .text	0000011c epcs_write_buffer
0004eb58 g     F .text	00000120 __multadd
0004eb30 g     F .text	00000028 _Bfree
000453cc g     F .text	0000001c _getenv_r
00061a56 g     O .bss	00000002 TxTail



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_epcs_flash_controller+0xfdfef004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008001b4 	movhi	r2,6
 140:	108cb504 	addi	r2,r2,13012
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008001b4 	movhi	r2,6
 158:	108cb504 	addi	r2,r2,13012
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_epcs_flash_controller+0xfdfef12c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_epcs_flash_controller+0xfdfef120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a88817 	ldw	r2,-24032(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a88817 	ldw	r2,-24032(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_mem_epcs_flash_controller+0xfdfef248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
     260:	d69e2214 	ori	gp,gp,30856
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	008001b4 	movhi	r2,6
    ori r2, r2, %lo(__bss_start)
     268:	10869514 	ori	r2,r2,6740

    movhi r3, %hi(__bss_end)
     26c:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
     270:	18ccf514 	ori	r3,r3,13268

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_mem_epcs_flash_controller+0xfdfef278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	00546c80 	call	546c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	005485c0 	call	5485c <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_mem_epcs_flash_controller+0xfdfef28c>

00000290 <hashmap_new>:
} hashmap_map;

/*
 * Return an empty hashmap, or NULL on failure.
 */
map_t hashmap_new() {
     290:	defffd04 	addi	sp,sp,-12
     294:	dfc00215 	stw	ra,8(sp)
     298:	df000115 	stw	fp,4(sp)
     29c:	df000104 	addi	fp,sp,4
	hashmap_map* m = (hashmap_map*) malloc(sizeof(hashmap_map));
     2a0:	01000304 	movi	r4,12
     2a4:	00453e80 	call	453e8 <malloc>
     2a8:	e0bfff15 	stw	r2,-4(fp)
	if(!m) goto err;
     2ac:	e0bfff17 	ldw	r2,-4(fp)
     2b0:	10001026 	beq	r2,zero,2f4 <hashmap_new+0x64>

	m->data = (hashmap_element*) calloc(INITIAL_SIZE, sizeof(hashmap_element));
     2b4:	01400304 	movi	r5,12
     2b8:	01004004 	movi	r4,256
     2bc:	00450c80 	call	450c8 <calloc>
     2c0:	1007883a 	mov	r3,r2
     2c4:	e0bfff17 	ldw	r2,-4(fp)
     2c8:	10c00215 	stw	r3,8(r2)
	if(!m->data) goto err;
     2cc:	e0bfff17 	ldw	r2,-4(fp)
     2d0:	10800217 	ldw	r2,8(r2)
     2d4:	10000926 	beq	r2,zero,2fc <hashmap_new+0x6c>

	m->table_size = INITIAL_SIZE;
     2d8:	e0bfff17 	ldw	r2,-4(fp)
     2dc:	00c04004 	movi	r3,256
     2e0:	10c00015 	stw	r3,0(r2)
	m->size = 0;
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	10000115 	stw	zero,4(r2)

	return m;
     2ec:	e0bfff17 	ldw	r2,-4(fp)
     2f0:	00000806 	br	314 <hashmap_new+0x84>
/*
 * Return an empty hashmap, or NULL on failure.
 */
map_t hashmap_new() {
	hashmap_map* m = (hashmap_map*) malloc(sizeof(hashmap_map));
	if(!m) goto err;
     2f4:	0001883a 	nop
     2f8:	00000106 	br	300 <hashmap_new+0x70>

	m->data = (hashmap_element*) calloc(INITIAL_SIZE, sizeof(hashmap_element));
	if(!m->data) goto err;
     2fc:	0001883a 	nop
	m->table_size = INITIAL_SIZE;
	m->size = 0;

	return m;
	err:
		if (m)
     300:	e0bfff17 	ldw	r2,-4(fp)
     304:	10000226 	beq	r2,zero,310 <hashmap_new+0x80>
			hashmap_free(m);
     308:	e13fff17 	ldw	r4,-4(fp)
     30c:	0000b300 	call	b30 <hashmap_free>
		return NULL;
     310:	0005883a 	mov	r2,zero
}
     314:	e037883a 	mov	sp,fp
     318:	dfc00117 	ldw	ra,4(sp)
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00204 	addi	sp,sp,8
     324:	f800283a 	ret

00000328 <crc32>:
   };

/* Return a 32-bit CRC of the contents of the buffer. */

unsigned long crc32(const unsigned char *s, unsigned int len)
{
     328:	defffb04 	addi	sp,sp,-20
     32c:	df000415 	stw	fp,16(sp)
     330:	df000404 	addi	fp,sp,16
     334:	e13ffe15 	stw	r4,-8(fp)
     338:	e17fff15 	stw	r5,-4(fp)
  unsigned int i;
  unsigned long crc32val;

  crc32val = 0;
     33c:	e03ffd15 	stw	zero,-12(fp)
  for (i = 0;  i < len;  i ++)
     340:	e03ffc15 	stw	zero,-16(fp)
     344:	00001506 	br	39c <crc32+0x74>
    {
      crc32val =
	crc32_tab[(crc32val ^ s[i]) & 0xff] ^
     348:	e0fffe17 	ldw	r3,-8(fp)
     34c:	e0bffc17 	ldw	r2,-16(fp)
     350:	1885883a 	add	r2,r3,r2
     354:	10800003 	ldbu	r2,0(r2)
     358:	10c03fcc 	andi	r3,r2,255
     35c:	e0bffd17 	ldw	r2,-12(fp)
     360:	1884f03a 	xor	r2,r3,r2
     364:	10c03fcc 	andi	r3,r2,255
     368:	008001b4 	movhi	r2,6
     36c:	10b5ff04 	addi	r2,r2,-10244
     370:	18c7883a 	add	r3,r3,r3
     374:	18c7883a 	add	r3,r3,r3
     378:	10c5883a 	add	r2,r2,r3
     37c:	10c00017 	ldw	r3,0(r2)
	  (crc32val >> 8);
     380:	e0bffd17 	ldw	r2,-12(fp)
     384:	1004d23a 	srli	r2,r2,8
  unsigned long crc32val;

  crc32val = 0;
  for (i = 0;  i < len;  i ++)
    {
      crc32val =
     388:	1884f03a 	xor	r2,r3,r2
     38c:	e0bffd15 	stw	r2,-12(fp)
{
  unsigned int i;
  unsigned long crc32val;

  crc32val = 0;
  for (i = 0;  i < len;  i ++)
     390:	e0bffc17 	ldw	r2,-16(fp)
     394:	10800044 	addi	r2,r2,1
     398:	e0bffc15 	stw	r2,-16(fp)
     39c:	e0fffc17 	ldw	r3,-16(fp)
     3a0:	e0bfff17 	ldw	r2,-4(fp)
     3a4:	18bfe836 	bltu	r3,r2,348 <__alt_mem_epcs_flash_controller+0xfdfef348>
    {
      crc32val =
	crc32_tab[(crc32val ^ s[i]) & 0xff] ^
	  (crc32val >> 8);
    }
  return crc32val;
     3a8:	e0bffd17 	ldw	r2,-12(fp)
}
     3ac:	e037883a 	mov	sp,fp
     3b0:	df000017 	ldw	fp,0(sp)
     3b4:	dec00104 	addi	sp,sp,4
     3b8:	f800283a 	ret

000003bc <hashmap_hash_int>:

/*
 * Hashing function for a string
 */
unsigned int hashmap_hash_int(hashmap_map * m, char* keystring){
     3bc:	defffb04 	addi	sp,sp,-20
     3c0:	dfc00415 	stw	ra,16(sp)
     3c4:	df000315 	stw	fp,12(sp)
     3c8:	df000304 	addi	fp,sp,12
     3cc:	e13ffe15 	stw	r4,-8(fp)
     3d0:	e17fff15 	stw	r5,-4(fp)

    unsigned long key = crc32((unsigned char*)(keystring), strlen(keystring));
     3d4:	e13fff17 	ldw	r4,-4(fp)
     3d8:	0046ef40 	call	46ef4 <strlen>
     3dc:	100b883a 	mov	r5,r2
     3e0:	e13fff17 	ldw	r4,-4(fp)
     3e4:	00003280 	call	328 <crc32>
     3e8:	e0bffd15 	stw	r2,-12(fp)

	/* Robert Jenkins' 32 bit Mix Function */
	key += (key << 12);
     3ec:	e0bffd17 	ldw	r2,-12(fp)
     3f0:	1004933a 	slli	r2,r2,12
     3f4:	e0fffd17 	ldw	r3,-12(fp)
     3f8:	1885883a 	add	r2,r3,r2
     3fc:	e0bffd15 	stw	r2,-12(fp)
	key ^= (key >> 22);
     400:	e0bffd17 	ldw	r2,-12(fp)
     404:	1004d5ba 	srli	r2,r2,22
     408:	e0fffd17 	ldw	r3,-12(fp)
     40c:	1884f03a 	xor	r2,r3,r2
     410:	e0bffd15 	stw	r2,-12(fp)
	key += (key << 4);
     414:	e0bffd17 	ldw	r2,-12(fp)
     418:	1004913a 	slli	r2,r2,4
     41c:	e0fffd17 	ldw	r3,-12(fp)
     420:	1885883a 	add	r2,r3,r2
     424:	e0bffd15 	stw	r2,-12(fp)
	key ^= (key >> 9);
     428:	e0bffd17 	ldw	r2,-12(fp)
     42c:	1004d27a 	srli	r2,r2,9
     430:	e0fffd17 	ldw	r3,-12(fp)
     434:	1884f03a 	xor	r2,r3,r2
     438:	e0bffd15 	stw	r2,-12(fp)
	key += (key << 10);
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	100492ba 	slli	r2,r2,10
     444:	e0fffd17 	ldw	r3,-12(fp)
     448:	1885883a 	add	r2,r3,r2
     44c:	e0bffd15 	stw	r2,-12(fp)
	key ^= (key >> 2);
     450:	e0bffd17 	ldw	r2,-12(fp)
     454:	1004d0ba 	srli	r2,r2,2
     458:	e0fffd17 	ldw	r3,-12(fp)
     45c:	1884f03a 	xor	r2,r3,r2
     460:	e0bffd15 	stw	r2,-12(fp)
	key += (key << 7);
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	100491fa 	slli	r2,r2,7
     46c:	e0fffd17 	ldw	r3,-12(fp)
     470:	1885883a 	add	r2,r3,r2
     474:	e0bffd15 	stw	r2,-12(fp)
	key ^= (key >> 12);
     478:	e0bffd17 	ldw	r2,-12(fp)
     47c:	1004d33a 	srli	r2,r2,12
     480:	e0fffd17 	ldw	r3,-12(fp)
     484:	1884f03a 	xor	r2,r3,r2
     488:	e0bffd15 	stw	r2,-12(fp)

	/* Knuth's Multiplicative Method */
	key = (key >> 3) * 2654435761;
     48c:	e0bffd17 	ldw	r2,-12(fp)
     490:	1006d0fa 	srli	r3,r2,3
     494:	00a78df4 	movhi	r2,40503
     498:	109e6c44 	addi	r2,r2,31153
     49c:	1885383a 	mul	r2,r3,r2
     4a0:	e0bffd15 	stw	r2,-12(fp)

	return key % m->table_size;
     4a4:	e0bffe17 	ldw	r2,-8(fp)
     4a8:	10800017 	ldw	r2,0(r2)
     4ac:	1007883a 	mov	r3,r2
     4b0:	e0bffd17 	ldw	r2,-12(fp)
     4b4:	180b883a 	mov	r5,r3
     4b8:	1009883a 	mov	r4,r2
     4bc:	0042afc0 	call	42afc <__umodsi3>
}
     4c0:	e037883a 	mov	sp,fp
     4c4:	dfc00117 	ldw	ra,4(sp)
     4c8:	df000017 	ldw	fp,0(sp)
     4cc:	dec00204 	addi	sp,sp,8
     4d0:	f800283a 	ret

000004d4 <hashmap_hash>:

/*
 * Return the integer of the location in data
 * to store the point to the item, or MAP_FULL.
 */
int hashmap_hash(map_t in, char* key){
     4d4:	defff904 	addi	sp,sp,-28
     4d8:	dfc00615 	stw	ra,24(sp)
     4dc:	df000515 	stw	fp,20(sp)
     4e0:	df000504 	addi	fp,sp,20
     4e4:	e13ffe15 	stw	r4,-8(fp)
     4e8:	e17fff15 	stw	r5,-4(fp)
	int curr;
	int i;

	/* Cast the hashmap */
	hashmap_map* m = (hashmap_map *) in;
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	e0bffd15 	stw	r2,-12(fp)

	/* If full, return immediately */
	if(m->size >= (m->table_size/2)) return MAP_FULL;
     4f4:	e0bffd17 	ldw	r2,-12(fp)
     4f8:	10c00117 	ldw	r3,4(r2)
     4fc:	e0bffd17 	ldw	r2,-12(fp)
     500:	10800017 	ldw	r2,0(r2)
     504:	1008d7fa 	srli	r4,r2,31
     508:	2085883a 	add	r2,r4,r2
     50c:	1005d07a 	srai	r2,r2,1
     510:	18800216 	blt	r3,r2,51c <hashmap_hash+0x48>
     514:	00bfff84 	movi	r2,-2
     518:	00003206 	br	5e4 <hashmap_hash+0x110>

	/* Find the best index */
	curr = hashmap_hash_int(m, key);
     51c:	e17fff17 	ldw	r5,-4(fp)
     520:	e13ffd17 	ldw	r4,-12(fp)
     524:	00003bc0 	call	3bc <hashmap_hash_int>
     528:	e0bffb15 	stw	r2,-20(fp)

	/* Linear probing */
	for(i = 0; i< MAX_CHAIN_LENGTH; i++){
     52c:	e03ffc15 	stw	zero,-16(fp)
     530:	00002806 	br	5d4 <hashmap_hash+0x100>
		if(m->data[curr].in_use == 0)
     534:	e0bffd17 	ldw	r2,-12(fp)
     538:	10c00217 	ldw	r3,8(r2)
     53c:	e0bffb17 	ldw	r2,-20(fp)
     540:	10800324 	muli	r2,r2,12
     544:	1885883a 	add	r2,r3,r2
     548:	10800117 	ldw	r2,4(r2)
     54c:	1000021e 	bne	r2,zero,558 <hashmap_hash+0x84>
			return curr;
     550:	e0bffb17 	ldw	r2,-20(fp)
     554:	00002306 	br	5e4 <hashmap_hash+0x110>

		if(m->data[curr].in_use == 1 && (strcmp(m->data[curr].key,key)==0))
     558:	e0bffd17 	ldw	r2,-12(fp)
     55c:	10c00217 	ldw	r3,8(r2)
     560:	e0bffb17 	ldw	r2,-20(fp)
     564:	10800324 	muli	r2,r2,12
     568:	1885883a 	add	r2,r3,r2
     56c:	10800117 	ldw	r2,4(r2)
     570:	10800058 	cmpnei	r2,r2,1
     574:	10000c1e 	bne	r2,zero,5a8 <hashmap_hash+0xd4>
     578:	e0bffd17 	ldw	r2,-12(fp)
     57c:	10c00217 	ldw	r3,8(r2)
     580:	e0bffb17 	ldw	r2,-20(fp)
     584:	10800324 	muli	r2,r2,12
     588:	1885883a 	add	r2,r3,r2
     58c:	10800017 	ldw	r2,0(r2)
     590:	e17fff17 	ldw	r5,-4(fp)
     594:	1009883a 	mov	r4,r2
     598:	0046d3c0 	call	46d3c <strcmp>
     59c:	1000021e 	bne	r2,zero,5a8 <hashmap_hash+0xd4>
			return curr;
     5a0:	e0bffb17 	ldw	r2,-20(fp)
     5a4:	00000f06 	br	5e4 <hashmap_hash+0x110>

		curr = (curr + 1) % m->table_size;
     5a8:	e0bffb17 	ldw	r2,-20(fp)
     5ac:	10c00044 	addi	r3,r2,1
     5b0:	e0bffd17 	ldw	r2,-12(fp)
     5b4:	10800017 	ldw	r2,0(r2)
     5b8:	100b883a 	mov	r5,r2
     5bc:	1809883a 	mov	r4,r3
     5c0:	0042a240 	call	42a24 <__modsi3>
     5c4:	e0bffb15 	stw	r2,-20(fp)

	/* Find the best index */
	curr = hashmap_hash_int(m, key);

	/* Linear probing */
	for(i = 0; i< MAX_CHAIN_LENGTH; i++){
     5c8:	e0bffc17 	ldw	r2,-16(fp)
     5cc:	10800044 	addi	r2,r2,1
     5d0:	e0bffc15 	stw	r2,-16(fp)
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10800210 	cmplti	r2,r2,8
     5dc:	103fd51e 	bne	r2,zero,534 <__alt_mem_epcs_flash_controller+0xfdfef534>
			return curr;

		curr = (curr + 1) % m->table_size;
	}

	return MAP_FULL;
     5e0:	00bfff84 	movi	r2,-2
}
     5e4:	e037883a 	mov	sp,fp
     5e8:	dfc00117 	ldw	ra,4(sp)
     5ec:	df000017 	ldw	fp,0(sp)
     5f0:	dec00204 	addi	sp,sp,8
     5f4:	f800283a 	ret

000005f8 <hashmap_rehash>:

/*
 * Doubles the size of the hashmap, and rehashes all the elements
 */
int hashmap_rehash(map_t in){
     5f8:	defff704 	addi	sp,sp,-36
     5fc:	dfc00815 	stw	ra,32(sp)
     600:	df000715 	stw	fp,28(sp)
     604:	df000704 	addi	fp,sp,28
     608:	e13fff15 	stw	r4,-4(fp)
	int i;
	int old_size;
	hashmap_element* curr;

	/* Setup the new elements */
	hashmap_map *m = (hashmap_map *) in;
     60c:	e0bfff17 	ldw	r2,-4(fp)
     610:	e0bffa15 	stw	r2,-24(fp)
	hashmap_element* temp = (hashmap_element *)
		calloc(2 * m->table_size, sizeof(hashmap_element));
     614:	e0bffa17 	ldw	r2,-24(fp)
     618:	10800017 	ldw	r2,0(r2)
     61c:	1085883a 	add	r2,r2,r2
	int old_size;
	hashmap_element* curr;

	/* Setup the new elements */
	hashmap_map *m = (hashmap_map *) in;
	hashmap_element* temp = (hashmap_element *)
     620:	01400304 	movi	r5,12
     624:	1009883a 	mov	r4,r2
     628:	00450c80 	call	450c8 <calloc>
     62c:	e0bffb15 	stw	r2,-20(fp)
		calloc(2 * m->table_size, sizeof(hashmap_element));
	if(!temp) return MAP_OMEM;
     630:	e0bffb17 	ldw	r2,-20(fp)
     634:	1000021e 	bne	r2,zero,640 <hashmap_rehash+0x48>
     638:	00bfffc4 	movi	r2,-1
     63c:	00003606 	br	718 <hashmap_rehash+0x120>

	/* Update the array */
	curr = m->data;
     640:	e0bffa17 	ldw	r2,-24(fp)
     644:	10800217 	ldw	r2,8(r2)
     648:	e0bffc15 	stw	r2,-16(fp)
	m->data = temp;
     64c:	e0bffa17 	ldw	r2,-24(fp)
     650:	e0fffb17 	ldw	r3,-20(fp)
     654:	10c00215 	stw	r3,8(r2)

	/* Update the size */
	old_size = m->table_size;
     658:	e0bffa17 	ldw	r2,-24(fp)
     65c:	10800017 	ldw	r2,0(r2)
     660:	e0bffd15 	stw	r2,-12(fp)
	m->table_size = 2 * m->table_size;
     664:	e0bffa17 	ldw	r2,-24(fp)
     668:	10800017 	ldw	r2,0(r2)
     66c:	1085883a 	add	r2,r2,r2
     670:	1007883a 	mov	r3,r2
     674:	e0bffa17 	ldw	r2,-24(fp)
     678:	10c00015 	stw	r3,0(r2)
	m->size = 0;
     67c:	e0bffa17 	ldw	r2,-24(fp)
     680:	10000115 	stw	zero,4(r2)

	/* Rehash the elements */
	for(i = 0; i < old_size; i++){
     684:	e03ff915 	stw	zero,-28(fp)
     688:	00001d06 	br	700 <hashmap_rehash+0x108>
        int status;

        if (curr[i].in_use == 0)
     68c:	e0bff917 	ldw	r2,-28(fp)
     690:	10800324 	muli	r2,r2,12
     694:	e0fffc17 	ldw	r3,-16(fp)
     698:	1885883a 	add	r2,r3,r2
     69c:	10800117 	ldw	r2,4(r2)
     6a0:	10001326 	beq	r2,zero,6f0 <hashmap_rehash+0xf8>
            continue;

		status = hashmap_put(m, curr[i].key, curr[i].data);
     6a4:	e0bff917 	ldw	r2,-28(fp)
     6a8:	10800324 	muli	r2,r2,12
     6ac:	e0fffc17 	ldw	r3,-16(fp)
     6b0:	1885883a 	add	r2,r3,r2
     6b4:	11000017 	ldw	r4,0(r2)
     6b8:	e0bff917 	ldw	r2,-28(fp)
     6bc:	10800324 	muli	r2,r2,12
     6c0:	e0fffc17 	ldw	r3,-16(fp)
     6c4:	1885883a 	add	r2,r3,r2
     6c8:	10800217 	ldw	r2,8(r2)
     6cc:	100d883a 	mov	r6,r2
     6d0:	200b883a 	mov	r5,r4
     6d4:	e13ffa17 	ldw	r4,-24(fp)
     6d8:	000072c0 	call	72c <hashmap_put>
     6dc:	e0bffe15 	stw	r2,-8(fp)
		if (status != MAP_OK)
     6e0:	e0bffe17 	ldw	r2,-8(fp)
     6e4:	10000326 	beq	r2,zero,6f4 <hashmap_rehash+0xfc>
			return status;
     6e8:	e0bffe17 	ldw	r2,-8(fp)
     6ec:	00000a06 	br	718 <hashmap_rehash+0x120>
	/* Rehash the elements */
	for(i = 0; i < old_size; i++){
        int status;

        if (curr[i].in_use == 0)
            continue;
     6f0:	0001883a 	nop
	old_size = m->table_size;
	m->table_size = 2 * m->table_size;
	m->size = 0;

	/* Rehash the elements */
	for(i = 0; i < old_size; i++){
     6f4:	e0bff917 	ldw	r2,-28(fp)
     6f8:	10800044 	addi	r2,r2,1
     6fc:	e0bff915 	stw	r2,-28(fp)
     700:	e0fff917 	ldw	r3,-28(fp)
     704:	e0bffd17 	ldw	r2,-12(fp)
     708:	18bfe016 	blt	r3,r2,68c <__alt_mem_epcs_flash_controller+0xfdfef68c>
		status = hashmap_put(m, curr[i].key, curr[i].data);
		if (status != MAP_OK)
			return status;
	}

	free(curr);
     70c:	e13ffc17 	ldw	r4,-16(fp)
     710:	00453fc0 	call	453fc <free>

	return MAP_OK;
     714:	0005883a 	mov	r2,zero
}
     718:	e037883a 	mov	sp,fp
     71c:	dfc00117 	ldw	ra,4(sp)
     720:	df000017 	ldw	fp,0(sp)
     724:	dec00204 	addi	sp,sp,8
     728:	f800283a 	ret

0000072c <hashmap_put>:

/*
 * Add a pointer to the hashmap with some key
 */
int hashmap_put(map_t in, char* key, any_t value){
     72c:	defff904 	addi	sp,sp,-28
     730:	dfc00615 	stw	ra,24(sp)
     734:	df000515 	stw	fp,20(sp)
     738:	df000504 	addi	fp,sp,20
     73c:	e13ffd15 	stw	r4,-12(fp)
     740:	e17ffe15 	stw	r5,-8(fp)
     744:	e1bfff15 	stw	r6,-4(fp)
	int index;
	hashmap_map* m;

	/* Cast the hashmap */
	m = (hashmap_map *) in;
     748:	e0bffd17 	ldw	r2,-12(fp)
     74c:	e0bffc15 	stw	r2,-16(fp)

	/* Find a place to put our value */
	index = hashmap_hash(in, key);
     750:	e17ffe17 	ldw	r5,-8(fp)
     754:	e13ffd17 	ldw	r4,-12(fp)
     758:	00004d40 	call	4d4 <hashmap_hash>
     75c:	e0bffb15 	stw	r2,-20(fp)
	while(index == MAP_FULL){
     760:	00000a06 	br	78c <hashmap_put+0x60>
		if (hashmap_rehash(in) == MAP_OMEM) {
     764:	e13ffd17 	ldw	r4,-12(fp)
     768:	00005f80 	call	5f8 <hashmap_rehash>
     76c:	10bfffd8 	cmpnei	r2,r2,-1
     770:	1000021e 	bne	r2,zero,77c <hashmap_put+0x50>
			return MAP_OMEM;
     774:	00bfffc4 	movi	r2,-1
     778:	00002206 	br	804 <hashmap_put+0xd8>
		}
		index = hashmap_hash(in, key);
     77c:	e17ffe17 	ldw	r5,-8(fp)
     780:	e13ffd17 	ldw	r4,-12(fp)
     784:	00004d40 	call	4d4 <hashmap_hash>
     788:	e0bffb15 	stw	r2,-20(fp)
	/* Cast the hashmap */
	m = (hashmap_map *) in;

	/* Find a place to put our value */
	index = hashmap_hash(in, key);
	while(index == MAP_FULL){
     78c:	e0bffb17 	ldw	r2,-20(fp)
     790:	10bfffa0 	cmpeqi	r2,r2,-2
     794:	103ff31e 	bne	r2,zero,764 <__alt_mem_epcs_flash_controller+0xfdfef764>
		}
		index = hashmap_hash(in, key);
	}

	/* Set the data */
	m->data[index].data = value;
     798:	e0bffc17 	ldw	r2,-16(fp)
     79c:	10c00217 	ldw	r3,8(r2)
     7a0:	e0bffb17 	ldw	r2,-20(fp)
     7a4:	10800324 	muli	r2,r2,12
     7a8:	1885883a 	add	r2,r3,r2
     7ac:	e0ffff17 	ldw	r3,-4(fp)
     7b0:	10c00215 	stw	r3,8(r2)
	m->data[index].key = key;
     7b4:	e0bffc17 	ldw	r2,-16(fp)
     7b8:	10c00217 	ldw	r3,8(r2)
     7bc:	e0bffb17 	ldw	r2,-20(fp)
     7c0:	10800324 	muli	r2,r2,12
     7c4:	1885883a 	add	r2,r3,r2
     7c8:	e0fffe17 	ldw	r3,-8(fp)
     7cc:	10c00015 	stw	r3,0(r2)
	m->data[index].in_use = 1;
     7d0:	e0bffc17 	ldw	r2,-16(fp)
     7d4:	10c00217 	ldw	r3,8(r2)
     7d8:	e0bffb17 	ldw	r2,-20(fp)
     7dc:	10800324 	muli	r2,r2,12
     7e0:	1885883a 	add	r2,r3,r2
     7e4:	00c00044 	movi	r3,1
     7e8:	10c00115 	stw	r3,4(r2)
	m->size++;
     7ec:	e0bffc17 	ldw	r2,-16(fp)
     7f0:	10800117 	ldw	r2,4(r2)
     7f4:	10c00044 	addi	r3,r2,1
     7f8:	e0bffc17 	ldw	r2,-16(fp)
     7fc:	10c00115 	stw	r3,4(r2)

	return MAP_OK;
     800:	0005883a 	mov	r2,zero
}
     804:	e037883a 	mov	sp,fp
     808:	dfc00117 	ldw	ra,4(sp)
     80c:	df000017 	ldw	fp,0(sp)
     810:	dec00204 	addi	sp,sp,8
     814:	f800283a 	ret

00000818 <hashmap_get>:

/*
 * Get your pointer out of the hashmap with a key
 */
int hashmap_get(map_t in, char* key, any_t *arg){
     818:	defff704 	addi	sp,sp,-36
     81c:	dfc00815 	stw	ra,32(sp)
     820:	df000715 	stw	fp,28(sp)
     824:	df000704 	addi	fp,sp,28
     828:	e13ffd15 	stw	r4,-12(fp)
     82c:	e17ffe15 	stw	r5,-8(fp)
     830:	e1bfff15 	stw	r6,-4(fp)
	int curr;
	int i;
	hashmap_map* m;

	/* Cast the hashmap */
	m = (hashmap_map *) in;
     834:	e0bffd17 	ldw	r2,-12(fp)
     838:	e0bffb15 	stw	r2,-20(fp)

	/* Find data location */
	curr = hashmap_hash_int(m, key);
     83c:	e17ffe17 	ldw	r5,-8(fp)
     840:	e13ffb17 	ldw	r4,-20(fp)
     844:	00003bc0 	call	3bc <hashmap_hash_int>
     848:	e0bff915 	stw	r2,-28(fp)

	/* Linear probing, if necessary */
	for(i = 0; i<MAX_CHAIN_LENGTH; i++){
     84c:	e03ffa15 	stw	zero,-24(fp)
     850:	00002906 	br	8f8 <hashmap_get+0xe0>

        int in_use = m->data[curr].in_use;
     854:	e0bffb17 	ldw	r2,-20(fp)
     858:	10c00217 	ldw	r3,8(r2)
     85c:	e0bff917 	ldw	r2,-28(fp)
     860:	10800324 	muli	r2,r2,12
     864:	1885883a 	add	r2,r3,r2
     868:	10800117 	ldw	r2,4(r2)
     86c:	e0bffc15 	stw	r2,-16(fp)
        if (in_use == 1){
     870:	e0bffc17 	ldw	r2,-16(fp)
     874:	10800058 	cmpnei	r2,r2,1
     878:	1000141e 	bne	r2,zero,8cc <hashmap_get+0xb4>
            if (strcmp(m->data[curr].key,key)==0){
     87c:	e0bffb17 	ldw	r2,-20(fp)
     880:	10c00217 	ldw	r3,8(r2)
     884:	e0bff917 	ldw	r2,-28(fp)
     888:	10800324 	muli	r2,r2,12
     88c:	1885883a 	add	r2,r3,r2
     890:	10800017 	ldw	r2,0(r2)
     894:	e17ffe17 	ldw	r5,-8(fp)
     898:	1009883a 	mov	r4,r2
     89c:	0046d3c0 	call	46d3c <strcmp>
     8a0:	10000a1e 	bne	r2,zero,8cc <hashmap_get+0xb4>
                *arg = (m->data[curr].data);
     8a4:	e0bffb17 	ldw	r2,-20(fp)
     8a8:	10c00217 	ldw	r3,8(r2)
     8ac:	e0bff917 	ldw	r2,-28(fp)
     8b0:	10800324 	muli	r2,r2,12
     8b4:	1885883a 	add	r2,r3,r2
     8b8:	10c00217 	ldw	r3,8(r2)
     8bc:	e0bfff17 	ldw	r2,-4(fp)
     8c0:	10c00015 	stw	r3,0(r2)
                return MAP_OK;
     8c4:	0005883a 	mov	r2,zero
     8c8:	00001106 	br	910 <hashmap_get+0xf8>
            }
		}

		curr = (curr + 1) % m->table_size;
     8cc:	e0bff917 	ldw	r2,-28(fp)
     8d0:	10c00044 	addi	r3,r2,1
     8d4:	e0bffb17 	ldw	r2,-20(fp)
     8d8:	10800017 	ldw	r2,0(r2)
     8dc:	100b883a 	mov	r5,r2
     8e0:	1809883a 	mov	r4,r3
     8e4:	0042a240 	call	42a24 <__modsi3>
     8e8:	e0bff915 	stw	r2,-28(fp)

	/* Find data location */
	curr = hashmap_hash_int(m, key);

	/* Linear probing, if necessary */
	for(i = 0; i<MAX_CHAIN_LENGTH; i++){
     8ec:	e0bffa17 	ldw	r2,-24(fp)
     8f0:	10800044 	addi	r2,r2,1
     8f4:	e0bffa15 	stw	r2,-24(fp)
     8f8:	e0bffa17 	ldw	r2,-24(fp)
     8fc:	10800210 	cmplti	r2,r2,8
     900:	103fd41e 	bne	r2,zero,854 <__alt_mem_epcs_flash_controller+0xfdfef854>
		}

		curr = (curr + 1) % m->table_size;
	}

	*arg = NULL;
     904:	e0bfff17 	ldw	r2,-4(fp)
     908:	10000015 	stw	zero,0(r2)

	/* Not found */
	return MAP_MISSING;
     90c:	00bfff44 	movi	r2,-3
}
     910:	e037883a 	mov	sp,fp
     914:	dfc00117 	ldw	ra,4(sp)
     918:	df000017 	ldw	fp,0(sp)
     91c:	dec00204 	addi	sp,sp,8
     920:	f800283a 	ret

00000924 <hashmap_iterate>:
/*
 * Iterate the function parameter over each element in the hashmap.  The
 * additional any_t argument is passed to the function as its first
 * argument and the hashmap element is the second.
 */
int hashmap_iterate(map_t in, PFany f, any_t item) {
     924:	defff704 	addi	sp,sp,-36
     928:	dfc00815 	stw	ra,32(sp)
     92c:	df000715 	stw	fp,28(sp)
     930:	df000704 	addi	fp,sp,28
     934:	e13ffd15 	stw	r4,-12(fp)
     938:	e17ffe15 	stw	r5,-8(fp)
     93c:	e1bfff15 	stw	r6,-4(fp)
	int i;

	/* Cast the hashmap */
	hashmap_map* m = (hashmap_map*) in;
     940:	e0bffd17 	ldw	r2,-12(fp)
     944:	e0bffa15 	stw	r2,-24(fp)

	/* On empty hashmap, return immediately */
	if (hashmap_length(m) <= 0)
     948:	e13ffa17 	ldw	r4,-24(fp)
     94c:	0000b7c0 	call	b7c <hashmap_length>
     950:	00800216 	blt	zero,r2,95c <hashmap_iterate+0x38>
		return MAP_MISSING;
     954:	00bfff44 	movi	r2,-3
     958:	00002106 	br	9e0 <hashmap_iterate+0xbc>

	/* Linear probing */
	for(i = 0; i< m->table_size; i++)
     95c:	e03ff915 	stw	zero,-28(fp)
     960:	00001a06 	br	9cc <hashmap_iterate+0xa8>
		if(m->data[i].in_use != 0) {
     964:	e0bffa17 	ldw	r2,-24(fp)
     968:	10c00217 	ldw	r3,8(r2)
     96c:	e0bff917 	ldw	r2,-28(fp)
     970:	10800324 	muli	r2,r2,12
     974:	1885883a 	add	r2,r3,r2
     978:	10800117 	ldw	r2,4(r2)
     97c:	10001026 	beq	r2,zero,9c0 <hashmap_iterate+0x9c>
			any_t data = (any_t) (m->data[i].data);
     980:	e0bffa17 	ldw	r2,-24(fp)
     984:	10c00217 	ldw	r3,8(r2)
     988:	e0bff917 	ldw	r2,-28(fp)
     98c:	10800324 	muli	r2,r2,12
     990:	1885883a 	add	r2,r3,r2
     994:	10800217 	ldw	r2,8(r2)
     998:	e0bffb15 	stw	r2,-20(fp)
			int status = f(item, data);
     99c:	e0bffe17 	ldw	r2,-8(fp)
     9a0:	e17ffb17 	ldw	r5,-20(fp)
     9a4:	e13fff17 	ldw	r4,-4(fp)
     9a8:	103ee83a 	callr	r2
     9ac:	e0bffc15 	stw	r2,-16(fp)
			if (status != MAP_OK) {
     9b0:	e0bffc17 	ldw	r2,-16(fp)
     9b4:	10000226 	beq	r2,zero,9c0 <hashmap_iterate+0x9c>
				return status;
     9b8:	e0bffc17 	ldw	r2,-16(fp)
     9bc:	00000806 	br	9e0 <hashmap_iterate+0xbc>
	/* On empty hashmap, return immediately */
	if (hashmap_length(m) <= 0)
		return MAP_MISSING;

	/* Linear probing */
	for(i = 0; i< m->table_size; i++)
     9c0:	e0bff917 	ldw	r2,-28(fp)
     9c4:	10800044 	addi	r2,r2,1
     9c8:	e0bff915 	stw	r2,-28(fp)
     9cc:	e0bffa17 	ldw	r2,-24(fp)
     9d0:	10800017 	ldw	r2,0(r2)
     9d4:	e0fff917 	ldw	r3,-28(fp)
     9d8:	18bfe216 	blt	r3,r2,964 <__alt_mem_epcs_flash_controller+0xfdfef964>
			if (status != MAP_OK) {
				return status;
			}
		}

    return MAP_OK;
     9dc:	0005883a 	mov	r2,zero
}
     9e0:	e037883a 	mov	sp,fp
     9e4:	dfc00117 	ldw	ra,4(sp)
     9e8:	df000017 	ldw	fp,0(sp)
     9ec:	dec00204 	addi	sp,sp,8
     9f0:	f800283a 	ret

000009f4 <hashmap_remove>:

/*
 * Remove an element with that key from the map
 */
int hashmap_remove(map_t in, char* key){
     9f4:	defff804 	addi	sp,sp,-32
     9f8:	dfc00715 	stw	ra,28(sp)
     9fc:	df000615 	stw	fp,24(sp)
     a00:	df000604 	addi	fp,sp,24
     a04:	e13ffe15 	stw	r4,-8(fp)
     a08:	e17fff15 	stw	r5,-4(fp)
	int i;
	int curr;
	hashmap_map* m;

	/* Cast the hashmap */
	m = (hashmap_map *) in;
     a0c:	e0bffe17 	ldw	r2,-8(fp)
     a10:	e0bffc15 	stw	r2,-16(fp)

	/* Find key */
	curr = hashmap_hash_int(m, key);
     a14:	e17fff17 	ldw	r5,-4(fp)
     a18:	e13ffc17 	ldw	r4,-16(fp)
     a1c:	00003bc0 	call	3bc <hashmap_hash_int>
     a20:	e0bffb15 	stw	r2,-20(fp)

	/* Linear probing, if necessary */
	for(i = 0; i<MAX_CHAIN_LENGTH; i++){
     a24:	e03ffa15 	stw	zero,-24(fp)
     a28:	00003806 	br	b0c <hashmap_remove+0x118>

        int in_use = m->data[curr].in_use;
     a2c:	e0bffc17 	ldw	r2,-16(fp)
     a30:	10c00217 	ldw	r3,8(r2)
     a34:	e0bffb17 	ldw	r2,-20(fp)
     a38:	10800324 	muli	r2,r2,12
     a3c:	1885883a 	add	r2,r3,r2
     a40:	10800117 	ldw	r2,4(r2)
     a44:	e0bffd15 	stw	r2,-12(fp)
        if (in_use == 1){
     a48:	e0bffd17 	ldw	r2,-12(fp)
     a4c:	10800058 	cmpnei	r2,r2,1
     a50:	1000231e 	bne	r2,zero,ae0 <hashmap_remove+0xec>
            if (strcmp(m->data[curr].key,key)==0){
     a54:	e0bffc17 	ldw	r2,-16(fp)
     a58:	10c00217 	ldw	r3,8(r2)
     a5c:	e0bffb17 	ldw	r2,-20(fp)
     a60:	10800324 	muli	r2,r2,12
     a64:	1885883a 	add	r2,r3,r2
     a68:	10800017 	ldw	r2,0(r2)
     a6c:	e17fff17 	ldw	r5,-4(fp)
     a70:	1009883a 	mov	r4,r2
     a74:	0046d3c0 	call	46d3c <strcmp>
     a78:	1000191e 	bne	r2,zero,ae0 <hashmap_remove+0xec>
                /* Blank out the fields */
                m->data[curr].in_use = 0;
     a7c:	e0bffc17 	ldw	r2,-16(fp)
     a80:	10c00217 	ldw	r3,8(r2)
     a84:	e0bffb17 	ldw	r2,-20(fp)
     a88:	10800324 	muli	r2,r2,12
     a8c:	1885883a 	add	r2,r3,r2
     a90:	10000115 	stw	zero,4(r2)
                m->data[curr].data = NULL;
     a94:	e0bffc17 	ldw	r2,-16(fp)
     a98:	10c00217 	ldw	r3,8(r2)
     a9c:	e0bffb17 	ldw	r2,-20(fp)
     aa0:	10800324 	muli	r2,r2,12
     aa4:	1885883a 	add	r2,r3,r2
     aa8:	10000215 	stw	zero,8(r2)
                m->data[curr].key = NULL;
     aac:	e0bffc17 	ldw	r2,-16(fp)
     ab0:	10c00217 	ldw	r3,8(r2)
     ab4:	e0bffb17 	ldw	r2,-20(fp)
     ab8:	10800324 	muli	r2,r2,12
     abc:	1885883a 	add	r2,r3,r2
     ac0:	10000015 	stw	zero,0(r2)

                /* Reduce the size */
                m->size--;
     ac4:	e0bffc17 	ldw	r2,-16(fp)
     ac8:	10800117 	ldw	r2,4(r2)
     acc:	10ffffc4 	addi	r3,r2,-1
     ad0:	e0bffc17 	ldw	r2,-16(fp)
     ad4:	10c00115 	stw	r3,4(r2)
                return MAP_OK;
     ad8:	0005883a 	mov	r2,zero
     adc:	00000f06 	br	b1c <hashmap_remove+0x128>
            }
		}
		curr = (curr + 1) % m->table_size;
     ae0:	e0bffb17 	ldw	r2,-20(fp)
     ae4:	10c00044 	addi	r3,r2,1
     ae8:	e0bffc17 	ldw	r2,-16(fp)
     aec:	10800017 	ldw	r2,0(r2)
     af0:	100b883a 	mov	r5,r2
     af4:	1809883a 	mov	r4,r3
     af8:	0042a240 	call	42a24 <__modsi3>
     afc:	e0bffb15 	stw	r2,-20(fp)

	/* Find key */
	curr = hashmap_hash_int(m, key);

	/* Linear probing, if necessary */
	for(i = 0; i<MAX_CHAIN_LENGTH; i++){
     b00:	e0bffa17 	ldw	r2,-24(fp)
     b04:	10800044 	addi	r2,r2,1
     b08:	e0bffa15 	stw	r2,-24(fp)
     b0c:	e0bffa17 	ldw	r2,-24(fp)
     b10:	10800210 	cmplti	r2,r2,8
     b14:	103fc51e 	bne	r2,zero,a2c <__alt_mem_epcs_flash_controller+0xfdfefa2c>
		}
		curr = (curr + 1) % m->table_size;
	}

	/* Data not found */
	return MAP_MISSING;
     b18:	00bfff44 	movi	r2,-3
}
     b1c:	e037883a 	mov	sp,fp
     b20:	dfc00117 	ldw	ra,4(sp)
     b24:	df000017 	ldw	fp,0(sp)
     b28:	dec00204 	addi	sp,sp,8
     b2c:	f800283a 	ret

00000b30 <hashmap_free>:

/* Deallocate the hashmap */
void hashmap_free(map_t in){
     b30:	defffc04 	addi	sp,sp,-16
     b34:	dfc00315 	stw	ra,12(sp)
     b38:	df000215 	stw	fp,8(sp)
     b3c:	df000204 	addi	fp,sp,8
     b40:	e13fff15 	stw	r4,-4(fp)
	hashmap_map* m = (hashmap_map*) in;
     b44:	e0bfff17 	ldw	r2,-4(fp)
     b48:	e0bffe15 	stw	r2,-8(fp)
	free(m->data);
     b4c:	e0bffe17 	ldw	r2,-8(fp)
     b50:	10800217 	ldw	r2,8(r2)
     b54:	1009883a 	mov	r4,r2
     b58:	00453fc0 	call	453fc <free>
	free(m);
     b5c:	e13ffe17 	ldw	r4,-8(fp)
     b60:	00453fc0 	call	453fc <free>
}
     b64:	0001883a 	nop
     b68:	e037883a 	mov	sp,fp
     b6c:	dfc00117 	ldw	ra,4(sp)
     b70:	df000017 	ldw	fp,0(sp)
     b74:	dec00204 	addi	sp,sp,8
     b78:	f800283a 	ret

00000b7c <hashmap_length>:

/* Return the length of the hashmap */
int hashmap_length(map_t in){
     b7c:	defffd04 	addi	sp,sp,-12
     b80:	df000215 	stw	fp,8(sp)
     b84:	df000204 	addi	fp,sp,8
     b88:	e13fff15 	stw	r4,-4(fp)
	hashmap_map* m = (hashmap_map *) in;
     b8c:	e0bfff17 	ldw	r2,-4(fp)
     b90:	e0bffe15 	stw	r2,-8(fp)
	if(m != NULL) return m->size;
     b94:	e0bffe17 	ldw	r2,-8(fp)
     b98:	10000326 	beq	r2,zero,ba8 <hashmap_length+0x2c>
     b9c:	e0bffe17 	ldw	r2,-8(fp)
     ba0:	10800117 	ldw	r2,4(r2)
     ba4:	00000106 	br	bac <hashmap_length+0x30>
	else return 0;
     ba8:	0005883a 	mov	r2,zero
}
     bac:	e037883a 	mov	sp,fp
     bb0:	df000017 	ldw	fp,0(sp)
     bb4:	dec00104 	addi	sp,sp,4
     bb8:	f800283a 	ret

00000bbc <initialize>:
#define BUF_SIZE 1024 * 1024

const btc_chainparams* chain = &btc_chainparams_test;

void initialize()
{
     bbc:	defffd04 	addi	sp,sp,-12
     bc0:	dfc00215 	stw	ra,8(sp)
     bc4:	df000115 	stw	fp,4(sp)
     bc8:	df000104 	addi	fp,sp,4
	/* initialize hardware random number generator */
	alt_u32 randSeed = 0x12345678;
     bcc:	00848d34 	movhi	r2,4660
     bd0:	10959e04 	addi	r2,r2,22136
     bd4:	e0bfff15 	stw	r2,-4(fp)
    initRandom(randSeed);
     bd8:	e13fff17 	ldw	r4,-4(fp)
     bdc:	00020880 	call	2088 <initRandom>


    /* initialize uart to usb */
    initUart();
     be0:	000242c0 	call	242c <initUart>
}
     be4:	0001883a 	nop
     be8:	e037883a 	mov	sp,fp
     bec:	dfc00117 	ldw	ra,4(sp)
     bf0:	df000017 	ldw	fp,0(sp)
     bf4:	dec00204 	addi	sp,sp,8
     bf8:	f800283a 	ret

00000bfc <showError>:


static bool showError(const char* er)
{
     bfc:	defffd04 	addi	sp,sp,-12
     c00:	dfc00215 	stw	ra,8(sp)
     c04:	df000115 	stw	fp,4(sp)
     c08:	df000104 	addi	fp,sp,4
     c0c:	e13fff15 	stw	r4,-4(fp)
    printf("Error: %s\n", er);
     c10:	e17fff17 	ldw	r5,-4(fp)
     c14:	010001b4 	movhi	r4,6
     c18:	2120dd04 	addi	r4,r4,-31884
     c1c:	00460940 	call	46094 <printf>
    btc_ecc_stop();
     c20:	0005c6c0 	call	5c6c <btc_ecc_stop>
    return 1;
     c24:	00800044 	movi	r2,1
}
     c28:	e037883a 	mov	sp,fp
     c2c:	dfc00117 	ldw	ra,4(sp)
     c30:	df000017 	ldw	fp,0(sp)
     c34:	dec00204 	addi	sp,sp,8
     c38:	f800283a 	ret

00000c3c <create_priv_key>:


void create_priv_key()
{
     c3c:	defff404 	addi	sp,sp,-48
     c40:	dfc00b15 	stw	ra,44(sp)
     c44:	df000a15 	stw	fp,40(sp)
     c48:	dd000915 	stw	r20,36(sp)
     c4c:	dcc00815 	stw	r19,32(sp)
     c50:	dc800715 	stw	r18,28(sp)
     c54:	dc400615 	stw	r17,24(sp)
     c58:	dc000515 	stw	r16,20(sp)
     c5c:	df000a04 	addi	fp,sp,40
     c60:	d825883a 	mov	r18,sp
     c64:	9029883a 	mov	r20,r18
	size_t sizeout = 128;
     c68:	04802004 	movi	r18,128
     c6c:	e4bff615 	stw	r18,-40(fp)
	char newprivkey_wif[sizeout];
     c70:	e4bff617 	ldw	r18,-40(fp)
     c74:	9027883a 	mov	r19,r18
     c78:	9cffffc4 	addi	r19,r19,-1
     c7c:	e4fff715 	stw	r19,-36(fp)
     c80:	9021883a 	mov	r16,r18
     c84:	0023883a 	mov	r17,zero
     c88:	8026d77a 	srli	r19,r16,29
     c8c:	881290fa 	slli	r9,r17,3
     c90:	9a52b03a 	or	r9,r19,r9
     c94:	801090fa 	slli	r8,r16,3
     c98:	901d883a 	mov	r14,r18
     c9c:	001f883a 	mov	r15,zero
     ca0:	7010d77a 	srli	r8,r14,29
     ca4:	780e90fa 	slli	r7,r15,3
     ca8:	41ceb03a 	or	r7,r8,r7
     cac:	700c90fa 	slli	r6,r14,3
     cb0:	918000c4 	addi	r6,r18,3
     cb4:	300cd0ba 	srli	r6,r6,2
     cb8:	318d883a 	add	r6,r6,r6
     cbc:	318d883a 	add	r6,r6,r6
     cc0:	d9b7c83a 	sub	sp,sp,r6
     cc4:	d80d883a 	mov	r6,sp
     cc8:	300d883a 	mov	r6,r6
     ccc:	e1bff815 	stw	r6,-32(fp)
	char newprivkey_hex[sizeout];
     cd0:	e1bff617 	ldw	r6,-40(fp)
     cd4:	300f883a 	mov	r7,r6
     cd8:	39ffffc4 	addi	r7,r7,-1
     cdc:	e1fff915 	stw	r7,-28(fp)
     ce0:	3019883a 	mov	r12,r6
     ce4:	001b883a 	mov	r13,zero
     ce8:	600ed77a 	srli	r7,r12,29
     cec:	680a90fa 	slli	r5,r13,3
     cf0:	394ab03a 	or	r5,r7,r5
     cf4:	600890fa 	slli	r4,r12,3
     cf8:	3015883a 	mov	r10,r6
     cfc:	0017883a 	mov	r11,zero
     d00:	5008d77a 	srli	r4,r10,29
     d04:	580690fa 	slli	r3,r11,3
     d08:	20c6b03a 	or	r3,r4,r3
     d0c:	500490fa 	slli	r2,r10,3
     d10:	308000c4 	addi	r2,r6,3
     d14:	1004d0ba 	srli	r2,r2,2
     d18:	1085883a 	add	r2,r2,r2
     d1c:	1085883a 	add	r2,r2,r2
     d20:	d8b7c83a 	sub	sp,sp,r2
     d24:	d805883a 	mov	r2,sp
     d28:	1005883a 	mov	r2,r2
     d2c:	e0bffa15 	stw	r2,-24(fp)

	/* generate a new private key */
	gen_privatekey(chain, newprivkey_wif, sizeout, newprivkey_hex);
     d30:	d0a00117 	ldw	r2,-32764(gp)
     d34:	e0fff817 	ldw	r3,-32(fp)
     d38:	e13ffa17 	ldw	r4,-24(fp)
     d3c:	200f883a 	mov	r7,r4
     d40:	e1bff617 	ldw	r6,-40(fp)
     d44:	180b883a 	mov	r5,r3
     d48:	1009883a 	mov	r4,r2
     d4c:	00049f00 	call	49f0 <gen_privatekey>
	printf("privatekey WIF: %s\n", newprivkey_wif);
     d50:	e0bff817 	ldw	r2,-32(fp)
     d54:	100b883a 	mov	r5,r2
     d58:	010001b4 	movhi	r4,6
     d5c:	2120e004 	addi	r4,r4,-31872
     d60:	00460940 	call	46094 <printf>
	printf("privatekey HEX: %s\n", newprivkey_hex);
     d64:	e0bffa17 	ldw	r2,-24(fp)
     d68:	100b883a 	mov	r5,r2
     d6c:	010001b4 	movhi	r4,6
     d70:	2120e504 	addi	r4,r4,-31852
     d74:	00460940 	call	46094 <printf>
	memset(newprivkey_wif, 0, strlen(newprivkey_wif));
     d78:	e43ff817 	ldw	r16,-32(fp)
     d7c:	e0bff817 	ldw	r2,-32(fp)
     d80:	1009883a 	mov	r4,r2
     d84:	0046ef40 	call	46ef4 <strlen>
     d88:	100d883a 	mov	r6,r2
     d8c:	000b883a 	mov	r5,zero
     d90:	8009883a 	mov	r4,r16
     d94:	0045f3c0 	call	45f3c <memset>
	memset(newprivkey_hex, 0, strlen(newprivkey_hex));
     d98:	e43ffa17 	ldw	r16,-24(fp)
     d9c:	e0bffa17 	ldw	r2,-24(fp)
     da0:	1009883a 	mov	r4,r2
     da4:	0046ef40 	call	46ef4 <strlen>
     da8:	100d883a 	mov	r6,r2
     dac:	000b883a 	mov	r5,zero
     db0:	8009883a 	mov	r4,r16
     db4:	0045f3c0 	call	45f3c <memset>
     db8:	a037883a 	mov	sp,r20
}
     dbc:	0001883a 	nop
     dc0:	e6fffb04 	addi	sp,fp,-20
     dc4:	dfc00617 	ldw	ra,24(sp)
     dc8:	df000517 	ldw	fp,20(sp)
     dcc:	dd000417 	ldw	r20,16(sp)
     dd0:	dcc00317 	ldw	r19,12(sp)
     dd4:	dc800217 	ldw	r18,8(sp)
     dd8:	dc400117 	ldw	r17,4(sp)
     ddc:	dc000017 	ldw	r16,0(sp)
     de0:	dec00704 	addi	sp,sp,28
     de4:	f800283a 	ret

00000de8 <hdgenmaster>:

btc_bool hdgenmaster(char* masterkey, size_t sizeout)
{
     de8:	deffd804 	addi	sp,sp,-160
     dec:	dfc02715 	stw	ra,156(sp)
     df0:	df002615 	stw	fp,152(sp)
     df4:	df002604 	addi	fp,sp,152
     df8:	e13ffe15 	stw	r4,-8(fp)
     dfc:	e17fff15 	stw	r5,-4(fp)
//	uint8_t seed[32];
//	assert(btc_random_bytes(seed, 32, true));
//    random_buffer(seed, 32);
//    uint8_t seed[32] = {0};
	alt_u8 seed[32];
	getRandomBuffer(&(seed[0]), 32);
     e00:	e0bff604 	addi	r2,fp,-40
     e04:	01400804 	movi	r5,32
     e08:	1009883a 	mov	r4,r2
     e0c:	000217c0 	call	217c <getRandomBuffer>
	btc_hdnode_from_seed(seed, 32, &node);
     e10:	e0bff604 	addi	r2,fp,-40
     e14:	e1bfda04 	addi	r6,fp,-152
     e18:	01400804 	movi	r5,32
     e1c:	1009883a 	mov	r4,r2
     e20:	000390c0 	call	390c <btc_hdnode_from_seed>
	memset(seed, 0, 32);
     e24:	e0bff604 	addi	r2,fp,-40
     e28:	01800804 	movi	r6,32
     e2c:	000b883a 	mov	r5,zero
     e30:	1009883a 	mov	r4,r2
     e34:	0045f3c0 	call	45f3c <memset>
	btc_hdnode_serialize_private(&node, chain, masterkey, sizeout);
     e38:	d0a00117 	ldw	r2,-32764(gp)
     e3c:	e0ffff17 	ldw	r3,-4(fp)
     e40:	180f883a 	mov	r7,r3
     e44:	e1bffe17 	ldw	r6,-8(fp)
     e48:	100b883a 	mov	r5,r2
     e4c:	e13fda04 	addi	r4,fp,-152
     e50:	00040480 	call	4048 <btc_hdnode_serialize_private>
	memset(&node, 0, sizeof(node));
     e54:	01801c04 	movi	r6,112
     e58:	000b883a 	mov	r5,zero
     e5c:	e13fda04 	addi	r4,fp,-152
     e60:	0045f3c0 	call	45f3c <memset>
	return true;
     e64:	00800044 	movi	r2,1
//	char masterkey[sizeout];

//	/* generate a new hd master key */
//	hd_gen_master(chain, masterkey, sizeout);
//	printf("masterkey: %s\n", masterkey);
}
     e68:	e037883a 	mov	sp,fp
     e6c:	dfc00117 	ldw	ra,4(sp)
     e70:	df000017 	ldw	fp,0(sp)
     e74:	dec00204 	addi	sp,sp,8
     e78:	f800283a 	ret

00000e7c <hd_save_node>:

btc_bool hd_save_node(const btc_chainparams* chain, const char* nodeser, map_t keymap)
{
     e7c:	deffbd04 	addi	sp,sp,-268
     e80:	dfc04215 	stw	ra,264(sp)
     e84:	df004115 	stw	fp,260(sp)
     e88:	ddc04015 	stw	r23,256(sp)
     e8c:	dd803f15 	stw	r22,252(sp)
     e90:	dd403e15 	stw	r21,248(sp)
     e94:	dd003d15 	stw	r20,244(sp)
     e98:	dcc03c15 	stw	r19,240(sp)
     e9c:	dc803b15 	stw	r18,236(sp)
     ea0:	dc403a15 	stw	r17,232(sp)
     ea4:	dc003915 	stw	r16,228(sp)
     ea8:	df004104 	addi	fp,sp,260
     eac:	e13fe415 	stw	r4,-112(fp)
     eb0:	e17fe515 	stw	r5,-108(fp)
     eb4:	e1bfe615 	stw	r6,-104(fp)
     eb8:	d805883a 	mov	r2,sp
     ebc:	e0bfe715 	stw	r2,-100(fp)
	btc_hdnode node;
	if (!btc_hdnode_deserialize(nodeser, chain, &node))
     ec0:	e0bfc804 	addi	r2,fp,-224
     ec4:	100d883a 	mov	r6,r2
     ec8:	e17fe417 	ldw	r5,-112(fp)
     ecc:	e13fe517 	ldw	r4,-108(fp)
     ed0:	00041d00 	call	41d0 <btc_hdnode_deserialize>
     ed4:	10803fcc 	andi	r2,r2,255
     ed8:	1000021e 	bne	r2,zero,ee4 <hd_save_node+0x68>
		return false;
     edc:	0005883a 	mov	r2,zero
     ee0:	0000a006 	br	1164 <hd_save_node+0x2e8>

	/* Make Public Key */
	size_t strsize = 128;
     ee4:	00802004 	movi	r2,128
     ee8:	e0bfbf15 	stw	r2,-260(fp)
	char str[strsize];
     eec:	e0ffbf17 	ldw	r3,-260(fp)
     ef0:	1805883a 	mov	r2,r3
     ef4:	10bfffc4 	addi	r2,r2,-1
     ef8:	e0bfc015 	stw	r2,-256(fp)
     efc:	e0ffe815 	stw	r3,-96(fp)
     f00:	e03fe915 	stw	zero,-92(fp)
     f04:	e13fe817 	ldw	r4,-96(fp)
     f08:	2004d77a 	srli	r2,r4,29
     f0c:	e13fe917 	ldw	r4,-92(fp)
     f10:	200890fa 	slli	r4,r4,3
     f14:	e13feb15 	stw	r4,-84(fp)
     f18:	e13feb17 	ldw	r4,-84(fp)
     f1c:	1104b03a 	or	r2,r2,r4
     f20:	e0bfeb15 	stw	r2,-84(fp)
     f24:	e0bfe817 	ldw	r2,-96(fp)
     f28:	100490fa 	slli	r2,r2,3
     f2c:	e0ffec15 	stw	r3,-80(fp)
     f30:	e03fed15 	stw	zero,-76(fp)
     f34:	e13fec17 	ldw	r4,-80(fp)
     f38:	2004d77a 	srli	r2,r4,29
     f3c:	e13fed17 	ldw	r4,-76(fp)
     f40:	200890fa 	slli	r4,r4,3
     f44:	e13fef15 	stw	r4,-68(fp)
     f48:	e13fef17 	ldw	r4,-68(fp)
     f4c:	1104b03a 	or	r2,r2,r4
     f50:	e0bfef15 	stw	r2,-68(fp)
     f54:	e0bfec17 	ldw	r2,-80(fp)
     f58:	100490fa 	slli	r2,r2,3
     f5c:	188000c4 	addi	r2,r3,3
     f60:	1004d0ba 	srli	r2,r2,2
     f64:	1085883a 	add	r2,r2,r2
     f68:	1085883a 	add	r2,r2,r2
     f6c:	d8b7c83a 	sub	sp,sp,r2
     f70:	d805883a 	mov	r2,sp
     f74:	1005883a 	mov	r2,r2
     f78:	e0bfc115 	stw	r2,-252(fp)
	btc_hdnode_get_p2pkh_address(&node, chain, str, strsize);
     f7c:	e0ffc117 	ldw	r3,-252(fp)
     f80:	e13fbf17 	ldw	r4,-260(fp)
     f84:	e0bfc804 	addi	r2,fp,-224
     f88:	200f883a 	mov	r7,r4
     f8c:	180d883a 	mov	r6,r3
     f90:	e17fe417 	ldw	r5,-112(fp)
     f94:	1009883a 	mov	r4,r2
     f98:	00040fc0 	call	40fc <btc_hdnode_get_p2pkh_address>

	/* Make Private Key */
	size_t privkey_wif_size_bin = 34;
     f9c:	00800884 	movi	r2,34
     fa0:	e0bfc215 	stw	r2,-248(fp)
	uint8_t pkeybase58c[privkey_wif_size_bin];
     fa4:	e0bfc217 	ldw	r2,-248(fp)
     fa8:	1007883a 	mov	r3,r2
     fac:	18ffffc4 	addi	r3,r3,-1
     fb0:	e0ffc315 	stw	r3,-244(fp)
     fb4:	e0bff015 	stw	r2,-64(fp)
     fb8:	e03ff115 	stw	zero,-60(fp)
     fbc:	e13ff017 	ldw	r4,-64(fp)
     fc0:	2006d77a 	srli	r3,r4,29
     fc4:	e13ff117 	ldw	r4,-60(fp)
     fc8:	202e90fa 	slli	r23,r4,3
     fcc:	1deeb03a 	or	r23,r3,r23
     fd0:	e0fff017 	ldw	r3,-64(fp)
     fd4:	182c90fa 	slli	r22,r3,3
     fd8:	e0bff215 	stw	r2,-56(fp)
     fdc:	e03ff315 	stw	zero,-52(fp)
     fe0:	e13ff217 	ldw	r4,-56(fp)
     fe4:	2006d77a 	srli	r3,r4,29
     fe8:	e13ff317 	ldw	r4,-52(fp)
     fec:	202a90fa 	slli	r21,r4,3
     ff0:	1d6ab03a 	or	r21,r3,r21
     ff4:	e0fff217 	ldw	r3,-56(fp)
     ff8:	182890fa 	slli	r20,r3,3
     ffc:	108000c4 	addi	r2,r2,3
    1000:	1004d0ba 	srli	r2,r2,2
    1004:	1085883a 	add	r2,r2,r2
    1008:	1085883a 	add	r2,r2,r2
    100c:	d8b7c83a 	sub	sp,sp,r2
    1010:	d805883a 	mov	r2,sp
    1014:	1005883a 	mov	r2,r2
    1018:	e0bfc415 	stw	r2,-240(fp)
	pkeybase58c[0] = chain->b58prefix_secret_address;
    101c:	e0bfe417 	ldw	r2,-112(fp)
    1020:	10c009c3 	ldbu	r3,39(r2)
    1024:	e0bfc417 	ldw	r2,-240(fp)
    1028:	10c00005 	stb	r3,0(r2)
	pkeybase58c[33] = 1; /* always use compressed keys */
    102c:	e0bfc417 	ldw	r2,-240(fp)
    1030:	00c00044 	movi	r3,1
    1034:	10c00845 	stb	r3,33(r2)
	size_t privkey_wif_size = 128;
    1038:	00802004 	movi	r2,128
    103c:	e0bfc515 	stw	r2,-236(fp)
	char privkey_wif[privkey_wif_size];
    1040:	e0bfc517 	ldw	r2,-236(fp)
    1044:	1007883a 	mov	r3,r2
    1048:	18ffffc4 	addi	r3,r3,-1
    104c:	e0ffc615 	stw	r3,-232(fp)
    1050:	e0bff415 	stw	r2,-48(fp)
    1054:	e03ff515 	stw	zero,-44(fp)
    1058:	e13ff417 	ldw	r4,-48(fp)
    105c:	2006d77a 	srli	r3,r4,29
    1060:	e13ff517 	ldw	r4,-44(fp)
    1064:	202690fa 	slli	r19,r4,3
    1068:	1ce6b03a 	or	r19,r3,r19
    106c:	e0fff417 	ldw	r3,-48(fp)
    1070:	182490fa 	slli	r18,r3,3
    1074:	e0bff615 	stw	r2,-40(fp)
    1078:	e03ff715 	stw	zero,-36(fp)
    107c:	e13ff617 	ldw	r4,-40(fp)
    1080:	2006d77a 	srli	r3,r4,29
    1084:	e13ff717 	ldw	r4,-36(fp)
    1088:	202290fa 	slli	r17,r4,3
    108c:	1c62b03a 	or	r17,r3,r17
    1090:	e0fff617 	ldw	r3,-40(fp)
    1094:	182090fa 	slli	r16,r3,3
    1098:	108000c4 	addi	r2,r2,3
    109c:	1004d0ba 	srli	r2,r2,2
    10a0:	1085883a 	add	r2,r2,r2
    10a4:	1085883a 	add	r2,r2,r2
    10a8:	d8b7c83a 	sub	sp,sp,r2
    10ac:	d805883a 	mov	r2,sp
    10b0:	1005883a 	mov	r2,r2
    10b4:	e0bfc715 	stw	r2,-228(fp)
	memcpy(&pkeybase58c[1], node.private_key, BTC_ECKEY_PKEY_LENGTH);
    10b8:	e0bfc417 	ldw	r2,-240(fp)
    10bc:	10800044 	addi	r2,r2,1
    10c0:	1009883a 	mov	r4,r2
    10c4:	e0bfd304 	addi	r2,fp,-180
    10c8:	00c00804 	movi	r3,32
    10cc:	180d883a 	mov	r6,r3
    10d0:	100b883a 	mov	r5,r2
    10d4:	0045c980 	call	45c98 <memcpy>
	assert(btc_base58_encode_check(pkeybase58c, privkey_wif_size_bin, privkey_wif, privkey_wif_size) != 0);
    10d8:	e0bfc417 	ldw	r2,-240(fp)
    10dc:	e0ffc217 	ldw	r3,-248(fp)
    10e0:	e13fc717 	ldw	r4,-228(fp)
    10e4:	e17fc517 	ldw	r5,-236(fp)
    10e8:	280f883a 	mov	r7,r5
    10ec:	200d883a 	mov	r6,r4
    10f0:	180b883a 	mov	r5,r3
    10f4:	1009883a 	mov	r4,r2
    10f8:	00031880 	call	3188 <btc_base58_encode_check>
    10fc:	1000081e 	bne	r2,zero,1120 <hd_save_node+0x2a4>
    1100:	01c001b4 	movhi	r7,6
    1104:	39e0ea04 	addi	r7,r7,-31832
    1108:	018001b4 	movhi	r6,6
    110c:	31a13604 	addi	r6,r6,-31528
    1110:	01401a84 	movi	r5,106
    1114:	010001b4 	movhi	r4,6
    1118:	21210204 	addi	r4,r4,-31736
    111c:	004504c0 	call	4504c <__assert_func>
	if (btc_hdnode_has_privkey(&node)) {
    1120:	e0bfc804 	addi	r2,fp,-224
    1124:	1009883a 	mov	r4,r2
    1128:	00047a40 	call	47a4 <btc_hdnode_has_privkey>
    112c:	10803fcc 	andi	r2,r2,255
    1130:	10000b26 	beq	r2,zero,1160 <hd_save_node+0x2e4>
		printf("privatekey WIF: %s\n", privkey_wif);
    1134:	e0bfc717 	ldw	r2,-228(fp)
    1138:	100b883a 	mov	r5,r2
    113c:	010001b4 	movhi	r4,6
    1140:	2120e004 	addi	r4,r4,-31872
    1144:	00460940 	call	46094 <printf>
		hashmap_put(keymap, str, privkey_wif);
    1148:	e0bfc117 	ldw	r2,-252(fp)
    114c:	e0ffc717 	ldw	r3,-228(fp)
    1150:	180d883a 	mov	r6,r3
    1154:	100b883a 	mov	r5,r2
    1158:	e13fe617 	ldw	r4,-104(fp)
    115c:	000072c0 	call	72c <hashmap_put>
//		if(!valueForKeyInHashTable(ht, str, &value)){
//			addToHashTable(ht, str, privkey_wif);
//		}
//		addToHashTable(ht, str, privkey_wif);
	}
	return true;
    1160:	00800044 	movi	r2,1
    1164:	e6ffe717 	ldw	sp,-100(fp)
}
    1168:	e6fff804 	addi	sp,fp,-32
    116c:	dfc00917 	ldw	ra,36(sp)
    1170:	df000817 	ldw	fp,32(sp)
    1174:	ddc00717 	ldw	r23,28(sp)
    1178:	dd800617 	ldw	r22,24(sp)
    117c:	dd400517 	ldw	r21,20(sp)
    1180:	dd000417 	ldw	r20,16(sp)
    1184:	dcc00317 	ldw	r19,12(sp)
    1188:	dc800217 	ldw	r18,8(sp)
    118c:	dc400117 	ldw	r17,4(sp)
    1190:	dc000017 	ldw	r16,0(sp)
    1194:	dec00a04 	addi	sp,sp,40
    1198:	f800283a 	ret

0000119c <hdderive>:

int hdderive(char* pkey, char* keypath, char* p2pkh_address, map_t keymap)
{
    119c:	deffd304 	addi	sp,sp,-180
    11a0:	dfc02c15 	stw	ra,176(sp)
    11a4:	df002b15 	stw	fp,172(sp)
    11a8:	ddc02a15 	stw	r23,168(sp)
    11ac:	dd802915 	stw	r22,164(sp)
    11b0:	dd402815 	stw	r21,160(sp)
    11b4:	dd002715 	stw	r20,156(sp)
    11b8:	dcc02615 	stw	r19,152(sp)
    11bc:	dc802515 	stw	r18,148(sp)
    11c0:	dc402415 	stw	r17,144(sp)
    11c4:	dc002315 	stw	r16,140(sp)
    11c8:	df002b04 	addi	fp,sp,172
    11cc:	e13fed15 	stw	r4,-76(fp)
    11d0:	e17fee15 	stw	r5,-72(fp)
    11d4:	e1bfef15 	stw	r6,-68(fp)
    11d8:	e1fff015 	stw	r7,-64(fp)
    11dc:	d809883a 	mov	r4,sp
    11e0:	e13ff215 	stw	r4,-56(fp)
	if (!pkey)
    11e4:	e13fed17 	ldw	r4,-76(fp)
    11e8:	2000061e 	bne	r4,zero,1204 <hdderive+0x68>
		return showError("Missing extended key (use -p)");
    11ec:	010001b4 	movhi	r4,6
    11f0:	21210404 	addi	r4,r4,-31728
    11f4:	0000bfc0 	call	bfc <showError>
    11f8:	10803fcc 	andi	r2,r2,255
    11fc:	e0bff115 	stw	r2,-60(fp)
    1200:	00019806 	br	1864 <hdderive+0x6c8>
	if (!keypath)
    1204:	e13fee17 	ldw	r4,-72(fp)
    1208:	2000061e 	bne	r4,zero,1224 <hdderive+0x88>
		return showError("Missing keypath (use -m)");
    120c:	010001b4 	movhi	r4,6
    1210:	21210c04 	addi	r4,r4,-31696
    1214:	0000bfc0 	call	bfc <showError>
    1218:	10803fcc 	andi	r2,r2,255
    121c:	e0bff115 	stw	r2,-60(fp)
    1220:	00019006 	br	1864 <hdderive+0x6c8>
	size_t sizeout = 128;
    1224:	01002004 	movi	r4,128
    1228:	e13fe015 	stw	r4,-128(fp)
	char newextkey[sizeout];
    122c:	e13fe017 	ldw	r4,-128(fp)
    1230:	200b883a 	mov	r5,r4
    1234:	297fffc4 	addi	r5,r5,-1
    1238:	e17fe115 	stw	r5,-124(fp)
    123c:	2019883a 	mov	r12,r4
    1240:	001b883a 	mov	r13,zero
    1244:	600ad77a 	srli	r5,r12,29
    1248:	681290fa 	slli	r9,r13,3
    124c:	2a52b03a 	or	r9,r5,r9
    1250:	601090fa 	slli	r8,r12,3
    1254:	2015883a 	mov	r10,r4
    1258:	0017883a 	mov	r11,zero
    125c:	500ad77a 	srli	r5,r10,29
    1260:	580690fa 	slli	r3,r11,3
    1264:	28c6b03a 	or	r3,r5,r3
    1268:	500490fa 	slli	r2,r10,3
    126c:	208000c4 	addi	r2,r4,3
    1270:	1004d0ba 	srli	r2,r2,2
    1274:	1085883a 	add	r2,r2,r2
    1278:	1085883a 	add	r2,r2,r2
    127c:	d8b7c83a 	sub	sp,sp,r2
    1280:	d8800104 	addi	r2,sp,4
    1284:	1005883a 	mov	r2,r2
    1288:	e0bfe215 	stw	r2,-120(fp)

	//check if we derive a range of keys
	unsigned int maxlen = 1024;
    128c:	00810004 	movi	r2,1024
    1290:	e0bfe315 	stw	r2,-116(fp)
	int posanum = -1;
    1294:	00bfffc4 	movi	r2,-1
    1298:	e0bfd615 	stw	r2,-168(fp)
	int posbnum = -1;
    129c:	00bfffc4 	movi	r2,-1
    12a0:	e0bfd715 	stw	r2,-164(fp)
	int end = -1;
    12a4:	00bfffc4 	movi	r2,-1
    12a8:	e0bfd815 	stw	r2,-160(fp)
	uint64_t from;
	uint64_t to;

	static char digits[] = "0123456789";
	for (unsigned int i = 0; i<strlen(keypath); i++) {
    12ac:	e03fdd15 	stw	zero,-140(fp)
    12b0:	0000a306 	br	1540 <hdderive+0x3a4>
		if (i > maxlen) {
    12b4:	e0bfdd17 	ldw	r2,-140(fp)
    12b8:	e0ffe317 	ldw	r3,-116(fp)
    12bc:	1880a636 	bltu	r3,r2,1558 <hdderive+0x3bc>
			break;
		}
		if (posanum > -1 && posbnum == -1) {
    12c0:	e0bfd617 	ldw	r2,-168(fp)
    12c4:	10003916 	blt	r2,zero,13ac <hdderive+0x210>
    12c8:	e0bfd717 	ldw	r2,-164(fp)
    12cc:	10bfffd8 	cmpnei	r2,r2,-1
    12d0:	1000361e 	bne	r2,zero,13ac <hdderive+0x210>
			if (keypath[i] == '-') {
    12d4:	e0ffee17 	ldw	r3,-72(fp)
    12d8:	e0bfdd17 	ldw	r2,-140(fp)
    12dc:	1885883a 	add	r2,r3,r2
    12e0:	10800003 	ldbu	r2,0(r2)
    12e4:	10803fcc 	andi	r2,r2,255
    12e8:	1080201c 	xori	r2,r2,128
    12ec:	10bfe004 	addi	r2,r2,-128
    12f0:	10800b58 	cmpnei	r2,r2,45
    12f4:	10001e1e 	bne	r2,zero,1370 <hdderive+0x1d4>
				if (i-posanum >= 9) {
    12f8:	e0bfd617 	ldw	r2,-168(fp)
    12fc:	e0ffdd17 	ldw	r3,-140(fp)
    1300:	1885c83a 	sub	r2,r3,r2
    1304:	10800270 	cmpltui	r2,r2,9
    1308:	10009526 	beq	r2,zero,1560 <hdderive+0x3c4>
					break;
				}
				posbnum = i+1;
    130c:	e0bfdd17 	ldw	r2,-140(fp)
    1310:	10800044 	addi	r2,r2,1
    1314:	e0bfd715 	stw	r2,-164(fp)
				char buf[9] = {0};
    1318:	e03fe615 	stw	zero,-104(fp)
    131c:	e03fe715 	stw	zero,-100(fp)
    1320:	e03fe805 	stb	zero,-96(fp)
				memcpy (buf, &keypath[posanum], i-posanum);
    1324:	e0bfd617 	ldw	r2,-168(fp)
    1328:	e0ffee17 	ldw	r3,-72(fp)
    132c:	1889883a 	add	r4,r3,r2
    1330:	e0bfd617 	ldw	r2,-168(fp)
    1334:	e0ffdd17 	ldw	r3,-140(fp)
    1338:	1887c83a 	sub	r3,r3,r2
    133c:	e0bfe604 	addi	r2,fp,-104
    1340:	180d883a 	mov	r6,r3
    1344:	200b883a 	mov	r5,r4
    1348:	1009883a 	mov	r4,r2
    134c:	0045c980 	call	45c98 <memcpy>
				from = strtoull(buf, NULL, 10);
    1350:	e0bfe604 	addi	r2,fp,-104
    1354:	01800284 	movi	r6,10
    1358:	000b883a 	mov	r5,zero
    135c:	1009883a 	mov	r4,r2
    1360:	00472480 	call	47248 <strtoull>
    1364:	e0bfd915 	stw	r2,-156(fp)
    1368:	e0ffda15 	stw	r3,-152(fp)
	for (unsigned int i = 0; i<strlen(keypath); i++) {
		if (i > maxlen) {
			break;
		}
		if (posanum > -1 && posbnum == -1) {
			if (keypath[i] == '-') {
    136c:	00005b06 	br	14dc <hdderive+0x340>
				posbnum = i+1;
				char buf[9] = {0};
				memcpy (buf, &keypath[posanum], i-posanum);
				from = strtoull(buf, NULL, 10);
			}
			else if (!strchr(digits, keypath[i])) {
    1370:	e0ffee17 	ldw	r3,-72(fp)
    1374:	e0bfdd17 	ldw	r2,-140(fp)
    1378:	1885883a 	add	r2,r3,r2
    137c:	10800003 	ldbu	r2,0(r2)
    1380:	10803fcc 	andi	r2,r2,255
    1384:	1080201c 	xori	r2,r2,128
    1388:	10bfe004 	addi	r2,r2,-128
    138c:	100b883a 	mov	r5,r2
    1390:	010001b4 	movhi	r4,6
    1394:	2136ff04 	addi	r4,r4,-9220
    1398:	0046bd80 	call	46bd8 <strchr>
    139c:	10004f1e 	bne	r2,zero,14dc <hdderive+0x340>
				posanum = -1;
    13a0:	00bfffc4 	movi	r2,-1
    13a4:	e0bfd615 	stw	r2,-168(fp)
				break;
    13a8:	00007006 	br	156c <hdderive+0x3d0>
			}
		}
		else if (posanum > -1 && posbnum > -1) {
    13ac:	e0bfd617 	ldw	r2,-168(fp)
    13b0:	10004b16 	blt	r2,zero,14e0 <hdderive+0x344>
    13b4:	e0bfd717 	ldw	r2,-164(fp)
    13b8:	10004916 	blt	r2,zero,14e0 <hdderive+0x344>
			if (keypath[i] == ']' || keypath[i] == ')') {
    13bc:	e0ffee17 	ldw	r3,-72(fp)
    13c0:	e0bfdd17 	ldw	r2,-140(fp)
    13c4:	1885883a 	add	r2,r3,r2
    13c8:	10800003 	ldbu	r2,0(r2)
    13cc:	10803fcc 	andi	r2,r2,255
    13d0:	1080201c 	xori	r2,r2,128
    13d4:	10bfe004 	addi	r2,r2,-128
    13d8:	10801760 	cmpeqi	r2,r2,93
    13dc:	1000091e 	bne	r2,zero,1404 <hdderive+0x268>
    13e0:	e0ffee17 	ldw	r3,-72(fp)
    13e4:	e0bfdd17 	ldw	r2,-140(fp)
    13e8:	1885883a 	add	r2,r3,r2
    13ec:	10800003 	ldbu	r2,0(r2)
    13f0:	10803fcc 	andi	r2,r2,255
    13f4:	1080201c 	xori	r2,r2,128
    13f8:	10bfe004 	addi	r2,r2,-128
    13fc:	10800a58 	cmpnei	r2,r2,41
    1400:	1000251e 	bne	r2,zero,1498 <hdderive+0x2fc>
				if (i-posbnum >= 9) {
    1404:	e0bfd717 	ldw	r2,-164(fp)
    1408:	e0ffdd17 	ldw	r3,-140(fp)
    140c:	1885c83a 	sub	r2,r3,r2
    1410:	10800270 	cmpltui	r2,r2,9
    1414:	10005426 	beq	r2,zero,1568 <hdderive+0x3cc>
					break;
				}
				char buf[9] = {0};
    1418:	e03fe845 	stb	zero,-95(fp)
    141c:	e03fe885 	stb	zero,-94(fp)
    1420:	e03fe8c5 	stb	zero,-93(fp)
    1424:	e03fe905 	stb	zero,-92(fp)
    1428:	e03fe945 	stb	zero,-91(fp)
    142c:	e03fe985 	stb	zero,-90(fp)
    1430:	e03fe9c5 	stb	zero,-89(fp)
    1434:	e03fea05 	stb	zero,-88(fp)
    1438:	e03fea45 	stb	zero,-87(fp)
				memcpy (buf, &keypath[posbnum], i-posbnum);
    143c:	e0bfd717 	ldw	r2,-164(fp)
    1440:	e0ffee17 	ldw	r3,-72(fp)
    1444:	1889883a 	add	r4,r3,r2
    1448:	e0bfd717 	ldw	r2,-164(fp)
    144c:	e0ffdd17 	ldw	r3,-140(fp)
    1450:	1887c83a 	sub	r3,r3,r2
    1454:	e0bfe844 	addi	r2,fp,-95
    1458:	180d883a 	mov	r6,r3
    145c:	200b883a 	mov	r5,r4
    1460:	1009883a 	mov	r4,r2
    1464:	0045c980 	call	45c98 <memcpy>
				to = strtoull(buf, NULL, 10);
    1468:	e0bfe844 	addi	r2,fp,-95
    146c:	01800284 	movi	r6,10
    1470:	000b883a 	mov	r5,zero
    1474:	1009883a 	mov	r4,r2
    1478:	00472480 	call	47248 <strtoull>
    147c:	e0bfdb15 	stw	r2,-148(fp)
    1480:	e0ffdc15 	stw	r3,-144(fp)
				end = i+1;
    1484:	e0bfdd17 	ldw	r2,-140(fp)
    1488:	10800044 	addi	r2,r2,1
    148c:	e0bfd815 	stw	r2,-160(fp)
				break;
    1490:	0001883a 	nop
    1494:	00003506 	br	156c <hdderive+0x3d0>
			}
			else if (!strchr(digits, keypath[i])) {
    1498:	e0ffee17 	ldw	r3,-72(fp)
    149c:	e0bfdd17 	ldw	r2,-140(fp)
    14a0:	1885883a 	add	r2,r3,r2
    14a4:	10800003 	ldbu	r2,0(r2)
    14a8:	10803fcc 	andi	r2,r2,255
    14ac:	1080201c 	xori	r2,r2,128
    14b0:	10bfe004 	addi	r2,r2,-128
    14b4:	100b883a 	mov	r5,r2
    14b8:	010001b4 	movhi	r4,6
    14bc:	2136ff04 	addi	r4,r4,-9220
    14c0:	0046bd80 	call	46bd8 <strchr>
    14c4:	1000061e 	bne	r2,zero,14e0 <hdderive+0x344>
				posbnum = -1;
    14c8:	00bfffc4 	movi	r2,-1
    14cc:	e0bfd715 	stw	r2,-164(fp)
				posanum = -1;
    14d0:	00bfffc4 	movi	r2,-1
    14d4:	e0bfd615 	stw	r2,-168(fp)
				break;
    14d8:	00002406 	br	156c <hdderive+0x3d0>
	for (unsigned int i = 0; i<strlen(keypath); i++) {
		if (i > maxlen) {
			break;
		}
		if (posanum > -1 && posbnum == -1) {
			if (keypath[i] == '-') {
    14dc:	0001883a 	nop
				posbnum = -1;
				posanum = -1;
				break;
			}
		}
		if (keypath[i] == '[' || keypath[i] == '(') {
    14e0:	e0ffee17 	ldw	r3,-72(fp)
    14e4:	e0bfdd17 	ldw	r2,-140(fp)
    14e8:	1885883a 	add	r2,r3,r2
    14ec:	10800003 	ldbu	r2,0(r2)
    14f0:	10803fcc 	andi	r2,r2,255
    14f4:	1080201c 	xori	r2,r2,128
    14f8:	10bfe004 	addi	r2,r2,-128
    14fc:	108016e0 	cmpeqi	r2,r2,91
    1500:	1000091e 	bne	r2,zero,1528 <hdderive+0x38c>
    1504:	e0ffee17 	ldw	r3,-72(fp)
    1508:	e0bfdd17 	ldw	r2,-140(fp)
    150c:	1885883a 	add	r2,r3,r2
    1510:	10800003 	ldbu	r2,0(r2)
    1514:	10803fcc 	andi	r2,r2,255
    1518:	1080201c 	xori	r2,r2,128
    151c:	10bfe004 	addi	r2,r2,-128
    1520:	10800a18 	cmpnei	r2,r2,40
    1524:	1000031e 	bne	r2,zero,1534 <hdderive+0x398>
			posanum = i+1;
    1528:	e0bfdd17 	ldw	r2,-140(fp)
    152c:	10800044 	addi	r2,r2,1
    1530:	e0bfd615 	stw	r2,-168(fp)
	int end = -1;
	uint64_t from;
	uint64_t to;

	static char digits[] = "0123456789";
	for (unsigned int i = 0; i<strlen(keypath); i++) {
    1534:	e0bfdd17 	ldw	r2,-140(fp)
    1538:	10800044 	addi	r2,r2,1
    153c:	e0bfdd15 	stw	r2,-140(fp)
    1540:	e13fee17 	ldw	r4,-72(fp)
    1544:	0046ef40 	call	46ef4 <strlen>
    1548:	1007883a 	mov	r3,r2
    154c:	e0bfdd17 	ldw	r2,-140(fp)
    1550:	10ff5836 	bltu	r2,r3,12b4 <__alt_mem_epcs_flash_controller+0xfdff02b4>
    1554:	00000506 	br	156c <hdderive+0x3d0>
		if (i > maxlen) {
			break;
    1558:	0001883a 	nop
    155c:	00000306 	br	156c <hdderive+0x3d0>
		}
		if (posanum > -1 && posbnum == -1) {
			if (keypath[i] == '-') {
				if (i-posanum >= 9) {
					break;
    1560:	0001883a 	nop
    1564:	00000106 	br	156c <hdderive+0x3d0>
			}
		}
		else if (posanum > -1 && posbnum > -1) {
			if (keypath[i] == ']' || keypath[i] == ')') {
				if (i-posbnum >= 9) {
					break;
    1568:	0001883a 	nop
		if (keypath[i] == '[' || keypath[i] == '(') {
			posanum = i+1;
		}
	}

	if (end > -1 && from <= to) {
    156c:	e0bfd817 	ldw	r2,-160(fp)
    1570:	10009c16 	blt	r2,zero,17e4 <hdderive+0x648>
    1574:	e0bfda17 	ldw	r2,-152(fp)
    1578:	e0ffdc17 	ldw	r3,-144(fp)
    157c:	18809936 	bltu	r3,r2,17e4 <hdderive+0x648>
    1580:	e0ffda17 	ldw	r3,-152(fp)
    1584:	e0bfdc17 	ldw	r2,-144(fp)
    1588:	1880031e 	bne	r3,r2,1598 <hdderive+0x3fc>
    158c:	e0bfd917 	ldw	r2,-156(fp)
    1590:	e0ffdb17 	ldw	r3,-148(fp)
    1594:	18809336 	bltu	r3,r2,17e4 <hdderive+0x648>
		for (uint64_t i = from; i <= to; i++) {
    1598:	e0bfd917 	ldw	r2,-156(fp)
    159c:	e0bfde15 	stw	r2,-136(fp)
    15a0:	e0bfda17 	ldw	r2,-152(fp)
    15a4:	e0bfdf15 	stw	r2,-132(fp)
    15a8:	00008406 	br	17bc <hdderive+0x620>
    15ac:	d805883a 	mov	r2,sp
    15b0:	e0bff315 	stw	r2,-52(fp)
			char keypathnew[strlen(keypath)+16];
    15b4:	e13fee17 	ldw	r4,-72(fp)
    15b8:	0046ef40 	call	46ef4 <strlen>
    15bc:	10800404 	addi	r2,r2,16
    15c0:	1007883a 	mov	r3,r2
    15c4:	18ffffc4 	addi	r3,r3,-1
    15c8:	e0ffe415 	stw	r3,-112(fp)
    15cc:	1029883a 	mov	r20,r2
    15d0:	002b883a 	mov	r21,zero
    15d4:	a006d77a 	srli	r3,r20,29
    15d8:	a82290fa 	slli	r17,r21,3
    15dc:	1c62b03a 	or	r17,r3,r17
    15e0:	a02090fa 	slli	r16,r20,3
    15e4:	102d883a 	mov	r22,r2
    15e8:	002f883a 	mov	r23,zero
    15ec:	b006d77a 	srli	r3,r22,29
    15f0:	b82690fa 	slli	r19,r23,3
    15f4:	1ce6b03a 	or	r19,r3,r19
    15f8:	b02490fa 	slli	r18,r22,3
    15fc:	108000c4 	addi	r2,r2,3
    1600:	1004d0ba 	srli	r2,r2,2
    1604:	1085883a 	add	r2,r2,r2
    1608:	1085883a 	add	r2,r2,r2
    160c:	d8b7c83a 	sub	sp,sp,r2
    1610:	d8800104 	addi	r2,sp,4
    1614:	1005883a 	mov	r2,r2
    1618:	e0bfe515 	stw	r2,-108(fp)
			memcpy(keypathnew, keypath, posanum-1);
    161c:	e0ffe517 	ldw	r3,-108(fp)
    1620:	e0bfd617 	ldw	r2,-168(fp)
    1624:	10bfffc4 	addi	r2,r2,-1
    1628:	100d883a 	mov	r6,r2
    162c:	e17fee17 	ldw	r5,-72(fp)
    1630:	1809883a 	mov	r4,r3
    1634:	0045c980 	call	45c98 <memcpy>
			char index[9] = {0};
    1638:	e03fea8d 	sth	zero,-86(fp)
    163c:	e03feb0d 	sth	zero,-84(fp)
    1640:	e03feb8d 	sth	zero,-82(fp)
    1644:	e03fec0d 	sth	zero,-80(fp)
    1648:	e03fec85 	stb	zero,-78(fp)
			sprintf(index, "%lld", i);
    164c:	e0bfea84 	addi	r2,fp,-86
    1650:	e1bfde17 	ldw	r6,-136(fp)
    1654:	e1ffdf17 	ldw	r7,-132(fp)
    1658:	014001b4 	movhi	r5,6
    165c:	29611304 	addi	r5,r5,-31668
    1660:	1009883a 	mov	r4,r2
    1664:	0046b6c0 	call	46b6c <sprintf>
			memcpy(keypathnew+posanum-1, index, strlen(index));
    1668:	e0ffe517 	ldw	r3,-108(fp)
    166c:	e0bfd617 	ldw	r2,-168(fp)
    1670:	10bfffc4 	addi	r2,r2,-1
    1674:	1885883a 	add	r2,r3,r2
    1678:	e0bff415 	stw	r2,-48(fp)
    167c:	e0bfea84 	addi	r2,fp,-86
    1680:	1009883a 	mov	r4,r2
    1684:	0046ef40 	call	46ef4 <strlen>
    1688:	1007883a 	mov	r3,r2
    168c:	e0bfea84 	addi	r2,fp,-86
    1690:	180d883a 	mov	r6,r3
    1694:	100b883a 	mov	r5,r2
    1698:	e13ff417 	ldw	r4,-48(fp)
    169c:	0045c980 	call	45c98 <memcpy>
			memcpy(keypathnew+posanum-1+strlen(index), &keypath[end], strlen(keypath)-end);
    16a0:	e0bfe517 	ldw	r2,-108(fp)
    16a4:	e0bff515 	stw	r2,-44(fp)
    16a8:	e0bfea84 	addi	r2,fp,-86
    16ac:	1009883a 	mov	r4,r2
    16b0:	0046ef40 	call	46ef4 <strlen>
    16b4:	1007883a 	mov	r3,r2
    16b8:	e0bfd617 	ldw	r2,-168(fp)
    16bc:	1885883a 	add	r2,r3,r2
    16c0:	10bfffc4 	addi	r2,r2,-1
    16c4:	e0fff517 	ldw	r3,-44(fp)
    16c8:	1885883a 	add	r2,r3,r2
    16cc:	e0bff615 	stw	r2,-40(fp)
    16d0:	e0bfd817 	ldw	r2,-160(fp)
    16d4:	e0ffee17 	ldw	r3,-72(fp)
    16d8:	1887883a 	add	r3,r3,r2
    16dc:	e0fff715 	stw	r3,-36(fp)
    16e0:	e13fee17 	ldw	r4,-72(fp)
    16e4:	0046ef40 	call	46ef4 <strlen>
    16e8:	1007883a 	mov	r3,r2
    16ec:	e0bfd817 	ldw	r2,-160(fp)
    16f0:	1885c83a 	sub	r2,r3,r2
    16f4:	100d883a 	mov	r6,r2
    16f8:	e17ff717 	ldw	r5,-36(fp)
    16fc:	e13ff617 	ldw	r4,-40(fp)
    1700:	0045c980 	call	45c98 <memcpy>


			if (!hd_derive(chain, pkey, keypathnew, newextkey, sizeout))
    1704:	d0e00117 	ldw	r3,-32764(gp)
    1708:	e13fe517 	ldw	r4,-108(fp)
    170c:	e17fe217 	ldw	r5,-120(fp)
    1710:	e0bfe017 	ldw	r2,-128(fp)
    1714:	d8800015 	stw	r2,0(sp)
    1718:	280f883a 	mov	r7,r5
    171c:	200d883a 	mov	r6,r4
    1720:	e17fed17 	ldw	r5,-76(fp)
    1724:	1809883a 	mov	r4,r3
    1728:	0004f2c0 	call	4f2c <hd_derive>
    172c:	10803fcc 	andi	r2,r2,255
    1730:	1000071e 	bne	r2,zero,1750 <hdderive+0x5b4>
				return showError("Deriving child key failed\n");
    1734:	010001b4 	movhi	r4,6
    1738:	21211504 	addi	r4,r4,-31660
    173c:	0000bfc0 	call	bfc <showError>
    1740:	10803fcc 	andi	r2,r2,255
    1744:	e0bff115 	stw	r2,-60(fp)
    1748:	0005883a 	mov	r2,zero
    174c:	00000d06 	br	1784 <hdderive+0x5e8>
			else
				hd_print_node(chain, newextkey, p2pkh_address);
    1750:	d0a00117 	ldw	r2,-32764(gp)
    1754:	e0ffe217 	ldw	r3,-120(fp)
    1758:	e1bfef17 	ldw	r6,-68(fp)
    175c:	180b883a 	mov	r5,r3
    1760:	1009883a 	mov	r4,r2
    1764:	0004b300 	call	4b30 <hd_print_node>
				hd_save_node(chain, newextkey, keymap);
    1768:	d0a00117 	ldw	r2,-32764(gp)
    176c:	e0ffe217 	ldw	r3,-120(fp)
    1770:	e1bff017 	ldw	r6,-64(fp)
    1774:	180b883a 	mov	r5,r3
    1778:	1009883a 	mov	r4,r2
    177c:	0000e7c0 	call	e7c <hd_save_node>
    1780:	00800044 	movi	r2,1
    1784:	e6fff317 	ldw	sp,-52(fp)
    1788:	10800060 	cmpeqi	r2,r2,1
    178c:	10003526 	beq	r2,zero,1864 <hdderive+0x6c8>
			posanum = i+1;
		}
	}

	if (end > -1 && from <= to) {
		for (uint64_t i = from; i <= to; i++) {
    1790:	e13fde17 	ldw	r4,-136(fp)
    1794:	e17fdf17 	ldw	r5,-132(fp)
    1798:	01800044 	movi	r6,1
    179c:	000f883a 	mov	r7,zero
    17a0:	2185883a 	add	r2,r4,r6
    17a4:	1111803a 	cmpltu	r8,r2,r4
    17a8:	29c7883a 	add	r3,r5,r7
    17ac:	40c9883a 	add	r4,r8,r3
    17b0:	2007883a 	mov	r3,r4
    17b4:	e0bfde15 	stw	r2,-136(fp)
    17b8:	e0ffdf15 	stw	r3,-132(fp)
    17bc:	e0bfdf17 	ldw	r2,-132(fp)
    17c0:	e0ffdc17 	ldw	r3,-144(fp)
    17c4:	18802536 	bltu	r3,r2,185c <hdderive+0x6c0>
    17c8:	e0ffdf17 	ldw	r3,-132(fp)
    17cc:	e0bfdc17 	ldw	r2,-144(fp)
    17d0:	18bf761e 	bne	r3,r2,15ac <__alt_mem_epcs_flash_controller+0xfdff05ac>
    17d4:	e0bfde17 	ldw	r2,-136(fp)
    17d8:	e0ffdb17 	ldw	r3,-148(fp)
    17dc:	18801f36 	bltu	r3,r2,185c <hdderive+0x6c0>
    17e0:	003f7206 	br	15ac <__alt_mem_epcs_flash_controller+0xfdff05ac>
				hd_print_node(chain, newextkey, p2pkh_address);
				hd_save_node(chain, newextkey, keymap);
		}
	}
	else {
		if (!hd_derive(chain, pkey, keypath, newextkey, sizeout))
    17e4:	d0e00117 	ldw	r3,-32764(gp)
    17e8:	e13fe217 	ldw	r4,-120(fp)
    17ec:	e0bfe017 	ldw	r2,-128(fp)
    17f0:	d8800015 	stw	r2,0(sp)
    17f4:	200f883a 	mov	r7,r4
    17f8:	e1bfee17 	ldw	r6,-72(fp)
    17fc:	e17fed17 	ldw	r5,-76(fp)
    1800:	1809883a 	mov	r4,r3
    1804:	0004f2c0 	call	4f2c <hd_derive>
    1808:	10803fcc 	andi	r2,r2,255
    180c:	1000061e 	bne	r2,zero,1828 <hdderive+0x68c>
			return showError("Deriving child key failed\n");
    1810:	010001b4 	movhi	r4,6
    1814:	21211504 	addi	r4,r4,-31660
    1818:	0000bfc0 	call	bfc <showError>
    181c:	10803fcc 	andi	r2,r2,255
    1820:	e0bff115 	stw	r2,-60(fp)
    1824:	00000f06 	br	1864 <hdderive+0x6c8>
		else
			hd_print_node(chain, newextkey, p2pkh_address);
    1828:	d0a00117 	ldw	r2,-32764(gp)
    182c:	e0ffe217 	ldw	r3,-120(fp)
    1830:	e1bfef17 	ldw	r6,-68(fp)
    1834:	180b883a 	mov	r5,r3
    1838:	1009883a 	mov	r4,r2
    183c:	0004b300 	call	4b30 <hd_print_node>
			hd_save_node(chain, newextkey, keymap);
    1840:	d0a00117 	ldw	r2,-32764(gp)
    1844:	e0ffe217 	ldw	r3,-120(fp)
    1848:	e1bff017 	ldw	r6,-64(fp)
    184c:	180b883a 	mov	r5,r3
    1850:	1009883a 	mov	r4,r2
    1854:	0000e7c0 	call	e7c <hd_save_node>
    1858:	00000106 	br	1860 <hdderive+0x6c4>
			posanum = i+1;
		}
	}

	if (end > -1 && from <= to) {
		for (uint64_t i = from; i <= to; i++) {
    185c:	0001883a 	nop
			return showError("Deriving child key failed\n");
		else
			hd_print_node(chain, newextkey, p2pkh_address);
			hd_save_node(chain, newextkey, keymap);
	}
	return 0;
    1860:	e03ff115 	stw	zero,-60(fp)
    1864:	e6fff217 	ldw	sp,-56(fp)
    1868:	e0bff117 	ldw	r2,-60(fp)
}
    186c:	e6fff804 	addi	sp,fp,-32
    1870:	dfc00917 	ldw	ra,36(sp)
    1874:	df000817 	ldw	fp,32(sp)
    1878:	ddc00717 	ldw	r23,28(sp)
    187c:	dd800617 	ldw	r22,24(sp)
    1880:	dd400517 	ldw	r21,20(sp)
    1884:	dd000417 	ldw	r20,16(sp)
    1888:	dcc00317 	ldw	r19,12(sp)
    188c:	dc800217 	ldw	r18,8(sp)
    1890:	dc400117 	ldw	r17,4(sp)
    1894:	dc000017 	ldw	r16,0(sp)
    1898:	dec00a04 	addi	sp,sp,40
    189c:	f800283a 	ret

000018a0 <parseData>:


char **parseData(char *str)
{
    18a0:	defff904 	addi	sp,sp,-28
    18a4:	dfc00615 	stw	ra,24(sp)
    18a8:	df000515 	stw	fp,20(sp)
    18ac:	df000504 	addi	fp,sp,20
    18b0:	e13fff15 	stw	r4,-4(fp)
	char ** res  = NULL;
    18b4:	e03ffb15 	stw	zero,-20(fp)
	char *  p    = strtok (str, ":");
    18b8:	014001b4 	movhi	r5,6
    18bc:	29611c04 	addi	r5,r5,-31632
    18c0:	e13fff17 	ldw	r4,-4(fp)
    18c4:	004718c0 	call	4718c <strtok>
    18c8:	e0bffc15 	stw	r2,-16(fp)
	int n_spaces = 0, i;
    18cc:	e03ffd15 	stw	zero,-12(fp)

	/* split string and append tokens to 'res' */
	while (p) {
    18d0:	00001e06 	br	194c <parseData+0xac>
	  res = realloc (res, sizeof (char*) * ++n_spaces);
    18d4:	e0bffd17 	ldw	r2,-12(fp)
    18d8:	10800044 	addi	r2,r2,1
    18dc:	e0bffd15 	stw	r2,-12(fp)
    18e0:	e0bffd17 	ldw	r2,-12(fp)
    18e4:	1085883a 	add	r2,r2,r2
    18e8:	1085883a 	add	r2,r2,r2
    18ec:	100b883a 	mov	r5,r2
    18f0:	e13ffb17 	ldw	r4,-20(fp)
    18f4:	00462400 	call	46240 <realloc>
    18f8:	e0bffb15 	stw	r2,-20(fp)

	  if (res == NULL)
    18fc:	e0bffb17 	ldw	r2,-20(fp)
    1900:	1000021e 	bne	r2,zero,190c <parseData+0x6c>
	    exit (-1); /* memory allocation failed */
    1904:	013fffc4 	movi	r4,-1
    1908:	00451a40 	call	451a4 <exit>

	  res[n_spaces-1] = p;
    190c:	e0fffd17 	ldw	r3,-12(fp)
    1910:	00900034 	movhi	r2,16384
    1914:	10bfffc4 	addi	r2,r2,-1
    1918:	1885883a 	add	r2,r3,r2
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1007883a 	mov	r3,r2
    1928:	e0bffb17 	ldw	r2,-20(fp)
    192c:	10c5883a 	add	r2,r2,r3
    1930:	e0fffc17 	ldw	r3,-16(fp)
    1934:	10c00015 	stw	r3,0(r2)

	  p = strtok (NULL, ":");
    1938:	014001b4 	movhi	r5,6
    193c:	29611c04 	addi	r5,r5,-31632
    1940:	0009883a 	mov	r4,zero
    1944:	004718c0 	call	4718c <strtok>
    1948:	e0bffc15 	stw	r2,-16(fp)
	char ** res  = NULL;
	char *  p    = strtok (str, ":");
	int n_spaces = 0, i;

	/* split string and append tokens to 'res' */
	while (p) {
    194c:	e0bffc17 	ldw	r2,-16(fp)
    1950:	103fe01e 	bne	r2,zero,18d4 <__alt_mem_epcs_flash_controller+0xfdff08d4>

	  p = strtok (NULL, ":");
	}

	/* realloc one extra element for the last NULL */
	res = realloc (res, sizeof (char*) * (n_spaces+1));
    1954:	e0bffd17 	ldw	r2,-12(fp)
    1958:	10800044 	addi	r2,r2,1
    195c:	1085883a 	add	r2,r2,r2
    1960:	1085883a 	add	r2,r2,r2
    1964:	100b883a 	mov	r5,r2
    1968:	e13ffb17 	ldw	r4,-20(fp)
    196c:	00462400 	call	46240 <realloc>
    1970:	e0bffb15 	stw	r2,-20(fp)
	res[n_spaces] = 0;
    1974:	e0bffd17 	ldw	r2,-12(fp)
    1978:	1085883a 	add	r2,r2,r2
    197c:	1085883a 	add	r2,r2,r2
    1980:	1007883a 	mov	r3,r2
    1984:	e0bffb17 	ldw	r2,-20(fp)
    1988:	10c5883a 	add	r2,r2,r3
    198c:	10000015 	stw	zero,0(r2)

	/* print the result */
	for (i = 0; i < (n_spaces+1); ++i)
    1990:	e03ffe15 	stw	zero,-8(fp)
    1994:	00000f06 	br	19d4 <parseData+0x134>
	  printf ("res[%d] = %s\n", i, res[i]);
    1998:	e0bffe17 	ldw	r2,-8(fp)
    199c:	1085883a 	add	r2,r2,r2
    19a0:	1085883a 	add	r2,r2,r2
    19a4:	1007883a 	mov	r3,r2
    19a8:	e0bffb17 	ldw	r2,-20(fp)
    19ac:	10c5883a 	add	r2,r2,r3
    19b0:	10800017 	ldw	r2,0(r2)
    19b4:	100d883a 	mov	r6,r2
    19b8:	e17ffe17 	ldw	r5,-8(fp)
    19bc:	010001b4 	movhi	r4,6
    19c0:	21211d04 	addi	r4,r4,-31628
    19c4:	00460940 	call	46094 <printf>
	/* realloc one extra element for the last NULL */
	res = realloc (res, sizeof (char*) * (n_spaces+1));
	res[n_spaces] = 0;

	/* print the result */
	for (i = 0; i < (n_spaces+1); ++i)
    19c8:	e0bffe17 	ldw	r2,-8(fp)
    19cc:	10800044 	addi	r2,r2,1
    19d0:	e0bffe15 	stw	r2,-8(fp)
    19d4:	e0bffd17 	ldw	r2,-12(fp)
    19d8:	10800044 	addi	r2,r2,1
    19dc:	e0fffe17 	ldw	r3,-8(fp)
    19e0:	18bfed16 	blt	r3,r2,1998 <__alt_mem_epcs_flash_controller+0xfdff0998>
	  printf ("res[%d] = %s\n", i, res[i]);

	return res;
    19e4:	e0bffb17 	ldw	r2,-20(fp)
//	/* free the memory allocated */
//
//	free (res);
}
    19e8:	e037883a 	mov	sp,fp
    19ec:	dfc00117 	ldw	ra,4(sp)
    19f0:	df000017 	ldw	fp,0(sp)
    19f4:	dec00204 	addi	sp,sp,8
    19f8:	f800283a 	ret

000019fc <main>:


int main()
{
    19fc:	defff604 	addi	sp,sp,-40
    1a00:	dfc00915 	stw	ra,36(sp)
    1a04:	df000815 	stw	fp,32(sp)
    1a08:	ddc00715 	stw	r23,28(sp)
    1a0c:	dd800615 	stw	r22,24(sp)
    1a10:	dd400515 	stw	r21,20(sp)
    1a14:	dd000415 	stw	r20,16(sp)
    1a18:	dcc00315 	stw	r19,12(sp)
    1a1c:	dc800215 	stw	r18,8(sp)
    1a20:	dc400115 	stw	r17,4(sp)
    1a24:	dc000015 	stw	r16,0(sp)
    1a28:	df000804 	addi	fp,sp,32
    1a2c:	023ffc34 	movhi	r8,65520
    1a30:	423de304 	addi	r8,r8,-2164
    1a34:	da37883a 	add	sp,sp,r8
	/* start ECC context */
	printf("Setting up...\n");
    1a38:	010001b4 	movhi	r4,6
    1a3c:	21212104 	addi	r4,r4,-31612
    1a40:	00461b00 	call	461b0 <puts>
	btc_ecc_start();
    1a44:	0005b900 	call	5b90 <btc_ecc_start>
	printf("Done!\n");
    1a48:	010001b4 	movhi	r4,6
    1a4c:	21212504 	addi	r4,r4,-31596
    1a50:	00461b00 	call	461b0 <puts>

    initialize();
    1a54:	0000bbc0 	call	bbc <initialize>

    //Create Hash Table
	map_t keymap;
	keymap = hashmap_new();
    1a58:	00002900 	call	290 <hashmap_new>
    1a5c:	00fffc34 	movhi	r3,65520
    1a60:	18fddc04 	addi	r3,r3,-2192
    1a64:	1f07883a 	add	r3,r3,fp
    1a68:	18800015 	stw	r2,0(r3)


//	PutStrUart("FPGA Cryptocurreny Wallet\n");

	alt_u8 data[32];
	getRandomBuffer(&(data[0]), 32);
    1a6c:	013ffc34 	movhi	r4,65520
    1a70:	213de604 	addi	r4,r4,-2152
    1a74:	e105883a 	add	r2,fp,r4
    1a78:	01400804 	movi	r5,32
    1a7c:	1009883a 	mov	r4,r2
    1a80:	000217c0 	call	217c <getRandomBuffer>
//	}

//	sprintf(buffer, "Menmonic phrase: %s\n", mnemonic_phrase);
//	PutStrUart((char *)&(buffer[0]));

	alt_u8 count = 0;
    1a84:	00bffc34 	movhi	r2,65520
    1a88:	10bddb04 	addi	r2,r2,-2196
    1a8c:	1705883a 	add	r2,r2,fp
    1a90:	10000005 	stb	zero,0(r2)
	alt_u32 randVal;
	char buf[BUF_SIZE] = {'\0'};
    1a94:	00fffc34 	movhi	r3,65520
    1a98:	18ffee04 	addi	r3,r3,-72
    1a9c:	e0c5883a 	add	r2,fp,r3
    1aa0:	00c00434 	movhi	r3,16
    1aa4:	180d883a 	mov	r6,r3
    1aa8:	000b883a 	mov	r5,zero
    1aac:	1009883a 	mov	r4,r2
    1ab0:	0045f3c0 	call	45f3c <memset>
	char *key;
	char *val;
	char **res;
	const size_t sizeout = 128;
    1ab4:	00802004 	movi	r2,128
    1ab8:	013ffc34 	movhi	r4,65520
    1abc:	213ddd04 	addi	r4,r4,-2188
    1ac0:	2709883a 	add	r4,r4,fp
    1ac4:	20800015 	stw	r2,0(r4)
	char masterkey[sizeout];
    1ac8:	00fffc34 	movhi	r3,65520
    1acc:	18fddd04 	addi	r3,r3,-2188
    1ad0:	1f07883a 	add	r3,r3,fp
    1ad4:	18800017 	ldw	r2,0(r3)
    1ad8:	10bfffc4 	addi	r2,r2,-1
    1adc:	013ffc34 	movhi	r4,65520
    1ae0:	213dde04 	addi	r4,r4,-2184
    1ae4:	2709883a 	add	r4,r4,fp
    1ae8:	20800015 	stw	r2,0(r4)
    1aec:	00fffc34 	movhi	r3,65520
    1af0:	18fddd04 	addi	r3,r3,-2188
    1af4:	1f07883a 	add	r3,r3,fp
    1af8:	18800017 	ldw	r2,0(r3)
    1afc:	e0bff015 	stw	r2,-64(fp)
    1b00:	e03ff115 	stw	zero,-60(fp)
    1b04:	e13ff017 	ldw	r4,-64(fp)
    1b08:	2004d77a 	srli	r2,r4,29
    1b0c:	e0fff117 	ldw	r3,-60(fp)
    1b10:	182e90fa 	slli	r23,r3,3
    1b14:	15eeb03a 	or	r23,r2,r23
    1b18:	e13ff017 	ldw	r4,-64(fp)
    1b1c:	202c90fa 	slli	r22,r4,3
    1b20:	00fffc34 	movhi	r3,65520
    1b24:	18fddd04 	addi	r3,r3,-2188
    1b28:	1f07883a 	add	r3,r3,fp
    1b2c:	18800017 	ldw	r2,0(r3)
    1b30:	e0bff215 	stw	r2,-56(fp)
    1b34:	e03ff315 	stw	zero,-52(fp)
    1b38:	e13ff217 	ldw	r4,-56(fp)
    1b3c:	2004d77a 	srli	r2,r4,29
    1b40:	e0fff317 	ldw	r3,-52(fp)
    1b44:	182a90fa 	slli	r21,r3,3
    1b48:	156ab03a 	or	r21,r2,r21
    1b4c:	e13ff217 	ldw	r4,-56(fp)
    1b50:	202890fa 	slli	r20,r4,3
    1b54:	00fffc34 	movhi	r3,65520
    1b58:	18fddd04 	addi	r3,r3,-2188
    1b5c:	1f07883a 	add	r3,r3,fp
    1b60:	18800017 	ldw	r2,0(r3)
    1b64:	108000c4 	addi	r2,r2,3
    1b68:	1004d0ba 	srli	r2,r2,2
    1b6c:	1085883a 	add	r2,r2,r2
    1b70:	1085883a 	add	r2,r2,r2
    1b74:	d8b7c83a 	sub	sp,sp,r2
    1b78:	d805883a 	mov	r2,sp
    1b7c:	1005883a 	mov	r2,r2
    1b80:	013ffc34 	movhi	r4,65520
    1b84:	213ddf04 	addi	r4,r4,-2180
    1b88:	2709883a 	add	r4,r4,fp
    1b8c:	20800015 	stw	r2,0(r4)
	masterkey[0] = '\0';
    1b90:	00fffc34 	movhi	r3,65520
    1b94:	18fddf04 	addi	r3,r3,-2180
    1b98:	1f07883a 	add	r3,r3,fp
    1b9c:	18800017 	ldw	r2,0(r3)
    1ba0:	10000005 	stb	zero,0(r2)
	char p2pkh_address[sizeout];
    1ba4:	013ffc34 	movhi	r4,65520
    1ba8:	213ddd04 	addi	r4,r4,-2188
    1bac:	2709883a 	add	r4,r4,fp
    1bb0:	20800017 	ldw	r2,0(r4)
    1bb4:	10bfffc4 	addi	r2,r2,-1
    1bb8:	00fffc34 	movhi	r3,65520
    1bbc:	18fde004 	addi	r3,r3,-2176
    1bc0:	1f07883a 	add	r3,r3,fp
    1bc4:	18800015 	stw	r2,0(r3)
    1bc8:	013ffc34 	movhi	r4,65520
    1bcc:	213ddd04 	addi	r4,r4,-2188
    1bd0:	2709883a 	add	r4,r4,fp
    1bd4:	20800017 	ldw	r2,0(r4)
    1bd8:	e0bff415 	stw	r2,-48(fp)
    1bdc:	e03ff515 	stw	zero,-44(fp)
    1be0:	e0fff417 	ldw	r3,-48(fp)
    1be4:	1804d77a 	srli	r2,r3,29
    1be8:	e13ff517 	ldw	r4,-44(fp)
    1bec:	202690fa 	slli	r19,r4,3
    1bf0:	14e6b03a 	or	r19,r2,r19
    1bf4:	e0bff417 	ldw	r2,-48(fp)
    1bf8:	102490fa 	slli	r18,r2,3
    1bfc:	00fffc34 	movhi	r3,65520
    1c00:	18fddd04 	addi	r3,r3,-2188
    1c04:	1f07883a 	add	r3,r3,fp
    1c08:	18800017 	ldw	r2,0(r3)
    1c0c:	e0bff615 	stw	r2,-40(fp)
    1c10:	e03ff715 	stw	zero,-36(fp)
    1c14:	e13ff617 	ldw	r4,-40(fp)
    1c18:	2004d77a 	srli	r2,r4,29
    1c1c:	e0fff717 	ldw	r3,-36(fp)
    1c20:	182290fa 	slli	r17,r3,3
    1c24:	1462b03a 	or	r17,r2,r17
    1c28:	e13ff617 	ldw	r4,-40(fp)
    1c2c:	202090fa 	slli	r16,r4,3
    1c30:	00fffc34 	movhi	r3,65520
    1c34:	18fddd04 	addi	r3,r3,-2188
    1c38:	1f07883a 	add	r3,r3,fp
    1c3c:	18800017 	ldw	r2,0(r3)
    1c40:	108000c4 	addi	r2,r2,3
    1c44:	1004d0ba 	srli	r2,r2,2
    1c48:	1085883a 	add	r2,r2,r2
    1c4c:	1085883a 	add	r2,r2,r2
    1c50:	d8b7c83a 	sub	sp,sp,r2
    1c54:	d805883a 	mov	r2,sp
    1c58:	1005883a 	mov	r2,r2
    1c5c:	013ffc34 	movhi	r4,65520
    1c60:	213de104 	addi	r4,r4,-2172
    1c64:	2709883a 	add	r4,r4,fp
    1c68:	20800015 	stw	r2,0(r4)



    while(1)
    {
    	uartGetLine(&buf);
    1c6c:	00fffc34 	movhi	r3,65520
    1c70:	18ffee04 	addi	r3,r3,-72
    1c74:	e0c5883a 	add	r2,fp,r3
    1c78:	1009883a 	mov	r4,r2
    1c7c:	00022540 	call	2254 <uartGetLine>
    	if (strlen(buf) > 0) {
    1c80:	013ffc34 	movhi	r4,65520
    1c84:	213fee04 	addi	r4,r4,-72
    1c88:	e105883a 	add	r2,fp,r4
    1c8c:	10800003 	ldbu	r2,0(r2)
    1c90:	10803fcc 	andi	r2,r2,255
    1c94:	1080201c 	xori	r2,r2,128
    1c98:	10bfe004 	addi	r2,r2,-128
    1c9c:	1000d826 	beq	r2,zero,2000 <main+0x604>
    		printf("Buf: %s", buf);
    1ca0:	00fffc34 	movhi	r3,65520
    1ca4:	18ffee04 	addi	r3,r3,-72
    1ca8:	e0c5883a 	add	r2,fp,r3
    1cac:	100b883a 	mov	r5,r2
    1cb0:	010001b4 	movhi	r4,6
    1cb4:	21212704 	addi	r4,r4,-31588
    1cb8:	00460940 	call	46094 <printf>
    		res = parseData(buf);
    1cbc:	013ffc34 	movhi	r4,65520
    1cc0:	213fee04 	addi	r4,r4,-72
    1cc4:	e105883a 	add	r2,fp,r4
    1cc8:	1009883a 	mov	r4,r2
    1ccc:	00018a00 	call	18a0 <parseData>
    1cd0:	00fffc34 	movhi	r3,65520
    1cd4:	18fde204 	addi	r3,r3,-2168
    1cd8:	1f07883a 	add	r3,r3,fp
    1cdc:	18800015 	stw	r2,0(r3)
    		key = res[0];
    1ce0:	013ffc34 	movhi	r4,65520
    1ce4:	213de204 	addi	r4,r4,-2168
    1ce8:	2709883a 	add	r4,r4,fp
    1cec:	20800017 	ldw	r2,0(r4)
    1cf0:	10800017 	ldw	r2,0(r2)
    1cf4:	00fffc34 	movhi	r3,65520
    1cf8:	18fde304 	addi	r3,r3,-2164
    1cfc:	1f07883a 	add	r3,r3,fp
    1d00:	18800015 	stw	r2,0(r3)
    		val = res[1];
    1d04:	013ffc34 	movhi	r4,65520
    1d08:	213de204 	addi	r4,r4,-2168
    1d0c:	2709883a 	add	r4,r4,fp
    1d10:	20800017 	ldw	r2,0(r4)
    1d14:	10800117 	ldw	r2,4(r2)
    1d18:	00fffc34 	movhi	r3,65520
    1d1c:	18fde404 	addi	r3,r3,-2160
    1d20:	1f07883a 	add	r3,r3,fp
    1d24:	18800015 	stw	r2,0(r3)
    		/* remove the \n from the end of the string */
    		val[strcspn(val, "\n")] = 0;
    1d28:	014001b4 	movhi	r5,6
    1d2c:	29612904 	addi	r5,r5,-31580
    1d30:	00bffc34 	movhi	r2,65520
    1d34:	10bde404 	addi	r2,r2,-2160
    1d38:	1705883a 	add	r2,r2,fp
    1d3c:	11000017 	ldw	r4,0(r2)
    1d40:	0046ea80 	call	46ea8 <strcspn>
    1d44:	1007883a 	mov	r3,r2
    1d48:	013ffc34 	movhi	r4,65520
    1d4c:	213de404 	addi	r4,r4,-2160
    1d50:	2709883a 	add	r4,r4,fp
    1d54:	20800017 	ldw	r2,0(r4)
    1d58:	10c5883a 	add	r2,r2,r3
    1d5c:	10000005 	stb	zero,0(r2)
//    		printf("%d", strlen(val));

    		if(!strcmp(key, "masterkey")){
    1d60:	014001b4 	movhi	r5,6
    1d64:	29612a04 	addi	r5,r5,-31576
    1d68:	00bffc34 	movhi	r2,65520
    1d6c:	10bde304 	addi	r2,r2,-2164
    1d70:	1705883a 	add	r2,r2,fp
    1d74:	11000017 	ldw	r4,0(r2)
    1d78:	0046d3c0 	call	46d3c <strcmp>
    1d7c:	1000501e 	bne	r2,zero,1ec0 <main+0x4c4>
    			if(masterkey[0] == '\0'){
    1d80:	00fffc34 	movhi	r3,65520
    1d84:	18fddf04 	addi	r3,r3,-2180
    1d88:	1f07883a 	add	r3,r3,fp
    1d8c:	18800017 	ldw	r2,0(r3)
    1d90:	10800003 	ldbu	r2,0(r2)
    1d94:	10803fcc 	andi	r2,r2,255
    1d98:	1080201c 	xori	r2,r2,128
    1d9c:	10bfe004 	addi	r2,r2,-128
    1da0:	10000a1e 	bne	r2,zero,1dcc <main+0x3d0>
    				hdgenmaster(masterkey, sizeout);
    1da4:	013ffc34 	movhi	r4,65520
    1da8:	213ddf04 	addi	r4,r4,-2180
    1dac:	2709883a 	add	r4,r4,fp
    1db0:	20800017 	ldw	r2,0(r4)
    1db4:	00fffc34 	movhi	r3,65520
    1db8:	18fddd04 	addi	r3,r3,-2188
    1dbc:	1f07883a 	add	r3,r3,fp
    1dc0:	19400017 	ldw	r5,0(r3)
    1dc4:	1009883a 	mov	r4,r2
    1dc8:	0000de80 	call	de8 <hdgenmaster>
    			}
//    			printf("keypath: %s\n", val);
    			hdderive(masterkey, val, p2pkh_address, keymap);
    1dcc:	013ffc34 	movhi	r4,65520
    1dd0:	213ddf04 	addi	r4,r4,-2180
    1dd4:	2709883a 	add	r4,r4,fp
    1dd8:	20800017 	ldw	r2,0(r4)
    1ddc:	013ffc34 	movhi	r4,65520
    1de0:	213de104 	addi	r4,r4,-2172
    1de4:	2709883a 	add	r4,r4,fp
    1de8:	20c00017 	ldw	r3,0(r4)
    1dec:	013ffc34 	movhi	r4,65520
    1df0:	213ddc04 	addi	r4,r4,-2192
    1df4:	2709883a 	add	r4,r4,fp
    1df8:	21c00017 	ldw	r7,0(r4)
    1dfc:	180d883a 	mov	r6,r3
    1e00:	00fffc34 	movhi	r3,65520
    1e04:	18fde404 	addi	r3,r3,-2160
    1e08:	1f07883a 	add	r3,r3,fp
    1e0c:	19400017 	ldw	r5,0(r3)
    1e10:	1009883a 	mov	r4,r2
    1e14:	000119c0 	call	119c <hdderive>
    			char* temp;
    			hashmap_get(keymap, p2pkh_address, &temp);
    1e18:	013ffc34 	movhi	r4,65520
    1e1c:	213de104 	addi	r4,r4,-2172
    1e20:	2709883a 	add	r4,r4,fp
    1e24:	20c00017 	ldw	r3,0(r4)
    1e28:	00800434 	movhi	r2,16
    1e2c:	10821304 	addi	r2,r2,2124
    1e30:	013ffc34 	movhi	r4,65520
    1e34:	213ddb04 	addi	r4,r4,-2196
    1e38:	2709883a 	add	r4,r4,fp
    1e3c:	2085883a 	add	r2,r4,r2
    1e40:	100d883a 	mov	r6,r2
    1e44:	180b883a 	mov	r5,r3
    1e48:	00bffc34 	movhi	r2,65520
    1e4c:	10bddc04 	addi	r2,r2,-2192
    1e50:	1705883a 	add	r2,r2,fp
    1e54:	11000017 	ldw	r4,0(r2)
    1e58:	00008180 	call	818 <hashmap_get>
    			printf("PRVKEY FROM HASHMAP: %s\n", temp);
    1e5c:	00800434 	movhi	r2,16
    1e60:	10821304 	addi	r2,r2,2124
    1e64:	00fffc34 	movhi	r3,65520
    1e68:	18fddb04 	addi	r3,r3,-2196
    1e6c:	1f07883a 	add	r3,r3,fp
    1e70:	1885883a 	add	r2,r3,r2
    1e74:	10800017 	ldw	r2,0(r2)
    1e78:	100b883a 	mov	r5,r2
    1e7c:	010001b4 	movhi	r4,6
    1e80:	21212d04 	addi	r4,r4,-31564
    1e84:	00460940 	call	46094 <printf>
    			append(p2pkh_address, '\n');
    1e88:	013ffc34 	movhi	r4,65520
    1e8c:	213de104 	addi	r4,r4,-2172
    1e90:	2709883a 	add	r4,r4,fp
    1e94:	20800017 	ldw	r2,0(r4)
    1e98:	01400284 	movi	r5,10
    1e9c:	1009883a 	mov	r4,r2
    1ea0:	00021ec0 	call	21ec <append>
    			PutStrUart(p2pkh_address);
    1ea4:	00fffc34 	movhi	r3,65520
    1ea8:	18fde104 	addi	r3,r3,-2172
    1eac:	1f07883a 	add	r3,r3,fp
    1eb0:	18800017 	ldw	r2,0(r3)
    1eb4:	1009883a 	mov	r4,r2
    1eb8:	00025780 	call	2578 <PutStrUart>
    1ebc:	00004406 	br	1fd0 <main+0x5d4>
    		}else if(!strcmp(key, "keypath")){
    1ec0:	014001b4 	movhi	r5,6
    1ec4:	29613404 	addi	r5,r5,-31536
    1ec8:	00bffc34 	movhi	r2,65520
    1ecc:	10bde304 	addi	r2,r2,-2164
    1ed0:	1705883a 	add	r2,r2,fp
    1ed4:	11000017 	ldw	r4,0(r2)
    1ed8:	0046d3c0 	call	46d3c <strcmp>
    1edc:	10003c1e 	bne	r2,zero,1fd0 <main+0x5d4>
    			hdderive(masterkey, val, p2pkh_address, keymap);
    1ee0:	00fffc34 	movhi	r3,65520
    1ee4:	18fddf04 	addi	r3,r3,-2180
    1ee8:	1f07883a 	add	r3,r3,fp
    1eec:	18800017 	ldw	r2,0(r3)
    1ef0:	013ffc34 	movhi	r4,65520
    1ef4:	213de104 	addi	r4,r4,-2172
    1ef8:	2709883a 	add	r4,r4,fp
    1efc:	20c00017 	ldw	r3,0(r4)
    1f00:	013ffc34 	movhi	r4,65520
    1f04:	213ddc04 	addi	r4,r4,-2192
    1f08:	2709883a 	add	r4,r4,fp
    1f0c:	21c00017 	ldw	r7,0(r4)
    1f10:	180d883a 	mov	r6,r3
    1f14:	00fffc34 	movhi	r3,65520
    1f18:	18fde404 	addi	r3,r3,-2160
    1f1c:	1f07883a 	add	r3,r3,fp
    1f20:	19400017 	ldw	r5,0(r3)
    1f24:	1009883a 	mov	r4,r2
    1f28:	000119c0 	call	119c <hdderive>
    			char* temp;
				hashmap_get(keymap, p2pkh_address, &temp);
    1f2c:	013ffc34 	movhi	r4,65520
    1f30:	213de104 	addi	r4,r4,-2172
    1f34:	2709883a 	add	r4,r4,fp
    1f38:	20c00017 	ldw	r3,0(r4)
    1f3c:	00800434 	movhi	r2,16
    1f40:	10821404 	addi	r2,r2,2128
    1f44:	013ffc34 	movhi	r4,65520
    1f48:	213ddb04 	addi	r4,r4,-2196
    1f4c:	2709883a 	add	r4,r4,fp
    1f50:	2085883a 	add	r2,r4,r2
    1f54:	100d883a 	mov	r6,r2
    1f58:	180b883a 	mov	r5,r3
    1f5c:	00bffc34 	movhi	r2,65520
    1f60:	10bddc04 	addi	r2,r2,-2192
    1f64:	1705883a 	add	r2,r2,fp
    1f68:	11000017 	ldw	r4,0(r2)
    1f6c:	00008180 	call	818 <hashmap_get>
				printf("PRVKEY FROM HASHMAP: %s\n", temp);
    1f70:	00800434 	movhi	r2,16
    1f74:	10821404 	addi	r2,r2,2128
    1f78:	00fffc34 	movhi	r3,65520
    1f7c:	18fddb04 	addi	r3,r3,-2196
    1f80:	1f07883a 	add	r3,r3,fp
    1f84:	1885883a 	add	r2,r3,r2
    1f88:	10800017 	ldw	r2,0(r2)
    1f8c:	100b883a 	mov	r5,r2
    1f90:	010001b4 	movhi	r4,6
    1f94:	21212d04 	addi	r4,r4,-31564
    1f98:	00460940 	call	46094 <printf>
    			append(p2pkh_address, '\n');
    1f9c:	013ffc34 	movhi	r4,65520
    1fa0:	213de104 	addi	r4,r4,-2172
    1fa4:	2709883a 	add	r4,r4,fp
    1fa8:	20800017 	ldw	r2,0(r4)
    1fac:	01400284 	movi	r5,10
    1fb0:	1009883a 	mov	r4,r2
    1fb4:	00021ec0 	call	21ec <append>
    			PutStrUart(p2pkh_address);
    1fb8:	00fffc34 	movhi	r3,65520
    1fbc:	18fde104 	addi	r3,r3,-2172
    1fc0:	1f07883a 	add	r3,r3,fp
    1fc4:	18800017 	ldw	r2,0(r3)
    1fc8:	1009883a 	mov	r4,r2
    1fcc:	00025780 	call	2578 <PutStrUart>
//    			printf("derive FOLLOWING HD child node: %s\n", val);
//    			PutStrUart("FOLLOWING Address\n");
    		}

    		/* free the memory allocated */
    		free(res);
    1fd0:	00bffc34 	movhi	r2,65520
    1fd4:	10bde204 	addi	r2,r2,-2168
    1fd8:	1705883a 	add	r2,r2,fp
    1fdc:	11000017 	ldw	r4,0(r2)
    1fe0:	00453fc0 	call	453fc <free>
    		memset(buf, 0, BUF_SIZE);
    1fe4:	00fffc34 	movhi	r3,65520
    1fe8:	18ffee04 	addi	r3,r3,-72
    1fec:	e0c5883a 	add	r2,fp,r3
    1ff0:	01800434 	movhi	r6,16
    1ff4:	000b883a 	mov	r5,zero
    1ff8:	1009883a 	mov	r4,r2
    1ffc:	0045f3c0 	call	45f3c <memset>
//    		memset(masterkey, 0, strlen(masterkey));
    	}

		count++;
    2000:	013ffc34 	movhi	r4,65520
    2004:	213ddb04 	addi	r4,r4,-2196
    2008:	2709883a 	add	r4,r4,fp
    200c:	20800003 	ldbu	r2,0(r4)
    2010:	10800044 	addi	r2,r2,1
    2014:	00fffc34 	movhi	r3,65520
    2018:	18fddb04 	addi	r3,r3,-2196
    201c:	1f07883a 	add	r3,r3,fp
    2020:	18800005 	stb	r2,0(r3)
		if ((count % 1000000000) == 0)
    2024:	013ffc34 	movhi	r4,65520
    2028:	213ddb04 	addi	r4,r4,-2196
    202c:	2709883a 	add	r4,r4,fp
    2030:	20800003 	ldbu	r2,0(r4)
    2034:	014ee6f4 	movhi	r5,15259
    2038:	29728004 	addi	r5,r5,-13824
    203c:	1009883a 	mov	r4,r2
    2040:	0042a240 	call	42a24 <__modsi3>
    2044:	10000d1e 	bne	r2,zero,207c <main+0x680>
		{
	    	randVal = u32getRandom();
    2048:	00021140 	call	2114 <u32getRandom>
    204c:	00fffc34 	movhi	r3,65520
    2050:	18fde504 	addi	r3,r3,-2156
    2054:	1f07883a 	add	r3,r3,fp
    2058:	18800015 	stw	r2,0(r3)
	    	IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, randVal & 0xFF);
    205c:	013ffc34 	movhi	r4,65520
    2060:	213de504 	addi	r4,r4,-2156
    2064:	2709883a 	add	r4,r4,fp
    2068:	20800017 	ldw	r2,0(r4)
    206c:	10c03fcc 	andi	r3,r2,255
    2070:	00808074 	movhi	r2,513
    2074:	10881404 	addi	r2,r2,8272
    2078:	10c00035 	stwio	r3,0(r2)
//	    	sprintf(buffer, "Random value: 0x%08x\n", randVal);
//	    	PutStrUart((char *)&(buffer[0]));
		}
		ALT_USLEEP(100);
    207c:	01001904 	movi	r4,100
    2080:	0054d100 	call	54d10 <usleep>
    }
    2084:	003ef906 	br	1c6c <__alt_mem_epcs_flash_controller+0xfdff0c6c>

00002088 <initRandom>:
#include "altera_avalon_pio_regs.h"
#include "sys/alt_sys_wrappers.h"


void initRandom(alt_u32 seed)
{
    2088:	defffd04 	addi	sp,sp,-12
    208c:	dfc00215 	stw	ra,8(sp)
    2090:	df000115 	stw	fp,4(sp)
    2094:	df000104 	addi	fp,sp,4
    2098:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PO_RANDOM_SEED_BASE, seed);
    209c:	e0ffff17 	ldw	r3,-4(fp)
    20a0:	00808074 	movhi	r2,513
    20a4:	10880804 	addi	r2,r2,8224
    20a8:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_PIO_DATA(PO_SYSTEM_CONTROL_BASE, 0x01);
    20ac:	00c00044 	movi	r3,1
    20b0:	00808074 	movhi	r2,513
    20b4:	10880c04 	addi	r2,r2,8240
    20b8:	10c00035 	stwio	r3,0(r2)
	ALT_USLEEP(100);
    20bc:	01001904 	movi	r4,100
    20c0:	0054d100 	call	54d10 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PO_SYSTEM_CONTROL_BASE, 0x00);
    20c4:	0007883a 	mov	r3,zero
    20c8:	00808074 	movhi	r2,513
    20cc:	10880c04 	addi	r2,r2,8240
    20d0:	10c00035 	stwio	r3,0(r2)
}
    20d4:	0001883a 	nop
    20d8:	e037883a 	mov	sp,fp
    20dc:	dfc00117 	ldw	ra,4(sp)
    20e0:	df000017 	ldw	fp,0(sp)
    20e4:	dec00204 	addi	sp,sp,8
    20e8:	f800283a 	ret

000020ec <u08getRandom>:



alt_u8 u08getRandom()
{
    20ec:	deffff04 	addi	sp,sp,-4
    20f0:	df000015 	stw	fp,0(sp)
    20f4:	d839883a 	mov	fp,sp
	return (IORD_ALTERA_AVALON_PIO_DATA(PI_RANDOM_VALUE_BASE) & 0xFF);
    20f8:	00808074 	movhi	r2,513
    20fc:	10881004 	addi	r2,r2,8256
    2100:	10800037 	ldwio	r2,0(r2)
}
    2104:	e037883a 	mov	sp,fp
    2108:	df000017 	ldw	fp,0(sp)
    210c:	dec00104 	addi	sp,sp,4
    2110:	f800283a 	ret

00002114 <u32getRandom>:



alt_u32 u32getRandom()
{
    2114:	defffd04 	addi	sp,sp,-12
    2118:	dfc00215 	stw	ra,8(sp)
    211c:	df000115 	stw	fp,4(sp)
    2120:	dc000015 	stw	r16,0(sp)
    2124:	df000104 	addi	fp,sp,4
	return ((u08getRandom() & 0xFF) | ((u08getRandom() & 0xFF) << 8) | ((u08getRandom() & 0xFF) << 16) | ((alt_u32) (u08getRandom() & 0xFF) << 24));
    2128:	00020ec0 	call	20ec <u08getRandom>
    212c:	14003fcc 	andi	r16,r2,255
    2130:	00020ec0 	call	20ec <u08getRandom>
    2134:	10803fcc 	andi	r2,r2,255
    2138:	1004923a 	slli	r2,r2,8
    213c:	80a0b03a 	or	r16,r16,r2
    2140:	00020ec0 	call	20ec <u08getRandom>
    2144:	10803fcc 	andi	r2,r2,255
    2148:	1004943a 	slli	r2,r2,16
    214c:	8084b03a 	or	r2,r16,r2
    2150:	1021883a 	mov	r16,r2
    2154:	00020ec0 	call	20ec <u08getRandom>
    2158:	10803fcc 	andi	r2,r2,255
    215c:	1004963a 	slli	r2,r2,24
    2160:	8084b03a 	or	r2,r16,r2
}
    2164:	e6ffff04 	addi	sp,fp,-4
    2168:	dfc00217 	ldw	ra,8(sp)
    216c:	df000117 	ldw	fp,4(sp)
    2170:	dc000017 	ldw	r16,0(sp)
    2174:	dec00304 	addi	sp,sp,12
    2178:	f800283a 	ret

0000217c <getRandomBuffer>:



void getRandomBuffer(alt_u8 *buffer, alt_u32 len)
{
    217c:	defff904 	addi	sp,sp,-28
    2180:	dfc00615 	stw	ra,24(sp)
    2184:	df000515 	stw	fp,20(sp)
    2188:	dc000415 	stw	r16,16(sp)
    218c:	df000504 	addi	fp,sp,20
    2190:	e13ffd15 	stw	r4,-12(fp)
    2194:	e17ffe15 	stw	r5,-8(fp)
	alt_u32 r = 0;
    2198:	e03ffc15 	stw	zero,-16(fp)
	for (alt_u32 i = 0; i < len; ++i)
    219c:	e03ffb15 	stw	zero,-20(fp)
    21a0:	00000806 	br	21c4 <getRandomBuffer+0x48>
	{
		buffer[i] = u08getRandom();
    21a4:	e0fffd17 	ldw	r3,-12(fp)
    21a8:	e0bffb17 	ldw	r2,-20(fp)
    21ac:	18a1883a 	add	r16,r3,r2
    21b0:	00020ec0 	call	20ec <u08getRandom>
    21b4:	80800005 	stb	r2,0(r16)


void getRandomBuffer(alt_u8 *buffer, alt_u32 len)
{
	alt_u32 r = 0;
	for (alt_u32 i = 0; i < len; ++i)
    21b8:	e0bffb17 	ldw	r2,-20(fp)
    21bc:	10800044 	addi	r2,r2,1
    21c0:	e0bffb15 	stw	r2,-20(fp)
    21c4:	e0fffb17 	ldw	r3,-20(fp)
    21c8:	e0bffe17 	ldw	r2,-8(fp)
    21cc:	18bff536 	bltu	r3,r2,21a4 <__alt_mem_epcs_flash_controller+0xfdff11a4>
	{
		buffer[i] = u08getRandom();
	}
}
    21d0:	0001883a 	nop
    21d4:	e6ffff04 	addi	sp,fp,-4
    21d8:	dfc00217 	ldw	ra,8(sp)
    21dc:	df000117 	ldw	fp,4(sp)
    21e0:	dc000017 	ldw	r16,0(sp)
    21e4:	dec00304 	addi	sp,sp,12
    21e8:	f800283a 	ret

000021ec <append>:
#include "altera_avalon_uart_regs.h"
#include "altera_avalon_uart.h"
#include "sys/alt_irq.h"

void append(char *s, char c)
{
    21ec:	defffb04 	addi	sp,sp,-20
    21f0:	dfc00415 	stw	ra,16(sp)
    21f4:	df000315 	stw	fp,12(sp)
    21f8:	df000304 	addi	fp,sp,12
    21fc:	e13ffe15 	stw	r4,-8(fp)
    2200:	2805883a 	mov	r2,r5
    2204:	e0bfff05 	stb	r2,-4(fp)
	int len = strlen(s);
    2208:	e13ffe17 	ldw	r4,-8(fp)
    220c:	0046ef40 	call	46ef4 <strlen>
    2210:	e0bffd15 	stw	r2,-12(fp)
	s[len] = c;
    2214:	e0bffd17 	ldw	r2,-12(fp)
    2218:	e0fffe17 	ldw	r3,-8(fp)
    221c:	1885883a 	add	r2,r3,r2
    2220:	e0ffff03 	ldbu	r3,-4(fp)
    2224:	10c00005 	stb	r3,0(r2)
	s[len+1] = '\0';
    2228:	e0bffd17 	ldw	r2,-12(fp)
    222c:	10800044 	addi	r2,r2,1
    2230:	e0fffe17 	ldw	r3,-8(fp)
    2234:	1885883a 	add	r2,r3,r2
    2238:	10000005 	stb	zero,0(r2)
}
    223c:	0001883a 	nop
    2240:	e037883a 	mov	sp,fp
    2244:	dfc00117 	ldw	ra,4(sp)
    2248:	df000017 	ldw	fp,0(sp)
    224c:	dec00204 	addi	sp,sp,8
    2250:	f800283a 	ret

00002254 <uartGetLine>:

void uartGetLine(char *buf) {
    2254:	defffc04 	addi	sp,sp,-16
    2258:	dfc00315 	stw	ra,12(sp)
    225c:	df000215 	stw	fp,8(sp)
    2260:	df000204 	addi	fp,sp,8
    2264:	e13fff15 	stw	r4,-4(fp)
	if (!EmptyUart()) {
    2268:	00024e00 	call	24e0 <EmptyUart>
    226c:	10803fcc 	andi	r2,r2,255
    2270:	10000d1e 	bne	r2,zero,22a8 <uartGetLine+0x54>
		while (1) {
			char c = uartGetChar();
    2274:	00022bc0 	call	22bc <uartGetChar>
    2278:	e0bffe05 	stb	r2,-8(fp)
			if(c != 0){
    227c:	e0bffe07 	ldb	r2,-8(fp)
    2280:	10000426 	beq	r2,zero,2294 <uartGetLine+0x40>
				append(buf, c);
    2284:	e0bffe07 	ldb	r2,-8(fp)
    2288:	100b883a 	mov	r5,r2
    228c:	e13fff17 	ldw	r4,-4(fp)
    2290:	00021ec0 	call	21ec <append>
			}
			if (c == '\n') {
    2294:	e0bffe07 	ldb	r2,-8(fp)
    2298:	10800298 	cmpnei	r2,r2,10
    229c:	10000126 	beq	r2,zero,22a4 <uartGetLine+0x50>
//				append(buf, c);
//				printf("got a new line\n");
//				PutStrUart(buf);
				return;
			}
		}
    22a0:	003ff406 	br	2274 <__alt_mem_epcs_flash_controller+0xfdff1274>
			}
			if (c == '\n') {
//				append(buf, c);
//				printf("got a new line\n");
//				PutStrUart(buf);
				return;
    22a4:	0001883a 	nop
			}
		}
	}
}
    22a8:	e037883a 	mov	sp,fp
    22ac:	dfc00117 	ldw	ra,4(sp)
    22b0:	df000017 	ldw	fp,0(sp)
    22b4:	dec00204 	addi	sp,sp,8
    22b8:	f800283a 	ret

000022bc <uartGetChar>:

char uartGetChar()
{
    22bc:	defffd04 	addi	sp,sp,-12
    22c0:	dfc00215 	stw	ra,8(sp)
    22c4:	df000115 	stw	fp,4(sp)
    22c8:	df000104 	addi	fp,sp,4
	if (!EmptyUart())
    22cc:	00024e00 	call	24e0 <EmptyUart>
    22d0:	10803fcc 	andi	r2,r2,255
    22d4:	1000041e 	bne	r2,zero,22e8 <uartGetChar+0x2c>
	{
		unsigned char c = GetCUart();
    22d8:	000251c0 	call	251c <GetCUart>
    22dc:	e0bfff05 	stb	r2,-4(fp)
//
//		default:
////			printf("%c", c);
////			PutCUart(c);
//		}
		return c;
    22e0:	e0bfff03 	ldbu	r2,-4(fp)
    22e4:	00000106 	br	22ec <uartGetChar+0x30>
	}else{
		return 0;
    22e8:	0005883a 	mov	r2,zero
	}
}
    22ec:	e037883a 	mov	sp,fp
    22f0:	dfc00117 	ldw	ra,4(sp)
    22f4:	df000017 	ldw	fp,0(sp)
    22f8:	dec00204 	addi	sp,sp,8
    22fc:	f800283a 	ret

00002300 <IsrUart>:
unsigned short RxTail = 0;
unsigned char rx_buffer[RX_BUFFER_SIZE];


static void IsrUart(void* context, unsigned int id)
{
    2300:	defffc04 	addi	sp,sp,-16
    2304:	df000315 	stw	fp,12(sp)
    2308:	df000304 	addi	fp,sp,12
    230c:	e13ffe15 	stw	r4,-8(fp)
    2310:	e17fff15 	stw	r5,-4(fp)
	int sr = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
    2314:	00808074 	movhi	r2,513
    2318:	10880204 	addi	r2,r2,8200
    231c:	10800037 	ldwio	r2,0(r2)
    2320:	e0bffd15 	stw	r2,-12(fp)

	if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    2324:	e0bffd17 	ldw	r2,-12(fp)
    2328:	1080200c 	andi	r2,r2,128
    232c:	10001626 	beq	r2,zero,2388 <IsrUart+0x88>
	{
		rx_buffer[RxHead] = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    2330:	d0a8740b 	ldhu	r2,-24112(gp)
    2334:	10ffffcc 	andi	r3,r2,65535
    2338:	00808074 	movhi	r2,513
    233c:	10880004 	addi	r2,r2,8192
    2340:	10800037 	ldwio	r2,0(r2)
    2344:	1009883a 	mov	r4,r2
    2348:	008001b4 	movhi	r2,6
    234c:	108ab504 	addi	r2,r2,10964
    2350:	10c5883a 	add	r2,r2,r3
    2354:	11000005 	stb	r4,0(r2)

		IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE, 0);
    2358:	0007883a 	mov	r3,zero
    235c:	00808074 	movhi	r2,513
    2360:	10880204 	addi	r2,r2,8200
    2364:	10c00035 	stwio	r3,0(r2)

		if (++RxHead > (RX_BUFFER_SIZE - 1))
    2368:	d0a8740b 	ldhu	r2,-24112(gp)
    236c:	10800044 	addi	r2,r2,1
    2370:	d0a8740d 	sth	r2,-24112(gp)
    2374:	d0a8740b 	ldhu	r2,-24112(gp)
    2378:	10bfffcc 	andi	r2,r2,65535
    237c:	10810030 	cmpltui	r2,r2,1024
    2380:	1000011e 	bne	r2,zero,2388 <IsrUart+0x88>
		{
			RxHead = 0;
    2384:	d028740d 	sth	zero,-24112(gp)
		}
	}

	if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    2388:	e0bffd17 	ldw	r2,-12(fp)
    238c:	1080100c 	andi	r2,r2,64
    2390:	10002126 	beq	r2,zero,2418 <IsrUart+0x118>
	{
		if(IORD_ALTERA_AVALON_UART_CONTROL(UART_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK)
    2394:	00808074 	movhi	r2,513
    2398:	10880304 	addi	r2,r2,8204
    239c:	10800037 	ldwio	r2,0(r2)
    23a0:	1080100c 	andi	r2,r2,64
    23a4:	10001c26 	beq	r2,zero,2418 <IsrUart+0x118>
		{
			if (TxTail != TxHead)
    23a8:	d0e8738b 	ldhu	r3,-24114(gp)
    23ac:	d0a8730b 	ldhu	r2,-24116(gp)
    23b0:	18ffffcc 	andi	r3,r3,65535
    23b4:	10bfffcc 	andi	r2,r2,65535
    23b8:	18801326 	beq	r3,r2,2408 <IsrUart+0x108>
			{
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, tx_buffer[TxTail]);
    23bc:	d0a8738b 	ldhu	r2,-24114(gp)
    23c0:	10ffffcc 	andi	r3,r2,65535
    23c4:	008001b4 	movhi	r2,6
    23c8:	108bb504 	addi	r2,r2,11988
    23cc:	10c5883a 	add	r2,r2,r3
    23d0:	10800003 	ldbu	r2,0(r2)
    23d4:	10c03fcc 	andi	r3,r2,255
    23d8:	00808074 	movhi	r2,513
    23dc:	10880104 	addi	r2,r2,8196
    23e0:	10c00035 	stwio	r3,0(r2)

				if (++TxTail > (TX_BUFFER_SIZE - 1))
    23e4:	d0a8738b 	ldhu	r2,-24114(gp)
    23e8:	10800044 	addi	r2,r2,1
    23ec:	d0a8738d 	sth	r2,-24114(gp)
    23f0:	d0a8738b 	ldhu	r2,-24114(gp)
    23f4:	10bfffcc 	andi	r2,r2,65535
    23f8:	10810030 	cmpltui	r2,r2,1024
    23fc:	1000061e 	bne	r2,zero,2418 <IsrUart+0x118>
				{
					TxTail = 0;
    2400:	d028738d 	sth	zero,-24114(gp)
			{
				IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
			}
		}
	}
}
    2404:	00000406 	br	2418 <IsrUart+0x118>
					TxTail = 0;
				}
			}
			else
			{
				IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    2408:	00c02004 	movi	r3,128
    240c:	00808074 	movhi	r2,513
    2410:	10880304 	addi	r2,r2,8204
    2414:	10c00035 	stwio	r3,0(r2)
			}
		}
	}
}
    2418:	0001883a 	nop
    241c:	e037883a 	mov	sp,fp
    2420:	df000017 	ldw	fp,0(sp)
    2424:	dec00104 	addi	sp,sp,4
    2428:	f800283a 	ret

0000242c <initUart>:


void initUart(unsigned int BaudRate)
{
    242c:	defffa04 	addi	sp,sp,-24
    2430:	dfc00515 	stw	ra,20(sp)
    2434:	df000415 	stw	fp,16(sp)
    2438:	df000404 	addi	fp,sp,16
    243c:	e13fff15 	stw	r4,-4(fp)
	int context_uart;
	unsigned int divisor = (ALT_CPU_FREQ/UART_USB_BAUD_RATE) +1;
    2440:	00806cc4 	movi	r2,435
    2444:	e0bffd15 	stw	r2,-12(fp)

	IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, divisor);
    2448:	e0fffd17 	ldw	r3,-12(fp)
    244c:	00808074 	movhi	r2,513
    2450:	10880404 	addi	r2,r2,8208
    2454:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    2458:	00c02004 	movi	r3,128
    245c:	00808074 	movhi	r2,513
    2460:	10880304 	addi	r2,r2,8204
    2464:	10c00035 	stwio	r3,0(r2)


#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ, (alt_isr_func) IsrUart, &context_uart, NULL);
    2468:	e0bffe04 	addi	r2,fp,-8
    246c:	d8000015 	stw	zero,0(sp)
    2470:	100f883a 	mov	r7,r2
    2474:	01800034 	movhi	r6,0
    2478:	3188c004 	addi	r6,r6,8960
    247c:	01400084 	movi	r5,2
    2480:	0009883a 	mov	r4,zero
    2484:	00541740 	call	54174 <alt_ic_isr_register>
	alt_ic_irq_enable (UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ);
    2488:	01400084 	movi	r5,2
    248c:	0009883a 	mov	r4,zero
    2490:	00541c40 	call	541c4 <alt_ic_irq_enable>
#else
	alt_irq_register(UART_IRQ, &context_uart, IsrUart);
	alt_irq_enable(UART_IRQ);
#endif
}
    2494:	0001883a 	nop
    2498:	e037883a 	mov	sp,fp
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	df000017 	ldw	fp,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <closeUart>:



void closeUart()
{
    24ac:	defffe04 	addi	sp,sp,-8
    24b0:	dfc00115 	stw	ra,4(sp)
    24b4:	df000015 	stw	fp,0(sp)
    24b8:	d839883a 	mov	fp,sp
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_irq_disable (UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ);
    24bc:	01400084 	movi	r5,2
    24c0:	0009883a 	mov	r4,zero
    24c4:	005424c0 	call	5424c <alt_ic_irq_disable>

#else
	alt_irq_disable(UART_IRQ);
#endif
}
    24c8:	0001883a 	nop
    24cc:	e037883a 	mov	sp,fp
    24d0:	dfc00117 	ldw	ra,4(sp)
    24d4:	df000017 	ldw	fp,0(sp)
    24d8:	dec00204 	addi	sp,sp,8
    24dc:	f800283a 	ret

000024e0 <EmptyUart>:



unsigned char EmptyUart()
{
    24e0:	deffff04 	addi	sp,sp,-4
    24e4:	df000015 	stw	fp,0(sp)
    24e8:	d839883a 	mov	fp,sp
	if(RxHead == RxTail)
    24ec:	d0e8740b 	ldhu	r3,-24112(gp)
    24f0:	d0a8748b 	ldhu	r2,-24110(gp)
    24f4:	18ffffcc 	andi	r3,r3,65535
    24f8:	10bfffcc 	andi	r2,r2,65535
    24fc:	1880021e 	bne	r3,r2,2508 <EmptyUart+0x28>
	{
		return 1;
    2500:	00800044 	movi	r2,1
    2504:	00000106 	br	250c <EmptyUart+0x2c>
	}
	return 0;
    2508:	0005883a 	mov	r2,zero
}
    250c:	e037883a 	mov	sp,fp
    2510:	df000017 	ldw	fp,0(sp)
    2514:	dec00104 	addi	sp,sp,4
    2518:	f800283a 	ret

0000251c <GetCUart>:



unsigned char GetCUart(void)
{
    251c:	defffe04 	addi	sp,sp,-8
    2520:	df000115 	stw	fp,4(sp)
    2524:	df000104 	addi	fp,sp,4
	unsigned char rxChar;

	/* buffer is empty */
	rxChar = rx_buffer[RxTail];
    2528:	d0a8748b 	ldhu	r2,-24110(gp)
    252c:	10ffffcc 	andi	r3,r2,65535
    2530:	008001b4 	movhi	r2,6
    2534:	108ab504 	addi	r2,r2,10964
    2538:	10c5883a 	add	r2,r2,r3
    253c:	10800003 	ldbu	r2,0(r2)
    2540:	e0bfff05 	stb	r2,-4(fp)

	if (++RxTail > (RX_BUFFER_SIZE - 1))
    2544:	d0a8748b 	ldhu	r2,-24110(gp)
    2548:	10800044 	addi	r2,r2,1
    254c:	d0a8748d 	sth	r2,-24110(gp)
    2550:	d0a8748b 	ldhu	r2,-24110(gp)
    2554:	10bfffcc 	andi	r2,r2,65535
    2558:	10810030 	cmpltui	r2,r2,1024
    255c:	1000011e 	bne	r2,zero,2564 <GetCUart+0x48>
	{
		RxTail = 0;
    2560:	d028748d 	sth	zero,-24110(gp)
	}

	return rxChar;
    2564:	e0bfff03 	ldbu	r2,-4(fp)
}
    2568:	e037883a 	mov	sp,fp
    256c:	df000017 	ldw	fp,0(sp)
    2570:	dec00104 	addi	sp,sp,4
    2574:	f800283a 	ret

00002578 <PutStrUart>:



unsigned char PutStrUart(char *str)
{
    2578:	defffc04 	addi	sp,sp,-16
    257c:	dfc00315 	stw	ra,12(sp)
    2580:	df000215 	stw	fp,8(sp)
    2584:	df000204 	addi	fp,sp,8
    2588:	e13fff15 	stw	r4,-4(fp)
	for(int i = 0; i < strlen(str); ++i)
    258c:	e03ffe15 	stw	zero,-8(fp)
    2590:	00000a06 	br	25bc <PutStrUart+0x44>
	{
		PutCUart(str[i]);
    2594:	e0bffe17 	ldw	r2,-8(fp)
    2598:	e0ffff17 	ldw	r3,-4(fp)
    259c:	1885883a 	add	r2,r3,r2
    25a0:	10800003 	ldbu	r2,0(r2)
    25a4:	10803fcc 	andi	r2,r2,255
    25a8:	1009883a 	mov	r4,r2
    25ac:	00025e80 	call	25e8 <PutCUart>



unsigned char PutStrUart(char *str)
{
	for(int i = 0; i < strlen(str); ++i)
    25b0:	e0bffe17 	ldw	r2,-8(fp)
    25b4:	10800044 	addi	r2,r2,1
    25b8:	e0bffe15 	stw	r2,-8(fp)
    25bc:	e13fff17 	ldw	r4,-4(fp)
    25c0:	0046ef40 	call	46ef4 <strlen>
    25c4:	1007883a 	mov	r3,r2
    25c8:	e0bffe17 	ldw	r2,-8(fp)
    25cc:	10fff136 	bltu	r2,r3,2594 <__alt_mem_epcs_flash_controller+0xfdff1594>
	{
		PutCUart(str[i]);
	}
	return 0;
    25d0:	0005883a 	mov	r2,zero
}
    25d4:	e037883a 	mov	sp,fp
    25d8:	dfc00117 	ldw	ra,4(sp)
    25dc:	df000017 	ldw	fp,0(sp)
    25e0:	dec00204 	addi	sp,sp,8
    25e4:	f800283a 	ret

000025e8 <PutCUart>:



unsigned char PutCUart(unsigned char in_char)
{
    25e8:	defffc04 	addi	sp,sp,-16
    25ec:	df000315 	stw	fp,12(sp)
    25f0:	df000304 	addi	fp,sp,12
    25f4:	2005883a 	mov	r2,r4
    25f8:	e0bfff05 	stb	r2,-4(fp)
	unsigned short size;
	unsigned int z = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
    25fc:	00808074 	movhi	r2,513
    2600:	10880204 	addi	r2,r2,8200
    2604:	10800037 	ldwio	r2,0(r2)
    2608:	1080100c 	andi	r2,r2,64
    260c:	e0bffe15 	stw	r2,-8(fp)

	if ((TxHead == TxTail) && z)
    2610:	d0e8730b 	ldhu	r3,-24116(gp)
    2614:	d0a8738b 	ldhu	r2,-24114(gp)
    2618:	18ffffcc 	andi	r3,r3,65535
    261c:	10bfffcc 	andi	r2,r2,65535
    2620:	1880071e 	bne	r3,r2,2640 <PutCUart+0x58>
    2624:	e0bffe17 	ldw	r2,-8(fp)
    2628:	10000526 	beq	r2,zero,2640 <PutCUart+0x58>
	{
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, in_char);
    262c:	e0ffff03 	ldbu	r3,-4(fp)
    2630:	00808074 	movhi	r2,513
    2634:	10880104 	addi	r2,r2,8196
    2638:	10c00035 	stwio	r3,0(r2)
    263c:	00002c06 	br	26f0 <PutCUart+0x108>
	}
	else
	{
		if (TxHead >= TxTail)
    2640:	d0e8730b 	ldhu	r3,-24116(gp)
    2644:	d0a8738b 	ldhu	r2,-24114(gp)
    2648:	18ffffcc 	andi	r3,r3,65535
    264c:	10bfffcc 	andi	r2,r2,65535
    2650:	18800536 	bltu	r3,r2,2668 <PutCUart+0x80>
		{
			size = TxHead - TxTail;
    2654:	d0e8730b 	ldhu	r3,-24116(gp)
    2658:	d0a8738b 	ldhu	r2,-24114(gp)
    265c:	1885c83a 	sub	r2,r3,r2
    2660:	e0bffd0d 	sth	r2,-12(fp)
    2664:	00000506 	br	267c <PutCUart+0x94>
		}

		else
		{
			size = ((TX_BUFFER_SIZE - 1) - TxTail) + TxHead;
    2668:	d0e8730b 	ldhu	r3,-24116(gp)
    266c:	d0a8738b 	ldhu	r2,-24114(gp)
    2670:	1885c83a 	sub	r2,r3,r2
    2674:	1080ffc4 	addi	r2,r2,1023
    2678:	e0bffd0d 	sth	r2,-12(fp)
		}

		if (size > (TX_BUFFER_SIZE - 3))
    267c:	e0bffd0b 	ldhu	r2,-12(fp)
    2680:	1080ffb0 	cmpltui	r2,r2,1022
    2684:	1000021e 	bne	r2,zero,2690 <PutCUart+0xa8>
		{
			return (-1);
    2688:	00bfffc4 	movi	r2,-1
    268c:	00001906 	br	26f4 <PutCUart+0x10c>
		}

		tx_buffer[TxHead] = in_char;
    2690:	d0a8730b 	ldhu	r2,-24116(gp)
    2694:	10ffffcc 	andi	r3,r2,65535
    2698:	008001b4 	movhi	r2,6
    269c:	108bb504 	addi	r2,r2,11988
    26a0:	10c5883a 	add	r2,r2,r3
    26a4:	e0ffff03 	ldbu	r3,-4(fp)
    26a8:	10c00005 	stb	r3,0(r2)

		if (++TxHead > (TX_BUFFER_SIZE - 1))
    26ac:	d0a8730b 	ldhu	r2,-24116(gp)
    26b0:	10800044 	addi	r2,r2,1
    26b4:	d0a8730d 	sth	r2,-24116(gp)
    26b8:	d0a8730b 	ldhu	r2,-24116(gp)
    26bc:	10bfffcc 	andi	r2,r2,65535
    26c0:	10810030 	cmpltui	r2,r2,1024
    26c4:	1000011e 	bne	r2,zero,26cc <PutCUart+0xe4>
		{
			TxHead = 0;
    26c8:	d028730d 	sth	zero,-24116(gp)
		}

		z = IORD_ALTERA_AVALON_UART_CONTROL(UART_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    26cc:	00808074 	movhi	r2,513
    26d0:	10880304 	addi	r2,r2,8204
    26d4:	10800037 	ldwio	r2,0(r2)
    26d8:	10801014 	ori	r2,r2,64
    26dc:	e0bffe15 	stw	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, z);
    26e0:	e0fffe17 	ldw	r3,-8(fp)
    26e4:	00808074 	movhi	r2,513
    26e8:	10880304 	addi	r2,r2,8204
    26ec:	10c00035 	stwio	r3,0(r2)
	}
	return(1);
    26f0:	00800044 	movi	r2,1
}
    26f4:	e037883a 	mov	sp,fp
    26f8:	df000017 	ldw	fp,0(sp)
    26fc:	dec00104 	addi	sp,sp,4
    2700:	f800283a 	ret

00002704 <btc_base58_decode>:
    -1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46,
    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, -1, -1, -1, -1, -1,
};

int btc_base58_decode(void* bin, size_t* binszp, const char* b58)
{
    2704:	deffe304 	addi	sp,sp,-116
    2708:	dfc01c15 	stw	ra,112(sp)
    270c:	df001b15 	stw	fp,108(sp)
    2710:	ddc01a15 	stw	r23,104(sp)
    2714:	dd801915 	stw	r22,100(sp)
    2718:	dd401815 	stw	r21,96(sp)
    271c:	dd001715 	stw	r20,92(sp)
    2720:	dcc01615 	stw	r19,88(sp)
    2724:	dc801515 	stw	r18,84(sp)
    2728:	dc401415 	stw	r17,80(sp)
    272c:	dc001315 	stw	r16,76(sp)
    2730:	df001b04 	addi	fp,sp,108
    2734:	e13ff415 	stw	r4,-48(fp)
    2738:	e17ff515 	stw	r5,-44(fp)
    273c:	e1bff615 	stw	r6,-40(fp)
    2740:	d809883a 	mov	r4,sp
    2744:	e13ff715 	stw	r4,-36(fp)
    size_t binsz = *binszp;
    2748:	e13ff517 	ldw	r4,-44(fp)
    274c:	21000017 	ldw	r4,0(r4)
    2750:	e13fea15 	stw	r4,-88(fp)
    const unsigned char* b58u = (const void*)b58;
    2754:	e13ff617 	ldw	r4,-40(fp)
    2758:	e13feb15 	stw	r4,-84(fp)
    unsigned char* binu = bin;
    275c:	e13ff417 	ldw	r4,-48(fp)
    2760:	e13fe515 	stw	r4,-108(fp)
    size_t outisz = (binsz + 3) / 4;
    2764:	e13fea17 	ldw	r4,-88(fp)
    2768:	210000c4 	addi	r4,r4,3
    276c:	2008d0ba 	srli	r4,r4,2
    2770:	e13fec15 	stw	r4,-80(fp)
    uint32_t outi[outisz];
    2774:	e13fec17 	ldw	r4,-80(fp)
    2778:	200b883a 	mov	r5,r4
    277c:	297fffc4 	addi	r5,r5,-1
    2780:	e17fed15 	stw	r5,-76(fp)
    2784:	2017883a 	mov	r11,r4
    2788:	0019883a 	mov	r12,zero
    278c:	580ad6fa 	srli	r5,r11,27
    2790:	6010917a 	slli	r8,r12,5
    2794:	2a10b03a 	or	r8,r5,r8
    2798:	580e917a 	slli	r7,r11,5
    279c:	2013883a 	mov	r9,r4
    27a0:	0015883a 	mov	r10,zero
    27a4:	480ad6fa 	srli	r5,r9,27
    27a8:	5006917a 	slli	r3,r10,5
    27ac:	28c6b03a 	or	r3,r5,r3
    27b0:	4804917a 	slli	r2,r9,5
    27b4:	2105883a 	add	r2,r4,r4
    27b8:	1085883a 	add	r2,r2,r2
    27bc:	108000c4 	addi	r2,r2,3
    27c0:	108000c4 	addi	r2,r2,3
    27c4:	1004d0ba 	srli	r2,r2,2
    27c8:	1085883a 	add	r2,r2,r2
    27cc:	1085883a 	add	r2,r2,r2
    27d0:	d8b7c83a 	sub	sp,sp,r2
    27d4:	d805883a 	mov	r2,sp
    27d8:	108000c4 	addi	r2,r2,3
    27dc:	1004d0ba 	srli	r2,r2,2
    27e0:	1085883a 	add	r2,r2,r2
    27e4:	1085883a 	add	r2,r2,r2
    27e8:	e0bfee15 	stw	r2,-72(fp)
    uint64_t t;
    uint32_t c;
    size_t i, j;
    uint8_t bytesleft = binsz % 4;
    27ec:	e0bfea17 	ldw	r2,-88(fp)
    27f0:	108000cc 	andi	r2,r2,3
    27f4:	e0bfef05 	stb	r2,-68(fp)
    uint32_t zeromask = bytesleft ? (0xffffffff << (bytesleft * 8)) : 0;
    27f8:	e0bfef03 	ldbu	r2,-68(fp)
    27fc:	10000526 	beq	r2,zero,2814 <btc_base58_decode+0x110>
    2800:	e0bfef03 	ldbu	r2,-68(fp)
    2804:	100490fa 	slli	r2,r2,3
    2808:	00ffffc4 	movi	r3,-1
    280c:	1884983a 	sll	r2,r3,r2
    2810:	00000106 	br	2818 <btc_base58_decode+0x114>
    2814:	0005883a 	mov	r2,zero
    2818:	e0bff015 	stw	r2,-64(fp)
    unsigned zerocount = 0;
    281c:	e03fe915 	stw	zero,-92(fp)
    size_t b58sz;

    b58sz = strlen(b58);
    2820:	e13ff617 	ldw	r4,-40(fp)
    2824:	0046ef40 	call	46ef4 <strlen>
    2828:	e0bff115 	stw	r2,-60(fp)

    memset(outi, 0, outisz * sizeof(*outi));
    282c:	e0ffee17 	ldw	r3,-72(fp)
    2830:	e0bfec17 	ldw	r2,-80(fp)
    2834:	1085883a 	add	r2,r2,r2
    2838:	1085883a 	add	r2,r2,r2
    283c:	100d883a 	mov	r6,r2
    2840:	000b883a 	mov	r5,zero
    2844:	1809883a 	mov	r4,r3
    2848:	0045f3c0 	call	45f3c <memset>

    // Leading zeros, just count
    for (i = 0; i < b58sz && !b58digits_map[b58u[i]]; ++i) {
    284c:	e03fe715 	stw	zero,-100(fp)
    2850:	00000606 	br	286c <btc_base58_decode+0x168>
        ++zerocount;
    2854:	e0bfe917 	ldw	r2,-92(fp)
    2858:	10800044 	addi	r2,r2,1
    285c:	e0bfe915 	stw	r2,-92(fp)
    b58sz = strlen(b58);

    memset(outi, 0, outisz * sizeof(*outi));

    // Leading zeros, just count
    for (i = 0; i < b58sz && !b58digits_map[b58u[i]]; ++i) {
    2860:	e0bfe717 	ldw	r2,-100(fp)
    2864:	10800044 	addi	r2,r2,1
    2868:	e0bfe715 	stw	r2,-100(fp)
    286c:	e0ffe717 	ldw	r3,-100(fp)
    2870:	e0bff117 	ldw	r2,-60(fp)
    2874:	1880832e 	bgeu	r3,r2,2a84 <btc_base58_decode+0x380>
    2878:	e0ffeb17 	ldw	r3,-84(fp)
    287c:	e0bfe717 	ldw	r2,-100(fp)
    2880:	1885883a 	add	r2,r3,r2
    2884:	10800003 	ldbu	r2,0(r2)
    2888:	10c03fcc 	andi	r3,r2,255
    288c:	008001b4 	movhi	r2,6
    2890:	10a13a04 	addi	r2,r2,-31512
    2894:	10c5883a 	add	r2,r2,r3
    2898:	10800003 	ldbu	r2,0(r2)
    289c:	10803fcc 	andi	r2,r2,255
    28a0:	1080201c 	xori	r2,r2,128
    28a4:	10bfe004 	addi	r2,r2,-128
    28a8:	103fea26 	beq	r2,zero,2854 <__alt_mem_epcs_flash_controller+0xfdff1854>
        ++zerocount;
    }

    for (; i < b58sz; ++i) {
    28ac:	00007506 	br	2a84 <btc_base58_decode+0x380>
        if (b58u[i] & 0x80) {
    28b0:	e0ffeb17 	ldw	r3,-84(fp)
    28b4:	e0bfe717 	ldw	r2,-100(fp)
    28b8:	1885883a 	add	r2,r3,r2
    28bc:	10800003 	ldbu	r2,0(r2)
    28c0:	10803fcc 	andi	r2,r2,255
    28c4:	1080201c 	xori	r2,r2,128
    28c8:	10bfe004 	addi	r2,r2,-128
    28cc:	1000020e 	bge	r2,zero,28d8 <btc_base58_decode+0x1d4>
            // High-bit set on invalid digit
            return false;
    28d0:	0005883a 	mov	r2,zero
    28d4:	0000e906 	br	2c7c <btc_base58_decode+0x578>
        }
        if (b58digits_map[b58u[i]] == -1) {
    28d8:	e0ffeb17 	ldw	r3,-84(fp)
    28dc:	e0bfe717 	ldw	r2,-100(fp)
    28e0:	1885883a 	add	r2,r3,r2
    28e4:	10800003 	ldbu	r2,0(r2)
    28e8:	10c03fcc 	andi	r3,r2,255
    28ec:	008001b4 	movhi	r2,6
    28f0:	10a13a04 	addi	r2,r2,-31512
    28f4:	10c5883a 	add	r2,r2,r3
    28f8:	10800003 	ldbu	r2,0(r2)
    28fc:	10803fcc 	andi	r2,r2,255
    2900:	1080201c 	xori	r2,r2,128
    2904:	10bfe004 	addi	r2,r2,-128
    2908:	10bfffd8 	cmpnei	r2,r2,-1
    290c:	1000021e 	bne	r2,zero,2918 <btc_base58_decode+0x214>
            // Invalid base58 digit
            return false;
    2910:	0005883a 	mov	r2,zero
    2914:	0000d906 	br	2c7c <btc_base58_decode+0x578>
        }
        c = (unsigned)b58digits_map[b58u[i]];
    2918:	e0ffeb17 	ldw	r3,-84(fp)
    291c:	e0bfe717 	ldw	r2,-100(fp)
    2920:	1885883a 	add	r2,r3,r2
    2924:	10800003 	ldbu	r2,0(r2)
    2928:	10c03fcc 	andi	r3,r2,255
    292c:	008001b4 	movhi	r2,6
    2930:	10a13a04 	addi	r2,r2,-31512
    2934:	10c5883a 	add	r2,r2,r3
    2938:	10800003 	ldbu	r2,0(r2)
    293c:	10803fcc 	andi	r2,r2,255
    2940:	1080201c 	xori	r2,r2,128
    2944:	10bfe004 	addi	r2,r2,-128
    2948:	e0bfe615 	stw	r2,-104(fp)
        for (j = outisz; j--;) {
    294c:	e0bfec17 	ldw	r2,-80(fp)
    2950:	e0bfe815 	stw	r2,-96(fp)
    2954:	00002906 	br	29fc <btc_base58_decode+0x2f8>
            t = ((uint64_t)outi[j]) * 58 + c;
    2958:	e0ffee17 	ldw	r3,-72(fp)
    295c:	e0bfe817 	ldw	r2,-96(fp)
    2960:	1085883a 	add	r2,r2,r2
    2964:	1085883a 	add	r2,r2,r2
    2968:	1885883a 	add	r2,r3,r2
    296c:	10800017 	ldw	r2,0(r2)
    2970:	102d883a 	mov	r22,r2
    2974:	002f883a 	mov	r23,zero
    2978:	01800e84 	movi	r6,58
    297c:	000f883a 	mov	r7,zero
    2980:	b009883a 	mov	r4,r22
    2984:	b80b883a 	mov	r5,r23
    2988:	00429400 	call	42940 <__muldi3>
    298c:	100d883a 	mov	r6,r2
    2990:	180f883a 	mov	r7,r3
    2994:	3009883a 	mov	r4,r6
    2998:	380b883a 	mov	r5,r7
    299c:	e0bfe617 	ldw	r2,-104(fp)
    29a0:	1021883a 	mov	r16,r2
    29a4:	0023883a 	mov	r17,zero
    29a8:	2405883a 	add	r2,r4,r16
    29ac:	110d803a 	cmpltu	r6,r2,r4
    29b0:	2c47883a 	add	r3,r5,r17
    29b4:	30c9883a 	add	r4,r6,r3
    29b8:	2007883a 	mov	r3,r4
    29bc:	e0bff215 	stw	r2,-56(fp)
    29c0:	e0fff315 	stw	r3,-52(fp)
            c = (t & 0x3f00000000) >> 32;
    29c4:	e0bff217 	ldw	r2,-56(fp)
    29c8:	1024703a 	and	r18,r2,zero
    29cc:	e0bff317 	ldw	r2,-52(fp)
    29d0:	14c00fcc 	andi	r19,r2,63
    29d4:	9828d83a 	srl	r20,r19,zero
    29d8:	002b883a 	mov	r21,zero
    29dc:	e53fe615 	stw	r20,-104(fp)
            outi[j] = t & 0xffffffff;
    29e0:	e0fff217 	ldw	r3,-56(fp)
    29e4:	e13fee17 	ldw	r4,-72(fp)
    29e8:	e0bfe817 	ldw	r2,-96(fp)
    29ec:	1085883a 	add	r2,r2,r2
    29f0:	1085883a 	add	r2,r2,r2
    29f4:	2085883a 	add	r2,r4,r2
    29f8:	10c00015 	stw	r3,0(r2)
        if (b58digits_map[b58u[i]] == -1) {
            // Invalid base58 digit
            return false;
        }
        c = (unsigned)b58digits_map[b58u[i]];
        for (j = outisz; j--;) {
    29fc:	e0bfe817 	ldw	r2,-96(fp)
    2a00:	10ffffc4 	addi	r3,r2,-1
    2a04:	e0ffe815 	stw	r3,-96(fp)
    2a08:	103fd31e 	bne	r2,zero,2958 <__alt_mem_epcs_flash_controller+0xfdff1958>
            t = ((uint64_t)outi[j]) * 58 + c;
            c = (t & 0x3f00000000) >> 32;
            outi[j] = t & 0xffffffff;
        }
        if (c) {
    2a0c:	e0bfe617 	ldw	r2,-104(fp)
    2a10:	10000a26 	beq	r2,zero,2a3c <btc_base58_decode+0x338>
            // Output number too big (carry to the next int32)
            memset(outi, 0, outisz * sizeof(*outi));
    2a14:	e0ffee17 	ldw	r3,-72(fp)
    2a18:	e0bfec17 	ldw	r2,-80(fp)
    2a1c:	1085883a 	add	r2,r2,r2
    2a20:	1085883a 	add	r2,r2,r2
    2a24:	100d883a 	mov	r6,r2
    2a28:	000b883a 	mov	r5,zero
    2a2c:	1809883a 	mov	r4,r3
    2a30:	0045f3c0 	call	45f3c <memset>
            return false;
    2a34:	0005883a 	mov	r2,zero
    2a38:	00009006 	br	2c7c <btc_base58_decode+0x578>
        }
        if (outi[0] & zeromask) {
    2a3c:	e0bfee17 	ldw	r2,-72(fp)
    2a40:	10c00017 	ldw	r3,0(r2)
    2a44:	e0bff017 	ldw	r2,-64(fp)
    2a48:	1884703a 	and	r2,r3,r2
    2a4c:	10000a26 	beq	r2,zero,2a78 <btc_base58_decode+0x374>
            // Output number too big (last int32 filled too far)
            memset(outi, 0, outisz * sizeof(*outi));
    2a50:	e0ffee17 	ldw	r3,-72(fp)
    2a54:	e0bfec17 	ldw	r2,-80(fp)
    2a58:	1085883a 	add	r2,r2,r2
    2a5c:	1085883a 	add	r2,r2,r2
    2a60:	100d883a 	mov	r6,r2
    2a64:	000b883a 	mov	r5,zero
    2a68:	1809883a 	mov	r4,r3
    2a6c:	0045f3c0 	call	45f3c <memset>
            return false;
    2a70:	0005883a 	mov	r2,zero
    2a74:	00008106 	br	2c7c <btc_base58_decode+0x578>
    // Leading zeros, just count
    for (i = 0; i < b58sz && !b58digits_map[b58u[i]]; ++i) {
        ++zerocount;
    }

    for (; i < b58sz; ++i) {
    2a78:	e0bfe717 	ldw	r2,-100(fp)
    2a7c:	10800044 	addi	r2,r2,1
    2a80:	e0bfe715 	stw	r2,-100(fp)
    2a84:	e0ffe717 	ldw	r3,-100(fp)
    2a88:	e0bff117 	ldw	r2,-60(fp)
    2a8c:	18bf8836 	bltu	r3,r2,28b0 <__alt_mem_epcs_flash_controller+0xfdff18b0>
            memset(outi, 0, outisz * sizeof(*outi));
            return false;
        }
    }

    j = 0;
    2a90:	e03fe815 	stw	zero,-96(fp)
    switch (bytesleft) {
    2a94:	e0bfef03 	ldbu	r2,-68(fp)
    2a98:	10c000a0 	cmpeqi	r3,r2,2
    2a9c:	18000d1e 	bne	r3,zero,2ad4 <btc_base58_decode+0x3d0>
    2aa0:	10c000e0 	cmpeqi	r3,r2,3
    2aa4:	1800031e 	bne	r3,zero,2ab4 <btc_base58_decode+0x3b0>
    2aa8:	10800060 	cmpeqi	r2,r2,1
    2aac:	1000111e 	bne	r2,zero,2af4 <btc_base58_decode+0x3f0>
        *(binu++) = (outi[0] & 0xff00) >> 8;
    case 1:
        *(binu++) = (outi[0] & 0xff);
        ++j;
    default:
        break;
    2ab0:	00001906 	br	2b18 <btc_base58_decode+0x414>
    }

    j = 0;
    switch (bytesleft) {
    case 3:
        *(binu++) = (outi[0] & 0xff0000) >> 16;
    2ab4:	e0bfe517 	ldw	r2,-108(fp)
    2ab8:	10c00044 	addi	r3,r2,1
    2abc:	e0ffe515 	stw	r3,-108(fp)
    2ac0:	e0ffee17 	ldw	r3,-72(fp)
    2ac4:	18c00017 	ldw	r3,0(r3)
    2ac8:	18c03fec 	andhi	r3,r3,255
    2acc:	1806d43a 	srli	r3,r3,16
    2ad0:	10c00005 	stb	r3,0(r2)
    case 2:
        *(binu++) = (outi[0] & 0xff00) >> 8;
    2ad4:	e0bfe517 	ldw	r2,-108(fp)
    2ad8:	10c00044 	addi	r3,r2,1
    2adc:	e0ffe515 	stw	r3,-108(fp)
    2ae0:	e0ffee17 	ldw	r3,-72(fp)
    2ae4:	18c00017 	ldw	r3,0(r3)
    2ae8:	18ffc00c 	andi	r3,r3,65280
    2aec:	1806d23a 	srli	r3,r3,8
    2af0:	10c00005 	stb	r3,0(r2)
    case 1:
        *(binu++) = (outi[0] & 0xff);
    2af4:	e0bfe517 	ldw	r2,-108(fp)
    2af8:	10c00044 	addi	r3,r2,1
    2afc:	e0ffe515 	stw	r3,-108(fp)
    2b00:	e0ffee17 	ldw	r3,-72(fp)
    2b04:	18c00017 	ldw	r3,0(r3)
    2b08:	10c00005 	stb	r3,0(r2)
        ++j;
    2b0c:	e0bfe817 	ldw	r2,-96(fp)
    2b10:	10800044 	addi	r2,r2,1
    2b14:	e0bfe815 	stw	r2,-96(fp)
    default:
        break;
    2b18:	0001883a 	nop
    }

    for (; j < outisz; ++j) {
    2b1c:	00002e06 	br	2bd8 <btc_base58_decode+0x4d4>
        *(binu++) = (outi[j] >> 0x18) & 0xff;
    2b20:	e0bfe517 	ldw	r2,-108(fp)
    2b24:	10c00044 	addi	r3,r2,1
    2b28:	e0ffe515 	stw	r3,-108(fp)
    2b2c:	e13fee17 	ldw	r4,-72(fp)
    2b30:	e0ffe817 	ldw	r3,-96(fp)
    2b34:	18c7883a 	add	r3,r3,r3
    2b38:	18c7883a 	add	r3,r3,r3
    2b3c:	20c7883a 	add	r3,r4,r3
    2b40:	18c00017 	ldw	r3,0(r3)
    2b44:	1806d63a 	srli	r3,r3,24
    2b48:	10c00005 	stb	r3,0(r2)
        *(binu++) = (outi[j] >> 0x10) & 0xff;
    2b4c:	e0bfe517 	ldw	r2,-108(fp)
    2b50:	10c00044 	addi	r3,r2,1
    2b54:	e0ffe515 	stw	r3,-108(fp)
    2b58:	e13fee17 	ldw	r4,-72(fp)
    2b5c:	e0ffe817 	ldw	r3,-96(fp)
    2b60:	18c7883a 	add	r3,r3,r3
    2b64:	18c7883a 	add	r3,r3,r3
    2b68:	20c7883a 	add	r3,r4,r3
    2b6c:	18c00017 	ldw	r3,0(r3)
    2b70:	1806d43a 	srli	r3,r3,16
    2b74:	10c00005 	stb	r3,0(r2)
        *(binu++) = (outi[j] >> 8) & 0xff;
    2b78:	e0bfe517 	ldw	r2,-108(fp)
    2b7c:	10c00044 	addi	r3,r2,1
    2b80:	e0ffe515 	stw	r3,-108(fp)
    2b84:	e13fee17 	ldw	r4,-72(fp)
    2b88:	e0ffe817 	ldw	r3,-96(fp)
    2b8c:	18c7883a 	add	r3,r3,r3
    2b90:	18c7883a 	add	r3,r3,r3
    2b94:	20c7883a 	add	r3,r4,r3
    2b98:	18c00017 	ldw	r3,0(r3)
    2b9c:	1806d23a 	srli	r3,r3,8
    2ba0:	10c00005 	stb	r3,0(r2)
        *(binu++) = (outi[j] >> 0) & 0xff;
    2ba4:	e0bfe517 	ldw	r2,-108(fp)
    2ba8:	10c00044 	addi	r3,r2,1
    2bac:	e0ffe515 	stw	r3,-108(fp)
    2bb0:	e13fee17 	ldw	r4,-72(fp)
    2bb4:	e0ffe817 	ldw	r3,-96(fp)
    2bb8:	18c7883a 	add	r3,r3,r3
    2bbc:	18c7883a 	add	r3,r3,r3
    2bc0:	20c7883a 	add	r3,r4,r3
    2bc4:	18c00017 	ldw	r3,0(r3)
    2bc8:	10c00005 	stb	r3,0(r2)
        ++j;
    default:
        break;
    }

    for (; j < outisz; ++j) {
    2bcc:	e0bfe817 	ldw	r2,-96(fp)
    2bd0:	10800044 	addi	r2,r2,1
    2bd4:	e0bfe815 	stw	r2,-96(fp)
    2bd8:	e0ffe817 	ldw	r3,-96(fp)
    2bdc:	e0bfec17 	ldw	r2,-80(fp)
    2be0:	18bfcf36 	bltu	r3,r2,2b20 <__alt_mem_epcs_flash_controller+0xfdff1b20>
        *(binu++) = (outi[j] >> 8) & 0xff;
        *(binu++) = (outi[j] >> 0) & 0xff;
    }

    // Count canonical base58 byte count
    binu = bin;
    2be4:	e0bff417 	ldw	r2,-48(fp)
    2be8:	e0bfe515 	stw	r2,-108(fp)
    for (i = 0; i < binsz; ++i) {
    2bec:	e03fe715 	stw	zero,-100(fp)
    2bf0:	00000e06 	br	2c2c <btc_base58_decode+0x528>
        if (binu[i]) {
    2bf4:	e0ffe517 	ldw	r3,-108(fp)
    2bf8:	e0bfe717 	ldw	r2,-100(fp)
    2bfc:	1885883a 	add	r2,r3,r2
    2c00:	10800003 	ldbu	r2,0(r2)
    2c04:	10803fcc 	andi	r2,r2,255
    2c08:	10000c1e 	bne	r2,zero,2c3c <btc_base58_decode+0x538>
            break;
        }
        --*binszp;
    2c0c:	e0bff517 	ldw	r2,-44(fp)
    2c10:	10800017 	ldw	r2,0(r2)
    2c14:	10ffffc4 	addi	r3,r2,-1
    2c18:	e0bff517 	ldw	r2,-44(fp)
    2c1c:	10c00015 	stw	r3,0(r2)
        *(binu++) = (outi[j] >> 0) & 0xff;
    }

    // Count canonical base58 byte count
    binu = bin;
    for (i = 0; i < binsz; ++i) {
    2c20:	e0bfe717 	ldw	r2,-100(fp)
    2c24:	10800044 	addi	r2,r2,1
    2c28:	e0bfe715 	stw	r2,-100(fp)
    2c2c:	e0ffe717 	ldw	r3,-100(fp)
    2c30:	e0bfea17 	ldw	r2,-88(fp)
    2c34:	18bfef36 	bltu	r3,r2,2bf4 <__alt_mem_epcs_flash_controller+0xfdff1bf4>
    2c38:	00000106 	br	2c40 <btc_base58_decode+0x53c>
        if (binu[i]) {
            break;
    2c3c:	0001883a 	nop
        }
        --*binszp;
    }
    *binszp += zerocount;
    2c40:	e0bff517 	ldw	r2,-44(fp)
    2c44:	10c00017 	ldw	r3,0(r2)
    2c48:	e0bfe917 	ldw	r2,-92(fp)
    2c4c:	1887883a 	add	r3,r3,r2
    2c50:	e0bff517 	ldw	r2,-44(fp)
    2c54:	10c00015 	stw	r3,0(r2)

    memset(outi, 0, outisz * sizeof(*outi));
    2c58:	e0ffee17 	ldw	r3,-72(fp)
    2c5c:	e0bfec17 	ldw	r2,-80(fp)
    2c60:	1085883a 	add	r2,r2,r2
    2c64:	1085883a 	add	r2,r2,r2
    2c68:	100d883a 	mov	r6,r2
    2c6c:	000b883a 	mov	r5,zero
    2c70:	1809883a 	mov	r4,r3
    2c74:	0045f3c0 	call	45f3c <memset>
    return true;
    2c78:	00800044 	movi	r2,1
    2c7c:	e6fff717 	ldw	sp,-36(fp)
}
    2c80:	e6fff804 	addi	sp,fp,-32
    2c84:	dfc00917 	ldw	ra,36(sp)
    2c88:	df000817 	ldw	fp,32(sp)
    2c8c:	ddc00717 	ldw	r23,28(sp)
    2c90:	dd800617 	ldw	r22,24(sp)
    2c94:	dd400517 	ldw	r21,20(sp)
    2c98:	dd000417 	ldw	r20,16(sp)
    2c9c:	dcc00317 	ldw	r19,12(sp)
    2ca0:	dc800217 	ldw	r18,8(sp)
    2ca4:	dc400117 	ldw	r17,4(sp)
    2ca8:	dc000017 	ldw	r16,0(sp)
    2cac:	dec00a04 	addi	sp,sp,40
    2cb0:	f800283a 	ret

00002cb4 <btc_b58check>:

int btc_b58check(const void* bin, size_t binsz, const char* base58str)
{
    2cb4:	defff104 	addi	sp,sp,-60
    2cb8:	dfc00e15 	stw	ra,56(sp)
    2cbc:	df000d15 	stw	fp,52(sp)
    2cc0:	df000d04 	addi	fp,sp,52
    2cc4:	e13ffd15 	stw	r4,-12(fp)
    2cc8:	e17ffe15 	stw	r5,-8(fp)
    2ccc:	e1bfff15 	stw	r6,-4(fp)
    uint256 buf;
    const uint8_t* binc = bin;
    2cd0:	e0bffd17 	ldw	r2,-12(fp)
    2cd4:	e0bff415 	stw	r2,-48(fp)
    unsigned i;
    if (binsz < 4) {
    2cd8:	e0bffe17 	ldw	r2,-8(fp)
    2cdc:	10800128 	cmpgeui	r2,r2,4
    2ce0:	1000021e 	bne	r2,zero,2cec <btc_b58check+0x38>
        return -4;
    2ce4:	00bfff04 	movi	r2,-4
    2ce8:	00004106 	br	2df0 <btc_b58check+0x13c>
    }

    sha256_Raw(bin, binsz - 4, buf);
    2cec:	e0bffe17 	ldw	r2,-8(fp)
    2cf0:	10bfff04 	addi	r2,r2,-4
    2cf4:	e0fff504 	addi	r3,fp,-44
    2cf8:	180d883a 	mov	r6,r3
    2cfc:	100b883a 	mov	r5,r2
    2d00:	e13ffd17 	ldw	r4,-12(fp)
    2d04:	003eb140 	call	3eb14 <sha256_Raw>
    sha256_Raw(buf, sizeof(buf), buf);
    2d08:	e0fff504 	addi	r3,fp,-44
    2d0c:	e0bff504 	addi	r2,fp,-44
    2d10:	180d883a 	mov	r6,r3
    2d14:	01400804 	movi	r5,32
    2d18:	1009883a 	mov	r4,r2
    2d1c:	003eb140 	call	3eb14 <sha256_Raw>

    if (memcmp(&binc[binsz - 4], buf, 4)) {
    2d20:	e0bffe17 	ldw	r2,-8(fp)
    2d24:	10bfff04 	addi	r2,r2,-4
    2d28:	e0fff417 	ldw	r3,-48(fp)
    2d2c:	1885883a 	add	r2,r3,r2
    2d30:	e0fff504 	addi	r3,fp,-44
    2d34:	01800104 	movi	r6,4
    2d38:	180b883a 	mov	r5,r3
    2d3c:	1009883a 	mov	r4,r2
    2d40:	0045c1c0 	call	45c1c <memcmp>
    2d44:	10000226 	beq	r2,zero,2d50 <btc_b58check+0x9c>
        return -1;
    2d48:	00bfffc4 	movi	r2,-1
    2d4c:	00002806 	br	2df0 <btc_b58check+0x13c>
    }

    // Check number of zeros is correct AFTER verifying checksum (to avoid possibility of accessing base58str beyond the end)
    for (i = 0; binc[i] == '\0' && base58str[i] == '1'; ++i) {
    2d50:	e03ff315 	stw	zero,-52(fp)
    2d54:	00000306 	br	2d64 <btc_b58check+0xb0>
    2d58:	e0bff317 	ldw	r2,-52(fp)
    2d5c:	10800044 	addi	r2,r2,1
    2d60:	e0bff315 	stw	r2,-52(fp)
    2d64:	e0fff417 	ldw	r3,-48(fp)
    2d68:	e0bff317 	ldw	r2,-52(fp)
    2d6c:	1885883a 	add	r2,r3,r2
    2d70:	10800003 	ldbu	r2,0(r2)
    2d74:	10803fcc 	andi	r2,r2,255
    2d78:	1000091e 	bne	r2,zero,2da0 <btc_b58check+0xec>
    2d7c:	e0ffff17 	ldw	r3,-4(fp)
    2d80:	e0bff317 	ldw	r2,-52(fp)
    2d84:	1885883a 	add	r2,r3,r2
    2d88:	10800003 	ldbu	r2,0(r2)
    2d8c:	10803fcc 	andi	r2,r2,255
    2d90:	1080201c 	xori	r2,r2,128
    2d94:	10bfe004 	addi	r2,r2,-128
    2d98:	10800c60 	cmpeqi	r2,r2,49
    2d9c:	103fee1e 	bne	r2,zero,2d58 <__alt_mem_epcs_flash_controller+0xfdff1d58>
    } // Just finding the end of zeros, nothing to do in loop
    if (binc[i] == '\0' || base58str[i] == '1') {
    2da0:	e0fff417 	ldw	r3,-48(fp)
    2da4:	e0bff317 	ldw	r2,-52(fp)
    2da8:	1885883a 	add	r2,r3,r2
    2dac:	10800003 	ldbu	r2,0(r2)
    2db0:	10803fcc 	andi	r2,r2,255
    2db4:	10000926 	beq	r2,zero,2ddc <btc_b58check+0x128>
    2db8:	e0ffff17 	ldw	r3,-4(fp)
    2dbc:	e0bff317 	ldw	r2,-52(fp)
    2dc0:	1885883a 	add	r2,r3,r2
    2dc4:	10800003 	ldbu	r2,0(r2)
    2dc8:	10803fcc 	andi	r2,r2,255
    2dcc:	1080201c 	xori	r2,r2,128
    2dd0:	10bfe004 	addi	r2,r2,-128
    2dd4:	10800c58 	cmpnei	r2,r2,49
    2dd8:	1000021e 	bne	r2,zero,2de4 <btc_b58check+0x130>
        return -3;
    2ddc:	00bfff44 	movi	r2,-3
    2de0:	00000306 	br	2df0 <btc_b58check+0x13c>
    }

    return binc[0];
    2de4:	e0bff417 	ldw	r2,-48(fp)
    2de8:	10800003 	ldbu	r2,0(r2)
    2dec:	10803fcc 	andi	r2,r2,255
}
    2df0:	e037883a 	mov	sp,fp
    2df4:	dfc00117 	ldw	ra,4(sp)
    2df8:	df000017 	ldw	fp,0(sp)
    2dfc:	dec00204 	addi	sp,sp,8
    2e00:	f800283a 	ret

00002e04 <btc_base58_encode>:

static const char b58digits_ordered[] =
    "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

int btc_base58_encode(char* b58, size_t* b58sz, const void* data, size_t binsz)
{
    2e04:	deffe804 	addi	sp,sp,-96
    2e08:	dfc01715 	stw	ra,92(sp)
    2e0c:	df001615 	stw	fp,88(sp)
    2e10:	ddc01515 	stw	r23,84(sp)
    2e14:	dd801415 	stw	r22,80(sp)
    2e18:	dd401315 	stw	r21,76(sp)
    2e1c:	dd001215 	stw	r20,72(sp)
    2e20:	dcc01115 	stw	r19,68(sp)
    2e24:	dc801015 	stw	r18,64(sp)
    2e28:	dc400f15 	stw	r17,60(sp)
    2e2c:	dc000e15 	stw	r16,56(sp)
    2e30:	df001604 	addi	fp,sp,88
    2e34:	e13ff315 	stw	r4,-52(fp)
    2e38:	e17ff415 	stw	r5,-48(fp)
    2e3c:	e1bff515 	stw	r6,-44(fp)
    2e40:	e1fff615 	stw	r7,-40(fp)
    const uint8_t* bin = data;
    2e44:	e0bff517 	ldw	r2,-44(fp)
    2e48:	e0bfef15 	stw	r2,-68(fp)
    int carry;
    ssize_t i, j, high, zcount = 0;
    2e4c:	e03fee15 	stw	zero,-72(fp)
    size_t size;

    while (zcount < (ssize_t)binsz && !bin[zcount]) {
    2e50:	00000306 	br	2e60 <btc_base58_encode+0x5c>
        ++zcount;
    2e54:	e0bfee17 	ldw	r2,-72(fp)
    2e58:	10800044 	addi	r2,r2,1
    2e5c:	e0bfee15 	stw	r2,-72(fp)
    const uint8_t* bin = data;
    int carry;
    ssize_t i, j, high, zcount = 0;
    size_t size;

    while (zcount < (ssize_t)binsz && !bin[zcount]) {
    2e60:	e0bff617 	ldw	r2,-40(fp)
    2e64:	e0ffee17 	ldw	r3,-72(fp)
    2e68:	1880060e 	bge	r3,r2,2e84 <btc_base58_encode+0x80>
    2e6c:	e0bfee17 	ldw	r2,-72(fp)
    2e70:	e0ffef17 	ldw	r3,-68(fp)
    2e74:	1885883a 	add	r2,r3,r2
    2e78:	10800003 	ldbu	r2,0(r2)
    2e7c:	10803fcc 	andi	r2,r2,255
    2e80:	103ff426 	beq	r2,zero,2e54 <__alt_mem_epcs_flash_controller+0xfdff1e54>
        ++zcount;
    }

    size = (binsz - zcount) * 138 / 100 + 1;
    2e84:	e0bfee17 	ldw	r2,-72(fp)
    2e88:	e0fff617 	ldw	r3,-40(fp)
    2e8c:	1885c83a 	sub	r2,r3,r2
    2e90:	108022a4 	muli	r2,r2,138
    2e94:	01401904 	movi	r5,100
    2e98:	1009883a 	mov	r4,r2
    2e9c:	0042a980 	call	42a98 <__udivsi3>
    2ea0:	10800044 	addi	r2,r2,1
    2ea4:	e0bff015 	stw	r2,-64(fp)
    uint8_t buf[size];
    2ea8:	e0bff017 	ldw	r2,-64(fp)
    2eac:	d807883a 	mov	r3,sp
    2eb0:	e0fff715 	stw	r3,-36(fp)
    2eb4:	1007883a 	mov	r3,r2
    2eb8:	18ffffc4 	addi	r3,r3,-1
    2ebc:	e0fff115 	stw	r3,-60(fp)
    2ec0:	102d883a 	mov	r22,r2
    2ec4:	002f883a 	mov	r23,zero
    2ec8:	b006d77a 	srli	r3,r22,29
    2ecc:	b82690fa 	slli	r19,r23,3
    2ed0:	1ce6b03a 	or	r19,r3,r19
    2ed4:	b02490fa 	slli	r18,r22,3
    2ed8:	1029883a 	mov	r20,r2
    2edc:	002b883a 	mov	r21,zero
    2ee0:	a006d77a 	srli	r3,r20,29
    2ee4:	a82290fa 	slli	r17,r21,3
    2ee8:	1c62b03a 	or	r17,r3,r17
    2eec:	a02090fa 	slli	r16,r20,3
    2ef0:	108000c4 	addi	r2,r2,3
    2ef4:	1004d0ba 	srli	r2,r2,2
    2ef8:	1085883a 	add	r2,r2,r2
    2efc:	1085883a 	add	r2,r2,r2
    2f00:	d8b7c83a 	sub	sp,sp,r2
    2f04:	d805883a 	mov	r2,sp
    2f08:	1005883a 	mov	r2,r2
    2f0c:	e0bff215 	stw	r2,-56(fp)
    memset(buf, 0, size);
    2f10:	e0bff217 	ldw	r2,-56(fp)
    2f14:	e1bff017 	ldw	r6,-64(fp)
    2f18:	000b883a 	mov	r5,zero
    2f1c:	1009883a 	mov	r4,r2
    2f20:	0045f3c0 	call	45f3c <memset>

    for (i = zcount, high = size - 1; i < (ssize_t)binsz; ++i, high = j) {
    2f24:	e0bfee17 	ldw	r2,-72(fp)
    2f28:	e0bfeb15 	stw	r2,-84(fp)
    2f2c:	e0bff017 	ldw	r2,-64(fp)
    2f30:	10bfffc4 	addi	r2,r2,-1
    2f34:	e0bfed15 	stw	r2,-76(fp)
    2f38:	00002e06 	br	2ff4 <btc_base58_encode+0x1f0>
        for (carry = bin[i], j = size - 1; (j > high) || carry; --j) {
    2f3c:	e0bfeb17 	ldw	r2,-84(fp)
    2f40:	e0ffef17 	ldw	r3,-68(fp)
    2f44:	1885883a 	add	r2,r3,r2
    2f48:	10800003 	ldbu	r2,0(r2)
    2f4c:	10803fcc 	andi	r2,r2,255
    2f50:	e0bfea15 	stw	r2,-88(fp)
    2f54:	e0bff017 	ldw	r2,-64(fp)
    2f58:	10bfffc4 	addi	r2,r2,-1
    2f5c:	e0bfec15 	stw	r2,-80(fp)
    2f60:	00001a06 	br	2fcc <btc_base58_encode+0x1c8>
            carry += 256 * buf[j];
    2f64:	e0fff217 	ldw	r3,-56(fp)
    2f68:	e0bfec17 	ldw	r2,-80(fp)
    2f6c:	1885883a 	add	r2,r3,r2
    2f70:	10800003 	ldbu	r2,0(r2)
    2f74:	10803fcc 	andi	r2,r2,255
    2f78:	1004923a 	slli	r2,r2,8
    2f7c:	e0ffea17 	ldw	r3,-88(fp)
    2f80:	1885883a 	add	r2,r3,r2
    2f84:	e0bfea15 	stw	r2,-88(fp)
            buf[j] = carry % 58;
    2f88:	e0bfea17 	ldw	r2,-88(fp)
    2f8c:	01400e84 	movi	r5,58
    2f90:	1009883a 	mov	r4,r2
    2f94:	0042a240 	call	42a24 <__modsi3>
    2f98:	1009883a 	mov	r4,r2
    2f9c:	e0fff217 	ldw	r3,-56(fp)
    2fa0:	e0bfec17 	ldw	r2,-80(fp)
    2fa4:	1885883a 	add	r2,r3,r2
    2fa8:	11000005 	stb	r4,0(r2)
            carry /= 58;
    2fac:	e0bfea17 	ldw	r2,-88(fp)
    2fb0:	01400e84 	movi	r5,58
    2fb4:	1009883a 	mov	r4,r2
    2fb8:	00429a00 	call	429a0 <__divsi3>
    2fbc:	e0bfea15 	stw	r2,-88(fp)
    size = (binsz - zcount) * 138 / 100 + 1;
    uint8_t buf[size];
    memset(buf, 0, size);

    for (i = zcount, high = size - 1; i < (ssize_t)binsz; ++i, high = j) {
        for (carry = bin[i], j = size - 1; (j > high) || carry; --j) {
    2fc0:	e0bfec17 	ldw	r2,-80(fp)
    2fc4:	10bfffc4 	addi	r2,r2,-1
    2fc8:	e0bfec15 	stw	r2,-80(fp)
    2fcc:	e0bfec17 	ldw	r2,-80(fp)
    2fd0:	e0ffed17 	ldw	r3,-76(fp)
    2fd4:	18bfe316 	blt	r3,r2,2f64 <__alt_mem_epcs_flash_controller+0xfdff1f64>
    2fd8:	e0bfea17 	ldw	r2,-88(fp)
    2fdc:	103fe11e 	bne	r2,zero,2f64 <__alt_mem_epcs_flash_controller+0xfdff1f64>

    size = (binsz - zcount) * 138 / 100 + 1;
    uint8_t buf[size];
    memset(buf, 0, size);

    for (i = zcount, high = size - 1; i < (ssize_t)binsz; ++i, high = j) {
    2fe0:	e0bfeb17 	ldw	r2,-84(fp)
    2fe4:	10800044 	addi	r2,r2,1
    2fe8:	e0bfeb15 	stw	r2,-84(fp)
    2fec:	e0bfec17 	ldw	r2,-80(fp)
    2ff0:	e0bfed15 	stw	r2,-76(fp)
    2ff4:	e0bff617 	ldw	r2,-40(fp)
    2ff8:	e0ffeb17 	ldw	r3,-84(fp)
    2ffc:	18bfcf16 	blt	r3,r2,2f3c <__alt_mem_epcs_flash_controller+0xfdff1f3c>
            buf[j] = carry % 58;
            carry /= 58;
        }
    }

    for (j = 0; j < (ssize_t)size && !buf[j]; ++j)
    3000:	e03fec15 	stw	zero,-80(fp)
    3004:	00000306 	br	3014 <btc_base58_encode+0x210>
    3008:	e0bfec17 	ldw	r2,-80(fp)
    300c:	10800044 	addi	r2,r2,1
    3010:	e0bfec15 	stw	r2,-80(fp)
    3014:	e0bff017 	ldw	r2,-64(fp)
    3018:	e0ffec17 	ldw	r3,-80(fp)
    301c:	1880060e 	bge	r3,r2,3038 <btc_base58_encode+0x234>
    3020:	e0fff217 	ldw	r3,-56(fp)
    3024:	e0bfec17 	ldw	r2,-80(fp)
    3028:	1885883a 	add	r2,r3,r2
    302c:	10800003 	ldbu	r2,0(r2)
    3030:	10803fcc 	andi	r2,r2,255
    3034:	103ff426 	beq	r2,zero,3008 <__alt_mem_epcs_flash_controller+0xfdff2008>
        ;

    if (*b58sz <= zcount + size - j) {
    3038:	e0bff417 	ldw	r2,-48(fp)
    303c:	10800017 	ldw	r2,0(r2)
    3040:	e13fee17 	ldw	r4,-72(fp)
    3044:	e0fff017 	ldw	r3,-64(fp)
    3048:	20c9883a 	add	r4,r4,r3
    304c:	e0ffec17 	ldw	r3,-80(fp)
    3050:	20c7c83a 	sub	r3,r4,r3
    3054:	18800f36 	bltu	r3,r2,3094 <btc_base58_encode+0x290>
        *b58sz = zcount + size - j + 1;
    3058:	e0ffee17 	ldw	r3,-72(fp)
    305c:	e0bff017 	ldw	r2,-64(fp)
    3060:	1887883a 	add	r3,r3,r2
    3064:	e0bfec17 	ldw	r2,-80(fp)
    3068:	1885c83a 	sub	r2,r3,r2
    306c:	10c00044 	addi	r3,r2,1
    3070:	e0bff417 	ldw	r2,-48(fp)
    3074:	10c00015 	stw	r3,0(r2)
        memset(buf, 0, size);
    3078:	e0bff217 	ldw	r2,-56(fp)
    307c:	e1bff017 	ldw	r6,-64(fp)
    3080:	000b883a 	mov	r5,zero
    3084:	1009883a 	mov	r4,r2
    3088:	0045f3c0 	call	45f3c <memset>
        return false;
    308c:	0005883a 	mov	r2,zero
    3090:	00002f06 	br	3150 <btc_base58_encode+0x34c>
    }

    if (zcount) {
    3094:	e0bfee17 	ldw	r2,-72(fp)
    3098:	10000526 	beq	r2,zero,30b0 <btc_base58_encode+0x2ac>
        memset(b58, '1', zcount);
    309c:	e0bfee17 	ldw	r2,-72(fp)
    30a0:	100d883a 	mov	r6,r2
    30a4:	01400c44 	movi	r5,49
    30a8:	e13ff317 	ldw	r4,-52(fp)
    30ac:	0045f3c0 	call	45f3c <memset>
    }
    for (i = zcount; j < (ssize_t)size; ++i, ++j) {
    30b0:	e0bfee17 	ldw	r2,-72(fp)
    30b4:	e0bfeb15 	stw	r2,-84(fp)
    30b8:	00001306 	br	3108 <btc_base58_encode+0x304>
        b58[i] = b58digits_ordered[buf[j]];
    30bc:	e0bfeb17 	ldw	r2,-84(fp)
    30c0:	e0fff317 	ldw	r3,-52(fp)
    30c4:	1887883a 	add	r3,r3,r2
    30c8:	e13ff217 	ldw	r4,-56(fp)
    30cc:	e0bfec17 	ldw	r2,-80(fp)
    30d0:	2085883a 	add	r2,r4,r2
    30d4:	10800003 	ldbu	r2,0(r2)
    30d8:	11003fcc 	andi	r4,r2,255
    30dc:	008001b4 	movhi	r2,6
    30e0:	10a15a04 	addi	r2,r2,-31384
    30e4:	1105883a 	add	r2,r2,r4
    30e8:	10800003 	ldbu	r2,0(r2)
    30ec:	18800005 	stb	r2,0(r3)
    }

    if (zcount) {
        memset(b58, '1', zcount);
    }
    for (i = zcount; j < (ssize_t)size; ++i, ++j) {
    30f0:	e0bfeb17 	ldw	r2,-84(fp)
    30f4:	10800044 	addi	r2,r2,1
    30f8:	e0bfeb15 	stw	r2,-84(fp)
    30fc:	e0bfec17 	ldw	r2,-80(fp)
    3100:	10800044 	addi	r2,r2,1
    3104:	e0bfec15 	stw	r2,-80(fp)
    3108:	e0bff017 	ldw	r2,-64(fp)
    310c:	e0ffec17 	ldw	r3,-80(fp)
    3110:	18bfea16 	blt	r3,r2,30bc <__alt_mem_epcs_flash_controller+0xfdff20bc>
        b58[i] = b58digits_ordered[buf[j]];
    }
    b58[i] = '\0';
    3114:	e0bfeb17 	ldw	r2,-84(fp)
    3118:	e0fff317 	ldw	r3,-52(fp)
    311c:	1885883a 	add	r2,r3,r2
    3120:	10000005 	stb	zero,0(r2)
    *b58sz = i + 1;
    3124:	e0bfeb17 	ldw	r2,-84(fp)
    3128:	10800044 	addi	r2,r2,1
    312c:	1007883a 	mov	r3,r2
    3130:	e0bff417 	ldw	r2,-48(fp)
    3134:	10c00015 	stw	r3,0(r2)

    memset(buf, 0, size);
    3138:	e0bff217 	ldw	r2,-56(fp)
    313c:	e1bff017 	ldw	r6,-64(fp)
    3140:	000b883a 	mov	r5,zero
    3144:	1009883a 	mov	r4,r2
    3148:	0045f3c0 	call	45f3c <memset>
    return true;
    314c:	00800044 	movi	r2,1
    3150:	e6fff717 	ldw	sp,-36(fp)
}
    3154:	e6fff804 	addi	sp,fp,-32
    3158:	dfc00917 	ldw	ra,36(sp)
    315c:	df000817 	ldw	fp,32(sp)
    3160:	ddc00717 	ldw	r23,28(sp)
    3164:	dd800617 	ldw	r22,24(sp)
    3168:	dd400517 	ldw	r21,20(sp)
    316c:	dd000417 	ldw	r20,16(sp)
    3170:	dcc00317 	ldw	r19,12(sp)
    3174:	dc800217 	ldw	r18,8(sp)
    3178:	dc400117 	ldw	r17,4(sp)
    317c:	dc000017 	ldw	r16,0(sp)
    3180:	dec00a04 	addi	sp,sp,40
    3184:	f800283a 	ret

00003188 <btc_base58_encode_check>:

int btc_base58_encode_check(const uint8_t* data, int datalen, char* str, int strsize)
{
    3188:	defff304 	addi	sp,sp,-52
    318c:	dfc00c15 	stw	ra,48(sp)
    3190:	df000b15 	stw	fp,44(sp)
    3194:	dc400a15 	stw	r17,40(sp)
    3198:	dc000915 	stw	r16,36(sp)
    319c:	df000b04 	addi	fp,sp,44
    31a0:	e13ffa15 	stw	r4,-24(fp)
    31a4:	e17ffb15 	stw	r5,-20(fp)
    31a8:	e1bffc15 	stw	r6,-16(fp)
    31ac:	e1fffd15 	stw	r7,-12(fp)
    31b0:	d809883a 	mov	r4,sp
    31b4:	2023883a 	mov	r17,r4
    int ret;
    if (datalen > 128) {
    31b8:	e13ffb17 	ldw	r4,-20(fp)
    31bc:	21002050 	cmplti	r4,r4,129
    31c0:	2000021e 	bne	r4,zero,31cc <btc_base58_encode_check+0x44>
        return 0;
    31c4:	0005883a 	mov	r2,zero
    31c8:	00004706 	br	32e8 <btc_base58_encode_check+0x160>
    }
    uint8_t buf[datalen + 32];
    31cc:	e13ffb17 	ldw	r4,-20(fp)
    31d0:	24000804 	addi	r16,r4,32
    31d4:	813fffc4 	addi	r4,r16,-1
    31d8:	e13ff615 	stw	r4,-40(fp)
    31dc:	8009883a 	mov	r4,r16
    31e0:	2019883a 	mov	r12,r4
    31e4:	001b883a 	mov	r13,zero
    31e8:	6008d77a 	srli	r4,r12,29
    31ec:	681290fa 	slli	r9,r13,3
    31f0:	2252b03a 	or	r9,r4,r9
    31f4:	601090fa 	slli	r8,r12,3
    31f8:	8009883a 	mov	r4,r16
    31fc:	2015883a 	mov	r10,r4
    3200:	0017883a 	mov	r11,zero
    3204:	5008d77a 	srli	r4,r10,29
    3208:	580690fa 	slli	r3,r11,3
    320c:	20c6b03a 	or	r3,r4,r3
    3210:	500490fa 	slli	r2,r10,3
    3214:	8005883a 	mov	r2,r16
    3218:	108000c4 	addi	r2,r2,3
    321c:	1004d0ba 	srli	r2,r2,2
    3220:	1085883a 	add	r2,r2,r2
    3224:	1085883a 	add	r2,r2,r2
    3228:	d8b7c83a 	sub	sp,sp,r2
    322c:	d805883a 	mov	r2,sp
    3230:	1005883a 	mov	r2,r2
    3234:	e0bff715 	stw	r2,-36(fp)
    uint8_t* hash = buf + datalen;
    3238:	e0fff717 	ldw	r3,-36(fp)
    323c:	e0bffb17 	ldw	r2,-20(fp)
    3240:	1885883a 	add	r2,r3,r2
    3244:	e0bff815 	stw	r2,-32(fp)
    memcpy(buf, data, datalen);
    3248:	e0bff717 	ldw	r2,-36(fp)
    324c:	e0fffb17 	ldw	r3,-20(fp)
    3250:	180d883a 	mov	r6,r3
    3254:	e17ffa17 	ldw	r5,-24(fp)
    3258:	1009883a 	mov	r4,r2
    325c:	0045c980 	call	45c98 <memcpy>
    sha256_Raw(data, datalen, hash);
    3260:	e0bffb17 	ldw	r2,-20(fp)
    3264:	e1bff817 	ldw	r6,-32(fp)
    3268:	100b883a 	mov	r5,r2
    326c:	e13ffa17 	ldw	r4,-24(fp)
    3270:	003eb140 	call	3eb14 <sha256_Raw>
    sha256_Raw(hash, 32, hash);
    3274:	e1bff817 	ldw	r6,-32(fp)
    3278:	01400804 	movi	r5,32
    327c:	e13ff817 	ldw	r4,-32(fp)
    3280:	003eb140 	call	3eb14 <sha256_Raw>

    size_t res = strsize;
    3284:	e0bffd17 	ldw	r2,-12(fp)
    3288:	e0bff915 	stw	r2,-28(fp)
    if (btc_base58_encode(str, &res, buf, datalen + 4) != true) {
    328c:	e0fff717 	ldw	r3,-36(fp)
    3290:	e0bffb17 	ldw	r2,-20(fp)
    3294:	10800104 	addi	r2,r2,4
    3298:	1009883a 	mov	r4,r2
    329c:	e0bff904 	addi	r2,fp,-28
    32a0:	200f883a 	mov	r7,r4
    32a4:	180d883a 	mov	r6,r3
    32a8:	100b883a 	mov	r5,r2
    32ac:	e13ffc17 	ldw	r4,-16(fp)
    32b0:	0002e040 	call	2e04 <btc_base58_encode>
    32b4:	10800060 	cmpeqi	r2,r2,1
    32b8:	1000021e 	bne	r2,zero,32c4 <btc_base58_encode_check+0x13c>
        ret = 0;
    32bc:	e03ff515 	stw	zero,-44(fp)
    32c0:	00000206 	br	32cc <btc_base58_encode_check+0x144>
    } else {
        ret = res;
    32c4:	e0bff917 	ldw	r2,-28(fp)
    32c8:	e0bff515 	stw	r2,-44(fp)
    }
    memset(buf, 0, sizeof(buf));
    32cc:	e0bff717 	ldw	r2,-36(fp)
    32d0:	8007883a 	mov	r3,r16
    32d4:	180d883a 	mov	r6,r3
    32d8:	000b883a 	mov	r5,zero
    32dc:	1009883a 	mov	r4,r2
    32e0:	0045f3c0 	call	45f3c <memset>
    return ret;
    32e4:	e0bff517 	ldw	r2,-44(fp)
    32e8:	8837883a 	mov	sp,r17
}
    32ec:	e6fffe04 	addi	sp,fp,-8
    32f0:	dfc00317 	ldw	ra,12(sp)
    32f4:	df000217 	ldw	fp,8(sp)
    32f8:	dc400117 	ldw	r17,4(sp)
    32fc:	dc000017 	ldw	r16,0(sp)
    3300:	dec00404 	addi	sp,sp,16
    3304:	f800283a 	ret

00003308 <btc_base58_decode_check>:

int btc_base58_decode_check(const char* str, uint8_t* data, size_t datalen)
{
    3308:	defff804 	addi	sp,sp,-32
    330c:	dfc00715 	stw	ra,28(sp)
    3310:	df000615 	stw	fp,24(sp)
    3314:	df000604 	addi	fp,sp,24
    3318:	e13ffd15 	stw	r4,-12(fp)
    331c:	e17ffe15 	stw	r5,-8(fp)
    3320:	e1bfff15 	stw	r6,-4(fp)
    int ret;
    size_t strl = strlen(str);
    3324:	e13ffd17 	ldw	r4,-12(fp)
    3328:	0046ef40 	call	46ef4 <strlen>
    332c:	e0bffb15 	stw	r2,-20(fp)

    /* buffer needs to be at least the strsize, will be used
       for the whole decoding */
    if (strl > 128 || datalen < strl) {
    3330:	e0bffb17 	ldw	r2,-20(fp)
    3334:	10802068 	cmpgeui	r2,r2,129
    3338:	1000031e 	bne	r2,zero,3348 <btc_base58_decode_check+0x40>
    333c:	e0ffff17 	ldw	r3,-4(fp)
    3340:	e0bffb17 	ldw	r2,-20(fp)
    3344:	1880022e 	bgeu	r3,r2,3350 <btc_base58_decode_check+0x48>
        return 0;
    3348:	0005883a 	mov	r2,zero
    334c:	00002806 	br	33f0 <btc_base58_decode_check+0xe8>
    }

    size_t binsize = strl;
    3350:	e0bffb17 	ldw	r2,-20(fp)
    3354:	e0bffc15 	stw	r2,-16(fp)
    if (btc_base58_decode(data, &binsize, str) != true) {
    3358:	e0bffc04 	addi	r2,fp,-16
    335c:	e1bffd17 	ldw	r6,-12(fp)
    3360:	100b883a 	mov	r5,r2
    3364:	e13ffe17 	ldw	r4,-8(fp)
    3368:	00027040 	call	2704 <btc_base58_decode>
    336c:	10800060 	cmpeqi	r2,r2,1
    3370:	1000011e 	bne	r2,zero,3378 <btc_base58_decode_check+0x70>
        ret = 0;
    3374:	e03ffa15 	stw	zero,-24(fp)
    }

    memmove(data, data + strl - binsize, binsize);
    3378:	e0bffc17 	ldw	r2,-16(fp)
    337c:	e0fffb17 	ldw	r3,-20(fp)
    3380:	1885c83a 	sub	r2,r3,r2
    3384:	e0fffe17 	ldw	r3,-8(fp)
    3388:	1885883a 	add	r2,r3,r2
    338c:	e0fffc17 	ldw	r3,-16(fp)
    3390:	180d883a 	mov	r6,r3
    3394:	100b883a 	mov	r5,r2
    3398:	e13ffe17 	ldw	r4,-8(fp)
    339c:	0045de00 	call	45de0 <memmove>
    memset(data + binsize, 0, datalen - binsize);
    33a0:	e0bffc17 	ldw	r2,-16(fp)
    33a4:	e0fffe17 	ldw	r3,-8(fp)
    33a8:	1889883a 	add	r4,r3,r2
    33ac:	e0bffc17 	ldw	r2,-16(fp)
    33b0:	e0ffff17 	ldw	r3,-4(fp)
    33b4:	1885c83a 	sub	r2,r3,r2
    33b8:	100d883a 	mov	r6,r2
    33bc:	000b883a 	mov	r5,zero
    33c0:	0045f3c0 	call	45f3c <memset>

    if (btc_b58check(data, binsize, str) < 0) {
    33c4:	e0bffc17 	ldw	r2,-16(fp)
    33c8:	e1bffd17 	ldw	r6,-12(fp)
    33cc:	100b883a 	mov	r5,r2
    33d0:	e13ffe17 	ldw	r4,-8(fp)
    33d4:	0002cb40 	call	2cb4 <btc_b58check>
    33d8:	1000020e 	bge	r2,zero,33e4 <btc_base58_decode_check+0xdc>
        ret = 0;
    33dc:	e03ffa15 	stw	zero,-24(fp)
    33e0:	00000206 	br	33ec <btc_base58_decode_check+0xe4>
    } else {
        ret = binsize;
    33e4:	e0bffc17 	ldw	r2,-16(fp)
    33e8:	e0bffa15 	stw	r2,-24(fp)
    }
    return ret;
    33ec:	e0bffa17 	ldw	r2,-24(fp)
}
    33f0:	e037883a 	mov	sp,fp
    33f4:	dfc00117 	ldw	ra,4(sp)
    33f8:	df000017 	ldw	fp,0(sp)
    33fc:	dec00204 	addi	sp,sp,8
    3400:	f800283a 	ret

00003404 <btc_p2pkh_addr_from_hash160>:

btc_bool btc_p2pkh_addr_from_hash160(const uint160 hashin, const btc_chainparams* chain, char *addrout, int len) {
    3404:	defff404 	addi	sp,sp,-48
    3408:	dfc00b15 	stw	ra,44(sp)
    340c:	df000a15 	stw	fp,40(sp)
    3410:	df000a04 	addi	fp,sp,40
    3414:	e13ffc15 	stw	r4,-16(fp)
    3418:	e17ffd15 	stw	r5,-12(fp)
    341c:	e1bffe15 	stw	r6,-8(fp)
    3420:	e1ffff15 	stw	r7,-4(fp)
    uint8_t hash160[sizeof(uint160)+1];
    hash160[0] = chain->b58prefix_pubkey_address;
    3424:	e0bffd17 	ldw	r2,-12(fp)
    3428:	10800803 	ldbu	r2,32(r2)
    342c:	e0bff605 	stb	r2,-40(fp)
    memcpy(hash160 + 1, hashin, sizeof(uint160));
    3430:	e0bff644 	addi	r2,fp,-39
    3434:	01800504 	movi	r6,20
    3438:	e17ffc17 	ldw	r5,-16(fp)
    343c:	1009883a 	mov	r4,r2
    3440:	0045c980 	call	45c98 <memcpy>

    return (btc_base58_encode_check(hash160, sizeof(uint160)+1, addrout, len) > 0);
    3444:	e1ffff17 	ldw	r7,-4(fp)
    3448:	e1bffe17 	ldw	r6,-8(fp)
    344c:	01400544 	movi	r5,21
    3450:	e13ff604 	addi	r4,fp,-40
    3454:	00031880 	call	3188 <btc_base58_encode_check>
    3458:	0084803a 	cmplt	r2,zero,r2
}
    345c:	e037883a 	mov	sp,fp
    3460:	dfc00117 	ldw	ra,4(sp)
    3464:	df000017 	ldw	fp,0(sp)
    3468:	dec00204 	addi	sp,sp,8
    346c:	f800283a 	ret

00003470 <btc_p2wpkh_addr_from_hash160>:

btc_bool btc_p2wpkh_addr_from_hash160(const uint160 hashin, const btc_chainparams* chain, char *addrout) {
    3470:	defffa04 	addi	sp,sp,-24
    3474:	dfc00515 	stw	ra,20(sp)
    3478:	df000415 	stw	fp,16(sp)
    347c:	df000404 	addi	fp,sp,16
    3480:	e13ffd15 	stw	r4,-12(fp)
    3484:	e17ffe15 	stw	r5,-8(fp)
    3488:	e1bfff15 	stw	r6,-4(fp)
    return segwit_addr_encode(addrout, chain->bech32_hrp, 0, hashin, sizeof(uint160));
    348c:	e0bffe17 	ldw	r2,-8(fp)
    3490:	10c00884 	addi	r3,r2,34
    3494:	00800504 	movi	r2,20
    3498:	d8800015 	stw	r2,0(sp)
    349c:	e1fffd17 	ldw	r7,-12(fp)
    34a0:	000d883a 	mov	r6,zero
    34a4:	180b883a 	mov	r5,r3
    34a8:	e13fff17 	ldw	r4,-4(fp)
    34ac:	003d27c0 	call	3d27c <segwit_addr_encode>
}
    34b0:	e037883a 	mov	sp,fp
    34b4:	dfc00117 	ldw	ra,4(sp)
    34b8:	df000017 	ldw	fp,0(sp)
    34bc:	dec00204 	addi	sp,sp,8
    34c0:	f800283a 	ret

000034c4 <btc_hash_sngl_sha256>:
    sha256_Raw(hashout, SHA256_DIGEST_LENGTH, hashout);
}

//single sha256 hash
LIBBTC_API static inline void btc_hash_sngl_sha256(const unsigned char* datain, size_t length, uint256 hashout)
{
    34c4:	defffb04 	addi	sp,sp,-20
    34c8:	dfc00415 	stw	ra,16(sp)
    34cc:	df000315 	stw	fp,12(sp)
    34d0:	df000304 	addi	fp,sp,12
    34d4:	e13ffd15 	stw	r4,-12(fp)
    34d8:	e17ffe15 	stw	r5,-8(fp)
    34dc:	e1bfff15 	stw	r6,-4(fp)
    sha256_Raw(datain, length, hashout);
    34e0:	e1bfff17 	ldw	r6,-4(fp)
    34e4:	e17ffe17 	ldw	r5,-8(fp)
    34e8:	e13ffd17 	ldw	r4,-12(fp)
    34ec:	003eb140 	call	3eb14 <sha256_Raw>
}
    34f0:	0001883a 	nop
    34f4:	e037883a 	mov	sp,fp
    34f8:	dfc00117 	ldw	ra,4(sp)
    34fc:	df000017 	ldw	fp,0(sp)
    3500:	dec00204 	addi	sp,sp,8
    3504:	f800283a 	ret

00003508 <print_node>:

#include "..\include\btc\memory.h"


void print_node(btc_hdnode* hdnode)
{
    3508:	defffa04 	addi	sp,sp,-24
    350c:	dfc00515 	stw	ra,20(sp)
    3510:	df000415 	stw	fp,16(sp)
    3514:	df000404 	addi	fp,sp,16
    3518:	e13fff15 	stw	r4,-4(fp)
    printf("depth: %d\n", hdnode -> depth);
    351c:	e0bfff17 	ldw	r2,-4(fp)
    3520:	10800017 	ldw	r2,0(r2)
    3524:	100b883a 	mov	r5,r2
    3528:	010001b4 	movhi	r4,6
    352c:	21216904 	addi	r4,r4,-31324
    3530:	00460940 	call	46094 <printf>
    printf("fingerprint: %d\n", hdnode -> fingerprint);
    3534:	e0bfff17 	ldw	r2,-4(fp)
    3538:	10800117 	ldw	r2,4(r2)
    353c:	100b883a 	mov	r5,r2
    3540:	010001b4 	movhi	r4,6
    3544:	21216c04 	addi	r4,r4,-31312
    3548:	00460940 	call	46094 <printf>
    printf("child_num: %d\n", hdnode -> child_num);
    354c:	e0bfff17 	ldw	r2,-4(fp)
    3550:	10800217 	ldw	r2,8(r2)
    3554:	100b883a 	mov	r5,r2
    3558:	010001b4 	movhi	r4,6
    355c:	21217104 	addi	r4,r4,-31292
    3560:	00460940 	call	46094 <printf>
    printf("depth: %d\n", hdnode -> depth);
    3564:	e0bfff17 	ldw	r2,-4(fp)
    3568:	10800017 	ldw	r2,0(r2)
    356c:	100b883a 	mov	r5,r2
    3570:	010001b4 	movhi	r4,6
    3574:	21216904 	addi	r4,r4,-31324
    3578:	00460940 	call	46094 <printf>

    printf("chaincode: ");
    357c:	010001b4 	movhi	r4,6
    3580:	21217504 	addi	r4,r4,-31276
    3584:	00460940 	call	46094 <printf>
    for (int i = 0; i < 32; i++) {
    3588:	e03ffc15 	stw	zero,-16(fp)
    358c:	00000d06 	br	35c4 <print_node+0xbc>
        printf("%d", hdnode->chain_code[i]);
    3590:	e0ffff17 	ldw	r3,-4(fp)
    3594:	e0bffc17 	ldw	r2,-16(fp)
    3598:	1885883a 	add	r2,r3,r2
    359c:	10800304 	addi	r2,r2,12
    35a0:	10800003 	ldbu	r2,0(r2)
    35a4:	10803fcc 	andi	r2,r2,255
    35a8:	100b883a 	mov	r5,r2
    35ac:	010001b4 	movhi	r4,6
    35b0:	21217804 	addi	r4,r4,-31264
    35b4:	00460940 	call	46094 <printf>
    printf("fingerprint: %d\n", hdnode -> fingerprint);
    printf("child_num: %d\n", hdnode -> child_num);
    printf("depth: %d\n", hdnode -> depth);

    printf("chaincode: ");
    for (int i = 0; i < 32; i++) {
    35b8:	e0bffc17 	ldw	r2,-16(fp)
    35bc:	10800044 	addi	r2,r2,1
    35c0:	e0bffc15 	stw	r2,-16(fp)
    35c4:	e0bffc17 	ldw	r2,-16(fp)
    35c8:	10800810 	cmplti	r2,r2,32
    35cc:	103ff01e 	bne	r2,zero,3590 <__alt_mem_epcs_flash_controller+0xfdff2590>
        printf("%d", hdnode->chain_code[i]);
    }
    printf("\n");
    35d0:	01000284 	movi	r4,10
    35d4:	00460d80 	call	460d8 <putchar>

    printf("private key: ");
    35d8:	010001b4 	movhi	r4,6
    35dc:	21217904 	addi	r4,r4,-31260
    35e0:	00460940 	call	46094 <printf>
    for (int i = 0; i < 32; i++) {
    35e4:	e03ffd15 	stw	zero,-12(fp)
    35e8:	00000d06 	br	3620 <print_node+0x118>
        printf("%d", hdnode->private_key[i]);
    35ec:	e0ffff17 	ldw	r3,-4(fp)
    35f0:	e0bffd17 	ldw	r2,-12(fp)
    35f4:	1885883a 	add	r2,r3,r2
    35f8:	10800b04 	addi	r2,r2,44
    35fc:	10800003 	ldbu	r2,0(r2)
    3600:	10803fcc 	andi	r2,r2,255
    3604:	100b883a 	mov	r5,r2
    3608:	010001b4 	movhi	r4,6
    360c:	21217804 	addi	r4,r4,-31264
    3610:	00460940 	call	46094 <printf>
        printf("%d", hdnode->chain_code[i]);
    }
    printf("\n");

    printf("private key: ");
    for (int i = 0; i < 32; i++) {
    3614:	e0bffd17 	ldw	r2,-12(fp)
    3618:	10800044 	addi	r2,r2,1
    361c:	e0bffd15 	stw	r2,-12(fp)
    3620:	e0bffd17 	ldw	r2,-12(fp)
    3624:	10800810 	cmplti	r2,r2,32
    3628:	103ff01e 	bne	r2,zero,35ec <__alt_mem_epcs_flash_controller+0xfdff25ec>
        printf("%d", hdnode->private_key[i]);
    }
    printf("\n");
    362c:	01000284 	movi	r4,10
    3630:	00460d80 	call	460d8 <putchar>

    printf("public_key: ");
    3634:	010001b4 	movhi	r4,6
    3638:	21217d04 	addi	r4,r4,-31244
    363c:	00460940 	call	46094 <printf>
    for (int i = 0; i < 33; i++) {
    3640:	e03ffe15 	stw	zero,-8(fp)
    3644:	00000d06 	br	367c <print_node+0x174>
        printf("%d", hdnode->public_key[i]);
    3648:	e0ffff17 	ldw	r3,-4(fp)
    364c:	e0bffe17 	ldw	r2,-8(fp)
    3650:	1885883a 	add	r2,r3,r2
    3654:	10801304 	addi	r2,r2,76
    3658:	10800003 	ldbu	r2,0(r2)
    365c:	10803fcc 	andi	r2,r2,255
    3660:	100b883a 	mov	r5,r2
    3664:	010001b4 	movhi	r4,6
    3668:	21217804 	addi	r4,r4,-31264
    366c:	00460940 	call	46094 <printf>
        printf("%d", hdnode->private_key[i]);
    }
    printf("\n");

    printf("public_key: ");
    for (int i = 0; i < 33; i++) {
    3670:	e0bffe17 	ldw	r2,-8(fp)
    3674:	10800044 	addi	r2,r2,1
    3678:	e0bffe15 	stw	r2,-8(fp)
    367c:	e0bffe17 	ldw	r2,-8(fp)
    3680:	10800850 	cmplti	r2,r2,33
    3684:	103ff01e 	bne	r2,zero,3648 <__alt_mem_epcs_flash_controller+0xfdff2648>
        printf("%d", hdnode->public_key[i]);
    }
    printf("\n\n");
    3688:	010001b4 	movhi	r4,6
    368c:	21218104 	addi	r4,r4,-31228
    3690:	00461b00 	call	461b0 <puts>
}
    3694:	0001883a 	nop
    3698:	e037883a 	mov	sp,fp
    369c:	dfc00117 	ldw	ra,4(sp)
    36a0:	df000017 	ldw	fp,0(sp)
    36a4:	dec00204 	addi	sp,sp,8
    36a8:	f800283a 	ret

000036ac <write_be>:


// write 4 big endian bytes
static void write_be(uint8_t* data, uint32_t x)
{
    36ac:	defffd04 	addi	sp,sp,-12
    36b0:	df000215 	stw	fp,8(sp)
    36b4:	df000204 	addi	fp,sp,8
    36b8:	e13ffe15 	stw	r4,-8(fp)
    36bc:	e17fff15 	stw	r5,-4(fp)
    data[0] = x >> 24;
    36c0:	e0bfff17 	ldw	r2,-4(fp)
    36c4:	1004d63a 	srli	r2,r2,24
    36c8:	1007883a 	mov	r3,r2
    36cc:	e0bffe17 	ldw	r2,-8(fp)
    36d0:	10c00005 	stb	r3,0(r2)
    data[1] = x >> 16;
    36d4:	e0bffe17 	ldw	r2,-8(fp)
    36d8:	10800044 	addi	r2,r2,1
    36dc:	e0ffff17 	ldw	r3,-4(fp)
    36e0:	1806d43a 	srli	r3,r3,16
    36e4:	10c00005 	stb	r3,0(r2)
    data[2] = x >> 8;
    36e8:	e0bffe17 	ldw	r2,-8(fp)
    36ec:	10800084 	addi	r2,r2,2
    36f0:	e0ffff17 	ldw	r3,-4(fp)
    36f4:	1806d23a 	srli	r3,r3,8
    36f8:	10c00005 	stb	r3,0(r2)
    data[3] = x;
    36fc:	e0bffe17 	ldw	r2,-8(fp)
    3700:	108000c4 	addi	r2,r2,3
    3704:	e0ffff17 	ldw	r3,-4(fp)
    3708:	10c00005 	stb	r3,0(r2)
}
    370c:	0001883a 	nop
    3710:	e037883a 	mov	sp,fp
    3714:	df000017 	ldw	fp,0(sp)
    3718:	dec00104 	addi	sp,sp,4
    371c:	f800283a 	ret

00003720 <read_be>:


// read 4 big endian bytes
static uint32_t read_be(const uint8_t* data)
{
    3720:	defffe04 	addi	sp,sp,-8
    3724:	df000115 	stw	fp,4(sp)
    3728:	df000104 	addi	fp,sp,4
    372c:	e13fff15 	stw	r4,-4(fp)
    return (((uint32_t)data[0]) << 24) |
    3730:	e0bfff17 	ldw	r2,-4(fp)
    3734:	10800003 	ldbu	r2,0(r2)
    3738:	10803fcc 	andi	r2,r2,255
    373c:	1006963a 	slli	r3,r2,24
           (((uint32_t)data[1]) << 16) |
    3740:	e0bfff17 	ldw	r2,-4(fp)
    3744:	10800044 	addi	r2,r2,1
    3748:	10800003 	ldbu	r2,0(r2)
    374c:	10803fcc 	andi	r2,r2,255
    3750:	1004943a 	slli	r2,r2,16


// read 4 big endian bytes
static uint32_t read_be(const uint8_t* data)
{
    return (((uint32_t)data[0]) << 24) |
    3754:	1886b03a 	or	r3,r3,r2
           (((uint32_t)data[1]) << 16) |
           (((uint32_t)data[2]) << 8) |
    3758:	e0bfff17 	ldw	r2,-4(fp)
    375c:	10800084 	addi	r2,r2,2
    3760:	10800003 	ldbu	r2,0(r2)
    3764:	10803fcc 	andi	r2,r2,255
    3768:	1004923a 	slli	r2,r2,8

// read 4 big endian bytes
static uint32_t read_be(const uint8_t* data)
{
    return (((uint32_t)data[0]) << 24) |
           (((uint32_t)data[1]) << 16) |
    376c:	1886b03a 	or	r3,r3,r2
           (((uint32_t)data[2]) << 8) |
           (((uint32_t)data[3]));
    3770:	e0bfff17 	ldw	r2,-4(fp)
    3774:	108000c4 	addi	r2,r2,3
    3778:	10800003 	ldbu	r2,0(r2)
    377c:	10803fcc 	andi	r2,r2,255


// read 4 big endian bytes
static uint32_t read_be(const uint8_t* data)
{
    return (((uint32_t)data[0]) << 24) |
    3780:	1884b03a 	or	r2,r3,r2
           (((uint32_t)data[1]) << 16) |
           (((uint32_t)data[2]) << 8) |
           (((uint32_t)data[3]));
}
    3784:	e037883a 	mov	sp,fp
    3788:	df000017 	ldw	fp,0(sp)
    378c:	dec00104 	addi	sp,sp,4
    3790:	f800283a 	ret

00003794 <btc_hdnode_new>:

btc_hdnode* btc_hdnode_new()
{
    3794:	defffd04 	addi	sp,sp,-12
    3798:	dfc00215 	stw	ra,8(sp)
    379c:	df000115 	stw	fp,4(sp)
    37a0:	df000104 	addi	fp,sp,4
    btc_hdnode* hdnode;
    hdnode = btc_calloc(1, sizeof(*hdnode));
    37a4:	01401c04 	movi	r5,112
    37a8:	01000044 	movi	r4,1
    37ac:	000663c0 	call	663c <btc_calloc>
    37b0:	e0bfff15 	stw	r2,-4(fp)
    return hdnode;
    37b4:	e0bfff17 	ldw	r2,-4(fp)
}
    37b8:	e037883a 	mov	sp,fp
    37bc:	dfc00117 	ldw	ra,4(sp)
    37c0:	df000017 	ldw	fp,0(sp)
    37c4:	dec00204 	addi	sp,sp,8
    37c8:	f800283a 	ret

000037cc <btc_hdnode_copy>:

btc_hdnode* btc_hdnode_copy(const btc_hdnode* hdnode)
{
    37cc:	defffc04 	addi	sp,sp,-16
    37d0:	dfc00315 	stw	ra,12(sp)
    37d4:	df000215 	stw	fp,8(sp)
    37d8:	df000204 	addi	fp,sp,8
    37dc:	e13fff15 	stw	r4,-4(fp)
    btc_hdnode* newnode = btc_hdnode_new();
    37e0:	00037940 	call	3794 <btc_hdnode_new>
    37e4:	e0bffe15 	stw	r2,-8(fp)

    newnode->depth = hdnode->depth;
    37e8:	e0bfff17 	ldw	r2,-4(fp)
    37ec:	10c00017 	ldw	r3,0(r2)
    37f0:	e0bffe17 	ldw	r2,-8(fp)
    37f4:	10c00015 	stw	r3,0(r2)
    newnode->fingerprint = hdnode->fingerprint;
    37f8:	e0bfff17 	ldw	r2,-4(fp)
    37fc:	10c00117 	ldw	r3,4(r2)
    3800:	e0bffe17 	ldw	r2,-8(fp)
    3804:	10c00115 	stw	r3,4(r2)
    newnode->child_num = hdnode->child_num;
    3808:	e0bfff17 	ldw	r2,-4(fp)
    380c:	10c00217 	ldw	r3,8(r2)
    3810:	e0bffe17 	ldw	r2,-8(fp)
    3814:	10c00215 	stw	r3,8(r2)
    memcpy(newnode->chain_code, hdnode->chain_code, sizeof(hdnode->chain_code));
    3818:	e0bffe17 	ldw	r2,-8(fp)
    381c:	10c00304 	addi	r3,r2,12
    3820:	e0bfff17 	ldw	r2,-4(fp)
    3824:	10800304 	addi	r2,r2,12
    3828:	01800804 	movi	r6,32
    382c:	100b883a 	mov	r5,r2
    3830:	1809883a 	mov	r4,r3
    3834:	0045c980 	call	45c98 <memcpy>
    memcpy(newnode->private_key, hdnode->private_key, sizeof(hdnode->private_key));
    3838:	e0bffe17 	ldw	r2,-8(fp)
    383c:	10c00b04 	addi	r3,r2,44
    3840:	e0bfff17 	ldw	r2,-4(fp)
    3844:	10800b04 	addi	r2,r2,44
    3848:	01800804 	movi	r6,32
    384c:	100b883a 	mov	r5,r2
    3850:	1809883a 	mov	r4,r3
    3854:	0045c980 	call	45c98 <memcpy>
    memcpy(newnode->public_key, hdnode->public_key, sizeof(hdnode->public_key));
    3858:	e0bffe17 	ldw	r2,-8(fp)
    385c:	10c01304 	addi	r3,r2,76
    3860:	e0bfff17 	ldw	r2,-4(fp)
    3864:	10801304 	addi	r2,r2,76
    3868:	01800844 	movi	r6,33
    386c:	100b883a 	mov	r5,r2
    3870:	1809883a 	mov	r4,r3
    3874:	0045c980 	call	45c98 <memcpy>

    return newnode;
    3878:	e0bffe17 	ldw	r2,-8(fp)
}
    387c:	e037883a 	mov	sp,fp
    3880:	dfc00117 	ldw	ra,4(sp)
    3884:	df000017 	ldw	fp,0(sp)
    3888:	dec00204 	addi	sp,sp,8
    388c:	f800283a 	ret

00003890 <btc_hdnode_free>:

void btc_hdnode_free(btc_hdnode* hdnode)
{
    3890:	defffd04 	addi	sp,sp,-12
    3894:	dfc00215 	stw	ra,8(sp)
    3898:	df000115 	stw	fp,4(sp)
    389c:	df000104 	addi	fp,sp,4
    38a0:	e13fff15 	stw	r4,-4(fp)
    memset(hdnode->chain_code, 0, sizeof(hdnode->chain_code));
    38a4:	e0bfff17 	ldw	r2,-4(fp)
    38a8:	10800304 	addi	r2,r2,12
    38ac:	01800804 	movi	r6,32
    38b0:	000b883a 	mov	r5,zero
    38b4:	1009883a 	mov	r4,r2
    38b8:	0045f3c0 	call	45f3c <memset>
    memset(hdnode->private_key, 0, sizeof(hdnode->private_key));
    38bc:	e0bfff17 	ldw	r2,-4(fp)
    38c0:	10800b04 	addi	r2,r2,44
    38c4:	01800804 	movi	r6,32
    38c8:	000b883a 	mov	r5,zero
    38cc:	1009883a 	mov	r4,r2
    38d0:	0045f3c0 	call	45f3c <memset>
    memset(hdnode->public_key, 0, sizeof(hdnode->public_key));
    38d4:	e0bfff17 	ldw	r2,-4(fp)
    38d8:	10801304 	addi	r2,r2,76
    38dc:	01800844 	movi	r6,33
    38e0:	000b883a 	mov	r5,zero
    38e4:	1009883a 	mov	r4,r2
    38e8:	0045f3c0 	call	45f3c <memset>
    btc_free(hdnode);
    38ec:	e13fff17 	ldw	r4,-4(fp)
    38f0:	00066c40 	call	66c4 <btc_free>
}
    38f4:	0001883a 	nop
    38f8:	e037883a 	mov	sp,fp
    38fc:	dfc00117 	ldw	ra,4(sp)
    3900:	df000017 	ldw	fp,0(sp)
    3904:	dec00204 	addi	sp,sp,8
    3908:	f800283a 	ret

0000390c <btc_hdnode_from_seed>:

btc_bool btc_hdnode_from_seed(const uint8_t* seed, int seed_len, btc_hdnode* out)
{
    390c:	deffea04 	addi	sp,sp,-88
    3910:	dfc01515 	stw	ra,84(sp)
    3914:	df001415 	stw	fp,80(sp)
    3918:	df001404 	addi	fp,sp,80
    391c:	e13ffd15 	stw	r4,-12(fp)
    3920:	e17ffe15 	stw	r5,-8(fp)
    3924:	e1bfff15 	stw	r6,-4(fp)
    uint8_t I[BTC_ECKEY_PKEY_LENGTH + BTC_BIP32_CHAINCODE_SIZE];
    memset(out, 0, sizeof(btc_hdnode));
    3928:	01801c04 	movi	r6,112
    392c:	000b883a 	mov	r5,zero
    3930:	e13fff17 	ldw	r4,-4(fp)
    3934:	0045f3c0 	call	45f3c <memset>
    out->depth = 0;
    3938:	e0bfff17 	ldw	r2,-4(fp)
    393c:	10000015 	stw	zero,0(r2)
    out->fingerprint = 0x00000000;
    3940:	e0bfff17 	ldw	r2,-4(fp)
    3944:	10000115 	stw	zero,4(r2)
    out->child_num = 0;
    3948:	e0bfff17 	ldw	r2,-4(fp)
    394c:	10000215 	stw	zero,8(r2)

    hmac_sha512((const uint8_t*)"Bitcoin seed", 12, seed, seed_len, I);
    3950:	e0bffe17 	ldw	r2,-8(fp)
    3954:	e0ffed04 	addi	r3,fp,-76
    3958:	d8c00015 	stw	r3,0(sp)
    395c:	100f883a 	mov	r7,r2
    3960:	e1bffd17 	ldw	r6,-12(fp)
    3964:	01400304 	movi	r5,12
    3968:	010001b4 	movhi	r4,6
    396c:	21218204 	addi	r4,r4,-31224
    3970:	004096c0 	call	4096c <hmac_sha512>
    memcpy(out->private_key, I, BTC_ECKEY_PKEY_LENGTH);
    3974:	e0bfff17 	ldw	r2,-4(fp)
    3978:	10800b04 	addi	r2,r2,44
    397c:	01800804 	movi	r6,32
    3980:	e17fed04 	addi	r5,fp,-76
    3984:	1009883a 	mov	r4,r2
    3988:	0045c980 	call	45c98 <memcpy>

    if (!btc_ecc_verify_privatekey(out->private_key)) {
    398c:	e0bfff17 	ldw	r2,-4(fp)
    3990:	10800b04 	addi	r2,r2,44
    3994:	1009883a 	mov	r4,r2
    3998:	0005f000 	call	5f00 <btc_ecc_verify_privatekey>
    399c:	10803fcc 	andi	r2,r2,255
    39a0:	1000061e 	bne	r2,zero,39bc <btc_hdnode_from_seed+0xb0>
        memset(I, 0, sizeof(I));
    39a4:	01801004 	movi	r6,64
    39a8:	000b883a 	mov	r5,zero
    39ac:	e13fed04 	addi	r4,fp,-76
    39b0:	0045f3c0 	call	45f3c <memset>
        return false;
    39b4:	0005883a 	mov	r2,zero
    39b8:	00000e06 	br	39f4 <btc_hdnode_from_seed+0xe8>
    }

//    print_node(out);

    memcpy(out->chain_code, I + BTC_ECKEY_PKEY_LENGTH, BTC_BIP32_CHAINCODE_SIZE);
    39bc:	e0bfff17 	ldw	r2,-4(fp)
    39c0:	10800304 	addi	r2,r2,12
    39c4:	e0fff504 	addi	r3,fp,-44
    39c8:	01800804 	movi	r6,32
    39cc:	180b883a 	mov	r5,r3
    39d0:	1009883a 	mov	r4,r2
    39d4:	0045c980 	call	45c98 <memcpy>
    btc_hdnode_fill_public_key(out);
    39d8:	e13fff17 	ldw	r4,-4(fp)
    39dc:	0003e980 	call	3e98 <btc_hdnode_fill_public_key>

//    print_node(out);

    memset(I, 0, sizeof(I));
    39e0:	01801004 	movi	r6,64
    39e4:	000b883a 	mov	r5,zero
    39e8:	e13fed04 	addi	r4,fp,-76
    39ec:	0045f3c0 	call	45f3c <memset>
    return true;
    39f0:	00800044 	movi	r2,1
}
    39f4:	e037883a 	mov	sp,fp
    39f8:	dfc00117 	ldw	ra,4(sp)
    39fc:	df000017 	ldw	fp,0(sp)
    3a00:	dec00204 	addi	sp,sp,8
    3a04:	f800283a 	ret

00003a08 <btc_hdnode_public_ckd>:


btc_bool btc_hdnode_public_ckd(btc_hdnode* inout, uint32_t i)
{
    3a08:	deffd804 	addi	sp,sp,-160
    3a0c:	dfc02715 	stw	ra,156(sp)
    3a10:	df002615 	stw	fp,152(sp)
    3a14:	df002604 	addi	fp,sp,152
    3a18:	e13ffe15 	stw	r4,-8(fp)
    3a1c:	e17fff15 	stw	r5,-4(fp)
    uint8_t data[1 + 32 + 4];
    uint8_t I[32 + BTC_BIP32_CHAINCODE_SIZE];
    uint8_t fingerprint[32];

    if (i & 0x80000000) { // private derivation
    3a20:	e0bfff17 	ldw	r2,-4(fp)
    3a24:	1000020e 	bge	r2,zero,3a30 <btc_hdnode_public_ckd+0x28>
        return false;
    3a28:	0005883a 	mov	r2,zero
    3a2c:	00006706 	br	3bcc <btc_hdnode_public_ckd+0x1c4>
    } else { // public derivation
        memcpy(data, inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH);
    3a30:	e0bffe17 	ldw	r2,-8(fp)
    3a34:	10c01304 	addi	r3,r2,76
    3a38:	e0bfdc04 	addi	r2,fp,-144
    3a3c:	01800844 	movi	r6,33
    3a40:	180b883a 	mov	r5,r3
    3a44:	1009883a 	mov	r4,r2
    3a48:	0045c980 	call	45c98 <memcpy>
    }
    write_be(data + BTC_ECKEY_COMPRESSED_LENGTH, i);
    3a4c:	e0bfdc04 	addi	r2,fp,-144
    3a50:	10800844 	addi	r2,r2,33
    3a54:	e17fff17 	ldw	r5,-4(fp)
    3a58:	1009883a 	mov	r4,r2
    3a5c:	00036ac0 	call	36ac <write_be>

    sha256_Raw(inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH, fingerprint);
    3a60:	e0bffe17 	ldw	r2,-8(fp)
    3a64:	10801304 	addi	r2,r2,76
    3a68:	e0fff544 	addi	r3,fp,-43
    3a6c:	180d883a 	mov	r6,r3
    3a70:	01400844 	movi	r5,33
    3a74:	1009883a 	mov	r4,r2
    3a78:	003eb140 	call	3eb14 <sha256_Raw>
    btc_ripemd160(fingerprint, 32, fingerprint);
    3a7c:	e0fff544 	addi	r3,fp,-43
    3a80:	e0bff544 	addi	r2,fp,-43
    3a84:	180d883a 	mov	r6,r3
    3a88:	01400804 	movi	r5,32
    3a8c:	1009883a 	mov	r4,r2
    3a90:	000a6a40 	call	a6a4 <btc_ripemd160>
    inout->fingerprint = (fingerprint[0] << 24) + (fingerprint[1] << 16) + (fingerprint[2] << 8) + fingerprint[3];
    3a94:	e0bff543 	ldbu	r2,-43(fp)
    3a98:	10803fcc 	andi	r2,r2,255
    3a9c:	1006963a 	slli	r3,r2,24
    3aa0:	e0bff583 	ldbu	r2,-42(fp)
    3aa4:	10803fcc 	andi	r2,r2,255
    3aa8:	1004943a 	slli	r2,r2,16
    3aac:	1887883a 	add	r3,r3,r2
    3ab0:	e0bff5c3 	ldbu	r2,-41(fp)
    3ab4:	10803fcc 	andi	r2,r2,255
    3ab8:	1004923a 	slli	r2,r2,8
    3abc:	1887883a 	add	r3,r3,r2
    3ac0:	e0bff603 	ldbu	r2,-40(fp)
    3ac4:	10803fcc 	andi	r2,r2,255
    3ac8:	1885883a 	add	r2,r3,r2
    3acc:	1007883a 	mov	r3,r2
    3ad0:	e0bffe17 	ldw	r2,-8(fp)
    3ad4:	10c00115 	stw	r3,4(r2)

    memset(inout->private_key, 0, 32);
    3ad8:	e0bffe17 	ldw	r2,-8(fp)
    3adc:	10800b04 	addi	r2,r2,44
    3ae0:	01800804 	movi	r6,32
    3ae4:	000b883a 	mov	r5,zero
    3ae8:	1009883a 	mov	r4,r2
    3aec:	0045f3c0 	call	45f3c <memset>

    int failed = 0;
    3af0:	e03fdb15 	stw	zero,-148(fp)
    hmac_sha512(inout->chain_code, 32, data, sizeof(data), I);
    3af4:	e0bffe17 	ldw	r2,-8(fp)
    3af8:	10c00304 	addi	r3,r2,12
    3afc:	e13fdc04 	addi	r4,fp,-144
    3b00:	e0bfe544 	addi	r2,fp,-107
    3b04:	d8800015 	stw	r2,0(sp)
    3b08:	01c00944 	movi	r7,37
    3b0c:	200d883a 	mov	r6,r4
    3b10:	01400804 	movi	r5,32
    3b14:	1809883a 	mov	r4,r3
    3b18:	004096c0 	call	4096c <hmac_sha512>
    memcpy(inout->chain_code, I + 32, BTC_BIP32_CHAINCODE_SIZE);
    3b1c:	e0bffe17 	ldw	r2,-8(fp)
    3b20:	10c00304 	addi	r3,r2,12
    3b24:	e0bfe544 	addi	r2,fp,-107
    3b28:	10800804 	addi	r2,r2,32
    3b2c:	01800804 	movi	r6,32
    3b30:	100b883a 	mov	r5,r2
    3b34:	1809883a 	mov	r4,r3
    3b38:	0045c980 	call	45c98 <memcpy>


    if (!btc_ecc_public_key_tweak_add(inout->public_key, I))
    3b3c:	e0bffe17 	ldw	r2,-8(fp)
    3b40:	10801304 	addi	r2,r2,76
    3b44:	e0ffe544 	addi	r3,fp,-107
    3b48:	180b883a 	mov	r5,r3
    3b4c:	1009883a 	mov	r4,r2
    3b50:	0005e240 	call	5e24 <btc_ecc_public_key_tweak_add>
    3b54:	10803fcc 	andi	r2,r2,255
    3b58:	1000011e 	bne	r2,zero,3b60 <btc_hdnode_public_ckd+0x158>
        failed = false;
    3b5c:	e03fdb15 	stw	zero,-148(fp)

    if (!failed) {
    3b60:	e0bfdb17 	ldw	r2,-148(fp)
    3b64:	1000081e 	bne	r2,zero,3b88 <btc_hdnode_public_ckd+0x180>
        inout->depth++;
    3b68:	e0bffe17 	ldw	r2,-8(fp)
    3b6c:	10800017 	ldw	r2,0(r2)
    3b70:	10c00044 	addi	r3,r2,1
    3b74:	e0bffe17 	ldw	r2,-8(fp)
    3b78:	10c00015 	stw	r3,0(r2)
        inout->child_num = i;
    3b7c:	e0bffe17 	ldw	r2,-8(fp)
    3b80:	e0ffff17 	ldw	r3,-4(fp)
    3b84:	10c00215 	stw	r3,8(r2)
    }

    // Wipe all stack data.
    memset(data, 0, sizeof(data));
    3b88:	e0bfdc04 	addi	r2,fp,-144
    3b8c:	01800944 	movi	r6,37
    3b90:	000b883a 	mov	r5,zero
    3b94:	1009883a 	mov	r4,r2
    3b98:	0045f3c0 	call	45f3c <memset>
    memset(I, 0, sizeof(I));
    3b9c:	e0bfe544 	addi	r2,fp,-107
    3ba0:	01801004 	movi	r6,64
    3ba4:	000b883a 	mov	r5,zero
    3ba8:	1009883a 	mov	r4,r2
    3bac:	0045f3c0 	call	45f3c <memset>
    memset(fingerprint, 0, sizeof(fingerprint));
    3bb0:	e0bff544 	addi	r2,fp,-43
    3bb4:	01800804 	movi	r6,32
    3bb8:	000b883a 	mov	r5,zero
    3bbc:	1009883a 	mov	r4,r2
    3bc0:	0045f3c0 	call	45f3c <memset>

    return failed ? false : true;
    3bc4:	e0bfdb17 	ldw	r2,-148(fp)
    3bc8:	1005003a 	cmpeq	r2,r2,zero
}
    3bcc:	e037883a 	mov	sp,fp
    3bd0:	dfc00117 	ldw	ra,4(sp)
    3bd4:	df000017 	ldw	fp,0(sp)
    3bd8:	dec00204 	addi	sp,sp,8
    3bdc:	f800283a 	ret

00003be0 <btc_hdnode_private_ckd>:


btc_bool btc_hdnode_private_ckd(btc_hdnode* inout, uint32_t i)
{
    3be0:	deffc804 	addi	sp,sp,-224
    3be4:	dfc03715 	stw	ra,220(sp)
    3be8:	df003615 	stw	fp,216(sp)
    3bec:	df003604 	addi	fp,sp,216
    3bf0:	e13ffe15 	stw	r4,-8(fp)
    3bf4:	e17fff15 	stw	r5,-4(fp)
    uint8_t data[1 + BTC_ECKEY_PKEY_LENGTH + 4];
    uint8_t I[BTC_ECKEY_PKEY_LENGTH + BTC_BIP32_CHAINCODE_SIZE];
    uint8_t fingerprint[BTC_BIP32_CHAINCODE_SIZE];
    uint8_t p[BTC_ECKEY_PKEY_LENGTH], z[BTC_ECKEY_PKEY_LENGTH];

    if (i & 0x80000000) { // private derivation
    3bf8:	e0bfff17 	ldw	r2,-4(fp)
    3bfc:	10000a0e 	bge	r2,zero,3c28 <btc_hdnode_private_ckd+0x48>
        data[0] = 0;
    3c00:	e03fcc05 	stb	zero,-208(fp)
        memcpy(data + 1, inout->private_key, BTC_ECKEY_PKEY_LENGTH);
    3c04:	e0bfcc04 	addi	r2,fp,-208
    3c08:	10800044 	addi	r2,r2,1
    3c0c:	e0fffe17 	ldw	r3,-8(fp)
    3c10:	18c00b04 	addi	r3,r3,44
    3c14:	01800804 	movi	r6,32
    3c18:	180b883a 	mov	r5,r3
    3c1c:	1009883a 	mov	r4,r2
    3c20:	0045c980 	call	45c98 <memcpy>
    3c24:	00000706 	br	3c44 <btc_hdnode_private_ckd+0x64>
    } else { // public derivation
        memcpy(data, inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH);
    3c28:	e0bffe17 	ldw	r2,-8(fp)
    3c2c:	10c01304 	addi	r3,r2,76
    3c30:	e0bfcc04 	addi	r2,fp,-208
    3c34:	01800844 	movi	r6,33
    3c38:	180b883a 	mov	r5,r3
    3c3c:	1009883a 	mov	r4,r2
    3c40:	0045c980 	call	45c98 <memcpy>
    }
    write_be(data + BTC_ECKEY_COMPRESSED_LENGTH, i);
    3c44:	e0bfcc04 	addi	r2,fp,-208
    3c48:	10800844 	addi	r2,r2,33
    3c4c:	e17fff17 	ldw	r5,-4(fp)
    3c50:	1009883a 	mov	r4,r2
    3c54:	00036ac0 	call	36ac <write_be>

    sha256_Raw(inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH, fingerprint);
    3c58:	e0bffe17 	ldw	r2,-8(fp)
    3c5c:	10801304 	addi	r2,r2,76
    3c60:	e0ffe544 	addi	r3,fp,-107
    3c64:	180d883a 	mov	r6,r3
    3c68:	01400844 	movi	r5,33
    3c6c:	1009883a 	mov	r4,r2
    3c70:	003eb140 	call	3eb14 <sha256_Raw>
    btc_ripemd160(fingerprint, 32, fingerprint);
    3c74:	e0ffe544 	addi	r3,fp,-107
    3c78:	e0bfe544 	addi	r2,fp,-107
    3c7c:	180d883a 	mov	r6,r3
    3c80:	01400804 	movi	r5,32
    3c84:	1009883a 	mov	r4,r2
    3c88:	000a6a40 	call	a6a4 <btc_ripemd160>
    inout->fingerprint = (fingerprint[0] << 24) + (fingerprint[1] << 16) +
    3c8c:	e0bfe543 	ldbu	r2,-107(fp)
    3c90:	10803fcc 	andi	r2,r2,255
    3c94:	1006963a 	slli	r3,r2,24
    3c98:	e0bfe583 	ldbu	r2,-106(fp)
    3c9c:	10803fcc 	andi	r2,r2,255
    3ca0:	1004943a 	slli	r2,r2,16
    3ca4:	1887883a 	add	r3,r3,r2
                         (fingerprint[2] << 8) + fingerprint[3];
    3ca8:	e0bfe5c3 	ldbu	r2,-105(fp)
    3cac:	10803fcc 	andi	r2,r2,255
    3cb0:	1004923a 	slli	r2,r2,8
    }
    write_be(data + BTC_ECKEY_COMPRESSED_LENGTH, i);

    sha256_Raw(inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH, fingerprint);
    btc_ripemd160(fingerprint, 32, fingerprint);
    inout->fingerprint = (fingerprint[0] << 24) + (fingerprint[1] << 16) +
    3cb4:	1887883a 	add	r3,r3,r2
                         (fingerprint[2] << 8) + fingerprint[3];
    3cb8:	e0bfe603 	ldbu	r2,-104(fp)
    3cbc:	10803fcc 	andi	r2,r2,255
    3cc0:	1885883a 	add	r2,r3,r2
    }
    write_be(data + BTC_ECKEY_COMPRESSED_LENGTH, i);

    sha256_Raw(inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH, fingerprint);
    btc_ripemd160(fingerprint, 32, fingerprint);
    inout->fingerprint = (fingerprint[0] << 24) + (fingerprint[1] << 16) +
    3cc4:	1007883a 	mov	r3,r2
    3cc8:	e0bffe17 	ldw	r2,-8(fp)
    3ccc:	10c00115 	stw	r3,4(r2)
                         (fingerprint[2] << 8) + fingerprint[3];

    memset(fingerprint, 0, sizeof(fingerprint));
    3cd0:	e0bfe544 	addi	r2,fp,-107
    3cd4:	01800804 	movi	r6,32
    3cd8:	000b883a 	mov	r5,zero
    3cdc:	1009883a 	mov	r4,r2
    3ce0:	0045f3c0 	call	45f3c <memset>
    memcpy(p, inout->private_key, BTC_ECKEY_PKEY_LENGTH);
    3ce4:	e0bffe17 	ldw	r2,-8(fp)
    3ce8:	10c00b04 	addi	r3,r2,44
    3cec:	e0bfed44 	addi	r2,fp,-75
    3cf0:	1809883a 	mov	r4,r3
    3cf4:	00c00804 	movi	r3,32
    3cf8:	180d883a 	mov	r6,r3
    3cfc:	200b883a 	mov	r5,r4
    3d00:	1009883a 	mov	r4,r2
    3d04:	0045c980 	call	45c98 <memcpy>

    hmac_sha512(inout->chain_code, BTC_BIP32_CHAINCODE_SIZE, data, sizeof(data), I);
    3d08:	e0bffe17 	ldw	r2,-8(fp)
    3d0c:	10c00304 	addi	r3,r2,12
    3d10:	e13fcc04 	addi	r4,fp,-208
    3d14:	e0bfd544 	addi	r2,fp,-171
    3d18:	d8800015 	stw	r2,0(sp)
    3d1c:	01c00944 	movi	r7,37
    3d20:	200d883a 	mov	r6,r4
    3d24:	01400804 	movi	r5,32
    3d28:	1809883a 	mov	r4,r3
    3d2c:	004096c0 	call	4096c <hmac_sha512>
    memcpy(inout->chain_code, I + BTC_ECKEY_PKEY_LENGTH, BTC_BIP32_CHAINCODE_SIZE);
    3d30:	e0bffe17 	ldw	r2,-8(fp)
    3d34:	10c00304 	addi	r3,r2,12
    3d38:	e0bfd544 	addi	r2,fp,-171
    3d3c:	10800804 	addi	r2,r2,32
    3d40:	01800804 	movi	r6,32
    3d44:	100b883a 	mov	r5,r2
    3d48:	1809883a 	mov	r4,r3
    3d4c:	0045c980 	call	45c98 <memcpy>
    memcpy(inout->private_key, I, BTC_ECKEY_PKEY_LENGTH);
    3d50:	e0bffe17 	ldw	r2,-8(fp)
    3d54:	10800b04 	addi	r2,r2,44
    3d58:	e0ffd544 	addi	r3,fp,-171
    3d5c:	01800804 	movi	r6,32
    3d60:	180b883a 	mov	r5,r3
    3d64:	1009883a 	mov	r4,r2
    3d68:	0045c980 	call	45c98 <memcpy>

    memcpy(z, inout->private_key, BTC_ECKEY_PKEY_LENGTH);
    3d6c:	e0bffe17 	ldw	r2,-8(fp)
    3d70:	10c00b04 	addi	r3,r2,44
    3d74:	e0bff544 	addi	r2,fp,-43
    3d78:	1809883a 	mov	r4,r3
    3d7c:	00c00804 	movi	r3,32
    3d80:	180d883a 	mov	r6,r3
    3d84:	200b883a 	mov	r5,r4
    3d88:	1009883a 	mov	r4,r2
    3d8c:	0045c980 	call	45c98 <memcpy>

    int failed = 0;
    3d90:	e03fcb15 	stw	zero,-212(fp)
    if (!btc_ecc_verify_privatekey(z)) {
    3d94:	e0bff544 	addi	r2,fp,-43
    3d98:	1009883a 	mov	r4,r2
    3d9c:	0005f000 	call	5f00 <btc_ecc_verify_privatekey>
    3da0:	10803fcc 	andi	r2,r2,255
    3da4:	1000041e 	bne	r2,zero,3db8 <btc_hdnode_private_ckd+0x1d8>
        failed = 1;
    3da8:	00800044 	movi	r2,1
    3dac:	e0bfcb15 	stw	r2,-212(fp)
        return false;
    3db0:	0005883a 	mov	r2,zero
    3db4:	00003306 	br	3e84 <btc_hdnode_private_ckd+0x2a4>
    }

    memcpy(inout->private_key, p, BTC_ECKEY_PKEY_LENGTH);
    3db8:	e0bffe17 	ldw	r2,-8(fp)
    3dbc:	10800b04 	addi	r2,r2,44
    3dc0:	1009883a 	mov	r4,r2
    3dc4:	e0bfed44 	addi	r2,fp,-75
    3dc8:	00c00804 	movi	r3,32
    3dcc:	180d883a 	mov	r6,r3
    3dd0:	100b883a 	mov	r5,r2
    3dd4:	0045c980 	call	45c98 <memcpy>
    if (!btc_ecc_private_key_tweak_add(inout->private_key, z)) {
    3dd8:	e0bffe17 	ldw	r2,-8(fp)
    3ddc:	10800b04 	addi	r2,r2,44
    3de0:	e0fff544 	addi	r3,fp,-43
    3de4:	180b883a 	mov	r5,r3
    3de8:	1009883a 	mov	r4,r2
    3dec:	0005dbc0 	call	5dbc <btc_ecc_private_key_tweak_add>
    3df0:	10803fcc 	andi	r2,r2,255
    3df4:	1000021e 	bne	r2,zero,3e00 <btc_hdnode_private_ckd+0x220>
        failed = 1;
    3df8:	00800044 	movi	r2,1
    3dfc:	e0bfcb15 	stw	r2,-212(fp)
    }

    if (!failed) {
    3e00:	e0bfcb17 	ldw	r2,-212(fp)
    3e04:	10000a1e 	bne	r2,zero,3e30 <btc_hdnode_private_ckd+0x250>
        inout->depth++;
    3e08:	e0bffe17 	ldw	r2,-8(fp)
    3e0c:	10800017 	ldw	r2,0(r2)
    3e10:	10c00044 	addi	r3,r2,1
    3e14:	e0bffe17 	ldw	r2,-8(fp)
    3e18:	10c00015 	stw	r3,0(r2)
        inout->child_num = i;
    3e1c:	e0bffe17 	ldw	r2,-8(fp)
    3e20:	e0ffff17 	ldw	r3,-4(fp)
    3e24:	10c00215 	stw	r3,8(r2)
        btc_hdnode_fill_public_key(inout);
    3e28:	e13ffe17 	ldw	r4,-8(fp)
    3e2c:	0003e980 	call	3e98 <btc_hdnode_fill_public_key>
    }

    memset(data, 0, sizeof(data));
    3e30:	e0bfcc04 	addi	r2,fp,-208
    3e34:	01800944 	movi	r6,37
    3e38:	000b883a 	mov	r5,zero
    3e3c:	1009883a 	mov	r4,r2
    3e40:	0045f3c0 	call	45f3c <memset>
    memset(I, 0, sizeof(I));
    3e44:	e0bfd544 	addi	r2,fp,-171
    3e48:	01801004 	movi	r6,64
    3e4c:	000b883a 	mov	r5,zero
    3e50:	1009883a 	mov	r4,r2
    3e54:	0045f3c0 	call	45f3c <memset>
    memset(p, 0, sizeof(p));
    3e58:	e0bfed44 	addi	r2,fp,-75
    3e5c:	01800804 	movi	r6,32
    3e60:	000b883a 	mov	r5,zero
    3e64:	1009883a 	mov	r4,r2
    3e68:	0045f3c0 	call	45f3c <memset>
    memset(z, 0, sizeof(z));
    3e6c:	e0bff544 	addi	r2,fp,-43
    3e70:	01800804 	movi	r6,32
    3e74:	000b883a 	mov	r5,zero
    3e78:	1009883a 	mov	r4,r2
    3e7c:	0045f3c0 	call	45f3c <memset>
    return true;
    3e80:	00800044 	movi	r2,1
}
    3e84:	e037883a 	mov	sp,fp
    3e88:	dfc00117 	ldw	ra,4(sp)
    3e8c:	df000017 	ldw	fp,0(sp)
    3e90:	dec00204 	addi	sp,sp,8
    3e94:	f800283a 	ret

00003e98 <btc_hdnode_fill_public_key>:


void btc_hdnode_fill_public_key(btc_hdnode* node)
{
    3e98:	defffc04 	addi	sp,sp,-16
    3e9c:	dfc00315 	stw	ra,12(sp)
    3ea0:	df000215 	stw	fp,8(sp)
    3ea4:	df000204 	addi	fp,sp,8
    3ea8:	e13fff15 	stw	r4,-4(fp)
    size_t outsize = BTC_ECKEY_COMPRESSED_LENGTH;
    3eac:	00800844 	movi	r2,33
    3eb0:	e0bffe15 	stw	r2,-8(fp)
    btc_ecc_get_pubkey(node->private_key, node->public_key, &outsize, true);
    3eb4:	e0bfff17 	ldw	r2,-4(fp)
    3eb8:	10c00b04 	addi	r3,r2,44
    3ebc:	e0bfff17 	ldw	r2,-4(fp)
    3ec0:	10801304 	addi	r2,r2,76
    3ec4:	01c00044 	movi	r7,1
    3ec8:	e1bffe04 	addi	r6,fp,-8
    3ecc:	100b883a 	mov	r5,r2
    3ed0:	1809883a 	mov	r4,r3
    3ed4:	0005cb00 	call	5cb0 <btc_ecc_get_pubkey>
}
    3ed8:	0001883a 	nop
    3edc:	e037883a 	mov	sp,fp
    3ee0:	dfc00117 	ldw	ra,4(sp)
    3ee4:	df000017 	ldw	fp,0(sp)
    3ee8:	dec00204 	addi	sp,sp,8
    3eec:	f800283a 	ret

00003ef0 <btc_hdnode_serialize>:


static void btc_hdnode_serialize(const btc_hdnode* node, uint32_t version, char use_public, char* str, int strsize)
{
    3ef0:	deffe604 	addi	sp,sp,-104
    3ef4:	dfc01915 	stw	ra,100(sp)
    3ef8:	df001815 	stw	fp,96(sp)
    3efc:	df001804 	addi	fp,sp,96
    3f00:	e13ffc15 	stw	r4,-16(fp)
    3f04:	e17ffd15 	stw	r5,-12(fp)
    3f08:	3005883a 	mov	r2,r6
    3f0c:	e1ffff15 	stw	r7,-4(fp)
    3f10:	e0bffe05 	stb	r2,-8(fp)
    uint8_t node_data[78];
    write_be(node_data, version);
    3f14:	e17ffd17 	ldw	r5,-12(fp)
    3f18:	e13fe804 	addi	r4,fp,-96
    3f1c:	00036ac0 	call	36ac <write_be>
    node_data[4] = node->depth;
    3f20:	e0bffc17 	ldw	r2,-16(fp)
    3f24:	10800017 	ldw	r2,0(r2)
    3f28:	e0bfe905 	stb	r2,-92(fp)
    write_be(node_data + 5, node->fingerprint);
    3f2c:	e0ffe944 	addi	r3,fp,-91
    3f30:	e0bffc17 	ldw	r2,-16(fp)
    3f34:	10800117 	ldw	r2,4(r2)
    3f38:	100b883a 	mov	r5,r2
    3f3c:	1809883a 	mov	r4,r3
    3f40:	00036ac0 	call	36ac <write_be>
    write_be(node_data + 9, node->child_num);
    3f44:	e0ffea44 	addi	r3,fp,-87
    3f48:	e0bffc17 	ldw	r2,-16(fp)
    3f4c:	10800217 	ldw	r2,8(r2)
    3f50:	100b883a 	mov	r5,r2
    3f54:	1809883a 	mov	r4,r3
    3f58:	00036ac0 	call	36ac <write_be>
    memcpy(node_data + 13, node->chain_code, BTC_BIP32_CHAINCODE_SIZE);
    3f5c:	e0ffeb44 	addi	r3,fp,-83
    3f60:	e0bffc17 	ldw	r2,-16(fp)
    3f64:	10800304 	addi	r2,r2,12
    3f68:	01800804 	movi	r6,32
    3f6c:	100b883a 	mov	r5,r2
    3f70:	1809883a 	mov	r4,r3
    3f74:	0045c980 	call	45c98 <memcpy>
    if (use_public) {
    3f78:	e0bffe07 	ldb	r2,-8(fp)
    3f7c:	10000826 	beq	r2,zero,3fa0 <btc_hdnode_serialize+0xb0>
        memcpy(node_data + 45, node->public_key, BTC_ECKEY_COMPRESSED_LENGTH);
    3f80:	e0fff344 	addi	r3,fp,-51
    3f84:	e0bffc17 	ldw	r2,-16(fp)
    3f88:	10801304 	addi	r2,r2,76
    3f8c:	01800844 	movi	r6,33
    3f90:	100b883a 	mov	r5,r2
    3f94:	1809883a 	mov	r4,r3
    3f98:	0045c980 	call	45c98 <memcpy>
    3f9c:	00000806 	br	3fc0 <btc_hdnode_serialize+0xd0>
    } else {
        node_data[45] = 0;
    3fa0:	e03ff345 	stb	zero,-51(fp)
        memcpy(node_data + 46, node->private_key, BTC_ECKEY_PKEY_LENGTH);
    3fa4:	e0fff384 	addi	r3,fp,-50
    3fa8:	e0bffc17 	ldw	r2,-16(fp)
    3fac:	10800b04 	addi	r2,r2,44
    3fb0:	01800804 	movi	r6,32
    3fb4:	100b883a 	mov	r5,r2
    3fb8:	1809883a 	mov	r4,r3
    3fbc:	0045c980 	call	45c98 <memcpy>
//    printf("node_data: ");
//	for (int i = 0; i < 78; i++) {
//		printf("%d", node_data[i]);
//	}
//	printf("\n");
    btc_base58_encode_check(node_data, 78, str, strsize);
    3fc0:	e1c00217 	ldw	r7,8(fp)
    3fc4:	e1bfff17 	ldw	r6,-4(fp)
    3fc8:	01401384 	movi	r5,78
    3fcc:	e13fe804 	addi	r4,fp,-96
    3fd0:	00031880 	call	3188 <btc_base58_encode_check>
//    printf("node_data_AFTER: ");
//	for (int i = 0; i < 78; i++) {
//		printf("%d", node_data[i]);
//	}
//	printf("\n");
}
    3fd4:	0001883a 	nop
    3fd8:	e037883a 	mov	sp,fp
    3fdc:	dfc00117 	ldw	ra,4(sp)
    3fe0:	df000017 	ldw	fp,0(sp)
    3fe4:	dec00204 	addi	sp,sp,8
    3fe8:	f800283a 	ret

00003fec <btc_hdnode_serialize_public>:


void btc_hdnode_serialize_public(const btc_hdnode* node, const btc_chainparams* chain, char* str, int strsize)
{
    3fec:	defff904 	addi	sp,sp,-28
    3ff0:	dfc00615 	stw	ra,24(sp)
    3ff4:	df000515 	stw	fp,20(sp)
    3ff8:	df000504 	addi	fp,sp,20
    3ffc:	e13ffc15 	stw	r4,-16(fp)
    4000:	e17ffd15 	stw	r5,-12(fp)
    4004:	e1bffe15 	stw	r6,-8(fp)
    4008:	e1ffff15 	stw	r7,-4(fp)
    btc_hdnode_serialize(node, chain->b58prefix_bip32_pubkey, 1, str, strsize);
    400c:	e0bffd17 	ldw	r2,-12(fp)
    4010:	10c00b17 	ldw	r3,44(r2)
    4014:	e0bfff17 	ldw	r2,-4(fp)
    4018:	d8800015 	stw	r2,0(sp)
    401c:	e1fffe17 	ldw	r7,-8(fp)
    4020:	01800044 	movi	r6,1
    4024:	180b883a 	mov	r5,r3
    4028:	e13ffc17 	ldw	r4,-16(fp)
    402c:	0003ef00 	call	3ef0 <btc_hdnode_serialize>
}
    4030:	0001883a 	nop
    4034:	e037883a 	mov	sp,fp
    4038:	dfc00117 	ldw	ra,4(sp)
    403c:	df000017 	ldw	fp,0(sp)
    4040:	dec00204 	addi	sp,sp,8
    4044:	f800283a 	ret

00004048 <btc_hdnode_serialize_private>:


void btc_hdnode_serialize_private(const btc_hdnode* node, const btc_chainparams* chain, char* str, int strsize)
{
    4048:	defff904 	addi	sp,sp,-28
    404c:	dfc00615 	stw	ra,24(sp)
    4050:	df000515 	stw	fp,20(sp)
    4054:	df000504 	addi	fp,sp,20
    4058:	e13ffc15 	stw	r4,-16(fp)
    405c:	e17ffd15 	stw	r5,-12(fp)
    4060:	e1bffe15 	stw	r6,-8(fp)
    4064:	e1ffff15 	stw	r7,-4(fp)
    btc_hdnode_serialize(node, chain->b58prefix_bip32_privkey, 0, str, strsize);
    4068:	e0bffd17 	ldw	r2,-12(fp)
    406c:	10c00a17 	ldw	r3,40(r2)
    4070:	e0bfff17 	ldw	r2,-4(fp)
    4074:	d8800015 	stw	r2,0(sp)
    4078:	e1fffe17 	ldw	r7,-8(fp)
    407c:	000d883a 	mov	r6,zero
    4080:	180b883a 	mov	r5,r3
    4084:	e13ffc17 	ldw	r4,-16(fp)
    4088:	0003ef00 	call	3ef0 <btc_hdnode_serialize>
}
    408c:	0001883a 	nop
    4090:	e037883a 	mov	sp,fp
    4094:	dfc00117 	ldw	ra,4(sp)
    4098:	df000017 	ldw	fp,0(sp)
    409c:	dec00204 	addi	sp,sp,8
    40a0:	f800283a 	ret

000040a4 <btc_hdnode_get_hash160>:


void btc_hdnode_get_hash160(const btc_hdnode* node, uint160 hash160_out)
{
    40a4:	defff404 	addi	sp,sp,-48
    40a8:	dfc00b15 	stw	ra,44(sp)
    40ac:	df000a15 	stw	fp,40(sp)
    40b0:	df000a04 	addi	fp,sp,40
    40b4:	e13ffe15 	stw	r4,-8(fp)
    40b8:	e17fff15 	stw	r5,-4(fp)
    uint256 hashout;
    btc_hash_sngl_sha256(node->public_key, BTC_ECKEY_COMPRESSED_LENGTH, hashout);
    40bc:	e0bffe17 	ldw	r2,-8(fp)
    40c0:	10801304 	addi	r2,r2,76
    40c4:	e1bff604 	addi	r6,fp,-40
    40c8:	01400844 	movi	r5,33
    40cc:	1009883a 	mov	r4,r2
    40d0:	00034c40 	call	34c4 <btc_hash_sngl_sha256>
    btc_ripemd160(hashout, sizeof(hashout), hash160_out);
    40d4:	e1bfff17 	ldw	r6,-4(fp)
    40d8:	01400804 	movi	r5,32
    40dc:	e13ff604 	addi	r4,fp,-40
    40e0:	000a6a40 	call	a6a4 <btc_ripemd160>
}
    40e4:	0001883a 	nop
    40e8:	e037883a 	mov	sp,fp
    40ec:	dfc00117 	ldw	ra,4(sp)
    40f0:	df000017 	ldw	fp,0(sp)
    40f4:	dec00204 	addi	sp,sp,8
    40f8:	f800283a 	ret

000040fc <btc_hdnode_get_p2pkh_address>:

void btc_hdnode_get_p2pkh_address(const btc_hdnode* node, const btc_chainparams* chain, char* str, int strsize)
{
    40fc:	defff404 	addi	sp,sp,-48
    4100:	dfc00b15 	stw	ra,44(sp)
    4104:	df000a15 	stw	fp,40(sp)
    4108:	df000a04 	addi	fp,sp,40
    410c:	e13ffc15 	stw	r4,-16(fp)
    4110:	e17ffd15 	stw	r5,-12(fp)
    4114:	e1bffe15 	stw	r6,-8(fp)
    4118:	e1ffff15 	stw	r7,-4(fp)
    uint8_t hash160[sizeof(uint160)+1];
    hash160[0] = chain->b58prefix_pubkey_address;
    411c:	e0bffd17 	ldw	r2,-12(fp)
    4120:	10800803 	ldbu	r2,32(r2)
    4124:	e0bff605 	stb	r2,-40(fp)
    btc_hdnode_get_hash160(node, hash160 + 1);
    4128:	e0bff644 	addi	r2,fp,-39
    412c:	100b883a 	mov	r5,r2
    4130:	e13ffc17 	ldw	r4,-16(fp)
    4134:	00040a40 	call	40a4 <btc_hdnode_get_hash160>
    btc_base58_encode_check(hash160, sizeof(hash160), str, strsize);
    4138:	e1ffff17 	ldw	r7,-4(fp)
    413c:	e1bffe17 	ldw	r6,-8(fp)
    4140:	01400544 	movi	r5,21
    4144:	e13ff604 	addi	r4,fp,-40
    4148:	00031880 	call	3188 <btc_base58_encode_check>
}
    414c:	0001883a 	nop
    4150:	e037883a 	mov	sp,fp
    4154:	dfc00117 	ldw	ra,4(sp)
    4158:	df000017 	ldw	fp,0(sp)
    415c:	dec00204 	addi	sp,sp,8
    4160:	f800283a 	ret

00004164 <btc_hdnode_get_pub_hex>:

btc_bool btc_hdnode_get_pub_hex(const btc_hdnode* node, char* str, size_t* strsize)
{
    4164:	deffea04 	addi	sp,sp,-88
    4168:	dfc01515 	stw	ra,84(sp)
    416c:	df001415 	stw	fp,80(sp)
    4170:	df001404 	addi	fp,sp,80
    4174:	e13ffd15 	stw	r4,-12(fp)
    4178:	e17ffe15 	stw	r5,-8(fp)
    417c:	e1bfff15 	stw	r6,-4(fp)
    btc_pubkey pubkey;
    btc_pubkey_init(&pubkey);
    4180:	e13fec04 	addi	r4,fp,-80
    4184:	00055540 	call	5554 <btc_pubkey_init>
    memcpy(&pubkey.pubkey, node->public_key, BTC_ECKEY_COMPRESSED_LENGTH);
    4188:	e0bffd17 	ldw	r2,-12(fp)
    418c:	10c01304 	addi	r3,r2,76
    4190:	e0bfec44 	addi	r2,fp,-79
    4194:	01800844 	movi	r6,33
    4198:	180b883a 	mov	r5,r3
    419c:	1009883a 	mov	r4,r2
    41a0:	0045c980 	call	45c98 <memcpy>
    pubkey.compressed = true;
    41a4:	00800044 	movi	r2,1
    41a8:	e0bfec05 	stb	r2,-80(fp)

    return btc_pubkey_get_hex(&pubkey, str, strsize);
    41ac:	e1bfff17 	ldw	r6,-4(fp)
    41b0:	e17ffe17 	ldw	r5,-8(fp)
    41b4:	e13fec04 	addi	r4,fp,-80
    41b8:	00057280 	call	5728 <btc_pubkey_get_hex>
}
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <btc_hdnode_deserialize>:


// check for validity of curve point in case of public data not performed
btc_bool btc_hdnode_deserialize(const char* str, const btc_chainparams* chain, btc_hdnode* node)
{
    41d0:	deffed04 	addi	sp,sp,-76
    41d4:	dfc01215 	stw	ra,72(sp)
    41d8:	df001115 	stw	fp,68(sp)
    41dc:	ddc01015 	stw	r23,64(sp)
    41e0:	dd800f15 	stw	r22,60(sp)
    41e4:	dd400e15 	stw	r21,56(sp)
    41e8:	dd000d15 	stw	r20,52(sp)
    41ec:	dcc00c15 	stw	r19,48(sp)
    41f0:	dc800b15 	stw	r18,44(sp)
    41f4:	dc400a15 	stw	r17,40(sp)
    41f8:	dc000915 	stw	r16,36(sp)
    41fc:	df001104 	addi	fp,sp,68
    4200:	e13ff315 	stw	r4,-52(fp)
    4204:	e17ff415 	stw	r5,-48(fp)
    4208:	e1bff515 	stw	r6,-44(fp)
    420c:	d805883a 	mov	r2,sp
    4210:	e0bff615 	stw	r2,-40(fp)
    uint8_t node_data[strlen(str)];
    4214:	e13ff317 	ldw	r4,-52(fp)
    4218:	0046ef40 	call	46ef4 <strlen>
    421c:	e0bff715 	stw	r2,-36(fp)
    4220:	e0bff717 	ldw	r2,-36(fp)
    4224:	10bfffc4 	addi	r2,r2,-1
    4228:	e0bfef15 	stw	r2,-68(fp)
    422c:	e5bff717 	ldw	r22,-36(fp)
    4230:	002f883a 	mov	r23,zero
    4234:	b004d77a 	srli	r2,r22,29
    4238:	b82690fa 	slli	r19,r23,3
    423c:	14e6b03a 	or	r19,r2,r19
    4240:	b02490fa 	slli	r18,r22,3
    4244:	e53ff717 	ldw	r20,-36(fp)
    4248:	002b883a 	mov	r21,zero
    424c:	a004d77a 	srli	r2,r20,29
    4250:	a82290fa 	slli	r17,r21,3
    4254:	1462b03a 	or	r17,r2,r17
    4258:	a02090fa 	slli	r16,r20,3
    425c:	e0fff717 	ldw	r3,-36(fp)
    4260:	188000c4 	addi	r2,r3,3
    4264:	1004d0ba 	srli	r2,r2,2
    4268:	1085883a 	add	r2,r2,r2
    426c:	1085883a 	add	r2,r2,r2
    4270:	d8b7c83a 	sub	sp,sp,r2
    4274:	d805883a 	mov	r2,sp
    4278:	1005883a 	mov	r2,r2
    427c:	e0bff015 	stw	r2,-64(fp)
    memset(node, 0, sizeof(btc_hdnode));
    4280:	01801c04 	movi	r6,112
    4284:	000b883a 	mov	r5,zero
    4288:	e13ff517 	ldw	r4,-44(fp)
    428c:	0045f3c0 	call	45f3c <memset>
    size_t outlen = 0;
    4290:	e03ff115 	stw	zero,-60(fp)

    outlen = btc_base58_decode_check(str, node_data, sizeof(node_data));
    4294:	e0bff017 	ldw	r2,-64(fp)
    4298:	e1bff717 	ldw	r6,-36(fp)
    429c:	100b883a 	mov	r5,r2
    42a0:	e13ff317 	ldw	r4,-52(fp)
    42a4:	00033080 	call	3308 <btc_base58_decode_check>
    42a8:	e0bff115 	stw	r2,-60(fp)
    if (!outlen) {
    42ac:	e0bff117 	ldw	r2,-60(fp)
    42b0:	1000021e 	bne	r2,zero,42bc <btc_hdnode_deserialize+0xec>
        return false;
    42b4:	0005883a 	mov	r2,zero
    42b8:	00004406 	br	43cc <btc_hdnode_deserialize+0x1fc>
    }
    uint32_t version = read_be(node_data);
    42bc:	e0bff017 	ldw	r2,-64(fp)
    42c0:	1009883a 	mov	r4,r2
    42c4:	00037200 	call	3720 <read_be>
    42c8:	e0bff215 	stw	r2,-56(fp)
    if (version == chain->b58prefix_bip32_pubkey) { // public node
    42cc:	e0bff417 	ldw	r2,-48(fp)
    42d0:	10c00b17 	ldw	r3,44(r2)
    42d4:	e0bff217 	ldw	r2,-56(fp)
    42d8:	1880091e 	bne	r3,r2,4300 <btc_hdnode_deserialize+0x130>
        memcpy(node->public_key, node_data + 45, BTC_ECKEY_COMPRESSED_LENGTH);
    42dc:	e0bff517 	ldw	r2,-44(fp)
    42e0:	10c01304 	addi	r3,r2,76
    42e4:	e0bff017 	ldw	r2,-64(fp)
    42e8:	10800b44 	addi	r2,r2,45
    42ec:	01800844 	movi	r6,33
    42f0:	100b883a 	mov	r5,r2
    42f4:	1809883a 	mov	r4,r3
    42f8:	0045c980 	call	45c98 <memcpy>
    42fc:	00001706 	br	435c <btc_hdnode_deserialize+0x18c>
    } else if (version == chain->b58prefix_bip32_privkey) { // private node
    4300:	e0bff417 	ldw	r2,-48(fp)
    4304:	10c00a17 	ldw	r3,40(r2)
    4308:	e0bff217 	ldw	r2,-56(fp)
    430c:	1880111e 	bne	r3,r2,4354 <btc_hdnode_deserialize+0x184>
        if (node_data[45]) {                                // invalid data
    4310:	e0bff017 	ldw	r2,-64(fp)
    4314:	10800b43 	ldbu	r2,45(r2)
    4318:	10803fcc 	andi	r2,r2,255
    431c:	10000226 	beq	r2,zero,4328 <btc_hdnode_deserialize+0x158>
            return false;
    4320:	0005883a 	mov	r2,zero
    4324:	00002906 	br	43cc <btc_hdnode_deserialize+0x1fc>
        }
        memcpy(node->private_key, node_data + 46, BTC_ECKEY_PKEY_LENGTH);
    4328:	e0bff517 	ldw	r2,-44(fp)
    432c:	10c00b04 	addi	r3,r2,44
    4330:	e0bff017 	ldw	r2,-64(fp)
    4334:	10800b84 	addi	r2,r2,46
    4338:	01800804 	movi	r6,32
    433c:	100b883a 	mov	r5,r2
    4340:	1809883a 	mov	r4,r3
    4344:	0045c980 	call	45c98 <memcpy>
        btc_hdnode_fill_public_key(node);
    4348:	e13ff517 	ldw	r4,-44(fp)
    434c:	0003e980 	call	3e98 <btc_hdnode_fill_public_key>
    4350:	00000206 	br	435c <btc_hdnode_deserialize+0x18c>
    } else {
        return false; // invalid version
    4354:	0005883a 	mov	r2,zero
    4358:	00001c06 	br	43cc <btc_hdnode_deserialize+0x1fc>
    }
    node->depth = node_data[4];
    435c:	e0bff017 	ldw	r2,-64(fp)
    4360:	10800103 	ldbu	r2,4(r2)
    4364:	10c03fcc 	andi	r3,r2,255
    4368:	e0bff517 	ldw	r2,-44(fp)
    436c:	10c00015 	stw	r3,0(r2)
    node->fingerprint = read_be(node_data + 5);
    4370:	e0bff017 	ldw	r2,-64(fp)
    4374:	10800144 	addi	r2,r2,5
    4378:	1009883a 	mov	r4,r2
    437c:	00037200 	call	3720 <read_be>
    4380:	1007883a 	mov	r3,r2
    4384:	e0bff517 	ldw	r2,-44(fp)
    4388:	10c00115 	stw	r3,4(r2)
    node->child_num = read_be(node_data + 9);
    438c:	e0bff017 	ldw	r2,-64(fp)
    4390:	10800244 	addi	r2,r2,9
    4394:	1009883a 	mov	r4,r2
    4398:	00037200 	call	3720 <read_be>
    439c:	1007883a 	mov	r3,r2
    43a0:	e0bff517 	ldw	r2,-44(fp)
    43a4:	10c00215 	stw	r3,8(r2)
    memcpy(node->chain_code, node_data + 13, BTC_BIP32_CHAINCODE_SIZE);
    43a8:	e0bff517 	ldw	r2,-44(fp)
    43ac:	10c00304 	addi	r3,r2,12
    43b0:	e0bff017 	ldw	r2,-64(fp)
    43b4:	10800344 	addi	r2,r2,13
    43b8:	01800804 	movi	r6,32
    43bc:	100b883a 	mov	r5,r2
    43c0:	1809883a 	mov	r4,r3
    43c4:	0045c980 	call	45c98 <memcpy>
    return true;
    43c8:	00800044 	movi	r2,1
    43cc:	e6fff617 	ldw	sp,-40(fp)
}
    43d0:	e6fff804 	addi	sp,fp,-32
    43d4:	dfc00917 	ldw	ra,36(sp)
    43d8:	df000817 	ldw	fp,32(sp)
    43dc:	ddc00717 	ldw	r23,28(sp)
    43e0:	dd800617 	ldw	r22,24(sp)
    43e4:	dd400517 	ldw	r21,20(sp)
    43e8:	dd000417 	ldw	r20,16(sp)
    43ec:	dcc00317 	ldw	r19,12(sp)
    43f0:	dc800217 	ldw	r18,8(sp)
    43f4:	dc400117 	ldw	r17,4(sp)
    43f8:	dc000017 	ldw	r16,0(sp)
    43fc:	dec00a04 	addi	sp,sp,40
    4400:	f800283a 	ret

00004404 <btc_hd_generate_key>:

btc_bool btc_hd_generate_key(btc_hdnode* node, const char* keypath, const uint8_t* keymaster, const uint8_t* chaincode, btc_bool usepubckd)
{
    4404:	defff304 	addi	sp,sp,-52
    4408:	dfc00c15 	stw	ra,48(sp)
    440c:	df000b15 	stw	fp,44(sp)
    4410:	df000b04 	addi	fp,sp,44
    4414:	e13ffb15 	stw	r4,-20(fp)
    4418:	e17ffc15 	stw	r5,-16(fp)
    441c:	e1bffd15 	stw	r6,-12(fp)
    4420:	e1fffe15 	stw	r7,-8(fp)
    4424:	e0800217 	ldw	r2,8(fp)
    4428:	e0bfff05 	stb	r2,-4(fp)
    static char delim[] = "/";
    static char prime[] = "phH\'";
    static char digits[] = "0123456789";
    uint64_t idx = 0;
    442c:	e03ff815 	stw	zero,-32(fp)
    4430:	e03ff915 	stw	zero,-28(fp)
    assert(strlens(keypath) < 1024);
    4434:	e0bffc17 	ldw	r2,-16(fp)
    4438:	10000c26 	beq	r2,zero,446c <btc_hd_generate_key+0x68>
    443c:	e13ffc17 	ldw	r4,-16(fp)
    4440:	0046ef40 	call	46ef4 <strlen>
    4444:	10810030 	cmpltui	r2,r2,1024
    4448:	1000081e 	bne	r2,zero,446c <btc_hd_generate_key+0x68>
    444c:	01c001b4 	movhi	r7,6
    4450:	39e18604 	addi	r7,r7,-31208
    4454:	018001b4 	movhi	r6,6
    4458:	31a19004 	addi	r6,r6,-31168
    445c:	01405804 	movi	r5,352
    4460:	010001b4 	movhi	r4,6
    4464:	21218c04 	addi	r4,r4,-31184
    4468:	004504c0 	call	4504c <__assert_func>
    char *pch, *kp = btc_malloc(strlens(keypath) + 1);
    446c:	e0bffc17 	ldw	r2,-16(fp)
    4470:	10000426 	beq	r2,zero,4484 <btc_hd_generate_key+0x80>
    4474:	e13ffc17 	ldw	r4,-16(fp)
    4478:	0046ef40 	call	46ef4 <strlen>
    447c:	10800044 	addi	r2,r2,1
    4480:	00000106 	br	4488 <btc_hd_generate_key+0x84>
    4484:	00800044 	movi	r2,1
    4488:	1009883a 	mov	r4,r2
    448c:	00066000 	call	6600 <btc_malloc>
    4490:	e0bffa15 	stw	r2,-24(fp)

    if (!kp) {
    4494:	e0bffa17 	ldw	r2,-24(fp)
    4498:	1000021e 	bne	r2,zero,44a4 <btc_hd_generate_key+0xa0>
        return false;
    449c:	0005883a 	mov	r2,zero
    44a0:	0000bb06 	br	4790 <btc_hd_generate_key+0x38c>
    }

    if (strlens(keypath) < strlens("m/")) {
    44a4:	e0bffc17 	ldw	r2,-16(fp)
    44a8:	1000b626 	beq	r2,zero,4784 <btc_hd_generate_key+0x380>
    44ac:	e13ffc17 	ldw	r4,-16(fp)
    44b0:	0046ef40 	call	46ef4 <strlen>
    44b4:	108000b0 	cmpltui	r2,r2,2
    44b8:	1000b21e 	bne	r2,zero,4784 <btc_hd_generate_key+0x380>
        goto err;
    }

    memset(kp, 0, strlens(keypath) + 1);
    44bc:	e0bffc17 	ldw	r2,-16(fp)
    44c0:	10000426 	beq	r2,zero,44d4 <btc_hd_generate_key+0xd0>
    44c4:	e13ffc17 	ldw	r4,-16(fp)
    44c8:	0046ef40 	call	46ef4 <strlen>
    44cc:	10800044 	addi	r2,r2,1
    44d0:	00000106 	br	44d8 <btc_hd_generate_key+0xd4>
    44d4:	00800044 	movi	r2,1
    44d8:	100d883a 	mov	r6,r2
    44dc:	000b883a 	mov	r5,zero
    44e0:	e13ffa17 	ldw	r4,-24(fp)
    44e4:	0045f3c0 	call	45f3c <memset>
    memcpy(kp, keypath, strlens(keypath));
    44e8:	e0bffc17 	ldw	r2,-16(fp)
    44ec:	10000326 	beq	r2,zero,44fc <btc_hd_generate_key+0xf8>
    44f0:	e13ffc17 	ldw	r4,-16(fp)
    44f4:	0046ef40 	call	46ef4 <strlen>
    44f8:	00000106 	br	4500 <btc_hd_generate_key+0xfc>
    44fc:	0005883a 	mov	r2,zero
    4500:	100d883a 	mov	r6,r2
    4504:	e17ffc17 	ldw	r5,-16(fp)
    4508:	e13ffa17 	ldw	r4,-24(fp)
    450c:	0045c980 	call	45c98 <memcpy>

    if (kp[0] != 'm' || kp[1] != '/') {
    4510:	e0bffa17 	ldw	r2,-24(fp)
    4514:	10800003 	ldbu	r2,0(r2)
    4518:	10803fcc 	andi	r2,r2,255
    451c:	1080201c 	xori	r2,r2,128
    4520:	10bfe004 	addi	r2,r2,-128
    4524:	10801b58 	cmpnei	r2,r2,109
    4528:	1000961e 	bne	r2,zero,4784 <btc_hd_generate_key+0x380>
    452c:	e0bffa17 	ldw	r2,-24(fp)
    4530:	10800044 	addi	r2,r2,1
    4534:	10800003 	ldbu	r2,0(r2)
    4538:	10803fcc 	andi	r2,r2,255
    453c:	1080201c 	xori	r2,r2,128
    4540:	10bfe004 	addi	r2,r2,-128
    4544:	10800bd8 	cmpnei	r2,r2,47
    4548:	10008e1e 	bne	r2,zero,4784 <btc_hd_generate_key+0x380>
        goto err;
    }

    node->depth = 0;
    454c:	e0bffb17 	ldw	r2,-20(fp)
    4550:	10000015 	stw	zero,0(r2)
    node->child_num = 0;
    4554:	e0bffb17 	ldw	r2,-20(fp)
    4558:	10000215 	stw	zero,8(r2)
    node->fingerprint = 0;
    455c:	e0bffb17 	ldw	r2,-20(fp)
    4560:	10000115 	stw	zero,4(r2)
    memcpy(node->chain_code, chaincode, BTC_BIP32_CHAINCODE_SIZE);
    4564:	e0bffb17 	ldw	r2,-20(fp)
    4568:	10800304 	addi	r2,r2,12
    456c:	01800804 	movi	r6,32
    4570:	e17ffe17 	ldw	r5,-8(fp)
    4574:	1009883a 	mov	r4,r2
    4578:	0045c980 	call	45c98 <memcpy>
    if (usepubckd == true) {
    457c:	e0bfff03 	ldbu	r2,-4(fp)
    4580:	10800058 	cmpnei	r2,r2,1
    4584:	1000071e 	bne	r2,zero,45a4 <btc_hd_generate_key+0x1a0>
        memcpy(node->public_key, keymaster, BTC_ECKEY_COMPRESSED_LENGTH);
    4588:	e0bffb17 	ldw	r2,-20(fp)
    458c:	10801304 	addi	r2,r2,76
    4590:	01800844 	movi	r6,33
    4594:	e17ffd17 	ldw	r5,-12(fp)
    4598:	1009883a 	mov	r4,r2
    459c:	0045c980 	call	45c98 <memcpy>
    45a0:	00000806 	br	45c4 <btc_hd_generate_key+0x1c0>
    } else {
        memcpy(node->private_key, keymaster, BTC_ECKEY_PKEY_LENGTH);
    45a4:	e0bffb17 	ldw	r2,-20(fp)
    45a8:	10800b04 	addi	r2,r2,44
    45ac:	01800804 	movi	r6,32
    45b0:	e17ffd17 	ldw	r5,-12(fp)
    45b4:	1009883a 	mov	r4,r2
    45b8:	0045c980 	call	45c98 <memcpy>
        btc_hdnode_fill_public_key(node);
    45bc:	e13ffb17 	ldw	r4,-20(fp)
    45c0:	0003e980 	call	3e98 <btc_hdnode_fill_public_key>
    }

    pch = strtok(kp + 2, delim);
    45c4:	e0bffa17 	ldw	r2,-24(fp)
    45c8:	10800084 	addi	r2,r2,2
    45cc:	d1600204 	addi	r5,gp,-32760
    45d0:	1009883a 	mov	r4,r2
    45d4:	004718c0 	call	4718c <strtok>
    45d8:	e0bff515 	stw	r2,-44(fp)
    while (pch != NULL) {
    45dc:	00005e06 	br	4758 <btc_hd_generate_key+0x354>
        size_t i = 0;
    45e0:	e03ff615 	stw	zero,-40(fp)
        int prm = 0;
    45e4:	e03ff715 	stw	zero,-36(fp)
        for (; i < strlens(pch); i++) {
    45e8:	00002906 	br	4690 <btc_hd_generate_key+0x28c>
            if (strchr(prime, pch[i])) {
    45ec:	e0fff517 	ldw	r3,-44(fp)
    45f0:	e0bff617 	ldw	r2,-40(fp)
    45f4:	1885883a 	add	r2,r3,r2
    45f8:	10800003 	ldbu	r2,0(r2)
    45fc:	10803fcc 	andi	r2,r2,255
    4600:	1080201c 	xori	r2,r2,128
    4604:	10bfe004 	addi	r2,r2,-128
    4608:	100b883a 	mov	r5,r2
    460c:	d1200304 	addi	r4,gp,-32756
    4610:	0046bd80 	call	46bd8 <strchr>
    4614:	10000f26 	beq	r2,zero,4654 <btc_hd_generate_key+0x250>
                if ((i != strlens(pch) - 1) || usepubckd == true) {
    4618:	e0bff517 	ldw	r2,-44(fp)
    461c:	10000426 	beq	r2,zero,4630 <btc_hd_generate_key+0x22c>
    4620:	e13ff517 	ldw	r4,-44(fp)
    4624:	0046ef40 	call	46ef4 <strlen>
    4628:	10bfffc4 	addi	r2,r2,-1
    462c:	00000106 	br	4634 <btc_hd_generate_key+0x230>
    4630:	00bfffc4 	movi	r2,-1
    4634:	e0fff617 	ldw	r3,-40(fp)
    4638:	10c0521e 	bne	r2,r3,4784 <btc_hd_generate_key+0x380>
    463c:	e0bfff03 	ldbu	r2,-4(fp)
    4640:	10800060 	cmpeqi	r2,r2,1
    4644:	10004f1e 	bne	r2,zero,4784 <btc_hd_generate_key+0x380>
                    goto err;
                }
                prm = 1;
    4648:	00800044 	movi	r2,1
    464c:	e0bff715 	stw	r2,-36(fp)
    4650:	00000c06 	br	4684 <btc_hd_generate_key+0x280>
            } else if (!strchr(digits, pch[i])) {
    4654:	e0fff517 	ldw	r3,-44(fp)
    4658:	e0bff617 	ldw	r2,-40(fp)
    465c:	1885883a 	add	r2,r3,r2
    4660:	10800003 	ldbu	r2,0(r2)
    4664:	10803fcc 	andi	r2,r2,255
    4668:	1080201c 	xori	r2,r2,128
    466c:	10bfe004 	addi	r2,r2,-128
    4670:	100b883a 	mov	r5,r2
    4674:	010001b4 	movhi	r4,6
    4678:	21370204 	addi	r4,r4,-9208
    467c:	0046bd80 	call	46bd8 <strchr>
    4680:	10003b26 	beq	r2,zero,4770 <btc_hd_generate_key+0x36c>

    pch = strtok(kp + 2, delim);
    while (pch != NULL) {
        size_t i = 0;
        int prm = 0;
        for (; i < strlens(pch); i++) {
    4684:	e0bff617 	ldw	r2,-40(fp)
    4688:	10800044 	addi	r2,r2,1
    468c:	e0bff615 	stw	r2,-40(fp)
    4690:	e0bff517 	ldw	r2,-44(fp)
    4694:	10000426 	beq	r2,zero,46a8 <btc_hd_generate_key+0x2a4>
    4698:	e13ff517 	ldw	r4,-44(fp)
    469c:	0046ef40 	call	46ef4 <strlen>
    46a0:	1007883a 	mov	r3,r2
    46a4:	00000106 	br	46ac <btc_hd_generate_key+0x2a8>
    46a8:	0007883a 	mov	r3,zero
    46ac:	e0bff617 	ldw	r2,-40(fp)
    46b0:	10ffce36 	bltu	r2,r3,45ec <__alt_mem_epcs_flash_controller+0xfdff35ec>
            } else if (!strchr(digits, pch[i])) {
                goto err;
            }
        }

        idx = strtoull(pch, NULL, 10);
    46b4:	01800284 	movi	r6,10
    46b8:	000b883a 	mov	r5,zero
    46bc:	e13ff517 	ldw	r4,-44(fp)
    46c0:	00472480 	call	47248 <strtoull>
    46c4:	e0bff815 	stw	r2,-32(fp)
    46c8:	e0fff915 	stw	r3,-28(fp)
        if (idx > UINT32_MAX) {
    46cc:	e0bff917 	ldw	r2,-28(fp)
    46d0:	1000291e 	bne	r2,zero,4778 <btc_hd_generate_key+0x374>
            goto err;
        }

        if (prm) {
    46d4:	e0bff717 	ldw	r2,-36(fp)
    46d8:	10000926 	beq	r2,zero,4700 <btc_hd_generate_key+0x2fc>
            if (btc_hdnode_private_ckd_prime(node, idx) != true) {
    46dc:	e0bff817 	ldw	r2,-32(fp)
    46e0:	10a00034 	orhi	r2,r2,32768
    46e4:	100b883a 	mov	r5,r2
    46e8:	e13ffb17 	ldw	r4,-20(fp)
    46ec:	0003be00 	call	3be0 <btc_hdnode_private_ckd>
    46f0:	10803fcc 	andi	r2,r2,255
    46f4:	10800060 	cmpeqi	r2,r2,1
    46f8:	1000131e 	bne	r2,zero,4748 <btc_hd_generate_key+0x344>
                goto err;
    46fc:	00002106 	br	4784 <btc_hd_generate_key+0x380>
            }
        } else {
            if ((usepubckd == true ? btc_hdnode_public_ckd(node, idx) : btc_hdnode_private_ckd(node, idx)) != true) {
    4700:	e0bfff03 	ldbu	r2,-4(fp)
    4704:	10800058 	cmpnei	r2,r2,1
    4708:	1000071e 	bne	r2,zero,4728 <btc_hd_generate_key+0x324>
    470c:	e0bff817 	ldw	r2,-32(fp)
    4710:	100b883a 	mov	r5,r2
    4714:	e13ffb17 	ldw	r4,-20(fp)
    4718:	0003a080 	call	3a08 <btc_hdnode_public_ckd>
    471c:	10803fcc 	andi	r2,r2,255
    4720:	10800058 	cmpnei	r2,r2,1
    4724:	00000606 	br	4740 <btc_hd_generate_key+0x33c>
    4728:	e0bff817 	ldw	r2,-32(fp)
    472c:	100b883a 	mov	r5,r2
    4730:	e13ffb17 	ldw	r4,-20(fp)
    4734:	0003be00 	call	3be0 <btc_hdnode_private_ckd>
    4738:	10803fcc 	andi	r2,r2,255
    473c:	10800058 	cmpnei	r2,r2,1
    4740:	10803fcc 	andi	r2,r2,255
    4744:	10000e1e 	bne	r2,zero,4780 <btc_hd_generate_key+0x37c>
                goto err;
            }
        }
        pch = strtok(NULL, delim);
    4748:	d1600204 	addi	r5,gp,-32760
    474c:	0009883a 	mov	r4,zero
    4750:	004718c0 	call	4718c <strtok>
    4754:	e0bff515 	stw	r2,-44(fp)
        memcpy(node->private_key, keymaster, BTC_ECKEY_PKEY_LENGTH);
        btc_hdnode_fill_public_key(node);
    }

    pch = strtok(kp + 2, delim);
    while (pch != NULL) {
    4758:	e0bff517 	ldw	r2,-44(fp)
    475c:	103fa01e 	bne	r2,zero,45e0 <__alt_mem_epcs_flash_controller+0xfdff35e0>
                goto err;
            }
        }
        pch = strtok(NULL, delim);
    }
    btc_free(kp);
    4760:	e13ffa17 	ldw	r4,-24(fp)
    4764:	00066c40 	call	66c4 <btc_free>
    return true;
    4768:	00800044 	movi	r2,1
    476c:	00000806 	br	4790 <btc_hd_generate_key+0x38c>
                if ((i != strlens(pch) - 1) || usepubckd == true) {
                    goto err;
                }
                prm = 1;
            } else if (!strchr(digits, pch[i])) {
                goto err;
    4770:	0001883a 	nop
    4774:	00000306 	br	4784 <btc_hd_generate_key+0x380>
            }
        }

        idx = strtoull(pch, NULL, 10);
        if (idx > UINT32_MAX) {
            goto err;
    4778:	0001883a 	nop
    477c:	00000106 	br	4784 <btc_hd_generate_key+0x380>
            if (btc_hdnode_private_ckd_prime(node, idx) != true) {
                goto err;
            }
        } else {
            if ((usepubckd == true ? btc_hdnode_public_ckd(node, idx) : btc_hdnode_private_ckd(node, idx)) != true) {
                goto err;
    4780:	0001883a 	nop
    }
    btc_free(kp);
    return true;

err:
    btc_free(kp);
    4784:	e13ffa17 	ldw	r4,-24(fp)
    4788:	00066c40 	call	66c4 <btc_free>
    return false;
    478c:	0005883a 	mov	r2,zero
}
    4790:	e037883a 	mov	sp,fp
    4794:	dfc00117 	ldw	ra,4(sp)
    4798:	df000017 	ldw	fp,0(sp)
    479c:	dec00204 	addi	sp,sp,8
    47a0:	f800283a 	ret

000047a4 <btc_hdnode_has_privkey>:

btc_bool btc_hdnode_has_privkey(btc_hdnode* node)
{
    47a4:	defffd04 	addi	sp,sp,-12
    47a8:	df000215 	stw	fp,8(sp)
    47ac:	df000204 	addi	fp,sp,8
    47b0:	e13fff15 	stw	r4,-4(fp)
    int i;
    for (i = 0; i < BTC_ECKEY_PKEY_LENGTH; ++i) {
    47b4:	e03ffe15 	stw	zero,-8(fp)
    47b8:	00000c06 	br	47ec <btc_hdnode_has_privkey+0x48>
        if (node->private_key[i] != 0)
    47bc:	e0ffff17 	ldw	r3,-4(fp)
    47c0:	e0bffe17 	ldw	r2,-8(fp)
    47c4:	1885883a 	add	r2,r3,r2
    47c8:	10800b04 	addi	r2,r2,44
    47cc:	10800003 	ldbu	r2,0(r2)
    47d0:	10803fcc 	andi	r2,r2,255
    47d4:	10000226 	beq	r2,zero,47e0 <btc_hdnode_has_privkey+0x3c>
            return true;
    47d8:	00800044 	movi	r2,1
    47dc:	00000706 	br	47fc <btc_hdnode_has_privkey+0x58>
}

btc_bool btc_hdnode_has_privkey(btc_hdnode* node)
{
    int i;
    for (i = 0; i < BTC_ECKEY_PKEY_LENGTH; ++i) {
    47e0:	e0bffe17 	ldw	r2,-8(fp)
    47e4:	10800044 	addi	r2,r2,1
    47e8:	e0bffe15 	stw	r2,-8(fp)
    47ec:	e0bffe17 	ldw	r2,-8(fp)
    47f0:	10800810 	cmplti	r2,r2,32
    47f4:	103ff11e 	bne	r2,zero,47bc <__alt_mem_epcs_flash_controller+0xfdff37bc>
        if (node->private_key[i] != 0)
            return true;
    }
    return false;
    47f8:	0005883a 	mov	r2,zero
}
    47fc:	e037883a 	mov	sp,fp
    4800:	df000017 	ldw	fp,0(sp)
    4804:	dec00104 	addi	sp,sp,4
    4808:	f800283a 	ret

0000480c <addresses_from_pubkey>:
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

btc_bool addresses_from_pubkey(const btc_chainparams* chain, const char* pubkey_hex, char* p2pkh_address, char* p2sh_p2wpkh_address, char *p2wpkh_address)
{
    480c:	deffe804 	addi	sp,sp,-96
    4810:	dfc01715 	stw	ra,92(sp)
    4814:	df001615 	stw	fp,88(sp)
    4818:	df001604 	addi	fp,sp,88
    481c:	e13ffc15 	stw	r4,-16(fp)
    4820:	e17ffd15 	stw	r5,-12(fp)
    4824:	e1bffe15 	stw	r6,-8(fp)
    4828:	e1ffff15 	stw	r7,-4(fp)
    if (!pubkey_hex || strlen(pubkey_hex) != 66)
    482c:	e0bffd17 	ldw	r2,-12(fp)
    4830:	10000426 	beq	r2,zero,4844 <addresses_from_pubkey+0x38>
    4834:	e13ffd17 	ldw	r4,-12(fp)
    4838:	0046ef40 	call	46ef4 <strlen>
    483c:	108010a0 	cmpeqi	r2,r2,66
    4840:	1000021e 	bne	r2,zero,484c <addresses_from_pubkey+0x40>
        return false;
    4844:	0005883a 	mov	r2,zero
    4848:	00002e06 	br	4904 <addresses_from_pubkey+0xf8>

    btc_pubkey pubkey;
    btc_pubkey_init(&pubkey);
    484c:	e13fea04 	addi	r4,fp,-88
    4850:	00055540 	call	5554 <btc_pubkey_init>
    pubkey.compressed = 1;
    4854:	00800044 	movi	r2,1
    4858:	e0bfea05 	stb	r2,-88(fp)

    size_t outlen = 0;
    485c:	e03ffb15 	stw	zero,-20(fp)
    utils_hex_to_bin(pubkey_hex, pubkey.pubkey, strlen(pubkey_hex), (int*)&outlen);
    4860:	e13ffd17 	ldw	r4,-12(fp)
    4864:	0046ef40 	call	46ef4 <strlen>
    4868:	1009883a 	mov	r4,r2
    486c:	e0fffb04 	addi	r3,fp,-20
    4870:	e0bfea44 	addi	r2,fp,-87
    4874:	180f883a 	mov	r7,r3
    4878:	200d883a 	mov	r6,r4
    487c:	100b883a 	mov	r5,r2
    4880:	e13ffd17 	ldw	r4,-12(fp)
    4884:	0040b480 	call	40b48 <utils_hex_to_bin>
    if (outlen != BTC_ECKEY_COMPRESSED_LENGTH) {
    4888:	e0bffb17 	ldw	r2,-20(fp)
    488c:	10800860 	cmpeqi	r2,r2,33
    4890:	1000021e 	bne	r2,zero,489c <addresses_from_pubkey+0x90>
        return false;
    4894:	0005883a 	mov	r2,zero
    4898:	00001a06 	br	4904 <addresses_from_pubkey+0xf8>
    }
    assert(btc_pubkey_is_valid(&pubkey) == 1);
    489c:	e13fea04 	addi	r4,fp,-88
    48a0:	00056200 	call	5620 <btc_pubkey_is_valid>
    48a4:	10803fcc 	andi	r2,r2,255
    48a8:	10800060 	cmpeqi	r2,r2,1
    48ac:	1000081e 	bne	r2,zero,48d0 <addresses_from_pubkey+0xc4>
    48b0:	01c001b4 	movhi	r7,6
    48b4:	39e99004 	addi	r7,r7,-22976
    48b8:	018001b4 	movhi	r6,6
    48bc:	31a9ee04 	addi	r6,r6,-22600
    48c0:	01400a44 	movi	r5,41
    48c4:	010001b4 	movhi	r4,6
    48c8:	21299904 	addi	r4,r4,-22940
    48cc:	004504c0 	call	4504c <__assert_func>

    btc_pubkey_getaddr_p2pkh(&pubkey, chain, p2pkh_address);
    48d0:	e1bffe17 	ldw	r6,-8(fp)
    48d4:	e17ffc17 	ldw	r5,-16(fp)
    48d8:	e13fea04 	addi	r4,fp,-88
    48dc:	0005ac80 	call	5ac8 <btc_pubkey_getaddr_p2pkh>
    btc_pubkey_getaddr_p2sh_p2wpkh(&pubkey, chain, p2sh_p2wpkh_address);
    48e0:	e1bfff17 	ldw	r6,-4(fp)
    48e4:	e17ffc17 	ldw	r5,-16(fp)
    48e8:	e13fea04 	addi	r4,fp,-88
    48ec:	0005a240 	call	5a24 <btc_pubkey_getaddr_p2sh_p2wpkh>
    btc_pubkey_getaddr_p2wpkh(&pubkey, chain, p2wpkh_address);
    48f0:	e1800217 	ldw	r6,8(fp)
    48f4:	e17ffc17 	ldw	r5,-16(fp)
    48f8:	e13fea04 	addi	r4,fp,-88
    48fc:	0005b2c0 	call	5b2c <btc_pubkey_getaddr_p2wpkh>
    return true;
    4900:	00800044 	movi	r2,1
}
    4904:	e037883a 	mov	sp,fp
    4908:	dfc00117 	ldw	ra,4(sp)
    490c:	df000017 	ldw	fp,0(sp)
    4910:	dec00204 	addi	sp,sp,8
    4914:	f800283a 	ret

00004918 <pubkey_from_privatekey>:

btc_bool pubkey_from_privatekey(const btc_chainparams* chain, const char* privkey_wif, char* pubkey_hex, size_t* sizeout)
{
    4918:	deffe104 	addi	sp,sp,-124
    491c:	dfc01e15 	stw	ra,120(sp)
    4920:	df001d15 	stw	fp,116(sp)
    4924:	df001d04 	addi	fp,sp,116
    4928:	e13ffc15 	stw	r4,-16(fp)
    492c:	e17ffd15 	stw	r5,-12(fp)
    4930:	e1bffe15 	stw	r6,-8(fp)
    4934:	e1ffff15 	stw	r7,-4(fp)
    btc_key key;
    btc_privkey_init(&key);
    4938:	e13fe304 	addi	r4,fp,-116
    493c:	00050ec0 	call	50ec <btc_privkey_init>
    if (!btc_privkey_decode_wif(privkey_wif, chain, &key)) {
    4940:	e1bfe304 	addi	r6,fp,-116
    4944:	e17ffc17 	ldw	r5,-16(fp)
    4948:	e13ffd17 	ldw	r4,-12(fp)
    494c:	00053b80 	call	53b8 <btc_privkey_decode_wif>
    4950:	10803fcc 	andi	r2,r2,255
    4954:	1000021e 	bne	r2,zero,4960 <pubkey_from_privatekey+0x48>
        return false;
    4958:	0005883a 	mov	r2,zero
    495c:	00001f06 	br	49dc <pubkey_from_privatekey+0xc4>
    }

    btc_pubkey pubkey;
    btc_pubkey_init(&pubkey);
    4960:	e0bfeb04 	addi	r2,fp,-84
    4964:	1009883a 	mov	r4,r2
    4968:	00055540 	call	5554 <btc_pubkey_init>
    assert(btc_pubkey_is_valid(&pubkey) == 0);
    496c:	e0bfeb04 	addi	r2,fp,-84
    4970:	1009883a 	mov	r4,r2
    4974:	00056200 	call	5620 <btc_pubkey_is_valid>
    4978:	10803fcc 	andi	r2,r2,255
    497c:	10000826 	beq	r2,zero,49a0 <pubkey_from_privatekey+0x88>
    4980:	01c001b4 	movhi	r7,6
    4984:	39e99f04 	addi	r7,r7,-22916
    4988:	018001b4 	movhi	r6,6
    498c:	31a9f404 	addi	r6,r6,-22576
    4990:	01400ec4 	movi	r5,59
    4994:	010001b4 	movhi	r4,6
    4998:	21299904 	addi	r4,r4,-22940
    499c:	004504c0 	call	4504c <__assert_func>
    btc_pubkey_from_key(&key, &pubkey);
    49a0:	e0bfeb04 	addi	r2,fp,-84
    49a4:	100b883a 	mov	r5,r2
    49a8:	e13fe304 	addi	r4,fp,-116
    49ac:	00057980 	call	5798 <btc_pubkey_from_key>
    btc_privkey_cleanse(&key);
    49b0:	e13fe304 	addi	r4,fp,-116
    49b4:	00051700 	call	5170 <btc_privkey_cleanse>

    btc_pubkey_get_hex(&pubkey, pubkey_hex, sizeout);
    49b8:	e0bfeb04 	addi	r2,fp,-84
    49bc:	e1bfff17 	ldw	r6,-4(fp)
    49c0:	e17ffe17 	ldw	r5,-8(fp)
    49c4:	1009883a 	mov	r4,r2
    49c8:	00057280 	call	5728 <btc_pubkey_get_hex>
    btc_pubkey_cleanse(&pubkey);
    49cc:	e0bfeb04 	addi	r2,fp,-84
    49d0:	1009883a 	mov	r4,r2
    49d4:	00056680 	call	5668 <btc_pubkey_cleanse>

    return true;
    49d8:	00800044 	movi	r2,1
}
    49dc:	e037883a 	mov	sp,fp
    49e0:	dfc00117 	ldw	ra,4(sp)
    49e4:	df000017 	ldw	fp,0(sp)
    49e8:	dec00204 	addi	sp,sp,8
    49ec:	f800283a 	ret

000049f0 <gen_privatekey>:

btc_bool gen_privatekey(const btc_chainparams* chain, char* privkey_wif, size_t strsize_wif, char* privkey_hex_or_null)
{
    49f0:	defff204 	addi	sp,sp,-56
    49f4:	dfc00d15 	stw	ra,52(sp)
    49f8:	df000c15 	stw	fp,48(sp)
    49fc:	df000c04 	addi	fp,sp,48
    4a00:	e13ffc15 	stw	r4,-16(fp)
    4a04:	e17ffd15 	stw	r5,-12(fp)
    4a08:	e1bffe15 	stw	r6,-8(fp)
    4a0c:	e1ffff15 	stw	r7,-4(fp)
    btc_key key;
    btc_privkey_init(&key);
    4a10:	e13ff404 	addi	r4,fp,-48
    4a14:	00050ec0 	call	50ec <btc_privkey_init>
    btc_privkey_gen(&key);
    4a18:	e13ff404 	addi	r4,fp,-48
    4a1c:	00051ac0 	call	51ac <btc_privkey_gen>
    btc_privkey_encode_wif(&key, chain, privkey_wif, &strsize_wif);
    4a20:	e0bffe04 	addi	r2,fp,-8
    4a24:	100f883a 	mov	r7,r2
    4a28:	e1bffd17 	ldw	r6,-12(fp)
    4a2c:	e17ffc17 	ldw	r5,-16(fp)
    4a30:	e13ff404 	addi	r4,fp,-48
    4a34:	00053080 	call	5308 <btc_privkey_encode_wif>

    // also export the hex privkey if use had passed in a valid pointer
    // will always export 32 bytes
    if (privkey_hex_or_null != NULL)
    4a38:	e0bfff17 	ldw	r2,-4(fp)
    4a3c:	10000426 	beq	r2,zero,4a50 <gen_privatekey+0x60>
        utils_bin_to_hex(key.privkey, BTC_ECKEY_PKEY_LENGTH, privkey_hex_or_null);
    4a40:	e1bfff17 	ldw	r6,-4(fp)
    4a44:	01400804 	movi	r5,32
    4a48:	e13ff404 	addi	r4,fp,-48
    4a4c:	00412fc0 	call	412fc <utils_bin_to_hex>
    btc_privkey_cleanse(&key);
    4a50:	e13ff404 	addi	r4,fp,-48
    4a54:	00051700 	call	5170 <btc_privkey_cleanse>
    return true;
    4a58:	00800044 	movi	r2,1
}
    4a5c:	e037883a 	mov	sp,fp
    4a60:	dfc00117 	ldw	ra,4(sp)
    4a64:	df000017 	ldw	fp,0(sp)
    4a68:	dec00204 	addi	sp,sp,8
    4a6c:	f800283a 	ret

00004a70 <hd_gen_master>:

btc_bool hd_gen_master(const btc_chainparams* chain, char* masterkeyhex, size_t strsize)
{
    4a70:	deffd704 	addi	sp,sp,-164
    4a74:	dfc02815 	stw	ra,160(sp)
    4a78:	df002715 	stw	fp,156(sp)
    4a7c:	df002704 	addi	fp,sp,156
    4a80:	e13ffd15 	stw	r4,-12(fp)
    4a84:	e17ffe15 	stw	r5,-8(fp)
    4a88:	e1bfff15 	stw	r6,-4(fp)
    btc_hdnode node;
    uint8_t seed[32];
    assert(btc_random_bytes(seed, 32, true));
    4a8c:	e0bff504 	addi	r2,fp,-44
    4a90:	01800044 	movi	r6,1
    4a94:	01400804 	movi	r5,32
    4a98:	1009883a 	mov	r4,r2
    4a9c:	000696c0 	call	696c <btc_random_bytes>
    4aa0:	10803fcc 	andi	r2,r2,255
    4aa4:	1000081e 	bne	r2,zero,4ac8 <hd_gen_master+0x58>
    4aa8:	01c001b4 	movhi	r7,6
    4aac:	39e9a804 	addi	r7,r7,-22880
    4ab0:	018001b4 	movhi	r6,6
    4ab4:	31a9fa04 	addi	r6,r6,-22552
    4ab8:	01401604 	movi	r5,88
    4abc:	010001b4 	movhi	r4,6
    4ac0:	21299904 	addi	r4,r4,-22940
    4ac4:	004504c0 	call	4504c <__assert_func>
//    random_buffer(seed, 32);
//    uint8_t seed[32] = {0};
    btc_hdnode_from_seed(seed, 32, &node);
    4ac8:	e0bff504 	addi	r2,fp,-44
    4acc:	e1bfd904 	addi	r6,fp,-156
    4ad0:	01400804 	movi	r5,32
    4ad4:	1009883a 	mov	r4,r2
    4ad8:	000390c0 	call	390c <btc_hdnode_from_seed>
    memset(seed, 0, 32);
    4adc:	e0bff504 	addi	r2,fp,-44
    4ae0:	01800804 	movi	r6,32
    4ae4:	000b883a 	mov	r5,zero
    4ae8:	1009883a 	mov	r4,r2
    4aec:	0045f3c0 	call	45f3c <memset>
    btc_hdnode_serialize_private(&node, chain, masterkeyhex, strsize);
    4af0:	e0bfff17 	ldw	r2,-4(fp)
    4af4:	100f883a 	mov	r7,r2
    4af8:	e1bffe17 	ldw	r6,-8(fp)
    4afc:	e17ffd17 	ldw	r5,-12(fp)
    4b00:	e13fd904 	addi	r4,fp,-156
    4b04:	00040480 	call	4048 <btc_hdnode_serialize_private>
    memset(&node, 0, sizeof(node));
    4b08:	01801c04 	movi	r6,112
    4b0c:	000b883a 	mov	r5,zero
    4b10:	e13fd904 	addi	r4,fp,-156
    4b14:	0045f3c0 	call	45f3c <memset>
    return true;
    4b18:	00800044 	movi	r2,1
}
    4b1c:	e037883a 	mov	sp,fp
    4b20:	dfc00117 	ldw	ra,4(sp)
    4b24:	df000017 	ldw	fp,0(sp)
    4b28:	dec00204 	addi	sp,sp,8
    4b2c:	f800283a 	ret

00004b30 <hd_print_node>:

btc_bool hd_print_node(const btc_chainparams* chain, const char* nodeser, char* pubkey)
{
    4b30:	deffbd04 	addi	sp,sp,-268
    4b34:	dfc04215 	stw	ra,264(sp)
    4b38:	df004115 	stw	fp,260(sp)
    4b3c:	ddc04015 	stw	r23,256(sp)
    4b40:	dd803f15 	stw	r22,252(sp)
    4b44:	dd403e15 	stw	r21,248(sp)
    4b48:	dd003d15 	stw	r20,244(sp)
    4b4c:	dcc03c15 	stw	r19,240(sp)
    4b50:	dc803b15 	stw	r18,236(sp)
    4b54:	dc403a15 	stw	r17,232(sp)
    4b58:	dc003915 	stw	r16,228(sp)
    4b5c:	df004104 	addi	fp,sp,260
    4b60:	e13fe415 	stw	r4,-112(fp)
    4b64:	e17fe515 	stw	r5,-108(fp)
    4b68:	e1bfe615 	stw	r6,-104(fp)
    4b6c:	d805883a 	mov	r2,sp
    4b70:	e0bfe715 	stw	r2,-100(fp)
    btc_hdnode node;
    if (!btc_hdnode_deserialize(nodeser, chain, &node))
    4b74:	e0bfc704 	addi	r2,fp,-228
    4b78:	100d883a 	mov	r6,r2
    4b7c:	e17fe417 	ldw	r5,-112(fp)
    4b80:	e13fe517 	ldw	r4,-108(fp)
    4b84:	00041d00 	call	41d0 <btc_hdnode_deserialize>
    4b88:	10803fcc 	andi	r2,r2,255
    4b8c:	1000021e 	bne	r2,zero,4b98 <hd_print_node+0x68>
        return false;
    4b90:	0005883a 	mov	r2,zero
    4b94:	0000d706 	br	4ef4 <hd_print_node+0x3c4>

    size_t strsize = 128;
    4b98:	00802004 	movi	r2,128
    4b9c:	e0bfe315 	stw	r2,-116(fp)
    char str[strsize];
    4ba0:	e0ffe317 	ldw	r3,-116(fp)
    4ba4:	1805883a 	mov	r2,r3
    4ba8:	10bfffc4 	addi	r2,r2,-1
    4bac:	e0bfbf15 	stw	r2,-260(fp)
    4bb0:	e0ffe815 	stw	r3,-96(fp)
    4bb4:	e03fe915 	stw	zero,-92(fp)
    4bb8:	e13fe817 	ldw	r4,-96(fp)
    4bbc:	2004d77a 	srli	r2,r4,29
    4bc0:	e13fe917 	ldw	r4,-92(fp)
    4bc4:	200890fa 	slli	r4,r4,3
    4bc8:	e13feb15 	stw	r4,-84(fp)
    4bcc:	e13feb17 	ldw	r4,-84(fp)
    4bd0:	1104b03a 	or	r2,r2,r4
    4bd4:	e0bfeb15 	stw	r2,-84(fp)
    4bd8:	e0bfe817 	ldw	r2,-96(fp)
    4bdc:	100490fa 	slli	r2,r2,3
    4be0:	e0ffec15 	stw	r3,-80(fp)
    4be4:	e03fed15 	stw	zero,-76(fp)
    4be8:	e13fec17 	ldw	r4,-80(fp)
    4bec:	2004d77a 	srli	r2,r4,29
    4bf0:	e13fed17 	ldw	r4,-76(fp)
    4bf4:	200890fa 	slli	r4,r4,3
    4bf8:	e13fef15 	stw	r4,-68(fp)
    4bfc:	e13fef17 	ldw	r4,-68(fp)
    4c00:	1104b03a 	or	r2,r2,r4
    4c04:	e0bfef15 	stw	r2,-68(fp)
    4c08:	e0bfec17 	ldw	r2,-80(fp)
    4c0c:	100490fa 	slli	r2,r2,3
    4c10:	188000c4 	addi	r2,r3,3
    4c14:	1004d0ba 	srli	r2,r2,2
    4c18:	1085883a 	add	r2,r2,r2
    4c1c:	1085883a 	add	r2,r2,r2
    4c20:	d8b7c83a 	sub	sp,sp,r2
    4c24:	d805883a 	mov	r2,sp
    4c28:	1005883a 	mov	r2,r2
    4c2c:	e0bfc015 	stw	r2,-256(fp)
    btc_hdnode_get_p2pkh_address(&node, chain, str, strsize);
    4c30:	e0ffc017 	ldw	r3,-256(fp)
    4c34:	e0bfe317 	ldw	r2,-116(fp)
    4c38:	1009883a 	mov	r4,r2
    4c3c:	e0bfc704 	addi	r2,fp,-228
    4c40:	200f883a 	mov	r7,r4
    4c44:	180d883a 	mov	r6,r3
    4c48:	e17fe417 	ldw	r5,-112(fp)
    4c4c:	1009883a 	mov	r4,r2
    4c50:	00040fc0 	call	40fc <btc_hdnode_get_p2pkh_address>

    printf("ext key: %s\n", nodeser);
    4c54:	e17fe517 	ldw	r5,-108(fp)
    4c58:	010001b4 	movhi	r4,6
    4c5c:	2129b104 	addi	r4,r4,-22844
    4c60:	00460940 	call	46094 <printf>

    size_t privkey_wif_size_bin = 34;
    4c64:	00800884 	movi	r2,34
    4c68:	e0bfc115 	stw	r2,-252(fp)
    uint8_t pkeybase58c[privkey_wif_size_bin];
    4c6c:	e0bfc117 	ldw	r2,-252(fp)
    4c70:	1007883a 	mov	r3,r2
    4c74:	18ffffc4 	addi	r3,r3,-1
    4c78:	e0ffc215 	stw	r3,-248(fp)
    4c7c:	e0bff015 	stw	r2,-64(fp)
    4c80:	e03ff115 	stw	zero,-60(fp)
    4c84:	e13ff017 	ldw	r4,-64(fp)
    4c88:	2006d77a 	srli	r3,r4,29
    4c8c:	e13ff117 	ldw	r4,-60(fp)
    4c90:	202e90fa 	slli	r23,r4,3
    4c94:	1deeb03a 	or	r23,r3,r23
    4c98:	e0fff017 	ldw	r3,-64(fp)
    4c9c:	182c90fa 	slli	r22,r3,3
    4ca0:	e0bff215 	stw	r2,-56(fp)
    4ca4:	e03ff315 	stw	zero,-52(fp)
    4ca8:	e13ff217 	ldw	r4,-56(fp)
    4cac:	2006d77a 	srli	r3,r4,29
    4cb0:	e13ff317 	ldw	r4,-52(fp)
    4cb4:	202a90fa 	slli	r21,r4,3
    4cb8:	1d6ab03a 	or	r21,r3,r21
    4cbc:	e0fff217 	ldw	r3,-56(fp)
    4cc0:	182890fa 	slli	r20,r3,3
    4cc4:	108000c4 	addi	r2,r2,3
    4cc8:	1004d0ba 	srli	r2,r2,2
    4ccc:	1085883a 	add	r2,r2,r2
    4cd0:	1085883a 	add	r2,r2,r2
    4cd4:	d8b7c83a 	sub	sp,sp,r2
    4cd8:	d805883a 	mov	r2,sp
    4cdc:	1005883a 	mov	r2,r2
    4ce0:	e0bfc315 	stw	r2,-244(fp)
    pkeybase58c[0] = chain->b58prefix_secret_address;
    4ce4:	e0bfe417 	ldw	r2,-112(fp)
    4ce8:	10c009c3 	ldbu	r3,39(r2)
    4cec:	e0bfc317 	ldw	r2,-244(fp)
    4cf0:	10c00005 	stb	r3,0(r2)
    pkeybase58c[33] = 1; /* always use compressed keys */
    4cf4:	e0bfc317 	ldw	r2,-244(fp)
    4cf8:	00c00044 	movi	r3,1
    4cfc:	10c00845 	stb	r3,33(r2)
    size_t privkey_wif_size = 128;
    4d00:	00802004 	movi	r2,128
    4d04:	e0bfc415 	stw	r2,-240(fp)
    char privkey_wif[privkey_wif_size];
    4d08:	e0bfc417 	ldw	r2,-240(fp)
    4d0c:	1007883a 	mov	r3,r2
    4d10:	18ffffc4 	addi	r3,r3,-1
    4d14:	e0ffc515 	stw	r3,-236(fp)
    4d18:	e0bff415 	stw	r2,-48(fp)
    4d1c:	e03ff515 	stw	zero,-44(fp)
    4d20:	e13ff417 	ldw	r4,-48(fp)
    4d24:	2006d77a 	srli	r3,r4,29
    4d28:	e13ff517 	ldw	r4,-44(fp)
    4d2c:	202690fa 	slli	r19,r4,3
    4d30:	1ce6b03a 	or	r19,r3,r19
    4d34:	e0fff417 	ldw	r3,-48(fp)
    4d38:	182490fa 	slli	r18,r3,3
    4d3c:	e0bff615 	stw	r2,-40(fp)
    4d40:	e03ff715 	stw	zero,-36(fp)
    4d44:	e13ff617 	ldw	r4,-40(fp)
    4d48:	2006d77a 	srli	r3,r4,29
    4d4c:	e13ff717 	ldw	r4,-36(fp)
    4d50:	202290fa 	slli	r17,r4,3
    4d54:	1c62b03a 	or	r17,r3,r17
    4d58:	e0fff617 	ldw	r3,-40(fp)
    4d5c:	182090fa 	slli	r16,r3,3
    4d60:	108000c4 	addi	r2,r2,3
    4d64:	1004d0ba 	srli	r2,r2,2
    4d68:	1085883a 	add	r2,r2,r2
    4d6c:	1085883a 	add	r2,r2,r2
    4d70:	d8b7c83a 	sub	sp,sp,r2
    4d74:	d805883a 	mov	r2,sp
    4d78:	1005883a 	mov	r2,r2
    4d7c:	e0bfc615 	stw	r2,-232(fp)
    memcpy(&pkeybase58c[1], node.private_key, BTC_ECKEY_PKEY_LENGTH);
    4d80:	e0bfc317 	ldw	r2,-244(fp)
    4d84:	10800044 	addi	r2,r2,1
    4d88:	1009883a 	mov	r4,r2
    4d8c:	e0bfd204 	addi	r2,fp,-184
    4d90:	00c00804 	movi	r3,32
    4d94:	180d883a 	mov	r6,r3
    4d98:	100b883a 	mov	r5,r2
    4d9c:	0045c980 	call	45c98 <memcpy>
    assert(btc_base58_encode_check(pkeybase58c, privkey_wif_size_bin, privkey_wif, privkey_wif_size) != 0);
    4da0:	e0bfc317 	ldw	r2,-244(fp)
    4da4:	e0ffc117 	ldw	r3,-252(fp)
    4da8:	e13fc617 	ldw	r4,-232(fp)
    4dac:	e17fc417 	ldw	r5,-240(fp)
    4db0:	280f883a 	mov	r7,r5
    4db4:	200d883a 	mov	r6,r4
    4db8:	180b883a 	mov	r5,r3
    4dbc:	1009883a 	mov	r4,r2
    4dc0:	00031880 	call	3188 <btc_base58_encode_check>
    4dc4:	1000081e 	bne	r2,zero,4de8 <hd_print_node+0x2b8>
    4dc8:	01c001b4 	movhi	r7,6
    4dcc:	39e9b504 	addi	r7,r7,-22828
    4dd0:	018001b4 	movhi	r6,6
    4dd4:	31a9fe04 	addi	r6,r6,-22536
    4dd8:	01401d44 	movi	r5,117
    4ddc:	010001b4 	movhi	r4,6
    4de0:	21299904 	addi	r4,r4,-22940
    4de4:	004504c0 	call	4504c <__assert_func>
    if (btc_hdnode_has_privkey(&node)) {
    4de8:	e0bfc704 	addi	r2,fp,-228
    4dec:	1009883a 	mov	r4,r2
    4df0:	00047a40 	call	47a4 <btc_hdnode_has_privkey>
    4df4:	10803fcc 	andi	r2,r2,255
    4df8:	10000526 	beq	r2,zero,4e10 <hd_print_node+0x2e0>
        printf("privatekey WIF: %s\n", privkey_wif);
    4dfc:	e0bfc617 	ldw	r2,-232(fp)
    4e00:	100b883a 	mov	r5,r2
    4e04:	010001b4 	movhi	r4,6
    4e08:	2129cd04 	addi	r4,r4,-22732
    4e0c:	00460940 	call	46094 <printf>
    }

    printf("depth: %d\n", node.depth);
    4e10:	e0bfc717 	ldw	r2,-228(fp)
    4e14:	100b883a 	mov	r5,r2
    4e18:	010001b4 	movhi	r4,6
    4e1c:	2129d204 	addi	r4,r4,-22712
    4e20:	00460940 	call	46094 <printf>
    printf("child index: %d\n", node.child_num);
    4e24:	e0bfc917 	ldw	r2,-220(fp)
    4e28:	100b883a 	mov	r5,r2
    4e2c:	010001b4 	movhi	r4,6
    4e30:	2129d504 	addi	r4,r4,-22700
    4e34:	00460940 	call	46094 <printf>
    printf("p2pkh address: %s\n", str);
    4e38:	e0bfc017 	ldw	r2,-256(fp)
    4e3c:	100b883a 	mov	r5,r2
    4e40:	010001b4 	movhi	r4,6
    4e44:	2129da04 	addi	r4,r4,-22680
    4e48:	00460940 	call	46094 <printf>
    printf("p2wpkh address: %s\n", str);
    4e4c:	e0bfc017 	ldw	r2,-256(fp)
    4e50:	100b883a 	mov	r5,r2
    4e54:	010001b4 	movhi	r4,6
    4e58:	2129df04 	addi	r4,r4,-22660
    4e5c:	00460940 	call	46094 <printf>
    strcpy(pubkey, str);
    4e60:	e0bfc017 	ldw	r2,-256(fp)
    4e64:	100b883a 	mov	r5,r2
    4e68:	e13fe617 	ldw	r4,-104(fp)
    4e6c:	0046e180 	call	46e18 <strcpy>

    if (!btc_hdnode_get_pub_hex(&node, str, &strsize))
    4e70:	e0ffc017 	ldw	r3,-256(fp)
    4e74:	e13fe304 	addi	r4,fp,-116
    4e78:	e0bfc704 	addi	r2,fp,-228
    4e7c:	200d883a 	mov	r6,r4
    4e80:	180b883a 	mov	r5,r3
    4e84:	1009883a 	mov	r4,r2
    4e88:	00041640 	call	4164 <btc_hdnode_get_pub_hex>
    4e8c:	10803fcc 	andi	r2,r2,255
    4e90:	1000021e 	bne	r2,zero,4e9c <hd_print_node+0x36c>
        return false;
    4e94:	0005883a 	mov	r2,zero
    4e98:	00001606 	br	4ef4 <hd_print_node+0x3c4>
    printf("pubkey hex: %s\n", str);
    4e9c:	e0bfc017 	ldw	r2,-256(fp)
    4ea0:	100b883a 	mov	r5,r2
    4ea4:	010001b4 	movhi	r4,6
    4ea8:	2129e404 	addi	r4,r4,-22640
    4eac:	00460940 	call	46094 <printf>

    strsize = 128;
    4eb0:	00802004 	movi	r2,128
    4eb4:	e0bfe315 	stw	r2,-116(fp)
    btc_hdnode_serialize_public(&node, chain, str, strsize);
    4eb8:	e0ffc017 	ldw	r3,-256(fp)
    4ebc:	e0bfe317 	ldw	r2,-116(fp)
    4ec0:	1009883a 	mov	r4,r2
    4ec4:	e0bfc704 	addi	r2,fp,-228
    4ec8:	200f883a 	mov	r7,r4
    4ecc:	180d883a 	mov	r6,r3
    4ed0:	e17fe417 	ldw	r5,-112(fp)
    4ed4:	1009883a 	mov	r4,r2
    4ed8:	0003fec0 	call	3fec <btc_hdnode_serialize_public>
    printf("extended pubkey: %s\n", str);
    4edc:	e0bfc017 	ldw	r2,-256(fp)
    4ee0:	100b883a 	mov	r5,r2
    4ee4:	010001b4 	movhi	r4,6
    4ee8:	2129e804 	addi	r4,r4,-22624
    4eec:	00460940 	call	46094 <printf>
    return true;
    4ef0:	00800044 	movi	r2,1
    4ef4:	e6ffe717 	ldw	sp,-100(fp)
}
    4ef8:	e6fff804 	addi	sp,fp,-32
    4efc:	dfc00917 	ldw	ra,36(sp)
    4f00:	df000817 	ldw	fp,32(sp)
    4f04:	ddc00717 	ldw	r23,28(sp)
    4f08:	dd800617 	ldw	r22,24(sp)
    4f0c:	dd400517 	ldw	r21,20(sp)
    4f10:	dd000417 	ldw	r20,16(sp)
    4f14:	dcc00317 	ldw	r19,12(sp)
    4f18:	dc800217 	ldw	r18,8(sp)
    4f1c:	dc400117 	ldw	r17,4(sp)
    4f20:	dc000017 	ldw	r16,0(sp)
    4f24:	dec00a04 	addi	sp,sp,40
    4f28:	f800283a 	ret

00004f2c <hd_derive>:

btc_bool hd_derive(const btc_chainparams* chain, const char* masterkey, const char* keypath, char* extkeyout, size_t extkeyout_size)
{
    4f2c:	deffc004 	addi	sp,sp,-256
    4f30:	dfc03f15 	stw	ra,252(sp)
    4f34:	df003e15 	stw	fp,248(sp)
    4f38:	df003e04 	addi	fp,sp,248
    4f3c:	e13ffc15 	stw	r4,-16(fp)
    4f40:	e17ffd15 	stw	r5,-12(fp)
    4f44:	e1bffe15 	stw	r6,-8(fp)
    4f48:	e1ffff15 	stw	r7,-4(fp)
    if (!keypath || !masterkey || !extkeyout) {
    4f4c:	e0bffe17 	ldw	r2,-8(fp)
    4f50:	10000426 	beq	r2,zero,4f64 <hd_derive+0x38>
    4f54:	e0bffd17 	ldw	r2,-12(fp)
    4f58:	10000226 	beq	r2,zero,4f64 <hd_derive+0x38>
    4f5c:	e0bfff17 	ldw	r2,-4(fp)
    4f60:	1000021e 	bne	r2,zero,4f6c <hd_derive+0x40>
        return false;
    4f64:	0005883a 	mov	r2,zero
    4f68:	00003506 	br	5040 <hd_derive+0x114>
    }
    btc_hdnode node, nodenew;
    if (!btc_hdnode_deserialize(masterkey, chain, &node))
    4f6c:	e0bfc404 	addi	r2,fp,-240
    4f70:	100d883a 	mov	r6,r2
    4f74:	e17ffc17 	ldw	r5,-16(fp)
    4f78:	e13ffd17 	ldw	r4,-12(fp)
    4f7c:	00041d00 	call	41d0 <btc_hdnode_deserialize>
    4f80:	10803fcc 	andi	r2,r2,255
    4f84:	1000021e 	bne	r2,zero,4f90 <hd_derive+0x64>
        return false;
    4f88:	0005883a 	mov	r2,zero
    4f8c:	00002c06 	br	5040 <hd_derive+0x114>

    //check if we only have the publickey
    bool pubckd = !btc_hdnode_has_privkey(&node);
    4f90:	e0bfc404 	addi	r2,fp,-240
    4f94:	1009883a 	mov	r4,r2
    4f98:	00047a40 	call	47a4 <btc_hdnode_has_privkey>
    4f9c:	10803fcc 	andi	r2,r2,255
    4fa0:	1005003a 	cmpeq	r2,r2,zero
    4fa4:	e0bfc305 	stb	r2,-244(fp)

    //derive child key, use pubckd or privckd
    if (!btc_hd_generate_key(&nodenew, keypath, pubckd ? node.public_key : node.private_key, node.chain_code, pubckd))
    4fa8:	e0bfc303 	ldbu	r2,-244(fp)
    4fac:	10000326 	beq	r2,zero,4fbc <hd_derive+0x90>
    4fb0:	e0bfc404 	addi	r2,fp,-240
    4fb4:	10801304 	addi	r2,r2,76
    4fb8:	00000206 	br	4fc4 <hd_derive+0x98>
    4fbc:	e0bfc404 	addi	r2,fp,-240
    4fc0:	10800b04 	addi	r2,r2,44
    4fc4:	e0ffc303 	ldbu	r3,-244(fp)
    4fc8:	e13fc404 	addi	r4,fp,-240
    4fcc:	21400304 	addi	r5,r4,12
    4fd0:	e13fe004 	addi	r4,fp,-128
    4fd4:	d8c00015 	stw	r3,0(sp)
    4fd8:	280f883a 	mov	r7,r5
    4fdc:	100d883a 	mov	r6,r2
    4fe0:	e17ffe17 	ldw	r5,-8(fp)
    4fe4:	00044040 	call	4404 <btc_hd_generate_key>
    4fe8:	10803fcc 	andi	r2,r2,255
    4fec:	1000021e 	bne	r2,zero,4ff8 <hd_derive+0xcc>
        return false;
    4ff0:	0005883a 	mov	r2,zero
    4ff4:	00001206 	br	5040 <hd_derive+0x114>


    if (pubckd)
    4ff8:	e0bfc303 	ldbu	r2,-244(fp)
    4ffc:	10000826 	beq	r2,zero,5020 <hd_derive+0xf4>
        btc_hdnode_serialize_public(&nodenew, chain, extkeyout, extkeyout_size);
    5000:	e0c00217 	ldw	r3,8(fp)
    5004:	e0bfe004 	addi	r2,fp,-128
    5008:	180f883a 	mov	r7,r3
    500c:	e1bfff17 	ldw	r6,-4(fp)
    5010:	e17ffc17 	ldw	r5,-16(fp)
    5014:	1009883a 	mov	r4,r2
    5018:	0003fec0 	call	3fec <btc_hdnode_serialize_public>
    501c:	00000706 	br	503c <hd_derive+0x110>
    else
        btc_hdnode_serialize_private(&nodenew, chain, extkeyout, extkeyout_size);
    5020:	e0c00217 	ldw	r3,8(fp)
    5024:	e0bfe004 	addi	r2,fp,-128
    5028:	180f883a 	mov	r7,r3
    502c:	e1bfff17 	ldw	r6,-4(fp)
    5030:	e17ffc17 	ldw	r5,-16(fp)
    5034:	1009883a 	mov	r4,r2
    5038:	00040480 	call	4048 <btc_hdnode_serialize_private>
    return true;
    503c:	00800044 	movi	r2,1
}
    5040:	e037883a 	mov	sp,fp
    5044:	dfc00117 	ldw	ra,4(sp)
    5048:	df000017 	ldw	fp,0(sp)
    504c:	dec00204 	addi	sp,sp,8
    5050:	f800283a 	ret

00005054 <btc_hash>:
    memcpy(hash_dest, hash_src, BTC_HASH_LENGTH);
}

//bitcoin double sha256 hash
LIBBTC_API static inline void btc_hash(const unsigned char* datain, size_t length, uint256 hashout)
{
    5054:	defffb04 	addi	sp,sp,-20
    5058:	dfc00415 	stw	ra,16(sp)
    505c:	df000315 	stw	fp,12(sp)
    5060:	df000304 	addi	fp,sp,12
    5064:	e13ffd15 	stw	r4,-12(fp)
    5068:	e17ffe15 	stw	r5,-8(fp)
    506c:	e1bfff15 	stw	r6,-4(fp)
    sha256_Raw(datain, length, hashout);
    5070:	e1bfff17 	ldw	r6,-4(fp)
    5074:	e17ffe17 	ldw	r5,-8(fp)
    5078:	e13ffd17 	ldw	r4,-12(fp)
    507c:	003eb140 	call	3eb14 <sha256_Raw>
    sha256_Raw(hashout, SHA256_DIGEST_LENGTH, hashout);
    5080:	e1bfff17 	ldw	r6,-4(fp)
    5084:	01400804 	movi	r5,32
    5088:	e13fff17 	ldw	r4,-4(fp)
    508c:	003eb140 	call	3eb14 <sha256_Raw>
}
    5090:	0001883a 	nop
    5094:	e037883a 	mov	sp,fp
    5098:	dfc00117 	ldw	ra,4(sp)
    509c:	df000017 	ldw	fp,0(sp)
    50a0:	dec00204 	addi	sp,sp,8
    50a4:	f800283a 	ret

000050a8 <btc_hash_sngl_sha256>:

//single sha256 hash
LIBBTC_API static inline void btc_hash_sngl_sha256(const unsigned char* datain, size_t length, uint256 hashout)
{
    50a8:	defffb04 	addi	sp,sp,-20
    50ac:	dfc00415 	stw	ra,16(sp)
    50b0:	df000315 	stw	fp,12(sp)
    50b4:	df000304 	addi	fp,sp,12
    50b8:	e13ffd15 	stw	r4,-12(fp)
    50bc:	e17ffe15 	stw	r5,-8(fp)
    50c0:	e1bfff15 	stw	r6,-4(fp)
    sha256_Raw(datain, length, hashout);
    50c4:	e1bfff17 	ldw	r6,-4(fp)
    50c8:	e17ffe17 	ldw	r5,-8(fp)
    50cc:	e13ffd17 	ldw	r4,-12(fp)
    50d0:	003eb140 	call	3eb14 <sha256_Raw>
}
    50d4:	0001883a 	nop
    50d8:	e037883a 	mov	sp,fp
    50dc:	dfc00117 	ldw	ra,4(sp)
    50e0:	df000017 	ldw	fp,0(sp)
    50e4:	dec00204 	addi	sp,sp,8
    50e8:	f800283a 	ret

000050ec <btc_privkey_init>:
#include "..\include\btc\segwit_addr.h"
#include "..\include\btc\utils.h"


void btc_privkey_init(btc_key* privkey)
{
    50ec:	defffd04 	addi	sp,sp,-12
    50f0:	dfc00215 	stw	ra,8(sp)
    50f4:	df000115 	stw	fp,4(sp)
    50f8:	df000104 	addi	fp,sp,4
    50fc:	e13fff15 	stw	r4,-4(fp)
    memset(&privkey->privkey, 0, BTC_ECKEY_PKEY_LENGTH);
    5100:	e0bfff17 	ldw	r2,-4(fp)
    5104:	01800804 	movi	r6,32
    5108:	000b883a 	mov	r5,zero
    510c:	1009883a 	mov	r4,r2
    5110:	0045f3c0 	call	45f3c <memset>
}
    5114:	0001883a 	nop
    5118:	e037883a 	mov	sp,fp
    511c:	dfc00117 	ldw	ra,4(sp)
    5120:	df000017 	ldw	fp,0(sp)
    5124:	dec00204 	addi	sp,sp,8
    5128:	f800283a 	ret

0000512c <btc_privkey_is_valid>:


btc_bool btc_privkey_is_valid(const btc_key* privkey)
{
    512c:	defffd04 	addi	sp,sp,-12
    5130:	dfc00215 	stw	ra,8(sp)
    5134:	df000115 	stw	fp,4(sp)
    5138:	df000104 	addi	fp,sp,4
    513c:	e13fff15 	stw	r4,-4(fp)
    if (!privkey) {
    5140:	e0bfff17 	ldw	r2,-4(fp)
    5144:	1000021e 	bne	r2,zero,5150 <btc_privkey_is_valid+0x24>
        return false;
    5148:	0005883a 	mov	r2,zero
    514c:	00000306 	br	515c <btc_privkey_is_valid+0x30>
    }
    return btc_ecc_verify_privatekey(privkey->privkey);
    5150:	e0bfff17 	ldw	r2,-4(fp)
    5154:	1009883a 	mov	r4,r2
    5158:	0005f000 	call	5f00 <btc_ecc_verify_privatekey>
}
    515c:	e037883a 	mov	sp,fp
    5160:	dfc00117 	ldw	ra,4(sp)
    5164:	df000017 	ldw	fp,0(sp)
    5168:	dec00204 	addi	sp,sp,8
    516c:	f800283a 	ret

00005170 <btc_privkey_cleanse>:


void btc_privkey_cleanse(btc_key* privkey)
{
    5170:	defffd04 	addi	sp,sp,-12
    5174:	dfc00215 	stw	ra,8(sp)
    5178:	df000115 	stw	fp,4(sp)
    517c:	df000104 	addi	fp,sp,4
    5180:	e13fff15 	stw	r4,-4(fp)
    btc_mem_zero(&privkey->privkey, BTC_ECKEY_PKEY_LENGTH);
    5184:	e0bfff17 	ldw	r2,-4(fp)
    5188:	01400804 	movi	r5,32
    518c:	1009883a 	mov	r4,r2
    5190:	00068740 	call	6874 <btc_mem_zero>
}
    5194:	0001883a 	nop
    5198:	e037883a 	mov	sp,fp
    519c:	dfc00117 	ldw	ra,4(sp)
    51a0:	df000017 	ldw	fp,0(sp)
    51a4:	dec00204 	addi	sp,sp,8
    51a8:	f800283a 	ret

000051ac <btc_privkey_gen>:


void btc_privkey_gen(btc_key* privkey)
{
    51ac:	defffd04 	addi	sp,sp,-12
    51b0:	dfc00215 	stw	ra,8(sp)
    51b4:	df000115 	stw	fp,4(sp)
    51b8:	df000104 	addi	fp,sp,4
    51bc:	e13fff15 	stw	r4,-4(fp)
    if (privkey == NULL)
    51c0:	e0bfff17 	ldw	r2,-4(fp)
    51c4:	10001526 	beq	r2,zero,521c <btc_privkey_gen+0x70>
        return;

    do {
        assert(btc_random_bytes(privkey->privkey, BTC_ECKEY_PKEY_LENGTH, 0));
    51c8:	e0bfff17 	ldw	r2,-4(fp)
    51cc:	000d883a 	mov	r6,zero
    51d0:	01400804 	movi	r5,32
    51d4:	1009883a 	mov	r4,r2
    51d8:	000696c0 	call	696c <btc_random_bytes>
    51dc:	10803fcc 	andi	r2,r2,255
    51e0:	1000081e 	bne	r2,zero,5204 <btc_privkey_gen+0x58>
    51e4:	01c001b4 	movhi	r7,6
    51e8:	39ea0204 	addi	r7,r7,-22520
    51ec:	018001b4 	movhi	r6,6
    51f0:	31aa3604 	addi	r6,r6,-22312
    51f4:	01401204 	movi	r5,72
    51f8:	010001b4 	movhi	r4,6
    51fc:	212a1204 	addi	r4,r4,-22456
    5200:	004504c0 	call	4504c <__assert_func>
    } while (btc_ecc_verify_privatekey(privkey->privkey) == 0);
    5204:	e0bfff17 	ldw	r2,-4(fp)
    5208:	1009883a 	mov	r4,r2
    520c:	0005f000 	call	5f00 <btc_ecc_verify_privatekey>
    5210:	10803fcc 	andi	r2,r2,255
    5214:	103fec26 	beq	r2,zero,51c8 <__alt_mem_epcs_flash_controller+0xfdff41c8>
    5218:	00000106 	br	5220 <btc_privkey_gen+0x74>


void btc_privkey_gen(btc_key* privkey)
{
    if (privkey == NULL)
        return;
    521c:	0001883a 	nop

    do {
        assert(btc_random_bytes(privkey->privkey, BTC_ECKEY_PKEY_LENGTH, 0));
    } while (btc_ecc_verify_privatekey(privkey->privkey) == 0);
}
    5220:	e037883a 	mov	sp,fp
    5224:	dfc00117 	ldw	ra,4(sp)
    5228:	df000017 	ldw	fp,0(sp)
    522c:	dec00204 	addi	sp,sp,8
    5230:	f800283a 	ret

00005234 <btc_privkey_verify_pubkey>:


btc_bool btc_privkey_verify_pubkey(btc_key* privkey, btc_pubkey* pubkey)
{
    5234:	deffd804 	addi	sp,sp,-160
    5238:	dfc02715 	stw	ra,156(sp)
    523c:	df002615 	stw	fp,152(sp)
    5240:	df002604 	addi	fp,sp,152
    5244:	e13ffe15 	stw	r4,-8(fp)
    5248:	e17fff15 	stw	r5,-4(fp)
    uint256 rnddata, hash;
    assert(btc_random_bytes(rnddata, BTC_HASH_LENGTH, 0));
    524c:	000d883a 	mov	r6,zero
    5250:	01400804 	movi	r5,32
    5254:	e13fda04 	addi	r4,fp,-152
    5258:	000696c0 	call	696c <btc_random_bytes>
    525c:	10803fcc 	andi	r2,r2,255
    5260:	1000081e 	bne	r2,zero,5284 <btc_privkey_verify_pubkey+0x50>
    5264:	01c001b4 	movhi	r7,6
    5268:	39ea1704 	addi	r7,r7,-22436
    526c:	018001b4 	movhi	r6,6
    5270:	31aa3a04 	addi	r6,r6,-22296
    5274:	01401404 	movi	r5,80
    5278:	010001b4 	movhi	r4,6
    527c:	212a1204 	addi	r4,r4,-22456
    5280:	004504c0 	call	4504c <__assert_func>
    btc_hash(rnddata, BTC_HASH_LENGTH, hash);
    5284:	e0bfe204 	addi	r2,fp,-120
    5288:	100d883a 	mov	r6,r2
    528c:	01400804 	movi	r5,32
    5290:	e13fda04 	addi	r4,fp,-152
    5294:	00050540 	call	5054 <btc_hash>

    unsigned char sig[74];
    size_t siglen = 74;
    5298:	00801284 	movi	r2,74
    529c:	e0bffd15 	stw	r2,-12(fp)

    if (!btc_key_sign_hash(privkey, hash, sig, &siglen))
    52a0:	e13ffd04 	addi	r4,fp,-12
    52a4:	e0ffea04 	addi	r3,fp,-88
    52a8:	e0bfe204 	addi	r2,fp,-120
    52ac:	200f883a 	mov	r7,r4
    52b0:	180d883a 	mov	r6,r3
    52b4:	100b883a 	mov	r5,r2
    52b8:	e13ffe17 	ldw	r4,-8(fp)
    52bc:	00058100 	call	5810 <btc_key_sign_hash>
    52c0:	10803fcc 	andi	r2,r2,255
    52c4:	1000021e 	bne	r2,zero,52d0 <btc_privkey_verify_pubkey+0x9c>
        return false;
    52c8:	0005883a 	mov	r2,zero
    52cc:	00000906 	br	52f4 <btc_privkey_verify_pubkey+0xc0>

    return btc_pubkey_verify_sig(pubkey, hash, sig, siglen);
    52d0:	e0bffd17 	ldw	r2,-12(fp)
    52d4:	1009883a 	mov	r4,r2
    52d8:	e0ffea04 	addi	r3,fp,-88
    52dc:	e0bfe204 	addi	r2,fp,-120
    52e0:	200f883a 	mov	r7,r4
    52e4:	180d883a 	mov	r6,r3
    52e8:	100b883a 	mov	r5,r2
    52ec:	e13fff17 	ldw	r4,-4(fp)
    52f0:	00059c00 	call	59c0 <btc_pubkey_verify_sig>
}
    52f4:	e037883a 	mov	sp,fp
    52f8:	dfc00117 	ldw	ra,4(sp)
    52fc:	df000017 	ldw	fp,0(sp)
    5300:	dec00204 	addi	sp,sp,8
    5304:	f800283a 	ret

00005308 <btc_privkey_encode_wif>:

void btc_privkey_encode_wif(const btc_key* privkey, const btc_chainparams* chain, char *privkey_wif, size_t *strsize_inout) {
    5308:	defff104 	addi	sp,sp,-60
    530c:	dfc00e15 	stw	ra,56(sp)
    5310:	df000d15 	stw	fp,52(sp)
    5314:	df000d04 	addi	fp,sp,52
    5318:	e13ffc15 	stw	r4,-16(fp)
    531c:	e17ffd15 	stw	r5,-12(fp)
    5320:	e1bffe15 	stw	r6,-8(fp)
    5324:	e1ffff15 	stw	r7,-4(fp)
    uint8_t pkeybase58c[34];
    pkeybase58c[0] = chain->b58prefix_secret_address;
    5328:	e0bffd17 	ldw	r2,-12(fp)
    532c:	108009c3 	ldbu	r2,39(r2)
    5330:	e0bff305 	stb	r2,-52(fp)
    pkeybase58c[33] = 1; /* always use compressed keys */
    5334:	00800044 	movi	r2,1
    5338:	e0bffb45 	stb	r2,-19(fp)

    memcpy(&pkeybase58c[1], privkey->privkey, BTC_ECKEY_PKEY_LENGTH);
    533c:	e0fffc17 	ldw	r3,-16(fp)
    5340:	e0bff344 	addi	r2,fp,-51
    5344:	01800804 	movi	r6,32
    5348:	180b883a 	mov	r5,r3
    534c:	1009883a 	mov	r4,r2
    5350:	0045c980 	call	45c98 <memcpy>
    assert(btc_base58_encode_check(pkeybase58c, 34, privkey_wif, *strsize_inout) != 0);
    5354:	e0bfff17 	ldw	r2,-4(fp)
    5358:	10800017 	ldw	r2,0(r2)
    535c:	100f883a 	mov	r7,r2
    5360:	e1bffe17 	ldw	r6,-8(fp)
    5364:	01400884 	movi	r5,34
    5368:	e13ff304 	addi	r4,fp,-52
    536c:	00031880 	call	3188 <btc_base58_encode_check>
    5370:	1000081e 	bne	r2,zero,5394 <btc_privkey_encode_wif+0x8c>
    5374:	01c001b4 	movhi	r7,6
    5378:	39ea2304 	addi	r7,r7,-22388
    537c:	018001b4 	movhi	r6,6
    5380:	31aa4104 	addi	r6,r6,-22268
    5384:	01401884 	movi	r5,98
    5388:	010001b4 	movhi	r4,6
    538c:	212a1204 	addi	r4,r4,-22456
    5390:	004504c0 	call	4504c <__assert_func>
    btc_mem_zero(&pkeybase58c, 34);
    5394:	01400884 	movi	r5,34
    5398:	e13ff304 	addi	r4,fp,-52
    539c:	00068740 	call	6874 <btc_mem_zero>
}
    53a0:	0001883a 	nop
    53a4:	e037883a 	mov	sp,fp
    53a8:	dfc00117 	ldw	ra,4(sp)
    53ac:	df000017 	ldw	fp,0(sp)
    53b0:	dec00204 	addi	sp,sp,8
    53b4:	f800283a 	ret

000053b8 <btc_privkey_decode_wif>:

btc_bool btc_privkey_decode_wif(const char *privkey_wif, const btc_chainparams* chain, btc_key* privkey) {
    53b8:	deffee04 	addi	sp,sp,-72
    53bc:	dfc01115 	stw	ra,68(sp)
    53c0:	df001015 	stw	fp,64(sp)
    53c4:	ddc00f15 	stw	r23,60(sp)
    53c8:	dd800e15 	stw	r22,56(sp)
    53cc:	dd400d15 	stw	r21,52(sp)
    53d0:	dd000c15 	stw	r20,48(sp)
    53d4:	dcc00b15 	stw	r19,44(sp)
    53d8:	dc800a15 	stw	r18,40(sp)
    53dc:	dc400915 	stw	r17,36(sp)
    53e0:	dc000815 	stw	r16,32(sp)
    53e4:	df001004 	addi	fp,sp,64
    53e8:	e13ff315 	stw	r4,-52(fp)
    53ec:	e17ff415 	stw	r5,-48(fp)
    53f0:	e1bff515 	stw	r6,-44(fp)
    53f4:	d805883a 	mov	r2,sp
    53f8:	e0bff615 	stw	r2,-40(fp)

    if (!privkey_wif || strlen(privkey_wif) < 50) {
    53fc:	e0bff317 	ldw	r2,-52(fp)
    5400:	10000426 	beq	r2,zero,5414 <btc_privkey_decode_wif+0x5c>
    5404:	e13ff317 	ldw	r4,-52(fp)
    5408:	0046ef40 	call	46ef4 <strlen>
    540c:	10800ca8 	cmpgeui	r2,r2,50
    5410:	1000021e 	bne	r2,zero,541c <btc_privkey_decode_wif+0x64>
        return false;
    5414:	0005883a 	mov	r2,zero
    5418:	00004006 	br	551c <btc_privkey_decode_wif+0x164>
    }
    uint8_t privkey_data[strlen(privkey_wif)];
    541c:	e13ff317 	ldw	r4,-52(fp)
    5420:	0046ef40 	call	46ef4 <strlen>
    5424:	e0bff715 	stw	r2,-36(fp)
    5428:	e0bff717 	ldw	r2,-36(fp)
    542c:	10bfffc4 	addi	r2,r2,-1
    5430:	e0bff015 	stw	r2,-64(fp)
    5434:	e5bff717 	ldw	r22,-36(fp)
    5438:	002f883a 	mov	r23,zero
    543c:	b004d77a 	srli	r2,r22,29
    5440:	b82690fa 	slli	r19,r23,3
    5444:	14e6b03a 	or	r19,r2,r19
    5448:	b02490fa 	slli	r18,r22,3
    544c:	e53ff717 	ldw	r20,-36(fp)
    5450:	002b883a 	mov	r21,zero
    5454:	a004d77a 	srli	r2,r20,29
    5458:	a82290fa 	slli	r17,r21,3
    545c:	1462b03a 	or	r17,r2,r17
    5460:	a02090fa 	slli	r16,r20,3
    5464:	e0fff717 	ldw	r3,-36(fp)
    5468:	188000c4 	addi	r2,r3,3
    546c:	1004d0ba 	srli	r2,r2,2
    5470:	1085883a 	add	r2,r2,r2
    5474:	1085883a 	add	r2,r2,r2
    5478:	d8b7c83a 	sub	sp,sp,r2
    547c:	d805883a 	mov	r2,sp
    5480:	1005883a 	mov	r2,r2
    5484:	e0bff115 	stw	r2,-60(fp)
    memset(privkey_data, 0, sizeof(privkey_data));
    5488:	e0bff117 	ldw	r2,-60(fp)
    548c:	e1bff717 	ldw	r6,-36(fp)
    5490:	000b883a 	mov	r5,zero
    5494:	1009883a 	mov	r4,r2
    5498:	0045f3c0 	call	45f3c <memset>
    size_t outlen = 0;
    549c:	e03ff215 	stw	zero,-56(fp)

    outlen = btc_base58_decode_check(privkey_wif, privkey_data, sizeof(privkey_data));
    54a0:	e0bff117 	ldw	r2,-60(fp)
    54a4:	e1bff717 	ldw	r6,-36(fp)
    54a8:	100b883a 	mov	r5,r2
    54ac:	e13ff317 	ldw	r4,-52(fp)
    54b0:	00033080 	call	3308 <btc_base58_decode_check>
    54b4:	e0bff215 	stw	r2,-56(fp)
    if (!outlen) {
    54b8:	e0bff217 	ldw	r2,-56(fp)
    54bc:	1000021e 	bne	r2,zero,54c8 <btc_privkey_decode_wif+0x110>
        return false;
    54c0:	0005883a 	mov	r2,zero
    54c4:	00001506 	br	551c <btc_privkey_decode_wif+0x164>
    }
    if (privkey_data[0] != chain->b58prefix_secret_address) {
    54c8:	e0bff117 	ldw	r2,-60(fp)
    54cc:	10c00003 	ldbu	r3,0(r2)
    54d0:	e0bff417 	ldw	r2,-48(fp)
    54d4:	108009c3 	ldbu	r2,39(r2)
    54d8:	18c03fcc 	andi	r3,r3,255
    54dc:	10803fcc 	andi	r2,r2,255
    54e0:	18800226 	beq	r3,r2,54ec <btc_privkey_decode_wif+0x134>
        return false;
    54e4:	0005883a 	mov	r2,zero
    54e8:	00000c06 	br	551c <btc_privkey_decode_wif+0x164>
    }
    memcpy(privkey->privkey, &privkey_data[1], BTC_ECKEY_PKEY_LENGTH);
    54ec:	e0fff517 	ldw	r3,-44(fp)
    54f0:	e0bff117 	ldw	r2,-60(fp)
    54f4:	10800044 	addi	r2,r2,1
    54f8:	01800804 	movi	r6,32
    54fc:	100b883a 	mov	r5,r2
    5500:	1809883a 	mov	r4,r3
    5504:	0045c980 	call	45c98 <memcpy>
    btc_mem_zero(&privkey_data, sizeof(privkey_data));
    5508:	e0bff117 	ldw	r2,-60(fp)
    550c:	e17ff717 	ldw	r5,-36(fp)
    5510:	1009883a 	mov	r4,r2
    5514:	00068740 	call	6874 <btc_mem_zero>
    return true;
    5518:	00800044 	movi	r2,1
    551c:	e6fff617 	ldw	sp,-40(fp)
}
    5520:	e6fff804 	addi	sp,fp,-32
    5524:	dfc00917 	ldw	ra,36(sp)
    5528:	df000817 	ldw	fp,32(sp)
    552c:	ddc00717 	ldw	r23,28(sp)
    5530:	dd800617 	ldw	r22,24(sp)
    5534:	dd400517 	ldw	r21,20(sp)
    5538:	dd000417 	ldw	r20,16(sp)
    553c:	dcc00317 	ldw	r19,12(sp)
    5540:	dc800217 	ldw	r18,8(sp)
    5544:	dc400117 	ldw	r17,4(sp)
    5548:	dc000017 	ldw	r16,0(sp)
    554c:	dec00a04 	addi	sp,sp,40
    5550:	f800283a 	ret

00005554 <btc_pubkey_init>:

void btc_pubkey_init(btc_pubkey* pubkey)
{
    5554:	defffd04 	addi	sp,sp,-12
    5558:	dfc00215 	stw	ra,8(sp)
    555c:	df000115 	stw	fp,4(sp)
    5560:	df000104 	addi	fp,sp,4
    5564:	e13fff15 	stw	r4,-4(fp)
    if (pubkey == NULL)
    5568:	e0bfff17 	ldw	r2,-4(fp)
    556c:	10000926 	beq	r2,zero,5594 <btc_pubkey_init+0x40>
        return;

    memset(pubkey->pubkey, 0, BTC_ECKEY_UNCOMPRESSED_LENGTH);
    5570:	e0bfff17 	ldw	r2,-4(fp)
    5574:	10800044 	addi	r2,r2,1
    5578:	01801044 	movi	r6,65
    557c:	000b883a 	mov	r5,zero
    5580:	1009883a 	mov	r4,r2
    5584:	0045f3c0 	call	45f3c <memset>
    pubkey->compressed = false;
    5588:	e0bfff17 	ldw	r2,-4(fp)
    558c:	10000005 	stb	zero,0(r2)
    5590:	00000106 	br	5598 <btc_pubkey_init+0x44>
}

void btc_pubkey_init(btc_pubkey* pubkey)
{
    if (pubkey == NULL)
        return;
    5594:	0001883a 	nop

    memset(pubkey->pubkey, 0, BTC_ECKEY_UNCOMPRESSED_LENGTH);
    pubkey->compressed = false;
}
    5598:	e037883a 	mov	sp,fp
    559c:	dfc00117 	ldw	ra,4(sp)
    55a0:	df000017 	ldw	fp,0(sp)
    55a4:	dec00204 	addi	sp,sp,8
    55a8:	f800283a 	ret

000055ac <btc_pubkey_get_length>:


unsigned int btc_pubkey_get_length(unsigned char ch_header)
{
    55ac:	defffe04 	addi	sp,sp,-8
    55b0:	df000115 	stw	fp,4(sp)
    55b4:	df000104 	addi	fp,sp,4
    55b8:	2005883a 	mov	r2,r4
    55bc:	e0bfff05 	stb	r2,-4(fp)
    if (ch_header == 2 || ch_header == 3)
    55c0:	e0bfff03 	ldbu	r2,-4(fp)
    55c4:	108000a0 	cmpeqi	r2,r2,2
    55c8:	1000031e 	bne	r2,zero,55d8 <btc_pubkey_get_length+0x2c>
    55cc:	e0bfff03 	ldbu	r2,-4(fp)
    55d0:	108000d8 	cmpnei	r2,r2,3
    55d4:	1000021e 	bne	r2,zero,55e0 <btc_pubkey_get_length+0x34>
        return BTC_ECKEY_COMPRESSED_LENGTH;
    55d8:	00800844 	movi	r2,33
    55dc:	00000c06 	br	5610 <btc_pubkey_get_length+0x64>
    if (ch_header == 4 || ch_header == 6 || ch_header == 7)
    55e0:	e0bfff03 	ldbu	r2,-4(fp)
    55e4:	10800120 	cmpeqi	r2,r2,4
    55e8:	1000061e 	bne	r2,zero,5604 <btc_pubkey_get_length+0x58>
    55ec:	e0bfff03 	ldbu	r2,-4(fp)
    55f0:	108001a0 	cmpeqi	r2,r2,6
    55f4:	1000031e 	bne	r2,zero,5604 <btc_pubkey_get_length+0x58>
    55f8:	e0bfff03 	ldbu	r2,-4(fp)
    55fc:	108001d8 	cmpnei	r2,r2,7
    5600:	1000021e 	bne	r2,zero,560c <btc_pubkey_get_length+0x60>
        return BTC_ECKEY_UNCOMPRESSED_LENGTH;
    5604:	00801044 	movi	r2,65
    5608:	00000106 	br	5610 <btc_pubkey_get_length+0x64>
    return 0;
    560c:	0005883a 	mov	r2,zero
}
    5610:	e037883a 	mov	sp,fp
    5614:	df000017 	ldw	fp,0(sp)
    5618:	dec00104 	addi	sp,sp,4
    561c:	f800283a 	ret

00005620 <btc_pubkey_is_valid>:


btc_bool btc_pubkey_is_valid(const btc_pubkey* pubkey)
{
    5620:	defffd04 	addi	sp,sp,-12
    5624:	dfc00215 	stw	ra,8(sp)
    5628:	df000115 	stw	fp,4(sp)
    562c:	df000104 	addi	fp,sp,4
    5630:	e13fff15 	stw	r4,-4(fp)
    return btc_ecc_verify_pubkey(pubkey->pubkey, pubkey->compressed);
    5634:	e0bfff17 	ldw	r2,-4(fp)
    5638:	10c00044 	addi	r3,r2,1
    563c:	e0bfff17 	ldw	r2,-4(fp)
    5640:	10800003 	ldbu	r2,0(r2)
    5644:	10803fcc 	andi	r2,r2,255
    5648:	100b883a 	mov	r5,r2
    564c:	1809883a 	mov	r4,r3
    5650:	0005f600 	call	5f60 <btc_ecc_verify_pubkey>
}
    5654:	e037883a 	mov	sp,fp
    5658:	dfc00117 	ldw	ra,4(sp)
    565c:	df000017 	ldw	fp,0(sp)
    5660:	dec00204 	addi	sp,sp,8
    5664:	f800283a 	ret

00005668 <btc_pubkey_cleanse>:


void btc_pubkey_cleanse(btc_pubkey* pubkey)
{
    5668:	defffd04 	addi	sp,sp,-12
    566c:	dfc00215 	stw	ra,8(sp)
    5670:	df000115 	stw	fp,4(sp)
    5674:	df000104 	addi	fp,sp,4
    5678:	e13fff15 	stw	r4,-4(fp)
    if (pubkey == NULL)
    567c:	e0bfff17 	ldw	r2,-4(fp)
    5680:	10000626 	beq	r2,zero,569c <btc_pubkey_cleanse+0x34>
        return;

    btc_mem_zero(pubkey->pubkey, BTC_ECKEY_UNCOMPRESSED_LENGTH);
    5684:	e0bfff17 	ldw	r2,-4(fp)
    5688:	10800044 	addi	r2,r2,1
    568c:	01401044 	movi	r5,65
    5690:	1009883a 	mov	r4,r2
    5694:	00068740 	call	6874 <btc_mem_zero>
    5698:	00000106 	br	56a0 <btc_pubkey_cleanse+0x38>


void btc_pubkey_cleanse(btc_pubkey* pubkey)
{
    if (pubkey == NULL)
        return;
    569c:	0001883a 	nop

    btc_mem_zero(pubkey->pubkey, BTC_ECKEY_UNCOMPRESSED_LENGTH);
}
    56a0:	e037883a 	mov	sp,fp
    56a4:	dfc00117 	ldw	ra,4(sp)
    56a8:	df000017 	ldw	fp,0(sp)
    56ac:	dec00204 	addi	sp,sp,8
    56b0:	f800283a 	ret

000056b4 <btc_pubkey_get_hash160>:


void btc_pubkey_get_hash160(const btc_pubkey* pubkey, uint160 hash160)
{
    56b4:	defff404 	addi	sp,sp,-48
    56b8:	dfc00b15 	stw	ra,44(sp)
    56bc:	df000a15 	stw	fp,40(sp)
    56c0:	df000a04 	addi	fp,sp,40
    56c4:	e13ffe15 	stw	r4,-8(fp)
    56c8:	e17fff15 	stw	r5,-4(fp)
    uint256 hashout;
    btc_hash_sngl_sha256(pubkey->pubkey, pubkey->compressed ? BTC_ECKEY_COMPRESSED_LENGTH : BTC_ECKEY_UNCOMPRESSED_LENGTH, hashout);
    56cc:	e0bffe17 	ldw	r2,-8(fp)
    56d0:	10c00044 	addi	r3,r2,1
    56d4:	e0bffe17 	ldw	r2,-8(fp)
    56d8:	10800003 	ldbu	r2,0(r2)
    56dc:	10803fcc 	andi	r2,r2,255
    56e0:	10000226 	beq	r2,zero,56ec <btc_pubkey_get_hash160+0x38>
    56e4:	00800844 	movi	r2,33
    56e8:	00000106 	br	56f0 <btc_pubkey_get_hash160+0x3c>
    56ec:	00801044 	movi	r2,65
    56f0:	e1bff604 	addi	r6,fp,-40
    56f4:	100b883a 	mov	r5,r2
    56f8:	1809883a 	mov	r4,r3
    56fc:	00050a80 	call	50a8 <btc_hash_sngl_sha256>

    btc_ripemd160(hashout, sizeof(hashout), hash160);
    5700:	e1bfff17 	ldw	r6,-4(fp)
    5704:	01400804 	movi	r5,32
    5708:	e13ff604 	addi	r4,fp,-40
    570c:	000a6a40 	call	a6a4 <btc_ripemd160>
}
    5710:	0001883a 	nop
    5714:	e037883a 	mov	sp,fp
    5718:	dfc00117 	ldw	ra,4(sp)
    571c:	df000017 	ldw	fp,0(sp)
    5720:	dec00204 	addi	sp,sp,8
    5724:	f800283a 	ret

00005728 <btc_pubkey_get_hex>:


btc_bool btc_pubkey_get_hex(const btc_pubkey* pubkey, char* str, size_t* strsize)
{
    5728:	defffb04 	addi	sp,sp,-20
    572c:	dfc00415 	stw	ra,16(sp)
    5730:	df000315 	stw	fp,12(sp)
    5734:	df000304 	addi	fp,sp,12
    5738:	e13ffd15 	stw	r4,-12(fp)
    573c:	e17ffe15 	stw	r5,-8(fp)
    5740:	e1bfff15 	stw	r6,-4(fp)
    if (*strsize < BTC_ECKEY_COMPRESSED_LENGTH * 2)
    5744:	e0bfff17 	ldw	r2,-4(fp)
    5748:	10800017 	ldw	r2,0(r2)
    574c:	108010a8 	cmpgeui	r2,r2,66
    5750:	1000021e 	bne	r2,zero,575c <btc_pubkey_get_hex+0x34>
        return false;
    5754:	0005883a 	mov	r2,zero
    5758:	00000a06 	br	5784 <btc_pubkey_get_hex+0x5c>
    utils_bin_to_hex((unsigned char*)pubkey->pubkey, BTC_ECKEY_COMPRESSED_LENGTH, str);
    575c:	e0bffd17 	ldw	r2,-12(fp)
    5760:	10800044 	addi	r2,r2,1
    5764:	e1bffe17 	ldw	r6,-8(fp)
    5768:	01400844 	movi	r5,33
    576c:	1009883a 	mov	r4,r2
    5770:	00412fc0 	call	412fc <utils_bin_to_hex>
    *strsize = BTC_ECKEY_COMPRESSED_LENGTH * 2;
    5774:	e0bfff17 	ldw	r2,-4(fp)
    5778:	00c01084 	movi	r3,66
    577c:	10c00015 	stw	r3,0(r2)
    return true;
    5780:	00800044 	movi	r2,1
}
    5784:	e037883a 	mov	sp,fp
    5788:	dfc00117 	ldw	ra,4(sp)
    578c:	df000017 	ldw	fp,0(sp)
    5790:	dec00204 	addi	sp,sp,8
    5794:	f800283a 	ret

00005798 <btc_pubkey_from_key>:


void btc_pubkey_from_key(const btc_key* privkey, btc_pubkey* pubkey_inout)
{
    5798:	defffb04 	addi	sp,sp,-20
    579c:	dfc00415 	stw	ra,16(sp)
    57a0:	df000315 	stw	fp,12(sp)
    57a4:	df000304 	addi	fp,sp,12
    57a8:	e13ffe15 	stw	r4,-8(fp)
    57ac:	e17fff15 	stw	r5,-4(fp)
    if (pubkey_inout == NULL || privkey == NULL)
    57b0:	e0bfff17 	ldw	r2,-4(fp)
    57b4:	10001026 	beq	r2,zero,57f8 <btc_pubkey_from_key+0x60>
    57b8:	e0bffe17 	ldw	r2,-8(fp)
    57bc:	10000e26 	beq	r2,zero,57f8 <btc_pubkey_from_key+0x60>
        return;

    size_t in_out_len = BTC_ECKEY_COMPRESSED_LENGTH;
    57c0:	00800844 	movi	r2,33
    57c4:	e0bffd15 	stw	r2,-12(fp)

    btc_ecc_get_pubkey(privkey->privkey, pubkey_inout->pubkey, &in_out_len, true);
    57c8:	e0fffe17 	ldw	r3,-8(fp)
    57cc:	e0bfff17 	ldw	r2,-4(fp)
    57d0:	10800044 	addi	r2,r2,1
    57d4:	01c00044 	movi	r7,1
    57d8:	e1bffd04 	addi	r6,fp,-12
    57dc:	100b883a 	mov	r5,r2
    57e0:	1809883a 	mov	r4,r3
    57e4:	0005cb00 	call	5cb0 <btc_ecc_get_pubkey>
    pubkey_inout->compressed = true;
    57e8:	e0bfff17 	ldw	r2,-4(fp)
    57ec:	00c00044 	movi	r3,1
    57f0:	10c00005 	stb	r3,0(r2)
    57f4:	00000106 	br	57fc <btc_pubkey_from_key+0x64>


void btc_pubkey_from_key(const btc_key* privkey, btc_pubkey* pubkey_inout)
{
    if (pubkey_inout == NULL || privkey == NULL)
        return;
    57f8:	0001883a 	nop

    size_t in_out_len = BTC_ECKEY_COMPRESSED_LENGTH;

    btc_ecc_get_pubkey(privkey->privkey, pubkey_inout->pubkey, &in_out_len, true);
    pubkey_inout->compressed = true;
}
    57fc:	e037883a 	mov	sp,fp
    5800:	dfc00117 	ldw	ra,4(sp)
    5804:	df000017 	ldw	fp,0(sp)
    5808:	dec00204 	addi	sp,sp,8
    580c:	f800283a 	ret

00005810 <btc_key_sign_hash>:


btc_bool btc_key_sign_hash(const btc_key* privkey, const uint256 hash, unsigned char* sigout, size_t* outlen)
{
    5810:	defffa04 	addi	sp,sp,-24
    5814:	dfc00515 	stw	ra,20(sp)
    5818:	df000415 	stw	fp,16(sp)
    581c:	df000404 	addi	fp,sp,16
    5820:	e13ffc15 	stw	r4,-16(fp)
    5824:	e17ffd15 	stw	r5,-12(fp)
    5828:	e1bffe15 	stw	r6,-8(fp)
    582c:	e1ffff15 	stw	r7,-4(fp)
    return btc_ecc_sign(privkey->privkey, hash, sigout, outlen);
    5830:	e0bffc17 	ldw	r2,-16(fp)
    5834:	e1ffff17 	ldw	r7,-4(fp)
    5838:	e1bffe17 	ldw	r6,-8(fp)
    583c:	e17ffd17 	ldw	r5,-12(fp)
    5840:	1009883a 	mov	r4,r2
    5844:	00060140 	call	6014 <btc_ecc_sign>
}
    5848:	e037883a 	mov	sp,fp
    584c:	dfc00117 	ldw	ra,4(sp)
    5850:	df000017 	ldw	fp,0(sp)
    5854:	dec00204 	addi	sp,sp,8
    5858:	f800283a 	ret

0000585c <btc_key_sign_hash_compact>:


btc_bool btc_key_sign_hash_compact(const btc_key* privkey, const uint256 hash, unsigned char* sigout, size_t* outlen)
{
    585c:	defffa04 	addi	sp,sp,-24
    5860:	dfc00515 	stw	ra,20(sp)
    5864:	df000415 	stw	fp,16(sp)
    5868:	df000404 	addi	fp,sp,16
    586c:	e13ffc15 	stw	r4,-16(fp)
    5870:	e17ffd15 	stw	r5,-12(fp)
    5874:	e1bffe15 	stw	r6,-8(fp)
    5878:	e1ffff15 	stw	r7,-4(fp)
    return btc_ecc_sign_compact(privkey->privkey, hash, sigout, outlen);
    587c:	e0bffc17 	ldw	r2,-16(fp)
    5880:	e1ffff17 	ldw	r7,-4(fp)
    5884:	e1bffe17 	ldw	r6,-8(fp)
    5888:	e17ffd17 	ldw	r5,-12(fp)
    588c:	1009883a 	mov	r4,r2
    5890:	00060c80 	call	60c8 <btc_ecc_sign_compact>
}
    5894:	e037883a 	mov	sp,fp
    5898:	dfc00117 	ldw	ra,4(sp)
    589c:	df000017 	ldw	fp,0(sp)
    58a0:	dec00204 	addi	sp,sp,8
    58a4:	f800283a 	ret

000058a8 <btc_key_sign_hash_compact_recoverable>:

btc_bool btc_key_sign_hash_compact_recoverable(const btc_key* privkey, const uint256 hash, unsigned char* sigout, size_t* outlen, int* recid)
{
    58a8:	defff904 	addi	sp,sp,-28
    58ac:	dfc00615 	stw	ra,24(sp)
    58b0:	df000515 	stw	fp,20(sp)
    58b4:	df000504 	addi	fp,sp,20
    58b8:	e13ffc15 	stw	r4,-16(fp)
    58bc:	e17ffd15 	stw	r5,-12(fp)
    58c0:	e1bffe15 	stw	r6,-8(fp)
    58c4:	e1ffff15 	stw	r7,-4(fp)
    return btc_ecc_sign_compact_recoverable(privkey->privkey, hash, sigout, outlen, recid);
    58c8:	e0fffc17 	ldw	r3,-16(fp)
    58cc:	e0800217 	ldw	r2,8(fp)
    58d0:	d8800015 	stw	r2,0(sp)
    58d4:	e1ffff17 	ldw	r7,-4(fp)
    58d8:	e1bffe17 	ldw	r6,-8(fp)
    58dc:	e17ffd17 	ldw	r5,-12(fp)
    58e0:	1809883a 	mov	r4,r3
    58e4:	00061840 	call	6184 <btc_ecc_sign_compact_recoverable>
}
    58e8:	e037883a 	mov	sp,fp
    58ec:	dfc00117 	ldw	ra,4(sp)
    58f0:	df000017 	ldw	fp,0(sp)
    58f4:	dec00204 	addi	sp,sp,8
    58f8:	f800283a 	ret

000058fc <btc_key_sign_recover_pubkey>:

btc_bool btc_key_sign_recover_pubkey(const unsigned char* sig, const uint256 hash, int recid, btc_pubkey* pubkey)
{
    58fc:	deffd804 	addi	sp,sp,-160
    5900:	dfc02715 	stw	ra,156(sp)
    5904:	df002615 	stw	fp,152(sp)
    5908:	df002604 	addi	fp,sp,152
    590c:	e13ffc15 	stw	r4,-16(fp)
    5910:	e17ffd15 	stw	r5,-12(fp)
    5914:	e1bffe15 	stw	r6,-8(fp)
    5918:	e1ffff15 	stw	r7,-4(fp)
    uint8_t pubkeybuf[128];
    size_t outlen = 128;
    591c:	00802004 	movi	r2,128
    5920:	e0bffb15 	stw	r2,-20(fp)
    if (!btc_ecc_recover_pubkey(sig, hash, recid, pubkeybuf, &outlen) || outlen > BTC_ECKEY_UNCOMPRESSED_LENGTH) {
    5924:	e0bffb04 	addi	r2,fp,-20
    5928:	d8800015 	stw	r2,0(sp)
    592c:	e1ffdb04 	addi	r7,fp,-148
    5930:	e1bffe17 	ldw	r6,-8(fp)
    5934:	e17ffd17 	ldw	r5,-12(fp)
    5938:	e13ffc17 	ldw	r4,-16(fp)
    593c:	00062440 	call	6244 <btc_ecc_recover_pubkey>
    5940:	10803fcc 	andi	r2,r2,255
    5944:	10000326 	beq	r2,zero,5954 <btc_key_sign_recover_pubkey+0x58>
    5948:	e0bffb17 	ldw	r2,-20(fp)
    594c:	108010b0 	cmpltui	r2,r2,66
    5950:	1000021e 	bne	r2,zero,595c <btc_key_sign_recover_pubkey+0x60>
        return 0;
    5954:	0005883a 	mov	r2,zero
    5958:	00001406 	br	59ac <btc_key_sign_recover_pubkey+0xb0>
    }
    memset(pubkey->pubkey, 0, sizeof(pubkey->pubkey));
    595c:	e0bfff17 	ldw	r2,-4(fp)
    5960:	10800044 	addi	r2,r2,1
    5964:	01801044 	movi	r6,65
    5968:	000b883a 	mov	r5,zero
    596c:	1009883a 	mov	r4,r2
    5970:	0045f3c0 	call	45f3c <memset>
    memcpy(pubkey->pubkey, pubkeybuf, outlen);
    5974:	e0bfff17 	ldw	r2,-4(fp)
    5978:	10800044 	addi	r2,r2,1
    597c:	e0fffb17 	ldw	r3,-20(fp)
    5980:	180d883a 	mov	r6,r3
    5984:	e17fdb04 	addi	r5,fp,-148
    5988:	1009883a 	mov	r4,r2
    598c:	0045c980 	call	45c98 <memcpy>
    if (outlen == BTC_ECKEY_COMPRESSED_LENGTH) {
    5990:	e0bffb17 	ldw	r2,-20(fp)
    5994:	10800858 	cmpnei	r2,r2,33
    5998:	1000031e 	bne	r2,zero,59a8 <btc_key_sign_recover_pubkey+0xac>
        pubkey->compressed = true;
    599c:	e0bfff17 	ldw	r2,-4(fp)
    59a0:	00c00044 	movi	r3,1
    59a4:	10c00005 	stb	r3,0(r2)
    }
    return 1;
    59a8:	00800044 	movi	r2,1
}
    59ac:	e037883a 	mov	sp,fp
    59b0:	dfc00117 	ldw	ra,4(sp)
    59b4:	df000017 	ldw	fp,0(sp)
    59b8:	dec00204 	addi	sp,sp,8
    59bc:	f800283a 	ret

000059c0 <btc_pubkey_verify_sig>:

btc_bool btc_pubkey_verify_sig(const btc_pubkey* pubkey, const uint256 hash, unsigned char* sigder, int len)
{
    59c0:	defff904 	addi	sp,sp,-28
    59c4:	dfc00615 	stw	ra,24(sp)
    59c8:	df000515 	stw	fp,20(sp)
    59cc:	df000504 	addi	fp,sp,20
    59d0:	e13ffc15 	stw	r4,-16(fp)
    59d4:	e17ffd15 	stw	r5,-12(fp)
    59d8:	e1bffe15 	stw	r6,-8(fp)
    59dc:	e1ffff15 	stw	r7,-4(fp)
    return btc_ecc_verify_sig(pubkey->pubkey, pubkey->compressed, hash, sigder, len);
    59e0:	e0bffc17 	ldw	r2,-16(fp)
    59e4:	10c00044 	addi	r3,r2,1
    59e8:	e0bffc17 	ldw	r2,-16(fp)
    59ec:	10800003 	ldbu	r2,0(r2)
    59f0:	11003fcc 	andi	r4,r2,255
    59f4:	e0bfff17 	ldw	r2,-4(fp)
    59f8:	d8800015 	stw	r2,0(sp)
    59fc:	e1fffe17 	ldw	r7,-8(fp)
    5a00:	e1bffd17 	ldw	r6,-12(fp)
    5a04:	200b883a 	mov	r5,r4
    5a08:	1809883a 	mov	r4,r3
    5a0c:	00063200 	call	6320 <btc_ecc_verify_sig>
}
    5a10:	e037883a 	mov	sp,fp
    5a14:	dfc00117 	ldw	ra,4(sp)
    5a18:	df000017 	ldw	fp,0(sp)
    5a1c:	dec00204 	addi	sp,sp,8
    5a20:	f800283a 	ret

00005a24 <btc_pubkey_getaddr_p2sh_p2wpkh>:

btc_bool btc_pubkey_getaddr_p2sh_p2wpkh(const btc_pubkey* pubkey, const btc_chainparams* chain, char *addrout) {
    5a24:	deffef04 	addi	sp,sp,-68
    5a28:	dfc01015 	stw	ra,64(sp)
    5a2c:	df000f15 	stw	fp,60(sp)
    5a30:	df000f04 	addi	fp,sp,60
    5a34:	e13ffd15 	stw	r4,-12(fp)
    5a38:	e17ffe15 	stw	r5,-8(fp)
    5a3c:	e1bfff15 	stw	r6,-4(fp)
    cstring *p2wphk_script = cstr_new_sz(22);
    5a40:	01000584 	movi	r4,22
    5a44:	00422a00 	call	422a0 <cstr_new_sz>
    5a48:	e0bff115 	stw	r2,-60(fp)
    uint160 keyhash;
    btc_pubkey_get_hash160(pubkey, keyhash);
    5a4c:	e0bff204 	addi	r2,fp,-56
    5a50:	100b883a 	mov	r5,r2
    5a54:	e13ffd17 	ldw	r4,-12(fp)
    5a58:	00056b40 	call	56b4 <btc_pubkey_get_hash160>
    btc_script_build_p2wpkh(p2wphk_script, keyhash);
    5a5c:	e0bff204 	addi	r2,fp,-56
    5a60:	100b883a 	mov	r5,r2
    5a64:	e13ff117 	ldw	r4,-60(fp)
    5a68:	000bd740 	call	bd74 <btc_script_build_p2wpkh>

    uint8_t hash160[sizeof(uint160)+1];
    hash160[0] = chain->b58prefix_script_address;
    5a6c:	e0bffe17 	ldw	r2,-8(fp)
    5a70:	10800843 	ldbu	r2,33(r2)
    5a74:	e0bff705 	stb	r2,-36(fp)
    btc_script_get_scripthash(p2wphk_script, hash160+1);
    5a78:	e0bff704 	addi	r2,fp,-36
    5a7c:	10800044 	addi	r2,r2,1
    5a80:	100b883a 	mov	r5,r2
    5a84:	e13ff117 	ldw	r4,-60(fp)
    5a88:	000be300 	call	be30 <btc_script_get_scripthash>
    cstr_free(p2wphk_script, true);
    5a8c:	01400044 	movi	r5,1
    5a90:	e13ff117 	ldw	r4,-60(fp)
    5a94:	00424440 	call	42444 <cstr_free>

    btc_base58_encode_check(hash160, sizeof(hash160), addrout, 100);
    5a98:	e0bff704 	addi	r2,fp,-36
    5a9c:	01c01904 	movi	r7,100
    5aa0:	e1bfff17 	ldw	r6,-4(fp)
    5aa4:	01400544 	movi	r5,21
    5aa8:	1009883a 	mov	r4,r2
    5aac:	00031880 	call	3188 <btc_base58_encode_check>
    return true;
    5ab0:	00800044 	movi	r2,1
}
    5ab4:	e037883a 	mov	sp,fp
    5ab8:	dfc00117 	ldw	ra,4(sp)
    5abc:	df000017 	ldw	fp,0(sp)
    5ac0:	dec00204 	addi	sp,sp,8
    5ac4:	f800283a 	ret

00005ac8 <btc_pubkey_getaddr_p2pkh>:

btc_bool btc_pubkey_getaddr_p2pkh(const btc_pubkey* pubkey, const btc_chainparams* chain, char *addrout) {
    5ac8:	defff504 	addi	sp,sp,-44
    5acc:	dfc00a15 	stw	ra,40(sp)
    5ad0:	df000915 	stw	fp,36(sp)
    5ad4:	df000904 	addi	fp,sp,36
    5ad8:	e13ffd15 	stw	r4,-12(fp)
    5adc:	e17ffe15 	stw	r5,-8(fp)
    5ae0:	e1bfff15 	stw	r6,-4(fp)
    uint8_t hash160[sizeof(uint160)+1];
    hash160[0] = chain->b58prefix_pubkey_address;
    5ae4:	e0bffe17 	ldw	r2,-8(fp)
    5ae8:	10800803 	ldbu	r2,32(r2)
    5aec:	e0bff705 	stb	r2,-36(fp)
    btc_pubkey_get_hash160(pubkey, hash160 + 1);
    5af0:	e0bff744 	addi	r2,fp,-35
    5af4:	100b883a 	mov	r5,r2
    5af8:	e13ffd17 	ldw	r4,-12(fp)
    5afc:	00056b40 	call	56b4 <btc_pubkey_get_hash160>
    btc_base58_encode_check(hash160, sizeof(hash160), addrout, 100);
    5b00:	01c01904 	movi	r7,100
    5b04:	e1bfff17 	ldw	r6,-4(fp)
    5b08:	01400544 	movi	r5,21
    5b0c:	e13ff704 	addi	r4,fp,-36
    5b10:	00031880 	call	3188 <btc_base58_encode_check>
    return true;
    5b14:	00800044 	movi	r2,1
}
    5b18:	e037883a 	mov	sp,fp
    5b1c:	dfc00117 	ldw	ra,4(sp)
    5b20:	df000017 	ldw	fp,0(sp)
    5b24:	dec00204 	addi	sp,sp,8
    5b28:	f800283a 	ret

00005b2c <btc_pubkey_getaddr_p2wpkh>:

btc_bool btc_pubkey_getaddr_p2wpkh(const btc_pubkey* pubkey, const btc_chainparams* chain, char *addrout) {
    5b2c:	defff504 	addi	sp,sp,-44
    5b30:	dfc00a15 	stw	ra,40(sp)
    5b34:	df000915 	stw	fp,36(sp)
    5b38:	df000904 	addi	fp,sp,36
    5b3c:	e13ffd15 	stw	r4,-12(fp)
    5b40:	e17ffe15 	stw	r5,-8(fp)
    5b44:	e1bfff15 	stw	r6,-4(fp)
    uint160 hash160;
    btc_pubkey_get_hash160(pubkey, hash160);
    5b48:	e17ff804 	addi	r5,fp,-32
    5b4c:	e13ffd17 	ldw	r4,-12(fp)
    5b50:	00056b40 	call	56b4 <btc_pubkey_get_hash160>
    segwit_addr_encode(addrout, chain->bech32_hrp, 0, hash160, sizeof(hash160));
    5b54:	e0bffe17 	ldw	r2,-8(fp)
    5b58:	10c00884 	addi	r3,r2,34
    5b5c:	00800504 	movi	r2,20
    5b60:	d8800015 	stw	r2,0(sp)
    5b64:	e1fff804 	addi	r7,fp,-32
    5b68:	000d883a 	mov	r6,zero
    5b6c:	180b883a 	mov	r5,r3
    5b70:	e13fff17 	ldw	r4,-4(fp)
    5b74:	003d27c0 	call	3d27c <segwit_addr_encode>
    return true;
    5b78:	00800044 	movi	r2,1
}
    5b7c:	e037883a 	mov	sp,fp
    5b80:	dfc00117 	ldw	ra,4(sp)
    5b84:	df000017 	ldw	fp,0(sp)
    5b88:	dec00204 	addi	sp,sp,8
    5b8c:	f800283a 	ret

00005b90 <btc_ecc_start>:
#include "..\include\btc\random.h"

static secp256k1_context* secp256k1_ctx = NULL;

void btc_ecc_start(void)
{
    5b90:	defff504 	addi	sp,sp,-44
    5b94:	dfc00a15 	stw	ra,40(sp)
    5b98:	df000915 	stw	fp,36(sp)
    5b9c:	df000904 	addi	fp,sp,36
    btc_random_init();
    5ba0:	000693c0 	call	693c <btc_random_init>

    secp256k1_ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);
    5ba4:	0100c044 	movi	r4,769
    5ba8:	00390040 	call	39004 <secp256k1_context_create>
    5bac:	d0a87515 	stw	r2,-24108(gp)
    assert(secp256k1_ctx != NULL);
    5bb0:	d0a87517 	ldw	r2,-24108(gp)
    5bb4:	1000081e 	bne	r2,zero,5bd8 <btc_ecc_start+0x48>
    5bb8:	01c001b4 	movhi	r7,6
    5bbc:	39ea4704 	addi	r7,r7,-22244
    5bc0:	018001b4 	movhi	r6,6
    5bc4:	31aa6c04 	addi	r6,r6,-22096
    5bc8:	01400484 	movi	r5,18
    5bcc:	010001b4 	movhi	r4,6
    5bd0:	212a4d04 	addi	r4,r4,-22220
    5bd4:	004504c0 	call	4504c <__assert_func>

    uint8_t seed[32];
    assert(btc_random_bytes(seed, 32, 0));
    5bd8:	e0bff804 	addi	r2,fp,-32
    5bdc:	000d883a 	mov	r6,zero
    5be0:	01400804 	movi	r5,32
    5be4:	1009883a 	mov	r4,r2
    5be8:	000696c0 	call	696c <btc_random_bytes>
    5bec:	10803fcc 	andi	r2,r2,255
    5bf0:	1000081e 	bne	r2,zero,5c14 <btc_ecc_start+0x84>
    5bf4:	01c001b4 	movhi	r7,6
    5bf8:	39ea5404 	addi	r7,r7,-22192
    5bfc:	018001b4 	movhi	r6,6
    5c00:	31aa6c04 	addi	r6,r6,-22096
    5c04:	01400544 	movi	r5,21
    5c08:	010001b4 	movhi	r4,6
    5c0c:	212a4d04 	addi	r4,r4,-22220
    5c10:	004504c0 	call	4504c <__assert_func>
    int ret = secp256k1_context_randomize(secp256k1_ctx, seed);
    5c14:	d0a87517 	ldw	r2,-24108(gp)
    5c18:	e0fff804 	addi	r3,fp,-32
    5c1c:	180b883a 	mov	r5,r3
    5c20:	1009883a 	mov	r4,r2
    5c24:	003ac980 	call	3ac98 <secp256k1_context_randomize>
    5c28:	e0bff715 	stw	r2,-36(fp)
    assert(ret);
    5c2c:	e0bff717 	ldw	r2,-36(fp)
    5c30:	1000081e 	bne	r2,zero,5c54 <btc_ecc_start+0xc4>
    5c34:	01c001b4 	movhi	r7,6
    5c38:	39ea5c04 	addi	r7,r7,-22160
    5c3c:	018001b4 	movhi	r6,6
    5c40:	31aa6c04 	addi	r6,r6,-22096
    5c44:	014005c4 	movi	r5,23
    5c48:	010001b4 	movhi	r4,6
    5c4c:	212a4d04 	addi	r4,r4,-22220
    5c50:	004504c0 	call	4504c <__assert_func>
}
    5c54:	0001883a 	nop
    5c58:	e037883a 	mov	sp,fp
    5c5c:	dfc00117 	ldw	ra,4(sp)
    5c60:	df000017 	ldw	fp,0(sp)
    5c64:	dec00204 	addi	sp,sp,8
    5c68:	f800283a 	ret

00005c6c <btc_ecc_stop>:


void btc_ecc_stop(void)
{
    5c6c:	defffd04 	addi	sp,sp,-12
    5c70:	dfc00215 	stw	ra,8(sp)
    5c74:	df000115 	stw	fp,4(sp)
    5c78:	df000104 	addi	fp,sp,4
    secp256k1_context* ctx = secp256k1_ctx;
    5c7c:	d0a87517 	ldw	r2,-24108(gp)
    5c80:	e0bfff15 	stw	r2,-4(fp)
    secp256k1_ctx = NULL;
    5c84:	d0287515 	stw	zero,-24108(gp)

    if (ctx) {
    5c88:	e0bfff17 	ldw	r2,-4(fp)
    5c8c:	10000226 	beq	r2,zero,5c98 <btc_ecc_stop+0x2c>
        secp256k1_context_destroy(ctx);
    5c90:	e13fff17 	ldw	r4,-4(fp)
    5c94:	00391d00 	call	391d0 <secp256k1_context_destroy>
    }
}
    5c98:	0001883a 	nop
    5c9c:	e037883a 	mov	sp,fp
    5ca0:	dfc00117 	ldw	ra,4(sp)
    5ca4:	df000017 	ldw	fp,0(sp)
    5ca8:	dec00204 	addi	sp,sp,8
    5cac:	f800283a 	ret

00005cb0 <btc_ecc_get_pubkey>:


void btc_ecc_get_pubkey(const uint8_t* private_key, uint8_t* public_key, size_t* in_outlen, btc_bool compressed)
{
    5cb0:	deffe904 	addi	sp,sp,-92
    5cb4:	dfc01615 	stw	ra,88(sp)
    5cb8:	df001515 	stw	fp,84(sp)
    5cbc:	df001504 	addi	fp,sp,84
    5cc0:	e13ffc15 	stw	r4,-16(fp)
    5cc4:	e17ffd15 	stw	r5,-12(fp)
    5cc8:	e1bffe15 	stw	r6,-8(fp)
    5ccc:	3805883a 	mov	r2,r7
    5cd0:	e0bfff05 	stb	r2,-4(fp)
    secp256k1_pubkey pubkey;
    assert(secp256k1_ctx);
    5cd4:	d0a87517 	ldw	r2,-24108(gp)
    5cd8:	1000081e 	bne	r2,zero,5cfc <btc_ecc_get_pubkey+0x4c>
    5cdc:	01c001b4 	movhi	r7,6
    5ce0:	39ea5d04 	addi	r7,r7,-22156
    5ce4:	018001b4 	movhi	r6,6
    5ce8:	31aa7004 	addi	r6,r6,-22080
    5cec:	01400a44 	movi	r5,41
    5cf0:	010001b4 	movhi	r4,6
    5cf4:	212a4d04 	addi	r4,r4,-22220
    5cf8:	004504c0 	call	4504c <__assert_func>
    assert((int)*in_outlen == (compressed ? 33 : 65));
    5cfc:	e0bffe17 	ldw	r2,-8(fp)
    5d00:	10800017 	ldw	r2,0(r2)
    5d04:	1007883a 	mov	r3,r2
    5d08:	e0bfff03 	ldbu	r2,-4(fp)
    5d0c:	10000226 	beq	r2,zero,5d18 <btc_ecc_get_pubkey+0x68>
    5d10:	00800844 	movi	r2,33
    5d14:	00000106 	br	5d1c <btc_ecc_get_pubkey+0x6c>
    5d18:	00801044 	movi	r2,65
    5d1c:	18800826 	beq	r3,r2,5d40 <btc_ecc_get_pubkey+0x90>
    5d20:	01c001b4 	movhi	r7,6
    5d24:	39ea6104 	addi	r7,r7,-22140
    5d28:	018001b4 	movhi	r6,6
    5d2c:	31aa7004 	addi	r6,r6,-22080
    5d30:	01400a84 	movi	r5,42
    5d34:	010001b4 	movhi	r4,6
    5d38:	212a4d04 	addi	r4,r4,-22220
    5d3c:	004504c0 	call	4504c <__assert_func>
    memset(public_key, 0, *in_outlen);
    5d40:	e0bffe17 	ldw	r2,-8(fp)
    5d44:	10800017 	ldw	r2,0(r2)
    5d48:	100d883a 	mov	r6,r2
    5d4c:	000b883a 	mov	r5,zero
    5d50:	e13ffd17 	ldw	r4,-12(fp)
    5d54:	0045f3c0 	call	45f3c <memset>

    if (!secp256k1_ec_pubkey_create(secp256k1_ctx, &pubkey, (const unsigned char*)private_key)) {
    5d58:	d0a87517 	ldw	r2,-24108(gp)
    5d5c:	e1bffc17 	ldw	r6,-16(fp)
    5d60:	e17fec04 	addi	r5,fp,-80
    5d64:	1009883a 	mov	r4,r2
    5d68:	003a4780 	call	3a478 <secp256k1_ec_pubkey_create>
    5d6c:	10000d26 	beq	r2,zero,5da4 <btc_ecc_get_pubkey+0xf4>
        return;
    }

    if (!secp256k1_ec_pubkey_serialize(secp256k1_ctx, public_key, in_outlen, &pubkey, compressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED)) {
    5d70:	d0e87517 	ldw	r3,-24108(gp)
    5d74:	e0bfff03 	ldbu	r2,-4(fp)
    5d78:	10000226 	beq	r2,zero,5d84 <btc_ecc_get_pubkey+0xd4>
    5d7c:	00804084 	movi	r2,258
    5d80:	00000106 	br	5d88 <btc_ecc_get_pubkey+0xd8>
    5d84:	00800084 	movi	r2,2
    5d88:	d8800015 	stw	r2,0(sp)
    5d8c:	e1ffec04 	addi	r7,fp,-80
    5d90:	e1bffe17 	ldw	r6,-8(fp)
    5d94:	e17ffd17 	ldw	r5,-12(fp)
    5d98:	1809883a 	mov	r4,r3
    5d9c:	00394d00 	call	394d0 <secp256k1_ec_pubkey_serialize>
        return;
    }

    return;
    5da0:	00000106 	br	5da8 <btc_ecc_get_pubkey+0xf8>
    assert(secp256k1_ctx);
    assert((int)*in_outlen == (compressed ? 33 : 65));
    memset(public_key, 0, *in_outlen);

    if (!secp256k1_ec_pubkey_create(secp256k1_ctx, &pubkey, (const unsigned char*)private_key)) {
        return;
    5da4:	0001883a 	nop
    if (!secp256k1_ec_pubkey_serialize(secp256k1_ctx, public_key, in_outlen, &pubkey, compressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED)) {
        return;
    }

    return;
}
    5da8:	e037883a 	mov	sp,fp
    5dac:	dfc00117 	ldw	ra,4(sp)
    5db0:	df000017 	ldw	fp,0(sp)
    5db4:	dec00204 	addi	sp,sp,8
    5db8:	f800283a 	ret

00005dbc <btc_ecc_private_key_tweak_add>:

btc_bool btc_ecc_private_key_tweak_add(uint8_t* private_key, const uint8_t* tweak)
{
    5dbc:	defffc04 	addi	sp,sp,-16
    5dc0:	dfc00315 	stw	ra,12(sp)
    5dc4:	df000215 	stw	fp,8(sp)
    5dc8:	df000204 	addi	fp,sp,8
    5dcc:	e13ffe15 	stw	r4,-8(fp)
    5dd0:	e17fff15 	stw	r5,-4(fp)
    assert(secp256k1_ctx);
    5dd4:	d0a87517 	ldw	r2,-24108(gp)
    5dd8:	1000081e 	bne	r2,zero,5dfc <btc_ecc_private_key_tweak_add+0x40>
    5ddc:	01c001b4 	movhi	r7,6
    5de0:	39ea5d04 	addi	r7,r7,-22156
    5de4:	018001b4 	movhi	r6,6
    5de8:	31aa7504 	addi	r6,r6,-22060
    5dec:	01400e84 	movi	r5,58
    5df0:	010001b4 	movhi	r4,6
    5df4:	212a4d04 	addi	r4,r4,-22220
    5df8:	004504c0 	call	4504c <__assert_func>
    return secp256k1_ec_privkey_tweak_add(secp256k1_ctx, (unsigned char*)private_key, (const unsigned char*)tweak);
    5dfc:	d0a87517 	ldw	r2,-24108(gp)
    5e00:	e1bfff17 	ldw	r6,-4(fp)
    5e04:	e17ffe17 	ldw	r5,-8(fp)
    5e08:	1009883a 	mov	r4,r2
    5e0c:	003a6400 	call	3a640 <secp256k1_ec_privkey_tweak_add>
}
    5e10:	e037883a 	mov	sp,fp
    5e14:	dfc00117 	ldw	ra,4(sp)
    5e18:	df000017 	ldw	fp,0(sp)
    5e1c:	dec00204 	addi	sp,sp,8
    5e20:	f800283a 	ret

00005e24 <btc_ecc_public_key_tweak_add>:

btc_bool btc_ecc_public_key_tweak_add(uint8_t* public_key_inout, const uint8_t* tweak)
{
    5e24:	deffea04 	addi	sp,sp,-88
    5e28:	dfc01515 	stw	ra,84(sp)
    5e2c:	df001415 	stw	fp,80(sp)
    5e30:	df001404 	addi	fp,sp,80
    5e34:	e13ffe15 	stw	r4,-8(fp)
    5e38:	e17fff15 	stw	r5,-4(fp)
    size_t out = BTC_ECKEY_COMPRESSED_LENGTH;
    5e3c:	00800844 	movi	r2,33
    5e40:	e0bfed15 	stw	r2,-76(fp)
    secp256k1_pubkey pubkey;

    assert(secp256k1_ctx);
    5e44:	d0a87517 	ldw	r2,-24108(gp)
    5e48:	1000081e 	bne	r2,zero,5e6c <btc_ecc_public_key_tweak_add+0x48>
    5e4c:	01c001b4 	movhi	r7,6
    5e50:	39ea5d04 	addi	r7,r7,-22156
    5e54:	018001b4 	movhi	r6,6
    5e58:	31aa7d04 	addi	r6,r6,-22028
    5e5c:	014010c4 	movi	r5,67
    5e60:	010001b4 	movhi	r4,6
    5e64:	212a4d04 	addi	r4,r4,-22220
    5e68:	004504c0 	call	4504c <__assert_func>
    if (!secp256k1_ec_pubkey_parse(secp256k1_ctx, &pubkey, public_key_inout, 33))
    5e6c:	d0a87517 	ldw	r2,-24108(gp)
    5e70:	e0ffee04 	addi	r3,fp,-72
    5e74:	01c00844 	movi	r7,33
    5e78:	e1bffe17 	ldw	r6,-8(fp)
    5e7c:	180b883a 	mov	r5,r3
    5e80:	1009883a 	mov	r4,r2
    5e84:	00393b40 	call	393b4 <secp256k1_ec_pubkey_parse>
    5e88:	1000021e 	bne	r2,zero,5e94 <btc_ecc_public_key_tweak_add+0x70>
        return false;
    5e8c:	0005883a 	mov	r2,zero
    5e90:	00001606 	br	5eec <btc_ecc_public_key_tweak_add+0xc8>

    if (!secp256k1_ec_pubkey_tweak_add(secp256k1_ctx, &pubkey, (const unsigned char*)tweak))
    5e94:	d0a87517 	ldw	r2,-24108(gp)
    5e98:	e0ffee04 	addi	r3,fp,-72
    5e9c:	e1bfff17 	ldw	r6,-4(fp)
    5ea0:	180b883a 	mov	r5,r3
    5ea4:	1009883a 	mov	r4,r2
    5ea8:	003a7bc0 	call	3a7bc <secp256k1_ec_pubkey_tweak_add>
    5eac:	1000021e 	bne	r2,zero,5eb8 <btc_ecc_public_key_tweak_add+0x94>
        return false;
    5eb0:	0005883a 	mov	r2,zero
    5eb4:	00000d06 	br	5eec <btc_ecc_public_key_tweak_add+0xc8>

    if (!secp256k1_ec_pubkey_serialize(secp256k1_ctx, public_key_inout, &out, &pubkey, SECP256K1_EC_COMPRESSED))
    5eb8:	d0e87517 	ldw	r3,-24108(gp)
    5ebc:	e13fee04 	addi	r4,fp,-72
    5ec0:	00804084 	movi	r2,258
    5ec4:	d8800015 	stw	r2,0(sp)
    5ec8:	200f883a 	mov	r7,r4
    5ecc:	e1bfed04 	addi	r6,fp,-76
    5ed0:	e17ffe17 	ldw	r5,-8(fp)
    5ed4:	1809883a 	mov	r4,r3
    5ed8:	00394d00 	call	394d0 <secp256k1_ec_pubkey_serialize>
    5edc:	1000021e 	bne	r2,zero,5ee8 <btc_ecc_public_key_tweak_add+0xc4>
        return false;
    5ee0:	0005883a 	mov	r2,zero
    5ee4:	00000106 	br	5eec <btc_ecc_public_key_tweak_add+0xc8>

    return true;
    5ee8:	00800044 	movi	r2,1
}
    5eec:	e037883a 	mov	sp,fp
    5ef0:	dfc00117 	ldw	ra,4(sp)
    5ef4:	df000017 	ldw	fp,0(sp)
    5ef8:	dec00204 	addi	sp,sp,8
    5efc:	f800283a 	ret

00005f00 <btc_ecc_verify_privatekey>:


btc_bool btc_ecc_verify_privatekey(const uint8_t* private_key)
{
    5f00:	defffd04 	addi	sp,sp,-12
    5f04:	dfc00215 	stw	ra,8(sp)
    5f08:	df000115 	stw	fp,4(sp)
    5f0c:	df000104 	addi	fp,sp,4
    5f10:	e13fff15 	stw	r4,-4(fp)
    assert(secp256k1_ctx);
    5f14:	d0a87517 	ldw	r2,-24108(gp)
    5f18:	1000081e 	bne	r2,zero,5f3c <btc_ecc_verify_privatekey+0x3c>
    5f1c:	01c001b4 	movhi	r7,6
    5f20:	39ea5d04 	addi	r7,r7,-22156
    5f24:	018001b4 	movhi	r6,6
    5f28:	31aa8504 	addi	r6,r6,-21996
    5f2c:	014014c4 	movi	r5,83
    5f30:	010001b4 	movhi	r4,6
    5f34:	212a4d04 	addi	r4,r4,-22220
    5f38:	004504c0 	call	4504c <__assert_func>
    return secp256k1_ec_seckey_verify(secp256k1_ctx, (const unsigned char*)private_key);
    5f3c:	d0a87517 	ldw	r2,-24108(gp)
    5f40:	e17fff17 	ldw	r5,-4(fp)
    5f44:	1009883a 	mov	r4,r2
    5f48:	003a3880 	call	3a388 <secp256k1_ec_seckey_verify>
}
    5f4c:	e037883a 	mov	sp,fp
    5f50:	dfc00117 	ldw	ra,4(sp)
    5f54:	df000017 	ldw	fp,0(sp)
    5f58:	dec00204 	addi	sp,sp,8
    5f5c:	f800283a 	ret

00005f60 <btc_ecc_verify_pubkey>:

btc_bool btc_ecc_verify_pubkey(const uint8_t* public_key, btc_bool compressed)
{
    5f60:	deffec04 	addi	sp,sp,-80
    5f64:	dfc01315 	stw	ra,76(sp)
    5f68:	df001215 	stw	fp,72(sp)
    5f6c:	df001204 	addi	fp,sp,72
    5f70:	e13ffe15 	stw	r4,-8(fp)
    5f74:	2805883a 	mov	r2,r5
    5f78:	e0bfff05 	stb	r2,-4(fp)
    secp256k1_pubkey pubkey;

    assert(secp256k1_ctx);
    5f7c:	d0a87517 	ldw	r2,-24108(gp)
    5f80:	1000081e 	bne	r2,zero,5fa4 <btc_ecc_verify_pubkey+0x44>
    5f84:	01c001b4 	movhi	r7,6
    5f88:	39ea5d04 	addi	r7,r7,-22156
    5f8c:	018001b4 	movhi	r6,6
    5f90:	31aa8c04 	addi	r6,r6,-21968
    5f94:	014016c4 	movi	r5,91
    5f98:	010001b4 	movhi	r4,6
    5f9c:	212a4d04 	addi	r4,r4,-22220
    5fa0:	004504c0 	call	4504c <__assert_func>
    if (!secp256k1_ec_pubkey_parse(secp256k1_ctx, &pubkey, public_key, compressed ? 33 : 65)) {
    5fa4:	d0e87517 	ldw	r3,-24108(gp)
    5fa8:	e0bfff03 	ldbu	r2,-4(fp)
    5fac:	10000226 	beq	r2,zero,5fb8 <btc_ecc_verify_pubkey+0x58>
    5fb0:	00800844 	movi	r2,33
    5fb4:	00000106 	br	5fbc <btc_ecc_verify_pubkey+0x5c>
    5fb8:	00801044 	movi	r2,65
    5fbc:	100f883a 	mov	r7,r2
    5fc0:	e1bffe17 	ldw	r6,-8(fp)
    5fc4:	e17fee04 	addi	r5,fp,-72
    5fc8:	1809883a 	mov	r4,r3
    5fcc:	00393b40 	call	393b4 <secp256k1_ec_pubkey_parse>
    5fd0:	1000061e 	bne	r2,zero,5fec <btc_ecc_verify_pubkey+0x8c>
        memset(&pubkey, 0, sizeof(pubkey));
    5fd4:	01801004 	movi	r6,64
    5fd8:	000b883a 	mov	r5,zero
    5fdc:	e13fee04 	addi	r4,fp,-72
    5fe0:	0045f3c0 	call	45f3c <memset>
        return false;
    5fe4:	0005883a 	mov	r2,zero
    5fe8:	00000506 	br	6000 <btc_ecc_verify_pubkey+0xa0>
    }

    memset(&pubkey, 0, sizeof(pubkey));
    5fec:	01801004 	movi	r6,64
    5ff0:	000b883a 	mov	r5,zero
    5ff4:	e13fee04 	addi	r4,fp,-72
    5ff8:	0045f3c0 	call	45f3c <memset>
    return true;
    5ffc:	00800044 	movi	r2,1
}
    6000:	e037883a 	mov	sp,fp
    6004:	dfc00117 	ldw	ra,4(sp)
    6008:	df000017 	ldw	fp,0(sp)
    600c:	dec00204 	addi	sp,sp,8
    6010:	f800283a 	ret

00006014 <btc_ecc_sign>:

btc_bool btc_ecc_sign(const uint8_t* private_key, const uint256 hash, unsigned char* sigder, size_t* outlen)
{
    6014:	deffe804 	addi	sp,sp,-96
    6018:	dfc01715 	stw	ra,92(sp)
    601c:	df001615 	stw	fp,88(sp)
    6020:	df001604 	addi	fp,sp,88
    6024:	e13ffc15 	stw	r4,-16(fp)
    6028:	e17ffd15 	stw	r5,-12(fp)
    602c:	e1bffe15 	stw	r6,-8(fp)
    6030:	e1ffff15 	stw	r7,-4(fp)
    assert(secp256k1_ctx);
    6034:	d0a87517 	ldw	r2,-24108(gp)
    6038:	1000081e 	bne	r2,zero,605c <btc_ecc_sign+0x48>
    603c:	01c001b4 	movhi	r7,6
    6040:	39ea5d04 	addi	r7,r7,-22156
    6044:	018001b4 	movhi	r6,6
    6048:	31aa9204 	addi	r6,r6,-21944
    604c:	014019c4 	movi	r5,103
    6050:	010001b4 	movhi	r4,6
    6054:	212a4d04 	addi	r4,r4,-22220
    6058:	004504c0 	call	4504c <__assert_func>

    secp256k1_ecdsa_signature sig;
    if (!secp256k1_ecdsa_sign(secp256k1_ctx, &sig, hash, private_key, secp256k1_nonce_function_rfc6979, NULL))
    605c:	d0e87517 	ldw	r3,-24108(gp)
    6060:	d0a01017 	ldw	r2,-32704(gp)
    6064:	d8000115 	stw	zero,4(sp)
    6068:	d8800015 	stw	r2,0(sp)
    606c:	e1fffc17 	ldw	r7,-16(fp)
    6070:	e1bffd17 	ldw	r6,-12(fp)
    6074:	e17fec04 	addi	r5,fp,-80
    6078:	1809883a 	mov	r4,r3
    607c:	003a0a80 	call	3a0a8 <secp256k1_ecdsa_sign>
    6080:	1000021e 	bne	r2,zero,608c <btc_ecc_sign+0x78>
        return 0;
    6084:	0005883a 	mov	r2,zero
    6088:	00000a06 	br	60b4 <btc_ecc_sign+0xa0>

    if (!secp256k1_ecdsa_signature_serialize_der(secp256k1_ctx, sigder, outlen, &sig))
    608c:	d0a87517 	ldw	r2,-24108(gp)
    6090:	e1ffec04 	addi	r7,fp,-80
    6094:	e1bfff17 	ldw	r6,-4(fp)
    6098:	e17ffe17 	ldw	r5,-8(fp)
    609c:	1009883a 	mov	r4,r2
    60a0:	0039a440 	call	39a44 <secp256k1_ecdsa_signature_serialize_der>
    60a4:	1000021e 	bne	r2,zero,60b0 <btc_ecc_sign+0x9c>
        return 0;
    60a8:	0005883a 	mov	r2,zero
    60ac:	00000106 	br	60b4 <btc_ecc_sign+0xa0>

    return 1;
    60b0:	00800044 	movi	r2,1
}
    60b4:	e037883a 	mov	sp,fp
    60b8:	dfc00117 	ldw	ra,4(sp)
    60bc:	df000017 	ldw	fp,0(sp)
    60c0:	dec00204 	addi	sp,sp,8
    60c4:	f800283a 	ret

000060c8 <btc_ecc_sign_compact>:

btc_bool btc_ecc_sign_compact(const uint8_t* private_key, const uint256 hash, unsigned char* sigcomp, size_t* outlen)
{
    60c8:	deffe804 	addi	sp,sp,-96
    60cc:	dfc01715 	stw	ra,92(sp)
    60d0:	df001615 	stw	fp,88(sp)
    60d4:	df001604 	addi	fp,sp,88
    60d8:	e13ffc15 	stw	r4,-16(fp)
    60dc:	e17ffd15 	stw	r5,-12(fp)
    60e0:	e1bffe15 	stw	r6,-8(fp)
    60e4:	e1ffff15 	stw	r7,-4(fp)
    assert(secp256k1_ctx);
    60e8:	d0a87517 	ldw	r2,-24108(gp)
    60ec:	1000081e 	bne	r2,zero,6110 <btc_ecc_sign_compact+0x48>
    60f0:	01c001b4 	movhi	r7,6
    60f4:	39ea5d04 	addi	r7,r7,-22156
    60f8:	018001b4 	movhi	r6,6
    60fc:	31aa9604 	addi	r6,r6,-21928
    6100:	01401d44 	movi	r5,117
    6104:	010001b4 	movhi	r4,6
    6108:	212a4d04 	addi	r4,r4,-22220
    610c:	004504c0 	call	4504c <__assert_func>

    secp256k1_ecdsa_signature sig;
    if (!secp256k1_ecdsa_sign(secp256k1_ctx, &sig, hash, private_key, secp256k1_nonce_function_rfc6979, NULL))
    6110:	d0e87517 	ldw	r3,-24108(gp)
    6114:	d0a01017 	ldw	r2,-32704(gp)
    6118:	d8000115 	stw	zero,4(sp)
    611c:	d8800015 	stw	r2,0(sp)
    6120:	e1fffc17 	ldw	r7,-16(fp)
    6124:	e1bffd17 	ldw	r6,-12(fp)
    6128:	e17fec04 	addi	r5,fp,-80
    612c:	1809883a 	mov	r4,r3
    6130:	003a0a80 	call	3a0a8 <secp256k1_ecdsa_sign>
    6134:	1000021e 	bne	r2,zero,6140 <btc_ecc_sign_compact+0x78>
        return 0;
    6138:	0005883a 	mov	r2,zero
    613c:	00000c06 	br	6170 <btc_ecc_sign_compact+0xa8>

    *outlen = 64;
    6140:	e0bfff17 	ldw	r2,-4(fp)
    6144:	00c01004 	movi	r3,64
    6148:	10c00015 	stw	r3,0(r2)
    if (!secp256k1_ecdsa_signature_serialize_compact(secp256k1_ctx, sigcomp, &sig))
    614c:	d0a87517 	ldw	r2,-24108(gp)
    6150:	e1bfec04 	addi	r6,fp,-80
    6154:	e17ffe17 	ldw	r5,-8(fp)
    6158:	1009883a 	mov	r4,r2
    615c:	0039b7c0 	call	39b7c <secp256k1_ecdsa_signature_serialize_compact>
    6160:	1000021e 	bne	r2,zero,616c <btc_ecc_sign_compact+0xa4>
        return 0;
    6164:	0005883a 	mov	r2,zero
    6168:	00000106 	br	6170 <btc_ecc_sign_compact+0xa8>

    return 1;
    616c:	00800044 	movi	r2,1
}
    6170:	e037883a 	mov	sp,fp
    6174:	dfc00117 	ldw	ra,4(sp)
    6178:	df000017 	ldw	fp,0(sp)
    617c:	dec00204 	addi	sp,sp,8
    6180:	f800283a 	ret

00006184 <btc_ecc_sign_compact_recoverable>:

btc_bool btc_ecc_sign_compact_recoverable(const uint8_t* private_key, const uint256 hash, unsigned char* sigrec, size_t* outlen, int *recid)
{
    6184:	deffe704 	addi	sp,sp,-100
    6188:	dfc01815 	stw	ra,96(sp)
    618c:	df001715 	stw	fp,92(sp)
    6190:	df001704 	addi	fp,sp,92
    6194:	e13ffc15 	stw	r4,-16(fp)
    6198:	e17ffd15 	stw	r5,-12(fp)
    619c:	e1bffe15 	stw	r6,-8(fp)
    61a0:	e1ffff15 	stw	r7,-4(fp)
    assert(secp256k1_ctx);
    61a4:	d0a87517 	ldw	r2,-24108(gp)
    61a8:	1000081e 	bne	r2,zero,61cc <btc_ecc_sign_compact_recoverable+0x48>
    61ac:	01c001b4 	movhi	r7,6
    61b0:	39ea5d04 	addi	r7,r7,-22156
    61b4:	018001b4 	movhi	r6,6
    61b8:	31aa9c04 	addi	r6,r6,-21904
    61bc:	01402104 	movi	r5,132
    61c0:	010001b4 	movhi	r4,6
    61c4:	212a4d04 	addi	r4,r4,-22220
    61c8:	004504c0 	call	4504c <__assert_func>

    secp256k1_ecdsa_recoverable_signature sig;
    if (!secp256k1_ecdsa_sign_recoverable(secp256k1_ctx, &sig, hash, private_key, secp256k1_nonce_function_rfc6979, NULL))
    61cc:	d0e87517 	ldw	r3,-24108(gp)
    61d0:	d0a01017 	ldw	r2,-32704(gp)
    61d4:	d8000115 	stw	zero,4(sp)
    61d8:	d8800015 	stw	r2,0(sp)
    61dc:	e1fffc17 	ldw	r7,-16(fp)
    61e0:	e1bffd17 	ldw	r6,-12(fp)
    61e4:	e17feb04 	addi	r5,fp,-84
    61e8:	1809883a 	mov	r4,r3
    61ec:	003b5100 	call	3b510 <secp256k1_ecdsa_sign_recoverable>
    61f0:	1000021e 	bne	r2,zero,61fc <btc_ecc_sign_compact_recoverable+0x78>
        return 0;
    61f4:	0005883a 	mov	r2,zero
    61f8:	00000d06 	br	6230 <btc_ecc_sign_compact_recoverable+0xac>

    *outlen = 65;
    61fc:	e0bfff17 	ldw	r2,-4(fp)
    6200:	00c01044 	movi	r3,65
    6204:	10c00015 	stw	r3,0(r2)
    if (!secp256k1_ecdsa_recoverable_signature_serialize_compact(secp256k1_ctx, sigrec, recid, &sig))
    6208:	d0a87517 	ldw	r2,-24108(gp)
    620c:	e1ffeb04 	addi	r7,fp,-84
    6210:	e1800217 	ldw	r6,8(fp)
    6214:	e17ffe17 	ldw	r5,-8(fp)
    6218:	1009883a 	mov	r4,r2
    621c:	003b1580 	call	3b158 <secp256k1_ecdsa_recoverable_signature_serialize_compact>
    6220:	1000021e 	bne	r2,zero,622c <btc_ecc_sign_compact_recoverable+0xa8>
        return 0;
    6224:	0005883a 	mov	r2,zero
    6228:	00000106 	br	6230 <btc_ecc_sign_compact_recoverable+0xac>

    return 1;
    622c:	00800044 	movi	r2,1
}
    6230:	e037883a 	mov	sp,fp
    6234:	dfc00117 	ldw	ra,4(sp)
    6238:	df000017 	ldw	fp,0(sp)
    623c:	dec00204 	addi	sp,sp,8
    6240:	f800283a 	ret

00006244 <btc_ecc_recover_pubkey>:

btc_bool btc_ecc_recover_pubkey(const unsigned char* sigrec, const uint256 hash, const int recid, uint8_t* public_key, size_t *outlen)
{
    6244:	deffd804 	addi	sp,sp,-160
    6248:	dfc02715 	stw	ra,156(sp)
    624c:	df002615 	stw	fp,152(sp)
    6250:	df002604 	addi	fp,sp,152
    6254:	e13ffc15 	stw	r4,-16(fp)
    6258:	e17ffd15 	stw	r5,-12(fp)
    625c:	e1bffe15 	stw	r6,-8(fp)
    6260:	e1ffff15 	stw	r7,-4(fp)
    assert(secp256k1_ctx);
    6264:	d0a87517 	ldw	r2,-24108(gp)
    6268:	1000081e 	bne	r2,zero,628c <btc_ecc_recover_pubkey+0x48>
    626c:	01c001b4 	movhi	r7,6
    6270:	39ea5d04 	addi	r7,r7,-22156
    6274:	018001b4 	movhi	r6,6
    6278:	31aaa504 	addi	r6,r6,-21868
    627c:	014024c4 	movi	r5,147
    6280:	010001b4 	movhi	r4,6
    6284:	212a4d04 	addi	r4,r4,-22220
    6288:	004504c0 	call	4504c <__assert_func>

    secp256k1_pubkey pubkey;
    secp256k1_ecdsa_recoverable_signature sig;

    if (!secp256k1_ecdsa_recoverable_signature_parse_compact(secp256k1_ctx, &sig, sigrec, recid))
    628c:	d0a87517 	ldw	r2,-24108(gp)
    6290:	e0ffeb04 	addi	r3,fp,-84
    6294:	e1fffe17 	ldw	r7,-8(fp)
    6298:	e1bffc17 	ldw	r6,-16(fp)
    629c:	180b883a 	mov	r5,r3
    62a0:	1009883a 	mov	r4,r2
    62a4:	003afd40 	call	3afd4 <secp256k1_ecdsa_recoverable_signature_parse_compact>
    62a8:	1000021e 	bne	r2,zero,62b4 <btc_ecc_recover_pubkey+0x70>
        return false;
    62ac:	0005883a 	mov	r2,zero
    62b0:	00001606 	br	630c <btc_ecc_recover_pubkey+0xc8>

    if (!secp256k1_ecdsa_recover(secp256k1_ctx, &pubkey, &sig, hash))
    62b4:	d0a87517 	ldw	r2,-24108(gp)
    62b8:	e0ffeb04 	addi	r3,fp,-84
    62bc:	e1fffd17 	ldw	r7,-12(fp)
    62c0:	180d883a 	mov	r6,r3
    62c4:	e17fdb04 	addi	r5,fp,-148
    62c8:	1009883a 	mov	r4,r2
    62cc:	003b7fc0 	call	3b7fc <secp256k1_ecdsa_recover>
    62d0:	1000021e 	bne	r2,zero,62dc <btc_ecc_recover_pubkey+0x98>
        return 0;
    62d4:	0005883a 	mov	r2,zero
    62d8:	00000c06 	br	630c <btc_ecc_recover_pubkey+0xc8>

    if (!secp256k1_ec_pubkey_serialize(secp256k1_ctx, public_key, outlen, &pubkey, SECP256K1_EC_COMPRESSED))
    62dc:	d0e87517 	ldw	r3,-24108(gp)
    62e0:	00804084 	movi	r2,258
    62e4:	d8800015 	stw	r2,0(sp)
    62e8:	e1ffdb04 	addi	r7,fp,-148
    62ec:	e1800217 	ldw	r6,8(fp)
    62f0:	e17fff17 	ldw	r5,-4(fp)
    62f4:	1809883a 	mov	r4,r3
    62f8:	00394d00 	call	394d0 <secp256k1_ec_pubkey_serialize>
    62fc:	1000021e 	bne	r2,zero,6308 <btc_ecc_recover_pubkey+0xc4>
        return 0;
    6300:	0005883a 	mov	r2,zero
    6304:	00000106 	br	630c <btc_ecc_recover_pubkey+0xc8>

    return 1;
    6308:	00800044 	movi	r2,1
}
    630c:	e037883a 	mov	sp,fp
    6310:	dfc00117 	ldw	ra,4(sp)
    6314:	df000017 	ldw	fp,0(sp)
    6318:	dec00204 	addi	sp,sp,8
    631c:	f800283a 	ret

00006320 <btc_ecc_verify_sig>:

btc_bool btc_ecc_verify_sig(const uint8_t* public_key, btc_bool compressed, const uint256 hash, unsigned char* sigder, size_t siglen)
{
    6320:	deffda04 	addi	sp,sp,-152
    6324:	dfc02515 	stw	ra,148(sp)
    6328:	df002415 	stw	fp,144(sp)
    632c:	df002404 	addi	fp,sp,144
    6330:	e13ffc15 	stw	r4,-16(fp)
    6334:	2805883a 	mov	r2,r5
    6338:	e1bffe15 	stw	r6,-8(fp)
    633c:	e1ffff15 	stw	r7,-4(fp)
    6340:	e0bffd05 	stb	r2,-12(fp)
    assert(secp256k1_ctx);
    6344:	d0a87517 	ldw	r2,-24108(gp)
    6348:	1000081e 	bne	r2,zero,636c <btc_ecc_verify_sig+0x4c>
    634c:	01c001b4 	movhi	r7,6
    6350:	39ea5d04 	addi	r7,r7,-22156
    6354:	018001b4 	movhi	r6,6
    6358:	31aaab04 	addi	r6,r6,-21844
    635c:	01402984 	movi	r5,166
    6360:	010001b4 	movhi	r4,6
    6364:	212a4d04 	addi	r4,r4,-22220
    6368:	004504c0 	call	4504c <__assert_func>

    secp256k1_ecdsa_signature sig;
    secp256k1_pubkey pubkey;

    if (!secp256k1_ec_pubkey_parse(secp256k1_ctx, &pubkey, public_key, compressed ? 33 : 65))
    636c:	d0e87517 	ldw	r3,-24108(gp)
    6370:	e0bffd03 	ldbu	r2,-12(fp)
    6374:	10000226 	beq	r2,zero,6380 <btc_ecc_verify_sig+0x60>
    6378:	00800844 	movi	r2,33
    637c:	00000106 	br	6384 <btc_ecc_verify_sig+0x64>
    6380:	00801044 	movi	r2,65
    6384:	e13fec04 	addi	r4,fp,-80
    6388:	100f883a 	mov	r7,r2
    638c:	e1bffc17 	ldw	r6,-16(fp)
    6390:	200b883a 	mov	r5,r4
    6394:	1809883a 	mov	r4,r3
    6398:	00393b40 	call	393b4 <secp256k1_ec_pubkey_parse>
    639c:	1000021e 	bne	r2,zero,63a8 <btc_ecc_verify_sig+0x88>
        return false;
    63a0:	0005883a 	mov	r2,zero
    63a4:	00001006 	br	63e8 <btc_ecc_verify_sig+0xc8>

    if (!secp256k1_ecdsa_signature_parse_der(secp256k1_ctx, &sig, sigder, siglen))
    63a8:	d0a87517 	ldw	r2,-24108(gp)
    63ac:	e1c00217 	ldw	r7,8(fp)
    63b0:	e1bfff17 	ldw	r6,-4(fp)
    63b4:	e17fdc04 	addi	r5,fp,-144
    63b8:	1009883a 	mov	r4,r2
    63bc:	00397a00 	call	397a0 <secp256k1_ecdsa_signature_parse_der>
    63c0:	1000021e 	bne	r2,zero,63cc <btc_ecc_verify_sig+0xac>
        return false;
    63c4:	0005883a 	mov	r2,zero
    63c8:	00000706 	br	63e8 <btc_ecc_verify_sig+0xc8>

    return secp256k1_ecdsa_verify(secp256k1_ctx, &sig, hash, &pubkey);
    63cc:	d0a87517 	ldw	r2,-24108(gp)
    63d0:	e0ffec04 	addi	r3,fp,-80
    63d4:	180f883a 	mov	r7,r3
    63d8:	e1bffe17 	ldw	r6,-8(fp)
    63dc:	e17fdc04 	addi	r5,fp,-144
    63e0:	1009883a 	mov	r4,r2
    63e4:	0039da40 	call	39da4 <secp256k1_ecdsa_verify>
}
    63e8:	e037883a 	mov	sp,fp
    63ec:	dfc00117 	ldw	ra,4(sp)
    63f0:	df000017 	ldw	fp,0(sp)
    63f4:	dec00204 	addi	sp,sp,8
    63f8:	f800283a 	ret

000063fc <btc_ecc_compact_to_der_normalized>:

btc_bool btc_ecc_compact_to_der_normalized(unsigned char* sigcomp_in, unsigned char* sigder_out, size_t* sigder_len_out)
{
    63fc:	deffdb04 	addi	sp,sp,-148
    6400:	dfc02415 	stw	ra,144(sp)
    6404:	df002315 	stw	fp,140(sp)
    6408:	df002304 	addi	fp,sp,140
    640c:	e13ffd15 	stw	r4,-12(fp)
    6410:	e17ffe15 	stw	r5,-8(fp)
    6414:	e1bfff15 	stw	r6,-4(fp)
    assert(secp256k1_ctx);
    6418:	d0a87517 	ldw	r2,-24108(gp)
    641c:	1000081e 	bne	r2,zero,6440 <btc_ecc_compact_to_der_normalized+0x44>
    6420:	01c001b4 	movhi	r7,6
    6424:	39ea5d04 	addi	r7,r7,-22156
    6428:	018001b4 	movhi	r6,6
    642c:	31aab004 	addi	r6,r6,-21824
    6430:	01402d84 	movi	r5,182
    6434:	010001b4 	movhi	r4,6
    6438:	212a4d04 	addi	r4,r4,-22220
    643c:	004504c0 	call	4504c <__assert_func>

    secp256k1_ecdsa_signature sig;
    if (!secp256k1_ecdsa_signature_parse_compact(secp256k1_ctx, &sig, sigcomp_in))
    6440:	d0a87517 	ldw	r2,-24108(gp)
    6444:	e1bffd17 	ldw	r6,-12(fp)
    6448:	e17fdd04 	addi	r5,fp,-140
    644c:	1009883a 	mov	r4,r2
    6450:	00398c40 	call	398c4 <secp256k1_ecdsa_signature_parse_compact>
    6454:	1000021e 	bne	r2,zero,6460 <btc_ecc_compact_to_der_normalized+0x64>
        return false;
    6458:	0005883a 	mov	r2,zero
    645c:	00000d06 	br	6494 <btc_ecc_compact_to_der_normalized+0x98>

    secp256k1_ecdsa_signature sigNorm;
    secp256k1_ecdsa_signature_normalize(secp256k1_ctx, &sigNorm, &sig);
    6460:	d0a87517 	ldw	r2,-24108(gp)
    6464:	e0ffed04 	addi	r3,fp,-76
    6468:	e1bfdd04 	addi	r6,fp,-140
    646c:	180b883a 	mov	r5,r3
    6470:	1009883a 	mov	r4,r2
    6474:	0039c900 	call	39c90 <secp256k1_ecdsa_signature_normalize>

    return secp256k1_ecdsa_signature_serialize_der(secp256k1_ctx, sigder_out, sigder_len_out, &sigNorm);
    6478:	d0a87517 	ldw	r2,-24108(gp)
    647c:	e0ffed04 	addi	r3,fp,-76
    6480:	180f883a 	mov	r7,r3
    6484:	e1bfff17 	ldw	r6,-4(fp)
    6488:	e17ffe17 	ldw	r5,-8(fp)
    648c:	1009883a 	mov	r4,r2
    6490:	0039a440 	call	39a44 <secp256k1_ecdsa_signature_serialize_der>
}
    6494:	e037883a 	mov	sp,fp
    6498:	dfc00117 	ldw	ra,4(sp)
    649c:	df000017 	ldw	fp,0(sp)
    64a0:	dec00204 	addi	sp,sp,8
    64a4:	f800283a 	ret

000064a8 <btc_ecc_der_to_compact>:

btc_bool btc_ecc_der_to_compact(unsigned char* sigder_in, size_t sigder_len, unsigned char* sigcomp_out)
{
    64a8:	deffeb04 	addi	sp,sp,-84
    64ac:	dfc01415 	stw	ra,80(sp)
    64b0:	df001315 	stw	fp,76(sp)
    64b4:	df001304 	addi	fp,sp,76
    64b8:	e13ffd15 	stw	r4,-12(fp)
    64bc:	e17ffe15 	stw	r5,-8(fp)
    64c0:	e1bfff15 	stw	r6,-4(fp)
    assert(secp256k1_ctx);
    64c4:	d0a87517 	ldw	r2,-24108(gp)
    64c8:	1000081e 	bne	r2,zero,64ec <btc_ecc_der_to_compact+0x44>
    64cc:	01c001b4 	movhi	r7,6
    64d0:	39ea5d04 	addi	r7,r7,-22156
    64d4:	018001b4 	movhi	r6,6
    64d8:	31aab904 	addi	r6,r6,-21788
    64dc:	01403104 	movi	r5,196
    64e0:	010001b4 	movhi	r4,6
    64e4:	212a4d04 	addi	r4,r4,-22220
    64e8:	004504c0 	call	4504c <__assert_func>

    secp256k1_ecdsa_signature sig;
    if (!secp256k1_ecdsa_signature_parse_der(secp256k1_ctx, &sig, sigder_in, sigder_len))
    64ec:	d0a87517 	ldw	r2,-24108(gp)
    64f0:	e1fffe17 	ldw	r7,-8(fp)
    64f4:	e1bffd17 	ldw	r6,-12(fp)
    64f8:	e17fed04 	addi	r5,fp,-76
    64fc:	1009883a 	mov	r4,r2
    6500:	00397a00 	call	397a0 <secp256k1_ecdsa_signature_parse_der>
    6504:	1000021e 	bne	r2,zero,6510 <btc_ecc_der_to_compact+0x68>
        return false;
    6508:	0005883a 	mov	r2,zero
    650c:	00000506 	br	6524 <btc_ecc_der_to_compact+0x7c>

    return secp256k1_ecdsa_signature_serialize_compact(secp256k1_ctx, sigcomp_out, &sig);
    6510:	d0a87517 	ldw	r2,-24108(gp)
    6514:	e1bfed04 	addi	r6,fp,-76
    6518:	e17fff17 	ldw	r5,-4(fp)
    651c:	1009883a 	mov	r4,r2
    6520:	0039b7c0 	call	39b7c <secp256k1_ecdsa_signature_serialize_compact>
}
    6524:	e037883a 	mov	sp,fp
    6528:	dfc00117 	ldw	ra,4(sp)
    652c:	df000017 	ldw	fp,0(sp)
    6530:	dec00204 	addi	sp,sp,8
    6534:	f800283a 	ret

00006538 <btc_mem_set_mapper_default>:

static const btc_mem_mapper default_mem_mapper = {btc_malloc_internal, btc_calloc_internal, btc_realloc_internal, btc_free_internal};
static btc_mem_mapper current_mem_mapper = {btc_malloc_internal, btc_calloc_internal, btc_realloc_internal, btc_free_internal};

void btc_mem_set_mapper_default()
{
    6538:	deffff04 	addi	sp,sp,-4
    653c:	df000015 	stw	fp,0(sp)
    6540:	d839883a 	mov	fp,sp
    current_mem_mapper = default_mem_mapper;
    6544:	008001b4 	movhi	r2,6
    6548:	10b70504 	addi	r2,r2,-9196
    654c:	00c00034 	movhi	r3,0
    6550:	18d9c104 	addi	r3,r3,26372
    6554:	10c00015 	stw	r3,0(r2)
    6558:	008001b4 	movhi	r2,6
    655c:	10b70504 	addi	r2,r2,-9196
    6560:	00c00034 	movhi	r3,0
    6564:	18d9da04 	addi	r3,r3,26472
    6568:	10c00115 	stw	r3,4(r2)
    656c:	008001b4 	movhi	r2,6
    6570:	10b70504 	addi	r2,r2,-9196
    6574:	00c00034 	movhi	r3,0
    6578:	18d9f504 	addi	r3,r3,26580
    657c:	10c00215 	stw	r3,8(r2)
    6580:	008001b4 	movhi	r2,6
    6584:	10b70504 	addi	r2,r2,-9196
    6588:	00c00034 	movhi	r3,0
    658c:	18da1004 	addi	r3,r3,26688
    6590:	10c00315 	stw	r3,12(r2)
}
    6594:	0001883a 	nop
    6598:	e037883a 	mov	sp,fp
    659c:	df000017 	ldw	fp,0(sp)
    65a0:	dec00104 	addi	sp,sp,4
    65a4:	f800283a 	ret

000065a8 <btc_mem_set_mapper>:

void btc_mem_set_mapper(const btc_mem_mapper mapper)
{
    65a8:	defffb04 	addi	sp,sp,-20
    65ac:	df000415 	stw	fp,16(sp)
    65b0:	df000404 	addi	fp,sp,16
    65b4:	e13ffc15 	stw	r4,-16(fp)
    65b8:	e17ffd15 	stw	r5,-12(fp)
    65bc:	e1bffe15 	stw	r6,-8(fp)
    65c0:	e1ffff15 	stw	r7,-4(fp)
    current_mem_mapper = mapper;
    65c4:	008001b4 	movhi	r2,6
    65c8:	10b70504 	addi	r2,r2,-9196
    65cc:	e0fffc17 	ldw	r3,-16(fp)
    65d0:	10c00015 	stw	r3,0(r2)
    65d4:	e0fffd17 	ldw	r3,-12(fp)
    65d8:	10c00115 	stw	r3,4(r2)
    65dc:	e0fffe17 	ldw	r3,-8(fp)
    65e0:	10c00215 	stw	r3,8(r2)
    65e4:	e0ffff17 	ldw	r3,-4(fp)
    65e8:	10c00315 	stw	r3,12(r2)
}
    65ec:	0001883a 	nop
    65f0:	e037883a 	mov	sp,fp
    65f4:	df000017 	ldw	fp,0(sp)
    65f8:	dec00104 	addi	sp,sp,4
    65fc:	f800283a 	ret

00006600 <btc_malloc>:

void* btc_malloc(size_t size)
{
    6600:	defffd04 	addi	sp,sp,-12
    6604:	dfc00215 	stw	ra,8(sp)
    6608:	df000115 	stw	fp,4(sp)
    660c:	df000104 	addi	fp,sp,4
    6610:	e13fff15 	stw	r4,-4(fp)
    return current_mem_mapper.btc_malloc(size);
    6614:	008001b4 	movhi	r2,6
    6618:	10b70504 	addi	r2,r2,-9196
    661c:	10800017 	ldw	r2,0(r2)
    6620:	e13fff17 	ldw	r4,-4(fp)
    6624:	103ee83a 	callr	r2
}
    6628:	e037883a 	mov	sp,fp
    662c:	dfc00117 	ldw	ra,4(sp)
    6630:	df000017 	ldw	fp,0(sp)
    6634:	dec00204 	addi	sp,sp,8
    6638:	f800283a 	ret

0000663c <btc_calloc>:

void* btc_calloc(size_t count, size_t size)
{
    663c:	defffc04 	addi	sp,sp,-16
    6640:	dfc00315 	stw	ra,12(sp)
    6644:	df000215 	stw	fp,8(sp)
    6648:	df000204 	addi	fp,sp,8
    664c:	e13ffe15 	stw	r4,-8(fp)
    6650:	e17fff15 	stw	r5,-4(fp)
    return current_mem_mapper.btc_calloc(count, size);
    6654:	008001b4 	movhi	r2,6
    6658:	10b70504 	addi	r2,r2,-9196
    665c:	10800117 	ldw	r2,4(r2)
    6660:	e17fff17 	ldw	r5,-4(fp)
    6664:	e13ffe17 	ldw	r4,-8(fp)
    6668:	103ee83a 	callr	r2
}
    666c:	e037883a 	mov	sp,fp
    6670:	dfc00117 	ldw	ra,4(sp)
    6674:	df000017 	ldw	fp,0(sp)
    6678:	dec00204 	addi	sp,sp,8
    667c:	f800283a 	ret

00006680 <btc_realloc>:

void* btc_realloc(void *ptr, size_t size)
{
    6680:	defffc04 	addi	sp,sp,-16
    6684:	dfc00315 	stw	ra,12(sp)
    6688:	df000215 	stw	fp,8(sp)
    668c:	df000204 	addi	fp,sp,8
    6690:	e13ffe15 	stw	r4,-8(fp)
    6694:	e17fff15 	stw	r5,-4(fp)
    return current_mem_mapper.btc_realloc(ptr, size);
    6698:	008001b4 	movhi	r2,6
    669c:	10b70504 	addi	r2,r2,-9196
    66a0:	10800217 	ldw	r2,8(r2)
    66a4:	e17fff17 	ldw	r5,-4(fp)
    66a8:	e13ffe17 	ldw	r4,-8(fp)
    66ac:	103ee83a 	callr	r2
}
    66b0:	e037883a 	mov	sp,fp
    66b4:	dfc00117 	ldw	ra,4(sp)
    66b8:	df000017 	ldw	fp,0(sp)
    66bc:	dec00204 	addi	sp,sp,8
    66c0:	f800283a 	ret

000066c4 <btc_free>:

void btc_free(void* ptr)
{
    66c4:	defffd04 	addi	sp,sp,-12
    66c8:	dfc00215 	stw	ra,8(sp)
    66cc:	df000115 	stw	fp,4(sp)
    66d0:	df000104 	addi	fp,sp,4
    66d4:	e13fff15 	stw	r4,-4(fp)
    current_mem_mapper.btc_free(ptr);
    66d8:	008001b4 	movhi	r2,6
    66dc:	10b70504 	addi	r2,r2,-9196
    66e0:	10800317 	ldw	r2,12(r2)
    66e4:	e13fff17 	ldw	r4,-4(fp)
    66e8:	103ee83a 	callr	r2
}
    66ec:	0001883a 	nop
    66f0:	e037883a 	mov	sp,fp
    66f4:	dfc00117 	ldw	ra,4(sp)
    66f8:	df000017 	ldw	fp,0(sp)
    66fc:	dec00204 	addi	sp,sp,8
    6700:	f800283a 	ret

00006704 <btc_malloc_internal>:

void* btc_malloc_internal(size_t size)
{
    6704:	defffc04 	addi	sp,sp,-16
    6708:	dfc00315 	stw	ra,12(sp)
    670c:	df000215 	stw	fp,8(sp)
    6710:	df000204 	addi	fp,sp,8
    6714:	e13fff15 	stw	r4,-4(fp)
    void* result;

    if ((result = malloc(size))) { /* assignment intentional */
    6718:	e13fff17 	ldw	r4,-4(fp)
    671c:	00453e80 	call	453e8 <malloc>
    6720:	e0bffe15 	stw	r2,-8(fp)
    6724:	e0bffe17 	ldw	r2,-8(fp)
    6728:	10000226 	beq	r2,zero,6734 <btc_malloc_internal+0x30>
        return (result);
    672c:	e0bffe17 	ldw	r2,-8(fp)
    6730:	00000806 	br	6754 <btc_malloc_internal+0x50>
    } else {
        printf("memory overflow: malloc failed in btc_malloc.");
    6734:	010001b4 	movhi	r4,6
    6738:	212ac304 	addi	r4,r4,-21748
    673c:	00460940 	call	46094 <printf>
        printf("  Exiting Program.\n");
    6740:	010001b4 	movhi	r4,6
    6744:	212acf04 	addi	r4,r4,-21700
    6748:	00461b00 	call	461b0 <puts>
        exit(-1);
    674c:	013fffc4 	movi	r4,-1
    6750:	00451a40 	call	451a4 <exit>
        return (0);
    }
}
    6754:	e037883a 	mov	sp,fp
    6758:	dfc00117 	ldw	ra,4(sp)
    675c:	df000017 	ldw	fp,0(sp)
    6760:	dec00204 	addi	sp,sp,8
    6764:	f800283a 	ret

00006768 <btc_calloc_internal>:

void* btc_calloc_internal(size_t count, size_t size)
{
    6768:	defffb04 	addi	sp,sp,-20
    676c:	dfc00415 	stw	ra,16(sp)
    6770:	df000315 	stw	fp,12(sp)
    6774:	df000304 	addi	fp,sp,12
    6778:	e13ffe15 	stw	r4,-8(fp)
    677c:	e17fff15 	stw	r5,-4(fp)
    void* result;

    if ((result = calloc(count, size))) { /* assignment intentional */
    6780:	e17fff17 	ldw	r5,-4(fp)
    6784:	e13ffe17 	ldw	r4,-8(fp)
    6788:	00450c80 	call	450c8 <calloc>
    678c:	e0bffd15 	stw	r2,-12(fp)
    6790:	e0bffd17 	ldw	r2,-12(fp)
    6794:	10000226 	beq	r2,zero,67a0 <btc_calloc_internal+0x38>
        return (result);
    6798:	e0bffd17 	ldw	r2,-12(fp)
    679c:	00000806 	br	67c0 <btc_calloc_internal+0x58>
    } else {
        printf("memory overflow: calloc failed in btc_malloc.");
    67a0:	010001b4 	movhi	r4,6
    67a4:	212ad404 	addi	r4,r4,-21680
    67a8:	00460940 	call	46094 <printf>
        printf("  Exiting Program.\n");
    67ac:	010001b4 	movhi	r4,6
    67b0:	212acf04 	addi	r4,r4,-21700
    67b4:	00461b00 	call	461b0 <puts>
        exit(-1);
    67b8:	013fffc4 	movi	r4,-1
    67bc:	00451a40 	call	451a4 <exit>
        return (0);
    }
}
    67c0:	e037883a 	mov	sp,fp
    67c4:	dfc00117 	ldw	ra,4(sp)
    67c8:	df000017 	ldw	fp,0(sp)
    67cc:	dec00204 	addi	sp,sp,8
    67d0:	f800283a 	ret

000067d4 <btc_realloc_internal>:

void* btc_realloc_internal(void *ptr, size_t size)
{
    67d4:	defffb04 	addi	sp,sp,-20
    67d8:	dfc00415 	stw	ra,16(sp)
    67dc:	df000315 	stw	fp,12(sp)
    67e0:	df000304 	addi	fp,sp,12
    67e4:	e13ffe15 	stw	r4,-8(fp)
    67e8:	e17fff15 	stw	r5,-4(fp)
    void* result;

    if ((result = realloc(ptr, size))) { /* assignment intentional */
    67ec:	e17fff17 	ldw	r5,-4(fp)
    67f0:	e13ffe17 	ldw	r4,-8(fp)
    67f4:	00462400 	call	46240 <realloc>
    67f8:	e0bffd15 	stw	r2,-12(fp)
    67fc:	e0bffd17 	ldw	r2,-12(fp)
    6800:	10000226 	beq	r2,zero,680c <btc_realloc_internal+0x38>
        return (result);
    6804:	e0bffd17 	ldw	r2,-12(fp)
    6808:	00000806 	br	682c <btc_realloc_internal+0x58>
    } else {
        printf("memory overflow: calloc failed in btc_malloc.");
    680c:	010001b4 	movhi	r4,6
    6810:	212ad404 	addi	r4,r4,-21680
    6814:	00460940 	call	46094 <printf>
        printf("  Exiting Program.\n");
    6818:	010001b4 	movhi	r4,6
    681c:	212acf04 	addi	r4,r4,-21700
    6820:	00461b00 	call	461b0 <puts>
        exit(-1);
    6824:	013fffc4 	movi	r4,-1
    6828:	00451a40 	call	451a4 <exit>
        return (0);
    }
}
    682c:	e037883a 	mov	sp,fp
    6830:	dfc00117 	ldw	ra,4(sp)
    6834:	df000017 	ldw	fp,0(sp)
    6838:	dec00204 	addi	sp,sp,8
    683c:	f800283a 	ret

00006840 <btc_free_internal>:

void btc_free_internal(void* ptr)
{
    6840:	defffd04 	addi	sp,sp,-12
    6844:	dfc00215 	stw	ra,8(sp)
    6848:	df000115 	stw	fp,4(sp)
    684c:	df000104 	addi	fp,sp,4
    6850:	e13fff15 	stw	r4,-4(fp)
    free(ptr);
    6854:	e13fff17 	ldw	r4,-4(fp)
    6858:	00453fc0 	call	453fc <free>
}
    685c:	0001883a 	nop
    6860:	e037883a 	mov	sp,fp
    6864:	dfc00117 	ldw	ra,4(sp)
    6868:	df000017 	ldw	fp,0(sp)
    686c:	dec00204 	addi	sp,sp,8
    6870:	f800283a 	ret

00006874 <btc_mem_zero>:
{
    memset_s(dst, len, 0, len);
}
#else
volatile void *btc_mem_zero(volatile void *dst, size_t len)
{
    6874:	defffc04 	addi	sp,sp,-16
    6878:	df000315 	stw	fp,12(sp)
    687c:	df000304 	addi	fp,sp,12
    6880:	e13ffe15 	stw	r4,-8(fp)
    6884:	e17fff15 	stw	r5,-4(fp)
    volatile char *buf;
    for (buf = (volatile char *)dst;  len;  buf[--len] = 0);
    6888:	e0bffe17 	ldw	r2,-8(fp)
    688c:	e0bffd15 	stw	r2,-12(fp)
    6890:	00000706 	br	68b0 <btc_mem_zero+0x3c>
    6894:	e0bfff17 	ldw	r2,-4(fp)
    6898:	10bfffc4 	addi	r2,r2,-1
    689c:	e0bfff15 	stw	r2,-4(fp)
    68a0:	e0fffd17 	ldw	r3,-12(fp)
    68a4:	e0bfff17 	ldw	r2,-4(fp)
    68a8:	1885883a 	add	r2,r3,r2
    68ac:	10000005 	stb	zero,0(r2)
    68b0:	e0bfff17 	ldw	r2,-4(fp)
    68b4:	103ff71e 	bne	r2,zero,6894 <__alt_mem_epcs_flash_controller+0xfdff5894>
    return dst;
    68b8:	e0bffe17 	ldw	r2,-8(fp)
}
    68bc:	e037883a 	mov	sp,fp
    68c0:	df000017 	ldw	fp,0(sp)
    68c4:	dec00104 	addi	sp,sp,4
    68c8:	f800283a 	ret

000068cc <btc_rnd_set_mapper_default>:

static const btc_rnd_mapper default_rnd_mapper = {btc_random_init_internal, btc_random_bytes_internal};
static btc_rnd_mapper current_rnd_mapper = {btc_random_init_internal, btc_random_bytes_internal};

void btc_rnd_set_mapper_default()
{
    68cc:	deffff04 	addi	sp,sp,-4
    68d0:	df000015 	stw	fp,0(sp)
    68d4:	d839883a 	mov	fp,sp
    current_rnd_mapper = default_rnd_mapper;
    68d8:	00800034 	movhi	r2,0
    68dc:	109a6e04 	addi	r2,r2,27064
    68e0:	d0a00915 	stw	r2,-32732(gp)
    68e4:	00800034 	movhi	r2,0
    68e8:	109a7c04 	addi	r2,r2,27120
    68ec:	d0a00a15 	stw	r2,-32728(gp)
}
    68f0:	0001883a 	nop
    68f4:	e037883a 	mov	sp,fp
    68f8:	df000017 	ldw	fp,0(sp)
    68fc:	dec00104 	addi	sp,sp,4
    6900:	f800283a 	ret

00006904 <btc_rnd_set_mapper>:

void btc_rnd_set_mapper(const btc_rnd_mapper mapper)
{
    6904:	defffd04 	addi	sp,sp,-12
    6908:	df000215 	stw	fp,8(sp)
    690c:	df000204 	addi	fp,sp,8
    6910:	e13ffe15 	stw	r4,-8(fp)
    6914:	e17fff15 	stw	r5,-4(fp)
    current_rnd_mapper = mapper;
    6918:	e0bffe17 	ldw	r2,-8(fp)
    691c:	d0a00915 	stw	r2,-32732(gp)
    6920:	e0bfff17 	ldw	r2,-4(fp)
    6924:	d0a00a15 	stw	r2,-32728(gp)
}
    6928:	0001883a 	nop
    692c:	e037883a 	mov	sp,fp
    6930:	df000017 	ldw	fp,0(sp)
    6934:	dec00104 	addi	sp,sp,4
    6938:	f800283a 	ret

0000693c <btc_random_init>:

void btc_random_init(void)
{
    693c:	defffe04 	addi	sp,sp,-8
    6940:	dfc00115 	stw	ra,4(sp)
    6944:	df000015 	stw	fp,0(sp)
    6948:	d839883a 	mov	fp,sp
    current_rnd_mapper.btc_random_init();
    694c:	d0a00917 	ldw	r2,-32732(gp)
    6950:	103ee83a 	callr	r2
}
    6954:	0001883a 	nop
    6958:	e037883a 	mov	sp,fp
    695c:	dfc00117 	ldw	ra,4(sp)
    6960:	df000017 	ldw	fp,0(sp)
    6964:	dec00204 	addi	sp,sp,8
    6968:	f800283a 	ret

0000696c <btc_random_bytes>:

btc_bool btc_random_bytes(uint8_t* buf, uint32_t len, const uint8_t update_seed)
{
    696c:	defffb04 	addi	sp,sp,-20
    6970:	dfc00415 	stw	ra,16(sp)
    6974:	df000315 	stw	fp,12(sp)
    6978:	df000304 	addi	fp,sp,12
    697c:	e13ffd15 	stw	r4,-12(fp)
    6980:	e17ffe15 	stw	r5,-8(fp)
    6984:	3005883a 	mov	r2,r6
    6988:	e0bfff05 	stb	r2,-4(fp)
    return current_rnd_mapper.btc_random_bytes(buf, len, update_seed);
    698c:	d0a00a17 	ldw	r2,-32728(gp)
    6990:	e0ffff03 	ldbu	r3,-4(fp)
    6994:	180d883a 	mov	r6,r3
    6998:	e17ffe17 	ldw	r5,-8(fp)
    699c:	e13ffd17 	ldw	r4,-12(fp)
    69a0:	103ee83a 	callr	r2
}
    69a4:	e037883a 	mov	sp,fp
    69a8:	dfc00117 	ldw	ra,4(sp)
    69ac:	df000017 	ldw	fp,0(sp)
    69b0:	dec00204 	addi	sp,sp,8
    69b4:	f800283a 	ret

000069b8 <btc_random_init_internal>:

#ifdef TESTING
void btc_random_init_internal(void)
{
    69b8:	defffe04 	addi	sp,sp,-8
    69bc:	dfc00115 	stw	ra,4(sp)
    69c0:	df000015 	stw	fp,0(sp)
    69c4:	d839883a 	mov	fp,sp
    srand(time(NULL));
    69c8:	0009883a 	mov	r4,zero
    69cc:	004975c0 	call	4975c <time>
    69d0:	1009883a 	mov	r4,r2
    69d4:	00461c40 	call	461c4 <srand>
}
    69d8:	0001883a 	nop
    69dc:	e037883a 	mov	sp,fp
    69e0:	dfc00117 	ldw	ra,4(sp)
    69e4:	df000017 	ldw	fp,0(sp)
    69e8:	dec00204 	addi	sp,sp,8
    69ec:	f800283a 	ret

000069f0 <btc_random_bytes_internal>:


btc_bool btc_random_bytes_internal(uint8_t* buf, uint32_t len, uint8_t update_seed)
{
    69f0:	defff904 	addi	sp,sp,-28
    69f4:	dfc00615 	stw	ra,24(sp)
    69f8:	df000515 	stw	fp,20(sp)
    69fc:	dc000415 	stw	r16,16(sp)
    6a00:	df000504 	addi	fp,sp,20
    6a04:	e13ffc15 	stw	r4,-16(fp)
    6a08:	e17ffd15 	stw	r5,-12(fp)
    6a0c:	3005883a 	mov	r2,r6
    6a10:	e0bffe05 	stb	r2,-8(fp)
    (void)update_seed;
    for (uint32_t i = 0; i < len; i++) {
    6a14:	e03ffb15 	stw	zero,-20(fp)
    6a18:	00000806 	br	6a3c <btc_random_bytes_internal+0x4c>
        buf[i] = rand();
    6a1c:	e0fffc17 	ldw	r3,-16(fp)
    6a20:	e0bffb17 	ldw	r2,-20(fp)
    6a24:	18a1883a 	add	r16,r3,r2
    6a28:	00461dc0 	call	461dc <rand>
    6a2c:	80800005 	stb	r2,0(r16)


btc_bool btc_random_bytes_internal(uint8_t* buf, uint32_t len, uint8_t update_seed)
{
    (void)update_seed;
    for (uint32_t i = 0; i < len; i++) {
    6a30:	e0bffb17 	ldw	r2,-20(fp)
    6a34:	10800044 	addi	r2,r2,1
    6a38:	e0bffb15 	stw	r2,-20(fp)
    6a3c:	e0fffb17 	ldw	r3,-20(fp)
    6a40:	e0bffd17 	ldw	r2,-12(fp)
    6a44:	18bff536 	bltu	r3,r2,6a1c <__alt_mem_epcs_flash_controller+0xfdff5a1c>
        buf[i] = rand();
    }

    return true;
    6a48:	00800044 	movi	r2,1
}
    6a4c:	e6ffff04 	addi	sp,fp,-4
    6a50:	dfc00217 	ldw	ra,8(sp)
    6a54:	df000117 	ldw	fp,4(sp)
    6a58:	dc000017 	ldw	r16,0(sp)
    6a5c:	dec00304 	addi	sp,sp,12
    6a60:	f800283a 	ret

00006a64 <compress>:
        (a) = ROL((a), (s)) + (e);                    \
        (c) = ROL((c), 10);                           \
    }

static void compress(uint32_t* MDbuf, uint32_t* X)
{
    6a64:	defff304 	addi	sp,sp,-52
    6a68:	df000c15 	stw	fp,48(sp)
    6a6c:	df000c04 	addi	fp,sp,48
    6a70:	e13ffe15 	stw	r4,-8(fp)
    6a74:	e17fff15 	stw	r5,-4(fp)
    uint32_t aa = MDbuf[0], bb = MDbuf[1], cc = MDbuf[2], dd = MDbuf[3], ee = MDbuf[4];
    6a78:	e0bffe17 	ldw	r2,-8(fp)
    6a7c:	10800017 	ldw	r2,0(r2)
    6a80:	e0bff415 	stw	r2,-48(fp)
    6a84:	e0bffe17 	ldw	r2,-8(fp)
    6a88:	10800117 	ldw	r2,4(r2)
    6a8c:	e0bff515 	stw	r2,-44(fp)
    6a90:	e0bffe17 	ldw	r2,-8(fp)
    6a94:	10800217 	ldw	r2,8(r2)
    6a98:	e0bff615 	stw	r2,-40(fp)
    6a9c:	e0bffe17 	ldw	r2,-8(fp)
    6aa0:	10800317 	ldw	r2,12(r2)
    6aa4:	e0bff715 	stw	r2,-36(fp)
    6aa8:	e0bffe17 	ldw	r2,-8(fp)
    6aac:	10800417 	ldw	r2,16(r2)
    6ab0:	e0bff815 	stw	r2,-32(fp)
    uint32_t aaa = MDbuf[0], bbb = MDbuf[1], ccc = MDbuf[2], ddd = MDbuf[3], eee = MDbuf[4];
    6ab4:	e0bffe17 	ldw	r2,-8(fp)
    6ab8:	10800017 	ldw	r2,0(r2)
    6abc:	e0bff915 	stw	r2,-28(fp)
    6ac0:	e0bffe17 	ldw	r2,-8(fp)
    6ac4:	10800117 	ldw	r2,4(r2)
    6ac8:	e0bffa15 	stw	r2,-24(fp)
    6acc:	e0bffe17 	ldw	r2,-8(fp)
    6ad0:	10800217 	ldw	r2,8(r2)
    6ad4:	e0bffb15 	stw	r2,-20(fp)
    6ad8:	e0bffe17 	ldw	r2,-8(fp)
    6adc:	10800317 	ldw	r2,12(r2)
    6ae0:	e0bffc15 	stw	r2,-16(fp)
    6ae4:	e0bffe17 	ldw	r2,-8(fp)
    6ae8:	10800417 	ldw	r2,16(r2)
    6aec:	e0bffd15 	stw	r2,-12(fp)

    /* round 1 */
    FF(aa, bb, cc, dd, ee, X[0], 11);
    6af0:	e0fff517 	ldw	r3,-44(fp)
    6af4:	e0bff617 	ldw	r2,-40(fp)
    6af8:	1886f03a 	xor	r3,r3,r2
    6afc:	e0bff717 	ldw	r2,-36(fp)
    6b00:	1886f03a 	xor	r3,r3,r2
    6b04:	e0bfff17 	ldw	r2,-4(fp)
    6b08:	10800017 	ldw	r2,0(r2)
    6b0c:	1885883a 	add	r2,r3,r2
    6b10:	e0fff417 	ldw	r3,-48(fp)
    6b14:	1885883a 	add	r2,r3,r2
    6b18:	e0bff415 	stw	r2,-48(fp)
    6b1c:	e0bff417 	ldw	r2,-48(fp)
    6b20:	100612fa 	roli	r3,r2,11
    6b24:	e0bff817 	ldw	r2,-32(fp)
    6b28:	1885883a 	add	r2,r3,r2
    6b2c:	e0bff415 	stw	r2,-48(fp)
    6b30:	e0bff617 	ldw	r2,-40(fp)
    6b34:	100412ba 	roli	r2,r2,10
    6b38:	e0bff615 	stw	r2,-40(fp)
    FF(ee, aa, bb, cc, dd, X[1], 14);
    6b3c:	e0fff417 	ldw	r3,-48(fp)
    6b40:	e0bff517 	ldw	r2,-44(fp)
    6b44:	1886f03a 	xor	r3,r3,r2
    6b48:	e0bff617 	ldw	r2,-40(fp)
    6b4c:	1886f03a 	xor	r3,r3,r2
    6b50:	e0bfff17 	ldw	r2,-4(fp)
    6b54:	10800104 	addi	r2,r2,4
    6b58:	10800017 	ldw	r2,0(r2)
    6b5c:	1885883a 	add	r2,r3,r2
    6b60:	e0fff817 	ldw	r3,-32(fp)
    6b64:	1885883a 	add	r2,r3,r2
    6b68:	e0bff815 	stw	r2,-32(fp)
    6b6c:	e0bff817 	ldw	r2,-32(fp)
    6b70:	100613ba 	roli	r3,r2,14
    6b74:	e0bff717 	ldw	r2,-36(fp)
    6b78:	1885883a 	add	r2,r3,r2
    6b7c:	e0bff815 	stw	r2,-32(fp)
    6b80:	e0bff517 	ldw	r2,-44(fp)
    6b84:	100412ba 	roli	r2,r2,10
    6b88:	e0bff515 	stw	r2,-44(fp)
    FF(dd, ee, aa, bb, cc, X[2], 15);
    6b8c:	e0fff817 	ldw	r3,-32(fp)
    6b90:	e0bff417 	ldw	r2,-48(fp)
    6b94:	1886f03a 	xor	r3,r3,r2
    6b98:	e0bff517 	ldw	r2,-44(fp)
    6b9c:	1886f03a 	xor	r3,r3,r2
    6ba0:	e0bfff17 	ldw	r2,-4(fp)
    6ba4:	10800204 	addi	r2,r2,8
    6ba8:	10800017 	ldw	r2,0(r2)
    6bac:	1885883a 	add	r2,r3,r2
    6bb0:	e0fff717 	ldw	r3,-36(fp)
    6bb4:	1885883a 	add	r2,r3,r2
    6bb8:	e0bff715 	stw	r2,-36(fp)
    6bbc:	e0bff717 	ldw	r2,-36(fp)
    6bc0:	100613fa 	roli	r3,r2,15
    6bc4:	e0bff617 	ldw	r2,-40(fp)
    6bc8:	1885883a 	add	r2,r3,r2
    6bcc:	e0bff715 	stw	r2,-36(fp)
    6bd0:	e0bff417 	ldw	r2,-48(fp)
    6bd4:	100412ba 	roli	r2,r2,10
    6bd8:	e0bff415 	stw	r2,-48(fp)
    FF(cc, dd, ee, aa, bb, X[3], 12);
    6bdc:	e0fff717 	ldw	r3,-36(fp)
    6be0:	e0bff817 	ldw	r2,-32(fp)
    6be4:	1886f03a 	xor	r3,r3,r2
    6be8:	e0bff417 	ldw	r2,-48(fp)
    6bec:	1886f03a 	xor	r3,r3,r2
    6bf0:	e0bfff17 	ldw	r2,-4(fp)
    6bf4:	10800304 	addi	r2,r2,12
    6bf8:	10800017 	ldw	r2,0(r2)
    6bfc:	1885883a 	add	r2,r3,r2
    6c00:	e0fff617 	ldw	r3,-40(fp)
    6c04:	1885883a 	add	r2,r3,r2
    6c08:	e0bff615 	stw	r2,-40(fp)
    6c0c:	e0bff617 	ldw	r2,-40(fp)
    6c10:	1006133a 	roli	r3,r2,12
    6c14:	e0bff517 	ldw	r2,-44(fp)
    6c18:	1885883a 	add	r2,r3,r2
    6c1c:	e0bff615 	stw	r2,-40(fp)
    6c20:	e0bff817 	ldw	r2,-32(fp)
    6c24:	100412ba 	roli	r2,r2,10
    6c28:	e0bff815 	stw	r2,-32(fp)
    FF(bb, cc, dd, ee, aa, X[4], 5);
    6c2c:	e0fff617 	ldw	r3,-40(fp)
    6c30:	e0bff717 	ldw	r2,-36(fp)
    6c34:	1886f03a 	xor	r3,r3,r2
    6c38:	e0bff817 	ldw	r2,-32(fp)
    6c3c:	1886f03a 	xor	r3,r3,r2
    6c40:	e0bfff17 	ldw	r2,-4(fp)
    6c44:	10800404 	addi	r2,r2,16
    6c48:	10800017 	ldw	r2,0(r2)
    6c4c:	1885883a 	add	r2,r3,r2
    6c50:	e0fff517 	ldw	r3,-44(fp)
    6c54:	1885883a 	add	r2,r3,r2
    6c58:	e0bff515 	stw	r2,-44(fp)
    6c5c:	e0bff517 	ldw	r2,-44(fp)
    6c60:	1006117a 	roli	r3,r2,5
    6c64:	e0bff417 	ldw	r2,-48(fp)
    6c68:	1885883a 	add	r2,r3,r2
    6c6c:	e0bff515 	stw	r2,-44(fp)
    6c70:	e0bff717 	ldw	r2,-36(fp)
    6c74:	100412ba 	roli	r2,r2,10
    6c78:	e0bff715 	stw	r2,-36(fp)
    FF(aa, bb, cc, dd, ee, X[5], 8);
    6c7c:	e0fff517 	ldw	r3,-44(fp)
    6c80:	e0bff617 	ldw	r2,-40(fp)
    6c84:	1886f03a 	xor	r3,r3,r2
    6c88:	e0bff717 	ldw	r2,-36(fp)
    6c8c:	1886f03a 	xor	r3,r3,r2
    6c90:	e0bfff17 	ldw	r2,-4(fp)
    6c94:	10800504 	addi	r2,r2,20
    6c98:	10800017 	ldw	r2,0(r2)
    6c9c:	1885883a 	add	r2,r3,r2
    6ca0:	e0fff417 	ldw	r3,-48(fp)
    6ca4:	1885883a 	add	r2,r3,r2
    6ca8:	e0bff415 	stw	r2,-48(fp)
    6cac:	e0bff417 	ldw	r2,-48(fp)
    6cb0:	1006123a 	roli	r3,r2,8
    6cb4:	e0bff817 	ldw	r2,-32(fp)
    6cb8:	1885883a 	add	r2,r3,r2
    6cbc:	e0bff415 	stw	r2,-48(fp)
    6cc0:	e0bff617 	ldw	r2,-40(fp)
    6cc4:	100412ba 	roli	r2,r2,10
    6cc8:	e0bff615 	stw	r2,-40(fp)
    FF(ee, aa, bb, cc, dd, X[6], 7);
    6ccc:	e0fff417 	ldw	r3,-48(fp)
    6cd0:	e0bff517 	ldw	r2,-44(fp)
    6cd4:	1886f03a 	xor	r3,r3,r2
    6cd8:	e0bff617 	ldw	r2,-40(fp)
    6cdc:	1886f03a 	xor	r3,r3,r2
    6ce0:	e0bfff17 	ldw	r2,-4(fp)
    6ce4:	10800604 	addi	r2,r2,24
    6ce8:	10800017 	ldw	r2,0(r2)
    6cec:	1885883a 	add	r2,r3,r2
    6cf0:	e0fff817 	ldw	r3,-32(fp)
    6cf4:	1885883a 	add	r2,r3,r2
    6cf8:	e0bff815 	stw	r2,-32(fp)
    6cfc:	e0bff817 	ldw	r2,-32(fp)
    6d00:	100611fa 	roli	r3,r2,7
    6d04:	e0bff717 	ldw	r2,-36(fp)
    6d08:	1885883a 	add	r2,r3,r2
    6d0c:	e0bff815 	stw	r2,-32(fp)
    6d10:	e0bff517 	ldw	r2,-44(fp)
    6d14:	100412ba 	roli	r2,r2,10
    6d18:	e0bff515 	stw	r2,-44(fp)
    FF(dd, ee, aa, bb, cc, X[7], 9);
    6d1c:	e0fff817 	ldw	r3,-32(fp)
    6d20:	e0bff417 	ldw	r2,-48(fp)
    6d24:	1886f03a 	xor	r3,r3,r2
    6d28:	e0bff517 	ldw	r2,-44(fp)
    6d2c:	1886f03a 	xor	r3,r3,r2
    6d30:	e0bfff17 	ldw	r2,-4(fp)
    6d34:	10800704 	addi	r2,r2,28
    6d38:	10800017 	ldw	r2,0(r2)
    6d3c:	1885883a 	add	r2,r3,r2
    6d40:	e0fff717 	ldw	r3,-36(fp)
    6d44:	1885883a 	add	r2,r3,r2
    6d48:	e0bff715 	stw	r2,-36(fp)
    6d4c:	e0bff717 	ldw	r2,-36(fp)
    6d50:	1006127a 	roli	r3,r2,9
    6d54:	e0bff617 	ldw	r2,-40(fp)
    6d58:	1885883a 	add	r2,r3,r2
    6d5c:	e0bff715 	stw	r2,-36(fp)
    6d60:	e0bff417 	ldw	r2,-48(fp)
    6d64:	100412ba 	roli	r2,r2,10
    6d68:	e0bff415 	stw	r2,-48(fp)
    FF(cc, dd, ee, aa, bb, X[8], 11);
    6d6c:	e0fff717 	ldw	r3,-36(fp)
    6d70:	e0bff817 	ldw	r2,-32(fp)
    6d74:	1886f03a 	xor	r3,r3,r2
    6d78:	e0bff417 	ldw	r2,-48(fp)
    6d7c:	1886f03a 	xor	r3,r3,r2
    6d80:	e0bfff17 	ldw	r2,-4(fp)
    6d84:	10800804 	addi	r2,r2,32
    6d88:	10800017 	ldw	r2,0(r2)
    6d8c:	1885883a 	add	r2,r3,r2
    6d90:	e0fff617 	ldw	r3,-40(fp)
    6d94:	1885883a 	add	r2,r3,r2
    6d98:	e0bff615 	stw	r2,-40(fp)
    6d9c:	e0bff617 	ldw	r2,-40(fp)
    6da0:	100612fa 	roli	r3,r2,11
    6da4:	e0bff517 	ldw	r2,-44(fp)
    6da8:	1885883a 	add	r2,r3,r2
    6dac:	e0bff615 	stw	r2,-40(fp)
    6db0:	e0bff817 	ldw	r2,-32(fp)
    6db4:	100412ba 	roli	r2,r2,10
    6db8:	e0bff815 	stw	r2,-32(fp)
    FF(bb, cc, dd, ee, aa, X[9], 13);
    6dbc:	e0fff617 	ldw	r3,-40(fp)
    6dc0:	e0bff717 	ldw	r2,-36(fp)
    6dc4:	1886f03a 	xor	r3,r3,r2
    6dc8:	e0bff817 	ldw	r2,-32(fp)
    6dcc:	1886f03a 	xor	r3,r3,r2
    6dd0:	e0bfff17 	ldw	r2,-4(fp)
    6dd4:	10800904 	addi	r2,r2,36
    6dd8:	10800017 	ldw	r2,0(r2)
    6ddc:	1885883a 	add	r2,r3,r2
    6de0:	e0fff517 	ldw	r3,-44(fp)
    6de4:	1885883a 	add	r2,r3,r2
    6de8:	e0bff515 	stw	r2,-44(fp)
    6dec:	e0bff517 	ldw	r2,-44(fp)
    6df0:	1006137a 	roli	r3,r2,13
    6df4:	e0bff417 	ldw	r2,-48(fp)
    6df8:	1885883a 	add	r2,r3,r2
    6dfc:	e0bff515 	stw	r2,-44(fp)
    6e00:	e0bff717 	ldw	r2,-36(fp)
    6e04:	100412ba 	roli	r2,r2,10
    6e08:	e0bff715 	stw	r2,-36(fp)
    FF(aa, bb, cc, dd, ee, X[10], 14);
    6e0c:	e0fff517 	ldw	r3,-44(fp)
    6e10:	e0bff617 	ldw	r2,-40(fp)
    6e14:	1886f03a 	xor	r3,r3,r2
    6e18:	e0bff717 	ldw	r2,-36(fp)
    6e1c:	1886f03a 	xor	r3,r3,r2
    6e20:	e0bfff17 	ldw	r2,-4(fp)
    6e24:	10800a04 	addi	r2,r2,40
    6e28:	10800017 	ldw	r2,0(r2)
    6e2c:	1885883a 	add	r2,r3,r2
    6e30:	e0fff417 	ldw	r3,-48(fp)
    6e34:	1885883a 	add	r2,r3,r2
    6e38:	e0bff415 	stw	r2,-48(fp)
    6e3c:	e0bff417 	ldw	r2,-48(fp)
    6e40:	100613ba 	roli	r3,r2,14
    6e44:	e0bff817 	ldw	r2,-32(fp)
    6e48:	1885883a 	add	r2,r3,r2
    6e4c:	e0bff415 	stw	r2,-48(fp)
    6e50:	e0bff617 	ldw	r2,-40(fp)
    6e54:	100412ba 	roli	r2,r2,10
    6e58:	e0bff615 	stw	r2,-40(fp)
    FF(ee, aa, bb, cc, dd, X[11], 15);
    6e5c:	e0fff417 	ldw	r3,-48(fp)
    6e60:	e0bff517 	ldw	r2,-44(fp)
    6e64:	1886f03a 	xor	r3,r3,r2
    6e68:	e0bff617 	ldw	r2,-40(fp)
    6e6c:	1886f03a 	xor	r3,r3,r2
    6e70:	e0bfff17 	ldw	r2,-4(fp)
    6e74:	10800b04 	addi	r2,r2,44
    6e78:	10800017 	ldw	r2,0(r2)
    6e7c:	1885883a 	add	r2,r3,r2
    6e80:	e0fff817 	ldw	r3,-32(fp)
    6e84:	1885883a 	add	r2,r3,r2
    6e88:	e0bff815 	stw	r2,-32(fp)
    6e8c:	e0bff817 	ldw	r2,-32(fp)
    6e90:	100613fa 	roli	r3,r2,15
    6e94:	e0bff717 	ldw	r2,-36(fp)
    6e98:	1885883a 	add	r2,r3,r2
    6e9c:	e0bff815 	stw	r2,-32(fp)
    6ea0:	e0bff517 	ldw	r2,-44(fp)
    6ea4:	100412ba 	roli	r2,r2,10
    6ea8:	e0bff515 	stw	r2,-44(fp)
    FF(dd, ee, aa, bb, cc, X[12], 6);
    6eac:	e0fff817 	ldw	r3,-32(fp)
    6eb0:	e0bff417 	ldw	r2,-48(fp)
    6eb4:	1886f03a 	xor	r3,r3,r2
    6eb8:	e0bff517 	ldw	r2,-44(fp)
    6ebc:	1886f03a 	xor	r3,r3,r2
    6ec0:	e0bfff17 	ldw	r2,-4(fp)
    6ec4:	10800c04 	addi	r2,r2,48
    6ec8:	10800017 	ldw	r2,0(r2)
    6ecc:	1885883a 	add	r2,r3,r2
    6ed0:	e0fff717 	ldw	r3,-36(fp)
    6ed4:	1885883a 	add	r2,r3,r2
    6ed8:	e0bff715 	stw	r2,-36(fp)
    6edc:	e0bff717 	ldw	r2,-36(fp)
    6ee0:	100611ba 	roli	r3,r2,6
    6ee4:	e0bff617 	ldw	r2,-40(fp)
    6ee8:	1885883a 	add	r2,r3,r2
    6eec:	e0bff715 	stw	r2,-36(fp)
    6ef0:	e0bff417 	ldw	r2,-48(fp)
    6ef4:	100412ba 	roli	r2,r2,10
    6ef8:	e0bff415 	stw	r2,-48(fp)
    FF(cc, dd, ee, aa, bb, X[13], 7);
    6efc:	e0fff717 	ldw	r3,-36(fp)
    6f00:	e0bff817 	ldw	r2,-32(fp)
    6f04:	1886f03a 	xor	r3,r3,r2
    6f08:	e0bff417 	ldw	r2,-48(fp)
    6f0c:	1886f03a 	xor	r3,r3,r2
    6f10:	e0bfff17 	ldw	r2,-4(fp)
    6f14:	10800d04 	addi	r2,r2,52
    6f18:	10800017 	ldw	r2,0(r2)
    6f1c:	1885883a 	add	r2,r3,r2
    6f20:	e0fff617 	ldw	r3,-40(fp)
    6f24:	1885883a 	add	r2,r3,r2
    6f28:	e0bff615 	stw	r2,-40(fp)
    6f2c:	e0bff617 	ldw	r2,-40(fp)
    6f30:	100611fa 	roli	r3,r2,7
    6f34:	e0bff517 	ldw	r2,-44(fp)
    6f38:	1885883a 	add	r2,r3,r2
    6f3c:	e0bff615 	stw	r2,-40(fp)
    6f40:	e0bff817 	ldw	r2,-32(fp)
    6f44:	100412ba 	roli	r2,r2,10
    6f48:	e0bff815 	stw	r2,-32(fp)
    FF(bb, cc, dd, ee, aa, X[14], 9);
    6f4c:	e0fff617 	ldw	r3,-40(fp)
    6f50:	e0bff717 	ldw	r2,-36(fp)
    6f54:	1886f03a 	xor	r3,r3,r2
    6f58:	e0bff817 	ldw	r2,-32(fp)
    6f5c:	1886f03a 	xor	r3,r3,r2
    6f60:	e0bfff17 	ldw	r2,-4(fp)
    6f64:	10800e04 	addi	r2,r2,56
    6f68:	10800017 	ldw	r2,0(r2)
    6f6c:	1885883a 	add	r2,r3,r2
    6f70:	e0fff517 	ldw	r3,-44(fp)
    6f74:	1885883a 	add	r2,r3,r2
    6f78:	e0bff515 	stw	r2,-44(fp)
    6f7c:	e0bff517 	ldw	r2,-44(fp)
    6f80:	1006127a 	roli	r3,r2,9
    6f84:	e0bff417 	ldw	r2,-48(fp)
    6f88:	1885883a 	add	r2,r3,r2
    6f8c:	e0bff515 	stw	r2,-44(fp)
    6f90:	e0bff717 	ldw	r2,-36(fp)
    6f94:	100412ba 	roli	r2,r2,10
    6f98:	e0bff715 	stw	r2,-36(fp)
    FF(aa, bb, cc, dd, ee, X[15], 8);
    6f9c:	e0fff517 	ldw	r3,-44(fp)
    6fa0:	e0bff617 	ldw	r2,-40(fp)
    6fa4:	1886f03a 	xor	r3,r3,r2
    6fa8:	e0bff717 	ldw	r2,-36(fp)
    6fac:	1886f03a 	xor	r3,r3,r2
    6fb0:	e0bfff17 	ldw	r2,-4(fp)
    6fb4:	10800f04 	addi	r2,r2,60
    6fb8:	10800017 	ldw	r2,0(r2)
    6fbc:	1885883a 	add	r2,r3,r2
    6fc0:	e0fff417 	ldw	r3,-48(fp)
    6fc4:	1885883a 	add	r2,r3,r2
    6fc8:	e0bff415 	stw	r2,-48(fp)
    6fcc:	e0bff417 	ldw	r2,-48(fp)
    6fd0:	1006123a 	roli	r3,r2,8
    6fd4:	e0bff817 	ldw	r2,-32(fp)
    6fd8:	1885883a 	add	r2,r3,r2
    6fdc:	e0bff415 	stw	r2,-48(fp)
    6fe0:	e0bff617 	ldw	r2,-40(fp)
    6fe4:	100412ba 	roli	r2,r2,10
    6fe8:	e0bff615 	stw	r2,-40(fp)

    /* round 2 */
    GG(ee, aa, bb, cc, dd, X[7], 7);
    6fec:	e0fff617 	ldw	r3,-40(fp)
    6ff0:	e0bff517 	ldw	r2,-44(fp)
    6ff4:	1886f03a 	xor	r3,r3,r2
    6ff8:	e0bff417 	ldw	r2,-48(fp)
    6ffc:	1886703a 	and	r3,r3,r2
    7000:	e0bff617 	ldw	r2,-40(fp)
    7004:	1886f03a 	xor	r3,r3,r2
    7008:	e0bfff17 	ldw	r2,-4(fp)
    700c:	10800704 	addi	r2,r2,28
    7010:	10800017 	ldw	r2,0(r2)
    7014:	1887883a 	add	r3,r3,r2
    7018:	e0bff817 	ldw	r2,-32(fp)
    701c:	1887883a 	add	r3,r3,r2
    7020:	0096a0b4 	movhi	r2,23170
    7024:	109e6644 	addi	r2,r2,31129
    7028:	1885883a 	add	r2,r3,r2
    702c:	e0bff815 	stw	r2,-32(fp)
    7030:	e0bff817 	ldw	r2,-32(fp)
    7034:	100611fa 	roli	r3,r2,7
    7038:	e0bff717 	ldw	r2,-36(fp)
    703c:	1885883a 	add	r2,r3,r2
    7040:	e0bff815 	stw	r2,-32(fp)
    7044:	e0bff517 	ldw	r2,-44(fp)
    7048:	100412ba 	roli	r2,r2,10
    704c:	e0bff515 	stw	r2,-44(fp)
    GG(dd, ee, aa, bb, cc, X[4], 6);
    7050:	e0fff517 	ldw	r3,-44(fp)
    7054:	e0bff417 	ldw	r2,-48(fp)
    7058:	1886f03a 	xor	r3,r3,r2
    705c:	e0bff817 	ldw	r2,-32(fp)
    7060:	1886703a 	and	r3,r3,r2
    7064:	e0bff517 	ldw	r2,-44(fp)
    7068:	1886f03a 	xor	r3,r3,r2
    706c:	e0bfff17 	ldw	r2,-4(fp)
    7070:	10800404 	addi	r2,r2,16
    7074:	10800017 	ldw	r2,0(r2)
    7078:	1887883a 	add	r3,r3,r2
    707c:	e0bff717 	ldw	r2,-36(fp)
    7080:	1887883a 	add	r3,r3,r2
    7084:	0096a0b4 	movhi	r2,23170
    7088:	109e6644 	addi	r2,r2,31129
    708c:	1885883a 	add	r2,r3,r2
    7090:	e0bff715 	stw	r2,-36(fp)
    7094:	e0bff717 	ldw	r2,-36(fp)
    7098:	100611ba 	roli	r3,r2,6
    709c:	e0bff617 	ldw	r2,-40(fp)
    70a0:	1885883a 	add	r2,r3,r2
    70a4:	e0bff715 	stw	r2,-36(fp)
    70a8:	e0bff417 	ldw	r2,-48(fp)
    70ac:	100412ba 	roli	r2,r2,10
    70b0:	e0bff415 	stw	r2,-48(fp)
    GG(cc, dd, ee, aa, bb, X[13], 8);
    70b4:	e0fff417 	ldw	r3,-48(fp)
    70b8:	e0bff817 	ldw	r2,-32(fp)
    70bc:	1886f03a 	xor	r3,r3,r2
    70c0:	e0bff717 	ldw	r2,-36(fp)
    70c4:	1886703a 	and	r3,r3,r2
    70c8:	e0bff417 	ldw	r2,-48(fp)
    70cc:	1886f03a 	xor	r3,r3,r2
    70d0:	e0bfff17 	ldw	r2,-4(fp)
    70d4:	10800d04 	addi	r2,r2,52
    70d8:	10800017 	ldw	r2,0(r2)
    70dc:	1887883a 	add	r3,r3,r2
    70e0:	e0bff617 	ldw	r2,-40(fp)
    70e4:	1887883a 	add	r3,r3,r2
    70e8:	0096a0b4 	movhi	r2,23170
    70ec:	109e6644 	addi	r2,r2,31129
    70f0:	1885883a 	add	r2,r3,r2
    70f4:	e0bff615 	stw	r2,-40(fp)
    70f8:	e0bff617 	ldw	r2,-40(fp)
    70fc:	1006123a 	roli	r3,r2,8
    7100:	e0bff517 	ldw	r2,-44(fp)
    7104:	1885883a 	add	r2,r3,r2
    7108:	e0bff615 	stw	r2,-40(fp)
    710c:	e0bff817 	ldw	r2,-32(fp)
    7110:	100412ba 	roli	r2,r2,10
    7114:	e0bff815 	stw	r2,-32(fp)
    GG(bb, cc, dd, ee, aa, X[1], 13);
    7118:	e0fff817 	ldw	r3,-32(fp)
    711c:	e0bff717 	ldw	r2,-36(fp)
    7120:	1886f03a 	xor	r3,r3,r2
    7124:	e0bff617 	ldw	r2,-40(fp)
    7128:	1886703a 	and	r3,r3,r2
    712c:	e0bff817 	ldw	r2,-32(fp)
    7130:	1886f03a 	xor	r3,r3,r2
    7134:	e0bfff17 	ldw	r2,-4(fp)
    7138:	10800104 	addi	r2,r2,4
    713c:	10800017 	ldw	r2,0(r2)
    7140:	1887883a 	add	r3,r3,r2
    7144:	e0bff517 	ldw	r2,-44(fp)
    7148:	1887883a 	add	r3,r3,r2
    714c:	0096a0b4 	movhi	r2,23170
    7150:	109e6644 	addi	r2,r2,31129
    7154:	1885883a 	add	r2,r3,r2
    7158:	e0bff515 	stw	r2,-44(fp)
    715c:	e0bff517 	ldw	r2,-44(fp)
    7160:	1006137a 	roli	r3,r2,13
    7164:	e0bff417 	ldw	r2,-48(fp)
    7168:	1885883a 	add	r2,r3,r2
    716c:	e0bff515 	stw	r2,-44(fp)
    7170:	e0bff717 	ldw	r2,-36(fp)
    7174:	100412ba 	roli	r2,r2,10
    7178:	e0bff715 	stw	r2,-36(fp)
    GG(aa, bb, cc, dd, ee, X[10], 11);
    717c:	e0fff717 	ldw	r3,-36(fp)
    7180:	e0bff617 	ldw	r2,-40(fp)
    7184:	1886f03a 	xor	r3,r3,r2
    7188:	e0bff517 	ldw	r2,-44(fp)
    718c:	1886703a 	and	r3,r3,r2
    7190:	e0bff717 	ldw	r2,-36(fp)
    7194:	1886f03a 	xor	r3,r3,r2
    7198:	e0bfff17 	ldw	r2,-4(fp)
    719c:	10800a04 	addi	r2,r2,40
    71a0:	10800017 	ldw	r2,0(r2)
    71a4:	1887883a 	add	r3,r3,r2
    71a8:	e0bff417 	ldw	r2,-48(fp)
    71ac:	1887883a 	add	r3,r3,r2
    71b0:	0096a0b4 	movhi	r2,23170
    71b4:	109e6644 	addi	r2,r2,31129
    71b8:	1885883a 	add	r2,r3,r2
    71bc:	e0bff415 	stw	r2,-48(fp)
    71c0:	e0bff417 	ldw	r2,-48(fp)
    71c4:	100612fa 	roli	r3,r2,11
    71c8:	e0bff817 	ldw	r2,-32(fp)
    71cc:	1885883a 	add	r2,r3,r2
    71d0:	e0bff415 	stw	r2,-48(fp)
    71d4:	e0bff617 	ldw	r2,-40(fp)
    71d8:	100412ba 	roli	r2,r2,10
    71dc:	e0bff615 	stw	r2,-40(fp)
    GG(ee, aa, bb, cc, dd, X[6], 9);
    71e0:	e0fff617 	ldw	r3,-40(fp)
    71e4:	e0bff517 	ldw	r2,-44(fp)
    71e8:	1886f03a 	xor	r3,r3,r2
    71ec:	e0bff417 	ldw	r2,-48(fp)
    71f0:	1886703a 	and	r3,r3,r2
    71f4:	e0bff617 	ldw	r2,-40(fp)
    71f8:	1886f03a 	xor	r3,r3,r2
    71fc:	e0bfff17 	ldw	r2,-4(fp)
    7200:	10800604 	addi	r2,r2,24
    7204:	10800017 	ldw	r2,0(r2)
    7208:	1887883a 	add	r3,r3,r2
    720c:	e0bff817 	ldw	r2,-32(fp)
    7210:	1887883a 	add	r3,r3,r2
    7214:	0096a0b4 	movhi	r2,23170
    7218:	109e6644 	addi	r2,r2,31129
    721c:	1885883a 	add	r2,r3,r2
    7220:	e0bff815 	stw	r2,-32(fp)
    7224:	e0bff817 	ldw	r2,-32(fp)
    7228:	1006127a 	roli	r3,r2,9
    722c:	e0bff717 	ldw	r2,-36(fp)
    7230:	1885883a 	add	r2,r3,r2
    7234:	e0bff815 	stw	r2,-32(fp)
    7238:	e0bff517 	ldw	r2,-44(fp)
    723c:	100412ba 	roli	r2,r2,10
    7240:	e0bff515 	stw	r2,-44(fp)
    GG(dd, ee, aa, bb, cc, X[15], 7);
    7244:	e0fff517 	ldw	r3,-44(fp)
    7248:	e0bff417 	ldw	r2,-48(fp)
    724c:	1886f03a 	xor	r3,r3,r2
    7250:	e0bff817 	ldw	r2,-32(fp)
    7254:	1886703a 	and	r3,r3,r2
    7258:	e0bff517 	ldw	r2,-44(fp)
    725c:	1886f03a 	xor	r3,r3,r2
    7260:	e0bfff17 	ldw	r2,-4(fp)
    7264:	10800f04 	addi	r2,r2,60
    7268:	10800017 	ldw	r2,0(r2)
    726c:	1887883a 	add	r3,r3,r2
    7270:	e0bff717 	ldw	r2,-36(fp)
    7274:	1887883a 	add	r3,r3,r2
    7278:	0096a0b4 	movhi	r2,23170
    727c:	109e6644 	addi	r2,r2,31129
    7280:	1885883a 	add	r2,r3,r2
    7284:	e0bff715 	stw	r2,-36(fp)
    7288:	e0bff717 	ldw	r2,-36(fp)
    728c:	100611fa 	roli	r3,r2,7
    7290:	e0bff617 	ldw	r2,-40(fp)
    7294:	1885883a 	add	r2,r3,r2
    7298:	e0bff715 	stw	r2,-36(fp)
    729c:	e0bff417 	ldw	r2,-48(fp)
    72a0:	100412ba 	roli	r2,r2,10
    72a4:	e0bff415 	stw	r2,-48(fp)
    GG(cc, dd, ee, aa, bb, X[3], 15);
    72a8:	e0fff417 	ldw	r3,-48(fp)
    72ac:	e0bff817 	ldw	r2,-32(fp)
    72b0:	1886f03a 	xor	r3,r3,r2
    72b4:	e0bff717 	ldw	r2,-36(fp)
    72b8:	1886703a 	and	r3,r3,r2
    72bc:	e0bff417 	ldw	r2,-48(fp)
    72c0:	1886f03a 	xor	r3,r3,r2
    72c4:	e0bfff17 	ldw	r2,-4(fp)
    72c8:	10800304 	addi	r2,r2,12
    72cc:	10800017 	ldw	r2,0(r2)
    72d0:	1887883a 	add	r3,r3,r2
    72d4:	e0bff617 	ldw	r2,-40(fp)
    72d8:	1887883a 	add	r3,r3,r2
    72dc:	0096a0b4 	movhi	r2,23170
    72e0:	109e6644 	addi	r2,r2,31129
    72e4:	1885883a 	add	r2,r3,r2
    72e8:	e0bff615 	stw	r2,-40(fp)
    72ec:	e0bff617 	ldw	r2,-40(fp)
    72f0:	100613fa 	roli	r3,r2,15
    72f4:	e0bff517 	ldw	r2,-44(fp)
    72f8:	1885883a 	add	r2,r3,r2
    72fc:	e0bff615 	stw	r2,-40(fp)
    7300:	e0bff817 	ldw	r2,-32(fp)
    7304:	100412ba 	roli	r2,r2,10
    7308:	e0bff815 	stw	r2,-32(fp)
    GG(bb, cc, dd, ee, aa, X[12], 7);
    730c:	e0fff817 	ldw	r3,-32(fp)
    7310:	e0bff717 	ldw	r2,-36(fp)
    7314:	1886f03a 	xor	r3,r3,r2
    7318:	e0bff617 	ldw	r2,-40(fp)
    731c:	1886703a 	and	r3,r3,r2
    7320:	e0bff817 	ldw	r2,-32(fp)
    7324:	1886f03a 	xor	r3,r3,r2
    7328:	e0bfff17 	ldw	r2,-4(fp)
    732c:	10800c04 	addi	r2,r2,48
    7330:	10800017 	ldw	r2,0(r2)
    7334:	1887883a 	add	r3,r3,r2
    7338:	e0bff517 	ldw	r2,-44(fp)
    733c:	1887883a 	add	r3,r3,r2
    7340:	0096a0b4 	movhi	r2,23170
    7344:	109e6644 	addi	r2,r2,31129
    7348:	1885883a 	add	r2,r3,r2
    734c:	e0bff515 	stw	r2,-44(fp)
    7350:	e0bff517 	ldw	r2,-44(fp)
    7354:	100611fa 	roli	r3,r2,7
    7358:	e0bff417 	ldw	r2,-48(fp)
    735c:	1885883a 	add	r2,r3,r2
    7360:	e0bff515 	stw	r2,-44(fp)
    7364:	e0bff717 	ldw	r2,-36(fp)
    7368:	100412ba 	roli	r2,r2,10
    736c:	e0bff715 	stw	r2,-36(fp)
    GG(aa, bb, cc, dd, ee, X[0], 12);
    7370:	e0fff717 	ldw	r3,-36(fp)
    7374:	e0bff617 	ldw	r2,-40(fp)
    7378:	1886f03a 	xor	r3,r3,r2
    737c:	e0bff517 	ldw	r2,-44(fp)
    7380:	1886703a 	and	r3,r3,r2
    7384:	e0bff717 	ldw	r2,-36(fp)
    7388:	1886f03a 	xor	r3,r3,r2
    738c:	e0bfff17 	ldw	r2,-4(fp)
    7390:	10800017 	ldw	r2,0(r2)
    7394:	1887883a 	add	r3,r3,r2
    7398:	e0bff417 	ldw	r2,-48(fp)
    739c:	1887883a 	add	r3,r3,r2
    73a0:	0096a0b4 	movhi	r2,23170
    73a4:	109e6644 	addi	r2,r2,31129
    73a8:	1885883a 	add	r2,r3,r2
    73ac:	e0bff415 	stw	r2,-48(fp)
    73b0:	e0bff417 	ldw	r2,-48(fp)
    73b4:	1006133a 	roli	r3,r2,12
    73b8:	e0bff817 	ldw	r2,-32(fp)
    73bc:	1885883a 	add	r2,r3,r2
    73c0:	e0bff415 	stw	r2,-48(fp)
    73c4:	e0bff617 	ldw	r2,-40(fp)
    73c8:	100412ba 	roli	r2,r2,10
    73cc:	e0bff615 	stw	r2,-40(fp)
    GG(ee, aa, bb, cc, dd, X[9], 15);
    73d0:	e0fff617 	ldw	r3,-40(fp)
    73d4:	e0bff517 	ldw	r2,-44(fp)
    73d8:	1886f03a 	xor	r3,r3,r2
    73dc:	e0bff417 	ldw	r2,-48(fp)
    73e0:	1886703a 	and	r3,r3,r2
    73e4:	e0bff617 	ldw	r2,-40(fp)
    73e8:	1886f03a 	xor	r3,r3,r2
    73ec:	e0bfff17 	ldw	r2,-4(fp)
    73f0:	10800904 	addi	r2,r2,36
    73f4:	10800017 	ldw	r2,0(r2)
    73f8:	1887883a 	add	r3,r3,r2
    73fc:	e0bff817 	ldw	r2,-32(fp)
    7400:	1887883a 	add	r3,r3,r2
    7404:	0096a0b4 	movhi	r2,23170
    7408:	109e6644 	addi	r2,r2,31129
    740c:	1885883a 	add	r2,r3,r2
    7410:	e0bff815 	stw	r2,-32(fp)
    7414:	e0bff817 	ldw	r2,-32(fp)
    7418:	100613fa 	roli	r3,r2,15
    741c:	e0bff717 	ldw	r2,-36(fp)
    7420:	1885883a 	add	r2,r3,r2
    7424:	e0bff815 	stw	r2,-32(fp)
    7428:	e0bff517 	ldw	r2,-44(fp)
    742c:	100412ba 	roli	r2,r2,10
    7430:	e0bff515 	stw	r2,-44(fp)
    GG(dd, ee, aa, bb, cc, X[5], 9);
    7434:	e0fff517 	ldw	r3,-44(fp)
    7438:	e0bff417 	ldw	r2,-48(fp)
    743c:	1886f03a 	xor	r3,r3,r2
    7440:	e0bff817 	ldw	r2,-32(fp)
    7444:	1886703a 	and	r3,r3,r2
    7448:	e0bff517 	ldw	r2,-44(fp)
    744c:	1886f03a 	xor	r3,r3,r2
    7450:	e0bfff17 	ldw	r2,-4(fp)
    7454:	10800504 	addi	r2,r2,20
    7458:	10800017 	ldw	r2,0(r2)
    745c:	1887883a 	add	r3,r3,r2
    7460:	e0bff717 	ldw	r2,-36(fp)
    7464:	1887883a 	add	r3,r3,r2
    7468:	0096a0b4 	movhi	r2,23170
    746c:	109e6644 	addi	r2,r2,31129
    7470:	1885883a 	add	r2,r3,r2
    7474:	e0bff715 	stw	r2,-36(fp)
    7478:	e0bff717 	ldw	r2,-36(fp)
    747c:	1006127a 	roli	r3,r2,9
    7480:	e0bff617 	ldw	r2,-40(fp)
    7484:	1885883a 	add	r2,r3,r2
    7488:	e0bff715 	stw	r2,-36(fp)
    748c:	e0bff417 	ldw	r2,-48(fp)
    7490:	100412ba 	roli	r2,r2,10
    7494:	e0bff415 	stw	r2,-48(fp)
    GG(cc, dd, ee, aa, bb, X[2], 11);
    7498:	e0fff417 	ldw	r3,-48(fp)
    749c:	e0bff817 	ldw	r2,-32(fp)
    74a0:	1886f03a 	xor	r3,r3,r2
    74a4:	e0bff717 	ldw	r2,-36(fp)
    74a8:	1886703a 	and	r3,r3,r2
    74ac:	e0bff417 	ldw	r2,-48(fp)
    74b0:	1886f03a 	xor	r3,r3,r2
    74b4:	e0bfff17 	ldw	r2,-4(fp)
    74b8:	10800204 	addi	r2,r2,8
    74bc:	10800017 	ldw	r2,0(r2)
    74c0:	1887883a 	add	r3,r3,r2
    74c4:	e0bff617 	ldw	r2,-40(fp)
    74c8:	1887883a 	add	r3,r3,r2
    74cc:	0096a0b4 	movhi	r2,23170
    74d0:	109e6644 	addi	r2,r2,31129
    74d4:	1885883a 	add	r2,r3,r2
    74d8:	e0bff615 	stw	r2,-40(fp)
    74dc:	e0bff617 	ldw	r2,-40(fp)
    74e0:	100612fa 	roli	r3,r2,11
    74e4:	e0bff517 	ldw	r2,-44(fp)
    74e8:	1885883a 	add	r2,r3,r2
    74ec:	e0bff615 	stw	r2,-40(fp)
    74f0:	e0bff817 	ldw	r2,-32(fp)
    74f4:	100412ba 	roli	r2,r2,10
    74f8:	e0bff815 	stw	r2,-32(fp)
    GG(bb, cc, dd, ee, aa, X[14], 7);
    74fc:	e0fff817 	ldw	r3,-32(fp)
    7500:	e0bff717 	ldw	r2,-36(fp)
    7504:	1886f03a 	xor	r3,r3,r2
    7508:	e0bff617 	ldw	r2,-40(fp)
    750c:	1886703a 	and	r3,r3,r2
    7510:	e0bff817 	ldw	r2,-32(fp)
    7514:	1886f03a 	xor	r3,r3,r2
    7518:	e0bfff17 	ldw	r2,-4(fp)
    751c:	10800e04 	addi	r2,r2,56
    7520:	10800017 	ldw	r2,0(r2)
    7524:	1887883a 	add	r3,r3,r2
    7528:	e0bff517 	ldw	r2,-44(fp)
    752c:	1887883a 	add	r3,r3,r2
    7530:	0096a0b4 	movhi	r2,23170
    7534:	109e6644 	addi	r2,r2,31129
    7538:	1885883a 	add	r2,r3,r2
    753c:	e0bff515 	stw	r2,-44(fp)
    7540:	e0bff517 	ldw	r2,-44(fp)
    7544:	100611fa 	roli	r3,r2,7
    7548:	e0bff417 	ldw	r2,-48(fp)
    754c:	1885883a 	add	r2,r3,r2
    7550:	e0bff515 	stw	r2,-44(fp)
    7554:	e0bff717 	ldw	r2,-36(fp)
    7558:	100412ba 	roli	r2,r2,10
    755c:	e0bff715 	stw	r2,-36(fp)
    GG(aa, bb, cc, dd, ee, X[11], 13);
    7560:	e0fff717 	ldw	r3,-36(fp)
    7564:	e0bff617 	ldw	r2,-40(fp)
    7568:	1886f03a 	xor	r3,r3,r2
    756c:	e0bff517 	ldw	r2,-44(fp)
    7570:	1886703a 	and	r3,r3,r2
    7574:	e0bff717 	ldw	r2,-36(fp)
    7578:	1886f03a 	xor	r3,r3,r2
    757c:	e0bfff17 	ldw	r2,-4(fp)
    7580:	10800b04 	addi	r2,r2,44
    7584:	10800017 	ldw	r2,0(r2)
    7588:	1887883a 	add	r3,r3,r2
    758c:	e0bff417 	ldw	r2,-48(fp)
    7590:	1887883a 	add	r3,r3,r2
    7594:	0096a0b4 	movhi	r2,23170
    7598:	109e6644 	addi	r2,r2,31129
    759c:	1885883a 	add	r2,r3,r2
    75a0:	e0bff415 	stw	r2,-48(fp)
    75a4:	e0bff417 	ldw	r2,-48(fp)
    75a8:	1006137a 	roli	r3,r2,13
    75ac:	e0bff817 	ldw	r2,-32(fp)
    75b0:	1885883a 	add	r2,r3,r2
    75b4:	e0bff415 	stw	r2,-48(fp)
    75b8:	e0bff617 	ldw	r2,-40(fp)
    75bc:	100412ba 	roli	r2,r2,10
    75c0:	e0bff615 	stw	r2,-40(fp)
    GG(ee, aa, bb, cc, dd, X[8], 12);
    75c4:	e0fff617 	ldw	r3,-40(fp)
    75c8:	e0bff517 	ldw	r2,-44(fp)
    75cc:	1886f03a 	xor	r3,r3,r2
    75d0:	e0bff417 	ldw	r2,-48(fp)
    75d4:	1886703a 	and	r3,r3,r2
    75d8:	e0bff617 	ldw	r2,-40(fp)
    75dc:	1886f03a 	xor	r3,r3,r2
    75e0:	e0bfff17 	ldw	r2,-4(fp)
    75e4:	10800804 	addi	r2,r2,32
    75e8:	10800017 	ldw	r2,0(r2)
    75ec:	1887883a 	add	r3,r3,r2
    75f0:	e0bff817 	ldw	r2,-32(fp)
    75f4:	1887883a 	add	r3,r3,r2
    75f8:	0096a0b4 	movhi	r2,23170
    75fc:	109e6644 	addi	r2,r2,31129
    7600:	1885883a 	add	r2,r3,r2
    7604:	e0bff815 	stw	r2,-32(fp)
    7608:	e0bff817 	ldw	r2,-32(fp)
    760c:	1006133a 	roli	r3,r2,12
    7610:	e0bff717 	ldw	r2,-36(fp)
    7614:	1885883a 	add	r2,r3,r2
    7618:	e0bff815 	stw	r2,-32(fp)
    761c:	e0bff517 	ldw	r2,-44(fp)
    7620:	100412ba 	roli	r2,r2,10
    7624:	e0bff515 	stw	r2,-44(fp)

    /* round 3 */
    HH(dd, ee, aa, bb, cc, X[3], 11);
    7628:	e0bff417 	ldw	r2,-48(fp)
    762c:	0086303a 	nor	r3,zero,r2
    7630:	e0bff817 	ldw	r2,-32(fp)
    7634:	1886b03a 	or	r3,r3,r2
    7638:	e0bff517 	ldw	r2,-44(fp)
    763c:	1886f03a 	xor	r3,r3,r2
    7640:	e0bfff17 	ldw	r2,-4(fp)
    7644:	10800304 	addi	r2,r2,12
    7648:	10800017 	ldw	r2,0(r2)
    764c:	1887883a 	add	r3,r3,r2
    7650:	e0bff717 	ldw	r2,-36(fp)
    7654:	1887883a 	add	r3,r3,r2
    7658:	009bb6b4 	movhi	r2,28378
    765c:	10bae844 	addi	r2,r2,-5215
    7660:	1885883a 	add	r2,r3,r2
    7664:	e0bff715 	stw	r2,-36(fp)
    7668:	e0bff717 	ldw	r2,-36(fp)
    766c:	100612fa 	roli	r3,r2,11
    7670:	e0bff617 	ldw	r2,-40(fp)
    7674:	1885883a 	add	r2,r3,r2
    7678:	e0bff715 	stw	r2,-36(fp)
    767c:	e0bff417 	ldw	r2,-48(fp)
    7680:	100412ba 	roli	r2,r2,10
    7684:	e0bff415 	stw	r2,-48(fp)
    HH(cc, dd, ee, aa, bb, X[10], 13);
    7688:	e0bff817 	ldw	r2,-32(fp)
    768c:	0086303a 	nor	r3,zero,r2
    7690:	e0bff717 	ldw	r2,-36(fp)
    7694:	1886b03a 	or	r3,r3,r2
    7698:	e0bff417 	ldw	r2,-48(fp)
    769c:	1886f03a 	xor	r3,r3,r2
    76a0:	e0bfff17 	ldw	r2,-4(fp)
    76a4:	10800a04 	addi	r2,r2,40
    76a8:	10800017 	ldw	r2,0(r2)
    76ac:	1887883a 	add	r3,r3,r2
    76b0:	e0bff617 	ldw	r2,-40(fp)
    76b4:	1887883a 	add	r3,r3,r2
    76b8:	009bb6b4 	movhi	r2,28378
    76bc:	10bae844 	addi	r2,r2,-5215
    76c0:	1885883a 	add	r2,r3,r2
    76c4:	e0bff615 	stw	r2,-40(fp)
    76c8:	e0bff617 	ldw	r2,-40(fp)
    76cc:	1006137a 	roli	r3,r2,13
    76d0:	e0bff517 	ldw	r2,-44(fp)
    76d4:	1885883a 	add	r2,r3,r2
    76d8:	e0bff615 	stw	r2,-40(fp)
    76dc:	e0bff817 	ldw	r2,-32(fp)
    76e0:	100412ba 	roli	r2,r2,10
    76e4:	e0bff815 	stw	r2,-32(fp)
    HH(bb, cc, dd, ee, aa, X[14], 6);
    76e8:	e0bff717 	ldw	r2,-36(fp)
    76ec:	0086303a 	nor	r3,zero,r2
    76f0:	e0bff617 	ldw	r2,-40(fp)
    76f4:	1886b03a 	or	r3,r3,r2
    76f8:	e0bff817 	ldw	r2,-32(fp)
    76fc:	1886f03a 	xor	r3,r3,r2
    7700:	e0bfff17 	ldw	r2,-4(fp)
    7704:	10800e04 	addi	r2,r2,56
    7708:	10800017 	ldw	r2,0(r2)
    770c:	1887883a 	add	r3,r3,r2
    7710:	e0bff517 	ldw	r2,-44(fp)
    7714:	1887883a 	add	r3,r3,r2
    7718:	009bb6b4 	movhi	r2,28378
    771c:	10bae844 	addi	r2,r2,-5215
    7720:	1885883a 	add	r2,r3,r2
    7724:	e0bff515 	stw	r2,-44(fp)
    7728:	e0bff517 	ldw	r2,-44(fp)
    772c:	100611ba 	roli	r3,r2,6
    7730:	e0bff417 	ldw	r2,-48(fp)
    7734:	1885883a 	add	r2,r3,r2
    7738:	e0bff515 	stw	r2,-44(fp)
    773c:	e0bff717 	ldw	r2,-36(fp)
    7740:	100412ba 	roli	r2,r2,10
    7744:	e0bff715 	stw	r2,-36(fp)
    HH(aa, bb, cc, dd, ee, X[4], 7);
    7748:	e0bff617 	ldw	r2,-40(fp)
    774c:	0086303a 	nor	r3,zero,r2
    7750:	e0bff517 	ldw	r2,-44(fp)
    7754:	1886b03a 	or	r3,r3,r2
    7758:	e0bff717 	ldw	r2,-36(fp)
    775c:	1886f03a 	xor	r3,r3,r2
    7760:	e0bfff17 	ldw	r2,-4(fp)
    7764:	10800404 	addi	r2,r2,16
    7768:	10800017 	ldw	r2,0(r2)
    776c:	1887883a 	add	r3,r3,r2
    7770:	e0bff417 	ldw	r2,-48(fp)
    7774:	1887883a 	add	r3,r3,r2
    7778:	009bb6b4 	movhi	r2,28378
    777c:	10bae844 	addi	r2,r2,-5215
    7780:	1885883a 	add	r2,r3,r2
    7784:	e0bff415 	stw	r2,-48(fp)
    7788:	e0bff417 	ldw	r2,-48(fp)
    778c:	100611fa 	roli	r3,r2,7
    7790:	e0bff817 	ldw	r2,-32(fp)
    7794:	1885883a 	add	r2,r3,r2
    7798:	e0bff415 	stw	r2,-48(fp)
    779c:	e0bff617 	ldw	r2,-40(fp)
    77a0:	100412ba 	roli	r2,r2,10
    77a4:	e0bff615 	stw	r2,-40(fp)
    HH(ee, aa, bb, cc, dd, X[9], 14);
    77a8:	e0bff517 	ldw	r2,-44(fp)
    77ac:	0086303a 	nor	r3,zero,r2
    77b0:	e0bff417 	ldw	r2,-48(fp)
    77b4:	1886b03a 	or	r3,r3,r2
    77b8:	e0bff617 	ldw	r2,-40(fp)
    77bc:	1886f03a 	xor	r3,r3,r2
    77c0:	e0bfff17 	ldw	r2,-4(fp)
    77c4:	10800904 	addi	r2,r2,36
    77c8:	10800017 	ldw	r2,0(r2)
    77cc:	1887883a 	add	r3,r3,r2
    77d0:	e0bff817 	ldw	r2,-32(fp)
    77d4:	1887883a 	add	r3,r3,r2
    77d8:	009bb6b4 	movhi	r2,28378
    77dc:	10bae844 	addi	r2,r2,-5215
    77e0:	1885883a 	add	r2,r3,r2
    77e4:	e0bff815 	stw	r2,-32(fp)
    77e8:	e0bff817 	ldw	r2,-32(fp)
    77ec:	100613ba 	roli	r3,r2,14
    77f0:	e0bff717 	ldw	r2,-36(fp)
    77f4:	1885883a 	add	r2,r3,r2
    77f8:	e0bff815 	stw	r2,-32(fp)
    77fc:	e0bff517 	ldw	r2,-44(fp)
    7800:	100412ba 	roli	r2,r2,10
    7804:	e0bff515 	stw	r2,-44(fp)
    HH(dd, ee, aa, bb, cc, X[15], 9);
    7808:	e0bff417 	ldw	r2,-48(fp)
    780c:	0086303a 	nor	r3,zero,r2
    7810:	e0bff817 	ldw	r2,-32(fp)
    7814:	1886b03a 	or	r3,r3,r2
    7818:	e0bff517 	ldw	r2,-44(fp)
    781c:	1886f03a 	xor	r3,r3,r2
    7820:	e0bfff17 	ldw	r2,-4(fp)
    7824:	10800f04 	addi	r2,r2,60
    7828:	10800017 	ldw	r2,0(r2)
    782c:	1887883a 	add	r3,r3,r2
    7830:	e0bff717 	ldw	r2,-36(fp)
    7834:	1887883a 	add	r3,r3,r2
    7838:	009bb6b4 	movhi	r2,28378
    783c:	10bae844 	addi	r2,r2,-5215
    7840:	1885883a 	add	r2,r3,r2
    7844:	e0bff715 	stw	r2,-36(fp)
    7848:	e0bff717 	ldw	r2,-36(fp)
    784c:	1006127a 	roli	r3,r2,9
    7850:	e0bff617 	ldw	r2,-40(fp)
    7854:	1885883a 	add	r2,r3,r2
    7858:	e0bff715 	stw	r2,-36(fp)
    785c:	e0bff417 	ldw	r2,-48(fp)
    7860:	100412ba 	roli	r2,r2,10
    7864:	e0bff415 	stw	r2,-48(fp)
    HH(cc, dd, ee, aa, bb, X[8], 13);
    7868:	e0bff817 	ldw	r2,-32(fp)
    786c:	0086303a 	nor	r3,zero,r2
    7870:	e0bff717 	ldw	r2,-36(fp)
    7874:	1886b03a 	or	r3,r3,r2
    7878:	e0bff417 	ldw	r2,-48(fp)
    787c:	1886f03a 	xor	r3,r3,r2
    7880:	e0bfff17 	ldw	r2,-4(fp)
    7884:	10800804 	addi	r2,r2,32
    7888:	10800017 	ldw	r2,0(r2)
    788c:	1887883a 	add	r3,r3,r2
    7890:	e0bff617 	ldw	r2,-40(fp)
    7894:	1887883a 	add	r3,r3,r2
    7898:	009bb6b4 	movhi	r2,28378
    789c:	10bae844 	addi	r2,r2,-5215
    78a0:	1885883a 	add	r2,r3,r2
    78a4:	e0bff615 	stw	r2,-40(fp)
    78a8:	e0bff617 	ldw	r2,-40(fp)
    78ac:	1006137a 	roli	r3,r2,13
    78b0:	e0bff517 	ldw	r2,-44(fp)
    78b4:	1885883a 	add	r2,r3,r2
    78b8:	e0bff615 	stw	r2,-40(fp)
    78bc:	e0bff817 	ldw	r2,-32(fp)
    78c0:	100412ba 	roli	r2,r2,10
    78c4:	e0bff815 	stw	r2,-32(fp)
    HH(bb, cc, dd, ee, aa, X[1], 15);
    78c8:	e0bff717 	ldw	r2,-36(fp)
    78cc:	0086303a 	nor	r3,zero,r2
    78d0:	e0bff617 	ldw	r2,-40(fp)
    78d4:	1886b03a 	or	r3,r3,r2
    78d8:	e0bff817 	ldw	r2,-32(fp)
    78dc:	1886f03a 	xor	r3,r3,r2
    78e0:	e0bfff17 	ldw	r2,-4(fp)
    78e4:	10800104 	addi	r2,r2,4
    78e8:	10800017 	ldw	r2,0(r2)
    78ec:	1887883a 	add	r3,r3,r2
    78f0:	e0bff517 	ldw	r2,-44(fp)
    78f4:	1887883a 	add	r3,r3,r2
    78f8:	009bb6b4 	movhi	r2,28378
    78fc:	10bae844 	addi	r2,r2,-5215
    7900:	1885883a 	add	r2,r3,r2
    7904:	e0bff515 	stw	r2,-44(fp)
    7908:	e0bff517 	ldw	r2,-44(fp)
    790c:	100613fa 	roli	r3,r2,15
    7910:	e0bff417 	ldw	r2,-48(fp)
    7914:	1885883a 	add	r2,r3,r2
    7918:	e0bff515 	stw	r2,-44(fp)
    791c:	e0bff717 	ldw	r2,-36(fp)
    7920:	100412ba 	roli	r2,r2,10
    7924:	e0bff715 	stw	r2,-36(fp)
    HH(aa, bb, cc, dd, ee, X[2], 14);
    7928:	e0bff617 	ldw	r2,-40(fp)
    792c:	0086303a 	nor	r3,zero,r2
    7930:	e0bff517 	ldw	r2,-44(fp)
    7934:	1886b03a 	or	r3,r3,r2
    7938:	e0bff717 	ldw	r2,-36(fp)
    793c:	1886f03a 	xor	r3,r3,r2
    7940:	e0bfff17 	ldw	r2,-4(fp)
    7944:	10800204 	addi	r2,r2,8
    7948:	10800017 	ldw	r2,0(r2)
    794c:	1887883a 	add	r3,r3,r2
    7950:	e0bff417 	ldw	r2,-48(fp)
    7954:	1887883a 	add	r3,r3,r2
    7958:	009bb6b4 	movhi	r2,28378
    795c:	10bae844 	addi	r2,r2,-5215
    7960:	1885883a 	add	r2,r3,r2
    7964:	e0bff415 	stw	r2,-48(fp)
    7968:	e0bff417 	ldw	r2,-48(fp)
    796c:	100613ba 	roli	r3,r2,14
    7970:	e0bff817 	ldw	r2,-32(fp)
    7974:	1885883a 	add	r2,r3,r2
    7978:	e0bff415 	stw	r2,-48(fp)
    797c:	e0bff617 	ldw	r2,-40(fp)
    7980:	100412ba 	roli	r2,r2,10
    7984:	e0bff615 	stw	r2,-40(fp)
    HH(ee, aa, bb, cc, dd, X[7], 8);
    7988:	e0bff517 	ldw	r2,-44(fp)
    798c:	0086303a 	nor	r3,zero,r2
    7990:	e0bff417 	ldw	r2,-48(fp)
    7994:	1886b03a 	or	r3,r3,r2
    7998:	e0bff617 	ldw	r2,-40(fp)
    799c:	1886f03a 	xor	r3,r3,r2
    79a0:	e0bfff17 	ldw	r2,-4(fp)
    79a4:	10800704 	addi	r2,r2,28
    79a8:	10800017 	ldw	r2,0(r2)
    79ac:	1887883a 	add	r3,r3,r2
    79b0:	e0bff817 	ldw	r2,-32(fp)
    79b4:	1887883a 	add	r3,r3,r2
    79b8:	009bb6b4 	movhi	r2,28378
    79bc:	10bae844 	addi	r2,r2,-5215
    79c0:	1885883a 	add	r2,r3,r2
    79c4:	e0bff815 	stw	r2,-32(fp)
    79c8:	e0bff817 	ldw	r2,-32(fp)
    79cc:	1006123a 	roli	r3,r2,8
    79d0:	e0bff717 	ldw	r2,-36(fp)
    79d4:	1885883a 	add	r2,r3,r2
    79d8:	e0bff815 	stw	r2,-32(fp)
    79dc:	e0bff517 	ldw	r2,-44(fp)
    79e0:	100412ba 	roli	r2,r2,10
    79e4:	e0bff515 	stw	r2,-44(fp)
    HH(dd, ee, aa, bb, cc, X[0], 13);
    79e8:	e0bff417 	ldw	r2,-48(fp)
    79ec:	0086303a 	nor	r3,zero,r2
    79f0:	e0bff817 	ldw	r2,-32(fp)
    79f4:	1886b03a 	or	r3,r3,r2
    79f8:	e0bff517 	ldw	r2,-44(fp)
    79fc:	1886f03a 	xor	r3,r3,r2
    7a00:	e0bfff17 	ldw	r2,-4(fp)
    7a04:	10800017 	ldw	r2,0(r2)
    7a08:	1887883a 	add	r3,r3,r2
    7a0c:	e0bff717 	ldw	r2,-36(fp)
    7a10:	1887883a 	add	r3,r3,r2
    7a14:	009bb6b4 	movhi	r2,28378
    7a18:	10bae844 	addi	r2,r2,-5215
    7a1c:	1885883a 	add	r2,r3,r2
    7a20:	e0bff715 	stw	r2,-36(fp)
    7a24:	e0bff717 	ldw	r2,-36(fp)
    7a28:	1006137a 	roli	r3,r2,13
    7a2c:	e0bff617 	ldw	r2,-40(fp)
    7a30:	1885883a 	add	r2,r3,r2
    7a34:	e0bff715 	stw	r2,-36(fp)
    7a38:	e0bff417 	ldw	r2,-48(fp)
    7a3c:	100412ba 	roli	r2,r2,10
    7a40:	e0bff415 	stw	r2,-48(fp)
    HH(cc, dd, ee, aa, bb, X[6], 6);
    7a44:	e0bff817 	ldw	r2,-32(fp)
    7a48:	0086303a 	nor	r3,zero,r2
    7a4c:	e0bff717 	ldw	r2,-36(fp)
    7a50:	1886b03a 	or	r3,r3,r2
    7a54:	e0bff417 	ldw	r2,-48(fp)
    7a58:	1886f03a 	xor	r3,r3,r2
    7a5c:	e0bfff17 	ldw	r2,-4(fp)
    7a60:	10800604 	addi	r2,r2,24
    7a64:	10800017 	ldw	r2,0(r2)
    7a68:	1887883a 	add	r3,r3,r2
    7a6c:	e0bff617 	ldw	r2,-40(fp)
    7a70:	1887883a 	add	r3,r3,r2
    7a74:	009bb6b4 	movhi	r2,28378
    7a78:	10bae844 	addi	r2,r2,-5215
    7a7c:	1885883a 	add	r2,r3,r2
    7a80:	e0bff615 	stw	r2,-40(fp)
    7a84:	e0bff617 	ldw	r2,-40(fp)
    7a88:	100611ba 	roli	r3,r2,6
    7a8c:	e0bff517 	ldw	r2,-44(fp)
    7a90:	1885883a 	add	r2,r3,r2
    7a94:	e0bff615 	stw	r2,-40(fp)
    7a98:	e0bff817 	ldw	r2,-32(fp)
    7a9c:	100412ba 	roli	r2,r2,10
    7aa0:	e0bff815 	stw	r2,-32(fp)
    HH(bb, cc, dd, ee, aa, X[13], 5);
    7aa4:	e0bff717 	ldw	r2,-36(fp)
    7aa8:	0086303a 	nor	r3,zero,r2
    7aac:	e0bff617 	ldw	r2,-40(fp)
    7ab0:	1886b03a 	or	r3,r3,r2
    7ab4:	e0bff817 	ldw	r2,-32(fp)
    7ab8:	1886f03a 	xor	r3,r3,r2
    7abc:	e0bfff17 	ldw	r2,-4(fp)
    7ac0:	10800d04 	addi	r2,r2,52
    7ac4:	10800017 	ldw	r2,0(r2)
    7ac8:	1887883a 	add	r3,r3,r2
    7acc:	e0bff517 	ldw	r2,-44(fp)
    7ad0:	1887883a 	add	r3,r3,r2
    7ad4:	009bb6b4 	movhi	r2,28378
    7ad8:	10bae844 	addi	r2,r2,-5215
    7adc:	1885883a 	add	r2,r3,r2
    7ae0:	e0bff515 	stw	r2,-44(fp)
    7ae4:	e0bff517 	ldw	r2,-44(fp)
    7ae8:	1006117a 	roli	r3,r2,5
    7aec:	e0bff417 	ldw	r2,-48(fp)
    7af0:	1885883a 	add	r2,r3,r2
    7af4:	e0bff515 	stw	r2,-44(fp)
    7af8:	e0bff717 	ldw	r2,-36(fp)
    7afc:	100412ba 	roli	r2,r2,10
    7b00:	e0bff715 	stw	r2,-36(fp)
    HH(aa, bb, cc, dd, ee, X[11], 12);
    7b04:	e0bff617 	ldw	r2,-40(fp)
    7b08:	0086303a 	nor	r3,zero,r2
    7b0c:	e0bff517 	ldw	r2,-44(fp)
    7b10:	1886b03a 	or	r3,r3,r2
    7b14:	e0bff717 	ldw	r2,-36(fp)
    7b18:	1886f03a 	xor	r3,r3,r2
    7b1c:	e0bfff17 	ldw	r2,-4(fp)
    7b20:	10800b04 	addi	r2,r2,44
    7b24:	10800017 	ldw	r2,0(r2)
    7b28:	1887883a 	add	r3,r3,r2
    7b2c:	e0bff417 	ldw	r2,-48(fp)
    7b30:	1887883a 	add	r3,r3,r2
    7b34:	009bb6b4 	movhi	r2,28378
    7b38:	10bae844 	addi	r2,r2,-5215
    7b3c:	1885883a 	add	r2,r3,r2
    7b40:	e0bff415 	stw	r2,-48(fp)
    7b44:	e0bff417 	ldw	r2,-48(fp)
    7b48:	1006133a 	roli	r3,r2,12
    7b4c:	e0bff817 	ldw	r2,-32(fp)
    7b50:	1885883a 	add	r2,r3,r2
    7b54:	e0bff415 	stw	r2,-48(fp)
    7b58:	e0bff617 	ldw	r2,-40(fp)
    7b5c:	100412ba 	roli	r2,r2,10
    7b60:	e0bff615 	stw	r2,-40(fp)
    HH(ee, aa, bb, cc, dd, X[5], 7);
    7b64:	e0bff517 	ldw	r2,-44(fp)
    7b68:	0086303a 	nor	r3,zero,r2
    7b6c:	e0bff417 	ldw	r2,-48(fp)
    7b70:	1886b03a 	or	r3,r3,r2
    7b74:	e0bff617 	ldw	r2,-40(fp)
    7b78:	1886f03a 	xor	r3,r3,r2
    7b7c:	e0bfff17 	ldw	r2,-4(fp)
    7b80:	10800504 	addi	r2,r2,20
    7b84:	10800017 	ldw	r2,0(r2)
    7b88:	1887883a 	add	r3,r3,r2
    7b8c:	e0bff817 	ldw	r2,-32(fp)
    7b90:	1887883a 	add	r3,r3,r2
    7b94:	009bb6b4 	movhi	r2,28378
    7b98:	10bae844 	addi	r2,r2,-5215
    7b9c:	1885883a 	add	r2,r3,r2
    7ba0:	e0bff815 	stw	r2,-32(fp)
    7ba4:	e0bff817 	ldw	r2,-32(fp)
    7ba8:	100611fa 	roli	r3,r2,7
    7bac:	e0bff717 	ldw	r2,-36(fp)
    7bb0:	1885883a 	add	r2,r3,r2
    7bb4:	e0bff815 	stw	r2,-32(fp)
    7bb8:	e0bff517 	ldw	r2,-44(fp)
    7bbc:	100412ba 	roli	r2,r2,10
    7bc0:	e0bff515 	stw	r2,-44(fp)
    HH(dd, ee, aa, bb, cc, X[12], 5);
    7bc4:	e0bff417 	ldw	r2,-48(fp)
    7bc8:	0086303a 	nor	r3,zero,r2
    7bcc:	e0bff817 	ldw	r2,-32(fp)
    7bd0:	1886b03a 	or	r3,r3,r2
    7bd4:	e0bff517 	ldw	r2,-44(fp)
    7bd8:	1886f03a 	xor	r3,r3,r2
    7bdc:	e0bfff17 	ldw	r2,-4(fp)
    7be0:	10800c04 	addi	r2,r2,48
    7be4:	10800017 	ldw	r2,0(r2)
    7be8:	1887883a 	add	r3,r3,r2
    7bec:	e0bff717 	ldw	r2,-36(fp)
    7bf0:	1887883a 	add	r3,r3,r2
    7bf4:	009bb6b4 	movhi	r2,28378
    7bf8:	10bae844 	addi	r2,r2,-5215
    7bfc:	1885883a 	add	r2,r3,r2
    7c00:	e0bff715 	stw	r2,-36(fp)
    7c04:	e0bff717 	ldw	r2,-36(fp)
    7c08:	1006117a 	roli	r3,r2,5
    7c0c:	e0bff617 	ldw	r2,-40(fp)
    7c10:	1885883a 	add	r2,r3,r2
    7c14:	e0bff715 	stw	r2,-36(fp)
    7c18:	e0bff417 	ldw	r2,-48(fp)
    7c1c:	100412ba 	roli	r2,r2,10
    7c20:	e0bff415 	stw	r2,-48(fp)

    /* round 4 */
    II(cc, dd, ee, aa, bb, X[1], 11);
    7c24:	e0fff817 	ldw	r3,-32(fp)
    7c28:	e0bff717 	ldw	r2,-36(fp)
    7c2c:	1886f03a 	xor	r3,r3,r2
    7c30:	e0bff417 	ldw	r2,-48(fp)
    7c34:	1886703a 	and	r3,r3,r2
    7c38:	e0bff817 	ldw	r2,-32(fp)
    7c3c:	1886f03a 	xor	r3,r3,r2
    7c40:	e0bfff17 	ldw	r2,-4(fp)
    7c44:	10800104 	addi	r2,r2,4
    7c48:	10800017 	ldw	r2,0(r2)
    7c4c:	1887883a 	add	r3,r3,r2
    7c50:	e0bff617 	ldw	r2,-40(fp)
    7c54:	1887883a 	add	r3,r3,r2
    7c58:	00a3c734 	movhi	r2,36636
    7c5c:	10af3704 	addi	r2,r2,-17188
    7c60:	1885883a 	add	r2,r3,r2
    7c64:	e0bff615 	stw	r2,-40(fp)
    7c68:	e0bff617 	ldw	r2,-40(fp)
    7c6c:	100612fa 	roli	r3,r2,11
    7c70:	e0bff517 	ldw	r2,-44(fp)
    7c74:	1885883a 	add	r2,r3,r2
    7c78:	e0bff615 	stw	r2,-40(fp)
    7c7c:	e0bff817 	ldw	r2,-32(fp)
    7c80:	100412ba 	roli	r2,r2,10
    7c84:	e0bff815 	stw	r2,-32(fp)
    II(bb, cc, dd, ee, aa, X[9], 12);
    7c88:	e0fff717 	ldw	r3,-36(fp)
    7c8c:	e0bff617 	ldw	r2,-40(fp)
    7c90:	1886f03a 	xor	r3,r3,r2
    7c94:	e0bff817 	ldw	r2,-32(fp)
    7c98:	1886703a 	and	r3,r3,r2
    7c9c:	e0bff717 	ldw	r2,-36(fp)
    7ca0:	1886f03a 	xor	r3,r3,r2
    7ca4:	e0bfff17 	ldw	r2,-4(fp)
    7ca8:	10800904 	addi	r2,r2,36
    7cac:	10800017 	ldw	r2,0(r2)
    7cb0:	1887883a 	add	r3,r3,r2
    7cb4:	e0bff517 	ldw	r2,-44(fp)
    7cb8:	1887883a 	add	r3,r3,r2
    7cbc:	00a3c734 	movhi	r2,36636
    7cc0:	10af3704 	addi	r2,r2,-17188
    7cc4:	1885883a 	add	r2,r3,r2
    7cc8:	e0bff515 	stw	r2,-44(fp)
    7ccc:	e0bff517 	ldw	r2,-44(fp)
    7cd0:	1006133a 	roli	r3,r2,12
    7cd4:	e0bff417 	ldw	r2,-48(fp)
    7cd8:	1885883a 	add	r2,r3,r2
    7cdc:	e0bff515 	stw	r2,-44(fp)
    7ce0:	e0bff717 	ldw	r2,-36(fp)
    7ce4:	100412ba 	roli	r2,r2,10
    7ce8:	e0bff715 	stw	r2,-36(fp)
    II(aa, bb, cc, dd, ee, X[11], 14);
    7cec:	e0fff617 	ldw	r3,-40(fp)
    7cf0:	e0bff517 	ldw	r2,-44(fp)
    7cf4:	1886f03a 	xor	r3,r3,r2
    7cf8:	e0bff717 	ldw	r2,-36(fp)
    7cfc:	1886703a 	and	r3,r3,r2
    7d00:	e0bff617 	ldw	r2,-40(fp)
    7d04:	1886f03a 	xor	r3,r3,r2
    7d08:	e0bfff17 	ldw	r2,-4(fp)
    7d0c:	10800b04 	addi	r2,r2,44
    7d10:	10800017 	ldw	r2,0(r2)
    7d14:	1887883a 	add	r3,r3,r2
    7d18:	e0bff417 	ldw	r2,-48(fp)
    7d1c:	1887883a 	add	r3,r3,r2
    7d20:	00a3c734 	movhi	r2,36636
    7d24:	10af3704 	addi	r2,r2,-17188
    7d28:	1885883a 	add	r2,r3,r2
    7d2c:	e0bff415 	stw	r2,-48(fp)
    7d30:	e0bff417 	ldw	r2,-48(fp)
    7d34:	100613ba 	roli	r3,r2,14
    7d38:	e0bff817 	ldw	r2,-32(fp)
    7d3c:	1885883a 	add	r2,r3,r2
    7d40:	e0bff415 	stw	r2,-48(fp)
    7d44:	e0bff617 	ldw	r2,-40(fp)
    7d48:	100412ba 	roli	r2,r2,10
    7d4c:	e0bff615 	stw	r2,-40(fp)
    II(ee, aa, bb, cc, dd, X[10], 15);
    7d50:	e0fff517 	ldw	r3,-44(fp)
    7d54:	e0bff417 	ldw	r2,-48(fp)
    7d58:	1886f03a 	xor	r3,r3,r2
    7d5c:	e0bff617 	ldw	r2,-40(fp)
    7d60:	1886703a 	and	r3,r3,r2
    7d64:	e0bff517 	ldw	r2,-44(fp)
    7d68:	1886f03a 	xor	r3,r3,r2
    7d6c:	e0bfff17 	ldw	r2,-4(fp)
    7d70:	10800a04 	addi	r2,r2,40
    7d74:	10800017 	ldw	r2,0(r2)
    7d78:	1887883a 	add	r3,r3,r2
    7d7c:	e0bff817 	ldw	r2,-32(fp)
    7d80:	1887883a 	add	r3,r3,r2
    7d84:	00a3c734 	movhi	r2,36636
    7d88:	10af3704 	addi	r2,r2,-17188
    7d8c:	1885883a 	add	r2,r3,r2
    7d90:	e0bff815 	stw	r2,-32(fp)
    7d94:	e0bff817 	ldw	r2,-32(fp)
    7d98:	100613fa 	roli	r3,r2,15
    7d9c:	e0bff717 	ldw	r2,-36(fp)
    7da0:	1885883a 	add	r2,r3,r2
    7da4:	e0bff815 	stw	r2,-32(fp)
    7da8:	e0bff517 	ldw	r2,-44(fp)
    7dac:	100412ba 	roli	r2,r2,10
    7db0:	e0bff515 	stw	r2,-44(fp)
    II(dd, ee, aa, bb, cc, X[0], 14);
    7db4:	e0fff417 	ldw	r3,-48(fp)
    7db8:	e0bff817 	ldw	r2,-32(fp)
    7dbc:	1886f03a 	xor	r3,r3,r2
    7dc0:	e0bff517 	ldw	r2,-44(fp)
    7dc4:	1886703a 	and	r3,r3,r2
    7dc8:	e0bff417 	ldw	r2,-48(fp)
    7dcc:	1886f03a 	xor	r3,r3,r2
    7dd0:	e0bfff17 	ldw	r2,-4(fp)
    7dd4:	10800017 	ldw	r2,0(r2)
    7dd8:	1887883a 	add	r3,r3,r2
    7ddc:	e0bff717 	ldw	r2,-36(fp)
    7de0:	1887883a 	add	r3,r3,r2
    7de4:	00a3c734 	movhi	r2,36636
    7de8:	10af3704 	addi	r2,r2,-17188
    7dec:	1885883a 	add	r2,r3,r2
    7df0:	e0bff715 	stw	r2,-36(fp)
    7df4:	e0bff717 	ldw	r2,-36(fp)
    7df8:	100613ba 	roli	r3,r2,14
    7dfc:	e0bff617 	ldw	r2,-40(fp)
    7e00:	1885883a 	add	r2,r3,r2
    7e04:	e0bff715 	stw	r2,-36(fp)
    7e08:	e0bff417 	ldw	r2,-48(fp)
    7e0c:	100412ba 	roli	r2,r2,10
    7e10:	e0bff415 	stw	r2,-48(fp)
    II(cc, dd, ee, aa, bb, X[8], 15);
    7e14:	e0fff817 	ldw	r3,-32(fp)
    7e18:	e0bff717 	ldw	r2,-36(fp)
    7e1c:	1886f03a 	xor	r3,r3,r2
    7e20:	e0bff417 	ldw	r2,-48(fp)
    7e24:	1886703a 	and	r3,r3,r2
    7e28:	e0bff817 	ldw	r2,-32(fp)
    7e2c:	1886f03a 	xor	r3,r3,r2
    7e30:	e0bfff17 	ldw	r2,-4(fp)
    7e34:	10800804 	addi	r2,r2,32
    7e38:	10800017 	ldw	r2,0(r2)
    7e3c:	1887883a 	add	r3,r3,r2
    7e40:	e0bff617 	ldw	r2,-40(fp)
    7e44:	1887883a 	add	r3,r3,r2
    7e48:	00a3c734 	movhi	r2,36636
    7e4c:	10af3704 	addi	r2,r2,-17188
    7e50:	1885883a 	add	r2,r3,r2
    7e54:	e0bff615 	stw	r2,-40(fp)
    7e58:	e0bff617 	ldw	r2,-40(fp)
    7e5c:	100613fa 	roli	r3,r2,15
    7e60:	e0bff517 	ldw	r2,-44(fp)
    7e64:	1885883a 	add	r2,r3,r2
    7e68:	e0bff615 	stw	r2,-40(fp)
    7e6c:	e0bff817 	ldw	r2,-32(fp)
    7e70:	100412ba 	roli	r2,r2,10
    7e74:	e0bff815 	stw	r2,-32(fp)
    II(bb, cc, dd, ee, aa, X[12], 9);
    7e78:	e0fff717 	ldw	r3,-36(fp)
    7e7c:	e0bff617 	ldw	r2,-40(fp)
    7e80:	1886f03a 	xor	r3,r3,r2
    7e84:	e0bff817 	ldw	r2,-32(fp)
    7e88:	1886703a 	and	r3,r3,r2
    7e8c:	e0bff717 	ldw	r2,-36(fp)
    7e90:	1886f03a 	xor	r3,r3,r2
    7e94:	e0bfff17 	ldw	r2,-4(fp)
    7e98:	10800c04 	addi	r2,r2,48
    7e9c:	10800017 	ldw	r2,0(r2)
    7ea0:	1887883a 	add	r3,r3,r2
    7ea4:	e0bff517 	ldw	r2,-44(fp)
    7ea8:	1887883a 	add	r3,r3,r2
    7eac:	00a3c734 	movhi	r2,36636
    7eb0:	10af3704 	addi	r2,r2,-17188
    7eb4:	1885883a 	add	r2,r3,r2
    7eb8:	e0bff515 	stw	r2,-44(fp)
    7ebc:	e0bff517 	ldw	r2,-44(fp)
    7ec0:	1006127a 	roli	r3,r2,9
    7ec4:	e0bff417 	ldw	r2,-48(fp)
    7ec8:	1885883a 	add	r2,r3,r2
    7ecc:	e0bff515 	stw	r2,-44(fp)
    7ed0:	e0bff717 	ldw	r2,-36(fp)
    7ed4:	100412ba 	roli	r2,r2,10
    7ed8:	e0bff715 	stw	r2,-36(fp)
    II(aa, bb, cc, dd, ee, X[4], 8);
    7edc:	e0fff617 	ldw	r3,-40(fp)
    7ee0:	e0bff517 	ldw	r2,-44(fp)
    7ee4:	1886f03a 	xor	r3,r3,r2
    7ee8:	e0bff717 	ldw	r2,-36(fp)
    7eec:	1886703a 	and	r3,r3,r2
    7ef0:	e0bff617 	ldw	r2,-40(fp)
    7ef4:	1886f03a 	xor	r3,r3,r2
    7ef8:	e0bfff17 	ldw	r2,-4(fp)
    7efc:	10800404 	addi	r2,r2,16
    7f00:	10800017 	ldw	r2,0(r2)
    7f04:	1887883a 	add	r3,r3,r2
    7f08:	e0bff417 	ldw	r2,-48(fp)
    7f0c:	1887883a 	add	r3,r3,r2
    7f10:	00a3c734 	movhi	r2,36636
    7f14:	10af3704 	addi	r2,r2,-17188
    7f18:	1885883a 	add	r2,r3,r2
    7f1c:	e0bff415 	stw	r2,-48(fp)
    7f20:	e0bff417 	ldw	r2,-48(fp)
    7f24:	1006123a 	roli	r3,r2,8
    7f28:	e0bff817 	ldw	r2,-32(fp)
    7f2c:	1885883a 	add	r2,r3,r2
    7f30:	e0bff415 	stw	r2,-48(fp)
    7f34:	e0bff617 	ldw	r2,-40(fp)
    7f38:	100412ba 	roli	r2,r2,10
    7f3c:	e0bff615 	stw	r2,-40(fp)
    II(ee, aa, bb, cc, dd, X[13], 9);
    7f40:	e0fff517 	ldw	r3,-44(fp)
    7f44:	e0bff417 	ldw	r2,-48(fp)
    7f48:	1886f03a 	xor	r3,r3,r2
    7f4c:	e0bff617 	ldw	r2,-40(fp)
    7f50:	1886703a 	and	r3,r3,r2
    7f54:	e0bff517 	ldw	r2,-44(fp)
    7f58:	1886f03a 	xor	r3,r3,r2
    7f5c:	e0bfff17 	ldw	r2,-4(fp)
    7f60:	10800d04 	addi	r2,r2,52
    7f64:	10800017 	ldw	r2,0(r2)
    7f68:	1887883a 	add	r3,r3,r2
    7f6c:	e0bff817 	ldw	r2,-32(fp)
    7f70:	1887883a 	add	r3,r3,r2
    7f74:	00a3c734 	movhi	r2,36636
    7f78:	10af3704 	addi	r2,r2,-17188
    7f7c:	1885883a 	add	r2,r3,r2
    7f80:	e0bff815 	stw	r2,-32(fp)
    7f84:	e0bff817 	ldw	r2,-32(fp)
    7f88:	1006127a 	roli	r3,r2,9
    7f8c:	e0bff717 	ldw	r2,-36(fp)
    7f90:	1885883a 	add	r2,r3,r2
    7f94:	e0bff815 	stw	r2,-32(fp)
    7f98:	e0bff517 	ldw	r2,-44(fp)
    7f9c:	100412ba 	roli	r2,r2,10
    7fa0:	e0bff515 	stw	r2,-44(fp)
    II(dd, ee, aa, bb, cc, X[3], 14);
    7fa4:	e0fff417 	ldw	r3,-48(fp)
    7fa8:	e0bff817 	ldw	r2,-32(fp)
    7fac:	1886f03a 	xor	r3,r3,r2
    7fb0:	e0bff517 	ldw	r2,-44(fp)
    7fb4:	1886703a 	and	r3,r3,r2
    7fb8:	e0bff417 	ldw	r2,-48(fp)
    7fbc:	1886f03a 	xor	r3,r3,r2
    7fc0:	e0bfff17 	ldw	r2,-4(fp)
    7fc4:	10800304 	addi	r2,r2,12
    7fc8:	10800017 	ldw	r2,0(r2)
    7fcc:	1887883a 	add	r3,r3,r2
    7fd0:	e0bff717 	ldw	r2,-36(fp)
    7fd4:	1887883a 	add	r3,r3,r2
    7fd8:	00a3c734 	movhi	r2,36636
    7fdc:	10af3704 	addi	r2,r2,-17188
    7fe0:	1885883a 	add	r2,r3,r2
    7fe4:	e0bff715 	stw	r2,-36(fp)
    7fe8:	e0bff717 	ldw	r2,-36(fp)
    7fec:	100613ba 	roli	r3,r2,14
    7ff0:	e0bff617 	ldw	r2,-40(fp)
    7ff4:	1885883a 	add	r2,r3,r2
    7ff8:	e0bff715 	stw	r2,-36(fp)
    7ffc:	e0bff417 	ldw	r2,-48(fp)
    8000:	100412ba 	roli	r2,r2,10
    8004:	e0bff415 	stw	r2,-48(fp)
    II(cc, dd, ee, aa, bb, X[7], 5);
    8008:	e0fff817 	ldw	r3,-32(fp)
    800c:	e0bff717 	ldw	r2,-36(fp)
    8010:	1886f03a 	xor	r3,r3,r2
    8014:	e0bff417 	ldw	r2,-48(fp)
    8018:	1886703a 	and	r3,r3,r2
    801c:	e0bff817 	ldw	r2,-32(fp)
    8020:	1886f03a 	xor	r3,r3,r2
    8024:	e0bfff17 	ldw	r2,-4(fp)
    8028:	10800704 	addi	r2,r2,28
    802c:	10800017 	ldw	r2,0(r2)
    8030:	1887883a 	add	r3,r3,r2
    8034:	e0bff617 	ldw	r2,-40(fp)
    8038:	1887883a 	add	r3,r3,r2
    803c:	00a3c734 	movhi	r2,36636
    8040:	10af3704 	addi	r2,r2,-17188
    8044:	1885883a 	add	r2,r3,r2
    8048:	e0bff615 	stw	r2,-40(fp)
    804c:	e0bff617 	ldw	r2,-40(fp)
    8050:	1006117a 	roli	r3,r2,5
    8054:	e0bff517 	ldw	r2,-44(fp)
    8058:	1885883a 	add	r2,r3,r2
    805c:	e0bff615 	stw	r2,-40(fp)
    8060:	e0bff817 	ldw	r2,-32(fp)
    8064:	100412ba 	roli	r2,r2,10
    8068:	e0bff815 	stw	r2,-32(fp)
    II(bb, cc, dd, ee, aa, X[15], 6);
    806c:	e0fff717 	ldw	r3,-36(fp)
    8070:	e0bff617 	ldw	r2,-40(fp)
    8074:	1886f03a 	xor	r3,r3,r2
    8078:	e0bff817 	ldw	r2,-32(fp)
    807c:	1886703a 	and	r3,r3,r2
    8080:	e0bff717 	ldw	r2,-36(fp)
    8084:	1886f03a 	xor	r3,r3,r2
    8088:	e0bfff17 	ldw	r2,-4(fp)
    808c:	10800f04 	addi	r2,r2,60
    8090:	10800017 	ldw	r2,0(r2)
    8094:	1887883a 	add	r3,r3,r2
    8098:	e0bff517 	ldw	r2,-44(fp)
    809c:	1887883a 	add	r3,r3,r2
    80a0:	00a3c734 	movhi	r2,36636
    80a4:	10af3704 	addi	r2,r2,-17188
    80a8:	1885883a 	add	r2,r3,r2
    80ac:	e0bff515 	stw	r2,-44(fp)
    80b0:	e0bff517 	ldw	r2,-44(fp)
    80b4:	100611ba 	roli	r3,r2,6
    80b8:	e0bff417 	ldw	r2,-48(fp)
    80bc:	1885883a 	add	r2,r3,r2
    80c0:	e0bff515 	stw	r2,-44(fp)
    80c4:	e0bff717 	ldw	r2,-36(fp)
    80c8:	100412ba 	roli	r2,r2,10
    80cc:	e0bff715 	stw	r2,-36(fp)
    II(aa, bb, cc, dd, ee, X[14], 8);
    80d0:	e0fff617 	ldw	r3,-40(fp)
    80d4:	e0bff517 	ldw	r2,-44(fp)
    80d8:	1886f03a 	xor	r3,r3,r2
    80dc:	e0bff717 	ldw	r2,-36(fp)
    80e0:	1886703a 	and	r3,r3,r2
    80e4:	e0bff617 	ldw	r2,-40(fp)
    80e8:	1886f03a 	xor	r3,r3,r2
    80ec:	e0bfff17 	ldw	r2,-4(fp)
    80f0:	10800e04 	addi	r2,r2,56
    80f4:	10800017 	ldw	r2,0(r2)
    80f8:	1887883a 	add	r3,r3,r2
    80fc:	e0bff417 	ldw	r2,-48(fp)
    8100:	1887883a 	add	r3,r3,r2
    8104:	00a3c734 	movhi	r2,36636
    8108:	10af3704 	addi	r2,r2,-17188
    810c:	1885883a 	add	r2,r3,r2
    8110:	e0bff415 	stw	r2,-48(fp)
    8114:	e0bff417 	ldw	r2,-48(fp)
    8118:	1006123a 	roli	r3,r2,8
    811c:	e0bff817 	ldw	r2,-32(fp)
    8120:	1885883a 	add	r2,r3,r2
    8124:	e0bff415 	stw	r2,-48(fp)
    8128:	e0bff617 	ldw	r2,-40(fp)
    812c:	100412ba 	roli	r2,r2,10
    8130:	e0bff615 	stw	r2,-40(fp)
    II(ee, aa, bb, cc, dd, X[5], 6);
    8134:	e0fff517 	ldw	r3,-44(fp)
    8138:	e0bff417 	ldw	r2,-48(fp)
    813c:	1886f03a 	xor	r3,r3,r2
    8140:	e0bff617 	ldw	r2,-40(fp)
    8144:	1886703a 	and	r3,r3,r2
    8148:	e0bff517 	ldw	r2,-44(fp)
    814c:	1886f03a 	xor	r3,r3,r2
    8150:	e0bfff17 	ldw	r2,-4(fp)
    8154:	10800504 	addi	r2,r2,20
    8158:	10800017 	ldw	r2,0(r2)
    815c:	1887883a 	add	r3,r3,r2
    8160:	e0bff817 	ldw	r2,-32(fp)
    8164:	1887883a 	add	r3,r3,r2
    8168:	00a3c734 	movhi	r2,36636
    816c:	10af3704 	addi	r2,r2,-17188
    8170:	1885883a 	add	r2,r3,r2
    8174:	e0bff815 	stw	r2,-32(fp)
    8178:	e0bff817 	ldw	r2,-32(fp)
    817c:	100611ba 	roli	r3,r2,6
    8180:	e0bff717 	ldw	r2,-36(fp)
    8184:	1885883a 	add	r2,r3,r2
    8188:	e0bff815 	stw	r2,-32(fp)
    818c:	e0bff517 	ldw	r2,-44(fp)
    8190:	100412ba 	roli	r2,r2,10
    8194:	e0bff515 	stw	r2,-44(fp)
    II(dd, ee, aa, bb, cc, X[6], 5);
    8198:	e0fff417 	ldw	r3,-48(fp)
    819c:	e0bff817 	ldw	r2,-32(fp)
    81a0:	1886f03a 	xor	r3,r3,r2
    81a4:	e0bff517 	ldw	r2,-44(fp)
    81a8:	1886703a 	and	r3,r3,r2
    81ac:	e0bff417 	ldw	r2,-48(fp)
    81b0:	1886f03a 	xor	r3,r3,r2
    81b4:	e0bfff17 	ldw	r2,-4(fp)
    81b8:	10800604 	addi	r2,r2,24
    81bc:	10800017 	ldw	r2,0(r2)
    81c0:	1887883a 	add	r3,r3,r2
    81c4:	e0bff717 	ldw	r2,-36(fp)
    81c8:	1887883a 	add	r3,r3,r2
    81cc:	00a3c734 	movhi	r2,36636
    81d0:	10af3704 	addi	r2,r2,-17188
    81d4:	1885883a 	add	r2,r3,r2
    81d8:	e0bff715 	stw	r2,-36(fp)
    81dc:	e0bff717 	ldw	r2,-36(fp)
    81e0:	1006117a 	roli	r3,r2,5
    81e4:	e0bff617 	ldw	r2,-40(fp)
    81e8:	1885883a 	add	r2,r3,r2
    81ec:	e0bff715 	stw	r2,-36(fp)
    81f0:	e0bff417 	ldw	r2,-48(fp)
    81f4:	100412ba 	roli	r2,r2,10
    81f8:	e0bff415 	stw	r2,-48(fp)
    II(cc, dd, ee, aa, bb, X[2], 12);
    81fc:	e0fff817 	ldw	r3,-32(fp)
    8200:	e0bff717 	ldw	r2,-36(fp)
    8204:	1886f03a 	xor	r3,r3,r2
    8208:	e0bff417 	ldw	r2,-48(fp)
    820c:	1886703a 	and	r3,r3,r2
    8210:	e0bff817 	ldw	r2,-32(fp)
    8214:	1886f03a 	xor	r3,r3,r2
    8218:	e0bfff17 	ldw	r2,-4(fp)
    821c:	10800204 	addi	r2,r2,8
    8220:	10800017 	ldw	r2,0(r2)
    8224:	1887883a 	add	r3,r3,r2
    8228:	e0bff617 	ldw	r2,-40(fp)
    822c:	1887883a 	add	r3,r3,r2
    8230:	00a3c734 	movhi	r2,36636
    8234:	10af3704 	addi	r2,r2,-17188
    8238:	1885883a 	add	r2,r3,r2
    823c:	e0bff615 	stw	r2,-40(fp)
    8240:	e0bff617 	ldw	r2,-40(fp)
    8244:	1006133a 	roli	r3,r2,12
    8248:	e0bff517 	ldw	r2,-44(fp)
    824c:	1885883a 	add	r2,r3,r2
    8250:	e0bff615 	stw	r2,-40(fp)
    8254:	e0bff817 	ldw	r2,-32(fp)
    8258:	100412ba 	roli	r2,r2,10
    825c:	e0bff815 	stw	r2,-32(fp)

    /* round 5 */
    JJ(bb, cc, dd, ee, aa, X[4], 9);
    8260:	e0bff817 	ldw	r2,-32(fp)
    8264:	0086303a 	nor	r3,zero,r2
    8268:	e0bff717 	ldw	r2,-36(fp)
    826c:	1886b03a 	or	r3,r3,r2
    8270:	e0bff617 	ldw	r2,-40(fp)
    8274:	1886f03a 	xor	r3,r3,r2
    8278:	e0bfff17 	ldw	r2,-4(fp)
    827c:	10800404 	addi	r2,r2,16
    8280:	10800017 	ldw	r2,0(r2)
    8284:	1887883a 	add	r3,r3,r2
    8288:	e0bff517 	ldw	r2,-44(fp)
    828c:	1887883a 	add	r3,r3,r2
    8290:	00aa5534 	movhi	r2,43348
    8294:	10bf5384 	addi	r2,r2,-690
    8298:	1885883a 	add	r2,r3,r2
    829c:	e0bff515 	stw	r2,-44(fp)
    82a0:	e0bff517 	ldw	r2,-44(fp)
    82a4:	1006127a 	roli	r3,r2,9
    82a8:	e0bff417 	ldw	r2,-48(fp)
    82ac:	1885883a 	add	r2,r3,r2
    82b0:	e0bff515 	stw	r2,-44(fp)
    82b4:	e0bff717 	ldw	r2,-36(fp)
    82b8:	100412ba 	roli	r2,r2,10
    82bc:	e0bff715 	stw	r2,-36(fp)
    JJ(aa, bb, cc, dd, ee, X[0], 15);
    82c0:	e0bff717 	ldw	r2,-36(fp)
    82c4:	0086303a 	nor	r3,zero,r2
    82c8:	e0bff617 	ldw	r2,-40(fp)
    82cc:	1886b03a 	or	r3,r3,r2
    82d0:	e0bff517 	ldw	r2,-44(fp)
    82d4:	1886f03a 	xor	r3,r3,r2
    82d8:	e0bfff17 	ldw	r2,-4(fp)
    82dc:	10800017 	ldw	r2,0(r2)
    82e0:	1887883a 	add	r3,r3,r2
    82e4:	e0bff417 	ldw	r2,-48(fp)
    82e8:	1887883a 	add	r3,r3,r2
    82ec:	00aa5534 	movhi	r2,43348
    82f0:	10bf5384 	addi	r2,r2,-690
    82f4:	1885883a 	add	r2,r3,r2
    82f8:	e0bff415 	stw	r2,-48(fp)
    82fc:	e0bff417 	ldw	r2,-48(fp)
    8300:	100613fa 	roli	r3,r2,15
    8304:	e0bff817 	ldw	r2,-32(fp)
    8308:	1885883a 	add	r2,r3,r2
    830c:	e0bff415 	stw	r2,-48(fp)
    8310:	e0bff617 	ldw	r2,-40(fp)
    8314:	100412ba 	roli	r2,r2,10
    8318:	e0bff615 	stw	r2,-40(fp)
    JJ(ee, aa, bb, cc, dd, X[5], 5);
    831c:	e0bff617 	ldw	r2,-40(fp)
    8320:	0086303a 	nor	r3,zero,r2
    8324:	e0bff517 	ldw	r2,-44(fp)
    8328:	1886b03a 	or	r3,r3,r2
    832c:	e0bff417 	ldw	r2,-48(fp)
    8330:	1886f03a 	xor	r3,r3,r2
    8334:	e0bfff17 	ldw	r2,-4(fp)
    8338:	10800504 	addi	r2,r2,20
    833c:	10800017 	ldw	r2,0(r2)
    8340:	1887883a 	add	r3,r3,r2
    8344:	e0bff817 	ldw	r2,-32(fp)
    8348:	1887883a 	add	r3,r3,r2
    834c:	00aa5534 	movhi	r2,43348
    8350:	10bf5384 	addi	r2,r2,-690
    8354:	1885883a 	add	r2,r3,r2
    8358:	e0bff815 	stw	r2,-32(fp)
    835c:	e0bff817 	ldw	r2,-32(fp)
    8360:	1006117a 	roli	r3,r2,5
    8364:	e0bff717 	ldw	r2,-36(fp)
    8368:	1885883a 	add	r2,r3,r2
    836c:	e0bff815 	stw	r2,-32(fp)
    8370:	e0bff517 	ldw	r2,-44(fp)
    8374:	100412ba 	roli	r2,r2,10
    8378:	e0bff515 	stw	r2,-44(fp)
    JJ(dd, ee, aa, bb, cc, X[9], 11);
    837c:	e0bff517 	ldw	r2,-44(fp)
    8380:	0086303a 	nor	r3,zero,r2
    8384:	e0bff417 	ldw	r2,-48(fp)
    8388:	1886b03a 	or	r3,r3,r2
    838c:	e0bff817 	ldw	r2,-32(fp)
    8390:	1886f03a 	xor	r3,r3,r2
    8394:	e0bfff17 	ldw	r2,-4(fp)
    8398:	10800904 	addi	r2,r2,36
    839c:	10800017 	ldw	r2,0(r2)
    83a0:	1887883a 	add	r3,r3,r2
    83a4:	e0bff717 	ldw	r2,-36(fp)
    83a8:	1887883a 	add	r3,r3,r2
    83ac:	00aa5534 	movhi	r2,43348
    83b0:	10bf5384 	addi	r2,r2,-690
    83b4:	1885883a 	add	r2,r3,r2
    83b8:	e0bff715 	stw	r2,-36(fp)
    83bc:	e0bff717 	ldw	r2,-36(fp)
    83c0:	100612fa 	roli	r3,r2,11
    83c4:	e0bff617 	ldw	r2,-40(fp)
    83c8:	1885883a 	add	r2,r3,r2
    83cc:	e0bff715 	stw	r2,-36(fp)
    83d0:	e0bff417 	ldw	r2,-48(fp)
    83d4:	100412ba 	roli	r2,r2,10
    83d8:	e0bff415 	stw	r2,-48(fp)
    JJ(cc, dd, ee, aa, bb, X[7], 6);
    83dc:	e0bff417 	ldw	r2,-48(fp)
    83e0:	0086303a 	nor	r3,zero,r2
    83e4:	e0bff817 	ldw	r2,-32(fp)
    83e8:	1886b03a 	or	r3,r3,r2
    83ec:	e0bff717 	ldw	r2,-36(fp)
    83f0:	1886f03a 	xor	r3,r3,r2
    83f4:	e0bfff17 	ldw	r2,-4(fp)
    83f8:	10800704 	addi	r2,r2,28
    83fc:	10800017 	ldw	r2,0(r2)
    8400:	1887883a 	add	r3,r3,r2
    8404:	e0bff617 	ldw	r2,-40(fp)
    8408:	1887883a 	add	r3,r3,r2
    840c:	00aa5534 	movhi	r2,43348
    8410:	10bf5384 	addi	r2,r2,-690
    8414:	1885883a 	add	r2,r3,r2
    8418:	e0bff615 	stw	r2,-40(fp)
    841c:	e0bff617 	ldw	r2,-40(fp)
    8420:	100611ba 	roli	r3,r2,6
    8424:	e0bff517 	ldw	r2,-44(fp)
    8428:	1885883a 	add	r2,r3,r2
    842c:	e0bff615 	stw	r2,-40(fp)
    8430:	e0bff817 	ldw	r2,-32(fp)
    8434:	100412ba 	roli	r2,r2,10
    8438:	e0bff815 	stw	r2,-32(fp)
    JJ(bb, cc, dd, ee, aa, X[12], 8);
    843c:	e0bff817 	ldw	r2,-32(fp)
    8440:	0086303a 	nor	r3,zero,r2
    8444:	e0bff717 	ldw	r2,-36(fp)
    8448:	1886b03a 	or	r3,r3,r2
    844c:	e0bff617 	ldw	r2,-40(fp)
    8450:	1886f03a 	xor	r3,r3,r2
    8454:	e0bfff17 	ldw	r2,-4(fp)
    8458:	10800c04 	addi	r2,r2,48
    845c:	10800017 	ldw	r2,0(r2)
    8460:	1887883a 	add	r3,r3,r2
    8464:	e0bff517 	ldw	r2,-44(fp)
    8468:	1887883a 	add	r3,r3,r2
    846c:	00aa5534 	movhi	r2,43348
    8470:	10bf5384 	addi	r2,r2,-690
    8474:	1885883a 	add	r2,r3,r2
    8478:	e0bff515 	stw	r2,-44(fp)
    847c:	e0bff517 	ldw	r2,-44(fp)
    8480:	1006123a 	roli	r3,r2,8
    8484:	e0bff417 	ldw	r2,-48(fp)
    8488:	1885883a 	add	r2,r3,r2
    848c:	e0bff515 	stw	r2,-44(fp)
    8490:	e0bff717 	ldw	r2,-36(fp)
    8494:	100412ba 	roli	r2,r2,10
    8498:	e0bff715 	stw	r2,-36(fp)
    JJ(aa, bb, cc, dd, ee, X[2], 13);
    849c:	e0bff717 	ldw	r2,-36(fp)
    84a0:	0086303a 	nor	r3,zero,r2
    84a4:	e0bff617 	ldw	r2,-40(fp)
    84a8:	1886b03a 	or	r3,r3,r2
    84ac:	e0bff517 	ldw	r2,-44(fp)
    84b0:	1886f03a 	xor	r3,r3,r2
    84b4:	e0bfff17 	ldw	r2,-4(fp)
    84b8:	10800204 	addi	r2,r2,8
    84bc:	10800017 	ldw	r2,0(r2)
    84c0:	1887883a 	add	r3,r3,r2
    84c4:	e0bff417 	ldw	r2,-48(fp)
    84c8:	1887883a 	add	r3,r3,r2
    84cc:	00aa5534 	movhi	r2,43348
    84d0:	10bf5384 	addi	r2,r2,-690
    84d4:	1885883a 	add	r2,r3,r2
    84d8:	e0bff415 	stw	r2,-48(fp)
    84dc:	e0bff417 	ldw	r2,-48(fp)
    84e0:	1006137a 	roli	r3,r2,13
    84e4:	e0bff817 	ldw	r2,-32(fp)
    84e8:	1885883a 	add	r2,r3,r2
    84ec:	e0bff415 	stw	r2,-48(fp)
    84f0:	e0bff617 	ldw	r2,-40(fp)
    84f4:	100412ba 	roli	r2,r2,10
    84f8:	e0bff615 	stw	r2,-40(fp)
    JJ(ee, aa, bb, cc, dd, X[10], 12);
    84fc:	e0bff617 	ldw	r2,-40(fp)
    8500:	0086303a 	nor	r3,zero,r2
    8504:	e0bff517 	ldw	r2,-44(fp)
    8508:	1886b03a 	or	r3,r3,r2
    850c:	e0bff417 	ldw	r2,-48(fp)
    8510:	1886f03a 	xor	r3,r3,r2
    8514:	e0bfff17 	ldw	r2,-4(fp)
    8518:	10800a04 	addi	r2,r2,40
    851c:	10800017 	ldw	r2,0(r2)
    8520:	1887883a 	add	r3,r3,r2
    8524:	e0bff817 	ldw	r2,-32(fp)
    8528:	1887883a 	add	r3,r3,r2
    852c:	00aa5534 	movhi	r2,43348
    8530:	10bf5384 	addi	r2,r2,-690
    8534:	1885883a 	add	r2,r3,r2
    8538:	e0bff815 	stw	r2,-32(fp)
    853c:	e0bff817 	ldw	r2,-32(fp)
    8540:	1006133a 	roli	r3,r2,12
    8544:	e0bff717 	ldw	r2,-36(fp)
    8548:	1885883a 	add	r2,r3,r2
    854c:	e0bff815 	stw	r2,-32(fp)
    8550:	e0bff517 	ldw	r2,-44(fp)
    8554:	100412ba 	roli	r2,r2,10
    8558:	e0bff515 	stw	r2,-44(fp)
    JJ(dd, ee, aa, bb, cc, X[14], 5);
    855c:	e0bff517 	ldw	r2,-44(fp)
    8560:	0086303a 	nor	r3,zero,r2
    8564:	e0bff417 	ldw	r2,-48(fp)
    8568:	1886b03a 	or	r3,r3,r2
    856c:	e0bff817 	ldw	r2,-32(fp)
    8570:	1886f03a 	xor	r3,r3,r2
    8574:	e0bfff17 	ldw	r2,-4(fp)
    8578:	10800e04 	addi	r2,r2,56
    857c:	10800017 	ldw	r2,0(r2)
    8580:	1887883a 	add	r3,r3,r2
    8584:	e0bff717 	ldw	r2,-36(fp)
    8588:	1887883a 	add	r3,r3,r2
    858c:	00aa5534 	movhi	r2,43348
    8590:	10bf5384 	addi	r2,r2,-690
    8594:	1885883a 	add	r2,r3,r2
    8598:	e0bff715 	stw	r2,-36(fp)
    859c:	e0bff717 	ldw	r2,-36(fp)
    85a0:	1006117a 	roli	r3,r2,5
    85a4:	e0bff617 	ldw	r2,-40(fp)
    85a8:	1885883a 	add	r2,r3,r2
    85ac:	e0bff715 	stw	r2,-36(fp)
    85b0:	e0bff417 	ldw	r2,-48(fp)
    85b4:	100412ba 	roli	r2,r2,10
    85b8:	e0bff415 	stw	r2,-48(fp)
    JJ(cc, dd, ee, aa, bb, X[1], 12);
    85bc:	e0bff417 	ldw	r2,-48(fp)
    85c0:	0086303a 	nor	r3,zero,r2
    85c4:	e0bff817 	ldw	r2,-32(fp)
    85c8:	1886b03a 	or	r3,r3,r2
    85cc:	e0bff717 	ldw	r2,-36(fp)
    85d0:	1886f03a 	xor	r3,r3,r2
    85d4:	e0bfff17 	ldw	r2,-4(fp)
    85d8:	10800104 	addi	r2,r2,4
    85dc:	10800017 	ldw	r2,0(r2)
    85e0:	1887883a 	add	r3,r3,r2
    85e4:	e0bff617 	ldw	r2,-40(fp)
    85e8:	1887883a 	add	r3,r3,r2
    85ec:	00aa5534 	movhi	r2,43348
    85f0:	10bf5384 	addi	r2,r2,-690
    85f4:	1885883a 	add	r2,r3,r2
    85f8:	e0bff615 	stw	r2,-40(fp)
    85fc:	e0bff617 	ldw	r2,-40(fp)
    8600:	1006133a 	roli	r3,r2,12
    8604:	e0bff517 	ldw	r2,-44(fp)
    8608:	1885883a 	add	r2,r3,r2
    860c:	e0bff615 	stw	r2,-40(fp)
    8610:	e0bff817 	ldw	r2,-32(fp)
    8614:	100412ba 	roli	r2,r2,10
    8618:	e0bff815 	stw	r2,-32(fp)
    JJ(bb, cc, dd, ee, aa, X[3], 13);
    861c:	e0bff817 	ldw	r2,-32(fp)
    8620:	0086303a 	nor	r3,zero,r2
    8624:	e0bff717 	ldw	r2,-36(fp)
    8628:	1886b03a 	or	r3,r3,r2
    862c:	e0bff617 	ldw	r2,-40(fp)
    8630:	1886f03a 	xor	r3,r3,r2
    8634:	e0bfff17 	ldw	r2,-4(fp)
    8638:	10800304 	addi	r2,r2,12
    863c:	10800017 	ldw	r2,0(r2)
    8640:	1887883a 	add	r3,r3,r2
    8644:	e0bff517 	ldw	r2,-44(fp)
    8648:	1887883a 	add	r3,r3,r2
    864c:	00aa5534 	movhi	r2,43348
    8650:	10bf5384 	addi	r2,r2,-690
    8654:	1885883a 	add	r2,r3,r2
    8658:	e0bff515 	stw	r2,-44(fp)
    865c:	e0bff517 	ldw	r2,-44(fp)
    8660:	1006137a 	roli	r3,r2,13
    8664:	e0bff417 	ldw	r2,-48(fp)
    8668:	1885883a 	add	r2,r3,r2
    866c:	e0bff515 	stw	r2,-44(fp)
    8670:	e0bff717 	ldw	r2,-36(fp)
    8674:	100412ba 	roli	r2,r2,10
    8678:	e0bff715 	stw	r2,-36(fp)
    JJ(aa, bb, cc, dd, ee, X[8], 14);
    867c:	e0bff717 	ldw	r2,-36(fp)
    8680:	0086303a 	nor	r3,zero,r2
    8684:	e0bff617 	ldw	r2,-40(fp)
    8688:	1886b03a 	or	r3,r3,r2
    868c:	e0bff517 	ldw	r2,-44(fp)
    8690:	1886f03a 	xor	r3,r3,r2
    8694:	e0bfff17 	ldw	r2,-4(fp)
    8698:	10800804 	addi	r2,r2,32
    869c:	10800017 	ldw	r2,0(r2)
    86a0:	1887883a 	add	r3,r3,r2
    86a4:	e0bff417 	ldw	r2,-48(fp)
    86a8:	1887883a 	add	r3,r3,r2
    86ac:	00aa5534 	movhi	r2,43348
    86b0:	10bf5384 	addi	r2,r2,-690
    86b4:	1885883a 	add	r2,r3,r2
    86b8:	e0bff415 	stw	r2,-48(fp)
    86bc:	e0bff417 	ldw	r2,-48(fp)
    86c0:	100613ba 	roli	r3,r2,14
    86c4:	e0bff817 	ldw	r2,-32(fp)
    86c8:	1885883a 	add	r2,r3,r2
    86cc:	e0bff415 	stw	r2,-48(fp)
    86d0:	e0bff617 	ldw	r2,-40(fp)
    86d4:	100412ba 	roli	r2,r2,10
    86d8:	e0bff615 	stw	r2,-40(fp)
    JJ(ee, aa, bb, cc, dd, X[11], 11);
    86dc:	e0bff617 	ldw	r2,-40(fp)
    86e0:	0086303a 	nor	r3,zero,r2
    86e4:	e0bff517 	ldw	r2,-44(fp)
    86e8:	1886b03a 	or	r3,r3,r2
    86ec:	e0bff417 	ldw	r2,-48(fp)
    86f0:	1886f03a 	xor	r3,r3,r2
    86f4:	e0bfff17 	ldw	r2,-4(fp)
    86f8:	10800b04 	addi	r2,r2,44
    86fc:	10800017 	ldw	r2,0(r2)
    8700:	1887883a 	add	r3,r3,r2
    8704:	e0bff817 	ldw	r2,-32(fp)
    8708:	1887883a 	add	r3,r3,r2
    870c:	00aa5534 	movhi	r2,43348
    8710:	10bf5384 	addi	r2,r2,-690
    8714:	1885883a 	add	r2,r3,r2
    8718:	e0bff815 	stw	r2,-32(fp)
    871c:	e0bff817 	ldw	r2,-32(fp)
    8720:	100612fa 	roli	r3,r2,11
    8724:	e0bff717 	ldw	r2,-36(fp)
    8728:	1885883a 	add	r2,r3,r2
    872c:	e0bff815 	stw	r2,-32(fp)
    8730:	e0bff517 	ldw	r2,-44(fp)
    8734:	100412ba 	roli	r2,r2,10
    8738:	e0bff515 	stw	r2,-44(fp)
    JJ(dd, ee, aa, bb, cc, X[6], 8);
    873c:	e0bff517 	ldw	r2,-44(fp)
    8740:	0086303a 	nor	r3,zero,r2
    8744:	e0bff417 	ldw	r2,-48(fp)
    8748:	1886b03a 	or	r3,r3,r2
    874c:	e0bff817 	ldw	r2,-32(fp)
    8750:	1886f03a 	xor	r3,r3,r2
    8754:	e0bfff17 	ldw	r2,-4(fp)
    8758:	10800604 	addi	r2,r2,24
    875c:	10800017 	ldw	r2,0(r2)
    8760:	1887883a 	add	r3,r3,r2
    8764:	e0bff717 	ldw	r2,-36(fp)
    8768:	1887883a 	add	r3,r3,r2
    876c:	00aa5534 	movhi	r2,43348
    8770:	10bf5384 	addi	r2,r2,-690
    8774:	1885883a 	add	r2,r3,r2
    8778:	e0bff715 	stw	r2,-36(fp)
    877c:	e0bff717 	ldw	r2,-36(fp)
    8780:	1006123a 	roli	r3,r2,8
    8784:	e0bff617 	ldw	r2,-40(fp)
    8788:	1885883a 	add	r2,r3,r2
    878c:	e0bff715 	stw	r2,-36(fp)
    8790:	e0bff417 	ldw	r2,-48(fp)
    8794:	100412ba 	roli	r2,r2,10
    8798:	e0bff415 	stw	r2,-48(fp)
    JJ(cc, dd, ee, aa, bb, X[15], 5);
    879c:	e0bff417 	ldw	r2,-48(fp)
    87a0:	0086303a 	nor	r3,zero,r2
    87a4:	e0bff817 	ldw	r2,-32(fp)
    87a8:	1886b03a 	or	r3,r3,r2
    87ac:	e0bff717 	ldw	r2,-36(fp)
    87b0:	1886f03a 	xor	r3,r3,r2
    87b4:	e0bfff17 	ldw	r2,-4(fp)
    87b8:	10800f04 	addi	r2,r2,60
    87bc:	10800017 	ldw	r2,0(r2)
    87c0:	1887883a 	add	r3,r3,r2
    87c4:	e0bff617 	ldw	r2,-40(fp)
    87c8:	1887883a 	add	r3,r3,r2
    87cc:	00aa5534 	movhi	r2,43348
    87d0:	10bf5384 	addi	r2,r2,-690
    87d4:	1885883a 	add	r2,r3,r2
    87d8:	e0bff615 	stw	r2,-40(fp)
    87dc:	e0bff617 	ldw	r2,-40(fp)
    87e0:	1006117a 	roli	r3,r2,5
    87e4:	e0bff517 	ldw	r2,-44(fp)
    87e8:	1885883a 	add	r2,r3,r2
    87ec:	e0bff615 	stw	r2,-40(fp)
    87f0:	e0bff817 	ldw	r2,-32(fp)
    87f4:	100412ba 	roli	r2,r2,10
    87f8:	e0bff815 	stw	r2,-32(fp)
    JJ(bb, cc, dd, ee, aa, X[13], 6);
    87fc:	e0bff817 	ldw	r2,-32(fp)
    8800:	0086303a 	nor	r3,zero,r2
    8804:	e0bff717 	ldw	r2,-36(fp)
    8808:	1886b03a 	or	r3,r3,r2
    880c:	e0bff617 	ldw	r2,-40(fp)
    8810:	1886f03a 	xor	r3,r3,r2
    8814:	e0bfff17 	ldw	r2,-4(fp)
    8818:	10800d04 	addi	r2,r2,52
    881c:	10800017 	ldw	r2,0(r2)
    8820:	1887883a 	add	r3,r3,r2
    8824:	e0bff517 	ldw	r2,-44(fp)
    8828:	1887883a 	add	r3,r3,r2
    882c:	00aa5534 	movhi	r2,43348
    8830:	10bf5384 	addi	r2,r2,-690
    8834:	1885883a 	add	r2,r3,r2
    8838:	e0bff515 	stw	r2,-44(fp)
    883c:	e0bff517 	ldw	r2,-44(fp)
    8840:	100611ba 	roli	r3,r2,6
    8844:	e0bff417 	ldw	r2,-48(fp)
    8848:	1885883a 	add	r2,r3,r2
    884c:	e0bff515 	stw	r2,-44(fp)
    8850:	e0bff717 	ldw	r2,-36(fp)
    8854:	100412ba 	roli	r2,r2,10
    8858:	e0bff715 	stw	r2,-36(fp)

    /* parallel round 1 */
    JJJ(aaa, bbb, ccc, ddd, eee, X[5], 8);
    885c:	e0bffc17 	ldw	r2,-16(fp)
    8860:	0086303a 	nor	r3,zero,r2
    8864:	e0bffb17 	ldw	r2,-20(fp)
    8868:	1886b03a 	or	r3,r3,r2
    886c:	e0bffa17 	ldw	r2,-24(fp)
    8870:	1886f03a 	xor	r3,r3,r2
    8874:	e0bfff17 	ldw	r2,-4(fp)
    8878:	10800504 	addi	r2,r2,20
    887c:	10800017 	ldw	r2,0(r2)
    8880:	1887883a 	add	r3,r3,r2
    8884:	e0bff917 	ldw	r2,-28(fp)
    8888:	1887883a 	add	r3,r3,r2
    888c:	009428f4 	movhi	r2,20643
    8890:	10a2f984 	addi	r2,r2,-29722
    8894:	1885883a 	add	r2,r3,r2
    8898:	e0bff915 	stw	r2,-28(fp)
    889c:	e0bff917 	ldw	r2,-28(fp)
    88a0:	1006123a 	roli	r3,r2,8
    88a4:	e0bffd17 	ldw	r2,-12(fp)
    88a8:	1885883a 	add	r2,r3,r2
    88ac:	e0bff915 	stw	r2,-28(fp)
    88b0:	e0bffb17 	ldw	r2,-20(fp)
    88b4:	100412ba 	roli	r2,r2,10
    88b8:	e0bffb15 	stw	r2,-20(fp)
    JJJ(eee, aaa, bbb, ccc, ddd, X[14], 9);
    88bc:	e0bffb17 	ldw	r2,-20(fp)
    88c0:	0086303a 	nor	r3,zero,r2
    88c4:	e0bffa17 	ldw	r2,-24(fp)
    88c8:	1886b03a 	or	r3,r3,r2
    88cc:	e0bff917 	ldw	r2,-28(fp)
    88d0:	1886f03a 	xor	r3,r3,r2
    88d4:	e0bfff17 	ldw	r2,-4(fp)
    88d8:	10800e04 	addi	r2,r2,56
    88dc:	10800017 	ldw	r2,0(r2)
    88e0:	1887883a 	add	r3,r3,r2
    88e4:	e0bffd17 	ldw	r2,-12(fp)
    88e8:	1887883a 	add	r3,r3,r2
    88ec:	009428f4 	movhi	r2,20643
    88f0:	10a2f984 	addi	r2,r2,-29722
    88f4:	1885883a 	add	r2,r3,r2
    88f8:	e0bffd15 	stw	r2,-12(fp)
    88fc:	e0bffd17 	ldw	r2,-12(fp)
    8900:	1006127a 	roli	r3,r2,9
    8904:	e0bffc17 	ldw	r2,-16(fp)
    8908:	1885883a 	add	r2,r3,r2
    890c:	e0bffd15 	stw	r2,-12(fp)
    8910:	e0bffa17 	ldw	r2,-24(fp)
    8914:	100412ba 	roli	r2,r2,10
    8918:	e0bffa15 	stw	r2,-24(fp)
    JJJ(ddd, eee, aaa, bbb, ccc, X[7], 9);
    891c:	e0bffa17 	ldw	r2,-24(fp)
    8920:	0086303a 	nor	r3,zero,r2
    8924:	e0bff917 	ldw	r2,-28(fp)
    8928:	1886b03a 	or	r3,r3,r2
    892c:	e0bffd17 	ldw	r2,-12(fp)
    8930:	1886f03a 	xor	r3,r3,r2
    8934:	e0bfff17 	ldw	r2,-4(fp)
    8938:	10800704 	addi	r2,r2,28
    893c:	10800017 	ldw	r2,0(r2)
    8940:	1887883a 	add	r3,r3,r2
    8944:	e0bffc17 	ldw	r2,-16(fp)
    8948:	1887883a 	add	r3,r3,r2
    894c:	009428f4 	movhi	r2,20643
    8950:	10a2f984 	addi	r2,r2,-29722
    8954:	1885883a 	add	r2,r3,r2
    8958:	e0bffc15 	stw	r2,-16(fp)
    895c:	e0bffc17 	ldw	r2,-16(fp)
    8960:	1006127a 	roli	r3,r2,9
    8964:	e0bffb17 	ldw	r2,-20(fp)
    8968:	1885883a 	add	r2,r3,r2
    896c:	e0bffc15 	stw	r2,-16(fp)
    8970:	e0bff917 	ldw	r2,-28(fp)
    8974:	100412ba 	roli	r2,r2,10
    8978:	e0bff915 	stw	r2,-28(fp)
    JJJ(ccc, ddd, eee, aaa, bbb, X[0], 11);
    897c:	e0bff917 	ldw	r2,-28(fp)
    8980:	0086303a 	nor	r3,zero,r2
    8984:	e0bffd17 	ldw	r2,-12(fp)
    8988:	1886b03a 	or	r3,r3,r2
    898c:	e0bffc17 	ldw	r2,-16(fp)
    8990:	1886f03a 	xor	r3,r3,r2
    8994:	e0bfff17 	ldw	r2,-4(fp)
    8998:	10800017 	ldw	r2,0(r2)
    899c:	1887883a 	add	r3,r3,r2
    89a0:	e0bffb17 	ldw	r2,-20(fp)
    89a4:	1887883a 	add	r3,r3,r2
    89a8:	009428f4 	movhi	r2,20643
    89ac:	10a2f984 	addi	r2,r2,-29722
    89b0:	1885883a 	add	r2,r3,r2
    89b4:	e0bffb15 	stw	r2,-20(fp)
    89b8:	e0bffb17 	ldw	r2,-20(fp)
    89bc:	100612fa 	roli	r3,r2,11
    89c0:	e0bffa17 	ldw	r2,-24(fp)
    89c4:	1885883a 	add	r2,r3,r2
    89c8:	e0bffb15 	stw	r2,-20(fp)
    89cc:	e0bffd17 	ldw	r2,-12(fp)
    89d0:	100412ba 	roli	r2,r2,10
    89d4:	e0bffd15 	stw	r2,-12(fp)
    JJJ(bbb, ccc, ddd, eee, aaa, X[9], 13);
    89d8:	e0bffd17 	ldw	r2,-12(fp)
    89dc:	0086303a 	nor	r3,zero,r2
    89e0:	e0bffc17 	ldw	r2,-16(fp)
    89e4:	1886b03a 	or	r3,r3,r2
    89e8:	e0bffb17 	ldw	r2,-20(fp)
    89ec:	1886f03a 	xor	r3,r3,r2
    89f0:	e0bfff17 	ldw	r2,-4(fp)
    89f4:	10800904 	addi	r2,r2,36
    89f8:	10800017 	ldw	r2,0(r2)
    89fc:	1887883a 	add	r3,r3,r2
    8a00:	e0bffa17 	ldw	r2,-24(fp)
    8a04:	1887883a 	add	r3,r3,r2
    8a08:	009428f4 	movhi	r2,20643
    8a0c:	10a2f984 	addi	r2,r2,-29722
    8a10:	1885883a 	add	r2,r3,r2
    8a14:	e0bffa15 	stw	r2,-24(fp)
    8a18:	e0bffa17 	ldw	r2,-24(fp)
    8a1c:	1006137a 	roli	r3,r2,13
    8a20:	e0bff917 	ldw	r2,-28(fp)
    8a24:	1885883a 	add	r2,r3,r2
    8a28:	e0bffa15 	stw	r2,-24(fp)
    8a2c:	e0bffc17 	ldw	r2,-16(fp)
    8a30:	100412ba 	roli	r2,r2,10
    8a34:	e0bffc15 	stw	r2,-16(fp)
    JJJ(aaa, bbb, ccc, ddd, eee, X[2], 15);
    8a38:	e0bffc17 	ldw	r2,-16(fp)
    8a3c:	0086303a 	nor	r3,zero,r2
    8a40:	e0bffb17 	ldw	r2,-20(fp)
    8a44:	1886b03a 	or	r3,r3,r2
    8a48:	e0bffa17 	ldw	r2,-24(fp)
    8a4c:	1886f03a 	xor	r3,r3,r2
    8a50:	e0bfff17 	ldw	r2,-4(fp)
    8a54:	10800204 	addi	r2,r2,8
    8a58:	10800017 	ldw	r2,0(r2)
    8a5c:	1887883a 	add	r3,r3,r2
    8a60:	e0bff917 	ldw	r2,-28(fp)
    8a64:	1887883a 	add	r3,r3,r2
    8a68:	009428f4 	movhi	r2,20643
    8a6c:	10a2f984 	addi	r2,r2,-29722
    8a70:	1885883a 	add	r2,r3,r2
    8a74:	e0bff915 	stw	r2,-28(fp)
    8a78:	e0bff917 	ldw	r2,-28(fp)
    8a7c:	100613fa 	roli	r3,r2,15
    8a80:	e0bffd17 	ldw	r2,-12(fp)
    8a84:	1885883a 	add	r2,r3,r2
    8a88:	e0bff915 	stw	r2,-28(fp)
    8a8c:	e0bffb17 	ldw	r2,-20(fp)
    8a90:	100412ba 	roli	r2,r2,10
    8a94:	e0bffb15 	stw	r2,-20(fp)
    JJJ(eee, aaa, bbb, ccc, ddd, X[11], 15);
    8a98:	e0bffb17 	ldw	r2,-20(fp)
    8a9c:	0086303a 	nor	r3,zero,r2
    8aa0:	e0bffa17 	ldw	r2,-24(fp)
    8aa4:	1886b03a 	or	r3,r3,r2
    8aa8:	e0bff917 	ldw	r2,-28(fp)
    8aac:	1886f03a 	xor	r3,r3,r2
    8ab0:	e0bfff17 	ldw	r2,-4(fp)
    8ab4:	10800b04 	addi	r2,r2,44
    8ab8:	10800017 	ldw	r2,0(r2)
    8abc:	1887883a 	add	r3,r3,r2
    8ac0:	e0bffd17 	ldw	r2,-12(fp)
    8ac4:	1887883a 	add	r3,r3,r2
    8ac8:	009428f4 	movhi	r2,20643
    8acc:	10a2f984 	addi	r2,r2,-29722
    8ad0:	1885883a 	add	r2,r3,r2
    8ad4:	e0bffd15 	stw	r2,-12(fp)
    8ad8:	e0bffd17 	ldw	r2,-12(fp)
    8adc:	100613fa 	roli	r3,r2,15
    8ae0:	e0bffc17 	ldw	r2,-16(fp)
    8ae4:	1885883a 	add	r2,r3,r2
    8ae8:	e0bffd15 	stw	r2,-12(fp)
    8aec:	e0bffa17 	ldw	r2,-24(fp)
    8af0:	100412ba 	roli	r2,r2,10
    8af4:	e0bffa15 	stw	r2,-24(fp)
    JJJ(ddd, eee, aaa, bbb, ccc, X[4], 5);
    8af8:	e0bffa17 	ldw	r2,-24(fp)
    8afc:	0086303a 	nor	r3,zero,r2
    8b00:	e0bff917 	ldw	r2,-28(fp)
    8b04:	1886b03a 	or	r3,r3,r2
    8b08:	e0bffd17 	ldw	r2,-12(fp)
    8b0c:	1886f03a 	xor	r3,r3,r2
    8b10:	e0bfff17 	ldw	r2,-4(fp)
    8b14:	10800404 	addi	r2,r2,16
    8b18:	10800017 	ldw	r2,0(r2)
    8b1c:	1887883a 	add	r3,r3,r2
    8b20:	e0bffc17 	ldw	r2,-16(fp)
    8b24:	1887883a 	add	r3,r3,r2
    8b28:	009428f4 	movhi	r2,20643
    8b2c:	10a2f984 	addi	r2,r2,-29722
    8b30:	1885883a 	add	r2,r3,r2
    8b34:	e0bffc15 	stw	r2,-16(fp)
    8b38:	e0bffc17 	ldw	r2,-16(fp)
    8b3c:	1006117a 	roli	r3,r2,5
    8b40:	e0bffb17 	ldw	r2,-20(fp)
    8b44:	1885883a 	add	r2,r3,r2
    8b48:	e0bffc15 	stw	r2,-16(fp)
    8b4c:	e0bff917 	ldw	r2,-28(fp)
    8b50:	100412ba 	roli	r2,r2,10
    8b54:	e0bff915 	stw	r2,-28(fp)
    JJJ(ccc, ddd, eee, aaa, bbb, X[13], 7);
    8b58:	e0bff917 	ldw	r2,-28(fp)
    8b5c:	0086303a 	nor	r3,zero,r2
    8b60:	e0bffd17 	ldw	r2,-12(fp)
    8b64:	1886b03a 	or	r3,r3,r2
    8b68:	e0bffc17 	ldw	r2,-16(fp)
    8b6c:	1886f03a 	xor	r3,r3,r2
    8b70:	e0bfff17 	ldw	r2,-4(fp)
    8b74:	10800d04 	addi	r2,r2,52
    8b78:	10800017 	ldw	r2,0(r2)
    8b7c:	1887883a 	add	r3,r3,r2
    8b80:	e0bffb17 	ldw	r2,-20(fp)
    8b84:	1887883a 	add	r3,r3,r2
    8b88:	009428f4 	movhi	r2,20643
    8b8c:	10a2f984 	addi	r2,r2,-29722
    8b90:	1885883a 	add	r2,r3,r2
    8b94:	e0bffb15 	stw	r2,-20(fp)
    8b98:	e0bffb17 	ldw	r2,-20(fp)
    8b9c:	100611fa 	roli	r3,r2,7
    8ba0:	e0bffa17 	ldw	r2,-24(fp)
    8ba4:	1885883a 	add	r2,r3,r2
    8ba8:	e0bffb15 	stw	r2,-20(fp)
    8bac:	e0bffd17 	ldw	r2,-12(fp)
    8bb0:	100412ba 	roli	r2,r2,10
    8bb4:	e0bffd15 	stw	r2,-12(fp)
    JJJ(bbb, ccc, ddd, eee, aaa, X[6], 7);
    8bb8:	e0bffd17 	ldw	r2,-12(fp)
    8bbc:	0086303a 	nor	r3,zero,r2
    8bc0:	e0bffc17 	ldw	r2,-16(fp)
    8bc4:	1886b03a 	or	r3,r3,r2
    8bc8:	e0bffb17 	ldw	r2,-20(fp)
    8bcc:	1886f03a 	xor	r3,r3,r2
    8bd0:	e0bfff17 	ldw	r2,-4(fp)
    8bd4:	10800604 	addi	r2,r2,24
    8bd8:	10800017 	ldw	r2,0(r2)
    8bdc:	1887883a 	add	r3,r3,r2
    8be0:	e0bffa17 	ldw	r2,-24(fp)
    8be4:	1887883a 	add	r3,r3,r2
    8be8:	009428f4 	movhi	r2,20643
    8bec:	10a2f984 	addi	r2,r2,-29722
    8bf0:	1885883a 	add	r2,r3,r2
    8bf4:	e0bffa15 	stw	r2,-24(fp)
    8bf8:	e0bffa17 	ldw	r2,-24(fp)
    8bfc:	100611fa 	roli	r3,r2,7
    8c00:	e0bff917 	ldw	r2,-28(fp)
    8c04:	1885883a 	add	r2,r3,r2
    8c08:	e0bffa15 	stw	r2,-24(fp)
    8c0c:	e0bffc17 	ldw	r2,-16(fp)
    8c10:	100412ba 	roli	r2,r2,10
    8c14:	e0bffc15 	stw	r2,-16(fp)
    JJJ(aaa, bbb, ccc, ddd, eee, X[15], 8);
    8c18:	e0bffc17 	ldw	r2,-16(fp)
    8c1c:	0086303a 	nor	r3,zero,r2
    8c20:	e0bffb17 	ldw	r2,-20(fp)
    8c24:	1886b03a 	or	r3,r3,r2
    8c28:	e0bffa17 	ldw	r2,-24(fp)
    8c2c:	1886f03a 	xor	r3,r3,r2
    8c30:	e0bfff17 	ldw	r2,-4(fp)
    8c34:	10800f04 	addi	r2,r2,60
    8c38:	10800017 	ldw	r2,0(r2)
    8c3c:	1887883a 	add	r3,r3,r2
    8c40:	e0bff917 	ldw	r2,-28(fp)
    8c44:	1887883a 	add	r3,r3,r2
    8c48:	009428f4 	movhi	r2,20643
    8c4c:	10a2f984 	addi	r2,r2,-29722
    8c50:	1885883a 	add	r2,r3,r2
    8c54:	e0bff915 	stw	r2,-28(fp)
    8c58:	e0bff917 	ldw	r2,-28(fp)
    8c5c:	1006123a 	roli	r3,r2,8
    8c60:	e0bffd17 	ldw	r2,-12(fp)
    8c64:	1885883a 	add	r2,r3,r2
    8c68:	e0bff915 	stw	r2,-28(fp)
    8c6c:	e0bffb17 	ldw	r2,-20(fp)
    8c70:	100412ba 	roli	r2,r2,10
    8c74:	e0bffb15 	stw	r2,-20(fp)
    JJJ(eee, aaa, bbb, ccc, ddd, X[8], 11);
    8c78:	e0bffb17 	ldw	r2,-20(fp)
    8c7c:	0086303a 	nor	r3,zero,r2
    8c80:	e0bffa17 	ldw	r2,-24(fp)
    8c84:	1886b03a 	or	r3,r3,r2
    8c88:	e0bff917 	ldw	r2,-28(fp)
    8c8c:	1886f03a 	xor	r3,r3,r2
    8c90:	e0bfff17 	ldw	r2,-4(fp)
    8c94:	10800804 	addi	r2,r2,32
    8c98:	10800017 	ldw	r2,0(r2)
    8c9c:	1887883a 	add	r3,r3,r2
    8ca0:	e0bffd17 	ldw	r2,-12(fp)
    8ca4:	1887883a 	add	r3,r3,r2
    8ca8:	009428f4 	movhi	r2,20643
    8cac:	10a2f984 	addi	r2,r2,-29722
    8cb0:	1885883a 	add	r2,r3,r2
    8cb4:	e0bffd15 	stw	r2,-12(fp)
    8cb8:	e0bffd17 	ldw	r2,-12(fp)
    8cbc:	100612fa 	roli	r3,r2,11
    8cc0:	e0bffc17 	ldw	r2,-16(fp)
    8cc4:	1885883a 	add	r2,r3,r2
    8cc8:	e0bffd15 	stw	r2,-12(fp)
    8ccc:	e0bffa17 	ldw	r2,-24(fp)
    8cd0:	100412ba 	roli	r2,r2,10
    8cd4:	e0bffa15 	stw	r2,-24(fp)
    JJJ(ddd, eee, aaa, bbb, ccc, X[1], 14);
    8cd8:	e0bffa17 	ldw	r2,-24(fp)
    8cdc:	0086303a 	nor	r3,zero,r2
    8ce0:	e0bff917 	ldw	r2,-28(fp)
    8ce4:	1886b03a 	or	r3,r3,r2
    8ce8:	e0bffd17 	ldw	r2,-12(fp)
    8cec:	1886f03a 	xor	r3,r3,r2
    8cf0:	e0bfff17 	ldw	r2,-4(fp)
    8cf4:	10800104 	addi	r2,r2,4
    8cf8:	10800017 	ldw	r2,0(r2)
    8cfc:	1887883a 	add	r3,r3,r2
    8d00:	e0bffc17 	ldw	r2,-16(fp)
    8d04:	1887883a 	add	r3,r3,r2
    8d08:	009428f4 	movhi	r2,20643
    8d0c:	10a2f984 	addi	r2,r2,-29722
    8d10:	1885883a 	add	r2,r3,r2
    8d14:	e0bffc15 	stw	r2,-16(fp)
    8d18:	e0bffc17 	ldw	r2,-16(fp)
    8d1c:	100613ba 	roli	r3,r2,14
    8d20:	e0bffb17 	ldw	r2,-20(fp)
    8d24:	1885883a 	add	r2,r3,r2
    8d28:	e0bffc15 	stw	r2,-16(fp)
    8d2c:	e0bff917 	ldw	r2,-28(fp)
    8d30:	100412ba 	roli	r2,r2,10
    8d34:	e0bff915 	stw	r2,-28(fp)
    JJJ(ccc, ddd, eee, aaa, bbb, X[10], 14);
    8d38:	e0bff917 	ldw	r2,-28(fp)
    8d3c:	0086303a 	nor	r3,zero,r2
    8d40:	e0bffd17 	ldw	r2,-12(fp)
    8d44:	1886b03a 	or	r3,r3,r2
    8d48:	e0bffc17 	ldw	r2,-16(fp)
    8d4c:	1886f03a 	xor	r3,r3,r2
    8d50:	e0bfff17 	ldw	r2,-4(fp)
    8d54:	10800a04 	addi	r2,r2,40
    8d58:	10800017 	ldw	r2,0(r2)
    8d5c:	1887883a 	add	r3,r3,r2
    8d60:	e0bffb17 	ldw	r2,-20(fp)
    8d64:	1887883a 	add	r3,r3,r2
    8d68:	009428f4 	movhi	r2,20643
    8d6c:	10a2f984 	addi	r2,r2,-29722
    8d70:	1885883a 	add	r2,r3,r2
    8d74:	e0bffb15 	stw	r2,-20(fp)
    8d78:	e0bffb17 	ldw	r2,-20(fp)
    8d7c:	100613ba 	roli	r3,r2,14
    8d80:	e0bffa17 	ldw	r2,-24(fp)
    8d84:	1885883a 	add	r2,r3,r2
    8d88:	e0bffb15 	stw	r2,-20(fp)
    8d8c:	e0bffd17 	ldw	r2,-12(fp)
    8d90:	100412ba 	roli	r2,r2,10
    8d94:	e0bffd15 	stw	r2,-12(fp)
    JJJ(bbb, ccc, ddd, eee, aaa, X[3], 12);
    8d98:	e0bffd17 	ldw	r2,-12(fp)
    8d9c:	0086303a 	nor	r3,zero,r2
    8da0:	e0bffc17 	ldw	r2,-16(fp)
    8da4:	1886b03a 	or	r3,r3,r2
    8da8:	e0bffb17 	ldw	r2,-20(fp)
    8dac:	1886f03a 	xor	r3,r3,r2
    8db0:	e0bfff17 	ldw	r2,-4(fp)
    8db4:	10800304 	addi	r2,r2,12
    8db8:	10800017 	ldw	r2,0(r2)
    8dbc:	1887883a 	add	r3,r3,r2
    8dc0:	e0bffa17 	ldw	r2,-24(fp)
    8dc4:	1887883a 	add	r3,r3,r2
    8dc8:	009428f4 	movhi	r2,20643
    8dcc:	10a2f984 	addi	r2,r2,-29722
    8dd0:	1885883a 	add	r2,r3,r2
    8dd4:	e0bffa15 	stw	r2,-24(fp)
    8dd8:	e0bffa17 	ldw	r2,-24(fp)
    8ddc:	1006133a 	roli	r3,r2,12
    8de0:	e0bff917 	ldw	r2,-28(fp)
    8de4:	1885883a 	add	r2,r3,r2
    8de8:	e0bffa15 	stw	r2,-24(fp)
    8dec:	e0bffc17 	ldw	r2,-16(fp)
    8df0:	100412ba 	roli	r2,r2,10
    8df4:	e0bffc15 	stw	r2,-16(fp)
    JJJ(aaa, bbb, ccc, ddd, eee, X[12], 6);
    8df8:	e0bffc17 	ldw	r2,-16(fp)
    8dfc:	0086303a 	nor	r3,zero,r2
    8e00:	e0bffb17 	ldw	r2,-20(fp)
    8e04:	1886b03a 	or	r3,r3,r2
    8e08:	e0bffa17 	ldw	r2,-24(fp)
    8e0c:	1886f03a 	xor	r3,r3,r2
    8e10:	e0bfff17 	ldw	r2,-4(fp)
    8e14:	10800c04 	addi	r2,r2,48
    8e18:	10800017 	ldw	r2,0(r2)
    8e1c:	1887883a 	add	r3,r3,r2
    8e20:	e0bff917 	ldw	r2,-28(fp)
    8e24:	1887883a 	add	r3,r3,r2
    8e28:	009428f4 	movhi	r2,20643
    8e2c:	10a2f984 	addi	r2,r2,-29722
    8e30:	1885883a 	add	r2,r3,r2
    8e34:	e0bff915 	stw	r2,-28(fp)
    8e38:	e0bff917 	ldw	r2,-28(fp)
    8e3c:	100611ba 	roli	r3,r2,6
    8e40:	e0bffd17 	ldw	r2,-12(fp)
    8e44:	1885883a 	add	r2,r3,r2
    8e48:	e0bff915 	stw	r2,-28(fp)
    8e4c:	e0bffb17 	ldw	r2,-20(fp)
    8e50:	100412ba 	roli	r2,r2,10
    8e54:	e0bffb15 	stw	r2,-20(fp)

    /* parallel round 2 */
    III(eee, aaa, bbb, ccc, ddd, X[6], 9);
    8e58:	e0fffa17 	ldw	r3,-24(fp)
    8e5c:	e0bff917 	ldw	r2,-28(fp)
    8e60:	1886f03a 	xor	r3,r3,r2
    8e64:	e0bffb17 	ldw	r2,-20(fp)
    8e68:	1886703a 	and	r3,r3,r2
    8e6c:	e0bffa17 	ldw	r2,-24(fp)
    8e70:	1886f03a 	xor	r3,r3,r2
    8e74:	e0bfff17 	ldw	r2,-4(fp)
    8e78:	10800604 	addi	r2,r2,24
    8e7c:	10800017 	ldw	r2,0(r2)
    8e80:	1887883a 	add	r3,r3,r2
    8e84:	e0bffd17 	ldw	r2,-12(fp)
    8e88:	1887883a 	add	r3,r3,r2
    8e8c:	009713b4 	movhi	r2,23630
    8e90:	10b44904 	addi	r2,r2,-11996
    8e94:	1885883a 	add	r2,r3,r2
    8e98:	e0bffd15 	stw	r2,-12(fp)
    8e9c:	e0bffd17 	ldw	r2,-12(fp)
    8ea0:	1006127a 	roli	r3,r2,9
    8ea4:	e0bffc17 	ldw	r2,-16(fp)
    8ea8:	1885883a 	add	r2,r3,r2
    8eac:	e0bffd15 	stw	r2,-12(fp)
    8eb0:	e0bffa17 	ldw	r2,-24(fp)
    8eb4:	100412ba 	roli	r2,r2,10
    8eb8:	e0bffa15 	stw	r2,-24(fp)
    III(ddd, eee, aaa, bbb, ccc, X[11], 13);
    8ebc:	e0fff917 	ldw	r3,-28(fp)
    8ec0:	e0bffd17 	ldw	r2,-12(fp)
    8ec4:	1886f03a 	xor	r3,r3,r2
    8ec8:	e0bffa17 	ldw	r2,-24(fp)
    8ecc:	1886703a 	and	r3,r3,r2
    8ed0:	e0bff917 	ldw	r2,-28(fp)
    8ed4:	1886f03a 	xor	r3,r3,r2
    8ed8:	e0bfff17 	ldw	r2,-4(fp)
    8edc:	10800b04 	addi	r2,r2,44
    8ee0:	10800017 	ldw	r2,0(r2)
    8ee4:	1887883a 	add	r3,r3,r2
    8ee8:	e0bffc17 	ldw	r2,-16(fp)
    8eec:	1887883a 	add	r3,r3,r2
    8ef0:	009713b4 	movhi	r2,23630
    8ef4:	10b44904 	addi	r2,r2,-11996
    8ef8:	1885883a 	add	r2,r3,r2
    8efc:	e0bffc15 	stw	r2,-16(fp)
    8f00:	e0bffc17 	ldw	r2,-16(fp)
    8f04:	1006137a 	roli	r3,r2,13
    8f08:	e0bffb17 	ldw	r2,-20(fp)
    8f0c:	1885883a 	add	r2,r3,r2
    8f10:	e0bffc15 	stw	r2,-16(fp)
    8f14:	e0bff917 	ldw	r2,-28(fp)
    8f18:	100412ba 	roli	r2,r2,10
    8f1c:	e0bff915 	stw	r2,-28(fp)
    III(ccc, ddd, eee, aaa, bbb, X[3], 15);
    8f20:	e0fffd17 	ldw	r3,-12(fp)
    8f24:	e0bffc17 	ldw	r2,-16(fp)
    8f28:	1886f03a 	xor	r3,r3,r2
    8f2c:	e0bff917 	ldw	r2,-28(fp)
    8f30:	1886703a 	and	r3,r3,r2
    8f34:	e0bffd17 	ldw	r2,-12(fp)
    8f38:	1886f03a 	xor	r3,r3,r2
    8f3c:	e0bfff17 	ldw	r2,-4(fp)
    8f40:	10800304 	addi	r2,r2,12
    8f44:	10800017 	ldw	r2,0(r2)
    8f48:	1887883a 	add	r3,r3,r2
    8f4c:	e0bffb17 	ldw	r2,-20(fp)
    8f50:	1887883a 	add	r3,r3,r2
    8f54:	009713b4 	movhi	r2,23630
    8f58:	10b44904 	addi	r2,r2,-11996
    8f5c:	1885883a 	add	r2,r3,r2
    8f60:	e0bffb15 	stw	r2,-20(fp)
    8f64:	e0bffb17 	ldw	r2,-20(fp)
    8f68:	100613fa 	roli	r3,r2,15
    8f6c:	e0bffa17 	ldw	r2,-24(fp)
    8f70:	1885883a 	add	r2,r3,r2
    8f74:	e0bffb15 	stw	r2,-20(fp)
    8f78:	e0bffd17 	ldw	r2,-12(fp)
    8f7c:	100412ba 	roli	r2,r2,10
    8f80:	e0bffd15 	stw	r2,-12(fp)
    III(bbb, ccc, ddd, eee, aaa, X[7], 7);
    8f84:	e0fffc17 	ldw	r3,-16(fp)
    8f88:	e0bffb17 	ldw	r2,-20(fp)
    8f8c:	1886f03a 	xor	r3,r3,r2
    8f90:	e0bffd17 	ldw	r2,-12(fp)
    8f94:	1886703a 	and	r3,r3,r2
    8f98:	e0bffc17 	ldw	r2,-16(fp)
    8f9c:	1886f03a 	xor	r3,r3,r2
    8fa0:	e0bfff17 	ldw	r2,-4(fp)
    8fa4:	10800704 	addi	r2,r2,28
    8fa8:	10800017 	ldw	r2,0(r2)
    8fac:	1887883a 	add	r3,r3,r2
    8fb0:	e0bffa17 	ldw	r2,-24(fp)
    8fb4:	1887883a 	add	r3,r3,r2
    8fb8:	009713b4 	movhi	r2,23630
    8fbc:	10b44904 	addi	r2,r2,-11996
    8fc0:	1885883a 	add	r2,r3,r2
    8fc4:	e0bffa15 	stw	r2,-24(fp)
    8fc8:	e0bffa17 	ldw	r2,-24(fp)
    8fcc:	100611fa 	roli	r3,r2,7
    8fd0:	e0bff917 	ldw	r2,-28(fp)
    8fd4:	1885883a 	add	r2,r3,r2
    8fd8:	e0bffa15 	stw	r2,-24(fp)
    8fdc:	e0bffc17 	ldw	r2,-16(fp)
    8fe0:	100412ba 	roli	r2,r2,10
    8fe4:	e0bffc15 	stw	r2,-16(fp)
    III(aaa, bbb, ccc, ddd, eee, X[0], 12);
    8fe8:	e0fffb17 	ldw	r3,-20(fp)
    8fec:	e0bffa17 	ldw	r2,-24(fp)
    8ff0:	1886f03a 	xor	r3,r3,r2
    8ff4:	e0bffc17 	ldw	r2,-16(fp)
    8ff8:	1886703a 	and	r3,r3,r2
    8ffc:	e0bffb17 	ldw	r2,-20(fp)
    9000:	1886f03a 	xor	r3,r3,r2
    9004:	e0bfff17 	ldw	r2,-4(fp)
    9008:	10800017 	ldw	r2,0(r2)
    900c:	1887883a 	add	r3,r3,r2
    9010:	e0bff917 	ldw	r2,-28(fp)
    9014:	1887883a 	add	r3,r3,r2
    9018:	009713b4 	movhi	r2,23630
    901c:	10b44904 	addi	r2,r2,-11996
    9020:	1885883a 	add	r2,r3,r2
    9024:	e0bff915 	stw	r2,-28(fp)
    9028:	e0bff917 	ldw	r2,-28(fp)
    902c:	1006133a 	roli	r3,r2,12
    9030:	e0bffd17 	ldw	r2,-12(fp)
    9034:	1885883a 	add	r2,r3,r2
    9038:	e0bff915 	stw	r2,-28(fp)
    903c:	e0bffb17 	ldw	r2,-20(fp)
    9040:	100412ba 	roli	r2,r2,10
    9044:	e0bffb15 	stw	r2,-20(fp)
    III(eee, aaa, bbb, ccc, ddd, X[13], 8);
    9048:	e0fffa17 	ldw	r3,-24(fp)
    904c:	e0bff917 	ldw	r2,-28(fp)
    9050:	1886f03a 	xor	r3,r3,r2
    9054:	e0bffb17 	ldw	r2,-20(fp)
    9058:	1886703a 	and	r3,r3,r2
    905c:	e0bffa17 	ldw	r2,-24(fp)
    9060:	1886f03a 	xor	r3,r3,r2
    9064:	e0bfff17 	ldw	r2,-4(fp)
    9068:	10800d04 	addi	r2,r2,52
    906c:	10800017 	ldw	r2,0(r2)
    9070:	1887883a 	add	r3,r3,r2
    9074:	e0bffd17 	ldw	r2,-12(fp)
    9078:	1887883a 	add	r3,r3,r2
    907c:	009713b4 	movhi	r2,23630
    9080:	10b44904 	addi	r2,r2,-11996
    9084:	1885883a 	add	r2,r3,r2
    9088:	e0bffd15 	stw	r2,-12(fp)
    908c:	e0bffd17 	ldw	r2,-12(fp)
    9090:	1006123a 	roli	r3,r2,8
    9094:	e0bffc17 	ldw	r2,-16(fp)
    9098:	1885883a 	add	r2,r3,r2
    909c:	e0bffd15 	stw	r2,-12(fp)
    90a0:	e0bffa17 	ldw	r2,-24(fp)
    90a4:	100412ba 	roli	r2,r2,10
    90a8:	e0bffa15 	stw	r2,-24(fp)
    III(ddd, eee, aaa, bbb, ccc, X[5], 9);
    90ac:	e0fff917 	ldw	r3,-28(fp)
    90b0:	e0bffd17 	ldw	r2,-12(fp)
    90b4:	1886f03a 	xor	r3,r3,r2
    90b8:	e0bffa17 	ldw	r2,-24(fp)
    90bc:	1886703a 	and	r3,r3,r2
    90c0:	e0bff917 	ldw	r2,-28(fp)
    90c4:	1886f03a 	xor	r3,r3,r2
    90c8:	e0bfff17 	ldw	r2,-4(fp)
    90cc:	10800504 	addi	r2,r2,20
    90d0:	10800017 	ldw	r2,0(r2)
    90d4:	1887883a 	add	r3,r3,r2
    90d8:	e0bffc17 	ldw	r2,-16(fp)
    90dc:	1887883a 	add	r3,r3,r2
    90e0:	009713b4 	movhi	r2,23630
    90e4:	10b44904 	addi	r2,r2,-11996
    90e8:	1885883a 	add	r2,r3,r2
    90ec:	e0bffc15 	stw	r2,-16(fp)
    90f0:	e0bffc17 	ldw	r2,-16(fp)
    90f4:	1006127a 	roli	r3,r2,9
    90f8:	e0bffb17 	ldw	r2,-20(fp)
    90fc:	1885883a 	add	r2,r3,r2
    9100:	e0bffc15 	stw	r2,-16(fp)
    9104:	e0bff917 	ldw	r2,-28(fp)
    9108:	100412ba 	roli	r2,r2,10
    910c:	e0bff915 	stw	r2,-28(fp)
    III(ccc, ddd, eee, aaa, bbb, X[10], 11);
    9110:	e0fffd17 	ldw	r3,-12(fp)
    9114:	e0bffc17 	ldw	r2,-16(fp)
    9118:	1886f03a 	xor	r3,r3,r2
    911c:	e0bff917 	ldw	r2,-28(fp)
    9120:	1886703a 	and	r3,r3,r2
    9124:	e0bffd17 	ldw	r2,-12(fp)
    9128:	1886f03a 	xor	r3,r3,r2
    912c:	e0bfff17 	ldw	r2,-4(fp)
    9130:	10800a04 	addi	r2,r2,40
    9134:	10800017 	ldw	r2,0(r2)
    9138:	1887883a 	add	r3,r3,r2
    913c:	e0bffb17 	ldw	r2,-20(fp)
    9140:	1887883a 	add	r3,r3,r2
    9144:	009713b4 	movhi	r2,23630
    9148:	10b44904 	addi	r2,r2,-11996
    914c:	1885883a 	add	r2,r3,r2
    9150:	e0bffb15 	stw	r2,-20(fp)
    9154:	e0bffb17 	ldw	r2,-20(fp)
    9158:	100612fa 	roli	r3,r2,11
    915c:	e0bffa17 	ldw	r2,-24(fp)
    9160:	1885883a 	add	r2,r3,r2
    9164:	e0bffb15 	stw	r2,-20(fp)
    9168:	e0bffd17 	ldw	r2,-12(fp)
    916c:	100412ba 	roli	r2,r2,10
    9170:	e0bffd15 	stw	r2,-12(fp)
    III(bbb, ccc, ddd, eee, aaa, X[14], 7);
    9174:	e0fffc17 	ldw	r3,-16(fp)
    9178:	e0bffb17 	ldw	r2,-20(fp)
    917c:	1886f03a 	xor	r3,r3,r2
    9180:	e0bffd17 	ldw	r2,-12(fp)
    9184:	1886703a 	and	r3,r3,r2
    9188:	e0bffc17 	ldw	r2,-16(fp)
    918c:	1886f03a 	xor	r3,r3,r2
    9190:	e0bfff17 	ldw	r2,-4(fp)
    9194:	10800e04 	addi	r2,r2,56
    9198:	10800017 	ldw	r2,0(r2)
    919c:	1887883a 	add	r3,r3,r2
    91a0:	e0bffa17 	ldw	r2,-24(fp)
    91a4:	1887883a 	add	r3,r3,r2
    91a8:	009713b4 	movhi	r2,23630
    91ac:	10b44904 	addi	r2,r2,-11996
    91b0:	1885883a 	add	r2,r3,r2
    91b4:	e0bffa15 	stw	r2,-24(fp)
    91b8:	e0bffa17 	ldw	r2,-24(fp)
    91bc:	100611fa 	roli	r3,r2,7
    91c0:	e0bff917 	ldw	r2,-28(fp)
    91c4:	1885883a 	add	r2,r3,r2
    91c8:	e0bffa15 	stw	r2,-24(fp)
    91cc:	e0bffc17 	ldw	r2,-16(fp)
    91d0:	100412ba 	roli	r2,r2,10
    91d4:	e0bffc15 	stw	r2,-16(fp)
    III(aaa, bbb, ccc, ddd, eee, X[15], 7);
    91d8:	e0fffb17 	ldw	r3,-20(fp)
    91dc:	e0bffa17 	ldw	r2,-24(fp)
    91e0:	1886f03a 	xor	r3,r3,r2
    91e4:	e0bffc17 	ldw	r2,-16(fp)
    91e8:	1886703a 	and	r3,r3,r2
    91ec:	e0bffb17 	ldw	r2,-20(fp)
    91f0:	1886f03a 	xor	r3,r3,r2
    91f4:	e0bfff17 	ldw	r2,-4(fp)
    91f8:	10800f04 	addi	r2,r2,60
    91fc:	10800017 	ldw	r2,0(r2)
    9200:	1887883a 	add	r3,r3,r2
    9204:	e0bff917 	ldw	r2,-28(fp)
    9208:	1887883a 	add	r3,r3,r2
    920c:	009713b4 	movhi	r2,23630
    9210:	10b44904 	addi	r2,r2,-11996
    9214:	1885883a 	add	r2,r3,r2
    9218:	e0bff915 	stw	r2,-28(fp)
    921c:	e0bff917 	ldw	r2,-28(fp)
    9220:	100611fa 	roli	r3,r2,7
    9224:	e0bffd17 	ldw	r2,-12(fp)
    9228:	1885883a 	add	r2,r3,r2
    922c:	e0bff915 	stw	r2,-28(fp)
    9230:	e0bffb17 	ldw	r2,-20(fp)
    9234:	100412ba 	roli	r2,r2,10
    9238:	e0bffb15 	stw	r2,-20(fp)
    III(eee, aaa, bbb, ccc, ddd, X[8], 12);
    923c:	e0fffa17 	ldw	r3,-24(fp)
    9240:	e0bff917 	ldw	r2,-28(fp)
    9244:	1886f03a 	xor	r3,r3,r2
    9248:	e0bffb17 	ldw	r2,-20(fp)
    924c:	1886703a 	and	r3,r3,r2
    9250:	e0bffa17 	ldw	r2,-24(fp)
    9254:	1886f03a 	xor	r3,r3,r2
    9258:	e0bfff17 	ldw	r2,-4(fp)
    925c:	10800804 	addi	r2,r2,32
    9260:	10800017 	ldw	r2,0(r2)
    9264:	1887883a 	add	r3,r3,r2
    9268:	e0bffd17 	ldw	r2,-12(fp)
    926c:	1887883a 	add	r3,r3,r2
    9270:	009713b4 	movhi	r2,23630
    9274:	10b44904 	addi	r2,r2,-11996
    9278:	1885883a 	add	r2,r3,r2
    927c:	e0bffd15 	stw	r2,-12(fp)
    9280:	e0bffd17 	ldw	r2,-12(fp)
    9284:	1006133a 	roli	r3,r2,12
    9288:	e0bffc17 	ldw	r2,-16(fp)
    928c:	1885883a 	add	r2,r3,r2
    9290:	e0bffd15 	stw	r2,-12(fp)
    9294:	e0bffa17 	ldw	r2,-24(fp)
    9298:	100412ba 	roli	r2,r2,10
    929c:	e0bffa15 	stw	r2,-24(fp)
    III(ddd, eee, aaa, bbb, ccc, X[12], 7);
    92a0:	e0fff917 	ldw	r3,-28(fp)
    92a4:	e0bffd17 	ldw	r2,-12(fp)
    92a8:	1886f03a 	xor	r3,r3,r2
    92ac:	e0bffa17 	ldw	r2,-24(fp)
    92b0:	1886703a 	and	r3,r3,r2
    92b4:	e0bff917 	ldw	r2,-28(fp)
    92b8:	1886f03a 	xor	r3,r3,r2
    92bc:	e0bfff17 	ldw	r2,-4(fp)
    92c0:	10800c04 	addi	r2,r2,48
    92c4:	10800017 	ldw	r2,0(r2)
    92c8:	1887883a 	add	r3,r3,r2
    92cc:	e0bffc17 	ldw	r2,-16(fp)
    92d0:	1887883a 	add	r3,r3,r2
    92d4:	009713b4 	movhi	r2,23630
    92d8:	10b44904 	addi	r2,r2,-11996
    92dc:	1885883a 	add	r2,r3,r2
    92e0:	e0bffc15 	stw	r2,-16(fp)
    92e4:	e0bffc17 	ldw	r2,-16(fp)
    92e8:	100611fa 	roli	r3,r2,7
    92ec:	e0bffb17 	ldw	r2,-20(fp)
    92f0:	1885883a 	add	r2,r3,r2
    92f4:	e0bffc15 	stw	r2,-16(fp)
    92f8:	e0bff917 	ldw	r2,-28(fp)
    92fc:	100412ba 	roli	r2,r2,10
    9300:	e0bff915 	stw	r2,-28(fp)
    III(ccc, ddd, eee, aaa, bbb, X[4], 6);
    9304:	e0fffd17 	ldw	r3,-12(fp)
    9308:	e0bffc17 	ldw	r2,-16(fp)
    930c:	1886f03a 	xor	r3,r3,r2
    9310:	e0bff917 	ldw	r2,-28(fp)
    9314:	1886703a 	and	r3,r3,r2
    9318:	e0bffd17 	ldw	r2,-12(fp)
    931c:	1886f03a 	xor	r3,r3,r2
    9320:	e0bfff17 	ldw	r2,-4(fp)
    9324:	10800404 	addi	r2,r2,16
    9328:	10800017 	ldw	r2,0(r2)
    932c:	1887883a 	add	r3,r3,r2
    9330:	e0bffb17 	ldw	r2,-20(fp)
    9334:	1887883a 	add	r3,r3,r2
    9338:	009713b4 	movhi	r2,23630
    933c:	10b44904 	addi	r2,r2,-11996
    9340:	1885883a 	add	r2,r3,r2
    9344:	e0bffb15 	stw	r2,-20(fp)
    9348:	e0bffb17 	ldw	r2,-20(fp)
    934c:	100611ba 	roli	r3,r2,6
    9350:	e0bffa17 	ldw	r2,-24(fp)
    9354:	1885883a 	add	r2,r3,r2
    9358:	e0bffb15 	stw	r2,-20(fp)
    935c:	e0bffd17 	ldw	r2,-12(fp)
    9360:	100412ba 	roli	r2,r2,10
    9364:	e0bffd15 	stw	r2,-12(fp)
    III(bbb, ccc, ddd, eee, aaa, X[9], 15);
    9368:	e0fffc17 	ldw	r3,-16(fp)
    936c:	e0bffb17 	ldw	r2,-20(fp)
    9370:	1886f03a 	xor	r3,r3,r2
    9374:	e0bffd17 	ldw	r2,-12(fp)
    9378:	1886703a 	and	r3,r3,r2
    937c:	e0bffc17 	ldw	r2,-16(fp)
    9380:	1886f03a 	xor	r3,r3,r2
    9384:	e0bfff17 	ldw	r2,-4(fp)
    9388:	10800904 	addi	r2,r2,36
    938c:	10800017 	ldw	r2,0(r2)
    9390:	1887883a 	add	r3,r3,r2
    9394:	e0bffa17 	ldw	r2,-24(fp)
    9398:	1887883a 	add	r3,r3,r2
    939c:	009713b4 	movhi	r2,23630
    93a0:	10b44904 	addi	r2,r2,-11996
    93a4:	1885883a 	add	r2,r3,r2
    93a8:	e0bffa15 	stw	r2,-24(fp)
    93ac:	e0bffa17 	ldw	r2,-24(fp)
    93b0:	100613fa 	roli	r3,r2,15
    93b4:	e0bff917 	ldw	r2,-28(fp)
    93b8:	1885883a 	add	r2,r3,r2
    93bc:	e0bffa15 	stw	r2,-24(fp)
    93c0:	e0bffc17 	ldw	r2,-16(fp)
    93c4:	100412ba 	roli	r2,r2,10
    93c8:	e0bffc15 	stw	r2,-16(fp)
    III(aaa, bbb, ccc, ddd, eee, X[1], 13);
    93cc:	e0fffb17 	ldw	r3,-20(fp)
    93d0:	e0bffa17 	ldw	r2,-24(fp)
    93d4:	1886f03a 	xor	r3,r3,r2
    93d8:	e0bffc17 	ldw	r2,-16(fp)
    93dc:	1886703a 	and	r3,r3,r2
    93e0:	e0bffb17 	ldw	r2,-20(fp)
    93e4:	1886f03a 	xor	r3,r3,r2
    93e8:	e0bfff17 	ldw	r2,-4(fp)
    93ec:	10800104 	addi	r2,r2,4
    93f0:	10800017 	ldw	r2,0(r2)
    93f4:	1887883a 	add	r3,r3,r2
    93f8:	e0bff917 	ldw	r2,-28(fp)
    93fc:	1887883a 	add	r3,r3,r2
    9400:	009713b4 	movhi	r2,23630
    9404:	10b44904 	addi	r2,r2,-11996
    9408:	1885883a 	add	r2,r3,r2
    940c:	e0bff915 	stw	r2,-28(fp)
    9410:	e0bff917 	ldw	r2,-28(fp)
    9414:	1006137a 	roli	r3,r2,13
    9418:	e0bffd17 	ldw	r2,-12(fp)
    941c:	1885883a 	add	r2,r3,r2
    9420:	e0bff915 	stw	r2,-28(fp)
    9424:	e0bffb17 	ldw	r2,-20(fp)
    9428:	100412ba 	roli	r2,r2,10
    942c:	e0bffb15 	stw	r2,-20(fp)
    III(eee, aaa, bbb, ccc, ddd, X[2], 11);
    9430:	e0fffa17 	ldw	r3,-24(fp)
    9434:	e0bff917 	ldw	r2,-28(fp)
    9438:	1886f03a 	xor	r3,r3,r2
    943c:	e0bffb17 	ldw	r2,-20(fp)
    9440:	1886703a 	and	r3,r3,r2
    9444:	e0bffa17 	ldw	r2,-24(fp)
    9448:	1886f03a 	xor	r3,r3,r2
    944c:	e0bfff17 	ldw	r2,-4(fp)
    9450:	10800204 	addi	r2,r2,8
    9454:	10800017 	ldw	r2,0(r2)
    9458:	1887883a 	add	r3,r3,r2
    945c:	e0bffd17 	ldw	r2,-12(fp)
    9460:	1887883a 	add	r3,r3,r2
    9464:	009713b4 	movhi	r2,23630
    9468:	10b44904 	addi	r2,r2,-11996
    946c:	1885883a 	add	r2,r3,r2
    9470:	e0bffd15 	stw	r2,-12(fp)
    9474:	e0bffd17 	ldw	r2,-12(fp)
    9478:	100612fa 	roli	r3,r2,11
    947c:	e0bffc17 	ldw	r2,-16(fp)
    9480:	1885883a 	add	r2,r3,r2
    9484:	e0bffd15 	stw	r2,-12(fp)
    9488:	e0bffa17 	ldw	r2,-24(fp)
    948c:	100412ba 	roli	r2,r2,10
    9490:	e0bffa15 	stw	r2,-24(fp)

    /* parallel round 3 */
    HHH(ddd, eee, aaa, bbb, ccc, X[15], 9);
    9494:	e0bff917 	ldw	r2,-28(fp)
    9498:	0086303a 	nor	r3,zero,r2
    949c:	e0bffd17 	ldw	r2,-12(fp)
    94a0:	1886b03a 	or	r3,r3,r2
    94a4:	e0bffa17 	ldw	r2,-24(fp)
    94a8:	1886f03a 	xor	r3,r3,r2
    94ac:	e0bfff17 	ldw	r2,-4(fp)
    94b0:	10800f04 	addi	r2,r2,60
    94b4:	10800017 	ldw	r2,0(r2)
    94b8:	1887883a 	add	r3,r3,r2
    94bc:	e0bffc17 	ldw	r2,-16(fp)
    94c0:	1887883a 	add	r3,r3,r2
    94c4:	009b5c34 	movhi	r2,28016
    94c8:	108fbcc4 	addi	r2,r2,16115
    94cc:	1885883a 	add	r2,r3,r2
    94d0:	e0bffc15 	stw	r2,-16(fp)
    94d4:	e0bffc17 	ldw	r2,-16(fp)
    94d8:	1006127a 	roli	r3,r2,9
    94dc:	e0bffb17 	ldw	r2,-20(fp)
    94e0:	1885883a 	add	r2,r3,r2
    94e4:	e0bffc15 	stw	r2,-16(fp)
    94e8:	e0bff917 	ldw	r2,-28(fp)
    94ec:	100412ba 	roli	r2,r2,10
    94f0:	e0bff915 	stw	r2,-28(fp)
    HHH(ccc, ddd, eee, aaa, bbb, X[5], 7);
    94f4:	e0bffd17 	ldw	r2,-12(fp)
    94f8:	0086303a 	nor	r3,zero,r2
    94fc:	e0bffc17 	ldw	r2,-16(fp)
    9500:	1886b03a 	or	r3,r3,r2
    9504:	e0bff917 	ldw	r2,-28(fp)
    9508:	1886f03a 	xor	r3,r3,r2
    950c:	e0bfff17 	ldw	r2,-4(fp)
    9510:	10800504 	addi	r2,r2,20
    9514:	10800017 	ldw	r2,0(r2)
    9518:	1887883a 	add	r3,r3,r2
    951c:	e0bffb17 	ldw	r2,-20(fp)
    9520:	1887883a 	add	r3,r3,r2
    9524:	009b5c34 	movhi	r2,28016
    9528:	108fbcc4 	addi	r2,r2,16115
    952c:	1885883a 	add	r2,r3,r2
    9530:	e0bffb15 	stw	r2,-20(fp)
    9534:	e0bffb17 	ldw	r2,-20(fp)
    9538:	100611fa 	roli	r3,r2,7
    953c:	e0bffa17 	ldw	r2,-24(fp)
    9540:	1885883a 	add	r2,r3,r2
    9544:	e0bffb15 	stw	r2,-20(fp)
    9548:	e0bffd17 	ldw	r2,-12(fp)
    954c:	100412ba 	roli	r2,r2,10
    9550:	e0bffd15 	stw	r2,-12(fp)
    HHH(bbb, ccc, ddd, eee, aaa, X[1], 15);
    9554:	e0bffc17 	ldw	r2,-16(fp)
    9558:	0086303a 	nor	r3,zero,r2
    955c:	e0bffb17 	ldw	r2,-20(fp)
    9560:	1886b03a 	or	r3,r3,r2
    9564:	e0bffd17 	ldw	r2,-12(fp)
    9568:	1886f03a 	xor	r3,r3,r2
    956c:	e0bfff17 	ldw	r2,-4(fp)
    9570:	10800104 	addi	r2,r2,4
    9574:	10800017 	ldw	r2,0(r2)
    9578:	1887883a 	add	r3,r3,r2
    957c:	e0bffa17 	ldw	r2,-24(fp)
    9580:	1887883a 	add	r3,r3,r2
    9584:	009b5c34 	movhi	r2,28016
    9588:	108fbcc4 	addi	r2,r2,16115
    958c:	1885883a 	add	r2,r3,r2
    9590:	e0bffa15 	stw	r2,-24(fp)
    9594:	e0bffa17 	ldw	r2,-24(fp)
    9598:	100613fa 	roli	r3,r2,15
    959c:	e0bff917 	ldw	r2,-28(fp)
    95a0:	1885883a 	add	r2,r3,r2
    95a4:	e0bffa15 	stw	r2,-24(fp)
    95a8:	e0bffc17 	ldw	r2,-16(fp)
    95ac:	100412ba 	roli	r2,r2,10
    95b0:	e0bffc15 	stw	r2,-16(fp)
    HHH(aaa, bbb, ccc, ddd, eee, X[3], 11);
    95b4:	e0bffb17 	ldw	r2,-20(fp)
    95b8:	0086303a 	nor	r3,zero,r2
    95bc:	e0bffa17 	ldw	r2,-24(fp)
    95c0:	1886b03a 	or	r3,r3,r2
    95c4:	e0bffc17 	ldw	r2,-16(fp)
    95c8:	1886f03a 	xor	r3,r3,r2
    95cc:	e0bfff17 	ldw	r2,-4(fp)
    95d0:	10800304 	addi	r2,r2,12
    95d4:	10800017 	ldw	r2,0(r2)
    95d8:	1887883a 	add	r3,r3,r2
    95dc:	e0bff917 	ldw	r2,-28(fp)
    95e0:	1887883a 	add	r3,r3,r2
    95e4:	009b5c34 	movhi	r2,28016
    95e8:	108fbcc4 	addi	r2,r2,16115
    95ec:	1885883a 	add	r2,r3,r2
    95f0:	e0bff915 	stw	r2,-28(fp)
    95f4:	e0bff917 	ldw	r2,-28(fp)
    95f8:	100612fa 	roli	r3,r2,11
    95fc:	e0bffd17 	ldw	r2,-12(fp)
    9600:	1885883a 	add	r2,r3,r2
    9604:	e0bff915 	stw	r2,-28(fp)
    9608:	e0bffb17 	ldw	r2,-20(fp)
    960c:	100412ba 	roli	r2,r2,10
    9610:	e0bffb15 	stw	r2,-20(fp)
    HHH(eee, aaa, bbb, ccc, ddd, X[7], 8);
    9614:	e0bffa17 	ldw	r2,-24(fp)
    9618:	0086303a 	nor	r3,zero,r2
    961c:	e0bff917 	ldw	r2,-28(fp)
    9620:	1886b03a 	or	r3,r3,r2
    9624:	e0bffb17 	ldw	r2,-20(fp)
    9628:	1886f03a 	xor	r3,r3,r2
    962c:	e0bfff17 	ldw	r2,-4(fp)
    9630:	10800704 	addi	r2,r2,28
    9634:	10800017 	ldw	r2,0(r2)
    9638:	1887883a 	add	r3,r3,r2
    963c:	e0bffd17 	ldw	r2,-12(fp)
    9640:	1887883a 	add	r3,r3,r2
    9644:	009b5c34 	movhi	r2,28016
    9648:	108fbcc4 	addi	r2,r2,16115
    964c:	1885883a 	add	r2,r3,r2
    9650:	e0bffd15 	stw	r2,-12(fp)
    9654:	e0bffd17 	ldw	r2,-12(fp)
    9658:	1006123a 	roli	r3,r2,8
    965c:	e0bffc17 	ldw	r2,-16(fp)
    9660:	1885883a 	add	r2,r3,r2
    9664:	e0bffd15 	stw	r2,-12(fp)
    9668:	e0bffa17 	ldw	r2,-24(fp)
    966c:	100412ba 	roli	r2,r2,10
    9670:	e0bffa15 	stw	r2,-24(fp)
    HHH(ddd, eee, aaa, bbb, ccc, X[14], 6);
    9674:	e0bff917 	ldw	r2,-28(fp)
    9678:	0086303a 	nor	r3,zero,r2
    967c:	e0bffd17 	ldw	r2,-12(fp)
    9680:	1886b03a 	or	r3,r3,r2
    9684:	e0bffa17 	ldw	r2,-24(fp)
    9688:	1886f03a 	xor	r3,r3,r2
    968c:	e0bfff17 	ldw	r2,-4(fp)
    9690:	10800e04 	addi	r2,r2,56
    9694:	10800017 	ldw	r2,0(r2)
    9698:	1887883a 	add	r3,r3,r2
    969c:	e0bffc17 	ldw	r2,-16(fp)
    96a0:	1887883a 	add	r3,r3,r2
    96a4:	009b5c34 	movhi	r2,28016
    96a8:	108fbcc4 	addi	r2,r2,16115
    96ac:	1885883a 	add	r2,r3,r2
    96b0:	e0bffc15 	stw	r2,-16(fp)
    96b4:	e0bffc17 	ldw	r2,-16(fp)
    96b8:	100611ba 	roli	r3,r2,6
    96bc:	e0bffb17 	ldw	r2,-20(fp)
    96c0:	1885883a 	add	r2,r3,r2
    96c4:	e0bffc15 	stw	r2,-16(fp)
    96c8:	e0bff917 	ldw	r2,-28(fp)
    96cc:	100412ba 	roli	r2,r2,10
    96d0:	e0bff915 	stw	r2,-28(fp)
    HHH(ccc, ddd, eee, aaa, bbb, X[6], 6);
    96d4:	e0bffd17 	ldw	r2,-12(fp)
    96d8:	0086303a 	nor	r3,zero,r2
    96dc:	e0bffc17 	ldw	r2,-16(fp)
    96e0:	1886b03a 	or	r3,r3,r2
    96e4:	e0bff917 	ldw	r2,-28(fp)
    96e8:	1886f03a 	xor	r3,r3,r2
    96ec:	e0bfff17 	ldw	r2,-4(fp)
    96f0:	10800604 	addi	r2,r2,24
    96f4:	10800017 	ldw	r2,0(r2)
    96f8:	1887883a 	add	r3,r3,r2
    96fc:	e0bffb17 	ldw	r2,-20(fp)
    9700:	1887883a 	add	r3,r3,r2
    9704:	009b5c34 	movhi	r2,28016
    9708:	108fbcc4 	addi	r2,r2,16115
    970c:	1885883a 	add	r2,r3,r2
    9710:	e0bffb15 	stw	r2,-20(fp)
    9714:	e0bffb17 	ldw	r2,-20(fp)
    9718:	100611ba 	roli	r3,r2,6
    971c:	e0bffa17 	ldw	r2,-24(fp)
    9720:	1885883a 	add	r2,r3,r2
    9724:	e0bffb15 	stw	r2,-20(fp)
    9728:	e0bffd17 	ldw	r2,-12(fp)
    972c:	100412ba 	roli	r2,r2,10
    9730:	e0bffd15 	stw	r2,-12(fp)
    HHH(bbb, ccc, ddd, eee, aaa, X[9], 14);
    9734:	e0bffc17 	ldw	r2,-16(fp)
    9738:	0086303a 	nor	r3,zero,r2
    973c:	e0bffb17 	ldw	r2,-20(fp)
    9740:	1886b03a 	or	r3,r3,r2
    9744:	e0bffd17 	ldw	r2,-12(fp)
    9748:	1886f03a 	xor	r3,r3,r2
    974c:	e0bfff17 	ldw	r2,-4(fp)
    9750:	10800904 	addi	r2,r2,36
    9754:	10800017 	ldw	r2,0(r2)
    9758:	1887883a 	add	r3,r3,r2
    975c:	e0bffa17 	ldw	r2,-24(fp)
    9760:	1887883a 	add	r3,r3,r2
    9764:	009b5c34 	movhi	r2,28016
    9768:	108fbcc4 	addi	r2,r2,16115
    976c:	1885883a 	add	r2,r3,r2
    9770:	e0bffa15 	stw	r2,-24(fp)
    9774:	e0bffa17 	ldw	r2,-24(fp)
    9778:	100613ba 	roli	r3,r2,14
    977c:	e0bff917 	ldw	r2,-28(fp)
    9780:	1885883a 	add	r2,r3,r2
    9784:	e0bffa15 	stw	r2,-24(fp)
    9788:	e0bffc17 	ldw	r2,-16(fp)
    978c:	100412ba 	roli	r2,r2,10
    9790:	e0bffc15 	stw	r2,-16(fp)
    HHH(aaa, bbb, ccc, ddd, eee, X[11], 12);
    9794:	e0bffb17 	ldw	r2,-20(fp)
    9798:	0086303a 	nor	r3,zero,r2
    979c:	e0bffa17 	ldw	r2,-24(fp)
    97a0:	1886b03a 	or	r3,r3,r2
    97a4:	e0bffc17 	ldw	r2,-16(fp)
    97a8:	1886f03a 	xor	r3,r3,r2
    97ac:	e0bfff17 	ldw	r2,-4(fp)
    97b0:	10800b04 	addi	r2,r2,44
    97b4:	10800017 	ldw	r2,0(r2)
    97b8:	1887883a 	add	r3,r3,r2
    97bc:	e0bff917 	ldw	r2,-28(fp)
    97c0:	1887883a 	add	r3,r3,r2
    97c4:	009b5c34 	movhi	r2,28016
    97c8:	108fbcc4 	addi	r2,r2,16115
    97cc:	1885883a 	add	r2,r3,r2
    97d0:	e0bff915 	stw	r2,-28(fp)
    97d4:	e0bff917 	ldw	r2,-28(fp)
    97d8:	1006133a 	roli	r3,r2,12
    97dc:	e0bffd17 	ldw	r2,-12(fp)
    97e0:	1885883a 	add	r2,r3,r2
    97e4:	e0bff915 	stw	r2,-28(fp)
    97e8:	e0bffb17 	ldw	r2,-20(fp)
    97ec:	100412ba 	roli	r2,r2,10
    97f0:	e0bffb15 	stw	r2,-20(fp)
    HHH(eee, aaa, bbb, ccc, ddd, X[8], 13);
    97f4:	e0bffa17 	ldw	r2,-24(fp)
    97f8:	0086303a 	nor	r3,zero,r2
    97fc:	e0bff917 	ldw	r2,-28(fp)
    9800:	1886b03a 	or	r3,r3,r2
    9804:	e0bffb17 	ldw	r2,-20(fp)
    9808:	1886f03a 	xor	r3,r3,r2
    980c:	e0bfff17 	ldw	r2,-4(fp)
    9810:	10800804 	addi	r2,r2,32
    9814:	10800017 	ldw	r2,0(r2)
    9818:	1887883a 	add	r3,r3,r2
    981c:	e0bffd17 	ldw	r2,-12(fp)
    9820:	1887883a 	add	r3,r3,r2
    9824:	009b5c34 	movhi	r2,28016
    9828:	108fbcc4 	addi	r2,r2,16115
    982c:	1885883a 	add	r2,r3,r2
    9830:	e0bffd15 	stw	r2,-12(fp)
    9834:	e0bffd17 	ldw	r2,-12(fp)
    9838:	1006137a 	roli	r3,r2,13
    983c:	e0bffc17 	ldw	r2,-16(fp)
    9840:	1885883a 	add	r2,r3,r2
    9844:	e0bffd15 	stw	r2,-12(fp)
    9848:	e0bffa17 	ldw	r2,-24(fp)
    984c:	100412ba 	roli	r2,r2,10
    9850:	e0bffa15 	stw	r2,-24(fp)
    HHH(ddd, eee, aaa, bbb, ccc, X[12], 5);
    9854:	e0bff917 	ldw	r2,-28(fp)
    9858:	0086303a 	nor	r3,zero,r2
    985c:	e0bffd17 	ldw	r2,-12(fp)
    9860:	1886b03a 	or	r3,r3,r2
    9864:	e0bffa17 	ldw	r2,-24(fp)
    9868:	1886f03a 	xor	r3,r3,r2
    986c:	e0bfff17 	ldw	r2,-4(fp)
    9870:	10800c04 	addi	r2,r2,48
    9874:	10800017 	ldw	r2,0(r2)
    9878:	1887883a 	add	r3,r3,r2
    987c:	e0bffc17 	ldw	r2,-16(fp)
    9880:	1887883a 	add	r3,r3,r2
    9884:	009b5c34 	movhi	r2,28016
    9888:	108fbcc4 	addi	r2,r2,16115
    988c:	1885883a 	add	r2,r3,r2
    9890:	e0bffc15 	stw	r2,-16(fp)
    9894:	e0bffc17 	ldw	r2,-16(fp)
    9898:	1006117a 	roli	r3,r2,5
    989c:	e0bffb17 	ldw	r2,-20(fp)
    98a0:	1885883a 	add	r2,r3,r2
    98a4:	e0bffc15 	stw	r2,-16(fp)
    98a8:	e0bff917 	ldw	r2,-28(fp)
    98ac:	100412ba 	roli	r2,r2,10
    98b0:	e0bff915 	stw	r2,-28(fp)
    HHH(ccc, ddd, eee, aaa, bbb, X[2], 14);
    98b4:	e0bffd17 	ldw	r2,-12(fp)
    98b8:	0086303a 	nor	r3,zero,r2
    98bc:	e0bffc17 	ldw	r2,-16(fp)
    98c0:	1886b03a 	or	r3,r3,r2
    98c4:	e0bff917 	ldw	r2,-28(fp)
    98c8:	1886f03a 	xor	r3,r3,r2
    98cc:	e0bfff17 	ldw	r2,-4(fp)
    98d0:	10800204 	addi	r2,r2,8
    98d4:	10800017 	ldw	r2,0(r2)
    98d8:	1887883a 	add	r3,r3,r2
    98dc:	e0bffb17 	ldw	r2,-20(fp)
    98e0:	1887883a 	add	r3,r3,r2
    98e4:	009b5c34 	movhi	r2,28016
    98e8:	108fbcc4 	addi	r2,r2,16115
    98ec:	1885883a 	add	r2,r3,r2
    98f0:	e0bffb15 	stw	r2,-20(fp)
    98f4:	e0bffb17 	ldw	r2,-20(fp)
    98f8:	100613ba 	roli	r3,r2,14
    98fc:	e0bffa17 	ldw	r2,-24(fp)
    9900:	1885883a 	add	r2,r3,r2
    9904:	e0bffb15 	stw	r2,-20(fp)
    9908:	e0bffd17 	ldw	r2,-12(fp)
    990c:	100412ba 	roli	r2,r2,10
    9910:	e0bffd15 	stw	r2,-12(fp)
    HHH(bbb, ccc, ddd, eee, aaa, X[10], 13);
    9914:	e0bffc17 	ldw	r2,-16(fp)
    9918:	0086303a 	nor	r3,zero,r2
    991c:	e0bffb17 	ldw	r2,-20(fp)
    9920:	1886b03a 	or	r3,r3,r2
    9924:	e0bffd17 	ldw	r2,-12(fp)
    9928:	1886f03a 	xor	r3,r3,r2
    992c:	e0bfff17 	ldw	r2,-4(fp)
    9930:	10800a04 	addi	r2,r2,40
    9934:	10800017 	ldw	r2,0(r2)
    9938:	1887883a 	add	r3,r3,r2
    993c:	e0bffa17 	ldw	r2,-24(fp)
    9940:	1887883a 	add	r3,r3,r2
    9944:	009b5c34 	movhi	r2,28016
    9948:	108fbcc4 	addi	r2,r2,16115
    994c:	1885883a 	add	r2,r3,r2
    9950:	e0bffa15 	stw	r2,-24(fp)
    9954:	e0bffa17 	ldw	r2,-24(fp)
    9958:	1006137a 	roli	r3,r2,13
    995c:	e0bff917 	ldw	r2,-28(fp)
    9960:	1885883a 	add	r2,r3,r2
    9964:	e0bffa15 	stw	r2,-24(fp)
    9968:	e0bffc17 	ldw	r2,-16(fp)
    996c:	100412ba 	roli	r2,r2,10
    9970:	e0bffc15 	stw	r2,-16(fp)
    HHH(aaa, bbb, ccc, ddd, eee, X[0], 13);
    9974:	e0bffb17 	ldw	r2,-20(fp)
    9978:	0086303a 	nor	r3,zero,r2
    997c:	e0bffa17 	ldw	r2,-24(fp)
    9980:	1886b03a 	or	r3,r3,r2
    9984:	e0bffc17 	ldw	r2,-16(fp)
    9988:	1886f03a 	xor	r3,r3,r2
    998c:	e0bfff17 	ldw	r2,-4(fp)
    9990:	10800017 	ldw	r2,0(r2)
    9994:	1887883a 	add	r3,r3,r2
    9998:	e0bff917 	ldw	r2,-28(fp)
    999c:	1887883a 	add	r3,r3,r2
    99a0:	009b5c34 	movhi	r2,28016
    99a4:	108fbcc4 	addi	r2,r2,16115
    99a8:	1885883a 	add	r2,r3,r2
    99ac:	e0bff915 	stw	r2,-28(fp)
    99b0:	e0bff917 	ldw	r2,-28(fp)
    99b4:	1006137a 	roli	r3,r2,13
    99b8:	e0bffd17 	ldw	r2,-12(fp)
    99bc:	1885883a 	add	r2,r3,r2
    99c0:	e0bff915 	stw	r2,-28(fp)
    99c4:	e0bffb17 	ldw	r2,-20(fp)
    99c8:	100412ba 	roli	r2,r2,10
    99cc:	e0bffb15 	stw	r2,-20(fp)
    HHH(eee, aaa, bbb, ccc, ddd, X[4], 7);
    99d0:	e0bffa17 	ldw	r2,-24(fp)
    99d4:	0086303a 	nor	r3,zero,r2
    99d8:	e0bff917 	ldw	r2,-28(fp)
    99dc:	1886b03a 	or	r3,r3,r2
    99e0:	e0bffb17 	ldw	r2,-20(fp)
    99e4:	1886f03a 	xor	r3,r3,r2
    99e8:	e0bfff17 	ldw	r2,-4(fp)
    99ec:	10800404 	addi	r2,r2,16
    99f0:	10800017 	ldw	r2,0(r2)
    99f4:	1887883a 	add	r3,r3,r2
    99f8:	e0bffd17 	ldw	r2,-12(fp)
    99fc:	1887883a 	add	r3,r3,r2
    9a00:	009b5c34 	movhi	r2,28016
    9a04:	108fbcc4 	addi	r2,r2,16115
    9a08:	1885883a 	add	r2,r3,r2
    9a0c:	e0bffd15 	stw	r2,-12(fp)
    9a10:	e0bffd17 	ldw	r2,-12(fp)
    9a14:	100611fa 	roli	r3,r2,7
    9a18:	e0bffc17 	ldw	r2,-16(fp)
    9a1c:	1885883a 	add	r2,r3,r2
    9a20:	e0bffd15 	stw	r2,-12(fp)
    9a24:	e0bffa17 	ldw	r2,-24(fp)
    9a28:	100412ba 	roli	r2,r2,10
    9a2c:	e0bffa15 	stw	r2,-24(fp)
    HHH(ddd, eee, aaa, bbb, ccc, X[13], 5);
    9a30:	e0bff917 	ldw	r2,-28(fp)
    9a34:	0086303a 	nor	r3,zero,r2
    9a38:	e0bffd17 	ldw	r2,-12(fp)
    9a3c:	1886b03a 	or	r3,r3,r2
    9a40:	e0bffa17 	ldw	r2,-24(fp)
    9a44:	1886f03a 	xor	r3,r3,r2
    9a48:	e0bfff17 	ldw	r2,-4(fp)
    9a4c:	10800d04 	addi	r2,r2,52
    9a50:	10800017 	ldw	r2,0(r2)
    9a54:	1887883a 	add	r3,r3,r2
    9a58:	e0bffc17 	ldw	r2,-16(fp)
    9a5c:	1887883a 	add	r3,r3,r2
    9a60:	009b5c34 	movhi	r2,28016
    9a64:	108fbcc4 	addi	r2,r2,16115
    9a68:	1885883a 	add	r2,r3,r2
    9a6c:	e0bffc15 	stw	r2,-16(fp)
    9a70:	e0bffc17 	ldw	r2,-16(fp)
    9a74:	1006117a 	roli	r3,r2,5
    9a78:	e0bffb17 	ldw	r2,-20(fp)
    9a7c:	1885883a 	add	r2,r3,r2
    9a80:	e0bffc15 	stw	r2,-16(fp)
    9a84:	e0bff917 	ldw	r2,-28(fp)
    9a88:	100412ba 	roli	r2,r2,10
    9a8c:	e0bff915 	stw	r2,-28(fp)

    /* parallel round 4 */
    GGG(ccc, ddd, eee, aaa, bbb, X[8], 15);
    9a90:	e0fff917 	ldw	r3,-28(fp)
    9a94:	e0bffd17 	ldw	r2,-12(fp)
    9a98:	1886f03a 	xor	r3,r3,r2
    9a9c:	e0bffc17 	ldw	r2,-16(fp)
    9aa0:	1886703a 	and	r3,r3,r2
    9aa4:	e0bff917 	ldw	r2,-28(fp)
    9aa8:	1886f03a 	xor	r3,r3,r2
    9aac:	e0bfff17 	ldw	r2,-4(fp)
    9ab0:	10800804 	addi	r2,r2,32
    9ab4:	10800017 	ldw	r2,0(r2)
    9ab8:	1887883a 	add	r3,r3,r2
    9abc:	e0bffb17 	ldw	r2,-20(fp)
    9ac0:	1887883a 	add	r3,r3,r2
    9ac4:	009e9b74 	movhi	r2,31341
    9ac8:	109dba44 	addi	r2,r2,30441
    9acc:	1885883a 	add	r2,r3,r2
    9ad0:	e0bffb15 	stw	r2,-20(fp)
    9ad4:	e0bffb17 	ldw	r2,-20(fp)
    9ad8:	100613fa 	roli	r3,r2,15
    9adc:	e0bffa17 	ldw	r2,-24(fp)
    9ae0:	1885883a 	add	r2,r3,r2
    9ae4:	e0bffb15 	stw	r2,-20(fp)
    9ae8:	e0bffd17 	ldw	r2,-12(fp)
    9aec:	100412ba 	roli	r2,r2,10
    9af0:	e0bffd15 	stw	r2,-12(fp)
    GGG(bbb, ccc, ddd, eee, aaa, X[6], 5);
    9af4:	e0fffd17 	ldw	r3,-12(fp)
    9af8:	e0bffc17 	ldw	r2,-16(fp)
    9afc:	1886f03a 	xor	r3,r3,r2
    9b00:	e0bffb17 	ldw	r2,-20(fp)
    9b04:	1886703a 	and	r3,r3,r2
    9b08:	e0bffd17 	ldw	r2,-12(fp)
    9b0c:	1886f03a 	xor	r3,r3,r2
    9b10:	e0bfff17 	ldw	r2,-4(fp)
    9b14:	10800604 	addi	r2,r2,24
    9b18:	10800017 	ldw	r2,0(r2)
    9b1c:	1887883a 	add	r3,r3,r2
    9b20:	e0bffa17 	ldw	r2,-24(fp)
    9b24:	1887883a 	add	r3,r3,r2
    9b28:	009e9b74 	movhi	r2,31341
    9b2c:	109dba44 	addi	r2,r2,30441
    9b30:	1885883a 	add	r2,r3,r2
    9b34:	e0bffa15 	stw	r2,-24(fp)
    9b38:	e0bffa17 	ldw	r2,-24(fp)
    9b3c:	1006117a 	roli	r3,r2,5
    9b40:	e0bff917 	ldw	r2,-28(fp)
    9b44:	1885883a 	add	r2,r3,r2
    9b48:	e0bffa15 	stw	r2,-24(fp)
    9b4c:	e0bffc17 	ldw	r2,-16(fp)
    9b50:	100412ba 	roli	r2,r2,10
    9b54:	e0bffc15 	stw	r2,-16(fp)
    GGG(aaa, bbb, ccc, ddd, eee, X[4], 8);
    9b58:	e0fffc17 	ldw	r3,-16(fp)
    9b5c:	e0bffb17 	ldw	r2,-20(fp)
    9b60:	1886f03a 	xor	r3,r3,r2
    9b64:	e0bffa17 	ldw	r2,-24(fp)
    9b68:	1886703a 	and	r3,r3,r2
    9b6c:	e0bffc17 	ldw	r2,-16(fp)
    9b70:	1886f03a 	xor	r3,r3,r2
    9b74:	e0bfff17 	ldw	r2,-4(fp)
    9b78:	10800404 	addi	r2,r2,16
    9b7c:	10800017 	ldw	r2,0(r2)
    9b80:	1887883a 	add	r3,r3,r2
    9b84:	e0bff917 	ldw	r2,-28(fp)
    9b88:	1887883a 	add	r3,r3,r2
    9b8c:	009e9b74 	movhi	r2,31341
    9b90:	109dba44 	addi	r2,r2,30441
    9b94:	1885883a 	add	r2,r3,r2
    9b98:	e0bff915 	stw	r2,-28(fp)
    9b9c:	e0bff917 	ldw	r2,-28(fp)
    9ba0:	1006123a 	roli	r3,r2,8
    9ba4:	e0bffd17 	ldw	r2,-12(fp)
    9ba8:	1885883a 	add	r2,r3,r2
    9bac:	e0bff915 	stw	r2,-28(fp)
    9bb0:	e0bffb17 	ldw	r2,-20(fp)
    9bb4:	100412ba 	roli	r2,r2,10
    9bb8:	e0bffb15 	stw	r2,-20(fp)
    GGG(eee, aaa, bbb, ccc, ddd, X[1], 11);
    9bbc:	e0fffb17 	ldw	r3,-20(fp)
    9bc0:	e0bffa17 	ldw	r2,-24(fp)
    9bc4:	1886f03a 	xor	r3,r3,r2
    9bc8:	e0bff917 	ldw	r2,-28(fp)
    9bcc:	1886703a 	and	r3,r3,r2
    9bd0:	e0bffb17 	ldw	r2,-20(fp)
    9bd4:	1886f03a 	xor	r3,r3,r2
    9bd8:	e0bfff17 	ldw	r2,-4(fp)
    9bdc:	10800104 	addi	r2,r2,4
    9be0:	10800017 	ldw	r2,0(r2)
    9be4:	1887883a 	add	r3,r3,r2
    9be8:	e0bffd17 	ldw	r2,-12(fp)
    9bec:	1887883a 	add	r3,r3,r2
    9bf0:	009e9b74 	movhi	r2,31341
    9bf4:	109dba44 	addi	r2,r2,30441
    9bf8:	1885883a 	add	r2,r3,r2
    9bfc:	e0bffd15 	stw	r2,-12(fp)
    9c00:	e0bffd17 	ldw	r2,-12(fp)
    9c04:	100612fa 	roli	r3,r2,11
    9c08:	e0bffc17 	ldw	r2,-16(fp)
    9c0c:	1885883a 	add	r2,r3,r2
    9c10:	e0bffd15 	stw	r2,-12(fp)
    9c14:	e0bffa17 	ldw	r2,-24(fp)
    9c18:	100412ba 	roli	r2,r2,10
    9c1c:	e0bffa15 	stw	r2,-24(fp)
    GGG(ddd, eee, aaa, bbb, ccc, X[3], 14);
    9c20:	e0fffa17 	ldw	r3,-24(fp)
    9c24:	e0bff917 	ldw	r2,-28(fp)
    9c28:	1886f03a 	xor	r3,r3,r2
    9c2c:	e0bffd17 	ldw	r2,-12(fp)
    9c30:	1886703a 	and	r3,r3,r2
    9c34:	e0bffa17 	ldw	r2,-24(fp)
    9c38:	1886f03a 	xor	r3,r3,r2
    9c3c:	e0bfff17 	ldw	r2,-4(fp)
    9c40:	10800304 	addi	r2,r2,12
    9c44:	10800017 	ldw	r2,0(r2)
    9c48:	1887883a 	add	r3,r3,r2
    9c4c:	e0bffc17 	ldw	r2,-16(fp)
    9c50:	1887883a 	add	r3,r3,r2
    9c54:	009e9b74 	movhi	r2,31341
    9c58:	109dba44 	addi	r2,r2,30441
    9c5c:	1885883a 	add	r2,r3,r2
    9c60:	e0bffc15 	stw	r2,-16(fp)
    9c64:	e0bffc17 	ldw	r2,-16(fp)
    9c68:	100613ba 	roli	r3,r2,14
    9c6c:	e0bffb17 	ldw	r2,-20(fp)
    9c70:	1885883a 	add	r2,r3,r2
    9c74:	e0bffc15 	stw	r2,-16(fp)
    9c78:	e0bff917 	ldw	r2,-28(fp)
    9c7c:	100412ba 	roli	r2,r2,10
    9c80:	e0bff915 	stw	r2,-28(fp)
    GGG(ccc, ddd, eee, aaa, bbb, X[11], 14);
    9c84:	e0fff917 	ldw	r3,-28(fp)
    9c88:	e0bffd17 	ldw	r2,-12(fp)
    9c8c:	1886f03a 	xor	r3,r3,r2
    9c90:	e0bffc17 	ldw	r2,-16(fp)
    9c94:	1886703a 	and	r3,r3,r2
    9c98:	e0bff917 	ldw	r2,-28(fp)
    9c9c:	1886f03a 	xor	r3,r3,r2
    9ca0:	e0bfff17 	ldw	r2,-4(fp)
    9ca4:	10800b04 	addi	r2,r2,44
    9ca8:	10800017 	ldw	r2,0(r2)
    9cac:	1887883a 	add	r3,r3,r2
    9cb0:	e0bffb17 	ldw	r2,-20(fp)
    9cb4:	1887883a 	add	r3,r3,r2
    9cb8:	009e9b74 	movhi	r2,31341
    9cbc:	109dba44 	addi	r2,r2,30441
    9cc0:	1885883a 	add	r2,r3,r2
    9cc4:	e0bffb15 	stw	r2,-20(fp)
    9cc8:	e0bffb17 	ldw	r2,-20(fp)
    9ccc:	100613ba 	roli	r3,r2,14
    9cd0:	e0bffa17 	ldw	r2,-24(fp)
    9cd4:	1885883a 	add	r2,r3,r2
    9cd8:	e0bffb15 	stw	r2,-20(fp)
    9cdc:	e0bffd17 	ldw	r2,-12(fp)
    9ce0:	100412ba 	roli	r2,r2,10
    9ce4:	e0bffd15 	stw	r2,-12(fp)
    GGG(bbb, ccc, ddd, eee, aaa, X[15], 6);
    9ce8:	e0fffd17 	ldw	r3,-12(fp)
    9cec:	e0bffc17 	ldw	r2,-16(fp)
    9cf0:	1886f03a 	xor	r3,r3,r2
    9cf4:	e0bffb17 	ldw	r2,-20(fp)
    9cf8:	1886703a 	and	r3,r3,r2
    9cfc:	e0bffd17 	ldw	r2,-12(fp)
    9d00:	1886f03a 	xor	r3,r3,r2
    9d04:	e0bfff17 	ldw	r2,-4(fp)
    9d08:	10800f04 	addi	r2,r2,60
    9d0c:	10800017 	ldw	r2,0(r2)
    9d10:	1887883a 	add	r3,r3,r2
    9d14:	e0bffa17 	ldw	r2,-24(fp)
    9d18:	1887883a 	add	r3,r3,r2
    9d1c:	009e9b74 	movhi	r2,31341
    9d20:	109dba44 	addi	r2,r2,30441
    9d24:	1885883a 	add	r2,r3,r2
    9d28:	e0bffa15 	stw	r2,-24(fp)
    9d2c:	e0bffa17 	ldw	r2,-24(fp)
    9d30:	100611ba 	roli	r3,r2,6
    9d34:	e0bff917 	ldw	r2,-28(fp)
    9d38:	1885883a 	add	r2,r3,r2
    9d3c:	e0bffa15 	stw	r2,-24(fp)
    9d40:	e0bffc17 	ldw	r2,-16(fp)
    9d44:	100412ba 	roli	r2,r2,10
    9d48:	e0bffc15 	stw	r2,-16(fp)
    GGG(aaa, bbb, ccc, ddd, eee, X[0], 14);
    9d4c:	e0fffc17 	ldw	r3,-16(fp)
    9d50:	e0bffb17 	ldw	r2,-20(fp)
    9d54:	1886f03a 	xor	r3,r3,r2
    9d58:	e0bffa17 	ldw	r2,-24(fp)
    9d5c:	1886703a 	and	r3,r3,r2
    9d60:	e0bffc17 	ldw	r2,-16(fp)
    9d64:	1886f03a 	xor	r3,r3,r2
    9d68:	e0bfff17 	ldw	r2,-4(fp)
    9d6c:	10800017 	ldw	r2,0(r2)
    9d70:	1887883a 	add	r3,r3,r2
    9d74:	e0bff917 	ldw	r2,-28(fp)
    9d78:	1887883a 	add	r3,r3,r2
    9d7c:	009e9b74 	movhi	r2,31341
    9d80:	109dba44 	addi	r2,r2,30441
    9d84:	1885883a 	add	r2,r3,r2
    9d88:	e0bff915 	stw	r2,-28(fp)
    9d8c:	e0bff917 	ldw	r2,-28(fp)
    9d90:	100613ba 	roli	r3,r2,14
    9d94:	e0bffd17 	ldw	r2,-12(fp)
    9d98:	1885883a 	add	r2,r3,r2
    9d9c:	e0bff915 	stw	r2,-28(fp)
    9da0:	e0bffb17 	ldw	r2,-20(fp)
    9da4:	100412ba 	roli	r2,r2,10
    9da8:	e0bffb15 	stw	r2,-20(fp)
    GGG(eee, aaa, bbb, ccc, ddd, X[5], 6);
    9dac:	e0fffb17 	ldw	r3,-20(fp)
    9db0:	e0bffa17 	ldw	r2,-24(fp)
    9db4:	1886f03a 	xor	r3,r3,r2
    9db8:	e0bff917 	ldw	r2,-28(fp)
    9dbc:	1886703a 	and	r3,r3,r2
    9dc0:	e0bffb17 	ldw	r2,-20(fp)
    9dc4:	1886f03a 	xor	r3,r3,r2
    9dc8:	e0bfff17 	ldw	r2,-4(fp)
    9dcc:	10800504 	addi	r2,r2,20
    9dd0:	10800017 	ldw	r2,0(r2)
    9dd4:	1887883a 	add	r3,r3,r2
    9dd8:	e0bffd17 	ldw	r2,-12(fp)
    9ddc:	1887883a 	add	r3,r3,r2
    9de0:	009e9b74 	movhi	r2,31341
    9de4:	109dba44 	addi	r2,r2,30441
    9de8:	1885883a 	add	r2,r3,r2
    9dec:	e0bffd15 	stw	r2,-12(fp)
    9df0:	e0bffd17 	ldw	r2,-12(fp)
    9df4:	100611ba 	roli	r3,r2,6
    9df8:	e0bffc17 	ldw	r2,-16(fp)
    9dfc:	1885883a 	add	r2,r3,r2
    9e00:	e0bffd15 	stw	r2,-12(fp)
    9e04:	e0bffa17 	ldw	r2,-24(fp)
    9e08:	100412ba 	roli	r2,r2,10
    9e0c:	e0bffa15 	stw	r2,-24(fp)
    GGG(ddd, eee, aaa, bbb, ccc, X[12], 9);
    9e10:	e0fffa17 	ldw	r3,-24(fp)
    9e14:	e0bff917 	ldw	r2,-28(fp)
    9e18:	1886f03a 	xor	r3,r3,r2
    9e1c:	e0bffd17 	ldw	r2,-12(fp)
    9e20:	1886703a 	and	r3,r3,r2
    9e24:	e0bffa17 	ldw	r2,-24(fp)
    9e28:	1886f03a 	xor	r3,r3,r2
    9e2c:	e0bfff17 	ldw	r2,-4(fp)
    9e30:	10800c04 	addi	r2,r2,48
    9e34:	10800017 	ldw	r2,0(r2)
    9e38:	1887883a 	add	r3,r3,r2
    9e3c:	e0bffc17 	ldw	r2,-16(fp)
    9e40:	1887883a 	add	r3,r3,r2
    9e44:	009e9b74 	movhi	r2,31341
    9e48:	109dba44 	addi	r2,r2,30441
    9e4c:	1885883a 	add	r2,r3,r2
    9e50:	e0bffc15 	stw	r2,-16(fp)
    9e54:	e0bffc17 	ldw	r2,-16(fp)
    9e58:	1006127a 	roli	r3,r2,9
    9e5c:	e0bffb17 	ldw	r2,-20(fp)
    9e60:	1885883a 	add	r2,r3,r2
    9e64:	e0bffc15 	stw	r2,-16(fp)
    9e68:	e0bff917 	ldw	r2,-28(fp)
    9e6c:	100412ba 	roli	r2,r2,10
    9e70:	e0bff915 	stw	r2,-28(fp)
    GGG(ccc, ddd, eee, aaa, bbb, X[2], 12);
    9e74:	e0fff917 	ldw	r3,-28(fp)
    9e78:	e0bffd17 	ldw	r2,-12(fp)
    9e7c:	1886f03a 	xor	r3,r3,r2
    9e80:	e0bffc17 	ldw	r2,-16(fp)
    9e84:	1886703a 	and	r3,r3,r2
    9e88:	e0bff917 	ldw	r2,-28(fp)
    9e8c:	1886f03a 	xor	r3,r3,r2
    9e90:	e0bfff17 	ldw	r2,-4(fp)
    9e94:	10800204 	addi	r2,r2,8
    9e98:	10800017 	ldw	r2,0(r2)
    9e9c:	1887883a 	add	r3,r3,r2
    9ea0:	e0bffb17 	ldw	r2,-20(fp)
    9ea4:	1887883a 	add	r3,r3,r2
    9ea8:	009e9b74 	movhi	r2,31341
    9eac:	109dba44 	addi	r2,r2,30441
    9eb0:	1885883a 	add	r2,r3,r2
    9eb4:	e0bffb15 	stw	r2,-20(fp)
    9eb8:	e0bffb17 	ldw	r2,-20(fp)
    9ebc:	1006133a 	roli	r3,r2,12
    9ec0:	e0bffa17 	ldw	r2,-24(fp)
    9ec4:	1885883a 	add	r2,r3,r2
    9ec8:	e0bffb15 	stw	r2,-20(fp)
    9ecc:	e0bffd17 	ldw	r2,-12(fp)
    9ed0:	100412ba 	roli	r2,r2,10
    9ed4:	e0bffd15 	stw	r2,-12(fp)
    GGG(bbb, ccc, ddd, eee, aaa, X[13], 9);
    9ed8:	e0fffd17 	ldw	r3,-12(fp)
    9edc:	e0bffc17 	ldw	r2,-16(fp)
    9ee0:	1886f03a 	xor	r3,r3,r2
    9ee4:	e0bffb17 	ldw	r2,-20(fp)
    9ee8:	1886703a 	and	r3,r3,r2
    9eec:	e0bffd17 	ldw	r2,-12(fp)
    9ef0:	1886f03a 	xor	r3,r3,r2
    9ef4:	e0bfff17 	ldw	r2,-4(fp)
    9ef8:	10800d04 	addi	r2,r2,52
    9efc:	10800017 	ldw	r2,0(r2)
    9f00:	1887883a 	add	r3,r3,r2
    9f04:	e0bffa17 	ldw	r2,-24(fp)
    9f08:	1887883a 	add	r3,r3,r2
    9f0c:	009e9b74 	movhi	r2,31341
    9f10:	109dba44 	addi	r2,r2,30441
    9f14:	1885883a 	add	r2,r3,r2
    9f18:	e0bffa15 	stw	r2,-24(fp)
    9f1c:	e0bffa17 	ldw	r2,-24(fp)
    9f20:	1006127a 	roli	r3,r2,9
    9f24:	e0bff917 	ldw	r2,-28(fp)
    9f28:	1885883a 	add	r2,r3,r2
    9f2c:	e0bffa15 	stw	r2,-24(fp)
    9f30:	e0bffc17 	ldw	r2,-16(fp)
    9f34:	100412ba 	roli	r2,r2,10
    9f38:	e0bffc15 	stw	r2,-16(fp)
    GGG(aaa, bbb, ccc, ddd, eee, X[9], 12);
    9f3c:	e0fffc17 	ldw	r3,-16(fp)
    9f40:	e0bffb17 	ldw	r2,-20(fp)
    9f44:	1886f03a 	xor	r3,r3,r2
    9f48:	e0bffa17 	ldw	r2,-24(fp)
    9f4c:	1886703a 	and	r3,r3,r2
    9f50:	e0bffc17 	ldw	r2,-16(fp)
    9f54:	1886f03a 	xor	r3,r3,r2
    9f58:	e0bfff17 	ldw	r2,-4(fp)
    9f5c:	10800904 	addi	r2,r2,36
    9f60:	10800017 	ldw	r2,0(r2)
    9f64:	1887883a 	add	r3,r3,r2
    9f68:	e0bff917 	ldw	r2,-28(fp)
    9f6c:	1887883a 	add	r3,r3,r2
    9f70:	009e9b74 	movhi	r2,31341
    9f74:	109dba44 	addi	r2,r2,30441
    9f78:	1885883a 	add	r2,r3,r2
    9f7c:	e0bff915 	stw	r2,-28(fp)
    9f80:	e0bff917 	ldw	r2,-28(fp)
    9f84:	1006133a 	roli	r3,r2,12
    9f88:	e0bffd17 	ldw	r2,-12(fp)
    9f8c:	1885883a 	add	r2,r3,r2
    9f90:	e0bff915 	stw	r2,-28(fp)
    9f94:	e0bffb17 	ldw	r2,-20(fp)
    9f98:	100412ba 	roli	r2,r2,10
    9f9c:	e0bffb15 	stw	r2,-20(fp)
    GGG(eee, aaa, bbb, ccc, ddd, X[7], 5);
    9fa0:	e0fffb17 	ldw	r3,-20(fp)
    9fa4:	e0bffa17 	ldw	r2,-24(fp)
    9fa8:	1886f03a 	xor	r3,r3,r2
    9fac:	e0bff917 	ldw	r2,-28(fp)
    9fb0:	1886703a 	and	r3,r3,r2
    9fb4:	e0bffb17 	ldw	r2,-20(fp)
    9fb8:	1886f03a 	xor	r3,r3,r2
    9fbc:	e0bfff17 	ldw	r2,-4(fp)
    9fc0:	10800704 	addi	r2,r2,28
    9fc4:	10800017 	ldw	r2,0(r2)
    9fc8:	1887883a 	add	r3,r3,r2
    9fcc:	e0bffd17 	ldw	r2,-12(fp)
    9fd0:	1887883a 	add	r3,r3,r2
    9fd4:	009e9b74 	movhi	r2,31341
    9fd8:	109dba44 	addi	r2,r2,30441
    9fdc:	1885883a 	add	r2,r3,r2
    9fe0:	e0bffd15 	stw	r2,-12(fp)
    9fe4:	e0bffd17 	ldw	r2,-12(fp)
    9fe8:	1006117a 	roli	r3,r2,5
    9fec:	e0bffc17 	ldw	r2,-16(fp)
    9ff0:	1885883a 	add	r2,r3,r2
    9ff4:	e0bffd15 	stw	r2,-12(fp)
    9ff8:	e0bffa17 	ldw	r2,-24(fp)
    9ffc:	100412ba 	roli	r2,r2,10
    a000:	e0bffa15 	stw	r2,-24(fp)
    GGG(ddd, eee, aaa, bbb, ccc, X[10], 15);
    a004:	e0fffa17 	ldw	r3,-24(fp)
    a008:	e0bff917 	ldw	r2,-28(fp)
    a00c:	1886f03a 	xor	r3,r3,r2
    a010:	e0bffd17 	ldw	r2,-12(fp)
    a014:	1886703a 	and	r3,r3,r2
    a018:	e0bffa17 	ldw	r2,-24(fp)
    a01c:	1886f03a 	xor	r3,r3,r2
    a020:	e0bfff17 	ldw	r2,-4(fp)
    a024:	10800a04 	addi	r2,r2,40
    a028:	10800017 	ldw	r2,0(r2)
    a02c:	1887883a 	add	r3,r3,r2
    a030:	e0bffc17 	ldw	r2,-16(fp)
    a034:	1887883a 	add	r3,r3,r2
    a038:	009e9b74 	movhi	r2,31341
    a03c:	109dba44 	addi	r2,r2,30441
    a040:	1885883a 	add	r2,r3,r2
    a044:	e0bffc15 	stw	r2,-16(fp)
    a048:	e0bffc17 	ldw	r2,-16(fp)
    a04c:	100613fa 	roli	r3,r2,15
    a050:	e0bffb17 	ldw	r2,-20(fp)
    a054:	1885883a 	add	r2,r3,r2
    a058:	e0bffc15 	stw	r2,-16(fp)
    a05c:	e0bff917 	ldw	r2,-28(fp)
    a060:	100412ba 	roli	r2,r2,10
    a064:	e0bff915 	stw	r2,-28(fp)
    GGG(ccc, ddd, eee, aaa, bbb, X[14], 8);
    a068:	e0fff917 	ldw	r3,-28(fp)
    a06c:	e0bffd17 	ldw	r2,-12(fp)
    a070:	1886f03a 	xor	r3,r3,r2
    a074:	e0bffc17 	ldw	r2,-16(fp)
    a078:	1886703a 	and	r3,r3,r2
    a07c:	e0bff917 	ldw	r2,-28(fp)
    a080:	1886f03a 	xor	r3,r3,r2
    a084:	e0bfff17 	ldw	r2,-4(fp)
    a088:	10800e04 	addi	r2,r2,56
    a08c:	10800017 	ldw	r2,0(r2)
    a090:	1887883a 	add	r3,r3,r2
    a094:	e0bffb17 	ldw	r2,-20(fp)
    a098:	1887883a 	add	r3,r3,r2
    a09c:	009e9b74 	movhi	r2,31341
    a0a0:	109dba44 	addi	r2,r2,30441
    a0a4:	1885883a 	add	r2,r3,r2
    a0a8:	e0bffb15 	stw	r2,-20(fp)
    a0ac:	e0bffb17 	ldw	r2,-20(fp)
    a0b0:	1006123a 	roli	r3,r2,8
    a0b4:	e0bffa17 	ldw	r2,-24(fp)
    a0b8:	1885883a 	add	r2,r3,r2
    a0bc:	e0bffb15 	stw	r2,-20(fp)
    a0c0:	e0bffd17 	ldw	r2,-12(fp)
    a0c4:	100412ba 	roli	r2,r2,10
    a0c8:	e0bffd15 	stw	r2,-12(fp)

    /* parallel round 5 */
    FFF(bbb, ccc, ddd, eee, aaa, X[12], 8);
    a0cc:	e0fffb17 	ldw	r3,-20(fp)
    a0d0:	e0bffc17 	ldw	r2,-16(fp)
    a0d4:	1886f03a 	xor	r3,r3,r2
    a0d8:	e0bffd17 	ldw	r2,-12(fp)
    a0dc:	1886f03a 	xor	r3,r3,r2
    a0e0:	e0bfff17 	ldw	r2,-4(fp)
    a0e4:	10800c04 	addi	r2,r2,48
    a0e8:	10800017 	ldw	r2,0(r2)
    a0ec:	1885883a 	add	r2,r3,r2
    a0f0:	e0fffa17 	ldw	r3,-24(fp)
    a0f4:	1885883a 	add	r2,r3,r2
    a0f8:	e0bffa15 	stw	r2,-24(fp)
    a0fc:	e0bffa17 	ldw	r2,-24(fp)
    a100:	1006123a 	roli	r3,r2,8
    a104:	e0bff917 	ldw	r2,-28(fp)
    a108:	1885883a 	add	r2,r3,r2
    a10c:	e0bffa15 	stw	r2,-24(fp)
    a110:	e0bffc17 	ldw	r2,-16(fp)
    a114:	100412ba 	roli	r2,r2,10
    a118:	e0bffc15 	stw	r2,-16(fp)
    FFF(aaa, bbb, ccc, ddd, eee, X[15], 5);
    a11c:	e0fffa17 	ldw	r3,-24(fp)
    a120:	e0bffb17 	ldw	r2,-20(fp)
    a124:	1886f03a 	xor	r3,r3,r2
    a128:	e0bffc17 	ldw	r2,-16(fp)
    a12c:	1886f03a 	xor	r3,r3,r2
    a130:	e0bfff17 	ldw	r2,-4(fp)
    a134:	10800f04 	addi	r2,r2,60
    a138:	10800017 	ldw	r2,0(r2)
    a13c:	1885883a 	add	r2,r3,r2
    a140:	e0fff917 	ldw	r3,-28(fp)
    a144:	1885883a 	add	r2,r3,r2
    a148:	e0bff915 	stw	r2,-28(fp)
    a14c:	e0bff917 	ldw	r2,-28(fp)
    a150:	1006117a 	roli	r3,r2,5
    a154:	e0bffd17 	ldw	r2,-12(fp)
    a158:	1885883a 	add	r2,r3,r2
    a15c:	e0bff915 	stw	r2,-28(fp)
    a160:	e0bffb17 	ldw	r2,-20(fp)
    a164:	100412ba 	roli	r2,r2,10
    a168:	e0bffb15 	stw	r2,-20(fp)
    FFF(eee, aaa, bbb, ccc, ddd, X[10], 12);
    a16c:	e0fff917 	ldw	r3,-28(fp)
    a170:	e0bffa17 	ldw	r2,-24(fp)
    a174:	1886f03a 	xor	r3,r3,r2
    a178:	e0bffb17 	ldw	r2,-20(fp)
    a17c:	1886f03a 	xor	r3,r3,r2
    a180:	e0bfff17 	ldw	r2,-4(fp)
    a184:	10800a04 	addi	r2,r2,40
    a188:	10800017 	ldw	r2,0(r2)
    a18c:	1885883a 	add	r2,r3,r2
    a190:	e0fffd17 	ldw	r3,-12(fp)
    a194:	1885883a 	add	r2,r3,r2
    a198:	e0bffd15 	stw	r2,-12(fp)
    a19c:	e0bffd17 	ldw	r2,-12(fp)
    a1a0:	1006133a 	roli	r3,r2,12
    a1a4:	e0bffc17 	ldw	r2,-16(fp)
    a1a8:	1885883a 	add	r2,r3,r2
    a1ac:	e0bffd15 	stw	r2,-12(fp)
    a1b0:	e0bffa17 	ldw	r2,-24(fp)
    a1b4:	100412ba 	roli	r2,r2,10
    a1b8:	e0bffa15 	stw	r2,-24(fp)
    FFF(ddd, eee, aaa, bbb, ccc, X[4], 9);
    a1bc:	e0fffd17 	ldw	r3,-12(fp)
    a1c0:	e0bff917 	ldw	r2,-28(fp)
    a1c4:	1886f03a 	xor	r3,r3,r2
    a1c8:	e0bffa17 	ldw	r2,-24(fp)
    a1cc:	1886f03a 	xor	r3,r3,r2
    a1d0:	e0bfff17 	ldw	r2,-4(fp)
    a1d4:	10800404 	addi	r2,r2,16
    a1d8:	10800017 	ldw	r2,0(r2)
    a1dc:	1885883a 	add	r2,r3,r2
    a1e0:	e0fffc17 	ldw	r3,-16(fp)
    a1e4:	1885883a 	add	r2,r3,r2
    a1e8:	e0bffc15 	stw	r2,-16(fp)
    a1ec:	e0bffc17 	ldw	r2,-16(fp)
    a1f0:	1006127a 	roli	r3,r2,9
    a1f4:	e0bffb17 	ldw	r2,-20(fp)
    a1f8:	1885883a 	add	r2,r3,r2
    a1fc:	e0bffc15 	stw	r2,-16(fp)
    a200:	e0bff917 	ldw	r2,-28(fp)
    a204:	100412ba 	roli	r2,r2,10
    a208:	e0bff915 	stw	r2,-28(fp)
    FFF(ccc, ddd, eee, aaa, bbb, X[1], 12);
    a20c:	e0fffc17 	ldw	r3,-16(fp)
    a210:	e0bffd17 	ldw	r2,-12(fp)
    a214:	1886f03a 	xor	r3,r3,r2
    a218:	e0bff917 	ldw	r2,-28(fp)
    a21c:	1886f03a 	xor	r3,r3,r2
    a220:	e0bfff17 	ldw	r2,-4(fp)
    a224:	10800104 	addi	r2,r2,4
    a228:	10800017 	ldw	r2,0(r2)
    a22c:	1885883a 	add	r2,r3,r2
    a230:	e0fffb17 	ldw	r3,-20(fp)
    a234:	1885883a 	add	r2,r3,r2
    a238:	e0bffb15 	stw	r2,-20(fp)
    a23c:	e0bffb17 	ldw	r2,-20(fp)
    a240:	1006133a 	roli	r3,r2,12
    a244:	e0bffa17 	ldw	r2,-24(fp)
    a248:	1885883a 	add	r2,r3,r2
    a24c:	e0bffb15 	stw	r2,-20(fp)
    a250:	e0bffd17 	ldw	r2,-12(fp)
    a254:	100412ba 	roli	r2,r2,10
    a258:	e0bffd15 	stw	r2,-12(fp)
    FFF(bbb, ccc, ddd, eee, aaa, X[5], 5);
    a25c:	e0fffb17 	ldw	r3,-20(fp)
    a260:	e0bffc17 	ldw	r2,-16(fp)
    a264:	1886f03a 	xor	r3,r3,r2
    a268:	e0bffd17 	ldw	r2,-12(fp)
    a26c:	1886f03a 	xor	r3,r3,r2
    a270:	e0bfff17 	ldw	r2,-4(fp)
    a274:	10800504 	addi	r2,r2,20
    a278:	10800017 	ldw	r2,0(r2)
    a27c:	1885883a 	add	r2,r3,r2
    a280:	e0fffa17 	ldw	r3,-24(fp)
    a284:	1885883a 	add	r2,r3,r2
    a288:	e0bffa15 	stw	r2,-24(fp)
    a28c:	e0bffa17 	ldw	r2,-24(fp)
    a290:	1006117a 	roli	r3,r2,5
    a294:	e0bff917 	ldw	r2,-28(fp)
    a298:	1885883a 	add	r2,r3,r2
    a29c:	e0bffa15 	stw	r2,-24(fp)
    a2a0:	e0bffc17 	ldw	r2,-16(fp)
    a2a4:	100412ba 	roli	r2,r2,10
    a2a8:	e0bffc15 	stw	r2,-16(fp)
    FFF(aaa, bbb, ccc, ddd, eee, X[8], 14);
    a2ac:	e0fffa17 	ldw	r3,-24(fp)
    a2b0:	e0bffb17 	ldw	r2,-20(fp)
    a2b4:	1886f03a 	xor	r3,r3,r2
    a2b8:	e0bffc17 	ldw	r2,-16(fp)
    a2bc:	1886f03a 	xor	r3,r3,r2
    a2c0:	e0bfff17 	ldw	r2,-4(fp)
    a2c4:	10800804 	addi	r2,r2,32
    a2c8:	10800017 	ldw	r2,0(r2)
    a2cc:	1885883a 	add	r2,r3,r2
    a2d0:	e0fff917 	ldw	r3,-28(fp)
    a2d4:	1885883a 	add	r2,r3,r2
    a2d8:	e0bff915 	stw	r2,-28(fp)
    a2dc:	e0bff917 	ldw	r2,-28(fp)
    a2e0:	100613ba 	roli	r3,r2,14
    a2e4:	e0bffd17 	ldw	r2,-12(fp)
    a2e8:	1885883a 	add	r2,r3,r2
    a2ec:	e0bff915 	stw	r2,-28(fp)
    a2f0:	e0bffb17 	ldw	r2,-20(fp)
    a2f4:	100412ba 	roli	r2,r2,10
    a2f8:	e0bffb15 	stw	r2,-20(fp)
    FFF(eee, aaa, bbb, ccc, ddd, X[7], 6);
    a2fc:	e0fff917 	ldw	r3,-28(fp)
    a300:	e0bffa17 	ldw	r2,-24(fp)
    a304:	1886f03a 	xor	r3,r3,r2
    a308:	e0bffb17 	ldw	r2,-20(fp)
    a30c:	1886f03a 	xor	r3,r3,r2
    a310:	e0bfff17 	ldw	r2,-4(fp)
    a314:	10800704 	addi	r2,r2,28
    a318:	10800017 	ldw	r2,0(r2)
    a31c:	1885883a 	add	r2,r3,r2
    a320:	e0fffd17 	ldw	r3,-12(fp)
    a324:	1885883a 	add	r2,r3,r2
    a328:	e0bffd15 	stw	r2,-12(fp)
    a32c:	e0bffd17 	ldw	r2,-12(fp)
    a330:	100611ba 	roli	r3,r2,6
    a334:	e0bffc17 	ldw	r2,-16(fp)
    a338:	1885883a 	add	r2,r3,r2
    a33c:	e0bffd15 	stw	r2,-12(fp)
    a340:	e0bffa17 	ldw	r2,-24(fp)
    a344:	100412ba 	roli	r2,r2,10
    a348:	e0bffa15 	stw	r2,-24(fp)
    FFF(ddd, eee, aaa, bbb, ccc, X[6], 8);
    a34c:	e0fffd17 	ldw	r3,-12(fp)
    a350:	e0bff917 	ldw	r2,-28(fp)
    a354:	1886f03a 	xor	r3,r3,r2
    a358:	e0bffa17 	ldw	r2,-24(fp)
    a35c:	1886f03a 	xor	r3,r3,r2
    a360:	e0bfff17 	ldw	r2,-4(fp)
    a364:	10800604 	addi	r2,r2,24
    a368:	10800017 	ldw	r2,0(r2)
    a36c:	1885883a 	add	r2,r3,r2
    a370:	e0fffc17 	ldw	r3,-16(fp)
    a374:	1885883a 	add	r2,r3,r2
    a378:	e0bffc15 	stw	r2,-16(fp)
    a37c:	e0bffc17 	ldw	r2,-16(fp)
    a380:	1006123a 	roli	r3,r2,8
    a384:	e0bffb17 	ldw	r2,-20(fp)
    a388:	1885883a 	add	r2,r3,r2
    a38c:	e0bffc15 	stw	r2,-16(fp)
    a390:	e0bff917 	ldw	r2,-28(fp)
    a394:	100412ba 	roli	r2,r2,10
    a398:	e0bff915 	stw	r2,-28(fp)
    FFF(ccc, ddd, eee, aaa, bbb, X[2], 13);
    a39c:	e0fffc17 	ldw	r3,-16(fp)
    a3a0:	e0bffd17 	ldw	r2,-12(fp)
    a3a4:	1886f03a 	xor	r3,r3,r2
    a3a8:	e0bff917 	ldw	r2,-28(fp)
    a3ac:	1886f03a 	xor	r3,r3,r2
    a3b0:	e0bfff17 	ldw	r2,-4(fp)
    a3b4:	10800204 	addi	r2,r2,8
    a3b8:	10800017 	ldw	r2,0(r2)
    a3bc:	1885883a 	add	r2,r3,r2
    a3c0:	e0fffb17 	ldw	r3,-20(fp)
    a3c4:	1885883a 	add	r2,r3,r2
    a3c8:	e0bffb15 	stw	r2,-20(fp)
    a3cc:	e0bffb17 	ldw	r2,-20(fp)
    a3d0:	1006137a 	roli	r3,r2,13
    a3d4:	e0bffa17 	ldw	r2,-24(fp)
    a3d8:	1885883a 	add	r2,r3,r2
    a3dc:	e0bffb15 	stw	r2,-20(fp)
    a3e0:	e0bffd17 	ldw	r2,-12(fp)
    a3e4:	100412ba 	roli	r2,r2,10
    a3e8:	e0bffd15 	stw	r2,-12(fp)
    FFF(bbb, ccc, ddd, eee, aaa, X[13], 6);
    a3ec:	e0fffb17 	ldw	r3,-20(fp)
    a3f0:	e0bffc17 	ldw	r2,-16(fp)
    a3f4:	1886f03a 	xor	r3,r3,r2
    a3f8:	e0bffd17 	ldw	r2,-12(fp)
    a3fc:	1886f03a 	xor	r3,r3,r2
    a400:	e0bfff17 	ldw	r2,-4(fp)
    a404:	10800d04 	addi	r2,r2,52
    a408:	10800017 	ldw	r2,0(r2)
    a40c:	1885883a 	add	r2,r3,r2
    a410:	e0fffa17 	ldw	r3,-24(fp)
    a414:	1885883a 	add	r2,r3,r2
    a418:	e0bffa15 	stw	r2,-24(fp)
    a41c:	e0bffa17 	ldw	r2,-24(fp)
    a420:	100611ba 	roli	r3,r2,6
    a424:	e0bff917 	ldw	r2,-28(fp)
    a428:	1885883a 	add	r2,r3,r2
    a42c:	e0bffa15 	stw	r2,-24(fp)
    a430:	e0bffc17 	ldw	r2,-16(fp)
    a434:	100412ba 	roli	r2,r2,10
    a438:	e0bffc15 	stw	r2,-16(fp)
    FFF(aaa, bbb, ccc, ddd, eee, X[14], 5);
    a43c:	e0fffa17 	ldw	r3,-24(fp)
    a440:	e0bffb17 	ldw	r2,-20(fp)
    a444:	1886f03a 	xor	r3,r3,r2
    a448:	e0bffc17 	ldw	r2,-16(fp)
    a44c:	1886f03a 	xor	r3,r3,r2
    a450:	e0bfff17 	ldw	r2,-4(fp)
    a454:	10800e04 	addi	r2,r2,56
    a458:	10800017 	ldw	r2,0(r2)
    a45c:	1885883a 	add	r2,r3,r2
    a460:	e0fff917 	ldw	r3,-28(fp)
    a464:	1885883a 	add	r2,r3,r2
    a468:	e0bff915 	stw	r2,-28(fp)
    a46c:	e0bff917 	ldw	r2,-28(fp)
    a470:	1006117a 	roli	r3,r2,5
    a474:	e0bffd17 	ldw	r2,-12(fp)
    a478:	1885883a 	add	r2,r3,r2
    a47c:	e0bff915 	stw	r2,-28(fp)
    a480:	e0bffb17 	ldw	r2,-20(fp)
    a484:	100412ba 	roli	r2,r2,10
    a488:	e0bffb15 	stw	r2,-20(fp)
    FFF(eee, aaa, bbb, ccc, ddd, X[0], 15);
    a48c:	e0fff917 	ldw	r3,-28(fp)
    a490:	e0bffa17 	ldw	r2,-24(fp)
    a494:	1886f03a 	xor	r3,r3,r2
    a498:	e0bffb17 	ldw	r2,-20(fp)
    a49c:	1886f03a 	xor	r3,r3,r2
    a4a0:	e0bfff17 	ldw	r2,-4(fp)
    a4a4:	10800017 	ldw	r2,0(r2)
    a4a8:	1885883a 	add	r2,r3,r2
    a4ac:	e0fffd17 	ldw	r3,-12(fp)
    a4b0:	1885883a 	add	r2,r3,r2
    a4b4:	e0bffd15 	stw	r2,-12(fp)
    a4b8:	e0bffd17 	ldw	r2,-12(fp)
    a4bc:	100613fa 	roli	r3,r2,15
    a4c0:	e0bffc17 	ldw	r2,-16(fp)
    a4c4:	1885883a 	add	r2,r3,r2
    a4c8:	e0bffd15 	stw	r2,-12(fp)
    a4cc:	e0bffa17 	ldw	r2,-24(fp)
    a4d0:	100412ba 	roli	r2,r2,10
    a4d4:	e0bffa15 	stw	r2,-24(fp)
    FFF(ddd, eee, aaa, bbb, ccc, X[3], 13);
    a4d8:	e0fffd17 	ldw	r3,-12(fp)
    a4dc:	e0bff917 	ldw	r2,-28(fp)
    a4e0:	1886f03a 	xor	r3,r3,r2
    a4e4:	e0bffa17 	ldw	r2,-24(fp)
    a4e8:	1886f03a 	xor	r3,r3,r2
    a4ec:	e0bfff17 	ldw	r2,-4(fp)
    a4f0:	10800304 	addi	r2,r2,12
    a4f4:	10800017 	ldw	r2,0(r2)
    a4f8:	1885883a 	add	r2,r3,r2
    a4fc:	e0fffc17 	ldw	r3,-16(fp)
    a500:	1885883a 	add	r2,r3,r2
    a504:	e0bffc15 	stw	r2,-16(fp)
    a508:	e0bffc17 	ldw	r2,-16(fp)
    a50c:	1006137a 	roli	r3,r2,13
    a510:	e0bffb17 	ldw	r2,-20(fp)
    a514:	1885883a 	add	r2,r3,r2
    a518:	e0bffc15 	stw	r2,-16(fp)
    a51c:	e0bff917 	ldw	r2,-28(fp)
    a520:	100412ba 	roli	r2,r2,10
    a524:	e0bff915 	stw	r2,-28(fp)
    FFF(ccc, ddd, eee, aaa, bbb, X[9], 11);
    a528:	e0fffc17 	ldw	r3,-16(fp)
    a52c:	e0bffd17 	ldw	r2,-12(fp)
    a530:	1886f03a 	xor	r3,r3,r2
    a534:	e0bff917 	ldw	r2,-28(fp)
    a538:	1886f03a 	xor	r3,r3,r2
    a53c:	e0bfff17 	ldw	r2,-4(fp)
    a540:	10800904 	addi	r2,r2,36
    a544:	10800017 	ldw	r2,0(r2)
    a548:	1885883a 	add	r2,r3,r2
    a54c:	e0fffb17 	ldw	r3,-20(fp)
    a550:	1885883a 	add	r2,r3,r2
    a554:	e0bffb15 	stw	r2,-20(fp)
    a558:	e0bffb17 	ldw	r2,-20(fp)
    a55c:	100612fa 	roli	r3,r2,11
    a560:	e0bffa17 	ldw	r2,-24(fp)
    a564:	1885883a 	add	r2,r3,r2
    a568:	e0bffb15 	stw	r2,-20(fp)
    a56c:	e0bffd17 	ldw	r2,-12(fp)
    a570:	100412ba 	roli	r2,r2,10
    a574:	e0bffd15 	stw	r2,-12(fp)
    FFF(bbb, ccc, ddd, eee, aaa, X[11], 11);
    a578:	e0fffb17 	ldw	r3,-20(fp)
    a57c:	e0bffc17 	ldw	r2,-16(fp)
    a580:	1886f03a 	xor	r3,r3,r2
    a584:	e0bffd17 	ldw	r2,-12(fp)
    a588:	1886f03a 	xor	r3,r3,r2
    a58c:	e0bfff17 	ldw	r2,-4(fp)
    a590:	10800b04 	addi	r2,r2,44
    a594:	10800017 	ldw	r2,0(r2)
    a598:	1885883a 	add	r2,r3,r2
    a59c:	e0fffa17 	ldw	r3,-24(fp)
    a5a0:	1885883a 	add	r2,r3,r2
    a5a4:	e0bffa15 	stw	r2,-24(fp)
    a5a8:	e0bffa17 	ldw	r2,-24(fp)
    a5ac:	100612fa 	roli	r3,r2,11
    a5b0:	e0bff917 	ldw	r2,-28(fp)
    a5b4:	1885883a 	add	r2,r3,r2
    a5b8:	e0bffa15 	stw	r2,-24(fp)
    a5bc:	e0bffc17 	ldw	r2,-16(fp)
    a5c0:	100412ba 	roli	r2,r2,10
    a5c4:	e0bffc15 	stw	r2,-16(fp)

    /* combine results */
    ddd += cc + MDbuf[1];
    a5c8:	e0bffe17 	ldw	r2,-8(fp)
    a5cc:	10800104 	addi	r2,r2,4
    a5d0:	10c00017 	ldw	r3,0(r2)
    a5d4:	e0bff617 	ldw	r2,-40(fp)
    a5d8:	1885883a 	add	r2,r3,r2
    a5dc:	e0fffc17 	ldw	r3,-16(fp)
    a5e0:	1885883a 	add	r2,r3,r2
    a5e4:	e0bffc15 	stw	r2,-16(fp)
    MDbuf[1] = MDbuf[2] + dd + eee;
    a5e8:	e0bffe17 	ldw	r2,-8(fp)
    a5ec:	10800104 	addi	r2,r2,4
    a5f0:	e0fffe17 	ldw	r3,-8(fp)
    a5f4:	18c00204 	addi	r3,r3,8
    a5f8:	19000017 	ldw	r4,0(r3)
    a5fc:	e0fff717 	ldw	r3,-36(fp)
    a600:	20c9883a 	add	r4,r4,r3
    a604:	e0fffd17 	ldw	r3,-12(fp)
    a608:	20c7883a 	add	r3,r4,r3
    a60c:	10c00015 	stw	r3,0(r2)
    MDbuf[2] = MDbuf[3] + ee + aaa;
    a610:	e0bffe17 	ldw	r2,-8(fp)
    a614:	10800204 	addi	r2,r2,8
    a618:	e0fffe17 	ldw	r3,-8(fp)
    a61c:	18c00304 	addi	r3,r3,12
    a620:	19000017 	ldw	r4,0(r3)
    a624:	e0fff817 	ldw	r3,-32(fp)
    a628:	20c9883a 	add	r4,r4,r3
    a62c:	e0fff917 	ldw	r3,-28(fp)
    a630:	20c7883a 	add	r3,r4,r3
    a634:	10c00015 	stw	r3,0(r2)
    MDbuf[3] = MDbuf[4] + aa + bbb;
    a638:	e0bffe17 	ldw	r2,-8(fp)
    a63c:	10800304 	addi	r2,r2,12
    a640:	e0fffe17 	ldw	r3,-8(fp)
    a644:	18c00404 	addi	r3,r3,16
    a648:	19000017 	ldw	r4,0(r3)
    a64c:	e0fff417 	ldw	r3,-48(fp)
    a650:	20c9883a 	add	r4,r4,r3
    a654:	e0fffa17 	ldw	r3,-24(fp)
    a658:	20c7883a 	add	r3,r4,r3
    a65c:	10c00015 	stw	r3,0(r2)
    MDbuf[4] = MDbuf[0] + bb + ccc;
    a660:	e0bffe17 	ldw	r2,-8(fp)
    a664:	10800404 	addi	r2,r2,16
    a668:	e0fffe17 	ldw	r3,-8(fp)
    a66c:	19000017 	ldw	r4,0(r3)
    a670:	e0fff517 	ldw	r3,-44(fp)
    a674:	20c9883a 	add	r4,r4,r3
    a678:	e0fffb17 	ldw	r3,-20(fp)
    a67c:	20c7883a 	add	r3,r4,r3
    a680:	10c00015 	stw	r3,0(r2)
    MDbuf[0] = ddd;
    a684:	e0bffe17 	ldw	r2,-8(fp)
    a688:	e0fffc17 	ldw	r3,-16(fp)
    a68c:	10c00015 	stw	r3,0(r2)
}
    a690:	0001883a 	nop
    a694:	e037883a 	mov	sp,fp
    a698:	df000017 	ldw	fp,0(sp)
    a69c:	dec00104 	addi	sp,sp,4
    a6a0:	f800283a 	ret

0000a6a4 <btc_ripemd160>:

void btc_ripemd160(const uint8_t* msg, uint32_t msg_len, uint8_t* hash)
{
    a6a4:	deffe404 	addi	sp,sp,-112
    a6a8:	dfc01b15 	stw	ra,108(sp)
    a6ac:	df001a15 	stw	fp,104(sp)
    a6b0:	df001a04 	addi	fp,sp,104
    a6b4:	e13ffd15 	stw	r4,-12(fp)
    a6b8:	e17ffe15 	stw	r5,-8(fp)
    a6bc:	e1bfff15 	stw	r6,-4(fp)
    uint32_t i;
    int j;
    uint32_t digest[5] = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0UL};
    a6c0:	0099d174 	movhi	r2,26437
    a6c4:	1088c044 	addi	r2,r2,8961
    a6c8:	e0bfe815 	stw	r2,-96(fp)
    a6cc:	00bbf3b4 	movhi	r2,61390
    a6d0:	10aae244 	addi	r2,r2,-21623
    a6d4:	e0bfe915 	stw	r2,-92(fp)
    a6d8:	00a62ef4 	movhi	r2,39099
    a6dc:	10b73f84 	addi	r2,r2,-8962
    a6e0:	e0bfea15 	stw	r2,-88(fp)
    a6e4:	00840cb4 	movhi	r2,4146
    a6e8:	10951d84 	addi	r2,r2,21622
    a6ec:	e0bfeb15 	stw	r2,-84(fp)
    a6f0:	00b0f4f4 	movhi	r2,50131
    a6f4:	10b87c04 	addi	r2,r2,-7696
    a6f8:	e0bfec15 	stw	r2,-80(fp)

    for (i = 0; i < (msg_len >> 6); ++i) {
    a6fc:	e03fe615 	stw	zero,-104(fp)
    a700:	00005b06 	br	a870 <btc_ripemd160+0x1cc>
        uint32_t chunk[16];

        for (j = 0; j < 16; ++j) {
    a704:	e03fe715 	stw	zero,-100(fp)
    a708:	00004e06 	br	a844 <btc_ripemd160+0x1a0>
            chunk[j] = (uint32_t)(*(msg++));
    a70c:	e0bffd17 	ldw	r2,-12(fp)
    a710:	10c00044 	addi	r3,r2,1
    a714:	e0fffd15 	stw	r3,-12(fp)
    a718:	10800003 	ldbu	r2,0(r2)
    a71c:	10c03fcc 	andi	r3,r2,255
    a720:	e0bfe717 	ldw	r2,-100(fp)
    a724:	1085883a 	add	r2,r2,r2
    a728:	1085883a 	add	r2,r2,r2
    a72c:	e13fe604 	addi	r4,fp,-104
    a730:	2085883a 	add	r2,r4,r2
    a734:	10800704 	addi	r2,r2,28
    a738:	10c00015 	stw	r3,0(r2)
            chunk[j] |= (uint32_t)(*(msg++)) << 8;
    a73c:	e0bffd17 	ldw	r2,-12(fp)
    a740:	10c00044 	addi	r3,r2,1
    a744:	e0fffd15 	stw	r3,-12(fp)
    a748:	10800003 	ldbu	r2,0(r2)
    a74c:	10803fcc 	andi	r2,r2,255
    a750:	1006923a 	slli	r3,r2,8
    a754:	e0bfe717 	ldw	r2,-100(fp)
    a758:	1085883a 	add	r2,r2,r2
    a75c:	1085883a 	add	r2,r2,r2
    a760:	e17fe604 	addi	r5,fp,-104
    a764:	2885883a 	add	r2,r5,r2
    a768:	10800704 	addi	r2,r2,28
    a76c:	10800017 	ldw	r2,0(r2)
    a770:	10c6b03a 	or	r3,r2,r3
    a774:	e0bfe717 	ldw	r2,-100(fp)
    a778:	1085883a 	add	r2,r2,r2
    a77c:	1085883a 	add	r2,r2,r2
    a780:	e13fe604 	addi	r4,fp,-104
    a784:	2085883a 	add	r2,r4,r2
    a788:	10800704 	addi	r2,r2,28
    a78c:	10c00015 	stw	r3,0(r2)
            chunk[j] |= (uint32_t)(*(msg++)) << 16;
    a790:	e0bffd17 	ldw	r2,-12(fp)
    a794:	10c00044 	addi	r3,r2,1
    a798:	e0fffd15 	stw	r3,-12(fp)
    a79c:	10800003 	ldbu	r2,0(r2)
    a7a0:	10803fcc 	andi	r2,r2,255
    a7a4:	1006943a 	slli	r3,r2,16
    a7a8:	e0bfe717 	ldw	r2,-100(fp)
    a7ac:	1085883a 	add	r2,r2,r2
    a7b0:	1085883a 	add	r2,r2,r2
    a7b4:	e17fe604 	addi	r5,fp,-104
    a7b8:	2885883a 	add	r2,r5,r2
    a7bc:	10800704 	addi	r2,r2,28
    a7c0:	10800017 	ldw	r2,0(r2)
    a7c4:	10c6b03a 	or	r3,r2,r3
    a7c8:	e0bfe717 	ldw	r2,-100(fp)
    a7cc:	1085883a 	add	r2,r2,r2
    a7d0:	1085883a 	add	r2,r2,r2
    a7d4:	e13fe604 	addi	r4,fp,-104
    a7d8:	2085883a 	add	r2,r4,r2
    a7dc:	10800704 	addi	r2,r2,28
    a7e0:	10c00015 	stw	r3,0(r2)
            chunk[j] |= (uint32_t)(*(msg++)) << 24;
    a7e4:	e0bffd17 	ldw	r2,-12(fp)
    a7e8:	10c00044 	addi	r3,r2,1
    a7ec:	e0fffd15 	stw	r3,-12(fp)
    a7f0:	10800003 	ldbu	r2,0(r2)
    a7f4:	10803fcc 	andi	r2,r2,255
    a7f8:	1006963a 	slli	r3,r2,24
    a7fc:	e0bfe717 	ldw	r2,-100(fp)
    a800:	1085883a 	add	r2,r2,r2
    a804:	1085883a 	add	r2,r2,r2
    a808:	e17fe604 	addi	r5,fp,-104
    a80c:	2885883a 	add	r2,r5,r2
    a810:	10800704 	addi	r2,r2,28
    a814:	10800017 	ldw	r2,0(r2)
    a818:	10c6b03a 	or	r3,r2,r3
    a81c:	e0bfe717 	ldw	r2,-100(fp)
    a820:	1085883a 	add	r2,r2,r2
    a824:	1085883a 	add	r2,r2,r2
    a828:	e13fe604 	addi	r4,fp,-104
    a82c:	2085883a 	add	r2,r4,r2
    a830:	10800704 	addi	r2,r2,28
    a834:	10c00015 	stw	r3,0(r2)
    uint32_t digest[5] = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0UL};

    for (i = 0; i < (msg_len >> 6); ++i) {
        uint32_t chunk[16];

        for (j = 0; j < 16; ++j) {
    a838:	e0bfe717 	ldw	r2,-100(fp)
    a83c:	10800044 	addi	r2,r2,1
    a840:	e0bfe715 	stw	r2,-100(fp)
    a844:	e0bfe717 	ldw	r2,-100(fp)
    a848:	10800410 	cmplti	r2,r2,16
    a84c:	103faf1e 	bne	r2,zero,a70c <__alt_mem_epcs_flash_controller+0xfdff970c>
            chunk[j] |= (uint32_t)(*(msg++)) << 8;
            chunk[j] |= (uint32_t)(*(msg++)) << 16;
            chunk[j] |= (uint32_t)(*(msg++)) << 24;
        }

        compress(digest, chunk);
    a850:	e0ffed04 	addi	r3,fp,-76
    a854:	e0bfe804 	addi	r2,fp,-96
    a858:	180b883a 	mov	r5,r3
    a85c:	1009883a 	mov	r4,r2
    a860:	0006a640 	call	6a64 <compress>
{
    uint32_t i;
    int j;
    uint32_t digest[5] = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0UL};

    for (i = 0; i < (msg_len >> 6); ++i) {
    a864:	e0bfe617 	ldw	r2,-104(fp)
    a868:	10800044 	addi	r2,r2,1
    a86c:	e0bfe615 	stw	r2,-104(fp)
    a870:	e0bffe17 	ldw	r2,-8(fp)
    a874:	1004d1ba 	srli	r2,r2,6
    a878:	e0ffe617 	ldw	r3,-104(fp)
    a87c:	18bfa136 	bltu	r3,r2,a704 <__alt_mem_epcs_flash_controller+0xfdff9704>
        compress(digest, chunk);
    }

    // Last chunk
    {
        uint32_t chunk[16] = {0};
    a880:	e0bfed04 	addi	r2,fp,-76
    a884:	00c01004 	movi	r3,64
    a888:	180d883a 	mov	r6,r3
    a88c:	000b883a 	mov	r5,zero
    a890:	1009883a 	mov	r4,r2
    a894:	0045f3c0 	call	45f3c <memset>

        for (i = 0; i < (msg_len & 63); ++i) {
    a898:	e03fe615 	stw	zero,-104(fp)
    a89c:	00001d06 	br	a914 <btc_ripemd160+0x270>
            chunk[i >> 2] ^= (uint32_t)*msg++ << ((i & 3) << 3);
    a8a0:	e0bffd17 	ldw	r2,-12(fp)
    a8a4:	10c00044 	addi	r3,r2,1
    a8a8:	e0fffd15 	stw	r3,-12(fp)
    a8ac:	10800003 	ldbu	r2,0(r2)
    a8b0:	10c03fcc 	andi	r3,r2,255
    a8b4:	e0bfe617 	ldw	r2,-104(fp)
    a8b8:	108000cc 	andi	r2,r2,3
    a8bc:	100490fa 	slli	r2,r2,3
    a8c0:	1888983a 	sll	r4,r3,r2
    a8c4:	e0bfe617 	ldw	r2,-104(fp)
    a8c8:	1004d0ba 	srli	r2,r2,2
    a8cc:	e0ffe617 	ldw	r3,-104(fp)
    a8d0:	1806d0ba 	srli	r3,r3,2
    a8d4:	18c7883a 	add	r3,r3,r3
    a8d8:	18c7883a 	add	r3,r3,r3
    a8dc:	e17fe604 	addi	r5,fp,-104
    a8e0:	28c7883a 	add	r3,r5,r3
    a8e4:	18c00704 	addi	r3,r3,28
    a8e8:	18c00017 	ldw	r3,0(r3)
    a8ec:	1906f03a 	xor	r3,r3,r4
    a8f0:	1085883a 	add	r2,r2,r2
    a8f4:	1085883a 	add	r2,r2,r2
    a8f8:	e13fe604 	addi	r4,fp,-104
    a8fc:	2085883a 	add	r2,r4,r2
    a900:	10800704 	addi	r2,r2,28
    a904:	10c00015 	stw	r3,0(r2)

    // Last chunk
    {
        uint32_t chunk[16] = {0};

        for (i = 0; i < (msg_len & 63); ++i) {
    a908:	e0bfe617 	ldw	r2,-104(fp)
    a90c:	10800044 	addi	r2,r2,1
    a910:	e0bfe615 	stw	r2,-104(fp)
    a914:	e0bffe17 	ldw	r2,-8(fp)
    a918:	10800fcc 	andi	r2,r2,63
    a91c:	e0ffe617 	ldw	r3,-104(fp)
    a920:	18bfdf36 	bltu	r3,r2,a8a0 <__alt_mem_epcs_flash_controller+0xfdff98a0>
            chunk[i >> 2] ^= (uint32_t)*msg++ << ((i & 3) << 3);
        }

        chunk[(msg_len >> 2) & 15] ^= (uint32_t)1 << (8 * (msg_len & 3) + 7);
    a924:	e0bffe17 	ldw	r2,-8(fp)
    a928:	1004d0ba 	srli	r2,r2,2
    a92c:	108003cc 	andi	r2,r2,15
    a930:	e0fffe17 	ldw	r3,-8(fp)
    a934:	1806d0ba 	srli	r3,r3,2
    a938:	18c003cc 	andi	r3,r3,15
    a93c:	18c7883a 	add	r3,r3,r3
    a940:	18c7883a 	add	r3,r3,r3
    a944:	e17fe604 	addi	r5,fp,-104
    a948:	28c7883a 	add	r3,r5,r3
    a94c:	18c00704 	addi	r3,r3,28
    a950:	19000017 	ldw	r4,0(r3)
    a954:	e0fffe17 	ldw	r3,-8(fp)
    a958:	18c000cc 	andi	r3,r3,3
    a95c:	180690fa 	slli	r3,r3,3
    a960:	18c001c4 	addi	r3,r3,7
    a964:	01400044 	movi	r5,1
    a968:	28c6983a 	sll	r3,r5,r3
    a96c:	20c6f03a 	xor	r3,r4,r3
    a970:	1085883a 	add	r2,r2,r2
    a974:	1085883a 	add	r2,r2,r2
    a978:	e13fe604 	addi	r4,fp,-104
    a97c:	2085883a 	add	r2,r4,r2
    a980:	10800704 	addi	r2,r2,28
    a984:	10c00015 	stw	r3,0(r2)

        if ((msg_len & 63) > 55) {
    a988:	e0bffe17 	ldw	r2,-8(fp)
    a98c:	10800fcc 	andi	r2,r2,63
    a990:	10800e30 	cmpltui	r2,r2,56
    a994:	10000a1e 	bne	r2,zero,a9c0 <btc_ripemd160+0x31c>
            compress(digest, chunk);
    a998:	e0ffed04 	addi	r3,fp,-76
    a99c:	e0bfe804 	addi	r2,fp,-96
    a9a0:	180b883a 	mov	r5,r3
    a9a4:	1009883a 	mov	r4,r2
    a9a8:	0006a640 	call	6a64 <compress>
            memset(chunk, 0, 64);
    a9ac:	e0bfed04 	addi	r2,fp,-76
    a9b0:	01801004 	movi	r6,64
    a9b4:	000b883a 	mov	r5,zero
    a9b8:	1009883a 	mov	r4,r2
    a9bc:	0045f3c0 	call	45f3c <memset>
        }

        chunk[14] = msg_len << 3;
    a9c0:	e0bffe17 	ldw	r2,-8(fp)
    a9c4:	100490fa 	slli	r2,r2,3
    a9c8:	e0bffb15 	stw	r2,-20(fp)
        chunk[15] = (msg_len >> 29);
    a9cc:	e0bffe17 	ldw	r2,-8(fp)
    a9d0:	1004d77a 	srli	r2,r2,29
    a9d4:	e0bffc15 	stw	r2,-16(fp)
        compress(digest, chunk);
    a9d8:	e0ffed04 	addi	r3,fp,-76
    a9dc:	e0bfe804 	addi	r2,fp,-96
    a9e0:	180b883a 	mov	r5,r3
    a9e4:	1009883a 	mov	r4,r2
    a9e8:	0006a640 	call	6a64 <compress>
    }

    for (i = 0; i < 5; ++i) {
    a9ec:	e03fe615 	stw	zero,-104(fp)
    a9f0:	00003206 	br	aabc <btc_ripemd160+0x418>
        *(hash++) = digest[i];
    a9f4:	e0bfff17 	ldw	r2,-4(fp)
    a9f8:	10c00044 	addi	r3,r2,1
    a9fc:	e0ffff15 	stw	r3,-4(fp)
    aa00:	e0ffe617 	ldw	r3,-104(fp)
    aa04:	18c7883a 	add	r3,r3,r3
    aa08:	18c7883a 	add	r3,r3,r3
    aa0c:	e17fe604 	addi	r5,fp,-104
    aa10:	28c7883a 	add	r3,r5,r3
    aa14:	18c00204 	addi	r3,r3,8
    aa18:	18c00017 	ldw	r3,0(r3)
    aa1c:	10c00005 	stb	r3,0(r2)
        *(hash++) = digest[i] >> 8;
    aa20:	e0bfff17 	ldw	r2,-4(fp)
    aa24:	10c00044 	addi	r3,r2,1
    aa28:	e0ffff15 	stw	r3,-4(fp)
    aa2c:	e0ffe617 	ldw	r3,-104(fp)
    aa30:	18c7883a 	add	r3,r3,r3
    aa34:	18c7883a 	add	r3,r3,r3
    aa38:	e13fe604 	addi	r4,fp,-104
    aa3c:	20c7883a 	add	r3,r4,r3
    aa40:	18c00204 	addi	r3,r3,8
    aa44:	18c00017 	ldw	r3,0(r3)
    aa48:	1806d23a 	srli	r3,r3,8
    aa4c:	10c00005 	stb	r3,0(r2)
        *(hash++) = digest[i] >> 16;
    aa50:	e0bfff17 	ldw	r2,-4(fp)
    aa54:	10c00044 	addi	r3,r2,1
    aa58:	e0ffff15 	stw	r3,-4(fp)
    aa5c:	e0ffe617 	ldw	r3,-104(fp)
    aa60:	18c7883a 	add	r3,r3,r3
    aa64:	18c7883a 	add	r3,r3,r3
    aa68:	e17fe604 	addi	r5,fp,-104
    aa6c:	28c7883a 	add	r3,r5,r3
    aa70:	18c00204 	addi	r3,r3,8
    aa74:	18c00017 	ldw	r3,0(r3)
    aa78:	1806d43a 	srli	r3,r3,16
    aa7c:	10c00005 	stb	r3,0(r2)
        *(hash++) = digest[i] >> 24;
    aa80:	e0bfff17 	ldw	r2,-4(fp)
    aa84:	10c00044 	addi	r3,r2,1
    aa88:	e0ffff15 	stw	r3,-4(fp)
    aa8c:	e0ffe617 	ldw	r3,-104(fp)
    aa90:	18c7883a 	add	r3,r3,r3
    aa94:	18c7883a 	add	r3,r3,r3
    aa98:	e13fe604 	addi	r4,fp,-104
    aa9c:	20c7883a 	add	r3,r4,r3
    aaa0:	18c00204 	addi	r3,r3,8
    aaa4:	18c00017 	ldw	r3,0(r3)
    aaa8:	1806d63a 	srli	r3,r3,24
    aaac:	10c00005 	stb	r3,0(r2)
        chunk[14] = msg_len << 3;
        chunk[15] = (msg_len >> 29);
        compress(digest, chunk);
    }

    for (i = 0; i < 5; ++i) {
    aab0:	e0bfe617 	ldw	r2,-104(fp)
    aab4:	10800044 	addi	r2,r2,1
    aab8:	e0bfe615 	stw	r2,-104(fp)
    aabc:	e0bfe617 	ldw	r2,-104(fp)
    aac0:	10800170 	cmpltui	r2,r2,5
    aac4:	103fcb1e 	bne	r2,zero,a9f4 <__alt_mem_epcs_flash_controller+0xfdff99f4>
        *(hash++) = digest[i];
        *(hash++) = digest[i] >> 8;
        *(hash++) = digest[i] >> 16;
        *(hash++) = digest[i] >> 24;
    }
}
    aac8:	0001883a 	nop
    aacc:	e037883a 	mov	sp,fp
    aad0:	dfc00117 	ldw	ra,4(sp)
    aad4:	df000017 	ldw	fp,0(sp)
    aad8:	dec00204 	addi	sp,sp,8
    aadc:	f800283a 	ret

0000aae0 <btc_hash_sngl_sha256>:
    sha256_Raw(hashout, SHA256_DIGEST_LENGTH, hashout);
}

//single sha256 hash
LIBBTC_API static inline void btc_hash_sngl_sha256(const unsigned char* datain, size_t length, uint256 hashout)
{
    aae0:	defffb04 	addi	sp,sp,-20
    aae4:	dfc00415 	stw	ra,16(sp)
    aae8:	df000315 	stw	fp,12(sp)
    aaec:	df000304 	addi	fp,sp,12
    aaf0:	e13ffd15 	stw	r4,-12(fp)
    aaf4:	e17ffe15 	stw	r5,-8(fp)
    aaf8:	e1bfff15 	stw	r6,-4(fp)
    sha256_Raw(datain, length, hashout);
    aafc:	e1bfff17 	ldw	r6,-4(fp)
    ab00:	e17ffe17 	ldw	r5,-8(fp)
    ab04:	e13ffd17 	ldw	r4,-12(fp)
    ab08:	003eb140 	call	3eb14 <sha256_Raw>
}
    ab0c:	0001883a 	nop
    ab10:	e037883a 	mov	sp,fp
    ab14:	dfc00117 	ldw	ra,4(sp)
    ab18:	df000017 	ldw	fp,0(sp)
    ab1c:	dec00204 	addi	sp,sp,8
    ab20:	f800283a 	ret

0000ab24 <btc_script_copy_without_op_codeseperator>:
#include "..\include\btc\ripemd160.h"
#include "..\include\btc\serialize.h"


btc_bool btc_script_copy_without_op_codeseperator(const cstring* script_in, cstring* script_out)
{
    ab24:	deffec04 	addi	sp,sp,-80
    ab28:	dfc01315 	stw	ra,76(sp)
    ab2c:	df001215 	stw	fp,72(sp)
    ab30:	ddc01115 	stw	r23,68(sp)
    ab34:	dd801015 	stw	r22,64(sp)
    ab38:	dd400f15 	stw	r21,60(sp)
    ab3c:	dd000e15 	stw	r20,56(sp)
    ab40:	dcc00d15 	stw	r19,52(sp)
    ab44:	dc800c15 	stw	r18,48(sp)
    ab48:	dc400b15 	stw	r17,44(sp)
    ab4c:	dc000a15 	stw	r16,40(sp)
    ab50:	df001204 	addi	fp,sp,72
    ab54:	e13ff515 	stw	r4,-44(fp)
    ab58:	e17ff615 	stw	r5,-40(fp)
    if (script_in->len == 0)
    ab5c:	e0bff517 	ldw	r2,-44(fp)
    ab60:	10800117 	ldw	r2,4(r2)
    ab64:	1000021e 	bne	r2,zero,ab70 <btc_script_copy_without_op_codeseperator+0x4c>
        return false; /* EOF */
    ab68:	0005883a 	mov	r2,zero
    ab6c:	0000b206 	br	ae38 <btc_script_copy_without_op_codeseperator+0x314>

    struct const_buffer buf = {script_in->str, script_in->len};
    ab70:	e0bff517 	ldw	r2,-44(fp)
    ab74:	10800017 	ldw	r2,0(r2)
    ab78:	e0bff115 	stw	r2,-60(fp)
    ab7c:	e0bff517 	ldw	r2,-44(fp)
    ab80:	10800117 	ldw	r2,4(r2)
    ab84:	e0bff215 	stw	r2,-56(fp)
    unsigned char opcode;
    while (buf.len > 0) {
    ab88:	00009f06 	br	ae08 <btc_script_copy_without_op_codeseperator+0x2e4>
        if (!deser_bytes(&opcode, &buf, 1))
    ab8c:	e0fff104 	addi	r3,fp,-60
    ab90:	e0bff304 	addi	r2,fp,-52
    ab94:	01800044 	movi	r6,1
    ab98:	180b883a 	mov	r5,r3
    ab9c:	1009883a 	mov	r4,r2
    aba0:	003d8e80 	call	3d8e8 <deser_bytes>
    aba4:	10009c26 	beq	r2,zero,ae18 <btc_script_copy_without_op_codeseperator+0x2f4>
            goto err_out;

        uint32_t data_len = 0;
    aba8:	e03fee15 	stw	zero,-72(fp)

        if (opcode < OP_PUSHDATA1 && opcode > OP_0) {
    abac:	e0bff303 	ldbu	r2,-52(fp)
    abb0:	10803fcc 	andi	r2,r2,255
    abb4:	10801328 	cmpgeui	r2,r2,76
    abb8:	10000c1e 	bne	r2,zero,abec <btc_script_copy_without_op_codeseperator+0xc8>
    abbc:	e0bff303 	ldbu	r2,-52(fp)
    abc0:	10803fcc 	andi	r2,r2,255
    abc4:	10000926 	beq	r2,zero,abec <btc_script_copy_without_op_codeseperator+0xc8>
            data_len = opcode;
    abc8:	e0bff303 	ldbu	r2,-52(fp)
    abcc:	10803fcc 	andi	r2,r2,255
    abd0:	e0bfee15 	stw	r2,-72(fp)
            cstr_append_buf(script_out, &opcode, 1);
    abd4:	e0bff304 	addi	r2,fp,-52
    abd8:	01800044 	movi	r6,1
    abdc:	100b883a 	mov	r5,r2
    abe0:	e13ff617 	ldw	r4,-40(fp)
    abe4:	00425700 	call	42570 <cstr_append_buf>
    abe8:	00004d06 	br	ad20 <btc_script_copy_without_op_codeseperator+0x1fc>
        } else if (opcode == OP_PUSHDATA1) {
    abec:	e0bff303 	ldbu	r2,-52(fp)
    abf0:	10803fcc 	andi	r2,r2,255
    abf4:	10801318 	cmpnei	r2,r2,76
    abf8:	1000151e 	bne	r2,zero,ac50 <btc_script_copy_without_op_codeseperator+0x12c>
            uint8_t v8;
            if (!deser_bytes(&v8, &buf, 1))
    abfc:	e0fff104 	addi	r3,fp,-60
    ac00:	e0bff344 	addi	r2,fp,-51
    ac04:	01800044 	movi	r6,1
    ac08:	180b883a 	mov	r5,r3
    ac0c:	1009883a 	mov	r4,r2
    ac10:	003d8e80 	call	3d8e8 <deser_bytes>
    ac14:	10008226 	beq	r2,zero,ae20 <btc_script_copy_without_op_codeseperator+0x2fc>
                goto err_out;
            cstr_append_buf(script_out, &opcode, 1);
    ac18:	e0bff304 	addi	r2,fp,-52
    ac1c:	01800044 	movi	r6,1
    ac20:	100b883a 	mov	r5,r2
    ac24:	e13ff617 	ldw	r4,-40(fp)
    ac28:	00425700 	call	42570 <cstr_append_buf>
            cstr_append_buf(script_out, &v8, 1);
    ac2c:	e0bff344 	addi	r2,fp,-51
    ac30:	01800044 	movi	r6,1
    ac34:	100b883a 	mov	r5,r2
    ac38:	e13ff617 	ldw	r4,-40(fp)
    ac3c:	00425700 	call	42570 <cstr_append_buf>
            data_len = v8;
    ac40:	e0bff343 	ldbu	r2,-51(fp)
    ac44:	10803fcc 	andi	r2,r2,255
    ac48:	e0bfee15 	stw	r2,-72(fp)
    ac4c:	00003406 	br	ad20 <btc_script_copy_without_op_codeseperator+0x1fc>
        } else if (opcode == OP_PUSHDATA2) {
    ac50:	e0bff303 	ldbu	r2,-52(fp)
    ac54:	10803fcc 	andi	r2,r2,255
    ac58:	10801358 	cmpnei	r2,r2,77
    ac5c:	1000141e 	bne	r2,zero,acb0 <btc_script_copy_without_op_codeseperator+0x18c>
            uint16_t v16;
            if (!deser_u16(&v16, &buf))
    ac60:	e0fff104 	addi	r3,fp,-60
    ac64:	e0bff384 	addi	r2,fp,-50
    ac68:	180b883a 	mov	r5,r3
    ac6c:	1009883a 	mov	r4,r2
    ac70:	003d98c0 	call	3d98c <deser_u16>
    ac74:	10006c26 	beq	r2,zero,ae28 <btc_script_copy_without_op_codeseperator+0x304>
                goto err_out;
            cstr_append_buf(script_out, &opcode, 1);
    ac78:	e0bff304 	addi	r2,fp,-52
    ac7c:	01800044 	movi	r6,1
    ac80:	100b883a 	mov	r5,r2
    ac84:	e13ff617 	ldw	r4,-40(fp)
    ac88:	00425700 	call	42570 <cstr_append_buf>
            cstr_append_buf(script_out, &v16, 2);
    ac8c:	e0bff384 	addi	r2,fp,-50
    ac90:	01800084 	movi	r6,2
    ac94:	100b883a 	mov	r5,r2
    ac98:	e13ff617 	ldw	r4,-40(fp)
    ac9c:	00425700 	call	42570 <cstr_append_buf>
            data_len = v16;
    aca0:	e0bff38b 	ldhu	r2,-50(fp)
    aca4:	10bfffcc 	andi	r2,r2,65535
    aca8:	e0bfee15 	stw	r2,-72(fp)
    acac:	00001c06 	br	ad20 <btc_script_copy_without_op_codeseperator+0x1fc>
        } else if (opcode == OP_PUSHDATA4) {
    acb0:	e0bff303 	ldbu	r2,-52(fp)
    acb4:	10803fcc 	andi	r2,r2,255
    acb8:	10801398 	cmpnei	r2,r2,78
    acbc:	1000131e 	bne	r2,zero,ad0c <btc_script_copy_without_op_codeseperator+0x1e8>
            uint32_t v32;
            if (!deser_u32(&v32, &buf))
    acc0:	e0fff104 	addi	r3,fp,-60
    acc4:	e0bff404 	addi	r2,fp,-48
    acc8:	180b883a 	mov	r5,r3
    accc:	1009883a 	mov	r4,r2
    acd0:	003da3c0 	call	3da3c <deser_u32>
    acd4:	10005626 	beq	r2,zero,ae30 <btc_script_copy_without_op_codeseperator+0x30c>
                goto err_out;
            cstr_append_buf(script_out, &opcode, 1);
    acd8:	e0bff304 	addi	r2,fp,-52
    acdc:	01800044 	movi	r6,1
    ace0:	100b883a 	mov	r5,r2
    ace4:	e13ff617 	ldw	r4,-40(fp)
    ace8:	00425700 	call	42570 <cstr_append_buf>
            cstr_append_buf(script_out, &v32, 5);
    acec:	e0bff404 	addi	r2,fp,-48
    acf0:	01800144 	movi	r6,5
    acf4:	100b883a 	mov	r5,r2
    acf8:	e13ff617 	ldw	r4,-40(fp)
    acfc:	00425700 	call	42570 <cstr_append_buf>
            data_len = v32;
    ad00:	e0bff417 	ldw	r2,-48(fp)
    ad04:	e0bfee15 	stw	r2,-72(fp)
    ad08:	00000506 	br	ad20 <btc_script_copy_without_op_codeseperator+0x1fc>
        } else if (opcode == OP_CODESEPARATOR)
    ad0c:	e0bff303 	ldbu	r2,-52(fp)
    ad10:	10803fcc 	andi	r2,r2,255
    ad14:	10802ad8 	cmpnei	r2,r2,171
    ad18:	1000011e 	bne	r2,zero,ad20 <btc_script_copy_without_op_codeseperator+0x1fc>
            continue;
    ad1c:	00003a06 	br	ae08 <btc_script_copy_without_op_codeseperator+0x2e4>

        if (data_len > 0) {
    ad20:	e0bfee17 	ldw	r2,-72(fp)
    ad24:	10003326 	beq	r2,zero,adf4 <btc_script_copy_without_op_codeseperator+0x2d0>
    ad28:	d805883a 	mov	r2,sp
    ad2c:	e0bff715 	stw	r2,-36(fp)
            assert(data_len < 16777215); //limit max push to 0xFFFFFF
    ad30:	e0ffee17 	ldw	r3,-72(fp)
    ad34:	00804034 	movhi	r2,256
    ad38:	10bfff84 	addi	r2,r2,-2
    ad3c:	10c0082e 	bgeu	r2,r3,ad60 <btc_script_copy_without_op_codeseperator+0x23c>
    ad40:	01c001b4 	movhi	r7,6
    ad44:	39eae004 	addi	r7,r7,-21632
    ad48:	018001b4 	movhi	r6,6
    ad4c:	31ab0e04 	addi	r6,r6,-21448
    ad50:	01401404 	movi	r5,80
    ad54:	010001b4 	movhi	r4,6
    ad58:	212ae504 	addi	r4,r4,-21612
    ad5c:	004504c0 	call	4504c <__assert_func>
            unsigned char bufpush[data_len];
    ad60:	e0bfee17 	ldw	r2,-72(fp)
    ad64:	1007883a 	mov	r3,r2
    ad68:	18ffffc4 	addi	r3,r3,-1
    ad6c:	e0ffef15 	stw	r3,-68(fp)
    ad70:	1029883a 	mov	r20,r2
    ad74:	002b883a 	mov	r21,zero
    ad78:	a006d77a 	srli	r3,r20,29
    ad7c:	a82290fa 	slli	r17,r21,3
    ad80:	1c62b03a 	or	r17,r3,r17
    ad84:	a02090fa 	slli	r16,r20,3
    ad88:	102d883a 	mov	r22,r2
    ad8c:	002f883a 	mov	r23,zero
    ad90:	b006d77a 	srli	r3,r22,29
    ad94:	b82690fa 	slli	r19,r23,3
    ad98:	1ce6b03a 	or	r19,r3,r19
    ad9c:	b02490fa 	slli	r18,r22,3
    ada0:	108000c4 	addi	r2,r2,3
    ada4:	1004d0ba 	srli	r2,r2,2
    ada8:	1085883a 	add	r2,r2,r2
    adac:	1085883a 	add	r2,r2,r2
    adb0:	d8b7c83a 	sub	sp,sp,r2
    adb4:	d805883a 	mov	r2,sp
    adb8:	1005883a 	mov	r2,r2
    adbc:	e0bff015 	stw	r2,-64(fp)
            deser_bytes(&bufpush, &buf, data_len);
    adc0:	e0bff017 	ldw	r2,-64(fp)
    adc4:	e0fff104 	addi	r3,fp,-60
    adc8:	e1bfee17 	ldw	r6,-72(fp)
    adcc:	180b883a 	mov	r5,r3
    add0:	1009883a 	mov	r4,r2
    add4:	003d8e80 	call	3d8e8 <deser_bytes>
            cstr_append_buf(script_out, &bufpush, data_len);
    add8:	e0bff017 	ldw	r2,-64(fp)
    addc:	e1bfee17 	ldw	r6,-72(fp)
    ade0:	100b883a 	mov	r5,r2
    ade4:	e13ff617 	ldw	r4,-40(fp)
    ade8:	00425700 	call	42570 <cstr_append_buf>
    adec:	e6fff717 	ldw	sp,-36(fp)
    adf0:	00000506 	br	ae08 <btc_script_copy_without_op_codeseperator+0x2e4>
        } else
            cstr_append_buf(script_out, &opcode, 1);
    adf4:	e0bff304 	addi	r2,fp,-52
    adf8:	01800044 	movi	r6,1
    adfc:	100b883a 	mov	r5,r2
    ae00:	e13ff617 	ldw	r4,-40(fp)
    ae04:	00425700 	call	42570 <cstr_append_buf>
    if (script_in->len == 0)
        return false; /* EOF */

    struct const_buffer buf = {script_in->str, script_in->len};
    unsigned char opcode;
    while (buf.len > 0) {
    ae08:	e0bff217 	ldw	r2,-56(fp)
    ae0c:	103f5f1e 	bne	r2,zero,ab8c <__alt_mem_epcs_flash_controller+0xfdff9b8c>
            cstr_append_buf(script_out, &bufpush, data_len);
        } else
            cstr_append_buf(script_out, &opcode, 1);
    }

    return true;
    ae10:	00800044 	movi	r2,1
    ae14:	00000806 	br	ae38 <btc_script_copy_without_op_codeseperator+0x314>

    struct const_buffer buf = {script_in->str, script_in->len};
    unsigned char opcode;
    while (buf.len > 0) {
        if (!deser_bytes(&opcode, &buf, 1))
            goto err_out;
    ae18:	0001883a 	nop
    ae1c:	00000506 	br	ae34 <btc_script_copy_without_op_codeseperator+0x310>
            data_len = opcode;
            cstr_append_buf(script_out, &opcode, 1);
        } else if (opcode == OP_PUSHDATA1) {
            uint8_t v8;
            if (!deser_bytes(&v8, &buf, 1))
                goto err_out;
    ae20:	0001883a 	nop
    ae24:	00000306 	br	ae34 <btc_script_copy_without_op_codeseperator+0x310>
            cstr_append_buf(script_out, &v8, 1);
            data_len = v8;
        } else if (opcode == OP_PUSHDATA2) {
            uint16_t v16;
            if (!deser_u16(&v16, &buf))
                goto err_out;
    ae28:	0001883a 	nop
    ae2c:	00000106 	br	ae34 <btc_script_copy_without_op_codeseperator+0x310>
            cstr_append_buf(script_out, &v16, 2);
            data_len = v16;
        } else if (opcode == OP_PUSHDATA4) {
            uint32_t v32;
            if (!deser_u32(&v32, &buf))
                goto err_out;
    ae30:	0001883a 	nop
    }

    return true;

err_out:
    return false;
    ae34:	0005883a 	mov	r2,zero
}
    ae38:	e6fff804 	addi	sp,fp,-32
    ae3c:	dfc00917 	ldw	ra,36(sp)
    ae40:	df000817 	ldw	fp,32(sp)
    ae44:	ddc00717 	ldw	r23,28(sp)
    ae48:	dd800617 	ldw	r22,24(sp)
    ae4c:	dd400517 	ldw	r21,20(sp)
    ae50:	dd000417 	ldw	r20,16(sp)
    ae54:	dcc00317 	ldw	r19,12(sp)
    ae58:	dc800217 	ldw	r18,8(sp)
    ae5c:	dc400117 	ldw	r17,4(sp)
    ae60:	dc000017 	ldw	r16,0(sp)
    ae64:	dec00a04 	addi	sp,sp,40
    ae68:	f800283a 	ret

0000ae6c <btc_script_op_new>:

btc_script_op* btc_script_op_new()
{
    ae6c:	defffd04 	addi	sp,sp,-12
    ae70:	dfc00215 	stw	ra,8(sp)
    ae74:	df000115 	stw	fp,4(sp)
    ae78:	df000104 	addi	fp,sp,4
    btc_script_op* script_op;
    script_op = btc_calloc(1, sizeof(*script_op));
    ae7c:	01400304 	movi	r5,12
    ae80:	01000044 	movi	r4,1
    ae84:	000663c0 	call	663c <btc_calloc>
    ae88:	e0bfff15 	stw	r2,-4(fp)

    return script_op;
    ae8c:	e0bfff17 	ldw	r2,-4(fp)
}
    ae90:	e037883a 	mov	sp,fp
    ae94:	dfc00117 	ldw	ra,4(sp)
    ae98:	df000017 	ldw	fp,0(sp)
    ae9c:	dec00204 	addi	sp,sp,8
    aea0:	f800283a 	ret

0000aea4 <btc_script_op_free>:


void btc_script_op_free(btc_script_op* script_op)
{
    aea4:	defffd04 	addi	sp,sp,-12
    aea8:	dfc00215 	stw	ra,8(sp)
    aeac:	df000115 	stw	fp,4(sp)
    aeb0:	df000104 	addi	fp,sp,4
    aeb4:	e13fff15 	stw	r4,-4(fp)
    if (script_op->data) {
    aeb8:	e0bfff17 	ldw	r2,-4(fp)
    aebc:	10800117 	ldw	r2,4(r2)
    aec0:	10000626 	beq	r2,zero,aedc <btc_script_op_free+0x38>
        btc_free(script_op->data);
    aec4:	e0bfff17 	ldw	r2,-4(fp)
    aec8:	10800117 	ldw	r2,4(r2)
    aecc:	1009883a 	mov	r4,r2
    aed0:	00066c40 	call	66c4 <btc_free>
        script_op->data = NULL;
    aed4:	e0bfff17 	ldw	r2,-4(fp)
    aed8:	10000115 	stw	zero,4(r2)
    }
    script_op->datalen = 0;
    aedc:	e0bfff17 	ldw	r2,-4(fp)
    aee0:	10000215 	stw	zero,8(r2)
    script_op->op = OP_0;
    aee4:	e0bfff17 	ldw	r2,-4(fp)
    aee8:	10000015 	stw	zero,0(r2)
}
    aeec:	0001883a 	nop
    aef0:	e037883a 	mov	sp,fp
    aef4:	dfc00117 	ldw	ra,4(sp)
    aef8:	df000017 	ldw	fp,0(sp)
    aefc:	dec00204 	addi	sp,sp,8
    af00:	f800283a 	ret

0000af04 <btc_script_op_free_cb>:

void btc_script_op_free_cb(void* data)
{
    af04:	defffc04 	addi	sp,sp,-16
    af08:	dfc00315 	stw	ra,12(sp)
    af0c:	df000215 	stw	fp,8(sp)
    af10:	df000204 	addi	fp,sp,8
    af14:	e13fff15 	stw	r4,-4(fp)
    btc_script_op* script_op = data;
    af18:	e0bfff17 	ldw	r2,-4(fp)
    af1c:	e0bffe15 	stw	r2,-8(fp)
    btc_script_op_free(script_op);
    af20:	e13ffe17 	ldw	r4,-8(fp)
    af24:	000aea40 	call	aea4 <btc_script_op_free>

    btc_free(script_op);
    af28:	e13ffe17 	ldw	r4,-8(fp)
    af2c:	00066c40 	call	66c4 <btc_free>
}
    af30:	0001883a 	nop
    af34:	e037883a 	mov	sp,fp
    af38:	dfc00117 	ldw	ra,4(sp)
    af3c:	df000017 	ldw	fp,0(sp)
    af40:	dec00204 	addi	sp,sp,8
    af44:	f800283a 	ret

0000af48 <btc_script_get_ops>:

btc_bool btc_script_get_ops(const cstring* script_in, vector* ops_out)
{
    af48:	defff604 	addi	sp,sp,-40
    af4c:	dfc00915 	stw	ra,36(sp)
    af50:	df000815 	stw	fp,32(sp)
    af54:	df000804 	addi	fp,sp,32
    af58:	e13ffe15 	stw	r4,-8(fp)
    af5c:	e17fff15 	stw	r5,-4(fp)
    if (script_in->len == 0)
    af60:	e0bffe17 	ldw	r2,-8(fp)
    af64:	10800117 	ldw	r2,4(r2)
    af68:	1000021e 	bne	r2,zero,af74 <btc_script_get_ops+0x2c>
        return false; /* EOF */
    af6c:	0005883a 	mov	r2,zero
    af70:	00007806 	br	b154 <btc_script_get_ops+0x20c>

    struct const_buffer buf = {script_in->str, script_in->len};
    af74:	e0bffe17 	ldw	r2,-8(fp)
    af78:	10800017 	ldw	r2,0(r2)
    af7c:	e0bffa15 	stw	r2,-24(fp)
    af80:	e0bffe17 	ldw	r2,-8(fp)
    af84:	10800117 	ldw	r2,4(r2)
    af88:	e0bffb15 	stw	r2,-20(fp)
    unsigned char opcode;

    btc_script_op* op = NULL;
    af8c:	e03ff915 	stw	zero,-28(fp)
    while (buf.len > 0) {
    af90:	00006006 	br	b114 <btc_script_get_ops+0x1cc>
        op = btc_script_op_new();
    af94:	000ae6c0 	call	ae6c <btc_script_op_new>
    af98:	e0bff915 	stw	r2,-28(fp)

        if (!deser_bytes(&opcode, &buf, 1))
    af9c:	e0fffa04 	addi	r3,fp,-24
    afa0:	e0bffc04 	addi	r2,fp,-16
    afa4:	01800044 	movi	r6,1
    afa8:	180b883a 	mov	r5,r3
    afac:	1009883a 	mov	r4,r2
    afb0:	003d8e80 	call	3d8e8 <deser_bytes>
    afb4:	10005b26 	beq	r2,zero,b124 <btc_script_get_ops+0x1dc>
            goto err_out;

        op->op = opcode;
    afb8:	e0bffc03 	ldbu	r2,-16(fp)
    afbc:	10c03fcc 	andi	r3,r2,255
    afc0:	e0bff917 	ldw	r2,-28(fp)
    afc4:	10c00015 	stw	r3,0(r2)

        uint32_t data_len;

        if (opcode < OP_PUSHDATA1) {
    afc8:	e0bffc03 	ldbu	r2,-16(fp)
    afcc:	10803fcc 	andi	r2,r2,255
    afd0:	10801328 	cmpgeui	r2,r2,76
    afd4:	1000041e 	bne	r2,zero,afe8 <btc_script_get_ops+0xa0>
            data_len = opcode;
    afd8:	e0bffc03 	ldbu	r2,-16(fp)
    afdc:	10803fcc 	andi	r2,r2,255
    afe0:	e0bff815 	stw	r2,-32(fp)
    afe4:	00002e06 	br	b0a0 <btc_script_get_ops+0x158>
        } else if (opcode == OP_PUSHDATA1) {
    afe8:	e0bffc03 	ldbu	r2,-16(fp)
    afec:	10803fcc 	andi	r2,r2,255
    aff0:	10801318 	cmpnei	r2,r2,76
    aff4:	10000b1e 	bne	r2,zero,b024 <btc_script_get_ops+0xdc>
            uint8_t v8;
            if (!deser_bytes(&v8, &buf, 1))
    aff8:	e0fffa04 	addi	r3,fp,-24
    affc:	e0bffc44 	addi	r2,fp,-15
    b000:	01800044 	movi	r6,1
    b004:	180b883a 	mov	r5,r3
    b008:	1009883a 	mov	r4,r2
    b00c:	003d8e80 	call	3d8e8 <deser_bytes>
    b010:	10004626 	beq	r2,zero,b12c <btc_script_get_ops+0x1e4>
                goto err_out;
            data_len = v8;
    b014:	e0bffc43 	ldbu	r2,-15(fp)
    b018:	10803fcc 	andi	r2,r2,255
    b01c:	e0bff815 	stw	r2,-32(fp)
    b020:	00001f06 	br	b0a0 <btc_script_get_ops+0x158>
        } else if (opcode == OP_PUSHDATA2) {
    b024:	e0bffc03 	ldbu	r2,-16(fp)
    b028:	10803fcc 	andi	r2,r2,255
    b02c:	10801358 	cmpnei	r2,r2,77
    b030:	10000a1e 	bne	r2,zero,b05c <btc_script_get_ops+0x114>
            uint16_t v16;
            if (!deser_u16(&v16, &buf))
    b034:	e0fffa04 	addi	r3,fp,-24
    b038:	e0bffc84 	addi	r2,fp,-14
    b03c:	180b883a 	mov	r5,r3
    b040:	1009883a 	mov	r4,r2
    b044:	003d98c0 	call	3d98c <deser_u16>
    b048:	10003a26 	beq	r2,zero,b134 <btc_script_get_ops+0x1ec>
                goto err_out;
            data_len = v16;
    b04c:	e0bffc8b 	ldhu	r2,-14(fp)
    b050:	10bfffcc 	andi	r2,r2,65535
    b054:	e0bff815 	stw	r2,-32(fp)
    b058:	00001106 	br	b0a0 <btc_script_get_ops+0x158>
        } else if (opcode == OP_PUSHDATA4) {
    b05c:	e0bffc03 	ldbu	r2,-16(fp)
    b060:	10803fcc 	andi	r2,r2,255
    b064:	10801398 	cmpnei	r2,r2,78
    b068:	1000091e 	bne	r2,zero,b090 <btc_script_get_ops+0x148>
            uint32_t v32;
            if (!deser_u32(&v32, &buf))
    b06c:	e0fffa04 	addi	r3,fp,-24
    b070:	e0bffd04 	addi	r2,fp,-12
    b074:	180b883a 	mov	r5,r3
    b078:	1009883a 	mov	r4,r2
    b07c:	003da3c0 	call	3da3c <deser_u32>
    b080:	10002e26 	beq	r2,zero,b13c <btc_script_get_ops+0x1f4>
                goto err_out;
            data_len = v32;
    b084:	e0bffd17 	ldw	r2,-12(fp)
    b088:	e0bff815 	stw	r2,-32(fp)
    b08c:	00000406 	br	b0a0 <btc_script_get_ops+0x158>
        } else {
            vector_add(ops_out, op);
    b090:	e17ff917 	ldw	r5,-28(fp)
    b094:	e13fff17 	ldw	r4,-4(fp)
    b098:	0041d340 	call	41d34 <vector_add>
            continue;
    b09c:	00001d06 	br	b114 <btc_script_get_ops+0x1cc>
        }

        // don't alloc a push buffer if there is no more data available
        if (buf.len == 0 || data_len > buf.len) {
    b0a0:	e0bffb17 	ldw	r2,-20(fp)
    b0a4:	10002826 	beq	r2,zero,b148 <btc_script_get_ops+0x200>
    b0a8:	e0fffb17 	ldw	r3,-20(fp)
    b0ac:	e0bff817 	ldw	r2,-32(fp)
    b0b0:	18802536 	bltu	r3,r2,b148 <btc_script_get_ops+0x200>
            goto err_out;
        }

        op->data = btc_calloc(1, data_len);
    b0b4:	e17ff817 	ldw	r5,-32(fp)
    b0b8:	01000044 	movi	r4,1
    b0bc:	000663c0 	call	663c <btc_calloc>
    b0c0:	1007883a 	mov	r3,r2
    b0c4:	e0bff917 	ldw	r2,-28(fp)
    b0c8:	10c00115 	stw	r3,4(r2)
        memcpy(op->data, buf.p, data_len);
    b0cc:	e0bff917 	ldw	r2,-28(fp)
    b0d0:	10800117 	ldw	r2,4(r2)
    b0d4:	e0fffa17 	ldw	r3,-24(fp)
    b0d8:	e1bff817 	ldw	r6,-32(fp)
    b0dc:	180b883a 	mov	r5,r3
    b0e0:	1009883a 	mov	r4,r2
    b0e4:	0045c980 	call	45c98 <memcpy>
        op->datalen = data_len;
    b0e8:	e0bff917 	ldw	r2,-28(fp)
    b0ec:	e0fff817 	ldw	r3,-32(fp)
    b0f0:	10c00215 	stw	r3,8(r2)

        vector_add(ops_out, op);
    b0f4:	e17ff917 	ldw	r5,-28(fp)
    b0f8:	e13fff17 	ldw	r4,-4(fp)
    b0fc:	0041d340 	call	41d34 <vector_add>

        if (!deser_skip(&buf, data_len))
    b100:	e0bffa04 	addi	r2,fp,-24
    b104:	e17ff817 	ldw	r5,-32(fp)
    b108:	1009883a 	mov	r4,r2
    b10c:	003d8680 	call	3d868 <deser_skip>
    b110:	10000c26 	beq	r2,zero,b144 <btc_script_get_ops+0x1fc>

    struct const_buffer buf = {script_in->str, script_in->len};
    unsigned char opcode;

    btc_script_op* op = NULL;
    while (buf.len > 0) {
    b114:	e0bffb17 	ldw	r2,-20(fp)
    b118:	103f9e1e 	bne	r2,zero,af94 <__alt_mem_epcs_flash_controller+0xfdff9f94>

        if (!deser_skip(&buf, data_len))
            goto err_out;
    }

    return true;
    b11c:	00800044 	movi	r2,1
    b120:	00000c06 	br	b154 <btc_script_get_ops+0x20c>
    btc_script_op* op = NULL;
    while (buf.len > 0) {
        op = btc_script_op_new();

        if (!deser_bytes(&opcode, &buf, 1))
            goto err_out;
    b124:	0001883a 	nop
    b128:	00000706 	br	b148 <btc_script_get_ops+0x200>
        if (opcode < OP_PUSHDATA1) {
            data_len = opcode;
        } else if (opcode == OP_PUSHDATA1) {
            uint8_t v8;
            if (!deser_bytes(&v8, &buf, 1))
                goto err_out;
    b12c:	0001883a 	nop
    b130:	00000506 	br	b148 <btc_script_get_ops+0x200>
            data_len = v8;
        } else if (opcode == OP_PUSHDATA2) {
            uint16_t v16;
            if (!deser_u16(&v16, &buf))
                goto err_out;
    b134:	0001883a 	nop
    b138:	00000306 	br	b148 <btc_script_get_ops+0x200>
            data_len = v16;
        } else if (opcode == OP_PUSHDATA4) {
            uint32_t v32;
            if (!deser_u32(&v32, &buf))
                goto err_out;
    b13c:	0001883a 	nop
    b140:	00000106 	br	b148 <btc_script_get_ops+0x200>
        op->datalen = data_len;

        vector_add(ops_out, op);

        if (!deser_skip(&buf, data_len))
            goto err_out;
    b144:	0001883a 	nop
    }

    return true;
err_out:
    btc_script_op_free(op);
    b148:	e13ff917 	ldw	r4,-28(fp)
    b14c:	000aea40 	call	aea4 <btc_script_op_free>
    return false;
    b150:	0005883a 	mov	r2,zero
}
    b154:	e037883a 	mov	sp,fp
    b158:	dfc00117 	ldw	ra,4(sp)
    b15c:	df000017 	ldw	fp,0(sp)
    b160:	dec00204 	addi	sp,sp,8
    b164:	f800283a 	ret

0000b168 <btc_script_is_pushdata>:

static inline btc_bool btc_script_is_pushdata(const enum opcodetype op)
{
    b168:	defffe04 	addi	sp,sp,-8
    b16c:	df000115 	stw	fp,4(sp)
    b170:	df000104 	addi	fp,sp,4
    b174:	e13fff15 	stw	r4,-4(fp)
    return (op <= OP_PUSHDATA4);
    b178:	e0bfff17 	ldw	r2,-4(fp)
    b17c:	108013f0 	cmpltui	r2,r2,79
}
    b180:	e037883a 	mov	sp,fp
    b184:	df000017 	ldw	fp,0(sp)
    b188:	dec00104 	addi	sp,sp,4
    b18c:	f800283a 	ret

0000b190 <btc_script_is_op>:

static btc_bool btc_script_is_op(const btc_script_op* op, enum opcodetype opcode)
{
    b190:	defffd04 	addi	sp,sp,-12
    b194:	df000215 	stw	fp,8(sp)
    b198:	df000204 	addi	fp,sp,8
    b19c:	e13ffe15 	stw	r4,-8(fp)
    b1a0:	e17fff15 	stw	r5,-4(fp)
    return (op->op == opcode);
    b1a4:	e0bffe17 	ldw	r2,-8(fp)
    b1a8:	10c00017 	ldw	r3,0(r2)
    b1ac:	e0bfff17 	ldw	r2,-4(fp)
    b1b0:	1885003a 	cmpeq	r2,r3,r2
}
    b1b4:	e037883a 	mov	sp,fp
    b1b8:	df000017 	ldw	fp,0(sp)
    b1bc:	dec00104 	addi	sp,sp,4
    b1c0:	f800283a 	ret

0000b1c4 <btc_script_is_op_pubkey>:

static btc_bool btc_script_is_op_pubkey(const btc_script_op* op)
{
    b1c4:	defffd04 	addi	sp,sp,-12
    b1c8:	dfc00215 	stw	ra,8(sp)
    b1cc:	df000115 	stw	fp,4(sp)
    b1d0:	df000104 	addi	fp,sp,4
    b1d4:	e13fff15 	stw	r4,-4(fp)
    if (!btc_script_is_pushdata(op->op))
    b1d8:	e0bfff17 	ldw	r2,-4(fp)
    b1dc:	10800017 	ldw	r2,0(r2)
    b1e0:	1009883a 	mov	r4,r2
    b1e4:	000b1680 	call	b168 <btc_script_is_pushdata>
    b1e8:	10803fcc 	andi	r2,r2,255
    b1ec:	1000021e 	bne	r2,zero,b1f8 <btc_script_is_op_pubkey+0x34>
        return false;
    b1f0:	0005883a 	mov	r2,zero
    b1f4:	00001706 	br	b254 <btc_script_is_op_pubkey+0x90>
    if (op->datalen != BTC_ECKEY_COMPRESSED_LENGTH && op->datalen != BTC_ECKEY_UNCOMPRESSED_LENGTH)
    b1f8:	e0bfff17 	ldw	r2,-4(fp)
    b1fc:	10800217 	ldw	r2,8(r2)
    b200:	10800860 	cmpeqi	r2,r2,33
    b204:	1000061e 	bne	r2,zero,b220 <btc_script_is_op_pubkey+0x5c>
    b208:	e0bfff17 	ldw	r2,-4(fp)
    b20c:	10800217 	ldw	r2,8(r2)
    b210:	10801060 	cmpeqi	r2,r2,65
    b214:	1000021e 	bne	r2,zero,b220 <btc_script_is_op_pubkey+0x5c>
        return false;
    b218:	0005883a 	mov	r2,zero
    b21c:	00000d06 	br	b254 <btc_script_is_op_pubkey+0x90>
    if (btc_pubkey_get_length(op->data[0]) != op->datalen) {
    b220:	e0bfff17 	ldw	r2,-4(fp)
    b224:	10800117 	ldw	r2,4(r2)
    b228:	10800003 	ldbu	r2,0(r2)
    b22c:	10803fcc 	andi	r2,r2,255
    b230:	1009883a 	mov	r4,r2
    b234:	00055ac0 	call	55ac <btc_pubkey_get_length>
    b238:	1007883a 	mov	r3,r2
    b23c:	e0bfff17 	ldw	r2,-4(fp)
    b240:	10800217 	ldw	r2,8(r2)
    b244:	18800226 	beq	r3,r2,b250 <btc_script_is_op_pubkey+0x8c>
        return false;
    b248:	0005883a 	mov	r2,zero
    b24c:	00000106 	br	b254 <btc_script_is_op_pubkey+0x90>
    }
    return true;
    b250:	00800044 	movi	r2,1
}
    b254:	e037883a 	mov	sp,fp
    b258:	dfc00117 	ldw	ra,4(sp)
    b25c:	df000017 	ldw	fp,0(sp)
    b260:	dec00204 	addi	sp,sp,8
    b264:	f800283a 	ret

0000b268 <btc_script_is_op_pubkeyhash>:

static btc_bool btc_script_is_op_pubkeyhash(const btc_script_op* op)
{
    b268:	defffd04 	addi	sp,sp,-12
    b26c:	dfc00215 	stw	ra,8(sp)
    b270:	df000115 	stw	fp,4(sp)
    b274:	df000104 	addi	fp,sp,4
    b278:	e13fff15 	stw	r4,-4(fp)
    if (!btc_script_is_pushdata(op->op))
    b27c:	e0bfff17 	ldw	r2,-4(fp)
    b280:	10800017 	ldw	r2,0(r2)
    b284:	1009883a 	mov	r4,r2
    b288:	000b1680 	call	b168 <btc_script_is_pushdata>
    b28c:	10803fcc 	andi	r2,r2,255
    b290:	1000021e 	bne	r2,zero,b29c <btc_script_is_op_pubkeyhash+0x34>
        return false;
    b294:	0005883a 	mov	r2,zero
    b298:	00000706 	br	b2b8 <btc_script_is_op_pubkeyhash+0x50>
    if (op->datalen != 20)
    b29c:	e0bfff17 	ldw	r2,-4(fp)
    b2a0:	10800217 	ldw	r2,8(r2)
    b2a4:	10800520 	cmpeqi	r2,r2,20
    b2a8:	1000021e 	bne	r2,zero,b2b4 <btc_script_is_op_pubkeyhash+0x4c>
        return false;
    b2ac:	0005883a 	mov	r2,zero
    b2b0:	00000106 	br	b2b8 <btc_script_is_op_pubkeyhash+0x50>
    return true;
    b2b4:	00800044 	movi	r2,1
}
    b2b8:	e037883a 	mov	sp,fp
    b2bc:	dfc00117 	ldw	ra,4(sp)
    b2c0:	df000017 	ldw	fp,0(sp)
    b2c4:	dec00204 	addi	sp,sp,8
    b2c8:	f800283a 	ret

0000b2cc <btc_script_is_pubkey>:

// OP_PUBKEY, OP_CHECKSIG
btc_bool btc_script_is_pubkey(const vector* ops, vector* data_out)
{
    b2cc:	defffa04 	addi	sp,sp,-24
    b2d0:	dfc00515 	stw	ra,20(sp)
    b2d4:	df000415 	stw	fp,16(sp)
    b2d8:	df000404 	addi	fp,sp,16
    b2dc:	e13ffe15 	stw	r4,-8(fp)
    b2e0:	e17fff15 	stw	r5,-4(fp)
    if ((ops->len == 2) &&
    b2e4:	e0bffe17 	ldw	r2,-8(fp)
    b2e8:	10800117 	ldw	r2,4(r2)
    b2ec:	10800098 	cmpnei	r2,r2,2
    b2f0:	1000291e 	bne	r2,zero,b398 <btc_script_is_pubkey+0xcc>
            btc_script_is_op(vector_idx(ops, 1), OP_CHECKSIG) &&
    b2f4:	e0bffe17 	ldw	r2,-8(fp)
    b2f8:	10800017 	ldw	r2,0(r2)
    b2fc:	10800104 	addi	r2,r2,4
    b300:	10800017 	ldw	r2,0(r2)
    b304:	01402b04 	movi	r5,172
    b308:	1009883a 	mov	r4,r2
    b30c:	000b1900 	call	b190 <btc_script_is_op>
}

// OP_PUBKEY, OP_CHECKSIG
btc_bool btc_script_is_pubkey(const vector* ops, vector* data_out)
{
    if ((ops->len == 2) &&
    b310:	10803fcc 	andi	r2,r2,255
    b314:	10002026 	beq	r2,zero,b398 <btc_script_is_pubkey+0xcc>
            btc_script_is_op(vector_idx(ops, 1), OP_CHECKSIG) &&
            btc_script_is_op_pubkey(vector_idx(ops, 0))) {
    b318:	e0bffe17 	ldw	r2,-8(fp)
    b31c:	10800017 	ldw	r2,0(r2)
    b320:	10800017 	ldw	r2,0(r2)
    b324:	1009883a 	mov	r4,r2
    b328:	000b1c40 	call	b1c4 <btc_script_is_op_pubkey>

// OP_PUBKEY, OP_CHECKSIG
btc_bool btc_script_is_pubkey(const vector* ops, vector* data_out)
{
    if ((ops->len == 2) &&
            btc_script_is_op(vector_idx(ops, 1), OP_CHECKSIG) &&
    b32c:	10803fcc 	andi	r2,r2,255
    b330:	10001926 	beq	r2,zero,b398 <btc_script_is_pubkey+0xcc>
            btc_script_is_op_pubkey(vector_idx(ops, 0))) {
        if (data_out) {
    b334:	e0bfff17 	ldw	r2,-4(fp)
    b338:	10001526 	beq	r2,zero,b390 <btc_script_is_pubkey+0xc4>
            //copy the full pubkey (33 or 65) in case of a non empty vector
            const btc_script_op* op = vector_idx(ops, 0);
    b33c:	e0bffe17 	ldw	r2,-8(fp)
    b340:	10800017 	ldw	r2,0(r2)
    b344:	10800017 	ldw	r2,0(r2)
    b348:	e0bffc15 	stw	r2,-16(fp)
            uint8_t* buffer = btc_calloc(1, op->datalen);
    b34c:	e0bffc17 	ldw	r2,-16(fp)
    b350:	10800217 	ldw	r2,8(r2)
    b354:	100b883a 	mov	r5,r2
    b358:	01000044 	movi	r4,1
    b35c:	000663c0 	call	663c <btc_calloc>
    b360:	e0bffd15 	stw	r2,-12(fp)
            memcpy(buffer, op->data, op->datalen);
    b364:	e0bffc17 	ldw	r2,-16(fp)
    b368:	10c00117 	ldw	r3,4(r2)
    b36c:	e0bffc17 	ldw	r2,-16(fp)
    b370:	10800217 	ldw	r2,8(r2)
    b374:	100d883a 	mov	r6,r2
    b378:	180b883a 	mov	r5,r3
    b37c:	e13ffd17 	ldw	r4,-12(fp)
    b380:	0045c980 	call	45c98 <memcpy>
            vector_add(data_out, buffer);
    b384:	e17ffd17 	ldw	r5,-12(fp)
    b388:	e13fff17 	ldw	r4,-4(fp)
    b38c:	0041d340 	call	41d34 <vector_add>
        }
        return true;
    b390:	00800044 	movi	r2,1
    b394:	00000106 	br	b39c <btc_script_is_pubkey+0xd0>
    }
    return false;
    b398:	0005883a 	mov	r2,zero
}
    b39c:	e037883a 	mov	sp,fp
    b3a0:	dfc00117 	ldw	ra,4(sp)
    b3a4:	df000017 	ldw	fp,0(sp)
    b3a8:	dec00204 	addi	sp,sp,8
    b3ac:	f800283a 	ret

0000b3b0 <btc_script_is_pubkeyhash>:

// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    b3b0:	defffa04 	addi	sp,sp,-24
    b3b4:	dfc00515 	stw	ra,20(sp)
    b3b8:	df000415 	stw	fp,16(sp)
    b3bc:	df000404 	addi	fp,sp,16
    b3c0:	e13ffe15 	stw	r4,-8(fp)
    b3c4:	e17fff15 	stw	r5,-4(fp)
    if ((ops->len == 5) &&
    b3c8:	e0bffe17 	ldw	r2,-8(fp)
    b3cc:	10800117 	ldw	r2,4(r2)
    b3d0:	10800158 	cmpnei	r2,r2,5
    b3d4:	1000401e 	bne	r2,zero,b4d8 <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
    b3d8:	e0bffe17 	ldw	r2,-8(fp)
    b3dc:	10800017 	ldw	r2,0(r2)
    b3e0:	10800017 	ldw	r2,0(r2)
    b3e4:	01401d84 	movi	r5,118
    b3e8:	1009883a 	mov	r4,r2
    b3ec:	000b1900 	call	b190 <btc_script_is_op>
}

// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    if ((ops->len == 5) &&
    b3f0:	10803fcc 	andi	r2,r2,255
    b3f4:	10003826 	beq	r2,zero,b4d8 <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
    b3f8:	e0bffe17 	ldw	r2,-8(fp)
    b3fc:	10800017 	ldw	r2,0(r2)
    b400:	10800104 	addi	r2,r2,4
    b404:	10800017 	ldw	r2,0(r2)
    b408:	01402a44 	movi	r5,169
    b40c:	1009883a 	mov	r4,r2
    b410:	000b1900 	call	b190 <btc_script_is_op>

// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    if ((ops->len == 5) &&
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
    b414:	10803fcc 	andi	r2,r2,255
    b418:	10002f26 	beq	r2,zero,b4d8 <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
        btc_script_is_op_pubkeyhash(vector_idx(ops, 2)) &&
    b41c:	e0bffe17 	ldw	r2,-8(fp)
    b420:	10800017 	ldw	r2,0(r2)
    b424:	10800204 	addi	r2,r2,8
    b428:	10800017 	ldw	r2,0(r2)
    b42c:	1009883a 	mov	r4,r2
    b430:	000b2680 	call	b268 <btc_script_is_op_pubkeyhash>
// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    if ((ops->len == 5) &&
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
    b434:	10803fcc 	andi	r2,r2,255
    b438:	10002726 	beq	r2,zero,b4d8 <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op_pubkeyhash(vector_idx(ops, 2)) &&
        btc_script_is_op(vector_idx(ops, 3), OP_EQUALVERIFY) &&
    b43c:	e0bffe17 	ldw	r2,-8(fp)
    b440:	10800017 	ldw	r2,0(r2)
    b444:	10800304 	addi	r2,r2,12
    b448:	10800017 	ldw	r2,0(r2)
    b44c:	01402204 	movi	r5,136
    b450:	1009883a 	mov	r4,r2
    b454:	000b1900 	call	b190 <btc_script_is_op>
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    if ((ops->len == 5) &&
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
        btc_script_is_op_pubkeyhash(vector_idx(ops, 2)) &&
    b458:	10803fcc 	andi	r2,r2,255
    b45c:	10001e26 	beq	r2,zero,b4d8 <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 3), OP_EQUALVERIFY) &&
        btc_script_is_op(vector_idx(ops, 4), OP_CHECKSIG)) {
    b460:	e0bffe17 	ldw	r2,-8(fp)
    b464:	10800017 	ldw	r2,0(r2)
    b468:	10800404 	addi	r2,r2,16
    b46c:	10800017 	ldw	r2,0(r2)
    b470:	01402b04 	movi	r5,172
    b474:	1009883a 	mov	r4,r2
    b478:	000b1900 	call	b190 <btc_script_is_op>
{
    if ((ops->len == 5) &&
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
        btc_script_is_op_pubkeyhash(vector_idx(ops, 2)) &&
        btc_script_is_op(vector_idx(ops, 3), OP_EQUALVERIFY) &&
    b47c:	10803fcc 	andi	r2,r2,255
    b480:	10001526 	beq	r2,zero,b4d8 <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 4), OP_CHECKSIG)) {
        if (data_out) {
    b484:	e0bfff17 	ldw	r2,-4(fp)
    b488:	10001126 	beq	r2,zero,b4d0 <btc_script_is_pubkeyhash+0x120>
            //copy the data (hash160) in case of a non empty vector
            const btc_script_op* op = vector_idx(ops, 2);
    b48c:	e0bffe17 	ldw	r2,-8(fp)
    b490:	10800017 	ldw	r2,0(r2)
    b494:	10800217 	ldw	r2,8(r2)
    b498:	e0bffc15 	stw	r2,-16(fp)
            uint8_t* buffer = btc_calloc(1, sizeof(uint160));
    b49c:	01400504 	movi	r5,20
    b4a0:	01000044 	movi	r4,1
    b4a4:	000663c0 	call	663c <btc_calloc>
    b4a8:	e0bffd15 	stw	r2,-12(fp)
            memcpy(buffer, op->data, sizeof(uint160));
    b4ac:	e0bffc17 	ldw	r2,-16(fp)
    b4b0:	10800117 	ldw	r2,4(r2)
    b4b4:	01800504 	movi	r6,20
    b4b8:	100b883a 	mov	r5,r2
    b4bc:	e13ffd17 	ldw	r4,-12(fp)
    b4c0:	0045c980 	call	45c98 <memcpy>
            vector_add(data_out, buffer);
    b4c4:	e17ffd17 	ldw	r5,-12(fp)
    b4c8:	e13fff17 	ldw	r4,-4(fp)
    b4cc:	0041d340 	call	41d34 <vector_add>
        }
        return true;
    b4d0:	00800044 	movi	r2,1
    b4d4:	00000106 	br	b4dc <btc_script_is_pubkeyhash+0x12c>
    }
    return false;
    b4d8:	0005883a 	mov	r2,zero
}
    b4dc:	e037883a 	mov	sp,fp
    b4e0:	dfc00117 	ldw	ra,4(sp)
    b4e4:	df000017 	ldw	fp,0(sp)
    b4e8:	dec00204 	addi	sp,sp,8
    b4ec:	f800283a 	ret

0000b4f0 <btc_script_is_scripthash>:

// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
btc_bool btc_script_is_scripthash(const vector* ops, vector* data_out)
{
    b4f0:	defffa04 	addi	sp,sp,-24
    b4f4:	dfc00515 	stw	ra,20(sp)
    b4f8:	df000415 	stw	fp,16(sp)
    b4fc:	df000404 	addi	fp,sp,16
    b500:	e13ffe15 	stw	r4,-8(fp)
    b504:	e17fff15 	stw	r5,-4(fp)
    if ((ops->len == 3) &&
    b508:	e0bffe17 	ldw	r2,-8(fp)
    b50c:	10800117 	ldw	r2,4(r2)
    b510:	108000d8 	cmpnei	r2,r2,3
    b514:	10002e1e 	bne	r2,zero,b5d0 <btc_script_is_scripthash+0xe0>
            btc_script_is_op(vector_idx(ops, 0), OP_HASH160) &&
    b518:	e0bffe17 	ldw	r2,-8(fp)
    b51c:	10800017 	ldw	r2,0(r2)
    b520:	10800017 	ldw	r2,0(r2)
    b524:	01402a44 	movi	r5,169
    b528:	1009883a 	mov	r4,r2
    b52c:	000b1900 	call	b190 <btc_script_is_op>
}

// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
btc_bool btc_script_is_scripthash(const vector* ops, vector* data_out)
{
    if ((ops->len == 3) &&
    b530:	10803fcc 	andi	r2,r2,255
    b534:	10002626 	beq	r2,zero,b5d0 <btc_script_is_scripthash+0xe0>
            btc_script_is_op(vector_idx(ops, 0), OP_HASH160) &&
            btc_script_is_op_pubkeyhash(vector_idx(ops, 1)) &&
    b538:	e0bffe17 	ldw	r2,-8(fp)
    b53c:	10800017 	ldw	r2,0(r2)
    b540:	10800104 	addi	r2,r2,4
    b544:	10800017 	ldw	r2,0(r2)
    b548:	1009883a 	mov	r4,r2
    b54c:	000b2680 	call	b268 <btc_script_is_op_pubkeyhash>

// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
btc_bool btc_script_is_scripthash(const vector* ops, vector* data_out)
{
    if ((ops->len == 3) &&
            btc_script_is_op(vector_idx(ops, 0), OP_HASH160) &&
    b550:	10803fcc 	andi	r2,r2,255
    b554:	10001e26 	beq	r2,zero,b5d0 <btc_script_is_scripthash+0xe0>
            btc_script_is_op_pubkeyhash(vector_idx(ops, 1)) &&
            btc_script_is_op(vector_idx(ops, 2), OP_EQUAL)) {
    b558:	e0bffe17 	ldw	r2,-8(fp)
    b55c:	10800017 	ldw	r2,0(r2)
    b560:	10800204 	addi	r2,r2,8
    b564:	10800017 	ldw	r2,0(r2)
    b568:	014021c4 	movi	r5,135
    b56c:	1009883a 	mov	r4,r2
    b570:	000b1900 	call	b190 <btc_script_is_op>
// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
btc_bool btc_script_is_scripthash(const vector* ops, vector* data_out)
{
    if ((ops->len == 3) &&
            btc_script_is_op(vector_idx(ops, 0), OP_HASH160) &&
            btc_script_is_op_pubkeyhash(vector_idx(ops, 1)) &&
    b574:	10803fcc 	andi	r2,r2,255
    b578:	10001526 	beq	r2,zero,b5d0 <btc_script_is_scripthash+0xe0>
            btc_script_is_op(vector_idx(ops, 2), OP_EQUAL)) {

        if (data_out) {
    b57c:	e0bfff17 	ldw	r2,-4(fp)
    b580:	10001126 	beq	r2,zero,b5c8 <btc_script_is_scripthash+0xd8>
            //copy the data (hash160) in case of a non empty vector
            const btc_script_op* op = vector_idx(ops, 1);
    b584:	e0bffe17 	ldw	r2,-8(fp)
    b588:	10800017 	ldw	r2,0(r2)
    b58c:	10800117 	ldw	r2,4(r2)
    b590:	e0bffc15 	stw	r2,-16(fp)
            uint8_t* buffer = btc_calloc(1, sizeof(uint160));
    b594:	01400504 	movi	r5,20
    b598:	01000044 	movi	r4,1
    b59c:	000663c0 	call	663c <btc_calloc>
    b5a0:	e0bffd15 	stw	r2,-12(fp)
            memcpy(buffer, op->data, sizeof(uint160));
    b5a4:	e0bffc17 	ldw	r2,-16(fp)
    b5a8:	10800117 	ldw	r2,4(r2)
    b5ac:	01800504 	movi	r6,20
    b5b0:	100b883a 	mov	r5,r2
    b5b4:	e13ffd17 	ldw	r4,-12(fp)
    b5b8:	0045c980 	call	45c98 <memcpy>
            vector_add(data_out, buffer);
    b5bc:	e17ffd17 	ldw	r5,-12(fp)
    b5c0:	e13fff17 	ldw	r4,-4(fp)
    b5c4:	0041d340 	call	41d34 <vector_add>
        }

        return true;
    b5c8:	00800044 	movi	r2,1
    b5cc:	00000106 	br	b5d4 <btc_script_is_scripthash+0xe4>
    }
    return false;
    b5d0:	0005883a 	mov	r2,zero
}
    b5d4:	e037883a 	mov	sp,fp
    b5d8:	dfc00117 	ldw	ra,4(sp)
    b5dc:	df000017 	ldw	fp,0(sp)
    b5e0:	dec00204 	addi	sp,sp,8
    b5e4:	f800283a 	ret

0000b5e8 <btc_script_is_op_smallint>:

static btc_bool btc_script_is_op_smallint(const btc_script_op* op)
{
    b5e8:	defffe04 	addi	sp,sp,-8
    b5ec:	df000115 	stw	fp,4(sp)
    b5f0:	df000104 	addi	fp,sp,4
    b5f4:	e13fff15 	stw	r4,-4(fp)
    return ((op->op == OP_0) ||
    b5f8:	e0bfff17 	ldw	r2,-4(fp)
    b5fc:	10800017 	ldw	r2,0(r2)
    b600:	10000826 	beq	r2,zero,b624 <btc_script_is_op_smallint+0x3c>
            (op->op >= OP_1 && op->op <= OP_16));
    b604:	e0bfff17 	ldw	r2,-4(fp)
    b608:	10800017 	ldw	r2,0(r2)
    return false;
}

static btc_bool btc_script_is_op_smallint(const btc_script_op* op)
{
    return ((op->op == OP_0) ||
    b60c:	10801470 	cmpltui	r2,r2,81
    b610:	1000061e 	bne	r2,zero,b62c <btc_script_is_op_smallint+0x44>
            (op->op >= OP_1 && op->op <= OP_16));
    b614:	e0bfff17 	ldw	r2,-4(fp)
    b618:	10800017 	ldw	r2,0(r2)
    b61c:	10801868 	cmpgeui	r2,r2,97
    b620:	1000021e 	bne	r2,zero,b62c <btc_script_is_op_smallint+0x44>
    return false;
}

static btc_bool btc_script_is_op_smallint(const btc_script_op* op)
{
    return ((op->op == OP_0) ||
    b624:	00800044 	movi	r2,1
    b628:	00000106 	br	b630 <btc_script_is_op_smallint+0x48>
    b62c:	0005883a 	mov	r2,zero
            (op->op >= OP_1 && op->op <= OP_16));
}
    b630:	e037883a 	mov	sp,fp
    b634:	df000017 	ldw	fp,0(sp)
    b638:	dec00104 	addi	sp,sp,4
    b63c:	f800283a 	ret

0000b640 <btc_script_is_multisig>:

btc_bool btc_script_is_multisig(const vector* ops)
{
    b640:	defffc04 	addi	sp,sp,-16
    b644:	dfc00315 	stw	ra,12(sp)
    b648:	df000215 	stw	fp,8(sp)
    b64c:	df000204 	addi	fp,sp,8
    b650:	e13fff15 	stw	r4,-4(fp)
    if ((ops->len < 3) || (ops->len > (16 + 3)) ||
    b654:	e0bfff17 	ldw	r2,-4(fp)
    b658:	10800117 	ldw	r2,4(r2)
    b65c:	108000f0 	cmpltui	r2,r2,3
    b660:	10002a1e 	bne	r2,zero,b70c <btc_script_is_multisig+0xcc>
    b664:	e0bfff17 	ldw	r2,-4(fp)
    b668:	10800117 	ldw	r2,4(r2)
    b66c:	10800528 	cmpgeui	r2,r2,20
    b670:	1000261e 	bne	r2,zero,b70c <btc_script_is_multisig+0xcc>
        !btc_script_is_op_smallint(vector_idx(ops, 0)) ||
    b674:	e0bfff17 	ldw	r2,-4(fp)
    b678:	10800017 	ldw	r2,0(r2)
    b67c:	10800017 	ldw	r2,0(r2)
    b680:	1009883a 	mov	r4,r2
    b684:	000b5e80 	call	b5e8 <btc_script_is_op_smallint>
            (op->op >= OP_1 && op->op <= OP_16));
}

btc_bool btc_script_is_multisig(const vector* ops)
{
    if ((ops->len < 3) || (ops->len > (16 + 3)) ||
    b688:	10803fcc 	andi	r2,r2,255
    b68c:	10001f26 	beq	r2,zero,b70c <btc_script_is_multisig+0xcc>
        !btc_script_is_op_smallint(vector_idx(ops, 0)) ||
        !btc_script_is_op_smallint(vector_idx(ops, ops->len - 2)) ||
    b690:	e0bfff17 	ldw	r2,-4(fp)
    b694:	10c00017 	ldw	r3,0(r2)
    b698:	e0bfff17 	ldw	r2,-4(fp)
    b69c:	11000117 	ldw	r4,4(r2)
    b6a0:	00900034 	movhi	r2,16384
    b6a4:	10bfff84 	addi	r2,r2,-2
    b6a8:	2085883a 	add	r2,r4,r2
    b6ac:	1085883a 	add	r2,r2,r2
    b6b0:	1085883a 	add	r2,r2,r2
    b6b4:	1885883a 	add	r2,r3,r2
    b6b8:	10800017 	ldw	r2,0(r2)
    b6bc:	1009883a 	mov	r4,r2
    b6c0:	000b5e80 	call	b5e8 <btc_script_is_op_smallint>
}

btc_bool btc_script_is_multisig(const vector* ops)
{
    if ((ops->len < 3) || (ops->len > (16 + 3)) ||
        !btc_script_is_op_smallint(vector_idx(ops, 0)) ||
    b6c4:	10803fcc 	andi	r2,r2,255
    b6c8:	10001026 	beq	r2,zero,b70c <btc_script_is_multisig+0xcc>
        !btc_script_is_op_smallint(vector_idx(ops, ops->len - 2)) ||
        !btc_script_is_op(vector_idx(ops, ops->len - 1), OP_CHECKMULTISIG))
    b6cc:	e0bfff17 	ldw	r2,-4(fp)
    b6d0:	10c00017 	ldw	r3,0(r2)
    b6d4:	e0bfff17 	ldw	r2,-4(fp)
    b6d8:	11000117 	ldw	r4,4(r2)
    b6dc:	00900034 	movhi	r2,16384
    b6e0:	10bfffc4 	addi	r2,r2,-1
    b6e4:	2085883a 	add	r2,r4,r2
    b6e8:	1085883a 	add	r2,r2,r2
    b6ec:	1085883a 	add	r2,r2,r2
    b6f0:	1885883a 	add	r2,r3,r2
    b6f4:	10800017 	ldw	r2,0(r2)
    b6f8:	01402b84 	movi	r5,174
    b6fc:	1009883a 	mov	r4,r2
    b700:	000b1900 	call	b190 <btc_script_is_op>

btc_bool btc_script_is_multisig(const vector* ops)
{
    if ((ops->len < 3) || (ops->len > (16 + 3)) ||
        !btc_script_is_op_smallint(vector_idx(ops, 0)) ||
        !btc_script_is_op_smallint(vector_idx(ops, ops->len - 2)) ||
    b704:	10803fcc 	andi	r2,r2,255
    b708:	1000021e 	bne	r2,zero,b714 <btc_script_is_multisig+0xd4>
        !btc_script_is_op(vector_idx(ops, ops->len - 1), OP_CHECKMULTISIG))
        return false;
    b70c:	0005883a 	mov	r2,zero
    b710:	00001906 	br	b778 <btc_script_is_multisig+0x138>

    unsigned int i;
    for (i = 1; i < (ops->len - 2); i++)
    b714:	00800044 	movi	r2,1
    b718:	e0bffe15 	stw	r2,-8(fp)
    b71c:	00001006 	br	b760 <btc_script_is_multisig+0x120>
        if (!btc_script_is_op_pubkey(vector_idx(ops, i)))
    b720:	e0bfff17 	ldw	r2,-4(fp)
    b724:	10c00017 	ldw	r3,0(r2)
    b728:	e0bffe17 	ldw	r2,-8(fp)
    b72c:	1085883a 	add	r2,r2,r2
    b730:	1085883a 	add	r2,r2,r2
    b734:	1885883a 	add	r2,r3,r2
    b738:	10800017 	ldw	r2,0(r2)
    b73c:	1009883a 	mov	r4,r2
    b740:	000b1c40 	call	b1c4 <btc_script_is_op_pubkey>
    b744:	10803fcc 	andi	r2,r2,255
    b748:	1000021e 	bne	r2,zero,b754 <btc_script_is_multisig+0x114>
            return false;
    b74c:	0005883a 	mov	r2,zero
    b750:	00000906 	br	b778 <btc_script_is_multisig+0x138>
        !btc_script_is_op_smallint(vector_idx(ops, ops->len - 2)) ||
        !btc_script_is_op(vector_idx(ops, ops->len - 1), OP_CHECKMULTISIG))
        return false;

    unsigned int i;
    for (i = 1; i < (ops->len - 2); i++)
    b754:	e0bffe17 	ldw	r2,-8(fp)
    b758:	10800044 	addi	r2,r2,1
    b75c:	e0bffe15 	stw	r2,-8(fp)
    b760:	e0bfff17 	ldw	r2,-4(fp)
    b764:	10800117 	ldw	r2,4(r2)
    b768:	10bfff84 	addi	r2,r2,-2
    b76c:	e0fffe17 	ldw	r3,-8(fp)
    b770:	18bfeb36 	bltu	r3,r2,b720 <__alt_mem_epcs_flash_controller+0xfdffa720>
        if (!btc_script_is_op_pubkey(vector_idx(ops, i)))
            return false;

    return true;
    b774:	00800044 	movi	r2,1
}
    b778:	e037883a 	mov	sp,fp
    b77c:	dfc00117 	ldw	ra,4(sp)
    b780:	df000017 	ldw	fp,0(sp)
    b784:	dec00204 	addi	sp,sp,8
    b788:	f800283a 	ret

0000b78c <btc_script_classify_ops>:

enum btc_tx_out_type btc_script_classify_ops(const vector* ops)
{
    b78c:	defffd04 	addi	sp,sp,-12
    b790:	dfc00215 	stw	ra,8(sp)
    b794:	df000115 	stw	fp,4(sp)
    b798:	df000104 	addi	fp,sp,4
    b79c:	e13fff15 	stw	r4,-4(fp)
    if (btc_script_is_pubkeyhash(ops, NULL))
    b7a0:	000b883a 	mov	r5,zero
    b7a4:	e13fff17 	ldw	r4,-4(fp)
    b7a8:	000b3b00 	call	b3b0 <btc_script_is_pubkeyhash>
    b7ac:	10803fcc 	andi	r2,r2,255
    b7b0:	10000226 	beq	r2,zero,b7bc <btc_script_classify_ops+0x30>
        return BTC_TX_PUBKEYHASH;
    b7b4:	00800084 	movi	r2,2
    b7b8:	00001506 	br	b810 <btc_script_classify_ops+0x84>
    if (btc_script_is_scripthash(ops, NULL))
    b7bc:	000b883a 	mov	r5,zero
    b7c0:	e13fff17 	ldw	r4,-4(fp)
    b7c4:	000b4f00 	call	b4f0 <btc_script_is_scripthash>
    b7c8:	10803fcc 	andi	r2,r2,255
    b7cc:	10000226 	beq	r2,zero,b7d8 <btc_script_classify_ops+0x4c>
        return BTC_TX_SCRIPTHASH;
    b7d0:	008000c4 	movi	r2,3
    b7d4:	00000e06 	br	b810 <btc_script_classify_ops+0x84>
    if (btc_script_is_pubkey(ops, NULL))
    b7d8:	000b883a 	mov	r5,zero
    b7dc:	e13fff17 	ldw	r4,-4(fp)
    b7e0:	000b2cc0 	call	b2cc <btc_script_is_pubkey>
    b7e4:	10803fcc 	andi	r2,r2,255
    b7e8:	10000226 	beq	r2,zero,b7f4 <btc_script_classify_ops+0x68>
        return BTC_TX_PUBKEY;
    b7ec:	00800044 	movi	r2,1
    b7f0:	00000706 	br	b810 <btc_script_classify_ops+0x84>
    if (btc_script_is_multisig(ops))
    b7f4:	e13fff17 	ldw	r4,-4(fp)
    b7f8:	000b6400 	call	b640 <btc_script_is_multisig>
    b7fc:	10803fcc 	andi	r2,r2,255
    b800:	10000226 	beq	r2,zero,b80c <btc_script_classify_ops+0x80>
        return BTC_TX_MULTISIG;
    b804:	00800104 	movi	r2,4
    b808:	00000106 	br	b810 <btc_script_classify_ops+0x84>

    return BTC_TX_NONSTANDARD;
    b80c:	0005883a 	mov	r2,zero
}
    b810:	e037883a 	mov	sp,fp
    b814:	dfc00117 	ldw	ra,4(sp)
    b818:	df000017 	ldw	fp,0(sp)
    b81c:	dec00204 	addi	sp,sp,8
    b820:	f800283a 	ret

0000b824 <btc_script_classify>:

enum btc_tx_out_type btc_script_classify(const cstring* script, vector* data_out)
{
    b824:	deffec04 	addi	sp,sp,-80
    b828:	dfc01315 	stw	ra,76(sp)
    b82c:	df001215 	stw	fp,72(sp)
    b830:	df001204 	addi	fp,sp,72
    b834:	e13ffe15 	stw	r4,-8(fp)
    b838:	e17fff15 	stw	r5,-4(fp)
    //INFO: could be speed up by not forming a vector
    //      and directly parse the script cstring

    enum btc_tx_out_type tx_out_type = BTC_TX_NONSTANDARD;
    b83c:	e03fee15 	stw	zero,-72(fp)
    vector* ops = vector_new(10, btc_script_op_free_cb);
    b840:	01400074 	movhi	r5,1
    b844:	296bc104 	addi	r5,r5,-20732
    b848:	01000284 	movi	r4,10
    b84c:	00419b40 	call	419b4 <vector_new>
    b850:	e0bfef15 	stw	r2,-68(fp)
    btc_script_get_ops(script, ops);
    b854:	e17fef17 	ldw	r5,-68(fp)
    b858:	e13ffe17 	ldw	r4,-8(fp)
    b85c:	000af480 	call	af48 <btc_script_get_ops>

    if (btc_script_is_pubkeyhash(ops, data_out))
    b860:	e17fff17 	ldw	r5,-4(fp)
    b864:	e13fef17 	ldw	r4,-68(fp)
    b868:	000b3b00 	call	b3b0 <btc_script_is_pubkeyhash>
    b86c:	10803fcc 	andi	r2,r2,255
    b870:	10000226 	beq	r2,zero,b87c <btc_script_classify+0x58>
        tx_out_type = BTC_TX_PUBKEYHASH;
    b874:	00800084 	movi	r2,2
    b878:	e0bfee15 	stw	r2,-72(fp)
    if (btc_script_is_scripthash(ops, data_out))
    b87c:	e17fff17 	ldw	r5,-4(fp)
    b880:	e13fef17 	ldw	r4,-68(fp)
    b884:	000b4f00 	call	b4f0 <btc_script_is_scripthash>
    b888:	10803fcc 	andi	r2,r2,255
    b88c:	10000226 	beq	r2,zero,b898 <btc_script_classify+0x74>
        tx_out_type = BTC_TX_SCRIPTHASH;
    b890:	008000c4 	movi	r2,3
    b894:	e0bfee15 	stw	r2,-72(fp)
    if (btc_script_is_pubkey(ops, data_out))
    b898:	e17fff17 	ldw	r5,-4(fp)
    b89c:	e13fef17 	ldw	r4,-68(fp)
    b8a0:	000b2cc0 	call	b2cc <btc_script_is_pubkey>
    b8a4:	10803fcc 	andi	r2,r2,255
    b8a8:	10000226 	beq	r2,zero,b8b4 <btc_script_classify+0x90>
        tx_out_type = BTC_TX_PUBKEY;
    b8ac:	00800044 	movi	r2,1
    b8b0:	e0bfee15 	stw	r2,-72(fp)
    if (btc_script_is_multisig(ops))
    b8b4:	e13fef17 	ldw	r4,-68(fp)
    b8b8:	000b6400 	call	b640 <btc_script_is_multisig>
    b8bc:	10803fcc 	andi	r2,r2,255
    b8c0:	10000226 	beq	r2,zero,b8cc <btc_script_classify+0xa8>
        tx_out_type = BTC_TX_MULTISIG;
    b8c4:	00800104 	movi	r2,4
    b8c8:	e0bfee15 	stw	r2,-72(fp)
    uint8_t version = 0;
    b8cc:	e03ff205 	stb	zero,-56(fp)
    uint8_t witness_program[40] = {0};
    b8d0:	e0bff244 	addi	r2,fp,-55
    b8d4:	00c00a04 	movi	r3,40
    b8d8:	180d883a 	mov	r6,r3
    b8dc:	000b883a 	mov	r5,zero
    b8e0:	1009883a 	mov	r4,r2
    b8e4:	0045f3c0 	call	45f3c <memset>
    int witness_program_len = 0;
    b8e8:	e03ffd15 	stw	zero,-12(fp)
    if (btc_script_is_witnessprogram(script, &version, witness_program, &witness_program_len)) {
    b8ec:	e13ffd04 	addi	r4,fp,-12
    b8f0:	e0fff244 	addi	r3,fp,-55
    b8f4:	e0bff204 	addi	r2,fp,-56
    b8f8:	200f883a 	mov	r7,r4
    b8fc:	180d883a 	mov	r6,r3
    b900:	100b883a 	mov	r5,r2
    b904:	e13ffe17 	ldw	r4,-8(fp)
    b908:	000bfa00 	call	bfa0 <btc_script_is_witnessprogram>
    b90c:	10803fcc 	andi	r2,r2,255
    b910:	10003226 	beq	r2,zero,b9dc <btc_script_classify+0x1b8>
        if (version == 0 && witness_program_len == 20) {
    b914:	e0bff203 	ldbu	r2,-56(fp)
    b918:	10803fcc 	andi	r2,r2,255
    b91c:	1000161e 	bne	r2,zero,b978 <btc_script_classify+0x154>
    b920:	e0bffd17 	ldw	r2,-12(fp)
    b924:	10800518 	cmpnei	r2,r2,20
    b928:	1000131e 	bne	r2,zero,b978 <btc_script_classify+0x154>
            tx_out_type = BTC_TX_WITNESS_V0_PUBKEYHASH;
    b92c:	00800144 	movi	r2,5
    b930:	e0bfee15 	stw	r2,-72(fp)
            if (data_out) {
    b934:	e0bfff17 	ldw	r2,-4(fp)
    b938:	10000f26 	beq	r2,zero,b978 <btc_script_classify+0x154>
                uint8_t *witness_program_cpy = btc_calloc(1, witness_program_len);
    b93c:	e0bffd17 	ldw	r2,-12(fp)
    b940:	100b883a 	mov	r5,r2
    b944:	01000044 	movi	r4,1
    b948:	000663c0 	call	663c <btc_calloc>
    b94c:	e0bff015 	stw	r2,-64(fp)
                memcpy(witness_program_cpy, witness_program, witness_program_len);
    b950:	e0bffd17 	ldw	r2,-12(fp)
    b954:	1007883a 	mov	r3,r2
    b958:	e0bff244 	addi	r2,fp,-55
    b95c:	180d883a 	mov	r6,r3
    b960:	100b883a 	mov	r5,r2
    b964:	e13ff017 	ldw	r4,-64(fp)
    b968:	0045c980 	call	45c98 <memcpy>
                vector_add(data_out, witness_program_cpy);
    b96c:	e17ff017 	ldw	r5,-64(fp)
    b970:	e13fff17 	ldw	r4,-4(fp)
    b974:	0041d340 	call	41d34 <vector_add>
            }
        }
        if (version == 0 && witness_program_len == 32) {
    b978:	e0bff203 	ldbu	r2,-56(fp)
    b97c:	10803fcc 	andi	r2,r2,255
    b980:	1000161e 	bne	r2,zero,b9dc <btc_script_classify+0x1b8>
    b984:	e0bffd17 	ldw	r2,-12(fp)
    b988:	10800818 	cmpnei	r2,r2,32
    b98c:	1000131e 	bne	r2,zero,b9dc <btc_script_classify+0x1b8>
            tx_out_type = BTC_TX_WITNESS_V0_SCRIPTHASH;
    b990:	00800184 	movi	r2,6
    b994:	e0bfee15 	stw	r2,-72(fp)
            if (data_out) {
    b998:	e0bfff17 	ldw	r2,-4(fp)
    b99c:	10000f26 	beq	r2,zero,b9dc <btc_script_classify+0x1b8>
                uint8_t *witness_program_cpy = btc_calloc(1, witness_program_len);
    b9a0:	e0bffd17 	ldw	r2,-12(fp)
    b9a4:	100b883a 	mov	r5,r2
    b9a8:	01000044 	movi	r4,1
    b9ac:	000663c0 	call	663c <btc_calloc>
    b9b0:	e0bff115 	stw	r2,-60(fp)
                memcpy(witness_program_cpy, witness_program, witness_program_len);
    b9b4:	e0bffd17 	ldw	r2,-12(fp)
    b9b8:	1007883a 	mov	r3,r2
    b9bc:	e0bff244 	addi	r2,fp,-55
    b9c0:	180d883a 	mov	r6,r3
    b9c4:	100b883a 	mov	r5,r2
    b9c8:	e13ff117 	ldw	r4,-60(fp)
    b9cc:	0045c980 	call	45c98 <memcpy>
                vector_add(data_out, witness_program_cpy);
    b9d0:	e17ff117 	ldw	r5,-60(fp)
    b9d4:	e13fff17 	ldw	r4,-4(fp)
    b9d8:	0041d340 	call	41d34 <vector_add>
            }
        }
    }
    vector_free(ops, true);
    b9dc:	01400044 	movi	r5,1
    b9e0:	e13fef17 	ldw	r4,-68(fp)
    b9e4:	0041b840 	call	41b84 <vector_free>
    return tx_out_type;
    b9e8:	e0bfee17 	ldw	r2,-72(fp)
}
    b9ec:	e037883a 	mov	sp,fp
    b9f0:	dfc00117 	ldw	ra,4(sp)
    b9f4:	df000017 	ldw	fp,0(sp)
    b9f8:	dec00204 	addi	sp,sp,8
    b9fc:	f800283a 	ret

0000ba00 <btc_encode_op_n>:


enum opcodetype btc_encode_op_n(const int n)
{
    ba00:	defffd04 	addi	sp,sp,-12
    ba04:	dfc00215 	stw	ra,8(sp)
    ba08:	df000115 	stw	fp,4(sp)
    ba0c:	df000104 	addi	fp,sp,4
    ba10:	e13fff15 	stw	r4,-4(fp)
    assert(n >= 0 && n <= 16);
    ba14:	e0bfff17 	ldw	r2,-4(fp)
    ba18:	10000316 	blt	r2,zero,ba28 <btc_encode_op_n+0x28>
    ba1c:	e0bfff17 	ldw	r2,-4(fp)
    ba20:	10800450 	cmplti	r2,r2,17
    ba24:	1000081e 	bne	r2,zero,ba48 <btc_encode_op_n+0x48>
    ba28:	01c001b4 	movhi	r7,6
    ba2c:	39eaea04 	addi	r7,r7,-21592
    ba30:	018001b4 	movhi	r6,6
    ba34:	31ab1904 	addi	r6,r6,-21404
    ba38:	014058c4 	movi	r5,355
    ba3c:	010001b4 	movhi	r4,6
    ba40:	212ae504 	addi	r4,r4,-21612
    ba44:	004504c0 	call	4504c <__assert_func>
    if (n == 0)
    ba48:	e0bfff17 	ldw	r2,-4(fp)
    ba4c:	1000021e 	bne	r2,zero,ba58 <btc_encode_op_n+0x58>
        return OP_0;
    ba50:	0005883a 	mov	r2,zero
    ba54:	00000206 	br	ba60 <btc_encode_op_n+0x60>
    return (enum opcodetype)(OP_1 + n - 1);
    ba58:	e0bfff17 	ldw	r2,-4(fp)
    ba5c:	10801404 	addi	r2,r2,80
}
    ba60:	e037883a 	mov	sp,fp
    ba64:	dfc00117 	ldw	ra,4(sp)
    ba68:	df000017 	ldw	fp,0(sp)
    ba6c:	dec00204 	addi	sp,sp,8
    ba70:	f800283a 	ret

0000ba74 <btc_script_append_op>:


void btc_script_append_op(cstring* script_in, enum opcodetype op)
{
    ba74:	defffc04 	addi	sp,sp,-16
    ba78:	dfc00315 	stw	ra,12(sp)
    ba7c:	df000215 	stw	fp,8(sp)
    ba80:	df000204 	addi	fp,sp,8
    ba84:	e13ffe15 	stw	r4,-8(fp)
    ba88:	e17fff15 	stw	r5,-4(fp)
    cstr_append_buf(script_in, &op, 1);
    ba8c:	e0bfff04 	addi	r2,fp,-4
    ba90:	01800044 	movi	r6,1
    ba94:	100b883a 	mov	r5,r2
    ba98:	e13ffe17 	ldw	r4,-8(fp)
    ba9c:	00425700 	call	42570 <cstr_append_buf>
}
    baa0:	0001883a 	nop
    baa4:	e037883a 	mov	sp,fp
    baa8:	dfc00117 	ldw	ra,4(sp)
    baac:	df000017 	ldw	fp,0(sp)
    bab0:	dec00204 	addi	sp,sp,8
    bab4:	f800283a 	ret

0000bab8 <btc_script_append_pushdata>:


void btc_script_append_pushdata(cstring* script_in, const unsigned char* data, const size_t datalen)
{
    bab8:	defff904 	addi	sp,sp,-28
    babc:	dfc00615 	stw	ra,24(sp)
    bac0:	df000515 	stw	fp,20(sp)
    bac4:	df000504 	addi	fp,sp,20
    bac8:	e13ffd15 	stw	r4,-12(fp)
    bacc:	e17ffe15 	stw	r5,-8(fp)
    bad0:	e1bfff15 	stw	r6,-4(fp)
    if (datalen < OP_PUSHDATA1) {
    bad4:	e0bfff17 	ldw	r2,-4(fp)
    bad8:	10801328 	cmpgeui	r2,r2,76
    badc:	1000061e 	bne	r2,zero,baf8 <btc_script_append_pushdata+0x40>
        cstr_append_buf(script_in, (unsigned char*)&datalen, 1);
    bae0:	e0bfff04 	addi	r2,fp,-4
    bae4:	01800044 	movi	r6,1
    bae8:	100b883a 	mov	r5,r2
    baec:	e13ffd17 	ldw	r4,-12(fp)
    baf0:	00425700 	call	42570 <cstr_append_buf>
    baf4:	00002306 	br	bb84 <btc_script_append_pushdata+0xcc>
    } else if (datalen <= 0xff) {
    baf8:	e0bfff17 	ldw	r2,-4(fp)
    bafc:	10804028 	cmpgeui	r2,r2,256
    bb00:	1000091e 	bne	r2,zero,bb28 <btc_script_append_pushdata+0x70>
        btc_script_append_op(script_in, OP_PUSHDATA1);
    bb04:	01401304 	movi	r5,76
    bb08:	e13ffd17 	ldw	r4,-12(fp)
    bb0c:	000ba740 	call	ba74 <btc_script_append_op>
        cstr_append_buf(script_in, (unsigned char*)&datalen, 1);
    bb10:	e0bfff04 	addi	r2,fp,-4
    bb14:	01800044 	movi	r6,1
    bb18:	100b883a 	mov	r5,r2
    bb1c:	e13ffd17 	ldw	r4,-12(fp)
    bb20:	00425700 	call	42570 <cstr_append_buf>
    bb24:	00001706 	br	bb84 <btc_script_append_pushdata+0xcc>
    } else if (datalen <= 0xffff) {
    bb28:	e0bfff17 	ldw	r2,-4(fp)
    bb2c:	00ffffd4 	movui	r3,65535
    bb30:	18800a36 	bltu	r3,r2,bb5c <btc_script_append_pushdata+0xa4>
        btc_script_append_op(script_in, OP_PUSHDATA2);
    bb34:	01401344 	movi	r5,77
    bb38:	e13ffd17 	ldw	r4,-12(fp)
    bb3c:	000ba740 	call	ba74 <btc_script_append_op>
        uint16_t v = htole16(datalen);
    bb40:	e0bfff17 	ldw	r2,-4(fp)
    bb44:	e0bffb0d 	sth	r2,-20(fp)
        cstr_append_buf(script_in, &v, sizeof(v));
    bb48:	01800084 	movi	r6,2
    bb4c:	e17ffb04 	addi	r5,fp,-20
    bb50:	e13ffd17 	ldw	r4,-12(fp)
    bb54:	00425700 	call	42570 <cstr_append_buf>
    bb58:	00000a06 	br	bb84 <btc_script_append_pushdata+0xcc>
    } else {
        btc_script_append_op(script_in, OP_PUSHDATA4);
    bb5c:	01401384 	movi	r5,78
    bb60:	e13ffd17 	ldw	r4,-12(fp)
    bb64:	000ba740 	call	ba74 <btc_script_append_op>
        uint32_t v = htole32(datalen);
    bb68:	e0bfff17 	ldw	r2,-4(fp)
    bb6c:	e0bffc15 	stw	r2,-16(fp)
        cstr_append_buf(script_in, &v, sizeof(v));
    bb70:	e0bffc04 	addi	r2,fp,-16
    bb74:	01800104 	movi	r6,4
    bb78:	100b883a 	mov	r5,r2
    bb7c:	e13ffd17 	ldw	r4,-12(fp)
    bb80:	00425700 	call	42570 <cstr_append_buf>
    }
    cstr_append_buf(script_in, data, datalen);
    bb84:	e0bfff17 	ldw	r2,-4(fp)
    bb88:	100d883a 	mov	r6,r2
    bb8c:	e17ffe17 	ldw	r5,-8(fp)
    bb90:	e13ffd17 	ldw	r4,-12(fp)
    bb94:	00425700 	call	42570 <cstr_append_buf>
}
    bb98:	0001883a 	nop
    bb9c:	e037883a 	mov	sp,fp
    bba0:	dfc00117 	ldw	ra,4(sp)
    bba4:	df000017 	ldw	fp,0(sp)
    bba8:	dec00204 	addi	sp,sp,8
    bbac:	f800283a 	ret

0000bbb0 <btc_script_build_multisig>:

btc_bool btc_script_build_multisig(cstring* script_in, const unsigned int required_signatures, const vector* pubkeys_chars)
{
    bbb0:	defff604 	addi	sp,sp,-40
    bbb4:	dfc00915 	stw	ra,36(sp)
    bbb8:	df000815 	stw	fp,32(sp)
    bbbc:	df000804 	addi	fp,sp,32
    bbc0:	e13ffd15 	stw	r4,-12(fp)
    bbc4:	e17ffe15 	stw	r5,-8(fp)
    bbc8:	e1bfff15 	stw	r6,-4(fp)
    cstr_resize(script_in, 0); //clear script
    bbcc:	000b883a 	mov	r5,zero
    bbd0:	e13ffd17 	ldw	r4,-12(fp)
    bbd4:	00424b00 	call	424b0 <cstr_resize>

    if (required_signatures > 16 || pubkeys_chars->len > 16)
    bbd8:	e0bffe17 	ldw	r2,-8(fp)
    bbdc:	10800468 	cmpgeui	r2,r2,17
    bbe0:	1000041e 	bne	r2,zero,bbf4 <btc_script_build_multisig+0x44>
    bbe4:	e0bfff17 	ldw	r2,-4(fp)
    bbe8:	10800117 	ldw	r2,4(r2)
    bbec:	10800470 	cmpltui	r2,r2,17
    bbf0:	1000021e 	bne	r2,zero,bbfc <btc_script_build_multisig+0x4c>
        return false;
    bbf4:	0005883a 	mov	r2,zero
    bbf8:	00003a06 	br	bce4 <btc_script_build_multisig+0x134>
    enum opcodetype op_req_sig = btc_encode_op_n(required_signatures);
    bbfc:	e0bffe17 	ldw	r2,-8(fp)
    bc00:	1009883a 	mov	r4,r2
    bc04:	000ba000 	call	ba00 <btc_encode_op_n>
    bc08:	e0bffa15 	stw	r2,-24(fp)
    cstr_append_buf(script_in, &op_req_sig, 1);
    bc0c:	e0bffa04 	addi	r2,fp,-24
    bc10:	01800044 	movi	r6,1
    bc14:	100b883a 	mov	r5,r2
    bc18:	e13ffd17 	ldw	r4,-12(fp)
    bc1c:	00425700 	call	42570 <cstr_append_buf>

    int i;
    for (i = 0; i < (int)pubkeys_chars->len; i++) {
    bc20:	e03ff815 	stw	zero,-32(fp)
    bc24:	00001806 	br	bc88 <btc_script_build_multisig+0xd8>
        btc_pubkey* pkey = pubkeys_chars->data[i];
    bc28:	e0bfff17 	ldw	r2,-4(fp)
    bc2c:	10c00017 	ldw	r3,0(r2)
    bc30:	e0bff817 	ldw	r2,-32(fp)
    bc34:	1085883a 	add	r2,r2,r2
    bc38:	1085883a 	add	r2,r2,r2
    bc3c:	1885883a 	add	r2,r3,r2
    bc40:	10800017 	ldw	r2,0(r2)
    bc44:	e0bff915 	stw	r2,-28(fp)
        btc_script_append_pushdata(script_in, pkey->pubkey, (pkey->compressed ? BTC_ECKEY_COMPRESSED_LENGTH : BTC_ECKEY_UNCOMPRESSED_LENGTH));
    bc48:	e0bff917 	ldw	r2,-28(fp)
    bc4c:	10c00044 	addi	r3,r2,1
    bc50:	e0bff917 	ldw	r2,-28(fp)
    bc54:	10800003 	ldbu	r2,0(r2)
    bc58:	10803fcc 	andi	r2,r2,255
    bc5c:	10000226 	beq	r2,zero,bc68 <btc_script_build_multisig+0xb8>
    bc60:	00800844 	movi	r2,33
    bc64:	00000106 	br	bc6c <btc_script_build_multisig+0xbc>
    bc68:	00801044 	movi	r2,65
    bc6c:	100d883a 	mov	r6,r2
    bc70:	180b883a 	mov	r5,r3
    bc74:	e13ffd17 	ldw	r4,-12(fp)
    bc78:	000bab80 	call	bab8 <btc_script_append_pushdata>
        return false;
    enum opcodetype op_req_sig = btc_encode_op_n(required_signatures);
    cstr_append_buf(script_in, &op_req_sig, 1);

    int i;
    for (i = 0; i < (int)pubkeys_chars->len; i++) {
    bc7c:	e0bff817 	ldw	r2,-32(fp)
    bc80:	10800044 	addi	r2,r2,1
    bc84:	e0bff815 	stw	r2,-32(fp)
    bc88:	e0bfff17 	ldw	r2,-4(fp)
    bc8c:	10800117 	ldw	r2,4(r2)
    bc90:	1007883a 	mov	r3,r2
    bc94:	e0bff817 	ldw	r2,-32(fp)
    bc98:	10ffe316 	blt	r2,r3,bc28 <__alt_mem_epcs_flash_controller+0xfdffac28>
        btc_pubkey* pkey = pubkeys_chars->data[i];
        btc_script_append_pushdata(script_in, pkey->pubkey, (pkey->compressed ? BTC_ECKEY_COMPRESSED_LENGTH : BTC_ECKEY_UNCOMPRESSED_LENGTH));
    }

    enum opcodetype op_pub_len = btc_encode_op_n(pubkeys_chars->len);
    bc9c:	e0bfff17 	ldw	r2,-4(fp)
    bca0:	10800117 	ldw	r2,4(r2)
    bca4:	1009883a 	mov	r4,r2
    bca8:	000ba000 	call	ba00 <btc_encode_op_n>
    bcac:	e0bffb15 	stw	r2,-20(fp)
    cstr_append_buf(script_in, &op_pub_len, 1);
    bcb0:	e0bffb04 	addi	r2,fp,-20
    bcb4:	01800044 	movi	r6,1
    bcb8:	100b883a 	mov	r5,r2
    bcbc:	e13ffd17 	ldw	r4,-12(fp)
    bcc0:	00425700 	call	42570 <cstr_append_buf>

    enum opcodetype op_checkmultisig = OP_CHECKMULTISIG;
    bcc4:	00802b84 	movi	r2,174
    bcc8:	e0bffc15 	stw	r2,-16(fp)
    cstr_append_buf(script_in, &op_checkmultisig, 1);
    bccc:	e0bffc04 	addi	r2,fp,-16
    bcd0:	01800044 	movi	r6,1
    bcd4:	100b883a 	mov	r5,r2
    bcd8:	e13ffd17 	ldw	r4,-12(fp)
    bcdc:	00425700 	call	42570 <cstr_append_buf>

    return true;
    bce0:	00800044 	movi	r2,1
}
    bce4:	e037883a 	mov	sp,fp
    bce8:	dfc00117 	ldw	ra,4(sp)
    bcec:	df000017 	ldw	fp,0(sp)
    bcf0:	dec00204 	addi	sp,sp,8
    bcf4:	f800283a 	ret

0000bcf8 <btc_script_build_p2pkh>:

btc_bool btc_script_build_p2pkh(cstring* script_in, const uint160 hash160)
{
    bcf8:	defffc04 	addi	sp,sp,-16
    bcfc:	dfc00315 	stw	ra,12(sp)
    bd00:	df000215 	stw	fp,8(sp)
    bd04:	df000204 	addi	fp,sp,8
    bd08:	e13ffe15 	stw	r4,-8(fp)
    bd0c:	e17fff15 	stw	r5,-4(fp)
    cstr_resize(script_in, 0); //clear script
    bd10:	000b883a 	mov	r5,zero
    bd14:	e13ffe17 	ldw	r4,-8(fp)
    bd18:	00424b00 	call	424b0 <cstr_resize>

    btc_script_append_op(script_in, OP_DUP);
    bd1c:	01401d84 	movi	r5,118
    bd20:	e13ffe17 	ldw	r4,-8(fp)
    bd24:	000ba740 	call	ba74 <btc_script_append_op>
    btc_script_append_op(script_in, OP_HASH160);
    bd28:	01402a44 	movi	r5,169
    bd2c:	e13ffe17 	ldw	r4,-8(fp)
    bd30:	000ba740 	call	ba74 <btc_script_append_op>


    btc_script_append_pushdata(script_in, (unsigned char*)hash160, sizeof(uint160));
    bd34:	01800504 	movi	r6,20
    bd38:	e17fff17 	ldw	r5,-4(fp)
    bd3c:	e13ffe17 	ldw	r4,-8(fp)
    bd40:	000bab80 	call	bab8 <btc_script_append_pushdata>
    btc_script_append_op(script_in, OP_EQUALVERIFY);
    bd44:	01402204 	movi	r5,136
    bd48:	e13ffe17 	ldw	r4,-8(fp)
    bd4c:	000ba740 	call	ba74 <btc_script_append_op>
    btc_script_append_op(script_in, OP_CHECKSIG);
    bd50:	01402b04 	movi	r5,172
    bd54:	e13ffe17 	ldw	r4,-8(fp)
    bd58:	000ba740 	call	ba74 <btc_script_append_op>

    return true;
    bd5c:	00800044 	movi	r2,1
}
    bd60:	e037883a 	mov	sp,fp
    bd64:	dfc00117 	ldw	ra,4(sp)
    bd68:	df000017 	ldw	fp,0(sp)
    bd6c:	dec00204 	addi	sp,sp,8
    bd70:	f800283a 	ret

0000bd74 <btc_script_build_p2wpkh>:

btc_bool btc_script_build_p2wpkh(cstring* script_in, const uint160 hash160)
{
    bd74:	defffc04 	addi	sp,sp,-16
    bd78:	dfc00315 	stw	ra,12(sp)
    bd7c:	df000215 	stw	fp,8(sp)
    bd80:	df000204 	addi	fp,sp,8
    bd84:	e13ffe15 	stw	r4,-8(fp)
    bd88:	e17fff15 	stw	r5,-4(fp)
    cstr_resize(script_in, 0); //clear script
    bd8c:	000b883a 	mov	r5,zero
    bd90:	e13ffe17 	ldw	r4,-8(fp)
    bd94:	00424b00 	call	424b0 <cstr_resize>

    btc_script_append_op(script_in, OP_0);
    bd98:	000b883a 	mov	r5,zero
    bd9c:	e13ffe17 	ldw	r4,-8(fp)
    bda0:	000ba740 	call	ba74 <btc_script_append_op>
    btc_script_append_pushdata(script_in, (unsigned char*)hash160, sizeof(uint160));
    bda4:	01800504 	movi	r6,20
    bda8:	e17fff17 	ldw	r5,-4(fp)
    bdac:	e13ffe17 	ldw	r4,-8(fp)
    bdb0:	000bab80 	call	bab8 <btc_script_append_pushdata>

    return true;
    bdb4:	00800044 	movi	r2,1
}
    bdb8:	e037883a 	mov	sp,fp
    bdbc:	dfc00117 	ldw	ra,4(sp)
    bdc0:	df000017 	ldw	fp,0(sp)
    bdc4:	dec00204 	addi	sp,sp,8
    bdc8:	f800283a 	ret

0000bdcc <btc_script_build_p2sh>:

btc_bool btc_script_build_p2sh(cstring* script_in, const uint160 hash160)
{
    bdcc:	defffc04 	addi	sp,sp,-16
    bdd0:	dfc00315 	stw	ra,12(sp)
    bdd4:	df000215 	stw	fp,8(sp)
    bdd8:	df000204 	addi	fp,sp,8
    bddc:	e13ffe15 	stw	r4,-8(fp)
    bde0:	e17fff15 	stw	r5,-4(fp)
    cstr_resize(script_in, 0); //clear script
    bde4:	000b883a 	mov	r5,zero
    bde8:	e13ffe17 	ldw	r4,-8(fp)
    bdec:	00424b00 	call	424b0 <cstr_resize>
    btc_script_append_op(script_in, OP_HASH160);
    bdf0:	01402a44 	movi	r5,169
    bdf4:	e13ffe17 	ldw	r4,-8(fp)
    bdf8:	000ba740 	call	ba74 <btc_script_append_op>
    btc_script_append_pushdata(script_in, (unsigned char*)hash160, sizeof(uint160));
    bdfc:	01800504 	movi	r6,20
    be00:	e17fff17 	ldw	r5,-4(fp)
    be04:	e13ffe17 	ldw	r4,-8(fp)
    be08:	000bab80 	call	bab8 <btc_script_append_pushdata>
    btc_script_append_op(script_in, OP_EQUAL);
    be0c:	014021c4 	movi	r5,135
    be10:	e13ffe17 	ldw	r4,-8(fp)
    be14:	000ba740 	call	ba74 <btc_script_append_op>

    return true;
    be18:	00800044 	movi	r2,1
}
    be1c:	e037883a 	mov	sp,fp
    be20:	dfc00117 	ldw	ra,4(sp)
    be24:	df000017 	ldw	fp,0(sp)
    be28:	dec00204 	addi	sp,sp,8
    be2c:	f800283a 	ret

0000be30 <btc_script_get_scripthash>:

btc_bool btc_script_get_scripthash(const cstring* script_in, uint160 scripthash)
{
    be30:	defff404 	addi	sp,sp,-48
    be34:	dfc00b15 	stw	ra,44(sp)
    be38:	df000a15 	stw	fp,40(sp)
    be3c:	df000a04 	addi	fp,sp,40
    be40:	e13ffe15 	stw	r4,-8(fp)
    be44:	e17fff15 	stw	r5,-4(fp)
    if (!script_in) {
    be48:	e0bffe17 	ldw	r2,-8(fp)
    be4c:	1000021e 	bne	r2,zero,be58 <btc_script_get_scripthash+0x28>
        return false;
    be50:	0005883a 	mov	r2,zero
    be54:	00000d06 	br	be8c <btc_script_get_scripthash+0x5c>
    }
    uint256 hash;
    btc_hash_sngl_sha256((const unsigned char *)script_in->str, script_in->len, hash);
    be58:	e0bffe17 	ldw	r2,-8(fp)
    be5c:	10c00017 	ldw	r3,0(r2)
    be60:	e0bffe17 	ldw	r2,-8(fp)
    be64:	10800117 	ldw	r2,4(r2)
    be68:	e1bff604 	addi	r6,fp,-40
    be6c:	100b883a 	mov	r5,r2
    be70:	1809883a 	mov	r4,r3
    be74:	000aae00 	call	aae0 <btc_hash_sngl_sha256>
    btc_ripemd160(hash, sizeof(hash), scripthash);
    be78:	e1bfff17 	ldw	r6,-4(fp)
    be7c:	01400804 	movi	r5,32
    be80:	e13ff604 	addi	r4,fp,-40
    be84:	000a6a40 	call	a6a4 <btc_ripemd160>

    return true;
    be88:	00800044 	movi	r2,1
}
    be8c:	e037883a 	mov	sp,fp
    be90:	dfc00117 	ldw	ra,4(sp)
    be94:	df000017 	ldw	fp,0(sp)
    be98:	dec00204 	addi	sp,sp,8
    be9c:	f800283a 	ret

0000bea0 <btc_tx_out_type_to_str>:

const char * btc_tx_out_type_to_str(const enum btc_tx_out_type type) {
    bea0:	defffe04 	addi	sp,sp,-8
    bea4:	df000115 	stw	fp,4(sp)
    bea8:	df000104 	addi	fp,sp,4
    beac:	e13fff15 	stw	r4,-4(fp)
    if (type == BTC_TX_PUBKEY) {
    beb0:	e0bfff17 	ldw	r2,-4(fp)
    beb4:	10800058 	cmpnei	r2,r2,1
    beb8:	1000031e 	bne	r2,zero,bec8 <btc_tx_out_type_to_str+0x28>
        return "TX_PUBKEY";
    bebc:	008001b4 	movhi	r2,6
    bec0:	10aaef04 	addi	r2,r2,-21572
    bec4:	00001406 	br	bf18 <btc_tx_out_type_to_str+0x78>
    }
    else if (type == BTC_TX_PUBKEYHASH) {
    bec8:	e0bfff17 	ldw	r2,-4(fp)
    becc:	10800098 	cmpnei	r2,r2,2
    bed0:	1000031e 	bne	r2,zero,bee0 <btc_tx_out_type_to_str+0x40>
        return "TX_PUBKEYHASH";
    bed4:	008001b4 	movhi	r2,6
    bed8:	10aaf204 	addi	r2,r2,-21560
    bedc:	00000e06 	br	bf18 <btc_tx_out_type_to_str+0x78>
    }
    else if (type == BTC_TX_SCRIPTHASH) {
    bee0:	e0bfff17 	ldw	r2,-4(fp)
    bee4:	108000d8 	cmpnei	r2,r2,3
    bee8:	1000031e 	bne	r2,zero,bef8 <btc_tx_out_type_to_str+0x58>
        return "TX_SCRIPTHASH";
    beec:	008001b4 	movhi	r2,6
    bef0:	10aaf604 	addi	r2,r2,-21544
    bef4:	00000806 	br	bf18 <btc_tx_out_type_to_str+0x78>
    }
    else if (type == BTC_TX_MULTISIG) {
    bef8:	e0bfff17 	ldw	r2,-4(fp)
    befc:	10800118 	cmpnei	r2,r2,4
    bf00:	1000031e 	bne	r2,zero,bf10 <btc_tx_out_type_to_str+0x70>
        return "TX_MULTISIG";
    bf04:	008001b4 	movhi	r2,6
    bf08:	10aafa04 	addi	r2,r2,-21528
    bf0c:	00000206 	br	bf18 <btc_tx_out_type_to_str+0x78>
    }
    else {
        return "TX_NONSTANDARD";
    bf10:	008001b4 	movhi	r2,6
    bf14:	10aafd04 	addi	r2,r2,-21516
    }
}
    bf18:	e037883a 	mov	sp,fp
    bf1c:	df000017 	ldw	fp,0(sp)
    bf20:	dec00104 	addi	sp,sp,4
    bf24:	f800283a 	ret

0000bf28 <btc_decode_op_n>:

static uint8_t btc_decode_op_n(enum opcodetype op)
{
    bf28:	defffd04 	addi	sp,sp,-12
    bf2c:	dfc00215 	stw	ra,8(sp)
    bf30:	df000115 	stw	fp,4(sp)
    bf34:	df000104 	addi	fp,sp,4
    bf38:	e13fff15 	stw	r4,-4(fp)
    if (op == OP_0) {
    bf3c:	e0bfff17 	ldw	r2,-4(fp)
    bf40:	1000021e 	bne	r2,zero,bf4c <btc_decode_op_n+0x24>
        return 0;
    bf44:	0005883a 	mov	r2,zero
    bf48:	00001006 	br	bf8c <btc_decode_op_n+0x64>
    }
    assert(op >= OP_1 && op <= OP_16);
    bf4c:	e0bfff17 	ldw	r2,-4(fp)
    bf50:	10801470 	cmpltui	r2,r2,81
    bf54:	1000031e 	bne	r2,zero,bf64 <btc_decode_op_n+0x3c>
    bf58:	e0bfff17 	ldw	r2,-4(fp)
    bf5c:	10801870 	cmpltui	r2,r2,97
    bf60:	1000081e 	bne	r2,zero,bf84 <btc_decode_op_n+0x5c>
    bf64:	01c001b4 	movhi	r7,6
    bf68:	39eb0104 	addi	r7,r7,-21500
    bf6c:	018001b4 	movhi	r6,6
    bf70:	31ab1d04 	addi	r6,r6,-21388
    bf74:	01407844 	movi	r5,481
    bf78:	010001b4 	movhi	r4,6
    bf7c:	212ae504 	addi	r4,r4,-21612
    bf80:	004504c0 	call	4504c <__assert_func>
    return (uint8_t)op - (uint8_t)(OP_1 - 1);
    bf84:	e0bfff17 	ldw	r2,-4(fp)
    bf88:	10bfec04 	addi	r2,r2,-80
}
    bf8c:	e037883a 	mov	sp,fp
    bf90:	dfc00117 	ldw	ra,4(sp)
    bf94:	df000017 	ldw	fp,0(sp)
    bf98:	dec00204 	addi	sp,sp,8
    bf9c:	f800283a 	ret

0000bfa0 <btc_script_is_witnessprogram>:

// A witness program is any valid script that consists of a 1-byte push opcode
// followed by a data push between 2 and 40 bytes.
btc_bool btc_script_is_witnessprogram(const cstring* script, uint8_t* version_out, uint8_t *program_out, int *programm_len_out)
{
    bfa0:	defffa04 	addi	sp,sp,-24
    bfa4:	dfc00515 	stw	ra,20(sp)
    bfa8:	df000415 	stw	fp,16(sp)
    bfac:	df000404 	addi	fp,sp,16
    bfb0:	e13ffc15 	stw	r4,-16(fp)
    bfb4:	e17ffd15 	stw	r5,-12(fp)
    bfb8:	e1bffe15 	stw	r6,-8(fp)
    bfbc:	e1ffff15 	stw	r7,-4(fp)
    if (!version_out || !program_out) {
    bfc0:	e0bffd17 	ldw	r2,-12(fp)
    bfc4:	10000226 	beq	r2,zero,bfd0 <btc_script_is_witnessprogram+0x30>
    bfc8:	e0bffe17 	ldw	r2,-8(fp)
    bfcc:	1000021e 	bne	r2,zero,bfd8 <btc_script_is_witnessprogram+0x38>
        return false;
    bfd0:	0005883a 	mov	r2,zero
    bfd4:	00005c06 	br	c148 <btc_script_is_witnessprogram+0x1a8>
    }
    if (script->len < 4 || script->len > 42) {
    bfd8:	e0bffc17 	ldw	r2,-16(fp)
    bfdc:	10800117 	ldw	r2,4(r2)
    bfe0:	10800130 	cmpltui	r2,r2,4
    bfe4:	1000041e 	bne	r2,zero,bff8 <btc_script_is_witnessprogram+0x58>
    bfe8:	e0bffc17 	ldw	r2,-16(fp)
    bfec:	10800117 	ldw	r2,4(r2)
    bff0:	10800af0 	cmpltui	r2,r2,43
    bff4:	1000021e 	bne	r2,zero,c000 <btc_script_is_witnessprogram+0x60>
        return false;
    bff8:	0005883a 	mov	r2,zero
    bffc:	00005206 	br	c148 <btc_script_is_witnessprogram+0x1a8>
    }
    if (script->str[0] != OP_0 && (script->str[0] < OP_1 || script->str[0] > OP_16)) {
    c000:	e0bffc17 	ldw	r2,-16(fp)
    c004:	10800017 	ldw	r2,0(r2)
    c008:	10800003 	ldbu	r2,0(r2)
    c00c:	10803fcc 	andi	r2,r2,255
    c010:	1080201c 	xori	r2,r2,128
    c014:	10bfe004 	addi	r2,r2,-128
    c018:	10001226 	beq	r2,zero,c064 <btc_script_is_witnessprogram+0xc4>
    c01c:	e0bffc17 	ldw	r2,-16(fp)
    c020:	10800017 	ldw	r2,0(r2)
    c024:	10800003 	ldbu	r2,0(r2)
    c028:	10803fcc 	andi	r2,r2,255
    c02c:	1080201c 	xori	r2,r2,128
    c030:	10bfe004 	addi	r2,r2,-128
    c034:	10801450 	cmplti	r2,r2,81
    c038:	1000081e 	bne	r2,zero,c05c <btc_script_is_witnessprogram+0xbc>
    c03c:	e0bffc17 	ldw	r2,-16(fp)
    c040:	10800017 	ldw	r2,0(r2)
    c044:	10800003 	ldbu	r2,0(r2)
    c048:	10803fcc 	andi	r2,r2,255
    c04c:	1080201c 	xori	r2,r2,128
    c050:	10bfe004 	addi	r2,r2,-128
    c054:	10801850 	cmplti	r2,r2,97
    c058:	1000021e 	bne	r2,zero,c064 <btc_script_is_witnessprogram+0xc4>
        return false;
    c05c:	0005883a 	mov	r2,zero
    c060:	00003906 	br	c148 <btc_script_is_witnessprogram+0x1a8>
    }
    if ((size_t)(script->str[1] + 2) == script->len) {
    c064:	e0bffc17 	ldw	r2,-16(fp)
    c068:	10800017 	ldw	r2,0(r2)
    c06c:	10800044 	addi	r2,r2,1
    c070:	10800003 	ldbu	r2,0(r2)
    c074:	10803fcc 	andi	r2,r2,255
    c078:	1080201c 	xori	r2,r2,128
    c07c:	10bfe004 	addi	r2,r2,-128
    c080:	10800084 	addi	r2,r2,2
    c084:	1007883a 	mov	r3,r2
    c088:	e0bffc17 	ldw	r2,-16(fp)
    c08c:	10800117 	ldw	r2,4(r2)
    c090:	18802c1e 	bne	r3,r2,c144 <btc_script_is_witnessprogram+0x1a4>
        *version_out = btc_decode_op_n((enum opcodetype)script->str[0]);
    c094:	e0bffc17 	ldw	r2,-16(fp)
    c098:	10800017 	ldw	r2,0(r2)
    c09c:	10800003 	ldbu	r2,0(r2)
    c0a0:	10803fcc 	andi	r2,r2,255
    c0a4:	1080201c 	xori	r2,r2,128
    c0a8:	10bfe004 	addi	r2,r2,-128
    c0ac:	1009883a 	mov	r4,r2
    c0b0:	000bf280 	call	bf28 <btc_decode_op_n>
    c0b4:	1007883a 	mov	r3,r2
    c0b8:	e0bffd17 	ldw	r2,-12(fp)
    c0bc:	10c00005 	stb	r3,0(r2)
        if (program_out) {
    c0c0:	e0bffe17 	ldw	r2,-8(fp)
    c0c4:	10001d26 	beq	r2,zero,c13c <btc_script_is_witnessprogram+0x19c>
            assert(script->len - 2 <= 40);
    c0c8:	e0bffc17 	ldw	r2,-16(fp)
    c0cc:	10800117 	ldw	r2,4(r2)
    c0d0:	10bfff84 	addi	r2,r2,-2
    c0d4:	10800a70 	cmpltui	r2,r2,41
    c0d8:	1000081e 	bne	r2,zero,c0fc <btc_script_is_witnessprogram+0x15c>
    c0dc:	01c001b4 	movhi	r7,6
    c0e0:	39eb0804 	addi	r7,r7,-21472
    c0e4:	018001b4 	movhi	r6,6
    c0e8:	31ab2104 	addi	r6,r6,-21372
    c0ec:	01407d44 	movi	r5,501
    c0f0:	010001b4 	movhi	r4,6
    c0f4:	212ae504 	addi	r4,r4,-21612
    c0f8:	004504c0 	call	4504c <__assert_func>
            memcpy(program_out, script->str + 2, script->len - 2);
    c0fc:	e0bffc17 	ldw	r2,-16(fp)
    c100:	10800017 	ldw	r2,0(r2)
    c104:	10c00084 	addi	r3,r2,2
    c108:	e0bffc17 	ldw	r2,-16(fp)
    c10c:	10800117 	ldw	r2,4(r2)
    c110:	10bfff84 	addi	r2,r2,-2
    c114:	100d883a 	mov	r6,r2
    c118:	180b883a 	mov	r5,r3
    c11c:	e13ffe17 	ldw	r4,-8(fp)
    c120:	0045c980 	call	45c98 <memcpy>
            *programm_len_out = script->len - 2;
    c124:	e0bffc17 	ldw	r2,-16(fp)
    c128:	10800117 	ldw	r2,4(r2)
    c12c:	10bfff84 	addi	r2,r2,-2
    c130:	1007883a 	mov	r3,r2
    c134:	e0bfff17 	ldw	r2,-4(fp)
    c138:	10c00015 	stw	r3,0(r2)
        }
        return true;
    c13c:	00800044 	movi	r2,1
    c140:	00000106 	br	c148 <btc_script_is_witnessprogram+0x1a8>
    }
    return false;
    c144:	0005883a 	mov	r2,zero
}
    c148:	e037883a 	mov	sp,fp
    c14c:	dfc00117 	ldw	ra,4(sp)
    c150:	df000017 	ldw	fp,0(sp)
    c154:	dec00204 	addi	sp,sp,8
    c158:	f800283a 	ret

0000c15c <secp256k1_callback_call>:
typedef struct {
    void (*fn)(const char *text, void* data);
    const void* data;
} secp256k1_callback;

static SECP256K1_INLINE void secp256k1_callback_call(const secp256k1_callback * const cb, const char * const text) {
    c15c:	defffc04 	addi	sp,sp,-16
    c160:	dfc00315 	stw	ra,12(sp)
    c164:	df000215 	stw	fp,8(sp)
    c168:	df000204 	addi	fp,sp,8
    c16c:	e13ffe15 	stw	r4,-8(fp)
    c170:	e17fff15 	stw	r5,-4(fp)
    cb->fn(text, (void*)cb->data);
    c174:	e0bffe17 	ldw	r2,-8(fp)
    c178:	10800017 	ldw	r2,0(r2)
    c17c:	e0fffe17 	ldw	r3,-8(fp)
    c180:	18c00117 	ldw	r3,4(r3)
    c184:	180b883a 	mov	r5,r3
    c188:	e13fff17 	ldw	r4,-4(fp)
    c18c:	103ee83a 	callr	r2
}
    c190:	0001883a 	nop
    c194:	e037883a 	mov	sp,fp
    c198:	dfc00117 	ldw	ra,4(sp)
    c19c:	df000017 	ldw	fp,0(sp)
    c1a0:	dec00204 	addi	sp,sp,8
    c1a4:	f800283a 	ret

0000c1a8 <checked_malloc>:
#else
#define VERIFY_CHECK(cond) do { (void)(cond); } while(0)
#define VERIFY_SETUP(stmt)
#endif

static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_t size) {
    c1a8:	defffb04 	addi	sp,sp,-20
    c1ac:	dfc00415 	stw	ra,16(sp)
    c1b0:	df000315 	stw	fp,12(sp)
    c1b4:	df000304 	addi	fp,sp,12
    c1b8:	e13ffe15 	stw	r4,-8(fp)
    c1bc:	e17fff15 	stw	r5,-4(fp)
    void *ret = malloc(size);
    c1c0:	e13fff17 	ldw	r4,-4(fp)
    c1c4:	00453e80 	call	453e8 <malloc>
    c1c8:	e0bffd15 	stw	r2,-12(fp)
    if (ret == NULL) {
    c1cc:	e0bffd17 	ldw	r2,-12(fp)
    c1d0:	1000041e 	bne	r2,zero,c1e4 <checked_malloc+0x3c>
        secp256k1_callback_call(cb, "Out of memory");
    c1d4:	014001b4 	movhi	r5,6
    c1d8:	296b2904 	addi	r5,r5,-21340
    c1dc:	e13ffe17 	ldw	r4,-8(fp)
    c1e0:	000c15c0 	call	c15c <secp256k1_callback_call>
    }
    return ret;
    c1e4:	e0bffd17 	ldw	r2,-12(fp)
}
    c1e8:	e037883a 	mov	sp,fp
    c1ec:	dfc00117 	ldw	ra,4(sp)
    c1f0:	df000017 	ldw	fp,0(sp)
    c1f4:	dec00204 	addi	sp,sp,8
    c1f8:	f800283a 	ret

0000c1fc <secp256k1_sha256_initialize>:
#define BE32(x) (x)
#else
#define BE32(p) ((((p) & 0xFF) << 24) | (((p) & 0xFF00) << 8) | (((p) & 0xFF0000) >> 8) | (((p) & 0xFF000000) >> 24))
#endif

static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {
    c1fc:	defffe04 	addi	sp,sp,-8
    c200:	df000115 	stw	fp,4(sp)
    c204:	df000104 	addi	fp,sp,4
    c208:	e13fff15 	stw	r4,-4(fp)
    hash->s[0] = 0x6a09e667ul;
    c20c:	e0ffff17 	ldw	r3,-4(fp)
    c210:	009a82b4 	movhi	r2,27146
    c214:	10b999c4 	addi	r2,r2,-6553
    c218:	18800015 	stw	r2,0(r3)
    hash->s[1] = 0xbb67ae85ul;
    c21c:	e0ffff17 	ldw	r3,-4(fp)
    c220:	00aeda34 	movhi	r2,47976
    c224:	10aba144 	addi	r2,r2,-20859
    c228:	18800115 	stw	r2,4(r3)
    hash->s[2] = 0x3c6ef372ul;
    c22c:	e0ffff17 	ldw	r3,-4(fp)
    c230:	008f1bf4 	movhi	r2,15471
    c234:	10bcdc84 	addi	r2,r2,-3214
    c238:	18800215 	stw	r2,8(r3)
    hash->s[3] = 0xa54ff53aul;
    c23c:	e0ffff17 	ldw	r3,-4(fp)
    c240:	00a95434 	movhi	r2,42320
    c244:	10bd4e84 	addi	r2,r2,-2758
    c248:	18800315 	stw	r2,12(r3)
    hash->s[4] = 0x510e527ful;
    c24c:	e0ffff17 	ldw	r3,-4(fp)
    c250:	009443b4 	movhi	r2,20750
    c254:	10949fc4 	addi	r2,r2,21119
    c258:	18800415 	stw	r2,16(r3)
    hash->s[5] = 0x9b05688cul;
    c25c:	e0ffff17 	ldw	r3,-4(fp)
    c260:	00a6c174 	movhi	r2,39685
    c264:	109a2304 	addi	r2,r2,26764
    c268:	18800515 	stw	r2,20(r3)
    hash->s[6] = 0x1f83d9abul;
    c26c:	e0ffff17 	ldw	r3,-4(fp)
    c270:	0087e134 	movhi	r2,8068
    c274:	10b66ac4 	addi	r2,r2,-9813
    c278:	18800615 	stw	r2,24(r3)
    hash->s[7] = 0x5be0cd19ul;
    c27c:	e0ffff17 	ldw	r3,-4(fp)
    c280:	0096f874 	movhi	r2,23521
    c284:	10b34644 	addi	r2,r2,-13031
    c288:	18800715 	stw	r2,28(r3)
    hash->bytes = 0;
    c28c:	e0bfff17 	ldw	r2,-4(fp)
    c290:	10001815 	stw	zero,96(r2)
}
    c294:	0001883a 	nop
    c298:	e037883a 	mov	sp,fp
    c29c:	df000017 	ldw	fp,0(sp)
    c2a0:	dec00104 	addi	sp,sp,4
    c2a4:	f800283a 	ret

0000c2a8 <secp256k1_sha256_transform>:

/** Perform one SHA-256 transformation, processing 16 big endian 32-bit words. */
static void secp256k1_sha256_transform(uint32_t* s, const uint32_t* chunk) {
    c2a8:	deff6504 	addi	sp,sp,-620
    c2ac:	df009a15 	stw	fp,616(sp)
    c2b0:	df009a04 	addi	fp,sp,616
    c2b4:	e13ffe15 	stw	r4,-8(fp)
    c2b8:	e17fff15 	stw	r5,-4(fp)
    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
    c2bc:	e0bffe17 	ldw	r2,-8(fp)
    c2c0:	10800017 	ldw	r2,0(r2)
    c2c4:	e0bf6615 	stw	r2,-616(fp)
    c2c8:	e0bffe17 	ldw	r2,-8(fp)
    c2cc:	10800117 	ldw	r2,4(r2)
    c2d0:	e0bf6715 	stw	r2,-612(fp)
    c2d4:	e0bffe17 	ldw	r2,-8(fp)
    c2d8:	10800217 	ldw	r2,8(r2)
    c2dc:	e0bf6815 	stw	r2,-608(fp)
    c2e0:	e0bffe17 	ldw	r2,-8(fp)
    c2e4:	10800317 	ldw	r2,12(r2)
    c2e8:	e0bf6915 	stw	r2,-604(fp)
    c2ec:	e0bffe17 	ldw	r2,-8(fp)
    c2f0:	10800417 	ldw	r2,16(r2)
    c2f4:	e0bf6a15 	stw	r2,-600(fp)
    c2f8:	e0bffe17 	ldw	r2,-8(fp)
    c2fc:	10800517 	ldw	r2,20(r2)
    c300:	e0bf6b15 	stw	r2,-596(fp)
    c304:	e0bffe17 	ldw	r2,-8(fp)
    c308:	10800617 	ldw	r2,24(r2)
    c30c:	e0bf6c15 	stw	r2,-592(fp)
    c310:	e0bffe17 	ldw	r2,-8(fp)
    c314:	10800717 	ldw	r2,28(r2)
    c318:	e0bf6d15 	stw	r2,-588(fp)
    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;

    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = BE32(chunk[0]));
    c31c:	e0ff6a17 	ldw	r3,-600(fp)
    c320:	00800184 	movi	r2,6
    c324:	1886583a 	ror	r3,r3,r2
    c328:	e13f6a17 	ldw	r4,-600(fp)
    c32c:	008002c4 	movi	r2,11
    c330:	2084583a 	ror	r2,r4,r2
    c334:	1886f03a 	xor	r3,r3,r2
    c338:	e0bf6a17 	ldw	r2,-600(fp)
    c33c:	100411fa 	roli	r2,r2,7
    c340:	1886f03a 	xor	r3,r3,r2
    c344:	e0bf6d17 	ldw	r2,-588(fp)
    c348:	1887883a 	add	r3,r3,r2
    c34c:	e13f6b17 	ldw	r4,-596(fp)
    c350:	e0bf6c17 	ldw	r2,-592(fp)
    c354:	2088f03a 	xor	r4,r4,r2
    c358:	e0bf6a17 	ldw	r2,-600(fp)
    c35c:	2088703a 	and	r4,r4,r2
    c360:	e0bf6c17 	ldw	r2,-592(fp)
    c364:	2084f03a 	xor	r2,r4,r2
    c368:	1887883a 	add	r3,r3,r2
    c36c:	e0bfff17 	ldw	r2,-4(fp)
    c370:	10800017 	ldw	r2,0(r2)
    c374:	1008963a 	slli	r4,r2,24
    c378:	e0bfff17 	ldw	r2,-4(fp)
    c37c:	10800017 	ldw	r2,0(r2)
    c380:	10bfc00c 	andi	r2,r2,65280
    c384:	1004923a 	slli	r2,r2,8
    c388:	2088b03a 	or	r4,r4,r2
    c38c:	e0bfff17 	ldw	r2,-4(fp)
    c390:	10800017 	ldw	r2,0(r2)
    c394:	10803fec 	andhi	r2,r2,255
    c398:	1004d23a 	srli	r2,r2,8
    c39c:	2088b03a 	or	r4,r4,r2
    c3a0:	e0bfff17 	ldw	r2,-4(fp)
    c3a4:	10800017 	ldw	r2,0(r2)
    c3a8:	1004d63a 	srli	r2,r2,24
    c3ac:	2084b03a 	or	r2,r4,r2
    c3b0:	e0bf6e15 	stw	r2,-584(fp)
    c3b4:	e0bf6e17 	ldw	r2,-584(fp)
    c3b8:	1887883a 	add	r3,r3,r2
    c3bc:	0090a2b4 	movhi	r2,17034
    c3c0:	108be604 	addi	r2,r2,12184
    c3c4:	1885883a 	add	r2,r3,r2
    c3c8:	e0bf6f15 	stw	r2,-580(fp)
    c3cc:	e0ff6617 	ldw	r3,-616(fp)
    c3d0:	00800084 	movi	r2,2
    c3d4:	1886583a 	ror	r3,r3,r2
    c3d8:	e13f6617 	ldw	r4,-616(fp)
    c3dc:	00800344 	movi	r2,13
    c3e0:	2084583a 	ror	r2,r4,r2
    c3e4:	1886f03a 	xor	r3,r3,r2
    c3e8:	e0bf6617 	ldw	r2,-616(fp)
    c3ec:	100412ba 	roli	r2,r2,10
    c3f0:	1886f03a 	xor	r3,r3,r2
    c3f4:	e13f6617 	ldw	r4,-616(fp)
    c3f8:	e0bf6717 	ldw	r2,-612(fp)
    c3fc:	2088703a 	and	r4,r4,r2
    c400:	e17f6617 	ldw	r5,-616(fp)
    c404:	e0bf6717 	ldw	r2,-612(fp)
    c408:	288ab03a 	or	r5,r5,r2
    c40c:	e0bf6817 	ldw	r2,-608(fp)
    c410:	2884703a 	and	r2,r5,r2
    c414:	2084b03a 	or	r2,r4,r2
    c418:	1885883a 	add	r2,r3,r2
    c41c:	e0bf7015 	stw	r2,-576(fp)
    c420:	e0ff6917 	ldw	r3,-604(fp)
    c424:	e0bf6f17 	ldw	r2,-580(fp)
    c428:	1885883a 	add	r2,r3,r2
    c42c:	e0bf6915 	stw	r2,-604(fp)
    c430:	e0ff6f17 	ldw	r3,-580(fp)
    c434:	e0bf7017 	ldw	r2,-576(fp)
    c438:	1885883a 	add	r2,r3,r2
    c43c:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = BE32(chunk[1]));
    c440:	e0ff6917 	ldw	r3,-604(fp)
    c444:	00800184 	movi	r2,6
    c448:	1886583a 	ror	r3,r3,r2
    c44c:	e13f6917 	ldw	r4,-604(fp)
    c450:	008002c4 	movi	r2,11
    c454:	2084583a 	ror	r2,r4,r2
    c458:	1886f03a 	xor	r3,r3,r2
    c45c:	e0bf6917 	ldw	r2,-604(fp)
    c460:	100411fa 	roli	r2,r2,7
    c464:	1886f03a 	xor	r3,r3,r2
    c468:	e0bf6c17 	ldw	r2,-592(fp)
    c46c:	1887883a 	add	r3,r3,r2
    c470:	e13f6a17 	ldw	r4,-600(fp)
    c474:	e0bf6b17 	ldw	r2,-596(fp)
    c478:	2088f03a 	xor	r4,r4,r2
    c47c:	e0bf6917 	ldw	r2,-604(fp)
    c480:	2088703a 	and	r4,r4,r2
    c484:	e0bf6b17 	ldw	r2,-596(fp)
    c488:	2084f03a 	xor	r2,r4,r2
    c48c:	1887883a 	add	r3,r3,r2
    c490:	e0bfff17 	ldw	r2,-4(fp)
    c494:	10800104 	addi	r2,r2,4
    c498:	10800017 	ldw	r2,0(r2)
    c49c:	1008963a 	slli	r4,r2,24
    c4a0:	e0bfff17 	ldw	r2,-4(fp)
    c4a4:	10800104 	addi	r2,r2,4
    c4a8:	10800017 	ldw	r2,0(r2)
    c4ac:	10bfc00c 	andi	r2,r2,65280
    c4b0:	1004923a 	slli	r2,r2,8
    c4b4:	2088b03a 	or	r4,r4,r2
    c4b8:	e0bfff17 	ldw	r2,-4(fp)
    c4bc:	10800104 	addi	r2,r2,4
    c4c0:	10800017 	ldw	r2,0(r2)
    c4c4:	10803fec 	andhi	r2,r2,255
    c4c8:	1004d23a 	srli	r2,r2,8
    c4cc:	2088b03a 	or	r4,r4,r2
    c4d0:	e0bfff17 	ldw	r2,-4(fp)
    c4d4:	10800104 	addi	r2,r2,4
    c4d8:	10800017 	ldw	r2,0(r2)
    c4dc:	1004d63a 	srli	r2,r2,24
    c4e0:	2084b03a 	or	r2,r4,r2
    c4e4:	e0bf7115 	stw	r2,-572(fp)
    c4e8:	e0bf7117 	ldw	r2,-572(fp)
    c4ec:	1887883a 	add	r3,r3,r2
    c4f0:	009c4df4 	movhi	r2,28983
    c4f4:	10912444 	addi	r2,r2,17553
    c4f8:	1885883a 	add	r2,r3,r2
    c4fc:	e0bf7215 	stw	r2,-568(fp)
    c500:	e0ff6d17 	ldw	r3,-588(fp)
    c504:	00800084 	movi	r2,2
    c508:	1886583a 	ror	r3,r3,r2
    c50c:	e13f6d17 	ldw	r4,-588(fp)
    c510:	00800344 	movi	r2,13
    c514:	2084583a 	ror	r2,r4,r2
    c518:	1886f03a 	xor	r3,r3,r2
    c51c:	e0bf6d17 	ldw	r2,-588(fp)
    c520:	100412ba 	roli	r2,r2,10
    c524:	1886f03a 	xor	r3,r3,r2
    c528:	e13f6d17 	ldw	r4,-588(fp)
    c52c:	e0bf6617 	ldw	r2,-616(fp)
    c530:	2088703a 	and	r4,r4,r2
    c534:	e17f6d17 	ldw	r5,-588(fp)
    c538:	e0bf6617 	ldw	r2,-616(fp)
    c53c:	288ab03a 	or	r5,r5,r2
    c540:	e0bf6717 	ldw	r2,-612(fp)
    c544:	2884703a 	and	r2,r5,r2
    c548:	2084b03a 	or	r2,r4,r2
    c54c:	1885883a 	add	r2,r3,r2
    c550:	e0bf7315 	stw	r2,-564(fp)
    c554:	e0ff6817 	ldw	r3,-608(fp)
    c558:	e0bf7217 	ldw	r2,-568(fp)
    c55c:	1885883a 	add	r2,r3,r2
    c560:	e0bf6815 	stw	r2,-608(fp)
    c564:	e0ff7217 	ldw	r3,-568(fp)
    c568:	e0bf7317 	ldw	r2,-564(fp)
    c56c:	1885883a 	add	r2,r3,r2
    c570:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = BE32(chunk[2]));
    c574:	e0ff6817 	ldw	r3,-608(fp)
    c578:	00800184 	movi	r2,6
    c57c:	1886583a 	ror	r3,r3,r2
    c580:	e13f6817 	ldw	r4,-608(fp)
    c584:	008002c4 	movi	r2,11
    c588:	2084583a 	ror	r2,r4,r2
    c58c:	1886f03a 	xor	r3,r3,r2
    c590:	e0bf6817 	ldw	r2,-608(fp)
    c594:	100411fa 	roli	r2,r2,7
    c598:	1886f03a 	xor	r3,r3,r2
    c59c:	e0bf6b17 	ldw	r2,-596(fp)
    c5a0:	1887883a 	add	r3,r3,r2
    c5a4:	e13f6917 	ldw	r4,-604(fp)
    c5a8:	e0bf6a17 	ldw	r2,-600(fp)
    c5ac:	2088f03a 	xor	r4,r4,r2
    c5b0:	e0bf6817 	ldw	r2,-608(fp)
    c5b4:	2088703a 	and	r4,r4,r2
    c5b8:	e0bf6a17 	ldw	r2,-600(fp)
    c5bc:	2084f03a 	xor	r2,r4,r2
    c5c0:	1887883a 	add	r3,r3,r2
    c5c4:	e0bfff17 	ldw	r2,-4(fp)
    c5c8:	10800204 	addi	r2,r2,8
    c5cc:	10800017 	ldw	r2,0(r2)
    c5d0:	1008963a 	slli	r4,r2,24
    c5d4:	e0bfff17 	ldw	r2,-4(fp)
    c5d8:	10800204 	addi	r2,r2,8
    c5dc:	10800017 	ldw	r2,0(r2)
    c5e0:	10bfc00c 	andi	r2,r2,65280
    c5e4:	1004923a 	slli	r2,r2,8
    c5e8:	2088b03a 	or	r4,r4,r2
    c5ec:	e0bfff17 	ldw	r2,-4(fp)
    c5f0:	10800204 	addi	r2,r2,8
    c5f4:	10800017 	ldw	r2,0(r2)
    c5f8:	10803fec 	andhi	r2,r2,255
    c5fc:	1004d23a 	srli	r2,r2,8
    c600:	2088b03a 	or	r4,r4,r2
    c604:	e0bfff17 	ldw	r2,-4(fp)
    c608:	10800204 	addi	r2,r2,8
    c60c:	10800017 	ldw	r2,0(r2)
    c610:	1004d63a 	srli	r2,r2,24
    c614:	2084b03a 	or	r2,r4,r2
    c618:	e0bf7415 	stw	r2,-560(fp)
    c61c:	e0bf7417 	ldw	r2,-560(fp)
    c620:	1887883a 	add	r3,r3,r2
    c624:	00ad7074 	movhi	r2,46529
    c628:	10bef3c4 	addi	r2,r2,-1073
    c62c:	1885883a 	add	r2,r3,r2
    c630:	e0bf7515 	stw	r2,-556(fp)
    c634:	e0ff6c17 	ldw	r3,-592(fp)
    c638:	00800084 	movi	r2,2
    c63c:	1886583a 	ror	r3,r3,r2
    c640:	e13f6c17 	ldw	r4,-592(fp)
    c644:	00800344 	movi	r2,13
    c648:	2084583a 	ror	r2,r4,r2
    c64c:	1886f03a 	xor	r3,r3,r2
    c650:	e0bf6c17 	ldw	r2,-592(fp)
    c654:	100412ba 	roli	r2,r2,10
    c658:	1886f03a 	xor	r3,r3,r2
    c65c:	e13f6c17 	ldw	r4,-592(fp)
    c660:	e0bf6d17 	ldw	r2,-588(fp)
    c664:	2088703a 	and	r4,r4,r2
    c668:	e17f6c17 	ldw	r5,-592(fp)
    c66c:	e0bf6d17 	ldw	r2,-588(fp)
    c670:	288ab03a 	or	r5,r5,r2
    c674:	e0bf6617 	ldw	r2,-616(fp)
    c678:	2884703a 	and	r2,r5,r2
    c67c:	2084b03a 	or	r2,r4,r2
    c680:	1885883a 	add	r2,r3,r2
    c684:	e0bf7615 	stw	r2,-552(fp)
    c688:	e0ff6717 	ldw	r3,-612(fp)
    c68c:	e0bf7517 	ldw	r2,-556(fp)
    c690:	1885883a 	add	r2,r3,r2
    c694:	e0bf6715 	stw	r2,-612(fp)
    c698:	e0ff7517 	ldw	r3,-556(fp)
    c69c:	e0bf7617 	ldw	r2,-552(fp)
    c6a0:	1885883a 	add	r2,r3,r2
    c6a4:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = BE32(chunk[3]));
    c6a8:	e0ff6717 	ldw	r3,-612(fp)
    c6ac:	00800184 	movi	r2,6
    c6b0:	1886583a 	ror	r3,r3,r2
    c6b4:	e13f6717 	ldw	r4,-612(fp)
    c6b8:	008002c4 	movi	r2,11
    c6bc:	2084583a 	ror	r2,r4,r2
    c6c0:	1886f03a 	xor	r3,r3,r2
    c6c4:	e0bf6717 	ldw	r2,-612(fp)
    c6c8:	100411fa 	roli	r2,r2,7
    c6cc:	1886f03a 	xor	r3,r3,r2
    c6d0:	e0bf6a17 	ldw	r2,-600(fp)
    c6d4:	1887883a 	add	r3,r3,r2
    c6d8:	e13f6817 	ldw	r4,-608(fp)
    c6dc:	e0bf6917 	ldw	r2,-604(fp)
    c6e0:	2088f03a 	xor	r4,r4,r2
    c6e4:	e0bf6717 	ldw	r2,-612(fp)
    c6e8:	2088703a 	and	r4,r4,r2
    c6ec:	e0bf6917 	ldw	r2,-604(fp)
    c6f0:	2084f03a 	xor	r2,r4,r2
    c6f4:	1887883a 	add	r3,r3,r2
    c6f8:	e0bfff17 	ldw	r2,-4(fp)
    c6fc:	10800304 	addi	r2,r2,12
    c700:	10800017 	ldw	r2,0(r2)
    c704:	1008963a 	slli	r4,r2,24
    c708:	e0bfff17 	ldw	r2,-4(fp)
    c70c:	10800304 	addi	r2,r2,12
    c710:	10800017 	ldw	r2,0(r2)
    c714:	10bfc00c 	andi	r2,r2,65280
    c718:	1004923a 	slli	r2,r2,8
    c71c:	2088b03a 	or	r4,r4,r2
    c720:	e0bfff17 	ldw	r2,-4(fp)
    c724:	10800304 	addi	r2,r2,12
    c728:	10800017 	ldw	r2,0(r2)
    c72c:	10803fec 	andhi	r2,r2,255
    c730:	1004d23a 	srli	r2,r2,8
    c734:	2088b03a 	or	r4,r4,r2
    c738:	e0bfff17 	ldw	r2,-4(fp)
    c73c:	10800304 	addi	r2,r2,12
    c740:	10800017 	ldw	r2,0(r2)
    c744:	1004d63a 	srli	r2,r2,24
    c748:	2084b03a 	or	r2,r4,r2
    c74c:	e0bf7715 	stw	r2,-548(fp)
    c750:	e0bf7717 	ldw	r2,-548(fp)
    c754:	1887883a 	add	r3,r3,r2
    c758:	00ba6db4 	movhi	r2,59830
    c75c:	10b6e944 	addi	r2,r2,-9307
    c760:	1885883a 	add	r2,r3,r2
    c764:	e0bf7815 	stw	r2,-544(fp)
    c768:	e0ff6b17 	ldw	r3,-596(fp)
    c76c:	00800084 	movi	r2,2
    c770:	1886583a 	ror	r3,r3,r2
    c774:	e13f6b17 	ldw	r4,-596(fp)
    c778:	00800344 	movi	r2,13
    c77c:	2084583a 	ror	r2,r4,r2
    c780:	1886f03a 	xor	r3,r3,r2
    c784:	e0bf6b17 	ldw	r2,-596(fp)
    c788:	100412ba 	roli	r2,r2,10
    c78c:	1886f03a 	xor	r3,r3,r2
    c790:	e13f6b17 	ldw	r4,-596(fp)
    c794:	e0bf6c17 	ldw	r2,-592(fp)
    c798:	2088703a 	and	r4,r4,r2
    c79c:	e17f6b17 	ldw	r5,-596(fp)
    c7a0:	e0bf6c17 	ldw	r2,-592(fp)
    c7a4:	288ab03a 	or	r5,r5,r2
    c7a8:	e0bf6d17 	ldw	r2,-588(fp)
    c7ac:	2884703a 	and	r2,r5,r2
    c7b0:	2084b03a 	or	r2,r4,r2
    c7b4:	1885883a 	add	r2,r3,r2
    c7b8:	e0bf7915 	stw	r2,-540(fp)
    c7bc:	e0ff6617 	ldw	r3,-616(fp)
    c7c0:	e0bf7817 	ldw	r2,-544(fp)
    c7c4:	1885883a 	add	r2,r3,r2
    c7c8:	e0bf6615 	stw	r2,-616(fp)
    c7cc:	e0ff7817 	ldw	r3,-544(fp)
    c7d0:	e0bf7917 	ldw	r2,-540(fp)
    c7d4:	1885883a 	add	r2,r3,r2
    c7d8:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = BE32(chunk[4]));
    c7dc:	e0ff6617 	ldw	r3,-616(fp)
    c7e0:	00800184 	movi	r2,6
    c7e4:	1886583a 	ror	r3,r3,r2
    c7e8:	e13f6617 	ldw	r4,-616(fp)
    c7ec:	008002c4 	movi	r2,11
    c7f0:	2084583a 	ror	r2,r4,r2
    c7f4:	1886f03a 	xor	r3,r3,r2
    c7f8:	e0bf6617 	ldw	r2,-616(fp)
    c7fc:	100411fa 	roli	r2,r2,7
    c800:	1886f03a 	xor	r3,r3,r2
    c804:	e0bf6917 	ldw	r2,-604(fp)
    c808:	1887883a 	add	r3,r3,r2
    c80c:	e13f6717 	ldw	r4,-612(fp)
    c810:	e0bf6817 	ldw	r2,-608(fp)
    c814:	2088f03a 	xor	r4,r4,r2
    c818:	e0bf6617 	ldw	r2,-616(fp)
    c81c:	2088703a 	and	r4,r4,r2
    c820:	e0bf6817 	ldw	r2,-608(fp)
    c824:	2084f03a 	xor	r2,r4,r2
    c828:	1887883a 	add	r3,r3,r2
    c82c:	e0bfff17 	ldw	r2,-4(fp)
    c830:	10800404 	addi	r2,r2,16
    c834:	10800017 	ldw	r2,0(r2)
    c838:	1008963a 	slli	r4,r2,24
    c83c:	e0bfff17 	ldw	r2,-4(fp)
    c840:	10800404 	addi	r2,r2,16
    c844:	10800017 	ldw	r2,0(r2)
    c848:	10bfc00c 	andi	r2,r2,65280
    c84c:	1004923a 	slli	r2,r2,8
    c850:	2088b03a 	or	r4,r4,r2
    c854:	e0bfff17 	ldw	r2,-4(fp)
    c858:	10800404 	addi	r2,r2,16
    c85c:	10800017 	ldw	r2,0(r2)
    c860:	10803fec 	andhi	r2,r2,255
    c864:	1004d23a 	srli	r2,r2,8
    c868:	2088b03a 	or	r4,r4,r2
    c86c:	e0bfff17 	ldw	r2,-4(fp)
    c870:	10800404 	addi	r2,r2,16
    c874:	10800017 	ldw	r2,0(r2)
    c878:	1004d63a 	srli	r2,r2,24
    c87c:	2084b03a 	or	r2,r4,r2
    c880:	e0bf7a15 	stw	r2,-536(fp)
    c884:	e0bf7a17 	ldw	r2,-536(fp)
    c888:	1887883a 	add	r3,r3,r2
    c88c:	008e55f4 	movhi	r2,14679
    c890:	10b096c4 	addi	r2,r2,-15781
    c894:	1885883a 	add	r2,r3,r2
    c898:	e0bf7b15 	stw	r2,-532(fp)
    c89c:	e0ff6a17 	ldw	r3,-600(fp)
    c8a0:	00800084 	movi	r2,2
    c8a4:	1886583a 	ror	r3,r3,r2
    c8a8:	e13f6a17 	ldw	r4,-600(fp)
    c8ac:	00800344 	movi	r2,13
    c8b0:	2084583a 	ror	r2,r4,r2
    c8b4:	1886f03a 	xor	r3,r3,r2
    c8b8:	e0bf6a17 	ldw	r2,-600(fp)
    c8bc:	100412ba 	roli	r2,r2,10
    c8c0:	1886f03a 	xor	r3,r3,r2
    c8c4:	e13f6a17 	ldw	r4,-600(fp)
    c8c8:	e0bf6b17 	ldw	r2,-596(fp)
    c8cc:	2088703a 	and	r4,r4,r2
    c8d0:	e17f6a17 	ldw	r5,-600(fp)
    c8d4:	e0bf6b17 	ldw	r2,-596(fp)
    c8d8:	288ab03a 	or	r5,r5,r2
    c8dc:	e0bf6c17 	ldw	r2,-592(fp)
    c8e0:	2884703a 	and	r2,r5,r2
    c8e4:	2084b03a 	or	r2,r4,r2
    c8e8:	1885883a 	add	r2,r3,r2
    c8ec:	e0bf7c15 	stw	r2,-528(fp)
    c8f0:	e0ff6d17 	ldw	r3,-588(fp)
    c8f4:	e0bf7b17 	ldw	r2,-532(fp)
    c8f8:	1885883a 	add	r2,r3,r2
    c8fc:	e0bf6d15 	stw	r2,-588(fp)
    c900:	e0ff7b17 	ldw	r3,-532(fp)
    c904:	e0bf7c17 	ldw	r2,-528(fp)
    c908:	1885883a 	add	r2,r3,r2
    c90c:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = BE32(chunk[5]));
    c910:	e0ff6d17 	ldw	r3,-588(fp)
    c914:	00800184 	movi	r2,6
    c918:	1886583a 	ror	r3,r3,r2
    c91c:	e13f6d17 	ldw	r4,-588(fp)
    c920:	008002c4 	movi	r2,11
    c924:	2084583a 	ror	r2,r4,r2
    c928:	1886f03a 	xor	r3,r3,r2
    c92c:	e0bf6d17 	ldw	r2,-588(fp)
    c930:	100411fa 	roli	r2,r2,7
    c934:	1886f03a 	xor	r3,r3,r2
    c938:	e0bf6817 	ldw	r2,-608(fp)
    c93c:	1887883a 	add	r3,r3,r2
    c940:	e13f6617 	ldw	r4,-616(fp)
    c944:	e0bf6717 	ldw	r2,-612(fp)
    c948:	2088f03a 	xor	r4,r4,r2
    c94c:	e0bf6d17 	ldw	r2,-588(fp)
    c950:	2088703a 	and	r4,r4,r2
    c954:	e0bf6717 	ldw	r2,-612(fp)
    c958:	2084f03a 	xor	r2,r4,r2
    c95c:	1887883a 	add	r3,r3,r2
    c960:	e0bfff17 	ldw	r2,-4(fp)
    c964:	10800504 	addi	r2,r2,20
    c968:	10800017 	ldw	r2,0(r2)
    c96c:	1008963a 	slli	r4,r2,24
    c970:	e0bfff17 	ldw	r2,-4(fp)
    c974:	10800504 	addi	r2,r2,20
    c978:	10800017 	ldw	r2,0(r2)
    c97c:	10bfc00c 	andi	r2,r2,65280
    c980:	1004923a 	slli	r2,r2,8
    c984:	2088b03a 	or	r4,r4,r2
    c988:	e0bfff17 	ldw	r2,-4(fp)
    c98c:	10800504 	addi	r2,r2,20
    c990:	10800017 	ldw	r2,0(r2)
    c994:	10803fec 	andhi	r2,r2,255
    c998:	1004d23a 	srli	r2,r2,8
    c99c:	2088b03a 	or	r4,r4,r2
    c9a0:	e0bfff17 	ldw	r2,-4(fp)
    c9a4:	10800504 	addi	r2,r2,20
    c9a8:	10800017 	ldw	r2,0(r2)
    c9ac:	1004d63a 	srli	r2,r2,24
    c9b0:	2084b03a 	or	r2,r4,r2
    c9b4:	e0bf7d15 	stw	r2,-524(fp)
    c9b8:	e0bf7d17 	ldw	r2,-524(fp)
    c9bc:	1887883a 	add	r3,r3,r2
    c9c0:	00967c74 	movhi	r2,23025
    c9c4:	10847c44 	addi	r2,r2,4593
    c9c8:	1885883a 	add	r2,r3,r2
    c9cc:	e0bf7e15 	stw	r2,-520(fp)
    c9d0:	e0ff6917 	ldw	r3,-604(fp)
    c9d4:	00800084 	movi	r2,2
    c9d8:	1886583a 	ror	r3,r3,r2
    c9dc:	e13f6917 	ldw	r4,-604(fp)
    c9e0:	00800344 	movi	r2,13
    c9e4:	2084583a 	ror	r2,r4,r2
    c9e8:	1886f03a 	xor	r3,r3,r2
    c9ec:	e0bf6917 	ldw	r2,-604(fp)
    c9f0:	100412ba 	roli	r2,r2,10
    c9f4:	1886f03a 	xor	r3,r3,r2
    c9f8:	e13f6917 	ldw	r4,-604(fp)
    c9fc:	e0bf6a17 	ldw	r2,-600(fp)
    ca00:	2088703a 	and	r4,r4,r2
    ca04:	e17f6917 	ldw	r5,-604(fp)
    ca08:	e0bf6a17 	ldw	r2,-600(fp)
    ca0c:	288ab03a 	or	r5,r5,r2
    ca10:	e0bf6b17 	ldw	r2,-596(fp)
    ca14:	2884703a 	and	r2,r5,r2
    ca18:	2084b03a 	or	r2,r4,r2
    ca1c:	1885883a 	add	r2,r3,r2
    ca20:	e0bf7f15 	stw	r2,-516(fp)
    ca24:	e0ff6c17 	ldw	r3,-592(fp)
    ca28:	e0bf7e17 	ldw	r2,-520(fp)
    ca2c:	1885883a 	add	r2,r3,r2
    ca30:	e0bf6c15 	stw	r2,-592(fp)
    ca34:	e0ff7e17 	ldw	r3,-520(fp)
    ca38:	e0bf7f17 	ldw	r2,-516(fp)
    ca3c:	1885883a 	add	r2,r3,r2
    ca40:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = BE32(chunk[6]));
    ca44:	e0ff6c17 	ldw	r3,-592(fp)
    ca48:	00800184 	movi	r2,6
    ca4c:	1886583a 	ror	r3,r3,r2
    ca50:	e13f6c17 	ldw	r4,-592(fp)
    ca54:	008002c4 	movi	r2,11
    ca58:	2084583a 	ror	r2,r4,r2
    ca5c:	1886f03a 	xor	r3,r3,r2
    ca60:	e0bf6c17 	ldw	r2,-592(fp)
    ca64:	100411fa 	roli	r2,r2,7
    ca68:	1886f03a 	xor	r3,r3,r2
    ca6c:	e0bf6717 	ldw	r2,-612(fp)
    ca70:	1887883a 	add	r3,r3,r2
    ca74:	e13f6d17 	ldw	r4,-588(fp)
    ca78:	e0bf6617 	ldw	r2,-616(fp)
    ca7c:	2088f03a 	xor	r4,r4,r2
    ca80:	e0bf6c17 	ldw	r2,-592(fp)
    ca84:	2088703a 	and	r4,r4,r2
    ca88:	e0bf6617 	ldw	r2,-616(fp)
    ca8c:	2084f03a 	xor	r2,r4,r2
    ca90:	1887883a 	add	r3,r3,r2
    ca94:	e0bfff17 	ldw	r2,-4(fp)
    ca98:	10800604 	addi	r2,r2,24
    ca9c:	10800017 	ldw	r2,0(r2)
    caa0:	1008963a 	slli	r4,r2,24
    caa4:	e0bfff17 	ldw	r2,-4(fp)
    caa8:	10800604 	addi	r2,r2,24
    caac:	10800017 	ldw	r2,0(r2)
    cab0:	10bfc00c 	andi	r2,r2,65280
    cab4:	1004923a 	slli	r2,r2,8
    cab8:	2088b03a 	or	r4,r4,r2
    cabc:	e0bfff17 	ldw	r2,-4(fp)
    cac0:	10800604 	addi	r2,r2,24
    cac4:	10800017 	ldw	r2,0(r2)
    cac8:	10803fec 	andhi	r2,r2,255
    cacc:	1004d23a 	srli	r2,r2,8
    cad0:	2088b03a 	or	r4,r4,r2
    cad4:	e0bfff17 	ldw	r2,-4(fp)
    cad8:	10800604 	addi	r2,r2,24
    cadc:	10800017 	ldw	r2,0(r2)
    cae0:	1004d63a 	srli	r2,r2,24
    cae4:	2084b03a 	or	r2,r4,r2
    cae8:	e0bf8015 	stw	r2,-512(fp)
    caec:	e0bf8017 	ldw	r2,-512(fp)
    caf0:	1887883a 	add	r3,r3,r2
    caf4:	00a49034 	movhi	r2,37440
    caf8:	10a0a904 	addi	r2,r2,-32092
    cafc:	1885883a 	add	r2,r3,r2
    cb00:	e0bf8115 	stw	r2,-508(fp)
    cb04:	e0ff6817 	ldw	r3,-608(fp)
    cb08:	00800084 	movi	r2,2
    cb0c:	1886583a 	ror	r3,r3,r2
    cb10:	e13f6817 	ldw	r4,-608(fp)
    cb14:	00800344 	movi	r2,13
    cb18:	2084583a 	ror	r2,r4,r2
    cb1c:	1886f03a 	xor	r3,r3,r2
    cb20:	e0bf6817 	ldw	r2,-608(fp)
    cb24:	100412ba 	roli	r2,r2,10
    cb28:	1886f03a 	xor	r3,r3,r2
    cb2c:	e13f6817 	ldw	r4,-608(fp)
    cb30:	e0bf6917 	ldw	r2,-604(fp)
    cb34:	2088703a 	and	r4,r4,r2
    cb38:	e17f6817 	ldw	r5,-608(fp)
    cb3c:	e0bf6917 	ldw	r2,-604(fp)
    cb40:	288ab03a 	or	r5,r5,r2
    cb44:	e0bf6a17 	ldw	r2,-600(fp)
    cb48:	2884703a 	and	r2,r5,r2
    cb4c:	2084b03a 	or	r2,r4,r2
    cb50:	1885883a 	add	r2,r3,r2
    cb54:	e0bf8215 	stw	r2,-504(fp)
    cb58:	e0ff6b17 	ldw	r3,-596(fp)
    cb5c:	e0bf8117 	ldw	r2,-508(fp)
    cb60:	1885883a 	add	r2,r3,r2
    cb64:	e0bf6b15 	stw	r2,-596(fp)
    cb68:	e0ff8117 	ldw	r3,-508(fp)
    cb6c:	e0bf8217 	ldw	r2,-504(fp)
    cb70:	1885883a 	add	r2,r3,r2
    cb74:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = BE32(chunk[7]));
    cb78:	e0ff6b17 	ldw	r3,-596(fp)
    cb7c:	00800184 	movi	r2,6
    cb80:	1886583a 	ror	r3,r3,r2
    cb84:	e13f6b17 	ldw	r4,-596(fp)
    cb88:	008002c4 	movi	r2,11
    cb8c:	2084583a 	ror	r2,r4,r2
    cb90:	1886f03a 	xor	r3,r3,r2
    cb94:	e0bf6b17 	ldw	r2,-596(fp)
    cb98:	100411fa 	roli	r2,r2,7
    cb9c:	1886f03a 	xor	r3,r3,r2
    cba0:	e0bf6617 	ldw	r2,-616(fp)
    cba4:	1887883a 	add	r3,r3,r2
    cba8:	e13f6c17 	ldw	r4,-592(fp)
    cbac:	e0bf6d17 	ldw	r2,-588(fp)
    cbb0:	2088f03a 	xor	r4,r4,r2
    cbb4:	e0bf6b17 	ldw	r2,-596(fp)
    cbb8:	2088703a 	and	r4,r4,r2
    cbbc:	e0bf6d17 	ldw	r2,-588(fp)
    cbc0:	2084f03a 	xor	r2,r4,r2
    cbc4:	1887883a 	add	r3,r3,r2
    cbc8:	e0bfff17 	ldw	r2,-4(fp)
    cbcc:	10800704 	addi	r2,r2,28
    cbd0:	10800017 	ldw	r2,0(r2)
    cbd4:	1008963a 	slli	r4,r2,24
    cbd8:	e0bfff17 	ldw	r2,-4(fp)
    cbdc:	10800704 	addi	r2,r2,28
    cbe0:	10800017 	ldw	r2,0(r2)
    cbe4:	10bfc00c 	andi	r2,r2,65280
    cbe8:	1004923a 	slli	r2,r2,8
    cbec:	2088b03a 	or	r4,r4,r2
    cbf0:	e0bfff17 	ldw	r2,-4(fp)
    cbf4:	10800704 	addi	r2,r2,28
    cbf8:	10800017 	ldw	r2,0(r2)
    cbfc:	10803fec 	andhi	r2,r2,255
    cc00:	1004d23a 	srli	r2,r2,8
    cc04:	2088b03a 	or	r4,r4,r2
    cc08:	e0bfff17 	ldw	r2,-4(fp)
    cc0c:	10800704 	addi	r2,r2,28
    cc10:	10800017 	ldw	r2,0(r2)
    cc14:	1004d63a 	srli	r2,r2,24
    cc18:	2084b03a 	or	r2,r4,r2
    cc1c:	e0bf8315 	stw	r2,-500(fp)
    cc20:	e0bf8317 	ldw	r2,-500(fp)
    cc24:	1887883a 	add	r3,r3,r2
    cc28:	00aac734 	movhi	r2,43804
    cc2c:	1097b544 	addi	r2,r2,24277
    cc30:	1885883a 	add	r2,r3,r2
    cc34:	e0bf8415 	stw	r2,-496(fp)
    cc38:	e0ff6717 	ldw	r3,-612(fp)
    cc3c:	00800084 	movi	r2,2
    cc40:	1886583a 	ror	r3,r3,r2
    cc44:	e13f6717 	ldw	r4,-612(fp)
    cc48:	00800344 	movi	r2,13
    cc4c:	2084583a 	ror	r2,r4,r2
    cc50:	1886f03a 	xor	r3,r3,r2
    cc54:	e0bf6717 	ldw	r2,-612(fp)
    cc58:	100412ba 	roli	r2,r2,10
    cc5c:	1886f03a 	xor	r3,r3,r2
    cc60:	e13f6717 	ldw	r4,-612(fp)
    cc64:	e0bf6817 	ldw	r2,-608(fp)
    cc68:	2088703a 	and	r4,r4,r2
    cc6c:	e17f6717 	ldw	r5,-612(fp)
    cc70:	e0bf6817 	ldw	r2,-608(fp)
    cc74:	288ab03a 	or	r5,r5,r2
    cc78:	e0bf6917 	ldw	r2,-604(fp)
    cc7c:	2884703a 	and	r2,r5,r2
    cc80:	2084b03a 	or	r2,r4,r2
    cc84:	1885883a 	add	r2,r3,r2
    cc88:	e0bf8515 	stw	r2,-492(fp)
    cc8c:	e0ff6a17 	ldw	r3,-600(fp)
    cc90:	e0bf8417 	ldw	r2,-496(fp)
    cc94:	1885883a 	add	r2,r3,r2
    cc98:	e0bf6a15 	stw	r2,-600(fp)
    cc9c:	e0ff8417 	ldw	r3,-496(fp)
    cca0:	e0bf8517 	ldw	r2,-492(fp)
    cca4:	1885883a 	add	r2,r3,r2
    cca8:	e0bf6615 	stw	r2,-616(fp)
    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = BE32(chunk[8]));
    ccac:	e0ff6a17 	ldw	r3,-600(fp)
    ccb0:	00800184 	movi	r2,6
    ccb4:	1886583a 	ror	r3,r3,r2
    ccb8:	e13f6a17 	ldw	r4,-600(fp)
    ccbc:	008002c4 	movi	r2,11
    ccc0:	2084583a 	ror	r2,r4,r2
    ccc4:	1886f03a 	xor	r3,r3,r2
    ccc8:	e0bf6a17 	ldw	r2,-600(fp)
    cccc:	100411fa 	roli	r2,r2,7
    ccd0:	1886f03a 	xor	r3,r3,r2
    ccd4:	e0bf6d17 	ldw	r2,-588(fp)
    ccd8:	1887883a 	add	r3,r3,r2
    ccdc:	e13f6b17 	ldw	r4,-596(fp)
    cce0:	e0bf6c17 	ldw	r2,-592(fp)
    cce4:	2088f03a 	xor	r4,r4,r2
    cce8:	e0bf6a17 	ldw	r2,-600(fp)
    ccec:	2088703a 	and	r4,r4,r2
    ccf0:	e0bf6c17 	ldw	r2,-592(fp)
    ccf4:	2084f03a 	xor	r2,r4,r2
    ccf8:	1887883a 	add	r3,r3,r2
    ccfc:	e0bfff17 	ldw	r2,-4(fp)
    cd00:	10800804 	addi	r2,r2,32
    cd04:	10800017 	ldw	r2,0(r2)
    cd08:	1008963a 	slli	r4,r2,24
    cd0c:	e0bfff17 	ldw	r2,-4(fp)
    cd10:	10800804 	addi	r2,r2,32
    cd14:	10800017 	ldw	r2,0(r2)
    cd18:	10bfc00c 	andi	r2,r2,65280
    cd1c:	1004923a 	slli	r2,r2,8
    cd20:	2088b03a 	or	r4,r4,r2
    cd24:	e0bfff17 	ldw	r2,-4(fp)
    cd28:	10800804 	addi	r2,r2,32
    cd2c:	10800017 	ldw	r2,0(r2)
    cd30:	10803fec 	andhi	r2,r2,255
    cd34:	1004d23a 	srli	r2,r2,8
    cd38:	2088b03a 	or	r4,r4,r2
    cd3c:	e0bfff17 	ldw	r2,-4(fp)
    cd40:	10800804 	addi	r2,r2,32
    cd44:	10800017 	ldw	r2,0(r2)
    cd48:	1004d63a 	srli	r2,r2,24
    cd4c:	2084b03a 	or	r2,r4,r2
    cd50:	e0bf8615 	stw	r2,-488(fp)
    cd54:	e0bf8617 	ldw	r2,-488(fp)
    cd58:	1887883a 	add	r3,r3,r2
    cd5c:	00b60234 	movhi	r2,55304
    cd60:	10aaa604 	addi	r2,r2,-21864
    cd64:	1885883a 	add	r2,r3,r2
    cd68:	e0bf8715 	stw	r2,-484(fp)
    cd6c:	e0ff6617 	ldw	r3,-616(fp)
    cd70:	00800084 	movi	r2,2
    cd74:	1886583a 	ror	r3,r3,r2
    cd78:	e13f6617 	ldw	r4,-616(fp)
    cd7c:	00800344 	movi	r2,13
    cd80:	2084583a 	ror	r2,r4,r2
    cd84:	1886f03a 	xor	r3,r3,r2
    cd88:	e0bf6617 	ldw	r2,-616(fp)
    cd8c:	100412ba 	roli	r2,r2,10
    cd90:	1886f03a 	xor	r3,r3,r2
    cd94:	e13f6617 	ldw	r4,-616(fp)
    cd98:	e0bf6717 	ldw	r2,-612(fp)
    cd9c:	2088703a 	and	r4,r4,r2
    cda0:	e17f6617 	ldw	r5,-616(fp)
    cda4:	e0bf6717 	ldw	r2,-612(fp)
    cda8:	288ab03a 	or	r5,r5,r2
    cdac:	e0bf6817 	ldw	r2,-608(fp)
    cdb0:	2884703a 	and	r2,r5,r2
    cdb4:	2084b03a 	or	r2,r4,r2
    cdb8:	1885883a 	add	r2,r3,r2
    cdbc:	e0bf8815 	stw	r2,-480(fp)
    cdc0:	e0ff6917 	ldw	r3,-604(fp)
    cdc4:	e0bf8717 	ldw	r2,-484(fp)
    cdc8:	1885883a 	add	r2,r3,r2
    cdcc:	e0bf6915 	stw	r2,-604(fp)
    cdd0:	e0ff8717 	ldw	r3,-484(fp)
    cdd4:	e0bf8817 	ldw	r2,-480(fp)
    cdd8:	1885883a 	add	r2,r3,r2
    cddc:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = BE32(chunk[9]));
    cde0:	e0ff6917 	ldw	r3,-604(fp)
    cde4:	00800184 	movi	r2,6
    cde8:	1886583a 	ror	r3,r3,r2
    cdec:	e13f6917 	ldw	r4,-604(fp)
    cdf0:	008002c4 	movi	r2,11
    cdf4:	2084583a 	ror	r2,r4,r2
    cdf8:	1886f03a 	xor	r3,r3,r2
    cdfc:	e0bf6917 	ldw	r2,-604(fp)
    ce00:	100411fa 	roli	r2,r2,7
    ce04:	1886f03a 	xor	r3,r3,r2
    ce08:	e0bf6c17 	ldw	r2,-592(fp)
    ce0c:	1887883a 	add	r3,r3,r2
    ce10:	e13f6a17 	ldw	r4,-600(fp)
    ce14:	e0bf6b17 	ldw	r2,-596(fp)
    ce18:	2088f03a 	xor	r4,r4,r2
    ce1c:	e0bf6917 	ldw	r2,-604(fp)
    ce20:	2088703a 	and	r4,r4,r2
    ce24:	e0bf6b17 	ldw	r2,-596(fp)
    ce28:	2084f03a 	xor	r2,r4,r2
    ce2c:	1887883a 	add	r3,r3,r2
    ce30:	e0bfff17 	ldw	r2,-4(fp)
    ce34:	10800904 	addi	r2,r2,36
    ce38:	10800017 	ldw	r2,0(r2)
    ce3c:	1008963a 	slli	r4,r2,24
    ce40:	e0bfff17 	ldw	r2,-4(fp)
    ce44:	10800904 	addi	r2,r2,36
    ce48:	10800017 	ldw	r2,0(r2)
    ce4c:	10bfc00c 	andi	r2,r2,65280
    ce50:	1004923a 	slli	r2,r2,8
    ce54:	2088b03a 	or	r4,r4,r2
    ce58:	e0bfff17 	ldw	r2,-4(fp)
    ce5c:	10800904 	addi	r2,r2,36
    ce60:	10800017 	ldw	r2,0(r2)
    ce64:	10803fec 	andhi	r2,r2,255
    ce68:	1004d23a 	srli	r2,r2,8
    ce6c:	2088b03a 	or	r4,r4,r2
    ce70:	e0bfff17 	ldw	r2,-4(fp)
    ce74:	10800904 	addi	r2,r2,36
    ce78:	10800017 	ldw	r2,0(r2)
    ce7c:	1004d63a 	srli	r2,r2,24
    ce80:	2084b03a 	or	r2,r4,r2
    ce84:	e0bf8915 	stw	r2,-476(fp)
    ce88:	e0bf8917 	ldw	r2,-476(fp)
    ce8c:	1887883a 	add	r3,r3,r2
    ce90:	0084a0f4 	movhi	r2,4739
    ce94:	1096c044 	addi	r2,r2,23297
    ce98:	1885883a 	add	r2,r3,r2
    ce9c:	e0bf8a15 	stw	r2,-472(fp)
    cea0:	e0ff6d17 	ldw	r3,-588(fp)
    cea4:	00800084 	movi	r2,2
    cea8:	1886583a 	ror	r3,r3,r2
    ceac:	e13f6d17 	ldw	r4,-588(fp)
    ceb0:	00800344 	movi	r2,13
    ceb4:	2084583a 	ror	r2,r4,r2
    ceb8:	1886f03a 	xor	r3,r3,r2
    cebc:	e0bf6d17 	ldw	r2,-588(fp)
    cec0:	100412ba 	roli	r2,r2,10
    cec4:	1886f03a 	xor	r3,r3,r2
    cec8:	e13f6d17 	ldw	r4,-588(fp)
    cecc:	e0bf6617 	ldw	r2,-616(fp)
    ced0:	2088703a 	and	r4,r4,r2
    ced4:	e17f6d17 	ldw	r5,-588(fp)
    ced8:	e0bf6617 	ldw	r2,-616(fp)
    cedc:	288ab03a 	or	r5,r5,r2
    cee0:	e0bf6717 	ldw	r2,-612(fp)
    cee4:	2884703a 	and	r2,r5,r2
    cee8:	2084b03a 	or	r2,r4,r2
    ceec:	1885883a 	add	r2,r3,r2
    cef0:	e0bf8b15 	stw	r2,-468(fp)
    cef4:	e0ff6817 	ldw	r3,-608(fp)
    cef8:	e0bf8a17 	ldw	r2,-472(fp)
    cefc:	1885883a 	add	r2,r3,r2
    cf00:	e0bf6815 	stw	r2,-608(fp)
    cf04:	e0ff8a17 	ldw	r3,-472(fp)
    cf08:	e0bf8b17 	ldw	r2,-468(fp)
    cf0c:	1885883a 	add	r2,r3,r2
    cf10:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = BE32(chunk[10]));
    cf14:	e0ff6817 	ldw	r3,-608(fp)
    cf18:	00800184 	movi	r2,6
    cf1c:	1886583a 	ror	r3,r3,r2
    cf20:	e13f6817 	ldw	r4,-608(fp)
    cf24:	008002c4 	movi	r2,11
    cf28:	2084583a 	ror	r2,r4,r2
    cf2c:	1886f03a 	xor	r3,r3,r2
    cf30:	e0bf6817 	ldw	r2,-608(fp)
    cf34:	100411fa 	roli	r2,r2,7
    cf38:	1886f03a 	xor	r3,r3,r2
    cf3c:	e0bf6b17 	ldw	r2,-596(fp)
    cf40:	1887883a 	add	r3,r3,r2
    cf44:	e13f6917 	ldw	r4,-604(fp)
    cf48:	e0bf6a17 	ldw	r2,-600(fp)
    cf4c:	2088f03a 	xor	r4,r4,r2
    cf50:	e0bf6817 	ldw	r2,-608(fp)
    cf54:	2088703a 	and	r4,r4,r2
    cf58:	e0bf6a17 	ldw	r2,-600(fp)
    cf5c:	2084f03a 	xor	r2,r4,r2
    cf60:	1887883a 	add	r3,r3,r2
    cf64:	e0bfff17 	ldw	r2,-4(fp)
    cf68:	10800a04 	addi	r2,r2,40
    cf6c:	10800017 	ldw	r2,0(r2)
    cf70:	1008963a 	slli	r4,r2,24
    cf74:	e0bfff17 	ldw	r2,-4(fp)
    cf78:	10800a04 	addi	r2,r2,40
    cf7c:	10800017 	ldw	r2,0(r2)
    cf80:	10bfc00c 	andi	r2,r2,65280
    cf84:	1004923a 	slli	r2,r2,8
    cf88:	2088b03a 	or	r4,r4,r2
    cf8c:	e0bfff17 	ldw	r2,-4(fp)
    cf90:	10800a04 	addi	r2,r2,40
    cf94:	10800017 	ldw	r2,0(r2)
    cf98:	10803fec 	andhi	r2,r2,255
    cf9c:	1004d23a 	srli	r2,r2,8
    cfa0:	2088b03a 	or	r4,r4,r2
    cfa4:	e0bfff17 	ldw	r2,-4(fp)
    cfa8:	10800a04 	addi	r2,r2,40
    cfac:	10800017 	ldw	r2,0(r2)
    cfb0:	1004d63a 	srli	r2,r2,24
    cfb4:	2084b03a 	or	r2,r4,r2
    cfb8:	e0bf8c15 	stw	r2,-464(fp)
    cfbc:	e0bf8c17 	ldw	r2,-464(fp)
    cfc0:	1887883a 	add	r3,r3,r2
    cfc4:	00890cb4 	movhi	r2,9266
    cfc8:	10a16f84 	addi	r2,r2,-31298
    cfcc:	1885883a 	add	r2,r3,r2
    cfd0:	e0bf8d15 	stw	r2,-460(fp)
    cfd4:	e0ff6c17 	ldw	r3,-592(fp)
    cfd8:	00800084 	movi	r2,2
    cfdc:	1886583a 	ror	r3,r3,r2
    cfe0:	e13f6c17 	ldw	r4,-592(fp)
    cfe4:	00800344 	movi	r2,13
    cfe8:	2084583a 	ror	r2,r4,r2
    cfec:	1886f03a 	xor	r3,r3,r2
    cff0:	e0bf6c17 	ldw	r2,-592(fp)
    cff4:	100412ba 	roli	r2,r2,10
    cff8:	1886f03a 	xor	r3,r3,r2
    cffc:	e13f6c17 	ldw	r4,-592(fp)
    d000:	e0bf6d17 	ldw	r2,-588(fp)
    d004:	2088703a 	and	r4,r4,r2
    d008:	e17f6c17 	ldw	r5,-592(fp)
    d00c:	e0bf6d17 	ldw	r2,-588(fp)
    d010:	288ab03a 	or	r5,r5,r2
    d014:	e0bf6617 	ldw	r2,-616(fp)
    d018:	2884703a 	and	r2,r5,r2
    d01c:	2084b03a 	or	r2,r4,r2
    d020:	1885883a 	add	r2,r3,r2
    d024:	e0bf8e15 	stw	r2,-456(fp)
    d028:	e0ff6717 	ldw	r3,-612(fp)
    d02c:	e0bf8d17 	ldw	r2,-460(fp)
    d030:	1885883a 	add	r2,r3,r2
    d034:	e0bf6715 	stw	r2,-612(fp)
    d038:	e0ff8d17 	ldw	r3,-460(fp)
    d03c:	e0bf8e17 	ldw	r2,-456(fp)
    d040:	1885883a 	add	r2,r3,r2
    d044:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = BE32(chunk[11]));
    d048:	e0ff6717 	ldw	r3,-612(fp)
    d04c:	00800184 	movi	r2,6
    d050:	1886583a 	ror	r3,r3,r2
    d054:	e13f6717 	ldw	r4,-612(fp)
    d058:	008002c4 	movi	r2,11
    d05c:	2084583a 	ror	r2,r4,r2
    d060:	1886f03a 	xor	r3,r3,r2
    d064:	e0bf6717 	ldw	r2,-612(fp)
    d068:	100411fa 	roli	r2,r2,7
    d06c:	1886f03a 	xor	r3,r3,r2
    d070:	e0bf6a17 	ldw	r2,-600(fp)
    d074:	1887883a 	add	r3,r3,r2
    d078:	e13f6817 	ldw	r4,-608(fp)
    d07c:	e0bf6917 	ldw	r2,-604(fp)
    d080:	2088f03a 	xor	r4,r4,r2
    d084:	e0bf6717 	ldw	r2,-612(fp)
    d088:	2088703a 	and	r4,r4,r2
    d08c:	e0bf6917 	ldw	r2,-604(fp)
    d090:	2084f03a 	xor	r2,r4,r2
    d094:	1887883a 	add	r3,r3,r2
    d098:	e0bfff17 	ldw	r2,-4(fp)
    d09c:	10800b04 	addi	r2,r2,44
    d0a0:	10800017 	ldw	r2,0(r2)
    d0a4:	1008963a 	slli	r4,r2,24
    d0a8:	e0bfff17 	ldw	r2,-4(fp)
    d0ac:	10800b04 	addi	r2,r2,44
    d0b0:	10800017 	ldw	r2,0(r2)
    d0b4:	10bfc00c 	andi	r2,r2,65280
    d0b8:	1004923a 	slli	r2,r2,8
    d0bc:	2088b03a 	or	r4,r4,r2
    d0c0:	e0bfff17 	ldw	r2,-4(fp)
    d0c4:	10800b04 	addi	r2,r2,44
    d0c8:	10800017 	ldw	r2,0(r2)
    d0cc:	10803fec 	andhi	r2,r2,255
    d0d0:	1004d23a 	srli	r2,r2,8
    d0d4:	2088b03a 	or	r4,r4,r2
    d0d8:	e0bfff17 	ldw	r2,-4(fp)
    d0dc:	10800b04 	addi	r2,r2,44
    d0e0:	10800017 	ldw	r2,0(r2)
    d0e4:	1004d63a 	srli	r2,r2,24
    d0e8:	2084b03a 	or	r2,r4,r2
    d0ec:	e0bf8f15 	stw	r2,-452(fp)
    d0f0:	e0bf8f17 	ldw	r2,-452(fp)
    d0f4:	1887883a 	add	r3,r3,r2
    d0f8:	00954334 	movhi	r2,21772
    d0fc:	109f70c4 	addi	r2,r2,32195
    d100:	1885883a 	add	r2,r3,r2
    d104:	e0bf9015 	stw	r2,-448(fp)
    d108:	e0ff6b17 	ldw	r3,-596(fp)
    d10c:	00800084 	movi	r2,2
    d110:	1886583a 	ror	r3,r3,r2
    d114:	e13f6b17 	ldw	r4,-596(fp)
    d118:	00800344 	movi	r2,13
    d11c:	2084583a 	ror	r2,r4,r2
    d120:	1886f03a 	xor	r3,r3,r2
    d124:	e0bf6b17 	ldw	r2,-596(fp)
    d128:	100412ba 	roli	r2,r2,10
    d12c:	1886f03a 	xor	r3,r3,r2
    d130:	e13f6b17 	ldw	r4,-596(fp)
    d134:	e0bf6c17 	ldw	r2,-592(fp)
    d138:	2088703a 	and	r4,r4,r2
    d13c:	e17f6b17 	ldw	r5,-596(fp)
    d140:	e0bf6c17 	ldw	r2,-592(fp)
    d144:	288ab03a 	or	r5,r5,r2
    d148:	e0bf6d17 	ldw	r2,-588(fp)
    d14c:	2884703a 	and	r2,r5,r2
    d150:	2084b03a 	or	r2,r4,r2
    d154:	1885883a 	add	r2,r3,r2
    d158:	e0bf9115 	stw	r2,-444(fp)
    d15c:	e0ff6617 	ldw	r3,-616(fp)
    d160:	e0bf9017 	ldw	r2,-448(fp)
    d164:	1885883a 	add	r2,r3,r2
    d168:	e0bf6615 	stw	r2,-616(fp)
    d16c:	e0ff9017 	ldw	r3,-448(fp)
    d170:	e0bf9117 	ldw	r2,-444(fp)
    d174:	1885883a 	add	r2,r3,r2
    d178:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = BE32(chunk[12]));
    d17c:	e0ff6617 	ldw	r3,-616(fp)
    d180:	00800184 	movi	r2,6
    d184:	1886583a 	ror	r3,r3,r2
    d188:	e13f6617 	ldw	r4,-616(fp)
    d18c:	008002c4 	movi	r2,11
    d190:	2084583a 	ror	r2,r4,r2
    d194:	1886f03a 	xor	r3,r3,r2
    d198:	e0bf6617 	ldw	r2,-616(fp)
    d19c:	100411fa 	roli	r2,r2,7
    d1a0:	1886f03a 	xor	r3,r3,r2
    d1a4:	e0bf6917 	ldw	r2,-604(fp)
    d1a8:	1887883a 	add	r3,r3,r2
    d1ac:	e13f6717 	ldw	r4,-612(fp)
    d1b0:	e0bf6817 	ldw	r2,-608(fp)
    d1b4:	2088f03a 	xor	r4,r4,r2
    d1b8:	e0bf6617 	ldw	r2,-616(fp)
    d1bc:	2088703a 	and	r4,r4,r2
    d1c0:	e0bf6817 	ldw	r2,-608(fp)
    d1c4:	2084f03a 	xor	r2,r4,r2
    d1c8:	1887883a 	add	r3,r3,r2
    d1cc:	e0bfff17 	ldw	r2,-4(fp)
    d1d0:	10800c04 	addi	r2,r2,48
    d1d4:	10800017 	ldw	r2,0(r2)
    d1d8:	1008963a 	slli	r4,r2,24
    d1dc:	e0bfff17 	ldw	r2,-4(fp)
    d1e0:	10800c04 	addi	r2,r2,48
    d1e4:	10800017 	ldw	r2,0(r2)
    d1e8:	10bfc00c 	andi	r2,r2,65280
    d1ec:	1004923a 	slli	r2,r2,8
    d1f0:	2088b03a 	or	r4,r4,r2
    d1f4:	e0bfff17 	ldw	r2,-4(fp)
    d1f8:	10800c04 	addi	r2,r2,48
    d1fc:	10800017 	ldw	r2,0(r2)
    d200:	10803fec 	andhi	r2,r2,255
    d204:	1004d23a 	srli	r2,r2,8
    d208:	2088b03a 	or	r4,r4,r2
    d20c:	e0bfff17 	ldw	r2,-4(fp)
    d210:	10800c04 	addi	r2,r2,48
    d214:	10800017 	ldw	r2,0(r2)
    d218:	1004d63a 	srli	r2,r2,24
    d21c:	2084b03a 	or	r2,r4,r2
    d220:	e0bf9215 	stw	r2,-440(fp)
    d224:	e0bf9217 	ldw	r2,-440(fp)
    d228:	1887883a 	add	r3,r3,r2
    d22c:	009cafb4 	movhi	r2,29374
    d230:	10975d04 	addi	r2,r2,23924
    d234:	1885883a 	add	r2,r3,r2
    d238:	e0bf9315 	stw	r2,-436(fp)
    d23c:	e0ff6a17 	ldw	r3,-600(fp)
    d240:	00800084 	movi	r2,2
    d244:	1886583a 	ror	r3,r3,r2
    d248:	e13f6a17 	ldw	r4,-600(fp)
    d24c:	00800344 	movi	r2,13
    d250:	2084583a 	ror	r2,r4,r2
    d254:	1886f03a 	xor	r3,r3,r2
    d258:	e0bf6a17 	ldw	r2,-600(fp)
    d25c:	100412ba 	roli	r2,r2,10
    d260:	1886f03a 	xor	r3,r3,r2
    d264:	e13f6a17 	ldw	r4,-600(fp)
    d268:	e0bf6b17 	ldw	r2,-596(fp)
    d26c:	2088703a 	and	r4,r4,r2
    d270:	e17f6a17 	ldw	r5,-600(fp)
    d274:	e0bf6b17 	ldw	r2,-596(fp)
    d278:	288ab03a 	or	r5,r5,r2
    d27c:	e0bf6c17 	ldw	r2,-592(fp)
    d280:	2884703a 	and	r2,r5,r2
    d284:	2084b03a 	or	r2,r4,r2
    d288:	1885883a 	add	r2,r3,r2
    d28c:	e0bf9415 	stw	r2,-432(fp)
    d290:	e0ff6d17 	ldw	r3,-588(fp)
    d294:	e0bf9317 	ldw	r2,-436(fp)
    d298:	1885883a 	add	r2,r3,r2
    d29c:	e0bf6d15 	stw	r2,-588(fp)
    d2a0:	e0ff9317 	ldw	r3,-436(fp)
    d2a4:	e0bf9417 	ldw	r2,-432(fp)
    d2a8:	1885883a 	add	r2,r3,r2
    d2ac:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = BE32(chunk[13]));
    d2b0:	e0ff6d17 	ldw	r3,-588(fp)
    d2b4:	00800184 	movi	r2,6
    d2b8:	1886583a 	ror	r3,r3,r2
    d2bc:	e13f6d17 	ldw	r4,-588(fp)
    d2c0:	008002c4 	movi	r2,11
    d2c4:	2084583a 	ror	r2,r4,r2
    d2c8:	1886f03a 	xor	r3,r3,r2
    d2cc:	e0bf6d17 	ldw	r2,-588(fp)
    d2d0:	100411fa 	roli	r2,r2,7
    d2d4:	1886f03a 	xor	r3,r3,r2
    d2d8:	e0bf6817 	ldw	r2,-608(fp)
    d2dc:	1887883a 	add	r3,r3,r2
    d2e0:	e13f6617 	ldw	r4,-616(fp)
    d2e4:	e0bf6717 	ldw	r2,-612(fp)
    d2e8:	2088f03a 	xor	r4,r4,r2
    d2ec:	e0bf6d17 	ldw	r2,-588(fp)
    d2f0:	2088703a 	and	r4,r4,r2
    d2f4:	e0bf6717 	ldw	r2,-612(fp)
    d2f8:	2084f03a 	xor	r2,r4,r2
    d2fc:	1887883a 	add	r3,r3,r2
    d300:	e0bfff17 	ldw	r2,-4(fp)
    d304:	10800d04 	addi	r2,r2,52
    d308:	10800017 	ldw	r2,0(r2)
    d30c:	1008963a 	slli	r4,r2,24
    d310:	e0bfff17 	ldw	r2,-4(fp)
    d314:	10800d04 	addi	r2,r2,52
    d318:	10800017 	ldw	r2,0(r2)
    d31c:	10bfc00c 	andi	r2,r2,65280
    d320:	1004923a 	slli	r2,r2,8
    d324:	2088b03a 	or	r4,r4,r2
    d328:	e0bfff17 	ldw	r2,-4(fp)
    d32c:	10800d04 	addi	r2,r2,52
    d330:	10800017 	ldw	r2,0(r2)
    d334:	10803fec 	andhi	r2,r2,255
    d338:	1004d23a 	srli	r2,r2,8
    d33c:	2088b03a 	or	r4,r4,r2
    d340:	e0bfff17 	ldw	r2,-4(fp)
    d344:	10800d04 	addi	r2,r2,52
    d348:	10800017 	ldw	r2,0(r2)
    d34c:	1004d63a 	srli	r2,r2,24
    d350:	2084b03a 	or	r2,r4,r2
    d354:	e0bf9515 	stw	r2,-428(fp)
    d358:	e0bf9517 	ldw	r2,-428(fp)
    d35c:	1887883a 	add	r3,r3,r2
    d360:	00a037f4 	movhi	r2,32991
    d364:	10ac7f84 	addi	r2,r2,-19970
    d368:	1885883a 	add	r2,r3,r2
    d36c:	e0bf9615 	stw	r2,-424(fp)
    d370:	e0ff6917 	ldw	r3,-604(fp)
    d374:	00800084 	movi	r2,2
    d378:	1886583a 	ror	r3,r3,r2
    d37c:	e13f6917 	ldw	r4,-604(fp)
    d380:	00800344 	movi	r2,13
    d384:	2084583a 	ror	r2,r4,r2
    d388:	1886f03a 	xor	r3,r3,r2
    d38c:	e0bf6917 	ldw	r2,-604(fp)
    d390:	100412ba 	roli	r2,r2,10
    d394:	1886f03a 	xor	r3,r3,r2
    d398:	e13f6917 	ldw	r4,-604(fp)
    d39c:	e0bf6a17 	ldw	r2,-600(fp)
    d3a0:	2088703a 	and	r4,r4,r2
    d3a4:	e17f6917 	ldw	r5,-604(fp)
    d3a8:	e0bf6a17 	ldw	r2,-600(fp)
    d3ac:	288ab03a 	or	r5,r5,r2
    d3b0:	e0bf6b17 	ldw	r2,-596(fp)
    d3b4:	2884703a 	and	r2,r5,r2
    d3b8:	2084b03a 	or	r2,r4,r2
    d3bc:	1885883a 	add	r2,r3,r2
    d3c0:	e0bf9715 	stw	r2,-420(fp)
    d3c4:	e0ff6c17 	ldw	r3,-592(fp)
    d3c8:	e0bf9617 	ldw	r2,-424(fp)
    d3cc:	1885883a 	add	r2,r3,r2
    d3d0:	e0bf6c15 	stw	r2,-592(fp)
    d3d4:	e0ff9617 	ldw	r3,-424(fp)
    d3d8:	e0bf9717 	ldw	r2,-420(fp)
    d3dc:	1885883a 	add	r2,r3,r2
    d3e0:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = BE32(chunk[14]));
    d3e4:	e0ff6c17 	ldw	r3,-592(fp)
    d3e8:	00800184 	movi	r2,6
    d3ec:	1886583a 	ror	r3,r3,r2
    d3f0:	e13f6c17 	ldw	r4,-592(fp)
    d3f4:	008002c4 	movi	r2,11
    d3f8:	2084583a 	ror	r2,r4,r2
    d3fc:	1886f03a 	xor	r3,r3,r2
    d400:	e0bf6c17 	ldw	r2,-592(fp)
    d404:	100411fa 	roli	r2,r2,7
    d408:	1886f03a 	xor	r3,r3,r2
    d40c:	e0bf6717 	ldw	r2,-612(fp)
    d410:	1887883a 	add	r3,r3,r2
    d414:	e13f6d17 	ldw	r4,-588(fp)
    d418:	e0bf6617 	ldw	r2,-616(fp)
    d41c:	2088f03a 	xor	r4,r4,r2
    d420:	e0bf6c17 	ldw	r2,-592(fp)
    d424:	2088703a 	and	r4,r4,r2
    d428:	e0bf6617 	ldw	r2,-616(fp)
    d42c:	2084f03a 	xor	r2,r4,r2
    d430:	1887883a 	add	r3,r3,r2
    d434:	e0bfff17 	ldw	r2,-4(fp)
    d438:	10800e04 	addi	r2,r2,56
    d43c:	10800017 	ldw	r2,0(r2)
    d440:	1008963a 	slli	r4,r2,24
    d444:	e0bfff17 	ldw	r2,-4(fp)
    d448:	10800e04 	addi	r2,r2,56
    d44c:	10800017 	ldw	r2,0(r2)
    d450:	10bfc00c 	andi	r2,r2,65280
    d454:	1004923a 	slli	r2,r2,8
    d458:	2088b03a 	or	r4,r4,r2
    d45c:	e0bfff17 	ldw	r2,-4(fp)
    d460:	10800e04 	addi	r2,r2,56
    d464:	10800017 	ldw	r2,0(r2)
    d468:	10803fec 	andhi	r2,r2,255
    d46c:	1004d23a 	srli	r2,r2,8
    d470:	2088b03a 	or	r4,r4,r2
    d474:	e0bfff17 	ldw	r2,-4(fp)
    d478:	10800e04 	addi	r2,r2,56
    d47c:	10800017 	ldw	r2,0(r2)
    d480:	1004d63a 	srli	r2,r2,24
    d484:	2084b03a 	or	r2,r4,r2
    d488:	e0bf9815 	stw	r2,-416(fp)
    d48c:	e0bf9817 	ldw	r2,-416(fp)
    d490:	1887883a 	add	r3,r3,r2
    d494:	00a6f734 	movhi	r2,39900
    d498:	1081a9c4 	addi	r2,r2,1703
    d49c:	1885883a 	add	r2,r3,r2
    d4a0:	e0bf9915 	stw	r2,-412(fp)
    d4a4:	e0ff6817 	ldw	r3,-608(fp)
    d4a8:	00800084 	movi	r2,2
    d4ac:	1886583a 	ror	r3,r3,r2
    d4b0:	e13f6817 	ldw	r4,-608(fp)
    d4b4:	00800344 	movi	r2,13
    d4b8:	2084583a 	ror	r2,r4,r2
    d4bc:	1886f03a 	xor	r3,r3,r2
    d4c0:	e0bf6817 	ldw	r2,-608(fp)
    d4c4:	100412ba 	roli	r2,r2,10
    d4c8:	1886f03a 	xor	r3,r3,r2
    d4cc:	e13f6817 	ldw	r4,-608(fp)
    d4d0:	e0bf6917 	ldw	r2,-604(fp)
    d4d4:	2088703a 	and	r4,r4,r2
    d4d8:	e17f6817 	ldw	r5,-608(fp)
    d4dc:	e0bf6917 	ldw	r2,-604(fp)
    d4e0:	288ab03a 	or	r5,r5,r2
    d4e4:	e0bf6a17 	ldw	r2,-600(fp)
    d4e8:	2884703a 	and	r2,r5,r2
    d4ec:	2084b03a 	or	r2,r4,r2
    d4f0:	1885883a 	add	r2,r3,r2
    d4f4:	e0bf9a15 	stw	r2,-408(fp)
    d4f8:	e0ff6b17 	ldw	r3,-596(fp)
    d4fc:	e0bf9917 	ldw	r2,-412(fp)
    d500:	1885883a 	add	r2,r3,r2
    d504:	e0bf6b15 	stw	r2,-596(fp)
    d508:	e0ff9917 	ldw	r3,-412(fp)
    d50c:	e0bf9a17 	ldw	r2,-408(fp)
    d510:	1885883a 	add	r2,r3,r2
    d514:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = BE32(chunk[15]));
    d518:	e0ff6b17 	ldw	r3,-596(fp)
    d51c:	00800184 	movi	r2,6
    d520:	1886583a 	ror	r3,r3,r2
    d524:	e13f6b17 	ldw	r4,-596(fp)
    d528:	008002c4 	movi	r2,11
    d52c:	2084583a 	ror	r2,r4,r2
    d530:	1886f03a 	xor	r3,r3,r2
    d534:	e0bf6b17 	ldw	r2,-596(fp)
    d538:	100411fa 	roli	r2,r2,7
    d53c:	1886f03a 	xor	r3,r3,r2
    d540:	e0bf6617 	ldw	r2,-616(fp)
    d544:	1887883a 	add	r3,r3,r2
    d548:	e13f6c17 	ldw	r4,-592(fp)
    d54c:	e0bf6d17 	ldw	r2,-588(fp)
    d550:	2088f03a 	xor	r4,r4,r2
    d554:	e0bf6b17 	ldw	r2,-596(fp)
    d558:	2088703a 	and	r4,r4,r2
    d55c:	e0bf6d17 	ldw	r2,-588(fp)
    d560:	2084f03a 	xor	r2,r4,r2
    d564:	1887883a 	add	r3,r3,r2
    d568:	e0bfff17 	ldw	r2,-4(fp)
    d56c:	10800f04 	addi	r2,r2,60
    d570:	10800017 	ldw	r2,0(r2)
    d574:	1008963a 	slli	r4,r2,24
    d578:	e0bfff17 	ldw	r2,-4(fp)
    d57c:	10800f04 	addi	r2,r2,60
    d580:	10800017 	ldw	r2,0(r2)
    d584:	10bfc00c 	andi	r2,r2,65280
    d588:	1004923a 	slli	r2,r2,8
    d58c:	2088b03a 	or	r4,r4,r2
    d590:	e0bfff17 	ldw	r2,-4(fp)
    d594:	10800f04 	addi	r2,r2,60
    d598:	10800017 	ldw	r2,0(r2)
    d59c:	10803fec 	andhi	r2,r2,255
    d5a0:	1004d23a 	srli	r2,r2,8
    d5a4:	2088b03a 	or	r4,r4,r2
    d5a8:	e0bfff17 	ldw	r2,-4(fp)
    d5ac:	10800f04 	addi	r2,r2,60
    d5b0:	10800017 	ldw	r2,0(r2)
    d5b4:	1004d63a 	srli	r2,r2,24
    d5b8:	2084b03a 	or	r2,r4,r2
    d5bc:	e0bf9b15 	stw	r2,-404(fp)
    d5c0:	e0bf9b17 	ldw	r2,-404(fp)
    d5c4:	1887883a 	add	r3,r3,r2
    d5c8:	00b06734 	movhi	r2,49564
    d5cc:	10bc5d04 	addi	r2,r2,-3724
    d5d0:	1885883a 	add	r2,r3,r2
    d5d4:	e0bf9c15 	stw	r2,-400(fp)
    d5d8:	e0ff6717 	ldw	r3,-612(fp)
    d5dc:	00800084 	movi	r2,2
    d5e0:	1886583a 	ror	r3,r3,r2
    d5e4:	e13f6717 	ldw	r4,-612(fp)
    d5e8:	00800344 	movi	r2,13
    d5ec:	2084583a 	ror	r2,r4,r2
    d5f0:	1886f03a 	xor	r3,r3,r2
    d5f4:	e0bf6717 	ldw	r2,-612(fp)
    d5f8:	100412ba 	roli	r2,r2,10
    d5fc:	1886f03a 	xor	r3,r3,r2
    d600:	e13f6717 	ldw	r4,-612(fp)
    d604:	e0bf6817 	ldw	r2,-608(fp)
    d608:	2088703a 	and	r4,r4,r2
    d60c:	e17f6717 	ldw	r5,-612(fp)
    d610:	e0bf6817 	ldw	r2,-608(fp)
    d614:	288ab03a 	or	r5,r5,r2
    d618:	e0bf6917 	ldw	r2,-604(fp)
    d61c:	2884703a 	and	r2,r5,r2
    d620:	2084b03a 	or	r2,r4,r2
    d624:	1885883a 	add	r2,r3,r2
    d628:	e0bf9d15 	stw	r2,-396(fp)
    d62c:	e0ff6a17 	ldw	r3,-600(fp)
    d630:	e0bf9c17 	ldw	r2,-400(fp)
    d634:	1885883a 	add	r2,r3,r2
    d638:	e0bf6a15 	stw	r2,-600(fp)
    d63c:	e0ff9c17 	ldw	r3,-400(fp)
    d640:	e0bf9d17 	ldw	r2,-396(fp)
    d644:	1885883a 	add	r2,r3,r2
    d648:	e0bf6615 	stw	r2,-616(fp)

    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));
    d64c:	e0ff6a17 	ldw	r3,-600(fp)
    d650:	00800184 	movi	r2,6
    d654:	1886583a 	ror	r3,r3,r2
    d658:	e13f6a17 	ldw	r4,-600(fp)
    d65c:	008002c4 	movi	r2,11
    d660:	2084583a 	ror	r2,r4,r2
    d664:	1886f03a 	xor	r3,r3,r2
    d668:	e0bf6a17 	ldw	r2,-600(fp)
    d66c:	100411fa 	roli	r2,r2,7
    d670:	1886f03a 	xor	r3,r3,r2
    d674:	e0bf6d17 	ldw	r2,-588(fp)
    d678:	1887883a 	add	r3,r3,r2
    d67c:	e13f6b17 	ldw	r4,-596(fp)
    d680:	e0bf6c17 	ldw	r2,-592(fp)
    d684:	2088f03a 	xor	r4,r4,r2
    d688:	e0bf6a17 	ldw	r2,-600(fp)
    d68c:	2088703a 	and	r4,r4,r2
    d690:	e0bf6c17 	ldw	r2,-592(fp)
    d694:	2084f03a 	xor	r2,r4,r2
    d698:	1887883a 	add	r3,r3,r2
    d69c:	e0bf9817 	ldw	r2,-416(fp)
    d6a0:	100813fa 	roli	r4,r2,15
    d6a4:	e0bf9817 	ldw	r2,-416(fp)
    d6a8:	1004137a 	roli	r2,r2,13
    d6ac:	2088f03a 	xor	r4,r4,r2
    d6b0:	e0bf9817 	ldw	r2,-416(fp)
    d6b4:	1004d2ba 	srli	r2,r2,10
    d6b8:	2088f03a 	xor	r4,r4,r2
    d6bc:	e0bf8917 	ldw	r2,-476(fp)
    d6c0:	2089883a 	add	r4,r4,r2
    d6c4:	e17f7117 	ldw	r5,-572(fp)
    d6c8:	008001c4 	movi	r2,7
    d6cc:	288a583a 	ror	r5,r5,r2
    d6d0:	e0bf7117 	ldw	r2,-572(fp)
    d6d4:	100413ba 	roli	r2,r2,14
    d6d8:	288af03a 	xor	r5,r5,r2
    d6dc:	e0bf7117 	ldw	r2,-572(fp)
    d6e0:	1004d0fa 	srli	r2,r2,3
    d6e4:	2884f03a 	xor	r2,r5,r2
    d6e8:	2085883a 	add	r2,r4,r2
    d6ec:	e13f6e17 	ldw	r4,-584(fp)
    d6f0:	2085883a 	add	r2,r4,r2
    d6f4:	e0bf6e15 	stw	r2,-584(fp)
    d6f8:	e0bf6e17 	ldw	r2,-584(fp)
    d6fc:	1887883a 	add	r3,r3,r2
    d700:	00b926f4 	movhi	r2,58523
    d704:	109a7044 	addi	r2,r2,27073
    d708:	1885883a 	add	r2,r3,r2
    d70c:	e0bf9e15 	stw	r2,-392(fp)
    d710:	e0ff6617 	ldw	r3,-616(fp)
    d714:	00800084 	movi	r2,2
    d718:	1886583a 	ror	r3,r3,r2
    d71c:	e13f6617 	ldw	r4,-616(fp)
    d720:	00800344 	movi	r2,13
    d724:	2084583a 	ror	r2,r4,r2
    d728:	1886f03a 	xor	r3,r3,r2
    d72c:	e0bf6617 	ldw	r2,-616(fp)
    d730:	100412ba 	roli	r2,r2,10
    d734:	1886f03a 	xor	r3,r3,r2
    d738:	e13f6617 	ldw	r4,-616(fp)
    d73c:	e0bf6717 	ldw	r2,-612(fp)
    d740:	2088703a 	and	r4,r4,r2
    d744:	e17f6617 	ldw	r5,-616(fp)
    d748:	e0bf6717 	ldw	r2,-612(fp)
    d74c:	288ab03a 	or	r5,r5,r2
    d750:	e0bf6817 	ldw	r2,-608(fp)
    d754:	2884703a 	and	r2,r5,r2
    d758:	2084b03a 	or	r2,r4,r2
    d75c:	1885883a 	add	r2,r3,r2
    d760:	e0bf9f15 	stw	r2,-388(fp)
    d764:	e0ff6917 	ldw	r3,-604(fp)
    d768:	e0bf9e17 	ldw	r2,-392(fp)
    d76c:	1885883a 	add	r2,r3,r2
    d770:	e0bf6915 	stw	r2,-604(fp)
    d774:	e0ff9e17 	ldw	r3,-392(fp)
    d778:	e0bf9f17 	ldw	r2,-388(fp)
    d77c:	1885883a 	add	r2,r3,r2
    d780:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));
    d784:	e0ff6917 	ldw	r3,-604(fp)
    d788:	00800184 	movi	r2,6
    d78c:	1886583a 	ror	r3,r3,r2
    d790:	e13f6917 	ldw	r4,-604(fp)
    d794:	008002c4 	movi	r2,11
    d798:	2084583a 	ror	r2,r4,r2
    d79c:	1886f03a 	xor	r3,r3,r2
    d7a0:	e0bf6917 	ldw	r2,-604(fp)
    d7a4:	100411fa 	roli	r2,r2,7
    d7a8:	1886f03a 	xor	r3,r3,r2
    d7ac:	e0bf6c17 	ldw	r2,-592(fp)
    d7b0:	1887883a 	add	r3,r3,r2
    d7b4:	e13f6a17 	ldw	r4,-600(fp)
    d7b8:	e0bf6b17 	ldw	r2,-596(fp)
    d7bc:	2088f03a 	xor	r4,r4,r2
    d7c0:	e0bf6917 	ldw	r2,-604(fp)
    d7c4:	2088703a 	and	r4,r4,r2
    d7c8:	e0bf6b17 	ldw	r2,-596(fp)
    d7cc:	2084f03a 	xor	r2,r4,r2
    d7d0:	1887883a 	add	r3,r3,r2
    d7d4:	e0bf9b17 	ldw	r2,-404(fp)
    d7d8:	100813fa 	roli	r4,r2,15
    d7dc:	e0bf9b17 	ldw	r2,-404(fp)
    d7e0:	1004137a 	roli	r2,r2,13
    d7e4:	2088f03a 	xor	r4,r4,r2
    d7e8:	e0bf9b17 	ldw	r2,-404(fp)
    d7ec:	1004d2ba 	srli	r2,r2,10
    d7f0:	2088f03a 	xor	r4,r4,r2
    d7f4:	e0bf8c17 	ldw	r2,-464(fp)
    d7f8:	2089883a 	add	r4,r4,r2
    d7fc:	e17f7417 	ldw	r5,-560(fp)
    d800:	008001c4 	movi	r2,7
    d804:	288a583a 	ror	r5,r5,r2
    d808:	e0bf7417 	ldw	r2,-560(fp)
    d80c:	100413ba 	roli	r2,r2,14
    d810:	288af03a 	xor	r5,r5,r2
    d814:	e0bf7417 	ldw	r2,-560(fp)
    d818:	1004d0fa 	srli	r2,r2,3
    d81c:	2884f03a 	xor	r2,r5,r2
    d820:	2085883a 	add	r2,r4,r2
    d824:	e13f7117 	ldw	r4,-572(fp)
    d828:	2085883a 	add	r2,r4,r2
    d82c:	e0bf7115 	stw	r2,-572(fp)
    d830:	e0bf7117 	ldw	r2,-572(fp)
    d834:	1887883a 	add	r3,r3,r2
    d838:	00bbefb4 	movhi	r2,61374
    d83c:	1091e184 	addi	r2,r2,18310
    d840:	1885883a 	add	r2,r3,r2
    d844:	e0bfa015 	stw	r2,-384(fp)
    d848:	e0ff6d17 	ldw	r3,-588(fp)
    d84c:	00800084 	movi	r2,2
    d850:	1886583a 	ror	r3,r3,r2
    d854:	e13f6d17 	ldw	r4,-588(fp)
    d858:	00800344 	movi	r2,13
    d85c:	2084583a 	ror	r2,r4,r2
    d860:	1886f03a 	xor	r3,r3,r2
    d864:	e0bf6d17 	ldw	r2,-588(fp)
    d868:	100412ba 	roli	r2,r2,10
    d86c:	1886f03a 	xor	r3,r3,r2
    d870:	e13f6d17 	ldw	r4,-588(fp)
    d874:	e0bf6617 	ldw	r2,-616(fp)
    d878:	2088703a 	and	r4,r4,r2
    d87c:	e17f6d17 	ldw	r5,-588(fp)
    d880:	e0bf6617 	ldw	r2,-616(fp)
    d884:	288ab03a 	or	r5,r5,r2
    d888:	e0bf6717 	ldw	r2,-612(fp)
    d88c:	2884703a 	and	r2,r5,r2
    d890:	2084b03a 	or	r2,r4,r2
    d894:	1885883a 	add	r2,r3,r2
    d898:	e0bfa115 	stw	r2,-380(fp)
    d89c:	e0ff6817 	ldw	r3,-608(fp)
    d8a0:	e0bfa017 	ldw	r2,-384(fp)
    d8a4:	1885883a 	add	r2,r3,r2
    d8a8:	e0bf6815 	stw	r2,-608(fp)
    d8ac:	e0ffa017 	ldw	r3,-384(fp)
    d8b0:	e0bfa117 	ldw	r2,-380(fp)
    d8b4:	1885883a 	add	r2,r3,r2
    d8b8:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));
    d8bc:	e0ff6817 	ldw	r3,-608(fp)
    d8c0:	00800184 	movi	r2,6
    d8c4:	1886583a 	ror	r3,r3,r2
    d8c8:	e13f6817 	ldw	r4,-608(fp)
    d8cc:	008002c4 	movi	r2,11
    d8d0:	2084583a 	ror	r2,r4,r2
    d8d4:	1886f03a 	xor	r3,r3,r2
    d8d8:	e0bf6817 	ldw	r2,-608(fp)
    d8dc:	100411fa 	roli	r2,r2,7
    d8e0:	1886f03a 	xor	r3,r3,r2
    d8e4:	e0bf6b17 	ldw	r2,-596(fp)
    d8e8:	1887883a 	add	r3,r3,r2
    d8ec:	e13f6917 	ldw	r4,-604(fp)
    d8f0:	e0bf6a17 	ldw	r2,-600(fp)
    d8f4:	2088f03a 	xor	r4,r4,r2
    d8f8:	e0bf6817 	ldw	r2,-608(fp)
    d8fc:	2088703a 	and	r4,r4,r2
    d900:	e0bf6a17 	ldw	r2,-600(fp)
    d904:	2084f03a 	xor	r2,r4,r2
    d908:	1887883a 	add	r3,r3,r2
    d90c:	e0bf6e17 	ldw	r2,-584(fp)
    d910:	100813fa 	roli	r4,r2,15
    d914:	e0bf6e17 	ldw	r2,-584(fp)
    d918:	1004137a 	roli	r2,r2,13
    d91c:	2088f03a 	xor	r4,r4,r2
    d920:	e0bf6e17 	ldw	r2,-584(fp)
    d924:	1004d2ba 	srli	r2,r2,10
    d928:	2088f03a 	xor	r4,r4,r2
    d92c:	e0bf8f17 	ldw	r2,-452(fp)
    d930:	2089883a 	add	r4,r4,r2
    d934:	e17f7717 	ldw	r5,-548(fp)
    d938:	008001c4 	movi	r2,7
    d93c:	288a583a 	ror	r5,r5,r2
    d940:	e0bf7717 	ldw	r2,-548(fp)
    d944:	100413ba 	roli	r2,r2,14
    d948:	288af03a 	xor	r5,r5,r2
    d94c:	e0bf7717 	ldw	r2,-548(fp)
    d950:	1004d0fa 	srli	r2,r2,3
    d954:	2884f03a 	xor	r2,r5,r2
    d958:	2085883a 	add	r2,r4,r2
    d95c:	e13f7417 	ldw	r4,-560(fp)
    d960:	2085883a 	add	r2,r4,r2
    d964:	e0bf7415 	stw	r2,-560(fp)
    d968:	e0bf7417 	ldw	r2,-560(fp)
    d96c:	1887883a 	add	r3,r3,r2
    d970:	0083f0b4 	movhi	r2,4034
    d974:	10a77184 	addi	r2,r2,-25146
    d978:	1885883a 	add	r2,r3,r2
    d97c:	e0bfa215 	stw	r2,-376(fp)
    d980:	e0ff6c17 	ldw	r3,-592(fp)
    d984:	00800084 	movi	r2,2
    d988:	1886583a 	ror	r3,r3,r2
    d98c:	e13f6c17 	ldw	r4,-592(fp)
    d990:	00800344 	movi	r2,13
    d994:	2084583a 	ror	r2,r4,r2
    d998:	1886f03a 	xor	r3,r3,r2
    d99c:	e0bf6c17 	ldw	r2,-592(fp)
    d9a0:	100412ba 	roli	r2,r2,10
    d9a4:	1886f03a 	xor	r3,r3,r2
    d9a8:	e13f6c17 	ldw	r4,-592(fp)
    d9ac:	e0bf6d17 	ldw	r2,-588(fp)
    d9b0:	2088703a 	and	r4,r4,r2
    d9b4:	e17f6c17 	ldw	r5,-592(fp)
    d9b8:	e0bf6d17 	ldw	r2,-588(fp)
    d9bc:	288ab03a 	or	r5,r5,r2
    d9c0:	e0bf6617 	ldw	r2,-616(fp)
    d9c4:	2884703a 	and	r2,r5,r2
    d9c8:	2084b03a 	or	r2,r4,r2
    d9cc:	1885883a 	add	r2,r3,r2
    d9d0:	e0bfa315 	stw	r2,-372(fp)
    d9d4:	e0ff6717 	ldw	r3,-612(fp)
    d9d8:	e0bfa217 	ldw	r2,-376(fp)
    d9dc:	1885883a 	add	r2,r3,r2
    d9e0:	e0bf6715 	stw	r2,-612(fp)
    d9e4:	e0ffa217 	ldw	r3,-376(fp)
    d9e8:	e0bfa317 	ldw	r2,-372(fp)
    d9ec:	1885883a 	add	r2,r3,r2
    d9f0:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));
    d9f4:	e0ff6717 	ldw	r3,-612(fp)
    d9f8:	00800184 	movi	r2,6
    d9fc:	1886583a 	ror	r3,r3,r2
    da00:	e13f6717 	ldw	r4,-612(fp)
    da04:	008002c4 	movi	r2,11
    da08:	2084583a 	ror	r2,r4,r2
    da0c:	1886f03a 	xor	r3,r3,r2
    da10:	e0bf6717 	ldw	r2,-612(fp)
    da14:	100411fa 	roli	r2,r2,7
    da18:	1886f03a 	xor	r3,r3,r2
    da1c:	e0bf6a17 	ldw	r2,-600(fp)
    da20:	1887883a 	add	r3,r3,r2
    da24:	e13f6817 	ldw	r4,-608(fp)
    da28:	e0bf6917 	ldw	r2,-604(fp)
    da2c:	2088f03a 	xor	r4,r4,r2
    da30:	e0bf6717 	ldw	r2,-612(fp)
    da34:	2088703a 	and	r4,r4,r2
    da38:	e0bf6917 	ldw	r2,-604(fp)
    da3c:	2084f03a 	xor	r2,r4,r2
    da40:	1887883a 	add	r3,r3,r2
    da44:	e0bf7117 	ldw	r2,-572(fp)
    da48:	100813fa 	roli	r4,r2,15
    da4c:	e0bf7117 	ldw	r2,-572(fp)
    da50:	1004137a 	roli	r2,r2,13
    da54:	2088f03a 	xor	r4,r4,r2
    da58:	e0bf7117 	ldw	r2,-572(fp)
    da5c:	1004d2ba 	srli	r2,r2,10
    da60:	2088f03a 	xor	r4,r4,r2
    da64:	e0bf9217 	ldw	r2,-440(fp)
    da68:	2089883a 	add	r4,r4,r2
    da6c:	e17f7a17 	ldw	r5,-536(fp)
    da70:	008001c4 	movi	r2,7
    da74:	288a583a 	ror	r5,r5,r2
    da78:	e0bf7a17 	ldw	r2,-536(fp)
    da7c:	100413ba 	roli	r2,r2,14
    da80:	288af03a 	xor	r5,r5,r2
    da84:	e0bf7a17 	ldw	r2,-536(fp)
    da88:	1004d0fa 	srli	r2,r2,3
    da8c:	2884f03a 	xor	r2,r5,r2
    da90:	2085883a 	add	r2,r4,r2
    da94:	e13f7717 	ldw	r4,-548(fp)
    da98:	2085883a 	add	r2,r4,r2
    da9c:	e0bf7715 	stw	r2,-548(fp)
    daa0:	e0bf7717 	ldw	r2,-548(fp)
    daa4:	1887883a 	add	r3,r3,r2
    daa8:	00890374 	movhi	r2,9229
    daac:	10a87304 	addi	r2,r2,-24116
    dab0:	1885883a 	add	r2,r3,r2
    dab4:	e0bfa415 	stw	r2,-368(fp)
    dab8:	e0ff6b17 	ldw	r3,-596(fp)
    dabc:	00800084 	movi	r2,2
    dac0:	1886583a 	ror	r3,r3,r2
    dac4:	e13f6b17 	ldw	r4,-596(fp)
    dac8:	00800344 	movi	r2,13
    dacc:	2084583a 	ror	r2,r4,r2
    dad0:	1886f03a 	xor	r3,r3,r2
    dad4:	e0bf6b17 	ldw	r2,-596(fp)
    dad8:	100412ba 	roli	r2,r2,10
    dadc:	1886f03a 	xor	r3,r3,r2
    dae0:	e13f6b17 	ldw	r4,-596(fp)
    dae4:	e0bf6c17 	ldw	r2,-592(fp)
    dae8:	2088703a 	and	r4,r4,r2
    daec:	e17f6b17 	ldw	r5,-596(fp)
    daf0:	e0bf6c17 	ldw	r2,-592(fp)
    daf4:	288ab03a 	or	r5,r5,r2
    daf8:	e0bf6d17 	ldw	r2,-588(fp)
    dafc:	2884703a 	and	r2,r5,r2
    db00:	2084b03a 	or	r2,r4,r2
    db04:	1885883a 	add	r2,r3,r2
    db08:	e0bfa515 	stw	r2,-364(fp)
    db0c:	e0ff6617 	ldw	r3,-616(fp)
    db10:	e0bfa417 	ldw	r2,-368(fp)
    db14:	1885883a 	add	r2,r3,r2
    db18:	e0bf6615 	stw	r2,-616(fp)
    db1c:	e0ffa417 	ldw	r3,-368(fp)
    db20:	e0bfa517 	ldw	r2,-364(fp)
    db24:	1885883a 	add	r2,r3,r2
    db28:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));
    db2c:	e0ff6617 	ldw	r3,-616(fp)
    db30:	00800184 	movi	r2,6
    db34:	1886583a 	ror	r3,r3,r2
    db38:	e13f6617 	ldw	r4,-616(fp)
    db3c:	008002c4 	movi	r2,11
    db40:	2084583a 	ror	r2,r4,r2
    db44:	1886f03a 	xor	r3,r3,r2
    db48:	e0bf6617 	ldw	r2,-616(fp)
    db4c:	100411fa 	roli	r2,r2,7
    db50:	1886f03a 	xor	r3,r3,r2
    db54:	e0bf6917 	ldw	r2,-604(fp)
    db58:	1887883a 	add	r3,r3,r2
    db5c:	e13f6717 	ldw	r4,-612(fp)
    db60:	e0bf6817 	ldw	r2,-608(fp)
    db64:	2088f03a 	xor	r4,r4,r2
    db68:	e0bf6617 	ldw	r2,-616(fp)
    db6c:	2088703a 	and	r4,r4,r2
    db70:	e0bf6817 	ldw	r2,-608(fp)
    db74:	2084f03a 	xor	r2,r4,r2
    db78:	1887883a 	add	r3,r3,r2
    db7c:	e0bf7417 	ldw	r2,-560(fp)
    db80:	100813fa 	roli	r4,r2,15
    db84:	e0bf7417 	ldw	r2,-560(fp)
    db88:	1004137a 	roli	r2,r2,13
    db8c:	2088f03a 	xor	r4,r4,r2
    db90:	e0bf7417 	ldw	r2,-560(fp)
    db94:	1004d2ba 	srli	r2,r2,10
    db98:	2088f03a 	xor	r4,r4,r2
    db9c:	e0bf9517 	ldw	r2,-428(fp)
    dba0:	2089883a 	add	r4,r4,r2
    dba4:	e17f7d17 	ldw	r5,-524(fp)
    dba8:	008001c4 	movi	r2,7
    dbac:	288a583a 	ror	r5,r5,r2
    dbb0:	e0bf7d17 	ldw	r2,-524(fp)
    dbb4:	100413ba 	roli	r2,r2,14
    dbb8:	288af03a 	xor	r5,r5,r2
    dbbc:	e0bf7d17 	ldw	r2,-524(fp)
    dbc0:	1004d0fa 	srli	r2,r2,3
    dbc4:	2884f03a 	xor	r2,r5,r2
    dbc8:	2085883a 	add	r2,r4,r2
    dbcc:	e13f7a17 	ldw	r4,-536(fp)
    dbd0:	2085883a 	add	r2,r4,r2
    dbd4:	e0bf7a15 	stw	r2,-536(fp)
    dbd8:	e0bf7a17 	ldw	r2,-536(fp)
    dbdc:	1887883a 	add	r3,r3,r2
    dbe0:	008b7a74 	movhi	r2,11753
    dbe4:	108b1bc4 	addi	r2,r2,11375
    dbe8:	1885883a 	add	r2,r3,r2
    dbec:	e0bfa615 	stw	r2,-360(fp)
    dbf0:	e0ff6a17 	ldw	r3,-600(fp)
    dbf4:	00800084 	movi	r2,2
    dbf8:	1886583a 	ror	r3,r3,r2
    dbfc:	e13f6a17 	ldw	r4,-600(fp)
    dc00:	00800344 	movi	r2,13
    dc04:	2084583a 	ror	r2,r4,r2
    dc08:	1886f03a 	xor	r3,r3,r2
    dc0c:	e0bf6a17 	ldw	r2,-600(fp)
    dc10:	100412ba 	roli	r2,r2,10
    dc14:	1886f03a 	xor	r3,r3,r2
    dc18:	e13f6a17 	ldw	r4,-600(fp)
    dc1c:	e0bf6b17 	ldw	r2,-596(fp)
    dc20:	2088703a 	and	r4,r4,r2
    dc24:	e17f6a17 	ldw	r5,-600(fp)
    dc28:	e0bf6b17 	ldw	r2,-596(fp)
    dc2c:	288ab03a 	or	r5,r5,r2
    dc30:	e0bf6c17 	ldw	r2,-592(fp)
    dc34:	2884703a 	and	r2,r5,r2
    dc38:	2084b03a 	or	r2,r4,r2
    dc3c:	1885883a 	add	r2,r3,r2
    dc40:	e0bfa715 	stw	r2,-356(fp)
    dc44:	e0ff6d17 	ldw	r3,-588(fp)
    dc48:	e0bfa617 	ldw	r2,-360(fp)
    dc4c:	1885883a 	add	r2,r3,r2
    dc50:	e0bf6d15 	stw	r2,-588(fp)
    dc54:	e0ffa617 	ldw	r3,-360(fp)
    dc58:	e0bfa717 	ldw	r2,-356(fp)
    dc5c:	1885883a 	add	r2,r3,r2
    dc60:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));
    dc64:	e0ff6d17 	ldw	r3,-588(fp)
    dc68:	00800184 	movi	r2,6
    dc6c:	1886583a 	ror	r3,r3,r2
    dc70:	e13f6d17 	ldw	r4,-588(fp)
    dc74:	008002c4 	movi	r2,11
    dc78:	2084583a 	ror	r2,r4,r2
    dc7c:	1886f03a 	xor	r3,r3,r2
    dc80:	e0bf6d17 	ldw	r2,-588(fp)
    dc84:	100411fa 	roli	r2,r2,7
    dc88:	1886f03a 	xor	r3,r3,r2
    dc8c:	e0bf6817 	ldw	r2,-608(fp)
    dc90:	1887883a 	add	r3,r3,r2
    dc94:	e13f6617 	ldw	r4,-616(fp)
    dc98:	e0bf6717 	ldw	r2,-612(fp)
    dc9c:	2088f03a 	xor	r4,r4,r2
    dca0:	e0bf6d17 	ldw	r2,-588(fp)
    dca4:	2088703a 	and	r4,r4,r2
    dca8:	e0bf6717 	ldw	r2,-612(fp)
    dcac:	2084f03a 	xor	r2,r4,r2
    dcb0:	1887883a 	add	r3,r3,r2
    dcb4:	e0bf7717 	ldw	r2,-548(fp)
    dcb8:	100813fa 	roli	r4,r2,15
    dcbc:	e0bf7717 	ldw	r2,-548(fp)
    dcc0:	1004137a 	roli	r2,r2,13
    dcc4:	2088f03a 	xor	r4,r4,r2
    dcc8:	e0bf7717 	ldw	r2,-548(fp)
    dccc:	1004d2ba 	srli	r2,r2,10
    dcd0:	2088f03a 	xor	r4,r4,r2
    dcd4:	e0bf9817 	ldw	r2,-416(fp)
    dcd8:	2089883a 	add	r4,r4,r2
    dcdc:	e17f8017 	ldw	r5,-512(fp)
    dce0:	008001c4 	movi	r2,7
    dce4:	288a583a 	ror	r5,r5,r2
    dce8:	e0bf8017 	ldw	r2,-512(fp)
    dcec:	100413ba 	roli	r2,r2,14
    dcf0:	288af03a 	xor	r5,r5,r2
    dcf4:	e0bf8017 	ldw	r2,-512(fp)
    dcf8:	1004d0fa 	srli	r2,r2,3
    dcfc:	2884f03a 	xor	r2,r5,r2
    dd00:	2085883a 	add	r2,r4,r2
    dd04:	e13f7d17 	ldw	r4,-524(fp)
    dd08:	2085883a 	add	r2,r4,r2
    dd0c:	e0bf7d15 	stw	r2,-524(fp)
    dd10:	e0bf7d17 	ldw	r2,-524(fp)
    dd14:	1887883a 	add	r3,r3,r2
    dd18:	00929d74 	movhi	r2,19061
    dd1c:	10a12a84 	addi	r2,r2,-31574
    dd20:	1885883a 	add	r2,r3,r2
    dd24:	e0bfa815 	stw	r2,-352(fp)
    dd28:	e0ff6917 	ldw	r3,-604(fp)
    dd2c:	00800084 	movi	r2,2
    dd30:	1886583a 	ror	r3,r3,r2
    dd34:	e13f6917 	ldw	r4,-604(fp)
    dd38:	00800344 	movi	r2,13
    dd3c:	2084583a 	ror	r2,r4,r2
    dd40:	1886f03a 	xor	r3,r3,r2
    dd44:	e0bf6917 	ldw	r2,-604(fp)
    dd48:	100412ba 	roli	r2,r2,10
    dd4c:	1886f03a 	xor	r3,r3,r2
    dd50:	e13f6917 	ldw	r4,-604(fp)
    dd54:	e0bf6a17 	ldw	r2,-600(fp)
    dd58:	2088703a 	and	r4,r4,r2
    dd5c:	e17f6917 	ldw	r5,-604(fp)
    dd60:	e0bf6a17 	ldw	r2,-600(fp)
    dd64:	288ab03a 	or	r5,r5,r2
    dd68:	e0bf6b17 	ldw	r2,-596(fp)
    dd6c:	2884703a 	and	r2,r5,r2
    dd70:	2084b03a 	or	r2,r4,r2
    dd74:	1885883a 	add	r2,r3,r2
    dd78:	e0bfa915 	stw	r2,-348(fp)
    dd7c:	e0ff6c17 	ldw	r3,-592(fp)
    dd80:	e0bfa817 	ldw	r2,-352(fp)
    dd84:	1885883a 	add	r2,r3,r2
    dd88:	e0bf6c15 	stw	r2,-592(fp)
    dd8c:	e0ffa817 	ldw	r3,-352(fp)
    dd90:	e0bfa917 	ldw	r2,-348(fp)
    dd94:	1885883a 	add	r2,r3,r2
    dd98:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));
    dd9c:	e0ff6c17 	ldw	r3,-592(fp)
    dda0:	00800184 	movi	r2,6
    dda4:	1886583a 	ror	r3,r3,r2
    dda8:	e13f6c17 	ldw	r4,-592(fp)
    ddac:	008002c4 	movi	r2,11
    ddb0:	2084583a 	ror	r2,r4,r2
    ddb4:	1886f03a 	xor	r3,r3,r2
    ddb8:	e0bf6c17 	ldw	r2,-592(fp)
    ddbc:	100411fa 	roli	r2,r2,7
    ddc0:	1886f03a 	xor	r3,r3,r2
    ddc4:	e0bf6717 	ldw	r2,-612(fp)
    ddc8:	1887883a 	add	r3,r3,r2
    ddcc:	e13f6d17 	ldw	r4,-588(fp)
    ddd0:	e0bf6617 	ldw	r2,-616(fp)
    ddd4:	2088f03a 	xor	r4,r4,r2
    ddd8:	e0bf6c17 	ldw	r2,-592(fp)
    dddc:	2088703a 	and	r4,r4,r2
    dde0:	e0bf6617 	ldw	r2,-616(fp)
    dde4:	2084f03a 	xor	r2,r4,r2
    dde8:	1887883a 	add	r3,r3,r2
    ddec:	e0bf7a17 	ldw	r2,-536(fp)
    ddf0:	100813fa 	roli	r4,r2,15
    ddf4:	e0bf7a17 	ldw	r2,-536(fp)
    ddf8:	1004137a 	roli	r2,r2,13
    ddfc:	2088f03a 	xor	r4,r4,r2
    de00:	e0bf7a17 	ldw	r2,-536(fp)
    de04:	1004d2ba 	srli	r2,r2,10
    de08:	2088f03a 	xor	r4,r4,r2
    de0c:	e0bf9b17 	ldw	r2,-404(fp)
    de10:	2089883a 	add	r4,r4,r2
    de14:	e17f8317 	ldw	r5,-500(fp)
    de18:	008001c4 	movi	r2,7
    de1c:	288a583a 	ror	r5,r5,r2
    de20:	e0bf8317 	ldw	r2,-500(fp)
    de24:	100413ba 	roli	r2,r2,14
    de28:	288af03a 	xor	r5,r5,r2
    de2c:	e0bf8317 	ldw	r2,-500(fp)
    de30:	1004d0fa 	srli	r2,r2,3
    de34:	2884f03a 	xor	r2,r5,r2
    de38:	2085883a 	add	r2,r4,r2
    de3c:	e13f8017 	ldw	r4,-512(fp)
    de40:	2085883a 	add	r2,r4,r2
    de44:	e0bf8015 	stw	r2,-512(fp)
    de48:	e0bf8017 	ldw	r2,-512(fp)
    de4c:	1887883a 	add	r3,r3,r2
    de50:	00972c74 	movhi	r2,23729
    de54:	10aa7704 	addi	r2,r2,-22052
    de58:	1885883a 	add	r2,r3,r2
    de5c:	e0bfaa15 	stw	r2,-344(fp)
    de60:	e0ff6817 	ldw	r3,-608(fp)
    de64:	00800084 	movi	r2,2
    de68:	1886583a 	ror	r3,r3,r2
    de6c:	e13f6817 	ldw	r4,-608(fp)
    de70:	00800344 	movi	r2,13
    de74:	2084583a 	ror	r2,r4,r2
    de78:	1886f03a 	xor	r3,r3,r2
    de7c:	e0bf6817 	ldw	r2,-608(fp)
    de80:	100412ba 	roli	r2,r2,10
    de84:	1886f03a 	xor	r3,r3,r2
    de88:	e13f6817 	ldw	r4,-608(fp)
    de8c:	e0bf6917 	ldw	r2,-604(fp)
    de90:	2088703a 	and	r4,r4,r2
    de94:	e17f6817 	ldw	r5,-608(fp)
    de98:	e0bf6917 	ldw	r2,-604(fp)
    de9c:	288ab03a 	or	r5,r5,r2
    dea0:	e0bf6a17 	ldw	r2,-600(fp)
    dea4:	2884703a 	and	r2,r5,r2
    dea8:	2084b03a 	or	r2,r4,r2
    deac:	1885883a 	add	r2,r3,r2
    deb0:	e0bfab15 	stw	r2,-340(fp)
    deb4:	e0ff6b17 	ldw	r3,-596(fp)
    deb8:	e0bfaa17 	ldw	r2,-344(fp)
    debc:	1885883a 	add	r2,r3,r2
    dec0:	e0bf6b15 	stw	r2,-596(fp)
    dec4:	e0ffaa17 	ldw	r3,-344(fp)
    dec8:	e0bfab17 	ldw	r2,-340(fp)
    decc:	1885883a 	add	r2,r3,r2
    ded0:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));
    ded4:	e0ff6b17 	ldw	r3,-596(fp)
    ded8:	00800184 	movi	r2,6
    dedc:	1886583a 	ror	r3,r3,r2
    dee0:	e13f6b17 	ldw	r4,-596(fp)
    dee4:	008002c4 	movi	r2,11
    dee8:	2084583a 	ror	r2,r4,r2
    deec:	1886f03a 	xor	r3,r3,r2
    def0:	e0bf6b17 	ldw	r2,-596(fp)
    def4:	100411fa 	roli	r2,r2,7
    def8:	1886f03a 	xor	r3,r3,r2
    defc:	e0bf6617 	ldw	r2,-616(fp)
    df00:	1887883a 	add	r3,r3,r2
    df04:	e13f6c17 	ldw	r4,-592(fp)
    df08:	e0bf6d17 	ldw	r2,-588(fp)
    df0c:	2088f03a 	xor	r4,r4,r2
    df10:	e0bf6b17 	ldw	r2,-596(fp)
    df14:	2088703a 	and	r4,r4,r2
    df18:	e0bf6d17 	ldw	r2,-588(fp)
    df1c:	2084f03a 	xor	r2,r4,r2
    df20:	1887883a 	add	r3,r3,r2
    df24:	e0bf7d17 	ldw	r2,-524(fp)
    df28:	100813fa 	roli	r4,r2,15
    df2c:	e0bf7d17 	ldw	r2,-524(fp)
    df30:	1004137a 	roli	r2,r2,13
    df34:	2088f03a 	xor	r4,r4,r2
    df38:	e0bf7d17 	ldw	r2,-524(fp)
    df3c:	1004d2ba 	srli	r2,r2,10
    df40:	2088f03a 	xor	r4,r4,r2
    df44:	e0bf6e17 	ldw	r2,-584(fp)
    df48:	2089883a 	add	r4,r4,r2
    df4c:	e17f8617 	ldw	r5,-488(fp)
    df50:	008001c4 	movi	r2,7
    df54:	288a583a 	ror	r5,r5,r2
    df58:	e0bf8617 	ldw	r2,-488(fp)
    df5c:	100413ba 	roli	r2,r2,14
    df60:	288af03a 	xor	r5,r5,r2
    df64:	e0bf8617 	ldw	r2,-488(fp)
    df68:	1004d0fa 	srli	r2,r2,3
    df6c:	2884f03a 	xor	r2,r5,r2
    df70:	2085883a 	add	r2,r4,r2
    df74:	e13f8317 	ldw	r4,-500(fp)
    df78:	2085883a 	add	r2,r4,r2
    df7c:	e0bf8315 	stw	r2,-500(fp)
    df80:	e0bf8317 	ldw	r2,-500(fp)
    df84:	1887883a 	add	r3,r3,r2
    df88:	009dbeb4 	movhi	r2,30458
    df8c:	10a23684 	addi	r2,r2,-30502
    df90:	1885883a 	add	r2,r3,r2
    df94:	e0bfac15 	stw	r2,-336(fp)
    df98:	e0ff6717 	ldw	r3,-612(fp)
    df9c:	00800084 	movi	r2,2
    dfa0:	1886583a 	ror	r3,r3,r2
    dfa4:	e13f6717 	ldw	r4,-612(fp)
    dfa8:	00800344 	movi	r2,13
    dfac:	2084583a 	ror	r2,r4,r2
    dfb0:	1886f03a 	xor	r3,r3,r2
    dfb4:	e0bf6717 	ldw	r2,-612(fp)
    dfb8:	100412ba 	roli	r2,r2,10
    dfbc:	1886f03a 	xor	r3,r3,r2
    dfc0:	e13f6717 	ldw	r4,-612(fp)
    dfc4:	e0bf6817 	ldw	r2,-608(fp)
    dfc8:	2088703a 	and	r4,r4,r2
    dfcc:	e17f6717 	ldw	r5,-612(fp)
    dfd0:	e0bf6817 	ldw	r2,-608(fp)
    dfd4:	288ab03a 	or	r5,r5,r2
    dfd8:	e0bf6917 	ldw	r2,-604(fp)
    dfdc:	2884703a 	and	r2,r5,r2
    dfe0:	2084b03a 	or	r2,r4,r2
    dfe4:	1885883a 	add	r2,r3,r2
    dfe8:	e0bfad15 	stw	r2,-332(fp)
    dfec:	e0ff6a17 	ldw	r3,-600(fp)
    dff0:	e0bfac17 	ldw	r2,-336(fp)
    dff4:	1885883a 	add	r2,r3,r2
    dff8:	e0bf6a15 	stw	r2,-600(fp)
    dffc:	e0ffac17 	ldw	r3,-336(fp)
    e000:	e0bfad17 	ldw	r2,-332(fp)
    e004:	1885883a 	add	r2,r3,r2
    e008:	e0bf6615 	stw	r2,-616(fp)
    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));
    e00c:	e0ff6a17 	ldw	r3,-600(fp)
    e010:	00800184 	movi	r2,6
    e014:	1886583a 	ror	r3,r3,r2
    e018:	e13f6a17 	ldw	r4,-600(fp)
    e01c:	008002c4 	movi	r2,11
    e020:	2084583a 	ror	r2,r4,r2
    e024:	1886f03a 	xor	r3,r3,r2
    e028:	e0bf6a17 	ldw	r2,-600(fp)
    e02c:	100411fa 	roli	r2,r2,7
    e030:	1886f03a 	xor	r3,r3,r2
    e034:	e0bf6d17 	ldw	r2,-588(fp)
    e038:	1887883a 	add	r3,r3,r2
    e03c:	e13f6b17 	ldw	r4,-596(fp)
    e040:	e0bf6c17 	ldw	r2,-592(fp)
    e044:	2088f03a 	xor	r4,r4,r2
    e048:	e0bf6a17 	ldw	r2,-600(fp)
    e04c:	2088703a 	and	r4,r4,r2
    e050:	e0bf6c17 	ldw	r2,-592(fp)
    e054:	2084f03a 	xor	r2,r4,r2
    e058:	1887883a 	add	r3,r3,r2
    e05c:	e0bf8017 	ldw	r2,-512(fp)
    e060:	100813fa 	roli	r4,r2,15
    e064:	e0bf8017 	ldw	r2,-512(fp)
    e068:	1004137a 	roli	r2,r2,13
    e06c:	2088f03a 	xor	r4,r4,r2
    e070:	e0bf8017 	ldw	r2,-512(fp)
    e074:	1004d2ba 	srli	r2,r2,10
    e078:	2088f03a 	xor	r4,r4,r2
    e07c:	e0bf7117 	ldw	r2,-572(fp)
    e080:	2089883a 	add	r4,r4,r2
    e084:	e17f8917 	ldw	r5,-476(fp)
    e088:	008001c4 	movi	r2,7
    e08c:	288a583a 	ror	r5,r5,r2
    e090:	e0bf8917 	ldw	r2,-476(fp)
    e094:	100413ba 	roli	r2,r2,14
    e098:	288af03a 	xor	r5,r5,r2
    e09c:	e0bf8917 	ldw	r2,-476(fp)
    e0a0:	1004d0fa 	srli	r2,r2,3
    e0a4:	2884f03a 	xor	r2,r5,r2
    e0a8:	2085883a 	add	r2,r4,r2
    e0ac:	e13f8617 	ldw	r4,-488(fp)
    e0b0:	2085883a 	add	r2,r4,r2
    e0b4:	e0bf8615 	stw	r2,-488(fp)
    e0b8:	e0bf8617 	ldw	r2,-488(fp)
    e0bc:	1887883a 	add	r3,r3,r2
    e0c0:	00a60fb4 	movhi	r2,38974
    e0c4:	10945484 	addi	r2,r2,20818
    e0c8:	1885883a 	add	r2,r3,r2
    e0cc:	e0bfae15 	stw	r2,-328(fp)
    e0d0:	e0ff6617 	ldw	r3,-616(fp)
    e0d4:	00800084 	movi	r2,2
    e0d8:	1886583a 	ror	r3,r3,r2
    e0dc:	e13f6617 	ldw	r4,-616(fp)
    e0e0:	00800344 	movi	r2,13
    e0e4:	2084583a 	ror	r2,r4,r2
    e0e8:	1886f03a 	xor	r3,r3,r2
    e0ec:	e0bf6617 	ldw	r2,-616(fp)
    e0f0:	100412ba 	roli	r2,r2,10
    e0f4:	1886f03a 	xor	r3,r3,r2
    e0f8:	e13f6617 	ldw	r4,-616(fp)
    e0fc:	e0bf6717 	ldw	r2,-612(fp)
    e100:	2088703a 	and	r4,r4,r2
    e104:	e17f6617 	ldw	r5,-616(fp)
    e108:	e0bf6717 	ldw	r2,-612(fp)
    e10c:	288ab03a 	or	r5,r5,r2
    e110:	e0bf6817 	ldw	r2,-608(fp)
    e114:	2884703a 	and	r2,r5,r2
    e118:	2084b03a 	or	r2,r4,r2
    e11c:	1885883a 	add	r2,r3,r2
    e120:	e0bfaf15 	stw	r2,-324(fp)
    e124:	e0ff6917 	ldw	r3,-604(fp)
    e128:	e0bfae17 	ldw	r2,-328(fp)
    e12c:	1885883a 	add	r2,r3,r2
    e130:	e0bf6915 	stw	r2,-604(fp)
    e134:	e0ffae17 	ldw	r3,-328(fp)
    e138:	e0bfaf17 	ldw	r2,-324(fp)
    e13c:	1885883a 	add	r2,r3,r2
    e140:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));
    e144:	e0ff6917 	ldw	r3,-604(fp)
    e148:	00800184 	movi	r2,6
    e14c:	1886583a 	ror	r3,r3,r2
    e150:	e13f6917 	ldw	r4,-604(fp)
    e154:	008002c4 	movi	r2,11
    e158:	2084583a 	ror	r2,r4,r2
    e15c:	1886f03a 	xor	r3,r3,r2
    e160:	e0bf6917 	ldw	r2,-604(fp)
    e164:	100411fa 	roli	r2,r2,7
    e168:	1886f03a 	xor	r3,r3,r2
    e16c:	e0bf6c17 	ldw	r2,-592(fp)
    e170:	1887883a 	add	r3,r3,r2
    e174:	e13f6a17 	ldw	r4,-600(fp)
    e178:	e0bf6b17 	ldw	r2,-596(fp)
    e17c:	2088f03a 	xor	r4,r4,r2
    e180:	e0bf6917 	ldw	r2,-604(fp)
    e184:	2088703a 	and	r4,r4,r2
    e188:	e0bf6b17 	ldw	r2,-596(fp)
    e18c:	2084f03a 	xor	r2,r4,r2
    e190:	1887883a 	add	r3,r3,r2
    e194:	e0bf8317 	ldw	r2,-500(fp)
    e198:	100813fa 	roli	r4,r2,15
    e19c:	e0bf8317 	ldw	r2,-500(fp)
    e1a0:	1004137a 	roli	r2,r2,13
    e1a4:	2088f03a 	xor	r4,r4,r2
    e1a8:	e0bf8317 	ldw	r2,-500(fp)
    e1ac:	1004d2ba 	srli	r2,r2,10
    e1b0:	2088f03a 	xor	r4,r4,r2
    e1b4:	e0bf7417 	ldw	r2,-560(fp)
    e1b8:	2089883a 	add	r4,r4,r2
    e1bc:	e17f8c17 	ldw	r5,-464(fp)
    e1c0:	008001c4 	movi	r2,7
    e1c4:	288a583a 	ror	r5,r5,r2
    e1c8:	e0bf8c17 	ldw	r2,-464(fp)
    e1cc:	100413ba 	roli	r2,r2,14
    e1d0:	288af03a 	xor	r5,r5,r2
    e1d4:	e0bf8c17 	ldw	r2,-464(fp)
    e1d8:	1004d0fa 	srli	r2,r2,3
    e1dc:	2884f03a 	xor	r2,r5,r2
    e1e0:	2085883a 	add	r2,r4,r2
    e1e4:	e13f8917 	ldw	r4,-476(fp)
    e1e8:	2085883a 	add	r2,r4,r2
    e1ec:	e0bf8915 	stw	r2,-476(fp)
    e1f0:	e0bf8917 	ldw	r2,-476(fp)
    e1f4:	1887883a 	add	r3,r3,r2
    e1f8:	00aa0cb4 	movhi	r2,43058
    e1fc:	10b19b44 	addi	r2,r2,-14739
    e200:	1885883a 	add	r2,r3,r2
    e204:	e0bfb015 	stw	r2,-320(fp)
    e208:	e0ff6d17 	ldw	r3,-588(fp)
    e20c:	00800084 	movi	r2,2
    e210:	1886583a 	ror	r3,r3,r2
    e214:	e13f6d17 	ldw	r4,-588(fp)
    e218:	00800344 	movi	r2,13
    e21c:	2084583a 	ror	r2,r4,r2
    e220:	1886f03a 	xor	r3,r3,r2
    e224:	e0bf6d17 	ldw	r2,-588(fp)
    e228:	100412ba 	roli	r2,r2,10
    e22c:	1886f03a 	xor	r3,r3,r2
    e230:	e13f6d17 	ldw	r4,-588(fp)
    e234:	e0bf6617 	ldw	r2,-616(fp)
    e238:	2088703a 	and	r4,r4,r2
    e23c:	e17f6d17 	ldw	r5,-588(fp)
    e240:	e0bf6617 	ldw	r2,-616(fp)
    e244:	288ab03a 	or	r5,r5,r2
    e248:	e0bf6717 	ldw	r2,-612(fp)
    e24c:	2884703a 	and	r2,r5,r2
    e250:	2084b03a 	or	r2,r4,r2
    e254:	1885883a 	add	r2,r3,r2
    e258:	e0bfb115 	stw	r2,-316(fp)
    e25c:	e0ff6817 	ldw	r3,-608(fp)
    e260:	e0bfb017 	ldw	r2,-320(fp)
    e264:	1885883a 	add	r2,r3,r2
    e268:	e0bf6815 	stw	r2,-608(fp)
    e26c:	e0ffb017 	ldw	r3,-320(fp)
    e270:	e0bfb117 	ldw	r2,-316(fp)
    e274:	1885883a 	add	r2,r3,r2
    e278:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));
    e27c:	e0ff6817 	ldw	r3,-608(fp)
    e280:	00800184 	movi	r2,6
    e284:	1886583a 	ror	r3,r3,r2
    e288:	e13f6817 	ldw	r4,-608(fp)
    e28c:	008002c4 	movi	r2,11
    e290:	2084583a 	ror	r2,r4,r2
    e294:	1886f03a 	xor	r3,r3,r2
    e298:	e0bf6817 	ldw	r2,-608(fp)
    e29c:	100411fa 	roli	r2,r2,7
    e2a0:	1886f03a 	xor	r3,r3,r2
    e2a4:	e0bf6b17 	ldw	r2,-596(fp)
    e2a8:	1887883a 	add	r3,r3,r2
    e2ac:	e13f6917 	ldw	r4,-604(fp)
    e2b0:	e0bf6a17 	ldw	r2,-600(fp)
    e2b4:	2088f03a 	xor	r4,r4,r2
    e2b8:	e0bf6817 	ldw	r2,-608(fp)
    e2bc:	2088703a 	and	r4,r4,r2
    e2c0:	e0bf6a17 	ldw	r2,-600(fp)
    e2c4:	2084f03a 	xor	r2,r4,r2
    e2c8:	1887883a 	add	r3,r3,r2
    e2cc:	e0bf8617 	ldw	r2,-488(fp)
    e2d0:	100813fa 	roli	r4,r2,15
    e2d4:	e0bf8617 	ldw	r2,-488(fp)
    e2d8:	1004137a 	roli	r2,r2,13
    e2dc:	2088f03a 	xor	r4,r4,r2
    e2e0:	e0bf8617 	ldw	r2,-488(fp)
    e2e4:	1004d2ba 	srli	r2,r2,10
    e2e8:	2088f03a 	xor	r4,r4,r2
    e2ec:	e0bf7717 	ldw	r2,-548(fp)
    e2f0:	2089883a 	add	r4,r4,r2
    e2f4:	e17f8f17 	ldw	r5,-452(fp)
    e2f8:	008001c4 	movi	r2,7
    e2fc:	288a583a 	ror	r5,r5,r2
    e300:	e0bf8f17 	ldw	r2,-452(fp)
    e304:	100413ba 	roli	r2,r2,14
    e308:	288af03a 	xor	r5,r5,r2
    e30c:	e0bf8f17 	ldw	r2,-452(fp)
    e310:	1004d0fa 	srli	r2,r2,3
    e314:	2884f03a 	xor	r2,r5,r2
    e318:	2085883a 	add	r2,r4,r2
    e31c:	e13f8c17 	ldw	r4,-464(fp)
    e320:	2085883a 	add	r2,r4,r2
    e324:	e0bf8c15 	stw	r2,-464(fp)
    e328:	e0bf8c17 	ldw	r2,-464(fp)
    e32c:	1887883a 	add	r3,r3,r2
    e330:	00ac00f4 	movhi	r2,45059
    e334:	1089f204 	addi	r2,r2,10184
    e338:	1885883a 	add	r2,r3,r2
    e33c:	e0bfb215 	stw	r2,-312(fp)
    e340:	e0ff6c17 	ldw	r3,-592(fp)
    e344:	00800084 	movi	r2,2
    e348:	1886583a 	ror	r3,r3,r2
    e34c:	e13f6c17 	ldw	r4,-592(fp)
    e350:	00800344 	movi	r2,13
    e354:	2084583a 	ror	r2,r4,r2
    e358:	1886f03a 	xor	r3,r3,r2
    e35c:	e0bf6c17 	ldw	r2,-592(fp)
    e360:	100412ba 	roli	r2,r2,10
    e364:	1886f03a 	xor	r3,r3,r2
    e368:	e13f6c17 	ldw	r4,-592(fp)
    e36c:	e0bf6d17 	ldw	r2,-588(fp)
    e370:	2088703a 	and	r4,r4,r2
    e374:	e17f6c17 	ldw	r5,-592(fp)
    e378:	e0bf6d17 	ldw	r2,-588(fp)
    e37c:	288ab03a 	or	r5,r5,r2
    e380:	e0bf6617 	ldw	r2,-616(fp)
    e384:	2884703a 	and	r2,r5,r2
    e388:	2084b03a 	or	r2,r4,r2
    e38c:	1885883a 	add	r2,r3,r2
    e390:	e0bfb315 	stw	r2,-308(fp)
    e394:	e0ff6717 	ldw	r3,-612(fp)
    e398:	e0bfb217 	ldw	r2,-312(fp)
    e39c:	1885883a 	add	r2,r3,r2
    e3a0:	e0bf6715 	stw	r2,-612(fp)
    e3a4:	e0ffb217 	ldw	r3,-312(fp)
    e3a8:	e0bfb317 	ldw	r2,-308(fp)
    e3ac:	1885883a 	add	r2,r3,r2
    e3b0:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));
    e3b4:	e0ff6717 	ldw	r3,-612(fp)
    e3b8:	00800184 	movi	r2,6
    e3bc:	1886583a 	ror	r3,r3,r2
    e3c0:	e13f6717 	ldw	r4,-612(fp)
    e3c4:	008002c4 	movi	r2,11
    e3c8:	2084583a 	ror	r2,r4,r2
    e3cc:	1886f03a 	xor	r3,r3,r2
    e3d0:	e0bf6717 	ldw	r2,-612(fp)
    e3d4:	100411fa 	roli	r2,r2,7
    e3d8:	1886f03a 	xor	r3,r3,r2
    e3dc:	e0bf6a17 	ldw	r2,-600(fp)
    e3e0:	1887883a 	add	r3,r3,r2
    e3e4:	e13f6817 	ldw	r4,-608(fp)
    e3e8:	e0bf6917 	ldw	r2,-604(fp)
    e3ec:	2088f03a 	xor	r4,r4,r2
    e3f0:	e0bf6717 	ldw	r2,-612(fp)
    e3f4:	2088703a 	and	r4,r4,r2
    e3f8:	e0bf6917 	ldw	r2,-604(fp)
    e3fc:	2084f03a 	xor	r2,r4,r2
    e400:	1887883a 	add	r3,r3,r2
    e404:	e0bf8917 	ldw	r2,-476(fp)
    e408:	100813fa 	roli	r4,r2,15
    e40c:	e0bf8917 	ldw	r2,-476(fp)
    e410:	1004137a 	roli	r2,r2,13
    e414:	2088f03a 	xor	r4,r4,r2
    e418:	e0bf8917 	ldw	r2,-476(fp)
    e41c:	1004d2ba 	srli	r2,r2,10
    e420:	2088f03a 	xor	r4,r4,r2
    e424:	e0bf7a17 	ldw	r2,-536(fp)
    e428:	2089883a 	add	r4,r4,r2
    e42c:	e17f9217 	ldw	r5,-440(fp)
    e430:	008001c4 	movi	r2,7
    e434:	288a583a 	ror	r5,r5,r2
    e438:	e0bf9217 	ldw	r2,-440(fp)
    e43c:	100413ba 	roli	r2,r2,14
    e440:	288af03a 	xor	r5,r5,r2
    e444:	e0bf9217 	ldw	r2,-440(fp)
    e448:	1004d0fa 	srli	r2,r2,3
    e44c:	2884f03a 	xor	r2,r5,r2
    e450:	2085883a 	add	r2,r4,r2
    e454:	e13f8f17 	ldw	r4,-452(fp)
    e458:	2085883a 	add	r2,r4,r2
    e45c:	e0bf8f15 	stw	r2,-452(fp)
    e460:	e0bf8f17 	ldw	r2,-452(fp)
    e464:	1887883a 	add	r3,r3,r2
    e468:	00afd674 	movhi	r2,48985
    e46c:	109ff1c4 	addi	r2,r2,32711
    e470:	1885883a 	add	r2,r3,r2
    e474:	e0bfb415 	stw	r2,-304(fp)
    e478:	e0ff6b17 	ldw	r3,-596(fp)
    e47c:	00800084 	movi	r2,2
    e480:	1886583a 	ror	r3,r3,r2
    e484:	e13f6b17 	ldw	r4,-596(fp)
    e488:	00800344 	movi	r2,13
    e48c:	2084583a 	ror	r2,r4,r2
    e490:	1886f03a 	xor	r3,r3,r2
    e494:	e0bf6b17 	ldw	r2,-596(fp)
    e498:	100412ba 	roli	r2,r2,10
    e49c:	1886f03a 	xor	r3,r3,r2
    e4a0:	e13f6b17 	ldw	r4,-596(fp)
    e4a4:	e0bf6c17 	ldw	r2,-592(fp)
    e4a8:	2088703a 	and	r4,r4,r2
    e4ac:	e17f6b17 	ldw	r5,-596(fp)
    e4b0:	e0bf6c17 	ldw	r2,-592(fp)
    e4b4:	288ab03a 	or	r5,r5,r2
    e4b8:	e0bf6d17 	ldw	r2,-588(fp)
    e4bc:	2884703a 	and	r2,r5,r2
    e4c0:	2084b03a 	or	r2,r4,r2
    e4c4:	1885883a 	add	r2,r3,r2
    e4c8:	e0bfb515 	stw	r2,-300(fp)
    e4cc:	e0ff6617 	ldw	r3,-616(fp)
    e4d0:	e0bfb417 	ldw	r2,-304(fp)
    e4d4:	1885883a 	add	r2,r3,r2
    e4d8:	e0bf6615 	stw	r2,-616(fp)
    e4dc:	e0ffb417 	ldw	r3,-304(fp)
    e4e0:	e0bfb517 	ldw	r2,-300(fp)
    e4e4:	1885883a 	add	r2,r3,r2
    e4e8:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));
    e4ec:	e0ff6617 	ldw	r3,-616(fp)
    e4f0:	00800184 	movi	r2,6
    e4f4:	1886583a 	ror	r3,r3,r2
    e4f8:	e13f6617 	ldw	r4,-616(fp)
    e4fc:	008002c4 	movi	r2,11
    e500:	2084583a 	ror	r2,r4,r2
    e504:	1886f03a 	xor	r3,r3,r2
    e508:	e0bf6617 	ldw	r2,-616(fp)
    e50c:	100411fa 	roli	r2,r2,7
    e510:	1886f03a 	xor	r3,r3,r2
    e514:	e0bf6917 	ldw	r2,-604(fp)
    e518:	1887883a 	add	r3,r3,r2
    e51c:	e13f6717 	ldw	r4,-612(fp)
    e520:	e0bf6817 	ldw	r2,-608(fp)
    e524:	2088f03a 	xor	r4,r4,r2
    e528:	e0bf6617 	ldw	r2,-616(fp)
    e52c:	2088703a 	and	r4,r4,r2
    e530:	e0bf6817 	ldw	r2,-608(fp)
    e534:	2084f03a 	xor	r2,r4,r2
    e538:	1887883a 	add	r3,r3,r2
    e53c:	e0bf8c17 	ldw	r2,-464(fp)
    e540:	100813fa 	roli	r4,r2,15
    e544:	e0bf8c17 	ldw	r2,-464(fp)
    e548:	1004137a 	roli	r2,r2,13
    e54c:	2088f03a 	xor	r4,r4,r2
    e550:	e0bf8c17 	ldw	r2,-464(fp)
    e554:	1004d2ba 	srli	r2,r2,10
    e558:	2088f03a 	xor	r4,r4,r2
    e55c:	e0bf7d17 	ldw	r2,-524(fp)
    e560:	2089883a 	add	r4,r4,r2
    e564:	e17f9517 	ldw	r5,-428(fp)
    e568:	008001c4 	movi	r2,7
    e56c:	288a583a 	ror	r5,r5,r2
    e570:	e0bf9517 	ldw	r2,-428(fp)
    e574:	100413ba 	roli	r2,r2,14
    e578:	288af03a 	xor	r5,r5,r2
    e57c:	e0bf9517 	ldw	r2,-428(fp)
    e580:	1004d0fa 	srli	r2,r2,3
    e584:	2884f03a 	xor	r2,r5,r2
    e588:	2085883a 	add	r2,r4,r2
    e58c:	e13f9217 	ldw	r4,-440(fp)
    e590:	2085883a 	add	r2,r4,r2
    e594:	e0bf9215 	stw	r2,-440(fp)
    e598:	e0bf9217 	ldw	r2,-440(fp)
    e59c:	1887883a 	add	r3,r3,r2
    e5a0:	00b1b834 	movhi	r2,50912
    e5a4:	1082fcc4 	addi	r2,r2,3059
    e5a8:	1885883a 	add	r2,r3,r2
    e5ac:	e0bfb615 	stw	r2,-296(fp)
    e5b0:	e0ff6a17 	ldw	r3,-600(fp)
    e5b4:	00800084 	movi	r2,2
    e5b8:	1886583a 	ror	r3,r3,r2
    e5bc:	e13f6a17 	ldw	r4,-600(fp)
    e5c0:	00800344 	movi	r2,13
    e5c4:	2084583a 	ror	r2,r4,r2
    e5c8:	1886f03a 	xor	r3,r3,r2
    e5cc:	e0bf6a17 	ldw	r2,-600(fp)
    e5d0:	100412ba 	roli	r2,r2,10
    e5d4:	1886f03a 	xor	r3,r3,r2
    e5d8:	e13f6a17 	ldw	r4,-600(fp)
    e5dc:	e0bf6b17 	ldw	r2,-596(fp)
    e5e0:	2088703a 	and	r4,r4,r2
    e5e4:	e17f6a17 	ldw	r5,-600(fp)
    e5e8:	e0bf6b17 	ldw	r2,-596(fp)
    e5ec:	288ab03a 	or	r5,r5,r2
    e5f0:	e0bf6c17 	ldw	r2,-592(fp)
    e5f4:	2884703a 	and	r2,r5,r2
    e5f8:	2084b03a 	or	r2,r4,r2
    e5fc:	1885883a 	add	r2,r3,r2
    e600:	e0bfb715 	stw	r2,-292(fp)
    e604:	e0ff6d17 	ldw	r3,-588(fp)
    e608:	e0bfb617 	ldw	r2,-296(fp)
    e60c:	1885883a 	add	r2,r3,r2
    e610:	e0bf6d15 	stw	r2,-588(fp)
    e614:	e0ffb617 	ldw	r3,-296(fp)
    e618:	e0bfb717 	ldw	r2,-292(fp)
    e61c:	1885883a 	add	r2,r3,r2
    e620:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));
    e624:	e0ff6d17 	ldw	r3,-588(fp)
    e628:	00800184 	movi	r2,6
    e62c:	1886583a 	ror	r3,r3,r2
    e630:	e13f6d17 	ldw	r4,-588(fp)
    e634:	008002c4 	movi	r2,11
    e638:	2084583a 	ror	r2,r4,r2
    e63c:	1886f03a 	xor	r3,r3,r2
    e640:	e0bf6d17 	ldw	r2,-588(fp)
    e644:	100411fa 	roli	r2,r2,7
    e648:	1886f03a 	xor	r3,r3,r2
    e64c:	e0bf6817 	ldw	r2,-608(fp)
    e650:	1887883a 	add	r3,r3,r2
    e654:	e13f6617 	ldw	r4,-616(fp)
    e658:	e0bf6717 	ldw	r2,-612(fp)
    e65c:	2088f03a 	xor	r4,r4,r2
    e660:	e0bf6d17 	ldw	r2,-588(fp)
    e664:	2088703a 	and	r4,r4,r2
    e668:	e0bf6717 	ldw	r2,-612(fp)
    e66c:	2084f03a 	xor	r2,r4,r2
    e670:	1887883a 	add	r3,r3,r2
    e674:	e0bf8f17 	ldw	r2,-452(fp)
    e678:	100813fa 	roli	r4,r2,15
    e67c:	e0bf8f17 	ldw	r2,-452(fp)
    e680:	1004137a 	roli	r2,r2,13
    e684:	2088f03a 	xor	r4,r4,r2
    e688:	e0bf8f17 	ldw	r2,-452(fp)
    e68c:	1004d2ba 	srli	r2,r2,10
    e690:	2088f03a 	xor	r4,r4,r2
    e694:	e0bf8017 	ldw	r2,-512(fp)
    e698:	2089883a 	add	r4,r4,r2
    e69c:	e17f9817 	ldw	r5,-416(fp)
    e6a0:	008001c4 	movi	r2,7
    e6a4:	288a583a 	ror	r5,r5,r2
    e6a8:	e0bf9817 	ldw	r2,-416(fp)
    e6ac:	100413ba 	roli	r2,r2,14
    e6b0:	288af03a 	xor	r5,r5,r2
    e6b4:	e0bf9817 	ldw	r2,-416(fp)
    e6b8:	1004d0fa 	srli	r2,r2,3
    e6bc:	2884f03a 	xor	r2,r5,r2
    e6c0:	2085883a 	add	r2,r4,r2
    e6c4:	e13f9517 	ldw	r4,-428(fp)
    e6c8:	2085883a 	add	r2,r4,r2
    e6cc:	e0bf9515 	stw	r2,-428(fp)
    e6d0:	e0bf9517 	ldw	r2,-428(fp)
    e6d4:	1887883a 	add	r3,r3,r2
    e6d8:	00b56a34 	movhi	r2,54696
    e6dc:	10a451c4 	addi	r2,r2,-28345
    e6e0:	1885883a 	add	r2,r3,r2
    e6e4:	e0bfb815 	stw	r2,-288(fp)
    e6e8:	e0ff6917 	ldw	r3,-604(fp)
    e6ec:	00800084 	movi	r2,2
    e6f0:	1886583a 	ror	r3,r3,r2
    e6f4:	e13f6917 	ldw	r4,-604(fp)
    e6f8:	00800344 	movi	r2,13
    e6fc:	2084583a 	ror	r2,r4,r2
    e700:	1886f03a 	xor	r3,r3,r2
    e704:	e0bf6917 	ldw	r2,-604(fp)
    e708:	100412ba 	roli	r2,r2,10
    e70c:	1886f03a 	xor	r3,r3,r2
    e710:	e13f6917 	ldw	r4,-604(fp)
    e714:	e0bf6a17 	ldw	r2,-600(fp)
    e718:	2088703a 	and	r4,r4,r2
    e71c:	e17f6917 	ldw	r5,-604(fp)
    e720:	e0bf6a17 	ldw	r2,-600(fp)
    e724:	288ab03a 	or	r5,r5,r2
    e728:	e0bf6b17 	ldw	r2,-596(fp)
    e72c:	2884703a 	and	r2,r5,r2
    e730:	2084b03a 	or	r2,r4,r2
    e734:	1885883a 	add	r2,r3,r2
    e738:	e0bfb915 	stw	r2,-284(fp)
    e73c:	e0ff6c17 	ldw	r3,-592(fp)
    e740:	e0bfb817 	ldw	r2,-288(fp)
    e744:	1885883a 	add	r2,r3,r2
    e748:	e0bf6c15 	stw	r2,-592(fp)
    e74c:	e0ffb817 	ldw	r3,-288(fp)
    e750:	e0bfb917 	ldw	r2,-284(fp)
    e754:	1885883a 	add	r2,r3,r2
    e758:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));
    e75c:	e0ff6c17 	ldw	r3,-592(fp)
    e760:	00800184 	movi	r2,6
    e764:	1886583a 	ror	r3,r3,r2
    e768:	e13f6c17 	ldw	r4,-592(fp)
    e76c:	008002c4 	movi	r2,11
    e770:	2084583a 	ror	r2,r4,r2
    e774:	1886f03a 	xor	r3,r3,r2
    e778:	e0bf6c17 	ldw	r2,-592(fp)
    e77c:	100411fa 	roli	r2,r2,7
    e780:	1886f03a 	xor	r3,r3,r2
    e784:	e0bf6717 	ldw	r2,-612(fp)
    e788:	1887883a 	add	r3,r3,r2
    e78c:	e13f6d17 	ldw	r4,-588(fp)
    e790:	e0bf6617 	ldw	r2,-616(fp)
    e794:	2088f03a 	xor	r4,r4,r2
    e798:	e0bf6c17 	ldw	r2,-592(fp)
    e79c:	2088703a 	and	r4,r4,r2
    e7a0:	e0bf6617 	ldw	r2,-616(fp)
    e7a4:	2084f03a 	xor	r2,r4,r2
    e7a8:	1887883a 	add	r3,r3,r2
    e7ac:	e0bf9217 	ldw	r2,-440(fp)
    e7b0:	100813fa 	roli	r4,r2,15
    e7b4:	e0bf9217 	ldw	r2,-440(fp)
    e7b8:	1004137a 	roli	r2,r2,13
    e7bc:	2088f03a 	xor	r4,r4,r2
    e7c0:	e0bf9217 	ldw	r2,-440(fp)
    e7c4:	1004d2ba 	srli	r2,r2,10
    e7c8:	2088f03a 	xor	r4,r4,r2
    e7cc:	e0bf8317 	ldw	r2,-500(fp)
    e7d0:	2089883a 	add	r4,r4,r2
    e7d4:	e17f9b17 	ldw	r5,-404(fp)
    e7d8:	008001c4 	movi	r2,7
    e7dc:	288a583a 	ror	r5,r5,r2
    e7e0:	e0bf9b17 	ldw	r2,-404(fp)
    e7e4:	100413ba 	roli	r2,r2,14
    e7e8:	288af03a 	xor	r5,r5,r2
    e7ec:	e0bf9b17 	ldw	r2,-404(fp)
    e7f0:	1004d0fa 	srli	r2,r2,3
    e7f4:	2884f03a 	xor	r2,r5,r2
    e7f8:	2085883a 	add	r2,r4,r2
    e7fc:	e13f9817 	ldw	r4,-416(fp)
    e800:	2085883a 	add	r2,r4,r2
    e804:	e0bf9815 	stw	r2,-416(fp)
    e808:	e0bf9817 	ldw	r2,-416(fp)
    e80c:	1887883a 	add	r3,r3,r2
    e810:	0081b2b4 	movhi	r2,1738
    e814:	1098d444 	addi	r2,r2,25425
    e818:	1885883a 	add	r2,r3,r2
    e81c:	e0bfba15 	stw	r2,-280(fp)
    e820:	e0ff6817 	ldw	r3,-608(fp)
    e824:	00800084 	movi	r2,2
    e828:	1886583a 	ror	r3,r3,r2
    e82c:	e13f6817 	ldw	r4,-608(fp)
    e830:	00800344 	movi	r2,13
    e834:	2084583a 	ror	r2,r4,r2
    e838:	1886f03a 	xor	r3,r3,r2
    e83c:	e0bf6817 	ldw	r2,-608(fp)
    e840:	100412ba 	roli	r2,r2,10
    e844:	1886f03a 	xor	r3,r3,r2
    e848:	e13f6817 	ldw	r4,-608(fp)
    e84c:	e0bf6917 	ldw	r2,-604(fp)
    e850:	2088703a 	and	r4,r4,r2
    e854:	e17f6817 	ldw	r5,-608(fp)
    e858:	e0bf6917 	ldw	r2,-604(fp)
    e85c:	288ab03a 	or	r5,r5,r2
    e860:	e0bf6a17 	ldw	r2,-600(fp)
    e864:	2884703a 	and	r2,r5,r2
    e868:	2084b03a 	or	r2,r4,r2
    e86c:	1885883a 	add	r2,r3,r2
    e870:	e0bfbb15 	stw	r2,-276(fp)
    e874:	e0ff6b17 	ldw	r3,-596(fp)
    e878:	e0bfba17 	ldw	r2,-280(fp)
    e87c:	1885883a 	add	r2,r3,r2
    e880:	e0bf6b15 	stw	r2,-596(fp)
    e884:	e0ffba17 	ldw	r3,-280(fp)
    e888:	e0bfbb17 	ldw	r2,-276(fp)
    e88c:	1885883a 	add	r2,r3,r2
    e890:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));
    e894:	e0ff6b17 	ldw	r3,-596(fp)
    e898:	00800184 	movi	r2,6
    e89c:	1886583a 	ror	r3,r3,r2
    e8a0:	e13f6b17 	ldw	r4,-596(fp)
    e8a4:	008002c4 	movi	r2,11
    e8a8:	2084583a 	ror	r2,r4,r2
    e8ac:	1886f03a 	xor	r3,r3,r2
    e8b0:	e0bf6b17 	ldw	r2,-596(fp)
    e8b4:	100411fa 	roli	r2,r2,7
    e8b8:	1886f03a 	xor	r3,r3,r2
    e8bc:	e0bf6617 	ldw	r2,-616(fp)
    e8c0:	1887883a 	add	r3,r3,r2
    e8c4:	e13f6c17 	ldw	r4,-592(fp)
    e8c8:	e0bf6d17 	ldw	r2,-588(fp)
    e8cc:	2088f03a 	xor	r4,r4,r2
    e8d0:	e0bf6b17 	ldw	r2,-596(fp)
    e8d4:	2088703a 	and	r4,r4,r2
    e8d8:	e0bf6d17 	ldw	r2,-588(fp)
    e8dc:	2084f03a 	xor	r2,r4,r2
    e8e0:	1887883a 	add	r3,r3,r2
    e8e4:	e0bf9517 	ldw	r2,-428(fp)
    e8e8:	100813fa 	roli	r4,r2,15
    e8ec:	e0bf9517 	ldw	r2,-428(fp)
    e8f0:	1004137a 	roli	r2,r2,13
    e8f4:	2088f03a 	xor	r4,r4,r2
    e8f8:	e0bf9517 	ldw	r2,-428(fp)
    e8fc:	1004d2ba 	srli	r2,r2,10
    e900:	2088f03a 	xor	r4,r4,r2
    e904:	e0bf8617 	ldw	r2,-488(fp)
    e908:	2089883a 	add	r4,r4,r2
    e90c:	e17f6e17 	ldw	r5,-584(fp)
    e910:	008001c4 	movi	r2,7
    e914:	288a583a 	ror	r5,r5,r2
    e918:	e0bf6e17 	ldw	r2,-584(fp)
    e91c:	100413ba 	roli	r2,r2,14
    e920:	288af03a 	xor	r5,r5,r2
    e924:	e0bf6e17 	ldw	r2,-584(fp)
    e928:	1004d0fa 	srli	r2,r2,3
    e92c:	2884f03a 	xor	r2,r5,r2
    e930:	2085883a 	add	r2,r4,r2
    e934:	e13f9b17 	ldw	r4,-404(fp)
    e938:	2085883a 	add	r2,r4,r2
    e93c:	e0bf9b15 	stw	r2,-404(fp)
    e940:	e0bf9b17 	ldw	r2,-404(fp)
    e944:	1887883a 	add	r3,r3,r2
    e948:	00850a74 	movhi	r2,5161
    e94c:	108a59c4 	addi	r2,r2,10599
    e950:	1885883a 	add	r2,r3,r2
    e954:	e0bfbc15 	stw	r2,-272(fp)
    e958:	e0ff6717 	ldw	r3,-612(fp)
    e95c:	00800084 	movi	r2,2
    e960:	1886583a 	ror	r3,r3,r2
    e964:	e13f6717 	ldw	r4,-612(fp)
    e968:	00800344 	movi	r2,13
    e96c:	2084583a 	ror	r2,r4,r2
    e970:	1886f03a 	xor	r3,r3,r2
    e974:	e0bf6717 	ldw	r2,-612(fp)
    e978:	100412ba 	roli	r2,r2,10
    e97c:	1886f03a 	xor	r3,r3,r2
    e980:	e13f6717 	ldw	r4,-612(fp)
    e984:	e0bf6817 	ldw	r2,-608(fp)
    e988:	2088703a 	and	r4,r4,r2
    e98c:	e17f6717 	ldw	r5,-612(fp)
    e990:	e0bf6817 	ldw	r2,-608(fp)
    e994:	288ab03a 	or	r5,r5,r2
    e998:	e0bf6917 	ldw	r2,-604(fp)
    e99c:	2884703a 	and	r2,r5,r2
    e9a0:	2084b03a 	or	r2,r4,r2
    e9a4:	1885883a 	add	r2,r3,r2
    e9a8:	e0bfbd15 	stw	r2,-268(fp)
    e9ac:	e0ff6a17 	ldw	r3,-600(fp)
    e9b0:	e0bfbc17 	ldw	r2,-272(fp)
    e9b4:	1885883a 	add	r2,r3,r2
    e9b8:	e0bf6a15 	stw	r2,-600(fp)
    e9bc:	e0ffbc17 	ldw	r3,-272(fp)
    e9c0:	e0bfbd17 	ldw	r2,-268(fp)
    e9c4:	1885883a 	add	r2,r3,r2
    e9c8:	e0bf6615 	stw	r2,-616(fp)

    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));
    e9cc:	e0ff6a17 	ldw	r3,-600(fp)
    e9d0:	00800184 	movi	r2,6
    e9d4:	1886583a 	ror	r3,r3,r2
    e9d8:	e13f6a17 	ldw	r4,-600(fp)
    e9dc:	008002c4 	movi	r2,11
    e9e0:	2084583a 	ror	r2,r4,r2
    e9e4:	1886f03a 	xor	r3,r3,r2
    e9e8:	e0bf6a17 	ldw	r2,-600(fp)
    e9ec:	100411fa 	roli	r2,r2,7
    e9f0:	1886f03a 	xor	r3,r3,r2
    e9f4:	e0bf6d17 	ldw	r2,-588(fp)
    e9f8:	1887883a 	add	r3,r3,r2
    e9fc:	e13f6b17 	ldw	r4,-596(fp)
    ea00:	e0bf6c17 	ldw	r2,-592(fp)
    ea04:	2088f03a 	xor	r4,r4,r2
    ea08:	e0bf6a17 	ldw	r2,-600(fp)
    ea0c:	2088703a 	and	r4,r4,r2
    ea10:	e0bf6c17 	ldw	r2,-592(fp)
    ea14:	2084f03a 	xor	r2,r4,r2
    ea18:	1887883a 	add	r3,r3,r2
    ea1c:	e0bf9817 	ldw	r2,-416(fp)
    ea20:	100813fa 	roli	r4,r2,15
    ea24:	e0bf9817 	ldw	r2,-416(fp)
    ea28:	1004137a 	roli	r2,r2,13
    ea2c:	2088f03a 	xor	r4,r4,r2
    ea30:	e0bf9817 	ldw	r2,-416(fp)
    ea34:	1004d2ba 	srli	r2,r2,10
    ea38:	2088f03a 	xor	r4,r4,r2
    ea3c:	e0bf8917 	ldw	r2,-476(fp)
    ea40:	2089883a 	add	r4,r4,r2
    ea44:	e17f7117 	ldw	r5,-572(fp)
    ea48:	008001c4 	movi	r2,7
    ea4c:	288a583a 	ror	r5,r5,r2
    ea50:	e0bf7117 	ldw	r2,-572(fp)
    ea54:	100413ba 	roli	r2,r2,14
    ea58:	288af03a 	xor	r5,r5,r2
    ea5c:	e0bf7117 	ldw	r2,-572(fp)
    ea60:	1004d0fa 	srli	r2,r2,3
    ea64:	2884f03a 	xor	r2,r5,r2
    ea68:	2085883a 	add	r2,r4,r2
    ea6c:	e13f6e17 	ldw	r4,-584(fp)
    ea70:	2085883a 	add	r2,r4,r2
    ea74:	e0bf6e15 	stw	r2,-584(fp)
    ea78:	e0bf6e17 	ldw	r2,-584(fp)
    ea7c:	1887883a 	add	r3,r3,r2
    ea80:	0089edf4 	movhi	r2,10167
    ea84:	1082a144 	addi	r2,r2,2693
    ea88:	1885883a 	add	r2,r3,r2
    ea8c:	e0bfbe15 	stw	r2,-264(fp)
    ea90:	e0ff6617 	ldw	r3,-616(fp)
    ea94:	00800084 	movi	r2,2
    ea98:	1886583a 	ror	r3,r3,r2
    ea9c:	e13f6617 	ldw	r4,-616(fp)
    eaa0:	00800344 	movi	r2,13
    eaa4:	2084583a 	ror	r2,r4,r2
    eaa8:	1886f03a 	xor	r3,r3,r2
    eaac:	e0bf6617 	ldw	r2,-616(fp)
    eab0:	100412ba 	roli	r2,r2,10
    eab4:	1886f03a 	xor	r3,r3,r2
    eab8:	e13f6617 	ldw	r4,-616(fp)
    eabc:	e0bf6717 	ldw	r2,-612(fp)
    eac0:	2088703a 	and	r4,r4,r2
    eac4:	e17f6617 	ldw	r5,-616(fp)
    eac8:	e0bf6717 	ldw	r2,-612(fp)
    eacc:	288ab03a 	or	r5,r5,r2
    ead0:	e0bf6817 	ldw	r2,-608(fp)
    ead4:	2884703a 	and	r2,r5,r2
    ead8:	2084b03a 	or	r2,r4,r2
    eadc:	1885883a 	add	r2,r3,r2
    eae0:	e0bfbf15 	stw	r2,-260(fp)
    eae4:	e0ff6917 	ldw	r3,-604(fp)
    eae8:	e0bfbe17 	ldw	r2,-264(fp)
    eaec:	1885883a 	add	r2,r3,r2
    eaf0:	e0bf6915 	stw	r2,-604(fp)
    eaf4:	e0ffbe17 	ldw	r3,-264(fp)
    eaf8:	e0bfbf17 	ldw	r2,-260(fp)
    eafc:	1885883a 	add	r2,r3,r2
    eb00:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));
    eb04:	e0ff6917 	ldw	r3,-604(fp)
    eb08:	00800184 	movi	r2,6
    eb0c:	1886583a 	ror	r3,r3,r2
    eb10:	e13f6917 	ldw	r4,-604(fp)
    eb14:	008002c4 	movi	r2,11
    eb18:	2084583a 	ror	r2,r4,r2
    eb1c:	1886f03a 	xor	r3,r3,r2
    eb20:	e0bf6917 	ldw	r2,-604(fp)
    eb24:	100411fa 	roli	r2,r2,7
    eb28:	1886f03a 	xor	r3,r3,r2
    eb2c:	e0bf6c17 	ldw	r2,-592(fp)
    eb30:	1887883a 	add	r3,r3,r2
    eb34:	e13f6a17 	ldw	r4,-600(fp)
    eb38:	e0bf6b17 	ldw	r2,-596(fp)
    eb3c:	2088f03a 	xor	r4,r4,r2
    eb40:	e0bf6917 	ldw	r2,-604(fp)
    eb44:	2088703a 	and	r4,r4,r2
    eb48:	e0bf6b17 	ldw	r2,-596(fp)
    eb4c:	2084f03a 	xor	r2,r4,r2
    eb50:	1887883a 	add	r3,r3,r2
    eb54:	e0bf9b17 	ldw	r2,-404(fp)
    eb58:	100813fa 	roli	r4,r2,15
    eb5c:	e0bf9b17 	ldw	r2,-404(fp)
    eb60:	1004137a 	roli	r2,r2,13
    eb64:	2088f03a 	xor	r4,r4,r2
    eb68:	e0bf9b17 	ldw	r2,-404(fp)
    eb6c:	1004d2ba 	srli	r2,r2,10
    eb70:	2088f03a 	xor	r4,r4,r2
    eb74:	e0bf8c17 	ldw	r2,-464(fp)
    eb78:	2089883a 	add	r4,r4,r2
    eb7c:	e17f7417 	ldw	r5,-560(fp)
    eb80:	008001c4 	movi	r2,7
    eb84:	288a583a 	ror	r5,r5,r2
    eb88:	e0bf7417 	ldw	r2,-560(fp)
    eb8c:	100413ba 	roli	r2,r2,14
    eb90:	288af03a 	xor	r5,r5,r2
    eb94:	e0bf7417 	ldw	r2,-560(fp)
    eb98:	1004d0fa 	srli	r2,r2,3
    eb9c:	2884f03a 	xor	r2,r5,r2
    eba0:	2085883a 	add	r2,r4,r2
    eba4:	e13f7117 	ldw	r4,-572(fp)
    eba8:	2085883a 	add	r2,r4,r2
    ebac:	e0bf7115 	stw	r2,-572(fp)
    ebb0:	e0bf7117 	ldw	r2,-572(fp)
    ebb4:	1887883a 	add	r3,r3,r2
    ebb8:	008b86f4 	movhi	r2,11803
    ebbc:	10884e04 	addi	r2,r2,8504
    ebc0:	1885883a 	add	r2,r3,r2
    ebc4:	e0bfc015 	stw	r2,-256(fp)
    ebc8:	e0ff6d17 	ldw	r3,-588(fp)
    ebcc:	00800084 	movi	r2,2
    ebd0:	1886583a 	ror	r3,r3,r2
    ebd4:	e13f6d17 	ldw	r4,-588(fp)
    ebd8:	00800344 	movi	r2,13
    ebdc:	2084583a 	ror	r2,r4,r2
    ebe0:	1886f03a 	xor	r3,r3,r2
    ebe4:	e0bf6d17 	ldw	r2,-588(fp)
    ebe8:	100412ba 	roli	r2,r2,10
    ebec:	1886f03a 	xor	r3,r3,r2
    ebf0:	e13f6d17 	ldw	r4,-588(fp)
    ebf4:	e0bf6617 	ldw	r2,-616(fp)
    ebf8:	2088703a 	and	r4,r4,r2
    ebfc:	e17f6d17 	ldw	r5,-588(fp)
    ec00:	e0bf6617 	ldw	r2,-616(fp)
    ec04:	288ab03a 	or	r5,r5,r2
    ec08:	e0bf6717 	ldw	r2,-612(fp)
    ec0c:	2884703a 	and	r2,r5,r2
    ec10:	2084b03a 	or	r2,r4,r2
    ec14:	1885883a 	add	r2,r3,r2
    ec18:	e0bfc115 	stw	r2,-252(fp)
    ec1c:	e0ff6817 	ldw	r3,-608(fp)
    ec20:	e0bfc017 	ldw	r2,-256(fp)
    ec24:	1885883a 	add	r2,r3,r2
    ec28:	e0bf6815 	stw	r2,-608(fp)
    ec2c:	e0ffc017 	ldw	r3,-256(fp)
    ec30:	e0bfc117 	ldw	r2,-252(fp)
    ec34:	1885883a 	add	r2,r3,r2
    ec38:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));
    ec3c:	e0ff6817 	ldw	r3,-608(fp)
    ec40:	00800184 	movi	r2,6
    ec44:	1886583a 	ror	r3,r3,r2
    ec48:	e13f6817 	ldw	r4,-608(fp)
    ec4c:	008002c4 	movi	r2,11
    ec50:	2084583a 	ror	r2,r4,r2
    ec54:	1886f03a 	xor	r3,r3,r2
    ec58:	e0bf6817 	ldw	r2,-608(fp)
    ec5c:	100411fa 	roli	r2,r2,7
    ec60:	1886f03a 	xor	r3,r3,r2
    ec64:	e0bf6b17 	ldw	r2,-596(fp)
    ec68:	1887883a 	add	r3,r3,r2
    ec6c:	e13f6917 	ldw	r4,-604(fp)
    ec70:	e0bf6a17 	ldw	r2,-600(fp)
    ec74:	2088f03a 	xor	r4,r4,r2
    ec78:	e0bf6817 	ldw	r2,-608(fp)
    ec7c:	2088703a 	and	r4,r4,r2
    ec80:	e0bf6a17 	ldw	r2,-600(fp)
    ec84:	2084f03a 	xor	r2,r4,r2
    ec88:	1887883a 	add	r3,r3,r2
    ec8c:	e0bf6e17 	ldw	r2,-584(fp)
    ec90:	100813fa 	roli	r4,r2,15
    ec94:	e0bf6e17 	ldw	r2,-584(fp)
    ec98:	1004137a 	roli	r2,r2,13
    ec9c:	2088f03a 	xor	r4,r4,r2
    eca0:	e0bf6e17 	ldw	r2,-584(fp)
    eca4:	1004d2ba 	srli	r2,r2,10
    eca8:	2088f03a 	xor	r4,r4,r2
    ecac:	e0bf8f17 	ldw	r2,-452(fp)
    ecb0:	2089883a 	add	r4,r4,r2
    ecb4:	e17f7717 	ldw	r5,-548(fp)
    ecb8:	008001c4 	movi	r2,7
    ecbc:	288a583a 	ror	r5,r5,r2
    ecc0:	e0bf7717 	ldw	r2,-548(fp)
    ecc4:	100413ba 	roli	r2,r2,14
    ecc8:	288af03a 	xor	r5,r5,r2
    eccc:	e0bf7717 	ldw	r2,-548(fp)
    ecd0:	1004d0fa 	srli	r2,r2,3
    ecd4:	2884f03a 	xor	r2,r5,r2
    ecd8:	2085883a 	add	r2,r4,r2
    ecdc:	e13f7417 	ldw	r4,-560(fp)
    ece0:	2085883a 	add	r2,r4,r2
    ece4:	e0bf7415 	stw	r2,-560(fp)
    ece8:	e0bf7417 	ldw	r2,-560(fp)
    ecec:	1887883a 	add	r3,r3,r2
    ecf0:	00934b34 	movhi	r2,19756
    ecf4:	109b7f04 	addi	r2,r2,28156
    ecf8:	1885883a 	add	r2,r3,r2
    ecfc:	e0bfc215 	stw	r2,-248(fp)
    ed00:	e0ff6c17 	ldw	r3,-592(fp)
    ed04:	00800084 	movi	r2,2
    ed08:	1886583a 	ror	r3,r3,r2
    ed0c:	e13f6c17 	ldw	r4,-592(fp)
    ed10:	00800344 	movi	r2,13
    ed14:	2084583a 	ror	r2,r4,r2
    ed18:	1886f03a 	xor	r3,r3,r2
    ed1c:	e0bf6c17 	ldw	r2,-592(fp)
    ed20:	100412ba 	roli	r2,r2,10
    ed24:	1886f03a 	xor	r3,r3,r2
    ed28:	e13f6c17 	ldw	r4,-592(fp)
    ed2c:	e0bf6d17 	ldw	r2,-588(fp)
    ed30:	2088703a 	and	r4,r4,r2
    ed34:	e17f6c17 	ldw	r5,-592(fp)
    ed38:	e0bf6d17 	ldw	r2,-588(fp)
    ed3c:	288ab03a 	or	r5,r5,r2
    ed40:	e0bf6617 	ldw	r2,-616(fp)
    ed44:	2884703a 	and	r2,r5,r2
    ed48:	2084b03a 	or	r2,r4,r2
    ed4c:	1885883a 	add	r2,r3,r2
    ed50:	e0bfc315 	stw	r2,-244(fp)
    ed54:	e0ff6717 	ldw	r3,-612(fp)
    ed58:	e0bfc217 	ldw	r2,-248(fp)
    ed5c:	1885883a 	add	r2,r3,r2
    ed60:	e0bf6715 	stw	r2,-612(fp)
    ed64:	e0ffc217 	ldw	r3,-248(fp)
    ed68:	e0bfc317 	ldw	r2,-244(fp)
    ed6c:	1885883a 	add	r2,r3,r2
    ed70:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));
    ed74:	e0ff6717 	ldw	r3,-612(fp)
    ed78:	00800184 	movi	r2,6
    ed7c:	1886583a 	ror	r3,r3,r2
    ed80:	e13f6717 	ldw	r4,-612(fp)
    ed84:	008002c4 	movi	r2,11
    ed88:	2084583a 	ror	r2,r4,r2
    ed8c:	1886f03a 	xor	r3,r3,r2
    ed90:	e0bf6717 	ldw	r2,-612(fp)
    ed94:	100411fa 	roli	r2,r2,7
    ed98:	1886f03a 	xor	r3,r3,r2
    ed9c:	e0bf6a17 	ldw	r2,-600(fp)
    eda0:	1887883a 	add	r3,r3,r2
    eda4:	e13f6817 	ldw	r4,-608(fp)
    eda8:	e0bf6917 	ldw	r2,-604(fp)
    edac:	2088f03a 	xor	r4,r4,r2
    edb0:	e0bf6717 	ldw	r2,-612(fp)
    edb4:	2088703a 	and	r4,r4,r2
    edb8:	e0bf6917 	ldw	r2,-604(fp)
    edbc:	2084f03a 	xor	r2,r4,r2
    edc0:	1887883a 	add	r3,r3,r2
    edc4:	e0bf7117 	ldw	r2,-572(fp)
    edc8:	100813fa 	roli	r4,r2,15
    edcc:	e0bf7117 	ldw	r2,-572(fp)
    edd0:	1004137a 	roli	r2,r2,13
    edd4:	2088f03a 	xor	r4,r4,r2
    edd8:	e0bf7117 	ldw	r2,-572(fp)
    eddc:	1004d2ba 	srli	r2,r2,10
    ede0:	2088f03a 	xor	r4,r4,r2
    ede4:	e0bf9217 	ldw	r2,-440(fp)
    ede8:	2089883a 	add	r4,r4,r2
    edec:	e17f7a17 	ldw	r5,-536(fp)
    edf0:	008001c4 	movi	r2,7
    edf4:	288a583a 	ror	r5,r5,r2
    edf8:	e0bf7a17 	ldw	r2,-536(fp)
    edfc:	100413ba 	roli	r2,r2,14
    ee00:	288af03a 	xor	r5,r5,r2
    ee04:	e0bf7a17 	ldw	r2,-536(fp)
    ee08:	1004d0fa 	srli	r2,r2,3
    ee0c:	2884f03a 	xor	r2,r5,r2
    ee10:	2085883a 	add	r2,r4,r2
    ee14:	e13f7717 	ldw	r4,-548(fp)
    ee18:	2085883a 	add	r2,r4,r2
    ee1c:	e0bf7715 	stw	r2,-548(fp)
    ee20:	e0bf7717 	ldw	r2,-548(fp)
    ee24:	1887883a 	add	r3,r3,r2
    ee28:	0094ce34 	movhi	r2,21304
    ee2c:	108344c4 	addi	r2,r2,3347
    ee30:	1885883a 	add	r2,r3,r2
    ee34:	e0bfc415 	stw	r2,-240(fp)
    ee38:	e0ff6b17 	ldw	r3,-596(fp)
    ee3c:	00800084 	movi	r2,2
    ee40:	1886583a 	ror	r3,r3,r2
    ee44:	e13f6b17 	ldw	r4,-596(fp)
    ee48:	00800344 	movi	r2,13
    ee4c:	2084583a 	ror	r2,r4,r2
    ee50:	1886f03a 	xor	r3,r3,r2
    ee54:	e0bf6b17 	ldw	r2,-596(fp)
    ee58:	100412ba 	roli	r2,r2,10
    ee5c:	1886f03a 	xor	r3,r3,r2
    ee60:	e13f6b17 	ldw	r4,-596(fp)
    ee64:	e0bf6c17 	ldw	r2,-592(fp)
    ee68:	2088703a 	and	r4,r4,r2
    ee6c:	e17f6b17 	ldw	r5,-596(fp)
    ee70:	e0bf6c17 	ldw	r2,-592(fp)
    ee74:	288ab03a 	or	r5,r5,r2
    ee78:	e0bf6d17 	ldw	r2,-588(fp)
    ee7c:	2884703a 	and	r2,r5,r2
    ee80:	2084b03a 	or	r2,r4,r2
    ee84:	1885883a 	add	r2,r3,r2
    ee88:	e0bfc515 	stw	r2,-236(fp)
    ee8c:	e0ff6617 	ldw	r3,-616(fp)
    ee90:	e0bfc417 	ldw	r2,-240(fp)
    ee94:	1885883a 	add	r2,r3,r2
    ee98:	e0bf6615 	stw	r2,-616(fp)
    ee9c:	e0ffc417 	ldw	r3,-240(fp)
    eea0:	e0bfc517 	ldw	r2,-236(fp)
    eea4:	1885883a 	add	r2,r3,r2
    eea8:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));
    eeac:	e0ff6617 	ldw	r3,-616(fp)
    eeb0:	00800184 	movi	r2,6
    eeb4:	1886583a 	ror	r3,r3,r2
    eeb8:	e13f6617 	ldw	r4,-616(fp)
    eebc:	008002c4 	movi	r2,11
    eec0:	2084583a 	ror	r2,r4,r2
    eec4:	1886f03a 	xor	r3,r3,r2
    eec8:	e0bf6617 	ldw	r2,-616(fp)
    eecc:	100411fa 	roli	r2,r2,7
    eed0:	1886f03a 	xor	r3,r3,r2
    eed4:	e0bf6917 	ldw	r2,-604(fp)
    eed8:	1887883a 	add	r3,r3,r2
    eedc:	e13f6717 	ldw	r4,-612(fp)
    eee0:	e0bf6817 	ldw	r2,-608(fp)
    eee4:	2088f03a 	xor	r4,r4,r2
    eee8:	e0bf6617 	ldw	r2,-616(fp)
    eeec:	2088703a 	and	r4,r4,r2
    eef0:	e0bf6817 	ldw	r2,-608(fp)
    eef4:	2084f03a 	xor	r2,r4,r2
    eef8:	1887883a 	add	r3,r3,r2
    eefc:	e0bf7417 	ldw	r2,-560(fp)
    ef00:	100813fa 	roli	r4,r2,15
    ef04:	e0bf7417 	ldw	r2,-560(fp)
    ef08:	1004137a 	roli	r2,r2,13
    ef0c:	2088f03a 	xor	r4,r4,r2
    ef10:	e0bf7417 	ldw	r2,-560(fp)
    ef14:	1004d2ba 	srli	r2,r2,10
    ef18:	2088f03a 	xor	r4,r4,r2
    ef1c:	e0bf9517 	ldw	r2,-428(fp)
    ef20:	2089883a 	add	r4,r4,r2
    ef24:	e17f7d17 	ldw	r5,-524(fp)
    ef28:	008001c4 	movi	r2,7
    ef2c:	288a583a 	ror	r5,r5,r2
    ef30:	e0bf7d17 	ldw	r2,-524(fp)
    ef34:	100413ba 	roli	r2,r2,14
    ef38:	288af03a 	xor	r5,r5,r2
    ef3c:	e0bf7d17 	ldw	r2,-524(fp)
    ef40:	1004d0fa 	srli	r2,r2,3
    ef44:	2884f03a 	xor	r2,r5,r2
    ef48:	2085883a 	add	r2,r4,r2
    ef4c:	e13f7a17 	ldw	r4,-536(fp)
    ef50:	2085883a 	add	r2,r4,r2
    ef54:	e0bf7a15 	stw	r2,-536(fp)
    ef58:	e0bf7a17 	ldw	r2,-536(fp)
    ef5c:	1887883a 	add	r3,r3,r2
    ef60:	009942b4 	movhi	r2,25866
    ef64:	109cd504 	addi	r2,r2,29524
    ef68:	1885883a 	add	r2,r3,r2
    ef6c:	e0bfc615 	stw	r2,-232(fp)
    ef70:	e0ff6a17 	ldw	r3,-600(fp)
    ef74:	00800084 	movi	r2,2
    ef78:	1886583a 	ror	r3,r3,r2
    ef7c:	e13f6a17 	ldw	r4,-600(fp)
    ef80:	00800344 	movi	r2,13
    ef84:	2084583a 	ror	r2,r4,r2
    ef88:	1886f03a 	xor	r3,r3,r2
    ef8c:	e0bf6a17 	ldw	r2,-600(fp)
    ef90:	100412ba 	roli	r2,r2,10
    ef94:	1886f03a 	xor	r3,r3,r2
    ef98:	e13f6a17 	ldw	r4,-600(fp)
    ef9c:	e0bf6b17 	ldw	r2,-596(fp)
    efa0:	2088703a 	and	r4,r4,r2
    efa4:	e17f6a17 	ldw	r5,-600(fp)
    efa8:	e0bf6b17 	ldw	r2,-596(fp)
    efac:	288ab03a 	or	r5,r5,r2
    efb0:	e0bf6c17 	ldw	r2,-592(fp)
    efb4:	2884703a 	and	r2,r5,r2
    efb8:	2084b03a 	or	r2,r4,r2
    efbc:	1885883a 	add	r2,r3,r2
    efc0:	e0bfc715 	stw	r2,-228(fp)
    efc4:	e0ff6d17 	ldw	r3,-588(fp)
    efc8:	e0bfc617 	ldw	r2,-232(fp)
    efcc:	1885883a 	add	r2,r3,r2
    efd0:	e0bf6d15 	stw	r2,-588(fp)
    efd4:	e0ffc617 	ldw	r3,-232(fp)
    efd8:	e0bfc717 	ldw	r2,-228(fp)
    efdc:	1885883a 	add	r2,r3,r2
    efe0:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));
    efe4:	e0ff6d17 	ldw	r3,-588(fp)
    efe8:	00800184 	movi	r2,6
    efec:	1886583a 	ror	r3,r3,r2
    eff0:	e13f6d17 	ldw	r4,-588(fp)
    eff4:	008002c4 	movi	r2,11
    eff8:	2084583a 	ror	r2,r4,r2
    effc:	1886f03a 	xor	r3,r3,r2
    f000:	e0bf6d17 	ldw	r2,-588(fp)
    f004:	100411fa 	roli	r2,r2,7
    f008:	1886f03a 	xor	r3,r3,r2
    f00c:	e0bf6817 	ldw	r2,-608(fp)
    f010:	1887883a 	add	r3,r3,r2
    f014:	e13f6617 	ldw	r4,-616(fp)
    f018:	e0bf6717 	ldw	r2,-612(fp)
    f01c:	2088f03a 	xor	r4,r4,r2
    f020:	e0bf6d17 	ldw	r2,-588(fp)
    f024:	2088703a 	and	r4,r4,r2
    f028:	e0bf6717 	ldw	r2,-612(fp)
    f02c:	2084f03a 	xor	r2,r4,r2
    f030:	1887883a 	add	r3,r3,r2
    f034:	e0bf7717 	ldw	r2,-548(fp)
    f038:	100813fa 	roli	r4,r2,15
    f03c:	e0bf7717 	ldw	r2,-548(fp)
    f040:	1004137a 	roli	r2,r2,13
    f044:	2088f03a 	xor	r4,r4,r2
    f048:	e0bf7717 	ldw	r2,-548(fp)
    f04c:	1004d2ba 	srli	r2,r2,10
    f050:	2088f03a 	xor	r4,r4,r2
    f054:	e0bf9817 	ldw	r2,-416(fp)
    f058:	2089883a 	add	r4,r4,r2
    f05c:	e17f8017 	ldw	r5,-512(fp)
    f060:	008001c4 	movi	r2,7
    f064:	288a583a 	ror	r5,r5,r2
    f068:	e0bf8017 	ldw	r2,-512(fp)
    f06c:	100413ba 	roli	r2,r2,14
    f070:	288af03a 	xor	r5,r5,r2
    f074:	e0bf8017 	ldw	r2,-512(fp)
    f078:	1004d0fa 	srli	r2,r2,3
    f07c:	2884f03a 	xor	r2,r5,r2
    f080:	2085883a 	add	r2,r4,r2
    f084:	e13f7d17 	ldw	r4,-524(fp)
    f088:	2085883a 	add	r2,r4,r2
    f08c:	e0bf7d15 	stw	r2,-524(fp)
    f090:	e0bf7d17 	ldw	r2,-524(fp)
    f094:	1887883a 	add	r3,r3,r2
    f098:	009d9ab4 	movhi	r2,30314
    f09c:	1082aec4 	addi	r2,r2,2747
    f0a0:	1885883a 	add	r2,r3,r2
    f0a4:	e0bfc815 	stw	r2,-224(fp)
    f0a8:	e0ff6917 	ldw	r3,-604(fp)
    f0ac:	00800084 	movi	r2,2
    f0b0:	1886583a 	ror	r3,r3,r2
    f0b4:	e13f6917 	ldw	r4,-604(fp)
    f0b8:	00800344 	movi	r2,13
    f0bc:	2084583a 	ror	r2,r4,r2
    f0c0:	1886f03a 	xor	r3,r3,r2
    f0c4:	e0bf6917 	ldw	r2,-604(fp)
    f0c8:	100412ba 	roli	r2,r2,10
    f0cc:	1886f03a 	xor	r3,r3,r2
    f0d0:	e13f6917 	ldw	r4,-604(fp)
    f0d4:	e0bf6a17 	ldw	r2,-600(fp)
    f0d8:	2088703a 	and	r4,r4,r2
    f0dc:	e17f6917 	ldw	r5,-604(fp)
    f0e0:	e0bf6a17 	ldw	r2,-600(fp)
    f0e4:	288ab03a 	or	r5,r5,r2
    f0e8:	e0bf6b17 	ldw	r2,-596(fp)
    f0ec:	2884703a 	and	r2,r5,r2
    f0f0:	2084b03a 	or	r2,r4,r2
    f0f4:	1885883a 	add	r2,r3,r2
    f0f8:	e0bfc915 	stw	r2,-220(fp)
    f0fc:	e0ff6c17 	ldw	r3,-592(fp)
    f100:	e0bfc817 	ldw	r2,-224(fp)
    f104:	1885883a 	add	r2,r3,r2
    f108:	e0bf6c15 	stw	r2,-592(fp)
    f10c:	e0ffc817 	ldw	r3,-224(fp)
    f110:	e0bfc917 	ldw	r2,-220(fp)
    f114:	1885883a 	add	r2,r3,r2
    f118:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));
    f11c:	e0ff6c17 	ldw	r3,-592(fp)
    f120:	00800184 	movi	r2,6
    f124:	1886583a 	ror	r3,r3,r2
    f128:	e13f6c17 	ldw	r4,-592(fp)
    f12c:	008002c4 	movi	r2,11
    f130:	2084583a 	ror	r2,r4,r2
    f134:	1886f03a 	xor	r3,r3,r2
    f138:	e0bf6c17 	ldw	r2,-592(fp)
    f13c:	100411fa 	roli	r2,r2,7
    f140:	1886f03a 	xor	r3,r3,r2
    f144:	e0bf6717 	ldw	r2,-612(fp)
    f148:	1887883a 	add	r3,r3,r2
    f14c:	e13f6d17 	ldw	r4,-588(fp)
    f150:	e0bf6617 	ldw	r2,-616(fp)
    f154:	2088f03a 	xor	r4,r4,r2
    f158:	e0bf6c17 	ldw	r2,-592(fp)
    f15c:	2088703a 	and	r4,r4,r2
    f160:	e0bf6617 	ldw	r2,-616(fp)
    f164:	2084f03a 	xor	r2,r4,r2
    f168:	1887883a 	add	r3,r3,r2
    f16c:	e0bf7a17 	ldw	r2,-536(fp)
    f170:	100813fa 	roli	r4,r2,15
    f174:	e0bf7a17 	ldw	r2,-536(fp)
    f178:	1004137a 	roli	r2,r2,13
    f17c:	2088f03a 	xor	r4,r4,r2
    f180:	e0bf7a17 	ldw	r2,-536(fp)
    f184:	1004d2ba 	srli	r2,r2,10
    f188:	2088f03a 	xor	r4,r4,r2
    f18c:	e0bf9b17 	ldw	r2,-404(fp)
    f190:	2089883a 	add	r4,r4,r2
    f194:	e17f8317 	ldw	r5,-500(fp)
    f198:	008001c4 	movi	r2,7
    f19c:	288a583a 	ror	r5,r5,r2
    f1a0:	e0bf8317 	ldw	r2,-500(fp)
    f1a4:	100413ba 	roli	r2,r2,14
    f1a8:	288af03a 	xor	r5,r5,r2
    f1ac:	e0bf8317 	ldw	r2,-500(fp)
    f1b0:	1004d0fa 	srli	r2,r2,3
    f1b4:	2884f03a 	xor	r2,r5,r2
    f1b8:	2085883a 	add	r2,r4,r2
    f1bc:	e13f8017 	ldw	r4,-512(fp)
    f1c0:	2085883a 	add	r2,r4,r2
    f1c4:	e0bf8015 	stw	r2,-512(fp)
    f1c8:	e0bf8017 	ldw	r2,-512(fp)
    f1cc:	1887883a 	add	r3,r3,r2
    f1d0:	00a070f4 	movhi	r2,33219
    f1d4:	10b24b84 	addi	r2,r2,-14034
    f1d8:	1885883a 	add	r2,r3,r2
    f1dc:	e0bfca15 	stw	r2,-216(fp)
    f1e0:	e0ff6817 	ldw	r3,-608(fp)
    f1e4:	00800084 	movi	r2,2
    f1e8:	1886583a 	ror	r3,r3,r2
    f1ec:	e13f6817 	ldw	r4,-608(fp)
    f1f0:	00800344 	movi	r2,13
    f1f4:	2084583a 	ror	r2,r4,r2
    f1f8:	1886f03a 	xor	r3,r3,r2
    f1fc:	e0bf6817 	ldw	r2,-608(fp)
    f200:	100412ba 	roli	r2,r2,10
    f204:	1886f03a 	xor	r3,r3,r2
    f208:	e13f6817 	ldw	r4,-608(fp)
    f20c:	e0bf6917 	ldw	r2,-604(fp)
    f210:	2088703a 	and	r4,r4,r2
    f214:	e17f6817 	ldw	r5,-608(fp)
    f218:	e0bf6917 	ldw	r2,-604(fp)
    f21c:	288ab03a 	or	r5,r5,r2
    f220:	e0bf6a17 	ldw	r2,-600(fp)
    f224:	2884703a 	and	r2,r5,r2
    f228:	2084b03a 	or	r2,r4,r2
    f22c:	1885883a 	add	r2,r3,r2
    f230:	e0bfcb15 	stw	r2,-212(fp)
    f234:	e0ff6b17 	ldw	r3,-596(fp)
    f238:	e0bfca17 	ldw	r2,-216(fp)
    f23c:	1885883a 	add	r2,r3,r2
    f240:	e0bf6b15 	stw	r2,-596(fp)
    f244:	e0ffca17 	ldw	r3,-216(fp)
    f248:	e0bfcb17 	ldw	r2,-212(fp)
    f24c:	1885883a 	add	r2,r3,r2
    f250:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));
    f254:	e0ff6b17 	ldw	r3,-596(fp)
    f258:	00800184 	movi	r2,6
    f25c:	1886583a 	ror	r3,r3,r2
    f260:	e13f6b17 	ldw	r4,-596(fp)
    f264:	008002c4 	movi	r2,11
    f268:	2084583a 	ror	r2,r4,r2
    f26c:	1886f03a 	xor	r3,r3,r2
    f270:	e0bf6b17 	ldw	r2,-596(fp)
    f274:	100411fa 	roli	r2,r2,7
    f278:	1886f03a 	xor	r3,r3,r2
    f27c:	e0bf6617 	ldw	r2,-616(fp)
    f280:	1887883a 	add	r3,r3,r2
    f284:	e13f6c17 	ldw	r4,-592(fp)
    f288:	e0bf6d17 	ldw	r2,-588(fp)
    f28c:	2088f03a 	xor	r4,r4,r2
    f290:	e0bf6b17 	ldw	r2,-596(fp)
    f294:	2088703a 	and	r4,r4,r2
    f298:	e0bf6d17 	ldw	r2,-588(fp)
    f29c:	2084f03a 	xor	r2,r4,r2
    f2a0:	1887883a 	add	r3,r3,r2
    f2a4:	e0bf7d17 	ldw	r2,-524(fp)
    f2a8:	100813fa 	roli	r4,r2,15
    f2ac:	e0bf7d17 	ldw	r2,-524(fp)
    f2b0:	1004137a 	roli	r2,r2,13
    f2b4:	2088f03a 	xor	r4,r4,r2
    f2b8:	e0bf7d17 	ldw	r2,-524(fp)
    f2bc:	1004d2ba 	srli	r2,r2,10
    f2c0:	2088f03a 	xor	r4,r4,r2
    f2c4:	e0bf6e17 	ldw	r2,-584(fp)
    f2c8:	2089883a 	add	r4,r4,r2
    f2cc:	e17f8617 	ldw	r5,-488(fp)
    f2d0:	008001c4 	movi	r2,7
    f2d4:	288a583a 	ror	r5,r5,r2
    f2d8:	e0bf8617 	ldw	r2,-488(fp)
    f2dc:	100413ba 	roli	r2,r2,14
    f2e0:	288af03a 	xor	r5,r5,r2
    f2e4:	e0bf8617 	ldw	r2,-488(fp)
    f2e8:	1004d0fa 	srli	r2,r2,3
    f2ec:	2884f03a 	xor	r2,r5,r2
    f2f0:	2085883a 	add	r2,r4,r2
    f2f4:	e13f8317 	ldw	r4,-500(fp)
    f2f8:	2085883a 	add	r2,r4,r2
    f2fc:	e0bf8315 	stw	r2,-500(fp)
    f300:	e0bf8317 	ldw	r2,-500(fp)
    f304:	1887883a 	add	r3,r3,r2
    f308:	00a49cb4 	movhi	r2,37490
    f30c:	108b2144 	addi	r2,r2,11397
    f310:	1885883a 	add	r2,r3,r2
    f314:	e0bfcc15 	stw	r2,-208(fp)
    f318:	e0ff6717 	ldw	r3,-612(fp)
    f31c:	00800084 	movi	r2,2
    f320:	1886583a 	ror	r3,r3,r2
    f324:	e13f6717 	ldw	r4,-612(fp)
    f328:	00800344 	movi	r2,13
    f32c:	2084583a 	ror	r2,r4,r2
    f330:	1886f03a 	xor	r3,r3,r2
    f334:	e0bf6717 	ldw	r2,-612(fp)
    f338:	100412ba 	roli	r2,r2,10
    f33c:	1886f03a 	xor	r3,r3,r2
    f340:	e13f6717 	ldw	r4,-612(fp)
    f344:	e0bf6817 	ldw	r2,-608(fp)
    f348:	2088703a 	and	r4,r4,r2
    f34c:	e17f6717 	ldw	r5,-612(fp)
    f350:	e0bf6817 	ldw	r2,-608(fp)
    f354:	288ab03a 	or	r5,r5,r2
    f358:	e0bf6917 	ldw	r2,-604(fp)
    f35c:	2884703a 	and	r2,r5,r2
    f360:	2084b03a 	or	r2,r4,r2
    f364:	1885883a 	add	r2,r3,r2
    f368:	e0bfcd15 	stw	r2,-204(fp)
    f36c:	e0ff6a17 	ldw	r3,-600(fp)
    f370:	e0bfcc17 	ldw	r2,-208(fp)
    f374:	1885883a 	add	r2,r3,r2
    f378:	e0bf6a15 	stw	r2,-600(fp)
    f37c:	e0ffcc17 	ldw	r3,-208(fp)
    f380:	e0bfcd17 	ldw	r2,-204(fp)
    f384:	1885883a 	add	r2,r3,r2
    f388:	e0bf6615 	stw	r2,-616(fp)
    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));
    f38c:	e0ff6a17 	ldw	r3,-600(fp)
    f390:	00800184 	movi	r2,6
    f394:	1886583a 	ror	r3,r3,r2
    f398:	e13f6a17 	ldw	r4,-600(fp)
    f39c:	008002c4 	movi	r2,11
    f3a0:	2084583a 	ror	r2,r4,r2
    f3a4:	1886f03a 	xor	r3,r3,r2
    f3a8:	e0bf6a17 	ldw	r2,-600(fp)
    f3ac:	100411fa 	roli	r2,r2,7
    f3b0:	1886f03a 	xor	r3,r3,r2
    f3b4:	e0bf6d17 	ldw	r2,-588(fp)
    f3b8:	1887883a 	add	r3,r3,r2
    f3bc:	e13f6b17 	ldw	r4,-596(fp)
    f3c0:	e0bf6c17 	ldw	r2,-592(fp)
    f3c4:	2088f03a 	xor	r4,r4,r2
    f3c8:	e0bf6a17 	ldw	r2,-600(fp)
    f3cc:	2088703a 	and	r4,r4,r2
    f3d0:	e0bf6c17 	ldw	r2,-592(fp)
    f3d4:	2084f03a 	xor	r2,r4,r2
    f3d8:	1887883a 	add	r3,r3,r2
    f3dc:	e0bf8017 	ldw	r2,-512(fp)
    f3e0:	100813fa 	roli	r4,r2,15
    f3e4:	e0bf8017 	ldw	r2,-512(fp)
    f3e8:	1004137a 	roli	r2,r2,13
    f3ec:	2088f03a 	xor	r4,r4,r2
    f3f0:	e0bf8017 	ldw	r2,-512(fp)
    f3f4:	1004d2ba 	srli	r2,r2,10
    f3f8:	2088f03a 	xor	r4,r4,r2
    f3fc:	e0bf7117 	ldw	r2,-572(fp)
    f400:	2089883a 	add	r4,r4,r2
    f404:	e17f8917 	ldw	r5,-476(fp)
    f408:	008001c4 	movi	r2,7
    f40c:	288a583a 	ror	r5,r5,r2
    f410:	e0bf8917 	ldw	r2,-476(fp)
    f414:	100413ba 	roli	r2,r2,14
    f418:	288af03a 	xor	r5,r5,r2
    f41c:	e0bf8917 	ldw	r2,-476(fp)
    f420:	1004d0fa 	srli	r2,r2,3
    f424:	2884f03a 	xor	r2,r5,r2
    f428:	2085883a 	add	r2,r4,r2
    f42c:	e13f8617 	ldw	r4,-488(fp)
    f430:	2085883a 	add	r2,r4,r2
    f434:	e0bf8615 	stw	r2,-488(fp)
    f438:	e0bf8617 	ldw	r2,-488(fp)
    f43c:	1887883a 	add	r3,r3,r2
    f440:	00a8b034 	movhi	r2,41664
    f444:	10ba2844 	addi	r2,r2,-5983
    f448:	1885883a 	add	r2,r3,r2
    f44c:	e0bfce15 	stw	r2,-200(fp)
    f450:	e0ff6617 	ldw	r3,-616(fp)
    f454:	00800084 	movi	r2,2
    f458:	1886583a 	ror	r3,r3,r2
    f45c:	e13f6617 	ldw	r4,-616(fp)
    f460:	00800344 	movi	r2,13
    f464:	2084583a 	ror	r2,r4,r2
    f468:	1886f03a 	xor	r3,r3,r2
    f46c:	e0bf6617 	ldw	r2,-616(fp)
    f470:	100412ba 	roli	r2,r2,10
    f474:	1886f03a 	xor	r3,r3,r2
    f478:	e13f6617 	ldw	r4,-616(fp)
    f47c:	e0bf6717 	ldw	r2,-612(fp)
    f480:	2088703a 	and	r4,r4,r2
    f484:	e17f6617 	ldw	r5,-616(fp)
    f488:	e0bf6717 	ldw	r2,-612(fp)
    f48c:	288ab03a 	or	r5,r5,r2
    f490:	e0bf6817 	ldw	r2,-608(fp)
    f494:	2884703a 	and	r2,r5,r2
    f498:	2084b03a 	or	r2,r4,r2
    f49c:	1885883a 	add	r2,r3,r2
    f4a0:	e0bfcf15 	stw	r2,-196(fp)
    f4a4:	e0ff6917 	ldw	r3,-604(fp)
    f4a8:	e0bfce17 	ldw	r2,-200(fp)
    f4ac:	1885883a 	add	r2,r3,r2
    f4b0:	e0bf6915 	stw	r2,-604(fp)
    f4b4:	e0ffce17 	ldw	r3,-200(fp)
    f4b8:	e0bfcf17 	ldw	r2,-196(fp)
    f4bc:	1885883a 	add	r2,r3,r2
    f4c0:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));
    f4c4:	e0ff6917 	ldw	r3,-604(fp)
    f4c8:	00800184 	movi	r2,6
    f4cc:	1886583a 	ror	r3,r3,r2
    f4d0:	e13f6917 	ldw	r4,-604(fp)
    f4d4:	008002c4 	movi	r2,11
    f4d8:	2084583a 	ror	r2,r4,r2
    f4dc:	1886f03a 	xor	r3,r3,r2
    f4e0:	e0bf6917 	ldw	r2,-604(fp)
    f4e4:	100411fa 	roli	r2,r2,7
    f4e8:	1886f03a 	xor	r3,r3,r2
    f4ec:	e0bf6c17 	ldw	r2,-592(fp)
    f4f0:	1887883a 	add	r3,r3,r2
    f4f4:	e13f6a17 	ldw	r4,-600(fp)
    f4f8:	e0bf6b17 	ldw	r2,-596(fp)
    f4fc:	2088f03a 	xor	r4,r4,r2
    f500:	e0bf6917 	ldw	r2,-604(fp)
    f504:	2088703a 	and	r4,r4,r2
    f508:	e0bf6b17 	ldw	r2,-596(fp)
    f50c:	2084f03a 	xor	r2,r4,r2
    f510:	1887883a 	add	r3,r3,r2
    f514:	e0bf8317 	ldw	r2,-500(fp)
    f518:	100813fa 	roli	r4,r2,15
    f51c:	e0bf8317 	ldw	r2,-500(fp)
    f520:	1004137a 	roli	r2,r2,13
    f524:	2088f03a 	xor	r4,r4,r2
    f528:	e0bf8317 	ldw	r2,-500(fp)
    f52c:	1004d2ba 	srli	r2,r2,10
    f530:	2088f03a 	xor	r4,r4,r2
    f534:	e0bf7417 	ldw	r2,-560(fp)
    f538:	2089883a 	add	r4,r4,r2
    f53c:	e17f8c17 	ldw	r5,-464(fp)
    f540:	008001c4 	movi	r2,7
    f544:	288a583a 	ror	r5,r5,r2
    f548:	e0bf8c17 	ldw	r2,-464(fp)
    f54c:	100413ba 	roli	r2,r2,14
    f550:	288af03a 	xor	r5,r5,r2
    f554:	e0bf8c17 	ldw	r2,-464(fp)
    f558:	1004d0fa 	srli	r2,r2,3
    f55c:	2884f03a 	xor	r2,r5,r2
    f560:	2085883a 	add	r2,r4,r2
    f564:	e13f8917 	ldw	r4,-476(fp)
    f568:	2085883a 	add	r2,r4,r2
    f56c:	e0bf8915 	stw	r2,-476(fp)
    f570:	e0bf8917 	ldw	r2,-476(fp)
    f574:	1887883a 	add	r3,r3,r2
    f578:	00aa06b4 	movhi	r2,43034
    f57c:	109992c4 	addi	r2,r2,26187
    f580:	1885883a 	add	r2,r3,r2
    f584:	e0bfd015 	stw	r2,-192(fp)
    f588:	e0ff6d17 	ldw	r3,-588(fp)
    f58c:	00800084 	movi	r2,2
    f590:	1886583a 	ror	r3,r3,r2
    f594:	e13f6d17 	ldw	r4,-588(fp)
    f598:	00800344 	movi	r2,13
    f59c:	2084583a 	ror	r2,r4,r2
    f5a0:	1886f03a 	xor	r3,r3,r2
    f5a4:	e0bf6d17 	ldw	r2,-588(fp)
    f5a8:	100412ba 	roli	r2,r2,10
    f5ac:	1886f03a 	xor	r3,r3,r2
    f5b0:	e13f6d17 	ldw	r4,-588(fp)
    f5b4:	e0bf6617 	ldw	r2,-616(fp)
    f5b8:	2088703a 	and	r4,r4,r2
    f5bc:	e17f6d17 	ldw	r5,-588(fp)
    f5c0:	e0bf6617 	ldw	r2,-616(fp)
    f5c4:	288ab03a 	or	r5,r5,r2
    f5c8:	e0bf6717 	ldw	r2,-612(fp)
    f5cc:	2884703a 	and	r2,r5,r2
    f5d0:	2084b03a 	or	r2,r4,r2
    f5d4:	1885883a 	add	r2,r3,r2
    f5d8:	e0bfd115 	stw	r2,-188(fp)
    f5dc:	e0ff6817 	ldw	r3,-608(fp)
    f5e0:	e0bfd017 	ldw	r2,-192(fp)
    f5e4:	1885883a 	add	r2,r3,r2
    f5e8:	e0bf6815 	stw	r2,-608(fp)
    f5ec:	e0ffd017 	ldw	r3,-192(fp)
    f5f0:	e0bfd117 	ldw	r2,-188(fp)
    f5f4:	1885883a 	add	r2,r3,r2
    f5f8:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));
    f5fc:	e0ff6817 	ldw	r3,-608(fp)
    f600:	00800184 	movi	r2,6
    f604:	1886583a 	ror	r3,r3,r2
    f608:	e13f6817 	ldw	r4,-608(fp)
    f60c:	008002c4 	movi	r2,11
    f610:	2084583a 	ror	r2,r4,r2
    f614:	1886f03a 	xor	r3,r3,r2
    f618:	e0bf6817 	ldw	r2,-608(fp)
    f61c:	100411fa 	roli	r2,r2,7
    f620:	1886f03a 	xor	r3,r3,r2
    f624:	e0bf6b17 	ldw	r2,-596(fp)
    f628:	1887883a 	add	r3,r3,r2
    f62c:	e13f6917 	ldw	r4,-604(fp)
    f630:	e0bf6a17 	ldw	r2,-600(fp)
    f634:	2088f03a 	xor	r4,r4,r2
    f638:	e0bf6817 	ldw	r2,-608(fp)
    f63c:	2088703a 	and	r4,r4,r2
    f640:	e0bf6a17 	ldw	r2,-600(fp)
    f644:	2084f03a 	xor	r2,r4,r2
    f648:	1887883a 	add	r3,r3,r2
    f64c:	e0bf8617 	ldw	r2,-488(fp)
    f650:	100813fa 	roli	r4,r2,15
    f654:	e0bf8617 	ldw	r2,-488(fp)
    f658:	1004137a 	roli	r2,r2,13
    f65c:	2088f03a 	xor	r4,r4,r2
    f660:	e0bf8617 	ldw	r2,-488(fp)
    f664:	1004d2ba 	srli	r2,r2,10
    f668:	2088f03a 	xor	r4,r4,r2
    f66c:	e0bf7717 	ldw	r2,-548(fp)
    f670:	2089883a 	add	r4,r4,r2
    f674:	e17f8f17 	ldw	r5,-452(fp)
    f678:	008001c4 	movi	r2,7
    f67c:	288a583a 	ror	r5,r5,r2
    f680:	e0bf8f17 	ldw	r2,-452(fp)
    f684:	100413ba 	roli	r2,r2,14
    f688:	288af03a 	xor	r5,r5,r2
    f68c:	e0bf8f17 	ldw	r2,-452(fp)
    f690:	1004d0fa 	srli	r2,r2,3
    f694:	2884f03a 	xor	r2,r5,r2
    f698:	2085883a 	add	r2,r4,r2
    f69c:	e13f8c17 	ldw	r4,-464(fp)
    f6a0:	2085883a 	add	r2,r4,r2
    f6a4:	e0bf8c15 	stw	r2,-464(fp)
    f6a8:	e0bf8c17 	ldw	r2,-464(fp)
    f6ac:	1887883a 	add	r3,r3,r2
    f6b0:	00b09334 	movhi	r2,49740
    f6b4:	10a2dc04 	addi	r2,r2,-29840
    f6b8:	1885883a 	add	r2,r3,r2
    f6bc:	e0bfd215 	stw	r2,-184(fp)
    f6c0:	e0ff6c17 	ldw	r3,-592(fp)
    f6c4:	00800084 	movi	r2,2
    f6c8:	1886583a 	ror	r3,r3,r2
    f6cc:	e13f6c17 	ldw	r4,-592(fp)
    f6d0:	00800344 	movi	r2,13
    f6d4:	2084583a 	ror	r2,r4,r2
    f6d8:	1886f03a 	xor	r3,r3,r2
    f6dc:	e0bf6c17 	ldw	r2,-592(fp)
    f6e0:	100412ba 	roli	r2,r2,10
    f6e4:	1886f03a 	xor	r3,r3,r2
    f6e8:	e13f6c17 	ldw	r4,-592(fp)
    f6ec:	e0bf6d17 	ldw	r2,-588(fp)
    f6f0:	2088703a 	and	r4,r4,r2
    f6f4:	e17f6c17 	ldw	r5,-592(fp)
    f6f8:	e0bf6d17 	ldw	r2,-588(fp)
    f6fc:	288ab03a 	or	r5,r5,r2
    f700:	e0bf6617 	ldw	r2,-616(fp)
    f704:	2884703a 	and	r2,r5,r2
    f708:	2084b03a 	or	r2,r4,r2
    f70c:	1885883a 	add	r2,r3,r2
    f710:	e0bfd315 	stw	r2,-180(fp)
    f714:	e0ff6717 	ldw	r3,-612(fp)
    f718:	e0bfd217 	ldw	r2,-184(fp)
    f71c:	1885883a 	add	r2,r3,r2
    f720:	e0bf6715 	stw	r2,-612(fp)
    f724:	e0ffd217 	ldw	r3,-184(fp)
    f728:	e0bfd317 	ldw	r2,-180(fp)
    f72c:	1885883a 	add	r2,r3,r2
    f730:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));
    f734:	e0ff6717 	ldw	r3,-612(fp)
    f738:	00800184 	movi	r2,6
    f73c:	1886583a 	ror	r3,r3,r2
    f740:	e13f6717 	ldw	r4,-612(fp)
    f744:	008002c4 	movi	r2,11
    f748:	2084583a 	ror	r2,r4,r2
    f74c:	1886f03a 	xor	r3,r3,r2
    f750:	e0bf6717 	ldw	r2,-612(fp)
    f754:	100411fa 	roli	r2,r2,7
    f758:	1886f03a 	xor	r3,r3,r2
    f75c:	e0bf6a17 	ldw	r2,-600(fp)
    f760:	1887883a 	add	r3,r3,r2
    f764:	e13f6817 	ldw	r4,-608(fp)
    f768:	e0bf6917 	ldw	r2,-604(fp)
    f76c:	2088f03a 	xor	r4,r4,r2
    f770:	e0bf6717 	ldw	r2,-612(fp)
    f774:	2088703a 	and	r4,r4,r2
    f778:	e0bf6917 	ldw	r2,-604(fp)
    f77c:	2084f03a 	xor	r2,r4,r2
    f780:	1887883a 	add	r3,r3,r2
    f784:	e0bf8917 	ldw	r2,-476(fp)
    f788:	100813fa 	roli	r4,r2,15
    f78c:	e0bf8917 	ldw	r2,-476(fp)
    f790:	1004137a 	roli	r2,r2,13
    f794:	2088f03a 	xor	r4,r4,r2
    f798:	e0bf8917 	ldw	r2,-476(fp)
    f79c:	1004d2ba 	srli	r2,r2,10
    f7a0:	2088f03a 	xor	r4,r4,r2
    f7a4:	e0bf7a17 	ldw	r2,-536(fp)
    f7a8:	2089883a 	add	r4,r4,r2
    f7ac:	e17f9217 	ldw	r5,-440(fp)
    f7b0:	008001c4 	movi	r2,7
    f7b4:	288a583a 	ror	r5,r5,r2
    f7b8:	e0bf9217 	ldw	r2,-440(fp)
    f7bc:	100413ba 	roli	r2,r2,14
    f7c0:	288af03a 	xor	r5,r5,r2
    f7c4:	e0bf9217 	ldw	r2,-440(fp)
    f7c8:	1004d0fa 	srli	r2,r2,3
    f7cc:	2884f03a 	xor	r2,r5,r2
    f7d0:	2085883a 	add	r2,r4,r2
    f7d4:	e13f8f17 	ldw	r4,-452(fp)
    f7d8:	2085883a 	add	r2,r4,r2
    f7dc:	e0bf8f15 	stw	r2,-452(fp)
    f7e0:	e0bf8f17 	ldw	r2,-452(fp)
    f7e4:	1887883a 	add	r3,r3,r2
    f7e8:	00b1db34 	movhi	r2,51052
    f7ec:	109468c4 	addi	r2,r2,20899
    f7f0:	1885883a 	add	r2,r3,r2
    f7f4:	e0bfd415 	stw	r2,-176(fp)
    f7f8:	e0ff6b17 	ldw	r3,-596(fp)
    f7fc:	00800084 	movi	r2,2
    f800:	1886583a 	ror	r3,r3,r2
    f804:	e13f6b17 	ldw	r4,-596(fp)
    f808:	00800344 	movi	r2,13
    f80c:	2084583a 	ror	r2,r4,r2
    f810:	1886f03a 	xor	r3,r3,r2
    f814:	e0bf6b17 	ldw	r2,-596(fp)
    f818:	100412ba 	roli	r2,r2,10
    f81c:	1886f03a 	xor	r3,r3,r2
    f820:	e13f6b17 	ldw	r4,-596(fp)
    f824:	e0bf6c17 	ldw	r2,-592(fp)
    f828:	2088703a 	and	r4,r4,r2
    f82c:	e17f6b17 	ldw	r5,-596(fp)
    f830:	e0bf6c17 	ldw	r2,-592(fp)
    f834:	288ab03a 	or	r5,r5,r2
    f838:	e0bf6d17 	ldw	r2,-588(fp)
    f83c:	2884703a 	and	r2,r5,r2
    f840:	2084b03a 	or	r2,r4,r2
    f844:	1885883a 	add	r2,r3,r2
    f848:	e0bfd515 	stw	r2,-172(fp)
    f84c:	e0ff6617 	ldw	r3,-616(fp)
    f850:	e0bfd417 	ldw	r2,-176(fp)
    f854:	1885883a 	add	r2,r3,r2
    f858:	e0bf6615 	stw	r2,-616(fp)
    f85c:	e0ffd417 	ldw	r3,-176(fp)
    f860:	e0bfd517 	ldw	r2,-172(fp)
    f864:	1885883a 	add	r2,r3,r2
    f868:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));
    f86c:	e0ff6617 	ldw	r3,-616(fp)
    f870:	00800184 	movi	r2,6
    f874:	1886583a 	ror	r3,r3,r2
    f878:	e13f6617 	ldw	r4,-616(fp)
    f87c:	008002c4 	movi	r2,11
    f880:	2084583a 	ror	r2,r4,r2
    f884:	1886f03a 	xor	r3,r3,r2
    f888:	e0bf6617 	ldw	r2,-616(fp)
    f88c:	100411fa 	roli	r2,r2,7
    f890:	1886f03a 	xor	r3,r3,r2
    f894:	e0bf6917 	ldw	r2,-604(fp)
    f898:	1887883a 	add	r3,r3,r2
    f89c:	e13f6717 	ldw	r4,-612(fp)
    f8a0:	e0bf6817 	ldw	r2,-608(fp)
    f8a4:	2088f03a 	xor	r4,r4,r2
    f8a8:	e0bf6617 	ldw	r2,-616(fp)
    f8ac:	2088703a 	and	r4,r4,r2
    f8b0:	e0bf6817 	ldw	r2,-608(fp)
    f8b4:	2084f03a 	xor	r2,r4,r2
    f8b8:	1887883a 	add	r3,r3,r2
    f8bc:	e0bf8c17 	ldw	r2,-464(fp)
    f8c0:	100813fa 	roli	r4,r2,15
    f8c4:	e0bf8c17 	ldw	r2,-464(fp)
    f8c8:	1004137a 	roli	r2,r2,13
    f8cc:	2088f03a 	xor	r4,r4,r2
    f8d0:	e0bf8c17 	ldw	r2,-464(fp)
    f8d4:	1004d2ba 	srli	r2,r2,10
    f8d8:	2088f03a 	xor	r4,r4,r2
    f8dc:	e0bf7d17 	ldw	r2,-524(fp)
    f8e0:	2089883a 	add	r4,r4,r2
    f8e4:	e17f9517 	ldw	r5,-428(fp)
    f8e8:	008001c4 	movi	r2,7
    f8ec:	288a583a 	ror	r5,r5,r2
    f8f0:	e0bf9517 	ldw	r2,-428(fp)
    f8f4:	100413ba 	roli	r2,r2,14
    f8f8:	288af03a 	xor	r5,r5,r2
    f8fc:	e0bf9517 	ldw	r2,-428(fp)
    f900:	1004d0fa 	srli	r2,r2,3
    f904:	2884f03a 	xor	r2,r5,r2
    f908:	2085883a 	add	r2,r4,r2
    f90c:	e13f9217 	ldw	r4,-440(fp)
    f910:	2085883a 	add	r2,r4,r2
    f914:	e0bf9215 	stw	r2,-440(fp)
    f918:	e0bf9217 	ldw	r2,-440(fp)
    f91c:	1887883a 	add	r3,r3,r2
    f920:	00b464f4 	movhi	r2,53651
    f924:	10ba0644 	addi	r2,r2,-6119
    f928:	1885883a 	add	r2,r3,r2
    f92c:	e0bfd615 	stw	r2,-168(fp)
    f930:	e0ff6a17 	ldw	r3,-600(fp)
    f934:	00800084 	movi	r2,2
    f938:	1886583a 	ror	r3,r3,r2
    f93c:	e13f6a17 	ldw	r4,-600(fp)
    f940:	00800344 	movi	r2,13
    f944:	2084583a 	ror	r2,r4,r2
    f948:	1886f03a 	xor	r3,r3,r2
    f94c:	e0bf6a17 	ldw	r2,-600(fp)
    f950:	100412ba 	roli	r2,r2,10
    f954:	1886f03a 	xor	r3,r3,r2
    f958:	e13f6a17 	ldw	r4,-600(fp)
    f95c:	e0bf6b17 	ldw	r2,-596(fp)
    f960:	2088703a 	and	r4,r4,r2
    f964:	e17f6a17 	ldw	r5,-600(fp)
    f968:	e0bf6b17 	ldw	r2,-596(fp)
    f96c:	288ab03a 	or	r5,r5,r2
    f970:	e0bf6c17 	ldw	r2,-592(fp)
    f974:	2884703a 	and	r2,r5,r2
    f978:	2084b03a 	or	r2,r4,r2
    f97c:	1885883a 	add	r2,r3,r2
    f980:	e0bfd715 	stw	r2,-164(fp)
    f984:	e0ff6d17 	ldw	r3,-588(fp)
    f988:	e0bfd617 	ldw	r2,-168(fp)
    f98c:	1885883a 	add	r2,r3,r2
    f990:	e0bf6d15 	stw	r2,-588(fp)
    f994:	e0ffd617 	ldw	r3,-168(fp)
    f998:	e0bfd717 	ldw	r2,-164(fp)
    f99c:	1885883a 	add	r2,r3,r2
    f9a0:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));
    f9a4:	e0ff6d17 	ldw	r3,-588(fp)
    f9a8:	00800184 	movi	r2,6
    f9ac:	1886583a 	ror	r3,r3,r2
    f9b0:	e13f6d17 	ldw	r4,-588(fp)
    f9b4:	008002c4 	movi	r2,11
    f9b8:	2084583a 	ror	r2,r4,r2
    f9bc:	1886f03a 	xor	r3,r3,r2
    f9c0:	e0bf6d17 	ldw	r2,-588(fp)
    f9c4:	100411fa 	roli	r2,r2,7
    f9c8:	1886f03a 	xor	r3,r3,r2
    f9cc:	e0bf6817 	ldw	r2,-608(fp)
    f9d0:	1887883a 	add	r3,r3,r2
    f9d4:	e13f6617 	ldw	r4,-616(fp)
    f9d8:	e0bf6717 	ldw	r2,-612(fp)
    f9dc:	2088f03a 	xor	r4,r4,r2
    f9e0:	e0bf6d17 	ldw	r2,-588(fp)
    f9e4:	2088703a 	and	r4,r4,r2
    f9e8:	e0bf6717 	ldw	r2,-612(fp)
    f9ec:	2084f03a 	xor	r2,r4,r2
    f9f0:	1887883a 	add	r3,r3,r2
    f9f4:	e0bf8f17 	ldw	r2,-452(fp)
    f9f8:	100813fa 	roli	r4,r2,15
    f9fc:	e0bf8f17 	ldw	r2,-452(fp)
    fa00:	1004137a 	roli	r2,r2,13
    fa04:	2088f03a 	xor	r4,r4,r2
    fa08:	e0bf8f17 	ldw	r2,-452(fp)
    fa0c:	1004d2ba 	srli	r2,r2,10
    fa10:	2088f03a 	xor	r4,r4,r2
    fa14:	e0bf8017 	ldw	r2,-512(fp)
    fa18:	2089883a 	add	r4,r4,r2
    fa1c:	e17f9817 	ldw	r5,-416(fp)
    fa20:	008001c4 	movi	r2,7
    fa24:	288a583a 	ror	r5,r5,r2
    fa28:	e0bf9817 	ldw	r2,-416(fp)
    fa2c:	100413ba 	roli	r2,r2,14
    fa30:	288af03a 	xor	r5,r5,r2
    fa34:	e0bf9817 	ldw	r2,-416(fp)
    fa38:	1004d0fa 	srli	r2,r2,3
    fa3c:	2884f03a 	xor	r2,r5,r2
    fa40:	2085883a 	add	r2,r4,r2
    fa44:	e13f9517 	ldw	r4,-428(fp)
    fa48:	2085883a 	add	r2,r4,r2
    fa4c:	e0bf9515 	stw	r2,-428(fp)
    fa50:	e0bf9517 	ldw	r2,-428(fp)
    fa54:	1887883a 	add	r3,r3,r2
    fa58:	00b5a674 	movhi	r2,54937
    fa5c:	10818904 	addi	r2,r2,1572
    fa60:	1885883a 	add	r2,r3,r2
    fa64:	e0bfd815 	stw	r2,-160(fp)
    fa68:	e0ff6917 	ldw	r3,-604(fp)
    fa6c:	00800084 	movi	r2,2
    fa70:	1886583a 	ror	r3,r3,r2
    fa74:	e13f6917 	ldw	r4,-604(fp)
    fa78:	00800344 	movi	r2,13
    fa7c:	2084583a 	ror	r2,r4,r2
    fa80:	1886f03a 	xor	r3,r3,r2
    fa84:	e0bf6917 	ldw	r2,-604(fp)
    fa88:	100412ba 	roli	r2,r2,10
    fa8c:	1886f03a 	xor	r3,r3,r2
    fa90:	e13f6917 	ldw	r4,-604(fp)
    fa94:	e0bf6a17 	ldw	r2,-600(fp)
    fa98:	2088703a 	and	r4,r4,r2
    fa9c:	e17f6917 	ldw	r5,-604(fp)
    faa0:	e0bf6a17 	ldw	r2,-600(fp)
    faa4:	288ab03a 	or	r5,r5,r2
    faa8:	e0bf6b17 	ldw	r2,-596(fp)
    faac:	2884703a 	and	r2,r5,r2
    fab0:	2084b03a 	or	r2,r4,r2
    fab4:	1885883a 	add	r2,r3,r2
    fab8:	e0bfd915 	stw	r2,-156(fp)
    fabc:	e0ff6c17 	ldw	r3,-592(fp)
    fac0:	e0bfd817 	ldw	r2,-160(fp)
    fac4:	1885883a 	add	r2,r3,r2
    fac8:	e0bf6c15 	stw	r2,-592(fp)
    facc:	e0ffd817 	ldw	r3,-160(fp)
    fad0:	e0bfd917 	ldw	r2,-156(fp)
    fad4:	1885883a 	add	r2,r3,r2
    fad8:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));
    fadc:	e0ff6c17 	ldw	r3,-592(fp)
    fae0:	00800184 	movi	r2,6
    fae4:	1886583a 	ror	r3,r3,r2
    fae8:	e13f6c17 	ldw	r4,-592(fp)
    faec:	008002c4 	movi	r2,11
    faf0:	2084583a 	ror	r2,r4,r2
    faf4:	1886f03a 	xor	r3,r3,r2
    faf8:	e0bf6c17 	ldw	r2,-592(fp)
    fafc:	100411fa 	roli	r2,r2,7
    fb00:	1886f03a 	xor	r3,r3,r2
    fb04:	e0bf6717 	ldw	r2,-612(fp)
    fb08:	1887883a 	add	r3,r3,r2
    fb0c:	e13f6d17 	ldw	r4,-588(fp)
    fb10:	e0bf6617 	ldw	r2,-616(fp)
    fb14:	2088f03a 	xor	r4,r4,r2
    fb18:	e0bf6c17 	ldw	r2,-592(fp)
    fb1c:	2088703a 	and	r4,r4,r2
    fb20:	e0bf6617 	ldw	r2,-616(fp)
    fb24:	2084f03a 	xor	r2,r4,r2
    fb28:	1887883a 	add	r3,r3,r2
    fb2c:	e0bf9217 	ldw	r2,-440(fp)
    fb30:	100813fa 	roli	r4,r2,15
    fb34:	e0bf9217 	ldw	r2,-440(fp)
    fb38:	1004137a 	roli	r2,r2,13
    fb3c:	2088f03a 	xor	r4,r4,r2
    fb40:	e0bf9217 	ldw	r2,-440(fp)
    fb44:	1004d2ba 	srli	r2,r2,10
    fb48:	2088f03a 	xor	r4,r4,r2
    fb4c:	e0bf8317 	ldw	r2,-500(fp)
    fb50:	2089883a 	add	r4,r4,r2
    fb54:	e17f9b17 	ldw	r5,-404(fp)
    fb58:	008001c4 	movi	r2,7
    fb5c:	288a583a 	ror	r5,r5,r2
    fb60:	e0bf9b17 	ldw	r2,-404(fp)
    fb64:	100413ba 	roli	r2,r2,14
    fb68:	288af03a 	xor	r5,r5,r2
    fb6c:	e0bf9b17 	ldw	r2,-404(fp)
    fb70:	1004d0fa 	srli	r2,r2,3
    fb74:	2884f03a 	xor	r2,r5,r2
    fb78:	2085883a 	add	r2,r4,r2
    fb7c:	e13f9817 	ldw	r4,-416(fp)
    fb80:	2085883a 	add	r2,r4,r2
    fb84:	e0bf9815 	stw	r2,-416(fp)
    fb88:	e0bf9817 	ldw	r2,-416(fp)
    fb8c:	1887883a 	add	r3,r3,r2
    fb90:	00bd03b4 	movhi	r2,62478
    fb94:	108d6144 	addi	r2,r2,13701
    fb98:	1885883a 	add	r2,r3,r2
    fb9c:	e0bfda15 	stw	r2,-152(fp)
    fba0:	e0ff6817 	ldw	r3,-608(fp)
    fba4:	00800084 	movi	r2,2
    fba8:	1886583a 	ror	r3,r3,r2
    fbac:	e13f6817 	ldw	r4,-608(fp)
    fbb0:	00800344 	movi	r2,13
    fbb4:	2084583a 	ror	r2,r4,r2
    fbb8:	1886f03a 	xor	r3,r3,r2
    fbbc:	e0bf6817 	ldw	r2,-608(fp)
    fbc0:	100412ba 	roli	r2,r2,10
    fbc4:	1886f03a 	xor	r3,r3,r2
    fbc8:	e13f6817 	ldw	r4,-608(fp)
    fbcc:	e0bf6917 	ldw	r2,-604(fp)
    fbd0:	2088703a 	and	r4,r4,r2
    fbd4:	e17f6817 	ldw	r5,-608(fp)
    fbd8:	e0bf6917 	ldw	r2,-604(fp)
    fbdc:	288ab03a 	or	r5,r5,r2
    fbe0:	e0bf6a17 	ldw	r2,-600(fp)
    fbe4:	2884703a 	and	r2,r5,r2
    fbe8:	2084b03a 	or	r2,r4,r2
    fbec:	1885883a 	add	r2,r3,r2
    fbf0:	e0bfdb15 	stw	r2,-148(fp)
    fbf4:	e0ff6b17 	ldw	r3,-596(fp)
    fbf8:	e0bfda17 	ldw	r2,-152(fp)
    fbfc:	1885883a 	add	r2,r3,r2
    fc00:	e0bf6b15 	stw	r2,-596(fp)
    fc04:	e0ffda17 	ldw	r3,-152(fp)
    fc08:	e0bfdb17 	ldw	r2,-148(fp)
    fc0c:	1885883a 	add	r2,r3,r2
    fc10:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));
    fc14:	e0ff6b17 	ldw	r3,-596(fp)
    fc18:	00800184 	movi	r2,6
    fc1c:	1886583a 	ror	r3,r3,r2
    fc20:	e13f6b17 	ldw	r4,-596(fp)
    fc24:	008002c4 	movi	r2,11
    fc28:	2084583a 	ror	r2,r4,r2
    fc2c:	1886f03a 	xor	r3,r3,r2
    fc30:	e0bf6b17 	ldw	r2,-596(fp)
    fc34:	100411fa 	roli	r2,r2,7
    fc38:	1886f03a 	xor	r3,r3,r2
    fc3c:	e0bf6617 	ldw	r2,-616(fp)
    fc40:	1887883a 	add	r3,r3,r2
    fc44:	e13f6c17 	ldw	r4,-592(fp)
    fc48:	e0bf6d17 	ldw	r2,-588(fp)
    fc4c:	2088f03a 	xor	r4,r4,r2
    fc50:	e0bf6b17 	ldw	r2,-596(fp)
    fc54:	2088703a 	and	r4,r4,r2
    fc58:	e0bf6d17 	ldw	r2,-588(fp)
    fc5c:	2084f03a 	xor	r2,r4,r2
    fc60:	1887883a 	add	r3,r3,r2
    fc64:	e0bf9517 	ldw	r2,-428(fp)
    fc68:	100813fa 	roli	r4,r2,15
    fc6c:	e0bf9517 	ldw	r2,-428(fp)
    fc70:	1004137a 	roli	r2,r2,13
    fc74:	2088f03a 	xor	r4,r4,r2
    fc78:	e0bf9517 	ldw	r2,-428(fp)
    fc7c:	1004d2ba 	srli	r2,r2,10
    fc80:	2088f03a 	xor	r4,r4,r2
    fc84:	e0bf8617 	ldw	r2,-488(fp)
    fc88:	2089883a 	add	r4,r4,r2
    fc8c:	e17f6e17 	ldw	r5,-584(fp)
    fc90:	008001c4 	movi	r2,7
    fc94:	288a583a 	ror	r5,r5,r2
    fc98:	e0bf6e17 	ldw	r2,-584(fp)
    fc9c:	100413ba 	roli	r2,r2,14
    fca0:	288af03a 	xor	r5,r5,r2
    fca4:	e0bf6e17 	ldw	r2,-584(fp)
    fca8:	1004d0fa 	srli	r2,r2,3
    fcac:	2884f03a 	xor	r2,r5,r2
    fcb0:	2085883a 	add	r2,r4,r2
    fcb4:	e13f9b17 	ldw	r4,-404(fp)
    fcb8:	2085883a 	add	r2,r4,r2
    fcbc:	e0bf9b15 	stw	r2,-404(fp)
    fcc0:	e0bf9b17 	ldw	r2,-404(fp)
    fcc4:	1887883a 	add	r3,r3,r2
    fcc8:	00841af4 	movhi	r2,4203
    fccc:	10a81c04 	addi	r2,r2,-24464
    fcd0:	1885883a 	add	r2,r3,r2
    fcd4:	e0bfdc15 	stw	r2,-144(fp)
    fcd8:	e0ff6717 	ldw	r3,-612(fp)
    fcdc:	00800084 	movi	r2,2
    fce0:	1886583a 	ror	r3,r3,r2
    fce4:	e13f6717 	ldw	r4,-612(fp)
    fce8:	00800344 	movi	r2,13
    fcec:	2084583a 	ror	r2,r4,r2
    fcf0:	1886f03a 	xor	r3,r3,r2
    fcf4:	e0bf6717 	ldw	r2,-612(fp)
    fcf8:	100412ba 	roli	r2,r2,10
    fcfc:	1886f03a 	xor	r3,r3,r2
    fd00:	e13f6717 	ldw	r4,-612(fp)
    fd04:	e0bf6817 	ldw	r2,-608(fp)
    fd08:	2088703a 	and	r4,r4,r2
    fd0c:	e17f6717 	ldw	r5,-612(fp)
    fd10:	e0bf6817 	ldw	r2,-608(fp)
    fd14:	288ab03a 	or	r5,r5,r2
    fd18:	e0bf6917 	ldw	r2,-604(fp)
    fd1c:	2884703a 	and	r2,r5,r2
    fd20:	2084b03a 	or	r2,r4,r2
    fd24:	1885883a 	add	r2,r3,r2
    fd28:	e0bfdd15 	stw	r2,-140(fp)
    fd2c:	e0ff6a17 	ldw	r3,-600(fp)
    fd30:	e0bfdc17 	ldw	r2,-144(fp)
    fd34:	1885883a 	add	r2,r3,r2
    fd38:	e0bf6a15 	stw	r2,-600(fp)
    fd3c:	e0ffdc17 	ldw	r3,-144(fp)
    fd40:	e0bfdd17 	ldw	r2,-140(fp)
    fd44:	1885883a 	add	r2,r3,r2
    fd48:	e0bf6615 	stw	r2,-616(fp)

    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));
    fd4c:	e0ff6a17 	ldw	r3,-600(fp)
    fd50:	00800184 	movi	r2,6
    fd54:	1886583a 	ror	r3,r3,r2
    fd58:	e13f6a17 	ldw	r4,-600(fp)
    fd5c:	008002c4 	movi	r2,11
    fd60:	2084583a 	ror	r2,r4,r2
    fd64:	1886f03a 	xor	r3,r3,r2
    fd68:	e0bf6a17 	ldw	r2,-600(fp)
    fd6c:	100411fa 	roli	r2,r2,7
    fd70:	1886f03a 	xor	r3,r3,r2
    fd74:	e0bf6d17 	ldw	r2,-588(fp)
    fd78:	1887883a 	add	r3,r3,r2
    fd7c:	e13f6b17 	ldw	r4,-596(fp)
    fd80:	e0bf6c17 	ldw	r2,-592(fp)
    fd84:	2088f03a 	xor	r4,r4,r2
    fd88:	e0bf6a17 	ldw	r2,-600(fp)
    fd8c:	2088703a 	and	r4,r4,r2
    fd90:	e0bf6c17 	ldw	r2,-592(fp)
    fd94:	2084f03a 	xor	r2,r4,r2
    fd98:	1887883a 	add	r3,r3,r2
    fd9c:	e0bf9817 	ldw	r2,-416(fp)
    fda0:	100813fa 	roli	r4,r2,15
    fda4:	e0bf9817 	ldw	r2,-416(fp)
    fda8:	1004137a 	roli	r2,r2,13
    fdac:	2088f03a 	xor	r4,r4,r2
    fdb0:	e0bf9817 	ldw	r2,-416(fp)
    fdb4:	1004d2ba 	srli	r2,r2,10
    fdb8:	2088f03a 	xor	r4,r4,r2
    fdbc:	e0bf8917 	ldw	r2,-476(fp)
    fdc0:	2089883a 	add	r4,r4,r2
    fdc4:	e17f7117 	ldw	r5,-572(fp)
    fdc8:	008001c4 	movi	r2,7
    fdcc:	288a583a 	ror	r5,r5,r2
    fdd0:	e0bf7117 	ldw	r2,-572(fp)
    fdd4:	100413ba 	roli	r2,r2,14
    fdd8:	288af03a 	xor	r5,r5,r2
    fddc:	e0bf7117 	ldw	r2,-572(fp)
    fde0:	1004d0fa 	srli	r2,r2,3
    fde4:	2884f03a 	xor	r2,r5,r2
    fde8:	2085883a 	add	r2,r4,r2
    fdec:	e13f6e17 	ldw	r4,-584(fp)
    fdf0:	2085883a 	add	r2,r4,r2
    fdf4:	e0bf6e15 	stw	r2,-584(fp)
    fdf8:	e0bf6e17 	ldw	r2,-584(fp)
    fdfc:	1887883a 	add	r3,r3,r2
    fe00:	00866974 	movhi	r2,6565
    fe04:	10b04584 	addi	r2,r2,-16106
    fe08:	1885883a 	add	r2,r3,r2
    fe0c:	e0bfde15 	stw	r2,-136(fp)
    fe10:	e0ff6617 	ldw	r3,-616(fp)
    fe14:	00800084 	movi	r2,2
    fe18:	1886583a 	ror	r3,r3,r2
    fe1c:	e13f6617 	ldw	r4,-616(fp)
    fe20:	00800344 	movi	r2,13
    fe24:	2084583a 	ror	r2,r4,r2
    fe28:	1886f03a 	xor	r3,r3,r2
    fe2c:	e0bf6617 	ldw	r2,-616(fp)
    fe30:	100412ba 	roli	r2,r2,10
    fe34:	1886f03a 	xor	r3,r3,r2
    fe38:	e13f6617 	ldw	r4,-616(fp)
    fe3c:	e0bf6717 	ldw	r2,-612(fp)
    fe40:	2088703a 	and	r4,r4,r2
    fe44:	e17f6617 	ldw	r5,-616(fp)
    fe48:	e0bf6717 	ldw	r2,-612(fp)
    fe4c:	288ab03a 	or	r5,r5,r2
    fe50:	e0bf6817 	ldw	r2,-608(fp)
    fe54:	2884703a 	and	r2,r5,r2
    fe58:	2084b03a 	or	r2,r4,r2
    fe5c:	1885883a 	add	r2,r3,r2
    fe60:	e0bfdf15 	stw	r2,-132(fp)
    fe64:	e0ff6917 	ldw	r3,-604(fp)
    fe68:	e0bfde17 	ldw	r2,-136(fp)
    fe6c:	1885883a 	add	r2,r3,r2
    fe70:	e0bf6915 	stw	r2,-604(fp)
    fe74:	e0ffde17 	ldw	r3,-136(fp)
    fe78:	e0bfdf17 	ldw	r2,-132(fp)
    fe7c:	1885883a 	add	r2,r3,r2
    fe80:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));
    fe84:	e0ff6917 	ldw	r3,-604(fp)
    fe88:	00800184 	movi	r2,6
    fe8c:	1886583a 	ror	r3,r3,r2
    fe90:	e13f6917 	ldw	r4,-604(fp)
    fe94:	008002c4 	movi	r2,11
    fe98:	2084583a 	ror	r2,r4,r2
    fe9c:	1886f03a 	xor	r3,r3,r2
    fea0:	e0bf6917 	ldw	r2,-604(fp)
    fea4:	100411fa 	roli	r2,r2,7
    fea8:	1886f03a 	xor	r3,r3,r2
    feac:	e0bf6c17 	ldw	r2,-592(fp)
    feb0:	1887883a 	add	r3,r3,r2
    feb4:	e13f6a17 	ldw	r4,-600(fp)
    feb8:	e0bf6b17 	ldw	r2,-596(fp)
    febc:	2088f03a 	xor	r4,r4,r2
    fec0:	e0bf6917 	ldw	r2,-604(fp)
    fec4:	2088703a 	and	r4,r4,r2
    fec8:	e0bf6b17 	ldw	r2,-596(fp)
    fecc:	2084f03a 	xor	r2,r4,r2
    fed0:	1887883a 	add	r3,r3,r2
    fed4:	e0bf9b17 	ldw	r2,-404(fp)
    fed8:	100813fa 	roli	r4,r2,15
    fedc:	e0bf9b17 	ldw	r2,-404(fp)
    fee0:	1004137a 	roli	r2,r2,13
    fee4:	2088f03a 	xor	r4,r4,r2
    fee8:	e0bf9b17 	ldw	r2,-404(fp)
    feec:	1004d2ba 	srli	r2,r2,10
    fef0:	2088f03a 	xor	r4,r4,r2
    fef4:	e0bf8c17 	ldw	r2,-464(fp)
    fef8:	2089883a 	add	r4,r4,r2
    fefc:	e17f7417 	ldw	r5,-560(fp)
    ff00:	008001c4 	movi	r2,7
    ff04:	288a583a 	ror	r5,r5,r2
    ff08:	e0bf7417 	ldw	r2,-560(fp)
    ff0c:	100413ba 	roli	r2,r2,14
    ff10:	288af03a 	xor	r5,r5,r2
    ff14:	e0bf7417 	ldw	r2,-560(fp)
    ff18:	1004d0fa 	srli	r2,r2,3
    ff1c:	2884f03a 	xor	r2,r5,r2
    ff20:	2085883a 	add	r2,r4,r2
    ff24:	e13f7117 	ldw	r4,-572(fp)
    ff28:	2085883a 	add	r2,r4,r2
    ff2c:	e0bf7115 	stw	r2,-572(fp)
    ff30:	e0bf7117 	ldw	r2,-572(fp)
    ff34:	1887883a 	add	r3,r3,r2
    ff38:	00878df4 	movhi	r2,7735
    ff3c:	109b0204 	addi	r2,r2,27656
    ff40:	1885883a 	add	r2,r3,r2
    ff44:	e0bfe015 	stw	r2,-128(fp)
    ff48:	e0ff6d17 	ldw	r3,-588(fp)
    ff4c:	00800084 	movi	r2,2
    ff50:	1886583a 	ror	r3,r3,r2
    ff54:	e13f6d17 	ldw	r4,-588(fp)
    ff58:	00800344 	movi	r2,13
    ff5c:	2084583a 	ror	r2,r4,r2
    ff60:	1886f03a 	xor	r3,r3,r2
    ff64:	e0bf6d17 	ldw	r2,-588(fp)
    ff68:	100412ba 	roli	r2,r2,10
    ff6c:	1886f03a 	xor	r3,r3,r2
    ff70:	e13f6d17 	ldw	r4,-588(fp)
    ff74:	e0bf6617 	ldw	r2,-616(fp)
    ff78:	2088703a 	and	r4,r4,r2
    ff7c:	e17f6d17 	ldw	r5,-588(fp)
    ff80:	e0bf6617 	ldw	r2,-616(fp)
    ff84:	288ab03a 	or	r5,r5,r2
    ff88:	e0bf6717 	ldw	r2,-612(fp)
    ff8c:	2884703a 	and	r2,r5,r2
    ff90:	2084b03a 	or	r2,r4,r2
    ff94:	1885883a 	add	r2,r3,r2
    ff98:	e0bfe115 	stw	r2,-124(fp)
    ff9c:	e0ff6817 	ldw	r3,-608(fp)
    ffa0:	e0bfe017 	ldw	r2,-128(fp)
    ffa4:	1885883a 	add	r2,r3,r2
    ffa8:	e0bf6815 	stw	r2,-608(fp)
    ffac:	e0ffe017 	ldw	r3,-128(fp)
    ffb0:	e0bfe117 	ldw	r2,-124(fp)
    ffb4:	1885883a 	add	r2,r3,r2
    ffb8:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));
    ffbc:	e0ff6817 	ldw	r3,-608(fp)
    ffc0:	00800184 	movi	r2,6
    ffc4:	1886583a 	ror	r3,r3,r2
    ffc8:	e13f6817 	ldw	r4,-608(fp)
    ffcc:	008002c4 	movi	r2,11
    ffd0:	2084583a 	ror	r2,r4,r2
    ffd4:	1886f03a 	xor	r3,r3,r2
    ffd8:	e0bf6817 	ldw	r2,-608(fp)
    ffdc:	100411fa 	roli	r2,r2,7
    ffe0:	1886f03a 	xor	r3,r3,r2
    ffe4:	e0bf6b17 	ldw	r2,-596(fp)
    ffe8:	1887883a 	add	r3,r3,r2
    ffec:	e13f6917 	ldw	r4,-604(fp)
    fff0:	e0bf6a17 	ldw	r2,-600(fp)
    fff4:	2088f03a 	xor	r4,r4,r2
    fff8:	e0bf6817 	ldw	r2,-608(fp)
    fffc:	2088703a 	and	r4,r4,r2
   10000:	e0bf6a17 	ldw	r2,-600(fp)
   10004:	2084f03a 	xor	r2,r4,r2
   10008:	1887883a 	add	r3,r3,r2
   1000c:	e0bf6e17 	ldw	r2,-584(fp)
   10010:	100813fa 	roli	r4,r2,15
   10014:	e0bf6e17 	ldw	r2,-584(fp)
   10018:	1004137a 	roli	r2,r2,13
   1001c:	2088f03a 	xor	r4,r4,r2
   10020:	e0bf6e17 	ldw	r2,-584(fp)
   10024:	1004d2ba 	srli	r2,r2,10
   10028:	2088f03a 	xor	r4,r4,r2
   1002c:	e0bf8f17 	ldw	r2,-452(fp)
   10030:	2089883a 	add	r4,r4,r2
   10034:	e17f7717 	ldw	r5,-548(fp)
   10038:	008001c4 	movi	r2,7
   1003c:	288a583a 	ror	r5,r5,r2
   10040:	e0bf7717 	ldw	r2,-548(fp)
   10044:	100413ba 	roli	r2,r2,14
   10048:	288af03a 	xor	r5,r5,r2
   1004c:	e0bf7717 	ldw	r2,-548(fp)
   10050:	1004d0fa 	srli	r2,r2,3
   10054:	2884f03a 	xor	r2,r5,r2
   10058:	2085883a 	add	r2,r4,r2
   1005c:	e13f7417 	ldw	r4,-560(fp)
   10060:	2085883a 	add	r2,r4,r2
   10064:	e0bf7415 	stw	r2,-560(fp)
   10068:	e0bf7417 	ldw	r2,-560(fp)
   1006c:	1887883a 	add	r3,r3,r2
   10070:	0089d234 	movhi	r2,10056
   10074:	109dd304 	addi	r2,r2,30540
   10078:	1885883a 	add	r2,r3,r2
   1007c:	e0bfe215 	stw	r2,-120(fp)
   10080:	e0ff6c17 	ldw	r3,-592(fp)
   10084:	00800084 	movi	r2,2
   10088:	1886583a 	ror	r3,r3,r2
   1008c:	e13f6c17 	ldw	r4,-592(fp)
   10090:	00800344 	movi	r2,13
   10094:	2084583a 	ror	r2,r4,r2
   10098:	1886f03a 	xor	r3,r3,r2
   1009c:	e0bf6c17 	ldw	r2,-592(fp)
   100a0:	100412ba 	roli	r2,r2,10
   100a4:	1886f03a 	xor	r3,r3,r2
   100a8:	e13f6c17 	ldw	r4,-592(fp)
   100ac:	e0bf6d17 	ldw	r2,-588(fp)
   100b0:	2088703a 	and	r4,r4,r2
   100b4:	e17f6c17 	ldw	r5,-592(fp)
   100b8:	e0bf6d17 	ldw	r2,-588(fp)
   100bc:	288ab03a 	or	r5,r5,r2
   100c0:	e0bf6617 	ldw	r2,-616(fp)
   100c4:	2884703a 	and	r2,r5,r2
   100c8:	2084b03a 	or	r2,r4,r2
   100cc:	1885883a 	add	r2,r3,r2
   100d0:	e0bfe315 	stw	r2,-116(fp)
   100d4:	e0ff6717 	ldw	r3,-612(fp)
   100d8:	e0bfe217 	ldw	r2,-120(fp)
   100dc:	1885883a 	add	r2,r3,r2
   100e0:	e0bf6715 	stw	r2,-612(fp)
   100e4:	e0ffe217 	ldw	r3,-120(fp)
   100e8:	e0bfe317 	ldw	r2,-116(fp)
   100ec:	1885883a 	add	r2,r3,r2
   100f0:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));
   100f4:	e0ff6717 	ldw	r3,-612(fp)
   100f8:	00800184 	movi	r2,6
   100fc:	1886583a 	ror	r3,r3,r2
   10100:	e13f6717 	ldw	r4,-612(fp)
   10104:	008002c4 	movi	r2,11
   10108:	2084583a 	ror	r2,r4,r2
   1010c:	1886f03a 	xor	r3,r3,r2
   10110:	e0bf6717 	ldw	r2,-612(fp)
   10114:	100411fa 	roli	r2,r2,7
   10118:	1886f03a 	xor	r3,r3,r2
   1011c:	e0bf6a17 	ldw	r2,-600(fp)
   10120:	1887883a 	add	r3,r3,r2
   10124:	e13f6817 	ldw	r4,-608(fp)
   10128:	e0bf6917 	ldw	r2,-604(fp)
   1012c:	2088f03a 	xor	r4,r4,r2
   10130:	e0bf6717 	ldw	r2,-612(fp)
   10134:	2088703a 	and	r4,r4,r2
   10138:	e0bf6917 	ldw	r2,-604(fp)
   1013c:	2084f03a 	xor	r2,r4,r2
   10140:	1887883a 	add	r3,r3,r2
   10144:	e0bf7117 	ldw	r2,-572(fp)
   10148:	100813fa 	roli	r4,r2,15
   1014c:	e0bf7117 	ldw	r2,-572(fp)
   10150:	1004137a 	roli	r2,r2,13
   10154:	2088f03a 	xor	r4,r4,r2
   10158:	e0bf7117 	ldw	r2,-572(fp)
   1015c:	1004d2ba 	srli	r2,r2,10
   10160:	2088f03a 	xor	r4,r4,r2
   10164:	e0bf9217 	ldw	r2,-440(fp)
   10168:	2089883a 	add	r4,r4,r2
   1016c:	e17f7a17 	ldw	r5,-536(fp)
   10170:	008001c4 	movi	r2,7
   10174:	288a583a 	ror	r5,r5,r2
   10178:	e0bf7a17 	ldw	r2,-536(fp)
   1017c:	100413ba 	roli	r2,r2,14
   10180:	288af03a 	xor	r5,r5,r2
   10184:	e0bf7a17 	ldw	r2,-536(fp)
   10188:	1004d0fa 	srli	r2,r2,3
   1018c:	2884f03a 	xor	r2,r5,r2
   10190:	2085883a 	add	r2,r4,r2
   10194:	e13f7717 	ldw	r4,-548(fp)
   10198:	2085883a 	add	r2,r4,r2
   1019c:	e0bf7715 	stw	r2,-548(fp)
   101a0:	e0bf7717 	ldw	r2,-548(fp)
   101a4:	1887883a 	add	r3,r3,r2
   101a8:	008d2c74 	movhi	r2,13489
   101ac:	10af2d44 	addi	r2,r2,-17227
   101b0:	1885883a 	add	r2,r3,r2
   101b4:	e0bfe415 	stw	r2,-112(fp)
   101b8:	e0ff6b17 	ldw	r3,-596(fp)
   101bc:	00800084 	movi	r2,2
   101c0:	1886583a 	ror	r3,r3,r2
   101c4:	e13f6b17 	ldw	r4,-596(fp)
   101c8:	00800344 	movi	r2,13
   101cc:	2084583a 	ror	r2,r4,r2
   101d0:	1886f03a 	xor	r3,r3,r2
   101d4:	e0bf6b17 	ldw	r2,-596(fp)
   101d8:	100412ba 	roli	r2,r2,10
   101dc:	1886f03a 	xor	r3,r3,r2
   101e0:	e13f6b17 	ldw	r4,-596(fp)
   101e4:	e0bf6c17 	ldw	r2,-592(fp)
   101e8:	2088703a 	and	r4,r4,r2
   101ec:	e17f6b17 	ldw	r5,-596(fp)
   101f0:	e0bf6c17 	ldw	r2,-592(fp)
   101f4:	288ab03a 	or	r5,r5,r2
   101f8:	e0bf6d17 	ldw	r2,-588(fp)
   101fc:	2884703a 	and	r2,r5,r2
   10200:	2084b03a 	or	r2,r4,r2
   10204:	1885883a 	add	r2,r3,r2
   10208:	e0bfe515 	stw	r2,-108(fp)
   1020c:	e0ff6617 	ldw	r3,-616(fp)
   10210:	e0bfe417 	ldw	r2,-112(fp)
   10214:	1885883a 	add	r2,r3,r2
   10218:	e0bf6615 	stw	r2,-616(fp)
   1021c:	e0ffe417 	ldw	r3,-112(fp)
   10220:	e0bfe517 	ldw	r2,-108(fp)
   10224:	1885883a 	add	r2,r3,r2
   10228:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));
   1022c:	e0ff6617 	ldw	r3,-616(fp)
   10230:	00800184 	movi	r2,6
   10234:	1886583a 	ror	r3,r3,r2
   10238:	e13f6617 	ldw	r4,-616(fp)
   1023c:	008002c4 	movi	r2,11
   10240:	2084583a 	ror	r2,r4,r2
   10244:	1886f03a 	xor	r3,r3,r2
   10248:	e0bf6617 	ldw	r2,-616(fp)
   1024c:	100411fa 	roli	r2,r2,7
   10250:	1886f03a 	xor	r3,r3,r2
   10254:	e0bf6917 	ldw	r2,-604(fp)
   10258:	1887883a 	add	r3,r3,r2
   1025c:	e13f6717 	ldw	r4,-612(fp)
   10260:	e0bf6817 	ldw	r2,-608(fp)
   10264:	2088f03a 	xor	r4,r4,r2
   10268:	e0bf6617 	ldw	r2,-616(fp)
   1026c:	2088703a 	and	r4,r4,r2
   10270:	e0bf6817 	ldw	r2,-608(fp)
   10274:	2084f03a 	xor	r2,r4,r2
   10278:	1887883a 	add	r3,r3,r2
   1027c:	e0bf7417 	ldw	r2,-560(fp)
   10280:	100813fa 	roli	r4,r2,15
   10284:	e0bf7417 	ldw	r2,-560(fp)
   10288:	1004137a 	roli	r2,r2,13
   1028c:	2088f03a 	xor	r4,r4,r2
   10290:	e0bf7417 	ldw	r2,-560(fp)
   10294:	1004d2ba 	srli	r2,r2,10
   10298:	2088f03a 	xor	r4,r4,r2
   1029c:	e0bf9517 	ldw	r2,-428(fp)
   102a0:	2089883a 	add	r4,r4,r2
   102a4:	e17f7d17 	ldw	r5,-524(fp)
   102a8:	008001c4 	movi	r2,7
   102ac:	288a583a 	ror	r5,r5,r2
   102b0:	e0bf7d17 	ldw	r2,-524(fp)
   102b4:	100413ba 	roli	r2,r2,14
   102b8:	288af03a 	xor	r5,r5,r2
   102bc:	e0bf7d17 	ldw	r2,-524(fp)
   102c0:	1004d0fa 	srli	r2,r2,3
   102c4:	2884f03a 	xor	r2,r5,r2
   102c8:	2085883a 	add	r2,r4,r2
   102cc:	e13f7a17 	ldw	r4,-536(fp)
   102d0:	2085883a 	add	r2,r4,r2
   102d4:	e0bf7a15 	stw	r2,-536(fp)
   102d8:	e0bf7a17 	ldw	r2,-536(fp)
   102dc:	1887883a 	add	r3,r3,r2
   102e0:	008e4734 	movhi	r2,14620
   102e4:	10832cc4 	addi	r2,r2,3251
   102e8:	1885883a 	add	r2,r3,r2
   102ec:	e0bfe615 	stw	r2,-104(fp)
   102f0:	e0ff6a17 	ldw	r3,-600(fp)
   102f4:	00800084 	movi	r2,2
   102f8:	1886583a 	ror	r3,r3,r2
   102fc:	e13f6a17 	ldw	r4,-600(fp)
   10300:	00800344 	movi	r2,13
   10304:	2084583a 	ror	r2,r4,r2
   10308:	1886f03a 	xor	r3,r3,r2
   1030c:	e0bf6a17 	ldw	r2,-600(fp)
   10310:	100412ba 	roli	r2,r2,10
   10314:	1886f03a 	xor	r3,r3,r2
   10318:	e13f6a17 	ldw	r4,-600(fp)
   1031c:	e0bf6b17 	ldw	r2,-596(fp)
   10320:	2088703a 	and	r4,r4,r2
   10324:	e17f6a17 	ldw	r5,-600(fp)
   10328:	e0bf6b17 	ldw	r2,-596(fp)
   1032c:	288ab03a 	or	r5,r5,r2
   10330:	e0bf6c17 	ldw	r2,-592(fp)
   10334:	2884703a 	and	r2,r5,r2
   10338:	2084b03a 	or	r2,r4,r2
   1033c:	1885883a 	add	r2,r3,r2
   10340:	e0bfe715 	stw	r2,-100(fp)
   10344:	e0ff6d17 	ldw	r3,-588(fp)
   10348:	e0bfe617 	ldw	r2,-104(fp)
   1034c:	1885883a 	add	r2,r3,r2
   10350:	e0bf6d15 	stw	r2,-588(fp)
   10354:	e0ffe617 	ldw	r3,-104(fp)
   10358:	e0bfe717 	ldw	r2,-100(fp)
   1035c:	1885883a 	add	r2,r3,r2
   10360:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));
   10364:	e0ff6d17 	ldw	r3,-588(fp)
   10368:	00800184 	movi	r2,6
   1036c:	1886583a 	ror	r3,r3,r2
   10370:	e13f6d17 	ldw	r4,-588(fp)
   10374:	008002c4 	movi	r2,11
   10378:	2084583a 	ror	r2,r4,r2
   1037c:	1886f03a 	xor	r3,r3,r2
   10380:	e0bf6d17 	ldw	r2,-588(fp)
   10384:	100411fa 	roli	r2,r2,7
   10388:	1886f03a 	xor	r3,r3,r2
   1038c:	e0bf6817 	ldw	r2,-608(fp)
   10390:	1887883a 	add	r3,r3,r2
   10394:	e13f6617 	ldw	r4,-616(fp)
   10398:	e0bf6717 	ldw	r2,-612(fp)
   1039c:	2088f03a 	xor	r4,r4,r2
   103a0:	e0bf6d17 	ldw	r2,-588(fp)
   103a4:	2088703a 	and	r4,r4,r2
   103a8:	e0bf6717 	ldw	r2,-612(fp)
   103ac:	2084f03a 	xor	r2,r4,r2
   103b0:	1887883a 	add	r3,r3,r2
   103b4:	e0bf7717 	ldw	r2,-548(fp)
   103b8:	100813fa 	roli	r4,r2,15
   103bc:	e0bf7717 	ldw	r2,-548(fp)
   103c0:	1004137a 	roli	r2,r2,13
   103c4:	2088f03a 	xor	r4,r4,r2
   103c8:	e0bf7717 	ldw	r2,-548(fp)
   103cc:	1004d2ba 	srli	r2,r2,10
   103d0:	2088f03a 	xor	r4,r4,r2
   103d4:	e0bf9817 	ldw	r2,-416(fp)
   103d8:	2089883a 	add	r4,r4,r2
   103dc:	e17f8017 	ldw	r5,-512(fp)
   103e0:	008001c4 	movi	r2,7
   103e4:	288a583a 	ror	r5,r5,r2
   103e8:	e0bf8017 	ldw	r2,-512(fp)
   103ec:	100413ba 	roli	r2,r2,14
   103f0:	288af03a 	xor	r5,r5,r2
   103f4:	e0bf8017 	ldw	r2,-512(fp)
   103f8:	1004d0fa 	srli	r2,r2,3
   103fc:	2884f03a 	xor	r2,r5,r2
   10400:	2085883a 	add	r2,r4,r2
   10404:	e13f7d17 	ldw	r4,-524(fp)
   10408:	2085883a 	add	r2,r4,r2
   1040c:	e0bf7d15 	stw	r2,-524(fp)
   10410:	e0bf7d17 	ldw	r2,-524(fp)
   10414:	1887883a 	add	r3,r3,r2
   10418:	0093b674 	movhi	r2,20185
   1041c:	10aa9284 	addi	r2,r2,-21942
   10420:	1885883a 	add	r2,r3,r2
   10424:	e0bfe815 	stw	r2,-96(fp)
   10428:	e0ff6917 	ldw	r3,-604(fp)
   1042c:	00800084 	movi	r2,2
   10430:	1886583a 	ror	r3,r3,r2
   10434:	e13f6917 	ldw	r4,-604(fp)
   10438:	00800344 	movi	r2,13
   1043c:	2084583a 	ror	r2,r4,r2
   10440:	1886f03a 	xor	r3,r3,r2
   10444:	e0bf6917 	ldw	r2,-604(fp)
   10448:	100412ba 	roli	r2,r2,10
   1044c:	1886f03a 	xor	r3,r3,r2
   10450:	e13f6917 	ldw	r4,-604(fp)
   10454:	e0bf6a17 	ldw	r2,-600(fp)
   10458:	2088703a 	and	r4,r4,r2
   1045c:	e17f6917 	ldw	r5,-604(fp)
   10460:	e0bf6a17 	ldw	r2,-600(fp)
   10464:	288ab03a 	or	r5,r5,r2
   10468:	e0bf6b17 	ldw	r2,-596(fp)
   1046c:	2884703a 	and	r2,r5,r2
   10470:	2084b03a 	or	r2,r4,r2
   10474:	1885883a 	add	r2,r3,r2
   10478:	e0bfe915 	stw	r2,-92(fp)
   1047c:	e0ff6c17 	ldw	r3,-592(fp)
   10480:	e0bfe817 	ldw	r2,-96(fp)
   10484:	1885883a 	add	r2,r3,r2
   10488:	e0bf6c15 	stw	r2,-592(fp)
   1048c:	e0ffe817 	ldw	r3,-96(fp)
   10490:	e0bfe917 	ldw	r2,-92(fp)
   10494:	1885883a 	add	r2,r3,r2
   10498:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));
   1049c:	e0ff6c17 	ldw	r3,-592(fp)
   104a0:	00800184 	movi	r2,6
   104a4:	1886583a 	ror	r3,r3,r2
   104a8:	e13f6c17 	ldw	r4,-592(fp)
   104ac:	008002c4 	movi	r2,11
   104b0:	2084583a 	ror	r2,r4,r2
   104b4:	1886f03a 	xor	r3,r3,r2
   104b8:	e0bf6c17 	ldw	r2,-592(fp)
   104bc:	100411fa 	roli	r2,r2,7
   104c0:	1886f03a 	xor	r3,r3,r2
   104c4:	e0bf6717 	ldw	r2,-612(fp)
   104c8:	1887883a 	add	r3,r3,r2
   104cc:	e13f6d17 	ldw	r4,-588(fp)
   104d0:	e0bf6617 	ldw	r2,-616(fp)
   104d4:	2088f03a 	xor	r4,r4,r2
   104d8:	e0bf6c17 	ldw	r2,-592(fp)
   104dc:	2088703a 	and	r4,r4,r2
   104e0:	e0bf6617 	ldw	r2,-616(fp)
   104e4:	2084f03a 	xor	r2,r4,r2
   104e8:	1887883a 	add	r3,r3,r2
   104ec:	e0bf7a17 	ldw	r2,-536(fp)
   104f0:	100813fa 	roli	r4,r2,15
   104f4:	e0bf7a17 	ldw	r2,-536(fp)
   104f8:	1004137a 	roli	r2,r2,13
   104fc:	2088f03a 	xor	r4,r4,r2
   10500:	e0bf7a17 	ldw	r2,-536(fp)
   10504:	1004d2ba 	srli	r2,r2,10
   10508:	2088f03a 	xor	r4,r4,r2
   1050c:	e0bf9b17 	ldw	r2,-404(fp)
   10510:	2089883a 	add	r4,r4,r2
   10514:	e17f8317 	ldw	r5,-500(fp)
   10518:	008001c4 	movi	r2,7
   1051c:	288a583a 	ror	r5,r5,r2
   10520:	e0bf8317 	ldw	r2,-500(fp)
   10524:	100413ba 	roli	r2,r2,14
   10528:	288af03a 	xor	r5,r5,r2
   1052c:	e0bf8317 	ldw	r2,-500(fp)
   10530:	1004d0fa 	srli	r2,r2,3
   10534:	2884f03a 	xor	r2,r5,r2
   10538:	2085883a 	add	r2,r4,r2
   1053c:	e13f8017 	ldw	r4,-512(fp)
   10540:	2085883a 	add	r2,r4,r2
   10544:	e0bf8015 	stw	r2,-512(fp)
   10548:	e0bf8017 	ldw	r2,-512(fp)
   1054c:	1887883a 	add	r3,r3,r2
   10550:	0096e774 	movhi	r2,23453
   10554:	10b293c4 	addi	r2,r2,-13745
   10558:	1885883a 	add	r2,r3,r2
   1055c:	e0bfea15 	stw	r2,-88(fp)
   10560:	e0ff6817 	ldw	r3,-608(fp)
   10564:	00800084 	movi	r2,2
   10568:	1886583a 	ror	r3,r3,r2
   1056c:	e13f6817 	ldw	r4,-608(fp)
   10570:	00800344 	movi	r2,13
   10574:	2084583a 	ror	r2,r4,r2
   10578:	1886f03a 	xor	r3,r3,r2
   1057c:	e0bf6817 	ldw	r2,-608(fp)
   10580:	100412ba 	roli	r2,r2,10
   10584:	1886f03a 	xor	r3,r3,r2
   10588:	e13f6817 	ldw	r4,-608(fp)
   1058c:	e0bf6917 	ldw	r2,-604(fp)
   10590:	2088703a 	and	r4,r4,r2
   10594:	e17f6817 	ldw	r5,-608(fp)
   10598:	e0bf6917 	ldw	r2,-604(fp)
   1059c:	288ab03a 	or	r5,r5,r2
   105a0:	e0bf6a17 	ldw	r2,-600(fp)
   105a4:	2884703a 	and	r2,r5,r2
   105a8:	2084b03a 	or	r2,r4,r2
   105ac:	1885883a 	add	r2,r3,r2
   105b0:	e0bfeb15 	stw	r2,-84(fp)
   105b4:	e0ff6b17 	ldw	r3,-596(fp)
   105b8:	e0bfea17 	ldw	r2,-88(fp)
   105bc:	1885883a 	add	r2,r3,r2
   105c0:	e0bf6b15 	stw	r2,-596(fp)
   105c4:	e0ffea17 	ldw	r3,-88(fp)
   105c8:	e0bfeb17 	ldw	r2,-84(fp)
   105cc:	1885883a 	add	r2,r3,r2
   105d0:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));
   105d4:	e0ff6b17 	ldw	r3,-596(fp)
   105d8:	00800184 	movi	r2,6
   105dc:	1886583a 	ror	r3,r3,r2
   105e0:	e13f6b17 	ldw	r4,-596(fp)
   105e4:	008002c4 	movi	r2,11
   105e8:	2084583a 	ror	r2,r4,r2
   105ec:	1886f03a 	xor	r3,r3,r2
   105f0:	e0bf6b17 	ldw	r2,-596(fp)
   105f4:	100411fa 	roli	r2,r2,7
   105f8:	1886f03a 	xor	r3,r3,r2
   105fc:	e0bf6617 	ldw	r2,-616(fp)
   10600:	1887883a 	add	r3,r3,r2
   10604:	e13f6c17 	ldw	r4,-592(fp)
   10608:	e0bf6d17 	ldw	r2,-588(fp)
   1060c:	2088f03a 	xor	r4,r4,r2
   10610:	e0bf6b17 	ldw	r2,-596(fp)
   10614:	2088703a 	and	r4,r4,r2
   10618:	e0bf6d17 	ldw	r2,-588(fp)
   1061c:	2084f03a 	xor	r2,r4,r2
   10620:	1887883a 	add	r3,r3,r2
   10624:	e0bf7d17 	ldw	r2,-524(fp)
   10628:	100813fa 	roli	r4,r2,15
   1062c:	e0bf7d17 	ldw	r2,-524(fp)
   10630:	1004137a 	roli	r2,r2,13
   10634:	2088f03a 	xor	r4,r4,r2
   10638:	e0bf7d17 	ldw	r2,-524(fp)
   1063c:	1004d2ba 	srli	r2,r2,10
   10640:	2088f03a 	xor	r4,r4,r2
   10644:	e0bf6e17 	ldw	r2,-584(fp)
   10648:	2089883a 	add	r4,r4,r2
   1064c:	e17f8617 	ldw	r5,-488(fp)
   10650:	008001c4 	movi	r2,7
   10654:	288a583a 	ror	r5,r5,r2
   10658:	e0bf8617 	ldw	r2,-488(fp)
   1065c:	100413ba 	roli	r2,r2,14
   10660:	288af03a 	xor	r5,r5,r2
   10664:	e0bf8617 	ldw	r2,-488(fp)
   10668:	1004d0fa 	srli	r2,r2,3
   1066c:	2884f03a 	xor	r2,r5,r2
   10670:	2085883a 	add	r2,r4,r2
   10674:	e13f8317 	ldw	r4,-500(fp)
   10678:	2085883a 	add	r2,r4,r2
   1067c:	e0bf8315 	stw	r2,-500(fp)
   10680:	e0bf8317 	ldw	r2,-500(fp)
   10684:	1887883a 	add	r3,r3,r2
   10688:	009a0bb4 	movhi	r2,26670
   1068c:	109bfcc4 	addi	r2,r2,28659
   10690:	1885883a 	add	r2,r3,r2
   10694:	e0bfec15 	stw	r2,-80(fp)
   10698:	e0ff6717 	ldw	r3,-612(fp)
   1069c:	00800084 	movi	r2,2
   106a0:	1886583a 	ror	r3,r3,r2
   106a4:	e13f6717 	ldw	r4,-612(fp)
   106a8:	00800344 	movi	r2,13
   106ac:	2084583a 	ror	r2,r4,r2
   106b0:	1886f03a 	xor	r3,r3,r2
   106b4:	e0bf6717 	ldw	r2,-612(fp)
   106b8:	100412ba 	roli	r2,r2,10
   106bc:	1886f03a 	xor	r3,r3,r2
   106c0:	e13f6717 	ldw	r4,-612(fp)
   106c4:	e0bf6817 	ldw	r2,-608(fp)
   106c8:	2088703a 	and	r4,r4,r2
   106cc:	e17f6717 	ldw	r5,-612(fp)
   106d0:	e0bf6817 	ldw	r2,-608(fp)
   106d4:	288ab03a 	or	r5,r5,r2
   106d8:	e0bf6917 	ldw	r2,-604(fp)
   106dc:	2884703a 	and	r2,r5,r2
   106e0:	2084b03a 	or	r2,r4,r2
   106e4:	1885883a 	add	r2,r3,r2
   106e8:	e0bfed15 	stw	r2,-76(fp)
   106ec:	e0ff6a17 	ldw	r3,-600(fp)
   106f0:	e0bfec17 	ldw	r2,-80(fp)
   106f4:	1885883a 	add	r2,r3,r2
   106f8:	e0bf6a15 	stw	r2,-600(fp)
   106fc:	e0ffec17 	ldw	r3,-80(fp)
   10700:	e0bfed17 	ldw	r2,-76(fp)
   10704:	1885883a 	add	r2,r3,r2
   10708:	e0bf6615 	stw	r2,-616(fp)
    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));
   1070c:	e0ff6a17 	ldw	r3,-600(fp)
   10710:	00800184 	movi	r2,6
   10714:	1886583a 	ror	r3,r3,r2
   10718:	e13f6a17 	ldw	r4,-600(fp)
   1071c:	008002c4 	movi	r2,11
   10720:	2084583a 	ror	r2,r4,r2
   10724:	1886f03a 	xor	r3,r3,r2
   10728:	e0bf6a17 	ldw	r2,-600(fp)
   1072c:	100411fa 	roli	r2,r2,7
   10730:	1886f03a 	xor	r3,r3,r2
   10734:	e0bf6d17 	ldw	r2,-588(fp)
   10738:	1887883a 	add	r3,r3,r2
   1073c:	e13f6b17 	ldw	r4,-596(fp)
   10740:	e0bf6c17 	ldw	r2,-592(fp)
   10744:	2088f03a 	xor	r4,r4,r2
   10748:	e0bf6a17 	ldw	r2,-600(fp)
   1074c:	2088703a 	and	r4,r4,r2
   10750:	e0bf6c17 	ldw	r2,-592(fp)
   10754:	2084f03a 	xor	r2,r4,r2
   10758:	1887883a 	add	r3,r3,r2
   1075c:	e0bf8017 	ldw	r2,-512(fp)
   10760:	100813fa 	roli	r4,r2,15
   10764:	e0bf8017 	ldw	r2,-512(fp)
   10768:	1004137a 	roli	r2,r2,13
   1076c:	2088f03a 	xor	r4,r4,r2
   10770:	e0bf8017 	ldw	r2,-512(fp)
   10774:	1004d2ba 	srli	r2,r2,10
   10778:	2088f03a 	xor	r4,r4,r2
   1077c:	e0bf7117 	ldw	r2,-572(fp)
   10780:	2089883a 	add	r4,r4,r2
   10784:	e17f8917 	ldw	r5,-476(fp)
   10788:	008001c4 	movi	r2,7
   1078c:	288a583a 	ror	r5,r5,r2
   10790:	e0bf8917 	ldw	r2,-476(fp)
   10794:	100413ba 	roli	r2,r2,14
   10798:	288af03a 	xor	r5,r5,r2
   1079c:	e0bf8917 	ldw	r2,-476(fp)
   107a0:	1004d0fa 	srli	r2,r2,3
   107a4:	2884f03a 	xor	r2,r5,r2
   107a8:	2085883a 	add	r2,r4,r2
   107ac:	e13f8617 	ldw	r4,-488(fp)
   107b0:	2085883a 	add	r2,r4,r2
   107b4:	e0bf8615 	stw	r2,-488(fp)
   107b8:	e0bf8617 	ldw	r2,-488(fp)
   107bc:	1887883a 	add	r3,r3,r2
   107c0:	009d2434 	movhi	r2,29840
   107c4:	10a0bb84 	addi	r2,r2,-32018
   107c8:	1885883a 	add	r2,r3,r2
   107cc:	e0bfee15 	stw	r2,-72(fp)
   107d0:	e0ff6617 	ldw	r3,-616(fp)
   107d4:	00800084 	movi	r2,2
   107d8:	1886583a 	ror	r3,r3,r2
   107dc:	e13f6617 	ldw	r4,-616(fp)
   107e0:	00800344 	movi	r2,13
   107e4:	2084583a 	ror	r2,r4,r2
   107e8:	1886f03a 	xor	r3,r3,r2
   107ec:	e0bf6617 	ldw	r2,-616(fp)
   107f0:	100412ba 	roli	r2,r2,10
   107f4:	1886f03a 	xor	r3,r3,r2
   107f8:	e13f6617 	ldw	r4,-616(fp)
   107fc:	e0bf6717 	ldw	r2,-612(fp)
   10800:	2088703a 	and	r4,r4,r2
   10804:	e17f6617 	ldw	r5,-616(fp)
   10808:	e0bf6717 	ldw	r2,-612(fp)
   1080c:	288ab03a 	or	r5,r5,r2
   10810:	e0bf6817 	ldw	r2,-608(fp)
   10814:	2884703a 	and	r2,r5,r2
   10818:	2084b03a 	or	r2,r4,r2
   1081c:	1885883a 	add	r2,r3,r2
   10820:	e0bfef15 	stw	r2,-68(fp)
   10824:	e0ff6917 	ldw	r3,-604(fp)
   10828:	e0bfee17 	ldw	r2,-72(fp)
   1082c:	1885883a 	add	r2,r3,r2
   10830:	e0bf6915 	stw	r2,-604(fp)
   10834:	e0ffee17 	ldw	r3,-72(fp)
   10838:	e0bfef17 	ldw	r2,-68(fp)
   1083c:	1885883a 	add	r2,r3,r2
   10840:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));
   10844:	e0ff6917 	ldw	r3,-604(fp)
   10848:	00800184 	movi	r2,6
   1084c:	1886583a 	ror	r3,r3,r2
   10850:	e13f6917 	ldw	r4,-604(fp)
   10854:	008002c4 	movi	r2,11
   10858:	2084583a 	ror	r2,r4,r2
   1085c:	1886f03a 	xor	r3,r3,r2
   10860:	e0bf6917 	ldw	r2,-604(fp)
   10864:	100411fa 	roli	r2,r2,7
   10868:	1886f03a 	xor	r3,r3,r2
   1086c:	e0bf6c17 	ldw	r2,-592(fp)
   10870:	1887883a 	add	r3,r3,r2
   10874:	e13f6a17 	ldw	r4,-600(fp)
   10878:	e0bf6b17 	ldw	r2,-596(fp)
   1087c:	2088f03a 	xor	r4,r4,r2
   10880:	e0bf6917 	ldw	r2,-604(fp)
   10884:	2088703a 	and	r4,r4,r2
   10888:	e0bf6b17 	ldw	r2,-596(fp)
   1088c:	2084f03a 	xor	r2,r4,r2
   10890:	1887883a 	add	r3,r3,r2
   10894:	e0bf8317 	ldw	r2,-500(fp)
   10898:	100813fa 	roli	r4,r2,15
   1089c:	e0bf8317 	ldw	r2,-500(fp)
   108a0:	1004137a 	roli	r2,r2,13
   108a4:	2088f03a 	xor	r4,r4,r2
   108a8:	e0bf8317 	ldw	r2,-500(fp)
   108ac:	1004d2ba 	srli	r2,r2,10
   108b0:	2088f03a 	xor	r4,r4,r2
   108b4:	e0bf7417 	ldw	r2,-560(fp)
   108b8:	2089883a 	add	r4,r4,r2
   108bc:	e17f8c17 	ldw	r5,-464(fp)
   108c0:	008001c4 	movi	r2,7
   108c4:	288a583a 	ror	r5,r5,r2
   108c8:	e0bf8c17 	ldw	r2,-464(fp)
   108cc:	100413ba 	roli	r2,r2,14
   108d0:	288af03a 	xor	r5,r5,r2
   108d4:	e0bf8c17 	ldw	r2,-464(fp)
   108d8:	1004d0fa 	srli	r2,r2,3
   108dc:	2884f03a 	xor	r2,r5,r2
   108e0:	2085883a 	add	r2,r4,r2
   108e4:	e13f8917 	ldw	r4,-476(fp)
   108e8:	2085883a 	add	r2,r4,r2
   108ec:	e0bf8915 	stw	r2,-476(fp)
   108f0:	e0bf8917 	ldw	r2,-476(fp)
   108f4:	1887883a 	add	r3,r3,r2
   108f8:	009e2974 	movhi	r2,30885
   108fc:	1098dbc4 	addi	r2,r2,25455
   10900:	1885883a 	add	r2,r3,r2
   10904:	e0bff015 	stw	r2,-64(fp)
   10908:	e0ff6d17 	ldw	r3,-588(fp)
   1090c:	00800084 	movi	r2,2
   10910:	1886583a 	ror	r3,r3,r2
   10914:	e13f6d17 	ldw	r4,-588(fp)
   10918:	00800344 	movi	r2,13
   1091c:	2084583a 	ror	r2,r4,r2
   10920:	1886f03a 	xor	r3,r3,r2
   10924:	e0bf6d17 	ldw	r2,-588(fp)
   10928:	100412ba 	roli	r2,r2,10
   1092c:	1886f03a 	xor	r3,r3,r2
   10930:	e13f6d17 	ldw	r4,-588(fp)
   10934:	e0bf6617 	ldw	r2,-616(fp)
   10938:	2088703a 	and	r4,r4,r2
   1093c:	e17f6d17 	ldw	r5,-588(fp)
   10940:	e0bf6617 	ldw	r2,-616(fp)
   10944:	288ab03a 	or	r5,r5,r2
   10948:	e0bf6717 	ldw	r2,-612(fp)
   1094c:	2884703a 	and	r2,r5,r2
   10950:	2084b03a 	or	r2,r4,r2
   10954:	1885883a 	add	r2,r3,r2
   10958:	e0bff115 	stw	r2,-60(fp)
   1095c:	e0ff6817 	ldw	r3,-608(fp)
   10960:	e0bff017 	ldw	r2,-64(fp)
   10964:	1885883a 	add	r2,r3,r2
   10968:	e0bf6815 	stw	r2,-608(fp)
   1096c:	e0fff017 	ldw	r3,-64(fp)
   10970:	e0bff117 	ldw	r2,-60(fp)
   10974:	1885883a 	add	r2,r3,r2
   10978:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));
   1097c:	e0ff6817 	ldw	r3,-608(fp)
   10980:	00800184 	movi	r2,6
   10984:	1886583a 	ror	r3,r3,r2
   10988:	e13f6817 	ldw	r4,-608(fp)
   1098c:	008002c4 	movi	r2,11
   10990:	2084583a 	ror	r2,r4,r2
   10994:	1886f03a 	xor	r3,r3,r2
   10998:	e0bf6817 	ldw	r2,-608(fp)
   1099c:	100411fa 	roli	r2,r2,7
   109a0:	1886f03a 	xor	r3,r3,r2
   109a4:	e0bf6b17 	ldw	r2,-596(fp)
   109a8:	1887883a 	add	r3,r3,r2
   109ac:	e13f6917 	ldw	r4,-604(fp)
   109b0:	e0bf6a17 	ldw	r2,-600(fp)
   109b4:	2088f03a 	xor	r4,r4,r2
   109b8:	e0bf6817 	ldw	r2,-608(fp)
   109bc:	2088703a 	and	r4,r4,r2
   109c0:	e0bf6a17 	ldw	r2,-600(fp)
   109c4:	2084f03a 	xor	r2,r4,r2
   109c8:	1887883a 	add	r3,r3,r2
   109cc:	e0bf8617 	ldw	r2,-488(fp)
   109d0:	100813fa 	roli	r4,r2,15
   109d4:	e0bf8617 	ldw	r2,-488(fp)
   109d8:	1004137a 	roli	r2,r2,13
   109dc:	2088f03a 	xor	r4,r4,r2
   109e0:	e0bf8617 	ldw	r2,-488(fp)
   109e4:	1004d2ba 	srli	r2,r2,10
   109e8:	2088f03a 	xor	r4,r4,r2
   109ec:	e0bf7717 	ldw	r2,-548(fp)
   109f0:	2089883a 	add	r4,r4,r2
   109f4:	e17f8f17 	ldw	r5,-452(fp)
   109f8:	008001c4 	movi	r2,7
   109fc:	288a583a 	ror	r5,r5,r2
   10a00:	e0bf8f17 	ldw	r2,-452(fp)
   10a04:	100413ba 	roli	r2,r2,14
   10a08:	288af03a 	xor	r5,r5,r2
   10a0c:	e0bf8f17 	ldw	r2,-452(fp)
   10a10:	1004d0fa 	srli	r2,r2,3
   10a14:	2884f03a 	xor	r2,r5,r2
   10a18:	2085883a 	add	r2,r4,r2
   10a1c:	e13f8c17 	ldw	r4,-464(fp)
   10a20:	2085883a 	add	r2,r4,r2
   10a24:	e0bf8c15 	stw	r2,-464(fp)
   10a28:	e0bf8c17 	ldw	r2,-464(fp)
   10a2c:	1887883a 	add	r3,r3,r2
   10a30:	00a13234 	movhi	r2,33992
   10a34:	109e0504 	addi	r2,r2,30740
   10a38:	1885883a 	add	r2,r3,r2
   10a3c:	e0bff215 	stw	r2,-56(fp)
   10a40:	e0ff6c17 	ldw	r3,-592(fp)
   10a44:	00800084 	movi	r2,2
   10a48:	1886583a 	ror	r3,r3,r2
   10a4c:	e13f6c17 	ldw	r4,-592(fp)
   10a50:	00800344 	movi	r2,13
   10a54:	2084583a 	ror	r2,r4,r2
   10a58:	1886f03a 	xor	r3,r3,r2
   10a5c:	e0bf6c17 	ldw	r2,-592(fp)
   10a60:	100412ba 	roli	r2,r2,10
   10a64:	1886f03a 	xor	r3,r3,r2
   10a68:	e13f6c17 	ldw	r4,-592(fp)
   10a6c:	e0bf6d17 	ldw	r2,-588(fp)
   10a70:	2088703a 	and	r4,r4,r2
   10a74:	e17f6c17 	ldw	r5,-592(fp)
   10a78:	e0bf6d17 	ldw	r2,-588(fp)
   10a7c:	288ab03a 	or	r5,r5,r2
   10a80:	e0bf6617 	ldw	r2,-616(fp)
   10a84:	2884703a 	and	r2,r5,r2
   10a88:	2084b03a 	or	r2,r4,r2
   10a8c:	1885883a 	add	r2,r3,r2
   10a90:	e0bff315 	stw	r2,-52(fp)
   10a94:	e0ff6717 	ldw	r3,-612(fp)
   10a98:	e0bff217 	ldw	r2,-56(fp)
   10a9c:	1885883a 	add	r2,r3,r2
   10aa0:	e0bf6715 	stw	r2,-612(fp)
   10aa4:	e0fff217 	ldw	r3,-56(fp)
   10aa8:	e0bff317 	ldw	r2,-52(fp)
   10aac:	1885883a 	add	r2,r3,r2
   10ab0:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));
   10ab4:	e0ff6717 	ldw	r3,-612(fp)
   10ab8:	00800184 	movi	r2,6
   10abc:	1886583a 	ror	r3,r3,r2
   10ac0:	e13f6717 	ldw	r4,-612(fp)
   10ac4:	008002c4 	movi	r2,11
   10ac8:	2084583a 	ror	r2,r4,r2
   10acc:	1886f03a 	xor	r3,r3,r2
   10ad0:	e0bf6717 	ldw	r2,-612(fp)
   10ad4:	100411fa 	roli	r2,r2,7
   10ad8:	1886f03a 	xor	r3,r3,r2
   10adc:	e0bf6a17 	ldw	r2,-600(fp)
   10ae0:	1887883a 	add	r3,r3,r2
   10ae4:	e13f6817 	ldw	r4,-608(fp)
   10ae8:	e0bf6917 	ldw	r2,-604(fp)
   10aec:	2088f03a 	xor	r4,r4,r2
   10af0:	e0bf6717 	ldw	r2,-612(fp)
   10af4:	2088703a 	and	r4,r4,r2
   10af8:	e0bf6917 	ldw	r2,-604(fp)
   10afc:	2084f03a 	xor	r2,r4,r2
   10b00:	1887883a 	add	r3,r3,r2
   10b04:	e0bf8917 	ldw	r2,-476(fp)
   10b08:	100813fa 	roli	r4,r2,15
   10b0c:	e0bf8917 	ldw	r2,-476(fp)
   10b10:	1004137a 	roli	r2,r2,13
   10b14:	2088f03a 	xor	r4,r4,r2
   10b18:	e0bf8917 	ldw	r2,-476(fp)
   10b1c:	1004d2ba 	srli	r2,r2,10
   10b20:	2088f03a 	xor	r4,r4,r2
   10b24:	e0bf7a17 	ldw	r2,-536(fp)
   10b28:	2089883a 	add	r4,r4,r2
   10b2c:	e17f9217 	ldw	r5,-440(fp)
   10b30:	008001c4 	movi	r2,7
   10b34:	288a583a 	ror	r5,r5,r2
   10b38:	e0bf9217 	ldw	r2,-440(fp)
   10b3c:	100413ba 	roli	r2,r2,14
   10b40:	288af03a 	xor	r5,r5,r2
   10b44:	e0bf9217 	ldw	r2,-440(fp)
   10b48:	1004d0fa 	srli	r2,r2,3
   10b4c:	2884f03a 	xor	r2,r5,r2
   10b50:	2085883a 	add	r2,r4,r2
   10b54:	e13f8f17 	ldw	r4,-452(fp)
   10b58:	2085883a 	add	r2,r4,r2
   10b5c:	e0bf8f15 	stw	r2,-452(fp)
   10b60:	e0bf8f17 	ldw	r2,-452(fp)
   10b64:	1887883a 	add	r3,r3,r2
   10b68:	00a331f4 	movhi	r2,36039
   10b6c:	10808204 	addi	r2,r2,520
   10b70:	1885883a 	add	r2,r3,r2
   10b74:	e0bff415 	stw	r2,-48(fp)
   10b78:	e0ff6b17 	ldw	r3,-596(fp)
   10b7c:	00800084 	movi	r2,2
   10b80:	1886583a 	ror	r3,r3,r2
   10b84:	e13f6b17 	ldw	r4,-596(fp)
   10b88:	00800344 	movi	r2,13
   10b8c:	2084583a 	ror	r2,r4,r2
   10b90:	1886f03a 	xor	r3,r3,r2
   10b94:	e0bf6b17 	ldw	r2,-596(fp)
   10b98:	100412ba 	roli	r2,r2,10
   10b9c:	1886f03a 	xor	r3,r3,r2
   10ba0:	e13f6b17 	ldw	r4,-596(fp)
   10ba4:	e0bf6c17 	ldw	r2,-592(fp)
   10ba8:	2088703a 	and	r4,r4,r2
   10bac:	e17f6b17 	ldw	r5,-596(fp)
   10bb0:	e0bf6c17 	ldw	r2,-592(fp)
   10bb4:	288ab03a 	or	r5,r5,r2
   10bb8:	e0bf6d17 	ldw	r2,-588(fp)
   10bbc:	2884703a 	and	r2,r5,r2
   10bc0:	2084b03a 	or	r2,r4,r2
   10bc4:	1885883a 	add	r2,r3,r2
   10bc8:	e0bff515 	stw	r2,-44(fp)
   10bcc:	e0ff6617 	ldw	r3,-616(fp)
   10bd0:	e0bff417 	ldw	r2,-48(fp)
   10bd4:	1885883a 	add	r2,r3,r2
   10bd8:	e0bf6615 	stw	r2,-616(fp)
   10bdc:	e0fff417 	ldw	r3,-48(fp)
   10be0:	e0bff517 	ldw	r2,-44(fp)
   10be4:	1885883a 	add	r2,r3,r2
   10be8:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));
   10bec:	e0ff6617 	ldw	r3,-616(fp)
   10bf0:	00800184 	movi	r2,6
   10bf4:	1886583a 	ror	r3,r3,r2
   10bf8:	e13f6617 	ldw	r4,-616(fp)
   10bfc:	008002c4 	movi	r2,11
   10c00:	2084583a 	ror	r2,r4,r2
   10c04:	1886f03a 	xor	r3,r3,r2
   10c08:	e0bf6617 	ldw	r2,-616(fp)
   10c0c:	100411fa 	roli	r2,r2,7
   10c10:	1886f03a 	xor	r3,r3,r2
   10c14:	e0bf6917 	ldw	r2,-604(fp)
   10c18:	1887883a 	add	r3,r3,r2
   10c1c:	e13f6717 	ldw	r4,-612(fp)
   10c20:	e0bf6817 	ldw	r2,-608(fp)
   10c24:	2088f03a 	xor	r4,r4,r2
   10c28:	e0bf6617 	ldw	r2,-616(fp)
   10c2c:	2088703a 	and	r4,r4,r2
   10c30:	e0bf6817 	ldw	r2,-608(fp)
   10c34:	2084f03a 	xor	r2,r4,r2
   10c38:	1887883a 	add	r3,r3,r2
   10c3c:	e0bf8c17 	ldw	r2,-464(fp)
   10c40:	100813fa 	roli	r4,r2,15
   10c44:	e0bf8c17 	ldw	r2,-464(fp)
   10c48:	1004137a 	roli	r2,r2,13
   10c4c:	2088f03a 	xor	r4,r4,r2
   10c50:	e0bf8c17 	ldw	r2,-464(fp)
   10c54:	1004d2ba 	srli	r2,r2,10
   10c58:	2088f03a 	xor	r4,r4,r2
   10c5c:	e0bf7d17 	ldw	r2,-524(fp)
   10c60:	2089883a 	add	r4,r4,r2
   10c64:	e17f9517 	ldw	r5,-428(fp)
   10c68:	008001c4 	movi	r2,7
   10c6c:	288a583a 	ror	r5,r5,r2
   10c70:	e0bf9517 	ldw	r2,-428(fp)
   10c74:	100413ba 	roli	r2,r2,14
   10c78:	288af03a 	xor	r5,r5,r2
   10c7c:	e0bf9517 	ldw	r2,-428(fp)
   10c80:	1004d0fa 	srli	r2,r2,3
   10c84:	2884f03a 	xor	r2,r5,r2
   10c88:	2085883a 	add	r2,r4,r2
   10c8c:	e13f9217 	ldw	r4,-440(fp)
   10c90:	2085883a 	add	r2,r4,r2
   10c94:	e0bf9215 	stw	r2,-440(fp)
   10c98:	e0bf9217 	ldw	r2,-440(fp)
   10c9c:	1887883a 	add	r3,r3,r2
   10ca0:	00a42ff4 	movhi	r2,37055
   10ca4:	10bffe84 	addi	r2,r2,-6
   10ca8:	1885883a 	add	r2,r3,r2
   10cac:	e0bff615 	stw	r2,-40(fp)
   10cb0:	e0ff6a17 	ldw	r3,-600(fp)
   10cb4:	00800084 	movi	r2,2
   10cb8:	1886583a 	ror	r3,r3,r2
   10cbc:	e13f6a17 	ldw	r4,-600(fp)
   10cc0:	00800344 	movi	r2,13
   10cc4:	2084583a 	ror	r2,r4,r2
   10cc8:	1886f03a 	xor	r3,r3,r2
   10ccc:	e0bf6a17 	ldw	r2,-600(fp)
   10cd0:	100412ba 	roli	r2,r2,10
   10cd4:	1886f03a 	xor	r3,r3,r2
   10cd8:	e13f6a17 	ldw	r4,-600(fp)
   10cdc:	e0bf6b17 	ldw	r2,-596(fp)
   10ce0:	2088703a 	and	r4,r4,r2
   10ce4:	e17f6a17 	ldw	r5,-600(fp)
   10ce8:	e0bf6b17 	ldw	r2,-596(fp)
   10cec:	288ab03a 	or	r5,r5,r2
   10cf0:	e0bf6c17 	ldw	r2,-592(fp)
   10cf4:	2884703a 	and	r2,r5,r2
   10cf8:	2084b03a 	or	r2,r4,r2
   10cfc:	1885883a 	add	r2,r3,r2
   10d00:	e0bff715 	stw	r2,-36(fp)
   10d04:	e0ff6d17 	ldw	r3,-588(fp)
   10d08:	e0bff617 	ldw	r2,-40(fp)
   10d0c:	1885883a 	add	r2,r3,r2
   10d10:	e0bf6d15 	stw	r2,-588(fp)
   10d14:	e0fff617 	ldw	r3,-40(fp)
   10d18:	e0bff717 	ldw	r2,-36(fp)
   10d1c:	1885883a 	add	r2,r3,r2
   10d20:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));
   10d24:	e0ff6d17 	ldw	r3,-588(fp)
   10d28:	00800184 	movi	r2,6
   10d2c:	1886583a 	ror	r3,r3,r2
   10d30:	e13f6d17 	ldw	r4,-588(fp)
   10d34:	008002c4 	movi	r2,11
   10d38:	2084583a 	ror	r2,r4,r2
   10d3c:	1886f03a 	xor	r3,r3,r2
   10d40:	e0bf6d17 	ldw	r2,-588(fp)
   10d44:	100411fa 	roli	r2,r2,7
   10d48:	1886f03a 	xor	r3,r3,r2
   10d4c:	e0bf6817 	ldw	r2,-608(fp)
   10d50:	1887883a 	add	r3,r3,r2
   10d54:	e13f6617 	ldw	r4,-616(fp)
   10d58:	e0bf6717 	ldw	r2,-612(fp)
   10d5c:	2088f03a 	xor	r4,r4,r2
   10d60:	e0bf6d17 	ldw	r2,-588(fp)
   10d64:	2088703a 	and	r4,r4,r2
   10d68:	e0bf6717 	ldw	r2,-612(fp)
   10d6c:	2084f03a 	xor	r2,r4,r2
   10d70:	1887883a 	add	r3,r3,r2
   10d74:	e0bf8f17 	ldw	r2,-452(fp)
   10d78:	100813fa 	roli	r4,r2,15
   10d7c:	e0bf8f17 	ldw	r2,-452(fp)
   10d80:	1004137a 	roli	r2,r2,13
   10d84:	2088f03a 	xor	r4,r4,r2
   10d88:	e0bf8f17 	ldw	r2,-452(fp)
   10d8c:	1004d2ba 	srli	r2,r2,10
   10d90:	2088f03a 	xor	r4,r4,r2
   10d94:	e0bf8017 	ldw	r2,-512(fp)
   10d98:	2089883a 	add	r4,r4,r2
   10d9c:	e17f9817 	ldw	r5,-416(fp)
   10da0:	008001c4 	movi	r2,7
   10da4:	288a583a 	ror	r5,r5,r2
   10da8:	e0bf9817 	ldw	r2,-416(fp)
   10dac:	100413ba 	roli	r2,r2,14
   10db0:	288af03a 	xor	r5,r5,r2
   10db4:	e0bf9817 	ldw	r2,-416(fp)
   10db8:	1004d0fa 	srli	r2,r2,3
   10dbc:	2884f03a 	xor	r2,r5,r2
   10dc0:	2085883a 	add	r2,r4,r2
   10dc4:	e13f9517 	ldw	r4,-428(fp)
   10dc8:	2085883a 	add	r2,r4,r2
   10dcc:	e0bf9515 	stw	r2,-428(fp)
   10dd0:	e0bf9517 	ldw	r2,-428(fp)
   10dd4:	1887883a 	add	r3,r3,r2
   10dd8:	00a91434 	movhi	r2,42064
   10ddc:	109b3ac4 	addi	r2,r2,27883
   10de0:	1885883a 	add	r2,r3,r2
   10de4:	e0bff815 	stw	r2,-32(fp)
   10de8:	e0ff6917 	ldw	r3,-604(fp)
   10dec:	00800084 	movi	r2,2
   10df0:	1886583a 	ror	r3,r3,r2
   10df4:	e13f6917 	ldw	r4,-604(fp)
   10df8:	00800344 	movi	r2,13
   10dfc:	2084583a 	ror	r2,r4,r2
   10e00:	1886f03a 	xor	r3,r3,r2
   10e04:	e0bf6917 	ldw	r2,-604(fp)
   10e08:	100412ba 	roli	r2,r2,10
   10e0c:	1886f03a 	xor	r3,r3,r2
   10e10:	e13f6917 	ldw	r4,-604(fp)
   10e14:	e0bf6a17 	ldw	r2,-600(fp)
   10e18:	2088703a 	and	r4,r4,r2
   10e1c:	e17f6917 	ldw	r5,-604(fp)
   10e20:	e0bf6a17 	ldw	r2,-600(fp)
   10e24:	288ab03a 	or	r5,r5,r2
   10e28:	e0bf6b17 	ldw	r2,-596(fp)
   10e2c:	2884703a 	and	r2,r5,r2
   10e30:	2084b03a 	or	r2,r4,r2
   10e34:	1885883a 	add	r2,r3,r2
   10e38:	e0bff915 	stw	r2,-28(fp)
   10e3c:	e0ff6c17 	ldw	r3,-592(fp)
   10e40:	e0bff817 	ldw	r2,-32(fp)
   10e44:	1885883a 	add	r2,r3,r2
   10e48:	e0bf6c15 	stw	r2,-592(fp)
   10e4c:	e0fff817 	ldw	r3,-32(fp)
   10e50:	e0bff917 	ldw	r2,-28(fp)
   10e54:	1885883a 	add	r2,r3,r2
   10e58:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));
   10e5c:	e0ff6c17 	ldw	r3,-592(fp)
   10e60:	00800184 	movi	r2,6
   10e64:	1886583a 	ror	r3,r3,r2
   10e68:	e13f6c17 	ldw	r4,-592(fp)
   10e6c:	008002c4 	movi	r2,11
   10e70:	2084583a 	ror	r2,r4,r2
   10e74:	1886f03a 	xor	r3,r3,r2
   10e78:	e0bf6c17 	ldw	r2,-592(fp)
   10e7c:	100411fa 	roli	r2,r2,7
   10e80:	1886f03a 	xor	r3,r3,r2
   10e84:	e0bf6717 	ldw	r2,-612(fp)
   10e88:	1887883a 	add	r3,r3,r2
   10e8c:	e13f6d17 	ldw	r4,-588(fp)
   10e90:	e0bf6617 	ldw	r2,-616(fp)
   10e94:	2088f03a 	xor	r4,r4,r2
   10e98:	e0bf6c17 	ldw	r2,-592(fp)
   10e9c:	2088703a 	and	r4,r4,r2
   10ea0:	e0bf6617 	ldw	r2,-616(fp)
   10ea4:	2084f03a 	xor	r2,r4,r2
   10ea8:	1887883a 	add	r3,r3,r2
   10eac:	e0bf9217 	ldw	r2,-440(fp)
   10eb0:	100813fa 	roli	r4,r2,15
   10eb4:	e0bf9217 	ldw	r2,-440(fp)
   10eb8:	1004137a 	roli	r2,r2,13
   10ebc:	2088f03a 	xor	r4,r4,r2
   10ec0:	e0bf9217 	ldw	r2,-440(fp)
   10ec4:	1004d2ba 	srli	r2,r2,10
   10ec8:	2088f03a 	xor	r4,r4,r2
   10ecc:	e0bf9817 	ldw	r2,-416(fp)
   10ed0:	2089883a 	add	r4,r4,r2
   10ed4:	e0bf8317 	ldw	r2,-500(fp)
   10ed8:	2089883a 	add	r4,r4,r2
   10edc:	e17f9b17 	ldw	r5,-404(fp)
   10ee0:	008001c4 	movi	r2,7
   10ee4:	288a583a 	ror	r5,r5,r2
   10ee8:	e0bf9b17 	ldw	r2,-404(fp)
   10eec:	100413ba 	roli	r2,r2,14
   10ef0:	288af03a 	xor	r5,r5,r2
   10ef4:	e0bf9b17 	ldw	r2,-404(fp)
   10ef8:	1004d0fa 	srli	r2,r2,3
   10efc:	2884f03a 	xor	r2,r5,r2
   10f00:	2085883a 	add	r2,r4,r2
   10f04:	1887883a 	add	r3,r3,r2
   10f08:	00afbeb4 	movhi	r2,48890
   10f0c:	10a8fdc4 	addi	r2,r2,-23561
   10f10:	1885883a 	add	r2,r3,r2
   10f14:	e0bffa15 	stw	r2,-24(fp)
   10f18:	e0ff6817 	ldw	r3,-608(fp)
   10f1c:	00800084 	movi	r2,2
   10f20:	1886583a 	ror	r3,r3,r2
   10f24:	e13f6817 	ldw	r4,-608(fp)
   10f28:	00800344 	movi	r2,13
   10f2c:	2084583a 	ror	r2,r4,r2
   10f30:	1886f03a 	xor	r3,r3,r2
   10f34:	e0bf6817 	ldw	r2,-608(fp)
   10f38:	100412ba 	roli	r2,r2,10
   10f3c:	1886f03a 	xor	r3,r3,r2
   10f40:	e13f6817 	ldw	r4,-608(fp)
   10f44:	e0bf6917 	ldw	r2,-604(fp)
   10f48:	2088703a 	and	r4,r4,r2
   10f4c:	e17f6817 	ldw	r5,-608(fp)
   10f50:	e0bf6917 	ldw	r2,-604(fp)
   10f54:	288ab03a 	or	r5,r5,r2
   10f58:	e0bf6a17 	ldw	r2,-600(fp)
   10f5c:	2884703a 	and	r2,r5,r2
   10f60:	2084b03a 	or	r2,r4,r2
   10f64:	1885883a 	add	r2,r3,r2
   10f68:	e0bffb15 	stw	r2,-20(fp)
   10f6c:	e0ff6b17 	ldw	r3,-596(fp)
   10f70:	e0bffa17 	ldw	r2,-24(fp)
   10f74:	1885883a 	add	r2,r3,r2
   10f78:	e0bf6b15 	stw	r2,-596(fp)
   10f7c:	e0fffa17 	ldw	r3,-24(fp)
   10f80:	e0bffb17 	ldw	r2,-20(fp)
   10f84:	1885883a 	add	r2,r3,r2
   10f88:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));
   10f8c:	e0ff6b17 	ldw	r3,-596(fp)
   10f90:	00800184 	movi	r2,6
   10f94:	1886583a 	ror	r3,r3,r2
   10f98:	e13f6b17 	ldw	r4,-596(fp)
   10f9c:	008002c4 	movi	r2,11
   10fa0:	2084583a 	ror	r2,r4,r2
   10fa4:	1886f03a 	xor	r3,r3,r2
   10fa8:	e0bf6b17 	ldw	r2,-596(fp)
   10fac:	100411fa 	roli	r2,r2,7
   10fb0:	1886f03a 	xor	r3,r3,r2
   10fb4:	e0bf6617 	ldw	r2,-616(fp)
   10fb8:	1887883a 	add	r3,r3,r2
   10fbc:	e13f6c17 	ldw	r4,-592(fp)
   10fc0:	e0bf6d17 	ldw	r2,-588(fp)
   10fc4:	2088f03a 	xor	r4,r4,r2
   10fc8:	e0bf6b17 	ldw	r2,-596(fp)
   10fcc:	2088703a 	and	r4,r4,r2
   10fd0:	e0bf6d17 	ldw	r2,-588(fp)
   10fd4:	2084f03a 	xor	r2,r4,r2
   10fd8:	1887883a 	add	r3,r3,r2
   10fdc:	e0bf9517 	ldw	r2,-428(fp)
   10fe0:	100813fa 	roli	r4,r2,15
   10fe4:	e0bf9517 	ldw	r2,-428(fp)
   10fe8:	1004137a 	roli	r2,r2,13
   10fec:	2088f03a 	xor	r4,r4,r2
   10ff0:	e0bf9517 	ldw	r2,-428(fp)
   10ff4:	1004d2ba 	srli	r2,r2,10
   10ff8:	2088f03a 	xor	r4,r4,r2
   10ffc:	e0bf9b17 	ldw	r2,-404(fp)
   11000:	2089883a 	add	r4,r4,r2
   11004:	e0bf8617 	ldw	r2,-488(fp)
   11008:	2089883a 	add	r4,r4,r2
   1100c:	e17f6e17 	ldw	r5,-584(fp)
   11010:	008001c4 	movi	r2,7
   11014:	288a583a 	ror	r5,r5,r2
   11018:	e0bf6e17 	ldw	r2,-584(fp)
   1101c:	100413ba 	roli	r2,r2,14
   11020:	288af03a 	xor	r5,r5,r2
   11024:	e0bf6e17 	ldw	r2,-584(fp)
   11028:	1004d0fa 	srli	r2,r2,3
   1102c:	2884f03a 	xor	r2,r5,r2
   11030:	2085883a 	add	r2,r4,r2
   11034:	1887883a 	add	r3,r3,r2
   11038:	00b19c74 	movhi	r2,50801
   1103c:	109e3c84 	addi	r2,r2,30962
   11040:	1885883a 	add	r2,r3,r2
   11044:	e0bffc15 	stw	r2,-16(fp)
   11048:	e0ff6717 	ldw	r3,-612(fp)
   1104c:	00800084 	movi	r2,2
   11050:	1886583a 	ror	r3,r3,r2
   11054:	e13f6717 	ldw	r4,-612(fp)
   11058:	00800344 	movi	r2,13
   1105c:	2084583a 	ror	r2,r4,r2
   11060:	1886f03a 	xor	r3,r3,r2
   11064:	e0bf6717 	ldw	r2,-612(fp)
   11068:	100412ba 	roli	r2,r2,10
   1106c:	1886f03a 	xor	r3,r3,r2
   11070:	e13f6717 	ldw	r4,-612(fp)
   11074:	e0bf6817 	ldw	r2,-608(fp)
   11078:	2088703a 	and	r4,r4,r2
   1107c:	e17f6717 	ldw	r5,-612(fp)
   11080:	e0bf6817 	ldw	r2,-608(fp)
   11084:	288ab03a 	or	r5,r5,r2
   11088:	e0bf6917 	ldw	r2,-604(fp)
   1108c:	2884703a 	and	r2,r5,r2
   11090:	2084b03a 	or	r2,r4,r2
   11094:	1885883a 	add	r2,r3,r2
   11098:	e0bffd15 	stw	r2,-12(fp)
   1109c:	e0ff6a17 	ldw	r3,-600(fp)
   110a0:	e0bffc17 	ldw	r2,-16(fp)
   110a4:	1885883a 	add	r2,r3,r2
   110a8:	e0bf6a15 	stw	r2,-600(fp)
   110ac:	e0fffc17 	ldw	r3,-16(fp)
   110b0:	e0bffd17 	ldw	r2,-12(fp)
   110b4:	1885883a 	add	r2,r3,r2
   110b8:	e0bf6615 	stw	r2,-616(fp)

    s[0] += a;
   110bc:	e0bffe17 	ldw	r2,-8(fp)
   110c0:	10c00017 	ldw	r3,0(r2)
   110c4:	e0bf6617 	ldw	r2,-616(fp)
   110c8:	1887883a 	add	r3,r3,r2
   110cc:	e0bffe17 	ldw	r2,-8(fp)
   110d0:	10c00015 	stw	r3,0(r2)
    s[1] += b;
   110d4:	e0bffe17 	ldw	r2,-8(fp)
   110d8:	10800104 	addi	r2,r2,4
   110dc:	e0fffe17 	ldw	r3,-8(fp)
   110e0:	18c00104 	addi	r3,r3,4
   110e4:	19000017 	ldw	r4,0(r3)
   110e8:	e0ff6717 	ldw	r3,-612(fp)
   110ec:	20c7883a 	add	r3,r4,r3
   110f0:	10c00015 	stw	r3,0(r2)
    s[2] += c;
   110f4:	e0bffe17 	ldw	r2,-8(fp)
   110f8:	10800204 	addi	r2,r2,8
   110fc:	e0fffe17 	ldw	r3,-8(fp)
   11100:	18c00204 	addi	r3,r3,8
   11104:	19000017 	ldw	r4,0(r3)
   11108:	e0ff6817 	ldw	r3,-608(fp)
   1110c:	20c7883a 	add	r3,r4,r3
   11110:	10c00015 	stw	r3,0(r2)
    s[3] += d;
   11114:	e0bffe17 	ldw	r2,-8(fp)
   11118:	10800304 	addi	r2,r2,12
   1111c:	e0fffe17 	ldw	r3,-8(fp)
   11120:	18c00304 	addi	r3,r3,12
   11124:	19000017 	ldw	r4,0(r3)
   11128:	e0ff6917 	ldw	r3,-604(fp)
   1112c:	20c7883a 	add	r3,r4,r3
   11130:	10c00015 	stw	r3,0(r2)
    s[4] += e;
   11134:	e0bffe17 	ldw	r2,-8(fp)
   11138:	10800404 	addi	r2,r2,16
   1113c:	e0fffe17 	ldw	r3,-8(fp)
   11140:	18c00404 	addi	r3,r3,16
   11144:	19000017 	ldw	r4,0(r3)
   11148:	e0ff6a17 	ldw	r3,-600(fp)
   1114c:	20c7883a 	add	r3,r4,r3
   11150:	10c00015 	stw	r3,0(r2)
    s[5] += f;
   11154:	e0bffe17 	ldw	r2,-8(fp)
   11158:	10800504 	addi	r2,r2,20
   1115c:	e0fffe17 	ldw	r3,-8(fp)
   11160:	18c00504 	addi	r3,r3,20
   11164:	19000017 	ldw	r4,0(r3)
   11168:	e0ff6b17 	ldw	r3,-596(fp)
   1116c:	20c7883a 	add	r3,r4,r3
   11170:	10c00015 	stw	r3,0(r2)
    s[6] += g;
   11174:	e0bffe17 	ldw	r2,-8(fp)
   11178:	10800604 	addi	r2,r2,24
   1117c:	e0fffe17 	ldw	r3,-8(fp)
   11180:	18c00604 	addi	r3,r3,24
   11184:	19000017 	ldw	r4,0(r3)
   11188:	e0ff6c17 	ldw	r3,-592(fp)
   1118c:	20c7883a 	add	r3,r4,r3
   11190:	10c00015 	stw	r3,0(r2)
    s[7] += h;
   11194:	e0bffe17 	ldw	r2,-8(fp)
   11198:	10800704 	addi	r2,r2,28
   1119c:	e0fffe17 	ldw	r3,-8(fp)
   111a0:	18c00704 	addi	r3,r3,28
   111a4:	19000017 	ldw	r4,0(r3)
   111a8:	e0ff6d17 	ldw	r3,-588(fp)
   111ac:	20c7883a 	add	r3,r4,r3
   111b0:	10c00015 	stw	r3,0(r2)
}
   111b4:	0001883a 	nop
   111b8:	e037883a 	mov	sp,fp
   111bc:	df000017 	ldw	fp,0(sp)
   111c0:	dec00104 	addi	sp,sp,4
   111c4:	f800283a 	ret

000111c8 <secp256k1_sha256_write>:

static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {
   111c8:	defffa04 	addi	sp,sp,-24
   111cc:	dfc00515 	stw	ra,20(sp)
   111d0:	df000415 	stw	fp,16(sp)
   111d4:	df000404 	addi	fp,sp,16
   111d8:	e13ffd15 	stw	r4,-12(fp)
   111dc:	e17ffe15 	stw	r5,-8(fp)
   111e0:	e1bfff15 	stw	r6,-4(fp)
    size_t bufsize = hash->bytes & 0x3F;
   111e4:	e0bffd17 	ldw	r2,-12(fp)
   111e8:	10801817 	ldw	r2,96(r2)
   111ec:	10800fcc 	andi	r2,r2,63
   111f0:	e0bffc15 	stw	r2,-16(fp)
    hash->bytes += len;
   111f4:	e0bffd17 	ldw	r2,-12(fp)
   111f8:	10c01817 	ldw	r3,96(r2)
   111fc:	e0bfff17 	ldw	r2,-4(fp)
   11200:	1887883a 	add	r3,r3,r2
   11204:	e0bffd17 	ldw	r2,-12(fp)
   11208:	10c01815 	stw	r3,96(r2)
    while (bufsize + len >= 64) {
   1120c:	00001c06 	br	11280 <secp256k1_sha256_write+0xb8>
        /* Fill the buffer, and process it. */
        memcpy(((unsigned char*)hash->buf) + bufsize, data, 64 - bufsize);
   11210:	e0bffd17 	ldw	r2,-12(fp)
   11214:	10c00804 	addi	r3,r2,32
   11218:	e0bffc17 	ldw	r2,-16(fp)
   1121c:	1889883a 	add	r4,r3,r2
   11220:	00c01004 	movi	r3,64
   11224:	e0bffc17 	ldw	r2,-16(fp)
   11228:	1885c83a 	sub	r2,r3,r2
   1122c:	100d883a 	mov	r6,r2
   11230:	e17ffe17 	ldw	r5,-8(fp)
   11234:	0045c980 	call	45c98 <memcpy>
        data += 64 - bufsize;
   11238:	00c01004 	movi	r3,64
   1123c:	e0bffc17 	ldw	r2,-16(fp)
   11240:	1885c83a 	sub	r2,r3,r2
   11244:	e0fffe17 	ldw	r3,-8(fp)
   11248:	1885883a 	add	r2,r3,r2
   1124c:	e0bffe15 	stw	r2,-8(fp)
        len -= 64 - bufsize;
   11250:	e0fffc17 	ldw	r3,-16(fp)
   11254:	e0bfff17 	ldw	r2,-4(fp)
   11258:	1885883a 	add	r2,r3,r2
   1125c:	10bff004 	addi	r2,r2,-64
   11260:	e0bfff15 	stw	r2,-4(fp)
        secp256k1_sha256_transform(hash->s, hash->buf);
   11264:	e0fffd17 	ldw	r3,-12(fp)
   11268:	e0bffd17 	ldw	r2,-12(fp)
   1126c:	10800804 	addi	r2,r2,32
   11270:	100b883a 	mov	r5,r2
   11274:	1809883a 	mov	r4,r3
   11278:	000c2a80 	call	c2a8 <secp256k1_sha256_transform>
        bufsize = 0;
   1127c:	e03ffc15 	stw	zero,-16(fp)
}

static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {
    size_t bufsize = hash->bytes & 0x3F;
    hash->bytes += len;
    while (bufsize + len >= 64) {
   11280:	e0fffc17 	ldw	r3,-16(fp)
   11284:	e0bfff17 	ldw	r2,-4(fp)
   11288:	1885883a 	add	r2,r3,r2
   1128c:	10801028 	cmpgeui	r2,r2,64
   11290:	103fdf1e 	bne	r2,zero,11210 <__alt_mem_epcs_flash_controller+0xfe000210>
        data += 64 - bufsize;
        len -= 64 - bufsize;
        secp256k1_sha256_transform(hash->s, hash->buf);
        bufsize = 0;
    }
    if (len) {
   11294:	e0bfff17 	ldw	r2,-4(fp)
   11298:	10000826 	beq	r2,zero,112bc <secp256k1_sha256_write+0xf4>
        /* Fill the buffer with what remains. */
        memcpy(((unsigned char*)hash->buf) + bufsize, data, len);
   1129c:	e0bffd17 	ldw	r2,-12(fp)
   112a0:	10c00804 	addi	r3,r2,32
   112a4:	e0bffc17 	ldw	r2,-16(fp)
   112a8:	1885883a 	add	r2,r3,r2
   112ac:	e1bfff17 	ldw	r6,-4(fp)
   112b0:	e17ffe17 	ldw	r5,-8(fp)
   112b4:	1009883a 	mov	r4,r2
   112b8:	0045c980 	call	45c98 <memcpy>
    }
}
   112bc:	0001883a 	nop
   112c0:	e037883a 	mov	sp,fp
   112c4:	dfc00117 	ldw	ra,4(sp)
   112c8:	df000017 	ldw	fp,0(sp)
   112cc:	dec00204 	addi	sp,sp,8
   112d0:	f800283a 	ret

000112d4 <secp256k1_sha256_finalize>:

static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {
   112d4:	defff104 	addi	sp,sp,-60
   112d8:	dfc00e15 	stw	ra,56(sp)
   112dc:	df000d15 	stw	fp,52(sp)
   112e0:	df000d04 	addi	fp,sp,52
   112e4:	e13ffe15 	stw	r4,-8(fp)
   112e8:	e17fff15 	stw	r5,-4(fp)
    static const unsigned char pad[64] = {0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t sizedesc[2];
    uint32_t out[8];
    int i = 0;
   112ec:	e03ff315 	stw	zero,-52(fp)
    sizedesc[0] = BE32(hash->bytes >> 29);
   112f0:	e0bffe17 	ldw	r2,-8(fp)
   112f4:	10801817 	ldw	r2,96(r2)
   112f8:	1004d77a 	srli	r2,r2,29
   112fc:	1004963a 	slli	r2,r2,24
   11300:	e0bff415 	stw	r2,-48(fp)
    sizedesc[1] = BE32(hash->bytes << 3);
   11304:	e0bffe17 	ldw	r2,-8(fp)
   11308:	10801817 	ldw	r2,96(r2)
   1130c:	100696fa 	slli	r3,r2,27
   11310:	e0bffe17 	ldw	r2,-8(fp)
   11314:	10801817 	ldw	r2,96(r2)
   11318:	100490fa 	slli	r2,r2,3
   1131c:	10bfc00c 	andi	r2,r2,65280
   11320:	1004923a 	slli	r2,r2,8
   11324:	1886b03a 	or	r3,r3,r2
   11328:	e0bffe17 	ldw	r2,-8(fp)
   1132c:	10801817 	ldw	r2,96(r2)
   11330:	100490fa 	slli	r2,r2,3
   11334:	10803fec 	andhi	r2,r2,255
   11338:	1004d23a 	srli	r2,r2,8
   1133c:	1886b03a 	or	r3,r3,r2
   11340:	e0bffe17 	ldw	r2,-8(fp)
   11344:	10801817 	ldw	r2,96(r2)
   11348:	100490fa 	slli	r2,r2,3
   1134c:	1004d63a 	srli	r2,r2,24
   11350:	1884b03a 	or	r2,r3,r2
   11354:	e0bff515 	stw	r2,-44(fp)
    secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));
   11358:	e0bffe17 	ldw	r2,-8(fp)
   1135c:	10801817 	ldw	r2,96(r2)
   11360:	00c01dc4 	movi	r3,119
   11364:	1885c83a 	sub	r2,r3,r2
   11368:	10800fcc 	andi	r2,r2,63
   1136c:	10800044 	addi	r2,r2,1
   11370:	100d883a 	mov	r6,r2
   11374:	014001b4 	movhi	r5,6
   11378:	2972cb04 	addi	r5,r5,-13524
   1137c:	e13ffe17 	ldw	r4,-8(fp)
   11380:	00111c80 	call	111c8 <secp256k1_sha256_write>
    secp256k1_sha256_write(hash, (const unsigned char*)sizedesc, 8);
   11384:	e0bff404 	addi	r2,fp,-48
   11388:	01800204 	movi	r6,8
   1138c:	100b883a 	mov	r5,r2
   11390:	e13ffe17 	ldw	r4,-8(fp)
   11394:	00111c80 	call	111c8 <secp256k1_sha256_write>
    for (i = 0; i < 8; i++) {
   11398:	e03ff315 	stw	zero,-52(fp)
   1139c:	00003106 	br	11464 <secp256k1_sha256_finalize+0x190>
        out[i] = BE32(hash->s[i]);
   113a0:	e0fffe17 	ldw	r3,-8(fp)
   113a4:	e0bff317 	ldw	r2,-52(fp)
   113a8:	1085883a 	add	r2,r2,r2
   113ac:	1085883a 	add	r2,r2,r2
   113b0:	1885883a 	add	r2,r3,r2
   113b4:	10800017 	ldw	r2,0(r2)
   113b8:	1006963a 	slli	r3,r2,24
   113bc:	e13ffe17 	ldw	r4,-8(fp)
   113c0:	e0bff317 	ldw	r2,-52(fp)
   113c4:	1085883a 	add	r2,r2,r2
   113c8:	1085883a 	add	r2,r2,r2
   113cc:	2085883a 	add	r2,r4,r2
   113d0:	10800017 	ldw	r2,0(r2)
   113d4:	10bfc00c 	andi	r2,r2,65280
   113d8:	1004923a 	slli	r2,r2,8
   113dc:	1886b03a 	or	r3,r3,r2
   113e0:	e13ffe17 	ldw	r4,-8(fp)
   113e4:	e0bff317 	ldw	r2,-52(fp)
   113e8:	1085883a 	add	r2,r2,r2
   113ec:	1085883a 	add	r2,r2,r2
   113f0:	2085883a 	add	r2,r4,r2
   113f4:	10800017 	ldw	r2,0(r2)
   113f8:	10803fec 	andhi	r2,r2,255
   113fc:	1004d23a 	srli	r2,r2,8
   11400:	1886b03a 	or	r3,r3,r2
   11404:	e13ffe17 	ldw	r4,-8(fp)
   11408:	e0bff317 	ldw	r2,-52(fp)
   1140c:	1085883a 	add	r2,r2,r2
   11410:	1085883a 	add	r2,r2,r2
   11414:	2085883a 	add	r2,r4,r2
   11418:	10800017 	ldw	r2,0(r2)
   1141c:	1004d63a 	srli	r2,r2,24
   11420:	1886b03a 	or	r3,r3,r2
   11424:	e0bff317 	ldw	r2,-52(fp)
   11428:	1085883a 	add	r2,r2,r2
   1142c:	1085883a 	add	r2,r2,r2
   11430:	e13ff304 	addi	r4,fp,-52
   11434:	2085883a 	add	r2,r4,r2
   11438:	10800304 	addi	r2,r2,12
   1143c:	10c00015 	stw	r3,0(r2)
        hash->s[i] = 0;
   11440:	e0fffe17 	ldw	r3,-8(fp)
   11444:	e0bff317 	ldw	r2,-52(fp)
   11448:	1085883a 	add	r2,r2,r2
   1144c:	1085883a 	add	r2,r2,r2
   11450:	1885883a 	add	r2,r3,r2
   11454:	10000015 	stw	zero,0(r2)
    int i = 0;
    sizedesc[0] = BE32(hash->bytes >> 29);
    sizedesc[1] = BE32(hash->bytes << 3);
    secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));
    secp256k1_sha256_write(hash, (const unsigned char*)sizedesc, 8);
    for (i = 0; i < 8; i++) {
   11458:	e0bff317 	ldw	r2,-52(fp)
   1145c:	10800044 	addi	r2,r2,1
   11460:	e0bff315 	stw	r2,-52(fp)
   11464:	e0bff317 	ldw	r2,-52(fp)
   11468:	10800210 	cmplti	r2,r2,8
   1146c:	103fcc1e 	bne	r2,zero,113a0 <__alt_mem_epcs_flash_controller+0xfe0003a0>
        out[i] = BE32(hash->s[i]);
        hash->s[i] = 0;
    }
    memcpy(out32, (const unsigned char*)out, 32);
   11470:	e0bff604 	addi	r2,fp,-40
   11474:	01800804 	movi	r6,32
   11478:	100b883a 	mov	r5,r2
   1147c:	e13fff17 	ldw	r4,-4(fp)
   11480:	0045c980 	call	45c98 <memcpy>
}
   11484:	0001883a 	nop
   11488:	e037883a 	mov	sp,fp
   1148c:	dfc00117 	ldw	ra,4(sp)
   11490:	df000017 	ldw	fp,0(sp)
   11494:	dec00204 	addi	sp,sp,8
   11498:	f800283a 	ret

0001149c <secp256k1_hmac_sha256_initialize>:

static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {
   1149c:	deffd104 	addi	sp,sp,-188
   114a0:	dfc02e15 	stw	ra,184(sp)
   114a4:	df002d15 	stw	fp,180(sp)
   114a8:	df002d04 	addi	fp,sp,180
   114ac:	e13ffd15 	stw	r4,-12(fp)
   114b0:	e17ffe15 	stw	r5,-8(fp)
   114b4:	e1bfff15 	stw	r6,-4(fp)
    int n;
    unsigned char rkey[64];
    if (keylen <= 64) {
   114b8:	e0bfff17 	ldw	r2,-4(fp)
   114bc:	10801068 	cmpgeui	r2,r2,65
   114c0:	10000f1e 	bne	r2,zero,11500 <secp256k1_hmac_sha256_initialize+0x64>
        memcpy(rkey, key, keylen);
   114c4:	e0bfd404 	addi	r2,fp,-176
   114c8:	e1bfff17 	ldw	r6,-4(fp)
   114cc:	e17ffe17 	ldw	r5,-8(fp)
   114d0:	1009883a 	mov	r4,r2
   114d4:	0045c980 	call	45c98 <memcpy>
        memset(rkey + keylen, 0, 64 - keylen);
   114d8:	e0ffd404 	addi	r3,fp,-176
   114dc:	e0bfff17 	ldw	r2,-4(fp)
   114e0:	1889883a 	add	r4,r3,r2
   114e4:	00c01004 	movi	r3,64
   114e8:	e0bfff17 	ldw	r2,-4(fp)
   114ec:	1885c83a 	sub	r2,r3,r2
   114f0:	100d883a 	mov	r6,r2
   114f4:	000b883a 	mov	r5,zero
   114f8:	0045f3c0 	call	45f3c <memset>
   114fc:	00001306 	br	1154c <secp256k1_hmac_sha256_initialize+0xb0>
    } else {
        secp256k1_sha256_t sha256;
        secp256k1_sha256_initialize(&sha256);
   11500:	e0bfe404 	addi	r2,fp,-112
   11504:	1009883a 	mov	r4,r2
   11508:	000c1fc0 	call	c1fc <secp256k1_sha256_initialize>
        secp256k1_sha256_write(&sha256, key, keylen);
   1150c:	e0bfe404 	addi	r2,fp,-112
   11510:	e1bfff17 	ldw	r6,-4(fp)
   11514:	e17ffe17 	ldw	r5,-8(fp)
   11518:	1009883a 	mov	r4,r2
   1151c:	00111c80 	call	111c8 <secp256k1_sha256_write>
        secp256k1_sha256_finalize(&sha256, rkey);
   11520:	e0ffd404 	addi	r3,fp,-176
   11524:	e0bfe404 	addi	r2,fp,-112
   11528:	180b883a 	mov	r5,r3
   1152c:	1009883a 	mov	r4,r2
   11530:	00112d40 	call	112d4 <secp256k1_sha256_finalize>
        memset(rkey + 32, 0, 32);
   11534:	e0bfd404 	addi	r2,fp,-176
   11538:	10800804 	addi	r2,r2,32
   1153c:	01800804 	movi	r6,32
   11540:	000b883a 	mov	r5,zero
   11544:	1009883a 	mov	r4,r2
   11548:	0045f3c0 	call	45f3c <memset>
    }

    secp256k1_sha256_initialize(&hash->outer);
   1154c:	e0bffd17 	ldw	r2,-12(fp)
   11550:	10801904 	addi	r2,r2,100
   11554:	1009883a 	mov	r4,r2
   11558:	000c1fc0 	call	c1fc <secp256k1_sha256_initialize>
    for (n = 0; n < 64; n++) {
   1155c:	e03fd315 	stw	zero,-180(fp)
   11560:	00000d06 	br	11598 <secp256k1_hmac_sha256_initialize+0xfc>
        rkey[n] ^= 0x5c;
   11564:	e0ffd404 	addi	r3,fp,-176
   11568:	e0bfd317 	ldw	r2,-180(fp)
   1156c:	1885883a 	add	r2,r3,r2
   11570:	10800003 	ldbu	r2,0(r2)
   11574:	1080171c 	xori	r2,r2,92
   11578:	1009883a 	mov	r4,r2
   1157c:	e0ffd404 	addi	r3,fp,-176
   11580:	e0bfd317 	ldw	r2,-180(fp)
   11584:	1885883a 	add	r2,r3,r2
   11588:	11000005 	stb	r4,0(r2)
        secp256k1_sha256_finalize(&sha256, rkey);
        memset(rkey + 32, 0, 32);
    }

    secp256k1_sha256_initialize(&hash->outer);
    for (n = 0; n < 64; n++) {
   1158c:	e0bfd317 	ldw	r2,-180(fp)
   11590:	10800044 	addi	r2,r2,1
   11594:	e0bfd315 	stw	r2,-180(fp)
   11598:	e0bfd317 	ldw	r2,-180(fp)
   1159c:	10801010 	cmplti	r2,r2,64
   115a0:	103ff01e 	bne	r2,zero,11564 <__alt_mem_epcs_flash_controller+0xfe000564>
        rkey[n] ^= 0x5c;
    }
    secp256k1_sha256_write(&hash->outer, rkey, 64);
   115a4:	e0bffd17 	ldw	r2,-12(fp)
   115a8:	10801904 	addi	r2,r2,100
   115ac:	e0ffd404 	addi	r3,fp,-176
   115b0:	01801004 	movi	r6,64
   115b4:	180b883a 	mov	r5,r3
   115b8:	1009883a 	mov	r4,r2
   115bc:	00111c80 	call	111c8 <secp256k1_sha256_write>

    secp256k1_sha256_initialize(&hash->inner);
   115c0:	e0bffd17 	ldw	r2,-12(fp)
   115c4:	1009883a 	mov	r4,r2
   115c8:	000c1fc0 	call	c1fc <secp256k1_sha256_initialize>
    for (n = 0; n < 64; n++) {
   115cc:	e03fd315 	stw	zero,-180(fp)
   115d0:	00000d06 	br	11608 <secp256k1_hmac_sha256_initialize+0x16c>
        rkey[n] ^= 0x5c ^ 0x36;
   115d4:	e0ffd404 	addi	r3,fp,-176
   115d8:	e0bfd317 	ldw	r2,-180(fp)
   115dc:	1885883a 	add	r2,r3,r2
   115e0:	10800003 	ldbu	r2,0(r2)
   115e4:	10801a9c 	xori	r2,r2,106
   115e8:	1009883a 	mov	r4,r2
   115ec:	e0ffd404 	addi	r3,fp,-176
   115f0:	e0bfd317 	ldw	r2,-180(fp)
   115f4:	1885883a 	add	r2,r3,r2
   115f8:	11000005 	stb	r4,0(r2)
        rkey[n] ^= 0x5c;
    }
    secp256k1_sha256_write(&hash->outer, rkey, 64);

    secp256k1_sha256_initialize(&hash->inner);
    for (n = 0; n < 64; n++) {
   115fc:	e0bfd317 	ldw	r2,-180(fp)
   11600:	10800044 	addi	r2,r2,1
   11604:	e0bfd315 	stw	r2,-180(fp)
   11608:	e0bfd317 	ldw	r2,-180(fp)
   1160c:	10801010 	cmplti	r2,r2,64
   11610:	103ff01e 	bne	r2,zero,115d4 <__alt_mem_epcs_flash_controller+0xfe0005d4>
        rkey[n] ^= 0x5c ^ 0x36;
    }
    secp256k1_sha256_write(&hash->inner, rkey, 64);
   11614:	e0bffd17 	ldw	r2,-12(fp)
   11618:	e0ffd404 	addi	r3,fp,-176
   1161c:	01801004 	movi	r6,64
   11620:	180b883a 	mov	r5,r3
   11624:	1009883a 	mov	r4,r2
   11628:	00111c80 	call	111c8 <secp256k1_sha256_write>
    memset(rkey, 0, 64);
   1162c:	e0bfd404 	addi	r2,fp,-176
   11630:	01801004 	movi	r6,64
   11634:	000b883a 	mov	r5,zero
   11638:	1009883a 	mov	r4,r2
   1163c:	0045f3c0 	call	45f3c <memset>
}
   11640:	0001883a 	nop
   11644:	e037883a 	mov	sp,fp
   11648:	dfc00117 	ldw	ra,4(sp)
   1164c:	df000017 	ldw	fp,0(sp)
   11650:	dec00204 	addi	sp,sp,8
   11654:	f800283a 	ret

00011658 <secp256k1_hmac_sha256_write>:

static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {
   11658:	defffb04 	addi	sp,sp,-20
   1165c:	dfc00415 	stw	ra,16(sp)
   11660:	df000315 	stw	fp,12(sp)
   11664:	df000304 	addi	fp,sp,12
   11668:	e13ffd15 	stw	r4,-12(fp)
   1166c:	e17ffe15 	stw	r5,-8(fp)
   11670:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_sha256_write(&hash->inner, data, size);
   11674:	e0bffd17 	ldw	r2,-12(fp)
   11678:	e1bfff17 	ldw	r6,-4(fp)
   1167c:	e17ffe17 	ldw	r5,-8(fp)
   11680:	1009883a 	mov	r4,r2
   11684:	00111c80 	call	111c8 <secp256k1_sha256_write>
}
   11688:	0001883a 	nop
   1168c:	e037883a 	mov	sp,fp
   11690:	dfc00117 	ldw	ra,4(sp)
   11694:	df000017 	ldw	fp,0(sp)
   11698:	dec00204 	addi	sp,sp,8
   1169c:	f800283a 	ret

000116a0 <secp256k1_hmac_sha256_finalize>:

static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {
   116a0:	defff404 	addi	sp,sp,-48
   116a4:	dfc00b15 	stw	ra,44(sp)
   116a8:	df000a15 	stw	fp,40(sp)
   116ac:	df000a04 	addi	fp,sp,40
   116b0:	e13ffe15 	stw	r4,-8(fp)
   116b4:	e17fff15 	stw	r5,-4(fp)
    unsigned char temp[32];
    secp256k1_sha256_finalize(&hash->inner, temp);
   116b8:	e0bffe17 	ldw	r2,-8(fp)
   116bc:	e17ff604 	addi	r5,fp,-40
   116c0:	1009883a 	mov	r4,r2
   116c4:	00112d40 	call	112d4 <secp256k1_sha256_finalize>
    secp256k1_sha256_write(&hash->outer, temp, 32);
   116c8:	e0bffe17 	ldw	r2,-8(fp)
   116cc:	10801904 	addi	r2,r2,100
   116d0:	01800804 	movi	r6,32
   116d4:	e17ff604 	addi	r5,fp,-40
   116d8:	1009883a 	mov	r4,r2
   116dc:	00111c80 	call	111c8 <secp256k1_sha256_write>
    memset(temp, 0, 32);
   116e0:	01800804 	movi	r6,32
   116e4:	000b883a 	mov	r5,zero
   116e8:	e13ff604 	addi	r4,fp,-40
   116ec:	0045f3c0 	call	45f3c <memset>
    secp256k1_sha256_finalize(&hash->outer, out32);
   116f0:	e0bffe17 	ldw	r2,-8(fp)
   116f4:	10801904 	addi	r2,r2,100
   116f8:	e17fff17 	ldw	r5,-4(fp)
   116fc:	1009883a 	mov	r4,r2
   11700:	00112d40 	call	112d4 <secp256k1_sha256_finalize>
}
   11704:	0001883a 	nop
   11708:	e037883a 	mov	sp,fp
   1170c:	dfc00117 	ldw	ra,4(sp)
   11710:	df000017 	ldw	fp,0(sp)
   11714:	dec00204 	addi	sp,sp,8
   11718:	f800283a 	ret

0001171c <secp256k1_rfc6979_hmac_sha256_initialize>:


static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen) {
   1171c:	deffc904 	addi	sp,sp,-220
   11720:	dfc03615 	stw	ra,216(sp)
   11724:	df003515 	stw	fp,212(sp)
   11728:	df003504 	addi	fp,sp,212
   1172c:	e13ffd15 	stw	r4,-12(fp)
   11730:	e17ffe15 	stw	r5,-8(fp)
   11734:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_hmac_sha256_t hmac;
    static const unsigned char zero[1] = {0x00};
    static const unsigned char one[1] = {0x01};

    memset(rng->v, 0x01, 32); /* RFC6979 3.2.b. */
   11738:	e0bffd17 	ldw	r2,-12(fp)
   1173c:	01800804 	movi	r6,32
   11740:	01400044 	movi	r5,1
   11744:	1009883a 	mov	r4,r2
   11748:	0045f3c0 	call	45f3c <memset>
    memset(rng->k, 0x00, 32); /* RFC6979 3.2.c. */
   1174c:	e0bffd17 	ldw	r2,-12(fp)
   11750:	10800804 	addi	r2,r2,32
   11754:	01800804 	movi	r6,32
   11758:	000b883a 	mov	r5,zero
   1175c:	1009883a 	mov	r4,r2
   11760:	0045f3c0 	call	45f3c <memset>

    /* RFC6979 3.2.d. */
    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   11764:	e0bffd17 	ldw	r2,-12(fp)
   11768:	10800804 	addi	r2,r2,32
   1176c:	01800804 	movi	r6,32
   11770:	100b883a 	mov	r5,r2
   11774:	e13fcb04 	addi	r4,fp,-212
   11778:	001149c0 	call	1149c <secp256k1_hmac_sha256_initialize>
    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   1177c:	e0bffd17 	ldw	r2,-12(fp)
   11780:	01800804 	movi	r6,32
   11784:	100b883a 	mov	r5,r2
   11788:	e13fcb04 	addi	r4,fp,-212
   1178c:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_write(&hmac, zero, 1);
   11790:	01800044 	movi	r6,1
   11794:	d1601204 	addi	r5,gp,-32696
   11798:	e13fcb04 	addi	r4,fp,-212
   1179c:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_write(&hmac, key, keylen);
   117a0:	e1bfff17 	ldw	r6,-4(fp)
   117a4:	e17ffe17 	ldw	r5,-8(fp)
   117a8:	e13fcb04 	addi	r4,fp,-212
   117ac:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_finalize(&hmac, rng->k);
   117b0:	e0bffd17 	ldw	r2,-12(fp)
   117b4:	10800804 	addi	r2,r2,32
   117b8:	100b883a 	mov	r5,r2
   117bc:	e13fcb04 	addi	r4,fp,-212
   117c0:	00116a00 	call	116a0 <secp256k1_hmac_sha256_finalize>
    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   117c4:	e0bffd17 	ldw	r2,-12(fp)
   117c8:	10800804 	addi	r2,r2,32
   117cc:	01800804 	movi	r6,32
   117d0:	100b883a 	mov	r5,r2
   117d4:	e13fcb04 	addi	r4,fp,-212
   117d8:	001149c0 	call	1149c <secp256k1_hmac_sha256_initialize>
    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   117dc:	e0bffd17 	ldw	r2,-12(fp)
   117e0:	01800804 	movi	r6,32
   117e4:	100b883a 	mov	r5,r2
   117e8:	e13fcb04 	addi	r4,fp,-212
   117ec:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_finalize(&hmac, rng->v);
   117f0:	e0bffd17 	ldw	r2,-12(fp)
   117f4:	100b883a 	mov	r5,r2
   117f8:	e13fcb04 	addi	r4,fp,-212
   117fc:	00116a00 	call	116a0 <secp256k1_hmac_sha256_finalize>

    /* RFC6979 3.2.f. */
    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   11800:	e0bffd17 	ldw	r2,-12(fp)
   11804:	10800804 	addi	r2,r2,32
   11808:	01800804 	movi	r6,32
   1180c:	100b883a 	mov	r5,r2
   11810:	e13fcb04 	addi	r4,fp,-212
   11814:	001149c0 	call	1149c <secp256k1_hmac_sha256_initialize>
    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   11818:	e0bffd17 	ldw	r2,-12(fp)
   1181c:	01800804 	movi	r6,32
   11820:	100b883a 	mov	r5,r2
   11824:	e13fcb04 	addi	r4,fp,-212
   11828:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_write(&hmac, one, 1);
   1182c:	01800044 	movi	r6,1
   11830:	d1601244 	addi	r5,gp,-32695
   11834:	e13fcb04 	addi	r4,fp,-212
   11838:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_write(&hmac, key, keylen);
   1183c:	e1bfff17 	ldw	r6,-4(fp)
   11840:	e17ffe17 	ldw	r5,-8(fp)
   11844:	e13fcb04 	addi	r4,fp,-212
   11848:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_finalize(&hmac, rng->k);
   1184c:	e0bffd17 	ldw	r2,-12(fp)
   11850:	10800804 	addi	r2,r2,32
   11854:	100b883a 	mov	r5,r2
   11858:	e13fcb04 	addi	r4,fp,-212
   1185c:	00116a00 	call	116a0 <secp256k1_hmac_sha256_finalize>
    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   11860:	e0bffd17 	ldw	r2,-12(fp)
   11864:	10800804 	addi	r2,r2,32
   11868:	01800804 	movi	r6,32
   1186c:	100b883a 	mov	r5,r2
   11870:	e13fcb04 	addi	r4,fp,-212
   11874:	001149c0 	call	1149c <secp256k1_hmac_sha256_initialize>
    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   11878:	e0bffd17 	ldw	r2,-12(fp)
   1187c:	01800804 	movi	r6,32
   11880:	100b883a 	mov	r5,r2
   11884:	e13fcb04 	addi	r4,fp,-212
   11888:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_finalize(&hmac, rng->v);
   1188c:	e0bffd17 	ldw	r2,-12(fp)
   11890:	100b883a 	mov	r5,r2
   11894:	e13fcb04 	addi	r4,fp,-212
   11898:	00116a00 	call	116a0 <secp256k1_hmac_sha256_finalize>
    rng->retry = 0;
   1189c:	e0bffd17 	ldw	r2,-12(fp)
   118a0:	10001015 	stw	zero,64(r2)
}
   118a4:	0001883a 	nop
   118a8:	e037883a 	mov	sp,fp
   118ac:	dfc00117 	ldw	ra,4(sp)
   118b0:	df000017 	ldw	fp,0(sp)
   118b4:	dec00204 	addi	sp,sp,8
   118b8:	f800283a 	ret

000118bc <secp256k1_rfc6979_hmac_sha256_generate>:

static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {
   118bc:	deffc804 	addi	sp,sp,-224
   118c0:	dfc03715 	stw	ra,220(sp)
   118c4:	df003615 	stw	fp,216(sp)
   118c8:	df003604 	addi	fp,sp,216
   118cc:	e13ffd15 	stw	r4,-12(fp)
   118d0:	e17ffe15 	stw	r5,-8(fp)
   118d4:	e1bfff15 	stw	r6,-4(fp)
    /* RFC6979 3.2.h. */
    static const unsigned char zero[1] = {0x00};
    if (rng->retry) {
   118d8:	e0bffd17 	ldw	r2,-12(fp)
   118dc:	10801017 	ldw	r2,64(r2)
   118e0:	10005226 	beq	r2,zero,11a2c <secp256k1_rfc6979_hmac_sha256_generate+0x170>
        secp256k1_hmac_sha256_t hmac;
        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   118e4:	e0bffd17 	ldw	r2,-12(fp)
   118e8:	10c00804 	addi	r3,r2,32
   118ec:	e0bfcb04 	addi	r2,fp,-212
   118f0:	01800804 	movi	r6,32
   118f4:	180b883a 	mov	r5,r3
   118f8:	1009883a 	mov	r4,r2
   118fc:	001149c0 	call	1149c <secp256k1_hmac_sha256_initialize>
        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   11900:	e0fffd17 	ldw	r3,-12(fp)
   11904:	e0bfcb04 	addi	r2,fp,-212
   11908:	01800804 	movi	r6,32
   1190c:	180b883a 	mov	r5,r3
   11910:	1009883a 	mov	r4,r2
   11914:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_write(&hmac, zero, 1);
   11918:	e0bfcb04 	addi	r2,fp,-212
   1191c:	01800044 	movi	r6,1
   11920:	d1601284 	addi	r5,gp,-32694
   11924:	1009883a 	mov	r4,r2
   11928:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_finalize(&hmac, rng->k);
   1192c:	e0bffd17 	ldw	r2,-12(fp)
   11930:	10c00804 	addi	r3,r2,32
   11934:	e0bfcb04 	addi	r2,fp,-212
   11938:	180b883a 	mov	r5,r3
   1193c:	1009883a 	mov	r4,r2
   11940:	00116a00 	call	116a0 <secp256k1_hmac_sha256_finalize>
        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   11944:	e0bffd17 	ldw	r2,-12(fp)
   11948:	10c00804 	addi	r3,r2,32
   1194c:	e0bfcb04 	addi	r2,fp,-212
   11950:	01800804 	movi	r6,32
   11954:	180b883a 	mov	r5,r3
   11958:	1009883a 	mov	r4,r2
   1195c:	001149c0 	call	1149c <secp256k1_hmac_sha256_initialize>
        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   11960:	e0fffd17 	ldw	r3,-12(fp)
   11964:	e0bfcb04 	addi	r2,fp,-212
   11968:	01800804 	movi	r6,32
   1196c:	180b883a 	mov	r5,r3
   11970:	1009883a 	mov	r4,r2
   11974:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_finalize(&hmac, rng->v);
   11978:	e0fffd17 	ldw	r3,-12(fp)
   1197c:	e0bfcb04 	addi	r2,fp,-212
   11980:	180b883a 	mov	r5,r3
   11984:	1009883a 	mov	r4,r2
   11988:	00116a00 	call	116a0 <secp256k1_hmac_sha256_finalize>
    }

    while (outlen > 0) {
   1198c:	00002706 	br	11a2c <secp256k1_rfc6979_hmac_sha256_generate+0x170>
        secp256k1_hmac_sha256_t hmac;
        int now = outlen;
   11990:	e0bfff17 	ldw	r2,-4(fp)
   11994:	e0bfca15 	stw	r2,-216(fp)
        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   11998:	e0bffd17 	ldw	r2,-12(fp)
   1199c:	10c00804 	addi	r3,r2,32
   119a0:	e0bfcb04 	addi	r2,fp,-212
   119a4:	01800804 	movi	r6,32
   119a8:	180b883a 	mov	r5,r3
   119ac:	1009883a 	mov	r4,r2
   119b0:	001149c0 	call	1149c <secp256k1_hmac_sha256_initialize>
        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   119b4:	e0fffd17 	ldw	r3,-12(fp)
   119b8:	e0bfcb04 	addi	r2,fp,-212
   119bc:	01800804 	movi	r6,32
   119c0:	180b883a 	mov	r5,r3
   119c4:	1009883a 	mov	r4,r2
   119c8:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_finalize(&hmac, rng->v);
   119cc:	e0fffd17 	ldw	r3,-12(fp)
   119d0:	e0bfcb04 	addi	r2,fp,-212
   119d4:	180b883a 	mov	r5,r3
   119d8:	1009883a 	mov	r4,r2
   119dc:	00116a00 	call	116a0 <secp256k1_hmac_sha256_finalize>
        if (now > 32) {
   119e0:	e0bfca17 	ldw	r2,-216(fp)
   119e4:	10800850 	cmplti	r2,r2,33
   119e8:	1000021e 	bne	r2,zero,119f4 <secp256k1_rfc6979_hmac_sha256_generate+0x138>
            now = 32;
   119ec:	00800804 	movi	r2,32
   119f0:	e0bfca15 	stw	r2,-216(fp)
        }
        memcpy(out, rng->v, now);
   119f4:	e0bffd17 	ldw	r2,-12(fp)
   119f8:	e0ffca17 	ldw	r3,-216(fp)
   119fc:	180d883a 	mov	r6,r3
   11a00:	100b883a 	mov	r5,r2
   11a04:	e13ffe17 	ldw	r4,-8(fp)
   11a08:	0045c980 	call	45c98 <memcpy>
        out += now;
   11a0c:	e0bfca17 	ldw	r2,-216(fp)
   11a10:	e0fffe17 	ldw	r3,-8(fp)
   11a14:	1885883a 	add	r2,r3,r2
   11a18:	e0bffe15 	stw	r2,-8(fp)
        outlen -= now;
   11a1c:	e0bfca17 	ldw	r2,-216(fp)
   11a20:	e0ffff17 	ldw	r3,-4(fp)
   11a24:	1885c83a 	sub	r2,r3,r2
   11a28:	e0bfff15 	stw	r2,-4(fp)
        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
        secp256k1_hmac_sha256_finalize(&hmac, rng->v);
    }

    while (outlen > 0) {
   11a2c:	e0bfff17 	ldw	r2,-4(fp)
   11a30:	103fd71e 	bne	r2,zero,11990 <__alt_mem_epcs_flash_controller+0xfe000990>
        memcpy(out, rng->v, now);
        out += now;
        outlen -= now;
    }

    rng->retry = 1;
   11a34:	e0bffd17 	ldw	r2,-12(fp)
   11a38:	00c00044 	movi	r3,1
   11a3c:	10c01015 	stw	r3,64(r2)
}
   11a40:	0001883a 	nop
   11a44:	e037883a 	mov	sp,fp
   11a48:	dfc00117 	ldw	ra,4(sp)
   11a4c:	df000017 	ldw	fp,0(sp)
   11a50:	dec00204 	addi	sp,sp,8
   11a54:	f800283a 	ret

00011a58 <secp256k1_rfc6979_hmac_sha256_finalize>:

static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {
   11a58:	defffd04 	addi	sp,sp,-12
   11a5c:	dfc00215 	stw	ra,8(sp)
   11a60:	df000115 	stw	fp,4(sp)
   11a64:	df000104 	addi	fp,sp,4
   11a68:	e13fff15 	stw	r4,-4(fp)
    memset(rng->k, 0, 32);
   11a6c:	e0bfff17 	ldw	r2,-4(fp)
   11a70:	10800804 	addi	r2,r2,32
   11a74:	01800804 	movi	r6,32
   11a78:	000b883a 	mov	r5,zero
   11a7c:	1009883a 	mov	r4,r2
   11a80:	0045f3c0 	call	45f3c <memset>
    memset(rng->v, 0, 32);
   11a84:	e0bfff17 	ldw	r2,-4(fp)
   11a88:	01800804 	movi	r6,32
   11a8c:	000b883a 	mov	r5,zero
   11a90:	1009883a 	mov	r4,r2
   11a94:	0045f3c0 	call	45f3c <memset>
    rng->retry = 0;
   11a98:	e0bfff17 	ldw	r2,-4(fp)
   11a9c:	10001015 	stw	zero,64(r2)
}
   11aa0:	0001883a 	nop
   11aa4:	e037883a 	mov	sp,fp
   11aa8:	dfc00117 	ldw	ra,4(sp)
   11aac:	df000017 	ldw	fp,0(sp)
   11ab0:	dec00204 	addi	sp,sp,8
   11ab4:	f800283a 	ret

00011ab8 <secp256k1_fe_verify>:
#include "util.h"
#include "num.h"
#include "field.h"

#ifdef VERIFY
static void secp256k1_fe_verify(const secp256k1_fe *a) {
   11ab8:	defff804 	addi	sp,sp,-32
   11abc:	dfc00715 	stw	ra,28(sp)
   11ac0:	df000615 	stw	fp,24(sp)
   11ac4:	df000604 	addi	fp,sp,24
   11ac8:	e13fff15 	stw	r4,-4(fp)
    const uint32_t *d = a->n;
   11acc:	e0bfff17 	ldw	r2,-4(fp)
   11ad0:	e0bffc15 	stw	r2,-16(fp)
    int m = a->normalized ? 1 : 2 * a->magnitude, r = 1;
   11ad4:	e0bfff17 	ldw	r2,-4(fp)
   11ad8:	10800b17 	ldw	r2,44(r2)
   11adc:	1000041e 	bne	r2,zero,11af0 <secp256k1_fe_verify+0x38>
   11ae0:	e0bfff17 	ldw	r2,-4(fp)
   11ae4:	10800a17 	ldw	r2,40(r2)
   11ae8:	1085883a 	add	r2,r2,r2
   11aec:	00000106 	br	11af4 <secp256k1_fe_verify+0x3c>
   11af0:	00800044 	movi	r2,1
   11af4:	e0bffd15 	stw	r2,-12(fp)
   11af8:	00800044 	movi	r2,1
   11afc:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[0] <= 0x3FFFFFFUL * m);
   11b00:	e0bffc17 	ldw	r2,-16(fp)
   11b04:	11000017 	ldw	r4,0(r2)
   11b08:	e0fffd17 	ldw	r3,-12(fp)
   11b0c:	1805883a 	mov	r2,r3
   11b10:	100496ba 	slli	r2,r2,26
   11b14:	10c5c83a 	sub	r2,r2,r3
   11b18:	1105403a 	cmpgeu	r2,r2,r4
   11b1c:	10803fcc 	andi	r2,r2,255
   11b20:	e0fffb17 	ldw	r3,-20(fp)
   11b24:	1884703a 	and	r2,r3,r2
   11b28:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[1] <= 0x3FFFFFFUL * m);
   11b2c:	e0bffc17 	ldw	r2,-16(fp)
   11b30:	10800104 	addi	r2,r2,4
   11b34:	11000017 	ldw	r4,0(r2)
   11b38:	e0fffd17 	ldw	r3,-12(fp)
   11b3c:	1805883a 	mov	r2,r3
   11b40:	100496ba 	slli	r2,r2,26
   11b44:	10c5c83a 	sub	r2,r2,r3
   11b48:	1105403a 	cmpgeu	r2,r2,r4
   11b4c:	10803fcc 	andi	r2,r2,255
   11b50:	e0fffb17 	ldw	r3,-20(fp)
   11b54:	1884703a 	and	r2,r3,r2
   11b58:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[2] <= 0x3FFFFFFUL * m);
   11b5c:	e0bffc17 	ldw	r2,-16(fp)
   11b60:	10800204 	addi	r2,r2,8
   11b64:	11000017 	ldw	r4,0(r2)
   11b68:	e0fffd17 	ldw	r3,-12(fp)
   11b6c:	1805883a 	mov	r2,r3
   11b70:	100496ba 	slli	r2,r2,26
   11b74:	10c5c83a 	sub	r2,r2,r3
   11b78:	1105403a 	cmpgeu	r2,r2,r4
   11b7c:	10803fcc 	andi	r2,r2,255
   11b80:	e0fffb17 	ldw	r3,-20(fp)
   11b84:	1884703a 	and	r2,r3,r2
   11b88:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[3] <= 0x3FFFFFFUL * m);
   11b8c:	e0bffc17 	ldw	r2,-16(fp)
   11b90:	10800304 	addi	r2,r2,12
   11b94:	11000017 	ldw	r4,0(r2)
   11b98:	e0fffd17 	ldw	r3,-12(fp)
   11b9c:	1805883a 	mov	r2,r3
   11ba0:	100496ba 	slli	r2,r2,26
   11ba4:	10c5c83a 	sub	r2,r2,r3
   11ba8:	1105403a 	cmpgeu	r2,r2,r4
   11bac:	10803fcc 	andi	r2,r2,255
   11bb0:	e0fffb17 	ldw	r3,-20(fp)
   11bb4:	1884703a 	and	r2,r3,r2
   11bb8:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[4] <= 0x3FFFFFFUL * m);
   11bbc:	e0bffc17 	ldw	r2,-16(fp)
   11bc0:	10800404 	addi	r2,r2,16
   11bc4:	11000017 	ldw	r4,0(r2)
   11bc8:	e0fffd17 	ldw	r3,-12(fp)
   11bcc:	1805883a 	mov	r2,r3
   11bd0:	100496ba 	slli	r2,r2,26
   11bd4:	10c5c83a 	sub	r2,r2,r3
   11bd8:	1105403a 	cmpgeu	r2,r2,r4
   11bdc:	10803fcc 	andi	r2,r2,255
   11be0:	e0fffb17 	ldw	r3,-20(fp)
   11be4:	1884703a 	and	r2,r3,r2
   11be8:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[5] <= 0x3FFFFFFUL * m);
   11bec:	e0bffc17 	ldw	r2,-16(fp)
   11bf0:	10800504 	addi	r2,r2,20
   11bf4:	11000017 	ldw	r4,0(r2)
   11bf8:	e0fffd17 	ldw	r3,-12(fp)
   11bfc:	1805883a 	mov	r2,r3
   11c00:	100496ba 	slli	r2,r2,26
   11c04:	10c5c83a 	sub	r2,r2,r3
   11c08:	1105403a 	cmpgeu	r2,r2,r4
   11c0c:	10803fcc 	andi	r2,r2,255
   11c10:	e0fffb17 	ldw	r3,-20(fp)
   11c14:	1884703a 	and	r2,r3,r2
   11c18:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[6] <= 0x3FFFFFFUL * m);
   11c1c:	e0bffc17 	ldw	r2,-16(fp)
   11c20:	10800604 	addi	r2,r2,24
   11c24:	11000017 	ldw	r4,0(r2)
   11c28:	e0fffd17 	ldw	r3,-12(fp)
   11c2c:	1805883a 	mov	r2,r3
   11c30:	100496ba 	slli	r2,r2,26
   11c34:	10c5c83a 	sub	r2,r2,r3
   11c38:	1105403a 	cmpgeu	r2,r2,r4
   11c3c:	10803fcc 	andi	r2,r2,255
   11c40:	e0fffb17 	ldw	r3,-20(fp)
   11c44:	1884703a 	and	r2,r3,r2
   11c48:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[7] <= 0x3FFFFFFUL * m);
   11c4c:	e0bffc17 	ldw	r2,-16(fp)
   11c50:	10800704 	addi	r2,r2,28
   11c54:	11000017 	ldw	r4,0(r2)
   11c58:	e0fffd17 	ldw	r3,-12(fp)
   11c5c:	1805883a 	mov	r2,r3
   11c60:	100496ba 	slli	r2,r2,26
   11c64:	10c5c83a 	sub	r2,r2,r3
   11c68:	1105403a 	cmpgeu	r2,r2,r4
   11c6c:	10803fcc 	andi	r2,r2,255
   11c70:	e0fffb17 	ldw	r3,-20(fp)
   11c74:	1884703a 	and	r2,r3,r2
   11c78:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[8] <= 0x3FFFFFFUL * m);
   11c7c:	e0bffc17 	ldw	r2,-16(fp)
   11c80:	10800804 	addi	r2,r2,32
   11c84:	11000017 	ldw	r4,0(r2)
   11c88:	e0fffd17 	ldw	r3,-12(fp)
   11c8c:	1805883a 	mov	r2,r3
   11c90:	100496ba 	slli	r2,r2,26
   11c94:	10c5c83a 	sub	r2,r2,r3
   11c98:	1105403a 	cmpgeu	r2,r2,r4
   11c9c:	10803fcc 	andi	r2,r2,255
   11ca0:	e0fffb17 	ldw	r3,-20(fp)
   11ca4:	1884703a 	and	r2,r3,r2
   11ca8:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[9] <= 0x03FFFFFUL * m);
   11cac:	e0bffc17 	ldw	r2,-16(fp)
   11cb0:	10800904 	addi	r2,r2,36
   11cb4:	11000017 	ldw	r4,0(r2)
   11cb8:	e0fffd17 	ldw	r3,-12(fp)
   11cbc:	1805883a 	mov	r2,r3
   11cc0:	100495ba 	slli	r2,r2,22
   11cc4:	10c5c83a 	sub	r2,r2,r3
   11cc8:	1105403a 	cmpgeu	r2,r2,r4
   11ccc:	10803fcc 	andi	r2,r2,255
   11cd0:	e0fffb17 	ldw	r3,-20(fp)
   11cd4:	1884703a 	and	r2,r3,r2
   11cd8:	e0bffb15 	stw	r2,-20(fp)
    r &= (a->magnitude >= 0);
   11cdc:	e0bfff17 	ldw	r2,-4(fp)
   11ce0:	10800a17 	ldw	r2,40(r2)
   11ce4:	0084303a 	nor	r2,zero,r2
   11ce8:	1004d7fa 	srli	r2,r2,31
   11cec:	10803fcc 	andi	r2,r2,255
   11cf0:	e0fffb17 	ldw	r3,-20(fp)
   11cf4:	1884703a 	and	r2,r3,r2
   11cf8:	e0bffb15 	stw	r2,-20(fp)
    r &= (a->magnitude <= 32);
   11cfc:	e0bfff17 	ldw	r2,-4(fp)
   11d00:	10800a17 	ldw	r2,40(r2)
   11d04:	10800850 	cmplti	r2,r2,33
   11d08:	10803fcc 	andi	r2,r2,255
   11d0c:	e0fffb17 	ldw	r3,-20(fp)
   11d10:	1884703a 	and	r2,r3,r2
   11d14:	e0bffb15 	stw	r2,-20(fp)
    if (a->normalized) {
   11d18:	e0bfff17 	ldw	r2,-4(fp)
   11d1c:	10800b17 	ldw	r2,44(r2)
   11d20:	10003e26 	beq	r2,zero,11e1c <secp256k1_fe_verify+0x364>
        r &= (a->magnitude <= 1);
   11d24:	e0bfff17 	ldw	r2,-4(fp)
   11d28:	10800a17 	ldw	r2,40(r2)
   11d2c:	10800090 	cmplti	r2,r2,2
   11d30:	10803fcc 	andi	r2,r2,255
   11d34:	e0fffb17 	ldw	r3,-20(fp)
   11d38:	1884703a 	and	r2,r3,r2
   11d3c:	e0bffb15 	stw	r2,-20(fp)
        if (r && (d[9] == 0x03FFFFFUL)) {
   11d40:	e0bffb17 	ldw	r2,-20(fp)
   11d44:	10003526 	beq	r2,zero,11e1c <secp256k1_fe_verify+0x364>
   11d48:	e0bffc17 	ldw	r2,-16(fp)
   11d4c:	10800904 	addi	r2,r2,36
   11d50:	10c00017 	ldw	r3,0(r2)
   11d54:	00801034 	movhi	r2,64
   11d58:	10bfffc4 	addi	r2,r2,-1
   11d5c:	18802f1e 	bne	r3,r2,11e1c <secp256k1_fe_verify+0x364>
            uint32_t mid = d[8] & d[7] & d[6] & d[5] & d[4] & d[3] & d[2];
   11d60:	e0bffc17 	ldw	r2,-16(fp)
   11d64:	10800804 	addi	r2,r2,32
   11d68:	10c00017 	ldw	r3,0(r2)
   11d6c:	e0bffc17 	ldw	r2,-16(fp)
   11d70:	10800704 	addi	r2,r2,28
   11d74:	10800017 	ldw	r2,0(r2)
   11d78:	1886703a 	and	r3,r3,r2
   11d7c:	e0bffc17 	ldw	r2,-16(fp)
   11d80:	10800604 	addi	r2,r2,24
   11d84:	10800017 	ldw	r2,0(r2)
   11d88:	1886703a 	and	r3,r3,r2
   11d8c:	e0bffc17 	ldw	r2,-16(fp)
   11d90:	10800504 	addi	r2,r2,20
   11d94:	10800017 	ldw	r2,0(r2)
   11d98:	1886703a 	and	r3,r3,r2
   11d9c:	e0bffc17 	ldw	r2,-16(fp)
   11da0:	10800404 	addi	r2,r2,16
   11da4:	10800017 	ldw	r2,0(r2)
   11da8:	1886703a 	and	r3,r3,r2
   11dac:	e0bffc17 	ldw	r2,-16(fp)
   11db0:	10800304 	addi	r2,r2,12
   11db4:	10800017 	ldw	r2,0(r2)
   11db8:	1886703a 	and	r3,r3,r2
   11dbc:	e0bffc17 	ldw	r2,-16(fp)
   11dc0:	10800204 	addi	r2,r2,8
   11dc4:	10800017 	ldw	r2,0(r2)
   11dc8:	1884703a 	and	r2,r3,r2
   11dcc:	e0bffe15 	stw	r2,-8(fp)
            if (mid == 0x3FFFFFFUL) {
   11dd0:	e0fffe17 	ldw	r3,-8(fp)
   11dd4:	00810034 	movhi	r2,1024
   11dd8:	10bfffc4 	addi	r2,r2,-1
   11ddc:	18800f1e 	bne	r3,r2,11e1c <secp256k1_fe_verify+0x364>
                r &= ((d[1] + 0x40UL + ((d[0] + 0x3D1UL) >> 26)) <= 0x3FFFFFFUL);
   11de0:	e0bffc17 	ldw	r2,-16(fp)
   11de4:	10800104 	addi	r2,r2,4
   11de8:	10c00017 	ldw	r3,0(r2)
   11dec:	e0bffc17 	ldw	r2,-16(fp)
   11df0:	10800017 	ldw	r2,0(r2)
   11df4:	1080f444 	addi	r2,r2,977
   11df8:	1004d6ba 	srli	r2,r2,26
   11dfc:	1885883a 	add	r2,r3,r2
   11e00:	10c01004 	addi	r3,r2,64
   11e04:	00810034 	movhi	r2,1024
   11e08:	1885803a 	cmpltu	r2,r3,r2
   11e0c:	10803fcc 	andi	r2,r2,255
   11e10:	e0fffb17 	ldw	r3,-20(fp)
   11e14:	1884703a 	and	r2,r3,r2
   11e18:	e0bffb15 	stw	r2,-20(fp)
            }
        }
    }
    VERIFY_CHECK(r == 1);
   11e1c:	e0bffb17 	ldw	r2,-20(fp)
   11e20:	10800058 	cmpnei	r2,r2,1
   11e24:	10803fcc 	andi	r2,r2,255
   11e28:	10000d26 	beq	r2,zero,11e60 <secp256k1_fe_verify+0x3a8>
   11e2c:	d0a01617 	ldw	r2,-32680(gp)
   11e30:	10c00317 	ldw	r3,12(r2)
   11e34:	008001b4 	movhi	r2,6
   11e38:	10ab3b04 	addi	r2,r2,-21268
   11e3c:	d8800015 	stw	r2,0(sp)
   11e40:	01c009c4 	movi	r7,39
   11e44:	018001b4 	movhi	r6,6
   11e48:	31ab2d04 	addi	r6,r6,-21324
   11e4c:	014001b4 	movhi	r5,6
   11e50:	296b3804 	addi	r5,r5,-21280
   11e54:	1809883a 	mov	r4,r3
   11e58:	00452600 	call	45260 <fprintf>
   11e5c:	00450340 	call	45034 <abort>
}
   11e60:	0001883a 	nop
   11e64:	e037883a 	mov	sp,fp
   11e68:	dfc00117 	ldw	ra,4(sp)
   11e6c:	df000017 	ldw	fp,0(sp)
   11e70:	dec00204 	addi	sp,sp,8
   11e74:	f800283a 	ret

00011e78 <secp256k1_fe_normalize>:
static void secp256k1_fe_verify(const secp256k1_fe *a) {
    (void)a;
}
#endif

static void secp256k1_fe_normalize(secp256k1_fe *r) {
   11e78:	defff004 	addi	sp,sp,-64
   11e7c:	dfc00f15 	stw	ra,60(sp)
   11e80:	df000e15 	stw	fp,56(sp)
   11e84:	df000e04 	addi	fp,sp,56
   11e88:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],
   11e8c:	e0bfff17 	ldw	r2,-4(fp)
   11e90:	10800017 	ldw	r2,0(r2)
   11e94:	e0bff315 	stw	r2,-52(fp)
   11e98:	e0bfff17 	ldw	r2,-4(fp)
   11e9c:	10800117 	ldw	r2,4(r2)
   11ea0:	e0bff415 	stw	r2,-48(fp)
   11ea4:	e0bfff17 	ldw	r2,-4(fp)
   11ea8:	10800217 	ldw	r2,8(r2)
   11eac:	e0bff515 	stw	r2,-44(fp)
   11eb0:	e0bfff17 	ldw	r2,-4(fp)
   11eb4:	10800317 	ldw	r2,12(r2)
   11eb8:	e0bff615 	stw	r2,-40(fp)
   11ebc:	e0bfff17 	ldw	r2,-4(fp)
   11ec0:	10800417 	ldw	r2,16(r2)
   11ec4:	e0bff715 	stw	r2,-36(fp)
             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];
   11ec8:	e0bfff17 	ldw	r2,-4(fp)
   11ecc:	10800517 	ldw	r2,20(r2)
   11ed0:	e0bff815 	stw	r2,-32(fp)
   11ed4:	e0bfff17 	ldw	r2,-4(fp)
   11ed8:	10800617 	ldw	r2,24(r2)
   11edc:	e0bff915 	stw	r2,-28(fp)
   11ee0:	e0bfff17 	ldw	r2,-4(fp)
   11ee4:	10800717 	ldw	r2,28(r2)
   11ee8:	e0bffa15 	stw	r2,-24(fp)
   11eec:	e0bfff17 	ldw	r2,-4(fp)
   11ef0:	10800817 	ldw	r2,32(r2)
   11ef4:	e0bffb15 	stw	r2,-20(fp)
   11ef8:	e0bfff17 	ldw	r2,-4(fp)
   11efc:	10800917 	ldw	r2,36(r2)
   11f00:	e0bffc15 	stw	r2,-16(fp)

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    uint32_t m;
    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;
   11f04:	e0bffc17 	ldw	r2,-16(fp)
   11f08:	1004d5ba 	srli	r2,r2,22
   11f0c:	e0bffd15 	stw	r2,-12(fp)
   11f10:	e0fffc17 	ldw	r3,-16(fp)
   11f14:	00801034 	movhi	r2,64
   11f18:	10bfffc4 	addi	r2,r2,-1
   11f1c:	1884703a 	and	r2,r3,r2
   11f20:	e0bffc15 	stw	r2,-16(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   11f24:	0140f444 	movi	r5,977
   11f28:	e13ffd17 	ldw	r4,-12(fp)
   11f2c:	0042b540 	call	42b54 <__mulsi3>
   11f30:	1007883a 	mov	r3,r2
   11f34:	e0bff317 	ldw	r2,-52(fp)
   11f38:	10c5883a 	add	r2,r2,r3
   11f3c:	e0bff315 	stw	r2,-52(fp)
   11f40:	e0bffd17 	ldw	r2,-12(fp)
   11f44:	100491ba 	slli	r2,r2,6
   11f48:	e0fff417 	ldw	r3,-48(fp)
   11f4c:	1885883a 	add	r2,r3,r2
   11f50:	e0bff415 	stw	r2,-48(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   11f54:	e0bff317 	ldw	r2,-52(fp)
   11f58:	1004d6ba 	srli	r2,r2,26
   11f5c:	e0fff417 	ldw	r3,-48(fp)
   11f60:	1885883a 	add	r2,r3,r2
   11f64:	e0bff415 	stw	r2,-48(fp)
   11f68:	e0fff317 	ldw	r3,-52(fp)
   11f6c:	00810034 	movhi	r2,1024
   11f70:	10bfffc4 	addi	r2,r2,-1
   11f74:	1884703a 	and	r2,r3,r2
   11f78:	e0bff315 	stw	r2,-52(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   11f7c:	e0bff417 	ldw	r2,-48(fp)
   11f80:	1004d6ba 	srli	r2,r2,26
   11f84:	e0fff517 	ldw	r3,-44(fp)
   11f88:	1885883a 	add	r2,r3,r2
   11f8c:	e0bff515 	stw	r2,-44(fp)
   11f90:	e0fff417 	ldw	r3,-48(fp)
   11f94:	00810034 	movhi	r2,1024
   11f98:	10bfffc4 	addi	r2,r2,-1
   11f9c:	1884703a 	and	r2,r3,r2
   11fa0:	e0bff415 	stw	r2,-48(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; m = t2;
   11fa4:	e0bff517 	ldw	r2,-44(fp)
   11fa8:	1004d6ba 	srli	r2,r2,26
   11fac:	e0fff617 	ldw	r3,-40(fp)
   11fb0:	1885883a 	add	r2,r3,r2
   11fb4:	e0bff615 	stw	r2,-40(fp)
   11fb8:	e0fff517 	ldw	r3,-44(fp)
   11fbc:	00810034 	movhi	r2,1024
   11fc0:	10bfffc4 	addi	r2,r2,-1
   11fc4:	1884703a 	and	r2,r3,r2
   11fc8:	e0bff515 	stw	r2,-44(fp)
   11fcc:	e0bff517 	ldw	r2,-44(fp)
   11fd0:	e0bffe15 	stw	r2,-8(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; m &= t3;
   11fd4:	e0bff617 	ldw	r2,-40(fp)
   11fd8:	1004d6ba 	srli	r2,r2,26
   11fdc:	e0fff717 	ldw	r3,-36(fp)
   11fe0:	1885883a 	add	r2,r3,r2
   11fe4:	e0bff715 	stw	r2,-36(fp)
   11fe8:	e0fff617 	ldw	r3,-40(fp)
   11fec:	00810034 	movhi	r2,1024
   11ff0:	10bfffc4 	addi	r2,r2,-1
   11ff4:	1884703a 	and	r2,r3,r2
   11ff8:	e0bff615 	stw	r2,-40(fp)
   11ffc:	e0fffe17 	ldw	r3,-8(fp)
   12000:	e0bff617 	ldw	r2,-40(fp)
   12004:	1884703a 	and	r2,r3,r2
   12008:	e0bffe15 	stw	r2,-8(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; m &= t4;
   1200c:	e0bff717 	ldw	r2,-36(fp)
   12010:	1004d6ba 	srli	r2,r2,26
   12014:	e0fff817 	ldw	r3,-32(fp)
   12018:	1885883a 	add	r2,r3,r2
   1201c:	e0bff815 	stw	r2,-32(fp)
   12020:	e0fff717 	ldw	r3,-36(fp)
   12024:	00810034 	movhi	r2,1024
   12028:	10bfffc4 	addi	r2,r2,-1
   1202c:	1884703a 	and	r2,r3,r2
   12030:	e0bff715 	stw	r2,-36(fp)
   12034:	e0fffe17 	ldw	r3,-8(fp)
   12038:	e0bff717 	ldw	r2,-36(fp)
   1203c:	1884703a 	and	r2,r3,r2
   12040:	e0bffe15 	stw	r2,-8(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; m &= t5;
   12044:	e0bff817 	ldw	r2,-32(fp)
   12048:	1004d6ba 	srli	r2,r2,26
   1204c:	e0fff917 	ldw	r3,-28(fp)
   12050:	1885883a 	add	r2,r3,r2
   12054:	e0bff915 	stw	r2,-28(fp)
   12058:	e0fff817 	ldw	r3,-32(fp)
   1205c:	00810034 	movhi	r2,1024
   12060:	10bfffc4 	addi	r2,r2,-1
   12064:	1884703a 	and	r2,r3,r2
   12068:	e0bff815 	stw	r2,-32(fp)
   1206c:	e0fffe17 	ldw	r3,-8(fp)
   12070:	e0bff817 	ldw	r2,-32(fp)
   12074:	1884703a 	and	r2,r3,r2
   12078:	e0bffe15 	stw	r2,-8(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; m &= t6;
   1207c:	e0bff917 	ldw	r2,-28(fp)
   12080:	1004d6ba 	srli	r2,r2,26
   12084:	e0fffa17 	ldw	r3,-24(fp)
   12088:	1885883a 	add	r2,r3,r2
   1208c:	e0bffa15 	stw	r2,-24(fp)
   12090:	e0fff917 	ldw	r3,-28(fp)
   12094:	00810034 	movhi	r2,1024
   12098:	10bfffc4 	addi	r2,r2,-1
   1209c:	1884703a 	and	r2,r3,r2
   120a0:	e0bff915 	stw	r2,-28(fp)
   120a4:	e0fffe17 	ldw	r3,-8(fp)
   120a8:	e0bff917 	ldw	r2,-28(fp)
   120ac:	1884703a 	and	r2,r3,r2
   120b0:	e0bffe15 	stw	r2,-8(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; m &= t7;
   120b4:	e0bffa17 	ldw	r2,-24(fp)
   120b8:	1004d6ba 	srli	r2,r2,26
   120bc:	e0fffb17 	ldw	r3,-20(fp)
   120c0:	1885883a 	add	r2,r3,r2
   120c4:	e0bffb15 	stw	r2,-20(fp)
   120c8:	e0fffa17 	ldw	r3,-24(fp)
   120cc:	00810034 	movhi	r2,1024
   120d0:	10bfffc4 	addi	r2,r2,-1
   120d4:	1884703a 	and	r2,r3,r2
   120d8:	e0bffa15 	stw	r2,-24(fp)
   120dc:	e0fffe17 	ldw	r3,-8(fp)
   120e0:	e0bffa17 	ldw	r2,-24(fp)
   120e4:	1884703a 	and	r2,r3,r2
   120e8:	e0bffe15 	stw	r2,-8(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; m &= t8;
   120ec:	e0bffb17 	ldw	r2,-20(fp)
   120f0:	1004d6ba 	srli	r2,r2,26
   120f4:	e0fffc17 	ldw	r3,-16(fp)
   120f8:	1885883a 	add	r2,r3,r2
   120fc:	e0bffc15 	stw	r2,-16(fp)
   12100:	e0fffb17 	ldw	r3,-20(fp)
   12104:	00810034 	movhi	r2,1024
   12108:	10bfffc4 	addi	r2,r2,-1
   1210c:	1884703a 	and	r2,r3,r2
   12110:	e0bffb15 	stw	r2,-20(fp)
   12114:	e0fffe17 	ldw	r3,-8(fp)
   12118:	e0bffb17 	ldw	r2,-20(fp)
   1211c:	1884703a 	and	r2,r3,r2
   12120:	e0bffe15 	stw	r2,-8(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   12124:	e0bffc17 	ldw	r2,-16(fp)
   12128:	1004d5fa 	srli	r2,r2,23
   1212c:	1004c03a 	cmpne	r2,r2,zero
   12130:	10803fcc 	andi	r2,r2,255
   12134:	10000d26 	beq	r2,zero,1216c <secp256k1_fe_normalize+0x2f4>
   12138:	d0a01617 	ldw	r2,-32680(gp)
   1213c:	10c00317 	ldw	r3,12(r2)
   12140:	008001b4 	movhi	r2,6
   12144:	10ab4304 	addi	r2,r2,-21236
   12148:	d8800015 	stw	r2,0(sp)
   1214c:	01c01104 	movi	r7,68
   12150:	018001b4 	movhi	r6,6
   12154:	31ab2d04 	addi	r6,r6,-21324
   12158:	014001b4 	movhi	r5,6
   1215c:	296b3804 	addi	r5,r5,-21280
   12160:	1809883a 	mov	r4,r3
   12164:	00452600 	call	45260 <fprintf>
   12168:	00450340 	call	45034 <abort>

    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
    x = (t9 >> 22) | ((t9 == 0x03FFFFFUL) & (m == 0x3FFFFFFUL)
   1216c:	e0bffc17 	ldw	r2,-16(fp)
   12170:	1006d5ba 	srli	r3,r2,22
   12174:	e13ffc17 	ldw	r4,-16(fp)
   12178:	00801034 	movhi	r2,64
   1217c:	10bfffc4 	addi	r2,r2,-1
   12180:	2085003a 	cmpeq	r2,r4,r2
   12184:	100b883a 	mov	r5,r2
   12188:	e13ffe17 	ldw	r4,-8(fp)
   1218c:	00810034 	movhi	r2,1024
   12190:	10bfffc4 	addi	r2,r2,-1
   12194:	2085003a 	cmpeq	r2,r4,r2
   12198:	2884703a 	and	r2,r5,r2
   1219c:	11003fcc 	andi	r4,r2,255
        & ((t1 + 0x40UL + ((t0 + 0x3D1UL) >> 26)) > 0x3FFFFFFUL));
   121a0:	e0bff317 	ldw	r2,-52(fp)
   121a4:	1080f444 	addi	r2,r2,977
   121a8:	100ad6ba 	srli	r5,r2,26
   121ac:	e0bff417 	ldw	r2,-48(fp)
   121b0:	2885883a 	add	r2,r5,r2
   121b4:	11401004 	addi	r5,r2,64
   121b8:	00810034 	movhi	r2,1024
   121bc:	2885403a 	cmpgeu	r2,r5,r2
   121c0:	10803fcc 	andi	r2,r2,255
   121c4:	2084703a 	and	r2,r4,r2

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);

    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
    x = (t9 >> 22) | ((t9 == 0x03FFFFFUL) & (m == 0x3FFFFFFUL)
   121c8:	1884b03a 	or	r2,r3,r2
   121cc:	e0bffd15 	stw	r2,-12(fp)
        & ((t1 + 0x40UL + ((t0 + 0x3D1UL) >> 26)) > 0x3FFFFFFUL));

    /* Apply the final reduction (for constant-time behaviour, we do it always) */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   121d0:	0140f444 	movi	r5,977
   121d4:	e13ffd17 	ldw	r4,-12(fp)
   121d8:	0042b540 	call	42b54 <__mulsi3>
   121dc:	1007883a 	mov	r3,r2
   121e0:	e0bff317 	ldw	r2,-52(fp)
   121e4:	10c5883a 	add	r2,r2,r3
   121e8:	e0bff315 	stw	r2,-52(fp)
   121ec:	e0bffd17 	ldw	r2,-12(fp)
   121f0:	100491ba 	slli	r2,r2,6
   121f4:	e0fff417 	ldw	r3,-48(fp)
   121f8:	1885883a 	add	r2,r3,r2
   121fc:	e0bff415 	stw	r2,-48(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   12200:	e0bff317 	ldw	r2,-52(fp)
   12204:	1004d6ba 	srli	r2,r2,26
   12208:	e0fff417 	ldw	r3,-48(fp)
   1220c:	1885883a 	add	r2,r3,r2
   12210:	e0bff415 	stw	r2,-48(fp)
   12214:	e0fff317 	ldw	r3,-52(fp)
   12218:	00810034 	movhi	r2,1024
   1221c:	10bfffc4 	addi	r2,r2,-1
   12220:	1884703a 	and	r2,r3,r2
   12224:	e0bff315 	stw	r2,-52(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   12228:	e0bff417 	ldw	r2,-48(fp)
   1222c:	1004d6ba 	srli	r2,r2,26
   12230:	e0fff517 	ldw	r3,-44(fp)
   12234:	1885883a 	add	r2,r3,r2
   12238:	e0bff515 	stw	r2,-44(fp)
   1223c:	e0fff417 	ldw	r3,-48(fp)
   12240:	00810034 	movhi	r2,1024
   12244:	10bfffc4 	addi	r2,r2,-1
   12248:	1884703a 	and	r2,r3,r2
   1224c:	e0bff415 	stw	r2,-48(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;
   12250:	e0bff517 	ldw	r2,-44(fp)
   12254:	1004d6ba 	srli	r2,r2,26
   12258:	e0fff617 	ldw	r3,-40(fp)
   1225c:	1885883a 	add	r2,r3,r2
   12260:	e0bff615 	stw	r2,-40(fp)
   12264:	e0fff517 	ldw	r3,-44(fp)
   12268:	00810034 	movhi	r2,1024
   1226c:	10bfffc4 	addi	r2,r2,-1
   12270:	1884703a 	and	r2,r3,r2
   12274:	e0bff515 	stw	r2,-44(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;
   12278:	e0bff617 	ldw	r2,-40(fp)
   1227c:	1004d6ba 	srli	r2,r2,26
   12280:	e0fff717 	ldw	r3,-36(fp)
   12284:	1885883a 	add	r2,r3,r2
   12288:	e0bff715 	stw	r2,-36(fp)
   1228c:	e0fff617 	ldw	r3,-40(fp)
   12290:	00810034 	movhi	r2,1024
   12294:	10bfffc4 	addi	r2,r2,-1
   12298:	1884703a 	and	r2,r3,r2
   1229c:	e0bff615 	stw	r2,-40(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;
   122a0:	e0bff717 	ldw	r2,-36(fp)
   122a4:	1004d6ba 	srli	r2,r2,26
   122a8:	e0fff817 	ldw	r3,-32(fp)
   122ac:	1885883a 	add	r2,r3,r2
   122b0:	e0bff815 	stw	r2,-32(fp)
   122b4:	e0fff717 	ldw	r3,-36(fp)
   122b8:	00810034 	movhi	r2,1024
   122bc:	10bfffc4 	addi	r2,r2,-1
   122c0:	1884703a 	and	r2,r3,r2
   122c4:	e0bff715 	stw	r2,-36(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;
   122c8:	e0bff817 	ldw	r2,-32(fp)
   122cc:	1004d6ba 	srli	r2,r2,26
   122d0:	e0fff917 	ldw	r3,-28(fp)
   122d4:	1885883a 	add	r2,r3,r2
   122d8:	e0bff915 	stw	r2,-28(fp)
   122dc:	e0fff817 	ldw	r3,-32(fp)
   122e0:	00810034 	movhi	r2,1024
   122e4:	10bfffc4 	addi	r2,r2,-1
   122e8:	1884703a 	and	r2,r3,r2
   122ec:	e0bff815 	stw	r2,-32(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;
   122f0:	e0bff917 	ldw	r2,-28(fp)
   122f4:	1004d6ba 	srli	r2,r2,26
   122f8:	e0fffa17 	ldw	r3,-24(fp)
   122fc:	1885883a 	add	r2,r3,r2
   12300:	e0bffa15 	stw	r2,-24(fp)
   12304:	e0fff917 	ldw	r3,-28(fp)
   12308:	00810034 	movhi	r2,1024
   1230c:	10bfffc4 	addi	r2,r2,-1
   12310:	1884703a 	and	r2,r3,r2
   12314:	e0bff915 	stw	r2,-28(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;
   12318:	e0bffa17 	ldw	r2,-24(fp)
   1231c:	1004d6ba 	srli	r2,r2,26
   12320:	e0fffb17 	ldw	r3,-20(fp)
   12324:	1885883a 	add	r2,r3,r2
   12328:	e0bffb15 	stw	r2,-20(fp)
   1232c:	e0fffa17 	ldw	r3,-24(fp)
   12330:	00810034 	movhi	r2,1024
   12334:	10bfffc4 	addi	r2,r2,-1
   12338:	1884703a 	and	r2,r3,r2
   1233c:	e0bffa15 	stw	r2,-24(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;
   12340:	e0bffb17 	ldw	r2,-20(fp)
   12344:	1004d6ba 	srli	r2,r2,26
   12348:	e0fffc17 	ldw	r3,-16(fp)
   1234c:	1885883a 	add	r2,r3,r2
   12350:	e0bffc15 	stw	r2,-16(fp)
   12354:	e0fffb17 	ldw	r3,-20(fp)
   12358:	00810034 	movhi	r2,1024
   1235c:	10bfffc4 	addi	r2,r2,-1
   12360:	1884703a 	and	r2,r3,r2
   12364:	e0bffb15 	stw	r2,-20(fp)

    /* If t9 didn't carry to bit 22 already, then it should have after any final reduction */
    VERIFY_CHECK(t9 >> 22 == x);
   12368:	e0bffc17 	ldw	r2,-16(fp)
   1236c:	1006d5ba 	srli	r3,r2,22
   12370:	e0bffd17 	ldw	r2,-12(fp)
   12374:	1884c03a 	cmpne	r2,r3,r2
   12378:	10803fcc 	andi	r2,r2,255
   1237c:	10000d26 	beq	r2,zero,123b4 <secp256k1_fe_normalize+0x53c>
   12380:	d0a01617 	ldw	r2,-32680(gp)
   12384:	10c00317 	ldw	r3,12(r2)
   12388:	008001b4 	movhi	r2,6
   1238c:	10ab4d04 	addi	r2,r2,-21196
   12390:	d8800015 	stw	r2,0(sp)
   12394:	01c015c4 	movi	r7,87
   12398:	018001b4 	movhi	r6,6
   1239c:	31ab2d04 	addi	r6,r6,-21324
   123a0:	014001b4 	movhi	r5,6
   123a4:	296b3804 	addi	r5,r5,-21280
   123a8:	1809883a 	mov	r4,r3
   123ac:	00452600 	call	45260 <fprintf>
   123b0:	00450340 	call	45034 <abort>

    /* Mask off the possible multiple of 2^256 from the final reduction */
    t9 &= 0x03FFFFFUL;
   123b4:	e0fffc17 	ldw	r3,-16(fp)
   123b8:	00801034 	movhi	r2,64
   123bc:	10bfffc4 	addi	r2,r2,-1
   123c0:	1884703a 	and	r2,r3,r2
   123c4:	e0bffc15 	stw	r2,-16(fp)

    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;
   123c8:	e0bfff17 	ldw	r2,-4(fp)
   123cc:	e0fff317 	ldw	r3,-52(fp)
   123d0:	10c00015 	stw	r3,0(r2)
   123d4:	e0bfff17 	ldw	r2,-4(fp)
   123d8:	e0fff417 	ldw	r3,-48(fp)
   123dc:	10c00115 	stw	r3,4(r2)
   123e0:	e0bfff17 	ldw	r2,-4(fp)
   123e4:	e0fff517 	ldw	r3,-44(fp)
   123e8:	10c00215 	stw	r3,8(r2)
   123ec:	e0bfff17 	ldw	r2,-4(fp)
   123f0:	e0fff617 	ldw	r3,-40(fp)
   123f4:	10c00315 	stw	r3,12(r2)
   123f8:	e0bfff17 	ldw	r2,-4(fp)
   123fc:	e0fff717 	ldw	r3,-36(fp)
   12400:	10c00415 	stw	r3,16(r2)
    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;
   12404:	e0bfff17 	ldw	r2,-4(fp)
   12408:	e0fff817 	ldw	r3,-32(fp)
   1240c:	10c00515 	stw	r3,20(r2)
   12410:	e0bfff17 	ldw	r2,-4(fp)
   12414:	e0fff917 	ldw	r3,-28(fp)
   12418:	10c00615 	stw	r3,24(r2)
   1241c:	e0bfff17 	ldw	r2,-4(fp)
   12420:	e0fffa17 	ldw	r3,-24(fp)
   12424:	10c00715 	stw	r3,28(r2)
   12428:	e0bfff17 	ldw	r2,-4(fp)
   1242c:	e0fffb17 	ldw	r3,-20(fp)
   12430:	10c00815 	stw	r3,32(r2)
   12434:	e0bfff17 	ldw	r2,-4(fp)
   12438:	e0fffc17 	ldw	r3,-16(fp)
   1243c:	10c00915 	stw	r3,36(r2)

#ifdef VERIFY
    r->magnitude = 1;
   12440:	e0bfff17 	ldw	r2,-4(fp)
   12444:	00c00044 	movi	r3,1
   12448:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   1244c:	e0bfff17 	ldw	r2,-4(fp)
   12450:	00c00044 	movi	r3,1
   12454:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_verify(r);
   12458:	e13fff17 	ldw	r4,-4(fp)
   1245c:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
}
   12460:	0001883a 	nop
   12464:	e037883a 	mov	sp,fp
   12468:	dfc00117 	ldw	ra,4(sp)
   1246c:	df000017 	ldw	fp,0(sp)
   12470:	dec00204 	addi	sp,sp,8
   12474:	f800283a 	ret

00012478 <secp256k1_fe_normalize_weak>:

static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {
   12478:	defff104 	addi	sp,sp,-60
   1247c:	dfc00e15 	stw	ra,56(sp)
   12480:	df000d15 	stw	fp,52(sp)
   12484:	df000d04 	addi	fp,sp,52
   12488:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],
   1248c:	e0bfff17 	ldw	r2,-4(fp)
   12490:	10800017 	ldw	r2,0(r2)
   12494:	e0bff415 	stw	r2,-48(fp)
   12498:	e0bfff17 	ldw	r2,-4(fp)
   1249c:	10800117 	ldw	r2,4(r2)
   124a0:	e0bff515 	stw	r2,-44(fp)
   124a4:	e0bfff17 	ldw	r2,-4(fp)
   124a8:	10800217 	ldw	r2,8(r2)
   124ac:	e0bff615 	stw	r2,-40(fp)
   124b0:	e0bfff17 	ldw	r2,-4(fp)
   124b4:	10800317 	ldw	r2,12(r2)
   124b8:	e0bff715 	stw	r2,-36(fp)
   124bc:	e0bfff17 	ldw	r2,-4(fp)
   124c0:	10800417 	ldw	r2,16(r2)
   124c4:	e0bff815 	stw	r2,-32(fp)
             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];
   124c8:	e0bfff17 	ldw	r2,-4(fp)
   124cc:	10800517 	ldw	r2,20(r2)
   124d0:	e0bff915 	stw	r2,-28(fp)
   124d4:	e0bfff17 	ldw	r2,-4(fp)
   124d8:	10800617 	ldw	r2,24(r2)
   124dc:	e0bffa15 	stw	r2,-24(fp)
   124e0:	e0bfff17 	ldw	r2,-4(fp)
   124e4:	10800717 	ldw	r2,28(r2)
   124e8:	e0bffb15 	stw	r2,-20(fp)
   124ec:	e0bfff17 	ldw	r2,-4(fp)
   124f0:	10800817 	ldw	r2,32(r2)
   124f4:	e0bffc15 	stw	r2,-16(fp)
   124f8:	e0bfff17 	ldw	r2,-4(fp)
   124fc:	10800917 	ldw	r2,36(r2)
   12500:	e0bffd15 	stw	r2,-12(fp)

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;
   12504:	e0bffd17 	ldw	r2,-12(fp)
   12508:	1004d5ba 	srli	r2,r2,22
   1250c:	e0bffe15 	stw	r2,-8(fp)
   12510:	e0fffd17 	ldw	r3,-12(fp)
   12514:	00801034 	movhi	r2,64
   12518:	10bfffc4 	addi	r2,r2,-1
   1251c:	1884703a 	and	r2,r3,r2
   12520:	e0bffd15 	stw	r2,-12(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   12524:	0140f444 	movi	r5,977
   12528:	e13ffe17 	ldw	r4,-8(fp)
   1252c:	0042b540 	call	42b54 <__mulsi3>
   12530:	1007883a 	mov	r3,r2
   12534:	e0bff417 	ldw	r2,-48(fp)
   12538:	10c5883a 	add	r2,r2,r3
   1253c:	e0bff415 	stw	r2,-48(fp)
   12540:	e0bffe17 	ldw	r2,-8(fp)
   12544:	100491ba 	slli	r2,r2,6
   12548:	e0fff517 	ldw	r3,-44(fp)
   1254c:	1885883a 	add	r2,r3,r2
   12550:	e0bff515 	stw	r2,-44(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   12554:	e0bff417 	ldw	r2,-48(fp)
   12558:	1004d6ba 	srli	r2,r2,26
   1255c:	e0fff517 	ldw	r3,-44(fp)
   12560:	1885883a 	add	r2,r3,r2
   12564:	e0bff515 	stw	r2,-44(fp)
   12568:	e0fff417 	ldw	r3,-48(fp)
   1256c:	00810034 	movhi	r2,1024
   12570:	10bfffc4 	addi	r2,r2,-1
   12574:	1884703a 	and	r2,r3,r2
   12578:	e0bff415 	stw	r2,-48(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   1257c:	e0bff517 	ldw	r2,-44(fp)
   12580:	1004d6ba 	srli	r2,r2,26
   12584:	e0fff617 	ldw	r3,-40(fp)
   12588:	1885883a 	add	r2,r3,r2
   1258c:	e0bff615 	stw	r2,-40(fp)
   12590:	e0fff517 	ldw	r3,-44(fp)
   12594:	00810034 	movhi	r2,1024
   12598:	10bfffc4 	addi	r2,r2,-1
   1259c:	1884703a 	and	r2,r3,r2
   125a0:	e0bff515 	stw	r2,-44(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;
   125a4:	e0bff617 	ldw	r2,-40(fp)
   125a8:	1004d6ba 	srli	r2,r2,26
   125ac:	e0fff717 	ldw	r3,-36(fp)
   125b0:	1885883a 	add	r2,r3,r2
   125b4:	e0bff715 	stw	r2,-36(fp)
   125b8:	e0fff617 	ldw	r3,-40(fp)
   125bc:	00810034 	movhi	r2,1024
   125c0:	10bfffc4 	addi	r2,r2,-1
   125c4:	1884703a 	and	r2,r3,r2
   125c8:	e0bff615 	stw	r2,-40(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;
   125cc:	e0bff717 	ldw	r2,-36(fp)
   125d0:	1004d6ba 	srli	r2,r2,26
   125d4:	e0fff817 	ldw	r3,-32(fp)
   125d8:	1885883a 	add	r2,r3,r2
   125dc:	e0bff815 	stw	r2,-32(fp)
   125e0:	e0fff717 	ldw	r3,-36(fp)
   125e4:	00810034 	movhi	r2,1024
   125e8:	10bfffc4 	addi	r2,r2,-1
   125ec:	1884703a 	and	r2,r3,r2
   125f0:	e0bff715 	stw	r2,-36(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;
   125f4:	e0bff817 	ldw	r2,-32(fp)
   125f8:	1004d6ba 	srli	r2,r2,26
   125fc:	e0fff917 	ldw	r3,-28(fp)
   12600:	1885883a 	add	r2,r3,r2
   12604:	e0bff915 	stw	r2,-28(fp)
   12608:	e0fff817 	ldw	r3,-32(fp)
   1260c:	00810034 	movhi	r2,1024
   12610:	10bfffc4 	addi	r2,r2,-1
   12614:	1884703a 	and	r2,r3,r2
   12618:	e0bff815 	stw	r2,-32(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;
   1261c:	e0bff917 	ldw	r2,-28(fp)
   12620:	1004d6ba 	srli	r2,r2,26
   12624:	e0fffa17 	ldw	r3,-24(fp)
   12628:	1885883a 	add	r2,r3,r2
   1262c:	e0bffa15 	stw	r2,-24(fp)
   12630:	e0fff917 	ldw	r3,-28(fp)
   12634:	00810034 	movhi	r2,1024
   12638:	10bfffc4 	addi	r2,r2,-1
   1263c:	1884703a 	and	r2,r3,r2
   12640:	e0bff915 	stw	r2,-28(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;
   12644:	e0bffa17 	ldw	r2,-24(fp)
   12648:	1004d6ba 	srli	r2,r2,26
   1264c:	e0fffb17 	ldw	r3,-20(fp)
   12650:	1885883a 	add	r2,r3,r2
   12654:	e0bffb15 	stw	r2,-20(fp)
   12658:	e0fffa17 	ldw	r3,-24(fp)
   1265c:	00810034 	movhi	r2,1024
   12660:	10bfffc4 	addi	r2,r2,-1
   12664:	1884703a 	and	r2,r3,r2
   12668:	e0bffa15 	stw	r2,-24(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;
   1266c:	e0bffb17 	ldw	r2,-20(fp)
   12670:	1004d6ba 	srli	r2,r2,26
   12674:	e0fffc17 	ldw	r3,-16(fp)
   12678:	1885883a 	add	r2,r3,r2
   1267c:	e0bffc15 	stw	r2,-16(fp)
   12680:	e0fffb17 	ldw	r3,-20(fp)
   12684:	00810034 	movhi	r2,1024
   12688:	10bfffc4 	addi	r2,r2,-1
   1268c:	1884703a 	and	r2,r3,r2
   12690:	e0bffb15 	stw	r2,-20(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;
   12694:	e0bffc17 	ldw	r2,-16(fp)
   12698:	1004d6ba 	srli	r2,r2,26
   1269c:	e0fffd17 	ldw	r3,-12(fp)
   126a0:	1885883a 	add	r2,r3,r2
   126a4:	e0bffd15 	stw	r2,-12(fp)
   126a8:	e0fffc17 	ldw	r3,-16(fp)
   126ac:	00810034 	movhi	r2,1024
   126b0:	10bfffc4 	addi	r2,r2,-1
   126b4:	1884703a 	and	r2,r3,r2
   126b8:	e0bffc15 	stw	r2,-16(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   126bc:	e0bffd17 	ldw	r2,-12(fp)
   126c0:	1004d5fa 	srli	r2,r2,23
   126c4:	1004c03a 	cmpne	r2,r2,zero
   126c8:	10803fcc 	andi	r2,r2,255
   126cc:	10000d26 	beq	r2,zero,12704 <secp256k1_fe_normalize_weak+0x28c>
   126d0:	d0a01617 	ldw	r2,-32680(gp)
   126d4:	10c00317 	ldw	r3,12(r2)
   126d8:	008001b4 	movhi	r2,6
   126dc:	10ab4304 	addi	r2,r2,-21236
   126e0:	d8800015 	stw	r2,0(sp)
   126e4:	01c01e84 	movi	r7,122
   126e8:	018001b4 	movhi	r6,6
   126ec:	31ab2d04 	addi	r6,r6,-21324
   126f0:	014001b4 	movhi	r5,6
   126f4:	296b3804 	addi	r5,r5,-21280
   126f8:	1809883a 	mov	r4,r3
   126fc:	00452600 	call	45260 <fprintf>
   12700:	00450340 	call	45034 <abort>

    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;
   12704:	e0bfff17 	ldw	r2,-4(fp)
   12708:	e0fff417 	ldw	r3,-48(fp)
   1270c:	10c00015 	stw	r3,0(r2)
   12710:	e0bfff17 	ldw	r2,-4(fp)
   12714:	e0fff517 	ldw	r3,-44(fp)
   12718:	10c00115 	stw	r3,4(r2)
   1271c:	e0bfff17 	ldw	r2,-4(fp)
   12720:	e0fff617 	ldw	r3,-40(fp)
   12724:	10c00215 	stw	r3,8(r2)
   12728:	e0bfff17 	ldw	r2,-4(fp)
   1272c:	e0fff717 	ldw	r3,-36(fp)
   12730:	10c00315 	stw	r3,12(r2)
   12734:	e0bfff17 	ldw	r2,-4(fp)
   12738:	e0fff817 	ldw	r3,-32(fp)
   1273c:	10c00415 	stw	r3,16(r2)
    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;
   12740:	e0bfff17 	ldw	r2,-4(fp)
   12744:	e0fff917 	ldw	r3,-28(fp)
   12748:	10c00515 	stw	r3,20(r2)
   1274c:	e0bfff17 	ldw	r2,-4(fp)
   12750:	e0fffa17 	ldw	r3,-24(fp)
   12754:	10c00615 	stw	r3,24(r2)
   12758:	e0bfff17 	ldw	r2,-4(fp)
   1275c:	e0fffb17 	ldw	r3,-20(fp)
   12760:	10c00715 	stw	r3,28(r2)
   12764:	e0bfff17 	ldw	r2,-4(fp)
   12768:	e0fffc17 	ldw	r3,-16(fp)
   1276c:	10c00815 	stw	r3,32(r2)
   12770:	e0bfff17 	ldw	r2,-4(fp)
   12774:	e0fffd17 	ldw	r3,-12(fp)
   12778:	10c00915 	stw	r3,36(r2)

#ifdef VERIFY
    r->magnitude = 1;
   1277c:	e0bfff17 	ldw	r2,-4(fp)
   12780:	00c00044 	movi	r3,1
   12784:	10c00a15 	stw	r3,40(r2)
    secp256k1_fe_verify(r);
   12788:	e13fff17 	ldw	r4,-4(fp)
   1278c:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
}
   12790:	0001883a 	nop
   12794:	e037883a 	mov	sp,fp
   12798:	dfc00117 	ldw	ra,4(sp)
   1279c:	df000017 	ldw	fp,0(sp)
   127a0:	dec00204 	addi	sp,sp,8
   127a4:	f800283a 	ret

000127a8 <secp256k1_fe_normalize_var>:

static void secp256k1_fe_normalize_var(secp256k1_fe *r) {
   127a8:	defff004 	addi	sp,sp,-64
   127ac:	dfc00f15 	stw	ra,60(sp)
   127b0:	df000e15 	stw	fp,56(sp)
   127b4:	df000e04 	addi	fp,sp,56
   127b8:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],
   127bc:	e0bfff17 	ldw	r2,-4(fp)
   127c0:	10800017 	ldw	r2,0(r2)
   127c4:	e0bff315 	stw	r2,-52(fp)
   127c8:	e0bfff17 	ldw	r2,-4(fp)
   127cc:	10800117 	ldw	r2,4(r2)
   127d0:	e0bff415 	stw	r2,-48(fp)
   127d4:	e0bfff17 	ldw	r2,-4(fp)
   127d8:	10800217 	ldw	r2,8(r2)
   127dc:	e0bff515 	stw	r2,-44(fp)
   127e0:	e0bfff17 	ldw	r2,-4(fp)
   127e4:	10800317 	ldw	r2,12(r2)
   127e8:	e0bff615 	stw	r2,-40(fp)
   127ec:	e0bfff17 	ldw	r2,-4(fp)
   127f0:	10800417 	ldw	r2,16(r2)
   127f4:	e0bff715 	stw	r2,-36(fp)
             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];
   127f8:	e0bfff17 	ldw	r2,-4(fp)
   127fc:	10800517 	ldw	r2,20(r2)
   12800:	e0bff815 	stw	r2,-32(fp)
   12804:	e0bfff17 	ldw	r2,-4(fp)
   12808:	10800617 	ldw	r2,24(r2)
   1280c:	e0bff915 	stw	r2,-28(fp)
   12810:	e0bfff17 	ldw	r2,-4(fp)
   12814:	10800717 	ldw	r2,28(r2)
   12818:	e0bffa15 	stw	r2,-24(fp)
   1281c:	e0bfff17 	ldw	r2,-4(fp)
   12820:	10800817 	ldw	r2,32(r2)
   12824:	e0bffb15 	stw	r2,-20(fp)
   12828:	e0bfff17 	ldw	r2,-4(fp)
   1282c:	10800917 	ldw	r2,36(r2)
   12830:	e0bffc15 	stw	r2,-16(fp)

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    uint32_t m;
    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;
   12834:	e0bffc17 	ldw	r2,-16(fp)
   12838:	1004d5ba 	srli	r2,r2,22
   1283c:	e0bffd15 	stw	r2,-12(fp)
   12840:	e0fffc17 	ldw	r3,-16(fp)
   12844:	00801034 	movhi	r2,64
   12848:	10bfffc4 	addi	r2,r2,-1
   1284c:	1884703a 	and	r2,r3,r2
   12850:	e0bffc15 	stw	r2,-16(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   12854:	0140f444 	movi	r5,977
   12858:	e13ffd17 	ldw	r4,-12(fp)
   1285c:	0042b540 	call	42b54 <__mulsi3>
   12860:	1007883a 	mov	r3,r2
   12864:	e0bff317 	ldw	r2,-52(fp)
   12868:	10c5883a 	add	r2,r2,r3
   1286c:	e0bff315 	stw	r2,-52(fp)
   12870:	e0bffd17 	ldw	r2,-12(fp)
   12874:	100491ba 	slli	r2,r2,6
   12878:	e0fff417 	ldw	r3,-48(fp)
   1287c:	1885883a 	add	r2,r3,r2
   12880:	e0bff415 	stw	r2,-48(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   12884:	e0bff317 	ldw	r2,-52(fp)
   12888:	1004d6ba 	srli	r2,r2,26
   1288c:	e0fff417 	ldw	r3,-48(fp)
   12890:	1885883a 	add	r2,r3,r2
   12894:	e0bff415 	stw	r2,-48(fp)
   12898:	e0fff317 	ldw	r3,-52(fp)
   1289c:	00810034 	movhi	r2,1024
   128a0:	10bfffc4 	addi	r2,r2,-1
   128a4:	1884703a 	and	r2,r3,r2
   128a8:	e0bff315 	stw	r2,-52(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   128ac:	e0bff417 	ldw	r2,-48(fp)
   128b0:	1004d6ba 	srli	r2,r2,26
   128b4:	e0fff517 	ldw	r3,-44(fp)
   128b8:	1885883a 	add	r2,r3,r2
   128bc:	e0bff515 	stw	r2,-44(fp)
   128c0:	e0fff417 	ldw	r3,-48(fp)
   128c4:	00810034 	movhi	r2,1024
   128c8:	10bfffc4 	addi	r2,r2,-1
   128cc:	1884703a 	and	r2,r3,r2
   128d0:	e0bff415 	stw	r2,-48(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; m = t2;
   128d4:	e0bff517 	ldw	r2,-44(fp)
   128d8:	1004d6ba 	srli	r2,r2,26
   128dc:	e0fff617 	ldw	r3,-40(fp)
   128e0:	1885883a 	add	r2,r3,r2
   128e4:	e0bff615 	stw	r2,-40(fp)
   128e8:	e0fff517 	ldw	r3,-44(fp)
   128ec:	00810034 	movhi	r2,1024
   128f0:	10bfffc4 	addi	r2,r2,-1
   128f4:	1884703a 	and	r2,r3,r2
   128f8:	e0bff515 	stw	r2,-44(fp)
   128fc:	e0bff517 	ldw	r2,-44(fp)
   12900:	e0bffe15 	stw	r2,-8(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; m &= t3;
   12904:	e0bff617 	ldw	r2,-40(fp)
   12908:	1004d6ba 	srli	r2,r2,26
   1290c:	e0fff717 	ldw	r3,-36(fp)
   12910:	1885883a 	add	r2,r3,r2
   12914:	e0bff715 	stw	r2,-36(fp)
   12918:	e0fff617 	ldw	r3,-40(fp)
   1291c:	00810034 	movhi	r2,1024
   12920:	10bfffc4 	addi	r2,r2,-1
   12924:	1884703a 	and	r2,r3,r2
   12928:	e0bff615 	stw	r2,-40(fp)
   1292c:	e0fffe17 	ldw	r3,-8(fp)
   12930:	e0bff617 	ldw	r2,-40(fp)
   12934:	1884703a 	and	r2,r3,r2
   12938:	e0bffe15 	stw	r2,-8(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; m &= t4;
   1293c:	e0bff717 	ldw	r2,-36(fp)
   12940:	1004d6ba 	srli	r2,r2,26
   12944:	e0fff817 	ldw	r3,-32(fp)
   12948:	1885883a 	add	r2,r3,r2
   1294c:	e0bff815 	stw	r2,-32(fp)
   12950:	e0fff717 	ldw	r3,-36(fp)
   12954:	00810034 	movhi	r2,1024
   12958:	10bfffc4 	addi	r2,r2,-1
   1295c:	1884703a 	and	r2,r3,r2
   12960:	e0bff715 	stw	r2,-36(fp)
   12964:	e0fffe17 	ldw	r3,-8(fp)
   12968:	e0bff717 	ldw	r2,-36(fp)
   1296c:	1884703a 	and	r2,r3,r2
   12970:	e0bffe15 	stw	r2,-8(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; m &= t5;
   12974:	e0bff817 	ldw	r2,-32(fp)
   12978:	1004d6ba 	srli	r2,r2,26
   1297c:	e0fff917 	ldw	r3,-28(fp)
   12980:	1885883a 	add	r2,r3,r2
   12984:	e0bff915 	stw	r2,-28(fp)
   12988:	e0fff817 	ldw	r3,-32(fp)
   1298c:	00810034 	movhi	r2,1024
   12990:	10bfffc4 	addi	r2,r2,-1
   12994:	1884703a 	and	r2,r3,r2
   12998:	e0bff815 	stw	r2,-32(fp)
   1299c:	e0fffe17 	ldw	r3,-8(fp)
   129a0:	e0bff817 	ldw	r2,-32(fp)
   129a4:	1884703a 	and	r2,r3,r2
   129a8:	e0bffe15 	stw	r2,-8(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; m &= t6;
   129ac:	e0bff917 	ldw	r2,-28(fp)
   129b0:	1004d6ba 	srli	r2,r2,26
   129b4:	e0fffa17 	ldw	r3,-24(fp)
   129b8:	1885883a 	add	r2,r3,r2
   129bc:	e0bffa15 	stw	r2,-24(fp)
   129c0:	e0fff917 	ldw	r3,-28(fp)
   129c4:	00810034 	movhi	r2,1024
   129c8:	10bfffc4 	addi	r2,r2,-1
   129cc:	1884703a 	and	r2,r3,r2
   129d0:	e0bff915 	stw	r2,-28(fp)
   129d4:	e0fffe17 	ldw	r3,-8(fp)
   129d8:	e0bff917 	ldw	r2,-28(fp)
   129dc:	1884703a 	and	r2,r3,r2
   129e0:	e0bffe15 	stw	r2,-8(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; m &= t7;
   129e4:	e0bffa17 	ldw	r2,-24(fp)
   129e8:	1004d6ba 	srli	r2,r2,26
   129ec:	e0fffb17 	ldw	r3,-20(fp)
   129f0:	1885883a 	add	r2,r3,r2
   129f4:	e0bffb15 	stw	r2,-20(fp)
   129f8:	e0fffa17 	ldw	r3,-24(fp)
   129fc:	00810034 	movhi	r2,1024
   12a00:	10bfffc4 	addi	r2,r2,-1
   12a04:	1884703a 	and	r2,r3,r2
   12a08:	e0bffa15 	stw	r2,-24(fp)
   12a0c:	e0fffe17 	ldw	r3,-8(fp)
   12a10:	e0bffa17 	ldw	r2,-24(fp)
   12a14:	1884703a 	and	r2,r3,r2
   12a18:	e0bffe15 	stw	r2,-8(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; m &= t8;
   12a1c:	e0bffb17 	ldw	r2,-20(fp)
   12a20:	1004d6ba 	srli	r2,r2,26
   12a24:	e0fffc17 	ldw	r3,-16(fp)
   12a28:	1885883a 	add	r2,r3,r2
   12a2c:	e0bffc15 	stw	r2,-16(fp)
   12a30:	e0fffb17 	ldw	r3,-20(fp)
   12a34:	00810034 	movhi	r2,1024
   12a38:	10bfffc4 	addi	r2,r2,-1
   12a3c:	1884703a 	and	r2,r3,r2
   12a40:	e0bffb15 	stw	r2,-20(fp)
   12a44:	e0fffe17 	ldw	r3,-8(fp)
   12a48:	e0bffb17 	ldw	r2,-20(fp)
   12a4c:	1884703a 	and	r2,r3,r2
   12a50:	e0bffe15 	stw	r2,-8(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   12a54:	e0bffc17 	ldw	r2,-16(fp)
   12a58:	1004d5fa 	srli	r2,r2,23
   12a5c:	1004c03a 	cmpne	r2,r2,zero
   12a60:	10803fcc 	andi	r2,r2,255
   12a64:	10000d26 	beq	r2,zero,12a9c <secp256k1_fe_normalize_var+0x2f4>
   12a68:	d0a01617 	ldw	r2,-32680(gp)
   12a6c:	10c00317 	ldw	r3,12(r2)
   12a70:	008001b4 	movhi	r2,6
   12a74:	10ab4304 	addi	r2,r2,-21236
   12a78:	d8800015 	stw	r2,0(sp)
   12a7c:	01c02684 	movi	r7,154
   12a80:	018001b4 	movhi	r6,6
   12a84:	31ab2d04 	addi	r6,r6,-21324
   12a88:	014001b4 	movhi	r5,6
   12a8c:	296b3804 	addi	r5,r5,-21280
   12a90:	1809883a 	mov	r4,r3
   12a94:	00452600 	call	45260 <fprintf>
   12a98:	00450340 	call	45034 <abort>

    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
    x = (t9 >> 22) | ((t9 == 0x03FFFFFUL) & (m == 0x3FFFFFFUL)
   12a9c:	e0bffc17 	ldw	r2,-16(fp)
   12aa0:	1006d5ba 	srli	r3,r2,22
   12aa4:	e13ffc17 	ldw	r4,-16(fp)
   12aa8:	00801034 	movhi	r2,64
   12aac:	10bfffc4 	addi	r2,r2,-1
   12ab0:	2085003a 	cmpeq	r2,r4,r2
   12ab4:	100b883a 	mov	r5,r2
   12ab8:	e13ffe17 	ldw	r4,-8(fp)
   12abc:	00810034 	movhi	r2,1024
   12ac0:	10bfffc4 	addi	r2,r2,-1
   12ac4:	2085003a 	cmpeq	r2,r4,r2
   12ac8:	2884703a 	and	r2,r5,r2
   12acc:	11003fcc 	andi	r4,r2,255
        & ((t1 + 0x40UL + ((t0 + 0x3D1UL) >> 26)) > 0x3FFFFFFUL));
   12ad0:	e0bff317 	ldw	r2,-52(fp)
   12ad4:	1080f444 	addi	r2,r2,977
   12ad8:	100ad6ba 	srli	r5,r2,26
   12adc:	e0bff417 	ldw	r2,-48(fp)
   12ae0:	2885883a 	add	r2,r5,r2
   12ae4:	11401004 	addi	r5,r2,64
   12ae8:	00810034 	movhi	r2,1024
   12aec:	2885403a 	cmpgeu	r2,r5,r2
   12af0:	10803fcc 	andi	r2,r2,255
   12af4:	2084703a 	and	r2,r4,r2

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);

    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
    x = (t9 >> 22) | ((t9 == 0x03FFFFFUL) & (m == 0x3FFFFFFUL)
   12af8:	1884b03a 	or	r2,r3,r2
   12afc:	e0bffd15 	stw	r2,-12(fp)
        & ((t1 + 0x40UL + ((t0 + 0x3D1UL) >> 26)) > 0x3FFFFFFUL));

    if (x) {
   12b00:	e0bffd17 	ldw	r2,-12(fp)
   12b04:	10007a26 	beq	r2,zero,12cf0 <secp256k1_fe_normalize_var+0x548>
        t0 += 0x3D1UL; t1 += (x << 6);
   12b08:	e0bff317 	ldw	r2,-52(fp)
   12b0c:	1080f444 	addi	r2,r2,977
   12b10:	e0bff315 	stw	r2,-52(fp)
   12b14:	e0bffd17 	ldw	r2,-12(fp)
   12b18:	100491ba 	slli	r2,r2,6
   12b1c:	e0fff417 	ldw	r3,-48(fp)
   12b20:	1885883a 	add	r2,r3,r2
   12b24:	e0bff415 	stw	r2,-48(fp)
        t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   12b28:	e0bff317 	ldw	r2,-52(fp)
   12b2c:	1004d6ba 	srli	r2,r2,26
   12b30:	e0fff417 	ldw	r3,-48(fp)
   12b34:	1885883a 	add	r2,r3,r2
   12b38:	e0bff415 	stw	r2,-48(fp)
   12b3c:	e0fff317 	ldw	r3,-52(fp)
   12b40:	00810034 	movhi	r2,1024
   12b44:	10bfffc4 	addi	r2,r2,-1
   12b48:	1884703a 	and	r2,r3,r2
   12b4c:	e0bff315 	stw	r2,-52(fp)
        t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   12b50:	e0bff417 	ldw	r2,-48(fp)
   12b54:	1004d6ba 	srli	r2,r2,26
   12b58:	e0fff517 	ldw	r3,-44(fp)
   12b5c:	1885883a 	add	r2,r3,r2
   12b60:	e0bff515 	stw	r2,-44(fp)
   12b64:	e0fff417 	ldw	r3,-48(fp)
   12b68:	00810034 	movhi	r2,1024
   12b6c:	10bfffc4 	addi	r2,r2,-1
   12b70:	1884703a 	and	r2,r3,r2
   12b74:	e0bff415 	stw	r2,-48(fp)
        t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;
   12b78:	e0bff517 	ldw	r2,-44(fp)
   12b7c:	1004d6ba 	srli	r2,r2,26
   12b80:	e0fff617 	ldw	r3,-40(fp)
   12b84:	1885883a 	add	r2,r3,r2
   12b88:	e0bff615 	stw	r2,-40(fp)
   12b8c:	e0fff517 	ldw	r3,-44(fp)
   12b90:	00810034 	movhi	r2,1024
   12b94:	10bfffc4 	addi	r2,r2,-1
   12b98:	1884703a 	and	r2,r3,r2
   12b9c:	e0bff515 	stw	r2,-44(fp)
        t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;
   12ba0:	e0bff617 	ldw	r2,-40(fp)
   12ba4:	1004d6ba 	srli	r2,r2,26
   12ba8:	e0fff717 	ldw	r3,-36(fp)
   12bac:	1885883a 	add	r2,r3,r2
   12bb0:	e0bff715 	stw	r2,-36(fp)
   12bb4:	e0fff617 	ldw	r3,-40(fp)
   12bb8:	00810034 	movhi	r2,1024
   12bbc:	10bfffc4 	addi	r2,r2,-1
   12bc0:	1884703a 	and	r2,r3,r2
   12bc4:	e0bff615 	stw	r2,-40(fp)
        t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;
   12bc8:	e0bff717 	ldw	r2,-36(fp)
   12bcc:	1004d6ba 	srli	r2,r2,26
   12bd0:	e0fff817 	ldw	r3,-32(fp)
   12bd4:	1885883a 	add	r2,r3,r2
   12bd8:	e0bff815 	stw	r2,-32(fp)
   12bdc:	e0fff717 	ldw	r3,-36(fp)
   12be0:	00810034 	movhi	r2,1024
   12be4:	10bfffc4 	addi	r2,r2,-1
   12be8:	1884703a 	and	r2,r3,r2
   12bec:	e0bff715 	stw	r2,-36(fp)
        t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;
   12bf0:	e0bff817 	ldw	r2,-32(fp)
   12bf4:	1004d6ba 	srli	r2,r2,26
   12bf8:	e0fff917 	ldw	r3,-28(fp)
   12bfc:	1885883a 	add	r2,r3,r2
   12c00:	e0bff915 	stw	r2,-28(fp)
   12c04:	e0fff817 	ldw	r3,-32(fp)
   12c08:	00810034 	movhi	r2,1024
   12c0c:	10bfffc4 	addi	r2,r2,-1
   12c10:	1884703a 	and	r2,r3,r2
   12c14:	e0bff815 	stw	r2,-32(fp)
        t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;
   12c18:	e0bff917 	ldw	r2,-28(fp)
   12c1c:	1004d6ba 	srli	r2,r2,26
   12c20:	e0fffa17 	ldw	r3,-24(fp)
   12c24:	1885883a 	add	r2,r3,r2
   12c28:	e0bffa15 	stw	r2,-24(fp)
   12c2c:	e0fff917 	ldw	r3,-28(fp)
   12c30:	00810034 	movhi	r2,1024
   12c34:	10bfffc4 	addi	r2,r2,-1
   12c38:	1884703a 	and	r2,r3,r2
   12c3c:	e0bff915 	stw	r2,-28(fp)
        t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;
   12c40:	e0bffa17 	ldw	r2,-24(fp)
   12c44:	1004d6ba 	srli	r2,r2,26
   12c48:	e0fffb17 	ldw	r3,-20(fp)
   12c4c:	1885883a 	add	r2,r3,r2
   12c50:	e0bffb15 	stw	r2,-20(fp)
   12c54:	e0fffa17 	ldw	r3,-24(fp)
   12c58:	00810034 	movhi	r2,1024
   12c5c:	10bfffc4 	addi	r2,r2,-1
   12c60:	1884703a 	and	r2,r3,r2
   12c64:	e0bffa15 	stw	r2,-24(fp)
        t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;
   12c68:	e0bffb17 	ldw	r2,-20(fp)
   12c6c:	1004d6ba 	srli	r2,r2,26
   12c70:	e0fffc17 	ldw	r3,-16(fp)
   12c74:	1885883a 	add	r2,r3,r2
   12c78:	e0bffc15 	stw	r2,-16(fp)
   12c7c:	e0fffb17 	ldw	r3,-20(fp)
   12c80:	00810034 	movhi	r2,1024
   12c84:	10bfffc4 	addi	r2,r2,-1
   12c88:	1884703a 	and	r2,r3,r2
   12c8c:	e0bffb15 	stw	r2,-20(fp)

        /* If t9 didn't carry to bit 22 already, then it should have after any final reduction */
        VERIFY_CHECK(t9 >> 22 == x);
   12c90:	e0bffc17 	ldw	r2,-16(fp)
   12c94:	1006d5ba 	srli	r3,r2,22
   12c98:	e0bffd17 	ldw	r2,-12(fp)
   12c9c:	1884c03a 	cmpne	r2,r3,r2
   12ca0:	10803fcc 	andi	r2,r2,255
   12ca4:	10000d26 	beq	r2,zero,12cdc <secp256k1_fe_normalize_var+0x534>
   12ca8:	d0a01617 	ldw	r2,-32680(gp)
   12cac:	10c00317 	ldw	r3,12(r2)
   12cb0:	008001b4 	movhi	r2,6
   12cb4:	10ab4d04 	addi	r2,r2,-21196
   12cb8:	d8800015 	stw	r2,0(sp)
   12cbc:	01c02b44 	movi	r7,173
   12cc0:	018001b4 	movhi	r6,6
   12cc4:	31ab2d04 	addi	r6,r6,-21324
   12cc8:	014001b4 	movhi	r5,6
   12ccc:	296b3804 	addi	r5,r5,-21280
   12cd0:	1809883a 	mov	r4,r3
   12cd4:	00452600 	call	45260 <fprintf>
   12cd8:	00450340 	call	45034 <abort>

        /* Mask off the possible multiple of 2^256 from the final reduction */
        t9 &= 0x03FFFFFUL;
   12cdc:	e0fffc17 	ldw	r3,-16(fp)
   12ce0:	00801034 	movhi	r2,64
   12ce4:	10bfffc4 	addi	r2,r2,-1
   12ce8:	1884703a 	and	r2,r3,r2
   12cec:	e0bffc15 	stw	r2,-16(fp)
    }

    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;
   12cf0:	e0bfff17 	ldw	r2,-4(fp)
   12cf4:	e0fff317 	ldw	r3,-52(fp)
   12cf8:	10c00015 	stw	r3,0(r2)
   12cfc:	e0bfff17 	ldw	r2,-4(fp)
   12d00:	e0fff417 	ldw	r3,-48(fp)
   12d04:	10c00115 	stw	r3,4(r2)
   12d08:	e0bfff17 	ldw	r2,-4(fp)
   12d0c:	e0fff517 	ldw	r3,-44(fp)
   12d10:	10c00215 	stw	r3,8(r2)
   12d14:	e0bfff17 	ldw	r2,-4(fp)
   12d18:	e0fff617 	ldw	r3,-40(fp)
   12d1c:	10c00315 	stw	r3,12(r2)
   12d20:	e0bfff17 	ldw	r2,-4(fp)
   12d24:	e0fff717 	ldw	r3,-36(fp)
   12d28:	10c00415 	stw	r3,16(r2)
    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;
   12d2c:	e0bfff17 	ldw	r2,-4(fp)
   12d30:	e0fff817 	ldw	r3,-32(fp)
   12d34:	10c00515 	stw	r3,20(r2)
   12d38:	e0bfff17 	ldw	r2,-4(fp)
   12d3c:	e0fff917 	ldw	r3,-28(fp)
   12d40:	10c00615 	stw	r3,24(r2)
   12d44:	e0bfff17 	ldw	r2,-4(fp)
   12d48:	e0fffa17 	ldw	r3,-24(fp)
   12d4c:	10c00715 	stw	r3,28(r2)
   12d50:	e0bfff17 	ldw	r2,-4(fp)
   12d54:	e0fffb17 	ldw	r3,-20(fp)
   12d58:	10c00815 	stw	r3,32(r2)
   12d5c:	e0bfff17 	ldw	r2,-4(fp)
   12d60:	e0fffc17 	ldw	r3,-16(fp)
   12d64:	10c00915 	stw	r3,36(r2)

#ifdef VERIFY
    r->magnitude = 1;
   12d68:	e0bfff17 	ldw	r2,-4(fp)
   12d6c:	00c00044 	movi	r3,1
   12d70:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   12d74:	e0bfff17 	ldw	r2,-4(fp)
   12d78:	00c00044 	movi	r3,1
   12d7c:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_verify(r);
   12d80:	e13fff17 	ldw	r4,-4(fp)
   12d84:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
}
   12d88:	0001883a 	nop
   12d8c:	e037883a 	mov	sp,fp
   12d90:	dfc00117 	ldw	ra,4(sp)
   12d94:	df000017 	ldw	fp,0(sp)
   12d98:	dec00204 	addi	sp,sp,8
   12d9c:	f800283a 	ret

00012da0 <secp256k1_fe_normalizes_to_zero>:

static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {
   12da0:	deffef04 	addi	sp,sp,-68
   12da4:	dfc01015 	stw	ra,64(sp)
   12da8:	df000f15 	stw	fp,60(sp)
   12dac:	df000f04 	addi	fp,sp,60
   12db0:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],
   12db4:	e0bfff17 	ldw	r2,-4(fp)
   12db8:	10800017 	ldw	r2,0(r2)
   12dbc:	e0bff215 	stw	r2,-56(fp)
   12dc0:	e0bfff17 	ldw	r2,-4(fp)
   12dc4:	10800117 	ldw	r2,4(r2)
   12dc8:	e0bff315 	stw	r2,-52(fp)
   12dcc:	e0bfff17 	ldw	r2,-4(fp)
   12dd0:	10800217 	ldw	r2,8(r2)
   12dd4:	e0bff415 	stw	r2,-48(fp)
   12dd8:	e0bfff17 	ldw	r2,-4(fp)
   12ddc:	10800317 	ldw	r2,12(r2)
   12de0:	e0bff515 	stw	r2,-44(fp)
   12de4:	e0bfff17 	ldw	r2,-4(fp)
   12de8:	10800417 	ldw	r2,16(r2)
   12dec:	e0bff615 	stw	r2,-40(fp)
             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];
   12df0:	e0bfff17 	ldw	r2,-4(fp)
   12df4:	10800517 	ldw	r2,20(r2)
   12df8:	e0bff715 	stw	r2,-36(fp)
   12dfc:	e0bfff17 	ldw	r2,-4(fp)
   12e00:	10800617 	ldw	r2,24(r2)
   12e04:	e0bff815 	stw	r2,-32(fp)
   12e08:	e0bfff17 	ldw	r2,-4(fp)
   12e0c:	10800717 	ldw	r2,28(r2)
   12e10:	e0bff915 	stw	r2,-28(fp)
   12e14:	e0bfff17 	ldw	r2,-4(fp)
   12e18:	10800817 	ldw	r2,32(r2)
   12e1c:	e0bffa15 	stw	r2,-24(fp)
   12e20:	e0bfff17 	ldw	r2,-4(fp)
   12e24:	10800917 	ldw	r2,36(r2)
   12e28:	e0bffb15 	stw	r2,-20(fp)

    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */
    uint32_t z0, z1;

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;
   12e2c:	e0bffb17 	ldw	r2,-20(fp)
   12e30:	1004d5ba 	srli	r2,r2,22
   12e34:	e0bffc15 	stw	r2,-16(fp)
   12e38:	e0fffb17 	ldw	r3,-20(fp)
   12e3c:	00801034 	movhi	r2,64
   12e40:	10bfffc4 	addi	r2,r2,-1
   12e44:	1884703a 	and	r2,r3,r2
   12e48:	e0bffb15 	stw	r2,-20(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   12e4c:	0140f444 	movi	r5,977
   12e50:	e13ffc17 	ldw	r4,-16(fp)
   12e54:	0042b540 	call	42b54 <__mulsi3>
   12e58:	1007883a 	mov	r3,r2
   12e5c:	e0bff217 	ldw	r2,-56(fp)
   12e60:	10c5883a 	add	r2,r2,r3
   12e64:	e0bff215 	stw	r2,-56(fp)
   12e68:	e0bffc17 	ldw	r2,-16(fp)
   12e6c:	100491ba 	slli	r2,r2,6
   12e70:	e0fff317 	ldw	r3,-52(fp)
   12e74:	1885883a 	add	r2,r3,r2
   12e78:	e0bff315 	stw	r2,-52(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL; z0  = t0; z1  = t0 ^ 0x3D0UL;
   12e7c:	e0bff217 	ldw	r2,-56(fp)
   12e80:	1004d6ba 	srli	r2,r2,26
   12e84:	e0fff317 	ldw	r3,-52(fp)
   12e88:	1885883a 	add	r2,r3,r2
   12e8c:	e0bff315 	stw	r2,-52(fp)
   12e90:	e0fff217 	ldw	r3,-56(fp)
   12e94:	00810034 	movhi	r2,1024
   12e98:	10bfffc4 	addi	r2,r2,-1
   12e9c:	1884703a 	and	r2,r3,r2
   12ea0:	e0bff215 	stw	r2,-56(fp)
   12ea4:	e0bff217 	ldw	r2,-56(fp)
   12ea8:	e0bffd15 	stw	r2,-12(fp)
   12eac:	e0bff217 	ldw	r2,-56(fp)
   12eb0:	1080f41c 	xori	r2,r2,976
   12eb4:	e0bffe15 	stw	r2,-8(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;
   12eb8:	e0bff317 	ldw	r2,-52(fp)
   12ebc:	1004d6ba 	srli	r2,r2,26
   12ec0:	e0fff417 	ldw	r3,-48(fp)
   12ec4:	1885883a 	add	r2,r3,r2
   12ec8:	e0bff415 	stw	r2,-48(fp)
   12ecc:	e0fff317 	ldw	r3,-52(fp)
   12ed0:	00810034 	movhi	r2,1024
   12ed4:	10bfffc4 	addi	r2,r2,-1
   12ed8:	1884703a 	and	r2,r3,r2
   12edc:	e0bff315 	stw	r2,-52(fp)
   12ee0:	e0fffd17 	ldw	r3,-12(fp)
   12ee4:	e0bff317 	ldw	r2,-52(fp)
   12ee8:	1884b03a 	or	r2,r3,r2
   12eec:	e0bffd15 	stw	r2,-12(fp)
   12ef0:	e0bff317 	ldw	r2,-52(fp)
   12ef4:	1080101c 	xori	r2,r2,64
   12ef8:	e0fffe17 	ldw	r3,-8(fp)
   12efc:	1884703a 	and	r2,r3,r2
   12f00:	e0bffe15 	stw	r2,-8(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;
   12f04:	e0bff417 	ldw	r2,-48(fp)
   12f08:	1004d6ba 	srli	r2,r2,26
   12f0c:	e0fff517 	ldw	r3,-44(fp)
   12f10:	1885883a 	add	r2,r3,r2
   12f14:	e0bff515 	stw	r2,-44(fp)
   12f18:	e0fff417 	ldw	r3,-48(fp)
   12f1c:	00810034 	movhi	r2,1024
   12f20:	10bfffc4 	addi	r2,r2,-1
   12f24:	1884703a 	and	r2,r3,r2
   12f28:	e0bff415 	stw	r2,-48(fp)
   12f2c:	e0fffd17 	ldw	r3,-12(fp)
   12f30:	e0bff417 	ldw	r2,-48(fp)
   12f34:	1884b03a 	or	r2,r3,r2
   12f38:	e0bffd15 	stw	r2,-12(fp)
   12f3c:	e0fffe17 	ldw	r3,-8(fp)
   12f40:	e0bff417 	ldw	r2,-48(fp)
   12f44:	1884703a 	and	r2,r3,r2
   12f48:	e0bffe15 	stw	r2,-8(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;
   12f4c:	e0bff517 	ldw	r2,-44(fp)
   12f50:	1004d6ba 	srli	r2,r2,26
   12f54:	e0fff617 	ldw	r3,-40(fp)
   12f58:	1885883a 	add	r2,r3,r2
   12f5c:	e0bff615 	stw	r2,-40(fp)
   12f60:	e0fff517 	ldw	r3,-44(fp)
   12f64:	00810034 	movhi	r2,1024
   12f68:	10bfffc4 	addi	r2,r2,-1
   12f6c:	1884703a 	and	r2,r3,r2
   12f70:	e0bff515 	stw	r2,-44(fp)
   12f74:	e0fffd17 	ldw	r3,-12(fp)
   12f78:	e0bff517 	ldw	r2,-44(fp)
   12f7c:	1884b03a 	or	r2,r3,r2
   12f80:	e0bffd15 	stw	r2,-12(fp)
   12f84:	e0fffe17 	ldw	r3,-8(fp)
   12f88:	e0bff517 	ldw	r2,-44(fp)
   12f8c:	1884703a 	and	r2,r3,r2
   12f90:	e0bffe15 	stw	r2,-8(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;
   12f94:	e0bff617 	ldw	r2,-40(fp)
   12f98:	1004d6ba 	srli	r2,r2,26
   12f9c:	e0fff717 	ldw	r3,-36(fp)
   12fa0:	1885883a 	add	r2,r3,r2
   12fa4:	e0bff715 	stw	r2,-36(fp)
   12fa8:	e0fff617 	ldw	r3,-40(fp)
   12fac:	00810034 	movhi	r2,1024
   12fb0:	10bfffc4 	addi	r2,r2,-1
   12fb4:	1884703a 	and	r2,r3,r2
   12fb8:	e0bff615 	stw	r2,-40(fp)
   12fbc:	e0fffd17 	ldw	r3,-12(fp)
   12fc0:	e0bff617 	ldw	r2,-40(fp)
   12fc4:	1884b03a 	or	r2,r3,r2
   12fc8:	e0bffd15 	stw	r2,-12(fp)
   12fcc:	e0fffe17 	ldw	r3,-8(fp)
   12fd0:	e0bff617 	ldw	r2,-40(fp)
   12fd4:	1884703a 	and	r2,r3,r2
   12fd8:	e0bffe15 	stw	r2,-8(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;
   12fdc:	e0bff717 	ldw	r2,-36(fp)
   12fe0:	1004d6ba 	srli	r2,r2,26
   12fe4:	e0fff817 	ldw	r3,-32(fp)
   12fe8:	1885883a 	add	r2,r3,r2
   12fec:	e0bff815 	stw	r2,-32(fp)
   12ff0:	e0fff717 	ldw	r3,-36(fp)
   12ff4:	00810034 	movhi	r2,1024
   12ff8:	10bfffc4 	addi	r2,r2,-1
   12ffc:	1884703a 	and	r2,r3,r2
   13000:	e0bff715 	stw	r2,-36(fp)
   13004:	e0fffd17 	ldw	r3,-12(fp)
   13008:	e0bff717 	ldw	r2,-36(fp)
   1300c:	1884b03a 	or	r2,r3,r2
   13010:	e0bffd15 	stw	r2,-12(fp)
   13014:	e0fffe17 	ldw	r3,-8(fp)
   13018:	e0bff717 	ldw	r2,-36(fp)
   1301c:	1884703a 	and	r2,r3,r2
   13020:	e0bffe15 	stw	r2,-8(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;
   13024:	e0bff817 	ldw	r2,-32(fp)
   13028:	1004d6ba 	srli	r2,r2,26
   1302c:	e0fff917 	ldw	r3,-28(fp)
   13030:	1885883a 	add	r2,r3,r2
   13034:	e0bff915 	stw	r2,-28(fp)
   13038:	e0fff817 	ldw	r3,-32(fp)
   1303c:	00810034 	movhi	r2,1024
   13040:	10bfffc4 	addi	r2,r2,-1
   13044:	1884703a 	and	r2,r3,r2
   13048:	e0bff815 	stw	r2,-32(fp)
   1304c:	e0fffd17 	ldw	r3,-12(fp)
   13050:	e0bff817 	ldw	r2,-32(fp)
   13054:	1884b03a 	or	r2,r3,r2
   13058:	e0bffd15 	stw	r2,-12(fp)
   1305c:	e0fffe17 	ldw	r3,-8(fp)
   13060:	e0bff817 	ldw	r2,-32(fp)
   13064:	1884703a 	and	r2,r3,r2
   13068:	e0bffe15 	stw	r2,-8(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;
   1306c:	e0bff917 	ldw	r2,-28(fp)
   13070:	1004d6ba 	srli	r2,r2,26
   13074:	e0fffa17 	ldw	r3,-24(fp)
   13078:	1885883a 	add	r2,r3,r2
   1307c:	e0bffa15 	stw	r2,-24(fp)
   13080:	e0fff917 	ldw	r3,-28(fp)
   13084:	00810034 	movhi	r2,1024
   13088:	10bfffc4 	addi	r2,r2,-1
   1308c:	1884703a 	and	r2,r3,r2
   13090:	e0bff915 	stw	r2,-28(fp)
   13094:	e0fffd17 	ldw	r3,-12(fp)
   13098:	e0bff917 	ldw	r2,-28(fp)
   1309c:	1884b03a 	or	r2,r3,r2
   130a0:	e0bffd15 	stw	r2,-12(fp)
   130a4:	e0fffe17 	ldw	r3,-8(fp)
   130a8:	e0bff917 	ldw	r2,-28(fp)
   130ac:	1884703a 	and	r2,r3,r2
   130b0:	e0bffe15 	stw	r2,-8(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;
   130b4:	e0bffa17 	ldw	r2,-24(fp)
   130b8:	1004d6ba 	srli	r2,r2,26
   130bc:	e0fffb17 	ldw	r3,-20(fp)
   130c0:	1885883a 	add	r2,r3,r2
   130c4:	e0bffb15 	stw	r2,-20(fp)
   130c8:	e0fffa17 	ldw	r3,-24(fp)
   130cc:	00810034 	movhi	r2,1024
   130d0:	10bfffc4 	addi	r2,r2,-1
   130d4:	1884703a 	and	r2,r3,r2
   130d8:	e0bffa15 	stw	r2,-24(fp)
   130dc:	e0fffd17 	ldw	r3,-12(fp)
   130e0:	e0bffa17 	ldw	r2,-24(fp)
   130e4:	1884b03a 	or	r2,r3,r2
   130e8:	e0bffd15 	stw	r2,-12(fp)
   130ec:	e0fffe17 	ldw	r3,-8(fp)
   130f0:	e0bffa17 	ldw	r2,-24(fp)
   130f4:	1884703a 	and	r2,r3,r2
   130f8:	e0bffe15 	stw	r2,-8(fp)
                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;
   130fc:	e0fffd17 	ldw	r3,-12(fp)
   13100:	e0bffb17 	ldw	r2,-20(fp)
   13104:	1884b03a 	or	r2,r3,r2
   13108:	e0bffd15 	stw	r2,-12(fp)
   1310c:	e0bffb17 	ldw	r2,-20(fp)
   13110:	1080f03c 	xorhi	r2,r2,960
   13114:	e0fffe17 	ldw	r3,-8(fp)
   13118:	1884703a 	and	r2,r3,r2
   1311c:	e0bffe15 	stw	r2,-8(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   13120:	e0bffb17 	ldw	r2,-20(fp)
   13124:	1004d5fa 	srli	r2,r2,23
   13128:	1004c03a 	cmpne	r2,r2,zero
   1312c:	10803fcc 	andi	r2,r2,255
   13130:	10000d26 	beq	r2,zero,13168 <secp256k1_fe_normalizes_to_zero+0x3c8>
   13134:	d0a01617 	ldw	r2,-32680(gp)
   13138:	10c00317 	ldw	r3,12(r2)
   1313c:	008001b4 	movhi	r2,6
   13140:	10ab4304 	addi	r2,r2,-21236
   13144:	d8800015 	stw	r2,0(sp)
   13148:	01c03544 	movi	r7,213
   1314c:	018001b4 	movhi	r6,6
   13150:	31ab2d04 	addi	r6,r6,-21324
   13154:	014001b4 	movhi	r5,6
   13158:	296b3804 	addi	r5,r5,-21280
   1315c:	1809883a 	mov	r4,r3
   13160:	00452600 	call	45260 <fprintf>
   13164:	00450340 	call	45034 <abort>

    return (z0 == 0) | (z1 == 0x3FFFFFFUL);
   13168:	e0bffd17 	ldw	r2,-12(fp)
   1316c:	1005003a 	cmpeq	r2,r2,zero
   13170:	1009883a 	mov	r4,r2
   13174:	e0fffe17 	ldw	r3,-8(fp)
   13178:	00810034 	movhi	r2,1024
   1317c:	10bfffc4 	addi	r2,r2,-1
   13180:	1885003a 	cmpeq	r2,r3,r2
   13184:	2084b03a 	or	r2,r4,r2
   13188:	10803fcc 	andi	r2,r2,255
}
   1318c:	e037883a 	mov	sp,fp
   13190:	dfc00117 	ldw	ra,4(sp)
   13194:	df000017 	ldw	fp,0(sp)
   13198:	dec00204 	addi	sp,sp,8
   1319c:	f800283a 	ret

000131a0 <secp256k1_fe_normalizes_to_zero_var>:

static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {
   131a0:	deffef04 	addi	sp,sp,-68
   131a4:	dfc01015 	stw	ra,64(sp)
   131a8:	df000f15 	stw	fp,60(sp)
   131ac:	df000f04 	addi	fp,sp,60
   131b0:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
    uint32_t z0, z1;
    uint32_t x;

    t0 = r->n[0];
   131b4:	e0bfff17 	ldw	r2,-4(fp)
   131b8:	10800017 	ldw	r2,0(r2)
   131bc:	e0bff215 	stw	r2,-56(fp)
    t9 = r->n[9];
   131c0:	e0bfff17 	ldw	r2,-4(fp)
   131c4:	10800917 	ldw	r2,36(r2)
   131c8:	e0bff315 	stw	r2,-52(fp)

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    x = t9 >> 22;
   131cc:	e0bff317 	ldw	r2,-52(fp)
   131d0:	1004d5ba 	srli	r2,r2,22
   131d4:	e0bff415 	stw	r2,-48(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL;
   131d8:	0140f444 	movi	r5,977
   131dc:	e13ff417 	ldw	r4,-48(fp)
   131e0:	0042b540 	call	42b54 <__mulsi3>
   131e4:	1007883a 	mov	r3,r2
   131e8:	e0bff217 	ldw	r2,-56(fp)
   131ec:	10c5883a 	add	r2,r2,r3
   131f0:	e0bff215 	stw	r2,-56(fp)

    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */
    z0 = t0 & 0x3FFFFFFUL;
   131f4:	e0fff217 	ldw	r3,-56(fp)
   131f8:	00810034 	movhi	r2,1024
   131fc:	10bfffc4 	addi	r2,r2,-1
   13200:	1884703a 	and	r2,r3,r2
   13204:	e0bff515 	stw	r2,-44(fp)
    z1 = z0 ^ 0x3D0UL;
   13208:	e0bff517 	ldw	r2,-44(fp)
   1320c:	1080f41c 	xori	r2,r2,976
   13210:	e0bff615 	stw	r2,-40(fp)

    /* Fast return path should catch the majority of cases */
    if ((z0 != 0UL) & (z1 != 0x3FFFFFFUL)) {
   13214:	e0bff517 	ldw	r2,-44(fp)
   13218:	1004c03a 	cmpne	r2,r2,zero
   1321c:	1009883a 	mov	r4,r2
   13220:	e0fff617 	ldw	r3,-40(fp)
   13224:	00810034 	movhi	r2,1024
   13228:	10bfffc4 	addi	r2,r2,-1
   1322c:	1884c03a 	cmpne	r2,r3,r2
   13230:	2084703a 	and	r2,r4,r2
   13234:	10803fcc 	andi	r2,r2,255
   13238:	10000226 	beq	r2,zero,13244 <secp256k1_fe_normalizes_to_zero_var+0xa4>
        return 0;
   1323c:	0005883a 	mov	r2,zero
   13240:	0000dc06 	br	135b4 <secp256k1_fe_normalizes_to_zero_var+0x414>
    }

    t1 = r->n[1];
   13244:	e0bfff17 	ldw	r2,-4(fp)
   13248:	10800117 	ldw	r2,4(r2)
   1324c:	e0bff715 	stw	r2,-36(fp)
    t2 = r->n[2];
   13250:	e0bfff17 	ldw	r2,-4(fp)
   13254:	10800217 	ldw	r2,8(r2)
   13258:	e0bff815 	stw	r2,-32(fp)
    t3 = r->n[3];
   1325c:	e0bfff17 	ldw	r2,-4(fp)
   13260:	10800317 	ldw	r2,12(r2)
   13264:	e0bff915 	stw	r2,-28(fp)
    t4 = r->n[4];
   13268:	e0bfff17 	ldw	r2,-4(fp)
   1326c:	10800417 	ldw	r2,16(r2)
   13270:	e0bffa15 	stw	r2,-24(fp)
    t5 = r->n[5];
   13274:	e0bfff17 	ldw	r2,-4(fp)
   13278:	10800517 	ldw	r2,20(r2)
   1327c:	e0bffb15 	stw	r2,-20(fp)
    t6 = r->n[6];
   13280:	e0bfff17 	ldw	r2,-4(fp)
   13284:	10800617 	ldw	r2,24(r2)
   13288:	e0bffc15 	stw	r2,-16(fp)
    t7 = r->n[7];
   1328c:	e0bfff17 	ldw	r2,-4(fp)
   13290:	10800717 	ldw	r2,28(r2)
   13294:	e0bffd15 	stw	r2,-12(fp)
    t8 = r->n[8];
   13298:	e0bfff17 	ldw	r2,-4(fp)
   1329c:	10800817 	ldw	r2,32(r2)
   132a0:	e0bffe15 	stw	r2,-8(fp)

    t9 &= 0x03FFFFFUL;
   132a4:	e0fff317 	ldw	r3,-52(fp)
   132a8:	00801034 	movhi	r2,64
   132ac:	10bfffc4 	addi	r2,r2,-1
   132b0:	1884703a 	and	r2,r3,r2
   132b4:	e0bff315 	stw	r2,-52(fp)
    t1 += (x << 6);
   132b8:	e0bff417 	ldw	r2,-48(fp)
   132bc:	100491ba 	slli	r2,r2,6
   132c0:	e0fff717 	ldw	r3,-36(fp)
   132c4:	1885883a 	add	r2,r3,r2
   132c8:	e0bff715 	stw	r2,-36(fp)

    t1 += (t0 >> 26);
   132cc:	e0bff217 	ldw	r2,-56(fp)
   132d0:	1004d6ba 	srli	r2,r2,26
   132d4:	e0fff717 	ldw	r3,-36(fp)
   132d8:	1885883a 	add	r2,r3,r2
   132dc:	e0bff715 	stw	r2,-36(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;
   132e0:	e0bff717 	ldw	r2,-36(fp)
   132e4:	1004d6ba 	srli	r2,r2,26
   132e8:	e0fff817 	ldw	r3,-32(fp)
   132ec:	1885883a 	add	r2,r3,r2
   132f0:	e0bff815 	stw	r2,-32(fp)
   132f4:	e0fff717 	ldw	r3,-36(fp)
   132f8:	00810034 	movhi	r2,1024
   132fc:	10bfffc4 	addi	r2,r2,-1
   13300:	1884703a 	and	r2,r3,r2
   13304:	e0bff715 	stw	r2,-36(fp)
   13308:	e0fff517 	ldw	r3,-44(fp)
   1330c:	e0bff717 	ldw	r2,-36(fp)
   13310:	1884b03a 	or	r2,r3,r2
   13314:	e0bff515 	stw	r2,-44(fp)
   13318:	e0bff717 	ldw	r2,-36(fp)
   1331c:	1080101c 	xori	r2,r2,64
   13320:	e0fff617 	ldw	r3,-40(fp)
   13324:	1884703a 	and	r2,r3,r2
   13328:	e0bff615 	stw	r2,-40(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;
   1332c:	e0bff817 	ldw	r2,-32(fp)
   13330:	1004d6ba 	srli	r2,r2,26
   13334:	e0fff917 	ldw	r3,-28(fp)
   13338:	1885883a 	add	r2,r3,r2
   1333c:	e0bff915 	stw	r2,-28(fp)
   13340:	e0fff817 	ldw	r3,-32(fp)
   13344:	00810034 	movhi	r2,1024
   13348:	10bfffc4 	addi	r2,r2,-1
   1334c:	1884703a 	and	r2,r3,r2
   13350:	e0bff815 	stw	r2,-32(fp)
   13354:	e0fff517 	ldw	r3,-44(fp)
   13358:	e0bff817 	ldw	r2,-32(fp)
   1335c:	1884b03a 	or	r2,r3,r2
   13360:	e0bff515 	stw	r2,-44(fp)
   13364:	e0fff617 	ldw	r3,-40(fp)
   13368:	e0bff817 	ldw	r2,-32(fp)
   1336c:	1884703a 	and	r2,r3,r2
   13370:	e0bff615 	stw	r2,-40(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;
   13374:	e0bff917 	ldw	r2,-28(fp)
   13378:	1004d6ba 	srli	r2,r2,26
   1337c:	e0fffa17 	ldw	r3,-24(fp)
   13380:	1885883a 	add	r2,r3,r2
   13384:	e0bffa15 	stw	r2,-24(fp)
   13388:	e0fff917 	ldw	r3,-28(fp)
   1338c:	00810034 	movhi	r2,1024
   13390:	10bfffc4 	addi	r2,r2,-1
   13394:	1884703a 	and	r2,r3,r2
   13398:	e0bff915 	stw	r2,-28(fp)
   1339c:	e0fff517 	ldw	r3,-44(fp)
   133a0:	e0bff917 	ldw	r2,-28(fp)
   133a4:	1884b03a 	or	r2,r3,r2
   133a8:	e0bff515 	stw	r2,-44(fp)
   133ac:	e0fff617 	ldw	r3,-40(fp)
   133b0:	e0bff917 	ldw	r2,-28(fp)
   133b4:	1884703a 	and	r2,r3,r2
   133b8:	e0bff615 	stw	r2,-40(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;
   133bc:	e0bffa17 	ldw	r2,-24(fp)
   133c0:	1004d6ba 	srli	r2,r2,26
   133c4:	e0fffb17 	ldw	r3,-20(fp)
   133c8:	1885883a 	add	r2,r3,r2
   133cc:	e0bffb15 	stw	r2,-20(fp)
   133d0:	e0fffa17 	ldw	r3,-24(fp)
   133d4:	00810034 	movhi	r2,1024
   133d8:	10bfffc4 	addi	r2,r2,-1
   133dc:	1884703a 	and	r2,r3,r2
   133e0:	e0bffa15 	stw	r2,-24(fp)
   133e4:	e0fff517 	ldw	r3,-44(fp)
   133e8:	e0bffa17 	ldw	r2,-24(fp)
   133ec:	1884b03a 	or	r2,r3,r2
   133f0:	e0bff515 	stw	r2,-44(fp)
   133f4:	e0fff617 	ldw	r3,-40(fp)
   133f8:	e0bffa17 	ldw	r2,-24(fp)
   133fc:	1884703a 	and	r2,r3,r2
   13400:	e0bff615 	stw	r2,-40(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;
   13404:	e0bffb17 	ldw	r2,-20(fp)
   13408:	1004d6ba 	srli	r2,r2,26
   1340c:	e0fffc17 	ldw	r3,-16(fp)
   13410:	1885883a 	add	r2,r3,r2
   13414:	e0bffc15 	stw	r2,-16(fp)
   13418:	e0fffb17 	ldw	r3,-20(fp)
   1341c:	00810034 	movhi	r2,1024
   13420:	10bfffc4 	addi	r2,r2,-1
   13424:	1884703a 	and	r2,r3,r2
   13428:	e0bffb15 	stw	r2,-20(fp)
   1342c:	e0fff517 	ldw	r3,-44(fp)
   13430:	e0bffb17 	ldw	r2,-20(fp)
   13434:	1884b03a 	or	r2,r3,r2
   13438:	e0bff515 	stw	r2,-44(fp)
   1343c:	e0fff617 	ldw	r3,-40(fp)
   13440:	e0bffb17 	ldw	r2,-20(fp)
   13444:	1884703a 	and	r2,r3,r2
   13448:	e0bff615 	stw	r2,-40(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;
   1344c:	e0bffc17 	ldw	r2,-16(fp)
   13450:	1004d6ba 	srli	r2,r2,26
   13454:	e0fffd17 	ldw	r3,-12(fp)
   13458:	1885883a 	add	r2,r3,r2
   1345c:	e0bffd15 	stw	r2,-12(fp)
   13460:	e0fffc17 	ldw	r3,-16(fp)
   13464:	00810034 	movhi	r2,1024
   13468:	10bfffc4 	addi	r2,r2,-1
   1346c:	1884703a 	and	r2,r3,r2
   13470:	e0bffc15 	stw	r2,-16(fp)
   13474:	e0fff517 	ldw	r3,-44(fp)
   13478:	e0bffc17 	ldw	r2,-16(fp)
   1347c:	1884b03a 	or	r2,r3,r2
   13480:	e0bff515 	stw	r2,-44(fp)
   13484:	e0fff617 	ldw	r3,-40(fp)
   13488:	e0bffc17 	ldw	r2,-16(fp)
   1348c:	1884703a 	and	r2,r3,r2
   13490:	e0bff615 	stw	r2,-40(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;
   13494:	e0bffd17 	ldw	r2,-12(fp)
   13498:	1004d6ba 	srli	r2,r2,26
   1349c:	e0fffe17 	ldw	r3,-8(fp)
   134a0:	1885883a 	add	r2,r3,r2
   134a4:	e0bffe15 	stw	r2,-8(fp)
   134a8:	e0fffd17 	ldw	r3,-12(fp)
   134ac:	00810034 	movhi	r2,1024
   134b0:	10bfffc4 	addi	r2,r2,-1
   134b4:	1884703a 	and	r2,r3,r2
   134b8:	e0bffd15 	stw	r2,-12(fp)
   134bc:	e0fff517 	ldw	r3,-44(fp)
   134c0:	e0bffd17 	ldw	r2,-12(fp)
   134c4:	1884b03a 	or	r2,r3,r2
   134c8:	e0bff515 	stw	r2,-44(fp)
   134cc:	e0fff617 	ldw	r3,-40(fp)
   134d0:	e0bffd17 	ldw	r2,-12(fp)
   134d4:	1884703a 	and	r2,r3,r2
   134d8:	e0bff615 	stw	r2,-40(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;
   134dc:	e0bffe17 	ldw	r2,-8(fp)
   134e0:	1004d6ba 	srli	r2,r2,26
   134e4:	e0fff317 	ldw	r3,-52(fp)
   134e8:	1885883a 	add	r2,r3,r2
   134ec:	e0bff315 	stw	r2,-52(fp)
   134f0:	e0fffe17 	ldw	r3,-8(fp)
   134f4:	00810034 	movhi	r2,1024
   134f8:	10bfffc4 	addi	r2,r2,-1
   134fc:	1884703a 	and	r2,r3,r2
   13500:	e0bffe15 	stw	r2,-8(fp)
   13504:	e0fff517 	ldw	r3,-44(fp)
   13508:	e0bffe17 	ldw	r2,-8(fp)
   1350c:	1884b03a 	or	r2,r3,r2
   13510:	e0bff515 	stw	r2,-44(fp)
   13514:	e0fff617 	ldw	r3,-40(fp)
   13518:	e0bffe17 	ldw	r2,-8(fp)
   1351c:	1884703a 	and	r2,r3,r2
   13520:	e0bff615 	stw	r2,-40(fp)
                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;
   13524:	e0fff517 	ldw	r3,-44(fp)
   13528:	e0bff317 	ldw	r2,-52(fp)
   1352c:	1884b03a 	or	r2,r3,r2
   13530:	e0bff515 	stw	r2,-44(fp)
   13534:	e0bff317 	ldw	r2,-52(fp)
   13538:	1080f03c 	xorhi	r2,r2,960
   1353c:	e0fff617 	ldw	r3,-40(fp)
   13540:	1884703a 	and	r2,r3,r2
   13544:	e0bff615 	stw	r2,-40(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   13548:	e0bff317 	ldw	r2,-52(fp)
   1354c:	1004d5fa 	srli	r2,r2,23
   13550:	1004c03a 	cmpne	r2,r2,zero
   13554:	10803fcc 	andi	r2,r2,255
   13558:	10000d26 	beq	r2,zero,13590 <secp256k1_fe_normalizes_to_zero_var+0x3f0>
   1355c:	d0a01617 	ldw	r2,-32680(gp)
   13560:	10c00317 	ldw	r3,12(r2)
   13564:	008001b4 	movhi	r2,6
   13568:	10ab4304 	addi	r2,r2,-21236
   1356c:	d8800015 	stw	r2,0(sp)
   13570:	01c04244 	movi	r7,265
   13574:	018001b4 	movhi	r6,6
   13578:	31ab2d04 	addi	r6,r6,-21324
   1357c:	014001b4 	movhi	r5,6
   13580:	296b3804 	addi	r5,r5,-21280
   13584:	1809883a 	mov	r4,r3
   13588:	00452600 	call	45260 <fprintf>
   1358c:	00450340 	call	45034 <abort>

    return (z0 == 0) | (z1 == 0x3FFFFFFUL);
   13590:	e0bff517 	ldw	r2,-44(fp)
   13594:	1005003a 	cmpeq	r2,r2,zero
   13598:	1009883a 	mov	r4,r2
   1359c:	e0fff617 	ldw	r3,-40(fp)
   135a0:	00810034 	movhi	r2,1024
   135a4:	10bfffc4 	addi	r2,r2,-1
   135a8:	1885003a 	cmpeq	r2,r3,r2
   135ac:	2084b03a 	or	r2,r4,r2
   135b0:	10803fcc 	andi	r2,r2,255
}
   135b4:	e037883a 	mov	sp,fp
   135b8:	dfc00117 	ldw	ra,4(sp)
   135bc:	df000017 	ldw	fp,0(sp)
   135c0:	dec00204 	addi	sp,sp,8
   135c4:	f800283a 	ret

000135c8 <secp256k1_fe_set_int>:

SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {
   135c8:	defffc04 	addi	sp,sp,-16
   135cc:	dfc00315 	stw	ra,12(sp)
   135d0:	df000215 	stw	fp,8(sp)
   135d4:	df000204 	addi	fp,sp,8
   135d8:	e13ffe15 	stw	r4,-8(fp)
   135dc:	e17fff15 	stw	r5,-4(fp)
    r->n[0] = a;
   135e0:	e0ffff17 	ldw	r3,-4(fp)
   135e4:	e0bffe17 	ldw	r2,-8(fp)
   135e8:	10c00015 	stw	r3,0(r2)
    r->n[1] = r->n[2] = r->n[3] = r->n[4] = r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;
   135ec:	e0bffe17 	ldw	r2,-8(fp)
   135f0:	10000915 	stw	zero,36(r2)
   135f4:	e0bffe17 	ldw	r2,-8(fp)
   135f8:	10c00917 	ldw	r3,36(r2)
   135fc:	e0bffe17 	ldw	r2,-8(fp)
   13600:	10c00815 	stw	r3,32(r2)
   13604:	e0bffe17 	ldw	r2,-8(fp)
   13608:	10c00817 	ldw	r3,32(r2)
   1360c:	e0bffe17 	ldw	r2,-8(fp)
   13610:	10c00715 	stw	r3,28(r2)
   13614:	e0bffe17 	ldw	r2,-8(fp)
   13618:	10c00717 	ldw	r3,28(r2)
   1361c:	e0bffe17 	ldw	r2,-8(fp)
   13620:	10c00615 	stw	r3,24(r2)
   13624:	e0bffe17 	ldw	r2,-8(fp)
   13628:	10c00617 	ldw	r3,24(r2)
   1362c:	e0bffe17 	ldw	r2,-8(fp)
   13630:	10c00515 	stw	r3,20(r2)
   13634:	e0bffe17 	ldw	r2,-8(fp)
   13638:	10c00517 	ldw	r3,20(r2)
   1363c:	e0bffe17 	ldw	r2,-8(fp)
   13640:	10c00415 	stw	r3,16(r2)
   13644:	e0bffe17 	ldw	r2,-8(fp)
   13648:	10c00417 	ldw	r3,16(r2)
   1364c:	e0bffe17 	ldw	r2,-8(fp)
   13650:	10c00315 	stw	r3,12(r2)
   13654:	e0bffe17 	ldw	r2,-8(fp)
   13658:	10c00317 	ldw	r3,12(r2)
   1365c:	e0bffe17 	ldw	r2,-8(fp)
   13660:	10c00215 	stw	r3,8(r2)
   13664:	e0bffe17 	ldw	r2,-8(fp)
   13668:	10c00217 	ldw	r3,8(r2)
   1366c:	e0bffe17 	ldw	r2,-8(fp)
   13670:	10c00115 	stw	r3,4(r2)
#ifdef VERIFY
    r->magnitude = 1;
   13674:	e0bffe17 	ldw	r2,-8(fp)
   13678:	00c00044 	movi	r3,1
   1367c:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   13680:	e0bffe17 	ldw	r2,-8(fp)
   13684:	00c00044 	movi	r3,1
   13688:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_verify(r);
   1368c:	e13ffe17 	ldw	r4,-8(fp)
   13690:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
}
   13694:	0001883a 	nop
   13698:	e037883a 	mov	sp,fp
   1369c:	dfc00117 	ldw	ra,4(sp)
   136a0:	df000017 	ldw	fp,0(sp)
   136a4:	dec00204 	addi	sp,sp,8
   136a8:	f800283a 	ret

000136ac <secp256k1_fe_is_zero>:

SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {
   136ac:	defffb04 	addi	sp,sp,-20
   136b0:	dfc00415 	stw	ra,16(sp)
   136b4:	df000315 	stw	fp,12(sp)
   136b8:	df000304 	addi	fp,sp,12
   136bc:	e13fff15 	stw	r4,-4(fp)
    const uint32_t *t = a->n;
   136c0:	e0bfff17 	ldw	r2,-4(fp)
   136c4:	e0bffe15 	stw	r2,-8(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   136c8:	e0bfff17 	ldw	r2,-4(fp)
   136cc:	10800b17 	ldw	r2,44(r2)
   136d0:	1005003a 	cmpeq	r2,r2,zero
   136d4:	10803fcc 	andi	r2,r2,255
   136d8:	10000d26 	beq	r2,zero,13710 <secp256k1_fe_is_zero+0x64>
   136dc:	d0a01617 	ldw	r2,-32680(gp)
   136e0:	10c00317 	ldw	r3,12(r2)
   136e4:	008001b4 	movhi	r2,6
   136e8:	10ab5704 	addi	r2,r2,-21156
   136ec:	d8800015 	stw	r2,0(sp)
   136f0:	01c046c4 	movi	r7,283
   136f4:	018001b4 	movhi	r6,6
   136f8:	31ab2d04 	addi	r6,r6,-21324
   136fc:	014001b4 	movhi	r5,6
   13700:	296b3804 	addi	r5,r5,-21280
   13704:	1809883a 	mov	r4,r3
   13708:	00452600 	call	45260 <fprintf>
   1370c:	00450340 	call	45034 <abort>
    secp256k1_fe_verify(a);
   13710:	e13fff17 	ldw	r4,-4(fp)
   13714:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
    return (t[0] | t[1] | t[2] | t[3] | t[4] | t[5] | t[6] | t[7] | t[8] | t[9]) == 0;
   13718:	e0bffe17 	ldw	r2,-8(fp)
   1371c:	10c00017 	ldw	r3,0(r2)
   13720:	e0bffe17 	ldw	r2,-8(fp)
   13724:	10800104 	addi	r2,r2,4
   13728:	10800017 	ldw	r2,0(r2)
   1372c:	1886b03a 	or	r3,r3,r2
   13730:	e0bffe17 	ldw	r2,-8(fp)
   13734:	10800204 	addi	r2,r2,8
   13738:	10800017 	ldw	r2,0(r2)
   1373c:	1886b03a 	or	r3,r3,r2
   13740:	e0bffe17 	ldw	r2,-8(fp)
   13744:	10800304 	addi	r2,r2,12
   13748:	10800017 	ldw	r2,0(r2)
   1374c:	1886b03a 	or	r3,r3,r2
   13750:	e0bffe17 	ldw	r2,-8(fp)
   13754:	10800404 	addi	r2,r2,16
   13758:	10800017 	ldw	r2,0(r2)
   1375c:	1886b03a 	or	r3,r3,r2
   13760:	e0bffe17 	ldw	r2,-8(fp)
   13764:	10800504 	addi	r2,r2,20
   13768:	10800017 	ldw	r2,0(r2)
   1376c:	1886b03a 	or	r3,r3,r2
   13770:	e0bffe17 	ldw	r2,-8(fp)
   13774:	10800604 	addi	r2,r2,24
   13778:	10800017 	ldw	r2,0(r2)
   1377c:	1886b03a 	or	r3,r3,r2
   13780:	e0bffe17 	ldw	r2,-8(fp)
   13784:	10800704 	addi	r2,r2,28
   13788:	10800017 	ldw	r2,0(r2)
   1378c:	1886b03a 	or	r3,r3,r2
   13790:	e0bffe17 	ldw	r2,-8(fp)
   13794:	10800804 	addi	r2,r2,32
   13798:	10800017 	ldw	r2,0(r2)
   1379c:	1886b03a 	or	r3,r3,r2
   137a0:	e0bffe17 	ldw	r2,-8(fp)
   137a4:	10800904 	addi	r2,r2,36
   137a8:	10800017 	ldw	r2,0(r2)
   137ac:	1884b03a 	or	r2,r3,r2
   137b0:	1005003a 	cmpeq	r2,r2,zero
   137b4:	10803fcc 	andi	r2,r2,255
}
   137b8:	e037883a 	mov	sp,fp
   137bc:	dfc00117 	ldw	ra,4(sp)
   137c0:	df000017 	ldw	fp,0(sp)
   137c4:	dec00204 	addi	sp,sp,8
   137c8:	f800283a 	ret

000137cc <secp256k1_fe_is_odd>:

SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {
   137cc:	defffc04 	addi	sp,sp,-16
   137d0:	dfc00315 	stw	ra,12(sp)
   137d4:	df000215 	stw	fp,8(sp)
   137d8:	df000204 	addi	fp,sp,8
   137dc:	e13fff15 	stw	r4,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   137e0:	e0bfff17 	ldw	r2,-4(fp)
   137e4:	10800b17 	ldw	r2,44(r2)
   137e8:	1005003a 	cmpeq	r2,r2,zero
   137ec:	10803fcc 	andi	r2,r2,255
   137f0:	10000d26 	beq	r2,zero,13828 <secp256k1_fe_is_odd+0x5c>
   137f4:	d0a01617 	ldw	r2,-32680(gp)
   137f8:	10c00317 	ldw	r3,12(r2)
   137fc:	008001b4 	movhi	r2,6
   13800:	10ab5704 	addi	r2,r2,-21156
   13804:	d8800015 	stw	r2,0(sp)
   13808:	01c048c4 	movi	r7,291
   1380c:	018001b4 	movhi	r6,6
   13810:	31ab2d04 	addi	r6,r6,-21324
   13814:	014001b4 	movhi	r5,6
   13818:	296b3804 	addi	r5,r5,-21280
   1381c:	1809883a 	mov	r4,r3
   13820:	00452600 	call	45260 <fprintf>
   13824:	00450340 	call	45034 <abort>
    secp256k1_fe_verify(a);
   13828:	e13fff17 	ldw	r4,-4(fp)
   1382c:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
    return a->n[0] & 1;
   13830:	e0bfff17 	ldw	r2,-4(fp)
   13834:	10800017 	ldw	r2,0(r2)
   13838:	1080004c 	andi	r2,r2,1
}
   1383c:	e037883a 	mov	sp,fp
   13840:	dfc00117 	ldw	ra,4(sp)
   13844:	df000017 	ldw	fp,0(sp)
   13848:	dec00204 	addi	sp,sp,8
   1384c:	f800283a 	ret

00013850 <secp256k1_fe_clear>:

SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {
   13850:	defffd04 	addi	sp,sp,-12
   13854:	df000215 	stw	fp,8(sp)
   13858:	df000204 	addi	fp,sp,8
   1385c:	e13fff15 	stw	r4,-4(fp)
    int i;
#ifdef VERIFY
    a->magnitude = 0;
   13860:	e0bfff17 	ldw	r2,-4(fp)
   13864:	10000a15 	stw	zero,40(r2)
    a->normalized = 1;
   13868:	e0bfff17 	ldw	r2,-4(fp)
   1386c:	00c00044 	movi	r3,1
   13870:	10c00b15 	stw	r3,44(r2)
#endif
    for (i=0; i<10; i++) {
   13874:	e03ffe15 	stw	zero,-8(fp)
   13878:	00000906 	br	138a0 <secp256k1_fe_clear+0x50>
        a->n[i] = 0;
   1387c:	e0ffff17 	ldw	r3,-4(fp)
   13880:	e0bffe17 	ldw	r2,-8(fp)
   13884:	1085883a 	add	r2,r2,r2
   13888:	1085883a 	add	r2,r2,r2
   1388c:	1885883a 	add	r2,r3,r2
   13890:	10000015 	stw	zero,0(r2)
    int i;
#ifdef VERIFY
    a->magnitude = 0;
    a->normalized = 1;
#endif
    for (i=0; i<10; i++) {
   13894:	e0bffe17 	ldw	r2,-8(fp)
   13898:	10800044 	addi	r2,r2,1
   1389c:	e0bffe15 	stw	r2,-8(fp)
   138a0:	e0bffe17 	ldw	r2,-8(fp)
   138a4:	10800290 	cmplti	r2,r2,10
   138a8:	103ff41e 	bne	r2,zero,1387c <__alt_mem_epcs_flash_controller+0xfe00287c>
        a->n[i] = 0;
    }
}
   138ac:	0001883a 	nop
   138b0:	e037883a 	mov	sp,fp
   138b4:	df000017 	ldw	fp,0(sp)
   138b8:	dec00104 	addi	sp,sp,4
   138bc:	f800283a 	ret

000138c0 <secp256k1_fe_cmp_var>:

static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {
   138c0:	defffa04 	addi	sp,sp,-24
   138c4:	dfc00515 	stw	ra,20(sp)
   138c8:	df000415 	stw	fp,16(sp)
   138cc:	df000404 	addi	fp,sp,16
   138d0:	e13ffe15 	stw	r4,-8(fp)
   138d4:	e17fff15 	stw	r5,-4(fp)
    int i;
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   138d8:	e0bffe17 	ldw	r2,-8(fp)
   138dc:	10800b17 	ldw	r2,44(r2)
   138e0:	1005003a 	cmpeq	r2,r2,zero
   138e4:	10803fcc 	andi	r2,r2,255
   138e8:	10000d26 	beq	r2,zero,13920 <secp256k1_fe_cmp_var+0x60>
   138ec:	d0a01617 	ldw	r2,-32680(gp)
   138f0:	10c00317 	ldw	r3,12(r2)
   138f4:	008001b4 	movhi	r2,6
   138f8:	10ab5704 	addi	r2,r2,-21156
   138fc:	d8800015 	stw	r2,0(sp)
   13900:	01c04dc4 	movi	r7,311
   13904:	018001b4 	movhi	r6,6
   13908:	31ab2d04 	addi	r6,r6,-21324
   1390c:	014001b4 	movhi	r5,6
   13910:	296b3804 	addi	r5,r5,-21280
   13914:	1809883a 	mov	r4,r3
   13918:	00452600 	call	45260 <fprintf>
   1391c:	00450340 	call	45034 <abort>
    VERIFY_CHECK(b->normalized);
   13920:	e0bfff17 	ldw	r2,-4(fp)
   13924:	10800b17 	ldw	r2,44(r2)
   13928:	1005003a 	cmpeq	r2,r2,zero
   1392c:	10803fcc 	andi	r2,r2,255
   13930:	10000d26 	beq	r2,zero,13968 <secp256k1_fe_cmp_var+0xa8>
   13934:	d0a01617 	ldw	r2,-32680(gp)
   13938:	10c00317 	ldw	r3,12(r2)
   1393c:	008001b4 	movhi	r2,6
   13940:	10ab6104 	addi	r2,r2,-21116
   13944:	d8800015 	stw	r2,0(sp)
   13948:	01c04e04 	movi	r7,312
   1394c:	018001b4 	movhi	r6,6
   13950:	31ab2d04 	addi	r6,r6,-21324
   13954:	014001b4 	movhi	r5,6
   13958:	296b3804 	addi	r5,r5,-21280
   1395c:	1809883a 	mov	r4,r3
   13960:	00452600 	call	45260 <fprintf>
   13964:	00450340 	call	45034 <abort>
    secp256k1_fe_verify(a);
   13968:	e13ffe17 	ldw	r4,-8(fp)
   1396c:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
    secp256k1_fe_verify(b);
   13970:	e13fff17 	ldw	r4,-4(fp)
   13974:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
    for (i = 9; i >= 0; i--) {
   13978:	00800244 	movi	r2,9
   1397c:	e0bffd15 	stw	r2,-12(fp)
   13980:	00002106 	br	13a08 <secp256k1_fe_cmp_var+0x148>
        if (a->n[i] > b->n[i]) {
   13984:	e0fffe17 	ldw	r3,-8(fp)
   13988:	e0bffd17 	ldw	r2,-12(fp)
   1398c:	1085883a 	add	r2,r2,r2
   13990:	1085883a 	add	r2,r2,r2
   13994:	1885883a 	add	r2,r3,r2
   13998:	10c00017 	ldw	r3,0(r2)
   1399c:	e13fff17 	ldw	r4,-4(fp)
   139a0:	e0bffd17 	ldw	r2,-12(fp)
   139a4:	1085883a 	add	r2,r2,r2
   139a8:	1085883a 	add	r2,r2,r2
   139ac:	2085883a 	add	r2,r4,r2
   139b0:	10800017 	ldw	r2,0(r2)
   139b4:	10c0022e 	bgeu	r2,r3,139c0 <secp256k1_fe_cmp_var+0x100>
            return 1;
   139b8:	00800044 	movi	r2,1
   139bc:	00001506 	br	13a14 <secp256k1_fe_cmp_var+0x154>
        }
        if (a->n[i] < b->n[i]) {
   139c0:	e0fffe17 	ldw	r3,-8(fp)
   139c4:	e0bffd17 	ldw	r2,-12(fp)
   139c8:	1085883a 	add	r2,r2,r2
   139cc:	1085883a 	add	r2,r2,r2
   139d0:	1885883a 	add	r2,r3,r2
   139d4:	10c00017 	ldw	r3,0(r2)
   139d8:	e13fff17 	ldw	r4,-4(fp)
   139dc:	e0bffd17 	ldw	r2,-12(fp)
   139e0:	1085883a 	add	r2,r2,r2
   139e4:	1085883a 	add	r2,r2,r2
   139e8:	2085883a 	add	r2,r4,r2
   139ec:	10800017 	ldw	r2,0(r2)
   139f0:	1880022e 	bgeu	r3,r2,139fc <secp256k1_fe_cmp_var+0x13c>
            return -1;
   139f4:	00bfffc4 	movi	r2,-1
   139f8:	00000606 	br	13a14 <secp256k1_fe_cmp_var+0x154>
    VERIFY_CHECK(a->normalized);
    VERIFY_CHECK(b->normalized);
    secp256k1_fe_verify(a);
    secp256k1_fe_verify(b);
#endif
    for (i = 9; i >= 0; i--) {
   139fc:	e0bffd17 	ldw	r2,-12(fp)
   13a00:	10bfffc4 	addi	r2,r2,-1
   13a04:	e0bffd15 	stw	r2,-12(fp)
   13a08:	e0bffd17 	ldw	r2,-12(fp)
   13a0c:	103fdd0e 	bge	r2,zero,13984 <__alt_mem_epcs_flash_controller+0xfe002984>
        }
        if (a->n[i] < b->n[i]) {
            return -1;
        }
    }
    return 0;
   13a10:	0005883a 	mov	r2,zero
}
   13a14:	e037883a 	mov	sp,fp
   13a18:	dfc00117 	ldw	ra,4(sp)
   13a1c:	df000017 	ldw	fp,0(sp)
   13a20:	dec00204 	addi	sp,sp,8
   13a24:	f800283a 	ret

00013a28 <secp256k1_fe_set_b32>:

static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {
   13a28:	defff804 	addi	sp,sp,-32
   13a2c:	dfc00715 	stw	ra,28(sp)
   13a30:	df000615 	stw	fp,24(sp)
   13a34:	df000604 	addi	fp,sp,24
   13a38:	e13ffe15 	stw	r4,-8(fp)
   13a3c:	e17fff15 	stw	r5,-4(fp)
    int i;
    r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;
   13a40:	e0bffe17 	ldw	r2,-8(fp)
   13a44:	10000415 	stw	zero,16(r2)
   13a48:	e0bffe17 	ldw	r2,-8(fp)
   13a4c:	10c00417 	ldw	r3,16(r2)
   13a50:	e0bffe17 	ldw	r2,-8(fp)
   13a54:	10c00315 	stw	r3,12(r2)
   13a58:	e0bffe17 	ldw	r2,-8(fp)
   13a5c:	10c00317 	ldw	r3,12(r2)
   13a60:	e0bffe17 	ldw	r2,-8(fp)
   13a64:	10c00215 	stw	r3,8(r2)
   13a68:	e0bffe17 	ldw	r2,-8(fp)
   13a6c:	10c00217 	ldw	r3,8(r2)
   13a70:	e0bffe17 	ldw	r2,-8(fp)
   13a74:	10c00115 	stw	r3,4(r2)
   13a78:	e0bffe17 	ldw	r2,-8(fp)
   13a7c:	10c00117 	ldw	r3,4(r2)
   13a80:	e0bffe17 	ldw	r2,-8(fp)
   13a84:	10c00015 	stw	r3,0(r2)
    r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;
   13a88:	e0bffe17 	ldw	r2,-8(fp)
   13a8c:	10000915 	stw	zero,36(r2)
   13a90:	e0bffe17 	ldw	r2,-8(fp)
   13a94:	10c00917 	ldw	r3,36(r2)
   13a98:	e0bffe17 	ldw	r2,-8(fp)
   13a9c:	10c00815 	stw	r3,32(r2)
   13aa0:	e0bffe17 	ldw	r2,-8(fp)
   13aa4:	10c00817 	ldw	r3,32(r2)
   13aa8:	e0bffe17 	ldw	r2,-8(fp)
   13aac:	10c00715 	stw	r3,28(r2)
   13ab0:	e0bffe17 	ldw	r2,-8(fp)
   13ab4:	10c00717 	ldw	r3,28(r2)
   13ab8:	e0bffe17 	ldw	r2,-8(fp)
   13abc:	10c00615 	stw	r3,24(r2)
   13ac0:	e0bffe17 	ldw	r2,-8(fp)
   13ac4:	10c00617 	ldw	r3,24(r2)
   13ac8:	e0bffe17 	ldw	r2,-8(fp)
   13acc:	10c00515 	stw	r3,20(r2)
    for (i=0; i<32; i++) {
   13ad0:	e03ffa15 	stw	zero,-24(fp)
   13ad4:	00003c06 	br	13bc8 <secp256k1_fe_set_b32+0x1a0>
        int j;
        for (j=0; j<4; j++) {
   13ad8:	e03ffb15 	stw	zero,-20(fp)
   13adc:	00003406 	br	13bb0 <secp256k1_fe_set_b32+0x188>
            int limb = (8*i+2*j)/26;
   13ae0:	e0bffa17 	ldw	r2,-24(fp)
   13ae4:	1085883a 	add	r2,r2,r2
   13ae8:	1085883a 	add	r2,r2,r2
   13aec:	1007883a 	mov	r3,r2
   13af0:	e0bffb17 	ldw	r2,-20(fp)
   13af4:	1885883a 	add	r2,r3,r2
   13af8:	1085883a 	add	r2,r2,r2
   13afc:	01400684 	movi	r5,26
   13b00:	1009883a 	mov	r4,r2
   13b04:	00429a00 	call	429a0 <__divsi3>
   13b08:	e0bffc15 	stw	r2,-16(fp)
            int shift = (8*i+2*j)%26;
   13b0c:	e0bffa17 	ldw	r2,-24(fp)
   13b10:	1085883a 	add	r2,r2,r2
   13b14:	1085883a 	add	r2,r2,r2
   13b18:	1007883a 	mov	r3,r2
   13b1c:	e0bffb17 	ldw	r2,-20(fp)
   13b20:	1885883a 	add	r2,r3,r2
   13b24:	1085883a 	add	r2,r2,r2
   13b28:	01400684 	movi	r5,26
   13b2c:	1009883a 	mov	r4,r2
   13b30:	0042a240 	call	42a24 <__modsi3>
   13b34:	e0bffd15 	stw	r2,-12(fp)
            r->n[limb] |= (uint32_t)((a[31-i] >> (2*j)) & 0x3) << shift;
   13b38:	e0fffe17 	ldw	r3,-8(fp)
   13b3c:	e0bffc17 	ldw	r2,-16(fp)
   13b40:	1085883a 	add	r2,r2,r2
   13b44:	1085883a 	add	r2,r2,r2
   13b48:	1885883a 	add	r2,r3,r2
   13b4c:	10c00017 	ldw	r3,0(r2)
   13b50:	010007c4 	movi	r4,31
   13b54:	e0bffa17 	ldw	r2,-24(fp)
   13b58:	2085c83a 	sub	r2,r4,r2
   13b5c:	1009883a 	mov	r4,r2
   13b60:	e0bfff17 	ldw	r2,-4(fp)
   13b64:	1105883a 	add	r2,r2,r4
   13b68:	10800003 	ldbu	r2,0(r2)
   13b6c:	11003fcc 	andi	r4,r2,255
   13b70:	e0bffb17 	ldw	r2,-20(fp)
   13b74:	1085883a 	add	r2,r2,r2
   13b78:	2085d83a 	sra	r2,r4,r2
   13b7c:	110000cc 	andi	r4,r2,3
   13b80:	e0bffd17 	ldw	r2,-12(fp)
   13b84:	2084983a 	sll	r2,r4,r2
   13b88:	1886b03a 	or	r3,r3,r2
   13b8c:	e13ffe17 	ldw	r4,-8(fp)
   13b90:	e0bffc17 	ldw	r2,-16(fp)
   13b94:	1085883a 	add	r2,r2,r2
   13b98:	1085883a 	add	r2,r2,r2
   13b9c:	2085883a 	add	r2,r4,r2
   13ba0:	10c00015 	stw	r3,0(r2)
    int i;
    r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;
    r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;
    for (i=0; i<32; i++) {
        int j;
        for (j=0; j<4; j++) {
   13ba4:	e0bffb17 	ldw	r2,-20(fp)
   13ba8:	10800044 	addi	r2,r2,1
   13bac:	e0bffb15 	stw	r2,-20(fp)
   13bb0:	e0bffb17 	ldw	r2,-20(fp)
   13bb4:	10800110 	cmplti	r2,r2,4
   13bb8:	103fc91e 	bne	r2,zero,13ae0 <__alt_mem_epcs_flash_controller+0xfe002ae0>

static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {
    int i;
    r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;
    r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;
    for (i=0; i<32; i++) {
   13bbc:	e0bffa17 	ldw	r2,-24(fp)
   13bc0:	10800044 	addi	r2,r2,1
   13bc4:	e0bffa15 	stw	r2,-24(fp)
   13bc8:	e0bffa17 	ldw	r2,-24(fp)
   13bcc:	10800810 	cmplti	r2,r2,32
   13bd0:	103fc11e 	bne	r2,zero,13ad8 <__alt_mem_epcs_flash_controller+0xfe002ad8>
            int limb = (8*i+2*j)/26;
            int shift = (8*i+2*j)%26;
            r->n[limb] |= (uint32_t)((a[31-i] >> (2*j)) & 0x3) << shift;
        }
    }
    if (r->n[9] == 0x3FFFFFUL && (r->n[8] & r->n[7] & r->n[6] & r->n[5] & r->n[4] & r->n[3] & r->n[2]) == 0x3FFFFFFUL && (r->n[1] + 0x40UL + ((r->n[0] + 0x3D1UL) >> 26)) > 0x3FFFFFFUL) {
   13bd4:	e0bffe17 	ldw	r2,-8(fp)
   13bd8:	10c00917 	ldw	r3,36(r2)
   13bdc:	00801034 	movhi	r2,64
   13be0:	10bfffc4 	addi	r2,r2,-1
   13be4:	1880231e 	bne	r3,r2,13c74 <secp256k1_fe_set_b32+0x24c>
   13be8:	e0bffe17 	ldw	r2,-8(fp)
   13bec:	10c00817 	ldw	r3,32(r2)
   13bf0:	e0bffe17 	ldw	r2,-8(fp)
   13bf4:	10800717 	ldw	r2,28(r2)
   13bf8:	1886703a 	and	r3,r3,r2
   13bfc:	e0bffe17 	ldw	r2,-8(fp)
   13c00:	10800617 	ldw	r2,24(r2)
   13c04:	1886703a 	and	r3,r3,r2
   13c08:	e0bffe17 	ldw	r2,-8(fp)
   13c0c:	10800517 	ldw	r2,20(r2)
   13c10:	1886703a 	and	r3,r3,r2
   13c14:	e0bffe17 	ldw	r2,-8(fp)
   13c18:	10800417 	ldw	r2,16(r2)
   13c1c:	1886703a 	and	r3,r3,r2
   13c20:	e0bffe17 	ldw	r2,-8(fp)
   13c24:	10800317 	ldw	r2,12(r2)
   13c28:	1886703a 	and	r3,r3,r2
   13c2c:	e0bffe17 	ldw	r2,-8(fp)
   13c30:	10800217 	ldw	r2,8(r2)
   13c34:	1886703a 	and	r3,r3,r2
   13c38:	00810034 	movhi	r2,1024
   13c3c:	10bfffc4 	addi	r2,r2,-1
   13c40:	18800c1e 	bne	r3,r2,13c74 <secp256k1_fe_set_b32+0x24c>
   13c44:	e0bffe17 	ldw	r2,-8(fp)
   13c48:	10c00117 	ldw	r3,4(r2)
   13c4c:	e0bffe17 	ldw	r2,-8(fp)
   13c50:	10800017 	ldw	r2,0(r2)
   13c54:	1080f444 	addi	r2,r2,977
   13c58:	1004d6ba 	srli	r2,r2,26
   13c5c:	1885883a 	add	r2,r3,r2
   13c60:	10c01004 	addi	r3,r2,64
   13c64:	00810034 	movhi	r2,1024
   13c68:	18800236 	bltu	r3,r2,13c74 <secp256k1_fe_set_b32+0x24c>
        return 0;
   13c6c:	0005883a 	mov	r2,zero
   13c70:	00000906 	br	13c98 <secp256k1_fe_set_b32+0x270>
    }
#ifdef VERIFY
    r->magnitude = 1;
   13c74:	e0bffe17 	ldw	r2,-8(fp)
   13c78:	00c00044 	movi	r3,1
   13c7c:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   13c80:	e0bffe17 	ldw	r2,-8(fp)
   13c84:	00c00044 	movi	r3,1
   13c88:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_verify(r);
   13c8c:	e13ffe17 	ldw	r4,-8(fp)
   13c90:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
    return 1;
   13c94:	00800044 	movi	r2,1
}
   13c98:	e037883a 	mov	sp,fp
   13c9c:	dfc00117 	ldw	ra,4(sp)
   13ca0:	df000017 	ldw	fp,0(sp)
   13ca4:	dec00204 	addi	sp,sp,8
   13ca8:	f800283a 	ret

00013cac <secp256k1_fe_get_b32>:

/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */
static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {
   13cac:	defff604 	addi	sp,sp,-40
   13cb0:	dfc00915 	stw	ra,36(sp)
   13cb4:	df000815 	stw	fp,32(sp)
   13cb8:	df000804 	addi	fp,sp,32
   13cbc:	e13ffe15 	stw	r4,-8(fp)
   13cc0:	e17fff15 	stw	r5,-4(fp)
    int i;
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   13cc4:	e0bfff17 	ldw	r2,-4(fp)
   13cc8:	10800b17 	ldw	r2,44(r2)
   13ccc:	1005003a 	cmpeq	r2,r2,zero
   13cd0:	10803fcc 	andi	r2,r2,255
   13cd4:	10000d26 	beq	r2,zero,13d0c <secp256k1_fe_get_b32+0x60>
   13cd8:	d0a01617 	ldw	r2,-32680(gp)
   13cdc:	10c00317 	ldw	r3,12(r2)
   13ce0:	008001b4 	movhi	r2,6
   13ce4:	10ab5704 	addi	r2,r2,-21156
   13ce8:	d8800015 	stw	r2,0(sp)
   13cec:	01c05884 	movi	r7,354
   13cf0:	018001b4 	movhi	r6,6
   13cf4:	31ab2d04 	addi	r6,r6,-21324
   13cf8:	014001b4 	movhi	r5,6
   13cfc:	296b3804 	addi	r5,r5,-21280
   13d00:	1809883a 	mov	r4,r3
   13d04:	00452600 	call	45260 <fprintf>
   13d08:	00450340 	call	45034 <abort>
    secp256k1_fe_verify(a);
   13d0c:	e13fff17 	ldw	r4,-4(fp)
   13d10:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
    for (i=0; i<32; i++) {
   13d14:	e03ff915 	stw	zero,-28(fp)
   13d18:	00003906 	br	13e00 <secp256k1_fe_get_b32+0x154>
        int j;
        int c = 0;
   13d1c:	e03ffb15 	stw	zero,-20(fp)
        for (j=0; j<4; j++) {
   13d20:	e03ffa15 	stw	zero,-24(fp)
   13d24:	00002806 	br	13dc8 <secp256k1_fe_get_b32+0x11c>
            int limb = (8*i+2*j)/26;
   13d28:	e0bff917 	ldw	r2,-28(fp)
   13d2c:	1085883a 	add	r2,r2,r2
   13d30:	1085883a 	add	r2,r2,r2
   13d34:	1007883a 	mov	r3,r2
   13d38:	e0bffa17 	ldw	r2,-24(fp)
   13d3c:	1885883a 	add	r2,r3,r2
   13d40:	1085883a 	add	r2,r2,r2
   13d44:	01400684 	movi	r5,26
   13d48:	1009883a 	mov	r4,r2
   13d4c:	00429a00 	call	429a0 <__divsi3>
   13d50:	e0bffc15 	stw	r2,-16(fp)
            int shift = (8*i+2*j)%26;
   13d54:	e0bff917 	ldw	r2,-28(fp)
   13d58:	1085883a 	add	r2,r2,r2
   13d5c:	1085883a 	add	r2,r2,r2
   13d60:	1007883a 	mov	r3,r2
   13d64:	e0bffa17 	ldw	r2,-24(fp)
   13d68:	1885883a 	add	r2,r3,r2
   13d6c:	1085883a 	add	r2,r2,r2
   13d70:	01400684 	movi	r5,26
   13d74:	1009883a 	mov	r4,r2
   13d78:	0042a240 	call	42a24 <__modsi3>
   13d7c:	e0bffd15 	stw	r2,-12(fp)
            c |= ((a->n[limb] >> shift) & 0x3) << (2 * j);
   13d80:	e0ffff17 	ldw	r3,-4(fp)
   13d84:	e0bffc17 	ldw	r2,-16(fp)
   13d88:	1085883a 	add	r2,r2,r2
   13d8c:	1085883a 	add	r2,r2,r2
   13d90:	1885883a 	add	r2,r3,r2
   13d94:	10c00017 	ldw	r3,0(r2)
   13d98:	e0bffd17 	ldw	r2,-12(fp)
   13d9c:	1884d83a 	srl	r2,r3,r2
   13da0:	10c000cc 	andi	r3,r2,3
   13da4:	e0bffa17 	ldw	r2,-24(fp)
   13da8:	1085883a 	add	r2,r2,r2
   13dac:	1886983a 	sll	r3,r3,r2
   13db0:	e0bffb17 	ldw	r2,-20(fp)
   13db4:	1884b03a 	or	r2,r3,r2
   13db8:	e0bffb15 	stw	r2,-20(fp)
    secp256k1_fe_verify(a);
#endif
    for (i=0; i<32; i++) {
        int j;
        int c = 0;
        for (j=0; j<4; j++) {
   13dbc:	e0bffa17 	ldw	r2,-24(fp)
   13dc0:	10800044 	addi	r2,r2,1
   13dc4:	e0bffa15 	stw	r2,-24(fp)
   13dc8:	e0bffa17 	ldw	r2,-24(fp)
   13dcc:	10800110 	cmplti	r2,r2,4
   13dd0:	103fd51e 	bne	r2,zero,13d28 <__alt_mem_epcs_flash_controller+0xfe002d28>
            int limb = (8*i+2*j)/26;
            int shift = (8*i+2*j)%26;
            c |= ((a->n[limb] >> shift) & 0x3) << (2 * j);
        }
        r[31-i] = c;
   13dd4:	00c007c4 	movi	r3,31
   13dd8:	e0bff917 	ldw	r2,-28(fp)
   13ddc:	1885c83a 	sub	r2,r3,r2
   13de0:	1007883a 	mov	r3,r2
   13de4:	e0bffe17 	ldw	r2,-8(fp)
   13de8:	10c5883a 	add	r2,r2,r3
   13dec:	e0fffb17 	ldw	r3,-20(fp)
   13df0:	10c00005 	stb	r3,0(r2)
    int i;
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
    secp256k1_fe_verify(a);
#endif
    for (i=0; i<32; i++) {
   13df4:	e0bff917 	ldw	r2,-28(fp)
   13df8:	10800044 	addi	r2,r2,1
   13dfc:	e0bff915 	stw	r2,-28(fp)
   13e00:	e0bff917 	ldw	r2,-28(fp)
   13e04:	10800810 	cmplti	r2,r2,32
   13e08:	103fc41e 	bne	r2,zero,13d1c <__alt_mem_epcs_flash_controller+0xfe002d1c>
            int shift = (8*i+2*j)%26;
            c |= ((a->n[limb] >> shift) & 0x3) << (2 * j);
        }
        r[31-i] = c;
    }
}
   13e0c:	0001883a 	nop
   13e10:	e037883a 	mov	sp,fp
   13e14:	dfc00117 	ldw	ra,4(sp)
   13e18:	df000017 	ldw	fp,0(sp)
   13e1c:	dec00204 	addi	sp,sp,8
   13e20:	f800283a 	ret

00013e24 <secp256k1_fe_negate>:

SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {
   13e24:	defffa04 	addi	sp,sp,-24
   13e28:	dfc00515 	stw	ra,20(sp)
   13e2c:	df000415 	stw	fp,16(sp)
   13e30:	df000404 	addi	fp,sp,16
   13e34:	e13ffd15 	stw	r4,-12(fp)
   13e38:	e17ffe15 	stw	r5,-8(fp)
   13e3c:	e1bfff15 	stw	r6,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->magnitude <= m);
   13e40:	e0bffe17 	ldw	r2,-8(fp)
   13e44:	10800a17 	ldw	r2,40(r2)
   13e48:	e0ffff17 	ldw	r3,-4(fp)
   13e4c:	1884803a 	cmplt	r2,r3,r2
   13e50:	10803fcc 	andi	r2,r2,255
   13e54:	10000d26 	beq	r2,zero,13e8c <secp256k1_fe_negate+0x68>
   13e58:	d0a01617 	ldw	r2,-32680(gp)
   13e5c:	10c00317 	ldw	r3,12(r2)
   13e60:	008001b4 	movhi	r2,6
   13e64:	10ab6b04 	addi	r2,r2,-21076
   13e68:	d8800015 	stw	r2,0(sp)
   13e6c:	01c05cc4 	movi	r7,371
   13e70:	018001b4 	movhi	r6,6
   13e74:	31ab2d04 	addi	r6,r6,-21324
   13e78:	014001b4 	movhi	r5,6
   13e7c:	296b3804 	addi	r5,r5,-21280
   13e80:	1809883a 	mov	r4,r3
   13e84:	00452600 	call	45260 <fprintf>
   13e88:	00450340 	call	45034 <abort>
    secp256k1_fe_verify(a);
   13e8c:	e13ffe17 	ldw	r4,-8(fp)
   13e90:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
    r->n[0] = 0x3FFFC2FUL * 2 * (m + 1) - a->n[0];
   13e94:	e0bfff17 	ldw	r2,-4(fp)
   13e98:	10800044 	addi	r2,r2,1
   13e9c:	01420034 	movhi	r5,2048
   13ea0:	297e1784 	addi	r5,r5,-1954
   13ea4:	1009883a 	mov	r4,r2
   13ea8:	0042b540 	call	42b54 <__mulsi3>
   13eac:	1007883a 	mov	r3,r2
   13eb0:	e0bffe17 	ldw	r2,-8(fp)
   13eb4:	10800017 	ldw	r2,0(r2)
   13eb8:	1887c83a 	sub	r3,r3,r2
   13ebc:	e0bffd17 	ldw	r2,-12(fp)
   13ec0:	10c00015 	stw	r3,0(r2)
    r->n[1] = 0x3FFFFBFUL * 2 * (m + 1) - a->n[1];
   13ec4:	e0bfff17 	ldw	r2,-4(fp)
   13ec8:	10800044 	addi	r2,r2,1
   13ecc:	01420034 	movhi	r5,2048
   13ed0:	297fdf84 	addi	r5,r5,-130
   13ed4:	1009883a 	mov	r4,r2
   13ed8:	0042b540 	call	42b54 <__mulsi3>
   13edc:	1007883a 	mov	r3,r2
   13ee0:	e0bffe17 	ldw	r2,-8(fp)
   13ee4:	10800117 	ldw	r2,4(r2)
   13ee8:	1887c83a 	sub	r3,r3,r2
   13eec:	e0bffd17 	ldw	r2,-12(fp)
   13ef0:	10c00115 	stw	r3,4(r2)
    r->n[2] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[2];
   13ef4:	e0bfff17 	ldw	r2,-4(fp)
   13ef8:	10800044 	addi	r2,r2,1
   13efc:	1085883a 	add	r2,r2,r2
   13f00:	100696ba 	slli	r3,r2,26
   13f04:	1887c83a 	sub	r3,r3,r2
   13f08:	e0bffe17 	ldw	r2,-8(fp)
   13f0c:	10800217 	ldw	r2,8(r2)
   13f10:	1887c83a 	sub	r3,r3,r2
   13f14:	e0bffd17 	ldw	r2,-12(fp)
   13f18:	10c00215 	stw	r3,8(r2)
    r->n[3] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[3];
   13f1c:	e0bfff17 	ldw	r2,-4(fp)
   13f20:	10800044 	addi	r2,r2,1
   13f24:	1085883a 	add	r2,r2,r2
   13f28:	100696ba 	slli	r3,r2,26
   13f2c:	1887c83a 	sub	r3,r3,r2
   13f30:	e0bffe17 	ldw	r2,-8(fp)
   13f34:	10800317 	ldw	r2,12(r2)
   13f38:	1887c83a 	sub	r3,r3,r2
   13f3c:	e0bffd17 	ldw	r2,-12(fp)
   13f40:	10c00315 	stw	r3,12(r2)
    r->n[4] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[4];
   13f44:	e0bfff17 	ldw	r2,-4(fp)
   13f48:	10800044 	addi	r2,r2,1
   13f4c:	1085883a 	add	r2,r2,r2
   13f50:	100696ba 	slli	r3,r2,26
   13f54:	1887c83a 	sub	r3,r3,r2
   13f58:	e0bffe17 	ldw	r2,-8(fp)
   13f5c:	10800417 	ldw	r2,16(r2)
   13f60:	1887c83a 	sub	r3,r3,r2
   13f64:	e0bffd17 	ldw	r2,-12(fp)
   13f68:	10c00415 	stw	r3,16(r2)
    r->n[5] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[5];
   13f6c:	e0bfff17 	ldw	r2,-4(fp)
   13f70:	10800044 	addi	r2,r2,1
   13f74:	1085883a 	add	r2,r2,r2
   13f78:	100696ba 	slli	r3,r2,26
   13f7c:	1887c83a 	sub	r3,r3,r2
   13f80:	e0bffe17 	ldw	r2,-8(fp)
   13f84:	10800517 	ldw	r2,20(r2)
   13f88:	1887c83a 	sub	r3,r3,r2
   13f8c:	e0bffd17 	ldw	r2,-12(fp)
   13f90:	10c00515 	stw	r3,20(r2)
    r->n[6] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[6];
   13f94:	e0bfff17 	ldw	r2,-4(fp)
   13f98:	10800044 	addi	r2,r2,1
   13f9c:	1085883a 	add	r2,r2,r2
   13fa0:	100696ba 	slli	r3,r2,26
   13fa4:	1887c83a 	sub	r3,r3,r2
   13fa8:	e0bffe17 	ldw	r2,-8(fp)
   13fac:	10800617 	ldw	r2,24(r2)
   13fb0:	1887c83a 	sub	r3,r3,r2
   13fb4:	e0bffd17 	ldw	r2,-12(fp)
   13fb8:	10c00615 	stw	r3,24(r2)
    r->n[7] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[7];
   13fbc:	e0bfff17 	ldw	r2,-4(fp)
   13fc0:	10800044 	addi	r2,r2,1
   13fc4:	1085883a 	add	r2,r2,r2
   13fc8:	100696ba 	slli	r3,r2,26
   13fcc:	1887c83a 	sub	r3,r3,r2
   13fd0:	e0bffe17 	ldw	r2,-8(fp)
   13fd4:	10800717 	ldw	r2,28(r2)
   13fd8:	1887c83a 	sub	r3,r3,r2
   13fdc:	e0bffd17 	ldw	r2,-12(fp)
   13fe0:	10c00715 	stw	r3,28(r2)
    r->n[8] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[8];
   13fe4:	e0bfff17 	ldw	r2,-4(fp)
   13fe8:	10800044 	addi	r2,r2,1
   13fec:	1085883a 	add	r2,r2,r2
   13ff0:	100696ba 	slli	r3,r2,26
   13ff4:	1887c83a 	sub	r3,r3,r2
   13ff8:	e0bffe17 	ldw	r2,-8(fp)
   13ffc:	10800817 	ldw	r2,32(r2)
   14000:	1887c83a 	sub	r3,r3,r2
   14004:	e0bffd17 	ldw	r2,-12(fp)
   14008:	10c00815 	stw	r3,32(r2)
    r->n[9] = 0x03FFFFFUL * 2 * (m + 1) - a->n[9];
   1400c:	e0bfff17 	ldw	r2,-4(fp)
   14010:	10800044 	addi	r2,r2,1
   14014:	1085883a 	add	r2,r2,r2
   14018:	100695ba 	slli	r3,r2,22
   1401c:	1887c83a 	sub	r3,r3,r2
   14020:	e0bffe17 	ldw	r2,-8(fp)
   14024:	10800917 	ldw	r2,36(r2)
   14028:	1887c83a 	sub	r3,r3,r2
   1402c:	e0bffd17 	ldw	r2,-12(fp)
   14030:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    r->magnitude = m + 1;
   14034:	e0bfff17 	ldw	r2,-4(fp)
   14038:	10c00044 	addi	r3,r2,1
   1403c:	e0bffd17 	ldw	r2,-12(fp)
   14040:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   14044:	e0bffd17 	ldw	r2,-12(fp)
   14048:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   1404c:	e13ffd17 	ldw	r4,-12(fp)
   14050:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
}
   14054:	0001883a 	nop
   14058:	e037883a 	mov	sp,fp
   1405c:	dfc00117 	ldw	ra,4(sp)
   14060:	df000017 	ldw	fp,0(sp)
   14064:	dec00204 	addi	sp,sp,8
   14068:	f800283a 	ret

0001406c <secp256k1_fe_mul_int>:

SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {
   1406c:	defffc04 	addi	sp,sp,-16
   14070:	dfc00315 	stw	ra,12(sp)
   14074:	df000215 	stw	fp,8(sp)
   14078:	df000204 	addi	fp,sp,8
   1407c:	e13ffe15 	stw	r4,-8(fp)
   14080:	e17fff15 	stw	r5,-4(fp)
    r->n[0] *= a;
   14084:	e0bffe17 	ldw	r2,-8(fp)
   14088:	10800017 	ldw	r2,0(r2)
   1408c:	e0ffff17 	ldw	r3,-4(fp)
   14090:	180b883a 	mov	r5,r3
   14094:	1009883a 	mov	r4,r2
   14098:	0042b540 	call	42b54 <__mulsi3>
   1409c:	1007883a 	mov	r3,r2
   140a0:	e0bffe17 	ldw	r2,-8(fp)
   140a4:	10c00015 	stw	r3,0(r2)
    r->n[1] *= a;
   140a8:	e0bffe17 	ldw	r2,-8(fp)
   140ac:	10800117 	ldw	r2,4(r2)
   140b0:	e0ffff17 	ldw	r3,-4(fp)
   140b4:	180b883a 	mov	r5,r3
   140b8:	1009883a 	mov	r4,r2
   140bc:	0042b540 	call	42b54 <__mulsi3>
   140c0:	1007883a 	mov	r3,r2
   140c4:	e0bffe17 	ldw	r2,-8(fp)
   140c8:	10c00115 	stw	r3,4(r2)
    r->n[2] *= a;
   140cc:	e0bffe17 	ldw	r2,-8(fp)
   140d0:	10800217 	ldw	r2,8(r2)
   140d4:	e0ffff17 	ldw	r3,-4(fp)
   140d8:	180b883a 	mov	r5,r3
   140dc:	1009883a 	mov	r4,r2
   140e0:	0042b540 	call	42b54 <__mulsi3>
   140e4:	1007883a 	mov	r3,r2
   140e8:	e0bffe17 	ldw	r2,-8(fp)
   140ec:	10c00215 	stw	r3,8(r2)
    r->n[3] *= a;
   140f0:	e0bffe17 	ldw	r2,-8(fp)
   140f4:	10800317 	ldw	r2,12(r2)
   140f8:	e0ffff17 	ldw	r3,-4(fp)
   140fc:	180b883a 	mov	r5,r3
   14100:	1009883a 	mov	r4,r2
   14104:	0042b540 	call	42b54 <__mulsi3>
   14108:	1007883a 	mov	r3,r2
   1410c:	e0bffe17 	ldw	r2,-8(fp)
   14110:	10c00315 	stw	r3,12(r2)
    r->n[4] *= a;
   14114:	e0bffe17 	ldw	r2,-8(fp)
   14118:	10800417 	ldw	r2,16(r2)
   1411c:	e0ffff17 	ldw	r3,-4(fp)
   14120:	180b883a 	mov	r5,r3
   14124:	1009883a 	mov	r4,r2
   14128:	0042b540 	call	42b54 <__mulsi3>
   1412c:	1007883a 	mov	r3,r2
   14130:	e0bffe17 	ldw	r2,-8(fp)
   14134:	10c00415 	stw	r3,16(r2)
    r->n[5] *= a;
   14138:	e0bffe17 	ldw	r2,-8(fp)
   1413c:	10800517 	ldw	r2,20(r2)
   14140:	e0ffff17 	ldw	r3,-4(fp)
   14144:	180b883a 	mov	r5,r3
   14148:	1009883a 	mov	r4,r2
   1414c:	0042b540 	call	42b54 <__mulsi3>
   14150:	1007883a 	mov	r3,r2
   14154:	e0bffe17 	ldw	r2,-8(fp)
   14158:	10c00515 	stw	r3,20(r2)
    r->n[6] *= a;
   1415c:	e0bffe17 	ldw	r2,-8(fp)
   14160:	10800617 	ldw	r2,24(r2)
   14164:	e0ffff17 	ldw	r3,-4(fp)
   14168:	180b883a 	mov	r5,r3
   1416c:	1009883a 	mov	r4,r2
   14170:	0042b540 	call	42b54 <__mulsi3>
   14174:	1007883a 	mov	r3,r2
   14178:	e0bffe17 	ldw	r2,-8(fp)
   1417c:	10c00615 	stw	r3,24(r2)
    r->n[7] *= a;
   14180:	e0bffe17 	ldw	r2,-8(fp)
   14184:	10800717 	ldw	r2,28(r2)
   14188:	e0ffff17 	ldw	r3,-4(fp)
   1418c:	180b883a 	mov	r5,r3
   14190:	1009883a 	mov	r4,r2
   14194:	0042b540 	call	42b54 <__mulsi3>
   14198:	1007883a 	mov	r3,r2
   1419c:	e0bffe17 	ldw	r2,-8(fp)
   141a0:	10c00715 	stw	r3,28(r2)
    r->n[8] *= a;
   141a4:	e0bffe17 	ldw	r2,-8(fp)
   141a8:	10800817 	ldw	r2,32(r2)
   141ac:	e0ffff17 	ldw	r3,-4(fp)
   141b0:	180b883a 	mov	r5,r3
   141b4:	1009883a 	mov	r4,r2
   141b8:	0042b540 	call	42b54 <__mulsi3>
   141bc:	1007883a 	mov	r3,r2
   141c0:	e0bffe17 	ldw	r2,-8(fp)
   141c4:	10c00815 	stw	r3,32(r2)
    r->n[9] *= a;
   141c8:	e0bffe17 	ldw	r2,-8(fp)
   141cc:	10800917 	ldw	r2,36(r2)
   141d0:	e0ffff17 	ldw	r3,-4(fp)
   141d4:	180b883a 	mov	r5,r3
   141d8:	1009883a 	mov	r4,r2
   141dc:	0042b540 	call	42b54 <__mulsi3>
   141e0:	1007883a 	mov	r3,r2
   141e4:	e0bffe17 	ldw	r2,-8(fp)
   141e8:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    r->magnitude *= a;
   141ec:	e0bffe17 	ldw	r2,-8(fp)
   141f0:	10800a17 	ldw	r2,40(r2)
   141f4:	e17fff17 	ldw	r5,-4(fp)
   141f8:	1009883a 	mov	r4,r2
   141fc:	0042b540 	call	42b54 <__mulsi3>
   14200:	1007883a 	mov	r3,r2
   14204:	e0bffe17 	ldw	r2,-8(fp)
   14208:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   1420c:	e0bffe17 	ldw	r2,-8(fp)
   14210:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   14214:	e13ffe17 	ldw	r4,-8(fp)
   14218:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
}
   1421c:	0001883a 	nop
   14220:	e037883a 	mov	sp,fp
   14224:	dfc00117 	ldw	ra,4(sp)
   14228:	df000017 	ldw	fp,0(sp)
   1422c:	dec00204 	addi	sp,sp,8
   14230:	f800283a 	ret

00014234 <secp256k1_fe_add>:

SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {
   14234:	defffc04 	addi	sp,sp,-16
   14238:	dfc00315 	stw	ra,12(sp)
   1423c:	df000215 	stw	fp,8(sp)
   14240:	df000204 	addi	fp,sp,8
   14244:	e13ffe15 	stw	r4,-8(fp)
   14248:	e17fff15 	stw	r5,-4(fp)
#ifdef VERIFY
    secp256k1_fe_verify(a);
   1424c:	e13fff17 	ldw	r4,-4(fp)
   14250:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
    r->n[0] += a->n[0];
   14254:	e0bffe17 	ldw	r2,-8(fp)
   14258:	10c00017 	ldw	r3,0(r2)
   1425c:	e0bfff17 	ldw	r2,-4(fp)
   14260:	10800017 	ldw	r2,0(r2)
   14264:	1887883a 	add	r3,r3,r2
   14268:	e0bffe17 	ldw	r2,-8(fp)
   1426c:	10c00015 	stw	r3,0(r2)
    r->n[1] += a->n[1];
   14270:	e0bffe17 	ldw	r2,-8(fp)
   14274:	10c00117 	ldw	r3,4(r2)
   14278:	e0bfff17 	ldw	r2,-4(fp)
   1427c:	10800117 	ldw	r2,4(r2)
   14280:	1887883a 	add	r3,r3,r2
   14284:	e0bffe17 	ldw	r2,-8(fp)
   14288:	10c00115 	stw	r3,4(r2)
    r->n[2] += a->n[2];
   1428c:	e0bffe17 	ldw	r2,-8(fp)
   14290:	10c00217 	ldw	r3,8(r2)
   14294:	e0bfff17 	ldw	r2,-4(fp)
   14298:	10800217 	ldw	r2,8(r2)
   1429c:	1887883a 	add	r3,r3,r2
   142a0:	e0bffe17 	ldw	r2,-8(fp)
   142a4:	10c00215 	stw	r3,8(r2)
    r->n[3] += a->n[3];
   142a8:	e0bffe17 	ldw	r2,-8(fp)
   142ac:	10c00317 	ldw	r3,12(r2)
   142b0:	e0bfff17 	ldw	r2,-4(fp)
   142b4:	10800317 	ldw	r2,12(r2)
   142b8:	1887883a 	add	r3,r3,r2
   142bc:	e0bffe17 	ldw	r2,-8(fp)
   142c0:	10c00315 	stw	r3,12(r2)
    r->n[4] += a->n[4];
   142c4:	e0bffe17 	ldw	r2,-8(fp)
   142c8:	10c00417 	ldw	r3,16(r2)
   142cc:	e0bfff17 	ldw	r2,-4(fp)
   142d0:	10800417 	ldw	r2,16(r2)
   142d4:	1887883a 	add	r3,r3,r2
   142d8:	e0bffe17 	ldw	r2,-8(fp)
   142dc:	10c00415 	stw	r3,16(r2)
    r->n[5] += a->n[5];
   142e0:	e0bffe17 	ldw	r2,-8(fp)
   142e4:	10c00517 	ldw	r3,20(r2)
   142e8:	e0bfff17 	ldw	r2,-4(fp)
   142ec:	10800517 	ldw	r2,20(r2)
   142f0:	1887883a 	add	r3,r3,r2
   142f4:	e0bffe17 	ldw	r2,-8(fp)
   142f8:	10c00515 	stw	r3,20(r2)
    r->n[6] += a->n[6];
   142fc:	e0bffe17 	ldw	r2,-8(fp)
   14300:	10c00617 	ldw	r3,24(r2)
   14304:	e0bfff17 	ldw	r2,-4(fp)
   14308:	10800617 	ldw	r2,24(r2)
   1430c:	1887883a 	add	r3,r3,r2
   14310:	e0bffe17 	ldw	r2,-8(fp)
   14314:	10c00615 	stw	r3,24(r2)
    r->n[7] += a->n[7];
   14318:	e0bffe17 	ldw	r2,-8(fp)
   1431c:	10c00717 	ldw	r3,28(r2)
   14320:	e0bfff17 	ldw	r2,-4(fp)
   14324:	10800717 	ldw	r2,28(r2)
   14328:	1887883a 	add	r3,r3,r2
   1432c:	e0bffe17 	ldw	r2,-8(fp)
   14330:	10c00715 	stw	r3,28(r2)
    r->n[8] += a->n[8];
   14334:	e0bffe17 	ldw	r2,-8(fp)
   14338:	10c00817 	ldw	r3,32(r2)
   1433c:	e0bfff17 	ldw	r2,-4(fp)
   14340:	10800817 	ldw	r2,32(r2)
   14344:	1887883a 	add	r3,r3,r2
   14348:	e0bffe17 	ldw	r2,-8(fp)
   1434c:	10c00815 	stw	r3,32(r2)
    r->n[9] += a->n[9];
   14350:	e0bffe17 	ldw	r2,-8(fp)
   14354:	10c00917 	ldw	r3,36(r2)
   14358:	e0bfff17 	ldw	r2,-4(fp)
   1435c:	10800917 	ldw	r2,36(r2)
   14360:	1887883a 	add	r3,r3,r2
   14364:	e0bffe17 	ldw	r2,-8(fp)
   14368:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    r->magnitude += a->magnitude;
   1436c:	e0bffe17 	ldw	r2,-8(fp)
   14370:	10c00a17 	ldw	r3,40(r2)
   14374:	e0bfff17 	ldw	r2,-4(fp)
   14378:	10800a17 	ldw	r2,40(r2)
   1437c:	1887883a 	add	r3,r3,r2
   14380:	e0bffe17 	ldw	r2,-8(fp)
   14384:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   14388:	e0bffe17 	ldw	r2,-8(fp)
   1438c:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   14390:	e13ffe17 	ldw	r4,-8(fp)
   14394:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
}
   14398:	0001883a 	nop
   1439c:	e037883a 	mov	sp,fp
   143a0:	dfc00117 	ldw	ra,4(sp)
   143a4:	df000017 	ldw	fp,0(sp)
   143a8:	dec00204 	addi	sp,sp,8
   143ac:	f800283a 	ret

000143b0 <secp256k1_fe_mul_inner>:
#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)
#else
#define VERIFY_BITS(x, n) do { } while(0)
#endif

SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t *a, const uint32_t * SECP256K1_RESTRICT b) {
   143b0:	defdac04 	addi	sp,sp,-2384
   143b4:	dfc25315 	stw	ra,2380(sp)
   143b8:	df025215 	stw	fp,2376(sp)
   143bc:	ddc25115 	stw	r23,2372(sp)
   143c0:	dd825015 	stw	r22,2368(sp)
   143c4:	dd424f15 	stw	r21,2364(sp)
   143c8:	dd024e15 	stw	r20,2360(sp)
   143cc:	dcc24d15 	stw	r19,2356(sp)
   143d0:	dc824c15 	stw	r18,2352(sp)
   143d4:	dc424b15 	stw	r17,2348(sp)
   143d8:	dc024a15 	stw	r16,2344(sp)
   143dc:	df025204 	addi	fp,sp,2376
   143e0:	e13dd115 	stw	r4,-2236(fp)
   143e4:	e17dd215 	stw	r5,-2232(fp)
   143e8:	e1bdd315 	stw	r6,-2228(fp)
    uint64_t c, d;
    uint64_t u0, u1, u2, u3, u4, u5, u6, u7, u8;
    uint32_t t9, t1, t0, t2, t3, t4, t5, t6, t7;
    const uint32_t M = 0x3FFFFFFUL, R0 = 0x3D10UL, R1 = 0x400UL;
   143ec:	00810034 	movhi	r2,1024
   143f0:	10bfffc4 	addi	r2,r2,-1
   143f4:	e0bdaf15 	stw	r2,-2372(fp)
   143f8:	008f4404 	movi	r2,15632
   143fc:	e0bdb015 	stw	r2,-2368(fp)
   14400:	00810004 	movi	r2,1024
   14404:	e0bdb115 	stw	r2,-2364(fp)

    VERIFY_BITS(a[0], 30);
   14408:	e0bdd217 	ldw	r2,-2232(fp)
   1440c:	10800017 	ldw	r2,0(r2)
   14410:	1004d7ba 	srli	r2,r2,30
   14414:	1004c03a 	cmpne	r2,r2,zero
   14418:	10803fcc 	andi	r2,r2,255
   1441c:	10000d26 	beq	r2,zero,14454 <secp256k1_fe_mul_inner+0xa4>
   14420:	d0a01617 	ldw	r2,-32680(gp)
   14424:	10c00317 	ldw	r3,12(r2)
   14428:	008001b4 	movhi	r2,6
   1442c:	10ab7604 	addi	r2,r2,-21032
   14430:	d8800015 	stw	r2,0(sp)
   14434:	01c07084 	movi	r7,450
   14438:	018001b4 	movhi	r6,6
   1443c:	31ab2d04 	addi	r6,r6,-21324
   14440:	014001b4 	movhi	r5,6
   14444:	296b3804 	addi	r5,r5,-21280
   14448:	1809883a 	mov	r4,r3
   1444c:	00452600 	call	45260 <fprintf>
   14450:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[1], 30);
   14454:	e0bdd217 	ldw	r2,-2232(fp)
   14458:	10800104 	addi	r2,r2,4
   1445c:	10800017 	ldw	r2,0(r2)
   14460:	1004d7ba 	srli	r2,r2,30
   14464:	1004c03a 	cmpne	r2,r2,zero
   14468:	10803fcc 	andi	r2,r2,255
   1446c:	10000d26 	beq	r2,zero,144a4 <secp256k1_fe_mul_inner+0xf4>
   14470:	d0a01617 	ldw	r2,-32680(gp)
   14474:	10c00317 	ldw	r3,12(r2)
   14478:	008001b4 	movhi	r2,6
   1447c:	10ab8204 	addi	r2,r2,-20984
   14480:	d8800015 	stw	r2,0(sp)
   14484:	01c070c4 	movi	r7,451
   14488:	018001b4 	movhi	r6,6
   1448c:	31ab2d04 	addi	r6,r6,-21324
   14490:	014001b4 	movhi	r5,6
   14494:	296b3804 	addi	r5,r5,-21280
   14498:	1809883a 	mov	r4,r3
   1449c:	00452600 	call	45260 <fprintf>
   144a0:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[2], 30);
   144a4:	e0bdd217 	ldw	r2,-2232(fp)
   144a8:	10800204 	addi	r2,r2,8
   144ac:	10800017 	ldw	r2,0(r2)
   144b0:	1004d7ba 	srli	r2,r2,30
   144b4:	1004c03a 	cmpne	r2,r2,zero
   144b8:	10803fcc 	andi	r2,r2,255
   144bc:	10000d26 	beq	r2,zero,144f4 <secp256k1_fe_mul_inner+0x144>
   144c0:	d0a01617 	ldw	r2,-32680(gp)
   144c4:	10c00317 	ldw	r3,12(r2)
   144c8:	008001b4 	movhi	r2,6
   144cc:	10ab8e04 	addi	r2,r2,-20936
   144d0:	d8800015 	stw	r2,0(sp)
   144d4:	01c07104 	movi	r7,452
   144d8:	018001b4 	movhi	r6,6
   144dc:	31ab2d04 	addi	r6,r6,-21324
   144e0:	014001b4 	movhi	r5,6
   144e4:	296b3804 	addi	r5,r5,-21280
   144e8:	1809883a 	mov	r4,r3
   144ec:	00452600 	call	45260 <fprintf>
   144f0:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[3], 30);
   144f4:	e0bdd217 	ldw	r2,-2232(fp)
   144f8:	10800304 	addi	r2,r2,12
   144fc:	10800017 	ldw	r2,0(r2)
   14500:	1004d7ba 	srli	r2,r2,30
   14504:	1004c03a 	cmpne	r2,r2,zero
   14508:	10803fcc 	andi	r2,r2,255
   1450c:	10000d26 	beq	r2,zero,14544 <secp256k1_fe_mul_inner+0x194>
   14510:	d0a01617 	ldw	r2,-32680(gp)
   14514:	10c00317 	ldw	r3,12(r2)
   14518:	008001b4 	movhi	r2,6
   1451c:	10ab9a04 	addi	r2,r2,-20888
   14520:	d8800015 	stw	r2,0(sp)
   14524:	01c07144 	movi	r7,453
   14528:	018001b4 	movhi	r6,6
   1452c:	31ab2d04 	addi	r6,r6,-21324
   14530:	014001b4 	movhi	r5,6
   14534:	296b3804 	addi	r5,r5,-21280
   14538:	1809883a 	mov	r4,r3
   1453c:	00452600 	call	45260 <fprintf>
   14540:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[4], 30);
   14544:	e0bdd217 	ldw	r2,-2232(fp)
   14548:	10800404 	addi	r2,r2,16
   1454c:	10800017 	ldw	r2,0(r2)
   14550:	1004d7ba 	srli	r2,r2,30
   14554:	1004c03a 	cmpne	r2,r2,zero
   14558:	10803fcc 	andi	r2,r2,255
   1455c:	10000d26 	beq	r2,zero,14594 <secp256k1_fe_mul_inner+0x1e4>
   14560:	d0a01617 	ldw	r2,-32680(gp)
   14564:	10c00317 	ldw	r3,12(r2)
   14568:	008001b4 	movhi	r2,6
   1456c:	10aba604 	addi	r2,r2,-20840
   14570:	d8800015 	stw	r2,0(sp)
   14574:	01c07184 	movi	r7,454
   14578:	018001b4 	movhi	r6,6
   1457c:	31ab2d04 	addi	r6,r6,-21324
   14580:	014001b4 	movhi	r5,6
   14584:	296b3804 	addi	r5,r5,-21280
   14588:	1809883a 	mov	r4,r3
   1458c:	00452600 	call	45260 <fprintf>
   14590:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[5], 30);
   14594:	e0bdd217 	ldw	r2,-2232(fp)
   14598:	10800504 	addi	r2,r2,20
   1459c:	10800017 	ldw	r2,0(r2)
   145a0:	1004d7ba 	srli	r2,r2,30
   145a4:	1004c03a 	cmpne	r2,r2,zero
   145a8:	10803fcc 	andi	r2,r2,255
   145ac:	10000d26 	beq	r2,zero,145e4 <secp256k1_fe_mul_inner+0x234>
   145b0:	d0a01617 	ldw	r2,-32680(gp)
   145b4:	10c00317 	ldw	r3,12(r2)
   145b8:	008001b4 	movhi	r2,6
   145bc:	10abb204 	addi	r2,r2,-20792
   145c0:	d8800015 	stw	r2,0(sp)
   145c4:	01c071c4 	movi	r7,455
   145c8:	018001b4 	movhi	r6,6
   145cc:	31ab2d04 	addi	r6,r6,-21324
   145d0:	014001b4 	movhi	r5,6
   145d4:	296b3804 	addi	r5,r5,-21280
   145d8:	1809883a 	mov	r4,r3
   145dc:	00452600 	call	45260 <fprintf>
   145e0:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[6], 30);
   145e4:	e0bdd217 	ldw	r2,-2232(fp)
   145e8:	10800604 	addi	r2,r2,24
   145ec:	10800017 	ldw	r2,0(r2)
   145f0:	1004d7ba 	srli	r2,r2,30
   145f4:	1004c03a 	cmpne	r2,r2,zero
   145f8:	10803fcc 	andi	r2,r2,255
   145fc:	10000d26 	beq	r2,zero,14634 <secp256k1_fe_mul_inner+0x284>
   14600:	d0a01617 	ldw	r2,-32680(gp)
   14604:	10c00317 	ldw	r3,12(r2)
   14608:	008001b4 	movhi	r2,6
   1460c:	10abbe04 	addi	r2,r2,-20744
   14610:	d8800015 	stw	r2,0(sp)
   14614:	01c07204 	movi	r7,456
   14618:	018001b4 	movhi	r6,6
   1461c:	31ab2d04 	addi	r6,r6,-21324
   14620:	014001b4 	movhi	r5,6
   14624:	296b3804 	addi	r5,r5,-21280
   14628:	1809883a 	mov	r4,r3
   1462c:	00452600 	call	45260 <fprintf>
   14630:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[7], 30);
   14634:	e0bdd217 	ldw	r2,-2232(fp)
   14638:	10800704 	addi	r2,r2,28
   1463c:	10800017 	ldw	r2,0(r2)
   14640:	1004d7ba 	srli	r2,r2,30
   14644:	1004c03a 	cmpne	r2,r2,zero
   14648:	10803fcc 	andi	r2,r2,255
   1464c:	10000d26 	beq	r2,zero,14684 <secp256k1_fe_mul_inner+0x2d4>
   14650:	d0a01617 	ldw	r2,-32680(gp)
   14654:	10c00317 	ldw	r3,12(r2)
   14658:	008001b4 	movhi	r2,6
   1465c:	10abca04 	addi	r2,r2,-20696
   14660:	d8800015 	stw	r2,0(sp)
   14664:	01c07244 	movi	r7,457
   14668:	018001b4 	movhi	r6,6
   1466c:	31ab2d04 	addi	r6,r6,-21324
   14670:	014001b4 	movhi	r5,6
   14674:	296b3804 	addi	r5,r5,-21280
   14678:	1809883a 	mov	r4,r3
   1467c:	00452600 	call	45260 <fprintf>
   14680:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[8], 30);
   14684:	e0bdd217 	ldw	r2,-2232(fp)
   14688:	10800804 	addi	r2,r2,32
   1468c:	10800017 	ldw	r2,0(r2)
   14690:	1004d7ba 	srli	r2,r2,30
   14694:	1004c03a 	cmpne	r2,r2,zero
   14698:	10803fcc 	andi	r2,r2,255
   1469c:	10000d26 	beq	r2,zero,146d4 <secp256k1_fe_mul_inner+0x324>
   146a0:	d0a01617 	ldw	r2,-32680(gp)
   146a4:	10c00317 	ldw	r3,12(r2)
   146a8:	008001b4 	movhi	r2,6
   146ac:	10abd604 	addi	r2,r2,-20648
   146b0:	d8800015 	stw	r2,0(sp)
   146b4:	01c07284 	movi	r7,458
   146b8:	018001b4 	movhi	r6,6
   146bc:	31ab2d04 	addi	r6,r6,-21324
   146c0:	014001b4 	movhi	r5,6
   146c4:	296b3804 	addi	r5,r5,-21280
   146c8:	1809883a 	mov	r4,r3
   146cc:	00452600 	call	45260 <fprintf>
   146d0:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[9], 26);
   146d4:	e0bdd217 	ldw	r2,-2232(fp)
   146d8:	10800904 	addi	r2,r2,36
   146dc:	10800017 	ldw	r2,0(r2)
   146e0:	1004d6ba 	srli	r2,r2,26
   146e4:	1004c03a 	cmpne	r2,r2,zero
   146e8:	10803fcc 	andi	r2,r2,255
   146ec:	10000d26 	beq	r2,zero,14724 <secp256k1_fe_mul_inner+0x374>
   146f0:	d0a01617 	ldw	r2,-32680(gp)
   146f4:	10c00317 	ldw	r3,12(r2)
   146f8:	008001b4 	movhi	r2,6
   146fc:	10abe204 	addi	r2,r2,-20600
   14700:	d8800015 	stw	r2,0(sp)
   14704:	01c072c4 	movi	r7,459
   14708:	018001b4 	movhi	r6,6
   1470c:	31ab2d04 	addi	r6,r6,-21324
   14710:	014001b4 	movhi	r5,6
   14714:	296b3804 	addi	r5,r5,-21280
   14718:	1809883a 	mov	r4,r3
   1471c:	00452600 	call	45260 <fprintf>
   14720:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[0], 30);
   14724:	e0bdd317 	ldw	r2,-2228(fp)
   14728:	10800017 	ldw	r2,0(r2)
   1472c:	1004d7ba 	srli	r2,r2,30
   14730:	1004c03a 	cmpne	r2,r2,zero
   14734:	10803fcc 	andi	r2,r2,255
   14738:	10000d26 	beq	r2,zero,14770 <secp256k1_fe_mul_inner+0x3c0>
   1473c:	d0a01617 	ldw	r2,-32680(gp)
   14740:	10c00317 	ldw	r3,12(r2)
   14744:	008001b4 	movhi	r2,6
   14748:	10abee04 	addi	r2,r2,-20552
   1474c:	d8800015 	stw	r2,0(sp)
   14750:	01c07304 	movi	r7,460
   14754:	018001b4 	movhi	r6,6
   14758:	31ab2d04 	addi	r6,r6,-21324
   1475c:	014001b4 	movhi	r5,6
   14760:	296b3804 	addi	r5,r5,-21280
   14764:	1809883a 	mov	r4,r3
   14768:	00452600 	call	45260 <fprintf>
   1476c:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[1], 30);
   14770:	e0bdd317 	ldw	r2,-2228(fp)
   14774:	10800104 	addi	r2,r2,4
   14778:	10800017 	ldw	r2,0(r2)
   1477c:	1004d7ba 	srli	r2,r2,30
   14780:	1004c03a 	cmpne	r2,r2,zero
   14784:	10803fcc 	andi	r2,r2,255
   14788:	10000d26 	beq	r2,zero,147c0 <secp256k1_fe_mul_inner+0x410>
   1478c:	d0a01617 	ldw	r2,-32680(gp)
   14790:	10c00317 	ldw	r3,12(r2)
   14794:	008001b4 	movhi	r2,6
   14798:	10abfa04 	addi	r2,r2,-20504
   1479c:	d8800015 	stw	r2,0(sp)
   147a0:	01c07344 	movi	r7,461
   147a4:	018001b4 	movhi	r6,6
   147a8:	31ab2d04 	addi	r6,r6,-21324
   147ac:	014001b4 	movhi	r5,6
   147b0:	296b3804 	addi	r5,r5,-21280
   147b4:	1809883a 	mov	r4,r3
   147b8:	00452600 	call	45260 <fprintf>
   147bc:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[2], 30);
   147c0:	e0bdd317 	ldw	r2,-2228(fp)
   147c4:	10800204 	addi	r2,r2,8
   147c8:	10800017 	ldw	r2,0(r2)
   147cc:	1004d7ba 	srli	r2,r2,30
   147d0:	1004c03a 	cmpne	r2,r2,zero
   147d4:	10803fcc 	andi	r2,r2,255
   147d8:	10000d26 	beq	r2,zero,14810 <secp256k1_fe_mul_inner+0x460>
   147dc:	d0a01617 	ldw	r2,-32680(gp)
   147e0:	10c00317 	ldw	r3,12(r2)
   147e4:	008001b4 	movhi	r2,6
   147e8:	10ac0604 	addi	r2,r2,-20456
   147ec:	d8800015 	stw	r2,0(sp)
   147f0:	01c07384 	movi	r7,462
   147f4:	018001b4 	movhi	r6,6
   147f8:	31ab2d04 	addi	r6,r6,-21324
   147fc:	014001b4 	movhi	r5,6
   14800:	296b3804 	addi	r5,r5,-21280
   14804:	1809883a 	mov	r4,r3
   14808:	00452600 	call	45260 <fprintf>
   1480c:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[3], 30);
   14810:	e0bdd317 	ldw	r2,-2228(fp)
   14814:	10800304 	addi	r2,r2,12
   14818:	10800017 	ldw	r2,0(r2)
   1481c:	1004d7ba 	srli	r2,r2,30
   14820:	1004c03a 	cmpne	r2,r2,zero
   14824:	10803fcc 	andi	r2,r2,255
   14828:	10000d26 	beq	r2,zero,14860 <secp256k1_fe_mul_inner+0x4b0>
   1482c:	d0a01617 	ldw	r2,-32680(gp)
   14830:	10c00317 	ldw	r3,12(r2)
   14834:	008001b4 	movhi	r2,6
   14838:	10ac1204 	addi	r2,r2,-20408
   1483c:	d8800015 	stw	r2,0(sp)
   14840:	01c073c4 	movi	r7,463
   14844:	018001b4 	movhi	r6,6
   14848:	31ab2d04 	addi	r6,r6,-21324
   1484c:	014001b4 	movhi	r5,6
   14850:	296b3804 	addi	r5,r5,-21280
   14854:	1809883a 	mov	r4,r3
   14858:	00452600 	call	45260 <fprintf>
   1485c:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[4], 30);
   14860:	e0bdd317 	ldw	r2,-2228(fp)
   14864:	10800404 	addi	r2,r2,16
   14868:	10800017 	ldw	r2,0(r2)
   1486c:	1004d7ba 	srli	r2,r2,30
   14870:	1004c03a 	cmpne	r2,r2,zero
   14874:	10803fcc 	andi	r2,r2,255
   14878:	10000d26 	beq	r2,zero,148b0 <secp256k1_fe_mul_inner+0x500>
   1487c:	d0a01617 	ldw	r2,-32680(gp)
   14880:	10c00317 	ldw	r3,12(r2)
   14884:	008001b4 	movhi	r2,6
   14888:	10ac1e04 	addi	r2,r2,-20360
   1488c:	d8800015 	stw	r2,0(sp)
   14890:	01c07404 	movi	r7,464
   14894:	018001b4 	movhi	r6,6
   14898:	31ab2d04 	addi	r6,r6,-21324
   1489c:	014001b4 	movhi	r5,6
   148a0:	296b3804 	addi	r5,r5,-21280
   148a4:	1809883a 	mov	r4,r3
   148a8:	00452600 	call	45260 <fprintf>
   148ac:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[5], 30);
   148b0:	e0bdd317 	ldw	r2,-2228(fp)
   148b4:	10800504 	addi	r2,r2,20
   148b8:	10800017 	ldw	r2,0(r2)
   148bc:	1004d7ba 	srli	r2,r2,30
   148c0:	1004c03a 	cmpne	r2,r2,zero
   148c4:	10803fcc 	andi	r2,r2,255
   148c8:	10000d26 	beq	r2,zero,14900 <secp256k1_fe_mul_inner+0x550>
   148cc:	d0a01617 	ldw	r2,-32680(gp)
   148d0:	10c00317 	ldw	r3,12(r2)
   148d4:	008001b4 	movhi	r2,6
   148d8:	10ac2a04 	addi	r2,r2,-20312
   148dc:	d8800015 	stw	r2,0(sp)
   148e0:	01c07444 	movi	r7,465
   148e4:	018001b4 	movhi	r6,6
   148e8:	31ab2d04 	addi	r6,r6,-21324
   148ec:	014001b4 	movhi	r5,6
   148f0:	296b3804 	addi	r5,r5,-21280
   148f4:	1809883a 	mov	r4,r3
   148f8:	00452600 	call	45260 <fprintf>
   148fc:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[6], 30);
   14900:	e0bdd317 	ldw	r2,-2228(fp)
   14904:	10800604 	addi	r2,r2,24
   14908:	10800017 	ldw	r2,0(r2)
   1490c:	1004d7ba 	srli	r2,r2,30
   14910:	1004c03a 	cmpne	r2,r2,zero
   14914:	10803fcc 	andi	r2,r2,255
   14918:	10000d26 	beq	r2,zero,14950 <secp256k1_fe_mul_inner+0x5a0>
   1491c:	d0a01617 	ldw	r2,-32680(gp)
   14920:	10c00317 	ldw	r3,12(r2)
   14924:	008001b4 	movhi	r2,6
   14928:	10ac3604 	addi	r2,r2,-20264
   1492c:	d8800015 	stw	r2,0(sp)
   14930:	01c07484 	movi	r7,466
   14934:	018001b4 	movhi	r6,6
   14938:	31ab2d04 	addi	r6,r6,-21324
   1493c:	014001b4 	movhi	r5,6
   14940:	296b3804 	addi	r5,r5,-21280
   14944:	1809883a 	mov	r4,r3
   14948:	00452600 	call	45260 <fprintf>
   1494c:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[7], 30);
   14950:	e0bdd317 	ldw	r2,-2228(fp)
   14954:	10800704 	addi	r2,r2,28
   14958:	10800017 	ldw	r2,0(r2)
   1495c:	1004d7ba 	srli	r2,r2,30
   14960:	1004c03a 	cmpne	r2,r2,zero
   14964:	10803fcc 	andi	r2,r2,255
   14968:	10000d26 	beq	r2,zero,149a0 <secp256k1_fe_mul_inner+0x5f0>
   1496c:	d0a01617 	ldw	r2,-32680(gp)
   14970:	10c00317 	ldw	r3,12(r2)
   14974:	008001b4 	movhi	r2,6
   14978:	10ac4204 	addi	r2,r2,-20216
   1497c:	d8800015 	stw	r2,0(sp)
   14980:	01c074c4 	movi	r7,467
   14984:	018001b4 	movhi	r6,6
   14988:	31ab2d04 	addi	r6,r6,-21324
   1498c:	014001b4 	movhi	r5,6
   14990:	296b3804 	addi	r5,r5,-21280
   14994:	1809883a 	mov	r4,r3
   14998:	00452600 	call	45260 <fprintf>
   1499c:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[8], 30);
   149a0:	e0bdd317 	ldw	r2,-2228(fp)
   149a4:	10800804 	addi	r2,r2,32
   149a8:	10800017 	ldw	r2,0(r2)
   149ac:	1004d7ba 	srli	r2,r2,30
   149b0:	1004c03a 	cmpne	r2,r2,zero
   149b4:	10803fcc 	andi	r2,r2,255
   149b8:	10000d26 	beq	r2,zero,149f0 <secp256k1_fe_mul_inner+0x640>
   149bc:	d0a01617 	ldw	r2,-32680(gp)
   149c0:	10c00317 	ldw	r3,12(r2)
   149c4:	008001b4 	movhi	r2,6
   149c8:	10ac4e04 	addi	r2,r2,-20168
   149cc:	d8800015 	stw	r2,0(sp)
   149d0:	01c07504 	movi	r7,468
   149d4:	018001b4 	movhi	r6,6
   149d8:	31ab2d04 	addi	r6,r6,-21324
   149dc:	014001b4 	movhi	r5,6
   149e0:	296b3804 	addi	r5,r5,-21280
   149e4:	1809883a 	mov	r4,r3
   149e8:	00452600 	call	45260 <fprintf>
   149ec:	00450340 	call	45034 <abort>
    VERIFY_BITS(b[9], 26);
   149f0:	e0bdd317 	ldw	r2,-2228(fp)
   149f4:	10800904 	addi	r2,r2,36
   149f8:	10800017 	ldw	r2,0(r2)
   149fc:	1004d6ba 	srli	r2,r2,26
   14a00:	1004c03a 	cmpne	r2,r2,zero
   14a04:	10803fcc 	andi	r2,r2,255
   14a08:	10000d26 	beq	r2,zero,14a40 <secp256k1_fe_mul_inner+0x690>
   14a0c:	d0a01617 	ldw	r2,-32680(gp)
   14a10:	10c00317 	ldw	r3,12(r2)
   14a14:	008001b4 	movhi	r2,6
   14a18:	10ac5a04 	addi	r2,r2,-20120
   14a1c:	d8800015 	stw	r2,0(sp)
   14a20:	01c07544 	movi	r7,469
   14a24:	018001b4 	movhi	r6,6
   14a28:	31ab2d04 	addi	r6,r6,-21324
   14a2c:	014001b4 	movhi	r5,6
   14a30:	296b3804 	addi	r5,r5,-21280
   14a34:	1809883a 	mov	r4,r3
   14a38:	00452600 	call	45260 <fprintf>
   14a3c:	00450340 	call	45034 <abort>
    /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.
     *  px is a shorthand for sum(a[i]*b[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)a[0] * b[9]
   14a40:	e0bdd217 	ldw	r2,-2232(fp)
   14a44:	10800017 	ldw	r2,0(r2)
   14a48:	1013883a 	mov	r9,r2
   14a4c:	0015883a 	mov	r10,zero
   14a50:	e0bdd317 	ldw	r2,-2228(fp)
   14a54:	10800904 	addi	r2,r2,36
   14a58:	10800017 	ldw	r2,0(r2)
   14a5c:	100f883a 	mov	r7,r2
   14a60:	0011883a 	mov	r8,zero
   14a64:	380d883a 	mov	r6,r7
   14a68:	400f883a 	mov	r7,r8
   14a6c:	4809883a 	mov	r4,r9
   14a70:	500b883a 	mov	r5,r10
   14a74:	00429400 	call	42940 <__muldi3>
   14a78:	1009883a 	mov	r4,r2
   14a7c:	180b883a 	mov	r5,r3
   14a80:	2021883a 	mov	r16,r4
   14a84:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[8]
   14a88:	e0bdd217 	ldw	r2,-2232(fp)
   14a8c:	10800104 	addi	r2,r2,4
   14a90:	10800017 	ldw	r2,0(r2)
   14a94:	e0bdd415 	stw	r2,-2224(fp)
   14a98:	e03dd515 	stw	zero,-2220(fp)
   14a9c:	e0bdd317 	ldw	r2,-2228(fp)
   14aa0:	10800804 	addi	r2,r2,32
   14aa4:	10800017 	ldw	r2,0(r2)
   14aa8:	1025883a 	mov	r18,r2
   14aac:	0027883a 	mov	r19,zero
   14ab0:	900d883a 	mov	r6,r18
   14ab4:	980f883a 	mov	r7,r19
   14ab8:	e13dd417 	ldw	r4,-2224(fp)
   14abc:	e17dd517 	ldw	r5,-2220(fp)
   14ac0:	00429400 	call	42940 <__muldi3>
   14ac4:	100f883a 	mov	r7,r2
   14ac8:	1811883a 	mov	r8,r3
   14acc:	380b883a 	mov	r5,r7
   14ad0:	400d883a 	mov	r6,r8
   14ad4:	8145883a 	add	r2,r16,r5
   14ad8:	1409803a 	cmpltu	r4,r2,r16
   14adc:	8987883a 	add	r3,r17,r6
   14ae0:	20c9883a 	add	r4,r4,r3
   14ae4:	2007883a 	mov	r3,r4
   14ae8:	1025883a 	mov	r18,r2
   14aec:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[7]
       + (uint64_t)a[3] * b[6]
   14af0:	e0bdd217 	ldw	r2,-2232(fp)
   14af4:	10800304 	addi	r2,r2,12
   14af8:	10800017 	ldw	r2,0(r2)
   14afc:	e0bdd615 	stw	r2,-2216(fp)
   14b00:	e03dd715 	stw	zero,-2212(fp)
   14b04:	e0bdd317 	ldw	r2,-2228(fp)
   14b08:	10800604 	addi	r2,r2,24
   14b0c:	10800017 	ldw	r2,0(r2)
   14b10:	e0bdd815 	stw	r2,-2208(fp)
   14b14:	e03dd915 	stw	zero,-2204(fp)
   14b18:	e1bdd817 	ldw	r6,-2208(fp)
   14b1c:	e1fdd917 	ldw	r7,-2204(fp)
   14b20:	e13dd617 	ldw	r4,-2216(fp)
   14b24:	e17dd717 	ldw	r5,-2212(fp)
   14b28:	00429400 	call	42940 <__muldi3>
   14b2c:	1009883a 	mov	r4,r2
   14b30:	180b883a 	mov	r5,r3
   14b34:	2021883a 	mov	r16,r4
   14b38:	2823883a 	mov	r17,r5
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)a[0] * b[9]
       + (uint64_t)a[1] * b[8]
       + (uint64_t)a[2] * b[7]
   14b3c:	e0bdd217 	ldw	r2,-2232(fp)
   14b40:	10800204 	addi	r2,r2,8
   14b44:	10800017 	ldw	r2,0(r2)
   14b48:	e0bdda15 	stw	r2,-2200(fp)
   14b4c:	e03ddb15 	stw	zero,-2196(fp)
   14b50:	e0bdd317 	ldw	r2,-2228(fp)
   14b54:	10800704 	addi	r2,r2,28
   14b58:	10800017 	ldw	r2,0(r2)
   14b5c:	e0bddc15 	stw	r2,-2192(fp)
   14b60:	e03ddd15 	stw	zero,-2188(fp)
   14b64:	e1bddc17 	ldw	r6,-2192(fp)
   14b68:	e1fddd17 	ldw	r7,-2188(fp)
   14b6c:	e13dda17 	ldw	r4,-2200(fp)
   14b70:	e17ddb17 	ldw	r5,-2196(fp)
   14b74:	00429400 	call	42940 <__muldi3>
   14b78:	100f883a 	mov	r7,r2
   14b7c:	1811883a 	mov	r8,r3
   14b80:	380b883a 	mov	r5,r7
   14b84:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[6]
   14b88:	8145883a 	add	r2,r16,r5
   14b8c:	1409803a 	cmpltu	r4,r2,r16
   14b90:	8987883a 	add	r3,r17,r6
   14b94:	20c9883a 	add	r4,r4,r3
   14b98:	2007883a 	mov	r3,r4
   14b9c:	100b883a 	mov	r5,r2
   14ba0:	180d883a 	mov	r6,r3
   14ba4:	9145883a 	add	r2,r18,r5
   14ba8:	1489803a 	cmpltu	r4,r2,r18
   14bac:	9987883a 	add	r3,r19,r6
   14bb0:	20c9883a 	add	r4,r4,r3
   14bb4:	2007883a 	mov	r3,r4
   14bb8:	1025883a 	mov	r18,r2
   14bbc:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[5]
       + (uint64_t)a[5] * b[4]
   14bc0:	e0bdd217 	ldw	r2,-2232(fp)
   14bc4:	10800504 	addi	r2,r2,20
   14bc8:	10800017 	ldw	r2,0(r2)
   14bcc:	e0bdde15 	stw	r2,-2184(fp)
   14bd0:	e03ddf15 	stw	zero,-2180(fp)
   14bd4:	e0bdd317 	ldw	r2,-2228(fp)
   14bd8:	10800404 	addi	r2,r2,16
   14bdc:	10800017 	ldw	r2,0(r2)
   14be0:	e0bde015 	stw	r2,-2176(fp)
   14be4:	e03de115 	stw	zero,-2172(fp)
   14be8:	e1bde017 	ldw	r6,-2176(fp)
   14bec:	e1fde117 	ldw	r7,-2172(fp)
   14bf0:	e13dde17 	ldw	r4,-2184(fp)
   14bf4:	e17ddf17 	ldw	r5,-2180(fp)
   14bf8:	00429400 	call	42940 <__muldi3>
   14bfc:	1009883a 	mov	r4,r2
   14c00:	180b883a 	mov	r5,r3
   14c04:	2021883a 	mov	r16,r4
   14c08:	2823883a 	mov	r17,r5

    d  = (uint64_t)a[0] * b[9]
       + (uint64_t)a[1] * b[8]
       + (uint64_t)a[2] * b[7]
       + (uint64_t)a[3] * b[6]
       + (uint64_t)a[4] * b[5]
   14c0c:	e0bdd217 	ldw	r2,-2232(fp)
   14c10:	10800404 	addi	r2,r2,16
   14c14:	10800017 	ldw	r2,0(r2)
   14c18:	e0bde215 	stw	r2,-2168(fp)
   14c1c:	e03de315 	stw	zero,-2164(fp)
   14c20:	e0bdd317 	ldw	r2,-2228(fp)
   14c24:	10800504 	addi	r2,r2,20
   14c28:	10800017 	ldw	r2,0(r2)
   14c2c:	e0bde415 	stw	r2,-2160(fp)
   14c30:	e03de515 	stw	zero,-2156(fp)
   14c34:	e1bde417 	ldw	r6,-2160(fp)
   14c38:	e1fde517 	ldw	r7,-2156(fp)
   14c3c:	e13de217 	ldw	r4,-2168(fp)
   14c40:	e17de317 	ldw	r5,-2164(fp)
   14c44:	00429400 	call	42940 <__muldi3>
   14c48:	100f883a 	mov	r7,r2
   14c4c:	1811883a 	mov	r8,r3
   14c50:	380b883a 	mov	r5,r7
   14c54:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[4]
   14c58:	8145883a 	add	r2,r16,r5
   14c5c:	1409803a 	cmpltu	r4,r2,r16
   14c60:	8987883a 	add	r3,r17,r6
   14c64:	20c9883a 	add	r4,r4,r3
   14c68:	2007883a 	mov	r3,r4
   14c6c:	100b883a 	mov	r5,r2
   14c70:	180d883a 	mov	r6,r3
   14c74:	9145883a 	add	r2,r18,r5
   14c78:	1489803a 	cmpltu	r4,r2,r18
   14c7c:	9987883a 	add	r3,r19,r6
   14c80:	20c9883a 	add	r4,r4,r3
   14c84:	2007883a 	mov	r3,r4
   14c88:	1025883a 	mov	r18,r2
   14c8c:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[3]
       + (uint64_t)a[7] * b[2]
   14c90:	e0bdd217 	ldw	r2,-2232(fp)
   14c94:	10800704 	addi	r2,r2,28
   14c98:	10800017 	ldw	r2,0(r2)
   14c9c:	e0bde615 	stw	r2,-2152(fp)
   14ca0:	e03de715 	stw	zero,-2148(fp)
   14ca4:	e0bdd317 	ldw	r2,-2228(fp)
   14ca8:	10800204 	addi	r2,r2,8
   14cac:	10800017 	ldw	r2,0(r2)
   14cb0:	e0bde815 	stw	r2,-2144(fp)
   14cb4:	e03de915 	stw	zero,-2140(fp)
   14cb8:	e1bde817 	ldw	r6,-2144(fp)
   14cbc:	e1fde917 	ldw	r7,-2140(fp)
   14cc0:	e13de617 	ldw	r4,-2152(fp)
   14cc4:	e17de717 	ldw	r5,-2148(fp)
   14cc8:	00429400 	call	42940 <__muldi3>
   14ccc:	1009883a 	mov	r4,r2
   14cd0:	180b883a 	mov	r5,r3
   14cd4:	2021883a 	mov	r16,r4
   14cd8:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[8]
       + (uint64_t)a[2] * b[7]
       + (uint64_t)a[3] * b[6]
       + (uint64_t)a[4] * b[5]
       + (uint64_t)a[5] * b[4]
       + (uint64_t)a[6] * b[3]
   14cdc:	e0bdd217 	ldw	r2,-2232(fp)
   14ce0:	10800604 	addi	r2,r2,24
   14ce4:	10800017 	ldw	r2,0(r2)
   14ce8:	e0bdea15 	stw	r2,-2136(fp)
   14cec:	e03deb15 	stw	zero,-2132(fp)
   14cf0:	e0bdd317 	ldw	r2,-2228(fp)
   14cf4:	10800304 	addi	r2,r2,12
   14cf8:	10800017 	ldw	r2,0(r2)
   14cfc:	e0bdec15 	stw	r2,-2128(fp)
   14d00:	e03ded15 	stw	zero,-2124(fp)
   14d04:	e1bdec17 	ldw	r6,-2128(fp)
   14d08:	e1fded17 	ldw	r7,-2124(fp)
   14d0c:	e13dea17 	ldw	r4,-2136(fp)
   14d10:	e17deb17 	ldw	r5,-2132(fp)
   14d14:	00429400 	call	42940 <__muldi3>
   14d18:	100f883a 	mov	r7,r2
   14d1c:	1811883a 	mov	r8,r3
   14d20:	380b883a 	mov	r5,r7
   14d24:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[2]
   14d28:	8145883a 	add	r2,r16,r5
   14d2c:	1409803a 	cmpltu	r4,r2,r16
   14d30:	8987883a 	add	r3,r17,r6
   14d34:	20c9883a 	add	r4,r4,r3
   14d38:	2007883a 	mov	r3,r4
   14d3c:	100b883a 	mov	r5,r2
   14d40:	180d883a 	mov	r6,r3
   14d44:	9145883a 	add	r2,r18,r5
   14d48:	1489803a 	cmpltu	r4,r2,r18
   14d4c:	9987883a 	add	r3,r19,r6
   14d50:	20c9883a 	add	r4,r4,r3
   14d54:	2007883a 	mov	r3,r4
   14d58:	1025883a 	mov	r18,r2
   14d5c:	1827883a 	mov	r19,r3
       + (uint64_t)a[8] * b[1]
       + (uint64_t)a[9] * b[0];
   14d60:	e0bdd217 	ldw	r2,-2232(fp)
   14d64:	10800904 	addi	r2,r2,36
   14d68:	10800017 	ldw	r2,0(r2)
   14d6c:	e0bdee15 	stw	r2,-2120(fp)
   14d70:	e03def15 	stw	zero,-2116(fp)
   14d74:	e0bdd317 	ldw	r2,-2228(fp)
   14d78:	10800017 	ldw	r2,0(r2)
   14d7c:	e0bdf015 	stw	r2,-2112(fp)
   14d80:	e03df115 	stw	zero,-2108(fp)
   14d84:	e1bdf017 	ldw	r6,-2112(fp)
   14d88:	e1fdf117 	ldw	r7,-2108(fp)
   14d8c:	e13dee17 	ldw	r4,-2120(fp)
   14d90:	e17def17 	ldw	r5,-2116(fp)
   14d94:	00429400 	call	42940 <__muldi3>
   14d98:	1009883a 	mov	r4,r2
   14d9c:	180b883a 	mov	r5,r3
   14da0:	2021883a 	mov	r16,r4
   14da4:	2823883a 	mov	r17,r5
       + (uint64_t)a[3] * b[6]
       + (uint64_t)a[4] * b[5]
       + (uint64_t)a[5] * b[4]
       + (uint64_t)a[6] * b[3]
       + (uint64_t)a[7] * b[2]
       + (uint64_t)a[8] * b[1]
   14da8:	e0bdd217 	ldw	r2,-2232(fp)
   14dac:	10800804 	addi	r2,r2,32
   14db0:	10800017 	ldw	r2,0(r2)
   14db4:	e0bdf215 	stw	r2,-2104(fp)
   14db8:	e03df315 	stw	zero,-2100(fp)
   14dbc:	e0bdd317 	ldw	r2,-2228(fp)
   14dc0:	10800104 	addi	r2,r2,4
   14dc4:	10800017 	ldw	r2,0(r2)
   14dc8:	e0bdf415 	stw	r2,-2096(fp)
   14dcc:	e03df515 	stw	zero,-2092(fp)
   14dd0:	e1bdf417 	ldw	r6,-2096(fp)
   14dd4:	e1fdf517 	ldw	r7,-2092(fp)
   14dd8:	e13df217 	ldw	r4,-2104(fp)
   14ddc:	e17df317 	ldw	r5,-2100(fp)
   14de0:	00429400 	call	42940 <__muldi3>
   14de4:	100f883a 	mov	r7,r2
   14de8:	1811883a 	mov	r8,r3
   14dec:	380b883a 	mov	r5,r7
   14df0:	400d883a 	mov	r6,r8
       + (uint64_t)a[9] * b[0];
   14df4:	8145883a 	add	r2,r16,r5
   14df8:	1409803a 	cmpltu	r4,r2,r16
   14dfc:	8987883a 	add	r3,r17,r6
   14e00:	20c9883a 	add	r4,r4,r3
   14e04:	2007883a 	mov	r3,r4
   14e08:	100b883a 	mov	r5,r2
   14e0c:	180d883a 	mov	r6,r3
    /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.
     *  px is a shorthand for sum(a[i]*b[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)a[0] * b[9]
   14e10:	9145883a 	add	r2,r18,r5
   14e14:	1489803a 	cmpltu	r4,r2,r18
   14e18:	9987883a 	add	r3,r19,r6
   14e1c:	20c9883a 	add	r4,r4,r3
   14e20:	2007883a 	mov	r3,r4
   14e24:	e0bdb215 	stw	r2,-2360(fp)
   14e28:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[7] * b[2]
       + (uint64_t)a[8] * b[1]
       + (uint64_t)a[9] * b[0];
    /* VERIFY_BITS(d, 64); */
    /* [d 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */
    t9 = d & M; d >>= 26;
   14e2c:	e0fdb217 	ldw	r3,-2360(fp)
   14e30:	e0bdaf17 	ldw	r2,-2372(fp)
   14e34:	1884703a 	and	r2,r3,r2
   14e38:	e0bdb415 	stw	r2,-2352(fp)
   14e3c:	e0bdb317 	ldw	r2,-2356(fp)
   14e40:	100691ba 	slli	r3,r2,6
   14e44:	e0bdb217 	ldw	r2,-2360(fp)
   14e48:	1004d6ba 	srli	r2,r2,26
   14e4c:	10c4b03a 	or	r2,r2,r3
   14e50:	e0bdb215 	stw	r2,-2360(fp)
   14e54:	e0bdb317 	ldw	r2,-2356(fp)
   14e58:	1004d6ba 	srli	r2,r2,26
   14e5c:	e0bdb315 	stw	r2,-2356(fp)
    VERIFY_BITS(t9, 26);
   14e60:	e0bdb417 	ldw	r2,-2352(fp)
   14e64:	1004d6ba 	srli	r2,r2,26
   14e68:	1004c03a 	cmpne	r2,r2,zero
   14e6c:	10803fcc 	andi	r2,r2,255
   14e70:	10000d26 	beq	r2,zero,14ea8 <secp256k1_fe_mul_inner+0xaf8>
   14e74:	d0a01617 	ldw	r2,-32680(gp)
   14e78:	10c00317 	ldw	r3,12(r2)
   14e7c:	008001b4 	movhi	r2,6
   14e80:	10ac6604 	addi	r2,r2,-20072
   14e84:	d8800015 	stw	r2,0(sp)
   14e88:	01c07a44 	movi	r7,489
   14e8c:	018001b4 	movhi	r6,6
   14e90:	31ab2d04 	addi	r6,r6,-21324
   14e94:	014001b4 	movhi	r5,6
   14e98:	296b3804 	addi	r5,r5,-21280
   14e9c:	1809883a 	mov	r4,r3
   14ea0:	00452600 	call	45260 <fprintf>
   14ea4:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 38);
   14ea8:	e0bdb317 	ldw	r2,-2356(fp)
   14eac:	102cd1ba 	srli	r22,r2,6
   14eb0:	002f883a 	mov	r23,zero
   14eb4:	b5c4b03a 	or	r2,r22,r23
   14eb8:	1004c03a 	cmpne	r2,r2,zero
   14ebc:	10803fcc 	andi	r2,r2,255
   14ec0:	10000d26 	beq	r2,zero,14ef8 <secp256k1_fe_mul_inner+0xb48>
   14ec4:	d0a01617 	ldw	r2,-32680(gp)
   14ec8:	10c00317 	ldw	r3,12(r2)
   14ecc:	008001b4 	movhi	r2,6
   14ed0:	10ac7104 	addi	r2,r2,-20028
   14ed4:	d8800015 	stw	r2,0(sp)
   14ed8:	01c07a84 	movi	r7,490
   14edc:	018001b4 	movhi	r6,6
   14ee0:	31ab2d04 	addi	r6,r6,-21324
   14ee4:	014001b4 	movhi	r5,6
   14ee8:	296b3804 	addi	r5,r5,-21280
   14eec:	1809883a 	mov	r4,r3
   14ef0:	00452600 	call	45260 <fprintf>
   14ef4:	00450340 	call	45034 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */

    c  = (uint64_t)a[0] * b[0];
   14ef8:	e0bdd217 	ldw	r2,-2232(fp)
   14efc:	10800017 	ldw	r2,0(r2)
   14f00:	e0bdf615 	stw	r2,-2088(fp)
   14f04:	e03df715 	stw	zero,-2084(fp)
   14f08:	e0bdd317 	ldw	r2,-2228(fp)
   14f0c:	10800017 	ldw	r2,0(r2)
   14f10:	e0bdf815 	stw	r2,-2080(fp)
   14f14:	e03df915 	stw	zero,-2076(fp)
   14f18:	e1bdf817 	ldw	r6,-2080(fp)
   14f1c:	e1fdf917 	ldw	r7,-2076(fp)
   14f20:	e13df617 	ldw	r4,-2088(fp)
   14f24:	e17df717 	ldw	r5,-2084(fp)
   14f28:	00429400 	call	42940 <__muldi3>
   14f2c:	1009883a 	mov	r4,r2
   14f30:	180b883a 	mov	r5,r3
   14f34:	e13db515 	stw	r4,-2348(fp)
   14f38:	e17db615 	stw	r5,-2344(fp)
    VERIFY_BITS(c, 60);
   14f3c:	e0bdb617 	ldw	r2,-2344(fp)
   14f40:	1004d73a 	srli	r2,r2,28
   14f44:	e0bdfa15 	stw	r2,-2072(fp)
   14f48:	e03dfb15 	stw	zero,-2068(fp)
   14f4c:	e0fdfa17 	ldw	r3,-2072(fp)
   14f50:	e13dfb17 	ldw	r4,-2068(fp)
   14f54:	1904b03a 	or	r2,r3,r4
   14f58:	1004c03a 	cmpne	r2,r2,zero
   14f5c:	10803fcc 	andi	r2,r2,255
   14f60:	10000d26 	beq	r2,zero,14f98 <secp256k1_fe_mul_inner+0xbe8>
   14f64:	d0a01617 	ldw	r2,-32680(gp)
   14f68:	10c00317 	ldw	r3,12(r2)
   14f6c:	008001b4 	movhi	r2,6
   14f70:	10ac7c04 	addi	r2,r2,-19984
   14f74:	d8800015 	stw	r2,0(sp)
   14f78:	01c07b84 	movi	r7,494
   14f7c:	018001b4 	movhi	r6,6
   14f80:	31ab2d04 	addi	r6,r6,-21324
   14f84:	014001b4 	movhi	r5,6
   14f88:	296b3804 	addi	r5,r5,-21280
   14f8c:	1809883a 	mov	r4,r3
   14f90:	00452600 	call	45260 <fprintf>
   14f94:	00450340 	call	45034 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)a[1] * b[9]
   14f98:	e0bdd217 	ldw	r2,-2232(fp)
   14f9c:	10800104 	addi	r2,r2,4
   14fa0:	10800017 	ldw	r2,0(r2)
   14fa4:	e0bdfc15 	stw	r2,-2064(fp)
   14fa8:	e03dfd15 	stw	zero,-2060(fp)
   14fac:	e0bdd317 	ldw	r2,-2228(fp)
   14fb0:	10800904 	addi	r2,r2,36
   14fb4:	10800017 	ldw	r2,0(r2)
   14fb8:	e0bdfe15 	stw	r2,-2056(fp)
   14fbc:	e03dff15 	stw	zero,-2052(fp)
   14fc0:	e1bdfe17 	ldw	r6,-2056(fp)
   14fc4:	e1fdff17 	ldw	r7,-2052(fp)
   14fc8:	e13dfc17 	ldw	r4,-2064(fp)
   14fcc:	e17dfd17 	ldw	r5,-2060(fp)
   14fd0:	00429400 	call	42940 <__muldi3>
   14fd4:	1009883a 	mov	r4,r2
   14fd8:	180b883a 	mov	r5,r3
   14fdc:	2021883a 	mov	r16,r4
   14fe0:	2823883a 	mov	r17,r5
       + (uint64_t)a[2] * b[8]
   14fe4:	e0bdd217 	ldw	r2,-2232(fp)
   14fe8:	10800204 	addi	r2,r2,8
   14fec:	10800017 	ldw	r2,0(r2)
   14ff0:	e0be0015 	stw	r2,-2048(fp)
   14ff4:	e03e0115 	stw	zero,-2044(fp)
   14ff8:	e0bdd317 	ldw	r2,-2228(fp)
   14ffc:	10800804 	addi	r2,r2,32
   15000:	10800017 	ldw	r2,0(r2)
   15004:	e0be0215 	stw	r2,-2040(fp)
   15008:	e03e0315 	stw	zero,-2036(fp)
   1500c:	e1be0217 	ldw	r6,-2040(fp)
   15010:	e1fe0317 	ldw	r7,-2036(fp)
   15014:	e13e0017 	ldw	r4,-2048(fp)
   15018:	e17e0117 	ldw	r5,-2044(fp)
   1501c:	00429400 	call	42940 <__muldi3>
   15020:	100f883a 	mov	r7,r2
   15024:	1811883a 	mov	r8,r3
   15028:	380b883a 	mov	r5,r7
   1502c:	400d883a 	mov	r6,r8
   15030:	8145883a 	add	r2,r16,r5
   15034:	1409803a 	cmpltu	r4,r2,r16
   15038:	8987883a 	add	r3,r17,r6
   1503c:	20c9883a 	add	r4,r4,r3
   15040:	2007883a 	mov	r3,r4
   15044:	1025883a 	mov	r18,r2
   15048:	1827883a 	mov	r19,r3
       + (uint64_t)a[3] * b[7]
       + (uint64_t)a[4] * b[6]
   1504c:	e0bdd217 	ldw	r2,-2232(fp)
   15050:	10800404 	addi	r2,r2,16
   15054:	10800017 	ldw	r2,0(r2)
   15058:	e0be0415 	stw	r2,-2032(fp)
   1505c:	e03e0515 	stw	zero,-2028(fp)
   15060:	e0bdd317 	ldw	r2,-2228(fp)
   15064:	10800604 	addi	r2,r2,24
   15068:	10800017 	ldw	r2,0(r2)
   1506c:	e0be0615 	stw	r2,-2024(fp)
   15070:	e03e0715 	stw	zero,-2020(fp)
   15074:	e1be0617 	ldw	r6,-2024(fp)
   15078:	e1fe0717 	ldw	r7,-2020(fp)
   1507c:	e13e0417 	ldw	r4,-2032(fp)
   15080:	e17e0517 	ldw	r5,-2028(fp)
   15084:	00429400 	call	42940 <__muldi3>
   15088:	1009883a 	mov	r4,r2
   1508c:	180b883a 	mov	r5,r3
   15090:	2021883a 	mov	r16,r4
   15094:	2823883a 	mov	r17,r5
    c  = (uint64_t)a[0] * b[0];
    VERIFY_BITS(c, 60);
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)a[1] * b[9]
       + (uint64_t)a[2] * b[8]
       + (uint64_t)a[3] * b[7]
   15098:	e0bdd217 	ldw	r2,-2232(fp)
   1509c:	10800304 	addi	r2,r2,12
   150a0:	10800017 	ldw	r2,0(r2)
   150a4:	e0be0815 	stw	r2,-2016(fp)
   150a8:	e03e0915 	stw	zero,-2012(fp)
   150ac:	e0bdd317 	ldw	r2,-2228(fp)
   150b0:	10800704 	addi	r2,r2,28
   150b4:	10800017 	ldw	r2,0(r2)
   150b8:	e0be0a15 	stw	r2,-2008(fp)
   150bc:	e03e0b15 	stw	zero,-2004(fp)
   150c0:	e1be0a17 	ldw	r6,-2008(fp)
   150c4:	e1fe0b17 	ldw	r7,-2004(fp)
   150c8:	e13e0817 	ldw	r4,-2016(fp)
   150cc:	e17e0917 	ldw	r5,-2012(fp)
   150d0:	00429400 	call	42940 <__muldi3>
   150d4:	100f883a 	mov	r7,r2
   150d8:	1811883a 	mov	r8,r3
   150dc:	380b883a 	mov	r5,r7
   150e0:	400d883a 	mov	r6,r8
       + (uint64_t)a[4] * b[6]
   150e4:	8145883a 	add	r2,r16,r5
   150e8:	1409803a 	cmpltu	r4,r2,r16
   150ec:	8987883a 	add	r3,r17,r6
   150f0:	20c9883a 	add	r4,r4,r3
   150f4:	2007883a 	mov	r3,r4
   150f8:	100b883a 	mov	r5,r2
   150fc:	180d883a 	mov	r6,r3
   15100:	9145883a 	add	r2,r18,r5
   15104:	1489803a 	cmpltu	r4,r2,r18
   15108:	9987883a 	add	r3,r19,r6
   1510c:	20c9883a 	add	r4,r4,r3
   15110:	2007883a 	mov	r3,r4
   15114:	1025883a 	mov	r18,r2
   15118:	1827883a 	mov	r19,r3
       + (uint64_t)a[5] * b[5]
       + (uint64_t)a[6] * b[4]
   1511c:	e0bdd217 	ldw	r2,-2232(fp)
   15120:	10800604 	addi	r2,r2,24
   15124:	10800017 	ldw	r2,0(r2)
   15128:	e0be0c15 	stw	r2,-2000(fp)
   1512c:	e03e0d15 	stw	zero,-1996(fp)
   15130:	e0bdd317 	ldw	r2,-2228(fp)
   15134:	10800404 	addi	r2,r2,16
   15138:	10800017 	ldw	r2,0(r2)
   1513c:	e0be0e15 	stw	r2,-1992(fp)
   15140:	e03e0f15 	stw	zero,-1988(fp)
   15144:	e1be0e17 	ldw	r6,-1992(fp)
   15148:	e1fe0f17 	ldw	r7,-1988(fp)
   1514c:	e13e0c17 	ldw	r4,-2000(fp)
   15150:	e17e0d17 	ldw	r5,-1996(fp)
   15154:	00429400 	call	42940 <__muldi3>
   15158:	1009883a 	mov	r4,r2
   1515c:	180b883a 	mov	r5,r3
   15160:	2021883a 	mov	r16,r4
   15164:	2823883a 	mov	r17,r5
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)a[1] * b[9]
       + (uint64_t)a[2] * b[8]
       + (uint64_t)a[3] * b[7]
       + (uint64_t)a[4] * b[6]
       + (uint64_t)a[5] * b[5]
   15168:	e0bdd217 	ldw	r2,-2232(fp)
   1516c:	10800504 	addi	r2,r2,20
   15170:	10800017 	ldw	r2,0(r2)
   15174:	e0be1015 	stw	r2,-1984(fp)
   15178:	e03e1115 	stw	zero,-1980(fp)
   1517c:	e0bdd317 	ldw	r2,-2228(fp)
   15180:	10800504 	addi	r2,r2,20
   15184:	10800017 	ldw	r2,0(r2)
   15188:	e0be1215 	stw	r2,-1976(fp)
   1518c:	e03e1315 	stw	zero,-1972(fp)
   15190:	e1be1217 	ldw	r6,-1976(fp)
   15194:	e1fe1317 	ldw	r7,-1972(fp)
   15198:	e13e1017 	ldw	r4,-1984(fp)
   1519c:	e17e1117 	ldw	r5,-1980(fp)
   151a0:	00429400 	call	42940 <__muldi3>
   151a4:	100f883a 	mov	r7,r2
   151a8:	1811883a 	mov	r8,r3
   151ac:	380b883a 	mov	r5,r7
   151b0:	400d883a 	mov	r6,r8
       + (uint64_t)a[6] * b[4]
   151b4:	8145883a 	add	r2,r16,r5
   151b8:	1409803a 	cmpltu	r4,r2,r16
   151bc:	8987883a 	add	r3,r17,r6
   151c0:	20c9883a 	add	r4,r4,r3
   151c4:	2007883a 	mov	r3,r4
   151c8:	100b883a 	mov	r5,r2
   151cc:	180d883a 	mov	r6,r3
   151d0:	9145883a 	add	r2,r18,r5
   151d4:	1489803a 	cmpltu	r4,r2,r18
   151d8:	9987883a 	add	r3,r19,r6
   151dc:	20c9883a 	add	r4,r4,r3
   151e0:	2007883a 	mov	r3,r4
   151e4:	1025883a 	mov	r18,r2
   151e8:	1827883a 	mov	r19,r3
       + (uint64_t)a[7] * b[3]
       + (uint64_t)a[8] * b[2]
   151ec:	e0bdd217 	ldw	r2,-2232(fp)
   151f0:	10800804 	addi	r2,r2,32
   151f4:	10800017 	ldw	r2,0(r2)
   151f8:	e0be1415 	stw	r2,-1968(fp)
   151fc:	e03e1515 	stw	zero,-1964(fp)
   15200:	e0bdd317 	ldw	r2,-2228(fp)
   15204:	10800204 	addi	r2,r2,8
   15208:	10800017 	ldw	r2,0(r2)
   1520c:	e0be1615 	stw	r2,-1960(fp)
   15210:	e03e1715 	stw	zero,-1956(fp)
   15214:	e1be1617 	ldw	r6,-1960(fp)
   15218:	e1fe1717 	ldw	r7,-1956(fp)
   1521c:	e13e1417 	ldw	r4,-1968(fp)
   15220:	e17e1517 	ldw	r5,-1964(fp)
   15224:	00429400 	call	42940 <__muldi3>
   15228:	1009883a 	mov	r4,r2
   1522c:	180b883a 	mov	r5,r3
   15230:	2021883a 	mov	r16,r4
   15234:	2823883a 	mov	r17,r5
       + (uint64_t)a[2] * b[8]
       + (uint64_t)a[3] * b[7]
       + (uint64_t)a[4] * b[6]
       + (uint64_t)a[5] * b[5]
       + (uint64_t)a[6] * b[4]
       + (uint64_t)a[7] * b[3]
   15238:	e0bdd217 	ldw	r2,-2232(fp)
   1523c:	10800704 	addi	r2,r2,28
   15240:	10800017 	ldw	r2,0(r2)
   15244:	e0be1815 	stw	r2,-1952(fp)
   15248:	e03e1915 	stw	zero,-1948(fp)
   1524c:	e0bdd317 	ldw	r2,-2228(fp)
   15250:	10800304 	addi	r2,r2,12
   15254:	10800017 	ldw	r2,0(r2)
   15258:	e0be1a15 	stw	r2,-1944(fp)
   1525c:	e03e1b15 	stw	zero,-1940(fp)
   15260:	e1be1a17 	ldw	r6,-1944(fp)
   15264:	e1fe1b17 	ldw	r7,-1940(fp)
   15268:	e13e1817 	ldw	r4,-1952(fp)
   1526c:	e17e1917 	ldw	r5,-1948(fp)
   15270:	00429400 	call	42940 <__muldi3>
   15274:	100f883a 	mov	r7,r2
   15278:	1811883a 	mov	r8,r3
   1527c:	380b883a 	mov	r5,r7
   15280:	400d883a 	mov	r6,r8
       + (uint64_t)a[8] * b[2]
   15284:	8145883a 	add	r2,r16,r5
   15288:	1409803a 	cmpltu	r4,r2,r16
   1528c:	8987883a 	add	r3,r17,r6
   15290:	20c9883a 	add	r4,r4,r3
   15294:	2007883a 	mov	r3,r4
   15298:	100b883a 	mov	r5,r2
   1529c:	180d883a 	mov	r6,r3
   152a0:	9145883a 	add	r2,r18,r5
   152a4:	1489803a 	cmpltu	r4,r2,r18
   152a8:	9987883a 	add	r3,r19,r6
   152ac:	20c9883a 	add	r4,r4,r3
   152b0:	2007883a 	mov	r3,r4
   152b4:	1021883a 	mov	r16,r2
   152b8:	1823883a 	mov	r17,r3
       + (uint64_t)a[9] * b[1];
   152bc:	e0bdd217 	ldw	r2,-2232(fp)
   152c0:	10800904 	addi	r2,r2,36
   152c4:	10800017 	ldw	r2,0(r2)
   152c8:	e0be1c15 	stw	r2,-1936(fp)
   152cc:	e03e1d15 	stw	zero,-1932(fp)
   152d0:	e0bdd317 	ldw	r2,-2228(fp)
   152d4:	10800104 	addi	r2,r2,4
   152d8:	10800017 	ldw	r2,0(r2)
   152dc:	e0be1e15 	stw	r2,-1928(fp)
   152e0:	e03e1f15 	stw	zero,-1924(fp)
   152e4:	e1be1e17 	ldw	r6,-1928(fp)
   152e8:	e1fe1f17 	ldw	r7,-1924(fp)
   152ec:	e13e1c17 	ldw	r4,-1936(fp)
   152f0:	e17e1d17 	ldw	r5,-1932(fp)
   152f4:	00429400 	call	42940 <__muldi3>
   152f8:	100f883a 	mov	r7,r2
   152fc:	1811883a 	mov	r8,r3
   15300:	380b883a 	mov	r5,r7
   15304:	400d883a 	mov	r6,r8
   15308:	8145883a 	add	r2,r16,r5
   1530c:	1409803a 	cmpltu	r4,r2,r16
   15310:	8987883a 	add	r3,r17,r6
   15314:	20c9883a 	add	r4,r4,r3
   15318:	2007883a 	mov	r3,r4
   1531c:	100f883a 	mov	r7,r2
   15320:	1811883a 	mov	r8,r3
    /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */

    c  = (uint64_t)a[0] * b[0];
    VERIFY_BITS(c, 60);
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)a[1] * b[9]
   15324:	e13db217 	ldw	r4,-2360(fp)
   15328:	e17db317 	ldw	r5,-2356(fp)
   1532c:	21c5883a 	add	r2,r4,r7
   15330:	110d803a 	cmpltu	r6,r2,r4
   15334:	2a07883a 	add	r3,r5,r8
   15338:	30c9883a 	add	r4,r6,r3
   1533c:	2007883a 	mov	r3,r4
   15340:	e0bdb215 	stw	r2,-2360(fp)
   15344:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[5] * b[5]
       + (uint64_t)a[6] * b[4]
       + (uint64_t)a[7] * b[3]
       + (uint64_t)a[8] * b[2]
       + (uint64_t)a[9] * b[1];
    VERIFY_BITS(d, 63);
   15348:	e0bdb217 	ldw	r2,-2360(fp)
   1534c:	e0fdb317 	ldw	r3,-2356(fp)
   15350:	1804d7fa 	srli	r2,r3,31
   15354:	10803fcc 	andi	r2,r2,255
   15358:	10000d26 	beq	r2,zero,15390 <secp256k1_fe_mul_inner+0xfe0>
   1535c:	d0a01617 	ldw	r2,-32680(gp)
   15360:	10c00317 	ldw	r3,12(r2)
   15364:	008001b4 	movhi	r2,6
   15368:	10ac8704 	addi	r2,r2,-19940
   1536c:	d8800015 	stw	r2,0(sp)
   15370:	01c07e44 	movi	r7,505
   15374:	018001b4 	movhi	r6,6
   15378:	31ab2d04 	addi	r6,r6,-21324
   1537c:	014001b4 	movhi	r5,6
   15380:	296b3804 	addi	r5,r5,-21280
   15384:	1809883a 	mov	r4,r3
   15388:	00452600 	call	45260 <fprintf>
   1538c:	00450340 	call	45034 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    u0 = d & M; d >>= 26; c += u0 * R0;
   15390:	e0bdaf17 	ldw	r2,-2372(fp)
   15394:	e0be2015 	stw	r2,-1920(fp)
   15398:	e03e2115 	stw	zero,-1916(fp)
   1539c:	e0bdb217 	ldw	r2,-2360(fp)
   153a0:	e1be2017 	ldw	r6,-1920(fp)
   153a4:	1184703a 	and	r2,r2,r6
   153a8:	e0bdb715 	stw	r2,-2340(fp)
   153ac:	e0bdb317 	ldw	r2,-2356(fp)
   153b0:	e1fe2117 	ldw	r7,-1916(fp)
   153b4:	11c4703a 	and	r2,r2,r7
   153b8:	e0bdb815 	stw	r2,-2336(fp)
   153bc:	e0bdb317 	ldw	r2,-2356(fp)
   153c0:	100691ba 	slli	r3,r2,6
   153c4:	e0bdb217 	ldw	r2,-2360(fp)
   153c8:	1004d6ba 	srli	r2,r2,26
   153cc:	10c4b03a 	or	r2,r2,r3
   153d0:	e0bdb215 	stw	r2,-2360(fp)
   153d4:	e0bdb317 	ldw	r2,-2356(fp)
   153d8:	1004d6ba 	srli	r2,r2,26
   153dc:	e0bdb315 	stw	r2,-2356(fp)
   153e0:	e0bdb017 	ldw	r2,-2368(fp)
   153e4:	e0be2215 	stw	r2,-1912(fp)
   153e8:	e03e2315 	stw	zero,-1908(fp)
   153ec:	e1bdb717 	ldw	r6,-2340(fp)
   153f0:	e1fdb817 	ldw	r7,-2336(fp)
   153f4:	e13e2217 	ldw	r4,-1912(fp)
   153f8:	e17e2317 	ldw	r5,-1908(fp)
   153fc:	00429400 	call	42940 <__muldi3>
   15400:	1009883a 	mov	r4,r2
   15404:	180b883a 	mov	r5,r3
   15408:	200f883a 	mov	r7,r4
   1540c:	2811883a 	mov	r8,r5
   15410:	e13db517 	ldw	r4,-2348(fp)
   15414:	e17db617 	ldw	r5,-2344(fp)
   15418:	21c5883a 	add	r2,r4,r7
   1541c:	110d803a 	cmpltu	r6,r2,r4
   15420:	2a07883a 	add	r3,r5,r8
   15424:	30c9883a 	add	r4,r6,r3
   15428:	2007883a 	mov	r3,r4
   1542c:	e0bdb515 	stw	r2,-2348(fp)
   15430:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u0, 26);
   15434:	e0bdb817 	ldw	r2,-2336(fp)
   15438:	100691ba 	slli	r3,r2,6
   1543c:	e0bdb717 	ldw	r2,-2340(fp)
   15440:	1028d6ba 	srli	r20,r2,26
   15444:	1d28b03a 	or	r20,r3,r20
   15448:	e0bdb817 	ldw	r2,-2336(fp)
   1544c:	102ad6ba 	srli	r21,r2,26
   15450:	a544b03a 	or	r2,r20,r21
   15454:	1004c03a 	cmpne	r2,r2,zero
   15458:	10803fcc 	andi	r2,r2,255
   1545c:	10000d26 	beq	r2,zero,15494 <secp256k1_fe_mul_inner+0x10e4>
   15460:	d0a01617 	ldw	r2,-32680(gp)
   15464:	10c00317 	ldw	r3,12(r2)
   15468:	008001b4 	movhi	r2,6
   1546c:	10ac9204 	addi	r2,r2,-19896
   15470:	d8800015 	stw	r2,0(sp)
   15474:	01c07f04 	movi	r7,508
   15478:	018001b4 	movhi	r6,6
   1547c:	31ab2d04 	addi	r6,r6,-21324
   15480:	014001b4 	movhi	r5,6
   15484:	296b3804 	addi	r5,r5,-21280
   15488:	1809883a 	mov	r4,r3
   1548c:	00452600 	call	45260 <fprintf>
   15490:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 37);
   15494:	e0bdb317 	ldw	r2,-2356(fp)
   15498:	1004d17a 	srli	r2,r2,5
   1549c:	e0be2415 	stw	r2,-1904(fp)
   154a0:	e03e2515 	stw	zero,-1900(fp)
   154a4:	e0fe2417 	ldw	r3,-1904(fp)
   154a8:	e13e2517 	ldw	r4,-1900(fp)
   154ac:	1904b03a 	or	r2,r3,r4
   154b0:	1004c03a 	cmpne	r2,r2,zero
   154b4:	10803fcc 	andi	r2,r2,255
   154b8:	10000d26 	beq	r2,zero,154f0 <secp256k1_fe_mul_inner+0x1140>
   154bc:	d0a01617 	ldw	r2,-32680(gp)
   154c0:	10c00317 	ldw	r3,12(r2)
   154c4:	008001b4 	movhi	r2,6
   154c8:	10ac9d04 	addi	r2,r2,-19852
   154cc:	d8800015 	stw	r2,0(sp)
   154d0:	01c07f44 	movi	r7,509
   154d4:	018001b4 	movhi	r6,6
   154d8:	31ab2d04 	addi	r6,r6,-21324
   154dc:	014001b4 	movhi	r5,6
   154e0:	296b3804 	addi	r5,r5,-21280
   154e4:	1809883a 	mov	r4,r3
   154e8:	00452600 	call	45260 <fprintf>
   154ec:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 61);
   154f0:	e0bdb617 	ldw	r2,-2344(fp)
   154f4:	1004d77a 	srli	r2,r2,29
   154f8:	e0be2615 	stw	r2,-1896(fp)
   154fc:	e03e2715 	stw	zero,-1892(fp)
   15500:	e1be2617 	ldw	r6,-1896(fp)
   15504:	e1fe2717 	ldw	r7,-1892(fp)
   15508:	31c4b03a 	or	r2,r6,r7
   1550c:	1004c03a 	cmpne	r2,r2,zero
   15510:	10803fcc 	andi	r2,r2,255
   15514:	10000d26 	beq	r2,zero,1554c <secp256k1_fe_mul_inner+0x119c>
   15518:	d0a01617 	ldw	r2,-32680(gp)
   1551c:	10c00317 	ldw	r3,12(r2)
   15520:	008001b4 	movhi	r2,6
   15524:	10aca804 	addi	r2,r2,-19808
   15528:	d8800015 	stw	r2,0(sp)
   1552c:	01c07f84 	movi	r7,510
   15530:	018001b4 	movhi	r6,6
   15534:	31ab2d04 	addi	r6,r6,-21324
   15538:	014001b4 	movhi	r5,6
   1553c:	296b3804 	addi	r5,r5,-21280
   15540:	1809883a 	mov	r4,r3
   15544:	00452600 	call	45260 <fprintf>
   15548:	00450340 	call	45034 <abort>
    /* [d u0 t9 0 0 0 0 0 0 0 0 c-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    t0 = c & M; c >>= 26; c += u0 * R1;
   1554c:	e0fdb517 	ldw	r3,-2348(fp)
   15550:	e0bdaf17 	ldw	r2,-2372(fp)
   15554:	1884703a 	and	r2,r3,r2
   15558:	e0bdb915 	stw	r2,-2332(fp)
   1555c:	e0bdb617 	ldw	r2,-2344(fp)
   15560:	100691ba 	slli	r3,r2,6
   15564:	e0bdb517 	ldw	r2,-2348(fp)
   15568:	1004d6ba 	srli	r2,r2,26
   1556c:	10c4b03a 	or	r2,r2,r3
   15570:	e0bdb515 	stw	r2,-2348(fp)
   15574:	e0bdb617 	ldw	r2,-2344(fp)
   15578:	1004d6ba 	srli	r2,r2,26
   1557c:	e0bdb615 	stw	r2,-2344(fp)
   15580:	e0bdb117 	ldw	r2,-2364(fp)
   15584:	e0be2815 	stw	r2,-1888(fp)
   15588:	e03e2915 	stw	zero,-1884(fp)
   1558c:	e1bdb717 	ldw	r6,-2340(fp)
   15590:	e1fdb817 	ldw	r7,-2336(fp)
   15594:	e13e2817 	ldw	r4,-1888(fp)
   15598:	e17e2917 	ldw	r5,-1884(fp)
   1559c:	00429400 	call	42940 <__muldi3>
   155a0:	1009883a 	mov	r4,r2
   155a4:	180b883a 	mov	r5,r3
   155a8:	200f883a 	mov	r7,r4
   155ac:	2811883a 	mov	r8,r5
   155b0:	e13db517 	ldw	r4,-2348(fp)
   155b4:	e17db617 	ldw	r5,-2344(fp)
   155b8:	21c5883a 	add	r2,r4,r7
   155bc:	110d803a 	cmpltu	r6,r2,r4
   155c0:	2a07883a 	add	r3,r5,r8
   155c4:	30c9883a 	add	r4,r6,r3
   155c8:	2007883a 	mov	r3,r4
   155cc:	e0bdb515 	stw	r2,-2348(fp)
   155d0:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t0, 26);
   155d4:	e0bdb917 	ldw	r2,-2332(fp)
   155d8:	1004d6ba 	srli	r2,r2,26
   155dc:	1004c03a 	cmpne	r2,r2,zero
   155e0:	10803fcc 	andi	r2,r2,255
   155e4:	10000d26 	beq	r2,zero,1561c <secp256k1_fe_mul_inner+0x126c>
   155e8:	d0a01617 	ldw	r2,-32680(gp)
   155ec:	10c00317 	ldw	r3,12(r2)
   155f0:	008001b4 	movhi	r2,6
   155f4:	10acb304 	addi	r2,r2,-19764
   155f8:	d8800015 	stw	r2,0(sp)
   155fc:	01c08044 	movi	r7,513
   15600:	018001b4 	movhi	r6,6
   15604:	31ab2d04 	addi	r6,r6,-21324
   15608:	014001b4 	movhi	r5,6
   1560c:	296b3804 	addi	r5,r5,-21280
   15610:	1809883a 	mov	r4,r3
   15614:	00452600 	call	45260 <fprintf>
   15618:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 37);
   1561c:	e0bdb617 	ldw	r2,-2344(fp)
   15620:	1004d17a 	srli	r2,r2,5
   15624:	e0be2a15 	stw	r2,-1880(fp)
   15628:	e03e2b15 	stw	zero,-1876(fp)
   1562c:	e0fe2a17 	ldw	r3,-1880(fp)
   15630:	e13e2b17 	ldw	r4,-1876(fp)
   15634:	1904b03a 	or	r2,r3,r4
   15638:	1004c03a 	cmpne	r2,r2,zero
   1563c:	10803fcc 	andi	r2,r2,255
   15640:	10000d26 	beq	r2,zero,15678 <secp256k1_fe_mul_inner+0x12c8>
   15644:	d0a01617 	ldw	r2,-32680(gp)
   15648:	10c00317 	ldw	r3,12(r2)
   1564c:	008001b4 	movhi	r2,6
   15650:	10acbe04 	addi	r2,r2,-19720
   15654:	d8800015 	stw	r2,0(sp)
   15658:	01c08084 	movi	r7,514
   1565c:	018001b4 	movhi	r6,6
   15660:	31ab2d04 	addi	r6,r6,-21324
   15664:	014001b4 	movhi	r5,6
   15668:	296b3804 	addi	r5,r5,-21280
   1566c:	1809883a 	mov	r4,r3
   15670:	00452600 	call	45260 <fprintf>
   15674:	00450340 	call	45034 <abort>
    /* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */

    c += (uint64_t)a[0] * b[1]
   15678:	e0bdd217 	ldw	r2,-2232(fp)
   1567c:	10800017 	ldw	r2,0(r2)
   15680:	e0be2c15 	stw	r2,-1872(fp)
   15684:	e03e2d15 	stw	zero,-1868(fp)
   15688:	e0bdd317 	ldw	r2,-2228(fp)
   1568c:	10800104 	addi	r2,r2,4
   15690:	10800017 	ldw	r2,0(r2)
   15694:	e0be2e15 	stw	r2,-1864(fp)
   15698:	e03e2f15 	stw	zero,-1860(fp)
   1569c:	e1be2e17 	ldw	r6,-1864(fp)
   156a0:	e1fe2f17 	ldw	r7,-1860(fp)
   156a4:	e13e2c17 	ldw	r4,-1872(fp)
   156a8:	e17e2d17 	ldw	r5,-1868(fp)
   156ac:	00429400 	call	42940 <__muldi3>
   156b0:	1009883a 	mov	r4,r2
   156b4:	180b883a 	mov	r5,r3
   156b8:	2021883a 	mov	r16,r4
   156bc:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[0];
   156c0:	e0bdd217 	ldw	r2,-2232(fp)
   156c4:	10800104 	addi	r2,r2,4
   156c8:	10800017 	ldw	r2,0(r2)
   156cc:	e0be3015 	stw	r2,-1856(fp)
   156d0:	e03e3115 	stw	zero,-1852(fp)
   156d4:	e0bdd317 	ldw	r2,-2228(fp)
   156d8:	10800017 	ldw	r2,0(r2)
   156dc:	e0be3215 	stw	r2,-1848(fp)
   156e0:	e03e3315 	stw	zero,-1844(fp)
   156e4:	e1be3217 	ldw	r6,-1848(fp)
   156e8:	e1fe3317 	ldw	r7,-1844(fp)
   156ec:	e13e3017 	ldw	r4,-1856(fp)
   156f0:	e17e3117 	ldw	r5,-1852(fp)
   156f4:	00429400 	call	42940 <__muldi3>
   156f8:	100f883a 	mov	r7,r2
   156fc:	1811883a 	mov	r8,r3
   15700:	380b883a 	mov	r5,r7
   15704:	400d883a 	mov	r6,r8
   15708:	8145883a 	add	r2,r16,r5
   1570c:	1409803a 	cmpltu	r4,r2,r16
   15710:	8987883a 	add	r3,r17,r6
   15714:	20c9883a 	add	r4,r4,r3
   15718:	2007883a 	mov	r3,r4
   1571c:	100f883a 	mov	r7,r2
   15720:	1811883a 	mov	r8,r3
    VERIFY_BITS(t0, 26);
    VERIFY_BITS(c, 37);
    /* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */

    c += (uint64_t)a[0] * b[1]
   15724:	e13db517 	ldw	r4,-2348(fp)
   15728:	e17db617 	ldw	r5,-2344(fp)
   1572c:	21c5883a 	add	r2,r4,r7
   15730:	110d803a 	cmpltu	r6,r2,r4
   15734:	2a07883a 	add	r3,r5,r8
   15738:	30c9883a 	add	r4,r6,r3
   1573c:	2007883a 	mov	r3,r4
   15740:	e0bdb515 	stw	r2,-2348(fp)
   15744:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[0];
    VERIFY_BITS(c, 62);
   15748:	e0bdb617 	ldw	r2,-2344(fp)
   1574c:	1004d7ba 	srli	r2,r2,30
   15750:	e0be3415 	stw	r2,-1840(fp)
   15754:	e03e3515 	stw	zero,-1836(fp)
   15758:	e1be3417 	ldw	r6,-1840(fp)
   1575c:	e1fe3517 	ldw	r7,-1836(fp)
   15760:	31c4b03a 	or	r2,r6,r7
   15764:	1004c03a 	cmpne	r2,r2,zero
   15768:	10803fcc 	andi	r2,r2,255
   1576c:	10000d26 	beq	r2,zero,157a4 <secp256k1_fe_mul_inner+0x13f4>
   15770:	d0a01617 	ldw	r2,-32680(gp)
   15774:	10c00317 	ldw	r3,12(r2)
   15778:	008001b4 	movhi	r2,6
   1577c:	10acc904 	addi	r2,r2,-19676
   15780:	d8800015 	stw	r2,0(sp)
   15784:	01c08204 	movi	r7,520
   15788:	018001b4 	movhi	r6,6
   1578c:	31ab2d04 	addi	r6,r6,-21324
   15790:	014001b4 	movhi	r5,6
   15794:	296b3804 	addi	r5,r5,-21280
   15798:	1809883a 	mov	r4,r3
   1579c:	00452600 	call	45260 <fprintf>
   157a0:	00450340 	call	45034 <abort>
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)a[2] * b[9]
   157a4:	e0bdd217 	ldw	r2,-2232(fp)
   157a8:	10800204 	addi	r2,r2,8
   157ac:	10800017 	ldw	r2,0(r2)
   157b0:	e0be3615 	stw	r2,-1832(fp)
   157b4:	e03e3715 	stw	zero,-1828(fp)
   157b8:	e0bdd317 	ldw	r2,-2228(fp)
   157bc:	10800904 	addi	r2,r2,36
   157c0:	10800017 	ldw	r2,0(r2)
   157c4:	e0be3815 	stw	r2,-1824(fp)
   157c8:	e03e3915 	stw	zero,-1820(fp)
   157cc:	e1be3817 	ldw	r6,-1824(fp)
   157d0:	e1fe3917 	ldw	r7,-1820(fp)
   157d4:	e13e3617 	ldw	r4,-1832(fp)
   157d8:	e17e3717 	ldw	r5,-1828(fp)
   157dc:	00429400 	call	42940 <__muldi3>
   157e0:	1009883a 	mov	r4,r2
   157e4:	180b883a 	mov	r5,r3
   157e8:	2021883a 	mov	r16,r4
   157ec:	2823883a 	mov	r17,r5
       + (uint64_t)a[3] * b[8]
   157f0:	e0bdd217 	ldw	r2,-2232(fp)
   157f4:	10800304 	addi	r2,r2,12
   157f8:	10800017 	ldw	r2,0(r2)
   157fc:	e0be3a15 	stw	r2,-1816(fp)
   15800:	e03e3b15 	stw	zero,-1812(fp)
   15804:	e0bdd317 	ldw	r2,-2228(fp)
   15808:	10800804 	addi	r2,r2,32
   1580c:	10800017 	ldw	r2,0(r2)
   15810:	e0be3c15 	stw	r2,-1808(fp)
   15814:	e03e3d15 	stw	zero,-1804(fp)
   15818:	e1be3c17 	ldw	r6,-1808(fp)
   1581c:	e1fe3d17 	ldw	r7,-1804(fp)
   15820:	e13e3a17 	ldw	r4,-1816(fp)
   15824:	e17e3b17 	ldw	r5,-1812(fp)
   15828:	00429400 	call	42940 <__muldi3>
   1582c:	100f883a 	mov	r7,r2
   15830:	1811883a 	mov	r8,r3
   15834:	380b883a 	mov	r5,r7
   15838:	400d883a 	mov	r6,r8
   1583c:	8145883a 	add	r2,r16,r5
   15840:	1409803a 	cmpltu	r4,r2,r16
   15844:	8987883a 	add	r3,r17,r6
   15848:	20c9883a 	add	r4,r4,r3
   1584c:	2007883a 	mov	r3,r4
   15850:	1025883a 	mov	r18,r2
   15854:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[7]
       + (uint64_t)a[5] * b[6]
   15858:	e0bdd217 	ldw	r2,-2232(fp)
   1585c:	10800504 	addi	r2,r2,20
   15860:	10800017 	ldw	r2,0(r2)
   15864:	e0be3e15 	stw	r2,-1800(fp)
   15868:	e03e3f15 	stw	zero,-1796(fp)
   1586c:	e0bdd317 	ldw	r2,-2228(fp)
   15870:	10800604 	addi	r2,r2,24
   15874:	10800017 	ldw	r2,0(r2)
   15878:	e0be4015 	stw	r2,-1792(fp)
   1587c:	e03e4115 	stw	zero,-1788(fp)
   15880:	e1be4017 	ldw	r6,-1792(fp)
   15884:	e1fe4117 	ldw	r7,-1788(fp)
   15888:	e13e3e17 	ldw	r4,-1800(fp)
   1588c:	e17e3f17 	ldw	r5,-1796(fp)
   15890:	00429400 	call	42940 <__muldi3>
   15894:	1009883a 	mov	r4,r2
   15898:	180b883a 	mov	r5,r3
   1589c:	2021883a 	mov	r16,r4
   158a0:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[0];
    VERIFY_BITS(c, 62);
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)a[2] * b[9]
       + (uint64_t)a[3] * b[8]
       + (uint64_t)a[4] * b[7]
   158a4:	e0bdd217 	ldw	r2,-2232(fp)
   158a8:	10800404 	addi	r2,r2,16
   158ac:	10800017 	ldw	r2,0(r2)
   158b0:	e0be4215 	stw	r2,-1784(fp)
   158b4:	e03e4315 	stw	zero,-1780(fp)
   158b8:	e0bdd317 	ldw	r2,-2228(fp)
   158bc:	10800704 	addi	r2,r2,28
   158c0:	10800017 	ldw	r2,0(r2)
   158c4:	e0be4415 	stw	r2,-1776(fp)
   158c8:	e03e4515 	stw	zero,-1772(fp)
   158cc:	e1be4417 	ldw	r6,-1776(fp)
   158d0:	e1fe4517 	ldw	r7,-1772(fp)
   158d4:	e13e4217 	ldw	r4,-1784(fp)
   158d8:	e17e4317 	ldw	r5,-1780(fp)
   158dc:	00429400 	call	42940 <__muldi3>
   158e0:	100f883a 	mov	r7,r2
   158e4:	1811883a 	mov	r8,r3
   158e8:	380b883a 	mov	r5,r7
   158ec:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[6]
   158f0:	8145883a 	add	r2,r16,r5
   158f4:	1409803a 	cmpltu	r4,r2,r16
   158f8:	8987883a 	add	r3,r17,r6
   158fc:	20c9883a 	add	r4,r4,r3
   15900:	2007883a 	mov	r3,r4
   15904:	100b883a 	mov	r5,r2
   15908:	180d883a 	mov	r6,r3
   1590c:	9145883a 	add	r2,r18,r5
   15910:	1489803a 	cmpltu	r4,r2,r18
   15914:	9987883a 	add	r3,r19,r6
   15918:	20c9883a 	add	r4,r4,r3
   1591c:	2007883a 	mov	r3,r4
   15920:	1025883a 	mov	r18,r2
   15924:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[5]
       + (uint64_t)a[7] * b[4]
   15928:	e0bdd217 	ldw	r2,-2232(fp)
   1592c:	10800704 	addi	r2,r2,28
   15930:	10800017 	ldw	r2,0(r2)
   15934:	e0be4615 	stw	r2,-1768(fp)
   15938:	e03e4715 	stw	zero,-1764(fp)
   1593c:	e0bdd317 	ldw	r2,-2228(fp)
   15940:	10800404 	addi	r2,r2,16
   15944:	10800017 	ldw	r2,0(r2)
   15948:	e0be4815 	stw	r2,-1760(fp)
   1594c:	e03e4915 	stw	zero,-1756(fp)
   15950:	e1be4817 	ldw	r6,-1760(fp)
   15954:	e1fe4917 	ldw	r7,-1756(fp)
   15958:	e13e4617 	ldw	r4,-1768(fp)
   1595c:	e17e4717 	ldw	r5,-1764(fp)
   15960:	00429400 	call	42940 <__muldi3>
   15964:	1009883a 	mov	r4,r2
   15968:	180b883a 	mov	r5,r3
   1596c:	2021883a 	mov	r16,r4
   15970:	2823883a 	mov	r17,r5
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)a[2] * b[9]
       + (uint64_t)a[3] * b[8]
       + (uint64_t)a[4] * b[7]
       + (uint64_t)a[5] * b[6]
       + (uint64_t)a[6] * b[5]
   15974:	e0bdd217 	ldw	r2,-2232(fp)
   15978:	10800604 	addi	r2,r2,24
   1597c:	10800017 	ldw	r2,0(r2)
   15980:	e0be4a15 	stw	r2,-1752(fp)
   15984:	e03e4b15 	stw	zero,-1748(fp)
   15988:	e0bdd317 	ldw	r2,-2228(fp)
   1598c:	10800504 	addi	r2,r2,20
   15990:	10800017 	ldw	r2,0(r2)
   15994:	e0be4c15 	stw	r2,-1744(fp)
   15998:	e03e4d15 	stw	zero,-1740(fp)
   1599c:	e1be4c17 	ldw	r6,-1744(fp)
   159a0:	e1fe4d17 	ldw	r7,-1740(fp)
   159a4:	e13e4a17 	ldw	r4,-1752(fp)
   159a8:	e17e4b17 	ldw	r5,-1748(fp)
   159ac:	00429400 	call	42940 <__muldi3>
   159b0:	100f883a 	mov	r7,r2
   159b4:	1811883a 	mov	r8,r3
   159b8:	380b883a 	mov	r5,r7
   159bc:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[4]
   159c0:	8145883a 	add	r2,r16,r5
   159c4:	1409803a 	cmpltu	r4,r2,r16
   159c8:	8987883a 	add	r3,r17,r6
   159cc:	20c9883a 	add	r4,r4,r3
   159d0:	2007883a 	mov	r3,r4
   159d4:	100b883a 	mov	r5,r2
   159d8:	180d883a 	mov	r6,r3
   159dc:	9145883a 	add	r2,r18,r5
   159e0:	1489803a 	cmpltu	r4,r2,r18
   159e4:	9987883a 	add	r3,r19,r6
   159e8:	20c9883a 	add	r4,r4,r3
   159ec:	2007883a 	mov	r3,r4
   159f0:	1025883a 	mov	r18,r2
   159f4:	1827883a 	mov	r19,r3
       + (uint64_t)a[8] * b[3]
       + (uint64_t)a[9] * b[2];
   159f8:	e0bdd217 	ldw	r2,-2232(fp)
   159fc:	10800904 	addi	r2,r2,36
   15a00:	10800017 	ldw	r2,0(r2)
   15a04:	e0be4e15 	stw	r2,-1736(fp)
   15a08:	e03e4f15 	stw	zero,-1732(fp)
   15a0c:	e0bdd317 	ldw	r2,-2228(fp)
   15a10:	10800204 	addi	r2,r2,8
   15a14:	10800017 	ldw	r2,0(r2)
   15a18:	e0be5015 	stw	r2,-1728(fp)
   15a1c:	e03e5115 	stw	zero,-1724(fp)
   15a20:	e1be5017 	ldw	r6,-1728(fp)
   15a24:	e1fe5117 	ldw	r7,-1724(fp)
   15a28:	e13e4e17 	ldw	r4,-1736(fp)
   15a2c:	e17e4f17 	ldw	r5,-1732(fp)
   15a30:	00429400 	call	42940 <__muldi3>
   15a34:	1009883a 	mov	r4,r2
   15a38:	180b883a 	mov	r5,r3
   15a3c:	2021883a 	mov	r16,r4
   15a40:	2823883a 	mov	r17,r5
       + (uint64_t)a[3] * b[8]
       + (uint64_t)a[4] * b[7]
       + (uint64_t)a[5] * b[6]
       + (uint64_t)a[6] * b[5]
       + (uint64_t)a[7] * b[4]
       + (uint64_t)a[8] * b[3]
   15a44:	e0bdd217 	ldw	r2,-2232(fp)
   15a48:	10800804 	addi	r2,r2,32
   15a4c:	10800017 	ldw	r2,0(r2)
   15a50:	e0be5215 	stw	r2,-1720(fp)
   15a54:	e03e5315 	stw	zero,-1716(fp)
   15a58:	e0bdd317 	ldw	r2,-2228(fp)
   15a5c:	10800304 	addi	r2,r2,12
   15a60:	10800017 	ldw	r2,0(r2)
   15a64:	e0be5415 	stw	r2,-1712(fp)
   15a68:	e03e5515 	stw	zero,-1708(fp)
   15a6c:	e1be5417 	ldw	r6,-1712(fp)
   15a70:	e1fe5517 	ldw	r7,-1708(fp)
   15a74:	e13e5217 	ldw	r4,-1720(fp)
   15a78:	e17e5317 	ldw	r5,-1716(fp)
   15a7c:	00429400 	call	42940 <__muldi3>
   15a80:	100f883a 	mov	r7,r2
   15a84:	1811883a 	mov	r8,r3
   15a88:	380b883a 	mov	r5,r7
   15a8c:	400d883a 	mov	r6,r8
       + (uint64_t)a[9] * b[2];
   15a90:	8145883a 	add	r2,r16,r5
   15a94:	1409803a 	cmpltu	r4,r2,r16
   15a98:	8987883a 	add	r3,r17,r6
   15a9c:	20c9883a 	add	r4,r4,r3
   15aa0:	2007883a 	mov	r3,r4
   15aa4:	100b883a 	mov	r5,r2
   15aa8:	180d883a 	mov	r6,r3
   15aac:	9145883a 	add	r2,r18,r5
   15ab0:	1489803a 	cmpltu	r4,r2,r18
   15ab4:	9987883a 	add	r3,r19,r6
   15ab8:	20c9883a 	add	r4,r4,r3
   15abc:	2007883a 	mov	r3,r4
   15ac0:	100f883a 	mov	r7,r2
   15ac4:	1811883a 	mov	r8,r3

    c += (uint64_t)a[0] * b[1]
       + (uint64_t)a[1] * b[0];
    VERIFY_BITS(c, 62);
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)a[2] * b[9]
   15ac8:	e13db217 	ldw	r4,-2360(fp)
   15acc:	e17db317 	ldw	r5,-2356(fp)
   15ad0:	21c5883a 	add	r2,r4,r7
   15ad4:	110d803a 	cmpltu	r6,r2,r4
   15ad8:	2a07883a 	add	r3,r5,r8
   15adc:	30c9883a 	add	r4,r6,r3
   15ae0:	2007883a 	mov	r3,r4
   15ae4:	e0bdb215 	stw	r2,-2360(fp)
   15ae8:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[5] * b[6]
       + (uint64_t)a[6] * b[5]
       + (uint64_t)a[7] * b[4]
       + (uint64_t)a[8] * b[3]
       + (uint64_t)a[9] * b[2];
    VERIFY_BITS(d, 63);
   15aec:	e0bdb217 	ldw	r2,-2360(fp)
   15af0:	e0fdb317 	ldw	r3,-2356(fp)
   15af4:	1804d7fa 	srli	r2,r3,31
   15af8:	10803fcc 	andi	r2,r2,255
   15afc:	10000d26 	beq	r2,zero,15b34 <secp256k1_fe_mul_inner+0x1784>
   15b00:	d0a01617 	ldw	r2,-32680(gp)
   15b04:	10c00317 	ldw	r3,12(r2)
   15b08:	008001b4 	movhi	r2,6
   15b0c:	10ac8704 	addi	r2,r2,-19940
   15b10:	d8800015 	stw	r2,0(sp)
   15b14:	01c08484 	movi	r7,530
   15b18:	018001b4 	movhi	r6,6
   15b1c:	31ab2d04 	addi	r6,r6,-21324
   15b20:	014001b4 	movhi	r5,6
   15b24:	296b3804 	addi	r5,r5,-21280
   15b28:	1809883a 	mov	r4,r3
   15b2c:	00452600 	call	45260 <fprintf>
   15b30:	00450340 	call	45034 <abort>
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    u1 = d & M; d >>= 26; c += u1 * R0;
   15b34:	e0bdaf17 	ldw	r2,-2372(fp)
   15b38:	e0be5615 	stw	r2,-1704(fp)
   15b3c:	e03e5715 	stw	zero,-1700(fp)
   15b40:	e0bdb217 	ldw	r2,-2360(fp)
   15b44:	e0fe5617 	ldw	r3,-1704(fp)
   15b48:	10c4703a 	and	r2,r2,r3
   15b4c:	e0bdba15 	stw	r2,-2328(fp)
   15b50:	e0bdb317 	ldw	r2,-2356(fp)
   15b54:	e13e5717 	ldw	r4,-1700(fp)
   15b58:	1104703a 	and	r2,r2,r4
   15b5c:	e0bdbb15 	stw	r2,-2324(fp)
   15b60:	e0bdb317 	ldw	r2,-2356(fp)
   15b64:	100691ba 	slli	r3,r2,6
   15b68:	e0bdb217 	ldw	r2,-2360(fp)
   15b6c:	1004d6ba 	srli	r2,r2,26
   15b70:	10c4b03a 	or	r2,r2,r3
   15b74:	e0bdb215 	stw	r2,-2360(fp)
   15b78:	e0bdb317 	ldw	r2,-2356(fp)
   15b7c:	1004d6ba 	srli	r2,r2,26
   15b80:	e0bdb315 	stw	r2,-2356(fp)
   15b84:	e0bdb017 	ldw	r2,-2368(fp)
   15b88:	e0be5815 	stw	r2,-1696(fp)
   15b8c:	e03e5915 	stw	zero,-1692(fp)
   15b90:	e1bdba17 	ldw	r6,-2328(fp)
   15b94:	e1fdbb17 	ldw	r7,-2324(fp)
   15b98:	e13e5817 	ldw	r4,-1696(fp)
   15b9c:	e17e5917 	ldw	r5,-1692(fp)
   15ba0:	00429400 	call	42940 <__muldi3>
   15ba4:	1009883a 	mov	r4,r2
   15ba8:	180b883a 	mov	r5,r3
   15bac:	200f883a 	mov	r7,r4
   15bb0:	2811883a 	mov	r8,r5
   15bb4:	e13db517 	ldw	r4,-2348(fp)
   15bb8:	e17db617 	ldw	r5,-2344(fp)
   15bbc:	21c5883a 	add	r2,r4,r7
   15bc0:	110d803a 	cmpltu	r6,r2,r4
   15bc4:	2a07883a 	add	r3,r5,r8
   15bc8:	30c9883a 	add	r4,r6,r3
   15bcc:	2007883a 	mov	r3,r4
   15bd0:	e0bdb515 	stw	r2,-2348(fp)
   15bd4:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u1, 26);
   15bd8:	e0bdbb17 	ldw	r2,-2324(fp)
   15bdc:	100691ba 	slli	r3,r2,6
   15be0:	e0bdba17 	ldw	r2,-2328(fp)
   15be4:	1004d6ba 	srli	r2,r2,26
   15be8:	e0be5a15 	stw	r2,-1688(fp)
   15bec:	e1be5a17 	ldw	r6,-1688(fp)
   15bf0:	1986b03a 	or	r3,r3,r6
   15bf4:	e0fe5a15 	stw	r3,-1688(fp)
   15bf8:	e0bdbb17 	ldw	r2,-2324(fp)
   15bfc:	1004d6ba 	srli	r2,r2,26
   15c00:	e0be5b15 	stw	r2,-1684(fp)
   15c04:	e1fe5a17 	ldw	r7,-1688(fp)
   15c08:	e0fe5b17 	ldw	r3,-1684(fp)
   15c0c:	38c4b03a 	or	r2,r7,r3
   15c10:	1004c03a 	cmpne	r2,r2,zero
   15c14:	10803fcc 	andi	r2,r2,255
   15c18:	10000d26 	beq	r2,zero,15c50 <secp256k1_fe_mul_inner+0x18a0>
   15c1c:	d0a01617 	ldw	r2,-32680(gp)
   15c20:	10c00317 	ldw	r3,12(r2)
   15c24:	008001b4 	movhi	r2,6
   15c28:	10acd404 	addi	r2,r2,-19632
   15c2c:	d8800015 	stw	r2,0(sp)
   15c30:	01c08544 	movi	r7,533
   15c34:	018001b4 	movhi	r6,6
   15c38:	31ab2d04 	addi	r6,r6,-21324
   15c3c:	014001b4 	movhi	r5,6
   15c40:	296b3804 	addi	r5,r5,-21280
   15c44:	1809883a 	mov	r4,r3
   15c48:	00452600 	call	45260 <fprintf>
   15c4c:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 37);
   15c50:	e0bdb317 	ldw	r2,-2356(fp)
   15c54:	1004d17a 	srli	r2,r2,5
   15c58:	e0be5c15 	stw	r2,-1680(fp)
   15c5c:	e03e5d15 	stw	zero,-1676(fp)
   15c60:	e13e5c17 	ldw	r4,-1680(fp)
   15c64:	e1be5d17 	ldw	r6,-1676(fp)
   15c68:	2184b03a 	or	r2,r4,r6
   15c6c:	1004c03a 	cmpne	r2,r2,zero
   15c70:	10803fcc 	andi	r2,r2,255
   15c74:	10000d26 	beq	r2,zero,15cac <secp256k1_fe_mul_inner+0x18fc>
   15c78:	d0a01617 	ldw	r2,-32680(gp)
   15c7c:	10c00317 	ldw	r3,12(r2)
   15c80:	008001b4 	movhi	r2,6
   15c84:	10ac9d04 	addi	r2,r2,-19852
   15c88:	d8800015 	stw	r2,0(sp)
   15c8c:	01c08584 	movi	r7,534
   15c90:	018001b4 	movhi	r6,6
   15c94:	31ab2d04 	addi	r6,r6,-21324
   15c98:	014001b4 	movhi	r5,6
   15c9c:	296b3804 	addi	r5,r5,-21280
   15ca0:	1809883a 	mov	r4,r3
   15ca4:	00452600 	call	45260 <fprintf>
   15ca8:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 63);
   15cac:	e0bdb517 	ldw	r2,-2348(fp)
   15cb0:	e0fdb617 	ldw	r3,-2344(fp)
   15cb4:	1804d7fa 	srli	r2,r3,31
   15cb8:	10803fcc 	andi	r2,r2,255
   15cbc:	10000d26 	beq	r2,zero,15cf4 <secp256k1_fe_mul_inner+0x1944>
   15cc0:	d0a01617 	ldw	r2,-32680(gp)
   15cc4:	10c00317 	ldw	r3,12(r2)
   15cc8:	008001b4 	movhi	r2,6
   15ccc:	10acdf04 	addi	r2,r2,-19588
   15cd0:	d8800015 	stw	r2,0(sp)
   15cd4:	01c085c4 	movi	r7,535
   15cd8:	018001b4 	movhi	r6,6
   15cdc:	31ab2d04 	addi	r6,r6,-21324
   15ce0:	014001b4 	movhi	r5,6
   15ce4:	296b3804 	addi	r5,r5,-21280
   15ce8:	1809883a 	mov	r4,r3
   15cec:	00452600 	call	45260 <fprintf>
   15cf0:	00450340 	call	45034 <abort>
    /* [d u1 0 t9 0 0 0 0 0 0 0 c-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    t1 = c & M; c >>= 26; c += u1 * R1;
   15cf4:	e0fdb517 	ldw	r3,-2348(fp)
   15cf8:	e0bdaf17 	ldw	r2,-2372(fp)
   15cfc:	1884703a 	and	r2,r3,r2
   15d00:	e0bdbc15 	stw	r2,-2320(fp)
   15d04:	e0bdb617 	ldw	r2,-2344(fp)
   15d08:	100691ba 	slli	r3,r2,6
   15d0c:	e0bdb517 	ldw	r2,-2348(fp)
   15d10:	1004d6ba 	srli	r2,r2,26
   15d14:	10c4b03a 	or	r2,r2,r3
   15d18:	e0bdb515 	stw	r2,-2348(fp)
   15d1c:	e0bdb617 	ldw	r2,-2344(fp)
   15d20:	1004d6ba 	srli	r2,r2,26
   15d24:	e0bdb615 	stw	r2,-2344(fp)
   15d28:	e0bdb117 	ldw	r2,-2364(fp)
   15d2c:	e0be5e15 	stw	r2,-1672(fp)
   15d30:	e03e5f15 	stw	zero,-1668(fp)
   15d34:	e1bdba17 	ldw	r6,-2328(fp)
   15d38:	e1fdbb17 	ldw	r7,-2324(fp)
   15d3c:	e13e5e17 	ldw	r4,-1672(fp)
   15d40:	e17e5f17 	ldw	r5,-1668(fp)
   15d44:	00429400 	call	42940 <__muldi3>
   15d48:	1009883a 	mov	r4,r2
   15d4c:	180b883a 	mov	r5,r3
   15d50:	200f883a 	mov	r7,r4
   15d54:	2811883a 	mov	r8,r5
   15d58:	e13db517 	ldw	r4,-2348(fp)
   15d5c:	e17db617 	ldw	r5,-2344(fp)
   15d60:	21c5883a 	add	r2,r4,r7
   15d64:	110d803a 	cmpltu	r6,r2,r4
   15d68:	2a07883a 	add	r3,r5,r8
   15d6c:	30c9883a 	add	r4,r6,r3
   15d70:	2007883a 	mov	r3,r4
   15d74:	e0bdb515 	stw	r2,-2348(fp)
   15d78:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t1, 26);
   15d7c:	e0bdbc17 	ldw	r2,-2320(fp)
   15d80:	1004d6ba 	srli	r2,r2,26
   15d84:	1004c03a 	cmpne	r2,r2,zero
   15d88:	10803fcc 	andi	r2,r2,255
   15d8c:	10000d26 	beq	r2,zero,15dc4 <secp256k1_fe_mul_inner+0x1a14>
   15d90:	d0a01617 	ldw	r2,-32680(gp)
   15d94:	10c00317 	ldw	r3,12(r2)
   15d98:	008001b4 	movhi	r2,6
   15d9c:	10acea04 	addi	r2,r2,-19544
   15da0:	d8800015 	stw	r2,0(sp)
   15da4:	01c08684 	movi	r7,538
   15da8:	018001b4 	movhi	r6,6
   15dac:	31ab2d04 	addi	r6,r6,-21324
   15db0:	014001b4 	movhi	r5,6
   15db4:	296b3804 	addi	r5,r5,-21280
   15db8:	1809883a 	mov	r4,r3
   15dbc:	00452600 	call	45260 <fprintf>
   15dc0:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 38);
   15dc4:	e0bdb617 	ldw	r2,-2344(fp)
   15dc8:	1004d1ba 	srli	r2,r2,6
   15dcc:	e0be6015 	stw	r2,-1664(fp)
   15dd0:	e03e6115 	stw	zero,-1660(fp)
   15dd4:	e1fe6017 	ldw	r7,-1664(fp)
   15dd8:	e0fe6117 	ldw	r3,-1660(fp)
   15ddc:	38c4b03a 	or	r2,r7,r3
   15de0:	1004c03a 	cmpne	r2,r2,zero
   15de4:	10803fcc 	andi	r2,r2,255
   15de8:	10000d26 	beq	r2,zero,15e20 <secp256k1_fe_mul_inner+0x1a70>
   15dec:	d0a01617 	ldw	r2,-32680(gp)
   15df0:	10c00317 	ldw	r3,12(r2)
   15df4:	008001b4 	movhi	r2,6
   15df8:	10acf504 	addi	r2,r2,-19500
   15dfc:	d8800015 	stw	r2,0(sp)
   15e00:	01c086c4 	movi	r7,539
   15e04:	018001b4 	movhi	r6,6
   15e08:	31ab2d04 	addi	r6,r6,-21324
   15e0c:	014001b4 	movhi	r5,6
   15e10:	296b3804 	addi	r5,r5,-21280
   15e14:	1809883a 	mov	r4,r3
   15e18:	00452600 	call	45260 <fprintf>
   15e1c:	00450340 	call	45034 <abort>
    /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */

    c += (uint64_t)a[0] * b[2]
   15e20:	e0bdd217 	ldw	r2,-2232(fp)
   15e24:	10800017 	ldw	r2,0(r2)
   15e28:	e0be6215 	stw	r2,-1656(fp)
   15e2c:	e03e6315 	stw	zero,-1652(fp)
   15e30:	e0bdd317 	ldw	r2,-2228(fp)
   15e34:	10800204 	addi	r2,r2,8
   15e38:	10800017 	ldw	r2,0(r2)
   15e3c:	e0be6415 	stw	r2,-1648(fp)
   15e40:	e03e6515 	stw	zero,-1644(fp)
   15e44:	e1be6417 	ldw	r6,-1648(fp)
   15e48:	e1fe6517 	ldw	r7,-1644(fp)
   15e4c:	e13e6217 	ldw	r4,-1656(fp)
   15e50:	e17e6317 	ldw	r5,-1652(fp)
   15e54:	00429400 	call	42940 <__muldi3>
   15e58:	1009883a 	mov	r4,r2
   15e5c:	180b883a 	mov	r5,r3
   15e60:	2021883a 	mov	r16,r4
   15e64:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[1]
   15e68:	e0bdd217 	ldw	r2,-2232(fp)
   15e6c:	10800104 	addi	r2,r2,4
   15e70:	10800017 	ldw	r2,0(r2)
   15e74:	e0be6615 	stw	r2,-1640(fp)
   15e78:	e03e6715 	stw	zero,-1636(fp)
   15e7c:	e0bdd317 	ldw	r2,-2228(fp)
   15e80:	10800104 	addi	r2,r2,4
   15e84:	10800017 	ldw	r2,0(r2)
   15e88:	e0be6815 	stw	r2,-1632(fp)
   15e8c:	e03e6915 	stw	zero,-1628(fp)
   15e90:	e1be6817 	ldw	r6,-1632(fp)
   15e94:	e1fe6917 	ldw	r7,-1628(fp)
   15e98:	e13e6617 	ldw	r4,-1640(fp)
   15e9c:	e17e6717 	ldw	r5,-1636(fp)
   15ea0:	00429400 	call	42940 <__muldi3>
   15ea4:	100f883a 	mov	r7,r2
   15ea8:	1811883a 	mov	r8,r3
   15eac:	380b883a 	mov	r5,r7
   15eb0:	400d883a 	mov	r6,r8
   15eb4:	8145883a 	add	r2,r16,r5
   15eb8:	1409803a 	cmpltu	r4,r2,r16
   15ebc:	8987883a 	add	r3,r17,r6
   15ec0:	20c9883a 	add	r4,r4,r3
   15ec4:	2007883a 	mov	r3,r4
   15ec8:	1021883a 	mov	r16,r2
   15ecc:	1823883a 	mov	r17,r3
       + (uint64_t)a[2] * b[0];
   15ed0:	e0bdd217 	ldw	r2,-2232(fp)
   15ed4:	10800204 	addi	r2,r2,8
   15ed8:	10800017 	ldw	r2,0(r2)
   15edc:	e0be6a15 	stw	r2,-1624(fp)
   15ee0:	e03e6b15 	stw	zero,-1620(fp)
   15ee4:	e0bdd317 	ldw	r2,-2228(fp)
   15ee8:	10800017 	ldw	r2,0(r2)
   15eec:	e0be6c15 	stw	r2,-1616(fp)
   15ef0:	e03e6d15 	stw	zero,-1612(fp)
   15ef4:	e1be6c17 	ldw	r6,-1616(fp)
   15ef8:	e1fe6d17 	ldw	r7,-1612(fp)
   15efc:	e13e6a17 	ldw	r4,-1624(fp)
   15f00:	e17e6b17 	ldw	r5,-1620(fp)
   15f04:	00429400 	call	42940 <__muldi3>
   15f08:	100f883a 	mov	r7,r2
   15f0c:	1811883a 	mov	r8,r3
   15f10:	380b883a 	mov	r5,r7
   15f14:	400d883a 	mov	r6,r8
   15f18:	8145883a 	add	r2,r16,r5
   15f1c:	1409803a 	cmpltu	r4,r2,r16
   15f20:	8987883a 	add	r3,r17,r6
   15f24:	20c9883a 	add	r4,r4,r3
   15f28:	2007883a 	mov	r3,r4
   15f2c:	100f883a 	mov	r7,r2
   15f30:	1811883a 	mov	r8,r3
    VERIFY_BITS(t1, 26);
    VERIFY_BITS(c, 38);
    /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */

    c += (uint64_t)a[0] * b[2]
   15f34:	e13db517 	ldw	r4,-2348(fp)
   15f38:	e17db617 	ldw	r5,-2344(fp)
   15f3c:	21c5883a 	add	r2,r4,r7
   15f40:	110d803a 	cmpltu	r6,r2,r4
   15f44:	2a07883a 	add	r3,r5,r8
   15f48:	30c9883a 	add	r4,r6,r3
   15f4c:	2007883a 	mov	r3,r4
   15f50:	e0bdb515 	stw	r2,-2348(fp)
   15f54:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[1]
       + (uint64_t)a[2] * b[0];
    VERIFY_BITS(c, 62);
   15f58:	e0bdb617 	ldw	r2,-2344(fp)
   15f5c:	1004d7ba 	srli	r2,r2,30
   15f60:	e0be6e15 	stw	r2,-1608(fp)
   15f64:	e03e6f15 	stw	zero,-1604(fp)
   15f68:	e13e6e17 	ldw	r4,-1608(fp)
   15f6c:	e1be6f17 	ldw	r6,-1604(fp)
   15f70:	2184b03a 	or	r2,r4,r6
   15f74:	1004c03a 	cmpne	r2,r2,zero
   15f78:	10803fcc 	andi	r2,r2,255
   15f7c:	10000d26 	beq	r2,zero,15fb4 <secp256k1_fe_mul_inner+0x1c04>
   15f80:	d0a01617 	ldw	r2,-32680(gp)
   15f84:	10c00317 	ldw	r3,12(r2)
   15f88:	008001b4 	movhi	r2,6
   15f8c:	10acc904 	addi	r2,r2,-19676
   15f90:	d8800015 	stw	r2,0(sp)
   15f94:	01c08884 	movi	r7,546
   15f98:	018001b4 	movhi	r6,6
   15f9c:	31ab2d04 	addi	r6,r6,-21324
   15fa0:	014001b4 	movhi	r5,6
   15fa4:	296b3804 	addi	r5,r5,-21280
   15fa8:	1809883a 	mov	r4,r3
   15fac:	00452600 	call	45260 <fprintf>
   15fb0:	00450340 	call	45034 <abort>
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)a[3] * b[9]
   15fb4:	e0bdd217 	ldw	r2,-2232(fp)
   15fb8:	10800304 	addi	r2,r2,12
   15fbc:	10800017 	ldw	r2,0(r2)
   15fc0:	e0be7015 	stw	r2,-1600(fp)
   15fc4:	e03e7115 	stw	zero,-1596(fp)
   15fc8:	e0bdd317 	ldw	r2,-2228(fp)
   15fcc:	10800904 	addi	r2,r2,36
   15fd0:	10800017 	ldw	r2,0(r2)
   15fd4:	e0be7215 	stw	r2,-1592(fp)
   15fd8:	e03e7315 	stw	zero,-1588(fp)
   15fdc:	e1be7217 	ldw	r6,-1592(fp)
   15fe0:	e1fe7317 	ldw	r7,-1588(fp)
   15fe4:	e13e7017 	ldw	r4,-1600(fp)
   15fe8:	e17e7117 	ldw	r5,-1596(fp)
   15fec:	00429400 	call	42940 <__muldi3>
   15ff0:	1009883a 	mov	r4,r2
   15ff4:	180b883a 	mov	r5,r3
   15ff8:	2021883a 	mov	r16,r4
   15ffc:	2823883a 	mov	r17,r5
       + (uint64_t)a[4] * b[8]
   16000:	e0bdd217 	ldw	r2,-2232(fp)
   16004:	10800404 	addi	r2,r2,16
   16008:	10800017 	ldw	r2,0(r2)
   1600c:	e0be7415 	stw	r2,-1584(fp)
   16010:	e03e7515 	stw	zero,-1580(fp)
   16014:	e0bdd317 	ldw	r2,-2228(fp)
   16018:	10800804 	addi	r2,r2,32
   1601c:	10800017 	ldw	r2,0(r2)
   16020:	e0be7615 	stw	r2,-1576(fp)
   16024:	e03e7715 	stw	zero,-1572(fp)
   16028:	e1be7617 	ldw	r6,-1576(fp)
   1602c:	e1fe7717 	ldw	r7,-1572(fp)
   16030:	e13e7417 	ldw	r4,-1584(fp)
   16034:	e17e7517 	ldw	r5,-1580(fp)
   16038:	00429400 	call	42940 <__muldi3>
   1603c:	100f883a 	mov	r7,r2
   16040:	1811883a 	mov	r8,r3
   16044:	380b883a 	mov	r5,r7
   16048:	400d883a 	mov	r6,r8
   1604c:	8145883a 	add	r2,r16,r5
   16050:	1409803a 	cmpltu	r4,r2,r16
   16054:	8987883a 	add	r3,r17,r6
   16058:	20c9883a 	add	r4,r4,r3
   1605c:	2007883a 	mov	r3,r4
   16060:	1025883a 	mov	r18,r2
   16064:	1827883a 	mov	r19,r3
       + (uint64_t)a[5] * b[7]
       + (uint64_t)a[6] * b[6]
   16068:	e0bdd217 	ldw	r2,-2232(fp)
   1606c:	10800604 	addi	r2,r2,24
   16070:	10800017 	ldw	r2,0(r2)
   16074:	e0be7815 	stw	r2,-1568(fp)
   16078:	e03e7915 	stw	zero,-1564(fp)
   1607c:	e0bdd317 	ldw	r2,-2228(fp)
   16080:	10800604 	addi	r2,r2,24
   16084:	10800017 	ldw	r2,0(r2)
   16088:	e0be7a15 	stw	r2,-1560(fp)
   1608c:	e03e7b15 	stw	zero,-1556(fp)
   16090:	e1be7a17 	ldw	r6,-1560(fp)
   16094:	e1fe7b17 	ldw	r7,-1556(fp)
   16098:	e13e7817 	ldw	r4,-1568(fp)
   1609c:	e17e7917 	ldw	r5,-1564(fp)
   160a0:	00429400 	call	42940 <__muldi3>
   160a4:	1009883a 	mov	r4,r2
   160a8:	180b883a 	mov	r5,r3
   160ac:	2021883a 	mov	r16,r4
   160b0:	2823883a 	mov	r17,r5
       + (uint64_t)a[2] * b[0];
    VERIFY_BITS(c, 62);
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)a[3] * b[9]
       + (uint64_t)a[4] * b[8]
       + (uint64_t)a[5] * b[7]
   160b4:	e0bdd217 	ldw	r2,-2232(fp)
   160b8:	10800504 	addi	r2,r2,20
   160bc:	10800017 	ldw	r2,0(r2)
   160c0:	e0be7c15 	stw	r2,-1552(fp)
   160c4:	e03e7d15 	stw	zero,-1548(fp)
   160c8:	e0bdd317 	ldw	r2,-2228(fp)
   160cc:	10800704 	addi	r2,r2,28
   160d0:	10800017 	ldw	r2,0(r2)
   160d4:	e0be7e15 	stw	r2,-1544(fp)
   160d8:	e03e7f15 	stw	zero,-1540(fp)
   160dc:	e1be7e17 	ldw	r6,-1544(fp)
   160e0:	e1fe7f17 	ldw	r7,-1540(fp)
   160e4:	e13e7c17 	ldw	r4,-1552(fp)
   160e8:	e17e7d17 	ldw	r5,-1548(fp)
   160ec:	00429400 	call	42940 <__muldi3>
   160f0:	100f883a 	mov	r7,r2
   160f4:	1811883a 	mov	r8,r3
   160f8:	380b883a 	mov	r5,r7
   160fc:	400d883a 	mov	r6,r8
       + (uint64_t)a[6] * b[6]
   16100:	8145883a 	add	r2,r16,r5
   16104:	1409803a 	cmpltu	r4,r2,r16
   16108:	8987883a 	add	r3,r17,r6
   1610c:	20c9883a 	add	r4,r4,r3
   16110:	2007883a 	mov	r3,r4
   16114:	100b883a 	mov	r5,r2
   16118:	180d883a 	mov	r6,r3
   1611c:	9145883a 	add	r2,r18,r5
   16120:	1489803a 	cmpltu	r4,r2,r18
   16124:	9987883a 	add	r3,r19,r6
   16128:	20c9883a 	add	r4,r4,r3
   1612c:	2007883a 	mov	r3,r4
   16130:	1025883a 	mov	r18,r2
   16134:	1827883a 	mov	r19,r3
       + (uint64_t)a[7] * b[5]
       + (uint64_t)a[8] * b[4]
   16138:	e0bdd217 	ldw	r2,-2232(fp)
   1613c:	10800804 	addi	r2,r2,32
   16140:	10800017 	ldw	r2,0(r2)
   16144:	e0be8015 	stw	r2,-1536(fp)
   16148:	e03e8115 	stw	zero,-1532(fp)
   1614c:	e0bdd317 	ldw	r2,-2228(fp)
   16150:	10800404 	addi	r2,r2,16
   16154:	10800017 	ldw	r2,0(r2)
   16158:	e0be8215 	stw	r2,-1528(fp)
   1615c:	e03e8315 	stw	zero,-1524(fp)
   16160:	e1be8217 	ldw	r6,-1528(fp)
   16164:	e1fe8317 	ldw	r7,-1524(fp)
   16168:	e13e8017 	ldw	r4,-1536(fp)
   1616c:	e17e8117 	ldw	r5,-1532(fp)
   16170:	00429400 	call	42940 <__muldi3>
   16174:	1009883a 	mov	r4,r2
   16178:	180b883a 	mov	r5,r3
   1617c:	2021883a 	mov	r16,r4
   16180:	2823883a 	mov	r17,r5
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)a[3] * b[9]
       + (uint64_t)a[4] * b[8]
       + (uint64_t)a[5] * b[7]
       + (uint64_t)a[6] * b[6]
       + (uint64_t)a[7] * b[5]
   16184:	e0bdd217 	ldw	r2,-2232(fp)
   16188:	10800704 	addi	r2,r2,28
   1618c:	10800017 	ldw	r2,0(r2)
   16190:	e0be8415 	stw	r2,-1520(fp)
   16194:	e03e8515 	stw	zero,-1516(fp)
   16198:	e0bdd317 	ldw	r2,-2228(fp)
   1619c:	10800504 	addi	r2,r2,20
   161a0:	10800017 	ldw	r2,0(r2)
   161a4:	e0be8615 	stw	r2,-1512(fp)
   161a8:	e03e8715 	stw	zero,-1508(fp)
   161ac:	e1be8617 	ldw	r6,-1512(fp)
   161b0:	e1fe8717 	ldw	r7,-1508(fp)
   161b4:	e13e8417 	ldw	r4,-1520(fp)
   161b8:	e17e8517 	ldw	r5,-1516(fp)
   161bc:	00429400 	call	42940 <__muldi3>
   161c0:	100f883a 	mov	r7,r2
   161c4:	1811883a 	mov	r8,r3
   161c8:	380b883a 	mov	r5,r7
   161cc:	400d883a 	mov	r6,r8
       + (uint64_t)a[8] * b[4]
   161d0:	8145883a 	add	r2,r16,r5
   161d4:	1409803a 	cmpltu	r4,r2,r16
   161d8:	8987883a 	add	r3,r17,r6
   161dc:	20c9883a 	add	r4,r4,r3
   161e0:	2007883a 	mov	r3,r4
   161e4:	100b883a 	mov	r5,r2
   161e8:	180d883a 	mov	r6,r3
   161ec:	9145883a 	add	r2,r18,r5
   161f0:	1489803a 	cmpltu	r4,r2,r18
   161f4:	9987883a 	add	r3,r19,r6
   161f8:	20c9883a 	add	r4,r4,r3
   161fc:	2007883a 	mov	r3,r4
   16200:	1021883a 	mov	r16,r2
   16204:	1823883a 	mov	r17,r3
       + (uint64_t)a[9] * b[3];
   16208:	e0bdd217 	ldw	r2,-2232(fp)
   1620c:	10800904 	addi	r2,r2,36
   16210:	10800017 	ldw	r2,0(r2)
   16214:	e0be8815 	stw	r2,-1504(fp)
   16218:	e03e8915 	stw	zero,-1500(fp)
   1621c:	e0bdd317 	ldw	r2,-2228(fp)
   16220:	10800304 	addi	r2,r2,12
   16224:	10800017 	ldw	r2,0(r2)
   16228:	e0be8a15 	stw	r2,-1496(fp)
   1622c:	e03e8b15 	stw	zero,-1492(fp)
   16230:	e1be8a17 	ldw	r6,-1496(fp)
   16234:	e1fe8b17 	ldw	r7,-1492(fp)
   16238:	e13e8817 	ldw	r4,-1504(fp)
   1623c:	e17e8917 	ldw	r5,-1500(fp)
   16240:	00429400 	call	42940 <__muldi3>
   16244:	100f883a 	mov	r7,r2
   16248:	1811883a 	mov	r8,r3
   1624c:	380b883a 	mov	r5,r7
   16250:	400d883a 	mov	r6,r8
   16254:	8145883a 	add	r2,r16,r5
   16258:	1409803a 	cmpltu	r4,r2,r16
   1625c:	8987883a 	add	r3,r17,r6
   16260:	20c9883a 	add	r4,r4,r3
   16264:	2007883a 	mov	r3,r4
   16268:	100f883a 	mov	r7,r2
   1626c:	1811883a 	mov	r8,r3
    c += (uint64_t)a[0] * b[2]
       + (uint64_t)a[1] * b[1]
       + (uint64_t)a[2] * b[0];
    VERIFY_BITS(c, 62);
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)a[3] * b[9]
   16270:	e13db217 	ldw	r4,-2360(fp)
   16274:	e17db317 	ldw	r5,-2356(fp)
   16278:	21c5883a 	add	r2,r4,r7
   1627c:	110d803a 	cmpltu	r6,r2,r4
   16280:	2a07883a 	add	r3,r5,r8
   16284:	30c9883a 	add	r4,r6,r3
   16288:	2007883a 	mov	r3,r4
   1628c:	e0bdb215 	stw	r2,-2360(fp)
   16290:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[5] * b[7]
       + (uint64_t)a[6] * b[6]
       + (uint64_t)a[7] * b[5]
       + (uint64_t)a[8] * b[4]
       + (uint64_t)a[9] * b[3];
    VERIFY_BITS(d, 63);
   16294:	e0bdb217 	ldw	r2,-2360(fp)
   16298:	e0fdb317 	ldw	r3,-2356(fp)
   1629c:	1804d7fa 	srli	r2,r3,31
   162a0:	10803fcc 	andi	r2,r2,255
   162a4:	10000d26 	beq	r2,zero,162dc <secp256k1_fe_mul_inner+0x1f2c>
   162a8:	d0a01617 	ldw	r2,-32680(gp)
   162ac:	10c00317 	ldw	r3,12(r2)
   162b0:	008001b4 	movhi	r2,6
   162b4:	10ac8704 	addi	r2,r2,-19940
   162b8:	d8800015 	stw	r2,0(sp)
   162bc:	01c08ac4 	movi	r7,555
   162c0:	018001b4 	movhi	r6,6
   162c4:	31ab2d04 	addi	r6,r6,-21324
   162c8:	014001b4 	movhi	r5,6
   162cc:	296b3804 	addi	r5,r5,-21280
   162d0:	1809883a 	mov	r4,r3
   162d4:	00452600 	call	45260 <fprintf>
   162d8:	00450340 	call	45034 <abort>
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    u2 = d & M; d >>= 26; c += u2 * R0;
   162dc:	e0bdaf17 	ldw	r2,-2372(fp)
   162e0:	e0be8c15 	stw	r2,-1488(fp)
   162e4:	e03e8d15 	stw	zero,-1484(fp)
   162e8:	e0bdb217 	ldw	r2,-2360(fp)
   162ec:	e1fe8c17 	ldw	r7,-1488(fp)
   162f0:	11c4703a 	and	r2,r2,r7
   162f4:	e0bdbd15 	stw	r2,-2316(fp)
   162f8:	e0bdb317 	ldw	r2,-2356(fp)
   162fc:	e0fe8d17 	ldw	r3,-1484(fp)
   16300:	10c4703a 	and	r2,r2,r3
   16304:	e0bdbe15 	stw	r2,-2312(fp)
   16308:	e0bdb317 	ldw	r2,-2356(fp)
   1630c:	100691ba 	slli	r3,r2,6
   16310:	e0bdb217 	ldw	r2,-2360(fp)
   16314:	1004d6ba 	srli	r2,r2,26
   16318:	10c4b03a 	or	r2,r2,r3
   1631c:	e0bdb215 	stw	r2,-2360(fp)
   16320:	e0bdb317 	ldw	r2,-2356(fp)
   16324:	1004d6ba 	srli	r2,r2,26
   16328:	e0bdb315 	stw	r2,-2356(fp)
   1632c:	e0bdb017 	ldw	r2,-2368(fp)
   16330:	e0be8e15 	stw	r2,-1480(fp)
   16334:	e03e8f15 	stw	zero,-1476(fp)
   16338:	e1bdbd17 	ldw	r6,-2316(fp)
   1633c:	e1fdbe17 	ldw	r7,-2312(fp)
   16340:	e13e8e17 	ldw	r4,-1480(fp)
   16344:	e17e8f17 	ldw	r5,-1476(fp)
   16348:	00429400 	call	42940 <__muldi3>
   1634c:	1009883a 	mov	r4,r2
   16350:	180b883a 	mov	r5,r3
   16354:	200f883a 	mov	r7,r4
   16358:	2811883a 	mov	r8,r5
   1635c:	e13db517 	ldw	r4,-2348(fp)
   16360:	e17db617 	ldw	r5,-2344(fp)
   16364:	21c5883a 	add	r2,r4,r7
   16368:	110d803a 	cmpltu	r6,r2,r4
   1636c:	2a07883a 	add	r3,r5,r8
   16370:	30c9883a 	add	r4,r6,r3
   16374:	2007883a 	mov	r3,r4
   16378:	e0bdb515 	stw	r2,-2348(fp)
   1637c:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u2, 26);
   16380:	e0bdbe17 	ldw	r2,-2312(fp)
   16384:	100691ba 	slli	r3,r2,6
   16388:	e0bdbd17 	ldw	r2,-2316(fp)
   1638c:	1004d6ba 	srli	r2,r2,26
   16390:	e0be9015 	stw	r2,-1472(fp)
   16394:	e13e9017 	ldw	r4,-1472(fp)
   16398:	1906b03a 	or	r3,r3,r4
   1639c:	e0fe9015 	stw	r3,-1472(fp)
   163a0:	e0bdbe17 	ldw	r2,-2312(fp)
   163a4:	1004d6ba 	srli	r2,r2,26
   163a8:	e0be9115 	stw	r2,-1468(fp)
   163ac:	e1be9017 	ldw	r6,-1472(fp)
   163b0:	e1fe9117 	ldw	r7,-1468(fp)
   163b4:	31c4b03a 	or	r2,r6,r7
   163b8:	1004c03a 	cmpne	r2,r2,zero
   163bc:	10803fcc 	andi	r2,r2,255
   163c0:	10000d26 	beq	r2,zero,163f8 <secp256k1_fe_mul_inner+0x2048>
   163c4:	d0a01617 	ldw	r2,-32680(gp)
   163c8:	10c00317 	ldw	r3,12(r2)
   163cc:	008001b4 	movhi	r2,6
   163d0:	10ad0004 	addi	r2,r2,-19456
   163d4:	d8800015 	stw	r2,0(sp)
   163d8:	01c08b84 	movi	r7,558
   163dc:	018001b4 	movhi	r6,6
   163e0:	31ab2d04 	addi	r6,r6,-21324
   163e4:	014001b4 	movhi	r5,6
   163e8:	296b3804 	addi	r5,r5,-21280
   163ec:	1809883a 	mov	r4,r3
   163f0:	00452600 	call	45260 <fprintf>
   163f4:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 37);
   163f8:	e0bdb317 	ldw	r2,-2356(fp)
   163fc:	1004d17a 	srli	r2,r2,5
   16400:	e0be9215 	stw	r2,-1464(fp)
   16404:	e03e9315 	stw	zero,-1460(fp)
   16408:	e0fe9217 	ldw	r3,-1464(fp)
   1640c:	e13e9317 	ldw	r4,-1460(fp)
   16410:	1904b03a 	or	r2,r3,r4
   16414:	1004c03a 	cmpne	r2,r2,zero
   16418:	10803fcc 	andi	r2,r2,255
   1641c:	10000d26 	beq	r2,zero,16454 <secp256k1_fe_mul_inner+0x20a4>
   16420:	d0a01617 	ldw	r2,-32680(gp)
   16424:	10c00317 	ldw	r3,12(r2)
   16428:	008001b4 	movhi	r2,6
   1642c:	10ac9d04 	addi	r2,r2,-19852
   16430:	d8800015 	stw	r2,0(sp)
   16434:	01c08bc4 	movi	r7,559
   16438:	018001b4 	movhi	r6,6
   1643c:	31ab2d04 	addi	r6,r6,-21324
   16440:	014001b4 	movhi	r5,6
   16444:	296b3804 	addi	r5,r5,-21280
   16448:	1809883a 	mov	r4,r3
   1644c:	00452600 	call	45260 <fprintf>
   16450:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 63);
   16454:	e0bdb517 	ldw	r2,-2348(fp)
   16458:	e0fdb617 	ldw	r3,-2344(fp)
   1645c:	1804d7fa 	srli	r2,r3,31
   16460:	10803fcc 	andi	r2,r2,255
   16464:	10000d26 	beq	r2,zero,1649c <secp256k1_fe_mul_inner+0x20ec>
   16468:	d0a01617 	ldw	r2,-32680(gp)
   1646c:	10c00317 	ldw	r3,12(r2)
   16470:	008001b4 	movhi	r2,6
   16474:	10acdf04 	addi	r2,r2,-19588
   16478:	d8800015 	stw	r2,0(sp)
   1647c:	01c08c04 	movi	r7,560
   16480:	018001b4 	movhi	r6,6
   16484:	31ab2d04 	addi	r6,r6,-21324
   16488:	014001b4 	movhi	r5,6
   1648c:	296b3804 	addi	r5,r5,-21280
   16490:	1809883a 	mov	r4,r3
   16494:	00452600 	call	45260 <fprintf>
   16498:	00450340 	call	45034 <abort>
    /* [d u2 0 0 t9 0 0 0 0 0 0 c-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    t2 = c & M; c >>= 26; c += u2 * R1;
   1649c:	e0fdb517 	ldw	r3,-2348(fp)
   164a0:	e0bdaf17 	ldw	r2,-2372(fp)
   164a4:	1884703a 	and	r2,r3,r2
   164a8:	e0bdbf15 	stw	r2,-2308(fp)
   164ac:	e0bdb617 	ldw	r2,-2344(fp)
   164b0:	100691ba 	slli	r3,r2,6
   164b4:	e0bdb517 	ldw	r2,-2348(fp)
   164b8:	1004d6ba 	srli	r2,r2,26
   164bc:	10c4b03a 	or	r2,r2,r3
   164c0:	e0bdb515 	stw	r2,-2348(fp)
   164c4:	e0bdb617 	ldw	r2,-2344(fp)
   164c8:	1004d6ba 	srli	r2,r2,26
   164cc:	e0bdb615 	stw	r2,-2344(fp)
   164d0:	e0bdb117 	ldw	r2,-2364(fp)
   164d4:	e0be9415 	stw	r2,-1456(fp)
   164d8:	e03e9515 	stw	zero,-1452(fp)
   164dc:	e1bdbd17 	ldw	r6,-2316(fp)
   164e0:	e1fdbe17 	ldw	r7,-2312(fp)
   164e4:	e13e9417 	ldw	r4,-1456(fp)
   164e8:	e17e9517 	ldw	r5,-1452(fp)
   164ec:	00429400 	call	42940 <__muldi3>
   164f0:	1009883a 	mov	r4,r2
   164f4:	180b883a 	mov	r5,r3
   164f8:	200f883a 	mov	r7,r4
   164fc:	2811883a 	mov	r8,r5
   16500:	e13db517 	ldw	r4,-2348(fp)
   16504:	e17db617 	ldw	r5,-2344(fp)
   16508:	21c5883a 	add	r2,r4,r7
   1650c:	110d803a 	cmpltu	r6,r2,r4
   16510:	2a07883a 	add	r3,r5,r8
   16514:	30c9883a 	add	r4,r6,r3
   16518:	2007883a 	mov	r3,r4
   1651c:	e0bdb515 	stw	r2,-2348(fp)
   16520:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t2, 26);
   16524:	e0bdbf17 	ldw	r2,-2308(fp)
   16528:	1004d6ba 	srli	r2,r2,26
   1652c:	1004c03a 	cmpne	r2,r2,zero
   16530:	10803fcc 	andi	r2,r2,255
   16534:	10000d26 	beq	r2,zero,1656c <secp256k1_fe_mul_inner+0x21bc>
   16538:	d0a01617 	ldw	r2,-32680(gp)
   1653c:	10c00317 	ldw	r3,12(r2)
   16540:	008001b4 	movhi	r2,6
   16544:	10ad0b04 	addi	r2,r2,-19412
   16548:	d8800015 	stw	r2,0(sp)
   1654c:	01c08cc4 	movi	r7,563
   16550:	018001b4 	movhi	r6,6
   16554:	31ab2d04 	addi	r6,r6,-21324
   16558:	014001b4 	movhi	r5,6
   1655c:	296b3804 	addi	r5,r5,-21280
   16560:	1809883a 	mov	r4,r3
   16564:	00452600 	call	45260 <fprintf>
   16568:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 38);
   1656c:	e0bdb617 	ldw	r2,-2344(fp)
   16570:	1004d1ba 	srli	r2,r2,6
   16574:	e0be9615 	stw	r2,-1448(fp)
   16578:	e03e9715 	stw	zero,-1444(fp)
   1657c:	e1be9617 	ldw	r6,-1448(fp)
   16580:	e1fe9717 	ldw	r7,-1444(fp)
   16584:	31c4b03a 	or	r2,r6,r7
   16588:	1004c03a 	cmpne	r2,r2,zero
   1658c:	10803fcc 	andi	r2,r2,255
   16590:	10000d26 	beq	r2,zero,165c8 <secp256k1_fe_mul_inner+0x2218>
   16594:	d0a01617 	ldw	r2,-32680(gp)
   16598:	10c00317 	ldw	r3,12(r2)
   1659c:	008001b4 	movhi	r2,6
   165a0:	10acf504 	addi	r2,r2,-19500
   165a4:	d8800015 	stw	r2,0(sp)
   165a8:	01c08d04 	movi	r7,564
   165ac:	018001b4 	movhi	r6,6
   165b0:	31ab2d04 	addi	r6,r6,-21324
   165b4:	014001b4 	movhi	r5,6
   165b8:	296b3804 	addi	r5,r5,-21280
   165bc:	1809883a 	mov	r4,r3
   165c0:	00452600 	call	45260 <fprintf>
   165c4:	00450340 	call	45034 <abort>
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)a[0] * b[3]
   165c8:	e0bdd217 	ldw	r2,-2232(fp)
   165cc:	10800017 	ldw	r2,0(r2)
   165d0:	e0be9815 	stw	r2,-1440(fp)
   165d4:	e03e9915 	stw	zero,-1436(fp)
   165d8:	e0bdd317 	ldw	r2,-2228(fp)
   165dc:	10800304 	addi	r2,r2,12
   165e0:	10800017 	ldw	r2,0(r2)
   165e4:	e0be9a15 	stw	r2,-1432(fp)
   165e8:	e03e9b15 	stw	zero,-1428(fp)
   165ec:	e1be9a17 	ldw	r6,-1432(fp)
   165f0:	e1fe9b17 	ldw	r7,-1428(fp)
   165f4:	e13e9817 	ldw	r4,-1440(fp)
   165f8:	e17e9917 	ldw	r5,-1436(fp)
   165fc:	00429400 	call	42940 <__muldi3>
   16600:	1009883a 	mov	r4,r2
   16604:	180b883a 	mov	r5,r3
   16608:	2021883a 	mov	r16,r4
   1660c:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[2]
   16610:	e0bdd217 	ldw	r2,-2232(fp)
   16614:	10800104 	addi	r2,r2,4
   16618:	10800017 	ldw	r2,0(r2)
   1661c:	e0be9c15 	stw	r2,-1424(fp)
   16620:	e03e9d15 	stw	zero,-1420(fp)
   16624:	e0bdd317 	ldw	r2,-2228(fp)
   16628:	10800204 	addi	r2,r2,8
   1662c:	10800017 	ldw	r2,0(r2)
   16630:	e0be9e15 	stw	r2,-1416(fp)
   16634:	e03e9f15 	stw	zero,-1412(fp)
   16638:	e1be9e17 	ldw	r6,-1416(fp)
   1663c:	e1fe9f17 	ldw	r7,-1412(fp)
   16640:	e13e9c17 	ldw	r4,-1424(fp)
   16644:	e17e9d17 	ldw	r5,-1420(fp)
   16648:	00429400 	call	42940 <__muldi3>
   1664c:	100f883a 	mov	r7,r2
   16650:	1811883a 	mov	r8,r3
   16654:	380b883a 	mov	r5,r7
   16658:	400d883a 	mov	r6,r8
   1665c:	8145883a 	add	r2,r16,r5
   16660:	1409803a 	cmpltu	r4,r2,r16
   16664:	8987883a 	add	r3,r17,r6
   16668:	20c9883a 	add	r4,r4,r3
   1666c:	2007883a 	mov	r3,r4
   16670:	1025883a 	mov	r18,r2
   16674:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[1]
       + (uint64_t)a[3] * b[0];
   16678:	e0bdd217 	ldw	r2,-2232(fp)
   1667c:	10800304 	addi	r2,r2,12
   16680:	10800017 	ldw	r2,0(r2)
   16684:	e0bea015 	stw	r2,-1408(fp)
   16688:	e03ea115 	stw	zero,-1404(fp)
   1668c:	e0bdd317 	ldw	r2,-2228(fp)
   16690:	10800017 	ldw	r2,0(r2)
   16694:	e0bea215 	stw	r2,-1400(fp)
   16698:	e03ea315 	stw	zero,-1396(fp)
   1669c:	e1bea217 	ldw	r6,-1400(fp)
   166a0:	e1fea317 	ldw	r7,-1396(fp)
   166a4:	e13ea017 	ldw	r4,-1408(fp)
   166a8:	e17ea117 	ldw	r5,-1404(fp)
   166ac:	00429400 	call	42940 <__muldi3>
   166b0:	1009883a 	mov	r4,r2
   166b4:	180b883a 	mov	r5,r3
   166b8:	2021883a 	mov	r16,r4
   166bc:	2823883a 	mov	r17,r5
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)a[0] * b[3]
       + (uint64_t)a[1] * b[2]
       + (uint64_t)a[2] * b[1]
   166c0:	e0bdd217 	ldw	r2,-2232(fp)
   166c4:	10800204 	addi	r2,r2,8
   166c8:	10800017 	ldw	r2,0(r2)
   166cc:	e0bea415 	stw	r2,-1392(fp)
   166d0:	e03ea515 	stw	zero,-1388(fp)
   166d4:	e0bdd317 	ldw	r2,-2228(fp)
   166d8:	10800104 	addi	r2,r2,4
   166dc:	10800017 	ldw	r2,0(r2)
   166e0:	e0bea615 	stw	r2,-1384(fp)
   166e4:	e03ea715 	stw	zero,-1380(fp)
   166e8:	e1bea617 	ldw	r6,-1384(fp)
   166ec:	e1fea717 	ldw	r7,-1380(fp)
   166f0:	e13ea417 	ldw	r4,-1392(fp)
   166f4:	e17ea517 	ldw	r5,-1388(fp)
   166f8:	00429400 	call	42940 <__muldi3>
   166fc:	100f883a 	mov	r7,r2
   16700:	1811883a 	mov	r8,r3
   16704:	380b883a 	mov	r5,r7
   16708:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[0];
   1670c:	8145883a 	add	r2,r16,r5
   16710:	1409803a 	cmpltu	r4,r2,r16
   16714:	8987883a 	add	r3,r17,r6
   16718:	20c9883a 	add	r4,r4,r3
   1671c:	2007883a 	mov	r3,r4
   16720:	100b883a 	mov	r5,r2
   16724:	180d883a 	mov	r6,r3
   16728:	9145883a 	add	r2,r18,r5
   1672c:	1489803a 	cmpltu	r4,r2,r18
   16730:	9987883a 	add	r3,r19,r6
   16734:	20c9883a 	add	r4,r4,r3
   16738:	2007883a 	mov	r3,r4
   1673c:	100f883a 	mov	r7,r2
   16740:	1811883a 	mov	r8,r3
    VERIFY_BITS(t2, 26);
    VERIFY_BITS(c, 38);
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)a[0] * b[3]
   16744:	e13db517 	ldw	r4,-2348(fp)
   16748:	e17db617 	ldw	r5,-2344(fp)
   1674c:	21c5883a 	add	r2,r4,r7
   16750:	110d803a 	cmpltu	r6,r2,r4
   16754:	2a07883a 	add	r3,r5,r8
   16758:	30c9883a 	add	r4,r6,r3
   1675c:	2007883a 	mov	r3,r4
   16760:	e0bdb515 	stw	r2,-2348(fp)
   16764:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[2]
       + (uint64_t)a[2] * b[1]
       + (uint64_t)a[3] * b[0];
    VERIFY_BITS(c, 63);
   16768:	e0bdb517 	ldw	r2,-2348(fp)
   1676c:	e0fdb617 	ldw	r3,-2344(fp)
   16770:	1804d7fa 	srli	r2,r3,31
   16774:	10803fcc 	andi	r2,r2,255
   16778:	10000d26 	beq	r2,zero,167b0 <secp256k1_fe_mul_inner+0x2400>
   1677c:	d0a01617 	ldw	r2,-32680(gp)
   16780:	10c00317 	ldw	r3,12(r2)
   16784:	008001b4 	movhi	r2,6
   16788:	10acdf04 	addi	r2,r2,-19588
   1678c:	d8800015 	stw	r2,0(sp)
   16790:	01c08f04 	movi	r7,572
   16794:	018001b4 	movhi	r6,6
   16798:	31ab2d04 	addi	r6,r6,-21324
   1679c:	014001b4 	movhi	r5,6
   167a0:	296b3804 	addi	r5,r5,-21280
   167a4:	1809883a 	mov	r4,r3
   167a8:	00452600 	call	45260 <fprintf>
   167ac:	00450340 	call	45034 <abort>
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)a[4] * b[9]
   167b0:	e0bdd217 	ldw	r2,-2232(fp)
   167b4:	10800404 	addi	r2,r2,16
   167b8:	10800017 	ldw	r2,0(r2)
   167bc:	e0bea815 	stw	r2,-1376(fp)
   167c0:	e03ea915 	stw	zero,-1372(fp)
   167c4:	e0bdd317 	ldw	r2,-2228(fp)
   167c8:	10800904 	addi	r2,r2,36
   167cc:	10800017 	ldw	r2,0(r2)
   167d0:	e0beaa15 	stw	r2,-1368(fp)
   167d4:	e03eab15 	stw	zero,-1364(fp)
   167d8:	e1beaa17 	ldw	r6,-1368(fp)
   167dc:	e1feab17 	ldw	r7,-1364(fp)
   167e0:	e13ea817 	ldw	r4,-1376(fp)
   167e4:	e17ea917 	ldw	r5,-1372(fp)
   167e8:	00429400 	call	42940 <__muldi3>
   167ec:	1009883a 	mov	r4,r2
   167f0:	180b883a 	mov	r5,r3
   167f4:	2021883a 	mov	r16,r4
   167f8:	2823883a 	mov	r17,r5
       + (uint64_t)a[5] * b[8]
   167fc:	e0bdd217 	ldw	r2,-2232(fp)
   16800:	10800504 	addi	r2,r2,20
   16804:	10800017 	ldw	r2,0(r2)
   16808:	e0beac15 	stw	r2,-1360(fp)
   1680c:	e03ead15 	stw	zero,-1356(fp)
   16810:	e0bdd317 	ldw	r2,-2228(fp)
   16814:	10800804 	addi	r2,r2,32
   16818:	10800017 	ldw	r2,0(r2)
   1681c:	e0beae15 	stw	r2,-1352(fp)
   16820:	e03eaf15 	stw	zero,-1348(fp)
   16824:	e1beae17 	ldw	r6,-1352(fp)
   16828:	e1feaf17 	ldw	r7,-1348(fp)
   1682c:	e13eac17 	ldw	r4,-1360(fp)
   16830:	e17ead17 	ldw	r5,-1356(fp)
   16834:	00429400 	call	42940 <__muldi3>
   16838:	100f883a 	mov	r7,r2
   1683c:	1811883a 	mov	r8,r3
   16840:	380b883a 	mov	r5,r7
   16844:	400d883a 	mov	r6,r8
   16848:	8145883a 	add	r2,r16,r5
   1684c:	1409803a 	cmpltu	r4,r2,r16
   16850:	8987883a 	add	r3,r17,r6
   16854:	20c9883a 	add	r4,r4,r3
   16858:	2007883a 	mov	r3,r4
   1685c:	1025883a 	mov	r18,r2
   16860:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[7]
       + (uint64_t)a[7] * b[6]
   16864:	e0bdd217 	ldw	r2,-2232(fp)
   16868:	10800704 	addi	r2,r2,28
   1686c:	10800017 	ldw	r2,0(r2)
   16870:	e0beb015 	stw	r2,-1344(fp)
   16874:	e03eb115 	stw	zero,-1340(fp)
   16878:	e0bdd317 	ldw	r2,-2228(fp)
   1687c:	10800604 	addi	r2,r2,24
   16880:	10800017 	ldw	r2,0(r2)
   16884:	e0beb215 	stw	r2,-1336(fp)
   16888:	e03eb315 	stw	zero,-1332(fp)
   1688c:	e1beb217 	ldw	r6,-1336(fp)
   16890:	e1feb317 	ldw	r7,-1332(fp)
   16894:	e13eb017 	ldw	r4,-1344(fp)
   16898:	e17eb117 	ldw	r5,-1340(fp)
   1689c:	00429400 	call	42940 <__muldi3>
   168a0:	1009883a 	mov	r4,r2
   168a4:	180b883a 	mov	r5,r3
   168a8:	2021883a 	mov	r16,r4
   168ac:	2823883a 	mov	r17,r5
       + (uint64_t)a[3] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)a[4] * b[9]
       + (uint64_t)a[5] * b[8]
       + (uint64_t)a[6] * b[7]
   168b0:	e0bdd217 	ldw	r2,-2232(fp)
   168b4:	10800604 	addi	r2,r2,24
   168b8:	10800017 	ldw	r2,0(r2)
   168bc:	e0beb415 	stw	r2,-1328(fp)
   168c0:	e03eb515 	stw	zero,-1324(fp)
   168c4:	e0bdd317 	ldw	r2,-2228(fp)
   168c8:	10800704 	addi	r2,r2,28
   168cc:	10800017 	ldw	r2,0(r2)
   168d0:	e0beb615 	stw	r2,-1320(fp)
   168d4:	e03eb715 	stw	zero,-1316(fp)
   168d8:	e1beb617 	ldw	r6,-1320(fp)
   168dc:	e1feb717 	ldw	r7,-1316(fp)
   168e0:	e13eb417 	ldw	r4,-1328(fp)
   168e4:	e17eb517 	ldw	r5,-1324(fp)
   168e8:	00429400 	call	42940 <__muldi3>
   168ec:	100f883a 	mov	r7,r2
   168f0:	1811883a 	mov	r8,r3
   168f4:	380b883a 	mov	r5,r7
   168f8:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[6]
   168fc:	8145883a 	add	r2,r16,r5
   16900:	1409803a 	cmpltu	r4,r2,r16
   16904:	8987883a 	add	r3,r17,r6
   16908:	20c9883a 	add	r4,r4,r3
   1690c:	2007883a 	mov	r3,r4
   16910:	100b883a 	mov	r5,r2
   16914:	180d883a 	mov	r6,r3
   16918:	9145883a 	add	r2,r18,r5
   1691c:	1489803a 	cmpltu	r4,r2,r18
   16920:	9987883a 	add	r3,r19,r6
   16924:	20c9883a 	add	r4,r4,r3
   16928:	2007883a 	mov	r3,r4
   1692c:	1025883a 	mov	r18,r2
   16930:	1827883a 	mov	r19,r3
       + (uint64_t)a[8] * b[5]
       + (uint64_t)a[9] * b[4];
   16934:	e0bdd217 	ldw	r2,-2232(fp)
   16938:	10800904 	addi	r2,r2,36
   1693c:	10800017 	ldw	r2,0(r2)
   16940:	e0beb815 	stw	r2,-1312(fp)
   16944:	e03eb915 	stw	zero,-1308(fp)
   16948:	e0bdd317 	ldw	r2,-2228(fp)
   1694c:	10800404 	addi	r2,r2,16
   16950:	10800017 	ldw	r2,0(r2)
   16954:	e0beba15 	stw	r2,-1304(fp)
   16958:	e03ebb15 	stw	zero,-1300(fp)
   1695c:	e1beba17 	ldw	r6,-1304(fp)
   16960:	e1febb17 	ldw	r7,-1300(fp)
   16964:	e13eb817 	ldw	r4,-1312(fp)
   16968:	e17eb917 	ldw	r5,-1308(fp)
   1696c:	00429400 	call	42940 <__muldi3>
   16970:	1009883a 	mov	r4,r2
   16974:	180b883a 	mov	r5,r3
   16978:	2021883a 	mov	r16,r4
   1697c:	2823883a 	mov	r17,r5
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)a[4] * b[9]
       + (uint64_t)a[5] * b[8]
       + (uint64_t)a[6] * b[7]
       + (uint64_t)a[7] * b[6]
       + (uint64_t)a[8] * b[5]
   16980:	e0bdd217 	ldw	r2,-2232(fp)
   16984:	10800804 	addi	r2,r2,32
   16988:	10800017 	ldw	r2,0(r2)
   1698c:	e0bebc15 	stw	r2,-1296(fp)
   16990:	e03ebd15 	stw	zero,-1292(fp)
   16994:	e0bdd317 	ldw	r2,-2228(fp)
   16998:	10800504 	addi	r2,r2,20
   1699c:	10800017 	ldw	r2,0(r2)
   169a0:	e0bebe15 	stw	r2,-1288(fp)
   169a4:	e03ebf15 	stw	zero,-1284(fp)
   169a8:	e1bebe17 	ldw	r6,-1288(fp)
   169ac:	e1febf17 	ldw	r7,-1284(fp)
   169b0:	e13ebc17 	ldw	r4,-1296(fp)
   169b4:	e17ebd17 	ldw	r5,-1292(fp)
   169b8:	00429400 	call	42940 <__muldi3>
   169bc:	100f883a 	mov	r7,r2
   169c0:	1811883a 	mov	r8,r3
   169c4:	380b883a 	mov	r5,r7
   169c8:	400d883a 	mov	r6,r8
       + (uint64_t)a[9] * b[4];
   169cc:	8145883a 	add	r2,r16,r5
   169d0:	1409803a 	cmpltu	r4,r2,r16
   169d4:	8987883a 	add	r3,r17,r6
   169d8:	20c9883a 	add	r4,r4,r3
   169dc:	2007883a 	mov	r3,r4
   169e0:	100b883a 	mov	r5,r2
   169e4:	180d883a 	mov	r6,r3
   169e8:	9145883a 	add	r2,r18,r5
   169ec:	1489803a 	cmpltu	r4,r2,r18
   169f0:	9987883a 	add	r3,r19,r6
   169f4:	20c9883a 	add	r4,r4,r3
   169f8:	2007883a 	mov	r3,r4
   169fc:	100f883a 	mov	r7,r2
   16a00:	1811883a 	mov	r8,r3
       + (uint64_t)a[1] * b[2]
       + (uint64_t)a[2] * b[1]
       + (uint64_t)a[3] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)a[4] * b[9]
   16a04:	e13db217 	ldw	r4,-2360(fp)
   16a08:	e17db317 	ldw	r5,-2356(fp)
   16a0c:	21c5883a 	add	r2,r4,r7
   16a10:	110d803a 	cmpltu	r6,r2,r4
   16a14:	2a07883a 	add	r3,r5,r8
   16a18:	30c9883a 	add	r4,r6,r3
   16a1c:	2007883a 	mov	r3,r4
   16a20:	e0bdb215 	stw	r2,-2360(fp)
   16a24:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[5] * b[8]
       + (uint64_t)a[6] * b[7]
       + (uint64_t)a[7] * b[6]
       + (uint64_t)a[8] * b[5]
       + (uint64_t)a[9] * b[4];
    VERIFY_BITS(d, 63);
   16a28:	e0bdb217 	ldw	r2,-2360(fp)
   16a2c:	e0fdb317 	ldw	r3,-2356(fp)
   16a30:	1804d7fa 	srli	r2,r3,31
   16a34:	10803fcc 	andi	r2,r2,255
   16a38:	10000d26 	beq	r2,zero,16a70 <secp256k1_fe_mul_inner+0x26c0>
   16a3c:	d0a01617 	ldw	r2,-32680(gp)
   16a40:	10c00317 	ldw	r3,12(r2)
   16a44:	008001b4 	movhi	r2,6
   16a48:	10ac8704 	addi	r2,r2,-19940
   16a4c:	d8800015 	stw	r2,0(sp)
   16a50:	01c09104 	movi	r7,580
   16a54:	018001b4 	movhi	r6,6
   16a58:	31ab2d04 	addi	r6,r6,-21324
   16a5c:	014001b4 	movhi	r5,6
   16a60:	296b3804 	addi	r5,r5,-21280
   16a64:	1809883a 	mov	r4,r3
   16a68:	00452600 	call	45260 <fprintf>
   16a6c:	00450340 	call	45034 <abort>
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    u3 = d & M; d >>= 26; c += u3 * R0;
   16a70:	e0bdaf17 	ldw	r2,-2372(fp)
   16a74:	e0bec015 	stw	r2,-1280(fp)
   16a78:	e03ec115 	stw	zero,-1276(fp)
   16a7c:	e0bdb217 	ldw	r2,-2360(fp)
   16a80:	e0fec017 	ldw	r3,-1280(fp)
   16a84:	10c4703a 	and	r2,r2,r3
   16a88:	e0bdc015 	stw	r2,-2304(fp)
   16a8c:	e0bdb317 	ldw	r2,-2356(fp)
   16a90:	e13ec117 	ldw	r4,-1276(fp)
   16a94:	1104703a 	and	r2,r2,r4
   16a98:	e0bdc115 	stw	r2,-2300(fp)
   16a9c:	e0bdb317 	ldw	r2,-2356(fp)
   16aa0:	100691ba 	slli	r3,r2,6
   16aa4:	e0bdb217 	ldw	r2,-2360(fp)
   16aa8:	1004d6ba 	srli	r2,r2,26
   16aac:	10c4b03a 	or	r2,r2,r3
   16ab0:	e0bdb215 	stw	r2,-2360(fp)
   16ab4:	e0bdb317 	ldw	r2,-2356(fp)
   16ab8:	1004d6ba 	srli	r2,r2,26
   16abc:	e0bdb315 	stw	r2,-2356(fp)
   16ac0:	e0bdb017 	ldw	r2,-2368(fp)
   16ac4:	e0bec215 	stw	r2,-1272(fp)
   16ac8:	e03ec315 	stw	zero,-1268(fp)
   16acc:	e1bdc017 	ldw	r6,-2304(fp)
   16ad0:	e1fdc117 	ldw	r7,-2300(fp)
   16ad4:	e13ec217 	ldw	r4,-1272(fp)
   16ad8:	e17ec317 	ldw	r5,-1268(fp)
   16adc:	00429400 	call	42940 <__muldi3>
   16ae0:	1009883a 	mov	r4,r2
   16ae4:	180b883a 	mov	r5,r3
   16ae8:	200f883a 	mov	r7,r4
   16aec:	2811883a 	mov	r8,r5
   16af0:	e13db517 	ldw	r4,-2348(fp)
   16af4:	e17db617 	ldw	r5,-2344(fp)
   16af8:	21c5883a 	add	r2,r4,r7
   16afc:	110d803a 	cmpltu	r6,r2,r4
   16b00:	2a07883a 	add	r3,r5,r8
   16b04:	30c9883a 	add	r4,r6,r3
   16b08:	2007883a 	mov	r3,r4
   16b0c:	e0bdb515 	stw	r2,-2348(fp)
   16b10:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u3, 26);
   16b14:	e0bdc117 	ldw	r2,-2300(fp)
   16b18:	100691ba 	slli	r3,r2,6
   16b1c:	e0bdc017 	ldw	r2,-2304(fp)
   16b20:	1004d6ba 	srli	r2,r2,26
   16b24:	e0bec415 	stw	r2,-1264(fp)
   16b28:	e1bec417 	ldw	r6,-1264(fp)
   16b2c:	1986b03a 	or	r3,r3,r6
   16b30:	e0fec415 	stw	r3,-1264(fp)
   16b34:	e0bdc117 	ldw	r2,-2300(fp)
   16b38:	1004d6ba 	srli	r2,r2,26
   16b3c:	e0bec515 	stw	r2,-1260(fp)
   16b40:	e1fec417 	ldw	r7,-1264(fp)
   16b44:	e0fec517 	ldw	r3,-1260(fp)
   16b48:	38c4b03a 	or	r2,r7,r3
   16b4c:	1004c03a 	cmpne	r2,r2,zero
   16b50:	10803fcc 	andi	r2,r2,255
   16b54:	10000d26 	beq	r2,zero,16b8c <secp256k1_fe_mul_inner+0x27dc>
   16b58:	d0a01617 	ldw	r2,-32680(gp)
   16b5c:	10c00317 	ldw	r3,12(r2)
   16b60:	008001b4 	movhi	r2,6
   16b64:	10ad1604 	addi	r2,r2,-19368
   16b68:	d8800015 	stw	r2,0(sp)
   16b6c:	01c091c4 	movi	r7,583
   16b70:	018001b4 	movhi	r6,6
   16b74:	31ab2d04 	addi	r6,r6,-21324
   16b78:	014001b4 	movhi	r5,6
   16b7c:	296b3804 	addi	r5,r5,-21280
   16b80:	1809883a 	mov	r4,r3
   16b84:	00452600 	call	45260 <fprintf>
   16b88:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 37);
   16b8c:	e0bdb317 	ldw	r2,-2356(fp)
   16b90:	1004d17a 	srli	r2,r2,5
   16b94:	e0bec615 	stw	r2,-1256(fp)
   16b98:	e03ec715 	stw	zero,-1252(fp)
   16b9c:	e13ec617 	ldw	r4,-1256(fp)
   16ba0:	e1bec717 	ldw	r6,-1252(fp)
   16ba4:	2184b03a 	or	r2,r4,r6
   16ba8:	1004c03a 	cmpne	r2,r2,zero
   16bac:	10803fcc 	andi	r2,r2,255
   16bb0:	10000d26 	beq	r2,zero,16be8 <secp256k1_fe_mul_inner+0x2838>
   16bb4:	d0a01617 	ldw	r2,-32680(gp)
   16bb8:	10c00317 	ldw	r3,12(r2)
   16bbc:	008001b4 	movhi	r2,6
   16bc0:	10ac9d04 	addi	r2,r2,-19852
   16bc4:	d8800015 	stw	r2,0(sp)
   16bc8:	01c09204 	movi	r7,584
   16bcc:	018001b4 	movhi	r6,6
   16bd0:	31ab2d04 	addi	r6,r6,-21324
   16bd4:	014001b4 	movhi	r5,6
   16bd8:	296b3804 	addi	r5,r5,-21280
   16bdc:	1809883a 	mov	r4,r3
   16be0:	00452600 	call	45260 <fprintf>
   16be4:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u3 0 0 0 t9 0 0 0 0 0 c-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    t3 = c & M; c >>= 26; c += u3 * R1;
   16be8:	e0fdb517 	ldw	r3,-2348(fp)
   16bec:	e0bdaf17 	ldw	r2,-2372(fp)
   16bf0:	1884703a 	and	r2,r3,r2
   16bf4:	e0bdc215 	stw	r2,-2296(fp)
   16bf8:	e0bdb617 	ldw	r2,-2344(fp)
   16bfc:	100691ba 	slli	r3,r2,6
   16c00:	e0bdb517 	ldw	r2,-2348(fp)
   16c04:	1004d6ba 	srli	r2,r2,26
   16c08:	10c4b03a 	or	r2,r2,r3
   16c0c:	e0bdb515 	stw	r2,-2348(fp)
   16c10:	e0bdb617 	ldw	r2,-2344(fp)
   16c14:	1004d6ba 	srli	r2,r2,26
   16c18:	e0bdb615 	stw	r2,-2344(fp)
   16c1c:	e0bdb117 	ldw	r2,-2364(fp)
   16c20:	e0bec815 	stw	r2,-1248(fp)
   16c24:	e03ec915 	stw	zero,-1244(fp)
   16c28:	e1bdc017 	ldw	r6,-2304(fp)
   16c2c:	e1fdc117 	ldw	r7,-2300(fp)
   16c30:	e13ec817 	ldw	r4,-1248(fp)
   16c34:	e17ec917 	ldw	r5,-1244(fp)
   16c38:	00429400 	call	42940 <__muldi3>
   16c3c:	1009883a 	mov	r4,r2
   16c40:	180b883a 	mov	r5,r3
   16c44:	200f883a 	mov	r7,r4
   16c48:	2811883a 	mov	r8,r5
   16c4c:	e13db517 	ldw	r4,-2348(fp)
   16c50:	e17db617 	ldw	r5,-2344(fp)
   16c54:	21c5883a 	add	r2,r4,r7
   16c58:	110d803a 	cmpltu	r6,r2,r4
   16c5c:	2a07883a 	add	r3,r5,r8
   16c60:	30c9883a 	add	r4,r6,r3
   16c64:	2007883a 	mov	r3,r4
   16c68:	e0bdb515 	stw	r2,-2348(fp)
   16c6c:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t3, 26);
   16c70:	e0bdc217 	ldw	r2,-2296(fp)
   16c74:	1004d6ba 	srli	r2,r2,26
   16c78:	1004c03a 	cmpne	r2,r2,zero
   16c7c:	10803fcc 	andi	r2,r2,255
   16c80:	10000d26 	beq	r2,zero,16cb8 <secp256k1_fe_mul_inner+0x2908>
   16c84:	d0a01617 	ldw	r2,-32680(gp)
   16c88:	10c00317 	ldw	r3,12(r2)
   16c8c:	008001b4 	movhi	r2,6
   16c90:	10ad2104 	addi	r2,r2,-19324
   16c94:	d8800015 	stw	r2,0(sp)
   16c98:	01c09304 	movi	r7,588
   16c9c:	018001b4 	movhi	r6,6
   16ca0:	31ab2d04 	addi	r6,r6,-21324
   16ca4:	014001b4 	movhi	r5,6
   16ca8:	296b3804 	addi	r5,r5,-21280
   16cac:	1809883a 	mov	r4,r3
   16cb0:	00452600 	call	45260 <fprintf>
   16cb4:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   16cb8:	e0bdb617 	ldw	r2,-2344(fp)
   16cbc:	1004d1fa 	srli	r2,r2,7
   16cc0:	e0beca15 	stw	r2,-1240(fp)
   16cc4:	e03ecb15 	stw	zero,-1236(fp)
   16cc8:	e1feca17 	ldw	r7,-1240(fp)
   16ccc:	e0fecb17 	ldw	r3,-1236(fp)
   16cd0:	38c4b03a 	or	r2,r7,r3
   16cd4:	1004c03a 	cmpne	r2,r2,zero
   16cd8:	10803fcc 	andi	r2,r2,255
   16cdc:	10000d26 	beq	r2,zero,16d14 <secp256k1_fe_mul_inner+0x2964>
   16ce0:	d0a01617 	ldw	r2,-32680(gp)
   16ce4:	10c00317 	ldw	r3,12(r2)
   16ce8:	008001b4 	movhi	r2,6
   16cec:	10ad2c04 	addi	r2,r2,-19280
   16cf0:	d8800015 	stw	r2,0(sp)
   16cf4:	01c09344 	movi	r7,589
   16cf8:	018001b4 	movhi	r6,6
   16cfc:	31ab2d04 	addi	r6,r6,-21324
   16d00:	014001b4 	movhi	r5,6
   16d04:	296b3804 	addi	r5,r5,-21280
   16d08:	1809883a 	mov	r4,r3
   16d0c:	00452600 	call	45260 <fprintf>
   16d10:	00450340 	call	45034 <abort>
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[4]
   16d14:	e0bdd217 	ldw	r2,-2232(fp)
   16d18:	10800017 	ldw	r2,0(r2)
   16d1c:	e0becc15 	stw	r2,-1232(fp)
   16d20:	e03ecd15 	stw	zero,-1228(fp)
   16d24:	e0bdd317 	ldw	r2,-2228(fp)
   16d28:	10800404 	addi	r2,r2,16
   16d2c:	10800017 	ldw	r2,0(r2)
   16d30:	e0bece15 	stw	r2,-1224(fp)
   16d34:	e03ecf15 	stw	zero,-1220(fp)
   16d38:	e1bece17 	ldw	r6,-1224(fp)
   16d3c:	e1fecf17 	ldw	r7,-1220(fp)
   16d40:	e13ecc17 	ldw	r4,-1232(fp)
   16d44:	e17ecd17 	ldw	r5,-1228(fp)
   16d48:	00429400 	call	42940 <__muldi3>
   16d4c:	1009883a 	mov	r4,r2
   16d50:	180b883a 	mov	r5,r3
   16d54:	2021883a 	mov	r16,r4
   16d58:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[3]
   16d5c:	e0bdd217 	ldw	r2,-2232(fp)
   16d60:	10800104 	addi	r2,r2,4
   16d64:	10800017 	ldw	r2,0(r2)
   16d68:	e0bed015 	stw	r2,-1216(fp)
   16d6c:	e03ed115 	stw	zero,-1212(fp)
   16d70:	e0bdd317 	ldw	r2,-2228(fp)
   16d74:	10800304 	addi	r2,r2,12
   16d78:	10800017 	ldw	r2,0(r2)
   16d7c:	e0bed215 	stw	r2,-1208(fp)
   16d80:	e03ed315 	stw	zero,-1204(fp)
   16d84:	e1bed217 	ldw	r6,-1208(fp)
   16d88:	e1fed317 	ldw	r7,-1204(fp)
   16d8c:	e13ed017 	ldw	r4,-1216(fp)
   16d90:	e17ed117 	ldw	r5,-1212(fp)
   16d94:	00429400 	call	42940 <__muldi3>
   16d98:	100f883a 	mov	r7,r2
   16d9c:	1811883a 	mov	r8,r3
   16da0:	380b883a 	mov	r5,r7
   16da4:	400d883a 	mov	r6,r8
   16da8:	8145883a 	add	r2,r16,r5
   16dac:	1409803a 	cmpltu	r4,r2,r16
   16db0:	8987883a 	add	r3,r17,r6
   16db4:	20c9883a 	add	r4,r4,r3
   16db8:	2007883a 	mov	r3,r4
   16dbc:	1025883a 	mov	r18,r2
   16dc0:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[2]
       + (uint64_t)a[3] * b[1]
   16dc4:	e0bdd217 	ldw	r2,-2232(fp)
   16dc8:	10800304 	addi	r2,r2,12
   16dcc:	10800017 	ldw	r2,0(r2)
   16dd0:	e0bed415 	stw	r2,-1200(fp)
   16dd4:	e03ed515 	stw	zero,-1196(fp)
   16dd8:	e0bdd317 	ldw	r2,-2228(fp)
   16ddc:	10800104 	addi	r2,r2,4
   16de0:	10800017 	ldw	r2,0(r2)
   16de4:	e0bed615 	stw	r2,-1192(fp)
   16de8:	e03ed715 	stw	zero,-1188(fp)
   16dec:	e1bed617 	ldw	r6,-1192(fp)
   16df0:	e1fed717 	ldw	r7,-1188(fp)
   16df4:	e13ed417 	ldw	r4,-1200(fp)
   16df8:	e17ed517 	ldw	r5,-1196(fp)
   16dfc:	00429400 	call	42940 <__muldi3>
   16e00:	1009883a 	mov	r4,r2
   16e04:	180b883a 	mov	r5,r3
   16e08:	2021883a 	mov	r16,r4
   16e0c:	2823883a 	mov	r17,r5
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[4]
       + (uint64_t)a[1] * b[3]
       + (uint64_t)a[2] * b[2]
   16e10:	e0bdd217 	ldw	r2,-2232(fp)
   16e14:	10800204 	addi	r2,r2,8
   16e18:	10800017 	ldw	r2,0(r2)
   16e1c:	e0bed815 	stw	r2,-1184(fp)
   16e20:	e03ed915 	stw	zero,-1180(fp)
   16e24:	e0bdd317 	ldw	r2,-2228(fp)
   16e28:	10800204 	addi	r2,r2,8
   16e2c:	10800017 	ldw	r2,0(r2)
   16e30:	e0beda15 	stw	r2,-1176(fp)
   16e34:	e03edb15 	stw	zero,-1172(fp)
   16e38:	e1beda17 	ldw	r6,-1176(fp)
   16e3c:	e1fedb17 	ldw	r7,-1172(fp)
   16e40:	e13ed817 	ldw	r4,-1184(fp)
   16e44:	e17ed917 	ldw	r5,-1180(fp)
   16e48:	00429400 	call	42940 <__muldi3>
   16e4c:	100f883a 	mov	r7,r2
   16e50:	1811883a 	mov	r8,r3
   16e54:	380b883a 	mov	r5,r7
   16e58:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[1]
   16e5c:	8145883a 	add	r2,r16,r5
   16e60:	1409803a 	cmpltu	r4,r2,r16
   16e64:	8987883a 	add	r3,r17,r6
   16e68:	20c9883a 	add	r4,r4,r3
   16e6c:	2007883a 	mov	r3,r4
   16e70:	100b883a 	mov	r5,r2
   16e74:	180d883a 	mov	r6,r3
   16e78:	9145883a 	add	r2,r18,r5
   16e7c:	1489803a 	cmpltu	r4,r2,r18
   16e80:	9987883a 	add	r3,r19,r6
   16e84:	20c9883a 	add	r4,r4,r3
   16e88:	2007883a 	mov	r3,r4
   16e8c:	1021883a 	mov	r16,r2
   16e90:	1823883a 	mov	r17,r3
       + (uint64_t)a[4] * b[0];
   16e94:	e0bdd217 	ldw	r2,-2232(fp)
   16e98:	10800404 	addi	r2,r2,16
   16e9c:	10800017 	ldw	r2,0(r2)
   16ea0:	e0bedc15 	stw	r2,-1168(fp)
   16ea4:	e03edd15 	stw	zero,-1164(fp)
   16ea8:	e0bdd317 	ldw	r2,-2228(fp)
   16eac:	10800017 	ldw	r2,0(r2)
   16eb0:	e0bede15 	stw	r2,-1160(fp)
   16eb4:	e03edf15 	stw	zero,-1156(fp)
   16eb8:	e1bede17 	ldw	r6,-1160(fp)
   16ebc:	e1fedf17 	ldw	r7,-1156(fp)
   16ec0:	e13edc17 	ldw	r4,-1168(fp)
   16ec4:	e17edd17 	ldw	r5,-1164(fp)
   16ec8:	00429400 	call	42940 <__muldi3>
   16ecc:	100f883a 	mov	r7,r2
   16ed0:	1811883a 	mov	r8,r3
   16ed4:	380b883a 	mov	r5,r7
   16ed8:	400d883a 	mov	r6,r8
   16edc:	8145883a 	add	r2,r16,r5
   16ee0:	1409803a 	cmpltu	r4,r2,r16
   16ee4:	8987883a 	add	r3,r17,r6
   16ee8:	20c9883a 	add	r4,r4,r3
   16eec:	2007883a 	mov	r3,r4
   16ef0:	100f883a 	mov	r7,r2
   16ef4:	1811883a 	mov	r8,r3
    VERIFY_BITS(t3, 26);
    VERIFY_BITS(c, 39);
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[4]
   16ef8:	e13db517 	ldw	r4,-2348(fp)
   16efc:	e17db617 	ldw	r5,-2344(fp)
   16f00:	21c5883a 	add	r2,r4,r7
   16f04:	110d803a 	cmpltu	r6,r2,r4
   16f08:	2a07883a 	add	r3,r5,r8
   16f0c:	30c9883a 	add	r4,r6,r3
   16f10:	2007883a 	mov	r3,r4
   16f14:	e0bdb515 	stw	r2,-2348(fp)
   16f18:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[3]
       + (uint64_t)a[2] * b[2]
       + (uint64_t)a[3] * b[1]
       + (uint64_t)a[4] * b[0];
    VERIFY_BITS(c, 63);
   16f1c:	e0bdb517 	ldw	r2,-2348(fp)
   16f20:	e0fdb617 	ldw	r3,-2344(fp)
   16f24:	1804d7fa 	srli	r2,r3,31
   16f28:	10803fcc 	andi	r2,r2,255
   16f2c:	10000d26 	beq	r2,zero,16f64 <secp256k1_fe_mul_inner+0x2bb4>
   16f30:	d0a01617 	ldw	r2,-32680(gp)
   16f34:	10c00317 	ldw	r3,12(r2)
   16f38:	008001b4 	movhi	r2,6
   16f3c:	10acdf04 	addi	r2,r2,-19588
   16f40:	d8800015 	stw	r2,0(sp)
   16f44:	01c09584 	movi	r7,598
   16f48:	018001b4 	movhi	r6,6
   16f4c:	31ab2d04 	addi	r6,r6,-21324
   16f50:	014001b4 	movhi	r5,6
   16f54:	296b3804 	addi	r5,r5,-21280
   16f58:	1809883a 	mov	r4,r3
   16f5c:	00452600 	call	45260 <fprintf>
   16f60:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[5] * b[9]
   16f64:	e0bdd217 	ldw	r2,-2232(fp)
   16f68:	10800504 	addi	r2,r2,20
   16f6c:	10800017 	ldw	r2,0(r2)
   16f70:	e0bee015 	stw	r2,-1152(fp)
   16f74:	e03ee115 	stw	zero,-1148(fp)
   16f78:	e0bdd317 	ldw	r2,-2228(fp)
   16f7c:	10800904 	addi	r2,r2,36
   16f80:	10800017 	ldw	r2,0(r2)
   16f84:	e0bee215 	stw	r2,-1144(fp)
   16f88:	e03ee315 	stw	zero,-1140(fp)
   16f8c:	e1bee217 	ldw	r6,-1144(fp)
   16f90:	e1fee317 	ldw	r7,-1140(fp)
   16f94:	e13ee017 	ldw	r4,-1152(fp)
   16f98:	e17ee117 	ldw	r5,-1148(fp)
   16f9c:	00429400 	call	42940 <__muldi3>
   16fa0:	1009883a 	mov	r4,r2
   16fa4:	180b883a 	mov	r5,r3
   16fa8:	2021883a 	mov	r16,r4
   16fac:	2823883a 	mov	r17,r5
       + (uint64_t)a[6] * b[8]
   16fb0:	e0bdd217 	ldw	r2,-2232(fp)
   16fb4:	10800604 	addi	r2,r2,24
   16fb8:	10800017 	ldw	r2,0(r2)
   16fbc:	e0bee415 	stw	r2,-1136(fp)
   16fc0:	e03ee515 	stw	zero,-1132(fp)
   16fc4:	e0bdd317 	ldw	r2,-2228(fp)
   16fc8:	10800804 	addi	r2,r2,32
   16fcc:	10800017 	ldw	r2,0(r2)
   16fd0:	e0bee615 	stw	r2,-1128(fp)
   16fd4:	e03ee715 	stw	zero,-1124(fp)
   16fd8:	e1bee617 	ldw	r6,-1128(fp)
   16fdc:	e1fee717 	ldw	r7,-1124(fp)
   16fe0:	e13ee417 	ldw	r4,-1136(fp)
   16fe4:	e17ee517 	ldw	r5,-1132(fp)
   16fe8:	00429400 	call	42940 <__muldi3>
   16fec:	100f883a 	mov	r7,r2
   16ff0:	1811883a 	mov	r8,r3
   16ff4:	380b883a 	mov	r5,r7
   16ff8:	400d883a 	mov	r6,r8
   16ffc:	8145883a 	add	r2,r16,r5
   17000:	1409803a 	cmpltu	r4,r2,r16
   17004:	8987883a 	add	r3,r17,r6
   17008:	20c9883a 	add	r4,r4,r3
   1700c:	2007883a 	mov	r3,r4
   17010:	1025883a 	mov	r18,r2
   17014:	1827883a 	mov	r19,r3
       + (uint64_t)a[7] * b[7]
       + (uint64_t)a[8] * b[6]
   17018:	e0bdd217 	ldw	r2,-2232(fp)
   1701c:	10800804 	addi	r2,r2,32
   17020:	10800017 	ldw	r2,0(r2)
   17024:	e0bee815 	stw	r2,-1120(fp)
   17028:	e03ee915 	stw	zero,-1116(fp)
   1702c:	e0bdd317 	ldw	r2,-2228(fp)
   17030:	10800604 	addi	r2,r2,24
   17034:	10800017 	ldw	r2,0(r2)
   17038:	e0beea15 	stw	r2,-1112(fp)
   1703c:	e03eeb15 	stw	zero,-1108(fp)
   17040:	e1beea17 	ldw	r6,-1112(fp)
   17044:	e1feeb17 	ldw	r7,-1108(fp)
   17048:	e13ee817 	ldw	r4,-1120(fp)
   1704c:	e17ee917 	ldw	r5,-1116(fp)
   17050:	00429400 	call	42940 <__muldi3>
   17054:	1009883a 	mov	r4,r2
   17058:	180b883a 	mov	r5,r3
   1705c:	2021883a 	mov	r16,r4
   17060:	2823883a 	mov	r17,r5
       + (uint64_t)a[4] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[5] * b[9]
       + (uint64_t)a[6] * b[8]
       + (uint64_t)a[7] * b[7]
   17064:	e0bdd217 	ldw	r2,-2232(fp)
   17068:	10800704 	addi	r2,r2,28
   1706c:	10800017 	ldw	r2,0(r2)
   17070:	e0beec15 	stw	r2,-1104(fp)
   17074:	e03eed15 	stw	zero,-1100(fp)
   17078:	e0bdd317 	ldw	r2,-2228(fp)
   1707c:	10800704 	addi	r2,r2,28
   17080:	10800017 	ldw	r2,0(r2)
   17084:	e0beee15 	stw	r2,-1096(fp)
   17088:	e03eef15 	stw	zero,-1092(fp)
   1708c:	e1beee17 	ldw	r6,-1096(fp)
   17090:	e1feef17 	ldw	r7,-1092(fp)
   17094:	e13eec17 	ldw	r4,-1104(fp)
   17098:	e17eed17 	ldw	r5,-1100(fp)
   1709c:	00429400 	call	42940 <__muldi3>
   170a0:	100f883a 	mov	r7,r2
   170a4:	1811883a 	mov	r8,r3
   170a8:	380b883a 	mov	r5,r7
   170ac:	400d883a 	mov	r6,r8
       + (uint64_t)a[8] * b[6]
   170b0:	8145883a 	add	r2,r16,r5
   170b4:	1409803a 	cmpltu	r4,r2,r16
   170b8:	8987883a 	add	r3,r17,r6
   170bc:	20c9883a 	add	r4,r4,r3
   170c0:	2007883a 	mov	r3,r4
   170c4:	100b883a 	mov	r5,r2
   170c8:	180d883a 	mov	r6,r3
   170cc:	9145883a 	add	r2,r18,r5
   170d0:	1489803a 	cmpltu	r4,r2,r18
   170d4:	9987883a 	add	r3,r19,r6
   170d8:	20c9883a 	add	r4,r4,r3
   170dc:	2007883a 	mov	r3,r4
   170e0:	1021883a 	mov	r16,r2
   170e4:	1823883a 	mov	r17,r3
       + (uint64_t)a[9] * b[5];
   170e8:	e0bdd217 	ldw	r2,-2232(fp)
   170ec:	10800904 	addi	r2,r2,36
   170f0:	10800017 	ldw	r2,0(r2)
   170f4:	e0bef015 	stw	r2,-1088(fp)
   170f8:	e03ef115 	stw	zero,-1084(fp)
   170fc:	e0bdd317 	ldw	r2,-2228(fp)
   17100:	10800504 	addi	r2,r2,20
   17104:	10800017 	ldw	r2,0(r2)
   17108:	e0bef215 	stw	r2,-1080(fp)
   1710c:	e03ef315 	stw	zero,-1076(fp)
   17110:	e1bef217 	ldw	r6,-1080(fp)
   17114:	e1fef317 	ldw	r7,-1076(fp)
   17118:	e13ef017 	ldw	r4,-1088(fp)
   1711c:	e17ef117 	ldw	r5,-1084(fp)
   17120:	00429400 	call	42940 <__muldi3>
   17124:	100f883a 	mov	r7,r2
   17128:	1811883a 	mov	r8,r3
   1712c:	380b883a 	mov	r5,r7
   17130:	400d883a 	mov	r6,r8
   17134:	8145883a 	add	r2,r16,r5
   17138:	1409803a 	cmpltu	r4,r2,r16
   1713c:	8987883a 	add	r3,r17,r6
   17140:	20c9883a 	add	r4,r4,r3
   17144:	2007883a 	mov	r3,r4
   17148:	100f883a 	mov	r7,r2
   1714c:	1811883a 	mov	r8,r3
       + (uint64_t)a[2] * b[2]
       + (uint64_t)a[3] * b[1]
       + (uint64_t)a[4] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[5] * b[9]
   17150:	e13db217 	ldw	r4,-2360(fp)
   17154:	e17db317 	ldw	r5,-2356(fp)
   17158:	21c5883a 	add	r2,r4,r7
   1715c:	110d803a 	cmpltu	r6,r2,r4
   17160:	2a07883a 	add	r3,r5,r8
   17164:	30c9883a 	add	r4,r6,r3
   17168:	2007883a 	mov	r3,r4
   1716c:	e0bdb215 	stw	r2,-2360(fp)
   17170:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[6] * b[8]
       + (uint64_t)a[7] * b[7]
       + (uint64_t)a[8] * b[6]
       + (uint64_t)a[9] * b[5];
    VERIFY_BITS(d, 62);
   17174:	e0bdb317 	ldw	r2,-2356(fp)
   17178:	1004d7ba 	srli	r2,r2,30
   1717c:	e0bef415 	stw	r2,-1072(fp)
   17180:	e03ef515 	stw	zero,-1068(fp)
   17184:	e13ef417 	ldw	r4,-1072(fp)
   17188:	e1bef517 	ldw	r6,-1068(fp)
   1718c:	2184b03a 	or	r2,r4,r6
   17190:	1004c03a 	cmpne	r2,r2,zero
   17194:	10803fcc 	andi	r2,r2,255
   17198:	10000d26 	beq	r2,zero,171d0 <secp256k1_fe_mul_inner+0x2e20>
   1719c:	d0a01617 	ldw	r2,-32680(gp)
   171a0:	10c00317 	ldw	r3,12(r2)
   171a4:	008001b4 	movhi	r2,6
   171a8:	10ad3704 	addi	r2,r2,-19236
   171ac:	d8800015 	stw	r2,0(sp)
   171b0:	01c09744 	movi	r7,605
   171b4:	018001b4 	movhi	r6,6
   171b8:	31ab2d04 	addi	r6,r6,-21324
   171bc:	014001b4 	movhi	r5,6
   171c0:	296b3804 	addi	r5,r5,-21280
   171c4:	1809883a 	mov	r4,r3
   171c8:	00452600 	call	45260 <fprintf>
   171cc:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    u4 = d & M; d >>= 26; c += u4 * R0;
   171d0:	e0bdaf17 	ldw	r2,-2372(fp)
   171d4:	e0bef615 	stw	r2,-1064(fp)
   171d8:	e03ef715 	stw	zero,-1060(fp)
   171dc:	e0bdb217 	ldw	r2,-2360(fp)
   171e0:	e1fef617 	ldw	r7,-1064(fp)
   171e4:	11c4703a 	and	r2,r2,r7
   171e8:	e0bdc315 	stw	r2,-2292(fp)
   171ec:	e0bdb317 	ldw	r2,-2356(fp)
   171f0:	e0fef717 	ldw	r3,-1060(fp)
   171f4:	10c4703a 	and	r2,r2,r3
   171f8:	e0bdc415 	stw	r2,-2288(fp)
   171fc:	e0bdb317 	ldw	r2,-2356(fp)
   17200:	100691ba 	slli	r3,r2,6
   17204:	e0bdb217 	ldw	r2,-2360(fp)
   17208:	1004d6ba 	srli	r2,r2,26
   1720c:	10c4b03a 	or	r2,r2,r3
   17210:	e0bdb215 	stw	r2,-2360(fp)
   17214:	e0bdb317 	ldw	r2,-2356(fp)
   17218:	1004d6ba 	srli	r2,r2,26
   1721c:	e0bdb315 	stw	r2,-2356(fp)
   17220:	e0bdb017 	ldw	r2,-2368(fp)
   17224:	e0bef815 	stw	r2,-1056(fp)
   17228:	e03ef915 	stw	zero,-1052(fp)
   1722c:	e1bdc317 	ldw	r6,-2292(fp)
   17230:	e1fdc417 	ldw	r7,-2288(fp)
   17234:	e13ef817 	ldw	r4,-1056(fp)
   17238:	e17ef917 	ldw	r5,-1052(fp)
   1723c:	00429400 	call	42940 <__muldi3>
   17240:	1009883a 	mov	r4,r2
   17244:	180b883a 	mov	r5,r3
   17248:	200f883a 	mov	r7,r4
   1724c:	2811883a 	mov	r8,r5
   17250:	e13db517 	ldw	r4,-2348(fp)
   17254:	e17db617 	ldw	r5,-2344(fp)
   17258:	21c5883a 	add	r2,r4,r7
   1725c:	110d803a 	cmpltu	r6,r2,r4
   17260:	2a07883a 	add	r3,r5,r8
   17264:	30c9883a 	add	r4,r6,r3
   17268:	2007883a 	mov	r3,r4
   1726c:	e0bdb515 	stw	r2,-2348(fp)
   17270:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u4, 26);
   17274:	e0bdc417 	ldw	r2,-2288(fp)
   17278:	100691ba 	slli	r3,r2,6
   1727c:	e0bdc317 	ldw	r2,-2292(fp)
   17280:	1004d6ba 	srli	r2,r2,26
   17284:	e0befa15 	stw	r2,-1048(fp)
   17288:	e13efa17 	ldw	r4,-1048(fp)
   1728c:	1906b03a 	or	r3,r3,r4
   17290:	e0fefa15 	stw	r3,-1048(fp)
   17294:	e0bdc417 	ldw	r2,-2288(fp)
   17298:	1004d6ba 	srli	r2,r2,26
   1729c:	e0befb15 	stw	r2,-1044(fp)
   172a0:	e1befa17 	ldw	r6,-1048(fp)
   172a4:	e1fefb17 	ldw	r7,-1044(fp)
   172a8:	31c4b03a 	or	r2,r6,r7
   172ac:	1004c03a 	cmpne	r2,r2,zero
   172b0:	10803fcc 	andi	r2,r2,255
   172b4:	10000d26 	beq	r2,zero,172ec <secp256k1_fe_mul_inner+0x2f3c>
   172b8:	d0a01617 	ldw	r2,-32680(gp)
   172bc:	10c00317 	ldw	r3,12(r2)
   172c0:	008001b4 	movhi	r2,6
   172c4:	10ad4204 	addi	r2,r2,-19192
   172c8:	d8800015 	stw	r2,0(sp)
   172cc:	01c09804 	movi	r7,608
   172d0:	018001b4 	movhi	r6,6
   172d4:	31ab2d04 	addi	r6,r6,-21324
   172d8:	014001b4 	movhi	r5,6
   172dc:	296b3804 	addi	r5,r5,-21280
   172e0:	1809883a 	mov	r4,r3
   172e4:	00452600 	call	45260 <fprintf>
   172e8:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 36);
   172ec:	e0bdb317 	ldw	r2,-2356(fp)
   172f0:	1004d13a 	srli	r2,r2,4
   172f4:	e0befc15 	stw	r2,-1040(fp)
   172f8:	e03efd15 	stw	zero,-1036(fp)
   172fc:	e0fefc17 	ldw	r3,-1040(fp)
   17300:	e13efd17 	ldw	r4,-1036(fp)
   17304:	1904b03a 	or	r2,r3,r4
   17308:	1004c03a 	cmpne	r2,r2,zero
   1730c:	10803fcc 	andi	r2,r2,255
   17310:	10000d26 	beq	r2,zero,17348 <secp256k1_fe_mul_inner+0x2f98>
   17314:	d0a01617 	ldw	r2,-32680(gp)
   17318:	10c00317 	ldw	r3,12(r2)
   1731c:	008001b4 	movhi	r2,6
   17320:	10ad4d04 	addi	r2,r2,-19148
   17324:	d8800015 	stw	r2,0(sp)
   17328:	01c09844 	movi	r7,609
   1732c:	018001b4 	movhi	r6,6
   17330:	31ab2d04 	addi	r6,r6,-21324
   17334:	014001b4 	movhi	r5,6
   17338:	296b3804 	addi	r5,r5,-21280
   1733c:	1809883a 	mov	r4,r3
   17340:	00452600 	call	45260 <fprintf>
   17344:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u4 0 0 0 0 t9 0 0 0 0 c-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    t4 = c & M; c >>= 26; c += u4 * R1;
   17348:	e0fdb517 	ldw	r3,-2348(fp)
   1734c:	e0bdaf17 	ldw	r2,-2372(fp)
   17350:	1884703a 	and	r2,r3,r2
   17354:	e0bdc515 	stw	r2,-2284(fp)
   17358:	e0bdb617 	ldw	r2,-2344(fp)
   1735c:	100691ba 	slli	r3,r2,6
   17360:	e0bdb517 	ldw	r2,-2348(fp)
   17364:	1004d6ba 	srli	r2,r2,26
   17368:	10c4b03a 	or	r2,r2,r3
   1736c:	e0bdb515 	stw	r2,-2348(fp)
   17370:	e0bdb617 	ldw	r2,-2344(fp)
   17374:	1004d6ba 	srli	r2,r2,26
   17378:	e0bdb615 	stw	r2,-2344(fp)
   1737c:	e0bdb117 	ldw	r2,-2364(fp)
   17380:	e0befe15 	stw	r2,-1032(fp)
   17384:	e03eff15 	stw	zero,-1028(fp)
   17388:	e1bdc317 	ldw	r6,-2292(fp)
   1738c:	e1fdc417 	ldw	r7,-2288(fp)
   17390:	e13efe17 	ldw	r4,-1032(fp)
   17394:	e17eff17 	ldw	r5,-1028(fp)
   17398:	00429400 	call	42940 <__muldi3>
   1739c:	1009883a 	mov	r4,r2
   173a0:	180b883a 	mov	r5,r3
   173a4:	200f883a 	mov	r7,r4
   173a8:	2811883a 	mov	r8,r5
   173ac:	e13db517 	ldw	r4,-2348(fp)
   173b0:	e17db617 	ldw	r5,-2344(fp)
   173b4:	21c5883a 	add	r2,r4,r7
   173b8:	110d803a 	cmpltu	r6,r2,r4
   173bc:	2a07883a 	add	r3,r5,r8
   173c0:	30c9883a 	add	r4,r6,r3
   173c4:	2007883a 	mov	r3,r4
   173c8:	e0bdb515 	stw	r2,-2348(fp)
   173cc:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t4, 26);
   173d0:	e0bdc517 	ldw	r2,-2284(fp)
   173d4:	1004d6ba 	srli	r2,r2,26
   173d8:	1004c03a 	cmpne	r2,r2,zero
   173dc:	10803fcc 	andi	r2,r2,255
   173e0:	10000d26 	beq	r2,zero,17418 <secp256k1_fe_mul_inner+0x3068>
   173e4:	d0a01617 	ldw	r2,-32680(gp)
   173e8:	10c00317 	ldw	r3,12(r2)
   173ec:	008001b4 	movhi	r2,6
   173f0:	10ad5804 	addi	r2,r2,-19104
   173f4:	d8800015 	stw	r2,0(sp)
   173f8:	01c09944 	movi	r7,613
   173fc:	018001b4 	movhi	r6,6
   17400:	31ab2d04 	addi	r6,r6,-21324
   17404:	014001b4 	movhi	r5,6
   17408:	296b3804 	addi	r5,r5,-21280
   1740c:	1809883a 	mov	r4,r3
   17410:	00452600 	call	45260 <fprintf>
   17414:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   17418:	e0bdb617 	ldw	r2,-2344(fp)
   1741c:	1004d1fa 	srli	r2,r2,7
   17420:	e0bf0015 	stw	r2,-1024(fp)
   17424:	e03f0115 	stw	zero,-1020(fp)
   17428:	e1bf0017 	ldw	r6,-1024(fp)
   1742c:	e1ff0117 	ldw	r7,-1020(fp)
   17430:	31c4b03a 	or	r2,r6,r7
   17434:	1004c03a 	cmpne	r2,r2,zero
   17438:	10803fcc 	andi	r2,r2,255
   1743c:	10000d26 	beq	r2,zero,17474 <secp256k1_fe_mul_inner+0x30c4>
   17440:	d0a01617 	ldw	r2,-32680(gp)
   17444:	10c00317 	ldw	r3,12(r2)
   17448:	008001b4 	movhi	r2,6
   1744c:	10ad2c04 	addi	r2,r2,-19280
   17450:	d8800015 	stw	r2,0(sp)
   17454:	01c09984 	movi	r7,614
   17458:	018001b4 	movhi	r6,6
   1745c:	31ab2d04 	addi	r6,r6,-21324
   17460:	014001b4 	movhi	r5,6
   17464:	296b3804 	addi	r5,r5,-21280
   17468:	1809883a 	mov	r4,r3
   1746c:	00452600 	call	45260 <fprintf>
   17470:	00450340 	call	45034 <abort>
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[5]
   17474:	e0bdd217 	ldw	r2,-2232(fp)
   17478:	10800017 	ldw	r2,0(r2)
   1747c:	e0bf0215 	stw	r2,-1016(fp)
   17480:	e03f0315 	stw	zero,-1012(fp)
   17484:	e0bdd317 	ldw	r2,-2228(fp)
   17488:	10800504 	addi	r2,r2,20
   1748c:	10800017 	ldw	r2,0(r2)
   17490:	e0bf0415 	stw	r2,-1008(fp)
   17494:	e03f0515 	stw	zero,-1004(fp)
   17498:	e1bf0417 	ldw	r6,-1008(fp)
   1749c:	e1ff0517 	ldw	r7,-1004(fp)
   174a0:	e13f0217 	ldw	r4,-1016(fp)
   174a4:	e17f0317 	ldw	r5,-1012(fp)
   174a8:	00429400 	call	42940 <__muldi3>
   174ac:	1009883a 	mov	r4,r2
   174b0:	180b883a 	mov	r5,r3
   174b4:	2021883a 	mov	r16,r4
   174b8:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[4]
   174bc:	e0bdd217 	ldw	r2,-2232(fp)
   174c0:	10800104 	addi	r2,r2,4
   174c4:	10800017 	ldw	r2,0(r2)
   174c8:	e0bf0615 	stw	r2,-1000(fp)
   174cc:	e03f0715 	stw	zero,-996(fp)
   174d0:	e0bdd317 	ldw	r2,-2228(fp)
   174d4:	10800404 	addi	r2,r2,16
   174d8:	10800017 	ldw	r2,0(r2)
   174dc:	e0bf0815 	stw	r2,-992(fp)
   174e0:	e03f0915 	stw	zero,-988(fp)
   174e4:	e1bf0817 	ldw	r6,-992(fp)
   174e8:	e1ff0917 	ldw	r7,-988(fp)
   174ec:	e13f0617 	ldw	r4,-1000(fp)
   174f0:	e17f0717 	ldw	r5,-996(fp)
   174f4:	00429400 	call	42940 <__muldi3>
   174f8:	100f883a 	mov	r7,r2
   174fc:	1811883a 	mov	r8,r3
   17500:	380b883a 	mov	r5,r7
   17504:	400d883a 	mov	r6,r8
   17508:	8145883a 	add	r2,r16,r5
   1750c:	1409803a 	cmpltu	r4,r2,r16
   17510:	8987883a 	add	r3,r17,r6
   17514:	20c9883a 	add	r4,r4,r3
   17518:	2007883a 	mov	r3,r4
   1751c:	1025883a 	mov	r18,r2
   17520:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[3]
       + (uint64_t)a[3] * b[2]
   17524:	e0bdd217 	ldw	r2,-2232(fp)
   17528:	10800304 	addi	r2,r2,12
   1752c:	10800017 	ldw	r2,0(r2)
   17530:	e0bf0a15 	stw	r2,-984(fp)
   17534:	e03f0b15 	stw	zero,-980(fp)
   17538:	e0bdd317 	ldw	r2,-2228(fp)
   1753c:	10800204 	addi	r2,r2,8
   17540:	10800017 	ldw	r2,0(r2)
   17544:	e0bf0c15 	stw	r2,-976(fp)
   17548:	e03f0d15 	stw	zero,-972(fp)
   1754c:	e1bf0c17 	ldw	r6,-976(fp)
   17550:	e1ff0d17 	ldw	r7,-972(fp)
   17554:	e13f0a17 	ldw	r4,-984(fp)
   17558:	e17f0b17 	ldw	r5,-980(fp)
   1755c:	00429400 	call	42940 <__muldi3>
   17560:	1009883a 	mov	r4,r2
   17564:	180b883a 	mov	r5,r3
   17568:	2021883a 	mov	r16,r4
   1756c:	2823883a 	mov	r17,r5
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[5]
       + (uint64_t)a[1] * b[4]
       + (uint64_t)a[2] * b[3]
   17570:	e0bdd217 	ldw	r2,-2232(fp)
   17574:	10800204 	addi	r2,r2,8
   17578:	10800017 	ldw	r2,0(r2)
   1757c:	e0bf0e15 	stw	r2,-968(fp)
   17580:	e03f0f15 	stw	zero,-964(fp)
   17584:	e0bdd317 	ldw	r2,-2228(fp)
   17588:	10800304 	addi	r2,r2,12
   1758c:	10800017 	ldw	r2,0(r2)
   17590:	e0bf1015 	stw	r2,-960(fp)
   17594:	e03f1115 	stw	zero,-956(fp)
   17598:	e1bf1017 	ldw	r6,-960(fp)
   1759c:	e1ff1117 	ldw	r7,-956(fp)
   175a0:	e13f0e17 	ldw	r4,-968(fp)
   175a4:	e17f0f17 	ldw	r5,-964(fp)
   175a8:	00429400 	call	42940 <__muldi3>
   175ac:	100f883a 	mov	r7,r2
   175b0:	1811883a 	mov	r8,r3
   175b4:	380b883a 	mov	r5,r7
   175b8:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[2]
   175bc:	8145883a 	add	r2,r16,r5
   175c0:	1409803a 	cmpltu	r4,r2,r16
   175c4:	8987883a 	add	r3,r17,r6
   175c8:	20c9883a 	add	r4,r4,r3
   175cc:	2007883a 	mov	r3,r4
   175d0:	100b883a 	mov	r5,r2
   175d4:	180d883a 	mov	r6,r3
   175d8:	9145883a 	add	r2,r18,r5
   175dc:	1489803a 	cmpltu	r4,r2,r18
   175e0:	9987883a 	add	r3,r19,r6
   175e4:	20c9883a 	add	r4,r4,r3
   175e8:	2007883a 	mov	r3,r4
   175ec:	1025883a 	mov	r18,r2
   175f0:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[1]
       + (uint64_t)a[5] * b[0];
   175f4:	e0bdd217 	ldw	r2,-2232(fp)
   175f8:	10800504 	addi	r2,r2,20
   175fc:	10800017 	ldw	r2,0(r2)
   17600:	e0bf1215 	stw	r2,-952(fp)
   17604:	e03f1315 	stw	zero,-948(fp)
   17608:	e0bdd317 	ldw	r2,-2228(fp)
   1760c:	10800017 	ldw	r2,0(r2)
   17610:	e0bf1415 	stw	r2,-944(fp)
   17614:	e03f1515 	stw	zero,-940(fp)
   17618:	e1bf1417 	ldw	r6,-944(fp)
   1761c:	e1ff1517 	ldw	r7,-940(fp)
   17620:	e13f1217 	ldw	r4,-952(fp)
   17624:	e17f1317 	ldw	r5,-948(fp)
   17628:	00429400 	call	42940 <__muldi3>
   1762c:	1009883a 	mov	r4,r2
   17630:	180b883a 	mov	r5,r3
   17634:	2021883a 	mov	r16,r4
   17638:	2823883a 	mov	r17,r5

    c += (uint64_t)a[0] * b[5]
       + (uint64_t)a[1] * b[4]
       + (uint64_t)a[2] * b[3]
       + (uint64_t)a[3] * b[2]
       + (uint64_t)a[4] * b[1]
   1763c:	e0bdd217 	ldw	r2,-2232(fp)
   17640:	10800404 	addi	r2,r2,16
   17644:	10800017 	ldw	r2,0(r2)
   17648:	e0bf1615 	stw	r2,-936(fp)
   1764c:	e03f1715 	stw	zero,-932(fp)
   17650:	e0bdd317 	ldw	r2,-2228(fp)
   17654:	10800104 	addi	r2,r2,4
   17658:	10800017 	ldw	r2,0(r2)
   1765c:	e0bf1815 	stw	r2,-928(fp)
   17660:	e03f1915 	stw	zero,-924(fp)
   17664:	e1bf1817 	ldw	r6,-928(fp)
   17668:	e1ff1917 	ldw	r7,-924(fp)
   1766c:	e13f1617 	ldw	r4,-936(fp)
   17670:	e17f1717 	ldw	r5,-932(fp)
   17674:	00429400 	call	42940 <__muldi3>
   17678:	100f883a 	mov	r7,r2
   1767c:	1811883a 	mov	r8,r3
   17680:	380b883a 	mov	r5,r7
   17684:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[0];
   17688:	8145883a 	add	r2,r16,r5
   1768c:	1409803a 	cmpltu	r4,r2,r16
   17690:	8987883a 	add	r3,r17,r6
   17694:	20c9883a 	add	r4,r4,r3
   17698:	2007883a 	mov	r3,r4
   1769c:	100b883a 	mov	r5,r2
   176a0:	180d883a 	mov	r6,r3
   176a4:	9145883a 	add	r2,r18,r5
   176a8:	1489803a 	cmpltu	r4,r2,r18
   176ac:	9987883a 	add	r3,r19,r6
   176b0:	20c9883a 	add	r4,r4,r3
   176b4:	2007883a 	mov	r3,r4
   176b8:	100f883a 	mov	r7,r2
   176bc:	1811883a 	mov	r8,r3
    VERIFY_BITS(t4, 26);
    VERIFY_BITS(c, 39);
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[5]
   176c0:	e13db517 	ldw	r4,-2348(fp)
   176c4:	e17db617 	ldw	r5,-2344(fp)
   176c8:	21c5883a 	add	r2,r4,r7
   176cc:	110d803a 	cmpltu	r6,r2,r4
   176d0:	2a07883a 	add	r3,r5,r8
   176d4:	30c9883a 	add	r4,r6,r3
   176d8:	2007883a 	mov	r3,r4
   176dc:	e0bdb515 	stw	r2,-2348(fp)
   176e0:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[4]
       + (uint64_t)a[2] * b[3]
       + (uint64_t)a[3] * b[2]
       + (uint64_t)a[4] * b[1]
       + (uint64_t)a[5] * b[0];
    VERIFY_BITS(c, 63);
   176e4:	e0bdb517 	ldw	r2,-2348(fp)
   176e8:	e0fdb617 	ldw	r3,-2344(fp)
   176ec:	1804d7fa 	srli	r2,r3,31
   176f0:	10803fcc 	andi	r2,r2,255
   176f4:	10000d26 	beq	r2,zero,1772c <secp256k1_fe_mul_inner+0x337c>
   176f8:	d0a01617 	ldw	r2,-32680(gp)
   176fc:	10c00317 	ldw	r3,12(r2)
   17700:	008001b4 	movhi	r2,6
   17704:	10acdf04 	addi	r2,r2,-19588
   17708:	d8800015 	stw	r2,0(sp)
   1770c:	01c09c04 	movi	r7,624
   17710:	018001b4 	movhi	r6,6
   17714:	31ab2d04 	addi	r6,r6,-21324
   17718:	014001b4 	movhi	r5,6
   1771c:	296b3804 	addi	r5,r5,-21280
   17720:	1809883a 	mov	r4,r3
   17724:	00452600 	call	45260 <fprintf>
   17728:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[6] * b[9]
   1772c:	e0bdd217 	ldw	r2,-2232(fp)
   17730:	10800604 	addi	r2,r2,24
   17734:	10800017 	ldw	r2,0(r2)
   17738:	e0bf1a15 	stw	r2,-920(fp)
   1773c:	e03f1b15 	stw	zero,-916(fp)
   17740:	e0bdd317 	ldw	r2,-2228(fp)
   17744:	10800904 	addi	r2,r2,36
   17748:	10800017 	ldw	r2,0(r2)
   1774c:	e0bf1c15 	stw	r2,-912(fp)
   17750:	e03f1d15 	stw	zero,-908(fp)
   17754:	e1bf1c17 	ldw	r6,-912(fp)
   17758:	e1ff1d17 	ldw	r7,-908(fp)
   1775c:	e13f1a17 	ldw	r4,-920(fp)
   17760:	e17f1b17 	ldw	r5,-916(fp)
   17764:	00429400 	call	42940 <__muldi3>
   17768:	1009883a 	mov	r4,r2
   1776c:	180b883a 	mov	r5,r3
   17770:	2021883a 	mov	r16,r4
   17774:	2823883a 	mov	r17,r5
       + (uint64_t)a[7] * b[8]
   17778:	e0bdd217 	ldw	r2,-2232(fp)
   1777c:	10800704 	addi	r2,r2,28
   17780:	10800017 	ldw	r2,0(r2)
   17784:	e0bf1e15 	stw	r2,-904(fp)
   17788:	e03f1f15 	stw	zero,-900(fp)
   1778c:	e0bdd317 	ldw	r2,-2228(fp)
   17790:	10800804 	addi	r2,r2,32
   17794:	10800017 	ldw	r2,0(r2)
   17798:	e0bf2015 	stw	r2,-896(fp)
   1779c:	e03f2115 	stw	zero,-892(fp)
   177a0:	e1bf2017 	ldw	r6,-896(fp)
   177a4:	e1ff2117 	ldw	r7,-892(fp)
   177a8:	e13f1e17 	ldw	r4,-904(fp)
   177ac:	e17f1f17 	ldw	r5,-900(fp)
   177b0:	00429400 	call	42940 <__muldi3>
   177b4:	100f883a 	mov	r7,r2
   177b8:	1811883a 	mov	r8,r3
   177bc:	380b883a 	mov	r5,r7
   177c0:	400d883a 	mov	r6,r8
   177c4:	8145883a 	add	r2,r16,r5
   177c8:	1409803a 	cmpltu	r4,r2,r16
   177cc:	8987883a 	add	r3,r17,r6
   177d0:	20c9883a 	add	r4,r4,r3
   177d4:	2007883a 	mov	r3,r4
   177d8:	1025883a 	mov	r18,r2
   177dc:	1827883a 	mov	r19,r3
       + (uint64_t)a[8] * b[7]
       + (uint64_t)a[9] * b[6];
   177e0:	e0bdd217 	ldw	r2,-2232(fp)
   177e4:	10800904 	addi	r2,r2,36
   177e8:	10800017 	ldw	r2,0(r2)
   177ec:	e0bf2215 	stw	r2,-888(fp)
   177f0:	e03f2315 	stw	zero,-884(fp)
   177f4:	e0bdd317 	ldw	r2,-2228(fp)
   177f8:	10800604 	addi	r2,r2,24
   177fc:	10800017 	ldw	r2,0(r2)
   17800:	e0bf2415 	stw	r2,-880(fp)
   17804:	e03f2515 	stw	zero,-876(fp)
   17808:	e1bf2417 	ldw	r6,-880(fp)
   1780c:	e1ff2517 	ldw	r7,-876(fp)
   17810:	e13f2217 	ldw	r4,-888(fp)
   17814:	e17f2317 	ldw	r5,-884(fp)
   17818:	00429400 	call	42940 <__muldi3>
   1781c:	1009883a 	mov	r4,r2
   17820:	180b883a 	mov	r5,r3
   17824:	2021883a 	mov	r16,r4
   17828:	2823883a 	mov	r17,r5
       + (uint64_t)a[5] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[6] * b[9]
       + (uint64_t)a[7] * b[8]
       + (uint64_t)a[8] * b[7]
   1782c:	e0bdd217 	ldw	r2,-2232(fp)
   17830:	10800804 	addi	r2,r2,32
   17834:	10800017 	ldw	r2,0(r2)
   17838:	e0bf2615 	stw	r2,-872(fp)
   1783c:	e03f2715 	stw	zero,-868(fp)
   17840:	e0bdd317 	ldw	r2,-2228(fp)
   17844:	10800704 	addi	r2,r2,28
   17848:	10800017 	ldw	r2,0(r2)
   1784c:	e0bf2815 	stw	r2,-864(fp)
   17850:	e03f2915 	stw	zero,-860(fp)
   17854:	e1bf2817 	ldw	r6,-864(fp)
   17858:	e1ff2917 	ldw	r7,-860(fp)
   1785c:	e13f2617 	ldw	r4,-872(fp)
   17860:	e17f2717 	ldw	r5,-868(fp)
   17864:	00429400 	call	42940 <__muldi3>
   17868:	100f883a 	mov	r7,r2
   1786c:	1811883a 	mov	r8,r3
   17870:	380b883a 	mov	r5,r7
   17874:	400d883a 	mov	r6,r8
       + (uint64_t)a[9] * b[6];
   17878:	8145883a 	add	r2,r16,r5
   1787c:	1409803a 	cmpltu	r4,r2,r16
   17880:	8987883a 	add	r3,r17,r6
   17884:	20c9883a 	add	r4,r4,r3
   17888:	2007883a 	mov	r3,r4
   1788c:	100b883a 	mov	r5,r2
   17890:	180d883a 	mov	r6,r3
   17894:	9145883a 	add	r2,r18,r5
   17898:	1489803a 	cmpltu	r4,r2,r18
   1789c:	9987883a 	add	r3,r19,r6
   178a0:	20c9883a 	add	r4,r4,r3
   178a4:	2007883a 	mov	r3,r4
   178a8:	100f883a 	mov	r7,r2
   178ac:	1811883a 	mov	r8,r3
       + (uint64_t)a[3] * b[2]
       + (uint64_t)a[4] * b[1]
       + (uint64_t)a[5] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[6] * b[9]
   178b0:	e13db217 	ldw	r4,-2360(fp)
   178b4:	e17db317 	ldw	r5,-2356(fp)
   178b8:	21c5883a 	add	r2,r4,r7
   178bc:	110d803a 	cmpltu	r6,r2,r4
   178c0:	2a07883a 	add	r3,r5,r8
   178c4:	30c9883a 	add	r4,r6,r3
   178c8:	2007883a 	mov	r3,r4
   178cc:	e0bdb215 	stw	r2,-2360(fp)
   178d0:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[7] * b[8]
       + (uint64_t)a[8] * b[7]
       + (uint64_t)a[9] * b[6];
    VERIFY_BITS(d, 62);
   178d4:	e0bdb317 	ldw	r2,-2356(fp)
   178d8:	1004d7ba 	srli	r2,r2,30
   178dc:	e0bf2a15 	stw	r2,-856(fp)
   178e0:	e03f2b15 	stw	zero,-852(fp)
   178e4:	e0ff2a17 	ldw	r3,-856(fp)
   178e8:	e13f2b17 	ldw	r4,-852(fp)
   178ec:	1904b03a 	or	r2,r3,r4
   178f0:	1004c03a 	cmpne	r2,r2,zero
   178f4:	10803fcc 	andi	r2,r2,255
   178f8:	10000d26 	beq	r2,zero,17930 <secp256k1_fe_mul_inner+0x3580>
   178fc:	d0a01617 	ldw	r2,-32680(gp)
   17900:	10c00317 	ldw	r3,12(r2)
   17904:	008001b4 	movhi	r2,6
   17908:	10ad3704 	addi	r2,r2,-19236
   1790c:	d8800015 	stw	r2,0(sp)
   17910:	01c09d84 	movi	r7,630
   17914:	018001b4 	movhi	r6,6
   17918:	31ab2d04 	addi	r6,r6,-21324
   1791c:	014001b4 	movhi	r5,6
   17920:	296b3804 	addi	r5,r5,-21280
   17924:	1809883a 	mov	r4,r3
   17928:	00452600 	call	45260 <fprintf>
   1792c:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    u5 = d & M; d >>= 26; c += u5 * R0;
   17930:	e0bdaf17 	ldw	r2,-2372(fp)
   17934:	e0bf2c15 	stw	r2,-848(fp)
   17938:	e03f2d15 	stw	zero,-844(fp)
   1793c:	e0bdb217 	ldw	r2,-2360(fp)
   17940:	e1bf2c17 	ldw	r6,-848(fp)
   17944:	1184703a 	and	r2,r2,r6
   17948:	e0bdc615 	stw	r2,-2280(fp)
   1794c:	e0bdb317 	ldw	r2,-2356(fp)
   17950:	e1ff2d17 	ldw	r7,-844(fp)
   17954:	11c4703a 	and	r2,r2,r7
   17958:	e0bdc715 	stw	r2,-2276(fp)
   1795c:	e0bdb317 	ldw	r2,-2356(fp)
   17960:	100691ba 	slli	r3,r2,6
   17964:	e0bdb217 	ldw	r2,-2360(fp)
   17968:	1004d6ba 	srli	r2,r2,26
   1796c:	10c4b03a 	or	r2,r2,r3
   17970:	e0bdb215 	stw	r2,-2360(fp)
   17974:	e0bdb317 	ldw	r2,-2356(fp)
   17978:	1004d6ba 	srli	r2,r2,26
   1797c:	e0bdb315 	stw	r2,-2356(fp)
   17980:	e0bdb017 	ldw	r2,-2368(fp)
   17984:	e0bf2e15 	stw	r2,-840(fp)
   17988:	e03f2f15 	stw	zero,-836(fp)
   1798c:	e1bdc617 	ldw	r6,-2280(fp)
   17990:	e1fdc717 	ldw	r7,-2276(fp)
   17994:	e13f2e17 	ldw	r4,-840(fp)
   17998:	e17f2f17 	ldw	r5,-836(fp)
   1799c:	00429400 	call	42940 <__muldi3>
   179a0:	1009883a 	mov	r4,r2
   179a4:	180b883a 	mov	r5,r3
   179a8:	200f883a 	mov	r7,r4
   179ac:	2811883a 	mov	r8,r5
   179b0:	e13db517 	ldw	r4,-2348(fp)
   179b4:	e17db617 	ldw	r5,-2344(fp)
   179b8:	21c5883a 	add	r2,r4,r7
   179bc:	110d803a 	cmpltu	r6,r2,r4
   179c0:	2a07883a 	add	r3,r5,r8
   179c4:	30c9883a 	add	r4,r6,r3
   179c8:	2007883a 	mov	r3,r4
   179cc:	e0bdb515 	stw	r2,-2348(fp)
   179d0:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u5, 26);
   179d4:	e0bdc717 	ldw	r2,-2276(fp)
   179d8:	100691ba 	slli	r3,r2,6
   179dc:	e0bdc617 	ldw	r2,-2280(fp)
   179e0:	1004d6ba 	srli	r2,r2,26
   179e4:	e0bf3015 	stw	r2,-832(fp)
   179e8:	e0bf3017 	ldw	r2,-832(fp)
   179ec:	1886b03a 	or	r3,r3,r2
   179f0:	e0ff3015 	stw	r3,-832(fp)
   179f4:	e0bdc717 	ldw	r2,-2276(fp)
   179f8:	1004d6ba 	srli	r2,r2,26
   179fc:	e0bf3115 	stw	r2,-828(fp)
   17a00:	e0ff3017 	ldw	r3,-832(fp)
   17a04:	e13f3117 	ldw	r4,-828(fp)
   17a08:	1904b03a 	or	r2,r3,r4
   17a0c:	1004c03a 	cmpne	r2,r2,zero
   17a10:	10803fcc 	andi	r2,r2,255
   17a14:	10000d26 	beq	r2,zero,17a4c <secp256k1_fe_mul_inner+0x369c>
   17a18:	d0a01617 	ldw	r2,-32680(gp)
   17a1c:	10c00317 	ldw	r3,12(r2)
   17a20:	008001b4 	movhi	r2,6
   17a24:	10ad6304 	addi	r2,r2,-19060
   17a28:	d8800015 	stw	r2,0(sp)
   17a2c:	01c09e44 	movi	r7,633
   17a30:	018001b4 	movhi	r6,6
   17a34:	31ab2d04 	addi	r6,r6,-21324
   17a38:	014001b4 	movhi	r5,6
   17a3c:	296b3804 	addi	r5,r5,-21280
   17a40:	1809883a 	mov	r4,r3
   17a44:	00452600 	call	45260 <fprintf>
   17a48:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 36);
   17a4c:	e0bdb317 	ldw	r2,-2356(fp)
   17a50:	1004d13a 	srli	r2,r2,4
   17a54:	e0bf3215 	stw	r2,-824(fp)
   17a58:	e03f3315 	stw	zero,-820(fp)
   17a5c:	e1bf3217 	ldw	r6,-824(fp)
   17a60:	e1ff3317 	ldw	r7,-820(fp)
   17a64:	31c4b03a 	or	r2,r6,r7
   17a68:	1004c03a 	cmpne	r2,r2,zero
   17a6c:	10803fcc 	andi	r2,r2,255
   17a70:	10000d26 	beq	r2,zero,17aa8 <secp256k1_fe_mul_inner+0x36f8>
   17a74:	d0a01617 	ldw	r2,-32680(gp)
   17a78:	10c00317 	ldw	r3,12(r2)
   17a7c:	008001b4 	movhi	r2,6
   17a80:	10ad4d04 	addi	r2,r2,-19148
   17a84:	d8800015 	stw	r2,0(sp)
   17a88:	01c09e84 	movi	r7,634
   17a8c:	018001b4 	movhi	r6,6
   17a90:	31ab2d04 	addi	r6,r6,-21324
   17a94:	014001b4 	movhi	r5,6
   17a98:	296b3804 	addi	r5,r5,-21280
   17a9c:	1809883a 	mov	r4,r3
   17aa0:	00452600 	call	45260 <fprintf>
   17aa4:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u5 0 0 0 0 0 t9 0 0 0 c-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    t5 = c & M; c >>= 26; c += u5 * R1;
   17aa8:	e0fdb517 	ldw	r3,-2348(fp)
   17aac:	e0bdaf17 	ldw	r2,-2372(fp)
   17ab0:	1884703a 	and	r2,r3,r2
   17ab4:	e0bdc815 	stw	r2,-2272(fp)
   17ab8:	e0bdb617 	ldw	r2,-2344(fp)
   17abc:	100691ba 	slli	r3,r2,6
   17ac0:	e0bdb517 	ldw	r2,-2348(fp)
   17ac4:	1004d6ba 	srli	r2,r2,26
   17ac8:	10c4b03a 	or	r2,r2,r3
   17acc:	e0bdb515 	stw	r2,-2348(fp)
   17ad0:	e0bdb617 	ldw	r2,-2344(fp)
   17ad4:	1004d6ba 	srli	r2,r2,26
   17ad8:	e0bdb615 	stw	r2,-2344(fp)
   17adc:	e0bdb117 	ldw	r2,-2364(fp)
   17ae0:	e0bf3415 	stw	r2,-816(fp)
   17ae4:	e03f3515 	stw	zero,-812(fp)
   17ae8:	e1bdc617 	ldw	r6,-2280(fp)
   17aec:	e1fdc717 	ldw	r7,-2276(fp)
   17af0:	e13f3417 	ldw	r4,-816(fp)
   17af4:	e17f3517 	ldw	r5,-812(fp)
   17af8:	00429400 	call	42940 <__muldi3>
   17afc:	1009883a 	mov	r4,r2
   17b00:	180b883a 	mov	r5,r3
   17b04:	200f883a 	mov	r7,r4
   17b08:	2811883a 	mov	r8,r5
   17b0c:	e13db517 	ldw	r4,-2348(fp)
   17b10:	e17db617 	ldw	r5,-2344(fp)
   17b14:	21c5883a 	add	r2,r4,r7
   17b18:	110d803a 	cmpltu	r6,r2,r4
   17b1c:	2a07883a 	add	r3,r5,r8
   17b20:	30c9883a 	add	r4,r6,r3
   17b24:	2007883a 	mov	r3,r4
   17b28:	e0bdb515 	stw	r2,-2348(fp)
   17b2c:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t5, 26);
   17b30:	e0bdc817 	ldw	r2,-2272(fp)
   17b34:	1004d6ba 	srli	r2,r2,26
   17b38:	1004c03a 	cmpne	r2,r2,zero
   17b3c:	10803fcc 	andi	r2,r2,255
   17b40:	10000d26 	beq	r2,zero,17b78 <secp256k1_fe_mul_inner+0x37c8>
   17b44:	d0a01617 	ldw	r2,-32680(gp)
   17b48:	10c00317 	ldw	r3,12(r2)
   17b4c:	008001b4 	movhi	r2,6
   17b50:	10ad6e04 	addi	r2,r2,-19016
   17b54:	d8800015 	stw	r2,0(sp)
   17b58:	01c09f84 	movi	r7,638
   17b5c:	018001b4 	movhi	r6,6
   17b60:	31ab2d04 	addi	r6,r6,-21324
   17b64:	014001b4 	movhi	r5,6
   17b68:	296b3804 	addi	r5,r5,-21280
   17b6c:	1809883a 	mov	r4,r3
   17b70:	00452600 	call	45260 <fprintf>
   17b74:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   17b78:	e0bdb617 	ldw	r2,-2344(fp)
   17b7c:	1004d1fa 	srli	r2,r2,7
   17b80:	e0bf3615 	stw	r2,-808(fp)
   17b84:	e03f3715 	stw	zero,-804(fp)
   17b88:	e0ff3617 	ldw	r3,-808(fp)
   17b8c:	e13f3717 	ldw	r4,-804(fp)
   17b90:	1904b03a 	or	r2,r3,r4
   17b94:	1004c03a 	cmpne	r2,r2,zero
   17b98:	10803fcc 	andi	r2,r2,255
   17b9c:	10000d26 	beq	r2,zero,17bd4 <secp256k1_fe_mul_inner+0x3824>
   17ba0:	d0a01617 	ldw	r2,-32680(gp)
   17ba4:	10c00317 	ldw	r3,12(r2)
   17ba8:	008001b4 	movhi	r2,6
   17bac:	10ad2c04 	addi	r2,r2,-19280
   17bb0:	d8800015 	stw	r2,0(sp)
   17bb4:	01c09fc4 	movi	r7,639
   17bb8:	018001b4 	movhi	r6,6
   17bbc:	31ab2d04 	addi	r6,r6,-21324
   17bc0:	014001b4 	movhi	r5,6
   17bc4:	296b3804 	addi	r5,r5,-21280
   17bc8:	1809883a 	mov	r4,r3
   17bcc:	00452600 	call	45260 <fprintf>
   17bd0:	00450340 	call	45034 <abort>
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[6]
   17bd4:	e0bdd217 	ldw	r2,-2232(fp)
   17bd8:	10800017 	ldw	r2,0(r2)
   17bdc:	e0bf3815 	stw	r2,-800(fp)
   17be0:	e03f3915 	stw	zero,-796(fp)
   17be4:	e0bdd317 	ldw	r2,-2228(fp)
   17be8:	10800604 	addi	r2,r2,24
   17bec:	10800017 	ldw	r2,0(r2)
   17bf0:	e0bf3a15 	stw	r2,-792(fp)
   17bf4:	e03f3b15 	stw	zero,-788(fp)
   17bf8:	e1bf3a17 	ldw	r6,-792(fp)
   17bfc:	e1ff3b17 	ldw	r7,-788(fp)
   17c00:	e13f3817 	ldw	r4,-800(fp)
   17c04:	e17f3917 	ldw	r5,-796(fp)
   17c08:	00429400 	call	42940 <__muldi3>
   17c0c:	1009883a 	mov	r4,r2
   17c10:	180b883a 	mov	r5,r3
   17c14:	2021883a 	mov	r16,r4
   17c18:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[5]
   17c1c:	e0bdd217 	ldw	r2,-2232(fp)
   17c20:	10800104 	addi	r2,r2,4
   17c24:	10800017 	ldw	r2,0(r2)
   17c28:	e0bf3c15 	stw	r2,-784(fp)
   17c2c:	e03f3d15 	stw	zero,-780(fp)
   17c30:	e0bdd317 	ldw	r2,-2228(fp)
   17c34:	10800504 	addi	r2,r2,20
   17c38:	10800017 	ldw	r2,0(r2)
   17c3c:	e0bf3e15 	stw	r2,-776(fp)
   17c40:	e03f3f15 	stw	zero,-772(fp)
   17c44:	e1bf3e17 	ldw	r6,-776(fp)
   17c48:	e1ff3f17 	ldw	r7,-772(fp)
   17c4c:	e13f3c17 	ldw	r4,-784(fp)
   17c50:	e17f3d17 	ldw	r5,-780(fp)
   17c54:	00429400 	call	42940 <__muldi3>
   17c58:	100f883a 	mov	r7,r2
   17c5c:	1811883a 	mov	r8,r3
   17c60:	380b883a 	mov	r5,r7
   17c64:	400d883a 	mov	r6,r8
   17c68:	8145883a 	add	r2,r16,r5
   17c6c:	1409803a 	cmpltu	r4,r2,r16
   17c70:	8987883a 	add	r3,r17,r6
   17c74:	20c9883a 	add	r4,r4,r3
   17c78:	2007883a 	mov	r3,r4
   17c7c:	1025883a 	mov	r18,r2
   17c80:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[4]
       + (uint64_t)a[3] * b[3]
   17c84:	e0bdd217 	ldw	r2,-2232(fp)
   17c88:	10800304 	addi	r2,r2,12
   17c8c:	10800017 	ldw	r2,0(r2)
   17c90:	e0bf4015 	stw	r2,-768(fp)
   17c94:	e03f4115 	stw	zero,-764(fp)
   17c98:	e0bdd317 	ldw	r2,-2228(fp)
   17c9c:	10800304 	addi	r2,r2,12
   17ca0:	10800017 	ldw	r2,0(r2)
   17ca4:	e0bf4215 	stw	r2,-760(fp)
   17ca8:	e03f4315 	stw	zero,-756(fp)
   17cac:	e1bf4217 	ldw	r6,-760(fp)
   17cb0:	e1ff4317 	ldw	r7,-756(fp)
   17cb4:	e13f4017 	ldw	r4,-768(fp)
   17cb8:	e17f4117 	ldw	r5,-764(fp)
   17cbc:	00429400 	call	42940 <__muldi3>
   17cc0:	1009883a 	mov	r4,r2
   17cc4:	180b883a 	mov	r5,r3
   17cc8:	2021883a 	mov	r16,r4
   17ccc:	2823883a 	mov	r17,r5
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[6]
       + (uint64_t)a[1] * b[5]
       + (uint64_t)a[2] * b[4]
   17cd0:	e0bdd217 	ldw	r2,-2232(fp)
   17cd4:	10800204 	addi	r2,r2,8
   17cd8:	10800017 	ldw	r2,0(r2)
   17cdc:	e0bf4415 	stw	r2,-752(fp)
   17ce0:	e03f4515 	stw	zero,-748(fp)
   17ce4:	e0bdd317 	ldw	r2,-2228(fp)
   17ce8:	10800404 	addi	r2,r2,16
   17cec:	10800017 	ldw	r2,0(r2)
   17cf0:	e0bf4615 	stw	r2,-744(fp)
   17cf4:	e03f4715 	stw	zero,-740(fp)
   17cf8:	e1bf4617 	ldw	r6,-744(fp)
   17cfc:	e1ff4717 	ldw	r7,-740(fp)
   17d00:	e13f4417 	ldw	r4,-752(fp)
   17d04:	e17f4517 	ldw	r5,-748(fp)
   17d08:	00429400 	call	42940 <__muldi3>
   17d0c:	100f883a 	mov	r7,r2
   17d10:	1811883a 	mov	r8,r3
   17d14:	380b883a 	mov	r5,r7
   17d18:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[3]
   17d1c:	8145883a 	add	r2,r16,r5
   17d20:	1409803a 	cmpltu	r4,r2,r16
   17d24:	8987883a 	add	r3,r17,r6
   17d28:	20c9883a 	add	r4,r4,r3
   17d2c:	2007883a 	mov	r3,r4
   17d30:	100b883a 	mov	r5,r2
   17d34:	180d883a 	mov	r6,r3
   17d38:	9145883a 	add	r2,r18,r5
   17d3c:	1489803a 	cmpltu	r4,r2,r18
   17d40:	9987883a 	add	r3,r19,r6
   17d44:	20c9883a 	add	r4,r4,r3
   17d48:	2007883a 	mov	r3,r4
   17d4c:	1025883a 	mov	r18,r2
   17d50:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[2]
       + (uint64_t)a[5] * b[1]
   17d54:	e0bdd217 	ldw	r2,-2232(fp)
   17d58:	10800504 	addi	r2,r2,20
   17d5c:	10800017 	ldw	r2,0(r2)
   17d60:	e0bf4815 	stw	r2,-736(fp)
   17d64:	e03f4915 	stw	zero,-732(fp)
   17d68:	e0bdd317 	ldw	r2,-2228(fp)
   17d6c:	10800104 	addi	r2,r2,4
   17d70:	10800017 	ldw	r2,0(r2)
   17d74:	e0bf4a15 	stw	r2,-728(fp)
   17d78:	e03f4b15 	stw	zero,-724(fp)
   17d7c:	e1bf4a17 	ldw	r6,-728(fp)
   17d80:	e1ff4b17 	ldw	r7,-724(fp)
   17d84:	e13f4817 	ldw	r4,-736(fp)
   17d88:	e17f4917 	ldw	r5,-732(fp)
   17d8c:	00429400 	call	42940 <__muldi3>
   17d90:	1009883a 	mov	r4,r2
   17d94:	180b883a 	mov	r5,r3
   17d98:	2021883a 	mov	r16,r4
   17d9c:	2823883a 	mov	r17,r5

    c += (uint64_t)a[0] * b[6]
       + (uint64_t)a[1] * b[5]
       + (uint64_t)a[2] * b[4]
       + (uint64_t)a[3] * b[3]
       + (uint64_t)a[4] * b[2]
   17da0:	e0bdd217 	ldw	r2,-2232(fp)
   17da4:	10800404 	addi	r2,r2,16
   17da8:	10800017 	ldw	r2,0(r2)
   17dac:	e0bf4c15 	stw	r2,-720(fp)
   17db0:	e03f4d15 	stw	zero,-716(fp)
   17db4:	e0bdd317 	ldw	r2,-2228(fp)
   17db8:	10800204 	addi	r2,r2,8
   17dbc:	10800017 	ldw	r2,0(r2)
   17dc0:	e0bf4e15 	stw	r2,-712(fp)
   17dc4:	e03f4f15 	stw	zero,-708(fp)
   17dc8:	e1bf4e17 	ldw	r6,-712(fp)
   17dcc:	e1ff4f17 	ldw	r7,-708(fp)
   17dd0:	e13f4c17 	ldw	r4,-720(fp)
   17dd4:	e17f4d17 	ldw	r5,-716(fp)
   17dd8:	00429400 	call	42940 <__muldi3>
   17ddc:	100f883a 	mov	r7,r2
   17de0:	1811883a 	mov	r8,r3
   17de4:	380b883a 	mov	r5,r7
   17de8:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[1]
   17dec:	8145883a 	add	r2,r16,r5
   17df0:	1409803a 	cmpltu	r4,r2,r16
   17df4:	8987883a 	add	r3,r17,r6
   17df8:	20c9883a 	add	r4,r4,r3
   17dfc:	2007883a 	mov	r3,r4
   17e00:	100b883a 	mov	r5,r2
   17e04:	180d883a 	mov	r6,r3
   17e08:	9145883a 	add	r2,r18,r5
   17e0c:	1489803a 	cmpltu	r4,r2,r18
   17e10:	9987883a 	add	r3,r19,r6
   17e14:	20c9883a 	add	r4,r4,r3
   17e18:	2007883a 	mov	r3,r4
   17e1c:	1021883a 	mov	r16,r2
   17e20:	1823883a 	mov	r17,r3
       + (uint64_t)a[6] * b[0];
   17e24:	e0bdd217 	ldw	r2,-2232(fp)
   17e28:	10800604 	addi	r2,r2,24
   17e2c:	10800017 	ldw	r2,0(r2)
   17e30:	e0bf5015 	stw	r2,-704(fp)
   17e34:	e03f5115 	stw	zero,-700(fp)
   17e38:	e0bdd317 	ldw	r2,-2228(fp)
   17e3c:	10800017 	ldw	r2,0(r2)
   17e40:	e0bf5215 	stw	r2,-696(fp)
   17e44:	e03f5315 	stw	zero,-692(fp)
   17e48:	e1bf5217 	ldw	r6,-696(fp)
   17e4c:	e1ff5317 	ldw	r7,-692(fp)
   17e50:	e13f5017 	ldw	r4,-704(fp)
   17e54:	e17f5117 	ldw	r5,-700(fp)
   17e58:	00429400 	call	42940 <__muldi3>
   17e5c:	100f883a 	mov	r7,r2
   17e60:	1811883a 	mov	r8,r3
   17e64:	380b883a 	mov	r5,r7
   17e68:	400d883a 	mov	r6,r8
   17e6c:	8145883a 	add	r2,r16,r5
   17e70:	1409803a 	cmpltu	r4,r2,r16
   17e74:	8987883a 	add	r3,r17,r6
   17e78:	20c9883a 	add	r4,r4,r3
   17e7c:	2007883a 	mov	r3,r4
   17e80:	100f883a 	mov	r7,r2
   17e84:	1811883a 	mov	r8,r3
    VERIFY_BITS(t5, 26);
    VERIFY_BITS(c, 39);
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[6]
   17e88:	e13db517 	ldw	r4,-2348(fp)
   17e8c:	e17db617 	ldw	r5,-2344(fp)
   17e90:	21c5883a 	add	r2,r4,r7
   17e94:	110d803a 	cmpltu	r6,r2,r4
   17e98:	2a07883a 	add	r3,r5,r8
   17e9c:	30c9883a 	add	r4,r6,r3
   17ea0:	2007883a 	mov	r3,r4
   17ea4:	e0bdb515 	stw	r2,-2348(fp)
   17ea8:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[2] * b[4]
       + (uint64_t)a[3] * b[3]
       + (uint64_t)a[4] * b[2]
       + (uint64_t)a[5] * b[1]
       + (uint64_t)a[6] * b[0];
    VERIFY_BITS(c, 63);
   17eac:	e0bdb517 	ldw	r2,-2348(fp)
   17eb0:	e0fdb617 	ldw	r3,-2344(fp)
   17eb4:	1804d7fa 	srli	r2,r3,31
   17eb8:	10803fcc 	andi	r2,r2,255
   17ebc:	10000d26 	beq	r2,zero,17ef4 <secp256k1_fe_mul_inner+0x3b44>
   17ec0:	d0a01617 	ldw	r2,-32680(gp)
   17ec4:	10c00317 	ldw	r3,12(r2)
   17ec8:	008001b4 	movhi	r2,6
   17ecc:	10acdf04 	addi	r2,r2,-19588
   17ed0:	d8800015 	stw	r2,0(sp)
   17ed4:	01c0a284 	movi	r7,650
   17ed8:	018001b4 	movhi	r6,6
   17edc:	31ab2d04 	addi	r6,r6,-21324
   17ee0:	014001b4 	movhi	r5,6
   17ee4:	296b3804 	addi	r5,r5,-21280
   17ee8:	1809883a 	mov	r4,r3
   17eec:	00452600 	call	45260 <fprintf>
   17ef0:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[7] * b[9]
   17ef4:	e0bdd217 	ldw	r2,-2232(fp)
   17ef8:	10800704 	addi	r2,r2,28
   17efc:	10800017 	ldw	r2,0(r2)
   17f00:	e0bf5415 	stw	r2,-688(fp)
   17f04:	e03f5515 	stw	zero,-684(fp)
   17f08:	e0bdd317 	ldw	r2,-2228(fp)
   17f0c:	10800904 	addi	r2,r2,36
   17f10:	10800017 	ldw	r2,0(r2)
   17f14:	e0bf5615 	stw	r2,-680(fp)
   17f18:	e03f5715 	stw	zero,-676(fp)
   17f1c:	e1bf5617 	ldw	r6,-680(fp)
   17f20:	e1ff5717 	ldw	r7,-676(fp)
   17f24:	e13f5417 	ldw	r4,-688(fp)
   17f28:	e17f5517 	ldw	r5,-684(fp)
   17f2c:	00429400 	call	42940 <__muldi3>
   17f30:	1009883a 	mov	r4,r2
   17f34:	180b883a 	mov	r5,r3
   17f38:	2021883a 	mov	r16,r4
   17f3c:	2823883a 	mov	r17,r5
       + (uint64_t)a[8] * b[8]
   17f40:	e0bdd217 	ldw	r2,-2232(fp)
   17f44:	10800804 	addi	r2,r2,32
   17f48:	10800017 	ldw	r2,0(r2)
   17f4c:	e0bf5815 	stw	r2,-672(fp)
   17f50:	e03f5915 	stw	zero,-668(fp)
   17f54:	e0bdd317 	ldw	r2,-2228(fp)
   17f58:	10800804 	addi	r2,r2,32
   17f5c:	10800017 	ldw	r2,0(r2)
   17f60:	e0bf5a15 	stw	r2,-664(fp)
   17f64:	e03f5b15 	stw	zero,-660(fp)
   17f68:	e1bf5a17 	ldw	r6,-664(fp)
   17f6c:	e1ff5b17 	ldw	r7,-660(fp)
   17f70:	e13f5817 	ldw	r4,-672(fp)
   17f74:	e17f5917 	ldw	r5,-668(fp)
   17f78:	00429400 	call	42940 <__muldi3>
   17f7c:	100f883a 	mov	r7,r2
   17f80:	1811883a 	mov	r8,r3
   17f84:	380b883a 	mov	r5,r7
   17f88:	400d883a 	mov	r6,r8
   17f8c:	8145883a 	add	r2,r16,r5
   17f90:	1409803a 	cmpltu	r4,r2,r16
   17f94:	8987883a 	add	r3,r17,r6
   17f98:	20c9883a 	add	r4,r4,r3
   17f9c:	2007883a 	mov	r3,r4
   17fa0:	1021883a 	mov	r16,r2
   17fa4:	1823883a 	mov	r17,r3
       + (uint64_t)a[9] * b[7];
   17fa8:	e0bdd217 	ldw	r2,-2232(fp)
   17fac:	10800904 	addi	r2,r2,36
   17fb0:	10800017 	ldw	r2,0(r2)
   17fb4:	e0bf5c15 	stw	r2,-656(fp)
   17fb8:	e03f5d15 	stw	zero,-652(fp)
   17fbc:	e0bdd317 	ldw	r2,-2228(fp)
   17fc0:	10800704 	addi	r2,r2,28
   17fc4:	10800017 	ldw	r2,0(r2)
   17fc8:	e0bf5e15 	stw	r2,-648(fp)
   17fcc:	e03f5f15 	stw	zero,-644(fp)
   17fd0:	e1bf5e17 	ldw	r6,-648(fp)
   17fd4:	e1ff5f17 	ldw	r7,-644(fp)
   17fd8:	e13f5c17 	ldw	r4,-656(fp)
   17fdc:	e17f5d17 	ldw	r5,-652(fp)
   17fe0:	00429400 	call	42940 <__muldi3>
   17fe4:	100f883a 	mov	r7,r2
   17fe8:	1811883a 	mov	r8,r3
   17fec:	380b883a 	mov	r5,r7
   17ff0:	400d883a 	mov	r6,r8
   17ff4:	8145883a 	add	r2,r16,r5
   17ff8:	1409803a 	cmpltu	r4,r2,r16
   17ffc:	8987883a 	add	r3,r17,r6
   18000:	20c9883a 	add	r4,r4,r3
   18004:	2007883a 	mov	r3,r4
   18008:	100f883a 	mov	r7,r2
   1800c:	1811883a 	mov	r8,r3
       + (uint64_t)a[4] * b[2]
       + (uint64_t)a[5] * b[1]
       + (uint64_t)a[6] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[7] * b[9]
   18010:	e13db217 	ldw	r4,-2360(fp)
   18014:	e17db317 	ldw	r5,-2356(fp)
   18018:	21c5883a 	add	r2,r4,r7
   1801c:	110d803a 	cmpltu	r6,r2,r4
   18020:	2a07883a 	add	r3,r5,r8
   18024:	30c9883a 	add	r4,r6,r3
   18028:	2007883a 	mov	r3,r4
   1802c:	e0bdb215 	stw	r2,-2360(fp)
   18030:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[8] * b[8]
       + (uint64_t)a[9] * b[7];
    VERIFY_BITS(d, 61);
   18034:	e0bdb317 	ldw	r2,-2356(fp)
   18038:	1004d77a 	srli	r2,r2,29
   1803c:	e0bf6015 	stw	r2,-640(fp)
   18040:	e03f6115 	stw	zero,-636(fp)
   18044:	e1bf6017 	ldw	r6,-640(fp)
   18048:	e1ff6117 	ldw	r7,-636(fp)
   1804c:	31c4b03a 	or	r2,r6,r7
   18050:	1004c03a 	cmpne	r2,r2,zero
   18054:	10803fcc 	andi	r2,r2,255
   18058:	10000d26 	beq	r2,zero,18090 <secp256k1_fe_mul_inner+0x3ce0>
   1805c:	d0a01617 	ldw	r2,-32680(gp)
   18060:	10c00317 	ldw	r3,12(r2)
   18064:	008001b4 	movhi	r2,6
   18068:	10ad7904 	addi	r2,r2,-18972
   1806c:	d8800015 	stw	r2,0(sp)
   18070:	01c0a3c4 	movi	r7,655
   18074:	018001b4 	movhi	r6,6
   18078:	31ab2d04 	addi	r6,r6,-21324
   1807c:	014001b4 	movhi	r5,6
   18080:	296b3804 	addi	r5,r5,-21280
   18084:	1809883a 	mov	r4,r3
   18088:	00452600 	call	45260 <fprintf>
   1808c:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    u6 = d & M; d >>= 26; c += u6 * R0;
   18090:	e0bdaf17 	ldw	r2,-2372(fp)
   18094:	e0bf6215 	stw	r2,-632(fp)
   18098:	e03f6315 	stw	zero,-628(fp)
   1809c:	e0bdb217 	ldw	r2,-2360(fp)
   180a0:	e0ff6217 	ldw	r3,-632(fp)
   180a4:	10c4703a 	and	r2,r2,r3
   180a8:	e0bdc915 	stw	r2,-2268(fp)
   180ac:	e0bdb317 	ldw	r2,-2356(fp)
   180b0:	e13f6317 	ldw	r4,-628(fp)
   180b4:	1104703a 	and	r2,r2,r4
   180b8:	e0bdca15 	stw	r2,-2264(fp)
   180bc:	e0bdb317 	ldw	r2,-2356(fp)
   180c0:	100691ba 	slli	r3,r2,6
   180c4:	e0bdb217 	ldw	r2,-2360(fp)
   180c8:	1004d6ba 	srli	r2,r2,26
   180cc:	10c4b03a 	or	r2,r2,r3
   180d0:	e0bdb215 	stw	r2,-2360(fp)
   180d4:	e0bdb317 	ldw	r2,-2356(fp)
   180d8:	1004d6ba 	srli	r2,r2,26
   180dc:	e0bdb315 	stw	r2,-2356(fp)
   180e0:	e0bdb017 	ldw	r2,-2368(fp)
   180e4:	e0bf6415 	stw	r2,-624(fp)
   180e8:	e03f6515 	stw	zero,-620(fp)
   180ec:	e1bdc917 	ldw	r6,-2268(fp)
   180f0:	e1fdca17 	ldw	r7,-2264(fp)
   180f4:	e13f6417 	ldw	r4,-624(fp)
   180f8:	e17f6517 	ldw	r5,-620(fp)
   180fc:	00429400 	call	42940 <__muldi3>
   18100:	1009883a 	mov	r4,r2
   18104:	180b883a 	mov	r5,r3
   18108:	200f883a 	mov	r7,r4
   1810c:	2811883a 	mov	r8,r5
   18110:	e13db517 	ldw	r4,-2348(fp)
   18114:	e17db617 	ldw	r5,-2344(fp)
   18118:	21c5883a 	add	r2,r4,r7
   1811c:	110d803a 	cmpltu	r6,r2,r4
   18120:	2a07883a 	add	r3,r5,r8
   18124:	30c9883a 	add	r4,r6,r3
   18128:	2007883a 	mov	r3,r4
   1812c:	e0bdb515 	stw	r2,-2348(fp)
   18130:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u6, 26);
   18134:	e0bdca17 	ldw	r2,-2264(fp)
   18138:	100691ba 	slli	r3,r2,6
   1813c:	e0bdc917 	ldw	r2,-2268(fp)
   18140:	1004d6ba 	srli	r2,r2,26
   18144:	e0bf6615 	stw	r2,-616(fp)
   18148:	e1bf6617 	ldw	r6,-616(fp)
   1814c:	1986b03a 	or	r3,r3,r6
   18150:	e0ff6615 	stw	r3,-616(fp)
   18154:	e0bdca17 	ldw	r2,-2264(fp)
   18158:	1004d6ba 	srli	r2,r2,26
   1815c:	e0bf6715 	stw	r2,-612(fp)
   18160:	e1ff6617 	ldw	r7,-616(fp)
   18164:	e0ff6717 	ldw	r3,-612(fp)
   18168:	38c4b03a 	or	r2,r7,r3
   1816c:	1004c03a 	cmpne	r2,r2,zero
   18170:	10803fcc 	andi	r2,r2,255
   18174:	10000d26 	beq	r2,zero,181ac <secp256k1_fe_mul_inner+0x3dfc>
   18178:	d0a01617 	ldw	r2,-32680(gp)
   1817c:	10c00317 	ldw	r3,12(r2)
   18180:	008001b4 	movhi	r2,6
   18184:	10ad8404 	addi	r2,r2,-18928
   18188:	d8800015 	stw	r2,0(sp)
   1818c:	01c0a484 	movi	r7,658
   18190:	018001b4 	movhi	r6,6
   18194:	31ab2d04 	addi	r6,r6,-21324
   18198:	014001b4 	movhi	r5,6
   1819c:	296b3804 	addi	r5,r5,-21280
   181a0:	1809883a 	mov	r4,r3
   181a4:	00452600 	call	45260 <fprintf>
   181a8:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 35);
   181ac:	e0bdb317 	ldw	r2,-2356(fp)
   181b0:	1004d0fa 	srli	r2,r2,3
   181b4:	e0bf6815 	stw	r2,-608(fp)
   181b8:	e03f6915 	stw	zero,-604(fp)
   181bc:	e13f6817 	ldw	r4,-608(fp)
   181c0:	e1bf6917 	ldw	r6,-604(fp)
   181c4:	2184b03a 	or	r2,r4,r6
   181c8:	1004c03a 	cmpne	r2,r2,zero
   181cc:	10803fcc 	andi	r2,r2,255
   181d0:	10000d26 	beq	r2,zero,18208 <secp256k1_fe_mul_inner+0x3e58>
   181d4:	d0a01617 	ldw	r2,-32680(gp)
   181d8:	10c00317 	ldw	r3,12(r2)
   181dc:	008001b4 	movhi	r2,6
   181e0:	10ad8f04 	addi	r2,r2,-18884
   181e4:	d8800015 	stw	r2,0(sp)
   181e8:	01c0a4c4 	movi	r7,659
   181ec:	018001b4 	movhi	r6,6
   181f0:	31ab2d04 	addi	r6,r6,-21324
   181f4:	014001b4 	movhi	r5,6
   181f8:	296b3804 	addi	r5,r5,-21280
   181fc:	1809883a 	mov	r4,r3
   18200:	00452600 	call	45260 <fprintf>
   18204:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u6 0 0 0 0 0 0 t9 0 0 c-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    t6 = c & M; c >>= 26; c += u6 * R1;
   18208:	e0fdb517 	ldw	r3,-2348(fp)
   1820c:	e0bdaf17 	ldw	r2,-2372(fp)
   18210:	1884703a 	and	r2,r3,r2
   18214:	e0bdcb15 	stw	r2,-2260(fp)
   18218:	e0bdb617 	ldw	r2,-2344(fp)
   1821c:	100691ba 	slli	r3,r2,6
   18220:	e0bdb517 	ldw	r2,-2348(fp)
   18224:	1004d6ba 	srli	r2,r2,26
   18228:	10c4b03a 	or	r2,r2,r3
   1822c:	e0bdb515 	stw	r2,-2348(fp)
   18230:	e0bdb617 	ldw	r2,-2344(fp)
   18234:	1004d6ba 	srli	r2,r2,26
   18238:	e0bdb615 	stw	r2,-2344(fp)
   1823c:	e0bdb117 	ldw	r2,-2364(fp)
   18240:	e0bf6a15 	stw	r2,-600(fp)
   18244:	e03f6b15 	stw	zero,-596(fp)
   18248:	e1bdc917 	ldw	r6,-2268(fp)
   1824c:	e1fdca17 	ldw	r7,-2264(fp)
   18250:	e13f6a17 	ldw	r4,-600(fp)
   18254:	e17f6b17 	ldw	r5,-596(fp)
   18258:	00429400 	call	42940 <__muldi3>
   1825c:	1009883a 	mov	r4,r2
   18260:	180b883a 	mov	r5,r3
   18264:	200f883a 	mov	r7,r4
   18268:	2811883a 	mov	r8,r5
   1826c:	e13db517 	ldw	r4,-2348(fp)
   18270:	e17db617 	ldw	r5,-2344(fp)
   18274:	21c5883a 	add	r2,r4,r7
   18278:	110d803a 	cmpltu	r6,r2,r4
   1827c:	2a07883a 	add	r3,r5,r8
   18280:	30c9883a 	add	r4,r6,r3
   18284:	2007883a 	mov	r3,r4
   18288:	e0bdb515 	stw	r2,-2348(fp)
   1828c:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t6, 26);
   18290:	e0bdcb17 	ldw	r2,-2260(fp)
   18294:	1004d6ba 	srli	r2,r2,26
   18298:	1004c03a 	cmpne	r2,r2,zero
   1829c:	10803fcc 	andi	r2,r2,255
   182a0:	10000d26 	beq	r2,zero,182d8 <secp256k1_fe_mul_inner+0x3f28>
   182a4:	d0a01617 	ldw	r2,-32680(gp)
   182a8:	10c00317 	ldw	r3,12(r2)
   182ac:	008001b4 	movhi	r2,6
   182b0:	10ad9a04 	addi	r2,r2,-18840
   182b4:	d8800015 	stw	r2,0(sp)
   182b8:	01c0a5c4 	movi	r7,663
   182bc:	018001b4 	movhi	r6,6
   182c0:	31ab2d04 	addi	r6,r6,-21324
   182c4:	014001b4 	movhi	r5,6
   182c8:	296b3804 	addi	r5,r5,-21280
   182cc:	1809883a 	mov	r4,r3
   182d0:	00452600 	call	45260 <fprintf>
   182d4:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   182d8:	e0bdb617 	ldw	r2,-2344(fp)
   182dc:	1004d1fa 	srli	r2,r2,7
   182e0:	e0bf6c15 	stw	r2,-592(fp)
   182e4:	e03f6d15 	stw	zero,-588(fp)
   182e8:	e1ff6c17 	ldw	r7,-592(fp)
   182ec:	e0ff6d17 	ldw	r3,-588(fp)
   182f0:	38c4b03a 	or	r2,r7,r3
   182f4:	1004c03a 	cmpne	r2,r2,zero
   182f8:	10803fcc 	andi	r2,r2,255
   182fc:	10000d26 	beq	r2,zero,18334 <secp256k1_fe_mul_inner+0x3f84>
   18300:	d0a01617 	ldw	r2,-32680(gp)
   18304:	10c00317 	ldw	r3,12(r2)
   18308:	008001b4 	movhi	r2,6
   1830c:	10ad2c04 	addi	r2,r2,-19280
   18310:	d8800015 	stw	r2,0(sp)
   18314:	01c0a604 	movi	r7,664
   18318:	018001b4 	movhi	r6,6
   1831c:	31ab2d04 	addi	r6,r6,-21324
   18320:	014001b4 	movhi	r5,6
   18324:	296b3804 	addi	r5,r5,-21280
   18328:	1809883a 	mov	r4,r3
   1832c:	00452600 	call	45260 <fprintf>
   18330:	00450340 	call	45034 <abort>
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[7]
   18334:	e0bdd217 	ldw	r2,-2232(fp)
   18338:	10800017 	ldw	r2,0(r2)
   1833c:	e0bf6e15 	stw	r2,-584(fp)
   18340:	e03f6f15 	stw	zero,-580(fp)
   18344:	e0bdd317 	ldw	r2,-2228(fp)
   18348:	10800704 	addi	r2,r2,28
   1834c:	10800017 	ldw	r2,0(r2)
   18350:	e0bf7015 	stw	r2,-576(fp)
   18354:	e03f7115 	stw	zero,-572(fp)
   18358:	e1bf7017 	ldw	r6,-576(fp)
   1835c:	e1ff7117 	ldw	r7,-572(fp)
   18360:	e13f6e17 	ldw	r4,-584(fp)
   18364:	e17f6f17 	ldw	r5,-580(fp)
   18368:	00429400 	call	42940 <__muldi3>
   1836c:	1009883a 	mov	r4,r2
   18370:	180b883a 	mov	r5,r3
   18374:	2021883a 	mov	r16,r4
   18378:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[6]
   1837c:	e0bdd217 	ldw	r2,-2232(fp)
   18380:	10800104 	addi	r2,r2,4
   18384:	10800017 	ldw	r2,0(r2)
   18388:	e0bf7215 	stw	r2,-568(fp)
   1838c:	e03f7315 	stw	zero,-564(fp)
   18390:	e0bdd317 	ldw	r2,-2228(fp)
   18394:	10800604 	addi	r2,r2,24
   18398:	10800017 	ldw	r2,0(r2)
   1839c:	e0bf7415 	stw	r2,-560(fp)
   183a0:	e03f7515 	stw	zero,-556(fp)
   183a4:	e1bf7417 	ldw	r6,-560(fp)
   183a8:	e1ff7517 	ldw	r7,-556(fp)
   183ac:	e13f7217 	ldw	r4,-568(fp)
   183b0:	e17f7317 	ldw	r5,-564(fp)
   183b4:	00429400 	call	42940 <__muldi3>
   183b8:	100f883a 	mov	r7,r2
   183bc:	1811883a 	mov	r8,r3
   183c0:	380b883a 	mov	r5,r7
   183c4:	400d883a 	mov	r6,r8
   183c8:	8145883a 	add	r2,r16,r5
   183cc:	1409803a 	cmpltu	r4,r2,r16
   183d0:	8987883a 	add	r3,r17,r6
   183d4:	20c9883a 	add	r4,r4,r3
   183d8:	2007883a 	mov	r3,r4
   183dc:	1025883a 	mov	r18,r2
   183e0:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[5]
       + (uint64_t)a[3] * b[4]
   183e4:	e0bdd217 	ldw	r2,-2232(fp)
   183e8:	10800304 	addi	r2,r2,12
   183ec:	10800017 	ldw	r2,0(r2)
   183f0:	e0bf7615 	stw	r2,-552(fp)
   183f4:	e03f7715 	stw	zero,-548(fp)
   183f8:	e0bdd317 	ldw	r2,-2228(fp)
   183fc:	10800404 	addi	r2,r2,16
   18400:	10800017 	ldw	r2,0(r2)
   18404:	e0bf7815 	stw	r2,-544(fp)
   18408:	e03f7915 	stw	zero,-540(fp)
   1840c:	e1bf7817 	ldw	r6,-544(fp)
   18410:	e1ff7917 	ldw	r7,-540(fp)
   18414:	e13f7617 	ldw	r4,-552(fp)
   18418:	e17f7717 	ldw	r5,-548(fp)
   1841c:	00429400 	call	42940 <__muldi3>
   18420:	1009883a 	mov	r4,r2
   18424:	180b883a 	mov	r5,r3
   18428:	2021883a 	mov	r16,r4
   1842c:	2823883a 	mov	r17,r5
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[7]
       + (uint64_t)a[1] * b[6]
       + (uint64_t)a[2] * b[5]
   18430:	e0bdd217 	ldw	r2,-2232(fp)
   18434:	10800204 	addi	r2,r2,8
   18438:	10800017 	ldw	r2,0(r2)
   1843c:	e0bf7a15 	stw	r2,-536(fp)
   18440:	e03f7b15 	stw	zero,-532(fp)
   18444:	e0bdd317 	ldw	r2,-2228(fp)
   18448:	10800504 	addi	r2,r2,20
   1844c:	10800017 	ldw	r2,0(r2)
   18450:	e0bf7c15 	stw	r2,-528(fp)
   18454:	e03f7d15 	stw	zero,-524(fp)
   18458:	e1bf7c17 	ldw	r6,-528(fp)
   1845c:	e1ff7d17 	ldw	r7,-524(fp)
   18460:	e13f7a17 	ldw	r4,-536(fp)
   18464:	e17f7b17 	ldw	r5,-532(fp)
   18468:	00429400 	call	42940 <__muldi3>
   1846c:	100f883a 	mov	r7,r2
   18470:	1811883a 	mov	r8,r3
   18474:	380b883a 	mov	r5,r7
   18478:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[4]
   1847c:	8145883a 	add	r2,r16,r5
   18480:	1409803a 	cmpltu	r4,r2,r16
   18484:	8987883a 	add	r3,r17,r6
   18488:	20c9883a 	add	r4,r4,r3
   1848c:	2007883a 	mov	r3,r4
   18490:	100b883a 	mov	r5,r2
   18494:	180d883a 	mov	r6,r3
   18498:	9145883a 	add	r2,r18,r5
   1849c:	1489803a 	cmpltu	r4,r2,r18
   184a0:	9987883a 	add	r3,r19,r6
   184a4:	20c9883a 	add	r4,r4,r3
   184a8:	2007883a 	mov	r3,r4
   184ac:	1025883a 	mov	r18,r2
   184b0:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[3]
       + (uint64_t)a[5] * b[2]
   184b4:	e0bdd217 	ldw	r2,-2232(fp)
   184b8:	10800504 	addi	r2,r2,20
   184bc:	10800017 	ldw	r2,0(r2)
   184c0:	e0bf7e15 	stw	r2,-520(fp)
   184c4:	e03f7f15 	stw	zero,-516(fp)
   184c8:	e0bdd317 	ldw	r2,-2228(fp)
   184cc:	10800204 	addi	r2,r2,8
   184d0:	10800017 	ldw	r2,0(r2)
   184d4:	e0bf8015 	stw	r2,-512(fp)
   184d8:	e03f8115 	stw	zero,-508(fp)
   184dc:	e1bf8017 	ldw	r6,-512(fp)
   184e0:	e1ff8117 	ldw	r7,-508(fp)
   184e4:	e13f7e17 	ldw	r4,-520(fp)
   184e8:	e17f7f17 	ldw	r5,-516(fp)
   184ec:	00429400 	call	42940 <__muldi3>
   184f0:	1009883a 	mov	r4,r2
   184f4:	180b883a 	mov	r5,r3
   184f8:	2021883a 	mov	r16,r4
   184fc:	2823883a 	mov	r17,r5

    c += (uint64_t)a[0] * b[7]
       + (uint64_t)a[1] * b[6]
       + (uint64_t)a[2] * b[5]
       + (uint64_t)a[3] * b[4]
       + (uint64_t)a[4] * b[3]
   18500:	e0bdd217 	ldw	r2,-2232(fp)
   18504:	10800404 	addi	r2,r2,16
   18508:	10800017 	ldw	r2,0(r2)
   1850c:	e0bf8215 	stw	r2,-504(fp)
   18510:	e03f8315 	stw	zero,-500(fp)
   18514:	e0bdd317 	ldw	r2,-2228(fp)
   18518:	10800304 	addi	r2,r2,12
   1851c:	10800017 	ldw	r2,0(r2)
   18520:	e0bf8415 	stw	r2,-496(fp)
   18524:	e03f8515 	stw	zero,-492(fp)
   18528:	e1bf8417 	ldw	r6,-496(fp)
   1852c:	e1ff8517 	ldw	r7,-492(fp)
   18530:	e13f8217 	ldw	r4,-504(fp)
   18534:	e17f8317 	ldw	r5,-500(fp)
   18538:	00429400 	call	42940 <__muldi3>
   1853c:	100f883a 	mov	r7,r2
   18540:	1811883a 	mov	r8,r3
   18544:	380b883a 	mov	r5,r7
   18548:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[2]
   1854c:	8145883a 	add	r2,r16,r5
   18550:	1409803a 	cmpltu	r4,r2,r16
   18554:	8987883a 	add	r3,r17,r6
   18558:	20c9883a 	add	r4,r4,r3
   1855c:	2007883a 	mov	r3,r4
   18560:	100b883a 	mov	r5,r2
   18564:	180d883a 	mov	r6,r3
   18568:	9145883a 	add	r2,r18,r5
   1856c:	1489803a 	cmpltu	r4,r2,r18
   18570:	9987883a 	add	r3,r19,r6
   18574:	20c9883a 	add	r4,r4,r3
   18578:	2007883a 	mov	r3,r4
   1857c:	1025883a 	mov	r18,r2
   18580:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[1]
       + (uint64_t)a[7] * b[0];
   18584:	e0bdd217 	ldw	r2,-2232(fp)
   18588:	10800704 	addi	r2,r2,28
   1858c:	10800017 	ldw	r2,0(r2)
   18590:	e0bf8615 	stw	r2,-488(fp)
   18594:	e03f8715 	stw	zero,-484(fp)
   18598:	e0bdd317 	ldw	r2,-2228(fp)
   1859c:	10800017 	ldw	r2,0(r2)
   185a0:	e0bf8815 	stw	r2,-480(fp)
   185a4:	e03f8915 	stw	zero,-476(fp)
   185a8:	e1bf8817 	ldw	r6,-480(fp)
   185ac:	e1ff8917 	ldw	r7,-476(fp)
   185b0:	e13f8617 	ldw	r4,-488(fp)
   185b4:	e17f8717 	ldw	r5,-484(fp)
   185b8:	00429400 	call	42940 <__muldi3>
   185bc:	1009883a 	mov	r4,r2
   185c0:	180b883a 	mov	r5,r3
   185c4:	2021883a 	mov	r16,r4
   185c8:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[6]
       + (uint64_t)a[2] * b[5]
       + (uint64_t)a[3] * b[4]
       + (uint64_t)a[4] * b[3]
       + (uint64_t)a[5] * b[2]
       + (uint64_t)a[6] * b[1]
   185cc:	e0bdd217 	ldw	r2,-2232(fp)
   185d0:	10800604 	addi	r2,r2,24
   185d4:	10800017 	ldw	r2,0(r2)
   185d8:	e0bf8a15 	stw	r2,-472(fp)
   185dc:	e03f8b15 	stw	zero,-468(fp)
   185e0:	e0bdd317 	ldw	r2,-2228(fp)
   185e4:	10800104 	addi	r2,r2,4
   185e8:	10800017 	ldw	r2,0(r2)
   185ec:	e0bf8c15 	stw	r2,-464(fp)
   185f0:	e03f8d15 	stw	zero,-460(fp)
   185f4:	e1bf8c17 	ldw	r6,-464(fp)
   185f8:	e1ff8d17 	ldw	r7,-460(fp)
   185fc:	e13f8a17 	ldw	r4,-472(fp)
   18600:	e17f8b17 	ldw	r5,-468(fp)
   18604:	00429400 	call	42940 <__muldi3>
   18608:	100f883a 	mov	r7,r2
   1860c:	1811883a 	mov	r8,r3
   18610:	380b883a 	mov	r5,r7
   18614:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[0];
   18618:	8145883a 	add	r2,r16,r5
   1861c:	1409803a 	cmpltu	r4,r2,r16
   18620:	8987883a 	add	r3,r17,r6
   18624:	20c9883a 	add	r4,r4,r3
   18628:	2007883a 	mov	r3,r4
   1862c:	100b883a 	mov	r5,r2
   18630:	180d883a 	mov	r6,r3
   18634:	9145883a 	add	r2,r18,r5
   18638:	1489803a 	cmpltu	r4,r2,r18
   1863c:	9987883a 	add	r3,r19,r6
   18640:	20c9883a 	add	r4,r4,r3
   18644:	2007883a 	mov	r3,r4
   18648:	100f883a 	mov	r7,r2
   1864c:	1811883a 	mov	r8,r3
    VERIFY_BITS(t6, 26);
    VERIFY_BITS(c, 39);
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[7]
   18650:	e13db517 	ldw	r4,-2348(fp)
   18654:	e17db617 	ldw	r5,-2344(fp)
   18658:	21c5883a 	add	r2,r4,r7
   1865c:	110d803a 	cmpltu	r6,r2,r4
   18660:	2a07883a 	add	r3,r5,r8
   18664:	30c9883a 	add	r4,r6,r3
   18668:	2007883a 	mov	r3,r4
   1866c:	e0bdb515 	stw	r2,-2348(fp)
   18670:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[4] * b[3]
       + (uint64_t)a[5] * b[2]
       + (uint64_t)a[6] * b[1]
       + (uint64_t)a[7] * b[0];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x8000007C00000007ULL);
   18674:	01000044 	movi	r4,1
   18678:	e0fdb617 	ldw	r3,-2344(fp)
   1867c:	00a00034 	movhi	r2,32768
   18680:	10801f04 	addi	r2,r2,124
   18684:	10c00836 	bltu	r2,r3,186a8 <secp256k1_fe_mul_inner+0x42f8>
   18688:	e0fdb617 	ldw	r3,-2344(fp)
   1868c:	00a00034 	movhi	r2,32768
   18690:	10801f04 	addi	r2,r2,124
   18694:	1880031e 	bne	r3,r2,186a4 <secp256k1_fe_mul_inner+0x42f4>
   18698:	e0bdb517 	ldw	r2,-2348(fp)
   1869c:	10800228 	cmpgeui	r2,r2,8
   186a0:	1000011e 	bne	r2,zero,186a8 <secp256k1_fe_mul_inner+0x42f8>
   186a4:	0009883a 	mov	r4,zero
   186a8:	20803fcc 	andi	r2,r4,255
   186ac:	10000d26 	beq	r2,zero,186e4 <secp256k1_fe_mul_inner+0x4334>
   186b0:	d0a01617 	ldw	r2,-32680(gp)
   186b4:	10c00317 	ldw	r3,12(r2)
   186b8:	008001b4 	movhi	r2,6
   186bc:	10ada504 	addi	r2,r2,-18796
   186c0:	d8800015 	stw	r2,0(sp)
   186c4:	01c0a944 	movi	r7,677
   186c8:	018001b4 	movhi	r6,6
   186cc:	31ab2d04 	addi	r6,r6,-21324
   186d0:	014001b4 	movhi	r5,6
   186d4:	296b3804 	addi	r5,r5,-21280
   186d8:	1809883a 	mov	r4,r3
   186dc:	00452600 	call	45260 <fprintf>
   186e0:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[8] * b[9]
   186e4:	e0bdd217 	ldw	r2,-2232(fp)
   186e8:	10800804 	addi	r2,r2,32
   186ec:	10800017 	ldw	r2,0(r2)
   186f0:	e0bf8e15 	stw	r2,-456(fp)
   186f4:	e03f8f15 	stw	zero,-452(fp)
   186f8:	e0bdd317 	ldw	r2,-2228(fp)
   186fc:	10800904 	addi	r2,r2,36
   18700:	10800017 	ldw	r2,0(r2)
   18704:	e0bf9015 	stw	r2,-448(fp)
   18708:	e03f9115 	stw	zero,-444(fp)
   1870c:	e1bf9017 	ldw	r6,-448(fp)
   18710:	e1ff9117 	ldw	r7,-444(fp)
   18714:	e13f8e17 	ldw	r4,-456(fp)
   18718:	e17f8f17 	ldw	r5,-452(fp)
   1871c:	00429400 	call	42940 <__muldi3>
   18720:	1009883a 	mov	r4,r2
   18724:	180b883a 	mov	r5,r3
   18728:	2021883a 	mov	r16,r4
   1872c:	2823883a 	mov	r17,r5
       + (uint64_t)a[9] * b[8];
   18730:	e0bdd217 	ldw	r2,-2232(fp)
   18734:	10800904 	addi	r2,r2,36
   18738:	10800017 	ldw	r2,0(r2)
   1873c:	e0bf9215 	stw	r2,-440(fp)
   18740:	e03f9315 	stw	zero,-436(fp)
   18744:	e0bdd317 	ldw	r2,-2228(fp)
   18748:	10800804 	addi	r2,r2,32
   1874c:	10800017 	ldw	r2,0(r2)
   18750:	e0bf9415 	stw	r2,-432(fp)
   18754:	e03f9515 	stw	zero,-428(fp)
   18758:	e1bf9417 	ldw	r6,-432(fp)
   1875c:	e1ff9517 	ldw	r7,-428(fp)
   18760:	e13f9217 	ldw	r4,-440(fp)
   18764:	e17f9317 	ldw	r5,-436(fp)
   18768:	00429400 	call	42940 <__muldi3>
   1876c:	100f883a 	mov	r7,r2
   18770:	1811883a 	mov	r8,r3
   18774:	380b883a 	mov	r5,r7
   18778:	400d883a 	mov	r6,r8
   1877c:	8145883a 	add	r2,r16,r5
   18780:	1409803a 	cmpltu	r4,r2,r16
   18784:	8987883a 	add	r3,r17,r6
   18788:	20c9883a 	add	r4,r4,r3
   1878c:	2007883a 	mov	r3,r4
   18790:	100f883a 	mov	r7,r2
   18794:	1811883a 	mov	r8,r3
       + (uint64_t)a[6] * b[1]
       + (uint64_t)a[7] * b[0];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x8000007C00000007ULL);
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[8] * b[9]
   18798:	e13db217 	ldw	r4,-2360(fp)
   1879c:	e17db317 	ldw	r5,-2356(fp)
   187a0:	21c5883a 	add	r2,r4,r7
   187a4:	110d803a 	cmpltu	r6,r2,r4
   187a8:	2a07883a 	add	r3,r5,r8
   187ac:	30c9883a 	add	r4,r6,r3
   187b0:	2007883a 	mov	r3,r4
   187b4:	e0bdb215 	stw	r2,-2360(fp)
   187b8:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[9] * b[8];
    VERIFY_BITS(d, 58);
   187bc:	e0bdb317 	ldw	r2,-2356(fp)
   187c0:	1004d6ba 	srli	r2,r2,26
   187c4:	e0bf9615 	stw	r2,-424(fp)
   187c8:	e03f9715 	stw	zero,-420(fp)
   187cc:	e13f9617 	ldw	r4,-424(fp)
   187d0:	e1bf9717 	ldw	r6,-420(fp)
   187d4:	2184b03a 	or	r2,r4,r6
   187d8:	1004c03a 	cmpne	r2,r2,zero
   187dc:	10803fcc 	andi	r2,r2,255
   187e0:	10000d26 	beq	r2,zero,18818 <secp256k1_fe_mul_inner+0x4468>
   187e4:	d0a01617 	ldw	r2,-32680(gp)
   187e8:	10c00317 	ldw	r3,12(r2)
   187ec:	008001b4 	movhi	r2,6
   187f0:	10adb204 	addi	r2,r2,-18744
   187f4:	d8800015 	stw	r2,0(sp)
   187f8:	01c0aa44 	movi	r7,681
   187fc:	018001b4 	movhi	r6,6
   18800:	31ab2d04 	addi	r6,r6,-21324
   18804:	014001b4 	movhi	r5,6
   18808:	296b3804 	addi	r5,r5,-21280
   1880c:	1809883a 	mov	r4,r3
   18810:	00452600 	call	45260 <fprintf>
   18814:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    u7 = d & M; d >>= 26; c += u7 * R0;
   18818:	e0bdaf17 	ldw	r2,-2372(fp)
   1881c:	e0bf9815 	stw	r2,-416(fp)
   18820:	e03f9915 	stw	zero,-412(fp)
   18824:	e0bdb217 	ldw	r2,-2360(fp)
   18828:	e1ff9817 	ldw	r7,-416(fp)
   1882c:	11c4703a 	and	r2,r2,r7
   18830:	e0bdcc15 	stw	r2,-2256(fp)
   18834:	e0bdb317 	ldw	r2,-2356(fp)
   18838:	e0ff9917 	ldw	r3,-412(fp)
   1883c:	10c4703a 	and	r2,r2,r3
   18840:	e0bdcd15 	stw	r2,-2252(fp)
   18844:	e0bdb317 	ldw	r2,-2356(fp)
   18848:	100691ba 	slli	r3,r2,6
   1884c:	e0bdb217 	ldw	r2,-2360(fp)
   18850:	1004d6ba 	srli	r2,r2,26
   18854:	10c4b03a 	or	r2,r2,r3
   18858:	e0bdb215 	stw	r2,-2360(fp)
   1885c:	e0bdb317 	ldw	r2,-2356(fp)
   18860:	1004d6ba 	srli	r2,r2,26
   18864:	e0bdb315 	stw	r2,-2356(fp)
   18868:	e0bdb017 	ldw	r2,-2368(fp)
   1886c:	e0bf9a15 	stw	r2,-408(fp)
   18870:	e03f9b15 	stw	zero,-404(fp)
   18874:	e1bdcc17 	ldw	r6,-2256(fp)
   18878:	e1fdcd17 	ldw	r7,-2252(fp)
   1887c:	e13f9a17 	ldw	r4,-408(fp)
   18880:	e17f9b17 	ldw	r5,-404(fp)
   18884:	00429400 	call	42940 <__muldi3>
   18888:	1009883a 	mov	r4,r2
   1888c:	180b883a 	mov	r5,r3
   18890:	200f883a 	mov	r7,r4
   18894:	2811883a 	mov	r8,r5
   18898:	e13db517 	ldw	r4,-2348(fp)
   1889c:	e17db617 	ldw	r5,-2344(fp)
   188a0:	21c5883a 	add	r2,r4,r7
   188a4:	110d803a 	cmpltu	r6,r2,r4
   188a8:	2a07883a 	add	r3,r5,r8
   188ac:	30c9883a 	add	r4,r6,r3
   188b0:	2007883a 	mov	r3,r4
   188b4:	e0bdb515 	stw	r2,-2348(fp)
   188b8:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u7, 26);
   188bc:	e0bdcd17 	ldw	r2,-2252(fp)
   188c0:	100691ba 	slli	r3,r2,6
   188c4:	e0bdcc17 	ldw	r2,-2256(fp)
   188c8:	1004d6ba 	srli	r2,r2,26
   188cc:	e0bf9c15 	stw	r2,-400(fp)
   188d0:	e13f9c17 	ldw	r4,-400(fp)
   188d4:	1906b03a 	or	r3,r3,r4
   188d8:	e0ff9c15 	stw	r3,-400(fp)
   188dc:	e0bdcd17 	ldw	r2,-2252(fp)
   188e0:	1004d6ba 	srli	r2,r2,26
   188e4:	e0bf9d15 	stw	r2,-396(fp)
   188e8:	e1bf9c17 	ldw	r6,-400(fp)
   188ec:	e1ff9d17 	ldw	r7,-396(fp)
   188f0:	31c4b03a 	or	r2,r6,r7
   188f4:	1004c03a 	cmpne	r2,r2,zero
   188f8:	10803fcc 	andi	r2,r2,255
   188fc:	10000d26 	beq	r2,zero,18934 <secp256k1_fe_mul_inner+0x4584>
   18900:	d0a01617 	ldw	r2,-32680(gp)
   18904:	10c00317 	ldw	r3,12(r2)
   18908:	008001b4 	movhi	r2,6
   1890c:	10adbd04 	addi	r2,r2,-18700
   18910:	d8800015 	stw	r2,0(sp)
   18914:	01c0ab04 	movi	r7,684
   18918:	018001b4 	movhi	r6,6
   1891c:	31ab2d04 	addi	r6,r6,-21324
   18920:	014001b4 	movhi	r5,6
   18924:	296b3804 	addi	r5,r5,-21280
   18928:	1809883a 	mov	r4,r3
   1892c:	00452600 	call	45260 <fprintf>
   18930:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 32);
   18934:	e0bdb317 	ldw	r2,-2356(fp)
   18938:	1004d83a 	srl	r2,r2,zero
   1893c:	e0bf9e15 	stw	r2,-392(fp)
   18940:	e03f9f15 	stw	zero,-388(fp)
   18944:	e0ff9e17 	ldw	r3,-392(fp)
   18948:	e13f9f17 	ldw	r4,-388(fp)
   1894c:	1904b03a 	or	r2,r3,r4
   18950:	1004c03a 	cmpne	r2,r2,zero
   18954:	10803fcc 	andi	r2,r2,255
   18958:	10000d26 	beq	r2,zero,18990 <secp256k1_fe_mul_inner+0x45e0>
   1895c:	d0a01617 	ldw	r2,-32680(gp)
   18960:	10c00317 	ldw	r3,12(r2)
   18964:	008001b4 	movhi	r2,6
   18968:	10adc804 	addi	r2,r2,-18656
   1896c:	d8800015 	stw	r2,0(sp)
   18970:	01c0ab44 	movi	r7,685
   18974:	018001b4 	movhi	r6,6
   18978:	31ab2d04 	addi	r6,r6,-21324
   1897c:	014001b4 	movhi	r5,6
   18980:	296b3804 	addi	r5,r5,-21280
   18984:	1809883a 	mov	r4,r3
   18988:	00452600 	call	45260 <fprintf>
   1898c:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x800001703FFFC2F7ULL);
   18990:	01000044 	movi	r4,1
   18994:	e0fdb617 	ldw	r3,-2344(fp)
   18998:	00a00034 	movhi	r2,32768
   1899c:	10805c04 	addi	r2,r2,368
   189a0:	10c00936 	bltu	r2,r3,189c8 <secp256k1_fe_mul_inner+0x4618>
   189a4:	e0fdb617 	ldw	r3,-2344(fp)
   189a8:	00a00034 	movhi	r2,32768
   189ac:	10805c04 	addi	r2,r2,368
   189b0:	1880041e 	bne	r3,r2,189c4 <secp256k1_fe_mul_inner+0x4614>
   189b4:	e0fdb517 	ldw	r3,-2348(fp)
   189b8:	00900034 	movhi	r2,16384
   189bc:	10b0bdc4 	addi	r2,r2,-15625
   189c0:	10c00136 	bltu	r2,r3,189c8 <secp256k1_fe_mul_inner+0x4618>
   189c4:	0009883a 	mov	r4,zero
   189c8:	20803fcc 	andi	r2,r4,255
   189cc:	10000d26 	beq	r2,zero,18a04 <secp256k1_fe_mul_inner+0x4654>
   189d0:	d0a01617 	ldw	r2,-32680(gp)
   189d4:	10c00317 	ldw	r3,12(r2)
   189d8:	008001b4 	movhi	r2,6
   189dc:	10add304 	addi	r2,r2,-18612
   189e0:	d8800015 	stw	r2,0(sp)
   189e4:	01c0abc4 	movi	r7,687
   189e8:	018001b4 	movhi	r6,6
   189ec:	31ab2d04 	addi	r6,r6,-21324
   189f0:	014001b4 	movhi	r5,6
   189f4:	296b3804 	addi	r5,r5,-21280
   189f8:	1809883a 	mov	r4,r3
   189fc:	00452600 	call	45260 <fprintf>
   18a00:	00450340 	call	45034 <abort>
    /* [d u7 0 0 0 0 0 0 0 t9 0 c-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    t7 = c & M; c >>= 26; c += u7 * R1;
   18a04:	e0fdb517 	ldw	r3,-2348(fp)
   18a08:	e0bdaf17 	ldw	r2,-2372(fp)
   18a0c:	1884703a 	and	r2,r3,r2
   18a10:	e0bdce15 	stw	r2,-2248(fp)
   18a14:	e0bdb617 	ldw	r2,-2344(fp)
   18a18:	100691ba 	slli	r3,r2,6
   18a1c:	e0bdb517 	ldw	r2,-2348(fp)
   18a20:	1004d6ba 	srli	r2,r2,26
   18a24:	10c4b03a 	or	r2,r2,r3
   18a28:	e0bdb515 	stw	r2,-2348(fp)
   18a2c:	e0bdb617 	ldw	r2,-2344(fp)
   18a30:	1004d6ba 	srli	r2,r2,26
   18a34:	e0bdb615 	stw	r2,-2344(fp)
   18a38:	e0bdb117 	ldw	r2,-2364(fp)
   18a3c:	e0bfa015 	stw	r2,-384(fp)
   18a40:	e03fa115 	stw	zero,-380(fp)
   18a44:	e1bdcc17 	ldw	r6,-2256(fp)
   18a48:	e1fdcd17 	ldw	r7,-2252(fp)
   18a4c:	e13fa017 	ldw	r4,-384(fp)
   18a50:	e17fa117 	ldw	r5,-380(fp)
   18a54:	00429400 	call	42940 <__muldi3>
   18a58:	1009883a 	mov	r4,r2
   18a5c:	180b883a 	mov	r5,r3
   18a60:	200f883a 	mov	r7,r4
   18a64:	2811883a 	mov	r8,r5
   18a68:	e13db517 	ldw	r4,-2348(fp)
   18a6c:	e17db617 	ldw	r5,-2344(fp)
   18a70:	21c5883a 	add	r2,r4,r7
   18a74:	110d803a 	cmpltu	r6,r2,r4
   18a78:	2a07883a 	add	r3,r5,r8
   18a7c:	30c9883a 	add	r4,r6,r3
   18a80:	2007883a 	mov	r3,r4
   18a84:	e0bdb515 	stw	r2,-2348(fp)
   18a88:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t7, 26);
   18a8c:	e0bdce17 	ldw	r2,-2248(fp)
   18a90:	1004d6ba 	srli	r2,r2,26
   18a94:	1004c03a 	cmpne	r2,r2,zero
   18a98:	10803fcc 	andi	r2,r2,255
   18a9c:	10000d26 	beq	r2,zero,18ad4 <secp256k1_fe_mul_inner+0x4724>
   18aa0:	d0a01617 	ldw	r2,-32680(gp)
   18aa4:	10c00317 	ldw	r3,12(r2)
   18aa8:	008001b4 	movhi	r2,6
   18aac:	10ade004 	addi	r2,r2,-18560
   18ab0:	d8800015 	stw	r2,0(sp)
   18ab4:	01c0ac84 	movi	r7,690
   18ab8:	018001b4 	movhi	r6,6
   18abc:	31ab2d04 	addi	r6,r6,-21324
   18ac0:	014001b4 	movhi	r5,6
   18ac4:	296b3804 	addi	r5,r5,-21280
   18ac8:	1809883a 	mov	r4,r3
   18acc:	00452600 	call	45260 <fprintf>
   18ad0:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 38);
   18ad4:	e0bdb617 	ldw	r2,-2344(fp)
   18ad8:	1004d1ba 	srli	r2,r2,6
   18adc:	e0bfa215 	stw	r2,-376(fp)
   18ae0:	e03fa315 	stw	zero,-372(fp)
   18ae4:	e1bfa217 	ldw	r6,-376(fp)
   18ae8:	e1ffa317 	ldw	r7,-372(fp)
   18aec:	31c4b03a 	or	r2,r6,r7
   18af0:	1004c03a 	cmpne	r2,r2,zero
   18af4:	10803fcc 	andi	r2,r2,255
   18af8:	10000d26 	beq	r2,zero,18b30 <secp256k1_fe_mul_inner+0x4780>
   18afc:	d0a01617 	ldw	r2,-32680(gp)
   18b00:	10c00317 	ldw	r3,12(r2)
   18b04:	008001b4 	movhi	r2,6
   18b08:	10acf504 	addi	r2,r2,-19500
   18b0c:	d8800015 	stw	r2,0(sp)
   18b10:	01c0acc4 	movi	r7,691
   18b14:	018001b4 	movhi	r6,6
   18b18:	31ab2d04 	addi	r6,r6,-21324
   18b1c:	014001b4 	movhi	r5,6
   18b20:	296b3804 	addi	r5,r5,-21280
   18b24:	1809883a 	mov	r4,r3
   18b28:	00452600 	call	45260 <fprintf>
   18b2c:	00450340 	call	45034 <abort>
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[8]
   18b30:	e0bdd217 	ldw	r2,-2232(fp)
   18b34:	10800017 	ldw	r2,0(r2)
   18b38:	e0bfa415 	stw	r2,-368(fp)
   18b3c:	e03fa515 	stw	zero,-364(fp)
   18b40:	e0bdd317 	ldw	r2,-2228(fp)
   18b44:	10800804 	addi	r2,r2,32
   18b48:	10800017 	ldw	r2,0(r2)
   18b4c:	e0bfa615 	stw	r2,-360(fp)
   18b50:	e03fa715 	stw	zero,-356(fp)
   18b54:	e1bfa617 	ldw	r6,-360(fp)
   18b58:	e1ffa717 	ldw	r7,-356(fp)
   18b5c:	e13fa417 	ldw	r4,-368(fp)
   18b60:	e17fa517 	ldw	r5,-364(fp)
   18b64:	00429400 	call	42940 <__muldi3>
   18b68:	1009883a 	mov	r4,r2
   18b6c:	180b883a 	mov	r5,r3
   18b70:	2021883a 	mov	r16,r4
   18b74:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[7]
   18b78:	e0bdd217 	ldw	r2,-2232(fp)
   18b7c:	10800104 	addi	r2,r2,4
   18b80:	10800017 	ldw	r2,0(r2)
   18b84:	e0bfa815 	stw	r2,-352(fp)
   18b88:	e03fa915 	stw	zero,-348(fp)
   18b8c:	e0bdd317 	ldw	r2,-2228(fp)
   18b90:	10800704 	addi	r2,r2,28
   18b94:	10800017 	ldw	r2,0(r2)
   18b98:	e0bfaa15 	stw	r2,-344(fp)
   18b9c:	e03fab15 	stw	zero,-340(fp)
   18ba0:	e1bfaa17 	ldw	r6,-344(fp)
   18ba4:	e1ffab17 	ldw	r7,-340(fp)
   18ba8:	e13fa817 	ldw	r4,-352(fp)
   18bac:	e17fa917 	ldw	r5,-348(fp)
   18bb0:	00429400 	call	42940 <__muldi3>
   18bb4:	100f883a 	mov	r7,r2
   18bb8:	1811883a 	mov	r8,r3
   18bbc:	380b883a 	mov	r5,r7
   18bc0:	400d883a 	mov	r6,r8
   18bc4:	8145883a 	add	r2,r16,r5
   18bc8:	1409803a 	cmpltu	r4,r2,r16
   18bcc:	8987883a 	add	r3,r17,r6
   18bd0:	20c9883a 	add	r4,r4,r3
   18bd4:	2007883a 	mov	r3,r4
   18bd8:	1025883a 	mov	r18,r2
   18bdc:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[6]
       + (uint64_t)a[3] * b[5]
   18be0:	e0bdd217 	ldw	r2,-2232(fp)
   18be4:	10800304 	addi	r2,r2,12
   18be8:	10800017 	ldw	r2,0(r2)
   18bec:	e0bfac15 	stw	r2,-336(fp)
   18bf0:	e03fad15 	stw	zero,-332(fp)
   18bf4:	e0bdd317 	ldw	r2,-2228(fp)
   18bf8:	10800504 	addi	r2,r2,20
   18bfc:	10800017 	ldw	r2,0(r2)
   18c00:	e0bfae15 	stw	r2,-328(fp)
   18c04:	e03faf15 	stw	zero,-324(fp)
   18c08:	e1bfae17 	ldw	r6,-328(fp)
   18c0c:	e1ffaf17 	ldw	r7,-324(fp)
   18c10:	e13fac17 	ldw	r4,-336(fp)
   18c14:	e17fad17 	ldw	r5,-332(fp)
   18c18:	00429400 	call	42940 <__muldi3>
   18c1c:	1009883a 	mov	r4,r2
   18c20:	180b883a 	mov	r5,r3
   18c24:	2021883a 	mov	r16,r4
   18c28:	2823883a 	mov	r17,r5
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[8]
       + (uint64_t)a[1] * b[7]
       + (uint64_t)a[2] * b[6]
   18c2c:	e0bdd217 	ldw	r2,-2232(fp)
   18c30:	10800204 	addi	r2,r2,8
   18c34:	10800017 	ldw	r2,0(r2)
   18c38:	e0bfb015 	stw	r2,-320(fp)
   18c3c:	e03fb115 	stw	zero,-316(fp)
   18c40:	e0bdd317 	ldw	r2,-2228(fp)
   18c44:	10800604 	addi	r2,r2,24
   18c48:	10800017 	ldw	r2,0(r2)
   18c4c:	e0bfb215 	stw	r2,-312(fp)
   18c50:	e03fb315 	stw	zero,-308(fp)
   18c54:	e1bfb217 	ldw	r6,-312(fp)
   18c58:	e1ffb317 	ldw	r7,-308(fp)
   18c5c:	e13fb017 	ldw	r4,-320(fp)
   18c60:	e17fb117 	ldw	r5,-316(fp)
   18c64:	00429400 	call	42940 <__muldi3>
   18c68:	100f883a 	mov	r7,r2
   18c6c:	1811883a 	mov	r8,r3
   18c70:	380b883a 	mov	r5,r7
   18c74:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[5]
   18c78:	8145883a 	add	r2,r16,r5
   18c7c:	1409803a 	cmpltu	r4,r2,r16
   18c80:	8987883a 	add	r3,r17,r6
   18c84:	20c9883a 	add	r4,r4,r3
   18c88:	2007883a 	mov	r3,r4
   18c8c:	100b883a 	mov	r5,r2
   18c90:	180d883a 	mov	r6,r3
   18c94:	9145883a 	add	r2,r18,r5
   18c98:	1489803a 	cmpltu	r4,r2,r18
   18c9c:	9987883a 	add	r3,r19,r6
   18ca0:	20c9883a 	add	r4,r4,r3
   18ca4:	2007883a 	mov	r3,r4
   18ca8:	1025883a 	mov	r18,r2
   18cac:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[4]
       + (uint64_t)a[5] * b[3]
   18cb0:	e0bdd217 	ldw	r2,-2232(fp)
   18cb4:	10800504 	addi	r2,r2,20
   18cb8:	10800017 	ldw	r2,0(r2)
   18cbc:	e0bfb415 	stw	r2,-304(fp)
   18cc0:	e03fb515 	stw	zero,-300(fp)
   18cc4:	e0bdd317 	ldw	r2,-2228(fp)
   18cc8:	10800304 	addi	r2,r2,12
   18ccc:	10800017 	ldw	r2,0(r2)
   18cd0:	e0bfb615 	stw	r2,-296(fp)
   18cd4:	e03fb715 	stw	zero,-292(fp)
   18cd8:	e1bfb617 	ldw	r6,-296(fp)
   18cdc:	e1ffb717 	ldw	r7,-292(fp)
   18ce0:	e13fb417 	ldw	r4,-304(fp)
   18ce4:	e17fb517 	ldw	r5,-300(fp)
   18ce8:	00429400 	call	42940 <__muldi3>
   18cec:	1009883a 	mov	r4,r2
   18cf0:	180b883a 	mov	r5,r3
   18cf4:	2021883a 	mov	r16,r4
   18cf8:	2823883a 	mov	r17,r5

    c += (uint64_t)a[0] * b[8]
       + (uint64_t)a[1] * b[7]
       + (uint64_t)a[2] * b[6]
       + (uint64_t)a[3] * b[5]
       + (uint64_t)a[4] * b[4]
   18cfc:	e0bdd217 	ldw	r2,-2232(fp)
   18d00:	10800404 	addi	r2,r2,16
   18d04:	10800017 	ldw	r2,0(r2)
   18d08:	e0bfb815 	stw	r2,-288(fp)
   18d0c:	e03fb915 	stw	zero,-284(fp)
   18d10:	e0bdd317 	ldw	r2,-2228(fp)
   18d14:	10800404 	addi	r2,r2,16
   18d18:	10800017 	ldw	r2,0(r2)
   18d1c:	e0bfba15 	stw	r2,-280(fp)
   18d20:	e03fbb15 	stw	zero,-276(fp)
   18d24:	e1bfba17 	ldw	r6,-280(fp)
   18d28:	e1ffbb17 	ldw	r7,-276(fp)
   18d2c:	e13fb817 	ldw	r4,-288(fp)
   18d30:	e17fb917 	ldw	r5,-284(fp)
   18d34:	00429400 	call	42940 <__muldi3>
   18d38:	100f883a 	mov	r7,r2
   18d3c:	1811883a 	mov	r8,r3
   18d40:	380b883a 	mov	r5,r7
   18d44:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[3]
   18d48:	8145883a 	add	r2,r16,r5
   18d4c:	1409803a 	cmpltu	r4,r2,r16
   18d50:	8987883a 	add	r3,r17,r6
   18d54:	20c9883a 	add	r4,r4,r3
   18d58:	2007883a 	mov	r3,r4
   18d5c:	100b883a 	mov	r5,r2
   18d60:	180d883a 	mov	r6,r3
   18d64:	9145883a 	add	r2,r18,r5
   18d68:	1489803a 	cmpltu	r4,r2,r18
   18d6c:	9987883a 	add	r3,r19,r6
   18d70:	20c9883a 	add	r4,r4,r3
   18d74:	2007883a 	mov	r3,r4
   18d78:	1025883a 	mov	r18,r2
   18d7c:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[2]
       + (uint64_t)a[7] * b[1]
   18d80:	e0bdd217 	ldw	r2,-2232(fp)
   18d84:	10800704 	addi	r2,r2,28
   18d88:	10800017 	ldw	r2,0(r2)
   18d8c:	e0bfbc15 	stw	r2,-272(fp)
   18d90:	e03fbd15 	stw	zero,-268(fp)
   18d94:	e0bdd317 	ldw	r2,-2228(fp)
   18d98:	10800104 	addi	r2,r2,4
   18d9c:	10800017 	ldw	r2,0(r2)
   18da0:	e0bfbe15 	stw	r2,-264(fp)
   18da4:	e03fbf15 	stw	zero,-260(fp)
   18da8:	e1bfbe17 	ldw	r6,-264(fp)
   18dac:	e1ffbf17 	ldw	r7,-260(fp)
   18db0:	e13fbc17 	ldw	r4,-272(fp)
   18db4:	e17fbd17 	ldw	r5,-268(fp)
   18db8:	00429400 	call	42940 <__muldi3>
   18dbc:	1009883a 	mov	r4,r2
   18dc0:	180b883a 	mov	r5,r3
   18dc4:	2021883a 	mov	r16,r4
   18dc8:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[7]
       + (uint64_t)a[2] * b[6]
       + (uint64_t)a[3] * b[5]
       + (uint64_t)a[4] * b[4]
       + (uint64_t)a[5] * b[3]
       + (uint64_t)a[6] * b[2]
   18dcc:	e0bdd217 	ldw	r2,-2232(fp)
   18dd0:	10800604 	addi	r2,r2,24
   18dd4:	10800017 	ldw	r2,0(r2)
   18dd8:	e0bfc015 	stw	r2,-256(fp)
   18ddc:	e03fc115 	stw	zero,-252(fp)
   18de0:	e0bdd317 	ldw	r2,-2228(fp)
   18de4:	10800204 	addi	r2,r2,8
   18de8:	10800017 	ldw	r2,0(r2)
   18dec:	e0bfc215 	stw	r2,-248(fp)
   18df0:	e03fc315 	stw	zero,-244(fp)
   18df4:	e1bfc217 	ldw	r6,-248(fp)
   18df8:	e1ffc317 	ldw	r7,-244(fp)
   18dfc:	e13fc017 	ldw	r4,-256(fp)
   18e00:	e17fc117 	ldw	r5,-252(fp)
   18e04:	00429400 	call	42940 <__muldi3>
   18e08:	100f883a 	mov	r7,r2
   18e0c:	1811883a 	mov	r8,r3
   18e10:	380b883a 	mov	r5,r7
   18e14:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[1]
   18e18:	8145883a 	add	r2,r16,r5
   18e1c:	1409803a 	cmpltu	r4,r2,r16
   18e20:	8987883a 	add	r3,r17,r6
   18e24:	20c9883a 	add	r4,r4,r3
   18e28:	2007883a 	mov	r3,r4
   18e2c:	100b883a 	mov	r5,r2
   18e30:	180d883a 	mov	r6,r3
   18e34:	9145883a 	add	r2,r18,r5
   18e38:	1489803a 	cmpltu	r4,r2,r18
   18e3c:	9987883a 	add	r3,r19,r6
   18e40:	20c9883a 	add	r4,r4,r3
   18e44:	2007883a 	mov	r3,r4
   18e48:	1021883a 	mov	r16,r2
   18e4c:	1823883a 	mov	r17,r3
       + (uint64_t)a[8] * b[0];
   18e50:	e0bdd217 	ldw	r2,-2232(fp)
   18e54:	10800804 	addi	r2,r2,32
   18e58:	10800017 	ldw	r2,0(r2)
   18e5c:	e0bfc415 	stw	r2,-240(fp)
   18e60:	e03fc515 	stw	zero,-236(fp)
   18e64:	e0bdd317 	ldw	r2,-2228(fp)
   18e68:	10800017 	ldw	r2,0(r2)
   18e6c:	e0bfc615 	stw	r2,-232(fp)
   18e70:	e03fc715 	stw	zero,-228(fp)
   18e74:	e1bfc617 	ldw	r6,-232(fp)
   18e78:	e1ffc717 	ldw	r7,-228(fp)
   18e7c:	e13fc417 	ldw	r4,-240(fp)
   18e80:	e17fc517 	ldw	r5,-236(fp)
   18e84:	00429400 	call	42940 <__muldi3>
   18e88:	100f883a 	mov	r7,r2
   18e8c:	1811883a 	mov	r8,r3
   18e90:	380b883a 	mov	r5,r7
   18e94:	400d883a 	mov	r6,r8
   18e98:	8145883a 	add	r2,r16,r5
   18e9c:	1409803a 	cmpltu	r4,r2,r16
   18ea0:	8987883a 	add	r3,r17,r6
   18ea4:	20c9883a 	add	r4,r4,r3
   18ea8:	2007883a 	mov	r3,r4
   18eac:	100f883a 	mov	r7,r2
   18eb0:	1811883a 	mov	r8,r3
    VERIFY_BITS(t7, 26);
    VERIFY_BITS(c, 38);
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[8]
   18eb4:	e13db517 	ldw	r4,-2348(fp)
   18eb8:	e17db617 	ldw	r5,-2344(fp)
   18ebc:	21c5883a 	add	r2,r4,r7
   18ec0:	110d803a 	cmpltu	r6,r2,r4
   18ec4:	2a07883a 	add	r3,r5,r8
   18ec8:	30c9883a 	add	r4,r6,r3
   18ecc:	2007883a 	mov	r3,r4
   18ed0:	e0bdb515 	stw	r2,-2348(fp)
   18ed4:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[5] * b[3]
       + (uint64_t)a[6] * b[2]
       + (uint64_t)a[7] * b[1]
       + (uint64_t)a[8] * b[0];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x9000007B80000008ULL);
   18ed8:	01000044 	movi	r4,1
   18edc:	e0fdb617 	ldw	r3,-2344(fp)
   18ee0:	00a40034 	movhi	r2,36864
   18ee4:	10801ec4 	addi	r2,r2,123
   18ee8:	10c00936 	bltu	r2,r3,18f10 <secp256k1_fe_mul_inner+0x4b60>
   18eec:	e0fdb617 	ldw	r3,-2344(fp)
   18ef0:	00a40034 	movhi	r2,36864
   18ef4:	10801ec4 	addi	r2,r2,123
   18ef8:	1880041e 	bne	r3,r2,18f0c <secp256k1_fe_mul_inner+0x4b5c>
   18efc:	e0fdb517 	ldw	r3,-2348(fp)
   18f00:	00a00034 	movhi	r2,32768
   18f04:	10800204 	addi	r2,r2,8
   18f08:	10c00136 	bltu	r2,r3,18f10 <secp256k1_fe_mul_inner+0x4b60>
   18f0c:	0009883a 	mov	r4,zero
   18f10:	20803fcc 	andi	r2,r4,255
   18f14:	10000d26 	beq	r2,zero,18f4c <secp256k1_fe_mul_inner+0x4b9c>
   18f18:	d0a01617 	ldw	r2,-32680(gp)
   18f1c:	10c00317 	ldw	r3,12(r2)
   18f20:	008001b4 	movhi	r2,6
   18f24:	10adeb04 	addi	r2,r2,-18516
   18f28:	d8800015 	stw	r2,0(sp)
   18f2c:	01c0b044 	movi	r7,705
   18f30:	018001b4 	movhi	r6,6
   18f34:	31ab2d04 	addi	r6,r6,-21324
   18f38:	014001b4 	movhi	r5,6
   18f3c:	296b3804 	addi	r5,r5,-21280
   18f40:	1809883a 	mov	r4,r3
   18f44:	00452600 	call	45260 <fprintf>
   18f48:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[9] * b[9];
   18f4c:	e0bdd217 	ldw	r2,-2232(fp)
   18f50:	10800904 	addi	r2,r2,36
   18f54:	10800017 	ldw	r2,0(r2)
   18f58:	e0bfc815 	stw	r2,-224(fp)
   18f5c:	e03fc915 	stw	zero,-220(fp)
   18f60:	e0bdd317 	ldw	r2,-2228(fp)
   18f64:	10800904 	addi	r2,r2,36
   18f68:	10800017 	ldw	r2,0(r2)
   18f6c:	e0bfca15 	stw	r2,-216(fp)
   18f70:	e03fcb15 	stw	zero,-212(fp)
   18f74:	e1bfca17 	ldw	r6,-216(fp)
   18f78:	e1ffcb17 	ldw	r7,-212(fp)
   18f7c:	e13fc817 	ldw	r4,-224(fp)
   18f80:	e17fc917 	ldw	r5,-220(fp)
   18f84:	00429400 	call	42940 <__muldi3>
   18f88:	1009883a 	mov	r4,r2
   18f8c:	180b883a 	mov	r5,r3
   18f90:	200f883a 	mov	r7,r4
   18f94:	2811883a 	mov	r8,r5
   18f98:	e13db217 	ldw	r4,-2360(fp)
   18f9c:	e17db317 	ldw	r5,-2356(fp)
   18fa0:	21c5883a 	add	r2,r4,r7
   18fa4:	110d803a 	cmpltu	r6,r2,r4
   18fa8:	2a07883a 	add	r3,r5,r8
   18fac:	30c9883a 	add	r4,r6,r3
   18fb0:	2007883a 	mov	r3,r4
   18fb4:	e0bdb215 	stw	r2,-2360(fp)
   18fb8:	e0fdb315 	stw	r3,-2356(fp)
    VERIFY_BITS(d, 57);
   18fbc:	e0bdb317 	ldw	r2,-2356(fp)
   18fc0:	1004d67a 	srli	r2,r2,25
   18fc4:	e0bfcc15 	stw	r2,-208(fp)
   18fc8:	e03fcd15 	stw	zero,-204(fp)
   18fcc:	e0ffcc17 	ldw	r3,-208(fp)
   18fd0:	e13fcd17 	ldw	r4,-204(fp)
   18fd4:	1904b03a 	or	r2,r3,r4
   18fd8:	1004c03a 	cmpne	r2,r2,zero
   18fdc:	10803fcc 	andi	r2,r2,255
   18fe0:	10000d26 	beq	r2,zero,19018 <secp256k1_fe_mul_inner+0x4c68>
   18fe4:	d0a01617 	ldw	r2,-32680(gp)
   18fe8:	10c00317 	ldw	r3,12(r2)
   18fec:	008001b4 	movhi	r2,6
   18ff0:	10adf804 	addi	r2,r2,-18464
   18ff4:	d8800015 	stw	r2,0(sp)
   18ff8:	01c0b104 	movi	r7,708
   18ffc:	018001b4 	movhi	r6,6
   19000:	31ab2d04 	addi	r6,r6,-21324
   19004:	014001b4 	movhi	r5,6
   19008:	296b3804 	addi	r5,r5,-21280
   1900c:	1809883a 	mov	r4,r3
   19010:	00452600 	call	45260 <fprintf>
   19014:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    u8 = d & M; d >>= 26; c += u8 * R0;
   19018:	e0bdaf17 	ldw	r2,-2372(fp)
   1901c:	e0bfce15 	stw	r2,-200(fp)
   19020:	e03fcf15 	stw	zero,-196(fp)
   19024:	e0bdb217 	ldw	r2,-2360(fp)
   19028:	e1bfce17 	ldw	r6,-200(fp)
   1902c:	1184703a 	and	r2,r2,r6
   19030:	e0bdcf15 	stw	r2,-2244(fp)
   19034:	e0bdb317 	ldw	r2,-2356(fp)
   19038:	e1ffcf17 	ldw	r7,-196(fp)
   1903c:	11c4703a 	and	r2,r2,r7
   19040:	e0bdd015 	stw	r2,-2240(fp)
   19044:	e0bdb317 	ldw	r2,-2356(fp)
   19048:	100691ba 	slli	r3,r2,6
   1904c:	e0bdb217 	ldw	r2,-2360(fp)
   19050:	1004d6ba 	srli	r2,r2,26
   19054:	10c4b03a 	or	r2,r2,r3
   19058:	e0bdb215 	stw	r2,-2360(fp)
   1905c:	e0bdb317 	ldw	r2,-2356(fp)
   19060:	1004d6ba 	srli	r2,r2,26
   19064:	e0bdb315 	stw	r2,-2356(fp)
   19068:	e0bdb017 	ldw	r2,-2368(fp)
   1906c:	e0bfd015 	stw	r2,-192(fp)
   19070:	e03fd115 	stw	zero,-188(fp)
   19074:	e1bdcf17 	ldw	r6,-2244(fp)
   19078:	e1fdd017 	ldw	r7,-2240(fp)
   1907c:	e13fd017 	ldw	r4,-192(fp)
   19080:	e17fd117 	ldw	r5,-188(fp)
   19084:	00429400 	call	42940 <__muldi3>
   19088:	1009883a 	mov	r4,r2
   1908c:	180b883a 	mov	r5,r3
   19090:	200f883a 	mov	r7,r4
   19094:	2811883a 	mov	r8,r5
   19098:	e13db517 	ldw	r4,-2348(fp)
   1909c:	e17db617 	ldw	r5,-2344(fp)
   190a0:	21c5883a 	add	r2,r4,r7
   190a4:	110d803a 	cmpltu	r6,r2,r4
   190a8:	2a07883a 	add	r3,r5,r8
   190ac:	30c9883a 	add	r4,r6,r3
   190b0:	2007883a 	mov	r3,r4
   190b4:	e0bdb515 	stw	r2,-2348(fp)
   190b8:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u8, 26);
   190bc:	e0bdd017 	ldw	r2,-2240(fp)
   190c0:	100691ba 	slli	r3,r2,6
   190c4:	e0bdcf17 	ldw	r2,-2244(fp)
   190c8:	1004d6ba 	srli	r2,r2,26
   190cc:	e0bfd215 	stw	r2,-184(fp)
   190d0:	e0bfd217 	ldw	r2,-184(fp)
   190d4:	1886b03a 	or	r3,r3,r2
   190d8:	e0ffd215 	stw	r3,-184(fp)
   190dc:	e0bdd017 	ldw	r2,-2240(fp)
   190e0:	1004d6ba 	srli	r2,r2,26
   190e4:	e0bfd315 	stw	r2,-180(fp)
   190e8:	e0ffd217 	ldw	r3,-184(fp)
   190ec:	e13fd317 	ldw	r4,-180(fp)
   190f0:	1904b03a 	or	r2,r3,r4
   190f4:	1004c03a 	cmpne	r2,r2,zero
   190f8:	10803fcc 	andi	r2,r2,255
   190fc:	10000d26 	beq	r2,zero,19134 <secp256k1_fe_mul_inner+0x4d84>
   19100:	d0a01617 	ldw	r2,-32680(gp)
   19104:	10c00317 	ldw	r3,12(r2)
   19108:	008001b4 	movhi	r2,6
   1910c:	10ae0304 	addi	r2,r2,-18420
   19110:	d8800015 	stw	r2,0(sp)
   19114:	01c0b1c4 	movi	r7,711
   19118:	018001b4 	movhi	r6,6
   1911c:	31ab2d04 	addi	r6,r6,-21324
   19120:	014001b4 	movhi	r5,6
   19124:	296b3804 	addi	r5,r5,-21280
   19128:	1809883a 	mov	r4,r3
   1912c:	00452600 	call	45260 <fprintf>
   19130:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 31);
   19134:	e0bdb317 	ldw	r2,-2356(fp)
   19138:	1006907a 	slli	r3,r2,1
   1913c:	e0bdb217 	ldw	r2,-2360(fp)
   19140:	1004d7fa 	srli	r2,r2,31
   19144:	e0bfd415 	stw	r2,-176(fp)
   19148:	e1bfd417 	ldw	r6,-176(fp)
   1914c:	1986b03a 	or	r3,r3,r6
   19150:	e0ffd415 	stw	r3,-176(fp)
   19154:	e0bdb317 	ldw	r2,-2356(fp)
   19158:	1004d7fa 	srli	r2,r2,31
   1915c:	e0bfd515 	stw	r2,-172(fp)
   19160:	e1ffd417 	ldw	r7,-176(fp)
   19164:	e0ffd517 	ldw	r3,-172(fp)
   19168:	38c4b03a 	or	r2,r7,r3
   1916c:	1004c03a 	cmpne	r2,r2,zero
   19170:	10803fcc 	andi	r2,r2,255
   19174:	10000d26 	beq	r2,zero,191ac <secp256k1_fe_mul_inner+0x4dfc>
   19178:	d0a01617 	ldw	r2,-32680(gp)
   1917c:	10c00317 	ldw	r3,12(r2)
   19180:	008001b4 	movhi	r2,6
   19184:	10ae0e04 	addi	r2,r2,-18376
   19188:	d8800015 	stw	r2,0(sp)
   1918c:	01c0b204 	movi	r7,712
   19190:	018001b4 	movhi	r6,6
   19194:	31ab2d04 	addi	r6,r6,-21324
   19198:	014001b4 	movhi	r5,6
   1919c:	296b3804 	addi	r5,r5,-21280
   191a0:	1809883a 	mov	r4,r3
   191a4:	00452600 	call	45260 <fprintf>
   191a8:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x9000016FBFFFC2F8ULL);
   191ac:	01000044 	movi	r4,1
   191b0:	e0fdb617 	ldw	r3,-2344(fp)
   191b4:	00a40034 	movhi	r2,36864
   191b8:	10805bc4 	addi	r2,r2,367
   191bc:	10c00936 	bltu	r2,r3,191e4 <secp256k1_fe_mul_inner+0x4e34>
   191c0:	e0fdb617 	ldw	r3,-2344(fp)
   191c4:	00a40034 	movhi	r2,36864
   191c8:	10805bc4 	addi	r2,r2,367
   191cc:	1880041e 	bne	r3,r2,191e0 <secp256k1_fe_mul_inner+0x4e30>
   191d0:	e0fdb517 	ldw	r3,-2348(fp)
   191d4:	00b00034 	movhi	r2,49152
   191d8:	10b0be04 	addi	r2,r2,-15624
   191dc:	10c00136 	bltu	r2,r3,191e4 <secp256k1_fe_mul_inner+0x4e34>
   191e0:	0009883a 	mov	r4,zero
   191e4:	20803fcc 	andi	r2,r4,255
   191e8:	10000d26 	beq	r2,zero,19220 <secp256k1_fe_mul_inner+0x4e70>
   191ec:	d0a01617 	ldw	r2,-32680(gp)
   191f0:	10c00317 	ldw	r3,12(r2)
   191f4:	008001b4 	movhi	r2,6
   191f8:	10ae1904 	addi	r2,r2,-18332
   191fc:	d8800015 	stw	r2,0(sp)
   19200:	01c0b284 	movi	r7,714
   19204:	018001b4 	movhi	r6,6
   19208:	31ab2d04 	addi	r6,r6,-21324
   1920c:	014001b4 	movhi	r5,6
   19210:	296b3804 	addi	r5,r5,-21280
   19214:	1809883a 	mov	r4,r3
   19218:	00452600 	call	45260 <fprintf>
   1921c:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    r[3] = t3;
   19220:	e0bdd117 	ldw	r2,-2236(fp)
   19224:	10c00304 	addi	r3,r2,12
   19228:	e0bdc217 	ldw	r2,-2296(fp)
   1922c:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[3], 26);
   19230:	e0bdd117 	ldw	r2,-2236(fp)
   19234:	10800304 	addi	r2,r2,12
   19238:	10800017 	ldw	r2,0(r2)
   1923c:	1004d6ba 	srli	r2,r2,26
   19240:	1004c03a 	cmpne	r2,r2,zero
   19244:	10803fcc 	andi	r2,r2,255
   19248:	10000d26 	beq	r2,zero,19280 <secp256k1_fe_mul_inner+0x4ed0>
   1924c:	d0a01617 	ldw	r2,-32680(gp)
   19250:	10c00317 	ldw	r3,12(r2)
   19254:	008001b4 	movhi	r2,6
   19258:	10ae2604 	addi	r2,r2,-18280
   1925c:	d8800015 	stw	r2,0(sp)
   19260:	01c0b384 	movi	r7,718
   19264:	018001b4 	movhi	r6,6
   19268:	31ab2d04 	addi	r6,r6,-21324
   1926c:	014001b4 	movhi	r5,6
   19270:	296b3804 	addi	r5,r5,-21280
   19274:	1809883a 	mov	r4,r3
   19278:	00452600 	call	45260 <fprintf>
   1927c:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[4] = t4;
   19280:	e0bdd117 	ldw	r2,-2236(fp)
   19284:	10c00404 	addi	r3,r2,16
   19288:	e0bdc517 	ldw	r2,-2284(fp)
   1928c:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[4], 26);
   19290:	e0bdd117 	ldw	r2,-2236(fp)
   19294:	10800404 	addi	r2,r2,16
   19298:	10800017 	ldw	r2,0(r2)
   1929c:	1004d6ba 	srli	r2,r2,26
   192a0:	1004c03a 	cmpne	r2,r2,zero
   192a4:	10803fcc 	andi	r2,r2,255
   192a8:	10000d26 	beq	r2,zero,192e0 <secp256k1_fe_mul_inner+0x4f30>
   192ac:	d0a01617 	ldw	r2,-32680(gp)
   192b0:	10c00317 	ldw	r3,12(r2)
   192b4:	008001b4 	movhi	r2,6
   192b8:	10ae3204 	addi	r2,r2,-18232
   192bc:	d8800015 	stw	r2,0(sp)
   192c0:	01c0b444 	movi	r7,721
   192c4:	018001b4 	movhi	r6,6
   192c8:	31ab2d04 	addi	r6,r6,-21324
   192cc:	014001b4 	movhi	r5,6
   192d0:	296b3804 	addi	r5,r5,-21280
   192d4:	1809883a 	mov	r4,r3
   192d8:	00452600 	call	45260 <fprintf>
   192dc:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[5] = t5;
   192e0:	e0bdd117 	ldw	r2,-2236(fp)
   192e4:	10c00504 	addi	r3,r2,20
   192e8:	e0bdc817 	ldw	r2,-2272(fp)
   192ec:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[5], 26);
   192f0:	e0bdd117 	ldw	r2,-2236(fp)
   192f4:	10800504 	addi	r2,r2,20
   192f8:	10800017 	ldw	r2,0(r2)
   192fc:	1004d6ba 	srli	r2,r2,26
   19300:	1004c03a 	cmpne	r2,r2,zero
   19304:	10803fcc 	andi	r2,r2,255
   19308:	10000d26 	beq	r2,zero,19340 <secp256k1_fe_mul_inner+0x4f90>
   1930c:	d0a01617 	ldw	r2,-32680(gp)
   19310:	10c00317 	ldw	r3,12(r2)
   19314:	008001b4 	movhi	r2,6
   19318:	10ae3e04 	addi	r2,r2,-18184
   1931c:	d8800015 	stw	r2,0(sp)
   19320:	01c0b504 	movi	r7,724
   19324:	018001b4 	movhi	r6,6
   19328:	31ab2d04 	addi	r6,r6,-21324
   1932c:	014001b4 	movhi	r5,6
   19330:	296b3804 	addi	r5,r5,-21280
   19334:	1809883a 	mov	r4,r3
   19338:	00452600 	call	45260 <fprintf>
   1933c:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[6] = t6;
   19340:	e0bdd117 	ldw	r2,-2236(fp)
   19344:	10c00604 	addi	r3,r2,24
   19348:	e0bdcb17 	ldw	r2,-2260(fp)
   1934c:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[6], 26);
   19350:	e0bdd117 	ldw	r2,-2236(fp)
   19354:	10800604 	addi	r2,r2,24
   19358:	10800017 	ldw	r2,0(r2)
   1935c:	1004d6ba 	srli	r2,r2,26
   19360:	1004c03a 	cmpne	r2,r2,zero
   19364:	10803fcc 	andi	r2,r2,255
   19368:	10000d26 	beq	r2,zero,193a0 <secp256k1_fe_mul_inner+0x4ff0>
   1936c:	d0a01617 	ldw	r2,-32680(gp)
   19370:	10c00317 	ldw	r3,12(r2)
   19374:	008001b4 	movhi	r2,6
   19378:	10ae4a04 	addi	r2,r2,-18136
   1937c:	d8800015 	stw	r2,0(sp)
   19380:	01c0b5c4 	movi	r7,727
   19384:	018001b4 	movhi	r6,6
   19388:	31ab2d04 	addi	r6,r6,-21324
   1938c:	014001b4 	movhi	r5,6
   19390:	296b3804 	addi	r5,r5,-21280
   19394:	1809883a 	mov	r4,r3
   19398:	00452600 	call	45260 <fprintf>
   1939c:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[7] = t7;
   193a0:	e0bdd117 	ldw	r2,-2236(fp)
   193a4:	10c00704 	addi	r3,r2,28
   193a8:	e0bdce17 	ldw	r2,-2248(fp)
   193ac:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[7], 26);
   193b0:	e0bdd117 	ldw	r2,-2236(fp)
   193b4:	10800704 	addi	r2,r2,28
   193b8:	10800017 	ldw	r2,0(r2)
   193bc:	1004d6ba 	srli	r2,r2,26
   193c0:	1004c03a 	cmpne	r2,r2,zero
   193c4:	10803fcc 	andi	r2,r2,255
   193c8:	10000d26 	beq	r2,zero,19400 <secp256k1_fe_mul_inner+0x5050>
   193cc:	d0a01617 	ldw	r2,-32680(gp)
   193d0:	10c00317 	ldw	r3,12(r2)
   193d4:	008001b4 	movhi	r2,6
   193d8:	10ae5604 	addi	r2,r2,-18088
   193dc:	d8800015 	stw	r2,0(sp)
   193e0:	01c0b684 	movi	r7,730
   193e4:	018001b4 	movhi	r6,6
   193e8:	31ab2d04 	addi	r6,r6,-21324
   193ec:	014001b4 	movhi	r5,6
   193f0:	296b3804 	addi	r5,r5,-21280
   193f4:	1809883a 	mov	r4,r3
   193f8:	00452600 	call	45260 <fprintf>
   193fc:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    r[8] = c & M; c >>= 26; c += u8 * R1;
   19400:	e0bdd117 	ldw	r2,-2236(fp)
   19404:	11000804 	addi	r4,r2,32
   19408:	e0fdb517 	ldw	r3,-2348(fp)
   1940c:	e0bdaf17 	ldw	r2,-2372(fp)
   19410:	1884703a 	and	r2,r3,r2
   19414:	20800015 	stw	r2,0(r4)
   19418:	e0bdb617 	ldw	r2,-2344(fp)
   1941c:	100691ba 	slli	r3,r2,6
   19420:	e0bdb517 	ldw	r2,-2348(fp)
   19424:	1004d6ba 	srli	r2,r2,26
   19428:	10c4b03a 	or	r2,r2,r3
   1942c:	e0bdb515 	stw	r2,-2348(fp)
   19430:	e0bdb617 	ldw	r2,-2344(fp)
   19434:	1004d6ba 	srli	r2,r2,26
   19438:	e0bdb615 	stw	r2,-2344(fp)
   1943c:	e0bdb117 	ldw	r2,-2364(fp)
   19440:	e0bfd615 	stw	r2,-168(fp)
   19444:	e03fd715 	stw	zero,-164(fp)
   19448:	e1bdcf17 	ldw	r6,-2244(fp)
   1944c:	e1fdd017 	ldw	r7,-2240(fp)
   19450:	e13fd617 	ldw	r4,-168(fp)
   19454:	e17fd717 	ldw	r5,-164(fp)
   19458:	00429400 	call	42940 <__muldi3>
   1945c:	1009883a 	mov	r4,r2
   19460:	180b883a 	mov	r5,r3
   19464:	200f883a 	mov	r7,r4
   19468:	2811883a 	mov	r8,r5
   1946c:	e13db517 	ldw	r4,-2348(fp)
   19470:	e17db617 	ldw	r5,-2344(fp)
   19474:	21c5883a 	add	r2,r4,r7
   19478:	110d803a 	cmpltu	r6,r2,r4
   1947c:	2a07883a 	add	r3,r5,r8
   19480:	30c9883a 	add	r4,r6,r3
   19484:	2007883a 	mov	r3,r4
   19488:	e0bdb515 	stw	r2,-2348(fp)
   1948c:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(r[8], 26);
   19490:	e0bdd117 	ldw	r2,-2236(fp)
   19494:	10800804 	addi	r2,r2,32
   19498:	10800017 	ldw	r2,0(r2)
   1949c:	1004d6ba 	srli	r2,r2,26
   194a0:	1004c03a 	cmpne	r2,r2,zero
   194a4:	10803fcc 	andi	r2,r2,255
   194a8:	10000d26 	beq	r2,zero,194e0 <secp256k1_fe_mul_inner+0x5130>
   194ac:	d0a01617 	ldw	r2,-32680(gp)
   194b0:	10c00317 	ldw	r3,12(r2)
   194b4:	008001b4 	movhi	r2,6
   194b8:	10ae6204 	addi	r2,r2,-18040
   194bc:	d8800015 	stw	r2,0(sp)
   194c0:	01c0b784 	movi	r7,734
   194c4:	018001b4 	movhi	r6,6
   194c8:	31ab2d04 	addi	r6,r6,-21324
   194cc:	014001b4 	movhi	r5,6
   194d0:	296b3804 	addi	r5,r5,-21280
   194d4:	1809883a 	mov	r4,r3
   194d8:	00452600 	call	45260 <fprintf>
   194dc:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   194e0:	e0bdb617 	ldw	r2,-2344(fp)
   194e4:	1004d1fa 	srli	r2,r2,7
   194e8:	e0bfd815 	stw	r2,-160(fp)
   194ec:	e03fd915 	stw	zero,-156(fp)
   194f0:	e13fd817 	ldw	r4,-160(fp)
   194f4:	e1bfd917 	ldw	r6,-156(fp)
   194f8:	2184b03a 	or	r2,r4,r6
   194fc:	1004c03a 	cmpne	r2,r2,zero
   19500:	10803fcc 	andi	r2,r2,255
   19504:	10000d26 	beq	r2,zero,1953c <secp256k1_fe_mul_inner+0x518c>
   19508:	d0a01617 	ldw	r2,-32680(gp)
   1950c:	10c00317 	ldw	r3,12(r2)
   19510:	008001b4 	movhi	r2,6
   19514:	10ad2c04 	addi	r2,r2,-19280
   19518:	d8800015 	stw	r2,0(sp)
   1951c:	01c0b7c4 	movi	r7,735
   19520:	018001b4 	movhi	r6,6
   19524:	31ab2d04 	addi	r6,r6,-21324
   19528:	014001b4 	movhi	r5,6
   1952c:	296b3804 	addi	r5,r5,-21280
   19530:	1809883a 	mov	r4,r3
   19534:	00452600 	call	45260 <fprintf>
   19538:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9+c-u8*R1 r8-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 0 t9+c r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    c   += d * R0 + t9;
   1953c:	e0bdb017 	ldw	r2,-2368(fp)
   19540:	e0bfda15 	stw	r2,-152(fp)
   19544:	e03fdb15 	stw	zero,-148(fp)
   19548:	e1bdb217 	ldw	r6,-2360(fp)
   1954c:	e1fdb317 	ldw	r7,-2356(fp)
   19550:	e13fda17 	ldw	r4,-152(fp)
   19554:	e17fdb17 	ldw	r5,-148(fp)
   19558:	00429400 	call	42940 <__muldi3>
   1955c:	100f883a 	mov	r7,r2
   19560:	1811883a 	mov	r8,r3
   19564:	380b883a 	mov	r5,r7
   19568:	400d883a 	mov	r6,r8
   1956c:	e0bdb417 	ldw	r2,-2352(fp)
   19570:	e0bfdc15 	stw	r2,-144(fp)
   19574:	e03fdd15 	stw	zero,-140(fp)
   19578:	e1ffdc17 	ldw	r7,-144(fp)
   1957c:	29c5883a 	add	r2,r5,r7
   19580:	1149803a 	cmpltu	r4,r2,r5
   19584:	e1ffdd17 	ldw	r7,-140(fp)
   19588:	31c7883a 	add	r3,r6,r7
   1958c:	20c9883a 	add	r4,r4,r3
   19590:	2007883a 	mov	r3,r4
   19594:	100f883a 	mov	r7,r2
   19598:	1811883a 	mov	r8,r3
   1959c:	e13db517 	ldw	r4,-2348(fp)
   195a0:	e17db617 	ldw	r5,-2344(fp)
   195a4:	21c5883a 	add	r2,r4,r7
   195a8:	110d803a 	cmpltu	r6,r2,r4
   195ac:	2a07883a 	add	r3,r5,r8
   195b0:	30c9883a 	add	r4,r6,r3
   195b4:	2007883a 	mov	r3,r4
   195b8:	e0bdb515 	stw	r2,-2348(fp)
   195bc:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(c, 45);
   195c0:	e0bdb617 	ldw	r2,-2344(fp)
   195c4:	1004d37a 	srli	r2,r2,13
   195c8:	e0bfde15 	stw	r2,-136(fp)
   195cc:	e03fdf15 	stw	zero,-132(fp)
   195d0:	e0ffde17 	ldw	r3,-136(fp)
   195d4:	e13fdf17 	ldw	r4,-132(fp)
   195d8:	1904b03a 	or	r2,r3,r4
   195dc:	1004c03a 	cmpne	r2,r2,zero
   195e0:	10803fcc 	andi	r2,r2,255
   195e4:	10000d26 	beq	r2,zero,1961c <secp256k1_fe_mul_inner+0x526c>
   195e8:	d0a01617 	ldw	r2,-32680(gp)
   195ec:	10c00317 	ldw	r3,12(r2)
   195f0:	008001b4 	movhi	r2,6
   195f4:	10ae6e04 	addi	r2,r2,-17992
   195f8:	d8800015 	stw	r2,0(sp)
   195fc:	01c0b8c4 	movi	r7,739
   19600:	018001b4 	movhi	r6,6
   19604:	31ab2d04 	addi	r6,r6,-21324
   19608:	014001b4 	movhi	r5,6
   1960c:	296b3804 	addi	r5,r5,-21280
   19610:	1809883a 	mov	r4,r3
   19614:	00452600 	call	45260 <fprintf>
   19618:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 0 0 c-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[9] = c & (M >> 4); c >>= 22; c += d * (R1 << 4);
   1961c:	e0bdd117 	ldw	r2,-2236(fp)
   19620:	11000904 	addi	r4,r2,36
   19624:	e0bdaf17 	ldw	r2,-2372(fp)
   19628:	1006d13a 	srli	r3,r2,4
   1962c:	e0bdb517 	ldw	r2,-2348(fp)
   19630:	1884703a 	and	r2,r3,r2
   19634:	20800015 	stw	r2,0(r4)
   19638:	e0bdb617 	ldw	r2,-2344(fp)
   1963c:	100692ba 	slli	r3,r2,10
   19640:	e0bdb517 	ldw	r2,-2348(fp)
   19644:	1004d5ba 	srli	r2,r2,22
   19648:	10c4b03a 	or	r2,r2,r3
   1964c:	e0bdb515 	stw	r2,-2348(fp)
   19650:	e0bdb617 	ldw	r2,-2344(fp)
   19654:	1004d5ba 	srli	r2,r2,22
   19658:	e0bdb615 	stw	r2,-2344(fp)
   1965c:	e0bdb117 	ldw	r2,-2364(fp)
   19660:	1004913a 	slli	r2,r2,4
   19664:	e0bfe015 	stw	r2,-128(fp)
   19668:	e03fe115 	stw	zero,-124(fp)
   1966c:	e1bdb217 	ldw	r6,-2360(fp)
   19670:	e1fdb317 	ldw	r7,-2356(fp)
   19674:	e13fe017 	ldw	r4,-128(fp)
   19678:	e17fe117 	ldw	r5,-124(fp)
   1967c:	00429400 	call	42940 <__muldi3>
   19680:	1009883a 	mov	r4,r2
   19684:	180b883a 	mov	r5,r3
   19688:	200f883a 	mov	r7,r4
   1968c:	2811883a 	mov	r8,r5
   19690:	e13db517 	ldw	r4,-2348(fp)
   19694:	e17db617 	ldw	r5,-2344(fp)
   19698:	21c5883a 	add	r2,r4,r7
   1969c:	110d803a 	cmpltu	r6,r2,r4
   196a0:	2a07883a 	add	r3,r5,r8
   196a4:	30c9883a 	add	r4,r6,r3
   196a8:	2007883a 	mov	r3,r4
   196ac:	e0bdb515 	stw	r2,-2348(fp)
   196b0:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(r[9], 22);
   196b4:	e0bdd117 	ldw	r2,-2236(fp)
   196b8:	10800904 	addi	r2,r2,36
   196bc:	10800017 	ldw	r2,0(r2)
   196c0:	1004d5ba 	srli	r2,r2,22
   196c4:	1004c03a 	cmpne	r2,r2,zero
   196c8:	10803fcc 	andi	r2,r2,255
   196cc:	10000d26 	beq	r2,zero,19704 <secp256k1_fe_mul_inner+0x5354>
   196d0:	d0a01617 	ldw	r2,-32680(gp)
   196d4:	10c00317 	ldw	r3,12(r2)
   196d8:	008001b4 	movhi	r2,6
   196dc:	10ae7904 	addi	r2,r2,-17948
   196e0:	d8800015 	stw	r2,0(sp)
   196e4:	01c0b984 	movi	r7,742
   196e8:	018001b4 	movhi	r6,6
   196ec:	31ab2d04 	addi	r6,r6,-21324
   196f0:	014001b4 	movhi	r5,6
   196f4:	296b3804 	addi	r5,r5,-21280
   196f8:	1809883a 	mov	r4,r3
   196fc:	00452600 	call	45260 <fprintf>
   19700:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 46);
   19704:	e0bdb617 	ldw	r2,-2344(fp)
   19708:	1004d3ba 	srli	r2,r2,14
   1970c:	e0bfe215 	stw	r2,-120(fp)
   19710:	e03fe315 	stw	zero,-116(fp)
   19714:	e1bfe217 	ldw	r6,-120(fp)
   19718:	e1ffe317 	ldw	r7,-116(fp)
   1971c:	31c4b03a 	or	r2,r6,r7
   19720:	1004c03a 	cmpne	r2,r2,zero
   19724:	10803fcc 	andi	r2,r2,255
   19728:	10000d26 	beq	r2,zero,19760 <secp256k1_fe_mul_inner+0x53b0>
   1972c:	d0a01617 	ldw	r2,-32680(gp)
   19730:	10c00317 	ldw	r3,12(r2)
   19734:	008001b4 	movhi	r2,6
   19738:	10ae8504 	addi	r2,r2,-17900
   1973c:	d8800015 	stw	r2,0(sp)
   19740:	01c0b9c4 	movi	r7,743
   19744:	018001b4 	movhi	r6,6
   19748:	31ab2d04 	addi	r6,r6,-21324
   1974c:	014001b4 	movhi	r5,6
   19750:	296b3804 	addi	r5,r5,-21280
   19754:	1809883a 	mov	r4,r3
   19758:	00452600 	call	45260 <fprintf>
   1975c:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 0 r9+((c-d*R1<<4)<<22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 -d*R1 r9+(c<<22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    d    = c * (R0 >> 4) + t0;
   19760:	e0bdb017 	ldw	r2,-2368(fp)
   19764:	1004d13a 	srli	r2,r2,4
   19768:	e0bfe415 	stw	r2,-112(fp)
   1976c:	e03fe515 	stw	zero,-108(fp)
   19770:	e1bdb517 	ldw	r6,-2348(fp)
   19774:	e1fdb617 	ldw	r7,-2344(fp)
   19778:	e13fe417 	ldw	r4,-112(fp)
   1977c:	e17fe517 	ldw	r5,-108(fp)
   19780:	00429400 	call	42940 <__muldi3>
   19784:	100d883a 	mov	r6,r2
   19788:	180f883a 	mov	r7,r3
   1978c:	3009883a 	mov	r4,r6
   19790:	380b883a 	mov	r5,r7
   19794:	e0bdb917 	ldw	r2,-2332(fp)
   19798:	e0bfe615 	stw	r2,-104(fp)
   1979c:	e03fe715 	stw	zero,-100(fp)
   197a0:	e1bfe617 	ldw	r6,-104(fp)
   197a4:	2185883a 	add	r2,r4,r6
   197a8:	110d803a 	cmpltu	r6,r2,r4
   197ac:	e1ffe717 	ldw	r7,-100(fp)
   197b0:	29c7883a 	add	r3,r5,r7
   197b4:	30c9883a 	add	r4,r6,r3
   197b8:	2007883a 	mov	r3,r4
   197bc:	e0bdb215 	stw	r2,-2360(fp)
   197c0:	e0fdb315 	stw	r3,-2356(fp)
    VERIFY_BITS(d, 56);
   197c4:	e0bdb317 	ldw	r2,-2356(fp)
   197c8:	1004d63a 	srli	r2,r2,24
   197cc:	e0bfe815 	stw	r2,-96(fp)
   197d0:	e03fe915 	stw	zero,-92(fp)
   197d4:	e0ffe817 	ldw	r3,-96(fp)
   197d8:	e13fe917 	ldw	r4,-92(fp)
   197dc:	1904b03a 	or	r2,r3,r4
   197e0:	1004c03a 	cmpne	r2,r2,zero
   197e4:	10803fcc 	andi	r2,r2,255
   197e8:	10000d26 	beq	r2,zero,19820 <secp256k1_fe_mul_inner+0x5470>
   197ec:	d0a01617 	ldw	r2,-32680(gp)
   197f0:	10c00317 	ldw	r3,12(r2)
   197f4:	008001b4 	movhi	r2,6
   197f8:	10ae9004 	addi	r2,r2,-17856
   197fc:	d8800015 	stw	r2,0(sp)
   19800:	01c0bb44 	movi	r7,749
   19804:	018001b4 	movhi	r6,6
   19808:	31ab2d04 	addi	r6,r6,-21324
   1980c:	014001b4 	movhi	r5,6
   19810:	296b3804 	addi	r5,r5,-21280
   19814:	1809883a 	mov	r4,r3
   19818:	00452600 	call	45260 <fprintf>
   1981c:	00450340 	call	45034 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1 d-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[0] = d & M; d >>= 26;
   19820:	e0fdb217 	ldw	r3,-2360(fp)
   19824:	e0bdaf17 	ldw	r2,-2372(fp)
   19828:	1886703a 	and	r3,r3,r2
   1982c:	e0bdd117 	ldw	r2,-2236(fp)
   19830:	10c00015 	stw	r3,0(r2)
   19834:	e0bdb317 	ldw	r2,-2356(fp)
   19838:	100491ba 	slli	r2,r2,6
   1983c:	e0fdb217 	ldw	r3,-2360(fp)
   19840:	1806d6ba 	srli	r3,r3,26
   19844:	1884b03a 	or	r2,r3,r2
   19848:	e0bdb215 	stw	r2,-2360(fp)
   1984c:	e0bdb317 	ldw	r2,-2356(fp)
   19850:	1004d6ba 	srli	r2,r2,26
   19854:	e0bdb315 	stw	r2,-2356(fp)
    VERIFY_BITS(r[0], 26);
   19858:	e0bdd117 	ldw	r2,-2236(fp)
   1985c:	10800017 	ldw	r2,0(r2)
   19860:	1004d6ba 	srli	r2,r2,26
   19864:	1004c03a 	cmpne	r2,r2,zero
   19868:	10803fcc 	andi	r2,r2,255
   1986c:	10000d26 	beq	r2,zero,198a4 <secp256k1_fe_mul_inner+0x54f4>
   19870:	d0a01617 	ldw	r2,-32680(gp)
   19874:	10c00317 	ldw	r3,12(r2)
   19878:	008001b4 	movhi	r2,6
   1987c:	10ae9b04 	addi	r2,r2,-17812
   19880:	d8800015 	stw	r2,0(sp)
   19884:	01c0bc04 	movi	r7,752
   19888:	018001b4 	movhi	r6,6
   1988c:	31ab2d04 	addi	r6,r6,-21324
   19890:	014001b4 	movhi	r5,6
   19894:	296b3804 	addi	r5,r5,-21280
   19898:	1809883a 	mov	r4,r3
   1989c:	00452600 	call	45260 <fprintf>
   198a0:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 30);
   198a4:	e0bdb317 	ldw	r2,-2356(fp)
   198a8:	100490ba 	slli	r2,r2,2
   198ac:	e0fdb217 	ldw	r3,-2360(fp)
   198b0:	1806d7ba 	srli	r3,r3,30
   198b4:	e0ffea15 	stw	r3,-88(fp)
   198b8:	e1bfea17 	ldw	r6,-88(fp)
   198bc:	1184b03a 	or	r2,r2,r6
   198c0:	e0bfea15 	stw	r2,-88(fp)
   198c4:	e0bdb317 	ldw	r2,-2356(fp)
   198c8:	1004d7ba 	srli	r2,r2,30
   198cc:	e0bfeb15 	stw	r2,-84(fp)
   198d0:	e1ffea17 	ldw	r7,-88(fp)
   198d4:	e0ffeb17 	ldw	r3,-84(fp)
   198d8:	38c4b03a 	or	r2,r7,r3
   198dc:	1004c03a 	cmpne	r2,r2,zero
   198e0:	10803fcc 	andi	r2,r2,255
   198e4:	10000d26 	beq	r2,zero,1991c <secp256k1_fe_mul_inner+0x556c>
   198e8:	d0a01617 	ldw	r2,-32680(gp)
   198ec:	10c00317 	ldw	r3,12(r2)
   198f0:	008001b4 	movhi	r2,6
   198f4:	10aea704 	addi	r2,r2,-17764
   198f8:	d8800015 	stw	r2,0(sp)
   198fc:	01c0bc44 	movi	r7,753
   19900:	018001b4 	movhi	r6,6
   19904:	31ab2d04 	addi	r6,r6,-21324
   19908:	014001b4 	movhi	r5,6
   1990c:	296b3804 	addi	r5,r5,-21280
   19910:	1809883a 	mov	r4,r3
   19914:	00452600 	call	45260 <fprintf>
   19918:	00450340 	call	45034 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1+d r0-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d   += c * (R1 >> 4) + t1;
   1991c:	e0bdb117 	ldw	r2,-2364(fp)
   19920:	1004d13a 	srli	r2,r2,4
   19924:	e0bfec15 	stw	r2,-80(fp)
   19928:	e03fed15 	stw	zero,-76(fp)
   1992c:	e1bdb517 	ldw	r6,-2348(fp)
   19930:	e1fdb617 	ldw	r7,-2344(fp)
   19934:	e13fec17 	ldw	r4,-80(fp)
   19938:	e17fed17 	ldw	r5,-76(fp)
   1993c:	00429400 	call	42940 <__muldi3>
   19940:	100d883a 	mov	r6,r2
   19944:	180f883a 	mov	r7,r3
   19948:	3009883a 	mov	r4,r6
   1994c:	380b883a 	mov	r5,r7
   19950:	e0bdbc17 	ldw	r2,-2320(fp)
   19954:	e0bfee15 	stw	r2,-72(fp)
   19958:	e03fef15 	stw	zero,-68(fp)
   1995c:	e1bfee17 	ldw	r6,-72(fp)
   19960:	2185883a 	add	r2,r4,r6
   19964:	110d803a 	cmpltu	r6,r2,r4
   19968:	e1ffef17 	ldw	r7,-68(fp)
   1996c:	29c7883a 	add	r3,r5,r7
   19970:	30c9883a 	add	r4,r6,r3
   19974:	2007883a 	mov	r3,r4
   19978:	100d883a 	mov	r6,r2
   1997c:	180f883a 	mov	r7,r3
   19980:	e13db217 	ldw	r4,-2360(fp)
   19984:	e17db317 	ldw	r5,-2356(fp)
   19988:	2185883a 	add	r2,r4,r6
   1998c:	1111803a 	cmpltu	r8,r2,r4
   19990:	29c7883a 	add	r3,r5,r7
   19994:	40c9883a 	add	r4,r8,r3
   19998:	2007883a 	mov	r3,r4
   1999c:	e0bdb215 	stw	r2,-2360(fp)
   199a0:	e0fdb315 	stw	r3,-2356(fp)
    VERIFY_BITS(d, 53);
   199a4:	e0bdb317 	ldw	r2,-2356(fp)
   199a8:	1004d57a 	srli	r2,r2,21
   199ac:	e0bff015 	stw	r2,-64(fp)
   199b0:	e03ff115 	stw	zero,-60(fp)
   199b4:	e0fff017 	ldw	r3,-64(fp)
   199b8:	e13ff117 	ldw	r4,-60(fp)
   199bc:	1904b03a 	or	r2,r3,r4
   199c0:	1004c03a 	cmpne	r2,r2,zero
   199c4:	10803fcc 	andi	r2,r2,255
   199c8:	10000d26 	beq	r2,zero,19a00 <secp256k1_fe_mul_inner+0x5650>
   199cc:	d0a01617 	ldw	r2,-32680(gp)
   199d0:	10c00317 	ldw	r3,12(r2)
   199d4:	008001b4 	movhi	r2,6
   199d8:	10aeb204 	addi	r2,r2,-17720
   199dc:	d8800015 	stw	r2,0(sp)
   199e0:	01c0bd04 	movi	r7,756
   199e4:	018001b4 	movhi	r6,6
   199e8:	31ab2d04 	addi	r6,r6,-21324
   199ec:	014001b4 	movhi	r5,6
   199f0:	296b3804 	addi	r5,r5,-21280
   199f4:	1809883a 	mov	r4,r3
   199f8:	00452600 	call	45260 <fprintf>
   199fc:	00450340 	call	45034 <abort>
    VERIFY_CHECK(d <= 0x10000003FFFFBFULL);
   19a00:	01000044 	movi	r4,1
   19a04:	e0bdb317 	ldw	r2,-2356(fp)
   19a08:	00c00434 	movhi	r3,16
   19a0c:	18800836 	bltu	r3,r2,19a30 <secp256k1_fe_mul_inner+0x5680>
   19a10:	e0fdb317 	ldw	r3,-2356(fp)
   19a14:	00800434 	movhi	r2,16
   19a18:	1880041e 	bne	r3,r2,19a2c <secp256k1_fe_mul_inner+0x567c>
   19a1c:	e0fdb217 	ldw	r3,-2360(fp)
   19a20:	00810034 	movhi	r2,1024
   19a24:	10bfefc4 	addi	r2,r2,-65
   19a28:	10c00136 	bltu	r2,r3,19a30 <secp256k1_fe_mul_inner+0x5680>
   19a2c:	0009883a 	mov	r4,zero
   19a30:	20803fcc 	andi	r2,r4,255
   19a34:	10000d26 	beq	r2,zero,19a6c <secp256k1_fe_mul_inner+0x56bc>
   19a38:	d0a01617 	ldw	r2,-32680(gp)
   19a3c:	10c00317 	ldw	r3,12(r2)
   19a40:	008001b4 	movhi	r2,6
   19a44:	10aebd04 	addi	r2,r2,-17676
   19a48:	d8800015 	stw	r2,0(sp)
   19a4c:	01c0bd44 	movi	r7,757
   19a50:	018001b4 	movhi	r6,6
   19a54:	31ab2d04 	addi	r6,r6,-21324
   19a58:	014001b4 	movhi	r5,6
   19a5c:	296b3804 	addi	r5,r5,-21280
   19a60:	1809883a 	mov	r4,r3
   19a64:	00452600 	call	45260 <fprintf>
   19a68:	00450340 	call	45034 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 d-c*R1>>4 r0-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [r9 r8 r7 r6 r5 r4 r3 t2 d r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[1] = d & M; d >>= 26;
   19a6c:	e0bdd117 	ldw	r2,-2236(fp)
   19a70:	10800104 	addi	r2,r2,4
   19a74:	e13db217 	ldw	r4,-2360(fp)
   19a78:	e0fdaf17 	ldw	r3,-2372(fp)
   19a7c:	20c6703a 	and	r3,r4,r3
   19a80:	10c00015 	stw	r3,0(r2)
   19a84:	e0bdb317 	ldw	r2,-2356(fp)
   19a88:	100491ba 	slli	r2,r2,6
   19a8c:	e0fdb217 	ldw	r3,-2360(fp)
   19a90:	1806d6ba 	srli	r3,r3,26
   19a94:	1884b03a 	or	r2,r3,r2
   19a98:	e0bdb215 	stw	r2,-2360(fp)
   19a9c:	e0bdb317 	ldw	r2,-2356(fp)
   19aa0:	1004d6ba 	srli	r2,r2,26
   19aa4:	e0bdb315 	stw	r2,-2356(fp)
    VERIFY_BITS(r[1], 26);
   19aa8:	e0bdd117 	ldw	r2,-2236(fp)
   19aac:	10800104 	addi	r2,r2,4
   19ab0:	10800017 	ldw	r2,0(r2)
   19ab4:	1004d6ba 	srli	r2,r2,26
   19ab8:	1004c03a 	cmpne	r2,r2,zero
   19abc:	10803fcc 	andi	r2,r2,255
   19ac0:	10000d26 	beq	r2,zero,19af8 <secp256k1_fe_mul_inner+0x5748>
   19ac4:	d0a01617 	ldw	r2,-32680(gp)
   19ac8:	10c00317 	ldw	r3,12(r2)
   19acc:	008001b4 	movhi	r2,6
   19ad0:	10aec904 	addi	r2,r2,-17628
   19ad4:	d8800015 	stw	r2,0(sp)
   19ad8:	01c0be44 	movi	r7,761
   19adc:	018001b4 	movhi	r6,6
   19ae0:	31ab2d04 	addi	r6,r6,-21324
   19ae4:	014001b4 	movhi	r5,6
   19ae8:	296b3804 	addi	r5,r5,-21280
   19aec:	1809883a 	mov	r4,r3
   19af0:	00452600 	call	45260 <fprintf>
   19af4:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 27);
   19af8:	e0bdb317 	ldw	r2,-2356(fp)
   19afc:	1004917a 	slli	r2,r2,5
   19b00:	e0fdb217 	ldw	r3,-2360(fp)
   19b04:	1806d6fa 	srli	r3,r3,27
   19b08:	e0fff215 	stw	r3,-56(fp)
   19b0c:	e1bff217 	ldw	r6,-56(fp)
   19b10:	1184b03a 	or	r2,r2,r6
   19b14:	e0bff215 	stw	r2,-56(fp)
   19b18:	e0bdb317 	ldw	r2,-2356(fp)
   19b1c:	1004d6fa 	srli	r2,r2,27
   19b20:	e0bff315 	stw	r2,-52(fp)
   19b24:	e1fff217 	ldw	r7,-56(fp)
   19b28:	e0fff317 	ldw	r3,-52(fp)
   19b2c:	38c4b03a 	or	r2,r7,r3
   19b30:	1004c03a 	cmpne	r2,r2,zero
   19b34:	10803fcc 	andi	r2,r2,255
   19b38:	10000d26 	beq	r2,zero,19b70 <secp256k1_fe_mul_inner+0x57c0>
   19b3c:	d0a01617 	ldw	r2,-32680(gp)
   19b40:	10c00317 	ldw	r3,12(r2)
   19b44:	008001b4 	movhi	r2,6
   19b48:	10aed504 	addi	r2,r2,-17580
   19b4c:	d8800015 	stw	r2,0(sp)
   19b50:	01c0be84 	movi	r7,762
   19b54:	018001b4 	movhi	r6,6
   19b58:	31ab2d04 	addi	r6,r6,-21324
   19b5c:	014001b4 	movhi	r5,6
   19b60:	296b3804 	addi	r5,r5,-21280
   19b64:	1809883a 	mov	r4,r3
   19b68:	00452600 	call	45260 <fprintf>
   19b6c:	00450340 	call	45034 <abort>
    VERIFY_CHECK(d <= 0x4000000ULL);
   19b70:	01000044 	movi	r4,1
   19b74:	e0bdb317 	ldw	r2,-2356(fp)
   19b78:	1000061e 	bne	r2,zero,19b94 <secp256k1_fe_mul_inner+0x57e4>
   19b7c:	e0bdb317 	ldw	r2,-2356(fp)
   19b80:	1000031e 	bne	r2,zero,19b90 <secp256k1_fe_mul_inner+0x57e0>
   19b84:	e0bdb217 	ldw	r2,-2360(fp)
   19b88:	00c10034 	movhi	r3,1024
   19b8c:	18800136 	bltu	r3,r2,19b94 <secp256k1_fe_mul_inner+0x57e4>
   19b90:	0009883a 	mov	r4,zero
   19b94:	20803fcc 	andi	r2,r4,255
   19b98:	10000d26 	beq	r2,zero,19bd0 <secp256k1_fe_mul_inner+0x5820>
   19b9c:	d0a01617 	ldw	r2,-32680(gp)
   19ba0:	10c00317 	ldw	r3,12(r2)
   19ba4:	008001b4 	movhi	r2,6
   19ba8:	10aee004 	addi	r2,r2,-17536
   19bac:	d8800015 	stw	r2,0(sp)
   19bb0:	01c0bec4 	movi	r7,763
   19bb4:	018001b4 	movhi	r6,6
   19bb8:	31ab2d04 	addi	r6,r6,-21324
   19bbc:	014001b4 	movhi	r5,6
   19bc0:	296b3804 	addi	r5,r5,-21280
   19bc4:	1809883a 	mov	r4,r3
   19bc8:	00452600 	call	45260 <fprintf>
   19bcc:	00450340 	call	45034 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 t2+d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d   += t2;
   19bd0:	e0bdbf17 	ldw	r2,-2308(fp)
   19bd4:	e0bff415 	stw	r2,-48(fp)
   19bd8:	e03ff515 	stw	zero,-44(fp)
   19bdc:	e13db217 	ldw	r4,-2360(fp)
   19be0:	e17db317 	ldw	r5,-2356(fp)
   19be4:	e1bff417 	ldw	r6,-48(fp)
   19be8:	2185883a 	add	r2,r4,r6
   19bec:	110d803a 	cmpltu	r6,r2,r4
   19bf0:	e1fff517 	ldw	r7,-44(fp)
   19bf4:	29c7883a 	add	r3,r5,r7
   19bf8:	30c9883a 	add	r4,r6,r3
   19bfc:	2007883a 	mov	r3,r4
   19c00:	e0bdb215 	stw	r2,-2360(fp)
   19c04:	e0fdb315 	stw	r3,-2356(fp)
    VERIFY_BITS(d, 27);
   19c08:	e0bdb317 	ldw	r2,-2356(fp)
   19c0c:	1004917a 	slli	r2,r2,5
   19c10:	e0fdb217 	ldw	r3,-2360(fp)
   19c14:	1806d6fa 	srli	r3,r3,27
   19c18:	e0fff615 	stw	r3,-40(fp)
   19c1c:	e0fff617 	ldw	r3,-40(fp)
   19c20:	10c4b03a 	or	r2,r2,r3
   19c24:	e0bff615 	stw	r2,-40(fp)
   19c28:	e0bdb317 	ldw	r2,-2356(fp)
   19c2c:	1004d6fa 	srli	r2,r2,27
   19c30:	e0bff715 	stw	r2,-36(fp)
   19c34:	e13ff617 	ldw	r4,-40(fp)
   19c38:	e1bff717 	ldw	r6,-36(fp)
   19c3c:	2184b03a 	or	r2,r4,r6
   19c40:	1004c03a 	cmpne	r2,r2,zero
   19c44:	10803fcc 	andi	r2,r2,255
   19c48:	10000d26 	beq	r2,zero,19c80 <secp256k1_fe_mul_inner+0x58d0>
   19c4c:	d0a01617 	ldw	r2,-32680(gp)
   19c50:	10c00317 	ldw	r3,12(r2)
   19c54:	008001b4 	movhi	r2,6
   19c58:	10aed504 	addi	r2,r2,-17580
   19c5c:	d8800015 	stw	r2,0(sp)
   19c60:	01c0bf84 	movi	r7,766
   19c64:	018001b4 	movhi	r6,6
   19c68:	31ab2d04 	addi	r6,r6,-21324
   19c6c:	014001b4 	movhi	r5,6
   19c70:	296b3804 	addi	r5,r5,-21280
   19c74:	1809883a 	mov	r4,r3
   19c78:	00452600 	call	45260 <fprintf>
   19c7c:	00450340 	call	45034 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[2] = d;
   19c80:	e0bdd117 	ldw	r2,-2236(fp)
   19c84:	10800204 	addi	r2,r2,8
   19c88:	e0fdb217 	ldw	r3,-2360(fp)
   19c8c:	10c00015 	stw	r3,0(r2)
    VERIFY_BITS(r[2], 27);
   19c90:	e0bdd117 	ldw	r2,-2236(fp)
   19c94:	10800204 	addi	r2,r2,8
   19c98:	10800017 	ldw	r2,0(r2)
   19c9c:	1004d6fa 	srli	r2,r2,27
   19ca0:	1004c03a 	cmpne	r2,r2,zero
   19ca4:	10803fcc 	andi	r2,r2,255
   19ca8:	10000d26 	beq	r2,zero,19ce0 <secp256k1_fe_mul_inner+0x5930>
   19cac:	d0a01617 	ldw	r2,-32680(gp)
   19cb0:	10c00317 	ldw	r3,12(r2)
   19cb4:	008001b4 	movhi	r2,6
   19cb8:	10aeeb04 	addi	r2,r2,-17492
   19cbc:	d8800015 	stw	r2,0(sp)
   19cc0:	01c0c044 	movi	r7,769
   19cc4:	018001b4 	movhi	r6,6
   19cc8:	31ab2d04 	addi	r6,r6,-21324
   19ccc:	014001b4 	movhi	r5,6
   19cd0:	296b3804 	addi	r5,r5,-21280
   19cd4:	1809883a 	mov	r4,r3
   19cd8:	00452600 	call	45260 <fprintf>
   19cdc:	00450340 	call	45034 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 r2 r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
}
   19ce0:	0001883a 	nop
   19ce4:	e6fff804 	addi	sp,fp,-32
   19ce8:	dfc00917 	ldw	ra,36(sp)
   19cec:	df000817 	ldw	fp,32(sp)
   19cf0:	ddc00717 	ldw	r23,28(sp)
   19cf4:	dd800617 	ldw	r22,24(sp)
   19cf8:	dd400517 	ldw	r21,20(sp)
   19cfc:	dd000417 	ldw	r20,16(sp)
   19d00:	dcc00317 	ldw	r19,12(sp)
   19d04:	dc800217 	ldw	r18,8(sp)
   19d08:	dc400117 	ldw	r17,4(sp)
   19d0c:	dc000017 	ldw	r16,0(sp)
   19d10:	dec00a04 	addi	sp,sp,40
   19d14:	f800283a 	ret

00019d18 <secp256k1_fe_sqr_inner>:

SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t *a) {
   19d18:	defe6104 	addi	sp,sp,-1660
   19d1c:	dfc19e15 	stw	ra,1656(sp)
   19d20:	df019d15 	stw	fp,1652(sp)
   19d24:	ddc19c15 	stw	r23,1648(sp)
   19d28:	dd819b15 	stw	r22,1644(sp)
   19d2c:	dd419a15 	stw	r21,1640(sp)
   19d30:	dd019915 	stw	r20,1636(sp)
   19d34:	dcc19815 	stw	r19,1632(sp)
   19d38:	dc819715 	stw	r18,1628(sp)
   19d3c:	dc419615 	stw	r17,1624(sp)
   19d40:	dc019515 	stw	r16,1620(sp)
   19d44:	df019d04 	addi	fp,sp,1652
   19d48:	e13e8615 	stw	r4,-1512(fp)
   19d4c:	e17e8715 	stw	r5,-1508(fp)
    uint64_t c, d;
    uint64_t u0, u1, u2, u3, u4, u5, u6, u7, u8;
    uint32_t t9, t0, t1, t2, t3, t4, t5, t6, t7;
    const uint32_t M = 0x3FFFFFFUL, R0 = 0x3D10UL, R1 = 0x400UL;
   19d50:	00810034 	movhi	r2,1024
   19d54:	10bfffc4 	addi	r2,r2,-1
   19d58:	e0be6415 	stw	r2,-1648(fp)
   19d5c:	008f4404 	movi	r2,15632
   19d60:	e0be6515 	stw	r2,-1644(fp)
   19d64:	00810004 	movi	r2,1024
   19d68:	e0be6615 	stw	r2,-1640(fp)

    VERIFY_BITS(a[0], 30);
   19d6c:	e0be8717 	ldw	r2,-1508(fp)
   19d70:	10800017 	ldw	r2,0(r2)
   19d74:	1004d7ba 	srli	r2,r2,30
   19d78:	1004c03a 	cmpne	r2,r2,zero
   19d7c:	10803fcc 	andi	r2,r2,255
   19d80:	10000d26 	beq	r2,zero,19db8 <secp256k1_fe_sqr_inner+0xa0>
   19d84:	d0a01617 	ldw	r2,-32680(gp)
   19d88:	10c00317 	ldw	r3,12(r2)
   19d8c:	008001b4 	movhi	r2,6
   19d90:	10ab7604 	addi	r2,r2,-21032
   19d94:	d8800015 	stw	r2,0(sp)
   19d98:	01c0c2c4 	movi	r7,779
   19d9c:	018001b4 	movhi	r6,6
   19da0:	31ab2d04 	addi	r6,r6,-21324
   19da4:	014001b4 	movhi	r5,6
   19da8:	296b3804 	addi	r5,r5,-21280
   19dac:	1809883a 	mov	r4,r3
   19db0:	00452600 	call	45260 <fprintf>
   19db4:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[1], 30);
   19db8:	e0be8717 	ldw	r2,-1508(fp)
   19dbc:	10800104 	addi	r2,r2,4
   19dc0:	10800017 	ldw	r2,0(r2)
   19dc4:	1004d7ba 	srli	r2,r2,30
   19dc8:	1004c03a 	cmpne	r2,r2,zero
   19dcc:	10803fcc 	andi	r2,r2,255
   19dd0:	10000d26 	beq	r2,zero,19e08 <secp256k1_fe_sqr_inner+0xf0>
   19dd4:	d0a01617 	ldw	r2,-32680(gp)
   19dd8:	10c00317 	ldw	r3,12(r2)
   19ddc:	008001b4 	movhi	r2,6
   19de0:	10ab8204 	addi	r2,r2,-20984
   19de4:	d8800015 	stw	r2,0(sp)
   19de8:	01c0c304 	movi	r7,780
   19dec:	018001b4 	movhi	r6,6
   19df0:	31ab2d04 	addi	r6,r6,-21324
   19df4:	014001b4 	movhi	r5,6
   19df8:	296b3804 	addi	r5,r5,-21280
   19dfc:	1809883a 	mov	r4,r3
   19e00:	00452600 	call	45260 <fprintf>
   19e04:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[2], 30);
   19e08:	e0be8717 	ldw	r2,-1508(fp)
   19e0c:	10800204 	addi	r2,r2,8
   19e10:	10800017 	ldw	r2,0(r2)
   19e14:	1004d7ba 	srli	r2,r2,30
   19e18:	1004c03a 	cmpne	r2,r2,zero
   19e1c:	10803fcc 	andi	r2,r2,255
   19e20:	10000d26 	beq	r2,zero,19e58 <secp256k1_fe_sqr_inner+0x140>
   19e24:	d0a01617 	ldw	r2,-32680(gp)
   19e28:	10c00317 	ldw	r3,12(r2)
   19e2c:	008001b4 	movhi	r2,6
   19e30:	10ab8e04 	addi	r2,r2,-20936
   19e34:	d8800015 	stw	r2,0(sp)
   19e38:	01c0c344 	movi	r7,781
   19e3c:	018001b4 	movhi	r6,6
   19e40:	31ab2d04 	addi	r6,r6,-21324
   19e44:	014001b4 	movhi	r5,6
   19e48:	296b3804 	addi	r5,r5,-21280
   19e4c:	1809883a 	mov	r4,r3
   19e50:	00452600 	call	45260 <fprintf>
   19e54:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[3], 30);
   19e58:	e0be8717 	ldw	r2,-1508(fp)
   19e5c:	10800304 	addi	r2,r2,12
   19e60:	10800017 	ldw	r2,0(r2)
   19e64:	1004d7ba 	srli	r2,r2,30
   19e68:	1004c03a 	cmpne	r2,r2,zero
   19e6c:	10803fcc 	andi	r2,r2,255
   19e70:	10000d26 	beq	r2,zero,19ea8 <secp256k1_fe_sqr_inner+0x190>
   19e74:	d0a01617 	ldw	r2,-32680(gp)
   19e78:	10c00317 	ldw	r3,12(r2)
   19e7c:	008001b4 	movhi	r2,6
   19e80:	10ab9a04 	addi	r2,r2,-20888
   19e84:	d8800015 	stw	r2,0(sp)
   19e88:	01c0c384 	movi	r7,782
   19e8c:	018001b4 	movhi	r6,6
   19e90:	31ab2d04 	addi	r6,r6,-21324
   19e94:	014001b4 	movhi	r5,6
   19e98:	296b3804 	addi	r5,r5,-21280
   19e9c:	1809883a 	mov	r4,r3
   19ea0:	00452600 	call	45260 <fprintf>
   19ea4:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[4], 30);
   19ea8:	e0be8717 	ldw	r2,-1508(fp)
   19eac:	10800404 	addi	r2,r2,16
   19eb0:	10800017 	ldw	r2,0(r2)
   19eb4:	1004d7ba 	srli	r2,r2,30
   19eb8:	1004c03a 	cmpne	r2,r2,zero
   19ebc:	10803fcc 	andi	r2,r2,255
   19ec0:	10000d26 	beq	r2,zero,19ef8 <secp256k1_fe_sqr_inner+0x1e0>
   19ec4:	d0a01617 	ldw	r2,-32680(gp)
   19ec8:	10c00317 	ldw	r3,12(r2)
   19ecc:	008001b4 	movhi	r2,6
   19ed0:	10aba604 	addi	r2,r2,-20840
   19ed4:	d8800015 	stw	r2,0(sp)
   19ed8:	01c0c3c4 	movi	r7,783
   19edc:	018001b4 	movhi	r6,6
   19ee0:	31ab2d04 	addi	r6,r6,-21324
   19ee4:	014001b4 	movhi	r5,6
   19ee8:	296b3804 	addi	r5,r5,-21280
   19eec:	1809883a 	mov	r4,r3
   19ef0:	00452600 	call	45260 <fprintf>
   19ef4:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[5], 30);
   19ef8:	e0be8717 	ldw	r2,-1508(fp)
   19efc:	10800504 	addi	r2,r2,20
   19f00:	10800017 	ldw	r2,0(r2)
   19f04:	1004d7ba 	srli	r2,r2,30
   19f08:	1004c03a 	cmpne	r2,r2,zero
   19f0c:	10803fcc 	andi	r2,r2,255
   19f10:	10000d26 	beq	r2,zero,19f48 <secp256k1_fe_sqr_inner+0x230>
   19f14:	d0a01617 	ldw	r2,-32680(gp)
   19f18:	10c00317 	ldw	r3,12(r2)
   19f1c:	008001b4 	movhi	r2,6
   19f20:	10abb204 	addi	r2,r2,-20792
   19f24:	d8800015 	stw	r2,0(sp)
   19f28:	01c0c404 	movi	r7,784
   19f2c:	018001b4 	movhi	r6,6
   19f30:	31ab2d04 	addi	r6,r6,-21324
   19f34:	014001b4 	movhi	r5,6
   19f38:	296b3804 	addi	r5,r5,-21280
   19f3c:	1809883a 	mov	r4,r3
   19f40:	00452600 	call	45260 <fprintf>
   19f44:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[6], 30);
   19f48:	e0be8717 	ldw	r2,-1508(fp)
   19f4c:	10800604 	addi	r2,r2,24
   19f50:	10800017 	ldw	r2,0(r2)
   19f54:	1004d7ba 	srli	r2,r2,30
   19f58:	1004c03a 	cmpne	r2,r2,zero
   19f5c:	10803fcc 	andi	r2,r2,255
   19f60:	10000d26 	beq	r2,zero,19f98 <secp256k1_fe_sqr_inner+0x280>
   19f64:	d0a01617 	ldw	r2,-32680(gp)
   19f68:	10c00317 	ldw	r3,12(r2)
   19f6c:	008001b4 	movhi	r2,6
   19f70:	10abbe04 	addi	r2,r2,-20744
   19f74:	d8800015 	stw	r2,0(sp)
   19f78:	01c0c444 	movi	r7,785
   19f7c:	018001b4 	movhi	r6,6
   19f80:	31ab2d04 	addi	r6,r6,-21324
   19f84:	014001b4 	movhi	r5,6
   19f88:	296b3804 	addi	r5,r5,-21280
   19f8c:	1809883a 	mov	r4,r3
   19f90:	00452600 	call	45260 <fprintf>
   19f94:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[7], 30);
   19f98:	e0be8717 	ldw	r2,-1508(fp)
   19f9c:	10800704 	addi	r2,r2,28
   19fa0:	10800017 	ldw	r2,0(r2)
   19fa4:	1004d7ba 	srli	r2,r2,30
   19fa8:	1004c03a 	cmpne	r2,r2,zero
   19fac:	10803fcc 	andi	r2,r2,255
   19fb0:	10000d26 	beq	r2,zero,19fe8 <secp256k1_fe_sqr_inner+0x2d0>
   19fb4:	d0a01617 	ldw	r2,-32680(gp)
   19fb8:	10c00317 	ldw	r3,12(r2)
   19fbc:	008001b4 	movhi	r2,6
   19fc0:	10abca04 	addi	r2,r2,-20696
   19fc4:	d8800015 	stw	r2,0(sp)
   19fc8:	01c0c484 	movi	r7,786
   19fcc:	018001b4 	movhi	r6,6
   19fd0:	31ab2d04 	addi	r6,r6,-21324
   19fd4:	014001b4 	movhi	r5,6
   19fd8:	296b3804 	addi	r5,r5,-21280
   19fdc:	1809883a 	mov	r4,r3
   19fe0:	00452600 	call	45260 <fprintf>
   19fe4:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[8], 30);
   19fe8:	e0be8717 	ldw	r2,-1508(fp)
   19fec:	10800804 	addi	r2,r2,32
   19ff0:	10800017 	ldw	r2,0(r2)
   19ff4:	1004d7ba 	srli	r2,r2,30
   19ff8:	1004c03a 	cmpne	r2,r2,zero
   19ffc:	10803fcc 	andi	r2,r2,255
   1a000:	10000d26 	beq	r2,zero,1a038 <secp256k1_fe_sqr_inner+0x320>
   1a004:	d0a01617 	ldw	r2,-32680(gp)
   1a008:	10c00317 	ldw	r3,12(r2)
   1a00c:	008001b4 	movhi	r2,6
   1a010:	10abd604 	addi	r2,r2,-20648
   1a014:	d8800015 	stw	r2,0(sp)
   1a018:	01c0c4c4 	movi	r7,787
   1a01c:	018001b4 	movhi	r6,6
   1a020:	31ab2d04 	addi	r6,r6,-21324
   1a024:	014001b4 	movhi	r5,6
   1a028:	296b3804 	addi	r5,r5,-21280
   1a02c:	1809883a 	mov	r4,r3
   1a030:	00452600 	call	45260 <fprintf>
   1a034:	00450340 	call	45034 <abort>
    VERIFY_BITS(a[9], 26);
   1a038:	e0be8717 	ldw	r2,-1508(fp)
   1a03c:	10800904 	addi	r2,r2,36
   1a040:	10800017 	ldw	r2,0(r2)
   1a044:	1004d6ba 	srli	r2,r2,26
   1a048:	1004c03a 	cmpne	r2,r2,zero
   1a04c:	10803fcc 	andi	r2,r2,255
   1a050:	10000d26 	beq	r2,zero,1a088 <secp256k1_fe_sqr_inner+0x370>
   1a054:	d0a01617 	ldw	r2,-32680(gp)
   1a058:	10c00317 	ldw	r3,12(r2)
   1a05c:	008001b4 	movhi	r2,6
   1a060:	10abe204 	addi	r2,r2,-20600
   1a064:	d8800015 	stw	r2,0(sp)
   1a068:	01c0c504 	movi	r7,788
   1a06c:	018001b4 	movhi	r6,6
   1a070:	31ab2d04 	addi	r6,r6,-21324
   1a074:	014001b4 	movhi	r5,6
   1a078:	296b3804 	addi	r5,r5,-21280
   1a07c:	1809883a 	mov	r4,r3
   1a080:	00452600 	call	45260 <fprintf>
   1a084:	00450340 	call	45034 <abort>
    /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.
     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)(a[0]*2) * a[9]
   1a088:	e0be8717 	ldw	r2,-1508(fp)
   1a08c:	10800017 	ldw	r2,0(r2)
   1a090:	1085883a 	add	r2,r2,r2
   1a094:	1013883a 	mov	r9,r2
   1a098:	0015883a 	mov	r10,zero
   1a09c:	e0be8717 	ldw	r2,-1508(fp)
   1a0a0:	10800904 	addi	r2,r2,36
   1a0a4:	10800017 	ldw	r2,0(r2)
   1a0a8:	100f883a 	mov	r7,r2
   1a0ac:	0011883a 	mov	r8,zero
   1a0b0:	380d883a 	mov	r6,r7
   1a0b4:	400f883a 	mov	r7,r8
   1a0b8:	4809883a 	mov	r4,r9
   1a0bc:	500b883a 	mov	r5,r10
   1a0c0:	00429400 	call	42940 <__muldi3>
   1a0c4:	1009883a 	mov	r4,r2
   1a0c8:	180b883a 	mov	r5,r3
   1a0cc:	2021883a 	mov	r16,r4
   1a0d0:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[8]
   1a0d4:	e0be8717 	ldw	r2,-1508(fp)
   1a0d8:	10800104 	addi	r2,r2,4
   1a0dc:	10800017 	ldw	r2,0(r2)
   1a0e0:	1085883a 	add	r2,r2,r2
   1a0e4:	e0be8815 	stw	r2,-1504(fp)
   1a0e8:	e03e8915 	stw	zero,-1500(fp)
   1a0ec:	e0be8717 	ldw	r2,-1508(fp)
   1a0f0:	10800804 	addi	r2,r2,32
   1a0f4:	10800017 	ldw	r2,0(r2)
   1a0f8:	1025883a 	mov	r18,r2
   1a0fc:	0027883a 	mov	r19,zero
   1a100:	900d883a 	mov	r6,r18
   1a104:	980f883a 	mov	r7,r19
   1a108:	e13e8817 	ldw	r4,-1504(fp)
   1a10c:	e17e8917 	ldw	r5,-1500(fp)
   1a110:	00429400 	call	42940 <__muldi3>
   1a114:	100f883a 	mov	r7,r2
   1a118:	1811883a 	mov	r8,r3
   1a11c:	380b883a 	mov	r5,r7
   1a120:	400d883a 	mov	r6,r8
   1a124:	8145883a 	add	r2,r16,r5
   1a128:	1409803a 	cmpltu	r4,r2,r16
   1a12c:	8987883a 	add	r3,r17,r6
   1a130:	20c9883a 	add	r4,r4,r3
   1a134:	2007883a 	mov	r3,r4
   1a138:	1025883a 	mov	r18,r2
   1a13c:	1827883a 	mov	r19,r3
       + (uint64_t)(a[2]*2) * a[7]
       + (uint64_t)(a[3]*2) * a[6]
   1a140:	e0be8717 	ldw	r2,-1508(fp)
   1a144:	10800304 	addi	r2,r2,12
   1a148:	10800017 	ldw	r2,0(r2)
   1a14c:	1085883a 	add	r2,r2,r2
   1a150:	e0be8a15 	stw	r2,-1496(fp)
   1a154:	e03e8b15 	stw	zero,-1492(fp)
   1a158:	e0be8717 	ldw	r2,-1508(fp)
   1a15c:	10800604 	addi	r2,r2,24
   1a160:	10800017 	ldw	r2,0(r2)
   1a164:	e0be8c15 	stw	r2,-1488(fp)
   1a168:	e03e8d15 	stw	zero,-1484(fp)
   1a16c:	e1be8c17 	ldw	r6,-1488(fp)
   1a170:	e1fe8d17 	ldw	r7,-1484(fp)
   1a174:	e13e8a17 	ldw	r4,-1496(fp)
   1a178:	e17e8b17 	ldw	r5,-1492(fp)
   1a17c:	00429400 	call	42940 <__muldi3>
   1a180:	1009883a 	mov	r4,r2
   1a184:	180b883a 	mov	r5,r3
   1a188:	2021883a 	mov	r16,r4
   1a18c:	2823883a 	mov	r17,r5
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)(a[0]*2) * a[9]
       + (uint64_t)(a[1]*2) * a[8]
       + (uint64_t)(a[2]*2) * a[7]
   1a190:	e0be8717 	ldw	r2,-1508(fp)
   1a194:	10800204 	addi	r2,r2,8
   1a198:	10800017 	ldw	r2,0(r2)
   1a19c:	1085883a 	add	r2,r2,r2
   1a1a0:	e0be8e15 	stw	r2,-1480(fp)
   1a1a4:	e03e8f15 	stw	zero,-1476(fp)
   1a1a8:	e0be8717 	ldw	r2,-1508(fp)
   1a1ac:	10800704 	addi	r2,r2,28
   1a1b0:	10800017 	ldw	r2,0(r2)
   1a1b4:	e0be9015 	stw	r2,-1472(fp)
   1a1b8:	e03e9115 	stw	zero,-1468(fp)
   1a1bc:	e1be9017 	ldw	r6,-1472(fp)
   1a1c0:	e1fe9117 	ldw	r7,-1468(fp)
   1a1c4:	e13e8e17 	ldw	r4,-1480(fp)
   1a1c8:	e17e8f17 	ldw	r5,-1476(fp)
   1a1cc:	00429400 	call	42940 <__muldi3>
   1a1d0:	100f883a 	mov	r7,r2
   1a1d4:	1811883a 	mov	r8,r3
   1a1d8:	380b883a 	mov	r5,r7
   1a1dc:	400d883a 	mov	r6,r8
       + (uint64_t)(a[3]*2) * a[6]
   1a1e0:	8145883a 	add	r2,r16,r5
   1a1e4:	1409803a 	cmpltu	r4,r2,r16
   1a1e8:	8987883a 	add	r3,r17,r6
   1a1ec:	20c9883a 	add	r4,r4,r3
   1a1f0:	2007883a 	mov	r3,r4
   1a1f4:	100b883a 	mov	r5,r2
   1a1f8:	180d883a 	mov	r6,r3
   1a1fc:	9145883a 	add	r2,r18,r5
   1a200:	1489803a 	cmpltu	r4,r2,r18
   1a204:	9987883a 	add	r3,r19,r6
   1a208:	20c9883a 	add	r4,r4,r3
   1a20c:	2007883a 	mov	r3,r4
   1a210:	1021883a 	mov	r16,r2
   1a214:	1823883a 	mov	r17,r3
       + (uint64_t)(a[4]*2) * a[5];
   1a218:	e0be8717 	ldw	r2,-1508(fp)
   1a21c:	10800404 	addi	r2,r2,16
   1a220:	10800017 	ldw	r2,0(r2)
   1a224:	1085883a 	add	r2,r2,r2
   1a228:	e0be9215 	stw	r2,-1464(fp)
   1a22c:	e03e9315 	stw	zero,-1460(fp)
   1a230:	e0be8717 	ldw	r2,-1508(fp)
   1a234:	10800504 	addi	r2,r2,20
   1a238:	10800017 	ldw	r2,0(r2)
   1a23c:	e0be9415 	stw	r2,-1456(fp)
   1a240:	e03e9515 	stw	zero,-1452(fp)
   1a244:	e1be9417 	ldw	r6,-1456(fp)
   1a248:	e1fe9517 	ldw	r7,-1452(fp)
   1a24c:	e13e9217 	ldw	r4,-1464(fp)
   1a250:	e17e9317 	ldw	r5,-1460(fp)
   1a254:	00429400 	call	42940 <__muldi3>
   1a258:	100f883a 	mov	r7,r2
   1a25c:	1811883a 	mov	r8,r3
   1a260:	380b883a 	mov	r5,r7
   1a264:	400d883a 	mov	r6,r8
    /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.
     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)(a[0]*2) * a[9]
   1a268:	8145883a 	add	r2,r16,r5
   1a26c:	1409803a 	cmpltu	r4,r2,r16
   1a270:	8987883a 	add	r3,r17,r6
   1a274:	20c9883a 	add	r4,r4,r3
   1a278:	2007883a 	mov	r3,r4
   1a27c:	e0be6715 	stw	r2,-1636(fp)
   1a280:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[2]*2) * a[7]
       + (uint64_t)(a[3]*2) * a[6]
       + (uint64_t)(a[4]*2) * a[5];
    /* VERIFY_BITS(d, 64); */
    /* [d 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */
    t9 = d & M; d >>= 26;
   1a284:	e0fe6717 	ldw	r3,-1636(fp)
   1a288:	e0be6417 	ldw	r2,-1648(fp)
   1a28c:	1884703a 	and	r2,r3,r2
   1a290:	e0be6915 	stw	r2,-1628(fp)
   1a294:	e0be6817 	ldw	r2,-1632(fp)
   1a298:	100691ba 	slli	r3,r2,6
   1a29c:	e0be6717 	ldw	r2,-1636(fp)
   1a2a0:	1004d6ba 	srli	r2,r2,26
   1a2a4:	10c4b03a 	or	r2,r2,r3
   1a2a8:	e0be6715 	stw	r2,-1636(fp)
   1a2ac:	e0be6817 	ldw	r2,-1632(fp)
   1a2b0:	1004d6ba 	srli	r2,r2,26
   1a2b4:	e0be6815 	stw	r2,-1632(fp)
    VERIFY_BITS(t9, 26);
   1a2b8:	e0be6917 	ldw	r2,-1628(fp)
   1a2bc:	1004d6ba 	srli	r2,r2,26
   1a2c0:	1004c03a 	cmpne	r2,r2,zero
   1a2c4:	10803fcc 	andi	r2,r2,255
   1a2c8:	10000d26 	beq	r2,zero,1a300 <secp256k1_fe_sqr_inner+0x5e8>
   1a2cc:	d0a01617 	ldw	r2,-32680(gp)
   1a2d0:	10c00317 	ldw	r3,12(r2)
   1a2d4:	008001b4 	movhi	r2,6
   1a2d8:	10ac6604 	addi	r2,r2,-20072
   1a2dc:	d8800015 	stw	r2,0(sp)
   1a2e0:	01c0c8c4 	movi	r7,803
   1a2e4:	018001b4 	movhi	r6,6
   1a2e8:	31ab2d04 	addi	r6,r6,-21324
   1a2ec:	014001b4 	movhi	r5,6
   1a2f0:	296b3804 	addi	r5,r5,-21280
   1a2f4:	1809883a 	mov	r4,r3
   1a2f8:	00452600 	call	45260 <fprintf>
   1a2fc:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 38);
   1a300:	e0be6817 	ldw	r2,-1632(fp)
   1a304:	1028d1ba 	srli	r20,r2,6
   1a308:	002b883a 	mov	r21,zero
   1a30c:	a544b03a 	or	r2,r20,r21
   1a310:	1004c03a 	cmpne	r2,r2,zero
   1a314:	10803fcc 	andi	r2,r2,255
   1a318:	10000d26 	beq	r2,zero,1a350 <secp256k1_fe_sqr_inner+0x638>
   1a31c:	d0a01617 	ldw	r2,-32680(gp)
   1a320:	10c00317 	ldw	r3,12(r2)
   1a324:	008001b4 	movhi	r2,6
   1a328:	10ac7104 	addi	r2,r2,-20028
   1a32c:	d8800015 	stw	r2,0(sp)
   1a330:	01c0c904 	movi	r7,804
   1a334:	018001b4 	movhi	r6,6
   1a338:	31ab2d04 	addi	r6,r6,-21324
   1a33c:	014001b4 	movhi	r5,6
   1a340:	296b3804 	addi	r5,r5,-21280
   1a344:	1809883a 	mov	r4,r3
   1a348:	00452600 	call	45260 <fprintf>
   1a34c:	00450340 	call	45034 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */

    c  = (uint64_t)a[0] * a[0];
   1a350:	e0be8717 	ldw	r2,-1508(fp)
   1a354:	10800017 	ldw	r2,0(r2)
   1a358:	e0be9615 	stw	r2,-1448(fp)
   1a35c:	e03e9715 	stw	zero,-1444(fp)
   1a360:	e0be8717 	ldw	r2,-1508(fp)
   1a364:	10800017 	ldw	r2,0(r2)
   1a368:	e0be9815 	stw	r2,-1440(fp)
   1a36c:	e03e9915 	stw	zero,-1436(fp)
   1a370:	e1be9817 	ldw	r6,-1440(fp)
   1a374:	e1fe9917 	ldw	r7,-1436(fp)
   1a378:	e13e9617 	ldw	r4,-1448(fp)
   1a37c:	e17e9717 	ldw	r5,-1444(fp)
   1a380:	00429400 	call	42940 <__muldi3>
   1a384:	1009883a 	mov	r4,r2
   1a388:	180b883a 	mov	r5,r3
   1a38c:	e13e6a15 	stw	r4,-1624(fp)
   1a390:	e17e6b15 	stw	r5,-1620(fp)
    VERIFY_BITS(c, 60);
   1a394:	e0be6b17 	ldw	r2,-1620(fp)
   1a398:	1004d73a 	srli	r2,r2,28
   1a39c:	e0be9a15 	stw	r2,-1432(fp)
   1a3a0:	e03e9b15 	stw	zero,-1428(fp)
   1a3a4:	e0fe9a17 	ldw	r3,-1432(fp)
   1a3a8:	e13e9b17 	ldw	r4,-1428(fp)
   1a3ac:	1904b03a 	or	r2,r3,r4
   1a3b0:	1004c03a 	cmpne	r2,r2,zero
   1a3b4:	10803fcc 	andi	r2,r2,255
   1a3b8:	10000d26 	beq	r2,zero,1a3f0 <secp256k1_fe_sqr_inner+0x6d8>
   1a3bc:	d0a01617 	ldw	r2,-32680(gp)
   1a3c0:	10c00317 	ldw	r3,12(r2)
   1a3c4:	008001b4 	movhi	r2,6
   1a3c8:	10ac7c04 	addi	r2,r2,-19984
   1a3cc:	d8800015 	stw	r2,0(sp)
   1a3d0:	01c0ca04 	movi	r7,808
   1a3d4:	018001b4 	movhi	r6,6
   1a3d8:	31ab2d04 	addi	r6,r6,-21324
   1a3dc:	014001b4 	movhi	r5,6
   1a3e0:	296b3804 	addi	r5,r5,-21280
   1a3e4:	1809883a 	mov	r4,r3
   1a3e8:	00452600 	call	45260 <fprintf>
   1a3ec:	00450340 	call	45034 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)(a[1]*2) * a[9]
   1a3f0:	e0be8717 	ldw	r2,-1508(fp)
   1a3f4:	10800104 	addi	r2,r2,4
   1a3f8:	10800017 	ldw	r2,0(r2)
   1a3fc:	1085883a 	add	r2,r2,r2
   1a400:	e0be9c15 	stw	r2,-1424(fp)
   1a404:	e03e9d15 	stw	zero,-1420(fp)
   1a408:	e0be8717 	ldw	r2,-1508(fp)
   1a40c:	10800904 	addi	r2,r2,36
   1a410:	10800017 	ldw	r2,0(r2)
   1a414:	e0be9e15 	stw	r2,-1416(fp)
   1a418:	e03e9f15 	stw	zero,-1412(fp)
   1a41c:	e1be9e17 	ldw	r6,-1416(fp)
   1a420:	e1fe9f17 	ldw	r7,-1412(fp)
   1a424:	e13e9c17 	ldw	r4,-1424(fp)
   1a428:	e17e9d17 	ldw	r5,-1420(fp)
   1a42c:	00429400 	call	42940 <__muldi3>
   1a430:	1009883a 	mov	r4,r2
   1a434:	180b883a 	mov	r5,r3
   1a438:	2021883a 	mov	r16,r4
   1a43c:	2823883a 	mov	r17,r5
       + (uint64_t)(a[2]*2) * a[8]
   1a440:	e0be8717 	ldw	r2,-1508(fp)
   1a444:	10800204 	addi	r2,r2,8
   1a448:	10800017 	ldw	r2,0(r2)
   1a44c:	1085883a 	add	r2,r2,r2
   1a450:	e0bea015 	stw	r2,-1408(fp)
   1a454:	e03ea115 	stw	zero,-1404(fp)
   1a458:	e0be8717 	ldw	r2,-1508(fp)
   1a45c:	10800804 	addi	r2,r2,32
   1a460:	10800017 	ldw	r2,0(r2)
   1a464:	e0bea215 	stw	r2,-1400(fp)
   1a468:	e03ea315 	stw	zero,-1396(fp)
   1a46c:	e1bea217 	ldw	r6,-1400(fp)
   1a470:	e1fea317 	ldw	r7,-1396(fp)
   1a474:	e13ea017 	ldw	r4,-1408(fp)
   1a478:	e17ea117 	ldw	r5,-1404(fp)
   1a47c:	00429400 	call	42940 <__muldi3>
   1a480:	100f883a 	mov	r7,r2
   1a484:	1811883a 	mov	r8,r3
   1a488:	380b883a 	mov	r5,r7
   1a48c:	400d883a 	mov	r6,r8
   1a490:	8145883a 	add	r2,r16,r5
   1a494:	1409803a 	cmpltu	r4,r2,r16
   1a498:	8987883a 	add	r3,r17,r6
   1a49c:	20c9883a 	add	r4,r4,r3
   1a4a0:	2007883a 	mov	r3,r4
   1a4a4:	1025883a 	mov	r18,r2
   1a4a8:	1827883a 	mov	r19,r3
       + (uint64_t)(a[3]*2) * a[7]
       + (uint64_t)(a[4]*2) * a[6]
   1a4ac:	e0be8717 	ldw	r2,-1508(fp)
   1a4b0:	10800404 	addi	r2,r2,16
   1a4b4:	10800017 	ldw	r2,0(r2)
   1a4b8:	1085883a 	add	r2,r2,r2
   1a4bc:	e0bea415 	stw	r2,-1392(fp)
   1a4c0:	e03ea515 	stw	zero,-1388(fp)
   1a4c4:	e0be8717 	ldw	r2,-1508(fp)
   1a4c8:	10800604 	addi	r2,r2,24
   1a4cc:	10800017 	ldw	r2,0(r2)
   1a4d0:	e0bea615 	stw	r2,-1384(fp)
   1a4d4:	e03ea715 	stw	zero,-1380(fp)
   1a4d8:	e1bea617 	ldw	r6,-1384(fp)
   1a4dc:	e1fea717 	ldw	r7,-1380(fp)
   1a4e0:	e13ea417 	ldw	r4,-1392(fp)
   1a4e4:	e17ea517 	ldw	r5,-1388(fp)
   1a4e8:	00429400 	call	42940 <__muldi3>
   1a4ec:	1009883a 	mov	r4,r2
   1a4f0:	180b883a 	mov	r5,r3
   1a4f4:	2021883a 	mov	r16,r4
   1a4f8:	2823883a 	mov	r17,r5
    c  = (uint64_t)a[0] * a[0];
    VERIFY_BITS(c, 60);
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)(a[1]*2) * a[9]
       + (uint64_t)(a[2]*2) * a[8]
       + (uint64_t)(a[3]*2) * a[7]
   1a4fc:	e0be8717 	ldw	r2,-1508(fp)
   1a500:	10800304 	addi	r2,r2,12
   1a504:	10800017 	ldw	r2,0(r2)
   1a508:	1085883a 	add	r2,r2,r2
   1a50c:	e0bea815 	stw	r2,-1376(fp)
   1a510:	e03ea915 	stw	zero,-1372(fp)
   1a514:	e0be8717 	ldw	r2,-1508(fp)
   1a518:	10800704 	addi	r2,r2,28
   1a51c:	10800017 	ldw	r2,0(r2)
   1a520:	e0beaa15 	stw	r2,-1368(fp)
   1a524:	e03eab15 	stw	zero,-1364(fp)
   1a528:	e1beaa17 	ldw	r6,-1368(fp)
   1a52c:	e1feab17 	ldw	r7,-1364(fp)
   1a530:	e13ea817 	ldw	r4,-1376(fp)
   1a534:	e17ea917 	ldw	r5,-1372(fp)
   1a538:	00429400 	call	42940 <__muldi3>
   1a53c:	100f883a 	mov	r7,r2
   1a540:	1811883a 	mov	r8,r3
   1a544:	380b883a 	mov	r5,r7
   1a548:	400d883a 	mov	r6,r8
       + (uint64_t)(a[4]*2) * a[6]
   1a54c:	8145883a 	add	r2,r16,r5
   1a550:	1409803a 	cmpltu	r4,r2,r16
   1a554:	8987883a 	add	r3,r17,r6
   1a558:	20c9883a 	add	r4,r4,r3
   1a55c:	2007883a 	mov	r3,r4
   1a560:	100b883a 	mov	r5,r2
   1a564:	180d883a 	mov	r6,r3
   1a568:	9145883a 	add	r2,r18,r5
   1a56c:	1489803a 	cmpltu	r4,r2,r18
   1a570:	9987883a 	add	r3,r19,r6
   1a574:	20c9883a 	add	r4,r4,r3
   1a578:	2007883a 	mov	r3,r4
   1a57c:	1021883a 	mov	r16,r2
   1a580:	1823883a 	mov	r17,r3
       + (uint64_t)a[5] * a[5];
   1a584:	e0be8717 	ldw	r2,-1508(fp)
   1a588:	10800504 	addi	r2,r2,20
   1a58c:	10800017 	ldw	r2,0(r2)
   1a590:	e0beac15 	stw	r2,-1360(fp)
   1a594:	e03ead15 	stw	zero,-1356(fp)
   1a598:	e0be8717 	ldw	r2,-1508(fp)
   1a59c:	10800504 	addi	r2,r2,20
   1a5a0:	10800017 	ldw	r2,0(r2)
   1a5a4:	e0beae15 	stw	r2,-1352(fp)
   1a5a8:	e03eaf15 	stw	zero,-1348(fp)
   1a5ac:	e1beae17 	ldw	r6,-1352(fp)
   1a5b0:	e1feaf17 	ldw	r7,-1348(fp)
   1a5b4:	e13eac17 	ldw	r4,-1360(fp)
   1a5b8:	e17ead17 	ldw	r5,-1356(fp)
   1a5bc:	00429400 	call	42940 <__muldi3>
   1a5c0:	100f883a 	mov	r7,r2
   1a5c4:	1811883a 	mov	r8,r3
   1a5c8:	380b883a 	mov	r5,r7
   1a5cc:	400d883a 	mov	r6,r8
   1a5d0:	8145883a 	add	r2,r16,r5
   1a5d4:	1409803a 	cmpltu	r4,r2,r16
   1a5d8:	8987883a 	add	r3,r17,r6
   1a5dc:	20c9883a 	add	r4,r4,r3
   1a5e0:	2007883a 	mov	r3,r4
   1a5e4:	100f883a 	mov	r7,r2
   1a5e8:	1811883a 	mov	r8,r3
    /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */

    c  = (uint64_t)a[0] * a[0];
    VERIFY_BITS(c, 60);
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)(a[1]*2) * a[9]
   1a5ec:	e13e6717 	ldw	r4,-1636(fp)
   1a5f0:	e17e6817 	ldw	r5,-1632(fp)
   1a5f4:	21c5883a 	add	r2,r4,r7
   1a5f8:	110d803a 	cmpltu	r6,r2,r4
   1a5fc:	2a07883a 	add	r3,r5,r8
   1a600:	30c9883a 	add	r4,r6,r3
   1a604:	2007883a 	mov	r3,r4
   1a608:	e0be6715 	stw	r2,-1636(fp)
   1a60c:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[2]*2) * a[8]
       + (uint64_t)(a[3]*2) * a[7]
       + (uint64_t)(a[4]*2) * a[6]
       + (uint64_t)a[5] * a[5];
    VERIFY_BITS(d, 63);
   1a610:	e0be6717 	ldw	r2,-1636(fp)
   1a614:	e0fe6817 	ldw	r3,-1632(fp)
   1a618:	1804d7fa 	srli	r2,r3,31
   1a61c:	10803fcc 	andi	r2,r2,255
   1a620:	10000d26 	beq	r2,zero,1a658 <secp256k1_fe_sqr_inner+0x940>
   1a624:	d0a01617 	ldw	r2,-32680(gp)
   1a628:	10c00317 	ldw	r3,12(r2)
   1a62c:	008001b4 	movhi	r2,6
   1a630:	10ac8704 	addi	r2,r2,-19940
   1a634:	d8800015 	stw	r2,0(sp)
   1a638:	01c0cbc4 	movi	r7,815
   1a63c:	018001b4 	movhi	r6,6
   1a640:	31ab2d04 	addi	r6,r6,-21324
   1a644:	014001b4 	movhi	r5,6
   1a648:	296b3804 	addi	r5,r5,-21280
   1a64c:	1809883a 	mov	r4,r3
   1a650:	00452600 	call	45260 <fprintf>
   1a654:	00450340 	call	45034 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    u0 = d & M; d >>= 26; c += u0 * R0;
   1a658:	e0be6417 	ldw	r2,-1648(fp)
   1a65c:	e0beb015 	stw	r2,-1344(fp)
   1a660:	e03eb115 	stw	zero,-1340(fp)
   1a664:	e0be6717 	ldw	r2,-1636(fp)
   1a668:	e1beb017 	ldw	r6,-1344(fp)
   1a66c:	1184703a 	and	r2,r2,r6
   1a670:	e0be6c15 	stw	r2,-1616(fp)
   1a674:	e0be6817 	ldw	r2,-1632(fp)
   1a678:	e1feb117 	ldw	r7,-1340(fp)
   1a67c:	11c4703a 	and	r2,r2,r7
   1a680:	e0be6d15 	stw	r2,-1612(fp)
   1a684:	e0be6817 	ldw	r2,-1632(fp)
   1a688:	100691ba 	slli	r3,r2,6
   1a68c:	e0be6717 	ldw	r2,-1636(fp)
   1a690:	1004d6ba 	srli	r2,r2,26
   1a694:	10c4b03a 	or	r2,r2,r3
   1a698:	e0be6715 	stw	r2,-1636(fp)
   1a69c:	e0be6817 	ldw	r2,-1632(fp)
   1a6a0:	1004d6ba 	srli	r2,r2,26
   1a6a4:	e0be6815 	stw	r2,-1632(fp)
   1a6a8:	e0be6517 	ldw	r2,-1644(fp)
   1a6ac:	e0beb215 	stw	r2,-1336(fp)
   1a6b0:	e03eb315 	stw	zero,-1332(fp)
   1a6b4:	e1be6c17 	ldw	r6,-1616(fp)
   1a6b8:	e1fe6d17 	ldw	r7,-1612(fp)
   1a6bc:	e13eb217 	ldw	r4,-1336(fp)
   1a6c0:	e17eb317 	ldw	r5,-1332(fp)
   1a6c4:	00429400 	call	42940 <__muldi3>
   1a6c8:	1009883a 	mov	r4,r2
   1a6cc:	180b883a 	mov	r5,r3
   1a6d0:	200f883a 	mov	r7,r4
   1a6d4:	2811883a 	mov	r8,r5
   1a6d8:	e13e6a17 	ldw	r4,-1624(fp)
   1a6dc:	e17e6b17 	ldw	r5,-1620(fp)
   1a6e0:	21c5883a 	add	r2,r4,r7
   1a6e4:	110d803a 	cmpltu	r6,r2,r4
   1a6e8:	2a07883a 	add	r3,r5,r8
   1a6ec:	30c9883a 	add	r4,r6,r3
   1a6f0:	2007883a 	mov	r3,r4
   1a6f4:	e0be6a15 	stw	r2,-1624(fp)
   1a6f8:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u0, 26);
   1a6fc:	e0be6d17 	ldw	r2,-1612(fp)
   1a700:	100691ba 	slli	r3,r2,6
   1a704:	e0be6c17 	ldw	r2,-1616(fp)
   1a708:	102cd6ba 	srli	r22,r2,26
   1a70c:	1dacb03a 	or	r22,r3,r22
   1a710:	e0be6d17 	ldw	r2,-1612(fp)
   1a714:	102ed6ba 	srli	r23,r2,26
   1a718:	b5c4b03a 	or	r2,r22,r23
   1a71c:	1004c03a 	cmpne	r2,r2,zero
   1a720:	10803fcc 	andi	r2,r2,255
   1a724:	10000d26 	beq	r2,zero,1a75c <secp256k1_fe_sqr_inner+0xa44>
   1a728:	d0a01617 	ldw	r2,-32680(gp)
   1a72c:	10c00317 	ldw	r3,12(r2)
   1a730:	008001b4 	movhi	r2,6
   1a734:	10ac9204 	addi	r2,r2,-19896
   1a738:	d8800015 	stw	r2,0(sp)
   1a73c:	01c0cc84 	movi	r7,818
   1a740:	018001b4 	movhi	r6,6
   1a744:	31ab2d04 	addi	r6,r6,-21324
   1a748:	014001b4 	movhi	r5,6
   1a74c:	296b3804 	addi	r5,r5,-21280
   1a750:	1809883a 	mov	r4,r3
   1a754:	00452600 	call	45260 <fprintf>
   1a758:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 37);
   1a75c:	e0be6817 	ldw	r2,-1632(fp)
   1a760:	1004d17a 	srli	r2,r2,5
   1a764:	e0beb415 	stw	r2,-1328(fp)
   1a768:	e03eb515 	stw	zero,-1324(fp)
   1a76c:	e0feb417 	ldw	r3,-1328(fp)
   1a770:	e13eb517 	ldw	r4,-1324(fp)
   1a774:	1904b03a 	or	r2,r3,r4
   1a778:	1004c03a 	cmpne	r2,r2,zero
   1a77c:	10803fcc 	andi	r2,r2,255
   1a780:	10000d26 	beq	r2,zero,1a7b8 <secp256k1_fe_sqr_inner+0xaa0>
   1a784:	d0a01617 	ldw	r2,-32680(gp)
   1a788:	10c00317 	ldw	r3,12(r2)
   1a78c:	008001b4 	movhi	r2,6
   1a790:	10ac9d04 	addi	r2,r2,-19852
   1a794:	d8800015 	stw	r2,0(sp)
   1a798:	01c0ccc4 	movi	r7,819
   1a79c:	018001b4 	movhi	r6,6
   1a7a0:	31ab2d04 	addi	r6,r6,-21324
   1a7a4:	014001b4 	movhi	r5,6
   1a7a8:	296b3804 	addi	r5,r5,-21280
   1a7ac:	1809883a 	mov	r4,r3
   1a7b0:	00452600 	call	45260 <fprintf>
   1a7b4:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 61);
   1a7b8:	e0be6b17 	ldw	r2,-1620(fp)
   1a7bc:	1004d77a 	srli	r2,r2,29
   1a7c0:	e0beb615 	stw	r2,-1320(fp)
   1a7c4:	e03eb715 	stw	zero,-1316(fp)
   1a7c8:	e1beb617 	ldw	r6,-1320(fp)
   1a7cc:	e1feb717 	ldw	r7,-1316(fp)
   1a7d0:	31c4b03a 	or	r2,r6,r7
   1a7d4:	1004c03a 	cmpne	r2,r2,zero
   1a7d8:	10803fcc 	andi	r2,r2,255
   1a7dc:	10000d26 	beq	r2,zero,1a814 <secp256k1_fe_sqr_inner+0xafc>
   1a7e0:	d0a01617 	ldw	r2,-32680(gp)
   1a7e4:	10c00317 	ldw	r3,12(r2)
   1a7e8:	008001b4 	movhi	r2,6
   1a7ec:	10aca804 	addi	r2,r2,-19808
   1a7f0:	d8800015 	stw	r2,0(sp)
   1a7f4:	01c0cd04 	movi	r7,820
   1a7f8:	018001b4 	movhi	r6,6
   1a7fc:	31ab2d04 	addi	r6,r6,-21324
   1a800:	014001b4 	movhi	r5,6
   1a804:	296b3804 	addi	r5,r5,-21280
   1a808:	1809883a 	mov	r4,r3
   1a80c:	00452600 	call	45260 <fprintf>
   1a810:	00450340 	call	45034 <abort>
    /* [d u0 t9 0 0 0 0 0 0 0 0 c-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    t0 = c & M; c >>= 26; c += u0 * R1;
   1a814:	e0fe6a17 	ldw	r3,-1624(fp)
   1a818:	e0be6417 	ldw	r2,-1648(fp)
   1a81c:	1884703a 	and	r2,r3,r2
   1a820:	e0be6e15 	stw	r2,-1608(fp)
   1a824:	e0be6b17 	ldw	r2,-1620(fp)
   1a828:	100691ba 	slli	r3,r2,6
   1a82c:	e0be6a17 	ldw	r2,-1624(fp)
   1a830:	1004d6ba 	srli	r2,r2,26
   1a834:	10c4b03a 	or	r2,r2,r3
   1a838:	e0be6a15 	stw	r2,-1624(fp)
   1a83c:	e0be6b17 	ldw	r2,-1620(fp)
   1a840:	1004d6ba 	srli	r2,r2,26
   1a844:	e0be6b15 	stw	r2,-1620(fp)
   1a848:	e0be6617 	ldw	r2,-1640(fp)
   1a84c:	e0beb815 	stw	r2,-1312(fp)
   1a850:	e03eb915 	stw	zero,-1308(fp)
   1a854:	e1be6c17 	ldw	r6,-1616(fp)
   1a858:	e1fe6d17 	ldw	r7,-1612(fp)
   1a85c:	e13eb817 	ldw	r4,-1312(fp)
   1a860:	e17eb917 	ldw	r5,-1308(fp)
   1a864:	00429400 	call	42940 <__muldi3>
   1a868:	1009883a 	mov	r4,r2
   1a86c:	180b883a 	mov	r5,r3
   1a870:	200f883a 	mov	r7,r4
   1a874:	2811883a 	mov	r8,r5
   1a878:	e13e6a17 	ldw	r4,-1624(fp)
   1a87c:	e17e6b17 	ldw	r5,-1620(fp)
   1a880:	21c5883a 	add	r2,r4,r7
   1a884:	110d803a 	cmpltu	r6,r2,r4
   1a888:	2a07883a 	add	r3,r5,r8
   1a88c:	30c9883a 	add	r4,r6,r3
   1a890:	2007883a 	mov	r3,r4
   1a894:	e0be6a15 	stw	r2,-1624(fp)
   1a898:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t0, 26);
   1a89c:	e0be6e17 	ldw	r2,-1608(fp)
   1a8a0:	1004d6ba 	srli	r2,r2,26
   1a8a4:	1004c03a 	cmpne	r2,r2,zero
   1a8a8:	10803fcc 	andi	r2,r2,255
   1a8ac:	10000d26 	beq	r2,zero,1a8e4 <secp256k1_fe_sqr_inner+0xbcc>
   1a8b0:	d0a01617 	ldw	r2,-32680(gp)
   1a8b4:	10c00317 	ldw	r3,12(r2)
   1a8b8:	008001b4 	movhi	r2,6
   1a8bc:	10acb304 	addi	r2,r2,-19764
   1a8c0:	d8800015 	stw	r2,0(sp)
   1a8c4:	01c0cdc4 	movi	r7,823
   1a8c8:	018001b4 	movhi	r6,6
   1a8cc:	31ab2d04 	addi	r6,r6,-21324
   1a8d0:	014001b4 	movhi	r5,6
   1a8d4:	296b3804 	addi	r5,r5,-21280
   1a8d8:	1809883a 	mov	r4,r3
   1a8dc:	00452600 	call	45260 <fprintf>
   1a8e0:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 37);
   1a8e4:	e0be6b17 	ldw	r2,-1620(fp)
   1a8e8:	1004d17a 	srli	r2,r2,5
   1a8ec:	e0beba15 	stw	r2,-1304(fp)
   1a8f0:	e03ebb15 	stw	zero,-1300(fp)
   1a8f4:	e0feba17 	ldw	r3,-1304(fp)
   1a8f8:	e13ebb17 	ldw	r4,-1300(fp)
   1a8fc:	1904b03a 	or	r2,r3,r4
   1a900:	1004c03a 	cmpne	r2,r2,zero
   1a904:	10803fcc 	andi	r2,r2,255
   1a908:	10000d26 	beq	r2,zero,1a940 <secp256k1_fe_sqr_inner+0xc28>
   1a90c:	d0a01617 	ldw	r2,-32680(gp)
   1a910:	10c00317 	ldw	r3,12(r2)
   1a914:	008001b4 	movhi	r2,6
   1a918:	10acbe04 	addi	r2,r2,-19720
   1a91c:	d8800015 	stw	r2,0(sp)
   1a920:	01c0ce04 	movi	r7,824
   1a924:	018001b4 	movhi	r6,6
   1a928:	31ab2d04 	addi	r6,r6,-21324
   1a92c:	014001b4 	movhi	r5,6
   1a930:	296b3804 	addi	r5,r5,-21280
   1a934:	1809883a 	mov	r4,r3
   1a938:	00452600 	call	45260 <fprintf>
   1a93c:	00450340 	call	45034 <abort>
    /* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */

    c += (uint64_t)(a[0]*2) * a[1];
   1a940:	e0be8717 	ldw	r2,-1508(fp)
   1a944:	10800017 	ldw	r2,0(r2)
   1a948:	1085883a 	add	r2,r2,r2
   1a94c:	e0bebc15 	stw	r2,-1296(fp)
   1a950:	e03ebd15 	stw	zero,-1292(fp)
   1a954:	e0be8717 	ldw	r2,-1508(fp)
   1a958:	10800104 	addi	r2,r2,4
   1a95c:	10800017 	ldw	r2,0(r2)
   1a960:	e0bebe15 	stw	r2,-1288(fp)
   1a964:	e03ebf15 	stw	zero,-1284(fp)
   1a968:	e1bebe17 	ldw	r6,-1288(fp)
   1a96c:	e1febf17 	ldw	r7,-1284(fp)
   1a970:	e13ebc17 	ldw	r4,-1296(fp)
   1a974:	e17ebd17 	ldw	r5,-1292(fp)
   1a978:	00429400 	call	42940 <__muldi3>
   1a97c:	1009883a 	mov	r4,r2
   1a980:	180b883a 	mov	r5,r3
   1a984:	200f883a 	mov	r7,r4
   1a988:	2811883a 	mov	r8,r5
   1a98c:	e13e6a17 	ldw	r4,-1624(fp)
   1a990:	e17e6b17 	ldw	r5,-1620(fp)
   1a994:	21c5883a 	add	r2,r4,r7
   1a998:	110d803a 	cmpltu	r6,r2,r4
   1a99c:	2a07883a 	add	r3,r5,r8
   1a9a0:	30c9883a 	add	r4,r6,r3
   1a9a4:	2007883a 	mov	r3,r4
   1a9a8:	e0be6a15 	stw	r2,-1624(fp)
   1a9ac:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(c, 62);
   1a9b0:	e0be6b17 	ldw	r2,-1620(fp)
   1a9b4:	1004d7ba 	srli	r2,r2,30
   1a9b8:	e0bec015 	stw	r2,-1280(fp)
   1a9bc:	e03ec115 	stw	zero,-1276(fp)
   1a9c0:	e1bec017 	ldw	r6,-1280(fp)
   1a9c4:	e1fec117 	ldw	r7,-1276(fp)
   1a9c8:	31c4b03a 	or	r2,r6,r7
   1a9cc:	1004c03a 	cmpne	r2,r2,zero
   1a9d0:	10803fcc 	andi	r2,r2,255
   1a9d4:	10000d26 	beq	r2,zero,1aa0c <secp256k1_fe_sqr_inner+0xcf4>
   1a9d8:	d0a01617 	ldw	r2,-32680(gp)
   1a9dc:	10c00317 	ldw	r3,12(r2)
   1a9e0:	008001b4 	movhi	r2,6
   1a9e4:	10acc904 	addi	r2,r2,-19676
   1a9e8:	d8800015 	stw	r2,0(sp)
   1a9ec:	01c0cf44 	movi	r7,829
   1a9f0:	018001b4 	movhi	r6,6
   1a9f4:	31ab2d04 	addi	r6,r6,-21324
   1a9f8:	014001b4 	movhi	r5,6
   1a9fc:	296b3804 	addi	r5,r5,-21280
   1aa00:	1809883a 	mov	r4,r3
   1aa04:	00452600 	call	45260 <fprintf>
   1aa08:	00450340 	call	45034 <abort>
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)(a[2]*2) * a[9]
   1aa0c:	e0be8717 	ldw	r2,-1508(fp)
   1aa10:	10800204 	addi	r2,r2,8
   1aa14:	10800017 	ldw	r2,0(r2)
   1aa18:	1085883a 	add	r2,r2,r2
   1aa1c:	e0bec215 	stw	r2,-1272(fp)
   1aa20:	e03ec315 	stw	zero,-1268(fp)
   1aa24:	e0be8717 	ldw	r2,-1508(fp)
   1aa28:	10800904 	addi	r2,r2,36
   1aa2c:	10800017 	ldw	r2,0(r2)
   1aa30:	e0bec415 	stw	r2,-1264(fp)
   1aa34:	e03ec515 	stw	zero,-1260(fp)
   1aa38:	e1bec417 	ldw	r6,-1264(fp)
   1aa3c:	e1fec517 	ldw	r7,-1260(fp)
   1aa40:	e13ec217 	ldw	r4,-1272(fp)
   1aa44:	e17ec317 	ldw	r5,-1268(fp)
   1aa48:	00429400 	call	42940 <__muldi3>
   1aa4c:	1009883a 	mov	r4,r2
   1aa50:	180b883a 	mov	r5,r3
   1aa54:	2021883a 	mov	r16,r4
   1aa58:	2823883a 	mov	r17,r5
       + (uint64_t)(a[3]*2) * a[8]
   1aa5c:	e0be8717 	ldw	r2,-1508(fp)
   1aa60:	10800304 	addi	r2,r2,12
   1aa64:	10800017 	ldw	r2,0(r2)
   1aa68:	1085883a 	add	r2,r2,r2
   1aa6c:	e0bec615 	stw	r2,-1256(fp)
   1aa70:	e03ec715 	stw	zero,-1252(fp)
   1aa74:	e0be8717 	ldw	r2,-1508(fp)
   1aa78:	10800804 	addi	r2,r2,32
   1aa7c:	10800017 	ldw	r2,0(r2)
   1aa80:	e0bec815 	stw	r2,-1248(fp)
   1aa84:	e03ec915 	stw	zero,-1244(fp)
   1aa88:	e1bec817 	ldw	r6,-1248(fp)
   1aa8c:	e1fec917 	ldw	r7,-1244(fp)
   1aa90:	e13ec617 	ldw	r4,-1256(fp)
   1aa94:	e17ec717 	ldw	r5,-1252(fp)
   1aa98:	00429400 	call	42940 <__muldi3>
   1aa9c:	100f883a 	mov	r7,r2
   1aaa0:	1811883a 	mov	r8,r3
   1aaa4:	380b883a 	mov	r5,r7
   1aaa8:	400d883a 	mov	r6,r8
   1aaac:	8145883a 	add	r2,r16,r5
   1aab0:	1409803a 	cmpltu	r4,r2,r16
   1aab4:	8987883a 	add	r3,r17,r6
   1aab8:	20c9883a 	add	r4,r4,r3
   1aabc:	2007883a 	mov	r3,r4
   1aac0:	1025883a 	mov	r18,r2
   1aac4:	1827883a 	mov	r19,r3
       + (uint64_t)(a[4]*2) * a[7]
       + (uint64_t)(a[5]*2) * a[6];
   1aac8:	e0be8717 	ldw	r2,-1508(fp)
   1aacc:	10800504 	addi	r2,r2,20
   1aad0:	10800017 	ldw	r2,0(r2)
   1aad4:	1085883a 	add	r2,r2,r2
   1aad8:	e0beca15 	stw	r2,-1240(fp)
   1aadc:	e03ecb15 	stw	zero,-1236(fp)
   1aae0:	e0be8717 	ldw	r2,-1508(fp)
   1aae4:	10800604 	addi	r2,r2,24
   1aae8:	10800017 	ldw	r2,0(r2)
   1aaec:	e0becc15 	stw	r2,-1232(fp)
   1aaf0:	e03ecd15 	stw	zero,-1228(fp)
   1aaf4:	e1becc17 	ldw	r6,-1232(fp)
   1aaf8:	e1fecd17 	ldw	r7,-1228(fp)
   1aafc:	e13eca17 	ldw	r4,-1240(fp)
   1ab00:	e17ecb17 	ldw	r5,-1236(fp)
   1ab04:	00429400 	call	42940 <__muldi3>
   1ab08:	1009883a 	mov	r4,r2
   1ab0c:	180b883a 	mov	r5,r3
   1ab10:	2021883a 	mov	r16,r4
   1ab14:	2823883a 	mov	r17,r5
    c += (uint64_t)(a[0]*2) * a[1];
    VERIFY_BITS(c, 62);
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)(a[2]*2) * a[9]
       + (uint64_t)(a[3]*2) * a[8]
       + (uint64_t)(a[4]*2) * a[7]
   1ab18:	e0be8717 	ldw	r2,-1508(fp)
   1ab1c:	10800404 	addi	r2,r2,16
   1ab20:	10800017 	ldw	r2,0(r2)
   1ab24:	1085883a 	add	r2,r2,r2
   1ab28:	e0bece15 	stw	r2,-1224(fp)
   1ab2c:	e03ecf15 	stw	zero,-1220(fp)
   1ab30:	e0be8717 	ldw	r2,-1508(fp)
   1ab34:	10800704 	addi	r2,r2,28
   1ab38:	10800017 	ldw	r2,0(r2)
   1ab3c:	e0bed015 	stw	r2,-1216(fp)
   1ab40:	e03ed115 	stw	zero,-1212(fp)
   1ab44:	e1bed017 	ldw	r6,-1216(fp)
   1ab48:	e1fed117 	ldw	r7,-1212(fp)
   1ab4c:	e13ece17 	ldw	r4,-1224(fp)
   1ab50:	e17ecf17 	ldw	r5,-1220(fp)
   1ab54:	00429400 	call	42940 <__muldi3>
   1ab58:	100f883a 	mov	r7,r2
   1ab5c:	1811883a 	mov	r8,r3
   1ab60:	380b883a 	mov	r5,r7
   1ab64:	400d883a 	mov	r6,r8
       + (uint64_t)(a[5]*2) * a[6];
   1ab68:	8145883a 	add	r2,r16,r5
   1ab6c:	1409803a 	cmpltu	r4,r2,r16
   1ab70:	8987883a 	add	r3,r17,r6
   1ab74:	20c9883a 	add	r4,r4,r3
   1ab78:	2007883a 	mov	r3,r4
   1ab7c:	100b883a 	mov	r5,r2
   1ab80:	180d883a 	mov	r6,r3
   1ab84:	9145883a 	add	r2,r18,r5
   1ab88:	1489803a 	cmpltu	r4,r2,r18
   1ab8c:	9987883a 	add	r3,r19,r6
   1ab90:	20c9883a 	add	r4,r4,r3
   1ab94:	2007883a 	mov	r3,r4
   1ab98:	100f883a 	mov	r7,r2
   1ab9c:	1811883a 	mov	r8,r3
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */

    c += (uint64_t)(a[0]*2) * a[1];
    VERIFY_BITS(c, 62);
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)(a[2]*2) * a[9]
   1aba0:	e13e6717 	ldw	r4,-1636(fp)
   1aba4:	e17e6817 	ldw	r5,-1632(fp)
   1aba8:	21c5883a 	add	r2,r4,r7
   1abac:	110d803a 	cmpltu	r6,r2,r4
   1abb0:	2a07883a 	add	r3,r5,r8
   1abb4:	30c9883a 	add	r4,r6,r3
   1abb8:	2007883a 	mov	r3,r4
   1abbc:	e0be6715 	stw	r2,-1636(fp)
   1abc0:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[3]*2) * a[8]
       + (uint64_t)(a[4]*2) * a[7]
       + (uint64_t)(a[5]*2) * a[6];
    VERIFY_BITS(d, 63);
   1abc4:	e0be6717 	ldw	r2,-1636(fp)
   1abc8:	e0fe6817 	ldw	r3,-1632(fp)
   1abcc:	1804d7fa 	srli	r2,r3,31
   1abd0:	10803fcc 	andi	r2,r2,255
   1abd4:	10000d26 	beq	r2,zero,1ac0c <secp256k1_fe_sqr_inner+0xef4>
   1abd8:	d0a01617 	ldw	r2,-32680(gp)
   1abdc:	10c00317 	ldw	r3,12(r2)
   1abe0:	008001b4 	movhi	r2,6
   1abe4:	10ac8704 	addi	r2,r2,-19940
   1abe8:	d8800015 	stw	r2,0(sp)
   1abec:	01c0d0c4 	movi	r7,835
   1abf0:	018001b4 	movhi	r6,6
   1abf4:	31ab2d04 	addi	r6,r6,-21324
   1abf8:	014001b4 	movhi	r5,6
   1abfc:	296b3804 	addi	r5,r5,-21280
   1ac00:	1809883a 	mov	r4,r3
   1ac04:	00452600 	call	45260 <fprintf>
   1ac08:	00450340 	call	45034 <abort>
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    u1 = d & M; d >>= 26; c += u1 * R0;
   1ac0c:	e0be6417 	ldw	r2,-1648(fp)
   1ac10:	e0bed215 	stw	r2,-1208(fp)
   1ac14:	e03ed315 	stw	zero,-1204(fp)
   1ac18:	e0be6717 	ldw	r2,-1636(fp)
   1ac1c:	e0fed217 	ldw	r3,-1208(fp)
   1ac20:	10c4703a 	and	r2,r2,r3
   1ac24:	e0be6f15 	stw	r2,-1604(fp)
   1ac28:	e0be6817 	ldw	r2,-1632(fp)
   1ac2c:	e13ed317 	ldw	r4,-1204(fp)
   1ac30:	1104703a 	and	r2,r2,r4
   1ac34:	e0be7015 	stw	r2,-1600(fp)
   1ac38:	e0be6817 	ldw	r2,-1632(fp)
   1ac3c:	100691ba 	slli	r3,r2,6
   1ac40:	e0be6717 	ldw	r2,-1636(fp)
   1ac44:	1004d6ba 	srli	r2,r2,26
   1ac48:	10c4b03a 	or	r2,r2,r3
   1ac4c:	e0be6715 	stw	r2,-1636(fp)
   1ac50:	e0be6817 	ldw	r2,-1632(fp)
   1ac54:	1004d6ba 	srli	r2,r2,26
   1ac58:	e0be6815 	stw	r2,-1632(fp)
   1ac5c:	e0be6517 	ldw	r2,-1644(fp)
   1ac60:	e0bed415 	stw	r2,-1200(fp)
   1ac64:	e03ed515 	stw	zero,-1196(fp)
   1ac68:	e1be6f17 	ldw	r6,-1604(fp)
   1ac6c:	e1fe7017 	ldw	r7,-1600(fp)
   1ac70:	e13ed417 	ldw	r4,-1200(fp)
   1ac74:	e17ed517 	ldw	r5,-1196(fp)
   1ac78:	00429400 	call	42940 <__muldi3>
   1ac7c:	1009883a 	mov	r4,r2
   1ac80:	180b883a 	mov	r5,r3
   1ac84:	200f883a 	mov	r7,r4
   1ac88:	2811883a 	mov	r8,r5
   1ac8c:	e13e6a17 	ldw	r4,-1624(fp)
   1ac90:	e17e6b17 	ldw	r5,-1620(fp)
   1ac94:	21c5883a 	add	r2,r4,r7
   1ac98:	110d803a 	cmpltu	r6,r2,r4
   1ac9c:	2a07883a 	add	r3,r5,r8
   1aca0:	30c9883a 	add	r4,r6,r3
   1aca4:	2007883a 	mov	r3,r4
   1aca8:	e0be6a15 	stw	r2,-1624(fp)
   1acac:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u1, 26);
   1acb0:	e0be7017 	ldw	r2,-1600(fp)
   1acb4:	100691ba 	slli	r3,r2,6
   1acb8:	e0be6f17 	ldw	r2,-1604(fp)
   1acbc:	1004d6ba 	srli	r2,r2,26
   1acc0:	e0bed615 	stw	r2,-1192(fp)
   1acc4:	e1bed617 	ldw	r6,-1192(fp)
   1acc8:	1986b03a 	or	r3,r3,r6
   1accc:	e0fed615 	stw	r3,-1192(fp)
   1acd0:	e0be7017 	ldw	r2,-1600(fp)
   1acd4:	1004d6ba 	srli	r2,r2,26
   1acd8:	e0bed715 	stw	r2,-1188(fp)
   1acdc:	e1fed617 	ldw	r7,-1192(fp)
   1ace0:	e0fed717 	ldw	r3,-1188(fp)
   1ace4:	38c4b03a 	or	r2,r7,r3
   1ace8:	1004c03a 	cmpne	r2,r2,zero
   1acec:	10803fcc 	andi	r2,r2,255
   1acf0:	10000d26 	beq	r2,zero,1ad28 <secp256k1_fe_sqr_inner+0x1010>
   1acf4:	d0a01617 	ldw	r2,-32680(gp)
   1acf8:	10c00317 	ldw	r3,12(r2)
   1acfc:	008001b4 	movhi	r2,6
   1ad00:	10acd404 	addi	r2,r2,-19632
   1ad04:	d8800015 	stw	r2,0(sp)
   1ad08:	01c0d184 	movi	r7,838
   1ad0c:	018001b4 	movhi	r6,6
   1ad10:	31ab2d04 	addi	r6,r6,-21324
   1ad14:	014001b4 	movhi	r5,6
   1ad18:	296b3804 	addi	r5,r5,-21280
   1ad1c:	1809883a 	mov	r4,r3
   1ad20:	00452600 	call	45260 <fprintf>
   1ad24:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 37);
   1ad28:	e0be6817 	ldw	r2,-1632(fp)
   1ad2c:	1004d17a 	srli	r2,r2,5
   1ad30:	e0bed815 	stw	r2,-1184(fp)
   1ad34:	e03ed915 	stw	zero,-1180(fp)
   1ad38:	e13ed817 	ldw	r4,-1184(fp)
   1ad3c:	e1bed917 	ldw	r6,-1180(fp)
   1ad40:	2184b03a 	or	r2,r4,r6
   1ad44:	1004c03a 	cmpne	r2,r2,zero
   1ad48:	10803fcc 	andi	r2,r2,255
   1ad4c:	10000d26 	beq	r2,zero,1ad84 <secp256k1_fe_sqr_inner+0x106c>
   1ad50:	d0a01617 	ldw	r2,-32680(gp)
   1ad54:	10c00317 	ldw	r3,12(r2)
   1ad58:	008001b4 	movhi	r2,6
   1ad5c:	10ac9d04 	addi	r2,r2,-19852
   1ad60:	d8800015 	stw	r2,0(sp)
   1ad64:	01c0d1c4 	movi	r7,839
   1ad68:	018001b4 	movhi	r6,6
   1ad6c:	31ab2d04 	addi	r6,r6,-21324
   1ad70:	014001b4 	movhi	r5,6
   1ad74:	296b3804 	addi	r5,r5,-21280
   1ad78:	1809883a 	mov	r4,r3
   1ad7c:	00452600 	call	45260 <fprintf>
   1ad80:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 63);
   1ad84:	e0be6a17 	ldw	r2,-1624(fp)
   1ad88:	e0fe6b17 	ldw	r3,-1620(fp)
   1ad8c:	1804d7fa 	srli	r2,r3,31
   1ad90:	10803fcc 	andi	r2,r2,255
   1ad94:	10000d26 	beq	r2,zero,1adcc <secp256k1_fe_sqr_inner+0x10b4>
   1ad98:	d0a01617 	ldw	r2,-32680(gp)
   1ad9c:	10c00317 	ldw	r3,12(r2)
   1ada0:	008001b4 	movhi	r2,6
   1ada4:	10acdf04 	addi	r2,r2,-19588
   1ada8:	d8800015 	stw	r2,0(sp)
   1adac:	01c0d204 	movi	r7,840
   1adb0:	018001b4 	movhi	r6,6
   1adb4:	31ab2d04 	addi	r6,r6,-21324
   1adb8:	014001b4 	movhi	r5,6
   1adbc:	296b3804 	addi	r5,r5,-21280
   1adc0:	1809883a 	mov	r4,r3
   1adc4:	00452600 	call	45260 <fprintf>
   1adc8:	00450340 	call	45034 <abort>
    /* [d u1 0 t9 0 0 0 0 0 0 0 c-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    t1 = c & M; c >>= 26; c += u1 * R1;
   1adcc:	e0fe6a17 	ldw	r3,-1624(fp)
   1add0:	e0be6417 	ldw	r2,-1648(fp)
   1add4:	1884703a 	and	r2,r3,r2
   1add8:	e0be7115 	stw	r2,-1596(fp)
   1addc:	e0be6b17 	ldw	r2,-1620(fp)
   1ade0:	100691ba 	slli	r3,r2,6
   1ade4:	e0be6a17 	ldw	r2,-1624(fp)
   1ade8:	1004d6ba 	srli	r2,r2,26
   1adec:	10c4b03a 	or	r2,r2,r3
   1adf0:	e0be6a15 	stw	r2,-1624(fp)
   1adf4:	e0be6b17 	ldw	r2,-1620(fp)
   1adf8:	1004d6ba 	srli	r2,r2,26
   1adfc:	e0be6b15 	stw	r2,-1620(fp)
   1ae00:	e0be6617 	ldw	r2,-1640(fp)
   1ae04:	e0beda15 	stw	r2,-1176(fp)
   1ae08:	e03edb15 	stw	zero,-1172(fp)
   1ae0c:	e1be6f17 	ldw	r6,-1604(fp)
   1ae10:	e1fe7017 	ldw	r7,-1600(fp)
   1ae14:	e13eda17 	ldw	r4,-1176(fp)
   1ae18:	e17edb17 	ldw	r5,-1172(fp)
   1ae1c:	00429400 	call	42940 <__muldi3>
   1ae20:	1009883a 	mov	r4,r2
   1ae24:	180b883a 	mov	r5,r3
   1ae28:	200f883a 	mov	r7,r4
   1ae2c:	2811883a 	mov	r8,r5
   1ae30:	e13e6a17 	ldw	r4,-1624(fp)
   1ae34:	e17e6b17 	ldw	r5,-1620(fp)
   1ae38:	21c5883a 	add	r2,r4,r7
   1ae3c:	110d803a 	cmpltu	r6,r2,r4
   1ae40:	2a07883a 	add	r3,r5,r8
   1ae44:	30c9883a 	add	r4,r6,r3
   1ae48:	2007883a 	mov	r3,r4
   1ae4c:	e0be6a15 	stw	r2,-1624(fp)
   1ae50:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t1, 26);
   1ae54:	e0be7117 	ldw	r2,-1596(fp)
   1ae58:	1004d6ba 	srli	r2,r2,26
   1ae5c:	1004c03a 	cmpne	r2,r2,zero
   1ae60:	10803fcc 	andi	r2,r2,255
   1ae64:	10000d26 	beq	r2,zero,1ae9c <secp256k1_fe_sqr_inner+0x1184>
   1ae68:	d0a01617 	ldw	r2,-32680(gp)
   1ae6c:	10c00317 	ldw	r3,12(r2)
   1ae70:	008001b4 	movhi	r2,6
   1ae74:	10acea04 	addi	r2,r2,-19544
   1ae78:	d8800015 	stw	r2,0(sp)
   1ae7c:	01c0d2c4 	movi	r7,843
   1ae80:	018001b4 	movhi	r6,6
   1ae84:	31ab2d04 	addi	r6,r6,-21324
   1ae88:	014001b4 	movhi	r5,6
   1ae8c:	296b3804 	addi	r5,r5,-21280
   1ae90:	1809883a 	mov	r4,r3
   1ae94:	00452600 	call	45260 <fprintf>
   1ae98:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 38);
   1ae9c:	e0be6b17 	ldw	r2,-1620(fp)
   1aea0:	1004d1ba 	srli	r2,r2,6
   1aea4:	e0bedc15 	stw	r2,-1168(fp)
   1aea8:	e03edd15 	stw	zero,-1164(fp)
   1aeac:	e1fedc17 	ldw	r7,-1168(fp)
   1aeb0:	e0fedd17 	ldw	r3,-1164(fp)
   1aeb4:	38c4b03a 	or	r2,r7,r3
   1aeb8:	1004c03a 	cmpne	r2,r2,zero
   1aebc:	10803fcc 	andi	r2,r2,255
   1aec0:	10000d26 	beq	r2,zero,1aef8 <secp256k1_fe_sqr_inner+0x11e0>
   1aec4:	d0a01617 	ldw	r2,-32680(gp)
   1aec8:	10c00317 	ldw	r3,12(r2)
   1aecc:	008001b4 	movhi	r2,6
   1aed0:	10acf504 	addi	r2,r2,-19500
   1aed4:	d8800015 	stw	r2,0(sp)
   1aed8:	01c0d304 	movi	r7,844
   1aedc:	018001b4 	movhi	r6,6
   1aee0:	31ab2d04 	addi	r6,r6,-21324
   1aee4:	014001b4 	movhi	r5,6
   1aee8:	296b3804 	addi	r5,r5,-21280
   1aeec:	1809883a 	mov	r4,r3
   1aef0:	00452600 	call	45260 <fprintf>
   1aef4:	00450340 	call	45034 <abort>
    /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[2]
   1aef8:	e0be8717 	ldw	r2,-1508(fp)
   1aefc:	10800017 	ldw	r2,0(r2)
   1af00:	1085883a 	add	r2,r2,r2
   1af04:	e0bede15 	stw	r2,-1160(fp)
   1af08:	e03edf15 	stw	zero,-1156(fp)
   1af0c:	e0be8717 	ldw	r2,-1508(fp)
   1af10:	10800204 	addi	r2,r2,8
   1af14:	10800017 	ldw	r2,0(r2)
   1af18:	e0bee015 	stw	r2,-1152(fp)
   1af1c:	e03ee115 	stw	zero,-1148(fp)
   1af20:	e1bee017 	ldw	r6,-1152(fp)
   1af24:	e1fee117 	ldw	r7,-1148(fp)
   1af28:	e13ede17 	ldw	r4,-1160(fp)
   1af2c:	e17edf17 	ldw	r5,-1156(fp)
   1af30:	00429400 	call	42940 <__muldi3>
   1af34:	1009883a 	mov	r4,r2
   1af38:	180b883a 	mov	r5,r3
   1af3c:	2021883a 	mov	r16,r4
   1af40:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * a[1];
   1af44:	e0be8717 	ldw	r2,-1508(fp)
   1af48:	10800104 	addi	r2,r2,4
   1af4c:	10800017 	ldw	r2,0(r2)
   1af50:	e0bee215 	stw	r2,-1144(fp)
   1af54:	e03ee315 	stw	zero,-1140(fp)
   1af58:	e0be8717 	ldw	r2,-1508(fp)
   1af5c:	10800104 	addi	r2,r2,4
   1af60:	10800017 	ldw	r2,0(r2)
   1af64:	e0bee415 	stw	r2,-1136(fp)
   1af68:	e03ee515 	stw	zero,-1132(fp)
   1af6c:	e1bee417 	ldw	r6,-1136(fp)
   1af70:	e1fee517 	ldw	r7,-1132(fp)
   1af74:	e13ee217 	ldw	r4,-1144(fp)
   1af78:	e17ee317 	ldw	r5,-1140(fp)
   1af7c:	00429400 	call	42940 <__muldi3>
   1af80:	100f883a 	mov	r7,r2
   1af84:	1811883a 	mov	r8,r3
   1af88:	380b883a 	mov	r5,r7
   1af8c:	400d883a 	mov	r6,r8
   1af90:	8145883a 	add	r2,r16,r5
   1af94:	1409803a 	cmpltu	r4,r2,r16
   1af98:	8987883a 	add	r3,r17,r6
   1af9c:	20c9883a 	add	r4,r4,r3
   1afa0:	2007883a 	mov	r3,r4
   1afa4:	100f883a 	mov	r7,r2
   1afa8:	1811883a 	mov	r8,r3
    VERIFY_BITS(t1, 26);
    VERIFY_BITS(c, 38);
    /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[2]
   1afac:	e13e6a17 	ldw	r4,-1624(fp)
   1afb0:	e17e6b17 	ldw	r5,-1620(fp)
   1afb4:	21c5883a 	add	r2,r4,r7
   1afb8:	110d803a 	cmpltu	r6,r2,r4
   1afbc:	2a07883a 	add	r3,r5,r8
   1afc0:	30c9883a 	add	r4,r6,r3
   1afc4:	2007883a 	mov	r3,r4
   1afc8:	e0be6a15 	stw	r2,-1624(fp)
   1afcc:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)a[1] * a[1];
    VERIFY_BITS(c, 62);
   1afd0:	e0be6b17 	ldw	r2,-1620(fp)
   1afd4:	1004d7ba 	srli	r2,r2,30
   1afd8:	e0bee615 	stw	r2,-1128(fp)
   1afdc:	e03ee715 	stw	zero,-1124(fp)
   1afe0:	e13ee617 	ldw	r4,-1128(fp)
   1afe4:	e1bee717 	ldw	r6,-1124(fp)
   1afe8:	2184b03a 	or	r2,r4,r6
   1afec:	1004c03a 	cmpne	r2,r2,zero
   1aff0:	10803fcc 	andi	r2,r2,255
   1aff4:	10000d26 	beq	r2,zero,1b02c <secp256k1_fe_sqr_inner+0x1314>
   1aff8:	d0a01617 	ldw	r2,-32680(gp)
   1affc:	10c00317 	ldw	r3,12(r2)
   1b000:	008001b4 	movhi	r2,6
   1b004:	10acc904 	addi	r2,r2,-19676
   1b008:	d8800015 	stw	r2,0(sp)
   1b00c:	01c0d484 	movi	r7,850
   1b010:	018001b4 	movhi	r6,6
   1b014:	31ab2d04 	addi	r6,r6,-21324
   1b018:	014001b4 	movhi	r5,6
   1b01c:	296b3804 	addi	r5,r5,-21280
   1b020:	1809883a 	mov	r4,r3
   1b024:	00452600 	call	45260 <fprintf>
   1b028:	00450340 	call	45034 <abort>
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)(a[3]*2) * a[9]
   1b02c:	e0be8717 	ldw	r2,-1508(fp)
   1b030:	10800304 	addi	r2,r2,12
   1b034:	10800017 	ldw	r2,0(r2)
   1b038:	1085883a 	add	r2,r2,r2
   1b03c:	e0bee815 	stw	r2,-1120(fp)
   1b040:	e03ee915 	stw	zero,-1116(fp)
   1b044:	e0be8717 	ldw	r2,-1508(fp)
   1b048:	10800904 	addi	r2,r2,36
   1b04c:	10800017 	ldw	r2,0(r2)
   1b050:	e0beea15 	stw	r2,-1112(fp)
   1b054:	e03eeb15 	stw	zero,-1108(fp)
   1b058:	e1beea17 	ldw	r6,-1112(fp)
   1b05c:	e1feeb17 	ldw	r7,-1108(fp)
   1b060:	e13ee817 	ldw	r4,-1120(fp)
   1b064:	e17ee917 	ldw	r5,-1116(fp)
   1b068:	00429400 	call	42940 <__muldi3>
   1b06c:	1009883a 	mov	r4,r2
   1b070:	180b883a 	mov	r5,r3
   1b074:	2021883a 	mov	r16,r4
   1b078:	2823883a 	mov	r17,r5
       + (uint64_t)(a[4]*2) * a[8]
   1b07c:	e0be8717 	ldw	r2,-1508(fp)
   1b080:	10800404 	addi	r2,r2,16
   1b084:	10800017 	ldw	r2,0(r2)
   1b088:	1085883a 	add	r2,r2,r2
   1b08c:	e0beec15 	stw	r2,-1104(fp)
   1b090:	e03eed15 	stw	zero,-1100(fp)
   1b094:	e0be8717 	ldw	r2,-1508(fp)
   1b098:	10800804 	addi	r2,r2,32
   1b09c:	10800017 	ldw	r2,0(r2)
   1b0a0:	e0beee15 	stw	r2,-1096(fp)
   1b0a4:	e03eef15 	stw	zero,-1092(fp)
   1b0a8:	e1beee17 	ldw	r6,-1096(fp)
   1b0ac:	e1feef17 	ldw	r7,-1092(fp)
   1b0b0:	e13eec17 	ldw	r4,-1104(fp)
   1b0b4:	e17eed17 	ldw	r5,-1100(fp)
   1b0b8:	00429400 	call	42940 <__muldi3>
   1b0bc:	100f883a 	mov	r7,r2
   1b0c0:	1811883a 	mov	r8,r3
   1b0c4:	380b883a 	mov	r5,r7
   1b0c8:	400d883a 	mov	r6,r8
   1b0cc:	8145883a 	add	r2,r16,r5
   1b0d0:	1409803a 	cmpltu	r4,r2,r16
   1b0d4:	8987883a 	add	r3,r17,r6
   1b0d8:	20c9883a 	add	r4,r4,r3
   1b0dc:	2007883a 	mov	r3,r4
   1b0e0:	1025883a 	mov	r18,r2
   1b0e4:	1827883a 	mov	r19,r3
       + (uint64_t)(a[5]*2) * a[7]
       + (uint64_t)a[6] * a[6];
   1b0e8:	e0be8717 	ldw	r2,-1508(fp)
   1b0ec:	10800604 	addi	r2,r2,24
   1b0f0:	10800017 	ldw	r2,0(r2)
   1b0f4:	e0bef015 	stw	r2,-1088(fp)
   1b0f8:	e03ef115 	stw	zero,-1084(fp)
   1b0fc:	e0be8717 	ldw	r2,-1508(fp)
   1b100:	10800604 	addi	r2,r2,24
   1b104:	10800017 	ldw	r2,0(r2)
   1b108:	e0bef215 	stw	r2,-1080(fp)
   1b10c:	e03ef315 	stw	zero,-1076(fp)
   1b110:	e1bef217 	ldw	r6,-1080(fp)
   1b114:	e1fef317 	ldw	r7,-1076(fp)
   1b118:	e13ef017 	ldw	r4,-1088(fp)
   1b11c:	e17ef117 	ldw	r5,-1084(fp)
   1b120:	00429400 	call	42940 <__muldi3>
   1b124:	1009883a 	mov	r4,r2
   1b128:	180b883a 	mov	r5,r3
   1b12c:	2021883a 	mov	r16,r4
   1b130:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * a[1];
    VERIFY_BITS(c, 62);
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)(a[3]*2) * a[9]
       + (uint64_t)(a[4]*2) * a[8]
       + (uint64_t)(a[5]*2) * a[7]
   1b134:	e0be8717 	ldw	r2,-1508(fp)
   1b138:	10800504 	addi	r2,r2,20
   1b13c:	10800017 	ldw	r2,0(r2)
   1b140:	1085883a 	add	r2,r2,r2
   1b144:	e0bef415 	stw	r2,-1072(fp)
   1b148:	e03ef515 	stw	zero,-1068(fp)
   1b14c:	e0be8717 	ldw	r2,-1508(fp)
   1b150:	10800704 	addi	r2,r2,28
   1b154:	10800017 	ldw	r2,0(r2)
   1b158:	e0bef615 	stw	r2,-1064(fp)
   1b15c:	e03ef715 	stw	zero,-1060(fp)
   1b160:	e1bef617 	ldw	r6,-1064(fp)
   1b164:	e1fef717 	ldw	r7,-1060(fp)
   1b168:	e13ef417 	ldw	r4,-1072(fp)
   1b16c:	e17ef517 	ldw	r5,-1068(fp)
   1b170:	00429400 	call	42940 <__muldi3>
   1b174:	100f883a 	mov	r7,r2
   1b178:	1811883a 	mov	r8,r3
   1b17c:	380b883a 	mov	r5,r7
   1b180:	400d883a 	mov	r6,r8
       + (uint64_t)a[6] * a[6];
   1b184:	8145883a 	add	r2,r16,r5
   1b188:	1409803a 	cmpltu	r4,r2,r16
   1b18c:	8987883a 	add	r3,r17,r6
   1b190:	20c9883a 	add	r4,r4,r3
   1b194:	2007883a 	mov	r3,r4
   1b198:	100b883a 	mov	r5,r2
   1b19c:	180d883a 	mov	r6,r3
   1b1a0:	9145883a 	add	r2,r18,r5
   1b1a4:	1489803a 	cmpltu	r4,r2,r18
   1b1a8:	9987883a 	add	r3,r19,r6
   1b1ac:	20c9883a 	add	r4,r4,r3
   1b1b0:	2007883a 	mov	r3,r4
   1b1b4:	100f883a 	mov	r7,r2
   1b1b8:	1811883a 	mov	r8,r3

    c += (uint64_t)(a[0]*2) * a[2]
       + (uint64_t)a[1] * a[1];
    VERIFY_BITS(c, 62);
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)(a[3]*2) * a[9]
   1b1bc:	e13e6717 	ldw	r4,-1636(fp)
   1b1c0:	e17e6817 	ldw	r5,-1632(fp)
   1b1c4:	21c5883a 	add	r2,r4,r7
   1b1c8:	110d803a 	cmpltu	r6,r2,r4
   1b1cc:	2a07883a 	add	r3,r5,r8
   1b1d0:	30c9883a 	add	r4,r6,r3
   1b1d4:	2007883a 	mov	r3,r4
   1b1d8:	e0be6715 	stw	r2,-1636(fp)
   1b1dc:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[4]*2) * a[8]
       + (uint64_t)(a[5]*2) * a[7]
       + (uint64_t)a[6] * a[6];
    VERIFY_BITS(d, 63);
   1b1e0:	e0be6717 	ldw	r2,-1636(fp)
   1b1e4:	e0fe6817 	ldw	r3,-1632(fp)
   1b1e8:	1804d7fa 	srli	r2,r3,31
   1b1ec:	10803fcc 	andi	r2,r2,255
   1b1f0:	10000d26 	beq	r2,zero,1b228 <secp256k1_fe_sqr_inner+0x1510>
   1b1f4:	d0a01617 	ldw	r2,-32680(gp)
   1b1f8:	10c00317 	ldw	r3,12(r2)
   1b1fc:	008001b4 	movhi	r2,6
   1b200:	10ac8704 	addi	r2,r2,-19940
   1b204:	d8800015 	stw	r2,0(sp)
   1b208:	01c0d604 	movi	r7,856
   1b20c:	018001b4 	movhi	r6,6
   1b210:	31ab2d04 	addi	r6,r6,-21324
   1b214:	014001b4 	movhi	r5,6
   1b218:	296b3804 	addi	r5,r5,-21280
   1b21c:	1809883a 	mov	r4,r3
   1b220:	00452600 	call	45260 <fprintf>
   1b224:	00450340 	call	45034 <abort>
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    u2 = d & M; d >>= 26; c += u2 * R0;
   1b228:	e0be6417 	ldw	r2,-1648(fp)
   1b22c:	e0bef815 	stw	r2,-1056(fp)
   1b230:	e03ef915 	stw	zero,-1052(fp)
   1b234:	e0be6717 	ldw	r2,-1636(fp)
   1b238:	e1fef817 	ldw	r7,-1056(fp)
   1b23c:	11c4703a 	and	r2,r2,r7
   1b240:	e0be7215 	stw	r2,-1592(fp)
   1b244:	e0be6817 	ldw	r2,-1632(fp)
   1b248:	e0fef917 	ldw	r3,-1052(fp)
   1b24c:	10c4703a 	and	r2,r2,r3
   1b250:	e0be7315 	stw	r2,-1588(fp)
   1b254:	e0be6817 	ldw	r2,-1632(fp)
   1b258:	100691ba 	slli	r3,r2,6
   1b25c:	e0be6717 	ldw	r2,-1636(fp)
   1b260:	1004d6ba 	srli	r2,r2,26
   1b264:	10c4b03a 	or	r2,r2,r3
   1b268:	e0be6715 	stw	r2,-1636(fp)
   1b26c:	e0be6817 	ldw	r2,-1632(fp)
   1b270:	1004d6ba 	srli	r2,r2,26
   1b274:	e0be6815 	stw	r2,-1632(fp)
   1b278:	e0be6517 	ldw	r2,-1644(fp)
   1b27c:	e0befa15 	stw	r2,-1048(fp)
   1b280:	e03efb15 	stw	zero,-1044(fp)
   1b284:	e1be7217 	ldw	r6,-1592(fp)
   1b288:	e1fe7317 	ldw	r7,-1588(fp)
   1b28c:	e13efa17 	ldw	r4,-1048(fp)
   1b290:	e17efb17 	ldw	r5,-1044(fp)
   1b294:	00429400 	call	42940 <__muldi3>
   1b298:	1009883a 	mov	r4,r2
   1b29c:	180b883a 	mov	r5,r3
   1b2a0:	200f883a 	mov	r7,r4
   1b2a4:	2811883a 	mov	r8,r5
   1b2a8:	e13e6a17 	ldw	r4,-1624(fp)
   1b2ac:	e17e6b17 	ldw	r5,-1620(fp)
   1b2b0:	21c5883a 	add	r2,r4,r7
   1b2b4:	110d803a 	cmpltu	r6,r2,r4
   1b2b8:	2a07883a 	add	r3,r5,r8
   1b2bc:	30c9883a 	add	r4,r6,r3
   1b2c0:	2007883a 	mov	r3,r4
   1b2c4:	e0be6a15 	stw	r2,-1624(fp)
   1b2c8:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u2, 26);
   1b2cc:	e0be7317 	ldw	r2,-1588(fp)
   1b2d0:	100691ba 	slli	r3,r2,6
   1b2d4:	e0be7217 	ldw	r2,-1592(fp)
   1b2d8:	1004d6ba 	srli	r2,r2,26
   1b2dc:	e0befc15 	stw	r2,-1040(fp)
   1b2e0:	e13efc17 	ldw	r4,-1040(fp)
   1b2e4:	1906b03a 	or	r3,r3,r4
   1b2e8:	e0fefc15 	stw	r3,-1040(fp)
   1b2ec:	e0be7317 	ldw	r2,-1588(fp)
   1b2f0:	1004d6ba 	srli	r2,r2,26
   1b2f4:	e0befd15 	stw	r2,-1036(fp)
   1b2f8:	e1befc17 	ldw	r6,-1040(fp)
   1b2fc:	e1fefd17 	ldw	r7,-1036(fp)
   1b300:	31c4b03a 	or	r2,r6,r7
   1b304:	1004c03a 	cmpne	r2,r2,zero
   1b308:	10803fcc 	andi	r2,r2,255
   1b30c:	10000d26 	beq	r2,zero,1b344 <secp256k1_fe_sqr_inner+0x162c>
   1b310:	d0a01617 	ldw	r2,-32680(gp)
   1b314:	10c00317 	ldw	r3,12(r2)
   1b318:	008001b4 	movhi	r2,6
   1b31c:	10ad0004 	addi	r2,r2,-19456
   1b320:	d8800015 	stw	r2,0(sp)
   1b324:	01c0d6c4 	movi	r7,859
   1b328:	018001b4 	movhi	r6,6
   1b32c:	31ab2d04 	addi	r6,r6,-21324
   1b330:	014001b4 	movhi	r5,6
   1b334:	296b3804 	addi	r5,r5,-21280
   1b338:	1809883a 	mov	r4,r3
   1b33c:	00452600 	call	45260 <fprintf>
   1b340:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 37);
   1b344:	e0be6817 	ldw	r2,-1632(fp)
   1b348:	1004d17a 	srli	r2,r2,5
   1b34c:	e0befe15 	stw	r2,-1032(fp)
   1b350:	e03eff15 	stw	zero,-1028(fp)
   1b354:	e0fefe17 	ldw	r3,-1032(fp)
   1b358:	e13eff17 	ldw	r4,-1028(fp)
   1b35c:	1904b03a 	or	r2,r3,r4
   1b360:	1004c03a 	cmpne	r2,r2,zero
   1b364:	10803fcc 	andi	r2,r2,255
   1b368:	10000d26 	beq	r2,zero,1b3a0 <secp256k1_fe_sqr_inner+0x1688>
   1b36c:	d0a01617 	ldw	r2,-32680(gp)
   1b370:	10c00317 	ldw	r3,12(r2)
   1b374:	008001b4 	movhi	r2,6
   1b378:	10ac9d04 	addi	r2,r2,-19852
   1b37c:	d8800015 	stw	r2,0(sp)
   1b380:	01c0d704 	movi	r7,860
   1b384:	018001b4 	movhi	r6,6
   1b388:	31ab2d04 	addi	r6,r6,-21324
   1b38c:	014001b4 	movhi	r5,6
   1b390:	296b3804 	addi	r5,r5,-21280
   1b394:	1809883a 	mov	r4,r3
   1b398:	00452600 	call	45260 <fprintf>
   1b39c:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 63);
   1b3a0:	e0be6a17 	ldw	r2,-1624(fp)
   1b3a4:	e0fe6b17 	ldw	r3,-1620(fp)
   1b3a8:	1804d7fa 	srli	r2,r3,31
   1b3ac:	10803fcc 	andi	r2,r2,255
   1b3b0:	10000d26 	beq	r2,zero,1b3e8 <secp256k1_fe_sqr_inner+0x16d0>
   1b3b4:	d0a01617 	ldw	r2,-32680(gp)
   1b3b8:	10c00317 	ldw	r3,12(r2)
   1b3bc:	008001b4 	movhi	r2,6
   1b3c0:	10acdf04 	addi	r2,r2,-19588
   1b3c4:	d8800015 	stw	r2,0(sp)
   1b3c8:	01c0d744 	movi	r7,861
   1b3cc:	018001b4 	movhi	r6,6
   1b3d0:	31ab2d04 	addi	r6,r6,-21324
   1b3d4:	014001b4 	movhi	r5,6
   1b3d8:	296b3804 	addi	r5,r5,-21280
   1b3dc:	1809883a 	mov	r4,r3
   1b3e0:	00452600 	call	45260 <fprintf>
   1b3e4:	00450340 	call	45034 <abort>
    /* [d u2 0 0 t9 0 0 0 0 0 0 c-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    t2 = c & M; c >>= 26; c += u2 * R1;
   1b3e8:	e0fe6a17 	ldw	r3,-1624(fp)
   1b3ec:	e0be6417 	ldw	r2,-1648(fp)
   1b3f0:	1884703a 	and	r2,r3,r2
   1b3f4:	e0be7415 	stw	r2,-1584(fp)
   1b3f8:	e0be6b17 	ldw	r2,-1620(fp)
   1b3fc:	100691ba 	slli	r3,r2,6
   1b400:	e0be6a17 	ldw	r2,-1624(fp)
   1b404:	1004d6ba 	srli	r2,r2,26
   1b408:	10c4b03a 	or	r2,r2,r3
   1b40c:	e0be6a15 	stw	r2,-1624(fp)
   1b410:	e0be6b17 	ldw	r2,-1620(fp)
   1b414:	1004d6ba 	srli	r2,r2,26
   1b418:	e0be6b15 	stw	r2,-1620(fp)
   1b41c:	e0be6617 	ldw	r2,-1640(fp)
   1b420:	e0bf0015 	stw	r2,-1024(fp)
   1b424:	e03f0115 	stw	zero,-1020(fp)
   1b428:	e1be7217 	ldw	r6,-1592(fp)
   1b42c:	e1fe7317 	ldw	r7,-1588(fp)
   1b430:	e13f0017 	ldw	r4,-1024(fp)
   1b434:	e17f0117 	ldw	r5,-1020(fp)
   1b438:	00429400 	call	42940 <__muldi3>
   1b43c:	1009883a 	mov	r4,r2
   1b440:	180b883a 	mov	r5,r3
   1b444:	200f883a 	mov	r7,r4
   1b448:	2811883a 	mov	r8,r5
   1b44c:	e13e6a17 	ldw	r4,-1624(fp)
   1b450:	e17e6b17 	ldw	r5,-1620(fp)
   1b454:	21c5883a 	add	r2,r4,r7
   1b458:	110d803a 	cmpltu	r6,r2,r4
   1b45c:	2a07883a 	add	r3,r5,r8
   1b460:	30c9883a 	add	r4,r6,r3
   1b464:	2007883a 	mov	r3,r4
   1b468:	e0be6a15 	stw	r2,-1624(fp)
   1b46c:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t2, 26);
   1b470:	e0be7417 	ldw	r2,-1584(fp)
   1b474:	1004d6ba 	srli	r2,r2,26
   1b478:	1004c03a 	cmpne	r2,r2,zero
   1b47c:	10803fcc 	andi	r2,r2,255
   1b480:	10000d26 	beq	r2,zero,1b4b8 <secp256k1_fe_sqr_inner+0x17a0>
   1b484:	d0a01617 	ldw	r2,-32680(gp)
   1b488:	10c00317 	ldw	r3,12(r2)
   1b48c:	008001b4 	movhi	r2,6
   1b490:	10ad0b04 	addi	r2,r2,-19412
   1b494:	d8800015 	stw	r2,0(sp)
   1b498:	01c0d804 	movi	r7,864
   1b49c:	018001b4 	movhi	r6,6
   1b4a0:	31ab2d04 	addi	r6,r6,-21324
   1b4a4:	014001b4 	movhi	r5,6
   1b4a8:	296b3804 	addi	r5,r5,-21280
   1b4ac:	1809883a 	mov	r4,r3
   1b4b0:	00452600 	call	45260 <fprintf>
   1b4b4:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 38);
   1b4b8:	e0be6b17 	ldw	r2,-1620(fp)
   1b4bc:	1004d1ba 	srli	r2,r2,6
   1b4c0:	e0bf0215 	stw	r2,-1016(fp)
   1b4c4:	e03f0315 	stw	zero,-1012(fp)
   1b4c8:	e1bf0217 	ldw	r6,-1016(fp)
   1b4cc:	e1ff0317 	ldw	r7,-1012(fp)
   1b4d0:	31c4b03a 	or	r2,r6,r7
   1b4d4:	1004c03a 	cmpne	r2,r2,zero
   1b4d8:	10803fcc 	andi	r2,r2,255
   1b4dc:	10000d26 	beq	r2,zero,1b514 <secp256k1_fe_sqr_inner+0x17fc>
   1b4e0:	d0a01617 	ldw	r2,-32680(gp)
   1b4e4:	10c00317 	ldw	r3,12(r2)
   1b4e8:	008001b4 	movhi	r2,6
   1b4ec:	10acf504 	addi	r2,r2,-19500
   1b4f0:	d8800015 	stw	r2,0(sp)
   1b4f4:	01c0d844 	movi	r7,865
   1b4f8:	018001b4 	movhi	r6,6
   1b4fc:	31ab2d04 	addi	r6,r6,-21324
   1b500:	014001b4 	movhi	r5,6
   1b504:	296b3804 	addi	r5,r5,-21280
   1b508:	1809883a 	mov	r4,r3
   1b50c:	00452600 	call	45260 <fprintf>
   1b510:	00450340 	call	45034 <abort>
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[3]
   1b514:	e0be8717 	ldw	r2,-1508(fp)
   1b518:	10800017 	ldw	r2,0(r2)
   1b51c:	1085883a 	add	r2,r2,r2
   1b520:	e0bf0415 	stw	r2,-1008(fp)
   1b524:	e03f0515 	stw	zero,-1004(fp)
   1b528:	e0be8717 	ldw	r2,-1508(fp)
   1b52c:	10800304 	addi	r2,r2,12
   1b530:	10800017 	ldw	r2,0(r2)
   1b534:	e0bf0615 	stw	r2,-1000(fp)
   1b538:	e03f0715 	stw	zero,-996(fp)
   1b53c:	e1bf0617 	ldw	r6,-1000(fp)
   1b540:	e1ff0717 	ldw	r7,-996(fp)
   1b544:	e13f0417 	ldw	r4,-1008(fp)
   1b548:	e17f0517 	ldw	r5,-1004(fp)
   1b54c:	00429400 	call	42940 <__muldi3>
   1b550:	1009883a 	mov	r4,r2
   1b554:	180b883a 	mov	r5,r3
   1b558:	2021883a 	mov	r16,r4
   1b55c:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[2];
   1b560:	e0be8717 	ldw	r2,-1508(fp)
   1b564:	10800104 	addi	r2,r2,4
   1b568:	10800017 	ldw	r2,0(r2)
   1b56c:	1085883a 	add	r2,r2,r2
   1b570:	e0bf0815 	stw	r2,-992(fp)
   1b574:	e03f0915 	stw	zero,-988(fp)
   1b578:	e0be8717 	ldw	r2,-1508(fp)
   1b57c:	10800204 	addi	r2,r2,8
   1b580:	10800017 	ldw	r2,0(r2)
   1b584:	e0bf0a15 	stw	r2,-984(fp)
   1b588:	e03f0b15 	stw	zero,-980(fp)
   1b58c:	e1bf0a17 	ldw	r6,-984(fp)
   1b590:	e1ff0b17 	ldw	r7,-980(fp)
   1b594:	e13f0817 	ldw	r4,-992(fp)
   1b598:	e17f0917 	ldw	r5,-988(fp)
   1b59c:	00429400 	call	42940 <__muldi3>
   1b5a0:	100f883a 	mov	r7,r2
   1b5a4:	1811883a 	mov	r8,r3
   1b5a8:	380b883a 	mov	r5,r7
   1b5ac:	400d883a 	mov	r6,r8
   1b5b0:	8145883a 	add	r2,r16,r5
   1b5b4:	1409803a 	cmpltu	r4,r2,r16
   1b5b8:	8987883a 	add	r3,r17,r6
   1b5bc:	20c9883a 	add	r4,r4,r3
   1b5c0:	2007883a 	mov	r3,r4
   1b5c4:	100f883a 	mov	r7,r2
   1b5c8:	1811883a 	mov	r8,r3
    VERIFY_BITS(t2, 26);
    VERIFY_BITS(c, 38);
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[3]
   1b5cc:	e13e6a17 	ldw	r4,-1624(fp)
   1b5d0:	e17e6b17 	ldw	r5,-1620(fp)
   1b5d4:	21c5883a 	add	r2,r4,r7
   1b5d8:	110d803a 	cmpltu	r6,r2,r4
   1b5dc:	2a07883a 	add	r3,r5,r8
   1b5e0:	30c9883a 	add	r4,r6,r3
   1b5e4:	2007883a 	mov	r3,r4
   1b5e8:	e0be6a15 	stw	r2,-1624(fp)
   1b5ec:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[2];
    VERIFY_BITS(c, 63);
   1b5f0:	e0be6a17 	ldw	r2,-1624(fp)
   1b5f4:	e0fe6b17 	ldw	r3,-1620(fp)
   1b5f8:	1804d7fa 	srli	r2,r3,31
   1b5fc:	10803fcc 	andi	r2,r2,255
   1b600:	10000d26 	beq	r2,zero,1b638 <secp256k1_fe_sqr_inner+0x1920>
   1b604:	d0a01617 	ldw	r2,-32680(gp)
   1b608:	10c00317 	ldw	r3,12(r2)
   1b60c:	008001b4 	movhi	r2,6
   1b610:	10acdf04 	addi	r2,r2,-19588
   1b614:	d8800015 	stw	r2,0(sp)
   1b618:	01c0d9c4 	movi	r7,871
   1b61c:	018001b4 	movhi	r6,6
   1b620:	31ab2d04 	addi	r6,r6,-21324
   1b624:	014001b4 	movhi	r5,6
   1b628:	296b3804 	addi	r5,r5,-21280
   1b62c:	1809883a 	mov	r4,r3
   1b630:	00452600 	call	45260 <fprintf>
   1b634:	00450340 	call	45034 <abort>
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)(a[4]*2) * a[9]
   1b638:	e0be8717 	ldw	r2,-1508(fp)
   1b63c:	10800404 	addi	r2,r2,16
   1b640:	10800017 	ldw	r2,0(r2)
   1b644:	1085883a 	add	r2,r2,r2
   1b648:	e0bf0c15 	stw	r2,-976(fp)
   1b64c:	e03f0d15 	stw	zero,-972(fp)
   1b650:	e0be8717 	ldw	r2,-1508(fp)
   1b654:	10800904 	addi	r2,r2,36
   1b658:	10800017 	ldw	r2,0(r2)
   1b65c:	e0bf0e15 	stw	r2,-968(fp)
   1b660:	e03f0f15 	stw	zero,-964(fp)
   1b664:	e1bf0e17 	ldw	r6,-968(fp)
   1b668:	e1ff0f17 	ldw	r7,-964(fp)
   1b66c:	e13f0c17 	ldw	r4,-976(fp)
   1b670:	e17f0d17 	ldw	r5,-972(fp)
   1b674:	00429400 	call	42940 <__muldi3>
   1b678:	1009883a 	mov	r4,r2
   1b67c:	180b883a 	mov	r5,r3
   1b680:	2021883a 	mov	r16,r4
   1b684:	2823883a 	mov	r17,r5
       + (uint64_t)(a[5]*2) * a[8]
   1b688:	e0be8717 	ldw	r2,-1508(fp)
   1b68c:	10800504 	addi	r2,r2,20
   1b690:	10800017 	ldw	r2,0(r2)
   1b694:	1085883a 	add	r2,r2,r2
   1b698:	e0bf1015 	stw	r2,-960(fp)
   1b69c:	e03f1115 	stw	zero,-956(fp)
   1b6a0:	e0be8717 	ldw	r2,-1508(fp)
   1b6a4:	10800804 	addi	r2,r2,32
   1b6a8:	10800017 	ldw	r2,0(r2)
   1b6ac:	e0bf1215 	stw	r2,-952(fp)
   1b6b0:	e03f1315 	stw	zero,-948(fp)
   1b6b4:	e1bf1217 	ldw	r6,-952(fp)
   1b6b8:	e1ff1317 	ldw	r7,-948(fp)
   1b6bc:	e13f1017 	ldw	r4,-960(fp)
   1b6c0:	e17f1117 	ldw	r5,-956(fp)
   1b6c4:	00429400 	call	42940 <__muldi3>
   1b6c8:	100f883a 	mov	r7,r2
   1b6cc:	1811883a 	mov	r8,r3
   1b6d0:	380b883a 	mov	r5,r7
   1b6d4:	400d883a 	mov	r6,r8
   1b6d8:	8145883a 	add	r2,r16,r5
   1b6dc:	1409803a 	cmpltu	r4,r2,r16
   1b6e0:	8987883a 	add	r3,r17,r6
   1b6e4:	20c9883a 	add	r4,r4,r3
   1b6e8:	2007883a 	mov	r3,r4
   1b6ec:	1021883a 	mov	r16,r2
   1b6f0:	1823883a 	mov	r17,r3
       + (uint64_t)(a[6]*2) * a[7];
   1b6f4:	e0be8717 	ldw	r2,-1508(fp)
   1b6f8:	10800604 	addi	r2,r2,24
   1b6fc:	10800017 	ldw	r2,0(r2)
   1b700:	1085883a 	add	r2,r2,r2
   1b704:	e0bf1415 	stw	r2,-944(fp)
   1b708:	e03f1515 	stw	zero,-940(fp)
   1b70c:	e0be8717 	ldw	r2,-1508(fp)
   1b710:	10800704 	addi	r2,r2,28
   1b714:	10800017 	ldw	r2,0(r2)
   1b718:	e0bf1615 	stw	r2,-936(fp)
   1b71c:	e03f1715 	stw	zero,-932(fp)
   1b720:	e1bf1617 	ldw	r6,-936(fp)
   1b724:	e1ff1717 	ldw	r7,-932(fp)
   1b728:	e13f1417 	ldw	r4,-944(fp)
   1b72c:	e17f1517 	ldw	r5,-940(fp)
   1b730:	00429400 	call	42940 <__muldi3>
   1b734:	100f883a 	mov	r7,r2
   1b738:	1811883a 	mov	r8,r3
   1b73c:	380b883a 	mov	r5,r7
   1b740:	400d883a 	mov	r6,r8
   1b744:	8145883a 	add	r2,r16,r5
   1b748:	1409803a 	cmpltu	r4,r2,r16
   1b74c:	8987883a 	add	r3,r17,r6
   1b750:	20c9883a 	add	r4,r4,r3
   1b754:	2007883a 	mov	r3,r4
   1b758:	100f883a 	mov	r7,r2
   1b75c:	1811883a 	mov	r8,r3

    c += (uint64_t)(a[0]*2) * a[3]
       + (uint64_t)(a[1]*2) * a[2];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)(a[4]*2) * a[9]
   1b760:	e13e6717 	ldw	r4,-1636(fp)
   1b764:	e17e6817 	ldw	r5,-1632(fp)
   1b768:	21c5883a 	add	r2,r4,r7
   1b76c:	110d803a 	cmpltu	r6,r2,r4
   1b770:	2a07883a 	add	r3,r5,r8
   1b774:	30c9883a 	add	r4,r6,r3
   1b778:	2007883a 	mov	r3,r4
   1b77c:	e0be6715 	stw	r2,-1636(fp)
   1b780:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[5]*2) * a[8]
       + (uint64_t)(a[6]*2) * a[7];
    VERIFY_BITS(d, 63);
   1b784:	e0be6717 	ldw	r2,-1636(fp)
   1b788:	e0fe6817 	ldw	r3,-1632(fp)
   1b78c:	1804d7fa 	srli	r2,r3,31
   1b790:	10803fcc 	andi	r2,r2,255
   1b794:	10000d26 	beq	r2,zero,1b7cc <secp256k1_fe_sqr_inner+0x1ab4>
   1b798:	d0a01617 	ldw	r2,-32680(gp)
   1b79c:	10c00317 	ldw	r3,12(r2)
   1b7a0:	008001b4 	movhi	r2,6
   1b7a4:	10ac8704 	addi	r2,r2,-19940
   1b7a8:	d8800015 	stw	r2,0(sp)
   1b7ac:	01c0db04 	movi	r7,876
   1b7b0:	018001b4 	movhi	r6,6
   1b7b4:	31ab2d04 	addi	r6,r6,-21324
   1b7b8:	014001b4 	movhi	r5,6
   1b7bc:	296b3804 	addi	r5,r5,-21280
   1b7c0:	1809883a 	mov	r4,r3
   1b7c4:	00452600 	call	45260 <fprintf>
   1b7c8:	00450340 	call	45034 <abort>
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    u3 = d & M; d >>= 26; c += u3 * R0;
   1b7cc:	e0be6417 	ldw	r2,-1648(fp)
   1b7d0:	e0bf1815 	stw	r2,-928(fp)
   1b7d4:	e03f1915 	stw	zero,-924(fp)
   1b7d8:	e0be6717 	ldw	r2,-1636(fp)
   1b7dc:	e0ff1817 	ldw	r3,-928(fp)
   1b7e0:	10c4703a 	and	r2,r2,r3
   1b7e4:	e0be7515 	stw	r2,-1580(fp)
   1b7e8:	e0be6817 	ldw	r2,-1632(fp)
   1b7ec:	e13f1917 	ldw	r4,-924(fp)
   1b7f0:	1104703a 	and	r2,r2,r4
   1b7f4:	e0be7615 	stw	r2,-1576(fp)
   1b7f8:	e0be6817 	ldw	r2,-1632(fp)
   1b7fc:	100691ba 	slli	r3,r2,6
   1b800:	e0be6717 	ldw	r2,-1636(fp)
   1b804:	1004d6ba 	srli	r2,r2,26
   1b808:	10c4b03a 	or	r2,r2,r3
   1b80c:	e0be6715 	stw	r2,-1636(fp)
   1b810:	e0be6817 	ldw	r2,-1632(fp)
   1b814:	1004d6ba 	srli	r2,r2,26
   1b818:	e0be6815 	stw	r2,-1632(fp)
   1b81c:	e0be6517 	ldw	r2,-1644(fp)
   1b820:	e0bf1a15 	stw	r2,-920(fp)
   1b824:	e03f1b15 	stw	zero,-916(fp)
   1b828:	e1be7517 	ldw	r6,-1580(fp)
   1b82c:	e1fe7617 	ldw	r7,-1576(fp)
   1b830:	e13f1a17 	ldw	r4,-920(fp)
   1b834:	e17f1b17 	ldw	r5,-916(fp)
   1b838:	00429400 	call	42940 <__muldi3>
   1b83c:	1009883a 	mov	r4,r2
   1b840:	180b883a 	mov	r5,r3
   1b844:	200f883a 	mov	r7,r4
   1b848:	2811883a 	mov	r8,r5
   1b84c:	e13e6a17 	ldw	r4,-1624(fp)
   1b850:	e17e6b17 	ldw	r5,-1620(fp)
   1b854:	21c5883a 	add	r2,r4,r7
   1b858:	110d803a 	cmpltu	r6,r2,r4
   1b85c:	2a07883a 	add	r3,r5,r8
   1b860:	30c9883a 	add	r4,r6,r3
   1b864:	2007883a 	mov	r3,r4
   1b868:	e0be6a15 	stw	r2,-1624(fp)
   1b86c:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u3, 26);
   1b870:	e0be7617 	ldw	r2,-1576(fp)
   1b874:	100691ba 	slli	r3,r2,6
   1b878:	e0be7517 	ldw	r2,-1580(fp)
   1b87c:	1004d6ba 	srli	r2,r2,26
   1b880:	e0bf1c15 	stw	r2,-912(fp)
   1b884:	e1bf1c17 	ldw	r6,-912(fp)
   1b888:	1986b03a 	or	r3,r3,r6
   1b88c:	e0ff1c15 	stw	r3,-912(fp)
   1b890:	e0be7617 	ldw	r2,-1576(fp)
   1b894:	1004d6ba 	srli	r2,r2,26
   1b898:	e0bf1d15 	stw	r2,-908(fp)
   1b89c:	e1ff1c17 	ldw	r7,-912(fp)
   1b8a0:	e0ff1d17 	ldw	r3,-908(fp)
   1b8a4:	38c4b03a 	or	r2,r7,r3
   1b8a8:	1004c03a 	cmpne	r2,r2,zero
   1b8ac:	10803fcc 	andi	r2,r2,255
   1b8b0:	10000d26 	beq	r2,zero,1b8e8 <secp256k1_fe_sqr_inner+0x1bd0>
   1b8b4:	d0a01617 	ldw	r2,-32680(gp)
   1b8b8:	10c00317 	ldw	r3,12(r2)
   1b8bc:	008001b4 	movhi	r2,6
   1b8c0:	10ad1604 	addi	r2,r2,-19368
   1b8c4:	d8800015 	stw	r2,0(sp)
   1b8c8:	01c0dbc4 	movi	r7,879
   1b8cc:	018001b4 	movhi	r6,6
   1b8d0:	31ab2d04 	addi	r6,r6,-21324
   1b8d4:	014001b4 	movhi	r5,6
   1b8d8:	296b3804 	addi	r5,r5,-21280
   1b8dc:	1809883a 	mov	r4,r3
   1b8e0:	00452600 	call	45260 <fprintf>
   1b8e4:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 37);
   1b8e8:	e0be6817 	ldw	r2,-1632(fp)
   1b8ec:	1004d17a 	srli	r2,r2,5
   1b8f0:	e0bf1e15 	stw	r2,-904(fp)
   1b8f4:	e03f1f15 	stw	zero,-900(fp)
   1b8f8:	e13f1e17 	ldw	r4,-904(fp)
   1b8fc:	e1bf1f17 	ldw	r6,-900(fp)
   1b900:	2184b03a 	or	r2,r4,r6
   1b904:	1004c03a 	cmpne	r2,r2,zero
   1b908:	10803fcc 	andi	r2,r2,255
   1b90c:	10000d26 	beq	r2,zero,1b944 <secp256k1_fe_sqr_inner+0x1c2c>
   1b910:	d0a01617 	ldw	r2,-32680(gp)
   1b914:	10c00317 	ldw	r3,12(r2)
   1b918:	008001b4 	movhi	r2,6
   1b91c:	10ac9d04 	addi	r2,r2,-19852
   1b920:	d8800015 	stw	r2,0(sp)
   1b924:	01c0dc04 	movi	r7,880
   1b928:	018001b4 	movhi	r6,6
   1b92c:	31ab2d04 	addi	r6,r6,-21324
   1b930:	014001b4 	movhi	r5,6
   1b934:	296b3804 	addi	r5,r5,-21280
   1b938:	1809883a 	mov	r4,r3
   1b93c:	00452600 	call	45260 <fprintf>
   1b940:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u3 0 0 0 t9 0 0 0 0 0 c-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    t3 = c & M; c >>= 26; c += u3 * R1;
   1b944:	e0fe6a17 	ldw	r3,-1624(fp)
   1b948:	e0be6417 	ldw	r2,-1648(fp)
   1b94c:	1884703a 	and	r2,r3,r2
   1b950:	e0be7715 	stw	r2,-1572(fp)
   1b954:	e0be6b17 	ldw	r2,-1620(fp)
   1b958:	100691ba 	slli	r3,r2,6
   1b95c:	e0be6a17 	ldw	r2,-1624(fp)
   1b960:	1004d6ba 	srli	r2,r2,26
   1b964:	10c4b03a 	or	r2,r2,r3
   1b968:	e0be6a15 	stw	r2,-1624(fp)
   1b96c:	e0be6b17 	ldw	r2,-1620(fp)
   1b970:	1004d6ba 	srli	r2,r2,26
   1b974:	e0be6b15 	stw	r2,-1620(fp)
   1b978:	e0be6617 	ldw	r2,-1640(fp)
   1b97c:	e0bf2015 	stw	r2,-896(fp)
   1b980:	e03f2115 	stw	zero,-892(fp)
   1b984:	e1be7517 	ldw	r6,-1580(fp)
   1b988:	e1fe7617 	ldw	r7,-1576(fp)
   1b98c:	e13f2017 	ldw	r4,-896(fp)
   1b990:	e17f2117 	ldw	r5,-892(fp)
   1b994:	00429400 	call	42940 <__muldi3>
   1b998:	1009883a 	mov	r4,r2
   1b99c:	180b883a 	mov	r5,r3
   1b9a0:	200f883a 	mov	r7,r4
   1b9a4:	2811883a 	mov	r8,r5
   1b9a8:	e13e6a17 	ldw	r4,-1624(fp)
   1b9ac:	e17e6b17 	ldw	r5,-1620(fp)
   1b9b0:	21c5883a 	add	r2,r4,r7
   1b9b4:	110d803a 	cmpltu	r6,r2,r4
   1b9b8:	2a07883a 	add	r3,r5,r8
   1b9bc:	30c9883a 	add	r4,r6,r3
   1b9c0:	2007883a 	mov	r3,r4
   1b9c4:	e0be6a15 	stw	r2,-1624(fp)
   1b9c8:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t3, 26);
   1b9cc:	e0be7717 	ldw	r2,-1572(fp)
   1b9d0:	1004d6ba 	srli	r2,r2,26
   1b9d4:	1004c03a 	cmpne	r2,r2,zero
   1b9d8:	10803fcc 	andi	r2,r2,255
   1b9dc:	10000d26 	beq	r2,zero,1ba14 <secp256k1_fe_sqr_inner+0x1cfc>
   1b9e0:	d0a01617 	ldw	r2,-32680(gp)
   1b9e4:	10c00317 	ldw	r3,12(r2)
   1b9e8:	008001b4 	movhi	r2,6
   1b9ec:	10ad2104 	addi	r2,r2,-19324
   1b9f0:	d8800015 	stw	r2,0(sp)
   1b9f4:	01c0dd04 	movi	r7,884
   1b9f8:	018001b4 	movhi	r6,6
   1b9fc:	31ab2d04 	addi	r6,r6,-21324
   1ba00:	014001b4 	movhi	r5,6
   1ba04:	296b3804 	addi	r5,r5,-21280
   1ba08:	1809883a 	mov	r4,r3
   1ba0c:	00452600 	call	45260 <fprintf>
   1ba10:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   1ba14:	e0be6b17 	ldw	r2,-1620(fp)
   1ba18:	1004d1fa 	srli	r2,r2,7
   1ba1c:	e0bf2215 	stw	r2,-888(fp)
   1ba20:	e03f2315 	stw	zero,-884(fp)
   1ba24:	e1ff2217 	ldw	r7,-888(fp)
   1ba28:	e0ff2317 	ldw	r3,-884(fp)
   1ba2c:	38c4b03a 	or	r2,r7,r3
   1ba30:	1004c03a 	cmpne	r2,r2,zero
   1ba34:	10803fcc 	andi	r2,r2,255
   1ba38:	10000d26 	beq	r2,zero,1ba70 <secp256k1_fe_sqr_inner+0x1d58>
   1ba3c:	d0a01617 	ldw	r2,-32680(gp)
   1ba40:	10c00317 	ldw	r3,12(r2)
   1ba44:	008001b4 	movhi	r2,6
   1ba48:	10ad2c04 	addi	r2,r2,-19280
   1ba4c:	d8800015 	stw	r2,0(sp)
   1ba50:	01c0dd44 	movi	r7,885
   1ba54:	018001b4 	movhi	r6,6
   1ba58:	31ab2d04 	addi	r6,r6,-21324
   1ba5c:	014001b4 	movhi	r5,6
   1ba60:	296b3804 	addi	r5,r5,-21280
   1ba64:	1809883a 	mov	r4,r3
   1ba68:	00452600 	call	45260 <fprintf>
   1ba6c:	00450340 	call	45034 <abort>
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[4]
   1ba70:	e0be8717 	ldw	r2,-1508(fp)
   1ba74:	10800017 	ldw	r2,0(r2)
   1ba78:	1085883a 	add	r2,r2,r2
   1ba7c:	e0bf2415 	stw	r2,-880(fp)
   1ba80:	e03f2515 	stw	zero,-876(fp)
   1ba84:	e0be8717 	ldw	r2,-1508(fp)
   1ba88:	10800404 	addi	r2,r2,16
   1ba8c:	10800017 	ldw	r2,0(r2)
   1ba90:	e0bf2615 	stw	r2,-872(fp)
   1ba94:	e03f2715 	stw	zero,-868(fp)
   1ba98:	e1bf2617 	ldw	r6,-872(fp)
   1ba9c:	e1ff2717 	ldw	r7,-868(fp)
   1baa0:	e13f2417 	ldw	r4,-880(fp)
   1baa4:	e17f2517 	ldw	r5,-876(fp)
   1baa8:	00429400 	call	42940 <__muldi3>
   1baac:	1009883a 	mov	r4,r2
   1bab0:	180b883a 	mov	r5,r3
   1bab4:	2021883a 	mov	r16,r4
   1bab8:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[3]
   1babc:	e0be8717 	ldw	r2,-1508(fp)
   1bac0:	10800104 	addi	r2,r2,4
   1bac4:	10800017 	ldw	r2,0(r2)
   1bac8:	1085883a 	add	r2,r2,r2
   1bacc:	e0bf2815 	stw	r2,-864(fp)
   1bad0:	e03f2915 	stw	zero,-860(fp)
   1bad4:	e0be8717 	ldw	r2,-1508(fp)
   1bad8:	10800304 	addi	r2,r2,12
   1badc:	10800017 	ldw	r2,0(r2)
   1bae0:	e0bf2a15 	stw	r2,-856(fp)
   1bae4:	e03f2b15 	stw	zero,-852(fp)
   1bae8:	e1bf2a17 	ldw	r6,-856(fp)
   1baec:	e1ff2b17 	ldw	r7,-852(fp)
   1baf0:	e13f2817 	ldw	r4,-864(fp)
   1baf4:	e17f2917 	ldw	r5,-860(fp)
   1baf8:	00429400 	call	42940 <__muldi3>
   1bafc:	100f883a 	mov	r7,r2
   1bb00:	1811883a 	mov	r8,r3
   1bb04:	380b883a 	mov	r5,r7
   1bb08:	400d883a 	mov	r6,r8
   1bb0c:	8145883a 	add	r2,r16,r5
   1bb10:	1409803a 	cmpltu	r4,r2,r16
   1bb14:	8987883a 	add	r3,r17,r6
   1bb18:	20c9883a 	add	r4,r4,r3
   1bb1c:	2007883a 	mov	r3,r4
   1bb20:	1021883a 	mov	r16,r2
   1bb24:	1823883a 	mov	r17,r3
       + (uint64_t)a[2] * a[2];
   1bb28:	e0be8717 	ldw	r2,-1508(fp)
   1bb2c:	10800204 	addi	r2,r2,8
   1bb30:	10800017 	ldw	r2,0(r2)
   1bb34:	e0bf2c15 	stw	r2,-848(fp)
   1bb38:	e03f2d15 	stw	zero,-844(fp)
   1bb3c:	e0be8717 	ldw	r2,-1508(fp)
   1bb40:	10800204 	addi	r2,r2,8
   1bb44:	10800017 	ldw	r2,0(r2)
   1bb48:	e0bf2e15 	stw	r2,-840(fp)
   1bb4c:	e03f2f15 	stw	zero,-836(fp)
   1bb50:	e1bf2e17 	ldw	r6,-840(fp)
   1bb54:	e1ff2f17 	ldw	r7,-836(fp)
   1bb58:	e13f2c17 	ldw	r4,-848(fp)
   1bb5c:	e17f2d17 	ldw	r5,-844(fp)
   1bb60:	00429400 	call	42940 <__muldi3>
   1bb64:	100f883a 	mov	r7,r2
   1bb68:	1811883a 	mov	r8,r3
   1bb6c:	380b883a 	mov	r5,r7
   1bb70:	400d883a 	mov	r6,r8
   1bb74:	8145883a 	add	r2,r16,r5
   1bb78:	1409803a 	cmpltu	r4,r2,r16
   1bb7c:	8987883a 	add	r3,r17,r6
   1bb80:	20c9883a 	add	r4,r4,r3
   1bb84:	2007883a 	mov	r3,r4
   1bb88:	100f883a 	mov	r7,r2
   1bb8c:	1811883a 	mov	r8,r3
    VERIFY_BITS(t3, 26);
    VERIFY_BITS(c, 39);
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[4]
   1bb90:	e13e6a17 	ldw	r4,-1624(fp)
   1bb94:	e17e6b17 	ldw	r5,-1620(fp)
   1bb98:	21c5883a 	add	r2,r4,r7
   1bb9c:	110d803a 	cmpltu	r6,r2,r4
   1bba0:	2a07883a 	add	r3,r5,r8
   1bba4:	30c9883a 	add	r4,r6,r3
   1bba8:	2007883a 	mov	r3,r4
   1bbac:	e0be6a15 	stw	r2,-1624(fp)
   1bbb0:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[3]
       + (uint64_t)a[2] * a[2];
    VERIFY_BITS(c, 63);
   1bbb4:	e0be6a17 	ldw	r2,-1624(fp)
   1bbb8:	e0fe6b17 	ldw	r3,-1620(fp)
   1bbbc:	1804d7fa 	srli	r2,r3,31
   1bbc0:	10803fcc 	andi	r2,r2,255
   1bbc4:	10000d26 	beq	r2,zero,1bbfc <secp256k1_fe_sqr_inner+0x1ee4>
   1bbc8:	d0a01617 	ldw	r2,-32680(gp)
   1bbcc:	10c00317 	ldw	r3,12(r2)
   1bbd0:	008001b4 	movhi	r2,6
   1bbd4:	10acdf04 	addi	r2,r2,-19588
   1bbd8:	d8800015 	stw	r2,0(sp)
   1bbdc:	01c0df04 	movi	r7,892
   1bbe0:	018001b4 	movhi	r6,6
   1bbe4:	31ab2d04 	addi	r6,r6,-21324
   1bbe8:	014001b4 	movhi	r5,6
   1bbec:	296b3804 	addi	r5,r5,-21280
   1bbf0:	1809883a 	mov	r4,r3
   1bbf4:	00452600 	call	45260 <fprintf>
   1bbf8:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[5]*2) * a[9]
   1bbfc:	e0be8717 	ldw	r2,-1508(fp)
   1bc00:	10800504 	addi	r2,r2,20
   1bc04:	10800017 	ldw	r2,0(r2)
   1bc08:	1085883a 	add	r2,r2,r2
   1bc0c:	e0bf3015 	stw	r2,-832(fp)
   1bc10:	e03f3115 	stw	zero,-828(fp)
   1bc14:	e0be8717 	ldw	r2,-1508(fp)
   1bc18:	10800904 	addi	r2,r2,36
   1bc1c:	10800017 	ldw	r2,0(r2)
   1bc20:	e0bf3215 	stw	r2,-824(fp)
   1bc24:	e03f3315 	stw	zero,-820(fp)
   1bc28:	e1bf3217 	ldw	r6,-824(fp)
   1bc2c:	e1ff3317 	ldw	r7,-820(fp)
   1bc30:	e13f3017 	ldw	r4,-832(fp)
   1bc34:	e17f3117 	ldw	r5,-828(fp)
   1bc38:	00429400 	call	42940 <__muldi3>
   1bc3c:	1009883a 	mov	r4,r2
   1bc40:	180b883a 	mov	r5,r3
   1bc44:	2021883a 	mov	r16,r4
   1bc48:	2823883a 	mov	r17,r5
       + (uint64_t)(a[6]*2) * a[8]
   1bc4c:	e0be8717 	ldw	r2,-1508(fp)
   1bc50:	10800604 	addi	r2,r2,24
   1bc54:	10800017 	ldw	r2,0(r2)
   1bc58:	1085883a 	add	r2,r2,r2
   1bc5c:	e0bf3415 	stw	r2,-816(fp)
   1bc60:	e03f3515 	stw	zero,-812(fp)
   1bc64:	e0be8717 	ldw	r2,-1508(fp)
   1bc68:	10800804 	addi	r2,r2,32
   1bc6c:	10800017 	ldw	r2,0(r2)
   1bc70:	e0bf3615 	stw	r2,-808(fp)
   1bc74:	e03f3715 	stw	zero,-804(fp)
   1bc78:	e1bf3617 	ldw	r6,-808(fp)
   1bc7c:	e1ff3717 	ldw	r7,-804(fp)
   1bc80:	e13f3417 	ldw	r4,-816(fp)
   1bc84:	e17f3517 	ldw	r5,-812(fp)
   1bc88:	00429400 	call	42940 <__muldi3>
   1bc8c:	100f883a 	mov	r7,r2
   1bc90:	1811883a 	mov	r8,r3
   1bc94:	380b883a 	mov	r5,r7
   1bc98:	400d883a 	mov	r6,r8
   1bc9c:	8145883a 	add	r2,r16,r5
   1bca0:	1409803a 	cmpltu	r4,r2,r16
   1bca4:	8987883a 	add	r3,r17,r6
   1bca8:	20c9883a 	add	r4,r4,r3
   1bcac:	2007883a 	mov	r3,r4
   1bcb0:	1021883a 	mov	r16,r2
   1bcb4:	1823883a 	mov	r17,r3
       + (uint64_t)a[7] * a[7];
   1bcb8:	e0be8717 	ldw	r2,-1508(fp)
   1bcbc:	10800704 	addi	r2,r2,28
   1bcc0:	10800017 	ldw	r2,0(r2)
   1bcc4:	e0bf3815 	stw	r2,-800(fp)
   1bcc8:	e03f3915 	stw	zero,-796(fp)
   1bccc:	e0be8717 	ldw	r2,-1508(fp)
   1bcd0:	10800704 	addi	r2,r2,28
   1bcd4:	10800017 	ldw	r2,0(r2)
   1bcd8:	e0bf3a15 	stw	r2,-792(fp)
   1bcdc:	e03f3b15 	stw	zero,-788(fp)
   1bce0:	e1bf3a17 	ldw	r6,-792(fp)
   1bce4:	e1ff3b17 	ldw	r7,-788(fp)
   1bce8:	e13f3817 	ldw	r4,-800(fp)
   1bcec:	e17f3917 	ldw	r5,-796(fp)
   1bcf0:	00429400 	call	42940 <__muldi3>
   1bcf4:	100f883a 	mov	r7,r2
   1bcf8:	1811883a 	mov	r8,r3
   1bcfc:	380b883a 	mov	r5,r7
   1bd00:	400d883a 	mov	r6,r8
   1bd04:	8145883a 	add	r2,r16,r5
   1bd08:	1409803a 	cmpltu	r4,r2,r16
   1bd0c:	8987883a 	add	r3,r17,r6
   1bd10:	20c9883a 	add	r4,r4,r3
   1bd14:	2007883a 	mov	r3,r4
   1bd18:	100f883a 	mov	r7,r2
   1bd1c:	1811883a 	mov	r8,r3
    c += (uint64_t)(a[0]*2) * a[4]
       + (uint64_t)(a[1]*2) * a[3]
       + (uint64_t)a[2] * a[2];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[5]*2) * a[9]
   1bd20:	e13e6717 	ldw	r4,-1636(fp)
   1bd24:	e17e6817 	ldw	r5,-1632(fp)
   1bd28:	21c5883a 	add	r2,r4,r7
   1bd2c:	110d803a 	cmpltu	r6,r2,r4
   1bd30:	2a07883a 	add	r3,r5,r8
   1bd34:	30c9883a 	add	r4,r6,r3
   1bd38:	2007883a 	mov	r3,r4
   1bd3c:	e0be6715 	stw	r2,-1636(fp)
   1bd40:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[6]*2) * a[8]
       + (uint64_t)a[7] * a[7];
    VERIFY_BITS(d, 62);
   1bd44:	e0be6817 	ldw	r2,-1632(fp)
   1bd48:	1004d7ba 	srli	r2,r2,30
   1bd4c:	e0bf3c15 	stw	r2,-784(fp)
   1bd50:	e03f3d15 	stw	zero,-780(fp)
   1bd54:	e13f3c17 	ldw	r4,-784(fp)
   1bd58:	e1bf3d17 	ldw	r6,-780(fp)
   1bd5c:	2184b03a 	or	r2,r4,r6
   1bd60:	1004c03a 	cmpne	r2,r2,zero
   1bd64:	10803fcc 	andi	r2,r2,255
   1bd68:	10000d26 	beq	r2,zero,1bda0 <secp256k1_fe_sqr_inner+0x2088>
   1bd6c:	d0a01617 	ldw	r2,-32680(gp)
   1bd70:	10c00317 	ldw	r3,12(r2)
   1bd74:	008001b4 	movhi	r2,6
   1bd78:	10ad3704 	addi	r2,r2,-19236
   1bd7c:	d8800015 	stw	r2,0(sp)
   1bd80:	01c0e044 	movi	r7,897
   1bd84:	018001b4 	movhi	r6,6
   1bd88:	31ab2d04 	addi	r6,r6,-21324
   1bd8c:	014001b4 	movhi	r5,6
   1bd90:	296b3804 	addi	r5,r5,-21280
   1bd94:	1809883a 	mov	r4,r3
   1bd98:	00452600 	call	45260 <fprintf>
   1bd9c:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    u4 = d & M; d >>= 26; c += u4 * R0;
   1bda0:	e0be6417 	ldw	r2,-1648(fp)
   1bda4:	e0bf3e15 	stw	r2,-776(fp)
   1bda8:	e03f3f15 	stw	zero,-772(fp)
   1bdac:	e0be6717 	ldw	r2,-1636(fp)
   1bdb0:	e1ff3e17 	ldw	r7,-776(fp)
   1bdb4:	11c4703a 	and	r2,r2,r7
   1bdb8:	e0be7815 	stw	r2,-1568(fp)
   1bdbc:	e0be6817 	ldw	r2,-1632(fp)
   1bdc0:	e0ff3f17 	ldw	r3,-772(fp)
   1bdc4:	10c4703a 	and	r2,r2,r3
   1bdc8:	e0be7915 	stw	r2,-1564(fp)
   1bdcc:	e0be6817 	ldw	r2,-1632(fp)
   1bdd0:	100691ba 	slli	r3,r2,6
   1bdd4:	e0be6717 	ldw	r2,-1636(fp)
   1bdd8:	1004d6ba 	srli	r2,r2,26
   1bddc:	10c4b03a 	or	r2,r2,r3
   1bde0:	e0be6715 	stw	r2,-1636(fp)
   1bde4:	e0be6817 	ldw	r2,-1632(fp)
   1bde8:	1004d6ba 	srli	r2,r2,26
   1bdec:	e0be6815 	stw	r2,-1632(fp)
   1bdf0:	e0be6517 	ldw	r2,-1644(fp)
   1bdf4:	e0bf4015 	stw	r2,-768(fp)
   1bdf8:	e03f4115 	stw	zero,-764(fp)
   1bdfc:	e1be7817 	ldw	r6,-1568(fp)
   1be00:	e1fe7917 	ldw	r7,-1564(fp)
   1be04:	e13f4017 	ldw	r4,-768(fp)
   1be08:	e17f4117 	ldw	r5,-764(fp)
   1be0c:	00429400 	call	42940 <__muldi3>
   1be10:	1009883a 	mov	r4,r2
   1be14:	180b883a 	mov	r5,r3
   1be18:	200f883a 	mov	r7,r4
   1be1c:	2811883a 	mov	r8,r5
   1be20:	e13e6a17 	ldw	r4,-1624(fp)
   1be24:	e17e6b17 	ldw	r5,-1620(fp)
   1be28:	21c5883a 	add	r2,r4,r7
   1be2c:	110d803a 	cmpltu	r6,r2,r4
   1be30:	2a07883a 	add	r3,r5,r8
   1be34:	30c9883a 	add	r4,r6,r3
   1be38:	2007883a 	mov	r3,r4
   1be3c:	e0be6a15 	stw	r2,-1624(fp)
   1be40:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u4, 26);
   1be44:	e0be7917 	ldw	r2,-1564(fp)
   1be48:	100691ba 	slli	r3,r2,6
   1be4c:	e0be7817 	ldw	r2,-1568(fp)
   1be50:	1004d6ba 	srli	r2,r2,26
   1be54:	e0bf4215 	stw	r2,-760(fp)
   1be58:	e13f4217 	ldw	r4,-760(fp)
   1be5c:	1906b03a 	or	r3,r3,r4
   1be60:	e0ff4215 	stw	r3,-760(fp)
   1be64:	e0be7917 	ldw	r2,-1564(fp)
   1be68:	1004d6ba 	srli	r2,r2,26
   1be6c:	e0bf4315 	stw	r2,-756(fp)
   1be70:	e1bf4217 	ldw	r6,-760(fp)
   1be74:	e1ff4317 	ldw	r7,-756(fp)
   1be78:	31c4b03a 	or	r2,r6,r7
   1be7c:	1004c03a 	cmpne	r2,r2,zero
   1be80:	10803fcc 	andi	r2,r2,255
   1be84:	10000d26 	beq	r2,zero,1bebc <secp256k1_fe_sqr_inner+0x21a4>
   1be88:	d0a01617 	ldw	r2,-32680(gp)
   1be8c:	10c00317 	ldw	r3,12(r2)
   1be90:	008001b4 	movhi	r2,6
   1be94:	10ad4204 	addi	r2,r2,-19192
   1be98:	d8800015 	stw	r2,0(sp)
   1be9c:	01c0e104 	movi	r7,900
   1bea0:	018001b4 	movhi	r6,6
   1bea4:	31ab2d04 	addi	r6,r6,-21324
   1bea8:	014001b4 	movhi	r5,6
   1beac:	296b3804 	addi	r5,r5,-21280
   1beb0:	1809883a 	mov	r4,r3
   1beb4:	00452600 	call	45260 <fprintf>
   1beb8:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 36);
   1bebc:	e0be6817 	ldw	r2,-1632(fp)
   1bec0:	1004d13a 	srli	r2,r2,4
   1bec4:	e0bf4415 	stw	r2,-752(fp)
   1bec8:	e03f4515 	stw	zero,-748(fp)
   1becc:	e0ff4417 	ldw	r3,-752(fp)
   1bed0:	e13f4517 	ldw	r4,-748(fp)
   1bed4:	1904b03a 	or	r2,r3,r4
   1bed8:	1004c03a 	cmpne	r2,r2,zero
   1bedc:	10803fcc 	andi	r2,r2,255
   1bee0:	10000d26 	beq	r2,zero,1bf18 <secp256k1_fe_sqr_inner+0x2200>
   1bee4:	d0a01617 	ldw	r2,-32680(gp)
   1bee8:	10c00317 	ldw	r3,12(r2)
   1beec:	008001b4 	movhi	r2,6
   1bef0:	10ad4d04 	addi	r2,r2,-19148
   1bef4:	d8800015 	stw	r2,0(sp)
   1bef8:	01c0e144 	movi	r7,901
   1befc:	018001b4 	movhi	r6,6
   1bf00:	31ab2d04 	addi	r6,r6,-21324
   1bf04:	014001b4 	movhi	r5,6
   1bf08:	296b3804 	addi	r5,r5,-21280
   1bf0c:	1809883a 	mov	r4,r3
   1bf10:	00452600 	call	45260 <fprintf>
   1bf14:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u4 0 0 0 0 t9 0 0 0 0 c-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    t4 = c & M; c >>= 26; c += u4 * R1;
   1bf18:	e0fe6a17 	ldw	r3,-1624(fp)
   1bf1c:	e0be6417 	ldw	r2,-1648(fp)
   1bf20:	1884703a 	and	r2,r3,r2
   1bf24:	e0be7a15 	stw	r2,-1560(fp)
   1bf28:	e0be6b17 	ldw	r2,-1620(fp)
   1bf2c:	100691ba 	slli	r3,r2,6
   1bf30:	e0be6a17 	ldw	r2,-1624(fp)
   1bf34:	1004d6ba 	srli	r2,r2,26
   1bf38:	10c4b03a 	or	r2,r2,r3
   1bf3c:	e0be6a15 	stw	r2,-1624(fp)
   1bf40:	e0be6b17 	ldw	r2,-1620(fp)
   1bf44:	1004d6ba 	srli	r2,r2,26
   1bf48:	e0be6b15 	stw	r2,-1620(fp)
   1bf4c:	e0be6617 	ldw	r2,-1640(fp)
   1bf50:	e0bf4615 	stw	r2,-744(fp)
   1bf54:	e03f4715 	stw	zero,-740(fp)
   1bf58:	e1be7817 	ldw	r6,-1568(fp)
   1bf5c:	e1fe7917 	ldw	r7,-1564(fp)
   1bf60:	e13f4617 	ldw	r4,-744(fp)
   1bf64:	e17f4717 	ldw	r5,-740(fp)
   1bf68:	00429400 	call	42940 <__muldi3>
   1bf6c:	1009883a 	mov	r4,r2
   1bf70:	180b883a 	mov	r5,r3
   1bf74:	200f883a 	mov	r7,r4
   1bf78:	2811883a 	mov	r8,r5
   1bf7c:	e13e6a17 	ldw	r4,-1624(fp)
   1bf80:	e17e6b17 	ldw	r5,-1620(fp)
   1bf84:	21c5883a 	add	r2,r4,r7
   1bf88:	110d803a 	cmpltu	r6,r2,r4
   1bf8c:	2a07883a 	add	r3,r5,r8
   1bf90:	30c9883a 	add	r4,r6,r3
   1bf94:	2007883a 	mov	r3,r4
   1bf98:	e0be6a15 	stw	r2,-1624(fp)
   1bf9c:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t4, 26);
   1bfa0:	e0be7a17 	ldw	r2,-1560(fp)
   1bfa4:	1004d6ba 	srli	r2,r2,26
   1bfa8:	1004c03a 	cmpne	r2,r2,zero
   1bfac:	10803fcc 	andi	r2,r2,255
   1bfb0:	10000d26 	beq	r2,zero,1bfe8 <secp256k1_fe_sqr_inner+0x22d0>
   1bfb4:	d0a01617 	ldw	r2,-32680(gp)
   1bfb8:	10c00317 	ldw	r3,12(r2)
   1bfbc:	008001b4 	movhi	r2,6
   1bfc0:	10ad5804 	addi	r2,r2,-19104
   1bfc4:	d8800015 	stw	r2,0(sp)
   1bfc8:	01c0e244 	movi	r7,905
   1bfcc:	018001b4 	movhi	r6,6
   1bfd0:	31ab2d04 	addi	r6,r6,-21324
   1bfd4:	014001b4 	movhi	r5,6
   1bfd8:	296b3804 	addi	r5,r5,-21280
   1bfdc:	1809883a 	mov	r4,r3
   1bfe0:	00452600 	call	45260 <fprintf>
   1bfe4:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   1bfe8:	e0be6b17 	ldw	r2,-1620(fp)
   1bfec:	1004d1fa 	srli	r2,r2,7
   1bff0:	e0bf4815 	stw	r2,-736(fp)
   1bff4:	e03f4915 	stw	zero,-732(fp)
   1bff8:	e1bf4817 	ldw	r6,-736(fp)
   1bffc:	e1ff4917 	ldw	r7,-732(fp)
   1c000:	31c4b03a 	or	r2,r6,r7
   1c004:	1004c03a 	cmpne	r2,r2,zero
   1c008:	10803fcc 	andi	r2,r2,255
   1c00c:	10000d26 	beq	r2,zero,1c044 <secp256k1_fe_sqr_inner+0x232c>
   1c010:	d0a01617 	ldw	r2,-32680(gp)
   1c014:	10c00317 	ldw	r3,12(r2)
   1c018:	008001b4 	movhi	r2,6
   1c01c:	10ad2c04 	addi	r2,r2,-19280
   1c020:	d8800015 	stw	r2,0(sp)
   1c024:	01c0e284 	movi	r7,906
   1c028:	018001b4 	movhi	r6,6
   1c02c:	31ab2d04 	addi	r6,r6,-21324
   1c030:	014001b4 	movhi	r5,6
   1c034:	296b3804 	addi	r5,r5,-21280
   1c038:	1809883a 	mov	r4,r3
   1c03c:	00452600 	call	45260 <fprintf>
   1c040:	00450340 	call	45034 <abort>
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[5]
   1c044:	e0be8717 	ldw	r2,-1508(fp)
   1c048:	10800017 	ldw	r2,0(r2)
   1c04c:	1085883a 	add	r2,r2,r2
   1c050:	e0bf4a15 	stw	r2,-728(fp)
   1c054:	e03f4b15 	stw	zero,-724(fp)
   1c058:	e0be8717 	ldw	r2,-1508(fp)
   1c05c:	10800504 	addi	r2,r2,20
   1c060:	10800017 	ldw	r2,0(r2)
   1c064:	e0bf4c15 	stw	r2,-720(fp)
   1c068:	e03f4d15 	stw	zero,-716(fp)
   1c06c:	e1bf4c17 	ldw	r6,-720(fp)
   1c070:	e1ff4d17 	ldw	r7,-716(fp)
   1c074:	e13f4a17 	ldw	r4,-728(fp)
   1c078:	e17f4b17 	ldw	r5,-724(fp)
   1c07c:	00429400 	call	42940 <__muldi3>
   1c080:	1009883a 	mov	r4,r2
   1c084:	180b883a 	mov	r5,r3
   1c088:	2021883a 	mov	r16,r4
   1c08c:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[4]
   1c090:	e0be8717 	ldw	r2,-1508(fp)
   1c094:	10800104 	addi	r2,r2,4
   1c098:	10800017 	ldw	r2,0(r2)
   1c09c:	1085883a 	add	r2,r2,r2
   1c0a0:	e0bf4e15 	stw	r2,-712(fp)
   1c0a4:	e03f4f15 	stw	zero,-708(fp)
   1c0a8:	e0be8717 	ldw	r2,-1508(fp)
   1c0ac:	10800404 	addi	r2,r2,16
   1c0b0:	10800017 	ldw	r2,0(r2)
   1c0b4:	e0bf5015 	stw	r2,-704(fp)
   1c0b8:	e03f5115 	stw	zero,-700(fp)
   1c0bc:	e1bf5017 	ldw	r6,-704(fp)
   1c0c0:	e1ff5117 	ldw	r7,-700(fp)
   1c0c4:	e13f4e17 	ldw	r4,-712(fp)
   1c0c8:	e17f4f17 	ldw	r5,-708(fp)
   1c0cc:	00429400 	call	42940 <__muldi3>
   1c0d0:	100f883a 	mov	r7,r2
   1c0d4:	1811883a 	mov	r8,r3
   1c0d8:	380b883a 	mov	r5,r7
   1c0dc:	400d883a 	mov	r6,r8
   1c0e0:	8145883a 	add	r2,r16,r5
   1c0e4:	1409803a 	cmpltu	r4,r2,r16
   1c0e8:	8987883a 	add	r3,r17,r6
   1c0ec:	20c9883a 	add	r4,r4,r3
   1c0f0:	2007883a 	mov	r3,r4
   1c0f4:	1021883a 	mov	r16,r2
   1c0f8:	1823883a 	mov	r17,r3
       + (uint64_t)(a[2]*2) * a[3];
   1c0fc:	e0be8717 	ldw	r2,-1508(fp)
   1c100:	10800204 	addi	r2,r2,8
   1c104:	10800017 	ldw	r2,0(r2)
   1c108:	1085883a 	add	r2,r2,r2
   1c10c:	e0bf5215 	stw	r2,-696(fp)
   1c110:	e03f5315 	stw	zero,-692(fp)
   1c114:	e0be8717 	ldw	r2,-1508(fp)
   1c118:	10800304 	addi	r2,r2,12
   1c11c:	10800017 	ldw	r2,0(r2)
   1c120:	e0bf5415 	stw	r2,-688(fp)
   1c124:	e03f5515 	stw	zero,-684(fp)
   1c128:	e1bf5417 	ldw	r6,-688(fp)
   1c12c:	e1ff5517 	ldw	r7,-684(fp)
   1c130:	e13f5217 	ldw	r4,-696(fp)
   1c134:	e17f5317 	ldw	r5,-692(fp)
   1c138:	00429400 	call	42940 <__muldi3>
   1c13c:	100f883a 	mov	r7,r2
   1c140:	1811883a 	mov	r8,r3
   1c144:	380b883a 	mov	r5,r7
   1c148:	400d883a 	mov	r6,r8
   1c14c:	8145883a 	add	r2,r16,r5
   1c150:	1409803a 	cmpltu	r4,r2,r16
   1c154:	8987883a 	add	r3,r17,r6
   1c158:	20c9883a 	add	r4,r4,r3
   1c15c:	2007883a 	mov	r3,r4
   1c160:	100f883a 	mov	r7,r2
   1c164:	1811883a 	mov	r8,r3
    VERIFY_BITS(t4, 26);
    VERIFY_BITS(c, 39);
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[5]
   1c168:	e13e6a17 	ldw	r4,-1624(fp)
   1c16c:	e17e6b17 	ldw	r5,-1620(fp)
   1c170:	21c5883a 	add	r2,r4,r7
   1c174:	110d803a 	cmpltu	r6,r2,r4
   1c178:	2a07883a 	add	r3,r5,r8
   1c17c:	30c9883a 	add	r4,r6,r3
   1c180:	2007883a 	mov	r3,r4
   1c184:	e0be6a15 	stw	r2,-1624(fp)
   1c188:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[4]
       + (uint64_t)(a[2]*2) * a[3];
    VERIFY_BITS(c, 63);
   1c18c:	e0be6a17 	ldw	r2,-1624(fp)
   1c190:	e0fe6b17 	ldw	r3,-1620(fp)
   1c194:	1804d7fa 	srli	r2,r3,31
   1c198:	10803fcc 	andi	r2,r2,255
   1c19c:	10000d26 	beq	r2,zero,1c1d4 <secp256k1_fe_sqr_inner+0x24bc>
   1c1a0:	d0a01617 	ldw	r2,-32680(gp)
   1c1a4:	10c00317 	ldw	r3,12(r2)
   1c1a8:	008001b4 	movhi	r2,6
   1c1ac:	10acdf04 	addi	r2,r2,-19588
   1c1b0:	d8800015 	stw	r2,0(sp)
   1c1b4:	01c0e444 	movi	r7,913
   1c1b8:	018001b4 	movhi	r6,6
   1c1bc:	31ab2d04 	addi	r6,r6,-21324
   1c1c0:	014001b4 	movhi	r5,6
   1c1c4:	296b3804 	addi	r5,r5,-21280
   1c1c8:	1809883a 	mov	r4,r3
   1c1cc:	00452600 	call	45260 <fprintf>
   1c1d0:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[6]*2) * a[9]
   1c1d4:	e0be8717 	ldw	r2,-1508(fp)
   1c1d8:	10800604 	addi	r2,r2,24
   1c1dc:	10800017 	ldw	r2,0(r2)
   1c1e0:	1085883a 	add	r2,r2,r2
   1c1e4:	e0bf5615 	stw	r2,-680(fp)
   1c1e8:	e03f5715 	stw	zero,-676(fp)
   1c1ec:	e0be8717 	ldw	r2,-1508(fp)
   1c1f0:	10800904 	addi	r2,r2,36
   1c1f4:	10800017 	ldw	r2,0(r2)
   1c1f8:	e0bf5815 	stw	r2,-672(fp)
   1c1fc:	e03f5915 	stw	zero,-668(fp)
   1c200:	e1bf5817 	ldw	r6,-672(fp)
   1c204:	e1ff5917 	ldw	r7,-668(fp)
   1c208:	e13f5617 	ldw	r4,-680(fp)
   1c20c:	e17f5717 	ldw	r5,-676(fp)
   1c210:	00429400 	call	42940 <__muldi3>
   1c214:	1009883a 	mov	r4,r2
   1c218:	180b883a 	mov	r5,r3
   1c21c:	2021883a 	mov	r16,r4
   1c220:	2823883a 	mov	r17,r5
       + (uint64_t)(a[7]*2) * a[8];
   1c224:	e0be8717 	ldw	r2,-1508(fp)
   1c228:	10800704 	addi	r2,r2,28
   1c22c:	10800017 	ldw	r2,0(r2)
   1c230:	1085883a 	add	r2,r2,r2
   1c234:	e0bf5a15 	stw	r2,-664(fp)
   1c238:	e03f5b15 	stw	zero,-660(fp)
   1c23c:	e0be8717 	ldw	r2,-1508(fp)
   1c240:	10800804 	addi	r2,r2,32
   1c244:	10800017 	ldw	r2,0(r2)
   1c248:	e0bf5c15 	stw	r2,-656(fp)
   1c24c:	e03f5d15 	stw	zero,-652(fp)
   1c250:	e1bf5c17 	ldw	r6,-656(fp)
   1c254:	e1ff5d17 	ldw	r7,-652(fp)
   1c258:	e13f5a17 	ldw	r4,-664(fp)
   1c25c:	e17f5b17 	ldw	r5,-660(fp)
   1c260:	00429400 	call	42940 <__muldi3>
   1c264:	100f883a 	mov	r7,r2
   1c268:	1811883a 	mov	r8,r3
   1c26c:	380b883a 	mov	r5,r7
   1c270:	400d883a 	mov	r6,r8
   1c274:	8145883a 	add	r2,r16,r5
   1c278:	1409803a 	cmpltu	r4,r2,r16
   1c27c:	8987883a 	add	r3,r17,r6
   1c280:	20c9883a 	add	r4,r4,r3
   1c284:	2007883a 	mov	r3,r4
   1c288:	100f883a 	mov	r7,r2
   1c28c:	1811883a 	mov	r8,r3
    c += (uint64_t)(a[0]*2) * a[5]
       + (uint64_t)(a[1]*2) * a[4]
       + (uint64_t)(a[2]*2) * a[3];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[6]*2) * a[9]
   1c290:	e13e6717 	ldw	r4,-1636(fp)
   1c294:	e17e6817 	ldw	r5,-1632(fp)
   1c298:	21c5883a 	add	r2,r4,r7
   1c29c:	110d803a 	cmpltu	r6,r2,r4
   1c2a0:	2a07883a 	add	r3,r5,r8
   1c2a4:	30c9883a 	add	r4,r6,r3
   1c2a8:	2007883a 	mov	r3,r4
   1c2ac:	e0be6715 	stw	r2,-1636(fp)
   1c2b0:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[7]*2) * a[8];
    VERIFY_BITS(d, 62);
   1c2b4:	e0be6817 	ldw	r2,-1632(fp)
   1c2b8:	1004d7ba 	srli	r2,r2,30
   1c2bc:	e0bf5e15 	stw	r2,-648(fp)
   1c2c0:	e03f5f15 	stw	zero,-644(fp)
   1c2c4:	e0ff5e17 	ldw	r3,-648(fp)
   1c2c8:	e13f5f17 	ldw	r4,-644(fp)
   1c2cc:	1904b03a 	or	r2,r3,r4
   1c2d0:	1004c03a 	cmpne	r2,r2,zero
   1c2d4:	10803fcc 	andi	r2,r2,255
   1c2d8:	10000d26 	beq	r2,zero,1c310 <secp256k1_fe_sqr_inner+0x25f8>
   1c2dc:	d0a01617 	ldw	r2,-32680(gp)
   1c2e0:	10c00317 	ldw	r3,12(r2)
   1c2e4:	008001b4 	movhi	r2,6
   1c2e8:	10ad3704 	addi	r2,r2,-19236
   1c2ec:	d8800015 	stw	r2,0(sp)
   1c2f0:	01c0e544 	movi	r7,917
   1c2f4:	018001b4 	movhi	r6,6
   1c2f8:	31ab2d04 	addi	r6,r6,-21324
   1c2fc:	014001b4 	movhi	r5,6
   1c300:	296b3804 	addi	r5,r5,-21280
   1c304:	1809883a 	mov	r4,r3
   1c308:	00452600 	call	45260 <fprintf>
   1c30c:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    u5 = d & M; d >>= 26; c += u5 * R0;
   1c310:	e0be6417 	ldw	r2,-1648(fp)
   1c314:	e0bf6015 	stw	r2,-640(fp)
   1c318:	e03f6115 	stw	zero,-636(fp)
   1c31c:	e0be6717 	ldw	r2,-1636(fp)
   1c320:	e1bf6017 	ldw	r6,-640(fp)
   1c324:	1184703a 	and	r2,r2,r6
   1c328:	e0be7b15 	stw	r2,-1556(fp)
   1c32c:	e0be6817 	ldw	r2,-1632(fp)
   1c330:	e1ff6117 	ldw	r7,-636(fp)
   1c334:	11c4703a 	and	r2,r2,r7
   1c338:	e0be7c15 	stw	r2,-1552(fp)
   1c33c:	e0be6817 	ldw	r2,-1632(fp)
   1c340:	100691ba 	slli	r3,r2,6
   1c344:	e0be6717 	ldw	r2,-1636(fp)
   1c348:	1004d6ba 	srli	r2,r2,26
   1c34c:	10c4b03a 	or	r2,r2,r3
   1c350:	e0be6715 	stw	r2,-1636(fp)
   1c354:	e0be6817 	ldw	r2,-1632(fp)
   1c358:	1004d6ba 	srli	r2,r2,26
   1c35c:	e0be6815 	stw	r2,-1632(fp)
   1c360:	e0be6517 	ldw	r2,-1644(fp)
   1c364:	e0bf6215 	stw	r2,-632(fp)
   1c368:	e03f6315 	stw	zero,-628(fp)
   1c36c:	e1be7b17 	ldw	r6,-1556(fp)
   1c370:	e1fe7c17 	ldw	r7,-1552(fp)
   1c374:	e13f6217 	ldw	r4,-632(fp)
   1c378:	e17f6317 	ldw	r5,-628(fp)
   1c37c:	00429400 	call	42940 <__muldi3>
   1c380:	1009883a 	mov	r4,r2
   1c384:	180b883a 	mov	r5,r3
   1c388:	200f883a 	mov	r7,r4
   1c38c:	2811883a 	mov	r8,r5
   1c390:	e13e6a17 	ldw	r4,-1624(fp)
   1c394:	e17e6b17 	ldw	r5,-1620(fp)
   1c398:	21c5883a 	add	r2,r4,r7
   1c39c:	110d803a 	cmpltu	r6,r2,r4
   1c3a0:	2a07883a 	add	r3,r5,r8
   1c3a4:	30c9883a 	add	r4,r6,r3
   1c3a8:	2007883a 	mov	r3,r4
   1c3ac:	e0be6a15 	stw	r2,-1624(fp)
   1c3b0:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u5, 26);
   1c3b4:	e0be7c17 	ldw	r2,-1552(fp)
   1c3b8:	100691ba 	slli	r3,r2,6
   1c3bc:	e0be7b17 	ldw	r2,-1556(fp)
   1c3c0:	1004d6ba 	srli	r2,r2,26
   1c3c4:	e0bf6415 	stw	r2,-624(fp)
   1c3c8:	e0bf6417 	ldw	r2,-624(fp)
   1c3cc:	1886b03a 	or	r3,r3,r2
   1c3d0:	e0ff6415 	stw	r3,-624(fp)
   1c3d4:	e0be7c17 	ldw	r2,-1552(fp)
   1c3d8:	1004d6ba 	srli	r2,r2,26
   1c3dc:	e0bf6515 	stw	r2,-620(fp)
   1c3e0:	e0ff6417 	ldw	r3,-624(fp)
   1c3e4:	e13f6517 	ldw	r4,-620(fp)
   1c3e8:	1904b03a 	or	r2,r3,r4
   1c3ec:	1004c03a 	cmpne	r2,r2,zero
   1c3f0:	10803fcc 	andi	r2,r2,255
   1c3f4:	10000d26 	beq	r2,zero,1c42c <secp256k1_fe_sqr_inner+0x2714>
   1c3f8:	d0a01617 	ldw	r2,-32680(gp)
   1c3fc:	10c00317 	ldw	r3,12(r2)
   1c400:	008001b4 	movhi	r2,6
   1c404:	10ad6304 	addi	r2,r2,-19060
   1c408:	d8800015 	stw	r2,0(sp)
   1c40c:	01c0e604 	movi	r7,920
   1c410:	018001b4 	movhi	r6,6
   1c414:	31ab2d04 	addi	r6,r6,-21324
   1c418:	014001b4 	movhi	r5,6
   1c41c:	296b3804 	addi	r5,r5,-21280
   1c420:	1809883a 	mov	r4,r3
   1c424:	00452600 	call	45260 <fprintf>
   1c428:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 36);
   1c42c:	e0be6817 	ldw	r2,-1632(fp)
   1c430:	1004d13a 	srli	r2,r2,4
   1c434:	e0bf6615 	stw	r2,-616(fp)
   1c438:	e03f6715 	stw	zero,-612(fp)
   1c43c:	e1bf6617 	ldw	r6,-616(fp)
   1c440:	e1ff6717 	ldw	r7,-612(fp)
   1c444:	31c4b03a 	or	r2,r6,r7
   1c448:	1004c03a 	cmpne	r2,r2,zero
   1c44c:	10803fcc 	andi	r2,r2,255
   1c450:	10000d26 	beq	r2,zero,1c488 <secp256k1_fe_sqr_inner+0x2770>
   1c454:	d0a01617 	ldw	r2,-32680(gp)
   1c458:	10c00317 	ldw	r3,12(r2)
   1c45c:	008001b4 	movhi	r2,6
   1c460:	10ad4d04 	addi	r2,r2,-19148
   1c464:	d8800015 	stw	r2,0(sp)
   1c468:	01c0e644 	movi	r7,921
   1c46c:	018001b4 	movhi	r6,6
   1c470:	31ab2d04 	addi	r6,r6,-21324
   1c474:	014001b4 	movhi	r5,6
   1c478:	296b3804 	addi	r5,r5,-21280
   1c47c:	1809883a 	mov	r4,r3
   1c480:	00452600 	call	45260 <fprintf>
   1c484:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u5 0 0 0 0 0 t9 0 0 0 c-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    t5 = c & M; c >>= 26; c += u5 * R1;
   1c488:	e0fe6a17 	ldw	r3,-1624(fp)
   1c48c:	e0be6417 	ldw	r2,-1648(fp)
   1c490:	1884703a 	and	r2,r3,r2
   1c494:	e0be7d15 	stw	r2,-1548(fp)
   1c498:	e0be6b17 	ldw	r2,-1620(fp)
   1c49c:	100691ba 	slli	r3,r2,6
   1c4a0:	e0be6a17 	ldw	r2,-1624(fp)
   1c4a4:	1004d6ba 	srli	r2,r2,26
   1c4a8:	10c4b03a 	or	r2,r2,r3
   1c4ac:	e0be6a15 	stw	r2,-1624(fp)
   1c4b0:	e0be6b17 	ldw	r2,-1620(fp)
   1c4b4:	1004d6ba 	srli	r2,r2,26
   1c4b8:	e0be6b15 	stw	r2,-1620(fp)
   1c4bc:	e0be6617 	ldw	r2,-1640(fp)
   1c4c0:	e0bf6815 	stw	r2,-608(fp)
   1c4c4:	e03f6915 	stw	zero,-604(fp)
   1c4c8:	e1be7b17 	ldw	r6,-1556(fp)
   1c4cc:	e1fe7c17 	ldw	r7,-1552(fp)
   1c4d0:	e13f6817 	ldw	r4,-608(fp)
   1c4d4:	e17f6917 	ldw	r5,-604(fp)
   1c4d8:	00429400 	call	42940 <__muldi3>
   1c4dc:	1009883a 	mov	r4,r2
   1c4e0:	180b883a 	mov	r5,r3
   1c4e4:	200f883a 	mov	r7,r4
   1c4e8:	2811883a 	mov	r8,r5
   1c4ec:	e13e6a17 	ldw	r4,-1624(fp)
   1c4f0:	e17e6b17 	ldw	r5,-1620(fp)
   1c4f4:	21c5883a 	add	r2,r4,r7
   1c4f8:	110d803a 	cmpltu	r6,r2,r4
   1c4fc:	2a07883a 	add	r3,r5,r8
   1c500:	30c9883a 	add	r4,r6,r3
   1c504:	2007883a 	mov	r3,r4
   1c508:	e0be6a15 	stw	r2,-1624(fp)
   1c50c:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t5, 26);
   1c510:	e0be7d17 	ldw	r2,-1548(fp)
   1c514:	1004d6ba 	srli	r2,r2,26
   1c518:	1004c03a 	cmpne	r2,r2,zero
   1c51c:	10803fcc 	andi	r2,r2,255
   1c520:	10000d26 	beq	r2,zero,1c558 <secp256k1_fe_sqr_inner+0x2840>
   1c524:	d0a01617 	ldw	r2,-32680(gp)
   1c528:	10c00317 	ldw	r3,12(r2)
   1c52c:	008001b4 	movhi	r2,6
   1c530:	10ad6e04 	addi	r2,r2,-19016
   1c534:	d8800015 	stw	r2,0(sp)
   1c538:	01c0e744 	movi	r7,925
   1c53c:	018001b4 	movhi	r6,6
   1c540:	31ab2d04 	addi	r6,r6,-21324
   1c544:	014001b4 	movhi	r5,6
   1c548:	296b3804 	addi	r5,r5,-21280
   1c54c:	1809883a 	mov	r4,r3
   1c550:	00452600 	call	45260 <fprintf>
   1c554:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   1c558:	e0be6b17 	ldw	r2,-1620(fp)
   1c55c:	1004d1fa 	srli	r2,r2,7
   1c560:	e0bf6a15 	stw	r2,-600(fp)
   1c564:	e03f6b15 	stw	zero,-596(fp)
   1c568:	e0ff6a17 	ldw	r3,-600(fp)
   1c56c:	e13f6b17 	ldw	r4,-596(fp)
   1c570:	1904b03a 	or	r2,r3,r4
   1c574:	1004c03a 	cmpne	r2,r2,zero
   1c578:	10803fcc 	andi	r2,r2,255
   1c57c:	10000d26 	beq	r2,zero,1c5b4 <secp256k1_fe_sqr_inner+0x289c>
   1c580:	d0a01617 	ldw	r2,-32680(gp)
   1c584:	10c00317 	ldw	r3,12(r2)
   1c588:	008001b4 	movhi	r2,6
   1c58c:	10ad2c04 	addi	r2,r2,-19280
   1c590:	d8800015 	stw	r2,0(sp)
   1c594:	01c0e784 	movi	r7,926
   1c598:	018001b4 	movhi	r6,6
   1c59c:	31ab2d04 	addi	r6,r6,-21324
   1c5a0:	014001b4 	movhi	r5,6
   1c5a4:	296b3804 	addi	r5,r5,-21280
   1c5a8:	1809883a 	mov	r4,r3
   1c5ac:	00452600 	call	45260 <fprintf>
   1c5b0:	00450340 	call	45034 <abort>
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[6]
   1c5b4:	e0be8717 	ldw	r2,-1508(fp)
   1c5b8:	10800017 	ldw	r2,0(r2)
   1c5bc:	1085883a 	add	r2,r2,r2
   1c5c0:	e0bf6c15 	stw	r2,-592(fp)
   1c5c4:	e03f6d15 	stw	zero,-588(fp)
   1c5c8:	e0be8717 	ldw	r2,-1508(fp)
   1c5cc:	10800604 	addi	r2,r2,24
   1c5d0:	10800017 	ldw	r2,0(r2)
   1c5d4:	e0bf6e15 	stw	r2,-584(fp)
   1c5d8:	e03f6f15 	stw	zero,-580(fp)
   1c5dc:	e1bf6e17 	ldw	r6,-584(fp)
   1c5e0:	e1ff6f17 	ldw	r7,-580(fp)
   1c5e4:	e13f6c17 	ldw	r4,-592(fp)
   1c5e8:	e17f6d17 	ldw	r5,-588(fp)
   1c5ec:	00429400 	call	42940 <__muldi3>
   1c5f0:	1009883a 	mov	r4,r2
   1c5f4:	180b883a 	mov	r5,r3
   1c5f8:	2021883a 	mov	r16,r4
   1c5fc:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[5]
   1c600:	e0be8717 	ldw	r2,-1508(fp)
   1c604:	10800104 	addi	r2,r2,4
   1c608:	10800017 	ldw	r2,0(r2)
   1c60c:	1085883a 	add	r2,r2,r2
   1c610:	e0bf7015 	stw	r2,-576(fp)
   1c614:	e03f7115 	stw	zero,-572(fp)
   1c618:	e0be8717 	ldw	r2,-1508(fp)
   1c61c:	10800504 	addi	r2,r2,20
   1c620:	10800017 	ldw	r2,0(r2)
   1c624:	e0bf7215 	stw	r2,-568(fp)
   1c628:	e03f7315 	stw	zero,-564(fp)
   1c62c:	e1bf7217 	ldw	r6,-568(fp)
   1c630:	e1ff7317 	ldw	r7,-564(fp)
   1c634:	e13f7017 	ldw	r4,-576(fp)
   1c638:	e17f7117 	ldw	r5,-572(fp)
   1c63c:	00429400 	call	42940 <__muldi3>
   1c640:	100f883a 	mov	r7,r2
   1c644:	1811883a 	mov	r8,r3
   1c648:	380b883a 	mov	r5,r7
   1c64c:	400d883a 	mov	r6,r8
   1c650:	8145883a 	add	r2,r16,r5
   1c654:	1409803a 	cmpltu	r4,r2,r16
   1c658:	8987883a 	add	r3,r17,r6
   1c65c:	20c9883a 	add	r4,r4,r3
   1c660:	2007883a 	mov	r3,r4
   1c664:	1025883a 	mov	r18,r2
   1c668:	1827883a 	mov	r19,r3
       + (uint64_t)(a[2]*2) * a[4]
       + (uint64_t)a[3] * a[3];
   1c66c:	e0be8717 	ldw	r2,-1508(fp)
   1c670:	10800304 	addi	r2,r2,12
   1c674:	10800017 	ldw	r2,0(r2)
   1c678:	e0bf7415 	stw	r2,-560(fp)
   1c67c:	e03f7515 	stw	zero,-556(fp)
   1c680:	e0be8717 	ldw	r2,-1508(fp)
   1c684:	10800304 	addi	r2,r2,12
   1c688:	10800017 	ldw	r2,0(r2)
   1c68c:	e0bf7615 	stw	r2,-552(fp)
   1c690:	e03f7715 	stw	zero,-548(fp)
   1c694:	e1bf7617 	ldw	r6,-552(fp)
   1c698:	e1ff7717 	ldw	r7,-548(fp)
   1c69c:	e13f7417 	ldw	r4,-560(fp)
   1c6a0:	e17f7517 	ldw	r5,-556(fp)
   1c6a4:	00429400 	call	42940 <__muldi3>
   1c6a8:	1009883a 	mov	r4,r2
   1c6ac:	180b883a 	mov	r5,r3
   1c6b0:	2021883a 	mov	r16,r4
   1c6b4:	2823883a 	mov	r17,r5
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[6]
       + (uint64_t)(a[1]*2) * a[5]
       + (uint64_t)(a[2]*2) * a[4]
   1c6b8:	e0be8717 	ldw	r2,-1508(fp)
   1c6bc:	10800204 	addi	r2,r2,8
   1c6c0:	10800017 	ldw	r2,0(r2)
   1c6c4:	1085883a 	add	r2,r2,r2
   1c6c8:	e0bf7815 	stw	r2,-544(fp)
   1c6cc:	e03f7915 	stw	zero,-540(fp)
   1c6d0:	e0be8717 	ldw	r2,-1508(fp)
   1c6d4:	10800404 	addi	r2,r2,16
   1c6d8:	10800017 	ldw	r2,0(r2)
   1c6dc:	e0bf7a15 	stw	r2,-536(fp)
   1c6e0:	e03f7b15 	stw	zero,-532(fp)
   1c6e4:	e1bf7a17 	ldw	r6,-536(fp)
   1c6e8:	e1ff7b17 	ldw	r7,-532(fp)
   1c6ec:	e13f7817 	ldw	r4,-544(fp)
   1c6f0:	e17f7917 	ldw	r5,-540(fp)
   1c6f4:	00429400 	call	42940 <__muldi3>
   1c6f8:	100f883a 	mov	r7,r2
   1c6fc:	1811883a 	mov	r8,r3
   1c700:	380b883a 	mov	r5,r7
   1c704:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * a[3];
   1c708:	8145883a 	add	r2,r16,r5
   1c70c:	1409803a 	cmpltu	r4,r2,r16
   1c710:	8987883a 	add	r3,r17,r6
   1c714:	20c9883a 	add	r4,r4,r3
   1c718:	2007883a 	mov	r3,r4
   1c71c:	100b883a 	mov	r5,r2
   1c720:	180d883a 	mov	r6,r3
   1c724:	9145883a 	add	r2,r18,r5
   1c728:	1489803a 	cmpltu	r4,r2,r18
   1c72c:	9987883a 	add	r3,r19,r6
   1c730:	20c9883a 	add	r4,r4,r3
   1c734:	2007883a 	mov	r3,r4
   1c738:	100f883a 	mov	r7,r2
   1c73c:	1811883a 	mov	r8,r3
    VERIFY_BITS(t5, 26);
    VERIFY_BITS(c, 39);
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[6]
   1c740:	e13e6a17 	ldw	r4,-1624(fp)
   1c744:	e17e6b17 	ldw	r5,-1620(fp)
   1c748:	21c5883a 	add	r2,r4,r7
   1c74c:	110d803a 	cmpltu	r6,r2,r4
   1c750:	2a07883a 	add	r3,r5,r8
   1c754:	30c9883a 	add	r4,r6,r3
   1c758:	2007883a 	mov	r3,r4
   1c75c:	e0be6a15 	stw	r2,-1624(fp)
   1c760:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[5]
       + (uint64_t)(a[2]*2) * a[4]
       + (uint64_t)a[3] * a[3];
    VERIFY_BITS(c, 63);
   1c764:	e0be6a17 	ldw	r2,-1624(fp)
   1c768:	e0fe6b17 	ldw	r3,-1620(fp)
   1c76c:	1804d7fa 	srli	r2,r3,31
   1c770:	10803fcc 	andi	r2,r2,255
   1c774:	10000d26 	beq	r2,zero,1c7ac <secp256k1_fe_sqr_inner+0x2a94>
   1c778:	d0a01617 	ldw	r2,-32680(gp)
   1c77c:	10c00317 	ldw	r3,12(r2)
   1c780:	008001b4 	movhi	r2,6
   1c784:	10acdf04 	addi	r2,r2,-19588
   1c788:	d8800015 	stw	r2,0(sp)
   1c78c:	01c0e984 	movi	r7,934
   1c790:	018001b4 	movhi	r6,6
   1c794:	31ab2d04 	addi	r6,r6,-21324
   1c798:	014001b4 	movhi	r5,6
   1c79c:	296b3804 	addi	r5,r5,-21280
   1c7a0:	1809883a 	mov	r4,r3
   1c7a4:	00452600 	call	45260 <fprintf>
   1c7a8:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[7]*2) * a[9]
   1c7ac:	e0be8717 	ldw	r2,-1508(fp)
   1c7b0:	10800704 	addi	r2,r2,28
   1c7b4:	10800017 	ldw	r2,0(r2)
   1c7b8:	1085883a 	add	r2,r2,r2
   1c7bc:	e0bf7c15 	stw	r2,-528(fp)
   1c7c0:	e03f7d15 	stw	zero,-524(fp)
   1c7c4:	e0be8717 	ldw	r2,-1508(fp)
   1c7c8:	10800904 	addi	r2,r2,36
   1c7cc:	10800017 	ldw	r2,0(r2)
   1c7d0:	e0bf7e15 	stw	r2,-520(fp)
   1c7d4:	e03f7f15 	stw	zero,-516(fp)
   1c7d8:	e1bf7e17 	ldw	r6,-520(fp)
   1c7dc:	e1ff7f17 	ldw	r7,-516(fp)
   1c7e0:	e13f7c17 	ldw	r4,-528(fp)
   1c7e4:	e17f7d17 	ldw	r5,-524(fp)
   1c7e8:	00429400 	call	42940 <__muldi3>
   1c7ec:	1009883a 	mov	r4,r2
   1c7f0:	180b883a 	mov	r5,r3
   1c7f4:	2021883a 	mov	r16,r4
   1c7f8:	2823883a 	mov	r17,r5
       + (uint64_t)a[8] * a[8];
   1c7fc:	e0be8717 	ldw	r2,-1508(fp)
   1c800:	10800804 	addi	r2,r2,32
   1c804:	10800017 	ldw	r2,0(r2)
   1c808:	e0bf8015 	stw	r2,-512(fp)
   1c80c:	e03f8115 	stw	zero,-508(fp)
   1c810:	e0be8717 	ldw	r2,-1508(fp)
   1c814:	10800804 	addi	r2,r2,32
   1c818:	10800017 	ldw	r2,0(r2)
   1c81c:	e0bf8215 	stw	r2,-504(fp)
   1c820:	e03f8315 	stw	zero,-500(fp)
   1c824:	e1bf8217 	ldw	r6,-504(fp)
   1c828:	e1ff8317 	ldw	r7,-500(fp)
   1c82c:	e13f8017 	ldw	r4,-512(fp)
   1c830:	e17f8117 	ldw	r5,-508(fp)
   1c834:	00429400 	call	42940 <__muldi3>
   1c838:	100f883a 	mov	r7,r2
   1c83c:	1811883a 	mov	r8,r3
   1c840:	380b883a 	mov	r5,r7
   1c844:	400d883a 	mov	r6,r8
   1c848:	8145883a 	add	r2,r16,r5
   1c84c:	1409803a 	cmpltu	r4,r2,r16
   1c850:	8987883a 	add	r3,r17,r6
   1c854:	20c9883a 	add	r4,r4,r3
   1c858:	2007883a 	mov	r3,r4
   1c85c:	100f883a 	mov	r7,r2
   1c860:	1811883a 	mov	r8,r3
       + (uint64_t)(a[1]*2) * a[5]
       + (uint64_t)(a[2]*2) * a[4]
       + (uint64_t)a[3] * a[3];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[7]*2) * a[9]
   1c864:	e13e6717 	ldw	r4,-1636(fp)
   1c868:	e17e6817 	ldw	r5,-1632(fp)
   1c86c:	21c5883a 	add	r2,r4,r7
   1c870:	110d803a 	cmpltu	r6,r2,r4
   1c874:	2a07883a 	add	r3,r5,r8
   1c878:	30c9883a 	add	r4,r6,r3
   1c87c:	2007883a 	mov	r3,r4
   1c880:	e0be6715 	stw	r2,-1636(fp)
   1c884:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)a[8] * a[8];
    VERIFY_BITS(d, 61);
   1c888:	e0be6817 	ldw	r2,-1632(fp)
   1c88c:	1004d77a 	srli	r2,r2,29
   1c890:	e0bf8415 	stw	r2,-496(fp)
   1c894:	e03f8515 	stw	zero,-492(fp)
   1c898:	e1bf8417 	ldw	r6,-496(fp)
   1c89c:	e1ff8517 	ldw	r7,-492(fp)
   1c8a0:	31c4b03a 	or	r2,r6,r7
   1c8a4:	1004c03a 	cmpne	r2,r2,zero
   1c8a8:	10803fcc 	andi	r2,r2,255
   1c8ac:	10000d26 	beq	r2,zero,1c8e4 <secp256k1_fe_sqr_inner+0x2bcc>
   1c8b0:	d0a01617 	ldw	r2,-32680(gp)
   1c8b4:	10c00317 	ldw	r3,12(r2)
   1c8b8:	008001b4 	movhi	r2,6
   1c8bc:	10ad7904 	addi	r2,r2,-18972
   1c8c0:	d8800015 	stw	r2,0(sp)
   1c8c4:	01c0ea84 	movi	r7,938
   1c8c8:	018001b4 	movhi	r6,6
   1c8cc:	31ab2d04 	addi	r6,r6,-21324
   1c8d0:	014001b4 	movhi	r5,6
   1c8d4:	296b3804 	addi	r5,r5,-21280
   1c8d8:	1809883a 	mov	r4,r3
   1c8dc:	00452600 	call	45260 <fprintf>
   1c8e0:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    u6 = d & M; d >>= 26; c += u6 * R0;
   1c8e4:	e0be6417 	ldw	r2,-1648(fp)
   1c8e8:	e0bf8615 	stw	r2,-488(fp)
   1c8ec:	e03f8715 	stw	zero,-484(fp)
   1c8f0:	e0be6717 	ldw	r2,-1636(fp)
   1c8f4:	e0ff8617 	ldw	r3,-488(fp)
   1c8f8:	10c4703a 	and	r2,r2,r3
   1c8fc:	e0be7e15 	stw	r2,-1544(fp)
   1c900:	e0be6817 	ldw	r2,-1632(fp)
   1c904:	e13f8717 	ldw	r4,-484(fp)
   1c908:	1104703a 	and	r2,r2,r4
   1c90c:	e0be7f15 	stw	r2,-1540(fp)
   1c910:	e0be6817 	ldw	r2,-1632(fp)
   1c914:	100691ba 	slli	r3,r2,6
   1c918:	e0be6717 	ldw	r2,-1636(fp)
   1c91c:	1004d6ba 	srli	r2,r2,26
   1c920:	10c4b03a 	or	r2,r2,r3
   1c924:	e0be6715 	stw	r2,-1636(fp)
   1c928:	e0be6817 	ldw	r2,-1632(fp)
   1c92c:	1004d6ba 	srli	r2,r2,26
   1c930:	e0be6815 	stw	r2,-1632(fp)
   1c934:	e0be6517 	ldw	r2,-1644(fp)
   1c938:	e0bf8815 	stw	r2,-480(fp)
   1c93c:	e03f8915 	stw	zero,-476(fp)
   1c940:	e1be7e17 	ldw	r6,-1544(fp)
   1c944:	e1fe7f17 	ldw	r7,-1540(fp)
   1c948:	e13f8817 	ldw	r4,-480(fp)
   1c94c:	e17f8917 	ldw	r5,-476(fp)
   1c950:	00429400 	call	42940 <__muldi3>
   1c954:	1009883a 	mov	r4,r2
   1c958:	180b883a 	mov	r5,r3
   1c95c:	200f883a 	mov	r7,r4
   1c960:	2811883a 	mov	r8,r5
   1c964:	e13e6a17 	ldw	r4,-1624(fp)
   1c968:	e17e6b17 	ldw	r5,-1620(fp)
   1c96c:	21c5883a 	add	r2,r4,r7
   1c970:	110d803a 	cmpltu	r6,r2,r4
   1c974:	2a07883a 	add	r3,r5,r8
   1c978:	30c9883a 	add	r4,r6,r3
   1c97c:	2007883a 	mov	r3,r4
   1c980:	e0be6a15 	stw	r2,-1624(fp)
   1c984:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u6, 26);
   1c988:	e0be7f17 	ldw	r2,-1540(fp)
   1c98c:	100691ba 	slli	r3,r2,6
   1c990:	e0be7e17 	ldw	r2,-1544(fp)
   1c994:	1004d6ba 	srli	r2,r2,26
   1c998:	e0bf8a15 	stw	r2,-472(fp)
   1c99c:	e1bf8a17 	ldw	r6,-472(fp)
   1c9a0:	1986b03a 	or	r3,r3,r6
   1c9a4:	e0ff8a15 	stw	r3,-472(fp)
   1c9a8:	e0be7f17 	ldw	r2,-1540(fp)
   1c9ac:	1004d6ba 	srli	r2,r2,26
   1c9b0:	e0bf8b15 	stw	r2,-468(fp)
   1c9b4:	e1ff8a17 	ldw	r7,-472(fp)
   1c9b8:	e0ff8b17 	ldw	r3,-468(fp)
   1c9bc:	38c4b03a 	or	r2,r7,r3
   1c9c0:	1004c03a 	cmpne	r2,r2,zero
   1c9c4:	10803fcc 	andi	r2,r2,255
   1c9c8:	10000d26 	beq	r2,zero,1ca00 <secp256k1_fe_sqr_inner+0x2ce8>
   1c9cc:	d0a01617 	ldw	r2,-32680(gp)
   1c9d0:	10c00317 	ldw	r3,12(r2)
   1c9d4:	008001b4 	movhi	r2,6
   1c9d8:	10ad8404 	addi	r2,r2,-18928
   1c9dc:	d8800015 	stw	r2,0(sp)
   1c9e0:	01c0eb44 	movi	r7,941
   1c9e4:	018001b4 	movhi	r6,6
   1c9e8:	31ab2d04 	addi	r6,r6,-21324
   1c9ec:	014001b4 	movhi	r5,6
   1c9f0:	296b3804 	addi	r5,r5,-21280
   1c9f4:	1809883a 	mov	r4,r3
   1c9f8:	00452600 	call	45260 <fprintf>
   1c9fc:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 35);
   1ca00:	e0be6817 	ldw	r2,-1632(fp)
   1ca04:	1004d0fa 	srli	r2,r2,3
   1ca08:	e0bf8c15 	stw	r2,-464(fp)
   1ca0c:	e03f8d15 	stw	zero,-460(fp)
   1ca10:	e13f8c17 	ldw	r4,-464(fp)
   1ca14:	e1bf8d17 	ldw	r6,-460(fp)
   1ca18:	2184b03a 	or	r2,r4,r6
   1ca1c:	1004c03a 	cmpne	r2,r2,zero
   1ca20:	10803fcc 	andi	r2,r2,255
   1ca24:	10000d26 	beq	r2,zero,1ca5c <secp256k1_fe_sqr_inner+0x2d44>
   1ca28:	d0a01617 	ldw	r2,-32680(gp)
   1ca2c:	10c00317 	ldw	r3,12(r2)
   1ca30:	008001b4 	movhi	r2,6
   1ca34:	10ad8f04 	addi	r2,r2,-18884
   1ca38:	d8800015 	stw	r2,0(sp)
   1ca3c:	01c0eb84 	movi	r7,942
   1ca40:	018001b4 	movhi	r6,6
   1ca44:	31ab2d04 	addi	r6,r6,-21324
   1ca48:	014001b4 	movhi	r5,6
   1ca4c:	296b3804 	addi	r5,r5,-21280
   1ca50:	1809883a 	mov	r4,r3
   1ca54:	00452600 	call	45260 <fprintf>
   1ca58:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u6 0 0 0 0 0 0 t9 0 0 c-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    t6 = c & M; c >>= 26; c += u6 * R1;
   1ca5c:	e0fe6a17 	ldw	r3,-1624(fp)
   1ca60:	e0be6417 	ldw	r2,-1648(fp)
   1ca64:	1884703a 	and	r2,r3,r2
   1ca68:	e0be8015 	stw	r2,-1536(fp)
   1ca6c:	e0be6b17 	ldw	r2,-1620(fp)
   1ca70:	100691ba 	slli	r3,r2,6
   1ca74:	e0be6a17 	ldw	r2,-1624(fp)
   1ca78:	1004d6ba 	srli	r2,r2,26
   1ca7c:	10c4b03a 	or	r2,r2,r3
   1ca80:	e0be6a15 	stw	r2,-1624(fp)
   1ca84:	e0be6b17 	ldw	r2,-1620(fp)
   1ca88:	1004d6ba 	srli	r2,r2,26
   1ca8c:	e0be6b15 	stw	r2,-1620(fp)
   1ca90:	e0be6617 	ldw	r2,-1640(fp)
   1ca94:	e0bf8e15 	stw	r2,-456(fp)
   1ca98:	e03f8f15 	stw	zero,-452(fp)
   1ca9c:	e1be7e17 	ldw	r6,-1544(fp)
   1caa0:	e1fe7f17 	ldw	r7,-1540(fp)
   1caa4:	e13f8e17 	ldw	r4,-456(fp)
   1caa8:	e17f8f17 	ldw	r5,-452(fp)
   1caac:	00429400 	call	42940 <__muldi3>
   1cab0:	1009883a 	mov	r4,r2
   1cab4:	180b883a 	mov	r5,r3
   1cab8:	200f883a 	mov	r7,r4
   1cabc:	2811883a 	mov	r8,r5
   1cac0:	e13e6a17 	ldw	r4,-1624(fp)
   1cac4:	e17e6b17 	ldw	r5,-1620(fp)
   1cac8:	21c5883a 	add	r2,r4,r7
   1cacc:	110d803a 	cmpltu	r6,r2,r4
   1cad0:	2a07883a 	add	r3,r5,r8
   1cad4:	30c9883a 	add	r4,r6,r3
   1cad8:	2007883a 	mov	r3,r4
   1cadc:	e0be6a15 	stw	r2,-1624(fp)
   1cae0:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t6, 26);
   1cae4:	e0be8017 	ldw	r2,-1536(fp)
   1cae8:	1004d6ba 	srli	r2,r2,26
   1caec:	1004c03a 	cmpne	r2,r2,zero
   1caf0:	10803fcc 	andi	r2,r2,255
   1caf4:	10000d26 	beq	r2,zero,1cb2c <secp256k1_fe_sqr_inner+0x2e14>
   1caf8:	d0a01617 	ldw	r2,-32680(gp)
   1cafc:	10c00317 	ldw	r3,12(r2)
   1cb00:	008001b4 	movhi	r2,6
   1cb04:	10ad9a04 	addi	r2,r2,-18840
   1cb08:	d8800015 	stw	r2,0(sp)
   1cb0c:	01c0ec84 	movi	r7,946
   1cb10:	018001b4 	movhi	r6,6
   1cb14:	31ab2d04 	addi	r6,r6,-21324
   1cb18:	014001b4 	movhi	r5,6
   1cb1c:	296b3804 	addi	r5,r5,-21280
   1cb20:	1809883a 	mov	r4,r3
   1cb24:	00452600 	call	45260 <fprintf>
   1cb28:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   1cb2c:	e0be6b17 	ldw	r2,-1620(fp)
   1cb30:	1004d1fa 	srli	r2,r2,7
   1cb34:	e0bf9015 	stw	r2,-448(fp)
   1cb38:	e03f9115 	stw	zero,-444(fp)
   1cb3c:	e1ff9017 	ldw	r7,-448(fp)
   1cb40:	e0ff9117 	ldw	r3,-444(fp)
   1cb44:	38c4b03a 	or	r2,r7,r3
   1cb48:	1004c03a 	cmpne	r2,r2,zero
   1cb4c:	10803fcc 	andi	r2,r2,255
   1cb50:	10000d26 	beq	r2,zero,1cb88 <secp256k1_fe_sqr_inner+0x2e70>
   1cb54:	d0a01617 	ldw	r2,-32680(gp)
   1cb58:	10c00317 	ldw	r3,12(r2)
   1cb5c:	008001b4 	movhi	r2,6
   1cb60:	10ad2c04 	addi	r2,r2,-19280
   1cb64:	d8800015 	stw	r2,0(sp)
   1cb68:	01c0ecc4 	movi	r7,947
   1cb6c:	018001b4 	movhi	r6,6
   1cb70:	31ab2d04 	addi	r6,r6,-21324
   1cb74:	014001b4 	movhi	r5,6
   1cb78:	296b3804 	addi	r5,r5,-21280
   1cb7c:	1809883a 	mov	r4,r3
   1cb80:	00452600 	call	45260 <fprintf>
   1cb84:	00450340 	call	45034 <abort>
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[7]
   1cb88:	e0be8717 	ldw	r2,-1508(fp)
   1cb8c:	10800017 	ldw	r2,0(r2)
   1cb90:	1085883a 	add	r2,r2,r2
   1cb94:	e0bf9215 	stw	r2,-440(fp)
   1cb98:	e03f9315 	stw	zero,-436(fp)
   1cb9c:	e0be8717 	ldw	r2,-1508(fp)
   1cba0:	10800704 	addi	r2,r2,28
   1cba4:	10800017 	ldw	r2,0(r2)
   1cba8:	e0bf9415 	stw	r2,-432(fp)
   1cbac:	e03f9515 	stw	zero,-428(fp)
   1cbb0:	e1bf9417 	ldw	r6,-432(fp)
   1cbb4:	e1ff9517 	ldw	r7,-428(fp)
   1cbb8:	e13f9217 	ldw	r4,-440(fp)
   1cbbc:	e17f9317 	ldw	r5,-436(fp)
   1cbc0:	00429400 	call	42940 <__muldi3>
   1cbc4:	1009883a 	mov	r4,r2
   1cbc8:	180b883a 	mov	r5,r3
   1cbcc:	2021883a 	mov	r16,r4
   1cbd0:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[6]
   1cbd4:	e0be8717 	ldw	r2,-1508(fp)
   1cbd8:	10800104 	addi	r2,r2,4
   1cbdc:	10800017 	ldw	r2,0(r2)
   1cbe0:	1085883a 	add	r2,r2,r2
   1cbe4:	e0bf9615 	stw	r2,-424(fp)
   1cbe8:	e03f9715 	stw	zero,-420(fp)
   1cbec:	e0be8717 	ldw	r2,-1508(fp)
   1cbf0:	10800604 	addi	r2,r2,24
   1cbf4:	10800017 	ldw	r2,0(r2)
   1cbf8:	e0bf9815 	stw	r2,-416(fp)
   1cbfc:	e03f9915 	stw	zero,-412(fp)
   1cc00:	e1bf9817 	ldw	r6,-416(fp)
   1cc04:	e1ff9917 	ldw	r7,-412(fp)
   1cc08:	e13f9617 	ldw	r4,-424(fp)
   1cc0c:	e17f9717 	ldw	r5,-420(fp)
   1cc10:	00429400 	call	42940 <__muldi3>
   1cc14:	100f883a 	mov	r7,r2
   1cc18:	1811883a 	mov	r8,r3
   1cc1c:	380b883a 	mov	r5,r7
   1cc20:	400d883a 	mov	r6,r8
   1cc24:	8145883a 	add	r2,r16,r5
   1cc28:	1409803a 	cmpltu	r4,r2,r16
   1cc2c:	8987883a 	add	r3,r17,r6
   1cc30:	20c9883a 	add	r4,r4,r3
   1cc34:	2007883a 	mov	r3,r4
   1cc38:	1025883a 	mov	r18,r2
   1cc3c:	1827883a 	mov	r19,r3
       + (uint64_t)(a[2]*2) * a[5]
       + (uint64_t)(a[3]*2) * a[4];
   1cc40:	e0be8717 	ldw	r2,-1508(fp)
   1cc44:	10800304 	addi	r2,r2,12
   1cc48:	10800017 	ldw	r2,0(r2)
   1cc4c:	1085883a 	add	r2,r2,r2
   1cc50:	e0bf9a15 	stw	r2,-408(fp)
   1cc54:	e03f9b15 	stw	zero,-404(fp)
   1cc58:	e0be8717 	ldw	r2,-1508(fp)
   1cc5c:	10800404 	addi	r2,r2,16
   1cc60:	10800017 	ldw	r2,0(r2)
   1cc64:	e0bf9c15 	stw	r2,-400(fp)
   1cc68:	e03f9d15 	stw	zero,-396(fp)
   1cc6c:	e1bf9c17 	ldw	r6,-400(fp)
   1cc70:	e1ff9d17 	ldw	r7,-396(fp)
   1cc74:	e13f9a17 	ldw	r4,-408(fp)
   1cc78:	e17f9b17 	ldw	r5,-404(fp)
   1cc7c:	00429400 	call	42940 <__muldi3>
   1cc80:	1009883a 	mov	r4,r2
   1cc84:	180b883a 	mov	r5,r3
   1cc88:	2021883a 	mov	r16,r4
   1cc8c:	2823883a 	mov	r17,r5
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[7]
       + (uint64_t)(a[1]*2) * a[6]
       + (uint64_t)(a[2]*2) * a[5]
   1cc90:	e0be8717 	ldw	r2,-1508(fp)
   1cc94:	10800204 	addi	r2,r2,8
   1cc98:	10800017 	ldw	r2,0(r2)
   1cc9c:	1085883a 	add	r2,r2,r2
   1cca0:	e0bf9e15 	stw	r2,-392(fp)
   1cca4:	e03f9f15 	stw	zero,-388(fp)
   1cca8:	e0be8717 	ldw	r2,-1508(fp)
   1ccac:	10800504 	addi	r2,r2,20
   1ccb0:	10800017 	ldw	r2,0(r2)
   1ccb4:	e0bfa015 	stw	r2,-384(fp)
   1ccb8:	e03fa115 	stw	zero,-380(fp)
   1ccbc:	e1bfa017 	ldw	r6,-384(fp)
   1ccc0:	e1ffa117 	ldw	r7,-380(fp)
   1ccc4:	e13f9e17 	ldw	r4,-392(fp)
   1ccc8:	e17f9f17 	ldw	r5,-388(fp)
   1cccc:	00429400 	call	42940 <__muldi3>
   1ccd0:	100f883a 	mov	r7,r2
   1ccd4:	1811883a 	mov	r8,r3
   1ccd8:	380b883a 	mov	r5,r7
   1ccdc:	400d883a 	mov	r6,r8
       + (uint64_t)(a[3]*2) * a[4];
   1cce0:	8145883a 	add	r2,r16,r5
   1cce4:	1409803a 	cmpltu	r4,r2,r16
   1cce8:	8987883a 	add	r3,r17,r6
   1ccec:	20c9883a 	add	r4,r4,r3
   1ccf0:	2007883a 	mov	r3,r4
   1ccf4:	100b883a 	mov	r5,r2
   1ccf8:	180d883a 	mov	r6,r3
   1ccfc:	9145883a 	add	r2,r18,r5
   1cd00:	1489803a 	cmpltu	r4,r2,r18
   1cd04:	9987883a 	add	r3,r19,r6
   1cd08:	20c9883a 	add	r4,r4,r3
   1cd0c:	2007883a 	mov	r3,r4
   1cd10:	100f883a 	mov	r7,r2
   1cd14:	1811883a 	mov	r8,r3
    VERIFY_BITS(t6, 26);
    VERIFY_BITS(c, 39);
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[7]
   1cd18:	e13e6a17 	ldw	r4,-1624(fp)
   1cd1c:	e17e6b17 	ldw	r5,-1620(fp)
   1cd20:	21c5883a 	add	r2,r4,r7
   1cd24:	110d803a 	cmpltu	r6,r2,r4
   1cd28:	2a07883a 	add	r3,r5,r8
   1cd2c:	30c9883a 	add	r4,r6,r3
   1cd30:	2007883a 	mov	r3,r4
   1cd34:	e0be6a15 	stw	r2,-1624(fp)
   1cd38:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[6]
       + (uint64_t)(a[2]*2) * a[5]
       + (uint64_t)(a[3]*2) * a[4];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x8000007C00000007ULL);
   1cd3c:	01000044 	movi	r4,1
   1cd40:	e0fe6b17 	ldw	r3,-1620(fp)
   1cd44:	00a00034 	movhi	r2,32768
   1cd48:	10801f04 	addi	r2,r2,124
   1cd4c:	10c00836 	bltu	r2,r3,1cd70 <secp256k1_fe_sqr_inner+0x3058>
   1cd50:	e0fe6b17 	ldw	r3,-1620(fp)
   1cd54:	00a00034 	movhi	r2,32768
   1cd58:	10801f04 	addi	r2,r2,124
   1cd5c:	1880031e 	bne	r3,r2,1cd6c <secp256k1_fe_sqr_inner+0x3054>
   1cd60:	e0be6a17 	ldw	r2,-1624(fp)
   1cd64:	10800228 	cmpgeui	r2,r2,8
   1cd68:	1000011e 	bne	r2,zero,1cd70 <secp256k1_fe_sqr_inner+0x3058>
   1cd6c:	0009883a 	mov	r4,zero
   1cd70:	20803fcc 	andi	r2,r4,255
   1cd74:	10000d26 	beq	r2,zero,1cdac <secp256k1_fe_sqr_inner+0x3094>
   1cd78:	d0a01617 	ldw	r2,-32680(gp)
   1cd7c:	10c00317 	ldw	r3,12(r2)
   1cd80:	008001b4 	movhi	r2,6
   1cd84:	10ada504 	addi	r2,r2,-18796
   1cd88:	d8800015 	stw	r2,0(sp)
   1cd8c:	01c0ef04 	movi	r7,956
   1cd90:	018001b4 	movhi	r6,6
   1cd94:	31ab2d04 	addi	r6,r6,-21324
   1cd98:	014001b4 	movhi	r5,6
   1cd9c:	296b3804 	addi	r5,r5,-21280
   1cda0:	1809883a 	mov	r4,r3
   1cda4:	00452600 	call	45260 <fprintf>
   1cda8:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[8]*2) * a[9];
   1cdac:	e0be8717 	ldw	r2,-1508(fp)
   1cdb0:	10800804 	addi	r2,r2,32
   1cdb4:	10800017 	ldw	r2,0(r2)
   1cdb8:	1085883a 	add	r2,r2,r2
   1cdbc:	e0bfa215 	stw	r2,-376(fp)
   1cdc0:	e03fa315 	stw	zero,-372(fp)
   1cdc4:	e0be8717 	ldw	r2,-1508(fp)
   1cdc8:	10800904 	addi	r2,r2,36
   1cdcc:	10800017 	ldw	r2,0(r2)
   1cdd0:	e0bfa415 	stw	r2,-368(fp)
   1cdd4:	e03fa515 	stw	zero,-364(fp)
   1cdd8:	e1bfa417 	ldw	r6,-368(fp)
   1cddc:	e1ffa517 	ldw	r7,-364(fp)
   1cde0:	e13fa217 	ldw	r4,-376(fp)
   1cde4:	e17fa317 	ldw	r5,-372(fp)
   1cde8:	00429400 	call	42940 <__muldi3>
   1cdec:	1009883a 	mov	r4,r2
   1cdf0:	180b883a 	mov	r5,r3
   1cdf4:	200f883a 	mov	r7,r4
   1cdf8:	2811883a 	mov	r8,r5
   1cdfc:	e13e6717 	ldw	r4,-1636(fp)
   1ce00:	e17e6817 	ldw	r5,-1632(fp)
   1ce04:	21c5883a 	add	r2,r4,r7
   1ce08:	110d803a 	cmpltu	r6,r2,r4
   1ce0c:	2a07883a 	add	r3,r5,r8
   1ce10:	30c9883a 	add	r4,r6,r3
   1ce14:	2007883a 	mov	r3,r4
   1ce18:	e0be6715 	stw	r2,-1636(fp)
   1ce1c:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 58);
   1ce20:	e0be6817 	ldw	r2,-1632(fp)
   1ce24:	1004d6ba 	srli	r2,r2,26
   1ce28:	e0bfa615 	stw	r2,-360(fp)
   1ce2c:	e03fa715 	stw	zero,-356(fp)
   1ce30:	e13fa617 	ldw	r4,-360(fp)
   1ce34:	e1bfa717 	ldw	r6,-356(fp)
   1ce38:	2184b03a 	or	r2,r4,r6
   1ce3c:	1004c03a 	cmpne	r2,r2,zero
   1ce40:	10803fcc 	andi	r2,r2,255
   1ce44:	10000d26 	beq	r2,zero,1ce7c <secp256k1_fe_sqr_inner+0x3164>
   1ce48:	d0a01617 	ldw	r2,-32680(gp)
   1ce4c:	10c00317 	ldw	r3,12(r2)
   1ce50:	008001b4 	movhi	r2,6
   1ce54:	10adb204 	addi	r2,r2,-18744
   1ce58:	d8800015 	stw	r2,0(sp)
   1ce5c:	01c0efc4 	movi	r7,959
   1ce60:	018001b4 	movhi	r6,6
   1ce64:	31ab2d04 	addi	r6,r6,-21324
   1ce68:	014001b4 	movhi	r5,6
   1ce6c:	296b3804 	addi	r5,r5,-21280
   1ce70:	1809883a 	mov	r4,r3
   1ce74:	00452600 	call	45260 <fprintf>
   1ce78:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    u7 = d & M; d >>= 26; c += u7 * R0;
   1ce7c:	e0be6417 	ldw	r2,-1648(fp)
   1ce80:	e0bfa815 	stw	r2,-352(fp)
   1ce84:	e03fa915 	stw	zero,-348(fp)
   1ce88:	e0be6717 	ldw	r2,-1636(fp)
   1ce8c:	e1ffa817 	ldw	r7,-352(fp)
   1ce90:	11c4703a 	and	r2,r2,r7
   1ce94:	e0be8115 	stw	r2,-1532(fp)
   1ce98:	e0be6817 	ldw	r2,-1632(fp)
   1ce9c:	e0ffa917 	ldw	r3,-348(fp)
   1cea0:	10c4703a 	and	r2,r2,r3
   1cea4:	e0be8215 	stw	r2,-1528(fp)
   1cea8:	e0be6817 	ldw	r2,-1632(fp)
   1ceac:	100691ba 	slli	r3,r2,6
   1ceb0:	e0be6717 	ldw	r2,-1636(fp)
   1ceb4:	1004d6ba 	srli	r2,r2,26
   1ceb8:	10c4b03a 	or	r2,r2,r3
   1cebc:	e0be6715 	stw	r2,-1636(fp)
   1cec0:	e0be6817 	ldw	r2,-1632(fp)
   1cec4:	1004d6ba 	srli	r2,r2,26
   1cec8:	e0be6815 	stw	r2,-1632(fp)
   1cecc:	e0be6517 	ldw	r2,-1644(fp)
   1ced0:	e0bfaa15 	stw	r2,-344(fp)
   1ced4:	e03fab15 	stw	zero,-340(fp)
   1ced8:	e1be8117 	ldw	r6,-1532(fp)
   1cedc:	e1fe8217 	ldw	r7,-1528(fp)
   1cee0:	e13faa17 	ldw	r4,-344(fp)
   1cee4:	e17fab17 	ldw	r5,-340(fp)
   1cee8:	00429400 	call	42940 <__muldi3>
   1ceec:	1009883a 	mov	r4,r2
   1cef0:	180b883a 	mov	r5,r3
   1cef4:	200f883a 	mov	r7,r4
   1cef8:	2811883a 	mov	r8,r5
   1cefc:	e13e6a17 	ldw	r4,-1624(fp)
   1cf00:	e17e6b17 	ldw	r5,-1620(fp)
   1cf04:	21c5883a 	add	r2,r4,r7
   1cf08:	110d803a 	cmpltu	r6,r2,r4
   1cf0c:	2a07883a 	add	r3,r5,r8
   1cf10:	30c9883a 	add	r4,r6,r3
   1cf14:	2007883a 	mov	r3,r4
   1cf18:	e0be6a15 	stw	r2,-1624(fp)
   1cf1c:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u7, 26);
   1cf20:	e0be8217 	ldw	r2,-1528(fp)
   1cf24:	100691ba 	slli	r3,r2,6
   1cf28:	e0be8117 	ldw	r2,-1532(fp)
   1cf2c:	1004d6ba 	srli	r2,r2,26
   1cf30:	e0bfac15 	stw	r2,-336(fp)
   1cf34:	e13fac17 	ldw	r4,-336(fp)
   1cf38:	1906b03a 	or	r3,r3,r4
   1cf3c:	e0ffac15 	stw	r3,-336(fp)
   1cf40:	e0be8217 	ldw	r2,-1528(fp)
   1cf44:	1004d6ba 	srli	r2,r2,26
   1cf48:	e0bfad15 	stw	r2,-332(fp)
   1cf4c:	e1bfac17 	ldw	r6,-336(fp)
   1cf50:	e1ffad17 	ldw	r7,-332(fp)
   1cf54:	31c4b03a 	or	r2,r6,r7
   1cf58:	1004c03a 	cmpne	r2,r2,zero
   1cf5c:	10803fcc 	andi	r2,r2,255
   1cf60:	10000d26 	beq	r2,zero,1cf98 <secp256k1_fe_sqr_inner+0x3280>
   1cf64:	d0a01617 	ldw	r2,-32680(gp)
   1cf68:	10c00317 	ldw	r3,12(r2)
   1cf6c:	008001b4 	movhi	r2,6
   1cf70:	10adbd04 	addi	r2,r2,-18700
   1cf74:	d8800015 	stw	r2,0(sp)
   1cf78:	01c0f084 	movi	r7,962
   1cf7c:	018001b4 	movhi	r6,6
   1cf80:	31ab2d04 	addi	r6,r6,-21324
   1cf84:	014001b4 	movhi	r5,6
   1cf88:	296b3804 	addi	r5,r5,-21280
   1cf8c:	1809883a 	mov	r4,r3
   1cf90:	00452600 	call	45260 <fprintf>
   1cf94:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 32);
   1cf98:	e0be6817 	ldw	r2,-1632(fp)
   1cf9c:	1004d83a 	srl	r2,r2,zero
   1cfa0:	e0bfae15 	stw	r2,-328(fp)
   1cfa4:	e03faf15 	stw	zero,-324(fp)
   1cfa8:	e0ffae17 	ldw	r3,-328(fp)
   1cfac:	e13faf17 	ldw	r4,-324(fp)
   1cfb0:	1904b03a 	or	r2,r3,r4
   1cfb4:	1004c03a 	cmpne	r2,r2,zero
   1cfb8:	10803fcc 	andi	r2,r2,255
   1cfbc:	10000d26 	beq	r2,zero,1cff4 <secp256k1_fe_sqr_inner+0x32dc>
   1cfc0:	d0a01617 	ldw	r2,-32680(gp)
   1cfc4:	10c00317 	ldw	r3,12(r2)
   1cfc8:	008001b4 	movhi	r2,6
   1cfcc:	10adc804 	addi	r2,r2,-18656
   1cfd0:	d8800015 	stw	r2,0(sp)
   1cfd4:	01c0f0c4 	movi	r7,963
   1cfd8:	018001b4 	movhi	r6,6
   1cfdc:	31ab2d04 	addi	r6,r6,-21324
   1cfe0:	014001b4 	movhi	r5,6
   1cfe4:	296b3804 	addi	r5,r5,-21280
   1cfe8:	1809883a 	mov	r4,r3
   1cfec:	00452600 	call	45260 <fprintf>
   1cff0:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x800001703FFFC2F7ULL);
   1cff4:	01000044 	movi	r4,1
   1cff8:	e0fe6b17 	ldw	r3,-1620(fp)
   1cffc:	00a00034 	movhi	r2,32768
   1d000:	10805c04 	addi	r2,r2,368
   1d004:	10c00936 	bltu	r2,r3,1d02c <secp256k1_fe_sqr_inner+0x3314>
   1d008:	e0fe6b17 	ldw	r3,-1620(fp)
   1d00c:	00a00034 	movhi	r2,32768
   1d010:	10805c04 	addi	r2,r2,368
   1d014:	1880041e 	bne	r3,r2,1d028 <secp256k1_fe_sqr_inner+0x3310>
   1d018:	e0fe6a17 	ldw	r3,-1624(fp)
   1d01c:	00900034 	movhi	r2,16384
   1d020:	10b0bdc4 	addi	r2,r2,-15625
   1d024:	10c00136 	bltu	r2,r3,1d02c <secp256k1_fe_sqr_inner+0x3314>
   1d028:	0009883a 	mov	r4,zero
   1d02c:	20803fcc 	andi	r2,r4,255
   1d030:	10000d26 	beq	r2,zero,1d068 <secp256k1_fe_sqr_inner+0x3350>
   1d034:	d0a01617 	ldw	r2,-32680(gp)
   1d038:	10c00317 	ldw	r3,12(r2)
   1d03c:	008001b4 	movhi	r2,6
   1d040:	10add304 	addi	r2,r2,-18612
   1d044:	d8800015 	stw	r2,0(sp)
   1d048:	01c0f144 	movi	r7,965
   1d04c:	018001b4 	movhi	r6,6
   1d050:	31ab2d04 	addi	r6,r6,-21324
   1d054:	014001b4 	movhi	r5,6
   1d058:	296b3804 	addi	r5,r5,-21280
   1d05c:	1809883a 	mov	r4,r3
   1d060:	00452600 	call	45260 <fprintf>
   1d064:	00450340 	call	45034 <abort>
    /* [d u7 0 0 0 0 0 0 0 t9 0 c-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    t7 = c & M; c >>= 26; c += u7 * R1;
   1d068:	e0fe6a17 	ldw	r3,-1624(fp)
   1d06c:	e0be6417 	ldw	r2,-1648(fp)
   1d070:	1884703a 	and	r2,r3,r2
   1d074:	e0be8315 	stw	r2,-1524(fp)
   1d078:	e0be6b17 	ldw	r2,-1620(fp)
   1d07c:	100691ba 	slli	r3,r2,6
   1d080:	e0be6a17 	ldw	r2,-1624(fp)
   1d084:	1004d6ba 	srli	r2,r2,26
   1d088:	10c4b03a 	or	r2,r2,r3
   1d08c:	e0be6a15 	stw	r2,-1624(fp)
   1d090:	e0be6b17 	ldw	r2,-1620(fp)
   1d094:	1004d6ba 	srli	r2,r2,26
   1d098:	e0be6b15 	stw	r2,-1620(fp)
   1d09c:	e0be6617 	ldw	r2,-1640(fp)
   1d0a0:	e0bfb015 	stw	r2,-320(fp)
   1d0a4:	e03fb115 	stw	zero,-316(fp)
   1d0a8:	e1be8117 	ldw	r6,-1532(fp)
   1d0ac:	e1fe8217 	ldw	r7,-1528(fp)
   1d0b0:	e13fb017 	ldw	r4,-320(fp)
   1d0b4:	e17fb117 	ldw	r5,-316(fp)
   1d0b8:	00429400 	call	42940 <__muldi3>
   1d0bc:	1009883a 	mov	r4,r2
   1d0c0:	180b883a 	mov	r5,r3
   1d0c4:	200f883a 	mov	r7,r4
   1d0c8:	2811883a 	mov	r8,r5
   1d0cc:	e13e6a17 	ldw	r4,-1624(fp)
   1d0d0:	e17e6b17 	ldw	r5,-1620(fp)
   1d0d4:	21c5883a 	add	r2,r4,r7
   1d0d8:	110d803a 	cmpltu	r6,r2,r4
   1d0dc:	2a07883a 	add	r3,r5,r8
   1d0e0:	30c9883a 	add	r4,r6,r3
   1d0e4:	2007883a 	mov	r3,r4
   1d0e8:	e0be6a15 	stw	r2,-1624(fp)
   1d0ec:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t7, 26);
   1d0f0:	e0be8317 	ldw	r2,-1524(fp)
   1d0f4:	1004d6ba 	srli	r2,r2,26
   1d0f8:	1004c03a 	cmpne	r2,r2,zero
   1d0fc:	10803fcc 	andi	r2,r2,255
   1d100:	10000d26 	beq	r2,zero,1d138 <secp256k1_fe_sqr_inner+0x3420>
   1d104:	d0a01617 	ldw	r2,-32680(gp)
   1d108:	10c00317 	ldw	r3,12(r2)
   1d10c:	008001b4 	movhi	r2,6
   1d110:	10ade004 	addi	r2,r2,-18560
   1d114:	d8800015 	stw	r2,0(sp)
   1d118:	01c0f204 	movi	r7,968
   1d11c:	018001b4 	movhi	r6,6
   1d120:	31ab2d04 	addi	r6,r6,-21324
   1d124:	014001b4 	movhi	r5,6
   1d128:	296b3804 	addi	r5,r5,-21280
   1d12c:	1809883a 	mov	r4,r3
   1d130:	00452600 	call	45260 <fprintf>
   1d134:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 38);
   1d138:	e0be6b17 	ldw	r2,-1620(fp)
   1d13c:	1004d1ba 	srli	r2,r2,6
   1d140:	e0bfb215 	stw	r2,-312(fp)
   1d144:	e03fb315 	stw	zero,-308(fp)
   1d148:	e1bfb217 	ldw	r6,-312(fp)
   1d14c:	e1ffb317 	ldw	r7,-308(fp)
   1d150:	31c4b03a 	or	r2,r6,r7
   1d154:	1004c03a 	cmpne	r2,r2,zero
   1d158:	10803fcc 	andi	r2,r2,255
   1d15c:	10000d26 	beq	r2,zero,1d194 <secp256k1_fe_sqr_inner+0x347c>
   1d160:	d0a01617 	ldw	r2,-32680(gp)
   1d164:	10c00317 	ldw	r3,12(r2)
   1d168:	008001b4 	movhi	r2,6
   1d16c:	10acf504 	addi	r2,r2,-19500
   1d170:	d8800015 	stw	r2,0(sp)
   1d174:	01c0f244 	movi	r7,969
   1d178:	018001b4 	movhi	r6,6
   1d17c:	31ab2d04 	addi	r6,r6,-21324
   1d180:	014001b4 	movhi	r5,6
   1d184:	296b3804 	addi	r5,r5,-21280
   1d188:	1809883a 	mov	r4,r3
   1d18c:	00452600 	call	45260 <fprintf>
   1d190:	00450340 	call	45034 <abort>
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[8]
   1d194:	e0be8717 	ldw	r2,-1508(fp)
   1d198:	10800017 	ldw	r2,0(r2)
   1d19c:	1085883a 	add	r2,r2,r2
   1d1a0:	e0bfb415 	stw	r2,-304(fp)
   1d1a4:	e03fb515 	stw	zero,-300(fp)
   1d1a8:	e0be8717 	ldw	r2,-1508(fp)
   1d1ac:	10800804 	addi	r2,r2,32
   1d1b0:	10800017 	ldw	r2,0(r2)
   1d1b4:	e0bfb615 	stw	r2,-296(fp)
   1d1b8:	e03fb715 	stw	zero,-292(fp)
   1d1bc:	e1bfb617 	ldw	r6,-296(fp)
   1d1c0:	e1ffb717 	ldw	r7,-292(fp)
   1d1c4:	e13fb417 	ldw	r4,-304(fp)
   1d1c8:	e17fb517 	ldw	r5,-300(fp)
   1d1cc:	00429400 	call	42940 <__muldi3>
   1d1d0:	1009883a 	mov	r4,r2
   1d1d4:	180b883a 	mov	r5,r3
   1d1d8:	2021883a 	mov	r16,r4
   1d1dc:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[7]
   1d1e0:	e0be8717 	ldw	r2,-1508(fp)
   1d1e4:	10800104 	addi	r2,r2,4
   1d1e8:	10800017 	ldw	r2,0(r2)
   1d1ec:	1085883a 	add	r2,r2,r2
   1d1f0:	e0bfb815 	stw	r2,-288(fp)
   1d1f4:	e03fb915 	stw	zero,-284(fp)
   1d1f8:	e0be8717 	ldw	r2,-1508(fp)
   1d1fc:	10800704 	addi	r2,r2,28
   1d200:	10800017 	ldw	r2,0(r2)
   1d204:	e0bfba15 	stw	r2,-280(fp)
   1d208:	e03fbb15 	stw	zero,-276(fp)
   1d20c:	e1bfba17 	ldw	r6,-280(fp)
   1d210:	e1ffbb17 	ldw	r7,-276(fp)
   1d214:	e13fb817 	ldw	r4,-288(fp)
   1d218:	e17fb917 	ldw	r5,-284(fp)
   1d21c:	00429400 	call	42940 <__muldi3>
   1d220:	100f883a 	mov	r7,r2
   1d224:	1811883a 	mov	r8,r3
   1d228:	380b883a 	mov	r5,r7
   1d22c:	400d883a 	mov	r6,r8
   1d230:	8145883a 	add	r2,r16,r5
   1d234:	1409803a 	cmpltu	r4,r2,r16
   1d238:	8987883a 	add	r3,r17,r6
   1d23c:	20c9883a 	add	r4,r4,r3
   1d240:	2007883a 	mov	r3,r4
   1d244:	1025883a 	mov	r18,r2
   1d248:	1827883a 	mov	r19,r3
       + (uint64_t)(a[2]*2) * a[6]
       + (uint64_t)(a[3]*2) * a[5]
   1d24c:	e0be8717 	ldw	r2,-1508(fp)
   1d250:	10800304 	addi	r2,r2,12
   1d254:	10800017 	ldw	r2,0(r2)
   1d258:	1085883a 	add	r2,r2,r2
   1d25c:	e0bfbc15 	stw	r2,-272(fp)
   1d260:	e03fbd15 	stw	zero,-268(fp)
   1d264:	e0be8717 	ldw	r2,-1508(fp)
   1d268:	10800504 	addi	r2,r2,20
   1d26c:	10800017 	ldw	r2,0(r2)
   1d270:	e0bfbe15 	stw	r2,-264(fp)
   1d274:	e03fbf15 	stw	zero,-260(fp)
   1d278:	e1bfbe17 	ldw	r6,-264(fp)
   1d27c:	e1ffbf17 	ldw	r7,-260(fp)
   1d280:	e13fbc17 	ldw	r4,-272(fp)
   1d284:	e17fbd17 	ldw	r5,-268(fp)
   1d288:	00429400 	call	42940 <__muldi3>
   1d28c:	1009883a 	mov	r4,r2
   1d290:	180b883a 	mov	r5,r3
   1d294:	2021883a 	mov	r16,r4
   1d298:	2823883a 	mov	r17,r5
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[8]
       + (uint64_t)(a[1]*2) * a[7]
       + (uint64_t)(a[2]*2) * a[6]
   1d29c:	e0be8717 	ldw	r2,-1508(fp)
   1d2a0:	10800204 	addi	r2,r2,8
   1d2a4:	10800017 	ldw	r2,0(r2)
   1d2a8:	1085883a 	add	r2,r2,r2
   1d2ac:	e0bfc015 	stw	r2,-256(fp)
   1d2b0:	e03fc115 	stw	zero,-252(fp)
   1d2b4:	e0be8717 	ldw	r2,-1508(fp)
   1d2b8:	10800604 	addi	r2,r2,24
   1d2bc:	10800017 	ldw	r2,0(r2)
   1d2c0:	e0bfc215 	stw	r2,-248(fp)
   1d2c4:	e03fc315 	stw	zero,-244(fp)
   1d2c8:	e1bfc217 	ldw	r6,-248(fp)
   1d2cc:	e1ffc317 	ldw	r7,-244(fp)
   1d2d0:	e13fc017 	ldw	r4,-256(fp)
   1d2d4:	e17fc117 	ldw	r5,-252(fp)
   1d2d8:	00429400 	call	42940 <__muldi3>
   1d2dc:	100f883a 	mov	r7,r2
   1d2e0:	1811883a 	mov	r8,r3
   1d2e4:	380b883a 	mov	r5,r7
   1d2e8:	400d883a 	mov	r6,r8
       + (uint64_t)(a[3]*2) * a[5]
   1d2ec:	8145883a 	add	r2,r16,r5
   1d2f0:	1409803a 	cmpltu	r4,r2,r16
   1d2f4:	8987883a 	add	r3,r17,r6
   1d2f8:	20c9883a 	add	r4,r4,r3
   1d2fc:	2007883a 	mov	r3,r4
   1d300:	100b883a 	mov	r5,r2
   1d304:	180d883a 	mov	r6,r3
   1d308:	9145883a 	add	r2,r18,r5
   1d30c:	1489803a 	cmpltu	r4,r2,r18
   1d310:	9987883a 	add	r3,r19,r6
   1d314:	20c9883a 	add	r4,r4,r3
   1d318:	2007883a 	mov	r3,r4
   1d31c:	1021883a 	mov	r16,r2
   1d320:	1823883a 	mov	r17,r3
       + (uint64_t)a[4] * a[4];
   1d324:	e0be8717 	ldw	r2,-1508(fp)
   1d328:	10800404 	addi	r2,r2,16
   1d32c:	10800017 	ldw	r2,0(r2)
   1d330:	e0bfc415 	stw	r2,-240(fp)
   1d334:	e03fc515 	stw	zero,-236(fp)
   1d338:	e0be8717 	ldw	r2,-1508(fp)
   1d33c:	10800404 	addi	r2,r2,16
   1d340:	10800017 	ldw	r2,0(r2)
   1d344:	e0bfc615 	stw	r2,-232(fp)
   1d348:	e03fc715 	stw	zero,-228(fp)
   1d34c:	e1bfc617 	ldw	r6,-232(fp)
   1d350:	e1ffc717 	ldw	r7,-228(fp)
   1d354:	e13fc417 	ldw	r4,-240(fp)
   1d358:	e17fc517 	ldw	r5,-236(fp)
   1d35c:	00429400 	call	42940 <__muldi3>
   1d360:	100f883a 	mov	r7,r2
   1d364:	1811883a 	mov	r8,r3
   1d368:	380b883a 	mov	r5,r7
   1d36c:	400d883a 	mov	r6,r8
   1d370:	8145883a 	add	r2,r16,r5
   1d374:	1409803a 	cmpltu	r4,r2,r16
   1d378:	8987883a 	add	r3,r17,r6
   1d37c:	20c9883a 	add	r4,r4,r3
   1d380:	2007883a 	mov	r3,r4
   1d384:	100f883a 	mov	r7,r2
   1d388:	1811883a 	mov	r8,r3
    VERIFY_BITS(t7, 26);
    VERIFY_BITS(c, 38);
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[8]
   1d38c:	e13e6a17 	ldw	r4,-1624(fp)
   1d390:	e17e6b17 	ldw	r5,-1620(fp)
   1d394:	21c5883a 	add	r2,r4,r7
   1d398:	110d803a 	cmpltu	r6,r2,r4
   1d39c:	2a07883a 	add	r3,r5,r8
   1d3a0:	30c9883a 	add	r4,r6,r3
   1d3a4:	2007883a 	mov	r3,r4
   1d3a8:	e0be6a15 	stw	r2,-1624(fp)
   1d3ac:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[7]
       + (uint64_t)(a[2]*2) * a[6]
       + (uint64_t)(a[3]*2) * a[5]
       + (uint64_t)a[4] * a[4];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x9000007B80000008ULL);
   1d3b0:	01000044 	movi	r4,1
   1d3b4:	e0fe6b17 	ldw	r3,-1620(fp)
   1d3b8:	00a40034 	movhi	r2,36864
   1d3bc:	10801ec4 	addi	r2,r2,123
   1d3c0:	10c00936 	bltu	r2,r3,1d3e8 <secp256k1_fe_sqr_inner+0x36d0>
   1d3c4:	e0fe6b17 	ldw	r3,-1620(fp)
   1d3c8:	00a40034 	movhi	r2,36864
   1d3cc:	10801ec4 	addi	r2,r2,123
   1d3d0:	1880041e 	bne	r3,r2,1d3e4 <secp256k1_fe_sqr_inner+0x36cc>
   1d3d4:	e0fe6a17 	ldw	r3,-1624(fp)
   1d3d8:	00a00034 	movhi	r2,32768
   1d3dc:	10800204 	addi	r2,r2,8
   1d3e0:	10c00136 	bltu	r2,r3,1d3e8 <secp256k1_fe_sqr_inner+0x36d0>
   1d3e4:	0009883a 	mov	r4,zero
   1d3e8:	20803fcc 	andi	r2,r4,255
   1d3ec:	10000d26 	beq	r2,zero,1d424 <secp256k1_fe_sqr_inner+0x370c>
   1d3f0:	d0a01617 	ldw	r2,-32680(gp)
   1d3f4:	10c00317 	ldw	r3,12(r2)
   1d3f8:	008001b4 	movhi	r2,6
   1d3fc:	10adeb04 	addi	r2,r2,-18516
   1d400:	d8800015 	stw	r2,0(sp)
   1d404:	01c0f4c4 	movi	r7,979
   1d408:	018001b4 	movhi	r6,6
   1d40c:	31ab2d04 	addi	r6,r6,-21324
   1d410:	014001b4 	movhi	r5,6
   1d414:	296b3804 	addi	r5,r5,-21280
   1d418:	1809883a 	mov	r4,r3
   1d41c:	00452600 	call	45260 <fprintf>
   1d420:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[9] * a[9];
   1d424:	e0be8717 	ldw	r2,-1508(fp)
   1d428:	10800904 	addi	r2,r2,36
   1d42c:	10800017 	ldw	r2,0(r2)
   1d430:	e0bfc815 	stw	r2,-224(fp)
   1d434:	e03fc915 	stw	zero,-220(fp)
   1d438:	e0be8717 	ldw	r2,-1508(fp)
   1d43c:	10800904 	addi	r2,r2,36
   1d440:	10800017 	ldw	r2,0(r2)
   1d444:	e0bfca15 	stw	r2,-216(fp)
   1d448:	e03fcb15 	stw	zero,-212(fp)
   1d44c:	e1bfca17 	ldw	r6,-216(fp)
   1d450:	e1ffcb17 	ldw	r7,-212(fp)
   1d454:	e13fc817 	ldw	r4,-224(fp)
   1d458:	e17fc917 	ldw	r5,-220(fp)
   1d45c:	00429400 	call	42940 <__muldi3>
   1d460:	1009883a 	mov	r4,r2
   1d464:	180b883a 	mov	r5,r3
   1d468:	200f883a 	mov	r7,r4
   1d46c:	2811883a 	mov	r8,r5
   1d470:	e13e6717 	ldw	r4,-1636(fp)
   1d474:	e17e6817 	ldw	r5,-1632(fp)
   1d478:	21c5883a 	add	r2,r4,r7
   1d47c:	110d803a 	cmpltu	r6,r2,r4
   1d480:	2a07883a 	add	r3,r5,r8
   1d484:	30c9883a 	add	r4,r6,r3
   1d488:	2007883a 	mov	r3,r4
   1d48c:	e0be6715 	stw	r2,-1636(fp)
   1d490:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 57);
   1d494:	e0be6817 	ldw	r2,-1632(fp)
   1d498:	1004d67a 	srli	r2,r2,25
   1d49c:	e0bfcc15 	stw	r2,-208(fp)
   1d4a0:	e03fcd15 	stw	zero,-204(fp)
   1d4a4:	e0ffcc17 	ldw	r3,-208(fp)
   1d4a8:	e13fcd17 	ldw	r4,-204(fp)
   1d4ac:	1904b03a 	or	r2,r3,r4
   1d4b0:	1004c03a 	cmpne	r2,r2,zero
   1d4b4:	10803fcc 	andi	r2,r2,255
   1d4b8:	10000d26 	beq	r2,zero,1d4f0 <secp256k1_fe_sqr_inner+0x37d8>
   1d4bc:	d0a01617 	ldw	r2,-32680(gp)
   1d4c0:	10c00317 	ldw	r3,12(r2)
   1d4c4:	008001b4 	movhi	r2,6
   1d4c8:	10adf804 	addi	r2,r2,-18464
   1d4cc:	d8800015 	stw	r2,0(sp)
   1d4d0:	01c0f584 	movi	r7,982
   1d4d4:	018001b4 	movhi	r6,6
   1d4d8:	31ab2d04 	addi	r6,r6,-21324
   1d4dc:	014001b4 	movhi	r5,6
   1d4e0:	296b3804 	addi	r5,r5,-21280
   1d4e4:	1809883a 	mov	r4,r3
   1d4e8:	00452600 	call	45260 <fprintf>
   1d4ec:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    u8 = d & M; d >>= 26; c += u8 * R0;
   1d4f0:	e0be6417 	ldw	r2,-1648(fp)
   1d4f4:	e0bfce15 	stw	r2,-200(fp)
   1d4f8:	e03fcf15 	stw	zero,-196(fp)
   1d4fc:	e0be6717 	ldw	r2,-1636(fp)
   1d500:	e1bfce17 	ldw	r6,-200(fp)
   1d504:	1184703a 	and	r2,r2,r6
   1d508:	e0be8415 	stw	r2,-1520(fp)
   1d50c:	e0be6817 	ldw	r2,-1632(fp)
   1d510:	e1ffcf17 	ldw	r7,-196(fp)
   1d514:	11c4703a 	and	r2,r2,r7
   1d518:	e0be8515 	stw	r2,-1516(fp)
   1d51c:	e0be6817 	ldw	r2,-1632(fp)
   1d520:	100691ba 	slli	r3,r2,6
   1d524:	e0be6717 	ldw	r2,-1636(fp)
   1d528:	1004d6ba 	srli	r2,r2,26
   1d52c:	10c4b03a 	or	r2,r2,r3
   1d530:	e0be6715 	stw	r2,-1636(fp)
   1d534:	e0be6817 	ldw	r2,-1632(fp)
   1d538:	1004d6ba 	srli	r2,r2,26
   1d53c:	e0be6815 	stw	r2,-1632(fp)
   1d540:	e0be6517 	ldw	r2,-1644(fp)
   1d544:	e0bfd015 	stw	r2,-192(fp)
   1d548:	e03fd115 	stw	zero,-188(fp)
   1d54c:	e1be8417 	ldw	r6,-1520(fp)
   1d550:	e1fe8517 	ldw	r7,-1516(fp)
   1d554:	e13fd017 	ldw	r4,-192(fp)
   1d558:	e17fd117 	ldw	r5,-188(fp)
   1d55c:	00429400 	call	42940 <__muldi3>
   1d560:	1009883a 	mov	r4,r2
   1d564:	180b883a 	mov	r5,r3
   1d568:	200f883a 	mov	r7,r4
   1d56c:	2811883a 	mov	r8,r5
   1d570:	e13e6a17 	ldw	r4,-1624(fp)
   1d574:	e17e6b17 	ldw	r5,-1620(fp)
   1d578:	21c5883a 	add	r2,r4,r7
   1d57c:	110d803a 	cmpltu	r6,r2,r4
   1d580:	2a07883a 	add	r3,r5,r8
   1d584:	30c9883a 	add	r4,r6,r3
   1d588:	2007883a 	mov	r3,r4
   1d58c:	e0be6a15 	stw	r2,-1624(fp)
   1d590:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u8, 26);
   1d594:	e0be8517 	ldw	r2,-1516(fp)
   1d598:	100691ba 	slli	r3,r2,6
   1d59c:	e0be8417 	ldw	r2,-1520(fp)
   1d5a0:	1004d6ba 	srli	r2,r2,26
   1d5a4:	e0bfd215 	stw	r2,-184(fp)
   1d5a8:	e0bfd217 	ldw	r2,-184(fp)
   1d5ac:	1886b03a 	or	r3,r3,r2
   1d5b0:	e0ffd215 	stw	r3,-184(fp)
   1d5b4:	e0be8517 	ldw	r2,-1516(fp)
   1d5b8:	1004d6ba 	srli	r2,r2,26
   1d5bc:	e0bfd315 	stw	r2,-180(fp)
   1d5c0:	e0ffd217 	ldw	r3,-184(fp)
   1d5c4:	e13fd317 	ldw	r4,-180(fp)
   1d5c8:	1904b03a 	or	r2,r3,r4
   1d5cc:	1004c03a 	cmpne	r2,r2,zero
   1d5d0:	10803fcc 	andi	r2,r2,255
   1d5d4:	10000d26 	beq	r2,zero,1d60c <secp256k1_fe_sqr_inner+0x38f4>
   1d5d8:	d0a01617 	ldw	r2,-32680(gp)
   1d5dc:	10c00317 	ldw	r3,12(r2)
   1d5e0:	008001b4 	movhi	r2,6
   1d5e4:	10ae0304 	addi	r2,r2,-18420
   1d5e8:	d8800015 	stw	r2,0(sp)
   1d5ec:	01c0f644 	movi	r7,985
   1d5f0:	018001b4 	movhi	r6,6
   1d5f4:	31ab2d04 	addi	r6,r6,-21324
   1d5f8:	014001b4 	movhi	r5,6
   1d5fc:	296b3804 	addi	r5,r5,-21280
   1d600:	1809883a 	mov	r4,r3
   1d604:	00452600 	call	45260 <fprintf>
   1d608:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 31);
   1d60c:	e0be6817 	ldw	r2,-1632(fp)
   1d610:	1006907a 	slli	r3,r2,1
   1d614:	e0be6717 	ldw	r2,-1636(fp)
   1d618:	1004d7fa 	srli	r2,r2,31
   1d61c:	e0bfd415 	stw	r2,-176(fp)
   1d620:	e1bfd417 	ldw	r6,-176(fp)
   1d624:	1986b03a 	or	r3,r3,r6
   1d628:	e0ffd415 	stw	r3,-176(fp)
   1d62c:	e0be6817 	ldw	r2,-1632(fp)
   1d630:	1004d7fa 	srli	r2,r2,31
   1d634:	e0bfd515 	stw	r2,-172(fp)
   1d638:	e1ffd417 	ldw	r7,-176(fp)
   1d63c:	e0ffd517 	ldw	r3,-172(fp)
   1d640:	38c4b03a 	or	r2,r7,r3
   1d644:	1004c03a 	cmpne	r2,r2,zero
   1d648:	10803fcc 	andi	r2,r2,255
   1d64c:	10000d26 	beq	r2,zero,1d684 <secp256k1_fe_sqr_inner+0x396c>
   1d650:	d0a01617 	ldw	r2,-32680(gp)
   1d654:	10c00317 	ldw	r3,12(r2)
   1d658:	008001b4 	movhi	r2,6
   1d65c:	10ae0e04 	addi	r2,r2,-18376
   1d660:	d8800015 	stw	r2,0(sp)
   1d664:	01c0f684 	movi	r7,986
   1d668:	018001b4 	movhi	r6,6
   1d66c:	31ab2d04 	addi	r6,r6,-21324
   1d670:	014001b4 	movhi	r5,6
   1d674:	296b3804 	addi	r5,r5,-21280
   1d678:	1809883a 	mov	r4,r3
   1d67c:	00452600 	call	45260 <fprintf>
   1d680:	00450340 	call	45034 <abort>
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x9000016FBFFFC2F8ULL);
   1d684:	01000044 	movi	r4,1
   1d688:	e0fe6b17 	ldw	r3,-1620(fp)
   1d68c:	00a40034 	movhi	r2,36864
   1d690:	10805bc4 	addi	r2,r2,367
   1d694:	10c00936 	bltu	r2,r3,1d6bc <secp256k1_fe_sqr_inner+0x39a4>
   1d698:	e0fe6b17 	ldw	r3,-1620(fp)
   1d69c:	00a40034 	movhi	r2,36864
   1d6a0:	10805bc4 	addi	r2,r2,367
   1d6a4:	1880041e 	bne	r3,r2,1d6b8 <secp256k1_fe_sqr_inner+0x39a0>
   1d6a8:	e0fe6a17 	ldw	r3,-1624(fp)
   1d6ac:	00b00034 	movhi	r2,49152
   1d6b0:	10b0be04 	addi	r2,r2,-15624
   1d6b4:	10c00136 	bltu	r2,r3,1d6bc <secp256k1_fe_sqr_inner+0x39a4>
   1d6b8:	0009883a 	mov	r4,zero
   1d6bc:	20803fcc 	andi	r2,r4,255
   1d6c0:	10000d26 	beq	r2,zero,1d6f8 <secp256k1_fe_sqr_inner+0x39e0>
   1d6c4:	d0a01617 	ldw	r2,-32680(gp)
   1d6c8:	10c00317 	ldw	r3,12(r2)
   1d6cc:	008001b4 	movhi	r2,6
   1d6d0:	10ae1904 	addi	r2,r2,-18332
   1d6d4:	d8800015 	stw	r2,0(sp)
   1d6d8:	01c0f704 	movi	r7,988
   1d6dc:	018001b4 	movhi	r6,6
   1d6e0:	31ab2d04 	addi	r6,r6,-21324
   1d6e4:	014001b4 	movhi	r5,6
   1d6e8:	296b3804 	addi	r5,r5,-21280
   1d6ec:	1809883a 	mov	r4,r3
   1d6f0:	00452600 	call	45260 <fprintf>
   1d6f4:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    r[3] = t3;
   1d6f8:	e0be8617 	ldw	r2,-1512(fp)
   1d6fc:	10c00304 	addi	r3,r2,12
   1d700:	e0be7717 	ldw	r2,-1572(fp)
   1d704:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[3], 26);
   1d708:	e0be8617 	ldw	r2,-1512(fp)
   1d70c:	10800304 	addi	r2,r2,12
   1d710:	10800017 	ldw	r2,0(r2)
   1d714:	1004d6ba 	srli	r2,r2,26
   1d718:	1004c03a 	cmpne	r2,r2,zero
   1d71c:	10803fcc 	andi	r2,r2,255
   1d720:	10000d26 	beq	r2,zero,1d758 <secp256k1_fe_sqr_inner+0x3a40>
   1d724:	d0a01617 	ldw	r2,-32680(gp)
   1d728:	10c00317 	ldw	r3,12(r2)
   1d72c:	008001b4 	movhi	r2,6
   1d730:	10ae2604 	addi	r2,r2,-18280
   1d734:	d8800015 	stw	r2,0(sp)
   1d738:	01c0f804 	movi	r7,992
   1d73c:	018001b4 	movhi	r6,6
   1d740:	31ab2d04 	addi	r6,r6,-21324
   1d744:	014001b4 	movhi	r5,6
   1d748:	296b3804 	addi	r5,r5,-21280
   1d74c:	1809883a 	mov	r4,r3
   1d750:	00452600 	call	45260 <fprintf>
   1d754:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[4] = t4;
   1d758:	e0be8617 	ldw	r2,-1512(fp)
   1d75c:	10c00404 	addi	r3,r2,16
   1d760:	e0be7a17 	ldw	r2,-1560(fp)
   1d764:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[4], 26);
   1d768:	e0be8617 	ldw	r2,-1512(fp)
   1d76c:	10800404 	addi	r2,r2,16
   1d770:	10800017 	ldw	r2,0(r2)
   1d774:	1004d6ba 	srli	r2,r2,26
   1d778:	1004c03a 	cmpne	r2,r2,zero
   1d77c:	10803fcc 	andi	r2,r2,255
   1d780:	10000d26 	beq	r2,zero,1d7b8 <secp256k1_fe_sqr_inner+0x3aa0>
   1d784:	d0a01617 	ldw	r2,-32680(gp)
   1d788:	10c00317 	ldw	r3,12(r2)
   1d78c:	008001b4 	movhi	r2,6
   1d790:	10ae3204 	addi	r2,r2,-18232
   1d794:	d8800015 	stw	r2,0(sp)
   1d798:	01c0f8c4 	movi	r7,995
   1d79c:	018001b4 	movhi	r6,6
   1d7a0:	31ab2d04 	addi	r6,r6,-21324
   1d7a4:	014001b4 	movhi	r5,6
   1d7a8:	296b3804 	addi	r5,r5,-21280
   1d7ac:	1809883a 	mov	r4,r3
   1d7b0:	00452600 	call	45260 <fprintf>
   1d7b4:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[5] = t5;
   1d7b8:	e0be8617 	ldw	r2,-1512(fp)
   1d7bc:	10c00504 	addi	r3,r2,20
   1d7c0:	e0be7d17 	ldw	r2,-1548(fp)
   1d7c4:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[5], 26);
   1d7c8:	e0be8617 	ldw	r2,-1512(fp)
   1d7cc:	10800504 	addi	r2,r2,20
   1d7d0:	10800017 	ldw	r2,0(r2)
   1d7d4:	1004d6ba 	srli	r2,r2,26
   1d7d8:	1004c03a 	cmpne	r2,r2,zero
   1d7dc:	10803fcc 	andi	r2,r2,255
   1d7e0:	10000d26 	beq	r2,zero,1d818 <secp256k1_fe_sqr_inner+0x3b00>
   1d7e4:	d0a01617 	ldw	r2,-32680(gp)
   1d7e8:	10c00317 	ldw	r3,12(r2)
   1d7ec:	008001b4 	movhi	r2,6
   1d7f0:	10ae3e04 	addi	r2,r2,-18184
   1d7f4:	d8800015 	stw	r2,0(sp)
   1d7f8:	01c0f984 	movi	r7,998
   1d7fc:	018001b4 	movhi	r6,6
   1d800:	31ab2d04 	addi	r6,r6,-21324
   1d804:	014001b4 	movhi	r5,6
   1d808:	296b3804 	addi	r5,r5,-21280
   1d80c:	1809883a 	mov	r4,r3
   1d810:	00452600 	call	45260 <fprintf>
   1d814:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[6] = t6;
   1d818:	e0be8617 	ldw	r2,-1512(fp)
   1d81c:	10c00604 	addi	r3,r2,24
   1d820:	e0be8017 	ldw	r2,-1536(fp)
   1d824:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[6], 26);
   1d828:	e0be8617 	ldw	r2,-1512(fp)
   1d82c:	10800604 	addi	r2,r2,24
   1d830:	10800017 	ldw	r2,0(r2)
   1d834:	1004d6ba 	srli	r2,r2,26
   1d838:	1004c03a 	cmpne	r2,r2,zero
   1d83c:	10803fcc 	andi	r2,r2,255
   1d840:	10000d26 	beq	r2,zero,1d878 <secp256k1_fe_sqr_inner+0x3b60>
   1d844:	d0a01617 	ldw	r2,-32680(gp)
   1d848:	10c00317 	ldw	r3,12(r2)
   1d84c:	008001b4 	movhi	r2,6
   1d850:	10ae4a04 	addi	r2,r2,-18136
   1d854:	d8800015 	stw	r2,0(sp)
   1d858:	01c0fa44 	movi	r7,1001
   1d85c:	018001b4 	movhi	r6,6
   1d860:	31ab2d04 	addi	r6,r6,-21324
   1d864:	014001b4 	movhi	r5,6
   1d868:	296b3804 	addi	r5,r5,-21280
   1d86c:	1809883a 	mov	r4,r3
   1d870:	00452600 	call	45260 <fprintf>
   1d874:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[7] = t7;
   1d878:	e0be8617 	ldw	r2,-1512(fp)
   1d87c:	10c00704 	addi	r3,r2,28
   1d880:	e0be8317 	ldw	r2,-1524(fp)
   1d884:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[7], 26);
   1d888:	e0be8617 	ldw	r2,-1512(fp)
   1d88c:	10800704 	addi	r2,r2,28
   1d890:	10800017 	ldw	r2,0(r2)
   1d894:	1004d6ba 	srli	r2,r2,26
   1d898:	1004c03a 	cmpne	r2,r2,zero
   1d89c:	10803fcc 	andi	r2,r2,255
   1d8a0:	10000d26 	beq	r2,zero,1d8d8 <secp256k1_fe_sqr_inner+0x3bc0>
   1d8a4:	d0a01617 	ldw	r2,-32680(gp)
   1d8a8:	10c00317 	ldw	r3,12(r2)
   1d8ac:	008001b4 	movhi	r2,6
   1d8b0:	10ae5604 	addi	r2,r2,-18088
   1d8b4:	d8800015 	stw	r2,0(sp)
   1d8b8:	01c0fb04 	movi	r7,1004
   1d8bc:	018001b4 	movhi	r6,6
   1d8c0:	31ab2d04 	addi	r6,r6,-21324
   1d8c4:	014001b4 	movhi	r5,6
   1d8c8:	296b3804 	addi	r5,r5,-21280
   1d8cc:	1809883a 	mov	r4,r3
   1d8d0:	00452600 	call	45260 <fprintf>
   1d8d4:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    r[8] = c & M; c >>= 26; c += u8 * R1;
   1d8d8:	e0be8617 	ldw	r2,-1512(fp)
   1d8dc:	11000804 	addi	r4,r2,32
   1d8e0:	e0fe6a17 	ldw	r3,-1624(fp)
   1d8e4:	e0be6417 	ldw	r2,-1648(fp)
   1d8e8:	1884703a 	and	r2,r3,r2
   1d8ec:	20800015 	stw	r2,0(r4)
   1d8f0:	e0be6b17 	ldw	r2,-1620(fp)
   1d8f4:	100691ba 	slli	r3,r2,6
   1d8f8:	e0be6a17 	ldw	r2,-1624(fp)
   1d8fc:	1004d6ba 	srli	r2,r2,26
   1d900:	10c4b03a 	or	r2,r2,r3
   1d904:	e0be6a15 	stw	r2,-1624(fp)
   1d908:	e0be6b17 	ldw	r2,-1620(fp)
   1d90c:	1004d6ba 	srli	r2,r2,26
   1d910:	e0be6b15 	stw	r2,-1620(fp)
   1d914:	e0be6617 	ldw	r2,-1640(fp)
   1d918:	e0bfd615 	stw	r2,-168(fp)
   1d91c:	e03fd715 	stw	zero,-164(fp)
   1d920:	e1be8417 	ldw	r6,-1520(fp)
   1d924:	e1fe8517 	ldw	r7,-1516(fp)
   1d928:	e13fd617 	ldw	r4,-168(fp)
   1d92c:	e17fd717 	ldw	r5,-164(fp)
   1d930:	00429400 	call	42940 <__muldi3>
   1d934:	1009883a 	mov	r4,r2
   1d938:	180b883a 	mov	r5,r3
   1d93c:	200f883a 	mov	r7,r4
   1d940:	2811883a 	mov	r8,r5
   1d944:	e13e6a17 	ldw	r4,-1624(fp)
   1d948:	e17e6b17 	ldw	r5,-1620(fp)
   1d94c:	21c5883a 	add	r2,r4,r7
   1d950:	110d803a 	cmpltu	r6,r2,r4
   1d954:	2a07883a 	add	r3,r5,r8
   1d958:	30c9883a 	add	r4,r6,r3
   1d95c:	2007883a 	mov	r3,r4
   1d960:	e0be6a15 	stw	r2,-1624(fp)
   1d964:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(r[8], 26);
   1d968:	e0be8617 	ldw	r2,-1512(fp)
   1d96c:	10800804 	addi	r2,r2,32
   1d970:	10800017 	ldw	r2,0(r2)
   1d974:	1004d6ba 	srli	r2,r2,26
   1d978:	1004c03a 	cmpne	r2,r2,zero
   1d97c:	10803fcc 	andi	r2,r2,255
   1d980:	10000d26 	beq	r2,zero,1d9b8 <secp256k1_fe_sqr_inner+0x3ca0>
   1d984:	d0a01617 	ldw	r2,-32680(gp)
   1d988:	10c00317 	ldw	r3,12(r2)
   1d98c:	008001b4 	movhi	r2,6
   1d990:	10ae6204 	addi	r2,r2,-18040
   1d994:	d8800015 	stw	r2,0(sp)
   1d998:	01c0fc04 	movi	r7,1008
   1d99c:	018001b4 	movhi	r6,6
   1d9a0:	31ab2d04 	addi	r6,r6,-21324
   1d9a4:	014001b4 	movhi	r5,6
   1d9a8:	296b3804 	addi	r5,r5,-21280
   1d9ac:	1809883a 	mov	r4,r3
   1d9b0:	00452600 	call	45260 <fprintf>
   1d9b4:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 39);
   1d9b8:	e0be6b17 	ldw	r2,-1620(fp)
   1d9bc:	1004d1fa 	srli	r2,r2,7
   1d9c0:	e0bfd815 	stw	r2,-160(fp)
   1d9c4:	e03fd915 	stw	zero,-156(fp)
   1d9c8:	e13fd817 	ldw	r4,-160(fp)
   1d9cc:	e1bfd917 	ldw	r6,-156(fp)
   1d9d0:	2184b03a 	or	r2,r4,r6
   1d9d4:	1004c03a 	cmpne	r2,r2,zero
   1d9d8:	10803fcc 	andi	r2,r2,255
   1d9dc:	10000d26 	beq	r2,zero,1da14 <secp256k1_fe_sqr_inner+0x3cfc>
   1d9e0:	d0a01617 	ldw	r2,-32680(gp)
   1d9e4:	10c00317 	ldw	r3,12(r2)
   1d9e8:	008001b4 	movhi	r2,6
   1d9ec:	10ad2c04 	addi	r2,r2,-19280
   1d9f0:	d8800015 	stw	r2,0(sp)
   1d9f4:	01c0fc44 	movi	r7,1009
   1d9f8:	018001b4 	movhi	r6,6
   1d9fc:	31ab2d04 	addi	r6,r6,-21324
   1da00:	014001b4 	movhi	r5,6
   1da04:	296b3804 	addi	r5,r5,-21280
   1da08:	1809883a 	mov	r4,r3
   1da0c:	00452600 	call	45260 <fprintf>
   1da10:	00450340 	call	45034 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9+c-u8*R1 r8-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 0 t9+c r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    c   += d * R0 + t9;
   1da14:	e0be6517 	ldw	r2,-1644(fp)
   1da18:	e0bfda15 	stw	r2,-152(fp)
   1da1c:	e03fdb15 	stw	zero,-148(fp)
   1da20:	e1be6717 	ldw	r6,-1636(fp)
   1da24:	e1fe6817 	ldw	r7,-1632(fp)
   1da28:	e13fda17 	ldw	r4,-152(fp)
   1da2c:	e17fdb17 	ldw	r5,-148(fp)
   1da30:	00429400 	call	42940 <__muldi3>
   1da34:	100f883a 	mov	r7,r2
   1da38:	1811883a 	mov	r8,r3
   1da3c:	380b883a 	mov	r5,r7
   1da40:	400d883a 	mov	r6,r8
   1da44:	e0be6917 	ldw	r2,-1628(fp)
   1da48:	e0bfdc15 	stw	r2,-144(fp)
   1da4c:	e03fdd15 	stw	zero,-140(fp)
   1da50:	e1ffdc17 	ldw	r7,-144(fp)
   1da54:	29c5883a 	add	r2,r5,r7
   1da58:	1149803a 	cmpltu	r4,r2,r5
   1da5c:	e1ffdd17 	ldw	r7,-140(fp)
   1da60:	31c7883a 	add	r3,r6,r7
   1da64:	20c9883a 	add	r4,r4,r3
   1da68:	2007883a 	mov	r3,r4
   1da6c:	100f883a 	mov	r7,r2
   1da70:	1811883a 	mov	r8,r3
   1da74:	e13e6a17 	ldw	r4,-1624(fp)
   1da78:	e17e6b17 	ldw	r5,-1620(fp)
   1da7c:	21c5883a 	add	r2,r4,r7
   1da80:	110d803a 	cmpltu	r6,r2,r4
   1da84:	2a07883a 	add	r3,r5,r8
   1da88:	30c9883a 	add	r4,r6,r3
   1da8c:	2007883a 	mov	r3,r4
   1da90:	e0be6a15 	stw	r2,-1624(fp)
   1da94:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(c, 45);
   1da98:	e0be6b17 	ldw	r2,-1620(fp)
   1da9c:	1004d37a 	srli	r2,r2,13
   1daa0:	e0bfde15 	stw	r2,-136(fp)
   1daa4:	e03fdf15 	stw	zero,-132(fp)
   1daa8:	e0ffde17 	ldw	r3,-136(fp)
   1daac:	e13fdf17 	ldw	r4,-132(fp)
   1dab0:	1904b03a 	or	r2,r3,r4
   1dab4:	1004c03a 	cmpne	r2,r2,zero
   1dab8:	10803fcc 	andi	r2,r2,255
   1dabc:	10000d26 	beq	r2,zero,1daf4 <secp256k1_fe_sqr_inner+0x3ddc>
   1dac0:	d0a01617 	ldw	r2,-32680(gp)
   1dac4:	10c00317 	ldw	r3,12(r2)
   1dac8:	008001b4 	movhi	r2,6
   1dacc:	10ae6e04 	addi	r2,r2,-17992
   1dad0:	d8800015 	stw	r2,0(sp)
   1dad4:	01c0fd44 	movi	r7,1013
   1dad8:	018001b4 	movhi	r6,6
   1dadc:	31ab2d04 	addi	r6,r6,-21324
   1dae0:	014001b4 	movhi	r5,6
   1dae4:	296b3804 	addi	r5,r5,-21280
   1dae8:	1809883a 	mov	r4,r3
   1daec:	00452600 	call	45260 <fprintf>
   1daf0:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 0 0 c-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[9] = c & (M >> 4); c >>= 22; c += d * (R1 << 4);
   1daf4:	e0be8617 	ldw	r2,-1512(fp)
   1daf8:	11000904 	addi	r4,r2,36
   1dafc:	e0be6417 	ldw	r2,-1648(fp)
   1db00:	1006d13a 	srli	r3,r2,4
   1db04:	e0be6a17 	ldw	r2,-1624(fp)
   1db08:	1884703a 	and	r2,r3,r2
   1db0c:	20800015 	stw	r2,0(r4)
   1db10:	e0be6b17 	ldw	r2,-1620(fp)
   1db14:	100692ba 	slli	r3,r2,10
   1db18:	e0be6a17 	ldw	r2,-1624(fp)
   1db1c:	1004d5ba 	srli	r2,r2,22
   1db20:	10c4b03a 	or	r2,r2,r3
   1db24:	e0be6a15 	stw	r2,-1624(fp)
   1db28:	e0be6b17 	ldw	r2,-1620(fp)
   1db2c:	1004d5ba 	srli	r2,r2,22
   1db30:	e0be6b15 	stw	r2,-1620(fp)
   1db34:	e0be6617 	ldw	r2,-1640(fp)
   1db38:	1004913a 	slli	r2,r2,4
   1db3c:	e0bfe015 	stw	r2,-128(fp)
   1db40:	e03fe115 	stw	zero,-124(fp)
   1db44:	e1be6717 	ldw	r6,-1636(fp)
   1db48:	e1fe6817 	ldw	r7,-1632(fp)
   1db4c:	e13fe017 	ldw	r4,-128(fp)
   1db50:	e17fe117 	ldw	r5,-124(fp)
   1db54:	00429400 	call	42940 <__muldi3>
   1db58:	1009883a 	mov	r4,r2
   1db5c:	180b883a 	mov	r5,r3
   1db60:	200f883a 	mov	r7,r4
   1db64:	2811883a 	mov	r8,r5
   1db68:	e13e6a17 	ldw	r4,-1624(fp)
   1db6c:	e17e6b17 	ldw	r5,-1620(fp)
   1db70:	21c5883a 	add	r2,r4,r7
   1db74:	110d803a 	cmpltu	r6,r2,r4
   1db78:	2a07883a 	add	r3,r5,r8
   1db7c:	30c9883a 	add	r4,r6,r3
   1db80:	2007883a 	mov	r3,r4
   1db84:	e0be6a15 	stw	r2,-1624(fp)
   1db88:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(r[9], 22);
   1db8c:	e0be8617 	ldw	r2,-1512(fp)
   1db90:	10800904 	addi	r2,r2,36
   1db94:	10800017 	ldw	r2,0(r2)
   1db98:	1004d5ba 	srli	r2,r2,22
   1db9c:	1004c03a 	cmpne	r2,r2,zero
   1dba0:	10803fcc 	andi	r2,r2,255
   1dba4:	10000d26 	beq	r2,zero,1dbdc <secp256k1_fe_sqr_inner+0x3ec4>
   1dba8:	d0a01617 	ldw	r2,-32680(gp)
   1dbac:	10c00317 	ldw	r3,12(r2)
   1dbb0:	008001b4 	movhi	r2,6
   1dbb4:	10ae7904 	addi	r2,r2,-17948
   1dbb8:	d8800015 	stw	r2,0(sp)
   1dbbc:	01c0fe04 	movi	r7,1016
   1dbc0:	018001b4 	movhi	r6,6
   1dbc4:	31ab2d04 	addi	r6,r6,-21324
   1dbc8:	014001b4 	movhi	r5,6
   1dbcc:	296b3804 	addi	r5,r5,-21280
   1dbd0:	1809883a 	mov	r4,r3
   1dbd4:	00452600 	call	45260 <fprintf>
   1dbd8:	00450340 	call	45034 <abort>
    VERIFY_BITS(c, 46);
   1dbdc:	e0be6b17 	ldw	r2,-1620(fp)
   1dbe0:	1004d3ba 	srli	r2,r2,14
   1dbe4:	e0bfe215 	stw	r2,-120(fp)
   1dbe8:	e03fe315 	stw	zero,-116(fp)
   1dbec:	e1bfe217 	ldw	r6,-120(fp)
   1dbf0:	e1ffe317 	ldw	r7,-116(fp)
   1dbf4:	31c4b03a 	or	r2,r6,r7
   1dbf8:	1004c03a 	cmpne	r2,r2,zero
   1dbfc:	10803fcc 	andi	r2,r2,255
   1dc00:	10000d26 	beq	r2,zero,1dc38 <secp256k1_fe_sqr_inner+0x3f20>
   1dc04:	d0a01617 	ldw	r2,-32680(gp)
   1dc08:	10c00317 	ldw	r3,12(r2)
   1dc0c:	008001b4 	movhi	r2,6
   1dc10:	10ae8504 	addi	r2,r2,-17900
   1dc14:	d8800015 	stw	r2,0(sp)
   1dc18:	01c0fe44 	movi	r7,1017
   1dc1c:	018001b4 	movhi	r6,6
   1dc20:	31ab2d04 	addi	r6,r6,-21324
   1dc24:	014001b4 	movhi	r5,6
   1dc28:	296b3804 	addi	r5,r5,-21280
   1dc2c:	1809883a 	mov	r4,r3
   1dc30:	00452600 	call	45260 <fprintf>
   1dc34:	00450340 	call	45034 <abort>
    /* [d 0 0 0 0 0 0 0 0 r9+((c-d*R1<<4)<<22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 -d*R1 r9+(c<<22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    d    = c * (R0 >> 4) + t0;
   1dc38:	e0be6517 	ldw	r2,-1644(fp)
   1dc3c:	1004d13a 	srli	r2,r2,4
   1dc40:	e0bfe415 	stw	r2,-112(fp)
   1dc44:	e03fe515 	stw	zero,-108(fp)
   1dc48:	e1be6a17 	ldw	r6,-1624(fp)
   1dc4c:	e1fe6b17 	ldw	r7,-1620(fp)
   1dc50:	e13fe417 	ldw	r4,-112(fp)
   1dc54:	e17fe517 	ldw	r5,-108(fp)
   1dc58:	00429400 	call	42940 <__muldi3>
   1dc5c:	100d883a 	mov	r6,r2
   1dc60:	180f883a 	mov	r7,r3
   1dc64:	3009883a 	mov	r4,r6
   1dc68:	380b883a 	mov	r5,r7
   1dc6c:	e0be6e17 	ldw	r2,-1608(fp)
   1dc70:	e0bfe615 	stw	r2,-104(fp)
   1dc74:	e03fe715 	stw	zero,-100(fp)
   1dc78:	e1bfe617 	ldw	r6,-104(fp)
   1dc7c:	2185883a 	add	r2,r4,r6
   1dc80:	110d803a 	cmpltu	r6,r2,r4
   1dc84:	e1ffe717 	ldw	r7,-100(fp)
   1dc88:	29c7883a 	add	r3,r5,r7
   1dc8c:	30c9883a 	add	r4,r6,r3
   1dc90:	2007883a 	mov	r3,r4
   1dc94:	e0be6715 	stw	r2,-1636(fp)
   1dc98:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 56);
   1dc9c:	e0be6817 	ldw	r2,-1632(fp)
   1dca0:	1004d63a 	srli	r2,r2,24
   1dca4:	e0bfe815 	stw	r2,-96(fp)
   1dca8:	e03fe915 	stw	zero,-92(fp)
   1dcac:	e0ffe817 	ldw	r3,-96(fp)
   1dcb0:	e13fe917 	ldw	r4,-92(fp)
   1dcb4:	1904b03a 	or	r2,r3,r4
   1dcb8:	1004c03a 	cmpne	r2,r2,zero
   1dcbc:	10803fcc 	andi	r2,r2,255
   1dcc0:	10000d26 	beq	r2,zero,1dcf8 <secp256k1_fe_sqr_inner+0x3fe0>
   1dcc4:	d0a01617 	ldw	r2,-32680(gp)
   1dcc8:	10c00317 	ldw	r3,12(r2)
   1dccc:	008001b4 	movhi	r2,6
   1dcd0:	10ae9004 	addi	r2,r2,-17856
   1dcd4:	d8800015 	stw	r2,0(sp)
   1dcd8:	01c0ffc4 	movi	r7,1023
   1dcdc:	018001b4 	movhi	r6,6
   1dce0:	31ab2d04 	addi	r6,r6,-21324
   1dce4:	014001b4 	movhi	r5,6
   1dce8:	296b3804 	addi	r5,r5,-21280
   1dcec:	1809883a 	mov	r4,r3
   1dcf0:	00452600 	call	45260 <fprintf>
   1dcf4:	00450340 	call	45034 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1 d-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[0] = d & M; d >>= 26;
   1dcf8:	e0fe6717 	ldw	r3,-1636(fp)
   1dcfc:	e0be6417 	ldw	r2,-1648(fp)
   1dd00:	1886703a 	and	r3,r3,r2
   1dd04:	e0be8617 	ldw	r2,-1512(fp)
   1dd08:	10c00015 	stw	r3,0(r2)
   1dd0c:	e0be6817 	ldw	r2,-1632(fp)
   1dd10:	100491ba 	slli	r2,r2,6
   1dd14:	e0fe6717 	ldw	r3,-1636(fp)
   1dd18:	1806d6ba 	srli	r3,r3,26
   1dd1c:	1884b03a 	or	r2,r3,r2
   1dd20:	e0be6715 	stw	r2,-1636(fp)
   1dd24:	e0be6817 	ldw	r2,-1632(fp)
   1dd28:	1004d6ba 	srli	r2,r2,26
   1dd2c:	e0be6815 	stw	r2,-1632(fp)
    VERIFY_BITS(r[0], 26);
   1dd30:	e0be8617 	ldw	r2,-1512(fp)
   1dd34:	10800017 	ldw	r2,0(r2)
   1dd38:	1004d6ba 	srli	r2,r2,26
   1dd3c:	1004c03a 	cmpne	r2,r2,zero
   1dd40:	10803fcc 	andi	r2,r2,255
   1dd44:	10000d26 	beq	r2,zero,1dd7c <secp256k1_fe_sqr_inner+0x4064>
   1dd48:	d0a01617 	ldw	r2,-32680(gp)
   1dd4c:	10c00317 	ldw	r3,12(r2)
   1dd50:	008001b4 	movhi	r2,6
   1dd54:	10ae9b04 	addi	r2,r2,-17812
   1dd58:	d8800015 	stw	r2,0(sp)
   1dd5c:	01c10084 	movi	r7,1026
   1dd60:	018001b4 	movhi	r6,6
   1dd64:	31ab2d04 	addi	r6,r6,-21324
   1dd68:	014001b4 	movhi	r5,6
   1dd6c:	296b3804 	addi	r5,r5,-21280
   1dd70:	1809883a 	mov	r4,r3
   1dd74:	00452600 	call	45260 <fprintf>
   1dd78:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 30);
   1dd7c:	e0be6817 	ldw	r2,-1632(fp)
   1dd80:	100490ba 	slli	r2,r2,2
   1dd84:	e0fe6717 	ldw	r3,-1636(fp)
   1dd88:	1806d7ba 	srli	r3,r3,30
   1dd8c:	e0ffea15 	stw	r3,-88(fp)
   1dd90:	e1bfea17 	ldw	r6,-88(fp)
   1dd94:	1184b03a 	or	r2,r2,r6
   1dd98:	e0bfea15 	stw	r2,-88(fp)
   1dd9c:	e0be6817 	ldw	r2,-1632(fp)
   1dda0:	1004d7ba 	srli	r2,r2,30
   1dda4:	e0bfeb15 	stw	r2,-84(fp)
   1dda8:	e1ffea17 	ldw	r7,-88(fp)
   1ddac:	e0ffeb17 	ldw	r3,-84(fp)
   1ddb0:	38c4b03a 	or	r2,r7,r3
   1ddb4:	1004c03a 	cmpne	r2,r2,zero
   1ddb8:	10803fcc 	andi	r2,r2,255
   1ddbc:	10000d26 	beq	r2,zero,1ddf4 <secp256k1_fe_sqr_inner+0x40dc>
   1ddc0:	d0a01617 	ldw	r2,-32680(gp)
   1ddc4:	10c00317 	ldw	r3,12(r2)
   1ddc8:	008001b4 	movhi	r2,6
   1ddcc:	10aea704 	addi	r2,r2,-17764
   1ddd0:	d8800015 	stw	r2,0(sp)
   1ddd4:	01c100c4 	movi	r7,1027
   1ddd8:	018001b4 	movhi	r6,6
   1dddc:	31ab2d04 	addi	r6,r6,-21324
   1dde0:	014001b4 	movhi	r5,6
   1dde4:	296b3804 	addi	r5,r5,-21280
   1dde8:	1809883a 	mov	r4,r3
   1ddec:	00452600 	call	45260 <fprintf>
   1ddf0:	00450340 	call	45034 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1+d r0-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d   += c * (R1 >> 4) + t1;
   1ddf4:	e0be6617 	ldw	r2,-1640(fp)
   1ddf8:	1004d13a 	srli	r2,r2,4
   1ddfc:	e0bfec15 	stw	r2,-80(fp)
   1de00:	e03fed15 	stw	zero,-76(fp)
   1de04:	e1be6a17 	ldw	r6,-1624(fp)
   1de08:	e1fe6b17 	ldw	r7,-1620(fp)
   1de0c:	e13fec17 	ldw	r4,-80(fp)
   1de10:	e17fed17 	ldw	r5,-76(fp)
   1de14:	00429400 	call	42940 <__muldi3>
   1de18:	100d883a 	mov	r6,r2
   1de1c:	180f883a 	mov	r7,r3
   1de20:	3009883a 	mov	r4,r6
   1de24:	380b883a 	mov	r5,r7
   1de28:	e0be7117 	ldw	r2,-1596(fp)
   1de2c:	e0bfee15 	stw	r2,-72(fp)
   1de30:	e03fef15 	stw	zero,-68(fp)
   1de34:	e1bfee17 	ldw	r6,-72(fp)
   1de38:	2185883a 	add	r2,r4,r6
   1de3c:	110d803a 	cmpltu	r6,r2,r4
   1de40:	e1ffef17 	ldw	r7,-68(fp)
   1de44:	29c7883a 	add	r3,r5,r7
   1de48:	30c9883a 	add	r4,r6,r3
   1de4c:	2007883a 	mov	r3,r4
   1de50:	100d883a 	mov	r6,r2
   1de54:	180f883a 	mov	r7,r3
   1de58:	e13e6717 	ldw	r4,-1636(fp)
   1de5c:	e17e6817 	ldw	r5,-1632(fp)
   1de60:	2185883a 	add	r2,r4,r6
   1de64:	1111803a 	cmpltu	r8,r2,r4
   1de68:	29c7883a 	add	r3,r5,r7
   1de6c:	40c9883a 	add	r4,r8,r3
   1de70:	2007883a 	mov	r3,r4
   1de74:	e0be6715 	stw	r2,-1636(fp)
   1de78:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 53);
   1de7c:	e0be6817 	ldw	r2,-1632(fp)
   1de80:	1004d57a 	srli	r2,r2,21
   1de84:	e0bff015 	stw	r2,-64(fp)
   1de88:	e03ff115 	stw	zero,-60(fp)
   1de8c:	e0fff017 	ldw	r3,-64(fp)
   1de90:	e13ff117 	ldw	r4,-60(fp)
   1de94:	1904b03a 	or	r2,r3,r4
   1de98:	1004c03a 	cmpne	r2,r2,zero
   1de9c:	10803fcc 	andi	r2,r2,255
   1dea0:	10000d26 	beq	r2,zero,1ded8 <secp256k1_fe_sqr_inner+0x41c0>
   1dea4:	d0a01617 	ldw	r2,-32680(gp)
   1dea8:	10c00317 	ldw	r3,12(r2)
   1deac:	008001b4 	movhi	r2,6
   1deb0:	10aeb204 	addi	r2,r2,-17720
   1deb4:	d8800015 	stw	r2,0(sp)
   1deb8:	01c10184 	movi	r7,1030
   1debc:	018001b4 	movhi	r6,6
   1dec0:	31ab2d04 	addi	r6,r6,-21324
   1dec4:	014001b4 	movhi	r5,6
   1dec8:	296b3804 	addi	r5,r5,-21280
   1decc:	1809883a 	mov	r4,r3
   1ded0:	00452600 	call	45260 <fprintf>
   1ded4:	00450340 	call	45034 <abort>
    VERIFY_CHECK(d <= 0x10000003FFFFBFULL);
   1ded8:	01000044 	movi	r4,1
   1dedc:	e0be6817 	ldw	r2,-1632(fp)
   1dee0:	00c00434 	movhi	r3,16
   1dee4:	18800836 	bltu	r3,r2,1df08 <secp256k1_fe_sqr_inner+0x41f0>
   1dee8:	e0fe6817 	ldw	r3,-1632(fp)
   1deec:	00800434 	movhi	r2,16
   1def0:	1880041e 	bne	r3,r2,1df04 <secp256k1_fe_sqr_inner+0x41ec>
   1def4:	e0fe6717 	ldw	r3,-1636(fp)
   1def8:	00810034 	movhi	r2,1024
   1defc:	10bfefc4 	addi	r2,r2,-65
   1df00:	10c00136 	bltu	r2,r3,1df08 <secp256k1_fe_sqr_inner+0x41f0>
   1df04:	0009883a 	mov	r4,zero
   1df08:	20803fcc 	andi	r2,r4,255
   1df0c:	10000d26 	beq	r2,zero,1df44 <secp256k1_fe_sqr_inner+0x422c>
   1df10:	d0a01617 	ldw	r2,-32680(gp)
   1df14:	10c00317 	ldw	r3,12(r2)
   1df18:	008001b4 	movhi	r2,6
   1df1c:	10aebd04 	addi	r2,r2,-17676
   1df20:	d8800015 	stw	r2,0(sp)
   1df24:	01c101c4 	movi	r7,1031
   1df28:	018001b4 	movhi	r6,6
   1df2c:	31ab2d04 	addi	r6,r6,-21324
   1df30:	014001b4 	movhi	r5,6
   1df34:	296b3804 	addi	r5,r5,-21280
   1df38:	1809883a 	mov	r4,r3
   1df3c:	00452600 	call	45260 <fprintf>
   1df40:	00450340 	call	45034 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 d-c*R1>>4 r0-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [r9 r8 r7 r6 r5 r4 r3 t2 d r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[1] = d & M; d >>= 26;
   1df44:	e0be8617 	ldw	r2,-1512(fp)
   1df48:	10800104 	addi	r2,r2,4
   1df4c:	e13e6717 	ldw	r4,-1636(fp)
   1df50:	e0fe6417 	ldw	r3,-1648(fp)
   1df54:	20c6703a 	and	r3,r4,r3
   1df58:	10c00015 	stw	r3,0(r2)
   1df5c:	e0be6817 	ldw	r2,-1632(fp)
   1df60:	100491ba 	slli	r2,r2,6
   1df64:	e0fe6717 	ldw	r3,-1636(fp)
   1df68:	1806d6ba 	srli	r3,r3,26
   1df6c:	1884b03a 	or	r2,r3,r2
   1df70:	e0be6715 	stw	r2,-1636(fp)
   1df74:	e0be6817 	ldw	r2,-1632(fp)
   1df78:	1004d6ba 	srli	r2,r2,26
   1df7c:	e0be6815 	stw	r2,-1632(fp)
    VERIFY_BITS(r[1], 26);
   1df80:	e0be8617 	ldw	r2,-1512(fp)
   1df84:	10800104 	addi	r2,r2,4
   1df88:	10800017 	ldw	r2,0(r2)
   1df8c:	1004d6ba 	srli	r2,r2,26
   1df90:	1004c03a 	cmpne	r2,r2,zero
   1df94:	10803fcc 	andi	r2,r2,255
   1df98:	10000d26 	beq	r2,zero,1dfd0 <secp256k1_fe_sqr_inner+0x42b8>
   1df9c:	d0a01617 	ldw	r2,-32680(gp)
   1dfa0:	10c00317 	ldw	r3,12(r2)
   1dfa4:	008001b4 	movhi	r2,6
   1dfa8:	10aec904 	addi	r2,r2,-17628
   1dfac:	d8800015 	stw	r2,0(sp)
   1dfb0:	01c102c4 	movi	r7,1035
   1dfb4:	018001b4 	movhi	r6,6
   1dfb8:	31ab2d04 	addi	r6,r6,-21324
   1dfbc:	014001b4 	movhi	r5,6
   1dfc0:	296b3804 	addi	r5,r5,-21280
   1dfc4:	1809883a 	mov	r4,r3
   1dfc8:	00452600 	call	45260 <fprintf>
   1dfcc:	00450340 	call	45034 <abort>
    VERIFY_BITS(d, 27);
   1dfd0:	e0be6817 	ldw	r2,-1632(fp)
   1dfd4:	1004917a 	slli	r2,r2,5
   1dfd8:	e0fe6717 	ldw	r3,-1636(fp)
   1dfdc:	1806d6fa 	srli	r3,r3,27
   1dfe0:	e0fff215 	stw	r3,-56(fp)
   1dfe4:	e1bff217 	ldw	r6,-56(fp)
   1dfe8:	1184b03a 	or	r2,r2,r6
   1dfec:	e0bff215 	stw	r2,-56(fp)
   1dff0:	e0be6817 	ldw	r2,-1632(fp)
   1dff4:	1004d6fa 	srli	r2,r2,27
   1dff8:	e0bff315 	stw	r2,-52(fp)
   1dffc:	e1fff217 	ldw	r7,-56(fp)
   1e000:	e0fff317 	ldw	r3,-52(fp)
   1e004:	38c4b03a 	or	r2,r7,r3
   1e008:	1004c03a 	cmpne	r2,r2,zero
   1e00c:	10803fcc 	andi	r2,r2,255
   1e010:	10000d26 	beq	r2,zero,1e048 <secp256k1_fe_sqr_inner+0x4330>
   1e014:	d0a01617 	ldw	r2,-32680(gp)
   1e018:	10c00317 	ldw	r3,12(r2)
   1e01c:	008001b4 	movhi	r2,6
   1e020:	10aed504 	addi	r2,r2,-17580
   1e024:	d8800015 	stw	r2,0(sp)
   1e028:	01c10304 	movi	r7,1036
   1e02c:	018001b4 	movhi	r6,6
   1e030:	31ab2d04 	addi	r6,r6,-21324
   1e034:	014001b4 	movhi	r5,6
   1e038:	296b3804 	addi	r5,r5,-21280
   1e03c:	1809883a 	mov	r4,r3
   1e040:	00452600 	call	45260 <fprintf>
   1e044:	00450340 	call	45034 <abort>
    VERIFY_CHECK(d <= 0x4000000ULL);
   1e048:	01000044 	movi	r4,1
   1e04c:	e0be6817 	ldw	r2,-1632(fp)
   1e050:	1000061e 	bne	r2,zero,1e06c <secp256k1_fe_sqr_inner+0x4354>
   1e054:	e0be6817 	ldw	r2,-1632(fp)
   1e058:	1000031e 	bne	r2,zero,1e068 <secp256k1_fe_sqr_inner+0x4350>
   1e05c:	e0be6717 	ldw	r2,-1636(fp)
   1e060:	00c10034 	movhi	r3,1024
   1e064:	18800136 	bltu	r3,r2,1e06c <secp256k1_fe_sqr_inner+0x4354>
   1e068:	0009883a 	mov	r4,zero
   1e06c:	20803fcc 	andi	r2,r4,255
   1e070:	10000d26 	beq	r2,zero,1e0a8 <secp256k1_fe_sqr_inner+0x4390>
   1e074:	d0a01617 	ldw	r2,-32680(gp)
   1e078:	10c00317 	ldw	r3,12(r2)
   1e07c:	008001b4 	movhi	r2,6
   1e080:	10aee004 	addi	r2,r2,-17536
   1e084:	d8800015 	stw	r2,0(sp)
   1e088:	01c10344 	movi	r7,1037
   1e08c:	018001b4 	movhi	r6,6
   1e090:	31ab2d04 	addi	r6,r6,-21324
   1e094:	014001b4 	movhi	r5,6
   1e098:	296b3804 	addi	r5,r5,-21280
   1e09c:	1809883a 	mov	r4,r3
   1e0a0:	00452600 	call	45260 <fprintf>
   1e0a4:	00450340 	call	45034 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 t2+d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d   += t2;
   1e0a8:	e0be7417 	ldw	r2,-1584(fp)
   1e0ac:	e0bff415 	stw	r2,-48(fp)
   1e0b0:	e03ff515 	stw	zero,-44(fp)
   1e0b4:	e13e6717 	ldw	r4,-1636(fp)
   1e0b8:	e17e6817 	ldw	r5,-1632(fp)
   1e0bc:	e1bff417 	ldw	r6,-48(fp)
   1e0c0:	2185883a 	add	r2,r4,r6
   1e0c4:	110d803a 	cmpltu	r6,r2,r4
   1e0c8:	e1fff517 	ldw	r7,-44(fp)
   1e0cc:	29c7883a 	add	r3,r5,r7
   1e0d0:	30c9883a 	add	r4,r6,r3
   1e0d4:	2007883a 	mov	r3,r4
   1e0d8:	e0be6715 	stw	r2,-1636(fp)
   1e0dc:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 27);
   1e0e0:	e0be6817 	ldw	r2,-1632(fp)
   1e0e4:	1004917a 	slli	r2,r2,5
   1e0e8:	e0fe6717 	ldw	r3,-1636(fp)
   1e0ec:	1806d6fa 	srli	r3,r3,27
   1e0f0:	e0fff615 	stw	r3,-40(fp)
   1e0f4:	e0fff617 	ldw	r3,-40(fp)
   1e0f8:	10c4b03a 	or	r2,r2,r3
   1e0fc:	e0bff615 	stw	r2,-40(fp)
   1e100:	e0be6817 	ldw	r2,-1632(fp)
   1e104:	1004d6fa 	srli	r2,r2,27
   1e108:	e0bff715 	stw	r2,-36(fp)
   1e10c:	e13ff617 	ldw	r4,-40(fp)
   1e110:	e1bff717 	ldw	r6,-36(fp)
   1e114:	2184b03a 	or	r2,r4,r6
   1e118:	1004c03a 	cmpne	r2,r2,zero
   1e11c:	10803fcc 	andi	r2,r2,255
   1e120:	10000d26 	beq	r2,zero,1e158 <secp256k1_fe_sqr_inner+0x4440>
   1e124:	d0a01617 	ldw	r2,-32680(gp)
   1e128:	10c00317 	ldw	r3,12(r2)
   1e12c:	008001b4 	movhi	r2,6
   1e130:	10aed504 	addi	r2,r2,-17580
   1e134:	d8800015 	stw	r2,0(sp)
   1e138:	01c10404 	movi	r7,1040
   1e13c:	018001b4 	movhi	r6,6
   1e140:	31ab2d04 	addi	r6,r6,-21324
   1e144:	014001b4 	movhi	r5,6
   1e148:	296b3804 	addi	r5,r5,-21280
   1e14c:	1809883a 	mov	r4,r3
   1e150:	00452600 	call	45260 <fprintf>
   1e154:	00450340 	call	45034 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[2] = d;
   1e158:	e0be8617 	ldw	r2,-1512(fp)
   1e15c:	10800204 	addi	r2,r2,8
   1e160:	e0fe6717 	ldw	r3,-1636(fp)
   1e164:	10c00015 	stw	r3,0(r2)
    VERIFY_BITS(r[2], 27);
   1e168:	e0be8617 	ldw	r2,-1512(fp)
   1e16c:	10800204 	addi	r2,r2,8
   1e170:	10800017 	ldw	r2,0(r2)
   1e174:	1004d6fa 	srli	r2,r2,27
   1e178:	1004c03a 	cmpne	r2,r2,zero
   1e17c:	10803fcc 	andi	r2,r2,255
   1e180:	10000d26 	beq	r2,zero,1e1b8 <secp256k1_fe_sqr_inner+0x44a0>
   1e184:	d0a01617 	ldw	r2,-32680(gp)
   1e188:	10c00317 	ldw	r3,12(r2)
   1e18c:	008001b4 	movhi	r2,6
   1e190:	10aeeb04 	addi	r2,r2,-17492
   1e194:	d8800015 	stw	r2,0(sp)
   1e198:	01c104c4 	movi	r7,1043
   1e19c:	018001b4 	movhi	r6,6
   1e1a0:	31ab2d04 	addi	r6,r6,-21324
   1e1a4:	014001b4 	movhi	r5,6
   1e1a8:	296b3804 	addi	r5,r5,-21280
   1e1ac:	1809883a 	mov	r4,r3
   1e1b0:	00452600 	call	45260 <fprintf>
   1e1b4:	00450340 	call	45034 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 r2 r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
}
   1e1b8:	0001883a 	nop
   1e1bc:	e6fff804 	addi	sp,fp,-32
   1e1c0:	dfc00917 	ldw	ra,36(sp)
   1e1c4:	df000817 	ldw	fp,32(sp)
   1e1c8:	ddc00717 	ldw	r23,28(sp)
   1e1cc:	dd800617 	ldw	r22,24(sp)
   1e1d0:	dd400517 	ldw	r21,20(sp)
   1e1d4:	dd000417 	ldw	r20,16(sp)
   1e1d8:	dcc00317 	ldw	r19,12(sp)
   1e1dc:	dc800217 	ldw	r18,8(sp)
   1e1e0:	dc400117 	ldw	r17,4(sp)
   1e1e4:	dc000017 	ldw	r16,0(sp)
   1e1e8:	dec00a04 	addi	sp,sp,40
   1e1ec:	f800283a 	ret

0001e1f0 <secp256k1_fe_mul>:
#endif

static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {
   1e1f0:	defffa04 	addi	sp,sp,-24
   1e1f4:	dfc00515 	stw	ra,20(sp)
   1e1f8:	df000415 	stw	fp,16(sp)
   1e1fc:	df000404 	addi	fp,sp,16
   1e200:	e13ffd15 	stw	r4,-12(fp)
   1e204:	e17ffe15 	stw	r5,-8(fp)
   1e208:	e1bfff15 	stw	r6,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->magnitude <= 8);
   1e20c:	e0bffe17 	ldw	r2,-8(fp)
   1e210:	10800a17 	ldw	r2,40(r2)
   1e214:	10800248 	cmpgei	r2,r2,9
   1e218:	10803fcc 	andi	r2,r2,255
   1e21c:	10000d26 	beq	r2,zero,1e254 <secp256k1_fe_mul+0x64>
   1e220:	d0a01617 	ldw	r2,-32680(gp)
   1e224:	10c00317 	ldw	r3,12(r2)
   1e228:	008001b4 	movhi	r2,6
   1e22c:	10aef704 	addi	r2,r2,-17444
   1e230:	d8800015 	stw	r2,0(sp)
   1e234:	01c10684 	movi	r7,1050
   1e238:	018001b4 	movhi	r6,6
   1e23c:	31ab2d04 	addi	r6,r6,-21324
   1e240:	014001b4 	movhi	r5,6
   1e244:	296b3804 	addi	r5,r5,-21280
   1e248:	1809883a 	mov	r4,r3
   1e24c:	00452600 	call	45260 <fprintf>
   1e250:	00450340 	call	45034 <abort>
    VERIFY_CHECK(b->magnitude <= 8);
   1e254:	e0bfff17 	ldw	r2,-4(fp)
   1e258:	10800a17 	ldw	r2,40(r2)
   1e25c:	10800248 	cmpgei	r2,r2,9
   1e260:	10803fcc 	andi	r2,r2,255
   1e264:	10000d26 	beq	r2,zero,1e29c <secp256k1_fe_mul+0xac>
   1e268:	d0a01617 	ldw	r2,-32680(gp)
   1e26c:	10c00317 	ldw	r3,12(r2)
   1e270:	008001b4 	movhi	r2,6
   1e274:	10af0204 	addi	r2,r2,-17400
   1e278:	d8800015 	stw	r2,0(sp)
   1e27c:	01c106c4 	movi	r7,1051
   1e280:	018001b4 	movhi	r6,6
   1e284:	31ab2d04 	addi	r6,r6,-21324
   1e288:	014001b4 	movhi	r5,6
   1e28c:	296b3804 	addi	r5,r5,-21280
   1e290:	1809883a 	mov	r4,r3
   1e294:	00452600 	call	45260 <fprintf>
   1e298:	00450340 	call	45034 <abort>
    secp256k1_fe_verify(a);
   1e29c:	e13ffe17 	ldw	r4,-8(fp)
   1e2a0:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
    secp256k1_fe_verify(b);
   1e2a4:	e13fff17 	ldw	r4,-4(fp)
   1e2a8:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
    VERIFY_CHECK(r != b);
   1e2ac:	e0fffd17 	ldw	r3,-12(fp)
   1e2b0:	e0bfff17 	ldw	r2,-4(fp)
   1e2b4:	1885003a 	cmpeq	r2,r3,r2
   1e2b8:	10803fcc 	andi	r2,r2,255
   1e2bc:	10000d26 	beq	r2,zero,1e2f4 <secp256k1_fe_mul+0x104>
   1e2c0:	d0a01617 	ldw	r2,-32680(gp)
   1e2c4:	10c00317 	ldw	r3,12(r2)
   1e2c8:	008001b4 	movhi	r2,6
   1e2cc:	10af0d04 	addi	r2,r2,-17356
   1e2d0:	d8800015 	stw	r2,0(sp)
   1e2d4:	01c10784 	movi	r7,1054
   1e2d8:	018001b4 	movhi	r6,6
   1e2dc:	31ab2d04 	addi	r6,r6,-21324
   1e2e0:	014001b4 	movhi	r5,6
   1e2e4:	296b3804 	addi	r5,r5,-21280
   1e2e8:	1809883a 	mov	r4,r3
   1e2ec:	00452600 	call	45260 <fprintf>
   1e2f0:	00450340 	call	45034 <abort>
#endif
    secp256k1_fe_mul_inner(r->n, a->n, b->n);
   1e2f4:	e0bffd17 	ldw	r2,-12(fp)
   1e2f8:	e0fffe17 	ldw	r3,-8(fp)
   1e2fc:	e13fff17 	ldw	r4,-4(fp)
   1e300:	200d883a 	mov	r6,r4
   1e304:	180b883a 	mov	r5,r3
   1e308:	1009883a 	mov	r4,r2
   1e30c:	00143b00 	call	143b0 <secp256k1_fe_mul_inner>
#ifdef VERIFY
    r->magnitude = 1;
   1e310:	e0bffd17 	ldw	r2,-12(fp)
   1e314:	00c00044 	movi	r3,1
   1e318:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   1e31c:	e0bffd17 	ldw	r2,-12(fp)
   1e320:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   1e324:	e13ffd17 	ldw	r4,-12(fp)
   1e328:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
}
   1e32c:	0001883a 	nop
   1e330:	e037883a 	mov	sp,fp
   1e334:	dfc00117 	ldw	ra,4(sp)
   1e338:	df000017 	ldw	fp,0(sp)
   1e33c:	dec00204 	addi	sp,sp,8
   1e340:	f800283a 	ret

0001e344 <secp256k1_fe_sqr>:

static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {
   1e344:	defffb04 	addi	sp,sp,-20
   1e348:	dfc00415 	stw	ra,16(sp)
   1e34c:	df000315 	stw	fp,12(sp)
   1e350:	df000304 	addi	fp,sp,12
   1e354:	e13ffe15 	stw	r4,-8(fp)
   1e358:	e17fff15 	stw	r5,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->magnitude <= 8);
   1e35c:	e0bfff17 	ldw	r2,-4(fp)
   1e360:	10800a17 	ldw	r2,40(r2)
   1e364:	10800248 	cmpgei	r2,r2,9
   1e368:	10803fcc 	andi	r2,r2,255
   1e36c:	10000d26 	beq	r2,zero,1e3a4 <secp256k1_fe_sqr+0x60>
   1e370:	d0a01617 	ldw	r2,-32680(gp)
   1e374:	10c00317 	ldw	r3,12(r2)
   1e378:	008001b4 	movhi	r2,6
   1e37c:	10aef704 	addi	r2,r2,-17444
   1e380:	d8800015 	stw	r2,0(sp)
   1e384:	01c10a84 	movi	r7,1066
   1e388:	018001b4 	movhi	r6,6
   1e38c:	31ab2d04 	addi	r6,r6,-21324
   1e390:	014001b4 	movhi	r5,6
   1e394:	296b3804 	addi	r5,r5,-21280
   1e398:	1809883a 	mov	r4,r3
   1e39c:	00452600 	call	45260 <fprintf>
   1e3a0:	00450340 	call	45034 <abort>
    secp256k1_fe_verify(a);
   1e3a4:	e13fff17 	ldw	r4,-4(fp)
   1e3a8:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
    secp256k1_fe_sqr_inner(r->n, a->n);
   1e3ac:	e0bffe17 	ldw	r2,-8(fp)
   1e3b0:	e0ffff17 	ldw	r3,-4(fp)
   1e3b4:	180b883a 	mov	r5,r3
   1e3b8:	1009883a 	mov	r4,r2
   1e3bc:	0019d180 	call	19d18 <secp256k1_fe_sqr_inner>
#ifdef VERIFY
    r->magnitude = 1;
   1e3c0:	e0bffe17 	ldw	r2,-8(fp)
   1e3c4:	00c00044 	movi	r3,1
   1e3c8:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   1e3cc:	e0bffe17 	ldw	r2,-8(fp)
   1e3d0:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   1e3d4:	e13ffe17 	ldw	r4,-8(fp)
   1e3d8:	0011ab80 	call	11ab8 <secp256k1_fe_verify>
#endif
}
   1e3dc:	0001883a 	nop
   1e3e0:	e037883a 	mov	sp,fp
   1e3e4:	dfc00117 	ldw	ra,4(sp)
   1e3e8:	df000017 	ldw	fp,0(sp)
   1e3ec:	dec00204 	addi	sp,sp,8
   1e3f0:	f800283a 	ret

0001e3f4 <secp256k1_fe_cmov>:

static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {
   1e3f4:	defffa04 	addi	sp,sp,-24
   1e3f8:	df000515 	stw	fp,20(sp)
   1e3fc:	df000504 	addi	fp,sp,20
   1e400:	e13ffd15 	stw	r4,-12(fp)
   1e404:	e17ffe15 	stw	r5,-8(fp)
   1e408:	e1bfff15 	stw	r6,-4(fp)
    uint32_t mask0, mask1;
    mask0 = flag + ~((uint32_t)0);
   1e40c:	e0bfff17 	ldw	r2,-4(fp)
   1e410:	10bfffc4 	addi	r2,r2,-1
   1e414:	e0bffb15 	stw	r2,-20(fp)
    mask1 = ~mask0;
   1e418:	e0bffb17 	ldw	r2,-20(fp)
   1e41c:	0084303a 	nor	r2,zero,r2
   1e420:	e0bffc15 	stw	r2,-16(fp)
    r->n[0] = (r->n[0] & mask0) | (a->n[0] & mask1);
   1e424:	e0bffd17 	ldw	r2,-12(fp)
   1e428:	10c00017 	ldw	r3,0(r2)
   1e42c:	e0bffb17 	ldw	r2,-20(fp)
   1e430:	1886703a 	and	r3,r3,r2
   1e434:	e0bffe17 	ldw	r2,-8(fp)
   1e438:	11000017 	ldw	r4,0(r2)
   1e43c:	e0bffc17 	ldw	r2,-16(fp)
   1e440:	2084703a 	and	r2,r4,r2
   1e444:	1886b03a 	or	r3,r3,r2
   1e448:	e0bffd17 	ldw	r2,-12(fp)
   1e44c:	10c00015 	stw	r3,0(r2)
    r->n[1] = (r->n[1] & mask0) | (a->n[1] & mask1);
   1e450:	e0bffd17 	ldw	r2,-12(fp)
   1e454:	10c00117 	ldw	r3,4(r2)
   1e458:	e0bffb17 	ldw	r2,-20(fp)
   1e45c:	1886703a 	and	r3,r3,r2
   1e460:	e0bffe17 	ldw	r2,-8(fp)
   1e464:	11000117 	ldw	r4,4(r2)
   1e468:	e0bffc17 	ldw	r2,-16(fp)
   1e46c:	2084703a 	and	r2,r4,r2
   1e470:	1886b03a 	or	r3,r3,r2
   1e474:	e0bffd17 	ldw	r2,-12(fp)
   1e478:	10c00115 	stw	r3,4(r2)
    r->n[2] = (r->n[2] & mask0) | (a->n[2] & mask1);
   1e47c:	e0bffd17 	ldw	r2,-12(fp)
   1e480:	10c00217 	ldw	r3,8(r2)
   1e484:	e0bffb17 	ldw	r2,-20(fp)
   1e488:	1886703a 	and	r3,r3,r2
   1e48c:	e0bffe17 	ldw	r2,-8(fp)
   1e490:	11000217 	ldw	r4,8(r2)
   1e494:	e0bffc17 	ldw	r2,-16(fp)
   1e498:	2084703a 	and	r2,r4,r2
   1e49c:	1886b03a 	or	r3,r3,r2
   1e4a0:	e0bffd17 	ldw	r2,-12(fp)
   1e4a4:	10c00215 	stw	r3,8(r2)
    r->n[3] = (r->n[3] & mask0) | (a->n[3] & mask1);
   1e4a8:	e0bffd17 	ldw	r2,-12(fp)
   1e4ac:	10c00317 	ldw	r3,12(r2)
   1e4b0:	e0bffb17 	ldw	r2,-20(fp)
   1e4b4:	1886703a 	and	r3,r3,r2
   1e4b8:	e0bffe17 	ldw	r2,-8(fp)
   1e4bc:	11000317 	ldw	r4,12(r2)
   1e4c0:	e0bffc17 	ldw	r2,-16(fp)
   1e4c4:	2084703a 	and	r2,r4,r2
   1e4c8:	1886b03a 	or	r3,r3,r2
   1e4cc:	e0bffd17 	ldw	r2,-12(fp)
   1e4d0:	10c00315 	stw	r3,12(r2)
    r->n[4] = (r->n[4] & mask0) | (a->n[4] & mask1);
   1e4d4:	e0bffd17 	ldw	r2,-12(fp)
   1e4d8:	10c00417 	ldw	r3,16(r2)
   1e4dc:	e0bffb17 	ldw	r2,-20(fp)
   1e4e0:	1886703a 	and	r3,r3,r2
   1e4e4:	e0bffe17 	ldw	r2,-8(fp)
   1e4e8:	11000417 	ldw	r4,16(r2)
   1e4ec:	e0bffc17 	ldw	r2,-16(fp)
   1e4f0:	2084703a 	and	r2,r4,r2
   1e4f4:	1886b03a 	or	r3,r3,r2
   1e4f8:	e0bffd17 	ldw	r2,-12(fp)
   1e4fc:	10c00415 	stw	r3,16(r2)
    r->n[5] = (r->n[5] & mask0) | (a->n[5] & mask1);
   1e500:	e0bffd17 	ldw	r2,-12(fp)
   1e504:	10c00517 	ldw	r3,20(r2)
   1e508:	e0bffb17 	ldw	r2,-20(fp)
   1e50c:	1886703a 	and	r3,r3,r2
   1e510:	e0bffe17 	ldw	r2,-8(fp)
   1e514:	11000517 	ldw	r4,20(r2)
   1e518:	e0bffc17 	ldw	r2,-16(fp)
   1e51c:	2084703a 	and	r2,r4,r2
   1e520:	1886b03a 	or	r3,r3,r2
   1e524:	e0bffd17 	ldw	r2,-12(fp)
   1e528:	10c00515 	stw	r3,20(r2)
    r->n[6] = (r->n[6] & mask0) | (a->n[6] & mask1);
   1e52c:	e0bffd17 	ldw	r2,-12(fp)
   1e530:	10c00617 	ldw	r3,24(r2)
   1e534:	e0bffb17 	ldw	r2,-20(fp)
   1e538:	1886703a 	and	r3,r3,r2
   1e53c:	e0bffe17 	ldw	r2,-8(fp)
   1e540:	11000617 	ldw	r4,24(r2)
   1e544:	e0bffc17 	ldw	r2,-16(fp)
   1e548:	2084703a 	and	r2,r4,r2
   1e54c:	1886b03a 	or	r3,r3,r2
   1e550:	e0bffd17 	ldw	r2,-12(fp)
   1e554:	10c00615 	stw	r3,24(r2)
    r->n[7] = (r->n[7] & mask0) | (a->n[7] & mask1);
   1e558:	e0bffd17 	ldw	r2,-12(fp)
   1e55c:	10c00717 	ldw	r3,28(r2)
   1e560:	e0bffb17 	ldw	r2,-20(fp)
   1e564:	1886703a 	and	r3,r3,r2
   1e568:	e0bffe17 	ldw	r2,-8(fp)
   1e56c:	11000717 	ldw	r4,28(r2)
   1e570:	e0bffc17 	ldw	r2,-16(fp)
   1e574:	2084703a 	and	r2,r4,r2
   1e578:	1886b03a 	or	r3,r3,r2
   1e57c:	e0bffd17 	ldw	r2,-12(fp)
   1e580:	10c00715 	stw	r3,28(r2)
    r->n[8] = (r->n[8] & mask0) | (a->n[8] & mask1);
   1e584:	e0bffd17 	ldw	r2,-12(fp)
   1e588:	10c00817 	ldw	r3,32(r2)
   1e58c:	e0bffb17 	ldw	r2,-20(fp)
   1e590:	1886703a 	and	r3,r3,r2
   1e594:	e0bffe17 	ldw	r2,-8(fp)
   1e598:	11000817 	ldw	r4,32(r2)
   1e59c:	e0bffc17 	ldw	r2,-16(fp)
   1e5a0:	2084703a 	and	r2,r4,r2
   1e5a4:	1886b03a 	or	r3,r3,r2
   1e5a8:	e0bffd17 	ldw	r2,-12(fp)
   1e5ac:	10c00815 	stw	r3,32(r2)
    r->n[9] = (r->n[9] & mask0) | (a->n[9] & mask1);
   1e5b0:	e0bffd17 	ldw	r2,-12(fp)
   1e5b4:	10c00917 	ldw	r3,36(r2)
   1e5b8:	e0bffb17 	ldw	r2,-20(fp)
   1e5bc:	1886703a 	and	r3,r3,r2
   1e5c0:	e0bffe17 	ldw	r2,-8(fp)
   1e5c4:	11000917 	ldw	r4,36(r2)
   1e5c8:	e0bffc17 	ldw	r2,-16(fp)
   1e5cc:	2084703a 	and	r2,r4,r2
   1e5d0:	1886b03a 	or	r3,r3,r2
   1e5d4:	e0bffd17 	ldw	r2,-12(fp)
   1e5d8:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    if (a->magnitude > r->magnitude) {
   1e5dc:	e0bffe17 	ldw	r2,-8(fp)
   1e5e0:	10800a17 	ldw	r2,40(r2)
   1e5e4:	e0fffd17 	ldw	r3,-12(fp)
   1e5e8:	18c00a17 	ldw	r3,40(r3)
   1e5ec:	1880040e 	bge	r3,r2,1e600 <secp256k1_fe_cmov+0x20c>
        r->magnitude = a->magnitude;
   1e5f0:	e0bffe17 	ldw	r2,-8(fp)
   1e5f4:	10c00a17 	ldw	r3,40(r2)
   1e5f8:	e0bffd17 	ldw	r2,-12(fp)
   1e5fc:	10c00a15 	stw	r3,40(r2)
    }
    r->normalized &= a->normalized;
   1e600:	e0bffd17 	ldw	r2,-12(fp)
   1e604:	10c00b17 	ldw	r3,44(r2)
   1e608:	e0bffe17 	ldw	r2,-8(fp)
   1e60c:	10800b17 	ldw	r2,44(r2)
   1e610:	1886703a 	and	r3,r3,r2
   1e614:	e0bffd17 	ldw	r2,-12(fp)
   1e618:	10c00b15 	stw	r3,44(r2)
#endif
}
   1e61c:	0001883a 	nop
   1e620:	e037883a 	mov	sp,fp
   1e624:	df000017 	ldw	fp,0(sp)
   1e628:	dec00104 	addi	sp,sp,4
   1e62c:	f800283a 	ret

0001e630 <secp256k1_fe_storage_cmov>:

static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {
   1e630:	defffa04 	addi	sp,sp,-24
   1e634:	df000515 	stw	fp,20(sp)
   1e638:	df000504 	addi	fp,sp,20
   1e63c:	e13ffd15 	stw	r4,-12(fp)
   1e640:	e17ffe15 	stw	r5,-8(fp)
   1e644:	e1bfff15 	stw	r6,-4(fp)
    uint32_t mask0, mask1;
    mask0 = flag + ~((uint32_t)0);
   1e648:	e0bfff17 	ldw	r2,-4(fp)
   1e64c:	10bfffc4 	addi	r2,r2,-1
   1e650:	e0bffb15 	stw	r2,-20(fp)
    mask1 = ~mask0;
   1e654:	e0bffb17 	ldw	r2,-20(fp)
   1e658:	0084303a 	nor	r2,zero,r2
   1e65c:	e0bffc15 	stw	r2,-16(fp)
    r->n[0] = (r->n[0] & mask0) | (a->n[0] & mask1);
   1e660:	e0bffd17 	ldw	r2,-12(fp)
   1e664:	10c00017 	ldw	r3,0(r2)
   1e668:	e0bffb17 	ldw	r2,-20(fp)
   1e66c:	1886703a 	and	r3,r3,r2
   1e670:	e0bffe17 	ldw	r2,-8(fp)
   1e674:	11000017 	ldw	r4,0(r2)
   1e678:	e0bffc17 	ldw	r2,-16(fp)
   1e67c:	2084703a 	and	r2,r4,r2
   1e680:	1886b03a 	or	r3,r3,r2
   1e684:	e0bffd17 	ldw	r2,-12(fp)
   1e688:	10c00015 	stw	r3,0(r2)
    r->n[1] = (r->n[1] & mask0) | (a->n[1] & mask1);
   1e68c:	e0bffd17 	ldw	r2,-12(fp)
   1e690:	10c00117 	ldw	r3,4(r2)
   1e694:	e0bffb17 	ldw	r2,-20(fp)
   1e698:	1886703a 	and	r3,r3,r2
   1e69c:	e0bffe17 	ldw	r2,-8(fp)
   1e6a0:	11000117 	ldw	r4,4(r2)
   1e6a4:	e0bffc17 	ldw	r2,-16(fp)
   1e6a8:	2084703a 	and	r2,r4,r2
   1e6ac:	1886b03a 	or	r3,r3,r2
   1e6b0:	e0bffd17 	ldw	r2,-12(fp)
   1e6b4:	10c00115 	stw	r3,4(r2)
    r->n[2] = (r->n[2] & mask0) | (a->n[2] & mask1);
   1e6b8:	e0bffd17 	ldw	r2,-12(fp)
   1e6bc:	10c00217 	ldw	r3,8(r2)
   1e6c0:	e0bffb17 	ldw	r2,-20(fp)
   1e6c4:	1886703a 	and	r3,r3,r2
   1e6c8:	e0bffe17 	ldw	r2,-8(fp)
   1e6cc:	11000217 	ldw	r4,8(r2)
   1e6d0:	e0bffc17 	ldw	r2,-16(fp)
   1e6d4:	2084703a 	and	r2,r4,r2
   1e6d8:	1886b03a 	or	r3,r3,r2
   1e6dc:	e0bffd17 	ldw	r2,-12(fp)
   1e6e0:	10c00215 	stw	r3,8(r2)
    r->n[3] = (r->n[3] & mask0) | (a->n[3] & mask1);
   1e6e4:	e0bffd17 	ldw	r2,-12(fp)
   1e6e8:	10c00317 	ldw	r3,12(r2)
   1e6ec:	e0bffb17 	ldw	r2,-20(fp)
   1e6f0:	1886703a 	and	r3,r3,r2
   1e6f4:	e0bffe17 	ldw	r2,-8(fp)
   1e6f8:	11000317 	ldw	r4,12(r2)
   1e6fc:	e0bffc17 	ldw	r2,-16(fp)
   1e700:	2084703a 	and	r2,r4,r2
   1e704:	1886b03a 	or	r3,r3,r2
   1e708:	e0bffd17 	ldw	r2,-12(fp)
   1e70c:	10c00315 	stw	r3,12(r2)
    r->n[4] = (r->n[4] & mask0) | (a->n[4] & mask1);
   1e710:	e0bffd17 	ldw	r2,-12(fp)
   1e714:	10c00417 	ldw	r3,16(r2)
   1e718:	e0bffb17 	ldw	r2,-20(fp)
   1e71c:	1886703a 	and	r3,r3,r2
   1e720:	e0bffe17 	ldw	r2,-8(fp)
   1e724:	11000417 	ldw	r4,16(r2)
   1e728:	e0bffc17 	ldw	r2,-16(fp)
   1e72c:	2084703a 	and	r2,r4,r2
   1e730:	1886b03a 	or	r3,r3,r2
   1e734:	e0bffd17 	ldw	r2,-12(fp)
   1e738:	10c00415 	stw	r3,16(r2)
    r->n[5] = (r->n[5] & mask0) | (a->n[5] & mask1);
   1e73c:	e0bffd17 	ldw	r2,-12(fp)
   1e740:	10c00517 	ldw	r3,20(r2)
   1e744:	e0bffb17 	ldw	r2,-20(fp)
   1e748:	1886703a 	and	r3,r3,r2
   1e74c:	e0bffe17 	ldw	r2,-8(fp)
   1e750:	11000517 	ldw	r4,20(r2)
   1e754:	e0bffc17 	ldw	r2,-16(fp)
   1e758:	2084703a 	and	r2,r4,r2
   1e75c:	1886b03a 	or	r3,r3,r2
   1e760:	e0bffd17 	ldw	r2,-12(fp)
   1e764:	10c00515 	stw	r3,20(r2)
    r->n[6] = (r->n[6] & mask0) | (a->n[6] & mask1);
   1e768:	e0bffd17 	ldw	r2,-12(fp)
   1e76c:	10c00617 	ldw	r3,24(r2)
   1e770:	e0bffb17 	ldw	r2,-20(fp)
   1e774:	1886703a 	and	r3,r3,r2
   1e778:	e0bffe17 	ldw	r2,-8(fp)
   1e77c:	11000617 	ldw	r4,24(r2)
   1e780:	e0bffc17 	ldw	r2,-16(fp)
   1e784:	2084703a 	and	r2,r4,r2
   1e788:	1886b03a 	or	r3,r3,r2
   1e78c:	e0bffd17 	ldw	r2,-12(fp)
   1e790:	10c00615 	stw	r3,24(r2)
    r->n[7] = (r->n[7] & mask0) | (a->n[7] & mask1);
   1e794:	e0bffd17 	ldw	r2,-12(fp)
   1e798:	10c00717 	ldw	r3,28(r2)
   1e79c:	e0bffb17 	ldw	r2,-20(fp)
   1e7a0:	1886703a 	and	r3,r3,r2
   1e7a4:	e0bffe17 	ldw	r2,-8(fp)
   1e7a8:	11000717 	ldw	r4,28(r2)
   1e7ac:	e0bffc17 	ldw	r2,-16(fp)
   1e7b0:	2084703a 	and	r2,r4,r2
   1e7b4:	1886b03a 	or	r3,r3,r2
   1e7b8:	e0bffd17 	ldw	r2,-12(fp)
   1e7bc:	10c00715 	stw	r3,28(r2)
}
   1e7c0:	0001883a 	nop
   1e7c4:	e037883a 	mov	sp,fp
   1e7c8:	df000017 	ldw	fp,0(sp)
   1e7cc:	dec00104 	addi	sp,sp,4
   1e7d0:	f800283a 	ret

0001e7d4 <secp256k1_fe_to_storage>:

static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {
   1e7d4:	defffb04 	addi	sp,sp,-20
   1e7d8:	dfc00415 	stw	ra,16(sp)
   1e7dc:	df000315 	stw	fp,12(sp)
   1e7e0:	df000304 	addi	fp,sp,12
   1e7e4:	e13ffe15 	stw	r4,-8(fp)
   1e7e8:	e17fff15 	stw	r5,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   1e7ec:	e0bfff17 	ldw	r2,-4(fp)
   1e7f0:	10800b17 	ldw	r2,44(r2)
   1e7f4:	1005003a 	cmpeq	r2,r2,zero
   1e7f8:	10803fcc 	andi	r2,r2,255
   1e7fc:	10000d26 	beq	r2,zero,1e834 <secp256k1_fe_to_storage+0x60>
   1e800:	d0a01617 	ldw	r2,-32680(gp)
   1e804:	10c00317 	ldw	r3,12(r2)
   1e808:	008001b4 	movhi	r2,6
   1e80c:	10ab5704 	addi	r2,r2,-21156
   1e810:	d8800015 	stw	r2,0(sp)
   1e814:	01c116c4 	movi	r7,1115
   1e818:	018001b4 	movhi	r6,6
   1e81c:	31ab2d04 	addi	r6,r6,-21324
   1e820:	014001b4 	movhi	r5,6
   1e824:	296b3804 	addi	r5,r5,-21280
   1e828:	1809883a 	mov	r4,r3
   1e82c:	00452600 	call	45260 <fprintf>
   1e830:	00450340 	call	45034 <abort>
#endif
    r->n[0] = a->n[0] | a->n[1] << 26;
   1e834:	e0bfff17 	ldw	r2,-4(fp)
   1e838:	10c00017 	ldw	r3,0(r2)
   1e83c:	e0bfff17 	ldw	r2,-4(fp)
   1e840:	10800117 	ldw	r2,4(r2)
   1e844:	100496ba 	slli	r2,r2,26
   1e848:	1886b03a 	or	r3,r3,r2
   1e84c:	e0bffe17 	ldw	r2,-8(fp)
   1e850:	10c00015 	stw	r3,0(r2)
    r->n[1] = a->n[1] >> 6 | a->n[2] << 20;
   1e854:	e0bfff17 	ldw	r2,-4(fp)
   1e858:	10800117 	ldw	r2,4(r2)
   1e85c:	1006d1ba 	srli	r3,r2,6
   1e860:	e0bfff17 	ldw	r2,-4(fp)
   1e864:	10800217 	ldw	r2,8(r2)
   1e868:	1004953a 	slli	r2,r2,20
   1e86c:	1886b03a 	or	r3,r3,r2
   1e870:	e0bffe17 	ldw	r2,-8(fp)
   1e874:	10c00115 	stw	r3,4(r2)
    r->n[2] = a->n[2] >> 12 | a->n[3] << 14;
   1e878:	e0bfff17 	ldw	r2,-4(fp)
   1e87c:	10800217 	ldw	r2,8(r2)
   1e880:	1006d33a 	srli	r3,r2,12
   1e884:	e0bfff17 	ldw	r2,-4(fp)
   1e888:	10800317 	ldw	r2,12(r2)
   1e88c:	100493ba 	slli	r2,r2,14
   1e890:	1886b03a 	or	r3,r3,r2
   1e894:	e0bffe17 	ldw	r2,-8(fp)
   1e898:	10c00215 	stw	r3,8(r2)
    r->n[3] = a->n[3] >> 18 | a->n[4] << 8;
   1e89c:	e0bfff17 	ldw	r2,-4(fp)
   1e8a0:	10800317 	ldw	r2,12(r2)
   1e8a4:	1006d4ba 	srli	r3,r2,18
   1e8a8:	e0bfff17 	ldw	r2,-4(fp)
   1e8ac:	10800417 	ldw	r2,16(r2)
   1e8b0:	1004923a 	slli	r2,r2,8
   1e8b4:	1886b03a 	or	r3,r3,r2
   1e8b8:	e0bffe17 	ldw	r2,-8(fp)
   1e8bc:	10c00315 	stw	r3,12(r2)
    r->n[4] = a->n[4] >> 24 | a->n[5] << 2 | a->n[6] << 28;
   1e8c0:	e0bfff17 	ldw	r2,-4(fp)
   1e8c4:	10800417 	ldw	r2,16(r2)
   1e8c8:	1006d63a 	srli	r3,r2,24
   1e8cc:	e0bfff17 	ldw	r2,-4(fp)
   1e8d0:	10800517 	ldw	r2,20(r2)
   1e8d4:	1085883a 	add	r2,r2,r2
   1e8d8:	1085883a 	add	r2,r2,r2
   1e8dc:	1886b03a 	or	r3,r3,r2
   1e8e0:	e0bfff17 	ldw	r2,-4(fp)
   1e8e4:	10800617 	ldw	r2,24(r2)
   1e8e8:	1004973a 	slli	r2,r2,28
   1e8ec:	1886b03a 	or	r3,r3,r2
   1e8f0:	e0bffe17 	ldw	r2,-8(fp)
   1e8f4:	10c00415 	stw	r3,16(r2)
    r->n[5] = a->n[6] >> 4 | a->n[7] << 22;
   1e8f8:	e0bfff17 	ldw	r2,-4(fp)
   1e8fc:	10800617 	ldw	r2,24(r2)
   1e900:	1006d13a 	srli	r3,r2,4
   1e904:	e0bfff17 	ldw	r2,-4(fp)
   1e908:	10800717 	ldw	r2,28(r2)
   1e90c:	100495ba 	slli	r2,r2,22
   1e910:	1886b03a 	or	r3,r3,r2
   1e914:	e0bffe17 	ldw	r2,-8(fp)
   1e918:	10c00515 	stw	r3,20(r2)
    r->n[6] = a->n[7] >> 10 | a->n[8] << 16;
   1e91c:	e0bfff17 	ldw	r2,-4(fp)
   1e920:	10800717 	ldw	r2,28(r2)
   1e924:	1006d2ba 	srli	r3,r2,10
   1e928:	e0bfff17 	ldw	r2,-4(fp)
   1e92c:	10800817 	ldw	r2,32(r2)
   1e930:	1004943a 	slli	r2,r2,16
   1e934:	1886b03a 	or	r3,r3,r2
   1e938:	e0bffe17 	ldw	r2,-8(fp)
   1e93c:	10c00615 	stw	r3,24(r2)
    r->n[7] = a->n[8] >> 16 | a->n[9] << 10;
   1e940:	e0bfff17 	ldw	r2,-4(fp)
   1e944:	10800817 	ldw	r2,32(r2)
   1e948:	1006d43a 	srli	r3,r2,16
   1e94c:	e0bfff17 	ldw	r2,-4(fp)
   1e950:	10800917 	ldw	r2,36(r2)
   1e954:	100492ba 	slli	r2,r2,10
   1e958:	1886b03a 	or	r3,r3,r2
   1e95c:	e0bffe17 	ldw	r2,-8(fp)
   1e960:	10c00715 	stw	r3,28(r2)
}
   1e964:	0001883a 	nop
   1e968:	e037883a 	mov	sp,fp
   1e96c:	dfc00117 	ldw	ra,4(sp)
   1e970:	df000017 	ldw	fp,0(sp)
   1e974:	dec00204 	addi	sp,sp,8
   1e978:	f800283a 	ret

0001e97c <secp256k1_fe_from_storage>:

static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {
   1e97c:	defffd04 	addi	sp,sp,-12
   1e980:	df000215 	stw	fp,8(sp)
   1e984:	df000204 	addi	fp,sp,8
   1e988:	e13ffe15 	stw	r4,-8(fp)
   1e98c:	e17fff15 	stw	r5,-4(fp)
    r->n[0] = a->n[0] & 0x3FFFFFFUL;
   1e990:	e0bfff17 	ldw	r2,-4(fp)
   1e994:	10c00017 	ldw	r3,0(r2)
   1e998:	00810034 	movhi	r2,1024
   1e99c:	10bfffc4 	addi	r2,r2,-1
   1e9a0:	1886703a 	and	r3,r3,r2
   1e9a4:	e0bffe17 	ldw	r2,-8(fp)
   1e9a8:	10c00015 	stw	r3,0(r2)
    r->n[1] = a->n[0] >> 26 | ((a->n[1] << 6) & 0x3FFFFFFUL);
   1e9ac:	e0bfff17 	ldw	r2,-4(fp)
   1e9b0:	10800017 	ldw	r2,0(r2)
   1e9b4:	1006d6ba 	srli	r3,r2,26
   1e9b8:	e0bfff17 	ldw	r2,-4(fp)
   1e9bc:	10800117 	ldw	r2,4(r2)
   1e9c0:	100891ba 	slli	r4,r2,6
   1e9c4:	00810034 	movhi	r2,1024
   1e9c8:	10bfffc4 	addi	r2,r2,-1
   1e9cc:	2084703a 	and	r2,r4,r2
   1e9d0:	1886b03a 	or	r3,r3,r2
   1e9d4:	e0bffe17 	ldw	r2,-8(fp)
   1e9d8:	10c00115 	stw	r3,4(r2)
    r->n[2] = a->n[1] >> 20 | ((a->n[2] << 12) & 0x3FFFFFFUL);
   1e9dc:	e0bfff17 	ldw	r2,-4(fp)
   1e9e0:	10800117 	ldw	r2,4(r2)
   1e9e4:	1006d53a 	srli	r3,r2,20
   1e9e8:	e0bfff17 	ldw	r2,-4(fp)
   1e9ec:	10800217 	ldw	r2,8(r2)
   1e9f0:	1008933a 	slli	r4,r2,12
   1e9f4:	00810034 	movhi	r2,1024
   1e9f8:	10bfffc4 	addi	r2,r2,-1
   1e9fc:	2084703a 	and	r2,r4,r2
   1ea00:	1886b03a 	or	r3,r3,r2
   1ea04:	e0bffe17 	ldw	r2,-8(fp)
   1ea08:	10c00215 	stw	r3,8(r2)
    r->n[3] = a->n[2] >> 14 | ((a->n[3] << 18) & 0x3FFFFFFUL);
   1ea0c:	e0bfff17 	ldw	r2,-4(fp)
   1ea10:	10800217 	ldw	r2,8(r2)
   1ea14:	1006d3ba 	srli	r3,r2,14
   1ea18:	e0bfff17 	ldw	r2,-4(fp)
   1ea1c:	10800317 	ldw	r2,12(r2)
   1ea20:	100894ba 	slli	r4,r2,18
   1ea24:	00810034 	movhi	r2,1024
   1ea28:	10bfffc4 	addi	r2,r2,-1
   1ea2c:	2084703a 	and	r2,r4,r2
   1ea30:	1886b03a 	or	r3,r3,r2
   1ea34:	e0bffe17 	ldw	r2,-8(fp)
   1ea38:	10c00315 	stw	r3,12(r2)
    r->n[4] = a->n[3] >> 8 | ((a->n[4] << 24) & 0x3FFFFFFUL);
   1ea3c:	e0bfff17 	ldw	r2,-4(fp)
   1ea40:	10800317 	ldw	r2,12(r2)
   1ea44:	1006d23a 	srli	r3,r2,8
   1ea48:	e0bfff17 	ldw	r2,-4(fp)
   1ea4c:	10800417 	ldw	r2,16(r2)
   1ea50:	1008963a 	slli	r4,r2,24
   1ea54:	00810034 	movhi	r2,1024
   1ea58:	10bfffc4 	addi	r2,r2,-1
   1ea5c:	2084703a 	and	r2,r4,r2
   1ea60:	1886b03a 	or	r3,r3,r2
   1ea64:	e0bffe17 	ldw	r2,-8(fp)
   1ea68:	10c00415 	stw	r3,16(r2)
    r->n[5] = (a->n[4] >> 2) & 0x3FFFFFFUL;
   1ea6c:	e0bfff17 	ldw	r2,-4(fp)
   1ea70:	10800417 	ldw	r2,16(r2)
   1ea74:	1006d0ba 	srli	r3,r2,2
   1ea78:	00810034 	movhi	r2,1024
   1ea7c:	10bfffc4 	addi	r2,r2,-1
   1ea80:	1886703a 	and	r3,r3,r2
   1ea84:	e0bffe17 	ldw	r2,-8(fp)
   1ea88:	10c00515 	stw	r3,20(r2)
    r->n[6] = a->n[4] >> 28 | ((a->n[5] << 4) & 0x3FFFFFFUL);
   1ea8c:	e0bfff17 	ldw	r2,-4(fp)
   1ea90:	10800417 	ldw	r2,16(r2)
   1ea94:	1006d73a 	srli	r3,r2,28
   1ea98:	e0bfff17 	ldw	r2,-4(fp)
   1ea9c:	10800517 	ldw	r2,20(r2)
   1eaa0:	1008913a 	slli	r4,r2,4
   1eaa4:	00810034 	movhi	r2,1024
   1eaa8:	10bfffc4 	addi	r2,r2,-1
   1eaac:	2084703a 	and	r2,r4,r2
   1eab0:	1886b03a 	or	r3,r3,r2
   1eab4:	e0bffe17 	ldw	r2,-8(fp)
   1eab8:	10c00615 	stw	r3,24(r2)
    r->n[7] = a->n[5] >> 22 | ((a->n[6] << 10) & 0x3FFFFFFUL);
   1eabc:	e0bfff17 	ldw	r2,-4(fp)
   1eac0:	10800517 	ldw	r2,20(r2)
   1eac4:	1006d5ba 	srli	r3,r2,22
   1eac8:	e0bfff17 	ldw	r2,-4(fp)
   1eacc:	10800617 	ldw	r2,24(r2)
   1ead0:	100892ba 	slli	r4,r2,10
   1ead4:	00810034 	movhi	r2,1024
   1ead8:	10bfffc4 	addi	r2,r2,-1
   1eadc:	2084703a 	and	r2,r4,r2
   1eae0:	1886b03a 	or	r3,r3,r2
   1eae4:	e0bffe17 	ldw	r2,-8(fp)
   1eae8:	10c00715 	stw	r3,28(r2)
    r->n[8] = a->n[6] >> 16 | ((a->n[7] << 16) & 0x3FFFFFFUL);
   1eaec:	e0bfff17 	ldw	r2,-4(fp)
   1eaf0:	10800617 	ldw	r2,24(r2)
   1eaf4:	1006d43a 	srli	r3,r2,16
   1eaf8:	e0bfff17 	ldw	r2,-4(fp)
   1eafc:	10800717 	ldw	r2,28(r2)
   1eb00:	1008943a 	slli	r4,r2,16
   1eb04:	00810034 	movhi	r2,1024
   1eb08:	10bfffc4 	addi	r2,r2,-1
   1eb0c:	2084703a 	and	r2,r4,r2
   1eb10:	1886b03a 	or	r3,r3,r2
   1eb14:	e0bffe17 	ldw	r2,-8(fp)
   1eb18:	10c00815 	stw	r3,32(r2)
    r->n[9] = a->n[7] >> 10;
   1eb1c:	e0bfff17 	ldw	r2,-4(fp)
   1eb20:	10800717 	ldw	r2,28(r2)
   1eb24:	1006d2ba 	srli	r3,r2,10
   1eb28:	e0bffe17 	ldw	r2,-8(fp)
   1eb2c:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    r->magnitude = 1;
   1eb30:	e0bffe17 	ldw	r2,-8(fp)
   1eb34:	00c00044 	movi	r3,1
   1eb38:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   1eb3c:	e0bffe17 	ldw	r2,-8(fp)
   1eb40:	00c00044 	movi	r3,1
   1eb44:	10c00b15 	stw	r3,44(r2)
#endif
}
   1eb48:	0001883a 	nop
   1eb4c:	e037883a 	mov	sp,fp
   1eb50:	df000017 	ldw	fp,0(sp)
   1eb54:	dec00104 	addi	sp,sp,4
   1eb58:	f800283a 	ret

0001eb5c <secp256k1_fe_equal>:
#include "field_5x52_impl.h"
#else
#error "Please select field implementation"
#endif

SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {
   1eb5c:	defff004 	addi	sp,sp,-64
   1eb60:	dfc00f15 	stw	ra,60(sp)
   1eb64:	df000e15 	stw	fp,56(sp)
   1eb68:	df000e04 	addi	fp,sp,56
   1eb6c:	e13ffe15 	stw	r4,-8(fp)
   1eb70:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe na;
    secp256k1_fe_negate(&na, a, 1);
   1eb74:	01800044 	movi	r6,1
   1eb78:	e17ffe17 	ldw	r5,-8(fp)
   1eb7c:	e13ff204 	addi	r4,fp,-56
   1eb80:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_add(&na, b);
   1eb84:	e17fff17 	ldw	r5,-4(fp)
   1eb88:	e13ff204 	addi	r4,fp,-56
   1eb8c:	00142340 	call	14234 <secp256k1_fe_add>
    return secp256k1_fe_normalizes_to_zero(&na);
   1eb90:	e13ff204 	addi	r4,fp,-56
   1eb94:	0012da00 	call	12da0 <secp256k1_fe_normalizes_to_zero>
}
   1eb98:	e037883a 	mov	sp,fp
   1eb9c:	dfc00117 	ldw	ra,4(sp)
   1eba0:	df000017 	ldw	fp,0(sp)
   1eba4:	dec00204 	addi	sp,sp,8
   1eba8:	f800283a 	ret

0001ebac <secp256k1_fe_equal_var>:

SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b) {
   1ebac:	defff004 	addi	sp,sp,-64
   1ebb0:	dfc00f15 	stw	ra,60(sp)
   1ebb4:	df000e15 	stw	fp,56(sp)
   1ebb8:	df000e04 	addi	fp,sp,56
   1ebbc:	e13ffe15 	stw	r4,-8(fp)
   1ebc0:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe na;
    secp256k1_fe_negate(&na, a, 1);
   1ebc4:	01800044 	movi	r6,1
   1ebc8:	e17ffe17 	ldw	r5,-8(fp)
   1ebcc:	e13ff204 	addi	r4,fp,-56
   1ebd0:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_add(&na, b);
   1ebd4:	e17fff17 	ldw	r5,-4(fp)
   1ebd8:	e13ff204 	addi	r4,fp,-56
   1ebdc:	00142340 	call	14234 <secp256k1_fe_add>
    return secp256k1_fe_normalizes_to_zero_var(&na);
   1ebe0:	e13ff204 	addi	r4,fp,-56
   1ebe4:	00131a00 	call	131a0 <secp256k1_fe_normalizes_to_zero_var>
}
   1ebe8:	e037883a 	mov	sp,fp
   1ebec:	dfc00117 	ldw	ra,4(sp)
   1ebf0:	df000017 	ldw	fp,0(sp)
   1ebf4:	dec00204 	addi	sp,sp,8
   1ebf8:	f800283a 	ret

0001ebfc <secp256k1_fe_sqrt>:

static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {
   1ebfc:	deff6b04 	addi	sp,sp,-596
   1ec00:	dfc09415 	stw	ra,592(sp)
   1ec04:	df009315 	stw	fp,588(sp)
   1ec08:	df009304 	addi	fp,sp,588
   1ec0c:	e13ffe15 	stw	r4,-8(fp)
   1ec10:	e17fff15 	stw	r5,-4(fp)
    /** The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in
     *  { 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block:
     *  1, [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]
     */

    secp256k1_fe_sqr(&x2, a);
   1ec14:	e0bf6e04 	addi	r2,fp,-584
   1ec18:	e17fff17 	ldw	r5,-4(fp)
   1ec1c:	1009883a 	mov	r4,r2
   1ec20:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x2, &x2, a);
   1ec24:	e0ff6e04 	addi	r3,fp,-584
   1ec28:	e0bf6e04 	addi	r2,fp,-584
   1ec2c:	e1bfff17 	ldw	r6,-4(fp)
   1ec30:	180b883a 	mov	r5,r3
   1ec34:	1009883a 	mov	r4,r2
   1ec38:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    secp256k1_fe_sqr(&x3, &x2);
   1ec3c:	e0ff6e04 	addi	r3,fp,-584
   1ec40:	e0bf7a04 	addi	r2,fp,-536
   1ec44:	180b883a 	mov	r5,r3
   1ec48:	1009883a 	mov	r4,r2
   1ec4c:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x3, &x3, a);
   1ec50:	e0ff7a04 	addi	r3,fp,-536
   1ec54:	e0bf7a04 	addi	r2,fp,-536
   1ec58:	e1bfff17 	ldw	r6,-4(fp)
   1ec5c:	180b883a 	mov	r5,r3
   1ec60:	1009883a 	mov	r4,r2
   1ec64:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x6 = x3;
   1ec68:	e0bf7a17 	ldw	r2,-536(fp)
   1ec6c:	e0bf8615 	stw	r2,-488(fp)
   1ec70:	e0bf7b17 	ldw	r2,-532(fp)
   1ec74:	e0bf8715 	stw	r2,-484(fp)
   1ec78:	e0bf7c17 	ldw	r2,-528(fp)
   1ec7c:	e0bf8815 	stw	r2,-480(fp)
   1ec80:	e0bf7d17 	ldw	r2,-524(fp)
   1ec84:	e0bf8915 	stw	r2,-476(fp)
   1ec88:	e0bf7e17 	ldw	r2,-520(fp)
   1ec8c:	e0bf8a15 	stw	r2,-472(fp)
   1ec90:	e0bf7f17 	ldw	r2,-516(fp)
   1ec94:	e0bf8b15 	stw	r2,-468(fp)
   1ec98:	e0bf8017 	ldw	r2,-512(fp)
   1ec9c:	e0bf8c15 	stw	r2,-464(fp)
   1eca0:	e0bf8117 	ldw	r2,-508(fp)
   1eca4:	e0bf8d15 	stw	r2,-460(fp)
   1eca8:	e0bf8217 	ldw	r2,-504(fp)
   1ecac:	e0bf8e15 	stw	r2,-456(fp)
   1ecb0:	e0bf8317 	ldw	r2,-500(fp)
   1ecb4:	e0bf8f15 	stw	r2,-452(fp)
   1ecb8:	e0bf8417 	ldw	r2,-496(fp)
   1ecbc:	e0bf9015 	stw	r2,-448(fp)
   1ecc0:	e0bf8517 	ldw	r2,-492(fp)
   1ecc4:	e0bf9115 	stw	r2,-444(fp)
    for (j=0; j<3; j++) {
   1ecc8:	e03f6d15 	stw	zero,-588(fp)
   1eccc:	00000806 	br	1ecf0 <secp256k1_fe_sqrt+0xf4>
        secp256k1_fe_sqr(&x6, &x6);
   1ecd0:	e0ff8604 	addi	r3,fp,-488
   1ecd4:	e0bf8604 	addi	r2,fp,-488
   1ecd8:	180b883a 	mov	r5,r3
   1ecdc:	1009883a 	mov	r4,r2
   1ece0:	001e3440 	call	1e344 <secp256k1_fe_sqr>

    secp256k1_fe_sqr(&x3, &x2);
    secp256k1_fe_mul(&x3, &x3, a);

    x6 = x3;
    for (j=0; j<3; j++) {
   1ece4:	e0bf6d17 	ldw	r2,-588(fp)
   1ece8:	10800044 	addi	r2,r2,1
   1ecec:	e0bf6d15 	stw	r2,-588(fp)
   1ecf0:	e0bf6d17 	ldw	r2,-588(fp)
   1ecf4:	108000d0 	cmplti	r2,r2,3
   1ecf8:	103ff51e 	bne	r2,zero,1ecd0 <__alt_mem_epcs_flash_controller+0xfe00dcd0>
        secp256k1_fe_sqr(&x6, &x6);
    }
    secp256k1_fe_mul(&x6, &x6, &x3);
   1ecfc:	e13f7a04 	addi	r4,fp,-536
   1ed00:	e0ff8604 	addi	r3,fp,-488
   1ed04:	e0bf8604 	addi	r2,fp,-488
   1ed08:	200d883a 	mov	r6,r4
   1ed0c:	180b883a 	mov	r5,r3
   1ed10:	1009883a 	mov	r4,r2
   1ed14:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x9 = x6;
   1ed18:	e0bf8617 	ldw	r2,-488(fp)
   1ed1c:	e0bf9215 	stw	r2,-440(fp)
   1ed20:	e0bf8717 	ldw	r2,-484(fp)
   1ed24:	e0bf9315 	stw	r2,-436(fp)
   1ed28:	e0bf8817 	ldw	r2,-480(fp)
   1ed2c:	e0bf9415 	stw	r2,-432(fp)
   1ed30:	e0bf8917 	ldw	r2,-476(fp)
   1ed34:	e0bf9515 	stw	r2,-428(fp)
   1ed38:	e0bf8a17 	ldw	r2,-472(fp)
   1ed3c:	e0bf9615 	stw	r2,-424(fp)
   1ed40:	e0bf8b17 	ldw	r2,-468(fp)
   1ed44:	e0bf9715 	stw	r2,-420(fp)
   1ed48:	e0bf8c17 	ldw	r2,-464(fp)
   1ed4c:	e0bf9815 	stw	r2,-416(fp)
   1ed50:	e0bf8d17 	ldw	r2,-460(fp)
   1ed54:	e0bf9915 	stw	r2,-412(fp)
   1ed58:	e0bf8e17 	ldw	r2,-456(fp)
   1ed5c:	e0bf9a15 	stw	r2,-408(fp)
   1ed60:	e0bf8f17 	ldw	r2,-452(fp)
   1ed64:	e0bf9b15 	stw	r2,-404(fp)
   1ed68:	e0bf9017 	ldw	r2,-448(fp)
   1ed6c:	e0bf9c15 	stw	r2,-400(fp)
   1ed70:	e0bf9117 	ldw	r2,-444(fp)
   1ed74:	e0bf9d15 	stw	r2,-396(fp)
    for (j=0; j<3; j++) {
   1ed78:	e03f6d15 	stw	zero,-588(fp)
   1ed7c:	00000806 	br	1eda0 <secp256k1_fe_sqrt+0x1a4>
        secp256k1_fe_sqr(&x9, &x9);
   1ed80:	e0ff9204 	addi	r3,fp,-440
   1ed84:	e0bf9204 	addi	r2,fp,-440
   1ed88:	180b883a 	mov	r5,r3
   1ed8c:	1009883a 	mov	r4,r2
   1ed90:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x6, &x6);
    }
    secp256k1_fe_mul(&x6, &x6, &x3);

    x9 = x6;
    for (j=0; j<3; j++) {
   1ed94:	e0bf6d17 	ldw	r2,-588(fp)
   1ed98:	10800044 	addi	r2,r2,1
   1ed9c:	e0bf6d15 	stw	r2,-588(fp)
   1eda0:	e0bf6d17 	ldw	r2,-588(fp)
   1eda4:	108000d0 	cmplti	r2,r2,3
   1eda8:	103ff51e 	bne	r2,zero,1ed80 <__alt_mem_epcs_flash_controller+0xfe00dd80>
        secp256k1_fe_sqr(&x9, &x9);
    }
    secp256k1_fe_mul(&x9, &x9, &x3);
   1edac:	e13f7a04 	addi	r4,fp,-536
   1edb0:	e0ff9204 	addi	r3,fp,-440
   1edb4:	e0bf9204 	addi	r2,fp,-440
   1edb8:	200d883a 	mov	r6,r4
   1edbc:	180b883a 	mov	r5,r3
   1edc0:	1009883a 	mov	r4,r2
   1edc4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x11 = x9;
   1edc8:	e0bf9217 	ldw	r2,-440(fp)
   1edcc:	e0bf9e15 	stw	r2,-392(fp)
   1edd0:	e0bf9317 	ldw	r2,-436(fp)
   1edd4:	e0bf9f15 	stw	r2,-388(fp)
   1edd8:	e0bf9417 	ldw	r2,-432(fp)
   1eddc:	e0bfa015 	stw	r2,-384(fp)
   1ede0:	e0bf9517 	ldw	r2,-428(fp)
   1ede4:	e0bfa115 	stw	r2,-380(fp)
   1ede8:	e0bf9617 	ldw	r2,-424(fp)
   1edec:	e0bfa215 	stw	r2,-376(fp)
   1edf0:	e0bf9717 	ldw	r2,-420(fp)
   1edf4:	e0bfa315 	stw	r2,-372(fp)
   1edf8:	e0bf9817 	ldw	r2,-416(fp)
   1edfc:	e0bfa415 	stw	r2,-368(fp)
   1ee00:	e0bf9917 	ldw	r2,-412(fp)
   1ee04:	e0bfa515 	stw	r2,-364(fp)
   1ee08:	e0bf9a17 	ldw	r2,-408(fp)
   1ee0c:	e0bfa615 	stw	r2,-360(fp)
   1ee10:	e0bf9b17 	ldw	r2,-404(fp)
   1ee14:	e0bfa715 	stw	r2,-356(fp)
   1ee18:	e0bf9c17 	ldw	r2,-400(fp)
   1ee1c:	e0bfa815 	stw	r2,-352(fp)
   1ee20:	e0bf9d17 	ldw	r2,-396(fp)
   1ee24:	e0bfa915 	stw	r2,-348(fp)
    for (j=0; j<2; j++) {
   1ee28:	e03f6d15 	stw	zero,-588(fp)
   1ee2c:	00000806 	br	1ee50 <secp256k1_fe_sqrt+0x254>
        secp256k1_fe_sqr(&x11, &x11);
   1ee30:	e0ff9e04 	addi	r3,fp,-392
   1ee34:	e0bf9e04 	addi	r2,fp,-392
   1ee38:	180b883a 	mov	r5,r3
   1ee3c:	1009883a 	mov	r4,r2
   1ee40:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x9, &x9);
    }
    secp256k1_fe_mul(&x9, &x9, &x3);

    x11 = x9;
    for (j=0; j<2; j++) {
   1ee44:	e0bf6d17 	ldw	r2,-588(fp)
   1ee48:	10800044 	addi	r2,r2,1
   1ee4c:	e0bf6d15 	stw	r2,-588(fp)
   1ee50:	e0bf6d17 	ldw	r2,-588(fp)
   1ee54:	10800090 	cmplti	r2,r2,2
   1ee58:	103ff51e 	bne	r2,zero,1ee30 <__alt_mem_epcs_flash_controller+0xfe00de30>
        secp256k1_fe_sqr(&x11, &x11);
    }
    secp256k1_fe_mul(&x11, &x11, &x2);
   1ee5c:	e13f6e04 	addi	r4,fp,-584
   1ee60:	e0ff9e04 	addi	r3,fp,-392
   1ee64:	e0bf9e04 	addi	r2,fp,-392
   1ee68:	200d883a 	mov	r6,r4
   1ee6c:	180b883a 	mov	r5,r3
   1ee70:	1009883a 	mov	r4,r2
   1ee74:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x22 = x11;
   1ee78:	e0bf9e17 	ldw	r2,-392(fp)
   1ee7c:	e0bfaa15 	stw	r2,-344(fp)
   1ee80:	e0bf9f17 	ldw	r2,-388(fp)
   1ee84:	e0bfab15 	stw	r2,-340(fp)
   1ee88:	e0bfa017 	ldw	r2,-384(fp)
   1ee8c:	e0bfac15 	stw	r2,-336(fp)
   1ee90:	e0bfa117 	ldw	r2,-380(fp)
   1ee94:	e0bfad15 	stw	r2,-332(fp)
   1ee98:	e0bfa217 	ldw	r2,-376(fp)
   1ee9c:	e0bfae15 	stw	r2,-328(fp)
   1eea0:	e0bfa317 	ldw	r2,-372(fp)
   1eea4:	e0bfaf15 	stw	r2,-324(fp)
   1eea8:	e0bfa417 	ldw	r2,-368(fp)
   1eeac:	e0bfb015 	stw	r2,-320(fp)
   1eeb0:	e0bfa517 	ldw	r2,-364(fp)
   1eeb4:	e0bfb115 	stw	r2,-316(fp)
   1eeb8:	e0bfa617 	ldw	r2,-360(fp)
   1eebc:	e0bfb215 	stw	r2,-312(fp)
   1eec0:	e0bfa717 	ldw	r2,-356(fp)
   1eec4:	e0bfb315 	stw	r2,-308(fp)
   1eec8:	e0bfa817 	ldw	r2,-352(fp)
   1eecc:	e0bfb415 	stw	r2,-304(fp)
   1eed0:	e0bfa917 	ldw	r2,-348(fp)
   1eed4:	e0bfb515 	stw	r2,-300(fp)
    for (j=0; j<11; j++) {
   1eed8:	e03f6d15 	stw	zero,-588(fp)
   1eedc:	00000806 	br	1ef00 <secp256k1_fe_sqrt+0x304>
        secp256k1_fe_sqr(&x22, &x22);
   1eee0:	e0ffaa04 	addi	r3,fp,-344
   1eee4:	e0bfaa04 	addi	r2,fp,-344
   1eee8:	180b883a 	mov	r5,r3
   1eeec:	1009883a 	mov	r4,r2
   1eef0:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x11, &x11);
    }
    secp256k1_fe_mul(&x11, &x11, &x2);

    x22 = x11;
    for (j=0; j<11; j++) {
   1eef4:	e0bf6d17 	ldw	r2,-588(fp)
   1eef8:	10800044 	addi	r2,r2,1
   1eefc:	e0bf6d15 	stw	r2,-588(fp)
   1ef00:	e0bf6d17 	ldw	r2,-588(fp)
   1ef04:	108002d0 	cmplti	r2,r2,11
   1ef08:	103ff51e 	bne	r2,zero,1eee0 <__alt_mem_epcs_flash_controller+0xfe00dee0>
        secp256k1_fe_sqr(&x22, &x22);
    }
    secp256k1_fe_mul(&x22, &x22, &x11);
   1ef0c:	e13f9e04 	addi	r4,fp,-392
   1ef10:	e0ffaa04 	addi	r3,fp,-344
   1ef14:	e0bfaa04 	addi	r2,fp,-344
   1ef18:	200d883a 	mov	r6,r4
   1ef1c:	180b883a 	mov	r5,r3
   1ef20:	1009883a 	mov	r4,r2
   1ef24:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x44 = x22;
   1ef28:	e0bfaa17 	ldw	r2,-344(fp)
   1ef2c:	e0bfb615 	stw	r2,-296(fp)
   1ef30:	e0bfab17 	ldw	r2,-340(fp)
   1ef34:	e0bfb715 	stw	r2,-292(fp)
   1ef38:	e0bfac17 	ldw	r2,-336(fp)
   1ef3c:	e0bfb815 	stw	r2,-288(fp)
   1ef40:	e0bfad17 	ldw	r2,-332(fp)
   1ef44:	e0bfb915 	stw	r2,-284(fp)
   1ef48:	e0bfae17 	ldw	r2,-328(fp)
   1ef4c:	e0bfba15 	stw	r2,-280(fp)
   1ef50:	e0bfaf17 	ldw	r2,-324(fp)
   1ef54:	e0bfbb15 	stw	r2,-276(fp)
   1ef58:	e0bfb017 	ldw	r2,-320(fp)
   1ef5c:	e0bfbc15 	stw	r2,-272(fp)
   1ef60:	e0bfb117 	ldw	r2,-316(fp)
   1ef64:	e0bfbd15 	stw	r2,-268(fp)
   1ef68:	e0bfb217 	ldw	r2,-312(fp)
   1ef6c:	e0bfbe15 	stw	r2,-264(fp)
   1ef70:	e0bfb317 	ldw	r2,-308(fp)
   1ef74:	e0bfbf15 	stw	r2,-260(fp)
   1ef78:	e0bfb417 	ldw	r2,-304(fp)
   1ef7c:	e0bfc015 	stw	r2,-256(fp)
   1ef80:	e0bfb517 	ldw	r2,-300(fp)
   1ef84:	e0bfc115 	stw	r2,-252(fp)
    for (j=0; j<22; j++) {
   1ef88:	e03f6d15 	stw	zero,-588(fp)
   1ef8c:	00000806 	br	1efb0 <secp256k1_fe_sqrt+0x3b4>
        secp256k1_fe_sqr(&x44, &x44);
   1ef90:	e0ffb604 	addi	r3,fp,-296
   1ef94:	e0bfb604 	addi	r2,fp,-296
   1ef98:	180b883a 	mov	r5,r3
   1ef9c:	1009883a 	mov	r4,r2
   1efa0:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x22, &x22);
    }
    secp256k1_fe_mul(&x22, &x22, &x11);

    x44 = x22;
    for (j=0; j<22; j++) {
   1efa4:	e0bf6d17 	ldw	r2,-588(fp)
   1efa8:	10800044 	addi	r2,r2,1
   1efac:	e0bf6d15 	stw	r2,-588(fp)
   1efb0:	e0bf6d17 	ldw	r2,-588(fp)
   1efb4:	10800590 	cmplti	r2,r2,22
   1efb8:	103ff51e 	bne	r2,zero,1ef90 <__alt_mem_epcs_flash_controller+0xfe00df90>
        secp256k1_fe_sqr(&x44, &x44);
    }
    secp256k1_fe_mul(&x44, &x44, &x22);
   1efbc:	e13faa04 	addi	r4,fp,-344
   1efc0:	e0ffb604 	addi	r3,fp,-296
   1efc4:	e0bfb604 	addi	r2,fp,-296
   1efc8:	200d883a 	mov	r6,r4
   1efcc:	180b883a 	mov	r5,r3
   1efd0:	1009883a 	mov	r4,r2
   1efd4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x88 = x44;
   1efd8:	e0bfb617 	ldw	r2,-296(fp)
   1efdc:	e0bfc215 	stw	r2,-248(fp)
   1efe0:	e0bfb717 	ldw	r2,-292(fp)
   1efe4:	e0bfc315 	stw	r2,-244(fp)
   1efe8:	e0bfb817 	ldw	r2,-288(fp)
   1efec:	e0bfc415 	stw	r2,-240(fp)
   1eff0:	e0bfb917 	ldw	r2,-284(fp)
   1eff4:	e0bfc515 	stw	r2,-236(fp)
   1eff8:	e0bfba17 	ldw	r2,-280(fp)
   1effc:	e0bfc615 	stw	r2,-232(fp)
   1f000:	e0bfbb17 	ldw	r2,-276(fp)
   1f004:	e0bfc715 	stw	r2,-228(fp)
   1f008:	e0bfbc17 	ldw	r2,-272(fp)
   1f00c:	e0bfc815 	stw	r2,-224(fp)
   1f010:	e0bfbd17 	ldw	r2,-268(fp)
   1f014:	e0bfc915 	stw	r2,-220(fp)
   1f018:	e0bfbe17 	ldw	r2,-264(fp)
   1f01c:	e0bfca15 	stw	r2,-216(fp)
   1f020:	e0bfbf17 	ldw	r2,-260(fp)
   1f024:	e0bfcb15 	stw	r2,-212(fp)
   1f028:	e0bfc017 	ldw	r2,-256(fp)
   1f02c:	e0bfcc15 	stw	r2,-208(fp)
   1f030:	e0bfc117 	ldw	r2,-252(fp)
   1f034:	e0bfcd15 	stw	r2,-204(fp)
    for (j=0; j<44; j++) {
   1f038:	e03f6d15 	stw	zero,-588(fp)
   1f03c:	00000806 	br	1f060 <secp256k1_fe_sqrt+0x464>
        secp256k1_fe_sqr(&x88, &x88);
   1f040:	e0ffc204 	addi	r3,fp,-248
   1f044:	e0bfc204 	addi	r2,fp,-248
   1f048:	180b883a 	mov	r5,r3
   1f04c:	1009883a 	mov	r4,r2
   1f050:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x44, &x44);
    }
    secp256k1_fe_mul(&x44, &x44, &x22);

    x88 = x44;
    for (j=0; j<44; j++) {
   1f054:	e0bf6d17 	ldw	r2,-588(fp)
   1f058:	10800044 	addi	r2,r2,1
   1f05c:	e0bf6d15 	stw	r2,-588(fp)
   1f060:	e0bf6d17 	ldw	r2,-588(fp)
   1f064:	10800b10 	cmplti	r2,r2,44
   1f068:	103ff51e 	bne	r2,zero,1f040 <__alt_mem_epcs_flash_controller+0xfe00e040>
        secp256k1_fe_sqr(&x88, &x88);
    }
    secp256k1_fe_mul(&x88, &x88, &x44);
   1f06c:	e13fb604 	addi	r4,fp,-296
   1f070:	e0ffc204 	addi	r3,fp,-248
   1f074:	e0bfc204 	addi	r2,fp,-248
   1f078:	200d883a 	mov	r6,r4
   1f07c:	180b883a 	mov	r5,r3
   1f080:	1009883a 	mov	r4,r2
   1f084:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x176 = x88;
   1f088:	e0bfc217 	ldw	r2,-248(fp)
   1f08c:	e0bfce15 	stw	r2,-200(fp)
   1f090:	e0bfc317 	ldw	r2,-244(fp)
   1f094:	e0bfcf15 	stw	r2,-196(fp)
   1f098:	e0bfc417 	ldw	r2,-240(fp)
   1f09c:	e0bfd015 	stw	r2,-192(fp)
   1f0a0:	e0bfc517 	ldw	r2,-236(fp)
   1f0a4:	e0bfd115 	stw	r2,-188(fp)
   1f0a8:	e0bfc617 	ldw	r2,-232(fp)
   1f0ac:	e0bfd215 	stw	r2,-184(fp)
   1f0b0:	e0bfc717 	ldw	r2,-228(fp)
   1f0b4:	e0bfd315 	stw	r2,-180(fp)
   1f0b8:	e0bfc817 	ldw	r2,-224(fp)
   1f0bc:	e0bfd415 	stw	r2,-176(fp)
   1f0c0:	e0bfc917 	ldw	r2,-220(fp)
   1f0c4:	e0bfd515 	stw	r2,-172(fp)
   1f0c8:	e0bfca17 	ldw	r2,-216(fp)
   1f0cc:	e0bfd615 	stw	r2,-168(fp)
   1f0d0:	e0bfcb17 	ldw	r2,-212(fp)
   1f0d4:	e0bfd715 	stw	r2,-164(fp)
   1f0d8:	e0bfcc17 	ldw	r2,-208(fp)
   1f0dc:	e0bfd815 	stw	r2,-160(fp)
   1f0e0:	e0bfcd17 	ldw	r2,-204(fp)
   1f0e4:	e0bfd915 	stw	r2,-156(fp)
    for (j=0; j<88; j++) {
   1f0e8:	e03f6d15 	stw	zero,-588(fp)
   1f0ec:	00000806 	br	1f110 <secp256k1_fe_sqrt+0x514>
        secp256k1_fe_sqr(&x176, &x176);
   1f0f0:	e0ffce04 	addi	r3,fp,-200
   1f0f4:	e0bfce04 	addi	r2,fp,-200
   1f0f8:	180b883a 	mov	r5,r3
   1f0fc:	1009883a 	mov	r4,r2
   1f100:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x88, &x88);
    }
    secp256k1_fe_mul(&x88, &x88, &x44);

    x176 = x88;
    for (j=0; j<88; j++) {
   1f104:	e0bf6d17 	ldw	r2,-588(fp)
   1f108:	10800044 	addi	r2,r2,1
   1f10c:	e0bf6d15 	stw	r2,-588(fp)
   1f110:	e0bf6d17 	ldw	r2,-588(fp)
   1f114:	10801610 	cmplti	r2,r2,88
   1f118:	103ff51e 	bne	r2,zero,1f0f0 <__alt_mem_epcs_flash_controller+0xfe00e0f0>
        secp256k1_fe_sqr(&x176, &x176);
    }
    secp256k1_fe_mul(&x176, &x176, &x88);
   1f11c:	e13fc204 	addi	r4,fp,-248
   1f120:	e0ffce04 	addi	r3,fp,-200
   1f124:	e0bfce04 	addi	r2,fp,-200
   1f128:	200d883a 	mov	r6,r4
   1f12c:	180b883a 	mov	r5,r3
   1f130:	1009883a 	mov	r4,r2
   1f134:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x220 = x176;
   1f138:	e0bfce17 	ldw	r2,-200(fp)
   1f13c:	e0bfda15 	stw	r2,-152(fp)
   1f140:	e0bfcf17 	ldw	r2,-196(fp)
   1f144:	e0bfdb15 	stw	r2,-148(fp)
   1f148:	e0bfd017 	ldw	r2,-192(fp)
   1f14c:	e0bfdc15 	stw	r2,-144(fp)
   1f150:	e0bfd117 	ldw	r2,-188(fp)
   1f154:	e0bfdd15 	stw	r2,-140(fp)
   1f158:	e0bfd217 	ldw	r2,-184(fp)
   1f15c:	e0bfde15 	stw	r2,-136(fp)
   1f160:	e0bfd317 	ldw	r2,-180(fp)
   1f164:	e0bfdf15 	stw	r2,-132(fp)
   1f168:	e0bfd417 	ldw	r2,-176(fp)
   1f16c:	e0bfe015 	stw	r2,-128(fp)
   1f170:	e0bfd517 	ldw	r2,-172(fp)
   1f174:	e0bfe115 	stw	r2,-124(fp)
   1f178:	e0bfd617 	ldw	r2,-168(fp)
   1f17c:	e0bfe215 	stw	r2,-120(fp)
   1f180:	e0bfd717 	ldw	r2,-164(fp)
   1f184:	e0bfe315 	stw	r2,-116(fp)
   1f188:	e0bfd817 	ldw	r2,-160(fp)
   1f18c:	e0bfe415 	stw	r2,-112(fp)
   1f190:	e0bfd917 	ldw	r2,-156(fp)
   1f194:	e0bfe515 	stw	r2,-108(fp)
    for (j=0; j<44; j++) {
   1f198:	e03f6d15 	stw	zero,-588(fp)
   1f19c:	00000806 	br	1f1c0 <secp256k1_fe_sqrt+0x5c4>
        secp256k1_fe_sqr(&x220, &x220);
   1f1a0:	e0ffda04 	addi	r3,fp,-152
   1f1a4:	e0bfda04 	addi	r2,fp,-152
   1f1a8:	180b883a 	mov	r5,r3
   1f1ac:	1009883a 	mov	r4,r2
   1f1b0:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x176, &x176);
    }
    secp256k1_fe_mul(&x176, &x176, &x88);

    x220 = x176;
    for (j=0; j<44; j++) {
   1f1b4:	e0bf6d17 	ldw	r2,-588(fp)
   1f1b8:	10800044 	addi	r2,r2,1
   1f1bc:	e0bf6d15 	stw	r2,-588(fp)
   1f1c0:	e0bf6d17 	ldw	r2,-588(fp)
   1f1c4:	10800b10 	cmplti	r2,r2,44
   1f1c8:	103ff51e 	bne	r2,zero,1f1a0 <__alt_mem_epcs_flash_controller+0xfe00e1a0>
        secp256k1_fe_sqr(&x220, &x220);
    }
    secp256k1_fe_mul(&x220, &x220, &x44);
   1f1cc:	e13fb604 	addi	r4,fp,-296
   1f1d0:	e0ffda04 	addi	r3,fp,-152
   1f1d4:	e0bfda04 	addi	r2,fp,-152
   1f1d8:	200d883a 	mov	r6,r4
   1f1dc:	180b883a 	mov	r5,r3
   1f1e0:	1009883a 	mov	r4,r2
   1f1e4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x223 = x220;
   1f1e8:	e0bfda17 	ldw	r2,-152(fp)
   1f1ec:	e0bfe615 	stw	r2,-104(fp)
   1f1f0:	e0bfdb17 	ldw	r2,-148(fp)
   1f1f4:	e0bfe715 	stw	r2,-100(fp)
   1f1f8:	e0bfdc17 	ldw	r2,-144(fp)
   1f1fc:	e0bfe815 	stw	r2,-96(fp)
   1f200:	e0bfdd17 	ldw	r2,-140(fp)
   1f204:	e0bfe915 	stw	r2,-92(fp)
   1f208:	e0bfde17 	ldw	r2,-136(fp)
   1f20c:	e0bfea15 	stw	r2,-88(fp)
   1f210:	e0bfdf17 	ldw	r2,-132(fp)
   1f214:	e0bfeb15 	stw	r2,-84(fp)
   1f218:	e0bfe017 	ldw	r2,-128(fp)
   1f21c:	e0bfec15 	stw	r2,-80(fp)
   1f220:	e0bfe117 	ldw	r2,-124(fp)
   1f224:	e0bfed15 	stw	r2,-76(fp)
   1f228:	e0bfe217 	ldw	r2,-120(fp)
   1f22c:	e0bfee15 	stw	r2,-72(fp)
   1f230:	e0bfe317 	ldw	r2,-116(fp)
   1f234:	e0bfef15 	stw	r2,-68(fp)
   1f238:	e0bfe417 	ldw	r2,-112(fp)
   1f23c:	e0bff015 	stw	r2,-64(fp)
   1f240:	e0bfe517 	ldw	r2,-108(fp)
   1f244:	e0bff115 	stw	r2,-60(fp)
    for (j=0; j<3; j++) {
   1f248:	e03f6d15 	stw	zero,-588(fp)
   1f24c:	00000806 	br	1f270 <secp256k1_fe_sqrt+0x674>
        secp256k1_fe_sqr(&x223, &x223);
   1f250:	e0ffe604 	addi	r3,fp,-104
   1f254:	e0bfe604 	addi	r2,fp,-104
   1f258:	180b883a 	mov	r5,r3
   1f25c:	1009883a 	mov	r4,r2
   1f260:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x220, &x220);
    }
    secp256k1_fe_mul(&x220, &x220, &x44);

    x223 = x220;
    for (j=0; j<3; j++) {
   1f264:	e0bf6d17 	ldw	r2,-588(fp)
   1f268:	10800044 	addi	r2,r2,1
   1f26c:	e0bf6d15 	stw	r2,-588(fp)
   1f270:	e0bf6d17 	ldw	r2,-588(fp)
   1f274:	108000d0 	cmplti	r2,r2,3
   1f278:	103ff51e 	bne	r2,zero,1f250 <__alt_mem_epcs_flash_controller+0xfe00e250>
        secp256k1_fe_sqr(&x223, &x223);
    }
    secp256k1_fe_mul(&x223, &x223, &x3);
   1f27c:	e13f7a04 	addi	r4,fp,-536
   1f280:	e0ffe604 	addi	r3,fp,-104
   1f284:	e0bfe604 	addi	r2,fp,-104
   1f288:	200d883a 	mov	r6,r4
   1f28c:	180b883a 	mov	r5,r3
   1f290:	1009883a 	mov	r4,r2
   1f294:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    /* The final result is then assembled using a sliding window over the blocks. */

    t1 = x223;
   1f298:	e0bfe617 	ldw	r2,-104(fp)
   1f29c:	e0bff215 	stw	r2,-56(fp)
   1f2a0:	e0bfe717 	ldw	r2,-100(fp)
   1f2a4:	e0bff315 	stw	r2,-52(fp)
   1f2a8:	e0bfe817 	ldw	r2,-96(fp)
   1f2ac:	e0bff415 	stw	r2,-48(fp)
   1f2b0:	e0bfe917 	ldw	r2,-92(fp)
   1f2b4:	e0bff515 	stw	r2,-44(fp)
   1f2b8:	e0bfea17 	ldw	r2,-88(fp)
   1f2bc:	e0bff615 	stw	r2,-40(fp)
   1f2c0:	e0bfeb17 	ldw	r2,-84(fp)
   1f2c4:	e0bff715 	stw	r2,-36(fp)
   1f2c8:	e0bfec17 	ldw	r2,-80(fp)
   1f2cc:	e0bff815 	stw	r2,-32(fp)
   1f2d0:	e0bfed17 	ldw	r2,-76(fp)
   1f2d4:	e0bff915 	stw	r2,-28(fp)
   1f2d8:	e0bfee17 	ldw	r2,-72(fp)
   1f2dc:	e0bffa15 	stw	r2,-24(fp)
   1f2e0:	e0bfef17 	ldw	r2,-68(fp)
   1f2e4:	e0bffb15 	stw	r2,-20(fp)
   1f2e8:	e0bff017 	ldw	r2,-64(fp)
   1f2ec:	e0bffc15 	stw	r2,-16(fp)
   1f2f0:	e0bff117 	ldw	r2,-60(fp)
   1f2f4:	e0bffd15 	stw	r2,-12(fp)
    for (j=0; j<23; j++) {
   1f2f8:	e03f6d15 	stw	zero,-588(fp)
   1f2fc:	00000806 	br	1f320 <secp256k1_fe_sqrt+0x724>
        secp256k1_fe_sqr(&t1, &t1);
   1f300:	e0fff204 	addi	r3,fp,-56
   1f304:	e0bff204 	addi	r2,fp,-56
   1f308:	180b883a 	mov	r5,r3
   1f30c:	1009883a 	mov	r4,r2
   1f310:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x223, &x223, &x3);

    /* The final result is then assembled using a sliding window over the blocks. */

    t1 = x223;
    for (j=0; j<23; j++) {
   1f314:	e0bf6d17 	ldw	r2,-588(fp)
   1f318:	10800044 	addi	r2,r2,1
   1f31c:	e0bf6d15 	stw	r2,-588(fp)
   1f320:	e0bf6d17 	ldw	r2,-588(fp)
   1f324:	108005d0 	cmplti	r2,r2,23
   1f328:	103ff51e 	bne	r2,zero,1f300 <__alt_mem_epcs_flash_controller+0xfe00e300>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x22);
   1f32c:	e13faa04 	addi	r4,fp,-344
   1f330:	e0fff204 	addi	r3,fp,-56
   1f334:	e0bff204 	addi	r2,fp,-56
   1f338:	200d883a 	mov	r6,r4
   1f33c:	180b883a 	mov	r5,r3
   1f340:	1009883a 	mov	r4,r2
   1f344:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    for (j=0; j<6; j++) {
   1f348:	e03f6d15 	stw	zero,-588(fp)
   1f34c:	00000806 	br	1f370 <secp256k1_fe_sqrt+0x774>
        secp256k1_fe_sqr(&t1, &t1);
   1f350:	e0fff204 	addi	r3,fp,-56
   1f354:	e0bff204 	addi	r2,fp,-56
   1f358:	180b883a 	mov	r5,r3
   1f35c:	1009883a 	mov	r4,r2
   1f360:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    t1 = x223;
    for (j=0; j<23; j++) {
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x22);
    for (j=0; j<6; j++) {
   1f364:	e0bf6d17 	ldw	r2,-588(fp)
   1f368:	10800044 	addi	r2,r2,1
   1f36c:	e0bf6d15 	stw	r2,-588(fp)
   1f370:	e0bf6d17 	ldw	r2,-588(fp)
   1f374:	10800190 	cmplti	r2,r2,6
   1f378:	103ff51e 	bne	r2,zero,1f350 <__alt_mem_epcs_flash_controller+0xfe00e350>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x2);
   1f37c:	e13f6e04 	addi	r4,fp,-584
   1f380:	e0fff204 	addi	r3,fp,-56
   1f384:	e0bff204 	addi	r2,fp,-56
   1f388:	200d883a 	mov	r6,r4
   1f38c:	180b883a 	mov	r5,r3
   1f390:	1009883a 	mov	r4,r2
   1f394:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_sqr(&t1, &t1);
   1f398:	e0fff204 	addi	r3,fp,-56
   1f39c:	e0bff204 	addi	r2,fp,-56
   1f3a0:	180b883a 	mov	r5,r3
   1f3a4:	1009883a 	mov	r4,r2
   1f3a8:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(r, &t1);
   1f3ac:	e0bff204 	addi	r2,fp,-56
   1f3b0:	100b883a 	mov	r5,r2
   1f3b4:	e13ffe17 	ldw	r4,-8(fp)
   1f3b8:	001e3440 	call	1e344 <secp256k1_fe_sqr>

    /* Check that a square root was actually calculated */

    secp256k1_fe_sqr(&t1, r);
   1f3bc:	e0bff204 	addi	r2,fp,-56
   1f3c0:	e17ffe17 	ldw	r5,-8(fp)
   1f3c4:	1009883a 	mov	r4,r2
   1f3c8:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    return secp256k1_fe_equal(&t1, a);
   1f3cc:	e0bff204 	addi	r2,fp,-56
   1f3d0:	e17fff17 	ldw	r5,-4(fp)
   1f3d4:	1009883a 	mov	r4,r2
   1f3d8:	001eb5c0 	call	1eb5c <secp256k1_fe_equal>
}
   1f3dc:	e037883a 	mov	sp,fp
   1f3e0:	dfc00117 	ldw	ra,4(sp)
   1f3e4:	df000017 	ldw	fp,0(sp)
   1f3e8:	dec00204 	addi	sp,sp,8
   1f3ec:	f800283a 	ret

0001f3f0 <secp256k1_fe_inv>:

static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {
   1f3f0:	deff6b04 	addi	sp,sp,-596
   1f3f4:	dfc09415 	stw	ra,592(sp)
   1f3f8:	df009315 	stw	fp,588(sp)
   1f3fc:	df009304 	addi	fp,sp,588
   1f400:	e13ffe15 	stw	r4,-8(fp)
   1f404:	e17fff15 	stw	r5,-4(fp)
    /** The binary representation of (p - 2) has 5 blocks of 1s, with lengths in
     *  { 1, 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block:
     *  [1], [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]
     */

    secp256k1_fe_sqr(&x2, a);
   1f408:	e0bf6e04 	addi	r2,fp,-584
   1f40c:	e17fff17 	ldw	r5,-4(fp)
   1f410:	1009883a 	mov	r4,r2
   1f414:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x2, &x2, a);
   1f418:	e0ff6e04 	addi	r3,fp,-584
   1f41c:	e0bf6e04 	addi	r2,fp,-584
   1f420:	e1bfff17 	ldw	r6,-4(fp)
   1f424:	180b883a 	mov	r5,r3
   1f428:	1009883a 	mov	r4,r2
   1f42c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    secp256k1_fe_sqr(&x3, &x2);
   1f430:	e0ff6e04 	addi	r3,fp,-584
   1f434:	e0bf7a04 	addi	r2,fp,-536
   1f438:	180b883a 	mov	r5,r3
   1f43c:	1009883a 	mov	r4,r2
   1f440:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x3, &x3, a);
   1f444:	e0ff7a04 	addi	r3,fp,-536
   1f448:	e0bf7a04 	addi	r2,fp,-536
   1f44c:	e1bfff17 	ldw	r6,-4(fp)
   1f450:	180b883a 	mov	r5,r3
   1f454:	1009883a 	mov	r4,r2
   1f458:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x6 = x3;
   1f45c:	e0bf7a17 	ldw	r2,-536(fp)
   1f460:	e0bf8615 	stw	r2,-488(fp)
   1f464:	e0bf7b17 	ldw	r2,-532(fp)
   1f468:	e0bf8715 	stw	r2,-484(fp)
   1f46c:	e0bf7c17 	ldw	r2,-528(fp)
   1f470:	e0bf8815 	stw	r2,-480(fp)
   1f474:	e0bf7d17 	ldw	r2,-524(fp)
   1f478:	e0bf8915 	stw	r2,-476(fp)
   1f47c:	e0bf7e17 	ldw	r2,-520(fp)
   1f480:	e0bf8a15 	stw	r2,-472(fp)
   1f484:	e0bf7f17 	ldw	r2,-516(fp)
   1f488:	e0bf8b15 	stw	r2,-468(fp)
   1f48c:	e0bf8017 	ldw	r2,-512(fp)
   1f490:	e0bf8c15 	stw	r2,-464(fp)
   1f494:	e0bf8117 	ldw	r2,-508(fp)
   1f498:	e0bf8d15 	stw	r2,-460(fp)
   1f49c:	e0bf8217 	ldw	r2,-504(fp)
   1f4a0:	e0bf8e15 	stw	r2,-456(fp)
   1f4a4:	e0bf8317 	ldw	r2,-500(fp)
   1f4a8:	e0bf8f15 	stw	r2,-452(fp)
   1f4ac:	e0bf8417 	ldw	r2,-496(fp)
   1f4b0:	e0bf9015 	stw	r2,-448(fp)
   1f4b4:	e0bf8517 	ldw	r2,-492(fp)
   1f4b8:	e0bf9115 	stw	r2,-444(fp)
    for (j=0; j<3; j++) {
   1f4bc:	e03f6d15 	stw	zero,-588(fp)
   1f4c0:	00000806 	br	1f4e4 <secp256k1_fe_inv+0xf4>
        secp256k1_fe_sqr(&x6, &x6);
   1f4c4:	e0ff8604 	addi	r3,fp,-488
   1f4c8:	e0bf8604 	addi	r2,fp,-488
   1f4cc:	180b883a 	mov	r5,r3
   1f4d0:	1009883a 	mov	r4,r2
   1f4d4:	001e3440 	call	1e344 <secp256k1_fe_sqr>

    secp256k1_fe_sqr(&x3, &x2);
    secp256k1_fe_mul(&x3, &x3, a);

    x6 = x3;
    for (j=0; j<3; j++) {
   1f4d8:	e0bf6d17 	ldw	r2,-588(fp)
   1f4dc:	10800044 	addi	r2,r2,1
   1f4e0:	e0bf6d15 	stw	r2,-588(fp)
   1f4e4:	e0bf6d17 	ldw	r2,-588(fp)
   1f4e8:	108000d0 	cmplti	r2,r2,3
   1f4ec:	103ff51e 	bne	r2,zero,1f4c4 <__alt_mem_epcs_flash_controller+0xfe00e4c4>
        secp256k1_fe_sqr(&x6, &x6);
    }
    secp256k1_fe_mul(&x6, &x6, &x3);
   1f4f0:	e13f7a04 	addi	r4,fp,-536
   1f4f4:	e0ff8604 	addi	r3,fp,-488
   1f4f8:	e0bf8604 	addi	r2,fp,-488
   1f4fc:	200d883a 	mov	r6,r4
   1f500:	180b883a 	mov	r5,r3
   1f504:	1009883a 	mov	r4,r2
   1f508:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x9 = x6;
   1f50c:	e0bf8617 	ldw	r2,-488(fp)
   1f510:	e0bf9215 	stw	r2,-440(fp)
   1f514:	e0bf8717 	ldw	r2,-484(fp)
   1f518:	e0bf9315 	stw	r2,-436(fp)
   1f51c:	e0bf8817 	ldw	r2,-480(fp)
   1f520:	e0bf9415 	stw	r2,-432(fp)
   1f524:	e0bf8917 	ldw	r2,-476(fp)
   1f528:	e0bf9515 	stw	r2,-428(fp)
   1f52c:	e0bf8a17 	ldw	r2,-472(fp)
   1f530:	e0bf9615 	stw	r2,-424(fp)
   1f534:	e0bf8b17 	ldw	r2,-468(fp)
   1f538:	e0bf9715 	stw	r2,-420(fp)
   1f53c:	e0bf8c17 	ldw	r2,-464(fp)
   1f540:	e0bf9815 	stw	r2,-416(fp)
   1f544:	e0bf8d17 	ldw	r2,-460(fp)
   1f548:	e0bf9915 	stw	r2,-412(fp)
   1f54c:	e0bf8e17 	ldw	r2,-456(fp)
   1f550:	e0bf9a15 	stw	r2,-408(fp)
   1f554:	e0bf8f17 	ldw	r2,-452(fp)
   1f558:	e0bf9b15 	stw	r2,-404(fp)
   1f55c:	e0bf9017 	ldw	r2,-448(fp)
   1f560:	e0bf9c15 	stw	r2,-400(fp)
   1f564:	e0bf9117 	ldw	r2,-444(fp)
   1f568:	e0bf9d15 	stw	r2,-396(fp)
    for (j=0; j<3; j++) {
   1f56c:	e03f6d15 	stw	zero,-588(fp)
   1f570:	00000806 	br	1f594 <secp256k1_fe_inv+0x1a4>
        secp256k1_fe_sqr(&x9, &x9);
   1f574:	e0ff9204 	addi	r3,fp,-440
   1f578:	e0bf9204 	addi	r2,fp,-440
   1f57c:	180b883a 	mov	r5,r3
   1f580:	1009883a 	mov	r4,r2
   1f584:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x6, &x6);
    }
    secp256k1_fe_mul(&x6, &x6, &x3);

    x9 = x6;
    for (j=0; j<3; j++) {
   1f588:	e0bf6d17 	ldw	r2,-588(fp)
   1f58c:	10800044 	addi	r2,r2,1
   1f590:	e0bf6d15 	stw	r2,-588(fp)
   1f594:	e0bf6d17 	ldw	r2,-588(fp)
   1f598:	108000d0 	cmplti	r2,r2,3
   1f59c:	103ff51e 	bne	r2,zero,1f574 <__alt_mem_epcs_flash_controller+0xfe00e574>
        secp256k1_fe_sqr(&x9, &x9);
    }
    secp256k1_fe_mul(&x9, &x9, &x3);
   1f5a0:	e13f7a04 	addi	r4,fp,-536
   1f5a4:	e0ff9204 	addi	r3,fp,-440
   1f5a8:	e0bf9204 	addi	r2,fp,-440
   1f5ac:	200d883a 	mov	r6,r4
   1f5b0:	180b883a 	mov	r5,r3
   1f5b4:	1009883a 	mov	r4,r2
   1f5b8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x11 = x9;
   1f5bc:	e0bf9217 	ldw	r2,-440(fp)
   1f5c0:	e0bf9e15 	stw	r2,-392(fp)
   1f5c4:	e0bf9317 	ldw	r2,-436(fp)
   1f5c8:	e0bf9f15 	stw	r2,-388(fp)
   1f5cc:	e0bf9417 	ldw	r2,-432(fp)
   1f5d0:	e0bfa015 	stw	r2,-384(fp)
   1f5d4:	e0bf9517 	ldw	r2,-428(fp)
   1f5d8:	e0bfa115 	stw	r2,-380(fp)
   1f5dc:	e0bf9617 	ldw	r2,-424(fp)
   1f5e0:	e0bfa215 	stw	r2,-376(fp)
   1f5e4:	e0bf9717 	ldw	r2,-420(fp)
   1f5e8:	e0bfa315 	stw	r2,-372(fp)
   1f5ec:	e0bf9817 	ldw	r2,-416(fp)
   1f5f0:	e0bfa415 	stw	r2,-368(fp)
   1f5f4:	e0bf9917 	ldw	r2,-412(fp)
   1f5f8:	e0bfa515 	stw	r2,-364(fp)
   1f5fc:	e0bf9a17 	ldw	r2,-408(fp)
   1f600:	e0bfa615 	stw	r2,-360(fp)
   1f604:	e0bf9b17 	ldw	r2,-404(fp)
   1f608:	e0bfa715 	stw	r2,-356(fp)
   1f60c:	e0bf9c17 	ldw	r2,-400(fp)
   1f610:	e0bfa815 	stw	r2,-352(fp)
   1f614:	e0bf9d17 	ldw	r2,-396(fp)
   1f618:	e0bfa915 	stw	r2,-348(fp)
    for (j=0; j<2; j++) {
   1f61c:	e03f6d15 	stw	zero,-588(fp)
   1f620:	00000806 	br	1f644 <secp256k1_fe_inv+0x254>
        secp256k1_fe_sqr(&x11, &x11);
   1f624:	e0ff9e04 	addi	r3,fp,-392
   1f628:	e0bf9e04 	addi	r2,fp,-392
   1f62c:	180b883a 	mov	r5,r3
   1f630:	1009883a 	mov	r4,r2
   1f634:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x9, &x9);
    }
    secp256k1_fe_mul(&x9, &x9, &x3);

    x11 = x9;
    for (j=0; j<2; j++) {
   1f638:	e0bf6d17 	ldw	r2,-588(fp)
   1f63c:	10800044 	addi	r2,r2,1
   1f640:	e0bf6d15 	stw	r2,-588(fp)
   1f644:	e0bf6d17 	ldw	r2,-588(fp)
   1f648:	10800090 	cmplti	r2,r2,2
   1f64c:	103ff51e 	bne	r2,zero,1f624 <__alt_mem_epcs_flash_controller+0xfe00e624>
        secp256k1_fe_sqr(&x11, &x11);
    }
    secp256k1_fe_mul(&x11, &x11, &x2);
   1f650:	e13f6e04 	addi	r4,fp,-584
   1f654:	e0ff9e04 	addi	r3,fp,-392
   1f658:	e0bf9e04 	addi	r2,fp,-392
   1f65c:	200d883a 	mov	r6,r4
   1f660:	180b883a 	mov	r5,r3
   1f664:	1009883a 	mov	r4,r2
   1f668:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x22 = x11;
   1f66c:	e0bf9e17 	ldw	r2,-392(fp)
   1f670:	e0bfaa15 	stw	r2,-344(fp)
   1f674:	e0bf9f17 	ldw	r2,-388(fp)
   1f678:	e0bfab15 	stw	r2,-340(fp)
   1f67c:	e0bfa017 	ldw	r2,-384(fp)
   1f680:	e0bfac15 	stw	r2,-336(fp)
   1f684:	e0bfa117 	ldw	r2,-380(fp)
   1f688:	e0bfad15 	stw	r2,-332(fp)
   1f68c:	e0bfa217 	ldw	r2,-376(fp)
   1f690:	e0bfae15 	stw	r2,-328(fp)
   1f694:	e0bfa317 	ldw	r2,-372(fp)
   1f698:	e0bfaf15 	stw	r2,-324(fp)
   1f69c:	e0bfa417 	ldw	r2,-368(fp)
   1f6a0:	e0bfb015 	stw	r2,-320(fp)
   1f6a4:	e0bfa517 	ldw	r2,-364(fp)
   1f6a8:	e0bfb115 	stw	r2,-316(fp)
   1f6ac:	e0bfa617 	ldw	r2,-360(fp)
   1f6b0:	e0bfb215 	stw	r2,-312(fp)
   1f6b4:	e0bfa717 	ldw	r2,-356(fp)
   1f6b8:	e0bfb315 	stw	r2,-308(fp)
   1f6bc:	e0bfa817 	ldw	r2,-352(fp)
   1f6c0:	e0bfb415 	stw	r2,-304(fp)
   1f6c4:	e0bfa917 	ldw	r2,-348(fp)
   1f6c8:	e0bfb515 	stw	r2,-300(fp)
    for (j=0; j<11; j++) {
   1f6cc:	e03f6d15 	stw	zero,-588(fp)
   1f6d0:	00000806 	br	1f6f4 <secp256k1_fe_inv+0x304>
        secp256k1_fe_sqr(&x22, &x22);
   1f6d4:	e0ffaa04 	addi	r3,fp,-344
   1f6d8:	e0bfaa04 	addi	r2,fp,-344
   1f6dc:	180b883a 	mov	r5,r3
   1f6e0:	1009883a 	mov	r4,r2
   1f6e4:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x11, &x11);
    }
    secp256k1_fe_mul(&x11, &x11, &x2);

    x22 = x11;
    for (j=0; j<11; j++) {
   1f6e8:	e0bf6d17 	ldw	r2,-588(fp)
   1f6ec:	10800044 	addi	r2,r2,1
   1f6f0:	e0bf6d15 	stw	r2,-588(fp)
   1f6f4:	e0bf6d17 	ldw	r2,-588(fp)
   1f6f8:	108002d0 	cmplti	r2,r2,11
   1f6fc:	103ff51e 	bne	r2,zero,1f6d4 <__alt_mem_epcs_flash_controller+0xfe00e6d4>
        secp256k1_fe_sqr(&x22, &x22);
    }
    secp256k1_fe_mul(&x22, &x22, &x11);
   1f700:	e13f9e04 	addi	r4,fp,-392
   1f704:	e0ffaa04 	addi	r3,fp,-344
   1f708:	e0bfaa04 	addi	r2,fp,-344
   1f70c:	200d883a 	mov	r6,r4
   1f710:	180b883a 	mov	r5,r3
   1f714:	1009883a 	mov	r4,r2
   1f718:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x44 = x22;
   1f71c:	e0bfaa17 	ldw	r2,-344(fp)
   1f720:	e0bfb615 	stw	r2,-296(fp)
   1f724:	e0bfab17 	ldw	r2,-340(fp)
   1f728:	e0bfb715 	stw	r2,-292(fp)
   1f72c:	e0bfac17 	ldw	r2,-336(fp)
   1f730:	e0bfb815 	stw	r2,-288(fp)
   1f734:	e0bfad17 	ldw	r2,-332(fp)
   1f738:	e0bfb915 	stw	r2,-284(fp)
   1f73c:	e0bfae17 	ldw	r2,-328(fp)
   1f740:	e0bfba15 	stw	r2,-280(fp)
   1f744:	e0bfaf17 	ldw	r2,-324(fp)
   1f748:	e0bfbb15 	stw	r2,-276(fp)
   1f74c:	e0bfb017 	ldw	r2,-320(fp)
   1f750:	e0bfbc15 	stw	r2,-272(fp)
   1f754:	e0bfb117 	ldw	r2,-316(fp)
   1f758:	e0bfbd15 	stw	r2,-268(fp)
   1f75c:	e0bfb217 	ldw	r2,-312(fp)
   1f760:	e0bfbe15 	stw	r2,-264(fp)
   1f764:	e0bfb317 	ldw	r2,-308(fp)
   1f768:	e0bfbf15 	stw	r2,-260(fp)
   1f76c:	e0bfb417 	ldw	r2,-304(fp)
   1f770:	e0bfc015 	stw	r2,-256(fp)
   1f774:	e0bfb517 	ldw	r2,-300(fp)
   1f778:	e0bfc115 	stw	r2,-252(fp)
    for (j=0; j<22; j++) {
   1f77c:	e03f6d15 	stw	zero,-588(fp)
   1f780:	00000806 	br	1f7a4 <secp256k1_fe_inv+0x3b4>
        secp256k1_fe_sqr(&x44, &x44);
   1f784:	e0ffb604 	addi	r3,fp,-296
   1f788:	e0bfb604 	addi	r2,fp,-296
   1f78c:	180b883a 	mov	r5,r3
   1f790:	1009883a 	mov	r4,r2
   1f794:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x22, &x22);
    }
    secp256k1_fe_mul(&x22, &x22, &x11);

    x44 = x22;
    for (j=0; j<22; j++) {
   1f798:	e0bf6d17 	ldw	r2,-588(fp)
   1f79c:	10800044 	addi	r2,r2,1
   1f7a0:	e0bf6d15 	stw	r2,-588(fp)
   1f7a4:	e0bf6d17 	ldw	r2,-588(fp)
   1f7a8:	10800590 	cmplti	r2,r2,22
   1f7ac:	103ff51e 	bne	r2,zero,1f784 <__alt_mem_epcs_flash_controller+0xfe00e784>
        secp256k1_fe_sqr(&x44, &x44);
    }
    secp256k1_fe_mul(&x44, &x44, &x22);
   1f7b0:	e13faa04 	addi	r4,fp,-344
   1f7b4:	e0ffb604 	addi	r3,fp,-296
   1f7b8:	e0bfb604 	addi	r2,fp,-296
   1f7bc:	200d883a 	mov	r6,r4
   1f7c0:	180b883a 	mov	r5,r3
   1f7c4:	1009883a 	mov	r4,r2
   1f7c8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x88 = x44;
   1f7cc:	e0bfb617 	ldw	r2,-296(fp)
   1f7d0:	e0bfc215 	stw	r2,-248(fp)
   1f7d4:	e0bfb717 	ldw	r2,-292(fp)
   1f7d8:	e0bfc315 	stw	r2,-244(fp)
   1f7dc:	e0bfb817 	ldw	r2,-288(fp)
   1f7e0:	e0bfc415 	stw	r2,-240(fp)
   1f7e4:	e0bfb917 	ldw	r2,-284(fp)
   1f7e8:	e0bfc515 	stw	r2,-236(fp)
   1f7ec:	e0bfba17 	ldw	r2,-280(fp)
   1f7f0:	e0bfc615 	stw	r2,-232(fp)
   1f7f4:	e0bfbb17 	ldw	r2,-276(fp)
   1f7f8:	e0bfc715 	stw	r2,-228(fp)
   1f7fc:	e0bfbc17 	ldw	r2,-272(fp)
   1f800:	e0bfc815 	stw	r2,-224(fp)
   1f804:	e0bfbd17 	ldw	r2,-268(fp)
   1f808:	e0bfc915 	stw	r2,-220(fp)
   1f80c:	e0bfbe17 	ldw	r2,-264(fp)
   1f810:	e0bfca15 	stw	r2,-216(fp)
   1f814:	e0bfbf17 	ldw	r2,-260(fp)
   1f818:	e0bfcb15 	stw	r2,-212(fp)
   1f81c:	e0bfc017 	ldw	r2,-256(fp)
   1f820:	e0bfcc15 	stw	r2,-208(fp)
   1f824:	e0bfc117 	ldw	r2,-252(fp)
   1f828:	e0bfcd15 	stw	r2,-204(fp)
    for (j=0; j<44; j++) {
   1f82c:	e03f6d15 	stw	zero,-588(fp)
   1f830:	00000806 	br	1f854 <secp256k1_fe_inv+0x464>
        secp256k1_fe_sqr(&x88, &x88);
   1f834:	e0ffc204 	addi	r3,fp,-248
   1f838:	e0bfc204 	addi	r2,fp,-248
   1f83c:	180b883a 	mov	r5,r3
   1f840:	1009883a 	mov	r4,r2
   1f844:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x44, &x44);
    }
    secp256k1_fe_mul(&x44, &x44, &x22);

    x88 = x44;
    for (j=0; j<44; j++) {
   1f848:	e0bf6d17 	ldw	r2,-588(fp)
   1f84c:	10800044 	addi	r2,r2,1
   1f850:	e0bf6d15 	stw	r2,-588(fp)
   1f854:	e0bf6d17 	ldw	r2,-588(fp)
   1f858:	10800b10 	cmplti	r2,r2,44
   1f85c:	103ff51e 	bne	r2,zero,1f834 <__alt_mem_epcs_flash_controller+0xfe00e834>
        secp256k1_fe_sqr(&x88, &x88);
    }
    secp256k1_fe_mul(&x88, &x88, &x44);
   1f860:	e13fb604 	addi	r4,fp,-296
   1f864:	e0ffc204 	addi	r3,fp,-248
   1f868:	e0bfc204 	addi	r2,fp,-248
   1f86c:	200d883a 	mov	r6,r4
   1f870:	180b883a 	mov	r5,r3
   1f874:	1009883a 	mov	r4,r2
   1f878:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x176 = x88;
   1f87c:	e0bfc217 	ldw	r2,-248(fp)
   1f880:	e0bfce15 	stw	r2,-200(fp)
   1f884:	e0bfc317 	ldw	r2,-244(fp)
   1f888:	e0bfcf15 	stw	r2,-196(fp)
   1f88c:	e0bfc417 	ldw	r2,-240(fp)
   1f890:	e0bfd015 	stw	r2,-192(fp)
   1f894:	e0bfc517 	ldw	r2,-236(fp)
   1f898:	e0bfd115 	stw	r2,-188(fp)
   1f89c:	e0bfc617 	ldw	r2,-232(fp)
   1f8a0:	e0bfd215 	stw	r2,-184(fp)
   1f8a4:	e0bfc717 	ldw	r2,-228(fp)
   1f8a8:	e0bfd315 	stw	r2,-180(fp)
   1f8ac:	e0bfc817 	ldw	r2,-224(fp)
   1f8b0:	e0bfd415 	stw	r2,-176(fp)
   1f8b4:	e0bfc917 	ldw	r2,-220(fp)
   1f8b8:	e0bfd515 	stw	r2,-172(fp)
   1f8bc:	e0bfca17 	ldw	r2,-216(fp)
   1f8c0:	e0bfd615 	stw	r2,-168(fp)
   1f8c4:	e0bfcb17 	ldw	r2,-212(fp)
   1f8c8:	e0bfd715 	stw	r2,-164(fp)
   1f8cc:	e0bfcc17 	ldw	r2,-208(fp)
   1f8d0:	e0bfd815 	stw	r2,-160(fp)
   1f8d4:	e0bfcd17 	ldw	r2,-204(fp)
   1f8d8:	e0bfd915 	stw	r2,-156(fp)
    for (j=0; j<88; j++) {
   1f8dc:	e03f6d15 	stw	zero,-588(fp)
   1f8e0:	00000806 	br	1f904 <secp256k1_fe_inv+0x514>
        secp256k1_fe_sqr(&x176, &x176);
   1f8e4:	e0ffce04 	addi	r3,fp,-200
   1f8e8:	e0bfce04 	addi	r2,fp,-200
   1f8ec:	180b883a 	mov	r5,r3
   1f8f0:	1009883a 	mov	r4,r2
   1f8f4:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x88, &x88);
    }
    secp256k1_fe_mul(&x88, &x88, &x44);

    x176 = x88;
    for (j=0; j<88; j++) {
   1f8f8:	e0bf6d17 	ldw	r2,-588(fp)
   1f8fc:	10800044 	addi	r2,r2,1
   1f900:	e0bf6d15 	stw	r2,-588(fp)
   1f904:	e0bf6d17 	ldw	r2,-588(fp)
   1f908:	10801610 	cmplti	r2,r2,88
   1f90c:	103ff51e 	bne	r2,zero,1f8e4 <__alt_mem_epcs_flash_controller+0xfe00e8e4>
        secp256k1_fe_sqr(&x176, &x176);
    }
    secp256k1_fe_mul(&x176, &x176, &x88);
   1f910:	e13fc204 	addi	r4,fp,-248
   1f914:	e0ffce04 	addi	r3,fp,-200
   1f918:	e0bfce04 	addi	r2,fp,-200
   1f91c:	200d883a 	mov	r6,r4
   1f920:	180b883a 	mov	r5,r3
   1f924:	1009883a 	mov	r4,r2
   1f928:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x220 = x176;
   1f92c:	e0bfce17 	ldw	r2,-200(fp)
   1f930:	e0bfda15 	stw	r2,-152(fp)
   1f934:	e0bfcf17 	ldw	r2,-196(fp)
   1f938:	e0bfdb15 	stw	r2,-148(fp)
   1f93c:	e0bfd017 	ldw	r2,-192(fp)
   1f940:	e0bfdc15 	stw	r2,-144(fp)
   1f944:	e0bfd117 	ldw	r2,-188(fp)
   1f948:	e0bfdd15 	stw	r2,-140(fp)
   1f94c:	e0bfd217 	ldw	r2,-184(fp)
   1f950:	e0bfde15 	stw	r2,-136(fp)
   1f954:	e0bfd317 	ldw	r2,-180(fp)
   1f958:	e0bfdf15 	stw	r2,-132(fp)
   1f95c:	e0bfd417 	ldw	r2,-176(fp)
   1f960:	e0bfe015 	stw	r2,-128(fp)
   1f964:	e0bfd517 	ldw	r2,-172(fp)
   1f968:	e0bfe115 	stw	r2,-124(fp)
   1f96c:	e0bfd617 	ldw	r2,-168(fp)
   1f970:	e0bfe215 	stw	r2,-120(fp)
   1f974:	e0bfd717 	ldw	r2,-164(fp)
   1f978:	e0bfe315 	stw	r2,-116(fp)
   1f97c:	e0bfd817 	ldw	r2,-160(fp)
   1f980:	e0bfe415 	stw	r2,-112(fp)
   1f984:	e0bfd917 	ldw	r2,-156(fp)
   1f988:	e0bfe515 	stw	r2,-108(fp)
    for (j=0; j<44; j++) {
   1f98c:	e03f6d15 	stw	zero,-588(fp)
   1f990:	00000806 	br	1f9b4 <secp256k1_fe_inv+0x5c4>
        secp256k1_fe_sqr(&x220, &x220);
   1f994:	e0ffda04 	addi	r3,fp,-152
   1f998:	e0bfda04 	addi	r2,fp,-152
   1f99c:	180b883a 	mov	r5,r3
   1f9a0:	1009883a 	mov	r4,r2
   1f9a4:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x176, &x176);
    }
    secp256k1_fe_mul(&x176, &x176, &x88);

    x220 = x176;
    for (j=0; j<44; j++) {
   1f9a8:	e0bf6d17 	ldw	r2,-588(fp)
   1f9ac:	10800044 	addi	r2,r2,1
   1f9b0:	e0bf6d15 	stw	r2,-588(fp)
   1f9b4:	e0bf6d17 	ldw	r2,-588(fp)
   1f9b8:	10800b10 	cmplti	r2,r2,44
   1f9bc:	103ff51e 	bne	r2,zero,1f994 <__alt_mem_epcs_flash_controller+0xfe00e994>
        secp256k1_fe_sqr(&x220, &x220);
    }
    secp256k1_fe_mul(&x220, &x220, &x44);
   1f9c0:	e13fb604 	addi	r4,fp,-296
   1f9c4:	e0ffda04 	addi	r3,fp,-152
   1f9c8:	e0bfda04 	addi	r2,fp,-152
   1f9cc:	200d883a 	mov	r6,r4
   1f9d0:	180b883a 	mov	r5,r3
   1f9d4:	1009883a 	mov	r4,r2
   1f9d8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    x223 = x220;
   1f9dc:	e0bfda17 	ldw	r2,-152(fp)
   1f9e0:	e0bfe615 	stw	r2,-104(fp)
   1f9e4:	e0bfdb17 	ldw	r2,-148(fp)
   1f9e8:	e0bfe715 	stw	r2,-100(fp)
   1f9ec:	e0bfdc17 	ldw	r2,-144(fp)
   1f9f0:	e0bfe815 	stw	r2,-96(fp)
   1f9f4:	e0bfdd17 	ldw	r2,-140(fp)
   1f9f8:	e0bfe915 	stw	r2,-92(fp)
   1f9fc:	e0bfde17 	ldw	r2,-136(fp)
   1fa00:	e0bfea15 	stw	r2,-88(fp)
   1fa04:	e0bfdf17 	ldw	r2,-132(fp)
   1fa08:	e0bfeb15 	stw	r2,-84(fp)
   1fa0c:	e0bfe017 	ldw	r2,-128(fp)
   1fa10:	e0bfec15 	stw	r2,-80(fp)
   1fa14:	e0bfe117 	ldw	r2,-124(fp)
   1fa18:	e0bfed15 	stw	r2,-76(fp)
   1fa1c:	e0bfe217 	ldw	r2,-120(fp)
   1fa20:	e0bfee15 	stw	r2,-72(fp)
   1fa24:	e0bfe317 	ldw	r2,-116(fp)
   1fa28:	e0bfef15 	stw	r2,-68(fp)
   1fa2c:	e0bfe417 	ldw	r2,-112(fp)
   1fa30:	e0bff015 	stw	r2,-64(fp)
   1fa34:	e0bfe517 	ldw	r2,-108(fp)
   1fa38:	e0bff115 	stw	r2,-60(fp)
    for (j=0; j<3; j++) {
   1fa3c:	e03f6d15 	stw	zero,-588(fp)
   1fa40:	00000806 	br	1fa64 <secp256k1_fe_inv+0x674>
        secp256k1_fe_sqr(&x223, &x223);
   1fa44:	e0ffe604 	addi	r3,fp,-104
   1fa48:	e0bfe604 	addi	r2,fp,-104
   1fa4c:	180b883a 	mov	r5,r3
   1fa50:	1009883a 	mov	r4,r2
   1fa54:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x220, &x220);
    }
    secp256k1_fe_mul(&x220, &x220, &x44);

    x223 = x220;
    for (j=0; j<3; j++) {
   1fa58:	e0bf6d17 	ldw	r2,-588(fp)
   1fa5c:	10800044 	addi	r2,r2,1
   1fa60:	e0bf6d15 	stw	r2,-588(fp)
   1fa64:	e0bf6d17 	ldw	r2,-588(fp)
   1fa68:	108000d0 	cmplti	r2,r2,3
   1fa6c:	103ff51e 	bne	r2,zero,1fa44 <__alt_mem_epcs_flash_controller+0xfe00ea44>
        secp256k1_fe_sqr(&x223, &x223);
    }
    secp256k1_fe_mul(&x223, &x223, &x3);
   1fa70:	e13f7a04 	addi	r4,fp,-536
   1fa74:	e0ffe604 	addi	r3,fp,-104
   1fa78:	e0bfe604 	addi	r2,fp,-104
   1fa7c:	200d883a 	mov	r6,r4
   1fa80:	180b883a 	mov	r5,r3
   1fa84:	1009883a 	mov	r4,r2
   1fa88:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    /* The final result is then assembled using a sliding window over the blocks. */

    t1 = x223;
   1fa8c:	e0bfe617 	ldw	r2,-104(fp)
   1fa90:	e0bff215 	stw	r2,-56(fp)
   1fa94:	e0bfe717 	ldw	r2,-100(fp)
   1fa98:	e0bff315 	stw	r2,-52(fp)
   1fa9c:	e0bfe817 	ldw	r2,-96(fp)
   1faa0:	e0bff415 	stw	r2,-48(fp)
   1faa4:	e0bfe917 	ldw	r2,-92(fp)
   1faa8:	e0bff515 	stw	r2,-44(fp)
   1faac:	e0bfea17 	ldw	r2,-88(fp)
   1fab0:	e0bff615 	stw	r2,-40(fp)
   1fab4:	e0bfeb17 	ldw	r2,-84(fp)
   1fab8:	e0bff715 	stw	r2,-36(fp)
   1fabc:	e0bfec17 	ldw	r2,-80(fp)
   1fac0:	e0bff815 	stw	r2,-32(fp)
   1fac4:	e0bfed17 	ldw	r2,-76(fp)
   1fac8:	e0bff915 	stw	r2,-28(fp)
   1facc:	e0bfee17 	ldw	r2,-72(fp)
   1fad0:	e0bffa15 	stw	r2,-24(fp)
   1fad4:	e0bfef17 	ldw	r2,-68(fp)
   1fad8:	e0bffb15 	stw	r2,-20(fp)
   1fadc:	e0bff017 	ldw	r2,-64(fp)
   1fae0:	e0bffc15 	stw	r2,-16(fp)
   1fae4:	e0bff117 	ldw	r2,-60(fp)
   1fae8:	e0bffd15 	stw	r2,-12(fp)
    for (j=0; j<23; j++) {
   1faec:	e03f6d15 	stw	zero,-588(fp)
   1faf0:	00000806 	br	1fb14 <secp256k1_fe_inv+0x724>
        secp256k1_fe_sqr(&t1, &t1);
   1faf4:	e0fff204 	addi	r3,fp,-56
   1faf8:	e0bff204 	addi	r2,fp,-56
   1fafc:	180b883a 	mov	r5,r3
   1fb00:	1009883a 	mov	r4,r2
   1fb04:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x223, &x223, &x3);

    /* The final result is then assembled using a sliding window over the blocks. */

    t1 = x223;
    for (j=0; j<23; j++) {
   1fb08:	e0bf6d17 	ldw	r2,-588(fp)
   1fb0c:	10800044 	addi	r2,r2,1
   1fb10:	e0bf6d15 	stw	r2,-588(fp)
   1fb14:	e0bf6d17 	ldw	r2,-588(fp)
   1fb18:	108005d0 	cmplti	r2,r2,23
   1fb1c:	103ff51e 	bne	r2,zero,1faf4 <__alt_mem_epcs_flash_controller+0xfe00eaf4>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x22);
   1fb20:	e13faa04 	addi	r4,fp,-344
   1fb24:	e0fff204 	addi	r3,fp,-56
   1fb28:	e0bff204 	addi	r2,fp,-56
   1fb2c:	200d883a 	mov	r6,r4
   1fb30:	180b883a 	mov	r5,r3
   1fb34:	1009883a 	mov	r4,r2
   1fb38:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    for (j=0; j<5; j++) {
   1fb3c:	e03f6d15 	stw	zero,-588(fp)
   1fb40:	00000806 	br	1fb64 <secp256k1_fe_inv+0x774>
        secp256k1_fe_sqr(&t1, &t1);
   1fb44:	e0fff204 	addi	r3,fp,-56
   1fb48:	e0bff204 	addi	r2,fp,-56
   1fb4c:	180b883a 	mov	r5,r3
   1fb50:	1009883a 	mov	r4,r2
   1fb54:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    t1 = x223;
    for (j=0; j<23; j++) {
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x22);
    for (j=0; j<5; j++) {
   1fb58:	e0bf6d17 	ldw	r2,-588(fp)
   1fb5c:	10800044 	addi	r2,r2,1
   1fb60:	e0bf6d15 	stw	r2,-588(fp)
   1fb64:	e0bf6d17 	ldw	r2,-588(fp)
   1fb68:	10800150 	cmplti	r2,r2,5
   1fb6c:	103ff51e 	bne	r2,zero,1fb44 <__alt_mem_epcs_flash_controller+0xfe00eb44>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, a);
   1fb70:	e0fff204 	addi	r3,fp,-56
   1fb74:	e0bff204 	addi	r2,fp,-56
   1fb78:	e1bfff17 	ldw	r6,-4(fp)
   1fb7c:	180b883a 	mov	r5,r3
   1fb80:	1009883a 	mov	r4,r2
   1fb84:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    for (j=0; j<3; j++) {
   1fb88:	e03f6d15 	stw	zero,-588(fp)
   1fb8c:	00000806 	br	1fbb0 <secp256k1_fe_inv+0x7c0>
        secp256k1_fe_sqr(&t1, &t1);
   1fb90:	e0fff204 	addi	r3,fp,-56
   1fb94:	e0bff204 	addi	r2,fp,-56
   1fb98:	180b883a 	mov	r5,r3
   1fb9c:	1009883a 	mov	r4,r2
   1fba0:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&t1, &t1, &x22);
    for (j=0; j<5; j++) {
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, a);
    for (j=0; j<3; j++) {
   1fba4:	e0bf6d17 	ldw	r2,-588(fp)
   1fba8:	10800044 	addi	r2,r2,1
   1fbac:	e0bf6d15 	stw	r2,-588(fp)
   1fbb0:	e0bf6d17 	ldw	r2,-588(fp)
   1fbb4:	108000d0 	cmplti	r2,r2,3
   1fbb8:	103ff51e 	bne	r2,zero,1fb90 <__alt_mem_epcs_flash_controller+0xfe00eb90>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x2);
   1fbbc:	e13f6e04 	addi	r4,fp,-584
   1fbc0:	e0fff204 	addi	r3,fp,-56
   1fbc4:	e0bff204 	addi	r2,fp,-56
   1fbc8:	200d883a 	mov	r6,r4
   1fbcc:	180b883a 	mov	r5,r3
   1fbd0:	1009883a 	mov	r4,r2
   1fbd4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    for (j=0; j<2; j++) {
   1fbd8:	e03f6d15 	stw	zero,-588(fp)
   1fbdc:	00000806 	br	1fc00 <secp256k1_fe_inv+0x810>
        secp256k1_fe_sqr(&t1, &t1);
   1fbe0:	e0fff204 	addi	r3,fp,-56
   1fbe4:	e0bff204 	addi	r2,fp,-56
   1fbe8:	180b883a 	mov	r5,r3
   1fbec:	1009883a 	mov	r4,r2
   1fbf0:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&t1, &t1, a);
    for (j=0; j<3; j++) {
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x2);
    for (j=0; j<2; j++) {
   1fbf4:	e0bf6d17 	ldw	r2,-588(fp)
   1fbf8:	10800044 	addi	r2,r2,1
   1fbfc:	e0bf6d15 	stw	r2,-588(fp)
   1fc00:	e0bf6d17 	ldw	r2,-588(fp)
   1fc04:	10800090 	cmplti	r2,r2,2
   1fc08:	103ff51e 	bne	r2,zero,1fbe0 <__alt_mem_epcs_flash_controller+0xfe00ebe0>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(r, a, &t1);
   1fc0c:	e0bff204 	addi	r2,fp,-56
   1fc10:	100d883a 	mov	r6,r2
   1fc14:	e17fff17 	ldw	r5,-4(fp)
   1fc18:	e13ffe17 	ldw	r4,-8(fp)
   1fc1c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
}
   1fc20:	0001883a 	nop
   1fc24:	e037883a 	mov	sp,fp
   1fc28:	dfc00117 	ldw	ra,4(sp)
   1fc2c:	df000017 	ldw	fp,0(sp)
   1fc30:	dec00204 	addi	sp,sp,8
   1fc34:	f800283a 	ret

0001fc38 <secp256k1_fe_inv_var>:

static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {
   1fc38:	defffc04 	addi	sp,sp,-16
   1fc3c:	dfc00315 	stw	ra,12(sp)
   1fc40:	df000215 	stw	fp,8(sp)
   1fc44:	df000204 	addi	fp,sp,8
   1fc48:	e13ffe15 	stw	r4,-8(fp)
   1fc4c:	e17fff15 	stw	r5,-4(fp)
#if defined(USE_FIELD_INV_BUILTIN)
    secp256k1_fe_inv(r, a);
   1fc50:	e17fff17 	ldw	r5,-4(fp)
   1fc54:	e13ffe17 	ldw	r4,-8(fp)
   1fc58:	001f3f00 	call	1f3f0 <secp256k1_fe_inv>
    secp256k1_fe_add(&c, &negone);
    CHECK(secp256k1_fe_normalizes_to_zero_var(&c));
#else
#error "Please select field inverse implementation"
#endif
}
   1fc5c:	0001883a 	nop
   1fc60:	e037883a 	mov	sp,fp
   1fc64:	dfc00117 	ldw	ra,4(sp)
   1fc68:	df000017 	ldw	fp,0(sp)
   1fc6c:	dec00204 	addi	sp,sp,8
   1fc70:	f800283a 	ret

0001fc74 <secp256k1_fe_inv_all_var>:

static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe *r, const secp256k1_fe *a) {
   1fc74:	deffea04 	addi	sp,sp,-88
   1fc78:	dfc01515 	stw	ra,84(sp)
   1fc7c:	df001415 	stw	fp,80(sp)
   1fc80:	dc401315 	stw	r17,76(sp)
   1fc84:	dc001215 	stw	r16,72(sp)
   1fc88:	df001404 	addi	fp,sp,80
   1fc8c:	e13ffb15 	stw	r4,-20(fp)
   1fc90:	e17ffc15 	stw	r5,-16(fp)
   1fc94:	e1bffd15 	stw	r6,-12(fp)
    secp256k1_fe u;
    size_t i;
    if (len < 1) {
   1fc98:	e0bffb17 	ldw	r2,-20(fp)
   1fc9c:	1000a426 	beq	r2,zero,1ff30 <secp256k1_fe_inv_all_var+0x2bc>
        return;
    }

    VERIFY_CHECK((r + len <= a) || (a + len <= r));
   1fca0:	01400c04 	movi	r5,48
   1fca4:	e13ffb17 	ldw	r4,-20(fp)
   1fca8:	0042b540 	call	42b54 <__mulsi3>
   1fcac:	1007883a 	mov	r3,r2
   1fcb0:	e0bffc17 	ldw	r2,-16(fp)
   1fcb4:	10c5883a 	add	r2,r2,r3
   1fcb8:	e0fffd17 	ldw	r3,-12(fp)
   1fcbc:	1885803a 	cmpltu	r2,r3,r2
   1fcc0:	10803fcc 	andi	r2,r2,255
   1fcc4:	10001726 	beq	r2,zero,1fd24 <secp256k1_fe_inv_all_var+0xb0>
   1fcc8:	01400c04 	movi	r5,48
   1fccc:	e13ffb17 	ldw	r4,-20(fp)
   1fcd0:	0042b540 	call	42b54 <__mulsi3>
   1fcd4:	1007883a 	mov	r3,r2
   1fcd8:	e0bffd17 	ldw	r2,-12(fp)
   1fcdc:	10c5883a 	add	r2,r2,r3
   1fce0:	e0fffc17 	ldw	r3,-16(fp)
   1fce4:	1885803a 	cmpltu	r2,r3,r2
   1fce8:	10803fcc 	andi	r2,r2,255
   1fcec:	10000d26 	beq	r2,zero,1fd24 <secp256k1_fe_inv_all_var+0xb0>
   1fcf0:	d0a01617 	ldw	r2,-32680(gp)
   1fcf4:	10c00317 	ldw	r3,12(r2)
   1fcf8:	008001b4 	movhi	r2,6
   1fcfc:	10af1e04 	addi	r2,r2,-17288
   1fd00:	d8800015 	stw	r2,0(sp)
   1fd04:	01c044c4 	movi	r7,275
   1fd08:	018001b4 	movhi	r6,6
   1fd0c:	31af1504 	addi	r6,r6,-17324
   1fd10:	014001b4 	movhi	r5,6
   1fd14:	296b3804 	addi	r5,r5,-21280
   1fd18:	1809883a 	mov	r4,r3
   1fd1c:	00452600 	call	45260 <fprintf>
   1fd20:	00450340 	call	45034 <abort>

    r[0] = a[0];
   1fd24:	e0bffc17 	ldw	r2,-16(fp)
   1fd28:	e0fffd17 	ldw	r3,-12(fp)
   1fd2c:	19000017 	ldw	r4,0(r3)
   1fd30:	11000015 	stw	r4,0(r2)
   1fd34:	19000117 	ldw	r4,4(r3)
   1fd38:	11000115 	stw	r4,4(r2)
   1fd3c:	19000217 	ldw	r4,8(r3)
   1fd40:	11000215 	stw	r4,8(r2)
   1fd44:	19000317 	ldw	r4,12(r3)
   1fd48:	11000315 	stw	r4,12(r2)
   1fd4c:	19000417 	ldw	r4,16(r3)
   1fd50:	11000415 	stw	r4,16(r2)
   1fd54:	19000517 	ldw	r4,20(r3)
   1fd58:	11000515 	stw	r4,20(r2)
   1fd5c:	19000617 	ldw	r4,24(r3)
   1fd60:	11000615 	stw	r4,24(r2)
   1fd64:	19000717 	ldw	r4,28(r3)
   1fd68:	11000715 	stw	r4,28(r2)
   1fd6c:	19000817 	ldw	r4,32(r3)
   1fd70:	11000815 	stw	r4,32(r2)
   1fd74:	19000917 	ldw	r4,36(r3)
   1fd78:	11000915 	stw	r4,36(r2)
   1fd7c:	19000a17 	ldw	r4,40(r3)
   1fd80:	11000a15 	stw	r4,40(r2)
   1fd84:	18c00b17 	ldw	r3,44(r3)
   1fd88:	10c00b15 	stw	r3,44(r2)

    i = 0;
   1fd8c:	e03fed15 	stw	zero,-76(fp)
    while (++i < len) {
   1fd90:	00001606 	br	1fdec <secp256k1_fe_inv_all_var+0x178>
        secp256k1_fe_mul(&r[i], &r[i - 1], &a[i]);
   1fd94:	01400c04 	movi	r5,48
   1fd98:	e13fed17 	ldw	r4,-76(fp)
   1fd9c:	0042b540 	call	42b54 <__mulsi3>
   1fda0:	1007883a 	mov	r3,r2
   1fda4:	e0bffc17 	ldw	r2,-16(fp)
   1fda8:	10e1883a 	add	r16,r2,r3
   1fdac:	01400c04 	movi	r5,48
   1fdb0:	e13fed17 	ldw	r4,-76(fp)
   1fdb4:	0042b540 	call	42b54 <__mulsi3>
   1fdb8:	10bff404 	addi	r2,r2,-48
   1fdbc:	e0fffc17 	ldw	r3,-16(fp)
   1fdc0:	18a3883a 	add	r17,r3,r2
   1fdc4:	01400c04 	movi	r5,48
   1fdc8:	e13fed17 	ldw	r4,-76(fp)
   1fdcc:	0042b540 	call	42b54 <__mulsi3>
   1fdd0:	1007883a 	mov	r3,r2
   1fdd4:	e0bffd17 	ldw	r2,-12(fp)
   1fdd8:	10c5883a 	add	r2,r2,r3
   1fddc:	100d883a 	mov	r6,r2
   1fde0:	880b883a 	mov	r5,r17
   1fde4:	8009883a 	mov	r4,r16
   1fde8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    VERIFY_CHECK((r + len <= a) || (a + len <= r));

    r[0] = a[0];

    i = 0;
    while (++i < len) {
   1fdec:	e0bfed17 	ldw	r2,-76(fp)
   1fdf0:	10800044 	addi	r2,r2,1
   1fdf4:	e0bfed15 	stw	r2,-76(fp)
   1fdf8:	e0ffed17 	ldw	r3,-76(fp)
   1fdfc:	e0bffb17 	ldw	r2,-20(fp)
   1fe00:	18bfe436 	bltu	r3,r2,1fd94 <__alt_mem_epcs_flash_controller+0xfe00ed94>
        secp256k1_fe_mul(&r[i], &r[i - 1], &a[i]);
    }

    secp256k1_fe_inv_var(&u, &r[--i]);
   1fe04:	e0bfed17 	ldw	r2,-76(fp)
   1fe08:	10bfffc4 	addi	r2,r2,-1
   1fe0c:	e0bfed15 	stw	r2,-76(fp)
   1fe10:	01400c04 	movi	r5,48
   1fe14:	e13fed17 	ldw	r4,-76(fp)
   1fe18:	0042b540 	call	42b54 <__mulsi3>
   1fe1c:	1007883a 	mov	r3,r2
   1fe20:	e0bffc17 	ldw	r2,-16(fp)
   1fe24:	10c7883a 	add	r3,r2,r3
   1fe28:	e0bfef04 	addi	r2,fp,-68
   1fe2c:	180b883a 	mov	r5,r3
   1fe30:	1009883a 	mov	r4,r2
   1fe34:	001fc380 	call	1fc38 <secp256k1_fe_inv_var>

    while (i > 0) {
   1fe38:	00002106 	br	1fec0 <secp256k1_fe_inv_all_var+0x24c>
        size_t j = i--;
   1fe3c:	e0bfed17 	ldw	r2,-76(fp)
   1fe40:	10ffffc4 	addi	r3,r2,-1
   1fe44:	e0ffed15 	stw	r3,-76(fp)
   1fe48:	e0bfee15 	stw	r2,-72(fp)
        secp256k1_fe_mul(&r[j], &r[i], &u);
   1fe4c:	01400c04 	movi	r5,48
   1fe50:	e13fee17 	ldw	r4,-72(fp)
   1fe54:	0042b540 	call	42b54 <__mulsi3>
   1fe58:	1007883a 	mov	r3,r2
   1fe5c:	e0bffc17 	ldw	r2,-16(fp)
   1fe60:	10e1883a 	add	r16,r2,r3
   1fe64:	01400c04 	movi	r5,48
   1fe68:	e13fed17 	ldw	r4,-76(fp)
   1fe6c:	0042b540 	call	42b54 <__mulsi3>
   1fe70:	1007883a 	mov	r3,r2
   1fe74:	e0bffc17 	ldw	r2,-16(fp)
   1fe78:	10c5883a 	add	r2,r2,r3
   1fe7c:	e0ffef04 	addi	r3,fp,-68
   1fe80:	180d883a 	mov	r6,r3
   1fe84:	100b883a 	mov	r5,r2
   1fe88:	8009883a 	mov	r4,r16
   1fe8c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
        secp256k1_fe_mul(&u, &u, &a[j]);
   1fe90:	01400c04 	movi	r5,48
   1fe94:	e13fee17 	ldw	r4,-72(fp)
   1fe98:	0042b540 	call	42b54 <__mulsi3>
   1fe9c:	1007883a 	mov	r3,r2
   1fea0:	e0bffd17 	ldw	r2,-12(fp)
   1fea4:	10c9883a 	add	r4,r2,r3
   1fea8:	e0ffef04 	addi	r3,fp,-68
   1feac:	e0bfef04 	addi	r2,fp,-68
   1feb0:	200d883a 	mov	r6,r4
   1feb4:	180b883a 	mov	r5,r3
   1feb8:	1009883a 	mov	r4,r2
   1febc:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
        secp256k1_fe_mul(&r[i], &r[i - 1], &a[i]);
    }

    secp256k1_fe_inv_var(&u, &r[--i]);

    while (i > 0) {
   1fec0:	e0bfed17 	ldw	r2,-76(fp)
   1fec4:	103fdd1e 	bne	r2,zero,1fe3c <__alt_mem_epcs_flash_controller+0xfe00ee3c>
        size_t j = i--;
        secp256k1_fe_mul(&r[j], &r[i], &u);
        secp256k1_fe_mul(&u, &u, &a[j]);
    }

    r[0] = u;
   1fec8:	e0bffc17 	ldw	r2,-16(fp)
   1fecc:	e0ffef17 	ldw	r3,-68(fp)
   1fed0:	10c00015 	stw	r3,0(r2)
   1fed4:	e0fff017 	ldw	r3,-64(fp)
   1fed8:	10c00115 	stw	r3,4(r2)
   1fedc:	e0fff117 	ldw	r3,-60(fp)
   1fee0:	10c00215 	stw	r3,8(r2)
   1fee4:	e0fff217 	ldw	r3,-56(fp)
   1fee8:	10c00315 	stw	r3,12(r2)
   1feec:	e0fff317 	ldw	r3,-52(fp)
   1fef0:	10c00415 	stw	r3,16(r2)
   1fef4:	e0fff417 	ldw	r3,-48(fp)
   1fef8:	10c00515 	stw	r3,20(r2)
   1fefc:	e0fff517 	ldw	r3,-44(fp)
   1ff00:	10c00615 	stw	r3,24(r2)
   1ff04:	e0fff617 	ldw	r3,-40(fp)
   1ff08:	10c00715 	stw	r3,28(r2)
   1ff0c:	e0fff717 	ldw	r3,-36(fp)
   1ff10:	10c00815 	stw	r3,32(r2)
   1ff14:	e0fff817 	ldw	r3,-32(fp)
   1ff18:	10c00915 	stw	r3,36(r2)
   1ff1c:	e0fff917 	ldw	r3,-28(fp)
   1ff20:	10c00a15 	stw	r3,40(r2)
   1ff24:	e0fffa17 	ldw	r3,-24(fp)
   1ff28:	10c00b15 	stw	r3,44(r2)
   1ff2c:	00000106 	br	1ff34 <secp256k1_fe_inv_all_var+0x2c0>

static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe *r, const secp256k1_fe *a) {
    secp256k1_fe u;
    size_t i;
    if (len < 1) {
        return;
   1ff30:	0001883a 	nop
        secp256k1_fe_mul(&r[j], &r[i], &u);
        secp256k1_fe_mul(&u, &u, &a[j]);
    }

    r[0] = u;
}
   1ff34:	e6fffe04 	addi	sp,fp,-8
   1ff38:	dfc00317 	ldw	ra,12(sp)
   1ff3c:	df000217 	ldw	fp,8(sp)
   1ff40:	dc400117 	ldw	r17,4(sp)
   1ff44:	dc000017 	ldw	r16,0(sp)
   1ff48:	dec00404 	addi	sp,sp,16
   1ff4c:	f800283a 	ret

0001ff50 <secp256k1_fe_is_quad_var>:

static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {
   1ff50:	defff104 	addi	sp,sp,-60
   1ff54:	dfc00e15 	stw	ra,56(sp)
   1ff58:	df000d15 	stw	fp,52(sp)
   1ff5c:	df000d04 	addi	fp,sp,52
   1ff60:	e13fff15 	stw	r4,-4(fp)
    secp256k1_num_set_bin(&n, b, 32);
    secp256k1_num_set_bin(&m, prime, 32);
    return secp256k1_num_jacobi(&n, &m) >= 0;
#else
    secp256k1_fe r;
    return secp256k1_fe_sqrt(&r, a);
   1ff64:	e17fff17 	ldw	r5,-4(fp)
   1ff68:	e13ff304 	addi	r4,fp,-52
   1ff6c:	001ebfc0 	call	1ebfc <secp256k1_fe_sqrt>
#endif
}
   1ff70:	e037883a 	mov	sp,fp
   1ff74:	dfc00117 	ldw	ra,4(sp)
   1ff78:	df000017 	ldw	fp,0(sp)
   1ff7c:	dec00204 	addi	sp,sp,8
   1ff80:	f800283a 	ret

0001ff84 <secp256k1_ge_set_gej_zinv>:
    0x029BFCDBUL, 0x2DCE28D9UL, 0x59F2815BUL, 0x16F81798UL,
    0x483ADA77UL, 0x26A3C465UL, 0x5DA4FBFCUL, 0x0E1108A8UL,
    0xFD17B448UL, 0xA6855419UL, 0x9C47D08FUL, 0xFB10D4B8UL
);

static void secp256k1_ge_set_gej_zinv(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zi) {
   1ff84:	deffe304 	addi	sp,sp,-116
   1ff88:	dfc01c15 	stw	ra,112(sp)
   1ff8c:	df001b15 	stw	fp,108(sp)
   1ff90:	df001b04 	addi	fp,sp,108
   1ff94:	e13ffd15 	stw	r4,-12(fp)
   1ff98:	e17ffe15 	stw	r5,-8(fp)
   1ff9c:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_fe zi2; 
    secp256k1_fe zi3;
    secp256k1_fe_sqr(&zi2, zi);
   1ffa0:	e17fff17 	ldw	r5,-4(fp)
   1ffa4:	e13fe504 	addi	r4,fp,-108
   1ffa8:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&zi3, &zi2, zi);
   1ffac:	e0bff104 	addi	r2,fp,-60
   1ffb0:	e1bfff17 	ldw	r6,-4(fp)
   1ffb4:	e17fe504 	addi	r5,fp,-108
   1ffb8:	1009883a 	mov	r4,r2
   1ffbc:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->x, &a->x, &zi2);
   1ffc0:	e0bffd17 	ldw	r2,-12(fp)
   1ffc4:	e0fffe17 	ldw	r3,-8(fp)
   1ffc8:	e1bfe504 	addi	r6,fp,-108
   1ffcc:	180b883a 	mov	r5,r3
   1ffd0:	1009883a 	mov	r4,r2
   1ffd4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->y, &a->y, &zi3);
   1ffd8:	e0bffd17 	ldw	r2,-12(fp)
   1ffdc:	10c00c04 	addi	r3,r2,48
   1ffe0:	e0bffe17 	ldw	r2,-8(fp)
   1ffe4:	10800c04 	addi	r2,r2,48
   1ffe8:	e13ff104 	addi	r4,fp,-60
   1ffec:	200d883a 	mov	r6,r4
   1fff0:	100b883a 	mov	r5,r2
   1fff4:	1809883a 	mov	r4,r3
   1fff8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    r->infinity = a->infinity;
   1fffc:	e0bffe17 	ldw	r2,-8(fp)
   20000:	10c02417 	ldw	r3,144(r2)
   20004:	e0bffd17 	ldw	r2,-12(fp)
   20008:	10c01815 	stw	r3,96(r2)
}
   2000c:	0001883a 	nop
   20010:	e037883a 	mov	sp,fp
   20014:	dfc00117 	ldw	ra,4(sp)
   20018:	df000017 	ldw	fp,0(sp)
   2001c:	dec00204 	addi	sp,sp,8
   20020:	f800283a 	ret

00020024 <secp256k1_ge_set_xy>:

static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y) {
   20024:	defffc04 	addi	sp,sp,-16
   20028:	df000315 	stw	fp,12(sp)
   2002c:	df000304 	addi	fp,sp,12
   20030:	e13ffd15 	stw	r4,-12(fp)
   20034:	e17ffe15 	stw	r5,-8(fp)
   20038:	e1bfff15 	stw	r6,-4(fp)
    r->infinity = 0;
   2003c:	e0bffd17 	ldw	r2,-12(fp)
   20040:	10001815 	stw	zero,96(r2)
    r->x = *x;
   20044:	e0bffd17 	ldw	r2,-12(fp)
   20048:	e0fffe17 	ldw	r3,-8(fp)
   2004c:	19000017 	ldw	r4,0(r3)
   20050:	11000015 	stw	r4,0(r2)
   20054:	19000117 	ldw	r4,4(r3)
   20058:	11000115 	stw	r4,4(r2)
   2005c:	19000217 	ldw	r4,8(r3)
   20060:	11000215 	stw	r4,8(r2)
   20064:	19000317 	ldw	r4,12(r3)
   20068:	11000315 	stw	r4,12(r2)
   2006c:	19000417 	ldw	r4,16(r3)
   20070:	11000415 	stw	r4,16(r2)
   20074:	19000517 	ldw	r4,20(r3)
   20078:	11000515 	stw	r4,20(r2)
   2007c:	19000617 	ldw	r4,24(r3)
   20080:	11000615 	stw	r4,24(r2)
   20084:	19000717 	ldw	r4,28(r3)
   20088:	11000715 	stw	r4,28(r2)
   2008c:	19000817 	ldw	r4,32(r3)
   20090:	11000815 	stw	r4,32(r2)
   20094:	19000917 	ldw	r4,36(r3)
   20098:	11000915 	stw	r4,36(r2)
   2009c:	19000a17 	ldw	r4,40(r3)
   200a0:	11000a15 	stw	r4,40(r2)
   200a4:	18c00b17 	ldw	r3,44(r3)
   200a8:	10c00b15 	stw	r3,44(r2)
    r->y = *y;
   200ac:	e0bffd17 	ldw	r2,-12(fp)
   200b0:	e0ffff17 	ldw	r3,-4(fp)
   200b4:	19000017 	ldw	r4,0(r3)
   200b8:	11000c15 	stw	r4,48(r2)
   200bc:	19000117 	ldw	r4,4(r3)
   200c0:	11000d15 	stw	r4,52(r2)
   200c4:	19000217 	ldw	r4,8(r3)
   200c8:	11000e15 	stw	r4,56(r2)
   200cc:	19000317 	ldw	r4,12(r3)
   200d0:	11000f15 	stw	r4,60(r2)
   200d4:	19000417 	ldw	r4,16(r3)
   200d8:	11001015 	stw	r4,64(r2)
   200dc:	19000517 	ldw	r4,20(r3)
   200e0:	11001115 	stw	r4,68(r2)
   200e4:	19000617 	ldw	r4,24(r3)
   200e8:	11001215 	stw	r4,72(r2)
   200ec:	19000717 	ldw	r4,28(r3)
   200f0:	11001315 	stw	r4,76(r2)
   200f4:	19000817 	ldw	r4,32(r3)
   200f8:	11001415 	stw	r4,80(r2)
   200fc:	19000917 	ldw	r4,36(r3)
   20100:	11001515 	stw	r4,84(r2)
   20104:	19000a17 	ldw	r4,40(r3)
   20108:	11001615 	stw	r4,88(r2)
   2010c:	18c00b17 	ldw	r3,44(r3)
   20110:	10c01715 	stw	r3,92(r2)
}
   20114:	0001883a 	nop
   20118:	e037883a 	mov	sp,fp
   2011c:	df000017 	ldw	fp,0(sp)
   20120:	dec00104 	addi	sp,sp,4
   20124:	f800283a 	ret

00020128 <secp256k1_ge_is_infinity>:

static int secp256k1_ge_is_infinity(const secp256k1_ge *a) {
   20128:	defffe04 	addi	sp,sp,-8
   2012c:	df000115 	stw	fp,4(sp)
   20130:	df000104 	addi	fp,sp,4
   20134:	e13fff15 	stw	r4,-4(fp)
    return a->infinity;
   20138:	e0bfff17 	ldw	r2,-4(fp)
   2013c:	10801817 	ldw	r2,96(r2)
}
   20140:	e037883a 	mov	sp,fp
   20144:	df000017 	ldw	fp,0(sp)
   20148:	dec00104 	addi	sp,sp,4
   2014c:	f800283a 	ret

00020150 <secp256k1_ge_neg>:

static void secp256k1_ge_neg(secp256k1_ge *r, const secp256k1_ge *a) {
   20150:	defffc04 	addi	sp,sp,-16
   20154:	dfc00315 	stw	ra,12(sp)
   20158:	df000215 	stw	fp,8(sp)
   2015c:	df000204 	addi	fp,sp,8
   20160:	e13ffe15 	stw	r4,-8(fp)
   20164:	e17fff15 	stw	r5,-4(fp)
    *r = *a;
   20168:	e0fffe17 	ldw	r3,-8(fp)
   2016c:	e0bfff17 	ldw	r2,-4(fp)
   20170:	1009883a 	mov	r4,r2
   20174:	00801904 	movi	r2,100
   20178:	100d883a 	mov	r6,r2
   2017c:	200b883a 	mov	r5,r4
   20180:	1809883a 	mov	r4,r3
   20184:	0045c980 	call	45c98 <memcpy>
    secp256k1_fe_normalize_weak(&r->y);
   20188:	e0bffe17 	ldw	r2,-8(fp)
   2018c:	10800c04 	addi	r2,r2,48
   20190:	1009883a 	mov	r4,r2
   20194:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    secp256k1_fe_negate(&r->y, &r->y, 1);
   20198:	e0bffe17 	ldw	r2,-8(fp)
   2019c:	10c00c04 	addi	r3,r2,48
   201a0:	e0bffe17 	ldw	r2,-8(fp)
   201a4:	10800c04 	addi	r2,r2,48
   201a8:	01800044 	movi	r6,1
   201ac:	100b883a 	mov	r5,r2
   201b0:	1809883a 	mov	r4,r3
   201b4:	0013e240 	call	13e24 <secp256k1_fe_negate>
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <secp256k1_ge_set_gej>:

static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a) {
   201d0:	deffe404 	addi	sp,sp,-112
   201d4:	dfc01b15 	stw	ra,108(sp)
   201d8:	df001a15 	stw	fp,104(sp)
   201dc:	df001a04 	addi	fp,sp,104
   201e0:	e13ffe15 	stw	r4,-8(fp)
   201e4:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe z2, z3;
    r->infinity = a->infinity;
   201e8:	e0bfff17 	ldw	r2,-4(fp)
   201ec:	10c02417 	ldw	r3,144(r2)
   201f0:	e0bffe17 	ldw	r2,-8(fp)
   201f4:	10c01815 	stw	r3,96(r2)
    secp256k1_fe_inv(&a->z, &a->z);
   201f8:	e0bfff17 	ldw	r2,-4(fp)
   201fc:	10c01804 	addi	r3,r2,96
   20200:	e0bfff17 	ldw	r2,-4(fp)
   20204:	10801804 	addi	r2,r2,96
   20208:	100b883a 	mov	r5,r2
   2020c:	1809883a 	mov	r4,r3
   20210:	001f3f00 	call	1f3f0 <secp256k1_fe_inv>
    secp256k1_fe_sqr(&z2, &a->z);
   20214:	e0bfff17 	ldw	r2,-4(fp)
   20218:	10801804 	addi	r2,r2,96
   2021c:	100b883a 	mov	r5,r2
   20220:	e13fe604 	addi	r4,fp,-104
   20224:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&z3, &a->z, &z2);
   20228:	e0bfff17 	ldw	r2,-4(fp)
   2022c:	10c01804 	addi	r3,r2,96
   20230:	e0bff204 	addi	r2,fp,-56
   20234:	e1bfe604 	addi	r6,fp,-104
   20238:	180b883a 	mov	r5,r3
   2023c:	1009883a 	mov	r4,r2
   20240:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&a->x, &a->x, &z2);
   20244:	e0bfff17 	ldw	r2,-4(fp)
   20248:	e0ffff17 	ldw	r3,-4(fp)
   2024c:	e1bfe604 	addi	r6,fp,-104
   20250:	180b883a 	mov	r5,r3
   20254:	1009883a 	mov	r4,r2
   20258:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&a->y, &a->y, &z3);
   2025c:	e0bfff17 	ldw	r2,-4(fp)
   20260:	10c00c04 	addi	r3,r2,48
   20264:	e0bfff17 	ldw	r2,-4(fp)
   20268:	10800c04 	addi	r2,r2,48
   2026c:	e13ff204 	addi	r4,fp,-56
   20270:	200d883a 	mov	r6,r4
   20274:	100b883a 	mov	r5,r2
   20278:	1809883a 	mov	r4,r3
   2027c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_set_int(&a->z, 1);
   20280:	e0bfff17 	ldw	r2,-4(fp)
   20284:	10801804 	addi	r2,r2,96
   20288:	01400044 	movi	r5,1
   2028c:	1009883a 	mov	r4,r2
   20290:	00135c80 	call	135c8 <secp256k1_fe_set_int>
    r->x = a->x;
   20294:	e0bffe17 	ldw	r2,-8(fp)
   20298:	e0ffff17 	ldw	r3,-4(fp)
   2029c:	19000017 	ldw	r4,0(r3)
   202a0:	11000015 	stw	r4,0(r2)
   202a4:	19000117 	ldw	r4,4(r3)
   202a8:	11000115 	stw	r4,4(r2)
   202ac:	19000217 	ldw	r4,8(r3)
   202b0:	11000215 	stw	r4,8(r2)
   202b4:	19000317 	ldw	r4,12(r3)
   202b8:	11000315 	stw	r4,12(r2)
   202bc:	19000417 	ldw	r4,16(r3)
   202c0:	11000415 	stw	r4,16(r2)
   202c4:	19000517 	ldw	r4,20(r3)
   202c8:	11000515 	stw	r4,20(r2)
   202cc:	19000617 	ldw	r4,24(r3)
   202d0:	11000615 	stw	r4,24(r2)
   202d4:	19000717 	ldw	r4,28(r3)
   202d8:	11000715 	stw	r4,28(r2)
   202dc:	19000817 	ldw	r4,32(r3)
   202e0:	11000815 	stw	r4,32(r2)
   202e4:	19000917 	ldw	r4,36(r3)
   202e8:	11000915 	stw	r4,36(r2)
   202ec:	19000a17 	ldw	r4,40(r3)
   202f0:	11000a15 	stw	r4,40(r2)
   202f4:	18c00b17 	ldw	r3,44(r3)
   202f8:	10c00b15 	stw	r3,44(r2)
    r->y = a->y;
   202fc:	e0bffe17 	ldw	r2,-8(fp)
   20300:	e0ffff17 	ldw	r3,-4(fp)
   20304:	19000c17 	ldw	r4,48(r3)
   20308:	11000c15 	stw	r4,48(r2)
   2030c:	19000d17 	ldw	r4,52(r3)
   20310:	11000d15 	stw	r4,52(r2)
   20314:	19000e17 	ldw	r4,56(r3)
   20318:	11000e15 	stw	r4,56(r2)
   2031c:	19000f17 	ldw	r4,60(r3)
   20320:	11000f15 	stw	r4,60(r2)
   20324:	19001017 	ldw	r4,64(r3)
   20328:	11001015 	stw	r4,64(r2)
   2032c:	19001117 	ldw	r4,68(r3)
   20330:	11001115 	stw	r4,68(r2)
   20334:	19001217 	ldw	r4,72(r3)
   20338:	11001215 	stw	r4,72(r2)
   2033c:	19001317 	ldw	r4,76(r3)
   20340:	11001315 	stw	r4,76(r2)
   20344:	19001417 	ldw	r4,80(r3)
   20348:	11001415 	stw	r4,80(r2)
   2034c:	19001517 	ldw	r4,84(r3)
   20350:	11001515 	stw	r4,84(r2)
   20354:	19001617 	ldw	r4,88(r3)
   20358:	11001615 	stw	r4,88(r2)
   2035c:	18c01717 	ldw	r3,92(r3)
   20360:	10c01715 	stw	r3,92(r2)
}
   20364:	0001883a 	nop
   20368:	e037883a 	mov	sp,fp
   2036c:	dfc00117 	ldw	ra,4(sp)
   20370:	df000017 	ldw	fp,0(sp)
   20374:	dec00204 	addi	sp,sp,8
   20378:	f800283a 	ret

0002037c <secp256k1_ge_set_gej_var>:

static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {
   2037c:	deffe404 	addi	sp,sp,-112
   20380:	dfc01b15 	stw	ra,108(sp)
   20384:	df001a15 	stw	fp,104(sp)
   20388:	df001a04 	addi	fp,sp,104
   2038c:	e13ffe15 	stw	r4,-8(fp)
   20390:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe z2, z3;
    r->infinity = a->infinity;
   20394:	e0bfff17 	ldw	r2,-4(fp)
   20398:	10c02417 	ldw	r3,144(r2)
   2039c:	e0bffe17 	ldw	r2,-8(fp)
   203a0:	10c01815 	stw	r3,96(r2)
    if (a->infinity) {
   203a4:	e0bfff17 	ldw	r2,-4(fp)
   203a8:	10802417 	ldw	r2,144(r2)
   203ac:	10005c1e 	bne	r2,zero,20520 <secp256k1_ge_set_gej_var+0x1a4>
        return;
    }
    secp256k1_fe_inv_var(&a->z, &a->z);
   203b0:	e0bfff17 	ldw	r2,-4(fp)
   203b4:	10c01804 	addi	r3,r2,96
   203b8:	e0bfff17 	ldw	r2,-4(fp)
   203bc:	10801804 	addi	r2,r2,96
   203c0:	100b883a 	mov	r5,r2
   203c4:	1809883a 	mov	r4,r3
   203c8:	001fc380 	call	1fc38 <secp256k1_fe_inv_var>
    secp256k1_fe_sqr(&z2, &a->z);
   203cc:	e0bfff17 	ldw	r2,-4(fp)
   203d0:	10801804 	addi	r2,r2,96
   203d4:	100b883a 	mov	r5,r2
   203d8:	e13fe604 	addi	r4,fp,-104
   203dc:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&z3, &a->z, &z2);
   203e0:	e0bfff17 	ldw	r2,-4(fp)
   203e4:	10c01804 	addi	r3,r2,96
   203e8:	e0bff204 	addi	r2,fp,-56
   203ec:	e1bfe604 	addi	r6,fp,-104
   203f0:	180b883a 	mov	r5,r3
   203f4:	1009883a 	mov	r4,r2
   203f8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&a->x, &a->x, &z2);
   203fc:	e0bfff17 	ldw	r2,-4(fp)
   20400:	e0ffff17 	ldw	r3,-4(fp)
   20404:	e1bfe604 	addi	r6,fp,-104
   20408:	180b883a 	mov	r5,r3
   2040c:	1009883a 	mov	r4,r2
   20410:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&a->y, &a->y, &z3);
   20414:	e0bfff17 	ldw	r2,-4(fp)
   20418:	10c00c04 	addi	r3,r2,48
   2041c:	e0bfff17 	ldw	r2,-4(fp)
   20420:	10800c04 	addi	r2,r2,48
   20424:	e13ff204 	addi	r4,fp,-56
   20428:	200d883a 	mov	r6,r4
   2042c:	100b883a 	mov	r5,r2
   20430:	1809883a 	mov	r4,r3
   20434:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_set_int(&a->z, 1);
   20438:	e0bfff17 	ldw	r2,-4(fp)
   2043c:	10801804 	addi	r2,r2,96
   20440:	01400044 	movi	r5,1
   20444:	1009883a 	mov	r4,r2
   20448:	00135c80 	call	135c8 <secp256k1_fe_set_int>
    r->x = a->x;
   2044c:	e0bffe17 	ldw	r2,-8(fp)
   20450:	e0ffff17 	ldw	r3,-4(fp)
   20454:	19000017 	ldw	r4,0(r3)
   20458:	11000015 	stw	r4,0(r2)
   2045c:	19000117 	ldw	r4,4(r3)
   20460:	11000115 	stw	r4,4(r2)
   20464:	19000217 	ldw	r4,8(r3)
   20468:	11000215 	stw	r4,8(r2)
   2046c:	19000317 	ldw	r4,12(r3)
   20470:	11000315 	stw	r4,12(r2)
   20474:	19000417 	ldw	r4,16(r3)
   20478:	11000415 	stw	r4,16(r2)
   2047c:	19000517 	ldw	r4,20(r3)
   20480:	11000515 	stw	r4,20(r2)
   20484:	19000617 	ldw	r4,24(r3)
   20488:	11000615 	stw	r4,24(r2)
   2048c:	19000717 	ldw	r4,28(r3)
   20490:	11000715 	stw	r4,28(r2)
   20494:	19000817 	ldw	r4,32(r3)
   20498:	11000815 	stw	r4,32(r2)
   2049c:	19000917 	ldw	r4,36(r3)
   204a0:	11000915 	stw	r4,36(r2)
   204a4:	19000a17 	ldw	r4,40(r3)
   204a8:	11000a15 	stw	r4,40(r2)
   204ac:	18c00b17 	ldw	r3,44(r3)
   204b0:	10c00b15 	stw	r3,44(r2)
    r->y = a->y;
   204b4:	e0bffe17 	ldw	r2,-8(fp)
   204b8:	e0ffff17 	ldw	r3,-4(fp)
   204bc:	19000c17 	ldw	r4,48(r3)
   204c0:	11000c15 	stw	r4,48(r2)
   204c4:	19000d17 	ldw	r4,52(r3)
   204c8:	11000d15 	stw	r4,52(r2)
   204cc:	19000e17 	ldw	r4,56(r3)
   204d0:	11000e15 	stw	r4,56(r2)
   204d4:	19000f17 	ldw	r4,60(r3)
   204d8:	11000f15 	stw	r4,60(r2)
   204dc:	19001017 	ldw	r4,64(r3)
   204e0:	11001015 	stw	r4,64(r2)
   204e4:	19001117 	ldw	r4,68(r3)
   204e8:	11001115 	stw	r4,68(r2)
   204ec:	19001217 	ldw	r4,72(r3)
   204f0:	11001215 	stw	r4,72(r2)
   204f4:	19001317 	ldw	r4,76(r3)
   204f8:	11001315 	stw	r4,76(r2)
   204fc:	19001417 	ldw	r4,80(r3)
   20500:	11001415 	stw	r4,80(r2)
   20504:	19001517 	ldw	r4,84(r3)
   20508:	11001515 	stw	r4,84(r2)
   2050c:	19001617 	ldw	r4,88(r3)
   20510:	11001615 	stw	r4,88(r2)
   20514:	18c01717 	ldw	r3,92(r3)
   20518:	10c01715 	stw	r3,92(r2)
   2051c:	00000106 	br	20524 <secp256k1_ge_set_gej_var+0x1a8>

static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {
    secp256k1_fe z2, z3;
    r->infinity = a->infinity;
    if (a->infinity) {
        return;
   20520:	0001883a 	nop
    secp256k1_fe_mul(&a->x, &a->x, &z2);
    secp256k1_fe_mul(&a->y, &a->y, &z3);
    secp256k1_fe_set_int(&a->z, 1);
    r->x = a->x;
    r->y = a->y;
}
   20524:	e037883a 	mov	sp,fp
   20528:	dfc00117 	ldw	ra,4(sp)
   2052c:	df000017 	ldw	fp,0(sp)
   20530:	dec00204 	addi	sp,sp,8
   20534:	f800283a 	ret

00020538 <secp256k1_ge_set_all_gej_var>:

static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_callback *cb) {
   20538:	defff404 	addi	sp,sp,-48
   2053c:	dfc00b15 	stw	ra,44(sp)
   20540:	df000a15 	stw	fp,40(sp)
   20544:	dc400915 	stw	r17,36(sp)
   20548:	dc000815 	stw	r16,32(sp)
   2054c:	df000a04 	addi	fp,sp,40
   20550:	e13ffa15 	stw	r4,-24(fp)
   20554:	e17ffb15 	stw	r5,-20(fp)
   20558:	e1bffc15 	stw	r6,-16(fp)
   2055c:	e1fffd15 	stw	r7,-12(fp)
    secp256k1_fe *az;
    secp256k1_fe *azi;
    size_t i;
    size_t count = 0;
   20560:	e03ff715 	stw	zero,-36(fp)
    az = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * len);
   20564:	01400c04 	movi	r5,48
   20568:	e13ffa17 	ldw	r4,-24(fp)
   2056c:	0042b540 	call	42b54 <__mulsi3>
   20570:	100b883a 	mov	r5,r2
   20574:	e13ffd17 	ldw	r4,-12(fp)
   20578:	000c1a80 	call	c1a8 <checked_malloc>
   2057c:	e0bff815 	stw	r2,-32(fp)
    for (i = 0; i < len; i++) {
   20580:	e03ff615 	stw	zero,-40(fp)
   20584:	00003206 	br	20650 <secp256k1_ge_set_all_gej_var+0x118>
        if (!a[i].infinity) {
   20588:	01402504 	movi	r5,148
   2058c:	e13ff617 	ldw	r4,-40(fp)
   20590:	0042b540 	call	42b54 <__mulsi3>
   20594:	1007883a 	mov	r3,r2
   20598:	e0bffc17 	ldw	r2,-16(fp)
   2059c:	10c5883a 	add	r2,r2,r3
   205a0:	10802417 	ldw	r2,144(r2)
   205a4:	1000271e 	bne	r2,zero,20644 <secp256k1_ge_set_all_gej_var+0x10c>
            az[count++] = a[i].z;
   205a8:	e0bff717 	ldw	r2,-36(fp)
   205ac:	10c00044 	addi	r3,r2,1
   205b0:	e0fff715 	stw	r3,-36(fp)
   205b4:	01400c04 	movi	r5,48
   205b8:	1009883a 	mov	r4,r2
   205bc:	0042b540 	call	42b54 <__mulsi3>
   205c0:	1007883a 	mov	r3,r2
   205c4:	e0bff817 	ldw	r2,-32(fp)
   205c8:	10e1883a 	add	r16,r2,r3
   205cc:	01402504 	movi	r5,148
   205d0:	e13ff617 	ldw	r4,-40(fp)
   205d4:	0042b540 	call	42b54 <__mulsi3>
   205d8:	1007883a 	mov	r3,r2
   205dc:	e0bffc17 	ldw	r2,-16(fp)
   205e0:	10c5883a 	add	r2,r2,r3
   205e4:	10c01817 	ldw	r3,96(r2)
   205e8:	80c00015 	stw	r3,0(r16)
   205ec:	10c01917 	ldw	r3,100(r2)
   205f0:	80c00115 	stw	r3,4(r16)
   205f4:	10c01a17 	ldw	r3,104(r2)
   205f8:	80c00215 	stw	r3,8(r16)
   205fc:	10c01b17 	ldw	r3,108(r2)
   20600:	80c00315 	stw	r3,12(r16)
   20604:	10c01c17 	ldw	r3,112(r2)
   20608:	80c00415 	stw	r3,16(r16)
   2060c:	10c01d17 	ldw	r3,116(r2)
   20610:	80c00515 	stw	r3,20(r16)
   20614:	10c01e17 	ldw	r3,120(r2)
   20618:	80c00615 	stw	r3,24(r16)
   2061c:	10c01f17 	ldw	r3,124(r2)
   20620:	80c00715 	stw	r3,28(r16)
   20624:	10c02017 	ldw	r3,128(r2)
   20628:	80c00815 	stw	r3,32(r16)
   2062c:	10c02117 	ldw	r3,132(r2)
   20630:	80c00915 	stw	r3,36(r16)
   20634:	10c02217 	ldw	r3,136(r2)
   20638:	80c00a15 	stw	r3,40(r16)
   2063c:	10802317 	ldw	r2,140(r2)
   20640:	80800b15 	stw	r2,44(r16)
    secp256k1_fe *az;
    secp256k1_fe *azi;
    size_t i;
    size_t count = 0;
    az = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * len);
    for (i = 0; i < len; i++) {
   20644:	e0bff617 	ldw	r2,-40(fp)
   20648:	10800044 	addi	r2,r2,1
   2064c:	e0bff615 	stw	r2,-40(fp)
   20650:	e0fff617 	ldw	r3,-40(fp)
   20654:	e0bffa17 	ldw	r2,-24(fp)
   20658:	18bfcb36 	bltu	r3,r2,20588 <__alt_mem_epcs_flash_controller+0xfe00f588>
        if (!a[i].infinity) {
            az[count++] = a[i].z;
        }
    }

    azi = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * count);
   2065c:	01400c04 	movi	r5,48
   20660:	e13ff717 	ldw	r4,-36(fp)
   20664:	0042b540 	call	42b54 <__mulsi3>
   20668:	100b883a 	mov	r5,r2
   2066c:	e13ffd17 	ldw	r4,-12(fp)
   20670:	000c1a80 	call	c1a8 <checked_malloc>
   20674:	e0bff915 	stw	r2,-28(fp)
    secp256k1_fe_inv_all_var(count, azi, az);
   20678:	e1bff817 	ldw	r6,-32(fp)
   2067c:	e17ff917 	ldw	r5,-28(fp)
   20680:	e13ff717 	ldw	r4,-36(fp)
   20684:	001fc740 	call	1fc74 <secp256k1_fe_inv_all_var>
    free(az);
   20688:	e13ff817 	ldw	r4,-32(fp)
   2068c:	00453fc0 	call	453fc <free>

    count = 0;
   20690:	e03ff715 	stw	zero,-36(fp)
    for (i = 0; i < len; i++) {
   20694:	e03ff615 	stw	zero,-40(fp)
   20698:	00003206 	br	20764 <secp256k1_ge_set_all_gej_var+0x22c>
        r[i].infinity = a[i].infinity;
   2069c:	01401904 	movi	r5,100
   206a0:	e13ff617 	ldw	r4,-40(fp)
   206a4:	0042b540 	call	42b54 <__mulsi3>
   206a8:	1007883a 	mov	r3,r2
   206ac:	e0bffb17 	ldw	r2,-20(fp)
   206b0:	10e1883a 	add	r16,r2,r3
   206b4:	01402504 	movi	r5,148
   206b8:	e13ff617 	ldw	r4,-40(fp)
   206bc:	0042b540 	call	42b54 <__mulsi3>
   206c0:	1007883a 	mov	r3,r2
   206c4:	e0bffc17 	ldw	r2,-16(fp)
   206c8:	10c5883a 	add	r2,r2,r3
   206cc:	10802417 	ldw	r2,144(r2)
   206d0:	80801815 	stw	r2,96(r16)
        if (!a[i].infinity) {
   206d4:	01402504 	movi	r5,148
   206d8:	e13ff617 	ldw	r4,-40(fp)
   206dc:	0042b540 	call	42b54 <__mulsi3>
   206e0:	1007883a 	mov	r3,r2
   206e4:	e0bffc17 	ldw	r2,-16(fp)
   206e8:	10c5883a 	add	r2,r2,r3
   206ec:	10802417 	ldw	r2,144(r2)
   206f0:	1000191e 	bne	r2,zero,20758 <secp256k1_ge_set_all_gej_var+0x220>
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &azi[count++]);
   206f4:	01401904 	movi	r5,100
   206f8:	e13ff617 	ldw	r4,-40(fp)
   206fc:	0042b540 	call	42b54 <__mulsi3>
   20700:	1007883a 	mov	r3,r2
   20704:	e0bffb17 	ldw	r2,-20(fp)
   20708:	10e1883a 	add	r16,r2,r3
   2070c:	01402504 	movi	r5,148
   20710:	e13ff617 	ldw	r4,-40(fp)
   20714:	0042b540 	call	42b54 <__mulsi3>
   20718:	1007883a 	mov	r3,r2
   2071c:	e0bffc17 	ldw	r2,-16(fp)
   20720:	10e3883a 	add	r17,r2,r3
   20724:	e0bff717 	ldw	r2,-36(fp)
   20728:	10c00044 	addi	r3,r2,1
   2072c:	e0fff715 	stw	r3,-36(fp)
   20730:	01400c04 	movi	r5,48
   20734:	1009883a 	mov	r4,r2
   20738:	0042b540 	call	42b54 <__mulsi3>
   2073c:	1007883a 	mov	r3,r2
   20740:	e0bff917 	ldw	r2,-28(fp)
   20744:	10c5883a 	add	r2,r2,r3
   20748:	100d883a 	mov	r6,r2
   2074c:	880b883a 	mov	r5,r17
   20750:	8009883a 	mov	r4,r16
   20754:	001ff840 	call	1ff84 <secp256k1_ge_set_gej_zinv>
    azi = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * count);
    secp256k1_fe_inv_all_var(count, azi, az);
    free(az);

    count = 0;
    for (i = 0; i < len; i++) {
   20758:	e0bff617 	ldw	r2,-40(fp)
   2075c:	10800044 	addi	r2,r2,1
   20760:	e0bff615 	stw	r2,-40(fp)
   20764:	e0fff617 	ldw	r3,-40(fp)
   20768:	e0bffa17 	ldw	r2,-24(fp)
   2076c:	18bfcb36 	bltu	r3,r2,2069c <__alt_mem_epcs_flash_controller+0xfe00f69c>
        r[i].infinity = a[i].infinity;
        if (!a[i].infinity) {
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &azi[count++]);
        }
    }
    free(azi);
   20770:	e13ff917 	ldw	r4,-28(fp)
   20774:	00453fc0 	call	453fc <free>
}
   20778:	0001883a 	nop
   2077c:	e6fffe04 	addi	sp,fp,-8
   20780:	dfc00317 	ldw	ra,12(sp)
   20784:	df000217 	ldw	fp,8(sp)
   20788:	dc400117 	ldw	r17,4(sp)
   2078c:	dc000017 	ldw	r16,0(sp)
   20790:	dec00404 	addi	sp,sp,16
   20794:	f800283a 	ret

00020798 <secp256k1_ge_set_table_gej_var>:

static void secp256k1_ge_set_table_gej_var(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr) {
   20798:	deffec04 	addi	sp,sp,-80
   2079c:	dfc01315 	stw	ra,76(sp)
   207a0:	df001215 	stw	fp,72(sp)
   207a4:	dc001115 	stw	r16,68(sp)
   207a8:	df001204 	addi	fp,sp,72
   207ac:	e13ffb15 	stw	r4,-20(fp)
   207b0:	e17ffc15 	stw	r5,-16(fp)
   207b4:	e1bffd15 	stw	r6,-12(fp)
   207b8:	e1fffe15 	stw	r7,-8(fp)
    size_t i = len - 1;
   207bc:	e0bffb17 	ldw	r2,-20(fp)
   207c0:	10bfffc4 	addi	r2,r2,-1
   207c4:	e0bfee15 	stw	r2,-72(fp)
    secp256k1_fe zi;

    if (len > 0) {
   207c8:	e0bffb17 	ldw	r2,-20(fp)
   207cc:	10003f26 	beq	r2,zero,208cc <secp256k1_ge_set_table_gej_var+0x134>
        /* Compute the inverse of the last z coordinate, and use it to compute the last affine output. */
        secp256k1_fe_inv(&zi, &a[i].z);
   207d0:	01402504 	movi	r5,148
   207d4:	e13fee17 	ldw	r4,-72(fp)
   207d8:	0042b540 	call	42b54 <__mulsi3>
   207dc:	1007883a 	mov	r3,r2
   207e0:	e0bffd17 	ldw	r2,-12(fp)
   207e4:	10c5883a 	add	r2,r2,r3
   207e8:	10c01804 	addi	r3,r2,96
   207ec:	e0bfef04 	addi	r2,fp,-68
   207f0:	180b883a 	mov	r5,r3
   207f4:	1009883a 	mov	r4,r2
   207f8:	001f3f00 	call	1f3f0 <secp256k1_fe_inv>
        secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);
   207fc:	01401904 	movi	r5,100
   20800:	e13fee17 	ldw	r4,-72(fp)
   20804:	0042b540 	call	42b54 <__mulsi3>
   20808:	1007883a 	mov	r3,r2
   2080c:	e0bffc17 	ldw	r2,-16(fp)
   20810:	10e1883a 	add	r16,r2,r3
   20814:	01402504 	movi	r5,148
   20818:	e13fee17 	ldw	r4,-72(fp)
   2081c:	0042b540 	call	42b54 <__mulsi3>
   20820:	1007883a 	mov	r3,r2
   20824:	e0bffd17 	ldw	r2,-12(fp)
   20828:	10c5883a 	add	r2,r2,r3
   2082c:	e0ffef04 	addi	r3,fp,-68
   20830:	180d883a 	mov	r6,r3
   20834:	100b883a 	mov	r5,r2
   20838:	8009883a 	mov	r4,r16
   2083c:	001ff840 	call	1ff84 <secp256k1_ge_set_gej_zinv>

        /* Work out way backwards, using the z-ratios to scale the x/y values. */
        while (i > 0) {
   20840:	00002006 	br	208c4 <secp256k1_ge_set_table_gej_var+0x12c>
            secp256k1_fe_mul(&zi, &zi, &zr[i]);
   20844:	01400c04 	movi	r5,48
   20848:	e13fee17 	ldw	r4,-72(fp)
   2084c:	0042b540 	call	42b54 <__mulsi3>
   20850:	1007883a 	mov	r3,r2
   20854:	e0bffe17 	ldw	r2,-8(fp)
   20858:	10c9883a 	add	r4,r2,r3
   2085c:	e0ffef04 	addi	r3,fp,-68
   20860:	e0bfef04 	addi	r2,fp,-68
   20864:	200d883a 	mov	r6,r4
   20868:	180b883a 	mov	r5,r3
   2086c:	1009883a 	mov	r4,r2
   20870:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
            i--;
   20874:	e0bfee17 	ldw	r2,-72(fp)
   20878:	10bfffc4 	addi	r2,r2,-1
   2087c:	e0bfee15 	stw	r2,-72(fp)
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);
   20880:	01401904 	movi	r5,100
   20884:	e13fee17 	ldw	r4,-72(fp)
   20888:	0042b540 	call	42b54 <__mulsi3>
   2088c:	1007883a 	mov	r3,r2
   20890:	e0bffc17 	ldw	r2,-16(fp)
   20894:	10e1883a 	add	r16,r2,r3
   20898:	01402504 	movi	r5,148
   2089c:	e13fee17 	ldw	r4,-72(fp)
   208a0:	0042b540 	call	42b54 <__mulsi3>
   208a4:	1007883a 	mov	r3,r2
   208a8:	e0bffd17 	ldw	r2,-12(fp)
   208ac:	10c5883a 	add	r2,r2,r3
   208b0:	e0ffef04 	addi	r3,fp,-68
   208b4:	180d883a 	mov	r6,r3
   208b8:	100b883a 	mov	r5,r2
   208bc:	8009883a 	mov	r4,r16
   208c0:	001ff840 	call	1ff84 <secp256k1_ge_set_gej_zinv>
        /* Compute the inverse of the last z coordinate, and use it to compute the last affine output. */
        secp256k1_fe_inv(&zi, &a[i].z);
        secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);

        /* Work out way backwards, using the z-ratios to scale the x/y values. */
        while (i > 0) {
   208c4:	e0bfee17 	ldw	r2,-72(fp)
   208c8:	103fde1e 	bne	r2,zero,20844 <__alt_mem_epcs_flash_controller+0xfe00f844>
            secp256k1_fe_mul(&zi, &zi, &zr[i]);
            i--;
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);
        }
    }
}
   208cc:	0001883a 	nop
   208d0:	e6ffff04 	addi	sp,fp,-4
   208d4:	dfc00217 	ldw	ra,8(sp)
   208d8:	df000117 	ldw	fp,4(sp)
   208dc:	dc000017 	ldw	r16,0(sp)
   208e0:	dec00304 	addi	sp,sp,12
   208e4:	f800283a 	ret

000208e8 <secp256k1_ge_globalz_set_table_gej>:

static void secp256k1_ge_globalz_set_table_gej(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr) {
   208e8:	deffec04 	addi	sp,sp,-80
   208ec:	dfc01315 	stw	ra,76(sp)
   208f0:	df001215 	stw	fp,72(sp)
   208f4:	dc001115 	stw	r16,68(sp)
   208f8:	df001204 	addi	fp,sp,72
   208fc:	e13ffb15 	stw	r4,-20(fp)
   20900:	e17ffc15 	stw	r5,-16(fp)
   20904:	e1bffd15 	stw	r6,-12(fp)
   20908:	e1fffe15 	stw	r7,-8(fp)
    size_t i = len - 1;
   2090c:	e0bffb17 	ldw	r2,-20(fp)
   20910:	10bfffc4 	addi	r2,r2,-1
   20914:	e0bfee15 	stw	r2,-72(fp)
    secp256k1_fe zs;

    if (len > 0) {
   20918:	e0bffb17 	ldw	r2,-20(fp)
   2091c:	1000b326 	beq	r2,zero,20bec <secp256k1_ge_globalz_set_table_gej+0x304>
        /* The z of the final point gives us the "global Z" for the table. */
        r[i].x = a[i].x;
   20920:	01401904 	movi	r5,100
   20924:	e13fee17 	ldw	r4,-72(fp)
   20928:	0042b540 	call	42b54 <__mulsi3>
   2092c:	1007883a 	mov	r3,r2
   20930:	e0bffc17 	ldw	r2,-16(fp)
   20934:	10e1883a 	add	r16,r2,r3
   20938:	01402504 	movi	r5,148
   2093c:	e13fee17 	ldw	r4,-72(fp)
   20940:	0042b540 	call	42b54 <__mulsi3>
   20944:	1007883a 	mov	r3,r2
   20948:	e0bffe17 	ldw	r2,-8(fp)
   2094c:	10c5883a 	add	r2,r2,r3
   20950:	10c00017 	ldw	r3,0(r2)
   20954:	80c00015 	stw	r3,0(r16)
   20958:	10c00117 	ldw	r3,4(r2)
   2095c:	80c00115 	stw	r3,4(r16)
   20960:	10c00217 	ldw	r3,8(r2)
   20964:	80c00215 	stw	r3,8(r16)
   20968:	10c00317 	ldw	r3,12(r2)
   2096c:	80c00315 	stw	r3,12(r16)
   20970:	10c00417 	ldw	r3,16(r2)
   20974:	80c00415 	stw	r3,16(r16)
   20978:	10c00517 	ldw	r3,20(r2)
   2097c:	80c00515 	stw	r3,20(r16)
   20980:	10c00617 	ldw	r3,24(r2)
   20984:	80c00615 	stw	r3,24(r16)
   20988:	10c00717 	ldw	r3,28(r2)
   2098c:	80c00715 	stw	r3,28(r16)
   20990:	10c00817 	ldw	r3,32(r2)
   20994:	80c00815 	stw	r3,32(r16)
   20998:	10c00917 	ldw	r3,36(r2)
   2099c:	80c00915 	stw	r3,36(r16)
   209a0:	10c00a17 	ldw	r3,40(r2)
   209a4:	80c00a15 	stw	r3,40(r16)
   209a8:	10800b17 	ldw	r2,44(r2)
   209ac:	80800b15 	stw	r2,44(r16)
        r[i].y = a[i].y;
   209b0:	01401904 	movi	r5,100
   209b4:	e13fee17 	ldw	r4,-72(fp)
   209b8:	0042b540 	call	42b54 <__mulsi3>
   209bc:	1007883a 	mov	r3,r2
   209c0:	e0bffc17 	ldw	r2,-16(fp)
   209c4:	10e1883a 	add	r16,r2,r3
   209c8:	01402504 	movi	r5,148
   209cc:	e13fee17 	ldw	r4,-72(fp)
   209d0:	0042b540 	call	42b54 <__mulsi3>
   209d4:	1007883a 	mov	r3,r2
   209d8:	e0bffe17 	ldw	r2,-8(fp)
   209dc:	10c5883a 	add	r2,r2,r3
   209e0:	10c00c17 	ldw	r3,48(r2)
   209e4:	80c00c15 	stw	r3,48(r16)
   209e8:	10c00d17 	ldw	r3,52(r2)
   209ec:	80c00d15 	stw	r3,52(r16)
   209f0:	10c00e17 	ldw	r3,56(r2)
   209f4:	80c00e15 	stw	r3,56(r16)
   209f8:	10c00f17 	ldw	r3,60(r2)
   209fc:	80c00f15 	stw	r3,60(r16)
   20a00:	10c01017 	ldw	r3,64(r2)
   20a04:	80c01015 	stw	r3,64(r16)
   20a08:	10c01117 	ldw	r3,68(r2)
   20a0c:	80c01115 	stw	r3,68(r16)
   20a10:	10c01217 	ldw	r3,72(r2)
   20a14:	80c01215 	stw	r3,72(r16)
   20a18:	10c01317 	ldw	r3,76(r2)
   20a1c:	80c01315 	stw	r3,76(r16)
   20a20:	10c01417 	ldw	r3,80(r2)
   20a24:	80c01415 	stw	r3,80(r16)
   20a28:	10c01517 	ldw	r3,84(r2)
   20a2c:	80c01515 	stw	r3,84(r16)
   20a30:	10c01617 	ldw	r3,88(r2)
   20a34:	80c01615 	stw	r3,88(r16)
   20a38:	10801717 	ldw	r2,92(r2)
   20a3c:	80801715 	stw	r2,92(r16)
        *globalz = a[i].z;
   20a40:	01402504 	movi	r5,148
   20a44:	e13fee17 	ldw	r4,-72(fp)
   20a48:	0042b540 	call	42b54 <__mulsi3>
   20a4c:	1007883a 	mov	r3,r2
   20a50:	e0bffe17 	ldw	r2,-8(fp)
   20a54:	10c7883a 	add	r3,r2,r3
   20a58:	e0bffd17 	ldw	r2,-12(fp)
   20a5c:	19001817 	ldw	r4,96(r3)
   20a60:	11000015 	stw	r4,0(r2)
   20a64:	19001917 	ldw	r4,100(r3)
   20a68:	11000115 	stw	r4,4(r2)
   20a6c:	19001a17 	ldw	r4,104(r3)
   20a70:	11000215 	stw	r4,8(r2)
   20a74:	19001b17 	ldw	r4,108(r3)
   20a78:	11000315 	stw	r4,12(r2)
   20a7c:	19001c17 	ldw	r4,112(r3)
   20a80:	11000415 	stw	r4,16(r2)
   20a84:	19001d17 	ldw	r4,116(r3)
   20a88:	11000515 	stw	r4,20(r2)
   20a8c:	19001e17 	ldw	r4,120(r3)
   20a90:	11000615 	stw	r4,24(r2)
   20a94:	19001f17 	ldw	r4,124(r3)
   20a98:	11000715 	stw	r4,28(r2)
   20a9c:	19002017 	ldw	r4,128(r3)
   20aa0:	11000815 	stw	r4,32(r2)
   20aa4:	19002117 	ldw	r4,132(r3)
   20aa8:	11000915 	stw	r4,36(r2)
   20aac:	19002217 	ldw	r4,136(r3)
   20ab0:	11000a15 	stw	r4,40(r2)
   20ab4:	18c02317 	ldw	r3,140(r3)
   20ab8:	10c00b15 	stw	r3,44(r2)
        r[i].infinity = 0;
   20abc:	01401904 	movi	r5,100
   20ac0:	e13fee17 	ldw	r4,-72(fp)
   20ac4:	0042b540 	call	42b54 <__mulsi3>
   20ac8:	1007883a 	mov	r3,r2
   20acc:	e0bffc17 	ldw	r2,-16(fp)
   20ad0:	10c5883a 	add	r2,r2,r3
   20ad4:	10001815 	stw	zero,96(r2)
        zs = zr[i];
   20ad8:	01400c04 	movi	r5,48
   20adc:	e13fee17 	ldw	r4,-72(fp)
   20ae0:	0042b540 	call	42b54 <__mulsi3>
   20ae4:	1007883a 	mov	r3,r2
   20ae8:	e0800217 	ldw	r2,8(fp)
   20aec:	10c5883a 	add	r2,r2,r3
   20af0:	10c00017 	ldw	r3,0(r2)
   20af4:	e0ffef15 	stw	r3,-68(fp)
   20af8:	10c00117 	ldw	r3,4(r2)
   20afc:	e0fff015 	stw	r3,-64(fp)
   20b00:	10c00217 	ldw	r3,8(r2)
   20b04:	e0fff115 	stw	r3,-60(fp)
   20b08:	10c00317 	ldw	r3,12(r2)
   20b0c:	e0fff215 	stw	r3,-56(fp)
   20b10:	10c00417 	ldw	r3,16(r2)
   20b14:	e0fff315 	stw	r3,-52(fp)
   20b18:	10c00517 	ldw	r3,20(r2)
   20b1c:	e0fff415 	stw	r3,-48(fp)
   20b20:	10c00617 	ldw	r3,24(r2)
   20b24:	e0fff515 	stw	r3,-44(fp)
   20b28:	10c00717 	ldw	r3,28(r2)
   20b2c:	e0fff615 	stw	r3,-40(fp)
   20b30:	10c00817 	ldw	r3,32(r2)
   20b34:	e0fff715 	stw	r3,-36(fp)
   20b38:	10c00917 	ldw	r3,36(r2)
   20b3c:	e0fff815 	stw	r3,-32(fp)
   20b40:	10c00a17 	ldw	r3,40(r2)
   20b44:	e0fff915 	stw	r3,-28(fp)
   20b48:	10800b17 	ldw	r2,44(r2)
   20b4c:	e0bffa15 	stw	r2,-24(fp)

        /* Work our way backwards, using the z-ratios to scale the x/y values. */
        while (i > 0) {
   20b50:	00002406 	br	20be4 <secp256k1_ge_globalz_set_table_gej+0x2fc>
            if (i != len - 1) {
   20b54:	e0bffb17 	ldw	r2,-20(fp)
   20b58:	10ffffc4 	addi	r3,r2,-1
   20b5c:	e0bfee17 	ldw	r2,-72(fp)
   20b60:	18800c26 	beq	r3,r2,20b94 <secp256k1_ge_globalz_set_table_gej+0x2ac>
                secp256k1_fe_mul(&zs, &zs, &zr[i]);
   20b64:	01400c04 	movi	r5,48
   20b68:	e13fee17 	ldw	r4,-72(fp)
   20b6c:	0042b540 	call	42b54 <__mulsi3>
   20b70:	1007883a 	mov	r3,r2
   20b74:	e0800217 	ldw	r2,8(fp)
   20b78:	10c9883a 	add	r4,r2,r3
   20b7c:	e0ffef04 	addi	r3,fp,-68
   20b80:	e0bfef04 	addi	r2,fp,-68
   20b84:	200d883a 	mov	r6,r4
   20b88:	180b883a 	mov	r5,r3
   20b8c:	1009883a 	mov	r4,r2
   20b90:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
            }
            i--;
   20b94:	e0bfee17 	ldw	r2,-72(fp)
   20b98:	10bfffc4 	addi	r2,r2,-1
   20b9c:	e0bfee15 	stw	r2,-72(fp)
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zs);
   20ba0:	01401904 	movi	r5,100
   20ba4:	e13fee17 	ldw	r4,-72(fp)
   20ba8:	0042b540 	call	42b54 <__mulsi3>
   20bac:	1007883a 	mov	r3,r2
   20bb0:	e0bffc17 	ldw	r2,-16(fp)
   20bb4:	10e1883a 	add	r16,r2,r3
   20bb8:	01402504 	movi	r5,148
   20bbc:	e13fee17 	ldw	r4,-72(fp)
   20bc0:	0042b540 	call	42b54 <__mulsi3>
   20bc4:	1007883a 	mov	r3,r2
   20bc8:	e0bffe17 	ldw	r2,-8(fp)
   20bcc:	10c5883a 	add	r2,r2,r3
   20bd0:	e0ffef04 	addi	r3,fp,-68
   20bd4:	180d883a 	mov	r6,r3
   20bd8:	100b883a 	mov	r5,r2
   20bdc:	8009883a 	mov	r4,r16
   20be0:	001ff840 	call	1ff84 <secp256k1_ge_set_gej_zinv>
        *globalz = a[i].z;
        r[i].infinity = 0;
        zs = zr[i];

        /* Work our way backwards, using the z-ratios to scale the x/y values. */
        while (i > 0) {
   20be4:	e0bfee17 	ldw	r2,-72(fp)
   20be8:	103fda1e 	bne	r2,zero,20b54 <__alt_mem_epcs_flash_controller+0xfe00fb54>
            }
            i--;
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zs);
        }
    }
}
   20bec:	0001883a 	nop
   20bf0:	e6ffff04 	addi	sp,fp,-4
   20bf4:	dfc00217 	ldw	ra,8(sp)
   20bf8:	df000117 	ldw	fp,4(sp)
   20bfc:	dc000017 	ldw	r16,0(sp)
   20c00:	dec00304 	addi	sp,sp,12
   20c04:	f800283a 	ret

00020c08 <secp256k1_gej_set_infinity>:

static void secp256k1_gej_set_infinity(secp256k1_gej *r) {
   20c08:	defffd04 	addi	sp,sp,-12
   20c0c:	dfc00215 	stw	ra,8(sp)
   20c10:	df000115 	stw	fp,4(sp)
   20c14:	df000104 	addi	fp,sp,4
   20c18:	e13fff15 	stw	r4,-4(fp)
    r->infinity = 1;
   20c1c:	e0bfff17 	ldw	r2,-4(fp)
   20c20:	00c00044 	movi	r3,1
   20c24:	10c02415 	stw	r3,144(r2)
    secp256k1_fe_set_int(&r->x, 0);
   20c28:	e0bfff17 	ldw	r2,-4(fp)
   20c2c:	000b883a 	mov	r5,zero
   20c30:	1009883a 	mov	r4,r2
   20c34:	00135c80 	call	135c8 <secp256k1_fe_set_int>
    secp256k1_fe_set_int(&r->y, 0);
   20c38:	e0bfff17 	ldw	r2,-4(fp)
   20c3c:	10800c04 	addi	r2,r2,48
   20c40:	000b883a 	mov	r5,zero
   20c44:	1009883a 	mov	r4,r2
   20c48:	00135c80 	call	135c8 <secp256k1_fe_set_int>
    secp256k1_fe_set_int(&r->z, 0);
   20c4c:	e0bfff17 	ldw	r2,-4(fp)
   20c50:	10801804 	addi	r2,r2,96
   20c54:	000b883a 	mov	r5,zero
   20c58:	1009883a 	mov	r4,r2
   20c5c:	00135c80 	call	135c8 <secp256k1_fe_set_int>
}
   20c60:	0001883a 	nop
   20c64:	e037883a 	mov	sp,fp
   20c68:	dfc00117 	ldw	ra,4(sp)
   20c6c:	df000017 	ldw	fp,0(sp)
   20c70:	dec00204 	addi	sp,sp,8
   20c74:	f800283a 	ret

00020c78 <secp256k1_gej_clear>:

static void secp256k1_gej_clear(secp256k1_gej *r) {
   20c78:	defffd04 	addi	sp,sp,-12
   20c7c:	dfc00215 	stw	ra,8(sp)
   20c80:	df000115 	stw	fp,4(sp)
   20c84:	df000104 	addi	fp,sp,4
   20c88:	e13fff15 	stw	r4,-4(fp)
    r->infinity = 0;
   20c8c:	e0bfff17 	ldw	r2,-4(fp)
   20c90:	10002415 	stw	zero,144(r2)
    secp256k1_fe_clear(&r->x);
   20c94:	e0bfff17 	ldw	r2,-4(fp)
   20c98:	1009883a 	mov	r4,r2
   20c9c:	00138500 	call	13850 <secp256k1_fe_clear>
    secp256k1_fe_clear(&r->y);
   20ca0:	e0bfff17 	ldw	r2,-4(fp)
   20ca4:	10800c04 	addi	r2,r2,48
   20ca8:	1009883a 	mov	r4,r2
   20cac:	00138500 	call	13850 <secp256k1_fe_clear>
    secp256k1_fe_clear(&r->z);
   20cb0:	e0bfff17 	ldw	r2,-4(fp)
   20cb4:	10801804 	addi	r2,r2,96
   20cb8:	1009883a 	mov	r4,r2
   20cbc:	00138500 	call	13850 <secp256k1_fe_clear>
}
   20cc0:	0001883a 	nop
   20cc4:	e037883a 	mov	sp,fp
   20cc8:	dfc00117 	ldw	ra,4(sp)
   20ccc:	df000017 	ldw	fp,0(sp)
   20cd0:	dec00204 	addi	sp,sp,8
   20cd4:	f800283a 	ret

00020cd8 <secp256k1_ge_clear>:

static void secp256k1_ge_clear(secp256k1_ge *r) {
   20cd8:	defffd04 	addi	sp,sp,-12
   20cdc:	dfc00215 	stw	ra,8(sp)
   20ce0:	df000115 	stw	fp,4(sp)
   20ce4:	df000104 	addi	fp,sp,4
   20ce8:	e13fff15 	stw	r4,-4(fp)
    r->infinity = 0;
   20cec:	e0bfff17 	ldw	r2,-4(fp)
   20cf0:	10001815 	stw	zero,96(r2)
    secp256k1_fe_clear(&r->x);
   20cf4:	e0bfff17 	ldw	r2,-4(fp)
   20cf8:	1009883a 	mov	r4,r2
   20cfc:	00138500 	call	13850 <secp256k1_fe_clear>
    secp256k1_fe_clear(&r->y);
   20d00:	e0bfff17 	ldw	r2,-4(fp)
   20d04:	10800c04 	addi	r2,r2,48
   20d08:	1009883a 	mov	r4,r2
   20d0c:	00138500 	call	13850 <secp256k1_fe_clear>
}
   20d10:	0001883a 	nop
   20d14:	e037883a 	mov	sp,fp
   20d18:	dfc00117 	ldw	ra,4(sp)
   20d1c:	df000017 	ldw	fp,0(sp)
   20d20:	dec00204 	addi	sp,sp,8
   20d24:	f800283a 	ret

00020d28 <secp256k1_ge_set_xquad>:

static int secp256k1_ge_set_xquad(secp256k1_ge *r, const secp256k1_fe *x) {
   20d28:	deffd804 	addi	sp,sp,-160
   20d2c:	dfc02715 	stw	ra,156(sp)
   20d30:	df002615 	stw	fp,152(sp)
   20d34:	df002604 	addi	fp,sp,152
   20d38:	e13ffe15 	stw	r4,-8(fp)
   20d3c:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe x2, x3, c;
    r->x = *x;
   20d40:	e0bffe17 	ldw	r2,-8(fp)
   20d44:	e0ffff17 	ldw	r3,-4(fp)
   20d48:	19000017 	ldw	r4,0(r3)
   20d4c:	11000015 	stw	r4,0(r2)
   20d50:	19000117 	ldw	r4,4(r3)
   20d54:	11000115 	stw	r4,4(r2)
   20d58:	19000217 	ldw	r4,8(r3)
   20d5c:	11000215 	stw	r4,8(r2)
   20d60:	19000317 	ldw	r4,12(r3)
   20d64:	11000315 	stw	r4,12(r2)
   20d68:	19000417 	ldw	r4,16(r3)
   20d6c:	11000415 	stw	r4,16(r2)
   20d70:	19000517 	ldw	r4,20(r3)
   20d74:	11000515 	stw	r4,20(r2)
   20d78:	19000617 	ldw	r4,24(r3)
   20d7c:	11000615 	stw	r4,24(r2)
   20d80:	19000717 	ldw	r4,28(r3)
   20d84:	11000715 	stw	r4,28(r2)
   20d88:	19000817 	ldw	r4,32(r3)
   20d8c:	11000815 	stw	r4,32(r2)
   20d90:	19000917 	ldw	r4,36(r3)
   20d94:	11000915 	stw	r4,36(r2)
   20d98:	19000a17 	ldw	r4,40(r3)
   20d9c:	11000a15 	stw	r4,40(r2)
   20da0:	18c00b17 	ldw	r3,44(r3)
   20da4:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_sqr(&x2, x);
   20da8:	e17fff17 	ldw	r5,-4(fp)
   20dac:	e13fda04 	addi	r4,fp,-152
   20db0:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x3, x, &x2);
   20db4:	e0bfe604 	addi	r2,fp,-104
   20db8:	e1bfda04 	addi	r6,fp,-152
   20dbc:	e17fff17 	ldw	r5,-4(fp)
   20dc0:	1009883a 	mov	r4,r2
   20dc4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    r->infinity = 0;
   20dc8:	e0bffe17 	ldw	r2,-8(fp)
   20dcc:	10001815 	stw	zero,96(r2)
    secp256k1_fe_set_int(&c, 7);
   20dd0:	e0bff204 	addi	r2,fp,-56
   20dd4:	014001c4 	movi	r5,7
   20dd8:	1009883a 	mov	r4,r2
   20ddc:	00135c80 	call	135c8 <secp256k1_fe_set_int>
    secp256k1_fe_add(&c, &x3);
   20de0:	e0ffe604 	addi	r3,fp,-104
   20de4:	e0bff204 	addi	r2,fp,-56
   20de8:	180b883a 	mov	r5,r3
   20dec:	1009883a 	mov	r4,r2
   20df0:	00142340 	call	14234 <secp256k1_fe_add>
    return secp256k1_fe_sqrt(&r->y, &c);
   20df4:	e0bffe17 	ldw	r2,-8(fp)
   20df8:	10800c04 	addi	r2,r2,48
   20dfc:	e0fff204 	addi	r3,fp,-56
   20e00:	180b883a 	mov	r5,r3
   20e04:	1009883a 	mov	r4,r2
   20e08:	001ebfc0 	call	1ebfc <secp256k1_fe_sqrt>
}
   20e0c:	e037883a 	mov	sp,fp
   20e10:	dfc00117 	ldw	ra,4(sp)
   20e14:	df000017 	ldw	fp,0(sp)
   20e18:	dec00204 	addi	sp,sp,8
   20e1c:	f800283a 	ret

00020e20 <secp256k1_ge_set_xo_var>:

static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {
   20e20:	defffb04 	addi	sp,sp,-20
   20e24:	dfc00415 	stw	ra,16(sp)
   20e28:	df000315 	stw	fp,12(sp)
   20e2c:	df000304 	addi	fp,sp,12
   20e30:	e13ffd15 	stw	r4,-12(fp)
   20e34:	e17ffe15 	stw	r5,-8(fp)
   20e38:	e1bfff15 	stw	r6,-4(fp)
    if (!secp256k1_ge_set_xquad(r, x)) {
   20e3c:	e17ffe17 	ldw	r5,-8(fp)
   20e40:	e13ffd17 	ldw	r4,-12(fp)
   20e44:	0020d280 	call	20d28 <secp256k1_ge_set_xquad>
   20e48:	1000021e 	bne	r2,zero,20e54 <secp256k1_ge_set_xo_var+0x34>
        return 0;
   20e4c:	0005883a 	mov	r2,zero
   20e50:	00001406 	br	20ea4 <secp256k1_ge_set_xo_var+0x84>
    }
    secp256k1_fe_normalize_var(&r->y);
   20e54:	e0bffd17 	ldw	r2,-12(fp)
   20e58:	10800c04 	addi	r2,r2,48
   20e5c:	1009883a 	mov	r4,r2
   20e60:	00127a80 	call	127a8 <secp256k1_fe_normalize_var>
    if (secp256k1_fe_is_odd(&r->y) != odd) {
   20e64:	e0bffd17 	ldw	r2,-12(fp)
   20e68:	10800c04 	addi	r2,r2,48
   20e6c:	1009883a 	mov	r4,r2
   20e70:	00137cc0 	call	137cc <secp256k1_fe_is_odd>
   20e74:	1007883a 	mov	r3,r2
   20e78:	e0bfff17 	ldw	r2,-4(fp)
   20e7c:	18800826 	beq	r3,r2,20ea0 <secp256k1_ge_set_xo_var+0x80>
        secp256k1_fe_negate(&r->y, &r->y, 1);
   20e80:	e0bffd17 	ldw	r2,-12(fp)
   20e84:	10c00c04 	addi	r3,r2,48
   20e88:	e0bffd17 	ldw	r2,-12(fp)
   20e8c:	10800c04 	addi	r2,r2,48
   20e90:	01800044 	movi	r6,1
   20e94:	100b883a 	mov	r5,r2
   20e98:	1809883a 	mov	r4,r3
   20e9c:	0013e240 	call	13e24 <secp256k1_fe_negate>
    }
    return 1;
   20ea0:	00800044 	movi	r2,1

}
   20ea4:	e037883a 	mov	sp,fp
   20ea8:	dfc00117 	ldw	ra,4(sp)
   20eac:	df000017 	ldw	fp,0(sp)
   20eb0:	dec00204 	addi	sp,sp,8
   20eb4:	f800283a 	ret

00020eb8 <secp256k1_gej_set_ge>:

static void secp256k1_gej_set_ge(secp256k1_gej *r, const secp256k1_ge *a) {
   20eb8:	defffc04 	addi	sp,sp,-16
   20ebc:	dfc00315 	stw	ra,12(sp)
   20ec0:	df000215 	stw	fp,8(sp)
   20ec4:	df000204 	addi	fp,sp,8
   20ec8:	e13ffe15 	stw	r4,-8(fp)
   20ecc:	e17fff15 	stw	r5,-4(fp)
   r->infinity = a->infinity;
   20ed0:	e0bfff17 	ldw	r2,-4(fp)
   20ed4:	10c01817 	ldw	r3,96(r2)
   20ed8:	e0bffe17 	ldw	r2,-8(fp)
   20edc:	10c02415 	stw	r3,144(r2)
   r->x = a->x;
   20ee0:	e0bffe17 	ldw	r2,-8(fp)
   20ee4:	e0ffff17 	ldw	r3,-4(fp)
   20ee8:	19000017 	ldw	r4,0(r3)
   20eec:	11000015 	stw	r4,0(r2)
   20ef0:	19000117 	ldw	r4,4(r3)
   20ef4:	11000115 	stw	r4,4(r2)
   20ef8:	19000217 	ldw	r4,8(r3)
   20efc:	11000215 	stw	r4,8(r2)
   20f00:	19000317 	ldw	r4,12(r3)
   20f04:	11000315 	stw	r4,12(r2)
   20f08:	19000417 	ldw	r4,16(r3)
   20f0c:	11000415 	stw	r4,16(r2)
   20f10:	19000517 	ldw	r4,20(r3)
   20f14:	11000515 	stw	r4,20(r2)
   20f18:	19000617 	ldw	r4,24(r3)
   20f1c:	11000615 	stw	r4,24(r2)
   20f20:	19000717 	ldw	r4,28(r3)
   20f24:	11000715 	stw	r4,28(r2)
   20f28:	19000817 	ldw	r4,32(r3)
   20f2c:	11000815 	stw	r4,32(r2)
   20f30:	19000917 	ldw	r4,36(r3)
   20f34:	11000915 	stw	r4,36(r2)
   20f38:	19000a17 	ldw	r4,40(r3)
   20f3c:	11000a15 	stw	r4,40(r2)
   20f40:	18c00b17 	ldw	r3,44(r3)
   20f44:	10c00b15 	stw	r3,44(r2)
   r->y = a->y;
   20f48:	e0bffe17 	ldw	r2,-8(fp)
   20f4c:	e0ffff17 	ldw	r3,-4(fp)
   20f50:	19000c17 	ldw	r4,48(r3)
   20f54:	11000c15 	stw	r4,48(r2)
   20f58:	19000d17 	ldw	r4,52(r3)
   20f5c:	11000d15 	stw	r4,52(r2)
   20f60:	19000e17 	ldw	r4,56(r3)
   20f64:	11000e15 	stw	r4,56(r2)
   20f68:	19000f17 	ldw	r4,60(r3)
   20f6c:	11000f15 	stw	r4,60(r2)
   20f70:	19001017 	ldw	r4,64(r3)
   20f74:	11001015 	stw	r4,64(r2)
   20f78:	19001117 	ldw	r4,68(r3)
   20f7c:	11001115 	stw	r4,68(r2)
   20f80:	19001217 	ldw	r4,72(r3)
   20f84:	11001215 	stw	r4,72(r2)
   20f88:	19001317 	ldw	r4,76(r3)
   20f8c:	11001315 	stw	r4,76(r2)
   20f90:	19001417 	ldw	r4,80(r3)
   20f94:	11001415 	stw	r4,80(r2)
   20f98:	19001517 	ldw	r4,84(r3)
   20f9c:	11001515 	stw	r4,84(r2)
   20fa0:	19001617 	ldw	r4,88(r3)
   20fa4:	11001615 	stw	r4,88(r2)
   20fa8:	18c01717 	ldw	r3,92(r3)
   20fac:	10c01715 	stw	r3,92(r2)
   secp256k1_fe_set_int(&r->z, 1);
   20fb0:	e0bffe17 	ldw	r2,-8(fp)
   20fb4:	10801804 	addi	r2,r2,96
   20fb8:	01400044 	movi	r5,1
   20fbc:	1009883a 	mov	r4,r2
   20fc0:	00135c80 	call	135c8 <secp256k1_fe_set_int>
}
   20fc4:	0001883a 	nop
   20fc8:	e037883a 	mov	sp,fp
   20fcc:	dfc00117 	ldw	ra,4(sp)
   20fd0:	df000017 	ldw	fp,0(sp)
   20fd4:	dec00204 	addi	sp,sp,8
   20fd8:	f800283a 	ret

00020fdc <secp256k1_gej_eq_x_var>:

static int secp256k1_gej_eq_x_var(const secp256k1_fe *x, const secp256k1_gej *a) {
   20fdc:	deffe304 	addi	sp,sp,-116
   20fe0:	dfc01c15 	stw	ra,112(sp)
   20fe4:	df001b15 	stw	fp,108(sp)
   20fe8:	df001b04 	addi	fp,sp,108
   20fec:	e13ffe15 	stw	r4,-8(fp)
   20ff0:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe r, r2;
    VERIFY_CHECK(!a->infinity);
   20ff4:	e0bfff17 	ldw	r2,-4(fp)
   20ff8:	10802417 	ldw	r2,144(r2)
   20ffc:	1004c03a 	cmpne	r2,r2,zero
   21000:	10803fcc 	andi	r2,r2,255
   21004:	10000d26 	beq	r2,zero,2103c <secp256k1_gej_eq_x_var+0x60>
   21008:	d0a01617 	ldw	r2,-32680(gp)
   2100c:	10c00317 	ldw	r3,12(r2)
   21010:	008001b4 	movhi	r2,6
   21014:	10af4e04 	addi	r2,r2,-17096
   21018:	d8800015 	stw	r2,0(sp)
   2101c:	01c03184 	movi	r7,198
   21020:	018001b4 	movhi	r6,6
   21024:	31af4504 	addi	r6,r6,-17132
   21028:	014001b4 	movhi	r5,6
   2102c:	296b3804 	addi	r5,r5,-21280
   21030:	1809883a 	mov	r4,r3
   21034:	00452600 	call	45260 <fprintf>
   21038:	00450340 	call	45034 <abort>
    secp256k1_fe_sqr(&r, &a->z); secp256k1_fe_mul(&r, &r, x);
   2103c:	e0bfff17 	ldw	r2,-4(fp)
   21040:	10801804 	addi	r2,r2,96
   21044:	100b883a 	mov	r5,r2
   21048:	e13fe604 	addi	r4,fp,-104
   2104c:	001e3440 	call	1e344 <secp256k1_fe_sqr>
   21050:	e1bffe17 	ldw	r6,-8(fp)
   21054:	e17fe604 	addi	r5,fp,-104
   21058:	e13fe604 	addi	r4,fp,-104
   2105c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    r2 = a->x; secp256k1_fe_normalize_weak(&r2);
   21060:	e0bfff17 	ldw	r2,-4(fp)
   21064:	10c00017 	ldw	r3,0(r2)
   21068:	e0fff215 	stw	r3,-56(fp)
   2106c:	10c00117 	ldw	r3,4(r2)
   21070:	e0fff315 	stw	r3,-52(fp)
   21074:	10c00217 	ldw	r3,8(r2)
   21078:	e0fff415 	stw	r3,-48(fp)
   2107c:	10c00317 	ldw	r3,12(r2)
   21080:	e0fff515 	stw	r3,-44(fp)
   21084:	10c00417 	ldw	r3,16(r2)
   21088:	e0fff615 	stw	r3,-40(fp)
   2108c:	10c00517 	ldw	r3,20(r2)
   21090:	e0fff715 	stw	r3,-36(fp)
   21094:	10c00617 	ldw	r3,24(r2)
   21098:	e0fff815 	stw	r3,-32(fp)
   2109c:	10c00717 	ldw	r3,28(r2)
   210a0:	e0fff915 	stw	r3,-28(fp)
   210a4:	10c00817 	ldw	r3,32(r2)
   210a8:	e0fffa15 	stw	r3,-24(fp)
   210ac:	10c00917 	ldw	r3,36(r2)
   210b0:	e0fffb15 	stw	r3,-20(fp)
   210b4:	10c00a17 	ldw	r3,40(r2)
   210b8:	e0fffc15 	stw	r3,-16(fp)
   210bc:	10800b17 	ldw	r2,44(r2)
   210c0:	e0bffd15 	stw	r2,-12(fp)
   210c4:	e0bff204 	addi	r2,fp,-56
   210c8:	1009883a 	mov	r4,r2
   210cc:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    return secp256k1_fe_equal_var(&r, &r2);
   210d0:	e0bff204 	addi	r2,fp,-56
   210d4:	100b883a 	mov	r5,r2
   210d8:	e13fe604 	addi	r4,fp,-104
   210dc:	001ebac0 	call	1ebac <secp256k1_fe_equal_var>
}
   210e0:	e037883a 	mov	sp,fp
   210e4:	dfc00117 	ldw	ra,4(sp)
   210e8:	df000017 	ldw	fp,0(sp)
   210ec:	dec00204 	addi	sp,sp,8
   210f0:	f800283a 	ret

000210f4 <secp256k1_gej_neg>:

static void secp256k1_gej_neg(secp256k1_gej *r, const secp256k1_gej *a) {
   210f4:	defffc04 	addi	sp,sp,-16
   210f8:	dfc00315 	stw	ra,12(sp)
   210fc:	df000215 	stw	fp,8(sp)
   21100:	df000204 	addi	fp,sp,8
   21104:	e13ffe15 	stw	r4,-8(fp)
   21108:	e17fff15 	stw	r5,-4(fp)
    r->infinity = a->infinity;
   2110c:	e0bfff17 	ldw	r2,-4(fp)
   21110:	10c02417 	ldw	r3,144(r2)
   21114:	e0bffe17 	ldw	r2,-8(fp)
   21118:	10c02415 	stw	r3,144(r2)
    r->x = a->x;
   2111c:	e0bffe17 	ldw	r2,-8(fp)
   21120:	e0ffff17 	ldw	r3,-4(fp)
   21124:	19000017 	ldw	r4,0(r3)
   21128:	11000015 	stw	r4,0(r2)
   2112c:	19000117 	ldw	r4,4(r3)
   21130:	11000115 	stw	r4,4(r2)
   21134:	19000217 	ldw	r4,8(r3)
   21138:	11000215 	stw	r4,8(r2)
   2113c:	19000317 	ldw	r4,12(r3)
   21140:	11000315 	stw	r4,12(r2)
   21144:	19000417 	ldw	r4,16(r3)
   21148:	11000415 	stw	r4,16(r2)
   2114c:	19000517 	ldw	r4,20(r3)
   21150:	11000515 	stw	r4,20(r2)
   21154:	19000617 	ldw	r4,24(r3)
   21158:	11000615 	stw	r4,24(r2)
   2115c:	19000717 	ldw	r4,28(r3)
   21160:	11000715 	stw	r4,28(r2)
   21164:	19000817 	ldw	r4,32(r3)
   21168:	11000815 	stw	r4,32(r2)
   2116c:	19000917 	ldw	r4,36(r3)
   21170:	11000915 	stw	r4,36(r2)
   21174:	19000a17 	ldw	r4,40(r3)
   21178:	11000a15 	stw	r4,40(r2)
   2117c:	18c00b17 	ldw	r3,44(r3)
   21180:	10c00b15 	stw	r3,44(r2)
    r->y = a->y;
   21184:	e0bffe17 	ldw	r2,-8(fp)
   21188:	e0ffff17 	ldw	r3,-4(fp)
   2118c:	19000c17 	ldw	r4,48(r3)
   21190:	11000c15 	stw	r4,48(r2)
   21194:	19000d17 	ldw	r4,52(r3)
   21198:	11000d15 	stw	r4,52(r2)
   2119c:	19000e17 	ldw	r4,56(r3)
   211a0:	11000e15 	stw	r4,56(r2)
   211a4:	19000f17 	ldw	r4,60(r3)
   211a8:	11000f15 	stw	r4,60(r2)
   211ac:	19001017 	ldw	r4,64(r3)
   211b0:	11001015 	stw	r4,64(r2)
   211b4:	19001117 	ldw	r4,68(r3)
   211b8:	11001115 	stw	r4,68(r2)
   211bc:	19001217 	ldw	r4,72(r3)
   211c0:	11001215 	stw	r4,72(r2)
   211c4:	19001317 	ldw	r4,76(r3)
   211c8:	11001315 	stw	r4,76(r2)
   211cc:	19001417 	ldw	r4,80(r3)
   211d0:	11001415 	stw	r4,80(r2)
   211d4:	19001517 	ldw	r4,84(r3)
   211d8:	11001515 	stw	r4,84(r2)
   211dc:	19001617 	ldw	r4,88(r3)
   211e0:	11001615 	stw	r4,88(r2)
   211e4:	18c01717 	ldw	r3,92(r3)
   211e8:	10c01715 	stw	r3,92(r2)
    r->z = a->z;
   211ec:	e0bffe17 	ldw	r2,-8(fp)
   211f0:	e0ffff17 	ldw	r3,-4(fp)
   211f4:	19001817 	ldw	r4,96(r3)
   211f8:	11001815 	stw	r4,96(r2)
   211fc:	19001917 	ldw	r4,100(r3)
   21200:	11001915 	stw	r4,100(r2)
   21204:	19001a17 	ldw	r4,104(r3)
   21208:	11001a15 	stw	r4,104(r2)
   2120c:	19001b17 	ldw	r4,108(r3)
   21210:	11001b15 	stw	r4,108(r2)
   21214:	19001c17 	ldw	r4,112(r3)
   21218:	11001c15 	stw	r4,112(r2)
   2121c:	19001d17 	ldw	r4,116(r3)
   21220:	11001d15 	stw	r4,116(r2)
   21224:	19001e17 	ldw	r4,120(r3)
   21228:	11001e15 	stw	r4,120(r2)
   2122c:	19001f17 	ldw	r4,124(r3)
   21230:	11001f15 	stw	r4,124(r2)
   21234:	19002017 	ldw	r4,128(r3)
   21238:	11002015 	stw	r4,128(r2)
   2123c:	19002117 	ldw	r4,132(r3)
   21240:	11002115 	stw	r4,132(r2)
   21244:	19002217 	ldw	r4,136(r3)
   21248:	11002215 	stw	r4,136(r2)
   2124c:	18c02317 	ldw	r3,140(r3)
   21250:	10c02315 	stw	r3,140(r2)
    secp256k1_fe_normalize_weak(&r->y);
   21254:	e0bffe17 	ldw	r2,-8(fp)
   21258:	10800c04 	addi	r2,r2,48
   2125c:	1009883a 	mov	r4,r2
   21260:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    secp256k1_fe_negate(&r->y, &r->y, 1);
   21264:	e0bffe17 	ldw	r2,-8(fp)
   21268:	10c00c04 	addi	r3,r2,48
   2126c:	e0bffe17 	ldw	r2,-8(fp)
   21270:	10800c04 	addi	r2,r2,48
   21274:	01800044 	movi	r6,1
   21278:	100b883a 	mov	r5,r2
   2127c:	1809883a 	mov	r4,r3
   21280:	0013e240 	call	13e24 <secp256k1_fe_negate>
}
   21284:	0001883a 	nop
   21288:	e037883a 	mov	sp,fp
   2128c:	dfc00117 	ldw	ra,4(sp)
   21290:	df000017 	ldw	fp,0(sp)
   21294:	dec00204 	addi	sp,sp,8
   21298:	f800283a 	ret

0002129c <secp256k1_gej_is_infinity>:

static int secp256k1_gej_is_infinity(const secp256k1_gej *a) {
   2129c:	defffe04 	addi	sp,sp,-8
   212a0:	df000115 	stw	fp,4(sp)
   212a4:	df000104 	addi	fp,sp,4
   212a8:	e13fff15 	stw	r4,-4(fp)
    return a->infinity;
   212ac:	e0bfff17 	ldw	r2,-4(fp)
   212b0:	10802417 	ldw	r2,144(r2)
}
   212b4:	e037883a 	mov	sp,fp
   212b8:	df000017 	ldw	fp,0(sp)
   212bc:	dec00104 	addi	sp,sp,4
   212c0:	f800283a 	ret

000212c4 <secp256k1_gej_is_valid_var>:

static int secp256k1_gej_is_valid_var(const secp256k1_gej *a) {
   212c4:	deffcd04 	addi	sp,sp,-204
   212c8:	dfc03215 	stw	ra,200(sp)
   212cc:	df003115 	stw	fp,196(sp)
   212d0:	df003104 	addi	fp,sp,196
   212d4:	e13fff15 	stw	r4,-4(fp)
    secp256k1_fe y2, x3, z2, z6;
    if (a->infinity) {
   212d8:	e0bfff17 	ldw	r2,-4(fp)
   212dc:	10802417 	ldw	r2,144(r2)
   212e0:	10000226 	beq	r2,zero,212ec <secp256k1_gej_is_valid_var+0x28>
        return 0;
   212e4:	0005883a 	mov	r2,zero
   212e8:	00003306 	br	213b8 <secp256k1_gej_is_valid_var+0xf4>
    /** y^2 = x^3 + 7
     *  (Y/Z^3)^2 = (X/Z^2)^3 + 7
     *  Y^2 / Z^6 = X^3 / Z^6 + 7
     *  Y^2 = X^3 + 7*Z^6
     */
    secp256k1_fe_sqr(&y2, &a->y);
   212ec:	e0bfff17 	ldw	r2,-4(fp)
   212f0:	10800c04 	addi	r2,r2,48
   212f4:	100b883a 	mov	r5,r2
   212f8:	e13fcf04 	addi	r4,fp,-196
   212fc:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);
   21300:	e0ffff17 	ldw	r3,-4(fp)
   21304:	e0bfdb04 	addi	r2,fp,-148
   21308:	180b883a 	mov	r5,r3
   2130c:	1009883a 	mov	r4,r2
   21310:	001e3440 	call	1e344 <secp256k1_fe_sqr>
   21314:	e13fff17 	ldw	r4,-4(fp)
   21318:	e0ffdb04 	addi	r3,fp,-148
   2131c:	e0bfdb04 	addi	r2,fp,-148
   21320:	200d883a 	mov	r6,r4
   21324:	180b883a 	mov	r5,r3
   21328:	1009883a 	mov	r4,r2
   2132c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_sqr(&z2, &a->z);
   21330:	e0bfff17 	ldw	r2,-4(fp)
   21334:	10c01804 	addi	r3,r2,96
   21338:	e0bfe704 	addi	r2,fp,-100
   2133c:	180b883a 	mov	r5,r3
   21340:	1009883a 	mov	r4,r2
   21344:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&z6, &z2); secp256k1_fe_mul(&z6, &z6, &z2);
   21348:	e0ffe704 	addi	r3,fp,-100
   2134c:	e0bff304 	addi	r2,fp,-52
   21350:	180b883a 	mov	r5,r3
   21354:	1009883a 	mov	r4,r2
   21358:	001e3440 	call	1e344 <secp256k1_fe_sqr>
   2135c:	e13fe704 	addi	r4,fp,-100
   21360:	e0fff304 	addi	r3,fp,-52
   21364:	e0bff304 	addi	r2,fp,-52
   21368:	200d883a 	mov	r6,r4
   2136c:	180b883a 	mov	r5,r3
   21370:	1009883a 	mov	r4,r2
   21374:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul_int(&z6, 7);
   21378:	e0bff304 	addi	r2,fp,-52
   2137c:	014001c4 	movi	r5,7
   21380:	1009883a 	mov	r4,r2
   21384:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_add(&x3, &z6);
   21388:	e0fff304 	addi	r3,fp,-52
   2138c:	e0bfdb04 	addi	r2,fp,-148
   21390:	180b883a 	mov	r5,r3
   21394:	1009883a 	mov	r4,r2
   21398:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_normalize_weak(&x3);
   2139c:	e0bfdb04 	addi	r2,fp,-148
   213a0:	1009883a 	mov	r4,r2
   213a4:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    return secp256k1_fe_equal_var(&y2, &x3);
   213a8:	e0bfdb04 	addi	r2,fp,-148
   213ac:	100b883a 	mov	r5,r2
   213b0:	e13fcf04 	addi	r4,fp,-196
   213b4:	001ebac0 	call	1ebac <secp256k1_fe_equal_var>
}
   213b8:	e037883a 	mov	sp,fp
   213bc:	dfc00117 	ldw	ra,4(sp)
   213c0:	df000017 	ldw	fp,0(sp)
   213c4:	dec00204 	addi	sp,sp,8
   213c8:	f800283a 	ret

000213cc <secp256k1_ge_is_valid_var>:

static int secp256k1_ge_is_valid_var(const secp256k1_ge *a) {
   213cc:	deffd904 	addi	sp,sp,-156
   213d0:	dfc02615 	stw	ra,152(sp)
   213d4:	df002515 	stw	fp,148(sp)
   213d8:	df002504 	addi	fp,sp,148
   213dc:	e13fff15 	stw	r4,-4(fp)
    secp256k1_fe y2, x3, c;
    if (a->infinity) {
   213e0:	e0bfff17 	ldw	r2,-4(fp)
   213e4:	10801817 	ldw	r2,96(r2)
   213e8:	10000226 	beq	r2,zero,213f4 <secp256k1_ge_is_valid_var+0x28>
        return 0;
   213ec:	0005883a 	mov	r2,zero
   213f0:	00002106 	br	21478 <secp256k1_ge_is_valid_var+0xac>
    }
    /* y^2 = x^3 + 7 */
    secp256k1_fe_sqr(&y2, &a->y);
   213f4:	e0bfff17 	ldw	r2,-4(fp)
   213f8:	10800c04 	addi	r2,r2,48
   213fc:	100b883a 	mov	r5,r2
   21400:	e13fdb04 	addi	r4,fp,-148
   21404:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);
   21408:	e0ffff17 	ldw	r3,-4(fp)
   2140c:	e0bfe704 	addi	r2,fp,-100
   21410:	180b883a 	mov	r5,r3
   21414:	1009883a 	mov	r4,r2
   21418:	001e3440 	call	1e344 <secp256k1_fe_sqr>
   2141c:	e13fff17 	ldw	r4,-4(fp)
   21420:	e0ffe704 	addi	r3,fp,-100
   21424:	e0bfe704 	addi	r2,fp,-100
   21428:	200d883a 	mov	r6,r4
   2142c:	180b883a 	mov	r5,r3
   21430:	1009883a 	mov	r4,r2
   21434:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_set_int(&c, 7);
   21438:	e0bff304 	addi	r2,fp,-52
   2143c:	014001c4 	movi	r5,7
   21440:	1009883a 	mov	r4,r2
   21444:	00135c80 	call	135c8 <secp256k1_fe_set_int>
    secp256k1_fe_add(&x3, &c);
   21448:	e0fff304 	addi	r3,fp,-52
   2144c:	e0bfe704 	addi	r2,fp,-100
   21450:	180b883a 	mov	r5,r3
   21454:	1009883a 	mov	r4,r2
   21458:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_normalize_weak(&x3);
   2145c:	e0bfe704 	addi	r2,fp,-100
   21460:	1009883a 	mov	r4,r2
   21464:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    return secp256k1_fe_equal_var(&y2, &x3);
   21468:	e0bfe704 	addi	r2,fp,-100
   2146c:	100b883a 	mov	r5,r2
   21470:	e13fdb04 	addi	r4,fp,-148
   21474:	001ebac0 	call	1ebac <secp256k1_fe_equal_var>
}
   21478:	e037883a 	mov	sp,fp
   2147c:	dfc00117 	ldw	ra,4(sp)
   21480:	df000017 	ldw	fp,0(sp)
   21484:	dec00204 	addi	sp,sp,8
   21488:	f800283a 	ret

0002148c <secp256k1_gej_double_var>:

static void secp256k1_gej_double_var(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {
   2148c:	deffcb04 	addi	sp,sp,-212
   21490:	dfc03415 	stw	ra,208(sp)
   21494:	df003315 	stw	fp,204(sp)
   21498:	df003304 	addi	fp,sp,204
   2149c:	e13ffd15 	stw	r4,-12(fp)
   214a0:	e17ffe15 	stw	r5,-8(fp)
   214a4:	e1bfff15 	stw	r6,-4(fp)
     *  a fault attack, it is possible for y to be 0. This happens for y^2 = x^3 + 6,
     *  since -6 does have a cube root mod p. For this point, this function will not set
     *  the infinity flag even though the point doubles to infinity, and the result
     *  point will be gibberish (z = 0 but infinity = 0).
     */
    r->infinity = a->infinity;
   214a8:	e0bffe17 	ldw	r2,-8(fp)
   214ac:	10c02417 	ldw	r3,144(r2)
   214b0:	e0bffd17 	ldw	r2,-12(fp)
   214b4:	10c02415 	stw	r3,144(r2)
    if (r->infinity) {
   214b8:	e0bffd17 	ldw	r2,-12(fp)
   214bc:	10802417 	ldw	r2,144(r2)
   214c0:	10000626 	beq	r2,zero,214dc <secp256k1_gej_double_var+0x50>
        if (rzr != NULL) {
   214c4:	e0bfff17 	ldw	r2,-4(fp)
   214c8:	1000a426 	beq	r2,zero,2175c <secp256k1_gej_double_var+0x2d0>
            secp256k1_fe_set_int(rzr, 1);
   214cc:	01400044 	movi	r5,1
   214d0:	e13fff17 	ldw	r4,-4(fp)
   214d4:	00135c80 	call	135c8 <secp256k1_fe_set_int>
   214d8:	0000a106 	br	21760 <secp256k1_gej_double_var+0x2d4>
        }
        return;
    }

    if (rzr != NULL) {
   214dc:	e0bfff17 	ldw	r2,-4(fp)
   214e0:	10001f26 	beq	r2,zero,21560 <secp256k1_gej_double_var+0xd4>
        *rzr = a->y;
   214e4:	e0bfff17 	ldw	r2,-4(fp)
   214e8:	e0fffe17 	ldw	r3,-8(fp)
   214ec:	19000c17 	ldw	r4,48(r3)
   214f0:	11000015 	stw	r4,0(r2)
   214f4:	19000d17 	ldw	r4,52(r3)
   214f8:	11000115 	stw	r4,4(r2)
   214fc:	19000e17 	ldw	r4,56(r3)
   21500:	11000215 	stw	r4,8(r2)
   21504:	19000f17 	ldw	r4,60(r3)
   21508:	11000315 	stw	r4,12(r2)
   2150c:	19001017 	ldw	r4,64(r3)
   21510:	11000415 	stw	r4,16(r2)
   21514:	19001117 	ldw	r4,68(r3)
   21518:	11000515 	stw	r4,20(r2)
   2151c:	19001217 	ldw	r4,72(r3)
   21520:	11000615 	stw	r4,24(r2)
   21524:	19001317 	ldw	r4,76(r3)
   21528:	11000715 	stw	r4,28(r2)
   2152c:	19001417 	ldw	r4,80(r3)
   21530:	11000815 	stw	r4,32(r2)
   21534:	19001517 	ldw	r4,84(r3)
   21538:	11000915 	stw	r4,36(r2)
   2153c:	19001617 	ldw	r4,88(r3)
   21540:	11000a15 	stw	r4,40(r2)
   21544:	18c01717 	ldw	r3,92(r3)
   21548:	10c00b15 	stw	r3,44(r2)
        secp256k1_fe_normalize_weak(rzr);
   2154c:	e13fff17 	ldw	r4,-4(fp)
   21550:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
        secp256k1_fe_mul_int(rzr, 2);
   21554:	01400084 	movi	r5,2
   21558:	e13fff17 	ldw	r4,-4(fp)
   2155c:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    }

    secp256k1_fe_mul(&r->z, &a->z, &a->y);
   21560:	e0bffd17 	ldw	r2,-12(fp)
   21564:	10c01804 	addi	r3,r2,96
   21568:	e0bffe17 	ldw	r2,-8(fp)
   2156c:	11001804 	addi	r4,r2,96
   21570:	e0bffe17 	ldw	r2,-8(fp)
   21574:	10800c04 	addi	r2,r2,48
   21578:	100d883a 	mov	r6,r2
   2157c:	200b883a 	mov	r5,r4
   21580:	1809883a 	mov	r4,r3
   21584:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul_int(&r->z, 2);       /* Z' = 2*Y*Z (2) */
   21588:	e0bffd17 	ldw	r2,-12(fp)
   2158c:	10801804 	addi	r2,r2,96
   21590:	01400084 	movi	r5,2
   21594:	1009883a 	mov	r4,r2
   21598:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_sqr(&t1, &a->x);
   2159c:	e0bffe17 	ldw	r2,-8(fp)
   215a0:	100b883a 	mov	r5,r2
   215a4:	e13fcd04 	addi	r4,fp,-204
   215a8:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul_int(&t1, 3);         /* T1 = 3*X^2 (3) */
   215ac:	014000c4 	movi	r5,3
   215b0:	e13fcd04 	addi	r4,fp,-204
   215b4:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_sqr(&t2, &t1);           /* T2 = 9*X^4 (1) */
   215b8:	e0bfd904 	addi	r2,fp,-156
   215bc:	e17fcd04 	addi	r5,fp,-204
   215c0:	1009883a 	mov	r4,r2
   215c4:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&t3, &a->y);
   215c8:	e0bffe17 	ldw	r2,-8(fp)
   215cc:	10c00c04 	addi	r3,r2,48
   215d0:	e0bfe504 	addi	r2,fp,-108
   215d4:	180b883a 	mov	r5,r3
   215d8:	1009883a 	mov	r4,r2
   215dc:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul_int(&t3, 2);         /* T3 = 2*Y^2 (2) */
   215e0:	e0bfe504 	addi	r2,fp,-108
   215e4:	01400084 	movi	r5,2
   215e8:	1009883a 	mov	r4,r2
   215ec:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_sqr(&t4, &t3);
   215f0:	e0ffe504 	addi	r3,fp,-108
   215f4:	e0bff104 	addi	r2,fp,-60
   215f8:	180b883a 	mov	r5,r3
   215fc:	1009883a 	mov	r4,r2
   21600:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul_int(&t4, 2);         /* T4 = 8*Y^4 (2) */
   21604:	e0bff104 	addi	r2,fp,-60
   21608:	01400084 	movi	r5,2
   2160c:	1009883a 	mov	r4,r2
   21610:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_mul(&t3, &t3, &a->x);    /* T3 = 2*X*Y^2 (1) */
   21614:	e13ffe17 	ldw	r4,-8(fp)
   21618:	e0ffe504 	addi	r3,fp,-108
   2161c:	e0bfe504 	addi	r2,fp,-108
   21620:	200d883a 	mov	r6,r4
   21624:	180b883a 	mov	r5,r3
   21628:	1009883a 	mov	r4,r2
   2162c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    r->x = t3;
   21630:	e0bffd17 	ldw	r2,-12(fp)
   21634:	e0ffe517 	ldw	r3,-108(fp)
   21638:	10c00015 	stw	r3,0(r2)
   2163c:	e0ffe617 	ldw	r3,-104(fp)
   21640:	10c00115 	stw	r3,4(r2)
   21644:	e0ffe717 	ldw	r3,-100(fp)
   21648:	10c00215 	stw	r3,8(r2)
   2164c:	e0ffe817 	ldw	r3,-96(fp)
   21650:	10c00315 	stw	r3,12(r2)
   21654:	e0ffe917 	ldw	r3,-92(fp)
   21658:	10c00415 	stw	r3,16(r2)
   2165c:	e0ffea17 	ldw	r3,-88(fp)
   21660:	10c00515 	stw	r3,20(r2)
   21664:	e0ffeb17 	ldw	r3,-84(fp)
   21668:	10c00615 	stw	r3,24(r2)
   2166c:	e0ffec17 	ldw	r3,-80(fp)
   21670:	10c00715 	stw	r3,28(r2)
   21674:	e0ffed17 	ldw	r3,-76(fp)
   21678:	10c00815 	stw	r3,32(r2)
   2167c:	e0ffee17 	ldw	r3,-72(fp)
   21680:	10c00915 	stw	r3,36(r2)
   21684:	e0ffef17 	ldw	r3,-68(fp)
   21688:	10c00a15 	stw	r3,40(r2)
   2168c:	e0fff017 	ldw	r3,-64(fp)
   21690:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_mul_int(&r->x, 4);       /* X' = 8*X*Y^2 (4) */
   21694:	e0bffd17 	ldw	r2,-12(fp)
   21698:	01400104 	movi	r5,4
   2169c:	1009883a 	mov	r4,r2
   216a0:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_negate(&r->x, &r->x, 4); /* X' = -8*X*Y^2 (5) */
   216a4:	e0bffd17 	ldw	r2,-12(fp)
   216a8:	e0fffd17 	ldw	r3,-12(fp)
   216ac:	01800104 	movi	r6,4
   216b0:	180b883a 	mov	r5,r3
   216b4:	1009883a 	mov	r4,r2
   216b8:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->x, &t2);         /* X' = 9*X^4 - 8*X*Y^2 (6) */
   216bc:	e0bffd17 	ldw	r2,-12(fp)
   216c0:	e0ffd904 	addi	r3,fp,-156
   216c4:	180b883a 	mov	r5,r3
   216c8:	1009883a 	mov	r4,r2
   216cc:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_negate(&t2, &t2, 1);     /* T2 = -9*X^4 (2) */
   216d0:	e0ffd904 	addi	r3,fp,-156
   216d4:	e0bfd904 	addi	r2,fp,-156
   216d8:	01800044 	movi	r6,1
   216dc:	180b883a 	mov	r5,r3
   216e0:	1009883a 	mov	r4,r2
   216e4:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_mul_int(&t3, 6);         /* T3 = 12*X*Y^2 (6) */
   216e8:	e0bfe504 	addi	r2,fp,-108
   216ec:	01400184 	movi	r5,6
   216f0:	1009883a 	mov	r4,r2
   216f4:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_add(&t3, &t2);           /* T3 = 12*X*Y^2 - 9*X^4 (8) */
   216f8:	e0ffd904 	addi	r3,fp,-156
   216fc:	e0bfe504 	addi	r2,fp,-108
   21700:	180b883a 	mov	r5,r3
   21704:	1009883a 	mov	r4,r2
   21708:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_mul(&r->y, &t1, &t3);    /* Y' = 36*X^3*Y^2 - 27*X^6 (1) */
   2170c:	e0bffd17 	ldw	r2,-12(fp)
   21710:	10800c04 	addi	r2,r2,48
   21714:	e0ffe504 	addi	r3,fp,-108
   21718:	180d883a 	mov	r6,r3
   2171c:	e17fcd04 	addi	r5,fp,-204
   21720:	1009883a 	mov	r4,r2
   21724:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_negate(&t2, &t4, 2);     /* T2 = -8*Y^4 (3) */
   21728:	e0fff104 	addi	r3,fp,-60
   2172c:	e0bfd904 	addi	r2,fp,-156
   21730:	01800084 	movi	r6,2
   21734:	180b883a 	mov	r5,r3
   21738:	1009883a 	mov	r4,r2
   2173c:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->y, &t2);         /* Y' = 36*X^3*Y^2 - 27*X^6 - 8*Y^4 (4) */
   21740:	e0bffd17 	ldw	r2,-12(fp)
   21744:	10800c04 	addi	r2,r2,48
   21748:	e0ffd904 	addi	r3,fp,-156
   2174c:	180b883a 	mov	r5,r3
   21750:	1009883a 	mov	r4,r2
   21754:	00142340 	call	14234 <secp256k1_fe_add>
   21758:	00000106 	br	21760 <secp256k1_gej_double_var+0x2d4>
    r->infinity = a->infinity;
    if (r->infinity) {
        if (rzr != NULL) {
            secp256k1_fe_set_int(rzr, 1);
        }
        return;
   2175c:	0001883a 	nop
    secp256k1_fe_mul_int(&t3, 6);         /* T3 = 12*X*Y^2 (6) */
    secp256k1_fe_add(&t3, &t2);           /* T3 = 12*X*Y^2 - 9*X^4 (8) */
    secp256k1_fe_mul(&r->y, &t1, &t3);    /* Y' = 36*X^3*Y^2 - 27*X^6 (1) */
    secp256k1_fe_negate(&t2, &t4, 2);     /* T2 = -8*Y^4 (3) */
    secp256k1_fe_add(&r->y, &t2);         /* Y' = 36*X^3*Y^2 - 27*X^6 - 8*Y^4 (4) */
}
   21760:	e037883a 	mov	sp,fp
   21764:	dfc00117 	ldw	ra,4(sp)
   21768:	df000017 	ldw	fp,0(sp)
   2176c:	dec00204 	addi	sp,sp,8
   21770:	f800283a 	ret

00021774 <secp256k1_gej_double_nonzero>:

static SECP256K1_INLINE void secp256k1_gej_double_nonzero(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {
   21774:	defffa04 	addi	sp,sp,-24
   21778:	dfc00515 	stw	ra,20(sp)
   2177c:	df000415 	stw	fp,16(sp)
   21780:	df000404 	addi	fp,sp,16
   21784:	e13ffd15 	stw	r4,-12(fp)
   21788:	e17ffe15 	stw	r5,-8(fp)
   2178c:	e1bfff15 	stw	r6,-4(fp)
    VERIFY_CHECK(!secp256k1_gej_is_infinity(a));
   21790:	e13ffe17 	ldw	r4,-8(fp)
   21794:	002129c0 	call	2129c <secp256k1_gej_is_infinity>
   21798:	1004c03a 	cmpne	r2,r2,zero
   2179c:	10803fcc 	andi	r2,r2,255
   217a0:	10000d26 	beq	r2,zero,217d8 <secp256k1_gej_double_nonzero+0x64>
   217a4:	d0a01617 	ldw	r2,-32680(gp)
   217a8:	10c00317 	ldw	r3,12(r2)
   217ac:	008001b4 	movhi	r2,6
   217b0:	10af5704 	addi	r2,r2,-17060
   217b4:	d8800015 	stw	r2,0(sp)
   217b8:	01c04cc4 	movi	r7,307
   217bc:	018001b4 	movhi	r6,6
   217c0:	31af4504 	addi	r6,r6,-17132
   217c4:	014001b4 	movhi	r5,6
   217c8:	296b3804 	addi	r5,r5,-21280
   217cc:	1809883a 	mov	r4,r3
   217d0:	00452600 	call	45260 <fprintf>
   217d4:	00450340 	call	45034 <abort>
    secp256k1_gej_double_var(r, a, rzr);
   217d8:	e1bfff17 	ldw	r6,-4(fp)
   217dc:	e17ffe17 	ldw	r5,-8(fp)
   217e0:	e13ffd17 	ldw	r4,-12(fp)
   217e4:	002148c0 	call	2148c <secp256k1_gej_double_var>
}
   217e8:	0001883a 	nop
   217ec:	e037883a 	mov	sp,fp
   217f0:	dfc00117 	ldw	ra,4(sp)
   217f4:	df000017 	ldw	fp,0(sp)
   217f8:	dec00204 	addi	sp,sp,8
   217fc:	f800283a 	ret

00021800 <secp256k1_gej_add_var>:

static void secp256k1_gej_add_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr) {
   21800:	deff6904 	addi	sp,sp,-604
   21804:	dfc09615 	stw	ra,600(sp)
   21808:	df009515 	stw	fp,596(sp)
   2180c:	df009504 	addi	fp,sp,596
   21810:	e13ffc15 	stw	r4,-16(fp)
   21814:	e17ffd15 	stw	r5,-12(fp)
   21818:	e1bffe15 	stw	r6,-8(fp)
   2181c:	e1ffff15 	stw	r7,-4(fp)
    /* Operations: 12 mul, 4 sqr, 2 normalize, 12 mul_int/add/negate */
    secp256k1_fe z22, z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;

    if (a->infinity) {
   21820:	e0bffd17 	ldw	r2,-12(fp)
   21824:	10802417 	ldw	r2,144(r2)
   21828:	10001a26 	beq	r2,zero,21894 <secp256k1_gej_add_var+0x94>
        VERIFY_CHECK(rzr == NULL);
   2182c:	e0bfff17 	ldw	r2,-4(fp)
   21830:	1004c03a 	cmpne	r2,r2,zero
   21834:	10803fcc 	andi	r2,r2,255
   21838:	10000d26 	beq	r2,zero,21870 <secp256k1_gej_add_var+0x70>
   2183c:	d0a01617 	ldw	r2,-32680(gp)
   21840:	10c00317 	ldw	r3,12(r2)
   21844:	008001b4 	movhi	r2,6
   21848:	10af6504 	addi	r2,r2,-17004
   2184c:	d8800015 	stw	r2,0(sp)
   21850:	01c04f04 	movi	r7,316
   21854:	018001b4 	movhi	r6,6
   21858:	31af4504 	addi	r6,r6,-17132
   2185c:	014001b4 	movhi	r5,6
   21860:	296b3804 	addi	r5,r5,-21280
   21864:	1809883a 	mov	r4,r3
   21868:	00452600 	call	45260 <fprintf>
   2186c:	00450340 	call	45034 <abort>
        *r = *b;
   21870:	e0fffc17 	ldw	r3,-16(fp)
   21874:	e0bffe17 	ldw	r2,-8(fp)
   21878:	1009883a 	mov	r4,r2
   2187c:	00802504 	movi	r2,148
   21880:	100d883a 	mov	r6,r2
   21884:	200b883a 	mov	r5,r4
   21888:	1809883a 	mov	r4,r3
   2188c:	0045c980 	call	45c98 <memcpy>
        return;
   21890:	00011006 	br	21cd4 <secp256k1_gej_add_var+0x4d4>
    }

    if (b->infinity) {
   21894:	e0bffe17 	ldw	r2,-8(fp)
   21898:	10802417 	ldw	r2,144(r2)
   2189c:	10000e26 	beq	r2,zero,218d8 <secp256k1_gej_add_var+0xd8>
        if (rzr != NULL) {
   218a0:	e0bfff17 	ldw	r2,-4(fp)
   218a4:	10000326 	beq	r2,zero,218b4 <secp256k1_gej_add_var+0xb4>
            secp256k1_fe_set_int(rzr, 1);
   218a8:	01400044 	movi	r5,1
   218ac:	e13fff17 	ldw	r4,-4(fp)
   218b0:	00135c80 	call	135c8 <secp256k1_fe_set_int>
        }
        *r = *a;
   218b4:	e0fffc17 	ldw	r3,-16(fp)
   218b8:	e0bffd17 	ldw	r2,-12(fp)
   218bc:	1009883a 	mov	r4,r2
   218c0:	00802504 	movi	r2,148
   218c4:	100d883a 	mov	r6,r2
   218c8:	200b883a 	mov	r5,r4
   218cc:	1809883a 	mov	r4,r3
   218d0:	0045c980 	call	45c98 <memcpy>
        return;
   218d4:	0000ff06 	br	21cd4 <secp256k1_gej_add_var+0x4d4>
    }

    r->infinity = 0;
   218d8:	e0bffc17 	ldw	r2,-16(fp)
   218dc:	10002415 	stw	zero,144(r2)
    secp256k1_fe_sqr(&z22, &b->z);
   218e0:	e0bffe17 	ldw	r2,-8(fp)
   218e4:	10801804 	addi	r2,r2,96
   218e8:	100b883a 	mov	r5,r2
   218ec:	e13f6c04 	addi	r4,fp,-592
   218f0:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&z12, &a->z);
   218f4:	e0bffd17 	ldw	r2,-12(fp)
   218f8:	10c01804 	addi	r3,r2,96
   218fc:	e0bf7804 	addi	r2,fp,-544
   21900:	180b883a 	mov	r5,r3
   21904:	1009883a 	mov	r4,r2
   21908:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&u1, &a->x, &z22);
   2190c:	e0fffd17 	ldw	r3,-12(fp)
   21910:	e0bf8404 	addi	r2,fp,-496
   21914:	e1bf6c04 	addi	r6,fp,-592
   21918:	180b883a 	mov	r5,r3
   2191c:	1009883a 	mov	r4,r2
   21920:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&u2, &b->x, &z12);
   21924:	e0fffe17 	ldw	r3,-8(fp)
   21928:	e13f7804 	addi	r4,fp,-544
   2192c:	e0bf9004 	addi	r2,fp,-448
   21930:	200d883a 	mov	r6,r4
   21934:	180b883a 	mov	r5,r3
   21938:	1009883a 	mov	r4,r2
   2193c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&s1, &a->y, &z22); secp256k1_fe_mul(&s1, &s1, &b->z);
   21940:	e0bffd17 	ldw	r2,-12(fp)
   21944:	10c00c04 	addi	r3,r2,48
   21948:	e0bf9c04 	addi	r2,fp,-400
   2194c:	e1bf6c04 	addi	r6,fp,-592
   21950:	180b883a 	mov	r5,r3
   21954:	1009883a 	mov	r4,r2
   21958:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
   2195c:	e0bffe17 	ldw	r2,-8(fp)
   21960:	11001804 	addi	r4,r2,96
   21964:	e0ff9c04 	addi	r3,fp,-400
   21968:	e0bf9c04 	addi	r2,fp,-400
   2196c:	200d883a 	mov	r6,r4
   21970:	180b883a 	mov	r5,r3
   21974:	1009883a 	mov	r4,r2
   21978:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);
   2197c:	e0bffe17 	ldw	r2,-8(fp)
   21980:	10c00c04 	addi	r3,r2,48
   21984:	e13f7804 	addi	r4,fp,-544
   21988:	e0bfa804 	addi	r2,fp,-352
   2198c:	200d883a 	mov	r6,r4
   21990:	180b883a 	mov	r5,r3
   21994:	1009883a 	mov	r4,r2
   21998:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
   2199c:	e0bffd17 	ldw	r2,-12(fp)
   219a0:	11001804 	addi	r4,r2,96
   219a4:	e0ffa804 	addi	r3,fp,-352
   219a8:	e0bfa804 	addi	r2,fp,-352
   219ac:	200d883a 	mov	r6,r4
   219b0:	180b883a 	mov	r5,r3
   219b4:	1009883a 	mov	r4,r2
   219b8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);
   219bc:	e0ff8404 	addi	r3,fp,-496
   219c0:	e0bfb404 	addi	r2,fp,-304
   219c4:	01800044 	movi	r6,1
   219c8:	180b883a 	mov	r5,r3
   219cc:	1009883a 	mov	r4,r2
   219d0:	0013e240 	call	13e24 <secp256k1_fe_negate>
   219d4:	e0ff9004 	addi	r3,fp,-448
   219d8:	e0bfb404 	addi	r2,fp,-304
   219dc:	180b883a 	mov	r5,r3
   219e0:	1009883a 	mov	r4,r2
   219e4:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
   219e8:	e0ff9c04 	addi	r3,fp,-400
   219ec:	e0bfc004 	addi	r2,fp,-256
   219f0:	01800044 	movi	r6,1
   219f4:	180b883a 	mov	r5,r3
   219f8:	1009883a 	mov	r4,r2
   219fc:	0013e240 	call	13e24 <secp256k1_fe_negate>
   21a00:	e0ffa804 	addi	r3,fp,-352
   21a04:	e0bfc004 	addi	r2,fp,-256
   21a08:	180b883a 	mov	r5,r3
   21a0c:	1009883a 	mov	r4,r2
   21a10:	00142340 	call	14234 <secp256k1_fe_add>
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
   21a14:	e0bfb404 	addi	r2,fp,-304
   21a18:	1009883a 	mov	r4,r2
   21a1c:	00131a00 	call	131a0 <secp256k1_fe_normalizes_to_zero_var>
   21a20:	10001226 	beq	r2,zero,21a6c <secp256k1_gej_add_var+0x26c>
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
   21a24:	e0bfc004 	addi	r2,fp,-256
   21a28:	1009883a 	mov	r4,r2
   21a2c:	00131a00 	call	131a0 <secp256k1_fe_normalizes_to_zero_var>
   21a30:	10000526 	beq	r2,zero,21a48 <secp256k1_gej_add_var+0x248>
            secp256k1_gej_double_var(r, a, rzr);
   21a34:	e1bfff17 	ldw	r6,-4(fp)
   21a38:	e17ffd17 	ldw	r5,-12(fp)
   21a3c:	e13ffc17 	ldw	r4,-16(fp)
   21a40:	002148c0 	call	2148c <secp256k1_gej_double_var>
            if (rzr != NULL) {
                secp256k1_fe_set_int(rzr, 0);
            }
            r->infinity = 1;
        }
        return;
   21a44:	0000a306 	br	21cd4 <secp256k1_gej_add_var+0x4d4>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
            secp256k1_gej_double_var(r, a, rzr);
        } else {
            if (rzr != NULL) {
   21a48:	e0bfff17 	ldw	r2,-4(fp)
   21a4c:	10000326 	beq	r2,zero,21a5c <secp256k1_gej_add_var+0x25c>
                secp256k1_fe_set_int(rzr, 0);
   21a50:	000b883a 	mov	r5,zero
   21a54:	e13fff17 	ldw	r4,-4(fp)
   21a58:	00135c80 	call	135c8 <secp256k1_fe_set_int>
            }
            r->infinity = 1;
   21a5c:	e0bffc17 	ldw	r2,-16(fp)
   21a60:	00c00044 	movi	r3,1
   21a64:	10c02415 	stw	r3,144(r2)
        }
        return;
   21a68:	00009a06 	br	21cd4 <secp256k1_gej_add_var+0x4d4>
    }
    secp256k1_fe_sqr(&i2, &i);
   21a6c:	e0ffc004 	addi	r3,fp,-256
   21a70:	e0bfcc04 	addi	r2,fp,-208
   21a74:	180b883a 	mov	r5,r3
   21a78:	1009883a 	mov	r4,r2
   21a7c:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&h2, &h);
   21a80:	e0ffb404 	addi	r3,fp,-304
   21a84:	e0bfd804 	addi	r2,fp,-160
   21a88:	180b883a 	mov	r5,r3
   21a8c:	1009883a 	mov	r4,r2
   21a90:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&h3, &h, &h2);
   21a94:	e13fd804 	addi	r4,fp,-160
   21a98:	e0ffb404 	addi	r3,fp,-304
   21a9c:	e0bfe404 	addi	r2,fp,-112
   21aa0:	200d883a 	mov	r6,r4
   21aa4:	180b883a 	mov	r5,r3
   21aa8:	1009883a 	mov	r4,r2
   21aac:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&h, &h, &b->z);
   21ab0:	e0bffe17 	ldw	r2,-8(fp)
   21ab4:	11001804 	addi	r4,r2,96
   21ab8:	e0ffb404 	addi	r3,fp,-304
   21abc:	e0bfb404 	addi	r2,fp,-304
   21ac0:	200d883a 	mov	r6,r4
   21ac4:	180b883a 	mov	r5,r3
   21ac8:	1009883a 	mov	r4,r2
   21acc:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    if (rzr != NULL) {
   21ad0:	e0bfff17 	ldw	r2,-4(fp)
   21ad4:	10001926 	beq	r2,zero,21b3c <secp256k1_gej_add_var+0x33c>
        *rzr = h;
   21ad8:	e0bfff17 	ldw	r2,-4(fp)
   21adc:	e0ffb417 	ldw	r3,-304(fp)
   21ae0:	10c00015 	stw	r3,0(r2)
   21ae4:	e0ffb517 	ldw	r3,-300(fp)
   21ae8:	10c00115 	stw	r3,4(r2)
   21aec:	e0ffb617 	ldw	r3,-296(fp)
   21af0:	10c00215 	stw	r3,8(r2)
   21af4:	e0ffb717 	ldw	r3,-292(fp)
   21af8:	10c00315 	stw	r3,12(r2)
   21afc:	e0ffb817 	ldw	r3,-288(fp)
   21b00:	10c00415 	stw	r3,16(r2)
   21b04:	e0ffb917 	ldw	r3,-284(fp)
   21b08:	10c00515 	stw	r3,20(r2)
   21b0c:	e0ffba17 	ldw	r3,-280(fp)
   21b10:	10c00615 	stw	r3,24(r2)
   21b14:	e0ffbb17 	ldw	r3,-276(fp)
   21b18:	10c00715 	stw	r3,28(r2)
   21b1c:	e0ffbc17 	ldw	r3,-272(fp)
   21b20:	10c00815 	stw	r3,32(r2)
   21b24:	e0ffbd17 	ldw	r3,-268(fp)
   21b28:	10c00915 	stw	r3,36(r2)
   21b2c:	e0ffbe17 	ldw	r3,-264(fp)
   21b30:	10c00a15 	stw	r3,40(r2)
   21b34:	e0ffbf17 	ldw	r3,-260(fp)
   21b38:	10c00b15 	stw	r3,44(r2)
    }
    secp256k1_fe_mul(&r->z, &a->z, &h);
   21b3c:	e0bffc17 	ldw	r2,-16(fp)
   21b40:	10c01804 	addi	r3,r2,96
   21b44:	e0bffd17 	ldw	r2,-12(fp)
   21b48:	10801804 	addi	r2,r2,96
   21b4c:	e13fb404 	addi	r4,fp,-304
   21b50:	200d883a 	mov	r6,r4
   21b54:	100b883a 	mov	r5,r2
   21b58:	1809883a 	mov	r4,r3
   21b5c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&t, &u1, &h2);
   21b60:	e13fd804 	addi	r4,fp,-160
   21b64:	e0ff8404 	addi	r3,fp,-496
   21b68:	e0bff004 	addi	r2,fp,-64
   21b6c:	200d883a 	mov	r6,r4
   21b70:	180b883a 	mov	r5,r3
   21b74:	1009883a 	mov	r4,r2
   21b78:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);
   21b7c:	e0bffc17 	ldw	r2,-16(fp)
   21b80:	e0fff017 	ldw	r3,-64(fp)
   21b84:	10c00015 	stw	r3,0(r2)
   21b88:	e0fff117 	ldw	r3,-60(fp)
   21b8c:	10c00115 	stw	r3,4(r2)
   21b90:	e0fff217 	ldw	r3,-56(fp)
   21b94:	10c00215 	stw	r3,8(r2)
   21b98:	e0fff317 	ldw	r3,-52(fp)
   21b9c:	10c00315 	stw	r3,12(r2)
   21ba0:	e0fff417 	ldw	r3,-48(fp)
   21ba4:	10c00415 	stw	r3,16(r2)
   21ba8:	e0fff517 	ldw	r3,-44(fp)
   21bac:	10c00515 	stw	r3,20(r2)
   21bb0:	e0fff617 	ldw	r3,-40(fp)
   21bb4:	10c00615 	stw	r3,24(r2)
   21bb8:	e0fff717 	ldw	r3,-36(fp)
   21bbc:	10c00715 	stw	r3,28(r2)
   21bc0:	e0fff817 	ldw	r3,-32(fp)
   21bc4:	10c00815 	stw	r3,32(r2)
   21bc8:	e0fff917 	ldw	r3,-28(fp)
   21bcc:	10c00915 	stw	r3,36(r2)
   21bd0:	e0fffa17 	ldw	r3,-24(fp)
   21bd4:	10c00a15 	stw	r3,40(r2)
   21bd8:	e0fffb17 	ldw	r3,-20(fp)
   21bdc:	10c00b15 	stw	r3,44(r2)
   21be0:	e0bffc17 	ldw	r2,-16(fp)
   21be4:	01400084 	movi	r5,2
   21be8:	1009883a 	mov	r4,r2
   21bec:	001406c0 	call	1406c <secp256k1_fe_mul_int>
   21bf0:	e0bffc17 	ldw	r2,-16(fp)
   21bf4:	e0ffe404 	addi	r3,fp,-112
   21bf8:	180b883a 	mov	r5,r3
   21bfc:	1009883a 	mov	r4,r2
   21c00:	00142340 	call	14234 <secp256k1_fe_add>
   21c04:	e0bffc17 	ldw	r2,-16(fp)
   21c08:	e0fffc17 	ldw	r3,-16(fp)
   21c0c:	018000c4 	movi	r6,3
   21c10:	180b883a 	mov	r5,r3
   21c14:	1009883a 	mov	r4,r2
   21c18:	0013e240 	call	13e24 <secp256k1_fe_negate>
   21c1c:	e0bffc17 	ldw	r2,-16(fp)
   21c20:	e0ffcc04 	addi	r3,fp,-208
   21c24:	180b883a 	mov	r5,r3
   21c28:	1009883a 	mov	r4,r2
   21c2c:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);
   21c30:	e0bffc17 	ldw	r2,-16(fp)
   21c34:	10800c04 	addi	r2,r2,48
   21c38:	e0fffc17 	ldw	r3,-16(fp)
   21c3c:	01800144 	movi	r6,5
   21c40:	180b883a 	mov	r5,r3
   21c44:	1009883a 	mov	r4,r2
   21c48:	0013e240 	call	13e24 <secp256k1_fe_negate>
   21c4c:	e0bffc17 	ldw	r2,-16(fp)
   21c50:	10800c04 	addi	r2,r2,48
   21c54:	e0fff004 	addi	r3,fp,-64
   21c58:	180b883a 	mov	r5,r3
   21c5c:	1009883a 	mov	r4,r2
   21c60:	00142340 	call	14234 <secp256k1_fe_add>
   21c64:	e0bffc17 	ldw	r2,-16(fp)
   21c68:	10c00c04 	addi	r3,r2,48
   21c6c:	e0bffc17 	ldw	r2,-16(fp)
   21c70:	10800c04 	addi	r2,r2,48
   21c74:	e13fc004 	addi	r4,fp,-256
   21c78:	200d883a 	mov	r6,r4
   21c7c:	100b883a 	mov	r5,r2
   21c80:	1809883a 	mov	r4,r3
   21c84:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);
   21c88:	e13f9c04 	addi	r4,fp,-400
   21c8c:	e0ffe404 	addi	r3,fp,-112
   21c90:	e0bfe404 	addi	r2,fp,-112
   21c94:	200d883a 	mov	r6,r4
   21c98:	180b883a 	mov	r5,r3
   21c9c:	1009883a 	mov	r4,r2
   21ca0:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
   21ca4:	e0ffe404 	addi	r3,fp,-112
   21ca8:	e0bfe404 	addi	r2,fp,-112
   21cac:	01800044 	movi	r6,1
   21cb0:	180b883a 	mov	r5,r3
   21cb4:	1009883a 	mov	r4,r2
   21cb8:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->y, &h3);
   21cbc:	e0bffc17 	ldw	r2,-16(fp)
   21cc0:	10800c04 	addi	r2,r2,48
   21cc4:	e0ffe404 	addi	r3,fp,-112
   21cc8:	180b883a 	mov	r5,r3
   21ccc:	1009883a 	mov	r4,r2
   21cd0:	00142340 	call	14234 <secp256k1_fe_add>
}
   21cd4:	e037883a 	mov	sp,fp
   21cd8:	dfc00117 	ldw	ra,4(sp)
   21cdc:	df000017 	ldw	fp,0(sp)
   21ce0:	dec00204 	addi	sp,sp,8
   21ce4:	f800283a 	ret

00021ce8 <secp256k1_gej_add_ge_var>:

static void secp256k1_gej_add_ge_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr) {
   21ce8:	deff7504 	addi	sp,sp,-556
   21cec:	dfc08a15 	stw	ra,552(sp)
   21cf0:	df008915 	stw	fp,548(sp)
   21cf4:	df008904 	addi	fp,sp,548
   21cf8:	e13ffc15 	stw	r4,-16(fp)
   21cfc:	e17ffd15 	stw	r5,-12(fp)
   21d00:	e1bffe15 	stw	r6,-8(fp)
   21d04:	e1ffff15 	stw	r7,-4(fp)
    /* 8 mul, 3 sqr, 4 normalize, 12 mul_int/add/negate */
    secp256k1_fe z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;
    if (a->infinity) {
   21d08:	e0bffd17 	ldw	r2,-12(fp)
   21d0c:	10802417 	ldw	r2,144(r2)
   21d10:	10001526 	beq	r2,zero,21d68 <secp256k1_gej_add_ge_var+0x80>
        VERIFY_CHECK(rzr == NULL);
   21d14:	e0bfff17 	ldw	r2,-4(fp)
   21d18:	1004c03a 	cmpne	r2,r2,zero
   21d1c:	10803fcc 	andi	r2,r2,255
   21d20:	10000d26 	beq	r2,zero,21d58 <secp256k1_gej_add_ge_var+0x70>
   21d24:	d0a01617 	ldw	r2,-32680(gp)
   21d28:	10c00317 	ldw	r3,12(r2)
   21d2c:	008001b4 	movhi	r2,6
   21d30:	10af6504 	addi	r2,r2,-17004
   21d34:	d8800015 	stw	r2,0(sp)
   21d38:	01c05c04 	movi	r7,368
   21d3c:	018001b4 	movhi	r6,6
   21d40:	31af4504 	addi	r6,r6,-17132
   21d44:	014001b4 	movhi	r5,6
   21d48:	296b3804 	addi	r5,r5,-21280
   21d4c:	1809883a 	mov	r4,r3
   21d50:	00452600 	call	45260 <fprintf>
   21d54:	00450340 	call	45034 <abort>
        secp256k1_gej_set_ge(r, b);
   21d58:	e17ffe17 	ldw	r5,-8(fp)
   21d5c:	e13ffc17 	ldw	r4,-16(fp)
   21d60:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
        return;
   21d64:	00012306 	br	221f4 <secp256k1_gej_add_ge_var+0x50c>
    }
    if (b->infinity) {
   21d68:	e0bffe17 	ldw	r2,-8(fp)
   21d6c:	10801817 	ldw	r2,96(r2)
   21d70:	10000e26 	beq	r2,zero,21dac <secp256k1_gej_add_ge_var+0xc4>
        if (rzr != NULL) {
   21d74:	e0bfff17 	ldw	r2,-4(fp)
   21d78:	10000326 	beq	r2,zero,21d88 <secp256k1_gej_add_ge_var+0xa0>
            secp256k1_fe_set_int(rzr, 1);
   21d7c:	01400044 	movi	r5,1
   21d80:	e13fff17 	ldw	r4,-4(fp)
   21d84:	00135c80 	call	135c8 <secp256k1_fe_set_int>
        }
        *r = *a;
   21d88:	e0fffc17 	ldw	r3,-16(fp)
   21d8c:	e0bffd17 	ldw	r2,-12(fp)
   21d90:	1009883a 	mov	r4,r2
   21d94:	00802504 	movi	r2,148
   21d98:	100d883a 	mov	r6,r2
   21d9c:	200b883a 	mov	r5,r4
   21da0:	1809883a 	mov	r4,r3
   21da4:	0045c980 	call	45c98 <memcpy>
        return;
   21da8:	00011206 	br	221f4 <secp256k1_gej_add_ge_var+0x50c>
    }
    r->infinity = 0;
   21dac:	e0bffc17 	ldw	r2,-16(fp)
   21db0:	10002415 	stw	zero,144(r2)

    secp256k1_fe_sqr(&z12, &a->z);
   21db4:	e0bffd17 	ldw	r2,-12(fp)
   21db8:	10801804 	addi	r2,r2,96
   21dbc:	100b883a 	mov	r5,r2
   21dc0:	e13f7804 	addi	r4,fp,-544
   21dc4:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    u1 = a->x; secp256k1_fe_normalize_weak(&u1);
   21dc8:	e0bffd17 	ldw	r2,-12(fp)
   21dcc:	10c00017 	ldw	r3,0(r2)
   21dd0:	e0ff8415 	stw	r3,-496(fp)
   21dd4:	10c00117 	ldw	r3,4(r2)
   21dd8:	e0ff8515 	stw	r3,-492(fp)
   21ddc:	10c00217 	ldw	r3,8(r2)
   21de0:	e0ff8615 	stw	r3,-488(fp)
   21de4:	10c00317 	ldw	r3,12(r2)
   21de8:	e0ff8715 	stw	r3,-484(fp)
   21dec:	10c00417 	ldw	r3,16(r2)
   21df0:	e0ff8815 	stw	r3,-480(fp)
   21df4:	10c00517 	ldw	r3,20(r2)
   21df8:	e0ff8915 	stw	r3,-476(fp)
   21dfc:	10c00617 	ldw	r3,24(r2)
   21e00:	e0ff8a15 	stw	r3,-472(fp)
   21e04:	10c00717 	ldw	r3,28(r2)
   21e08:	e0ff8b15 	stw	r3,-468(fp)
   21e0c:	10c00817 	ldw	r3,32(r2)
   21e10:	e0ff8c15 	stw	r3,-464(fp)
   21e14:	10c00917 	ldw	r3,36(r2)
   21e18:	e0ff8d15 	stw	r3,-460(fp)
   21e1c:	10c00a17 	ldw	r3,40(r2)
   21e20:	e0ff8e15 	stw	r3,-456(fp)
   21e24:	10800b17 	ldw	r2,44(r2)
   21e28:	e0bf8f15 	stw	r2,-452(fp)
   21e2c:	e0bf8404 	addi	r2,fp,-496
   21e30:	1009883a 	mov	r4,r2
   21e34:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&u2, &b->x, &z12);
   21e38:	e0fffe17 	ldw	r3,-8(fp)
   21e3c:	e0bf9004 	addi	r2,fp,-448
   21e40:	e1bf7804 	addi	r6,fp,-544
   21e44:	180b883a 	mov	r5,r3
   21e48:	1009883a 	mov	r4,r2
   21e4c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    s1 = a->y; secp256k1_fe_normalize_weak(&s1);
   21e50:	e0bffd17 	ldw	r2,-12(fp)
   21e54:	10c00c17 	ldw	r3,48(r2)
   21e58:	e0ff9c15 	stw	r3,-400(fp)
   21e5c:	10c00d17 	ldw	r3,52(r2)
   21e60:	e0ff9d15 	stw	r3,-396(fp)
   21e64:	10c00e17 	ldw	r3,56(r2)
   21e68:	e0ff9e15 	stw	r3,-392(fp)
   21e6c:	10c00f17 	ldw	r3,60(r2)
   21e70:	e0ff9f15 	stw	r3,-388(fp)
   21e74:	10c01017 	ldw	r3,64(r2)
   21e78:	e0ffa015 	stw	r3,-384(fp)
   21e7c:	10c01117 	ldw	r3,68(r2)
   21e80:	e0ffa115 	stw	r3,-380(fp)
   21e84:	10c01217 	ldw	r3,72(r2)
   21e88:	e0ffa215 	stw	r3,-376(fp)
   21e8c:	10c01317 	ldw	r3,76(r2)
   21e90:	e0ffa315 	stw	r3,-372(fp)
   21e94:	10c01417 	ldw	r3,80(r2)
   21e98:	e0ffa415 	stw	r3,-368(fp)
   21e9c:	10c01517 	ldw	r3,84(r2)
   21ea0:	e0ffa515 	stw	r3,-364(fp)
   21ea4:	10c01617 	ldw	r3,88(r2)
   21ea8:	e0ffa615 	stw	r3,-360(fp)
   21eac:	10801717 	ldw	r2,92(r2)
   21eb0:	e0bfa715 	stw	r2,-356(fp)
   21eb4:	e0bf9c04 	addi	r2,fp,-400
   21eb8:	1009883a 	mov	r4,r2
   21ebc:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);
   21ec0:	e0bffe17 	ldw	r2,-8(fp)
   21ec4:	10c00c04 	addi	r3,r2,48
   21ec8:	e0bfa804 	addi	r2,fp,-352
   21ecc:	e1bf7804 	addi	r6,fp,-544
   21ed0:	180b883a 	mov	r5,r3
   21ed4:	1009883a 	mov	r4,r2
   21ed8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
   21edc:	e0bffd17 	ldw	r2,-12(fp)
   21ee0:	11001804 	addi	r4,r2,96
   21ee4:	e0ffa804 	addi	r3,fp,-352
   21ee8:	e0bfa804 	addi	r2,fp,-352
   21eec:	200d883a 	mov	r6,r4
   21ef0:	180b883a 	mov	r5,r3
   21ef4:	1009883a 	mov	r4,r2
   21ef8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);
   21efc:	e0ff8404 	addi	r3,fp,-496
   21f00:	e0bfb404 	addi	r2,fp,-304
   21f04:	01800044 	movi	r6,1
   21f08:	180b883a 	mov	r5,r3
   21f0c:	1009883a 	mov	r4,r2
   21f10:	0013e240 	call	13e24 <secp256k1_fe_negate>
   21f14:	e0ff9004 	addi	r3,fp,-448
   21f18:	e0bfb404 	addi	r2,fp,-304
   21f1c:	180b883a 	mov	r5,r3
   21f20:	1009883a 	mov	r4,r2
   21f24:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
   21f28:	e0ff9c04 	addi	r3,fp,-400
   21f2c:	e0bfc004 	addi	r2,fp,-256
   21f30:	01800044 	movi	r6,1
   21f34:	180b883a 	mov	r5,r3
   21f38:	1009883a 	mov	r4,r2
   21f3c:	0013e240 	call	13e24 <secp256k1_fe_negate>
   21f40:	e0ffa804 	addi	r3,fp,-352
   21f44:	e0bfc004 	addi	r2,fp,-256
   21f48:	180b883a 	mov	r5,r3
   21f4c:	1009883a 	mov	r4,r2
   21f50:	00142340 	call	14234 <secp256k1_fe_add>
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
   21f54:	e0bfb404 	addi	r2,fp,-304
   21f58:	1009883a 	mov	r4,r2
   21f5c:	00131a00 	call	131a0 <secp256k1_fe_normalizes_to_zero_var>
   21f60:	10001226 	beq	r2,zero,21fac <secp256k1_gej_add_ge_var+0x2c4>
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
   21f64:	e0bfc004 	addi	r2,fp,-256
   21f68:	1009883a 	mov	r4,r2
   21f6c:	00131a00 	call	131a0 <secp256k1_fe_normalizes_to_zero_var>
   21f70:	10000526 	beq	r2,zero,21f88 <secp256k1_gej_add_ge_var+0x2a0>
            secp256k1_gej_double_var(r, a, rzr);
   21f74:	e1bfff17 	ldw	r6,-4(fp)
   21f78:	e17ffd17 	ldw	r5,-12(fp)
   21f7c:	e13ffc17 	ldw	r4,-16(fp)
   21f80:	002148c0 	call	2148c <secp256k1_gej_double_var>
            if (rzr != NULL) {
                secp256k1_fe_set_int(rzr, 0);
            }
            r->infinity = 1;
        }
        return;
   21f84:	00009b06 	br	221f4 <secp256k1_gej_add_ge_var+0x50c>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
            secp256k1_gej_double_var(r, a, rzr);
        } else {
            if (rzr != NULL) {
   21f88:	e0bfff17 	ldw	r2,-4(fp)
   21f8c:	10000326 	beq	r2,zero,21f9c <secp256k1_gej_add_ge_var+0x2b4>
                secp256k1_fe_set_int(rzr, 0);
   21f90:	000b883a 	mov	r5,zero
   21f94:	e13fff17 	ldw	r4,-4(fp)
   21f98:	00135c80 	call	135c8 <secp256k1_fe_set_int>
            }
            r->infinity = 1;
   21f9c:	e0bffc17 	ldw	r2,-16(fp)
   21fa0:	00c00044 	movi	r3,1
   21fa4:	10c02415 	stw	r3,144(r2)
        }
        return;
   21fa8:	00009206 	br	221f4 <secp256k1_gej_add_ge_var+0x50c>
    }
    secp256k1_fe_sqr(&i2, &i);
   21fac:	e0ffc004 	addi	r3,fp,-256
   21fb0:	e0bfcc04 	addi	r2,fp,-208
   21fb4:	180b883a 	mov	r5,r3
   21fb8:	1009883a 	mov	r4,r2
   21fbc:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&h2, &h);
   21fc0:	e0ffb404 	addi	r3,fp,-304
   21fc4:	e0bfd804 	addi	r2,fp,-160
   21fc8:	180b883a 	mov	r5,r3
   21fcc:	1009883a 	mov	r4,r2
   21fd0:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&h3, &h, &h2);
   21fd4:	e13fd804 	addi	r4,fp,-160
   21fd8:	e0ffb404 	addi	r3,fp,-304
   21fdc:	e0bfe404 	addi	r2,fp,-112
   21fe0:	200d883a 	mov	r6,r4
   21fe4:	180b883a 	mov	r5,r3
   21fe8:	1009883a 	mov	r4,r2
   21fec:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    if (rzr != NULL) {
   21ff0:	e0bfff17 	ldw	r2,-4(fp)
   21ff4:	10001926 	beq	r2,zero,2205c <secp256k1_gej_add_ge_var+0x374>
        *rzr = h;
   21ff8:	e0bfff17 	ldw	r2,-4(fp)
   21ffc:	e0ffb417 	ldw	r3,-304(fp)
   22000:	10c00015 	stw	r3,0(r2)
   22004:	e0ffb517 	ldw	r3,-300(fp)
   22008:	10c00115 	stw	r3,4(r2)
   2200c:	e0ffb617 	ldw	r3,-296(fp)
   22010:	10c00215 	stw	r3,8(r2)
   22014:	e0ffb717 	ldw	r3,-292(fp)
   22018:	10c00315 	stw	r3,12(r2)
   2201c:	e0ffb817 	ldw	r3,-288(fp)
   22020:	10c00415 	stw	r3,16(r2)
   22024:	e0ffb917 	ldw	r3,-284(fp)
   22028:	10c00515 	stw	r3,20(r2)
   2202c:	e0ffba17 	ldw	r3,-280(fp)
   22030:	10c00615 	stw	r3,24(r2)
   22034:	e0ffbb17 	ldw	r3,-276(fp)
   22038:	10c00715 	stw	r3,28(r2)
   2203c:	e0ffbc17 	ldw	r3,-272(fp)
   22040:	10c00815 	stw	r3,32(r2)
   22044:	e0ffbd17 	ldw	r3,-268(fp)
   22048:	10c00915 	stw	r3,36(r2)
   2204c:	e0ffbe17 	ldw	r3,-264(fp)
   22050:	10c00a15 	stw	r3,40(r2)
   22054:	e0ffbf17 	ldw	r3,-260(fp)
   22058:	10c00b15 	stw	r3,44(r2)
    }
    secp256k1_fe_mul(&r->z, &a->z, &h);
   2205c:	e0bffc17 	ldw	r2,-16(fp)
   22060:	10c01804 	addi	r3,r2,96
   22064:	e0bffd17 	ldw	r2,-12(fp)
   22068:	10801804 	addi	r2,r2,96
   2206c:	e13fb404 	addi	r4,fp,-304
   22070:	200d883a 	mov	r6,r4
   22074:	100b883a 	mov	r5,r2
   22078:	1809883a 	mov	r4,r3
   2207c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&t, &u1, &h2);
   22080:	e13fd804 	addi	r4,fp,-160
   22084:	e0ff8404 	addi	r3,fp,-496
   22088:	e0bff004 	addi	r2,fp,-64
   2208c:	200d883a 	mov	r6,r4
   22090:	180b883a 	mov	r5,r3
   22094:	1009883a 	mov	r4,r2
   22098:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);
   2209c:	e0bffc17 	ldw	r2,-16(fp)
   220a0:	e0fff017 	ldw	r3,-64(fp)
   220a4:	10c00015 	stw	r3,0(r2)
   220a8:	e0fff117 	ldw	r3,-60(fp)
   220ac:	10c00115 	stw	r3,4(r2)
   220b0:	e0fff217 	ldw	r3,-56(fp)
   220b4:	10c00215 	stw	r3,8(r2)
   220b8:	e0fff317 	ldw	r3,-52(fp)
   220bc:	10c00315 	stw	r3,12(r2)
   220c0:	e0fff417 	ldw	r3,-48(fp)
   220c4:	10c00415 	stw	r3,16(r2)
   220c8:	e0fff517 	ldw	r3,-44(fp)
   220cc:	10c00515 	stw	r3,20(r2)
   220d0:	e0fff617 	ldw	r3,-40(fp)
   220d4:	10c00615 	stw	r3,24(r2)
   220d8:	e0fff717 	ldw	r3,-36(fp)
   220dc:	10c00715 	stw	r3,28(r2)
   220e0:	e0fff817 	ldw	r3,-32(fp)
   220e4:	10c00815 	stw	r3,32(r2)
   220e8:	e0fff917 	ldw	r3,-28(fp)
   220ec:	10c00915 	stw	r3,36(r2)
   220f0:	e0fffa17 	ldw	r3,-24(fp)
   220f4:	10c00a15 	stw	r3,40(r2)
   220f8:	e0fffb17 	ldw	r3,-20(fp)
   220fc:	10c00b15 	stw	r3,44(r2)
   22100:	e0bffc17 	ldw	r2,-16(fp)
   22104:	01400084 	movi	r5,2
   22108:	1009883a 	mov	r4,r2
   2210c:	001406c0 	call	1406c <secp256k1_fe_mul_int>
   22110:	e0bffc17 	ldw	r2,-16(fp)
   22114:	e0ffe404 	addi	r3,fp,-112
   22118:	180b883a 	mov	r5,r3
   2211c:	1009883a 	mov	r4,r2
   22120:	00142340 	call	14234 <secp256k1_fe_add>
   22124:	e0bffc17 	ldw	r2,-16(fp)
   22128:	e0fffc17 	ldw	r3,-16(fp)
   2212c:	018000c4 	movi	r6,3
   22130:	180b883a 	mov	r5,r3
   22134:	1009883a 	mov	r4,r2
   22138:	0013e240 	call	13e24 <secp256k1_fe_negate>
   2213c:	e0bffc17 	ldw	r2,-16(fp)
   22140:	e0ffcc04 	addi	r3,fp,-208
   22144:	180b883a 	mov	r5,r3
   22148:	1009883a 	mov	r4,r2
   2214c:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);
   22150:	e0bffc17 	ldw	r2,-16(fp)
   22154:	10800c04 	addi	r2,r2,48
   22158:	e0fffc17 	ldw	r3,-16(fp)
   2215c:	01800144 	movi	r6,5
   22160:	180b883a 	mov	r5,r3
   22164:	1009883a 	mov	r4,r2
   22168:	0013e240 	call	13e24 <secp256k1_fe_negate>
   2216c:	e0bffc17 	ldw	r2,-16(fp)
   22170:	10800c04 	addi	r2,r2,48
   22174:	e0fff004 	addi	r3,fp,-64
   22178:	180b883a 	mov	r5,r3
   2217c:	1009883a 	mov	r4,r2
   22180:	00142340 	call	14234 <secp256k1_fe_add>
   22184:	e0bffc17 	ldw	r2,-16(fp)
   22188:	10c00c04 	addi	r3,r2,48
   2218c:	e0bffc17 	ldw	r2,-16(fp)
   22190:	10800c04 	addi	r2,r2,48
   22194:	e13fc004 	addi	r4,fp,-256
   22198:	200d883a 	mov	r6,r4
   2219c:	100b883a 	mov	r5,r2
   221a0:	1809883a 	mov	r4,r3
   221a4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);
   221a8:	e13f9c04 	addi	r4,fp,-400
   221ac:	e0ffe404 	addi	r3,fp,-112
   221b0:	e0bfe404 	addi	r2,fp,-112
   221b4:	200d883a 	mov	r6,r4
   221b8:	180b883a 	mov	r5,r3
   221bc:	1009883a 	mov	r4,r2
   221c0:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
   221c4:	e0ffe404 	addi	r3,fp,-112
   221c8:	e0bfe404 	addi	r2,fp,-112
   221cc:	01800044 	movi	r6,1
   221d0:	180b883a 	mov	r5,r3
   221d4:	1009883a 	mov	r4,r2
   221d8:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->y, &h3);
   221dc:	e0bffc17 	ldw	r2,-16(fp)
   221e0:	10800c04 	addi	r2,r2,48
   221e4:	e0ffe404 	addi	r3,fp,-112
   221e8:	180b883a 	mov	r5,r3
   221ec:	1009883a 	mov	r4,r2
   221f0:	00142340 	call	14234 <secp256k1_fe_add>
}
   221f4:	e037883a 	mov	sp,fp
   221f8:	dfc00117 	ldw	ra,4(sp)
   221fc:	df000017 	ldw	fp,0(sp)
   22200:	dec00204 	addi	sp,sp,8
   22204:	f800283a 	ret

00022208 <secp256k1_gej_add_zinv_var>:

static void secp256k1_gej_add_zinv_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv) {
   22208:	deff5204 	addi	sp,sp,-696
   2220c:	dfc0ad15 	stw	ra,692(sp)
   22210:	df00ac15 	stw	fp,688(sp)
   22214:	df00ac04 	addi	fp,sp,688
   22218:	e13ffc15 	stw	r4,-16(fp)
   2221c:	e17ffd15 	stw	r5,-12(fp)
   22220:	e1bffe15 	stw	r6,-8(fp)
   22224:	e1ffff15 	stw	r7,-4(fp)
    /* 9 mul, 3 sqr, 4 normalize, 12 mul_int/add/negate */
    secp256k1_fe az, z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;

    if (b->infinity) {
   22228:	e0bffe17 	ldw	r2,-8(fp)
   2222c:	10801817 	ldw	r2,96(r2)
   22230:	10000926 	beq	r2,zero,22258 <secp256k1_gej_add_zinv_var+0x50>
        *r = *a;
   22234:	e0fffc17 	ldw	r3,-16(fp)
   22238:	e0bffd17 	ldw	r2,-12(fp)
   2223c:	1009883a 	mov	r4,r2
   22240:	00802504 	movi	r2,148
   22244:	100d883a 	mov	r6,r2
   22248:	200b883a 	mov	r5,r4
   2224c:	1809883a 	mov	r4,r3
   22250:	0045c980 	call	45c98 <memcpy>
        return;
   22254:	00013906 	br	2273c <secp256k1_gej_add_zinv_var+0x534>
    }
    if (a->infinity) {
   22258:	e0bffd17 	ldw	r2,-12(fp)
   2225c:	10802417 	ldw	r2,144(r2)
   22260:	10002526 	beq	r2,zero,222f8 <secp256k1_gej_add_zinv_var+0xf0>
        secp256k1_fe bzinv2, bzinv3;
        r->infinity = b->infinity;
   22264:	e0bffe17 	ldw	r2,-8(fp)
   22268:	10c01817 	ldw	r3,96(r2)
   2226c:	e0bffc17 	ldw	r2,-16(fp)
   22270:	10c02415 	stw	r3,144(r2)
        secp256k1_fe_sqr(&bzinv2, bzinv);
   22274:	e0bff004 	addi	r2,fp,-64
   22278:	e17fff17 	ldw	r5,-4(fp)
   2227c:	1009883a 	mov	r4,r2
   22280:	001e3440 	call	1e344 <secp256k1_fe_sqr>
        secp256k1_fe_mul(&bzinv3, &bzinv2, bzinv);
   22284:	e0fff004 	addi	r3,fp,-64
   22288:	e0bfe404 	addi	r2,fp,-112
   2228c:	e1bfff17 	ldw	r6,-4(fp)
   22290:	180b883a 	mov	r5,r3
   22294:	1009883a 	mov	r4,r2
   22298:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
        secp256k1_fe_mul(&r->x, &b->x, &bzinv2);
   2229c:	e0bffc17 	ldw	r2,-16(fp)
   222a0:	e0fffe17 	ldw	r3,-8(fp)
   222a4:	e13ff004 	addi	r4,fp,-64
   222a8:	200d883a 	mov	r6,r4
   222ac:	180b883a 	mov	r5,r3
   222b0:	1009883a 	mov	r4,r2
   222b4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
        secp256k1_fe_mul(&r->y, &b->y, &bzinv3);
   222b8:	e0bffc17 	ldw	r2,-16(fp)
   222bc:	10c00c04 	addi	r3,r2,48
   222c0:	e0bffe17 	ldw	r2,-8(fp)
   222c4:	10800c04 	addi	r2,r2,48
   222c8:	e13fe404 	addi	r4,fp,-112
   222cc:	200d883a 	mov	r6,r4
   222d0:	100b883a 	mov	r5,r2
   222d4:	1809883a 	mov	r4,r3
   222d8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
        secp256k1_fe_set_int(&r->z, 1);
   222dc:	e0bffc17 	ldw	r2,-16(fp)
   222e0:	10801804 	addi	r2,r2,96
   222e4:	01400044 	movi	r5,1
   222e8:	1009883a 	mov	r4,r2
   222ec:	00135c80 	call	135c8 <secp256k1_fe_set_int>
        return;
   222f0:	0001883a 	nop
   222f4:	00011106 	br	2273c <secp256k1_gej_add_zinv_var+0x534>
    }
    r->infinity = 0;
   222f8:	e0bffc17 	ldw	r2,-16(fp)
   222fc:	10002415 	stw	zero,144(r2)
     *  This means that (rx,ry,rz) can be calculated as
     *  (ax,ay,az*bzinv) + (bx,by,1), when not applying the bzinv factor to rz.
     *  The variable az below holds the modified Z coordinate for a, which is used
     *  for the computation of rx and ry, but not for rz.
     */
    secp256k1_fe_mul(&az, &a->z, bzinv);
   22300:	e0bffd17 	ldw	r2,-12(fp)
   22304:	10801804 	addi	r2,r2,96
   22308:	e1bfff17 	ldw	r6,-4(fp)
   2230c:	100b883a 	mov	r5,r2
   22310:	e13f5404 	addi	r4,fp,-688
   22314:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    secp256k1_fe_sqr(&z12, &az);
   22318:	e0bf6004 	addi	r2,fp,-640
   2231c:	e17f5404 	addi	r5,fp,-688
   22320:	1009883a 	mov	r4,r2
   22324:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    u1 = a->x; secp256k1_fe_normalize_weak(&u1);
   22328:	e0bffd17 	ldw	r2,-12(fp)
   2232c:	10c00017 	ldw	r3,0(r2)
   22330:	e0ff6c15 	stw	r3,-592(fp)
   22334:	10c00117 	ldw	r3,4(r2)
   22338:	e0ff6d15 	stw	r3,-588(fp)
   2233c:	10c00217 	ldw	r3,8(r2)
   22340:	e0ff6e15 	stw	r3,-584(fp)
   22344:	10c00317 	ldw	r3,12(r2)
   22348:	e0ff6f15 	stw	r3,-580(fp)
   2234c:	10c00417 	ldw	r3,16(r2)
   22350:	e0ff7015 	stw	r3,-576(fp)
   22354:	10c00517 	ldw	r3,20(r2)
   22358:	e0ff7115 	stw	r3,-572(fp)
   2235c:	10c00617 	ldw	r3,24(r2)
   22360:	e0ff7215 	stw	r3,-568(fp)
   22364:	10c00717 	ldw	r3,28(r2)
   22368:	e0ff7315 	stw	r3,-564(fp)
   2236c:	10c00817 	ldw	r3,32(r2)
   22370:	e0ff7415 	stw	r3,-560(fp)
   22374:	10c00917 	ldw	r3,36(r2)
   22378:	e0ff7515 	stw	r3,-556(fp)
   2237c:	10c00a17 	ldw	r3,40(r2)
   22380:	e0ff7615 	stw	r3,-552(fp)
   22384:	10800b17 	ldw	r2,44(r2)
   22388:	e0bf7715 	stw	r2,-548(fp)
   2238c:	e0bf6c04 	addi	r2,fp,-592
   22390:	1009883a 	mov	r4,r2
   22394:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&u2, &b->x, &z12);
   22398:	e0fffe17 	ldw	r3,-8(fp)
   2239c:	e13f6004 	addi	r4,fp,-640
   223a0:	e0bf7804 	addi	r2,fp,-544
   223a4:	200d883a 	mov	r6,r4
   223a8:	180b883a 	mov	r5,r3
   223ac:	1009883a 	mov	r4,r2
   223b0:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    s1 = a->y; secp256k1_fe_normalize_weak(&s1);
   223b4:	e0bffd17 	ldw	r2,-12(fp)
   223b8:	10c00c17 	ldw	r3,48(r2)
   223bc:	e0ff8415 	stw	r3,-496(fp)
   223c0:	10c00d17 	ldw	r3,52(r2)
   223c4:	e0ff8515 	stw	r3,-492(fp)
   223c8:	10c00e17 	ldw	r3,56(r2)
   223cc:	e0ff8615 	stw	r3,-488(fp)
   223d0:	10c00f17 	ldw	r3,60(r2)
   223d4:	e0ff8715 	stw	r3,-484(fp)
   223d8:	10c01017 	ldw	r3,64(r2)
   223dc:	e0ff8815 	stw	r3,-480(fp)
   223e0:	10c01117 	ldw	r3,68(r2)
   223e4:	e0ff8915 	stw	r3,-476(fp)
   223e8:	10c01217 	ldw	r3,72(r2)
   223ec:	e0ff8a15 	stw	r3,-472(fp)
   223f0:	10c01317 	ldw	r3,76(r2)
   223f4:	e0ff8b15 	stw	r3,-468(fp)
   223f8:	10c01417 	ldw	r3,80(r2)
   223fc:	e0ff8c15 	stw	r3,-464(fp)
   22400:	10c01517 	ldw	r3,84(r2)
   22404:	e0ff8d15 	stw	r3,-460(fp)
   22408:	10c01617 	ldw	r3,88(r2)
   2240c:	e0ff8e15 	stw	r3,-456(fp)
   22410:	10801717 	ldw	r2,92(r2)
   22414:	e0bf8f15 	stw	r2,-452(fp)
   22418:	e0bf8404 	addi	r2,fp,-496
   2241c:	1009883a 	mov	r4,r2
   22420:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &az);
   22424:	e0bffe17 	ldw	r2,-8(fp)
   22428:	10c00c04 	addi	r3,r2,48
   2242c:	e13f6004 	addi	r4,fp,-640
   22430:	e0bf9004 	addi	r2,fp,-448
   22434:	200d883a 	mov	r6,r4
   22438:	180b883a 	mov	r5,r3
   2243c:	1009883a 	mov	r4,r2
   22440:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
   22444:	e0ff9004 	addi	r3,fp,-448
   22448:	e0bf9004 	addi	r2,fp,-448
   2244c:	e1bf5404 	addi	r6,fp,-688
   22450:	180b883a 	mov	r5,r3
   22454:	1009883a 	mov	r4,r2
   22458:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);
   2245c:	e0ff6c04 	addi	r3,fp,-592
   22460:	e0bf9c04 	addi	r2,fp,-400
   22464:	01800044 	movi	r6,1
   22468:	180b883a 	mov	r5,r3
   2246c:	1009883a 	mov	r4,r2
   22470:	0013e240 	call	13e24 <secp256k1_fe_negate>
   22474:	e0ff7804 	addi	r3,fp,-544
   22478:	e0bf9c04 	addi	r2,fp,-400
   2247c:	180b883a 	mov	r5,r3
   22480:	1009883a 	mov	r4,r2
   22484:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
   22488:	e0ff8404 	addi	r3,fp,-496
   2248c:	e0bfa804 	addi	r2,fp,-352
   22490:	01800044 	movi	r6,1
   22494:	180b883a 	mov	r5,r3
   22498:	1009883a 	mov	r4,r2
   2249c:	0013e240 	call	13e24 <secp256k1_fe_negate>
   224a0:	e0ff9004 	addi	r3,fp,-448
   224a4:	e0bfa804 	addi	r2,fp,-352
   224a8:	180b883a 	mov	r5,r3
   224ac:	1009883a 	mov	r4,r2
   224b0:	00142340 	call	14234 <secp256k1_fe_add>
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
   224b4:	e0bf9c04 	addi	r2,fp,-400
   224b8:	1009883a 	mov	r4,r2
   224bc:	00131a00 	call	131a0 <secp256k1_fe_normalizes_to_zero_var>
   224c0:	10000d26 	beq	r2,zero,224f8 <secp256k1_gej_add_zinv_var+0x2f0>
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
   224c4:	e0bfa804 	addi	r2,fp,-352
   224c8:	1009883a 	mov	r4,r2
   224cc:	00131a00 	call	131a0 <secp256k1_fe_normalizes_to_zero_var>
   224d0:	10000526 	beq	r2,zero,224e8 <secp256k1_gej_add_zinv_var+0x2e0>
            secp256k1_gej_double_var(r, a, NULL);
   224d4:	000d883a 	mov	r6,zero
   224d8:	e17ffd17 	ldw	r5,-12(fp)
   224dc:	e13ffc17 	ldw	r4,-16(fp)
   224e0:	002148c0 	call	2148c <secp256k1_gej_double_var>
        } else {
            r->infinity = 1;
        }
        return;
   224e4:	00009506 	br	2273c <secp256k1_gej_add_zinv_var+0x534>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
            secp256k1_gej_double_var(r, a, NULL);
        } else {
            r->infinity = 1;
   224e8:	e0bffc17 	ldw	r2,-16(fp)
   224ec:	00c00044 	movi	r3,1
   224f0:	10c02415 	stw	r3,144(r2)
        }
        return;
   224f4:	00009106 	br	2273c <secp256k1_gej_add_zinv_var+0x534>
    }
    secp256k1_fe_sqr(&i2, &i);
   224f8:	e0ffa804 	addi	r3,fp,-352
   224fc:	e0bfb404 	addi	r2,fp,-304
   22500:	180b883a 	mov	r5,r3
   22504:	1009883a 	mov	r4,r2
   22508:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&h2, &h);
   2250c:	e0ff9c04 	addi	r3,fp,-400
   22510:	e0bfc004 	addi	r2,fp,-256
   22514:	180b883a 	mov	r5,r3
   22518:	1009883a 	mov	r4,r2
   2251c:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&h3, &h, &h2);
   22520:	e13fc004 	addi	r4,fp,-256
   22524:	e0ff9c04 	addi	r3,fp,-400
   22528:	e0bfcc04 	addi	r2,fp,-208
   2252c:	200d883a 	mov	r6,r4
   22530:	180b883a 	mov	r5,r3
   22534:	1009883a 	mov	r4,r2
   22538:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    r->z = a->z; secp256k1_fe_mul(&r->z, &r->z, &h);
   2253c:	e0bffc17 	ldw	r2,-16(fp)
   22540:	e0fffd17 	ldw	r3,-12(fp)
   22544:	19001817 	ldw	r4,96(r3)
   22548:	11001815 	stw	r4,96(r2)
   2254c:	19001917 	ldw	r4,100(r3)
   22550:	11001915 	stw	r4,100(r2)
   22554:	19001a17 	ldw	r4,104(r3)
   22558:	11001a15 	stw	r4,104(r2)
   2255c:	19001b17 	ldw	r4,108(r3)
   22560:	11001b15 	stw	r4,108(r2)
   22564:	19001c17 	ldw	r4,112(r3)
   22568:	11001c15 	stw	r4,112(r2)
   2256c:	19001d17 	ldw	r4,116(r3)
   22570:	11001d15 	stw	r4,116(r2)
   22574:	19001e17 	ldw	r4,120(r3)
   22578:	11001e15 	stw	r4,120(r2)
   2257c:	19001f17 	ldw	r4,124(r3)
   22580:	11001f15 	stw	r4,124(r2)
   22584:	19002017 	ldw	r4,128(r3)
   22588:	11002015 	stw	r4,128(r2)
   2258c:	19002117 	ldw	r4,132(r3)
   22590:	11002115 	stw	r4,132(r2)
   22594:	19002217 	ldw	r4,136(r3)
   22598:	11002215 	stw	r4,136(r2)
   2259c:	18c02317 	ldw	r3,140(r3)
   225a0:	10c02315 	stw	r3,140(r2)
   225a4:	e0bffc17 	ldw	r2,-16(fp)
   225a8:	10c01804 	addi	r3,r2,96
   225ac:	e0bffc17 	ldw	r2,-16(fp)
   225b0:	10801804 	addi	r2,r2,96
   225b4:	e13f9c04 	addi	r4,fp,-400
   225b8:	200d883a 	mov	r6,r4
   225bc:	100b883a 	mov	r5,r2
   225c0:	1809883a 	mov	r4,r3
   225c4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&t, &u1, &h2);
   225c8:	e13fc004 	addi	r4,fp,-256
   225cc:	e0ff6c04 	addi	r3,fp,-592
   225d0:	e0bfd804 	addi	r2,fp,-160
   225d4:	200d883a 	mov	r6,r4
   225d8:	180b883a 	mov	r5,r3
   225dc:	1009883a 	mov	r4,r2
   225e0:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);
   225e4:	e0bffc17 	ldw	r2,-16(fp)
   225e8:	e0ffd817 	ldw	r3,-160(fp)
   225ec:	10c00015 	stw	r3,0(r2)
   225f0:	e0ffd917 	ldw	r3,-156(fp)
   225f4:	10c00115 	stw	r3,4(r2)
   225f8:	e0ffda17 	ldw	r3,-152(fp)
   225fc:	10c00215 	stw	r3,8(r2)
   22600:	e0ffdb17 	ldw	r3,-148(fp)
   22604:	10c00315 	stw	r3,12(r2)
   22608:	e0ffdc17 	ldw	r3,-144(fp)
   2260c:	10c00415 	stw	r3,16(r2)
   22610:	e0ffdd17 	ldw	r3,-140(fp)
   22614:	10c00515 	stw	r3,20(r2)
   22618:	e0ffde17 	ldw	r3,-136(fp)
   2261c:	10c00615 	stw	r3,24(r2)
   22620:	e0ffdf17 	ldw	r3,-132(fp)
   22624:	10c00715 	stw	r3,28(r2)
   22628:	e0ffe017 	ldw	r3,-128(fp)
   2262c:	10c00815 	stw	r3,32(r2)
   22630:	e0ffe117 	ldw	r3,-124(fp)
   22634:	10c00915 	stw	r3,36(r2)
   22638:	e0ffe217 	ldw	r3,-120(fp)
   2263c:	10c00a15 	stw	r3,40(r2)
   22640:	e0ffe317 	ldw	r3,-116(fp)
   22644:	10c00b15 	stw	r3,44(r2)
   22648:	e0bffc17 	ldw	r2,-16(fp)
   2264c:	01400084 	movi	r5,2
   22650:	1009883a 	mov	r4,r2
   22654:	001406c0 	call	1406c <secp256k1_fe_mul_int>
   22658:	e0bffc17 	ldw	r2,-16(fp)
   2265c:	e0ffcc04 	addi	r3,fp,-208
   22660:	180b883a 	mov	r5,r3
   22664:	1009883a 	mov	r4,r2
   22668:	00142340 	call	14234 <secp256k1_fe_add>
   2266c:	e0bffc17 	ldw	r2,-16(fp)
   22670:	e0fffc17 	ldw	r3,-16(fp)
   22674:	018000c4 	movi	r6,3
   22678:	180b883a 	mov	r5,r3
   2267c:	1009883a 	mov	r4,r2
   22680:	0013e240 	call	13e24 <secp256k1_fe_negate>
   22684:	e0bffc17 	ldw	r2,-16(fp)
   22688:	e0ffb404 	addi	r3,fp,-304
   2268c:	180b883a 	mov	r5,r3
   22690:	1009883a 	mov	r4,r2
   22694:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);
   22698:	e0bffc17 	ldw	r2,-16(fp)
   2269c:	10800c04 	addi	r2,r2,48
   226a0:	e0fffc17 	ldw	r3,-16(fp)
   226a4:	01800144 	movi	r6,5
   226a8:	180b883a 	mov	r5,r3
   226ac:	1009883a 	mov	r4,r2
   226b0:	0013e240 	call	13e24 <secp256k1_fe_negate>
   226b4:	e0bffc17 	ldw	r2,-16(fp)
   226b8:	10800c04 	addi	r2,r2,48
   226bc:	e0ffd804 	addi	r3,fp,-160
   226c0:	180b883a 	mov	r5,r3
   226c4:	1009883a 	mov	r4,r2
   226c8:	00142340 	call	14234 <secp256k1_fe_add>
   226cc:	e0bffc17 	ldw	r2,-16(fp)
   226d0:	10c00c04 	addi	r3,r2,48
   226d4:	e0bffc17 	ldw	r2,-16(fp)
   226d8:	10800c04 	addi	r2,r2,48
   226dc:	e13fa804 	addi	r4,fp,-352
   226e0:	200d883a 	mov	r6,r4
   226e4:	100b883a 	mov	r5,r2
   226e8:	1809883a 	mov	r4,r3
   226ec:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);
   226f0:	e13f8404 	addi	r4,fp,-496
   226f4:	e0ffcc04 	addi	r3,fp,-208
   226f8:	e0bfcc04 	addi	r2,fp,-208
   226fc:	200d883a 	mov	r6,r4
   22700:	180b883a 	mov	r5,r3
   22704:	1009883a 	mov	r4,r2
   22708:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
   2270c:	e0ffcc04 	addi	r3,fp,-208
   22710:	e0bfcc04 	addi	r2,fp,-208
   22714:	01800044 	movi	r6,1
   22718:	180b883a 	mov	r5,r3
   2271c:	1009883a 	mov	r4,r2
   22720:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->y, &h3);
   22724:	e0bffc17 	ldw	r2,-16(fp)
   22728:	10800c04 	addi	r2,r2,48
   2272c:	e0ffcc04 	addi	r3,fp,-208
   22730:	180b883a 	mov	r5,r3
   22734:	1009883a 	mov	r4,r2
   22738:	00142340 	call	14234 <secp256k1_fe_add>
}
   2273c:	e037883a 	mov	sp,fp
   22740:	dfc00117 	ldw	ra,4(sp)
   22744:	df000017 	ldw	fp,0(sp)
   22748:	dec00204 	addi	sp,sp,8
   2274c:	f800283a 	ret

00022750 <secp256k1_gej_add_ge>:


static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b) {
   22750:	deff5b04 	addi	sp,sp,-660
   22754:	dfc0a415 	stw	ra,656(sp)
   22758:	df00a315 	stw	fp,652(sp)
   2275c:	dc00a215 	stw	r16,648(sp)
   22760:	df00a304 	addi	fp,sp,652
   22764:	e13ffc15 	stw	r4,-16(fp)
   22768:	e17ffd15 	stw	r5,-12(fp)
   2276c:	e1bffe15 	stw	r6,-8(fp)
    /* Operations: 7 mul, 5 sqr, 4 normalize, 21 mul_int/add/negate/cmov */
    static const secp256k1_fe fe_1 = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);
    secp256k1_fe zz, u1, u2, s1, s2, t, tt, m, n, q, rr;
    secp256k1_fe m_alt, rr_alt;
    int infinity, degenerate;
    VERIFY_CHECK(!b->infinity);
   22770:	e0bffe17 	ldw	r2,-8(fp)
   22774:	10801817 	ldw	r2,96(r2)
   22778:	1004c03a 	cmpne	r2,r2,zero
   2277c:	10803fcc 	andi	r2,r2,255
   22780:	10000d26 	beq	r2,zero,227b8 <secp256k1_gej_add_ge+0x68>
   22784:	d0a01617 	ldw	r2,-32680(gp)
   22788:	10c00317 	ldw	r3,12(r2)
   2278c:	008001b4 	movhi	r2,6
   22790:	10af6e04 	addi	r2,r2,-16968
   22794:	d8800015 	stw	r2,0(sp)
   22798:	01c07704 	movi	r7,476
   2279c:	018001b4 	movhi	r6,6
   227a0:	31af4504 	addi	r6,r6,-17132
   227a4:	014001b4 	movhi	r5,6
   227a8:	296b3804 	addi	r5,r5,-21280
   227ac:	1809883a 	mov	r4,r3
   227b0:	00452600 	call	45260 <fprintf>
   227b4:	00450340 	call	45034 <abort>
    VERIFY_CHECK(a->infinity == 0 || a->infinity == 1);
   227b8:	e0bffd17 	ldw	r2,-12(fp)
   227bc:	10802417 	ldw	r2,144(r2)
   227c0:	1004c03a 	cmpne	r2,r2,zero
   227c4:	10803fcc 	andi	r2,r2,255
   227c8:	10001226 	beq	r2,zero,22814 <secp256k1_gej_add_ge+0xc4>
   227cc:	e0bffd17 	ldw	r2,-12(fp)
   227d0:	10802417 	ldw	r2,144(r2)
   227d4:	10800058 	cmpnei	r2,r2,1
   227d8:	10803fcc 	andi	r2,r2,255
   227dc:	10000d26 	beq	r2,zero,22814 <secp256k1_gej_add_ge+0xc4>
   227e0:	d0a01617 	ldw	r2,-32680(gp)
   227e4:	10c00317 	ldw	r3,12(r2)
   227e8:	008001b4 	movhi	r2,6
   227ec:	10af7704 	addi	r2,r2,-16932
   227f0:	d8800015 	stw	r2,0(sp)
   227f4:	01c07744 	movi	r7,477
   227f8:	018001b4 	movhi	r6,6
   227fc:	31af4504 	addi	r6,r6,-17132
   22800:	014001b4 	movhi	r5,6
   22804:	296b3804 	addi	r5,r5,-21280
   22808:	1809883a 	mov	r4,r3
   2280c:	00452600 	call	45260 <fprintf>
   22810:	00450340 	call	45034 <abort>
     *      then substitution of x^3 + 7 for y^2 (using the curve equation).
     *      For all pairs of nonzero points (a, b) at least one is defined,
     *      so this covers everything.
     */

    secp256k1_fe_sqr(&zz, &a->z);                       /* z = Z1^2 */
   22814:	e0bffd17 	ldw	r2,-12(fp)
   22818:	10c01804 	addi	r3,r2,96
   2281c:	e0bf6004 	addi	r2,fp,-640
   22820:	180b883a 	mov	r5,r3
   22824:	1009883a 	mov	r4,r2
   22828:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    u1 = a->x; secp256k1_fe_normalize_weak(&u1);        /* u1 = U1 = X1*Z2^2 (1) */
   2282c:	e0bffd17 	ldw	r2,-12(fp)
   22830:	10c00017 	ldw	r3,0(r2)
   22834:	e0ff6c15 	stw	r3,-592(fp)
   22838:	10c00117 	ldw	r3,4(r2)
   2283c:	e0ff6d15 	stw	r3,-588(fp)
   22840:	10c00217 	ldw	r3,8(r2)
   22844:	e0ff6e15 	stw	r3,-584(fp)
   22848:	10c00317 	ldw	r3,12(r2)
   2284c:	e0ff6f15 	stw	r3,-580(fp)
   22850:	10c00417 	ldw	r3,16(r2)
   22854:	e0ff7015 	stw	r3,-576(fp)
   22858:	10c00517 	ldw	r3,20(r2)
   2285c:	e0ff7115 	stw	r3,-572(fp)
   22860:	10c00617 	ldw	r3,24(r2)
   22864:	e0ff7215 	stw	r3,-568(fp)
   22868:	10c00717 	ldw	r3,28(r2)
   2286c:	e0ff7315 	stw	r3,-564(fp)
   22870:	10c00817 	ldw	r3,32(r2)
   22874:	e0ff7415 	stw	r3,-560(fp)
   22878:	10c00917 	ldw	r3,36(r2)
   2287c:	e0ff7515 	stw	r3,-556(fp)
   22880:	10c00a17 	ldw	r3,40(r2)
   22884:	e0ff7615 	stw	r3,-552(fp)
   22888:	10800b17 	ldw	r2,44(r2)
   2288c:	e0bf7715 	stw	r2,-548(fp)
   22890:	e0bf6c04 	addi	r2,fp,-592
   22894:	1009883a 	mov	r4,r2
   22898:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&u2, &b->x, &zz);                  /* u2 = U2 = X2*Z1^2 (1) */
   2289c:	e0fffe17 	ldw	r3,-8(fp)
   228a0:	e13f6004 	addi	r4,fp,-640
   228a4:	e0bf7804 	addi	r2,fp,-544
   228a8:	200d883a 	mov	r6,r4
   228ac:	180b883a 	mov	r5,r3
   228b0:	1009883a 	mov	r4,r2
   228b4:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    s1 = a->y; secp256k1_fe_normalize_weak(&s1);        /* s1 = S1 = Y1*Z2^3 (1) */
   228b8:	e0bffd17 	ldw	r2,-12(fp)
   228bc:	10c00c17 	ldw	r3,48(r2)
   228c0:	e0ff8415 	stw	r3,-496(fp)
   228c4:	10c00d17 	ldw	r3,52(r2)
   228c8:	e0ff8515 	stw	r3,-492(fp)
   228cc:	10c00e17 	ldw	r3,56(r2)
   228d0:	e0ff8615 	stw	r3,-488(fp)
   228d4:	10c00f17 	ldw	r3,60(r2)
   228d8:	e0ff8715 	stw	r3,-484(fp)
   228dc:	10c01017 	ldw	r3,64(r2)
   228e0:	e0ff8815 	stw	r3,-480(fp)
   228e4:	10c01117 	ldw	r3,68(r2)
   228e8:	e0ff8915 	stw	r3,-476(fp)
   228ec:	10c01217 	ldw	r3,72(r2)
   228f0:	e0ff8a15 	stw	r3,-472(fp)
   228f4:	10c01317 	ldw	r3,76(r2)
   228f8:	e0ff8b15 	stw	r3,-468(fp)
   228fc:	10c01417 	ldw	r3,80(r2)
   22900:	e0ff8c15 	stw	r3,-464(fp)
   22904:	10c01517 	ldw	r3,84(r2)
   22908:	e0ff8d15 	stw	r3,-460(fp)
   2290c:	10c01617 	ldw	r3,88(r2)
   22910:	e0ff8e15 	stw	r3,-456(fp)
   22914:	10801717 	ldw	r2,92(r2)
   22918:	e0bf8f15 	stw	r2,-452(fp)
   2291c:	e0bf8404 	addi	r2,fp,-496
   22920:	1009883a 	mov	r4,r2
   22924:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&s2, &b->y, &zz);                  /* s2 = Y2*Z1^2 (1) */
   22928:	e0bffe17 	ldw	r2,-8(fp)
   2292c:	10c00c04 	addi	r3,r2,48
   22930:	e13f6004 	addi	r4,fp,-640
   22934:	e0bf9004 	addi	r2,fp,-448
   22938:	200d883a 	mov	r6,r4
   2293c:	180b883a 	mov	r5,r3
   22940:	1009883a 	mov	r4,r2
   22944:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&s2, &s2, &a->z);                  /* s2 = S2 = Y2*Z1^3 (1) */
   22948:	e0bffd17 	ldw	r2,-12(fp)
   2294c:	11001804 	addi	r4,r2,96
   22950:	e0ff9004 	addi	r3,fp,-448
   22954:	e0bf9004 	addi	r2,fp,-448
   22958:	200d883a 	mov	r6,r4
   2295c:	180b883a 	mov	r5,r3
   22960:	1009883a 	mov	r4,r2
   22964:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */
   22968:	e0bf6c17 	ldw	r2,-592(fp)
   2296c:	e0bf9c15 	stw	r2,-400(fp)
   22970:	e0bf6d17 	ldw	r2,-588(fp)
   22974:	e0bf9d15 	stw	r2,-396(fp)
   22978:	e0bf6e17 	ldw	r2,-584(fp)
   2297c:	e0bf9e15 	stw	r2,-392(fp)
   22980:	e0bf6f17 	ldw	r2,-580(fp)
   22984:	e0bf9f15 	stw	r2,-388(fp)
   22988:	e0bf7017 	ldw	r2,-576(fp)
   2298c:	e0bfa015 	stw	r2,-384(fp)
   22990:	e0bf7117 	ldw	r2,-572(fp)
   22994:	e0bfa115 	stw	r2,-380(fp)
   22998:	e0bf7217 	ldw	r2,-568(fp)
   2299c:	e0bfa215 	stw	r2,-376(fp)
   229a0:	e0bf7317 	ldw	r2,-564(fp)
   229a4:	e0bfa315 	stw	r2,-372(fp)
   229a8:	e0bf7417 	ldw	r2,-560(fp)
   229ac:	e0bfa415 	stw	r2,-368(fp)
   229b0:	e0bf7517 	ldw	r2,-556(fp)
   229b4:	e0bfa515 	stw	r2,-364(fp)
   229b8:	e0bf7617 	ldw	r2,-552(fp)
   229bc:	e0bfa615 	stw	r2,-360(fp)
   229c0:	e0bf7717 	ldw	r2,-548(fp)
   229c4:	e0bfa715 	stw	r2,-356(fp)
   229c8:	e0ff7804 	addi	r3,fp,-544
   229cc:	e0bf9c04 	addi	r2,fp,-400
   229d0:	180b883a 	mov	r5,r3
   229d4:	1009883a 	mov	r4,r2
   229d8:	00142340 	call	14234 <secp256k1_fe_add>
    m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */
   229dc:	e0bf8417 	ldw	r2,-496(fp)
   229e0:	e0bfb415 	stw	r2,-304(fp)
   229e4:	e0bf8517 	ldw	r2,-492(fp)
   229e8:	e0bfb515 	stw	r2,-300(fp)
   229ec:	e0bf8617 	ldw	r2,-488(fp)
   229f0:	e0bfb615 	stw	r2,-296(fp)
   229f4:	e0bf8717 	ldw	r2,-484(fp)
   229f8:	e0bfb715 	stw	r2,-292(fp)
   229fc:	e0bf8817 	ldw	r2,-480(fp)
   22a00:	e0bfb815 	stw	r2,-288(fp)
   22a04:	e0bf8917 	ldw	r2,-476(fp)
   22a08:	e0bfb915 	stw	r2,-284(fp)
   22a0c:	e0bf8a17 	ldw	r2,-472(fp)
   22a10:	e0bfba15 	stw	r2,-280(fp)
   22a14:	e0bf8b17 	ldw	r2,-468(fp)
   22a18:	e0bfbb15 	stw	r2,-276(fp)
   22a1c:	e0bf8c17 	ldw	r2,-464(fp)
   22a20:	e0bfbc15 	stw	r2,-272(fp)
   22a24:	e0bf8d17 	ldw	r2,-460(fp)
   22a28:	e0bfbd15 	stw	r2,-268(fp)
   22a2c:	e0bf8e17 	ldw	r2,-456(fp)
   22a30:	e0bfbe15 	stw	r2,-264(fp)
   22a34:	e0bf8f17 	ldw	r2,-452(fp)
   22a38:	e0bfbf15 	stw	r2,-260(fp)
   22a3c:	e0ff9004 	addi	r3,fp,-448
   22a40:	e0bfb404 	addi	r2,fp,-304
   22a44:	180b883a 	mov	r5,r3
   22a48:	1009883a 	mov	r4,r2
   22a4c:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */
   22a50:	e0ff9c04 	addi	r3,fp,-400
   22a54:	e0bfd804 	addi	r2,fp,-160
   22a58:	180b883a 	mov	r5,r3
   22a5c:	1009883a 	mov	r4,r2
   22a60:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_negate(&m_alt, &u2, 1);                /* Malt = -X2*Z1^2 */
   22a64:	e0ff7804 	addi	r3,fp,-544
   22a68:	e0bfe404 	addi	r2,fp,-112
   22a6c:	01800044 	movi	r6,1
   22a70:	180b883a 	mov	r5,r3
   22a74:	1009883a 	mov	r4,r2
   22a78:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_mul(&tt, &u1, &m_alt);                 /* tt = -U1*U2 (2) */
   22a7c:	e13fe404 	addi	r4,fp,-112
   22a80:	e0ff6c04 	addi	r3,fp,-592
   22a84:	e0bfa804 	addi	r2,fp,-352
   22a88:	200d883a 	mov	r6,r4
   22a8c:	180b883a 	mov	r5,r3
   22a90:	1009883a 	mov	r4,r2
   22a94:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_add(&rr, &tt);                         /* rr = R = T^2-U1*U2 (3) */
   22a98:	e0ffa804 	addi	r3,fp,-352
   22a9c:	e0bfd804 	addi	r2,fp,-160
   22aa0:	180b883a 	mov	r5,r3
   22aa4:	1009883a 	mov	r4,r2
   22aa8:	00142340 	call	14234 <secp256k1_fe_add>
    /** If lambda = R/M = 0/0 we have a problem (except in the "trivial"
     *  case that Z = z1z2 = 0, and this is special-cased later on). */
    degenerate = secp256k1_fe_normalizes_to_zero(&m) &
   22aac:	e0bfb404 	addi	r2,fp,-304
   22ab0:	1009883a 	mov	r4,r2
   22ab4:	0012da00 	call	12da0 <secp256k1_fe_normalizes_to_zero>
   22ab8:	1021883a 	mov	r16,r2
                 secp256k1_fe_normalizes_to_zero(&rr);
   22abc:	e0bfd804 	addi	r2,fp,-160
   22ac0:	1009883a 	mov	r4,r2
   22ac4:	0012da00 	call	12da0 <secp256k1_fe_normalizes_to_zero>
    secp256k1_fe_negate(&m_alt, &u2, 1);                /* Malt = -X2*Z1^2 */
    secp256k1_fe_mul(&tt, &u1, &m_alt);                 /* tt = -U1*U2 (2) */
    secp256k1_fe_add(&rr, &tt);                         /* rr = R = T^2-U1*U2 (3) */
    /** If lambda = R/M = 0/0 we have a problem (except in the "trivial"
     *  case that Z = z1z2 = 0, and this is special-cased later on). */
    degenerate = secp256k1_fe_normalizes_to_zero(&m) &
   22ac8:	8084703a 	and	r2,r16,r2
   22acc:	e0bf5e15 	stw	r2,-648(fp)
    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.
     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is
     * a nontrivial cube root of one. In either case, an alternate
     * non-indeterminate expression for lambda is (y1 - y2)/(x1 - x2),
     * so we set R/M equal to this. */
    rr_alt = s1;
   22ad0:	e0bf8417 	ldw	r2,-496(fp)
   22ad4:	e0bff015 	stw	r2,-64(fp)
   22ad8:	e0bf8517 	ldw	r2,-492(fp)
   22adc:	e0bff115 	stw	r2,-60(fp)
   22ae0:	e0bf8617 	ldw	r2,-488(fp)
   22ae4:	e0bff215 	stw	r2,-56(fp)
   22ae8:	e0bf8717 	ldw	r2,-484(fp)
   22aec:	e0bff315 	stw	r2,-52(fp)
   22af0:	e0bf8817 	ldw	r2,-480(fp)
   22af4:	e0bff415 	stw	r2,-48(fp)
   22af8:	e0bf8917 	ldw	r2,-476(fp)
   22afc:	e0bff515 	stw	r2,-44(fp)
   22b00:	e0bf8a17 	ldw	r2,-472(fp)
   22b04:	e0bff615 	stw	r2,-40(fp)
   22b08:	e0bf8b17 	ldw	r2,-468(fp)
   22b0c:	e0bff715 	stw	r2,-36(fp)
   22b10:	e0bf8c17 	ldw	r2,-464(fp)
   22b14:	e0bff815 	stw	r2,-32(fp)
   22b18:	e0bf8d17 	ldw	r2,-460(fp)
   22b1c:	e0bff915 	stw	r2,-28(fp)
   22b20:	e0bf8e17 	ldw	r2,-456(fp)
   22b24:	e0bffa15 	stw	r2,-24(fp)
   22b28:	e0bf8f17 	ldw	r2,-452(fp)
   22b2c:	e0bffb15 	stw	r2,-20(fp)
    secp256k1_fe_mul_int(&rr_alt, 2);       /* rr = Y1*Z2^3 - Y2*Z1^3 (2) */
   22b30:	e0bff004 	addi	r2,fp,-64
   22b34:	01400084 	movi	r5,2
   22b38:	1009883a 	mov	r4,r2
   22b3c:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_add(&m_alt, &u1);          /* Malt = X1*Z2^2 - X2*Z1^2 */
   22b40:	e0ff6c04 	addi	r3,fp,-592
   22b44:	e0bfe404 	addi	r2,fp,-112
   22b48:	180b883a 	mov	r5,r3
   22b4c:	1009883a 	mov	r4,r2
   22b50:	00142340 	call	14234 <secp256k1_fe_add>

    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);
   22b54:	e0bf5e17 	ldw	r2,-648(fp)
   22b58:	1005003a 	cmpeq	r2,r2,zero
   22b5c:	11003fcc 	andi	r4,r2,255
   22b60:	e0ffd804 	addi	r3,fp,-160
   22b64:	e0bff004 	addi	r2,fp,-64
   22b68:	200d883a 	mov	r6,r4
   22b6c:	180b883a 	mov	r5,r3
   22b70:	1009883a 	mov	r4,r2
   22b74:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
    secp256k1_fe_cmov(&m_alt, &m, !degenerate);
   22b78:	e0bf5e17 	ldw	r2,-648(fp)
   22b7c:	1005003a 	cmpeq	r2,r2,zero
   22b80:	11003fcc 	andi	r4,r2,255
   22b84:	e0ffb404 	addi	r3,fp,-304
   22b88:	e0bfe404 	addi	r2,fp,-112
   22b8c:	200d883a 	mov	r6,r4
   22b90:	180b883a 	mov	r5,r3
   22b94:	1009883a 	mov	r4,r2
   22b98:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.
     * From here on out Ralt and Malt represent the numerator
     * and denominator of lambda; R and M represent the explicit
     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */
    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */
   22b9c:	e0ffe404 	addi	r3,fp,-112
   22ba0:	e0bfc004 	addi	r2,fp,-256
   22ba4:	180b883a 	mov	r5,r3
   22ba8:	1009883a 	mov	r4,r2
   22bac:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*Malt^2 (1) */
   22bb0:	e13f9c04 	addi	r4,fp,-400
   22bb4:	e0ffc004 	addi	r3,fp,-256
   22bb8:	e0bfcc04 	addi	r2,fp,-208
   22bbc:	200d883a 	mov	r6,r4
   22bc0:	180b883a 	mov	r5,r3
   22bc4:	1009883a 	mov	r4,r2
   22bc8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    /* These two lines use the observation that either M == Malt or M == 0,
     * so M^3 * Malt is either Malt^4 (which is computed by squaring), or
     * zero (which is "computed" by cmov). So the cost is one squaring
     * versus two multiplications. */
    secp256k1_fe_sqr(&n, &n);
   22bcc:	e0ffc004 	addi	r3,fp,-256
   22bd0:	e0bfc004 	addi	r2,fp,-256
   22bd4:	180b883a 	mov	r5,r3
   22bd8:	1009883a 	mov	r4,r2
   22bdc:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_cmov(&n, &m, degenerate);              /* n = M^3 * Malt (2) */
   22be0:	e0ffb404 	addi	r3,fp,-304
   22be4:	e0bfc004 	addi	r2,fp,-256
   22be8:	e1bf5e17 	ldw	r6,-648(fp)
   22bec:	180b883a 	mov	r5,r3
   22bf0:	1009883a 	mov	r4,r2
   22bf4:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
    secp256k1_fe_sqr(&t, &rr_alt);                      /* t = Ralt^2 (1) */
   22bf8:	e0fff004 	addi	r3,fp,-64
   22bfc:	e0bf9c04 	addi	r2,fp,-400
   22c00:	180b883a 	mov	r5,r3
   22c04:	1009883a 	mov	r4,r2
   22c08:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&r->z, &a->z, &m_alt);             /* r->z = Malt*Z (1) */
   22c0c:	e0bffc17 	ldw	r2,-16(fp)
   22c10:	10c01804 	addi	r3,r2,96
   22c14:	e0bffd17 	ldw	r2,-12(fp)
   22c18:	10801804 	addi	r2,r2,96
   22c1c:	e13fe404 	addi	r4,fp,-112
   22c20:	200d883a 	mov	r6,r4
   22c24:	100b883a 	mov	r5,r2
   22c28:	1809883a 	mov	r4,r3
   22c2c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);
   22c30:	e0bffc17 	ldw	r2,-16(fp)
   22c34:	10801804 	addi	r2,r2,96
   22c38:	1009883a 	mov	r4,r2
   22c3c:	0012da00 	call	12da0 <secp256k1_fe_normalizes_to_zero>
   22c40:	1009883a 	mov	r4,r2
   22c44:	e0bffd17 	ldw	r2,-12(fp)
   22c48:	10802417 	ldw	r2,144(r2)
   22c4c:	00c00044 	movi	r3,1
   22c50:	1885c83a 	sub	r2,r3,r2
   22c54:	100b883a 	mov	r5,r2
   22c58:	0042b540 	call	42b54 <__mulsi3>
   22c5c:	e0bf5f15 	stw	r2,-644(fp)
    secp256k1_fe_mul_int(&r->z, 2);                     /* r->z = Z3 = 2*Malt*Z (2) */
   22c60:	e0bffc17 	ldw	r2,-16(fp)
   22c64:	10801804 	addi	r2,r2,96
   22c68:	01400084 	movi	r5,2
   22c6c:	1009883a 	mov	r4,r2
   22c70:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_negate(&q, &q, 1);                     /* q = -Q (2) */
   22c74:	e0ffcc04 	addi	r3,fp,-208
   22c78:	e0bfcc04 	addi	r2,fp,-208
   22c7c:	01800044 	movi	r6,1
   22c80:	180b883a 	mov	r5,r3
   22c84:	1009883a 	mov	r4,r2
   22c88:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_add(&t, &q);                           /* t = Ralt^2-Q (3) */
   22c8c:	e0ffcc04 	addi	r3,fp,-208
   22c90:	e0bf9c04 	addi	r2,fp,-400
   22c94:	180b883a 	mov	r5,r3
   22c98:	1009883a 	mov	r4,r2
   22c9c:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_normalize_weak(&t);
   22ca0:	e0bf9c04 	addi	r2,fp,-400
   22ca4:	1009883a 	mov	r4,r2
   22ca8:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    r->x = t;                                           /* r->x = Ralt^2-Q (1) */
   22cac:	e0bffc17 	ldw	r2,-16(fp)
   22cb0:	e0ff9c17 	ldw	r3,-400(fp)
   22cb4:	10c00015 	stw	r3,0(r2)
   22cb8:	e0ff9d17 	ldw	r3,-396(fp)
   22cbc:	10c00115 	stw	r3,4(r2)
   22cc0:	e0ff9e17 	ldw	r3,-392(fp)
   22cc4:	10c00215 	stw	r3,8(r2)
   22cc8:	e0ff9f17 	ldw	r3,-388(fp)
   22ccc:	10c00315 	stw	r3,12(r2)
   22cd0:	e0ffa017 	ldw	r3,-384(fp)
   22cd4:	10c00415 	stw	r3,16(r2)
   22cd8:	e0ffa117 	ldw	r3,-380(fp)
   22cdc:	10c00515 	stw	r3,20(r2)
   22ce0:	e0ffa217 	ldw	r3,-376(fp)
   22ce4:	10c00615 	stw	r3,24(r2)
   22ce8:	e0ffa317 	ldw	r3,-372(fp)
   22cec:	10c00715 	stw	r3,28(r2)
   22cf0:	e0ffa417 	ldw	r3,-368(fp)
   22cf4:	10c00815 	stw	r3,32(r2)
   22cf8:	e0ffa517 	ldw	r3,-364(fp)
   22cfc:	10c00915 	stw	r3,36(r2)
   22d00:	e0ffa617 	ldw	r3,-360(fp)
   22d04:	10c00a15 	stw	r3,40(r2)
   22d08:	e0ffa717 	ldw	r3,-356(fp)
   22d0c:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_mul_int(&t, 2);                        /* t = 2*x3 (2) */
   22d10:	e0bf9c04 	addi	r2,fp,-400
   22d14:	01400084 	movi	r5,2
   22d18:	1009883a 	mov	r4,r2
   22d1c:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_add(&t, &q);                           /* t = 2*x3 - Q: (4) */
   22d20:	e0ffcc04 	addi	r3,fp,-208
   22d24:	e0bf9c04 	addi	r2,fp,-400
   22d28:	180b883a 	mov	r5,r3
   22d2c:	1009883a 	mov	r4,r2
   22d30:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_mul(&t, &t, &rr_alt);                  /* t = Ralt*(2*x3 - Q) (1) */
   22d34:	e13ff004 	addi	r4,fp,-64
   22d38:	e0ff9c04 	addi	r3,fp,-400
   22d3c:	e0bf9c04 	addi	r2,fp,-400
   22d40:	200d883a 	mov	r6,r4
   22d44:	180b883a 	mov	r5,r3
   22d48:	1009883a 	mov	r4,r2
   22d4c:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_add(&t, &n);                           /* t = Ralt*(2*x3 - Q) + M^3*Malt (3) */
   22d50:	e0ffc004 	addi	r3,fp,-256
   22d54:	e0bf9c04 	addi	r2,fp,-400
   22d58:	180b883a 	mov	r5,r3
   22d5c:	1009883a 	mov	r4,r2
   22d60:	00142340 	call	14234 <secp256k1_fe_add>
    secp256k1_fe_negate(&r->y, &t, 3);                  /* r->y = Ralt*(Q - 2x3) - M^3*Malt (4) */
   22d64:	e0bffc17 	ldw	r2,-16(fp)
   22d68:	10800c04 	addi	r2,r2,48
   22d6c:	e0ff9c04 	addi	r3,fp,-400
   22d70:	018000c4 	movi	r6,3
   22d74:	180b883a 	mov	r5,r3
   22d78:	1009883a 	mov	r4,r2
   22d7c:	0013e240 	call	13e24 <secp256k1_fe_negate>
    secp256k1_fe_normalize_weak(&r->y);
   22d80:	e0bffc17 	ldw	r2,-16(fp)
   22d84:	10800c04 	addi	r2,r2,48
   22d88:	1009883a 	mov	r4,r2
   22d8c:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul_int(&r->x, 4);                     /* r->x = X3 = 4*(Ralt^2-Q) */
   22d90:	e0bffc17 	ldw	r2,-16(fp)
   22d94:	01400104 	movi	r5,4
   22d98:	1009883a 	mov	r4,r2
   22d9c:	001406c0 	call	1406c <secp256k1_fe_mul_int>
    secp256k1_fe_mul_int(&r->y, 4);                     /* r->y = Y3 = 4*Ralt*(Q - 2x3) - 4*M^3*Malt (4) */
   22da0:	e0bffc17 	ldw	r2,-16(fp)
   22da4:	10800c04 	addi	r2,r2,48
   22da8:	01400104 	movi	r5,4
   22dac:	1009883a 	mov	r4,r2
   22db0:	001406c0 	call	1406c <secp256k1_fe_mul_int>

    /** In case a->infinity == 1, replace r with (b->x, b->y, 1). */
    secp256k1_fe_cmov(&r->x, &b->x, a->infinity);
   22db4:	e0fffc17 	ldw	r3,-16(fp)
   22db8:	e13ffe17 	ldw	r4,-8(fp)
   22dbc:	e0bffd17 	ldw	r2,-12(fp)
   22dc0:	10802417 	ldw	r2,144(r2)
   22dc4:	100d883a 	mov	r6,r2
   22dc8:	200b883a 	mov	r5,r4
   22dcc:	1809883a 	mov	r4,r3
   22dd0:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
    secp256k1_fe_cmov(&r->y, &b->y, a->infinity);
   22dd4:	e0bffc17 	ldw	r2,-16(fp)
   22dd8:	10c00c04 	addi	r3,r2,48
   22ddc:	e0bffe17 	ldw	r2,-8(fp)
   22de0:	11000c04 	addi	r4,r2,48
   22de4:	e0bffd17 	ldw	r2,-12(fp)
   22de8:	10802417 	ldw	r2,144(r2)
   22dec:	100d883a 	mov	r6,r2
   22df0:	200b883a 	mov	r5,r4
   22df4:	1809883a 	mov	r4,r3
   22df8:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
    secp256k1_fe_cmov(&r->z, &fe_1, a->infinity);
   22dfc:	e0bffc17 	ldw	r2,-16(fp)
   22e00:	10c01804 	addi	r3,r2,96
   22e04:	e0bffd17 	ldw	r2,-12(fp)
   22e08:	10802417 	ldw	r2,144(r2)
   22e0c:	100d883a 	mov	r6,r2
   22e10:	014001b4 	movhi	r5,6
   22e14:	2972db04 	addi	r5,r5,-13460
   22e18:	1809883a 	mov	r4,r3
   22e1c:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
    r->infinity = infinity;
   22e20:	e0bffc17 	ldw	r2,-16(fp)
   22e24:	e0ff5f17 	ldw	r3,-644(fp)
   22e28:	10c02415 	stw	r3,144(r2)
}
   22e2c:	0001883a 	nop
   22e30:	e6ffff04 	addi	sp,fp,-4
   22e34:	dfc00217 	ldw	ra,8(sp)
   22e38:	df000117 	ldw	fp,4(sp)
   22e3c:	dc000017 	ldw	r16,0(sp)
   22e40:	dec00304 	addi	sp,sp,12
   22e44:	f800283a 	ret

00022e48 <secp256k1_gej_rescale>:

static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *s) {
   22e48:	deffef04 	addi	sp,sp,-68
   22e4c:	dfc01015 	stw	ra,64(sp)
   22e50:	df000f15 	stw	fp,60(sp)
   22e54:	df000f04 	addi	fp,sp,60
   22e58:	e13ffe15 	stw	r4,-8(fp)
   22e5c:	e17fff15 	stw	r5,-4(fp)
    /* Operations: 4 mul, 1 sqr */
    secp256k1_fe zz;
    VERIFY_CHECK(!secp256k1_fe_is_zero(s));
   22e60:	e13fff17 	ldw	r4,-4(fp)
   22e64:	00136ac0 	call	136ac <secp256k1_fe_is_zero>
   22e68:	1004c03a 	cmpne	r2,r2,zero
   22e6c:	10803fcc 	andi	r2,r2,255
   22e70:	10000d26 	beq	r2,zero,22ea8 <secp256k1_gej_rescale+0x60>
   22e74:	d0a01617 	ldw	r2,-32680(gp)
   22e78:	10c00317 	ldw	r3,12(r2)
   22e7c:	008001b4 	movhi	r2,6
   22e80:	10af8604 	addi	r2,r2,-16872
   22e84:	d8800015 	stw	r2,0(sp)
   22e88:	01c094c4 	movi	r7,595
   22e8c:	018001b4 	movhi	r6,6
   22e90:	31af4504 	addi	r6,r6,-17132
   22e94:	014001b4 	movhi	r5,6
   22e98:	296b3804 	addi	r5,r5,-21280
   22e9c:	1809883a 	mov	r4,r3
   22ea0:	00452600 	call	45260 <fprintf>
   22ea4:	00450340 	call	45034 <abort>
    secp256k1_fe_sqr(&zz, s);
   22ea8:	e17fff17 	ldw	r5,-4(fp)
   22eac:	e13ff204 	addi	r4,fp,-56
   22eb0:	001e3440 	call	1e344 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&r->x, &r->x, &zz);                /* r->x *= s^2 */
   22eb4:	e0bffe17 	ldw	r2,-8(fp)
   22eb8:	e0fffe17 	ldw	r3,-8(fp)
   22ebc:	e1bff204 	addi	r6,fp,-56
   22ec0:	180b883a 	mov	r5,r3
   22ec4:	1009883a 	mov	r4,r2
   22ec8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->y, &r->y, &zz);
   22ecc:	e0bffe17 	ldw	r2,-8(fp)
   22ed0:	10c00c04 	addi	r3,r2,48
   22ed4:	e0bffe17 	ldw	r2,-8(fp)
   22ed8:	10800c04 	addi	r2,r2,48
   22edc:	e1bff204 	addi	r6,fp,-56
   22ee0:	100b883a 	mov	r5,r2
   22ee4:	1809883a 	mov	r4,r3
   22ee8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->y, &r->y, s);                  /* r->y *= s^3 */
   22eec:	e0bffe17 	ldw	r2,-8(fp)
   22ef0:	10c00c04 	addi	r3,r2,48
   22ef4:	e0bffe17 	ldw	r2,-8(fp)
   22ef8:	10800c04 	addi	r2,r2,48
   22efc:	e1bfff17 	ldw	r6,-4(fp)
   22f00:	100b883a 	mov	r5,r2
   22f04:	1809883a 	mov	r4,r3
   22f08:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->z, &r->z, s);                  /* r->z *= s   */
   22f0c:	e0bffe17 	ldw	r2,-8(fp)
   22f10:	10c01804 	addi	r3,r2,96
   22f14:	e0bffe17 	ldw	r2,-8(fp)
   22f18:	10801804 	addi	r2,r2,96
   22f1c:	e1bfff17 	ldw	r6,-4(fp)
   22f20:	100b883a 	mov	r5,r2
   22f24:	1809883a 	mov	r4,r3
   22f28:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
}
   22f2c:	0001883a 	nop
   22f30:	e037883a 	mov	sp,fp
   22f34:	dfc00117 	ldw	ra,4(sp)
   22f38:	df000017 	ldw	fp,0(sp)
   22f3c:	dec00204 	addi	sp,sp,8
   22f40:	f800283a 	ret

00022f44 <secp256k1_ge_to_storage>:

static void secp256k1_ge_to_storage(secp256k1_ge_storage *r, const secp256k1_ge *a) {
   22f44:	deffe304 	addi	sp,sp,-116
   22f48:	dfc01c15 	stw	ra,112(sp)
   22f4c:	df001b15 	stw	fp,108(sp)
   22f50:	df001b04 	addi	fp,sp,108
   22f54:	e13ffe15 	stw	r4,-8(fp)
   22f58:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe x, y;
    VERIFY_CHECK(!a->infinity);
   22f5c:	e0bfff17 	ldw	r2,-4(fp)
   22f60:	10801817 	ldw	r2,96(r2)
   22f64:	1004c03a 	cmpne	r2,r2,zero
   22f68:	10803fcc 	andi	r2,r2,255
   22f6c:	10000d26 	beq	r2,zero,22fa4 <secp256k1_ge_to_storage+0x60>
   22f70:	d0a01617 	ldw	r2,-32680(gp)
   22f74:	10c00317 	ldw	r3,12(r2)
   22f78:	008001b4 	movhi	r2,6
   22f7c:	10af4e04 	addi	r2,r2,-17096
   22f80:	d8800015 	stw	r2,0(sp)
   22f84:	01c09744 	movi	r7,605
   22f88:	018001b4 	movhi	r6,6
   22f8c:	31af4504 	addi	r6,r6,-17132
   22f90:	014001b4 	movhi	r5,6
   22f94:	296b3804 	addi	r5,r5,-21280
   22f98:	1809883a 	mov	r4,r3
   22f9c:	00452600 	call	45260 <fprintf>
   22fa0:	00450340 	call	45034 <abort>
    x = a->x;
   22fa4:	e0bfff17 	ldw	r2,-4(fp)
   22fa8:	10c00017 	ldw	r3,0(r2)
   22fac:	e0ffe615 	stw	r3,-104(fp)
   22fb0:	10c00117 	ldw	r3,4(r2)
   22fb4:	e0ffe715 	stw	r3,-100(fp)
   22fb8:	10c00217 	ldw	r3,8(r2)
   22fbc:	e0ffe815 	stw	r3,-96(fp)
   22fc0:	10c00317 	ldw	r3,12(r2)
   22fc4:	e0ffe915 	stw	r3,-92(fp)
   22fc8:	10c00417 	ldw	r3,16(r2)
   22fcc:	e0ffea15 	stw	r3,-88(fp)
   22fd0:	10c00517 	ldw	r3,20(r2)
   22fd4:	e0ffeb15 	stw	r3,-84(fp)
   22fd8:	10c00617 	ldw	r3,24(r2)
   22fdc:	e0ffec15 	stw	r3,-80(fp)
   22fe0:	10c00717 	ldw	r3,28(r2)
   22fe4:	e0ffed15 	stw	r3,-76(fp)
   22fe8:	10c00817 	ldw	r3,32(r2)
   22fec:	e0ffee15 	stw	r3,-72(fp)
   22ff0:	10c00917 	ldw	r3,36(r2)
   22ff4:	e0ffef15 	stw	r3,-68(fp)
   22ff8:	10c00a17 	ldw	r3,40(r2)
   22ffc:	e0fff015 	stw	r3,-64(fp)
   23000:	10800b17 	ldw	r2,44(r2)
   23004:	e0bff115 	stw	r2,-60(fp)
    secp256k1_fe_normalize(&x);
   23008:	e13fe604 	addi	r4,fp,-104
   2300c:	0011e780 	call	11e78 <secp256k1_fe_normalize>
    y = a->y;
   23010:	e0bfff17 	ldw	r2,-4(fp)
   23014:	10c00c17 	ldw	r3,48(r2)
   23018:	e0fff215 	stw	r3,-56(fp)
   2301c:	10c00d17 	ldw	r3,52(r2)
   23020:	e0fff315 	stw	r3,-52(fp)
   23024:	10c00e17 	ldw	r3,56(r2)
   23028:	e0fff415 	stw	r3,-48(fp)
   2302c:	10c00f17 	ldw	r3,60(r2)
   23030:	e0fff515 	stw	r3,-44(fp)
   23034:	10c01017 	ldw	r3,64(r2)
   23038:	e0fff615 	stw	r3,-40(fp)
   2303c:	10c01117 	ldw	r3,68(r2)
   23040:	e0fff715 	stw	r3,-36(fp)
   23044:	10c01217 	ldw	r3,72(r2)
   23048:	e0fff815 	stw	r3,-32(fp)
   2304c:	10c01317 	ldw	r3,76(r2)
   23050:	e0fff915 	stw	r3,-28(fp)
   23054:	10c01417 	ldw	r3,80(r2)
   23058:	e0fffa15 	stw	r3,-24(fp)
   2305c:	10c01517 	ldw	r3,84(r2)
   23060:	e0fffb15 	stw	r3,-20(fp)
   23064:	10c01617 	ldw	r3,88(r2)
   23068:	e0fffc15 	stw	r3,-16(fp)
   2306c:	10801717 	ldw	r2,92(r2)
   23070:	e0bffd15 	stw	r2,-12(fp)
    secp256k1_fe_normalize(&y);
   23074:	e0bff204 	addi	r2,fp,-56
   23078:	1009883a 	mov	r4,r2
   2307c:	0011e780 	call	11e78 <secp256k1_fe_normalize>
    secp256k1_fe_to_storage(&r->x, &x);
   23080:	e0bffe17 	ldw	r2,-8(fp)
   23084:	e17fe604 	addi	r5,fp,-104
   23088:	1009883a 	mov	r4,r2
   2308c:	001e7d40 	call	1e7d4 <secp256k1_fe_to_storage>
    secp256k1_fe_to_storage(&r->y, &y);
   23090:	e0bffe17 	ldw	r2,-8(fp)
   23094:	10800804 	addi	r2,r2,32
   23098:	e0fff204 	addi	r3,fp,-56
   2309c:	180b883a 	mov	r5,r3
   230a0:	1009883a 	mov	r4,r2
   230a4:	001e7d40 	call	1e7d4 <secp256k1_fe_to_storage>
}
   230a8:	0001883a 	nop
   230ac:	e037883a 	mov	sp,fp
   230b0:	dfc00117 	ldw	ra,4(sp)
   230b4:	df000017 	ldw	fp,0(sp)
   230b8:	dec00204 	addi	sp,sp,8
   230bc:	f800283a 	ret

000230c0 <secp256k1_ge_from_storage>:

static void secp256k1_ge_from_storage(secp256k1_ge *r, const secp256k1_ge_storage *a) {
   230c0:	defffc04 	addi	sp,sp,-16
   230c4:	dfc00315 	stw	ra,12(sp)
   230c8:	df000215 	stw	fp,8(sp)
   230cc:	df000204 	addi	fp,sp,8
   230d0:	e13ffe15 	stw	r4,-8(fp)
   230d4:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe_from_storage(&r->x, &a->x);
   230d8:	e0bffe17 	ldw	r2,-8(fp)
   230dc:	e0ffff17 	ldw	r3,-4(fp)
   230e0:	180b883a 	mov	r5,r3
   230e4:	1009883a 	mov	r4,r2
   230e8:	001e97c0 	call	1e97c <secp256k1_fe_from_storage>
    secp256k1_fe_from_storage(&r->y, &a->y);
   230ec:	e0bffe17 	ldw	r2,-8(fp)
   230f0:	10c00c04 	addi	r3,r2,48
   230f4:	e0bfff17 	ldw	r2,-4(fp)
   230f8:	10800804 	addi	r2,r2,32
   230fc:	100b883a 	mov	r5,r2
   23100:	1809883a 	mov	r4,r3
   23104:	001e97c0 	call	1e97c <secp256k1_fe_from_storage>
    r->infinity = 0;
   23108:	e0bffe17 	ldw	r2,-8(fp)
   2310c:	10001815 	stw	zero,96(r2)
}
   23110:	0001883a 	nop
   23114:	e037883a 	mov	sp,fp
   23118:	dfc00117 	ldw	ra,4(sp)
   2311c:	df000017 	ldw	fp,0(sp)
   23120:	dec00204 	addi	sp,sp,8
   23124:	f800283a 	ret

00023128 <secp256k1_ge_storage_cmov>:

static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag) {
   23128:	defffb04 	addi	sp,sp,-20
   2312c:	dfc00415 	stw	ra,16(sp)
   23130:	df000315 	stw	fp,12(sp)
   23134:	df000304 	addi	fp,sp,12
   23138:	e13ffd15 	stw	r4,-12(fp)
   2313c:	e17ffe15 	stw	r5,-8(fp)
   23140:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_fe_storage_cmov(&r->x, &a->x, flag);
   23144:	e0bffd17 	ldw	r2,-12(fp)
   23148:	e0fffe17 	ldw	r3,-8(fp)
   2314c:	e1bfff17 	ldw	r6,-4(fp)
   23150:	180b883a 	mov	r5,r3
   23154:	1009883a 	mov	r4,r2
   23158:	001e6300 	call	1e630 <secp256k1_fe_storage_cmov>
    secp256k1_fe_storage_cmov(&r->y, &a->y, flag);
   2315c:	e0bffd17 	ldw	r2,-12(fp)
   23160:	10c00804 	addi	r3,r2,32
   23164:	e0bffe17 	ldw	r2,-8(fp)
   23168:	10800804 	addi	r2,r2,32
   2316c:	e1bfff17 	ldw	r6,-4(fp)
   23170:	100b883a 	mov	r5,r2
   23174:	1809883a 	mov	r4,r3
   23178:	001e6300 	call	1e630 <secp256k1_fe_storage_cmov>
}
   2317c:	0001883a 	nop
   23180:	e037883a 	mov	sp,fp
   23184:	dfc00117 	ldw	ra,4(sp)
   23188:	df000017 	ldw	fp,0(sp)
   2318c:	dec00204 	addi	sp,sp,8
   23190:	f800283a 	ret

00023194 <secp256k1_gej_has_quad_y_var>:
    *r = *a;
    secp256k1_fe_mul(&r->x, &r->x, &beta);
}
#endif

static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {
   23194:	defff104 	addi	sp,sp,-60
   23198:	dfc00e15 	stw	ra,56(sp)
   2319c:	df000d15 	stw	fp,52(sp)
   231a0:	df000d04 	addi	fp,sp,52
   231a4:	e13fff15 	stw	r4,-4(fp)
    secp256k1_fe yz;

    if (a->infinity) {
   231a8:	e0bfff17 	ldw	r2,-4(fp)
   231ac:	10802417 	ldw	r2,144(r2)
   231b0:	10000226 	beq	r2,zero,231bc <secp256k1_gej_has_quad_y_var+0x28>
        return 0;
   231b4:	0005883a 	mov	r2,zero
   231b8:	00000a06 	br	231e4 <secp256k1_gej_has_quad_y_var+0x50>
    }

    /* We rely on the fact that the Jacobi symbol of 1 / a->z^3 is the same as
     * that of a->z. Thus a->y / a->z^3 is a quadratic residue iff a->y * a->z
       is */
    secp256k1_fe_mul(&yz, &a->y, &a->z);
   231bc:	e0bfff17 	ldw	r2,-4(fp)
   231c0:	10c00c04 	addi	r3,r2,48
   231c4:	e0bfff17 	ldw	r2,-4(fp)
   231c8:	10801804 	addi	r2,r2,96
   231cc:	100d883a 	mov	r6,r2
   231d0:	180b883a 	mov	r5,r3
   231d4:	e13ff304 	addi	r4,fp,-52
   231d8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    return secp256k1_fe_is_quad_var(&yz);
   231dc:	e13ff304 	addi	r4,fp,-52
   231e0:	001ff500 	call	1ff50 <secp256k1_fe_is_quad_var>
}
   231e4:	e037883a 	mov	sp,fp
   231e8:	dfc00117 	ldw	ra,4(sp)
   231ec:	df000017 	ldw	fp,0(sp)
   231f0:	dec00204 	addi	sp,sp,8
   231f4:	f800283a 	ret

000231f8 <secp256k1_scalar_clear>:
#define SECP256K1_N_H_4 ((uint32_t)0xFFFFFFFFUL)
#define SECP256K1_N_H_5 ((uint32_t)0xFFFFFFFFUL)
#define SECP256K1_N_H_6 ((uint32_t)0xFFFFFFFFUL)
#define SECP256K1_N_H_7 ((uint32_t)0x7FFFFFFFUL)

SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {
   231f8:	defffe04 	addi	sp,sp,-8
   231fc:	df000115 	stw	fp,4(sp)
   23200:	df000104 	addi	fp,sp,4
   23204:	e13fff15 	stw	r4,-4(fp)
    r->d[0] = 0;
   23208:	e0bfff17 	ldw	r2,-4(fp)
   2320c:	10000015 	stw	zero,0(r2)
    r->d[1] = 0;
   23210:	e0bfff17 	ldw	r2,-4(fp)
   23214:	10000115 	stw	zero,4(r2)
    r->d[2] = 0;
   23218:	e0bfff17 	ldw	r2,-4(fp)
   2321c:	10000215 	stw	zero,8(r2)
    r->d[3] = 0;
   23220:	e0bfff17 	ldw	r2,-4(fp)
   23224:	10000315 	stw	zero,12(r2)
    r->d[4] = 0;
   23228:	e0bfff17 	ldw	r2,-4(fp)
   2322c:	10000415 	stw	zero,16(r2)
    r->d[5] = 0;
   23230:	e0bfff17 	ldw	r2,-4(fp)
   23234:	10000515 	stw	zero,20(r2)
    r->d[6] = 0;
   23238:	e0bfff17 	ldw	r2,-4(fp)
   2323c:	10000615 	stw	zero,24(r2)
    r->d[7] = 0;
   23240:	e0bfff17 	ldw	r2,-4(fp)
   23244:	10000715 	stw	zero,28(r2)
}
   23248:	0001883a 	nop
   2324c:	e037883a 	mov	sp,fp
   23250:	df000017 	ldw	fp,0(sp)
   23254:	dec00104 	addi	sp,sp,4
   23258:	f800283a 	ret

0002325c <secp256k1_scalar_set_int>:

SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {
   2325c:	defffd04 	addi	sp,sp,-12
   23260:	df000215 	stw	fp,8(sp)
   23264:	df000204 	addi	fp,sp,8
   23268:	e13ffe15 	stw	r4,-8(fp)
   2326c:	e17fff15 	stw	r5,-4(fp)
    r->d[0] = v;
   23270:	e0bffe17 	ldw	r2,-8(fp)
   23274:	e0ffff17 	ldw	r3,-4(fp)
   23278:	10c00015 	stw	r3,0(r2)
    r->d[1] = 0;
   2327c:	e0bffe17 	ldw	r2,-8(fp)
   23280:	10000115 	stw	zero,4(r2)
    r->d[2] = 0;
   23284:	e0bffe17 	ldw	r2,-8(fp)
   23288:	10000215 	stw	zero,8(r2)
    r->d[3] = 0;
   2328c:	e0bffe17 	ldw	r2,-8(fp)
   23290:	10000315 	stw	zero,12(r2)
    r->d[4] = 0;
   23294:	e0bffe17 	ldw	r2,-8(fp)
   23298:	10000415 	stw	zero,16(r2)
    r->d[5] = 0;
   2329c:	e0bffe17 	ldw	r2,-8(fp)
   232a0:	10000515 	stw	zero,20(r2)
    r->d[6] = 0;
   232a4:	e0bffe17 	ldw	r2,-8(fp)
   232a8:	10000615 	stw	zero,24(r2)
    r->d[7] = 0;
   232ac:	e0bffe17 	ldw	r2,-8(fp)
   232b0:	10000715 	stw	zero,28(r2)
}
   232b4:	0001883a 	nop
   232b8:	e037883a 	mov	sp,fp
   232bc:	df000017 	ldw	fp,0(sp)
   232c0:	dec00104 	addi	sp,sp,4
   232c4:	f800283a 	ret

000232c8 <secp256k1_scalar_get_bits>:

SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {
   232c8:	defffa04 	addi	sp,sp,-24
   232cc:	dfc00515 	stw	ra,20(sp)
   232d0:	df000415 	stw	fp,16(sp)
   232d4:	df000404 	addi	fp,sp,16
   232d8:	e13ffd15 	stw	r4,-12(fp)
   232dc:	e17ffe15 	stw	r5,-8(fp)
   232e0:	e1bfff15 	stw	r6,-4(fp)
    VERIFY_CHECK((offset + count - 1) >> 5 == offset >> 5);
   232e4:	e0fffe17 	ldw	r3,-8(fp)
   232e8:	e0bfff17 	ldw	r2,-4(fp)
   232ec:	1885883a 	add	r2,r3,r2
   232f0:	10bfffc4 	addi	r2,r2,-1
   232f4:	1006d17a 	srli	r3,r2,5
   232f8:	e0bffe17 	ldw	r2,-8(fp)
   232fc:	1004d17a 	srli	r2,r2,5
   23300:	1884c03a 	cmpne	r2,r3,r2
   23304:	10803fcc 	andi	r2,r2,255
   23308:	10000d26 	beq	r2,zero,23340 <secp256k1_scalar_get_bits+0x78>
   2330c:	d0a01617 	ldw	r2,-32680(gp)
   23310:	10c00317 	ldw	r3,12(r2)
   23314:	008001b4 	movhi	r2,6
   23318:	10af9d04 	addi	r2,r2,-16780
   2331c:	d8800015 	stw	r2,0(sp)
   23320:	01c00f04 	movi	r7,60
   23324:	018001b4 	movhi	r6,6
   23328:	31af9204 	addi	r6,r6,-16824
   2332c:	014001b4 	movhi	r5,6
   23330:	296b3804 	addi	r5,r5,-21280
   23334:	1809883a 	mov	r4,r3
   23338:	00452600 	call	45260 <fprintf>
   2333c:	00450340 	call	45034 <abort>
    return (a->d[offset >> 5] >> (offset & 0x1F)) & ((1 << count) - 1);
   23340:	e0bffe17 	ldw	r2,-8(fp)
   23344:	1004d17a 	srli	r2,r2,5
   23348:	e0fffd17 	ldw	r3,-12(fp)
   2334c:	1085883a 	add	r2,r2,r2
   23350:	1085883a 	add	r2,r2,r2
   23354:	1885883a 	add	r2,r3,r2
   23358:	10c00017 	ldw	r3,0(r2)
   2335c:	e0bffe17 	ldw	r2,-8(fp)
   23360:	108007cc 	andi	r2,r2,31
   23364:	1884d83a 	srl	r2,r3,r2
   23368:	01000044 	movi	r4,1
   2336c:	e0ffff17 	ldw	r3,-4(fp)
   23370:	20c6983a 	sll	r3,r4,r3
   23374:	18ffffc4 	addi	r3,r3,-1
   23378:	10c4703a 	and	r2,r2,r3
}
   2337c:	e037883a 	mov	sp,fp
   23380:	dfc00117 	ldw	ra,4(sp)
   23384:	df000017 	ldw	fp,0(sp)
   23388:	dec00204 	addi	sp,sp,8
   2338c:	f800283a 	ret

00023390 <secp256k1_scalar_get_bits_var>:

SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {
   23390:	defffa04 	addi	sp,sp,-24
   23394:	dfc00515 	stw	ra,20(sp)
   23398:	df000415 	stw	fp,16(sp)
   2339c:	df000404 	addi	fp,sp,16
   233a0:	e13ffd15 	stw	r4,-12(fp)
   233a4:	e17ffe15 	stw	r5,-8(fp)
   233a8:	e1bfff15 	stw	r6,-4(fp)
    VERIFY_CHECK(count < 32);
   233ac:	e0bfff17 	ldw	r2,-4(fp)
   233b0:	10800828 	cmpgeui	r2,r2,32
   233b4:	10803fcc 	andi	r2,r2,255
   233b8:	10000d26 	beq	r2,zero,233f0 <secp256k1_scalar_get_bits_var+0x60>
   233bc:	d0a01617 	ldw	r2,-32680(gp)
   233c0:	10c00317 	ldw	r3,12(r2)
   233c4:	008001b4 	movhi	r2,6
   233c8:	10afad04 	addi	r2,r2,-16716
   233cc:	d8800015 	stw	r2,0(sp)
   233d0:	01c01044 	movi	r7,65
   233d4:	018001b4 	movhi	r6,6
   233d8:	31af9204 	addi	r6,r6,-16824
   233dc:	014001b4 	movhi	r5,6
   233e0:	296b3804 	addi	r5,r5,-21280
   233e4:	1809883a 	mov	r4,r3
   233e8:	00452600 	call	45260 <fprintf>
   233ec:	00450340 	call	45034 <abort>
    VERIFY_CHECK(offset + count <= 256);
   233f0:	e0fffe17 	ldw	r3,-8(fp)
   233f4:	e0bfff17 	ldw	r2,-4(fp)
   233f8:	1885883a 	add	r2,r3,r2
   233fc:	10804068 	cmpgeui	r2,r2,257
   23400:	10803fcc 	andi	r2,r2,255
   23404:	10000d26 	beq	r2,zero,2343c <secp256k1_scalar_get_bits_var+0xac>
   23408:	d0a01617 	ldw	r2,-32680(gp)
   2340c:	10c00317 	ldw	r3,12(r2)
   23410:	008001b4 	movhi	r2,6
   23414:	10afb604 	addi	r2,r2,-16680
   23418:	d8800015 	stw	r2,0(sp)
   2341c:	01c01084 	movi	r7,66
   23420:	018001b4 	movhi	r6,6
   23424:	31af9204 	addi	r6,r6,-16824
   23428:	014001b4 	movhi	r5,6
   2342c:	296b3804 	addi	r5,r5,-21280
   23430:	1809883a 	mov	r4,r3
   23434:	00452600 	call	45260 <fprintf>
   23438:	00450340 	call	45034 <abort>
    if ((offset + count - 1) >> 5 == offset >> 5) {
   2343c:	e0fffe17 	ldw	r3,-8(fp)
   23440:	e0bfff17 	ldw	r2,-4(fp)
   23444:	1885883a 	add	r2,r3,r2
   23448:	10bfffc4 	addi	r2,r2,-1
   2344c:	1006d17a 	srli	r3,r2,5
   23450:	e0bffe17 	ldw	r2,-8(fp)
   23454:	1004d17a 	srli	r2,r2,5
   23458:	1880051e 	bne	r3,r2,23470 <secp256k1_scalar_get_bits_var+0xe0>
        return secp256k1_scalar_get_bits(a, offset, count);
   2345c:	e1bfff17 	ldw	r6,-4(fp)
   23460:	e17ffe17 	ldw	r5,-8(fp)
   23464:	e13ffd17 	ldw	r4,-12(fp)
   23468:	00232c80 	call	232c8 <secp256k1_scalar_get_bits>
   2346c:	00003006 	br	23530 <secp256k1_scalar_get_bits_var+0x1a0>
    } else {
        VERIFY_CHECK((offset >> 5) + 1 < 8);
   23470:	e0bffe17 	ldw	r2,-8(fp)
   23474:	1004d17a 	srli	r2,r2,5
   23478:	10800044 	addi	r2,r2,1
   2347c:	10800228 	cmpgeui	r2,r2,8
   23480:	10803fcc 	andi	r2,r2,255
   23484:	10000d26 	beq	r2,zero,234bc <secp256k1_scalar_get_bits_var+0x12c>
   23488:	d0a01617 	ldw	r2,-32680(gp)
   2348c:	10c00317 	ldw	r3,12(r2)
   23490:	008001b4 	movhi	r2,6
   23494:	10afc204 	addi	r2,r2,-16632
   23498:	d8800015 	stw	r2,0(sp)
   2349c:	01c01184 	movi	r7,70
   234a0:	018001b4 	movhi	r6,6
   234a4:	31af9204 	addi	r6,r6,-16824
   234a8:	014001b4 	movhi	r5,6
   234ac:	296b3804 	addi	r5,r5,-21280
   234b0:	1809883a 	mov	r4,r3
   234b4:	00452600 	call	45260 <fprintf>
   234b8:	00450340 	call	45034 <abort>
        return ((a->d[offset >> 5] >> (offset & 0x1F)) | (a->d[(offset >> 5) + 1] << (32 - (offset & 0x1F)))) & ((((uint32_t)1) << count) - 1);
   234bc:	e0bffe17 	ldw	r2,-8(fp)
   234c0:	1004d17a 	srli	r2,r2,5
   234c4:	e0fffd17 	ldw	r3,-12(fp)
   234c8:	1085883a 	add	r2,r2,r2
   234cc:	1085883a 	add	r2,r2,r2
   234d0:	1885883a 	add	r2,r3,r2
   234d4:	10c00017 	ldw	r3,0(r2)
   234d8:	e0bffe17 	ldw	r2,-8(fp)
   234dc:	108007cc 	andi	r2,r2,31
   234e0:	1886d83a 	srl	r3,r3,r2
   234e4:	e0bffe17 	ldw	r2,-8(fp)
   234e8:	1004d17a 	srli	r2,r2,5
   234ec:	10800044 	addi	r2,r2,1
   234f0:	e13ffd17 	ldw	r4,-12(fp)
   234f4:	1085883a 	add	r2,r2,r2
   234f8:	1085883a 	add	r2,r2,r2
   234fc:	2085883a 	add	r2,r4,r2
   23500:	11000017 	ldw	r4,0(r2)
   23504:	e0bffe17 	ldw	r2,-8(fp)
   23508:	108007cc 	andi	r2,r2,31
   2350c:	01400804 	movi	r5,32
   23510:	2885c83a 	sub	r2,r5,r2
   23514:	2084983a 	sll	r2,r4,r2
   23518:	1886b03a 	or	r3,r3,r2
   2351c:	01000044 	movi	r4,1
   23520:	e0bfff17 	ldw	r2,-4(fp)
   23524:	2084983a 	sll	r2,r4,r2
   23528:	10bfffc4 	addi	r2,r2,-1
   2352c:	1884703a 	and	r2,r3,r2
    }
}
   23530:	e037883a 	mov	sp,fp
   23534:	dfc00117 	ldw	ra,4(sp)
   23538:	df000017 	ldw	fp,0(sp)
   2353c:	dec00204 	addi	sp,sp,8
   23540:	f800283a 	ret

00023544 <secp256k1_scalar_check_overflow>:

SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {
   23544:	defffc04 	addi	sp,sp,-16
   23548:	df000315 	stw	fp,12(sp)
   2354c:	df000304 	addi	fp,sp,12
   23550:	e13fff15 	stw	r4,-4(fp)
    int yes = 0;
   23554:	e03ffd15 	stw	zero,-12(fp)
    int no = 0;
   23558:	e03ffe15 	stw	zero,-8(fp)
    no |= (a->d[7] < SECP256K1_N_7); /* No need for a > check. */
   2355c:	e0bfff17 	ldw	r2,-4(fp)
   23560:	10800717 	ldw	r2,28(r2)
   23564:	10bfffd8 	cmpnei	r2,r2,-1
   23568:	10803fcc 	andi	r2,r2,255
   2356c:	e0fffe17 	ldw	r3,-8(fp)
   23570:	1884b03a 	or	r2,r3,r2
   23574:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[6] < SECP256K1_N_6); /* No need for a > check. */
   23578:	e0bfff17 	ldw	r2,-4(fp)
   2357c:	10800617 	ldw	r2,24(r2)
   23580:	10bfffd8 	cmpnei	r2,r2,-1
   23584:	10803fcc 	andi	r2,r2,255
   23588:	e0fffe17 	ldw	r3,-8(fp)
   2358c:	1884b03a 	or	r2,r3,r2
   23590:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[5] < SECP256K1_N_5); /* No need for a > check. */
   23594:	e0bfff17 	ldw	r2,-4(fp)
   23598:	10800517 	ldw	r2,20(r2)
   2359c:	10bfffd8 	cmpnei	r2,r2,-1
   235a0:	10803fcc 	andi	r2,r2,255
   235a4:	e0fffe17 	ldw	r3,-8(fp)
   235a8:	1884b03a 	or	r2,r3,r2
   235ac:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[4] < SECP256K1_N_4);
   235b0:	e0bfff17 	ldw	r2,-4(fp)
   235b4:	10800417 	ldw	r2,16(r2)
   235b8:	00ffff44 	movi	r3,-3
   235bc:	1885403a 	cmpgeu	r2,r3,r2
   235c0:	10803fcc 	andi	r2,r2,255
   235c4:	e0fffe17 	ldw	r3,-8(fp)
   235c8:	1884b03a 	or	r2,r3,r2
   235cc:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[4] > SECP256K1_N_4) & ~no;
   235d0:	e0bfff17 	ldw	r2,-4(fp)
   235d4:	10800417 	ldw	r2,16(r2)
   235d8:	10bfffe0 	cmpeqi	r2,r2,-1
   235dc:	10c03fcc 	andi	r3,r2,255
   235e0:	e0bffe17 	ldw	r2,-8(fp)
   235e4:	0084303a 	nor	r2,zero,r2
   235e8:	1884703a 	and	r2,r3,r2
   235ec:	e0fffd17 	ldw	r3,-12(fp)
   235f0:	1884b03a 	or	r2,r3,r2
   235f4:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[3] < SECP256K1_N_3) & ~yes;
   235f8:	e0bfff17 	ldw	r2,-4(fp)
   235fc:	10c00317 	ldw	r3,12(r2)
   23600:	00aeabf4 	movhi	r2,47791
   23604:	10b73944 	addi	r2,r2,-8987
   23608:	10c5403a 	cmpgeu	r2,r2,r3
   2360c:	10c03fcc 	andi	r3,r2,255
   23610:	e0bffd17 	ldw	r2,-12(fp)
   23614:	0084303a 	nor	r2,zero,r2
   23618:	1884703a 	and	r2,r3,r2
   2361c:	e0fffe17 	ldw	r3,-8(fp)
   23620:	1884b03a 	or	r2,r3,r2
   23624:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[3] > SECP256K1_N_3) & ~no;
   23628:	e0bfff17 	ldw	r2,-4(fp)
   2362c:	10c00317 	ldw	r3,12(r2)
   23630:	00aeabf4 	movhi	r2,47791
   23634:	10b73984 	addi	r2,r2,-8986
   23638:	10c5803a 	cmpltu	r2,r2,r3
   2363c:	10c03fcc 	andi	r3,r2,255
   23640:	e0bffe17 	ldw	r2,-8(fp)
   23644:	0084303a 	nor	r2,zero,r2
   23648:	1884703a 	and	r2,r3,r2
   2364c:	e0fffd17 	ldw	r3,-12(fp)
   23650:	1884b03a 	or	r2,r3,r2
   23654:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[2] < SECP256K1_N_2) & ~yes;
   23658:	e0bfff17 	ldw	r2,-4(fp)
   2365c:	10c00217 	ldw	r3,8(r2)
   23660:	00abd274 	movhi	r2,44873
   23664:	10a80e84 	addi	r2,r2,-24518
   23668:	10c5403a 	cmpgeu	r2,r2,r3
   2366c:	10c03fcc 	andi	r3,r2,255
   23670:	e0bffd17 	ldw	r2,-12(fp)
   23674:	0084303a 	nor	r2,zero,r2
   23678:	1884703a 	and	r2,r3,r2
   2367c:	e0fffe17 	ldw	r3,-8(fp)
   23680:	1884b03a 	or	r2,r3,r2
   23684:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[2] > SECP256K1_N_2) & ~no;
   23688:	e0bfff17 	ldw	r2,-4(fp)
   2368c:	10c00217 	ldw	r3,8(r2)
   23690:	00abd274 	movhi	r2,44873
   23694:	10a80ec4 	addi	r2,r2,-24517
   23698:	10c5803a 	cmpltu	r2,r2,r3
   2369c:	10c03fcc 	andi	r3,r2,255
   236a0:	e0bffe17 	ldw	r2,-8(fp)
   236a4:	0084303a 	nor	r2,zero,r2
   236a8:	1884703a 	and	r2,r3,r2
   236ac:	e0fffd17 	ldw	r3,-12(fp)
   236b0:	1884b03a 	or	r2,r3,r2
   236b4:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[1] < SECP256K1_N_1) & ~yes;
   236b8:	e0bfff17 	ldw	r2,-4(fp)
   236bc:	10c00117 	ldw	r3,4(r2)
   236c0:	00aff4b4 	movhi	r2,49106
   236c4:	1097a2c4 	addi	r2,r2,24203
   236c8:	10c5403a 	cmpgeu	r2,r2,r3
   236cc:	10c03fcc 	andi	r3,r2,255
   236d0:	e0bffd17 	ldw	r2,-12(fp)
   236d4:	0084303a 	nor	r2,zero,r2
   236d8:	1884703a 	and	r2,r3,r2
   236dc:	e0fffe17 	ldw	r3,-8(fp)
   236e0:	1884b03a 	or	r2,r3,r2
   236e4:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[1] > SECP256K1_N_1) & ~no;
   236e8:	e0bfff17 	ldw	r2,-4(fp)
   236ec:	10c00117 	ldw	r3,4(r2)
   236f0:	00aff4b4 	movhi	r2,49106
   236f4:	1097a304 	addi	r2,r2,24204
   236f8:	10c5803a 	cmpltu	r2,r2,r3
   236fc:	10c03fcc 	andi	r3,r2,255
   23700:	e0bffe17 	ldw	r2,-8(fp)
   23704:	0084303a 	nor	r2,zero,r2
   23708:	1884703a 	and	r2,r3,r2
   2370c:	e0fffd17 	ldw	r3,-12(fp)
   23710:	1884b03a 	or	r2,r3,r2
   23714:	e0bffd15 	stw	r2,-12(fp)
    yes |= (a->d[0] >= SECP256K1_N_0) & ~no;
   23718:	e0bfff17 	ldw	r2,-4(fp)
   2371c:	10c00017 	ldw	r3,0(r2)
   23720:	00b40db4 	movhi	r2,53302
   23724:	10905004 	addi	r2,r2,16704
   23728:	10c5803a 	cmpltu	r2,r2,r3
   2372c:	10c03fcc 	andi	r3,r2,255
   23730:	e0bffe17 	ldw	r2,-8(fp)
   23734:	0084303a 	nor	r2,zero,r2
   23738:	1884703a 	and	r2,r3,r2
   2373c:	e0fffd17 	ldw	r3,-12(fp)
   23740:	1884b03a 	or	r2,r3,r2
   23744:	e0bffd15 	stw	r2,-12(fp)
    return yes;
   23748:	e0bffd17 	ldw	r2,-12(fp)
}
   2374c:	e037883a 	mov	sp,fp
   23750:	df000017 	ldw	fp,0(sp)
   23754:	dec00104 	addi	sp,sp,4
   23758:	f800283a 	ret

0002375c <secp256k1_scalar_reduce>:

SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, uint32_t overflow) {
   2375c:	deffdf04 	addi	sp,sp,-132
   23760:	dfc02015 	stw	ra,128(sp)
   23764:	df001f15 	stw	fp,124(sp)
   23768:	ddc01e15 	stw	r23,120(sp)
   2376c:	dd801d15 	stw	r22,116(sp)
   23770:	dd401c15 	stw	r21,112(sp)
   23774:	dd001b15 	stw	r20,108(sp)
   23778:	dcc01a15 	stw	r19,104(sp)
   2377c:	dc801915 	stw	r18,100(sp)
   23780:	dc401815 	stw	r17,96(sp)
   23784:	dc001715 	stw	r16,92(sp)
   23788:	df001f04 	addi	fp,sp,124
   2378c:	e13fe415 	stw	r4,-112(fp)
   23790:	e17fe515 	stw	r5,-108(fp)
    uint64_t t;
    VERIFY_CHECK(overflow <= 1);
   23794:	e0bfe517 	ldw	r2,-108(fp)
   23798:	108000a8 	cmpgeui	r2,r2,2
   2379c:	10803fcc 	andi	r2,r2,255
   237a0:	10000d26 	beq	r2,zero,237d8 <secp256k1_scalar_reduce+0x7c>
   237a4:	d0a01617 	ldw	r2,-32680(gp)
   237a8:	10c00317 	ldw	r3,12(r2)
   237ac:	008001b4 	movhi	r2,6
   237b0:	10afce04 	addi	r2,r2,-16584
   237b4:	d8800015 	stw	r2,0(sp)
   237b8:	01c017c4 	movi	r7,95
   237bc:	018001b4 	movhi	r6,6
   237c0:	31af9204 	addi	r6,r6,-16824
   237c4:	014001b4 	movhi	r5,6
   237c8:	296b3804 	addi	r5,r5,-21280
   237cc:	1809883a 	mov	r4,r3
   237d0:	00452600 	call	45260 <fprintf>
   237d4:	00450340 	call	45034 <abort>
    t = (uint64_t)r->d[0] + overflow * SECP256K1_N_C_0;
   237d8:	e0bfe417 	ldw	r2,-112(fp)
   237dc:	10800017 	ldw	r2,0(r2)
   237e0:	e0bfe615 	stw	r2,-104(fp)
   237e4:	e03fe715 	stw	zero,-100(fp)
   237e8:	014bf2b4 	movhi	r5,12234
   237ec:	296fafc4 	addi	r5,r5,-16705
   237f0:	e13fe517 	ldw	r4,-108(fp)
   237f4:	0042b540 	call	42b54 <__mulsi3>
   237f8:	e0bfe815 	stw	r2,-96(fp)
   237fc:	e03fe915 	stw	zero,-92(fp)
   23800:	e13fe617 	ldw	r4,-104(fp)
   23804:	e17fe817 	ldw	r5,-96(fp)
   23808:	2145883a 	add	r2,r4,r5
   2380c:	e1bfe617 	ldw	r6,-104(fp)
   23810:	1189803a 	cmpltu	r4,r2,r6
   23814:	e1ffe717 	ldw	r7,-100(fp)
   23818:	e17fe917 	ldw	r5,-92(fp)
   2381c:	3947883a 	add	r3,r7,r5
   23820:	20c9883a 	add	r4,r4,r3
   23824:	2007883a 	mov	r3,r4
   23828:	e0bfe215 	stw	r2,-120(fp)
   2382c:	e0ffe315 	stw	r3,-116(fp)
    r->d[0] = t & 0xFFFFFFFFUL; t >>= 32;
   23830:	e0ffe217 	ldw	r3,-120(fp)
   23834:	e0bfe417 	ldw	r2,-112(fp)
   23838:	10c00015 	stw	r3,0(r2)
   2383c:	e0bfe317 	ldw	r2,-116(fp)
   23840:	1004d83a 	srl	r2,r2,zero
   23844:	e0bfe215 	stw	r2,-120(fp)
   23848:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[1] + overflow * SECP256K1_N_C_1;
   2384c:	e0bfe417 	ldw	r2,-112(fp)
   23850:	10800117 	ldw	r2,4(r2)
   23854:	1021883a 	mov	r16,r2
   23858:	0023883a 	mov	r17,zero
   2385c:	01500bb4 	movhi	r5,16430
   23860:	29685cc4 	addi	r5,r5,-24205
   23864:	e13fe517 	ldw	r4,-108(fp)
   23868:	0042b540 	call	42b54 <__mulsi3>
   2386c:	e0bfea15 	stw	r2,-88(fp)
   23870:	e03feb15 	stw	zero,-84(fp)
   23874:	e1bfea17 	ldw	r6,-88(fp)
   23878:	8185883a 	add	r2,r16,r6
   2387c:	1409803a 	cmpltu	r4,r2,r16
   23880:	e1ffeb17 	ldw	r7,-84(fp)
   23884:	89c7883a 	add	r3,r17,r7
   23888:	20c9883a 	add	r4,r4,r3
   2388c:	2007883a 	mov	r3,r4
   23890:	100d883a 	mov	r6,r2
   23894:	180f883a 	mov	r7,r3
   23898:	e13fe217 	ldw	r4,-120(fp)
   2389c:	e17fe317 	ldw	r5,-116(fp)
   238a0:	2185883a 	add	r2,r4,r6
   238a4:	1111803a 	cmpltu	r8,r2,r4
   238a8:	29c7883a 	add	r3,r5,r7
   238ac:	40c9883a 	add	r4,r8,r3
   238b0:	2007883a 	mov	r3,r4
   238b4:	e0bfe215 	stw	r2,-120(fp)
   238b8:	e0ffe315 	stw	r3,-116(fp)
    r->d[1] = t & 0xFFFFFFFFUL; t >>= 32;
   238bc:	e0ffe217 	ldw	r3,-120(fp)
   238c0:	e0bfe417 	ldw	r2,-112(fp)
   238c4:	10c00115 	stw	r3,4(r2)
   238c8:	e0bfe317 	ldw	r2,-116(fp)
   238cc:	1004d83a 	srl	r2,r2,zero
   238d0:	e0bfe215 	stw	r2,-120(fp)
   238d4:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[2] + overflow * SECP256K1_N_C_2;
   238d8:	e0bfe417 	ldw	r2,-112(fp)
   238dc:	10800217 	ldw	r2,8(r2)
   238e0:	102d883a 	mov	r22,r2
   238e4:	002f883a 	mov	r23,zero
   238e8:	01542df4 	movhi	r5,20663
   238ec:	2957f104 	addi	r5,r5,24516
   238f0:	e13fe517 	ldw	r4,-108(fp)
   238f4:	0042b540 	call	42b54 <__mulsi3>
   238f8:	e0bfec15 	stw	r2,-80(fp)
   238fc:	e03fed15 	stw	zero,-76(fp)
   23900:	e13fec17 	ldw	r4,-80(fp)
   23904:	b105883a 	add	r2,r22,r4
   23908:	1589803a 	cmpltu	r4,r2,r22
   2390c:	e17fed17 	ldw	r5,-76(fp)
   23910:	b947883a 	add	r3,r23,r5
   23914:	20c9883a 	add	r4,r4,r3
   23918:	2007883a 	mov	r3,r4
   2391c:	100d883a 	mov	r6,r2
   23920:	180f883a 	mov	r7,r3
   23924:	e13fe217 	ldw	r4,-120(fp)
   23928:	e17fe317 	ldw	r5,-116(fp)
   2392c:	2185883a 	add	r2,r4,r6
   23930:	1111803a 	cmpltu	r8,r2,r4
   23934:	29c7883a 	add	r3,r5,r7
   23938:	40c9883a 	add	r4,r8,r3
   2393c:	2007883a 	mov	r3,r4
   23940:	e0bfe215 	stw	r2,-120(fp)
   23944:	e0ffe315 	stw	r3,-116(fp)
    r->d[2] = t & 0xFFFFFFFFUL; t >>= 32;
   23948:	e0ffe217 	ldw	r3,-120(fp)
   2394c:	e0bfe417 	ldw	r2,-112(fp)
   23950:	10c00215 	stw	r3,8(r2)
   23954:	e0bfe317 	ldw	r2,-116(fp)
   23958:	1004d83a 	srl	r2,r2,zero
   2395c:	e0bfe215 	stw	r2,-120(fp)
   23960:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[3] + overflow * SECP256K1_N_C_3;
   23964:	e0bfe417 	ldw	r2,-112(fp)
   23968:	10800317 	ldw	r2,12(r2)
   2396c:	1029883a 	mov	r20,r2
   23970:	002b883a 	mov	r21,zero
   23974:	01515474 	movhi	r5,17745
   23978:	2948c644 	addi	r5,r5,8985
   2397c:	e13fe517 	ldw	r4,-108(fp)
   23980:	0042b540 	call	42b54 <__mulsi3>
   23984:	e0bfee15 	stw	r2,-72(fp)
   23988:	e03fef15 	stw	zero,-68(fp)
   2398c:	e1bfee17 	ldw	r6,-72(fp)
   23990:	a185883a 	add	r2,r20,r6
   23994:	1509803a 	cmpltu	r4,r2,r20
   23998:	e1ffef17 	ldw	r7,-68(fp)
   2399c:	a9c7883a 	add	r3,r21,r7
   239a0:	20c9883a 	add	r4,r4,r3
   239a4:	2007883a 	mov	r3,r4
   239a8:	100d883a 	mov	r6,r2
   239ac:	180f883a 	mov	r7,r3
   239b0:	e13fe217 	ldw	r4,-120(fp)
   239b4:	e17fe317 	ldw	r5,-116(fp)
   239b8:	2185883a 	add	r2,r4,r6
   239bc:	1111803a 	cmpltu	r8,r2,r4
   239c0:	29c7883a 	add	r3,r5,r7
   239c4:	40c9883a 	add	r4,r8,r3
   239c8:	2007883a 	mov	r3,r4
   239cc:	e0bfe215 	stw	r2,-120(fp)
   239d0:	e0ffe315 	stw	r3,-116(fp)
    r->d[3] = t & 0xFFFFFFFFUL; t >>= 32;
   239d4:	e0ffe217 	ldw	r3,-120(fp)
   239d8:	e0bfe417 	ldw	r2,-112(fp)
   239dc:	10c00315 	stw	r3,12(r2)
   239e0:	e0bfe317 	ldw	r2,-116(fp)
   239e4:	1004d83a 	srl	r2,r2,zero
   239e8:	e0bfe215 	stw	r2,-120(fp)
   239ec:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[4] + overflow * SECP256K1_N_C_4;
   239f0:	e0bfe417 	ldw	r2,-112(fp)
   239f4:	10800417 	ldw	r2,16(r2)
   239f8:	1025883a 	mov	r18,r2
   239fc:	0027883a 	mov	r19,zero
   23a00:	e0bfe517 	ldw	r2,-108(fp)
   23a04:	e0bff015 	stw	r2,-64(fp)
   23a08:	e03ff115 	stw	zero,-60(fp)
   23a0c:	e13ff017 	ldw	r4,-64(fp)
   23a10:	9105883a 	add	r2,r18,r4
   23a14:	1489803a 	cmpltu	r4,r2,r18
   23a18:	e17ff117 	ldw	r5,-60(fp)
   23a1c:	9947883a 	add	r3,r19,r5
   23a20:	20c9883a 	add	r4,r4,r3
   23a24:	2007883a 	mov	r3,r4
   23a28:	100d883a 	mov	r6,r2
   23a2c:	180f883a 	mov	r7,r3
   23a30:	e13fe217 	ldw	r4,-120(fp)
   23a34:	e17fe317 	ldw	r5,-116(fp)
   23a38:	2185883a 	add	r2,r4,r6
   23a3c:	1111803a 	cmpltu	r8,r2,r4
   23a40:	29c7883a 	add	r3,r5,r7
   23a44:	40c9883a 	add	r4,r8,r3
   23a48:	2007883a 	mov	r3,r4
   23a4c:	e0bfe215 	stw	r2,-120(fp)
   23a50:	e0ffe315 	stw	r3,-116(fp)
    r->d[4] = t & 0xFFFFFFFFUL; t >>= 32;
   23a54:	e0ffe217 	ldw	r3,-120(fp)
   23a58:	e0bfe417 	ldw	r2,-112(fp)
   23a5c:	10c00415 	stw	r3,16(r2)
   23a60:	e0bfe317 	ldw	r2,-116(fp)
   23a64:	1004d83a 	srl	r2,r2,zero
   23a68:	e0bfe215 	stw	r2,-120(fp)
   23a6c:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[5];
   23a70:	e0bfe417 	ldw	r2,-112(fp)
   23a74:	10800517 	ldw	r2,20(r2)
   23a78:	e0bff215 	stw	r2,-56(fp)
   23a7c:	e03ff315 	stw	zero,-52(fp)
   23a80:	e13fe217 	ldw	r4,-120(fp)
   23a84:	e17fe317 	ldw	r5,-116(fp)
   23a88:	e1bff217 	ldw	r6,-56(fp)
   23a8c:	2185883a 	add	r2,r4,r6
   23a90:	110d803a 	cmpltu	r6,r2,r4
   23a94:	e1fff317 	ldw	r7,-52(fp)
   23a98:	29c7883a 	add	r3,r5,r7
   23a9c:	30c9883a 	add	r4,r6,r3
   23aa0:	2007883a 	mov	r3,r4
   23aa4:	e0bfe215 	stw	r2,-120(fp)
   23aa8:	e0ffe315 	stw	r3,-116(fp)
    r->d[5] = t & 0xFFFFFFFFUL; t >>= 32;
   23aac:	e0ffe217 	ldw	r3,-120(fp)
   23ab0:	e0bfe417 	ldw	r2,-112(fp)
   23ab4:	10c00515 	stw	r3,20(r2)
   23ab8:	e0bfe317 	ldw	r2,-116(fp)
   23abc:	1004d83a 	srl	r2,r2,zero
   23ac0:	e0bfe215 	stw	r2,-120(fp)
   23ac4:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[6];
   23ac8:	e0bfe417 	ldw	r2,-112(fp)
   23acc:	10800617 	ldw	r2,24(r2)
   23ad0:	e0bff415 	stw	r2,-48(fp)
   23ad4:	e03ff515 	stw	zero,-44(fp)
   23ad8:	e13fe217 	ldw	r4,-120(fp)
   23adc:	e17fe317 	ldw	r5,-116(fp)
   23ae0:	e1bff417 	ldw	r6,-48(fp)
   23ae4:	2185883a 	add	r2,r4,r6
   23ae8:	110d803a 	cmpltu	r6,r2,r4
   23aec:	e1fff517 	ldw	r7,-44(fp)
   23af0:	29c7883a 	add	r3,r5,r7
   23af4:	30c9883a 	add	r4,r6,r3
   23af8:	2007883a 	mov	r3,r4
   23afc:	e0bfe215 	stw	r2,-120(fp)
   23b00:	e0ffe315 	stw	r3,-116(fp)
    r->d[6] = t & 0xFFFFFFFFUL; t >>= 32;
   23b04:	e0ffe217 	ldw	r3,-120(fp)
   23b08:	e0bfe417 	ldw	r2,-112(fp)
   23b0c:	10c00615 	stw	r3,24(r2)
   23b10:	e0bfe317 	ldw	r2,-116(fp)
   23b14:	1004d83a 	srl	r2,r2,zero
   23b18:	e0bfe215 	stw	r2,-120(fp)
   23b1c:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[7];
   23b20:	e0bfe417 	ldw	r2,-112(fp)
   23b24:	10800717 	ldw	r2,28(r2)
   23b28:	e0bff615 	stw	r2,-40(fp)
   23b2c:	e03ff715 	stw	zero,-36(fp)
   23b30:	e13fe217 	ldw	r4,-120(fp)
   23b34:	e17fe317 	ldw	r5,-116(fp)
   23b38:	e1bff617 	ldw	r6,-40(fp)
   23b3c:	2185883a 	add	r2,r4,r6
   23b40:	110d803a 	cmpltu	r6,r2,r4
   23b44:	e1fff717 	ldw	r7,-36(fp)
   23b48:	29c7883a 	add	r3,r5,r7
   23b4c:	30c9883a 	add	r4,r6,r3
   23b50:	2007883a 	mov	r3,r4
   23b54:	e0bfe215 	stw	r2,-120(fp)
   23b58:	e0ffe315 	stw	r3,-116(fp)
    r->d[7] = t & 0xFFFFFFFFUL;
   23b5c:	e0ffe217 	ldw	r3,-120(fp)
   23b60:	e0bfe417 	ldw	r2,-112(fp)
   23b64:	10c00715 	stw	r3,28(r2)
    return overflow;
   23b68:	e0bfe517 	ldw	r2,-108(fp)
}
   23b6c:	e6fff804 	addi	sp,fp,-32
   23b70:	dfc00917 	ldw	ra,36(sp)
   23b74:	df000817 	ldw	fp,32(sp)
   23b78:	ddc00717 	ldw	r23,28(sp)
   23b7c:	dd800617 	ldw	r22,24(sp)
   23b80:	dd400517 	ldw	r21,20(sp)
   23b84:	dd000417 	ldw	r20,16(sp)
   23b88:	dcc00317 	ldw	r19,12(sp)
   23b8c:	dc800217 	ldw	r18,8(sp)
   23b90:	dc400117 	ldw	r17,4(sp)
   23b94:	dc000017 	ldw	r16,0(sp)
   23b98:	dec00a04 	addi	sp,sp,40
   23b9c:	f800283a 	ret

00023ba0 <secp256k1_scalar_add>:

static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {
   23ba0:	deffe004 	addi	sp,sp,-128
   23ba4:	dfc01f15 	stw	ra,124(sp)
   23ba8:	df001e15 	stw	fp,120(sp)
   23bac:	dd801d15 	stw	r22,116(sp)
   23bb0:	dd401c15 	stw	r21,112(sp)
   23bb4:	dd001b15 	stw	r20,108(sp)
   23bb8:	dcc01a15 	stw	r19,104(sp)
   23bbc:	dc801915 	stw	r18,100(sp)
   23bc0:	dc401815 	stw	r17,96(sp)
   23bc4:	dc001715 	stw	r16,92(sp)
   23bc8:	df001e04 	addi	fp,sp,120
   23bcc:	e13fe615 	stw	r4,-104(fp)
   23bd0:	e17fe715 	stw	r5,-100(fp)
   23bd4:	e1bfe815 	stw	r6,-96(fp)
    int overflow;
    uint64_t t = (uint64_t)a->d[0] + b->d[0];
   23bd8:	e0bfe717 	ldw	r2,-100(fp)
   23bdc:	10800017 	ldw	r2,0(r2)
   23be0:	100f883a 	mov	r7,r2
   23be4:	0011883a 	mov	r8,zero
   23be8:	e0bfe817 	ldw	r2,-96(fp)
   23bec:	10800017 	ldw	r2,0(r2)
   23bf0:	1013883a 	mov	r9,r2
   23bf4:	0015883a 	mov	r10,zero
   23bf8:	3a45883a 	add	r2,r7,r9
   23bfc:	11c9803a 	cmpltu	r4,r2,r7
   23c00:	4287883a 	add	r3,r8,r10
   23c04:	20c9883a 	add	r4,r4,r3
   23c08:	2007883a 	mov	r3,r4
   23c0c:	e0bfe315 	stw	r2,-116(fp)
   23c10:	e0ffe415 	stw	r3,-112(fp)
    r->d[0] = t & 0xFFFFFFFFULL; t >>= 32;
   23c14:	e0ffe317 	ldw	r3,-116(fp)
   23c18:	e0bfe617 	ldw	r2,-104(fp)
   23c1c:	10c00015 	stw	r3,0(r2)
   23c20:	e0bfe417 	ldw	r2,-112(fp)
   23c24:	1004d83a 	srl	r2,r2,zero
   23c28:	e0bfe315 	stw	r2,-116(fp)
   23c2c:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[1] + b->d[1];
   23c30:	e0bfe717 	ldw	r2,-100(fp)
   23c34:	10800117 	ldw	r2,4(r2)
   23c38:	1017883a 	mov	r11,r2
   23c3c:	0019883a 	mov	r12,zero
   23c40:	e0bfe817 	ldw	r2,-96(fp)
   23c44:	10800117 	ldw	r2,4(r2)
   23c48:	101b883a 	mov	r13,r2
   23c4c:	001d883a 	mov	r14,zero
   23c50:	5b45883a 	add	r2,r11,r13
   23c54:	12c9803a 	cmpltu	r4,r2,r11
   23c58:	6387883a 	add	r3,r12,r14
   23c5c:	20c9883a 	add	r4,r4,r3
   23c60:	2007883a 	mov	r3,r4
   23c64:	100f883a 	mov	r7,r2
   23c68:	1811883a 	mov	r8,r3
   23c6c:	e13fe317 	ldw	r4,-116(fp)
   23c70:	e17fe417 	ldw	r5,-112(fp)
   23c74:	21c5883a 	add	r2,r4,r7
   23c78:	110d803a 	cmpltu	r6,r2,r4
   23c7c:	2a07883a 	add	r3,r5,r8
   23c80:	30c9883a 	add	r4,r6,r3
   23c84:	2007883a 	mov	r3,r4
   23c88:	e0bfe315 	stw	r2,-116(fp)
   23c8c:	e0ffe415 	stw	r3,-112(fp)
    r->d[1] = t & 0xFFFFFFFFULL; t >>= 32;
   23c90:	e0ffe317 	ldw	r3,-116(fp)
   23c94:	e0bfe617 	ldw	r2,-104(fp)
   23c98:	10c00115 	stw	r3,4(r2)
   23c9c:	e0bfe417 	ldw	r2,-112(fp)
   23ca0:	1004d83a 	srl	r2,r2,zero
   23ca4:	e0bfe315 	stw	r2,-116(fp)
   23ca8:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[2] + b->d[2];
   23cac:	e0bfe717 	ldw	r2,-100(fp)
   23cb0:	10800217 	ldw	r2,8(r2)
   23cb4:	101f883a 	mov	r15,r2
   23cb8:	0021883a 	mov	r16,zero
   23cbc:	e0bfe817 	ldw	r2,-96(fp)
   23cc0:	10800217 	ldw	r2,8(r2)
   23cc4:	e0bfe915 	stw	r2,-92(fp)
   23cc8:	e03fea15 	stw	zero,-88(fp)
   23ccc:	e13fe917 	ldw	r4,-92(fp)
   23cd0:	7905883a 	add	r2,r15,r4
   23cd4:	13c9803a 	cmpltu	r4,r2,r15
   23cd8:	e17fea17 	ldw	r5,-88(fp)
   23cdc:	8147883a 	add	r3,r16,r5
   23ce0:	20c9883a 	add	r4,r4,r3
   23ce4:	2007883a 	mov	r3,r4
   23ce8:	100f883a 	mov	r7,r2
   23cec:	1811883a 	mov	r8,r3
   23cf0:	e13fe317 	ldw	r4,-116(fp)
   23cf4:	e17fe417 	ldw	r5,-112(fp)
   23cf8:	21c5883a 	add	r2,r4,r7
   23cfc:	110d803a 	cmpltu	r6,r2,r4
   23d00:	2a07883a 	add	r3,r5,r8
   23d04:	30c9883a 	add	r4,r6,r3
   23d08:	2007883a 	mov	r3,r4
   23d0c:	e0bfe315 	stw	r2,-116(fp)
   23d10:	e0ffe415 	stw	r3,-112(fp)
    r->d[2] = t & 0xFFFFFFFFULL; t >>= 32;
   23d14:	e0ffe317 	ldw	r3,-116(fp)
   23d18:	e0bfe617 	ldw	r2,-104(fp)
   23d1c:	10c00215 	stw	r3,8(r2)
   23d20:	e0bfe417 	ldw	r2,-112(fp)
   23d24:	1004d83a 	srl	r2,r2,zero
   23d28:	e0bfe315 	stw	r2,-116(fp)
   23d2c:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[3] + b->d[3];
   23d30:	e0bfe717 	ldw	r2,-100(fp)
   23d34:	10800317 	ldw	r2,12(r2)
   23d38:	e0bfeb15 	stw	r2,-84(fp)
   23d3c:	e03fec15 	stw	zero,-80(fp)
   23d40:	e0bfe817 	ldw	r2,-96(fp)
   23d44:	10800317 	ldw	r2,12(r2)
   23d48:	e0bfed15 	stw	r2,-76(fp)
   23d4c:	e03fee15 	stw	zero,-72(fp)
   23d50:	e1bfeb17 	ldw	r6,-84(fp)
   23d54:	e13fed17 	ldw	r4,-76(fp)
   23d58:	3105883a 	add	r2,r6,r4
   23d5c:	e17feb17 	ldw	r5,-84(fp)
   23d60:	1149803a 	cmpltu	r4,r2,r5
   23d64:	e1bfec17 	ldw	r6,-80(fp)
   23d68:	e17fee17 	ldw	r5,-72(fp)
   23d6c:	3147883a 	add	r3,r6,r5
   23d70:	20c9883a 	add	r4,r4,r3
   23d74:	2007883a 	mov	r3,r4
   23d78:	100d883a 	mov	r6,r2
   23d7c:	180f883a 	mov	r7,r3
   23d80:	e13fe317 	ldw	r4,-116(fp)
   23d84:	e17fe417 	ldw	r5,-112(fp)
   23d88:	2185883a 	add	r2,r4,r6
   23d8c:	1111803a 	cmpltu	r8,r2,r4
   23d90:	29c7883a 	add	r3,r5,r7
   23d94:	40c9883a 	add	r4,r8,r3
   23d98:	2007883a 	mov	r3,r4
   23d9c:	e0bfe315 	stw	r2,-116(fp)
   23da0:	e0ffe415 	stw	r3,-112(fp)
    r->d[3] = t & 0xFFFFFFFFULL; t >>= 32;
   23da4:	e0ffe317 	ldw	r3,-116(fp)
   23da8:	e0bfe617 	ldw	r2,-104(fp)
   23dac:	10c00315 	stw	r3,12(r2)
   23db0:	e0bfe417 	ldw	r2,-112(fp)
   23db4:	1004d83a 	srl	r2,r2,zero
   23db8:	e0bfe315 	stw	r2,-116(fp)
   23dbc:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[4] + b->d[4];
   23dc0:	e0bfe717 	ldw	r2,-100(fp)
   23dc4:	10800417 	ldw	r2,16(r2)
   23dc8:	e0bfef15 	stw	r2,-68(fp)
   23dcc:	e03ff015 	stw	zero,-64(fp)
   23dd0:	e0bfe817 	ldw	r2,-96(fp)
   23dd4:	10800417 	ldw	r2,16(r2)
   23dd8:	e0bff115 	stw	r2,-60(fp)
   23ddc:	e03ff215 	stw	zero,-56(fp)
   23de0:	e1bfef17 	ldw	r6,-68(fp)
   23de4:	e13ff117 	ldw	r4,-60(fp)
   23de8:	3105883a 	add	r2,r6,r4
   23dec:	e17fef17 	ldw	r5,-68(fp)
   23df0:	1149803a 	cmpltu	r4,r2,r5
   23df4:	e1bff017 	ldw	r6,-64(fp)
   23df8:	e17ff217 	ldw	r5,-56(fp)
   23dfc:	3147883a 	add	r3,r6,r5
   23e00:	20c9883a 	add	r4,r4,r3
   23e04:	2007883a 	mov	r3,r4
   23e08:	100d883a 	mov	r6,r2
   23e0c:	180f883a 	mov	r7,r3
   23e10:	e13fe317 	ldw	r4,-116(fp)
   23e14:	e17fe417 	ldw	r5,-112(fp)
   23e18:	2185883a 	add	r2,r4,r6
   23e1c:	1111803a 	cmpltu	r8,r2,r4
   23e20:	29c7883a 	add	r3,r5,r7
   23e24:	40c9883a 	add	r4,r8,r3
   23e28:	2007883a 	mov	r3,r4
   23e2c:	e0bfe315 	stw	r2,-116(fp)
   23e30:	e0ffe415 	stw	r3,-112(fp)
    r->d[4] = t & 0xFFFFFFFFULL; t >>= 32;
   23e34:	e0ffe317 	ldw	r3,-116(fp)
   23e38:	e0bfe617 	ldw	r2,-104(fp)
   23e3c:	10c00415 	stw	r3,16(r2)
   23e40:	e0bfe417 	ldw	r2,-112(fp)
   23e44:	1004d83a 	srl	r2,r2,zero
   23e48:	e0bfe315 	stw	r2,-116(fp)
   23e4c:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[5] + b->d[5];
   23e50:	e0bfe717 	ldw	r2,-100(fp)
   23e54:	10800517 	ldw	r2,20(r2)
   23e58:	102b883a 	mov	r21,r2
   23e5c:	002d883a 	mov	r22,zero
   23e60:	e0bfe817 	ldw	r2,-96(fp)
   23e64:	10800517 	ldw	r2,20(r2)
   23e68:	e0bff315 	stw	r2,-52(fp)
   23e6c:	e03ff415 	stw	zero,-48(fp)
   23e70:	e1bff317 	ldw	r6,-52(fp)
   23e74:	a985883a 	add	r2,r21,r6
   23e78:	1549803a 	cmpltu	r4,r2,r21
   23e7c:	e17ff417 	ldw	r5,-48(fp)
   23e80:	b147883a 	add	r3,r22,r5
   23e84:	20c9883a 	add	r4,r4,r3
   23e88:	2007883a 	mov	r3,r4
   23e8c:	100d883a 	mov	r6,r2
   23e90:	180f883a 	mov	r7,r3
   23e94:	e13fe317 	ldw	r4,-116(fp)
   23e98:	e17fe417 	ldw	r5,-112(fp)
   23e9c:	2185883a 	add	r2,r4,r6
   23ea0:	1111803a 	cmpltu	r8,r2,r4
   23ea4:	29c7883a 	add	r3,r5,r7
   23ea8:	40c9883a 	add	r4,r8,r3
   23eac:	2007883a 	mov	r3,r4
   23eb0:	e0bfe315 	stw	r2,-116(fp)
   23eb4:	e0ffe415 	stw	r3,-112(fp)
    r->d[5] = t & 0xFFFFFFFFULL; t >>= 32;
   23eb8:	e0ffe317 	ldw	r3,-116(fp)
   23ebc:	e0bfe617 	ldw	r2,-104(fp)
   23ec0:	10c00515 	stw	r3,20(r2)
   23ec4:	e0bfe417 	ldw	r2,-112(fp)
   23ec8:	1004d83a 	srl	r2,r2,zero
   23ecc:	e0bfe315 	stw	r2,-116(fp)
   23ed0:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[6] + b->d[6];
   23ed4:	e0bfe717 	ldw	r2,-100(fp)
   23ed8:	10800617 	ldw	r2,24(r2)
   23edc:	1027883a 	mov	r19,r2
   23ee0:	0029883a 	mov	r20,zero
   23ee4:	e0bfe817 	ldw	r2,-96(fp)
   23ee8:	10800617 	ldw	r2,24(r2)
   23eec:	e0bff515 	stw	r2,-44(fp)
   23ef0:	e03ff615 	stw	zero,-40(fp)
   23ef4:	e1bff517 	ldw	r6,-44(fp)
   23ef8:	9985883a 	add	r2,r19,r6
   23efc:	14c9803a 	cmpltu	r4,r2,r19
   23f00:	e17ff617 	ldw	r5,-40(fp)
   23f04:	a147883a 	add	r3,r20,r5
   23f08:	20c9883a 	add	r4,r4,r3
   23f0c:	2007883a 	mov	r3,r4
   23f10:	100d883a 	mov	r6,r2
   23f14:	180f883a 	mov	r7,r3
   23f18:	e13fe317 	ldw	r4,-116(fp)
   23f1c:	e17fe417 	ldw	r5,-112(fp)
   23f20:	2185883a 	add	r2,r4,r6
   23f24:	1111803a 	cmpltu	r8,r2,r4
   23f28:	29c7883a 	add	r3,r5,r7
   23f2c:	40c9883a 	add	r4,r8,r3
   23f30:	2007883a 	mov	r3,r4
   23f34:	e0bfe315 	stw	r2,-116(fp)
   23f38:	e0ffe415 	stw	r3,-112(fp)
    r->d[6] = t & 0xFFFFFFFFULL; t >>= 32;
   23f3c:	e0ffe317 	ldw	r3,-116(fp)
   23f40:	e0bfe617 	ldw	r2,-104(fp)
   23f44:	10c00615 	stw	r3,24(r2)
   23f48:	e0bfe417 	ldw	r2,-112(fp)
   23f4c:	1004d83a 	srl	r2,r2,zero
   23f50:	e0bfe315 	stw	r2,-116(fp)
   23f54:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[7] + b->d[7];
   23f58:	e0bfe717 	ldw	r2,-100(fp)
   23f5c:	10800717 	ldw	r2,28(r2)
   23f60:	1023883a 	mov	r17,r2
   23f64:	0025883a 	mov	r18,zero
   23f68:	e0bfe817 	ldw	r2,-96(fp)
   23f6c:	10800717 	ldw	r2,28(r2)
   23f70:	e0bff715 	stw	r2,-36(fp)
   23f74:	e03ff815 	stw	zero,-32(fp)
   23f78:	e1bff717 	ldw	r6,-36(fp)
   23f7c:	8985883a 	add	r2,r17,r6
   23f80:	1449803a 	cmpltu	r4,r2,r17
   23f84:	e17ff817 	ldw	r5,-32(fp)
   23f88:	9147883a 	add	r3,r18,r5
   23f8c:	20c9883a 	add	r4,r4,r3
   23f90:	2007883a 	mov	r3,r4
   23f94:	100d883a 	mov	r6,r2
   23f98:	180f883a 	mov	r7,r3
   23f9c:	e13fe317 	ldw	r4,-116(fp)
   23fa0:	e17fe417 	ldw	r5,-112(fp)
   23fa4:	2185883a 	add	r2,r4,r6
   23fa8:	1111803a 	cmpltu	r8,r2,r4
   23fac:	29c7883a 	add	r3,r5,r7
   23fb0:	40c9883a 	add	r4,r8,r3
   23fb4:	2007883a 	mov	r3,r4
   23fb8:	e0bfe315 	stw	r2,-116(fp)
   23fbc:	e0ffe415 	stw	r3,-112(fp)
    r->d[7] = t & 0xFFFFFFFFULL; t >>= 32;
   23fc0:	e0ffe317 	ldw	r3,-116(fp)
   23fc4:	e0bfe617 	ldw	r2,-104(fp)
   23fc8:	10c00715 	stw	r3,28(r2)
   23fcc:	e0bfe417 	ldw	r2,-112(fp)
   23fd0:	1004d83a 	srl	r2,r2,zero
   23fd4:	e0bfe315 	stw	r2,-116(fp)
   23fd8:	e03fe415 	stw	zero,-112(fp)
    overflow = t + secp256k1_scalar_check_overflow(r);
   23fdc:	e13fe617 	ldw	r4,-104(fp)
   23fe0:	00235440 	call	23544 <secp256k1_scalar_check_overflow>
   23fe4:	1007883a 	mov	r3,r2
   23fe8:	e0bfe317 	ldw	r2,-116(fp)
   23fec:	1885883a 	add	r2,r3,r2
   23ff0:	e0bfe515 	stw	r2,-108(fp)
    VERIFY_CHECK(overflow == 0 || overflow == 1);
   23ff4:	e0bfe517 	ldw	r2,-108(fp)
   23ff8:	1004c03a 	cmpne	r2,r2,zero
   23ffc:	10803fcc 	andi	r2,r2,255
   24000:	10001126 	beq	r2,zero,24048 <secp256k1_scalar_add+0x4a8>
   24004:	e0bfe517 	ldw	r2,-108(fp)
   24008:	10800058 	cmpnei	r2,r2,1
   2400c:	10803fcc 	andi	r2,r2,255
   24010:	10000d26 	beq	r2,zero,24048 <secp256k1_scalar_add+0x4a8>
   24014:	d0a01617 	ldw	r2,-32680(gp)
   24018:	10c00317 	ldw	r3,12(r2)
   2401c:	008001b4 	movhi	r2,6
   24020:	10afd804 	addi	r2,r2,-16544
   24024:	d8800015 	stw	r2,0(sp)
   24028:	01c02184 	movi	r7,134
   2402c:	018001b4 	movhi	r6,6
   24030:	31af9204 	addi	r6,r6,-16824
   24034:	014001b4 	movhi	r5,6
   24038:	296b3804 	addi	r5,r5,-21280
   2403c:	1809883a 	mov	r4,r3
   24040:	00452600 	call	45260 <fprintf>
   24044:	00450340 	call	45034 <abort>
    secp256k1_scalar_reduce(r, overflow);
   24048:	e0bfe517 	ldw	r2,-108(fp)
   2404c:	100b883a 	mov	r5,r2
   24050:	e13fe617 	ldw	r4,-104(fp)
   24054:	002375c0 	call	2375c <secp256k1_scalar_reduce>
    return overflow;
   24058:	e0bfe517 	ldw	r2,-108(fp)
}
   2405c:	e6fff904 	addi	sp,fp,-28
   24060:	dfc00817 	ldw	ra,32(sp)
   24064:	df000717 	ldw	fp,28(sp)
   24068:	dd800617 	ldw	r22,24(sp)
   2406c:	dd400517 	ldw	r21,20(sp)
   24070:	dd000417 	ldw	r20,16(sp)
   24074:	dcc00317 	ldw	r19,12(sp)
   24078:	dc800217 	ldw	r18,8(sp)
   2407c:	dc400117 	ldw	r17,4(sp)
   24080:	dc000017 	ldw	r16,0(sp)
   24084:	dec00904 	addi	sp,sp,36
   24088:	f800283a 	ret

0002408c <secp256k1_scalar_cadd_bit>:

static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {
   2408c:	deffdf04 	addi	sp,sp,-132
   24090:	dfc02015 	stw	ra,128(sp)
   24094:	df001f15 	stw	fp,124(sp)
   24098:	dd801e15 	stw	r22,120(sp)
   2409c:	dd401d15 	stw	r21,116(sp)
   240a0:	dd001c15 	stw	r20,112(sp)
   240a4:	dcc01b15 	stw	r19,108(sp)
   240a8:	dc801a15 	stw	r18,104(sp)
   240ac:	dc401915 	stw	r17,100(sp)
   240b0:	dc001815 	stw	r16,96(sp)
   240b4:	df001f04 	addi	fp,sp,124
   240b8:	e13fe415 	stw	r4,-112(fp)
   240bc:	e17fe515 	stw	r5,-108(fp)
   240c0:	e1bfe615 	stw	r6,-104(fp)
    uint64_t t;
    VERIFY_CHECK(bit < 256);
   240c4:	e0bfe517 	ldw	r2,-108(fp)
   240c8:	10804028 	cmpgeui	r2,r2,256
   240cc:	10803fcc 	andi	r2,r2,255
   240d0:	10000d26 	beq	r2,zero,24108 <secp256k1_scalar_cadd_bit+0x7c>
   240d4:	d0a01617 	ldw	r2,-32680(gp)
   240d8:	10c00317 	ldw	r3,12(r2)
   240dc:	008001b4 	movhi	r2,6
   240e0:	10afe604 	addi	r2,r2,-16488
   240e4:	d8800015 	stw	r2,0(sp)
   240e8:	01c02344 	movi	r7,141
   240ec:	018001b4 	movhi	r6,6
   240f0:	31af9204 	addi	r6,r6,-16824
   240f4:	014001b4 	movhi	r5,6
   240f8:	296b3804 	addi	r5,r5,-21280
   240fc:	1809883a 	mov	r4,r3
   24100:	00452600 	call	45260 <fprintf>
   24104:	00450340 	call	45034 <abort>
    bit += ((uint32_t) flag - 1) & 0x100;  /* forcing (bit >> 5) > 7 makes this a noop */
   24108:	e0bfe617 	ldw	r2,-104(fp)
   2410c:	10bfffc4 	addi	r2,r2,-1
   24110:	10c0400c 	andi	r3,r2,256
   24114:	e0bfe517 	ldw	r2,-108(fp)
   24118:	10c5883a 	add	r2,r2,r3
   2411c:	e0bfe515 	stw	r2,-108(fp)
    t = (uint64_t)r->d[0] + (((uint32_t)((bit >> 5) == 0)) << (bit & 0x1F));
   24120:	e0bfe417 	ldw	r2,-112(fp)
   24124:	10800017 	ldw	r2,0(r2)
   24128:	100f883a 	mov	r7,r2
   2412c:	0011883a 	mov	r8,zero
   24130:	e0bfe517 	ldw	r2,-108(fp)
   24134:	1004d17a 	srli	r2,r2,5
   24138:	1005003a 	cmpeq	r2,r2,zero
   2413c:	10c03fcc 	andi	r3,r2,255
   24140:	e0bfe517 	ldw	r2,-108(fp)
   24144:	108007cc 	andi	r2,r2,31
   24148:	1884983a 	sll	r2,r3,r2
   2414c:	1013883a 	mov	r9,r2
   24150:	0015883a 	mov	r10,zero
   24154:	3a45883a 	add	r2,r7,r9
   24158:	11c9803a 	cmpltu	r4,r2,r7
   2415c:	4287883a 	add	r3,r8,r10
   24160:	20c9883a 	add	r4,r4,r3
   24164:	2007883a 	mov	r3,r4
   24168:	e0bfe215 	stw	r2,-120(fp)
   2416c:	e0ffe315 	stw	r3,-116(fp)
    r->d[0] = t & 0xFFFFFFFFULL; t >>= 32;
   24170:	e0ffe217 	ldw	r3,-120(fp)
   24174:	e0bfe417 	ldw	r2,-112(fp)
   24178:	10c00015 	stw	r3,0(r2)
   2417c:	e0bfe317 	ldw	r2,-116(fp)
   24180:	1004d83a 	srl	r2,r2,zero
   24184:	e0bfe215 	stw	r2,-120(fp)
   24188:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[1] + (((uint32_t)((bit >> 5) == 1)) << (bit & 0x1F));
   2418c:	e0bfe417 	ldw	r2,-112(fp)
   24190:	10800117 	ldw	r2,4(r2)
   24194:	1017883a 	mov	r11,r2
   24198:	0019883a 	mov	r12,zero
   2419c:	e0bfe517 	ldw	r2,-108(fp)
   241a0:	1004d17a 	srli	r2,r2,5
   241a4:	10800060 	cmpeqi	r2,r2,1
   241a8:	10c03fcc 	andi	r3,r2,255
   241ac:	e0bfe517 	ldw	r2,-108(fp)
   241b0:	108007cc 	andi	r2,r2,31
   241b4:	1884983a 	sll	r2,r3,r2
   241b8:	101b883a 	mov	r13,r2
   241bc:	001d883a 	mov	r14,zero
   241c0:	5b45883a 	add	r2,r11,r13
   241c4:	12c9803a 	cmpltu	r4,r2,r11
   241c8:	6387883a 	add	r3,r12,r14
   241cc:	20c9883a 	add	r4,r4,r3
   241d0:	2007883a 	mov	r3,r4
   241d4:	100f883a 	mov	r7,r2
   241d8:	1811883a 	mov	r8,r3
   241dc:	e13fe217 	ldw	r4,-120(fp)
   241e0:	e17fe317 	ldw	r5,-116(fp)
   241e4:	21c5883a 	add	r2,r4,r7
   241e8:	110d803a 	cmpltu	r6,r2,r4
   241ec:	2a07883a 	add	r3,r5,r8
   241f0:	30c9883a 	add	r4,r6,r3
   241f4:	2007883a 	mov	r3,r4
   241f8:	e0bfe215 	stw	r2,-120(fp)
   241fc:	e0ffe315 	stw	r3,-116(fp)
    r->d[1] = t & 0xFFFFFFFFULL; t >>= 32;
   24200:	e0ffe217 	ldw	r3,-120(fp)
   24204:	e0bfe417 	ldw	r2,-112(fp)
   24208:	10c00115 	stw	r3,4(r2)
   2420c:	e0bfe317 	ldw	r2,-116(fp)
   24210:	1004d83a 	srl	r2,r2,zero
   24214:	e0bfe215 	stw	r2,-120(fp)
   24218:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[2] + (((uint32_t)((bit >> 5) == 2)) << (bit & 0x1F));
   2421c:	e0bfe417 	ldw	r2,-112(fp)
   24220:	10800217 	ldw	r2,8(r2)
   24224:	101f883a 	mov	r15,r2
   24228:	0021883a 	mov	r16,zero
   2422c:	e0bfe517 	ldw	r2,-108(fp)
   24230:	1004d17a 	srli	r2,r2,5
   24234:	108000a0 	cmpeqi	r2,r2,2
   24238:	10c03fcc 	andi	r3,r2,255
   2423c:	e0bfe517 	ldw	r2,-108(fp)
   24240:	108007cc 	andi	r2,r2,31
   24244:	1884983a 	sll	r2,r3,r2
   24248:	e0bfe715 	stw	r2,-100(fp)
   2424c:	e03fe815 	stw	zero,-96(fp)
   24250:	e13fe717 	ldw	r4,-100(fp)
   24254:	7905883a 	add	r2,r15,r4
   24258:	13c9803a 	cmpltu	r4,r2,r15
   2425c:	e17fe817 	ldw	r5,-96(fp)
   24260:	8147883a 	add	r3,r16,r5
   24264:	20c9883a 	add	r4,r4,r3
   24268:	2007883a 	mov	r3,r4
   2426c:	100f883a 	mov	r7,r2
   24270:	1811883a 	mov	r8,r3
   24274:	e13fe217 	ldw	r4,-120(fp)
   24278:	e17fe317 	ldw	r5,-116(fp)
   2427c:	21c5883a 	add	r2,r4,r7
   24280:	110d803a 	cmpltu	r6,r2,r4
   24284:	2a07883a 	add	r3,r5,r8
   24288:	30c9883a 	add	r4,r6,r3
   2428c:	2007883a 	mov	r3,r4
   24290:	e0bfe215 	stw	r2,-120(fp)
   24294:	e0ffe315 	stw	r3,-116(fp)
    r->d[2] = t & 0xFFFFFFFFULL; t >>= 32;
   24298:	e0ffe217 	ldw	r3,-120(fp)
   2429c:	e0bfe417 	ldw	r2,-112(fp)
   242a0:	10c00215 	stw	r3,8(r2)
   242a4:	e0bfe317 	ldw	r2,-116(fp)
   242a8:	1004d83a 	srl	r2,r2,zero
   242ac:	e0bfe215 	stw	r2,-120(fp)
   242b0:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[3] + (((uint32_t)((bit >> 5) == 3)) << (bit & 0x1F));
   242b4:	e0bfe417 	ldw	r2,-112(fp)
   242b8:	10800317 	ldw	r2,12(r2)
   242bc:	1023883a 	mov	r17,r2
   242c0:	0025883a 	mov	r18,zero
   242c4:	e0bfe517 	ldw	r2,-108(fp)
   242c8:	1004d17a 	srli	r2,r2,5
   242cc:	108000e0 	cmpeqi	r2,r2,3
   242d0:	10c03fcc 	andi	r3,r2,255
   242d4:	e0bfe517 	ldw	r2,-108(fp)
   242d8:	108007cc 	andi	r2,r2,31
   242dc:	1884983a 	sll	r2,r3,r2
   242e0:	e0bfe915 	stw	r2,-92(fp)
   242e4:	e03fea15 	stw	zero,-88(fp)
   242e8:	e1bfe917 	ldw	r6,-92(fp)
   242ec:	8985883a 	add	r2,r17,r6
   242f0:	1449803a 	cmpltu	r4,r2,r17
   242f4:	e17fea17 	ldw	r5,-88(fp)
   242f8:	9147883a 	add	r3,r18,r5
   242fc:	20c9883a 	add	r4,r4,r3
   24300:	2007883a 	mov	r3,r4
   24304:	100d883a 	mov	r6,r2
   24308:	180f883a 	mov	r7,r3
   2430c:	e13fe217 	ldw	r4,-120(fp)
   24310:	e17fe317 	ldw	r5,-116(fp)
   24314:	2185883a 	add	r2,r4,r6
   24318:	1111803a 	cmpltu	r8,r2,r4
   2431c:	29c7883a 	add	r3,r5,r7
   24320:	40c9883a 	add	r4,r8,r3
   24324:	2007883a 	mov	r3,r4
   24328:	e0bfe215 	stw	r2,-120(fp)
   2432c:	e0ffe315 	stw	r3,-116(fp)
    r->d[3] = t & 0xFFFFFFFFULL; t >>= 32;
   24330:	e0ffe217 	ldw	r3,-120(fp)
   24334:	e0bfe417 	ldw	r2,-112(fp)
   24338:	10c00315 	stw	r3,12(r2)
   2433c:	e0bfe317 	ldw	r2,-116(fp)
   24340:	1004d83a 	srl	r2,r2,zero
   24344:	e0bfe215 	stw	r2,-120(fp)
   24348:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[4] + (((uint32_t)((bit >> 5) == 4)) << (bit & 0x1F));
   2434c:	e0bfe417 	ldw	r2,-112(fp)
   24350:	10800417 	ldw	r2,16(r2)
   24354:	e0bfeb15 	stw	r2,-84(fp)
   24358:	e03fec15 	stw	zero,-80(fp)
   2435c:	e0bfe517 	ldw	r2,-108(fp)
   24360:	1004d17a 	srli	r2,r2,5
   24364:	10800120 	cmpeqi	r2,r2,4
   24368:	10c03fcc 	andi	r3,r2,255
   2436c:	e0bfe517 	ldw	r2,-108(fp)
   24370:	108007cc 	andi	r2,r2,31
   24374:	1884983a 	sll	r2,r3,r2
   24378:	e0bfed15 	stw	r2,-76(fp)
   2437c:	e03fee15 	stw	zero,-72(fp)
   24380:	e1bfeb17 	ldw	r6,-84(fp)
   24384:	e13fed17 	ldw	r4,-76(fp)
   24388:	3105883a 	add	r2,r6,r4
   2438c:	e17feb17 	ldw	r5,-84(fp)
   24390:	1149803a 	cmpltu	r4,r2,r5
   24394:	e1bfec17 	ldw	r6,-80(fp)
   24398:	e17fee17 	ldw	r5,-72(fp)
   2439c:	3147883a 	add	r3,r6,r5
   243a0:	20c9883a 	add	r4,r4,r3
   243a4:	2007883a 	mov	r3,r4
   243a8:	100d883a 	mov	r6,r2
   243ac:	180f883a 	mov	r7,r3
   243b0:	e13fe217 	ldw	r4,-120(fp)
   243b4:	e17fe317 	ldw	r5,-116(fp)
   243b8:	2185883a 	add	r2,r4,r6
   243bc:	1111803a 	cmpltu	r8,r2,r4
   243c0:	29c7883a 	add	r3,r5,r7
   243c4:	40c9883a 	add	r4,r8,r3
   243c8:	2007883a 	mov	r3,r4
   243cc:	e0bfe215 	stw	r2,-120(fp)
   243d0:	e0ffe315 	stw	r3,-116(fp)
    r->d[4] = t & 0xFFFFFFFFULL; t >>= 32;
   243d4:	e0ffe217 	ldw	r3,-120(fp)
   243d8:	e0bfe417 	ldw	r2,-112(fp)
   243dc:	10c00415 	stw	r3,16(r2)
   243e0:	e0bfe317 	ldw	r2,-116(fp)
   243e4:	1004d83a 	srl	r2,r2,zero
   243e8:	e0bfe215 	stw	r2,-120(fp)
   243ec:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[5] + (((uint32_t)((bit >> 5) == 5)) << (bit & 0x1F));
   243f0:	e0bfe417 	ldw	r2,-112(fp)
   243f4:	10800517 	ldw	r2,20(r2)
   243f8:	e0bfef15 	stw	r2,-68(fp)
   243fc:	e03ff015 	stw	zero,-64(fp)
   24400:	e0bfe517 	ldw	r2,-108(fp)
   24404:	1004d17a 	srli	r2,r2,5
   24408:	10800160 	cmpeqi	r2,r2,5
   2440c:	10c03fcc 	andi	r3,r2,255
   24410:	e0bfe517 	ldw	r2,-108(fp)
   24414:	108007cc 	andi	r2,r2,31
   24418:	1884983a 	sll	r2,r3,r2
   2441c:	e0bff115 	stw	r2,-60(fp)
   24420:	e03ff215 	stw	zero,-56(fp)
   24424:	e1bfef17 	ldw	r6,-68(fp)
   24428:	e13ff117 	ldw	r4,-60(fp)
   2442c:	3105883a 	add	r2,r6,r4
   24430:	e17fef17 	ldw	r5,-68(fp)
   24434:	1149803a 	cmpltu	r4,r2,r5
   24438:	e1bff017 	ldw	r6,-64(fp)
   2443c:	e17ff217 	ldw	r5,-56(fp)
   24440:	3147883a 	add	r3,r6,r5
   24444:	20c9883a 	add	r4,r4,r3
   24448:	2007883a 	mov	r3,r4
   2444c:	100d883a 	mov	r6,r2
   24450:	180f883a 	mov	r7,r3
   24454:	e13fe217 	ldw	r4,-120(fp)
   24458:	e17fe317 	ldw	r5,-116(fp)
   2445c:	2185883a 	add	r2,r4,r6
   24460:	1111803a 	cmpltu	r8,r2,r4
   24464:	29c7883a 	add	r3,r5,r7
   24468:	40c9883a 	add	r4,r8,r3
   2446c:	2007883a 	mov	r3,r4
   24470:	e0bfe215 	stw	r2,-120(fp)
   24474:	e0ffe315 	stw	r3,-116(fp)
    r->d[5] = t & 0xFFFFFFFFULL; t >>= 32;
   24478:	e0ffe217 	ldw	r3,-120(fp)
   2447c:	e0bfe417 	ldw	r2,-112(fp)
   24480:	10c00515 	stw	r3,20(r2)
   24484:	e0bfe317 	ldw	r2,-116(fp)
   24488:	1004d83a 	srl	r2,r2,zero
   2448c:	e0bfe215 	stw	r2,-120(fp)
   24490:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[6] + (((uint32_t)((bit >> 5) == 6)) << (bit & 0x1F));
   24494:	e0bfe417 	ldw	r2,-112(fp)
   24498:	10800617 	ldw	r2,24(r2)
   2449c:	102b883a 	mov	r21,r2
   244a0:	002d883a 	mov	r22,zero
   244a4:	e0bfe517 	ldw	r2,-108(fp)
   244a8:	1004d17a 	srli	r2,r2,5
   244ac:	108001a0 	cmpeqi	r2,r2,6
   244b0:	10c03fcc 	andi	r3,r2,255
   244b4:	e0bfe517 	ldw	r2,-108(fp)
   244b8:	108007cc 	andi	r2,r2,31
   244bc:	1884983a 	sll	r2,r3,r2
   244c0:	e0bff315 	stw	r2,-52(fp)
   244c4:	e03ff415 	stw	zero,-48(fp)
   244c8:	e1bff317 	ldw	r6,-52(fp)
   244cc:	a985883a 	add	r2,r21,r6
   244d0:	1549803a 	cmpltu	r4,r2,r21
   244d4:	e17ff417 	ldw	r5,-48(fp)
   244d8:	b147883a 	add	r3,r22,r5
   244dc:	20c9883a 	add	r4,r4,r3
   244e0:	2007883a 	mov	r3,r4
   244e4:	100d883a 	mov	r6,r2
   244e8:	180f883a 	mov	r7,r3
   244ec:	e13fe217 	ldw	r4,-120(fp)
   244f0:	e17fe317 	ldw	r5,-116(fp)
   244f4:	2185883a 	add	r2,r4,r6
   244f8:	1111803a 	cmpltu	r8,r2,r4
   244fc:	29c7883a 	add	r3,r5,r7
   24500:	40c9883a 	add	r4,r8,r3
   24504:	2007883a 	mov	r3,r4
   24508:	e0bfe215 	stw	r2,-120(fp)
   2450c:	e0ffe315 	stw	r3,-116(fp)
    r->d[6] = t & 0xFFFFFFFFULL; t >>= 32;
   24510:	e0ffe217 	ldw	r3,-120(fp)
   24514:	e0bfe417 	ldw	r2,-112(fp)
   24518:	10c00615 	stw	r3,24(r2)
   2451c:	e0bfe317 	ldw	r2,-116(fp)
   24520:	1004d83a 	srl	r2,r2,zero
   24524:	e0bfe215 	stw	r2,-120(fp)
   24528:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[7] + (((uint32_t)((bit >> 5) == 7)) << (bit & 0x1F));
   2452c:	e0bfe417 	ldw	r2,-112(fp)
   24530:	10800717 	ldw	r2,28(r2)
   24534:	1027883a 	mov	r19,r2
   24538:	0029883a 	mov	r20,zero
   2453c:	e0bfe517 	ldw	r2,-108(fp)
   24540:	1004d17a 	srli	r2,r2,5
   24544:	108001e0 	cmpeqi	r2,r2,7
   24548:	10c03fcc 	andi	r3,r2,255
   2454c:	e0bfe517 	ldw	r2,-108(fp)
   24550:	108007cc 	andi	r2,r2,31
   24554:	1884983a 	sll	r2,r3,r2
   24558:	e0bff515 	stw	r2,-44(fp)
   2455c:	e03ff615 	stw	zero,-40(fp)
   24560:	e1bff517 	ldw	r6,-44(fp)
   24564:	9985883a 	add	r2,r19,r6
   24568:	14c9803a 	cmpltu	r4,r2,r19
   2456c:	e17ff617 	ldw	r5,-40(fp)
   24570:	a147883a 	add	r3,r20,r5
   24574:	20c9883a 	add	r4,r4,r3
   24578:	2007883a 	mov	r3,r4
   2457c:	100d883a 	mov	r6,r2
   24580:	180f883a 	mov	r7,r3
   24584:	e13fe217 	ldw	r4,-120(fp)
   24588:	e17fe317 	ldw	r5,-116(fp)
   2458c:	2185883a 	add	r2,r4,r6
   24590:	1111803a 	cmpltu	r8,r2,r4
   24594:	29c7883a 	add	r3,r5,r7
   24598:	40c9883a 	add	r4,r8,r3
   2459c:	2007883a 	mov	r3,r4
   245a0:	e0bfe215 	stw	r2,-120(fp)
   245a4:	e0ffe315 	stw	r3,-116(fp)
    r->d[7] = t & 0xFFFFFFFFULL;
   245a8:	e0ffe217 	ldw	r3,-120(fp)
   245ac:	e0bfe417 	ldw	r2,-112(fp)
   245b0:	10c00715 	stw	r3,28(r2)
#ifdef VERIFY
    VERIFY_CHECK((t >> 32) == 0);
   245b4:	e0bfe317 	ldw	r2,-116(fp)
   245b8:	1004d83a 	srl	r2,r2,zero
   245bc:	e0bff715 	stw	r2,-36(fp)
   245c0:	e03ff815 	stw	zero,-32(fp)
   245c4:	e1bff717 	ldw	r6,-36(fp)
   245c8:	e0fff817 	ldw	r3,-32(fp)
   245cc:	30c4b03a 	or	r2,r6,r3
   245d0:	1004c03a 	cmpne	r2,r2,zero
   245d4:	10803fcc 	andi	r2,r2,255
   245d8:	10000d26 	beq	r2,zero,24610 <secp256k1_scalar_cadd_bit+0x584>
   245dc:	d0a01617 	ldw	r2,-32680(gp)
   245e0:	10c00317 	ldw	r3,12(r2)
   245e4:	008001b4 	movhi	r2,6
   245e8:	10afef04 	addi	r2,r2,-16452
   245ec:	d8800015 	stw	r2,0(sp)
   245f0:	01c02804 	movi	r7,160
   245f4:	018001b4 	movhi	r6,6
   245f8:	31af9204 	addi	r6,r6,-16824
   245fc:	014001b4 	movhi	r5,6
   24600:	296b3804 	addi	r5,r5,-21280
   24604:	1809883a 	mov	r4,r3
   24608:	00452600 	call	45260 <fprintf>
   2460c:	00450340 	call	45034 <abort>
    VERIFY_CHECK(secp256k1_scalar_check_overflow(r) == 0);
   24610:	e13fe417 	ldw	r4,-112(fp)
   24614:	00235440 	call	23544 <secp256k1_scalar_check_overflow>
   24618:	1004c03a 	cmpne	r2,r2,zero
   2461c:	10803fcc 	andi	r2,r2,255
   24620:	10000d26 	beq	r2,zero,24658 <secp256k1_scalar_cadd_bit+0x5cc>
   24624:	d0a01617 	ldw	r2,-32680(gp)
   24628:	10c00317 	ldw	r3,12(r2)
   2462c:	008001b4 	movhi	r2,6
   24630:	10aff904 	addi	r2,r2,-16412
   24634:	d8800015 	stw	r2,0(sp)
   24638:	01c02844 	movi	r7,161
   2463c:	018001b4 	movhi	r6,6
   24640:	31af9204 	addi	r6,r6,-16824
   24644:	014001b4 	movhi	r5,6
   24648:	296b3804 	addi	r5,r5,-21280
   2464c:	1809883a 	mov	r4,r3
   24650:	00452600 	call	45260 <fprintf>
   24654:	00450340 	call	45034 <abort>
#endif
}
   24658:	0001883a 	nop
   2465c:	e6fff904 	addi	sp,fp,-28
   24660:	dfc00817 	ldw	ra,32(sp)
   24664:	df000717 	ldw	fp,28(sp)
   24668:	dd800617 	ldw	r22,24(sp)
   2466c:	dd400517 	ldw	r21,20(sp)
   24670:	dd000417 	ldw	r20,16(sp)
   24674:	dcc00317 	ldw	r19,12(sp)
   24678:	dc800217 	ldw	r18,8(sp)
   2467c:	dc400117 	ldw	r17,4(sp)
   24680:	dc000017 	ldw	r16,0(sp)
   24684:	dec00904 	addi	sp,sp,36
   24688:	f800283a 	ret

0002468c <secp256k1_scalar_set_b32>:

static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {
   2468c:	defffa04 	addi	sp,sp,-24
   24690:	dfc00515 	stw	ra,20(sp)
   24694:	df000415 	stw	fp,16(sp)
   24698:	df000404 	addi	fp,sp,16
   2469c:	e13ffd15 	stw	r4,-12(fp)
   246a0:	e17ffe15 	stw	r5,-8(fp)
   246a4:	e1bfff15 	stw	r6,-4(fp)
    int over;
    r->d[0] = (uint32_t)b32[31] | (uint32_t)b32[30] << 8 | (uint32_t)b32[29] << 16 | (uint32_t)b32[28] << 24;
   246a8:	e0bffe17 	ldw	r2,-8(fp)
   246ac:	108007c4 	addi	r2,r2,31
   246b0:	10800003 	ldbu	r2,0(r2)
   246b4:	10c03fcc 	andi	r3,r2,255
   246b8:	e0bffe17 	ldw	r2,-8(fp)
   246bc:	10800784 	addi	r2,r2,30
   246c0:	10800003 	ldbu	r2,0(r2)
   246c4:	10803fcc 	andi	r2,r2,255
   246c8:	1004923a 	slli	r2,r2,8
   246cc:	1886b03a 	or	r3,r3,r2
   246d0:	e0bffe17 	ldw	r2,-8(fp)
   246d4:	10800744 	addi	r2,r2,29
   246d8:	10800003 	ldbu	r2,0(r2)
   246dc:	10803fcc 	andi	r2,r2,255
   246e0:	1004943a 	slli	r2,r2,16
   246e4:	1886b03a 	or	r3,r3,r2
   246e8:	e0bffe17 	ldw	r2,-8(fp)
   246ec:	10800704 	addi	r2,r2,28
   246f0:	10800003 	ldbu	r2,0(r2)
   246f4:	10803fcc 	andi	r2,r2,255
   246f8:	1004963a 	slli	r2,r2,24
   246fc:	1886b03a 	or	r3,r3,r2
   24700:	e0bffd17 	ldw	r2,-12(fp)
   24704:	10c00015 	stw	r3,0(r2)
    r->d[1] = (uint32_t)b32[27] | (uint32_t)b32[26] << 8 | (uint32_t)b32[25] << 16 | (uint32_t)b32[24] << 24;
   24708:	e0bffe17 	ldw	r2,-8(fp)
   2470c:	108006c4 	addi	r2,r2,27
   24710:	10800003 	ldbu	r2,0(r2)
   24714:	10c03fcc 	andi	r3,r2,255
   24718:	e0bffe17 	ldw	r2,-8(fp)
   2471c:	10800684 	addi	r2,r2,26
   24720:	10800003 	ldbu	r2,0(r2)
   24724:	10803fcc 	andi	r2,r2,255
   24728:	1004923a 	slli	r2,r2,8
   2472c:	1886b03a 	or	r3,r3,r2
   24730:	e0bffe17 	ldw	r2,-8(fp)
   24734:	10800644 	addi	r2,r2,25
   24738:	10800003 	ldbu	r2,0(r2)
   2473c:	10803fcc 	andi	r2,r2,255
   24740:	1004943a 	slli	r2,r2,16
   24744:	1886b03a 	or	r3,r3,r2
   24748:	e0bffe17 	ldw	r2,-8(fp)
   2474c:	10800604 	addi	r2,r2,24
   24750:	10800003 	ldbu	r2,0(r2)
   24754:	10803fcc 	andi	r2,r2,255
   24758:	1004963a 	slli	r2,r2,24
   2475c:	1886b03a 	or	r3,r3,r2
   24760:	e0bffd17 	ldw	r2,-12(fp)
   24764:	10c00115 	stw	r3,4(r2)
    r->d[2] = (uint32_t)b32[23] | (uint32_t)b32[22] << 8 | (uint32_t)b32[21] << 16 | (uint32_t)b32[20] << 24;
   24768:	e0bffe17 	ldw	r2,-8(fp)
   2476c:	108005c4 	addi	r2,r2,23
   24770:	10800003 	ldbu	r2,0(r2)
   24774:	10c03fcc 	andi	r3,r2,255
   24778:	e0bffe17 	ldw	r2,-8(fp)
   2477c:	10800584 	addi	r2,r2,22
   24780:	10800003 	ldbu	r2,0(r2)
   24784:	10803fcc 	andi	r2,r2,255
   24788:	1004923a 	slli	r2,r2,8
   2478c:	1886b03a 	or	r3,r3,r2
   24790:	e0bffe17 	ldw	r2,-8(fp)
   24794:	10800544 	addi	r2,r2,21
   24798:	10800003 	ldbu	r2,0(r2)
   2479c:	10803fcc 	andi	r2,r2,255
   247a0:	1004943a 	slli	r2,r2,16
   247a4:	1886b03a 	or	r3,r3,r2
   247a8:	e0bffe17 	ldw	r2,-8(fp)
   247ac:	10800504 	addi	r2,r2,20
   247b0:	10800003 	ldbu	r2,0(r2)
   247b4:	10803fcc 	andi	r2,r2,255
   247b8:	1004963a 	slli	r2,r2,24
   247bc:	1886b03a 	or	r3,r3,r2
   247c0:	e0bffd17 	ldw	r2,-12(fp)
   247c4:	10c00215 	stw	r3,8(r2)
    r->d[3] = (uint32_t)b32[19] | (uint32_t)b32[18] << 8 | (uint32_t)b32[17] << 16 | (uint32_t)b32[16] << 24;
   247c8:	e0bffe17 	ldw	r2,-8(fp)
   247cc:	108004c4 	addi	r2,r2,19
   247d0:	10800003 	ldbu	r2,0(r2)
   247d4:	10c03fcc 	andi	r3,r2,255
   247d8:	e0bffe17 	ldw	r2,-8(fp)
   247dc:	10800484 	addi	r2,r2,18
   247e0:	10800003 	ldbu	r2,0(r2)
   247e4:	10803fcc 	andi	r2,r2,255
   247e8:	1004923a 	slli	r2,r2,8
   247ec:	1886b03a 	or	r3,r3,r2
   247f0:	e0bffe17 	ldw	r2,-8(fp)
   247f4:	10800444 	addi	r2,r2,17
   247f8:	10800003 	ldbu	r2,0(r2)
   247fc:	10803fcc 	andi	r2,r2,255
   24800:	1004943a 	slli	r2,r2,16
   24804:	1886b03a 	or	r3,r3,r2
   24808:	e0bffe17 	ldw	r2,-8(fp)
   2480c:	10800404 	addi	r2,r2,16
   24810:	10800003 	ldbu	r2,0(r2)
   24814:	10803fcc 	andi	r2,r2,255
   24818:	1004963a 	slli	r2,r2,24
   2481c:	1886b03a 	or	r3,r3,r2
   24820:	e0bffd17 	ldw	r2,-12(fp)
   24824:	10c00315 	stw	r3,12(r2)
    r->d[4] = (uint32_t)b32[15] | (uint32_t)b32[14] << 8 | (uint32_t)b32[13] << 16 | (uint32_t)b32[12] << 24;
   24828:	e0bffe17 	ldw	r2,-8(fp)
   2482c:	108003c4 	addi	r2,r2,15
   24830:	10800003 	ldbu	r2,0(r2)
   24834:	10c03fcc 	andi	r3,r2,255
   24838:	e0bffe17 	ldw	r2,-8(fp)
   2483c:	10800384 	addi	r2,r2,14
   24840:	10800003 	ldbu	r2,0(r2)
   24844:	10803fcc 	andi	r2,r2,255
   24848:	1004923a 	slli	r2,r2,8
   2484c:	1886b03a 	or	r3,r3,r2
   24850:	e0bffe17 	ldw	r2,-8(fp)
   24854:	10800344 	addi	r2,r2,13
   24858:	10800003 	ldbu	r2,0(r2)
   2485c:	10803fcc 	andi	r2,r2,255
   24860:	1004943a 	slli	r2,r2,16
   24864:	1886b03a 	or	r3,r3,r2
   24868:	e0bffe17 	ldw	r2,-8(fp)
   2486c:	10800304 	addi	r2,r2,12
   24870:	10800003 	ldbu	r2,0(r2)
   24874:	10803fcc 	andi	r2,r2,255
   24878:	1004963a 	slli	r2,r2,24
   2487c:	1886b03a 	or	r3,r3,r2
   24880:	e0bffd17 	ldw	r2,-12(fp)
   24884:	10c00415 	stw	r3,16(r2)
    r->d[5] = (uint32_t)b32[11] | (uint32_t)b32[10] << 8 | (uint32_t)b32[9] << 16 | (uint32_t)b32[8] << 24;
   24888:	e0bffe17 	ldw	r2,-8(fp)
   2488c:	108002c4 	addi	r2,r2,11
   24890:	10800003 	ldbu	r2,0(r2)
   24894:	10c03fcc 	andi	r3,r2,255
   24898:	e0bffe17 	ldw	r2,-8(fp)
   2489c:	10800284 	addi	r2,r2,10
   248a0:	10800003 	ldbu	r2,0(r2)
   248a4:	10803fcc 	andi	r2,r2,255
   248a8:	1004923a 	slli	r2,r2,8
   248ac:	1886b03a 	or	r3,r3,r2
   248b0:	e0bffe17 	ldw	r2,-8(fp)
   248b4:	10800244 	addi	r2,r2,9
   248b8:	10800003 	ldbu	r2,0(r2)
   248bc:	10803fcc 	andi	r2,r2,255
   248c0:	1004943a 	slli	r2,r2,16
   248c4:	1886b03a 	or	r3,r3,r2
   248c8:	e0bffe17 	ldw	r2,-8(fp)
   248cc:	10800204 	addi	r2,r2,8
   248d0:	10800003 	ldbu	r2,0(r2)
   248d4:	10803fcc 	andi	r2,r2,255
   248d8:	1004963a 	slli	r2,r2,24
   248dc:	1886b03a 	or	r3,r3,r2
   248e0:	e0bffd17 	ldw	r2,-12(fp)
   248e4:	10c00515 	stw	r3,20(r2)
    r->d[6] = (uint32_t)b32[7] | (uint32_t)b32[6] << 8 | (uint32_t)b32[5] << 16 | (uint32_t)b32[4] << 24;
   248e8:	e0bffe17 	ldw	r2,-8(fp)
   248ec:	108001c4 	addi	r2,r2,7
   248f0:	10800003 	ldbu	r2,0(r2)
   248f4:	10c03fcc 	andi	r3,r2,255
   248f8:	e0bffe17 	ldw	r2,-8(fp)
   248fc:	10800184 	addi	r2,r2,6
   24900:	10800003 	ldbu	r2,0(r2)
   24904:	10803fcc 	andi	r2,r2,255
   24908:	1004923a 	slli	r2,r2,8
   2490c:	1886b03a 	or	r3,r3,r2
   24910:	e0bffe17 	ldw	r2,-8(fp)
   24914:	10800144 	addi	r2,r2,5
   24918:	10800003 	ldbu	r2,0(r2)
   2491c:	10803fcc 	andi	r2,r2,255
   24920:	1004943a 	slli	r2,r2,16
   24924:	1886b03a 	or	r3,r3,r2
   24928:	e0bffe17 	ldw	r2,-8(fp)
   2492c:	10800104 	addi	r2,r2,4
   24930:	10800003 	ldbu	r2,0(r2)
   24934:	10803fcc 	andi	r2,r2,255
   24938:	1004963a 	slli	r2,r2,24
   2493c:	1886b03a 	or	r3,r3,r2
   24940:	e0bffd17 	ldw	r2,-12(fp)
   24944:	10c00615 	stw	r3,24(r2)
    r->d[7] = (uint32_t)b32[3] | (uint32_t)b32[2] << 8 | (uint32_t)b32[1] << 16 | (uint32_t)b32[0] << 24;
   24948:	e0bffe17 	ldw	r2,-8(fp)
   2494c:	108000c4 	addi	r2,r2,3
   24950:	10800003 	ldbu	r2,0(r2)
   24954:	10c03fcc 	andi	r3,r2,255
   24958:	e0bffe17 	ldw	r2,-8(fp)
   2495c:	10800084 	addi	r2,r2,2
   24960:	10800003 	ldbu	r2,0(r2)
   24964:	10803fcc 	andi	r2,r2,255
   24968:	1004923a 	slli	r2,r2,8
   2496c:	1886b03a 	or	r3,r3,r2
   24970:	e0bffe17 	ldw	r2,-8(fp)
   24974:	10800044 	addi	r2,r2,1
   24978:	10800003 	ldbu	r2,0(r2)
   2497c:	10803fcc 	andi	r2,r2,255
   24980:	1004943a 	slli	r2,r2,16
   24984:	1886b03a 	or	r3,r3,r2
   24988:	e0bffe17 	ldw	r2,-8(fp)
   2498c:	10800003 	ldbu	r2,0(r2)
   24990:	10803fcc 	andi	r2,r2,255
   24994:	1004963a 	slli	r2,r2,24
   24998:	1886b03a 	or	r3,r3,r2
   2499c:	e0bffd17 	ldw	r2,-12(fp)
   249a0:	10c00715 	stw	r3,28(r2)
    over = secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));
   249a4:	e13ffd17 	ldw	r4,-12(fp)
   249a8:	00235440 	call	23544 <secp256k1_scalar_check_overflow>
   249ac:	100b883a 	mov	r5,r2
   249b0:	e13ffd17 	ldw	r4,-12(fp)
   249b4:	002375c0 	call	2375c <secp256k1_scalar_reduce>
   249b8:	e0bffc15 	stw	r2,-16(fp)
    if (overflow) {
   249bc:	e0bfff17 	ldw	r2,-4(fp)
   249c0:	10000326 	beq	r2,zero,249d0 <secp256k1_scalar_set_b32+0x344>
        *overflow = over;
   249c4:	e0bfff17 	ldw	r2,-4(fp)
   249c8:	e0fffc17 	ldw	r3,-16(fp)
   249cc:	10c00015 	stw	r3,0(r2)
    }
}
   249d0:	0001883a 	nop
   249d4:	e037883a 	mov	sp,fp
   249d8:	dfc00117 	ldw	ra,4(sp)
   249dc:	df000017 	ldw	fp,0(sp)
   249e0:	dec00204 	addi	sp,sp,8
   249e4:	f800283a 	ret

000249e8 <secp256k1_scalar_get_b32>:

static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {
   249e8:	defffd04 	addi	sp,sp,-12
   249ec:	df000215 	stw	fp,8(sp)
   249f0:	df000204 	addi	fp,sp,8
   249f4:	e13ffe15 	stw	r4,-8(fp)
   249f8:	e17fff15 	stw	r5,-4(fp)
    bin[0] = a->d[7] >> 24; bin[1] = a->d[7] >> 16; bin[2] = a->d[7] >> 8; bin[3] = a->d[7];
   249fc:	e0bfff17 	ldw	r2,-4(fp)
   24a00:	10800717 	ldw	r2,28(r2)
   24a04:	1004d63a 	srli	r2,r2,24
   24a08:	1007883a 	mov	r3,r2
   24a0c:	e0bffe17 	ldw	r2,-8(fp)
   24a10:	10c00005 	stb	r3,0(r2)
   24a14:	e0bffe17 	ldw	r2,-8(fp)
   24a18:	10800044 	addi	r2,r2,1
   24a1c:	e0ffff17 	ldw	r3,-4(fp)
   24a20:	18c00717 	ldw	r3,28(r3)
   24a24:	1806d43a 	srli	r3,r3,16
   24a28:	10c00005 	stb	r3,0(r2)
   24a2c:	e0bffe17 	ldw	r2,-8(fp)
   24a30:	10800084 	addi	r2,r2,2
   24a34:	e0ffff17 	ldw	r3,-4(fp)
   24a38:	18c00717 	ldw	r3,28(r3)
   24a3c:	1806d23a 	srli	r3,r3,8
   24a40:	10c00005 	stb	r3,0(r2)
   24a44:	e0bffe17 	ldw	r2,-8(fp)
   24a48:	108000c4 	addi	r2,r2,3
   24a4c:	e0ffff17 	ldw	r3,-4(fp)
   24a50:	18c00717 	ldw	r3,28(r3)
   24a54:	10c00005 	stb	r3,0(r2)
    bin[4] = a->d[6] >> 24; bin[5] = a->d[6] >> 16; bin[6] = a->d[6] >> 8; bin[7] = a->d[6];
   24a58:	e0bffe17 	ldw	r2,-8(fp)
   24a5c:	10800104 	addi	r2,r2,4
   24a60:	e0ffff17 	ldw	r3,-4(fp)
   24a64:	18c00617 	ldw	r3,24(r3)
   24a68:	1806d63a 	srli	r3,r3,24
   24a6c:	10c00005 	stb	r3,0(r2)
   24a70:	e0bffe17 	ldw	r2,-8(fp)
   24a74:	10800144 	addi	r2,r2,5
   24a78:	e0ffff17 	ldw	r3,-4(fp)
   24a7c:	18c00617 	ldw	r3,24(r3)
   24a80:	1806d43a 	srli	r3,r3,16
   24a84:	10c00005 	stb	r3,0(r2)
   24a88:	e0bffe17 	ldw	r2,-8(fp)
   24a8c:	10800184 	addi	r2,r2,6
   24a90:	e0ffff17 	ldw	r3,-4(fp)
   24a94:	18c00617 	ldw	r3,24(r3)
   24a98:	1806d23a 	srli	r3,r3,8
   24a9c:	10c00005 	stb	r3,0(r2)
   24aa0:	e0bffe17 	ldw	r2,-8(fp)
   24aa4:	108001c4 	addi	r2,r2,7
   24aa8:	e0ffff17 	ldw	r3,-4(fp)
   24aac:	18c00617 	ldw	r3,24(r3)
   24ab0:	10c00005 	stb	r3,0(r2)
    bin[8] = a->d[5] >> 24; bin[9] = a->d[5] >> 16; bin[10] = a->d[5] >> 8; bin[11] = a->d[5];
   24ab4:	e0bffe17 	ldw	r2,-8(fp)
   24ab8:	10800204 	addi	r2,r2,8
   24abc:	e0ffff17 	ldw	r3,-4(fp)
   24ac0:	18c00517 	ldw	r3,20(r3)
   24ac4:	1806d63a 	srli	r3,r3,24
   24ac8:	10c00005 	stb	r3,0(r2)
   24acc:	e0bffe17 	ldw	r2,-8(fp)
   24ad0:	10800244 	addi	r2,r2,9
   24ad4:	e0ffff17 	ldw	r3,-4(fp)
   24ad8:	18c00517 	ldw	r3,20(r3)
   24adc:	1806d43a 	srli	r3,r3,16
   24ae0:	10c00005 	stb	r3,0(r2)
   24ae4:	e0bffe17 	ldw	r2,-8(fp)
   24ae8:	10800284 	addi	r2,r2,10
   24aec:	e0ffff17 	ldw	r3,-4(fp)
   24af0:	18c00517 	ldw	r3,20(r3)
   24af4:	1806d23a 	srli	r3,r3,8
   24af8:	10c00005 	stb	r3,0(r2)
   24afc:	e0bffe17 	ldw	r2,-8(fp)
   24b00:	108002c4 	addi	r2,r2,11
   24b04:	e0ffff17 	ldw	r3,-4(fp)
   24b08:	18c00517 	ldw	r3,20(r3)
   24b0c:	10c00005 	stb	r3,0(r2)
    bin[12] = a->d[4] >> 24; bin[13] = a->d[4] >> 16; bin[14] = a->d[4] >> 8; bin[15] = a->d[4];
   24b10:	e0bffe17 	ldw	r2,-8(fp)
   24b14:	10800304 	addi	r2,r2,12
   24b18:	e0ffff17 	ldw	r3,-4(fp)
   24b1c:	18c00417 	ldw	r3,16(r3)
   24b20:	1806d63a 	srli	r3,r3,24
   24b24:	10c00005 	stb	r3,0(r2)
   24b28:	e0bffe17 	ldw	r2,-8(fp)
   24b2c:	10800344 	addi	r2,r2,13
   24b30:	e0ffff17 	ldw	r3,-4(fp)
   24b34:	18c00417 	ldw	r3,16(r3)
   24b38:	1806d43a 	srli	r3,r3,16
   24b3c:	10c00005 	stb	r3,0(r2)
   24b40:	e0bffe17 	ldw	r2,-8(fp)
   24b44:	10800384 	addi	r2,r2,14
   24b48:	e0ffff17 	ldw	r3,-4(fp)
   24b4c:	18c00417 	ldw	r3,16(r3)
   24b50:	1806d23a 	srli	r3,r3,8
   24b54:	10c00005 	stb	r3,0(r2)
   24b58:	e0bffe17 	ldw	r2,-8(fp)
   24b5c:	108003c4 	addi	r2,r2,15
   24b60:	e0ffff17 	ldw	r3,-4(fp)
   24b64:	18c00417 	ldw	r3,16(r3)
   24b68:	10c00005 	stb	r3,0(r2)
    bin[16] = a->d[3] >> 24; bin[17] = a->d[3] >> 16; bin[18] = a->d[3] >> 8; bin[19] = a->d[3];
   24b6c:	e0bffe17 	ldw	r2,-8(fp)
   24b70:	10800404 	addi	r2,r2,16
   24b74:	e0ffff17 	ldw	r3,-4(fp)
   24b78:	18c00317 	ldw	r3,12(r3)
   24b7c:	1806d63a 	srli	r3,r3,24
   24b80:	10c00005 	stb	r3,0(r2)
   24b84:	e0bffe17 	ldw	r2,-8(fp)
   24b88:	10800444 	addi	r2,r2,17
   24b8c:	e0ffff17 	ldw	r3,-4(fp)
   24b90:	18c00317 	ldw	r3,12(r3)
   24b94:	1806d43a 	srli	r3,r3,16
   24b98:	10c00005 	stb	r3,0(r2)
   24b9c:	e0bffe17 	ldw	r2,-8(fp)
   24ba0:	10800484 	addi	r2,r2,18
   24ba4:	e0ffff17 	ldw	r3,-4(fp)
   24ba8:	18c00317 	ldw	r3,12(r3)
   24bac:	1806d23a 	srli	r3,r3,8
   24bb0:	10c00005 	stb	r3,0(r2)
   24bb4:	e0bffe17 	ldw	r2,-8(fp)
   24bb8:	108004c4 	addi	r2,r2,19
   24bbc:	e0ffff17 	ldw	r3,-4(fp)
   24bc0:	18c00317 	ldw	r3,12(r3)
   24bc4:	10c00005 	stb	r3,0(r2)
    bin[20] = a->d[2] >> 24; bin[21] = a->d[2] >> 16; bin[22] = a->d[2] >> 8; bin[23] = a->d[2];
   24bc8:	e0bffe17 	ldw	r2,-8(fp)
   24bcc:	10800504 	addi	r2,r2,20
   24bd0:	e0ffff17 	ldw	r3,-4(fp)
   24bd4:	18c00217 	ldw	r3,8(r3)
   24bd8:	1806d63a 	srli	r3,r3,24
   24bdc:	10c00005 	stb	r3,0(r2)
   24be0:	e0bffe17 	ldw	r2,-8(fp)
   24be4:	10800544 	addi	r2,r2,21
   24be8:	e0ffff17 	ldw	r3,-4(fp)
   24bec:	18c00217 	ldw	r3,8(r3)
   24bf0:	1806d43a 	srli	r3,r3,16
   24bf4:	10c00005 	stb	r3,0(r2)
   24bf8:	e0bffe17 	ldw	r2,-8(fp)
   24bfc:	10800584 	addi	r2,r2,22
   24c00:	e0ffff17 	ldw	r3,-4(fp)
   24c04:	18c00217 	ldw	r3,8(r3)
   24c08:	1806d23a 	srli	r3,r3,8
   24c0c:	10c00005 	stb	r3,0(r2)
   24c10:	e0bffe17 	ldw	r2,-8(fp)
   24c14:	108005c4 	addi	r2,r2,23
   24c18:	e0ffff17 	ldw	r3,-4(fp)
   24c1c:	18c00217 	ldw	r3,8(r3)
   24c20:	10c00005 	stb	r3,0(r2)
    bin[24] = a->d[1] >> 24; bin[25] = a->d[1] >> 16; bin[26] = a->d[1] >> 8; bin[27] = a->d[1];
   24c24:	e0bffe17 	ldw	r2,-8(fp)
   24c28:	10800604 	addi	r2,r2,24
   24c2c:	e0ffff17 	ldw	r3,-4(fp)
   24c30:	18c00117 	ldw	r3,4(r3)
   24c34:	1806d63a 	srli	r3,r3,24
   24c38:	10c00005 	stb	r3,0(r2)
   24c3c:	e0bffe17 	ldw	r2,-8(fp)
   24c40:	10800644 	addi	r2,r2,25
   24c44:	e0ffff17 	ldw	r3,-4(fp)
   24c48:	18c00117 	ldw	r3,4(r3)
   24c4c:	1806d43a 	srli	r3,r3,16
   24c50:	10c00005 	stb	r3,0(r2)
   24c54:	e0bffe17 	ldw	r2,-8(fp)
   24c58:	10800684 	addi	r2,r2,26
   24c5c:	e0ffff17 	ldw	r3,-4(fp)
   24c60:	18c00117 	ldw	r3,4(r3)
   24c64:	1806d23a 	srli	r3,r3,8
   24c68:	10c00005 	stb	r3,0(r2)
   24c6c:	e0bffe17 	ldw	r2,-8(fp)
   24c70:	108006c4 	addi	r2,r2,27
   24c74:	e0ffff17 	ldw	r3,-4(fp)
   24c78:	18c00117 	ldw	r3,4(r3)
   24c7c:	10c00005 	stb	r3,0(r2)
    bin[28] = a->d[0] >> 24; bin[29] = a->d[0] >> 16; bin[30] = a->d[0] >> 8; bin[31] = a->d[0];
   24c80:	e0bffe17 	ldw	r2,-8(fp)
   24c84:	10800704 	addi	r2,r2,28
   24c88:	e0ffff17 	ldw	r3,-4(fp)
   24c8c:	18c00017 	ldw	r3,0(r3)
   24c90:	1806d63a 	srli	r3,r3,24
   24c94:	10c00005 	stb	r3,0(r2)
   24c98:	e0bffe17 	ldw	r2,-8(fp)
   24c9c:	10800744 	addi	r2,r2,29
   24ca0:	e0ffff17 	ldw	r3,-4(fp)
   24ca4:	18c00017 	ldw	r3,0(r3)
   24ca8:	1806d43a 	srli	r3,r3,16
   24cac:	10c00005 	stb	r3,0(r2)
   24cb0:	e0bffe17 	ldw	r2,-8(fp)
   24cb4:	10800784 	addi	r2,r2,30
   24cb8:	e0ffff17 	ldw	r3,-4(fp)
   24cbc:	18c00017 	ldw	r3,0(r3)
   24cc0:	1806d23a 	srli	r3,r3,8
   24cc4:	10c00005 	stb	r3,0(r2)
   24cc8:	e0bffe17 	ldw	r2,-8(fp)
   24ccc:	108007c4 	addi	r2,r2,31
   24cd0:	e0ffff17 	ldw	r3,-4(fp)
   24cd4:	18c00017 	ldw	r3,0(r3)
   24cd8:	10c00005 	stb	r3,0(r2)
}
   24cdc:	0001883a 	nop
   24ce0:	e037883a 	mov	sp,fp
   24ce4:	df000017 	ldw	fp,0(sp)
   24ce8:	dec00104 	addi	sp,sp,4
   24cec:	f800283a 	ret

00024cf0 <secp256k1_scalar_is_zero>:

SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {
   24cf0:	defffe04 	addi	sp,sp,-8
   24cf4:	df000115 	stw	fp,4(sp)
   24cf8:	df000104 	addi	fp,sp,4
   24cfc:	e13fff15 	stw	r4,-4(fp)
    return (a->d[0] | a->d[1] | a->d[2] | a->d[3] | a->d[4] | a->d[5] | a->d[6] | a->d[7]) == 0;
   24d00:	e0bfff17 	ldw	r2,-4(fp)
   24d04:	10c00017 	ldw	r3,0(r2)
   24d08:	e0bfff17 	ldw	r2,-4(fp)
   24d0c:	10800117 	ldw	r2,4(r2)
   24d10:	1886b03a 	or	r3,r3,r2
   24d14:	e0bfff17 	ldw	r2,-4(fp)
   24d18:	10800217 	ldw	r2,8(r2)
   24d1c:	1886b03a 	or	r3,r3,r2
   24d20:	e0bfff17 	ldw	r2,-4(fp)
   24d24:	10800317 	ldw	r2,12(r2)
   24d28:	1886b03a 	or	r3,r3,r2
   24d2c:	e0bfff17 	ldw	r2,-4(fp)
   24d30:	10800417 	ldw	r2,16(r2)
   24d34:	1886b03a 	or	r3,r3,r2
   24d38:	e0bfff17 	ldw	r2,-4(fp)
   24d3c:	10800517 	ldw	r2,20(r2)
   24d40:	1886b03a 	or	r3,r3,r2
   24d44:	e0bfff17 	ldw	r2,-4(fp)
   24d48:	10800617 	ldw	r2,24(r2)
   24d4c:	1886b03a 	or	r3,r3,r2
   24d50:	e0bfff17 	ldw	r2,-4(fp)
   24d54:	10800717 	ldw	r2,28(r2)
   24d58:	1884b03a 	or	r2,r3,r2
   24d5c:	1005003a 	cmpeq	r2,r2,zero
   24d60:	10803fcc 	andi	r2,r2,255
}
   24d64:	e037883a 	mov	sp,fp
   24d68:	df000017 	ldw	fp,0(sp)
   24d6c:	dec00104 	addi	sp,sp,4
   24d70:	f800283a 	ret

00024d74 <secp256k1_scalar_negate>:

static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {
   24d74:	deffe904 	addi	sp,sp,-92
   24d78:	dfc01615 	stw	ra,88(sp)
   24d7c:	df001515 	stw	fp,84(sp)
   24d80:	ddc01415 	stw	r23,80(sp)
   24d84:	dd801315 	stw	r22,76(sp)
   24d88:	dd401215 	stw	r21,72(sp)
   24d8c:	dd001115 	stw	r20,68(sp)
   24d90:	dcc01015 	stw	r19,64(sp)
   24d94:	dc800f15 	stw	r18,60(sp)
   24d98:	dc400e15 	stw	r17,56(sp)
   24d9c:	dc000d15 	stw	r16,52(sp)
   24da0:	df001504 	addi	fp,sp,84
   24da4:	e13fee15 	stw	r4,-72(fp)
   24da8:	e17fef15 	stw	r5,-68(fp)
    uint32_t nonzero = 0xFFFFFFFFUL * (secp256k1_scalar_is_zero(a) == 0);
   24dac:	e13fef17 	ldw	r4,-68(fp)
   24db0:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   24db4:	1005003a 	cmpeq	r2,r2,zero
   24db8:	10803fcc 	andi	r2,r2,255
   24dbc:	0085c83a 	sub	r2,zero,r2
   24dc0:	e0bfeb15 	stw	r2,-84(fp)
    uint64_t t = (uint64_t)(~a->d[0]) + SECP256K1_N_0 + 1;
   24dc4:	e0bfef17 	ldw	r2,-68(fp)
   24dc8:	10800017 	ldw	r2,0(r2)
   24dcc:	0084303a 	nor	r2,zero,r2
   24dd0:	e0bff015 	stw	r2,-64(fp)
   24dd4:	e03ff115 	stw	zero,-60(fp)
   24dd8:	01340db4 	movhi	r4,53302
   24ddc:	21105084 	addi	r4,r4,16706
   24de0:	000b883a 	mov	r5,zero
   24de4:	e1bff017 	ldw	r6,-64(fp)
   24de8:	3105883a 	add	r2,r6,r4
   24dec:	e1fff017 	ldw	r7,-64(fp)
   24df0:	11cd803a 	cmpltu	r6,r2,r7
   24df4:	e1fff117 	ldw	r7,-60(fp)
   24df8:	3947883a 	add	r3,r7,r5
   24dfc:	30c9883a 	add	r4,r6,r3
   24e00:	2007883a 	mov	r3,r4
   24e04:	e0bfec15 	stw	r2,-80(fp)
   24e08:	e0ffed15 	stw	r3,-76(fp)
    r->d[0] = t & nonzero; t >>= 32;
   24e0c:	e0ffec17 	ldw	r3,-80(fp)
   24e10:	e0bfeb17 	ldw	r2,-84(fp)
   24e14:	1886703a 	and	r3,r3,r2
   24e18:	e0bfee17 	ldw	r2,-72(fp)
   24e1c:	10c00015 	stw	r3,0(r2)
   24e20:	e0bfed17 	ldw	r2,-76(fp)
   24e24:	1004d83a 	srl	r2,r2,zero
   24e28:	e0bfec15 	stw	r2,-80(fp)
   24e2c:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[1]) + SECP256K1_N_1;
   24e30:	e0bfef17 	ldw	r2,-68(fp)
   24e34:	10800117 	ldw	r2,4(r2)
   24e38:	0084303a 	nor	r2,zero,r2
   24e3c:	e0bff215 	stw	r2,-56(fp)
   24e40:	e03ff315 	stw	zero,-52(fp)
   24e44:	e13fec17 	ldw	r4,-80(fp)
   24e48:	e17fed17 	ldw	r5,-76(fp)
   24e4c:	e1bff217 	ldw	r6,-56(fp)
   24e50:	3105883a 	add	r2,r6,r4
   24e54:	e1fff217 	ldw	r7,-56(fp)
   24e58:	11cd803a 	cmpltu	r6,r2,r7
   24e5c:	e1fff317 	ldw	r7,-52(fp)
   24e60:	3947883a 	add	r3,r7,r5
   24e64:	30c9883a 	add	r4,r6,r3
   24e68:	2007883a 	mov	r3,r4
   24e6c:	100d883a 	mov	r6,r2
   24e70:	180f883a 	mov	r7,r3
   24e74:	012ff4b4 	movhi	r4,49106
   24e78:	2117a304 	addi	r4,r4,24204
   24e7c:	000b883a 	mov	r5,zero
   24e80:	3105883a 	add	r2,r6,r4
   24e84:	1191803a 	cmpltu	r8,r2,r6
   24e88:	3947883a 	add	r3,r7,r5
   24e8c:	40c9883a 	add	r4,r8,r3
   24e90:	2007883a 	mov	r3,r4
   24e94:	e0bfec15 	stw	r2,-80(fp)
   24e98:	e0ffed15 	stw	r3,-76(fp)
    r->d[1] = t & nonzero; t >>= 32;
   24e9c:	e0ffec17 	ldw	r3,-80(fp)
   24ea0:	e0bfeb17 	ldw	r2,-84(fp)
   24ea4:	1886703a 	and	r3,r3,r2
   24ea8:	e0bfee17 	ldw	r2,-72(fp)
   24eac:	10c00115 	stw	r3,4(r2)
   24eb0:	e0bfed17 	ldw	r2,-76(fp)
   24eb4:	1004d83a 	srl	r2,r2,zero
   24eb8:	e0bfec15 	stw	r2,-80(fp)
   24ebc:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[2]) + SECP256K1_N_2;
   24ec0:	e0bfef17 	ldw	r2,-68(fp)
   24ec4:	10800217 	ldw	r2,8(r2)
   24ec8:	0084303a 	nor	r2,zero,r2
   24ecc:	e0bff415 	stw	r2,-48(fp)
   24ed0:	e03ff515 	stw	zero,-44(fp)
   24ed4:	e13fec17 	ldw	r4,-80(fp)
   24ed8:	e17fed17 	ldw	r5,-76(fp)
   24edc:	e1bff417 	ldw	r6,-48(fp)
   24ee0:	3105883a 	add	r2,r6,r4
   24ee4:	e1fff417 	ldw	r7,-48(fp)
   24ee8:	11cd803a 	cmpltu	r6,r2,r7
   24eec:	e1fff517 	ldw	r7,-44(fp)
   24ef0:	3947883a 	add	r3,r7,r5
   24ef4:	30c9883a 	add	r4,r6,r3
   24ef8:	2007883a 	mov	r3,r4
   24efc:	100d883a 	mov	r6,r2
   24f00:	180f883a 	mov	r7,r3
   24f04:	012bd274 	movhi	r4,44873
   24f08:	21280ec4 	addi	r4,r4,-24517
   24f0c:	000b883a 	mov	r5,zero
   24f10:	3105883a 	add	r2,r6,r4
   24f14:	1191803a 	cmpltu	r8,r2,r6
   24f18:	3947883a 	add	r3,r7,r5
   24f1c:	40c9883a 	add	r4,r8,r3
   24f20:	2007883a 	mov	r3,r4
   24f24:	e0bfec15 	stw	r2,-80(fp)
   24f28:	e0ffed15 	stw	r3,-76(fp)
    r->d[2] = t & nonzero; t >>= 32;
   24f2c:	e0ffec17 	ldw	r3,-80(fp)
   24f30:	e0bfeb17 	ldw	r2,-84(fp)
   24f34:	1886703a 	and	r3,r3,r2
   24f38:	e0bfee17 	ldw	r2,-72(fp)
   24f3c:	10c00215 	stw	r3,8(r2)
   24f40:	e0bfed17 	ldw	r2,-76(fp)
   24f44:	1004d83a 	srl	r2,r2,zero
   24f48:	e0bfec15 	stw	r2,-80(fp)
   24f4c:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[3]) + SECP256K1_N_3;
   24f50:	e0bfef17 	ldw	r2,-68(fp)
   24f54:	10800317 	ldw	r2,12(r2)
   24f58:	0084303a 	nor	r2,zero,r2
   24f5c:	e0bff615 	stw	r2,-40(fp)
   24f60:	e03ff715 	stw	zero,-36(fp)
   24f64:	e13fec17 	ldw	r4,-80(fp)
   24f68:	e17fed17 	ldw	r5,-76(fp)
   24f6c:	e1bff617 	ldw	r6,-40(fp)
   24f70:	3105883a 	add	r2,r6,r4
   24f74:	e1fff617 	ldw	r7,-40(fp)
   24f78:	11cd803a 	cmpltu	r6,r2,r7
   24f7c:	e1fff717 	ldw	r7,-36(fp)
   24f80:	3947883a 	add	r3,r7,r5
   24f84:	30c9883a 	add	r4,r6,r3
   24f88:	2007883a 	mov	r3,r4
   24f8c:	100d883a 	mov	r6,r2
   24f90:	180f883a 	mov	r7,r3
   24f94:	012eabf4 	movhi	r4,47791
   24f98:	21373984 	addi	r4,r4,-8986
   24f9c:	000b883a 	mov	r5,zero
   24fa0:	3105883a 	add	r2,r6,r4
   24fa4:	1191803a 	cmpltu	r8,r2,r6
   24fa8:	3947883a 	add	r3,r7,r5
   24fac:	40c9883a 	add	r4,r8,r3
   24fb0:	2007883a 	mov	r3,r4
   24fb4:	e0bfec15 	stw	r2,-80(fp)
   24fb8:	e0ffed15 	stw	r3,-76(fp)
    r->d[3] = t & nonzero; t >>= 32;
   24fbc:	e0ffec17 	ldw	r3,-80(fp)
   24fc0:	e0bfeb17 	ldw	r2,-84(fp)
   24fc4:	1886703a 	and	r3,r3,r2
   24fc8:	e0bfee17 	ldw	r2,-72(fp)
   24fcc:	10c00315 	stw	r3,12(r2)
   24fd0:	e0bfed17 	ldw	r2,-76(fp)
   24fd4:	1004d83a 	srl	r2,r2,zero
   24fd8:	e0bfec15 	stw	r2,-80(fp)
   24fdc:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[4]) + SECP256K1_N_4;
   24fe0:	e0bfef17 	ldw	r2,-68(fp)
   24fe4:	10800417 	ldw	r2,16(r2)
   24fe8:	0084303a 	nor	r2,zero,r2
   24fec:	102d883a 	mov	r22,r2
   24ff0:	002f883a 	mov	r23,zero
   24ff4:	e13fec17 	ldw	r4,-80(fp)
   24ff8:	e17fed17 	ldw	r5,-76(fp)
   24ffc:	b105883a 	add	r2,r22,r4
   25000:	158d803a 	cmpltu	r6,r2,r22
   25004:	b947883a 	add	r3,r23,r5
   25008:	30c9883a 	add	r4,r6,r3
   2500c:	2007883a 	mov	r3,r4
   25010:	1009883a 	mov	r4,r2
   25014:	180b883a 	mov	r5,r3
   25018:	01bfff84 	movi	r6,-2
   2501c:	000f883a 	mov	r7,zero
   25020:	2185883a 	add	r2,r4,r6
   25024:	1111803a 	cmpltu	r8,r2,r4
   25028:	29c7883a 	add	r3,r5,r7
   2502c:	40c9883a 	add	r4,r8,r3
   25030:	2007883a 	mov	r3,r4
   25034:	e0bfec15 	stw	r2,-80(fp)
   25038:	e0ffed15 	stw	r3,-76(fp)
    r->d[4] = t & nonzero; t >>= 32;
   2503c:	e0ffec17 	ldw	r3,-80(fp)
   25040:	e0bfeb17 	ldw	r2,-84(fp)
   25044:	1886703a 	and	r3,r3,r2
   25048:	e0bfee17 	ldw	r2,-72(fp)
   2504c:	10c00415 	stw	r3,16(r2)
   25050:	e0bfed17 	ldw	r2,-76(fp)
   25054:	1004d83a 	srl	r2,r2,zero
   25058:	e0bfec15 	stw	r2,-80(fp)
   2505c:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[5]) + SECP256K1_N_5;
   25060:	e0bfef17 	ldw	r2,-68(fp)
   25064:	10800517 	ldw	r2,20(r2)
   25068:	0084303a 	nor	r2,zero,r2
   2506c:	1029883a 	mov	r20,r2
   25070:	002b883a 	mov	r21,zero
   25074:	e13fec17 	ldw	r4,-80(fp)
   25078:	e17fed17 	ldw	r5,-76(fp)
   2507c:	a105883a 	add	r2,r20,r4
   25080:	150d803a 	cmpltu	r6,r2,r20
   25084:	a947883a 	add	r3,r21,r5
   25088:	30c9883a 	add	r4,r6,r3
   2508c:	2007883a 	mov	r3,r4
   25090:	1009883a 	mov	r4,r2
   25094:	180b883a 	mov	r5,r3
   25098:	01bfffc4 	movi	r6,-1
   2509c:	000f883a 	mov	r7,zero
   250a0:	2185883a 	add	r2,r4,r6
   250a4:	1111803a 	cmpltu	r8,r2,r4
   250a8:	29c7883a 	add	r3,r5,r7
   250ac:	40c9883a 	add	r4,r8,r3
   250b0:	2007883a 	mov	r3,r4
   250b4:	e0bfec15 	stw	r2,-80(fp)
   250b8:	e0ffed15 	stw	r3,-76(fp)
    r->d[5] = t & nonzero; t >>= 32;
   250bc:	e0ffec17 	ldw	r3,-80(fp)
   250c0:	e0bfeb17 	ldw	r2,-84(fp)
   250c4:	1886703a 	and	r3,r3,r2
   250c8:	e0bfee17 	ldw	r2,-72(fp)
   250cc:	10c00515 	stw	r3,20(r2)
   250d0:	e0bfed17 	ldw	r2,-76(fp)
   250d4:	1004d83a 	srl	r2,r2,zero
   250d8:	e0bfec15 	stw	r2,-80(fp)
   250dc:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[6]) + SECP256K1_N_6;
   250e0:	e0bfef17 	ldw	r2,-68(fp)
   250e4:	10800617 	ldw	r2,24(r2)
   250e8:	0084303a 	nor	r2,zero,r2
   250ec:	1025883a 	mov	r18,r2
   250f0:	0027883a 	mov	r19,zero
   250f4:	e13fec17 	ldw	r4,-80(fp)
   250f8:	e17fed17 	ldw	r5,-76(fp)
   250fc:	9105883a 	add	r2,r18,r4
   25100:	148d803a 	cmpltu	r6,r2,r18
   25104:	9947883a 	add	r3,r19,r5
   25108:	30c9883a 	add	r4,r6,r3
   2510c:	2007883a 	mov	r3,r4
   25110:	1009883a 	mov	r4,r2
   25114:	180b883a 	mov	r5,r3
   25118:	01bfffc4 	movi	r6,-1
   2511c:	000f883a 	mov	r7,zero
   25120:	2185883a 	add	r2,r4,r6
   25124:	1111803a 	cmpltu	r8,r2,r4
   25128:	29c7883a 	add	r3,r5,r7
   2512c:	40c9883a 	add	r4,r8,r3
   25130:	2007883a 	mov	r3,r4
   25134:	e0bfec15 	stw	r2,-80(fp)
   25138:	e0ffed15 	stw	r3,-76(fp)
    r->d[6] = t & nonzero; t >>= 32;
   2513c:	e0ffec17 	ldw	r3,-80(fp)
   25140:	e0bfeb17 	ldw	r2,-84(fp)
   25144:	1886703a 	and	r3,r3,r2
   25148:	e0bfee17 	ldw	r2,-72(fp)
   2514c:	10c00615 	stw	r3,24(r2)
   25150:	e0bfed17 	ldw	r2,-76(fp)
   25154:	1004d83a 	srl	r2,r2,zero
   25158:	e0bfec15 	stw	r2,-80(fp)
   2515c:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[7]) + SECP256K1_N_7;
   25160:	e0bfef17 	ldw	r2,-68(fp)
   25164:	10800717 	ldw	r2,28(r2)
   25168:	0084303a 	nor	r2,zero,r2
   2516c:	1021883a 	mov	r16,r2
   25170:	0023883a 	mov	r17,zero
   25174:	e13fec17 	ldw	r4,-80(fp)
   25178:	e17fed17 	ldw	r5,-76(fp)
   2517c:	8105883a 	add	r2,r16,r4
   25180:	140d803a 	cmpltu	r6,r2,r16
   25184:	8947883a 	add	r3,r17,r5
   25188:	30c9883a 	add	r4,r6,r3
   2518c:	2007883a 	mov	r3,r4
   25190:	1009883a 	mov	r4,r2
   25194:	180b883a 	mov	r5,r3
   25198:	01bfffc4 	movi	r6,-1
   2519c:	000f883a 	mov	r7,zero
   251a0:	2185883a 	add	r2,r4,r6
   251a4:	1111803a 	cmpltu	r8,r2,r4
   251a8:	29c7883a 	add	r3,r5,r7
   251ac:	40c9883a 	add	r4,r8,r3
   251b0:	2007883a 	mov	r3,r4
   251b4:	e0bfec15 	stw	r2,-80(fp)
   251b8:	e0ffed15 	stw	r3,-76(fp)
    r->d[7] = t & nonzero;
   251bc:	e0ffec17 	ldw	r3,-80(fp)
   251c0:	e0bfeb17 	ldw	r2,-84(fp)
   251c4:	1886703a 	and	r3,r3,r2
   251c8:	e0bfee17 	ldw	r2,-72(fp)
   251cc:	10c00715 	stw	r3,28(r2)
}
   251d0:	0001883a 	nop
   251d4:	e6fff804 	addi	sp,fp,-32
   251d8:	dfc00917 	ldw	ra,36(sp)
   251dc:	df000817 	ldw	fp,32(sp)
   251e0:	ddc00717 	ldw	r23,28(sp)
   251e4:	dd800617 	ldw	r22,24(sp)
   251e8:	dd400517 	ldw	r21,20(sp)
   251ec:	dd000417 	ldw	r20,16(sp)
   251f0:	dcc00317 	ldw	r19,12(sp)
   251f4:	dc800217 	ldw	r18,8(sp)
   251f8:	dc400117 	ldw	r17,4(sp)
   251fc:	dc000017 	ldw	r16,0(sp)
   25200:	dec00a04 	addi	sp,sp,40
   25204:	f800283a 	ret

00025208 <secp256k1_scalar_is_one>:

SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {
   25208:	defffe04 	addi	sp,sp,-8
   2520c:	df000115 	stw	fp,4(sp)
   25210:	df000104 	addi	fp,sp,4
   25214:	e13fff15 	stw	r4,-4(fp)
    return ((a->d[0] ^ 1) | a->d[1] | a->d[2] | a->d[3] | a->d[4] | a->d[5] | a->d[6] | a->d[7]) == 0;
   25218:	e0bfff17 	ldw	r2,-4(fp)
   2521c:	10800017 	ldw	r2,0(r2)
   25220:	10c0005c 	xori	r3,r2,1
   25224:	e0bfff17 	ldw	r2,-4(fp)
   25228:	10800117 	ldw	r2,4(r2)
   2522c:	1886b03a 	or	r3,r3,r2
   25230:	e0bfff17 	ldw	r2,-4(fp)
   25234:	10800217 	ldw	r2,8(r2)
   25238:	1886b03a 	or	r3,r3,r2
   2523c:	e0bfff17 	ldw	r2,-4(fp)
   25240:	10800317 	ldw	r2,12(r2)
   25244:	1886b03a 	or	r3,r3,r2
   25248:	e0bfff17 	ldw	r2,-4(fp)
   2524c:	10800417 	ldw	r2,16(r2)
   25250:	1886b03a 	or	r3,r3,r2
   25254:	e0bfff17 	ldw	r2,-4(fp)
   25258:	10800517 	ldw	r2,20(r2)
   2525c:	1886b03a 	or	r3,r3,r2
   25260:	e0bfff17 	ldw	r2,-4(fp)
   25264:	10800617 	ldw	r2,24(r2)
   25268:	1886b03a 	or	r3,r3,r2
   2526c:	e0bfff17 	ldw	r2,-4(fp)
   25270:	10800717 	ldw	r2,28(r2)
   25274:	1884b03a 	or	r2,r3,r2
   25278:	1005003a 	cmpeq	r2,r2,zero
   2527c:	10803fcc 	andi	r2,r2,255
}
   25280:	e037883a 	mov	sp,fp
   25284:	df000017 	ldw	fp,0(sp)
   25288:	dec00104 	addi	sp,sp,4
   2528c:	f800283a 	ret

00025290 <secp256k1_scalar_is_high>:

static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {
   25290:	defffc04 	addi	sp,sp,-16
   25294:	df000315 	stw	fp,12(sp)
   25298:	df000304 	addi	fp,sp,12
   2529c:	e13fff15 	stw	r4,-4(fp)
    int yes = 0;
   252a0:	e03ffd15 	stw	zero,-12(fp)
    int no = 0;
   252a4:	e03ffe15 	stw	zero,-8(fp)
    no |= (a->d[7] < SECP256K1_N_H_7);
   252a8:	e0bfff17 	ldw	r2,-4(fp)
   252ac:	10c00717 	ldw	r3,28(r2)
   252b0:	00a00034 	movhi	r2,32768
   252b4:	10bfff84 	addi	r2,r2,-2
   252b8:	10c5403a 	cmpgeu	r2,r2,r3
   252bc:	10803fcc 	andi	r2,r2,255
   252c0:	e0fffe17 	ldw	r3,-8(fp)
   252c4:	1884b03a 	or	r2,r3,r2
   252c8:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[7] > SECP256K1_N_H_7) & ~no;
   252cc:	e0bfff17 	ldw	r2,-4(fp)
   252d0:	10800717 	ldw	r2,28(r2)
   252d4:	1004d7fa 	srli	r2,r2,31
   252d8:	10c03fcc 	andi	r3,r2,255
   252dc:	e0bffe17 	ldw	r2,-8(fp)
   252e0:	0084303a 	nor	r2,zero,r2
   252e4:	1884703a 	and	r2,r3,r2
   252e8:	e0fffd17 	ldw	r3,-12(fp)
   252ec:	1884b03a 	or	r2,r3,r2
   252f0:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[6] < SECP256K1_N_H_6) & ~yes; /* No need for a > check. */
   252f4:	e0bfff17 	ldw	r2,-4(fp)
   252f8:	10800617 	ldw	r2,24(r2)
   252fc:	10bfffd8 	cmpnei	r2,r2,-1
   25300:	10c03fcc 	andi	r3,r2,255
   25304:	e0bffd17 	ldw	r2,-12(fp)
   25308:	0084303a 	nor	r2,zero,r2
   2530c:	1884703a 	and	r2,r3,r2
   25310:	e0fffe17 	ldw	r3,-8(fp)
   25314:	1884b03a 	or	r2,r3,r2
   25318:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[5] < SECP256K1_N_H_5) & ~yes; /* No need for a > check. */
   2531c:	e0bfff17 	ldw	r2,-4(fp)
   25320:	10800517 	ldw	r2,20(r2)
   25324:	10bfffd8 	cmpnei	r2,r2,-1
   25328:	10c03fcc 	andi	r3,r2,255
   2532c:	e0bffd17 	ldw	r2,-12(fp)
   25330:	0084303a 	nor	r2,zero,r2
   25334:	1884703a 	and	r2,r3,r2
   25338:	e0fffe17 	ldw	r3,-8(fp)
   2533c:	1884b03a 	or	r2,r3,r2
   25340:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[4] < SECP256K1_N_H_4) & ~yes; /* No need for a > check. */
   25344:	e0bfff17 	ldw	r2,-4(fp)
   25348:	10800417 	ldw	r2,16(r2)
   2534c:	10bfffd8 	cmpnei	r2,r2,-1
   25350:	10c03fcc 	andi	r3,r2,255
   25354:	e0bffd17 	ldw	r2,-12(fp)
   25358:	0084303a 	nor	r2,zero,r2
   2535c:	1884703a 	and	r2,r3,r2
   25360:	e0fffe17 	ldw	r3,-8(fp)
   25364:	1884b03a 	or	r2,r3,r2
   25368:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[3] < SECP256K1_N_H_3) & ~yes;
   2536c:	e0bfff17 	ldw	r2,-4(fp)
   25370:	10c00317 	ldw	r3,12(r2)
   25374:	009755f4 	movhi	r2,23895
   25378:	109b9c84 	addi	r2,r2,28274
   2537c:	10c5403a 	cmpgeu	r2,r2,r3
   25380:	10c03fcc 	andi	r3,r2,255
   25384:	e0bffd17 	ldw	r2,-12(fp)
   25388:	0084303a 	nor	r2,zero,r2
   2538c:	1884703a 	and	r2,r3,r2
   25390:	e0fffe17 	ldw	r3,-8(fp)
   25394:	1884b03a 	or	r2,r3,r2
   25398:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[3] > SECP256K1_N_H_3) & ~no;
   2539c:	e0bfff17 	ldw	r2,-4(fp)
   253a0:	10c00317 	ldw	r3,12(r2)
   253a4:	009755f4 	movhi	r2,23895
   253a8:	109b9cc4 	addi	r2,r2,28275
   253ac:	10c5803a 	cmpltu	r2,r2,r3
   253b0:	10c03fcc 	andi	r3,r2,255
   253b4:	e0bffe17 	ldw	r2,-8(fp)
   253b8:	0084303a 	nor	r2,zero,r2
   253bc:	1884703a 	and	r2,r3,r2
   253c0:	e0fffd17 	ldw	r3,-12(fp)
   253c4:	1884b03a 	or	r2,r3,r2
   253c8:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[2] < SECP256K1_N_H_2) & ~yes;
   253cc:	e0bfff17 	ldw	r2,-4(fp)
   253d0:	10c00217 	ldw	r3,8(r2)
   253d4:	0095e934 	movhi	r2,22436
   253d8:	10940704 	addi	r2,r2,20508
   253dc:	10c5403a 	cmpgeu	r2,r2,r3
   253e0:	10c03fcc 	andi	r3,r2,255
   253e4:	e0bffd17 	ldw	r2,-12(fp)
   253e8:	0084303a 	nor	r2,zero,r2
   253ec:	1884703a 	and	r2,r3,r2
   253f0:	e0fffe17 	ldw	r3,-8(fp)
   253f4:	1884b03a 	or	r2,r3,r2
   253f8:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[2] > SECP256K1_N_H_2) & ~no;
   253fc:	e0bfff17 	ldw	r2,-4(fp)
   25400:	10c00217 	ldw	r3,8(r2)
   25404:	0095e934 	movhi	r2,22436
   25408:	10940744 	addi	r2,r2,20509
   2540c:	10c5803a 	cmpltu	r2,r2,r3
   25410:	10c03fcc 	andi	r3,r2,255
   25414:	e0bffe17 	ldw	r2,-8(fp)
   25418:	0084303a 	nor	r2,zero,r2
   2541c:	1884703a 	and	r2,r3,r2
   25420:	e0fffd17 	ldw	r3,-12(fp)
   25424:	1884b03a 	or	r2,r3,r2
   25428:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[1] < SECP256K1_N_H_1) & ~yes;
   2542c:	e0bfff17 	ldw	r2,-4(fp)
   25430:	10c00117 	ldw	r3,4(r2)
   25434:	00b7fa74 	movhi	r2,57321
   25438:	108bd144 	addi	r2,r2,12101
   2543c:	10c5403a 	cmpgeu	r2,r2,r3
   25440:	10c03fcc 	andi	r3,r2,255
   25444:	e0bffd17 	ldw	r2,-12(fp)
   25448:	0084303a 	nor	r2,zero,r2
   2544c:	1884703a 	and	r2,r3,r2
   25450:	e0fffe17 	ldw	r3,-8(fp)
   25454:	1884b03a 	or	r2,r3,r2
   25458:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[1] > SECP256K1_N_H_1) & ~no;
   2545c:	e0bfff17 	ldw	r2,-4(fp)
   25460:	10c00117 	ldw	r3,4(r2)
   25464:	00b7fa74 	movhi	r2,57321
   25468:	108bd184 	addi	r2,r2,12102
   2546c:	10c5803a 	cmpltu	r2,r2,r3
   25470:	10c03fcc 	andi	r3,r2,255
   25474:	e0bffe17 	ldw	r2,-8(fp)
   25478:	0084303a 	nor	r2,zero,r2
   2547c:	1884703a 	and	r2,r3,r2
   25480:	e0fffd17 	ldw	r3,-12(fp)
   25484:	1884b03a 	or	r2,r3,r2
   25488:	e0bffd15 	stw	r2,-12(fp)
    yes |= (a->d[0] > SECP256K1_N_H_0) & ~no;
   2548c:	e0bfff17 	ldw	r2,-4(fp)
   25490:	10c00017 	ldw	r3,0(r2)
   25494:	009a06f4 	movhi	r2,26651
   25498:	10882804 	addi	r2,r2,8352
   2549c:	10c5803a 	cmpltu	r2,r2,r3
   254a0:	10c03fcc 	andi	r3,r2,255
   254a4:	e0bffe17 	ldw	r2,-8(fp)
   254a8:	0084303a 	nor	r2,zero,r2
   254ac:	1884703a 	and	r2,r3,r2
   254b0:	e0fffd17 	ldw	r3,-12(fp)
   254b4:	1884b03a 	or	r2,r3,r2
   254b8:	e0bffd15 	stw	r2,-12(fp)
    return yes;
   254bc:	e0bffd17 	ldw	r2,-12(fp)
}
   254c0:	e037883a 	mov	sp,fp
   254c4:	df000017 	ldw	fp,0(sp)
   254c8:	dec00104 	addi	sp,sp,4
   254cc:	f800283a 	ret

000254d0 <secp256k1_scalar_cond_negate>:

static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {
   254d0:	deffce04 	addi	sp,sp,-200
   254d4:	dfc03115 	stw	ra,196(sp)
   254d8:	df003015 	stw	fp,192(sp)
   254dc:	ddc02f15 	stw	r23,188(sp)
   254e0:	dd802e15 	stw	r22,184(sp)
   254e4:	dd402d15 	stw	r21,180(sp)
   254e8:	dd002c15 	stw	r20,176(sp)
   254ec:	dcc02b15 	stw	r19,172(sp)
   254f0:	dc802a15 	stw	r18,168(sp)
   254f4:	dc402915 	stw	r17,164(sp)
   254f8:	dc002815 	stw	r16,160(sp)
   254fc:	df003004 	addi	fp,sp,192
   25500:	e13fd415 	stw	r4,-176(fp)
   25504:	e17fd515 	stw	r5,-172(fp)
    /* If we are flag = 0, mask = 00...00 and this is a no-op;
     * if we are flag = 1, mask = 11...11 and this is identical to secp256k1_scalar_negate */
    uint32_t mask = !flag - 1;
   25508:	e0bfd517 	ldw	r2,-172(fp)
   2550c:	1000021e 	bne	r2,zero,25518 <secp256k1_scalar_cond_negate+0x48>
   25510:	0005883a 	mov	r2,zero
   25514:	00000106 	br	2551c <secp256k1_scalar_cond_negate+0x4c>
   25518:	00bfffc4 	movi	r2,-1
   2551c:	e0bfd015 	stw	r2,-192(fp)
    uint32_t nonzero = 0xFFFFFFFFUL * (secp256k1_scalar_is_zero(r) == 0);
   25520:	e13fd417 	ldw	r4,-176(fp)
   25524:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   25528:	1005003a 	cmpeq	r2,r2,zero
   2552c:	10803fcc 	andi	r2,r2,255
   25530:	0085c83a 	sub	r2,zero,r2
   25534:	e0bfd115 	stw	r2,-188(fp)
    uint64_t t = (uint64_t)(r->d[0] ^ mask) + ((SECP256K1_N_0 + 1) & mask);
   25538:	e0bfd417 	ldw	r2,-176(fp)
   2553c:	10c00017 	ldw	r3,0(r2)
   25540:	e0bfd017 	ldw	r2,-192(fp)
   25544:	1884f03a 	xor	r2,r3,r2
   25548:	1025883a 	mov	r18,r2
   2554c:	0027883a 	mov	r19,zero
   25550:	e0bfd017 	ldw	r2,-192(fp)
   25554:	1029883a 	mov	r20,r2
   25558:	002b883a 	mov	r21,zero
   2555c:	00b40db4 	movhi	r2,53302
   25560:	10905084 	addi	r2,r2,16706
   25564:	a0a0703a 	and	r16,r20,r2
   25568:	a822703a 	and	r17,r21,zero
   2556c:	9405883a 	add	r2,r18,r16
   25570:	1489803a 	cmpltu	r4,r2,r18
   25574:	9c47883a 	add	r3,r19,r17
   25578:	20c9883a 	add	r4,r4,r3
   2557c:	2007883a 	mov	r3,r4
   25580:	e0bfd215 	stw	r2,-184(fp)
   25584:	e0ffd315 	stw	r3,-180(fp)
    r->d[0] = t & nonzero; t >>= 32;
   25588:	e0ffd217 	ldw	r3,-184(fp)
   2558c:	e0bfd117 	ldw	r2,-188(fp)
   25590:	1886703a 	and	r3,r3,r2
   25594:	e0bfd417 	ldw	r2,-176(fp)
   25598:	10c00015 	stw	r3,0(r2)
   2559c:	e0bfd317 	ldw	r2,-180(fp)
   255a0:	1004d83a 	srl	r2,r2,zero
   255a4:	e0bfd215 	stw	r2,-184(fp)
   255a8:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[1] ^ mask) + (SECP256K1_N_1 & mask);
   255ac:	e0bfd417 	ldw	r2,-176(fp)
   255b0:	10c00117 	ldw	r3,4(r2)
   255b4:	e0bfd017 	ldw	r2,-192(fp)
   255b8:	1884f03a 	xor	r2,r3,r2
   255bc:	e0bfd615 	stw	r2,-168(fp)
   255c0:	e03fd715 	stw	zero,-164(fp)
   255c4:	e0bfd017 	ldw	r2,-192(fp)
   255c8:	e0bfd815 	stw	r2,-160(fp)
   255cc:	e03fd915 	stw	zero,-156(fp)
   255d0:	00aff4b4 	movhi	r2,49106
   255d4:	1097a304 	addi	r2,r2,24204
   255d8:	e0ffd817 	ldw	r3,-160(fp)
   255dc:	18ac703a 	and	r22,r3,r2
   255e0:	e13fd917 	ldw	r4,-156(fp)
   255e4:	202e703a 	and	r23,r4,zero
   255e8:	e17fd617 	ldw	r5,-168(fp)
   255ec:	2d85883a 	add	r2,r5,r22
   255f0:	e1bfd617 	ldw	r6,-168(fp)
   255f4:	1189803a 	cmpltu	r4,r2,r6
   255f8:	e17fd717 	ldw	r5,-164(fp)
   255fc:	2dc7883a 	add	r3,r5,r23
   25600:	20c9883a 	add	r4,r4,r3
   25604:	2007883a 	mov	r3,r4
   25608:	100f883a 	mov	r7,r2
   2560c:	1811883a 	mov	r8,r3
   25610:	e13fd217 	ldw	r4,-184(fp)
   25614:	e17fd317 	ldw	r5,-180(fp)
   25618:	21c5883a 	add	r2,r4,r7
   2561c:	110d803a 	cmpltu	r6,r2,r4
   25620:	2a07883a 	add	r3,r5,r8
   25624:	30c9883a 	add	r4,r6,r3
   25628:	2007883a 	mov	r3,r4
   2562c:	e0bfd215 	stw	r2,-184(fp)
   25630:	e0ffd315 	stw	r3,-180(fp)
    r->d[1] = t & nonzero; t >>= 32;
   25634:	e0ffd217 	ldw	r3,-184(fp)
   25638:	e0bfd117 	ldw	r2,-188(fp)
   2563c:	1886703a 	and	r3,r3,r2
   25640:	e0bfd417 	ldw	r2,-176(fp)
   25644:	10c00115 	stw	r3,4(r2)
   25648:	e0bfd317 	ldw	r2,-180(fp)
   2564c:	1004d83a 	srl	r2,r2,zero
   25650:	e0bfd215 	stw	r2,-184(fp)
   25654:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[2] ^ mask) + (SECP256K1_N_2 & mask);
   25658:	e0bfd417 	ldw	r2,-176(fp)
   2565c:	10c00217 	ldw	r3,8(r2)
   25660:	e0bfd017 	ldw	r2,-192(fp)
   25664:	1884f03a 	xor	r2,r3,r2
   25668:	e0bfda15 	stw	r2,-152(fp)
   2566c:	e03fdb15 	stw	zero,-148(fp)
   25670:	e0bfd017 	ldw	r2,-192(fp)
   25674:	e0bfdc15 	stw	r2,-144(fp)
   25678:	e03fdd15 	stw	zero,-140(fp)
   2567c:	00abd274 	movhi	r2,44873
   25680:	10a80ec4 	addi	r2,r2,-24517
   25684:	e1bfdc17 	ldw	r6,-144(fp)
   25688:	3084703a 	and	r2,r6,r2
   2568c:	e0bfde15 	stw	r2,-136(fp)
   25690:	e0bfdd17 	ldw	r2,-140(fp)
   25694:	1004703a 	and	r2,r2,zero
   25698:	e0bfdf15 	stw	r2,-132(fp)
   2569c:	e13fda17 	ldw	r4,-152(fp)
   256a0:	e17fde17 	ldw	r5,-136(fp)
   256a4:	2145883a 	add	r2,r4,r5
   256a8:	e1bfda17 	ldw	r6,-152(fp)
   256ac:	1189803a 	cmpltu	r4,r2,r6
   256b0:	e17fdb17 	ldw	r5,-148(fp)
   256b4:	e1bfdf17 	ldw	r6,-132(fp)
   256b8:	2987883a 	add	r3,r5,r6
   256bc:	20c9883a 	add	r4,r4,r3
   256c0:	2007883a 	mov	r3,r4
   256c4:	100f883a 	mov	r7,r2
   256c8:	1811883a 	mov	r8,r3
   256cc:	e13fd217 	ldw	r4,-184(fp)
   256d0:	e17fd317 	ldw	r5,-180(fp)
   256d4:	21c5883a 	add	r2,r4,r7
   256d8:	110d803a 	cmpltu	r6,r2,r4
   256dc:	2a07883a 	add	r3,r5,r8
   256e0:	30c9883a 	add	r4,r6,r3
   256e4:	2007883a 	mov	r3,r4
   256e8:	e0bfd215 	stw	r2,-184(fp)
   256ec:	e0ffd315 	stw	r3,-180(fp)
    r->d[2] = t & nonzero; t >>= 32;
   256f0:	e0ffd217 	ldw	r3,-184(fp)
   256f4:	e0bfd117 	ldw	r2,-188(fp)
   256f8:	1886703a 	and	r3,r3,r2
   256fc:	e0bfd417 	ldw	r2,-176(fp)
   25700:	10c00215 	stw	r3,8(r2)
   25704:	e0bfd317 	ldw	r2,-180(fp)
   25708:	1004d83a 	srl	r2,r2,zero
   2570c:	e0bfd215 	stw	r2,-184(fp)
   25710:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[3] ^ mask) + (SECP256K1_N_3 & mask);
   25714:	e0bfd417 	ldw	r2,-176(fp)
   25718:	10c00317 	ldw	r3,12(r2)
   2571c:	e0bfd017 	ldw	r2,-192(fp)
   25720:	1884f03a 	xor	r2,r3,r2
   25724:	e0bfe015 	stw	r2,-128(fp)
   25728:	e03fe115 	stw	zero,-124(fp)
   2572c:	e0bfd017 	ldw	r2,-192(fp)
   25730:	e0bfe215 	stw	r2,-120(fp)
   25734:	e03fe315 	stw	zero,-116(fp)
   25738:	00aeabf4 	movhi	r2,47791
   2573c:	10b73984 	addi	r2,r2,-8986
   25740:	e0ffe217 	ldw	r3,-120(fp)
   25744:	1884703a 	and	r2,r3,r2
   25748:	e0bfe415 	stw	r2,-112(fp)
   2574c:	e13fe317 	ldw	r4,-116(fp)
   25750:	2008703a 	and	r4,r4,zero
   25754:	e13fe515 	stw	r4,-108(fp)
   25758:	e17fe017 	ldw	r5,-128(fp)
   2575c:	e1bfe417 	ldw	r6,-112(fp)
   25760:	2985883a 	add	r2,r5,r6
   25764:	e17fe017 	ldw	r5,-128(fp)
   25768:	1149803a 	cmpltu	r4,r2,r5
   2576c:	e1bfe117 	ldw	r6,-124(fp)
   25770:	e17fe517 	ldw	r5,-108(fp)
   25774:	3147883a 	add	r3,r6,r5
   25778:	20c9883a 	add	r4,r4,r3
   2577c:	2007883a 	mov	r3,r4
   25780:	100d883a 	mov	r6,r2
   25784:	180f883a 	mov	r7,r3
   25788:	e13fd217 	ldw	r4,-184(fp)
   2578c:	e17fd317 	ldw	r5,-180(fp)
   25790:	2185883a 	add	r2,r4,r6
   25794:	1111803a 	cmpltu	r8,r2,r4
   25798:	29c7883a 	add	r3,r5,r7
   2579c:	40c9883a 	add	r4,r8,r3
   257a0:	2007883a 	mov	r3,r4
   257a4:	e0bfd215 	stw	r2,-184(fp)
   257a8:	e0ffd315 	stw	r3,-180(fp)
    r->d[3] = t & nonzero; t >>= 32;
   257ac:	e0ffd217 	ldw	r3,-184(fp)
   257b0:	e0bfd117 	ldw	r2,-188(fp)
   257b4:	1886703a 	and	r3,r3,r2
   257b8:	e0bfd417 	ldw	r2,-176(fp)
   257bc:	10c00315 	stw	r3,12(r2)
   257c0:	e0bfd317 	ldw	r2,-180(fp)
   257c4:	1004d83a 	srl	r2,r2,zero
   257c8:	e0bfd215 	stw	r2,-184(fp)
   257cc:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[4] ^ mask) + (SECP256K1_N_4 & mask);
   257d0:	e0bfd417 	ldw	r2,-176(fp)
   257d4:	10c00417 	ldw	r3,16(r2)
   257d8:	e0bfd017 	ldw	r2,-192(fp)
   257dc:	1884f03a 	xor	r2,r3,r2
   257e0:	e0bfe615 	stw	r2,-104(fp)
   257e4:	e03fe715 	stw	zero,-100(fp)
   257e8:	e0bfd017 	ldw	r2,-192(fp)
   257ec:	e0bfe815 	stw	r2,-96(fp)
   257f0:	e03fe915 	stw	zero,-92(fp)
   257f4:	00bfff84 	movi	r2,-2
   257f8:	e1bfe817 	ldw	r6,-96(fp)
   257fc:	3084703a 	and	r2,r6,r2
   25800:	e0bfea15 	stw	r2,-88(fp)
   25804:	e0bfe917 	ldw	r2,-92(fp)
   25808:	1004703a 	and	r2,r2,zero
   2580c:	e0bfeb15 	stw	r2,-84(fp)
   25810:	e13fe617 	ldw	r4,-104(fp)
   25814:	e17fea17 	ldw	r5,-88(fp)
   25818:	2145883a 	add	r2,r4,r5
   2581c:	e1bfe617 	ldw	r6,-104(fp)
   25820:	1189803a 	cmpltu	r4,r2,r6
   25824:	e17fe717 	ldw	r5,-100(fp)
   25828:	e1bfeb17 	ldw	r6,-84(fp)
   2582c:	2987883a 	add	r3,r5,r6
   25830:	20c9883a 	add	r4,r4,r3
   25834:	2007883a 	mov	r3,r4
   25838:	100d883a 	mov	r6,r2
   2583c:	180f883a 	mov	r7,r3
   25840:	e13fd217 	ldw	r4,-184(fp)
   25844:	e17fd317 	ldw	r5,-180(fp)
   25848:	2185883a 	add	r2,r4,r6
   2584c:	1111803a 	cmpltu	r8,r2,r4
   25850:	29c7883a 	add	r3,r5,r7
   25854:	40c9883a 	add	r4,r8,r3
   25858:	2007883a 	mov	r3,r4
   2585c:	e0bfd215 	stw	r2,-184(fp)
   25860:	e0ffd315 	stw	r3,-180(fp)
    r->d[4] = t & nonzero; t >>= 32;
   25864:	e0ffd217 	ldw	r3,-184(fp)
   25868:	e0bfd117 	ldw	r2,-188(fp)
   2586c:	1886703a 	and	r3,r3,r2
   25870:	e0bfd417 	ldw	r2,-176(fp)
   25874:	10c00415 	stw	r3,16(r2)
   25878:	e0bfd317 	ldw	r2,-180(fp)
   2587c:	1004d83a 	srl	r2,r2,zero
   25880:	e0bfd215 	stw	r2,-184(fp)
   25884:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[5] ^ mask) + (SECP256K1_N_5 & mask);
   25888:	e0bfd417 	ldw	r2,-176(fp)
   2588c:	10c00517 	ldw	r3,20(r2)
   25890:	e0bfd017 	ldw	r2,-192(fp)
   25894:	1884f03a 	xor	r2,r3,r2
   25898:	e0bfec15 	stw	r2,-80(fp)
   2589c:	e03fed15 	stw	zero,-76(fp)
   258a0:	e0bfd017 	ldw	r2,-192(fp)
   258a4:	e0bfee15 	stw	r2,-72(fp)
   258a8:	e03fef15 	stw	zero,-68(fp)
   258ac:	e13fec17 	ldw	r4,-80(fp)
   258b0:	e17fee17 	ldw	r5,-72(fp)
   258b4:	2145883a 	add	r2,r4,r5
   258b8:	e1bfec17 	ldw	r6,-80(fp)
   258bc:	1189803a 	cmpltu	r4,r2,r6
   258c0:	e17fed17 	ldw	r5,-76(fp)
   258c4:	e1bfef17 	ldw	r6,-68(fp)
   258c8:	2987883a 	add	r3,r5,r6
   258cc:	20c9883a 	add	r4,r4,r3
   258d0:	2007883a 	mov	r3,r4
   258d4:	100d883a 	mov	r6,r2
   258d8:	180f883a 	mov	r7,r3
   258dc:	e13fd217 	ldw	r4,-184(fp)
   258e0:	e17fd317 	ldw	r5,-180(fp)
   258e4:	2185883a 	add	r2,r4,r6
   258e8:	1111803a 	cmpltu	r8,r2,r4
   258ec:	29c7883a 	add	r3,r5,r7
   258f0:	40c9883a 	add	r4,r8,r3
   258f4:	2007883a 	mov	r3,r4
   258f8:	e0bfd215 	stw	r2,-184(fp)
   258fc:	e0ffd315 	stw	r3,-180(fp)
    r->d[5] = t & nonzero; t >>= 32;
   25900:	e0ffd217 	ldw	r3,-184(fp)
   25904:	e0bfd117 	ldw	r2,-188(fp)
   25908:	1886703a 	and	r3,r3,r2
   2590c:	e0bfd417 	ldw	r2,-176(fp)
   25910:	10c00515 	stw	r3,20(r2)
   25914:	e0bfd317 	ldw	r2,-180(fp)
   25918:	1004d83a 	srl	r2,r2,zero
   2591c:	e0bfd215 	stw	r2,-184(fp)
   25920:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[6] ^ mask) + (SECP256K1_N_6 & mask);
   25924:	e0bfd417 	ldw	r2,-176(fp)
   25928:	10c00617 	ldw	r3,24(r2)
   2592c:	e0bfd017 	ldw	r2,-192(fp)
   25930:	1884f03a 	xor	r2,r3,r2
   25934:	e0bff015 	stw	r2,-64(fp)
   25938:	e03ff115 	stw	zero,-60(fp)
   2593c:	e0bfd017 	ldw	r2,-192(fp)
   25940:	e0bff215 	stw	r2,-56(fp)
   25944:	e03ff315 	stw	zero,-52(fp)
   25948:	e13ff017 	ldw	r4,-64(fp)
   2594c:	e17ff217 	ldw	r5,-56(fp)
   25950:	2145883a 	add	r2,r4,r5
   25954:	e1bff017 	ldw	r6,-64(fp)
   25958:	1189803a 	cmpltu	r4,r2,r6
   2595c:	e17ff117 	ldw	r5,-60(fp)
   25960:	e1bff317 	ldw	r6,-52(fp)
   25964:	2987883a 	add	r3,r5,r6
   25968:	20c9883a 	add	r4,r4,r3
   2596c:	2007883a 	mov	r3,r4
   25970:	100d883a 	mov	r6,r2
   25974:	180f883a 	mov	r7,r3
   25978:	e13fd217 	ldw	r4,-184(fp)
   2597c:	e17fd317 	ldw	r5,-180(fp)
   25980:	2185883a 	add	r2,r4,r6
   25984:	1111803a 	cmpltu	r8,r2,r4
   25988:	29c7883a 	add	r3,r5,r7
   2598c:	40c9883a 	add	r4,r8,r3
   25990:	2007883a 	mov	r3,r4
   25994:	e0bfd215 	stw	r2,-184(fp)
   25998:	e0ffd315 	stw	r3,-180(fp)
    r->d[6] = t & nonzero; t >>= 32;
   2599c:	e0ffd217 	ldw	r3,-184(fp)
   259a0:	e0bfd117 	ldw	r2,-188(fp)
   259a4:	1886703a 	and	r3,r3,r2
   259a8:	e0bfd417 	ldw	r2,-176(fp)
   259ac:	10c00615 	stw	r3,24(r2)
   259b0:	e0bfd317 	ldw	r2,-180(fp)
   259b4:	1004d83a 	srl	r2,r2,zero
   259b8:	e0bfd215 	stw	r2,-184(fp)
   259bc:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[7] ^ mask) + (SECP256K1_N_7 & mask);
   259c0:	e0bfd417 	ldw	r2,-176(fp)
   259c4:	10c00717 	ldw	r3,28(r2)
   259c8:	e0bfd017 	ldw	r2,-192(fp)
   259cc:	1884f03a 	xor	r2,r3,r2
   259d0:	e0bff415 	stw	r2,-48(fp)
   259d4:	e03ff515 	stw	zero,-44(fp)
   259d8:	e0bfd017 	ldw	r2,-192(fp)
   259dc:	e0bff615 	stw	r2,-40(fp)
   259e0:	e03ff715 	stw	zero,-36(fp)
   259e4:	e13ff417 	ldw	r4,-48(fp)
   259e8:	e17ff617 	ldw	r5,-40(fp)
   259ec:	2145883a 	add	r2,r4,r5
   259f0:	e1bff417 	ldw	r6,-48(fp)
   259f4:	1189803a 	cmpltu	r4,r2,r6
   259f8:	e17ff517 	ldw	r5,-44(fp)
   259fc:	e1bff717 	ldw	r6,-36(fp)
   25a00:	2987883a 	add	r3,r5,r6
   25a04:	20c9883a 	add	r4,r4,r3
   25a08:	2007883a 	mov	r3,r4
   25a0c:	100d883a 	mov	r6,r2
   25a10:	180f883a 	mov	r7,r3
   25a14:	e13fd217 	ldw	r4,-184(fp)
   25a18:	e17fd317 	ldw	r5,-180(fp)
   25a1c:	2185883a 	add	r2,r4,r6
   25a20:	1111803a 	cmpltu	r8,r2,r4
   25a24:	29c7883a 	add	r3,r5,r7
   25a28:	40c9883a 	add	r4,r8,r3
   25a2c:	2007883a 	mov	r3,r4
   25a30:	e0bfd215 	stw	r2,-184(fp)
   25a34:	e0ffd315 	stw	r3,-180(fp)
    r->d[7] = t & nonzero;
   25a38:	e0ffd217 	ldw	r3,-184(fp)
   25a3c:	e0bfd117 	ldw	r2,-188(fp)
   25a40:	1886703a 	and	r3,r3,r2
   25a44:	e0bfd417 	ldw	r2,-176(fp)
   25a48:	10c00715 	stw	r3,28(r2)
    return 2 * (mask == 0) - 1;
   25a4c:	e0bfd017 	ldw	r2,-192(fp)
   25a50:	1000021e 	bne	r2,zero,25a5c <secp256k1_scalar_cond_negate+0x58c>
   25a54:	00800044 	movi	r2,1
   25a58:	00000106 	br	25a60 <secp256k1_scalar_cond_negate+0x590>
   25a5c:	00bfffc4 	movi	r2,-1
}
   25a60:	e6fff804 	addi	sp,fp,-32
   25a64:	dfc00917 	ldw	ra,36(sp)
   25a68:	df000817 	ldw	fp,32(sp)
   25a6c:	ddc00717 	ldw	r23,28(sp)
   25a70:	dd800617 	ldw	r22,24(sp)
   25a74:	dd400517 	ldw	r21,20(sp)
   25a78:	dd000417 	ldw	r20,16(sp)
   25a7c:	dcc00317 	ldw	r19,12(sp)
   25a80:	dc800217 	ldw	r18,8(sp)
   25a84:	dc400117 	ldw	r17,4(sp)
   25a88:	dc000017 	ldw	r16,0(sp)
   25a8c:	dec00a04 	addi	sp,sp,40
   25a90:	f800283a 	ret

00025a94 <secp256k1_scalar_reduce_512>:
    c0 = c1; \
    c1 = 0; \
    VERIFY_CHECK(c2 == 0); \
}

static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint32_t *l) {
   25a94:	defe0b04 	addi	sp,sp,-2004
   25a98:	dfc1f415 	stw	ra,2000(sp)
   25a9c:	df01f315 	stw	fp,1996(sp)
   25aa0:	ddc1f215 	stw	r23,1992(sp)
   25aa4:	dd81f115 	stw	r22,1988(sp)
   25aa8:	dd41f015 	stw	r21,1984(sp)
   25aac:	dd01ef15 	stw	r20,1980(sp)
   25ab0:	dcc1ee15 	stw	r19,1976(sp)
   25ab4:	dc81ed15 	stw	r18,1972(sp)
   25ab8:	dc41ec15 	stw	r17,1968(sp)
   25abc:	dc01eb15 	stw	r16,1964(sp)
   25ac0:	df01f304 	addi	fp,sp,1996
   25ac4:	e13f1615 	stw	r4,-936(fp)
   25ac8:	e17f1715 	stw	r5,-932(fp)
    uint64_t c;
    uint32_t n0 = l[8], n1 = l[9], n2 = l[10], n3 = l[11], n4 = l[12], n5 = l[13], n6 = l[14], n7 = l[15];
   25acc:	e0bf1717 	ldw	r2,-932(fp)
   25ad0:	10800817 	ldw	r2,32(r2)
   25ad4:	e0be0e15 	stw	r2,-1992(fp)
   25ad8:	e0bf1717 	ldw	r2,-932(fp)
   25adc:	10800917 	ldw	r2,36(r2)
   25ae0:	e0be0f15 	stw	r2,-1988(fp)
   25ae4:	e0bf1717 	ldw	r2,-932(fp)
   25ae8:	10800a17 	ldw	r2,40(r2)
   25aec:	e0be1015 	stw	r2,-1984(fp)
   25af0:	e0bf1717 	ldw	r2,-932(fp)
   25af4:	10800b17 	ldw	r2,44(r2)
   25af8:	e0be1115 	stw	r2,-1980(fp)
   25afc:	e0bf1717 	ldw	r2,-932(fp)
   25b00:	10800c17 	ldw	r2,48(r2)
   25b04:	e0be1215 	stw	r2,-1976(fp)
   25b08:	e0bf1717 	ldw	r2,-932(fp)
   25b0c:	10800d17 	ldw	r2,52(r2)
   25b10:	e0be1315 	stw	r2,-1972(fp)
   25b14:	e0bf1717 	ldw	r2,-932(fp)
   25b18:	10800e17 	ldw	r2,56(r2)
   25b1c:	e0be1415 	stw	r2,-1968(fp)
   25b20:	e0bf1717 	ldw	r2,-932(fp)
   25b24:	10800f17 	ldw	r2,60(r2)
   25b28:	e0be1515 	stw	r2,-1964(fp)
    /* 96 bit accumulator. */
    uint32_t c0, c1, c2;

    /* Reduce 512 bits into 385. */
    /* m[0..12] = l[0..7] + n[0..7] * SECP256K1_N_C. */
    c0 = l[0]; c1 = 0; c2 = 0;
   25b2c:	e0bf1717 	ldw	r2,-932(fp)
   25b30:	10800017 	ldw	r2,0(r2)
   25b34:	e0be1615 	stw	r2,-1960(fp)
   25b38:	e03e1715 	stw	zero,-1956(fp)
   25b3c:	e03e1815 	stw	zero,-1952(fp)
    muladd_fast(n0, SECP256K1_N_C_0);
   25b40:	e0be0e17 	ldw	r2,-1992(fp)
   25b44:	1011883a 	mov	r8,r2
   25b48:	0013883a 	mov	r9,zero
   25b4c:	018bf2b4 	movhi	r6,12234
   25b50:	31afafc4 	addi	r6,r6,-16705
   25b54:	000f883a 	mov	r7,zero
   25b58:	4009883a 	mov	r4,r8
   25b5c:	480b883a 	mov	r5,r9
   25b60:	00429400 	call	42940 <__muldi3>
   25b64:	1009883a 	mov	r4,r2
   25b68:	180b883a 	mov	r5,r3
   25b6c:	e13e1915 	stw	r4,-1948(fp)
   25b70:	e17e1a15 	stw	r5,-1944(fp)
   25b74:	e0be1a17 	ldw	r2,-1944(fp)
   25b78:	1020d83a 	srl	r16,r2,zero
   25b7c:	0023883a 	mov	r17,zero
   25b80:	e43e1b15 	stw	r16,-1940(fp)
   25b84:	e0be1917 	ldw	r2,-1948(fp)
   25b88:	e0be1c15 	stw	r2,-1936(fp)
   25b8c:	e0fe1617 	ldw	r3,-1960(fp)
   25b90:	e0be1c17 	ldw	r2,-1936(fp)
   25b94:	1885883a 	add	r2,r3,r2
   25b98:	e0be1615 	stw	r2,-1960(fp)
   25b9c:	e0fe1617 	ldw	r3,-1960(fp)
   25ba0:	e0be1c17 	ldw	r2,-1936(fp)
   25ba4:	1880022e 	bgeu	r3,r2,25bb0 <secp256k1_scalar_reduce_512+0x11c>
   25ba8:	00c00044 	movi	r3,1
   25bac:	00000106 	br	25bb4 <secp256k1_scalar_reduce_512+0x120>
   25bb0:	0007883a 	mov	r3,zero
   25bb4:	e0be1b17 	ldw	r2,-1940(fp)
   25bb8:	10c5883a 	add	r2,r2,r3
   25bbc:	e0be1b15 	stw	r2,-1940(fp)
   25bc0:	e0fe1717 	ldw	r3,-1956(fp)
   25bc4:	e0be1b17 	ldw	r2,-1940(fp)
   25bc8:	1885883a 	add	r2,r3,r2
   25bcc:	e0be1715 	stw	r2,-1956(fp)
   25bd0:	e0fe1717 	ldw	r3,-1956(fp)
   25bd4:	e0be1b17 	ldw	r2,-1940(fp)
   25bd8:	1885803a 	cmpltu	r2,r3,r2
   25bdc:	10803fcc 	andi	r2,r2,255
   25be0:	10000d26 	beq	r2,zero,25c18 <secp256k1_scalar_reduce_512+0x184>
   25be4:	d0a01617 	ldw	r2,-32680(gp)
   25be8:	10c00317 	ldw	r3,12(r2)
   25bec:	008001b4 	movhi	r2,6
   25bf0:	10b00904 	addi	r2,r2,-16348
   25bf4:	d8800015 	stw	r2,0(sp)
   25bf8:	01c05a44 	movi	r7,361
   25bfc:	018001b4 	movhi	r6,6
   25c00:	31af9204 	addi	r6,r6,-16824
   25c04:	014001b4 	movhi	r5,6
   25c08:	296b3804 	addi	r5,r5,-21280
   25c0c:	1809883a 	mov	r4,r3
   25c10:	00452600 	call	45260 <fprintf>
   25c14:	00450340 	call	45034 <abort>
    extract_fast(m0);
   25c18:	e0be1617 	ldw	r2,-1960(fp)
   25c1c:	e0be1d15 	stw	r2,-1932(fp)
   25c20:	e0be1717 	ldw	r2,-1956(fp)
   25c24:	e0be1615 	stw	r2,-1960(fp)
   25c28:	e03e1715 	stw	zero,-1956(fp)
   25c2c:	e0be1817 	ldw	r2,-1952(fp)
   25c30:	1004c03a 	cmpne	r2,r2,zero
   25c34:	10803fcc 	andi	r2,r2,255
   25c38:	10000d26 	beq	r2,zero,25c70 <secp256k1_scalar_reduce_512+0x1dc>
   25c3c:	d0a01617 	ldw	r2,-32680(gp)
   25c40:	10c00317 	ldw	r3,12(r2)
   25c44:	008001b4 	movhi	r2,6
   25c48:	10b01104 	addi	r2,r2,-16316
   25c4c:	d8800015 	stw	r2,0(sp)
   25c50:	01c05a84 	movi	r7,362
   25c54:	018001b4 	movhi	r6,6
   25c58:	31af9204 	addi	r6,r6,-16824
   25c5c:	014001b4 	movhi	r5,6
   25c60:	296b3804 	addi	r5,r5,-21280
   25c64:	1809883a 	mov	r4,r3
   25c68:	00452600 	call	45260 <fprintf>
   25c6c:	00450340 	call	45034 <abort>
    sumadd_fast(l[1]);
   25c70:	e0bf1717 	ldw	r2,-932(fp)
   25c74:	10800104 	addi	r2,r2,4
   25c78:	10c00017 	ldw	r3,0(r2)
   25c7c:	e0be1617 	ldw	r2,-1960(fp)
   25c80:	10c5883a 	add	r2,r2,r3
   25c84:	e0be1615 	stw	r2,-1960(fp)
   25c88:	e0bf1717 	ldw	r2,-932(fp)
   25c8c:	10800104 	addi	r2,r2,4
   25c90:	10c00017 	ldw	r3,0(r2)
   25c94:	e0be1617 	ldw	r2,-1960(fp)
   25c98:	10c0022e 	bgeu	r2,r3,25ca4 <secp256k1_scalar_reduce_512+0x210>
   25c9c:	00c00044 	movi	r3,1
   25ca0:	00000106 	br	25ca8 <secp256k1_scalar_reduce_512+0x214>
   25ca4:	0007883a 	mov	r3,zero
   25ca8:	e0be1717 	ldw	r2,-1956(fp)
   25cac:	10c5883a 	add	r2,r2,r3
   25cb0:	e0be1715 	stw	r2,-1956(fp)
   25cb4:	e0be1717 	ldw	r2,-1956(fp)
   25cb8:	1005003a 	cmpeq	r2,r2,zero
   25cbc:	1009883a 	mov	r4,r2
   25cc0:	e0bf1717 	ldw	r2,-932(fp)
   25cc4:	10800104 	addi	r2,r2,4
   25cc8:	10c00017 	ldw	r3,0(r2)
   25ccc:	e0be1617 	ldw	r2,-1960(fp)
   25cd0:	10c5803a 	cmpltu	r2,r2,r3
   25cd4:	2084703a 	and	r2,r4,r2
   25cd8:	10803fcc 	andi	r2,r2,255
   25cdc:	10000d26 	beq	r2,zero,25d14 <secp256k1_scalar_reduce_512+0x280>
   25ce0:	d0a01617 	ldw	r2,-32680(gp)
   25ce4:	10c00317 	ldw	r3,12(r2)
   25ce8:	008001b4 	movhi	r2,6
   25cec:	10b01904 	addi	r2,r2,-16284
   25cf0:	d8800015 	stw	r2,0(sp)
   25cf4:	01c05ac4 	movi	r7,363
   25cf8:	018001b4 	movhi	r6,6
   25cfc:	31af9204 	addi	r6,r6,-16824
   25d00:	014001b4 	movhi	r5,6
   25d04:	296b3804 	addi	r5,r5,-21280
   25d08:	1809883a 	mov	r4,r3
   25d0c:	00452600 	call	45260 <fprintf>
   25d10:	00450340 	call	45034 <abort>
   25d14:	e0be1817 	ldw	r2,-1952(fp)
   25d18:	1004c03a 	cmpne	r2,r2,zero
   25d1c:	10803fcc 	andi	r2,r2,255
   25d20:	10000d26 	beq	r2,zero,25d58 <secp256k1_scalar_reduce_512+0x2c4>
   25d24:	d0a01617 	ldw	r2,-32680(gp)
   25d28:	10c00317 	ldw	r3,12(r2)
   25d2c:	008001b4 	movhi	r2,6
   25d30:	10b01104 	addi	r2,r2,-16316
   25d34:	d8800015 	stw	r2,0(sp)
   25d38:	01c05ac4 	movi	r7,363
   25d3c:	018001b4 	movhi	r6,6
   25d40:	31af9204 	addi	r6,r6,-16824
   25d44:	014001b4 	movhi	r5,6
   25d48:	296b3804 	addi	r5,r5,-21280
   25d4c:	1809883a 	mov	r4,r3
   25d50:	00452600 	call	45260 <fprintf>
   25d54:	00450340 	call	45034 <abort>
    muladd(n1, SECP256K1_N_C_0);
   25d58:	e0be0f17 	ldw	r2,-1988(fp)
   25d5c:	102d883a 	mov	r22,r2
   25d60:	002f883a 	mov	r23,zero
   25d64:	018bf2b4 	movhi	r6,12234
   25d68:	31afafc4 	addi	r6,r6,-16705
   25d6c:	000f883a 	mov	r7,zero
   25d70:	b009883a 	mov	r4,r22
   25d74:	b80b883a 	mov	r5,r23
   25d78:	00429400 	call	42940 <__muldi3>
   25d7c:	1009883a 	mov	r4,r2
   25d80:	180b883a 	mov	r5,r3
   25d84:	e13e1e15 	stw	r4,-1928(fp)
   25d88:	e17e1f15 	stw	r5,-1924(fp)
   25d8c:	e0be1f17 	ldw	r2,-1924(fp)
   25d90:	1024d83a 	srl	r18,r2,zero
   25d94:	0027883a 	mov	r19,zero
   25d98:	e4be2015 	stw	r18,-1920(fp)
   25d9c:	e0be1e17 	ldw	r2,-1928(fp)
   25da0:	e0be2115 	stw	r2,-1916(fp)
   25da4:	e0fe1617 	ldw	r3,-1960(fp)
   25da8:	e0be2117 	ldw	r2,-1916(fp)
   25dac:	1885883a 	add	r2,r3,r2
   25db0:	e0be1615 	stw	r2,-1960(fp)
   25db4:	e0fe1617 	ldw	r3,-1960(fp)
   25db8:	e0be2117 	ldw	r2,-1916(fp)
   25dbc:	1880022e 	bgeu	r3,r2,25dc8 <secp256k1_scalar_reduce_512+0x334>
   25dc0:	00c00044 	movi	r3,1
   25dc4:	00000106 	br	25dcc <secp256k1_scalar_reduce_512+0x338>
   25dc8:	0007883a 	mov	r3,zero
   25dcc:	e0be2017 	ldw	r2,-1920(fp)
   25dd0:	10c5883a 	add	r2,r2,r3
   25dd4:	e0be2015 	stw	r2,-1920(fp)
   25dd8:	e0fe1717 	ldw	r3,-1956(fp)
   25ddc:	e0be2017 	ldw	r2,-1920(fp)
   25de0:	1885883a 	add	r2,r3,r2
   25de4:	e0be1715 	stw	r2,-1956(fp)
   25de8:	e0fe1717 	ldw	r3,-1956(fp)
   25dec:	e0be2017 	ldw	r2,-1920(fp)
   25df0:	1880022e 	bgeu	r3,r2,25dfc <secp256k1_scalar_reduce_512+0x368>
   25df4:	00c00044 	movi	r3,1
   25df8:	00000106 	br	25e00 <secp256k1_scalar_reduce_512+0x36c>
   25dfc:	0007883a 	mov	r3,zero
   25e00:	e0be1817 	ldw	r2,-1952(fp)
   25e04:	10c5883a 	add	r2,r2,r3
   25e08:	e0be1815 	stw	r2,-1952(fp)
   25e0c:	e0fe1717 	ldw	r3,-1956(fp)
   25e10:	e0be2017 	ldw	r2,-1920(fp)
   25e14:	1885803a 	cmpltu	r2,r3,r2
   25e18:	10803fcc 	andi	r2,r2,255
   25e1c:	10001126 	beq	r2,zero,25e64 <secp256k1_scalar_reduce_512+0x3d0>
   25e20:	e0be1817 	ldw	r2,-1952(fp)
   25e24:	1005003a 	cmpeq	r2,r2,zero
   25e28:	10803fcc 	andi	r2,r2,255
   25e2c:	10000d26 	beq	r2,zero,25e64 <secp256k1_scalar_reduce_512+0x3d0>
   25e30:	d0a01617 	ldw	r2,-32680(gp)
   25e34:	10c00317 	ldw	r3,12(r2)
   25e38:	008001b4 	movhi	r2,6
   25e3c:	10b02604 	addi	r2,r2,-16232
   25e40:	d8800015 	stw	r2,0(sp)
   25e44:	01c05b04 	movi	r7,364
   25e48:	018001b4 	movhi	r6,6
   25e4c:	31af9204 	addi	r6,r6,-16824
   25e50:	014001b4 	movhi	r5,6
   25e54:	296b3804 	addi	r5,r5,-21280
   25e58:	1809883a 	mov	r4,r3
   25e5c:	00452600 	call	45260 <fprintf>
   25e60:	00450340 	call	45034 <abort>
    muladd(n0, SECP256K1_N_C_1);
   25e64:	e0be0e17 	ldw	r2,-1992(fp)
   25e68:	e0bf1815 	stw	r2,-928(fp)
   25e6c:	e03f1915 	stw	zero,-924(fp)
   25e70:	01900bb4 	movhi	r6,16430
   25e74:	31a85cc4 	addi	r6,r6,-24205
   25e78:	000f883a 	mov	r7,zero
   25e7c:	e13f1817 	ldw	r4,-928(fp)
   25e80:	e17f1917 	ldw	r5,-924(fp)
   25e84:	00429400 	call	42940 <__muldi3>
   25e88:	1009883a 	mov	r4,r2
   25e8c:	180b883a 	mov	r5,r3
   25e90:	e13e2215 	stw	r4,-1912(fp)
   25e94:	e17e2315 	stw	r5,-1908(fp)
   25e98:	e0be2317 	ldw	r2,-1908(fp)
   25e9c:	1028d83a 	srl	r20,r2,zero
   25ea0:	002b883a 	mov	r21,zero
   25ea4:	e53e2415 	stw	r20,-1904(fp)
   25ea8:	e0be2217 	ldw	r2,-1912(fp)
   25eac:	e0be2515 	stw	r2,-1900(fp)
   25eb0:	e0fe1617 	ldw	r3,-1960(fp)
   25eb4:	e0be2517 	ldw	r2,-1900(fp)
   25eb8:	1885883a 	add	r2,r3,r2
   25ebc:	e0be1615 	stw	r2,-1960(fp)
   25ec0:	e0fe1617 	ldw	r3,-1960(fp)
   25ec4:	e0be2517 	ldw	r2,-1900(fp)
   25ec8:	1880022e 	bgeu	r3,r2,25ed4 <secp256k1_scalar_reduce_512+0x440>
   25ecc:	00c00044 	movi	r3,1
   25ed0:	00000106 	br	25ed8 <secp256k1_scalar_reduce_512+0x444>
   25ed4:	0007883a 	mov	r3,zero
   25ed8:	e0be2417 	ldw	r2,-1904(fp)
   25edc:	10c5883a 	add	r2,r2,r3
   25ee0:	e0be2415 	stw	r2,-1904(fp)
   25ee4:	e0fe1717 	ldw	r3,-1956(fp)
   25ee8:	e0be2417 	ldw	r2,-1904(fp)
   25eec:	1885883a 	add	r2,r3,r2
   25ef0:	e0be1715 	stw	r2,-1956(fp)
   25ef4:	e0fe1717 	ldw	r3,-1956(fp)
   25ef8:	e0be2417 	ldw	r2,-1904(fp)
   25efc:	1880022e 	bgeu	r3,r2,25f08 <secp256k1_scalar_reduce_512+0x474>
   25f00:	00c00044 	movi	r3,1
   25f04:	00000106 	br	25f0c <secp256k1_scalar_reduce_512+0x478>
   25f08:	0007883a 	mov	r3,zero
   25f0c:	e0be1817 	ldw	r2,-1952(fp)
   25f10:	10c5883a 	add	r2,r2,r3
   25f14:	e0be1815 	stw	r2,-1952(fp)
   25f18:	e0fe1717 	ldw	r3,-1956(fp)
   25f1c:	e0be2417 	ldw	r2,-1904(fp)
   25f20:	1885803a 	cmpltu	r2,r3,r2
   25f24:	10803fcc 	andi	r2,r2,255
   25f28:	10001126 	beq	r2,zero,25f70 <secp256k1_scalar_reduce_512+0x4dc>
   25f2c:	e0be1817 	ldw	r2,-1952(fp)
   25f30:	1005003a 	cmpeq	r2,r2,zero
   25f34:	10803fcc 	andi	r2,r2,255
   25f38:	10000d26 	beq	r2,zero,25f70 <secp256k1_scalar_reduce_512+0x4dc>
   25f3c:	d0a01617 	ldw	r2,-32680(gp)
   25f40:	10c00317 	ldw	r3,12(r2)
   25f44:	008001b4 	movhi	r2,6
   25f48:	10b02604 	addi	r2,r2,-16232
   25f4c:	d8800015 	stw	r2,0(sp)
   25f50:	01c05b44 	movi	r7,365
   25f54:	018001b4 	movhi	r6,6
   25f58:	31af9204 	addi	r6,r6,-16824
   25f5c:	014001b4 	movhi	r5,6
   25f60:	296b3804 	addi	r5,r5,-21280
   25f64:	1809883a 	mov	r4,r3
   25f68:	00452600 	call	45260 <fprintf>
   25f6c:	00450340 	call	45034 <abort>
    extract(m1);
   25f70:	e0be1617 	ldw	r2,-1960(fp)
   25f74:	e0be2615 	stw	r2,-1896(fp)
   25f78:	e0be1717 	ldw	r2,-1956(fp)
   25f7c:	e0be1615 	stw	r2,-1960(fp)
   25f80:	e0be1817 	ldw	r2,-1952(fp)
   25f84:	e0be1715 	stw	r2,-1956(fp)
   25f88:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[2]);
   25f8c:	e0bf1717 	ldw	r2,-932(fp)
   25f90:	10800204 	addi	r2,r2,8
   25f94:	10c00017 	ldw	r3,0(r2)
   25f98:	e0be1617 	ldw	r2,-1960(fp)
   25f9c:	10c5883a 	add	r2,r2,r3
   25fa0:	e0be1615 	stw	r2,-1960(fp)
   25fa4:	e0bf1717 	ldw	r2,-932(fp)
   25fa8:	10800204 	addi	r2,r2,8
   25fac:	10c00017 	ldw	r3,0(r2)
   25fb0:	e0be1617 	ldw	r2,-1960(fp)
   25fb4:	10c5803a 	cmpltu	r2,r2,r3
   25fb8:	10803fcc 	andi	r2,r2,255
   25fbc:	e0be2715 	stw	r2,-1892(fp)
   25fc0:	e0fe1717 	ldw	r3,-1956(fp)
   25fc4:	e0be2717 	ldw	r2,-1892(fp)
   25fc8:	1885883a 	add	r2,r3,r2
   25fcc:	e0be1715 	stw	r2,-1956(fp)
   25fd0:	e0fe1717 	ldw	r3,-1956(fp)
   25fd4:	e0be2717 	ldw	r2,-1892(fp)
   25fd8:	1880022e 	bgeu	r3,r2,25fe4 <secp256k1_scalar_reduce_512+0x550>
   25fdc:	00c00044 	movi	r3,1
   25fe0:	00000106 	br	25fe8 <secp256k1_scalar_reduce_512+0x554>
   25fe4:	0007883a 	mov	r3,zero
   25fe8:	e0be1817 	ldw	r2,-1952(fp)
   25fec:	10c5883a 	add	r2,r2,r3
   25ff0:	e0be1815 	stw	r2,-1952(fp)
    muladd(n2, SECP256K1_N_C_0);
   25ff4:	e0be1017 	ldw	r2,-1984(fp)
   25ff8:	e0bf1a15 	stw	r2,-920(fp)
   25ffc:	e03f1b15 	stw	zero,-916(fp)
   26000:	018bf2b4 	movhi	r6,12234
   26004:	31afafc4 	addi	r6,r6,-16705
   26008:	000f883a 	mov	r7,zero
   2600c:	e13f1a17 	ldw	r4,-920(fp)
   26010:	e17f1b17 	ldw	r5,-916(fp)
   26014:	00429400 	call	42940 <__muldi3>
   26018:	1009883a 	mov	r4,r2
   2601c:	180b883a 	mov	r5,r3
   26020:	e13e2815 	stw	r4,-1888(fp)
   26024:	e17e2915 	stw	r5,-1884(fp)
   26028:	e0be2917 	ldw	r2,-1884(fp)
   2602c:	1004d83a 	srl	r2,r2,zero
   26030:	e0bf1c15 	stw	r2,-912(fp)
   26034:	e03f1d15 	stw	zero,-908(fp)
   26038:	e0bf1c17 	ldw	r2,-912(fp)
   2603c:	e0be2a15 	stw	r2,-1880(fp)
   26040:	e0be2817 	ldw	r2,-1888(fp)
   26044:	e0be2b15 	stw	r2,-1876(fp)
   26048:	e0fe1617 	ldw	r3,-1960(fp)
   2604c:	e0be2b17 	ldw	r2,-1876(fp)
   26050:	1885883a 	add	r2,r3,r2
   26054:	e0be1615 	stw	r2,-1960(fp)
   26058:	e0fe1617 	ldw	r3,-1960(fp)
   2605c:	e0be2b17 	ldw	r2,-1876(fp)
   26060:	1880022e 	bgeu	r3,r2,2606c <secp256k1_scalar_reduce_512+0x5d8>
   26064:	00c00044 	movi	r3,1
   26068:	00000106 	br	26070 <secp256k1_scalar_reduce_512+0x5dc>
   2606c:	0007883a 	mov	r3,zero
   26070:	e0be2a17 	ldw	r2,-1880(fp)
   26074:	10c5883a 	add	r2,r2,r3
   26078:	e0be2a15 	stw	r2,-1880(fp)
   2607c:	e0fe1717 	ldw	r3,-1956(fp)
   26080:	e0be2a17 	ldw	r2,-1880(fp)
   26084:	1885883a 	add	r2,r3,r2
   26088:	e0be1715 	stw	r2,-1956(fp)
   2608c:	e0fe1717 	ldw	r3,-1956(fp)
   26090:	e0be2a17 	ldw	r2,-1880(fp)
   26094:	1880022e 	bgeu	r3,r2,260a0 <secp256k1_scalar_reduce_512+0x60c>
   26098:	00c00044 	movi	r3,1
   2609c:	00000106 	br	260a4 <secp256k1_scalar_reduce_512+0x610>
   260a0:	0007883a 	mov	r3,zero
   260a4:	e0be1817 	ldw	r2,-1952(fp)
   260a8:	10c5883a 	add	r2,r2,r3
   260ac:	e0be1815 	stw	r2,-1952(fp)
   260b0:	e0fe1717 	ldw	r3,-1956(fp)
   260b4:	e0be2a17 	ldw	r2,-1880(fp)
   260b8:	1885803a 	cmpltu	r2,r3,r2
   260bc:	10803fcc 	andi	r2,r2,255
   260c0:	10001126 	beq	r2,zero,26108 <secp256k1_scalar_reduce_512+0x674>
   260c4:	e0be1817 	ldw	r2,-1952(fp)
   260c8:	1005003a 	cmpeq	r2,r2,zero
   260cc:	10803fcc 	andi	r2,r2,255
   260d0:	10000d26 	beq	r2,zero,26108 <secp256k1_scalar_reduce_512+0x674>
   260d4:	d0a01617 	ldw	r2,-32680(gp)
   260d8:	10c00317 	ldw	r3,12(r2)
   260dc:	008001b4 	movhi	r2,6
   260e0:	10b02604 	addi	r2,r2,-16232
   260e4:	d8800015 	stw	r2,0(sp)
   260e8:	01c05c04 	movi	r7,368
   260ec:	018001b4 	movhi	r6,6
   260f0:	31af9204 	addi	r6,r6,-16824
   260f4:	014001b4 	movhi	r5,6
   260f8:	296b3804 	addi	r5,r5,-21280
   260fc:	1809883a 	mov	r4,r3
   26100:	00452600 	call	45260 <fprintf>
   26104:	00450340 	call	45034 <abort>
    muladd(n1, SECP256K1_N_C_1);
   26108:	e0be0f17 	ldw	r2,-1988(fp)
   2610c:	e0bf1e15 	stw	r2,-904(fp)
   26110:	e03f1f15 	stw	zero,-900(fp)
   26114:	01900bb4 	movhi	r6,16430
   26118:	31a85cc4 	addi	r6,r6,-24205
   2611c:	000f883a 	mov	r7,zero
   26120:	e13f1e17 	ldw	r4,-904(fp)
   26124:	e17f1f17 	ldw	r5,-900(fp)
   26128:	00429400 	call	42940 <__muldi3>
   2612c:	1009883a 	mov	r4,r2
   26130:	180b883a 	mov	r5,r3
   26134:	e13e2c15 	stw	r4,-1872(fp)
   26138:	e17e2d15 	stw	r5,-1868(fp)
   2613c:	e0be2d17 	ldw	r2,-1868(fp)
   26140:	1004d83a 	srl	r2,r2,zero
   26144:	e0bf2015 	stw	r2,-896(fp)
   26148:	e03f2115 	stw	zero,-892(fp)
   2614c:	e13f2017 	ldw	r4,-896(fp)
   26150:	e13e2e15 	stw	r4,-1864(fp)
   26154:	e0be2c17 	ldw	r2,-1872(fp)
   26158:	e0be2f15 	stw	r2,-1860(fp)
   2615c:	e0fe1617 	ldw	r3,-1960(fp)
   26160:	e0be2f17 	ldw	r2,-1860(fp)
   26164:	1885883a 	add	r2,r3,r2
   26168:	e0be1615 	stw	r2,-1960(fp)
   2616c:	e0fe1617 	ldw	r3,-1960(fp)
   26170:	e0be2f17 	ldw	r2,-1860(fp)
   26174:	1880022e 	bgeu	r3,r2,26180 <secp256k1_scalar_reduce_512+0x6ec>
   26178:	00c00044 	movi	r3,1
   2617c:	00000106 	br	26184 <secp256k1_scalar_reduce_512+0x6f0>
   26180:	0007883a 	mov	r3,zero
   26184:	e0be2e17 	ldw	r2,-1864(fp)
   26188:	10c5883a 	add	r2,r2,r3
   2618c:	e0be2e15 	stw	r2,-1864(fp)
   26190:	e0fe1717 	ldw	r3,-1956(fp)
   26194:	e0be2e17 	ldw	r2,-1864(fp)
   26198:	1885883a 	add	r2,r3,r2
   2619c:	e0be1715 	stw	r2,-1956(fp)
   261a0:	e0fe1717 	ldw	r3,-1956(fp)
   261a4:	e0be2e17 	ldw	r2,-1864(fp)
   261a8:	1880022e 	bgeu	r3,r2,261b4 <secp256k1_scalar_reduce_512+0x720>
   261ac:	00c00044 	movi	r3,1
   261b0:	00000106 	br	261b8 <secp256k1_scalar_reduce_512+0x724>
   261b4:	0007883a 	mov	r3,zero
   261b8:	e0be1817 	ldw	r2,-1952(fp)
   261bc:	10c5883a 	add	r2,r2,r3
   261c0:	e0be1815 	stw	r2,-1952(fp)
   261c4:	e0fe1717 	ldw	r3,-1956(fp)
   261c8:	e0be2e17 	ldw	r2,-1864(fp)
   261cc:	1885803a 	cmpltu	r2,r3,r2
   261d0:	10803fcc 	andi	r2,r2,255
   261d4:	10001126 	beq	r2,zero,2621c <secp256k1_scalar_reduce_512+0x788>
   261d8:	e0be1817 	ldw	r2,-1952(fp)
   261dc:	1005003a 	cmpeq	r2,r2,zero
   261e0:	10803fcc 	andi	r2,r2,255
   261e4:	10000d26 	beq	r2,zero,2621c <secp256k1_scalar_reduce_512+0x788>
   261e8:	d0a01617 	ldw	r2,-32680(gp)
   261ec:	10c00317 	ldw	r3,12(r2)
   261f0:	008001b4 	movhi	r2,6
   261f4:	10b02604 	addi	r2,r2,-16232
   261f8:	d8800015 	stw	r2,0(sp)
   261fc:	01c05c44 	movi	r7,369
   26200:	018001b4 	movhi	r6,6
   26204:	31af9204 	addi	r6,r6,-16824
   26208:	014001b4 	movhi	r5,6
   2620c:	296b3804 	addi	r5,r5,-21280
   26210:	1809883a 	mov	r4,r3
   26214:	00452600 	call	45260 <fprintf>
   26218:	00450340 	call	45034 <abort>
    muladd(n0, SECP256K1_N_C_2);
   2621c:	e0be0e17 	ldw	r2,-1992(fp)
   26220:	e0bf2215 	stw	r2,-888(fp)
   26224:	e03f2315 	stw	zero,-884(fp)
   26228:	01942df4 	movhi	r6,20663
   2622c:	3197f104 	addi	r6,r6,24516
   26230:	000f883a 	mov	r7,zero
   26234:	e13f2217 	ldw	r4,-888(fp)
   26238:	e17f2317 	ldw	r5,-884(fp)
   2623c:	00429400 	call	42940 <__muldi3>
   26240:	1009883a 	mov	r4,r2
   26244:	180b883a 	mov	r5,r3
   26248:	e13e3015 	stw	r4,-1856(fp)
   2624c:	e17e3115 	stw	r5,-1852(fp)
   26250:	e0be3117 	ldw	r2,-1852(fp)
   26254:	1004d83a 	srl	r2,r2,zero
   26258:	e0bf2415 	stw	r2,-880(fp)
   2625c:	e03f2515 	stw	zero,-876(fp)
   26260:	e17f2417 	ldw	r5,-880(fp)
   26264:	e17e3215 	stw	r5,-1848(fp)
   26268:	e0be3017 	ldw	r2,-1856(fp)
   2626c:	e0be3315 	stw	r2,-1844(fp)
   26270:	e0fe1617 	ldw	r3,-1960(fp)
   26274:	e0be3317 	ldw	r2,-1844(fp)
   26278:	1885883a 	add	r2,r3,r2
   2627c:	e0be1615 	stw	r2,-1960(fp)
   26280:	e0fe1617 	ldw	r3,-1960(fp)
   26284:	e0be3317 	ldw	r2,-1844(fp)
   26288:	1880022e 	bgeu	r3,r2,26294 <secp256k1_scalar_reduce_512+0x800>
   2628c:	00c00044 	movi	r3,1
   26290:	00000106 	br	26298 <secp256k1_scalar_reduce_512+0x804>
   26294:	0007883a 	mov	r3,zero
   26298:	e0be3217 	ldw	r2,-1848(fp)
   2629c:	10c5883a 	add	r2,r2,r3
   262a0:	e0be3215 	stw	r2,-1848(fp)
   262a4:	e0fe1717 	ldw	r3,-1956(fp)
   262a8:	e0be3217 	ldw	r2,-1848(fp)
   262ac:	1885883a 	add	r2,r3,r2
   262b0:	e0be1715 	stw	r2,-1956(fp)
   262b4:	e0fe1717 	ldw	r3,-1956(fp)
   262b8:	e0be3217 	ldw	r2,-1848(fp)
   262bc:	1880022e 	bgeu	r3,r2,262c8 <secp256k1_scalar_reduce_512+0x834>
   262c0:	00c00044 	movi	r3,1
   262c4:	00000106 	br	262cc <secp256k1_scalar_reduce_512+0x838>
   262c8:	0007883a 	mov	r3,zero
   262cc:	e0be1817 	ldw	r2,-1952(fp)
   262d0:	10c5883a 	add	r2,r2,r3
   262d4:	e0be1815 	stw	r2,-1952(fp)
   262d8:	e0fe1717 	ldw	r3,-1956(fp)
   262dc:	e0be3217 	ldw	r2,-1848(fp)
   262e0:	1885803a 	cmpltu	r2,r3,r2
   262e4:	10803fcc 	andi	r2,r2,255
   262e8:	10001126 	beq	r2,zero,26330 <secp256k1_scalar_reduce_512+0x89c>
   262ec:	e0be1817 	ldw	r2,-1952(fp)
   262f0:	1005003a 	cmpeq	r2,r2,zero
   262f4:	10803fcc 	andi	r2,r2,255
   262f8:	10000d26 	beq	r2,zero,26330 <secp256k1_scalar_reduce_512+0x89c>
   262fc:	d0a01617 	ldw	r2,-32680(gp)
   26300:	10c00317 	ldw	r3,12(r2)
   26304:	008001b4 	movhi	r2,6
   26308:	10b02604 	addi	r2,r2,-16232
   2630c:	d8800015 	stw	r2,0(sp)
   26310:	01c05c84 	movi	r7,370
   26314:	018001b4 	movhi	r6,6
   26318:	31af9204 	addi	r6,r6,-16824
   2631c:	014001b4 	movhi	r5,6
   26320:	296b3804 	addi	r5,r5,-21280
   26324:	1809883a 	mov	r4,r3
   26328:	00452600 	call	45260 <fprintf>
   2632c:	00450340 	call	45034 <abort>
    extract(m2);
   26330:	e0be1617 	ldw	r2,-1960(fp)
   26334:	e0be3415 	stw	r2,-1840(fp)
   26338:	e0be1717 	ldw	r2,-1956(fp)
   2633c:	e0be1615 	stw	r2,-1960(fp)
   26340:	e0be1817 	ldw	r2,-1952(fp)
   26344:	e0be1715 	stw	r2,-1956(fp)
   26348:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[3]);
   2634c:	e0bf1717 	ldw	r2,-932(fp)
   26350:	10800304 	addi	r2,r2,12
   26354:	10c00017 	ldw	r3,0(r2)
   26358:	e0be1617 	ldw	r2,-1960(fp)
   2635c:	10c5883a 	add	r2,r2,r3
   26360:	e0be1615 	stw	r2,-1960(fp)
   26364:	e0bf1717 	ldw	r2,-932(fp)
   26368:	10800304 	addi	r2,r2,12
   2636c:	10c00017 	ldw	r3,0(r2)
   26370:	e0be1617 	ldw	r2,-1960(fp)
   26374:	10c5803a 	cmpltu	r2,r2,r3
   26378:	10803fcc 	andi	r2,r2,255
   2637c:	e0be3515 	stw	r2,-1836(fp)
   26380:	e0fe1717 	ldw	r3,-1956(fp)
   26384:	e0be3517 	ldw	r2,-1836(fp)
   26388:	1885883a 	add	r2,r3,r2
   2638c:	e0be1715 	stw	r2,-1956(fp)
   26390:	e0fe1717 	ldw	r3,-1956(fp)
   26394:	e0be3517 	ldw	r2,-1836(fp)
   26398:	1880022e 	bgeu	r3,r2,263a4 <secp256k1_scalar_reduce_512+0x910>
   2639c:	00c00044 	movi	r3,1
   263a0:	00000106 	br	263a8 <secp256k1_scalar_reduce_512+0x914>
   263a4:	0007883a 	mov	r3,zero
   263a8:	e0be1817 	ldw	r2,-1952(fp)
   263ac:	10c5883a 	add	r2,r2,r3
   263b0:	e0be1815 	stw	r2,-1952(fp)
    muladd(n3, SECP256K1_N_C_0);
   263b4:	e0be1117 	ldw	r2,-1980(fp)
   263b8:	e0bf2615 	stw	r2,-872(fp)
   263bc:	e03f2715 	stw	zero,-868(fp)
   263c0:	018bf2b4 	movhi	r6,12234
   263c4:	31afafc4 	addi	r6,r6,-16705
   263c8:	000f883a 	mov	r7,zero
   263cc:	e13f2617 	ldw	r4,-872(fp)
   263d0:	e17f2717 	ldw	r5,-868(fp)
   263d4:	00429400 	call	42940 <__muldi3>
   263d8:	1009883a 	mov	r4,r2
   263dc:	180b883a 	mov	r5,r3
   263e0:	e13e3615 	stw	r4,-1832(fp)
   263e4:	e17e3715 	stw	r5,-1828(fp)
   263e8:	e0be3717 	ldw	r2,-1828(fp)
   263ec:	1004d83a 	srl	r2,r2,zero
   263f0:	e0bf2815 	stw	r2,-864(fp)
   263f4:	e03f2915 	stw	zero,-860(fp)
   263f8:	e1bf2817 	ldw	r6,-864(fp)
   263fc:	e1be3815 	stw	r6,-1824(fp)
   26400:	e0be3617 	ldw	r2,-1832(fp)
   26404:	e0be3915 	stw	r2,-1820(fp)
   26408:	e0fe1617 	ldw	r3,-1960(fp)
   2640c:	e0be3917 	ldw	r2,-1820(fp)
   26410:	1885883a 	add	r2,r3,r2
   26414:	e0be1615 	stw	r2,-1960(fp)
   26418:	e0fe1617 	ldw	r3,-1960(fp)
   2641c:	e0be3917 	ldw	r2,-1820(fp)
   26420:	1880022e 	bgeu	r3,r2,2642c <secp256k1_scalar_reduce_512+0x998>
   26424:	00c00044 	movi	r3,1
   26428:	00000106 	br	26430 <secp256k1_scalar_reduce_512+0x99c>
   2642c:	0007883a 	mov	r3,zero
   26430:	e0be3817 	ldw	r2,-1824(fp)
   26434:	10c5883a 	add	r2,r2,r3
   26438:	e0be3815 	stw	r2,-1824(fp)
   2643c:	e0fe1717 	ldw	r3,-1956(fp)
   26440:	e0be3817 	ldw	r2,-1824(fp)
   26444:	1885883a 	add	r2,r3,r2
   26448:	e0be1715 	stw	r2,-1956(fp)
   2644c:	e0fe1717 	ldw	r3,-1956(fp)
   26450:	e0be3817 	ldw	r2,-1824(fp)
   26454:	1880022e 	bgeu	r3,r2,26460 <secp256k1_scalar_reduce_512+0x9cc>
   26458:	00c00044 	movi	r3,1
   2645c:	00000106 	br	26464 <secp256k1_scalar_reduce_512+0x9d0>
   26460:	0007883a 	mov	r3,zero
   26464:	e0be1817 	ldw	r2,-1952(fp)
   26468:	10c5883a 	add	r2,r2,r3
   2646c:	e0be1815 	stw	r2,-1952(fp)
   26470:	e0fe1717 	ldw	r3,-1956(fp)
   26474:	e0be3817 	ldw	r2,-1824(fp)
   26478:	1885803a 	cmpltu	r2,r3,r2
   2647c:	10803fcc 	andi	r2,r2,255
   26480:	10001126 	beq	r2,zero,264c8 <secp256k1_scalar_reduce_512+0xa34>
   26484:	e0be1817 	ldw	r2,-1952(fp)
   26488:	1005003a 	cmpeq	r2,r2,zero
   2648c:	10803fcc 	andi	r2,r2,255
   26490:	10000d26 	beq	r2,zero,264c8 <secp256k1_scalar_reduce_512+0xa34>
   26494:	d0a01617 	ldw	r2,-32680(gp)
   26498:	10c00317 	ldw	r3,12(r2)
   2649c:	008001b4 	movhi	r2,6
   264a0:	10b02604 	addi	r2,r2,-16232
   264a4:	d8800015 	stw	r2,0(sp)
   264a8:	01c05d44 	movi	r7,373
   264ac:	018001b4 	movhi	r6,6
   264b0:	31af9204 	addi	r6,r6,-16824
   264b4:	014001b4 	movhi	r5,6
   264b8:	296b3804 	addi	r5,r5,-21280
   264bc:	1809883a 	mov	r4,r3
   264c0:	00452600 	call	45260 <fprintf>
   264c4:	00450340 	call	45034 <abort>
    muladd(n2, SECP256K1_N_C_1);
   264c8:	e0be1017 	ldw	r2,-1984(fp)
   264cc:	e0bf2a15 	stw	r2,-856(fp)
   264d0:	e03f2b15 	stw	zero,-852(fp)
   264d4:	01900bb4 	movhi	r6,16430
   264d8:	31a85cc4 	addi	r6,r6,-24205
   264dc:	000f883a 	mov	r7,zero
   264e0:	e13f2a17 	ldw	r4,-856(fp)
   264e4:	e17f2b17 	ldw	r5,-852(fp)
   264e8:	00429400 	call	42940 <__muldi3>
   264ec:	1009883a 	mov	r4,r2
   264f0:	180b883a 	mov	r5,r3
   264f4:	e13e3a15 	stw	r4,-1816(fp)
   264f8:	e17e3b15 	stw	r5,-1812(fp)
   264fc:	e0be3b17 	ldw	r2,-1812(fp)
   26500:	1004d83a 	srl	r2,r2,zero
   26504:	e0bf2c15 	stw	r2,-848(fp)
   26508:	e03f2d15 	stw	zero,-844(fp)
   2650c:	e1ff2c17 	ldw	r7,-848(fp)
   26510:	e1fe3c15 	stw	r7,-1808(fp)
   26514:	e0be3a17 	ldw	r2,-1816(fp)
   26518:	e0be3d15 	stw	r2,-1804(fp)
   2651c:	e0fe1617 	ldw	r3,-1960(fp)
   26520:	e0be3d17 	ldw	r2,-1804(fp)
   26524:	1885883a 	add	r2,r3,r2
   26528:	e0be1615 	stw	r2,-1960(fp)
   2652c:	e0fe1617 	ldw	r3,-1960(fp)
   26530:	e0be3d17 	ldw	r2,-1804(fp)
   26534:	1880022e 	bgeu	r3,r2,26540 <secp256k1_scalar_reduce_512+0xaac>
   26538:	00c00044 	movi	r3,1
   2653c:	00000106 	br	26544 <secp256k1_scalar_reduce_512+0xab0>
   26540:	0007883a 	mov	r3,zero
   26544:	e0be3c17 	ldw	r2,-1808(fp)
   26548:	10c5883a 	add	r2,r2,r3
   2654c:	e0be3c15 	stw	r2,-1808(fp)
   26550:	e0fe1717 	ldw	r3,-1956(fp)
   26554:	e0be3c17 	ldw	r2,-1808(fp)
   26558:	1885883a 	add	r2,r3,r2
   2655c:	e0be1715 	stw	r2,-1956(fp)
   26560:	e0fe1717 	ldw	r3,-1956(fp)
   26564:	e0be3c17 	ldw	r2,-1808(fp)
   26568:	1880022e 	bgeu	r3,r2,26574 <secp256k1_scalar_reduce_512+0xae0>
   2656c:	00c00044 	movi	r3,1
   26570:	00000106 	br	26578 <secp256k1_scalar_reduce_512+0xae4>
   26574:	0007883a 	mov	r3,zero
   26578:	e0be1817 	ldw	r2,-1952(fp)
   2657c:	10c5883a 	add	r2,r2,r3
   26580:	e0be1815 	stw	r2,-1952(fp)
   26584:	e0fe1717 	ldw	r3,-1956(fp)
   26588:	e0be3c17 	ldw	r2,-1808(fp)
   2658c:	1885803a 	cmpltu	r2,r3,r2
   26590:	10803fcc 	andi	r2,r2,255
   26594:	10001126 	beq	r2,zero,265dc <secp256k1_scalar_reduce_512+0xb48>
   26598:	e0be1817 	ldw	r2,-1952(fp)
   2659c:	1005003a 	cmpeq	r2,r2,zero
   265a0:	10803fcc 	andi	r2,r2,255
   265a4:	10000d26 	beq	r2,zero,265dc <secp256k1_scalar_reduce_512+0xb48>
   265a8:	d0a01617 	ldw	r2,-32680(gp)
   265ac:	10c00317 	ldw	r3,12(r2)
   265b0:	008001b4 	movhi	r2,6
   265b4:	10b02604 	addi	r2,r2,-16232
   265b8:	d8800015 	stw	r2,0(sp)
   265bc:	01c05d84 	movi	r7,374
   265c0:	018001b4 	movhi	r6,6
   265c4:	31af9204 	addi	r6,r6,-16824
   265c8:	014001b4 	movhi	r5,6
   265cc:	296b3804 	addi	r5,r5,-21280
   265d0:	1809883a 	mov	r4,r3
   265d4:	00452600 	call	45260 <fprintf>
   265d8:	00450340 	call	45034 <abort>
    muladd(n1, SECP256K1_N_C_2);
   265dc:	e0be0f17 	ldw	r2,-1988(fp)
   265e0:	e0bf2e15 	stw	r2,-840(fp)
   265e4:	e03f2f15 	stw	zero,-836(fp)
   265e8:	01942df4 	movhi	r6,20663
   265ec:	3197f104 	addi	r6,r6,24516
   265f0:	000f883a 	mov	r7,zero
   265f4:	e13f2e17 	ldw	r4,-840(fp)
   265f8:	e17f2f17 	ldw	r5,-836(fp)
   265fc:	00429400 	call	42940 <__muldi3>
   26600:	1009883a 	mov	r4,r2
   26604:	180b883a 	mov	r5,r3
   26608:	e13e3e15 	stw	r4,-1800(fp)
   2660c:	e17e3f15 	stw	r5,-1796(fp)
   26610:	e0be3f17 	ldw	r2,-1796(fp)
   26614:	1004d83a 	srl	r2,r2,zero
   26618:	e0bf3015 	stw	r2,-832(fp)
   2661c:	e03f3115 	stw	zero,-828(fp)
   26620:	e0bf3017 	ldw	r2,-832(fp)
   26624:	e0be4015 	stw	r2,-1792(fp)
   26628:	e0be3e17 	ldw	r2,-1800(fp)
   2662c:	e0be4115 	stw	r2,-1788(fp)
   26630:	e0fe1617 	ldw	r3,-1960(fp)
   26634:	e0be4117 	ldw	r2,-1788(fp)
   26638:	1885883a 	add	r2,r3,r2
   2663c:	e0be1615 	stw	r2,-1960(fp)
   26640:	e0fe1617 	ldw	r3,-1960(fp)
   26644:	e0be4117 	ldw	r2,-1788(fp)
   26648:	1880022e 	bgeu	r3,r2,26654 <secp256k1_scalar_reduce_512+0xbc0>
   2664c:	00c00044 	movi	r3,1
   26650:	00000106 	br	26658 <secp256k1_scalar_reduce_512+0xbc4>
   26654:	0007883a 	mov	r3,zero
   26658:	e0be4017 	ldw	r2,-1792(fp)
   2665c:	10c5883a 	add	r2,r2,r3
   26660:	e0be4015 	stw	r2,-1792(fp)
   26664:	e0fe1717 	ldw	r3,-1956(fp)
   26668:	e0be4017 	ldw	r2,-1792(fp)
   2666c:	1885883a 	add	r2,r3,r2
   26670:	e0be1715 	stw	r2,-1956(fp)
   26674:	e0fe1717 	ldw	r3,-1956(fp)
   26678:	e0be4017 	ldw	r2,-1792(fp)
   2667c:	1880022e 	bgeu	r3,r2,26688 <secp256k1_scalar_reduce_512+0xbf4>
   26680:	00c00044 	movi	r3,1
   26684:	00000106 	br	2668c <secp256k1_scalar_reduce_512+0xbf8>
   26688:	0007883a 	mov	r3,zero
   2668c:	e0be1817 	ldw	r2,-1952(fp)
   26690:	10c5883a 	add	r2,r2,r3
   26694:	e0be1815 	stw	r2,-1952(fp)
   26698:	e0fe1717 	ldw	r3,-1956(fp)
   2669c:	e0be4017 	ldw	r2,-1792(fp)
   266a0:	1885803a 	cmpltu	r2,r3,r2
   266a4:	10803fcc 	andi	r2,r2,255
   266a8:	10001126 	beq	r2,zero,266f0 <secp256k1_scalar_reduce_512+0xc5c>
   266ac:	e0be1817 	ldw	r2,-1952(fp)
   266b0:	1005003a 	cmpeq	r2,r2,zero
   266b4:	10803fcc 	andi	r2,r2,255
   266b8:	10000d26 	beq	r2,zero,266f0 <secp256k1_scalar_reduce_512+0xc5c>
   266bc:	d0a01617 	ldw	r2,-32680(gp)
   266c0:	10c00317 	ldw	r3,12(r2)
   266c4:	008001b4 	movhi	r2,6
   266c8:	10b02604 	addi	r2,r2,-16232
   266cc:	d8800015 	stw	r2,0(sp)
   266d0:	01c05dc4 	movi	r7,375
   266d4:	018001b4 	movhi	r6,6
   266d8:	31af9204 	addi	r6,r6,-16824
   266dc:	014001b4 	movhi	r5,6
   266e0:	296b3804 	addi	r5,r5,-21280
   266e4:	1809883a 	mov	r4,r3
   266e8:	00452600 	call	45260 <fprintf>
   266ec:	00450340 	call	45034 <abort>
    muladd(n0, SECP256K1_N_C_3);
   266f0:	e0be0e17 	ldw	r2,-1992(fp)
   266f4:	e0bf3215 	stw	r2,-824(fp)
   266f8:	e03f3315 	stw	zero,-820(fp)
   266fc:	01915474 	movhi	r6,17745
   26700:	3188c644 	addi	r6,r6,8985
   26704:	000f883a 	mov	r7,zero
   26708:	e13f3217 	ldw	r4,-824(fp)
   2670c:	e17f3317 	ldw	r5,-820(fp)
   26710:	00429400 	call	42940 <__muldi3>
   26714:	1009883a 	mov	r4,r2
   26718:	180b883a 	mov	r5,r3
   2671c:	e13e4215 	stw	r4,-1784(fp)
   26720:	e17e4315 	stw	r5,-1780(fp)
   26724:	e0be4317 	ldw	r2,-1780(fp)
   26728:	1004d83a 	srl	r2,r2,zero
   2672c:	e0bf3415 	stw	r2,-816(fp)
   26730:	e03f3515 	stw	zero,-812(fp)
   26734:	e13f3417 	ldw	r4,-816(fp)
   26738:	e13e4415 	stw	r4,-1776(fp)
   2673c:	e0be4217 	ldw	r2,-1784(fp)
   26740:	e0be4515 	stw	r2,-1772(fp)
   26744:	e0fe1617 	ldw	r3,-1960(fp)
   26748:	e0be4517 	ldw	r2,-1772(fp)
   2674c:	1885883a 	add	r2,r3,r2
   26750:	e0be1615 	stw	r2,-1960(fp)
   26754:	e0fe1617 	ldw	r3,-1960(fp)
   26758:	e0be4517 	ldw	r2,-1772(fp)
   2675c:	1880022e 	bgeu	r3,r2,26768 <secp256k1_scalar_reduce_512+0xcd4>
   26760:	00c00044 	movi	r3,1
   26764:	00000106 	br	2676c <secp256k1_scalar_reduce_512+0xcd8>
   26768:	0007883a 	mov	r3,zero
   2676c:	e0be4417 	ldw	r2,-1776(fp)
   26770:	10c5883a 	add	r2,r2,r3
   26774:	e0be4415 	stw	r2,-1776(fp)
   26778:	e0fe1717 	ldw	r3,-1956(fp)
   2677c:	e0be4417 	ldw	r2,-1776(fp)
   26780:	1885883a 	add	r2,r3,r2
   26784:	e0be1715 	stw	r2,-1956(fp)
   26788:	e0fe1717 	ldw	r3,-1956(fp)
   2678c:	e0be4417 	ldw	r2,-1776(fp)
   26790:	1880022e 	bgeu	r3,r2,2679c <secp256k1_scalar_reduce_512+0xd08>
   26794:	00c00044 	movi	r3,1
   26798:	00000106 	br	267a0 <secp256k1_scalar_reduce_512+0xd0c>
   2679c:	0007883a 	mov	r3,zero
   267a0:	e0be1817 	ldw	r2,-1952(fp)
   267a4:	10c5883a 	add	r2,r2,r3
   267a8:	e0be1815 	stw	r2,-1952(fp)
   267ac:	e0fe1717 	ldw	r3,-1956(fp)
   267b0:	e0be4417 	ldw	r2,-1776(fp)
   267b4:	1885803a 	cmpltu	r2,r3,r2
   267b8:	10803fcc 	andi	r2,r2,255
   267bc:	10001126 	beq	r2,zero,26804 <secp256k1_scalar_reduce_512+0xd70>
   267c0:	e0be1817 	ldw	r2,-1952(fp)
   267c4:	1005003a 	cmpeq	r2,r2,zero
   267c8:	10803fcc 	andi	r2,r2,255
   267cc:	10000d26 	beq	r2,zero,26804 <secp256k1_scalar_reduce_512+0xd70>
   267d0:	d0a01617 	ldw	r2,-32680(gp)
   267d4:	10c00317 	ldw	r3,12(r2)
   267d8:	008001b4 	movhi	r2,6
   267dc:	10b02604 	addi	r2,r2,-16232
   267e0:	d8800015 	stw	r2,0(sp)
   267e4:	01c05e04 	movi	r7,376
   267e8:	018001b4 	movhi	r6,6
   267ec:	31af9204 	addi	r6,r6,-16824
   267f0:	014001b4 	movhi	r5,6
   267f4:	296b3804 	addi	r5,r5,-21280
   267f8:	1809883a 	mov	r4,r3
   267fc:	00452600 	call	45260 <fprintf>
   26800:	00450340 	call	45034 <abort>
    extract(m3);
   26804:	e0be1617 	ldw	r2,-1960(fp)
   26808:	e0be4615 	stw	r2,-1768(fp)
   2680c:	e0be1717 	ldw	r2,-1956(fp)
   26810:	e0be1615 	stw	r2,-1960(fp)
   26814:	e0be1817 	ldw	r2,-1952(fp)
   26818:	e0be1715 	stw	r2,-1956(fp)
   2681c:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[4]);
   26820:	e0bf1717 	ldw	r2,-932(fp)
   26824:	10800404 	addi	r2,r2,16
   26828:	10c00017 	ldw	r3,0(r2)
   2682c:	e0be1617 	ldw	r2,-1960(fp)
   26830:	10c5883a 	add	r2,r2,r3
   26834:	e0be1615 	stw	r2,-1960(fp)
   26838:	e0bf1717 	ldw	r2,-932(fp)
   2683c:	10800404 	addi	r2,r2,16
   26840:	10c00017 	ldw	r3,0(r2)
   26844:	e0be1617 	ldw	r2,-1960(fp)
   26848:	10c5803a 	cmpltu	r2,r2,r3
   2684c:	10803fcc 	andi	r2,r2,255
   26850:	e0be4715 	stw	r2,-1764(fp)
   26854:	e0fe1717 	ldw	r3,-1956(fp)
   26858:	e0be4717 	ldw	r2,-1764(fp)
   2685c:	1885883a 	add	r2,r3,r2
   26860:	e0be1715 	stw	r2,-1956(fp)
   26864:	e0fe1717 	ldw	r3,-1956(fp)
   26868:	e0be4717 	ldw	r2,-1764(fp)
   2686c:	1880022e 	bgeu	r3,r2,26878 <secp256k1_scalar_reduce_512+0xde4>
   26870:	00c00044 	movi	r3,1
   26874:	00000106 	br	2687c <secp256k1_scalar_reduce_512+0xde8>
   26878:	0007883a 	mov	r3,zero
   2687c:	e0be1817 	ldw	r2,-1952(fp)
   26880:	10c5883a 	add	r2,r2,r3
   26884:	e0be1815 	stw	r2,-1952(fp)
    muladd(n4, SECP256K1_N_C_0);
   26888:	e0be1217 	ldw	r2,-1976(fp)
   2688c:	e0bf3615 	stw	r2,-808(fp)
   26890:	e03f3715 	stw	zero,-804(fp)
   26894:	018bf2b4 	movhi	r6,12234
   26898:	31afafc4 	addi	r6,r6,-16705
   2689c:	000f883a 	mov	r7,zero
   268a0:	e13f3617 	ldw	r4,-808(fp)
   268a4:	e17f3717 	ldw	r5,-804(fp)
   268a8:	00429400 	call	42940 <__muldi3>
   268ac:	1009883a 	mov	r4,r2
   268b0:	180b883a 	mov	r5,r3
   268b4:	e13e4815 	stw	r4,-1760(fp)
   268b8:	e17e4915 	stw	r5,-1756(fp)
   268bc:	e0be4917 	ldw	r2,-1756(fp)
   268c0:	1004d83a 	srl	r2,r2,zero
   268c4:	e0bf3815 	stw	r2,-800(fp)
   268c8:	e03f3915 	stw	zero,-796(fp)
   268cc:	e17f3817 	ldw	r5,-800(fp)
   268d0:	e17e4a15 	stw	r5,-1752(fp)
   268d4:	e0be4817 	ldw	r2,-1760(fp)
   268d8:	e0be4b15 	stw	r2,-1748(fp)
   268dc:	e0fe1617 	ldw	r3,-1960(fp)
   268e0:	e0be4b17 	ldw	r2,-1748(fp)
   268e4:	1885883a 	add	r2,r3,r2
   268e8:	e0be1615 	stw	r2,-1960(fp)
   268ec:	e0fe1617 	ldw	r3,-1960(fp)
   268f0:	e0be4b17 	ldw	r2,-1748(fp)
   268f4:	1880022e 	bgeu	r3,r2,26900 <secp256k1_scalar_reduce_512+0xe6c>
   268f8:	00c00044 	movi	r3,1
   268fc:	00000106 	br	26904 <secp256k1_scalar_reduce_512+0xe70>
   26900:	0007883a 	mov	r3,zero
   26904:	e0be4a17 	ldw	r2,-1752(fp)
   26908:	10c5883a 	add	r2,r2,r3
   2690c:	e0be4a15 	stw	r2,-1752(fp)
   26910:	e0fe1717 	ldw	r3,-1956(fp)
   26914:	e0be4a17 	ldw	r2,-1752(fp)
   26918:	1885883a 	add	r2,r3,r2
   2691c:	e0be1715 	stw	r2,-1956(fp)
   26920:	e0fe1717 	ldw	r3,-1956(fp)
   26924:	e0be4a17 	ldw	r2,-1752(fp)
   26928:	1880022e 	bgeu	r3,r2,26934 <secp256k1_scalar_reduce_512+0xea0>
   2692c:	00c00044 	movi	r3,1
   26930:	00000106 	br	26938 <secp256k1_scalar_reduce_512+0xea4>
   26934:	0007883a 	mov	r3,zero
   26938:	e0be1817 	ldw	r2,-1952(fp)
   2693c:	10c5883a 	add	r2,r2,r3
   26940:	e0be1815 	stw	r2,-1952(fp)
   26944:	e0fe1717 	ldw	r3,-1956(fp)
   26948:	e0be4a17 	ldw	r2,-1752(fp)
   2694c:	1885803a 	cmpltu	r2,r3,r2
   26950:	10803fcc 	andi	r2,r2,255
   26954:	10001126 	beq	r2,zero,2699c <secp256k1_scalar_reduce_512+0xf08>
   26958:	e0be1817 	ldw	r2,-1952(fp)
   2695c:	1005003a 	cmpeq	r2,r2,zero
   26960:	10803fcc 	andi	r2,r2,255
   26964:	10000d26 	beq	r2,zero,2699c <secp256k1_scalar_reduce_512+0xf08>
   26968:	d0a01617 	ldw	r2,-32680(gp)
   2696c:	10c00317 	ldw	r3,12(r2)
   26970:	008001b4 	movhi	r2,6
   26974:	10b02604 	addi	r2,r2,-16232
   26978:	d8800015 	stw	r2,0(sp)
   2697c:	01c05ec4 	movi	r7,379
   26980:	018001b4 	movhi	r6,6
   26984:	31af9204 	addi	r6,r6,-16824
   26988:	014001b4 	movhi	r5,6
   2698c:	296b3804 	addi	r5,r5,-21280
   26990:	1809883a 	mov	r4,r3
   26994:	00452600 	call	45260 <fprintf>
   26998:	00450340 	call	45034 <abort>
    muladd(n3, SECP256K1_N_C_1);
   2699c:	e0be1117 	ldw	r2,-1980(fp)
   269a0:	e0bf3a15 	stw	r2,-792(fp)
   269a4:	e03f3b15 	stw	zero,-788(fp)
   269a8:	01900bb4 	movhi	r6,16430
   269ac:	31a85cc4 	addi	r6,r6,-24205
   269b0:	000f883a 	mov	r7,zero
   269b4:	e13f3a17 	ldw	r4,-792(fp)
   269b8:	e17f3b17 	ldw	r5,-788(fp)
   269bc:	00429400 	call	42940 <__muldi3>
   269c0:	1009883a 	mov	r4,r2
   269c4:	180b883a 	mov	r5,r3
   269c8:	e13e4c15 	stw	r4,-1744(fp)
   269cc:	e17e4d15 	stw	r5,-1740(fp)
   269d0:	e0be4d17 	ldw	r2,-1740(fp)
   269d4:	1004d83a 	srl	r2,r2,zero
   269d8:	e0bf3c15 	stw	r2,-784(fp)
   269dc:	e03f3d15 	stw	zero,-780(fp)
   269e0:	e1bf3c17 	ldw	r6,-784(fp)
   269e4:	e1be4e15 	stw	r6,-1736(fp)
   269e8:	e0be4c17 	ldw	r2,-1744(fp)
   269ec:	e0be4f15 	stw	r2,-1732(fp)
   269f0:	e0fe1617 	ldw	r3,-1960(fp)
   269f4:	e0be4f17 	ldw	r2,-1732(fp)
   269f8:	1885883a 	add	r2,r3,r2
   269fc:	e0be1615 	stw	r2,-1960(fp)
   26a00:	e0fe1617 	ldw	r3,-1960(fp)
   26a04:	e0be4f17 	ldw	r2,-1732(fp)
   26a08:	1880022e 	bgeu	r3,r2,26a14 <secp256k1_scalar_reduce_512+0xf80>
   26a0c:	00c00044 	movi	r3,1
   26a10:	00000106 	br	26a18 <secp256k1_scalar_reduce_512+0xf84>
   26a14:	0007883a 	mov	r3,zero
   26a18:	e0be4e17 	ldw	r2,-1736(fp)
   26a1c:	10c5883a 	add	r2,r2,r3
   26a20:	e0be4e15 	stw	r2,-1736(fp)
   26a24:	e0fe1717 	ldw	r3,-1956(fp)
   26a28:	e0be4e17 	ldw	r2,-1736(fp)
   26a2c:	1885883a 	add	r2,r3,r2
   26a30:	e0be1715 	stw	r2,-1956(fp)
   26a34:	e0fe1717 	ldw	r3,-1956(fp)
   26a38:	e0be4e17 	ldw	r2,-1736(fp)
   26a3c:	1880022e 	bgeu	r3,r2,26a48 <secp256k1_scalar_reduce_512+0xfb4>
   26a40:	00c00044 	movi	r3,1
   26a44:	00000106 	br	26a4c <secp256k1_scalar_reduce_512+0xfb8>
   26a48:	0007883a 	mov	r3,zero
   26a4c:	e0be1817 	ldw	r2,-1952(fp)
   26a50:	10c5883a 	add	r2,r2,r3
   26a54:	e0be1815 	stw	r2,-1952(fp)
   26a58:	e0fe1717 	ldw	r3,-1956(fp)
   26a5c:	e0be4e17 	ldw	r2,-1736(fp)
   26a60:	1885803a 	cmpltu	r2,r3,r2
   26a64:	10803fcc 	andi	r2,r2,255
   26a68:	10001126 	beq	r2,zero,26ab0 <secp256k1_scalar_reduce_512+0x101c>
   26a6c:	e0be1817 	ldw	r2,-1952(fp)
   26a70:	1005003a 	cmpeq	r2,r2,zero
   26a74:	10803fcc 	andi	r2,r2,255
   26a78:	10000d26 	beq	r2,zero,26ab0 <secp256k1_scalar_reduce_512+0x101c>
   26a7c:	d0a01617 	ldw	r2,-32680(gp)
   26a80:	10c00317 	ldw	r3,12(r2)
   26a84:	008001b4 	movhi	r2,6
   26a88:	10b02604 	addi	r2,r2,-16232
   26a8c:	d8800015 	stw	r2,0(sp)
   26a90:	01c05f04 	movi	r7,380
   26a94:	018001b4 	movhi	r6,6
   26a98:	31af9204 	addi	r6,r6,-16824
   26a9c:	014001b4 	movhi	r5,6
   26aa0:	296b3804 	addi	r5,r5,-21280
   26aa4:	1809883a 	mov	r4,r3
   26aa8:	00452600 	call	45260 <fprintf>
   26aac:	00450340 	call	45034 <abort>
    muladd(n2, SECP256K1_N_C_2);
   26ab0:	e0be1017 	ldw	r2,-1984(fp)
   26ab4:	e0bf3e15 	stw	r2,-776(fp)
   26ab8:	e03f3f15 	stw	zero,-772(fp)
   26abc:	01942df4 	movhi	r6,20663
   26ac0:	3197f104 	addi	r6,r6,24516
   26ac4:	000f883a 	mov	r7,zero
   26ac8:	e13f3e17 	ldw	r4,-776(fp)
   26acc:	e17f3f17 	ldw	r5,-772(fp)
   26ad0:	00429400 	call	42940 <__muldi3>
   26ad4:	1009883a 	mov	r4,r2
   26ad8:	180b883a 	mov	r5,r3
   26adc:	e13e5015 	stw	r4,-1728(fp)
   26ae0:	e17e5115 	stw	r5,-1724(fp)
   26ae4:	e0be5117 	ldw	r2,-1724(fp)
   26ae8:	1004d83a 	srl	r2,r2,zero
   26aec:	e0bf4015 	stw	r2,-768(fp)
   26af0:	e03f4115 	stw	zero,-764(fp)
   26af4:	e1ff4017 	ldw	r7,-768(fp)
   26af8:	e1fe5215 	stw	r7,-1720(fp)
   26afc:	e0be5017 	ldw	r2,-1728(fp)
   26b00:	e0be5315 	stw	r2,-1716(fp)
   26b04:	e0fe1617 	ldw	r3,-1960(fp)
   26b08:	e0be5317 	ldw	r2,-1716(fp)
   26b0c:	1885883a 	add	r2,r3,r2
   26b10:	e0be1615 	stw	r2,-1960(fp)
   26b14:	e0fe1617 	ldw	r3,-1960(fp)
   26b18:	e0be5317 	ldw	r2,-1716(fp)
   26b1c:	1880022e 	bgeu	r3,r2,26b28 <secp256k1_scalar_reduce_512+0x1094>
   26b20:	00c00044 	movi	r3,1
   26b24:	00000106 	br	26b2c <secp256k1_scalar_reduce_512+0x1098>
   26b28:	0007883a 	mov	r3,zero
   26b2c:	e0be5217 	ldw	r2,-1720(fp)
   26b30:	10c5883a 	add	r2,r2,r3
   26b34:	e0be5215 	stw	r2,-1720(fp)
   26b38:	e0fe1717 	ldw	r3,-1956(fp)
   26b3c:	e0be5217 	ldw	r2,-1720(fp)
   26b40:	1885883a 	add	r2,r3,r2
   26b44:	e0be1715 	stw	r2,-1956(fp)
   26b48:	e0fe1717 	ldw	r3,-1956(fp)
   26b4c:	e0be5217 	ldw	r2,-1720(fp)
   26b50:	1880022e 	bgeu	r3,r2,26b5c <secp256k1_scalar_reduce_512+0x10c8>
   26b54:	00c00044 	movi	r3,1
   26b58:	00000106 	br	26b60 <secp256k1_scalar_reduce_512+0x10cc>
   26b5c:	0007883a 	mov	r3,zero
   26b60:	e0be1817 	ldw	r2,-1952(fp)
   26b64:	10c5883a 	add	r2,r2,r3
   26b68:	e0be1815 	stw	r2,-1952(fp)
   26b6c:	e0fe1717 	ldw	r3,-1956(fp)
   26b70:	e0be5217 	ldw	r2,-1720(fp)
   26b74:	1885803a 	cmpltu	r2,r3,r2
   26b78:	10803fcc 	andi	r2,r2,255
   26b7c:	10001126 	beq	r2,zero,26bc4 <secp256k1_scalar_reduce_512+0x1130>
   26b80:	e0be1817 	ldw	r2,-1952(fp)
   26b84:	1005003a 	cmpeq	r2,r2,zero
   26b88:	10803fcc 	andi	r2,r2,255
   26b8c:	10000d26 	beq	r2,zero,26bc4 <secp256k1_scalar_reduce_512+0x1130>
   26b90:	d0a01617 	ldw	r2,-32680(gp)
   26b94:	10c00317 	ldw	r3,12(r2)
   26b98:	008001b4 	movhi	r2,6
   26b9c:	10b02604 	addi	r2,r2,-16232
   26ba0:	d8800015 	stw	r2,0(sp)
   26ba4:	01c05f44 	movi	r7,381
   26ba8:	018001b4 	movhi	r6,6
   26bac:	31af9204 	addi	r6,r6,-16824
   26bb0:	014001b4 	movhi	r5,6
   26bb4:	296b3804 	addi	r5,r5,-21280
   26bb8:	1809883a 	mov	r4,r3
   26bbc:	00452600 	call	45260 <fprintf>
   26bc0:	00450340 	call	45034 <abort>
    muladd(n1, SECP256K1_N_C_3);
   26bc4:	e0be0f17 	ldw	r2,-1988(fp)
   26bc8:	e0bf4215 	stw	r2,-760(fp)
   26bcc:	e03f4315 	stw	zero,-756(fp)
   26bd0:	01915474 	movhi	r6,17745
   26bd4:	3188c644 	addi	r6,r6,8985
   26bd8:	000f883a 	mov	r7,zero
   26bdc:	e13f4217 	ldw	r4,-760(fp)
   26be0:	e17f4317 	ldw	r5,-756(fp)
   26be4:	00429400 	call	42940 <__muldi3>
   26be8:	1009883a 	mov	r4,r2
   26bec:	180b883a 	mov	r5,r3
   26bf0:	e13e5415 	stw	r4,-1712(fp)
   26bf4:	e17e5515 	stw	r5,-1708(fp)
   26bf8:	e0be5517 	ldw	r2,-1708(fp)
   26bfc:	1004d83a 	srl	r2,r2,zero
   26c00:	e0bf4415 	stw	r2,-752(fp)
   26c04:	e03f4515 	stw	zero,-748(fp)
   26c08:	e0bf4417 	ldw	r2,-752(fp)
   26c0c:	e0be5615 	stw	r2,-1704(fp)
   26c10:	e0be5417 	ldw	r2,-1712(fp)
   26c14:	e0be5715 	stw	r2,-1700(fp)
   26c18:	e0fe1617 	ldw	r3,-1960(fp)
   26c1c:	e0be5717 	ldw	r2,-1700(fp)
   26c20:	1885883a 	add	r2,r3,r2
   26c24:	e0be1615 	stw	r2,-1960(fp)
   26c28:	e0fe1617 	ldw	r3,-1960(fp)
   26c2c:	e0be5717 	ldw	r2,-1700(fp)
   26c30:	1880022e 	bgeu	r3,r2,26c3c <secp256k1_scalar_reduce_512+0x11a8>
   26c34:	00c00044 	movi	r3,1
   26c38:	00000106 	br	26c40 <secp256k1_scalar_reduce_512+0x11ac>
   26c3c:	0007883a 	mov	r3,zero
   26c40:	e0be5617 	ldw	r2,-1704(fp)
   26c44:	10c5883a 	add	r2,r2,r3
   26c48:	e0be5615 	stw	r2,-1704(fp)
   26c4c:	e0fe1717 	ldw	r3,-1956(fp)
   26c50:	e0be5617 	ldw	r2,-1704(fp)
   26c54:	1885883a 	add	r2,r3,r2
   26c58:	e0be1715 	stw	r2,-1956(fp)
   26c5c:	e0fe1717 	ldw	r3,-1956(fp)
   26c60:	e0be5617 	ldw	r2,-1704(fp)
   26c64:	1880022e 	bgeu	r3,r2,26c70 <secp256k1_scalar_reduce_512+0x11dc>
   26c68:	00c00044 	movi	r3,1
   26c6c:	00000106 	br	26c74 <secp256k1_scalar_reduce_512+0x11e0>
   26c70:	0007883a 	mov	r3,zero
   26c74:	e0be1817 	ldw	r2,-1952(fp)
   26c78:	10c5883a 	add	r2,r2,r3
   26c7c:	e0be1815 	stw	r2,-1952(fp)
   26c80:	e0fe1717 	ldw	r3,-1956(fp)
   26c84:	e0be5617 	ldw	r2,-1704(fp)
   26c88:	1885803a 	cmpltu	r2,r3,r2
   26c8c:	10803fcc 	andi	r2,r2,255
   26c90:	10001126 	beq	r2,zero,26cd8 <secp256k1_scalar_reduce_512+0x1244>
   26c94:	e0be1817 	ldw	r2,-1952(fp)
   26c98:	1005003a 	cmpeq	r2,r2,zero
   26c9c:	10803fcc 	andi	r2,r2,255
   26ca0:	10000d26 	beq	r2,zero,26cd8 <secp256k1_scalar_reduce_512+0x1244>
   26ca4:	d0a01617 	ldw	r2,-32680(gp)
   26ca8:	10c00317 	ldw	r3,12(r2)
   26cac:	008001b4 	movhi	r2,6
   26cb0:	10b02604 	addi	r2,r2,-16232
   26cb4:	d8800015 	stw	r2,0(sp)
   26cb8:	01c05f84 	movi	r7,382
   26cbc:	018001b4 	movhi	r6,6
   26cc0:	31af9204 	addi	r6,r6,-16824
   26cc4:	014001b4 	movhi	r5,6
   26cc8:	296b3804 	addi	r5,r5,-21280
   26ccc:	1809883a 	mov	r4,r3
   26cd0:	00452600 	call	45260 <fprintf>
   26cd4:	00450340 	call	45034 <abort>
    sumadd(n0);
   26cd8:	e0fe1617 	ldw	r3,-1960(fp)
   26cdc:	e0be0e17 	ldw	r2,-1992(fp)
   26ce0:	1885883a 	add	r2,r3,r2
   26ce4:	e0be1615 	stw	r2,-1960(fp)
   26ce8:	e0fe1617 	ldw	r3,-1960(fp)
   26cec:	e0be0e17 	ldw	r2,-1992(fp)
   26cf0:	1885803a 	cmpltu	r2,r3,r2
   26cf4:	10803fcc 	andi	r2,r2,255
   26cf8:	e0be5815 	stw	r2,-1696(fp)
   26cfc:	e0fe1717 	ldw	r3,-1956(fp)
   26d00:	e0be5817 	ldw	r2,-1696(fp)
   26d04:	1885883a 	add	r2,r3,r2
   26d08:	e0be1715 	stw	r2,-1956(fp)
   26d0c:	e0fe1717 	ldw	r3,-1956(fp)
   26d10:	e0be5817 	ldw	r2,-1696(fp)
   26d14:	1880022e 	bgeu	r3,r2,26d20 <secp256k1_scalar_reduce_512+0x128c>
   26d18:	00c00044 	movi	r3,1
   26d1c:	00000106 	br	26d24 <secp256k1_scalar_reduce_512+0x1290>
   26d20:	0007883a 	mov	r3,zero
   26d24:	e0be1817 	ldw	r2,-1952(fp)
   26d28:	10c5883a 	add	r2,r2,r3
   26d2c:	e0be1815 	stw	r2,-1952(fp)
    extract(m4);
   26d30:	e0be1617 	ldw	r2,-1960(fp)
   26d34:	e0be5915 	stw	r2,-1692(fp)
   26d38:	e0be1717 	ldw	r2,-1956(fp)
   26d3c:	e0be1615 	stw	r2,-1960(fp)
   26d40:	e0be1817 	ldw	r2,-1952(fp)
   26d44:	e0be1715 	stw	r2,-1956(fp)
   26d48:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[5]);
   26d4c:	e0bf1717 	ldw	r2,-932(fp)
   26d50:	10800504 	addi	r2,r2,20
   26d54:	10c00017 	ldw	r3,0(r2)
   26d58:	e0be1617 	ldw	r2,-1960(fp)
   26d5c:	10c5883a 	add	r2,r2,r3
   26d60:	e0be1615 	stw	r2,-1960(fp)
   26d64:	e0bf1717 	ldw	r2,-932(fp)
   26d68:	10800504 	addi	r2,r2,20
   26d6c:	10c00017 	ldw	r3,0(r2)
   26d70:	e0be1617 	ldw	r2,-1960(fp)
   26d74:	10c5803a 	cmpltu	r2,r2,r3
   26d78:	10803fcc 	andi	r2,r2,255
   26d7c:	e0be5a15 	stw	r2,-1688(fp)
   26d80:	e0fe1717 	ldw	r3,-1956(fp)
   26d84:	e0be5a17 	ldw	r2,-1688(fp)
   26d88:	1885883a 	add	r2,r3,r2
   26d8c:	e0be1715 	stw	r2,-1956(fp)
   26d90:	e0fe1717 	ldw	r3,-1956(fp)
   26d94:	e0be5a17 	ldw	r2,-1688(fp)
   26d98:	1880022e 	bgeu	r3,r2,26da4 <secp256k1_scalar_reduce_512+0x1310>
   26d9c:	00c00044 	movi	r3,1
   26da0:	00000106 	br	26da8 <secp256k1_scalar_reduce_512+0x1314>
   26da4:	0007883a 	mov	r3,zero
   26da8:	e0be1817 	ldw	r2,-1952(fp)
   26dac:	10c5883a 	add	r2,r2,r3
   26db0:	e0be1815 	stw	r2,-1952(fp)
    muladd(n5, SECP256K1_N_C_0);
   26db4:	e0be1317 	ldw	r2,-1972(fp)
   26db8:	e0bf4615 	stw	r2,-744(fp)
   26dbc:	e03f4715 	stw	zero,-740(fp)
   26dc0:	018bf2b4 	movhi	r6,12234
   26dc4:	31afafc4 	addi	r6,r6,-16705
   26dc8:	000f883a 	mov	r7,zero
   26dcc:	e13f4617 	ldw	r4,-744(fp)
   26dd0:	e17f4717 	ldw	r5,-740(fp)
   26dd4:	00429400 	call	42940 <__muldi3>
   26dd8:	1009883a 	mov	r4,r2
   26ddc:	180b883a 	mov	r5,r3
   26de0:	e13e5b15 	stw	r4,-1684(fp)
   26de4:	e17e5c15 	stw	r5,-1680(fp)
   26de8:	e0be5c17 	ldw	r2,-1680(fp)
   26dec:	1004d83a 	srl	r2,r2,zero
   26df0:	e0bf4815 	stw	r2,-736(fp)
   26df4:	e03f4915 	stw	zero,-732(fp)
   26df8:	e13f4817 	ldw	r4,-736(fp)
   26dfc:	e13e5d15 	stw	r4,-1676(fp)
   26e00:	e0be5b17 	ldw	r2,-1684(fp)
   26e04:	e0be5e15 	stw	r2,-1672(fp)
   26e08:	e0fe1617 	ldw	r3,-1960(fp)
   26e0c:	e0be5e17 	ldw	r2,-1672(fp)
   26e10:	1885883a 	add	r2,r3,r2
   26e14:	e0be1615 	stw	r2,-1960(fp)
   26e18:	e0fe1617 	ldw	r3,-1960(fp)
   26e1c:	e0be5e17 	ldw	r2,-1672(fp)
   26e20:	1880022e 	bgeu	r3,r2,26e2c <secp256k1_scalar_reduce_512+0x1398>
   26e24:	00c00044 	movi	r3,1
   26e28:	00000106 	br	26e30 <secp256k1_scalar_reduce_512+0x139c>
   26e2c:	0007883a 	mov	r3,zero
   26e30:	e0be5d17 	ldw	r2,-1676(fp)
   26e34:	10c5883a 	add	r2,r2,r3
   26e38:	e0be5d15 	stw	r2,-1676(fp)
   26e3c:	e0fe1717 	ldw	r3,-1956(fp)
   26e40:	e0be5d17 	ldw	r2,-1676(fp)
   26e44:	1885883a 	add	r2,r3,r2
   26e48:	e0be1715 	stw	r2,-1956(fp)
   26e4c:	e0fe1717 	ldw	r3,-1956(fp)
   26e50:	e0be5d17 	ldw	r2,-1676(fp)
   26e54:	1880022e 	bgeu	r3,r2,26e60 <secp256k1_scalar_reduce_512+0x13cc>
   26e58:	00c00044 	movi	r3,1
   26e5c:	00000106 	br	26e64 <secp256k1_scalar_reduce_512+0x13d0>
   26e60:	0007883a 	mov	r3,zero
   26e64:	e0be1817 	ldw	r2,-1952(fp)
   26e68:	10c5883a 	add	r2,r2,r3
   26e6c:	e0be1815 	stw	r2,-1952(fp)
   26e70:	e0fe1717 	ldw	r3,-1956(fp)
   26e74:	e0be5d17 	ldw	r2,-1676(fp)
   26e78:	1885803a 	cmpltu	r2,r3,r2
   26e7c:	10803fcc 	andi	r2,r2,255
   26e80:	10001126 	beq	r2,zero,26ec8 <secp256k1_scalar_reduce_512+0x1434>
   26e84:	e0be1817 	ldw	r2,-1952(fp)
   26e88:	1005003a 	cmpeq	r2,r2,zero
   26e8c:	10803fcc 	andi	r2,r2,255
   26e90:	10000d26 	beq	r2,zero,26ec8 <secp256k1_scalar_reduce_512+0x1434>
   26e94:	d0a01617 	ldw	r2,-32680(gp)
   26e98:	10c00317 	ldw	r3,12(r2)
   26e9c:	008001b4 	movhi	r2,6
   26ea0:	10b02604 	addi	r2,r2,-16232
   26ea4:	d8800015 	stw	r2,0(sp)
   26ea8:	01c06084 	movi	r7,386
   26eac:	018001b4 	movhi	r6,6
   26eb0:	31af9204 	addi	r6,r6,-16824
   26eb4:	014001b4 	movhi	r5,6
   26eb8:	296b3804 	addi	r5,r5,-21280
   26ebc:	1809883a 	mov	r4,r3
   26ec0:	00452600 	call	45260 <fprintf>
   26ec4:	00450340 	call	45034 <abort>
    muladd(n4, SECP256K1_N_C_1);
   26ec8:	e0be1217 	ldw	r2,-1976(fp)
   26ecc:	e0bf4a15 	stw	r2,-728(fp)
   26ed0:	e03f4b15 	stw	zero,-724(fp)
   26ed4:	01900bb4 	movhi	r6,16430
   26ed8:	31a85cc4 	addi	r6,r6,-24205
   26edc:	000f883a 	mov	r7,zero
   26ee0:	e13f4a17 	ldw	r4,-728(fp)
   26ee4:	e17f4b17 	ldw	r5,-724(fp)
   26ee8:	00429400 	call	42940 <__muldi3>
   26eec:	1009883a 	mov	r4,r2
   26ef0:	180b883a 	mov	r5,r3
   26ef4:	e13e5f15 	stw	r4,-1668(fp)
   26ef8:	e17e6015 	stw	r5,-1664(fp)
   26efc:	e0be6017 	ldw	r2,-1664(fp)
   26f00:	1004d83a 	srl	r2,r2,zero
   26f04:	e0bf4c15 	stw	r2,-720(fp)
   26f08:	e03f4d15 	stw	zero,-716(fp)
   26f0c:	e17f4c17 	ldw	r5,-720(fp)
   26f10:	e17e6115 	stw	r5,-1660(fp)
   26f14:	e0be5f17 	ldw	r2,-1668(fp)
   26f18:	e0be6215 	stw	r2,-1656(fp)
   26f1c:	e0fe1617 	ldw	r3,-1960(fp)
   26f20:	e0be6217 	ldw	r2,-1656(fp)
   26f24:	1885883a 	add	r2,r3,r2
   26f28:	e0be1615 	stw	r2,-1960(fp)
   26f2c:	e0fe1617 	ldw	r3,-1960(fp)
   26f30:	e0be6217 	ldw	r2,-1656(fp)
   26f34:	1880022e 	bgeu	r3,r2,26f40 <secp256k1_scalar_reduce_512+0x14ac>
   26f38:	00c00044 	movi	r3,1
   26f3c:	00000106 	br	26f44 <secp256k1_scalar_reduce_512+0x14b0>
   26f40:	0007883a 	mov	r3,zero
   26f44:	e0be6117 	ldw	r2,-1660(fp)
   26f48:	10c5883a 	add	r2,r2,r3
   26f4c:	e0be6115 	stw	r2,-1660(fp)
   26f50:	e0fe1717 	ldw	r3,-1956(fp)
   26f54:	e0be6117 	ldw	r2,-1660(fp)
   26f58:	1885883a 	add	r2,r3,r2
   26f5c:	e0be1715 	stw	r2,-1956(fp)
   26f60:	e0fe1717 	ldw	r3,-1956(fp)
   26f64:	e0be6117 	ldw	r2,-1660(fp)
   26f68:	1880022e 	bgeu	r3,r2,26f74 <secp256k1_scalar_reduce_512+0x14e0>
   26f6c:	00c00044 	movi	r3,1
   26f70:	00000106 	br	26f78 <secp256k1_scalar_reduce_512+0x14e4>
   26f74:	0007883a 	mov	r3,zero
   26f78:	e0be1817 	ldw	r2,-1952(fp)
   26f7c:	10c5883a 	add	r2,r2,r3
   26f80:	e0be1815 	stw	r2,-1952(fp)
   26f84:	e0fe1717 	ldw	r3,-1956(fp)
   26f88:	e0be6117 	ldw	r2,-1660(fp)
   26f8c:	1885803a 	cmpltu	r2,r3,r2
   26f90:	10803fcc 	andi	r2,r2,255
   26f94:	10001126 	beq	r2,zero,26fdc <secp256k1_scalar_reduce_512+0x1548>
   26f98:	e0be1817 	ldw	r2,-1952(fp)
   26f9c:	1005003a 	cmpeq	r2,r2,zero
   26fa0:	10803fcc 	andi	r2,r2,255
   26fa4:	10000d26 	beq	r2,zero,26fdc <secp256k1_scalar_reduce_512+0x1548>
   26fa8:	d0a01617 	ldw	r2,-32680(gp)
   26fac:	10c00317 	ldw	r3,12(r2)
   26fb0:	008001b4 	movhi	r2,6
   26fb4:	10b02604 	addi	r2,r2,-16232
   26fb8:	d8800015 	stw	r2,0(sp)
   26fbc:	01c060c4 	movi	r7,387
   26fc0:	018001b4 	movhi	r6,6
   26fc4:	31af9204 	addi	r6,r6,-16824
   26fc8:	014001b4 	movhi	r5,6
   26fcc:	296b3804 	addi	r5,r5,-21280
   26fd0:	1809883a 	mov	r4,r3
   26fd4:	00452600 	call	45260 <fprintf>
   26fd8:	00450340 	call	45034 <abort>
    muladd(n3, SECP256K1_N_C_2);
   26fdc:	e0be1117 	ldw	r2,-1980(fp)
   26fe0:	e0bf4e15 	stw	r2,-712(fp)
   26fe4:	e03f4f15 	stw	zero,-708(fp)
   26fe8:	01942df4 	movhi	r6,20663
   26fec:	3197f104 	addi	r6,r6,24516
   26ff0:	000f883a 	mov	r7,zero
   26ff4:	e13f4e17 	ldw	r4,-712(fp)
   26ff8:	e17f4f17 	ldw	r5,-708(fp)
   26ffc:	00429400 	call	42940 <__muldi3>
   27000:	1009883a 	mov	r4,r2
   27004:	180b883a 	mov	r5,r3
   27008:	e13e6315 	stw	r4,-1652(fp)
   2700c:	e17e6415 	stw	r5,-1648(fp)
   27010:	e0be6417 	ldw	r2,-1648(fp)
   27014:	1004d83a 	srl	r2,r2,zero
   27018:	e0bf5015 	stw	r2,-704(fp)
   2701c:	e03f5115 	stw	zero,-700(fp)
   27020:	e1bf5017 	ldw	r6,-704(fp)
   27024:	e1be6515 	stw	r6,-1644(fp)
   27028:	e0be6317 	ldw	r2,-1652(fp)
   2702c:	e0be6615 	stw	r2,-1640(fp)
   27030:	e0fe1617 	ldw	r3,-1960(fp)
   27034:	e0be6617 	ldw	r2,-1640(fp)
   27038:	1885883a 	add	r2,r3,r2
   2703c:	e0be1615 	stw	r2,-1960(fp)
   27040:	e0fe1617 	ldw	r3,-1960(fp)
   27044:	e0be6617 	ldw	r2,-1640(fp)
   27048:	1880022e 	bgeu	r3,r2,27054 <secp256k1_scalar_reduce_512+0x15c0>
   2704c:	00c00044 	movi	r3,1
   27050:	00000106 	br	27058 <secp256k1_scalar_reduce_512+0x15c4>
   27054:	0007883a 	mov	r3,zero
   27058:	e0be6517 	ldw	r2,-1644(fp)
   2705c:	10c5883a 	add	r2,r2,r3
   27060:	e0be6515 	stw	r2,-1644(fp)
   27064:	e0fe1717 	ldw	r3,-1956(fp)
   27068:	e0be6517 	ldw	r2,-1644(fp)
   2706c:	1885883a 	add	r2,r3,r2
   27070:	e0be1715 	stw	r2,-1956(fp)
   27074:	e0fe1717 	ldw	r3,-1956(fp)
   27078:	e0be6517 	ldw	r2,-1644(fp)
   2707c:	1880022e 	bgeu	r3,r2,27088 <secp256k1_scalar_reduce_512+0x15f4>
   27080:	00c00044 	movi	r3,1
   27084:	00000106 	br	2708c <secp256k1_scalar_reduce_512+0x15f8>
   27088:	0007883a 	mov	r3,zero
   2708c:	e0be1817 	ldw	r2,-1952(fp)
   27090:	10c5883a 	add	r2,r2,r3
   27094:	e0be1815 	stw	r2,-1952(fp)
   27098:	e0fe1717 	ldw	r3,-1956(fp)
   2709c:	e0be6517 	ldw	r2,-1644(fp)
   270a0:	1885803a 	cmpltu	r2,r3,r2
   270a4:	10803fcc 	andi	r2,r2,255
   270a8:	10001126 	beq	r2,zero,270f0 <secp256k1_scalar_reduce_512+0x165c>
   270ac:	e0be1817 	ldw	r2,-1952(fp)
   270b0:	1005003a 	cmpeq	r2,r2,zero
   270b4:	10803fcc 	andi	r2,r2,255
   270b8:	10000d26 	beq	r2,zero,270f0 <secp256k1_scalar_reduce_512+0x165c>
   270bc:	d0a01617 	ldw	r2,-32680(gp)
   270c0:	10c00317 	ldw	r3,12(r2)
   270c4:	008001b4 	movhi	r2,6
   270c8:	10b02604 	addi	r2,r2,-16232
   270cc:	d8800015 	stw	r2,0(sp)
   270d0:	01c06104 	movi	r7,388
   270d4:	018001b4 	movhi	r6,6
   270d8:	31af9204 	addi	r6,r6,-16824
   270dc:	014001b4 	movhi	r5,6
   270e0:	296b3804 	addi	r5,r5,-21280
   270e4:	1809883a 	mov	r4,r3
   270e8:	00452600 	call	45260 <fprintf>
   270ec:	00450340 	call	45034 <abort>
    muladd(n2, SECP256K1_N_C_3);
   270f0:	e0be1017 	ldw	r2,-1984(fp)
   270f4:	e0bf5215 	stw	r2,-696(fp)
   270f8:	e03f5315 	stw	zero,-692(fp)
   270fc:	01915474 	movhi	r6,17745
   27100:	3188c644 	addi	r6,r6,8985
   27104:	000f883a 	mov	r7,zero
   27108:	e13f5217 	ldw	r4,-696(fp)
   2710c:	e17f5317 	ldw	r5,-692(fp)
   27110:	00429400 	call	42940 <__muldi3>
   27114:	1009883a 	mov	r4,r2
   27118:	180b883a 	mov	r5,r3
   2711c:	e13e6715 	stw	r4,-1636(fp)
   27120:	e17e6815 	stw	r5,-1632(fp)
   27124:	e0be6817 	ldw	r2,-1632(fp)
   27128:	1004d83a 	srl	r2,r2,zero
   2712c:	e0bf5415 	stw	r2,-688(fp)
   27130:	e03f5515 	stw	zero,-684(fp)
   27134:	e1ff5417 	ldw	r7,-688(fp)
   27138:	e1fe6915 	stw	r7,-1628(fp)
   2713c:	e0be6717 	ldw	r2,-1636(fp)
   27140:	e0be6a15 	stw	r2,-1624(fp)
   27144:	e0fe1617 	ldw	r3,-1960(fp)
   27148:	e0be6a17 	ldw	r2,-1624(fp)
   2714c:	1885883a 	add	r2,r3,r2
   27150:	e0be1615 	stw	r2,-1960(fp)
   27154:	e0fe1617 	ldw	r3,-1960(fp)
   27158:	e0be6a17 	ldw	r2,-1624(fp)
   2715c:	1880022e 	bgeu	r3,r2,27168 <secp256k1_scalar_reduce_512+0x16d4>
   27160:	00c00044 	movi	r3,1
   27164:	00000106 	br	2716c <secp256k1_scalar_reduce_512+0x16d8>
   27168:	0007883a 	mov	r3,zero
   2716c:	e0be6917 	ldw	r2,-1628(fp)
   27170:	10c5883a 	add	r2,r2,r3
   27174:	e0be6915 	stw	r2,-1628(fp)
   27178:	e0fe1717 	ldw	r3,-1956(fp)
   2717c:	e0be6917 	ldw	r2,-1628(fp)
   27180:	1885883a 	add	r2,r3,r2
   27184:	e0be1715 	stw	r2,-1956(fp)
   27188:	e0fe1717 	ldw	r3,-1956(fp)
   2718c:	e0be6917 	ldw	r2,-1628(fp)
   27190:	1880022e 	bgeu	r3,r2,2719c <secp256k1_scalar_reduce_512+0x1708>
   27194:	00c00044 	movi	r3,1
   27198:	00000106 	br	271a0 <secp256k1_scalar_reduce_512+0x170c>
   2719c:	0007883a 	mov	r3,zero
   271a0:	e0be1817 	ldw	r2,-1952(fp)
   271a4:	10c5883a 	add	r2,r2,r3
   271a8:	e0be1815 	stw	r2,-1952(fp)
   271ac:	e0fe1717 	ldw	r3,-1956(fp)
   271b0:	e0be6917 	ldw	r2,-1628(fp)
   271b4:	1885803a 	cmpltu	r2,r3,r2
   271b8:	10803fcc 	andi	r2,r2,255
   271bc:	10001126 	beq	r2,zero,27204 <secp256k1_scalar_reduce_512+0x1770>
   271c0:	e0be1817 	ldw	r2,-1952(fp)
   271c4:	1005003a 	cmpeq	r2,r2,zero
   271c8:	10803fcc 	andi	r2,r2,255
   271cc:	10000d26 	beq	r2,zero,27204 <secp256k1_scalar_reduce_512+0x1770>
   271d0:	d0a01617 	ldw	r2,-32680(gp)
   271d4:	10c00317 	ldw	r3,12(r2)
   271d8:	008001b4 	movhi	r2,6
   271dc:	10b02604 	addi	r2,r2,-16232
   271e0:	d8800015 	stw	r2,0(sp)
   271e4:	01c06144 	movi	r7,389
   271e8:	018001b4 	movhi	r6,6
   271ec:	31af9204 	addi	r6,r6,-16824
   271f0:	014001b4 	movhi	r5,6
   271f4:	296b3804 	addi	r5,r5,-21280
   271f8:	1809883a 	mov	r4,r3
   271fc:	00452600 	call	45260 <fprintf>
   27200:	00450340 	call	45034 <abort>
    sumadd(n1);
   27204:	e0fe1617 	ldw	r3,-1960(fp)
   27208:	e0be0f17 	ldw	r2,-1988(fp)
   2720c:	1885883a 	add	r2,r3,r2
   27210:	e0be1615 	stw	r2,-1960(fp)
   27214:	e0fe1617 	ldw	r3,-1960(fp)
   27218:	e0be0f17 	ldw	r2,-1988(fp)
   2721c:	1885803a 	cmpltu	r2,r3,r2
   27220:	10803fcc 	andi	r2,r2,255
   27224:	e0be6b15 	stw	r2,-1620(fp)
   27228:	e0fe1717 	ldw	r3,-1956(fp)
   2722c:	e0be6b17 	ldw	r2,-1620(fp)
   27230:	1885883a 	add	r2,r3,r2
   27234:	e0be1715 	stw	r2,-1956(fp)
   27238:	e0fe1717 	ldw	r3,-1956(fp)
   2723c:	e0be6b17 	ldw	r2,-1620(fp)
   27240:	1880022e 	bgeu	r3,r2,2724c <secp256k1_scalar_reduce_512+0x17b8>
   27244:	00c00044 	movi	r3,1
   27248:	00000106 	br	27250 <secp256k1_scalar_reduce_512+0x17bc>
   2724c:	0007883a 	mov	r3,zero
   27250:	e0be1817 	ldw	r2,-1952(fp)
   27254:	10c5883a 	add	r2,r2,r3
   27258:	e0be1815 	stw	r2,-1952(fp)
    extract(m5);
   2725c:	e0be1617 	ldw	r2,-1960(fp)
   27260:	e0be6c15 	stw	r2,-1616(fp)
   27264:	e0be1717 	ldw	r2,-1956(fp)
   27268:	e0be1615 	stw	r2,-1960(fp)
   2726c:	e0be1817 	ldw	r2,-1952(fp)
   27270:	e0be1715 	stw	r2,-1956(fp)
   27274:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[6]);
   27278:	e0bf1717 	ldw	r2,-932(fp)
   2727c:	10800604 	addi	r2,r2,24
   27280:	10c00017 	ldw	r3,0(r2)
   27284:	e0be1617 	ldw	r2,-1960(fp)
   27288:	10c5883a 	add	r2,r2,r3
   2728c:	e0be1615 	stw	r2,-1960(fp)
   27290:	e0bf1717 	ldw	r2,-932(fp)
   27294:	10800604 	addi	r2,r2,24
   27298:	10c00017 	ldw	r3,0(r2)
   2729c:	e0be1617 	ldw	r2,-1960(fp)
   272a0:	10c5803a 	cmpltu	r2,r2,r3
   272a4:	10803fcc 	andi	r2,r2,255
   272a8:	e0be6d15 	stw	r2,-1612(fp)
   272ac:	e0fe1717 	ldw	r3,-1956(fp)
   272b0:	e0be6d17 	ldw	r2,-1612(fp)
   272b4:	1885883a 	add	r2,r3,r2
   272b8:	e0be1715 	stw	r2,-1956(fp)
   272bc:	e0fe1717 	ldw	r3,-1956(fp)
   272c0:	e0be6d17 	ldw	r2,-1612(fp)
   272c4:	1880022e 	bgeu	r3,r2,272d0 <secp256k1_scalar_reduce_512+0x183c>
   272c8:	00c00044 	movi	r3,1
   272cc:	00000106 	br	272d4 <secp256k1_scalar_reduce_512+0x1840>
   272d0:	0007883a 	mov	r3,zero
   272d4:	e0be1817 	ldw	r2,-1952(fp)
   272d8:	10c5883a 	add	r2,r2,r3
   272dc:	e0be1815 	stw	r2,-1952(fp)
    muladd(n6, SECP256K1_N_C_0);
   272e0:	e0be1417 	ldw	r2,-1968(fp)
   272e4:	e0bf5615 	stw	r2,-680(fp)
   272e8:	e03f5715 	stw	zero,-676(fp)
   272ec:	018bf2b4 	movhi	r6,12234
   272f0:	31afafc4 	addi	r6,r6,-16705
   272f4:	000f883a 	mov	r7,zero
   272f8:	e13f5617 	ldw	r4,-680(fp)
   272fc:	e17f5717 	ldw	r5,-676(fp)
   27300:	00429400 	call	42940 <__muldi3>
   27304:	1009883a 	mov	r4,r2
   27308:	180b883a 	mov	r5,r3
   2730c:	e13e6e15 	stw	r4,-1608(fp)
   27310:	e17e6f15 	stw	r5,-1604(fp)
   27314:	e0be6f17 	ldw	r2,-1604(fp)
   27318:	1004d83a 	srl	r2,r2,zero
   2731c:	e0bf5815 	stw	r2,-672(fp)
   27320:	e03f5915 	stw	zero,-668(fp)
   27324:	e0bf5817 	ldw	r2,-672(fp)
   27328:	e0be7015 	stw	r2,-1600(fp)
   2732c:	e0be6e17 	ldw	r2,-1608(fp)
   27330:	e0be7115 	stw	r2,-1596(fp)
   27334:	e0fe1617 	ldw	r3,-1960(fp)
   27338:	e0be7117 	ldw	r2,-1596(fp)
   2733c:	1885883a 	add	r2,r3,r2
   27340:	e0be1615 	stw	r2,-1960(fp)
   27344:	e0fe1617 	ldw	r3,-1960(fp)
   27348:	e0be7117 	ldw	r2,-1596(fp)
   2734c:	1880022e 	bgeu	r3,r2,27358 <secp256k1_scalar_reduce_512+0x18c4>
   27350:	00c00044 	movi	r3,1
   27354:	00000106 	br	2735c <secp256k1_scalar_reduce_512+0x18c8>
   27358:	0007883a 	mov	r3,zero
   2735c:	e0be7017 	ldw	r2,-1600(fp)
   27360:	10c5883a 	add	r2,r2,r3
   27364:	e0be7015 	stw	r2,-1600(fp)
   27368:	e0fe1717 	ldw	r3,-1956(fp)
   2736c:	e0be7017 	ldw	r2,-1600(fp)
   27370:	1885883a 	add	r2,r3,r2
   27374:	e0be1715 	stw	r2,-1956(fp)
   27378:	e0fe1717 	ldw	r3,-1956(fp)
   2737c:	e0be7017 	ldw	r2,-1600(fp)
   27380:	1880022e 	bgeu	r3,r2,2738c <secp256k1_scalar_reduce_512+0x18f8>
   27384:	00c00044 	movi	r3,1
   27388:	00000106 	br	27390 <secp256k1_scalar_reduce_512+0x18fc>
   2738c:	0007883a 	mov	r3,zero
   27390:	e0be1817 	ldw	r2,-1952(fp)
   27394:	10c5883a 	add	r2,r2,r3
   27398:	e0be1815 	stw	r2,-1952(fp)
   2739c:	e0fe1717 	ldw	r3,-1956(fp)
   273a0:	e0be7017 	ldw	r2,-1600(fp)
   273a4:	1885803a 	cmpltu	r2,r3,r2
   273a8:	10803fcc 	andi	r2,r2,255
   273ac:	10001126 	beq	r2,zero,273f4 <secp256k1_scalar_reduce_512+0x1960>
   273b0:	e0be1817 	ldw	r2,-1952(fp)
   273b4:	1005003a 	cmpeq	r2,r2,zero
   273b8:	10803fcc 	andi	r2,r2,255
   273bc:	10000d26 	beq	r2,zero,273f4 <secp256k1_scalar_reduce_512+0x1960>
   273c0:	d0a01617 	ldw	r2,-32680(gp)
   273c4:	10c00317 	ldw	r3,12(r2)
   273c8:	008001b4 	movhi	r2,6
   273cc:	10b02604 	addi	r2,r2,-16232
   273d0:	d8800015 	stw	r2,0(sp)
   273d4:	01c06244 	movi	r7,393
   273d8:	018001b4 	movhi	r6,6
   273dc:	31af9204 	addi	r6,r6,-16824
   273e0:	014001b4 	movhi	r5,6
   273e4:	296b3804 	addi	r5,r5,-21280
   273e8:	1809883a 	mov	r4,r3
   273ec:	00452600 	call	45260 <fprintf>
   273f0:	00450340 	call	45034 <abort>
    muladd(n5, SECP256K1_N_C_1);
   273f4:	e0be1317 	ldw	r2,-1972(fp)
   273f8:	e0bf5a15 	stw	r2,-664(fp)
   273fc:	e03f5b15 	stw	zero,-660(fp)
   27400:	01900bb4 	movhi	r6,16430
   27404:	31a85cc4 	addi	r6,r6,-24205
   27408:	000f883a 	mov	r7,zero
   2740c:	e13f5a17 	ldw	r4,-664(fp)
   27410:	e17f5b17 	ldw	r5,-660(fp)
   27414:	00429400 	call	42940 <__muldi3>
   27418:	1009883a 	mov	r4,r2
   2741c:	180b883a 	mov	r5,r3
   27420:	e13e7215 	stw	r4,-1592(fp)
   27424:	e17e7315 	stw	r5,-1588(fp)
   27428:	e0be7317 	ldw	r2,-1588(fp)
   2742c:	1004d83a 	srl	r2,r2,zero
   27430:	e0bf5c15 	stw	r2,-656(fp)
   27434:	e03f5d15 	stw	zero,-652(fp)
   27438:	e13f5c17 	ldw	r4,-656(fp)
   2743c:	e13e7415 	stw	r4,-1584(fp)
   27440:	e0be7217 	ldw	r2,-1592(fp)
   27444:	e0be7515 	stw	r2,-1580(fp)
   27448:	e0fe1617 	ldw	r3,-1960(fp)
   2744c:	e0be7517 	ldw	r2,-1580(fp)
   27450:	1885883a 	add	r2,r3,r2
   27454:	e0be1615 	stw	r2,-1960(fp)
   27458:	e0fe1617 	ldw	r3,-1960(fp)
   2745c:	e0be7517 	ldw	r2,-1580(fp)
   27460:	1880022e 	bgeu	r3,r2,2746c <secp256k1_scalar_reduce_512+0x19d8>
   27464:	00c00044 	movi	r3,1
   27468:	00000106 	br	27470 <secp256k1_scalar_reduce_512+0x19dc>
   2746c:	0007883a 	mov	r3,zero
   27470:	e0be7417 	ldw	r2,-1584(fp)
   27474:	10c5883a 	add	r2,r2,r3
   27478:	e0be7415 	stw	r2,-1584(fp)
   2747c:	e0fe1717 	ldw	r3,-1956(fp)
   27480:	e0be7417 	ldw	r2,-1584(fp)
   27484:	1885883a 	add	r2,r3,r2
   27488:	e0be1715 	stw	r2,-1956(fp)
   2748c:	e0fe1717 	ldw	r3,-1956(fp)
   27490:	e0be7417 	ldw	r2,-1584(fp)
   27494:	1880022e 	bgeu	r3,r2,274a0 <secp256k1_scalar_reduce_512+0x1a0c>
   27498:	00c00044 	movi	r3,1
   2749c:	00000106 	br	274a4 <secp256k1_scalar_reduce_512+0x1a10>
   274a0:	0007883a 	mov	r3,zero
   274a4:	e0be1817 	ldw	r2,-1952(fp)
   274a8:	10c5883a 	add	r2,r2,r3
   274ac:	e0be1815 	stw	r2,-1952(fp)
   274b0:	e0fe1717 	ldw	r3,-1956(fp)
   274b4:	e0be7417 	ldw	r2,-1584(fp)
   274b8:	1885803a 	cmpltu	r2,r3,r2
   274bc:	10803fcc 	andi	r2,r2,255
   274c0:	10001126 	beq	r2,zero,27508 <secp256k1_scalar_reduce_512+0x1a74>
   274c4:	e0be1817 	ldw	r2,-1952(fp)
   274c8:	1005003a 	cmpeq	r2,r2,zero
   274cc:	10803fcc 	andi	r2,r2,255
   274d0:	10000d26 	beq	r2,zero,27508 <secp256k1_scalar_reduce_512+0x1a74>
   274d4:	d0a01617 	ldw	r2,-32680(gp)
   274d8:	10c00317 	ldw	r3,12(r2)
   274dc:	008001b4 	movhi	r2,6
   274e0:	10b02604 	addi	r2,r2,-16232
   274e4:	d8800015 	stw	r2,0(sp)
   274e8:	01c06284 	movi	r7,394
   274ec:	018001b4 	movhi	r6,6
   274f0:	31af9204 	addi	r6,r6,-16824
   274f4:	014001b4 	movhi	r5,6
   274f8:	296b3804 	addi	r5,r5,-21280
   274fc:	1809883a 	mov	r4,r3
   27500:	00452600 	call	45260 <fprintf>
   27504:	00450340 	call	45034 <abort>
    muladd(n4, SECP256K1_N_C_2);
   27508:	e0be1217 	ldw	r2,-1976(fp)
   2750c:	e0bf5e15 	stw	r2,-648(fp)
   27510:	e03f5f15 	stw	zero,-644(fp)
   27514:	01942df4 	movhi	r6,20663
   27518:	3197f104 	addi	r6,r6,24516
   2751c:	000f883a 	mov	r7,zero
   27520:	e13f5e17 	ldw	r4,-648(fp)
   27524:	e17f5f17 	ldw	r5,-644(fp)
   27528:	00429400 	call	42940 <__muldi3>
   2752c:	1009883a 	mov	r4,r2
   27530:	180b883a 	mov	r5,r3
   27534:	e13e7615 	stw	r4,-1576(fp)
   27538:	e17e7715 	stw	r5,-1572(fp)
   2753c:	e0be7717 	ldw	r2,-1572(fp)
   27540:	1004d83a 	srl	r2,r2,zero
   27544:	e0bf6015 	stw	r2,-640(fp)
   27548:	e03f6115 	stw	zero,-636(fp)
   2754c:	e17f6017 	ldw	r5,-640(fp)
   27550:	e17e7815 	stw	r5,-1568(fp)
   27554:	e0be7617 	ldw	r2,-1576(fp)
   27558:	e0be7915 	stw	r2,-1564(fp)
   2755c:	e0fe1617 	ldw	r3,-1960(fp)
   27560:	e0be7917 	ldw	r2,-1564(fp)
   27564:	1885883a 	add	r2,r3,r2
   27568:	e0be1615 	stw	r2,-1960(fp)
   2756c:	e0fe1617 	ldw	r3,-1960(fp)
   27570:	e0be7917 	ldw	r2,-1564(fp)
   27574:	1880022e 	bgeu	r3,r2,27580 <secp256k1_scalar_reduce_512+0x1aec>
   27578:	00c00044 	movi	r3,1
   2757c:	00000106 	br	27584 <secp256k1_scalar_reduce_512+0x1af0>
   27580:	0007883a 	mov	r3,zero
   27584:	e0be7817 	ldw	r2,-1568(fp)
   27588:	10c5883a 	add	r2,r2,r3
   2758c:	e0be7815 	stw	r2,-1568(fp)
   27590:	e0fe1717 	ldw	r3,-1956(fp)
   27594:	e0be7817 	ldw	r2,-1568(fp)
   27598:	1885883a 	add	r2,r3,r2
   2759c:	e0be1715 	stw	r2,-1956(fp)
   275a0:	e0fe1717 	ldw	r3,-1956(fp)
   275a4:	e0be7817 	ldw	r2,-1568(fp)
   275a8:	1880022e 	bgeu	r3,r2,275b4 <secp256k1_scalar_reduce_512+0x1b20>
   275ac:	00c00044 	movi	r3,1
   275b0:	00000106 	br	275b8 <secp256k1_scalar_reduce_512+0x1b24>
   275b4:	0007883a 	mov	r3,zero
   275b8:	e0be1817 	ldw	r2,-1952(fp)
   275bc:	10c5883a 	add	r2,r2,r3
   275c0:	e0be1815 	stw	r2,-1952(fp)
   275c4:	e0fe1717 	ldw	r3,-1956(fp)
   275c8:	e0be7817 	ldw	r2,-1568(fp)
   275cc:	1885803a 	cmpltu	r2,r3,r2
   275d0:	10803fcc 	andi	r2,r2,255
   275d4:	10001126 	beq	r2,zero,2761c <secp256k1_scalar_reduce_512+0x1b88>
   275d8:	e0be1817 	ldw	r2,-1952(fp)
   275dc:	1005003a 	cmpeq	r2,r2,zero
   275e0:	10803fcc 	andi	r2,r2,255
   275e4:	10000d26 	beq	r2,zero,2761c <secp256k1_scalar_reduce_512+0x1b88>
   275e8:	d0a01617 	ldw	r2,-32680(gp)
   275ec:	10c00317 	ldw	r3,12(r2)
   275f0:	008001b4 	movhi	r2,6
   275f4:	10b02604 	addi	r2,r2,-16232
   275f8:	d8800015 	stw	r2,0(sp)
   275fc:	01c062c4 	movi	r7,395
   27600:	018001b4 	movhi	r6,6
   27604:	31af9204 	addi	r6,r6,-16824
   27608:	014001b4 	movhi	r5,6
   2760c:	296b3804 	addi	r5,r5,-21280
   27610:	1809883a 	mov	r4,r3
   27614:	00452600 	call	45260 <fprintf>
   27618:	00450340 	call	45034 <abort>
    muladd(n3, SECP256K1_N_C_3);
   2761c:	e0be1117 	ldw	r2,-1980(fp)
   27620:	e0bf6215 	stw	r2,-632(fp)
   27624:	e03f6315 	stw	zero,-628(fp)
   27628:	01915474 	movhi	r6,17745
   2762c:	3188c644 	addi	r6,r6,8985
   27630:	000f883a 	mov	r7,zero
   27634:	e13f6217 	ldw	r4,-632(fp)
   27638:	e17f6317 	ldw	r5,-628(fp)
   2763c:	00429400 	call	42940 <__muldi3>
   27640:	1009883a 	mov	r4,r2
   27644:	180b883a 	mov	r5,r3
   27648:	e13e7a15 	stw	r4,-1560(fp)
   2764c:	e17e7b15 	stw	r5,-1556(fp)
   27650:	e0be7b17 	ldw	r2,-1556(fp)
   27654:	1004d83a 	srl	r2,r2,zero
   27658:	e0bf6415 	stw	r2,-624(fp)
   2765c:	e03f6515 	stw	zero,-620(fp)
   27660:	e1bf6417 	ldw	r6,-624(fp)
   27664:	e1be7c15 	stw	r6,-1552(fp)
   27668:	e0be7a17 	ldw	r2,-1560(fp)
   2766c:	e0be7d15 	stw	r2,-1548(fp)
   27670:	e0fe1617 	ldw	r3,-1960(fp)
   27674:	e0be7d17 	ldw	r2,-1548(fp)
   27678:	1885883a 	add	r2,r3,r2
   2767c:	e0be1615 	stw	r2,-1960(fp)
   27680:	e0fe1617 	ldw	r3,-1960(fp)
   27684:	e0be7d17 	ldw	r2,-1548(fp)
   27688:	1880022e 	bgeu	r3,r2,27694 <secp256k1_scalar_reduce_512+0x1c00>
   2768c:	00c00044 	movi	r3,1
   27690:	00000106 	br	27698 <secp256k1_scalar_reduce_512+0x1c04>
   27694:	0007883a 	mov	r3,zero
   27698:	e0be7c17 	ldw	r2,-1552(fp)
   2769c:	10c5883a 	add	r2,r2,r3
   276a0:	e0be7c15 	stw	r2,-1552(fp)
   276a4:	e0fe1717 	ldw	r3,-1956(fp)
   276a8:	e0be7c17 	ldw	r2,-1552(fp)
   276ac:	1885883a 	add	r2,r3,r2
   276b0:	e0be1715 	stw	r2,-1956(fp)
   276b4:	e0fe1717 	ldw	r3,-1956(fp)
   276b8:	e0be7c17 	ldw	r2,-1552(fp)
   276bc:	1880022e 	bgeu	r3,r2,276c8 <secp256k1_scalar_reduce_512+0x1c34>
   276c0:	00c00044 	movi	r3,1
   276c4:	00000106 	br	276cc <secp256k1_scalar_reduce_512+0x1c38>
   276c8:	0007883a 	mov	r3,zero
   276cc:	e0be1817 	ldw	r2,-1952(fp)
   276d0:	10c5883a 	add	r2,r2,r3
   276d4:	e0be1815 	stw	r2,-1952(fp)
   276d8:	e0fe1717 	ldw	r3,-1956(fp)
   276dc:	e0be7c17 	ldw	r2,-1552(fp)
   276e0:	1885803a 	cmpltu	r2,r3,r2
   276e4:	10803fcc 	andi	r2,r2,255
   276e8:	10001126 	beq	r2,zero,27730 <secp256k1_scalar_reduce_512+0x1c9c>
   276ec:	e0be1817 	ldw	r2,-1952(fp)
   276f0:	1005003a 	cmpeq	r2,r2,zero
   276f4:	10803fcc 	andi	r2,r2,255
   276f8:	10000d26 	beq	r2,zero,27730 <secp256k1_scalar_reduce_512+0x1c9c>
   276fc:	d0a01617 	ldw	r2,-32680(gp)
   27700:	10c00317 	ldw	r3,12(r2)
   27704:	008001b4 	movhi	r2,6
   27708:	10b02604 	addi	r2,r2,-16232
   2770c:	d8800015 	stw	r2,0(sp)
   27710:	01c06304 	movi	r7,396
   27714:	018001b4 	movhi	r6,6
   27718:	31af9204 	addi	r6,r6,-16824
   2771c:	014001b4 	movhi	r5,6
   27720:	296b3804 	addi	r5,r5,-21280
   27724:	1809883a 	mov	r4,r3
   27728:	00452600 	call	45260 <fprintf>
   2772c:	00450340 	call	45034 <abort>
    sumadd(n2);
   27730:	e0fe1617 	ldw	r3,-1960(fp)
   27734:	e0be1017 	ldw	r2,-1984(fp)
   27738:	1885883a 	add	r2,r3,r2
   2773c:	e0be1615 	stw	r2,-1960(fp)
   27740:	e0fe1617 	ldw	r3,-1960(fp)
   27744:	e0be1017 	ldw	r2,-1984(fp)
   27748:	1885803a 	cmpltu	r2,r3,r2
   2774c:	10803fcc 	andi	r2,r2,255
   27750:	e0be7e15 	stw	r2,-1544(fp)
   27754:	e0fe1717 	ldw	r3,-1956(fp)
   27758:	e0be7e17 	ldw	r2,-1544(fp)
   2775c:	1885883a 	add	r2,r3,r2
   27760:	e0be1715 	stw	r2,-1956(fp)
   27764:	e0fe1717 	ldw	r3,-1956(fp)
   27768:	e0be7e17 	ldw	r2,-1544(fp)
   2776c:	1880022e 	bgeu	r3,r2,27778 <secp256k1_scalar_reduce_512+0x1ce4>
   27770:	00c00044 	movi	r3,1
   27774:	00000106 	br	2777c <secp256k1_scalar_reduce_512+0x1ce8>
   27778:	0007883a 	mov	r3,zero
   2777c:	e0be1817 	ldw	r2,-1952(fp)
   27780:	10c5883a 	add	r2,r2,r3
   27784:	e0be1815 	stw	r2,-1952(fp)
    extract(m6);
   27788:	e0be1617 	ldw	r2,-1960(fp)
   2778c:	e0be7f15 	stw	r2,-1540(fp)
   27790:	e0be1717 	ldw	r2,-1956(fp)
   27794:	e0be1615 	stw	r2,-1960(fp)
   27798:	e0be1817 	ldw	r2,-1952(fp)
   2779c:	e0be1715 	stw	r2,-1956(fp)
   277a0:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[7]);
   277a4:	e0bf1717 	ldw	r2,-932(fp)
   277a8:	10800704 	addi	r2,r2,28
   277ac:	10c00017 	ldw	r3,0(r2)
   277b0:	e0be1617 	ldw	r2,-1960(fp)
   277b4:	10c5883a 	add	r2,r2,r3
   277b8:	e0be1615 	stw	r2,-1960(fp)
   277bc:	e0bf1717 	ldw	r2,-932(fp)
   277c0:	10800704 	addi	r2,r2,28
   277c4:	10c00017 	ldw	r3,0(r2)
   277c8:	e0be1617 	ldw	r2,-1960(fp)
   277cc:	10c5803a 	cmpltu	r2,r2,r3
   277d0:	10803fcc 	andi	r2,r2,255
   277d4:	e0be8015 	stw	r2,-1536(fp)
   277d8:	e0fe1717 	ldw	r3,-1956(fp)
   277dc:	e0be8017 	ldw	r2,-1536(fp)
   277e0:	1885883a 	add	r2,r3,r2
   277e4:	e0be1715 	stw	r2,-1956(fp)
   277e8:	e0fe1717 	ldw	r3,-1956(fp)
   277ec:	e0be8017 	ldw	r2,-1536(fp)
   277f0:	1880022e 	bgeu	r3,r2,277fc <secp256k1_scalar_reduce_512+0x1d68>
   277f4:	00c00044 	movi	r3,1
   277f8:	00000106 	br	27800 <secp256k1_scalar_reduce_512+0x1d6c>
   277fc:	0007883a 	mov	r3,zero
   27800:	e0be1817 	ldw	r2,-1952(fp)
   27804:	10c5883a 	add	r2,r2,r3
   27808:	e0be1815 	stw	r2,-1952(fp)
    muladd(n7, SECP256K1_N_C_0);
   2780c:	e0be1517 	ldw	r2,-1964(fp)
   27810:	e0bf6615 	stw	r2,-616(fp)
   27814:	e03f6715 	stw	zero,-612(fp)
   27818:	018bf2b4 	movhi	r6,12234
   2781c:	31afafc4 	addi	r6,r6,-16705
   27820:	000f883a 	mov	r7,zero
   27824:	e13f6617 	ldw	r4,-616(fp)
   27828:	e17f6717 	ldw	r5,-612(fp)
   2782c:	00429400 	call	42940 <__muldi3>
   27830:	1009883a 	mov	r4,r2
   27834:	180b883a 	mov	r5,r3
   27838:	e13e8115 	stw	r4,-1532(fp)
   2783c:	e17e8215 	stw	r5,-1528(fp)
   27840:	e0be8217 	ldw	r2,-1528(fp)
   27844:	1004d83a 	srl	r2,r2,zero
   27848:	e0bf6815 	stw	r2,-608(fp)
   2784c:	e03f6915 	stw	zero,-604(fp)
   27850:	e1ff6817 	ldw	r7,-608(fp)
   27854:	e1fe8315 	stw	r7,-1524(fp)
   27858:	e0be8117 	ldw	r2,-1532(fp)
   2785c:	e0be8415 	stw	r2,-1520(fp)
   27860:	e0fe1617 	ldw	r3,-1960(fp)
   27864:	e0be8417 	ldw	r2,-1520(fp)
   27868:	1885883a 	add	r2,r3,r2
   2786c:	e0be1615 	stw	r2,-1960(fp)
   27870:	e0fe1617 	ldw	r3,-1960(fp)
   27874:	e0be8417 	ldw	r2,-1520(fp)
   27878:	1880022e 	bgeu	r3,r2,27884 <secp256k1_scalar_reduce_512+0x1df0>
   2787c:	00c00044 	movi	r3,1
   27880:	00000106 	br	27888 <secp256k1_scalar_reduce_512+0x1df4>
   27884:	0007883a 	mov	r3,zero
   27888:	e0be8317 	ldw	r2,-1524(fp)
   2788c:	10c5883a 	add	r2,r2,r3
   27890:	e0be8315 	stw	r2,-1524(fp)
   27894:	e0fe1717 	ldw	r3,-1956(fp)
   27898:	e0be8317 	ldw	r2,-1524(fp)
   2789c:	1885883a 	add	r2,r3,r2
   278a0:	e0be1715 	stw	r2,-1956(fp)
   278a4:	e0fe1717 	ldw	r3,-1956(fp)
   278a8:	e0be8317 	ldw	r2,-1524(fp)
   278ac:	1880022e 	bgeu	r3,r2,278b8 <secp256k1_scalar_reduce_512+0x1e24>
   278b0:	00c00044 	movi	r3,1
   278b4:	00000106 	br	278bc <secp256k1_scalar_reduce_512+0x1e28>
   278b8:	0007883a 	mov	r3,zero
   278bc:	e0be1817 	ldw	r2,-1952(fp)
   278c0:	10c5883a 	add	r2,r2,r3
   278c4:	e0be1815 	stw	r2,-1952(fp)
   278c8:	e0fe1717 	ldw	r3,-1956(fp)
   278cc:	e0be8317 	ldw	r2,-1524(fp)
   278d0:	1885803a 	cmpltu	r2,r3,r2
   278d4:	10803fcc 	andi	r2,r2,255
   278d8:	10001126 	beq	r2,zero,27920 <secp256k1_scalar_reduce_512+0x1e8c>
   278dc:	e0be1817 	ldw	r2,-1952(fp)
   278e0:	1005003a 	cmpeq	r2,r2,zero
   278e4:	10803fcc 	andi	r2,r2,255
   278e8:	10000d26 	beq	r2,zero,27920 <secp256k1_scalar_reduce_512+0x1e8c>
   278ec:	d0a01617 	ldw	r2,-32680(gp)
   278f0:	10c00317 	ldw	r3,12(r2)
   278f4:	008001b4 	movhi	r2,6
   278f8:	10b02604 	addi	r2,r2,-16232
   278fc:	d8800015 	stw	r2,0(sp)
   27900:	01c06404 	movi	r7,400
   27904:	018001b4 	movhi	r6,6
   27908:	31af9204 	addi	r6,r6,-16824
   2790c:	014001b4 	movhi	r5,6
   27910:	296b3804 	addi	r5,r5,-21280
   27914:	1809883a 	mov	r4,r3
   27918:	00452600 	call	45260 <fprintf>
   2791c:	00450340 	call	45034 <abort>
    muladd(n6, SECP256K1_N_C_1);
   27920:	e0be1417 	ldw	r2,-1968(fp)
   27924:	e0bf6a15 	stw	r2,-600(fp)
   27928:	e03f6b15 	stw	zero,-596(fp)
   2792c:	01900bb4 	movhi	r6,16430
   27930:	31a85cc4 	addi	r6,r6,-24205
   27934:	000f883a 	mov	r7,zero
   27938:	e13f6a17 	ldw	r4,-600(fp)
   2793c:	e17f6b17 	ldw	r5,-596(fp)
   27940:	00429400 	call	42940 <__muldi3>
   27944:	1009883a 	mov	r4,r2
   27948:	180b883a 	mov	r5,r3
   2794c:	e13e8515 	stw	r4,-1516(fp)
   27950:	e17e8615 	stw	r5,-1512(fp)
   27954:	e0be8617 	ldw	r2,-1512(fp)
   27958:	1004d83a 	srl	r2,r2,zero
   2795c:	e0bf6c15 	stw	r2,-592(fp)
   27960:	e03f6d15 	stw	zero,-588(fp)
   27964:	e0bf6c17 	ldw	r2,-592(fp)
   27968:	e0be8715 	stw	r2,-1508(fp)
   2796c:	e0be8517 	ldw	r2,-1516(fp)
   27970:	e0be8815 	stw	r2,-1504(fp)
   27974:	e0fe1617 	ldw	r3,-1960(fp)
   27978:	e0be8817 	ldw	r2,-1504(fp)
   2797c:	1885883a 	add	r2,r3,r2
   27980:	e0be1615 	stw	r2,-1960(fp)
   27984:	e0fe1617 	ldw	r3,-1960(fp)
   27988:	e0be8817 	ldw	r2,-1504(fp)
   2798c:	1880022e 	bgeu	r3,r2,27998 <secp256k1_scalar_reduce_512+0x1f04>
   27990:	00c00044 	movi	r3,1
   27994:	00000106 	br	2799c <secp256k1_scalar_reduce_512+0x1f08>
   27998:	0007883a 	mov	r3,zero
   2799c:	e0be8717 	ldw	r2,-1508(fp)
   279a0:	10c5883a 	add	r2,r2,r3
   279a4:	e0be8715 	stw	r2,-1508(fp)
   279a8:	e0fe1717 	ldw	r3,-1956(fp)
   279ac:	e0be8717 	ldw	r2,-1508(fp)
   279b0:	1885883a 	add	r2,r3,r2
   279b4:	e0be1715 	stw	r2,-1956(fp)
   279b8:	e0fe1717 	ldw	r3,-1956(fp)
   279bc:	e0be8717 	ldw	r2,-1508(fp)
   279c0:	1880022e 	bgeu	r3,r2,279cc <secp256k1_scalar_reduce_512+0x1f38>
   279c4:	00c00044 	movi	r3,1
   279c8:	00000106 	br	279d0 <secp256k1_scalar_reduce_512+0x1f3c>
   279cc:	0007883a 	mov	r3,zero
   279d0:	e0be1817 	ldw	r2,-1952(fp)
   279d4:	10c5883a 	add	r2,r2,r3
   279d8:	e0be1815 	stw	r2,-1952(fp)
   279dc:	e0fe1717 	ldw	r3,-1956(fp)
   279e0:	e0be8717 	ldw	r2,-1508(fp)
   279e4:	1885803a 	cmpltu	r2,r3,r2
   279e8:	10803fcc 	andi	r2,r2,255
   279ec:	10001126 	beq	r2,zero,27a34 <secp256k1_scalar_reduce_512+0x1fa0>
   279f0:	e0be1817 	ldw	r2,-1952(fp)
   279f4:	1005003a 	cmpeq	r2,r2,zero
   279f8:	10803fcc 	andi	r2,r2,255
   279fc:	10000d26 	beq	r2,zero,27a34 <secp256k1_scalar_reduce_512+0x1fa0>
   27a00:	d0a01617 	ldw	r2,-32680(gp)
   27a04:	10c00317 	ldw	r3,12(r2)
   27a08:	008001b4 	movhi	r2,6
   27a0c:	10b02604 	addi	r2,r2,-16232
   27a10:	d8800015 	stw	r2,0(sp)
   27a14:	01c06444 	movi	r7,401
   27a18:	018001b4 	movhi	r6,6
   27a1c:	31af9204 	addi	r6,r6,-16824
   27a20:	014001b4 	movhi	r5,6
   27a24:	296b3804 	addi	r5,r5,-21280
   27a28:	1809883a 	mov	r4,r3
   27a2c:	00452600 	call	45260 <fprintf>
   27a30:	00450340 	call	45034 <abort>
    muladd(n5, SECP256K1_N_C_2);
   27a34:	e0be1317 	ldw	r2,-1972(fp)
   27a38:	e0bf6e15 	stw	r2,-584(fp)
   27a3c:	e03f6f15 	stw	zero,-580(fp)
   27a40:	01942df4 	movhi	r6,20663
   27a44:	3197f104 	addi	r6,r6,24516
   27a48:	000f883a 	mov	r7,zero
   27a4c:	e13f6e17 	ldw	r4,-584(fp)
   27a50:	e17f6f17 	ldw	r5,-580(fp)
   27a54:	00429400 	call	42940 <__muldi3>
   27a58:	1009883a 	mov	r4,r2
   27a5c:	180b883a 	mov	r5,r3
   27a60:	e13e8915 	stw	r4,-1500(fp)
   27a64:	e17e8a15 	stw	r5,-1496(fp)
   27a68:	e0be8a17 	ldw	r2,-1496(fp)
   27a6c:	1004d83a 	srl	r2,r2,zero
   27a70:	e0bf7015 	stw	r2,-576(fp)
   27a74:	e03f7115 	stw	zero,-572(fp)
   27a78:	e13f7017 	ldw	r4,-576(fp)
   27a7c:	e13e8b15 	stw	r4,-1492(fp)
   27a80:	e0be8917 	ldw	r2,-1500(fp)
   27a84:	e0be8c15 	stw	r2,-1488(fp)
   27a88:	e0fe1617 	ldw	r3,-1960(fp)
   27a8c:	e0be8c17 	ldw	r2,-1488(fp)
   27a90:	1885883a 	add	r2,r3,r2
   27a94:	e0be1615 	stw	r2,-1960(fp)
   27a98:	e0fe1617 	ldw	r3,-1960(fp)
   27a9c:	e0be8c17 	ldw	r2,-1488(fp)
   27aa0:	1880022e 	bgeu	r3,r2,27aac <secp256k1_scalar_reduce_512+0x2018>
   27aa4:	00c00044 	movi	r3,1
   27aa8:	00000106 	br	27ab0 <secp256k1_scalar_reduce_512+0x201c>
   27aac:	0007883a 	mov	r3,zero
   27ab0:	e0be8b17 	ldw	r2,-1492(fp)
   27ab4:	10c5883a 	add	r2,r2,r3
   27ab8:	e0be8b15 	stw	r2,-1492(fp)
   27abc:	e0fe1717 	ldw	r3,-1956(fp)
   27ac0:	e0be8b17 	ldw	r2,-1492(fp)
   27ac4:	1885883a 	add	r2,r3,r2
   27ac8:	e0be1715 	stw	r2,-1956(fp)
   27acc:	e0fe1717 	ldw	r3,-1956(fp)
   27ad0:	e0be8b17 	ldw	r2,-1492(fp)
   27ad4:	1880022e 	bgeu	r3,r2,27ae0 <secp256k1_scalar_reduce_512+0x204c>
   27ad8:	00c00044 	movi	r3,1
   27adc:	00000106 	br	27ae4 <secp256k1_scalar_reduce_512+0x2050>
   27ae0:	0007883a 	mov	r3,zero
   27ae4:	e0be1817 	ldw	r2,-1952(fp)
   27ae8:	10c5883a 	add	r2,r2,r3
   27aec:	e0be1815 	stw	r2,-1952(fp)
   27af0:	e0fe1717 	ldw	r3,-1956(fp)
   27af4:	e0be8b17 	ldw	r2,-1492(fp)
   27af8:	1885803a 	cmpltu	r2,r3,r2
   27afc:	10803fcc 	andi	r2,r2,255
   27b00:	10001126 	beq	r2,zero,27b48 <secp256k1_scalar_reduce_512+0x20b4>
   27b04:	e0be1817 	ldw	r2,-1952(fp)
   27b08:	1005003a 	cmpeq	r2,r2,zero
   27b0c:	10803fcc 	andi	r2,r2,255
   27b10:	10000d26 	beq	r2,zero,27b48 <secp256k1_scalar_reduce_512+0x20b4>
   27b14:	d0a01617 	ldw	r2,-32680(gp)
   27b18:	10c00317 	ldw	r3,12(r2)
   27b1c:	008001b4 	movhi	r2,6
   27b20:	10b02604 	addi	r2,r2,-16232
   27b24:	d8800015 	stw	r2,0(sp)
   27b28:	01c06484 	movi	r7,402
   27b2c:	018001b4 	movhi	r6,6
   27b30:	31af9204 	addi	r6,r6,-16824
   27b34:	014001b4 	movhi	r5,6
   27b38:	296b3804 	addi	r5,r5,-21280
   27b3c:	1809883a 	mov	r4,r3
   27b40:	00452600 	call	45260 <fprintf>
   27b44:	00450340 	call	45034 <abort>
    muladd(n4, SECP256K1_N_C_3);
   27b48:	e0be1217 	ldw	r2,-1976(fp)
   27b4c:	e0bf7215 	stw	r2,-568(fp)
   27b50:	e03f7315 	stw	zero,-564(fp)
   27b54:	01915474 	movhi	r6,17745
   27b58:	3188c644 	addi	r6,r6,8985
   27b5c:	000f883a 	mov	r7,zero
   27b60:	e13f7217 	ldw	r4,-568(fp)
   27b64:	e17f7317 	ldw	r5,-564(fp)
   27b68:	00429400 	call	42940 <__muldi3>
   27b6c:	1009883a 	mov	r4,r2
   27b70:	180b883a 	mov	r5,r3
   27b74:	e13e8d15 	stw	r4,-1484(fp)
   27b78:	e17e8e15 	stw	r5,-1480(fp)
   27b7c:	e0be8e17 	ldw	r2,-1480(fp)
   27b80:	1004d83a 	srl	r2,r2,zero
   27b84:	e0bf7415 	stw	r2,-560(fp)
   27b88:	e03f7515 	stw	zero,-556(fp)
   27b8c:	e17f7417 	ldw	r5,-560(fp)
   27b90:	e17e8f15 	stw	r5,-1476(fp)
   27b94:	e0be8d17 	ldw	r2,-1484(fp)
   27b98:	e0be9015 	stw	r2,-1472(fp)
   27b9c:	e0fe1617 	ldw	r3,-1960(fp)
   27ba0:	e0be9017 	ldw	r2,-1472(fp)
   27ba4:	1885883a 	add	r2,r3,r2
   27ba8:	e0be1615 	stw	r2,-1960(fp)
   27bac:	e0fe1617 	ldw	r3,-1960(fp)
   27bb0:	e0be9017 	ldw	r2,-1472(fp)
   27bb4:	1880022e 	bgeu	r3,r2,27bc0 <secp256k1_scalar_reduce_512+0x212c>
   27bb8:	00c00044 	movi	r3,1
   27bbc:	00000106 	br	27bc4 <secp256k1_scalar_reduce_512+0x2130>
   27bc0:	0007883a 	mov	r3,zero
   27bc4:	e0be8f17 	ldw	r2,-1476(fp)
   27bc8:	10c5883a 	add	r2,r2,r3
   27bcc:	e0be8f15 	stw	r2,-1476(fp)
   27bd0:	e0fe1717 	ldw	r3,-1956(fp)
   27bd4:	e0be8f17 	ldw	r2,-1476(fp)
   27bd8:	1885883a 	add	r2,r3,r2
   27bdc:	e0be1715 	stw	r2,-1956(fp)
   27be0:	e0fe1717 	ldw	r3,-1956(fp)
   27be4:	e0be8f17 	ldw	r2,-1476(fp)
   27be8:	1880022e 	bgeu	r3,r2,27bf4 <secp256k1_scalar_reduce_512+0x2160>
   27bec:	00c00044 	movi	r3,1
   27bf0:	00000106 	br	27bf8 <secp256k1_scalar_reduce_512+0x2164>
   27bf4:	0007883a 	mov	r3,zero
   27bf8:	e0be1817 	ldw	r2,-1952(fp)
   27bfc:	10c5883a 	add	r2,r2,r3
   27c00:	e0be1815 	stw	r2,-1952(fp)
   27c04:	e0fe1717 	ldw	r3,-1956(fp)
   27c08:	e0be8f17 	ldw	r2,-1476(fp)
   27c0c:	1885803a 	cmpltu	r2,r3,r2
   27c10:	10803fcc 	andi	r2,r2,255
   27c14:	10001126 	beq	r2,zero,27c5c <secp256k1_scalar_reduce_512+0x21c8>
   27c18:	e0be1817 	ldw	r2,-1952(fp)
   27c1c:	1005003a 	cmpeq	r2,r2,zero
   27c20:	10803fcc 	andi	r2,r2,255
   27c24:	10000d26 	beq	r2,zero,27c5c <secp256k1_scalar_reduce_512+0x21c8>
   27c28:	d0a01617 	ldw	r2,-32680(gp)
   27c2c:	10c00317 	ldw	r3,12(r2)
   27c30:	008001b4 	movhi	r2,6
   27c34:	10b02604 	addi	r2,r2,-16232
   27c38:	d8800015 	stw	r2,0(sp)
   27c3c:	01c064c4 	movi	r7,403
   27c40:	018001b4 	movhi	r6,6
   27c44:	31af9204 	addi	r6,r6,-16824
   27c48:	014001b4 	movhi	r5,6
   27c4c:	296b3804 	addi	r5,r5,-21280
   27c50:	1809883a 	mov	r4,r3
   27c54:	00452600 	call	45260 <fprintf>
   27c58:	00450340 	call	45034 <abort>
    sumadd(n3);
   27c5c:	e0fe1617 	ldw	r3,-1960(fp)
   27c60:	e0be1117 	ldw	r2,-1980(fp)
   27c64:	1885883a 	add	r2,r3,r2
   27c68:	e0be1615 	stw	r2,-1960(fp)
   27c6c:	e0fe1617 	ldw	r3,-1960(fp)
   27c70:	e0be1117 	ldw	r2,-1980(fp)
   27c74:	1885803a 	cmpltu	r2,r3,r2
   27c78:	10803fcc 	andi	r2,r2,255
   27c7c:	e0be9115 	stw	r2,-1468(fp)
   27c80:	e0fe1717 	ldw	r3,-1956(fp)
   27c84:	e0be9117 	ldw	r2,-1468(fp)
   27c88:	1885883a 	add	r2,r3,r2
   27c8c:	e0be1715 	stw	r2,-1956(fp)
   27c90:	e0fe1717 	ldw	r3,-1956(fp)
   27c94:	e0be9117 	ldw	r2,-1468(fp)
   27c98:	1880022e 	bgeu	r3,r2,27ca4 <secp256k1_scalar_reduce_512+0x2210>
   27c9c:	00c00044 	movi	r3,1
   27ca0:	00000106 	br	27ca8 <secp256k1_scalar_reduce_512+0x2214>
   27ca4:	0007883a 	mov	r3,zero
   27ca8:	e0be1817 	ldw	r2,-1952(fp)
   27cac:	10c5883a 	add	r2,r2,r3
   27cb0:	e0be1815 	stw	r2,-1952(fp)
    extract(m7);
   27cb4:	e0be1617 	ldw	r2,-1960(fp)
   27cb8:	e0be9215 	stw	r2,-1464(fp)
   27cbc:	e0be1717 	ldw	r2,-1956(fp)
   27cc0:	e0be1615 	stw	r2,-1960(fp)
   27cc4:	e0be1817 	ldw	r2,-1952(fp)
   27cc8:	e0be1715 	stw	r2,-1956(fp)
   27ccc:	e03e1815 	stw	zero,-1952(fp)
    muladd(n7, SECP256K1_N_C_1);
   27cd0:	e0be1517 	ldw	r2,-1964(fp)
   27cd4:	e0bf7615 	stw	r2,-552(fp)
   27cd8:	e03f7715 	stw	zero,-548(fp)
   27cdc:	01900bb4 	movhi	r6,16430
   27ce0:	31a85cc4 	addi	r6,r6,-24205
   27ce4:	000f883a 	mov	r7,zero
   27ce8:	e13f7617 	ldw	r4,-552(fp)
   27cec:	e17f7717 	ldw	r5,-548(fp)
   27cf0:	00429400 	call	42940 <__muldi3>
   27cf4:	1009883a 	mov	r4,r2
   27cf8:	180b883a 	mov	r5,r3
   27cfc:	e13e9315 	stw	r4,-1460(fp)
   27d00:	e17e9415 	stw	r5,-1456(fp)
   27d04:	e0be9417 	ldw	r2,-1456(fp)
   27d08:	1004d83a 	srl	r2,r2,zero
   27d0c:	e0bf7815 	stw	r2,-544(fp)
   27d10:	e03f7915 	stw	zero,-540(fp)
   27d14:	e1bf7817 	ldw	r6,-544(fp)
   27d18:	e1be9515 	stw	r6,-1452(fp)
   27d1c:	e0be9317 	ldw	r2,-1460(fp)
   27d20:	e0be9615 	stw	r2,-1448(fp)
   27d24:	e0fe1617 	ldw	r3,-1960(fp)
   27d28:	e0be9617 	ldw	r2,-1448(fp)
   27d2c:	1885883a 	add	r2,r3,r2
   27d30:	e0be1615 	stw	r2,-1960(fp)
   27d34:	e0fe1617 	ldw	r3,-1960(fp)
   27d38:	e0be9617 	ldw	r2,-1448(fp)
   27d3c:	1880022e 	bgeu	r3,r2,27d48 <secp256k1_scalar_reduce_512+0x22b4>
   27d40:	00c00044 	movi	r3,1
   27d44:	00000106 	br	27d4c <secp256k1_scalar_reduce_512+0x22b8>
   27d48:	0007883a 	mov	r3,zero
   27d4c:	e0be9517 	ldw	r2,-1452(fp)
   27d50:	10c5883a 	add	r2,r2,r3
   27d54:	e0be9515 	stw	r2,-1452(fp)
   27d58:	e0fe1717 	ldw	r3,-1956(fp)
   27d5c:	e0be9517 	ldw	r2,-1452(fp)
   27d60:	1885883a 	add	r2,r3,r2
   27d64:	e0be1715 	stw	r2,-1956(fp)
   27d68:	e0fe1717 	ldw	r3,-1956(fp)
   27d6c:	e0be9517 	ldw	r2,-1452(fp)
   27d70:	1880022e 	bgeu	r3,r2,27d7c <secp256k1_scalar_reduce_512+0x22e8>
   27d74:	00c00044 	movi	r3,1
   27d78:	00000106 	br	27d80 <secp256k1_scalar_reduce_512+0x22ec>
   27d7c:	0007883a 	mov	r3,zero
   27d80:	e0be1817 	ldw	r2,-1952(fp)
   27d84:	10c5883a 	add	r2,r2,r3
   27d88:	e0be1815 	stw	r2,-1952(fp)
   27d8c:	e0fe1717 	ldw	r3,-1956(fp)
   27d90:	e0be9517 	ldw	r2,-1452(fp)
   27d94:	1885803a 	cmpltu	r2,r3,r2
   27d98:	10803fcc 	andi	r2,r2,255
   27d9c:	10001126 	beq	r2,zero,27de4 <secp256k1_scalar_reduce_512+0x2350>
   27da0:	e0be1817 	ldw	r2,-1952(fp)
   27da4:	1005003a 	cmpeq	r2,r2,zero
   27da8:	10803fcc 	andi	r2,r2,255
   27dac:	10000d26 	beq	r2,zero,27de4 <secp256k1_scalar_reduce_512+0x2350>
   27db0:	d0a01617 	ldw	r2,-32680(gp)
   27db4:	10c00317 	ldw	r3,12(r2)
   27db8:	008001b4 	movhi	r2,6
   27dbc:	10b02604 	addi	r2,r2,-16232
   27dc0:	d8800015 	stw	r2,0(sp)
   27dc4:	01c06584 	movi	r7,406
   27dc8:	018001b4 	movhi	r6,6
   27dcc:	31af9204 	addi	r6,r6,-16824
   27dd0:	014001b4 	movhi	r5,6
   27dd4:	296b3804 	addi	r5,r5,-21280
   27dd8:	1809883a 	mov	r4,r3
   27ddc:	00452600 	call	45260 <fprintf>
   27de0:	00450340 	call	45034 <abort>
    muladd(n6, SECP256K1_N_C_2);
   27de4:	e0be1417 	ldw	r2,-1968(fp)
   27de8:	e0bf7a15 	stw	r2,-536(fp)
   27dec:	e03f7b15 	stw	zero,-532(fp)
   27df0:	01942df4 	movhi	r6,20663
   27df4:	3197f104 	addi	r6,r6,24516
   27df8:	000f883a 	mov	r7,zero
   27dfc:	e13f7a17 	ldw	r4,-536(fp)
   27e00:	e17f7b17 	ldw	r5,-532(fp)
   27e04:	00429400 	call	42940 <__muldi3>
   27e08:	1009883a 	mov	r4,r2
   27e0c:	180b883a 	mov	r5,r3
   27e10:	e13e9715 	stw	r4,-1444(fp)
   27e14:	e17e9815 	stw	r5,-1440(fp)
   27e18:	e0be9817 	ldw	r2,-1440(fp)
   27e1c:	1004d83a 	srl	r2,r2,zero
   27e20:	e0bf7c15 	stw	r2,-528(fp)
   27e24:	e03f7d15 	stw	zero,-524(fp)
   27e28:	e1ff7c17 	ldw	r7,-528(fp)
   27e2c:	e1fe9915 	stw	r7,-1436(fp)
   27e30:	e0be9717 	ldw	r2,-1444(fp)
   27e34:	e0be9a15 	stw	r2,-1432(fp)
   27e38:	e0fe1617 	ldw	r3,-1960(fp)
   27e3c:	e0be9a17 	ldw	r2,-1432(fp)
   27e40:	1885883a 	add	r2,r3,r2
   27e44:	e0be1615 	stw	r2,-1960(fp)
   27e48:	e0fe1617 	ldw	r3,-1960(fp)
   27e4c:	e0be9a17 	ldw	r2,-1432(fp)
   27e50:	1880022e 	bgeu	r3,r2,27e5c <secp256k1_scalar_reduce_512+0x23c8>
   27e54:	00c00044 	movi	r3,1
   27e58:	00000106 	br	27e60 <secp256k1_scalar_reduce_512+0x23cc>
   27e5c:	0007883a 	mov	r3,zero
   27e60:	e0be9917 	ldw	r2,-1436(fp)
   27e64:	10c5883a 	add	r2,r2,r3
   27e68:	e0be9915 	stw	r2,-1436(fp)
   27e6c:	e0fe1717 	ldw	r3,-1956(fp)
   27e70:	e0be9917 	ldw	r2,-1436(fp)
   27e74:	1885883a 	add	r2,r3,r2
   27e78:	e0be1715 	stw	r2,-1956(fp)
   27e7c:	e0fe1717 	ldw	r3,-1956(fp)
   27e80:	e0be9917 	ldw	r2,-1436(fp)
   27e84:	1880022e 	bgeu	r3,r2,27e90 <secp256k1_scalar_reduce_512+0x23fc>
   27e88:	00c00044 	movi	r3,1
   27e8c:	00000106 	br	27e94 <secp256k1_scalar_reduce_512+0x2400>
   27e90:	0007883a 	mov	r3,zero
   27e94:	e0be1817 	ldw	r2,-1952(fp)
   27e98:	10c5883a 	add	r2,r2,r3
   27e9c:	e0be1815 	stw	r2,-1952(fp)
   27ea0:	e0fe1717 	ldw	r3,-1956(fp)
   27ea4:	e0be9917 	ldw	r2,-1436(fp)
   27ea8:	1885803a 	cmpltu	r2,r3,r2
   27eac:	10803fcc 	andi	r2,r2,255
   27eb0:	10001126 	beq	r2,zero,27ef8 <secp256k1_scalar_reduce_512+0x2464>
   27eb4:	e0be1817 	ldw	r2,-1952(fp)
   27eb8:	1005003a 	cmpeq	r2,r2,zero
   27ebc:	10803fcc 	andi	r2,r2,255
   27ec0:	10000d26 	beq	r2,zero,27ef8 <secp256k1_scalar_reduce_512+0x2464>
   27ec4:	d0a01617 	ldw	r2,-32680(gp)
   27ec8:	10c00317 	ldw	r3,12(r2)
   27ecc:	008001b4 	movhi	r2,6
   27ed0:	10b02604 	addi	r2,r2,-16232
   27ed4:	d8800015 	stw	r2,0(sp)
   27ed8:	01c065c4 	movi	r7,407
   27edc:	018001b4 	movhi	r6,6
   27ee0:	31af9204 	addi	r6,r6,-16824
   27ee4:	014001b4 	movhi	r5,6
   27ee8:	296b3804 	addi	r5,r5,-21280
   27eec:	1809883a 	mov	r4,r3
   27ef0:	00452600 	call	45260 <fprintf>
   27ef4:	00450340 	call	45034 <abort>
    muladd(n5, SECP256K1_N_C_3);
   27ef8:	e0be1317 	ldw	r2,-1972(fp)
   27efc:	e0bf7e15 	stw	r2,-520(fp)
   27f00:	e03f7f15 	stw	zero,-516(fp)
   27f04:	01915474 	movhi	r6,17745
   27f08:	3188c644 	addi	r6,r6,8985
   27f0c:	000f883a 	mov	r7,zero
   27f10:	e13f7e17 	ldw	r4,-520(fp)
   27f14:	e17f7f17 	ldw	r5,-516(fp)
   27f18:	00429400 	call	42940 <__muldi3>
   27f1c:	1009883a 	mov	r4,r2
   27f20:	180b883a 	mov	r5,r3
   27f24:	e13e9b15 	stw	r4,-1428(fp)
   27f28:	e17e9c15 	stw	r5,-1424(fp)
   27f2c:	e0be9c17 	ldw	r2,-1424(fp)
   27f30:	1004d83a 	srl	r2,r2,zero
   27f34:	e0bf8015 	stw	r2,-512(fp)
   27f38:	e03f8115 	stw	zero,-508(fp)
   27f3c:	e0bf8017 	ldw	r2,-512(fp)
   27f40:	e0be9d15 	stw	r2,-1420(fp)
   27f44:	e0be9b17 	ldw	r2,-1428(fp)
   27f48:	e0be9e15 	stw	r2,-1416(fp)
   27f4c:	e0fe1617 	ldw	r3,-1960(fp)
   27f50:	e0be9e17 	ldw	r2,-1416(fp)
   27f54:	1885883a 	add	r2,r3,r2
   27f58:	e0be1615 	stw	r2,-1960(fp)
   27f5c:	e0fe1617 	ldw	r3,-1960(fp)
   27f60:	e0be9e17 	ldw	r2,-1416(fp)
   27f64:	1880022e 	bgeu	r3,r2,27f70 <secp256k1_scalar_reduce_512+0x24dc>
   27f68:	00c00044 	movi	r3,1
   27f6c:	00000106 	br	27f74 <secp256k1_scalar_reduce_512+0x24e0>
   27f70:	0007883a 	mov	r3,zero
   27f74:	e0be9d17 	ldw	r2,-1420(fp)
   27f78:	10c5883a 	add	r2,r2,r3
   27f7c:	e0be9d15 	stw	r2,-1420(fp)
   27f80:	e0fe1717 	ldw	r3,-1956(fp)
   27f84:	e0be9d17 	ldw	r2,-1420(fp)
   27f88:	1885883a 	add	r2,r3,r2
   27f8c:	e0be1715 	stw	r2,-1956(fp)
   27f90:	e0fe1717 	ldw	r3,-1956(fp)
   27f94:	e0be9d17 	ldw	r2,-1420(fp)
   27f98:	1880022e 	bgeu	r3,r2,27fa4 <secp256k1_scalar_reduce_512+0x2510>
   27f9c:	00c00044 	movi	r3,1
   27fa0:	00000106 	br	27fa8 <secp256k1_scalar_reduce_512+0x2514>
   27fa4:	0007883a 	mov	r3,zero
   27fa8:	e0be1817 	ldw	r2,-1952(fp)
   27fac:	10c5883a 	add	r2,r2,r3
   27fb0:	e0be1815 	stw	r2,-1952(fp)
   27fb4:	e0fe1717 	ldw	r3,-1956(fp)
   27fb8:	e0be9d17 	ldw	r2,-1420(fp)
   27fbc:	1885803a 	cmpltu	r2,r3,r2
   27fc0:	10803fcc 	andi	r2,r2,255
   27fc4:	10001126 	beq	r2,zero,2800c <secp256k1_scalar_reduce_512+0x2578>
   27fc8:	e0be1817 	ldw	r2,-1952(fp)
   27fcc:	1005003a 	cmpeq	r2,r2,zero
   27fd0:	10803fcc 	andi	r2,r2,255
   27fd4:	10000d26 	beq	r2,zero,2800c <secp256k1_scalar_reduce_512+0x2578>
   27fd8:	d0a01617 	ldw	r2,-32680(gp)
   27fdc:	10c00317 	ldw	r3,12(r2)
   27fe0:	008001b4 	movhi	r2,6
   27fe4:	10b02604 	addi	r2,r2,-16232
   27fe8:	d8800015 	stw	r2,0(sp)
   27fec:	01c06604 	movi	r7,408
   27ff0:	018001b4 	movhi	r6,6
   27ff4:	31af9204 	addi	r6,r6,-16824
   27ff8:	014001b4 	movhi	r5,6
   27ffc:	296b3804 	addi	r5,r5,-21280
   28000:	1809883a 	mov	r4,r3
   28004:	00452600 	call	45260 <fprintf>
   28008:	00450340 	call	45034 <abort>
    sumadd(n4);
   2800c:	e0fe1617 	ldw	r3,-1960(fp)
   28010:	e0be1217 	ldw	r2,-1976(fp)
   28014:	1885883a 	add	r2,r3,r2
   28018:	e0be1615 	stw	r2,-1960(fp)
   2801c:	e0fe1617 	ldw	r3,-1960(fp)
   28020:	e0be1217 	ldw	r2,-1976(fp)
   28024:	1885803a 	cmpltu	r2,r3,r2
   28028:	10803fcc 	andi	r2,r2,255
   2802c:	e0be9f15 	stw	r2,-1412(fp)
   28030:	e0fe1717 	ldw	r3,-1956(fp)
   28034:	e0be9f17 	ldw	r2,-1412(fp)
   28038:	1885883a 	add	r2,r3,r2
   2803c:	e0be1715 	stw	r2,-1956(fp)
   28040:	e0fe1717 	ldw	r3,-1956(fp)
   28044:	e0be9f17 	ldw	r2,-1412(fp)
   28048:	1880022e 	bgeu	r3,r2,28054 <secp256k1_scalar_reduce_512+0x25c0>
   2804c:	00c00044 	movi	r3,1
   28050:	00000106 	br	28058 <secp256k1_scalar_reduce_512+0x25c4>
   28054:	0007883a 	mov	r3,zero
   28058:	e0be1817 	ldw	r2,-1952(fp)
   2805c:	10c5883a 	add	r2,r2,r3
   28060:	e0be1815 	stw	r2,-1952(fp)
    extract(m8);
   28064:	e0be1617 	ldw	r2,-1960(fp)
   28068:	e0bea015 	stw	r2,-1408(fp)
   2806c:	e0be1717 	ldw	r2,-1956(fp)
   28070:	e0be1615 	stw	r2,-1960(fp)
   28074:	e0be1817 	ldw	r2,-1952(fp)
   28078:	e0be1715 	stw	r2,-1956(fp)
   2807c:	e03e1815 	stw	zero,-1952(fp)
    muladd(n7, SECP256K1_N_C_2);
   28080:	e0be1517 	ldw	r2,-1964(fp)
   28084:	e0bf8215 	stw	r2,-504(fp)
   28088:	e03f8315 	stw	zero,-500(fp)
   2808c:	01942df4 	movhi	r6,20663
   28090:	3197f104 	addi	r6,r6,24516
   28094:	000f883a 	mov	r7,zero
   28098:	e13f8217 	ldw	r4,-504(fp)
   2809c:	e17f8317 	ldw	r5,-500(fp)
   280a0:	00429400 	call	42940 <__muldi3>
   280a4:	1009883a 	mov	r4,r2
   280a8:	180b883a 	mov	r5,r3
   280ac:	e13ea115 	stw	r4,-1404(fp)
   280b0:	e17ea215 	stw	r5,-1400(fp)
   280b4:	e0bea217 	ldw	r2,-1400(fp)
   280b8:	1004d83a 	srl	r2,r2,zero
   280bc:	e0bf8415 	stw	r2,-496(fp)
   280c0:	e03f8515 	stw	zero,-492(fp)
   280c4:	e13f8417 	ldw	r4,-496(fp)
   280c8:	e13ea315 	stw	r4,-1396(fp)
   280cc:	e0bea117 	ldw	r2,-1404(fp)
   280d0:	e0bea415 	stw	r2,-1392(fp)
   280d4:	e0fe1617 	ldw	r3,-1960(fp)
   280d8:	e0bea417 	ldw	r2,-1392(fp)
   280dc:	1885883a 	add	r2,r3,r2
   280e0:	e0be1615 	stw	r2,-1960(fp)
   280e4:	e0fe1617 	ldw	r3,-1960(fp)
   280e8:	e0bea417 	ldw	r2,-1392(fp)
   280ec:	1880022e 	bgeu	r3,r2,280f8 <secp256k1_scalar_reduce_512+0x2664>
   280f0:	00c00044 	movi	r3,1
   280f4:	00000106 	br	280fc <secp256k1_scalar_reduce_512+0x2668>
   280f8:	0007883a 	mov	r3,zero
   280fc:	e0bea317 	ldw	r2,-1396(fp)
   28100:	10c5883a 	add	r2,r2,r3
   28104:	e0bea315 	stw	r2,-1396(fp)
   28108:	e0fe1717 	ldw	r3,-1956(fp)
   2810c:	e0bea317 	ldw	r2,-1396(fp)
   28110:	1885883a 	add	r2,r3,r2
   28114:	e0be1715 	stw	r2,-1956(fp)
   28118:	e0fe1717 	ldw	r3,-1956(fp)
   2811c:	e0bea317 	ldw	r2,-1396(fp)
   28120:	1880022e 	bgeu	r3,r2,2812c <secp256k1_scalar_reduce_512+0x2698>
   28124:	00c00044 	movi	r3,1
   28128:	00000106 	br	28130 <secp256k1_scalar_reduce_512+0x269c>
   2812c:	0007883a 	mov	r3,zero
   28130:	e0be1817 	ldw	r2,-1952(fp)
   28134:	10c5883a 	add	r2,r2,r3
   28138:	e0be1815 	stw	r2,-1952(fp)
   2813c:	e0fe1717 	ldw	r3,-1956(fp)
   28140:	e0bea317 	ldw	r2,-1396(fp)
   28144:	1885803a 	cmpltu	r2,r3,r2
   28148:	10803fcc 	andi	r2,r2,255
   2814c:	10001126 	beq	r2,zero,28194 <secp256k1_scalar_reduce_512+0x2700>
   28150:	e0be1817 	ldw	r2,-1952(fp)
   28154:	1005003a 	cmpeq	r2,r2,zero
   28158:	10803fcc 	andi	r2,r2,255
   2815c:	10000d26 	beq	r2,zero,28194 <secp256k1_scalar_reduce_512+0x2700>
   28160:	d0a01617 	ldw	r2,-32680(gp)
   28164:	10c00317 	ldw	r3,12(r2)
   28168:	008001b4 	movhi	r2,6
   2816c:	10b02604 	addi	r2,r2,-16232
   28170:	d8800015 	stw	r2,0(sp)
   28174:	01c066c4 	movi	r7,411
   28178:	018001b4 	movhi	r6,6
   2817c:	31af9204 	addi	r6,r6,-16824
   28180:	014001b4 	movhi	r5,6
   28184:	296b3804 	addi	r5,r5,-21280
   28188:	1809883a 	mov	r4,r3
   2818c:	00452600 	call	45260 <fprintf>
   28190:	00450340 	call	45034 <abort>
    muladd(n6, SECP256K1_N_C_3);
   28194:	e0be1417 	ldw	r2,-1968(fp)
   28198:	e0bf8615 	stw	r2,-488(fp)
   2819c:	e03f8715 	stw	zero,-484(fp)
   281a0:	01915474 	movhi	r6,17745
   281a4:	3188c644 	addi	r6,r6,8985
   281a8:	000f883a 	mov	r7,zero
   281ac:	e13f8617 	ldw	r4,-488(fp)
   281b0:	e17f8717 	ldw	r5,-484(fp)
   281b4:	00429400 	call	42940 <__muldi3>
   281b8:	1009883a 	mov	r4,r2
   281bc:	180b883a 	mov	r5,r3
   281c0:	e13ea515 	stw	r4,-1388(fp)
   281c4:	e17ea615 	stw	r5,-1384(fp)
   281c8:	e0bea617 	ldw	r2,-1384(fp)
   281cc:	1004d83a 	srl	r2,r2,zero
   281d0:	e0bf8815 	stw	r2,-480(fp)
   281d4:	e03f8915 	stw	zero,-476(fp)
   281d8:	e17f8817 	ldw	r5,-480(fp)
   281dc:	e17ea715 	stw	r5,-1380(fp)
   281e0:	e0bea517 	ldw	r2,-1388(fp)
   281e4:	e0bea815 	stw	r2,-1376(fp)
   281e8:	e0fe1617 	ldw	r3,-1960(fp)
   281ec:	e0bea817 	ldw	r2,-1376(fp)
   281f0:	1885883a 	add	r2,r3,r2
   281f4:	e0be1615 	stw	r2,-1960(fp)
   281f8:	e0fe1617 	ldw	r3,-1960(fp)
   281fc:	e0bea817 	ldw	r2,-1376(fp)
   28200:	1880022e 	bgeu	r3,r2,2820c <secp256k1_scalar_reduce_512+0x2778>
   28204:	00c00044 	movi	r3,1
   28208:	00000106 	br	28210 <secp256k1_scalar_reduce_512+0x277c>
   2820c:	0007883a 	mov	r3,zero
   28210:	e0bea717 	ldw	r2,-1380(fp)
   28214:	10c5883a 	add	r2,r2,r3
   28218:	e0bea715 	stw	r2,-1380(fp)
   2821c:	e0fe1717 	ldw	r3,-1956(fp)
   28220:	e0bea717 	ldw	r2,-1380(fp)
   28224:	1885883a 	add	r2,r3,r2
   28228:	e0be1715 	stw	r2,-1956(fp)
   2822c:	e0fe1717 	ldw	r3,-1956(fp)
   28230:	e0bea717 	ldw	r2,-1380(fp)
   28234:	1880022e 	bgeu	r3,r2,28240 <secp256k1_scalar_reduce_512+0x27ac>
   28238:	00c00044 	movi	r3,1
   2823c:	00000106 	br	28244 <secp256k1_scalar_reduce_512+0x27b0>
   28240:	0007883a 	mov	r3,zero
   28244:	e0be1817 	ldw	r2,-1952(fp)
   28248:	10c5883a 	add	r2,r2,r3
   2824c:	e0be1815 	stw	r2,-1952(fp)
   28250:	e0fe1717 	ldw	r3,-1956(fp)
   28254:	e0bea717 	ldw	r2,-1380(fp)
   28258:	1885803a 	cmpltu	r2,r3,r2
   2825c:	10803fcc 	andi	r2,r2,255
   28260:	10001126 	beq	r2,zero,282a8 <secp256k1_scalar_reduce_512+0x2814>
   28264:	e0be1817 	ldw	r2,-1952(fp)
   28268:	1005003a 	cmpeq	r2,r2,zero
   2826c:	10803fcc 	andi	r2,r2,255
   28270:	10000d26 	beq	r2,zero,282a8 <secp256k1_scalar_reduce_512+0x2814>
   28274:	d0a01617 	ldw	r2,-32680(gp)
   28278:	10c00317 	ldw	r3,12(r2)
   2827c:	008001b4 	movhi	r2,6
   28280:	10b02604 	addi	r2,r2,-16232
   28284:	d8800015 	stw	r2,0(sp)
   28288:	01c06704 	movi	r7,412
   2828c:	018001b4 	movhi	r6,6
   28290:	31af9204 	addi	r6,r6,-16824
   28294:	014001b4 	movhi	r5,6
   28298:	296b3804 	addi	r5,r5,-21280
   2829c:	1809883a 	mov	r4,r3
   282a0:	00452600 	call	45260 <fprintf>
   282a4:	00450340 	call	45034 <abort>
    sumadd(n5);
   282a8:	e0fe1617 	ldw	r3,-1960(fp)
   282ac:	e0be1317 	ldw	r2,-1972(fp)
   282b0:	1885883a 	add	r2,r3,r2
   282b4:	e0be1615 	stw	r2,-1960(fp)
   282b8:	e0fe1617 	ldw	r3,-1960(fp)
   282bc:	e0be1317 	ldw	r2,-1972(fp)
   282c0:	1885803a 	cmpltu	r2,r3,r2
   282c4:	10803fcc 	andi	r2,r2,255
   282c8:	e0bea915 	stw	r2,-1372(fp)
   282cc:	e0fe1717 	ldw	r3,-1956(fp)
   282d0:	e0bea917 	ldw	r2,-1372(fp)
   282d4:	1885883a 	add	r2,r3,r2
   282d8:	e0be1715 	stw	r2,-1956(fp)
   282dc:	e0fe1717 	ldw	r3,-1956(fp)
   282e0:	e0bea917 	ldw	r2,-1372(fp)
   282e4:	1880022e 	bgeu	r3,r2,282f0 <secp256k1_scalar_reduce_512+0x285c>
   282e8:	00c00044 	movi	r3,1
   282ec:	00000106 	br	282f4 <secp256k1_scalar_reduce_512+0x2860>
   282f0:	0007883a 	mov	r3,zero
   282f4:	e0be1817 	ldw	r2,-1952(fp)
   282f8:	10c5883a 	add	r2,r2,r3
   282fc:	e0be1815 	stw	r2,-1952(fp)
    extract(m9);
   28300:	e0be1617 	ldw	r2,-1960(fp)
   28304:	e0beaa15 	stw	r2,-1368(fp)
   28308:	e0be1717 	ldw	r2,-1956(fp)
   2830c:	e0be1615 	stw	r2,-1960(fp)
   28310:	e0be1817 	ldw	r2,-1952(fp)
   28314:	e0be1715 	stw	r2,-1956(fp)
   28318:	e03e1815 	stw	zero,-1952(fp)
    muladd(n7, SECP256K1_N_C_3);
   2831c:	e0be1517 	ldw	r2,-1964(fp)
   28320:	e0bf8a15 	stw	r2,-472(fp)
   28324:	e03f8b15 	stw	zero,-468(fp)
   28328:	01915474 	movhi	r6,17745
   2832c:	3188c644 	addi	r6,r6,8985
   28330:	000f883a 	mov	r7,zero
   28334:	e13f8a17 	ldw	r4,-472(fp)
   28338:	e17f8b17 	ldw	r5,-468(fp)
   2833c:	00429400 	call	42940 <__muldi3>
   28340:	1009883a 	mov	r4,r2
   28344:	180b883a 	mov	r5,r3
   28348:	e13eab15 	stw	r4,-1364(fp)
   2834c:	e17eac15 	stw	r5,-1360(fp)
   28350:	e0beac17 	ldw	r2,-1360(fp)
   28354:	1004d83a 	srl	r2,r2,zero
   28358:	e0bf8c15 	stw	r2,-464(fp)
   2835c:	e03f8d15 	stw	zero,-460(fp)
   28360:	e1bf8c17 	ldw	r6,-464(fp)
   28364:	e1bead15 	stw	r6,-1356(fp)
   28368:	e0beab17 	ldw	r2,-1364(fp)
   2836c:	e0beae15 	stw	r2,-1352(fp)
   28370:	e0fe1617 	ldw	r3,-1960(fp)
   28374:	e0beae17 	ldw	r2,-1352(fp)
   28378:	1885883a 	add	r2,r3,r2
   2837c:	e0be1615 	stw	r2,-1960(fp)
   28380:	e0fe1617 	ldw	r3,-1960(fp)
   28384:	e0beae17 	ldw	r2,-1352(fp)
   28388:	1880022e 	bgeu	r3,r2,28394 <secp256k1_scalar_reduce_512+0x2900>
   2838c:	00c00044 	movi	r3,1
   28390:	00000106 	br	28398 <secp256k1_scalar_reduce_512+0x2904>
   28394:	0007883a 	mov	r3,zero
   28398:	e0bead17 	ldw	r2,-1356(fp)
   2839c:	10c5883a 	add	r2,r2,r3
   283a0:	e0bead15 	stw	r2,-1356(fp)
   283a4:	e0fe1717 	ldw	r3,-1956(fp)
   283a8:	e0bead17 	ldw	r2,-1356(fp)
   283ac:	1885883a 	add	r2,r3,r2
   283b0:	e0be1715 	stw	r2,-1956(fp)
   283b4:	e0fe1717 	ldw	r3,-1956(fp)
   283b8:	e0bead17 	ldw	r2,-1356(fp)
   283bc:	1880022e 	bgeu	r3,r2,283c8 <secp256k1_scalar_reduce_512+0x2934>
   283c0:	00c00044 	movi	r3,1
   283c4:	00000106 	br	283cc <secp256k1_scalar_reduce_512+0x2938>
   283c8:	0007883a 	mov	r3,zero
   283cc:	e0be1817 	ldw	r2,-1952(fp)
   283d0:	10c5883a 	add	r2,r2,r3
   283d4:	e0be1815 	stw	r2,-1952(fp)
   283d8:	e0fe1717 	ldw	r3,-1956(fp)
   283dc:	e0bead17 	ldw	r2,-1356(fp)
   283e0:	1885803a 	cmpltu	r2,r3,r2
   283e4:	10803fcc 	andi	r2,r2,255
   283e8:	10001126 	beq	r2,zero,28430 <secp256k1_scalar_reduce_512+0x299c>
   283ec:	e0be1817 	ldw	r2,-1952(fp)
   283f0:	1005003a 	cmpeq	r2,r2,zero
   283f4:	10803fcc 	andi	r2,r2,255
   283f8:	10000d26 	beq	r2,zero,28430 <secp256k1_scalar_reduce_512+0x299c>
   283fc:	d0a01617 	ldw	r2,-32680(gp)
   28400:	10c00317 	ldw	r3,12(r2)
   28404:	008001b4 	movhi	r2,6
   28408:	10b02604 	addi	r2,r2,-16232
   2840c:	d8800015 	stw	r2,0(sp)
   28410:	01c067c4 	movi	r7,415
   28414:	018001b4 	movhi	r6,6
   28418:	31af9204 	addi	r6,r6,-16824
   2841c:	014001b4 	movhi	r5,6
   28420:	296b3804 	addi	r5,r5,-21280
   28424:	1809883a 	mov	r4,r3
   28428:	00452600 	call	45260 <fprintf>
   2842c:	00450340 	call	45034 <abort>
    sumadd(n6);
   28430:	e0fe1617 	ldw	r3,-1960(fp)
   28434:	e0be1417 	ldw	r2,-1968(fp)
   28438:	1885883a 	add	r2,r3,r2
   2843c:	e0be1615 	stw	r2,-1960(fp)
   28440:	e0fe1617 	ldw	r3,-1960(fp)
   28444:	e0be1417 	ldw	r2,-1968(fp)
   28448:	1885803a 	cmpltu	r2,r3,r2
   2844c:	10803fcc 	andi	r2,r2,255
   28450:	e0beaf15 	stw	r2,-1348(fp)
   28454:	e0fe1717 	ldw	r3,-1956(fp)
   28458:	e0beaf17 	ldw	r2,-1348(fp)
   2845c:	1885883a 	add	r2,r3,r2
   28460:	e0be1715 	stw	r2,-1956(fp)
   28464:	e0fe1717 	ldw	r3,-1956(fp)
   28468:	e0beaf17 	ldw	r2,-1348(fp)
   2846c:	1880022e 	bgeu	r3,r2,28478 <secp256k1_scalar_reduce_512+0x29e4>
   28470:	00c00044 	movi	r3,1
   28474:	00000106 	br	2847c <secp256k1_scalar_reduce_512+0x29e8>
   28478:	0007883a 	mov	r3,zero
   2847c:	e0be1817 	ldw	r2,-1952(fp)
   28480:	10c5883a 	add	r2,r2,r3
   28484:	e0be1815 	stw	r2,-1952(fp)
    extract(m10);
   28488:	e0be1617 	ldw	r2,-1960(fp)
   2848c:	e0beb015 	stw	r2,-1344(fp)
   28490:	e0be1717 	ldw	r2,-1956(fp)
   28494:	e0be1615 	stw	r2,-1960(fp)
   28498:	e0be1817 	ldw	r2,-1952(fp)
   2849c:	e0be1715 	stw	r2,-1956(fp)
   284a0:	e03e1815 	stw	zero,-1952(fp)
    sumadd_fast(n7);
   284a4:	e0fe1617 	ldw	r3,-1960(fp)
   284a8:	e0be1517 	ldw	r2,-1964(fp)
   284ac:	1885883a 	add	r2,r3,r2
   284b0:	e0be1615 	stw	r2,-1960(fp)
   284b4:	e0fe1617 	ldw	r3,-1960(fp)
   284b8:	e0be1517 	ldw	r2,-1964(fp)
   284bc:	1880022e 	bgeu	r3,r2,284c8 <secp256k1_scalar_reduce_512+0x2a34>
   284c0:	00c00044 	movi	r3,1
   284c4:	00000106 	br	284cc <secp256k1_scalar_reduce_512+0x2a38>
   284c8:	0007883a 	mov	r3,zero
   284cc:	e0be1717 	ldw	r2,-1956(fp)
   284d0:	10c5883a 	add	r2,r2,r3
   284d4:	e0be1715 	stw	r2,-1956(fp)
   284d8:	e0be1717 	ldw	r2,-1956(fp)
   284dc:	1005003a 	cmpeq	r2,r2,zero
   284e0:	1009883a 	mov	r4,r2
   284e4:	e0fe1617 	ldw	r3,-1960(fp)
   284e8:	e0be1517 	ldw	r2,-1964(fp)
   284ec:	1885803a 	cmpltu	r2,r3,r2
   284f0:	2084703a 	and	r2,r4,r2
   284f4:	10803fcc 	andi	r2,r2,255
   284f8:	10000d26 	beq	r2,zero,28530 <secp256k1_scalar_reduce_512+0x2a9c>
   284fc:	d0a01617 	ldw	r2,-32680(gp)
   28500:	10c00317 	ldw	r3,12(r2)
   28504:	008001b4 	movhi	r2,6
   28508:	10b03204 	addi	r2,r2,-16184
   2850c:	d8800015 	stw	r2,0(sp)
   28510:	01c06884 	movi	r7,418
   28514:	018001b4 	movhi	r6,6
   28518:	31af9204 	addi	r6,r6,-16824
   2851c:	014001b4 	movhi	r5,6
   28520:	296b3804 	addi	r5,r5,-21280
   28524:	1809883a 	mov	r4,r3
   28528:	00452600 	call	45260 <fprintf>
   2852c:	00450340 	call	45034 <abort>
   28530:	e0be1817 	ldw	r2,-1952(fp)
   28534:	1004c03a 	cmpne	r2,r2,zero
   28538:	10803fcc 	andi	r2,r2,255
   2853c:	10000d26 	beq	r2,zero,28574 <secp256k1_scalar_reduce_512+0x2ae0>
   28540:	d0a01617 	ldw	r2,-32680(gp)
   28544:	10c00317 	ldw	r3,12(r2)
   28548:	008001b4 	movhi	r2,6
   2854c:	10b01104 	addi	r2,r2,-16316
   28550:	d8800015 	stw	r2,0(sp)
   28554:	01c06884 	movi	r7,418
   28558:	018001b4 	movhi	r6,6
   2855c:	31af9204 	addi	r6,r6,-16824
   28560:	014001b4 	movhi	r5,6
   28564:	296b3804 	addi	r5,r5,-21280
   28568:	1809883a 	mov	r4,r3
   2856c:	00452600 	call	45260 <fprintf>
   28570:	00450340 	call	45034 <abort>
    extract_fast(m11);
   28574:	e0be1617 	ldw	r2,-1960(fp)
   28578:	e0beb115 	stw	r2,-1340(fp)
   2857c:	e0be1717 	ldw	r2,-1956(fp)
   28580:	e0be1615 	stw	r2,-1960(fp)
   28584:	e03e1715 	stw	zero,-1956(fp)
   28588:	e0be1817 	ldw	r2,-1952(fp)
   2858c:	1004c03a 	cmpne	r2,r2,zero
   28590:	10803fcc 	andi	r2,r2,255
   28594:	10000d26 	beq	r2,zero,285cc <secp256k1_scalar_reduce_512+0x2b38>
   28598:	d0a01617 	ldw	r2,-32680(gp)
   2859c:	10c00317 	ldw	r3,12(r2)
   285a0:	008001b4 	movhi	r2,6
   285a4:	10b01104 	addi	r2,r2,-16316
   285a8:	d8800015 	stw	r2,0(sp)
   285ac:	01c068c4 	movi	r7,419
   285b0:	018001b4 	movhi	r6,6
   285b4:	31af9204 	addi	r6,r6,-16824
   285b8:	014001b4 	movhi	r5,6
   285bc:	296b3804 	addi	r5,r5,-21280
   285c0:	1809883a 	mov	r4,r3
   285c4:	00452600 	call	45260 <fprintf>
   285c8:	00450340 	call	45034 <abort>
    VERIFY_CHECK(c0 <= 1);
   285cc:	e0be1617 	ldw	r2,-1960(fp)
   285d0:	108000a8 	cmpgeui	r2,r2,2
   285d4:	10803fcc 	andi	r2,r2,255
   285d8:	10000d26 	beq	r2,zero,28610 <secp256k1_scalar_reduce_512+0x2b7c>
   285dc:	d0a01617 	ldw	r2,-32680(gp)
   285e0:	10c00317 	ldw	r3,12(r2)
   285e4:	008001b4 	movhi	r2,6
   285e8:	10b03e04 	addi	r2,r2,-16136
   285ec:	d8800015 	stw	r2,0(sp)
   285f0:	01c06904 	movi	r7,420
   285f4:	018001b4 	movhi	r6,6
   285f8:	31af9204 	addi	r6,r6,-16824
   285fc:	014001b4 	movhi	r5,6
   28600:	296b3804 	addi	r5,r5,-21280
   28604:	1809883a 	mov	r4,r3
   28608:	00452600 	call	45260 <fprintf>
   2860c:	00450340 	call	45034 <abort>
    m12 = c0;
   28610:	e0be1617 	ldw	r2,-1960(fp)
   28614:	e0beb215 	stw	r2,-1336(fp)

    /* Reduce 385 bits into 258. */
    /* p[0..8] = m[0..7] + m[8..12] * SECP256K1_N_C. */
    c0 = m0; c1 = 0; c2 = 0;
   28618:	e0be1d17 	ldw	r2,-1932(fp)
   2861c:	e0be1615 	stw	r2,-1960(fp)
   28620:	e03e1715 	stw	zero,-1956(fp)
   28624:	e03e1815 	stw	zero,-1952(fp)
    muladd_fast(m8, SECP256K1_N_C_0);
   28628:	e0bea017 	ldw	r2,-1408(fp)
   2862c:	e0bf8e15 	stw	r2,-456(fp)
   28630:	e03f8f15 	stw	zero,-452(fp)
   28634:	018bf2b4 	movhi	r6,12234
   28638:	31afafc4 	addi	r6,r6,-16705
   2863c:	000f883a 	mov	r7,zero
   28640:	e13f8e17 	ldw	r4,-456(fp)
   28644:	e17f8f17 	ldw	r5,-452(fp)
   28648:	00429400 	call	42940 <__muldi3>
   2864c:	1009883a 	mov	r4,r2
   28650:	180b883a 	mov	r5,r3
   28654:	e13eb315 	stw	r4,-1332(fp)
   28658:	e17eb415 	stw	r5,-1328(fp)
   2865c:	e0beb417 	ldw	r2,-1328(fp)
   28660:	1004d83a 	srl	r2,r2,zero
   28664:	e0bf9015 	stw	r2,-448(fp)
   28668:	e03f9115 	stw	zero,-444(fp)
   2866c:	e1ff9017 	ldw	r7,-448(fp)
   28670:	e1feb515 	stw	r7,-1324(fp)
   28674:	e0beb317 	ldw	r2,-1332(fp)
   28678:	e0beb615 	stw	r2,-1320(fp)
   2867c:	e0fe1617 	ldw	r3,-1960(fp)
   28680:	e0beb617 	ldw	r2,-1320(fp)
   28684:	1885883a 	add	r2,r3,r2
   28688:	e0be1615 	stw	r2,-1960(fp)
   2868c:	e0fe1617 	ldw	r3,-1960(fp)
   28690:	e0beb617 	ldw	r2,-1320(fp)
   28694:	1880022e 	bgeu	r3,r2,286a0 <secp256k1_scalar_reduce_512+0x2c0c>
   28698:	00c00044 	movi	r3,1
   2869c:	00000106 	br	286a4 <secp256k1_scalar_reduce_512+0x2c10>
   286a0:	0007883a 	mov	r3,zero
   286a4:	e0beb517 	ldw	r2,-1324(fp)
   286a8:	10c5883a 	add	r2,r2,r3
   286ac:	e0beb515 	stw	r2,-1324(fp)
   286b0:	e0fe1717 	ldw	r3,-1956(fp)
   286b4:	e0beb517 	ldw	r2,-1324(fp)
   286b8:	1885883a 	add	r2,r3,r2
   286bc:	e0be1715 	stw	r2,-1956(fp)
   286c0:	e0fe1717 	ldw	r3,-1956(fp)
   286c4:	e0beb517 	ldw	r2,-1324(fp)
   286c8:	1885803a 	cmpltu	r2,r3,r2
   286cc:	10803fcc 	andi	r2,r2,255
   286d0:	10000d26 	beq	r2,zero,28708 <secp256k1_scalar_reduce_512+0x2c74>
   286d4:	d0a01617 	ldw	r2,-32680(gp)
   286d8:	10c00317 	ldw	r3,12(r2)
   286dc:	008001b4 	movhi	r2,6
   286e0:	10b00904 	addi	r2,r2,-16348
   286e4:	d8800015 	stw	r2,0(sp)
   286e8:	01c06a84 	movi	r7,426
   286ec:	018001b4 	movhi	r6,6
   286f0:	31af9204 	addi	r6,r6,-16824
   286f4:	014001b4 	movhi	r5,6
   286f8:	296b3804 	addi	r5,r5,-21280
   286fc:	1809883a 	mov	r4,r3
   28700:	00452600 	call	45260 <fprintf>
   28704:	00450340 	call	45034 <abort>
    extract_fast(p0);
   28708:	e0be1617 	ldw	r2,-1960(fp)
   2870c:	e0beb715 	stw	r2,-1316(fp)
   28710:	e0be1717 	ldw	r2,-1956(fp)
   28714:	e0be1615 	stw	r2,-1960(fp)
   28718:	e03e1715 	stw	zero,-1956(fp)
   2871c:	e0be1817 	ldw	r2,-1952(fp)
   28720:	1004c03a 	cmpne	r2,r2,zero
   28724:	10803fcc 	andi	r2,r2,255
   28728:	10000d26 	beq	r2,zero,28760 <secp256k1_scalar_reduce_512+0x2ccc>
   2872c:	d0a01617 	ldw	r2,-32680(gp)
   28730:	10c00317 	ldw	r3,12(r2)
   28734:	008001b4 	movhi	r2,6
   28738:	10b01104 	addi	r2,r2,-16316
   2873c:	d8800015 	stw	r2,0(sp)
   28740:	01c06ac4 	movi	r7,427
   28744:	018001b4 	movhi	r6,6
   28748:	31af9204 	addi	r6,r6,-16824
   2874c:	014001b4 	movhi	r5,6
   28750:	296b3804 	addi	r5,r5,-21280
   28754:	1809883a 	mov	r4,r3
   28758:	00452600 	call	45260 <fprintf>
   2875c:	00450340 	call	45034 <abort>
    sumadd_fast(m1);
   28760:	e0fe1617 	ldw	r3,-1960(fp)
   28764:	e0be2617 	ldw	r2,-1896(fp)
   28768:	1885883a 	add	r2,r3,r2
   2876c:	e0be1615 	stw	r2,-1960(fp)
   28770:	e0fe1617 	ldw	r3,-1960(fp)
   28774:	e0be2617 	ldw	r2,-1896(fp)
   28778:	1880022e 	bgeu	r3,r2,28784 <secp256k1_scalar_reduce_512+0x2cf0>
   2877c:	00c00044 	movi	r3,1
   28780:	00000106 	br	28788 <secp256k1_scalar_reduce_512+0x2cf4>
   28784:	0007883a 	mov	r3,zero
   28788:	e0be1717 	ldw	r2,-1956(fp)
   2878c:	10c5883a 	add	r2,r2,r3
   28790:	e0be1715 	stw	r2,-1956(fp)
   28794:	e0be1717 	ldw	r2,-1956(fp)
   28798:	1005003a 	cmpeq	r2,r2,zero
   2879c:	1009883a 	mov	r4,r2
   287a0:	e0fe1617 	ldw	r3,-1960(fp)
   287a4:	e0be2617 	ldw	r2,-1896(fp)
   287a8:	1885803a 	cmpltu	r2,r3,r2
   287ac:	2084703a 	and	r2,r4,r2
   287b0:	10803fcc 	andi	r2,r2,255
   287b4:	10000d26 	beq	r2,zero,287ec <secp256k1_scalar_reduce_512+0x2d58>
   287b8:	d0a01617 	ldw	r2,-32680(gp)
   287bc:	10c00317 	ldw	r3,12(r2)
   287c0:	008001b4 	movhi	r2,6
   287c4:	10b04604 	addi	r2,r2,-16104
   287c8:	d8800015 	stw	r2,0(sp)
   287cc:	01c06b04 	movi	r7,428
   287d0:	018001b4 	movhi	r6,6
   287d4:	31af9204 	addi	r6,r6,-16824
   287d8:	014001b4 	movhi	r5,6
   287dc:	296b3804 	addi	r5,r5,-21280
   287e0:	1809883a 	mov	r4,r3
   287e4:	00452600 	call	45260 <fprintf>
   287e8:	00450340 	call	45034 <abort>
   287ec:	e0be1817 	ldw	r2,-1952(fp)
   287f0:	1004c03a 	cmpne	r2,r2,zero
   287f4:	10803fcc 	andi	r2,r2,255
   287f8:	10000d26 	beq	r2,zero,28830 <secp256k1_scalar_reduce_512+0x2d9c>
   287fc:	d0a01617 	ldw	r2,-32680(gp)
   28800:	10c00317 	ldw	r3,12(r2)
   28804:	008001b4 	movhi	r2,6
   28808:	10b01104 	addi	r2,r2,-16316
   2880c:	d8800015 	stw	r2,0(sp)
   28810:	01c06b04 	movi	r7,428
   28814:	018001b4 	movhi	r6,6
   28818:	31af9204 	addi	r6,r6,-16824
   2881c:	014001b4 	movhi	r5,6
   28820:	296b3804 	addi	r5,r5,-21280
   28824:	1809883a 	mov	r4,r3
   28828:	00452600 	call	45260 <fprintf>
   2882c:	00450340 	call	45034 <abort>
    muladd(m9, SECP256K1_N_C_0);
   28830:	e0beaa17 	ldw	r2,-1368(fp)
   28834:	e0bf9215 	stw	r2,-440(fp)
   28838:	e03f9315 	stw	zero,-436(fp)
   2883c:	018bf2b4 	movhi	r6,12234
   28840:	31afafc4 	addi	r6,r6,-16705
   28844:	000f883a 	mov	r7,zero
   28848:	e13f9217 	ldw	r4,-440(fp)
   2884c:	e17f9317 	ldw	r5,-436(fp)
   28850:	00429400 	call	42940 <__muldi3>
   28854:	1009883a 	mov	r4,r2
   28858:	180b883a 	mov	r5,r3
   2885c:	e13eb815 	stw	r4,-1312(fp)
   28860:	e17eb915 	stw	r5,-1308(fp)
   28864:	e0beb917 	ldw	r2,-1308(fp)
   28868:	1004d83a 	srl	r2,r2,zero
   2886c:	e0bf9415 	stw	r2,-432(fp)
   28870:	e03f9515 	stw	zero,-428(fp)
   28874:	e0bf9417 	ldw	r2,-432(fp)
   28878:	e0beba15 	stw	r2,-1304(fp)
   2887c:	e0beb817 	ldw	r2,-1312(fp)
   28880:	e0bebb15 	stw	r2,-1300(fp)
   28884:	e0fe1617 	ldw	r3,-1960(fp)
   28888:	e0bebb17 	ldw	r2,-1300(fp)
   2888c:	1885883a 	add	r2,r3,r2
   28890:	e0be1615 	stw	r2,-1960(fp)
   28894:	e0fe1617 	ldw	r3,-1960(fp)
   28898:	e0bebb17 	ldw	r2,-1300(fp)
   2889c:	1880022e 	bgeu	r3,r2,288a8 <secp256k1_scalar_reduce_512+0x2e14>
   288a0:	00c00044 	movi	r3,1
   288a4:	00000106 	br	288ac <secp256k1_scalar_reduce_512+0x2e18>
   288a8:	0007883a 	mov	r3,zero
   288ac:	e0beba17 	ldw	r2,-1304(fp)
   288b0:	10c5883a 	add	r2,r2,r3
   288b4:	e0beba15 	stw	r2,-1304(fp)
   288b8:	e0fe1717 	ldw	r3,-1956(fp)
   288bc:	e0beba17 	ldw	r2,-1304(fp)
   288c0:	1885883a 	add	r2,r3,r2
   288c4:	e0be1715 	stw	r2,-1956(fp)
   288c8:	e0fe1717 	ldw	r3,-1956(fp)
   288cc:	e0beba17 	ldw	r2,-1304(fp)
   288d0:	1880022e 	bgeu	r3,r2,288dc <secp256k1_scalar_reduce_512+0x2e48>
   288d4:	00c00044 	movi	r3,1
   288d8:	00000106 	br	288e0 <secp256k1_scalar_reduce_512+0x2e4c>
   288dc:	0007883a 	mov	r3,zero
   288e0:	e0be1817 	ldw	r2,-1952(fp)
   288e4:	10c5883a 	add	r2,r2,r3
   288e8:	e0be1815 	stw	r2,-1952(fp)
   288ec:	e0fe1717 	ldw	r3,-1956(fp)
   288f0:	e0beba17 	ldw	r2,-1304(fp)
   288f4:	1885803a 	cmpltu	r2,r3,r2
   288f8:	10803fcc 	andi	r2,r2,255
   288fc:	10001126 	beq	r2,zero,28944 <secp256k1_scalar_reduce_512+0x2eb0>
   28900:	e0be1817 	ldw	r2,-1952(fp)
   28904:	1005003a 	cmpeq	r2,r2,zero
   28908:	10803fcc 	andi	r2,r2,255
   2890c:	10000d26 	beq	r2,zero,28944 <secp256k1_scalar_reduce_512+0x2eb0>
   28910:	d0a01617 	ldw	r2,-32680(gp)
   28914:	10c00317 	ldw	r3,12(r2)
   28918:	008001b4 	movhi	r2,6
   2891c:	10b02604 	addi	r2,r2,-16232
   28920:	d8800015 	stw	r2,0(sp)
   28924:	01c06b44 	movi	r7,429
   28928:	018001b4 	movhi	r6,6
   2892c:	31af9204 	addi	r6,r6,-16824
   28930:	014001b4 	movhi	r5,6
   28934:	296b3804 	addi	r5,r5,-21280
   28938:	1809883a 	mov	r4,r3
   2893c:	00452600 	call	45260 <fprintf>
   28940:	00450340 	call	45034 <abort>
    muladd(m8, SECP256K1_N_C_1);
   28944:	e0bea017 	ldw	r2,-1408(fp)
   28948:	e0bf9615 	stw	r2,-424(fp)
   2894c:	e03f9715 	stw	zero,-420(fp)
   28950:	01900bb4 	movhi	r6,16430
   28954:	31a85cc4 	addi	r6,r6,-24205
   28958:	000f883a 	mov	r7,zero
   2895c:	e13f9617 	ldw	r4,-424(fp)
   28960:	e17f9717 	ldw	r5,-420(fp)
   28964:	00429400 	call	42940 <__muldi3>
   28968:	1009883a 	mov	r4,r2
   2896c:	180b883a 	mov	r5,r3
   28970:	e13ebc15 	stw	r4,-1296(fp)
   28974:	e17ebd15 	stw	r5,-1292(fp)
   28978:	e0bebd17 	ldw	r2,-1292(fp)
   2897c:	1004d83a 	srl	r2,r2,zero
   28980:	e0bf9815 	stw	r2,-416(fp)
   28984:	e03f9915 	stw	zero,-412(fp)
   28988:	e13f9817 	ldw	r4,-416(fp)
   2898c:	e13ebe15 	stw	r4,-1288(fp)
   28990:	e0bebc17 	ldw	r2,-1296(fp)
   28994:	e0bebf15 	stw	r2,-1284(fp)
   28998:	e0fe1617 	ldw	r3,-1960(fp)
   2899c:	e0bebf17 	ldw	r2,-1284(fp)
   289a0:	1885883a 	add	r2,r3,r2
   289a4:	e0be1615 	stw	r2,-1960(fp)
   289a8:	e0fe1617 	ldw	r3,-1960(fp)
   289ac:	e0bebf17 	ldw	r2,-1284(fp)
   289b0:	1880022e 	bgeu	r3,r2,289bc <secp256k1_scalar_reduce_512+0x2f28>
   289b4:	00c00044 	movi	r3,1
   289b8:	00000106 	br	289c0 <secp256k1_scalar_reduce_512+0x2f2c>
   289bc:	0007883a 	mov	r3,zero
   289c0:	e0bebe17 	ldw	r2,-1288(fp)
   289c4:	10c5883a 	add	r2,r2,r3
   289c8:	e0bebe15 	stw	r2,-1288(fp)
   289cc:	e0fe1717 	ldw	r3,-1956(fp)
   289d0:	e0bebe17 	ldw	r2,-1288(fp)
   289d4:	1885883a 	add	r2,r3,r2
   289d8:	e0be1715 	stw	r2,-1956(fp)
   289dc:	e0fe1717 	ldw	r3,-1956(fp)
   289e0:	e0bebe17 	ldw	r2,-1288(fp)
   289e4:	1880022e 	bgeu	r3,r2,289f0 <secp256k1_scalar_reduce_512+0x2f5c>
   289e8:	00c00044 	movi	r3,1
   289ec:	00000106 	br	289f4 <secp256k1_scalar_reduce_512+0x2f60>
   289f0:	0007883a 	mov	r3,zero
   289f4:	e0be1817 	ldw	r2,-1952(fp)
   289f8:	10c5883a 	add	r2,r2,r3
   289fc:	e0be1815 	stw	r2,-1952(fp)
   28a00:	e0fe1717 	ldw	r3,-1956(fp)
   28a04:	e0bebe17 	ldw	r2,-1288(fp)
   28a08:	1885803a 	cmpltu	r2,r3,r2
   28a0c:	10803fcc 	andi	r2,r2,255
   28a10:	10001126 	beq	r2,zero,28a58 <secp256k1_scalar_reduce_512+0x2fc4>
   28a14:	e0be1817 	ldw	r2,-1952(fp)
   28a18:	1005003a 	cmpeq	r2,r2,zero
   28a1c:	10803fcc 	andi	r2,r2,255
   28a20:	10000d26 	beq	r2,zero,28a58 <secp256k1_scalar_reduce_512+0x2fc4>
   28a24:	d0a01617 	ldw	r2,-32680(gp)
   28a28:	10c00317 	ldw	r3,12(r2)
   28a2c:	008001b4 	movhi	r2,6
   28a30:	10b02604 	addi	r2,r2,-16232
   28a34:	d8800015 	stw	r2,0(sp)
   28a38:	01c06b84 	movi	r7,430
   28a3c:	018001b4 	movhi	r6,6
   28a40:	31af9204 	addi	r6,r6,-16824
   28a44:	014001b4 	movhi	r5,6
   28a48:	296b3804 	addi	r5,r5,-21280
   28a4c:	1809883a 	mov	r4,r3
   28a50:	00452600 	call	45260 <fprintf>
   28a54:	00450340 	call	45034 <abort>
    extract(p1);
   28a58:	e0be1617 	ldw	r2,-1960(fp)
   28a5c:	e0bec015 	stw	r2,-1280(fp)
   28a60:	e0be1717 	ldw	r2,-1956(fp)
   28a64:	e0be1615 	stw	r2,-1960(fp)
   28a68:	e0be1817 	ldw	r2,-1952(fp)
   28a6c:	e0be1715 	stw	r2,-1956(fp)
   28a70:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m2);
   28a74:	e0fe1617 	ldw	r3,-1960(fp)
   28a78:	e0be3417 	ldw	r2,-1840(fp)
   28a7c:	1885883a 	add	r2,r3,r2
   28a80:	e0be1615 	stw	r2,-1960(fp)
   28a84:	e0fe1617 	ldw	r3,-1960(fp)
   28a88:	e0be3417 	ldw	r2,-1840(fp)
   28a8c:	1885803a 	cmpltu	r2,r3,r2
   28a90:	10803fcc 	andi	r2,r2,255
   28a94:	e0bec115 	stw	r2,-1276(fp)
   28a98:	e0fe1717 	ldw	r3,-1956(fp)
   28a9c:	e0bec117 	ldw	r2,-1276(fp)
   28aa0:	1885883a 	add	r2,r3,r2
   28aa4:	e0be1715 	stw	r2,-1956(fp)
   28aa8:	e0fe1717 	ldw	r3,-1956(fp)
   28aac:	e0bec117 	ldw	r2,-1276(fp)
   28ab0:	1880022e 	bgeu	r3,r2,28abc <secp256k1_scalar_reduce_512+0x3028>
   28ab4:	00c00044 	movi	r3,1
   28ab8:	00000106 	br	28ac0 <secp256k1_scalar_reduce_512+0x302c>
   28abc:	0007883a 	mov	r3,zero
   28ac0:	e0be1817 	ldw	r2,-1952(fp)
   28ac4:	10c5883a 	add	r2,r2,r3
   28ac8:	e0be1815 	stw	r2,-1952(fp)
    muladd(m10, SECP256K1_N_C_0);
   28acc:	e0beb017 	ldw	r2,-1344(fp)
   28ad0:	e0bf9a15 	stw	r2,-408(fp)
   28ad4:	e03f9b15 	stw	zero,-404(fp)
   28ad8:	018bf2b4 	movhi	r6,12234
   28adc:	31afafc4 	addi	r6,r6,-16705
   28ae0:	000f883a 	mov	r7,zero
   28ae4:	e13f9a17 	ldw	r4,-408(fp)
   28ae8:	e17f9b17 	ldw	r5,-404(fp)
   28aec:	00429400 	call	42940 <__muldi3>
   28af0:	1009883a 	mov	r4,r2
   28af4:	180b883a 	mov	r5,r3
   28af8:	e13ec215 	stw	r4,-1272(fp)
   28afc:	e17ec315 	stw	r5,-1268(fp)
   28b00:	e0bec317 	ldw	r2,-1268(fp)
   28b04:	1004d83a 	srl	r2,r2,zero
   28b08:	e0bf9c15 	stw	r2,-400(fp)
   28b0c:	e03f9d15 	stw	zero,-396(fp)
   28b10:	e17f9c17 	ldw	r5,-400(fp)
   28b14:	e17ec415 	stw	r5,-1264(fp)
   28b18:	e0bec217 	ldw	r2,-1272(fp)
   28b1c:	e0bec515 	stw	r2,-1260(fp)
   28b20:	e0fe1617 	ldw	r3,-1960(fp)
   28b24:	e0bec517 	ldw	r2,-1260(fp)
   28b28:	1885883a 	add	r2,r3,r2
   28b2c:	e0be1615 	stw	r2,-1960(fp)
   28b30:	e0fe1617 	ldw	r3,-1960(fp)
   28b34:	e0bec517 	ldw	r2,-1260(fp)
   28b38:	1880022e 	bgeu	r3,r2,28b44 <secp256k1_scalar_reduce_512+0x30b0>
   28b3c:	00c00044 	movi	r3,1
   28b40:	00000106 	br	28b48 <secp256k1_scalar_reduce_512+0x30b4>
   28b44:	0007883a 	mov	r3,zero
   28b48:	e0bec417 	ldw	r2,-1264(fp)
   28b4c:	10c5883a 	add	r2,r2,r3
   28b50:	e0bec415 	stw	r2,-1264(fp)
   28b54:	e0fe1717 	ldw	r3,-1956(fp)
   28b58:	e0bec417 	ldw	r2,-1264(fp)
   28b5c:	1885883a 	add	r2,r3,r2
   28b60:	e0be1715 	stw	r2,-1956(fp)
   28b64:	e0fe1717 	ldw	r3,-1956(fp)
   28b68:	e0bec417 	ldw	r2,-1264(fp)
   28b6c:	1880022e 	bgeu	r3,r2,28b78 <secp256k1_scalar_reduce_512+0x30e4>
   28b70:	00c00044 	movi	r3,1
   28b74:	00000106 	br	28b7c <secp256k1_scalar_reduce_512+0x30e8>
   28b78:	0007883a 	mov	r3,zero
   28b7c:	e0be1817 	ldw	r2,-1952(fp)
   28b80:	10c5883a 	add	r2,r2,r3
   28b84:	e0be1815 	stw	r2,-1952(fp)
   28b88:	e0fe1717 	ldw	r3,-1956(fp)
   28b8c:	e0bec417 	ldw	r2,-1264(fp)
   28b90:	1885803a 	cmpltu	r2,r3,r2
   28b94:	10803fcc 	andi	r2,r2,255
   28b98:	10001126 	beq	r2,zero,28be0 <secp256k1_scalar_reduce_512+0x314c>
   28b9c:	e0be1817 	ldw	r2,-1952(fp)
   28ba0:	1005003a 	cmpeq	r2,r2,zero
   28ba4:	10803fcc 	andi	r2,r2,255
   28ba8:	10000d26 	beq	r2,zero,28be0 <secp256k1_scalar_reduce_512+0x314c>
   28bac:	d0a01617 	ldw	r2,-32680(gp)
   28bb0:	10c00317 	ldw	r3,12(r2)
   28bb4:	008001b4 	movhi	r2,6
   28bb8:	10b02604 	addi	r2,r2,-16232
   28bbc:	d8800015 	stw	r2,0(sp)
   28bc0:	01c06c44 	movi	r7,433
   28bc4:	018001b4 	movhi	r6,6
   28bc8:	31af9204 	addi	r6,r6,-16824
   28bcc:	014001b4 	movhi	r5,6
   28bd0:	296b3804 	addi	r5,r5,-21280
   28bd4:	1809883a 	mov	r4,r3
   28bd8:	00452600 	call	45260 <fprintf>
   28bdc:	00450340 	call	45034 <abort>
    muladd(m9, SECP256K1_N_C_1);
   28be0:	e0beaa17 	ldw	r2,-1368(fp)
   28be4:	e0bf9e15 	stw	r2,-392(fp)
   28be8:	e03f9f15 	stw	zero,-388(fp)
   28bec:	01900bb4 	movhi	r6,16430
   28bf0:	31a85cc4 	addi	r6,r6,-24205
   28bf4:	000f883a 	mov	r7,zero
   28bf8:	e13f9e17 	ldw	r4,-392(fp)
   28bfc:	e17f9f17 	ldw	r5,-388(fp)
   28c00:	00429400 	call	42940 <__muldi3>
   28c04:	1009883a 	mov	r4,r2
   28c08:	180b883a 	mov	r5,r3
   28c0c:	e13ec615 	stw	r4,-1256(fp)
   28c10:	e17ec715 	stw	r5,-1252(fp)
   28c14:	e0bec717 	ldw	r2,-1252(fp)
   28c18:	1004d83a 	srl	r2,r2,zero
   28c1c:	e0bfa015 	stw	r2,-384(fp)
   28c20:	e03fa115 	stw	zero,-380(fp)
   28c24:	e1bfa017 	ldw	r6,-384(fp)
   28c28:	e1bec815 	stw	r6,-1248(fp)
   28c2c:	e0bec617 	ldw	r2,-1256(fp)
   28c30:	e0bec915 	stw	r2,-1244(fp)
   28c34:	e0fe1617 	ldw	r3,-1960(fp)
   28c38:	e0bec917 	ldw	r2,-1244(fp)
   28c3c:	1885883a 	add	r2,r3,r2
   28c40:	e0be1615 	stw	r2,-1960(fp)
   28c44:	e0fe1617 	ldw	r3,-1960(fp)
   28c48:	e0bec917 	ldw	r2,-1244(fp)
   28c4c:	1880022e 	bgeu	r3,r2,28c58 <secp256k1_scalar_reduce_512+0x31c4>
   28c50:	00c00044 	movi	r3,1
   28c54:	00000106 	br	28c5c <secp256k1_scalar_reduce_512+0x31c8>
   28c58:	0007883a 	mov	r3,zero
   28c5c:	e0bec817 	ldw	r2,-1248(fp)
   28c60:	10c5883a 	add	r2,r2,r3
   28c64:	e0bec815 	stw	r2,-1248(fp)
   28c68:	e0fe1717 	ldw	r3,-1956(fp)
   28c6c:	e0bec817 	ldw	r2,-1248(fp)
   28c70:	1885883a 	add	r2,r3,r2
   28c74:	e0be1715 	stw	r2,-1956(fp)
   28c78:	e0fe1717 	ldw	r3,-1956(fp)
   28c7c:	e0bec817 	ldw	r2,-1248(fp)
   28c80:	1880022e 	bgeu	r3,r2,28c8c <secp256k1_scalar_reduce_512+0x31f8>
   28c84:	00c00044 	movi	r3,1
   28c88:	00000106 	br	28c90 <secp256k1_scalar_reduce_512+0x31fc>
   28c8c:	0007883a 	mov	r3,zero
   28c90:	e0be1817 	ldw	r2,-1952(fp)
   28c94:	10c5883a 	add	r2,r2,r3
   28c98:	e0be1815 	stw	r2,-1952(fp)
   28c9c:	e0fe1717 	ldw	r3,-1956(fp)
   28ca0:	e0bec817 	ldw	r2,-1248(fp)
   28ca4:	1885803a 	cmpltu	r2,r3,r2
   28ca8:	10803fcc 	andi	r2,r2,255
   28cac:	10001126 	beq	r2,zero,28cf4 <secp256k1_scalar_reduce_512+0x3260>
   28cb0:	e0be1817 	ldw	r2,-1952(fp)
   28cb4:	1005003a 	cmpeq	r2,r2,zero
   28cb8:	10803fcc 	andi	r2,r2,255
   28cbc:	10000d26 	beq	r2,zero,28cf4 <secp256k1_scalar_reduce_512+0x3260>
   28cc0:	d0a01617 	ldw	r2,-32680(gp)
   28cc4:	10c00317 	ldw	r3,12(r2)
   28cc8:	008001b4 	movhi	r2,6
   28ccc:	10b02604 	addi	r2,r2,-16232
   28cd0:	d8800015 	stw	r2,0(sp)
   28cd4:	01c06c84 	movi	r7,434
   28cd8:	018001b4 	movhi	r6,6
   28cdc:	31af9204 	addi	r6,r6,-16824
   28ce0:	014001b4 	movhi	r5,6
   28ce4:	296b3804 	addi	r5,r5,-21280
   28ce8:	1809883a 	mov	r4,r3
   28cec:	00452600 	call	45260 <fprintf>
   28cf0:	00450340 	call	45034 <abort>
    muladd(m8, SECP256K1_N_C_2);
   28cf4:	e0bea017 	ldw	r2,-1408(fp)
   28cf8:	e0bfa215 	stw	r2,-376(fp)
   28cfc:	e03fa315 	stw	zero,-372(fp)
   28d00:	01942df4 	movhi	r6,20663
   28d04:	3197f104 	addi	r6,r6,24516
   28d08:	000f883a 	mov	r7,zero
   28d0c:	e13fa217 	ldw	r4,-376(fp)
   28d10:	e17fa317 	ldw	r5,-372(fp)
   28d14:	00429400 	call	42940 <__muldi3>
   28d18:	1009883a 	mov	r4,r2
   28d1c:	180b883a 	mov	r5,r3
   28d20:	e13eca15 	stw	r4,-1240(fp)
   28d24:	e17ecb15 	stw	r5,-1236(fp)
   28d28:	e0becb17 	ldw	r2,-1236(fp)
   28d2c:	1004d83a 	srl	r2,r2,zero
   28d30:	e0bfa415 	stw	r2,-368(fp)
   28d34:	e03fa515 	stw	zero,-364(fp)
   28d38:	e1ffa417 	ldw	r7,-368(fp)
   28d3c:	e1fecc15 	stw	r7,-1232(fp)
   28d40:	e0beca17 	ldw	r2,-1240(fp)
   28d44:	e0becd15 	stw	r2,-1228(fp)
   28d48:	e0fe1617 	ldw	r3,-1960(fp)
   28d4c:	e0becd17 	ldw	r2,-1228(fp)
   28d50:	1885883a 	add	r2,r3,r2
   28d54:	e0be1615 	stw	r2,-1960(fp)
   28d58:	e0fe1617 	ldw	r3,-1960(fp)
   28d5c:	e0becd17 	ldw	r2,-1228(fp)
   28d60:	1880022e 	bgeu	r3,r2,28d6c <secp256k1_scalar_reduce_512+0x32d8>
   28d64:	00c00044 	movi	r3,1
   28d68:	00000106 	br	28d70 <secp256k1_scalar_reduce_512+0x32dc>
   28d6c:	0007883a 	mov	r3,zero
   28d70:	e0becc17 	ldw	r2,-1232(fp)
   28d74:	10c5883a 	add	r2,r2,r3
   28d78:	e0becc15 	stw	r2,-1232(fp)
   28d7c:	e0fe1717 	ldw	r3,-1956(fp)
   28d80:	e0becc17 	ldw	r2,-1232(fp)
   28d84:	1885883a 	add	r2,r3,r2
   28d88:	e0be1715 	stw	r2,-1956(fp)
   28d8c:	e0fe1717 	ldw	r3,-1956(fp)
   28d90:	e0becc17 	ldw	r2,-1232(fp)
   28d94:	1880022e 	bgeu	r3,r2,28da0 <secp256k1_scalar_reduce_512+0x330c>
   28d98:	00c00044 	movi	r3,1
   28d9c:	00000106 	br	28da4 <secp256k1_scalar_reduce_512+0x3310>
   28da0:	0007883a 	mov	r3,zero
   28da4:	e0be1817 	ldw	r2,-1952(fp)
   28da8:	10c5883a 	add	r2,r2,r3
   28dac:	e0be1815 	stw	r2,-1952(fp)
   28db0:	e0fe1717 	ldw	r3,-1956(fp)
   28db4:	e0becc17 	ldw	r2,-1232(fp)
   28db8:	1885803a 	cmpltu	r2,r3,r2
   28dbc:	10803fcc 	andi	r2,r2,255
   28dc0:	10001126 	beq	r2,zero,28e08 <secp256k1_scalar_reduce_512+0x3374>
   28dc4:	e0be1817 	ldw	r2,-1952(fp)
   28dc8:	1005003a 	cmpeq	r2,r2,zero
   28dcc:	10803fcc 	andi	r2,r2,255
   28dd0:	10000d26 	beq	r2,zero,28e08 <secp256k1_scalar_reduce_512+0x3374>
   28dd4:	d0a01617 	ldw	r2,-32680(gp)
   28dd8:	10c00317 	ldw	r3,12(r2)
   28ddc:	008001b4 	movhi	r2,6
   28de0:	10b02604 	addi	r2,r2,-16232
   28de4:	d8800015 	stw	r2,0(sp)
   28de8:	01c06cc4 	movi	r7,435
   28dec:	018001b4 	movhi	r6,6
   28df0:	31af9204 	addi	r6,r6,-16824
   28df4:	014001b4 	movhi	r5,6
   28df8:	296b3804 	addi	r5,r5,-21280
   28dfc:	1809883a 	mov	r4,r3
   28e00:	00452600 	call	45260 <fprintf>
   28e04:	00450340 	call	45034 <abort>
    extract(p2);
   28e08:	e0be1617 	ldw	r2,-1960(fp)
   28e0c:	e0bece15 	stw	r2,-1224(fp)
   28e10:	e0be1717 	ldw	r2,-1956(fp)
   28e14:	e0be1615 	stw	r2,-1960(fp)
   28e18:	e0be1817 	ldw	r2,-1952(fp)
   28e1c:	e0be1715 	stw	r2,-1956(fp)
   28e20:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m3);
   28e24:	e0fe1617 	ldw	r3,-1960(fp)
   28e28:	e0be4617 	ldw	r2,-1768(fp)
   28e2c:	1885883a 	add	r2,r3,r2
   28e30:	e0be1615 	stw	r2,-1960(fp)
   28e34:	e0fe1617 	ldw	r3,-1960(fp)
   28e38:	e0be4617 	ldw	r2,-1768(fp)
   28e3c:	1885803a 	cmpltu	r2,r3,r2
   28e40:	10803fcc 	andi	r2,r2,255
   28e44:	e0becf15 	stw	r2,-1220(fp)
   28e48:	e0fe1717 	ldw	r3,-1956(fp)
   28e4c:	e0becf17 	ldw	r2,-1220(fp)
   28e50:	1885883a 	add	r2,r3,r2
   28e54:	e0be1715 	stw	r2,-1956(fp)
   28e58:	e0fe1717 	ldw	r3,-1956(fp)
   28e5c:	e0becf17 	ldw	r2,-1220(fp)
   28e60:	1880022e 	bgeu	r3,r2,28e6c <secp256k1_scalar_reduce_512+0x33d8>
   28e64:	00c00044 	movi	r3,1
   28e68:	00000106 	br	28e70 <secp256k1_scalar_reduce_512+0x33dc>
   28e6c:	0007883a 	mov	r3,zero
   28e70:	e0be1817 	ldw	r2,-1952(fp)
   28e74:	10c5883a 	add	r2,r2,r3
   28e78:	e0be1815 	stw	r2,-1952(fp)
    muladd(m11, SECP256K1_N_C_0);
   28e7c:	e0beb117 	ldw	r2,-1340(fp)
   28e80:	e0bfa615 	stw	r2,-360(fp)
   28e84:	e03fa715 	stw	zero,-356(fp)
   28e88:	018bf2b4 	movhi	r6,12234
   28e8c:	31afafc4 	addi	r6,r6,-16705
   28e90:	000f883a 	mov	r7,zero
   28e94:	e13fa617 	ldw	r4,-360(fp)
   28e98:	e17fa717 	ldw	r5,-356(fp)
   28e9c:	00429400 	call	42940 <__muldi3>
   28ea0:	1009883a 	mov	r4,r2
   28ea4:	180b883a 	mov	r5,r3
   28ea8:	e13ed015 	stw	r4,-1216(fp)
   28eac:	e17ed115 	stw	r5,-1212(fp)
   28eb0:	e0bed117 	ldw	r2,-1212(fp)
   28eb4:	1004d83a 	srl	r2,r2,zero
   28eb8:	e0bfa815 	stw	r2,-352(fp)
   28ebc:	e03fa915 	stw	zero,-348(fp)
   28ec0:	e0bfa817 	ldw	r2,-352(fp)
   28ec4:	e0bed215 	stw	r2,-1208(fp)
   28ec8:	e0bed017 	ldw	r2,-1216(fp)
   28ecc:	e0bed315 	stw	r2,-1204(fp)
   28ed0:	e0fe1617 	ldw	r3,-1960(fp)
   28ed4:	e0bed317 	ldw	r2,-1204(fp)
   28ed8:	1885883a 	add	r2,r3,r2
   28edc:	e0be1615 	stw	r2,-1960(fp)
   28ee0:	e0fe1617 	ldw	r3,-1960(fp)
   28ee4:	e0bed317 	ldw	r2,-1204(fp)
   28ee8:	1880022e 	bgeu	r3,r2,28ef4 <secp256k1_scalar_reduce_512+0x3460>
   28eec:	00c00044 	movi	r3,1
   28ef0:	00000106 	br	28ef8 <secp256k1_scalar_reduce_512+0x3464>
   28ef4:	0007883a 	mov	r3,zero
   28ef8:	e0bed217 	ldw	r2,-1208(fp)
   28efc:	10c5883a 	add	r2,r2,r3
   28f00:	e0bed215 	stw	r2,-1208(fp)
   28f04:	e0fe1717 	ldw	r3,-1956(fp)
   28f08:	e0bed217 	ldw	r2,-1208(fp)
   28f0c:	1885883a 	add	r2,r3,r2
   28f10:	e0be1715 	stw	r2,-1956(fp)
   28f14:	e0fe1717 	ldw	r3,-1956(fp)
   28f18:	e0bed217 	ldw	r2,-1208(fp)
   28f1c:	1880022e 	bgeu	r3,r2,28f28 <secp256k1_scalar_reduce_512+0x3494>
   28f20:	00c00044 	movi	r3,1
   28f24:	00000106 	br	28f2c <secp256k1_scalar_reduce_512+0x3498>
   28f28:	0007883a 	mov	r3,zero
   28f2c:	e0be1817 	ldw	r2,-1952(fp)
   28f30:	10c5883a 	add	r2,r2,r3
   28f34:	e0be1815 	stw	r2,-1952(fp)
   28f38:	e0fe1717 	ldw	r3,-1956(fp)
   28f3c:	e0bed217 	ldw	r2,-1208(fp)
   28f40:	1885803a 	cmpltu	r2,r3,r2
   28f44:	10803fcc 	andi	r2,r2,255
   28f48:	10001126 	beq	r2,zero,28f90 <secp256k1_scalar_reduce_512+0x34fc>
   28f4c:	e0be1817 	ldw	r2,-1952(fp)
   28f50:	1005003a 	cmpeq	r2,r2,zero
   28f54:	10803fcc 	andi	r2,r2,255
   28f58:	10000d26 	beq	r2,zero,28f90 <secp256k1_scalar_reduce_512+0x34fc>
   28f5c:	d0a01617 	ldw	r2,-32680(gp)
   28f60:	10c00317 	ldw	r3,12(r2)
   28f64:	008001b4 	movhi	r2,6
   28f68:	10b02604 	addi	r2,r2,-16232
   28f6c:	d8800015 	stw	r2,0(sp)
   28f70:	01c06d84 	movi	r7,438
   28f74:	018001b4 	movhi	r6,6
   28f78:	31af9204 	addi	r6,r6,-16824
   28f7c:	014001b4 	movhi	r5,6
   28f80:	296b3804 	addi	r5,r5,-21280
   28f84:	1809883a 	mov	r4,r3
   28f88:	00452600 	call	45260 <fprintf>
   28f8c:	00450340 	call	45034 <abort>
    muladd(m10, SECP256K1_N_C_1);
   28f90:	e0beb017 	ldw	r2,-1344(fp)
   28f94:	e0bfaa15 	stw	r2,-344(fp)
   28f98:	e03fab15 	stw	zero,-340(fp)
   28f9c:	01900bb4 	movhi	r6,16430
   28fa0:	31a85cc4 	addi	r6,r6,-24205
   28fa4:	000f883a 	mov	r7,zero
   28fa8:	e13faa17 	ldw	r4,-344(fp)
   28fac:	e17fab17 	ldw	r5,-340(fp)
   28fb0:	00429400 	call	42940 <__muldi3>
   28fb4:	1009883a 	mov	r4,r2
   28fb8:	180b883a 	mov	r5,r3
   28fbc:	e13ed415 	stw	r4,-1200(fp)
   28fc0:	e17ed515 	stw	r5,-1196(fp)
   28fc4:	e0bed517 	ldw	r2,-1196(fp)
   28fc8:	1004d83a 	srl	r2,r2,zero
   28fcc:	e0bfac15 	stw	r2,-336(fp)
   28fd0:	e03fad15 	stw	zero,-332(fp)
   28fd4:	e13fac17 	ldw	r4,-336(fp)
   28fd8:	e13ed615 	stw	r4,-1192(fp)
   28fdc:	e0bed417 	ldw	r2,-1200(fp)
   28fe0:	e0bed715 	stw	r2,-1188(fp)
   28fe4:	e0fe1617 	ldw	r3,-1960(fp)
   28fe8:	e0bed717 	ldw	r2,-1188(fp)
   28fec:	1885883a 	add	r2,r3,r2
   28ff0:	e0be1615 	stw	r2,-1960(fp)
   28ff4:	e0fe1617 	ldw	r3,-1960(fp)
   28ff8:	e0bed717 	ldw	r2,-1188(fp)
   28ffc:	1880022e 	bgeu	r3,r2,29008 <secp256k1_scalar_reduce_512+0x3574>
   29000:	00c00044 	movi	r3,1
   29004:	00000106 	br	2900c <secp256k1_scalar_reduce_512+0x3578>
   29008:	0007883a 	mov	r3,zero
   2900c:	e0bed617 	ldw	r2,-1192(fp)
   29010:	10c5883a 	add	r2,r2,r3
   29014:	e0bed615 	stw	r2,-1192(fp)
   29018:	e0fe1717 	ldw	r3,-1956(fp)
   2901c:	e0bed617 	ldw	r2,-1192(fp)
   29020:	1885883a 	add	r2,r3,r2
   29024:	e0be1715 	stw	r2,-1956(fp)
   29028:	e0fe1717 	ldw	r3,-1956(fp)
   2902c:	e0bed617 	ldw	r2,-1192(fp)
   29030:	1880022e 	bgeu	r3,r2,2903c <secp256k1_scalar_reduce_512+0x35a8>
   29034:	00c00044 	movi	r3,1
   29038:	00000106 	br	29040 <secp256k1_scalar_reduce_512+0x35ac>
   2903c:	0007883a 	mov	r3,zero
   29040:	e0be1817 	ldw	r2,-1952(fp)
   29044:	10c5883a 	add	r2,r2,r3
   29048:	e0be1815 	stw	r2,-1952(fp)
   2904c:	e0fe1717 	ldw	r3,-1956(fp)
   29050:	e0bed617 	ldw	r2,-1192(fp)
   29054:	1885803a 	cmpltu	r2,r3,r2
   29058:	10803fcc 	andi	r2,r2,255
   2905c:	10001126 	beq	r2,zero,290a4 <secp256k1_scalar_reduce_512+0x3610>
   29060:	e0be1817 	ldw	r2,-1952(fp)
   29064:	1005003a 	cmpeq	r2,r2,zero
   29068:	10803fcc 	andi	r2,r2,255
   2906c:	10000d26 	beq	r2,zero,290a4 <secp256k1_scalar_reduce_512+0x3610>
   29070:	d0a01617 	ldw	r2,-32680(gp)
   29074:	10c00317 	ldw	r3,12(r2)
   29078:	008001b4 	movhi	r2,6
   2907c:	10b02604 	addi	r2,r2,-16232
   29080:	d8800015 	stw	r2,0(sp)
   29084:	01c06dc4 	movi	r7,439
   29088:	018001b4 	movhi	r6,6
   2908c:	31af9204 	addi	r6,r6,-16824
   29090:	014001b4 	movhi	r5,6
   29094:	296b3804 	addi	r5,r5,-21280
   29098:	1809883a 	mov	r4,r3
   2909c:	00452600 	call	45260 <fprintf>
   290a0:	00450340 	call	45034 <abort>
    muladd(m9, SECP256K1_N_C_2);
   290a4:	e0beaa17 	ldw	r2,-1368(fp)
   290a8:	e0bfae15 	stw	r2,-328(fp)
   290ac:	e03faf15 	stw	zero,-324(fp)
   290b0:	01942df4 	movhi	r6,20663
   290b4:	3197f104 	addi	r6,r6,24516
   290b8:	000f883a 	mov	r7,zero
   290bc:	e13fae17 	ldw	r4,-328(fp)
   290c0:	e17faf17 	ldw	r5,-324(fp)
   290c4:	00429400 	call	42940 <__muldi3>
   290c8:	1009883a 	mov	r4,r2
   290cc:	180b883a 	mov	r5,r3
   290d0:	e13ed815 	stw	r4,-1184(fp)
   290d4:	e17ed915 	stw	r5,-1180(fp)
   290d8:	e0bed917 	ldw	r2,-1180(fp)
   290dc:	1004d83a 	srl	r2,r2,zero
   290e0:	e0bfb015 	stw	r2,-320(fp)
   290e4:	e03fb115 	stw	zero,-316(fp)
   290e8:	e17fb017 	ldw	r5,-320(fp)
   290ec:	e17eda15 	stw	r5,-1176(fp)
   290f0:	e0bed817 	ldw	r2,-1184(fp)
   290f4:	e0bedb15 	stw	r2,-1172(fp)
   290f8:	e0fe1617 	ldw	r3,-1960(fp)
   290fc:	e0bedb17 	ldw	r2,-1172(fp)
   29100:	1885883a 	add	r2,r3,r2
   29104:	e0be1615 	stw	r2,-1960(fp)
   29108:	e0fe1617 	ldw	r3,-1960(fp)
   2910c:	e0bedb17 	ldw	r2,-1172(fp)
   29110:	1880022e 	bgeu	r3,r2,2911c <secp256k1_scalar_reduce_512+0x3688>
   29114:	00c00044 	movi	r3,1
   29118:	00000106 	br	29120 <secp256k1_scalar_reduce_512+0x368c>
   2911c:	0007883a 	mov	r3,zero
   29120:	e0beda17 	ldw	r2,-1176(fp)
   29124:	10c5883a 	add	r2,r2,r3
   29128:	e0beda15 	stw	r2,-1176(fp)
   2912c:	e0fe1717 	ldw	r3,-1956(fp)
   29130:	e0beda17 	ldw	r2,-1176(fp)
   29134:	1885883a 	add	r2,r3,r2
   29138:	e0be1715 	stw	r2,-1956(fp)
   2913c:	e0fe1717 	ldw	r3,-1956(fp)
   29140:	e0beda17 	ldw	r2,-1176(fp)
   29144:	1880022e 	bgeu	r3,r2,29150 <secp256k1_scalar_reduce_512+0x36bc>
   29148:	00c00044 	movi	r3,1
   2914c:	00000106 	br	29154 <secp256k1_scalar_reduce_512+0x36c0>
   29150:	0007883a 	mov	r3,zero
   29154:	e0be1817 	ldw	r2,-1952(fp)
   29158:	10c5883a 	add	r2,r2,r3
   2915c:	e0be1815 	stw	r2,-1952(fp)
   29160:	e0fe1717 	ldw	r3,-1956(fp)
   29164:	e0beda17 	ldw	r2,-1176(fp)
   29168:	1885803a 	cmpltu	r2,r3,r2
   2916c:	10803fcc 	andi	r2,r2,255
   29170:	10001126 	beq	r2,zero,291b8 <secp256k1_scalar_reduce_512+0x3724>
   29174:	e0be1817 	ldw	r2,-1952(fp)
   29178:	1005003a 	cmpeq	r2,r2,zero
   2917c:	10803fcc 	andi	r2,r2,255
   29180:	10000d26 	beq	r2,zero,291b8 <secp256k1_scalar_reduce_512+0x3724>
   29184:	d0a01617 	ldw	r2,-32680(gp)
   29188:	10c00317 	ldw	r3,12(r2)
   2918c:	008001b4 	movhi	r2,6
   29190:	10b02604 	addi	r2,r2,-16232
   29194:	d8800015 	stw	r2,0(sp)
   29198:	01c06e04 	movi	r7,440
   2919c:	018001b4 	movhi	r6,6
   291a0:	31af9204 	addi	r6,r6,-16824
   291a4:	014001b4 	movhi	r5,6
   291a8:	296b3804 	addi	r5,r5,-21280
   291ac:	1809883a 	mov	r4,r3
   291b0:	00452600 	call	45260 <fprintf>
   291b4:	00450340 	call	45034 <abort>
    muladd(m8, SECP256K1_N_C_3);
   291b8:	e0bea017 	ldw	r2,-1408(fp)
   291bc:	e0bfb215 	stw	r2,-312(fp)
   291c0:	e03fb315 	stw	zero,-308(fp)
   291c4:	01915474 	movhi	r6,17745
   291c8:	3188c644 	addi	r6,r6,8985
   291cc:	000f883a 	mov	r7,zero
   291d0:	e13fb217 	ldw	r4,-312(fp)
   291d4:	e17fb317 	ldw	r5,-308(fp)
   291d8:	00429400 	call	42940 <__muldi3>
   291dc:	1009883a 	mov	r4,r2
   291e0:	180b883a 	mov	r5,r3
   291e4:	e13edc15 	stw	r4,-1168(fp)
   291e8:	e17edd15 	stw	r5,-1164(fp)
   291ec:	e0bedd17 	ldw	r2,-1164(fp)
   291f0:	1004d83a 	srl	r2,r2,zero
   291f4:	e0bfb415 	stw	r2,-304(fp)
   291f8:	e03fb515 	stw	zero,-300(fp)
   291fc:	e1bfb417 	ldw	r6,-304(fp)
   29200:	e1bede15 	stw	r6,-1160(fp)
   29204:	e0bedc17 	ldw	r2,-1168(fp)
   29208:	e0bedf15 	stw	r2,-1156(fp)
   2920c:	e0fe1617 	ldw	r3,-1960(fp)
   29210:	e0bedf17 	ldw	r2,-1156(fp)
   29214:	1885883a 	add	r2,r3,r2
   29218:	e0be1615 	stw	r2,-1960(fp)
   2921c:	e0fe1617 	ldw	r3,-1960(fp)
   29220:	e0bedf17 	ldw	r2,-1156(fp)
   29224:	1880022e 	bgeu	r3,r2,29230 <secp256k1_scalar_reduce_512+0x379c>
   29228:	00c00044 	movi	r3,1
   2922c:	00000106 	br	29234 <secp256k1_scalar_reduce_512+0x37a0>
   29230:	0007883a 	mov	r3,zero
   29234:	e0bede17 	ldw	r2,-1160(fp)
   29238:	10c5883a 	add	r2,r2,r3
   2923c:	e0bede15 	stw	r2,-1160(fp)
   29240:	e0fe1717 	ldw	r3,-1956(fp)
   29244:	e0bede17 	ldw	r2,-1160(fp)
   29248:	1885883a 	add	r2,r3,r2
   2924c:	e0be1715 	stw	r2,-1956(fp)
   29250:	e0fe1717 	ldw	r3,-1956(fp)
   29254:	e0bede17 	ldw	r2,-1160(fp)
   29258:	1880022e 	bgeu	r3,r2,29264 <secp256k1_scalar_reduce_512+0x37d0>
   2925c:	00c00044 	movi	r3,1
   29260:	00000106 	br	29268 <secp256k1_scalar_reduce_512+0x37d4>
   29264:	0007883a 	mov	r3,zero
   29268:	e0be1817 	ldw	r2,-1952(fp)
   2926c:	10c5883a 	add	r2,r2,r3
   29270:	e0be1815 	stw	r2,-1952(fp)
   29274:	e0fe1717 	ldw	r3,-1956(fp)
   29278:	e0bede17 	ldw	r2,-1160(fp)
   2927c:	1885803a 	cmpltu	r2,r3,r2
   29280:	10803fcc 	andi	r2,r2,255
   29284:	10001126 	beq	r2,zero,292cc <secp256k1_scalar_reduce_512+0x3838>
   29288:	e0be1817 	ldw	r2,-1952(fp)
   2928c:	1005003a 	cmpeq	r2,r2,zero
   29290:	10803fcc 	andi	r2,r2,255
   29294:	10000d26 	beq	r2,zero,292cc <secp256k1_scalar_reduce_512+0x3838>
   29298:	d0a01617 	ldw	r2,-32680(gp)
   2929c:	10c00317 	ldw	r3,12(r2)
   292a0:	008001b4 	movhi	r2,6
   292a4:	10b02604 	addi	r2,r2,-16232
   292a8:	d8800015 	stw	r2,0(sp)
   292ac:	01c06e44 	movi	r7,441
   292b0:	018001b4 	movhi	r6,6
   292b4:	31af9204 	addi	r6,r6,-16824
   292b8:	014001b4 	movhi	r5,6
   292bc:	296b3804 	addi	r5,r5,-21280
   292c0:	1809883a 	mov	r4,r3
   292c4:	00452600 	call	45260 <fprintf>
   292c8:	00450340 	call	45034 <abort>
    extract(p3);
   292cc:	e0be1617 	ldw	r2,-1960(fp)
   292d0:	e0bee015 	stw	r2,-1152(fp)
   292d4:	e0be1717 	ldw	r2,-1956(fp)
   292d8:	e0be1615 	stw	r2,-1960(fp)
   292dc:	e0be1817 	ldw	r2,-1952(fp)
   292e0:	e0be1715 	stw	r2,-1956(fp)
   292e4:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m4);
   292e8:	e0fe1617 	ldw	r3,-1960(fp)
   292ec:	e0be5917 	ldw	r2,-1692(fp)
   292f0:	1885883a 	add	r2,r3,r2
   292f4:	e0be1615 	stw	r2,-1960(fp)
   292f8:	e0fe1617 	ldw	r3,-1960(fp)
   292fc:	e0be5917 	ldw	r2,-1692(fp)
   29300:	1885803a 	cmpltu	r2,r3,r2
   29304:	10803fcc 	andi	r2,r2,255
   29308:	e0bee115 	stw	r2,-1148(fp)
   2930c:	e0fe1717 	ldw	r3,-1956(fp)
   29310:	e0bee117 	ldw	r2,-1148(fp)
   29314:	1885883a 	add	r2,r3,r2
   29318:	e0be1715 	stw	r2,-1956(fp)
   2931c:	e0fe1717 	ldw	r3,-1956(fp)
   29320:	e0bee117 	ldw	r2,-1148(fp)
   29324:	1880022e 	bgeu	r3,r2,29330 <secp256k1_scalar_reduce_512+0x389c>
   29328:	00c00044 	movi	r3,1
   2932c:	00000106 	br	29334 <secp256k1_scalar_reduce_512+0x38a0>
   29330:	0007883a 	mov	r3,zero
   29334:	e0be1817 	ldw	r2,-1952(fp)
   29338:	10c5883a 	add	r2,r2,r3
   2933c:	e0be1815 	stw	r2,-1952(fp)
    muladd(m12, SECP256K1_N_C_0);
   29340:	e0beb217 	ldw	r2,-1336(fp)
   29344:	e0bfb615 	stw	r2,-296(fp)
   29348:	e03fb715 	stw	zero,-292(fp)
   2934c:	018bf2b4 	movhi	r6,12234
   29350:	31afafc4 	addi	r6,r6,-16705
   29354:	000f883a 	mov	r7,zero
   29358:	e13fb617 	ldw	r4,-296(fp)
   2935c:	e17fb717 	ldw	r5,-292(fp)
   29360:	00429400 	call	42940 <__muldi3>
   29364:	1009883a 	mov	r4,r2
   29368:	180b883a 	mov	r5,r3
   2936c:	e13ee215 	stw	r4,-1144(fp)
   29370:	e17ee315 	stw	r5,-1140(fp)
   29374:	e0bee317 	ldw	r2,-1140(fp)
   29378:	1004d83a 	srl	r2,r2,zero
   2937c:	e0bfb815 	stw	r2,-288(fp)
   29380:	e03fb915 	stw	zero,-284(fp)
   29384:	e1ffb817 	ldw	r7,-288(fp)
   29388:	e1fee415 	stw	r7,-1136(fp)
   2938c:	e0bee217 	ldw	r2,-1144(fp)
   29390:	e0bee515 	stw	r2,-1132(fp)
   29394:	e0fe1617 	ldw	r3,-1960(fp)
   29398:	e0bee517 	ldw	r2,-1132(fp)
   2939c:	1885883a 	add	r2,r3,r2
   293a0:	e0be1615 	stw	r2,-1960(fp)
   293a4:	e0fe1617 	ldw	r3,-1960(fp)
   293a8:	e0bee517 	ldw	r2,-1132(fp)
   293ac:	1880022e 	bgeu	r3,r2,293b8 <secp256k1_scalar_reduce_512+0x3924>
   293b0:	00c00044 	movi	r3,1
   293b4:	00000106 	br	293bc <secp256k1_scalar_reduce_512+0x3928>
   293b8:	0007883a 	mov	r3,zero
   293bc:	e0bee417 	ldw	r2,-1136(fp)
   293c0:	10c5883a 	add	r2,r2,r3
   293c4:	e0bee415 	stw	r2,-1136(fp)
   293c8:	e0fe1717 	ldw	r3,-1956(fp)
   293cc:	e0bee417 	ldw	r2,-1136(fp)
   293d0:	1885883a 	add	r2,r3,r2
   293d4:	e0be1715 	stw	r2,-1956(fp)
   293d8:	e0fe1717 	ldw	r3,-1956(fp)
   293dc:	e0bee417 	ldw	r2,-1136(fp)
   293e0:	1880022e 	bgeu	r3,r2,293ec <secp256k1_scalar_reduce_512+0x3958>
   293e4:	00c00044 	movi	r3,1
   293e8:	00000106 	br	293f0 <secp256k1_scalar_reduce_512+0x395c>
   293ec:	0007883a 	mov	r3,zero
   293f0:	e0be1817 	ldw	r2,-1952(fp)
   293f4:	10c5883a 	add	r2,r2,r3
   293f8:	e0be1815 	stw	r2,-1952(fp)
   293fc:	e0fe1717 	ldw	r3,-1956(fp)
   29400:	e0bee417 	ldw	r2,-1136(fp)
   29404:	1885803a 	cmpltu	r2,r3,r2
   29408:	10803fcc 	andi	r2,r2,255
   2940c:	10001126 	beq	r2,zero,29454 <secp256k1_scalar_reduce_512+0x39c0>
   29410:	e0be1817 	ldw	r2,-1952(fp)
   29414:	1005003a 	cmpeq	r2,r2,zero
   29418:	10803fcc 	andi	r2,r2,255
   2941c:	10000d26 	beq	r2,zero,29454 <secp256k1_scalar_reduce_512+0x39c0>
   29420:	d0a01617 	ldw	r2,-32680(gp)
   29424:	10c00317 	ldw	r3,12(r2)
   29428:	008001b4 	movhi	r2,6
   2942c:	10b02604 	addi	r2,r2,-16232
   29430:	d8800015 	stw	r2,0(sp)
   29434:	01c06f04 	movi	r7,444
   29438:	018001b4 	movhi	r6,6
   2943c:	31af9204 	addi	r6,r6,-16824
   29440:	014001b4 	movhi	r5,6
   29444:	296b3804 	addi	r5,r5,-21280
   29448:	1809883a 	mov	r4,r3
   2944c:	00452600 	call	45260 <fprintf>
   29450:	00450340 	call	45034 <abort>
    muladd(m11, SECP256K1_N_C_1);
   29454:	e0beb117 	ldw	r2,-1340(fp)
   29458:	e0bfba15 	stw	r2,-280(fp)
   2945c:	e03fbb15 	stw	zero,-276(fp)
   29460:	01900bb4 	movhi	r6,16430
   29464:	31a85cc4 	addi	r6,r6,-24205
   29468:	000f883a 	mov	r7,zero
   2946c:	e13fba17 	ldw	r4,-280(fp)
   29470:	e17fbb17 	ldw	r5,-276(fp)
   29474:	00429400 	call	42940 <__muldi3>
   29478:	1009883a 	mov	r4,r2
   2947c:	180b883a 	mov	r5,r3
   29480:	e13ee615 	stw	r4,-1128(fp)
   29484:	e17ee715 	stw	r5,-1124(fp)
   29488:	e0bee717 	ldw	r2,-1124(fp)
   2948c:	1004d83a 	srl	r2,r2,zero
   29490:	e0bfbc15 	stw	r2,-272(fp)
   29494:	e03fbd15 	stw	zero,-268(fp)
   29498:	e0bfbc17 	ldw	r2,-272(fp)
   2949c:	e0bee815 	stw	r2,-1120(fp)
   294a0:	e0bee617 	ldw	r2,-1128(fp)
   294a4:	e0bee915 	stw	r2,-1116(fp)
   294a8:	e0fe1617 	ldw	r3,-1960(fp)
   294ac:	e0bee917 	ldw	r2,-1116(fp)
   294b0:	1885883a 	add	r2,r3,r2
   294b4:	e0be1615 	stw	r2,-1960(fp)
   294b8:	e0fe1617 	ldw	r3,-1960(fp)
   294bc:	e0bee917 	ldw	r2,-1116(fp)
   294c0:	1880022e 	bgeu	r3,r2,294cc <secp256k1_scalar_reduce_512+0x3a38>
   294c4:	00c00044 	movi	r3,1
   294c8:	00000106 	br	294d0 <secp256k1_scalar_reduce_512+0x3a3c>
   294cc:	0007883a 	mov	r3,zero
   294d0:	e0bee817 	ldw	r2,-1120(fp)
   294d4:	10c5883a 	add	r2,r2,r3
   294d8:	e0bee815 	stw	r2,-1120(fp)
   294dc:	e0fe1717 	ldw	r3,-1956(fp)
   294e0:	e0bee817 	ldw	r2,-1120(fp)
   294e4:	1885883a 	add	r2,r3,r2
   294e8:	e0be1715 	stw	r2,-1956(fp)
   294ec:	e0fe1717 	ldw	r3,-1956(fp)
   294f0:	e0bee817 	ldw	r2,-1120(fp)
   294f4:	1880022e 	bgeu	r3,r2,29500 <secp256k1_scalar_reduce_512+0x3a6c>
   294f8:	00c00044 	movi	r3,1
   294fc:	00000106 	br	29504 <secp256k1_scalar_reduce_512+0x3a70>
   29500:	0007883a 	mov	r3,zero
   29504:	e0be1817 	ldw	r2,-1952(fp)
   29508:	10c5883a 	add	r2,r2,r3
   2950c:	e0be1815 	stw	r2,-1952(fp)
   29510:	e0fe1717 	ldw	r3,-1956(fp)
   29514:	e0bee817 	ldw	r2,-1120(fp)
   29518:	1885803a 	cmpltu	r2,r3,r2
   2951c:	10803fcc 	andi	r2,r2,255
   29520:	10001126 	beq	r2,zero,29568 <secp256k1_scalar_reduce_512+0x3ad4>
   29524:	e0be1817 	ldw	r2,-1952(fp)
   29528:	1005003a 	cmpeq	r2,r2,zero
   2952c:	10803fcc 	andi	r2,r2,255
   29530:	10000d26 	beq	r2,zero,29568 <secp256k1_scalar_reduce_512+0x3ad4>
   29534:	d0a01617 	ldw	r2,-32680(gp)
   29538:	10c00317 	ldw	r3,12(r2)
   2953c:	008001b4 	movhi	r2,6
   29540:	10b02604 	addi	r2,r2,-16232
   29544:	d8800015 	stw	r2,0(sp)
   29548:	01c06f44 	movi	r7,445
   2954c:	018001b4 	movhi	r6,6
   29550:	31af9204 	addi	r6,r6,-16824
   29554:	014001b4 	movhi	r5,6
   29558:	296b3804 	addi	r5,r5,-21280
   2955c:	1809883a 	mov	r4,r3
   29560:	00452600 	call	45260 <fprintf>
   29564:	00450340 	call	45034 <abort>
    muladd(m10, SECP256K1_N_C_2);
   29568:	e0beb017 	ldw	r2,-1344(fp)
   2956c:	e0bfbe15 	stw	r2,-264(fp)
   29570:	e03fbf15 	stw	zero,-260(fp)
   29574:	01942df4 	movhi	r6,20663
   29578:	3197f104 	addi	r6,r6,24516
   2957c:	000f883a 	mov	r7,zero
   29580:	e13fbe17 	ldw	r4,-264(fp)
   29584:	e17fbf17 	ldw	r5,-260(fp)
   29588:	00429400 	call	42940 <__muldi3>
   2958c:	1009883a 	mov	r4,r2
   29590:	180b883a 	mov	r5,r3
   29594:	e13eea15 	stw	r4,-1112(fp)
   29598:	e17eeb15 	stw	r5,-1108(fp)
   2959c:	e0beeb17 	ldw	r2,-1108(fp)
   295a0:	1004d83a 	srl	r2,r2,zero
   295a4:	e0bfc015 	stw	r2,-256(fp)
   295a8:	e03fc115 	stw	zero,-252(fp)
   295ac:	e13fc017 	ldw	r4,-256(fp)
   295b0:	e13eec15 	stw	r4,-1104(fp)
   295b4:	e0beea17 	ldw	r2,-1112(fp)
   295b8:	e0beed15 	stw	r2,-1100(fp)
   295bc:	e0fe1617 	ldw	r3,-1960(fp)
   295c0:	e0beed17 	ldw	r2,-1100(fp)
   295c4:	1885883a 	add	r2,r3,r2
   295c8:	e0be1615 	stw	r2,-1960(fp)
   295cc:	e0fe1617 	ldw	r3,-1960(fp)
   295d0:	e0beed17 	ldw	r2,-1100(fp)
   295d4:	1880022e 	bgeu	r3,r2,295e0 <secp256k1_scalar_reduce_512+0x3b4c>
   295d8:	00c00044 	movi	r3,1
   295dc:	00000106 	br	295e4 <secp256k1_scalar_reduce_512+0x3b50>
   295e0:	0007883a 	mov	r3,zero
   295e4:	e0beec17 	ldw	r2,-1104(fp)
   295e8:	10c5883a 	add	r2,r2,r3
   295ec:	e0beec15 	stw	r2,-1104(fp)
   295f0:	e0fe1717 	ldw	r3,-1956(fp)
   295f4:	e0beec17 	ldw	r2,-1104(fp)
   295f8:	1885883a 	add	r2,r3,r2
   295fc:	e0be1715 	stw	r2,-1956(fp)
   29600:	e0fe1717 	ldw	r3,-1956(fp)
   29604:	e0beec17 	ldw	r2,-1104(fp)
   29608:	1880022e 	bgeu	r3,r2,29614 <secp256k1_scalar_reduce_512+0x3b80>
   2960c:	00c00044 	movi	r3,1
   29610:	00000106 	br	29618 <secp256k1_scalar_reduce_512+0x3b84>
   29614:	0007883a 	mov	r3,zero
   29618:	e0be1817 	ldw	r2,-1952(fp)
   2961c:	10c5883a 	add	r2,r2,r3
   29620:	e0be1815 	stw	r2,-1952(fp)
   29624:	e0fe1717 	ldw	r3,-1956(fp)
   29628:	e0beec17 	ldw	r2,-1104(fp)
   2962c:	1885803a 	cmpltu	r2,r3,r2
   29630:	10803fcc 	andi	r2,r2,255
   29634:	10001126 	beq	r2,zero,2967c <secp256k1_scalar_reduce_512+0x3be8>
   29638:	e0be1817 	ldw	r2,-1952(fp)
   2963c:	1005003a 	cmpeq	r2,r2,zero
   29640:	10803fcc 	andi	r2,r2,255
   29644:	10000d26 	beq	r2,zero,2967c <secp256k1_scalar_reduce_512+0x3be8>
   29648:	d0a01617 	ldw	r2,-32680(gp)
   2964c:	10c00317 	ldw	r3,12(r2)
   29650:	008001b4 	movhi	r2,6
   29654:	10b02604 	addi	r2,r2,-16232
   29658:	d8800015 	stw	r2,0(sp)
   2965c:	01c06f84 	movi	r7,446
   29660:	018001b4 	movhi	r6,6
   29664:	31af9204 	addi	r6,r6,-16824
   29668:	014001b4 	movhi	r5,6
   2966c:	296b3804 	addi	r5,r5,-21280
   29670:	1809883a 	mov	r4,r3
   29674:	00452600 	call	45260 <fprintf>
   29678:	00450340 	call	45034 <abort>
    muladd(m9, SECP256K1_N_C_3);
   2967c:	e0beaa17 	ldw	r2,-1368(fp)
   29680:	e0bfc215 	stw	r2,-248(fp)
   29684:	e03fc315 	stw	zero,-244(fp)
   29688:	01915474 	movhi	r6,17745
   2968c:	3188c644 	addi	r6,r6,8985
   29690:	000f883a 	mov	r7,zero
   29694:	e13fc217 	ldw	r4,-248(fp)
   29698:	e17fc317 	ldw	r5,-244(fp)
   2969c:	00429400 	call	42940 <__muldi3>
   296a0:	1009883a 	mov	r4,r2
   296a4:	180b883a 	mov	r5,r3
   296a8:	e13eee15 	stw	r4,-1096(fp)
   296ac:	e17eef15 	stw	r5,-1092(fp)
   296b0:	e0beef17 	ldw	r2,-1092(fp)
   296b4:	1004d83a 	srl	r2,r2,zero
   296b8:	e0bfc415 	stw	r2,-240(fp)
   296bc:	e03fc515 	stw	zero,-236(fp)
   296c0:	e17fc417 	ldw	r5,-240(fp)
   296c4:	e17ef015 	stw	r5,-1088(fp)
   296c8:	e0beee17 	ldw	r2,-1096(fp)
   296cc:	e0bef115 	stw	r2,-1084(fp)
   296d0:	e0fe1617 	ldw	r3,-1960(fp)
   296d4:	e0bef117 	ldw	r2,-1084(fp)
   296d8:	1885883a 	add	r2,r3,r2
   296dc:	e0be1615 	stw	r2,-1960(fp)
   296e0:	e0fe1617 	ldw	r3,-1960(fp)
   296e4:	e0bef117 	ldw	r2,-1084(fp)
   296e8:	1880022e 	bgeu	r3,r2,296f4 <secp256k1_scalar_reduce_512+0x3c60>
   296ec:	00c00044 	movi	r3,1
   296f0:	00000106 	br	296f8 <secp256k1_scalar_reduce_512+0x3c64>
   296f4:	0007883a 	mov	r3,zero
   296f8:	e0bef017 	ldw	r2,-1088(fp)
   296fc:	10c5883a 	add	r2,r2,r3
   29700:	e0bef015 	stw	r2,-1088(fp)
   29704:	e0fe1717 	ldw	r3,-1956(fp)
   29708:	e0bef017 	ldw	r2,-1088(fp)
   2970c:	1885883a 	add	r2,r3,r2
   29710:	e0be1715 	stw	r2,-1956(fp)
   29714:	e0fe1717 	ldw	r3,-1956(fp)
   29718:	e0bef017 	ldw	r2,-1088(fp)
   2971c:	1880022e 	bgeu	r3,r2,29728 <secp256k1_scalar_reduce_512+0x3c94>
   29720:	00c00044 	movi	r3,1
   29724:	00000106 	br	2972c <secp256k1_scalar_reduce_512+0x3c98>
   29728:	0007883a 	mov	r3,zero
   2972c:	e0be1817 	ldw	r2,-1952(fp)
   29730:	10c5883a 	add	r2,r2,r3
   29734:	e0be1815 	stw	r2,-1952(fp)
   29738:	e0fe1717 	ldw	r3,-1956(fp)
   2973c:	e0bef017 	ldw	r2,-1088(fp)
   29740:	1885803a 	cmpltu	r2,r3,r2
   29744:	10803fcc 	andi	r2,r2,255
   29748:	10001126 	beq	r2,zero,29790 <secp256k1_scalar_reduce_512+0x3cfc>
   2974c:	e0be1817 	ldw	r2,-1952(fp)
   29750:	1005003a 	cmpeq	r2,r2,zero
   29754:	10803fcc 	andi	r2,r2,255
   29758:	10000d26 	beq	r2,zero,29790 <secp256k1_scalar_reduce_512+0x3cfc>
   2975c:	d0a01617 	ldw	r2,-32680(gp)
   29760:	10c00317 	ldw	r3,12(r2)
   29764:	008001b4 	movhi	r2,6
   29768:	10b02604 	addi	r2,r2,-16232
   2976c:	d8800015 	stw	r2,0(sp)
   29770:	01c06fc4 	movi	r7,447
   29774:	018001b4 	movhi	r6,6
   29778:	31af9204 	addi	r6,r6,-16824
   2977c:	014001b4 	movhi	r5,6
   29780:	296b3804 	addi	r5,r5,-21280
   29784:	1809883a 	mov	r4,r3
   29788:	00452600 	call	45260 <fprintf>
   2978c:	00450340 	call	45034 <abort>
    sumadd(m8);
   29790:	e0fe1617 	ldw	r3,-1960(fp)
   29794:	e0bea017 	ldw	r2,-1408(fp)
   29798:	1885883a 	add	r2,r3,r2
   2979c:	e0be1615 	stw	r2,-1960(fp)
   297a0:	e0fe1617 	ldw	r3,-1960(fp)
   297a4:	e0bea017 	ldw	r2,-1408(fp)
   297a8:	1885803a 	cmpltu	r2,r3,r2
   297ac:	10803fcc 	andi	r2,r2,255
   297b0:	e0bef215 	stw	r2,-1080(fp)
   297b4:	e0fe1717 	ldw	r3,-1956(fp)
   297b8:	e0bef217 	ldw	r2,-1080(fp)
   297bc:	1885883a 	add	r2,r3,r2
   297c0:	e0be1715 	stw	r2,-1956(fp)
   297c4:	e0fe1717 	ldw	r3,-1956(fp)
   297c8:	e0bef217 	ldw	r2,-1080(fp)
   297cc:	1880022e 	bgeu	r3,r2,297d8 <secp256k1_scalar_reduce_512+0x3d44>
   297d0:	00c00044 	movi	r3,1
   297d4:	00000106 	br	297dc <secp256k1_scalar_reduce_512+0x3d48>
   297d8:	0007883a 	mov	r3,zero
   297dc:	e0be1817 	ldw	r2,-1952(fp)
   297e0:	10c5883a 	add	r2,r2,r3
   297e4:	e0be1815 	stw	r2,-1952(fp)
    extract(p4);
   297e8:	e0be1617 	ldw	r2,-1960(fp)
   297ec:	e0bef315 	stw	r2,-1076(fp)
   297f0:	e0be1717 	ldw	r2,-1956(fp)
   297f4:	e0be1615 	stw	r2,-1960(fp)
   297f8:	e0be1817 	ldw	r2,-1952(fp)
   297fc:	e0be1715 	stw	r2,-1956(fp)
   29800:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m5);
   29804:	e0fe1617 	ldw	r3,-1960(fp)
   29808:	e0be6c17 	ldw	r2,-1616(fp)
   2980c:	1885883a 	add	r2,r3,r2
   29810:	e0be1615 	stw	r2,-1960(fp)
   29814:	e0fe1617 	ldw	r3,-1960(fp)
   29818:	e0be6c17 	ldw	r2,-1616(fp)
   2981c:	1885803a 	cmpltu	r2,r3,r2
   29820:	10803fcc 	andi	r2,r2,255
   29824:	e0bef415 	stw	r2,-1072(fp)
   29828:	e0fe1717 	ldw	r3,-1956(fp)
   2982c:	e0bef417 	ldw	r2,-1072(fp)
   29830:	1885883a 	add	r2,r3,r2
   29834:	e0be1715 	stw	r2,-1956(fp)
   29838:	e0fe1717 	ldw	r3,-1956(fp)
   2983c:	e0bef417 	ldw	r2,-1072(fp)
   29840:	1880022e 	bgeu	r3,r2,2984c <secp256k1_scalar_reduce_512+0x3db8>
   29844:	00c00044 	movi	r3,1
   29848:	00000106 	br	29850 <secp256k1_scalar_reduce_512+0x3dbc>
   2984c:	0007883a 	mov	r3,zero
   29850:	e0be1817 	ldw	r2,-1952(fp)
   29854:	10c5883a 	add	r2,r2,r3
   29858:	e0be1815 	stw	r2,-1952(fp)
    muladd(m12, SECP256K1_N_C_1);
   2985c:	e0beb217 	ldw	r2,-1336(fp)
   29860:	e0bfc615 	stw	r2,-232(fp)
   29864:	e03fc715 	stw	zero,-228(fp)
   29868:	01900bb4 	movhi	r6,16430
   2986c:	31a85cc4 	addi	r6,r6,-24205
   29870:	000f883a 	mov	r7,zero
   29874:	e13fc617 	ldw	r4,-232(fp)
   29878:	e17fc717 	ldw	r5,-228(fp)
   2987c:	00429400 	call	42940 <__muldi3>
   29880:	1009883a 	mov	r4,r2
   29884:	180b883a 	mov	r5,r3
   29888:	e13ef515 	stw	r4,-1068(fp)
   2988c:	e17ef615 	stw	r5,-1064(fp)
   29890:	e0bef617 	ldw	r2,-1064(fp)
   29894:	1004d83a 	srl	r2,r2,zero
   29898:	e0bfc815 	stw	r2,-224(fp)
   2989c:	e03fc915 	stw	zero,-220(fp)
   298a0:	e1bfc817 	ldw	r6,-224(fp)
   298a4:	e1bef715 	stw	r6,-1060(fp)
   298a8:	e0bef517 	ldw	r2,-1068(fp)
   298ac:	e0bef815 	stw	r2,-1056(fp)
   298b0:	e0fe1617 	ldw	r3,-1960(fp)
   298b4:	e0bef817 	ldw	r2,-1056(fp)
   298b8:	1885883a 	add	r2,r3,r2
   298bc:	e0be1615 	stw	r2,-1960(fp)
   298c0:	e0fe1617 	ldw	r3,-1960(fp)
   298c4:	e0bef817 	ldw	r2,-1056(fp)
   298c8:	1880022e 	bgeu	r3,r2,298d4 <secp256k1_scalar_reduce_512+0x3e40>
   298cc:	00c00044 	movi	r3,1
   298d0:	00000106 	br	298d8 <secp256k1_scalar_reduce_512+0x3e44>
   298d4:	0007883a 	mov	r3,zero
   298d8:	e0bef717 	ldw	r2,-1060(fp)
   298dc:	10c5883a 	add	r2,r2,r3
   298e0:	e0bef715 	stw	r2,-1060(fp)
   298e4:	e0fe1717 	ldw	r3,-1956(fp)
   298e8:	e0bef717 	ldw	r2,-1060(fp)
   298ec:	1885883a 	add	r2,r3,r2
   298f0:	e0be1715 	stw	r2,-1956(fp)
   298f4:	e0fe1717 	ldw	r3,-1956(fp)
   298f8:	e0bef717 	ldw	r2,-1060(fp)
   298fc:	1880022e 	bgeu	r3,r2,29908 <secp256k1_scalar_reduce_512+0x3e74>
   29900:	00c00044 	movi	r3,1
   29904:	00000106 	br	2990c <secp256k1_scalar_reduce_512+0x3e78>
   29908:	0007883a 	mov	r3,zero
   2990c:	e0be1817 	ldw	r2,-1952(fp)
   29910:	10c5883a 	add	r2,r2,r3
   29914:	e0be1815 	stw	r2,-1952(fp)
   29918:	e0fe1717 	ldw	r3,-1956(fp)
   2991c:	e0bef717 	ldw	r2,-1060(fp)
   29920:	1885803a 	cmpltu	r2,r3,r2
   29924:	10803fcc 	andi	r2,r2,255
   29928:	10001126 	beq	r2,zero,29970 <secp256k1_scalar_reduce_512+0x3edc>
   2992c:	e0be1817 	ldw	r2,-1952(fp)
   29930:	1005003a 	cmpeq	r2,r2,zero
   29934:	10803fcc 	andi	r2,r2,255
   29938:	10000d26 	beq	r2,zero,29970 <secp256k1_scalar_reduce_512+0x3edc>
   2993c:	d0a01617 	ldw	r2,-32680(gp)
   29940:	10c00317 	ldw	r3,12(r2)
   29944:	008001b4 	movhi	r2,6
   29948:	10b02604 	addi	r2,r2,-16232
   2994c:	d8800015 	stw	r2,0(sp)
   29950:	01c070c4 	movi	r7,451
   29954:	018001b4 	movhi	r6,6
   29958:	31af9204 	addi	r6,r6,-16824
   2995c:	014001b4 	movhi	r5,6
   29960:	296b3804 	addi	r5,r5,-21280
   29964:	1809883a 	mov	r4,r3
   29968:	00452600 	call	45260 <fprintf>
   2996c:	00450340 	call	45034 <abort>
    muladd(m11, SECP256K1_N_C_2);
   29970:	e0beb117 	ldw	r2,-1340(fp)
   29974:	e0bfca15 	stw	r2,-216(fp)
   29978:	e03fcb15 	stw	zero,-212(fp)
   2997c:	01942df4 	movhi	r6,20663
   29980:	3197f104 	addi	r6,r6,24516
   29984:	000f883a 	mov	r7,zero
   29988:	e13fca17 	ldw	r4,-216(fp)
   2998c:	e17fcb17 	ldw	r5,-212(fp)
   29990:	00429400 	call	42940 <__muldi3>
   29994:	1009883a 	mov	r4,r2
   29998:	180b883a 	mov	r5,r3
   2999c:	e13ef915 	stw	r4,-1052(fp)
   299a0:	e17efa15 	stw	r5,-1048(fp)
   299a4:	e0befa17 	ldw	r2,-1048(fp)
   299a8:	1004d83a 	srl	r2,r2,zero
   299ac:	e0bfcc15 	stw	r2,-208(fp)
   299b0:	e03fcd15 	stw	zero,-204(fp)
   299b4:	e1ffcc17 	ldw	r7,-208(fp)
   299b8:	e1fefb15 	stw	r7,-1044(fp)
   299bc:	e0bef917 	ldw	r2,-1052(fp)
   299c0:	e0befc15 	stw	r2,-1040(fp)
   299c4:	e0fe1617 	ldw	r3,-1960(fp)
   299c8:	e0befc17 	ldw	r2,-1040(fp)
   299cc:	1885883a 	add	r2,r3,r2
   299d0:	e0be1615 	stw	r2,-1960(fp)
   299d4:	e0fe1617 	ldw	r3,-1960(fp)
   299d8:	e0befc17 	ldw	r2,-1040(fp)
   299dc:	1880022e 	bgeu	r3,r2,299e8 <secp256k1_scalar_reduce_512+0x3f54>
   299e0:	00c00044 	movi	r3,1
   299e4:	00000106 	br	299ec <secp256k1_scalar_reduce_512+0x3f58>
   299e8:	0007883a 	mov	r3,zero
   299ec:	e0befb17 	ldw	r2,-1044(fp)
   299f0:	10c5883a 	add	r2,r2,r3
   299f4:	e0befb15 	stw	r2,-1044(fp)
   299f8:	e0fe1717 	ldw	r3,-1956(fp)
   299fc:	e0befb17 	ldw	r2,-1044(fp)
   29a00:	1885883a 	add	r2,r3,r2
   29a04:	e0be1715 	stw	r2,-1956(fp)
   29a08:	e0fe1717 	ldw	r3,-1956(fp)
   29a0c:	e0befb17 	ldw	r2,-1044(fp)
   29a10:	1880022e 	bgeu	r3,r2,29a1c <secp256k1_scalar_reduce_512+0x3f88>
   29a14:	00c00044 	movi	r3,1
   29a18:	00000106 	br	29a20 <secp256k1_scalar_reduce_512+0x3f8c>
   29a1c:	0007883a 	mov	r3,zero
   29a20:	e0be1817 	ldw	r2,-1952(fp)
   29a24:	10c5883a 	add	r2,r2,r3
   29a28:	e0be1815 	stw	r2,-1952(fp)
   29a2c:	e0fe1717 	ldw	r3,-1956(fp)
   29a30:	e0befb17 	ldw	r2,-1044(fp)
   29a34:	1885803a 	cmpltu	r2,r3,r2
   29a38:	10803fcc 	andi	r2,r2,255
   29a3c:	10001126 	beq	r2,zero,29a84 <secp256k1_scalar_reduce_512+0x3ff0>
   29a40:	e0be1817 	ldw	r2,-1952(fp)
   29a44:	1005003a 	cmpeq	r2,r2,zero
   29a48:	10803fcc 	andi	r2,r2,255
   29a4c:	10000d26 	beq	r2,zero,29a84 <secp256k1_scalar_reduce_512+0x3ff0>
   29a50:	d0a01617 	ldw	r2,-32680(gp)
   29a54:	10c00317 	ldw	r3,12(r2)
   29a58:	008001b4 	movhi	r2,6
   29a5c:	10b02604 	addi	r2,r2,-16232
   29a60:	d8800015 	stw	r2,0(sp)
   29a64:	01c07104 	movi	r7,452
   29a68:	018001b4 	movhi	r6,6
   29a6c:	31af9204 	addi	r6,r6,-16824
   29a70:	014001b4 	movhi	r5,6
   29a74:	296b3804 	addi	r5,r5,-21280
   29a78:	1809883a 	mov	r4,r3
   29a7c:	00452600 	call	45260 <fprintf>
   29a80:	00450340 	call	45034 <abort>
    muladd(m10, SECP256K1_N_C_3);
   29a84:	e0beb017 	ldw	r2,-1344(fp)
   29a88:	e0bfce15 	stw	r2,-200(fp)
   29a8c:	e03fcf15 	stw	zero,-196(fp)
   29a90:	01915474 	movhi	r6,17745
   29a94:	3188c644 	addi	r6,r6,8985
   29a98:	000f883a 	mov	r7,zero
   29a9c:	e13fce17 	ldw	r4,-200(fp)
   29aa0:	e17fcf17 	ldw	r5,-196(fp)
   29aa4:	00429400 	call	42940 <__muldi3>
   29aa8:	1009883a 	mov	r4,r2
   29aac:	180b883a 	mov	r5,r3
   29ab0:	e13efd15 	stw	r4,-1036(fp)
   29ab4:	e17efe15 	stw	r5,-1032(fp)
   29ab8:	e0befe17 	ldw	r2,-1032(fp)
   29abc:	1004d83a 	srl	r2,r2,zero
   29ac0:	e0bfd015 	stw	r2,-192(fp)
   29ac4:	e03fd115 	stw	zero,-188(fp)
   29ac8:	e0bfd017 	ldw	r2,-192(fp)
   29acc:	e0beff15 	stw	r2,-1028(fp)
   29ad0:	e0befd17 	ldw	r2,-1036(fp)
   29ad4:	e0bf0015 	stw	r2,-1024(fp)
   29ad8:	e0fe1617 	ldw	r3,-1960(fp)
   29adc:	e0bf0017 	ldw	r2,-1024(fp)
   29ae0:	1885883a 	add	r2,r3,r2
   29ae4:	e0be1615 	stw	r2,-1960(fp)
   29ae8:	e0fe1617 	ldw	r3,-1960(fp)
   29aec:	e0bf0017 	ldw	r2,-1024(fp)
   29af0:	1880022e 	bgeu	r3,r2,29afc <secp256k1_scalar_reduce_512+0x4068>
   29af4:	00c00044 	movi	r3,1
   29af8:	00000106 	br	29b00 <secp256k1_scalar_reduce_512+0x406c>
   29afc:	0007883a 	mov	r3,zero
   29b00:	e0beff17 	ldw	r2,-1028(fp)
   29b04:	10c5883a 	add	r2,r2,r3
   29b08:	e0beff15 	stw	r2,-1028(fp)
   29b0c:	e0fe1717 	ldw	r3,-1956(fp)
   29b10:	e0beff17 	ldw	r2,-1028(fp)
   29b14:	1885883a 	add	r2,r3,r2
   29b18:	e0be1715 	stw	r2,-1956(fp)
   29b1c:	e0fe1717 	ldw	r3,-1956(fp)
   29b20:	e0beff17 	ldw	r2,-1028(fp)
   29b24:	1880022e 	bgeu	r3,r2,29b30 <secp256k1_scalar_reduce_512+0x409c>
   29b28:	00c00044 	movi	r3,1
   29b2c:	00000106 	br	29b34 <secp256k1_scalar_reduce_512+0x40a0>
   29b30:	0007883a 	mov	r3,zero
   29b34:	e0be1817 	ldw	r2,-1952(fp)
   29b38:	10c5883a 	add	r2,r2,r3
   29b3c:	e0be1815 	stw	r2,-1952(fp)
   29b40:	e0fe1717 	ldw	r3,-1956(fp)
   29b44:	e0beff17 	ldw	r2,-1028(fp)
   29b48:	1885803a 	cmpltu	r2,r3,r2
   29b4c:	10803fcc 	andi	r2,r2,255
   29b50:	10001126 	beq	r2,zero,29b98 <secp256k1_scalar_reduce_512+0x4104>
   29b54:	e0be1817 	ldw	r2,-1952(fp)
   29b58:	1005003a 	cmpeq	r2,r2,zero
   29b5c:	10803fcc 	andi	r2,r2,255
   29b60:	10000d26 	beq	r2,zero,29b98 <secp256k1_scalar_reduce_512+0x4104>
   29b64:	d0a01617 	ldw	r2,-32680(gp)
   29b68:	10c00317 	ldw	r3,12(r2)
   29b6c:	008001b4 	movhi	r2,6
   29b70:	10b02604 	addi	r2,r2,-16232
   29b74:	d8800015 	stw	r2,0(sp)
   29b78:	01c07144 	movi	r7,453
   29b7c:	018001b4 	movhi	r6,6
   29b80:	31af9204 	addi	r6,r6,-16824
   29b84:	014001b4 	movhi	r5,6
   29b88:	296b3804 	addi	r5,r5,-21280
   29b8c:	1809883a 	mov	r4,r3
   29b90:	00452600 	call	45260 <fprintf>
   29b94:	00450340 	call	45034 <abort>
    sumadd(m9);
   29b98:	e0fe1617 	ldw	r3,-1960(fp)
   29b9c:	e0beaa17 	ldw	r2,-1368(fp)
   29ba0:	1885883a 	add	r2,r3,r2
   29ba4:	e0be1615 	stw	r2,-1960(fp)
   29ba8:	e0fe1617 	ldw	r3,-1960(fp)
   29bac:	e0beaa17 	ldw	r2,-1368(fp)
   29bb0:	1885803a 	cmpltu	r2,r3,r2
   29bb4:	10803fcc 	andi	r2,r2,255
   29bb8:	e0bf0115 	stw	r2,-1020(fp)
   29bbc:	e0fe1717 	ldw	r3,-1956(fp)
   29bc0:	e0bf0117 	ldw	r2,-1020(fp)
   29bc4:	1885883a 	add	r2,r3,r2
   29bc8:	e0be1715 	stw	r2,-1956(fp)
   29bcc:	e0fe1717 	ldw	r3,-1956(fp)
   29bd0:	e0bf0117 	ldw	r2,-1020(fp)
   29bd4:	1880022e 	bgeu	r3,r2,29be0 <secp256k1_scalar_reduce_512+0x414c>
   29bd8:	00c00044 	movi	r3,1
   29bdc:	00000106 	br	29be4 <secp256k1_scalar_reduce_512+0x4150>
   29be0:	0007883a 	mov	r3,zero
   29be4:	e0be1817 	ldw	r2,-1952(fp)
   29be8:	10c5883a 	add	r2,r2,r3
   29bec:	e0be1815 	stw	r2,-1952(fp)
    extract(p5);
   29bf0:	e0be1617 	ldw	r2,-1960(fp)
   29bf4:	e0bf0215 	stw	r2,-1016(fp)
   29bf8:	e0be1717 	ldw	r2,-1956(fp)
   29bfc:	e0be1615 	stw	r2,-1960(fp)
   29c00:	e0be1817 	ldw	r2,-1952(fp)
   29c04:	e0be1715 	stw	r2,-1956(fp)
   29c08:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m6);
   29c0c:	e0fe1617 	ldw	r3,-1960(fp)
   29c10:	e0be7f17 	ldw	r2,-1540(fp)
   29c14:	1885883a 	add	r2,r3,r2
   29c18:	e0be1615 	stw	r2,-1960(fp)
   29c1c:	e0fe1617 	ldw	r3,-1960(fp)
   29c20:	e0be7f17 	ldw	r2,-1540(fp)
   29c24:	1885803a 	cmpltu	r2,r3,r2
   29c28:	10803fcc 	andi	r2,r2,255
   29c2c:	e0bf0315 	stw	r2,-1012(fp)
   29c30:	e0fe1717 	ldw	r3,-1956(fp)
   29c34:	e0bf0317 	ldw	r2,-1012(fp)
   29c38:	1885883a 	add	r2,r3,r2
   29c3c:	e0be1715 	stw	r2,-1956(fp)
   29c40:	e0fe1717 	ldw	r3,-1956(fp)
   29c44:	e0bf0317 	ldw	r2,-1012(fp)
   29c48:	1880022e 	bgeu	r3,r2,29c54 <secp256k1_scalar_reduce_512+0x41c0>
   29c4c:	00c00044 	movi	r3,1
   29c50:	00000106 	br	29c58 <secp256k1_scalar_reduce_512+0x41c4>
   29c54:	0007883a 	mov	r3,zero
   29c58:	e0be1817 	ldw	r2,-1952(fp)
   29c5c:	10c5883a 	add	r2,r2,r3
   29c60:	e0be1815 	stw	r2,-1952(fp)
    muladd(m12, SECP256K1_N_C_2);
   29c64:	e0beb217 	ldw	r2,-1336(fp)
   29c68:	e0bfd215 	stw	r2,-184(fp)
   29c6c:	e03fd315 	stw	zero,-180(fp)
   29c70:	01942df4 	movhi	r6,20663
   29c74:	3197f104 	addi	r6,r6,24516
   29c78:	000f883a 	mov	r7,zero
   29c7c:	e13fd217 	ldw	r4,-184(fp)
   29c80:	e17fd317 	ldw	r5,-180(fp)
   29c84:	00429400 	call	42940 <__muldi3>
   29c88:	1009883a 	mov	r4,r2
   29c8c:	180b883a 	mov	r5,r3
   29c90:	e13f0415 	stw	r4,-1008(fp)
   29c94:	e17f0515 	stw	r5,-1004(fp)
   29c98:	e0bf0517 	ldw	r2,-1004(fp)
   29c9c:	1004d83a 	srl	r2,r2,zero
   29ca0:	e0bfd415 	stw	r2,-176(fp)
   29ca4:	e03fd515 	stw	zero,-172(fp)
   29ca8:	e13fd417 	ldw	r4,-176(fp)
   29cac:	e13f0615 	stw	r4,-1000(fp)
   29cb0:	e0bf0417 	ldw	r2,-1008(fp)
   29cb4:	e0bf0715 	stw	r2,-996(fp)
   29cb8:	e0fe1617 	ldw	r3,-1960(fp)
   29cbc:	e0bf0717 	ldw	r2,-996(fp)
   29cc0:	1885883a 	add	r2,r3,r2
   29cc4:	e0be1615 	stw	r2,-1960(fp)
   29cc8:	e0fe1617 	ldw	r3,-1960(fp)
   29ccc:	e0bf0717 	ldw	r2,-996(fp)
   29cd0:	1880022e 	bgeu	r3,r2,29cdc <secp256k1_scalar_reduce_512+0x4248>
   29cd4:	00c00044 	movi	r3,1
   29cd8:	00000106 	br	29ce0 <secp256k1_scalar_reduce_512+0x424c>
   29cdc:	0007883a 	mov	r3,zero
   29ce0:	e0bf0617 	ldw	r2,-1000(fp)
   29ce4:	10c5883a 	add	r2,r2,r3
   29ce8:	e0bf0615 	stw	r2,-1000(fp)
   29cec:	e0fe1717 	ldw	r3,-1956(fp)
   29cf0:	e0bf0617 	ldw	r2,-1000(fp)
   29cf4:	1885883a 	add	r2,r3,r2
   29cf8:	e0be1715 	stw	r2,-1956(fp)
   29cfc:	e0fe1717 	ldw	r3,-1956(fp)
   29d00:	e0bf0617 	ldw	r2,-1000(fp)
   29d04:	1880022e 	bgeu	r3,r2,29d10 <secp256k1_scalar_reduce_512+0x427c>
   29d08:	00c00044 	movi	r3,1
   29d0c:	00000106 	br	29d14 <secp256k1_scalar_reduce_512+0x4280>
   29d10:	0007883a 	mov	r3,zero
   29d14:	e0be1817 	ldw	r2,-1952(fp)
   29d18:	10c5883a 	add	r2,r2,r3
   29d1c:	e0be1815 	stw	r2,-1952(fp)
   29d20:	e0fe1717 	ldw	r3,-1956(fp)
   29d24:	e0bf0617 	ldw	r2,-1000(fp)
   29d28:	1885803a 	cmpltu	r2,r3,r2
   29d2c:	10803fcc 	andi	r2,r2,255
   29d30:	10001126 	beq	r2,zero,29d78 <secp256k1_scalar_reduce_512+0x42e4>
   29d34:	e0be1817 	ldw	r2,-1952(fp)
   29d38:	1005003a 	cmpeq	r2,r2,zero
   29d3c:	10803fcc 	andi	r2,r2,255
   29d40:	10000d26 	beq	r2,zero,29d78 <secp256k1_scalar_reduce_512+0x42e4>
   29d44:	d0a01617 	ldw	r2,-32680(gp)
   29d48:	10c00317 	ldw	r3,12(r2)
   29d4c:	008001b4 	movhi	r2,6
   29d50:	10b02604 	addi	r2,r2,-16232
   29d54:	d8800015 	stw	r2,0(sp)
   29d58:	01c07244 	movi	r7,457
   29d5c:	018001b4 	movhi	r6,6
   29d60:	31af9204 	addi	r6,r6,-16824
   29d64:	014001b4 	movhi	r5,6
   29d68:	296b3804 	addi	r5,r5,-21280
   29d6c:	1809883a 	mov	r4,r3
   29d70:	00452600 	call	45260 <fprintf>
   29d74:	00450340 	call	45034 <abort>
    muladd(m11, SECP256K1_N_C_3);
   29d78:	e0beb117 	ldw	r2,-1340(fp)
   29d7c:	e0bfd615 	stw	r2,-168(fp)
   29d80:	e03fd715 	stw	zero,-164(fp)
   29d84:	01915474 	movhi	r6,17745
   29d88:	3188c644 	addi	r6,r6,8985
   29d8c:	000f883a 	mov	r7,zero
   29d90:	e13fd617 	ldw	r4,-168(fp)
   29d94:	e17fd717 	ldw	r5,-164(fp)
   29d98:	00429400 	call	42940 <__muldi3>
   29d9c:	1009883a 	mov	r4,r2
   29da0:	180b883a 	mov	r5,r3
   29da4:	e13f0815 	stw	r4,-992(fp)
   29da8:	e17f0915 	stw	r5,-988(fp)
   29dac:	e0bf0917 	ldw	r2,-988(fp)
   29db0:	1004d83a 	srl	r2,r2,zero
   29db4:	e0bfd815 	stw	r2,-160(fp)
   29db8:	e03fd915 	stw	zero,-156(fp)
   29dbc:	e17fd817 	ldw	r5,-160(fp)
   29dc0:	e17f0a15 	stw	r5,-984(fp)
   29dc4:	e0bf0817 	ldw	r2,-992(fp)
   29dc8:	e0bf0b15 	stw	r2,-980(fp)
   29dcc:	e0fe1617 	ldw	r3,-1960(fp)
   29dd0:	e0bf0b17 	ldw	r2,-980(fp)
   29dd4:	1885883a 	add	r2,r3,r2
   29dd8:	e0be1615 	stw	r2,-1960(fp)
   29ddc:	e0fe1617 	ldw	r3,-1960(fp)
   29de0:	e0bf0b17 	ldw	r2,-980(fp)
   29de4:	1880022e 	bgeu	r3,r2,29df0 <secp256k1_scalar_reduce_512+0x435c>
   29de8:	00c00044 	movi	r3,1
   29dec:	00000106 	br	29df4 <secp256k1_scalar_reduce_512+0x4360>
   29df0:	0007883a 	mov	r3,zero
   29df4:	e0bf0a17 	ldw	r2,-984(fp)
   29df8:	10c5883a 	add	r2,r2,r3
   29dfc:	e0bf0a15 	stw	r2,-984(fp)
   29e00:	e0fe1717 	ldw	r3,-1956(fp)
   29e04:	e0bf0a17 	ldw	r2,-984(fp)
   29e08:	1885883a 	add	r2,r3,r2
   29e0c:	e0be1715 	stw	r2,-1956(fp)
   29e10:	e0fe1717 	ldw	r3,-1956(fp)
   29e14:	e0bf0a17 	ldw	r2,-984(fp)
   29e18:	1880022e 	bgeu	r3,r2,29e24 <secp256k1_scalar_reduce_512+0x4390>
   29e1c:	00c00044 	movi	r3,1
   29e20:	00000106 	br	29e28 <secp256k1_scalar_reduce_512+0x4394>
   29e24:	0007883a 	mov	r3,zero
   29e28:	e0be1817 	ldw	r2,-1952(fp)
   29e2c:	10c5883a 	add	r2,r2,r3
   29e30:	e0be1815 	stw	r2,-1952(fp)
   29e34:	e0fe1717 	ldw	r3,-1956(fp)
   29e38:	e0bf0a17 	ldw	r2,-984(fp)
   29e3c:	1885803a 	cmpltu	r2,r3,r2
   29e40:	10803fcc 	andi	r2,r2,255
   29e44:	10001126 	beq	r2,zero,29e8c <secp256k1_scalar_reduce_512+0x43f8>
   29e48:	e0be1817 	ldw	r2,-1952(fp)
   29e4c:	1005003a 	cmpeq	r2,r2,zero
   29e50:	10803fcc 	andi	r2,r2,255
   29e54:	10000d26 	beq	r2,zero,29e8c <secp256k1_scalar_reduce_512+0x43f8>
   29e58:	d0a01617 	ldw	r2,-32680(gp)
   29e5c:	10c00317 	ldw	r3,12(r2)
   29e60:	008001b4 	movhi	r2,6
   29e64:	10b02604 	addi	r2,r2,-16232
   29e68:	d8800015 	stw	r2,0(sp)
   29e6c:	01c07284 	movi	r7,458
   29e70:	018001b4 	movhi	r6,6
   29e74:	31af9204 	addi	r6,r6,-16824
   29e78:	014001b4 	movhi	r5,6
   29e7c:	296b3804 	addi	r5,r5,-21280
   29e80:	1809883a 	mov	r4,r3
   29e84:	00452600 	call	45260 <fprintf>
   29e88:	00450340 	call	45034 <abort>
    sumadd(m10);
   29e8c:	e0fe1617 	ldw	r3,-1960(fp)
   29e90:	e0beb017 	ldw	r2,-1344(fp)
   29e94:	1885883a 	add	r2,r3,r2
   29e98:	e0be1615 	stw	r2,-1960(fp)
   29e9c:	e0fe1617 	ldw	r3,-1960(fp)
   29ea0:	e0beb017 	ldw	r2,-1344(fp)
   29ea4:	1885803a 	cmpltu	r2,r3,r2
   29ea8:	10803fcc 	andi	r2,r2,255
   29eac:	e0bf0c15 	stw	r2,-976(fp)
   29eb0:	e0fe1717 	ldw	r3,-1956(fp)
   29eb4:	e0bf0c17 	ldw	r2,-976(fp)
   29eb8:	1885883a 	add	r2,r3,r2
   29ebc:	e0be1715 	stw	r2,-1956(fp)
   29ec0:	e0fe1717 	ldw	r3,-1956(fp)
   29ec4:	e0bf0c17 	ldw	r2,-976(fp)
   29ec8:	1880022e 	bgeu	r3,r2,29ed4 <secp256k1_scalar_reduce_512+0x4440>
   29ecc:	00c00044 	movi	r3,1
   29ed0:	00000106 	br	29ed8 <secp256k1_scalar_reduce_512+0x4444>
   29ed4:	0007883a 	mov	r3,zero
   29ed8:	e0be1817 	ldw	r2,-1952(fp)
   29edc:	10c5883a 	add	r2,r2,r3
   29ee0:	e0be1815 	stw	r2,-1952(fp)
    extract(p6);
   29ee4:	e0be1617 	ldw	r2,-1960(fp)
   29ee8:	e0bf0d15 	stw	r2,-972(fp)
   29eec:	e0be1717 	ldw	r2,-1956(fp)
   29ef0:	e0be1615 	stw	r2,-1960(fp)
   29ef4:	e0be1817 	ldw	r2,-1952(fp)
   29ef8:	e0be1715 	stw	r2,-1956(fp)
   29efc:	e03e1815 	stw	zero,-1952(fp)
    sumadd_fast(m7);
   29f00:	e0fe1617 	ldw	r3,-1960(fp)
   29f04:	e0be9217 	ldw	r2,-1464(fp)
   29f08:	1885883a 	add	r2,r3,r2
   29f0c:	e0be1615 	stw	r2,-1960(fp)
   29f10:	e0fe1617 	ldw	r3,-1960(fp)
   29f14:	e0be9217 	ldw	r2,-1464(fp)
   29f18:	1880022e 	bgeu	r3,r2,29f24 <secp256k1_scalar_reduce_512+0x4490>
   29f1c:	00c00044 	movi	r3,1
   29f20:	00000106 	br	29f28 <secp256k1_scalar_reduce_512+0x4494>
   29f24:	0007883a 	mov	r3,zero
   29f28:	e0be1717 	ldw	r2,-1956(fp)
   29f2c:	10c5883a 	add	r2,r2,r3
   29f30:	e0be1715 	stw	r2,-1956(fp)
   29f34:	e0be1717 	ldw	r2,-1956(fp)
   29f38:	1005003a 	cmpeq	r2,r2,zero
   29f3c:	1009883a 	mov	r4,r2
   29f40:	e0fe1617 	ldw	r3,-1960(fp)
   29f44:	e0be9217 	ldw	r2,-1464(fp)
   29f48:	1885803a 	cmpltu	r2,r3,r2
   29f4c:	2084703a 	and	r2,r4,r2
   29f50:	10803fcc 	andi	r2,r2,255
   29f54:	10000d26 	beq	r2,zero,29f8c <secp256k1_scalar_reduce_512+0x44f8>
   29f58:	d0a01617 	ldw	r2,-32680(gp)
   29f5c:	10c00317 	ldw	r3,12(r2)
   29f60:	008001b4 	movhi	r2,6
   29f64:	10b05204 	addi	r2,r2,-16056
   29f68:	d8800015 	stw	r2,0(sp)
   29f6c:	01c07344 	movi	r7,461
   29f70:	018001b4 	movhi	r6,6
   29f74:	31af9204 	addi	r6,r6,-16824
   29f78:	014001b4 	movhi	r5,6
   29f7c:	296b3804 	addi	r5,r5,-21280
   29f80:	1809883a 	mov	r4,r3
   29f84:	00452600 	call	45260 <fprintf>
   29f88:	00450340 	call	45034 <abort>
   29f8c:	e0be1817 	ldw	r2,-1952(fp)
   29f90:	1004c03a 	cmpne	r2,r2,zero
   29f94:	10803fcc 	andi	r2,r2,255
   29f98:	10000d26 	beq	r2,zero,29fd0 <secp256k1_scalar_reduce_512+0x453c>
   29f9c:	d0a01617 	ldw	r2,-32680(gp)
   29fa0:	10c00317 	ldw	r3,12(r2)
   29fa4:	008001b4 	movhi	r2,6
   29fa8:	10b01104 	addi	r2,r2,-16316
   29fac:	d8800015 	stw	r2,0(sp)
   29fb0:	01c07344 	movi	r7,461
   29fb4:	018001b4 	movhi	r6,6
   29fb8:	31af9204 	addi	r6,r6,-16824
   29fbc:	014001b4 	movhi	r5,6
   29fc0:	296b3804 	addi	r5,r5,-21280
   29fc4:	1809883a 	mov	r4,r3
   29fc8:	00452600 	call	45260 <fprintf>
   29fcc:	00450340 	call	45034 <abort>
    muladd_fast(m12, SECP256K1_N_C_3);
   29fd0:	e0beb217 	ldw	r2,-1336(fp)
   29fd4:	e0bfda15 	stw	r2,-152(fp)
   29fd8:	e03fdb15 	stw	zero,-148(fp)
   29fdc:	01915474 	movhi	r6,17745
   29fe0:	3188c644 	addi	r6,r6,8985
   29fe4:	000f883a 	mov	r7,zero
   29fe8:	e13fda17 	ldw	r4,-152(fp)
   29fec:	e17fdb17 	ldw	r5,-148(fp)
   29ff0:	00429400 	call	42940 <__muldi3>
   29ff4:	1009883a 	mov	r4,r2
   29ff8:	180b883a 	mov	r5,r3
   29ffc:	e13f0e15 	stw	r4,-968(fp)
   2a000:	e17f0f15 	stw	r5,-964(fp)
   2a004:	e0bf0f17 	ldw	r2,-964(fp)
   2a008:	1004d83a 	srl	r2,r2,zero
   2a00c:	e0bfdc15 	stw	r2,-144(fp)
   2a010:	e03fdd15 	stw	zero,-140(fp)
   2a014:	e1bfdc17 	ldw	r6,-144(fp)
   2a018:	e1bf1015 	stw	r6,-960(fp)
   2a01c:	e0bf0e17 	ldw	r2,-968(fp)
   2a020:	e0bf1115 	stw	r2,-956(fp)
   2a024:	e0fe1617 	ldw	r3,-1960(fp)
   2a028:	e0bf1117 	ldw	r2,-956(fp)
   2a02c:	1885883a 	add	r2,r3,r2
   2a030:	e0be1615 	stw	r2,-1960(fp)
   2a034:	e0fe1617 	ldw	r3,-1960(fp)
   2a038:	e0bf1117 	ldw	r2,-956(fp)
   2a03c:	1880022e 	bgeu	r3,r2,2a048 <secp256k1_scalar_reduce_512+0x45b4>
   2a040:	00c00044 	movi	r3,1
   2a044:	00000106 	br	2a04c <secp256k1_scalar_reduce_512+0x45b8>
   2a048:	0007883a 	mov	r3,zero
   2a04c:	e0bf1017 	ldw	r2,-960(fp)
   2a050:	10c5883a 	add	r2,r2,r3
   2a054:	e0bf1015 	stw	r2,-960(fp)
   2a058:	e0fe1717 	ldw	r3,-1956(fp)
   2a05c:	e0bf1017 	ldw	r2,-960(fp)
   2a060:	1885883a 	add	r2,r3,r2
   2a064:	e0be1715 	stw	r2,-1956(fp)
   2a068:	e0fe1717 	ldw	r3,-1956(fp)
   2a06c:	e0bf1017 	ldw	r2,-960(fp)
   2a070:	1885803a 	cmpltu	r2,r3,r2
   2a074:	10803fcc 	andi	r2,r2,255
   2a078:	10000d26 	beq	r2,zero,2a0b0 <secp256k1_scalar_reduce_512+0x461c>
   2a07c:	d0a01617 	ldw	r2,-32680(gp)
   2a080:	10c00317 	ldw	r3,12(r2)
   2a084:	008001b4 	movhi	r2,6
   2a088:	10b00904 	addi	r2,r2,-16348
   2a08c:	d8800015 	stw	r2,0(sp)
   2a090:	01c07384 	movi	r7,462
   2a094:	018001b4 	movhi	r6,6
   2a098:	31af9204 	addi	r6,r6,-16824
   2a09c:	014001b4 	movhi	r5,6
   2a0a0:	296b3804 	addi	r5,r5,-21280
   2a0a4:	1809883a 	mov	r4,r3
   2a0a8:	00452600 	call	45260 <fprintf>
   2a0ac:	00450340 	call	45034 <abort>
    sumadd_fast(m11);
   2a0b0:	e0fe1617 	ldw	r3,-1960(fp)
   2a0b4:	e0beb117 	ldw	r2,-1340(fp)
   2a0b8:	1885883a 	add	r2,r3,r2
   2a0bc:	e0be1615 	stw	r2,-1960(fp)
   2a0c0:	e0fe1617 	ldw	r3,-1960(fp)
   2a0c4:	e0beb117 	ldw	r2,-1340(fp)
   2a0c8:	1880022e 	bgeu	r3,r2,2a0d4 <secp256k1_scalar_reduce_512+0x4640>
   2a0cc:	00c00044 	movi	r3,1
   2a0d0:	00000106 	br	2a0d8 <secp256k1_scalar_reduce_512+0x4644>
   2a0d4:	0007883a 	mov	r3,zero
   2a0d8:	e0be1717 	ldw	r2,-1956(fp)
   2a0dc:	10c5883a 	add	r2,r2,r3
   2a0e0:	e0be1715 	stw	r2,-1956(fp)
   2a0e4:	e0be1717 	ldw	r2,-1956(fp)
   2a0e8:	1005003a 	cmpeq	r2,r2,zero
   2a0ec:	1009883a 	mov	r4,r2
   2a0f0:	e0fe1617 	ldw	r3,-1960(fp)
   2a0f4:	e0beb117 	ldw	r2,-1340(fp)
   2a0f8:	1885803a 	cmpltu	r2,r3,r2
   2a0fc:	2084703a 	and	r2,r4,r2
   2a100:	10803fcc 	andi	r2,r2,255
   2a104:	10000d26 	beq	r2,zero,2a13c <secp256k1_scalar_reduce_512+0x46a8>
   2a108:	d0a01617 	ldw	r2,-32680(gp)
   2a10c:	10c00317 	ldw	r3,12(r2)
   2a110:	008001b4 	movhi	r2,6
   2a114:	10b05e04 	addi	r2,r2,-16008
   2a118:	d8800015 	stw	r2,0(sp)
   2a11c:	01c073c4 	movi	r7,463
   2a120:	018001b4 	movhi	r6,6
   2a124:	31af9204 	addi	r6,r6,-16824
   2a128:	014001b4 	movhi	r5,6
   2a12c:	296b3804 	addi	r5,r5,-21280
   2a130:	1809883a 	mov	r4,r3
   2a134:	00452600 	call	45260 <fprintf>
   2a138:	00450340 	call	45034 <abort>
   2a13c:	e0be1817 	ldw	r2,-1952(fp)
   2a140:	1004c03a 	cmpne	r2,r2,zero
   2a144:	10803fcc 	andi	r2,r2,255
   2a148:	10000d26 	beq	r2,zero,2a180 <secp256k1_scalar_reduce_512+0x46ec>
   2a14c:	d0a01617 	ldw	r2,-32680(gp)
   2a150:	10c00317 	ldw	r3,12(r2)
   2a154:	008001b4 	movhi	r2,6
   2a158:	10b01104 	addi	r2,r2,-16316
   2a15c:	d8800015 	stw	r2,0(sp)
   2a160:	01c073c4 	movi	r7,463
   2a164:	018001b4 	movhi	r6,6
   2a168:	31af9204 	addi	r6,r6,-16824
   2a16c:	014001b4 	movhi	r5,6
   2a170:	296b3804 	addi	r5,r5,-21280
   2a174:	1809883a 	mov	r4,r3
   2a178:	00452600 	call	45260 <fprintf>
   2a17c:	00450340 	call	45034 <abort>
    extract_fast(p7);
   2a180:	e0be1617 	ldw	r2,-1960(fp)
   2a184:	e0bf1215 	stw	r2,-952(fp)
   2a188:	e0be1717 	ldw	r2,-1956(fp)
   2a18c:	e0be1615 	stw	r2,-1960(fp)
   2a190:	e03e1715 	stw	zero,-1956(fp)
   2a194:	e0be1817 	ldw	r2,-1952(fp)
   2a198:	1004c03a 	cmpne	r2,r2,zero
   2a19c:	10803fcc 	andi	r2,r2,255
   2a1a0:	10000d26 	beq	r2,zero,2a1d8 <secp256k1_scalar_reduce_512+0x4744>
   2a1a4:	d0a01617 	ldw	r2,-32680(gp)
   2a1a8:	10c00317 	ldw	r3,12(r2)
   2a1ac:	008001b4 	movhi	r2,6
   2a1b0:	10b01104 	addi	r2,r2,-16316
   2a1b4:	d8800015 	stw	r2,0(sp)
   2a1b8:	01c07404 	movi	r7,464
   2a1bc:	018001b4 	movhi	r6,6
   2a1c0:	31af9204 	addi	r6,r6,-16824
   2a1c4:	014001b4 	movhi	r5,6
   2a1c8:	296b3804 	addi	r5,r5,-21280
   2a1cc:	1809883a 	mov	r4,r3
   2a1d0:	00452600 	call	45260 <fprintf>
   2a1d4:	00450340 	call	45034 <abort>
    p8 = c0 + m12;
   2a1d8:	e0fe1617 	ldw	r3,-1960(fp)
   2a1dc:	e0beb217 	ldw	r2,-1336(fp)
   2a1e0:	1885883a 	add	r2,r3,r2
   2a1e4:	e0bf1315 	stw	r2,-948(fp)
    VERIFY_CHECK(p8 <= 2);
   2a1e8:	e0bf1317 	ldw	r2,-948(fp)
   2a1ec:	108000e8 	cmpgeui	r2,r2,3
   2a1f0:	10803fcc 	andi	r2,r2,255
   2a1f4:	10000d26 	beq	r2,zero,2a22c <secp256k1_scalar_reduce_512+0x4798>
   2a1f8:	d0a01617 	ldw	r2,-32680(gp)
   2a1fc:	10c00317 	ldw	r3,12(r2)
   2a200:	008001b4 	movhi	r2,6
   2a204:	10b06b04 	addi	r2,r2,-15956
   2a208:	d8800015 	stw	r2,0(sp)
   2a20c:	01c07484 	movi	r7,466
   2a210:	018001b4 	movhi	r6,6
   2a214:	31af9204 	addi	r6,r6,-16824
   2a218:	014001b4 	movhi	r5,6
   2a21c:	296b3804 	addi	r5,r5,-21280
   2a220:	1809883a 	mov	r4,r3
   2a224:	00452600 	call	45260 <fprintf>
   2a228:	00450340 	call	45034 <abort>

    /* Reduce 258 bits into 256. */
    /* r[0..7] = p[0..7] + p[8] * SECP256K1_N_C. */
    c = p0 + (uint64_t)SECP256K1_N_C_0 * p8;
   2a22c:	e0beb717 	ldw	r2,-1316(fp)
   2a230:	e0bfde15 	stw	r2,-136(fp)
   2a234:	e03fdf15 	stw	zero,-132(fp)
   2a238:	e0bf1317 	ldw	r2,-948(fp)
   2a23c:	e0bfe015 	stw	r2,-128(fp)
   2a240:	e03fe115 	stw	zero,-124(fp)
   2a244:	018bf2b4 	movhi	r6,12234
   2a248:	31afafc4 	addi	r6,r6,-16705
   2a24c:	000f883a 	mov	r7,zero
   2a250:	e13fe017 	ldw	r4,-128(fp)
   2a254:	e17fe117 	ldw	r5,-124(fp)
   2a258:	00429400 	call	42940 <__muldi3>
   2a25c:	100f883a 	mov	r7,r2
   2a260:	1811883a 	mov	r8,r3
   2a264:	380b883a 	mov	r5,r7
   2a268:	400d883a 	mov	r6,r8
   2a26c:	e1ffde17 	ldw	r7,-136(fp)
   2a270:	3945883a 	add	r2,r7,r5
   2a274:	e1ffde17 	ldw	r7,-136(fp)
   2a278:	11c9803a 	cmpltu	r4,r2,r7
   2a27c:	e1ffdf17 	ldw	r7,-132(fp)
   2a280:	3987883a 	add	r3,r7,r6
   2a284:	20c9883a 	add	r4,r4,r3
   2a288:	2007883a 	mov	r3,r4
   2a28c:	e0bf1415 	stw	r2,-944(fp)
   2a290:	e0ff1515 	stw	r3,-940(fp)
    r->d[0] = c & 0xFFFFFFFFUL; c >>= 32;
   2a294:	e0ff1417 	ldw	r3,-944(fp)
   2a298:	e0bf1617 	ldw	r2,-936(fp)
   2a29c:	10c00015 	stw	r3,0(r2)
   2a2a0:	e0bf1517 	ldw	r2,-940(fp)
   2a2a4:	1004d83a 	srl	r2,r2,zero
   2a2a8:	e0bf1415 	stw	r2,-944(fp)
   2a2ac:	e03f1515 	stw	zero,-940(fp)
    c += p1 + (uint64_t)SECP256K1_N_C_1 * p8;
   2a2b0:	e0bec017 	ldw	r2,-1280(fp)
   2a2b4:	e0bfe215 	stw	r2,-120(fp)
   2a2b8:	e03fe315 	stw	zero,-116(fp)
   2a2bc:	e0bf1317 	ldw	r2,-948(fp)
   2a2c0:	e0bfe415 	stw	r2,-112(fp)
   2a2c4:	e03fe515 	stw	zero,-108(fp)
   2a2c8:	01900bb4 	movhi	r6,16430
   2a2cc:	31a85cc4 	addi	r6,r6,-24205
   2a2d0:	000f883a 	mov	r7,zero
   2a2d4:	e13fe417 	ldw	r4,-112(fp)
   2a2d8:	e17fe517 	ldw	r5,-108(fp)
   2a2dc:	00429400 	call	42940 <__muldi3>
   2a2e0:	100f883a 	mov	r7,r2
   2a2e4:	1811883a 	mov	r8,r3
   2a2e8:	380b883a 	mov	r5,r7
   2a2ec:	400d883a 	mov	r6,r8
   2a2f0:	e13fe217 	ldw	r4,-120(fp)
   2a2f4:	2145883a 	add	r2,r4,r5
   2a2f8:	e1ffe217 	ldw	r7,-120(fp)
   2a2fc:	11c9803a 	cmpltu	r4,r2,r7
   2a300:	e1ffe317 	ldw	r7,-116(fp)
   2a304:	3987883a 	add	r3,r7,r6
   2a308:	20c9883a 	add	r4,r4,r3
   2a30c:	2007883a 	mov	r3,r4
   2a310:	100d883a 	mov	r6,r2
   2a314:	180f883a 	mov	r7,r3
   2a318:	e13f1417 	ldw	r4,-944(fp)
   2a31c:	e17f1517 	ldw	r5,-940(fp)
   2a320:	2185883a 	add	r2,r4,r6
   2a324:	1111803a 	cmpltu	r8,r2,r4
   2a328:	29c7883a 	add	r3,r5,r7
   2a32c:	40c9883a 	add	r4,r8,r3
   2a330:	2007883a 	mov	r3,r4
   2a334:	e0bf1415 	stw	r2,-944(fp)
   2a338:	e0ff1515 	stw	r3,-940(fp)
    r->d[1] = c & 0xFFFFFFFFUL; c >>= 32;
   2a33c:	e0ff1417 	ldw	r3,-944(fp)
   2a340:	e0bf1617 	ldw	r2,-936(fp)
   2a344:	10c00115 	stw	r3,4(r2)
   2a348:	e0bf1517 	ldw	r2,-940(fp)
   2a34c:	1004d83a 	srl	r2,r2,zero
   2a350:	e0bf1415 	stw	r2,-944(fp)
   2a354:	e03f1515 	stw	zero,-940(fp)
    c += p2 + (uint64_t)SECP256K1_N_C_2 * p8;
   2a358:	e0bece17 	ldw	r2,-1224(fp)
   2a35c:	e0bfe615 	stw	r2,-104(fp)
   2a360:	e03fe715 	stw	zero,-100(fp)
   2a364:	e0bf1317 	ldw	r2,-948(fp)
   2a368:	e0bfe815 	stw	r2,-96(fp)
   2a36c:	e03fe915 	stw	zero,-92(fp)
   2a370:	01942df4 	movhi	r6,20663
   2a374:	3197f104 	addi	r6,r6,24516
   2a378:	000f883a 	mov	r7,zero
   2a37c:	e13fe817 	ldw	r4,-96(fp)
   2a380:	e17fe917 	ldw	r5,-92(fp)
   2a384:	00429400 	call	42940 <__muldi3>
   2a388:	100d883a 	mov	r6,r2
   2a38c:	180f883a 	mov	r7,r3
   2a390:	3009883a 	mov	r4,r6
   2a394:	380b883a 	mov	r5,r7
   2a398:	e1bfe617 	ldw	r6,-104(fp)
   2a39c:	3105883a 	add	r2,r6,r4
   2a3a0:	e1ffe617 	ldw	r7,-104(fp)
   2a3a4:	11cd803a 	cmpltu	r6,r2,r7
   2a3a8:	e1ffe717 	ldw	r7,-100(fp)
   2a3ac:	3947883a 	add	r3,r7,r5
   2a3b0:	30c9883a 	add	r4,r6,r3
   2a3b4:	2007883a 	mov	r3,r4
   2a3b8:	100d883a 	mov	r6,r2
   2a3bc:	180f883a 	mov	r7,r3
   2a3c0:	e13f1417 	ldw	r4,-944(fp)
   2a3c4:	e17f1517 	ldw	r5,-940(fp)
   2a3c8:	2185883a 	add	r2,r4,r6
   2a3cc:	1111803a 	cmpltu	r8,r2,r4
   2a3d0:	29c7883a 	add	r3,r5,r7
   2a3d4:	40c9883a 	add	r4,r8,r3
   2a3d8:	2007883a 	mov	r3,r4
   2a3dc:	e0bf1415 	stw	r2,-944(fp)
   2a3e0:	e0ff1515 	stw	r3,-940(fp)
    r->d[2] = c & 0xFFFFFFFFUL; c >>= 32;
   2a3e4:	e0ff1417 	ldw	r3,-944(fp)
   2a3e8:	e0bf1617 	ldw	r2,-936(fp)
   2a3ec:	10c00215 	stw	r3,8(r2)
   2a3f0:	e0bf1517 	ldw	r2,-940(fp)
   2a3f4:	1004d83a 	srl	r2,r2,zero
   2a3f8:	e0bf1415 	stw	r2,-944(fp)
   2a3fc:	e03f1515 	stw	zero,-940(fp)
    c += p3 + (uint64_t)SECP256K1_N_C_3 * p8;
   2a400:	e0bee017 	ldw	r2,-1152(fp)
   2a404:	e0bfea15 	stw	r2,-88(fp)
   2a408:	e03feb15 	stw	zero,-84(fp)
   2a40c:	e0bf1317 	ldw	r2,-948(fp)
   2a410:	e0bfec15 	stw	r2,-80(fp)
   2a414:	e03fed15 	stw	zero,-76(fp)
   2a418:	01915474 	movhi	r6,17745
   2a41c:	3188c644 	addi	r6,r6,8985
   2a420:	000f883a 	mov	r7,zero
   2a424:	e13fec17 	ldw	r4,-80(fp)
   2a428:	e17fed17 	ldw	r5,-76(fp)
   2a42c:	00429400 	call	42940 <__muldi3>
   2a430:	100d883a 	mov	r6,r2
   2a434:	180f883a 	mov	r7,r3
   2a438:	3009883a 	mov	r4,r6
   2a43c:	380b883a 	mov	r5,r7
   2a440:	e1bfea17 	ldw	r6,-88(fp)
   2a444:	3105883a 	add	r2,r6,r4
   2a448:	e1ffea17 	ldw	r7,-88(fp)
   2a44c:	11cd803a 	cmpltu	r6,r2,r7
   2a450:	e1ffeb17 	ldw	r7,-84(fp)
   2a454:	3947883a 	add	r3,r7,r5
   2a458:	30c9883a 	add	r4,r6,r3
   2a45c:	2007883a 	mov	r3,r4
   2a460:	100d883a 	mov	r6,r2
   2a464:	180f883a 	mov	r7,r3
   2a468:	e13f1417 	ldw	r4,-944(fp)
   2a46c:	e17f1517 	ldw	r5,-940(fp)
   2a470:	2185883a 	add	r2,r4,r6
   2a474:	1111803a 	cmpltu	r8,r2,r4
   2a478:	29c7883a 	add	r3,r5,r7
   2a47c:	40c9883a 	add	r4,r8,r3
   2a480:	2007883a 	mov	r3,r4
   2a484:	e0bf1415 	stw	r2,-944(fp)
   2a488:	e0ff1515 	stw	r3,-940(fp)
    r->d[3] = c & 0xFFFFFFFFUL; c >>= 32;
   2a48c:	e0ff1417 	ldw	r3,-944(fp)
   2a490:	e0bf1617 	ldw	r2,-936(fp)
   2a494:	10c00315 	stw	r3,12(r2)
   2a498:	e0bf1517 	ldw	r2,-940(fp)
   2a49c:	1004d83a 	srl	r2,r2,zero
   2a4a0:	e0bf1415 	stw	r2,-944(fp)
   2a4a4:	e03f1515 	stw	zero,-940(fp)
    c += p4 + (uint64_t)p8;
   2a4a8:	e0bef317 	ldw	r2,-1076(fp)
   2a4ac:	e0bfee15 	stw	r2,-72(fp)
   2a4b0:	e03fef15 	stw	zero,-68(fp)
   2a4b4:	e0bf1317 	ldw	r2,-948(fp)
   2a4b8:	e0bff015 	stw	r2,-64(fp)
   2a4bc:	e03ff115 	stw	zero,-60(fp)
   2a4c0:	e13fee17 	ldw	r4,-72(fp)
   2a4c4:	e17ff017 	ldw	r5,-64(fp)
   2a4c8:	2145883a 	add	r2,r4,r5
   2a4cc:	e1bfee17 	ldw	r6,-72(fp)
   2a4d0:	1189803a 	cmpltu	r4,r2,r6
   2a4d4:	e1ffef17 	ldw	r7,-68(fp)
   2a4d8:	e17ff117 	ldw	r5,-60(fp)
   2a4dc:	3947883a 	add	r3,r7,r5
   2a4e0:	20c9883a 	add	r4,r4,r3
   2a4e4:	2007883a 	mov	r3,r4
   2a4e8:	100d883a 	mov	r6,r2
   2a4ec:	180f883a 	mov	r7,r3
   2a4f0:	e13f1417 	ldw	r4,-944(fp)
   2a4f4:	e17f1517 	ldw	r5,-940(fp)
   2a4f8:	2185883a 	add	r2,r4,r6
   2a4fc:	1111803a 	cmpltu	r8,r2,r4
   2a500:	29c7883a 	add	r3,r5,r7
   2a504:	40c9883a 	add	r4,r8,r3
   2a508:	2007883a 	mov	r3,r4
   2a50c:	e0bf1415 	stw	r2,-944(fp)
   2a510:	e0ff1515 	stw	r3,-940(fp)
    r->d[4] = c & 0xFFFFFFFFUL; c >>= 32;
   2a514:	e0ff1417 	ldw	r3,-944(fp)
   2a518:	e0bf1617 	ldw	r2,-936(fp)
   2a51c:	10c00415 	stw	r3,16(r2)
   2a520:	e0bf1517 	ldw	r2,-940(fp)
   2a524:	1004d83a 	srl	r2,r2,zero
   2a528:	e0bf1415 	stw	r2,-944(fp)
   2a52c:	e03f1515 	stw	zero,-940(fp)
    c += p5;
   2a530:	e0bf0217 	ldw	r2,-1016(fp)
   2a534:	e0bff215 	stw	r2,-56(fp)
   2a538:	e03ff315 	stw	zero,-52(fp)
   2a53c:	e13f1417 	ldw	r4,-944(fp)
   2a540:	e17f1517 	ldw	r5,-940(fp)
   2a544:	e1bff217 	ldw	r6,-56(fp)
   2a548:	2185883a 	add	r2,r4,r6
   2a54c:	110d803a 	cmpltu	r6,r2,r4
   2a550:	e1fff317 	ldw	r7,-52(fp)
   2a554:	29c7883a 	add	r3,r5,r7
   2a558:	30c9883a 	add	r4,r6,r3
   2a55c:	2007883a 	mov	r3,r4
   2a560:	e0bf1415 	stw	r2,-944(fp)
   2a564:	e0ff1515 	stw	r3,-940(fp)
    r->d[5] = c & 0xFFFFFFFFUL; c >>= 32;
   2a568:	e0ff1417 	ldw	r3,-944(fp)
   2a56c:	e0bf1617 	ldw	r2,-936(fp)
   2a570:	10c00515 	stw	r3,20(r2)
   2a574:	e0bf1517 	ldw	r2,-940(fp)
   2a578:	1004d83a 	srl	r2,r2,zero
   2a57c:	e0bf1415 	stw	r2,-944(fp)
   2a580:	e03f1515 	stw	zero,-940(fp)
    c += p6;
   2a584:	e0bf0d17 	ldw	r2,-972(fp)
   2a588:	e0bff415 	stw	r2,-48(fp)
   2a58c:	e03ff515 	stw	zero,-44(fp)
   2a590:	e13f1417 	ldw	r4,-944(fp)
   2a594:	e17f1517 	ldw	r5,-940(fp)
   2a598:	e1bff417 	ldw	r6,-48(fp)
   2a59c:	2185883a 	add	r2,r4,r6
   2a5a0:	110d803a 	cmpltu	r6,r2,r4
   2a5a4:	e1fff517 	ldw	r7,-44(fp)
   2a5a8:	29c7883a 	add	r3,r5,r7
   2a5ac:	30c9883a 	add	r4,r6,r3
   2a5b0:	2007883a 	mov	r3,r4
   2a5b4:	e0bf1415 	stw	r2,-944(fp)
   2a5b8:	e0ff1515 	stw	r3,-940(fp)
    r->d[6] = c & 0xFFFFFFFFUL; c >>= 32;
   2a5bc:	e0ff1417 	ldw	r3,-944(fp)
   2a5c0:	e0bf1617 	ldw	r2,-936(fp)
   2a5c4:	10c00615 	stw	r3,24(r2)
   2a5c8:	e0bf1517 	ldw	r2,-940(fp)
   2a5cc:	1004d83a 	srl	r2,r2,zero
   2a5d0:	e0bf1415 	stw	r2,-944(fp)
   2a5d4:	e03f1515 	stw	zero,-940(fp)
    c += p7;
   2a5d8:	e0bf1217 	ldw	r2,-952(fp)
   2a5dc:	e0bff615 	stw	r2,-40(fp)
   2a5e0:	e03ff715 	stw	zero,-36(fp)
   2a5e4:	e13f1417 	ldw	r4,-944(fp)
   2a5e8:	e17f1517 	ldw	r5,-940(fp)
   2a5ec:	e1bff617 	ldw	r6,-40(fp)
   2a5f0:	2185883a 	add	r2,r4,r6
   2a5f4:	110d803a 	cmpltu	r6,r2,r4
   2a5f8:	e1fff717 	ldw	r7,-36(fp)
   2a5fc:	29c7883a 	add	r3,r5,r7
   2a600:	30c9883a 	add	r4,r6,r3
   2a604:	2007883a 	mov	r3,r4
   2a608:	e0bf1415 	stw	r2,-944(fp)
   2a60c:	e0ff1515 	stw	r3,-940(fp)
    r->d[7] = c & 0xFFFFFFFFUL; c >>= 32;
   2a610:	e0ff1417 	ldw	r3,-944(fp)
   2a614:	e0bf1617 	ldw	r2,-936(fp)
   2a618:	10c00715 	stw	r3,28(r2)
   2a61c:	e0bf1517 	ldw	r2,-940(fp)
   2a620:	1004d83a 	srl	r2,r2,zero
   2a624:	e0bf1415 	stw	r2,-944(fp)
   2a628:	e03f1515 	stw	zero,-940(fp)

    /* Final reduction of r. */
    secp256k1_scalar_reduce(r, c + secp256k1_scalar_check_overflow(r));
   2a62c:	e13f1617 	ldw	r4,-936(fp)
   2a630:	00235440 	call	23544 <secp256k1_scalar_check_overflow>
   2a634:	1007883a 	mov	r3,r2
   2a638:	e0bf1417 	ldw	r2,-944(fp)
   2a63c:	1885883a 	add	r2,r3,r2
   2a640:	100b883a 	mov	r5,r2
   2a644:	e13f1617 	ldw	r4,-936(fp)
   2a648:	002375c0 	call	2375c <secp256k1_scalar_reduce>
}
   2a64c:	0001883a 	nop
   2a650:	e6fff804 	addi	sp,fp,-32
   2a654:	dfc00917 	ldw	ra,36(sp)
   2a658:	df000817 	ldw	fp,32(sp)
   2a65c:	ddc00717 	ldw	r23,28(sp)
   2a660:	dd800617 	ldw	r22,24(sp)
   2a664:	dd400517 	ldw	r21,20(sp)
   2a668:	dd000417 	ldw	r20,16(sp)
   2a66c:	dcc00317 	ldw	r19,12(sp)
   2a670:	dc800217 	ldw	r18,8(sp)
   2a674:	dc400117 	ldw	r17,4(sp)
   2a678:	dc000017 	ldw	r16,0(sp)
   2a67c:	dec00a04 	addi	sp,sp,40
   2a680:	f800283a 	ret

0002a684 <secp256k1_scalar_mul_512>:

static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar *a, const secp256k1_scalar *b) {
   2a684:	defd7b04 	addi	sp,sp,-2580
   2a688:	dfc28415 	stw	ra,2576(sp)
   2a68c:	df028315 	stw	fp,2572(sp)
   2a690:	ddc28215 	stw	r23,2568(sp)
   2a694:	dd828115 	stw	r22,2564(sp)
   2a698:	dd428015 	stw	r21,2560(sp)
   2a69c:	dd027f15 	stw	r20,2556(sp)
   2a6a0:	dcc27e15 	stw	r19,2552(sp)
   2a6a4:	dc827d15 	stw	r18,2548(sp)
   2a6a8:	dc427c15 	stw	r17,2544(sp)
   2a6ac:	dc027b15 	stw	r16,2540(sp)
   2a6b0:	df028304 	addi	fp,sp,2572
   2a6b4:	e13e8115 	stw	r4,-1532(fp)
   2a6b8:	e17e8215 	stw	r5,-1528(fp)
   2a6bc:	e1be8315 	stw	r6,-1524(fp)
    /* 96 bit accumulator. */
    uint32_t c0 = 0, c1 = 0, c2 = 0;
   2a6c0:	e03d7e15 	stw	zero,-2568(fp)
   2a6c4:	e03d7f15 	stw	zero,-2564(fp)
   2a6c8:	e03d8015 	stw	zero,-2560(fp)

    /* l[0..15] = a[0..7] * b[0..7]. */
    muladd_fast(a->d[0], b->d[0]);
   2a6cc:	e0be8217 	ldw	r2,-1528(fp)
   2a6d0:	10800017 	ldw	r2,0(r2)
   2a6d4:	1013883a 	mov	r9,r2
   2a6d8:	0015883a 	mov	r10,zero
   2a6dc:	e0be8317 	ldw	r2,-1524(fp)
   2a6e0:	10800017 	ldw	r2,0(r2)
   2a6e4:	100f883a 	mov	r7,r2
   2a6e8:	0011883a 	mov	r8,zero
   2a6ec:	380d883a 	mov	r6,r7
   2a6f0:	400f883a 	mov	r7,r8
   2a6f4:	4809883a 	mov	r4,r9
   2a6f8:	500b883a 	mov	r5,r10
   2a6fc:	00429400 	call	42940 <__muldi3>
   2a700:	1009883a 	mov	r4,r2
   2a704:	180b883a 	mov	r5,r3
   2a708:	e13d8115 	stw	r4,-2556(fp)
   2a70c:	e17d8215 	stw	r5,-2552(fp)
   2a710:	e0bd8217 	ldw	r2,-2552(fp)
   2a714:	1020d83a 	srl	r16,r2,zero
   2a718:	0023883a 	mov	r17,zero
   2a71c:	e43d8315 	stw	r16,-2548(fp)
   2a720:	e0bd8117 	ldw	r2,-2556(fp)
   2a724:	e0bd8415 	stw	r2,-2544(fp)
   2a728:	e0fd7e17 	ldw	r3,-2568(fp)
   2a72c:	e0bd8417 	ldw	r2,-2544(fp)
   2a730:	1885883a 	add	r2,r3,r2
   2a734:	e0bd7e15 	stw	r2,-2568(fp)
   2a738:	e0fd7e17 	ldw	r3,-2568(fp)
   2a73c:	e0bd8417 	ldw	r2,-2544(fp)
   2a740:	1880022e 	bgeu	r3,r2,2a74c <secp256k1_scalar_mul_512+0xc8>
   2a744:	00c00044 	movi	r3,1
   2a748:	00000106 	br	2a750 <secp256k1_scalar_mul_512+0xcc>
   2a74c:	0007883a 	mov	r3,zero
   2a750:	e0bd8317 	ldw	r2,-2548(fp)
   2a754:	10c5883a 	add	r2,r2,r3
   2a758:	e0bd8315 	stw	r2,-2548(fp)
   2a75c:	e0fd7f17 	ldw	r3,-2564(fp)
   2a760:	e0bd8317 	ldw	r2,-2548(fp)
   2a764:	1885883a 	add	r2,r3,r2
   2a768:	e0bd7f15 	stw	r2,-2564(fp)
   2a76c:	e0fd7f17 	ldw	r3,-2564(fp)
   2a770:	e0bd8317 	ldw	r2,-2548(fp)
   2a774:	1885803a 	cmpltu	r2,r3,r2
   2a778:	10803fcc 	andi	r2,r2,255
   2a77c:	10000d26 	beq	r2,zero,2a7b4 <secp256k1_scalar_mul_512+0x130>
   2a780:	d0a01617 	ldw	r2,-32680(gp)
   2a784:	10c00317 	ldw	r3,12(r2)
   2a788:	008001b4 	movhi	r2,6
   2a78c:	10b00904 	addi	r2,r2,-16348
   2a790:	d8800015 	stw	r2,0(sp)
   2a794:	01c07c04 	movi	r7,496
   2a798:	018001b4 	movhi	r6,6
   2a79c:	31af9204 	addi	r6,r6,-16824
   2a7a0:	014001b4 	movhi	r5,6
   2a7a4:	296b3804 	addi	r5,r5,-21280
   2a7a8:	1809883a 	mov	r4,r3
   2a7ac:	00452600 	call	45260 <fprintf>
   2a7b0:	00450340 	call	45034 <abort>
    extract_fast(l[0]);
   2a7b4:	e0fe8117 	ldw	r3,-1532(fp)
   2a7b8:	e0bd7e17 	ldw	r2,-2568(fp)
   2a7bc:	18800015 	stw	r2,0(r3)
   2a7c0:	e0bd7f17 	ldw	r2,-2564(fp)
   2a7c4:	e0bd7e15 	stw	r2,-2568(fp)
   2a7c8:	e03d7f15 	stw	zero,-2564(fp)
   2a7cc:	e0bd8017 	ldw	r2,-2560(fp)
   2a7d0:	1004c03a 	cmpne	r2,r2,zero
   2a7d4:	10803fcc 	andi	r2,r2,255
   2a7d8:	10000d26 	beq	r2,zero,2a810 <secp256k1_scalar_mul_512+0x18c>
   2a7dc:	d0a01617 	ldw	r2,-32680(gp)
   2a7e0:	10c00317 	ldw	r3,12(r2)
   2a7e4:	008001b4 	movhi	r2,6
   2a7e8:	10b01104 	addi	r2,r2,-16316
   2a7ec:	d8800015 	stw	r2,0(sp)
   2a7f0:	01c07c44 	movi	r7,497
   2a7f4:	018001b4 	movhi	r6,6
   2a7f8:	31af9204 	addi	r6,r6,-16824
   2a7fc:	014001b4 	movhi	r5,6
   2a800:	296b3804 	addi	r5,r5,-21280
   2a804:	1809883a 	mov	r4,r3
   2a808:	00452600 	call	45260 <fprintf>
   2a80c:	00450340 	call	45034 <abort>
    muladd(a->d[0], b->d[1]);
   2a810:	e0be8217 	ldw	r2,-1528(fp)
   2a814:	10800017 	ldw	r2,0(r2)
   2a818:	102d883a 	mov	r22,r2
   2a81c:	002f883a 	mov	r23,zero
   2a820:	e0be8317 	ldw	r2,-1524(fp)
   2a824:	10800117 	ldw	r2,4(r2)
   2a828:	1029883a 	mov	r20,r2
   2a82c:	002b883a 	mov	r21,zero
   2a830:	a00d883a 	mov	r6,r20
   2a834:	a80f883a 	mov	r7,r21
   2a838:	b009883a 	mov	r4,r22
   2a83c:	b80b883a 	mov	r5,r23
   2a840:	00429400 	call	42940 <__muldi3>
   2a844:	1009883a 	mov	r4,r2
   2a848:	180b883a 	mov	r5,r3
   2a84c:	e13d8515 	stw	r4,-2540(fp)
   2a850:	e17d8615 	stw	r5,-2536(fp)
   2a854:	e0bd8617 	ldw	r2,-2536(fp)
   2a858:	1024d83a 	srl	r18,r2,zero
   2a85c:	0027883a 	mov	r19,zero
   2a860:	e4bd8715 	stw	r18,-2532(fp)
   2a864:	e0bd8517 	ldw	r2,-2540(fp)
   2a868:	e0bd8815 	stw	r2,-2528(fp)
   2a86c:	e0fd7e17 	ldw	r3,-2568(fp)
   2a870:	e0bd8817 	ldw	r2,-2528(fp)
   2a874:	1885883a 	add	r2,r3,r2
   2a878:	e0bd7e15 	stw	r2,-2568(fp)
   2a87c:	e0fd7e17 	ldw	r3,-2568(fp)
   2a880:	e0bd8817 	ldw	r2,-2528(fp)
   2a884:	1880022e 	bgeu	r3,r2,2a890 <secp256k1_scalar_mul_512+0x20c>
   2a888:	00c00044 	movi	r3,1
   2a88c:	00000106 	br	2a894 <secp256k1_scalar_mul_512+0x210>
   2a890:	0007883a 	mov	r3,zero
   2a894:	e0bd8717 	ldw	r2,-2532(fp)
   2a898:	10c5883a 	add	r2,r2,r3
   2a89c:	e0bd8715 	stw	r2,-2532(fp)
   2a8a0:	e0fd7f17 	ldw	r3,-2564(fp)
   2a8a4:	e0bd8717 	ldw	r2,-2532(fp)
   2a8a8:	1885883a 	add	r2,r3,r2
   2a8ac:	e0bd7f15 	stw	r2,-2564(fp)
   2a8b0:	e0fd7f17 	ldw	r3,-2564(fp)
   2a8b4:	e0bd8717 	ldw	r2,-2532(fp)
   2a8b8:	1880022e 	bgeu	r3,r2,2a8c4 <secp256k1_scalar_mul_512+0x240>
   2a8bc:	00c00044 	movi	r3,1
   2a8c0:	00000106 	br	2a8c8 <secp256k1_scalar_mul_512+0x244>
   2a8c4:	0007883a 	mov	r3,zero
   2a8c8:	e0bd8017 	ldw	r2,-2560(fp)
   2a8cc:	10c5883a 	add	r2,r2,r3
   2a8d0:	e0bd8015 	stw	r2,-2560(fp)
   2a8d4:	e0fd7f17 	ldw	r3,-2564(fp)
   2a8d8:	e0bd8717 	ldw	r2,-2532(fp)
   2a8dc:	1885803a 	cmpltu	r2,r3,r2
   2a8e0:	10803fcc 	andi	r2,r2,255
   2a8e4:	10001126 	beq	r2,zero,2a92c <secp256k1_scalar_mul_512+0x2a8>
   2a8e8:	e0bd8017 	ldw	r2,-2560(fp)
   2a8ec:	1005003a 	cmpeq	r2,r2,zero
   2a8f0:	10803fcc 	andi	r2,r2,255
   2a8f4:	10000d26 	beq	r2,zero,2a92c <secp256k1_scalar_mul_512+0x2a8>
   2a8f8:	d0a01617 	ldw	r2,-32680(gp)
   2a8fc:	10c00317 	ldw	r3,12(r2)
   2a900:	008001b4 	movhi	r2,6
   2a904:	10b02604 	addi	r2,r2,-16232
   2a908:	d8800015 	stw	r2,0(sp)
   2a90c:	01c07c84 	movi	r7,498
   2a910:	018001b4 	movhi	r6,6
   2a914:	31af9204 	addi	r6,r6,-16824
   2a918:	014001b4 	movhi	r5,6
   2a91c:	296b3804 	addi	r5,r5,-21280
   2a920:	1809883a 	mov	r4,r3
   2a924:	00452600 	call	45260 <fprintf>
   2a928:	00450340 	call	45034 <abort>
    muladd(a->d[1], b->d[0]);
   2a92c:	e0be8217 	ldw	r2,-1528(fp)
   2a930:	10800117 	ldw	r2,4(r2)
   2a934:	e0be8415 	stw	r2,-1520(fp)
   2a938:	e03e8515 	stw	zero,-1516(fp)
   2a93c:	e0be8317 	ldw	r2,-1524(fp)
   2a940:	10800017 	ldw	r2,0(r2)
   2a944:	e0be8615 	stw	r2,-1512(fp)
   2a948:	e03e8715 	stw	zero,-1508(fp)
   2a94c:	e1be8617 	ldw	r6,-1512(fp)
   2a950:	e1fe8717 	ldw	r7,-1508(fp)
   2a954:	e13e8417 	ldw	r4,-1520(fp)
   2a958:	e17e8517 	ldw	r5,-1516(fp)
   2a95c:	00429400 	call	42940 <__muldi3>
   2a960:	1009883a 	mov	r4,r2
   2a964:	180b883a 	mov	r5,r3
   2a968:	e13d8915 	stw	r4,-2524(fp)
   2a96c:	e17d8a15 	stw	r5,-2520(fp)
   2a970:	e0bd8a17 	ldw	r2,-2520(fp)
   2a974:	1004d83a 	srl	r2,r2,zero
   2a978:	e0be8815 	stw	r2,-1504(fp)
   2a97c:	e03e8915 	stw	zero,-1500(fp)
   2a980:	e0be8817 	ldw	r2,-1504(fp)
   2a984:	e0bd8b15 	stw	r2,-2516(fp)
   2a988:	e0bd8917 	ldw	r2,-2524(fp)
   2a98c:	e0bd8c15 	stw	r2,-2512(fp)
   2a990:	e0fd7e17 	ldw	r3,-2568(fp)
   2a994:	e0bd8c17 	ldw	r2,-2512(fp)
   2a998:	1885883a 	add	r2,r3,r2
   2a99c:	e0bd7e15 	stw	r2,-2568(fp)
   2a9a0:	e0fd7e17 	ldw	r3,-2568(fp)
   2a9a4:	e0bd8c17 	ldw	r2,-2512(fp)
   2a9a8:	1880022e 	bgeu	r3,r2,2a9b4 <secp256k1_scalar_mul_512+0x330>
   2a9ac:	00c00044 	movi	r3,1
   2a9b0:	00000106 	br	2a9b8 <secp256k1_scalar_mul_512+0x334>
   2a9b4:	0007883a 	mov	r3,zero
   2a9b8:	e0bd8b17 	ldw	r2,-2516(fp)
   2a9bc:	10c5883a 	add	r2,r2,r3
   2a9c0:	e0bd8b15 	stw	r2,-2516(fp)
   2a9c4:	e0fd7f17 	ldw	r3,-2564(fp)
   2a9c8:	e0bd8b17 	ldw	r2,-2516(fp)
   2a9cc:	1885883a 	add	r2,r3,r2
   2a9d0:	e0bd7f15 	stw	r2,-2564(fp)
   2a9d4:	e0fd7f17 	ldw	r3,-2564(fp)
   2a9d8:	e0bd8b17 	ldw	r2,-2516(fp)
   2a9dc:	1880022e 	bgeu	r3,r2,2a9e8 <secp256k1_scalar_mul_512+0x364>
   2a9e0:	00c00044 	movi	r3,1
   2a9e4:	00000106 	br	2a9ec <secp256k1_scalar_mul_512+0x368>
   2a9e8:	0007883a 	mov	r3,zero
   2a9ec:	e0bd8017 	ldw	r2,-2560(fp)
   2a9f0:	10c5883a 	add	r2,r2,r3
   2a9f4:	e0bd8015 	stw	r2,-2560(fp)
   2a9f8:	e0fd7f17 	ldw	r3,-2564(fp)
   2a9fc:	e0bd8b17 	ldw	r2,-2516(fp)
   2aa00:	1885803a 	cmpltu	r2,r3,r2
   2aa04:	10803fcc 	andi	r2,r2,255
   2aa08:	10001126 	beq	r2,zero,2aa50 <secp256k1_scalar_mul_512+0x3cc>
   2aa0c:	e0bd8017 	ldw	r2,-2560(fp)
   2aa10:	1005003a 	cmpeq	r2,r2,zero
   2aa14:	10803fcc 	andi	r2,r2,255
   2aa18:	10000d26 	beq	r2,zero,2aa50 <secp256k1_scalar_mul_512+0x3cc>
   2aa1c:	d0a01617 	ldw	r2,-32680(gp)
   2aa20:	10c00317 	ldw	r3,12(r2)
   2aa24:	008001b4 	movhi	r2,6
   2aa28:	10b02604 	addi	r2,r2,-16232
   2aa2c:	d8800015 	stw	r2,0(sp)
   2aa30:	01c07cc4 	movi	r7,499
   2aa34:	018001b4 	movhi	r6,6
   2aa38:	31af9204 	addi	r6,r6,-16824
   2aa3c:	014001b4 	movhi	r5,6
   2aa40:	296b3804 	addi	r5,r5,-21280
   2aa44:	1809883a 	mov	r4,r3
   2aa48:	00452600 	call	45260 <fprintf>
   2aa4c:	00450340 	call	45034 <abort>
    extract(l[1]);
   2aa50:	e0be8117 	ldw	r2,-1532(fp)
   2aa54:	10c00104 	addi	r3,r2,4
   2aa58:	e0bd7e17 	ldw	r2,-2568(fp)
   2aa5c:	18800015 	stw	r2,0(r3)
   2aa60:	e0bd7f17 	ldw	r2,-2564(fp)
   2aa64:	e0bd7e15 	stw	r2,-2568(fp)
   2aa68:	e0bd8017 	ldw	r2,-2560(fp)
   2aa6c:	e0bd7f15 	stw	r2,-2564(fp)
   2aa70:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[2]);
   2aa74:	e0be8217 	ldw	r2,-1528(fp)
   2aa78:	10800017 	ldw	r2,0(r2)
   2aa7c:	e0be8a15 	stw	r2,-1496(fp)
   2aa80:	e03e8b15 	stw	zero,-1492(fp)
   2aa84:	e0be8317 	ldw	r2,-1524(fp)
   2aa88:	10800217 	ldw	r2,8(r2)
   2aa8c:	e0be8c15 	stw	r2,-1488(fp)
   2aa90:	e03e8d15 	stw	zero,-1484(fp)
   2aa94:	e1be8c17 	ldw	r6,-1488(fp)
   2aa98:	e1fe8d17 	ldw	r7,-1484(fp)
   2aa9c:	e13e8a17 	ldw	r4,-1496(fp)
   2aaa0:	e17e8b17 	ldw	r5,-1492(fp)
   2aaa4:	00429400 	call	42940 <__muldi3>
   2aaa8:	1009883a 	mov	r4,r2
   2aaac:	180b883a 	mov	r5,r3
   2aab0:	e13d8d15 	stw	r4,-2508(fp)
   2aab4:	e17d8e15 	stw	r5,-2504(fp)
   2aab8:	e0bd8e17 	ldw	r2,-2504(fp)
   2aabc:	1004d83a 	srl	r2,r2,zero
   2aac0:	e0be8e15 	stw	r2,-1480(fp)
   2aac4:	e03e8f15 	stw	zero,-1476(fp)
   2aac8:	e0be8e17 	ldw	r2,-1480(fp)
   2aacc:	e0bd8f15 	stw	r2,-2500(fp)
   2aad0:	e0bd8d17 	ldw	r2,-2508(fp)
   2aad4:	e0bd9015 	stw	r2,-2496(fp)
   2aad8:	e0fd7e17 	ldw	r3,-2568(fp)
   2aadc:	e0bd9017 	ldw	r2,-2496(fp)
   2aae0:	1885883a 	add	r2,r3,r2
   2aae4:	e0bd7e15 	stw	r2,-2568(fp)
   2aae8:	e0fd7e17 	ldw	r3,-2568(fp)
   2aaec:	e0bd9017 	ldw	r2,-2496(fp)
   2aaf0:	1880022e 	bgeu	r3,r2,2aafc <secp256k1_scalar_mul_512+0x478>
   2aaf4:	00c00044 	movi	r3,1
   2aaf8:	00000106 	br	2ab00 <secp256k1_scalar_mul_512+0x47c>
   2aafc:	0007883a 	mov	r3,zero
   2ab00:	e0bd8f17 	ldw	r2,-2500(fp)
   2ab04:	10c5883a 	add	r2,r2,r3
   2ab08:	e0bd8f15 	stw	r2,-2500(fp)
   2ab0c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ab10:	e0bd8f17 	ldw	r2,-2500(fp)
   2ab14:	1885883a 	add	r2,r3,r2
   2ab18:	e0bd7f15 	stw	r2,-2564(fp)
   2ab1c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ab20:	e0bd8f17 	ldw	r2,-2500(fp)
   2ab24:	1880022e 	bgeu	r3,r2,2ab30 <secp256k1_scalar_mul_512+0x4ac>
   2ab28:	00c00044 	movi	r3,1
   2ab2c:	00000106 	br	2ab34 <secp256k1_scalar_mul_512+0x4b0>
   2ab30:	0007883a 	mov	r3,zero
   2ab34:	e0bd8017 	ldw	r2,-2560(fp)
   2ab38:	10c5883a 	add	r2,r2,r3
   2ab3c:	e0bd8015 	stw	r2,-2560(fp)
   2ab40:	e0fd7f17 	ldw	r3,-2564(fp)
   2ab44:	e0bd8f17 	ldw	r2,-2500(fp)
   2ab48:	1885803a 	cmpltu	r2,r3,r2
   2ab4c:	10803fcc 	andi	r2,r2,255
   2ab50:	10001126 	beq	r2,zero,2ab98 <secp256k1_scalar_mul_512+0x514>
   2ab54:	e0bd8017 	ldw	r2,-2560(fp)
   2ab58:	1005003a 	cmpeq	r2,r2,zero
   2ab5c:	10803fcc 	andi	r2,r2,255
   2ab60:	10000d26 	beq	r2,zero,2ab98 <secp256k1_scalar_mul_512+0x514>
   2ab64:	d0a01617 	ldw	r2,-32680(gp)
   2ab68:	10c00317 	ldw	r3,12(r2)
   2ab6c:	008001b4 	movhi	r2,6
   2ab70:	10b02604 	addi	r2,r2,-16232
   2ab74:	d8800015 	stw	r2,0(sp)
   2ab78:	01c07d44 	movi	r7,501
   2ab7c:	018001b4 	movhi	r6,6
   2ab80:	31af9204 	addi	r6,r6,-16824
   2ab84:	014001b4 	movhi	r5,6
   2ab88:	296b3804 	addi	r5,r5,-21280
   2ab8c:	1809883a 	mov	r4,r3
   2ab90:	00452600 	call	45260 <fprintf>
   2ab94:	00450340 	call	45034 <abort>
    muladd(a->d[1], b->d[1]);
   2ab98:	e0be8217 	ldw	r2,-1528(fp)
   2ab9c:	10800117 	ldw	r2,4(r2)
   2aba0:	e0be9015 	stw	r2,-1472(fp)
   2aba4:	e03e9115 	stw	zero,-1468(fp)
   2aba8:	e0be8317 	ldw	r2,-1524(fp)
   2abac:	10800117 	ldw	r2,4(r2)
   2abb0:	e0be9215 	stw	r2,-1464(fp)
   2abb4:	e03e9315 	stw	zero,-1460(fp)
   2abb8:	e1be9217 	ldw	r6,-1464(fp)
   2abbc:	e1fe9317 	ldw	r7,-1460(fp)
   2abc0:	e13e9017 	ldw	r4,-1472(fp)
   2abc4:	e17e9117 	ldw	r5,-1468(fp)
   2abc8:	00429400 	call	42940 <__muldi3>
   2abcc:	1009883a 	mov	r4,r2
   2abd0:	180b883a 	mov	r5,r3
   2abd4:	e13d9115 	stw	r4,-2492(fp)
   2abd8:	e17d9215 	stw	r5,-2488(fp)
   2abdc:	e0bd9217 	ldw	r2,-2488(fp)
   2abe0:	1004d83a 	srl	r2,r2,zero
   2abe4:	e0be9415 	stw	r2,-1456(fp)
   2abe8:	e03e9515 	stw	zero,-1452(fp)
   2abec:	e0be9417 	ldw	r2,-1456(fp)
   2abf0:	e0bd9315 	stw	r2,-2484(fp)
   2abf4:	e0bd9117 	ldw	r2,-2492(fp)
   2abf8:	e0bd9415 	stw	r2,-2480(fp)
   2abfc:	e0fd7e17 	ldw	r3,-2568(fp)
   2ac00:	e0bd9417 	ldw	r2,-2480(fp)
   2ac04:	1885883a 	add	r2,r3,r2
   2ac08:	e0bd7e15 	stw	r2,-2568(fp)
   2ac0c:	e0fd7e17 	ldw	r3,-2568(fp)
   2ac10:	e0bd9417 	ldw	r2,-2480(fp)
   2ac14:	1880022e 	bgeu	r3,r2,2ac20 <secp256k1_scalar_mul_512+0x59c>
   2ac18:	00c00044 	movi	r3,1
   2ac1c:	00000106 	br	2ac24 <secp256k1_scalar_mul_512+0x5a0>
   2ac20:	0007883a 	mov	r3,zero
   2ac24:	e0bd9317 	ldw	r2,-2484(fp)
   2ac28:	10c5883a 	add	r2,r2,r3
   2ac2c:	e0bd9315 	stw	r2,-2484(fp)
   2ac30:	e0fd7f17 	ldw	r3,-2564(fp)
   2ac34:	e0bd9317 	ldw	r2,-2484(fp)
   2ac38:	1885883a 	add	r2,r3,r2
   2ac3c:	e0bd7f15 	stw	r2,-2564(fp)
   2ac40:	e0fd7f17 	ldw	r3,-2564(fp)
   2ac44:	e0bd9317 	ldw	r2,-2484(fp)
   2ac48:	1880022e 	bgeu	r3,r2,2ac54 <secp256k1_scalar_mul_512+0x5d0>
   2ac4c:	00c00044 	movi	r3,1
   2ac50:	00000106 	br	2ac58 <secp256k1_scalar_mul_512+0x5d4>
   2ac54:	0007883a 	mov	r3,zero
   2ac58:	e0bd8017 	ldw	r2,-2560(fp)
   2ac5c:	10c5883a 	add	r2,r2,r3
   2ac60:	e0bd8015 	stw	r2,-2560(fp)
   2ac64:	e0fd7f17 	ldw	r3,-2564(fp)
   2ac68:	e0bd9317 	ldw	r2,-2484(fp)
   2ac6c:	1885803a 	cmpltu	r2,r3,r2
   2ac70:	10803fcc 	andi	r2,r2,255
   2ac74:	10001126 	beq	r2,zero,2acbc <secp256k1_scalar_mul_512+0x638>
   2ac78:	e0bd8017 	ldw	r2,-2560(fp)
   2ac7c:	1005003a 	cmpeq	r2,r2,zero
   2ac80:	10803fcc 	andi	r2,r2,255
   2ac84:	10000d26 	beq	r2,zero,2acbc <secp256k1_scalar_mul_512+0x638>
   2ac88:	d0a01617 	ldw	r2,-32680(gp)
   2ac8c:	10c00317 	ldw	r3,12(r2)
   2ac90:	008001b4 	movhi	r2,6
   2ac94:	10b02604 	addi	r2,r2,-16232
   2ac98:	d8800015 	stw	r2,0(sp)
   2ac9c:	01c07d84 	movi	r7,502
   2aca0:	018001b4 	movhi	r6,6
   2aca4:	31af9204 	addi	r6,r6,-16824
   2aca8:	014001b4 	movhi	r5,6
   2acac:	296b3804 	addi	r5,r5,-21280
   2acb0:	1809883a 	mov	r4,r3
   2acb4:	00452600 	call	45260 <fprintf>
   2acb8:	00450340 	call	45034 <abort>
    muladd(a->d[2], b->d[0]);
   2acbc:	e0be8217 	ldw	r2,-1528(fp)
   2acc0:	10800217 	ldw	r2,8(r2)
   2acc4:	e0be9615 	stw	r2,-1448(fp)
   2acc8:	e03e9715 	stw	zero,-1444(fp)
   2accc:	e0be8317 	ldw	r2,-1524(fp)
   2acd0:	10800017 	ldw	r2,0(r2)
   2acd4:	e0be9815 	stw	r2,-1440(fp)
   2acd8:	e03e9915 	stw	zero,-1436(fp)
   2acdc:	e1be9817 	ldw	r6,-1440(fp)
   2ace0:	e1fe9917 	ldw	r7,-1436(fp)
   2ace4:	e13e9617 	ldw	r4,-1448(fp)
   2ace8:	e17e9717 	ldw	r5,-1444(fp)
   2acec:	00429400 	call	42940 <__muldi3>
   2acf0:	1009883a 	mov	r4,r2
   2acf4:	180b883a 	mov	r5,r3
   2acf8:	e13d9515 	stw	r4,-2476(fp)
   2acfc:	e17d9615 	stw	r5,-2472(fp)
   2ad00:	e0bd9617 	ldw	r2,-2472(fp)
   2ad04:	1004d83a 	srl	r2,r2,zero
   2ad08:	e0be9a15 	stw	r2,-1432(fp)
   2ad0c:	e03e9b15 	stw	zero,-1428(fp)
   2ad10:	e0be9a17 	ldw	r2,-1432(fp)
   2ad14:	e0bd9715 	stw	r2,-2468(fp)
   2ad18:	e0bd9517 	ldw	r2,-2476(fp)
   2ad1c:	e0bd9815 	stw	r2,-2464(fp)
   2ad20:	e0fd7e17 	ldw	r3,-2568(fp)
   2ad24:	e0bd9817 	ldw	r2,-2464(fp)
   2ad28:	1885883a 	add	r2,r3,r2
   2ad2c:	e0bd7e15 	stw	r2,-2568(fp)
   2ad30:	e0fd7e17 	ldw	r3,-2568(fp)
   2ad34:	e0bd9817 	ldw	r2,-2464(fp)
   2ad38:	1880022e 	bgeu	r3,r2,2ad44 <secp256k1_scalar_mul_512+0x6c0>
   2ad3c:	00c00044 	movi	r3,1
   2ad40:	00000106 	br	2ad48 <secp256k1_scalar_mul_512+0x6c4>
   2ad44:	0007883a 	mov	r3,zero
   2ad48:	e0bd9717 	ldw	r2,-2468(fp)
   2ad4c:	10c5883a 	add	r2,r2,r3
   2ad50:	e0bd9715 	stw	r2,-2468(fp)
   2ad54:	e0fd7f17 	ldw	r3,-2564(fp)
   2ad58:	e0bd9717 	ldw	r2,-2468(fp)
   2ad5c:	1885883a 	add	r2,r3,r2
   2ad60:	e0bd7f15 	stw	r2,-2564(fp)
   2ad64:	e0fd7f17 	ldw	r3,-2564(fp)
   2ad68:	e0bd9717 	ldw	r2,-2468(fp)
   2ad6c:	1880022e 	bgeu	r3,r2,2ad78 <secp256k1_scalar_mul_512+0x6f4>
   2ad70:	00c00044 	movi	r3,1
   2ad74:	00000106 	br	2ad7c <secp256k1_scalar_mul_512+0x6f8>
   2ad78:	0007883a 	mov	r3,zero
   2ad7c:	e0bd8017 	ldw	r2,-2560(fp)
   2ad80:	10c5883a 	add	r2,r2,r3
   2ad84:	e0bd8015 	stw	r2,-2560(fp)
   2ad88:	e0fd7f17 	ldw	r3,-2564(fp)
   2ad8c:	e0bd9717 	ldw	r2,-2468(fp)
   2ad90:	1885803a 	cmpltu	r2,r3,r2
   2ad94:	10803fcc 	andi	r2,r2,255
   2ad98:	10001126 	beq	r2,zero,2ade0 <secp256k1_scalar_mul_512+0x75c>
   2ad9c:	e0bd8017 	ldw	r2,-2560(fp)
   2ada0:	1005003a 	cmpeq	r2,r2,zero
   2ada4:	10803fcc 	andi	r2,r2,255
   2ada8:	10000d26 	beq	r2,zero,2ade0 <secp256k1_scalar_mul_512+0x75c>
   2adac:	d0a01617 	ldw	r2,-32680(gp)
   2adb0:	10c00317 	ldw	r3,12(r2)
   2adb4:	008001b4 	movhi	r2,6
   2adb8:	10b02604 	addi	r2,r2,-16232
   2adbc:	d8800015 	stw	r2,0(sp)
   2adc0:	01c07dc4 	movi	r7,503
   2adc4:	018001b4 	movhi	r6,6
   2adc8:	31af9204 	addi	r6,r6,-16824
   2adcc:	014001b4 	movhi	r5,6
   2add0:	296b3804 	addi	r5,r5,-21280
   2add4:	1809883a 	mov	r4,r3
   2add8:	00452600 	call	45260 <fprintf>
   2addc:	00450340 	call	45034 <abort>
    extract(l[2]);
   2ade0:	e0be8117 	ldw	r2,-1532(fp)
   2ade4:	10c00204 	addi	r3,r2,8
   2ade8:	e0bd7e17 	ldw	r2,-2568(fp)
   2adec:	18800015 	stw	r2,0(r3)
   2adf0:	e0bd7f17 	ldw	r2,-2564(fp)
   2adf4:	e0bd7e15 	stw	r2,-2568(fp)
   2adf8:	e0bd8017 	ldw	r2,-2560(fp)
   2adfc:	e0bd7f15 	stw	r2,-2564(fp)
   2ae00:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[3]);
   2ae04:	e0be8217 	ldw	r2,-1528(fp)
   2ae08:	10800017 	ldw	r2,0(r2)
   2ae0c:	e0be9c15 	stw	r2,-1424(fp)
   2ae10:	e03e9d15 	stw	zero,-1420(fp)
   2ae14:	e0be8317 	ldw	r2,-1524(fp)
   2ae18:	10800317 	ldw	r2,12(r2)
   2ae1c:	e0be9e15 	stw	r2,-1416(fp)
   2ae20:	e03e9f15 	stw	zero,-1412(fp)
   2ae24:	e1be9e17 	ldw	r6,-1416(fp)
   2ae28:	e1fe9f17 	ldw	r7,-1412(fp)
   2ae2c:	e13e9c17 	ldw	r4,-1424(fp)
   2ae30:	e17e9d17 	ldw	r5,-1420(fp)
   2ae34:	00429400 	call	42940 <__muldi3>
   2ae38:	1009883a 	mov	r4,r2
   2ae3c:	180b883a 	mov	r5,r3
   2ae40:	e13d9915 	stw	r4,-2460(fp)
   2ae44:	e17d9a15 	stw	r5,-2456(fp)
   2ae48:	e0bd9a17 	ldw	r2,-2456(fp)
   2ae4c:	1004d83a 	srl	r2,r2,zero
   2ae50:	e0bea015 	stw	r2,-1408(fp)
   2ae54:	e03ea115 	stw	zero,-1404(fp)
   2ae58:	e0bea017 	ldw	r2,-1408(fp)
   2ae5c:	e0bd9b15 	stw	r2,-2452(fp)
   2ae60:	e0bd9917 	ldw	r2,-2460(fp)
   2ae64:	e0bd9c15 	stw	r2,-2448(fp)
   2ae68:	e0fd7e17 	ldw	r3,-2568(fp)
   2ae6c:	e0bd9c17 	ldw	r2,-2448(fp)
   2ae70:	1885883a 	add	r2,r3,r2
   2ae74:	e0bd7e15 	stw	r2,-2568(fp)
   2ae78:	e0fd7e17 	ldw	r3,-2568(fp)
   2ae7c:	e0bd9c17 	ldw	r2,-2448(fp)
   2ae80:	1880022e 	bgeu	r3,r2,2ae8c <secp256k1_scalar_mul_512+0x808>
   2ae84:	00c00044 	movi	r3,1
   2ae88:	00000106 	br	2ae90 <secp256k1_scalar_mul_512+0x80c>
   2ae8c:	0007883a 	mov	r3,zero
   2ae90:	e0bd9b17 	ldw	r2,-2452(fp)
   2ae94:	10c5883a 	add	r2,r2,r3
   2ae98:	e0bd9b15 	stw	r2,-2452(fp)
   2ae9c:	e0fd7f17 	ldw	r3,-2564(fp)
   2aea0:	e0bd9b17 	ldw	r2,-2452(fp)
   2aea4:	1885883a 	add	r2,r3,r2
   2aea8:	e0bd7f15 	stw	r2,-2564(fp)
   2aeac:	e0fd7f17 	ldw	r3,-2564(fp)
   2aeb0:	e0bd9b17 	ldw	r2,-2452(fp)
   2aeb4:	1880022e 	bgeu	r3,r2,2aec0 <secp256k1_scalar_mul_512+0x83c>
   2aeb8:	00c00044 	movi	r3,1
   2aebc:	00000106 	br	2aec4 <secp256k1_scalar_mul_512+0x840>
   2aec0:	0007883a 	mov	r3,zero
   2aec4:	e0bd8017 	ldw	r2,-2560(fp)
   2aec8:	10c5883a 	add	r2,r2,r3
   2aecc:	e0bd8015 	stw	r2,-2560(fp)
   2aed0:	e0fd7f17 	ldw	r3,-2564(fp)
   2aed4:	e0bd9b17 	ldw	r2,-2452(fp)
   2aed8:	1885803a 	cmpltu	r2,r3,r2
   2aedc:	10803fcc 	andi	r2,r2,255
   2aee0:	10001126 	beq	r2,zero,2af28 <secp256k1_scalar_mul_512+0x8a4>
   2aee4:	e0bd8017 	ldw	r2,-2560(fp)
   2aee8:	1005003a 	cmpeq	r2,r2,zero
   2aeec:	10803fcc 	andi	r2,r2,255
   2aef0:	10000d26 	beq	r2,zero,2af28 <secp256k1_scalar_mul_512+0x8a4>
   2aef4:	d0a01617 	ldw	r2,-32680(gp)
   2aef8:	10c00317 	ldw	r3,12(r2)
   2aefc:	008001b4 	movhi	r2,6
   2af00:	10b02604 	addi	r2,r2,-16232
   2af04:	d8800015 	stw	r2,0(sp)
   2af08:	01c07e44 	movi	r7,505
   2af0c:	018001b4 	movhi	r6,6
   2af10:	31af9204 	addi	r6,r6,-16824
   2af14:	014001b4 	movhi	r5,6
   2af18:	296b3804 	addi	r5,r5,-21280
   2af1c:	1809883a 	mov	r4,r3
   2af20:	00452600 	call	45260 <fprintf>
   2af24:	00450340 	call	45034 <abort>
    muladd(a->d[1], b->d[2]);
   2af28:	e0be8217 	ldw	r2,-1528(fp)
   2af2c:	10800117 	ldw	r2,4(r2)
   2af30:	e0bea215 	stw	r2,-1400(fp)
   2af34:	e03ea315 	stw	zero,-1396(fp)
   2af38:	e0be8317 	ldw	r2,-1524(fp)
   2af3c:	10800217 	ldw	r2,8(r2)
   2af40:	e0bea415 	stw	r2,-1392(fp)
   2af44:	e03ea515 	stw	zero,-1388(fp)
   2af48:	e1bea417 	ldw	r6,-1392(fp)
   2af4c:	e1fea517 	ldw	r7,-1388(fp)
   2af50:	e13ea217 	ldw	r4,-1400(fp)
   2af54:	e17ea317 	ldw	r5,-1396(fp)
   2af58:	00429400 	call	42940 <__muldi3>
   2af5c:	1009883a 	mov	r4,r2
   2af60:	180b883a 	mov	r5,r3
   2af64:	e13d9d15 	stw	r4,-2444(fp)
   2af68:	e17d9e15 	stw	r5,-2440(fp)
   2af6c:	e0bd9e17 	ldw	r2,-2440(fp)
   2af70:	1004d83a 	srl	r2,r2,zero
   2af74:	e0bea615 	stw	r2,-1384(fp)
   2af78:	e03ea715 	stw	zero,-1380(fp)
   2af7c:	e0bea617 	ldw	r2,-1384(fp)
   2af80:	e0bd9f15 	stw	r2,-2436(fp)
   2af84:	e0bd9d17 	ldw	r2,-2444(fp)
   2af88:	e0bda015 	stw	r2,-2432(fp)
   2af8c:	e0fd7e17 	ldw	r3,-2568(fp)
   2af90:	e0bda017 	ldw	r2,-2432(fp)
   2af94:	1885883a 	add	r2,r3,r2
   2af98:	e0bd7e15 	stw	r2,-2568(fp)
   2af9c:	e0fd7e17 	ldw	r3,-2568(fp)
   2afa0:	e0bda017 	ldw	r2,-2432(fp)
   2afa4:	1880022e 	bgeu	r3,r2,2afb0 <secp256k1_scalar_mul_512+0x92c>
   2afa8:	00c00044 	movi	r3,1
   2afac:	00000106 	br	2afb4 <secp256k1_scalar_mul_512+0x930>
   2afb0:	0007883a 	mov	r3,zero
   2afb4:	e0bd9f17 	ldw	r2,-2436(fp)
   2afb8:	10c5883a 	add	r2,r2,r3
   2afbc:	e0bd9f15 	stw	r2,-2436(fp)
   2afc0:	e0fd7f17 	ldw	r3,-2564(fp)
   2afc4:	e0bd9f17 	ldw	r2,-2436(fp)
   2afc8:	1885883a 	add	r2,r3,r2
   2afcc:	e0bd7f15 	stw	r2,-2564(fp)
   2afd0:	e0fd7f17 	ldw	r3,-2564(fp)
   2afd4:	e0bd9f17 	ldw	r2,-2436(fp)
   2afd8:	1880022e 	bgeu	r3,r2,2afe4 <secp256k1_scalar_mul_512+0x960>
   2afdc:	00c00044 	movi	r3,1
   2afe0:	00000106 	br	2afe8 <secp256k1_scalar_mul_512+0x964>
   2afe4:	0007883a 	mov	r3,zero
   2afe8:	e0bd8017 	ldw	r2,-2560(fp)
   2afec:	10c5883a 	add	r2,r2,r3
   2aff0:	e0bd8015 	stw	r2,-2560(fp)
   2aff4:	e0fd7f17 	ldw	r3,-2564(fp)
   2aff8:	e0bd9f17 	ldw	r2,-2436(fp)
   2affc:	1885803a 	cmpltu	r2,r3,r2
   2b000:	10803fcc 	andi	r2,r2,255
   2b004:	10001126 	beq	r2,zero,2b04c <secp256k1_scalar_mul_512+0x9c8>
   2b008:	e0bd8017 	ldw	r2,-2560(fp)
   2b00c:	1005003a 	cmpeq	r2,r2,zero
   2b010:	10803fcc 	andi	r2,r2,255
   2b014:	10000d26 	beq	r2,zero,2b04c <secp256k1_scalar_mul_512+0x9c8>
   2b018:	d0a01617 	ldw	r2,-32680(gp)
   2b01c:	10c00317 	ldw	r3,12(r2)
   2b020:	008001b4 	movhi	r2,6
   2b024:	10b02604 	addi	r2,r2,-16232
   2b028:	d8800015 	stw	r2,0(sp)
   2b02c:	01c07e84 	movi	r7,506
   2b030:	018001b4 	movhi	r6,6
   2b034:	31af9204 	addi	r6,r6,-16824
   2b038:	014001b4 	movhi	r5,6
   2b03c:	296b3804 	addi	r5,r5,-21280
   2b040:	1809883a 	mov	r4,r3
   2b044:	00452600 	call	45260 <fprintf>
   2b048:	00450340 	call	45034 <abort>
    muladd(a->d[2], b->d[1]);
   2b04c:	e0be8217 	ldw	r2,-1528(fp)
   2b050:	10800217 	ldw	r2,8(r2)
   2b054:	e0bea815 	stw	r2,-1376(fp)
   2b058:	e03ea915 	stw	zero,-1372(fp)
   2b05c:	e0be8317 	ldw	r2,-1524(fp)
   2b060:	10800117 	ldw	r2,4(r2)
   2b064:	e0beaa15 	stw	r2,-1368(fp)
   2b068:	e03eab15 	stw	zero,-1364(fp)
   2b06c:	e1beaa17 	ldw	r6,-1368(fp)
   2b070:	e1feab17 	ldw	r7,-1364(fp)
   2b074:	e13ea817 	ldw	r4,-1376(fp)
   2b078:	e17ea917 	ldw	r5,-1372(fp)
   2b07c:	00429400 	call	42940 <__muldi3>
   2b080:	1009883a 	mov	r4,r2
   2b084:	180b883a 	mov	r5,r3
   2b088:	e13da115 	stw	r4,-2428(fp)
   2b08c:	e17da215 	stw	r5,-2424(fp)
   2b090:	e0bda217 	ldw	r2,-2424(fp)
   2b094:	1004d83a 	srl	r2,r2,zero
   2b098:	e0beac15 	stw	r2,-1360(fp)
   2b09c:	e03ead15 	stw	zero,-1356(fp)
   2b0a0:	e0beac17 	ldw	r2,-1360(fp)
   2b0a4:	e0bda315 	stw	r2,-2420(fp)
   2b0a8:	e0bda117 	ldw	r2,-2428(fp)
   2b0ac:	e0bda415 	stw	r2,-2416(fp)
   2b0b0:	e0fd7e17 	ldw	r3,-2568(fp)
   2b0b4:	e0bda417 	ldw	r2,-2416(fp)
   2b0b8:	1885883a 	add	r2,r3,r2
   2b0bc:	e0bd7e15 	stw	r2,-2568(fp)
   2b0c0:	e0fd7e17 	ldw	r3,-2568(fp)
   2b0c4:	e0bda417 	ldw	r2,-2416(fp)
   2b0c8:	1880022e 	bgeu	r3,r2,2b0d4 <secp256k1_scalar_mul_512+0xa50>
   2b0cc:	00c00044 	movi	r3,1
   2b0d0:	00000106 	br	2b0d8 <secp256k1_scalar_mul_512+0xa54>
   2b0d4:	0007883a 	mov	r3,zero
   2b0d8:	e0bda317 	ldw	r2,-2420(fp)
   2b0dc:	10c5883a 	add	r2,r2,r3
   2b0e0:	e0bda315 	stw	r2,-2420(fp)
   2b0e4:	e0fd7f17 	ldw	r3,-2564(fp)
   2b0e8:	e0bda317 	ldw	r2,-2420(fp)
   2b0ec:	1885883a 	add	r2,r3,r2
   2b0f0:	e0bd7f15 	stw	r2,-2564(fp)
   2b0f4:	e0fd7f17 	ldw	r3,-2564(fp)
   2b0f8:	e0bda317 	ldw	r2,-2420(fp)
   2b0fc:	1880022e 	bgeu	r3,r2,2b108 <secp256k1_scalar_mul_512+0xa84>
   2b100:	00c00044 	movi	r3,1
   2b104:	00000106 	br	2b10c <secp256k1_scalar_mul_512+0xa88>
   2b108:	0007883a 	mov	r3,zero
   2b10c:	e0bd8017 	ldw	r2,-2560(fp)
   2b110:	10c5883a 	add	r2,r2,r3
   2b114:	e0bd8015 	stw	r2,-2560(fp)
   2b118:	e0fd7f17 	ldw	r3,-2564(fp)
   2b11c:	e0bda317 	ldw	r2,-2420(fp)
   2b120:	1885803a 	cmpltu	r2,r3,r2
   2b124:	10803fcc 	andi	r2,r2,255
   2b128:	10001126 	beq	r2,zero,2b170 <secp256k1_scalar_mul_512+0xaec>
   2b12c:	e0bd8017 	ldw	r2,-2560(fp)
   2b130:	1005003a 	cmpeq	r2,r2,zero
   2b134:	10803fcc 	andi	r2,r2,255
   2b138:	10000d26 	beq	r2,zero,2b170 <secp256k1_scalar_mul_512+0xaec>
   2b13c:	d0a01617 	ldw	r2,-32680(gp)
   2b140:	10c00317 	ldw	r3,12(r2)
   2b144:	008001b4 	movhi	r2,6
   2b148:	10b02604 	addi	r2,r2,-16232
   2b14c:	d8800015 	stw	r2,0(sp)
   2b150:	01c07ec4 	movi	r7,507
   2b154:	018001b4 	movhi	r6,6
   2b158:	31af9204 	addi	r6,r6,-16824
   2b15c:	014001b4 	movhi	r5,6
   2b160:	296b3804 	addi	r5,r5,-21280
   2b164:	1809883a 	mov	r4,r3
   2b168:	00452600 	call	45260 <fprintf>
   2b16c:	00450340 	call	45034 <abort>
    muladd(a->d[3], b->d[0]);
   2b170:	e0be8217 	ldw	r2,-1528(fp)
   2b174:	10800317 	ldw	r2,12(r2)
   2b178:	e0beae15 	stw	r2,-1352(fp)
   2b17c:	e03eaf15 	stw	zero,-1348(fp)
   2b180:	e0be8317 	ldw	r2,-1524(fp)
   2b184:	10800017 	ldw	r2,0(r2)
   2b188:	e0beb015 	stw	r2,-1344(fp)
   2b18c:	e03eb115 	stw	zero,-1340(fp)
   2b190:	e1beb017 	ldw	r6,-1344(fp)
   2b194:	e1feb117 	ldw	r7,-1340(fp)
   2b198:	e13eae17 	ldw	r4,-1352(fp)
   2b19c:	e17eaf17 	ldw	r5,-1348(fp)
   2b1a0:	00429400 	call	42940 <__muldi3>
   2b1a4:	1009883a 	mov	r4,r2
   2b1a8:	180b883a 	mov	r5,r3
   2b1ac:	e13da515 	stw	r4,-2412(fp)
   2b1b0:	e17da615 	stw	r5,-2408(fp)
   2b1b4:	e0bda617 	ldw	r2,-2408(fp)
   2b1b8:	1004d83a 	srl	r2,r2,zero
   2b1bc:	e0beb215 	stw	r2,-1336(fp)
   2b1c0:	e03eb315 	stw	zero,-1332(fp)
   2b1c4:	e0beb217 	ldw	r2,-1336(fp)
   2b1c8:	e0bda715 	stw	r2,-2404(fp)
   2b1cc:	e0bda517 	ldw	r2,-2412(fp)
   2b1d0:	e0bda815 	stw	r2,-2400(fp)
   2b1d4:	e0fd7e17 	ldw	r3,-2568(fp)
   2b1d8:	e0bda817 	ldw	r2,-2400(fp)
   2b1dc:	1885883a 	add	r2,r3,r2
   2b1e0:	e0bd7e15 	stw	r2,-2568(fp)
   2b1e4:	e0fd7e17 	ldw	r3,-2568(fp)
   2b1e8:	e0bda817 	ldw	r2,-2400(fp)
   2b1ec:	1880022e 	bgeu	r3,r2,2b1f8 <secp256k1_scalar_mul_512+0xb74>
   2b1f0:	00c00044 	movi	r3,1
   2b1f4:	00000106 	br	2b1fc <secp256k1_scalar_mul_512+0xb78>
   2b1f8:	0007883a 	mov	r3,zero
   2b1fc:	e0bda717 	ldw	r2,-2404(fp)
   2b200:	10c5883a 	add	r2,r2,r3
   2b204:	e0bda715 	stw	r2,-2404(fp)
   2b208:	e0fd7f17 	ldw	r3,-2564(fp)
   2b20c:	e0bda717 	ldw	r2,-2404(fp)
   2b210:	1885883a 	add	r2,r3,r2
   2b214:	e0bd7f15 	stw	r2,-2564(fp)
   2b218:	e0fd7f17 	ldw	r3,-2564(fp)
   2b21c:	e0bda717 	ldw	r2,-2404(fp)
   2b220:	1880022e 	bgeu	r3,r2,2b22c <secp256k1_scalar_mul_512+0xba8>
   2b224:	00c00044 	movi	r3,1
   2b228:	00000106 	br	2b230 <secp256k1_scalar_mul_512+0xbac>
   2b22c:	0007883a 	mov	r3,zero
   2b230:	e0bd8017 	ldw	r2,-2560(fp)
   2b234:	10c5883a 	add	r2,r2,r3
   2b238:	e0bd8015 	stw	r2,-2560(fp)
   2b23c:	e0fd7f17 	ldw	r3,-2564(fp)
   2b240:	e0bda717 	ldw	r2,-2404(fp)
   2b244:	1885803a 	cmpltu	r2,r3,r2
   2b248:	10803fcc 	andi	r2,r2,255
   2b24c:	10001126 	beq	r2,zero,2b294 <secp256k1_scalar_mul_512+0xc10>
   2b250:	e0bd8017 	ldw	r2,-2560(fp)
   2b254:	1005003a 	cmpeq	r2,r2,zero
   2b258:	10803fcc 	andi	r2,r2,255
   2b25c:	10000d26 	beq	r2,zero,2b294 <secp256k1_scalar_mul_512+0xc10>
   2b260:	d0a01617 	ldw	r2,-32680(gp)
   2b264:	10c00317 	ldw	r3,12(r2)
   2b268:	008001b4 	movhi	r2,6
   2b26c:	10b02604 	addi	r2,r2,-16232
   2b270:	d8800015 	stw	r2,0(sp)
   2b274:	01c07f04 	movi	r7,508
   2b278:	018001b4 	movhi	r6,6
   2b27c:	31af9204 	addi	r6,r6,-16824
   2b280:	014001b4 	movhi	r5,6
   2b284:	296b3804 	addi	r5,r5,-21280
   2b288:	1809883a 	mov	r4,r3
   2b28c:	00452600 	call	45260 <fprintf>
   2b290:	00450340 	call	45034 <abort>
    extract(l[3]);
   2b294:	e0be8117 	ldw	r2,-1532(fp)
   2b298:	10c00304 	addi	r3,r2,12
   2b29c:	e0bd7e17 	ldw	r2,-2568(fp)
   2b2a0:	18800015 	stw	r2,0(r3)
   2b2a4:	e0bd7f17 	ldw	r2,-2564(fp)
   2b2a8:	e0bd7e15 	stw	r2,-2568(fp)
   2b2ac:	e0bd8017 	ldw	r2,-2560(fp)
   2b2b0:	e0bd7f15 	stw	r2,-2564(fp)
   2b2b4:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[4]);
   2b2b8:	e0be8217 	ldw	r2,-1528(fp)
   2b2bc:	10800017 	ldw	r2,0(r2)
   2b2c0:	e0beb415 	stw	r2,-1328(fp)
   2b2c4:	e03eb515 	stw	zero,-1324(fp)
   2b2c8:	e0be8317 	ldw	r2,-1524(fp)
   2b2cc:	10800417 	ldw	r2,16(r2)
   2b2d0:	e0beb615 	stw	r2,-1320(fp)
   2b2d4:	e03eb715 	stw	zero,-1316(fp)
   2b2d8:	e1beb617 	ldw	r6,-1320(fp)
   2b2dc:	e1feb717 	ldw	r7,-1316(fp)
   2b2e0:	e13eb417 	ldw	r4,-1328(fp)
   2b2e4:	e17eb517 	ldw	r5,-1324(fp)
   2b2e8:	00429400 	call	42940 <__muldi3>
   2b2ec:	1009883a 	mov	r4,r2
   2b2f0:	180b883a 	mov	r5,r3
   2b2f4:	e13da915 	stw	r4,-2396(fp)
   2b2f8:	e17daa15 	stw	r5,-2392(fp)
   2b2fc:	e0bdaa17 	ldw	r2,-2392(fp)
   2b300:	1004d83a 	srl	r2,r2,zero
   2b304:	e0beb815 	stw	r2,-1312(fp)
   2b308:	e03eb915 	stw	zero,-1308(fp)
   2b30c:	e0beb817 	ldw	r2,-1312(fp)
   2b310:	e0bdab15 	stw	r2,-2388(fp)
   2b314:	e0bda917 	ldw	r2,-2396(fp)
   2b318:	e0bdac15 	stw	r2,-2384(fp)
   2b31c:	e0fd7e17 	ldw	r3,-2568(fp)
   2b320:	e0bdac17 	ldw	r2,-2384(fp)
   2b324:	1885883a 	add	r2,r3,r2
   2b328:	e0bd7e15 	stw	r2,-2568(fp)
   2b32c:	e0fd7e17 	ldw	r3,-2568(fp)
   2b330:	e0bdac17 	ldw	r2,-2384(fp)
   2b334:	1880022e 	bgeu	r3,r2,2b340 <secp256k1_scalar_mul_512+0xcbc>
   2b338:	00c00044 	movi	r3,1
   2b33c:	00000106 	br	2b344 <secp256k1_scalar_mul_512+0xcc0>
   2b340:	0007883a 	mov	r3,zero
   2b344:	e0bdab17 	ldw	r2,-2388(fp)
   2b348:	10c5883a 	add	r2,r2,r3
   2b34c:	e0bdab15 	stw	r2,-2388(fp)
   2b350:	e0fd7f17 	ldw	r3,-2564(fp)
   2b354:	e0bdab17 	ldw	r2,-2388(fp)
   2b358:	1885883a 	add	r2,r3,r2
   2b35c:	e0bd7f15 	stw	r2,-2564(fp)
   2b360:	e0fd7f17 	ldw	r3,-2564(fp)
   2b364:	e0bdab17 	ldw	r2,-2388(fp)
   2b368:	1880022e 	bgeu	r3,r2,2b374 <secp256k1_scalar_mul_512+0xcf0>
   2b36c:	00c00044 	movi	r3,1
   2b370:	00000106 	br	2b378 <secp256k1_scalar_mul_512+0xcf4>
   2b374:	0007883a 	mov	r3,zero
   2b378:	e0bd8017 	ldw	r2,-2560(fp)
   2b37c:	10c5883a 	add	r2,r2,r3
   2b380:	e0bd8015 	stw	r2,-2560(fp)
   2b384:	e0fd7f17 	ldw	r3,-2564(fp)
   2b388:	e0bdab17 	ldw	r2,-2388(fp)
   2b38c:	1885803a 	cmpltu	r2,r3,r2
   2b390:	10803fcc 	andi	r2,r2,255
   2b394:	10001126 	beq	r2,zero,2b3dc <secp256k1_scalar_mul_512+0xd58>
   2b398:	e0bd8017 	ldw	r2,-2560(fp)
   2b39c:	1005003a 	cmpeq	r2,r2,zero
   2b3a0:	10803fcc 	andi	r2,r2,255
   2b3a4:	10000d26 	beq	r2,zero,2b3dc <secp256k1_scalar_mul_512+0xd58>
   2b3a8:	d0a01617 	ldw	r2,-32680(gp)
   2b3ac:	10c00317 	ldw	r3,12(r2)
   2b3b0:	008001b4 	movhi	r2,6
   2b3b4:	10b02604 	addi	r2,r2,-16232
   2b3b8:	d8800015 	stw	r2,0(sp)
   2b3bc:	01c07f84 	movi	r7,510
   2b3c0:	018001b4 	movhi	r6,6
   2b3c4:	31af9204 	addi	r6,r6,-16824
   2b3c8:	014001b4 	movhi	r5,6
   2b3cc:	296b3804 	addi	r5,r5,-21280
   2b3d0:	1809883a 	mov	r4,r3
   2b3d4:	00452600 	call	45260 <fprintf>
   2b3d8:	00450340 	call	45034 <abort>
    muladd(a->d[1], b->d[3]);
   2b3dc:	e0be8217 	ldw	r2,-1528(fp)
   2b3e0:	10800117 	ldw	r2,4(r2)
   2b3e4:	e0beba15 	stw	r2,-1304(fp)
   2b3e8:	e03ebb15 	stw	zero,-1300(fp)
   2b3ec:	e0be8317 	ldw	r2,-1524(fp)
   2b3f0:	10800317 	ldw	r2,12(r2)
   2b3f4:	e0bebc15 	stw	r2,-1296(fp)
   2b3f8:	e03ebd15 	stw	zero,-1292(fp)
   2b3fc:	e1bebc17 	ldw	r6,-1296(fp)
   2b400:	e1febd17 	ldw	r7,-1292(fp)
   2b404:	e13eba17 	ldw	r4,-1304(fp)
   2b408:	e17ebb17 	ldw	r5,-1300(fp)
   2b40c:	00429400 	call	42940 <__muldi3>
   2b410:	1009883a 	mov	r4,r2
   2b414:	180b883a 	mov	r5,r3
   2b418:	e13dad15 	stw	r4,-2380(fp)
   2b41c:	e17dae15 	stw	r5,-2376(fp)
   2b420:	e0bdae17 	ldw	r2,-2376(fp)
   2b424:	1004d83a 	srl	r2,r2,zero
   2b428:	e0bebe15 	stw	r2,-1288(fp)
   2b42c:	e03ebf15 	stw	zero,-1284(fp)
   2b430:	e0bebe17 	ldw	r2,-1288(fp)
   2b434:	e0bdaf15 	stw	r2,-2372(fp)
   2b438:	e0bdad17 	ldw	r2,-2380(fp)
   2b43c:	e0bdb015 	stw	r2,-2368(fp)
   2b440:	e0fd7e17 	ldw	r3,-2568(fp)
   2b444:	e0bdb017 	ldw	r2,-2368(fp)
   2b448:	1885883a 	add	r2,r3,r2
   2b44c:	e0bd7e15 	stw	r2,-2568(fp)
   2b450:	e0fd7e17 	ldw	r3,-2568(fp)
   2b454:	e0bdb017 	ldw	r2,-2368(fp)
   2b458:	1880022e 	bgeu	r3,r2,2b464 <secp256k1_scalar_mul_512+0xde0>
   2b45c:	00c00044 	movi	r3,1
   2b460:	00000106 	br	2b468 <secp256k1_scalar_mul_512+0xde4>
   2b464:	0007883a 	mov	r3,zero
   2b468:	e0bdaf17 	ldw	r2,-2372(fp)
   2b46c:	10c5883a 	add	r2,r2,r3
   2b470:	e0bdaf15 	stw	r2,-2372(fp)
   2b474:	e0fd7f17 	ldw	r3,-2564(fp)
   2b478:	e0bdaf17 	ldw	r2,-2372(fp)
   2b47c:	1885883a 	add	r2,r3,r2
   2b480:	e0bd7f15 	stw	r2,-2564(fp)
   2b484:	e0fd7f17 	ldw	r3,-2564(fp)
   2b488:	e0bdaf17 	ldw	r2,-2372(fp)
   2b48c:	1880022e 	bgeu	r3,r2,2b498 <secp256k1_scalar_mul_512+0xe14>
   2b490:	00c00044 	movi	r3,1
   2b494:	00000106 	br	2b49c <secp256k1_scalar_mul_512+0xe18>
   2b498:	0007883a 	mov	r3,zero
   2b49c:	e0bd8017 	ldw	r2,-2560(fp)
   2b4a0:	10c5883a 	add	r2,r2,r3
   2b4a4:	e0bd8015 	stw	r2,-2560(fp)
   2b4a8:	e0fd7f17 	ldw	r3,-2564(fp)
   2b4ac:	e0bdaf17 	ldw	r2,-2372(fp)
   2b4b0:	1885803a 	cmpltu	r2,r3,r2
   2b4b4:	10803fcc 	andi	r2,r2,255
   2b4b8:	10001126 	beq	r2,zero,2b500 <secp256k1_scalar_mul_512+0xe7c>
   2b4bc:	e0bd8017 	ldw	r2,-2560(fp)
   2b4c0:	1005003a 	cmpeq	r2,r2,zero
   2b4c4:	10803fcc 	andi	r2,r2,255
   2b4c8:	10000d26 	beq	r2,zero,2b500 <secp256k1_scalar_mul_512+0xe7c>
   2b4cc:	d0a01617 	ldw	r2,-32680(gp)
   2b4d0:	10c00317 	ldw	r3,12(r2)
   2b4d4:	008001b4 	movhi	r2,6
   2b4d8:	10b02604 	addi	r2,r2,-16232
   2b4dc:	d8800015 	stw	r2,0(sp)
   2b4e0:	01c07fc4 	movi	r7,511
   2b4e4:	018001b4 	movhi	r6,6
   2b4e8:	31af9204 	addi	r6,r6,-16824
   2b4ec:	014001b4 	movhi	r5,6
   2b4f0:	296b3804 	addi	r5,r5,-21280
   2b4f4:	1809883a 	mov	r4,r3
   2b4f8:	00452600 	call	45260 <fprintf>
   2b4fc:	00450340 	call	45034 <abort>
    muladd(a->d[2], b->d[2]);
   2b500:	e0be8217 	ldw	r2,-1528(fp)
   2b504:	10800217 	ldw	r2,8(r2)
   2b508:	e0bec015 	stw	r2,-1280(fp)
   2b50c:	e03ec115 	stw	zero,-1276(fp)
   2b510:	e0be8317 	ldw	r2,-1524(fp)
   2b514:	10800217 	ldw	r2,8(r2)
   2b518:	e0bec215 	stw	r2,-1272(fp)
   2b51c:	e03ec315 	stw	zero,-1268(fp)
   2b520:	e1bec217 	ldw	r6,-1272(fp)
   2b524:	e1fec317 	ldw	r7,-1268(fp)
   2b528:	e13ec017 	ldw	r4,-1280(fp)
   2b52c:	e17ec117 	ldw	r5,-1276(fp)
   2b530:	00429400 	call	42940 <__muldi3>
   2b534:	1009883a 	mov	r4,r2
   2b538:	180b883a 	mov	r5,r3
   2b53c:	e13db115 	stw	r4,-2364(fp)
   2b540:	e17db215 	stw	r5,-2360(fp)
   2b544:	e0bdb217 	ldw	r2,-2360(fp)
   2b548:	1004d83a 	srl	r2,r2,zero
   2b54c:	e0bec415 	stw	r2,-1264(fp)
   2b550:	e03ec515 	stw	zero,-1260(fp)
   2b554:	e0bec417 	ldw	r2,-1264(fp)
   2b558:	e0bdb315 	stw	r2,-2356(fp)
   2b55c:	e0bdb117 	ldw	r2,-2364(fp)
   2b560:	e0bdb415 	stw	r2,-2352(fp)
   2b564:	e0fd7e17 	ldw	r3,-2568(fp)
   2b568:	e0bdb417 	ldw	r2,-2352(fp)
   2b56c:	1885883a 	add	r2,r3,r2
   2b570:	e0bd7e15 	stw	r2,-2568(fp)
   2b574:	e0fd7e17 	ldw	r3,-2568(fp)
   2b578:	e0bdb417 	ldw	r2,-2352(fp)
   2b57c:	1880022e 	bgeu	r3,r2,2b588 <secp256k1_scalar_mul_512+0xf04>
   2b580:	00c00044 	movi	r3,1
   2b584:	00000106 	br	2b58c <secp256k1_scalar_mul_512+0xf08>
   2b588:	0007883a 	mov	r3,zero
   2b58c:	e0bdb317 	ldw	r2,-2356(fp)
   2b590:	10c5883a 	add	r2,r2,r3
   2b594:	e0bdb315 	stw	r2,-2356(fp)
   2b598:	e0fd7f17 	ldw	r3,-2564(fp)
   2b59c:	e0bdb317 	ldw	r2,-2356(fp)
   2b5a0:	1885883a 	add	r2,r3,r2
   2b5a4:	e0bd7f15 	stw	r2,-2564(fp)
   2b5a8:	e0fd7f17 	ldw	r3,-2564(fp)
   2b5ac:	e0bdb317 	ldw	r2,-2356(fp)
   2b5b0:	1880022e 	bgeu	r3,r2,2b5bc <secp256k1_scalar_mul_512+0xf38>
   2b5b4:	00c00044 	movi	r3,1
   2b5b8:	00000106 	br	2b5c0 <secp256k1_scalar_mul_512+0xf3c>
   2b5bc:	0007883a 	mov	r3,zero
   2b5c0:	e0bd8017 	ldw	r2,-2560(fp)
   2b5c4:	10c5883a 	add	r2,r2,r3
   2b5c8:	e0bd8015 	stw	r2,-2560(fp)
   2b5cc:	e0fd7f17 	ldw	r3,-2564(fp)
   2b5d0:	e0bdb317 	ldw	r2,-2356(fp)
   2b5d4:	1885803a 	cmpltu	r2,r3,r2
   2b5d8:	10803fcc 	andi	r2,r2,255
   2b5dc:	10001126 	beq	r2,zero,2b624 <secp256k1_scalar_mul_512+0xfa0>
   2b5e0:	e0bd8017 	ldw	r2,-2560(fp)
   2b5e4:	1005003a 	cmpeq	r2,r2,zero
   2b5e8:	10803fcc 	andi	r2,r2,255
   2b5ec:	10000d26 	beq	r2,zero,2b624 <secp256k1_scalar_mul_512+0xfa0>
   2b5f0:	d0a01617 	ldw	r2,-32680(gp)
   2b5f4:	10c00317 	ldw	r3,12(r2)
   2b5f8:	008001b4 	movhi	r2,6
   2b5fc:	10b02604 	addi	r2,r2,-16232
   2b600:	d8800015 	stw	r2,0(sp)
   2b604:	01c08004 	movi	r7,512
   2b608:	018001b4 	movhi	r6,6
   2b60c:	31af9204 	addi	r6,r6,-16824
   2b610:	014001b4 	movhi	r5,6
   2b614:	296b3804 	addi	r5,r5,-21280
   2b618:	1809883a 	mov	r4,r3
   2b61c:	00452600 	call	45260 <fprintf>
   2b620:	00450340 	call	45034 <abort>
    muladd(a->d[3], b->d[1]);
   2b624:	e0be8217 	ldw	r2,-1528(fp)
   2b628:	10800317 	ldw	r2,12(r2)
   2b62c:	e0bec615 	stw	r2,-1256(fp)
   2b630:	e03ec715 	stw	zero,-1252(fp)
   2b634:	e0be8317 	ldw	r2,-1524(fp)
   2b638:	10800117 	ldw	r2,4(r2)
   2b63c:	e0bec815 	stw	r2,-1248(fp)
   2b640:	e03ec915 	stw	zero,-1244(fp)
   2b644:	e1bec817 	ldw	r6,-1248(fp)
   2b648:	e1fec917 	ldw	r7,-1244(fp)
   2b64c:	e13ec617 	ldw	r4,-1256(fp)
   2b650:	e17ec717 	ldw	r5,-1252(fp)
   2b654:	00429400 	call	42940 <__muldi3>
   2b658:	1009883a 	mov	r4,r2
   2b65c:	180b883a 	mov	r5,r3
   2b660:	e13db515 	stw	r4,-2348(fp)
   2b664:	e17db615 	stw	r5,-2344(fp)
   2b668:	e0bdb617 	ldw	r2,-2344(fp)
   2b66c:	1004d83a 	srl	r2,r2,zero
   2b670:	e0beca15 	stw	r2,-1240(fp)
   2b674:	e03ecb15 	stw	zero,-1236(fp)
   2b678:	e0beca17 	ldw	r2,-1240(fp)
   2b67c:	e0bdb715 	stw	r2,-2340(fp)
   2b680:	e0bdb517 	ldw	r2,-2348(fp)
   2b684:	e0bdb815 	stw	r2,-2336(fp)
   2b688:	e0fd7e17 	ldw	r3,-2568(fp)
   2b68c:	e0bdb817 	ldw	r2,-2336(fp)
   2b690:	1885883a 	add	r2,r3,r2
   2b694:	e0bd7e15 	stw	r2,-2568(fp)
   2b698:	e0fd7e17 	ldw	r3,-2568(fp)
   2b69c:	e0bdb817 	ldw	r2,-2336(fp)
   2b6a0:	1880022e 	bgeu	r3,r2,2b6ac <secp256k1_scalar_mul_512+0x1028>
   2b6a4:	00c00044 	movi	r3,1
   2b6a8:	00000106 	br	2b6b0 <secp256k1_scalar_mul_512+0x102c>
   2b6ac:	0007883a 	mov	r3,zero
   2b6b0:	e0bdb717 	ldw	r2,-2340(fp)
   2b6b4:	10c5883a 	add	r2,r2,r3
   2b6b8:	e0bdb715 	stw	r2,-2340(fp)
   2b6bc:	e0fd7f17 	ldw	r3,-2564(fp)
   2b6c0:	e0bdb717 	ldw	r2,-2340(fp)
   2b6c4:	1885883a 	add	r2,r3,r2
   2b6c8:	e0bd7f15 	stw	r2,-2564(fp)
   2b6cc:	e0fd7f17 	ldw	r3,-2564(fp)
   2b6d0:	e0bdb717 	ldw	r2,-2340(fp)
   2b6d4:	1880022e 	bgeu	r3,r2,2b6e0 <secp256k1_scalar_mul_512+0x105c>
   2b6d8:	00c00044 	movi	r3,1
   2b6dc:	00000106 	br	2b6e4 <secp256k1_scalar_mul_512+0x1060>
   2b6e0:	0007883a 	mov	r3,zero
   2b6e4:	e0bd8017 	ldw	r2,-2560(fp)
   2b6e8:	10c5883a 	add	r2,r2,r3
   2b6ec:	e0bd8015 	stw	r2,-2560(fp)
   2b6f0:	e0fd7f17 	ldw	r3,-2564(fp)
   2b6f4:	e0bdb717 	ldw	r2,-2340(fp)
   2b6f8:	1885803a 	cmpltu	r2,r3,r2
   2b6fc:	10803fcc 	andi	r2,r2,255
   2b700:	10001126 	beq	r2,zero,2b748 <secp256k1_scalar_mul_512+0x10c4>
   2b704:	e0bd8017 	ldw	r2,-2560(fp)
   2b708:	1005003a 	cmpeq	r2,r2,zero
   2b70c:	10803fcc 	andi	r2,r2,255
   2b710:	10000d26 	beq	r2,zero,2b748 <secp256k1_scalar_mul_512+0x10c4>
   2b714:	d0a01617 	ldw	r2,-32680(gp)
   2b718:	10c00317 	ldw	r3,12(r2)
   2b71c:	008001b4 	movhi	r2,6
   2b720:	10b02604 	addi	r2,r2,-16232
   2b724:	d8800015 	stw	r2,0(sp)
   2b728:	01c08044 	movi	r7,513
   2b72c:	018001b4 	movhi	r6,6
   2b730:	31af9204 	addi	r6,r6,-16824
   2b734:	014001b4 	movhi	r5,6
   2b738:	296b3804 	addi	r5,r5,-21280
   2b73c:	1809883a 	mov	r4,r3
   2b740:	00452600 	call	45260 <fprintf>
   2b744:	00450340 	call	45034 <abort>
    muladd(a->d[4], b->d[0]);
   2b748:	e0be8217 	ldw	r2,-1528(fp)
   2b74c:	10800417 	ldw	r2,16(r2)
   2b750:	e0becc15 	stw	r2,-1232(fp)
   2b754:	e03ecd15 	stw	zero,-1228(fp)
   2b758:	e0be8317 	ldw	r2,-1524(fp)
   2b75c:	10800017 	ldw	r2,0(r2)
   2b760:	e0bece15 	stw	r2,-1224(fp)
   2b764:	e03ecf15 	stw	zero,-1220(fp)
   2b768:	e1bece17 	ldw	r6,-1224(fp)
   2b76c:	e1fecf17 	ldw	r7,-1220(fp)
   2b770:	e13ecc17 	ldw	r4,-1232(fp)
   2b774:	e17ecd17 	ldw	r5,-1228(fp)
   2b778:	00429400 	call	42940 <__muldi3>
   2b77c:	1009883a 	mov	r4,r2
   2b780:	180b883a 	mov	r5,r3
   2b784:	e13db915 	stw	r4,-2332(fp)
   2b788:	e17dba15 	stw	r5,-2328(fp)
   2b78c:	e0bdba17 	ldw	r2,-2328(fp)
   2b790:	1004d83a 	srl	r2,r2,zero
   2b794:	e0bed015 	stw	r2,-1216(fp)
   2b798:	e03ed115 	stw	zero,-1212(fp)
   2b79c:	e0bed017 	ldw	r2,-1216(fp)
   2b7a0:	e0bdbb15 	stw	r2,-2324(fp)
   2b7a4:	e0bdb917 	ldw	r2,-2332(fp)
   2b7a8:	e0bdbc15 	stw	r2,-2320(fp)
   2b7ac:	e0fd7e17 	ldw	r3,-2568(fp)
   2b7b0:	e0bdbc17 	ldw	r2,-2320(fp)
   2b7b4:	1885883a 	add	r2,r3,r2
   2b7b8:	e0bd7e15 	stw	r2,-2568(fp)
   2b7bc:	e0fd7e17 	ldw	r3,-2568(fp)
   2b7c0:	e0bdbc17 	ldw	r2,-2320(fp)
   2b7c4:	1880022e 	bgeu	r3,r2,2b7d0 <secp256k1_scalar_mul_512+0x114c>
   2b7c8:	00c00044 	movi	r3,1
   2b7cc:	00000106 	br	2b7d4 <secp256k1_scalar_mul_512+0x1150>
   2b7d0:	0007883a 	mov	r3,zero
   2b7d4:	e0bdbb17 	ldw	r2,-2324(fp)
   2b7d8:	10c5883a 	add	r2,r2,r3
   2b7dc:	e0bdbb15 	stw	r2,-2324(fp)
   2b7e0:	e0fd7f17 	ldw	r3,-2564(fp)
   2b7e4:	e0bdbb17 	ldw	r2,-2324(fp)
   2b7e8:	1885883a 	add	r2,r3,r2
   2b7ec:	e0bd7f15 	stw	r2,-2564(fp)
   2b7f0:	e0fd7f17 	ldw	r3,-2564(fp)
   2b7f4:	e0bdbb17 	ldw	r2,-2324(fp)
   2b7f8:	1880022e 	bgeu	r3,r2,2b804 <secp256k1_scalar_mul_512+0x1180>
   2b7fc:	00c00044 	movi	r3,1
   2b800:	00000106 	br	2b808 <secp256k1_scalar_mul_512+0x1184>
   2b804:	0007883a 	mov	r3,zero
   2b808:	e0bd8017 	ldw	r2,-2560(fp)
   2b80c:	10c5883a 	add	r2,r2,r3
   2b810:	e0bd8015 	stw	r2,-2560(fp)
   2b814:	e0fd7f17 	ldw	r3,-2564(fp)
   2b818:	e0bdbb17 	ldw	r2,-2324(fp)
   2b81c:	1885803a 	cmpltu	r2,r3,r2
   2b820:	10803fcc 	andi	r2,r2,255
   2b824:	10001126 	beq	r2,zero,2b86c <secp256k1_scalar_mul_512+0x11e8>
   2b828:	e0bd8017 	ldw	r2,-2560(fp)
   2b82c:	1005003a 	cmpeq	r2,r2,zero
   2b830:	10803fcc 	andi	r2,r2,255
   2b834:	10000d26 	beq	r2,zero,2b86c <secp256k1_scalar_mul_512+0x11e8>
   2b838:	d0a01617 	ldw	r2,-32680(gp)
   2b83c:	10c00317 	ldw	r3,12(r2)
   2b840:	008001b4 	movhi	r2,6
   2b844:	10b02604 	addi	r2,r2,-16232
   2b848:	d8800015 	stw	r2,0(sp)
   2b84c:	01c08084 	movi	r7,514
   2b850:	018001b4 	movhi	r6,6
   2b854:	31af9204 	addi	r6,r6,-16824
   2b858:	014001b4 	movhi	r5,6
   2b85c:	296b3804 	addi	r5,r5,-21280
   2b860:	1809883a 	mov	r4,r3
   2b864:	00452600 	call	45260 <fprintf>
   2b868:	00450340 	call	45034 <abort>
    extract(l[4]);
   2b86c:	e0be8117 	ldw	r2,-1532(fp)
   2b870:	10c00404 	addi	r3,r2,16
   2b874:	e0bd7e17 	ldw	r2,-2568(fp)
   2b878:	18800015 	stw	r2,0(r3)
   2b87c:	e0bd7f17 	ldw	r2,-2564(fp)
   2b880:	e0bd7e15 	stw	r2,-2568(fp)
   2b884:	e0bd8017 	ldw	r2,-2560(fp)
   2b888:	e0bd7f15 	stw	r2,-2564(fp)
   2b88c:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[5]);
   2b890:	e0be8217 	ldw	r2,-1528(fp)
   2b894:	10800017 	ldw	r2,0(r2)
   2b898:	e0bed215 	stw	r2,-1208(fp)
   2b89c:	e03ed315 	stw	zero,-1204(fp)
   2b8a0:	e0be8317 	ldw	r2,-1524(fp)
   2b8a4:	10800517 	ldw	r2,20(r2)
   2b8a8:	e0bed415 	stw	r2,-1200(fp)
   2b8ac:	e03ed515 	stw	zero,-1196(fp)
   2b8b0:	e1bed417 	ldw	r6,-1200(fp)
   2b8b4:	e1fed517 	ldw	r7,-1196(fp)
   2b8b8:	e13ed217 	ldw	r4,-1208(fp)
   2b8bc:	e17ed317 	ldw	r5,-1204(fp)
   2b8c0:	00429400 	call	42940 <__muldi3>
   2b8c4:	1009883a 	mov	r4,r2
   2b8c8:	180b883a 	mov	r5,r3
   2b8cc:	e13dbd15 	stw	r4,-2316(fp)
   2b8d0:	e17dbe15 	stw	r5,-2312(fp)
   2b8d4:	e0bdbe17 	ldw	r2,-2312(fp)
   2b8d8:	1004d83a 	srl	r2,r2,zero
   2b8dc:	e0bed615 	stw	r2,-1192(fp)
   2b8e0:	e03ed715 	stw	zero,-1188(fp)
   2b8e4:	e0bed617 	ldw	r2,-1192(fp)
   2b8e8:	e0bdbf15 	stw	r2,-2308(fp)
   2b8ec:	e0bdbd17 	ldw	r2,-2316(fp)
   2b8f0:	e0bdc015 	stw	r2,-2304(fp)
   2b8f4:	e0fd7e17 	ldw	r3,-2568(fp)
   2b8f8:	e0bdc017 	ldw	r2,-2304(fp)
   2b8fc:	1885883a 	add	r2,r3,r2
   2b900:	e0bd7e15 	stw	r2,-2568(fp)
   2b904:	e0fd7e17 	ldw	r3,-2568(fp)
   2b908:	e0bdc017 	ldw	r2,-2304(fp)
   2b90c:	1880022e 	bgeu	r3,r2,2b918 <secp256k1_scalar_mul_512+0x1294>
   2b910:	00c00044 	movi	r3,1
   2b914:	00000106 	br	2b91c <secp256k1_scalar_mul_512+0x1298>
   2b918:	0007883a 	mov	r3,zero
   2b91c:	e0bdbf17 	ldw	r2,-2308(fp)
   2b920:	10c5883a 	add	r2,r2,r3
   2b924:	e0bdbf15 	stw	r2,-2308(fp)
   2b928:	e0fd7f17 	ldw	r3,-2564(fp)
   2b92c:	e0bdbf17 	ldw	r2,-2308(fp)
   2b930:	1885883a 	add	r2,r3,r2
   2b934:	e0bd7f15 	stw	r2,-2564(fp)
   2b938:	e0fd7f17 	ldw	r3,-2564(fp)
   2b93c:	e0bdbf17 	ldw	r2,-2308(fp)
   2b940:	1880022e 	bgeu	r3,r2,2b94c <secp256k1_scalar_mul_512+0x12c8>
   2b944:	00c00044 	movi	r3,1
   2b948:	00000106 	br	2b950 <secp256k1_scalar_mul_512+0x12cc>
   2b94c:	0007883a 	mov	r3,zero
   2b950:	e0bd8017 	ldw	r2,-2560(fp)
   2b954:	10c5883a 	add	r2,r2,r3
   2b958:	e0bd8015 	stw	r2,-2560(fp)
   2b95c:	e0fd7f17 	ldw	r3,-2564(fp)
   2b960:	e0bdbf17 	ldw	r2,-2308(fp)
   2b964:	1885803a 	cmpltu	r2,r3,r2
   2b968:	10803fcc 	andi	r2,r2,255
   2b96c:	10001126 	beq	r2,zero,2b9b4 <secp256k1_scalar_mul_512+0x1330>
   2b970:	e0bd8017 	ldw	r2,-2560(fp)
   2b974:	1005003a 	cmpeq	r2,r2,zero
   2b978:	10803fcc 	andi	r2,r2,255
   2b97c:	10000d26 	beq	r2,zero,2b9b4 <secp256k1_scalar_mul_512+0x1330>
   2b980:	d0a01617 	ldw	r2,-32680(gp)
   2b984:	10c00317 	ldw	r3,12(r2)
   2b988:	008001b4 	movhi	r2,6
   2b98c:	10b02604 	addi	r2,r2,-16232
   2b990:	d8800015 	stw	r2,0(sp)
   2b994:	01c08104 	movi	r7,516
   2b998:	018001b4 	movhi	r6,6
   2b99c:	31af9204 	addi	r6,r6,-16824
   2b9a0:	014001b4 	movhi	r5,6
   2b9a4:	296b3804 	addi	r5,r5,-21280
   2b9a8:	1809883a 	mov	r4,r3
   2b9ac:	00452600 	call	45260 <fprintf>
   2b9b0:	00450340 	call	45034 <abort>
    muladd(a->d[1], b->d[4]);
   2b9b4:	e0be8217 	ldw	r2,-1528(fp)
   2b9b8:	10800117 	ldw	r2,4(r2)
   2b9bc:	e0bed815 	stw	r2,-1184(fp)
   2b9c0:	e03ed915 	stw	zero,-1180(fp)
   2b9c4:	e0be8317 	ldw	r2,-1524(fp)
   2b9c8:	10800417 	ldw	r2,16(r2)
   2b9cc:	e0beda15 	stw	r2,-1176(fp)
   2b9d0:	e03edb15 	stw	zero,-1172(fp)
   2b9d4:	e1beda17 	ldw	r6,-1176(fp)
   2b9d8:	e1fedb17 	ldw	r7,-1172(fp)
   2b9dc:	e13ed817 	ldw	r4,-1184(fp)
   2b9e0:	e17ed917 	ldw	r5,-1180(fp)
   2b9e4:	00429400 	call	42940 <__muldi3>
   2b9e8:	1009883a 	mov	r4,r2
   2b9ec:	180b883a 	mov	r5,r3
   2b9f0:	e13dc115 	stw	r4,-2300(fp)
   2b9f4:	e17dc215 	stw	r5,-2296(fp)
   2b9f8:	e0bdc217 	ldw	r2,-2296(fp)
   2b9fc:	1004d83a 	srl	r2,r2,zero
   2ba00:	e0bedc15 	stw	r2,-1168(fp)
   2ba04:	e03edd15 	stw	zero,-1164(fp)
   2ba08:	e0bedc17 	ldw	r2,-1168(fp)
   2ba0c:	e0bdc315 	stw	r2,-2292(fp)
   2ba10:	e0bdc117 	ldw	r2,-2300(fp)
   2ba14:	e0bdc415 	stw	r2,-2288(fp)
   2ba18:	e0fd7e17 	ldw	r3,-2568(fp)
   2ba1c:	e0bdc417 	ldw	r2,-2288(fp)
   2ba20:	1885883a 	add	r2,r3,r2
   2ba24:	e0bd7e15 	stw	r2,-2568(fp)
   2ba28:	e0fd7e17 	ldw	r3,-2568(fp)
   2ba2c:	e0bdc417 	ldw	r2,-2288(fp)
   2ba30:	1880022e 	bgeu	r3,r2,2ba3c <secp256k1_scalar_mul_512+0x13b8>
   2ba34:	00c00044 	movi	r3,1
   2ba38:	00000106 	br	2ba40 <secp256k1_scalar_mul_512+0x13bc>
   2ba3c:	0007883a 	mov	r3,zero
   2ba40:	e0bdc317 	ldw	r2,-2292(fp)
   2ba44:	10c5883a 	add	r2,r2,r3
   2ba48:	e0bdc315 	stw	r2,-2292(fp)
   2ba4c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ba50:	e0bdc317 	ldw	r2,-2292(fp)
   2ba54:	1885883a 	add	r2,r3,r2
   2ba58:	e0bd7f15 	stw	r2,-2564(fp)
   2ba5c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ba60:	e0bdc317 	ldw	r2,-2292(fp)
   2ba64:	1880022e 	bgeu	r3,r2,2ba70 <secp256k1_scalar_mul_512+0x13ec>
   2ba68:	00c00044 	movi	r3,1
   2ba6c:	00000106 	br	2ba74 <secp256k1_scalar_mul_512+0x13f0>
   2ba70:	0007883a 	mov	r3,zero
   2ba74:	e0bd8017 	ldw	r2,-2560(fp)
   2ba78:	10c5883a 	add	r2,r2,r3
   2ba7c:	e0bd8015 	stw	r2,-2560(fp)
   2ba80:	e0fd7f17 	ldw	r3,-2564(fp)
   2ba84:	e0bdc317 	ldw	r2,-2292(fp)
   2ba88:	1885803a 	cmpltu	r2,r3,r2
   2ba8c:	10803fcc 	andi	r2,r2,255
   2ba90:	10001126 	beq	r2,zero,2bad8 <secp256k1_scalar_mul_512+0x1454>
   2ba94:	e0bd8017 	ldw	r2,-2560(fp)
   2ba98:	1005003a 	cmpeq	r2,r2,zero
   2ba9c:	10803fcc 	andi	r2,r2,255
   2baa0:	10000d26 	beq	r2,zero,2bad8 <secp256k1_scalar_mul_512+0x1454>
   2baa4:	d0a01617 	ldw	r2,-32680(gp)
   2baa8:	10c00317 	ldw	r3,12(r2)
   2baac:	008001b4 	movhi	r2,6
   2bab0:	10b02604 	addi	r2,r2,-16232
   2bab4:	d8800015 	stw	r2,0(sp)
   2bab8:	01c08144 	movi	r7,517
   2babc:	018001b4 	movhi	r6,6
   2bac0:	31af9204 	addi	r6,r6,-16824
   2bac4:	014001b4 	movhi	r5,6
   2bac8:	296b3804 	addi	r5,r5,-21280
   2bacc:	1809883a 	mov	r4,r3
   2bad0:	00452600 	call	45260 <fprintf>
   2bad4:	00450340 	call	45034 <abort>
    muladd(a->d[2], b->d[3]);
   2bad8:	e0be8217 	ldw	r2,-1528(fp)
   2badc:	10800217 	ldw	r2,8(r2)
   2bae0:	e0bede15 	stw	r2,-1160(fp)
   2bae4:	e03edf15 	stw	zero,-1156(fp)
   2bae8:	e0be8317 	ldw	r2,-1524(fp)
   2baec:	10800317 	ldw	r2,12(r2)
   2baf0:	e0bee015 	stw	r2,-1152(fp)
   2baf4:	e03ee115 	stw	zero,-1148(fp)
   2baf8:	e1bee017 	ldw	r6,-1152(fp)
   2bafc:	e1fee117 	ldw	r7,-1148(fp)
   2bb00:	e13ede17 	ldw	r4,-1160(fp)
   2bb04:	e17edf17 	ldw	r5,-1156(fp)
   2bb08:	00429400 	call	42940 <__muldi3>
   2bb0c:	1009883a 	mov	r4,r2
   2bb10:	180b883a 	mov	r5,r3
   2bb14:	e13dc515 	stw	r4,-2284(fp)
   2bb18:	e17dc615 	stw	r5,-2280(fp)
   2bb1c:	e0bdc617 	ldw	r2,-2280(fp)
   2bb20:	1004d83a 	srl	r2,r2,zero
   2bb24:	e0bee215 	stw	r2,-1144(fp)
   2bb28:	e03ee315 	stw	zero,-1140(fp)
   2bb2c:	e0bee217 	ldw	r2,-1144(fp)
   2bb30:	e0bdc715 	stw	r2,-2276(fp)
   2bb34:	e0bdc517 	ldw	r2,-2284(fp)
   2bb38:	e0bdc815 	stw	r2,-2272(fp)
   2bb3c:	e0fd7e17 	ldw	r3,-2568(fp)
   2bb40:	e0bdc817 	ldw	r2,-2272(fp)
   2bb44:	1885883a 	add	r2,r3,r2
   2bb48:	e0bd7e15 	stw	r2,-2568(fp)
   2bb4c:	e0fd7e17 	ldw	r3,-2568(fp)
   2bb50:	e0bdc817 	ldw	r2,-2272(fp)
   2bb54:	1880022e 	bgeu	r3,r2,2bb60 <secp256k1_scalar_mul_512+0x14dc>
   2bb58:	00c00044 	movi	r3,1
   2bb5c:	00000106 	br	2bb64 <secp256k1_scalar_mul_512+0x14e0>
   2bb60:	0007883a 	mov	r3,zero
   2bb64:	e0bdc717 	ldw	r2,-2276(fp)
   2bb68:	10c5883a 	add	r2,r2,r3
   2bb6c:	e0bdc715 	stw	r2,-2276(fp)
   2bb70:	e0fd7f17 	ldw	r3,-2564(fp)
   2bb74:	e0bdc717 	ldw	r2,-2276(fp)
   2bb78:	1885883a 	add	r2,r3,r2
   2bb7c:	e0bd7f15 	stw	r2,-2564(fp)
   2bb80:	e0fd7f17 	ldw	r3,-2564(fp)
   2bb84:	e0bdc717 	ldw	r2,-2276(fp)
   2bb88:	1880022e 	bgeu	r3,r2,2bb94 <secp256k1_scalar_mul_512+0x1510>
   2bb8c:	00c00044 	movi	r3,1
   2bb90:	00000106 	br	2bb98 <secp256k1_scalar_mul_512+0x1514>
   2bb94:	0007883a 	mov	r3,zero
   2bb98:	e0bd8017 	ldw	r2,-2560(fp)
   2bb9c:	10c5883a 	add	r2,r2,r3
   2bba0:	e0bd8015 	stw	r2,-2560(fp)
   2bba4:	e0fd7f17 	ldw	r3,-2564(fp)
   2bba8:	e0bdc717 	ldw	r2,-2276(fp)
   2bbac:	1885803a 	cmpltu	r2,r3,r2
   2bbb0:	10803fcc 	andi	r2,r2,255
   2bbb4:	10001126 	beq	r2,zero,2bbfc <secp256k1_scalar_mul_512+0x1578>
   2bbb8:	e0bd8017 	ldw	r2,-2560(fp)
   2bbbc:	1005003a 	cmpeq	r2,r2,zero
   2bbc0:	10803fcc 	andi	r2,r2,255
   2bbc4:	10000d26 	beq	r2,zero,2bbfc <secp256k1_scalar_mul_512+0x1578>
   2bbc8:	d0a01617 	ldw	r2,-32680(gp)
   2bbcc:	10c00317 	ldw	r3,12(r2)
   2bbd0:	008001b4 	movhi	r2,6
   2bbd4:	10b02604 	addi	r2,r2,-16232
   2bbd8:	d8800015 	stw	r2,0(sp)
   2bbdc:	01c08184 	movi	r7,518
   2bbe0:	018001b4 	movhi	r6,6
   2bbe4:	31af9204 	addi	r6,r6,-16824
   2bbe8:	014001b4 	movhi	r5,6
   2bbec:	296b3804 	addi	r5,r5,-21280
   2bbf0:	1809883a 	mov	r4,r3
   2bbf4:	00452600 	call	45260 <fprintf>
   2bbf8:	00450340 	call	45034 <abort>
    muladd(a->d[3], b->d[2]);
   2bbfc:	e0be8217 	ldw	r2,-1528(fp)
   2bc00:	10800317 	ldw	r2,12(r2)
   2bc04:	e0bee415 	stw	r2,-1136(fp)
   2bc08:	e03ee515 	stw	zero,-1132(fp)
   2bc0c:	e0be8317 	ldw	r2,-1524(fp)
   2bc10:	10800217 	ldw	r2,8(r2)
   2bc14:	e0bee615 	stw	r2,-1128(fp)
   2bc18:	e03ee715 	stw	zero,-1124(fp)
   2bc1c:	e1bee617 	ldw	r6,-1128(fp)
   2bc20:	e1fee717 	ldw	r7,-1124(fp)
   2bc24:	e13ee417 	ldw	r4,-1136(fp)
   2bc28:	e17ee517 	ldw	r5,-1132(fp)
   2bc2c:	00429400 	call	42940 <__muldi3>
   2bc30:	1009883a 	mov	r4,r2
   2bc34:	180b883a 	mov	r5,r3
   2bc38:	e13dc915 	stw	r4,-2268(fp)
   2bc3c:	e17dca15 	stw	r5,-2264(fp)
   2bc40:	e0bdca17 	ldw	r2,-2264(fp)
   2bc44:	1004d83a 	srl	r2,r2,zero
   2bc48:	e0bee815 	stw	r2,-1120(fp)
   2bc4c:	e03ee915 	stw	zero,-1116(fp)
   2bc50:	e0bee817 	ldw	r2,-1120(fp)
   2bc54:	e0bdcb15 	stw	r2,-2260(fp)
   2bc58:	e0bdc917 	ldw	r2,-2268(fp)
   2bc5c:	e0bdcc15 	stw	r2,-2256(fp)
   2bc60:	e0fd7e17 	ldw	r3,-2568(fp)
   2bc64:	e0bdcc17 	ldw	r2,-2256(fp)
   2bc68:	1885883a 	add	r2,r3,r2
   2bc6c:	e0bd7e15 	stw	r2,-2568(fp)
   2bc70:	e0fd7e17 	ldw	r3,-2568(fp)
   2bc74:	e0bdcc17 	ldw	r2,-2256(fp)
   2bc78:	1880022e 	bgeu	r3,r2,2bc84 <secp256k1_scalar_mul_512+0x1600>
   2bc7c:	00c00044 	movi	r3,1
   2bc80:	00000106 	br	2bc88 <secp256k1_scalar_mul_512+0x1604>
   2bc84:	0007883a 	mov	r3,zero
   2bc88:	e0bdcb17 	ldw	r2,-2260(fp)
   2bc8c:	10c5883a 	add	r2,r2,r3
   2bc90:	e0bdcb15 	stw	r2,-2260(fp)
   2bc94:	e0fd7f17 	ldw	r3,-2564(fp)
   2bc98:	e0bdcb17 	ldw	r2,-2260(fp)
   2bc9c:	1885883a 	add	r2,r3,r2
   2bca0:	e0bd7f15 	stw	r2,-2564(fp)
   2bca4:	e0fd7f17 	ldw	r3,-2564(fp)
   2bca8:	e0bdcb17 	ldw	r2,-2260(fp)
   2bcac:	1880022e 	bgeu	r3,r2,2bcb8 <secp256k1_scalar_mul_512+0x1634>
   2bcb0:	00c00044 	movi	r3,1
   2bcb4:	00000106 	br	2bcbc <secp256k1_scalar_mul_512+0x1638>
   2bcb8:	0007883a 	mov	r3,zero
   2bcbc:	e0bd8017 	ldw	r2,-2560(fp)
   2bcc0:	10c5883a 	add	r2,r2,r3
   2bcc4:	e0bd8015 	stw	r2,-2560(fp)
   2bcc8:	e0fd7f17 	ldw	r3,-2564(fp)
   2bccc:	e0bdcb17 	ldw	r2,-2260(fp)
   2bcd0:	1885803a 	cmpltu	r2,r3,r2
   2bcd4:	10803fcc 	andi	r2,r2,255
   2bcd8:	10001126 	beq	r2,zero,2bd20 <secp256k1_scalar_mul_512+0x169c>
   2bcdc:	e0bd8017 	ldw	r2,-2560(fp)
   2bce0:	1005003a 	cmpeq	r2,r2,zero
   2bce4:	10803fcc 	andi	r2,r2,255
   2bce8:	10000d26 	beq	r2,zero,2bd20 <secp256k1_scalar_mul_512+0x169c>
   2bcec:	d0a01617 	ldw	r2,-32680(gp)
   2bcf0:	10c00317 	ldw	r3,12(r2)
   2bcf4:	008001b4 	movhi	r2,6
   2bcf8:	10b02604 	addi	r2,r2,-16232
   2bcfc:	d8800015 	stw	r2,0(sp)
   2bd00:	01c081c4 	movi	r7,519
   2bd04:	018001b4 	movhi	r6,6
   2bd08:	31af9204 	addi	r6,r6,-16824
   2bd0c:	014001b4 	movhi	r5,6
   2bd10:	296b3804 	addi	r5,r5,-21280
   2bd14:	1809883a 	mov	r4,r3
   2bd18:	00452600 	call	45260 <fprintf>
   2bd1c:	00450340 	call	45034 <abort>
    muladd(a->d[4], b->d[1]);
   2bd20:	e0be8217 	ldw	r2,-1528(fp)
   2bd24:	10800417 	ldw	r2,16(r2)
   2bd28:	e0beea15 	stw	r2,-1112(fp)
   2bd2c:	e03eeb15 	stw	zero,-1108(fp)
   2bd30:	e0be8317 	ldw	r2,-1524(fp)
   2bd34:	10800117 	ldw	r2,4(r2)
   2bd38:	e0beec15 	stw	r2,-1104(fp)
   2bd3c:	e03eed15 	stw	zero,-1100(fp)
   2bd40:	e1beec17 	ldw	r6,-1104(fp)
   2bd44:	e1feed17 	ldw	r7,-1100(fp)
   2bd48:	e13eea17 	ldw	r4,-1112(fp)
   2bd4c:	e17eeb17 	ldw	r5,-1108(fp)
   2bd50:	00429400 	call	42940 <__muldi3>
   2bd54:	1009883a 	mov	r4,r2
   2bd58:	180b883a 	mov	r5,r3
   2bd5c:	e13dcd15 	stw	r4,-2252(fp)
   2bd60:	e17dce15 	stw	r5,-2248(fp)
   2bd64:	e0bdce17 	ldw	r2,-2248(fp)
   2bd68:	1004d83a 	srl	r2,r2,zero
   2bd6c:	e0beee15 	stw	r2,-1096(fp)
   2bd70:	e03eef15 	stw	zero,-1092(fp)
   2bd74:	e0beee17 	ldw	r2,-1096(fp)
   2bd78:	e0bdcf15 	stw	r2,-2244(fp)
   2bd7c:	e0bdcd17 	ldw	r2,-2252(fp)
   2bd80:	e0bdd015 	stw	r2,-2240(fp)
   2bd84:	e0fd7e17 	ldw	r3,-2568(fp)
   2bd88:	e0bdd017 	ldw	r2,-2240(fp)
   2bd8c:	1885883a 	add	r2,r3,r2
   2bd90:	e0bd7e15 	stw	r2,-2568(fp)
   2bd94:	e0fd7e17 	ldw	r3,-2568(fp)
   2bd98:	e0bdd017 	ldw	r2,-2240(fp)
   2bd9c:	1880022e 	bgeu	r3,r2,2bda8 <secp256k1_scalar_mul_512+0x1724>
   2bda0:	00c00044 	movi	r3,1
   2bda4:	00000106 	br	2bdac <secp256k1_scalar_mul_512+0x1728>
   2bda8:	0007883a 	mov	r3,zero
   2bdac:	e0bdcf17 	ldw	r2,-2244(fp)
   2bdb0:	10c5883a 	add	r2,r2,r3
   2bdb4:	e0bdcf15 	stw	r2,-2244(fp)
   2bdb8:	e0fd7f17 	ldw	r3,-2564(fp)
   2bdbc:	e0bdcf17 	ldw	r2,-2244(fp)
   2bdc0:	1885883a 	add	r2,r3,r2
   2bdc4:	e0bd7f15 	stw	r2,-2564(fp)
   2bdc8:	e0fd7f17 	ldw	r3,-2564(fp)
   2bdcc:	e0bdcf17 	ldw	r2,-2244(fp)
   2bdd0:	1880022e 	bgeu	r3,r2,2bddc <secp256k1_scalar_mul_512+0x1758>
   2bdd4:	00c00044 	movi	r3,1
   2bdd8:	00000106 	br	2bde0 <secp256k1_scalar_mul_512+0x175c>
   2bddc:	0007883a 	mov	r3,zero
   2bde0:	e0bd8017 	ldw	r2,-2560(fp)
   2bde4:	10c5883a 	add	r2,r2,r3
   2bde8:	e0bd8015 	stw	r2,-2560(fp)
   2bdec:	e0fd7f17 	ldw	r3,-2564(fp)
   2bdf0:	e0bdcf17 	ldw	r2,-2244(fp)
   2bdf4:	1885803a 	cmpltu	r2,r3,r2
   2bdf8:	10803fcc 	andi	r2,r2,255
   2bdfc:	10001126 	beq	r2,zero,2be44 <secp256k1_scalar_mul_512+0x17c0>
   2be00:	e0bd8017 	ldw	r2,-2560(fp)
   2be04:	1005003a 	cmpeq	r2,r2,zero
   2be08:	10803fcc 	andi	r2,r2,255
   2be0c:	10000d26 	beq	r2,zero,2be44 <secp256k1_scalar_mul_512+0x17c0>
   2be10:	d0a01617 	ldw	r2,-32680(gp)
   2be14:	10c00317 	ldw	r3,12(r2)
   2be18:	008001b4 	movhi	r2,6
   2be1c:	10b02604 	addi	r2,r2,-16232
   2be20:	d8800015 	stw	r2,0(sp)
   2be24:	01c08204 	movi	r7,520
   2be28:	018001b4 	movhi	r6,6
   2be2c:	31af9204 	addi	r6,r6,-16824
   2be30:	014001b4 	movhi	r5,6
   2be34:	296b3804 	addi	r5,r5,-21280
   2be38:	1809883a 	mov	r4,r3
   2be3c:	00452600 	call	45260 <fprintf>
   2be40:	00450340 	call	45034 <abort>
    muladd(a->d[5], b->d[0]);
   2be44:	e0be8217 	ldw	r2,-1528(fp)
   2be48:	10800517 	ldw	r2,20(r2)
   2be4c:	e0bef015 	stw	r2,-1088(fp)
   2be50:	e03ef115 	stw	zero,-1084(fp)
   2be54:	e0be8317 	ldw	r2,-1524(fp)
   2be58:	10800017 	ldw	r2,0(r2)
   2be5c:	e0bef215 	stw	r2,-1080(fp)
   2be60:	e03ef315 	stw	zero,-1076(fp)
   2be64:	e1bef217 	ldw	r6,-1080(fp)
   2be68:	e1fef317 	ldw	r7,-1076(fp)
   2be6c:	e13ef017 	ldw	r4,-1088(fp)
   2be70:	e17ef117 	ldw	r5,-1084(fp)
   2be74:	00429400 	call	42940 <__muldi3>
   2be78:	1009883a 	mov	r4,r2
   2be7c:	180b883a 	mov	r5,r3
   2be80:	e13dd115 	stw	r4,-2236(fp)
   2be84:	e17dd215 	stw	r5,-2232(fp)
   2be88:	e0bdd217 	ldw	r2,-2232(fp)
   2be8c:	1004d83a 	srl	r2,r2,zero
   2be90:	e0bef415 	stw	r2,-1072(fp)
   2be94:	e03ef515 	stw	zero,-1068(fp)
   2be98:	e0bef417 	ldw	r2,-1072(fp)
   2be9c:	e0bdd315 	stw	r2,-2228(fp)
   2bea0:	e0bdd117 	ldw	r2,-2236(fp)
   2bea4:	e0bdd415 	stw	r2,-2224(fp)
   2bea8:	e0fd7e17 	ldw	r3,-2568(fp)
   2beac:	e0bdd417 	ldw	r2,-2224(fp)
   2beb0:	1885883a 	add	r2,r3,r2
   2beb4:	e0bd7e15 	stw	r2,-2568(fp)
   2beb8:	e0fd7e17 	ldw	r3,-2568(fp)
   2bebc:	e0bdd417 	ldw	r2,-2224(fp)
   2bec0:	1880022e 	bgeu	r3,r2,2becc <secp256k1_scalar_mul_512+0x1848>
   2bec4:	00c00044 	movi	r3,1
   2bec8:	00000106 	br	2bed0 <secp256k1_scalar_mul_512+0x184c>
   2becc:	0007883a 	mov	r3,zero
   2bed0:	e0bdd317 	ldw	r2,-2228(fp)
   2bed4:	10c5883a 	add	r2,r2,r3
   2bed8:	e0bdd315 	stw	r2,-2228(fp)
   2bedc:	e0fd7f17 	ldw	r3,-2564(fp)
   2bee0:	e0bdd317 	ldw	r2,-2228(fp)
   2bee4:	1885883a 	add	r2,r3,r2
   2bee8:	e0bd7f15 	stw	r2,-2564(fp)
   2beec:	e0fd7f17 	ldw	r3,-2564(fp)
   2bef0:	e0bdd317 	ldw	r2,-2228(fp)
   2bef4:	1880022e 	bgeu	r3,r2,2bf00 <secp256k1_scalar_mul_512+0x187c>
   2bef8:	00c00044 	movi	r3,1
   2befc:	00000106 	br	2bf04 <secp256k1_scalar_mul_512+0x1880>
   2bf00:	0007883a 	mov	r3,zero
   2bf04:	e0bd8017 	ldw	r2,-2560(fp)
   2bf08:	10c5883a 	add	r2,r2,r3
   2bf0c:	e0bd8015 	stw	r2,-2560(fp)
   2bf10:	e0fd7f17 	ldw	r3,-2564(fp)
   2bf14:	e0bdd317 	ldw	r2,-2228(fp)
   2bf18:	1885803a 	cmpltu	r2,r3,r2
   2bf1c:	10803fcc 	andi	r2,r2,255
   2bf20:	10001126 	beq	r2,zero,2bf68 <secp256k1_scalar_mul_512+0x18e4>
   2bf24:	e0bd8017 	ldw	r2,-2560(fp)
   2bf28:	1005003a 	cmpeq	r2,r2,zero
   2bf2c:	10803fcc 	andi	r2,r2,255
   2bf30:	10000d26 	beq	r2,zero,2bf68 <secp256k1_scalar_mul_512+0x18e4>
   2bf34:	d0a01617 	ldw	r2,-32680(gp)
   2bf38:	10c00317 	ldw	r3,12(r2)
   2bf3c:	008001b4 	movhi	r2,6
   2bf40:	10b02604 	addi	r2,r2,-16232
   2bf44:	d8800015 	stw	r2,0(sp)
   2bf48:	01c08244 	movi	r7,521
   2bf4c:	018001b4 	movhi	r6,6
   2bf50:	31af9204 	addi	r6,r6,-16824
   2bf54:	014001b4 	movhi	r5,6
   2bf58:	296b3804 	addi	r5,r5,-21280
   2bf5c:	1809883a 	mov	r4,r3
   2bf60:	00452600 	call	45260 <fprintf>
   2bf64:	00450340 	call	45034 <abort>
    extract(l[5]);
   2bf68:	e0be8117 	ldw	r2,-1532(fp)
   2bf6c:	10c00504 	addi	r3,r2,20
   2bf70:	e0bd7e17 	ldw	r2,-2568(fp)
   2bf74:	18800015 	stw	r2,0(r3)
   2bf78:	e0bd7f17 	ldw	r2,-2564(fp)
   2bf7c:	e0bd7e15 	stw	r2,-2568(fp)
   2bf80:	e0bd8017 	ldw	r2,-2560(fp)
   2bf84:	e0bd7f15 	stw	r2,-2564(fp)
   2bf88:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[6]);
   2bf8c:	e0be8217 	ldw	r2,-1528(fp)
   2bf90:	10800017 	ldw	r2,0(r2)
   2bf94:	e0bef615 	stw	r2,-1064(fp)
   2bf98:	e03ef715 	stw	zero,-1060(fp)
   2bf9c:	e0be8317 	ldw	r2,-1524(fp)
   2bfa0:	10800617 	ldw	r2,24(r2)
   2bfa4:	e0bef815 	stw	r2,-1056(fp)
   2bfa8:	e03ef915 	stw	zero,-1052(fp)
   2bfac:	e1bef817 	ldw	r6,-1056(fp)
   2bfb0:	e1fef917 	ldw	r7,-1052(fp)
   2bfb4:	e13ef617 	ldw	r4,-1064(fp)
   2bfb8:	e17ef717 	ldw	r5,-1060(fp)
   2bfbc:	00429400 	call	42940 <__muldi3>
   2bfc0:	1009883a 	mov	r4,r2
   2bfc4:	180b883a 	mov	r5,r3
   2bfc8:	e13dd515 	stw	r4,-2220(fp)
   2bfcc:	e17dd615 	stw	r5,-2216(fp)
   2bfd0:	e0bdd617 	ldw	r2,-2216(fp)
   2bfd4:	1004d83a 	srl	r2,r2,zero
   2bfd8:	e0befa15 	stw	r2,-1048(fp)
   2bfdc:	e03efb15 	stw	zero,-1044(fp)
   2bfe0:	e0befa17 	ldw	r2,-1048(fp)
   2bfe4:	e0bdd715 	stw	r2,-2212(fp)
   2bfe8:	e0bdd517 	ldw	r2,-2220(fp)
   2bfec:	e0bdd815 	stw	r2,-2208(fp)
   2bff0:	e0fd7e17 	ldw	r3,-2568(fp)
   2bff4:	e0bdd817 	ldw	r2,-2208(fp)
   2bff8:	1885883a 	add	r2,r3,r2
   2bffc:	e0bd7e15 	stw	r2,-2568(fp)
   2c000:	e0fd7e17 	ldw	r3,-2568(fp)
   2c004:	e0bdd817 	ldw	r2,-2208(fp)
   2c008:	1880022e 	bgeu	r3,r2,2c014 <secp256k1_scalar_mul_512+0x1990>
   2c00c:	00c00044 	movi	r3,1
   2c010:	00000106 	br	2c018 <secp256k1_scalar_mul_512+0x1994>
   2c014:	0007883a 	mov	r3,zero
   2c018:	e0bdd717 	ldw	r2,-2212(fp)
   2c01c:	10c5883a 	add	r2,r2,r3
   2c020:	e0bdd715 	stw	r2,-2212(fp)
   2c024:	e0fd7f17 	ldw	r3,-2564(fp)
   2c028:	e0bdd717 	ldw	r2,-2212(fp)
   2c02c:	1885883a 	add	r2,r3,r2
   2c030:	e0bd7f15 	stw	r2,-2564(fp)
   2c034:	e0fd7f17 	ldw	r3,-2564(fp)
   2c038:	e0bdd717 	ldw	r2,-2212(fp)
   2c03c:	1880022e 	bgeu	r3,r2,2c048 <secp256k1_scalar_mul_512+0x19c4>
   2c040:	00c00044 	movi	r3,1
   2c044:	00000106 	br	2c04c <secp256k1_scalar_mul_512+0x19c8>
   2c048:	0007883a 	mov	r3,zero
   2c04c:	e0bd8017 	ldw	r2,-2560(fp)
   2c050:	10c5883a 	add	r2,r2,r3
   2c054:	e0bd8015 	stw	r2,-2560(fp)
   2c058:	e0fd7f17 	ldw	r3,-2564(fp)
   2c05c:	e0bdd717 	ldw	r2,-2212(fp)
   2c060:	1885803a 	cmpltu	r2,r3,r2
   2c064:	10803fcc 	andi	r2,r2,255
   2c068:	10001126 	beq	r2,zero,2c0b0 <secp256k1_scalar_mul_512+0x1a2c>
   2c06c:	e0bd8017 	ldw	r2,-2560(fp)
   2c070:	1005003a 	cmpeq	r2,r2,zero
   2c074:	10803fcc 	andi	r2,r2,255
   2c078:	10000d26 	beq	r2,zero,2c0b0 <secp256k1_scalar_mul_512+0x1a2c>
   2c07c:	d0a01617 	ldw	r2,-32680(gp)
   2c080:	10c00317 	ldw	r3,12(r2)
   2c084:	008001b4 	movhi	r2,6
   2c088:	10b02604 	addi	r2,r2,-16232
   2c08c:	d8800015 	stw	r2,0(sp)
   2c090:	01c082c4 	movi	r7,523
   2c094:	018001b4 	movhi	r6,6
   2c098:	31af9204 	addi	r6,r6,-16824
   2c09c:	014001b4 	movhi	r5,6
   2c0a0:	296b3804 	addi	r5,r5,-21280
   2c0a4:	1809883a 	mov	r4,r3
   2c0a8:	00452600 	call	45260 <fprintf>
   2c0ac:	00450340 	call	45034 <abort>
    muladd(a->d[1], b->d[5]);
   2c0b0:	e0be8217 	ldw	r2,-1528(fp)
   2c0b4:	10800117 	ldw	r2,4(r2)
   2c0b8:	e0befc15 	stw	r2,-1040(fp)
   2c0bc:	e03efd15 	stw	zero,-1036(fp)
   2c0c0:	e0be8317 	ldw	r2,-1524(fp)
   2c0c4:	10800517 	ldw	r2,20(r2)
   2c0c8:	e0befe15 	stw	r2,-1032(fp)
   2c0cc:	e03eff15 	stw	zero,-1028(fp)
   2c0d0:	e1befe17 	ldw	r6,-1032(fp)
   2c0d4:	e1feff17 	ldw	r7,-1028(fp)
   2c0d8:	e13efc17 	ldw	r4,-1040(fp)
   2c0dc:	e17efd17 	ldw	r5,-1036(fp)
   2c0e0:	00429400 	call	42940 <__muldi3>
   2c0e4:	1009883a 	mov	r4,r2
   2c0e8:	180b883a 	mov	r5,r3
   2c0ec:	e13dd915 	stw	r4,-2204(fp)
   2c0f0:	e17dda15 	stw	r5,-2200(fp)
   2c0f4:	e0bdda17 	ldw	r2,-2200(fp)
   2c0f8:	1004d83a 	srl	r2,r2,zero
   2c0fc:	e0bf0015 	stw	r2,-1024(fp)
   2c100:	e03f0115 	stw	zero,-1020(fp)
   2c104:	e0bf0017 	ldw	r2,-1024(fp)
   2c108:	e0bddb15 	stw	r2,-2196(fp)
   2c10c:	e0bdd917 	ldw	r2,-2204(fp)
   2c110:	e0bddc15 	stw	r2,-2192(fp)
   2c114:	e0fd7e17 	ldw	r3,-2568(fp)
   2c118:	e0bddc17 	ldw	r2,-2192(fp)
   2c11c:	1885883a 	add	r2,r3,r2
   2c120:	e0bd7e15 	stw	r2,-2568(fp)
   2c124:	e0fd7e17 	ldw	r3,-2568(fp)
   2c128:	e0bddc17 	ldw	r2,-2192(fp)
   2c12c:	1880022e 	bgeu	r3,r2,2c138 <secp256k1_scalar_mul_512+0x1ab4>
   2c130:	00c00044 	movi	r3,1
   2c134:	00000106 	br	2c13c <secp256k1_scalar_mul_512+0x1ab8>
   2c138:	0007883a 	mov	r3,zero
   2c13c:	e0bddb17 	ldw	r2,-2196(fp)
   2c140:	10c5883a 	add	r2,r2,r3
   2c144:	e0bddb15 	stw	r2,-2196(fp)
   2c148:	e0fd7f17 	ldw	r3,-2564(fp)
   2c14c:	e0bddb17 	ldw	r2,-2196(fp)
   2c150:	1885883a 	add	r2,r3,r2
   2c154:	e0bd7f15 	stw	r2,-2564(fp)
   2c158:	e0fd7f17 	ldw	r3,-2564(fp)
   2c15c:	e0bddb17 	ldw	r2,-2196(fp)
   2c160:	1880022e 	bgeu	r3,r2,2c16c <secp256k1_scalar_mul_512+0x1ae8>
   2c164:	00c00044 	movi	r3,1
   2c168:	00000106 	br	2c170 <secp256k1_scalar_mul_512+0x1aec>
   2c16c:	0007883a 	mov	r3,zero
   2c170:	e0bd8017 	ldw	r2,-2560(fp)
   2c174:	10c5883a 	add	r2,r2,r3
   2c178:	e0bd8015 	stw	r2,-2560(fp)
   2c17c:	e0fd7f17 	ldw	r3,-2564(fp)
   2c180:	e0bddb17 	ldw	r2,-2196(fp)
   2c184:	1885803a 	cmpltu	r2,r3,r2
   2c188:	10803fcc 	andi	r2,r2,255
   2c18c:	10001126 	beq	r2,zero,2c1d4 <secp256k1_scalar_mul_512+0x1b50>
   2c190:	e0bd8017 	ldw	r2,-2560(fp)
   2c194:	1005003a 	cmpeq	r2,r2,zero
   2c198:	10803fcc 	andi	r2,r2,255
   2c19c:	10000d26 	beq	r2,zero,2c1d4 <secp256k1_scalar_mul_512+0x1b50>
   2c1a0:	d0a01617 	ldw	r2,-32680(gp)
   2c1a4:	10c00317 	ldw	r3,12(r2)
   2c1a8:	008001b4 	movhi	r2,6
   2c1ac:	10b02604 	addi	r2,r2,-16232
   2c1b0:	d8800015 	stw	r2,0(sp)
   2c1b4:	01c08304 	movi	r7,524
   2c1b8:	018001b4 	movhi	r6,6
   2c1bc:	31af9204 	addi	r6,r6,-16824
   2c1c0:	014001b4 	movhi	r5,6
   2c1c4:	296b3804 	addi	r5,r5,-21280
   2c1c8:	1809883a 	mov	r4,r3
   2c1cc:	00452600 	call	45260 <fprintf>
   2c1d0:	00450340 	call	45034 <abort>
    muladd(a->d[2], b->d[4]);
   2c1d4:	e0be8217 	ldw	r2,-1528(fp)
   2c1d8:	10800217 	ldw	r2,8(r2)
   2c1dc:	e0bf0215 	stw	r2,-1016(fp)
   2c1e0:	e03f0315 	stw	zero,-1012(fp)
   2c1e4:	e0be8317 	ldw	r2,-1524(fp)
   2c1e8:	10800417 	ldw	r2,16(r2)
   2c1ec:	e0bf0415 	stw	r2,-1008(fp)
   2c1f0:	e03f0515 	stw	zero,-1004(fp)
   2c1f4:	e1bf0417 	ldw	r6,-1008(fp)
   2c1f8:	e1ff0517 	ldw	r7,-1004(fp)
   2c1fc:	e13f0217 	ldw	r4,-1016(fp)
   2c200:	e17f0317 	ldw	r5,-1012(fp)
   2c204:	00429400 	call	42940 <__muldi3>
   2c208:	1009883a 	mov	r4,r2
   2c20c:	180b883a 	mov	r5,r3
   2c210:	e13ddd15 	stw	r4,-2188(fp)
   2c214:	e17dde15 	stw	r5,-2184(fp)
   2c218:	e0bdde17 	ldw	r2,-2184(fp)
   2c21c:	1004d83a 	srl	r2,r2,zero
   2c220:	e0bf0615 	stw	r2,-1000(fp)
   2c224:	e03f0715 	stw	zero,-996(fp)
   2c228:	e0bf0617 	ldw	r2,-1000(fp)
   2c22c:	e0bddf15 	stw	r2,-2180(fp)
   2c230:	e0bddd17 	ldw	r2,-2188(fp)
   2c234:	e0bde015 	stw	r2,-2176(fp)
   2c238:	e0fd7e17 	ldw	r3,-2568(fp)
   2c23c:	e0bde017 	ldw	r2,-2176(fp)
   2c240:	1885883a 	add	r2,r3,r2
   2c244:	e0bd7e15 	stw	r2,-2568(fp)
   2c248:	e0fd7e17 	ldw	r3,-2568(fp)
   2c24c:	e0bde017 	ldw	r2,-2176(fp)
   2c250:	1880022e 	bgeu	r3,r2,2c25c <secp256k1_scalar_mul_512+0x1bd8>
   2c254:	00c00044 	movi	r3,1
   2c258:	00000106 	br	2c260 <secp256k1_scalar_mul_512+0x1bdc>
   2c25c:	0007883a 	mov	r3,zero
   2c260:	e0bddf17 	ldw	r2,-2180(fp)
   2c264:	10c5883a 	add	r2,r2,r3
   2c268:	e0bddf15 	stw	r2,-2180(fp)
   2c26c:	e0fd7f17 	ldw	r3,-2564(fp)
   2c270:	e0bddf17 	ldw	r2,-2180(fp)
   2c274:	1885883a 	add	r2,r3,r2
   2c278:	e0bd7f15 	stw	r2,-2564(fp)
   2c27c:	e0fd7f17 	ldw	r3,-2564(fp)
   2c280:	e0bddf17 	ldw	r2,-2180(fp)
   2c284:	1880022e 	bgeu	r3,r2,2c290 <secp256k1_scalar_mul_512+0x1c0c>
   2c288:	00c00044 	movi	r3,1
   2c28c:	00000106 	br	2c294 <secp256k1_scalar_mul_512+0x1c10>
   2c290:	0007883a 	mov	r3,zero
   2c294:	e0bd8017 	ldw	r2,-2560(fp)
   2c298:	10c5883a 	add	r2,r2,r3
   2c29c:	e0bd8015 	stw	r2,-2560(fp)
   2c2a0:	e0fd7f17 	ldw	r3,-2564(fp)
   2c2a4:	e0bddf17 	ldw	r2,-2180(fp)
   2c2a8:	1885803a 	cmpltu	r2,r3,r2
   2c2ac:	10803fcc 	andi	r2,r2,255
   2c2b0:	10001126 	beq	r2,zero,2c2f8 <secp256k1_scalar_mul_512+0x1c74>
   2c2b4:	e0bd8017 	ldw	r2,-2560(fp)
   2c2b8:	1005003a 	cmpeq	r2,r2,zero
   2c2bc:	10803fcc 	andi	r2,r2,255
   2c2c0:	10000d26 	beq	r2,zero,2c2f8 <secp256k1_scalar_mul_512+0x1c74>
   2c2c4:	d0a01617 	ldw	r2,-32680(gp)
   2c2c8:	10c00317 	ldw	r3,12(r2)
   2c2cc:	008001b4 	movhi	r2,6
   2c2d0:	10b02604 	addi	r2,r2,-16232
   2c2d4:	d8800015 	stw	r2,0(sp)
   2c2d8:	01c08344 	movi	r7,525
   2c2dc:	018001b4 	movhi	r6,6
   2c2e0:	31af9204 	addi	r6,r6,-16824
   2c2e4:	014001b4 	movhi	r5,6
   2c2e8:	296b3804 	addi	r5,r5,-21280
   2c2ec:	1809883a 	mov	r4,r3
   2c2f0:	00452600 	call	45260 <fprintf>
   2c2f4:	00450340 	call	45034 <abort>
    muladd(a->d[3], b->d[3]);
   2c2f8:	e0be8217 	ldw	r2,-1528(fp)
   2c2fc:	10800317 	ldw	r2,12(r2)
   2c300:	e0bf0815 	stw	r2,-992(fp)
   2c304:	e03f0915 	stw	zero,-988(fp)
   2c308:	e0be8317 	ldw	r2,-1524(fp)
   2c30c:	10800317 	ldw	r2,12(r2)
   2c310:	e0bf0a15 	stw	r2,-984(fp)
   2c314:	e03f0b15 	stw	zero,-980(fp)
   2c318:	e1bf0a17 	ldw	r6,-984(fp)
   2c31c:	e1ff0b17 	ldw	r7,-980(fp)
   2c320:	e13f0817 	ldw	r4,-992(fp)
   2c324:	e17f0917 	ldw	r5,-988(fp)
   2c328:	00429400 	call	42940 <__muldi3>
   2c32c:	1009883a 	mov	r4,r2
   2c330:	180b883a 	mov	r5,r3
   2c334:	e13de115 	stw	r4,-2172(fp)
   2c338:	e17de215 	stw	r5,-2168(fp)
   2c33c:	e0bde217 	ldw	r2,-2168(fp)
   2c340:	1004d83a 	srl	r2,r2,zero
   2c344:	e0bf0c15 	stw	r2,-976(fp)
   2c348:	e03f0d15 	stw	zero,-972(fp)
   2c34c:	e0bf0c17 	ldw	r2,-976(fp)
   2c350:	e0bde315 	stw	r2,-2164(fp)
   2c354:	e0bde117 	ldw	r2,-2172(fp)
   2c358:	e0bde415 	stw	r2,-2160(fp)
   2c35c:	e0fd7e17 	ldw	r3,-2568(fp)
   2c360:	e0bde417 	ldw	r2,-2160(fp)
   2c364:	1885883a 	add	r2,r3,r2
   2c368:	e0bd7e15 	stw	r2,-2568(fp)
   2c36c:	e0fd7e17 	ldw	r3,-2568(fp)
   2c370:	e0bde417 	ldw	r2,-2160(fp)
   2c374:	1880022e 	bgeu	r3,r2,2c380 <secp256k1_scalar_mul_512+0x1cfc>
   2c378:	00c00044 	movi	r3,1
   2c37c:	00000106 	br	2c384 <secp256k1_scalar_mul_512+0x1d00>
   2c380:	0007883a 	mov	r3,zero
   2c384:	e0bde317 	ldw	r2,-2164(fp)
   2c388:	10c5883a 	add	r2,r2,r3
   2c38c:	e0bde315 	stw	r2,-2164(fp)
   2c390:	e0fd7f17 	ldw	r3,-2564(fp)
   2c394:	e0bde317 	ldw	r2,-2164(fp)
   2c398:	1885883a 	add	r2,r3,r2
   2c39c:	e0bd7f15 	stw	r2,-2564(fp)
   2c3a0:	e0fd7f17 	ldw	r3,-2564(fp)
   2c3a4:	e0bde317 	ldw	r2,-2164(fp)
   2c3a8:	1880022e 	bgeu	r3,r2,2c3b4 <secp256k1_scalar_mul_512+0x1d30>
   2c3ac:	00c00044 	movi	r3,1
   2c3b0:	00000106 	br	2c3b8 <secp256k1_scalar_mul_512+0x1d34>
   2c3b4:	0007883a 	mov	r3,zero
   2c3b8:	e0bd8017 	ldw	r2,-2560(fp)
   2c3bc:	10c5883a 	add	r2,r2,r3
   2c3c0:	e0bd8015 	stw	r2,-2560(fp)
   2c3c4:	e0fd7f17 	ldw	r3,-2564(fp)
   2c3c8:	e0bde317 	ldw	r2,-2164(fp)
   2c3cc:	1885803a 	cmpltu	r2,r3,r2
   2c3d0:	10803fcc 	andi	r2,r2,255
   2c3d4:	10001126 	beq	r2,zero,2c41c <secp256k1_scalar_mul_512+0x1d98>
   2c3d8:	e0bd8017 	ldw	r2,-2560(fp)
   2c3dc:	1005003a 	cmpeq	r2,r2,zero
   2c3e0:	10803fcc 	andi	r2,r2,255
   2c3e4:	10000d26 	beq	r2,zero,2c41c <secp256k1_scalar_mul_512+0x1d98>
   2c3e8:	d0a01617 	ldw	r2,-32680(gp)
   2c3ec:	10c00317 	ldw	r3,12(r2)
   2c3f0:	008001b4 	movhi	r2,6
   2c3f4:	10b02604 	addi	r2,r2,-16232
   2c3f8:	d8800015 	stw	r2,0(sp)
   2c3fc:	01c08384 	movi	r7,526
   2c400:	018001b4 	movhi	r6,6
   2c404:	31af9204 	addi	r6,r6,-16824
   2c408:	014001b4 	movhi	r5,6
   2c40c:	296b3804 	addi	r5,r5,-21280
   2c410:	1809883a 	mov	r4,r3
   2c414:	00452600 	call	45260 <fprintf>
   2c418:	00450340 	call	45034 <abort>
    muladd(a->d[4], b->d[2]);
   2c41c:	e0be8217 	ldw	r2,-1528(fp)
   2c420:	10800417 	ldw	r2,16(r2)
   2c424:	e0bf0e15 	stw	r2,-968(fp)
   2c428:	e03f0f15 	stw	zero,-964(fp)
   2c42c:	e0be8317 	ldw	r2,-1524(fp)
   2c430:	10800217 	ldw	r2,8(r2)
   2c434:	e0bf1015 	stw	r2,-960(fp)
   2c438:	e03f1115 	stw	zero,-956(fp)
   2c43c:	e1bf1017 	ldw	r6,-960(fp)
   2c440:	e1ff1117 	ldw	r7,-956(fp)
   2c444:	e13f0e17 	ldw	r4,-968(fp)
   2c448:	e17f0f17 	ldw	r5,-964(fp)
   2c44c:	00429400 	call	42940 <__muldi3>
   2c450:	1009883a 	mov	r4,r2
   2c454:	180b883a 	mov	r5,r3
   2c458:	e13de515 	stw	r4,-2156(fp)
   2c45c:	e17de615 	stw	r5,-2152(fp)
   2c460:	e0bde617 	ldw	r2,-2152(fp)
   2c464:	1004d83a 	srl	r2,r2,zero
   2c468:	e0bf1215 	stw	r2,-952(fp)
   2c46c:	e03f1315 	stw	zero,-948(fp)
   2c470:	e0bf1217 	ldw	r2,-952(fp)
   2c474:	e0bde715 	stw	r2,-2148(fp)
   2c478:	e0bde517 	ldw	r2,-2156(fp)
   2c47c:	e0bde815 	stw	r2,-2144(fp)
   2c480:	e0fd7e17 	ldw	r3,-2568(fp)
   2c484:	e0bde817 	ldw	r2,-2144(fp)
   2c488:	1885883a 	add	r2,r3,r2
   2c48c:	e0bd7e15 	stw	r2,-2568(fp)
   2c490:	e0fd7e17 	ldw	r3,-2568(fp)
   2c494:	e0bde817 	ldw	r2,-2144(fp)
   2c498:	1880022e 	bgeu	r3,r2,2c4a4 <secp256k1_scalar_mul_512+0x1e20>
   2c49c:	00c00044 	movi	r3,1
   2c4a0:	00000106 	br	2c4a8 <secp256k1_scalar_mul_512+0x1e24>
   2c4a4:	0007883a 	mov	r3,zero
   2c4a8:	e0bde717 	ldw	r2,-2148(fp)
   2c4ac:	10c5883a 	add	r2,r2,r3
   2c4b0:	e0bde715 	stw	r2,-2148(fp)
   2c4b4:	e0fd7f17 	ldw	r3,-2564(fp)
   2c4b8:	e0bde717 	ldw	r2,-2148(fp)
   2c4bc:	1885883a 	add	r2,r3,r2
   2c4c0:	e0bd7f15 	stw	r2,-2564(fp)
   2c4c4:	e0fd7f17 	ldw	r3,-2564(fp)
   2c4c8:	e0bde717 	ldw	r2,-2148(fp)
   2c4cc:	1880022e 	bgeu	r3,r2,2c4d8 <secp256k1_scalar_mul_512+0x1e54>
   2c4d0:	00c00044 	movi	r3,1
   2c4d4:	00000106 	br	2c4dc <secp256k1_scalar_mul_512+0x1e58>
   2c4d8:	0007883a 	mov	r3,zero
   2c4dc:	e0bd8017 	ldw	r2,-2560(fp)
   2c4e0:	10c5883a 	add	r2,r2,r3
   2c4e4:	e0bd8015 	stw	r2,-2560(fp)
   2c4e8:	e0fd7f17 	ldw	r3,-2564(fp)
   2c4ec:	e0bde717 	ldw	r2,-2148(fp)
   2c4f0:	1885803a 	cmpltu	r2,r3,r2
   2c4f4:	10803fcc 	andi	r2,r2,255
   2c4f8:	10001126 	beq	r2,zero,2c540 <secp256k1_scalar_mul_512+0x1ebc>
   2c4fc:	e0bd8017 	ldw	r2,-2560(fp)
   2c500:	1005003a 	cmpeq	r2,r2,zero
   2c504:	10803fcc 	andi	r2,r2,255
   2c508:	10000d26 	beq	r2,zero,2c540 <secp256k1_scalar_mul_512+0x1ebc>
   2c50c:	d0a01617 	ldw	r2,-32680(gp)
   2c510:	10c00317 	ldw	r3,12(r2)
   2c514:	008001b4 	movhi	r2,6
   2c518:	10b02604 	addi	r2,r2,-16232
   2c51c:	d8800015 	stw	r2,0(sp)
   2c520:	01c083c4 	movi	r7,527
   2c524:	018001b4 	movhi	r6,6
   2c528:	31af9204 	addi	r6,r6,-16824
   2c52c:	014001b4 	movhi	r5,6
   2c530:	296b3804 	addi	r5,r5,-21280
   2c534:	1809883a 	mov	r4,r3
   2c538:	00452600 	call	45260 <fprintf>
   2c53c:	00450340 	call	45034 <abort>
    muladd(a->d[5], b->d[1]);
   2c540:	e0be8217 	ldw	r2,-1528(fp)
   2c544:	10800517 	ldw	r2,20(r2)
   2c548:	e0bf1415 	stw	r2,-944(fp)
   2c54c:	e03f1515 	stw	zero,-940(fp)
   2c550:	e0be8317 	ldw	r2,-1524(fp)
   2c554:	10800117 	ldw	r2,4(r2)
   2c558:	e0bf1615 	stw	r2,-936(fp)
   2c55c:	e03f1715 	stw	zero,-932(fp)
   2c560:	e1bf1617 	ldw	r6,-936(fp)
   2c564:	e1ff1717 	ldw	r7,-932(fp)
   2c568:	e13f1417 	ldw	r4,-944(fp)
   2c56c:	e17f1517 	ldw	r5,-940(fp)
   2c570:	00429400 	call	42940 <__muldi3>
   2c574:	1009883a 	mov	r4,r2
   2c578:	180b883a 	mov	r5,r3
   2c57c:	e13de915 	stw	r4,-2140(fp)
   2c580:	e17dea15 	stw	r5,-2136(fp)
   2c584:	e0bdea17 	ldw	r2,-2136(fp)
   2c588:	1004d83a 	srl	r2,r2,zero
   2c58c:	e0bf1815 	stw	r2,-928(fp)
   2c590:	e03f1915 	stw	zero,-924(fp)
   2c594:	e0bf1817 	ldw	r2,-928(fp)
   2c598:	e0bdeb15 	stw	r2,-2132(fp)
   2c59c:	e0bde917 	ldw	r2,-2140(fp)
   2c5a0:	e0bdec15 	stw	r2,-2128(fp)
   2c5a4:	e0fd7e17 	ldw	r3,-2568(fp)
   2c5a8:	e0bdec17 	ldw	r2,-2128(fp)
   2c5ac:	1885883a 	add	r2,r3,r2
   2c5b0:	e0bd7e15 	stw	r2,-2568(fp)
   2c5b4:	e0fd7e17 	ldw	r3,-2568(fp)
   2c5b8:	e0bdec17 	ldw	r2,-2128(fp)
   2c5bc:	1880022e 	bgeu	r3,r2,2c5c8 <secp256k1_scalar_mul_512+0x1f44>
   2c5c0:	00c00044 	movi	r3,1
   2c5c4:	00000106 	br	2c5cc <secp256k1_scalar_mul_512+0x1f48>
   2c5c8:	0007883a 	mov	r3,zero
   2c5cc:	e0bdeb17 	ldw	r2,-2132(fp)
   2c5d0:	10c5883a 	add	r2,r2,r3
   2c5d4:	e0bdeb15 	stw	r2,-2132(fp)
   2c5d8:	e0fd7f17 	ldw	r3,-2564(fp)
   2c5dc:	e0bdeb17 	ldw	r2,-2132(fp)
   2c5e0:	1885883a 	add	r2,r3,r2
   2c5e4:	e0bd7f15 	stw	r2,-2564(fp)
   2c5e8:	e0fd7f17 	ldw	r3,-2564(fp)
   2c5ec:	e0bdeb17 	ldw	r2,-2132(fp)
   2c5f0:	1880022e 	bgeu	r3,r2,2c5fc <secp256k1_scalar_mul_512+0x1f78>
   2c5f4:	00c00044 	movi	r3,1
   2c5f8:	00000106 	br	2c600 <secp256k1_scalar_mul_512+0x1f7c>
   2c5fc:	0007883a 	mov	r3,zero
   2c600:	e0bd8017 	ldw	r2,-2560(fp)
   2c604:	10c5883a 	add	r2,r2,r3
   2c608:	e0bd8015 	stw	r2,-2560(fp)
   2c60c:	e0fd7f17 	ldw	r3,-2564(fp)
   2c610:	e0bdeb17 	ldw	r2,-2132(fp)
   2c614:	1885803a 	cmpltu	r2,r3,r2
   2c618:	10803fcc 	andi	r2,r2,255
   2c61c:	10001126 	beq	r2,zero,2c664 <secp256k1_scalar_mul_512+0x1fe0>
   2c620:	e0bd8017 	ldw	r2,-2560(fp)
   2c624:	1005003a 	cmpeq	r2,r2,zero
   2c628:	10803fcc 	andi	r2,r2,255
   2c62c:	10000d26 	beq	r2,zero,2c664 <secp256k1_scalar_mul_512+0x1fe0>
   2c630:	d0a01617 	ldw	r2,-32680(gp)
   2c634:	10c00317 	ldw	r3,12(r2)
   2c638:	008001b4 	movhi	r2,6
   2c63c:	10b02604 	addi	r2,r2,-16232
   2c640:	d8800015 	stw	r2,0(sp)
   2c644:	01c08404 	movi	r7,528
   2c648:	018001b4 	movhi	r6,6
   2c64c:	31af9204 	addi	r6,r6,-16824
   2c650:	014001b4 	movhi	r5,6
   2c654:	296b3804 	addi	r5,r5,-21280
   2c658:	1809883a 	mov	r4,r3
   2c65c:	00452600 	call	45260 <fprintf>
   2c660:	00450340 	call	45034 <abort>
    muladd(a->d[6], b->d[0]);
   2c664:	e0be8217 	ldw	r2,-1528(fp)
   2c668:	10800617 	ldw	r2,24(r2)
   2c66c:	e0bf1a15 	stw	r2,-920(fp)
   2c670:	e03f1b15 	stw	zero,-916(fp)
   2c674:	e0be8317 	ldw	r2,-1524(fp)
   2c678:	10800017 	ldw	r2,0(r2)
   2c67c:	e0bf1c15 	stw	r2,-912(fp)
   2c680:	e03f1d15 	stw	zero,-908(fp)
   2c684:	e1bf1c17 	ldw	r6,-912(fp)
   2c688:	e1ff1d17 	ldw	r7,-908(fp)
   2c68c:	e13f1a17 	ldw	r4,-920(fp)
   2c690:	e17f1b17 	ldw	r5,-916(fp)
   2c694:	00429400 	call	42940 <__muldi3>
   2c698:	1009883a 	mov	r4,r2
   2c69c:	180b883a 	mov	r5,r3
   2c6a0:	e13ded15 	stw	r4,-2124(fp)
   2c6a4:	e17dee15 	stw	r5,-2120(fp)
   2c6a8:	e0bdee17 	ldw	r2,-2120(fp)
   2c6ac:	1004d83a 	srl	r2,r2,zero
   2c6b0:	e0bf1e15 	stw	r2,-904(fp)
   2c6b4:	e03f1f15 	stw	zero,-900(fp)
   2c6b8:	e0bf1e17 	ldw	r2,-904(fp)
   2c6bc:	e0bdef15 	stw	r2,-2116(fp)
   2c6c0:	e0bded17 	ldw	r2,-2124(fp)
   2c6c4:	e0bdf015 	stw	r2,-2112(fp)
   2c6c8:	e0fd7e17 	ldw	r3,-2568(fp)
   2c6cc:	e0bdf017 	ldw	r2,-2112(fp)
   2c6d0:	1885883a 	add	r2,r3,r2
   2c6d4:	e0bd7e15 	stw	r2,-2568(fp)
   2c6d8:	e0fd7e17 	ldw	r3,-2568(fp)
   2c6dc:	e0bdf017 	ldw	r2,-2112(fp)
   2c6e0:	1880022e 	bgeu	r3,r2,2c6ec <secp256k1_scalar_mul_512+0x2068>
   2c6e4:	00c00044 	movi	r3,1
   2c6e8:	00000106 	br	2c6f0 <secp256k1_scalar_mul_512+0x206c>
   2c6ec:	0007883a 	mov	r3,zero
   2c6f0:	e0bdef17 	ldw	r2,-2116(fp)
   2c6f4:	10c5883a 	add	r2,r2,r3
   2c6f8:	e0bdef15 	stw	r2,-2116(fp)
   2c6fc:	e0fd7f17 	ldw	r3,-2564(fp)
   2c700:	e0bdef17 	ldw	r2,-2116(fp)
   2c704:	1885883a 	add	r2,r3,r2
   2c708:	e0bd7f15 	stw	r2,-2564(fp)
   2c70c:	e0fd7f17 	ldw	r3,-2564(fp)
   2c710:	e0bdef17 	ldw	r2,-2116(fp)
   2c714:	1880022e 	bgeu	r3,r2,2c720 <secp256k1_scalar_mul_512+0x209c>
   2c718:	00c00044 	movi	r3,1
   2c71c:	00000106 	br	2c724 <secp256k1_scalar_mul_512+0x20a0>
   2c720:	0007883a 	mov	r3,zero
   2c724:	e0bd8017 	ldw	r2,-2560(fp)
   2c728:	10c5883a 	add	r2,r2,r3
   2c72c:	e0bd8015 	stw	r2,-2560(fp)
   2c730:	e0fd7f17 	ldw	r3,-2564(fp)
   2c734:	e0bdef17 	ldw	r2,-2116(fp)
   2c738:	1885803a 	cmpltu	r2,r3,r2
   2c73c:	10803fcc 	andi	r2,r2,255
   2c740:	10001126 	beq	r2,zero,2c788 <secp256k1_scalar_mul_512+0x2104>
   2c744:	e0bd8017 	ldw	r2,-2560(fp)
   2c748:	1005003a 	cmpeq	r2,r2,zero
   2c74c:	10803fcc 	andi	r2,r2,255
   2c750:	10000d26 	beq	r2,zero,2c788 <secp256k1_scalar_mul_512+0x2104>
   2c754:	d0a01617 	ldw	r2,-32680(gp)
   2c758:	10c00317 	ldw	r3,12(r2)
   2c75c:	008001b4 	movhi	r2,6
   2c760:	10b02604 	addi	r2,r2,-16232
   2c764:	d8800015 	stw	r2,0(sp)
   2c768:	01c08444 	movi	r7,529
   2c76c:	018001b4 	movhi	r6,6
   2c770:	31af9204 	addi	r6,r6,-16824
   2c774:	014001b4 	movhi	r5,6
   2c778:	296b3804 	addi	r5,r5,-21280
   2c77c:	1809883a 	mov	r4,r3
   2c780:	00452600 	call	45260 <fprintf>
   2c784:	00450340 	call	45034 <abort>
    extract(l[6]);
   2c788:	e0be8117 	ldw	r2,-1532(fp)
   2c78c:	10c00604 	addi	r3,r2,24
   2c790:	e0bd7e17 	ldw	r2,-2568(fp)
   2c794:	18800015 	stw	r2,0(r3)
   2c798:	e0bd7f17 	ldw	r2,-2564(fp)
   2c79c:	e0bd7e15 	stw	r2,-2568(fp)
   2c7a0:	e0bd8017 	ldw	r2,-2560(fp)
   2c7a4:	e0bd7f15 	stw	r2,-2564(fp)
   2c7a8:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[7]);
   2c7ac:	e0be8217 	ldw	r2,-1528(fp)
   2c7b0:	10800017 	ldw	r2,0(r2)
   2c7b4:	e0bf2015 	stw	r2,-896(fp)
   2c7b8:	e03f2115 	stw	zero,-892(fp)
   2c7bc:	e0be8317 	ldw	r2,-1524(fp)
   2c7c0:	10800717 	ldw	r2,28(r2)
   2c7c4:	e0bf2215 	stw	r2,-888(fp)
   2c7c8:	e03f2315 	stw	zero,-884(fp)
   2c7cc:	e1bf2217 	ldw	r6,-888(fp)
   2c7d0:	e1ff2317 	ldw	r7,-884(fp)
   2c7d4:	e13f2017 	ldw	r4,-896(fp)
   2c7d8:	e17f2117 	ldw	r5,-892(fp)
   2c7dc:	00429400 	call	42940 <__muldi3>
   2c7e0:	1009883a 	mov	r4,r2
   2c7e4:	180b883a 	mov	r5,r3
   2c7e8:	e13df115 	stw	r4,-2108(fp)
   2c7ec:	e17df215 	stw	r5,-2104(fp)
   2c7f0:	e0bdf217 	ldw	r2,-2104(fp)
   2c7f4:	1004d83a 	srl	r2,r2,zero
   2c7f8:	e0bf2415 	stw	r2,-880(fp)
   2c7fc:	e03f2515 	stw	zero,-876(fp)
   2c800:	e0bf2417 	ldw	r2,-880(fp)
   2c804:	e0bdf315 	stw	r2,-2100(fp)
   2c808:	e0bdf117 	ldw	r2,-2108(fp)
   2c80c:	e0bdf415 	stw	r2,-2096(fp)
   2c810:	e0fd7e17 	ldw	r3,-2568(fp)
   2c814:	e0bdf417 	ldw	r2,-2096(fp)
   2c818:	1885883a 	add	r2,r3,r2
   2c81c:	e0bd7e15 	stw	r2,-2568(fp)
   2c820:	e0fd7e17 	ldw	r3,-2568(fp)
   2c824:	e0bdf417 	ldw	r2,-2096(fp)
   2c828:	1880022e 	bgeu	r3,r2,2c834 <secp256k1_scalar_mul_512+0x21b0>
   2c82c:	00c00044 	movi	r3,1
   2c830:	00000106 	br	2c838 <secp256k1_scalar_mul_512+0x21b4>
   2c834:	0007883a 	mov	r3,zero
   2c838:	e0bdf317 	ldw	r2,-2100(fp)
   2c83c:	10c5883a 	add	r2,r2,r3
   2c840:	e0bdf315 	stw	r2,-2100(fp)
   2c844:	e0fd7f17 	ldw	r3,-2564(fp)
   2c848:	e0bdf317 	ldw	r2,-2100(fp)
   2c84c:	1885883a 	add	r2,r3,r2
   2c850:	e0bd7f15 	stw	r2,-2564(fp)
   2c854:	e0fd7f17 	ldw	r3,-2564(fp)
   2c858:	e0bdf317 	ldw	r2,-2100(fp)
   2c85c:	1880022e 	bgeu	r3,r2,2c868 <secp256k1_scalar_mul_512+0x21e4>
   2c860:	00c00044 	movi	r3,1
   2c864:	00000106 	br	2c86c <secp256k1_scalar_mul_512+0x21e8>
   2c868:	0007883a 	mov	r3,zero
   2c86c:	e0bd8017 	ldw	r2,-2560(fp)
   2c870:	10c5883a 	add	r2,r2,r3
   2c874:	e0bd8015 	stw	r2,-2560(fp)
   2c878:	e0fd7f17 	ldw	r3,-2564(fp)
   2c87c:	e0bdf317 	ldw	r2,-2100(fp)
   2c880:	1885803a 	cmpltu	r2,r3,r2
   2c884:	10803fcc 	andi	r2,r2,255
   2c888:	10001126 	beq	r2,zero,2c8d0 <secp256k1_scalar_mul_512+0x224c>
   2c88c:	e0bd8017 	ldw	r2,-2560(fp)
   2c890:	1005003a 	cmpeq	r2,r2,zero
   2c894:	10803fcc 	andi	r2,r2,255
   2c898:	10000d26 	beq	r2,zero,2c8d0 <secp256k1_scalar_mul_512+0x224c>
   2c89c:	d0a01617 	ldw	r2,-32680(gp)
   2c8a0:	10c00317 	ldw	r3,12(r2)
   2c8a4:	008001b4 	movhi	r2,6
   2c8a8:	10b02604 	addi	r2,r2,-16232
   2c8ac:	d8800015 	stw	r2,0(sp)
   2c8b0:	01c084c4 	movi	r7,531
   2c8b4:	018001b4 	movhi	r6,6
   2c8b8:	31af9204 	addi	r6,r6,-16824
   2c8bc:	014001b4 	movhi	r5,6
   2c8c0:	296b3804 	addi	r5,r5,-21280
   2c8c4:	1809883a 	mov	r4,r3
   2c8c8:	00452600 	call	45260 <fprintf>
   2c8cc:	00450340 	call	45034 <abort>
    muladd(a->d[1], b->d[6]);
   2c8d0:	e0be8217 	ldw	r2,-1528(fp)
   2c8d4:	10800117 	ldw	r2,4(r2)
   2c8d8:	e0bf2615 	stw	r2,-872(fp)
   2c8dc:	e03f2715 	stw	zero,-868(fp)
   2c8e0:	e0be8317 	ldw	r2,-1524(fp)
   2c8e4:	10800617 	ldw	r2,24(r2)
   2c8e8:	e0bf2815 	stw	r2,-864(fp)
   2c8ec:	e03f2915 	stw	zero,-860(fp)
   2c8f0:	e1bf2817 	ldw	r6,-864(fp)
   2c8f4:	e1ff2917 	ldw	r7,-860(fp)
   2c8f8:	e13f2617 	ldw	r4,-872(fp)
   2c8fc:	e17f2717 	ldw	r5,-868(fp)
   2c900:	00429400 	call	42940 <__muldi3>
   2c904:	1009883a 	mov	r4,r2
   2c908:	180b883a 	mov	r5,r3
   2c90c:	e13df515 	stw	r4,-2092(fp)
   2c910:	e17df615 	stw	r5,-2088(fp)
   2c914:	e0bdf617 	ldw	r2,-2088(fp)
   2c918:	1004d83a 	srl	r2,r2,zero
   2c91c:	e0bf2a15 	stw	r2,-856(fp)
   2c920:	e03f2b15 	stw	zero,-852(fp)
   2c924:	e0bf2a17 	ldw	r2,-856(fp)
   2c928:	e0bdf715 	stw	r2,-2084(fp)
   2c92c:	e0bdf517 	ldw	r2,-2092(fp)
   2c930:	e0bdf815 	stw	r2,-2080(fp)
   2c934:	e0fd7e17 	ldw	r3,-2568(fp)
   2c938:	e0bdf817 	ldw	r2,-2080(fp)
   2c93c:	1885883a 	add	r2,r3,r2
   2c940:	e0bd7e15 	stw	r2,-2568(fp)
   2c944:	e0fd7e17 	ldw	r3,-2568(fp)
   2c948:	e0bdf817 	ldw	r2,-2080(fp)
   2c94c:	1880022e 	bgeu	r3,r2,2c958 <secp256k1_scalar_mul_512+0x22d4>
   2c950:	00c00044 	movi	r3,1
   2c954:	00000106 	br	2c95c <secp256k1_scalar_mul_512+0x22d8>
   2c958:	0007883a 	mov	r3,zero
   2c95c:	e0bdf717 	ldw	r2,-2084(fp)
   2c960:	10c5883a 	add	r2,r2,r3
   2c964:	e0bdf715 	stw	r2,-2084(fp)
   2c968:	e0fd7f17 	ldw	r3,-2564(fp)
   2c96c:	e0bdf717 	ldw	r2,-2084(fp)
   2c970:	1885883a 	add	r2,r3,r2
   2c974:	e0bd7f15 	stw	r2,-2564(fp)
   2c978:	e0fd7f17 	ldw	r3,-2564(fp)
   2c97c:	e0bdf717 	ldw	r2,-2084(fp)
   2c980:	1880022e 	bgeu	r3,r2,2c98c <secp256k1_scalar_mul_512+0x2308>
   2c984:	00c00044 	movi	r3,1
   2c988:	00000106 	br	2c990 <secp256k1_scalar_mul_512+0x230c>
   2c98c:	0007883a 	mov	r3,zero
   2c990:	e0bd8017 	ldw	r2,-2560(fp)
   2c994:	10c5883a 	add	r2,r2,r3
   2c998:	e0bd8015 	stw	r2,-2560(fp)
   2c99c:	e0fd7f17 	ldw	r3,-2564(fp)
   2c9a0:	e0bdf717 	ldw	r2,-2084(fp)
   2c9a4:	1885803a 	cmpltu	r2,r3,r2
   2c9a8:	10803fcc 	andi	r2,r2,255
   2c9ac:	10001126 	beq	r2,zero,2c9f4 <secp256k1_scalar_mul_512+0x2370>
   2c9b0:	e0bd8017 	ldw	r2,-2560(fp)
   2c9b4:	1005003a 	cmpeq	r2,r2,zero
   2c9b8:	10803fcc 	andi	r2,r2,255
   2c9bc:	10000d26 	beq	r2,zero,2c9f4 <secp256k1_scalar_mul_512+0x2370>
   2c9c0:	d0a01617 	ldw	r2,-32680(gp)
   2c9c4:	10c00317 	ldw	r3,12(r2)
   2c9c8:	008001b4 	movhi	r2,6
   2c9cc:	10b02604 	addi	r2,r2,-16232
   2c9d0:	d8800015 	stw	r2,0(sp)
   2c9d4:	01c08504 	movi	r7,532
   2c9d8:	018001b4 	movhi	r6,6
   2c9dc:	31af9204 	addi	r6,r6,-16824
   2c9e0:	014001b4 	movhi	r5,6
   2c9e4:	296b3804 	addi	r5,r5,-21280
   2c9e8:	1809883a 	mov	r4,r3
   2c9ec:	00452600 	call	45260 <fprintf>
   2c9f0:	00450340 	call	45034 <abort>
    muladd(a->d[2], b->d[5]);
   2c9f4:	e0be8217 	ldw	r2,-1528(fp)
   2c9f8:	10800217 	ldw	r2,8(r2)
   2c9fc:	e0bf2c15 	stw	r2,-848(fp)
   2ca00:	e03f2d15 	stw	zero,-844(fp)
   2ca04:	e0be8317 	ldw	r2,-1524(fp)
   2ca08:	10800517 	ldw	r2,20(r2)
   2ca0c:	e0bf2e15 	stw	r2,-840(fp)
   2ca10:	e03f2f15 	stw	zero,-836(fp)
   2ca14:	e1bf2e17 	ldw	r6,-840(fp)
   2ca18:	e1ff2f17 	ldw	r7,-836(fp)
   2ca1c:	e13f2c17 	ldw	r4,-848(fp)
   2ca20:	e17f2d17 	ldw	r5,-844(fp)
   2ca24:	00429400 	call	42940 <__muldi3>
   2ca28:	1009883a 	mov	r4,r2
   2ca2c:	180b883a 	mov	r5,r3
   2ca30:	e13df915 	stw	r4,-2076(fp)
   2ca34:	e17dfa15 	stw	r5,-2072(fp)
   2ca38:	e0bdfa17 	ldw	r2,-2072(fp)
   2ca3c:	1004d83a 	srl	r2,r2,zero
   2ca40:	e0bf3015 	stw	r2,-832(fp)
   2ca44:	e03f3115 	stw	zero,-828(fp)
   2ca48:	e0bf3017 	ldw	r2,-832(fp)
   2ca4c:	e0bdfb15 	stw	r2,-2068(fp)
   2ca50:	e0bdf917 	ldw	r2,-2076(fp)
   2ca54:	e0bdfc15 	stw	r2,-2064(fp)
   2ca58:	e0fd7e17 	ldw	r3,-2568(fp)
   2ca5c:	e0bdfc17 	ldw	r2,-2064(fp)
   2ca60:	1885883a 	add	r2,r3,r2
   2ca64:	e0bd7e15 	stw	r2,-2568(fp)
   2ca68:	e0fd7e17 	ldw	r3,-2568(fp)
   2ca6c:	e0bdfc17 	ldw	r2,-2064(fp)
   2ca70:	1880022e 	bgeu	r3,r2,2ca7c <secp256k1_scalar_mul_512+0x23f8>
   2ca74:	00c00044 	movi	r3,1
   2ca78:	00000106 	br	2ca80 <secp256k1_scalar_mul_512+0x23fc>
   2ca7c:	0007883a 	mov	r3,zero
   2ca80:	e0bdfb17 	ldw	r2,-2068(fp)
   2ca84:	10c5883a 	add	r2,r2,r3
   2ca88:	e0bdfb15 	stw	r2,-2068(fp)
   2ca8c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ca90:	e0bdfb17 	ldw	r2,-2068(fp)
   2ca94:	1885883a 	add	r2,r3,r2
   2ca98:	e0bd7f15 	stw	r2,-2564(fp)
   2ca9c:	e0fd7f17 	ldw	r3,-2564(fp)
   2caa0:	e0bdfb17 	ldw	r2,-2068(fp)
   2caa4:	1880022e 	bgeu	r3,r2,2cab0 <secp256k1_scalar_mul_512+0x242c>
   2caa8:	00c00044 	movi	r3,1
   2caac:	00000106 	br	2cab4 <secp256k1_scalar_mul_512+0x2430>
   2cab0:	0007883a 	mov	r3,zero
   2cab4:	e0bd8017 	ldw	r2,-2560(fp)
   2cab8:	10c5883a 	add	r2,r2,r3
   2cabc:	e0bd8015 	stw	r2,-2560(fp)
   2cac0:	e0fd7f17 	ldw	r3,-2564(fp)
   2cac4:	e0bdfb17 	ldw	r2,-2068(fp)
   2cac8:	1885803a 	cmpltu	r2,r3,r2
   2cacc:	10803fcc 	andi	r2,r2,255
   2cad0:	10001126 	beq	r2,zero,2cb18 <secp256k1_scalar_mul_512+0x2494>
   2cad4:	e0bd8017 	ldw	r2,-2560(fp)
   2cad8:	1005003a 	cmpeq	r2,r2,zero
   2cadc:	10803fcc 	andi	r2,r2,255
   2cae0:	10000d26 	beq	r2,zero,2cb18 <secp256k1_scalar_mul_512+0x2494>
   2cae4:	d0a01617 	ldw	r2,-32680(gp)
   2cae8:	10c00317 	ldw	r3,12(r2)
   2caec:	008001b4 	movhi	r2,6
   2caf0:	10b02604 	addi	r2,r2,-16232
   2caf4:	d8800015 	stw	r2,0(sp)
   2caf8:	01c08544 	movi	r7,533
   2cafc:	018001b4 	movhi	r6,6
   2cb00:	31af9204 	addi	r6,r6,-16824
   2cb04:	014001b4 	movhi	r5,6
   2cb08:	296b3804 	addi	r5,r5,-21280
   2cb0c:	1809883a 	mov	r4,r3
   2cb10:	00452600 	call	45260 <fprintf>
   2cb14:	00450340 	call	45034 <abort>
    muladd(a->d[3], b->d[4]);
   2cb18:	e0be8217 	ldw	r2,-1528(fp)
   2cb1c:	10800317 	ldw	r2,12(r2)
   2cb20:	e0bf3215 	stw	r2,-824(fp)
   2cb24:	e03f3315 	stw	zero,-820(fp)
   2cb28:	e0be8317 	ldw	r2,-1524(fp)
   2cb2c:	10800417 	ldw	r2,16(r2)
   2cb30:	e0bf3415 	stw	r2,-816(fp)
   2cb34:	e03f3515 	stw	zero,-812(fp)
   2cb38:	e1bf3417 	ldw	r6,-816(fp)
   2cb3c:	e1ff3517 	ldw	r7,-812(fp)
   2cb40:	e13f3217 	ldw	r4,-824(fp)
   2cb44:	e17f3317 	ldw	r5,-820(fp)
   2cb48:	00429400 	call	42940 <__muldi3>
   2cb4c:	1009883a 	mov	r4,r2
   2cb50:	180b883a 	mov	r5,r3
   2cb54:	e13dfd15 	stw	r4,-2060(fp)
   2cb58:	e17dfe15 	stw	r5,-2056(fp)
   2cb5c:	e0bdfe17 	ldw	r2,-2056(fp)
   2cb60:	1004d83a 	srl	r2,r2,zero
   2cb64:	e0bf3615 	stw	r2,-808(fp)
   2cb68:	e03f3715 	stw	zero,-804(fp)
   2cb6c:	e0bf3617 	ldw	r2,-808(fp)
   2cb70:	e0bdff15 	stw	r2,-2052(fp)
   2cb74:	e0bdfd17 	ldw	r2,-2060(fp)
   2cb78:	e0be0015 	stw	r2,-2048(fp)
   2cb7c:	e0fd7e17 	ldw	r3,-2568(fp)
   2cb80:	e0be0017 	ldw	r2,-2048(fp)
   2cb84:	1885883a 	add	r2,r3,r2
   2cb88:	e0bd7e15 	stw	r2,-2568(fp)
   2cb8c:	e0fd7e17 	ldw	r3,-2568(fp)
   2cb90:	e0be0017 	ldw	r2,-2048(fp)
   2cb94:	1880022e 	bgeu	r3,r2,2cba0 <secp256k1_scalar_mul_512+0x251c>
   2cb98:	00c00044 	movi	r3,1
   2cb9c:	00000106 	br	2cba4 <secp256k1_scalar_mul_512+0x2520>
   2cba0:	0007883a 	mov	r3,zero
   2cba4:	e0bdff17 	ldw	r2,-2052(fp)
   2cba8:	10c5883a 	add	r2,r2,r3
   2cbac:	e0bdff15 	stw	r2,-2052(fp)
   2cbb0:	e0fd7f17 	ldw	r3,-2564(fp)
   2cbb4:	e0bdff17 	ldw	r2,-2052(fp)
   2cbb8:	1885883a 	add	r2,r3,r2
   2cbbc:	e0bd7f15 	stw	r2,-2564(fp)
   2cbc0:	e0fd7f17 	ldw	r3,-2564(fp)
   2cbc4:	e0bdff17 	ldw	r2,-2052(fp)
   2cbc8:	1880022e 	bgeu	r3,r2,2cbd4 <secp256k1_scalar_mul_512+0x2550>
   2cbcc:	00c00044 	movi	r3,1
   2cbd0:	00000106 	br	2cbd8 <secp256k1_scalar_mul_512+0x2554>
   2cbd4:	0007883a 	mov	r3,zero
   2cbd8:	e0bd8017 	ldw	r2,-2560(fp)
   2cbdc:	10c5883a 	add	r2,r2,r3
   2cbe0:	e0bd8015 	stw	r2,-2560(fp)
   2cbe4:	e0fd7f17 	ldw	r3,-2564(fp)
   2cbe8:	e0bdff17 	ldw	r2,-2052(fp)
   2cbec:	1885803a 	cmpltu	r2,r3,r2
   2cbf0:	10803fcc 	andi	r2,r2,255
   2cbf4:	10001126 	beq	r2,zero,2cc3c <secp256k1_scalar_mul_512+0x25b8>
   2cbf8:	e0bd8017 	ldw	r2,-2560(fp)
   2cbfc:	1005003a 	cmpeq	r2,r2,zero
   2cc00:	10803fcc 	andi	r2,r2,255
   2cc04:	10000d26 	beq	r2,zero,2cc3c <secp256k1_scalar_mul_512+0x25b8>
   2cc08:	d0a01617 	ldw	r2,-32680(gp)
   2cc0c:	10c00317 	ldw	r3,12(r2)
   2cc10:	008001b4 	movhi	r2,6
   2cc14:	10b02604 	addi	r2,r2,-16232
   2cc18:	d8800015 	stw	r2,0(sp)
   2cc1c:	01c08584 	movi	r7,534
   2cc20:	018001b4 	movhi	r6,6
   2cc24:	31af9204 	addi	r6,r6,-16824
   2cc28:	014001b4 	movhi	r5,6
   2cc2c:	296b3804 	addi	r5,r5,-21280
   2cc30:	1809883a 	mov	r4,r3
   2cc34:	00452600 	call	45260 <fprintf>
   2cc38:	00450340 	call	45034 <abort>
    muladd(a->d[4], b->d[3]);
   2cc3c:	e0be8217 	ldw	r2,-1528(fp)
   2cc40:	10800417 	ldw	r2,16(r2)
   2cc44:	e0bf3815 	stw	r2,-800(fp)
   2cc48:	e03f3915 	stw	zero,-796(fp)
   2cc4c:	e0be8317 	ldw	r2,-1524(fp)
   2cc50:	10800317 	ldw	r2,12(r2)
   2cc54:	e0bf3a15 	stw	r2,-792(fp)
   2cc58:	e03f3b15 	stw	zero,-788(fp)
   2cc5c:	e1bf3a17 	ldw	r6,-792(fp)
   2cc60:	e1ff3b17 	ldw	r7,-788(fp)
   2cc64:	e13f3817 	ldw	r4,-800(fp)
   2cc68:	e17f3917 	ldw	r5,-796(fp)
   2cc6c:	00429400 	call	42940 <__muldi3>
   2cc70:	1009883a 	mov	r4,r2
   2cc74:	180b883a 	mov	r5,r3
   2cc78:	e13e0115 	stw	r4,-2044(fp)
   2cc7c:	e17e0215 	stw	r5,-2040(fp)
   2cc80:	e0be0217 	ldw	r2,-2040(fp)
   2cc84:	1004d83a 	srl	r2,r2,zero
   2cc88:	e0bf3c15 	stw	r2,-784(fp)
   2cc8c:	e03f3d15 	stw	zero,-780(fp)
   2cc90:	e0bf3c17 	ldw	r2,-784(fp)
   2cc94:	e0be0315 	stw	r2,-2036(fp)
   2cc98:	e0be0117 	ldw	r2,-2044(fp)
   2cc9c:	e0be0415 	stw	r2,-2032(fp)
   2cca0:	e0fd7e17 	ldw	r3,-2568(fp)
   2cca4:	e0be0417 	ldw	r2,-2032(fp)
   2cca8:	1885883a 	add	r2,r3,r2
   2ccac:	e0bd7e15 	stw	r2,-2568(fp)
   2ccb0:	e0fd7e17 	ldw	r3,-2568(fp)
   2ccb4:	e0be0417 	ldw	r2,-2032(fp)
   2ccb8:	1880022e 	bgeu	r3,r2,2ccc4 <secp256k1_scalar_mul_512+0x2640>
   2ccbc:	00c00044 	movi	r3,1
   2ccc0:	00000106 	br	2ccc8 <secp256k1_scalar_mul_512+0x2644>
   2ccc4:	0007883a 	mov	r3,zero
   2ccc8:	e0be0317 	ldw	r2,-2036(fp)
   2cccc:	10c5883a 	add	r2,r2,r3
   2ccd0:	e0be0315 	stw	r2,-2036(fp)
   2ccd4:	e0fd7f17 	ldw	r3,-2564(fp)
   2ccd8:	e0be0317 	ldw	r2,-2036(fp)
   2ccdc:	1885883a 	add	r2,r3,r2
   2cce0:	e0bd7f15 	stw	r2,-2564(fp)
   2cce4:	e0fd7f17 	ldw	r3,-2564(fp)
   2cce8:	e0be0317 	ldw	r2,-2036(fp)
   2ccec:	1880022e 	bgeu	r3,r2,2ccf8 <secp256k1_scalar_mul_512+0x2674>
   2ccf0:	00c00044 	movi	r3,1
   2ccf4:	00000106 	br	2ccfc <secp256k1_scalar_mul_512+0x2678>
   2ccf8:	0007883a 	mov	r3,zero
   2ccfc:	e0bd8017 	ldw	r2,-2560(fp)
   2cd00:	10c5883a 	add	r2,r2,r3
   2cd04:	e0bd8015 	stw	r2,-2560(fp)
   2cd08:	e0fd7f17 	ldw	r3,-2564(fp)
   2cd0c:	e0be0317 	ldw	r2,-2036(fp)
   2cd10:	1885803a 	cmpltu	r2,r3,r2
   2cd14:	10803fcc 	andi	r2,r2,255
   2cd18:	10001126 	beq	r2,zero,2cd60 <secp256k1_scalar_mul_512+0x26dc>
   2cd1c:	e0bd8017 	ldw	r2,-2560(fp)
   2cd20:	1005003a 	cmpeq	r2,r2,zero
   2cd24:	10803fcc 	andi	r2,r2,255
   2cd28:	10000d26 	beq	r2,zero,2cd60 <secp256k1_scalar_mul_512+0x26dc>
   2cd2c:	d0a01617 	ldw	r2,-32680(gp)
   2cd30:	10c00317 	ldw	r3,12(r2)
   2cd34:	008001b4 	movhi	r2,6
   2cd38:	10b02604 	addi	r2,r2,-16232
   2cd3c:	d8800015 	stw	r2,0(sp)
   2cd40:	01c085c4 	movi	r7,535
   2cd44:	018001b4 	movhi	r6,6
   2cd48:	31af9204 	addi	r6,r6,-16824
   2cd4c:	014001b4 	movhi	r5,6
   2cd50:	296b3804 	addi	r5,r5,-21280
   2cd54:	1809883a 	mov	r4,r3
   2cd58:	00452600 	call	45260 <fprintf>
   2cd5c:	00450340 	call	45034 <abort>
    muladd(a->d[5], b->d[2]);
   2cd60:	e0be8217 	ldw	r2,-1528(fp)
   2cd64:	10800517 	ldw	r2,20(r2)
   2cd68:	e0bf3e15 	stw	r2,-776(fp)
   2cd6c:	e03f3f15 	stw	zero,-772(fp)
   2cd70:	e0be8317 	ldw	r2,-1524(fp)
   2cd74:	10800217 	ldw	r2,8(r2)
   2cd78:	e0bf4015 	stw	r2,-768(fp)
   2cd7c:	e03f4115 	stw	zero,-764(fp)
   2cd80:	e1bf4017 	ldw	r6,-768(fp)
   2cd84:	e1ff4117 	ldw	r7,-764(fp)
   2cd88:	e13f3e17 	ldw	r4,-776(fp)
   2cd8c:	e17f3f17 	ldw	r5,-772(fp)
   2cd90:	00429400 	call	42940 <__muldi3>
   2cd94:	1009883a 	mov	r4,r2
   2cd98:	180b883a 	mov	r5,r3
   2cd9c:	e13e0515 	stw	r4,-2028(fp)
   2cda0:	e17e0615 	stw	r5,-2024(fp)
   2cda4:	e0be0617 	ldw	r2,-2024(fp)
   2cda8:	1004d83a 	srl	r2,r2,zero
   2cdac:	e0bf4215 	stw	r2,-760(fp)
   2cdb0:	e03f4315 	stw	zero,-756(fp)
   2cdb4:	e0bf4217 	ldw	r2,-760(fp)
   2cdb8:	e0be0715 	stw	r2,-2020(fp)
   2cdbc:	e0be0517 	ldw	r2,-2028(fp)
   2cdc0:	e0be0815 	stw	r2,-2016(fp)
   2cdc4:	e0fd7e17 	ldw	r3,-2568(fp)
   2cdc8:	e0be0817 	ldw	r2,-2016(fp)
   2cdcc:	1885883a 	add	r2,r3,r2
   2cdd0:	e0bd7e15 	stw	r2,-2568(fp)
   2cdd4:	e0fd7e17 	ldw	r3,-2568(fp)
   2cdd8:	e0be0817 	ldw	r2,-2016(fp)
   2cddc:	1880022e 	bgeu	r3,r2,2cde8 <secp256k1_scalar_mul_512+0x2764>
   2cde0:	00c00044 	movi	r3,1
   2cde4:	00000106 	br	2cdec <secp256k1_scalar_mul_512+0x2768>
   2cde8:	0007883a 	mov	r3,zero
   2cdec:	e0be0717 	ldw	r2,-2020(fp)
   2cdf0:	10c5883a 	add	r2,r2,r3
   2cdf4:	e0be0715 	stw	r2,-2020(fp)
   2cdf8:	e0fd7f17 	ldw	r3,-2564(fp)
   2cdfc:	e0be0717 	ldw	r2,-2020(fp)
   2ce00:	1885883a 	add	r2,r3,r2
   2ce04:	e0bd7f15 	stw	r2,-2564(fp)
   2ce08:	e0fd7f17 	ldw	r3,-2564(fp)
   2ce0c:	e0be0717 	ldw	r2,-2020(fp)
   2ce10:	1880022e 	bgeu	r3,r2,2ce1c <secp256k1_scalar_mul_512+0x2798>
   2ce14:	00c00044 	movi	r3,1
   2ce18:	00000106 	br	2ce20 <secp256k1_scalar_mul_512+0x279c>
   2ce1c:	0007883a 	mov	r3,zero
   2ce20:	e0bd8017 	ldw	r2,-2560(fp)
   2ce24:	10c5883a 	add	r2,r2,r3
   2ce28:	e0bd8015 	stw	r2,-2560(fp)
   2ce2c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ce30:	e0be0717 	ldw	r2,-2020(fp)
   2ce34:	1885803a 	cmpltu	r2,r3,r2
   2ce38:	10803fcc 	andi	r2,r2,255
   2ce3c:	10001126 	beq	r2,zero,2ce84 <secp256k1_scalar_mul_512+0x2800>
   2ce40:	e0bd8017 	ldw	r2,-2560(fp)
   2ce44:	1005003a 	cmpeq	r2,r2,zero
   2ce48:	10803fcc 	andi	r2,r2,255
   2ce4c:	10000d26 	beq	r2,zero,2ce84 <secp256k1_scalar_mul_512+0x2800>
   2ce50:	d0a01617 	ldw	r2,-32680(gp)
   2ce54:	10c00317 	ldw	r3,12(r2)
   2ce58:	008001b4 	movhi	r2,6
   2ce5c:	10b02604 	addi	r2,r2,-16232
   2ce60:	d8800015 	stw	r2,0(sp)
   2ce64:	01c08604 	movi	r7,536
   2ce68:	018001b4 	movhi	r6,6
   2ce6c:	31af9204 	addi	r6,r6,-16824
   2ce70:	014001b4 	movhi	r5,6
   2ce74:	296b3804 	addi	r5,r5,-21280
   2ce78:	1809883a 	mov	r4,r3
   2ce7c:	00452600 	call	45260 <fprintf>
   2ce80:	00450340 	call	45034 <abort>
    muladd(a->d[6], b->d[1]);
   2ce84:	e0be8217 	ldw	r2,-1528(fp)
   2ce88:	10800617 	ldw	r2,24(r2)
   2ce8c:	e0bf4415 	stw	r2,-752(fp)
   2ce90:	e03f4515 	stw	zero,-748(fp)
   2ce94:	e0be8317 	ldw	r2,-1524(fp)
   2ce98:	10800117 	ldw	r2,4(r2)
   2ce9c:	e0bf4615 	stw	r2,-744(fp)
   2cea0:	e03f4715 	stw	zero,-740(fp)
   2cea4:	e1bf4617 	ldw	r6,-744(fp)
   2cea8:	e1ff4717 	ldw	r7,-740(fp)
   2ceac:	e13f4417 	ldw	r4,-752(fp)
   2ceb0:	e17f4517 	ldw	r5,-748(fp)
   2ceb4:	00429400 	call	42940 <__muldi3>
   2ceb8:	1009883a 	mov	r4,r2
   2cebc:	180b883a 	mov	r5,r3
   2cec0:	e13e0915 	stw	r4,-2012(fp)
   2cec4:	e17e0a15 	stw	r5,-2008(fp)
   2cec8:	e0be0a17 	ldw	r2,-2008(fp)
   2cecc:	1004d83a 	srl	r2,r2,zero
   2ced0:	e0bf4815 	stw	r2,-736(fp)
   2ced4:	e03f4915 	stw	zero,-732(fp)
   2ced8:	e0bf4817 	ldw	r2,-736(fp)
   2cedc:	e0be0b15 	stw	r2,-2004(fp)
   2cee0:	e0be0917 	ldw	r2,-2012(fp)
   2cee4:	e0be0c15 	stw	r2,-2000(fp)
   2cee8:	e0fd7e17 	ldw	r3,-2568(fp)
   2ceec:	e0be0c17 	ldw	r2,-2000(fp)
   2cef0:	1885883a 	add	r2,r3,r2
   2cef4:	e0bd7e15 	stw	r2,-2568(fp)
   2cef8:	e0fd7e17 	ldw	r3,-2568(fp)
   2cefc:	e0be0c17 	ldw	r2,-2000(fp)
   2cf00:	1880022e 	bgeu	r3,r2,2cf0c <secp256k1_scalar_mul_512+0x2888>
   2cf04:	00c00044 	movi	r3,1
   2cf08:	00000106 	br	2cf10 <secp256k1_scalar_mul_512+0x288c>
   2cf0c:	0007883a 	mov	r3,zero
   2cf10:	e0be0b17 	ldw	r2,-2004(fp)
   2cf14:	10c5883a 	add	r2,r2,r3
   2cf18:	e0be0b15 	stw	r2,-2004(fp)
   2cf1c:	e0fd7f17 	ldw	r3,-2564(fp)
   2cf20:	e0be0b17 	ldw	r2,-2004(fp)
   2cf24:	1885883a 	add	r2,r3,r2
   2cf28:	e0bd7f15 	stw	r2,-2564(fp)
   2cf2c:	e0fd7f17 	ldw	r3,-2564(fp)
   2cf30:	e0be0b17 	ldw	r2,-2004(fp)
   2cf34:	1880022e 	bgeu	r3,r2,2cf40 <secp256k1_scalar_mul_512+0x28bc>
   2cf38:	00c00044 	movi	r3,1
   2cf3c:	00000106 	br	2cf44 <secp256k1_scalar_mul_512+0x28c0>
   2cf40:	0007883a 	mov	r3,zero
   2cf44:	e0bd8017 	ldw	r2,-2560(fp)
   2cf48:	10c5883a 	add	r2,r2,r3
   2cf4c:	e0bd8015 	stw	r2,-2560(fp)
   2cf50:	e0fd7f17 	ldw	r3,-2564(fp)
   2cf54:	e0be0b17 	ldw	r2,-2004(fp)
   2cf58:	1885803a 	cmpltu	r2,r3,r2
   2cf5c:	10803fcc 	andi	r2,r2,255
   2cf60:	10001126 	beq	r2,zero,2cfa8 <secp256k1_scalar_mul_512+0x2924>
   2cf64:	e0bd8017 	ldw	r2,-2560(fp)
   2cf68:	1005003a 	cmpeq	r2,r2,zero
   2cf6c:	10803fcc 	andi	r2,r2,255
   2cf70:	10000d26 	beq	r2,zero,2cfa8 <secp256k1_scalar_mul_512+0x2924>
   2cf74:	d0a01617 	ldw	r2,-32680(gp)
   2cf78:	10c00317 	ldw	r3,12(r2)
   2cf7c:	008001b4 	movhi	r2,6
   2cf80:	10b02604 	addi	r2,r2,-16232
   2cf84:	d8800015 	stw	r2,0(sp)
   2cf88:	01c08644 	movi	r7,537
   2cf8c:	018001b4 	movhi	r6,6
   2cf90:	31af9204 	addi	r6,r6,-16824
   2cf94:	014001b4 	movhi	r5,6
   2cf98:	296b3804 	addi	r5,r5,-21280
   2cf9c:	1809883a 	mov	r4,r3
   2cfa0:	00452600 	call	45260 <fprintf>
   2cfa4:	00450340 	call	45034 <abort>
    muladd(a->d[7], b->d[0]);
   2cfa8:	e0be8217 	ldw	r2,-1528(fp)
   2cfac:	10800717 	ldw	r2,28(r2)
   2cfb0:	e0bf4a15 	stw	r2,-728(fp)
   2cfb4:	e03f4b15 	stw	zero,-724(fp)
   2cfb8:	e0be8317 	ldw	r2,-1524(fp)
   2cfbc:	10800017 	ldw	r2,0(r2)
   2cfc0:	e0bf4c15 	stw	r2,-720(fp)
   2cfc4:	e03f4d15 	stw	zero,-716(fp)
   2cfc8:	e1bf4c17 	ldw	r6,-720(fp)
   2cfcc:	e1ff4d17 	ldw	r7,-716(fp)
   2cfd0:	e13f4a17 	ldw	r4,-728(fp)
   2cfd4:	e17f4b17 	ldw	r5,-724(fp)
   2cfd8:	00429400 	call	42940 <__muldi3>
   2cfdc:	1009883a 	mov	r4,r2
   2cfe0:	180b883a 	mov	r5,r3
   2cfe4:	e13e0d15 	stw	r4,-1996(fp)
   2cfe8:	e17e0e15 	stw	r5,-1992(fp)
   2cfec:	e0be0e17 	ldw	r2,-1992(fp)
   2cff0:	1004d83a 	srl	r2,r2,zero
   2cff4:	e0bf4e15 	stw	r2,-712(fp)
   2cff8:	e03f4f15 	stw	zero,-708(fp)
   2cffc:	e0bf4e17 	ldw	r2,-712(fp)
   2d000:	e0be0f15 	stw	r2,-1988(fp)
   2d004:	e0be0d17 	ldw	r2,-1996(fp)
   2d008:	e0be1015 	stw	r2,-1984(fp)
   2d00c:	e0fd7e17 	ldw	r3,-2568(fp)
   2d010:	e0be1017 	ldw	r2,-1984(fp)
   2d014:	1885883a 	add	r2,r3,r2
   2d018:	e0bd7e15 	stw	r2,-2568(fp)
   2d01c:	e0fd7e17 	ldw	r3,-2568(fp)
   2d020:	e0be1017 	ldw	r2,-1984(fp)
   2d024:	1880022e 	bgeu	r3,r2,2d030 <secp256k1_scalar_mul_512+0x29ac>
   2d028:	00c00044 	movi	r3,1
   2d02c:	00000106 	br	2d034 <secp256k1_scalar_mul_512+0x29b0>
   2d030:	0007883a 	mov	r3,zero
   2d034:	e0be0f17 	ldw	r2,-1988(fp)
   2d038:	10c5883a 	add	r2,r2,r3
   2d03c:	e0be0f15 	stw	r2,-1988(fp)
   2d040:	e0fd7f17 	ldw	r3,-2564(fp)
   2d044:	e0be0f17 	ldw	r2,-1988(fp)
   2d048:	1885883a 	add	r2,r3,r2
   2d04c:	e0bd7f15 	stw	r2,-2564(fp)
   2d050:	e0fd7f17 	ldw	r3,-2564(fp)
   2d054:	e0be0f17 	ldw	r2,-1988(fp)
   2d058:	1880022e 	bgeu	r3,r2,2d064 <secp256k1_scalar_mul_512+0x29e0>
   2d05c:	00c00044 	movi	r3,1
   2d060:	00000106 	br	2d068 <secp256k1_scalar_mul_512+0x29e4>
   2d064:	0007883a 	mov	r3,zero
   2d068:	e0bd8017 	ldw	r2,-2560(fp)
   2d06c:	10c5883a 	add	r2,r2,r3
   2d070:	e0bd8015 	stw	r2,-2560(fp)
   2d074:	e0fd7f17 	ldw	r3,-2564(fp)
   2d078:	e0be0f17 	ldw	r2,-1988(fp)
   2d07c:	1885803a 	cmpltu	r2,r3,r2
   2d080:	10803fcc 	andi	r2,r2,255
   2d084:	10001126 	beq	r2,zero,2d0cc <secp256k1_scalar_mul_512+0x2a48>
   2d088:	e0bd8017 	ldw	r2,-2560(fp)
   2d08c:	1005003a 	cmpeq	r2,r2,zero
   2d090:	10803fcc 	andi	r2,r2,255
   2d094:	10000d26 	beq	r2,zero,2d0cc <secp256k1_scalar_mul_512+0x2a48>
   2d098:	d0a01617 	ldw	r2,-32680(gp)
   2d09c:	10c00317 	ldw	r3,12(r2)
   2d0a0:	008001b4 	movhi	r2,6
   2d0a4:	10b02604 	addi	r2,r2,-16232
   2d0a8:	d8800015 	stw	r2,0(sp)
   2d0ac:	01c08684 	movi	r7,538
   2d0b0:	018001b4 	movhi	r6,6
   2d0b4:	31af9204 	addi	r6,r6,-16824
   2d0b8:	014001b4 	movhi	r5,6
   2d0bc:	296b3804 	addi	r5,r5,-21280
   2d0c0:	1809883a 	mov	r4,r3
   2d0c4:	00452600 	call	45260 <fprintf>
   2d0c8:	00450340 	call	45034 <abort>
    extract(l[7]);
   2d0cc:	e0be8117 	ldw	r2,-1532(fp)
   2d0d0:	10c00704 	addi	r3,r2,28
   2d0d4:	e0bd7e17 	ldw	r2,-2568(fp)
   2d0d8:	18800015 	stw	r2,0(r3)
   2d0dc:	e0bd7f17 	ldw	r2,-2564(fp)
   2d0e0:	e0bd7e15 	stw	r2,-2568(fp)
   2d0e4:	e0bd8017 	ldw	r2,-2560(fp)
   2d0e8:	e0bd7f15 	stw	r2,-2564(fp)
   2d0ec:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[1], b->d[7]);
   2d0f0:	e0be8217 	ldw	r2,-1528(fp)
   2d0f4:	10800117 	ldw	r2,4(r2)
   2d0f8:	e0bf5015 	stw	r2,-704(fp)
   2d0fc:	e03f5115 	stw	zero,-700(fp)
   2d100:	e0be8317 	ldw	r2,-1524(fp)
   2d104:	10800717 	ldw	r2,28(r2)
   2d108:	e0bf5215 	stw	r2,-696(fp)
   2d10c:	e03f5315 	stw	zero,-692(fp)
   2d110:	e1bf5217 	ldw	r6,-696(fp)
   2d114:	e1ff5317 	ldw	r7,-692(fp)
   2d118:	e13f5017 	ldw	r4,-704(fp)
   2d11c:	e17f5117 	ldw	r5,-700(fp)
   2d120:	00429400 	call	42940 <__muldi3>
   2d124:	1009883a 	mov	r4,r2
   2d128:	180b883a 	mov	r5,r3
   2d12c:	e13e1115 	stw	r4,-1980(fp)
   2d130:	e17e1215 	stw	r5,-1976(fp)
   2d134:	e0be1217 	ldw	r2,-1976(fp)
   2d138:	1004d83a 	srl	r2,r2,zero
   2d13c:	e0bf5415 	stw	r2,-688(fp)
   2d140:	e03f5515 	stw	zero,-684(fp)
   2d144:	e0bf5417 	ldw	r2,-688(fp)
   2d148:	e0be1315 	stw	r2,-1972(fp)
   2d14c:	e0be1117 	ldw	r2,-1980(fp)
   2d150:	e0be1415 	stw	r2,-1968(fp)
   2d154:	e0fd7e17 	ldw	r3,-2568(fp)
   2d158:	e0be1417 	ldw	r2,-1968(fp)
   2d15c:	1885883a 	add	r2,r3,r2
   2d160:	e0bd7e15 	stw	r2,-2568(fp)
   2d164:	e0fd7e17 	ldw	r3,-2568(fp)
   2d168:	e0be1417 	ldw	r2,-1968(fp)
   2d16c:	1880022e 	bgeu	r3,r2,2d178 <secp256k1_scalar_mul_512+0x2af4>
   2d170:	00c00044 	movi	r3,1
   2d174:	00000106 	br	2d17c <secp256k1_scalar_mul_512+0x2af8>
   2d178:	0007883a 	mov	r3,zero
   2d17c:	e0be1317 	ldw	r2,-1972(fp)
   2d180:	10c5883a 	add	r2,r2,r3
   2d184:	e0be1315 	stw	r2,-1972(fp)
   2d188:	e0fd7f17 	ldw	r3,-2564(fp)
   2d18c:	e0be1317 	ldw	r2,-1972(fp)
   2d190:	1885883a 	add	r2,r3,r2
   2d194:	e0bd7f15 	stw	r2,-2564(fp)
   2d198:	e0fd7f17 	ldw	r3,-2564(fp)
   2d19c:	e0be1317 	ldw	r2,-1972(fp)
   2d1a0:	1880022e 	bgeu	r3,r2,2d1ac <secp256k1_scalar_mul_512+0x2b28>
   2d1a4:	00c00044 	movi	r3,1
   2d1a8:	00000106 	br	2d1b0 <secp256k1_scalar_mul_512+0x2b2c>
   2d1ac:	0007883a 	mov	r3,zero
   2d1b0:	e0bd8017 	ldw	r2,-2560(fp)
   2d1b4:	10c5883a 	add	r2,r2,r3
   2d1b8:	e0bd8015 	stw	r2,-2560(fp)
   2d1bc:	e0fd7f17 	ldw	r3,-2564(fp)
   2d1c0:	e0be1317 	ldw	r2,-1972(fp)
   2d1c4:	1885803a 	cmpltu	r2,r3,r2
   2d1c8:	10803fcc 	andi	r2,r2,255
   2d1cc:	10001126 	beq	r2,zero,2d214 <secp256k1_scalar_mul_512+0x2b90>
   2d1d0:	e0bd8017 	ldw	r2,-2560(fp)
   2d1d4:	1005003a 	cmpeq	r2,r2,zero
   2d1d8:	10803fcc 	andi	r2,r2,255
   2d1dc:	10000d26 	beq	r2,zero,2d214 <secp256k1_scalar_mul_512+0x2b90>
   2d1e0:	d0a01617 	ldw	r2,-32680(gp)
   2d1e4:	10c00317 	ldw	r3,12(r2)
   2d1e8:	008001b4 	movhi	r2,6
   2d1ec:	10b02604 	addi	r2,r2,-16232
   2d1f0:	d8800015 	stw	r2,0(sp)
   2d1f4:	01c08704 	movi	r7,540
   2d1f8:	018001b4 	movhi	r6,6
   2d1fc:	31af9204 	addi	r6,r6,-16824
   2d200:	014001b4 	movhi	r5,6
   2d204:	296b3804 	addi	r5,r5,-21280
   2d208:	1809883a 	mov	r4,r3
   2d20c:	00452600 	call	45260 <fprintf>
   2d210:	00450340 	call	45034 <abort>
    muladd(a->d[2], b->d[6]);
   2d214:	e0be8217 	ldw	r2,-1528(fp)
   2d218:	10800217 	ldw	r2,8(r2)
   2d21c:	e0bf5615 	stw	r2,-680(fp)
   2d220:	e03f5715 	stw	zero,-676(fp)
   2d224:	e0be8317 	ldw	r2,-1524(fp)
   2d228:	10800617 	ldw	r2,24(r2)
   2d22c:	e0bf5815 	stw	r2,-672(fp)
   2d230:	e03f5915 	stw	zero,-668(fp)
   2d234:	e1bf5817 	ldw	r6,-672(fp)
   2d238:	e1ff5917 	ldw	r7,-668(fp)
   2d23c:	e13f5617 	ldw	r4,-680(fp)
   2d240:	e17f5717 	ldw	r5,-676(fp)
   2d244:	00429400 	call	42940 <__muldi3>
   2d248:	1009883a 	mov	r4,r2
   2d24c:	180b883a 	mov	r5,r3
   2d250:	e13e1515 	stw	r4,-1964(fp)
   2d254:	e17e1615 	stw	r5,-1960(fp)
   2d258:	e0be1617 	ldw	r2,-1960(fp)
   2d25c:	1004d83a 	srl	r2,r2,zero
   2d260:	e0bf5a15 	stw	r2,-664(fp)
   2d264:	e03f5b15 	stw	zero,-660(fp)
   2d268:	e0bf5a17 	ldw	r2,-664(fp)
   2d26c:	e0be1715 	stw	r2,-1956(fp)
   2d270:	e0be1517 	ldw	r2,-1964(fp)
   2d274:	e0be1815 	stw	r2,-1952(fp)
   2d278:	e0fd7e17 	ldw	r3,-2568(fp)
   2d27c:	e0be1817 	ldw	r2,-1952(fp)
   2d280:	1885883a 	add	r2,r3,r2
   2d284:	e0bd7e15 	stw	r2,-2568(fp)
   2d288:	e0fd7e17 	ldw	r3,-2568(fp)
   2d28c:	e0be1817 	ldw	r2,-1952(fp)
   2d290:	1880022e 	bgeu	r3,r2,2d29c <secp256k1_scalar_mul_512+0x2c18>
   2d294:	00c00044 	movi	r3,1
   2d298:	00000106 	br	2d2a0 <secp256k1_scalar_mul_512+0x2c1c>
   2d29c:	0007883a 	mov	r3,zero
   2d2a0:	e0be1717 	ldw	r2,-1956(fp)
   2d2a4:	10c5883a 	add	r2,r2,r3
   2d2a8:	e0be1715 	stw	r2,-1956(fp)
   2d2ac:	e0fd7f17 	ldw	r3,-2564(fp)
   2d2b0:	e0be1717 	ldw	r2,-1956(fp)
   2d2b4:	1885883a 	add	r2,r3,r2
   2d2b8:	e0bd7f15 	stw	r2,-2564(fp)
   2d2bc:	e0fd7f17 	ldw	r3,-2564(fp)
   2d2c0:	e0be1717 	ldw	r2,-1956(fp)
   2d2c4:	1880022e 	bgeu	r3,r2,2d2d0 <secp256k1_scalar_mul_512+0x2c4c>
   2d2c8:	00c00044 	movi	r3,1
   2d2cc:	00000106 	br	2d2d4 <secp256k1_scalar_mul_512+0x2c50>
   2d2d0:	0007883a 	mov	r3,zero
   2d2d4:	e0bd8017 	ldw	r2,-2560(fp)
   2d2d8:	10c5883a 	add	r2,r2,r3
   2d2dc:	e0bd8015 	stw	r2,-2560(fp)
   2d2e0:	e0fd7f17 	ldw	r3,-2564(fp)
   2d2e4:	e0be1717 	ldw	r2,-1956(fp)
   2d2e8:	1885803a 	cmpltu	r2,r3,r2
   2d2ec:	10803fcc 	andi	r2,r2,255
   2d2f0:	10001126 	beq	r2,zero,2d338 <secp256k1_scalar_mul_512+0x2cb4>
   2d2f4:	e0bd8017 	ldw	r2,-2560(fp)
   2d2f8:	1005003a 	cmpeq	r2,r2,zero
   2d2fc:	10803fcc 	andi	r2,r2,255
   2d300:	10000d26 	beq	r2,zero,2d338 <secp256k1_scalar_mul_512+0x2cb4>
   2d304:	d0a01617 	ldw	r2,-32680(gp)
   2d308:	10c00317 	ldw	r3,12(r2)
   2d30c:	008001b4 	movhi	r2,6
   2d310:	10b02604 	addi	r2,r2,-16232
   2d314:	d8800015 	stw	r2,0(sp)
   2d318:	01c08744 	movi	r7,541
   2d31c:	018001b4 	movhi	r6,6
   2d320:	31af9204 	addi	r6,r6,-16824
   2d324:	014001b4 	movhi	r5,6
   2d328:	296b3804 	addi	r5,r5,-21280
   2d32c:	1809883a 	mov	r4,r3
   2d330:	00452600 	call	45260 <fprintf>
   2d334:	00450340 	call	45034 <abort>
    muladd(a->d[3], b->d[5]);
   2d338:	e0be8217 	ldw	r2,-1528(fp)
   2d33c:	10800317 	ldw	r2,12(r2)
   2d340:	e0bf5c15 	stw	r2,-656(fp)
   2d344:	e03f5d15 	stw	zero,-652(fp)
   2d348:	e0be8317 	ldw	r2,-1524(fp)
   2d34c:	10800517 	ldw	r2,20(r2)
   2d350:	e0bf5e15 	stw	r2,-648(fp)
   2d354:	e03f5f15 	stw	zero,-644(fp)
   2d358:	e1bf5e17 	ldw	r6,-648(fp)
   2d35c:	e1ff5f17 	ldw	r7,-644(fp)
   2d360:	e13f5c17 	ldw	r4,-656(fp)
   2d364:	e17f5d17 	ldw	r5,-652(fp)
   2d368:	00429400 	call	42940 <__muldi3>
   2d36c:	1009883a 	mov	r4,r2
   2d370:	180b883a 	mov	r5,r3
   2d374:	e13e1915 	stw	r4,-1948(fp)
   2d378:	e17e1a15 	stw	r5,-1944(fp)
   2d37c:	e0be1a17 	ldw	r2,-1944(fp)
   2d380:	1004d83a 	srl	r2,r2,zero
   2d384:	e0bf6015 	stw	r2,-640(fp)
   2d388:	e03f6115 	stw	zero,-636(fp)
   2d38c:	e0bf6017 	ldw	r2,-640(fp)
   2d390:	e0be1b15 	stw	r2,-1940(fp)
   2d394:	e0be1917 	ldw	r2,-1948(fp)
   2d398:	e0be1c15 	stw	r2,-1936(fp)
   2d39c:	e0fd7e17 	ldw	r3,-2568(fp)
   2d3a0:	e0be1c17 	ldw	r2,-1936(fp)
   2d3a4:	1885883a 	add	r2,r3,r2
   2d3a8:	e0bd7e15 	stw	r2,-2568(fp)
   2d3ac:	e0fd7e17 	ldw	r3,-2568(fp)
   2d3b0:	e0be1c17 	ldw	r2,-1936(fp)
   2d3b4:	1880022e 	bgeu	r3,r2,2d3c0 <secp256k1_scalar_mul_512+0x2d3c>
   2d3b8:	00c00044 	movi	r3,1
   2d3bc:	00000106 	br	2d3c4 <secp256k1_scalar_mul_512+0x2d40>
   2d3c0:	0007883a 	mov	r3,zero
   2d3c4:	e0be1b17 	ldw	r2,-1940(fp)
   2d3c8:	10c5883a 	add	r2,r2,r3
   2d3cc:	e0be1b15 	stw	r2,-1940(fp)
   2d3d0:	e0fd7f17 	ldw	r3,-2564(fp)
   2d3d4:	e0be1b17 	ldw	r2,-1940(fp)
   2d3d8:	1885883a 	add	r2,r3,r2
   2d3dc:	e0bd7f15 	stw	r2,-2564(fp)
   2d3e0:	e0fd7f17 	ldw	r3,-2564(fp)
   2d3e4:	e0be1b17 	ldw	r2,-1940(fp)
   2d3e8:	1880022e 	bgeu	r3,r2,2d3f4 <secp256k1_scalar_mul_512+0x2d70>
   2d3ec:	00c00044 	movi	r3,1
   2d3f0:	00000106 	br	2d3f8 <secp256k1_scalar_mul_512+0x2d74>
   2d3f4:	0007883a 	mov	r3,zero
   2d3f8:	e0bd8017 	ldw	r2,-2560(fp)
   2d3fc:	10c5883a 	add	r2,r2,r3
   2d400:	e0bd8015 	stw	r2,-2560(fp)
   2d404:	e0fd7f17 	ldw	r3,-2564(fp)
   2d408:	e0be1b17 	ldw	r2,-1940(fp)
   2d40c:	1885803a 	cmpltu	r2,r3,r2
   2d410:	10803fcc 	andi	r2,r2,255
   2d414:	10001126 	beq	r2,zero,2d45c <secp256k1_scalar_mul_512+0x2dd8>
   2d418:	e0bd8017 	ldw	r2,-2560(fp)
   2d41c:	1005003a 	cmpeq	r2,r2,zero
   2d420:	10803fcc 	andi	r2,r2,255
   2d424:	10000d26 	beq	r2,zero,2d45c <secp256k1_scalar_mul_512+0x2dd8>
   2d428:	d0a01617 	ldw	r2,-32680(gp)
   2d42c:	10c00317 	ldw	r3,12(r2)
   2d430:	008001b4 	movhi	r2,6
   2d434:	10b02604 	addi	r2,r2,-16232
   2d438:	d8800015 	stw	r2,0(sp)
   2d43c:	01c08784 	movi	r7,542
   2d440:	018001b4 	movhi	r6,6
   2d444:	31af9204 	addi	r6,r6,-16824
   2d448:	014001b4 	movhi	r5,6
   2d44c:	296b3804 	addi	r5,r5,-21280
   2d450:	1809883a 	mov	r4,r3
   2d454:	00452600 	call	45260 <fprintf>
   2d458:	00450340 	call	45034 <abort>
    muladd(a->d[4], b->d[4]);
   2d45c:	e0be8217 	ldw	r2,-1528(fp)
   2d460:	10800417 	ldw	r2,16(r2)
   2d464:	e0bf6215 	stw	r2,-632(fp)
   2d468:	e03f6315 	stw	zero,-628(fp)
   2d46c:	e0be8317 	ldw	r2,-1524(fp)
   2d470:	10800417 	ldw	r2,16(r2)
   2d474:	e0bf6415 	stw	r2,-624(fp)
   2d478:	e03f6515 	stw	zero,-620(fp)
   2d47c:	e1bf6417 	ldw	r6,-624(fp)
   2d480:	e1ff6517 	ldw	r7,-620(fp)
   2d484:	e13f6217 	ldw	r4,-632(fp)
   2d488:	e17f6317 	ldw	r5,-628(fp)
   2d48c:	00429400 	call	42940 <__muldi3>
   2d490:	1009883a 	mov	r4,r2
   2d494:	180b883a 	mov	r5,r3
   2d498:	e13e1d15 	stw	r4,-1932(fp)
   2d49c:	e17e1e15 	stw	r5,-1928(fp)
   2d4a0:	e0be1e17 	ldw	r2,-1928(fp)
   2d4a4:	1004d83a 	srl	r2,r2,zero
   2d4a8:	e0bf6615 	stw	r2,-616(fp)
   2d4ac:	e03f6715 	stw	zero,-612(fp)
   2d4b0:	e0bf6617 	ldw	r2,-616(fp)
   2d4b4:	e0be1f15 	stw	r2,-1924(fp)
   2d4b8:	e0be1d17 	ldw	r2,-1932(fp)
   2d4bc:	e0be2015 	stw	r2,-1920(fp)
   2d4c0:	e0fd7e17 	ldw	r3,-2568(fp)
   2d4c4:	e0be2017 	ldw	r2,-1920(fp)
   2d4c8:	1885883a 	add	r2,r3,r2
   2d4cc:	e0bd7e15 	stw	r2,-2568(fp)
   2d4d0:	e0fd7e17 	ldw	r3,-2568(fp)
   2d4d4:	e0be2017 	ldw	r2,-1920(fp)
   2d4d8:	1880022e 	bgeu	r3,r2,2d4e4 <secp256k1_scalar_mul_512+0x2e60>
   2d4dc:	00c00044 	movi	r3,1
   2d4e0:	00000106 	br	2d4e8 <secp256k1_scalar_mul_512+0x2e64>
   2d4e4:	0007883a 	mov	r3,zero
   2d4e8:	e0be1f17 	ldw	r2,-1924(fp)
   2d4ec:	10c5883a 	add	r2,r2,r3
   2d4f0:	e0be1f15 	stw	r2,-1924(fp)
   2d4f4:	e0fd7f17 	ldw	r3,-2564(fp)
   2d4f8:	e0be1f17 	ldw	r2,-1924(fp)
   2d4fc:	1885883a 	add	r2,r3,r2
   2d500:	e0bd7f15 	stw	r2,-2564(fp)
   2d504:	e0fd7f17 	ldw	r3,-2564(fp)
   2d508:	e0be1f17 	ldw	r2,-1924(fp)
   2d50c:	1880022e 	bgeu	r3,r2,2d518 <secp256k1_scalar_mul_512+0x2e94>
   2d510:	00c00044 	movi	r3,1
   2d514:	00000106 	br	2d51c <secp256k1_scalar_mul_512+0x2e98>
   2d518:	0007883a 	mov	r3,zero
   2d51c:	e0bd8017 	ldw	r2,-2560(fp)
   2d520:	10c5883a 	add	r2,r2,r3
   2d524:	e0bd8015 	stw	r2,-2560(fp)
   2d528:	e0fd7f17 	ldw	r3,-2564(fp)
   2d52c:	e0be1f17 	ldw	r2,-1924(fp)
   2d530:	1885803a 	cmpltu	r2,r3,r2
   2d534:	10803fcc 	andi	r2,r2,255
   2d538:	10001126 	beq	r2,zero,2d580 <secp256k1_scalar_mul_512+0x2efc>
   2d53c:	e0bd8017 	ldw	r2,-2560(fp)
   2d540:	1005003a 	cmpeq	r2,r2,zero
   2d544:	10803fcc 	andi	r2,r2,255
   2d548:	10000d26 	beq	r2,zero,2d580 <secp256k1_scalar_mul_512+0x2efc>
   2d54c:	d0a01617 	ldw	r2,-32680(gp)
   2d550:	10c00317 	ldw	r3,12(r2)
   2d554:	008001b4 	movhi	r2,6
   2d558:	10b02604 	addi	r2,r2,-16232
   2d55c:	d8800015 	stw	r2,0(sp)
   2d560:	01c087c4 	movi	r7,543
   2d564:	018001b4 	movhi	r6,6
   2d568:	31af9204 	addi	r6,r6,-16824
   2d56c:	014001b4 	movhi	r5,6
   2d570:	296b3804 	addi	r5,r5,-21280
   2d574:	1809883a 	mov	r4,r3
   2d578:	00452600 	call	45260 <fprintf>
   2d57c:	00450340 	call	45034 <abort>
    muladd(a->d[5], b->d[3]);
   2d580:	e0be8217 	ldw	r2,-1528(fp)
   2d584:	10800517 	ldw	r2,20(r2)
   2d588:	e0bf6815 	stw	r2,-608(fp)
   2d58c:	e03f6915 	stw	zero,-604(fp)
   2d590:	e0be8317 	ldw	r2,-1524(fp)
   2d594:	10800317 	ldw	r2,12(r2)
   2d598:	e0bf6a15 	stw	r2,-600(fp)
   2d59c:	e03f6b15 	stw	zero,-596(fp)
   2d5a0:	e1bf6a17 	ldw	r6,-600(fp)
   2d5a4:	e1ff6b17 	ldw	r7,-596(fp)
   2d5a8:	e13f6817 	ldw	r4,-608(fp)
   2d5ac:	e17f6917 	ldw	r5,-604(fp)
   2d5b0:	00429400 	call	42940 <__muldi3>
   2d5b4:	1009883a 	mov	r4,r2
   2d5b8:	180b883a 	mov	r5,r3
   2d5bc:	e13e2115 	stw	r4,-1916(fp)
   2d5c0:	e17e2215 	stw	r5,-1912(fp)
   2d5c4:	e0be2217 	ldw	r2,-1912(fp)
   2d5c8:	1004d83a 	srl	r2,r2,zero
   2d5cc:	e0bf6c15 	stw	r2,-592(fp)
   2d5d0:	e03f6d15 	stw	zero,-588(fp)
   2d5d4:	e0bf6c17 	ldw	r2,-592(fp)
   2d5d8:	e0be2315 	stw	r2,-1908(fp)
   2d5dc:	e0be2117 	ldw	r2,-1916(fp)
   2d5e0:	e0be2415 	stw	r2,-1904(fp)
   2d5e4:	e0fd7e17 	ldw	r3,-2568(fp)
   2d5e8:	e0be2417 	ldw	r2,-1904(fp)
   2d5ec:	1885883a 	add	r2,r3,r2
   2d5f0:	e0bd7e15 	stw	r2,-2568(fp)
   2d5f4:	e0fd7e17 	ldw	r3,-2568(fp)
   2d5f8:	e0be2417 	ldw	r2,-1904(fp)
   2d5fc:	1880022e 	bgeu	r3,r2,2d608 <secp256k1_scalar_mul_512+0x2f84>
   2d600:	00c00044 	movi	r3,1
   2d604:	00000106 	br	2d60c <secp256k1_scalar_mul_512+0x2f88>
   2d608:	0007883a 	mov	r3,zero
   2d60c:	e0be2317 	ldw	r2,-1908(fp)
   2d610:	10c5883a 	add	r2,r2,r3
   2d614:	e0be2315 	stw	r2,-1908(fp)
   2d618:	e0fd7f17 	ldw	r3,-2564(fp)
   2d61c:	e0be2317 	ldw	r2,-1908(fp)
   2d620:	1885883a 	add	r2,r3,r2
   2d624:	e0bd7f15 	stw	r2,-2564(fp)
   2d628:	e0fd7f17 	ldw	r3,-2564(fp)
   2d62c:	e0be2317 	ldw	r2,-1908(fp)
   2d630:	1880022e 	bgeu	r3,r2,2d63c <secp256k1_scalar_mul_512+0x2fb8>
   2d634:	00c00044 	movi	r3,1
   2d638:	00000106 	br	2d640 <secp256k1_scalar_mul_512+0x2fbc>
   2d63c:	0007883a 	mov	r3,zero
   2d640:	e0bd8017 	ldw	r2,-2560(fp)
   2d644:	10c5883a 	add	r2,r2,r3
   2d648:	e0bd8015 	stw	r2,-2560(fp)
   2d64c:	e0fd7f17 	ldw	r3,-2564(fp)
   2d650:	e0be2317 	ldw	r2,-1908(fp)
   2d654:	1885803a 	cmpltu	r2,r3,r2
   2d658:	10803fcc 	andi	r2,r2,255
   2d65c:	10001126 	beq	r2,zero,2d6a4 <secp256k1_scalar_mul_512+0x3020>
   2d660:	e0bd8017 	ldw	r2,-2560(fp)
   2d664:	1005003a 	cmpeq	r2,r2,zero
   2d668:	10803fcc 	andi	r2,r2,255
   2d66c:	10000d26 	beq	r2,zero,2d6a4 <secp256k1_scalar_mul_512+0x3020>
   2d670:	d0a01617 	ldw	r2,-32680(gp)
   2d674:	10c00317 	ldw	r3,12(r2)
   2d678:	008001b4 	movhi	r2,6
   2d67c:	10b02604 	addi	r2,r2,-16232
   2d680:	d8800015 	stw	r2,0(sp)
   2d684:	01c08804 	movi	r7,544
   2d688:	018001b4 	movhi	r6,6
   2d68c:	31af9204 	addi	r6,r6,-16824
   2d690:	014001b4 	movhi	r5,6
   2d694:	296b3804 	addi	r5,r5,-21280
   2d698:	1809883a 	mov	r4,r3
   2d69c:	00452600 	call	45260 <fprintf>
   2d6a0:	00450340 	call	45034 <abort>
    muladd(a->d[6], b->d[2]);
   2d6a4:	e0be8217 	ldw	r2,-1528(fp)
   2d6a8:	10800617 	ldw	r2,24(r2)
   2d6ac:	e0bf6e15 	stw	r2,-584(fp)
   2d6b0:	e03f6f15 	stw	zero,-580(fp)
   2d6b4:	e0be8317 	ldw	r2,-1524(fp)
   2d6b8:	10800217 	ldw	r2,8(r2)
   2d6bc:	e0bf7015 	stw	r2,-576(fp)
   2d6c0:	e03f7115 	stw	zero,-572(fp)
   2d6c4:	e1bf7017 	ldw	r6,-576(fp)
   2d6c8:	e1ff7117 	ldw	r7,-572(fp)
   2d6cc:	e13f6e17 	ldw	r4,-584(fp)
   2d6d0:	e17f6f17 	ldw	r5,-580(fp)
   2d6d4:	00429400 	call	42940 <__muldi3>
   2d6d8:	1009883a 	mov	r4,r2
   2d6dc:	180b883a 	mov	r5,r3
   2d6e0:	e13e2515 	stw	r4,-1900(fp)
   2d6e4:	e17e2615 	stw	r5,-1896(fp)
   2d6e8:	e0be2617 	ldw	r2,-1896(fp)
   2d6ec:	1004d83a 	srl	r2,r2,zero
   2d6f0:	e0bf7215 	stw	r2,-568(fp)
   2d6f4:	e03f7315 	stw	zero,-564(fp)
   2d6f8:	e0bf7217 	ldw	r2,-568(fp)
   2d6fc:	e0be2715 	stw	r2,-1892(fp)
   2d700:	e0be2517 	ldw	r2,-1900(fp)
   2d704:	e0be2815 	stw	r2,-1888(fp)
   2d708:	e0fd7e17 	ldw	r3,-2568(fp)
   2d70c:	e0be2817 	ldw	r2,-1888(fp)
   2d710:	1885883a 	add	r2,r3,r2
   2d714:	e0bd7e15 	stw	r2,-2568(fp)
   2d718:	e0fd7e17 	ldw	r3,-2568(fp)
   2d71c:	e0be2817 	ldw	r2,-1888(fp)
   2d720:	1880022e 	bgeu	r3,r2,2d72c <secp256k1_scalar_mul_512+0x30a8>
   2d724:	00c00044 	movi	r3,1
   2d728:	00000106 	br	2d730 <secp256k1_scalar_mul_512+0x30ac>
   2d72c:	0007883a 	mov	r3,zero
   2d730:	e0be2717 	ldw	r2,-1892(fp)
   2d734:	10c5883a 	add	r2,r2,r3
   2d738:	e0be2715 	stw	r2,-1892(fp)
   2d73c:	e0fd7f17 	ldw	r3,-2564(fp)
   2d740:	e0be2717 	ldw	r2,-1892(fp)
   2d744:	1885883a 	add	r2,r3,r2
   2d748:	e0bd7f15 	stw	r2,-2564(fp)
   2d74c:	e0fd7f17 	ldw	r3,-2564(fp)
   2d750:	e0be2717 	ldw	r2,-1892(fp)
   2d754:	1880022e 	bgeu	r3,r2,2d760 <secp256k1_scalar_mul_512+0x30dc>
   2d758:	00c00044 	movi	r3,1
   2d75c:	00000106 	br	2d764 <secp256k1_scalar_mul_512+0x30e0>
   2d760:	0007883a 	mov	r3,zero
   2d764:	e0bd8017 	ldw	r2,-2560(fp)
   2d768:	10c5883a 	add	r2,r2,r3
   2d76c:	e0bd8015 	stw	r2,-2560(fp)
   2d770:	e0fd7f17 	ldw	r3,-2564(fp)
   2d774:	e0be2717 	ldw	r2,-1892(fp)
   2d778:	1885803a 	cmpltu	r2,r3,r2
   2d77c:	10803fcc 	andi	r2,r2,255
   2d780:	10001126 	beq	r2,zero,2d7c8 <secp256k1_scalar_mul_512+0x3144>
   2d784:	e0bd8017 	ldw	r2,-2560(fp)
   2d788:	1005003a 	cmpeq	r2,r2,zero
   2d78c:	10803fcc 	andi	r2,r2,255
   2d790:	10000d26 	beq	r2,zero,2d7c8 <secp256k1_scalar_mul_512+0x3144>
   2d794:	d0a01617 	ldw	r2,-32680(gp)
   2d798:	10c00317 	ldw	r3,12(r2)
   2d79c:	008001b4 	movhi	r2,6
   2d7a0:	10b02604 	addi	r2,r2,-16232
   2d7a4:	d8800015 	stw	r2,0(sp)
   2d7a8:	01c08844 	movi	r7,545
   2d7ac:	018001b4 	movhi	r6,6
   2d7b0:	31af9204 	addi	r6,r6,-16824
   2d7b4:	014001b4 	movhi	r5,6
   2d7b8:	296b3804 	addi	r5,r5,-21280
   2d7bc:	1809883a 	mov	r4,r3
   2d7c0:	00452600 	call	45260 <fprintf>
   2d7c4:	00450340 	call	45034 <abort>
    muladd(a->d[7], b->d[1]);
   2d7c8:	e0be8217 	ldw	r2,-1528(fp)
   2d7cc:	10800717 	ldw	r2,28(r2)
   2d7d0:	e0bf7415 	stw	r2,-560(fp)
   2d7d4:	e03f7515 	stw	zero,-556(fp)
   2d7d8:	e0be8317 	ldw	r2,-1524(fp)
   2d7dc:	10800117 	ldw	r2,4(r2)
   2d7e0:	e0bf7615 	stw	r2,-552(fp)
   2d7e4:	e03f7715 	stw	zero,-548(fp)
   2d7e8:	e1bf7617 	ldw	r6,-552(fp)
   2d7ec:	e1ff7717 	ldw	r7,-548(fp)
   2d7f0:	e13f7417 	ldw	r4,-560(fp)
   2d7f4:	e17f7517 	ldw	r5,-556(fp)
   2d7f8:	00429400 	call	42940 <__muldi3>
   2d7fc:	1009883a 	mov	r4,r2
   2d800:	180b883a 	mov	r5,r3
   2d804:	e13e2915 	stw	r4,-1884(fp)
   2d808:	e17e2a15 	stw	r5,-1880(fp)
   2d80c:	e0be2a17 	ldw	r2,-1880(fp)
   2d810:	1004d83a 	srl	r2,r2,zero
   2d814:	e0bf7815 	stw	r2,-544(fp)
   2d818:	e03f7915 	stw	zero,-540(fp)
   2d81c:	e0bf7817 	ldw	r2,-544(fp)
   2d820:	e0be2b15 	stw	r2,-1876(fp)
   2d824:	e0be2917 	ldw	r2,-1884(fp)
   2d828:	e0be2c15 	stw	r2,-1872(fp)
   2d82c:	e0fd7e17 	ldw	r3,-2568(fp)
   2d830:	e0be2c17 	ldw	r2,-1872(fp)
   2d834:	1885883a 	add	r2,r3,r2
   2d838:	e0bd7e15 	stw	r2,-2568(fp)
   2d83c:	e0fd7e17 	ldw	r3,-2568(fp)
   2d840:	e0be2c17 	ldw	r2,-1872(fp)
   2d844:	1880022e 	bgeu	r3,r2,2d850 <secp256k1_scalar_mul_512+0x31cc>
   2d848:	00c00044 	movi	r3,1
   2d84c:	00000106 	br	2d854 <secp256k1_scalar_mul_512+0x31d0>
   2d850:	0007883a 	mov	r3,zero
   2d854:	e0be2b17 	ldw	r2,-1876(fp)
   2d858:	10c5883a 	add	r2,r2,r3
   2d85c:	e0be2b15 	stw	r2,-1876(fp)
   2d860:	e0fd7f17 	ldw	r3,-2564(fp)
   2d864:	e0be2b17 	ldw	r2,-1876(fp)
   2d868:	1885883a 	add	r2,r3,r2
   2d86c:	e0bd7f15 	stw	r2,-2564(fp)
   2d870:	e0fd7f17 	ldw	r3,-2564(fp)
   2d874:	e0be2b17 	ldw	r2,-1876(fp)
   2d878:	1880022e 	bgeu	r3,r2,2d884 <secp256k1_scalar_mul_512+0x3200>
   2d87c:	00c00044 	movi	r3,1
   2d880:	00000106 	br	2d888 <secp256k1_scalar_mul_512+0x3204>
   2d884:	0007883a 	mov	r3,zero
   2d888:	e0bd8017 	ldw	r2,-2560(fp)
   2d88c:	10c5883a 	add	r2,r2,r3
   2d890:	e0bd8015 	stw	r2,-2560(fp)
   2d894:	e0fd7f17 	ldw	r3,-2564(fp)
   2d898:	e0be2b17 	ldw	r2,-1876(fp)
   2d89c:	1885803a 	cmpltu	r2,r3,r2
   2d8a0:	10803fcc 	andi	r2,r2,255
   2d8a4:	10001126 	beq	r2,zero,2d8ec <secp256k1_scalar_mul_512+0x3268>
   2d8a8:	e0bd8017 	ldw	r2,-2560(fp)
   2d8ac:	1005003a 	cmpeq	r2,r2,zero
   2d8b0:	10803fcc 	andi	r2,r2,255
   2d8b4:	10000d26 	beq	r2,zero,2d8ec <secp256k1_scalar_mul_512+0x3268>
   2d8b8:	d0a01617 	ldw	r2,-32680(gp)
   2d8bc:	10c00317 	ldw	r3,12(r2)
   2d8c0:	008001b4 	movhi	r2,6
   2d8c4:	10b02604 	addi	r2,r2,-16232
   2d8c8:	d8800015 	stw	r2,0(sp)
   2d8cc:	01c08884 	movi	r7,546
   2d8d0:	018001b4 	movhi	r6,6
   2d8d4:	31af9204 	addi	r6,r6,-16824
   2d8d8:	014001b4 	movhi	r5,6
   2d8dc:	296b3804 	addi	r5,r5,-21280
   2d8e0:	1809883a 	mov	r4,r3
   2d8e4:	00452600 	call	45260 <fprintf>
   2d8e8:	00450340 	call	45034 <abort>
    extract(l[8]);
   2d8ec:	e0be8117 	ldw	r2,-1532(fp)
   2d8f0:	10c00804 	addi	r3,r2,32
   2d8f4:	e0bd7e17 	ldw	r2,-2568(fp)
   2d8f8:	18800015 	stw	r2,0(r3)
   2d8fc:	e0bd7f17 	ldw	r2,-2564(fp)
   2d900:	e0bd7e15 	stw	r2,-2568(fp)
   2d904:	e0bd8017 	ldw	r2,-2560(fp)
   2d908:	e0bd7f15 	stw	r2,-2564(fp)
   2d90c:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[2], b->d[7]);
   2d910:	e0be8217 	ldw	r2,-1528(fp)
   2d914:	10800217 	ldw	r2,8(r2)
   2d918:	e0bf7a15 	stw	r2,-536(fp)
   2d91c:	e03f7b15 	stw	zero,-532(fp)
   2d920:	e0be8317 	ldw	r2,-1524(fp)
   2d924:	10800717 	ldw	r2,28(r2)
   2d928:	e0bf7c15 	stw	r2,-528(fp)
   2d92c:	e03f7d15 	stw	zero,-524(fp)
   2d930:	e1bf7c17 	ldw	r6,-528(fp)
   2d934:	e1ff7d17 	ldw	r7,-524(fp)
   2d938:	e13f7a17 	ldw	r4,-536(fp)
   2d93c:	e17f7b17 	ldw	r5,-532(fp)
   2d940:	00429400 	call	42940 <__muldi3>
   2d944:	1009883a 	mov	r4,r2
   2d948:	180b883a 	mov	r5,r3
   2d94c:	e13e2d15 	stw	r4,-1868(fp)
   2d950:	e17e2e15 	stw	r5,-1864(fp)
   2d954:	e0be2e17 	ldw	r2,-1864(fp)
   2d958:	1004d83a 	srl	r2,r2,zero
   2d95c:	e0bf7e15 	stw	r2,-520(fp)
   2d960:	e03f7f15 	stw	zero,-516(fp)
   2d964:	e0bf7e17 	ldw	r2,-520(fp)
   2d968:	e0be2f15 	stw	r2,-1860(fp)
   2d96c:	e0be2d17 	ldw	r2,-1868(fp)
   2d970:	e0be3015 	stw	r2,-1856(fp)
   2d974:	e0fd7e17 	ldw	r3,-2568(fp)
   2d978:	e0be3017 	ldw	r2,-1856(fp)
   2d97c:	1885883a 	add	r2,r3,r2
   2d980:	e0bd7e15 	stw	r2,-2568(fp)
   2d984:	e0fd7e17 	ldw	r3,-2568(fp)
   2d988:	e0be3017 	ldw	r2,-1856(fp)
   2d98c:	1880022e 	bgeu	r3,r2,2d998 <secp256k1_scalar_mul_512+0x3314>
   2d990:	00c00044 	movi	r3,1
   2d994:	00000106 	br	2d99c <secp256k1_scalar_mul_512+0x3318>
   2d998:	0007883a 	mov	r3,zero
   2d99c:	e0be2f17 	ldw	r2,-1860(fp)
   2d9a0:	10c5883a 	add	r2,r2,r3
   2d9a4:	e0be2f15 	stw	r2,-1860(fp)
   2d9a8:	e0fd7f17 	ldw	r3,-2564(fp)
   2d9ac:	e0be2f17 	ldw	r2,-1860(fp)
   2d9b0:	1885883a 	add	r2,r3,r2
   2d9b4:	e0bd7f15 	stw	r2,-2564(fp)
   2d9b8:	e0fd7f17 	ldw	r3,-2564(fp)
   2d9bc:	e0be2f17 	ldw	r2,-1860(fp)
   2d9c0:	1880022e 	bgeu	r3,r2,2d9cc <secp256k1_scalar_mul_512+0x3348>
   2d9c4:	00c00044 	movi	r3,1
   2d9c8:	00000106 	br	2d9d0 <secp256k1_scalar_mul_512+0x334c>
   2d9cc:	0007883a 	mov	r3,zero
   2d9d0:	e0bd8017 	ldw	r2,-2560(fp)
   2d9d4:	10c5883a 	add	r2,r2,r3
   2d9d8:	e0bd8015 	stw	r2,-2560(fp)
   2d9dc:	e0fd7f17 	ldw	r3,-2564(fp)
   2d9e0:	e0be2f17 	ldw	r2,-1860(fp)
   2d9e4:	1885803a 	cmpltu	r2,r3,r2
   2d9e8:	10803fcc 	andi	r2,r2,255
   2d9ec:	10001126 	beq	r2,zero,2da34 <secp256k1_scalar_mul_512+0x33b0>
   2d9f0:	e0bd8017 	ldw	r2,-2560(fp)
   2d9f4:	1005003a 	cmpeq	r2,r2,zero
   2d9f8:	10803fcc 	andi	r2,r2,255
   2d9fc:	10000d26 	beq	r2,zero,2da34 <secp256k1_scalar_mul_512+0x33b0>
   2da00:	d0a01617 	ldw	r2,-32680(gp)
   2da04:	10c00317 	ldw	r3,12(r2)
   2da08:	008001b4 	movhi	r2,6
   2da0c:	10b02604 	addi	r2,r2,-16232
   2da10:	d8800015 	stw	r2,0(sp)
   2da14:	01c08904 	movi	r7,548
   2da18:	018001b4 	movhi	r6,6
   2da1c:	31af9204 	addi	r6,r6,-16824
   2da20:	014001b4 	movhi	r5,6
   2da24:	296b3804 	addi	r5,r5,-21280
   2da28:	1809883a 	mov	r4,r3
   2da2c:	00452600 	call	45260 <fprintf>
   2da30:	00450340 	call	45034 <abort>
    muladd(a->d[3], b->d[6]);
   2da34:	e0be8217 	ldw	r2,-1528(fp)
   2da38:	10800317 	ldw	r2,12(r2)
   2da3c:	e0bf8015 	stw	r2,-512(fp)
   2da40:	e03f8115 	stw	zero,-508(fp)
   2da44:	e0be8317 	ldw	r2,-1524(fp)
   2da48:	10800617 	ldw	r2,24(r2)
   2da4c:	e0bf8215 	stw	r2,-504(fp)
   2da50:	e03f8315 	stw	zero,-500(fp)
   2da54:	e1bf8217 	ldw	r6,-504(fp)
   2da58:	e1ff8317 	ldw	r7,-500(fp)
   2da5c:	e13f8017 	ldw	r4,-512(fp)
   2da60:	e17f8117 	ldw	r5,-508(fp)
   2da64:	00429400 	call	42940 <__muldi3>
   2da68:	1009883a 	mov	r4,r2
   2da6c:	180b883a 	mov	r5,r3
   2da70:	e13e3115 	stw	r4,-1852(fp)
   2da74:	e17e3215 	stw	r5,-1848(fp)
   2da78:	e0be3217 	ldw	r2,-1848(fp)
   2da7c:	1004d83a 	srl	r2,r2,zero
   2da80:	e0bf8415 	stw	r2,-496(fp)
   2da84:	e03f8515 	stw	zero,-492(fp)
   2da88:	e0bf8417 	ldw	r2,-496(fp)
   2da8c:	e0be3315 	stw	r2,-1844(fp)
   2da90:	e0be3117 	ldw	r2,-1852(fp)
   2da94:	e0be3415 	stw	r2,-1840(fp)
   2da98:	e0fd7e17 	ldw	r3,-2568(fp)
   2da9c:	e0be3417 	ldw	r2,-1840(fp)
   2daa0:	1885883a 	add	r2,r3,r2
   2daa4:	e0bd7e15 	stw	r2,-2568(fp)
   2daa8:	e0fd7e17 	ldw	r3,-2568(fp)
   2daac:	e0be3417 	ldw	r2,-1840(fp)
   2dab0:	1880022e 	bgeu	r3,r2,2dabc <secp256k1_scalar_mul_512+0x3438>
   2dab4:	00c00044 	movi	r3,1
   2dab8:	00000106 	br	2dac0 <secp256k1_scalar_mul_512+0x343c>
   2dabc:	0007883a 	mov	r3,zero
   2dac0:	e0be3317 	ldw	r2,-1844(fp)
   2dac4:	10c5883a 	add	r2,r2,r3
   2dac8:	e0be3315 	stw	r2,-1844(fp)
   2dacc:	e0fd7f17 	ldw	r3,-2564(fp)
   2dad0:	e0be3317 	ldw	r2,-1844(fp)
   2dad4:	1885883a 	add	r2,r3,r2
   2dad8:	e0bd7f15 	stw	r2,-2564(fp)
   2dadc:	e0fd7f17 	ldw	r3,-2564(fp)
   2dae0:	e0be3317 	ldw	r2,-1844(fp)
   2dae4:	1880022e 	bgeu	r3,r2,2daf0 <secp256k1_scalar_mul_512+0x346c>
   2dae8:	00c00044 	movi	r3,1
   2daec:	00000106 	br	2daf4 <secp256k1_scalar_mul_512+0x3470>
   2daf0:	0007883a 	mov	r3,zero
   2daf4:	e0bd8017 	ldw	r2,-2560(fp)
   2daf8:	10c5883a 	add	r2,r2,r3
   2dafc:	e0bd8015 	stw	r2,-2560(fp)
   2db00:	e0fd7f17 	ldw	r3,-2564(fp)
   2db04:	e0be3317 	ldw	r2,-1844(fp)
   2db08:	1885803a 	cmpltu	r2,r3,r2
   2db0c:	10803fcc 	andi	r2,r2,255
   2db10:	10001126 	beq	r2,zero,2db58 <secp256k1_scalar_mul_512+0x34d4>
   2db14:	e0bd8017 	ldw	r2,-2560(fp)
   2db18:	1005003a 	cmpeq	r2,r2,zero
   2db1c:	10803fcc 	andi	r2,r2,255
   2db20:	10000d26 	beq	r2,zero,2db58 <secp256k1_scalar_mul_512+0x34d4>
   2db24:	d0a01617 	ldw	r2,-32680(gp)
   2db28:	10c00317 	ldw	r3,12(r2)
   2db2c:	008001b4 	movhi	r2,6
   2db30:	10b02604 	addi	r2,r2,-16232
   2db34:	d8800015 	stw	r2,0(sp)
   2db38:	01c08944 	movi	r7,549
   2db3c:	018001b4 	movhi	r6,6
   2db40:	31af9204 	addi	r6,r6,-16824
   2db44:	014001b4 	movhi	r5,6
   2db48:	296b3804 	addi	r5,r5,-21280
   2db4c:	1809883a 	mov	r4,r3
   2db50:	00452600 	call	45260 <fprintf>
   2db54:	00450340 	call	45034 <abort>
    muladd(a->d[4], b->d[5]);
   2db58:	e0be8217 	ldw	r2,-1528(fp)
   2db5c:	10800417 	ldw	r2,16(r2)
   2db60:	e0bf8615 	stw	r2,-488(fp)
   2db64:	e03f8715 	stw	zero,-484(fp)
   2db68:	e0be8317 	ldw	r2,-1524(fp)
   2db6c:	10800517 	ldw	r2,20(r2)
   2db70:	e0bf8815 	stw	r2,-480(fp)
   2db74:	e03f8915 	stw	zero,-476(fp)
   2db78:	e1bf8817 	ldw	r6,-480(fp)
   2db7c:	e1ff8917 	ldw	r7,-476(fp)
   2db80:	e13f8617 	ldw	r4,-488(fp)
   2db84:	e17f8717 	ldw	r5,-484(fp)
   2db88:	00429400 	call	42940 <__muldi3>
   2db8c:	1009883a 	mov	r4,r2
   2db90:	180b883a 	mov	r5,r3
   2db94:	e13e3515 	stw	r4,-1836(fp)
   2db98:	e17e3615 	stw	r5,-1832(fp)
   2db9c:	e0be3617 	ldw	r2,-1832(fp)
   2dba0:	1004d83a 	srl	r2,r2,zero
   2dba4:	e0bf8a15 	stw	r2,-472(fp)
   2dba8:	e03f8b15 	stw	zero,-468(fp)
   2dbac:	e0bf8a17 	ldw	r2,-472(fp)
   2dbb0:	e0be3715 	stw	r2,-1828(fp)
   2dbb4:	e0be3517 	ldw	r2,-1836(fp)
   2dbb8:	e0be3815 	stw	r2,-1824(fp)
   2dbbc:	e0fd7e17 	ldw	r3,-2568(fp)
   2dbc0:	e0be3817 	ldw	r2,-1824(fp)
   2dbc4:	1885883a 	add	r2,r3,r2
   2dbc8:	e0bd7e15 	stw	r2,-2568(fp)
   2dbcc:	e0fd7e17 	ldw	r3,-2568(fp)
   2dbd0:	e0be3817 	ldw	r2,-1824(fp)
   2dbd4:	1880022e 	bgeu	r3,r2,2dbe0 <secp256k1_scalar_mul_512+0x355c>
   2dbd8:	00c00044 	movi	r3,1
   2dbdc:	00000106 	br	2dbe4 <secp256k1_scalar_mul_512+0x3560>
   2dbe0:	0007883a 	mov	r3,zero
   2dbe4:	e0be3717 	ldw	r2,-1828(fp)
   2dbe8:	10c5883a 	add	r2,r2,r3
   2dbec:	e0be3715 	stw	r2,-1828(fp)
   2dbf0:	e0fd7f17 	ldw	r3,-2564(fp)
   2dbf4:	e0be3717 	ldw	r2,-1828(fp)
   2dbf8:	1885883a 	add	r2,r3,r2
   2dbfc:	e0bd7f15 	stw	r2,-2564(fp)
   2dc00:	e0fd7f17 	ldw	r3,-2564(fp)
   2dc04:	e0be3717 	ldw	r2,-1828(fp)
   2dc08:	1880022e 	bgeu	r3,r2,2dc14 <secp256k1_scalar_mul_512+0x3590>
   2dc0c:	00c00044 	movi	r3,1
   2dc10:	00000106 	br	2dc18 <secp256k1_scalar_mul_512+0x3594>
   2dc14:	0007883a 	mov	r3,zero
   2dc18:	e0bd8017 	ldw	r2,-2560(fp)
   2dc1c:	10c5883a 	add	r2,r2,r3
   2dc20:	e0bd8015 	stw	r2,-2560(fp)
   2dc24:	e0fd7f17 	ldw	r3,-2564(fp)
   2dc28:	e0be3717 	ldw	r2,-1828(fp)
   2dc2c:	1885803a 	cmpltu	r2,r3,r2
   2dc30:	10803fcc 	andi	r2,r2,255
   2dc34:	10001126 	beq	r2,zero,2dc7c <secp256k1_scalar_mul_512+0x35f8>
   2dc38:	e0bd8017 	ldw	r2,-2560(fp)
   2dc3c:	1005003a 	cmpeq	r2,r2,zero
   2dc40:	10803fcc 	andi	r2,r2,255
   2dc44:	10000d26 	beq	r2,zero,2dc7c <secp256k1_scalar_mul_512+0x35f8>
   2dc48:	d0a01617 	ldw	r2,-32680(gp)
   2dc4c:	10c00317 	ldw	r3,12(r2)
   2dc50:	008001b4 	movhi	r2,6
   2dc54:	10b02604 	addi	r2,r2,-16232
   2dc58:	d8800015 	stw	r2,0(sp)
   2dc5c:	01c08984 	movi	r7,550
   2dc60:	018001b4 	movhi	r6,6
   2dc64:	31af9204 	addi	r6,r6,-16824
   2dc68:	014001b4 	movhi	r5,6
   2dc6c:	296b3804 	addi	r5,r5,-21280
   2dc70:	1809883a 	mov	r4,r3
   2dc74:	00452600 	call	45260 <fprintf>
   2dc78:	00450340 	call	45034 <abort>
    muladd(a->d[5], b->d[4]);
   2dc7c:	e0be8217 	ldw	r2,-1528(fp)
   2dc80:	10800517 	ldw	r2,20(r2)
   2dc84:	e0bf8c15 	stw	r2,-464(fp)
   2dc88:	e03f8d15 	stw	zero,-460(fp)
   2dc8c:	e0be8317 	ldw	r2,-1524(fp)
   2dc90:	10800417 	ldw	r2,16(r2)
   2dc94:	e0bf8e15 	stw	r2,-456(fp)
   2dc98:	e03f8f15 	stw	zero,-452(fp)
   2dc9c:	e1bf8e17 	ldw	r6,-456(fp)
   2dca0:	e1ff8f17 	ldw	r7,-452(fp)
   2dca4:	e13f8c17 	ldw	r4,-464(fp)
   2dca8:	e17f8d17 	ldw	r5,-460(fp)
   2dcac:	00429400 	call	42940 <__muldi3>
   2dcb0:	1009883a 	mov	r4,r2
   2dcb4:	180b883a 	mov	r5,r3
   2dcb8:	e13e3915 	stw	r4,-1820(fp)
   2dcbc:	e17e3a15 	stw	r5,-1816(fp)
   2dcc0:	e0be3a17 	ldw	r2,-1816(fp)
   2dcc4:	1004d83a 	srl	r2,r2,zero
   2dcc8:	e0bf9015 	stw	r2,-448(fp)
   2dccc:	e03f9115 	stw	zero,-444(fp)
   2dcd0:	e0bf9017 	ldw	r2,-448(fp)
   2dcd4:	e0be3b15 	stw	r2,-1812(fp)
   2dcd8:	e0be3917 	ldw	r2,-1820(fp)
   2dcdc:	e0be3c15 	stw	r2,-1808(fp)
   2dce0:	e0fd7e17 	ldw	r3,-2568(fp)
   2dce4:	e0be3c17 	ldw	r2,-1808(fp)
   2dce8:	1885883a 	add	r2,r3,r2
   2dcec:	e0bd7e15 	stw	r2,-2568(fp)
   2dcf0:	e0fd7e17 	ldw	r3,-2568(fp)
   2dcf4:	e0be3c17 	ldw	r2,-1808(fp)
   2dcf8:	1880022e 	bgeu	r3,r2,2dd04 <secp256k1_scalar_mul_512+0x3680>
   2dcfc:	00c00044 	movi	r3,1
   2dd00:	00000106 	br	2dd08 <secp256k1_scalar_mul_512+0x3684>
   2dd04:	0007883a 	mov	r3,zero
   2dd08:	e0be3b17 	ldw	r2,-1812(fp)
   2dd0c:	10c5883a 	add	r2,r2,r3
   2dd10:	e0be3b15 	stw	r2,-1812(fp)
   2dd14:	e0fd7f17 	ldw	r3,-2564(fp)
   2dd18:	e0be3b17 	ldw	r2,-1812(fp)
   2dd1c:	1885883a 	add	r2,r3,r2
   2dd20:	e0bd7f15 	stw	r2,-2564(fp)
   2dd24:	e0fd7f17 	ldw	r3,-2564(fp)
   2dd28:	e0be3b17 	ldw	r2,-1812(fp)
   2dd2c:	1880022e 	bgeu	r3,r2,2dd38 <secp256k1_scalar_mul_512+0x36b4>
   2dd30:	00c00044 	movi	r3,1
   2dd34:	00000106 	br	2dd3c <secp256k1_scalar_mul_512+0x36b8>
   2dd38:	0007883a 	mov	r3,zero
   2dd3c:	e0bd8017 	ldw	r2,-2560(fp)
   2dd40:	10c5883a 	add	r2,r2,r3
   2dd44:	e0bd8015 	stw	r2,-2560(fp)
   2dd48:	e0fd7f17 	ldw	r3,-2564(fp)
   2dd4c:	e0be3b17 	ldw	r2,-1812(fp)
   2dd50:	1885803a 	cmpltu	r2,r3,r2
   2dd54:	10803fcc 	andi	r2,r2,255
   2dd58:	10001126 	beq	r2,zero,2dda0 <secp256k1_scalar_mul_512+0x371c>
   2dd5c:	e0bd8017 	ldw	r2,-2560(fp)
   2dd60:	1005003a 	cmpeq	r2,r2,zero
   2dd64:	10803fcc 	andi	r2,r2,255
   2dd68:	10000d26 	beq	r2,zero,2dda0 <secp256k1_scalar_mul_512+0x371c>
   2dd6c:	d0a01617 	ldw	r2,-32680(gp)
   2dd70:	10c00317 	ldw	r3,12(r2)
   2dd74:	008001b4 	movhi	r2,6
   2dd78:	10b02604 	addi	r2,r2,-16232
   2dd7c:	d8800015 	stw	r2,0(sp)
   2dd80:	01c089c4 	movi	r7,551
   2dd84:	018001b4 	movhi	r6,6
   2dd88:	31af9204 	addi	r6,r6,-16824
   2dd8c:	014001b4 	movhi	r5,6
   2dd90:	296b3804 	addi	r5,r5,-21280
   2dd94:	1809883a 	mov	r4,r3
   2dd98:	00452600 	call	45260 <fprintf>
   2dd9c:	00450340 	call	45034 <abort>
    muladd(a->d[6], b->d[3]);
   2dda0:	e0be8217 	ldw	r2,-1528(fp)
   2dda4:	10800617 	ldw	r2,24(r2)
   2dda8:	e0bf9215 	stw	r2,-440(fp)
   2ddac:	e03f9315 	stw	zero,-436(fp)
   2ddb0:	e0be8317 	ldw	r2,-1524(fp)
   2ddb4:	10800317 	ldw	r2,12(r2)
   2ddb8:	e0bf9415 	stw	r2,-432(fp)
   2ddbc:	e03f9515 	stw	zero,-428(fp)
   2ddc0:	e1bf9417 	ldw	r6,-432(fp)
   2ddc4:	e1ff9517 	ldw	r7,-428(fp)
   2ddc8:	e13f9217 	ldw	r4,-440(fp)
   2ddcc:	e17f9317 	ldw	r5,-436(fp)
   2ddd0:	00429400 	call	42940 <__muldi3>
   2ddd4:	1009883a 	mov	r4,r2
   2ddd8:	180b883a 	mov	r5,r3
   2dddc:	e13e3d15 	stw	r4,-1804(fp)
   2dde0:	e17e3e15 	stw	r5,-1800(fp)
   2dde4:	e0be3e17 	ldw	r2,-1800(fp)
   2dde8:	1004d83a 	srl	r2,r2,zero
   2ddec:	e0bf9615 	stw	r2,-424(fp)
   2ddf0:	e03f9715 	stw	zero,-420(fp)
   2ddf4:	e0bf9617 	ldw	r2,-424(fp)
   2ddf8:	e0be3f15 	stw	r2,-1796(fp)
   2ddfc:	e0be3d17 	ldw	r2,-1804(fp)
   2de00:	e0be4015 	stw	r2,-1792(fp)
   2de04:	e0fd7e17 	ldw	r3,-2568(fp)
   2de08:	e0be4017 	ldw	r2,-1792(fp)
   2de0c:	1885883a 	add	r2,r3,r2
   2de10:	e0bd7e15 	stw	r2,-2568(fp)
   2de14:	e0fd7e17 	ldw	r3,-2568(fp)
   2de18:	e0be4017 	ldw	r2,-1792(fp)
   2de1c:	1880022e 	bgeu	r3,r2,2de28 <secp256k1_scalar_mul_512+0x37a4>
   2de20:	00c00044 	movi	r3,1
   2de24:	00000106 	br	2de2c <secp256k1_scalar_mul_512+0x37a8>
   2de28:	0007883a 	mov	r3,zero
   2de2c:	e0be3f17 	ldw	r2,-1796(fp)
   2de30:	10c5883a 	add	r2,r2,r3
   2de34:	e0be3f15 	stw	r2,-1796(fp)
   2de38:	e0fd7f17 	ldw	r3,-2564(fp)
   2de3c:	e0be3f17 	ldw	r2,-1796(fp)
   2de40:	1885883a 	add	r2,r3,r2
   2de44:	e0bd7f15 	stw	r2,-2564(fp)
   2de48:	e0fd7f17 	ldw	r3,-2564(fp)
   2de4c:	e0be3f17 	ldw	r2,-1796(fp)
   2de50:	1880022e 	bgeu	r3,r2,2de5c <secp256k1_scalar_mul_512+0x37d8>
   2de54:	00c00044 	movi	r3,1
   2de58:	00000106 	br	2de60 <secp256k1_scalar_mul_512+0x37dc>
   2de5c:	0007883a 	mov	r3,zero
   2de60:	e0bd8017 	ldw	r2,-2560(fp)
   2de64:	10c5883a 	add	r2,r2,r3
   2de68:	e0bd8015 	stw	r2,-2560(fp)
   2de6c:	e0fd7f17 	ldw	r3,-2564(fp)
   2de70:	e0be3f17 	ldw	r2,-1796(fp)
   2de74:	1885803a 	cmpltu	r2,r3,r2
   2de78:	10803fcc 	andi	r2,r2,255
   2de7c:	10001126 	beq	r2,zero,2dec4 <secp256k1_scalar_mul_512+0x3840>
   2de80:	e0bd8017 	ldw	r2,-2560(fp)
   2de84:	1005003a 	cmpeq	r2,r2,zero
   2de88:	10803fcc 	andi	r2,r2,255
   2de8c:	10000d26 	beq	r2,zero,2dec4 <secp256k1_scalar_mul_512+0x3840>
   2de90:	d0a01617 	ldw	r2,-32680(gp)
   2de94:	10c00317 	ldw	r3,12(r2)
   2de98:	008001b4 	movhi	r2,6
   2de9c:	10b02604 	addi	r2,r2,-16232
   2dea0:	d8800015 	stw	r2,0(sp)
   2dea4:	01c08a04 	movi	r7,552
   2dea8:	018001b4 	movhi	r6,6
   2deac:	31af9204 	addi	r6,r6,-16824
   2deb0:	014001b4 	movhi	r5,6
   2deb4:	296b3804 	addi	r5,r5,-21280
   2deb8:	1809883a 	mov	r4,r3
   2debc:	00452600 	call	45260 <fprintf>
   2dec0:	00450340 	call	45034 <abort>
    muladd(a->d[7], b->d[2]);
   2dec4:	e0be8217 	ldw	r2,-1528(fp)
   2dec8:	10800717 	ldw	r2,28(r2)
   2decc:	e0bf9815 	stw	r2,-416(fp)
   2ded0:	e03f9915 	stw	zero,-412(fp)
   2ded4:	e0be8317 	ldw	r2,-1524(fp)
   2ded8:	10800217 	ldw	r2,8(r2)
   2dedc:	e0bf9a15 	stw	r2,-408(fp)
   2dee0:	e03f9b15 	stw	zero,-404(fp)
   2dee4:	e1bf9a17 	ldw	r6,-408(fp)
   2dee8:	e1ff9b17 	ldw	r7,-404(fp)
   2deec:	e13f9817 	ldw	r4,-416(fp)
   2def0:	e17f9917 	ldw	r5,-412(fp)
   2def4:	00429400 	call	42940 <__muldi3>
   2def8:	1009883a 	mov	r4,r2
   2defc:	180b883a 	mov	r5,r3
   2df00:	e13e4115 	stw	r4,-1788(fp)
   2df04:	e17e4215 	stw	r5,-1784(fp)
   2df08:	e0be4217 	ldw	r2,-1784(fp)
   2df0c:	1004d83a 	srl	r2,r2,zero
   2df10:	e0bf9c15 	stw	r2,-400(fp)
   2df14:	e03f9d15 	stw	zero,-396(fp)
   2df18:	e0bf9c17 	ldw	r2,-400(fp)
   2df1c:	e0be4315 	stw	r2,-1780(fp)
   2df20:	e0be4117 	ldw	r2,-1788(fp)
   2df24:	e0be4415 	stw	r2,-1776(fp)
   2df28:	e0fd7e17 	ldw	r3,-2568(fp)
   2df2c:	e0be4417 	ldw	r2,-1776(fp)
   2df30:	1885883a 	add	r2,r3,r2
   2df34:	e0bd7e15 	stw	r2,-2568(fp)
   2df38:	e0fd7e17 	ldw	r3,-2568(fp)
   2df3c:	e0be4417 	ldw	r2,-1776(fp)
   2df40:	1880022e 	bgeu	r3,r2,2df4c <secp256k1_scalar_mul_512+0x38c8>
   2df44:	00c00044 	movi	r3,1
   2df48:	00000106 	br	2df50 <secp256k1_scalar_mul_512+0x38cc>
   2df4c:	0007883a 	mov	r3,zero
   2df50:	e0be4317 	ldw	r2,-1780(fp)
   2df54:	10c5883a 	add	r2,r2,r3
   2df58:	e0be4315 	stw	r2,-1780(fp)
   2df5c:	e0fd7f17 	ldw	r3,-2564(fp)
   2df60:	e0be4317 	ldw	r2,-1780(fp)
   2df64:	1885883a 	add	r2,r3,r2
   2df68:	e0bd7f15 	stw	r2,-2564(fp)
   2df6c:	e0fd7f17 	ldw	r3,-2564(fp)
   2df70:	e0be4317 	ldw	r2,-1780(fp)
   2df74:	1880022e 	bgeu	r3,r2,2df80 <secp256k1_scalar_mul_512+0x38fc>
   2df78:	00c00044 	movi	r3,1
   2df7c:	00000106 	br	2df84 <secp256k1_scalar_mul_512+0x3900>
   2df80:	0007883a 	mov	r3,zero
   2df84:	e0bd8017 	ldw	r2,-2560(fp)
   2df88:	10c5883a 	add	r2,r2,r3
   2df8c:	e0bd8015 	stw	r2,-2560(fp)
   2df90:	e0fd7f17 	ldw	r3,-2564(fp)
   2df94:	e0be4317 	ldw	r2,-1780(fp)
   2df98:	1885803a 	cmpltu	r2,r3,r2
   2df9c:	10803fcc 	andi	r2,r2,255
   2dfa0:	10001126 	beq	r2,zero,2dfe8 <secp256k1_scalar_mul_512+0x3964>
   2dfa4:	e0bd8017 	ldw	r2,-2560(fp)
   2dfa8:	1005003a 	cmpeq	r2,r2,zero
   2dfac:	10803fcc 	andi	r2,r2,255
   2dfb0:	10000d26 	beq	r2,zero,2dfe8 <secp256k1_scalar_mul_512+0x3964>
   2dfb4:	d0a01617 	ldw	r2,-32680(gp)
   2dfb8:	10c00317 	ldw	r3,12(r2)
   2dfbc:	008001b4 	movhi	r2,6
   2dfc0:	10b02604 	addi	r2,r2,-16232
   2dfc4:	d8800015 	stw	r2,0(sp)
   2dfc8:	01c08a44 	movi	r7,553
   2dfcc:	018001b4 	movhi	r6,6
   2dfd0:	31af9204 	addi	r6,r6,-16824
   2dfd4:	014001b4 	movhi	r5,6
   2dfd8:	296b3804 	addi	r5,r5,-21280
   2dfdc:	1809883a 	mov	r4,r3
   2dfe0:	00452600 	call	45260 <fprintf>
   2dfe4:	00450340 	call	45034 <abort>
    extract(l[9]);
   2dfe8:	e0be8117 	ldw	r2,-1532(fp)
   2dfec:	10c00904 	addi	r3,r2,36
   2dff0:	e0bd7e17 	ldw	r2,-2568(fp)
   2dff4:	18800015 	stw	r2,0(r3)
   2dff8:	e0bd7f17 	ldw	r2,-2564(fp)
   2dffc:	e0bd7e15 	stw	r2,-2568(fp)
   2e000:	e0bd8017 	ldw	r2,-2560(fp)
   2e004:	e0bd7f15 	stw	r2,-2564(fp)
   2e008:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[3], b->d[7]);
   2e00c:	e0be8217 	ldw	r2,-1528(fp)
   2e010:	10800317 	ldw	r2,12(r2)
   2e014:	e0bf9e15 	stw	r2,-392(fp)
   2e018:	e03f9f15 	stw	zero,-388(fp)
   2e01c:	e0be8317 	ldw	r2,-1524(fp)
   2e020:	10800717 	ldw	r2,28(r2)
   2e024:	e0bfa015 	stw	r2,-384(fp)
   2e028:	e03fa115 	stw	zero,-380(fp)
   2e02c:	e1bfa017 	ldw	r6,-384(fp)
   2e030:	e1ffa117 	ldw	r7,-380(fp)
   2e034:	e13f9e17 	ldw	r4,-392(fp)
   2e038:	e17f9f17 	ldw	r5,-388(fp)
   2e03c:	00429400 	call	42940 <__muldi3>
   2e040:	1009883a 	mov	r4,r2
   2e044:	180b883a 	mov	r5,r3
   2e048:	e13e4515 	stw	r4,-1772(fp)
   2e04c:	e17e4615 	stw	r5,-1768(fp)
   2e050:	e0be4617 	ldw	r2,-1768(fp)
   2e054:	1004d83a 	srl	r2,r2,zero
   2e058:	e0bfa215 	stw	r2,-376(fp)
   2e05c:	e03fa315 	stw	zero,-372(fp)
   2e060:	e0bfa217 	ldw	r2,-376(fp)
   2e064:	e0be4715 	stw	r2,-1764(fp)
   2e068:	e0be4517 	ldw	r2,-1772(fp)
   2e06c:	e0be4815 	stw	r2,-1760(fp)
   2e070:	e0fd7e17 	ldw	r3,-2568(fp)
   2e074:	e0be4817 	ldw	r2,-1760(fp)
   2e078:	1885883a 	add	r2,r3,r2
   2e07c:	e0bd7e15 	stw	r2,-2568(fp)
   2e080:	e0fd7e17 	ldw	r3,-2568(fp)
   2e084:	e0be4817 	ldw	r2,-1760(fp)
   2e088:	1880022e 	bgeu	r3,r2,2e094 <secp256k1_scalar_mul_512+0x3a10>
   2e08c:	00c00044 	movi	r3,1
   2e090:	00000106 	br	2e098 <secp256k1_scalar_mul_512+0x3a14>
   2e094:	0007883a 	mov	r3,zero
   2e098:	e0be4717 	ldw	r2,-1764(fp)
   2e09c:	10c5883a 	add	r2,r2,r3
   2e0a0:	e0be4715 	stw	r2,-1764(fp)
   2e0a4:	e0fd7f17 	ldw	r3,-2564(fp)
   2e0a8:	e0be4717 	ldw	r2,-1764(fp)
   2e0ac:	1885883a 	add	r2,r3,r2
   2e0b0:	e0bd7f15 	stw	r2,-2564(fp)
   2e0b4:	e0fd7f17 	ldw	r3,-2564(fp)
   2e0b8:	e0be4717 	ldw	r2,-1764(fp)
   2e0bc:	1880022e 	bgeu	r3,r2,2e0c8 <secp256k1_scalar_mul_512+0x3a44>
   2e0c0:	00c00044 	movi	r3,1
   2e0c4:	00000106 	br	2e0cc <secp256k1_scalar_mul_512+0x3a48>
   2e0c8:	0007883a 	mov	r3,zero
   2e0cc:	e0bd8017 	ldw	r2,-2560(fp)
   2e0d0:	10c5883a 	add	r2,r2,r3
   2e0d4:	e0bd8015 	stw	r2,-2560(fp)
   2e0d8:	e0fd7f17 	ldw	r3,-2564(fp)
   2e0dc:	e0be4717 	ldw	r2,-1764(fp)
   2e0e0:	1885803a 	cmpltu	r2,r3,r2
   2e0e4:	10803fcc 	andi	r2,r2,255
   2e0e8:	10001126 	beq	r2,zero,2e130 <secp256k1_scalar_mul_512+0x3aac>
   2e0ec:	e0bd8017 	ldw	r2,-2560(fp)
   2e0f0:	1005003a 	cmpeq	r2,r2,zero
   2e0f4:	10803fcc 	andi	r2,r2,255
   2e0f8:	10000d26 	beq	r2,zero,2e130 <secp256k1_scalar_mul_512+0x3aac>
   2e0fc:	d0a01617 	ldw	r2,-32680(gp)
   2e100:	10c00317 	ldw	r3,12(r2)
   2e104:	008001b4 	movhi	r2,6
   2e108:	10b02604 	addi	r2,r2,-16232
   2e10c:	d8800015 	stw	r2,0(sp)
   2e110:	01c08ac4 	movi	r7,555
   2e114:	018001b4 	movhi	r6,6
   2e118:	31af9204 	addi	r6,r6,-16824
   2e11c:	014001b4 	movhi	r5,6
   2e120:	296b3804 	addi	r5,r5,-21280
   2e124:	1809883a 	mov	r4,r3
   2e128:	00452600 	call	45260 <fprintf>
   2e12c:	00450340 	call	45034 <abort>
    muladd(a->d[4], b->d[6]);
   2e130:	e0be8217 	ldw	r2,-1528(fp)
   2e134:	10800417 	ldw	r2,16(r2)
   2e138:	e0bfa415 	stw	r2,-368(fp)
   2e13c:	e03fa515 	stw	zero,-364(fp)
   2e140:	e0be8317 	ldw	r2,-1524(fp)
   2e144:	10800617 	ldw	r2,24(r2)
   2e148:	e0bfa615 	stw	r2,-360(fp)
   2e14c:	e03fa715 	stw	zero,-356(fp)
   2e150:	e1bfa617 	ldw	r6,-360(fp)
   2e154:	e1ffa717 	ldw	r7,-356(fp)
   2e158:	e13fa417 	ldw	r4,-368(fp)
   2e15c:	e17fa517 	ldw	r5,-364(fp)
   2e160:	00429400 	call	42940 <__muldi3>
   2e164:	1009883a 	mov	r4,r2
   2e168:	180b883a 	mov	r5,r3
   2e16c:	e13e4915 	stw	r4,-1756(fp)
   2e170:	e17e4a15 	stw	r5,-1752(fp)
   2e174:	e0be4a17 	ldw	r2,-1752(fp)
   2e178:	1004d83a 	srl	r2,r2,zero
   2e17c:	e0bfa815 	stw	r2,-352(fp)
   2e180:	e03fa915 	stw	zero,-348(fp)
   2e184:	e0bfa817 	ldw	r2,-352(fp)
   2e188:	e0be4b15 	stw	r2,-1748(fp)
   2e18c:	e0be4917 	ldw	r2,-1756(fp)
   2e190:	e0be4c15 	stw	r2,-1744(fp)
   2e194:	e0fd7e17 	ldw	r3,-2568(fp)
   2e198:	e0be4c17 	ldw	r2,-1744(fp)
   2e19c:	1885883a 	add	r2,r3,r2
   2e1a0:	e0bd7e15 	stw	r2,-2568(fp)
   2e1a4:	e0fd7e17 	ldw	r3,-2568(fp)
   2e1a8:	e0be4c17 	ldw	r2,-1744(fp)
   2e1ac:	1880022e 	bgeu	r3,r2,2e1b8 <secp256k1_scalar_mul_512+0x3b34>
   2e1b0:	00c00044 	movi	r3,1
   2e1b4:	00000106 	br	2e1bc <secp256k1_scalar_mul_512+0x3b38>
   2e1b8:	0007883a 	mov	r3,zero
   2e1bc:	e0be4b17 	ldw	r2,-1748(fp)
   2e1c0:	10c5883a 	add	r2,r2,r3
   2e1c4:	e0be4b15 	stw	r2,-1748(fp)
   2e1c8:	e0fd7f17 	ldw	r3,-2564(fp)
   2e1cc:	e0be4b17 	ldw	r2,-1748(fp)
   2e1d0:	1885883a 	add	r2,r3,r2
   2e1d4:	e0bd7f15 	stw	r2,-2564(fp)
   2e1d8:	e0fd7f17 	ldw	r3,-2564(fp)
   2e1dc:	e0be4b17 	ldw	r2,-1748(fp)
   2e1e0:	1880022e 	bgeu	r3,r2,2e1ec <secp256k1_scalar_mul_512+0x3b68>
   2e1e4:	00c00044 	movi	r3,1
   2e1e8:	00000106 	br	2e1f0 <secp256k1_scalar_mul_512+0x3b6c>
   2e1ec:	0007883a 	mov	r3,zero
   2e1f0:	e0bd8017 	ldw	r2,-2560(fp)
   2e1f4:	10c5883a 	add	r2,r2,r3
   2e1f8:	e0bd8015 	stw	r2,-2560(fp)
   2e1fc:	e0fd7f17 	ldw	r3,-2564(fp)
   2e200:	e0be4b17 	ldw	r2,-1748(fp)
   2e204:	1885803a 	cmpltu	r2,r3,r2
   2e208:	10803fcc 	andi	r2,r2,255
   2e20c:	10001126 	beq	r2,zero,2e254 <secp256k1_scalar_mul_512+0x3bd0>
   2e210:	e0bd8017 	ldw	r2,-2560(fp)
   2e214:	1005003a 	cmpeq	r2,r2,zero
   2e218:	10803fcc 	andi	r2,r2,255
   2e21c:	10000d26 	beq	r2,zero,2e254 <secp256k1_scalar_mul_512+0x3bd0>
   2e220:	d0a01617 	ldw	r2,-32680(gp)
   2e224:	10c00317 	ldw	r3,12(r2)
   2e228:	008001b4 	movhi	r2,6
   2e22c:	10b02604 	addi	r2,r2,-16232
   2e230:	d8800015 	stw	r2,0(sp)
   2e234:	01c08b04 	movi	r7,556
   2e238:	018001b4 	movhi	r6,6
   2e23c:	31af9204 	addi	r6,r6,-16824
   2e240:	014001b4 	movhi	r5,6
   2e244:	296b3804 	addi	r5,r5,-21280
   2e248:	1809883a 	mov	r4,r3
   2e24c:	00452600 	call	45260 <fprintf>
   2e250:	00450340 	call	45034 <abort>
    muladd(a->d[5], b->d[5]);
   2e254:	e0be8217 	ldw	r2,-1528(fp)
   2e258:	10800517 	ldw	r2,20(r2)
   2e25c:	e0bfaa15 	stw	r2,-344(fp)
   2e260:	e03fab15 	stw	zero,-340(fp)
   2e264:	e0be8317 	ldw	r2,-1524(fp)
   2e268:	10800517 	ldw	r2,20(r2)
   2e26c:	e0bfac15 	stw	r2,-336(fp)
   2e270:	e03fad15 	stw	zero,-332(fp)
   2e274:	e1bfac17 	ldw	r6,-336(fp)
   2e278:	e1ffad17 	ldw	r7,-332(fp)
   2e27c:	e13faa17 	ldw	r4,-344(fp)
   2e280:	e17fab17 	ldw	r5,-340(fp)
   2e284:	00429400 	call	42940 <__muldi3>
   2e288:	1009883a 	mov	r4,r2
   2e28c:	180b883a 	mov	r5,r3
   2e290:	e13e4d15 	stw	r4,-1740(fp)
   2e294:	e17e4e15 	stw	r5,-1736(fp)
   2e298:	e0be4e17 	ldw	r2,-1736(fp)
   2e29c:	1004d83a 	srl	r2,r2,zero
   2e2a0:	e0bfae15 	stw	r2,-328(fp)
   2e2a4:	e03faf15 	stw	zero,-324(fp)
   2e2a8:	e0bfae17 	ldw	r2,-328(fp)
   2e2ac:	e0be4f15 	stw	r2,-1732(fp)
   2e2b0:	e0be4d17 	ldw	r2,-1740(fp)
   2e2b4:	e0be5015 	stw	r2,-1728(fp)
   2e2b8:	e0fd7e17 	ldw	r3,-2568(fp)
   2e2bc:	e0be5017 	ldw	r2,-1728(fp)
   2e2c0:	1885883a 	add	r2,r3,r2
   2e2c4:	e0bd7e15 	stw	r2,-2568(fp)
   2e2c8:	e0fd7e17 	ldw	r3,-2568(fp)
   2e2cc:	e0be5017 	ldw	r2,-1728(fp)
   2e2d0:	1880022e 	bgeu	r3,r2,2e2dc <secp256k1_scalar_mul_512+0x3c58>
   2e2d4:	00c00044 	movi	r3,1
   2e2d8:	00000106 	br	2e2e0 <secp256k1_scalar_mul_512+0x3c5c>
   2e2dc:	0007883a 	mov	r3,zero
   2e2e0:	e0be4f17 	ldw	r2,-1732(fp)
   2e2e4:	10c5883a 	add	r2,r2,r3
   2e2e8:	e0be4f15 	stw	r2,-1732(fp)
   2e2ec:	e0fd7f17 	ldw	r3,-2564(fp)
   2e2f0:	e0be4f17 	ldw	r2,-1732(fp)
   2e2f4:	1885883a 	add	r2,r3,r2
   2e2f8:	e0bd7f15 	stw	r2,-2564(fp)
   2e2fc:	e0fd7f17 	ldw	r3,-2564(fp)
   2e300:	e0be4f17 	ldw	r2,-1732(fp)
   2e304:	1880022e 	bgeu	r3,r2,2e310 <secp256k1_scalar_mul_512+0x3c8c>
   2e308:	00c00044 	movi	r3,1
   2e30c:	00000106 	br	2e314 <secp256k1_scalar_mul_512+0x3c90>
   2e310:	0007883a 	mov	r3,zero
   2e314:	e0bd8017 	ldw	r2,-2560(fp)
   2e318:	10c5883a 	add	r2,r2,r3
   2e31c:	e0bd8015 	stw	r2,-2560(fp)
   2e320:	e0fd7f17 	ldw	r3,-2564(fp)
   2e324:	e0be4f17 	ldw	r2,-1732(fp)
   2e328:	1885803a 	cmpltu	r2,r3,r2
   2e32c:	10803fcc 	andi	r2,r2,255
   2e330:	10001126 	beq	r2,zero,2e378 <secp256k1_scalar_mul_512+0x3cf4>
   2e334:	e0bd8017 	ldw	r2,-2560(fp)
   2e338:	1005003a 	cmpeq	r2,r2,zero
   2e33c:	10803fcc 	andi	r2,r2,255
   2e340:	10000d26 	beq	r2,zero,2e378 <secp256k1_scalar_mul_512+0x3cf4>
   2e344:	d0a01617 	ldw	r2,-32680(gp)
   2e348:	10c00317 	ldw	r3,12(r2)
   2e34c:	008001b4 	movhi	r2,6
   2e350:	10b02604 	addi	r2,r2,-16232
   2e354:	d8800015 	stw	r2,0(sp)
   2e358:	01c08b44 	movi	r7,557
   2e35c:	018001b4 	movhi	r6,6
   2e360:	31af9204 	addi	r6,r6,-16824
   2e364:	014001b4 	movhi	r5,6
   2e368:	296b3804 	addi	r5,r5,-21280
   2e36c:	1809883a 	mov	r4,r3
   2e370:	00452600 	call	45260 <fprintf>
   2e374:	00450340 	call	45034 <abort>
    muladd(a->d[6], b->d[4]);
   2e378:	e0be8217 	ldw	r2,-1528(fp)
   2e37c:	10800617 	ldw	r2,24(r2)
   2e380:	e0bfb015 	stw	r2,-320(fp)
   2e384:	e03fb115 	stw	zero,-316(fp)
   2e388:	e0be8317 	ldw	r2,-1524(fp)
   2e38c:	10800417 	ldw	r2,16(r2)
   2e390:	e0bfb215 	stw	r2,-312(fp)
   2e394:	e03fb315 	stw	zero,-308(fp)
   2e398:	e1bfb217 	ldw	r6,-312(fp)
   2e39c:	e1ffb317 	ldw	r7,-308(fp)
   2e3a0:	e13fb017 	ldw	r4,-320(fp)
   2e3a4:	e17fb117 	ldw	r5,-316(fp)
   2e3a8:	00429400 	call	42940 <__muldi3>
   2e3ac:	1009883a 	mov	r4,r2
   2e3b0:	180b883a 	mov	r5,r3
   2e3b4:	e13e5115 	stw	r4,-1724(fp)
   2e3b8:	e17e5215 	stw	r5,-1720(fp)
   2e3bc:	e0be5217 	ldw	r2,-1720(fp)
   2e3c0:	1004d83a 	srl	r2,r2,zero
   2e3c4:	e0bfb415 	stw	r2,-304(fp)
   2e3c8:	e03fb515 	stw	zero,-300(fp)
   2e3cc:	e0bfb417 	ldw	r2,-304(fp)
   2e3d0:	e0be5315 	stw	r2,-1716(fp)
   2e3d4:	e0be5117 	ldw	r2,-1724(fp)
   2e3d8:	e0be5415 	stw	r2,-1712(fp)
   2e3dc:	e0fd7e17 	ldw	r3,-2568(fp)
   2e3e0:	e0be5417 	ldw	r2,-1712(fp)
   2e3e4:	1885883a 	add	r2,r3,r2
   2e3e8:	e0bd7e15 	stw	r2,-2568(fp)
   2e3ec:	e0fd7e17 	ldw	r3,-2568(fp)
   2e3f0:	e0be5417 	ldw	r2,-1712(fp)
   2e3f4:	1880022e 	bgeu	r3,r2,2e400 <secp256k1_scalar_mul_512+0x3d7c>
   2e3f8:	00c00044 	movi	r3,1
   2e3fc:	00000106 	br	2e404 <secp256k1_scalar_mul_512+0x3d80>
   2e400:	0007883a 	mov	r3,zero
   2e404:	e0be5317 	ldw	r2,-1716(fp)
   2e408:	10c5883a 	add	r2,r2,r3
   2e40c:	e0be5315 	stw	r2,-1716(fp)
   2e410:	e0fd7f17 	ldw	r3,-2564(fp)
   2e414:	e0be5317 	ldw	r2,-1716(fp)
   2e418:	1885883a 	add	r2,r3,r2
   2e41c:	e0bd7f15 	stw	r2,-2564(fp)
   2e420:	e0fd7f17 	ldw	r3,-2564(fp)
   2e424:	e0be5317 	ldw	r2,-1716(fp)
   2e428:	1880022e 	bgeu	r3,r2,2e434 <secp256k1_scalar_mul_512+0x3db0>
   2e42c:	00c00044 	movi	r3,1
   2e430:	00000106 	br	2e438 <secp256k1_scalar_mul_512+0x3db4>
   2e434:	0007883a 	mov	r3,zero
   2e438:	e0bd8017 	ldw	r2,-2560(fp)
   2e43c:	10c5883a 	add	r2,r2,r3
   2e440:	e0bd8015 	stw	r2,-2560(fp)
   2e444:	e0fd7f17 	ldw	r3,-2564(fp)
   2e448:	e0be5317 	ldw	r2,-1716(fp)
   2e44c:	1885803a 	cmpltu	r2,r3,r2
   2e450:	10803fcc 	andi	r2,r2,255
   2e454:	10001126 	beq	r2,zero,2e49c <secp256k1_scalar_mul_512+0x3e18>
   2e458:	e0bd8017 	ldw	r2,-2560(fp)
   2e45c:	1005003a 	cmpeq	r2,r2,zero
   2e460:	10803fcc 	andi	r2,r2,255
   2e464:	10000d26 	beq	r2,zero,2e49c <secp256k1_scalar_mul_512+0x3e18>
   2e468:	d0a01617 	ldw	r2,-32680(gp)
   2e46c:	10c00317 	ldw	r3,12(r2)
   2e470:	008001b4 	movhi	r2,6
   2e474:	10b02604 	addi	r2,r2,-16232
   2e478:	d8800015 	stw	r2,0(sp)
   2e47c:	01c08b84 	movi	r7,558
   2e480:	018001b4 	movhi	r6,6
   2e484:	31af9204 	addi	r6,r6,-16824
   2e488:	014001b4 	movhi	r5,6
   2e48c:	296b3804 	addi	r5,r5,-21280
   2e490:	1809883a 	mov	r4,r3
   2e494:	00452600 	call	45260 <fprintf>
   2e498:	00450340 	call	45034 <abort>
    muladd(a->d[7], b->d[3]);
   2e49c:	e0be8217 	ldw	r2,-1528(fp)
   2e4a0:	10800717 	ldw	r2,28(r2)
   2e4a4:	e0bfb615 	stw	r2,-296(fp)
   2e4a8:	e03fb715 	stw	zero,-292(fp)
   2e4ac:	e0be8317 	ldw	r2,-1524(fp)
   2e4b0:	10800317 	ldw	r2,12(r2)
   2e4b4:	e0bfb815 	stw	r2,-288(fp)
   2e4b8:	e03fb915 	stw	zero,-284(fp)
   2e4bc:	e1bfb817 	ldw	r6,-288(fp)
   2e4c0:	e1ffb917 	ldw	r7,-284(fp)
   2e4c4:	e13fb617 	ldw	r4,-296(fp)
   2e4c8:	e17fb717 	ldw	r5,-292(fp)
   2e4cc:	00429400 	call	42940 <__muldi3>
   2e4d0:	1009883a 	mov	r4,r2
   2e4d4:	180b883a 	mov	r5,r3
   2e4d8:	e13e5515 	stw	r4,-1708(fp)
   2e4dc:	e17e5615 	stw	r5,-1704(fp)
   2e4e0:	e0be5617 	ldw	r2,-1704(fp)
   2e4e4:	1004d83a 	srl	r2,r2,zero
   2e4e8:	e0bfba15 	stw	r2,-280(fp)
   2e4ec:	e03fbb15 	stw	zero,-276(fp)
   2e4f0:	e0bfba17 	ldw	r2,-280(fp)
   2e4f4:	e0be5715 	stw	r2,-1700(fp)
   2e4f8:	e0be5517 	ldw	r2,-1708(fp)
   2e4fc:	e0be5815 	stw	r2,-1696(fp)
   2e500:	e0fd7e17 	ldw	r3,-2568(fp)
   2e504:	e0be5817 	ldw	r2,-1696(fp)
   2e508:	1885883a 	add	r2,r3,r2
   2e50c:	e0bd7e15 	stw	r2,-2568(fp)
   2e510:	e0fd7e17 	ldw	r3,-2568(fp)
   2e514:	e0be5817 	ldw	r2,-1696(fp)
   2e518:	1880022e 	bgeu	r3,r2,2e524 <secp256k1_scalar_mul_512+0x3ea0>
   2e51c:	00c00044 	movi	r3,1
   2e520:	00000106 	br	2e528 <secp256k1_scalar_mul_512+0x3ea4>
   2e524:	0007883a 	mov	r3,zero
   2e528:	e0be5717 	ldw	r2,-1700(fp)
   2e52c:	10c5883a 	add	r2,r2,r3
   2e530:	e0be5715 	stw	r2,-1700(fp)
   2e534:	e0fd7f17 	ldw	r3,-2564(fp)
   2e538:	e0be5717 	ldw	r2,-1700(fp)
   2e53c:	1885883a 	add	r2,r3,r2
   2e540:	e0bd7f15 	stw	r2,-2564(fp)
   2e544:	e0fd7f17 	ldw	r3,-2564(fp)
   2e548:	e0be5717 	ldw	r2,-1700(fp)
   2e54c:	1880022e 	bgeu	r3,r2,2e558 <secp256k1_scalar_mul_512+0x3ed4>
   2e550:	00c00044 	movi	r3,1
   2e554:	00000106 	br	2e55c <secp256k1_scalar_mul_512+0x3ed8>
   2e558:	0007883a 	mov	r3,zero
   2e55c:	e0bd8017 	ldw	r2,-2560(fp)
   2e560:	10c5883a 	add	r2,r2,r3
   2e564:	e0bd8015 	stw	r2,-2560(fp)
   2e568:	e0fd7f17 	ldw	r3,-2564(fp)
   2e56c:	e0be5717 	ldw	r2,-1700(fp)
   2e570:	1885803a 	cmpltu	r2,r3,r2
   2e574:	10803fcc 	andi	r2,r2,255
   2e578:	10001126 	beq	r2,zero,2e5c0 <secp256k1_scalar_mul_512+0x3f3c>
   2e57c:	e0bd8017 	ldw	r2,-2560(fp)
   2e580:	1005003a 	cmpeq	r2,r2,zero
   2e584:	10803fcc 	andi	r2,r2,255
   2e588:	10000d26 	beq	r2,zero,2e5c0 <secp256k1_scalar_mul_512+0x3f3c>
   2e58c:	d0a01617 	ldw	r2,-32680(gp)
   2e590:	10c00317 	ldw	r3,12(r2)
   2e594:	008001b4 	movhi	r2,6
   2e598:	10b02604 	addi	r2,r2,-16232
   2e59c:	d8800015 	stw	r2,0(sp)
   2e5a0:	01c08bc4 	movi	r7,559
   2e5a4:	018001b4 	movhi	r6,6
   2e5a8:	31af9204 	addi	r6,r6,-16824
   2e5ac:	014001b4 	movhi	r5,6
   2e5b0:	296b3804 	addi	r5,r5,-21280
   2e5b4:	1809883a 	mov	r4,r3
   2e5b8:	00452600 	call	45260 <fprintf>
   2e5bc:	00450340 	call	45034 <abort>
    extract(l[10]);
   2e5c0:	e0be8117 	ldw	r2,-1532(fp)
   2e5c4:	10c00a04 	addi	r3,r2,40
   2e5c8:	e0bd7e17 	ldw	r2,-2568(fp)
   2e5cc:	18800015 	stw	r2,0(r3)
   2e5d0:	e0bd7f17 	ldw	r2,-2564(fp)
   2e5d4:	e0bd7e15 	stw	r2,-2568(fp)
   2e5d8:	e0bd8017 	ldw	r2,-2560(fp)
   2e5dc:	e0bd7f15 	stw	r2,-2564(fp)
   2e5e0:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[4], b->d[7]);
   2e5e4:	e0be8217 	ldw	r2,-1528(fp)
   2e5e8:	10800417 	ldw	r2,16(r2)
   2e5ec:	e0bfbc15 	stw	r2,-272(fp)
   2e5f0:	e03fbd15 	stw	zero,-268(fp)
   2e5f4:	e0be8317 	ldw	r2,-1524(fp)
   2e5f8:	10800717 	ldw	r2,28(r2)
   2e5fc:	e0bfbe15 	stw	r2,-264(fp)
   2e600:	e03fbf15 	stw	zero,-260(fp)
   2e604:	e1bfbe17 	ldw	r6,-264(fp)
   2e608:	e1ffbf17 	ldw	r7,-260(fp)
   2e60c:	e13fbc17 	ldw	r4,-272(fp)
   2e610:	e17fbd17 	ldw	r5,-268(fp)
   2e614:	00429400 	call	42940 <__muldi3>
   2e618:	1009883a 	mov	r4,r2
   2e61c:	180b883a 	mov	r5,r3
   2e620:	e13e5915 	stw	r4,-1692(fp)
   2e624:	e17e5a15 	stw	r5,-1688(fp)
   2e628:	e0be5a17 	ldw	r2,-1688(fp)
   2e62c:	1004d83a 	srl	r2,r2,zero
   2e630:	e0bfc015 	stw	r2,-256(fp)
   2e634:	e03fc115 	stw	zero,-252(fp)
   2e638:	e0bfc017 	ldw	r2,-256(fp)
   2e63c:	e0be5b15 	stw	r2,-1684(fp)
   2e640:	e0be5917 	ldw	r2,-1692(fp)
   2e644:	e0be5c15 	stw	r2,-1680(fp)
   2e648:	e0fd7e17 	ldw	r3,-2568(fp)
   2e64c:	e0be5c17 	ldw	r2,-1680(fp)
   2e650:	1885883a 	add	r2,r3,r2
   2e654:	e0bd7e15 	stw	r2,-2568(fp)
   2e658:	e0fd7e17 	ldw	r3,-2568(fp)
   2e65c:	e0be5c17 	ldw	r2,-1680(fp)
   2e660:	1880022e 	bgeu	r3,r2,2e66c <secp256k1_scalar_mul_512+0x3fe8>
   2e664:	00c00044 	movi	r3,1
   2e668:	00000106 	br	2e670 <secp256k1_scalar_mul_512+0x3fec>
   2e66c:	0007883a 	mov	r3,zero
   2e670:	e0be5b17 	ldw	r2,-1684(fp)
   2e674:	10c5883a 	add	r2,r2,r3
   2e678:	e0be5b15 	stw	r2,-1684(fp)
   2e67c:	e0fd7f17 	ldw	r3,-2564(fp)
   2e680:	e0be5b17 	ldw	r2,-1684(fp)
   2e684:	1885883a 	add	r2,r3,r2
   2e688:	e0bd7f15 	stw	r2,-2564(fp)
   2e68c:	e0fd7f17 	ldw	r3,-2564(fp)
   2e690:	e0be5b17 	ldw	r2,-1684(fp)
   2e694:	1880022e 	bgeu	r3,r2,2e6a0 <secp256k1_scalar_mul_512+0x401c>
   2e698:	00c00044 	movi	r3,1
   2e69c:	00000106 	br	2e6a4 <secp256k1_scalar_mul_512+0x4020>
   2e6a0:	0007883a 	mov	r3,zero
   2e6a4:	e0bd8017 	ldw	r2,-2560(fp)
   2e6a8:	10c5883a 	add	r2,r2,r3
   2e6ac:	e0bd8015 	stw	r2,-2560(fp)
   2e6b0:	e0fd7f17 	ldw	r3,-2564(fp)
   2e6b4:	e0be5b17 	ldw	r2,-1684(fp)
   2e6b8:	1885803a 	cmpltu	r2,r3,r2
   2e6bc:	10803fcc 	andi	r2,r2,255
   2e6c0:	10001126 	beq	r2,zero,2e708 <secp256k1_scalar_mul_512+0x4084>
   2e6c4:	e0bd8017 	ldw	r2,-2560(fp)
   2e6c8:	1005003a 	cmpeq	r2,r2,zero
   2e6cc:	10803fcc 	andi	r2,r2,255
   2e6d0:	10000d26 	beq	r2,zero,2e708 <secp256k1_scalar_mul_512+0x4084>
   2e6d4:	d0a01617 	ldw	r2,-32680(gp)
   2e6d8:	10c00317 	ldw	r3,12(r2)
   2e6dc:	008001b4 	movhi	r2,6
   2e6e0:	10b02604 	addi	r2,r2,-16232
   2e6e4:	d8800015 	stw	r2,0(sp)
   2e6e8:	01c08c44 	movi	r7,561
   2e6ec:	018001b4 	movhi	r6,6
   2e6f0:	31af9204 	addi	r6,r6,-16824
   2e6f4:	014001b4 	movhi	r5,6
   2e6f8:	296b3804 	addi	r5,r5,-21280
   2e6fc:	1809883a 	mov	r4,r3
   2e700:	00452600 	call	45260 <fprintf>
   2e704:	00450340 	call	45034 <abort>
    muladd(a->d[5], b->d[6]);
   2e708:	e0be8217 	ldw	r2,-1528(fp)
   2e70c:	10800517 	ldw	r2,20(r2)
   2e710:	e0bfc215 	stw	r2,-248(fp)
   2e714:	e03fc315 	stw	zero,-244(fp)
   2e718:	e0be8317 	ldw	r2,-1524(fp)
   2e71c:	10800617 	ldw	r2,24(r2)
   2e720:	e0bfc415 	stw	r2,-240(fp)
   2e724:	e03fc515 	stw	zero,-236(fp)
   2e728:	e1bfc417 	ldw	r6,-240(fp)
   2e72c:	e1ffc517 	ldw	r7,-236(fp)
   2e730:	e13fc217 	ldw	r4,-248(fp)
   2e734:	e17fc317 	ldw	r5,-244(fp)
   2e738:	00429400 	call	42940 <__muldi3>
   2e73c:	1009883a 	mov	r4,r2
   2e740:	180b883a 	mov	r5,r3
   2e744:	e13e5d15 	stw	r4,-1676(fp)
   2e748:	e17e5e15 	stw	r5,-1672(fp)
   2e74c:	e0be5e17 	ldw	r2,-1672(fp)
   2e750:	1004d83a 	srl	r2,r2,zero
   2e754:	e0bfc615 	stw	r2,-232(fp)
   2e758:	e03fc715 	stw	zero,-228(fp)
   2e75c:	e0bfc617 	ldw	r2,-232(fp)
   2e760:	e0be5f15 	stw	r2,-1668(fp)
   2e764:	e0be5d17 	ldw	r2,-1676(fp)
   2e768:	e0be6015 	stw	r2,-1664(fp)
   2e76c:	e0fd7e17 	ldw	r3,-2568(fp)
   2e770:	e0be6017 	ldw	r2,-1664(fp)
   2e774:	1885883a 	add	r2,r3,r2
   2e778:	e0bd7e15 	stw	r2,-2568(fp)
   2e77c:	e0fd7e17 	ldw	r3,-2568(fp)
   2e780:	e0be6017 	ldw	r2,-1664(fp)
   2e784:	1880022e 	bgeu	r3,r2,2e790 <secp256k1_scalar_mul_512+0x410c>
   2e788:	00c00044 	movi	r3,1
   2e78c:	00000106 	br	2e794 <secp256k1_scalar_mul_512+0x4110>
   2e790:	0007883a 	mov	r3,zero
   2e794:	e0be5f17 	ldw	r2,-1668(fp)
   2e798:	10c5883a 	add	r2,r2,r3
   2e79c:	e0be5f15 	stw	r2,-1668(fp)
   2e7a0:	e0fd7f17 	ldw	r3,-2564(fp)
   2e7a4:	e0be5f17 	ldw	r2,-1668(fp)
   2e7a8:	1885883a 	add	r2,r3,r2
   2e7ac:	e0bd7f15 	stw	r2,-2564(fp)
   2e7b0:	e0fd7f17 	ldw	r3,-2564(fp)
   2e7b4:	e0be5f17 	ldw	r2,-1668(fp)
   2e7b8:	1880022e 	bgeu	r3,r2,2e7c4 <secp256k1_scalar_mul_512+0x4140>
   2e7bc:	00c00044 	movi	r3,1
   2e7c0:	00000106 	br	2e7c8 <secp256k1_scalar_mul_512+0x4144>
   2e7c4:	0007883a 	mov	r3,zero
   2e7c8:	e0bd8017 	ldw	r2,-2560(fp)
   2e7cc:	10c5883a 	add	r2,r2,r3
   2e7d0:	e0bd8015 	stw	r2,-2560(fp)
   2e7d4:	e0fd7f17 	ldw	r3,-2564(fp)
   2e7d8:	e0be5f17 	ldw	r2,-1668(fp)
   2e7dc:	1885803a 	cmpltu	r2,r3,r2
   2e7e0:	10803fcc 	andi	r2,r2,255
   2e7e4:	10001126 	beq	r2,zero,2e82c <secp256k1_scalar_mul_512+0x41a8>
   2e7e8:	e0bd8017 	ldw	r2,-2560(fp)
   2e7ec:	1005003a 	cmpeq	r2,r2,zero
   2e7f0:	10803fcc 	andi	r2,r2,255
   2e7f4:	10000d26 	beq	r2,zero,2e82c <secp256k1_scalar_mul_512+0x41a8>
   2e7f8:	d0a01617 	ldw	r2,-32680(gp)
   2e7fc:	10c00317 	ldw	r3,12(r2)
   2e800:	008001b4 	movhi	r2,6
   2e804:	10b02604 	addi	r2,r2,-16232
   2e808:	d8800015 	stw	r2,0(sp)
   2e80c:	01c08c84 	movi	r7,562
   2e810:	018001b4 	movhi	r6,6
   2e814:	31af9204 	addi	r6,r6,-16824
   2e818:	014001b4 	movhi	r5,6
   2e81c:	296b3804 	addi	r5,r5,-21280
   2e820:	1809883a 	mov	r4,r3
   2e824:	00452600 	call	45260 <fprintf>
   2e828:	00450340 	call	45034 <abort>
    muladd(a->d[6], b->d[5]);
   2e82c:	e0be8217 	ldw	r2,-1528(fp)
   2e830:	10800617 	ldw	r2,24(r2)
   2e834:	e0bfc815 	stw	r2,-224(fp)
   2e838:	e03fc915 	stw	zero,-220(fp)
   2e83c:	e0be8317 	ldw	r2,-1524(fp)
   2e840:	10800517 	ldw	r2,20(r2)
   2e844:	e0bfca15 	stw	r2,-216(fp)
   2e848:	e03fcb15 	stw	zero,-212(fp)
   2e84c:	e1bfca17 	ldw	r6,-216(fp)
   2e850:	e1ffcb17 	ldw	r7,-212(fp)
   2e854:	e13fc817 	ldw	r4,-224(fp)
   2e858:	e17fc917 	ldw	r5,-220(fp)
   2e85c:	00429400 	call	42940 <__muldi3>
   2e860:	1009883a 	mov	r4,r2
   2e864:	180b883a 	mov	r5,r3
   2e868:	e13e6115 	stw	r4,-1660(fp)
   2e86c:	e17e6215 	stw	r5,-1656(fp)
   2e870:	e0be6217 	ldw	r2,-1656(fp)
   2e874:	1004d83a 	srl	r2,r2,zero
   2e878:	e0bfcc15 	stw	r2,-208(fp)
   2e87c:	e03fcd15 	stw	zero,-204(fp)
   2e880:	e0bfcc17 	ldw	r2,-208(fp)
   2e884:	e0be6315 	stw	r2,-1652(fp)
   2e888:	e0be6117 	ldw	r2,-1660(fp)
   2e88c:	e0be6415 	stw	r2,-1648(fp)
   2e890:	e0fd7e17 	ldw	r3,-2568(fp)
   2e894:	e0be6417 	ldw	r2,-1648(fp)
   2e898:	1885883a 	add	r2,r3,r2
   2e89c:	e0bd7e15 	stw	r2,-2568(fp)
   2e8a0:	e0fd7e17 	ldw	r3,-2568(fp)
   2e8a4:	e0be6417 	ldw	r2,-1648(fp)
   2e8a8:	1880022e 	bgeu	r3,r2,2e8b4 <secp256k1_scalar_mul_512+0x4230>
   2e8ac:	00c00044 	movi	r3,1
   2e8b0:	00000106 	br	2e8b8 <secp256k1_scalar_mul_512+0x4234>
   2e8b4:	0007883a 	mov	r3,zero
   2e8b8:	e0be6317 	ldw	r2,-1652(fp)
   2e8bc:	10c5883a 	add	r2,r2,r3
   2e8c0:	e0be6315 	stw	r2,-1652(fp)
   2e8c4:	e0fd7f17 	ldw	r3,-2564(fp)
   2e8c8:	e0be6317 	ldw	r2,-1652(fp)
   2e8cc:	1885883a 	add	r2,r3,r2
   2e8d0:	e0bd7f15 	stw	r2,-2564(fp)
   2e8d4:	e0fd7f17 	ldw	r3,-2564(fp)
   2e8d8:	e0be6317 	ldw	r2,-1652(fp)
   2e8dc:	1880022e 	bgeu	r3,r2,2e8e8 <secp256k1_scalar_mul_512+0x4264>
   2e8e0:	00c00044 	movi	r3,1
   2e8e4:	00000106 	br	2e8ec <secp256k1_scalar_mul_512+0x4268>
   2e8e8:	0007883a 	mov	r3,zero
   2e8ec:	e0bd8017 	ldw	r2,-2560(fp)
   2e8f0:	10c5883a 	add	r2,r2,r3
   2e8f4:	e0bd8015 	stw	r2,-2560(fp)
   2e8f8:	e0fd7f17 	ldw	r3,-2564(fp)
   2e8fc:	e0be6317 	ldw	r2,-1652(fp)
   2e900:	1885803a 	cmpltu	r2,r3,r2
   2e904:	10803fcc 	andi	r2,r2,255
   2e908:	10001126 	beq	r2,zero,2e950 <secp256k1_scalar_mul_512+0x42cc>
   2e90c:	e0bd8017 	ldw	r2,-2560(fp)
   2e910:	1005003a 	cmpeq	r2,r2,zero
   2e914:	10803fcc 	andi	r2,r2,255
   2e918:	10000d26 	beq	r2,zero,2e950 <secp256k1_scalar_mul_512+0x42cc>
   2e91c:	d0a01617 	ldw	r2,-32680(gp)
   2e920:	10c00317 	ldw	r3,12(r2)
   2e924:	008001b4 	movhi	r2,6
   2e928:	10b02604 	addi	r2,r2,-16232
   2e92c:	d8800015 	stw	r2,0(sp)
   2e930:	01c08cc4 	movi	r7,563
   2e934:	018001b4 	movhi	r6,6
   2e938:	31af9204 	addi	r6,r6,-16824
   2e93c:	014001b4 	movhi	r5,6
   2e940:	296b3804 	addi	r5,r5,-21280
   2e944:	1809883a 	mov	r4,r3
   2e948:	00452600 	call	45260 <fprintf>
   2e94c:	00450340 	call	45034 <abort>
    muladd(a->d[7], b->d[4]);
   2e950:	e0be8217 	ldw	r2,-1528(fp)
   2e954:	10800717 	ldw	r2,28(r2)
   2e958:	e0bfce15 	stw	r2,-200(fp)
   2e95c:	e03fcf15 	stw	zero,-196(fp)
   2e960:	e0be8317 	ldw	r2,-1524(fp)
   2e964:	10800417 	ldw	r2,16(r2)
   2e968:	e0bfd015 	stw	r2,-192(fp)
   2e96c:	e03fd115 	stw	zero,-188(fp)
   2e970:	e1bfd017 	ldw	r6,-192(fp)
   2e974:	e1ffd117 	ldw	r7,-188(fp)
   2e978:	e13fce17 	ldw	r4,-200(fp)
   2e97c:	e17fcf17 	ldw	r5,-196(fp)
   2e980:	00429400 	call	42940 <__muldi3>
   2e984:	1009883a 	mov	r4,r2
   2e988:	180b883a 	mov	r5,r3
   2e98c:	e13e6515 	stw	r4,-1644(fp)
   2e990:	e17e6615 	stw	r5,-1640(fp)
   2e994:	e0be6617 	ldw	r2,-1640(fp)
   2e998:	1004d83a 	srl	r2,r2,zero
   2e99c:	e0bfd215 	stw	r2,-184(fp)
   2e9a0:	e03fd315 	stw	zero,-180(fp)
   2e9a4:	e0bfd217 	ldw	r2,-184(fp)
   2e9a8:	e0be6715 	stw	r2,-1636(fp)
   2e9ac:	e0be6517 	ldw	r2,-1644(fp)
   2e9b0:	e0be6815 	stw	r2,-1632(fp)
   2e9b4:	e0fd7e17 	ldw	r3,-2568(fp)
   2e9b8:	e0be6817 	ldw	r2,-1632(fp)
   2e9bc:	1885883a 	add	r2,r3,r2
   2e9c0:	e0bd7e15 	stw	r2,-2568(fp)
   2e9c4:	e0fd7e17 	ldw	r3,-2568(fp)
   2e9c8:	e0be6817 	ldw	r2,-1632(fp)
   2e9cc:	1880022e 	bgeu	r3,r2,2e9d8 <secp256k1_scalar_mul_512+0x4354>
   2e9d0:	00c00044 	movi	r3,1
   2e9d4:	00000106 	br	2e9dc <secp256k1_scalar_mul_512+0x4358>
   2e9d8:	0007883a 	mov	r3,zero
   2e9dc:	e0be6717 	ldw	r2,-1636(fp)
   2e9e0:	10c5883a 	add	r2,r2,r3
   2e9e4:	e0be6715 	stw	r2,-1636(fp)
   2e9e8:	e0fd7f17 	ldw	r3,-2564(fp)
   2e9ec:	e0be6717 	ldw	r2,-1636(fp)
   2e9f0:	1885883a 	add	r2,r3,r2
   2e9f4:	e0bd7f15 	stw	r2,-2564(fp)
   2e9f8:	e0fd7f17 	ldw	r3,-2564(fp)
   2e9fc:	e0be6717 	ldw	r2,-1636(fp)
   2ea00:	1880022e 	bgeu	r3,r2,2ea0c <secp256k1_scalar_mul_512+0x4388>
   2ea04:	00c00044 	movi	r3,1
   2ea08:	00000106 	br	2ea10 <secp256k1_scalar_mul_512+0x438c>
   2ea0c:	0007883a 	mov	r3,zero
   2ea10:	e0bd8017 	ldw	r2,-2560(fp)
   2ea14:	10c5883a 	add	r2,r2,r3
   2ea18:	e0bd8015 	stw	r2,-2560(fp)
   2ea1c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ea20:	e0be6717 	ldw	r2,-1636(fp)
   2ea24:	1885803a 	cmpltu	r2,r3,r2
   2ea28:	10803fcc 	andi	r2,r2,255
   2ea2c:	10001126 	beq	r2,zero,2ea74 <secp256k1_scalar_mul_512+0x43f0>
   2ea30:	e0bd8017 	ldw	r2,-2560(fp)
   2ea34:	1005003a 	cmpeq	r2,r2,zero
   2ea38:	10803fcc 	andi	r2,r2,255
   2ea3c:	10000d26 	beq	r2,zero,2ea74 <secp256k1_scalar_mul_512+0x43f0>
   2ea40:	d0a01617 	ldw	r2,-32680(gp)
   2ea44:	10c00317 	ldw	r3,12(r2)
   2ea48:	008001b4 	movhi	r2,6
   2ea4c:	10b02604 	addi	r2,r2,-16232
   2ea50:	d8800015 	stw	r2,0(sp)
   2ea54:	01c08d04 	movi	r7,564
   2ea58:	018001b4 	movhi	r6,6
   2ea5c:	31af9204 	addi	r6,r6,-16824
   2ea60:	014001b4 	movhi	r5,6
   2ea64:	296b3804 	addi	r5,r5,-21280
   2ea68:	1809883a 	mov	r4,r3
   2ea6c:	00452600 	call	45260 <fprintf>
   2ea70:	00450340 	call	45034 <abort>
    extract(l[11]);
   2ea74:	e0be8117 	ldw	r2,-1532(fp)
   2ea78:	10c00b04 	addi	r3,r2,44
   2ea7c:	e0bd7e17 	ldw	r2,-2568(fp)
   2ea80:	18800015 	stw	r2,0(r3)
   2ea84:	e0bd7f17 	ldw	r2,-2564(fp)
   2ea88:	e0bd7e15 	stw	r2,-2568(fp)
   2ea8c:	e0bd8017 	ldw	r2,-2560(fp)
   2ea90:	e0bd7f15 	stw	r2,-2564(fp)
   2ea94:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[5], b->d[7]);
   2ea98:	e0be8217 	ldw	r2,-1528(fp)
   2ea9c:	10800517 	ldw	r2,20(r2)
   2eaa0:	e0bfd415 	stw	r2,-176(fp)
   2eaa4:	e03fd515 	stw	zero,-172(fp)
   2eaa8:	e0be8317 	ldw	r2,-1524(fp)
   2eaac:	10800717 	ldw	r2,28(r2)
   2eab0:	e0bfd615 	stw	r2,-168(fp)
   2eab4:	e03fd715 	stw	zero,-164(fp)
   2eab8:	e1bfd617 	ldw	r6,-168(fp)
   2eabc:	e1ffd717 	ldw	r7,-164(fp)
   2eac0:	e13fd417 	ldw	r4,-176(fp)
   2eac4:	e17fd517 	ldw	r5,-172(fp)
   2eac8:	00429400 	call	42940 <__muldi3>
   2eacc:	1009883a 	mov	r4,r2
   2ead0:	180b883a 	mov	r5,r3
   2ead4:	e13e6915 	stw	r4,-1628(fp)
   2ead8:	e17e6a15 	stw	r5,-1624(fp)
   2eadc:	e0be6a17 	ldw	r2,-1624(fp)
   2eae0:	1004d83a 	srl	r2,r2,zero
   2eae4:	e0bfd815 	stw	r2,-160(fp)
   2eae8:	e03fd915 	stw	zero,-156(fp)
   2eaec:	e0bfd817 	ldw	r2,-160(fp)
   2eaf0:	e0be6b15 	stw	r2,-1620(fp)
   2eaf4:	e0be6917 	ldw	r2,-1628(fp)
   2eaf8:	e0be6c15 	stw	r2,-1616(fp)
   2eafc:	e0fd7e17 	ldw	r3,-2568(fp)
   2eb00:	e0be6c17 	ldw	r2,-1616(fp)
   2eb04:	1885883a 	add	r2,r3,r2
   2eb08:	e0bd7e15 	stw	r2,-2568(fp)
   2eb0c:	e0fd7e17 	ldw	r3,-2568(fp)
   2eb10:	e0be6c17 	ldw	r2,-1616(fp)
   2eb14:	1880022e 	bgeu	r3,r2,2eb20 <secp256k1_scalar_mul_512+0x449c>
   2eb18:	00c00044 	movi	r3,1
   2eb1c:	00000106 	br	2eb24 <secp256k1_scalar_mul_512+0x44a0>
   2eb20:	0007883a 	mov	r3,zero
   2eb24:	e0be6b17 	ldw	r2,-1620(fp)
   2eb28:	10c5883a 	add	r2,r2,r3
   2eb2c:	e0be6b15 	stw	r2,-1620(fp)
   2eb30:	e0fd7f17 	ldw	r3,-2564(fp)
   2eb34:	e0be6b17 	ldw	r2,-1620(fp)
   2eb38:	1885883a 	add	r2,r3,r2
   2eb3c:	e0bd7f15 	stw	r2,-2564(fp)
   2eb40:	e0fd7f17 	ldw	r3,-2564(fp)
   2eb44:	e0be6b17 	ldw	r2,-1620(fp)
   2eb48:	1880022e 	bgeu	r3,r2,2eb54 <secp256k1_scalar_mul_512+0x44d0>
   2eb4c:	00c00044 	movi	r3,1
   2eb50:	00000106 	br	2eb58 <secp256k1_scalar_mul_512+0x44d4>
   2eb54:	0007883a 	mov	r3,zero
   2eb58:	e0bd8017 	ldw	r2,-2560(fp)
   2eb5c:	10c5883a 	add	r2,r2,r3
   2eb60:	e0bd8015 	stw	r2,-2560(fp)
   2eb64:	e0fd7f17 	ldw	r3,-2564(fp)
   2eb68:	e0be6b17 	ldw	r2,-1620(fp)
   2eb6c:	1885803a 	cmpltu	r2,r3,r2
   2eb70:	10803fcc 	andi	r2,r2,255
   2eb74:	10001126 	beq	r2,zero,2ebbc <secp256k1_scalar_mul_512+0x4538>
   2eb78:	e0bd8017 	ldw	r2,-2560(fp)
   2eb7c:	1005003a 	cmpeq	r2,r2,zero
   2eb80:	10803fcc 	andi	r2,r2,255
   2eb84:	10000d26 	beq	r2,zero,2ebbc <secp256k1_scalar_mul_512+0x4538>
   2eb88:	d0a01617 	ldw	r2,-32680(gp)
   2eb8c:	10c00317 	ldw	r3,12(r2)
   2eb90:	008001b4 	movhi	r2,6
   2eb94:	10b02604 	addi	r2,r2,-16232
   2eb98:	d8800015 	stw	r2,0(sp)
   2eb9c:	01c08d84 	movi	r7,566
   2eba0:	018001b4 	movhi	r6,6
   2eba4:	31af9204 	addi	r6,r6,-16824
   2eba8:	014001b4 	movhi	r5,6
   2ebac:	296b3804 	addi	r5,r5,-21280
   2ebb0:	1809883a 	mov	r4,r3
   2ebb4:	00452600 	call	45260 <fprintf>
   2ebb8:	00450340 	call	45034 <abort>
    muladd(a->d[6], b->d[6]);
   2ebbc:	e0be8217 	ldw	r2,-1528(fp)
   2ebc0:	10800617 	ldw	r2,24(r2)
   2ebc4:	e0bfda15 	stw	r2,-152(fp)
   2ebc8:	e03fdb15 	stw	zero,-148(fp)
   2ebcc:	e0be8317 	ldw	r2,-1524(fp)
   2ebd0:	10800617 	ldw	r2,24(r2)
   2ebd4:	e0bfdc15 	stw	r2,-144(fp)
   2ebd8:	e03fdd15 	stw	zero,-140(fp)
   2ebdc:	e1bfdc17 	ldw	r6,-144(fp)
   2ebe0:	e1ffdd17 	ldw	r7,-140(fp)
   2ebe4:	e13fda17 	ldw	r4,-152(fp)
   2ebe8:	e17fdb17 	ldw	r5,-148(fp)
   2ebec:	00429400 	call	42940 <__muldi3>
   2ebf0:	1009883a 	mov	r4,r2
   2ebf4:	180b883a 	mov	r5,r3
   2ebf8:	e13e6d15 	stw	r4,-1612(fp)
   2ebfc:	e17e6e15 	stw	r5,-1608(fp)
   2ec00:	e0be6e17 	ldw	r2,-1608(fp)
   2ec04:	1004d83a 	srl	r2,r2,zero
   2ec08:	e0bfde15 	stw	r2,-136(fp)
   2ec0c:	e03fdf15 	stw	zero,-132(fp)
   2ec10:	e0bfde17 	ldw	r2,-136(fp)
   2ec14:	e0be6f15 	stw	r2,-1604(fp)
   2ec18:	e0be6d17 	ldw	r2,-1612(fp)
   2ec1c:	e0be7015 	stw	r2,-1600(fp)
   2ec20:	e0fd7e17 	ldw	r3,-2568(fp)
   2ec24:	e0be7017 	ldw	r2,-1600(fp)
   2ec28:	1885883a 	add	r2,r3,r2
   2ec2c:	e0bd7e15 	stw	r2,-2568(fp)
   2ec30:	e0fd7e17 	ldw	r3,-2568(fp)
   2ec34:	e0be7017 	ldw	r2,-1600(fp)
   2ec38:	1880022e 	bgeu	r3,r2,2ec44 <secp256k1_scalar_mul_512+0x45c0>
   2ec3c:	00c00044 	movi	r3,1
   2ec40:	00000106 	br	2ec48 <secp256k1_scalar_mul_512+0x45c4>
   2ec44:	0007883a 	mov	r3,zero
   2ec48:	e0be6f17 	ldw	r2,-1604(fp)
   2ec4c:	10c5883a 	add	r2,r2,r3
   2ec50:	e0be6f15 	stw	r2,-1604(fp)
   2ec54:	e0fd7f17 	ldw	r3,-2564(fp)
   2ec58:	e0be6f17 	ldw	r2,-1604(fp)
   2ec5c:	1885883a 	add	r2,r3,r2
   2ec60:	e0bd7f15 	stw	r2,-2564(fp)
   2ec64:	e0fd7f17 	ldw	r3,-2564(fp)
   2ec68:	e0be6f17 	ldw	r2,-1604(fp)
   2ec6c:	1880022e 	bgeu	r3,r2,2ec78 <secp256k1_scalar_mul_512+0x45f4>
   2ec70:	00c00044 	movi	r3,1
   2ec74:	00000106 	br	2ec7c <secp256k1_scalar_mul_512+0x45f8>
   2ec78:	0007883a 	mov	r3,zero
   2ec7c:	e0bd8017 	ldw	r2,-2560(fp)
   2ec80:	10c5883a 	add	r2,r2,r3
   2ec84:	e0bd8015 	stw	r2,-2560(fp)
   2ec88:	e0fd7f17 	ldw	r3,-2564(fp)
   2ec8c:	e0be6f17 	ldw	r2,-1604(fp)
   2ec90:	1885803a 	cmpltu	r2,r3,r2
   2ec94:	10803fcc 	andi	r2,r2,255
   2ec98:	10001126 	beq	r2,zero,2ece0 <secp256k1_scalar_mul_512+0x465c>
   2ec9c:	e0bd8017 	ldw	r2,-2560(fp)
   2eca0:	1005003a 	cmpeq	r2,r2,zero
   2eca4:	10803fcc 	andi	r2,r2,255
   2eca8:	10000d26 	beq	r2,zero,2ece0 <secp256k1_scalar_mul_512+0x465c>
   2ecac:	d0a01617 	ldw	r2,-32680(gp)
   2ecb0:	10c00317 	ldw	r3,12(r2)
   2ecb4:	008001b4 	movhi	r2,6
   2ecb8:	10b02604 	addi	r2,r2,-16232
   2ecbc:	d8800015 	stw	r2,0(sp)
   2ecc0:	01c08dc4 	movi	r7,567
   2ecc4:	018001b4 	movhi	r6,6
   2ecc8:	31af9204 	addi	r6,r6,-16824
   2eccc:	014001b4 	movhi	r5,6
   2ecd0:	296b3804 	addi	r5,r5,-21280
   2ecd4:	1809883a 	mov	r4,r3
   2ecd8:	00452600 	call	45260 <fprintf>
   2ecdc:	00450340 	call	45034 <abort>
    muladd(a->d[7], b->d[5]);
   2ece0:	e0be8217 	ldw	r2,-1528(fp)
   2ece4:	10800717 	ldw	r2,28(r2)
   2ece8:	e0bfe015 	stw	r2,-128(fp)
   2ecec:	e03fe115 	stw	zero,-124(fp)
   2ecf0:	e0be8317 	ldw	r2,-1524(fp)
   2ecf4:	10800517 	ldw	r2,20(r2)
   2ecf8:	e0bfe215 	stw	r2,-120(fp)
   2ecfc:	e03fe315 	stw	zero,-116(fp)
   2ed00:	e1bfe217 	ldw	r6,-120(fp)
   2ed04:	e1ffe317 	ldw	r7,-116(fp)
   2ed08:	e13fe017 	ldw	r4,-128(fp)
   2ed0c:	e17fe117 	ldw	r5,-124(fp)
   2ed10:	00429400 	call	42940 <__muldi3>
   2ed14:	1009883a 	mov	r4,r2
   2ed18:	180b883a 	mov	r5,r3
   2ed1c:	e13e7115 	stw	r4,-1596(fp)
   2ed20:	e17e7215 	stw	r5,-1592(fp)
   2ed24:	e0be7217 	ldw	r2,-1592(fp)
   2ed28:	1004d83a 	srl	r2,r2,zero
   2ed2c:	e0bfe415 	stw	r2,-112(fp)
   2ed30:	e03fe515 	stw	zero,-108(fp)
   2ed34:	e0bfe417 	ldw	r2,-112(fp)
   2ed38:	e0be7315 	stw	r2,-1588(fp)
   2ed3c:	e0be7117 	ldw	r2,-1596(fp)
   2ed40:	e0be7415 	stw	r2,-1584(fp)
   2ed44:	e0fd7e17 	ldw	r3,-2568(fp)
   2ed48:	e0be7417 	ldw	r2,-1584(fp)
   2ed4c:	1885883a 	add	r2,r3,r2
   2ed50:	e0bd7e15 	stw	r2,-2568(fp)
   2ed54:	e0fd7e17 	ldw	r3,-2568(fp)
   2ed58:	e0be7417 	ldw	r2,-1584(fp)
   2ed5c:	1880022e 	bgeu	r3,r2,2ed68 <secp256k1_scalar_mul_512+0x46e4>
   2ed60:	00800044 	movi	r2,1
   2ed64:	00000106 	br	2ed6c <secp256k1_scalar_mul_512+0x46e8>
   2ed68:	0005883a 	mov	r2,zero
   2ed6c:	e0fe7317 	ldw	r3,-1588(fp)
   2ed70:	1885883a 	add	r2,r3,r2
   2ed74:	e0be7315 	stw	r2,-1588(fp)
   2ed78:	e0fd7f17 	ldw	r3,-2564(fp)
   2ed7c:	e0be7317 	ldw	r2,-1588(fp)
   2ed80:	1885883a 	add	r2,r3,r2
   2ed84:	e0bd7f15 	stw	r2,-2564(fp)
   2ed88:	e0fd7f17 	ldw	r3,-2564(fp)
   2ed8c:	e0be7317 	ldw	r2,-1588(fp)
   2ed90:	1880022e 	bgeu	r3,r2,2ed9c <secp256k1_scalar_mul_512+0x4718>
   2ed94:	00800044 	movi	r2,1
   2ed98:	00000106 	br	2eda0 <secp256k1_scalar_mul_512+0x471c>
   2ed9c:	0005883a 	mov	r2,zero
   2eda0:	e0fd8017 	ldw	r3,-2560(fp)
   2eda4:	1885883a 	add	r2,r3,r2
   2eda8:	e0bd8015 	stw	r2,-2560(fp)
   2edac:	e0fd7f17 	ldw	r3,-2564(fp)
   2edb0:	e0be7317 	ldw	r2,-1588(fp)
   2edb4:	1885803a 	cmpltu	r2,r3,r2
   2edb8:	10803fcc 	andi	r2,r2,255
   2edbc:	10001126 	beq	r2,zero,2ee04 <secp256k1_scalar_mul_512+0x4780>
   2edc0:	e0bd8017 	ldw	r2,-2560(fp)
   2edc4:	1005003a 	cmpeq	r2,r2,zero
   2edc8:	10803fcc 	andi	r2,r2,255
   2edcc:	10000d26 	beq	r2,zero,2ee04 <secp256k1_scalar_mul_512+0x4780>
   2edd0:	d0a01617 	ldw	r2,-32680(gp)
   2edd4:	10c00317 	ldw	r3,12(r2)
   2edd8:	008001b4 	movhi	r2,6
   2eddc:	10b02604 	addi	r2,r2,-16232
   2ede0:	d8800015 	stw	r2,0(sp)
   2ede4:	01c08e04 	movi	r7,568
   2ede8:	018001b4 	movhi	r6,6
   2edec:	31af9204 	addi	r6,r6,-16824
   2edf0:	014001b4 	movhi	r5,6
   2edf4:	296b3804 	addi	r5,r5,-21280
   2edf8:	1809883a 	mov	r4,r3
   2edfc:	00452600 	call	45260 <fprintf>
   2ee00:	00450340 	call	45034 <abort>
    extract(l[12]);
   2ee04:	e0be8117 	ldw	r2,-1532(fp)
   2ee08:	10800c04 	addi	r2,r2,48
   2ee0c:	e0fd7e17 	ldw	r3,-2568(fp)
   2ee10:	10c00015 	stw	r3,0(r2)
   2ee14:	e0bd7f17 	ldw	r2,-2564(fp)
   2ee18:	e0bd7e15 	stw	r2,-2568(fp)
   2ee1c:	e0bd8017 	ldw	r2,-2560(fp)
   2ee20:	e0bd7f15 	stw	r2,-2564(fp)
   2ee24:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[6], b->d[7]);
   2ee28:	e0be8217 	ldw	r2,-1528(fp)
   2ee2c:	10800617 	ldw	r2,24(r2)
   2ee30:	e0bfe615 	stw	r2,-104(fp)
   2ee34:	e03fe715 	stw	zero,-100(fp)
   2ee38:	e0be8317 	ldw	r2,-1524(fp)
   2ee3c:	10800717 	ldw	r2,28(r2)
   2ee40:	e0bfe815 	stw	r2,-96(fp)
   2ee44:	e03fe915 	stw	zero,-92(fp)
   2ee48:	e1bfe817 	ldw	r6,-96(fp)
   2ee4c:	e1ffe917 	ldw	r7,-92(fp)
   2ee50:	e13fe617 	ldw	r4,-104(fp)
   2ee54:	e17fe717 	ldw	r5,-100(fp)
   2ee58:	00429400 	call	42940 <__muldi3>
   2ee5c:	1009883a 	mov	r4,r2
   2ee60:	180b883a 	mov	r5,r3
   2ee64:	e13e7515 	stw	r4,-1580(fp)
   2ee68:	e17e7615 	stw	r5,-1576(fp)
   2ee6c:	e0be7617 	ldw	r2,-1576(fp)
   2ee70:	1004d83a 	srl	r2,r2,zero
   2ee74:	e0bfea15 	stw	r2,-88(fp)
   2ee78:	e03feb15 	stw	zero,-84(fp)
   2ee7c:	e0bfea17 	ldw	r2,-88(fp)
   2ee80:	e0be7715 	stw	r2,-1572(fp)
   2ee84:	e0be7517 	ldw	r2,-1580(fp)
   2ee88:	e0be7815 	stw	r2,-1568(fp)
   2ee8c:	e0fd7e17 	ldw	r3,-2568(fp)
   2ee90:	e0be7817 	ldw	r2,-1568(fp)
   2ee94:	1885883a 	add	r2,r3,r2
   2ee98:	e0bd7e15 	stw	r2,-2568(fp)
   2ee9c:	e0fd7e17 	ldw	r3,-2568(fp)
   2eea0:	e0be7817 	ldw	r2,-1568(fp)
   2eea4:	1880022e 	bgeu	r3,r2,2eeb0 <secp256k1_scalar_mul_512+0x482c>
   2eea8:	00800044 	movi	r2,1
   2eeac:	00000106 	br	2eeb4 <secp256k1_scalar_mul_512+0x4830>
   2eeb0:	0005883a 	mov	r2,zero
   2eeb4:	e0fe7717 	ldw	r3,-1572(fp)
   2eeb8:	1885883a 	add	r2,r3,r2
   2eebc:	e0be7715 	stw	r2,-1572(fp)
   2eec0:	e0fd7f17 	ldw	r3,-2564(fp)
   2eec4:	e0be7717 	ldw	r2,-1572(fp)
   2eec8:	1885883a 	add	r2,r3,r2
   2eecc:	e0bd7f15 	stw	r2,-2564(fp)
   2eed0:	e0fd7f17 	ldw	r3,-2564(fp)
   2eed4:	e0be7717 	ldw	r2,-1572(fp)
   2eed8:	1880022e 	bgeu	r3,r2,2eee4 <secp256k1_scalar_mul_512+0x4860>
   2eedc:	00800044 	movi	r2,1
   2eee0:	00000106 	br	2eee8 <secp256k1_scalar_mul_512+0x4864>
   2eee4:	0005883a 	mov	r2,zero
   2eee8:	e0fd8017 	ldw	r3,-2560(fp)
   2eeec:	1885883a 	add	r2,r3,r2
   2eef0:	e0bd8015 	stw	r2,-2560(fp)
   2eef4:	e0fd7f17 	ldw	r3,-2564(fp)
   2eef8:	e0be7717 	ldw	r2,-1572(fp)
   2eefc:	1885803a 	cmpltu	r2,r3,r2
   2ef00:	10803fcc 	andi	r2,r2,255
   2ef04:	10001126 	beq	r2,zero,2ef4c <secp256k1_scalar_mul_512+0x48c8>
   2ef08:	e0bd8017 	ldw	r2,-2560(fp)
   2ef0c:	1005003a 	cmpeq	r2,r2,zero
   2ef10:	10803fcc 	andi	r2,r2,255
   2ef14:	10000d26 	beq	r2,zero,2ef4c <secp256k1_scalar_mul_512+0x48c8>
   2ef18:	d0a01617 	ldw	r2,-32680(gp)
   2ef1c:	10c00317 	ldw	r3,12(r2)
   2ef20:	008001b4 	movhi	r2,6
   2ef24:	10b02604 	addi	r2,r2,-16232
   2ef28:	d8800015 	stw	r2,0(sp)
   2ef2c:	01c08e84 	movi	r7,570
   2ef30:	018001b4 	movhi	r6,6
   2ef34:	31af9204 	addi	r6,r6,-16824
   2ef38:	014001b4 	movhi	r5,6
   2ef3c:	296b3804 	addi	r5,r5,-21280
   2ef40:	1809883a 	mov	r4,r3
   2ef44:	00452600 	call	45260 <fprintf>
   2ef48:	00450340 	call	45034 <abort>
    muladd(a->d[7], b->d[6]);
   2ef4c:	e0be8217 	ldw	r2,-1528(fp)
   2ef50:	10800717 	ldw	r2,28(r2)
   2ef54:	e0bfec15 	stw	r2,-80(fp)
   2ef58:	e03fed15 	stw	zero,-76(fp)
   2ef5c:	e0be8317 	ldw	r2,-1524(fp)
   2ef60:	10800617 	ldw	r2,24(r2)
   2ef64:	e0bfee15 	stw	r2,-72(fp)
   2ef68:	e03fef15 	stw	zero,-68(fp)
   2ef6c:	e1bfee17 	ldw	r6,-72(fp)
   2ef70:	e1ffef17 	ldw	r7,-68(fp)
   2ef74:	e13fec17 	ldw	r4,-80(fp)
   2ef78:	e17fed17 	ldw	r5,-76(fp)
   2ef7c:	00429400 	call	42940 <__muldi3>
   2ef80:	1009883a 	mov	r4,r2
   2ef84:	180b883a 	mov	r5,r3
   2ef88:	e13e7915 	stw	r4,-1564(fp)
   2ef8c:	e17e7a15 	stw	r5,-1560(fp)
   2ef90:	e0be7a17 	ldw	r2,-1560(fp)
   2ef94:	1004d83a 	srl	r2,r2,zero
   2ef98:	e0bff015 	stw	r2,-64(fp)
   2ef9c:	e03ff115 	stw	zero,-60(fp)
   2efa0:	e0bff017 	ldw	r2,-64(fp)
   2efa4:	e0be7b15 	stw	r2,-1556(fp)
   2efa8:	e0be7917 	ldw	r2,-1564(fp)
   2efac:	e0be7c15 	stw	r2,-1552(fp)
   2efb0:	e0fd7e17 	ldw	r3,-2568(fp)
   2efb4:	e0be7c17 	ldw	r2,-1552(fp)
   2efb8:	1885883a 	add	r2,r3,r2
   2efbc:	e0bd7e15 	stw	r2,-2568(fp)
   2efc0:	e0fd7e17 	ldw	r3,-2568(fp)
   2efc4:	e0be7c17 	ldw	r2,-1552(fp)
   2efc8:	1880022e 	bgeu	r3,r2,2efd4 <secp256k1_scalar_mul_512+0x4950>
   2efcc:	00800044 	movi	r2,1
   2efd0:	00000106 	br	2efd8 <secp256k1_scalar_mul_512+0x4954>
   2efd4:	0005883a 	mov	r2,zero
   2efd8:	e0fe7b17 	ldw	r3,-1556(fp)
   2efdc:	1885883a 	add	r2,r3,r2
   2efe0:	e0be7b15 	stw	r2,-1556(fp)
   2efe4:	e0fd7f17 	ldw	r3,-2564(fp)
   2efe8:	e0be7b17 	ldw	r2,-1556(fp)
   2efec:	1885883a 	add	r2,r3,r2
   2eff0:	e0bd7f15 	stw	r2,-2564(fp)
   2eff4:	e0fd7f17 	ldw	r3,-2564(fp)
   2eff8:	e0be7b17 	ldw	r2,-1556(fp)
   2effc:	1880022e 	bgeu	r3,r2,2f008 <secp256k1_scalar_mul_512+0x4984>
   2f000:	00800044 	movi	r2,1
   2f004:	00000106 	br	2f00c <secp256k1_scalar_mul_512+0x4988>
   2f008:	0005883a 	mov	r2,zero
   2f00c:	e0fd8017 	ldw	r3,-2560(fp)
   2f010:	1885883a 	add	r2,r3,r2
   2f014:	e0bd8015 	stw	r2,-2560(fp)
   2f018:	e0fd7f17 	ldw	r3,-2564(fp)
   2f01c:	e0be7b17 	ldw	r2,-1556(fp)
   2f020:	1885803a 	cmpltu	r2,r3,r2
   2f024:	10803fcc 	andi	r2,r2,255
   2f028:	10001126 	beq	r2,zero,2f070 <secp256k1_scalar_mul_512+0x49ec>
   2f02c:	e0bd8017 	ldw	r2,-2560(fp)
   2f030:	1005003a 	cmpeq	r2,r2,zero
   2f034:	10803fcc 	andi	r2,r2,255
   2f038:	10000d26 	beq	r2,zero,2f070 <secp256k1_scalar_mul_512+0x49ec>
   2f03c:	d0a01617 	ldw	r2,-32680(gp)
   2f040:	10c00317 	ldw	r3,12(r2)
   2f044:	008001b4 	movhi	r2,6
   2f048:	10b02604 	addi	r2,r2,-16232
   2f04c:	d8800015 	stw	r2,0(sp)
   2f050:	01c08ec4 	movi	r7,571
   2f054:	018001b4 	movhi	r6,6
   2f058:	31af9204 	addi	r6,r6,-16824
   2f05c:	014001b4 	movhi	r5,6
   2f060:	296b3804 	addi	r5,r5,-21280
   2f064:	1809883a 	mov	r4,r3
   2f068:	00452600 	call	45260 <fprintf>
   2f06c:	00450340 	call	45034 <abort>
    extract(l[13]);
   2f070:	e0be8117 	ldw	r2,-1532(fp)
   2f074:	10800d04 	addi	r2,r2,52
   2f078:	e0fd7e17 	ldw	r3,-2568(fp)
   2f07c:	10c00015 	stw	r3,0(r2)
   2f080:	e0bd7f17 	ldw	r2,-2564(fp)
   2f084:	e0bd7e15 	stw	r2,-2568(fp)
   2f088:	e0bd8017 	ldw	r2,-2560(fp)
   2f08c:	e0bd7f15 	stw	r2,-2564(fp)
   2f090:	e03d8015 	stw	zero,-2560(fp)
    muladd_fast(a->d[7], b->d[7]);
   2f094:	e0be8217 	ldw	r2,-1528(fp)
   2f098:	10800717 	ldw	r2,28(r2)
   2f09c:	e0bff215 	stw	r2,-56(fp)
   2f0a0:	e03ff315 	stw	zero,-52(fp)
   2f0a4:	e0be8317 	ldw	r2,-1524(fp)
   2f0a8:	10800717 	ldw	r2,28(r2)
   2f0ac:	e0bff415 	stw	r2,-48(fp)
   2f0b0:	e03ff515 	stw	zero,-44(fp)
   2f0b4:	e1bff417 	ldw	r6,-48(fp)
   2f0b8:	e1fff517 	ldw	r7,-44(fp)
   2f0bc:	e13ff217 	ldw	r4,-56(fp)
   2f0c0:	e17ff317 	ldw	r5,-52(fp)
   2f0c4:	00429400 	call	42940 <__muldi3>
   2f0c8:	1009883a 	mov	r4,r2
   2f0cc:	180b883a 	mov	r5,r3
   2f0d0:	e13e7d15 	stw	r4,-1548(fp)
   2f0d4:	e17e7e15 	stw	r5,-1544(fp)
   2f0d8:	e0be7e17 	ldw	r2,-1544(fp)
   2f0dc:	1004d83a 	srl	r2,r2,zero
   2f0e0:	e0bff615 	stw	r2,-40(fp)
   2f0e4:	e03ff715 	stw	zero,-36(fp)
   2f0e8:	e0bff617 	ldw	r2,-40(fp)
   2f0ec:	e0be7f15 	stw	r2,-1540(fp)
   2f0f0:	e0be7d17 	ldw	r2,-1548(fp)
   2f0f4:	e0be8015 	stw	r2,-1536(fp)
   2f0f8:	e0fd7e17 	ldw	r3,-2568(fp)
   2f0fc:	e0be8017 	ldw	r2,-1536(fp)
   2f100:	1885883a 	add	r2,r3,r2
   2f104:	e0bd7e15 	stw	r2,-2568(fp)
   2f108:	e0fd7e17 	ldw	r3,-2568(fp)
   2f10c:	e0be8017 	ldw	r2,-1536(fp)
   2f110:	1880022e 	bgeu	r3,r2,2f11c <secp256k1_scalar_mul_512+0x4a98>
   2f114:	00800044 	movi	r2,1
   2f118:	00000106 	br	2f120 <secp256k1_scalar_mul_512+0x4a9c>
   2f11c:	0005883a 	mov	r2,zero
   2f120:	e0fe7f17 	ldw	r3,-1540(fp)
   2f124:	1885883a 	add	r2,r3,r2
   2f128:	e0be7f15 	stw	r2,-1540(fp)
   2f12c:	e0fd7f17 	ldw	r3,-2564(fp)
   2f130:	e0be7f17 	ldw	r2,-1540(fp)
   2f134:	1885883a 	add	r2,r3,r2
   2f138:	e0bd7f15 	stw	r2,-2564(fp)
   2f13c:	e0fd7f17 	ldw	r3,-2564(fp)
   2f140:	e0be7f17 	ldw	r2,-1540(fp)
   2f144:	1885803a 	cmpltu	r2,r3,r2
   2f148:	10803fcc 	andi	r2,r2,255
   2f14c:	10000d26 	beq	r2,zero,2f184 <secp256k1_scalar_mul_512+0x4b00>
   2f150:	d0a01617 	ldw	r2,-32680(gp)
   2f154:	10c00317 	ldw	r3,12(r2)
   2f158:	008001b4 	movhi	r2,6
   2f15c:	10b00904 	addi	r2,r2,-16348
   2f160:	d8800015 	stw	r2,0(sp)
   2f164:	01c08f44 	movi	r7,573
   2f168:	018001b4 	movhi	r6,6
   2f16c:	31af9204 	addi	r6,r6,-16824
   2f170:	014001b4 	movhi	r5,6
   2f174:	296b3804 	addi	r5,r5,-21280
   2f178:	1809883a 	mov	r4,r3
   2f17c:	00452600 	call	45260 <fprintf>
   2f180:	00450340 	call	45034 <abort>
    extract_fast(l[14]);
   2f184:	e0be8117 	ldw	r2,-1532(fp)
   2f188:	10800e04 	addi	r2,r2,56
   2f18c:	e0fd7e17 	ldw	r3,-2568(fp)
   2f190:	10c00015 	stw	r3,0(r2)
   2f194:	e0bd7f17 	ldw	r2,-2564(fp)
   2f198:	e0bd7e15 	stw	r2,-2568(fp)
   2f19c:	e03d7f15 	stw	zero,-2564(fp)
   2f1a0:	e0bd8017 	ldw	r2,-2560(fp)
   2f1a4:	1004c03a 	cmpne	r2,r2,zero
   2f1a8:	10803fcc 	andi	r2,r2,255
   2f1ac:	10000d26 	beq	r2,zero,2f1e4 <secp256k1_scalar_mul_512+0x4b60>
   2f1b0:	d0a01617 	ldw	r2,-32680(gp)
   2f1b4:	10c00317 	ldw	r3,12(r2)
   2f1b8:	008001b4 	movhi	r2,6
   2f1bc:	10b01104 	addi	r2,r2,-16316
   2f1c0:	d8800015 	stw	r2,0(sp)
   2f1c4:	01c08f84 	movi	r7,574
   2f1c8:	018001b4 	movhi	r6,6
   2f1cc:	31af9204 	addi	r6,r6,-16824
   2f1d0:	014001b4 	movhi	r5,6
   2f1d4:	296b3804 	addi	r5,r5,-21280
   2f1d8:	1809883a 	mov	r4,r3
   2f1dc:	00452600 	call	45260 <fprintf>
   2f1e0:	00450340 	call	45034 <abort>
    VERIFY_CHECK(c1 == 0);
   2f1e4:	e0bd7f17 	ldw	r2,-2564(fp)
   2f1e8:	1004c03a 	cmpne	r2,r2,zero
   2f1ec:	10803fcc 	andi	r2,r2,255
   2f1f0:	10000d26 	beq	r2,zero,2f228 <secp256k1_scalar_mul_512+0x4ba4>
   2f1f4:	d0a01617 	ldw	r2,-32680(gp)
   2f1f8:	10c00317 	ldw	r3,12(r2)
   2f1fc:	008001b4 	movhi	r2,6
   2f200:	10b07304 	addi	r2,r2,-15924
   2f204:	d8800015 	stw	r2,0(sp)
   2f208:	01c08fc4 	movi	r7,575
   2f20c:	018001b4 	movhi	r6,6
   2f210:	31af9204 	addi	r6,r6,-16824
   2f214:	014001b4 	movhi	r5,6
   2f218:	296b3804 	addi	r5,r5,-21280
   2f21c:	1809883a 	mov	r4,r3
   2f220:	00452600 	call	45260 <fprintf>
   2f224:	00450340 	call	45034 <abort>
    l[15] = c0;
   2f228:	e0be8117 	ldw	r2,-1532(fp)
   2f22c:	10800f04 	addi	r2,r2,60
   2f230:	e0fd7e17 	ldw	r3,-2568(fp)
   2f234:	10c00015 	stw	r3,0(r2)
}
   2f238:	0001883a 	nop
   2f23c:	e6fff804 	addi	sp,fp,-32
   2f240:	dfc00917 	ldw	ra,36(sp)
   2f244:	df000817 	ldw	fp,32(sp)
   2f248:	ddc00717 	ldw	r23,28(sp)
   2f24c:	dd800617 	ldw	r22,24(sp)
   2f250:	dd400517 	ldw	r21,20(sp)
   2f254:	dd000417 	ldw	r20,16(sp)
   2f258:	dcc00317 	ldw	r19,12(sp)
   2f25c:	dc800217 	ldw	r18,8(sp)
   2f260:	dc400117 	ldw	r17,4(sp)
   2f264:	dc000017 	ldw	r16,0(sp)
   2f268:	dec00a04 	addi	sp,sp,40
   2f26c:	f800283a 	ret

0002f270 <secp256k1_scalar_sqr_512>:

static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar *a) {
   2f270:	defe5c04 	addi	sp,sp,-1680
   2f274:	dfc1a315 	stw	ra,1676(sp)
   2f278:	df01a215 	stw	fp,1672(sp)
   2f27c:	ddc1a115 	stw	r23,1668(sp)
   2f280:	dd81a015 	stw	r22,1664(sp)
   2f284:	dd419f15 	stw	r21,1660(sp)
   2f288:	dd019e15 	stw	r20,1656(sp)
   2f28c:	dcc19d15 	stw	r19,1652(sp)
   2f290:	dc819c15 	stw	r18,1648(sp)
   2f294:	dc419b15 	stw	r17,1644(sp)
   2f298:	dc019a15 	stw	r16,1640(sp)
   2f29c:	df01a204 	addi	fp,sp,1672
   2f2a0:	e13f2a15 	stw	r4,-856(fp)
   2f2a4:	e17f2b15 	stw	r5,-852(fp)
    /* 96 bit accumulator. */
    uint32_t c0 = 0, c1 = 0, c2 = 0;
   2f2a8:	e03e5f15 	stw	zero,-1668(fp)
   2f2ac:	e03e6015 	stw	zero,-1664(fp)
   2f2b0:	e03e6115 	stw	zero,-1660(fp)

    /* l[0..15] = a[0..7]^2. */
    muladd_fast(a->d[0], a->d[0]);
   2f2b4:	e0bf2b17 	ldw	r2,-852(fp)
   2f2b8:	10800017 	ldw	r2,0(r2)
   2f2bc:	1013883a 	mov	r9,r2
   2f2c0:	0015883a 	mov	r10,zero
   2f2c4:	e0bf2b17 	ldw	r2,-852(fp)
   2f2c8:	10800017 	ldw	r2,0(r2)
   2f2cc:	100f883a 	mov	r7,r2
   2f2d0:	0011883a 	mov	r8,zero
   2f2d4:	380d883a 	mov	r6,r7
   2f2d8:	400f883a 	mov	r7,r8
   2f2dc:	4809883a 	mov	r4,r9
   2f2e0:	500b883a 	mov	r5,r10
   2f2e4:	00429400 	call	42940 <__muldi3>
   2f2e8:	1009883a 	mov	r4,r2
   2f2ec:	180b883a 	mov	r5,r3
   2f2f0:	e13e6215 	stw	r4,-1656(fp)
   2f2f4:	e17e6315 	stw	r5,-1652(fp)
   2f2f8:	e0be6317 	ldw	r2,-1652(fp)
   2f2fc:	1020d83a 	srl	r16,r2,zero
   2f300:	0023883a 	mov	r17,zero
   2f304:	e43e6415 	stw	r16,-1648(fp)
   2f308:	e0be6217 	ldw	r2,-1656(fp)
   2f30c:	e0be6515 	stw	r2,-1644(fp)
   2f310:	e0fe5f17 	ldw	r3,-1668(fp)
   2f314:	e0be6517 	ldw	r2,-1644(fp)
   2f318:	1885883a 	add	r2,r3,r2
   2f31c:	e0be5f15 	stw	r2,-1668(fp)
   2f320:	e0fe5f17 	ldw	r3,-1668(fp)
   2f324:	e0be6517 	ldw	r2,-1644(fp)
   2f328:	1880022e 	bgeu	r3,r2,2f334 <secp256k1_scalar_sqr_512+0xc4>
   2f32c:	00c00044 	movi	r3,1
   2f330:	00000106 	br	2f338 <secp256k1_scalar_sqr_512+0xc8>
   2f334:	0007883a 	mov	r3,zero
   2f338:	e0be6417 	ldw	r2,-1648(fp)
   2f33c:	10c5883a 	add	r2,r2,r3
   2f340:	e0be6415 	stw	r2,-1648(fp)
   2f344:	e0fe6017 	ldw	r3,-1664(fp)
   2f348:	e0be6417 	ldw	r2,-1648(fp)
   2f34c:	1885883a 	add	r2,r3,r2
   2f350:	e0be6015 	stw	r2,-1664(fp)
   2f354:	e0fe6017 	ldw	r3,-1664(fp)
   2f358:	e0be6417 	ldw	r2,-1648(fp)
   2f35c:	1885803a 	cmpltu	r2,r3,r2
   2f360:	10803fcc 	andi	r2,r2,255
   2f364:	10000d26 	beq	r2,zero,2f39c <secp256k1_scalar_sqr_512+0x12c>
   2f368:	d0a01617 	ldw	r2,-32680(gp)
   2f36c:	10c00317 	ldw	r3,12(r2)
   2f370:	008001b4 	movhi	r2,6
   2f374:	10b00904 	addi	r2,r2,-16348
   2f378:	d8800015 	stw	r2,0(sp)
   2f37c:	01c09204 	movi	r7,584
   2f380:	018001b4 	movhi	r6,6
   2f384:	31af9204 	addi	r6,r6,-16824
   2f388:	014001b4 	movhi	r5,6
   2f38c:	296b3804 	addi	r5,r5,-21280
   2f390:	1809883a 	mov	r4,r3
   2f394:	00452600 	call	45260 <fprintf>
   2f398:	00450340 	call	45034 <abort>
    extract_fast(l[0]);
   2f39c:	e0ff2a17 	ldw	r3,-856(fp)
   2f3a0:	e0be5f17 	ldw	r2,-1668(fp)
   2f3a4:	18800015 	stw	r2,0(r3)
   2f3a8:	e0be6017 	ldw	r2,-1664(fp)
   2f3ac:	e0be5f15 	stw	r2,-1668(fp)
   2f3b0:	e03e6015 	stw	zero,-1664(fp)
   2f3b4:	e0be6117 	ldw	r2,-1660(fp)
   2f3b8:	1004c03a 	cmpne	r2,r2,zero
   2f3bc:	10803fcc 	andi	r2,r2,255
   2f3c0:	10000d26 	beq	r2,zero,2f3f8 <secp256k1_scalar_sqr_512+0x188>
   2f3c4:	d0a01617 	ldw	r2,-32680(gp)
   2f3c8:	10c00317 	ldw	r3,12(r2)
   2f3cc:	008001b4 	movhi	r2,6
   2f3d0:	10b01104 	addi	r2,r2,-16316
   2f3d4:	d8800015 	stw	r2,0(sp)
   2f3d8:	01c09244 	movi	r7,585
   2f3dc:	018001b4 	movhi	r6,6
   2f3e0:	31af9204 	addi	r6,r6,-16824
   2f3e4:	014001b4 	movhi	r5,6
   2f3e8:	296b3804 	addi	r5,r5,-21280
   2f3ec:	1809883a 	mov	r4,r3
   2f3f0:	00452600 	call	45260 <fprintf>
   2f3f4:	00450340 	call	45034 <abort>
    muladd2(a->d[0], a->d[1]);
   2f3f8:	e0bf2b17 	ldw	r2,-852(fp)
   2f3fc:	10800017 	ldw	r2,0(r2)
   2f400:	102d883a 	mov	r22,r2
   2f404:	002f883a 	mov	r23,zero
   2f408:	e0bf2b17 	ldw	r2,-852(fp)
   2f40c:	10800117 	ldw	r2,4(r2)
   2f410:	1029883a 	mov	r20,r2
   2f414:	002b883a 	mov	r21,zero
   2f418:	a00d883a 	mov	r6,r20
   2f41c:	a80f883a 	mov	r7,r21
   2f420:	b009883a 	mov	r4,r22
   2f424:	b80b883a 	mov	r5,r23
   2f428:	00429400 	call	42940 <__muldi3>
   2f42c:	1009883a 	mov	r4,r2
   2f430:	180b883a 	mov	r5,r3
   2f434:	e13e6615 	stw	r4,-1640(fp)
   2f438:	e17e6715 	stw	r5,-1636(fp)
   2f43c:	e0be6717 	ldw	r2,-1636(fp)
   2f440:	1024d83a 	srl	r18,r2,zero
   2f444:	0027883a 	mov	r19,zero
   2f448:	e4be6815 	stw	r18,-1632(fp)
   2f44c:	e0be6617 	ldw	r2,-1640(fp)
   2f450:	e0be6915 	stw	r2,-1628(fp)
   2f454:	e0fe6817 	ldw	r3,-1632(fp)
   2f458:	e0be6817 	ldw	r2,-1632(fp)
   2f45c:	1885883a 	add	r2,r3,r2
   2f460:	e0be6a15 	stw	r2,-1624(fp)
   2f464:	e0fe6a17 	ldw	r3,-1624(fp)
   2f468:	e0be6817 	ldw	r2,-1632(fp)
   2f46c:	1880022e 	bgeu	r3,r2,2f478 <secp256k1_scalar_sqr_512+0x208>
   2f470:	00c00044 	movi	r3,1
   2f474:	00000106 	br	2f47c <secp256k1_scalar_sqr_512+0x20c>
   2f478:	0007883a 	mov	r3,zero
   2f47c:	e0be6117 	ldw	r2,-1660(fp)
   2f480:	10c5883a 	add	r2,r2,r3
   2f484:	e0be6115 	stw	r2,-1660(fp)
   2f488:	e0fe6a17 	ldw	r3,-1624(fp)
   2f48c:	e0be6817 	ldw	r2,-1632(fp)
   2f490:	1885803a 	cmpltu	r2,r3,r2
   2f494:	10803fcc 	andi	r2,r2,255
   2f498:	10001126 	beq	r2,zero,2f4e0 <secp256k1_scalar_sqr_512+0x270>
   2f49c:	e0be6117 	ldw	r2,-1660(fp)
   2f4a0:	1005003a 	cmpeq	r2,r2,zero
   2f4a4:	10803fcc 	andi	r2,r2,255
   2f4a8:	10000d26 	beq	r2,zero,2f4e0 <secp256k1_scalar_sqr_512+0x270>
   2f4ac:	d0a01617 	ldw	r2,-32680(gp)
   2f4b0:	10c00317 	ldw	r3,12(r2)
   2f4b4:	008001b4 	movhi	r2,6
   2f4b8:	10b07b04 	addi	r2,r2,-15892
   2f4bc:	d8800015 	stw	r2,0(sp)
   2f4c0:	01c09284 	movi	r7,586
   2f4c4:	018001b4 	movhi	r6,6
   2f4c8:	31af9204 	addi	r6,r6,-16824
   2f4cc:	014001b4 	movhi	r5,6
   2f4d0:	296b3804 	addi	r5,r5,-21280
   2f4d4:	1809883a 	mov	r4,r3
   2f4d8:	00452600 	call	45260 <fprintf>
   2f4dc:	00450340 	call	45034 <abort>
   2f4e0:	e0fe6917 	ldw	r3,-1628(fp)
   2f4e4:	e0be6917 	ldw	r2,-1628(fp)
   2f4e8:	1885883a 	add	r2,r3,r2
   2f4ec:	e0be6b15 	stw	r2,-1620(fp)
   2f4f0:	e0fe6b17 	ldw	r3,-1620(fp)
   2f4f4:	e0be6917 	ldw	r2,-1628(fp)
   2f4f8:	1880022e 	bgeu	r3,r2,2f504 <secp256k1_scalar_sqr_512+0x294>
   2f4fc:	00c00044 	movi	r3,1
   2f500:	00000106 	br	2f508 <secp256k1_scalar_sqr_512+0x298>
   2f504:	0007883a 	mov	r3,zero
   2f508:	e0be6a17 	ldw	r2,-1624(fp)
   2f50c:	10c5883a 	add	r2,r2,r3
   2f510:	e0be6a15 	stw	r2,-1624(fp)
   2f514:	e0fe5f17 	ldw	r3,-1668(fp)
   2f518:	e0be6b17 	ldw	r2,-1620(fp)
   2f51c:	1885883a 	add	r2,r3,r2
   2f520:	e0be5f15 	stw	r2,-1668(fp)
   2f524:	e0fe5f17 	ldw	r3,-1668(fp)
   2f528:	e0be6b17 	ldw	r2,-1620(fp)
   2f52c:	1880022e 	bgeu	r3,r2,2f538 <secp256k1_scalar_sqr_512+0x2c8>
   2f530:	00c00044 	movi	r3,1
   2f534:	00000106 	br	2f53c <secp256k1_scalar_sqr_512+0x2cc>
   2f538:	0007883a 	mov	r3,zero
   2f53c:	e0be6a17 	ldw	r2,-1624(fp)
   2f540:	10c5883a 	add	r2,r2,r3
   2f544:	e0be6a15 	stw	r2,-1624(fp)
   2f548:	e0fe5f17 	ldw	r3,-1668(fp)
   2f54c:	e0be6b17 	ldw	r2,-1620(fp)
   2f550:	1885803a 	cmpltu	r2,r3,r2
   2f554:	1007883a 	mov	r3,r2
   2f558:	e0be6a17 	ldw	r2,-1624(fp)
   2f55c:	1005003a 	cmpeq	r2,r2,zero
   2f560:	1884703a 	and	r2,r3,r2
   2f564:	10c03fcc 	andi	r3,r2,255
   2f568:	e0be6117 	ldw	r2,-1660(fp)
   2f56c:	10c5883a 	add	r2,r2,r3
   2f570:	e0be6115 	stw	r2,-1660(fp)
   2f574:	e0fe5f17 	ldw	r3,-1668(fp)
   2f578:	e0be6b17 	ldw	r2,-1620(fp)
   2f57c:	1885803a 	cmpltu	r2,r3,r2
   2f580:	10803fcc 	andi	r2,r2,255
   2f584:	10000626 	beq	r2,zero,2f5a0 <secp256k1_scalar_sqr_512+0x330>
   2f588:	e0be6a17 	ldw	r2,-1624(fp)
   2f58c:	1005003a 	cmpeq	r2,r2,zero
   2f590:	10803fcc 	andi	r2,r2,255
   2f594:	10000226 	beq	r2,zero,2f5a0 <secp256k1_scalar_sqr_512+0x330>
   2f598:	00800044 	movi	r2,1
   2f59c:	00000106 	br	2f5a4 <secp256k1_scalar_sqr_512+0x334>
   2f5a0:	0005883a 	mov	r2,zero
   2f5a4:	10001126 	beq	r2,zero,2f5ec <secp256k1_scalar_sqr_512+0x37c>
   2f5a8:	e0be6117 	ldw	r2,-1660(fp)
   2f5ac:	1005003a 	cmpeq	r2,r2,zero
   2f5b0:	10803fcc 	andi	r2,r2,255
   2f5b4:	10000d26 	beq	r2,zero,2f5ec <secp256k1_scalar_sqr_512+0x37c>
   2f5b8:	d0a01617 	ldw	r2,-32680(gp)
   2f5bc:	10c00317 	ldw	r3,12(r2)
   2f5c0:	008001b4 	movhi	r2,6
   2f5c4:	10b08704 	addi	r2,r2,-15844
   2f5c8:	d8800015 	stw	r2,0(sp)
   2f5cc:	01c09284 	movi	r7,586
   2f5d0:	018001b4 	movhi	r6,6
   2f5d4:	31af9204 	addi	r6,r6,-16824
   2f5d8:	014001b4 	movhi	r5,6
   2f5dc:	296b3804 	addi	r5,r5,-21280
   2f5e0:	1809883a 	mov	r4,r3
   2f5e4:	00452600 	call	45260 <fprintf>
   2f5e8:	00450340 	call	45034 <abort>
   2f5ec:	e0fe6017 	ldw	r3,-1664(fp)
   2f5f0:	e0be6a17 	ldw	r2,-1624(fp)
   2f5f4:	1885883a 	add	r2,r3,r2
   2f5f8:	e0be6015 	stw	r2,-1664(fp)
   2f5fc:	e0fe6017 	ldw	r3,-1664(fp)
   2f600:	e0be6a17 	ldw	r2,-1624(fp)
   2f604:	1880022e 	bgeu	r3,r2,2f610 <secp256k1_scalar_sqr_512+0x3a0>
   2f608:	00c00044 	movi	r3,1
   2f60c:	00000106 	br	2f614 <secp256k1_scalar_sqr_512+0x3a4>
   2f610:	0007883a 	mov	r3,zero
   2f614:	e0be6117 	ldw	r2,-1660(fp)
   2f618:	10c5883a 	add	r2,r2,r3
   2f61c:	e0be6115 	stw	r2,-1660(fp)
   2f620:	e0fe6017 	ldw	r3,-1664(fp)
   2f624:	e0be6a17 	ldw	r2,-1624(fp)
   2f628:	1885803a 	cmpltu	r2,r3,r2
   2f62c:	10803fcc 	andi	r2,r2,255
   2f630:	10001126 	beq	r2,zero,2f678 <secp256k1_scalar_sqr_512+0x408>
   2f634:	e0be6117 	ldw	r2,-1660(fp)
   2f638:	1005003a 	cmpeq	r2,r2,zero
   2f63c:	10803fcc 	andi	r2,r2,255
   2f640:	10000d26 	beq	r2,zero,2f678 <secp256k1_scalar_sqr_512+0x408>
   2f644:	d0a01617 	ldw	r2,-32680(gp)
   2f648:	10c00317 	ldw	r3,12(r2)
   2f64c:	008001b4 	movhi	r2,6
   2f650:	10b09704 	addi	r2,r2,-15780
   2f654:	d8800015 	stw	r2,0(sp)
   2f658:	01c09284 	movi	r7,586
   2f65c:	018001b4 	movhi	r6,6
   2f660:	31af9204 	addi	r6,r6,-16824
   2f664:	014001b4 	movhi	r5,6
   2f668:	296b3804 	addi	r5,r5,-21280
   2f66c:	1809883a 	mov	r4,r3
   2f670:	00452600 	call	45260 <fprintf>
   2f674:	00450340 	call	45034 <abort>
    extract(l[1]);
   2f678:	e0bf2a17 	ldw	r2,-856(fp)
   2f67c:	10c00104 	addi	r3,r2,4
   2f680:	e0be5f17 	ldw	r2,-1668(fp)
   2f684:	18800015 	stw	r2,0(r3)
   2f688:	e0be6017 	ldw	r2,-1664(fp)
   2f68c:	e0be5f15 	stw	r2,-1668(fp)
   2f690:	e0be6117 	ldw	r2,-1660(fp)
   2f694:	e0be6015 	stw	r2,-1664(fp)
   2f698:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[2]);
   2f69c:	e0bf2b17 	ldw	r2,-852(fp)
   2f6a0:	10800017 	ldw	r2,0(r2)
   2f6a4:	e0bf2c15 	stw	r2,-848(fp)
   2f6a8:	e03f2d15 	stw	zero,-844(fp)
   2f6ac:	e0bf2b17 	ldw	r2,-852(fp)
   2f6b0:	10800217 	ldw	r2,8(r2)
   2f6b4:	e0bf2e15 	stw	r2,-840(fp)
   2f6b8:	e03f2f15 	stw	zero,-836(fp)
   2f6bc:	e1bf2e17 	ldw	r6,-840(fp)
   2f6c0:	e1ff2f17 	ldw	r7,-836(fp)
   2f6c4:	e13f2c17 	ldw	r4,-848(fp)
   2f6c8:	e17f2d17 	ldw	r5,-844(fp)
   2f6cc:	00429400 	call	42940 <__muldi3>
   2f6d0:	1009883a 	mov	r4,r2
   2f6d4:	180b883a 	mov	r5,r3
   2f6d8:	e13e6c15 	stw	r4,-1616(fp)
   2f6dc:	e17e6d15 	stw	r5,-1612(fp)
   2f6e0:	e0be6d17 	ldw	r2,-1612(fp)
   2f6e4:	1004d83a 	srl	r2,r2,zero
   2f6e8:	e0bf3015 	stw	r2,-832(fp)
   2f6ec:	e03f3115 	stw	zero,-828(fp)
   2f6f0:	e0bf3017 	ldw	r2,-832(fp)
   2f6f4:	e0be6e15 	stw	r2,-1608(fp)
   2f6f8:	e0be6c17 	ldw	r2,-1616(fp)
   2f6fc:	e0be6f15 	stw	r2,-1604(fp)
   2f700:	e0fe6e17 	ldw	r3,-1608(fp)
   2f704:	e0be6e17 	ldw	r2,-1608(fp)
   2f708:	1885883a 	add	r2,r3,r2
   2f70c:	e0be7015 	stw	r2,-1600(fp)
   2f710:	e0fe7017 	ldw	r3,-1600(fp)
   2f714:	e0be6e17 	ldw	r2,-1608(fp)
   2f718:	1880022e 	bgeu	r3,r2,2f724 <secp256k1_scalar_sqr_512+0x4b4>
   2f71c:	00c00044 	movi	r3,1
   2f720:	00000106 	br	2f728 <secp256k1_scalar_sqr_512+0x4b8>
   2f724:	0007883a 	mov	r3,zero
   2f728:	e0be6117 	ldw	r2,-1660(fp)
   2f72c:	10c5883a 	add	r2,r2,r3
   2f730:	e0be6115 	stw	r2,-1660(fp)
   2f734:	e0fe7017 	ldw	r3,-1600(fp)
   2f738:	e0be6e17 	ldw	r2,-1608(fp)
   2f73c:	1885803a 	cmpltu	r2,r3,r2
   2f740:	10803fcc 	andi	r2,r2,255
   2f744:	10001126 	beq	r2,zero,2f78c <secp256k1_scalar_sqr_512+0x51c>
   2f748:	e0be6117 	ldw	r2,-1660(fp)
   2f74c:	1005003a 	cmpeq	r2,r2,zero
   2f750:	10803fcc 	andi	r2,r2,255
   2f754:	10000d26 	beq	r2,zero,2f78c <secp256k1_scalar_sqr_512+0x51c>
   2f758:	d0a01617 	ldw	r2,-32680(gp)
   2f75c:	10c00317 	ldw	r3,12(r2)
   2f760:	008001b4 	movhi	r2,6
   2f764:	10b07b04 	addi	r2,r2,-15892
   2f768:	d8800015 	stw	r2,0(sp)
   2f76c:	01c09304 	movi	r7,588
   2f770:	018001b4 	movhi	r6,6
   2f774:	31af9204 	addi	r6,r6,-16824
   2f778:	014001b4 	movhi	r5,6
   2f77c:	296b3804 	addi	r5,r5,-21280
   2f780:	1809883a 	mov	r4,r3
   2f784:	00452600 	call	45260 <fprintf>
   2f788:	00450340 	call	45034 <abort>
   2f78c:	e0fe6f17 	ldw	r3,-1604(fp)
   2f790:	e0be6f17 	ldw	r2,-1604(fp)
   2f794:	1885883a 	add	r2,r3,r2
   2f798:	e0be7115 	stw	r2,-1596(fp)
   2f79c:	e0fe7117 	ldw	r3,-1596(fp)
   2f7a0:	e0be6f17 	ldw	r2,-1604(fp)
   2f7a4:	1880022e 	bgeu	r3,r2,2f7b0 <secp256k1_scalar_sqr_512+0x540>
   2f7a8:	00c00044 	movi	r3,1
   2f7ac:	00000106 	br	2f7b4 <secp256k1_scalar_sqr_512+0x544>
   2f7b0:	0007883a 	mov	r3,zero
   2f7b4:	e0be7017 	ldw	r2,-1600(fp)
   2f7b8:	10c5883a 	add	r2,r2,r3
   2f7bc:	e0be7015 	stw	r2,-1600(fp)
   2f7c0:	e0fe5f17 	ldw	r3,-1668(fp)
   2f7c4:	e0be7117 	ldw	r2,-1596(fp)
   2f7c8:	1885883a 	add	r2,r3,r2
   2f7cc:	e0be5f15 	stw	r2,-1668(fp)
   2f7d0:	e0fe5f17 	ldw	r3,-1668(fp)
   2f7d4:	e0be7117 	ldw	r2,-1596(fp)
   2f7d8:	1880022e 	bgeu	r3,r2,2f7e4 <secp256k1_scalar_sqr_512+0x574>
   2f7dc:	00c00044 	movi	r3,1
   2f7e0:	00000106 	br	2f7e8 <secp256k1_scalar_sqr_512+0x578>
   2f7e4:	0007883a 	mov	r3,zero
   2f7e8:	e0be7017 	ldw	r2,-1600(fp)
   2f7ec:	10c5883a 	add	r2,r2,r3
   2f7f0:	e0be7015 	stw	r2,-1600(fp)
   2f7f4:	e0fe5f17 	ldw	r3,-1668(fp)
   2f7f8:	e0be7117 	ldw	r2,-1596(fp)
   2f7fc:	1885803a 	cmpltu	r2,r3,r2
   2f800:	1007883a 	mov	r3,r2
   2f804:	e0be7017 	ldw	r2,-1600(fp)
   2f808:	1005003a 	cmpeq	r2,r2,zero
   2f80c:	1884703a 	and	r2,r3,r2
   2f810:	10c03fcc 	andi	r3,r2,255
   2f814:	e0be6117 	ldw	r2,-1660(fp)
   2f818:	10c5883a 	add	r2,r2,r3
   2f81c:	e0be6115 	stw	r2,-1660(fp)
   2f820:	e0fe5f17 	ldw	r3,-1668(fp)
   2f824:	e0be7117 	ldw	r2,-1596(fp)
   2f828:	1885803a 	cmpltu	r2,r3,r2
   2f82c:	10803fcc 	andi	r2,r2,255
   2f830:	10000626 	beq	r2,zero,2f84c <secp256k1_scalar_sqr_512+0x5dc>
   2f834:	e0be7017 	ldw	r2,-1600(fp)
   2f838:	1005003a 	cmpeq	r2,r2,zero
   2f83c:	10803fcc 	andi	r2,r2,255
   2f840:	10000226 	beq	r2,zero,2f84c <secp256k1_scalar_sqr_512+0x5dc>
   2f844:	00800044 	movi	r2,1
   2f848:	00000106 	br	2f850 <secp256k1_scalar_sqr_512+0x5e0>
   2f84c:	0005883a 	mov	r2,zero
   2f850:	10001126 	beq	r2,zero,2f898 <secp256k1_scalar_sqr_512+0x628>
   2f854:	e0be6117 	ldw	r2,-1660(fp)
   2f858:	1005003a 	cmpeq	r2,r2,zero
   2f85c:	10803fcc 	andi	r2,r2,255
   2f860:	10000d26 	beq	r2,zero,2f898 <secp256k1_scalar_sqr_512+0x628>
   2f864:	d0a01617 	ldw	r2,-32680(gp)
   2f868:	10c00317 	ldw	r3,12(r2)
   2f86c:	008001b4 	movhi	r2,6
   2f870:	10b08704 	addi	r2,r2,-15844
   2f874:	d8800015 	stw	r2,0(sp)
   2f878:	01c09304 	movi	r7,588
   2f87c:	018001b4 	movhi	r6,6
   2f880:	31af9204 	addi	r6,r6,-16824
   2f884:	014001b4 	movhi	r5,6
   2f888:	296b3804 	addi	r5,r5,-21280
   2f88c:	1809883a 	mov	r4,r3
   2f890:	00452600 	call	45260 <fprintf>
   2f894:	00450340 	call	45034 <abort>
   2f898:	e0fe6017 	ldw	r3,-1664(fp)
   2f89c:	e0be7017 	ldw	r2,-1600(fp)
   2f8a0:	1885883a 	add	r2,r3,r2
   2f8a4:	e0be6015 	stw	r2,-1664(fp)
   2f8a8:	e0fe6017 	ldw	r3,-1664(fp)
   2f8ac:	e0be7017 	ldw	r2,-1600(fp)
   2f8b0:	1880022e 	bgeu	r3,r2,2f8bc <secp256k1_scalar_sqr_512+0x64c>
   2f8b4:	00c00044 	movi	r3,1
   2f8b8:	00000106 	br	2f8c0 <secp256k1_scalar_sqr_512+0x650>
   2f8bc:	0007883a 	mov	r3,zero
   2f8c0:	e0be6117 	ldw	r2,-1660(fp)
   2f8c4:	10c5883a 	add	r2,r2,r3
   2f8c8:	e0be6115 	stw	r2,-1660(fp)
   2f8cc:	e0fe6017 	ldw	r3,-1664(fp)
   2f8d0:	e0be7017 	ldw	r2,-1600(fp)
   2f8d4:	1885803a 	cmpltu	r2,r3,r2
   2f8d8:	10803fcc 	andi	r2,r2,255
   2f8dc:	10001126 	beq	r2,zero,2f924 <secp256k1_scalar_sqr_512+0x6b4>
   2f8e0:	e0be6117 	ldw	r2,-1660(fp)
   2f8e4:	1005003a 	cmpeq	r2,r2,zero
   2f8e8:	10803fcc 	andi	r2,r2,255
   2f8ec:	10000d26 	beq	r2,zero,2f924 <secp256k1_scalar_sqr_512+0x6b4>
   2f8f0:	d0a01617 	ldw	r2,-32680(gp)
   2f8f4:	10c00317 	ldw	r3,12(r2)
   2f8f8:	008001b4 	movhi	r2,6
   2f8fc:	10b09704 	addi	r2,r2,-15780
   2f900:	d8800015 	stw	r2,0(sp)
   2f904:	01c09304 	movi	r7,588
   2f908:	018001b4 	movhi	r6,6
   2f90c:	31af9204 	addi	r6,r6,-16824
   2f910:	014001b4 	movhi	r5,6
   2f914:	296b3804 	addi	r5,r5,-21280
   2f918:	1809883a 	mov	r4,r3
   2f91c:	00452600 	call	45260 <fprintf>
   2f920:	00450340 	call	45034 <abort>
    muladd(a->d[1], a->d[1]);
   2f924:	e0bf2b17 	ldw	r2,-852(fp)
   2f928:	10800117 	ldw	r2,4(r2)
   2f92c:	e0bf3215 	stw	r2,-824(fp)
   2f930:	e03f3315 	stw	zero,-820(fp)
   2f934:	e0bf2b17 	ldw	r2,-852(fp)
   2f938:	10800117 	ldw	r2,4(r2)
   2f93c:	e0bf3415 	stw	r2,-816(fp)
   2f940:	e03f3515 	stw	zero,-812(fp)
   2f944:	e1bf3417 	ldw	r6,-816(fp)
   2f948:	e1ff3517 	ldw	r7,-812(fp)
   2f94c:	e13f3217 	ldw	r4,-824(fp)
   2f950:	e17f3317 	ldw	r5,-820(fp)
   2f954:	00429400 	call	42940 <__muldi3>
   2f958:	1009883a 	mov	r4,r2
   2f95c:	180b883a 	mov	r5,r3
   2f960:	e13e7215 	stw	r4,-1592(fp)
   2f964:	e17e7315 	stw	r5,-1588(fp)
   2f968:	e0be7317 	ldw	r2,-1588(fp)
   2f96c:	1004d83a 	srl	r2,r2,zero
   2f970:	e0bf3615 	stw	r2,-808(fp)
   2f974:	e03f3715 	stw	zero,-804(fp)
   2f978:	e0bf3617 	ldw	r2,-808(fp)
   2f97c:	e0be7415 	stw	r2,-1584(fp)
   2f980:	e0be7217 	ldw	r2,-1592(fp)
   2f984:	e0be7515 	stw	r2,-1580(fp)
   2f988:	e0fe5f17 	ldw	r3,-1668(fp)
   2f98c:	e0be7517 	ldw	r2,-1580(fp)
   2f990:	1885883a 	add	r2,r3,r2
   2f994:	e0be5f15 	stw	r2,-1668(fp)
   2f998:	e0fe5f17 	ldw	r3,-1668(fp)
   2f99c:	e0be7517 	ldw	r2,-1580(fp)
   2f9a0:	1880022e 	bgeu	r3,r2,2f9ac <secp256k1_scalar_sqr_512+0x73c>
   2f9a4:	00c00044 	movi	r3,1
   2f9a8:	00000106 	br	2f9b0 <secp256k1_scalar_sqr_512+0x740>
   2f9ac:	0007883a 	mov	r3,zero
   2f9b0:	e0be7417 	ldw	r2,-1584(fp)
   2f9b4:	10c5883a 	add	r2,r2,r3
   2f9b8:	e0be7415 	stw	r2,-1584(fp)
   2f9bc:	e0fe6017 	ldw	r3,-1664(fp)
   2f9c0:	e0be7417 	ldw	r2,-1584(fp)
   2f9c4:	1885883a 	add	r2,r3,r2
   2f9c8:	e0be6015 	stw	r2,-1664(fp)
   2f9cc:	e0fe6017 	ldw	r3,-1664(fp)
   2f9d0:	e0be7417 	ldw	r2,-1584(fp)
   2f9d4:	1880022e 	bgeu	r3,r2,2f9e0 <secp256k1_scalar_sqr_512+0x770>
   2f9d8:	00c00044 	movi	r3,1
   2f9dc:	00000106 	br	2f9e4 <secp256k1_scalar_sqr_512+0x774>
   2f9e0:	0007883a 	mov	r3,zero
   2f9e4:	e0be6117 	ldw	r2,-1660(fp)
   2f9e8:	10c5883a 	add	r2,r2,r3
   2f9ec:	e0be6115 	stw	r2,-1660(fp)
   2f9f0:	e0fe6017 	ldw	r3,-1664(fp)
   2f9f4:	e0be7417 	ldw	r2,-1584(fp)
   2f9f8:	1885803a 	cmpltu	r2,r3,r2
   2f9fc:	10803fcc 	andi	r2,r2,255
   2fa00:	10001126 	beq	r2,zero,2fa48 <secp256k1_scalar_sqr_512+0x7d8>
   2fa04:	e0be6117 	ldw	r2,-1660(fp)
   2fa08:	1005003a 	cmpeq	r2,r2,zero
   2fa0c:	10803fcc 	andi	r2,r2,255
   2fa10:	10000d26 	beq	r2,zero,2fa48 <secp256k1_scalar_sqr_512+0x7d8>
   2fa14:	d0a01617 	ldw	r2,-32680(gp)
   2fa18:	10c00317 	ldw	r3,12(r2)
   2fa1c:	008001b4 	movhi	r2,6
   2fa20:	10b02604 	addi	r2,r2,-16232
   2fa24:	d8800015 	stw	r2,0(sp)
   2fa28:	01c09344 	movi	r7,589
   2fa2c:	018001b4 	movhi	r6,6
   2fa30:	31af9204 	addi	r6,r6,-16824
   2fa34:	014001b4 	movhi	r5,6
   2fa38:	296b3804 	addi	r5,r5,-21280
   2fa3c:	1809883a 	mov	r4,r3
   2fa40:	00452600 	call	45260 <fprintf>
   2fa44:	00450340 	call	45034 <abort>
    extract(l[2]);
   2fa48:	e0bf2a17 	ldw	r2,-856(fp)
   2fa4c:	10c00204 	addi	r3,r2,8
   2fa50:	e0be5f17 	ldw	r2,-1668(fp)
   2fa54:	18800015 	stw	r2,0(r3)
   2fa58:	e0be6017 	ldw	r2,-1664(fp)
   2fa5c:	e0be5f15 	stw	r2,-1668(fp)
   2fa60:	e0be6117 	ldw	r2,-1660(fp)
   2fa64:	e0be6015 	stw	r2,-1664(fp)
   2fa68:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[3]);
   2fa6c:	e0bf2b17 	ldw	r2,-852(fp)
   2fa70:	10800017 	ldw	r2,0(r2)
   2fa74:	e0bf3815 	stw	r2,-800(fp)
   2fa78:	e03f3915 	stw	zero,-796(fp)
   2fa7c:	e0bf2b17 	ldw	r2,-852(fp)
   2fa80:	10800317 	ldw	r2,12(r2)
   2fa84:	e0bf3a15 	stw	r2,-792(fp)
   2fa88:	e03f3b15 	stw	zero,-788(fp)
   2fa8c:	e1bf3a17 	ldw	r6,-792(fp)
   2fa90:	e1ff3b17 	ldw	r7,-788(fp)
   2fa94:	e13f3817 	ldw	r4,-800(fp)
   2fa98:	e17f3917 	ldw	r5,-796(fp)
   2fa9c:	00429400 	call	42940 <__muldi3>
   2faa0:	1009883a 	mov	r4,r2
   2faa4:	180b883a 	mov	r5,r3
   2faa8:	e13e7615 	stw	r4,-1576(fp)
   2faac:	e17e7715 	stw	r5,-1572(fp)
   2fab0:	e0be7717 	ldw	r2,-1572(fp)
   2fab4:	1004d83a 	srl	r2,r2,zero
   2fab8:	e0bf3c15 	stw	r2,-784(fp)
   2fabc:	e03f3d15 	stw	zero,-780(fp)
   2fac0:	e0bf3c17 	ldw	r2,-784(fp)
   2fac4:	e0be7815 	stw	r2,-1568(fp)
   2fac8:	e0be7617 	ldw	r2,-1576(fp)
   2facc:	e0be7915 	stw	r2,-1564(fp)
   2fad0:	e0fe7817 	ldw	r3,-1568(fp)
   2fad4:	e0be7817 	ldw	r2,-1568(fp)
   2fad8:	1885883a 	add	r2,r3,r2
   2fadc:	e0be7a15 	stw	r2,-1560(fp)
   2fae0:	e0fe7a17 	ldw	r3,-1560(fp)
   2fae4:	e0be7817 	ldw	r2,-1568(fp)
   2fae8:	1880022e 	bgeu	r3,r2,2faf4 <secp256k1_scalar_sqr_512+0x884>
   2faec:	00c00044 	movi	r3,1
   2faf0:	00000106 	br	2faf8 <secp256k1_scalar_sqr_512+0x888>
   2faf4:	0007883a 	mov	r3,zero
   2faf8:	e0be6117 	ldw	r2,-1660(fp)
   2fafc:	10c5883a 	add	r2,r2,r3
   2fb00:	e0be6115 	stw	r2,-1660(fp)
   2fb04:	e0fe7a17 	ldw	r3,-1560(fp)
   2fb08:	e0be7817 	ldw	r2,-1568(fp)
   2fb0c:	1885803a 	cmpltu	r2,r3,r2
   2fb10:	10803fcc 	andi	r2,r2,255
   2fb14:	10001126 	beq	r2,zero,2fb5c <secp256k1_scalar_sqr_512+0x8ec>
   2fb18:	e0be6117 	ldw	r2,-1660(fp)
   2fb1c:	1005003a 	cmpeq	r2,r2,zero
   2fb20:	10803fcc 	andi	r2,r2,255
   2fb24:	10000d26 	beq	r2,zero,2fb5c <secp256k1_scalar_sqr_512+0x8ec>
   2fb28:	d0a01617 	ldw	r2,-32680(gp)
   2fb2c:	10c00317 	ldw	r3,12(r2)
   2fb30:	008001b4 	movhi	r2,6
   2fb34:	10b07b04 	addi	r2,r2,-15892
   2fb38:	d8800015 	stw	r2,0(sp)
   2fb3c:	01c093c4 	movi	r7,591
   2fb40:	018001b4 	movhi	r6,6
   2fb44:	31af9204 	addi	r6,r6,-16824
   2fb48:	014001b4 	movhi	r5,6
   2fb4c:	296b3804 	addi	r5,r5,-21280
   2fb50:	1809883a 	mov	r4,r3
   2fb54:	00452600 	call	45260 <fprintf>
   2fb58:	00450340 	call	45034 <abort>
   2fb5c:	e0fe7917 	ldw	r3,-1564(fp)
   2fb60:	e0be7917 	ldw	r2,-1564(fp)
   2fb64:	1885883a 	add	r2,r3,r2
   2fb68:	e0be7b15 	stw	r2,-1556(fp)
   2fb6c:	e0fe7b17 	ldw	r3,-1556(fp)
   2fb70:	e0be7917 	ldw	r2,-1564(fp)
   2fb74:	1880022e 	bgeu	r3,r2,2fb80 <secp256k1_scalar_sqr_512+0x910>
   2fb78:	00c00044 	movi	r3,1
   2fb7c:	00000106 	br	2fb84 <secp256k1_scalar_sqr_512+0x914>
   2fb80:	0007883a 	mov	r3,zero
   2fb84:	e0be7a17 	ldw	r2,-1560(fp)
   2fb88:	10c5883a 	add	r2,r2,r3
   2fb8c:	e0be7a15 	stw	r2,-1560(fp)
   2fb90:	e0fe5f17 	ldw	r3,-1668(fp)
   2fb94:	e0be7b17 	ldw	r2,-1556(fp)
   2fb98:	1885883a 	add	r2,r3,r2
   2fb9c:	e0be5f15 	stw	r2,-1668(fp)
   2fba0:	e0fe5f17 	ldw	r3,-1668(fp)
   2fba4:	e0be7b17 	ldw	r2,-1556(fp)
   2fba8:	1880022e 	bgeu	r3,r2,2fbb4 <secp256k1_scalar_sqr_512+0x944>
   2fbac:	00c00044 	movi	r3,1
   2fbb0:	00000106 	br	2fbb8 <secp256k1_scalar_sqr_512+0x948>
   2fbb4:	0007883a 	mov	r3,zero
   2fbb8:	e0be7a17 	ldw	r2,-1560(fp)
   2fbbc:	10c5883a 	add	r2,r2,r3
   2fbc0:	e0be7a15 	stw	r2,-1560(fp)
   2fbc4:	e0fe5f17 	ldw	r3,-1668(fp)
   2fbc8:	e0be7b17 	ldw	r2,-1556(fp)
   2fbcc:	1885803a 	cmpltu	r2,r3,r2
   2fbd0:	1007883a 	mov	r3,r2
   2fbd4:	e0be7a17 	ldw	r2,-1560(fp)
   2fbd8:	1005003a 	cmpeq	r2,r2,zero
   2fbdc:	1884703a 	and	r2,r3,r2
   2fbe0:	10c03fcc 	andi	r3,r2,255
   2fbe4:	e0be6117 	ldw	r2,-1660(fp)
   2fbe8:	10c5883a 	add	r2,r2,r3
   2fbec:	e0be6115 	stw	r2,-1660(fp)
   2fbf0:	e0fe5f17 	ldw	r3,-1668(fp)
   2fbf4:	e0be7b17 	ldw	r2,-1556(fp)
   2fbf8:	1885803a 	cmpltu	r2,r3,r2
   2fbfc:	10803fcc 	andi	r2,r2,255
   2fc00:	10000626 	beq	r2,zero,2fc1c <secp256k1_scalar_sqr_512+0x9ac>
   2fc04:	e0be7a17 	ldw	r2,-1560(fp)
   2fc08:	1005003a 	cmpeq	r2,r2,zero
   2fc0c:	10803fcc 	andi	r2,r2,255
   2fc10:	10000226 	beq	r2,zero,2fc1c <secp256k1_scalar_sqr_512+0x9ac>
   2fc14:	00800044 	movi	r2,1
   2fc18:	00000106 	br	2fc20 <secp256k1_scalar_sqr_512+0x9b0>
   2fc1c:	0005883a 	mov	r2,zero
   2fc20:	10001126 	beq	r2,zero,2fc68 <secp256k1_scalar_sqr_512+0x9f8>
   2fc24:	e0be6117 	ldw	r2,-1660(fp)
   2fc28:	1005003a 	cmpeq	r2,r2,zero
   2fc2c:	10803fcc 	andi	r2,r2,255
   2fc30:	10000d26 	beq	r2,zero,2fc68 <secp256k1_scalar_sqr_512+0x9f8>
   2fc34:	d0a01617 	ldw	r2,-32680(gp)
   2fc38:	10c00317 	ldw	r3,12(r2)
   2fc3c:	008001b4 	movhi	r2,6
   2fc40:	10b08704 	addi	r2,r2,-15844
   2fc44:	d8800015 	stw	r2,0(sp)
   2fc48:	01c093c4 	movi	r7,591
   2fc4c:	018001b4 	movhi	r6,6
   2fc50:	31af9204 	addi	r6,r6,-16824
   2fc54:	014001b4 	movhi	r5,6
   2fc58:	296b3804 	addi	r5,r5,-21280
   2fc5c:	1809883a 	mov	r4,r3
   2fc60:	00452600 	call	45260 <fprintf>
   2fc64:	00450340 	call	45034 <abort>
   2fc68:	e0fe6017 	ldw	r3,-1664(fp)
   2fc6c:	e0be7a17 	ldw	r2,-1560(fp)
   2fc70:	1885883a 	add	r2,r3,r2
   2fc74:	e0be6015 	stw	r2,-1664(fp)
   2fc78:	e0fe6017 	ldw	r3,-1664(fp)
   2fc7c:	e0be7a17 	ldw	r2,-1560(fp)
   2fc80:	1880022e 	bgeu	r3,r2,2fc8c <secp256k1_scalar_sqr_512+0xa1c>
   2fc84:	00c00044 	movi	r3,1
   2fc88:	00000106 	br	2fc90 <secp256k1_scalar_sqr_512+0xa20>
   2fc8c:	0007883a 	mov	r3,zero
   2fc90:	e0be6117 	ldw	r2,-1660(fp)
   2fc94:	10c5883a 	add	r2,r2,r3
   2fc98:	e0be6115 	stw	r2,-1660(fp)
   2fc9c:	e0fe6017 	ldw	r3,-1664(fp)
   2fca0:	e0be7a17 	ldw	r2,-1560(fp)
   2fca4:	1885803a 	cmpltu	r2,r3,r2
   2fca8:	10803fcc 	andi	r2,r2,255
   2fcac:	10001126 	beq	r2,zero,2fcf4 <secp256k1_scalar_sqr_512+0xa84>
   2fcb0:	e0be6117 	ldw	r2,-1660(fp)
   2fcb4:	1005003a 	cmpeq	r2,r2,zero
   2fcb8:	10803fcc 	andi	r2,r2,255
   2fcbc:	10000d26 	beq	r2,zero,2fcf4 <secp256k1_scalar_sqr_512+0xa84>
   2fcc0:	d0a01617 	ldw	r2,-32680(gp)
   2fcc4:	10c00317 	ldw	r3,12(r2)
   2fcc8:	008001b4 	movhi	r2,6
   2fccc:	10b09704 	addi	r2,r2,-15780
   2fcd0:	d8800015 	stw	r2,0(sp)
   2fcd4:	01c093c4 	movi	r7,591
   2fcd8:	018001b4 	movhi	r6,6
   2fcdc:	31af9204 	addi	r6,r6,-16824
   2fce0:	014001b4 	movhi	r5,6
   2fce4:	296b3804 	addi	r5,r5,-21280
   2fce8:	1809883a 	mov	r4,r3
   2fcec:	00452600 	call	45260 <fprintf>
   2fcf0:	00450340 	call	45034 <abort>
    muladd2(a->d[1], a->d[2]);
   2fcf4:	e0bf2b17 	ldw	r2,-852(fp)
   2fcf8:	10800117 	ldw	r2,4(r2)
   2fcfc:	e0bf3e15 	stw	r2,-776(fp)
   2fd00:	e03f3f15 	stw	zero,-772(fp)
   2fd04:	e0bf2b17 	ldw	r2,-852(fp)
   2fd08:	10800217 	ldw	r2,8(r2)
   2fd0c:	e0bf4015 	stw	r2,-768(fp)
   2fd10:	e03f4115 	stw	zero,-764(fp)
   2fd14:	e1bf4017 	ldw	r6,-768(fp)
   2fd18:	e1ff4117 	ldw	r7,-764(fp)
   2fd1c:	e13f3e17 	ldw	r4,-776(fp)
   2fd20:	e17f3f17 	ldw	r5,-772(fp)
   2fd24:	00429400 	call	42940 <__muldi3>
   2fd28:	1009883a 	mov	r4,r2
   2fd2c:	180b883a 	mov	r5,r3
   2fd30:	e13e7c15 	stw	r4,-1552(fp)
   2fd34:	e17e7d15 	stw	r5,-1548(fp)
   2fd38:	e0be7d17 	ldw	r2,-1548(fp)
   2fd3c:	1004d83a 	srl	r2,r2,zero
   2fd40:	e0bf4215 	stw	r2,-760(fp)
   2fd44:	e03f4315 	stw	zero,-756(fp)
   2fd48:	e0bf4217 	ldw	r2,-760(fp)
   2fd4c:	e0be7e15 	stw	r2,-1544(fp)
   2fd50:	e0be7c17 	ldw	r2,-1552(fp)
   2fd54:	e0be7f15 	stw	r2,-1540(fp)
   2fd58:	e0fe7e17 	ldw	r3,-1544(fp)
   2fd5c:	e0be7e17 	ldw	r2,-1544(fp)
   2fd60:	1885883a 	add	r2,r3,r2
   2fd64:	e0be8015 	stw	r2,-1536(fp)
   2fd68:	e0fe8017 	ldw	r3,-1536(fp)
   2fd6c:	e0be7e17 	ldw	r2,-1544(fp)
   2fd70:	1880022e 	bgeu	r3,r2,2fd7c <secp256k1_scalar_sqr_512+0xb0c>
   2fd74:	00c00044 	movi	r3,1
   2fd78:	00000106 	br	2fd80 <secp256k1_scalar_sqr_512+0xb10>
   2fd7c:	0007883a 	mov	r3,zero
   2fd80:	e0be6117 	ldw	r2,-1660(fp)
   2fd84:	10c5883a 	add	r2,r2,r3
   2fd88:	e0be6115 	stw	r2,-1660(fp)
   2fd8c:	e0fe8017 	ldw	r3,-1536(fp)
   2fd90:	e0be7e17 	ldw	r2,-1544(fp)
   2fd94:	1885803a 	cmpltu	r2,r3,r2
   2fd98:	10803fcc 	andi	r2,r2,255
   2fd9c:	10001126 	beq	r2,zero,2fde4 <secp256k1_scalar_sqr_512+0xb74>
   2fda0:	e0be6117 	ldw	r2,-1660(fp)
   2fda4:	1005003a 	cmpeq	r2,r2,zero
   2fda8:	10803fcc 	andi	r2,r2,255
   2fdac:	10000d26 	beq	r2,zero,2fde4 <secp256k1_scalar_sqr_512+0xb74>
   2fdb0:	d0a01617 	ldw	r2,-32680(gp)
   2fdb4:	10c00317 	ldw	r3,12(r2)
   2fdb8:	008001b4 	movhi	r2,6
   2fdbc:	10b07b04 	addi	r2,r2,-15892
   2fdc0:	d8800015 	stw	r2,0(sp)
   2fdc4:	01c09404 	movi	r7,592
   2fdc8:	018001b4 	movhi	r6,6
   2fdcc:	31af9204 	addi	r6,r6,-16824
   2fdd0:	014001b4 	movhi	r5,6
   2fdd4:	296b3804 	addi	r5,r5,-21280
   2fdd8:	1809883a 	mov	r4,r3
   2fddc:	00452600 	call	45260 <fprintf>
   2fde0:	00450340 	call	45034 <abort>
   2fde4:	e0fe7f17 	ldw	r3,-1540(fp)
   2fde8:	e0be7f17 	ldw	r2,-1540(fp)
   2fdec:	1885883a 	add	r2,r3,r2
   2fdf0:	e0be8115 	stw	r2,-1532(fp)
   2fdf4:	e0fe8117 	ldw	r3,-1532(fp)
   2fdf8:	e0be7f17 	ldw	r2,-1540(fp)
   2fdfc:	1880022e 	bgeu	r3,r2,2fe08 <secp256k1_scalar_sqr_512+0xb98>
   2fe00:	00c00044 	movi	r3,1
   2fe04:	00000106 	br	2fe0c <secp256k1_scalar_sqr_512+0xb9c>
   2fe08:	0007883a 	mov	r3,zero
   2fe0c:	e0be8017 	ldw	r2,-1536(fp)
   2fe10:	10c5883a 	add	r2,r2,r3
   2fe14:	e0be8015 	stw	r2,-1536(fp)
   2fe18:	e0fe5f17 	ldw	r3,-1668(fp)
   2fe1c:	e0be8117 	ldw	r2,-1532(fp)
   2fe20:	1885883a 	add	r2,r3,r2
   2fe24:	e0be5f15 	stw	r2,-1668(fp)
   2fe28:	e0fe5f17 	ldw	r3,-1668(fp)
   2fe2c:	e0be8117 	ldw	r2,-1532(fp)
   2fe30:	1880022e 	bgeu	r3,r2,2fe3c <secp256k1_scalar_sqr_512+0xbcc>
   2fe34:	00c00044 	movi	r3,1
   2fe38:	00000106 	br	2fe40 <secp256k1_scalar_sqr_512+0xbd0>
   2fe3c:	0007883a 	mov	r3,zero
   2fe40:	e0be8017 	ldw	r2,-1536(fp)
   2fe44:	10c5883a 	add	r2,r2,r3
   2fe48:	e0be8015 	stw	r2,-1536(fp)
   2fe4c:	e0fe5f17 	ldw	r3,-1668(fp)
   2fe50:	e0be8117 	ldw	r2,-1532(fp)
   2fe54:	1885803a 	cmpltu	r2,r3,r2
   2fe58:	1007883a 	mov	r3,r2
   2fe5c:	e0be8017 	ldw	r2,-1536(fp)
   2fe60:	1005003a 	cmpeq	r2,r2,zero
   2fe64:	1884703a 	and	r2,r3,r2
   2fe68:	10c03fcc 	andi	r3,r2,255
   2fe6c:	e0be6117 	ldw	r2,-1660(fp)
   2fe70:	10c5883a 	add	r2,r2,r3
   2fe74:	e0be6115 	stw	r2,-1660(fp)
   2fe78:	e0fe5f17 	ldw	r3,-1668(fp)
   2fe7c:	e0be8117 	ldw	r2,-1532(fp)
   2fe80:	1885803a 	cmpltu	r2,r3,r2
   2fe84:	10803fcc 	andi	r2,r2,255
   2fe88:	10000626 	beq	r2,zero,2fea4 <secp256k1_scalar_sqr_512+0xc34>
   2fe8c:	e0be8017 	ldw	r2,-1536(fp)
   2fe90:	1005003a 	cmpeq	r2,r2,zero
   2fe94:	10803fcc 	andi	r2,r2,255
   2fe98:	10000226 	beq	r2,zero,2fea4 <secp256k1_scalar_sqr_512+0xc34>
   2fe9c:	00800044 	movi	r2,1
   2fea0:	00000106 	br	2fea8 <secp256k1_scalar_sqr_512+0xc38>
   2fea4:	0005883a 	mov	r2,zero
   2fea8:	10001126 	beq	r2,zero,2fef0 <secp256k1_scalar_sqr_512+0xc80>
   2feac:	e0be6117 	ldw	r2,-1660(fp)
   2feb0:	1005003a 	cmpeq	r2,r2,zero
   2feb4:	10803fcc 	andi	r2,r2,255
   2feb8:	10000d26 	beq	r2,zero,2fef0 <secp256k1_scalar_sqr_512+0xc80>
   2febc:	d0a01617 	ldw	r2,-32680(gp)
   2fec0:	10c00317 	ldw	r3,12(r2)
   2fec4:	008001b4 	movhi	r2,6
   2fec8:	10b08704 	addi	r2,r2,-15844
   2fecc:	d8800015 	stw	r2,0(sp)
   2fed0:	01c09404 	movi	r7,592
   2fed4:	018001b4 	movhi	r6,6
   2fed8:	31af9204 	addi	r6,r6,-16824
   2fedc:	014001b4 	movhi	r5,6
   2fee0:	296b3804 	addi	r5,r5,-21280
   2fee4:	1809883a 	mov	r4,r3
   2fee8:	00452600 	call	45260 <fprintf>
   2feec:	00450340 	call	45034 <abort>
   2fef0:	e0fe6017 	ldw	r3,-1664(fp)
   2fef4:	e0be8017 	ldw	r2,-1536(fp)
   2fef8:	1885883a 	add	r2,r3,r2
   2fefc:	e0be6015 	stw	r2,-1664(fp)
   2ff00:	e0fe6017 	ldw	r3,-1664(fp)
   2ff04:	e0be8017 	ldw	r2,-1536(fp)
   2ff08:	1880022e 	bgeu	r3,r2,2ff14 <secp256k1_scalar_sqr_512+0xca4>
   2ff0c:	00c00044 	movi	r3,1
   2ff10:	00000106 	br	2ff18 <secp256k1_scalar_sqr_512+0xca8>
   2ff14:	0007883a 	mov	r3,zero
   2ff18:	e0be6117 	ldw	r2,-1660(fp)
   2ff1c:	10c5883a 	add	r2,r2,r3
   2ff20:	e0be6115 	stw	r2,-1660(fp)
   2ff24:	e0fe6017 	ldw	r3,-1664(fp)
   2ff28:	e0be8017 	ldw	r2,-1536(fp)
   2ff2c:	1885803a 	cmpltu	r2,r3,r2
   2ff30:	10803fcc 	andi	r2,r2,255
   2ff34:	10001126 	beq	r2,zero,2ff7c <secp256k1_scalar_sqr_512+0xd0c>
   2ff38:	e0be6117 	ldw	r2,-1660(fp)
   2ff3c:	1005003a 	cmpeq	r2,r2,zero
   2ff40:	10803fcc 	andi	r2,r2,255
   2ff44:	10000d26 	beq	r2,zero,2ff7c <secp256k1_scalar_sqr_512+0xd0c>
   2ff48:	d0a01617 	ldw	r2,-32680(gp)
   2ff4c:	10c00317 	ldw	r3,12(r2)
   2ff50:	008001b4 	movhi	r2,6
   2ff54:	10b09704 	addi	r2,r2,-15780
   2ff58:	d8800015 	stw	r2,0(sp)
   2ff5c:	01c09404 	movi	r7,592
   2ff60:	018001b4 	movhi	r6,6
   2ff64:	31af9204 	addi	r6,r6,-16824
   2ff68:	014001b4 	movhi	r5,6
   2ff6c:	296b3804 	addi	r5,r5,-21280
   2ff70:	1809883a 	mov	r4,r3
   2ff74:	00452600 	call	45260 <fprintf>
   2ff78:	00450340 	call	45034 <abort>
    extract(l[3]);
   2ff7c:	e0bf2a17 	ldw	r2,-856(fp)
   2ff80:	10c00304 	addi	r3,r2,12
   2ff84:	e0be5f17 	ldw	r2,-1668(fp)
   2ff88:	18800015 	stw	r2,0(r3)
   2ff8c:	e0be6017 	ldw	r2,-1664(fp)
   2ff90:	e0be5f15 	stw	r2,-1668(fp)
   2ff94:	e0be6117 	ldw	r2,-1660(fp)
   2ff98:	e0be6015 	stw	r2,-1664(fp)
   2ff9c:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[4]);
   2ffa0:	e0bf2b17 	ldw	r2,-852(fp)
   2ffa4:	10800017 	ldw	r2,0(r2)
   2ffa8:	e0bf4415 	stw	r2,-752(fp)
   2ffac:	e03f4515 	stw	zero,-748(fp)
   2ffb0:	e0bf2b17 	ldw	r2,-852(fp)
   2ffb4:	10800417 	ldw	r2,16(r2)
   2ffb8:	e0bf4615 	stw	r2,-744(fp)
   2ffbc:	e03f4715 	stw	zero,-740(fp)
   2ffc0:	e1bf4617 	ldw	r6,-744(fp)
   2ffc4:	e1ff4717 	ldw	r7,-740(fp)
   2ffc8:	e13f4417 	ldw	r4,-752(fp)
   2ffcc:	e17f4517 	ldw	r5,-748(fp)
   2ffd0:	00429400 	call	42940 <__muldi3>
   2ffd4:	1009883a 	mov	r4,r2
   2ffd8:	180b883a 	mov	r5,r3
   2ffdc:	e13e8215 	stw	r4,-1528(fp)
   2ffe0:	e17e8315 	stw	r5,-1524(fp)
   2ffe4:	e0be8317 	ldw	r2,-1524(fp)
   2ffe8:	1004d83a 	srl	r2,r2,zero
   2ffec:	e0bf4815 	stw	r2,-736(fp)
   2fff0:	e03f4915 	stw	zero,-732(fp)
   2fff4:	e0bf4817 	ldw	r2,-736(fp)
   2fff8:	e0be8415 	stw	r2,-1520(fp)
   2fffc:	e0be8217 	ldw	r2,-1528(fp)
   30000:	e0be8515 	stw	r2,-1516(fp)
   30004:	e0fe8417 	ldw	r3,-1520(fp)
   30008:	e0be8417 	ldw	r2,-1520(fp)
   3000c:	1885883a 	add	r2,r3,r2
   30010:	e0be8615 	stw	r2,-1512(fp)
   30014:	e0fe8617 	ldw	r3,-1512(fp)
   30018:	e0be8417 	ldw	r2,-1520(fp)
   3001c:	1880022e 	bgeu	r3,r2,30028 <secp256k1_scalar_sqr_512+0xdb8>
   30020:	00c00044 	movi	r3,1
   30024:	00000106 	br	3002c <secp256k1_scalar_sqr_512+0xdbc>
   30028:	0007883a 	mov	r3,zero
   3002c:	e0be6117 	ldw	r2,-1660(fp)
   30030:	10c5883a 	add	r2,r2,r3
   30034:	e0be6115 	stw	r2,-1660(fp)
   30038:	e0fe8617 	ldw	r3,-1512(fp)
   3003c:	e0be8417 	ldw	r2,-1520(fp)
   30040:	1885803a 	cmpltu	r2,r3,r2
   30044:	10803fcc 	andi	r2,r2,255
   30048:	10001126 	beq	r2,zero,30090 <secp256k1_scalar_sqr_512+0xe20>
   3004c:	e0be6117 	ldw	r2,-1660(fp)
   30050:	1005003a 	cmpeq	r2,r2,zero
   30054:	10803fcc 	andi	r2,r2,255
   30058:	10000d26 	beq	r2,zero,30090 <secp256k1_scalar_sqr_512+0xe20>
   3005c:	d0a01617 	ldw	r2,-32680(gp)
   30060:	10c00317 	ldw	r3,12(r2)
   30064:	008001b4 	movhi	r2,6
   30068:	10b07b04 	addi	r2,r2,-15892
   3006c:	d8800015 	stw	r2,0(sp)
   30070:	01c09484 	movi	r7,594
   30074:	018001b4 	movhi	r6,6
   30078:	31af9204 	addi	r6,r6,-16824
   3007c:	014001b4 	movhi	r5,6
   30080:	296b3804 	addi	r5,r5,-21280
   30084:	1809883a 	mov	r4,r3
   30088:	00452600 	call	45260 <fprintf>
   3008c:	00450340 	call	45034 <abort>
   30090:	e0fe8517 	ldw	r3,-1516(fp)
   30094:	e0be8517 	ldw	r2,-1516(fp)
   30098:	1885883a 	add	r2,r3,r2
   3009c:	e0be8715 	stw	r2,-1508(fp)
   300a0:	e0fe8717 	ldw	r3,-1508(fp)
   300a4:	e0be8517 	ldw	r2,-1516(fp)
   300a8:	1880022e 	bgeu	r3,r2,300b4 <secp256k1_scalar_sqr_512+0xe44>
   300ac:	00c00044 	movi	r3,1
   300b0:	00000106 	br	300b8 <secp256k1_scalar_sqr_512+0xe48>
   300b4:	0007883a 	mov	r3,zero
   300b8:	e0be8617 	ldw	r2,-1512(fp)
   300bc:	10c5883a 	add	r2,r2,r3
   300c0:	e0be8615 	stw	r2,-1512(fp)
   300c4:	e0fe5f17 	ldw	r3,-1668(fp)
   300c8:	e0be8717 	ldw	r2,-1508(fp)
   300cc:	1885883a 	add	r2,r3,r2
   300d0:	e0be5f15 	stw	r2,-1668(fp)
   300d4:	e0fe5f17 	ldw	r3,-1668(fp)
   300d8:	e0be8717 	ldw	r2,-1508(fp)
   300dc:	1880022e 	bgeu	r3,r2,300e8 <secp256k1_scalar_sqr_512+0xe78>
   300e0:	00c00044 	movi	r3,1
   300e4:	00000106 	br	300ec <secp256k1_scalar_sqr_512+0xe7c>
   300e8:	0007883a 	mov	r3,zero
   300ec:	e0be8617 	ldw	r2,-1512(fp)
   300f0:	10c5883a 	add	r2,r2,r3
   300f4:	e0be8615 	stw	r2,-1512(fp)
   300f8:	e0fe5f17 	ldw	r3,-1668(fp)
   300fc:	e0be8717 	ldw	r2,-1508(fp)
   30100:	1885803a 	cmpltu	r2,r3,r2
   30104:	1007883a 	mov	r3,r2
   30108:	e0be8617 	ldw	r2,-1512(fp)
   3010c:	1005003a 	cmpeq	r2,r2,zero
   30110:	1884703a 	and	r2,r3,r2
   30114:	10c03fcc 	andi	r3,r2,255
   30118:	e0be6117 	ldw	r2,-1660(fp)
   3011c:	10c5883a 	add	r2,r2,r3
   30120:	e0be6115 	stw	r2,-1660(fp)
   30124:	e0fe5f17 	ldw	r3,-1668(fp)
   30128:	e0be8717 	ldw	r2,-1508(fp)
   3012c:	1885803a 	cmpltu	r2,r3,r2
   30130:	10803fcc 	andi	r2,r2,255
   30134:	10000626 	beq	r2,zero,30150 <secp256k1_scalar_sqr_512+0xee0>
   30138:	e0be8617 	ldw	r2,-1512(fp)
   3013c:	1005003a 	cmpeq	r2,r2,zero
   30140:	10803fcc 	andi	r2,r2,255
   30144:	10000226 	beq	r2,zero,30150 <secp256k1_scalar_sqr_512+0xee0>
   30148:	00800044 	movi	r2,1
   3014c:	00000106 	br	30154 <secp256k1_scalar_sqr_512+0xee4>
   30150:	0005883a 	mov	r2,zero
   30154:	10001126 	beq	r2,zero,3019c <secp256k1_scalar_sqr_512+0xf2c>
   30158:	e0be6117 	ldw	r2,-1660(fp)
   3015c:	1005003a 	cmpeq	r2,r2,zero
   30160:	10803fcc 	andi	r2,r2,255
   30164:	10000d26 	beq	r2,zero,3019c <secp256k1_scalar_sqr_512+0xf2c>
   30168:	d0a01617 	ldw	r2,-32680(gp)
   3016c:	10c00317 	ldw	r3,12(r2)
   30170:	008001b4 	movhi	r2,6
   30174:	10b08704 	addi	r2,r2,-15844
   30178:	d8800015 	stw	r2,0(sp)
   3017c:	01c09484 	movi	r7,594
   30180:	018001b4 	movhi	r6,6
   30184:	31af9204 	addi	r6,r6,-16824
   30188:	014001b4 	movhi	r5,6
   3018c:	296b3804 	addi	r5,r5,-21280
   30190:	1809883a 	mov	r4,r3
   30194:	00452600 	call	45260 <fprintf>
   30198:	00450340 	call	45034 <abort>
   3019c:	e0fe6017 	ldw	r3,-1664(fp)
   301a0:	e0be8617 	ldw	r2,-1512(fp)
   301a4:	1885883a 	add	r2,r3,r2
   301a8:	e0be6015 	stw	r2,-1664(fp)
   301ac:	e0fe6017 	ldw	r3,-1664(fp)
   301b0:	e0be8617 	ldw	r2,-1512(fp)
   301b4:	1880022e 	bgeu	r3,r2,301c0 <secp256k1_scalar_sqr_512+0xf50>
   301b8:	00c00044 	movi	r3,1
   301bc:	00000106 	br	301c4 <secp256k1_scalar_sqr_512+0xf54>
   301c0:	0007883a 	mov	r3,zero
   301c4:	e0be6117 	ldw	r2,-1660(fp)
   301c8:	10c5883a 	add	r2,r2,r3
   301cc:	e0be6115 	stw	r2,-1660(fp)
   301d0:	e0fe6017 	ldw	r3,-1664(fp)
   301d4:	e0be8617 	ldw	r2,-1512(fp)
   301d8:	1885803a 	cmpltu	r2,r3,r2
   301dc:	10803fcc 	andi	r2,r2,255
   301e0:	10001126 	beq	r2,zero,30228 <secp256k1_scalar_sqr_512+0xfb8>
   301e4:	e0be6117 	ldw	r2,-1660(fp)
   301e8:	1005003a 	cmpeq	r2,r2,zero
   301ec:	10803fcc 	andi	r2,r2,255
   301f0:	10000d26 	beq	r2,zero,30228 <secp256k1_scalar_sqr_512+0xfb8>
   301f4:	d0a01617 	ldw	r2,-32680(gp)
   301f8:	10c00317 	ldw	r3,12(r2)
   301fc:	008001b4 	movhi	r2,6
   30200:	10b09704 	addi	r2,r2,-15780
   30204:	d8800015 	stw	r2,0(sp)
   30208:	01c09484 	movi	r7,594
   3020c:	018001b4 	movhi	r6,6
   30210:	31af9204 	addi	r6,r6,-16824
   30214:	014001b4 	movhi	r5,6
   30218:	296b3804 	addi	r5,r5,-21280
   3021c:	1809883a 	mov	r4,r3
   30220:	00452600 	call	45260 <fprintf>
   30224:	00450340 	call	45034 <abort>
    muladd2(a->d[1], a->d[3]);
   30228:	e0bf2b17 	ldw	r2,-852(fp)
   3022c:	10800117 	ldw	r2,4(r2)
   30230:	e0bf4a15 	stw	r2,-728(fp)
   30234:	e03f4b15 	stw	zero,-724(fp)
   30238:	e0bf2b17 	ldw	r2,-852(fp)
   3023c:	10800317 	ldw	r2,12(r2)
   30240:	e0bf4c15 	stw	r2,-720(fp)
   30244:	e03f4d15 	stw	zero,-716(fp)
   30248:	e1bf4c17 	ldw	r6,-720(fp)
   3024c:	e1ff4d17 	ldw	r7,-716(fp)
   30250:	e13f4a17 	ldw	r4,-728(fp)
   30254:	e17f4b17 	ldw	r5,-724(fp)
   30258:	00429400 	call	42940 <__muldi3>
   3025c:	1009883a 	mov	r4,r2
   30260:	180b883a 	mov	r5,r3
   30264:	e13e8815 	stw	r4,-1504(fp)
   30268:	e17e8915 	stw	r5,-1500(fp)
   3026c:	e0be8917 	ldw	r2,-1500(fp)
   30270:	1004d83a 	srl	r2,r2,zero
   30274:	e0bf4e15 	stw	r2,-712(fp)
   30278:	e03f4f15 	stw	zero,-708(fp)
   3027c:	e0bf4e17 	ldw	r2,-712(fp)
   30280:	e0be8a15 	stw	r2,-1496(fp)
   30284:	e0be8817 	ldw	r2,-1504(fp)
   30288:	e0be8b15 	stw	r2,-1492(fp)
   3028c:	e0fe8a17 	ldw	r3,-1496(fp)
   30290:	e0be8a17 	ldw	r2,-1496(fp)
   30294:	1885883a 	add	r2,r3,r2
   30298:	e0be8c15 	stw	r2,-1488(fp)
   3029c:	e0fe8c17 	ldw	r3,-1488(fp)
   302a0:	e0be8a17 	ldw	r2,-1496(fp)
   302a4:	1880022e 	bgeu	r3,r2,302b0 <secp256k1_scalar_sqr_512+0x1040>
   302a8:	00c00044 	movi	r3,1
   302ac:	00000106 	br	302b4 <secp256k1_scalar_sqr_512+0x1044>
   302b0:	0007883a 	mov	r3,zero
   302b4:	e0be6117 	ldw	r2,-1660(fp)
   302b8:	10c5883a 	add	r2,r2,r3
   302bc:	e0be6115 	stw	r2,-1660(fp)
   302c0:	e0fe8c17 	ldw	r3,-1488(fp)
   302c4:	e0be8a17 	ldw	r2,-1496(fp)
   302c8:	1885803a 	cmpltu	r2,r3,r2
   302cc:	10803fcc 	andi	r2,r2,255
   302d0:	10001126 	beq	r2,zero,30318 <secp256k1_scalar_sqr_512+0x10a8>
   302d4:	e0be6117 	ldw	r2,-1660(fp)
   302d8:	1005003a 	cmpeq	r2,r2,zero
   302dc:	10803fcc 	andi	r2,r2,255
   302e0:	10000d26 	beq	r2,zero,30318 <secp256k1_scalar_sqr_512+0x10a8>
   302e4:	d0a01617 	ldw	r2,-32680(gp)
   302e8:	10c00317 	ldw	r3,12(r2)
   302ec:	008001b4 	movhi	r2,6
   302f0:	10b07b04 	addi	r2,r2,-15892
   302f4:	d8800015 	stw	r2,0(sp)
   302f8:	01c094c4 	movi	r7,595
   302fc:	018001b4 	movhi	r6,6
   30300:	31af9204 	addi	r6,r6,-16824
   30304:	014001b4 	movhi	r5,6
   30308:	296b3804 	addi	r5,r5,-21280
   3030c:	1809883a 	mov	r4,r3
   30310:	00452600 	call	45260 <fprintf>
   30314:	00450340 	call	45034 <abort>
   30318:	e0fe8b17 	ldw	r3,-1492(fp)
   3031c:	e0be8b17 	ldw	r2,-1492(fp)
   30320:	1885883a 	add	r2,r3,r2
   30324:	e0be8d15 	stw	r2,-1484(fp)
   30328:	e0fe8d17 	ldw	r3,-1484(fp)
   3032c:	e0be8b17 	ldw	r2,-1492(fp)
   30330:	1880022e 	bgeu	r3,r2,3033c <secp256k1_scalar_sqr_512+0x10cc>
   30334:	00c00044 	movi	r3,1
   30338:	00000106 	br	30340 <secp256k1_scalar_sqr_512+0x10d0>
   3033c:	0007883a 	mov	r3,zero
   30340:	e0be8c17 	ldw	r2,-1488(fp)
   30344:	10c5883a 	add	r2,r2,r3
   30348:	e0be8c15 	stw	r2,-1488(fp)
   3034c:	e0fe5f17 	ldw	r3,-1668(fp)
   30350:	e0be8d17 	ldw	r2,-1484(fp)
   30354:	1885883a 	add	r2,r3,r2
   30358:	e0be5f15 	stw	r2,-1668(fp)
   3035c:	e0fe5f17 	ldw	r3,-1668(fp)
   30360:	e0be8d17 	ldw	r2,-1484(fp)
   30364:	1880022e 	bgeu	r3,r2,30370 <secp256k1_scalar_sqr_512+0x1100>
   30368:	00c00044 	movi	r3,1
   3036c:	00000106 	br	30374 <secp256k1_scalar_sqr_512+0x1104>
   30370:	0007883a 	mov	r3,zero
   30374:	e0be8c17 	ldw	r2,-1488(fp)
   30378:	10c5883a 	add	r2,r2,r3
   3037c:	e0be8c15 	stw	r2,-1488(fp)
   30380:	e0fe5f17 	ldw	r3,-1668(fp)
   30384:	e0be8d17 	ldw	r2,-1484(fp)
   30388:	1885803a 	cmpltu	r2,r3,r2
   3038c:	1007883a 	mov	r3,r2
   30390:	e0be8c17 	ldw	r2,-1488(fp)
   30394:	1005003a 	cmpeq	r2,r2,zero
   30398:	1884703a 	and	r2,r3,r2
   3039c:	10c03fcc 	andi	r3,r2,255
   303a0:	e0be6117 	ldw	r2,-1660(fp)
   303a4:	10c5883a 	add	r2,r2,r3
   303a8:	e0be6115 	stw	r2,-1660(fp)
   303ac:	e0fe5f17 	ldw	r3,-1668(fp)
   303b0:	e0be8d17 	ldw	r2,-1484(fp)
   303b4:	1885803a 	cmpltu	r2,r3,r2
   303b8:	10803fcc 	andi	r2,r2,255
   303bc:	10000626 	beq	r2,zero,303d8 <secp256k1_scalar_sqr_512+0x1168>
   303c0:	e0be8c17 	ldw	r2,-1488(fp)
   303c4:	1005003a 	cmpeq	r2,r2,zero
   303c8:	10803fcc 	andi	r2,r2,255
   303cc:	10000226 	beq	r2,zero,303d8 <secp256k1_scalar_sqr_512+0x1168>
   303d0:	00800044 	movi	r2,1
   303d4:	00000106 	br	303dc <secp256k1_scalar_sqr_512+0x116c>
   303d8:	0005883a 	mov	r2,zero
   303dc:	10001126 	beq	r2,zero,30424 <secp256k1_scalar_sqr_512+0x11b4>
   303e0:	e0be6117 	ldw	r2,-1660(fp)
   303e4:	1005003a 	cmpeq	r2,r2,zero
   303e8:	10803fcc 	andi	r2,r2,255
   303ec:	10000d26 	beq	r2,zero,30424 <secp256k1_scalar_sqr_512+0x11b4>
   303f0:	d0a01617 	ldw	r2,-32680(gp)
   303f4:	10c00317 	ldw	r3,12(r2)
   303f8:	008001b4 	movhi	r2,6
   303fc:	10b08704 	addi	r2,r2,-15844
   30400:	d8800015 	stw	r2,0(sp)
   30404:	01c094c4 	movi	r7,595
   30408:	018001b4 	movhi	r6,6
   3040c:	31af9204 	addi	r6,r6,-16824
   30410:	014001b4 	movhi	r5,6
   30414:	296b3804 	addi	r5,r5,-21280
   30418:	1809883a 	mov	r4,r3
   3041c:	00452600 	call	45260 <fprintf>
   30420:	00450340 	call	45034 <abort>
   30424:	e0fe6017 	ldw	r3,-1664(fp)
   30428:	e0be8c17 	ldw	r2,-1488(fp)
   3042c:	1885883a 	add	r2,r3,r2
   30430:	e0be6015 	stw	r2,-1664(fp)
   30434:	e0fe6017 	ldw	r3,-1664(fp)
   30438:	e0be8c17 	ldw	r2,-1488(fp)
   3043c:	1880022e 	bgeu	r3,r2,30448 <secp256k1_scalar_sqr_512+0x11d8>
   30440:	00c00044 	movi	r3,1
   30444:	00000106 	br	3044c <secp256k1_scalar_sqr_512+0x11dc>
   30448:	0007883a 	mov	r3,zero
   3044c:	e0be6117 	ldw	r2,-1660(fp)
   30450:	10c5883a 	add	r2,r2,r3
   30454:	e0be6115 	stw	r2,-1660(fp)
   30458:	e0fe6017 	ldw	r3,-1664(fp)
   3045c:	e0be8c17 	ldw	r2,-1488(fp)
   30460:	1885803a 	cmpltu	r2,r3,r2
   30464:	10803fcc 	andi	r2,r2,255
   30468:	10001126 	beq	r2,zero,304b0 <secp256k1_scalar_sqr_512+0x1240>
   3046c:	e0be6117 	ldw	r2,-1660(fp)
   30470:	1005003a 	cmpeq	r2,r2,zero
   30474:	10803fcc 	andi	r2,r2,255
   30478:	10000d26 	beq	r2,zero,304b0 <secp256k1_scalar_sqr_512+0x1240>
   3047c:	d0a01617 	ldw	r2,-32680(gp)
   30480:	10c00317 	ldw	r3,12(r2)
   30484:	008001b4 	movhi	r2,6
   30488:	10b09704 	addi	r2,r2,-15780
   3048c:	d8800015 	stw	r2,0(sp)
   30490:	01c094c4 	movi	r7,595
   30494:	018001b4 	movhi	r6,6
   30498:	31af9204 	addi	r6,r6,-16824
   3049c:	014001b4 	movhi	r5,6
   304a0:	296b3804 	addi	r5,r5,-21280
   304a4:	1809883a 	mov	r4,r3
   304a8:	00452600 	call	45260 <fprintf>
   304ac:	00450340 	call	45034 <abort>
    muladd(a->d[2], a->d[2]);
   304b0:	e0bf2b17 	ldw	r2,-852(fp)
   304b4:	10800217 	ldw	r2,8(r2)
   304b8:	e0bf5015 	stw	r2,-704(fp)
   304bc:	e03f5115 	stw	zero,-700(fp)
   304c0:	e0bf2b17 	ldw	r2,-852(fp)
   304c4:	10800217 	ldw	r2,8(r2)
   304c8:	e0bf5215 	stw	r2,-696(fp)
   304cc:	e03f5315 	stw	zero,-692(fp)
   304d0:	e1bf5217 	ldw	r6,-696(fp)
   304d4:	e1ff5317 	ldw	r7,-692(fp)
   304d8:	e13f5017 	ldw	r4,-704(fp)
   304dc:	e17f5117 	ldw	r5,-700(fp)
   304e0:	00429400 	call	42940 <__muldi3>
   304e4:	1009883a 	mov	r4,r2
   304e8:	180b883a 	mov	r5,r3
   304ec:	e13e8e15 	stw	r4,-1480(fp)
   304f0:	e17e8f15 	stw	r5,-1476(fp)
   304f4:	e0be8f17 	ldw	r2,-1476(fp)
   304f8:	1004d83a 	srl	r2,r2,zero
   304fc:	e0bf5415 	stw	r2,-688(fp)
   30500:	e03f5515 	stw	zero,-684(fp)
   30504:	e0bf5417 	ldw	r2,-688(fp)
   30508:	e0be9015 	stw	r2,-1472(fp)
   3050c:	e0be8e17 	ldw	r2,-1480(fp)
   30510:	e0be9115 	stw	r2,-1468(fp)
   30514:	e0fe5f17 	ldw	r3,-1668(fp)
   30518:	e0be9117 	ldw	r2,-1468(fp)
   3051c:	1885883a 	add	r2,r3,r2
   30520:	e0be5f15 	stw	r2,-1668(fp)
   30524:	e0fe5f17 	ldw	r3,-1668(fp)
   30528:	e0be9117 	ldw	r2,-1468(fp)
   3052c:	1880022e 	bgeu	r3,r2,30538 <secp256k1_scalar_sqr_512+0x12c8>
   30530:	00c00044 	movi	r3,1
   30534:	00000106 	br	3053c <secp256k1_scalar_sqr_512+0x12cc>
   30538:	0007883a 	mov	r3,zero
   3053c:	e0be9017 	ldw	r2,-1472(fp)
   30540:	10c5883a 	add	r2,r2,r3
   30544:	e0be9015 	stw	r2,-1472(fp)
   30548:	e0fe6017 	ldw	r3,-1664(fp)
   3054c:	e0be9017 	ldw	r2,-1472(fp)
   30550:	1885883a 	add	r2,r3,r2
   30554:	e0be6015 	stw	r2,-1664(fp)
   30558:	e0fe6017 	ldw	r3,-1664(fp)
   3055c:	e0be9017 	ldw	r2,-1472(fp)
   30560:	1880022e 	bgeu	r3,r2,3056c <secp256k1_scalar_sqr_512+0x12fc>
   30564:	00c00044 	movi	r3,1
   30568:	00000106 	br	30570 <secp256k1_scalar_sqr_512+0x1300>
   3056c:	0007883a 	mov	r3,zero
   30570:	e0be6117 	ldw	r2,-1660(fp)
   30574:	10c5883a 	add	r2,r2,r3
   30578:	e0be6115 	stw	r2,-1660(fp)
   3057c:	e0fe6017 	ldw	r3,-1664(fp)
   30580:	e0be9017 	ldw	r2,-1472(fp)
   30584:	1885803a 	cmpltu	r2,r3,r2
   30588:	10803fcc 	andi	r2,r2,255
   3058c:	10001126 	beq	r2,zero,305d4 <secp256k1_scalar_sqr_512+0x1364>
   30590:	e0be6117 	ldw	r2,-1660(fp)
   30594:	1005003a 	cmpeq	r2,r2,zero
   30598:	10803fcc 	andi	r2,r2,255
   3059c:	10000d26 	beq	r2,zero,305d4 <secp256k1_scalar_sqr_512+0x1364>
   305a0:	d0a01617 	ldw	r2,-32680(gp)
   305a4:	10c00317 	ldw	r3,12(r2)
   305a8:	008001b4 	movhi	r2,6
   305ac:	10b02604 	addi	r2,r2,-16232
   305b0:	d8800015 	stw	r2,0(sp)
   305b4:	01c09504 	movi	r7,596
   305b8:	018001b4 	movhi	r6,6
   305bc:	31af9204 	addi	r6,r6,-16824
   305c0:	014001b4 	movhi	r5,6
   305c4:	296b3804 	addi	r5,r5,-21280
   305c8:	1809883a 	mov	r4,r3
   305cc:	00452600 	call	45260 <fprintf>
   305d0:	00450340 	call	45034 <abort>
    extract(l[4]);
   305d4:	e0bf2a17 	ldw	r2,-856(fp)
   305d8:	10c00404 	addi	r3,r2,16
   305dc:	e0be5f17 	ldw	r2,-1668(fp)
   305e0:	18800015 	stw	r2,0(r3)
   305e4:	e0be6017 	ldw	r2,-1664(fp)
   305e8:	e0be5f15 	stw	r2,-1668(fp)
   305ec:	e0be6117 	ldw	r2,-1660(fp)
   305f0:	e0be6015 	stw	r2,-1664(fp)
   305f4:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[5]);
   305f8:	e0bf2b17 	ldw	r2,-852(fp)
   305fc:	10800017 	ldw	r2,0(r2)
   30600:	e0bf5615 	stw	r2,-680(fp)
   30604:	e03f5715 	stw	zero,-676(fp)
   30608:	e0bf2b17 	ldw	r2,-852(fp)
   3060c:	10800517 	ldw	r2,20(r2)
   30610:	e0bf5815 	stw	r2,-672(fp)
   30614:	e03f5915 	stw	zero,-668(fp)
   30618:	e1bf5817 	ldw	r6,-672(fp)
   3061c:	e1ff5917 	ldw	r7,-668(fp)
   30620:	e13f5617 	ldw	r4,-680(fp)
   30624:	e17f5717 	ldw	r5,-676(fp)
   30628:	00429400 	call	42940 <__muldi3>
   3062c:	1009883a 	mov	r4,r2
   30630:	180b883a 	mov	r5,r3
   30634:	e13e9215 	stw	r4,-1464(fp)
   30638:	e17e9315 	stw	r5,-1460(fp)
   3063c:	e0be9317 	ldw	r2,-1460(fp)
   30640:	1004d83a 	srl	r2,r2,zero
   30644:	e0bf5a15 	stw	r2,-664(fp)
   30648:	e03f5b15 	stw	zero,-660(fp)
   3064c:	e0bf5a17 	ldw	r2,-664(fp)
   30650:	e0be9415 	stw	r2,-1456(fp)
   30654:	e0be9217 	ldw	r2,-1464(fp)
   30658:	e0be9515 	stw	r2,-1452(fp)
   3065c:	e0fe9417 	ldw	r3,-1456(fp)
   30660:	e0be9417 	ldw	r2,-1456(fp)
   30664:	1885883a 	add	r2,r3,r2
   30668:	e0be9615 	stw	r2,-1448(fp)
   3066c:	e0fe9617 	ldw	r3,-1448(fp)
   30670:	e0be9417 	ldw	r2,-1456(fp)
   30674:	1880022e 	bgeu	r3,r2,30680 <secp256k1_scalar_sqr_512+0x1410>
   30678:	00c00044 	movi	r3,1
   3067c:	00000106 	br	30684 <secp256k1_scalar_sqr_512+0x1414>
   30680:	0007883a 	mov	r3,zero
   30684:	e0be6117 	ldw	r2,-1660(fp)
   30688:	10c5883a 	add	r2,r2,r3
   3068c:	e0be6115 	stw	r2,-1660(fp)
   30690:	e0fe9617 	ldw	r3,-1448(fp)
   30694:	e0be9417 	ldw	r2,-1456(fp)
   30698:	1885803a 	cmpltu	r2,r3,r2
   3069c:	10803fcc 	andi	r2,r2,255
   306a0:	10001126 	beq	r2,zero,306e8 <secp256k1_scalar_sqr_512+0x1478>
   306a4:	e0be6117 	ldw	r2,-1660(fp)
   306a8:	1005003a 	cmpeq	r2,r2,zero
   306ac:	10803fcc 	andi	r2,r2,255
   306b0:	10000d26 	beq	r2,zero,306e8 <secp256k1_scalar_sqr_512+0x1478>
   306b4:	d0a01617 	ldw	r2,-32680(gp)
   306b8:	10c00317 	ldw	r3,12(r2)
   306bc:	008001b4 	movhi	r2,6
   306c0:	10b07b04 	addi	r2,r2,-15892
   306c4:	d8800015 	stw	r2,0(sp)
   306c8:	01c09584 	movi	r7,598
   306cc:	018001b4 	movhi	r6,6
   306d0:	31af9204 	addi	r6,r6,-16824
   306d4:	014001b4 	movhi	r5,6
   306d8:	296b3804 	addi	r5,r5,-21280
   306dc:	1809883a 	mov	r4,r3
   306e0:	00452600 	call	45260 <fprintf>
   306e4:	00450340 	call	45034 <abort>
   306e8:	e0fe9517 	ldw	r3,-1452(fp)
   306ec:	e0be9517 	ldw	r2,-1452(fp)
   306f0:	1885883a 	add	r2,r3,r2
   306f4:	e0be9715 	stw	r2,-1444(fp)
   306f8:	e0fe9717 	ldw	r3,-1444(fp)
   306fc:	e0be9517 	ldw	r2,-1452(fp)
   30700:	1880022e 	bgeu	r3,r2,3070c <secp256k1_scalar_sqr_512+0x149c>
   30704:	00c00044 	movi	r3,1
   30708:	00000106 	br	30710 <secp256k1_scalar_sqr_512+0x14a0>
   3070c:	0007883a 	mov	r3,zero
   30710:	e0be9617 	ldw	r2,-1448(fp)
   30714:	10c5883a 	add	r2,r2,r3
   30718:	e0be9615 	stw	r2,-1448(fp)
   3071c:	e0fe5f17 	ldw	r3,-1668(fp)
   30720:	e0be9717 	ldw	r2,-1444(fp)
   30724:	1885883a 	add	r2,r3,r2
   30728:	e0be5f15 	stw	r2,-1668(fp)
   3072c:	e0fe5f17 	ldw	r3,-1668(fp)
   30730:	e0be9717 	ldw	r2,-1444(fp)
   30734:	1880022e 	bgeu	r3,r2,30740 <secp256k1_scalar_sqr_512+0x14d0>
   30738:	00c00044 	movi	r3,1
   3073c:	00000106 	br	30744 <secp256k1_scalar_sqr_512+0x14d4>
   30740:	0007883a 	mov	r3,zero
   30744:	e0be9617 	ldw	r2,-1448(fp)
   30748:	10c5883a 	add	r2,r2,r3
   3074c:	e0be9615 	stw	r2,-1448(fp)
   30750:	e0fe5f17 	ldw	r3,-1668(fp)
   30754:	e0be9717 	ldw	r2,-1444(fp)
   30758:	1885803a 	cmpltu	r2,r3,r2
   3075c:	1007883a 	mov	r3,r2
   30760:	e0be9617 	ldw	r2,-1448(fp)
   30764:	1005003a 	cmpeq	r2,r2,zero
   30768:	1884703a 	and	r2,r3,r2
   3076c:	10c03fcc 	andi	r3,r2,255
   30770:	e0be6117 	ldw	r2,-1660(fp)
   30774:	10c5883a 	add	r2,r2,r3
   30778:	e0be6115 	stw	r2,-1660(fp)
   3077c:	e0fe5f17 	ldw	r3,-1668(fp)
   30780:	e0be9717 	ldw	r2,-1444(fp)
   30784:	1885803a 	cmpltu	r2,r3,r2
   30788:	10803fcc 	andi	r2,r2,255
   3078c:	10000626 	beq	r2,zero,307a8 <secp256k1_scalar_sqr_512+0x1538>
   30790:	e0be9617 	ldw	r2,-1448(fp)
   30794:	1005003a 	cmpeq	r2,r2,zero
   30798:	10803fcc 	andi	r2,r2,255
   3079c:	10000226 	beq	r2,zero,307a8 <secp256k1_scalar_sqr_512+0x1538>
   307a0:	00800044 	movi	r2,1
   307a4:	00000106 	br	307ac <secp256k1_scalar_sqr_512+0x153c>
   307a8:	0005883a 	mov	r2,zero
   307ac:	10001126 	beq	r2,zero,307f4 <secp256k1_scalar_sqr_512+0x1584>
   307b0:	e0be6117 	ldw	r2,-1660(fp)
   307b4:	1005003a 	cmpeq	r2,r2,zero
   307b8:	10803fcc 	andi	r2,r2,255
   307bc:	10000d26 	beq	r2,zero,307f4 <secp256k1_scalar_sqr_512+0x1584>
   307c0:	d0a01617 	ldw	r2,-32680(gp)
   307c4:	10c00317 	ldw	r3,12(r2)
   307c8:	008001b4 	movhi	r2,6
   307cc:	10b08704 	addi	r2,r2,-15844
   307d0:	d8800015 	stw	r2,0(sp)
   307d4:	01c09584 	movi	r7,598
   307d8:	018001b4 	movhi	r6,6
   307dc:	31af9204 	addi	r6,r6,-16824
   307e0:	014001b4 	movhi	r5,6
   307e4:	296b3804 	addi	r5,r5,-21280
   307e8:	1809883a 	mov	r4,r3
   307ec:	00452600 	call	45260 <fprintf>
   307f0:	00450340 	call	45034 <abort>
   307f4:	e0fe6017 	ldw	r3,-1664(fp)
   307f8:	e0be9617 	ldw	r2,-1448(fp)
   307fc:	1885883a 	add	r2,r3,r2
   30800:	e0be6015 	stw	r2,-1664(fp)
   30804:	e0fe6017 	ldw	r3,-1664(fp)
   30808:	e0be9617 	ldw	r2,-1448(fp)
   3080c:	1880022e 	bgeu	r3,r2,30818 <secp256k1_scalar_sqr_512+0x15a8>
   30810:	00c00044 	movi	r3,1
   30814:	00000106 	br	3081c <secp256k1_scalar_sqr_512+0x15ac>
   30818:	0007883a 	mov	r3,zero
   3081c:	e0be6117 	ldw	r2,-1660(fp)
   30820:	10c5883a 	add	r2,r2,r3
   30824:	e0be6115 	stw	r2,-1660(fp)
   30828:	e0fe6017 	ldw	r3,-1664(fp)
   3082c:	e0be9617 	ldw	r2,-1448(fp)
   30830:	1885803a 	cmpltu	r2,r3,r2
   30834:	10803fcc 	andi	r2,r2,255
   30838:	10001126 	beq	r2,zero,30880 <secp256k1_scalar_sqr_512+0x1610>
   3083c:	e0be6117 	ldw	r2,-1660(fp)
   30840:	1005003a 	cmpeq	r2,r2,zero
   30844:	10803fcc 	andi	r2,r2,255
   30848:	10000d26 	beq	r2,zero,30880 <secp256k1_scalar_sqr_512+0x1610>
   3084c:	d0a01617 	ldw	r2,-32680(gp)
   30850:	10c00317 	ldw	r3,12(r2)
   30854:	008001b4 	movhi	r2,6
   30858:	10b09704 	addi	r2,r2,-15780
   3085c:	d8800015 	stw	r2,0(sp)
   30860:	01c09584 	movi	r7,598
   30864:	018001b4 	movhi	r6,6
   30868:	31af9204 	addi	r6,r6,-16824
   3086c:	014001b4 	movhi	r5,6
   30870:	296b3804 	addi	r5,r5,-21280
   30874:	1809883a 	mov	r4,r3
   30878:	00452600 	call	45260 <fprintf>
   3087c:	00450340 	call	45034 <abort>
    muladd2(a->d[1], a->d[4]);
   30880:	e0bf2b17 	ldw	r2,-852(fp)
   30884:	10800117 	ldw	r2,4(r2)
   30888:	e0bf5c15 	stw	r2,-656(fp)
   3088c:	e03f5d15 	stw	zero,-652(fp)
   30890:	e0bf2b17 	ldw	r2,-852(fp)
   30894:	10800417 	ldw	r2,16(r2)
   30898:	e0bf5e15 	stw	r2,-648(fp)
   3089c:	e03f5f15 	stw	zero,-644(fp)
   308a0:	e1bf5e17 	ldw	r6,-648(fp)
   308a4:	e1ff5f17 	ldw	r7,-644(fp)
   308a8:	e13f5c17 	ldw	r4,-656(fp)
   308ac:	e17f5d17 	ldw	r5,-652(fp)
   308b0:	00429400 	call	42940 <__muldi3>
   308b4:	1009883a 	mov	r4,r2
   308b8:	180b883a 	mov	r5,r3
   308bc:	e13e9815 	stw	r4,-1440(fp)
   308c0:	e17e9915 	stw	r5,-1436(fp)
   308c4:	e0be9917 	ldw	r2,-1436(fp)
   308c8:	1004d83a 	srl	r2,r2,zero
   308cc:	e0bf6015 	stw	r2,-640(fp)
   308d0:	e03f6115 	stw	zero,-636(fp)
   308d4:	e0bf6017 	ldw	r2,-640(fp)
   308d8:	e0be9a15 	stw	r2,-1432(fp)
   308dc:	e0be9817 	ldw	r2,-1440(fp)
   308e0:	e0be9b15 	stw	r2,-1428(fp)
   308e4:	e0fe9a17 	ldw	r3,-1432(fp)
   308e8:	e0be9a17 	ldw	r2,-1432(fp)
   308ec:	1885883a 	add	r2,r3,r2
   308f0:	e0be9c15 	stw	r2,-1424(fp)
   308f4:	e0fe9c17 	ldw	r3,-1424(fp)
   308f8:	e0be9a17 	ldw	r2,-1432(fp)
   308fc:	1880022e 	bgeu	r3,r2,30908 <secp256k1_scalar_sqr_512+0x1698>
   30900:	00c00044 	movi	r3,1
   30904:	00000106 	br	3090c <secp256k1_scalar_sqr_512+0x169c>
   30908:	0007883a 	mov	r3,zero
   3090c:	e0be6117 	ldw	r2,-1660(fp)
   30910:	10c5883a 	add	r2,r2,r3
   30914:	e0be6115 	stw	r2,-1660(fp)
   30918:	e0fe9c17 	ldw	r3,-1424(fp)
   3091c:	e0be9a17 	ldw	r2,-1432(fp)
   30920:	1885803a 	cmpltu	r2,r3,r2
   30924:	10803fcc 	andi	r2,r2,255
   30928:	10001126 	beq	r2,zero,30970 <secp256k1_scalar_sqr_512+0x1700>
   3092c:	e0be6117 	ldw	r2,-1660(fp)
   30930:	1005003a 	cmpeq	r2,r2,zero
   30934:	10803fcc 	andi	r2,r2,255
   30938:	10000d26 	beq	r2,zero,30970 <secp256k1_scalar_sqr_512+0x1700>
   3093c:	d0a01617 	ldw	r2,-32680(gp)
   30940:	10c00317 	ldw	r3,12(r2)
   30944:	008001b4 	movhi	r2,6
   30948:	10b07b04 	addi	r2,r2,-15892
   3094c:	d8800015 	stw	r2,0(sp)
   30950:	01c095c4 	movi	r7,599
   30954:	018001b4 	movhi	r6,6
   30958:	31af9204 	addi	r6,r6,-16824
   3095c:	014001b4 	movhi	r5,6
   30960:	296b3804 	addi	r5,r5,-21280
   30964:	1809883a 	mov	r4,r3
   30968:	00452600 	call	45260 <fprintf>
   3096c:	00450340 	call	45034 <abort>
   30970:	e0fe9b17 	ldw	r3,-1428(fp)
   30974:	e0be9b17 	ldw	r2,-1428(fp)
   30978:	1885883a 	add	r2,r3,r2
   3097c:	e0be9d15 	stw	r2,-1420(fp)
   30980:	e0fe9d17 	ldw	r3,-1420(fp)
   30984:	e0be9b17 	ldw	r2,-1428(fp)
   30988:	1880022e 	bgeu	r3,r2,30994 <secp256k1_scalar_sqr_512+0x1724>
   3098c:	00c00044 	movi	r3,1
   30990:	00000106 	br	30998 <secp256k1_scalar_sqr_512+0x1728>
   30994:	0007883a 	mov	r3,zero
   30998:	e0be9c17 	ldw	r2,-1424(fp)
   3099c:	10c5883a 	add	r2,r2,r3
   309a0:	e0be9c15 	stw	r2,-1424(fp)
   309a4:	e0fe5f17 	ldw	r3,-1668(fp)
   309a8:	e0be9d17 	ldw	r2,-1420(fp)
   309ac:	1885883a 	add	r2,r3,r2
   309b0:	e0be5f15 	stw	r2,-1668(fp)
   309b4:	e0fe5f17 	ldw	r3,-1668(fp)
   309b8:	e0be9d17 	ldw	r2,-1420(fp)
   309bc:	1880022e 	bgeu	r3,r2,309c8 <secp256k1_scalar_sqr_512+0x1758>
   309c0:	00c00044 	movi	r3,1
   309c4:	00000106 	br	309cc <secp256k1_scalar_sqr_512+0x175c>
   309c8:	0007883a 	mov	r3,zero
   309cc:	e0be9c17 	ldw	r2,-1424(fp)
   309d0:	10c5883a 	add	r2,r2,r3
   309d4:	e0be9c15 	stw	r2,-1424(fp)
   309d8:	e0fe5f17 	ldw	r3,-1668(fp)
   309dc:	e0be9d17 	ldw	r2,-1420(fp)
   309e0:	1885803a 	cmpltu	r2,r3,r2
   309e4:	1007883a 	mov	r3,r2
   309e8:	e0be9c17 	ldw	r2,-1424(fp)
   309ec:	1005003a 	cmpeq	r2,r2,zero
   309f0:	1884703a 	and	r2,r3,r2
   309f4:	10c03fcc 	andi	r3,r2,255
   309f8:	e0be6117 	ldw	r2,-1660(fp)
   309fc:	10c5883a 	add	r2,r2,r3
   30a00:	e0be6115 	stw	r2,-1660(fp)
   30a04:	e0fe5f17 	ldw	r3,-1668(fp)
   30a08:	e0be9d17 	ldw	r2,-1420(fp)
   30a0c:	1885803a 	cmpltu	r2,r3,r2
   30a10:	10803fcc 	andi	r2,r2,255
   30a14:	10000626 	beq	r2,zero,30a30 <secp256k1_scalar_sqr_512+0x17c0>
   30a18:	e0be9c17 	ldw	r2,-1424(fp)
   30a1c:	1005003a 	cmpeq	r2,r2,zero
   30a20:	10803fcc 	andi	r2,r2,255
   30a24:	10000226 	beq	r2,zero,30a30 <secp256k1_scalar_sqr_512+0x17c0>
   30a28:	00800044 	movi	r2,1
   30a2c:	00000106 	br	30a34 <secp256k1_scalar_sqr_512+0x17c4>
   30a30:	0005883a 	mov	r2,zero
   30a34:	10001126 	beq	r2,zero,30a7c <secp256k1_scalar_sqr_512+0x180c>
   30a38:	e0be6117 	ldw	r2,-1660(fp)
   30a3c:	1005003a 	cmpeq	r2,r2,zero
   30a40:	10803fcc 	andi	r2,r2,255
   30a44:	10000d26 	beq	r2,zero,30a7c <secp256k1_scalar_sqr_512+0x180c>
   30a48:	d0a01617 	ldw	r2,-32680(gp)
   30a4c:	10c00317 	ldw	r3,12(r2)
   30a50:	008001b4 	movhi	r2,6
   30a54:	10b08704 	addi	r2,r2,-15844
   30a58:	d8800015 	stw	r2,0(sp)
   30a5c:	01c095c4 	movi	r7,599
   30a60:	018001b4 	movhi	r6,6
   30a64:	31af9204 	addi	r6,r6,-16824
   30a68:	014001b4 	movhi	r5,6
   30a6c:	296b3804 	addi	r5,r5,-21280
   30a70:	1809883a 	mov	r4,r3
   30a74:	00452600 	call	45260 <fprintf>
   30a78:	00450340 	call	45034 <abort>
   30a7c:	e0fe6017 	ldw	r3,-1664(fp)
   30a80:	e0be9c17 	ldw	r2,-1424(fp)
   30a84:	1885883a 	add	r2,r3,r2
   30a88:	e0be6015 	stw	r2,-1664(fp)
   30a8c:	e0fe6017 	ldw	r3,-1664(fp)
   30a90:	e0be9c17 	ldw	r2,-1424(fp)
   30a94:	1880022e 	bgeu	r3,r2,30aa0 <secp256k1_scalar_sqr_512+0x1830>
   30a98:	00c00044 	movi	r3,1
   30a9c:	00000106 	br	30aa4 <secp256k1_scalar_sqr_512+0x1834>
   30aa0:	0007883a 	mov	r3,zero
   30aa4:	e0be6117 	ldw	r2,-1660(fp)
   30aa8:	10c5883a 	add	r2,r2,r3
   30aac:	e0be6115 	stw	r2,-1660(fp)
   30ab0:	e0fe6017 	ldw	r3,-1664(fp)
   30ab4:	e0be9c17 	ldw	r2,-1424(fp)
   30ab8:	1885803a 	cmpltu	r2,r3,r2
   30abc:	10803fcc 	andi	r2,r2,255
   30ac0:	10001126 	beq	r2,zero,30b08 <secp256k1_scalar_sqr_512+0x1898>
   30ac4:	e0be6117 	ldw	r2,-1660(fp)
   30ac8:	1005003a 	cmpeq	r2,r2,zero
   30acc:	10803fcc 	andi	r2,r2,255
   30ad0:	10000d26 	beq	r2,zero,30b08 <secp256k1_scalar_sqr_512+0x1898>
   30ad4:	d0a01617 	ldw	r2,-32680(gp)
   30ad8:	10c00317 	ldw	r3,12(r2)
   30adc:	008001b4 	movhi	r2,6
   30ae0:	10b09704 	addi	r2,r2,-15780
   30ae4:	d8800015 	stw	r2,0(sp)
   30ae8:	01c095c4 	movi	r7,599
   30aec:	018001b4 	movhi	r6,6
   30af0:	31af9204 	addi	r6,r6,-16824
   30af4:	014001b4 	movhi	r5,6
   30af8:	296b3804 	addi	r5,r5,-21280
   30afc:	1809883a 	mov	r4,r3
   30b00:	00452600 	call	45260 <fprintf>
   30b04:	00450340 	call	45034 <abort>
    muladd2(a->d[2], a->d[3]);
   30b08:	e0bf2b17 	ldw	r2,-852(fp)
   30b0c:	10800217 	ldw	r2,8(r2)
   30b10:	e0bf6215 	stw	r2,-632(fp)
   30b14:	e03f6315 	stw	zero,-628(fp)
   30b18:	e0bf2b17 	ldw	r2,-852(fp)
   30b1c:	10800317 	ldw	r2,12(r2)
   30b20:	e0bf6415 	stw	r2,-624(fp)
   30b24:	e03f6515 	stw	zero,-620(fp)
   30b28:	e1bf6417 	ldw	r6,-624(fp)
   30b2c:	e1ff6517 	ldw	r7,-620(fp)
   30b30:	e13f6217 	ldw	r4,-632(fp)
   30b34:	e17f6317 	ldw	r5,-628(fp)
   30b38:	00429400 	call	42940 <__muldi3>
   30b3c:	1009883a 	mov	r4,r2
   30b40:	180b883a 	mov	r5,r3
   30b44:	e13e9e15 	stw	r4,-1416(fp)
   30b48:	e17e9f15 	stw	r5,-1412(fp)
   30b4c:	e0be9f17 	ldw	r2,-1412(fp)
   30b50:	1004d83a 	srl	r2,r2,zero
   30b54:	e0bf6615 	stw	r2,-616(fp)
   30b58:	e03f6715 	stw	zero,-612(fp)
   30b5c:	e0bf6617 	ldw	r2,-616(fp)
   30b60:	e0bea015 	stw	r2,-1408(fp)
   30b64:	e0be9e17 	ldw	r2,-1416(fp)
   30b68:	e0bea115 	stw	r2,-1404(fp)
   30b6c:	e0fea017 	ldw	r3,-1408(fp)
   30b70:	e0bea017 	ldw	r2,-1408(fp)
   30b74:	1885883a 	add	r2,r3,r2
   30b78:	e0bea215 	stw	r2,-1400(fp)
   30b7c:	e0fea217 	ldw	r3,-1400(fp)
   30b80:	e0bea017 	ldw	r2,-1408(fp)
   30b84:	1880022e 	bgeu	r3,r2,30b90 <secp256k1_scalar_sqr_512+0x1920>
   30b88:	00c00044 	movi	r3,1
   30b8c:	00000106 	br	30b94 <secp256k1_scalar_sqr_512+0x1924>
   30b90:	0007883a 	mov	r3,zero
   30b94:	e0be6117 	ldw	r2,-1660(fp)
   30b98:	10c5883a 	add	r2,r2,r3
   30b9c:	e0be6115 	stw	r2,-1660(fp)
   30ba0:	e0fea217 	ldw	r3,-1400(fp)
   30ba4:	e0bea017 	ldw	r2,-1408(fp)
   30ba8:	1885803a 	cmpltu	r2,r3,r2
   30bac:	10803fcc 	andi	r2,r2,255
   30bb0:	10001126 	beq	r2,zero,30bf8 <secp256k1_scalar_sqr_512+0x1988>
   30bb4:	e0be6117 	ldw	r2,-1660(fp)
   30bb8:	1005003a 	cmpeq	r2,r2,zero
   30bbc:	10803fcc 	andi	r2,r2,255
   30bc0:	10000d26 	beq	r2,zero,30bf8 <secp256k1_scalar_sqr_512+0x1988>
   30bc4:	d0a01617 	ldw	r2,-32680(gp)
   30bc8:	10c00317 	ldw	r3,12(r2)
   30bcc:	008001b4 	movhi	r2,6
   30bd0:	10b07b04 	addi	r2,r2,-15892
   30bd4:	d8800015 	stw	r2,0(sp)
   30bd8:	01c09604 	movi	r7,600
   30bdc:	018001b4 	movhi	r6,6
   30be0:	31af9204 	addi	r6,r6,-16824
   30be4:	014001b4 	movhi	r5,6
   30be8:	296b3804 	addi	r5,r5,-21280
   30bec:	1809883a 	mov	r4,r3
   30bf0:	00452600 	call	45260 <fprintf>
   30bf4:	00450340 	call	45034 <abort>
   30bf8:	e0fea117 	ldw	r3,-1404(fp)
   30bfc:	e0bea117 	ldw	r2,-1404(fp)
   30c00:	1885883a 	add	r2,r3,r2
   30c04:	e0bea315 	stw	r2,-1396(fp)
   30c08:	e0fea317 	ldw	r3,-1396(fp)
   30c0c:	e0bea117 	ldw	r2,-1404(fp)
   30c10:	1880022e 	bgeu	r3,r2,30c1c <secp256k1_scalar_sqr_512+0x19ac>
   30c14:	00c00044 	movi	r3,1
   30c18:	00000106 	br	30c20 <secp256k1_scalar_sqr_512+0x19b0>
   30c1c:	0007883a 	mov	r3,zero
   30c20:	e0bea217 	ldw	r2,-1400(fp)
   30c24:	10c5883a 	add	r2,r2,r3
   30c28:	e0bea215 	stw	r2,-1400(fp)
   30c2c:	e0fe5f17 	ldw	r3,-1668(fp)
   30c30:	e0bea317 	ldw	r2,-1396(fp)
   30c34:	1885883a 	add	r2,r3,r2
   30c38:	e0be5f15 	stw	r2,-1668(fp)
   30c3c:	e0fe5f17 	ldw	r3,-1668(fp)
   30c40:	e0bea317 	ldw	r2,-1396(fp)
   30c44:	1880022e 	bgeu	r3,r2,30c50 <secp256k1_scalar_sqr_512+0x19e0>
   30c48:	00c00044 	movi	r3,1
   30c4c:	00000106 	br	30c54 <secp256k1_scalar_sqr_512+0x19e4>
   30c50:	0007883a 	mov	r3,zero
   30c54:	e0bea217 	ldw	r2,-1400(fp)
   30c58:	10c5883a 	add	r2,r2,r3
   30c5c:	e0bea215 	stw	r2,-1400(fp)
   30c60:	e0fe5f17 	ldw	r3,-1668(fp)
   30c64:	e0bea317 	ldw	r2,-1396(fp)
   30c68:	1885803a 	cmpltu	r2,r3,r2
   30c6c:	1007883a 	mov	r3,r2
   30c70:	e0bea217 	ldw	r2,-1400(fp)
   30c74:	1005003a 	cmpeq	r2,r2,zero
   30c78:	1884703a 	and	r2,r3,r2
   30c7c:	10c03fcc 	andi	r3,r2,255
   30c80:	e0be6117 	ldw	r2,-1660(fp)
   30c84:	10c5883a 	add	r2,r2,r3
   30c88:	e0be6115 	stw	r2,-1660(fp)
   30c8c:	e0fe5f17 	ldw	r3,-1668(fp)
   30c90:	e0bea317 	ldw	r2,-1396(fp)
   30c94:	1885803a 	cmpltu	r2,r3,r2
   30c98:	10803fcc 	andi	r2,r2,255
   30c9c:	10000626 	beq	r2,zero,30cb8 <secp256k1_scalar_sqr_512+0x1a48>
   30ca0:	e0bea217 	ldw	r2,-1400(fp)
   30ca4:	1005003a 	cmpeq	r2,r2,zero
   30ca8:	10803fcc 	andi	r2,r2,255
   30cac:	10000226 	beq	r2,zero,30cb8 <secp256k1_scalar_sqr_512+0x1a48>
   30cb0:	00800044 	movi	r2,1
   30cb4:	00000106 	br	30cbc <secp256k1_scalar_sqr_512+0x1a4c>
   30cb8:	0005883a 	mov	r2,zero
   30cbc:	10001126 	beq	r2,zero,30d04 <secp256k1_scalar_sqr_512+0x1a94>
   30cc0:	e0be6117 	ldw	r2,-1660(fp)
   30cc4:	1005003a 	cmpeq	r2,r2,zero
   30cc8:	10803fcc 	andi	r2,r2,255
   30ccc:	10000d26 	beq	r2,zero,30d04 <secp256k1_scalar_sqr_512+0x1a94>
   30cd0:	d0a01617 	ldw	r2,-32680(gp)
   30cd4:	10c00317 	ldw	r3,12(r2)
   30cd8:	008001b4 	movhi	r2,6
   30cdc:	10b08704 	addi	r2,r2,-15844
   30ce0:	d8800015 	stw	r2,0(sp)
   30ce4:	01c09604 	movi	r7,600
   30ce8:	018001b4 	movhi	r6,6
   30cec:	31af9204 	addi	r6,r6,-16824
   30cf0:	014001b4 	movhi	r5,6
   30cf4:	296b3804 	addi	r5,r5,-21280
   30cf8:	1809883a 	mov	r4,r3
   30cfc:	00452600 	call	45260 <fprintf>
   30d00:	00450340 	call	45034 <abort>
   30d04:	e0fe6017 	ldw	r3,-1664(fp)
   30d08:	e0bea217 	ldw	r2,-1400(fp)
   30d0c:	1885883a 	add	r2,r3,r2
   30d10:	e0be6015 	stw	r2,-1664(fp)
   30d14:	e0fe6017 	ldw	r3,-1664(fp)
   30d18:	e0bea217 	ldw	r2,-1400(fp)
   30d1c:	1880022e 	bgeu	r3,r2,30d28 <secp256k1_scalar_sqr_512+0x1ab8>
   30d20:	00c00044 	movi	r3,1
   30d24:	00000106 	br	30d2c <secp256k1_scalar_sqr_512+0x1abc>
   30d28:	0007883a 	mov	r3,zero
   30d2c:	e0be6117 	ldw	r2,-1660(fp)
   30d30:	10c5883a 	add	r2,r2,r3
   30d34:	e0be6115 	stw	r2,-1660(fp)
   30d38:	e0fe6017 	ldw	r3,-1664(fp)
   30d3c:	e0bea217 	ldw	r2,-1400(fp)
   30d40:	1885803a 	cmpltu	r2,r3,r2
   30d44:	10803fcc 	andi	r2,r2,255
   30d48:	10001126 	beq	r2,zero,30d90 <secp256k1_scalar_sqr_512+0x1b20>
   30d4c:	e0be6117 	ldw	r2,-1660(fp)
   30d50:	1005003a 	cmpeq	r2,r2,zero
   30d54:	10803fcc 	andi	r2,r2,255
   30d58:	10000d26 	beq	r2,zero,30d90 <secp256k1_scalar_sqr_512+0x1b20>
   30d5c:	d0a01617 	ldw	r2,-32680(gp)
   30d60:	10c00317 	ldw	r3,12(r2)
   30d64:	008001b4 	movhi	r2,6
   30d68:	10b09704 	addi	r2,r2,-15780
   30d6c:	d8800015 	stw	r2,0(sp)
   30d70:	01c09604 	movi	r7,600
   30d74:	018001b4 	movhi	r6,6
   30d78:	31af9204 	addi	r6,r6,-16824
   30d7c:	014001b4 	movhi	r5,6
   30d80:	296b3804 	addi	r5,r5,-21280
   30d84:	1809883a 	mov	r4,r3
   30d88:	00452600 	call	45260 <fprintf>
   30d8c:	00450340 	call	45034 <abort>
    extract(l[5]);
   30d90:	e0bf2a17 	ldw	r2,-856(fp)
   30d94:	10c00504 	addi	r3,r2,20
   30d98:	e0be5f17 	ldw	r2,-1668(fp)
   30d9c:	18800015 	stw	r2,0(r3)
   30da0:	e0be6017 	ldw	r2,-1664(fp)
   30da4:	e0be5f15 	stw	r2,-1668(fp)
   30da8:	e0be6117 	ldw	r2,-1660(fp)
   30dac:	e0be6015 	stw	r2,-1664(fp)
   30db0:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[6]);
   30db4:	e0bf2b17 	ldw	r2,-852(fp)
   30db8:	10800017 	ldw	r2,0(r2)
   30dbc:	e0bf6815 	stw	r2,-608(fp)
   30dc0:	e03f6915 	stw	zero,-604(fp)
   30dc4:	e0bf2b17 	ldw	r2,-852(fp)
   30dc8:	10800617 	ldw	r2,24(r2)
   30dcc:	e0bf6a15 	stw	r2,-600(fp)
   30dd0:	e03f6b15 	stw	zero,-596(fp)
   30dd4:	e1bf6a17 	ldw	r6,-600(fp)
   30dd8:	e1ff6b17 	ldw	r7,-596(fp)
   30ddc:	e13f6817 	ldw	r4,-608(fp)
   30de0:	e17f6917 	ldw	r5,-604(fp)
   30de4:	00429400 	call	42940 <__muldi3>
   30de8:	1009883a 	mov	r4,r2
   30dec:	180b883a 	mov	r5,r3
   30df0:	e13ea415 	stw	r4,-1392(fp)
   30df4:	e17ea515 	stw	r5,-1388(fp)
   30df8:	e0bea517 	ldw	r2,-1388(fp)
   30dfc:	1004d83a 	srl	r2,r2,zero
   30e00:	e0bf6c15 	stw	r2,-592(fp)
   30e04:	e03f6d15 	stw	zero,-588(fp)
   30e08:	e0bf6c17 	ldw	r2,-592(fp)
   30e0c:	e0bea615 	stw	r2,-1384(fp)
   30e10:	e0bea417 	ldw	r2,-1392(fp)
   30e14:	e0bea715 	stw	r2,-1380(fp)
   30e18:	e0fea617 	ldw	r3,-1384(fp)
   30e1c:	e0bea617 	ldw	r2,-1384(fp)
   30e20:	1885883a 	add	r2,r3,r2
   30e24:	e0bea815 	stw	r2,-1376(fp)
   30e28:	e0fea817 	ldw	r3,-1376(fp)
   30e2c:	e0bea617 	ldw	r2,-1384(fp)
   30e30:	1880022e 	bgeu	r3,r2,30e3c <secp256k1_scalar_sqr_512+0x1bcc>
   30e34:	00c00044 	movi	r3,1
   30e38:	00000106 	br	30e40 <secp256k1_scalar_sqr_512+0x1bd0>
   30e3c:	0007883a 	mov	r3,zero
   30e40:	e0be6117 	ldw	r2,-1660(fp)
   30e44:	10c5883a 	add	r2,r2,r3
   30e48:	e0be6115 	stw	r2,-1660(fp)
   30e4c:	e0fea817 	ldw	r3,-1376(fp)
   30e50:	e0bea617 	ldw	r2,-1384(fp)
   30e54:	1885803a 	cmpltu	r2,r3,r2
   30e58:	10803fcc 	andi	r2,r2,255
   30e5c:	10001126 	beq	r2,zero,30ea4 <secp256k1_scalar_sqr_512+0x1c34>
   30e60:	e0be6117 	ldw	r2,-1660(fp)
   30e64:	1005003a 	cmpeq	r2,r2,zero
   30e68:	10803fcc 	andi	r2,r2,255
   30e6c:	10000d26 	beq	r2,zero,30ea4 <secp256k1_scalar_sqr_512+0x1c34>
   30e70:	d0a01617 	ldw	r2,-32680(gp)
   30e74:	10c00317 	ldw	r3,12(r2)
   30e78:	008001b4 	movhi	r2,6
   30e7c:	10b07b04 	addi	r2,r2,-15892
   30e80:	d8800015 	stw	r2,0(sp)
   30e84:	01c09684 	movi	r7,602
   30e88:	018001b4 	movhi	r6,6
   30e8c:	31af9204 	addi	r6,r6,-16824
   30e90:	014001b4 	movhi	r5,6
   30e94:	296b3804 	addi	r5,r5,-21280
   30e98:	1809883a 	mov	r4,r3
   30e9c:	00452600 	call	45260 <fprintf>
   30ea0:	00450340 	call	45034 <abort>
   30ea4:	e0fea717 	ldw	r3,-1380(fp)
   30ea8:	e0bea717 	ldw	r2,-1380(fp)
   30eac:	1885883a 	add	r2,r3,r2
   30eb0:	e0bea915 	stw	r2,-1372(fp)
   30eb4:	e0fea917 	ldw	r3,-1372(fp)
   30eb8:	e0bea717 	ldw	r2,-1380(fp)
   30ebc:	1880022e 	bgeu	r3,r2,30ec8 <secp256k1_scalar_sqr_512+0x1c58>
   30ec0:	00c00044 	movi	r3,1
   30ec4:	00000106 	br	30ecc <secp256k1_scalar_sqr_512+0x1c5c>
   30ec8:	0007883a 	mov	r3,zero
   30ecc:	e0bea817 	ldw	r2,-1376(fp)
   30ed0:	10c5883a 	add	r2,r2,r3
   30ed4:	e0bea815 	stw	r2,-1376(fp)
   30ed8:	e0fe5f17 	ldw	r3,-1668(fp)
   30edc:	e0bea917 	ldw	r2,-1372(fp)
   30ee0:	1885883a 	add	r2,r3,r2
   30ee4:	e0be5f15 	stw	r2,-1668(fp)
   30ee8:	e0fe5f17 	ldw	r3,-1668(fp)
   30eec:	e0bea917 	ldw	r2,-1372(fp)
   30ef0:	1880022e 	bgeu	r3,r2,30efc <secp256k1_scalar_sqr_512+0x1c8c>
   30ef4:	00c00044 	movi	r3,1
   30ef8:	00000106 	br	30f00 <secp256k1_scalar_sqr_512+0x1c90>
   30efc:	0007883a 	mov	r3,zero
   30f00:	e0bea817 	ldw	r2,-1376(fp)
   30f04:	10c5883a 	add	r2,r2,r3
   30f08:	e0bea815 	stw	r2,-1376(fp)
   30f0c:	e0fe5f17 	ldw	r3,-1668(fp)
   30f10:	e0bea917 	ldw	r2,-1372(fp)
   30f14:	1885803a 	cmpltu	r2,r3,r2
   30f18:	1007883a 	mov	r3,r2
   30f1c:	e0bea817 	ldw	r2,-1376(fp)
   30f20:	1005003a 	cmpeq	r2,r2,zero
   30f24:	1884703a 	and	r2,r3,r2
   30f28:	10c03fcc 	andi	r3,r2,255
   30f2c:	e0be6117 	ldw	r2,-1660(fp)
   30f30:	10c5883a 	add	r2,r2,r3
   30f34:	e0be6115 	stw	r2,-1660(fp)
   30f38:	e0fe5f17 	ldw	r3,-1668(fp)
   30f3c:	e0bea917 	ldw	r2,-1372(fp)
   30f40:	1885803a 	cmpltu	r2,r3,r2
   30f44:	10803fcc 	andi	r2,r2,255
   30f48:	10000626 	beq	r2,zero,30f64 <secp256k1_scalar_sqr_512+0x1cf4>
   30f4c:	e0bea817 	ldw	r2,-1376(fp)
   30f50:	1005003a 	cmpeq	r2,r2,zero
   30f54:	10803fcc 	andi	r2,r2,255
   30f58:	10000226 	beq	r2,zero,30f64 <secp256k1_scalar_sqr_512+0x1cf4>
   30f5c:	00800044 	movi	r2,1
   30f60:	00000106 	br	30f68 <secp256k1_scalar_sqr_512+0x1cf8>
   30f64:	0005883a 	mov	r2,zero
   30f68:	10001126 	beq	r2,zero,30fb0 <secp256k1_scalar_sqr_512+0x1d40>
   30f6c:	e0be6117 	ldw	r2,-1660(fp)
   30f70:	1005003a 	cmpeq	r2,r2,zero
   30f74:	10803fcc 	andi	r2,r2,255
   30f78:	10000d26 	beq	r2,zero,30fb0 <secp256k1_scalar_sqr_512+0x1d40>
   30f7c:	d0a01617 	ldw	r2,-32680(gp)
   30f80:	10c00317 	ldw	r3,12(r2)
   30f84:	008001b4 	movhi	r2,6
   30f88:	10b08704 	addi	r2,r2,-15844
   30f8c:	d8800015 	stw	r2,0(sp)
   30f90:	01c09684 	movi	r7,602
   30f94:	018001b4 	movhi	r6,6
   30f98:	31af9204 	addi	r6,r6,-16824
   30f9c:	014001b4 	movhi	r5,6
   30fa0:	296b3804 	addi	r5,r5,-21280
   30fa4:	1809883a 	mov	r4,r3
   30fa8:	00452600 	call	45260 <fprintf>
   30fac:	00450340 	call	45034 <abort>
   30fb0:	e0fe6017 	ldw	r3,-1664(fp)
   30fb4:	e0bea817 	ldw	r2,-1376(fp)
   30fb8:	1885883a 	add	r2,r3,r2
   30fbc:	e0be6015 	stw	r2,-1664(fp)
   30fc0:	e0fe6017 	ldw	r3,-1664(fp)
   30fc4:	e0bea817 	ldw	r2,-1376(fp)
   30fc8:	1880022e 	bgeu	r3,r2,30fd4 <secp256k1_scalar_sqr_512+0x1d64>
   30fcc:	00c00044 	movi	r3,1
   30fd0:	00000106 	br	30fd8 <secp256k1_scalar_sqr_512+0x1d68>
   30fd4:	0007883a 	mov	r3,zero
   30fd8:	e0be6117 	ldw	r2,-1660(fp)
   30fdc:	10c5883a 	add	r2,r2,r3
   30fe0:	e0be6115 	stw	r2,-1660(fp)
   30fe4:	e0fe6017 	ldw	r3,-1664(fp)
   30fe8:	e0bea817 	ldw	r2,-1376(fp)
   30fec:	1885803a 	cmpltu	r2,r3,r2
   30ff0:	10803fcc 	andi	r2,r2,255
   30ff4:	10001126 	beq	r2,zero,3103c <secp256k1_scalar_sqr_512+0x1dcc>
   30ff8:	e0be6117 	ldw	r2,-1660(fp)
   30ffc:	1005003a 	cmpeq	r2,r2,zero
   31000:	10803fcc 	andi	r2,r2,255
   31004:	10000d26 	beq	r2,zero,3103c <secp256k1_scalar_sqr_512+0x1dcc>
   31008:	d0a01617 	ldw	r2,-32680(gp)
   3100c:	10c00317 	ldw	r3,12(r2)
   31010:	008001b4 	movhi	r2,6
   31014:	10b09704 	addi	r2,r2,-15780
   31018:	d8800015 	stw	r2,0(sp)
   3101c:	01c09684 	movi	r7,602
   31020:	018001b4 	movhi	r6,6
   31024:	31af9204 	addi	r6,r6,-16824
   31028:	014001b4 	movhi	r5,6
   3102c:	296b3804 	addi	r5,r5,-21280
   31030:	1809883a 	mov	r4,r3
   31034:	00452600 	call	45260 <fprintf>
   31038:	00450340 	call	45034 <abort>
    muladd2(a->d[1], a->d[5]);
   3103c:	e0bf2b17 	ldw	r2,-852(fp)
   31040:	10800117 	ldw	r2,4(r2)
   31044:	e0bf6e15 	stw	r2,-584(fp)
   31048:	e03f6f15 	stw	zero,-580(fp)
   3104c:	e0bf2b17 	ldw	r2,-852(fp)
   31050:	10800517 	ldw	r2,20(r2)
   31054:	e0bf7015 	stw	r2,-576(fp)
   31058:	e03f7115 	stw	zero,-572(fp)
   3105c:	e1bf7017 	ldw	r6,-576(fp)
   31060:	e1ff7117 	ldw	r7,-572(fp)
   31064:	e13f6e17 	ldw	r4,-584(fp)
   31068:	e17f6f17 	ldw	r5,-580(fp)
   3106c:	00429400 	call	42940 <__muldi3>
   31070:	1009883a 	mov	r4,r2
   31074:	180b883a 	mov	r5,r3
   31078:	e13eaa15 	stw	r4,-1368(fp)
   3107c:	e17eab15 	stw	r5,-1364(fp)
   31080:	e0beab17 	ldw	r2,-1364(fp)
   31084:	1004d83a 	srl	r2,r2,zero
   31088:	e0bf7215 	stw	r2,-568(fp)
   3108c:	e03f7315 	stw	zero,-564(fp)
   31090:	e0bf7217 	ldw	r2,-568(fp)
   31094:	e0beac15 	stw	r2,-1360(fp)
   31098:	e0beaa17 	ldw	r2,-1368(fp)
   3109c:	e0bead15 	stw	r2,-1356(fp)
   310a0:	e0feac17 	ldw	r3,-1360(fp)
   310a4:	e0beac17 	ldw	r2,-1360(fp)
   310a8:	1885883a 	add	r2,r3,r2
   310ac:	e0beae15 	stw	r2,-1352(fp)
   310b0:	e0feae17 	ldw	r3,-1352(fp)
   310b4:	e0beac17 	ldw	r2,-1360(fp)
   310b8:	1880022e 	bgeu	r3,r2,310c4 <secp256k1_scalar_sqr_512+0x1e54>
   310bc:	00c00044 	movi	r3,1
   310c0:	00000106 	br	310c8 <secp256k1_scalar_sqr_512+0x1e58>
   310c4:	0007883a 	mov	r3,zero
   310c8:	e0be6117 	ldw	r2,-1660(fp)
   310cc:	10c5883a 	add	r2,r2,r3
   310d0:	e0be6115 	stw	r2,-1660(fp)
   310d4:	e0feae17 	ldw	r3,-1352(fp)
   310d8:	e0beac17 	ldw	r2,-1360(fp)
   310dc:	1885803a 	cmpltu	r2,r3,r2
   310e0:	10803fcc 	andi	r2,r2,255
   310e4:	10001126 	beq	r2,zero,3112c <secp256k1_scalar_sqr_512+0x1ebc>
   310e8:	e0be6117 	ldw	r2,-1660(fp)
   310ec:	1005003a 	cmpeq	r2,r2,zero
   310f0:	10803fcc 	andi	r2,r2,255
   310f4:	10000d26 	beq	r2,zero,3112c <secp256k1_scalar_sqr_512+0x1ebc>
   310f8:	d0a01617 	ldw	r2,-32680(gp)
   310fc:	10c00317 	ldw	r3,12(r2)
   31100:	008001b4 	movhi	r2,6
   31104:	10b07b04 	addi	r2,r2,-15892
   31108:	d8800015 	stw	r2,0(sp)
   3110c:	01c096c4 	movi	r7,603
   31110:	018001b4 	movhi	r6,6
   31114:	31af9204 	addi	r6,r6,-16824
   31118:	014001b4 	movhi	r5,6
   3111c:	296b3804 	addi	r5,r5,-21280
   31120:	1809883a 	mov	r4,r3
   31124:	00452600 	call	45260 <fprintf>
   31128:	00450340 	call	45034 <abort>
   3112c:	e0fead17 	ldw	r3,-1356(fp)
   31130:	e0bead17 	ldw	r2,-1356(fp)
   31134:	1885883a 	add	r2,r3,r2
   31138:	e0beaf15 	stw	r2,-1348(fp)
   3113c:	e0feaf17 	ldw	r3,-1348(fp)
   31140:	e0bead17 	ldw	r2,-1356(fp)
   31144:	1880022e 	bgeu	r3,r2,31150 <secp256k1_scalar_sqr_512+0x1ee0>
   31148:	00c00044 	movi	r3,1
   3114c:	00000106 	br	31154 <secp256k1_scalar_sqr_512+0x1ee4>
   31150:	0007883a 	mov	r3,zero
   31154:	e0beae17 	ldw	r2,-1352(fp)
   31158:	10c5883a 	add	r2,r2,r3
   3115c:	e0beae15 	stw	r2,-1352(fp)
   31160:	e0fe5f17 	ldw	r3,-1668(fp)
   31164:	e0beaf17 	ldw	r2,-1348(fp)
   31168:	1885883a 	add	r2,r3,r2
   3116c:	e0be5f15 	stw	r2,-1668(fp)
   31170:	e0fe5f17 	ldw	r3,-1668(fp)
   31174:	e0beaf17 	ldw	r2,-1348(fp)
   31178:	1880022e 	bgeu	r3,r2,31184 <secp256k1_scalar_sqr_512+0x1f14>
   3117c:	00c00044 	movi	r3,1
   31180:	00000106 	br	31188 <secp256k1_scalar_sqr_512+0x1f18>
   31184:	0007883a 	mov	r3,zero
   31188:	e0beae17 	ldw	r2,-1352(fp)
   3118c:	10c5883a 	add	r2,r2,r3
   31190:	e0beae15 	stw	r2,-1352(fp)
   31194:	e0fe5f17 	ldw	r3,-1668(fp)
   31198:	e0beaf17 	ldw	r2,-1348(fp)
   3119c:	1885803a 	cmpltu	r2,r3,r2
   311a0:	1007883a 	mov	r3,r2
   311a4:	e0beae17 	ldw	r2,-1352(fp)
   311a8:	1005003a 	cmpeq	r2,r2,zero
   311ac:	1884703a 	and	r2,r3,r2
   311b0:	10c03fcc 	andi	r3,r2,255
   311b4:	e0be6117 	ldw	r2,-1660(fp)
   311b8:	10c5883a 	add	r2,r2,r3
   311bc:	e0be6115 	stw	r2,-1660(fp)
   311c0:	e0fe5f17 	ldw	r3,-1668(fp)
   311c4:	e0beaf17 	ldw	r2,-1348(fp)
   311c8:	1885803a 	cmpltu	r2,r3,r2
   311cc:	10803fcc 	andi	r2,r2,255
   311d0:	10000626 	beq	r2,zero,311ec <secp256k1_scalar_sqr_512+0x1f7c>
   311d4:	e0beae17 	ldw	r2,-1352(fp)
   311d8:	1005003a 	cmpeq	r2,r2,zero
   311dc:	10803fcc 	andi	r2,r2,255
   311e0:	10000226 	beq	r2,zero,311ec <secp256k1_scalar_sqr_512+0x1f7c>
   311e4:	00800044 	movi	r2,1
   311e8:	00000106 	br	311f0 <secp256k1_scalar_sqr_512+0x1f80>
   311ec:	0005883a 	mov	r2,zero
   311f0:	10001126 	beq	r2,zero,31238 <secp256k1_scalar_sqr_512+0x1fc8>
   311f4:	e0be6117 	ldw	r2,-1660(fp)
   311f8:	1005003a 	cmpeq	r2,r2,zero
   311fc:	10803fcc 	andi	r2,r2,255
   31200:	10000d26 	beq	r2,zero,31238 <secp256k1_scalar_sqr_512+0x1fc8>
   31204:	d0a01617 	ldw	r2,-32680(gp)
   31208:	10c00317 	ldw	r3,12(r2)
   3120c:	008001b4 	movhi	r2,6
   31210:	10b08704 	addi	r2,r2,-15844
   31214:	d8800015 	stw	r2,0(sp)
   31218:	01c096c4 	movi	r7,603
   3121c:	018001b4 	movhi	r6,6
   31220:	31af9204 	addi	r6,r6,-16824
   31224:	014001b4 	movhi	r5,6
   31228:	296b3804 	addi	r5,r5,-21280
   3122c:	1809883a 	mov	r4,r3
   31230:	00452600 	call	45260 <fprintf>
   31234:	00450340 	call	45034 <abort>
   31238:	e0fe6017 	ldw	r3,-1664(fp)
   3123c:	e0beae17 	ldw	r2,-1352(fp)
   31240:	1885883a 	add	r2,r3,r2
   31244:	e0be6015 	stw	r2,-1664(fp)
   31248:	e0fe6017 	ldw	r3,-1664(fp)
   3124c:	e0beae17 	ldw	r2,-1352(fp)
   31250:	1880022e 	bgeu	r3,r2,3125c <secp256k1_scalar_sqr_512+0x1fec>
   31254:	00c00044 	movi	r3,1
   31258:	00000106 	br	31260 <secp256k1_scalar_sqr_512+0x1ff0>
   3125c:	0007883a 	mov	r3,zero
   31260:	e0be6117 	ldw	r2,-1660(fp)
   31264:	10c5883a 	add	r2,r2,r3
   31268:	e0be6115 	stw	r2,-1660(fp)
   3126c:	e0fe6017 	ldw	r3,-1664(fp)
   31270:	e0beae17 	ldw	r2,-1352(fp)
   31274:	1885803a 	cmpltu	r2,r3,r2
   31278:	10803fcc 	andi	r2,r2,255
   3127c:	10001126 	beq	r2,zero,312c4 <secp256k1_scalar_sqr_512+0x2054>
   31280:	e0be6117 	ldw	r2,-1660(fp)
   31284:	1005003a 	cmpeq	r2,r2,zero
   31288:	10803fcc 	andi	r2,r2,255
   3128c:	10000d26 	beq	r2,zero,312c4 <secp256k1_scalar_sqr_512+0x2054>
   31290:	d0a01617 	ldw	r2,-32680(gp)
   31294:	10c00317 	ldw	r3,12(r2)
   31298:	008001b4 	movhi	r2,6
   3129c:	10b09704 	addi	r2,r2,-15780
   312a0:	d8800015 	stw	r2,0(sp)
   312a4:	01c096c4 	movi	r7,603
   312a8:	018001b4 	movhi	r6,6
   312ac:	31af9204 	addi	r6,r6,-16824
   312b0:	014001b4 	movhi	r5,6
   312b4:	296b3804 	addi	r5,r5,-21280
   312b8:	1809883a 	mov	r4,r3
   312bc:	00452600 	call	45260 <fprintf>
   312c0:	00450340 	call	45034 <abort>
    muladd2(a->d[2], a->d[4]);
   312c4:	e0bf2b17 	ldw	r2,-852(fp)
   312c8:	10800217 	ldw	r2,8(r2)
   312cc:	e0bf7415 	stw	r2,-560(fp)
   312d0:	e03f7515 	stw	zero,-556(fp)
   312d4:	e0bf2b17 	ldw	r2,-852(fp)
   312d8:	10800417 	ldw	r2,16(r2)
   312dc:	e0bf7615 	stw	r2,-552(fp)
   312e0:	e03f7715 	stw	zero,-548(fp)
   312e4:	e1bf7617 	ldw	r6,-552(fp)
   312e8:	e1ff7717 	ldw	r7,-548(fp)
   312ec:	e13f7417 	ldw	r4,-560(fp)
   312f0:	e17f7517 	ldw	r5,-556(fp)
   312f4:	00429400 	call	42940 <__muldi3>
   312f8:	1009883a 	mov	r4,r2
   312fc:	180b883a 	mov	r5,r3
   31300:	e13eb015 	stw	r4,-1344(fp)
   31304:	e17eb115 	stw	r5,-1340(fp)
   31308:	e0beb117 	ldw	r2,-1340(fp)
   3130c:	1004d83a 	srl	r2,r2,zero
   31310:	e0bf7815 	stw	r2,-544(fp)
   31314:	e03f7915 	stw	zero,-540(fp)
   31318:	e0bf7817 	ldw	r2,-544(fp)
   3131c:	e0beb215 	stw	r2,-1336(fp)
   31320:	e0beb017 	ldw	r2,-1344(fp)
   31324:	e0beb315 	stw	r2,-1332(fp)
   31328:	e0feb217 	ldw	r3,-1336(fp)
   3132c:	e0beb217 	ldw	r2,-1336(fp)
   31330:	1885883a 	add	r2,r3,r2
   31334:	e0beb415 	stw	r2,-1328(fp)
   31338:	e0feb417 	ldw	r3,-1328(fp)
   3133c:	e0beb217 	ldw	r2,-1336(fp)
   31340:	1880022e 	bgeu	r3,r2,3134c <secp256k1_scalar_sqr_512+0x20dc>
   31344:	00c00044 	movi	r3,1
   31348:	00000106 	br	31350 <secp256k1_scalar_sqr_512+0x20e0>
   3134c:	0007883a 	mov	r3,zero
   31350:	e0be6117 	ldw	r2,-1660(fp)
   31354:	10c5883a 	add	r2,r2,r3
   31358:	e0be6115 	stw	r2,-1660(fp)
   3135c:	e0feb417 	ldw	r3,-1328(fp)
   31360:	e0beb217 	ldw	r2,-1336(fp)
   31364:	1885803a 	cmpltu	r2,r3,r2
   31368:	10803fcc 	andi	r2,r2,255
   3136c:	10001126 	beq	r2,zero,313b4 <secp256k1_scalar_sqr_512+0x2144>
   31370:	e0be6117 	ldw	r2,-1660(fp)
   31374:	1005003a 	cmpeq	r2,r2,zero
   31378:	10803fcc 	andi	r2,r2,255
   3137c:	10000d26 	beq	r2,zero,313b4 <secp256k1_scalar_sqr_512+0x2144>
   31380:	d0a01617 	ldw	r2,-32680(gp)
   31384:	10c00317 	ldw	r3,12(r2)
   31388:	008001b4 	movhi	r2,6
   3138c:	10b07b04 	addi	r2,r2,-15892
   31390:	d8800015 	stw	r2,0(sp)
   31394:	01c09704 	movi	r7,604
   31398:	018001b4 	movhi	r6,6
   3139c:	31af9204 	addi	r6,r6,-16824
   313a0:	014001b4 	movhi	r5,6
   313a4:	296b3804 	addi	r5,r5,-21280
   313a8:	1809883a 	mov	r4,r3
   313ac:	00452600 	call	45260 <fprintf>
   313b0:	00450340 	call	45034 <abort>
   313b4:	e0feb317 	ldw	r3,-1332(fp)
   313b8:	e0beb317 	ldw	r2,-1332(fp)
   313bc:	1885883a 	add	r2,r3,r2
   313c0:	e0beb515 	stw	r2,-1324(fp)
   313c4:	e0feb517 	ldw	r3,-1324(fp)
   313c8:	e0beb317 	ldw	r2,-1332(fp)
   313cc:	1880022e 	bgeu	r3,r2,313d8 <secp256k1_scalar_sqr_512+0x2168>
   313d0:	00c00044 	movi	r3,1
   313d4:	00000106 	br	313dc <secp256k1_scalar_sqr_512+0x216c>
   313d8:	0007883a 	mov	r3,zero
   313dc:	e0beb417 	ldw	r2,-1328(fp)
   313e0:	10c5883a 	add	r2,r2,r3
   313e4:	e0beb415 	stw	r2,-1328(fp)
   313e8:	e0fe5f17 	ldw	r3,-1668(fp)
   313ec:	e0beb517 	ldw	r2,-1324(fp)
   313f0:	1885883a 	add	r2,r3,r2
   313f4:	e0be5f15 	stw	r2,-1668(fp)
   313f8:	e0fe5f17 	ldw	r3,-1668(fp)
   313fc:	e0beb517 	ldw	r2,-1324(fp)
   31400:	1880022e 	bgeu	r3,r2,3140c <secp256k1_scalar_sqr_512+0x219c>
   31404:	00c00044 	movi	r3,1
   31408:	00000106 	br	31410 <secp256k1_scalar_sqr_512+0x21a0>
   3140c:	0007883a 	mov	r3,zero
   31410:	e0beb417 	ldw	r2,-1328(fp)
   31414:	10c5883a 	add	r2,r2,r3
   31418:	e0beb415 	stw	r2,-1328(fp)
   3141c:	e0fe5f17 	ldw	r3,-1668(fp)
   31420:	e0beb517 	ldw	r2,-1324(fp)
   31424:	1885803a 	cmpltu	r2,r3,r2
   31428:	1007883a 	mov	r3,r2
   3142c:	e0beb417 	ldw	r2,-1328(fp)
   31430:	1005003a 	cmpeq	r2,r2,zero
   31434:	1884703a 	and	r2,r3,r2
   31438:	10c03fcc 	andi	r3,r2,255
   3143c:	e0be6117 	ldw	r2,-1660(fp)
   31440:	10c5883a 	add	r2,r2,r3
   31444:	e0be6115 	stw	r2,-1660(fp)
   31448:	e0fe5f17 	ldw	r3,-1668(fp)
   3144c:	e0beb517 	ldw	r2,-1324(fp)
   31450:	1885803a 	cmpltu	r2,r3,r2
   31454:	10803fcc 	andi	r2,r2,255
   31458:	10000626 	beq	r2,zero,31474 <secp256k1_scalar_sqr_512+0x2204>
   3145c:	e0beb417 	ldw	r2,-1328(fp)
   31460:	1005003a 	cmpeq	r2,r2,zero
   31464:	10803fcc 	andi	r2,r2,255
   31468:	10000226 	beq	r2,zero,31474 <secp256k1_scalar_sqr_512+0x2204>
   3146c:	00800044 	movi	r2,1
   31470:	00000106 	br	31478 <secp256k1_scalar_sqr_512+0x2208>
   31474:	0005883a 	mov	r2,zero
   31478:	10001126 	beq	r2,zero,314c0 <secp256k1_scalar_sqr_512+0x2250>
   3147c:	e0be6117 	ldw	r2,-1660(fp)
   31480:	1005003a 	cmpeq	r2,r2,zero
   31484:	10803fcc 	andi	r2,r2,255
   31488:	10000d26 	beq	r2,zero,314c0 <secp256k1_scalar_sqr_512+0x2250>
   3148c:	d0a01617 	ldw	r2,-32680(gp)
   31490:	10c00317 	ldw	r3,12(r2)
   31494:	008001b4 	movhi	r2,6
   31498:	10b08704 	addi	r2,r2,-15844
   3149c:	d8800015 	stw	r2,0(sp)
   314a0:	01c09704 	movi	r7,604
   314a4:	018001b4 	movhi	r6,6
   314a8:	31af9204 	addi	r6,r6,-16824
   314ac:	014001b4 	movhi	r5,6
   314b0:	296b3804 	addi	r5,r5,-21280
   314b4:	1809883a 	mov	r4,r3
   314b8:	00452600 	call	45260 <fprintf>
   314bc:	00450340 	call	45034 <abort>
   314c0:	e0fe6017 	ldw	r3,-1664(fp)
   314c4:	e0beb417 	ldw	r2,-1328(fp)
   314c8:	1885883a 	add	r2,r3,r2
   314cc:	e0be6015 	stw	r2,-1664(fp)
   314d0:	e0fe6017 	ldw	r3,-1664(fp)
   314d4:	e0beb417 	ldw	r2,-1328(fp)
   314d8:	1880022e 	bgeu	r3,r2,314e4 <secp256k1_scalar_sqr_512+0x2274>
   314dc:	00c00044 	movi	r3,1
   314e0:	00000106 	br	314e8 <secp256k1_scalar_sqr_512+0x2278>
   314e4:	0007883a 	mov	r3,zero
   314e8:	e0be6117 	ldw	r2,-1660(fp)
   314ec:	10c5883a 	add	r2,r2,r3
   314f0:	e0be6115 	stw	r2,-1660(fp)
   314f4:	e0fe6017 	ldw	r3,-1664(fp)
   314f8:	e0beb417 	ldw	r2,-1328(fp)
   314fc:	1885803a 	cmpltu	r2,r3,r2
   31500:	10803fcc 	andi	r2,r2,255
   31504:	10001126 	beq	r2,zero,3154c <secp256k1_scalar_sqr_512+0x22dc>
   31508:	e0be6117 	ldw	r2,-1660(fp)
   3150c:	1005003a 	cmpeq	r2,r2,zero
   31510:	10803fcc 	andi	r2,r2,255
   31514:	10000d26 	beq	r2,zero,3154c <secp256k1_scalar_sqr_512+0x22dc>
   31518:	d0a01617 	ldw	r2,-32680(gp)
   3151c:	10c00317 	ldw	r3,12(r2)
   31520:	008001b4 	movhi	r2,6
   31524:	10b09704 	addi	r2,r2,-15780
   31528:	d8800015 	stw	r2,0(sp)
   3152c:	01c09704 	movi	r7,604
   31530:	018001b4 	movhi	r6,6
   31534:	31af9204 	addi	r6,r6,-16824
   31538:	014001b4 	movhi	r5,6
   3153c:	296b3804 	addi	r5,r5,-21280
   31540:	1809883a 	mov	r4,r3
   31544:	00452600 	call	45260 <fprintf>
   31548:	00450340 	call	45034 <abort>
    muladd(a->d[3], a->d[3]);
   3154c:	e0bf2b17 	ldw	r2,-852(fp)
   31550:	10800317 	ldw	r2,12(r2)
   31554:	e0bf7a15 	stw	r2,-536(fp)
   31558:	e03f7b15 	stw	zero,-532(fp)
   3155c:	e0bf2b17 	ldw	r2,-852(fp)
   31560:	10800317 	ldw	r2,12(r2)
   31564:	e0bf7c15 	stw	r2,-528(fp)
   31568:	e03f7d15 	stw	zero,-524(fp)
   3156c:	e1bf7c17 	ldw	r6,-528(fp)
   31570:	e1ff7d17 	ldw	r7,-524(fp)
   31574:	e13f7a17 	ldw	r4,-536(fp)
   31578:	e17f7b17 	ldw	r5,-532(fp)
   3157c:	00429400 	call	42940 <__muldi3>
   31580:	1009883a 	mov	r4,r2
   31584:	180b883a 	mov	r5,r3
   31588:	e13eb615 	stw	r4,-1320(fp)
   3158c:	e17eb715 	stw	r5,-1316(fp)
   31590:	e0beb717 	ldw	r2,-1316(fp)
   31594:	1004d83a 	srl	r2,r2,zero
   31598:	e0bf7e15 	stw	r2,-520(fp)
   3159c:	e03f7f15 	stw	zero,-516(fp)
   315a0:	e0bf7e17 	ldw	r2,-520(fp)
   315a4:	e0beb815 	stw	r2,-1312(fp)
   315a8:	e0beb617 	ldw	r2,-1320(fp)
   315ac:	e0beb915 	stw	r2,-1308(fp)
   315b0:	e0fe5f17 	ldw	r3,-1668(fp)
   315b4:	e0beb917 	ldw	r2,-1308(fp)
   315b8:	1885883a 	add	r2,r3,r2
   315bc:	e0be5f15 	stw	r2,-1668(fp)
   315c0:	e0fe5f17 	ldw	r3,-1668(fp)
   315c4:	e0beb917 	ldw	r2,-1308(fp)
   315c8:	1880022e 	bgeu	r3,r2,315d4 <secp256k1_scalar_sqr_512+0x2364>
   315cc:	00c00044 	movi	r3,1
   315d0:	00000106 	br	315d8 <secp256k1_scalar_sqr_512+0x2368>
   315d4:	0007883a 	mov	r3,zero
   315d8:	e0beb817 	ldw	r2,-1312(fp)
   315dc:	10c5883a 	add	r2,r2,r3
   315e0:	e0beb815 	stw	r2,-1312(fp)
   315e4:	e0fe6017 	ldw	r3,-1664(fp)
   315e8:	e0beb817 	ldw	r2,-1312(fp)
   315ec:	1885883a 	add	r2,r3,r2
   315f0:	e0be6015 	stw	r2,-1664(fp)
   315f4:	e0fe6017 	ldw	r3,-1664(fp)
   315f8:	e0beb817 	ldw	r2,-1312(fp)
   315fc:	1880022e 	bgeu	r3,r2,31608 <secp256k1_scalar_sqr_512+0x2398>
   31600:	00c00044 	movi	r3,1
   31604:	00000106 	br	3160c <secp256k1_scalar_sqr_512+0x239c>
   31608:	0007883a 	mov	r3,zero
   3160c:	e0be6117 	ldw	r2,-1660(fp)
   31610:	10c5883a 	add	r2,r2,r3
   31614:	e0be6115 	stw	r2,-1660(fp)
   31618:	e0fe6017 	ldw	r3,-1664(fp)
   3161c:	e0beb817 	ldw	r2,-1312(fp)
   31620:	1885803a 	cmpltu	r2,r3,r2
   31624:	10803fcc 	andi	r2,r2,255
   31628:	10001126 	beq	r2,zero,31670 <secp256k1_scalar_sqr_512+0x2400>
   3162c:	e0be6117 	ldw	r2,-1660(fp)
   31630:	1005003a 	cmpeq	r2,r2,zero
   31634:	10803fcc 	andi	r2,r2,255
   31638:	10000d26 	beq	r2,zero,31670 <secp256k1_scalar_sqr_512+0x2400>
   3163c:	d0a01617 	ldw	r2,-32680(gp)
   31640:	10c00317 	ldw	r3,12(r2)
   31644:	008001b4 	movhi	r2,6
   31648:	10b02604 	addi	r2,r2,-16232
   3164c:	d8800015 	stw	r2,0(sp)
   31650:	01c09744 	movi	r7,605
   31654:	018001b4 	movhi	r6,6
   31658:	31af9204 	addi	r6,r6,-16824
   3165c:	014001b4 	movhi	r5,6
   31660:	296b3804 	addi	r5,r5,-21280
   31664:	1809883a 	mov	r4,r3
   31668:	00452600 	call	45260 <fprintf>
   3166c:	00450340 	call	45034 <abort>
    extract(l[6]);
   31670:	e0bf2a17 	ldw	r2,-856(fp)
   31674:	10c00604 	addi	r3,r2,24
   31678:	e0be5f17 	ldw	r2,-1668(fp)
   3167c:	18800015 	stw	r2,0(r3)
   31680:	e0be6017 	ldw	r2,-1664(fp)
   31684:	e0be5f15 	stw	r2,-1668(fp)
   31688:	e0be6117 	ldw	r2,-1660(fp)
   3168c:	e0be6015 	stw	r2,-1664(fp)
   31690:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[7]);
   31694:	e0bf2b17 	ldw	r2,-852(fp)
   31698:	10800017 	ldw	r2,0(r2)
   3169c:	e0bf8015 	stw	r2,-512(fp)
   316a0:	e03f8115 	stw	zero,-508(fp)
   316a4:	e0bf2b17 	ldw	r2,-852(fp)
   316a8:	10800717 	ldw	r2,28(r2)
   316ac:	e0bf8215 	stw	r2,-504(fp)
   316b0:	e03f8315 	stw	zero,-500(fp)
   316b4:	e1bf8217 	ldw	r6,-504(fp)
   316b8:	e1ff8317 	ldw	r7,-500(fp)
   316bc:	e13f8017 	ldw	r4,-512(fp)
   316c0:	e17f8117 	ldw	r5,-508(fp)
   316c4:	00429400 	call	42940 <__muldi3>
   316c8:	1009883a 	mov	r4,r2
   316cc:	180b883a 	mov	r5,r3
   316d0:	e13eba15 	stw	r4,-1304(fp)
   316d4:	e17ebb15 	stw	r5,-1300(fp)
   316d8:	e0bebb17 	ldw	r2,-1300(fp)
   316dc:	1004d83a 	srl	r2,r2,zero
   316e0:	e0bf8415 	stw	r2,-496(fp)
   316e4:	e03f8515 	stw	zero,-492(fp)
   316e8:	e0bf8417 	ldw	r2,-496(fp)
   316ec:	e0bebc15 	stw	r2,-1296(fp)
   316f0:	e0beba17 	ldw	r2,-1304(fp)
   316f4:	e0bebd15 	stw	r2,-1292(fp)
   316f8:	e0febc17 	ldw	r3,-1296(fp)
   316fc:	e0bebc17 	ldw	r2,-1296(fp)
   31700:	1885883a 	add	r2,r3,r2
   31704:	e0bebe15 	stw	r2,-1288(fp)
   31708:	e0febe17 	ldw	r3,-1288(fp)
   3170c:	e0bebc17 	ldw	r2,-1296(fp)
   31710:	1880022e 	bgeu	r3,r2,3171c <secp256k1_scalar_sqr_512+0x24ac>
   31714:	00c00044 	movi	r3,1
   31718:	00000106 	br	31720 <secp256k1_scalar_sqr_512+0x24b0>
   3171c:	0007883a 	mov	r3,zero
   31720:	e0be6117 	ldw	r2,-1660(fp)
   31724:	10c5883a 	add	r2,r2,r3
   31728:	e0be6115 	stw	r2,-1660(fp)
   3172c:	e0febe17 	ldw	r3,-1288(fp)
   31730:	e0bebc17 	ldw	r2,-1296(fp)
   31734:	1885803a 	cmpltu	r2,r3,r2
   31738:	10803fcc 	andi	r2,r2,255
   3173c:	10001126 	beq	r2,zero,31784 <secp256k1_scalar_sqr_512+0x2514>
   31740:	e0be6117 	ldw	r2,-1660(fp)
   31744:	1005003a 	cmpeq	r2,r2,zero
   31748:	10803fcc 	andi	r2,r2,255
   3174c:	10000d26 	beq	r2,zero,31784 <secp256k1_scalar_sqr_512+0x2514>
   31750:	d0a01617 	ldw	r2,-32680(gp)
   31754:	10c00317 	ldw	r3,12(r2)
   31758:	008001b4 	movhi	r2,6
   3175c:	10b07b04 	addi	r2,r2,-15892
   31760:	d8800015 	stw	r2,0(sp)
   31764:	01c097c4 	movi	r7,607
   31768:	018001b4 	movhi	r6,6
   3176c:	31af9204 	addi	r6,r6,-16824
   31770:	014001b4 	movhi	r5,6
   31774:	296b3804 	addi	r5,r5,-21280
   31778:	1809883a 	mov	r4,r3
   3177c:	00452600 	call	45260 <fprintf>
   31780:	00450340 	call	45034 <abort>
   31784:	e0febd17 	ldw	r3,-1292(fp)
   31788:	e0bebd17 	ldw	r2,-1292(fp)
   3178c:	1885883a 	add	r2,r3,r2
   31790:	e0bebf15 	stw	r2,-1284(fp)
   31794:	e0febf17 	ldw	r3,-1284(fp)
   31798:	e0bebd17 	ldw	r2,-1292(fp)
   3179c:	1880022e 	bgeu	r3,r2,317a8 <secp256k1_scalar_sqr_512+0x2538>
   317a0:	00c00044 	movi	r3,1
   317a4:	00000106 	br	317ac <secp256k1_scalar_sqr_512+0x253c>
   317a8:	0007883a 	mov	r3,zero
   317ac:	e0bebe17 	ldw	r2,-1288(fp)
   317b0:	10c5883a 	add	r2,r2,r3
   317b4:	e0bebe15 	stw	r2,-1288(fp)
   317b8:	e0fe5f17 	ldw	r3,-1668(fp)
   317bc:	e0bebf17 	ldw	r2,-1284(fp)
   317c0:	1885883a 	add	r2,r3,r2
   317c4:	e0be5f15 	stw	r2,-1668(fp)
   317c8:	e0fe5f17 	ldw	r3,-1668(fp)
   317cc:	e0bebf17 	ldw	r2,-1284(fp)
   317d0:	1880022e 	bgeu	r3,r2,317dc <secp256k1_scalar_sqr_512+0x256c>
   317d4:	00c00044 	movi	r3,1
   317d8:	00000106 	br	317e0 <secp256k1_scalar_sqr_512+0x2570>
   317dc:	0007883a 	mov	r3,zero
   317e0:	e0bebe17 	ldw	r2,-1288(fp)
   317e4:	10c5883a 	add	r2,r2,r3
   317e8:	e0bebe15 	stw	r2,-1288(fp)
   317ec:	e0fe5f17 	ldw	r3,-1668(fp)
   317f0:	e0bebf17 	ldw	r2,-1284(fp)
   317f4:	1885803a 	cmpltu	r2,r3,r2
   317f8:	1007883a 	mov	r3,r2
   317fc:	e0bebe17 	ldw	r2,-1288(fp)
   31800:	1005003a 	cmpeq	r2,r2,zero
   31804:	1884703a 	and	r2,r3,r2
   31808:	10c03fcc 	andi	r3,r2,255
   3180c:	e0be6117 	ldw	r2,-1660(fp)
   31810:	10c5883a 	add	r2,r2,r3
   31814:	e0be6115 	stw	r2,-1660(fp)
   31818:	e0fe5f17 	ldw	r3,-1668(fp)
   3181c:	e0bebf17 	ldw	r2,-1284(fp)
   31820:	1885803a 	cmpltu	r2,r3,r2
   31824:	10803fcc 	andi	r2,r2,255
   31828:	10000626 	beq	r2,zero,31844 <secp256k1_scalar_sqr_512+0x25d4>
   3182c:	e0bebe17 	ldw	r2,-1288(fp)
   31830:	1005003a 	cmpeq	r2,r2,zero
   31834:	10803fcc 	andi	r2,r2,255
   31838:	10000226 	beq	r2,zero,31844 <secp256k1_scalar_sqr_512+0x25d4>
   3183c:	00800044 	movi	r2,1
   31840:	00000106 	br	31848 <secp256k1_scalar_sqr_512+0x25d8>
   31844:	0005883a 	mov	r2,zero
   31848:	10001126 	beq	r2,zero,31890 <secp256k1_scalar_sqr_512+0x2620>
   3184c:	e0be6117 	ldw	r2,-1660(fp)
   31850:	1005003a 	cmpeq	r2,r2,zero
   31854:	10803fcc 	andi	r2,r2,255
   31858:	10000d26 	beq	r2,zero,31890 <secp256k1_scalar_sqr_512+0x2620>
   3185c:	d0a01617 	ldw	r2,-32680(gp)
   31860:	10c00317 	ldw	r3,12(r2)
   31864:	008001b4 	movhi	r2,6
   31868:	10b08704 	addi	r2,r2,-15844
   3186c:	d8800015 	stw	r2,0(sp)
   31870:	01c097c4 	movi	r7,607
   31874:	018001b4 	movhi	r6,6
   31878:	31af9204 	addi	r6,r6,-16824
   3187c:	014001b4 	movhi	r5,6
   31880:	296b3804 	addi	r5,r5,-21280
   31884:	1809883a 	mov	r4,r3
   31888:	00452600 	call	45260 <fprintf>
   3188c:	00450340 	call	45034 <abort>
   31890:	e0fe6017 	ldw	r3,-1664(fp)
   31894:	e0bebe17 	ldw	r2,-1288(fp)
   31898:	1885883a 	add	r2,r3,r2
   3189c:	e0be6015 	stw	r2,-1664(fp)
   318a0:	e0fe6017 	ldw	r3,-1664(fp)
   318a4:	e0bebe17 	ldw	r2,-1288(fp)
   318a8:	1880022e 	bgeu	r3,r2,318b4 <secp256k1_scalar_sqr_512+0x2644>
   318ac:	00c00044 	movi	r3,1
   318b0:	00000106 	br	318b8 <secp256k1_scalar_sqr_512+0x2648>
   318b4:	0007883a 	mov	r3,zero
   318b8:	e0be6117 	ldw	r2,-1660(fp)
   318bc:	10c5883a 	add	r2,r2,r3
   318c0:	e0be6115 	stw	r2,-1660(fp)
   318c4:	e0fe6017 	ldw	r3,-1664(fp)
   318c8:	e0bebe17 	ldw	r2,-1288(fp)
   318cc:	1885803a 	cmpltu	r2,r3,r2
   318d0:	10803fcc 	andi	r2,r2,255
   318d4:	10001126 	beq	r2,zero,3191c <secp256k1_scalar_sqr_512+0x26ac>
   318d8:	e0be6117 	ldw	r2,-1660(fp)
   318dc:	1005003a 	cmpeq	r2,r2,zero
   318e0:	10803fcc 	andi	r2,r2,255
   318e4:	10000d26 	beq	r2,zero,3191c <secp256k1_scalar_sqr_512+0x26ac>
   318e8:	d0a01617 	ldw	r2,-32680(gp)
   318ec:	10c00317 	ldw	r3,12(r2)
   318f0:	008001b4 	movhi	r2,6
   318f4:	10b09704 	addi	r2,r2,-15780
   318f8:	d8800015 	stw	r2,0(sp)
   318fc:	01c097c4 	movi	r7,607
   31900:	018001b4 	movhi	r6,6
   31904:	31af9204 	addi	r6,r6,-16824
   31908:	014001b4 	movhi	r5,6
   3190c:	296b3804 	addi	r5,r5,-21280
   31910:	1809883a 	mov	r4,r3
   31914:	00452600 	call	45260 <fprintf>
   31918:	00450340 	call	45034 <abort>
    muladd2(a->d[1], a->d[6]);
   3191c:	e0bf2b17 	ldw	r2,-852(fp)
   31920:	10800117 	ldw	r2,4(r2)
   31924:	e0bf8615 	stw	r2,-488(fp)
   31928:	e03f8715 	stw	zero,-484(fp)
   3192c:	e0bf2b17 	ldw	r2,-852(fp)
   31930:	10800617 	ldw	r2,24(r2)
   31934:	e0bf8815 	stw	r2,-480(fp)
   31938:	e03f8915 	stw	zero,-476(fp)
   3193c:	e1bf8817 	ldw	r6,-480(fp)
   31940:	e1ff8917 	ldw	r7,-476(fp)
   31944:	e13f8617 	ldw	r4,-488(fp)
   31948:	e17f8717 	ldw	r5,-484(fp)
   3194c:	00429400 	call	42940 <__muldi3>
   31950:	1009883a 	mov	r4,r2
   31954:	180b883a 	mov	r5,r3
   31958:	e13ec015 	stw	r4,-1280(fp)
   3195c:	e17ec115 	stw	r5,-1276(fp)
   31960:	e0bec117 	ldw	r2,-1276(fp)
   31964:	1004d83a 	srl	r2,r2,zero
   31968:	e0bf8a15 	stw	r2,-472(fp)
   3196c:	e03f8b15 	stw	zero,-468(fp)
   31970:	e0bf8a17 	ldw	r2,-472(fp)
   31974:	e0bec215 	stw	r2,-1272(fp)
   31978:	e0bec017 	ldw	r2,-1280(fp)
   3197c:	e0bec315 	stw	r2,-1268(fp)
   31980:	e0fec217 	ldw	r3,-1272(fp)
   31984:	e0bec217 	ldw	r2,-1272(fp)
   31988:	1885883a 	add	r2,r3,r2
   3198c:	e0bec415 	stw	r2,-1264(fp)
   31990:	e0fec417 	ldw	r3,-1264(fp)
   31994:	e0bec217 	ldw	r2,-1272(fp)
   31998:	1880022e 	bgeu	r3,r2,319a4 <secp256k1_scalar_sqr_512+0x2734>
   3199c:	00c00044 	movi	r3,1
   319a0:	00000106 	br	319a8 <secp256k1_scalar_sqr_512+0x2738>
   319a4:	0007883a 	mov	r3,zero
   319a8:	e0be6117 	ldw	r2,-1660(fp)
   319ac:	10c5883a 	add	r2,r2,r3
   319b0:	e0be6115 	stw	r2,-1660(fp)
   319b4:	e0fec417 	ldw	r3,-1264(fp)
   319b8:	e0bec217 	ldw	r2,-1272(fp)
   319bc:	1885803a 	cmpltu	r2,r3,r2
   319c0:	10803fcc 	andi	r2,r2,255
   319c4:	10001126 	beq	r2,zero,31a0c <secp256k1_scalar_sqr_512+0x279c>
   319c8:	e0be6117 	ldw	r2,-1660(fp)
   319cc:	1005003a 	cmpeq	r2,r2,zero
   319d0:	10803fcc 	andi	r2,r2,255
   319d4:	10000d26 	beq	r2,zero,31a0c <secp256k1_scalar_sqr_512+0x279c>
   319d8:	d0a01617 	ldw	r2,-32680(gp)
   319dc:	10c00317 	ldw	r3,12(r2)
   319e0:	008001b4 	movhi	r2,6
   319e4:	10b07b04 	addi	r2,r2,-15892
   319e8:	d8800015 	stw	r2,0(sp)
   319ec:	01c09804 	movi	r7,608
   319f0:	018001b4 	movhi	r6,6
   319f4:	31af9204 	addi	r6,r6,-16824
   319f8:	014001b4 	movhi	r5,6
   319fc:	296b3804 	addi	r5,r5,-21280
   31a00:	1809883a 	mov	r4,r3
   31a04:	00452600 	call	45260 <fprintf>
   31a08:	00450340 	call	45034 <abort>
   31a0c:	e0fec317 	ldw	r3,-1268(fp)
   31a10:	e0bec317 	ldw	r2,-1268(fp)
   31a14:	1885883a 	add	r2,r3,r2
   31a18:	e0bec515 	stw	r2,-1260(fp)
   31a1c:	e0fec517 	ldw	r3,-1260(fp)
   31a20:	e0bec317 	ldw	r2,-1268(fp)
   31a24:	1880022e 	bgeu	r3,r2,31a30 <secp256k1_scalar_sqr_512+0x27c0>
   31a28:	00c00044 	movi	r3,1
   31a2c:	00000106 	br	31a34 <secp256k1_scalar_sqr_512+0x27c4>
   31a30:	0007883a 	mov	r3,zero
   31a34:	e0bec417 	ldw	r2,-1264(fp)
   31a38:	10c5883a 	add	r2,r2,r3
   31a3c:	e0bec415 	stw	r2,-1264(fp)
   31a40:	e0fe5f17 	ldw	r3,-1668(fp)
   31a44:	e0bec517 	ldw	r2,-1260(fp)
   31a48:	1885883a 	add	r2,r3,r2
   31a4c:	e0be5f15 	stw	r2,-1668(fp)
   31a50:	e0fe5f17 	ldw	r3,-1668(fp)
   31a54:	e0bec517 	ldw	r2,-1260(fp)
   31a58:	1880022e 	bgeu	r3,r2,31a64 <secp256k1_scalar_sqr_512+0x27f4>
   31a5c:	00c00044 	movi	r3,1
   31a60:	00000106 	br	31a68 <secp256k1_scalar_sqr_512+0x27f8>
   31a64:	0007883a 	mov	r3,zero
   31a68:	e0bec417 	ldw	r2,-1264(fp)
   31a6c:	10c5883a 	add	r2,r2,r3
   31a70:	e0bec415 	stw	r2,-1264(fp)
   31a74:	e0fe5f17 	ldw	r3,-1668(fp)
   31a78:	e0bec517 	ldw	r2,-1260(fp)
   31a7c:	1885803a 	cmpltu	r2,r3,r2
   31a80:	1007883a 	mov	r3,r2
   31a84:	e0bec417 	ldw	r2,-1264(fp)
   31a88:	1005003a 	cmpeq	r2,r2,zero
   31a8c:	1884703a 	and	r2,r3,r2
   31a90:	10c03fcc 	andi	r3,r2,255
   31a94:	e0be6117 	ldw	r2,-1660(fp)
   31a98:	10c5883a 	add	r2,r2,r3
   31a9c:	e0be6115 	stw	r2,-1660(fp)
   31aa0:	e0fe5f17 	ldw	r3,-1668(fp)
   31aa4:	e0bec517 	ldw	r2,-1260(fp)
   31aa8:	1885803a 	cmpltu	r2,r3,r2
   31aac:	10803fcc 	andi	r2,r2,255
   31ab0:	10000626 	beq	r2,zero,31acc <secp256k1_scalar_sqr_512+0x285c>
   31ab4:	e0bec417 	ldw	r2,-1264(fp)
   31ab8:	1005003a 	cmpeq	r2,r2,zero
   31abc:	10803fcc 	andi	r2,r2,255
   31ac0:	10000226 	beq	r2,zero,31acc <secp256k1_scalar_sqr_512+0x285c>
   31ac4:	00800044 	movi	r2,1
   31ac8:	00000106 	br	31ad0 <secp256k1_scalar_sqr_512+0x2860>
   31acc:	0005883a 	mov	r2,zero
   31ad0:	10001126 	beq	r2,zero,31b18 <secp256k1_scalar_sqr_512+0x28a8>
   31ad4:	e0be6117 	ldw	r2,-1660(fp)
   31ad8:	1005003a 	cmpeq	r2,r2,zero
   31adc:	10803fcc 	andi	r2,r2,255
   31ae0:	10000d26 	beq	r2,zero,31b18 <secp256k1_scalar_sqr_512+0x28a8>
   31ae4:	d0a01617 	ldw	r2,-32680(gp)
   31ae8:	10c00317 	ldw	r3,12(r2)
   31aec:	008001b4 	movhi	r2,6
   31af0:	10b08704 	addi	r2,r2,-15844
   31af4:	d8800015 	stw	r2,0(sp)
   31af8:	01c09804 	movi	r7,608
   31afc:	018001b4 	movhi	r6,6
   31b00:	31af9204 	addi	r6,r6,-16824
   31b04:	014001b4 	movhi	r5,6
   31b08:	296b3804 	addi	r5,r5,-21280
   31b0c:	1809883a 	mov	r4,r3
   31b10:	00452600 	call	45260 <fprintf>
   31b14:	00450340 	call	45034 <abort>
   31b18:	e0fe6017 	ldw	r3,-1664(fp)
   31b1c:	e0bec417 	ldw	r2,-1264(fp)
   31b20:	1885883a 	add	r2,r3,r2
   31b24:	e0be6015 	stw	r2,-1664(fp)
   31b28:	e0fe6017 	ldw	r3,-1664(fp)
   31b2c:	e0bec417 	ldw	r2,-1264(fp)
   31b30:	1880022e 	bgeu	r3,r2,31b3c <secp256k1_scalar_sqr_512+0x28cc>
   31b34:	00c00044 	movi	r3,1
   31b38:	00000106 	br	31b40 <secp256k1_scalar_sqr_512+0x28d0>
   31b3c:	0007883a 	mov	r3,zero
   31b40:	e0be6117 	ldw	r2,-1660(fp)
   31b44:	10c5883a 	add	r2,r2,r3
   31b48:	e0be6115 	stw	r2,-1660(fp)
   31b4c:	e0fe6017 	ldw	r3,-1664(fp)
   31b50:	e0bec417 	ldw	r2,-1264(fp)
   31b54:	1885803a 	cmpltu	r2,r3,r2
   31b58:	10803fcc 	andi	r2,r2,255
   31b5c:	10001126 	beq	r2,zero,31ba4 <secp256k1_scalar_sqr_512+0x2934>
   31b60:	e0be6117 	ldw	r2,-1660(fp)
   31b64:	1005003a 	cmpeq	r2,r2,zero
   31b68:	10803fcc 	andi	r2,r2,255
   31b6c:	10000d26 	beq	r2,zero,31ba4 <secp256k1_scalar_sqr_512+0x2934>
   31b70:	d0a01617 	ldw	r2,-32680(gp)
   31b74:	10c00317 	ldw	r3,12(r2)
   31b78:	008001b4 	movhi	r2,6
   31b7c:	10b09704 	addi	r2,r2,-15780
   31b80:	d8800015 	stw	r2,0(sp)
   31b84:	01c09804 	movi	r7,608
   31b88:	018001b4 	movhi	r6,6
   31b8c:	31af9204 	addi	r6,r6,-16824
   31b90:	014001b4 	movhi	r5,6
   31b94:	296b3804 	addi	r5,r5,-21280
   31b98:	1809883a 	mov	r4,r3
   31b9c:	00452600 	call	45260 <fprintf>
   31ba0:	00450340 	call	45034 <abort>
    muladd2(a->d[2], a->d[5]);
   31ba4:	e0bf2b17 	ldw	r2,-852(fp)
   31ba8:	10800217 	ldw	r2,8(r2)
   31bac:	e0bf8c15 	stw	r2,-464(fp)
   31bb0:	e03f8d15 	stw	zero,-460(fp)
   31bb4:	e0bf2b17 	ldw	r2,-852(fp)
   31bb8:	10800517 	ldw	r2,20(r2)
   31bbc:	e0bf8e15 	stw	r2,-456(fp)
   31bc0:	e03f8f15 	stw	zero,-452(fp)
   31bc4:	e1bf8e17 	ldw	r6,-456(fp)
   31bc8:	e1ff8f17 	ldw	r7,-452(fp)
   31bcc:	e13f8c17 	ldw	r4,-464(fp)
   31bd0:	e17f8d17 	ldw	r5,-460(fp)
   31bd4:	00429400 	call	42940 <__muldi3>
   31bd8:	1009883a 	mov	r4,r2
   31bdc:	180b883a 	mov	r5,r3
   31be0:	e13ec615 	stw	r4,-1256(fp)
   31be4:	e17ec715 	stw	r5,-1252(fp)
   31be8:	e0bec717 	ldw	r2,-1252(fp)
   31bec:	1004d83a 	srl	r2,r2,zero
   31bf0:	e0bf9015 	stw	r2,-448(fp)
   31bf4:	e03f9115 	stw	zero,-444(fp)
   31bf8:	e0bf9017 	ldw	r2,-448(fp)
   31bfc:	e0bec815 	stw	r2,-1248(fp)
   31c00:	e0bec617 	ldw	r2,-1256(fp)
   31c04:	e0bec915 	stw	r2,-1244(fp)
   31c08:	e0fec817 	ldw	r3,-1248(fp)
   31c0c:	e0bec817 	ldw	r2,-1248(fp)
   31c10:	1885883a 	add	r2,r3,r2
   31c14:	e0beca15 	stw	r2,-1240(fp)
   31c18:	e0feca17 	ldw	r3,-1240(fp)
   31c1c:	e0bec817 	ldw	r2,-1248(fp)
   31c20:	1880022e 	bgeu	r3,r2,31c2c <secp256k1_scalar_sqr_512+0x29bc>
   31c24:	00c00044 	movi	r3,1
   31c28:	00000106 	br	31c30 <secp256k1_scalar_sqr_512+0x29c0>
   31c2c:	0007883a 	mov	r3,zero
   31c30:	e0be6117 	ldw	r2,-1660(fp)
   31c34:	10c5883a 	add	r2,r2,r3
   31c38:	e0be6115 	stw	r2,-1660(fp)
   31c3c:	e0feca17 	ldw	r3,-1240(fp)
   31c40:	e0bec817 	ldw	r2,-1248(fp)
   31c44:	1885803a 	cmpltu	r2,r3,r2
   31c48:	10803fcc 	andi	r2,r2,255
   31c4c:	10001126 	beq	r2,zero,31c94 <secp256k1_scalar_sqr_512+0x2a24>
   31c50:	e0be6117 	ldw	r2,-1660(fp)
   31c54:	1005003a 	cmpeq	r2,r2,zero
   31c58:	10803fcc 	andi	r2,r2,255
   31c5c:	10000d26 	beq	r2,zero,31c94 <secp256k1_scalar_sqr_512+0x2a24>
   31c60:	d0a01617 	ldw	r2,-32680(gp)
   31c64:	10c00317 	ldw	r3,12(r2)
   31c68:	008001b4 	movhi	r2,6
   31c6c:	10b07b04 	addi	r2,r2,-15892
   31c70:	d8800015 	stw	r2,0(sp)
   31c74:	01c09844 	movi	r7,609
   31c78:	018001b4 	movhi	r6,6
   31c7c:	31af9204 	addi	r6,r6,-16824
   31c80:	014001b4 	movhi	r5,6
   31c84:	296b3804 	addi	r5,r5,-21280
   31c88:	1809883a 	mov	r4,r3
   31c8c:	00452600 	call	45260 <fprintf>
   31c90:	00450340 	call	45034 <abort>
   31c94:	e0fec917 	ldw	r3,-1244(fp)
   31c98:	e0bec917 	ldw	r2,-1244(fp)
   31c9c:	1885883a 	add	r2,r3,r2
   31ca0:	e0becb15 	stw	r2,-1236(fp)
   31ca4:	e0fecb17 	ldw	r3,-1236(fp)
   31ca8:	e0bec917 	ldw	r2,-1244(fp)
   31cac:	1880022e 	bgeu	r3,r2,31cb8 <secp256k1_scalar_sqr_512+0x2a48>
   31cb0:	00c00044 	movi	r3,1
   31cb4:	00000106 	br	31cbc <secp256k1_scalar_sqr_512+0x2a4c>
   31cb8:	0007883a 	mov	r3,zero
   31cbc:	e0beca17 	ldw	r2,-1240(fp)
   31cc0:	10c5883a 	add	r2,r2,r3
   31cc4:	e0beca15 	stw	r2,-1240(fp)
   31cc8:	e0fe5f17 	ldw	r3,-1668(fp)
   31ccc:	e0becb17 	ldw	r2,-1236(fp)
   31cd0:	1885883a 	add	r2,r3,r2
   31cd4:	e0be5f15 	stw	r2,-1668(fp)
   31cd8:	e0fe5f17 	ldw	r3,-1668(fp)
   31cdc:	e0becb17 	ldw	r2,-1236(fp)
   31ce0:	1880022e 	bgeu	r3,r2,31cec <secp256k1_scalar_sqr_512+0x2a7c>
   31ce4:	00c00044 	movi	r3,1
   31ce8:	00000106 	br	31cf0 <secp256k1_scalar_sqr_512+0x2a80>
   31cec:	0007883a 	mov	r3,zero
   31cf0:	e0beca17 	ldw	r2,-1240(fp)
   31cf4:	10c5883a 	add	r2,r2,r3
   31cf8:	e0beca15 	stw	r2,-1240(fp)
   31cfc:	e0fe5f17 	ldw	r3,-1668(fp)
   31d00:	e0becb17 	ldw	r2,-1236(fp)
   31d04:	1885803a 	cmpltu	r2,r3,r2
   31d08:	1007883a 	mov	r3,r2
   31d0c:	e0beca17 	ldw	r2,-1240(fp)
   31d10:	1005003a 	cmpeq	r2,r2,zero
   31d14:	1884703a 	and	r2,r3,r2
   31d18:	10c03fcc 	andi	r3,r2,255
   31d1c:	e0be6117 	ldw	r2,-1660(fp)
   31d20:	10c5883a 	add	r2,r2,r3
   31d24:	e0be6115 	stw	r2,-1660(fp)
   31d28:	e0fe5f17 	ldw	r3,-1668(fp)
   31d2c:	e0becb17 	ldw	r2,-1236(fp)
   31d30:	1885803a 	cmpltu	r2,r3,r2
   31d34:	10803fcc 	andi	r2,r2,255
   31d38:	10000626 	beq	r2,zero,31d54 <secp256k1_scalar_sqr_512+0x2ae4>
   31d3c:	e0beca17 	ldw	r2,-1240(fp)
   31d40:	1005003a 	cmpeq	r2,r2,zero
   31d44:	10803fcc 	andi	r2,r2,255
   31d48:	10000226 	beq	r2,zero,31d54 <secp256k1_scalar_sqr_512+0x2ae4>
   31d4c:	00800044 	movi	r2,1
   31d50:	00000106 	br	31d58 <secp256k1_scalar_sqr_512+0x2ae8>
   31d54:	0005883a 	mov	r2,zero
   31d58:	10001126 	beq	r2,zero,31da0 <secp256k1_scalar_sqr_512+0x2b30>
   31d5c:	e0be6117 	ldw	r2,-1660(fp)
   31d60:	1005003a 	cmpeq	r2,r2,zero
   31d64:	10803fcc 	andi	r2,r2,255
   31d68:	10000d26 	beq	r2,zero,31da0 <secp256k1_scalar_sqr_512+0x2b30>
   31d6c:	d0a01617 	ldw	r2,-32680(gp)
   31d70:	10c00317 	ldw	r3,12(r2)
   31d74:	008001b4 	movhi	r2,6
   31d78:	10b08704 	addi	r2,r2,-15844
   31d7c:	d8800015 	stw	r2,0(sp)
   31d80:	01c09844 	movi	r7,609
   31d84:	018001b4 	movhi	r6,6
   31d88:	31af9204 	addi	r6,r6,-16824
   31d8c:	014001b4 	movhi	r5,6
   31d90:	296b3804 	addi	r5,r5,-21280
   31d94:	1809883a 	mov	r4,r3
   31d98:	00452600 	call	45260 <fprintf>
   31d9c:	00450340 	call	45034 <abort>
   31da0:	e0fe6017 	ldw	r3,-1664(fp)
   31da4:	e0beca17 	ldw	r2,-1240(fp)
   31da8:	1885883a 	add	r2,r3,r2
   31dac:	e0be6015 	stw	r2,-1664(fp)
   31db0:	e0fe6017 	ldw	r3,-1664(fp)
   31db4:	e0beca17 	ldw	r2,-1240(fp)
   31db8:	1880022e 	bgeu	r3,r2,31dc4 <secp256k1_scalar_sqr_512+0x2b54>
   31dbc:	00c00044 	movi	r3,1
   31dc0:	00000106 	br	31dc8 <secp256k1_scalar_sqr_512+0x2b58>
   31dc4:	0007883a 	mov	r3,zero
   31dc8:	e0be6117 	ldw	r2,-1660(fp)
   31dcc:	10c5883a 	add	r2,r2,r3
   31dd0:	e0be6115 	stw	r2,-1660(fp)
   31dd4:	e0fe6017 	ldw	r3,-1664(fp)
   31dd8:	e0beca17 	ldw	r2,-1240(fp)
   31ddc:	1885803a 	cmpltu	r2,r3,r2
   31de0:	10803fcc 	andi	r2,r2,255
   31de4:	10001126 	beq	r2,zero,31e2c <secp256k1_scalar_sqr_512+0x2bbc>
   31de8:	e0be6117 	ldw	r2,-1660(fp)
   31dec:	1005003a 	cmpeq	r2,r2,zero
   31df0:	10803fcc 	andi	r2,r2,255
   31df4:	10000d26 	beq	r2,zero,31e2c <secp256k1_scalar_sqr_512+0x2bbc>
   31df8:	d0a01617 	ldw	r2,-32680(gp)
   31dfc:	10c00317 	ldw	r3,12(r2)
   31e00:	008001b4 	movhi	r2,6
   31e04:	10b09704 	addi	r2,r2,-15780
   31e08:	d8800015 	stw	r2,0(sp)
   31e0c:	01c09844 	movi	r7,609
   31e10:	018001b4 	movhi	r6,6
   31e14:	31af9204 	addi	r6,r6,-16824
   31e18:	014001b4 	movhi	r5,6
   31e1c:	296b3804 	addi	r5,r5,-21280
   31e20:	1809883a 	mov	r4,r3
   31e24:	00452600 	call	45260 <fprintf>
   31e28:	00450340 	call	45034 <abort>
    muladd2(a->d[3], a->d[4]);
   31e2c:	e0bf2b17 	ldw	r2,-852(fp)
   31e30:	10800317 	ldw	r2,12(r2)
   31e34:	e0bf9215 	stw	r2,-440(fp)
   31e38:	e03f9315 	stw	zero,-436(fp)
   31e3c:	e0bf2b17 	ldw	r2,-852(fp)
   31e40:	10800417 	ldw	r2,16(r2)
   31e44:	e0bf9415 	stw	r2,-432(fp)
   31e48:	e03f9515 	stw	zero,-428(fp)
   31e4c:	e1bf9417 	ldw	r6,-432(fp)
   31e50:	e1ff9517 	ldw	r7,-428(fp)
   31e54:	e13f9217 	ldw	r4,-440(fp)
   31e58:	e17f9317 	ldw	r5,-436(fp)
   31e5c:	00429400 	call	42940 <__muldi3>
   31e60:	1009883a 	mov	r4,r2
   31e64:	180b883a 	mov	r5,r3
   31e68:	e13ecc15 	stw	r4,-1232(fp)
   31e6c:	e17ecd15 	stw	r5,-1228(fp)
   31e70:	e0becd17 	ldw	r2,-1228(fp)
   31e74:	1004d83a 	srl	r2,r2,zero
   31e78:	e0bf9615 	stw	r2,-424(fp)
   31e7c:	e03f9715 	stw	zero,-420(fp)
   31e80:	e0bf9617 	ldw	r2,-424(fp)
   31e84:	e0bece15 	stw	r2,-1224(fp)
   31e88:	e0becc17 	ldw	r2,-1232(fp)
   31e8c:	e0becf15 	stw	r2,-1220(fp)
   31e90:	e0fece17 	ldw	r3,-1224(fp)
   31e94:	e0bece17 	ldw	r2,-1224(fp)
   31e98:	1885883a 	add	r2,r3,r2
   31e9c:	e0bed015 	stw	r2,-1216(fp)
   31ea0:	e0fed017 	ldw	r3,-1216(fp)
   31ea4:	e0bece17 	ldw	r2,-1224(fp)
   31ea8:	1880022e 	bgeu	r3,r2,31eb4 <secp256k1_scalar_sqr_512+0x2c44>
   31eac:	00c00044 	movi	r3,1
   31eb0:	00000106 	br	31eb8 <secp256k1_scalar_sqr_512+0x2c48>
   31eb4:	0007883a 	mov	r3,zero
   31eb8:	e0be6117 	ldw	r2,-1660(fp)
   31ebc:	10c5883a 	add	r2,r2,r3
   31ec0:	e0be6115 	stw	r2,-1660(fp)
   31ec4:	e0fed017 	ldw	r3,-1216(fp)
   31ec8:	e0bece17 	ldw	r2,-1224(fp)
   31ecc:	1885803a 	cmpltu	r2,r3,r2
   31ed0:	10803fcc 	andi	r2,r2,255
   31ed4:	10001126 	beq	r2,zero,31f1c <secp256k1_scalar_sqr_512+0x2cac>
   31ed8:	e0be6117 	ldw	r2,-1660(fp)
   31edc:	1005003a 	cmpeq	r2,r2,zero
   31ee0:	10803fcc 	andi	r2,r2,255
   31ee4:	10000d26 	beq	r2,zero,31f1c <secp256k1_scalar_sqr_512+0x2cac>
   31ee8:	d0a01617 	ldw	r2,-32680(gp)
   31eec:	10c00317 	ldw	r3,12(r2)
   31ef0:	008001b4 	movhi	r2,6
   31ef4:	10b07b04 	addi	r2,r2,-15892
   31ef8:	d8800015 	stw	r2,0(sp)
   31efc:	01c09884 	movi	r7,610
   31f00:	018001b4 	movhi	r6,6
   31f04:	31af9204 	addi	r6,r6,-16824
   31f08:	014001b4 	movhi	r5,6
   31f0c:	296b3804 	addi	r5,r5,-21280
   31f10:	1809883a 	mov	r4,r3
   31f14:	00452600 	call	45260 <fprintf>
   31f18:	00450340 	call	45034 <abort>
   31f1c:	e0fecf17 	ldw	r3,-1220(fp)
   31f20:	e0becf17 	ldw	r2,-1220(fp)
   31f24:	1885883a 	add	r2,r3,r2
   31f28:	e0bed115 	stw	r2,-1212(fp)
   31f2c:	e0fed117 	ldw	r3,-1212(fp)
   31f30:	e0becf17 	ldw	r2,-1220(fp)
   31f34:	1880022e 	bgeu	r3,r2,31f40 <secp256k1_scalar_sqr_512+0x2cd0>
   31f38:	00c00044 	movi	r3,1
   31f3c:	00000106 	br	31f44 <secp256k1_scalar_sqr_512+0x2cd4>
   31f40:	0007883a 	mov	r3,zero
   31f44:	e0bed017 	ldw	r2,-1216(fp)
   31f48:	10c5883a 	add	r2,r2,r3
   31f4c:	e0bed015 	stw	r2,-1216(fp)
   31f50:	e0fe5f17 	ldw	r3,-1668(fp)
   31f54:	e0bed117 	ldw	r2,-1212(fp)
   31f58:	1885883a 	add	r2,r3,r2
   31f5c:	e0be5f15 	stw	r2,-1668(fp)
   31f60:	e0fe5f17 	ldw	r3,-1668(fp)
   31f64:	e0bed117 	ldw	r2,-1212(fp)
   31f68:	1880022e 	bgeu	r3,r2,31f74 <secp256k1_scalar_sqr_512+0x2d04>
   31f6c:	00c00044 	movi	r3,1
   31f70:	00000106 	br	31f78 <secp256k1_scalar_sqr_512+0x2d08>
   31f74:	0007883a 	mov	r3,zero
   31f78:	e0bed017 	ldw	r2,-1216(fp)
   31f7c:	10c5883a 	add	r2,r2,r3
   31f80:	e0bed015 	stw	r2,-1216(fp)
   31f84:	e0fe5f17 	ldw	r3,-1668(fp)
   31f88:	e0bed117 	ldw	r2,-1212(fp)
   31f8c:	1885803a 	cmpltu	r2,r3,r2
   31f90:	1007883a 	mov	r3,r2
   31f94:	e0bed017 	ldw	r2,-1216(fp)
   31f98:	1005003a 	cmpeq	r2,r2,zero
   31f9c:	1884703a 	and	r2,r3,r2
   31fa0:	10c03fcc 	andi	r3,r2,255
   31fa4:	e0be6117 	ldw	r2,-1660(fp)
   31fa8:	10c5883a 	add	r2,r2,r3
   31fac:	e0be6115 	stw	r2,-1660(fp)
   31fb0:	e0fe5f17 	ldw	r3,-1668(fp)
   31fb4:	e0bed117 	ldw	r2,-1212(fp)
   31fb8:	1885803a 	cmpltu	r2,r3,r2
   31fbc:	10803fcc 	andi	r2,r2,255
   31fc0:	10000626 	beq	r2,zero,31fdc <secp256k1_scalar_sqr_512+0x2d6c>
   31fc4:	e0bed017 	ldw	r2,-1216(fp)
   31fc8:	1005003a 	cmpeq	r2,r2,zero
   31fcc:	10803fcc 	andi	r2,r2,255
   31fd0:	10000226 	beq	r2,zero,31fdc <secp256k1_scalar_sqr_512+0x2d6c>
   31fd4:	00800044 	movi	r2,1
   31fd8:	00000106 	br	31fe0 <secp256k1_scalar_sqr_512+0x2d70>
   31fdc:	0005883a 	mov	r2,zero
   31fe0:	10001126 	beq	r2,zero,32028 <secp256k1_scalar_sqr_512+0x2db8>
   31fe4:	e0be6117 	ldw	r2,-1660(fp)
   31fe8:	1005003a 	cmpeq	r2,r2,zero
   31fec:	10803fcc 	andi	r2,r2,255
   31ff0:	10000d26 	beq	r2,zero,32028 <secp256k1_scalar_sqr_512+0x2db8>
   31ff4:	d0a01617 	ldw	r2,-32680(gp)
   31ff8:	10c00317 	ldw	r3,12(r2)
   31ffc:	008001b4 	movhi	r2,6
   32000:	10b08704 	addi	r2,r2,-15844
   32004:	d8800015 	stw	r2,0(sp)
   32008:	01c09884 	movi	r7,610
   3200c:	018001b4 	movhi	r6,6
   32010:	31af9204 	addi	r6,r6,-16824
   32014:	014001b4 	movhi	r5,6
   32018:	296b3804 	addi	r5,r5,-21280
   3201c:	1809883a 	mov	r4,r3
   32020:	00452600 	call	45260 <fprintf>
   32024:	00450340 	call	45034 <abort>
   32028:	e0fe6017 	ldw	r3,-1664(fp)
   3202c:	e0bed017 	ldw	r2,-1216(fp)
   32030:	1885883a 	add	r2,r3,r2
   32034:	e0be6015 	stw	r2,-1664(fp)
   32038:	e0fe6017 	ldw	r3,-1664(fp)
   3203c:	e0bed017 	ldw	r2,-1216(fp)
   32040:	1880022e 	bgeu	r3,r2,3204c <secp256k1_scalar_sqr_512+0x2ddc>
   32044:	00c00044 	movi	r3,1
   32048:	00000106 	br	32050 <secp256k1_scalar_sqr_512+0x2de0>
   3204c:	0007883a 	mov	r3,zero
   32050:	e0be6117 	ldw	r2,-1660(fp)
   32054:	10c5883a 	add	r2,r2,r3
   32058:	e0be6115 	stw	r2,-1660(fp)
   3205c:	e0fe6017 	ldw	r3,-1664(fp)
   32060:	e0bed017 	ldw	r2,-1216(fp)
   32064:	1885803a 	cmpltu	r2,r3,r2
   32068:	10803fcc 	andi	r2,r2,255
   3206c:	10001126 	beq	r2,zero,320b4 <secp256k1_scalar_sqr_512+0x2e44>
   32070:	e0be6117 	ldw	r2,-1660(fp)
   32074:	1005003a 	cmpeq	r2,r2,zero
   32078:	10803fcc 	andi	r2,r2,255
   3207c:	10000d26 	beq	r2,zero,320b4 <secp256k1_scalar_sqr_512+0x2e44>
   32080:	d0a01617 	ldw	r2,-32680(gp)
   32084:	10c00317 	ldw	r3,12(r2)
   32088:	008001b4 	movhi	r2,6
   3208c:	10b09704 	addi	r2,r2,-15780
   32090:	d8800015 	stw	r2,0(sp)
   32094:	01c09884 	movi	r7,610
   32098:	018001b4 	movhi	r6,6
   3209c:	31af9204 	addi	r6,r6,-16824
   320a0:	014001b4 	movhi	r5,6
   320a4:	296b3804 	addi	r5,r5,-21280
   320a8:	1809883a 	mov	r4,r3
   320ac:	00452600 	call	45260 <fprintf>
   320b0:	00450340 	call	45034 <abort>
    extract(l[7]);
   320b4:	e0bf2a17 	ldw	r2,-856(fp)
   320b8:	10c00704 	addi	r3,r2,28
   320bc:	e0be5f17 	ldw	r2,-1668(fp)
   320c0:	18800015 	stw	r2,0(r3)
   320c4:	e0be6017 	ldw	r2,-1664(fp)
   320c8:	e0be5f15 	stw	r2,-1668(fp)
   320cc:	e0be6117 	ldw	r2,-1660(fp)
   320d0:	e0be6015 	stw	r2,-1664(fp)
   320d4:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[1], a->d[7]);
   320d8:	e0bf2b17 	ldw	r2,-852(fp)
   320dc:	10800117 	ldw	r2,4(r2)
   320e0:	e0bf9815 	stw	r2,-416(fp)
   320e4:	e03f9915 	stw	zero,-412(fp)
   320e8:	e0bf2b17 	ldw	r2,-852(fp)
   320ec:	10800717 	ldw	r2,28(r2)
   320f0:	e0bf9a15 	stw	r2,-408(fp)
   320f4:	e03f9b15 	stw	zero,-404(fp)
   320f8:	e1bf9a17 	ldw	r6,-408(fp)
   320fc:	e1ff9b17 	ldw	r7,-404(fp)
   32100:	e13f9817 	ldw	r4,-416(fp)
   32104:	e17f9917 	ldw	r5,-412(fp)
   32108:	00429400 	call	42940 <__muldi3>
   3210c:	1009883a 	mov	r4,r2
   32110:	180b883a 	mov	r5,r3
   32114:	e13ed215 	stw	r4,-1208(fp)
   32118:	e17ed315 	stw	r5,-1204(fp)
   3211c:	e0bed317 	ldw	r2,-1204(fp)
   32120:	1004d83a 	srl	r2,r2,zero
   32124:	e0bf9c15 	stw	r2,-400(fp)
   32128:	e03f9d15 	stw	zero,-396(fp)
   3212c:	e0bf9c17 	ldw	r2,-400(fp)
   32130:	e0bed415 	stw	r2,-1200(fp)
   32134:	e0bed217 	ldw	r2,-1208(fp)
   32138:	e0bed515 	stw	r2,-1196(fp)
   3213c:	e0fed417 	ldw	r3,-1200(fp)
   32140:	e0bed417 	ldw	r2,-1200(fp)
   32144:	1885883a 	add	r2,r3,r2
   32148:	e0bed615 	stw	r2,-1192(fp)
   3214c:	e0fed617 	ldw	r3,-1192(fp)
   32150:	e0bed417 	ldw	r2,-1200(fp)
   32154:	1880022e 	bgeu	r3,r2,32160 <secp256k1_scalar_sqr_512+0x2ef0>
   32158:	00c00044 	movi	r3,1
   3215c:	00000106 	br	32164 <secp256k1_scalar_sqr_512+0x2ef4>
   32160:	0007883a 	mov	r3,zero
   32164:	e0be6117 	ldw	r2,-1660(fp)
   32168:	10c5883a 	add	r2,r2,r3
   3216c:	e0be6115 	stw	r2,-1660(fp)
   32170:	e0fed617 	ldw	r3,-1192(fp)
   32174:	e0bed417 	ldw	r2,-1200(fp)
   32178:	1885803a 	cmpltu	r2,r3,r2
   3217c:	10803fcc 	andi	r2,r2,255
   32180:	10001126 	beq	r2,zero,321c8 <secp256k1_scalar_sqr_512+0x2f58>
   32184:	e0be6117 	ldw	r2,-1660(fp)
   32188:	1005003a 	cmpeq	r2,r2,zero
   3218c:	10803fcc 	andi	r2,r2,255
   32190:	10000d26 	beq	r2,zero,321c8 <secp256k1_scalar_sqr_512+0x2f58>
   32194:	d0a01617 	ldw	r2,-32680(gp)
   32198:	10c00317 	ldw	r3,12(r2)
   3219c:	008001b4 	movhi	r2,6
   321a0:	10b07b04 	addi	r2,r2,-15892
   321a4:	d8800015 	stw	r2,0(sp)
   321a8:	01c09904 	movi	r7,612
   321ac:	018001b4 	movhi	r6,6
   321b0:	31af9204 	addi	r6,r6,-16824
   321b4:	014001b4 	movhi	r5,6
   321b8:	296b3804 	addi	r5,r5,-21280
   321bc:	1809883a 	mov	r4,r3
   321c0:	00452600 	call	45260 <fprintf>
   321c4:	00450340 	call	45034 <abort>
   321c8:	e0fed517 	ldw	r3,-1196(fp)
   321cc:	e0bed517 	ldw	r2,-1196(fp)
   321d0:	1885883a 	add	r2,r3,r2
   321d4:	e0bed715 	stw	r2,-1188(fp)
   321d8:	e0fed717 	ldw	r3,-1188(fp)
   321dc:	e0bed517 	ldw	r2,-1196(fp)
   321e0:	1880022e 	bgeu	r3,r2,321ec <secp256k1_scalar_sqr_512+0x2f7c>
   321e4:	00c00044 	movi	r3,1
   321e8:	00000106 	br	321f0 <secp256k1_scalar_sqr_512+0x2f80>
   321ec:	0007883a 	mov	r3,zero
   321f0:	e0bed617 	ldw	r2,-1192(fp)
   321f4:	10c5883a 	add	r2,r2,r3
   321f8:	e0bed615 	stw	r2,-1192(fp)
   321fc:	e0fe5f17 	ldw	r3,-1668(fp)
   32200:	e0bed717 	ldw	r2,-1188(fp)
   32204:	1885883a 	add	r2,r3,r2
   32208:	e0be5f15 	stw	r2,-1668(fp)
   3220c:	e0fe5f17 	ldw	r3,-1668(fp)
   32210:	e0bed717 	ldw	r2,-1188(fp)
   32214:	1880022e 	bgeu	r3,r2,32220 <secp256k1_scalar_sqr_512+0x2fb0>
   32218:	00c00044 	movi	r3,1
   3221c:	00000106 	br	32224 <secp256k1_scalar_sqr_512+0x2fb4>
   32220:	0007883a 	mov	r3,zero
   32224:	e0bed617 	ldw	r2,-1192(fp)
   32228:	10c5883a 	add	r2,r2,r3
   3222c:	e0bed615 	stw	r2,-1192(fp)
   32230:	e0fe5f17 	ldw	r3,-1668(fp)
   32234:	e0bed717 	ldw	r2,-1188(fp)
   32238:	1885803a 	cmpltu	r2,r3,r2
   3223c:	1007883a 	mov	r3,r2
   32240:	e0bed617 	ldw	r2,-1192(fp)
   32244:	1005003a 	cmpeq	r2,r2,zero
   32248:	1884703a 	and	r2,r3,r2
   3224c:	10c03fcc 	andi	r3,r2,255
   32250:	e0be6117 	ldw	r2,-1660(fp)
   32254:	10c5883a 	add	r2,r2,r3
   32258:	e0be6115 	stw	r2,-1660(fp)
   3225c:	e0fe5f17 	ldw	r3,-1668(fp)
   32260:	e0bed717 	ldw	r2,-1188(fp)
   32264:	1885803a 	cmpltu	r2,r3,r2
   32268:	10803fcc 	andi	r2,r2,255
   3226c:	10000626 	beq	r2,zero,32288 <secp256k1_scalar_sqr_512+0x3018>
   32270:	e0bed617 	ldw	r2,-1192(fp)
   32274:	1005003a 	cmpeq	r2,r2,zero
   32278:	10803fcc 	andi	r2,r2,255
   3227c:	10000226 	beq	r2,zero,32288 <secp256k1_scalar_sqr_512+0x3018>
   32280:	00800044 	movi	r2,1
   32284:	00000106 	br	3228c <secp256k1_scalar_sqr_512+0x301c>
   32288:	0005883a 	mov	r2,zero
   3228c:	10001126 	beq	r2,zero,322d4 <secp256k1_scalar_sqr_512+0x3064>
   32290:	e0be6117 	ldw	r2,-1660(fp)
   32294:	1005003a 	cmpeq	r2,r2,zero
   32298:	10803fcc 	andi	r2,r2,255
   3229c:	10000d26 	beq	r2,zero,322d4 <secp256k1_scalar_sqr_512+0x3064>
   322a0:	d0a01617 	ldw	r2,-32680(gp)
   322a4:	10c00317 	ldw	r3,12(r2)
   322a8:	008001b4 	movhi	r2,6
   322ac:	10b08704 	addi	r2,r2,-15844
   322b0:	d8800015 	stw	r2,0(sp)
   322b4:	01c09904 	movi	r7,612
   322b8:	018001b4 	movhi	r6,6
   322bc:	31af9204 	addi	r6,r6,-16824
   322c0:	014001b4 	movhi	r5,6
   322c4:	296b3804 	addi	r5,r5,-21280
   322c8:	1809883a 	mov	r4,r3
   322cc:	00452600 	call	45260 <fprintf>
   322d0:	00450340 	call	45034 <abort>
   322d4:	e0fe6017 	ldw	r3,-1664(fp)
   322d8:	e0bed617 	ldw	r2,-1192(fp)
   322dc:	1885883a 	add	r2,r3,r2
   322e0:	e0be6015 	stw	r2,-1664(fp)
   322e4:	e0fe6017 	ldw	r3,-1664(fp)
   322e8:	e0bed617 	ldw	r2,-1192(fp)
   322ec:	1880022e 	bgeu	r3,r2,322f8 <secp256k1_scalar_sqr_512+0x3088>
   322f0:	00c00044 	movi	r3,1
   322f4:	00000106 	br	322fc <secp256k1_scalar_sqr_512+0x308c>
   322f8:	0007883a 	mov	r3,zero
   322fc:	e0be6117 	ldw	r2,-1660(fp)
   32300:	10c5883a 	add	r2,r2,r3
   32304:	e0be6115 	stw	r2,-1660(fp)
   32308:	e0fe6017 	ldw	r3,-1664(fp)
   3230c:	e0bed617 	ldw	r2,-1192(fp)
   32310:	1885803a 	cmpltu	r2,r3,r2
   32314:	10803fcc 	andi	r2,r2,255
   32318:	10001126 	beq	r2,zero,32360 <secp256k1_scalar_sqr_512+0x30f0>
   3231c:	e0be6117 	ldw	r2,-1660(fp)
   32320:	1005003a 	cmpeq	r2,r2,zero
   32324:	10803fcc 	andi	r2,r2,255
   32328:	10000d26 	beq	r2,zero,32360 <secp256k1_scalar_sqr_512+0x30f0>
   3232c:	d0a01617 	ldw	r2,-32680(gp)
   32330:	10c00317 	ldw	r3,12(r2)
   32334:	008001b4 	movhi	r2,6
   32338:	10b09704 	addi	r2,r2,-15780
   3233c:	d8800015 	stw	r2,0(sp)
   32340:	01c09904 	movi	r7,612
   32344:	018001b4 	movhi	r6,6
   32348:	31af9204 	addi	r6,r6,-16824
   3234c:	014001b4 	movhi	r5,6
   32350:	296b3804 	addi	r5,r5,-21280
   32354:	1809883a 	mov	r4,r3
   32358:	00452600 	call	45260 <fprintf>
   3235c:	00450340 	call	45034 <abort>
    muladd2(a->d[2], a->d[6]);
   32360:	e0bf2b17 	ldw	r2,-852(fp)
   32364:	10800217 	ldw	r2,8(r2)
   32368:	e0bf9e15 	stw	r2,-392(fp)
   3236c:	e03f9f15 	stw	zero,-388(fp)
   32370:	e0bf2b17 	ldw	r2,-852(fp)
   32374:	10800617 	ldw	r2,24(r2)
   32378:	e0bfa015 	stw	r2,-384(fp)
   3237c:	e03fa115 	stw	zero,-380(fp)
   32380:	e1bfa017 	ldw	r6,-384(fp)
   32384:	e1ffa117 	ldw	r7,-380(fp)
   32388:	e13f9e17 	ldw	r4,-392(fp)
   3238c:	e17f9f17 	ldw	r5,-388(fp)
   32390:	00429400 	call	42940 <__muldi3>
   32394:	1009883a 	mov	r4,r2
   32398:	180b883a 	mov	r5,r3
   3239c:	e13ed815 	stw	r4,-1184(fp)
   323a0:	e17ed915 	stw	r5,-1180(fp)
   323a4:	e0bed917 	ldw	r2,-1180(fp)
   323a8:	1004d83a 	srl	r2,r2,zero
   323ac:	e0bfa215 	stw	r2,-376(fp)
   323b0:	e03fa315 	stw	zero,-372(fp)
   323b4:	e0bfa217 	ldw	r2,-376(fp)
   323b8:	e0beda15 	stw	r2,-1176(fp)
   323bc:	e0bed817 	ldw	r2,-1184(fp)
   323c0:	e0bedb15 	stw	r2,-1172(fp)
   323c4:	e0feda17 	ldw	r3,-1176(fp)
   323c8:	e0beda17 	ldw	r2,-1176(fp)
   323cc:	1885883a 	add	r2,r3,r2
   323d0:	e0bedc15 	stw	r2,-1168(fp)
   323d4:	e0fedc17 	ldw	r3,-1168(fp)
   323d8:	e0beda17 	ldw	r2,-1176(fp)
   323dc:	1880022e 	bgeu	r3,r2,323e8 <secp256k1_scalar_sqr_512+0x3178>
   323e0:	00c00044 	movi	r3,1
   323e4:	00000106 	br	323ec <secp256k1_scalar_sqr_512+0x317c>
   323e8:	0007883a 	mov	r3,zero
   323ec:	e0be6117 	ldw	r2,-1660(fp)
   323f0:	10c5883a 	add	r2,r2,r3
   323f4:	e0be6115 	stw	r2,-1660(fp)
   323f8:	e0fedc17 	ldw	r3,-1168(fp)
   323fc:	e0beda17 	ldw	r2,-1176(fp)
   32400:	1885803a 	cmpltu	r2,r3,r2
   32404:	10803fcc 	andi	r2,r2,255
   32408:	10001126 	beq	r2,zero,32450 <secp256k1_scalar_sqr_512+0x31e0>
   3240c:	e0be6117 	ldw	r2,-1660(fp)
   32410:	1005003a 	cmpeq	r2,r2,zero
   32414:	10803fcc 	andi	r2,r2,255
   32418:	10000d26 	beq	r2,zero,32450 <secp256k1_scalar_sqr_512+0x31e0>
   3241c:	d0a01617 	ldw	r2,-32680(gp)
   32420:	10c00317 	ldw	r3,12(r2)
   32424:	008001b4 	movhi	r2,6
   32428:	10b07b04 	addi	r2,r2,-15892
   3242c:	d8800015 	stw	r2,0(sp)
   32430:	01c09944 	movi	r7,613
   32434:	018001b4 	movhi	r6,6
   32438:	31af9204 	addi	r6,r6,-16824
   3243c:	014001b4 	movhi	r5,6
   32440:	296b3804 	addi	r5,r5,-21280
   32444:	1809883a 	mov	r4,r3
   32448:	00452600 	call	45260 <fprintf>
   3244c:	00450340 	call	45034 <abort>
   32450:	e0fedb17 	ldw	r3,-1172(fp)
   32454:	e0bedb17 	ldw	r2,-1172(fp)
   32458:	1885883a 	add	r2,r3,r2
   3245c:	e0bedd15 	stw	r2,-1164(fp)
   32460:	e0fedd17 	ldw	r3,-1164(fp)
   32464:	e0bedb17 	ldw	r2,-1172(fp)
   32468:	1880022e 	bgeu	r3,r2,32474 <secp256k1_scalar_sqr_512+0x3204>
   3246c:	00c00044 	movi	r3,1
   32470:	00000106 	br	32478 <secp256k1_scalar_sqr_512+0x3208>
   32474:	0007883a 	mov	r3,zero
   32478:	e0bedc17 	ldw	r2,-1168(fp)
   3247c:	10c5883a 	add	r2,r2,r3
   32480:	e0bedc15 	stw	r2,-1168(fp)
   32484:	e0fe5f17 	ldw	r3,-1668(fp)
   32488:	e0bedd17 	ldw	r2,-1164(fp)
   3248c:	1885883a 	add	r2,r3,r2
   32490:	e0be5f15 	stw	r2,-1668(fp)
   32494:	e0fe5f17 	ldw	r3,-1668(fp)
   32498:	e0bedd17 	ldw	r2,-1164(fp)
   3249c:	1880022e 	bgeu	r3,r2,324a8 <secp256k1_scalar_sqr_512+0x3238>
   324a0:	00c00044 	movi	r3,1
   324a4:	00000106 	br	324ac <secp256k1_scalar_sqr_512+0x323c>
   324a8:	0007883a 	mov	r3,zero
   324ac:	e0bedc17 	ldw	r2,-1168(fp)
   324b0:	10c5883a 	add	r2,r2,r3
   324b4:	e0bedc15 	stw	r2,-1168(fp)
   324b8:	e0fe5f17 	ldw	r3,-1668(fp)
   324bc:	e0bedd17 	ldw	r2,-1164(fp)
   324c0:	1885803a 	cmpltu	r2,r3,r2
   324c4:	1007883a 	mov	r3,r2
   324c8:	e0bedc17 	ldw	r2,-1168(fp)
   324cc:	1005003a 	cmpeq	r2,r2,zero
   324d0:	1884703a 	and	r2,r3,r2
   324d4:	10c03fcc 	andi	r3,r2,255
   324d8:	e0be6117 	ldw	r2,-1660(fp)
   324dc:	10c5883a 	add	r2,r2,r3
   324e0:	e0be6115 	stw	r2,-1660(fp)
   324e4:	e0fe5f17 	ldw	r3,-1668(fp)
   324e8:	e0bedd17 	ldw	r2,-1164(fp)
   324ec:	1885803a 	cmpltu	r2,r3,r2
   324f0:	10803fcc 	andi	r2,r2,255
   324f4:	10000626 	beq	r2,zero,32510 <secp256k1_scalar_sqr_512+0x32a0>
   324f8:	e0bedc17 	ldw	r2,-1168(fp)
   324fc:	1005003a 	cmpeq	r2,r2,zero
   32500:	10803fcc 	andi	r2,r2,255
   32504:	10000226 	beq	r2,zero,32510 <secp256k1_scalar_sqr_512+0x32a0>
   32508:	00800044 	movi	r2,1
   3250c:	00000106 	br	32514 <secp256k1_scalar_sqr_512+0x32a4>
   32510:	0005883a 	mov	r2,zero
   32514:	10001126 	beq	r2,zero,3255c <secp256k1_scalar_sqr_512+0x32ec>
   32518:	e0be6117 	ldw	r2,-1660(fp)
   3251c:	1005003a 	cmpeq	r2,r2,zero
   32520:	10803fcc 	andi	r2,r2,255
   32524:	10000d26 	beq	r2,zero,3255c <secp256k1_scalar_sqr_512+0x32ec>
   32528:	d0a01617 	ldw	r2,-32680(gp)
   3252c:	10c00317 	ldw	r3,12(r2)
   32530:	008001b4 	movhi	r2,6
   32534:	10b08704 	addi	r2,r2,-15844
   32538:	d8800015 	stw	r2,0(sp)
   3253c:	01c09944 	movi	r7,613
   32540:	018001b4 	movhi	r6,6
   32544:	31af9204 	addi	r6,r6,-16824
   32548:	014001b4 	movhi	r5,6
   3254c:	296b3804 	addi	r5,r5,-21280
   32550:	1809883a 	mov	r4,r3
   32554:	00452600 	call	45260 <fprintf>
   32558:	00450340 	call	45034 <abort>
   3255c:	e0fe6017 	ldw	r3,-1664(fp)
   32560:	e0bedc17 	ldw	r2,-1168(fp)
   32564:	1885883a 	add	r2,r3,r2
   32568:	e0be6015 	stw	r2,-1664(fp)
   3256c:	e0fe6017 	ldw	r3,-1664(fp)
   32570:	e0bedc17 	ldw	r2,-1168(fp)
   32574:	1880022e 	bgeu	r3,r2,32580 <secp256k1_scalar_sqr_512+0x3310>
   32578:	00c00044 	movi	r3,1
   3257c:	00000106 	br	32584 <secp256k1_scalar_sqr_512+0x3314>
   32580:	0007883a 	mov	r3,zero
   32584:	e0be6117 	ldw	r2,-1660(fp)
   32588:	10c5883a 	add	r2,r2,r3
   3258c:	e0be6115 	stw	r2,-1660(fp)
   32590:	e0fe6017 	ldw	r3,-1664(fp)
   32594:	e0bedc17 	ldw	r2,-1168(fp)
   32598:	1885803a 	cmpltu	r2,r3,r2
   3259c:	10803fcc 	andi	r2,r2,255
   325a0:	10001126 	beq	r2,zero,325e8 <secp256k1_scalar_sqr_512+0x3378>
   325a4:	e0be6117 	ldw	r2,-1660(fp)
   325a8:	1005003a 	cmpeq	r2,r2,zero
   325ac:	10803fcc 	andi	r2,r2,255
   325b0:	10000d26 	beq	r2,zero,325e8 <secp256k1_scalar_sqr_512+0x3378>
   325b4:	d0a01617 	ldw	r2,-32680(gp)
   325b8:	10c00317 	ldw	r3,12(r2)
   325bc:	008001b4 	movhi	r2,6
   325c0:	10b09704 	addi	r2,r2,-15780
   325c4:	d8800015 	stw	r2,0(sp)
   325c8:	01c09944 	movi	r7,613
   325cc:	018001b4 	movhi	r6,6
   325d0:	31af9204 	addi	r6,r6,-16824
   325d4:	014001b4 	movhi	r5,6
   325d8:	296b3804 	addi	r5,r5,-21280
   325dc:	1809883a 	mov	r4,r3
   325e0:	00452600 	call	45260 <fprintf>
   325e4:	00450340 	call	45034 <abort>
    muladd2(a->d[3], a->d[5]);
   325e8:	e0bf2b17 	ldw	r2,-852(fp)
   325ec:	10800317 	ldw	r2,12(r2)
   325f0:	e0bfa415 	stw	r2,-368(fp)
   325f4:	e03fa515 	stw	zero,-364(fp)
   325f8:	e0bf2b17 	ldw	r2,-852(fp)
   325fc:	10800517 	ldw	r2,20(r2)
   32600:	e0bfa615 	stw	r2,-360(fp)
   32604:	e03fa715 	stw	zero,-356(fp)
   32608:	e1bfa617 	ldw	r6,-360(fp)
   3260c:	e1ffa717 	ldw	r7,-356(fp)
   32610:	e13fa417 	ldw	r4,-368(fp)
   32614:	e17fa517 	ldw	r5,-364(fp)
   32618:	00429400 	call	42940 <__muldi3>
   3261c:	1009883a 	mov	r4,r2
   32620:	180b883a 	mov	r5,r3
   32624:	e13ede15 	stw	r4,-1160(fp)
   32628:	e17edf15 	stw	r5,-1156(fp)
   3262c:	e0bedf17 	ldw	r2,-1156(fp)
   32630:	1004d83a 	srl	r2,r2,zero
   32634:	e0bfa815 	stw	r2,-352(fp)
   32638:	e03fa915 	stw	zero,-348(fp)
   3263c:	e0bfa817 	ldw	r2,-352(fp)
   32640:	e0bee015 	stw	r2,-1152(fp)
   32644:	e0bede17 	ldw	r2,-1160(fp)
   32648:	e0bee115 	stw	r2,-1148(fp)
   3264c:	e0fee017 	ldw	r3,-1152(fp)
   32650:	e0bee017 	ldw	r2,-1152(fp)
   32654:	1885883a 	add	r2,r3,r2
   32658:	e0bee215 	stw	r2,-1144(fp)
   3265c:	e0fee217 	ldw	r3,-1144(fp)
   32660:	e0bee017 	ldw	r2,-1152(fp)
   32664:	1880022e 	bgeu	r3,r2,32670 <secp256k1_scalar_sqr_512+0x3400>
   32668:	00c00044 	movi	r3,1
   3266c:	00000106 	br	32674 <secp256k1_scalar_sqr_512+0x3404>
   32670:	0007883a 	mov	r3,zero
   32674:	e0be6117 	ldw	r2,-1660(fp)
   32678:	10c5883a 	add	r2,r2,r3
   3267c:	e0be6115 	stw	r2,-1660(fp)
   32680:	e0fee217 	ldw	r3,-1144(fp)
   32684:	e0bee017 	ldw	r2,-1152(fp)
   32688:	1885803a 	cmpltu	r2,r3,r2
   3268c:	10803fcc 	andi	r2,r2,255
   32690:	10001126 	beq	r2,zero,326d8 <secp256k1_scalar_sqr_512+0x3468>
   32694:	e0be6117 	ldw	r2,-1660(fp)
   32698:	1005003a 	cmpeq	r2,r2,zero
   3269c:	10803fcc 	andi	r2,r2,255
   326a0:	10000d26 	beq	r2,zero,326d8 <secp256k1_scalar_sqr_512+0x3468>
   326a4:	d0a01617 	ldw	r2,-32680(gp)
   326a8:	10c00317 	ldw	r3,12(r2)
   326ac:	008001b4 	movhi	r2,6
   326b0:	10b07b04 	addi	r2,r2,-15892
   326b4:	d8800015 	stw	r2,0(sp)
   326b8:	01c09984 	movi	r7,614
   326bc:	018001b4 	movhi	r6,6
   326c0:	31af9204 	addi	r6,r6,-16824
   326c4:	014001b4 	movhi	r5,6
   326c8:	296b3804 	addi	r5,r5,-21280
   326cc:	1809883a 	mov	r4,r3
   326d0:	00452600 	call	45260 <fprintf>
   326d4:	00450340 	call	45034 <abort>
   326d8:	e0fee117 	ldw	r3,-1148(fp)
   326dc:	e0bee117 	ldw	r2,-1148(fp)
   326e0:	1885883a 	add	r2,r3,r2
   326e4:	e0bee315 	stw	r2,-1140(fp)
   326e8:	e0fee317 	ldw	r3,-1140(fp)
   326ec:	e0bee117 	ldw	r2,-1148(fp)
   326f0:	1880022e 	bgeu	r3,r2,326fc <secp256k1_scalar_sqr_512+0x348c>
   326f4:	00c00044 	movi	r3,1
   326f8:	00000106 	br	32700 <secp256k1_scalar_sqr_512+0x3490>
   326fc:	0007883a 	mov	r3,zero
   32700:	e0bee217 	ldw	r2,-1144(fp)
   32704:	10c5883a 	add	r2,r2,r3
   32708:	e0bee215 	stw	r2,-1144(fp)
   3270c:	e0fe5f17 	ldw	r3,-1668(fp)
   32710:	e0bee317 	ldw	r2,-1140(fp)
   32714:	1885883a 	add	r2,r3,r2
   32718:	e0be5f15 	stw	r2,-1668(fp)
   3271c:	e0fe5f17 	ldw	r3,-1668(fp)
   32720:	e0bee317 	ldw	r2,-1140(fp)
   32724:	1880022e 	bgeu	r3,r2,32730 <secp256k1_scalar_sqr_512+0x34c0>
   32728:	00c00044 	movi	r3,1
   3272c:	00000106 	br	32734 <secp256k1_scalar_sqr_512+0x34c4>
   32730:	0007883a 	mov	r3,zero
   32734:	e0bee217 	ldw	r2,-1144(fp)
   32738:	10c5883a 	add	r2,r2,r3
   3273c:	e0bee215 	stw	r2,-1144(fp)
   32740:	e0fe5f17 	ldw	r3,-1668(fp)
   32744:	e0bee317 	ldw	r2,-1140(fp)
   32748:	1885803a 	cmpltu	r2,r3,r2
   3274c:	1007883a 	mov	r3,r2
   32750:	e0bee217 	ldw	r2,-1144(fp)
   32754:	1005003a 	cmpeq	r2,r2,zero
   32758:	1884703a 	and	r2,r3,r2
   3275c:	10c03fcc 	andi	r3,r2,255
   32760:	e0be6117 	ldw	r2,-1660(fp)
   32764:	10c5883a 	add	r2,r2,r3
   32768:	e0be6115 	stw	r2,-1660(fp)
   3276c:	e0fe5f17 	ldw	r3,-1668(fp)
   32770:	e0bee317 	ldw	r2,-1140(fp)
   32774:	1885803a 	cmpltu	r2,r3,r2
   32778:	10803fcc 	andi	r2,r2,255
   3277c:	10000626 	beq	r2,zero,32798 <secp256k1_scalar_sqr_512+0x3528>
   32780:	e0bee217 	ldw	r2,-1144(fp)
   32784:	1005003a 	cmpeq	r2,r2,zero
   32788:	10803fcc 	andi	r2,r2,255
   3278c:	10000226 	beq	r2,zero,32798 <secp256k1_scalar_sqr_512+0x3528>
   32790:	00800044 	movi	r2,1
   32794:	00000106 	br	3279c <secp256k1_scalar_sqr_512+0x352c>
   32798:	0005883a 	mov	r2,zero
   3279c:	10001126 	beq	r2,zero,327e4 <secp256k1_scalar_sqr_512+0x3574>
   327a0:	e0be6117 	ldw	r2,-1660(fp)
   327a4:	1005003a 	cmpeq	r2,r2,zero
   327a8:	10803fcc 	andi	r2,r2,255
   327ac:	10000d26 	beq	r2,zero,327e4 <secp256k1_scalar_sqr_512+0x3574>
   327b0:	d0a01617 	ldw	r2,-32680(gp)
   327b4:	10c00317 	ldw	r3,12(r2)
   327b8:	008001b4 	movhi	r2,6
   327bc:	10b08704 	addi	r2,r2,-15844
   327c0:	d8800015 	stw	r2,0(sp)
   327c4:	01c09984 	movi	r7,614
   327c8:	018001b4 	movhi	r6,6
   327cc:	31af9204 	addi	r6,r6,-16824
   327d0:	014001b4 	movhi	r5,6
   327d4:	296b3804 	addi	r5,r5,-21280
   327d8:	1809883a 	mov	r4,r3
   327dc:	00452600 	call	45260 <fprintf>
   327e0:	00450340 	call	45034 <abort>
   327e4:	e0fe6017 	ldw	r3,-1664(fp)
   327e8:	e0bee217 	ldw	r2,-1144(fp)
   327ec:	1885883a 	add	r2,r3,r2
   327f0:	e0be6015 	stw	r2,-1664(fp)
   327f4:	e0fe6017 	ldw	r3,-1664(fp)
   327f8:	e0bee217 	ldw	r2,-1144(fp)
   327fc:	1880022e 	bgeu	r3,r2,32808 <secp256k1_scalar_sqr_512+0x3598>
   32800:	00c00044 	movi	r3,1
   32804:	00000106 	br	3280c <secp256k1_scalar_sqr_512+0x359c>
   32808:	0007883a 	mov	r3,zero
   3280c:	e0be6117 	ldw	r2,-1660(fp)
   32810:	10c5883a 	add	r2,r2,r3
   32814:	e0be6115 	stw	r2,-1660(fp)
   32818:	e0fe6017 	ldw	r3,-1664(fp)
   3281c:	e0bee217 	ldw	r2,-1144(fp)
   32820:	1885803a 	cmpltu	r2,r3,r2
   32824:	10803fcc 	andi	r2,r2,255
   32828:	10001126 	beq	r2,zero,32870 <secp256k1_scalar_sqr_512+0x3600>
   3282c:	e0be6117 	ldw	r2,-1660(fp)
   32830:	1005003a 	cmpeq	r2,r2,zero
   32834:	10803fcc 	andi	r2,r2,255
   32838:	10000d26 	beq	r2,zero,32870 <secp256k1_scalar_sqr_512+0x3600>
   3283c:	d0a01617 	ldw	r2,-32680(gp)
   32840:	10c00317 	ldw	r3,12(r2)
   32844:	008001b4 	movhi	r2,6
   32848:	10b09704 	addi	r2,r2,-15780
   3284c:	d8800015 	stw	r2,0(sp)
   32850:	01c09984 	movi	r7,614
   32854:	018001b4 	movhi	r6,6
   32858:	31af9204 	addi	r6,r6,-16824
   3285c:	014001b4 	movhi	r5,6
   32860:	296b3804 	addi	r5,r5,-21280
   32864:	1809883a 	mov	r4,r3
   32868:	00452600 	call	45260 <fprintf>
   3286c:	00450340 	call	45034 <abort>
    muladd(a->d[4], a->d[4]);
   32870:	e0bf2b17 	ldw	r2,-852(fp)
   32874:	10800417 	ldw	r2,16(r2)
   32878:	e0bfaa15 	stw	r2,-344(fp)
   3287c:	e03fab15 	stw	zero,-340(fp)
   32880:	e0bf2b17 	ldw	r2,-852(fp)
   32884:	10800417 	ldw	r2,16(r2)
   32888:	e0bfac15 	stw	r2,-336(fp)
   3288c:	e03fad15 	stw	zero,-332(fp)
   32890:	e1bfac17 	ldw	r6,-336(fp)
   32894:	e1ffad17 	ldw	r7,-332(fp)
   32898:	e13faa17 	ldw	r4,-344(fp)
   3289c:	e17fab17 	ldw	r5,-340(fp)
   328a0:	00429400 	call	42940 <__muldi3>
   328a4:	1009883a 	mov	r4,r2
   328a8:	180b883a 	mov	r5,r3
   328ac:	e13ee415 	stw	r4,-1136(fp)
   328b0:	e17ee515 	stw	r5,-1132(fp)
   328b4:	e0bee517 	ldw	r2,-1132(fp)
   328b8:	1004d83a 	srl	r2,r2,zero
   328bc:	e0bfae15 	stw	r2,-328(fp)
   328c0:	e03faf15 	stw	zero,-324(fp)
   328c4:	e0bfae17 	ldw	r2,-328(fp)
   328c8:	e0bee615 	stw	r2,-1128(fp)
   328cc:	e0bee417 	ldw	r2,-1136(fp)
   328d0:	e0bee715 	stw	r2,-1124(fp)
   328d4:	e0fe5f17 	ldw	r3,-1668(fp)
   328d8:	e0bee717 	ldw	r2,-1124(fp)
   328dc:	1885883a 	add	r2,r3,r2
   328e0:	e0be5f15 	stw	r2,-1668(fp)
   328e4:	e0fe5f17 	ldw	r3,-1668(fp)
   328e8:	e0bee717 	ldw	r2,-1124(fp)
   328ec:	1880022e 	bgeu	r3,r2,328f8 <secp256k1_scalar_sqr_512+0x3688>
   328f0:	00c00044 	movi	r3,1
   328f4:	00000106 	br	328fc <secp256k1_scalar_sqr_512+0x368c>
   328f8:	0007883a 	mov	r3,zero
   328fc:	e0bee617 	ldw	r2,-1128(fp)
   32900:	10c5883a 	add	r2,r2,r3
   32904:	e0bee615 	stw	r2,-1128(fp)
   32908:	e0fe6017 	ldw	r3,-1664(fp)
   3290c:	e0bee617 	ldw	r2,-1128(fp)
   32910:	1885883a 	add	r2,r3,r2
   32914:	e0be6015 	stw	r2,-1664(fp)
   32918:	e0fe6017 	ldw	r3,-1664(fp)
   3291c:	e0bee617 	ldw	r2,-1128(fp)
   32920:	1880022e 	bgeu	r3,r2,3292c <secp256k1_scalar_sqr_512+0x36bc>
   32924:	00c00044 	movi	r3,1
   32928:	00000106 	br	32930 <secp256k1_scalar_sqr_512+0x36c0>
   3292c:	0007883a 	mov	r3,zero
   32930:	e0be6117 	ldw	r2,-1660(fp)
   32934:	10c5883a 	add	r2,r2,r3
   32938:	e0be6115 	stw	r2,-1660(fp)
   3293c:	e0fe6017 	ldw	r3,-1664(fp)
   32940:	e0bee617 	ldw	r2,-1128(fp)
   32944:	1885803a 	cmpltu	r2,r3,r2
   32948:	10803fcc 	andi	r2,r2,255
   3294c:	10001126 	beq	r2,zero,32994 <secp256k1_scalar_sqr_512+0x3724>
   32950:	e0be6117 	ldw	r2,-1660(fp)
   32954:	1005003a 	cmpeq	r2,r2,zero
   32958:	10803fcc 	andi	r2,r2,255
   3295c:	10000d26 	beq	r2,zero,32994 <secp256k1_scalar_sqr_512+0x3724>
   32960:	d0a01617 	ldw	r2,-32680(gp)
   32964:	10c00317 	ldw	r3,12(r2)
   32968:	008001b4 	movhi	r2,6
   3296c:	10b02604 	addi	r2,r2,-16232
   32970:	d8800015 	stw	r2,0(sp)
   32974:	01c099c4 	movi	r7,615
   32978:	018001b4 	movhi	r6,6
   3297c:	31af9204 	addi	r6,r6,-16824
   32980:	014001b4 	movhi	r5,6
   32984:	296b3804 	addi	r5,r5,-21280
   32988:	1809883a 	mov	r4,r3
   3298c:	00452600 	call	45260 <fprintf>
   32990:	00450340 	call	45034 <abort>
    extract(l[8]);
   32994:	e0bf2a17 	ldw	r2,-856(fp)
   32998:	10c00804 	addi	r3,r2,32
   3299c:	e0be5f17 	ldw	r2,-1668(fp)
   329a0:	18800015 	stw	r2,0(r3)
   329a4:	e0be6017 	ldw	r2,-1664(fp)
   329a8:	e0be5f15 	stw	r2,-1668(fp)
   329ac:	e0be6117 	ldw	r2,-1660(fp)
   329b0:	e0be6015 	stw	r2,-1664(fp)
   329b4:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[2], a->d[7]);
   329b8:	e0bf2b17 	ldw	r2,-852(fp)
   329bc:	10800217 	ldw	r2,8(r2)
   329c0:	e0bfb015 	stw	r2,-320(fp)
   329c4:	e03fb115 	stw	zero,-316(fp)
   329c8:	e0bf2b17 	ldw	r2,-852(fp)
   329cc:	10800717 	ldw	r2,28(r2)
   329d0:	e0bfb215 	stw	r2,-312(fp)
   329d4:	e03fb315 	stw	zero,-308(fp)
   329d8:	e1bfb217 	ldw	r6,-312(fp)
   329dc:	e1ffb317 	ldw	r7,-308(fp)
   329e0:	e13fb017 	ldw	r4,-320(fp)
   329e4:	e17fb117 	ldw	r5,-316(fp)
   329e8:	00429400 	call	42940 <__muldi3>
   329ec:	1009883a 	mov	r4,r2
   329f0:	180b883a 	mov	r5,r3
   329f4:	e13ee815 	stw	r4,-1120(fp)
   329f8:	e17ee915 	stw	r5,-1116(fp)
   329fc:	e0bee917 	ldw	r2,-1116(fp)
   32a00:	1004d83a 	srl	r2,r2,zero
   32a04:	e0bfb415 	stw	r2,-304(fp)
   32a08:	e03fb515 	stw	zero,-300(fp)
   32a0c:	e0bfb417 	ldw	r2,-304(fp)
   32a10:	e0beea15 	stw	r2,-1112(fp)
   32a14:	e0bee817 	ldw	r2,-1120(fp)
   32a18:	e0beeb15 	stw	r2,-1108(fp)
   32a1c:	e0feea17 	ldw	r3,-1112(fp)
   32a20:	e0beea17 	ldw	r2,-1112(fp)
   32a24:	1885883a 	add	r2,r3,r2
   32a28:	e0beec15 	stw	r2,-1104(fp)
   32a2c:	e0feec17 	ldw	r3,-1104(fp)
   32a30:	e0beea17 	ldw	r2,-1112(fp)
   32a34:	1880022e 	bgeu	r3,r2,32a40 <secp256k1_scalar_sqr_512+0x37d0>
   32a38:	00c00044 	movi	r3,1
   32a3c:	00000106 	br	32a44 <secp256k1_scalar_sqr_512+0x37d4>
   32a40:	0007883a 	mov	r3,zero
   32a44:	e0be6117 	ldw	r2,-1660(fp)
   32a48:	10c5883a 	add	r2,r2,r3
   32a4c:	e0be6115 	stw	r2,-1660(fp)
   32a50:	e0feec17 	ldw	r3,-1104(fp)
   32a54:	e0beea17 	ldw	r2,-1112(fp)
   32a58:	1885803a 	cmpltu	r2,r3,r2
   32a5c:	10803fcc 	andi	r2,r2,255
   32a60:	10001126 	beq	r2,zero,32aa8 <secp256k1_scalar_sqr_512+0x3838>
   32a64:	e0be6117 	ldw	r2,-1660(fp)
   32a68:	1005003a 	cmpeq	r2,r2,zero
   32a6c:	10803fcc 	andi	r2,r2,255
   32a70:	10000d26 	beq	r2,zero,32aa8 <secp256k1_scalar_sqr_512+0x3838>
   32a74:	d0a01617 	ldw	r2,-32680(gp)
   32a78:	10c00317 	ldw	r3,12(r2)
   32a7c:	008001b4 	movhi	r2,6
   32a80:	10b07b04 	addi	r2,r2,-15892
   32a84:	d8800015 	stw	r2,0(sp)
   32a88:	01c09a44 	movi	r7,617
   32a8c:	018001b4 	movhi	r6,6
   32a90:	31af9204 	addi	r6,r6,-16824
   32a94:	014001b4 	movhi	r5,6
   32a98:	296b3804 	addi	r5,r5,-21280
   32a9c:	1809883a 	mov	r4,r3
   32aa0:	00452600 	call	45260 <fprintf>
   32aa4:	00450340 	call	45034 <abort>
   32aa8:	e0feeb17 	ldw	r3,-1108(fp)
   32aac:	e0beeb17 	ldw	r2,-1108(fp)
   32ab0:	1885883a 	add	r2,r3,r2
   32ab4:	e0beed15 	stw	r2,-1100(fp)
   32ab8:	e0feed17 	ldw	r3,-1100(fp)
   32abc:	e0beeb17 	ldw	r2,-1108(fp)
   32ac0:	1880022e 	bgeu	r3,r2,32acc <secp256k1_scalar_sqr_512+0x385c>
   32ac4:	00c00044 	movi	r3,1
   32ac8:	00000106 	br	32ad0 <secp256k1_scalar_sqr_512+0x3860>
   32acc:	0007883a 	mov	r3,zero
   32ad0:	e0beec17 	ldw	r2,-1104(fp)
   32ad4:	10c5883a 	add	r2,r2,r3
   32ad8:	e0beec15 	stw	r2,-1104(fp)
   32adc:	e0fe5f17 	ldw	r3,-1668(fp)
   32ae0:	e0beed17 	ldw	r2,-1100(fp)
   32ae4:	1885883a 	add	r2,r3,r2
   32ae8:	e0be5f15 	stw	r2,-1668(fp)
   32aec:	e0fe5f17 	ldw	r3,-1668(fp)
   32af0:	e0beed17 	ldw	r2,-1100(fp)
   32af4:	1880022e 	bgeu	r3,r2,32b00 <secp256k1_scalar_sqr_512+0x3890>
   32af8:	00c00044 	movi	r3,1
   32afc:	00000106 	br	32b04 <secp256k1_scalar_sqr_512+0x3894>
   32b00:	0007883a 	mov	r3,zero
   32b04:	e0beec17 	ldw	r2,-1104(fp)
   32b08:	10c5883a 	add	r2,r2,r3
   32b0c:	e0beec15 	stw	r2,-1104(fp)
   32b10:	e0fe5f17 	ldw	r3,-1668(fp)
   32b14:	e0beed17 	ldw	r2,-1100(fp)
   32b18:	1885803a 	cmpltu	r2,r3,r2
   32b1c:	1007883a 	mov	r3,r2
   32b20:	e0beec17 	ldw	r2,-1104(fp)
   32b24:	1005003a 	cmpeq	r2,r2,zero
   32b28:	1884703a 	and	r2,r3,r2
   32b2c:	10c03fcc 	andi	r3,r2,255
   32b30:	e0be6117 	ldw	r2,-1660(fp)
   32b34:	10c5883a 	add	r2,r2,r3
   32b38:	e0be6115 	stw	r2,-1660(fp)
   32b3c:	e0fe5f17 	ldw	r3,-1668(fp)
   32b40:	e0beed17 	ldw	r2,-1100(fp)
   32b44:	1885803a 	cmpltu	r2,r3,r2
   32b48:	10803fcc 	andi	r2,r2,255
   32b4c:	10000626 	beq	r2,zero,32b68 <secp256k1_scalar_sqr_512+0x38f8>
   32b50:	e0beec17 	ldw	r2,-1104(fp)
   32b54:	1005003a 	cmpeq	r2,r2,zero
   32b58:	10803fcc 	andi	r2,r2,255
   32b5c:	10000226 	beq	r2,zero,32b68 <secp256k1_scalar_sqr_512+0x38f8>
   32b60:	00800044 	movi	r2,1
   32b64:	00000106 	br	32b6c <secp256k1_scalar_sqr_512+0x38fc>
   32b68:	0005883a 	mov	r2,zero
   32b6c:	10001126 	beq	r2,zero,32bb4 <secp256k1_scalar_sqr_512+0x3944>
   32b70:	e0be6117 	ldw	r2,-1660(fp)
   32b74:	1005003a 	cmpeq	r2,r2,zero
   32b78:	10803fcc 	andi	r2,r2,255
   32b7c:	10000d26 	beq	r2,zero,32bb4 <secp256k1_scalar_sqr_512+0x3944>
   32b80:	d0a01617 	ldw	r2,-32680(gp)
   32b84:	10c00317 	ldw	r3,12(r2)
   32b88:	008001b4 	movhi	r2,6
   32b8c:	10b08704 	addi	r2,r2,-15844
   32b90:	d8800015 	stw	r2,0(sp)
   32b94:	01c09a44 	movi	r7,617
   32b98:	018001b4 	movhi	r6,6
   32b9c:	31af9204 	addi	r6,r6,-16824
   32ba0:	014001b4 	movhi	r5,6
   32ba4:	296b3804 	addi	r5,r5,-21280
   32ba8:	1809883a 	mov	r4,r3
   32bac:	00452600 	call	45260 <fprintf>
   32bb0:	00450340 	call	45034 <abort>
   32bb4:	e0fe6017 	ldw	r3,-1664(fp)
   32bb8:	e0beec17 	ldw	r2,-1104(fp)
   32bbc:	1885883a 	add	r2,r3,r2
   32bc0:	e0be6015 	stw	r2,-1664(fp)
   32bc4:	e0fe6017 	ldw	r3,-1664(fp)
   32bc8:	e0beec17 	ldw	r2,-1104(fp)
   32bcc:	1880022e 	bgeu	r3,r2,32bd8 <secp256k1_scalar_sqr_512+0x3968>
   32bd0:	00c00044 	movi	r3,1
   32bd4:	00000106 	br	32bdc <secp256k1_scalar_sqr_512+0x396c>
   32bd8:	0007883a 	mov	r3,zero
   32bdc:	e0be6117 	ldw	r2,-1660(fp)
   32be0:	10c5883a 	add	r2,r2,r3
   32be4:	e0be6115 	stw	r2,-1660(fp)
   32be8:	e0fe6017 	ldw	r3,-1664(fp)
   32bec:	e0beec17 	ldw	r2,-1104(fp)
   32bf0:	1885803a 	cmpltu	r2,r3,r2
   32bf4:	10803fcc 	andi	r2,r2,255
   32bf8:	10001126 	beq	r2,zero,32c40 <secp256k1_scalar_sqr_512+0x39d0>
   32bfc:	e0be6117 	ldw	r2,-1660(fp)
   32c00:	1005003a 	cmpeq	r2,r2,zero
   32c04:	10803fcc 	andi	r2,r2,255
   32c08:	10000d26 	beq	r2,zero,32c40 <secp256k1_scalar_sqr_512+0x39d0>
   32c0c:	d0a01617 	ldw	r2,-32680(gp)
   32c10:	10c00317 	ldw	r3,12(r2)
   32c14:	008001b4 	movhi	r2,6
   32c18:	10b09704 	addi	r2,r2,-15780
   32c1c:	d8800015 	stw	r2,0(sp)
   32c20:	01c09a44 	movi	r7,617
   32c24:	018001b4 	movhi	r6,6
   32c28:	31af9204 	addi	r6,r6,-16824
   32c2c:	014001b4 	movhi	r5,6
   32c30:	296b3804 	addi	r5,r5,-21280
   32c34:	1809883a 	mov	r4,r3
   32c38:	00452600 	call	45260 <fprintf>
   32c3c:	00450340 	call	45034 <abort>
    muladd2(a->d[3], a->d[6]);
   32c40:	e0bf2b17 	ldw	r2,-852(fp)
   32c44:	10800317 	ldw	r2,12(r2)
   32c48:	e0bfb615 	stw	r2,-296(fp)
   32c4c:	e03fb715 	stw	zero,-292(fp)
   32c50:	e0bf2b17 	ldw	r2,-852(fp)
   32c54:	10800617 	ldw	r2,24(r2)
   32c58:	e0bfb815 	stw	r2,-288(fp)
   32c5c:	e03fb915 	stw	zero,-284(fp)
   32c60:	e1bfb817 	ldw	r6,-288(fp)
   32c64:	e1ffb917 	ldw	r7,-284(fp)
   32c68:	e13fb617 	ldw	r4,-296(fp)
   32c6c:	e17fb717 	ldw	r5,-292(fp)
   32c70:	00429400 	call	42940 <__muldi3>
   32c74:	1009883a 	mov	r4,r2
   32c78:	180b883a 	mov	r5,r3
   32c7c:	e13eee15 	stw	r4,-1096(fp)
   32c80:	e17eef15 	stw	r5,-1092(fp)
   32c84:	e0beef17 	ldw	r2,-1092(fp)
   32c88:	1004d83a 	srl	r2,r2,zero
   32c8c:	e0bfba15 	stw	r2,-280(fp)
   32c90:	e03fbb15 	stw	zero,-276(fp)
   32c94:	e0bfba17 	ldw	r2,-280(fp)
   32c98:	e0bef015 	stw	r2,-1088(fp)
   32c9c:	e0beee17 	ldw	r2,-1096(fp)
   32ca0:	e0bef115 	stw	r2,-1084(fp)
   32ca4:	e0fef017 	ldw	r3,-1088(fp)
   32ca8:	e0bef017 	ldw	r2,-1088(fp)
   32cac:	1885883a 	add	r2,r3,r2
   32cb0:	e0bef215 	stw	r2,-1080(fp)
   32cb4:	e0fef217 	ldw	r3,-1080(fp)
   32cb8:	e0bef017 	ldw	r2,-1088(fp)
   32cbc:	1880022e 	bgeu	r3,r2,32cc8 <secp256k1_scalar_sqr_512+0x3a58>
   32cc0:	00c00044 	movi	r3,1
   32cc4:	00000106 	br	32ccc <secp256k1_scalar_sqr_512+0x3a5c>
   32cc8:	0007883a 	mov	r3,zero
   32ccc:	e0be6117 	ldw	r2,-1660(fp)
   32cd0:	10c5883a 	add	r2,r2,r3
   32cd4:	e0be6115 	stw	r2,-1660(fp)
   32cd8:	e0fef217 	ldw	r3,-1080(fp)
   32cdc:	e0bef017 	ldw	r2,-1088(fp)
   32ce0:	1885803a 	cmpltu	r2,r3,r2
   32ce4:	10803fcc 	andi	r2,r2,255
   32ce8:	10001126 	beq	r2,zero,32d30 <secp256k1_scalar_sqr_512+0x3ac0>
   32cec:	e0be6117 	ldw	r2,-1660(fp)
   32cf0:	1005003a 	cmpeq	r2,r2,zero
   32cf4:	10803fcc 	andi	r2,r2,255
   32cf8:	10000d26 	beq	r2,zero,32d30 <secp256k1_scalar_sqr_512+0x3ac0>
   32cfc:	d0a01617 	ldw	r2,-32680(gp)
   32d00:	10c00317 	ldw	r3,12(r2)
   32d04:	008001b4 	movhi	r2,6
   32d08:	10b07b04 	addi	r2,r2,-15892
   32d0c:	d8800015 	stw	r2,0(sp)
   32d10:	01c09a84 	movi	r7,618
   32d14:	018001b4 	movhi	r6,6
   32d18:	31af9204 	addi	r6,r6,-16824
   32d1c:	014001b4 	movhi	r5,6
   32d20:	296b3804 	addi	r5,r5,-21280
   32d24:	1809883a 	mov	r4,r3
   32d28:	00452600 	call	45260 <fprintf>
   32d2c:	00450340 	call	45034 <abort>
   32d30:	e0fef117 	ldw	r3,-1084(fp)
   32d34:	e0bef117 	ldw	r2,-1084(fp)
   32d38:	1885883a 	add	r2,r3,r2
   32d3c:	e0bef315 	stw	r2,-1076(fp)
   32d40:	e0fef317 	ldw	r3,-1076(fp)
   32d44:	e0bef117 	ldw	r2,-1084(fp)
   32d48:	1880022e 	bgeu	r3,r2,32d54 <secp256k1_scalar_sqr_512+0x3ae4>
   32d4c:	00c00044 	movi	r3,1
   32d50:	00000106 	br	32d58 <secp256k1_scalar_sqr_512+0x3ae8>
   32d54:	0007883a 	mov	r3,zero
   32d58:	e0bef217 	ldw	r2,-1080(fp)
   32d5c:	10c5883a 	add	r2,r2,r3
   32d60:	e0bef215 	stw	r2,-1080(fp)
   32d64:	e0fe5f17 	ldw	r3,-1668(fp)
   32d68:	e0bef317 	ldw	r2,-1076(fp)
   32d6c:	1885883a 	add	r2,r3,r2
   32d70:	e0be5f15 	stw	r2,-1668(fp)
   32d74:	e0fe5f17 	ldw	r3,-1668(fp)
   32d78:	e0bef317 	ldw	r2,-1076(fp)
   32d7c:	1880022e 	bgeu	r3,r2,32d88 <secp256k1_scalar_sqr_512+0x3b18>
   32d80:	00c00044 	movi	r3,1
   32d84:	00000106 	br	32d8c <secp256k1_scalar_sqr_512+0x3b1c>
   32d88:	0007883a 	mov	r3,zero
   32d8c:	e0bef217 	ldw	r2,-1080(fp)
   32d90:	10c5883a 	add	r2,r2,r3
   32d94:	e0bef215 	stw	r2,-1080(fp)
   32d98:	e0fe5f17 	ldw	r3,-1668(fp)
   32d9c:	e0bef317 	ldw	r2,-1076(fp)
   32da0:	1885803a 	cmpltu	r2,r3,r2
   32da4:	1007883a 	mov	r3,r2
   32da8:	e0bef217 	ldw	r2,-1080(fp)
   32dac:	1005003a 	cmpeq	r2,r2,zero
   32db0:	1884703a 	and	r2,r3,r2
   32db4:	10c03fcc 	andi	r3,r2,255
   32db8:	e0be6117 	ldw	r2,-1660(fp)
   32dbc:	10c5883a 	add	r2,r2,r3
   32dc0:	e0be6115 	stw	r2,-1660(fp)
   32dc4:	e0fe5f17 	ldw	r3,-1668(fp)
   32dc8:	e0bef317 	ldw	r2,-1076(fp)
   32dcc:	1885803a 	cmpltu	r2,r3,r2
   32dd0:	10803fcc 	andi	r2,r2,255
   32dd4:	10000626 	beq	r2,zero,32df0 <secp256k1_scalar_sqr_512+0x3b80>
   32dd8:	e0bef217 	ldw	r2,-1080(fp)
   32ddc:	1005003a 	cmpeq	r2,r2,zero
   32de0:	10803fcc 	andi	r2,r2,255
   32de4:	10000226 	beq	r2,zero,32df0 <secp256k1_scalar_sqr_512+0x3b80>
   32de8:	00800044 	movi	r2,1
   32dec:	00000106 	br	32df4 <secp256k1_scalar_sqr_512+0x3b84>
   32df0:	0005883a 	mov	r2,zero
   32df4:	10001126 	beq	r2,zero,32e3c <secp256k1_scalar_sqr_512+0x3bcc>
   32df8:	e0be6117 	ldw	r2,-1660(fp)
   32dfc:	1005003a 	cmpeq	r2,r2,zero
   32e00:	10803fcc 	andi	r2,r2,255
   32e04:	10000d26 	beq	r2,zero,32e3c <secp256k1_scalar_sqr_512+0x3bcc>
   32e08:	d0a01617 	ldw	r2,-32680(gp)
   32e0c:	10c00317 	ldw	r3,12(r2)
   32e10:	008001b4 	movhi	r2,6
   32e14:	10b08704 	addi	r2,r2,-15844
   32e18:	d8800015 	stw	r2,0(sp)
   32e1c:	01c09a84 	movi	r7,618
   32e20:	018001b4 	movhi	r6,6
   32e24:	31af9204 	addi	r6,r6,-16824
   32e28:	014001b4 	movhi	r5,6
   32e2c:	296b3804 	addi	r5,r5,-21280
   32e30:	1809883a 	mov	r4,r3
   32e34:	00452600 	call	45260 <fprintf>
   32e38:	00450340 	call	45034 <abort>
   32e3c:	e0fe6017 	ldw	r3,-1664(fp)
   32e40:	e0bef217 	ldw	r2,-1080(fp)
   32e44:	1885883a 	add	r2,r3,r2
   32e48:	e0be6015 	stw	r2,-1664(fp)
   32e4c:	e0fe6017 	ldw	r3,-1664(fp)
   32e50:	e0bef217 	ldw	r2,-1080(fp)
   32e54:	1880022e 	bgeu	r3,r2,32e60 <secp256k1_scalar_sqr_512+0x3bf0>
   32e58:	00c00044 	movi	r3,1
   32e5c:	00000106 	br	32e64 <secp256k1_scalar_sqr_512+0x3bf4>
   32e60:	0007883a 	mov	r3,zero
   32e64:	e0be6117 	ldw	r2,-1660(fp)
   32e68:	10c5883a 	add	r2,r2,r3
   32e6c:	e0be6115 	stw	r2,-1660(fp)
   32e70:	e0fe6017 	ldw	r3,-1664(fp)
   32e74:	e0bef217 	ldw	r2,-1080(fp)
   32e78:	1885803a 	cmpltu	r2,r3,r2
   32e7c:	10803fcc 	andi	r2,r2,255
   32e80:	10001126 	beq	r2,zero,32ec8 <secp256k1_scalar_sqr_512+0x3c58>
   32e84:	e0be6117 	ldw	r2,-1660(fp)
   32e88:	1005003a 	cmpeq	r2,r2,zero
   32e8c:	10803fcc 	andi	r2,r2,255
   32e90:	10000d26 	beq	r2,zero,32ec8 <secp256k1_scalar_sqr_512+0x3c58>
   32e94:	d0a01617 	ldw	r2,-32680(gp)
   32e98:	10c00317 	ldw	r3,12(r2)
   32e9c:	008001b4 	movhi	r2,6
   32ea0:	10b09704 	addi	r2,r2,-15780
   32ea4:	d8800015 	stw	r2,0(sp)
   32ea8:	01c09a84 	movi	r7,618
   32eac:	018001b4 	movhi	r6,6
   32eb0:	31af9204 	addi	r6,r6,-16824
   32eb4:	014001b4 	movhi	r5,6
   32eb8:	296b3804 	addi	r5,r5,-21280
   32ebc:	1809883a 	mov	r4,r3
   32ec0:	00452600 	call	45260 <fprintf>
   32ec4:	00450340 	call	45034 <abort>
    muladd2(a->d[4], a->d[5]);
   32ec8:	e0bf2b17 	ldw	r2,-852(fp)
   32ecc:	10800417 	ldw	r2,16(r2)
   32ed0:	e0bfbc15 	stw	r2,-272(fp)
   32ed4:	e03fbd15 	stw	zero,-268(fp)
   32ed8:	e0bf2b17 	ldw	r2,-852(fp)
   32edc:	10800517 	ldw	r2,20(r2)
   32ee0:	e0bfbe15 	stw	r2,-264(fp)
   32ee4:	e03fbf15 	stw	zero,-260(fp)
   32ee8:	e1bfbe17 	ldw	r6,-264(fp)
   32eec:	e1ffbf17 	ldw	r7,-260(fp)
   32ef0:	e13fbc17 	ldw	r4,-272(fp)
   32ef4:	e17fbd17 	ldw	r5,-268(fp)
   32ef8:	00429400 	call	42940 <__muldi3>
   32efc:	1009883a 	mov	r4,r2
   32f00:	180b883a 	mov	r5,r3
   32f04:	e13ef415 	stw	r4,-1072(fp)
   32f08:	e17ef515 	stw	r5,-1068(fp)
   32f0c:	e0bef517 	ldw	r2,-1068(fp)
   32f10:	1004d83a 	srl	r2,r2,zero
   32f14:	e0bfc015 	stw	r2,-256(fp)
   32f18:	e03fc115 	stw	zero,-252(fp)
   32f1c:	e0bfc017 	ldw	r2,-256(fp)
   32f20:	e0bef615 	stw	r2,-1064(fp)
   32f24:	e0bef417 	ldw	r2,-1072(fp)
   32f28:	e0bef715 	stw	r2,-1060(fp)
   32f2c:	e0fef617 	ldw	r3,-1064(fp)
   32f30:	e0bef617 	ldw	r2,-1064(fp)
   32f34:	1885883a 	add	r2,r3,r2
   32f38:	e0bef815 	stw	r2,-1056(fp)
   32f3c:	e0fef817 	ldw	r3,-1056(fp)
   32f40:	e0bef617 	ldw	r2,-1064(fp)
   32f44:	1880022e 	bgeu	r3,r2,32f50 <secp256k1_scalar_sqr_512+0x3ce0>
   32f48:	00c00044 	movi	r3,1
   32f4c:	00000106 	br	32f54 <secp256k1_scalar_sqr_512+0x3ce4>
   32f50:	0007883a 	mov	r3,zero
   32f54:	e0be6117 	ldw	r2,-1660(fp)
   32f58:	10c5883a 	add	r2,r2,r3
   32f5c:	e0be6115 	stw	r2,-1660(fp)
   32f60:	e0fef817 	ldw	r3,-1056(fp)
   32f64:	e0bef617 	ldw	r2,-1064(fp)
   32f68:	1885803a 	cmpltu	r2,r3,r2
   32f6c:	10803fcc 	andi	r2,r2,255
   32f70:	10001126 	beq	r2,zero,32fb8 <secp256k1_scalar_sqr_512+0x3d48>
   32f74:	e0be6117 	ldw	r2,-1660(fp)
   32f78:	1005003a 	cmpeq	r2,r2,zero
   32f7c:	10803fcc 	andi	r2,r2,255
   32f80:	10000d26 	beq	r2,zero,32fb8 <secp256k1_scalar_sqr_512+0x3d48>
   32f84:	d0a01617 	ldw	r2,-32680(gp)
   32f88:	10c00317 	ldw	r3,12(r2)
   32f8c:	008001b4 	movhi	r2,6
   32f90:	10b07b04 	addi	r2,r2,-15892
   32f94:	d8800015 	stw	r2,0(sp)
   32f98:	01c09ac4 	movi	r7,619
   32f9c:	018001b4 	movhi	r6,6
   32fa0:	31af9204 	addi	r6,r6,-16824
   32fa4:	014001b4 	movhi	r5,6
   32fa8:	296b3804 	addi	r5,r5,-21280
   32fac:	1809883a 	mov	r4,r3
   32fb0:	00452600 	call	45260 <fprintf>
   32fb4:	00450340 	call	45034 <abort>
   32fb8:	e0fef717 	ldw	r3,-1060(fp)
   32fbc:	e0bef717 	ldw	r2,-1060(fp)
   32fc0:	1885883a 	add	r2,r3,r2
   32fc4:	e0bef915 	stw	r2,-1052(fp)
   32fc8:	e0fef917 	ldw	r3,-1052(fp)
   32fcc:	e0bef717 	ldw	r2,-1060(fp)
   32fd0:	1880022e 	bgeu	r3,r2,32fdc <secp256k1_scalar_sqr_512+0x3d6c>
   32fd4:	00c00044 	movi	r3,1
   32fd8:	00000106 	br	32fe0 <secp256k1_scalar_sqr_512+0x3d70>
   32fdc:	0007883a 	mov	r3,zero
   32fe0:	e0bef817 	ldw	r2,-1056(fp)
   32fe4:	10c5883a 	add	r2,r2,r3
   32fe8:	e0bef815 	stw	r2,-1056(fp)
   32fec:	e0fe5f17 	ldw	r3,-1668(fp)
   32ff0:	e0bef917 	ldw	r2,-1052(fp)
   32ff4:	1885883a 	add	r2,r3,r2
   32ff8:	e0be5f15 	stw	r2,-1668(fp)
   32ffc:	e0fe5f17 	ldw	r3,-1668(fp)
   33000:	e0bef917 	ldw	r2,-1052(fp)
   33004:	1880022e 	bgeu	r3,r2,33010 <secp256k1_scalar_sqr_512+0x3da0>
   33008:	00c00044 	movi	r3,1
   3300c:	00000106 	br	33014 <secp256k1_scalar_sqr_512+0x3da4>
   33010:	0007883a 	mov	r3,zero
   33014:	e0bef817 	ldw	r2,-1056(fp)
   33018:	10c5883a 	add	r2,r2,r3
   3301c:	e0bef815 	stw	r2,-1056(fp)
   33020:	e0fe5f17 	ldw	r3,-1668(fp)
   33024:	e0bef917 	ldw	r2,-1052(fp)
   33028:	1885803a 	cmpltu	r2,r3,r2
   3302c:	1007883a 	mov	r3,r2
   33030:	e0bef817 	ldw	r2,-1056(fp)
   33034:	1005003a 	cmpeq	r2,r2,zero
   33038:	1884703a 	and	r2,r3,r2
   3303c:	10c03fcc 	andi	r3,r2,255
   33040:	e0be6117 	ldw	r2,-1660(fp)
   33044:	10c5883a 	add	r2,r2,r3
   33048:	e0be6115 	stw	r2,-1660(fp)
   3304c:	e0fe5f17 	ldw	r3,-1668(fp)
   33050:	e0bef917 	ldw	r2,-1052(fp)
   33054:	1885803a 	cmpltu	r2,r3,r2
   33058:	10803fcc 	andi	r2,r2,255
   3305c:	10000626 	beq	r2,zero,33078 <secp256k1_scalar_sqr_512+0x3e08>
   33060:	e0bef817 	ldw	r2,-1056(fp)
   33064:	1005003a 	cmpeq	r2,r2,zero
   33068:	10803fcc 	andi	r2,r2,255
   3306c:	10000226 	beq	r2,zero,33078 <secp256k1_scalar_sqr_512+0x3e08>
   33070:	00800044 	movi	r2,1
   33074:	00000106 	br	3307c <secp256k1_scalar_sqr_512+0x3e0c>
   33078:	0005883a 	mov	r2,zero
   3307c:	10001126 	beq	r2,zero,330c4 <secp256k1_scalar_sqr_512+0x3e54>
   33080:	e0be6117 	ldw	r2,-1660(fp)
   33084:	1005003a 	cmpeq	r2,r2,zero
   33088:	10803fcc 	andi	r2,r2,255
   3308c:	10000d26 	beq	r2,zero,330c4 <secp256k1_scalar_sqr_512+0x3e54>
   33090:	d0a01617 	ldw	r2,-32680(gp)
   33094:	10c00317 	ldw	r3,12(r2)
   33098:	008001b4 	movhi	r2,6
   3309c:	10b08704 	addi	r2,r2,-15844
   330a0:	d8800015 	stw	r2,0(sp)
   330a4:	01c09ac4 	movi	r7,619
   330a8:	018001b4 	movhi	r6,6
   330ac:	31af9204 	addi	r6,r6,-16824
   330b0:	014001b4 	movhi	r5,6
   330b4:	296b3804 	addi	r5,r5,-21280
   330b8:	1809883a 	mov	r4,r3
   330bc:	00452600 	call	45260 <fprintf>
   330c0:	00450340 	call	45034 <abort>
   330c4:	e0fe6017 	ldw	r3,-1664(fp)
   330c8:	e0bef817 	ldw	r2,-1056(fp)
   330cc:	1885883a 	add	r2,r3,r2
   330d0:	e0be6015 	stw	r2,-1664(fp)
   330d4:	e0fe6017 	ldw	r3,-1664(fp)
   330d8:	e0bef817 	ldw	r2,-1056(fp)
   330dc:	1880022e 	bgeu	r3,r2,330e8 <secp256k1_scalar_sqr_512+0x3e78>
   330e0:	00c00044 	movi	r3,1
   330e4:	00000106 	br	330ec <secp256k1_scalar_sqr_512+0x3e7c>
   330e8:	0007883a 	mov	r3,zero
   330ec:	e0be6117 	ldw	r2,-1660(fp)
   330f0:	10c5883a 	add	r2,r2,r3
   330f4:	e0be6115 	stw	r2,-1660(fp)
   330f8:	e0fe6017 	ldw	r3,-1664(fp)
   330fc:	e0bef817 	ldw	r2,-1056(fp)
   33100:	1885803a 	cmpltu	r2,r3,r2
   33104:	10803fcc 	andi	r2,r2,255
   33108:	10001126 	beq	r2,zero,33150 <secp256k1_scalar_sqr_512+0x3ee0>
   3310c:	e0be6117 	ldw	r2,-1660(fp)
   33110:	1005003a 	cmpeq	r2,r2,zero
   33114:	10803fcc 	andi	r2,r2,255
   33118:	10000d26 	beq	r2,zero,33150 <secp256k1_scalar_sqr_512+0x3ee0>
   3311c:	d0a01617 	ldw	r2,-32680(gp)
   33120:	10c00317 	ldw	r3,12(r2)
   33124:	008001b4 	movhi	r2,6
   33128:	10b09704 	addi	r2,r2,-15780
   3312c:	d8800015 	stw	r2,0(sp)
   33130:	01c09ac4 	movi	r7,619
   33134:	018001b4 	movhi	r6,6
   33138:	31af9204 	addi	r6,r6,-16824
   3313c:	014001b4 	movhi	r5,6
   33140:	296b3804 	addi	r5,r5,-21280
   33144:	1809883a 	mov	r4,r3
   33148:	00452600 	call	45260 <fprintf>
   3314c:	00450340 	call	45034 <abort>
    extract(l[9]);
   33150:	e0bf2a17 	ldw	r2,-856(fp)
   33154:	10c00904 	addi	r3,r2,36
   33158:	e0be5f17 	ldw	r2,-1668(fp)
   3315c:	18800015 	stw	r2,0(r3)
   33160:	e0be6017 	ldw	r2,-1664(fp)
   33164:	e0be5f15 	stw	r2,-1668(fp)
   33168:	e0be6117 	ldw	r2,-1660(fp)
   3316c:	e0be6015 	stw	r2,-1664(fp)
   33170:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[3], a->d[7]);
   33174:	e0bf2b17 	ldw	r2,-852(fp)
   33178:	10800317 	ldw	r2,12(r2)
   3317c:	e0bfc215 	stw	r2,-248(fp)
   33180:	e03fc315 	stw	zero,-244(fp)
   33184:	e0bf2b17 	ldw	r2,-852(fp)
   33188:	10800717 	ldw	r2,28(r2)
   3318c:	e0bfc415 	stw	r2,-240(fp)
   33190:	e03fc515 	stw	zero,-236(fp)
   33194:	e1bfc417 	ldw	r6,-240(fp)
   33198:	e1ffc517 	ldw	r7,-236(fp)
   3319c:	e13fc217 	ldw	r4,-248(fp)
   331a0:	e17fc317 	ldw	r5,-244(fp)
   331a4:	00429400 	call	42940 <__muldi3>
   331a8:	1009883a 	mov	r4,r2
   331ac:	180b883a 	mov	r5,r3
   331b0:	e13efa15 	stw	r4,-1048(fp)
   331b4:	e17efb15 	stw	r5,-1044(fp)
   331b8:	e0befb17 	ldw	r2,-1044(fp)
   331bc:	1004d83a 	srl	r2,r2,zero
   331c0:	e0bfc615 	stw	r2,-232(fp)
   331c4:	e03fc715 	stw	zero,-228(fp)
   331c8:	e0bfc617 	ldw	r2,-232(fp)
   331cc:	e0befc15 	stw	r2,-1040(fp)
   331d0:	e0befa17 	ldw	r2,-1048(fp)
   331d4:	e0befd15 	stw	r2,-1036(fp)
   331d8:	e0fefc17 	ldw	r3,-1040(fp)
   331dc:	e0befc17 	ldw	r2,-1040(fp)
   331e0:	1885883a 	add	r2,r3,r2
   331e4:	e0befe15 	stw	r2,-1032(fp)
   331e8:	e0fefe17 	ldw	r3,-1032(fp)
   331ec:	e0befc17 	ldw	r2,-1040(fp)
   331f0:	1880022e 	bgeu	r3,r2,331fc <secp256k1_scalar_sqr_512+0x3f8c>
   331f4:	00c00044 	movi	r3,1
   331f8:	00000106 	br	33200 <secp256k1_scalar_sqr_512+0x3f90>
   331fc:	0007883a 	mov	r3,zero
   33200:	e0be6117 	ldw	r2,-1660(fp)
   33204:	10c5883a 	add	r2,r2,r3
   33208:	e0be6115 	stw	r2,-1660(fp)
   3320c:	e0fefe17 	ldw	r3,-1032(fp)
   33210:	e0befc17 	ldw	r2,-1040(fp)
   33214:	1885803a 	cmpltu	r2,r3,r2
   33218:	10803fcc 	andi	r2,r2,255
   3321c:	10001126 	beq	r2,zero,33264 <secp256k1_scalar_sqr_512+0x3ff4>
   33220:	e0be6117 	ldw	r2,-1660(fp)
   33224:	1005003a 	cmpeq	r2,r2,zero
   33228:	10803fcc 	andi	r2,r2,255
   3322c:	10000d26 	beq	r2,zero,33264 <secp256k1_scalar_sqr_512+0x3ff4>
   33230:	d0a01617 	ldw	r2,-32680(gp)
   33234:	10c00317 	ldw	r3,12(r2)
   33238:	008001b4 	movhi	r2,6
   3323c:	10b07b04 	addi	r2,r2,-15892
   33240:	d8800015 	stw	r2,0(sp)
   33244:	01c09b44 	movi	r7,621
   33248:	018001b4 	movhi	r6,6
   3324c:	31af9204 	addi	r6,r6,-16824
   33250:	014001b4 	movhi	r5,6
   33254:	296b3804 	addi	r5,r5,-21280
   33258:	1809883a 	mov	r4,r3
   3325c:	00452600 	call	45260 <fprintf>
   33260:	00450340 	call	45034 <abort>
   33264:	e0fefd17 	ldw	r3,-1036(fp)
   33268:	e0befd17 	ldw	r2,-1036(fp)
   3326c:	1885883a 	add	r2,r3,r2
   33270:	e0beff15 	stw	r2,-1028(fp)
   33274:	e0feff17 	ldw	r3,-1028(fp)
   33278:	e0befd17 	ldw	r2,-1036(fp)
   3327c:	1880022e 	bgeu	r3,r2,33288 <secp256k1_scalar_sqr_512+0x4018>
   33280:	00c00044 	movi	r3,1
   33284:	00000106 	br	3328c <secp256k1_scalar_sqr_512+0x401c>
   33288:	0007883a 	mov	r3,zero
   3328c:	e0befe17 	ldw	r2,-1032(fp)
   33290:	10c5883a 	add	r2,r2,r3
   33294:	e0befe15 	stw	r2,-1032(fp)
   33298:	e0fe5f17 	ldw	r3,-1668(fp)
   3329c:	e0beff17 	ldw	r2,-1028(fp)
   332a0:	1885883a 	add	r2,r3,r2
   332a4:	e0be5f15 	stw	r2,-1668(fp)
   332a8:	e0fe5f17 	ldw	r3,-1668(fp)
   332ac:	e0beff17 	ldw	r2,-1028(fp)
   332b0:	1880022e 	bgeu	r3,r2,332bc <secp256k1_scalar_sqr_512+0x404c>
   332b4:	00c00044 	movi	r3,1
   332b8:	00000106 	br	332c0 <secp256k1_scalar_sqr_512+0x4050>
   332bc:	0007883a 	mov	r3,zero
   332c0:	e0befe17 	ldw	r2,-1032(fp)
   332c4:	10c5883a 	add	r2,r2,r3
   332c8:	e0befe15 	stw	r2,-1032(fp)
   332cc:	e0fe5f17 	ldw	r3,-1668(fp)
   332d0:	e0beff17 	ldw	r2,-1028(fp)
   332d4:	1885803a 	cmpltu	r2,r3,r2
   332d8:	1007883a 	mov	r3,r2
   332dc:	e0befe17 	ldw	r2,-1032(fp)
   332e0:	1005003a 	cmpeq	r2,r2,zero
   332e4:	1884703a 	and	r2,r3,r2
   332e8:	10c03fcc 	andi	r3,r2,255
   332ec:	e0be6117 	ldw	r2,-1660(fp)
   332f0:	10c5883a 	add	r2,r2,r3
   332f4:	e0be6115 	stw	r2,-1660(fp)
   332f8:	e0fe5f17 	ldw	r3,-1668(fp)
   332fc:	e0beff17 	ldw	r2,-1028(fp)
   33300:	1885803a 	cmpltu	r2,r3,r2
   33304:	10803fcc 	andi	r2,r2,255
   33308:	10000626 	beq	r2,zero,33324 <secp256k1_scalar_sqr_512+0x40b4>
   3330c:	e0befe17 	ldw	r2,-1032(fp)
   33310:	1005003a 	cmpeq	r2,r2,zero
   33314:	10803fcc 	andi	r2,r2,255
   33318:	10000226 	beq	r2,zero,33324 <secp256k1_scalar_sqr_512+0x40b4>
   3331c:	00800044 	movi	r2,1
   33320:	00000106 	br	33328 <secp256k1_scalar_sqr_512+0x40b8>
   33324:	0005883a 	mov	r2,zero
   33328:	10001126 	beq	r2,zero,33370 <secp256k1_scalar_sqr_512+0x4100>
   3332c:	e0be6117 	ldw	r2,-1660(fp)
   33330:	1005003a 	cmpeq	r2,r2,zero
   33334:	10803fcc 	andi	r2,r2,255
   33338:	10000d26 	beq	r2,zero,33370 <secp256k1_scalar_sqr_512+0x4100>
   3333c:	d0a01617 	ldw	r2,-32680(gp)
   33340:	10c00317 	ldw	r3,12(r2)
   33344:	008001b4 	movhi	r2,6
   33348:	10b08704 	addi	r2,r2,-15844
   3334c:	d8800015 	stw	r2,0(sp)
   33350:	01c09b44 	movi	r7,621
   33354:	018001b4 	movhi	r6,6
   33358:	31af9204 	addi	r6,r6,-16824
   3335c:	014001b4 	movhi	r5,6
   33360:	296b3804 	addi	r5,r5,-21280
   33364:	1809883a 	mov	r4,r3
   33368:	00452600 	call	45260 <fprintf>
   3336c:	00450340 	call	45034 <abort>
   33370:	e0fe6017 	ldw	r3,-1664(fp)
   33374:	e0befe17 	ldw	r2,-1032(fp)
   33378:	1885883a 	add	r2,r3,r2
   3337c:	e0be6015 	stw	r2,-1664(fp)
   33380:	e0fe6017 	ldw	r3,-1664(fp)
   33384:	e0befe17 	ldw	r2,-1032(fp)
   33388:	1880022e 	bgeu	r3,r2,33394 <secp256k1_scalar_sqr_512+0x4124>
   3338c:	00c00044 	movi	r3,1
   33390:	00000106 	br	33398 <secp256k1_scalar_sqr_512+0x4128>
   33394:	0007883a 	mov	r3,zero
   33398:	e0be6117 	ldw	r2,-1660(fp)
   3339c:	10c5883a 	add	r2,r2,r3
   333a0:	e0be6115 	stw	r2,-1660(fp)
   333a4:	e0fe6017 	ldw	r3,-1664(fp)
   333a8:	e0befe17 	ldw	r2,-1032(fp)
   333ac:	1885803a 	cmpltu	r2,r3,r2
   333b0:	10803fcc 	andi	r2,r2,255
   333b4:	10001126 	beq	r2,zero,333fc <secp256k1_scalar_sqr_512+0x418c>
   333b8:	e0be6117 	ldw	r2,-1660(fp)
   333bc:	1005003a 	cmpeq	r2,r2,zero
   333c0:	10803fcc 	andi	r2,r2,255
   333c4:	10000d26 	beq	r2,zero,333fc <secp256k1_scalar_sqr_512+0x418c>
   333c8:	d0a01617 	ldw	r2,-32680(gp)
   333cc:	10c00317 	ldw	r3,12(r2)
   333d0:	008001b4 	movhi	r2,6
   333d4:	10b09704 	addi	r2,r2,-15780
   333d8:	d8800015 	stw	r2,0(sp)
   333dc:	01c09b44 	movi	r7,621
   333e0:	018001b4 	movhi	r6,6
   333e4:	31af9204 	addi	r6,r6,-16824
   333e8:	014001b4 	movhi	r5,6
   333ec:	296b3804 	addi	r5,r5,-21280
   333f0:	1809883a 	mov	r4,r3
   333f4:	00452600 	call	45260 <fprintf>
   333f8:	00450340 	call	45034 <abort>
    muladd2(a->d[4], a->d[6]);
   333fc:	e0bf2b17 	ldw	r2,-852(fp)
   33400:	10800417 	ldw	r2,16(r2)
   33404:	e0bfc815 	stw	r2,-224(fp)
   33408:	e03fc915 	stw	zero,-220(fp)
   3340c:	e0bf2b17 	ldw	r2,-852(fp)
   33410:	10800617 	ldw	r2,24(r2)
   33414:	e0bfca15 	stw	r2,-216(fp)
   33418:	e03fcb15 	stw	zero,-212(fp)
   3341c:	e1bfca17 	ldw	r6,-216(fp)
   33420:	e1ffcb17 	ldw	r7,-212(fp)
   33424:	e13fc817 	ldw	r4,-224(fp)
   33428:	e17fc917 	ldw	r5,-220(fp)
   3342c:	00429400 	call	42940 <__muldi3>
   33430:	1009883a 	mov	r4,r2
   33434:	180b883a 	mov	r5,r3
   33438:	e13f0015 	stw	r4,-1024(fp)
   3343c:	e17f0115 	stw	r5,-1020(fp)
   33440:	e0bf0117 	ldw	r2,-1020(fp)
   33444:	1004d83a 	srl	r2,r2,zero
   33448:	e0bfcc15 	stw	r2,-208(fp)
   3344c:	e03fcd15 	stw	zero,-204(fp)
   33450:	e0bfcc17 	ldw	r2,-208(fp)
   33454:	e0bf0215 	stw	r2,-1016(fp)
   33458:	e0bf0017 	ldw	r2,-1024(fp)
   3345c:	e0bf0315 	stw	r2,-1012(fp)
   33460:	e0ff0217 	ldw	r3,-1016(fp)
   33464:	e0bf0217 	ldw	r2,-1016(fp)
   33468:	1885883a 	add	r2,r3,r2
   3346c:	e0bf0415 	stw	r2,-1008(fp)
   33470:	e0ff0417 	ldw	r3,-1008(fp)
   33474:	e0bf0217 	ldw	r2,-1016(fp)
   33478:	1880022e 	bgeu	r3,r2,33484 <secp256k1_scalar_sqr_512+0x4214>
   3347c:	00c00044 	movi	r3,1
   33480:	00000106 	br	33488 <secp256k1_scalar_sqr_512+0x4218>
   33484:	0007883a 	mov	r3,zero
   33488:	e0be6117 	ldw	r2,-1660(fp)
   3348c:	10c5883a 	add	r2,r2,r3
   33490:	e0be6115 	stw	r2,-1660(fp)
   33494:	e0ff0417 	ldw	r3,-1008(fp)
   33498:	e0bf0217 	ldw	r2,-1016(fp)
   3349c:	1885803a 	cmpltu	r2,r3,r2
   334a0:	10803fcc 	andi	r2,r2,255
   334a4:	10001126 	beq	r2,zero,334ec <secp256k1_scalar_sqr_512+0x427c>
   334a8:	e0be6117 	ldw	r2,-1660(fp)
   334ac:	1005003a 	cmpeq	r2,r2,zero
   334b0:	10803fcc 	andi	r2,r2,255
   334b4:	10000d26 	beq	r2,zero,334ec <secp256k1_scalar_sqr_512+0x427c>
   334b8:	d0a01617 	ldw	r2,-32680(gp)
   334bc:	10c00317 	ldw	r3,12(r2)
   334c0:	008001b4 	movhi	r2,6
   334c4:	10b07b04 	addi	r2,r2,-15892
   334c8:	d8800015 	stw	r2,0(sp)
   334cc:	01c09b84 	movi	r7,622
   334d0:	018001b4 	movhi	r6,6
   334d4:	31af9204 	addi	r6,r6,-16824
   334d8:	014001b4 	movhi	r5,6
   334dc:	296b3804 	addi	r5,r5,-21280
   334e0:	1809883a 	mov	r4,r3
   334e4:	00452600 	call	45260 <fprintf>
   334e8:	00450340 	call	45034 <abort>
   334ec:	e0ff0317 	ldw	r3,-1012(fp)
   334f0:	e0bf0317 	ldw	r2,-1012(fp)
   334f4:	1885883a 	add	r2,r3,r2
   334f8:	e0bf0515 	stw	r2,-1004(fp)
   334fc:	e0ff0517 	ldw	r3,-1004(fp)
   33500:	e0bf0317 	ldw	r2,-1012(fp)
   33504:	1880022e 	bgeu	r3,r2,33510 <secp256k1_scalar_sqr_512+0x42a0>
   33508:	00c00044 	movi	r3,1
   3350c:	00000106 	br	33514 <secp256k1_scalar_sqr_512+0x42a4>
   33510:	0007883a 	mov	r3,zero
   33514:	e0bf0417 	ldw	r2,-1008(fp)
   33518:	10c5883a 	add	r2,r2,r3
   3351c:	e0bf0415 	stw	r2,-1008(fp)
   33520:	e0fe5f17 	ldw	r3,-1668(fp)
   33524:	e0bf0517 	ldw	r2,-1004(fp)
   33528:	1885883a 	add	r2,r3,r2
   3352c:	e0be5f15 	stw	r2,-1668(fp)
   33530:	e0fe5f17 	ldw	r3,-1668(fp)
   33534:	e0bf0517 	ldw	r2,-1004(fp)
   33538:	1880022e 	bgeu	r3,r2,33544 <secp256k1_scalar_sqr_512+0x42d4>
   3353c:	00c00044 	movi	r3,1
   33540:	00000106 	br	33548 <secp256k1_scalar_sqr_512+0x42d8>
   33544:	0007883a 	mov	r3,zero
   33548:	e0bf0417 	ldw	r2,-1008(fp)
   3354c:	10c5883a 	add	r2,r2,r3
   33550:	e0bf0415 	stw	r2,-1008(fp)
   33554:	e0fe5f17 	ldw	r3,-1668(fp)
   33558:	e0bf0517 	ldw	r2,-1004(fp)
   3355c:	1885803a 	cmpltu	r2,r3,r2
   33560:	1007883a 	mov	r3,r2
   33564:	e0bf0417 	ldw	r2,-1008(fp)
   33568:	1005003a 	cmpeq	r2,r2,zero
   3356c:	1884703a 	and	r2,r3,r2
   33570:	10c03fcc 	andi	r3,r2,255
   33574:	e0be6117 	ldw	r2,-1660(fp)
   33578:	10c5883a 	add	r2,r2,r3
   3357c:	e0be6115 	stw	r2,-1660(fp)
   33580:	e0fe5f17 	ldw	r3,-1668(fp)
   33584:	e0bf0517 	ldw	r2,-1004(fp)
   33588:	1885803a 	cmpltu	r2,r3,r2
   3358c:	10803fcc 	andi	r2,r2,255
   33590:	10000626 	beq	r2,zero,335ac <secp256k1_scalar_sqr_512+0x433c>
   33594:	e0bf0417 	ldw	r2,-1008(fp)
   33598:	1005003a 	cmpeq	r2,r2,zero
   3359c:	10803fcc 	andi	r2,r2,255
   335a0:	10000226 	beq	r2,zero,335ac <secp256k1_scalar_sqr_512+0x433c>
   335a4:	00800044 	movi	r2,1
   335a8:	00000106 	br	335b0 <secp256k1_scalar_sqr_512+0x4340>
   335ac:	0005883a 	mov	r2,zero
   335b0:	10001126 	beq	r2,zero,335f8 <secp256k1_scalar_sqr_512+0x4388>
   335b4:	e0be6117 	ldw	r2,-1660(fp)
   335b8:	1005003a 	cmpeq	r2,r2,zero
   335bc:	10803fcc 	andi	r2,r2,255
   335c0:	10000d26 	beq	r2,zero,335f8 <secp256k1_scalar_sqr_512+0x4388>
   335c4:	d0a01617 	ldw	r2,-32680(gp)
   335c8:	10c00317 	ldw	r3,12(r2)
   335cc:	008001b4 	movhi	r2,6
   335d0:	10b08704 	addi	r2,r2,-15844
   335d4:	d8800015 	stw	r2,0(sp)
   335d8:	01c09b84 	movi	r7,622
   335dc:	018001b4 	movhi	r6,6
   335e0:	31af9204 	addi	r6,r6,-16824
   335e4:	014001b4 	movhi	r5,6
   335e8:	296b3804 	addi	r5,r5,-21280
   335ec:	1809883a 	mov	r4,r3
   335f0:	00452600 	call	45260 <fprintf>
   335f4:	00450340 	call	45034 <abort>
   335f8:	e0fe6017 	ldw	r3,-1664(fp)
   335fc:	e0bf0417 	ldw	r2,-1008(fp)
   33600:	1885883a 	add	r2,r3,r2
   33604:	e0be6015 	stw	r2,-1664(fp)
   33608:	e0fe6017 	ldw	r3,-1664(fp)
   3360c:	e0bf0417 	ldw	r2,-1008(fp)
   33610:	1880022e 	bgeu	r3,r2,3361c <secp256k1_scalar_sqr_512+0x43ac>
   33614:	00c00044 	movi	r3,1
   33618:	00000106 	br	33620 <secp256k1_scalar_sqr_512+0x43b0>
   3361c:	0007883a 	mov	r3,zero
   33620:	e0be6117 	ldw	r2,-1660(fp)
   33624:	10c5883a 	add	r2,r2,r3
   33628:	e0be6115 	stw	r2,-1660(fp)
   3362c:	e0fe6017 	ldw	r3,-1664(fp)
   33630:	e0bf0417 	ldw	r2,-1008(fp)
   33634:	1885803a 	cmpltu	r2,r3,r2
   33638:	10803fcc 	andi	r2,r2,255
   3363c:	10001126 	beq	r2,zero,33684 <secp256k1_scalar_sqr_512+0x4414>
   33640:	e0be6117 	ldw	r2,-1660(fp)
   33644:	1005003a 	cmpeq	r2,r2,zero
   33648:	10803fcc 	andi	r2,r2,255
   3364c:	10000d26 	beq	r2,zero,33684 <secp256k1_scalar_sqr_512+0x4414>
   33650:	d0a01617 	ldw	r2,-32680(gp)
   33654:	10c00317 	ldw	r3,12(r2)
   33658:	008001b4 	movhi	r2,6
   3365c:	10b09704 	addi	r2,r2,-15780
   33660:	d8800015 	stw	r2,0(sp)
   33664:	01c09b84 	movi	r7,622
   33668:	018001b4 	movhi	r6,6
   3366c:	31af9204 	addi	r6,r6,-16824
   33670:	014001b4 	movhi	r5,6
   33674:	296b3804 	addi	r5,r5,-21280
   33678:	1809883a 	mov	r4,r3
   3367c:	00452600 	call	45260 <fprintf>
   33680:	00450340 	call	45034 <abort>
    muladd(a->d[5], a->d[5]);
   33684:	e0bf2b17 	ldw	r2,-852(fp)
   33688:	10800517 	ldw	r2,20(r2)
   3368c:	e0bfce15 	stw	r2,-200(fp)
   33690:	e03fcf15 	stw	zero,-196(fp)
   33694:	e0bf2b17 	ldw	r2,-852(fp)
   33698:	10800517 	ldw	r2,20(r2)
   3369c:	e0bfd015 	stw	r2,-192(fp)
   336a0:	e03fd115 	stw	zero,-188(fp)
   336a4:	e1bfd017 	ldw	r6,-192(fp)
   336a8:	e1ffd117 	ldw	r7,-188(fp)
   336ac:	e13fce17 	ldw	r4,-200(fp)
   336b0:	e17fcf17 	ldw	r5,-196(fp)
   336b4:	00429400 	call	42940 <__muldi3>
   336b8:	1009883a 	mov	r4,r2
   336bc:	180b883a 	mov	r5,r3
   336c0:	e13f0615 	stw	r4,-1000(fp)
   336c4:	e17f0715 	stw	r5,-996(fp)
   336c8:	e0bf0717 	ldw	r2,-996(fp)
   336cc:	1004d83a 	srl	r2,r2,zero
   336d0:	e0bfd215 	stw	r2,-184(fp)
   336d4:	e03fd315 	stw	zero,-180(fp)
   336d8:	e0bfd217 	ldw	r2,-184(fp)
   336dc:	e0bf0815 	stw	r2,-992(fp)
   336e0:	e0bf0617 	ldw	r2,-1000(fp)
   336e4:	e0bf0915 	stw	r2,-988(fp)
   336e8:	e0fe5f17 	ldw	r3,-1668(fp)
   336ec:	e0bf0917 	ldw	r2,-988(fp)
   336f0:	1885883a 	add	r2,r3,r2
   336f4:	e0be5f15 	stw	r2,-1668(fp)
   336f8:	e0fe5f17 	ldw	r3,-1668(fp)
   336fc:	e0bf0917 	ldw	r2,-988(fp)
   33700:	1880022e 	bgeu	r3,r2,3370c <secp256k1_scalar_sqr_512+0x449c>
   33704:	00c00044 	movi	r3,1
   33708:	00000106 	br	33710 <secp256k1_scalar_sqr_512+0x44a0>
   3370c:	0007883a 	mov	r3,zero
   33710:	e0bf0817 	ldw	r2,-992(fp)
   33714:	10c5883a 	add	r2,r2,r3
   33718:	e0bf0815 	stw	r2,-992(fp)
   3371c:	e0fe6017 	ldw	r3,-1664(fp)
   33720:	e0bf0817 	ldw	r2,-992(fp)
   33724:	1885883a 	add	r2,r3,r2
   33728:	e0be6015 	stw	r2,-1664(fp)
   3372c:	e0fe6017 	ldw	r3,-1664(fp)
   33730:	e0bf0817 	ldw	r2,-992(fp)
   33734:	1880022e 	bgeu	r3,r2,33740 <secp256k1_scalar_sqr_512+0x44d0>
   33738:	00c00044 	movi	r3,1
   3373c:	00000106 	br	33744 <secp256k1_scalar_sqr_512+0x44d4>
   33740:	0007883a 	mov	r3,zero
   33744:	e0be6117 	ldw	r2,-1660(fp)
   33748:	10c5883a 	add	r2,r2,r3
   3374c:	e0be6115 	stw	r2,-1660(fp)
   33750:	e0fe6017 	ldw	r3,-1664(fp)
   33754:	e0bf0817 	ldw	r2,-992(fp)
   33758:	1885803a 	cmpltu	r2,r3,r2
   3375c:	10803fcc 	andi	r2,r2,255
   33760:	10001126 	beq	r2,zero,337a8 <secp256k1_scalar_sqr_512+0x4538>
   33764:	e0be6117 	ldw	r2,-1660(fp)
   33768:	1005003a 	cmpeq	r2,r2,zero
   3376c:	10803fcc 	andi	r2,r2,255
   33770:	10000d26 	beq	r2,zero,337a8 <secp256k1_scalar_sqr_512+0x4538>
   33774:	d0a01617 	ldw	r2,-32680(gp)
   33778:	10c00317 	ldw	r3,12(r2)
   3377c:	008001b4 	movhi	r2,6
   33780:	10b02604 	addi	r2,r2,-16232
   33784:	d8800015 	stw	r2,0(sp)
   33788:	01c09bc4 	movi	r7,623
   3378c:	018001b4 	movhi	r6,6
   33790:	31af9204 	addi	r6,r6,-16824
   33794:	014001b4 	movhi	r5,6
   33798:	296b3804 	addi	r5,r5,-21280
   3379c:	1809883a 	mov	r4,r3
   337a0:	00452600 	call	45260 <fprintf>
   337a4:	00450340 	call	45034 <abort>
    extract(l[10]);
   337a8:	e0bf2a17 	ldw	r2,-856(fp)
   337ac:	10c00a04 	addi	r3,r2,40
   337b0:	e0be5f17 	ldw	r2,-1668(fp)
   337b4:	18800015 	stw	r2,0(r3)
   337b8:	e0be6017 	ldw	r2,-1664(fp)
   337bc:	e0be5f15 	stw	r2,-1668(fp)
   337c0:	e0be6117 	ldw	r2,-1660(fp)
   337c4:	e0be6015 	stw	r2,-1664(fp)
   337c8:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[4], a->d[7]);
   337cc:	e0bf2b17 	ldw	r2,-852(fp)
   337d0:	10800417 	ldw	r2,16(r2)
   337d4:	e0bfd415 	stw	r2,-176(fp)
   337d8:	e03fd515 	stw	zero,-172(fp)
   337dc:	e0bf2b17 	ldw	r2,-852(fp)
   337e0:	10800717 	ldw	r2,28(r2)
   337e4:	e0bfd615 	stw	r2,-168(fp)
   337e8:	e03fd715 	stw	zero,-164(fp)
   337ec:	e1bfd617 	ldw	r6,-168(fp)
   337f0:	e1ffd717 	ldw	r7,-164(fp)
   337f4:	e13fd417 	ldw	r4,-176(fp)
   337f8:	e17fd517 	ldw	r5,-172(fp)
   337fc:	00429400 	call	42940 <__muldi3>
   33800:	1009883a 	mov	r4,r2
   33804:	180b883a 	mov	r5,r3
   33808:	e13f0a15 	stw	r4,-984(fp)
   3380c:	e17f0b15 	stw	r5,-980(fp)
   33810:	e0bf0b17 	ldw	r2,-980(fp)
   33814:	1004d83a 	srl	r2,r2,zero
   33818:	e0bfd815 	stw	r2,-160(fp)
   3381c:	e03fd915 	stw	zero,-156(fp)
   33820:	e0bfd817 	ldw	r2,-160(fp)
   33824:	e0bf0c15 	stw	r2,-976(fp)
   33828:	e0bf0a17 	ldw	r2,-984(fp)
   3382c:	e0bf0d15 	stw	r2,-972(fp)
   33830:	e0ff0c17 	ldw	r3,-976(fp)
   33834:	e0bf0c17 	ldw	r2,-976(fp)
   33838:	1885883a 	add	r2,r3,r2
   3383c:	e0bf0e15 	stw	r2,-968(fp)
   33840:	e0ff0e17 	ldw	r3,-968(fp)
   33844:	e0bf0c17 	ldw	r2,-976(fp)
   33848:	1880022e 	bgeu	r3,r2,33854 <secp256k1_scalar_sqr_512+0x45e4>
   3384c:	00c00044 	movi	r3,1
   33850:	00000106 	br	33858 <secp256k1_scalar_sqr_512+0x45e8>
   33854:	0007883a 	mov	r3,zero
   33858:	e0be6117 	ldw	r2,-1660(fp)
   3385c:	10c5883a 	add	r2,r2,r3
   33860:	e0be6115 	stw	r2,-1660(fp)
   33864:	e0ff0e17 	ldw	r3,-968(fp)
   33868:	e0bf0c17 	ldw	r2,-976(fp)
   3386c:	1885803a 	cmpltu	r2,r3,r2
   33870:	10803fcc 	andi	r2,r2,255
   33874:	10001126 	beq	r2,zero,338bc <secp256k1_scalar_sqr_512+0x464c>
   33878:	e0be6117 	ldw	r2,-1660(fp)
   3387c:	1005003a 	cmpeq	r2,r2,zero
   33880:	10803fcc 	andi	r2,r2,255
   33884:	10000d26 	beq	r2,zero,338bc <secp256k1_scalar_sqr_512+0x464c>
   33888:	d0a01617 	ldw	r2,-32680(gp)
   3388c:	10c00317 	ldw	r3,12(r2)
   33890:	008001b4 	movhi	r2,6
   33894:	10b07b04 	addi	r2,r2,-15892
   33898:	d8800015 	stw	r2,0(sp)
   3389c:	01c09c44 	movi	r7,625
   338a0:	018001b4 	movhi	r6,6
   338a4:	31af9204 	addi	r6,r6,-16824
   338a8:	014001b4 	movhi	r5,6
   338ac:	296b3804 	addi	r5,r5,-21280
   338b0:	1809883a 	mov	r4,r3
   338b4:	00452600 	call	45260 <fprintf>
   338b8:	00450340 	call	45034 <abort>
   338bc:	e0ff0d17 	ldw	r3,-972(fp)
   338c0:	e0bf0d17 	ldw	r2,-972(fp)
   338c4:	1885883a 	add	r2,r3,r2
   338c8:	e0bf0f15 	stw	r2,-964(fp)
   338cc:	e0ff0f17 	ldw	r3,-964(fp)
   338d0:	e0bf0d17 	ldw	r2,-972(fp)
   338d4:	1880022e 	bgeu	r3,r2,338e0 <secp256k1_scalar_sqr_512+0x4670>
   338d8:	00c00044 	movi	r3,1
   338dc:	00000106 	br	338e4 <secp256k1_scalar_sqr_512+0x4674>
   338e0:	0007883a 	mov	r3,zero
   338e4:	e0bf0e17 	ldw	r2,-968(fp)
   338e8:	10c5883a 	add	r2,r2,r3
   338ec:	e0bf0e15 	stw	r2,-968(fp)
   338f0:	e0fe5f17 	ldw	r3,-1668(fp)
   338f4:	e0bf0f17 	ldw	r2,-964(fp)
   338f8:	1885883a 	add	r2,r3,r2
   338fc:	e0be5f15 	stw	r2,-1668(fp)
   33900:	e0fe5f17 	ldw	r3,-1668(fp)
   33904:	e0bf0f17 	ldw	r2,-964(fp)
   33908:	1880022e 	bgeu	r3,r2,33914 <secp256k1_scalar_sqr_512+0x46a4>
   3390c:	00c00044 	movi	r3,1
   33910:	00000106 	br	33918 <secp256k1_scalar_sqr_512+0x46a8>
   33914:	0007883a 	mov	r3,zero
   33918:	e0bf0e17 	ldw	r2,-968(fp)
   3391c:	10c5883a 	add	r2,r2,r3
   33920:	e0bf0e15 	stw	r2,-968(fp)
   33924:	e0fe5f17 	ldw	r3,-1668(fp)
   33928:	e0bf0f17 	ldw	r2,-964(fp)
   3392c:	1885803a 	cmpltu	r2,r3,r2
   33930:	1007883a 	mov	r3,r2
   33934:	e0bf0e17 	ldw	r2,-968(fp)
   33938:	1005003a 	cmpeq	r2,r2,zero
   3393c:	1884703a 	and	r2,r3,r2
   33940:	10c03fcc 	andi	r3,r2,255
   33944:	e0be6117 	ldw	r2,-1660(fp)
   33948:	10c5883a 	add	r2,r2,r3
   3394c:	e0be6115 	stw	r2,-1660(fp)
   33950:	e0fe5f17 	ldw	r3,-1668(fp)
   33954:	e0bf0f17 	ldw	r2,-964(fp)
   33958:	1885803a 	cmpltu	r2,r3,r2
   3395c:	10803fcc 	andi	r2,r2,255
   33960:	10000626 	beq	r2,zero,3397c <secp256k1_scalar_sqr_512+0x470c>
   33964:	e0bf0e17 	ldw	r2,-968(fp)
   33968:	1005003a 	cmpeq	r2,r2,zero
   3396c:	10803fcc 	andi	r2,r2,255
   33970:	10000226 	beq	r2,zero,3397c <secp256k1_scalar_sqr_512+0x470c>
   33974:	00800044 	movi	r2,1
   33978:	00000106 	br	33980 <secp256k1_scalar_sqr_512+0x4710>
   3397c:	0005883a 	mov	r2,zero
   33980:	10001126 	beq	r2,zero,339c8 <secp256k1_scalar_sqr_512+0x4758>
   33984:	e0be6117 	ldw	r2,-1660(fp)
   33988:	1005003a 	cmpeq	r2,r2,zero
   3398c:	10803fcc 	andi	r2,r2,255
   33990:	10000d26 	beq	r2,zero,339c8 <secp256k1_scalar_sqr_512+0x4758>
   33994:	d0a01617 	ldw	r2,-32680(gp)
   33998:	10c00317 	ldw	r3,12(r2)
   3399c:	008001b4 	movhi	r2,6
   339a0:	10b08704 	addi	r2,r2,-15844
   339a4:	d8800015 	stw	r2,0(sp)
   339a8:	01c09c44 	movi	r7,625
   339ac:	018001b4 	movhi	r6,6
   339b0:	31af9204 	addi	r6,r6,-16824
   339b4:	014001b4 	movhi	r5,6
   339b8:	296b3804 	addi	r5,r5,-21280
   339bc:	1809883a 	mov	r4,r3
   339c0:	00452600 	call	45260 <fprintf>
   339c4:	00450340 	call	45034 <abort>
   339c8:	e0fe6017 	ldw	r3,-1664(fp)
   339cc:	e0bf0e17 	ldw	r2,-968(fp)
   339d0:	1885883a 	add	r2,r3,r2
   339d4:	e0be6015 	stw	r2,-1664(fp)
   339d8:	e0fe6017 	ldw	r3,-1664(fp)
   339dc:	e0bf0e17 	ldw	r2,-968(fp)
   339e0:	1880022e 	bgeu	r3,r2,339ec <secp256k1_scalar_sqr_512+0x477c>
   339e4:	00c00044 	movi	r3,1
   339e8:	00000106 	br	339f0 <secp256k1_scalar_sqr_512+0x4780>
   339ec:	0007883a 	mov	r3,zero
   339f0:	e0be6117 	ldw	r2,-1660(fp)
   339f4:	10c5883a 	add	r2,r2,r3
   339f8:	e0be6115 	stw	r2,-1660(fp)
   339fc:	e0fe6017 	ldw	r3,-1664(fp)
   33a00:	e0bf0e17 	ldw	r2,-968(fp)
   33a04:	1885803a 	cmpltu	r2,r3,r2
   33a08:	10803fcc 	andi	r2,r2,255
   33a0c:	10001126 	beq	r2,zero,33a54 <secp256k1_scalar_sqr_512+0x47e4>
   33a10:	e0be6117 	ldw	r2,-1660(fp)
   33a14:	1005003a 	cmpeq	r2,r2,zero
   33a18:	10803fcc 	andi	r2,r2,255
   33a1c:	10000d26 	beq	r2,zero,33a54 <secp256k1_scalar_sqr_512+0x47e4>
   33a20:	d0a01617 	ldw	r2,-32680(gp)
   33a24:	10c00317 	ldw	r3,12(r2)
   33a28:	008001b4 	movhi	r2,6
   33a2c:	10b09704 	addi	r2,r2,-15780
   33a30:	d8800015 	stw	r2,0(sp)
   33a34:	01c09c44 	movi	r7,625
   33a38:	018001b4 	movhi	r6,6
   33a3c:	31af9204 	addi	r6,r6,-16824
   33a40:	014001b4 	movhi	r5,6
   33a44:	296b3804 	addi	r5,r5,-21280
   33a48:	1809883a 	mov	r4,r3
   33a4c:	00452600 	call	45260 <fprintf>
   33a50:	00450340 	call	45034 <abort>
    muladd2(a->d[5], a->d[6]);
   33a54:	e0bf2b17 	ldw	r2,-852(fp)
   33a58:	10800517 	ldw	r2,20(r2)
   33a5c:	e0bfda15 	stw	r2,-152(fp)
   33a60:	e03fdb15 	stw	zero,-148(fp)
   33a64:	e0bf2b17 	ldw	r2,-852(fp)
   33a68:	10800617 	ldw	r2,24(r2)
   33a6c:	e0bfdc15 	stw	r2,-144(fp)
   33a70:	e03fdd15 	stw	zero,-140(fp)
   33a74:	e1bfdc17 	ldw	r6,-144(fp)
   33a78:	e1ffdd17 	ldw	r7,-140(fp)
   33a7c:	e13fda17 	ldw	r4,-152(fp)
   33a80:	e17fdb17 	ldw	r5,-148(fp)
   33a84:	00429400 	call	42940 <__muldi3>
   33a88:	1009883a 	mov	r4,r2
   33a8c:	180b883a 	mov	r5,r3
   33a90:	e13f1015 	stw	r4,-960(fp)
   33a94:	e17f1115 	stw	r5,-956(fp)
   33a98:	e0bf1117 	ldw	r2,-956(fp)
   33a9c:	1004d83a 	srl	r2,r2,zero
   33aa0:	e0bfde15 	stw	r2,-136(fp)
   33aa4:	e03fdf15 	stw	zero,-132(fp)
   33aa8:	e0bfde17 	ldw	r2,-136(fp)
   33aac:	e0bf1215 	stw	r2,-952(fp)
   33ab0:	e0bf1017 	ldw	r2,-960(fp)
   33ab4:	e0bf1315 	stw	r2,-948(fp)
   33ab8:	e0ff1217 	ldw	r3,-952(fp)
   33abc:	e0bf1217 	ldw	r2,-952(fp)
   33ac0:	1885883a 	add	r2,r3,r2
   33ac4:	e0bf1415 	stw	r2,-944(fp)
   33ac8:	e0ff1417 	ldw	r3,-944(fp)
   33acc:	e0bf1217 	ldw	r2,-952(fp)
   33ad0:	1880022e 	bgeu	r3,r2,33adc <secp256k1_scalar_sqr_512+0x486c>
   33ad4:	00c00044 	movi	r3,1
   33ad8:	00000106 	br	33ae0 <secp256k1_scalar_sqr_512+0x4870>
   33adc:	0007883a 	mov	r3,zero
   33ae0:	e0be6117 	ldw	r2,-1660(fp)
   33ae4:	10c5883a 	add	r2,r2,r3
   33ae8:	e0be6115 	stw	r2,-1660(fp)
   33aec:	e0ff1417 	ldw	r3,-944(fp)
   33af0:	e0bf1217 	ldw	r2,-952(fp)
   33af4:	1885803a 	cmpltu	r2,r3,r2
   33af8:	10803fcc 	andi	r2,r2,255
   33afc:	10001126 	beq	r2,zero,33b44 <secp256k1_scalar_sqr_512+0x48d4>
   33b00:	e0be6117 	ldw	r2,-1660(fp)
   33b04:	1005003a 	cmpeq	r2,r2,zero
   33b08:	10803fcc 	andi	r2,r2,255
   33b0c:	10000d26 	beq	r2,zero,33b44 <secp256k1_scalar_sqr_512+0x48d4>
   33b10:	d0a01617 	ldw	r2,-32680(gp)
   33b14:	10c00317 	ldw	r3,12(r2)
   33b18:	008001b4 	movhi	r2,6
   33b1c:	10b07b04 	addi	r2,r2,-15892
   33b20:	d8800015 	stw	r2,0(sp)
   33b24:	01c09c84 	movi	r7,626
   33b28:	018001b4 	movhi	r6,6
   33b2c:	31af9204 	addi	r6,r6,-16824
   33b30:	014001b4 	movhi	r5,6
   33b34:	296b3804 	addi	r5,r5,-21280
   33b38:	1809883a 	mov	r4,r3
   33b3c:	00452600 	call	45260 <fprintf>
   33b40:	00450340 	call	45034 <abort>
   33b44:	e0ff1317 	ldw	r3,-948(fp)
   33b48:	e0bf1317 	ldw	r2,-948(fp)
   33b4c:	1885883a 	add	r2,r3,r2
   33b50:	e0bf1515 	stw	r2,-940(fp)
   33b54:	e0ff1517 	ldw	r3,-940(fp)
   33b58:	e0bf1317 	ldw	r2,-948(fp)
   33b5c:	1880022e 	bgeu	r3,r2,33b68 <secp256k1_scalar_sqr_512+0x48f8>
   33b60:	00c00044 	movi	r3,1
   33b64:	00000106 	br	33b6c <secp256k1_scalar_sqr_512+0x48fc>
   33b68:	0007883a 	mov	r3,zero
   33b6c:	e0bf1417 	ldw	r2,-944(fp)
   33b70:	10c5883a 	add	r2,r2,r3
   33b74:	e0bf1415 	stw	r2,-944(fp)
   33b78:	e0fe5f17 	ldw	r3,-1668(fp)
   33b7c:	e0bf1517 	ldw	r2,-940(fp)
   33b80:	1885883a 	add	r2,r3,r2
   33b84:	e0be5f15 	stw	r2,-1668(fp)
   33b88:	e0fe5f17 	ldw	r3,-1668(fp)
   33b8c:	e0bf1517 	ldw	r2,-940(fp)
   33b90:	1880022e 	bgeu	r3,r2,33b9c <secp256k1_scalar_sqr_512+0x492c>
   33b94:	00c00044 	movi	r3,1
   33b98:	00000106 	br	33ba0 <secp256k1_scalar_sqr_512+0x4930>
   33b9c:	0007883a 	mov	r3,zero
   33ba0:	e0bf1417 	ldw	r2,-944(fp)
   33ba4:	10c5883a 	add	r2,r2,r3
   33ba8:	e0bf1415 	stw	r2,-944(fp)
   33bac:	e0fe5f17 	ldw	r3,-1668(fp)
   33bb0:	e0bf1517 	ldw	r2,-940(fp)
   33bb4:	1885803a 	cmpltu	r2,r3,r2
   33bb8:	1007883a 	mov	r3,r2
   33bbc:	e0bf1417 	ldw	r2,-944(fp)
   33bc0:	1005003a 	cmpeq	r2,r2,zero
   33bc4:	1884703a 	and	r2,r3,r2
   33bc8:	10c03fcc 	andi	r3,r2,255
   33bcc:	e0be6117 	ldw	r2,-1660(fp)
   33bd0:	10c5883a 	add	r2,r2,r3
   33bd4:	e0be6115 	stw	r2,-1660(fp)
   33bd8:	e0fe5f17 	ldw	r3,-1668(fp)
   33bdc:	e0bf1517 	ldw	r2,-940(fp)
   33be0:	1885803a 	cmpltu	r2,r3,r2
   33be4:	10803fcc 	andi	r2,r2,255
   33be8:	10000626 	beq	r2,zero,33c04 <secp256k1_scalar_sqr_512+0x4994>
   33bec:	e0bf1417 	ldw	r2,-944(fp)
   33bf0:	1005003a 	cmpeq	r2,r2,zero
   33bf4:	10803fcc 	andi	r2,r2,255
   33bf8:	10000226 	beq	r2,zero,33c04 <secp256k1_scalar_sqr_512+0x4994>
   33bfc:	00800044 	movi	r2,1
   33c00:	00000106 	br	33c08 <secp256k1_scalar_sqr_512+0x4998>
   33c04:	0005883a 	mov	r2,zero
   33c08:	10001126 	beq	r2,zero,33c50 <secp256k1_scalar_sqr_512+0x49e0>
   33c0c:	e0be6117 	ldw	r2,-1660(fp)
   33c10:	1005003a 	cmpeq	r2,r2,zero
   33c14:	10803fcc 	andi	r2,r2,255
   33c18:	10000d26 	beq	r2,zero,33c50 <secp256k1_scalar_sqr_512+0x49e0>
   33c1c:	d0a01617 	ldw	r2,-32680(gp)
   33c20:	10c00317 	ldw	r3,12(r2)
   33c24:	008001b4 	movhi	r2,6
   33c28:	10b08704 	addi	r2,r2,-15844
   33c2c:	d8800015 	stw	r2,0(sp)
   33c30:	01c09c84 	movi	r7,626
   33c34:	018001b4 	movhi	r6,6
   33c38:	31af9204 	addi	r6,r6,-16824
   33c3c:	014001b4 	movhi	r5,6
   33c40:	296b3804 	addi	r5,r5,-21280
   33c44:	1809883a 	mov	r4,r3
   33c48:	00452600 	call	45260 <fprintf>
   33c4c:	00450340 	call	45034 <abort>
   33c50:	e0fe6017 	ldw	r3,-1664(fp)
   33c54:	e0bf1417 	ldw	r2,-944(fp)
   33c58:	1885883a 	add	r2,r3,r2
   33c5c:	e0be6015 	stw	r2,-1664(fp)
   33c60:	e0fe6017 	ldw	r3,-1664(fp)
   33c64:	e0bf1417 	ldw	r2,-944(fp)
   33c68:	1880022e 	bgeu	r3,r2,33c74 <secp256k1_scalar_sqr_512+0x4a04>
   33c6c:	00c00044 	movi	r3,1
   33c70:	00000106 	br	33c78 <secp256k1_scalar_sqr_512+0x4a08>
   33c74:	0007883a 	mov	r3,zero
   33c78:	e0be6117 	ldw	r2,-1660(fp)
   33c7c:	10c5883a 	add	r2,r2,r3
   33c80:	e0be6115 	stw	r2,-1660(fp)
   33c84:	e0fe6017 	ldw	r3,-1664(fp)
   33c88:	e0bf1417 	ldw	r2,-944(fp)
   33c8c:	1885803a 	cmpltu	r2,r3,r2
   33c90:	10803fcc 	andi	r2,r2,255
   33c94:	10001126 	beq	r2,zero,33cdc <secp256k1_scalar_sqr_512+0x4a6c>
   33c98:	e0be6117 	ldw	r2,-1660(fp)
   33c9c:	1005003a 	cmpeq	r2,r2,zero
   33ca0:	10803fcc 	andi	r2,r2,255
   33ca4:	10000d26 	beq	r2,zero,33cdc <secp256k1_scalar_sqr_512+0x4a6c>
   33ca8:	d0a01617 	ldw	r2,-32680(gp)
   33cac:	10c00317 	ldw	r3,12(r2)
   33cb0:	008001b4 	movhi	r2,6
   33cb4:	10b09704 	addi	r2,r2,-15780
   33cb8:	d8800015 	stw	r2,0(sp)
   33cbc:	01c09c84 	movi	r7,626
   33cc0:	018001b4 	movhi	r6,6
   33cc4:	31af9204 	addi	r6,r6,-16824
   33cc8:	014001b4 	movhi	r5,6
   33ccc:	296b3804 	addi	r5,r5,-21280
   33cd0:	1809883a 	mov	r4,r3
   33cd4:	00452600 	call	45260 <fprintf>
   33cd8:	00450340 	call	45034 <abort>
    extract(l[11]);
   33cdc:	e0bf2a17 	ldw	r2,-856(fp)
   33ce0:	10c00b04 	addi	r3,r2,44
   33ce4:	e0be5f17 	ldw	r2,-1668(fp)
   33ce8:	18800015 	stw	r2,0(r3)
   33cec:	e0be6017 	ldw	r2,-1664(fp)
   33cf0:	e0be5f15 	stw	r2,-1668(fp)
   33cf4:	e0be6117 	ldw	r2,-1660(fp)
   33cf8:	e0be6015 	stw	r2,-1664(fp)
   33cfc:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[5], a->d[7]);
   33d00:	e0bf2b17 	ldw	r2,-852(fp)
   33d04:	10800517 	ldw	r2,20(r2)
   33d08:	e0bfe015 	stw	r2,-128(fp)
   33d0c:	e03fe115 	stw	zero,-124(fp)
   33d10:	e0bf2b17 	ldw	r2,-852(fp)
   33d14:	10800717 	ldw	r2,28(r2)
   33d18:	e0bfe215 	stw	r2,-120(fp)
   33d1c:	e03fe315 	stw	zero,-116(fp)
   33d20:	e1bfe217 	ldw	r6,-120(fp)
   33d24:	e1ffe317 	ldw	r7,-116(fp)
   33d28:	e13fe017 	ldw	r4,-128(fp)
   33d2c:	e17fe117 	ldw	r5,-124(fp)
   33d30:	00429400 	call	42940 <__muldi3>
   33d34:	1009883a 	mov	r4,r2
   33d38:	180b883a 	mov	r5,r3
   33d3c:	e13f1615 	stw	r4,-936(fp)
   33d40:	e17f1715 	stw	r5,-932(fp)
   33d44:	e0bf1717 	ldw	r2,-932(fp)
   33d48:	1004d83a 	srl	r2,r2,zero
   33d4c:	e0bfe415 	stw	r2,-112(fp)
   33d50:	e03fe515 	stw	zero,-108(fp)
   33d54:	e0bfe417 	ldw	r2,-112(fp)
   33d58:	e0bf1815 	stw	r2,-928(fp)
   33d5c:	e0bf1617 	ldw	r2,-936(fp)
   33d60:	e0bf1915 	stw	r2,-924(fp)
   33d64:	e0ff1817 	ldw	r3,-928(fp)
   33d68:	e0bf1817 	ldw	r2,-928(fp)
   33d6c:	1885883a 	add	r2,r3,r2
   33d70:	e0bf1a15 	stw	r2,-920(fp)
   33d74:	e0ff1a17 	ldw	r3,-920(fp)
   33d78:	e0bf1817 	ldw	r2,-928(fp)
   33d7c:	1880022e 	bgeu	r3,r2,33d88 <secp256k1_scalar_sqr_512+0x4b18>
   33d80:	00800044 	movi	r2,1
   33d84:	00000106 	br	33d8c <secp256k1_scalar_sqr_512+0x4b1c>
   33d88:	0005883a 	mov	r2,zero
   33d8c:	e0fe6117 	ldw	r3,-1660(fp)
   33d90:	1885883a 	add	r2,r3,r2
   33d94:	e0be6115 	stw	r2,-1660(fp)
   33d98:	e0ff1a17 	ldw	r3,-920(fp)
   33d9c:	e0bf1817 	ldw	r2,-928(fp)
   33da0:	1885803a 	cmpltu	r2,r3,r2
   33da4:	10803fcc 	andi	r2,r2,255
   33da8:	10001126 	beq	r2,zero,33df0 <secp256k1_scalar_sqr_512+0x4b80>
   33dac:	e0be6117 	ldw	r2,-1660(fp)
   33db0:	1005003a 	cmpeq	r2,r2,zero
   33db4:	10803fcc 	andi	r2,r2,255
   33db8:	10000d26 	beq	r2,zero,33df0 <secp256k1_scalar_sqr_512+0x4b80>
   33dbc:	d0a01617 	ldw	r2,-32680(gp)
   33dc0:	10c00317 	ldw	r3,12(r2)
   33dc4:	008001b4 	movhi	r2,6
   33dc8:	10b07b04 	addi	r2,r2,-15892
   33dcc:	d8800015 	stw	r2,0(sp)
   33dd0:	01c09d04 	movi	r7,628
   33dd4:	018001b4 	movhi	r6,6
   33dd8:	31af9204 	addi	r6,r6,-16824
   33ddc:	014001b4 	movhi	r5,6
   33de0:	296b3804 	addi	r5,r5,-21280
   33de4:	1809883a 	mov	r4,r3
   33de8:	00452600 	call	45260 <fprintf>
   33dec:	00450340 	call	45034 <abort>
   33df0:	e0ff1917 	ldw	r3,-924(fp)
   33df4:	e0bf1917 	ldw	r2,-924(fp)
   33df8:	1885883a 	add	r2,r3,r2
   33dfc:	e0bf1b15 	stw	r2,-916(fp)
   33e00:	e0ff1b17 	ldw	r3,-916(fp)
   33e04:	e0bf1917 	ldw	r2,-924(fp)
   33e08:	1880022e 	bgeu	r3,r2,33e14 <secp256k1_scalar_sqr_512+0x4ba4>
   33e0c:	00800044 	movi	r2,1
   33e10:	00000106 	br	33e18 <secp256k1_scalar_sqr_512+0x4ba8>
   33e14:	0005883a 	mov	r2,zero
   33e18:	e0ff1a17 	ldw	r3,-920(fp)
   33e1c:	1885883a 	add	r2,r3,r2
   33e20:	e0bf1a15 	stw	r2,-920(fp)
   33e24:	e0fe5f17 	ldw	r3,-1668(fp)
   33e28:	e0bf1b17 	ldw	r2,-916(fp)
   33e2c:	1885883a 	add	r2,r3,r2
   33e30:	e0be5f15 	stw	r2,-1668(fp)
   33e34:	e0fe5f17 	ldw	r3,-1668(fp)
   33e38:	e0bf1b17 	ldw	r2,-916(fp)
   33e3c:	1880022e 	bgeu	r3,r2,33e48 <secp256k1_scalar_sqr_512+0x4bd8>
   33e40:	00800044 	movi	r2,1
   33e44:	00000106 	br	33e4c <secp256k1_scalar_sqr_512+0x4bdc>
   33e48:	0005883a 	mov	r2,zero
   33e4c:	e0ff1a17 	ldw	r3,-920(fp)
   33e50:	1885883a 	add	r2,r3,r2
   33e54:	e0bf1a15 	stw	r2,-920(fp)
   33e58:	e0fe5f17 	ldw	r3,-1668(fp)
   33e5c:	e0bf1b17 	ldw	r2,-916(fp)
   33e60:	1885803a 	cmpltu	r2,r3,r2
   33e64:	1007883a 	mov	r3,r2
   33e68:	e0bf1a17 	ldw	r2,-920(fp)
   33e6c:	1005003a 	cmpeq	r2,r2,zero
   33e70:	1884703a 	and	r2,r3,r2
   33e74:	10803fcc 	andi	r2,r2,255
   33e78:	e0fe6117 	ldw	r3,-1660(fp)
   33e7c:	1885883a 	add	r2,r3,r2
   33e80:	e0be6115 	stw	r2,-1660(fp)
   33e84:	e0fe5f17 	ldw	r3,-1668(fp)
   33e88:	e0bf1b17 	ldw	r2,-916(fp)
   33e8c:	1885803a 	cmpltu	r2,r3,r2
   33e90:	10803fcc 	andi	r2,r2,255
   33e94:	10000626 	beq	r2,zero,33eb0 <secp256k1_scalar_sqr_512+0x4c40>
   33e98:	e0bf1a17 	ldw	r2,-920(fp)
   33e9c:	1005003a 	cmpeq	r2,r2,zero
   33ea0:	10803fcc 	andi	r2,r2,255
   33ea4:	10000226 	beq	r2,zero,33eb0 <secp256k1_scalar_sqr_512+0x4c40>
   33ea8:	00800044 	movi	r2,1
   33eac:	00000106 	br	33eb4 <secp256k1_scalar_sqr_512+0x4c44>
   33eb0:	0005883a 	mov	r2,zero
   33eb4:	10001126 	beq	r2,zero,33efc <secp256k1_scalar_sqr_512+0x4c8c>
   33eb8:	e0be6117 	ldw	r2,-1660(fp)
   33ebc:	1005003a 	cmpeq	r2,r2,zero
   33ec0:	10803fcc 	andi	r2,r2,255
   33ec4:	10000d26 	beq	r2,zero,33efc <secp256k1_scalar_sqr_512+0x4c8c>
   33ec8:	d0a01617 	ldw	r2,-32680(gp)
   33ecc:	10c00317 	ldw	r3,12(r2)
   33ed0:	008001b4 	movhi	r2,6
   33ed4:	10b08704 	addi	r2,r2,-15844
   33ed8:	d8800015 	stw	r2,0(sp)
   33edc:	01c09d04 	movi	r7,628
   33ee0:	018001b4 	movhi	r6,6
   33ee4:	31af9204 	addi	r6,r6,-16824
   33ee8:	014001b4 	movhi	r5,6
   33eec:	296b3804 	addi	r5,r5,-21280
   33ef0:	1809883a 	mov	r4,r3
   33ef4:	00452600 	call	45260 <fprintf>
   33ef8:	00450340 	call	45034 <abort>
   33efc:	e0fe6017 	ldw	r3,-1664(fp)
   33f00:	e0bf1a17 	ldw	r2,-920(fp)
   33f04:	1885883a 	add	r2,r3,r2
   33f08:	e0be6015 	stw	r2,-1664(fp)
   33f0c:	e0fe6017 	ldw	r3,-1664(fp)
   33f10:	e0bf1a17 	ldw	r2,-920(fp)
   33f14:	1880022e 	bgeu	r3,r2,33f20 <secp256k1_scalar_sqr_512+0x4cb0>
   33f18:	00800044 	movi	r2,1
   33f1c:	00000106 	br	33f24 <secp256k1_scalar_sqr_512+0x4cb4>
   33f20:	0005883a 	mov	r2,zero
   33f24:	e0fe6117 	ldw	r3,-1660(fp)
   33f28:	1885883a 	add	r2,r3,r2
   33f2c:	e0be6115 	stw	r2,-1660(fp)
   33f30:	e0fe6017 	ldw	r3,-1664(fp)
   33f34:	e0bf1a17 	ldw	r2,-920(fp)
   33f38:	1885803a 	cmpltu	r2,r3,r2
   33f3c:	10803fcc 	andi	r2,r2,255
   33f40:	10001126 	beq	r2,zero,33f88 <secp256k1_scalar_sqr_512+0x4d18>
   33f44:	e0be6117 	ldw	r2,-1660(fp)
   33f48:	1005003a 	cmpeq	r2,r2,zero
   33f4c:	10803fcc 	andi	r2,r2,255
   33f50:	10000d26 	beq	r2,zero,33f88 <secp256k1_scalar_sqr_512+0x4d18>
   33f54:	d0a01617 	ldw	r2,-32680(gp)
   33f58:	10c00317 	ldw	r3,12(r2)
   33f5c:	008001b4 	movhi	r2,6
   33f60:	10b09704 	addi	r2,r2,-15780
   33f64:	d8800015 	stw	r2,0(sp)
   33f68:	01c09d04 	movi	r7,628
   33f6c:	018001b4 	movhi	r6,6
   33f70:	31af9204 	addi	r6,r6,-16824
   33f74:	014001b4 	movhi	r5,6
   33f78:	296b3804 	addi	r5,r5,-21280
   33f7c:	1809883a 	mov	r4,r3
   33f80:	00452600 	call	45260 <fprintf>
   33f84:	00450340 	call	45034 <abort>
    muladd(a->d[6], a->d[6]);
   33f88:	e0bf2b17 	ldw	r2,-852(fp)
   33f8c:	10800617 	ldw	r2,24(r2)
   33f90:	e0bfe615 	stw	r2,-104(fp)
   33f94:	e03fe715 	stw	zero,-100(fp)
   33f98:	e0bf2b17 	ldw	r2,-852(fp)
   33f9c:	10800617 	ldw	r2,24(r2)
   33fa0:	e0bfe815 	stw	r2,-96(fp)
   33fa4:	e03fe915 	stw	zero,-92(fp)
   33fa8:	e1bfe817 	ldw	r6,-96(fp)
   33fac:	e1ffe917 	ldw	r7,-92(fp)
   33fb0:	e13fe617 	ldw	r4,-104(fp)
   33fb4:	e17fe717 	ldw	r5,-100(fp)
   33fb8:	00429400 	call	42940 <__muldi3>
   33fbc:	1009883a 	mov	r4,r2
   33fc0:	180b883a 	mov	r5,r3
   33fc4:	e13f1c15 	stw	r4,-912(fp)
   33fc8:	e17f1d15 	stw	r5,-908(fp)
   33fcc:	e0bf1d17 	ldw	r2,-908(fp)
   33fd0:	1004d83a 	srl	r2,r2,zero
   33fd4:	e0bfea15 	stw	r2,-88(fp)
   33fd8:	e03feb15 	stw	zero,-84(fp)
   33fdc:	e0bfea17 	ldw	r2,-88(fp)
   33fe0:	e0bf1e15 	stw	r2,-904(fp)
   33fe4:	e0bf1c17 	ldw	r2,-912(fp)
   33fe8:	e0bf1f15 	stw	r2,-900(fp)
   33fec:	e0fe5f17 	ldw	r3,-1668(fp)
   33ff0:	e0bf1f17 	ldw	r2,-900(fp)
   33ff4:	1885883a 	add	r2,r3,r2
   33ff8:	e0be5f15 	stw	r2,-1668(fp)
   33ffc:	e0fe5f17 	ldw	r3,-1668(fp)
   34000:	e0bf1f17 	ldw	r2,-900(fp)
   34004:	1880022e 	bgeu	r3,r2,34010 <secp256k1_scalar_sqr_512+0x4da0>
   34008:	00800044 	movi	r2,1
   3400c:	00000106 	br	34014 <secp256k1_scalar_sqr_512+0x4da4>
   34010:	0005883a 	mov	r2,zero
   34014:	e0ff1e17 	ldw	r3,-904(fp)
   34018:	1885883a 	add	r2,r3,r2
   3401c:	e0bf1e15 	stw	r2,-904(fp)
   34020:	e0fe6017 	ldw	r3,-1664(fp)
   34024:	e0bf1e17 	ldw	r2,-904(fp)
   34028:	1885883a 	add	r2,r3,r2
   3402c:	e0be6015 	stw	r2,-1664(fp)
   34030:	e0fe6017 	ldw	r3,-1664(fp)
   34034:	e0bf1e17 	ldw	r2,-904(fp)
   34038:	1880022e 	bgeu	r3,r2,34044 <secp256k1_scalar_sqr_512+0x4dd4>
   3403c:	00800044 	movi	r2,1
   34040:	00000106 	br	34048 <secp256k1_scalar_sqr_512+0x4dd8>
   34044:	0005883a 	mov	r2,zero
   34048:	e0fe6117 	ldw	r3,-1660(fp)
   3404c:	1885883a 	add	r2,r3,r2
   34050:	e0be6115 	stw	r2,-1660(fp)
   34054:	e0fe6017 	ldw	r3,-1664(fp)
   34058:	e0bf1e17 	ldw	r2,-904(fp)
   3405c:	1885803a 	cmpltu	r2,r3,r2
   34060:	10803fcc 	andi	r2,r2,255
   34064:	10001126 	beq	r2,zero,340ac <secp256k1_scalar_sqr_512+0x4e3c>
   34068:	e0be6117 	ldw	r2,-1660(fp)
   3406c:	1005003a 	cmpeq	r2,r2,zero
   34070:	10803fcc 	andi	r2,r2,255
   34074:	10000d26 	beq	r2,zero,340ac <secp256k1_scalar_sqr_512+0x4e3c>
   34078:	d0a01617 	ldw	r2,-32680(gp)
   3407c:	10c00317 	ldw	r3,12(r2)
   34080:	008001b4 	movhi	r2,6
   34084:	10b02604 	addi	r2,r2,-16232
   34088:	d8800015 	stw	r2,0(sp)
   3408c:	01c09d44 	movi	r7,629
   34090:	018001b4 	movhi	r6,6
   34094:	31af9204 	addi	r6,r6,-16824
   34098:	014001b4 	movhi	r5,6
   3409c:	296b3804 	addi	r5,r5,-21280
   340a0:	1809883a 	mov	r4,r3
   340a4:	00452600 	call	45260 <fprintf>
   340a8:	00450340 	call	45034 <abort>
    extract(l[12]);
   340ac:	e0bf2a17 	ldw	r2,-856(fp)
   340b0:	10800c04 	addi	r2,r2,48
   340b4:	e0fe5f17 	ldw	r3,-1668(fp)
   340b8:	10c00015 	stw	r3,0(r2)
   340bc:	e0be6017 	ldw	r2,-1664(fp)
   340c0:	e0be5f15 	stw	r2,-1668(fp)
   340c4:	e0be6117 	ldw	r2,-1660(fp)
   340c8:	e0be6015 	stw	r2,-1664(fp)
   340cc:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[6], a->d[7]);
   340d0:	e0bf2b17 	ldw	r2,-852(fp)
   340d4:	10800617 	ldw	r2,24(r2)
   340d8:	e0bfec15 	stw	r2,-80(fp)
   340dc:	e03fed15 	stw	zero,-76(fp)
   340e0:	e0bf2b17 	ldw	r2,-852(fp)
   340e4:	10800717 	ldw	r2,28(r2)
   340e8:	e0bfee15 	stw	r2,-72(fp)
   340ec:	e03fef15 	stw	zero,-68(fp)
   340f0:	e1bfee17 	ldw	r6,-72(fp)
   340f4:	e1ffef17 	ldw	r7,-68(fp)
   340f8:	e13fec17 	ldw	r4,-80(fp)
   340fc:	e17fed17 	ldw	r5,-76(fp)
   34100:	00429400 	call	42940 <__muldi3>
   34104:	1009883a 	mov	r4,r2
   34108:	180b883a 	mov	r5,r3
   3410c:	e13f2015 	stw	r4,-896(fp)
   34110:	e17f2115 	stw	r5,-892(fp)
   34114:	e0bf2117 	ldw	r2,-892(fp)
   34118:	1004d83a 	srl	r2,r2,zero
   3411c:	e0bff015 	stw	r2,-64(fp)
   34120:	e03ff115 	stw	zero,-60(fp)
   34124:	e0bff017 	ldw	r2,-64(fp)
   34128:	e0bf2215 	stw	r2,-888(fp)
   3412c:	e0bf2017 	ldw	r2,-896(fp)
   34130:	e0bf2315 	stw	r2,-884(fp)
   34134:	e0ff2217 	ldw	r3,-888(fp)
   34138:	e0bf2217 	ldw	r2,-888(fp)
   3413c:	1885883a 	add	r2,r3,r2
   34140:	e0bf2415 	stw	r2,-880(fp)
   34144:	e0ff2417 	ldw	r3,-880(fp)
   34148:	e0bf2217 	ldw	r2,-888(fp)
   3414c:	1880022e 	bgeu	r3,r2,34158 <secp256k1_scalar_sqr_512+0x4ee8>
   34150:	00800044 	movi	r2,1
   34154:	00000106 	br	3415c <secp256k1_scalar_sqr_512+0x4eec>
   34158:	0005883a 	mov	r2,zero
   3415c:	e0fe6117 	ldw	r3,-1660(fp)
   34160:	1885883a 	add	r2,r3,r2
   34164:	e0be6115 	stw	r2,-1660(fp)
   34168:	e0ff2417 	ldw	r3,-880(fp)
   3416c:	e0bf2217 	ldw	r2,-888(fp)
   34170:	1885803a 	cmpltu	r2,r3,r2
   34174:	10803fcc 	andi	r2,r2,255
   34178:	10001126 	beq	r2,zero,341c0 <secp256k1_scalar_sqr_512+0x4f50>
   3417c:	e0be6117 	ldw	r2,-1660(fp)
   34180:	1005003a 	cmpeq	r2,r2,zero
   34184:	10803fcc 	andi	r2,r2,255
   34188:	10000d26 	beq	r2,zero,341c0 <secp256k1_scalar_sqr_512+0x4f50>
   3418c:	d0a01617 	ldw	r2,-32680(gp)
   34190:	10c00317 	ldw	r3,12(r2)
   34194:	008001b4 	movhi	r2,6
   34198:	10b07b04 	addi	r2,r2,-15892
   3419c:	d8800015 	stw	r2,0(sp)
   341a0:	01c09dc4 	movi	r7,631
   341a4:	018001b4 	movhi	r6,6
   341a8:	31af9204 	addi	r6,r6,-16824
   341ac:	014001b4 	movhi	r5,6
   341b0:	296b3804 	addi	r5,r5,-21280
   341b4:	1809883a 	mov	r4,r3
   341b8:	00452600 	call	45260 <fprintf>
   341bc:	00450340 	call	45034 <abort>
   341c0:	e0ff2317 	ldw	r3,-884(fp)
   341c4:	e0bf2317 	ldw	r2,-884(fp)
   341c8:	1885883a 	add	r2,r3,r2
   341cc:	e0bf2515 	stw	r2,-876(fp)
   341d0:	e0ff2517 	ldw	r3,-876(fp)
   341d4:	e0bf2317 	ldw	r2,-884(fp)
   341d8:	1880022e 	bgeu	r3,r2,341e4 <secp256k1_scalar_sqr_512+0x4f74>
   341dc:	00800044 	movi	r2,1
   341e0:	00000106 	br	341e8 <secp256k1_scalar_sqr_512+0x4f78>
   341e4:	0005883a 	mov	r2,zero
   341e8:	e0ff2417 	ldw	r3,-880(fp)
   341ec:	1885883a 	add	r2,r3,r2
   341f0:	e0bf2415 	stw	r2,-880(fp)
   341f4:	e0fe5f17 	ldw	r3,-1668(fp)
   341f8:	e0bf2517 	ldw	r2,-876(fp)
   341fc:	1885883a 	add	r2,r3,r2
   34200:	e0be5f15 	stw	r2,-1668(fp)
   34204:	e0fe5f17 	ldw	r3,-1668(fp)
   34208:	e0bf2517 	ldw	r2,-876(fp)
   3420c:	1880022e 	bgeu	r3,r2,34218 <secp256k1_scalar_sqr_512+0x4fa8>
   34210:	00800044 	movi	r2,1
   34214:	00000106 	br	3421c <secp256k1_scalar_sqr_512+0x4fac>
   34218:	0005883a 	mov	r2,zero
   3421c:	e0ff2417 	ldw	r3,-880(fp)
   34220:	1885883a 	add	r2,r3,r2
   34224:	e0bf2415 	stw	r2,-880(fp)
   34228:	e0fe5f17 	ldw	r3,-1668(fp)
   3422c:	e0bf2517 	ldw	r2,-876(fp)
   34230:	1885803a 	cmpltu	r2,r3,r2
   34234:	1007883a 	mov	r3,r2
   34238:	e0bf2417 	ldw	r2,-880(fp)
   3423c:	1005003a 	cmpeq	r2,r2,zero
   34240:	1884703a 	and	r2,r3,r2
   34244:	10803fcc 	andi	r2,r2,255
   34248:	e0fe6117 	ldw	r3,-1660(fp)
   3424c:	1885883a 	add	r2,r3,r2
   34250:	e0be6115 	stw	r2,-1660(fp)
   34254:	e0fe5f17 	ldw	r3,-1668(fp)
   34258:	e0bf2517 	ldw	r2,-876(fp)
   3425c:	1885803a 	cmpltu	r2,r3,r2
   34260:	10803fcc 	andi	r2,r2,255
   34264:	10000626 	beq	r2,zero,34280 <secp256k1_scalar_sqr_512+0x5010>
   34268:	e0bf2417 	ldw	r2,-880(fp)
   3426c:	1005003a 	cmpeq	r2,r2,zero
   34270:	10803fcc 	andi	r2,r2,255
   34274:	10000226 	beq	r2,zero,34280 <secp256k1_scalar_sqr_512+0x5010>
   34278:	00800044 	movi	r2,1
   3427c:	00000106 	br	34284 <secp256k1_scalar_sqr_512+0x5014>
   34280:	0005883a 	mov	r2,zero
   34284:	10001126 	beq	r2,zero,342cc <secp256k1_scalar_sqr_512+0x505c>
   34288:	e0be6117 	ldw	r2,-1660(fp)
   3428c:	1005003a 	cmpeq	r2,r2,zero
   34290:	10803fcc 	andi	r2,r2,255
   34294:	10000d26 	beq	r2,zero,342cc <secp256k1_scalar_sqr_512+0x505c>
   34298:	d0a01617 	ldw	r2,-32680(gp)
   3429c:	10c00317 	ldw	r3,12(r2)
   342a0:	008001b4 	movhi	r2,6
   342a4:	10b08704 	addi	r2,r2,-15844
   342a8:	d8800015 	stw	r2,0(sp)
   342ac:	01c09dc4 	movi	r7,631
   342b0:	018001b4 	movhi	r6,6
   342b4:	31af9204 	addi	r6,r6,-16824
   342b8:	014001b4 	movhi	r5,6
   342bc:	296b3804 	addi	r5,r5,-21280
   342c0:	1809883a 	mov	r4,r3
   342c4:	00452600 	call	45260 <fprintf>
   342c8:	00450340 	call	45034 <abort>
   342cc:	e0fe6017 	ldw	r3,-1664(fp)
   342d0:	e0bf2417 	ldw	r2,-880(fp)
   342d4:	1885883a 	add	r2,r3,r2
   342d8:	e0be6015 	stw	r2,-1664(fp)
   342dc:	e0fe6017 	ldw	r3,-1664(fp)
   342e0:	e0bf2417 	ldw	r2,-880(fp)
   342e4:	1880022e 	bgeu	r3,r2,342f0 <secp256k1_scalar_sqr_512+0x5080>
   342e8:	00800044 	movi	r2,1
   342ec:	00000106 	br	342f4 <secp256k1_scalar_sqr_512+0x5084>
   342f0:	0005883a 	mov	r2,zero
   342f4:	e0fe6117 	ldw	r3,-1660(fp)
   342f8:	1885883a 	add	r2,r3,r2
   342fc:	e0be6115 	stw	r2,-1660(fp)
   34300:	e0fe6017 	ldw	r3,-1664(fp)
   34304:	e0bf2417 	ldw	r2,-880(fp)
   34308:	1885803a 	cmpltu	r2,r3,r2
   3430c:	10803fcc 	andi	r2,r2,255
   34310:	10001126 	beq	r2,zero,34358 <secp256k1_scalar_sqr_512+0x50e8>
   34314:	e0be6117 	ldw	r2,-1660(fp)
   34318:	1005003a 	cmpeq	r2,r2,zero
   3431c:	10803fcc 	andi	r2,r2,255
   34320:	10000d26 	beq	r2,zero,34358 <secp256k1_scalar_sqr_512+0x50e8>
   34324:	d0a01617 	ldw	r2,-32680(gp)
   34328:	10c00317 	ldw	r3,12(r2)
   3432c:	008001b4 	movhi	r2,6
   34330:	10b09704 	addi	r2,r2,-15780
   34334:	d8800015 	stw	r2,0(sp)
   34338:	01c09dc4 	movi	r7,631
   3433c:	018001b4 	movhi	r6,6
   34340:	31af9204 	addi	r6,r6,-16824
   34344:	014001b4 	movhi	r5,6
   34348:	296b3804 	addi	r5,r5,-21280
   3434c:	1809883a 	mov	r4,r3
   34350:	00452600 	call	45260 <fprintf>
   34354:	00450340 	call	45034 <abort>
    extract(l[13]);
   34358:	e0bf2a17 	ldw	r2,-856(fp)
   3435c:	10800d04 	addi	r2,r2,52
   34360:	e0fe5f17 	ldw	r3,-1668(fp)
   34364:	10c00015 	stw	r3,0(r2)
   34368:	e0be6017 	ldw	r2,-1664(fp)
   3436c:	e0be5f15 	stw	r2,-1668(fp)
   34370:	e0be6117 	ldw	r2,-1660(fp)
   34374:	e0be6015 	stw	r2,-1664(fp)
   34378:	e03e6115 	stw	zero,-1660(fp)
    muladd_fast(a->d[7], a->d[7]);
   3437c:	e0bf2b17 	ldw	r2,-852(fp)
   34380:	10800717 	ldw	r2,28(r2)
   34384:	e0bff215 	stw	r2,-56(fp)
   34388:	e03ff315 	stw	zero,-52(fp)
   3438c:	e0bf2b17 	ldw	r2,-852(fp)
   34390:	10800717 	ldw	r2,28(r2)
   34394:	e0bff415 	stw	r2,-48(fp)
   34398:	e03ff515 	stw	zero,-44(fp)
   3439c:	e1bff417 	ldw	r6,-48(fp)
   343a0:	e1fff517 	ldw	r7,-44(fp)
   343a4:	e13ff217 	ldw	r4,-56(fp)
   343a8:	e17ff317 	ldw	r5,-52(fp)
   343ac:	00429400 	call	42940 <__muldi3>
   343b0:	1009883a 	mov	r4,r2
   343b4:	180b883a 	mov	r5,r3
   343b8:	e13f2615 	stw	r4,-872(fp)
   343bc:	e17f2715 	stw	r5,-868(fp)
   343c0:	e0bf2717 	ldw	r2,-868(fp)
   343c4:	1004d83a 	srl	r2,r2,zero
   343c8:	e0bff615 	stw	r2,-40(fp)
   343cc:	e03ff715 	stw	zero,-36(fp)
   343d0:	e0bff617 	ldw	r2,-40(fp)
   343d4:	e0bf2815 	stw	r2,-864(fp)
   343d8:	e0bf2617 	ldw	r2,-872(fp)
   343dc:	e0bf2915 	stw	r2,-860(fp)
   343e0:	e0fe5f17 	ldw	r3,-1668(fp)
   343e4:	e0bf2917 	ldw	r2,-860(fp)
   343e8:	1885883a 	add	r2,r3,r2
   343ec:	e0be5f15 	stw	r2,-1668(fp)
   343f0:	e0fe5f17 	ldw	r3,-1668(fp)
   343f4:	e0bf2917 	ldw	r2,-860(fp)
   343f8:	1880022e 	bgeu	r3,r2,34404 <secp256k1_scalar_sqr_512+0x5194>
   343fc:	00800044 	movi	r2,1
   34400:	00000106 	br	34408 <secp256k1_scalar_sqr_512+0x5198>
   34404:	0005883a 	mov	r2,zero
   34408:	e0ff2817 	ldw	r3,-864(fp)
   3440c:	1885883a 	add	r2,r3,r2
   34410:	e0bf2815 	stw	r2,-864(fp)
   34414:	e0fe6017 	ldw	r3,-1664(fp)
   34418:	e0bf2817 	ldw	r2,-864(fp)
   3441c:	1885883a 	add	r2,r3,r2
   34420:	e0be6015 	stw	r2,-1664(fp)
   34424:	e0fe6017 	ldw	r3,-1664(fp)
   34428:	e0bf2817 	ldw	r2,-864(fp)
   3442c:	1885803a 	cmpltu	r2,r3,r2
   34430:	10803fcc 	andi	r2,r2,255
   34434:	10000d26 	beq	r2,zero,3446c <secp256k1_scalar_sqr_512+0x51fc>
   34438:	d0a01617 	ldw	r2,-32680(gp)
   3443c:	10c00317 	ldw	r3,12(r2)
   34440:	008001b4 	movhi	r2,6
   34444:	10b00904 	addi	r2,r2,-16348
   34448:	d8800015 	stw	r2,0(sp)
   3444c:	01c09e44 	movi	r7,633
   34450:	018001b4 	movhi	r6,6
   34454:	31af9204 	addi	r6,r6,-16824
   34458:	014001b4 	movhi	r5,6
   3445c:	296b3804 	addi	r5,r5,-21280
   34460:	1809883a 	mov	r4,r3
   34464:	00452600 	call	45260 <fprintf>
   34468:	00450340 	call	45034 <abort>
    extract_fast(l[14]);
   3446c:	e0bf2a17 	ldw	r2,-856(fp)
   34470:	10800e04 	addi	r2,r2,56
   34474:	e0fe5f17 	ldw	r3,-1668(fp)
   34478:	10c00015 	stw	r3,0(r2)
   3447c:	e0be6017 	ldw	r2,-1664(fp)
   34480:	e0be5f15 	stw	r2,-1668(fp)
   34484:	e03e6015 	stw	zero,-1664(fp)
   34488:	e0be6117 	ldw	r2,-1660(fp)
   3448c:	1004c03a 	cmpne	r2,r2,zero
   34490:	10803fcc 	andi	r2,r2,255
   34494:	10000d26 	beq	r2,zero,344cc <secp256k1_scalar_sqr_512+0x525c>
   34498:	d0a01617 	ldw	r2,-32680(gp)
   3449c:	10c00317 	ldw	r3,12(r2)
   344a0:	008001b4 	movhi	r2,6
   344a4:	10b01104 	addi	r2,r2,-16316
   344a8:	d8800015 	stw	r2,0(sp)
   344ac:	01c09e84 	movi	r7,634
   344b0:	018001b4 	movhi	r6,6
   344b4:	31af9204 	addi	r6,r6,-16824
   344b8:	014001b4 	movhi	r5,6
   344bc:	296b3804 	addi	r5,r5,-21280
   344c0:	1809883a 	mov	r4,r3
   344c4:	00452600 	call	45260 <fprintf>
   344c8:	00450340 	call	45034 <abort>
    VERIFY_CHECK(c1 == 0);
   344cc:	e0be6017 	ldw	r2,-1664(fp)
   344d0:	1004c03a 	cmpne	r2,r2,zero
   344d4:	10803fcc 	andi	r2,r2,255
   344d8:	10000d26 	beq	r2,zero,34510 <secp256k1_scalar_sqr_512+0x52a0>
   344dc:	d0a01617 	ldw	r2,-32680(gp)
   344e0:	10c00317 	ldw	r3,12(r2)
   344e4:	008001b4 	movhi	r2,6
   344e8:	10b07304 	addi	r2,r2,-15924
   344ec:	d8800015 	stw	r2,0(sp)
   344f0:	01c09ec4 	movi	r7,635
   344f4:	018001b4 	movhi	r6,6
   344f8:	31af9204 	addi	r6,r6,-16824
   344fc:	014001b4 	movhi	r5,6
   34500:	296b3804 	addi	r5,r5,-21280
   34504:	1809883a 	mov	r4,r3
   34508:	00452600 	call	45260 <fprintf>
   3450c:	00450340 	call	45034 <abort>
    l[15] = c0;
   34510:	e0bf2a17 	ldw	r2,-856(fp)
   34514:	10800f04 	addi	r2,r2,60
   34518:	e0fe5f17 	ldw	r3,-1668(fp)
   3451c:	10c00015 	stw	r3,0(r2)
}
   34520:	0001883a 	nop
   34524:	e6fff804 	addi	sp,fp,-32
   34528:	dfc00917 	ldw	ra,36(sp)
   3452c:	df000817 	ldw	fp,32(sp)
   34530:	ddc00717 	ldw	r23,28(sp)
   34534:	dd800617 	ldw	r22,24(sp)
   34538:	dd400517 	ldw	r21,20(sp)
   3453c:	dd000417 	ldw	r20,16(sp)
   34540:	dcc00317 	ldw	r19,12(sp)
   34544:	dc800217 	ldw	r18,8(sp)
   34548:	dc400117 	ldw	r17,4(sp)
   3454c:	dc000017 	ldw	r16,0(sp)
   34550:	dec00a04 	addi	sp,sp,40
   34554:	f800283a 	ret

00034558 <secp256k1_scalar_mul>:
#undef muladd_fast
#undef muladd2
#undef extract
#undef extract_fast

static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {
   34558:	deffeb04 	addi	sp,sp,-84
   3455c:	dfc01415 	stw	ra,80(sp)
   34560:	df001315 	stw	fp,76(sp)
   34564:	df001304 	addi	fp,sp,76
   34568:	e13ffd15 	stw	r4,-12(fp)
   3456c:	e17ffe15 	stw	r5,-8(fp)
   34570:	e1bfff15 	stw	r6,-4(fp)
    uint32_t l[16];
    secp256k1_scalar_mul_512(l, a, b);
   34574:	e1bfff17 	ldw	r6,-4(fp)
   34578:	e17ffe17 	ldw	r5,-8(fp)
   3457c:	e13fed04 	addi	r4,fp,-76
   34580:	002a6840 	call	2a684 <secp256k1_scalar_mul_512>
    secp256k1_scalar_reduce_512(r, l);
   34584:	e17fed04 	addi	r5,fp,-76
   34588:	e13ffd17 	ldw	r4,-12(fp)
   3458c:	0025a940 	call	25a94 <secp256k1_scalar_reduce_512>
}
   34590:	0001883a 	nop
   34594:	e037883a 	mov	sp,fp
   34598:	dfc00117 	ldw	ra,4(sp)
   3459c:	df000017 	ldw	fp,0(sp)
   345a0:	dec00204 	addi	sp,sp,8
   345a4:	f800283a 	ret

000345a8 <secp256k1_scalar_shr_int>:

static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {
   345a8:	defffa04 	addi	sp,sp,-24
   345ac:	dfc00515 	stw	ra,20(sp)
   345b0:	df000415 	stw	fp,16(sp)
   345b4:	df000404 	addi	fp,sp,16
   345b8:	e13ffe15 	stw	r4,-8(fp)
   345bc:	e17fff15 	stw	r5,-4(fp)
    int ret;
    VERIFY_CHECK(n > 0);
   345c0:	e0bfff17 	ldw	r2,-4(fp)
   345c4:	0084403a 	cmpge	r2,zero,r2
   345c8:	10803fcc 	andi	r2,r2,255
   345cc:	10000d26 	beq	r2,zero,34604 <secp256k1_scalar_shr_int+0x5c>
   345d0:	d0a01617 	ldw	r2,-32680(gp)
   345d4:	10c00317 	ldw	r3,12(r2)
   345d8:	008001b4 	movhi	r2,6
   345dc:	10b0a304 	addi	r2,r2,-15732
   345e0:	d8800015 	stw	r2,0(sp)
   345e4:	01c0a3c4 	movi	r7,655
   345e8:	018001b4 	movhi	r6,6
   345ec:	31af9204 	addi	r6,r6,-16824
   345f0:	014001b4 	movhi	r5,6
   345f4:	296b3804 	addi	r5,r5,-21280
   345f8:	1809883a 	mov	r4,r3
   345fc:	00452600 	call	45260 <fprintf>
   34600:	00450340 	call	45034 <abort>
    VERIFY_CHECK(n < 16);
   34604:	e0bfff17 	ldw	r2,-4(fp)
   34608:	10800408 	cmpgei	r2,r2,16
   3460c:	10803fcc 	andi	r2,r2,255
   34610:	10000d26 	beq	r2,zero,34648 <secp256k1_scalar_shr_int+0xa0>
   34614:	d0a01617 	ldw	r2,-32680(gp)
   34618:	10c00317 	ldw	r3,12(r2)
   3461c:	008001b4 	movhi	r2,6
   34620:	10b0ab04 	addi	r2,r2,-15700
   34624:	d8800015 	stw	r2,0(sp)
   34628:	01c0a404 	movi	r7,656
   3462c:	018001b4 	movhi	r6,6
   34630:	31af9204 	addi	r6,r6,-16824
   34634:	014001b4 	movhi	r5,6
   34638:	296b3804 	addi	r5,r5,-21280
   3463c:	1809883a 	mov	r4,r3
   34640:	00452600 	call	45260 <fprintf>
   34644:	00450340 	call	45034 <abort>
    ret = r->d[0] & ((1 << n) - 1);
   34648:	e0bffe17 	ldw	r2,-8(fp)
   3464c:	10800017 	ldw	r2,0(r2)
   34650:	01000044 	movi	r4,1
   34654:	e0ffff17 	ldw	r3,-4(fp)
   34658:	20c6983a 	sll	r3,r4,r3
   3465c:	18ffffc4 	addi	r3,r3,-1
   34660:	10c4703a 	and	r2,r2,r3
   34664:	e0bffd15 	stw	r2,-12(fp)
    r->d[0] = (r->d[0] >> n) + (r->d[1] << (32 - n));
   34668:	e0bffe17 	ldw	r2,-8(fp)
   3466c:	10c00017 	ldw	r3,0(r2)
   34670:	e0bfff17 	ldw	r2,-4(fp)
   34674:	1886d83a 	srl	r3,r3,r2
   34678:	e0bffe17 	ldw	r2,-8(fp)
   3467c:	11000117 	ldw	r4,4(r2)
   34680:	01400804 	movi	r5,32
   34684:	e0bfff17 	ldw	r2,-4(fp)
   34688:	2885c83a 	sub	r2,r5,r2
   3468c:	2084983a 	sll	r2,r4,r2
   34690:	1887883a 	add	r3,r3,r2
   34694:	e0bffe17 	ldw	r2,-8(fp)
   34698:	10c00015 	stw	r3,0(r2)
    r->d[1] = (r->d[1] >> n) + (r->d[2] << (32 - n));
   3469c:	e0bffe17 	ldw	r2,-8(fp)
   346a0:	10c00117 	ldw	r3,4(r2)
   346a4:	e0bfff17 	ldw	r2,-4(fp)
   346a8:	1886d83a 	srl	r3,r3,r2
   346ac:	e0bffe17 	ldw	r2,-8(fp)
   346b0:	11000217 	ldw	r4,8(r2)
   346b4:	01400804 	movi	r5,32
   346b8:	e0bfff17 	ldw	r2,-4(fp)
   346bc:	2885c83a 	sub	r2,r5,r2
   346c0:	2084983a 	sll	r2,r4,r2
   346c4:	1887883a 	add	r3,r3,r2
   346c8:	e0bffe17 	ldw	r2,-8(fp)
   346cc:	10c00115 	stw	r3,4(r2)
    r->d[2] = (r->d[2] >> n) + (r->d[3] << (32 - n));
   346d0:	e0bffe17 	ldw	r2,-8(fp)
   346d4:	10c00217 	ldw	r3,8(r2)
   346d8:	e0bfff17 	ldw	r2,-4(fp)
   346dc:	1886d83a 	srl	r3,r3,r2
   346e0:	e0bffe17 	ldw	r2,-8(fp)
   346e4:	11000317 	ldw	r4,12(r2)
   346e8:	01400804 	movi	r5,32
   346ec:	e0bfff17 	ldw	r2,-4(fp)
   346f0:	2885c83a 	sub	r2,r5,r2
   346f4:	2084983a 	sll	r2,r4,r2
   346f8:	1887883a 	add	r3,r3,r2
   346fc:	e0bffe17 	ldw	r2,-8(fp)
   34700:	10c00215 	stw	r3,8(r2)
    r->d[3] = (r->d[3] >> n) + (r->d[4] << (32 - n));
   34704:	e0bffe17 	ldw	r2,-8(fp)
   34708:	10c00317 	ldw	r3,12(r2)
   3470c:	e0bfff17 	ldw	r2,-4(fp)
   34710:	1886d83a 	srl	r3,r3,r2
   34714:	e0bffe17 	ldw	r2,-8(fp)
   34718:	11000417 	ldw	r4,16(r2)
   3471c:	01400804 	movi	r5,32
   34720:	e0bfff17 	ldw	r2,-4(fp)
   34724:	2885c83a 	sub	r2,r5,r2
   34728:	2084983a 	sll	r2,r4,r2
   3472c:	1887883a 	add	r3,r3,r2
   34730:	e0bffe17 	ldw	r2,-8(fp)
   34734:	10c00315 	stw	r3,12(r2)
    r->d[4] = (r->d[4] >> n) + (r->d[5] << (32 - n));
   34738:	e0bffe17 	ldw	r2,-8(fp)
   3473c:	10c00417 	ldw	r3,16(r2)
   34740:	e0bfff17 	ldw	r2,-4(fp)
   34744:	1886d83a 	srl	r3,r3,r2
   34748:	e0bffe17 	ldw	r2,-8(fp)
   3474c:	11000517 	ldw	r4,20(r2)
   34750:	01400804 	movi	r5,32
   34754:	e0bfff17 	ldw	r2,-4(fp)
   34758:	2885c83a 	sub	r2,r5,r2
   3475c:	2084983a 	sll	r2,r4,r2
   34760:	1887883a 	add	r3,r3,r2
   34764:	e0bffe17 	ldw	r2,-8(fp)
   34768:	10c00415 	stw	r3,16(r2)
    r->d[5] = (r->d[5] >> n) + (r->d[6] << (32 - n));
   3476c:	e0bffe17 	ldw	r2,-8(fp)
   34770:	10c00517 	ldw	r3,20(r2)
   34774:	e0bfff17 	ldw	r2,-4(fp)
   34778:	1886d83a 	srl	r3,r3,r2
   3477c:	e0bffe17 	ldw	r2,-8(fp)
   34780:	11000617 	ldw	r4,24(r2)
   34784:	01400804 	movi	r5,32
   34788:	e0bfff17 	ldw	r2,-4(fp)
   3478c:	2885c83a 	sub	r2,r5,r2
   34790:	2084983a 	sll	r2,r4,r2
   34794:	1887883a 	add	r3,r3,r2
   34798:	e0bffe17 	ldw	r2,-8(fp)
   3479c:	10c00515 	stw	r3,20(r2)
    r->d[6] = (r->d[6] >> n) + (r->d[7] << (32 - n));
   347a0:	e0bffe17 	ldw	r2,-8(fp)
   347a4:	10c00617 	ldw	r3,24(r2)
   347a8:	e0bfff17 	ldw	r2,-4(fp)
   347ac:	1886d83a 	srl	r3,r3,r2
   347b0:	e0bffe17 	ldw	r2,-8(fp)
   347b4:	11000717 	ldw	r4,28(r2)
   347b8:	01400804 	movi	r5,32
   347bc:	e0bfff17 	ldw	r2,-4(fp)
   347c0:	2885c83a 	sub	r2,r5,r2
   347c4:	2084983a 	sll	r2,r4,r2
   347c8:	1887883a 	add	r3,r3,r2
   347cc:	e0bffe17 	ldw	r2,-8(fp)
   347d0:	10c00615 	stw	r3,24(r2)
    r->d[7] = (r->d[7] >> n);
   347d4:	e0bffe17 	ldw	r2,-8(fp)
   347d8:	10c00717 	ldw	r3,28(r2)
   347dc:	e0bfff17 	ldw	r2,-4(fp)
   347e0:	1886d83a 	srl	r3,r3,r2
   347e4:	e0bffe17 	ldw	r2,-8(fp)
   347e8:	10c00715 	stw	r3,28(r2)
    return ret;
   347ec:	e0bffd17 	ldw	r2,-12(fp)
}
   347f0:	e037883a 	mov	sp,fp
   347f4:	dfc00117 	ldw	ra,4(sp)
   347f8:	df000017 	ldw	fp,0(sp)
   347fc:	dec00204 	addi	sp,sp,8
   34800:	f800283a 	ret

00034804 <secp256k1_scalar_sqr>:

static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {
   34804:	deffec04 	addi	sp,sp,-80
   34808:	dfc01315 	stw	ra,76(sp)
   3480c:	df001215 	stw	fp,72(sp)
   34810:	df001204 	addi	fp,sp,72
   34814:	e13ffe15 	stw	r4,-8(fp)
   34818:	e17fff15 	stw	r5,-4(fp)
    uint32_t l[16];
    secp256k1_scalar_sqr_512(l, a);
   3481c:	e17fff17 	ldw	r5,-4(fp)
   34820:	e13fee04 	addi	r4,fp,-72
   34824:	002f2700 	call	2f270 <secp256k1_scalar_sqr_512>
    secp256k1_scalar_reduce_512(r, l);
   34828:	e17fee04 	addi	r5,fp,-72
   3482c:	e13ffe17 	ldw	r4,-8(fp)
   34830:	0025a940 	call	25a94 <secp256k1_scalar_reduce_512>
}
   34834:	0001883a 	nop
   34838:	e037883a 	mov	sp,fp
   3483c:	dfc00117 	ldw	ra,4(sp)
   34840:	df000017 	ldw	fp,0(sp)
   34844:	dec00204 	addi	sp,sp,8
   34848:	f800283a 	ret

0003484c <secp256k1_scalar_inverse>:
    };
    secp256k1_num_set_bin(r, order, 32);
}
#endif

static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {
   3484c:	deffa204 	addi	sp,sp,-376
   34850:	dfc05d15 	stw	ra,372(sp)
   34854:	df005c15 	stw	fp,368(sp)
   34858:	df005c04 	addi	fp,sp,368
   3485c:	e13ffe15 	stw	r4,-8(fp)
   34860:	e17fff15 	stw	r5,-4(fp)
    secp256k1_scalar *t;
    int i;
    /* First compute x ^ (2^N - 1) for some values of N. */
    secp256k1_scalar x2, x3, x4, x6, x7, x8, x15, x30, x60, x120, x127;

    secp256k1_scalar_sqr(&x2,  x);
   34864:	e0bfa604 	addi	r2,fp,-360
   34868:	e17fff17 	ldw	r5,-4(fp)
   3486c:	1009883a 	mov	r4,r2
   34870:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x2, &x2,  x);
   34874:	e0ffa604 	addi	r3,fp,-360
   34878:	e0bfa604 	addi	r2,fp,-360
   3487c:	e1bfff17 	ldw	r6,-4(fp)
   34880:	180b883a 	mov	r5,r3
   34884:	1009883a 	mov	r4,r2
   34888:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x3, &x2);
   3488c:	e0ffa604 	addi	r3,fp,-360
   34890:	e0bfae04 	addi	r2,fp,-328
   34894:	180b883a 	mov	r5,r3
   34898:	1009883a 	mov	r4,r2
   3489c:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x3, &x3,  x);
   348a0:	e0ffae04 	addi	r3,fp,-328
   348a4:	e0bfae04 	addi	r2,fp,-328
   348a8:	e1bfff17 	ldw	r6,-4(fp)
   348ac:	180b883a 	mov	r5,r3
   348b0:	1009883a 	mov	r4,r2
   348b4:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x4, &x3);
   348b8:	e0ffae04 	addi	r3,fp,-328
   348bc:	e0bfb604 	addi	r2,fp,-296
   348c0:	180b883a 	mov	r5,r3
   348c4:	1009883a 	mov	r4,r2
   348c8:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x4, &x4,  x);
   348cc:	e0ffb604 	addi	r3,fp,-296
   348d0:	e0bfb604 	addi	r2,fp,-296
   348d4:	e1bfff17 	ldw	r6,-4(fp)
   348d8:	180b883a 	mov	r5,r3
   348dc:	1009883a 	mov	r4,r2
   348e0:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x6, &x4);
   348e4:	e0ffb604 	addi	r3,fp,-296
   348e8:	e0bfbe04 	addi	r2,fp,-264
   348ec:	180b883a 	mov	r5,r3
   348f0:	1009883a 	mov	r4,r2
   348f4:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_sqr(&x6, &x6);
   348f8:	e0ffbe04 	addi	r3,fp,-264
   348fc:	e0bfbe04 	addi	r2,fp,-264
   34900:	180b883a 	mov	r5,r3
   34904:	1009883a 	mov	r4,r2
   34908:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x6, &x6, &x2);
   3490c:	e13fa604 	addi	r4,fp,-360
   34910:	e0ffbe04 	addi	r3,fp,-264
   34914:	e0bfbe04 	addi	r2,fp,-264
   34918:	200d883a 	mov	r6,r4
   3491c:	180b883a 	mov	r5,r3
   34920:	1009883a 	mov	r4,r2
   34924:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x7, &x6);
   34928:	e0ffbe04 	addi	r3,fp,-264
   3492c:	e0bfc604 	addi	r2,fp,-232
   34930:	180b883a 	mov	r5,r3
   34934:	1009883a 	mov	r4,r2
   34938:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x7, &x7,  x);
   3493c:	e0ffc604 	addi	r3,fp,-232
   34940:	e0bfc604 	addi	r2,fp,-232
   34944:	e1bfff17 	ldw	r6,-4(fp)
   34948:	180b883a 	mov	r5,r3
   3494c:	1009883a 	mov	r4,r2
   34950:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x8, &x7);
   34954:	e0ffc604 	addi	r3,fp,-232
   34958:	e0bfce04 	addi	r2,fp,-200
   3495c:	180b883a 	mov	r5,r3
   34960:	1009883a 	mov	r4,r2
   34964:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x8, &x8,  x);
   34968:	e0ffce04 	addi	r3,fp,-200
   3496c:	e0bfce04 	addi	r2,fp,-200
   34970:	e1bfff17 	ldw	r6,-4(fp)
   34974:	180b883a 	mov	r5,r3
   34978:	1009883a 	mov	r4,r2
   3497c:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x15, &x8);
   34980:	e0ffce04 	addi	r3,fp,-200
   34984:	e0bfd604 	addi	r2,fp,-168
   34988:	180b883a 	mov	r5,r3
   3498c:	1009883a 	mov	r4,r2
   34990:	00348040 	call	34804 <secp256k1_scalar_sqr>
    for (i = 0; i < 6; i++) {
   34994:	e03fa415 	stw	zero,-368(fp)
   34998:	00000806 	br	349bc <secp256k1_scalar_inverse+0x170>
        secp256k1_scalar_sqr(&x15, &x15);
   3499c:	e0ffd604 	addi	r3,fp,-168
   349a0:	e0bfd604 	addi	r2,fp,-168
   349a4:	180b883a 	mov	r5,r3
   349a8:	1009883a 	mov	r4,r2
   349ac:	00348040 	call	34804 <secp256k1_scalar_sqr>

    secp256k1_scalar_sqr(&x8, &x7);
    secp256k1_scalar_mul(&x8, &x8,  x);

    secp256k1_scalar_sqr(&x15, &x8);
    for (i = 0; i < 6; i++) {
   349b0:	e0bfa417 	ldw	r2,-368(fp)
   349b4:	10800044 	addi	r2,r2,1
   349b8:	e0bfa415 	stw	r2,-368(fp)
   349bc:	e0bfa417 	ldw	r2,-368(fp)
   349c0:	10800190 	cmplti	r2,r2,6
   349c4:	103ff51e 	bne	r2,zero,3499c <__alt_mem_epcs_flash_controller+0xfe02399c>
        secp256k1_scalar_sqr(&x15, &x15);
    }
    secp256k1_scalar_mul(&x15, &x15, &x7);
   349c8:	e13fc604 	addi	r4,fp,-232
   349cc:	e0ffd604 	addi	r3,fp,-168
   349d0:	e0bfd604 	addi	r2,fp,-168
   349d4:	200d883a 	mov	r6,r4
   349d8:	180b883a 	mov	r5,r3
   349dc:	1009883a 	mov	r4,r2
   349e0:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x30, &x15);
   349e4:	e0ffd604 	addi	r3,fp,-168
   349e8:	e0bfde04 	addi	r2,fp,-136
   349ec:	180b883a 	mov	r5,r3
   349f0:	1009883a 	mov	r4,r2
   349f4:	00348040 	call	34804 <secp256k1_scalar_sqr>
    for (i = 0; i < 14; i++) {
   349f8:	e03fa415 	stw	zero,-368(fp)
   349fc:	00000806 	br	34a20 <secp256k1_scalar_inverse+0x1d4>
        secp256k1_scalar_sqr(&x30, &x30);
   34a00:	e0ffde04 	addi	r3,fp,-136
   34a04:	e0bfde04 	addi	r2,fp,-136
   34a08:	180b883a 	mov	r5,r3
   34a0c:	1009883a 	mov	r4,r2
   34a10:	00348040 	call	34804 <secp256k1_scalar_sqr>
        secp256k1_scalar_sqr(&x15, &x15);
    }
    secp256k1_scalar_mul(&x15, &x15, &x7);

    secp256k1_scalar_sqr(&x30, &x15);
    for (i = 0; i < 14; i++) {
   34a14:	e0bfa417 	ldw	r2,-368(fp)
   34a18:	10800044 	addi	r2,r2,1
   34a1c:	e0bfa415 	stw	r2,-368(fp)
   34a20:	e0bfa417 	ldw	r2,-368(fp)
   34a24:	10800390 	cmplti	r2,r2,14
   34a28:	103ff51e 	bne	r2,zero,34a00 <__alt_mem_epcs_flash_controller+0xfe023a00>
        secp256k1_scalar_sqr(&x30, &x30);
    }
    secp256k1_scalar_mul(&x30, &x30, &x15);
   34a2c:	e13fd604 	addi	r4,fp,-168
   34a30:	e0ffde04 	addi	r3,fp,-136
   34a34:	e0bfde04 	addi	r2,fp,-136
   34a38:	200d883a 	mov	r6,r4
   34a3c:	180b883a 	mov	r5,r3
   34a40:	1009883a 	mov	r4,r2
   34a44:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x60, &x30);
   34a48:	e0ffde04 	addi	r3,fp,-136
   34a4c:	e0bfe604 	addi	r2,fp,-104
   34a50:	180b883a 	mov	r5,r3
   34a54:	1009883a 	mov	r4,r2
   34a58:	00348040 	call	34804 <secp256k1_scalar_sqr>
    for (i = 0; i < 29; i++) {
   34a5c:	e03fa415 	stw	zero,-368(fp)
   34a60:	00000806 	br	34a84 <secp256k1_scalar_inverse+0x238>
        secp256k1_scalar_sqr(&x60, &x60);
   34a64:	e0ffe604 	addi	r3,fp,-104
   34a68:	e0bfe604 	addi	r2,fp,-104
   34a6c:	180b883a 	mov	r5,r3
   34a70:	1009883a 	mov	r4,r2
   34a74:	00348040 	call	34804 <secp256k1_scalar_sqr>
        secp256k1_scalar_sqr(&x30, &x30);
    }
    secp256k1_scalar_mul(&x30, &x30, &x15);

    secp256k1_scalar_sqr(&x60, &x30);
    for (i = 0; i < 29; i++) {
   34a78:	e0bfa417 	ldw	r2,-368(fp)
   34a7c:	10800044 	addi	r2,r2,1
   34a80:	e0bfa415 	stw	r2,-368(fp)
   34a84:	e0bfa417 	ldw	r2,-368(fp)
   34a88:	10800750 	cmplti	r2,r2,29
   34a8c:	103ff51e 	bne	r2,zero,34a64 <__alt_mem_epcs_flash_controller+0xfe023a64>
        secp256k1_scalar_sqr(&x60, &x60);
    }
    secp256k1_scalar_mul(&x60, &x60, &x30);
   34a90:	e13fde04 	addi	r4,fp,-136
   34a94:	e0ffe604 	addi	r3,fp,-104
   34a98:	e0bfe604 	addi	r2,fp,-104
   34a9c:	200d883a 	mov	r6,r4
   34aa0:	180b883a 	mov	r5,r3
   34aa4:	1009883a 	mov	r4,r2
   34aa8:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x120, &x60);
   34aac:	e0ffe604 	addi	r3,fp,-104
   34ab0:	e0bfee04 	addi	r2,fp,-72
   34ab4:	180b883a 	mov	r5,r3
   34ab8:	1009883a 	mov	r4,r2
   34abc:	00348040 	call	34804 <secp256k1_scalar_sqr>
    for (i = 0; i < 59; i++) {
   34ac0:	e03fa415 	stw	zero,-368(fp)
   34ac4:	00000806 	br	34ae8 <secp256k1_scalar_inverse+0x29c>
        secp256k1_scalar_sqr(&x120, &x120);
   34ac8:	e0ffee04 	addi	r3,fp,-72
   34acc:	e0bfee04 	addi	r2,fp,-72
   34ad0:	180b883a 	mov	r5,r3
   34ad4:	1009883a 	mov	r4,r2
   34ad8:	00348040 	call	34804 <secp256k1_scalar_sqr>
        secp256k1_scalar_sqr(&x60, &x60);
    }
    secp256k1_scalar_mul(&x60, &x60, &x30);

    secp256k1_scalar_sqr(&x120, &x60);
    for (i = 0; i < 59; i++) {
   34adc:	e0bfa417 	ldw	r2,-368(fp)
   34ae0:	10800044 	addi	r2,r2,1
   34ae4:	e0bfa415 	stw	r2,-368(fp)
   34ae8:	e0bfa417 	ldw	r2,-368(fp)
   34aec:	10800ed0 	cmplti	r2,r2,59
   34af0:	103ff51e 	bne	r2,zero,34ac8 <__alt_mem_epcs_flash_controller+0xfe023ac8>
        secp256k1_scalar_sqr(&x120, &x120);
    }
    secp256k1_scalar_mul(&x120, &x120, &x60);
   34af4:	e13fe604 	addi	r4,fp,-104
   34af8:	e0ffee04 	addi	r3,fp,-72
   34afc:	e0bfee04 	addi	r2,fp,-72
   34b00:	200d883a 	mov	r6,r4
   34b04:	180b883a 	mov	r5,r3
   34b08:	1009883a 	mov	r4,r2
   34b0c:	00345580 	call	34558 <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x127, &x120);
   34b10:	e0ffee04 	addi	r3,fp,-72
   34b14:	e0bff604 	addi	r2,fp,-40
   34b18:	180b883a 	mov	r5,r3
   34b1c:	1009883a 	mov	r4,r2
   34b20:	00348040 	call	34804 <secp256k1_scalar_sqr>
    for (i = 0; i < 6; i++) {
   34b24:	e03fa415 	stw	zero,-368(fp)
   34b28:	00000806 	br	34b4c <secp256k1_scalar_inverse+0x300>
        secp256k1_scalar_sqr(&x127, &x127);
   34b2c:	e0fff604 	addi	r3,fp,-40
   34b30:	e0bff604 	addi	r2,fp,-40
   34b34:	180b883a 	mov	r5,r3
   34b38:	1009883a 	mov	r4,r2
   34b3c:	00348040 	call	34804 <secp256k1_scalar_sqr>
        secp256k1_scalar_sqr(&x120, &x120);
    }
    secp256k1_scalar_mul(&x120, &x120, &x60);

    secp256k1_scalar_sqr(&x127, &x120);
    for (i = 0; i < 6; i++) {
   34b40:	e0bfa417 	ldw	r2,-368(fp)
   34b44:	10800044 	addi	r2,r2,1
   34b48:	e0bfa415 	stw	r2,-368(fp)
   34b4c:	e0bfa417 	ldw	r2,-368(fp)
   34b50:	10800190 	cmplti	r2,r2,6
   34b54:	103ff51e 	bne	r2,zero,34b2c <__alt_mem_epcs_flash_controller+0xfe023b2c>
        secp256k1_scalar_sqr(&x127, &x127);
    }
    secp256k1_scalar_mul(&x127, &x127, &x7);
   34b58:	e13fc604 	addi	r4,fp,-232
   34b5c:	e0fff604 	addi	r3,fp,-40
   34b60:	e0bff604 	addi	r2,fp,-40
   34b64:	200d883a 	mov	r6,r4
   34b68:	180b883a 	mov	r5,r3
   34b6c:	1009883a 	mov	r4,r2
   34b70:	00345580 	call	34558 <secp256k1_scalar_mul>

    /* Then accumulate the final result (t starts at x127). */
    t = &x127;
   34b74:	e0bff604 	addi	r2,fp,-40
   34b78:	e0bfa515 	stw	r2,-364(fp)
    for (i = 0; i < 2; i++) { /* 0 */
   34b7c:	e03fa415 	stw	zero,-368(fp)
   34b80:	00000606 	br	34b9c <secp256k1_scalar_inverse+0x350>
        secp256k1_scalar_sqr(t, t);
   34b84:	e17fa517 	ldw	r5,-364(fp)
   34b88:	e13fa517 	ldw	r4,-364(fp)
   34b8c:	00348040 	call	34804 <secp256k1_scalar_sqr>
    }
    secp256k1_scalar_mul(&x127, &x127, &x7);

    /* Then accumulate the final result (t starts at x127). */
    t = &x127;
    for (i = 0; i < 2; i++) { /* 0 */
   34b90:	e0bfa417 	ldw	r2,-368(fp)
   34b94:	10800044 	addi	r2,r2,1
   34b98:	e0bfa415 	stw	r2,-368(fp)
   34b9c:	e0bfa417 	ldw	r2,-368(fp)
   34ba0:	10800090 	cmplti	r2,r2,2
   34ba4:	103ff71e 	bne	r2,zero,34b84 <__alt_mem_epcs_flash_controller+0xfe023b84>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34ba8:	e1bfff17 	ldw	r6,-4(fp)
   34bac:	e17fa517 	ldw	r5,-364(fp)
   34bb0:	e13fa517 	ldw	r4,-364(fp)
   34bb4:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 0 */
   34bb8:	e03fa415 	stw	zero,-368(fp)
   34bbc:	00000606 	br	34bd8 <secp256k1_scalar_inverse+0x38c>
        secp256k1_scalar_sqr(t, t);
   34bc0:	e17fa517 	ldw	r5,-364(fp)
   34bc4:	e13fa517 	ldw	r4,-364(fp)
   34bc8:	00348040 	call	34804 <secp256k1_scalar_sqr>
    t = &x127;
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 0 */
   34bcc:	e0bfa417 	ldw	r2,-368(fp)
   34bd0:	10800044 	addi	r2,r2,1
   34bd4:	e0bfa415 	stw	r2,-368(fp)
   34bd8:	e0bfa417 	ldw	r2,-368(fp)
   34bdc:	10800110 	cmplti	r2,r2,4
   34be0:	103ff71e 	bne	r2,zero,34bc0 <__alt_mem_epcs_flash_controller+0xfe023bc0>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   34be4:	e0bfae04 	addi	r2,fp,-328
   34be8:	100d883a 	mov	r6,r2
   34bec:	e17fa517 	ldw	r5,-364(fp)
   34bf0:	e13fa517 	ldw	r4,-364(fp)
   34bf4:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   34bf8:	e03fa415 	stw	zero,-368(fp)
   34bfc:	00000606 	br	34c18 <secp256k1_scalar_inverse+0x3cc>
        secp256k1_scalar_sqr(t, t);
   34c00:	e17fa517 	ldw	r5,-364(fp)
   34c04:	e13fa517 	ldw	r4,-364(fp)
   34c08:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 2; i++) { /* 0 */
   34c0c:	e0bfa417 	ldw	r2,-368(fp)
   34c10:	10800044 	addi	r2,r2,1
   34c14:	e0bfa415 	stw	r2,-368(fp)
   34c18:	e0bfa417 	ldw	r2,-368(fp)
   34c1c:	10800090 	cmplti	r2,r2,2
   34c20:	103ff71e 	bne	r2,zero,34c00 <__alt_mem_epcs_flash_controller+0xfe023c00>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34c24:	e1bfff17 	ldw	r6,-4(fp)
   34c28:	e17fa517 	ldw	r5,-364(fp)
   34c2c:	e13fa517 	ldw	r4,-364(fp)
   34c30:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   34c34:	e03fa415 	stw	zero,-368(fp)
   34c38:	00000606 	br	34c54 <secp256k1_scalar_inverse+0x408>
        secp256k1_scalar_sqr(t, t);
   34c3c:	e17fa517 	ldw	r5,-364(fp)
   34c40:	e13fa517 	ldw	r4,-364(fp)
   34c44:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
   34c48:	e0bfa417 	ldw	r2,-368(fp)
   34c4c:	10800044 	addi	r2,r2,1
   34c50:	e0bfa415 	stw	r2,-368(fp)
   34c54:	e0bfa417 	ldw	r2,-368(fp)
   34c58:	10800090 	cmplti	r2,r2,2
   34c5c:	103ff71e 	bne	r2,zero,34c3c <__alt_mem_epcs_flash_controller+0xfe023c3c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34c60:	e1bfff17 	ldw	r6,-4(fp)
   34c64:	e17fa517 	ldw	r5,-364(fp)
   34c68:	e13fa517 	ldw	r4,-364(fp)
   34c6c:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   34c70:	e03fa415 	stw	zero,-368(fp)
   34c74:	00000606 	br	34c90 <secp256k1_scalar_inverse+0x444>
        secp256k1_scalar_sqr(t, t);
   34c78:	e17fa517 	ldw	r5,-364(fp)
   34c7c:	e13fa517 	ldw	r4,-364(fp)
   34c80:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
   34c84:	e0bfa417 	ldw	r2,-368(fp)
   34c88:	10800044 	addi	r2,r2,1
   34c8c:	e0bfa415 	stw	r2,-368(fp)
   34c90:	e0bfa417 	ldw	r2,-368(fp)
   34c94:	10800090 	cmplti	r2,r2,2
   34c98:	103ff71e 	bne	r2,zero,34c78 <__alt_mem_epcs_flash_controller+0xfe023c78>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34c9c:	e1bfff17 	ldw	r6,-4(fp)
   34ca0:	e17fa517 	ldw	r5,-364(fp)
   34ca4:	e13fa517 	ldw	r4,-364(fp)
   34ca8:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 0 */
   34cac:	e03fa415 	stw	zero,-368(fp)
   34cb0:	00000606 	br	34ccc <secp256k1_scalar_inverse+0x480>
        secp256k1_scalar_sqr(t, t);
   34cb4:	e17fa517 	ldw	r5,-364(fp)
   34cb8:	e13fa517 	ldw	r4,-364(fp)
   34cbc:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 0 */
   34cc0:	e0bfa417 	ldw	r2,-368(fp)
   34cc4:	10800044 	addi	r2,r2,1
   34cc8:	e0bfa415 	stw	r2,-368(fp)
   34ccc:	e0bfa417 	ldw	r2,-368(fp)
   34cd0:	10800110 	cmplti	r2,r2,4
   34cd4:	103ff71e 	bne	r2,zero,34cb4 <__alt_mem_epcs_flash_controller+0xfe023cb4>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   34cd8:	e0bfae04 	addi	r2,fp,-328
   34cdc:	100d883a 	mov	r6,r2
   34ce0:	e17fa517 	ldw	r5,-364(fp)
   34ce4:	e13fa517 	ldw	r4,-364(fp)
   34ce8:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 0 */
   34cec:	e03fa415 	stw	zero,-368(fp)
   34cf0:	00000606 	br	34d0c <secp256k1_scalar_inverse+0x4c0>
        secp256k1_scalar_sqr(t, t);
   34cf4:	e17fa517 	ldw	r5,-364(fp)
   34cf8:	e13fa517 	ldw	r4,-364(fp)
   34cfc:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 3; i++) { /* 0 */
   34d00:	e0bfa417 	ldw	r2,-368(fp)
   34d04:	10800044 	addi	r2,r2,1
   34d08:	e0bfa415 	stw	r2,-368(fp)
   34d0c:	e0bfa417 	ldw	r2,-368(fp)
   34d10:	108000d0 	cmplti	r2,r2,3
   34d14:	103ff71e 	bne	r2,zero,34cf4 <__alt_mem_epcs_flash_controller+0xfe023cf4>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   34d18:	e0bfa604 	addi	r2,fp,-360
   34d1c:	100d883a 	mov	r6,r2
   34d20:	e17fa517 	ldw	r5,-364(fp)
   34d24:	e13fa517 	ldw	r4,-364(fp)
   34d28:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 0 */
   34d2c:	e03fa415 	stw	zero,-368(fp)
   34d30:	00000606 	br	34d4c <secp256k1_scalar_inverse+0x500>
        secp256k1_scalar_sqr(t, t);
   34d34:	e17fa517 	ldw	r5,-364(fp)
   34d38:	e13fa517 	ldw	r4,-364(fp)
   34d3c:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 3; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 4; i++) { /* 0 */
   34d40:	e0bfa417 	ldw	r2,-368(fp)
   34d44:	10800044 	addi	r2,r2,1
   34d48:	e0bfa415 	stw	r2,-368(fp)
   34d4c:	e0bfa417 	ldw	r2,-368(fp)
   34d50:	10800110 	cmplti	r2,r2,4
   34d54:	103ff71e 	bne	r2,zero,34d34 <__alt_mem_epcs_flash_controller+0xfe023d34>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   34d58:	e0bfae04 	addi	r2,fp,-328
   34d5c:	100d883a 	mov	r6,r2
   34d60:	e17fa517 	ldw	r5,-364(fp)
   34d64:	e13fa517 	ldw	r4,-364(fp)
   34d68:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 5; i++) { /* 00 */
   34d6c:	e03fa415 	stw	zero,-368(fp)
   34d70:	00000606 	br	34d8c <secp256k1_scalar_inverse+0x540>
        secp256k1_scalar_sqr(t, t);
   34d74:	e17fa517 	ldw	r5,-364(fp)
   34d78:	e13fa517 	ldw	r4,-364(fp)
   34d7c:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 4; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 5; i++) { /* 00 */
   34d80:	e0bfa417 	ldw	r2,-368(fp)
   34d84:	10800044 	addi	r2,r2,1
   34d88:	e0bfa415 	stw	r2,-368(fp)
   34d8c:	e0bfa417 	ldw	r2,-368(fp)
   34d90:	10800150 	cmplti	r2,r2,5
   34d94:	103ff71e 	bne	r2,zero,34d74 <__alt_mem_epcs_flash_controller+0xfe023d74>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   34d98:	e0bfae04 	addi	r2,fp,-328
   34d9c:	100d883a 	mov	r6,r2
   34da0:	e17fa517 	ldw	r5,-364(fp)
   34da4:	e13fa517 	ldw	r4,-364(fp)
   34da8:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 00 */
   34dac:	e03fa415 	stw	zero,-368(fp)
   34db0:	00000606 	br	34dcc <secp256k1_scalar_inverse+0x580>
        secp256k1_scalar_sqr(t, t);
   34db4:	e17fa517 	ldw	r5,-364(fp)
   34db8:	e13fa517 	ldw	r4,-364(fp)
   34dbc:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 5; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 4; i++) { /* 00 */
   34dc0:	e0bfa417 	ldw	r2,-368(fp)
   34dc4:	10800044 	addi	r2,r2,1
   34dc8:	e0bfa415 	stw	r2,-368(fp)
   34dcc:	e0bfa417 	ldw	r2,-368(fp)
   34dd0:	10800110 	cmplti	r2,r2,4
   34dd4:	103ff71e 	bne	r2,zero,34db4 <__alt_mem_epcs_flash_controller+0xfe023db4>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   34dd8:	e0bfa604 	addi	r2,fp,-360
   34ddc:	100d883a 	mov	r6,r2
   34de0:	e17fa517 	ldw	r5,-364(fp)
   34de4:	e13fa517 	ldw	r4,-364(fp)
   34de8:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   34dec:	e03fa415 	stw	zero,-368(fp)
   34df0:	00000606 	br	34e0c <secp256k1_scalar_inverse+0x5c0>
        secp256k1_scalar_sqr(t, t);
   34df4:	e17fa517 	ldw	r5,-364(fp)
   34df8:	e13fa517 	ldw	r4,-364(fp)
   34dfc:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 4; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 2; i++) { /* 0 */
   34e00:	e0bfa417 	ldw	r2,-368(fp)
   34e04:	10800044 	addi	r2,r2,1
   34e08:	e0bfa415 	stw	r2,-368(fp)
   34e0c:	e0bfa417 	ldw	r2,-368(fp)
   34e10:	10800090 	cmplti	r2,r2,2
   34e14:	103ff71e 	bne	r2,zero,34df4 <__alt_mem_epcs_flash_controller+0xfe023df4>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34e18:	e1bfff17 	ldw	r6,-4(fp)
   34e1c:	e17fa517 	ldw	r5,-364(fp)
   34e20:	e13fa517 	ldw	r4,-364(fp)
   34e24:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   34e28:	e03fa415 	stw	zero,-368(fp)
   34e2c:	00000606 	br	34e48 <secp256k1_scalar_inverse+0x5fc>
        secp256k1_scalar_sqr(t, t);
   34e30:	e17fa517 	ldw	r5,-364(fp)
   34e34:	e13fa517 	ldw	r4,-364(fp)
   34e38:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
   34e3c:	e0bfa417 	ldw	r2,-368(fp)
   34e40:	10800044 	addi	r2,r2,1
   34e44:	e0bfa415 	stw	r2,-368(fp)
   34e48:	e0bfa417 	ldw	r2,-368(fp)
   34e4c:	10800090 	cmplti	r2,r2,2
   34e50:	103ff71e 	bne	r2,zero,34e30 <__alt_mem_epcs_flash_controller+0xfe023e30>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34e54:	e1bfff17 	ldw	r6,-4(fp)
   34e58:	e17fa517 	ldw	r5,-364(fp)
   34e5c:	e13fa517 	ldw	r4,-364(fp)
   34e60:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 5; i++) { /* 0 */
   34e64:	e03fa415 	stw	zero,-368(fp)
   34e68:	00000606 	br	34e84 <secp256k1_scalar_inverse+0x638>
        secp256k1_scalar_sqr(t, t);
   34e6c:	e17fa517 	ldw	r5,-364(fp)
   34e70:	e13fa517 	ldw	r4,-364(fp)
   34e74:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 0 */
   34e78:	e0bfa417 	ldw	r2,-368(fp)
   34e7c:	10800044 	addi	r2,r2,1
   34e80:	e0bfa415 	stw	r2,-368(fp)
   34e84:	e0bfa417 	ldw	r2,-368(fp)
   34e88:	10800150 	cmplti	r2,r2,5
   34e8c:	103ff71e 	bne	r2,zero,34e6c <__alt_mem_epcs_flash_controller+0xfe023e6c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
   34e90:	e0bfb604 	addi	r2,fp,-296
   34e94:	100d883a 	mov	r6,r2
   34e98:	e17fa517 	ldw	r5,-364(fp)
   34e9c:	e13fa517 	ldw	r4,-364(fp)
   34ea0:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   34ea4:	e03fa415 	stw	zero,-368(fp)
   34ea8:	00000606 	br	34ec4 <secp256k1_scalar_inverse+0x678>
        secp256k1_scalar_sqr(t, t);
   34eac:	e17fa517 	ldw	r5,-364(fp)
   34eb0:	e13fa517 	ldw	r4,-364(fp)
   34eb4:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
    for (i = 0; i < 2; i++) { /* 0 */
   34eb8:	e0bfa417 	ldw	r2,-368(fp)
   34ebc:	10800044 	addi	r2,r2,1
   34ec0:	e0bfa415 	stw	r2,-368(fp)
   34ec4:	e0bfa417 	ldw	r2,-368(fp)
   34ec8:	10800090 	cmplti	r2,r2,2
   34ecc:	103ff71e 	bne	r2,zero,34eac <__alt_mem_epcs_flash_controller+0xfe023eac>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34ed0:	e1bfff17 	ldw	r6,-4(fp)
   34ed4:	e17fa517 	ldw	r5,-364(fp)
   34ed8:	e13fa517 	ldw	r4,-364(fp)
   34edc:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 00 */
   34ee0:	e03fa415 	stw	zero,-368(fp)
   34ee4:	00000606 	br	34f00 <secp256k1_scalar_inverse+0x6b4>
        secp256k1_scalar_sqr(t, t);
   34ee8:	e17fa517 	ldw	r5,-364(fp)
   34eec:	e13fa517 	ldw	r4,-364(fp)
   34ef0:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
   34ef4:	e0bfa417 	ldw	r2,-368(fp)
   34ef8:	10800044 	addi	r2,r2,1
   34efc:	e0bfa415 	stw	r2,-368(fp)
   34f00:	e0bfa417 	ldw	r2,-368(fp)
   34f04:	108000d0 	cmplti	r2,r2,3
   34f08:	103ff71e 	bne	r2,zero,34ee8 <__alt_mem_epcs_flash_controller+0xfe023ee8>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34f0c:	e1bfff17 	ldw	r6,-4(fp)
   34f10:	e17fa517 	ldw	r5,-364(fp)
   34f14:	e13fa517 	ldw	r4,-364(fp)
   34f18:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 000 */
   34f1c:	e03fa415 	stw	zero,-368(fp)
   34f20:	00000606 	br	34f3c <secp256k1_scalar_inverse+0x6f0>
        secp256k1_scalar_sqr(t, t);
   34f24:	e17fa517 	ldw	r5,-364(fp)
   34f28:	e13fa517 	ldw	r4,-364(fp)
   34f2c:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 000 */
   34f30:	e0bfa417 	ldw	r2,-368(fp)
   34f34:	10800044 	addi	r2,r2,1
   34f38:	e0bfa415 	stw	r2,-368(fp)
   34f3c:	e0bfa417 	ldw	r2,-368(fp)
   34f40:	10800110 	cmplti	r2,r2,4
   34f44:	103ff71e 	bne	r2,zero,34f24 <__alt_mem_epcs_flash_controller+0xfe023f24>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34f48:	e1bfff17 	ldw	r6,-4(fp)
   34f4c:	e17fa517 	ldw	r5,-364(fp)
   34f50:	e13fa517 	ldw	r4,-364(fp)
   34f54:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   34f58:	e03fa415 	stw	zero,-368(fp)
   34f5c:	00000606 	br	34f78 <secp256k1_scalar_inverse+0x72c>
        secp256k1_scalar_sqr(t, t);
   34f60:	e17fa517 	ldw	r5,-364(fp)
   34f64:	e13fa517 	ldw	r4,-364(fp)
   34f68:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
   34f6c:	e0bfa417 	ldw	r2,-368(fp)
   34f70:	10800044 	addi	r2,r2,1
   34f74:	e0bfa415 	stw	r2,-368(fp)
   34f78:	e0bfa417 	ldw	r2,-368(fp)
   34f7c:	10800090 	cmplti	r2,r2,2
   34f80:	103ff71e 	bne	r2,zero,34f60 <__alt_mem_epcs_flash_controller+0xfe023f60>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   34f84:	e1bfff17 	ldw	r6,-4(fp)
   34f88:	e17fa517 	ldw	r5,-364(fp)
   34f8c:	e13fa517 	ldw	r4,-364(fp)
   34f90:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 10; i++) { /* 0000000 */
   34f94:	e03fa415 	stw	zero,-368(fp)
   34f98:	00000606 	br	34fb4 <secp256k1_scalar_inverse+0x768>
        secp256k1_scalar_sqr(t, t);
   34f9c:	e17fa517 	ldw	r5,-364(fp)
   34fa0:	e13fa517 	ldw	r4,-364(fp)
   34fa4:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 10; i++) { /* 0000000 */
   34fa8:	e0bfa417 	ldw	r2,-368(fp)
   34fac:	10800044 	addi	r2,r2,1
   34fb0:	e0bfa415 	stw	r2,-368(fp)
   34fb4:	e0bfa417 	ldw	r2,-368(fp)
   34fb8:	10800290 	cmplti	r2,r2,10
   34fbc:	103ff71e 	bne	r2,zero,34f9c <__alt_mem_epcs_flash_controller+0xfe023f9c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   34fc0:	e0bfae04 	addi	r2,fp,-328
   34fc4:	100d883a 	mov	r6,r2
   34fc8:	e17fa517 	ldw	r5,-364(fp)
   34fcc:	e13fa517 	ldw	r4,-364(fp)
   34fd0:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 0 */
   34fd4:	e03fa415 	stw	zero,-368(fp)
   34fd8:	00000606 	br	34ff4 <secp256k1_scalar_inverse+0x7a8>
        secp256k1_scalar_sqr(t, t);
   34fdc:	e17fa517 	ldw	r5,-364(fp)
   34fe0:	e13fa517 	ldw	r4,-364(fp)
   34fe4:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 10; i++) { /* 0000000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 4; i++) { /* 0 */
   34fe8:	e0bfa417 	ldw	r2,-368(fp)
   34fec:	10800044 	addi	r2,r2,1
   34ff0:	e0bfa415 	stw	r2,-368(fp)
   34ff4:	e0bfa417 	ldw	r2,-368(fp)
   34ff8:	10800110 	cmplti	r2,r2,4
   34ffc:	103ff71e 	bne	r2,zero,34fdc <__alt_mem_epcs_flash_controller+0xfe023fdc>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   35000:	e0bfae04 	addi	r2,fp,-328
   35004:	100d883a 	mov	r6,r2
   35008:	e17fa517 	ldw	r5,-364(fp)
   3500c:	e13fa517 	ldw	r4,-364(fp)
   35010:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 9; i++) { /* 0 */
   35014:	e03fa415 	stw	zero,-368(fp)
   35018:	00000606 	br	35034 <secp256k1_scalar_inverse+0x7e8>
        secp256k1_scalar_sqr(t, t);
   3501c:	e17fa517 	ldw	r5,-364(fp)
   35020:	e13fa517 	ldw	r4,-364(fp)
   35024:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 4; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 9; i++) { /* 0 */
   35028:	e0bfa417 	ldw	r2,-368(fp)
   3502c:	10800044 	addi	r2,r2,1
   35030:	e0bfa415 	stw	r2,-368(fp)
   35034:	e0bfa417 	ldw	r2,-368(fp)
   35038:	10800250 	cmplti	r2,r2,9
   3503c:	103ff71e 	bne	r2,zero,3501c <__alt_mem_epcs_flash_controller+0xfe02401c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x8); /* 11111111 */
   35040:	e0bfce04 	addi	r2,fp,-200
   35044:	100d883a 	mov	r6,r2
   35048:	e17fa517 	ldw	r5,-364(fp)
   3504c:	e13fa517 	ldw	r4,-364(fp)
   35050:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   35054:	e03fa415 	stw	zero,-368(fp)
   35058:	00000606 	br	35074 <secp256k1_scalar_inverse+0x828>
        secp256k1_scalar_sqr(t, t);
   3505c:	e17fa517 	ldw	r5,-364(fp)
   35060:	e13fa517 	ldw	r4,-364(fp)
   35064:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 9; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x8); /* 11111111 */
    for (i = 0; i < 2; i++) { /* 0 */
   35068:	e0bfa417 	ldw	r2,-368(fp)
   3506c:	10800044 	addi	r2,r2,1
   35070:	e0bfa415 	stw	r2,-368(fp)
   35074:	e0bfa417 	ldw	r2,-368(fp)
   35078:	10800090 	cmplti	r2,r2,2
   3507c:	103ff71e 	bne	r2,zero,3505c <__alt_mem_epcs_flash_controller+0xfe02405c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   35080:	e1bfff17 	ldw	r6,-4(fp)
   35084:	e17fa517 	ldw	r5,-364(fp)
   35088:	e13fa517 	ldw	r4,-364(fp)
   3508c:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 00 */
   35090:	e03fa415 	stw	zero,-368(fp)
   35094:	00000606 	br	350b0 <secp256k1_scalar_inverse+0x864>
        secp256k1_scalar_sqr(t, t);
   35098:	e17fa517 	ldw	r5,-364(fp)
   3509c:	e13fa517 	ldw	r4,-364(fp)
   350a0:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x8); /* 11111111 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
   350a4:	e0bfa417 	ldw	r2,-368(fp)
   350a8:	10800044 	addi	r2,r2,1
   350ac:	e0bfa415 	stw	r2,-368(fp)
   350b0:	e0bfa417 	ldw	r2,-368(fp)
   350b4:	108000d0 	cmplti	r2,r2,3
   350b8:	103ff71e 	bne	r2,zero,35098 <__alt_mem_epcs_flash_controller+0xfe024098>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   350bc:	e1bfff17 	ldw	r6,-4(fp)
   350c0:	e17fa517 	ldw	r5,-364(fp)
   350c4:	e13fa517 	ldw	r4,-364(fp)
   350c8:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 00 */
   350cc:	e03fa415 	stw	zero,-368(fp)
   350d0:	00000606 	br	350ec <secp256k1_scalar_inverse+0x8a0>
        secp256k1_scalar_sqr(t, t);
   350d4:	e17fa517 	ldw	r5,-364(fp)
   350d8:	e13fa517 	ldw	r4,-364(fp)
   350dc:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
   350e0:	e0bfa417 	ldw	r2,-368(fp)
   350e4:	10800044 	addi	r2,r2,1
   350e8:	e0bfa415 	stw	r2,-368(fp)
   350ec:	e0bfa417 	ldw	r2,-368(fp)
   350f0:	108000d0 	cmplti	r2,r2,3
   350f4:	103ff71e 	bne	r2,zero,350d4 <__alt_mem_epcs_flash_controller+0xfe0240d4>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   350f8:	e1bfff17 	ldw	r6,-4(fp)
   350fc:	e17fa517 	ldw	r5,-364(fp)
   35100:	e13fa517 	ldw	r4,-364(fp)
   35104:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 5; i++) { /* 0 */
   35108:	e03fa415 	stw	zero,-368(fp)
   3510c:	00000606 	br	35128 <secp256k1_scalar_inverse+0x8dc>
        secp256k1_scalar_sqr(t, t);
   35110:	e17fa517 	ldw	r5,-364(fp)
   35114:	e13fa517 	ldw	r4,-364(fp)
   35118:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 0 */
   3511c:	e0bfa417 	ldw	r2,-368(fp)
   35120:	10800044 	addi	r2,r2,1
   35124:	e0bfa415 	stw	r2,-368(fp)
   35128:	e0bfa417 	ldw	r2,-368(fp)
   3512c:	10800150 	cmplti	r2,r2,5
   35130:	103ff71e 	bne	r2,zero,35110 <__alt_mem_epcs_flash_controller+0xfe024110>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
   35134:	e0bfb604 	addi	r2,fp,-296
   35138:	100d883a 	mov	r6,r2
   3513c:	e17fa517 	ldw	r5,-364(fp)
   35140:	e13fa517 	ldw	r4,-364(fp)
   35144:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   35148:	e03fa415 	stw	zero,-368(fp)
   3514c:	00000606 	br	35168 <secp256k1_scalar_inverse+0x91c>
        secp256k1_scalar_sqr(t, t);
   35150:	e17fa517 	ldw	r5,-364(fp)
   35154:	e13fa517 	ldw	r4,-364(fp)
   35158:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
    for (i = 0; i < 2; i++) { /* 0 */
   3515c:	e0bfa417 	ldw	r2,-368(fp)
   35160:	10800044 	addi	r2,r2,1
   35164:	e0bfa415 	stw	r2,-368(fp)
   35168:	e0bfa417 	ldw	r2,-368(fp)
   3516c:	10800090 	cmplti	r2,r2,2
   35170:	103ff71e 	bne	r2,zero,35150 <__alt_mem_epcs_flash_controller+0xfe024150>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   35174:	e1bfff17 	ldw	r6,-4(fp)
   35178:	e17fa517 	ldw	r5,-364(fp)
   3517c:	e13fa517 	ldw	r4,-364(fp)
   35180:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 5; i++) { /* 000 */
   35184:	e03fa415 	stw	zero,-368(fp)
   35188:	00000606 	br	351a4 <secp256k1_scalar_inverse+0x958>
        secp256k1_scalar_sqr(t, t);
   3518c:	e17fa517 	ldw	r5,-364(fp)
   35190:	e13fa517 	ldw	r4,-364(fp)
   35194:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 000 */
   35198:	e0bfa417 	ldw	r2,-368(fp)
   3519c:	10800044 	addi	r2,r2,1
   351a0:	e0bfa415 	stw	r2,-368(fp)
   351a4:	e0bfa417 	ldw	r2,-368(fp)
   351a8:	10800150 	cmplti	r2,r2,5
   351ac:	103ff71e 	bne	r2,zero,3518c <__alt_mem_epcs_flash_controller+0xfe02418c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   351b0:	e0bfa604 	addi	r2,fp,-360
   351b4:	100d883a 	mov	r6,r2
   351b8:	e17fa517 	ldw	r5,-364(fp)
   351bc:	e13fa517 	ldw	r4,-364(fp)
   351c0:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 00 */
   351c4:	e03fa415 	stw	zero,-368(fp)
   351c8:	00000606 	br	351e4 <secp256k1_scalar_inverse+0x998>
        secp256k1_scalar_sqr(t, t);
   351cc:	e17fa517 	ldw	r5,-364(fp)
   351d0:	e13fa517 	ldw	r4,-364(fp)
   351d4:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 4; i++) { /* 00 */
   351d8:	e0bfa417 	ldw	r2,-368(fp)
   351dc:	10800044 	addi	r2,r2,1
   351e0:	e0bfa415 	stw	r2,-368(fp)
   351e4:	e0bfa417 	ldw	r2,-368(fp)
   351e8:	10800110 	cmplti	r2,r2,4
   351ec:	103ff71e 	bne	r2,zero,351cc <__alt_mem_epcs_flash_controller+0xfe0241cc>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   351f0:	e0bfa604 	addi	r2,fp,-360
   351f4:	100d883a 	mov	r6,r2
   351f8:	e17fa517 	ldw	r5,-364(fp)
   351fc:	e13fa517 	ldw	r4,-364(fp)
   35200:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   35204:	e03fa415 	stw	zero,-368(fp)
   35208:	00000606 	br	35224 <secp256k1_scalar_inverse+0x9d8>
        secp256k1_scalar_sqr(t, t);
   3520c:	e17fa517 	ldw	r5,-364(fp)
   35210:	e13fa517 	ldw	r4,-364(fp)
   35214:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 4; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 2; i++) { /* 0 */
   35218:	e0bfa417 	ldw	r2,-368(fp)
   3521c:	10800044 	addi	r2,r2,1
   35220:	e0bfa415 	stw	r2,-368(fp)
   35224:	e0bfa417 	ldw	r2,-368(fp)
   35228:	10800090 	cmplti	r2,r2,2
   3522c:	103ff71e 	bne	r2,zero,3520c <__alt_mem_epcs_flash_controller+0xfe02420c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   35230:	e1bfff17 	ldw	r6,-4(fp)
   35234:	e17fa517 	ldw	r5,-364(fp)
   35238:	e13fa517 	ldw	r4,-364(fp)
   3523c:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 8; i++) { /* 000000 */
   35240:	e03fa415 	stw	zero,-368(fp)
   35244:	00000606 	br	35260 <secp256k1_scalar_inverse+0xa14>
        secp256k1_scalar_sqr(t, t);
   35248:	e17fa517 	ldw	r5,-364(fp)
   3524c:	e13fa517 	ldw	r4,-364(fp)
   35250:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 8; i++) { /* 000000 */
   35254:	e0bfa417 	ldw	r2,-368(fp)
   35258:	10800044 	addi	r2,r2,1
   3525c:	e0bfa415 	stw	r2,-368(fp)
   35260:	e0bfa417 	ldw	r2,-368(fp)
   35264:	10800210 	cmplti	r2,r2,8
   35268:	103ff71e 	bne	r2,zero,35248 <__alt_mem_epcs_flash_controller+0xfe024248>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   3526c:	e0bfa604 	addi	r2,fp,-360
   35270:	100d883a 	mov	r6,r2
   35274:	e17fa517 	ldw	r5,-364(fp)
   35278:	e13fa517 	ldw	r4,-364(fp)
   3527c:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 0 */
   35280:	e03fa415 	stw	zero,-368(fp)
   35284:	00000606 	br	352a0 <secp256k1_scalar_inverse+0xa54>
        secp256k1_scalar_sqr(t, t);
   35288:	e17fa517 	ldw	r5,-364(fp)
   3528c:	e13fa517 	ldw	r4,-364(fp)
   35290:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 8; i++) { /* 000000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 3; i++) { /* 0 */
   35294:	e0bfa417 	ldw	r2,-368(fp)
   35298:	10800044 	addi	r2,r2,1
   3529c:	e0bfa415 	stw	r2,-368(fp)
   352a0:	e0bfa417 	ldw	r2,-368(fp)
   352a4:	108000d0 	cmplti	r2,r2,3
   352a8:	103ff71e 	bne	r2,zero,35288 <__alt_mem_epcs_flash_controller+0xfe024288>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   352ac:	e0bfa604 	addi	r2,fp,-360
   352b0:	100d883a 	mov	r6,r2
   352b4:	e17fa517 	ldw	r5,-364(fp)
   352b8:	e13fa517 	ldw	r4,-364(fp)
   352bc:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 00 */
   352c0:	e03fa415 	stw	zero,-368(fp)
   352c4:	00000606 	br	352e0 <secp256k1_scalar_inverse+0xa94>
        secp256k1_scalar_sqr(t, t);
   352c8:	e17fa517 	ldw	r5,-364(fp)
   352cc:	e13fa517 	ldw	r4,-364(fp)
   352d0:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 3; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 3; i++) { /* 00 */
   352d4:	e0bfa417 	ldw	r2,-368(fp)
   352d8:	10800044 	addi	r2,r2,1
   352dc:	e0bfa415 	stw	r2,-368(fp)
   352e0:	e0bfa417 	ldw	r2,-368(fp)
   352e4:	108000d0 	cmplti	r2,r2,3
   352e8:	103ff71e 	bne	r2,zero,352c8 <__alt_mem_epcs_flash_controller+0xfe0242c8>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   352ec:	e1bfff17 	ldw	r6,-4(fp)
   352f0:	e17fa517 	ldw	r5,-364(fp)
   352f4:	e13fa517 	ldw	r4,-364(fp)
   352f8:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 6; i++) { /* 00000 */
   352fc:	e03fa415 	stw	zero,-368(fp)
   35300:	00000606 	br	3531c <secp256k1_scalar_inverse+0xad0>
        secp256k1_scalar_sqr(t, t);
   35304:	e17fa517 	ldw	r5,-364(fp)
   35308:	e13fa517 	ldw	r4,-364(fp)
   3530c:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 3; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 6; i++) { /* 00000 */
   35310:	e0bfa417 	ldw	r2,-368(fp)
   35314:	10800044 	addi	r2,r2,1
   35318:	e0bfa415 	stw	r2,-368(fp)
   3531c:	e0bfa417 	ldw	r2,-368(fp)
   35320:	10800190 	cmplti	r2,r2,6
   35324:	103ff71e 	bne	r2,zero,35304 <__alt_mem_epcs_flash_controller+0xfe024304>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   35328:	e1bfff17 	ldw	r6,-4(fp)
   3532c:	e17fa517 	ldw	r5,-364(fp)
   35330:	e13fa517 	ldw	r4,-364(fp)
   35334:	00345580 	call	34558 <secp256k1_scalar_mul>
    for (i = 0; i < 8; i++) { /* 00 */
   35338:	e03fa415 	stw	zero,-368(fp)
   3533c:	00000606 	br	35358 <secp256k1_scalar_inverse+0xb0c>
        secp256k1_scalar_sqr(t, t);
   35340:	e17fa517 	ldw	r5,-364(fp)
   35344:	e13fa517 	ldw	r4,-364(fp)
   35348:	00348040 	call	34804 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 6; i++) { /* 00000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 8; i++) { /* 00 */
   3534c:	e0bfa417 	ldw	r2,-368(fp)
   35350:	10800044 	addi	r2,r2,1
   35354:	e0bfa415 	stw	r2,-368(fp)
   35358:	e0bfa417 	ldw	r2,-368(fp)
   3535c:	10800210 	cmplti	r2,r2,8
   35360:	103ff71e 	bne	r2,zero,35340 <__alt_mem_epcs_flash_controller+0xfe024340>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(r, t, &x6); /* 111111 */
   35364:	e0bfbe04 	addi	r2,fp,-264
   35368:	100d883a 	mov	r6,r2
   3536c:	e17fa517 	ldw	r5,-364(fp)
   35370:	e13ffe17 	ldw	r4,-8(fp)
   35374:	00345580 	call	34558 <secp256k1_scalar_mul>
}
   35378:	0001883a 	nop
   3537c:	e037883a 	mov	sp,fp
   35380:	dfc00117 	ldw	ra,4(sp)
   35384:	df000017 	ldw	fp,0(sp)
   35388:	dec00204 	addi	sp,sp,8
   3538c:	f800283a 	ret

00035390 <secp256k1_scalar_inverse_var>:
SECP256K1_INLINE static int secp256k1_scalar_is_even(const secp256k1_scalar *a) {
    /* d[0] is present and is the lowest word for all representations */
    return !(a->d[0] & 1);
}

static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_scalar *x) {
   35390:	defffc04 	addi	sp,sp,-16
   35394:	dfc00315 	stw	ra,12(sp)
   35398:	df000215 	stw	fp,8(sp)
   3539c:	df000204 	addi	fp,sp,8
   353a0:	e13ffe15 	stw	r4,-8(fp)
   353a4:	e17fff15 	stw	r5,-4(fp)
#if defined(USE_SCALAR_INV_BUILTIN)
    secp256k1_scalar_inverse(r, x);
   353a8:	e17fff17 	ldw	r5,-4(fp)
   353ac:	e13ffe17 	ldw	r4,-8(fp)
   353b0:	003484c0 	call	3484c <secp256k1_scalar_inverse>
    secp256k1_scalar_mul(&t, &t, r);
    CHECK(secp256k1_scalar_is_one(&t));
#else
#error "Please select scalar inverse implementation"
#endif
}
   353b4:	0001883a 	nop
   353b8:	e037883a 	mov	sp,fp
   353bc:	dfc00117 	ldw	ra,4(sp)
   353c0:	df000017 	ldw	fp,0(sp)
   353c4:	dec00204 	addi	sp,sp,8
   353c8:	f800283a 	ret

000353cc <secp256k1_ecmult_odd_multiples_table>:
/** Fill a table 'prej' with precomputed odd multiples of a. Prej will contain
 *  the values [1*a,3*a,...,(2*n-1)*a], so it space for n values. zr[0] will
 *  contain prej[0].z / a.z. The other zr[i] values = prej[i].z / prej[i-1].z.
 *  Prej's Z values are undefined, except for the last value.
 */
static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a) {
   353cc:	deff9f04 	addi	sp,sp,-388
   353d0:	dfc06015 	stw	ra,384(sp)
   353d4:	df005f15 	stw	fp,380(sp)
   353d8:	dc405e15 	stw	r17,376(sp)
   353dc:	dc005d15 	stw	r16,372(sp)
   353e0:	df005f04 	addi	fp,sp,380
   353e4:	e13ffa15 	stw	r4,-24(fp)
   353e8:	e17ffb15 	stw	r5,-20(fp)
   353ec:	e1bffc15 	stw	r6,-16(fp)
   353f0:	e1fffd15 	stw	r7,-12(fp)
    secp256k1_gej d;
    secp256k1_ge a_ge, d_ge;
    int i;

    VERIFY_CHECK(!a->infinity);
   353f4:	e0bffd17 	ldw	r2,-12(fp)
   353f8:	10802417 	ldw	r2,144(r2)
   353fc:	1004c03a 	cmpne	r2,r2,zero
   35400:	10803fcc 	andi	r2,r2,255
   35404:	10000d26 	beq	r2,zero,3543c <secp256k1_ecmult_odd_multiples_table+0x70>
   35408:	d0a01617 	ldw	r2,-32680(gp)
   3540c:	10c00317 	ldw	r3,12(r2)
   35410:	008001b4 	movhi	r2,6
   35414:	10af4e04 	addi	r2,r2,-17096
   35418:	d8800015 	stw	r2,0(sp)
   3541c:	01c00a84 	movi	r7,42
   35420:	018001b4 	movhi	r6,6
   35424:	31b0b304 	addi	r6,r6,-15668
   35428:	014001b4 	movhi	r5,6
   3542c:	296b3804 	addi	r5,r5,-21280
   35430:	1809883a 	mov	r4,r3
   35434:	00452600 	call	45260 <fprintf>
   35438:	00450340 	call	45034 <abort>

    secp256k1_gej_double_var(&d, a, NULL);
   3543c:	e0bfa304 	addi	r2,fp,-372
   35440:	000d883a 	mov	r6,zero
   35444:	e17ffd17 	ldw	r5,-12(fp)
   35448:	1009883a 	mov	r4,r2
   3544c:	002148c0 	call	2148c <secp256k1_gej_double_var>

    /*
     * Perform the additions on an isomorphism where 'd' is affine: drop the z coordinate
     * of 'd', and scale the 1P starting value's x/y coordinates without changing its z.
     */
    d_ge.x = d.x;
   35450:	e0bfa317 	ldw	r2,-372(fp)
   35454:	e0bfe115 	stw	r2,-124(fp)
   35458:	e0bfa417 	ldw	r2,-368(fp)
   3545c:	e0bfe215 	stw	r2,-120(fp)
   35460:	e0bfa517 	ldw	r2,-364(fp)
   35464:	e0bfe315 	stw	r2,-116(fp)
   35468:	e0bfa617 	ldw	r2,-360(fp)
   3546c:	e0bfe415 	stw	r2,-112(fp)
   35470:	e0bfa717 	ldw	r2,-356(fp)
   35474:	e0bfe515 	stw	r2,-108(fp)
   35478:	e0bfa817 	ldw	r2,-352(fp)
   3547c:	e0bfe615 	stw	r2,-104(fp)
   35480:	e0bfa917 	ldw	r2,-348(fp)
   35484:	e0bfe715 	stw	r2,-100(fp)
   35488:	e0bfaa17 	ldw	r2,-344(fp)
   3548c:	e0bfe815 	stw	r2,-96(fp)
   35490:	e0bfab17 	ldw	r2,-340(fp)
   35494:	e0bfe915 	stw	r2,-92(fp)
   35498:	e0bfac17 	ldw	r2,-336(fp)
   3549c:	e0bfea15 	stw	r2,-88(fp)
   354a0:	e0bfad17 	ldw	r2,-332(fp)
   354a4:	e0bfeb15 	stw	r2,-84(fp)
   354a8:	e0bfae17 	ldw	r2,-328(fp)
   354ac:	e0bfec15 	stw	r2,-80(fp)
    d_ge.y = d.y;
   354b0:	e0bfaf17 	ldw	r2,-324(fp)
   354b4:	e0bfed15 	stw	r2,-76(fp)
   354b8:	e0bfb017 	ldw	r2,-320(fp)
   354bc:	e0bfee15 	stw	r2,-72(fp)
   354c0:	e0bfb117 	ldw	r2,-316(fp)
   354c4:	e0bfef15 	stw	r2,-68(fp)
   354c8:	e0bfb217 	ldw	r2,-312(fp)
   354cc:	e0bff015 	stw	r2,-64(fp)
   354d0:	e0bfb317 	ldw	r2,-308(fp)
   354d4:	e0bff115 	stw	r2,-60(fp)
   354d8:	e0bfb417 	ldw	r2,-304(fp)
   354dc:	e0bff215 	stw	r2,-56(fp)
   354e0:	e0bfb517 	ldw	r2,-300(fp)
   354e4:	e0bff315 	stw	r2,-52(fp)
   354e8:	e0bfb617 	ldw	r2,-296(fp)
   354ec:	e0bff415 	stw	r2,-48(fp)
   354f0:	e0bfb717 	ldw	r2,-292(fp)
   354f4:	e0bff515 	stw	r2,-44(fp)
   354f8:	e0bfb817 	ldw	r2,-288(fp)
   354fc:	e0bff615 	stw	r2,-40(fp)
   35500:	e0bfb917 	ldw	r2,-284(fp)
   35504:	e0bff715 	stw	r2,-36(fp)
   35508:	e0bfba17 	ldw	r2,-280(fp)
   3550c:	e0bff815 	stw	r2,-32(fp)
    d_ge.infinity = 0;
   35510:	e03ff915 	stw	zero,-28(fp)

    secp256k1_ge_set_gej_zinv(&a_ge, a, &d.z);
   35514:	e0bfa304 	addi	r2,fp,-372
   35518:	10c01804 	addi	r3,r2,96
   3551c:	e0bfc804 	addi	r2,fp,-224
   35520:	180d883a 	mov	r6,r3
   35524:	e17ffd17 	ldw	r5,-12(fp)
   35528:	1009883a 	mov	r4,r2
   3552c:	001ff840 	call	1ff84 <secp256k1_ge_set_gej_zinv>
    prej[0].x = a_ge.x;
   35530:	e0bffb17 	ldw	r2,-20(fp)
   35534:	e0ffc817 	ldw	r3,-224(fp)
   35538:	10c00015 	stw	r3,0(r2)
   3553c:	e0ffc917 	ldw	r3,-220(fp)
   35540:	10c00115 	stw	r3,4(r2)
   35544:	e0ffca17 	ldw	r3,-216(fp)
   35548:	10c00215 	stw	r3,8(r2)
   3554c:	e0ffcb17 	ldw	r3,-212(fp)
   35550:	10c00315 	stw	r3,12(r2)
   35554:	e0ffcc17 	ldw	r3,-208(fp)
   35558:	10c00415 	stw	r3,16(r2)
   3555c:	e0ffcd17 	ldw	r3,-204(fp)
   35560:	10c00515 	stw	r3,20(r2)
   35564:	e0ffce17 	ldw	r3,-200(fp)
   35568:	10c00615 	stw	r3,24(r2)
   3556c:	e0ffcf17 	ldw	r3,-196(fp)
   35570:	10c00715 	stw	r3,28(r2)
   35574:	e0ffd017 	ldw	r3,-192(fp)
   35578:	10c00815 	stw	r3,32(r2)
   3557c:	e0ffd117 	ldw	r3,-188(fp)
   35580:	10c00915 	stw	r3,36(r2)
   35584:	e0ffd217 	ldw	r3,-184(fp)
   35588:	10c00a15 	stw	r3,40(r2)
   3558c:	e0ffd317 	ldw	r3,-180(fp)
   35590:	10c00b15 	stw	r3,44(r2)
    prej[0].y = a_ge.y;
   35594:	e0bffb17 	ldw	r2,-20(fp)
   35598:	e0ffd417 	ldw	r3,-176(fp)
   3559c:	10c00c15 	stw	r3,48(r2)
   355a0:	e0ffd517 	ldw	r3,-172(fp)
   355a4:	10c00d15 	stw	r3,52(r2)
   355a8:	e0ffd617 	ldw	r3,-168(fp)
   355ac:	10c00e15 	stw	r3,56(r2)
   355b0:	e0ffd717 	ldw	r3,-164(fp)
   355b4:	10c00f15 	stw	r3,60(r2)
   355b8:	e0ffd817 	ldw	r3,-160(fp)
   355bc:	10c01015 	stw	r3,64(r2)
   355c0:	e0ffd917 	ldw	r3,-156(fp)
   355c4:	10c01115 	stw	r3,68(r2)
   355c8:	e0ffda17 	ldw	r3,-152(fp)
   355cc:	10c01215 	stw	r3,72(r2)
   355d0:	e0ffdb17 	ldw	r3,-148(fp)
   355d4:	10c01315 	stw	r3,76(r2)
   355d8:	e0ffdc17 	ldw	r3,-144(fp)
   355dc:	10c01415 	stw	r3,80(r2)
   355e0:	e0ffdd17 	ldw	r3,-140(fp)
   355e4:	10c01515 	stw	r3,84(r2)
   355e8:	e0ffde17 	ldw	r3,-136(fp)
   355ec:	10c01615 	stw	r3,88(r2)
   355f0:	e0ffdf17 	ldw	r3,-132(fp)
   355f4:	10c01715 	stw	r3,92(r2)
    prej[0].z = a->z;
   355f8:	e0bffb17 	ldw	r2,-20(fp)
   355fc:	e0fffd17 	ldw	r3,-12(fp)
   35600:	19001817 	ldw	r4,96(r3)
   35604:	11001815 	stw	r4,96(r2)
   35608:	19001917 	ldw	r4,100(r3)
   3560c:	11001915 	stw	r4,100(r2)
   35610:	19001a17 	ldw	r4,104(r3)
   35614:	11001a15 	stw	r4,104(r2)
   35618:	19001b17 	ldw	r4,108(r3)
   3561c:	11001b15 	stw	r4,108(r2)
   35620:	19001c17 	ldw	r4,112(r3)
   35624:	11001c15 	stw	r4,112(r2)
   35628:	19001d17 	ldw	r4,116(r3)
   3562c:	11001d15 	stw	r4,116(r2)
   35630:	19001e17 	ldw	r4,120(r3)
   35634:	11001e15 	stw	r4,120(r2)
   35638:	19001f17 	ldw	r4,124(r3)
   3563c:	11001f15 	stw	r4,124(r2)
   35640:	19002017 	ldw	r4,128(r3)
   35644:	11002015 	stw	r4,128(r2)
   35648:	19002117 	ldw	r4,132(r3)
   3564c:	11002115 	stw	r4,132(r2)
   35650:	19002217 	ldw	r4,136(r3)
   35654:	11002215 	stw	r4,136(r2)
   35658:	18c02317 	ldw	r3,140(r3)
   3565c:	10c02315 	stw	r3,140(r2)
    prej[0].infinity = 0;
   35660:	e0bffb17 	ldw	r2,-20(fp)
   35664:	10002415 	stw	zero,144(r2)

    zr[0] = d.z;
   35668:	e0bffc17 	ldw	r2,-16(fp)
   3566c:	e0ffbb17 	ldw	r3,-276(fp)
   35670:	10c00015 	stw	r3,0(r2)
   35674:	e0ffbc17 	ldw	r3,-272(fp)
   35678:	10c00115 	stw	r3,4(r2)
   3567c:	e0ffbd17 	ldw	r3,-268(fp)
   35680:	10c00215 	stw	r3,8(r2)
   35684:	e0ffbe17 	ldw	r3,-264(fp)
   35688:	10c00315 	stw	r3,12(r2)
   3568c:	e0ffbf17 	ldw	r3,-260(fp)
   35690:	10c00415 	stw	r3,16(r2)
   35694:	e0ffc017 	ldw	r3,-256(fp)
   35698:	10c00515 	stw	r3,20(r2)
   3569c:	e0ffc117 	ldw	r3,-252(fp)
   356a0:	10c00615 	stw	r3,24(r2)
   356a4:	e0ffc217 	ldw	r3,-248(fp)
   356a8:	10c00715 	stw	r3,28(r2)
   356ac:	e0ffc317 	ldw	r3,-244(fp)
   356b0:	10c00815 	stw	r3,32(r2)
   356b4:	e0ffc417 	ldw	r3,-240(fp)
   356b8:	10c00915 	stw	r3,36(r2)
   356bc:	e0ffc517 	ldw	r3,-236(fp)
   356c0:	10c00a15 	stw	r3,40(r2)
   356c4:	e0ffc617 	ldw	r3,-232(fp)
   356c8:	10c00b15 	stw	r3,44(r2)
    for (i = 1; i < n; i++) {
   356cc:	00800044 	movi	r2,1
   356d0:	e0bfa215 	stw	r2,-376(fp)
   356d4:	00001e06 	br	35750 <secp256k1_ecmult_odd_multiples_table+0x384>
        secp256k1_gej_add_ge_var(&prej[i], &prej[i-1], &d_ge, &zr[i]);
   356d8:	e0bfa217 	ldw	r2,-376(fp)
   356dc:	01402504 	movi	r5,148
   356e0:	1009883a 	mov	r4,r2
   356e4:	0042b540 	call	42b54 <__mulsi3>
   356e8:	1007883a 	mov	r3,r2
   356ec:	e0bffb17 	ldw	r2,-20(fp)
   356f0:	10e1883a 	add	r16,r2,r3
   356f4:	e0bfa217 	ldw	r2,-376(fp)
   356f8:	01402504 	movi	r5,148
   356fc:	1009883a 	mov	r4,r2
   35700:	0042b540 	call	42b54 <__mulsi3>
   35704:	10bfdb04 	addi	r2,r2,-148
   35708:	e0fffb17 	ldw	r3,-20(fp)
   3570c:	18a3883a 	add	r17,r3,r2
   35710:	e0bfa217 	ldw	r2,-376(fp)
   35714:	01400c04 	movi	r5,48
   35718:	1009883a 	mov	r4,r2
   3571c:	0042b540 	call	42b54 <__mulsi3>
   35720:	1007883a 	mov	r3,r2
   35724:	e0bffc17 	ldw	r2,-16(fp)
   35728:	10c7883a 	add	r3,r2,r3
   3572c:	e0bfe104 	addi	r2,fp,-124
   35730:	180f883a 	mov	r7,r3
   35734:	100d883a 	mov	r6,r2
   35738:	880b883a 	mov	r5,r17
   3573c:	8009883a 	mov	r4,r16
   35740:	0021ce80 	call	21ce8 <secp256k1_gej_add_ge_var>
    prej[0].y = a_ge.y;
    prej[0].z = a->z;
    prej[0].infinity = 0;

    zr[0] = d.z;
    for (i = 1; i < n; i++) {
   35744:	e0bfa217 	ldw	r2,-376(fp)
   35748:	10800044 	addi	r2,r2,1
   3574c:	e0bfa215 	stw	r2,-376(fp)
   35750:	e0ffa217 	ldw	r3,-376(fp)
   35754:	e0bffa17 	ldw	r2,-24(fp)
   35758:	18bfdf16 	blt	r3,r2,356d8 <__alt_mem_epcs_flash_controller+0xfe0246d8>

    /*
     * Each point in 'prej' has a z coordinate too small by a factor of 'd.z'. Only
     * the final point's z coordinate is actually used though, so just update that.
     */
    secp256k1_fe_mul(&prej[n-1].z, &prej[n-1].z, &d.z);
   3575c:	e0bffa17 	ldw	r2,-24(fp)
   35760:	01402504 	movi	r5,148
   35764:	1009883a 	mov	r4,r2
   35768:	0042b540 	call	42b54 <__mulsi3>
   3576c:	10bfdb04 	addi	r2,r2,-148
   35770:	e0fffb17 	ldw	r3,-20(fp)
   35774:	1885883a 	add	r2,r3,r2
   35778:	14001804 	addi	r16,r2,96
   3577c:	e0bffa17 	ldw	r2,-24(fp)
   35780:	01402504 	movi	r5,148
   35784:	1009883a 	mov	r4,r2
   35788:	0042b540 	call	42b54 <__mulsi3>
   3578c:	10bfdb04 	addi	r2,r2,-148
   35790:	e0fffb17 	ldw	r3,-20(fp)
   35794:	1885883a 	add	r2,r3,r2
   35798:	10c01804 	addi	r3,r2,96
   3579c:	e0bfa304 	addi	r2,fp,-372
   357a0:	10801804 	addi	r2,r2,96
   357a4:	100d883a 	mov	r6,r2
   357a8:	180b883a 	mov	r5,r3
   357ac:	8009883a 	mov	r4,r16
   357b0:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
}
   357b4:	0001883a 	nop
   357b8:	e6fffe04 	addi	sp,fp,-8
   357bc:	dfc00317 	ldw	ra,12(sp)
   357c0:	df000217 	ldw	fp,8(sp)
   357c4:	dc400117 	ldw	r17,4(sp)
   357c8:	dc000017 	ldw	r16,0(sp)
   357cc:	dec00404 	addi	sp,sp,16
   357d0:	f800283a 	ret

000357d4 <secp256k1_ecmult_odd_multiples_table_globalz_windowa>:
 *
 *  To compute a*P + b*G, we compute a table for P using the first function,
 *  and for G using the second (which requires an inverse, but it only needs to
 *  happen once).
 */
static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {
   357d4:	defe7204 	addi	sp,sp,-1592
   357d8:	dfc18d15 	stw	ra,1588(sp)
   357dc:	df018c15 	stw	fp,1584(sp)
   357e0:	df018c04 	addi	fp,sp,1584
   357e4:	e13ffd15 	stw	r4,-12(fp)
   357e8:	e17ffe15 	stw	r5,-8(fp)
   357ec:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_gej prej[ECMULT_TABLE_SIZE(WINDOW_A)];
    secp256k1_fe zr[ECMULT_TABLE_SIZE(WINDOW_A)];

    /* Compute the odd multiples in Jacobian form. */
    secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), prej, zr, a);
   357f0:	e0bf9d04 	addi	r2,fp,-396
   357f4:	e1ffff17 	ldw	r7,-4(fp)
   357f8:	100d883a 	mov	r6,r2
   357fc:	e17e7504 	addi	r5,fp,-1580
   35800:	01000204 	movi	r4,8
   35804:	00353cc0 	call	353cc <secp256k1_ecmult_odd_multiples_table>
    /* Bring them to the same Z denominator. */
    secp256k1_ge_globalz_set_table_gej(ECMULT_TABLE_SIZE(WINDOW_A), pre, globalz, prej, zr);
   35808:	e0bf9d04 	addi	r2,fp,-396
   3580c:	d8800015 	stw	r2,0(sp)
   35810:	e1fe7504 	addi	r7,fp,-1580
   35814:	e1bffe17 	ldw	r6,-8(fp)
   35818:	e17ffd17 	ldw	r5,-12(fp)
   3581c:	01000204 	movi	r4,8
   35820:	00208e80 	call	208e8 <secp256k1_ge_globalz_set_table_gej>
}
   35824:	0001883a 	nop
   35828:	e037883a 	mov	sp,fp
   3582c:	dfc00117 	ldw	ra,4(sp)
   35830:	df000017 	ldw	fp,0(sp)
   35834:	dec00204 	addi	sp,sp,8
   35838:	f800283a 	ret

0003583c <secp256k1_ecmult_odd_multiples_table_storage_var>:

static void secp256k1_ecmult_odd_multiples_table_storage_var(int n, secp256k1_ge_storage *pre, const secp256k1_gej *a, const secp256k1_callback *cb) {
   3583c:	defff504 	addi	sp,sp,-44
   35840:	dfc00a15 	stw	ra,40(sp)
   35844:	df000915 	stw	fp,36(sp)
   35848:	dc000815 	stw	r16,32(sp)
   3584c:	df000904 	addi	fp,sp,36
   35850:	e13ffb15 	stw	r4,-20(fp)
   35854:	e17ffc15 	stw	r5,-16(fp)
   35858:	e1bffd15 	stw	r6,-12(fp)
   3585c:	e1fffe15 	stw	r7,-8(fp)
    secp256k1_gej *prej = (secp256k1_gej*)checked_malloc(cb, sizeof(secp256k1_gej) * n);
   35860:	e0bffb17 	ldw	r2,-20(fp)
   35864:	01402504 	movi	r5,148
   35868:	1009883a 	mov	r4,r2
   3586c:	0042b540 	call	42b54 <__mulsi3>
   35870:	100b883a 	mov	r5,r2
   35874:	e13ffe17 	ldw	r4,-8(fp)
   35878:	000c1a80 	call	c1a8 <checked_malloc>
   3587c:	e0bff815 	stw	r2,-32(fp)
    secp256k1_ge *prea = (secp256k1_ge*)checked_malloc(cb, sizeof(secp256k1_ge) * n);
   35880:	e0bffb17 	ldw	r2,-20(fp)
   35884:	01401904 	movi	r5,100
   35888:	1009883a 	mov	r4,r2
   3588c:	0042b540 	call	42b54 <__mulsi3>
   35890:	100b883a 	mov	r5,r2
   35894:	e13ffe17 	ldw	r4,-8(fp)
   35898:	000c1a80 	call	c1a8 <checked_malloc>
   3589c:	e0bff915 	stw	r2,-28(fp)
    secp256k1_fe *zr = (secp256k1_fe*)checked_malloc(cb, sizeof(secp256k1_fe) * n);
   358a0:	e0bffb17 	ldw	r2,-20(fp)
   358a4:	01400c04 	movi	r5,48
   358a8:	1009883a 	mov	r4,r2
   358ac:	0042b540 	call	42b54 <__mulsi3>
   358b0:	100b883a 	mov	r5,r2
   358b4:	e13ffe17 	ldw	r4,-8(fp)
   358b8:	000c1a80 	call	c1a8 <checked_malloc>
   358bc:	e0bffa15 	stw	r2,-24(fp)
    int i;

    /* Compute the odd multiples in Jacobian form. */
    secp256k1_ecmult_odd_multiples_table(n, prej, zr, a);
   358c0:	e1fffd17 	ldw	r7,-12(fp)
   358c4:	e1bffa17 	ldw	r6,-24(fp)
   358c8:	e17ff817 	ldw	r5,-32(fp)
   358cc:	e13ffb17 	ldw	r4,-20(fp)
   358d0:	00353cc0 	call	353cc <secp256k1_ecmult_odd_multiples_table>
    /* Convert them in batch to affine coordinates. */
    secp256k1_ge_set_table_gej_var(n, prea, prej, zr);
   358d4:	e0bffb17 	ldw	r2,-20(fp)
   358d8:	e1fffa17 	ldw	r7,-24(fp)
   358dc:	e1bff817 	ldw	r6,-32(fp)
   358e0:	e17ff917 	ldw	r5,-28(fp)
   358e4:	1009883a 	mov	r4,r2
   358e8:	00207980 	call	20798 <secp256k1_ge_set_table_gej_var>
    /* Convert them to compact storage form. */
    for (i = 0; i < n; i++) {
   358ec:	e03ff715 	stw	zero,-36(fp)
   358f0:	00001106 	br	35938 <secp256k1_ecmult_odd_multiples_table_storage_var+0xfc>
        secp256k1_ge_to_storage(&pre[i], &prea[i]);
   358f4:	e0bff717 	ldw	r2,-36(fp)
   358f8:	100491ba 	slli	r2,r2,6
   358fc:	e0fffc17 	ldw	r3,-16(fp)
   35900:	18a1883a 	add	r16,r3,r2
   35904:	e0bff717 	ldw	r2,-36(fp)
   35908:	01401904 	movi	r5,100
   3590c:	1009883a 	mov	r4,r2
   35910:	0042b540 	call	42b54 <__mulsi3>
   35914:	1007883a 	mov	r3,r2
   35918:	e0bff917 	ldw	r2,-28(fp)
   3591c:	10c5883a 	add	r2,r2,r3
   35920:	100b883a 	mov	r5,r2
   35924:	8009883a 	mov	r4,r16
   35928:	0022f440 	call	22f44 <secp256k1_ge_to_storage>
    /* Compute the odd multiples in Jacobian form. */
    secp256k1_ecmult_odd_multiples_table(n, prej, zr, a);
    /* Convert them in batch to affine coordinates. */
    secp256k1_ge_set_table_gej_var(n, prea, prej, zr);
    /* Convert them to compact storage form. */
    for (i = 0; i < n; i++) {
   3592c:	e0bff717 	ldw	r2,-36(fp)
   35930:	10800044 	addi	r2,r2,1
   35934:	e0bff715 	stw	r2,-36(fp)
   35938:	e0fff717 	ldw	r3,-36(fp)
   3593c:	e0bffb17 	ldw	r2,-20(fp)
   35940:	18bfec16 	blt	r3,r2,358f4 <__alt_mem_epcs_flash_controller+0xfe0248f4>
        secp256k1_ge_to_storage(&pre[i], &prea[i]);
    }

    free(prea);
   35944:	e13ff917 	ldw	r4,-28(fp)
   35948:	00453fc0 	call	453fc <free>
    free(prej);
   3594c:	e13ff817 	ldw	r4,-32(fp)
   35950:	00453fc0 	call	453fc <free>
    free(zr);
   35954:	e13ffa17 	ldw	r4,-24(fp)
   35958:	00453fc0 	call	453fc <free>
}
   3595c:	0001883a 	nop
   35960:	e6ffff04 	addi	sp,fp,-4
   35964:	dfc00217 	ldw	ra,8(sp)
   35968:	df000117 	ldw	fp,4(sp)
   3596c:	dc000017 	ldw	r16,0(sp)
   35970:	dec00304 	addi	sp,sp,12
   35974:	f800283a 	ret

00035978 <secp256k1_ecmult_context_init>:
        secp256k1_ge_from_storage((r), &(pre)[(-(n)-1)/2]); \
        secp256k1_ge_neg((r), (r)); \
    } \
} while(0)

static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx) {
   35978:	defffe04 	addi	sp,sp,-8
   3597c:	df000115 	stw	fp,4(sp)
   35980:	df000104 	addi	fp,sp,4
   35984:	e13fff15 	stw	r4,-4(fp)
    ctx->pre_g = NULL;
   35988:	e0bfff17 	ldw	r2,-4(fp)
   3598c:	10000015 	stw	zero,0(r2)
#ifdef USE_ENDOMORPHISM
    ctx->pre_g_128 = NULL;
#endif
}
   35990:	0001883a 	nop
   35994:	e037883a 	mov	sp,fp
   35998:	df000017 	ldw	fp,0(sp)
   3599c:	dec00104 	addi	sp,sp,4
   359a0:	f800283a 	ret

000359a4 <secp256k1_ecmult_context_build>:

static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {
   359a4:	deffd704 	addi	sp,sp,-164
   359a8:	dfc02815 	stw	ra,160(sp)
   359ac:	df002715 	stw	fp,156(sp)
   359b0:	df002704 	addi	fp,sp,156
   359b4:	e13ffe15 	stw	r4,-8(fp)
   359b8:	e17fff15 	stw	r5,-4(fp)
    secp256k1_gej gj;

    if (ctx->pre_g != NULL) {
   359bc:	e0bffe17 	ldw	r2,-8(fp)
   359c0:	10800017 	ldw	r2,0(r2)
   359c4:	1000121e 	bne	r2,zero,35a10 <secp256k1_ecmult_context_build+0x6c>
        return;
    }

    /* get the generator */
    secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);
   359c8:	014001b4 	movhi	r5,6
   359cc:	296f2c04 	addi	r5,r5,-17232
   359d0:	e13fd904 	addi	r4,fp,-156
   359d4:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>

    ctx->pre_g = (secp256k1_ge_storage (*)[])checked_malloc(cb, sizeof((*ctx->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G));
   359d8:	01400434 	movhi	r5,16
   359dc:	e13fff17 	ldw	r4,-4(fp)
   359e0:	000c1a80 	call	c1a8 <checked_malloc>
   359e4:	1007883a 	mov	r3,r2
   359e8:	e0bffe17 	ldw	r2,-8(fp)
   359ec:	10c00015 	stw	r3,0(r2)

    /* precompute the tables with odd multiples */
    secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g, &gj, cb);
   359f0:	e0bffe17 	ldw	r2,-8(fp)
   359f4:	10800017 	ldw	r2,0(r2)
   359f8:	e1ffff17 	ldw	r7,-4(fp)
   359fc:	e1bfd904 	addi	r6,fp,-156
   35a00:	100b883a 	mov	r5,r2
   35a04:	01100004 	movi	r4,16384
   35a08:	003583c0 	call	3583c <secp256k1_ecmult_odd_multiples_table_storage_var>
   35a0c:	00000106 	br	35a14 <secp256k1_ecmult_context_build+0x70>

static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {
    secp256k1_gej gj;

    if (ctx->pre_g != NULL) {
        return;
   35a10:	0001883a 	nop
            secp256k1_gej_double_var(&g_128j, &g_128j, NULL);
        }
        secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g_128, &g_128j, cb);
    }
#endif
}
   35a14:	e037883a 	mov	sp,fp
   35a18:	dfc00117 	ldw	ra,4(sp)
   35a1c:	df000017 	ldw	fp,0(sp)
   35a20:	dec00204 	addi	sp,sp,8
   35a24:	f800283a 	ret

00035a28 <secp256k1_ecmult_context_clone>:

static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,
                                           const secp256k1_ecmult_context *src, const secp256k1_callback *cb) {
   35a28:	defffa04 	addi	sp,sp,-24
   35a2c:	dfc00515 	stw	ra,20(sp)
   35a30:	df000415 	stw	fp,16(sp)
   35a34:	df000404 	addi	fp,sp,16
   35a38:	e13ffd15 	stw	r4,-12(fp)
   35a3c:	e17ffe15 	stw	r5,-8(fp)
   35a40:	e1bfff15 	stw	r6,-4(fp)
    if (src->pre_g == NULL) {
   35a44:	e0bffe17 	ldw	r2,-8(fp)
   35a48:	10800017 	ldw	r2,0(r2)
   35a4c:	1000031e 	bne	r2,zero,35a5c <secp256k1_ecmult_context_clone+0x34>
        dst->pre_g = NULL;
   35a50:	e0bffd17 	ldw	r2,-12(fp)
   35a54:	10000015 	stw	zero,0(r2)
        size_t size = sizeof((*dst->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);
        dst->pre_g_128 = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);
        memcpy(dst->pre_g_128, src->pre_g_128, size);
    }
#endif
}
   35a58:	00001006 	br	35a9c <secp256k1_ecmult_context_clone+0x74>
static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,
                                           const secp256k1_ecmult_context *src, const secp256k1_callback *cb) {
    if (src->pre_g == NULL) {
        dst->pre_g = NULL;
    } else {
        size_t size = sizeof((*dst->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);
   35a5c:	00800434 	movhi	r2,16
   35a60:	e0bffc15 	stw	r2,-16(fp)
        dst->pre_g = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);
   35a64:	e17ffc17 	ldw	r5,-16(fp)
   35a68:	e13fff17 	ldw	r4,-4(fp)
   35a6c:	000c1a80 	call	c1a8 <checked_malloc>
   35a70:	1007883a 	mov	r3,r2
   35a74:	e0bffd17 	ldw	r2,-12(fp)
   35a78:	10c00015 	stw	r3,0(r2)
        memcpy(dst->pre_g, src->pre_g, size);
   35a7c:	e0bffd17 	ldw	r2,-12(fp)
   35a80:	10c00017 	ldw	r3,0(r2)
   35a84:	e0bffe17 	ldw	r2,-8(fp)
   35a88:	10800017 	ldw	r2,0(r2)
   35a8c:	e1bffc17 	ldw	r6,-16(fp)
   35a90:	100b883a 	mov	r5,r2
   35a94:	1809883a 	mov	r4,r3
   35a98:	0045c980 	call	45c98 <memcpy>
        size_t size = sizeof((*dst->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);
        dst->pre_g_128 = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);
        memcpy(dst->pre_g_128, src->pre_g_128, size);
    }
#endif
}
   35a9c:	0001883a 	nop
   35aa0:	e037883a 	mov	sp,fp
   35aa4:	dfc00117 	ldw	ra,4(sp)
   35aa8:	df000017 	ldw	fp,0(sp)
   35aac:	dec00204 	addi	sp,sp,8
   35ab0:	f800283a 	ret

00035ab4 <secp256k1_ecmult_context_is_built>:

static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx) {
   35ab4:	defffe04 	addi	sp,sp,-8
   35ab8:	df000115 	stw	fp,4(sp)
   35abc:	df000104 	addi	fp,sp,4
   35ac0:	e13fff15 	stw	r4,-4(fp)
    return ctx->pre_g != NULL;
   35ac4:	e0bfff17 	ldw	r2,-4(fp)
   35ac8:	10800017 	ldw	r2,0(r2)
   35acc:	1004c03a 	cmpne	r2,r2,zero
   35ad0:	10803fcc 	andi	r2,r2,255
}
   35ad4:	e037883a 	mov	sp,fp
   35ad8:	df000017 	ldw	fp,0(sp)
   35adc:	dec00104 	addi	sp,sp,4
   35ae0:	f800283a 	ret

00035ae4 <secp256k1_ecmult_context_clear>:

static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx) {
   35ae4:	defffd04 	addi	sp,sp,-12
   35ae8:	dfc00215 	stw	ra,8(sp)
   35aec:	df000115 	stw	fp,4(sp)
   35af0:	df000104 	addi	fp,sp,4
   35af4:	e13fff15 	stw	r4,-4(fp)
    free(ctx->pre_g);
   35af8:	e0bfff17 	ldw	r2,-4(fp)
   35afc:	10800017 	ldw	r2,0(r2)
   35b00:	1009883a 	mov	r4,r2
   35b04:	00453fc0 	call	453fc <free>
#ifdef USE_ENDOMORPHISM
    free(ctx->pre_g_128);
#endif
    secp256k1_ecmult_context_init(ctx);
   35b08:	e13fff17 	ldw	r4,-4(fp)
   35b0c:	00359780 	call	35978 <secp256k1_ecmult_context_init>
}
   35b10:	0001883a 	nop
   35b14:	e037883a 	mov	sp,fp
   35b18:	dfc00117 	ldw	ra,4(sp)
   35b1c:	df000017 	ldw	fp,0(sp)
   35b20:	dec00204 	addi	sp,sp,8
   35b24:	f800283a 	ret

00035b28 <secp256k1_ecmult_wnaf>:
 *  - each wnaf[i] is either 0, or an odd integer between -(1<<(w-1) - 1) and (1<<(w-1) - 1)
 *  - two non-zero entries in wnaf are separated by at least w-1 zeroes.
 *  - the number of set values in wnaf is returned. This number is at most 256, and at most one more
 *    than the number of bits in the (absolute value) of the input.
 */
static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {
   35b28:	deffea04 	addi	sp,sp,-88
   35b2c:	dfc01515 	stw	ra,84(sp)
   35b30:	df001415 	stw	fp,80(sp)
   35b34:	dc001315 	stw	r16,76(sp)
   35b38:	df001404 	addi	fp,sp,80
   35b3c:	e13ffb15 	stw	r4,-20(fp)
   35b40:	e17ffc15 	stw	r5,-16(fp)
   35b44:	e1bffd15 	stw	r6,-12(fp)
   35b48:	e1fffe15 	stw	r7,-8(fp)
    secp256k1_scalar s = *a;
   35b4c:	e0bffd17 	ldw	r2,-12(fp)
   35b50:	10c00017 	ldw	r3,0(r2)
   35b54:	e0fff315 	stw	r3,-52(fp)
   35b58:	10c00117 	ldw	r3,4(r2)
   35b5c:	e0fff415 	stw	r3,-48(fp)
   35b60:	10c00217 	ldw	r3,8(r2)
   35b64:	e0fff515 	stw	r3,-44(fp)
   35b68:	10c00317 	ldw	r3,12(r2)
   35b6c:	e0fff615 	stw	r3,-40(fp)
   35b70:	10c00417 	ldw	r3,16(r2)
   35b74:	e0fff715 	stw	r3,-36(fp)
   35b78:	10c00517 	ldw	r3,20(r2)
   35b7c:	e0fff815 	stw	r3,-32(fp)
   35b80:	10c00617 	ldw	r3,24(r2)
   35b84:	e0fff915 	stw	r3,-28(fp)
   35b88:	10800717 	ldw	r2,28(r2)
   35b8c:	e0bffa15 	stw	r2,-24(fp)
    int last_set_bit = -1;
   35b90:	00bfffc4 	movi	r2,-1
   35b94:	e0bfed15 	stw	r2,-76(fp)
    int bit = 0;
   35b98:	e03fee15 	stw	zero,-72(fp)
    int sign = 1;
   35b9c:	00800044 	movi	r2,1
   35ba0:	e0bfef15 	stw	r2,-68(fp)
    int carry = 0;
   35ba4:	e03ff015 	stw	zero,-64(fp)

    VERIFY_CHECK(wnaf != NULL);
   35ba8:	e0bffb17 	ldw	r2,-20(fp)
   35bac:	1005003a 	cmpeq	r2,r2,zero
   35bb0:	10803fcc 	andi	r2,r2,255
   35bb4:	10000d26 	beq	r2,zero,35bec <secp256k1_ecmult_wnaf+0xc4>
   35bb8:	d0a01617 	ldw	r2,-32680(gp)
   35bbc:	10c00317 	ldw	r3,12(r2)
   35bc0:	008001b4 	movhi	r2,6
   35bc4:	10b0bc04 	addi	r2,r2,-15632
   35bc8:	d8800015 	stw	r2,0(sp)
   35bcc:	01c038c4 	movi	r7,227
   35bd0:	018001b4 	movhi	r6,6
   35bd4:	31b0b304 	addi	r6,r6,-15668
   35bd8:	014001b4 	movhi	r5,6
   35bdc:	296b3804 	addi	r5,r5,-21280
   35be0:	1809883a 	mov	r4,r3
   35be4:	00452600 	call	45260 <fprintf>
   35be8:	00450340 	call	45034 <abort>
    VERIFY_CHECK(0 <= len && len <= 256);
   35bec:	e0bffc17 	ldw	r2,-16(fp)
   35bf0:	1004d7fa 	srli	r2,r2,31
   35bf4:	10803fcc 	andi	r2,r2,255
   35bf8:	1000041e 	bne	r2,zero,35c0c <secp256k1_ecmult_wnaf+0xe4>
   35bfc:	e0bffc17 	ldw	r2,-16(fp)
   35c00:	10804048 	cmpgei	r2,r2,257
   35c04:	10803fcc 	andi	r2,r2,255
   35c08:	10000d26 	beq	r2,zero,35c40 <secp256k1_ecmult_wnaf+0x118>
   35c0c:	d0a01617 	ldw	r2,-32680(gp)
   35c10:	10c00317 	ldw	r3,12(r2)
   35c14:	008001b4 	movhi	r2,6
   35c18:	10b0c504 	addi	r2,r2,-15596
   35c1c:	d8800015 	stw	r2,0(sp)
   35c20:	01c03904 	movi	r7,228
   35c24:	018001b4 	movhi	r6,6
   35c28:	31b0b304 	addi	r6,r6,-15668
   35c2c:	014001b4 	movhi	r5,6
   35c30:	296b3804 	addi	r5,r5,-21280
   35c34:	1809883a 	mov	r4,r3
   35c38:	00452600 	call	45260 <fprintf>
   35c3c:	00450340 	call	45034 <abort>
    VERIFY_CHECK(a != NULL);
   35c40:	e0bffd17 	ldw	r2,-12(fp)
   35c44:	1005003a 	cmpeq	r2,r2,zero
   35c48:	10803fcc 	andi	r2,r2,255
   35c4c:	10000d26 	beq	r2,zero,35c84 <secp256k1_ecmult_wnaf+0x15c>
   35c50:	d0a01617 	ldw	r2,-32680(gp)
   35c54:	10c00317 	ldw	r3,12(r2)
   35c58:	008001b4 	movhi	r2,6
   35c5c:	10b0d104 	addi	r2,r2,-15548
   35c60:	d8800015 	stw	r2,0(sp)
   35c64:	01c03944 	movi	r7,229
   35c68:	018001b4 	movhi	r6,6
   35c6c:	31b0b304 	addi	r6,r6,-15668
   35c70:	014001b4 	movhi	r5,6
   35c74:	296b3804 	addi	r5,r5,-21280
   35c78:	1809883a 	mov	r4,r3
   35c7c:	00452600 	call	45260 <fprintf>
   35c80:	00450340 	call	45034 <abort>
    VERIFY_CHECK(2 <= w && w <= 31);
   35c84:	e0bffe17 	ldw	r2,-8(fp)
   35c88:	10800090 	cmplti	r2,r2,2
   35c8c:	10803fcc 	andi	r2,r2,255
   35c90:	1000041e 	bne	r2,zero,35ca4 <secp256k1_ecmult_wnaf+0x17c>
   35c94:	e0bffe17 	ldw	r2,-8(fp)
   35c98:	10800808 	cmpgei	r2,r2,32
   35c9c:	10803fcc 	andi	r2,r2,255
   35ca0:	10000d26 	beq	r2,zero,35cd8 <secp256k1_ecmult_wnaf+0x1b0>
   35ca4:	d0a01617 	ldw	r2,-32680(gp)
   35ca8:	10c00317 	ldw	r3,12(r2)
   35cac:	008001b4 	movhi	r2,6
   35cb0:	10b0da04 	addi	r2,r2,-15512
   35cb4:	d8800015 	stw	r2,0(sp)
   35cb8:	01c03984 	movi	r7,230
   35cbc:	018001b4 	movhi	r6,6
   35cc0:	31b0b304 	addi	r6,r6,-15668
   35cc4:	014001b4 	movhi	r5,6
   35cc8:	296b3804 	addi	r5,r5,-21280
   35ccc:	1809883a 	mov	r4,r3
   35cd0:	00452600 	call	45260 <fprintf>
   35cd4:	00450340 	call	45034 <abort>

    memset(wnaf, 0, len * sizeof(wnaf[0]));
   35cd8:	e0bffc17 	ldw	r2,-16(fp)
   35cdc:	1085883a 	add	r2,r2,r2
   35ce0:	1085883a 	add	r2,r2,r2
   35ce4:	100d883a 	mov	r6,r2
   35ce8:	000b883a 	mov	r5,zero
   35cec:	e13ffb17 	ldw	r4,-20(fp)
   35cf0:	0045f3c0 	call	45f3c <memset>

    if (secp256k1_scalar_get_bits(&s, 255, 1)) {
   35cf4:	e0bff304 	addi	r2,fp,-52
   35cf8:	01800044 	movi	r6,1
   35cfc:	01403fc4 	movi	r5,255
   35d00:	1009883a 	mov	r4,r2
   35d04:	00232c80 	call	232c8 <secp256k1_scalar_get_bits>
   35d08:	10004726 	beq	r2,zero,35e28 <secp256k1_ecmult_wnaf+0x300>
        secp256k1_scalar_negate(&s, &s);
   35d0c:	e0fff304 	addi	r3,fp,-52
   35d10:	e0bff304 	addi	r2,fp,-52
   35d14:	180b883a 	mov	r5,r3
   35d18:	1009883a 	mov	r4,r2
   35d1c:	0024d740 	call	24d74 <secp256k1_scalar_negate>
        sign = -1;
   35d20:	00bfffc4 	movi	r2,-1
   35d24:	e0bfef15 	stw	r2,-68(fp)
    }

    while (bit < len) {
   35d28:	00003f06 	br	35e28 <secp256k1_ecmult_wnaf+0x300>
        int now;
        int word;
        if (secp256k1_scalar_get_bits(&s, bit, 1) == (unsigned int)carry) {
   35d2c:	e0ffee17 	ldw	r3,-72(fp)
   35d30:	e0bff304 	addi	r2,fp,-52
   35d34:	01800044 	movi	r6,1
   35d38:	180b883a 	mov	r5,r3
   35d3c:	1009883a 	mov	r4,r2
   35d40:	00232c80 	call	232c8 <secp256k1_scalar_get_bits>
   35d44:	1007883a 	mov	r3,r2
   35d48:	e0bff017 	ldw	r2,-64(fp)
   35d4c:	1880041e 	bne	r3,r2,35d60 <secp256k1_ecmult_wnaf+0x238>
            bit++;
   35d50:	e0bfee17 	ldw	r2,-72(fp)
   35d54:	10800044 	addi	r2,r2,1
   35d58:	e0bfee15 	stw	r2,-72(fp)
            continue;
   35d5c:	00003206 	br	35e28 <secp256k1_ecmult_wnaf+0x300>
        }

        now = w;
   35d60:	e0bffe17 	ldw	r2,-8(fp)
   35d64:	e0bff115 	stw	r2,-60(fp)
        if (now > len - bit) {
   35d68:	e0fffc17 	ldw	r3,-16(fp)
   35d6c:	e0bfee17 	ldw	r2,-72(fp)
   35d70:	1887c83a 	sub	r3,r3,r2
   35d74:	e0bff117 	ldw	r2,-60(fp)
   35d78:	1880040e 	bge	r3,r2,35d8c <secp256k1_ecmult_wnaf+0x264>
            now = len - bit;
   35d7c:	e0fffc17 	ldw	r3,-16(fp)
   35d80:	e0bfee17 	ldw	r2,-72(fp)
   35d84:	1885c83a 	sub	r2,r3,r2
   35d88:	e0bff115 	stw	r2,-60(fp)
        }

        word = secp256k1_scalar_get_bits_var(&s, bit, now) + carry;
   35d8c:	e0ffee17 	ldw	r3,-72(fp)
   35d90:	e13ff117 	ldw	r4,-60(fp)
   35d94:	e0bff304 	addi	r2,fp,-52
   35d98:	200d883a 	mov	r6,r4
   35d9c:	180b883a 	mov	r5,r3
   35da0:	1009883a 	mov	r4,r2
   35da4:	00233900 	call	23390 <secp256k1_scalar_get_bits_var>
   35da8:	1007883a 	mov	r3,r2
   35dac:	e0bff017 	ldw	r2,-64(fp)
   35db0:	1885883a 	add	r2,r3,r2
   35db4:	e0bff215 	stw	r2,-56(fp)

        carry = (word >> (w-1)) & 1;
   35db8:	e0bffe17 	ldw	r2,-8(fp)
   35dbc:	10bfffc4 	addi	r2,r2,-1
   35dc0:	e0fff217 	ldw	r3,-56(fp)
   35dc4:	1885d83a 	sra	r2,r3,r2
   35dc8:	1080004c 	andi	r2,r2,1
   35dcc:	e0bff015 	stw	r2,-64(fp)
        word -= carry << w;
   35dd0:	e0fff017 	ldw	r3,-64(fp)
   35dd4:	e0bffe17 	ldw	r2,-8(fp)
   35dd8:	1884983a 	sll	r2,r3,r2
   35ddc:	e0fff217 	ldw	r3,-56(fp)
   35de0:	1885c83a 	sub	r2,r3,r2
   35de4:	e0bff215 	stw	r2,-56(fp)

        wnaf[bit] = sign * word;
   35de8:	e0bfee17 	ldw	r2,-72(fp)
   35dec:	1085883a 	add	r2,r2,r2
   35df0:	1085883a 	add	r2,r2,r2
   35df4:	1007883a 	mov	r3,r2
   35df8:	e0bffb17 	ldw	r2,-20(fp)
   35dfc:	10e1883a 	add	r16,r2,r3
   35e00:	e17ff217 	ldw	r5,-56(fp)
   35e04:	e13fef17 	ldw	r4,-68(fp)
   35e08:	0042b540 	call	42b54 <__mulsi3>
   35e0c:	80800015 	stw	r2,0(r16)
        last_set_bit = bit;
   35e10:	e0bfee17 	ldw	r2,-72(fp)
   35e14:	e0bfed15 	stw	r2,-76(fp)

        bit += now;
   35e18:	e0ffee17 	ldw	r3,-72(fp)
   35e1c:	e0bff117 	ldw	r2,-60(fp)
   35e20:	1885883a 	add	r2,r3,r2
   35e24:	e0bfee15 	stw	r2,-72(fp)
    if (secp256k1_scalar_get_bits(&s, 255, 1)) {
        secp256k1_scalar_negate(&s, &s);
        sign = -1;
    }

    while (bit < len) {
   35e28:	e0ffee17 	ldw	r3,-72(fp)
   35e2c:	e0bffc17 	ldw	r2,-16(fp)
   35e30:	18bfbe16 	blt	r3,r2,35d2c <__alt_mem_epcs_flash_controller+0xfe024d2c>
        last_set_bit = bit;

        bit += now;
    }
#ifdef VERIFY
    CHECK(carry == 0);
   35e34:	e0bff017 	ldw	r2,-64(fp)
   35e38:	1004c03a 	cmpne	r2,r2,zero
   35e3c:	10803fcc 	andi	r2,r2,255
   35e40:	10002626 	beq	r2,zero,35edc <secp256k1_ecmult_wnaf+0x3b4>
   35e44:	d0a01617 	ldw	r2,-32680(gp)
   35e48:	10c00317 	ldw	r3,12(r2)
   35e4c:	008001b4 	movhi	r2,6
   35e50:	10b0e504 	addi	r2,r2,-15468
   35e54:	d8800015 	stw	r2,0(sp)
   35e58:	01c041c4 	movi	r7,263
   35e5c:	018001b4 	movhi	r6,6
   35e60:	31b0b304 	addi	r6,r6,-15668
   35e64:	014001b4 	movhi	r5,6
   35e68:	296b3804 	addi	r5,r5,-21280
   35e6c:	1809883a 	mov	r4,r3
   35e70:	00452600 	call	45260 <fprintf>
   35e74:	00450340 	call	45034 <abort>
    while (bit < 256) {
        CHECK(secp256k1_scalar_get_bits(&s, bit++, 1) == 0);
   35e78:	e0bfee17 	ldw	r2,-72(fp)
   35e7c:	10c00044 	addi	r3,r2,1
   35e80:	e0ffee15 	stw	r3,-72(fp)
   35e84:	1007883a 	mov	r3,r2
   35e88:	e0bff304 	addi	r2,fp,-52
   35e8c:	01800044 	movi	r6,1
   35e90:	180b883a 	mov	r5,r3
   35e94:	1009883a 	mov	r4,r2
   35e98:	00232c80 	call	232c8 <secp256k1_scalar_get_bits>
   35e9c:	1004c03a 	cmpne	r2,r2,zero
   35ea0:	10803fcc 	andi	r2,r2,255
   35ea4:	10000d26 	beq	r2,zero,35edc <secp256k1_ecmult_wnaf+0x3b4>
   35ea8:	d0a01617 	ldw	r2,-32680(gp)
   35eac:	10c00317 	ldw	r3,12(r2)
   35eb0:	008001b4 	movhi	r2,6
   35eb4:	10b0ee04 	addi	r2,r2,-15432
   35eb8:	d8800015 	stw	r2,0(sp)
   35ebc:	01c04244 	movi	r7,265
   35ec0:	018001b4 	movhi	r6,6
   35ec4:	31b0b304 	addi	r6,r6,-15668
   35ec8:	014001b4 	movhi	r5,6
   35ecc:	296b3804 	addi	r5,r5,-21280
   35ed0:	1809883a 	mov	r4,r3
   35ed4:	00452600 	call	45260 <fprintf>
   35ed8:	00450340 	call	45034 <abort>

        bit += now;
    }
#ifdef VERIFY
    CHECK(carry == 0);
    while (bit < 256) {
   35edc:	e0bfee17 	ldw	r2,-72(fp)
   35ee0:	10804010 	cmplti	r2,r2,256
   35ee4:	103fe41e 	bne	r2,zero,35e78 <__alt_mem_epcs_flash_controller+0xfe024e78>
        CHECK(secp256k1_scalar_get_bits(&s, bit++, 1) == 0);
    } 
#endif
    return last_set_bit + 1;
   35ee8:	e0bfed17 	ldw	r2,-76(fp)
   35eec:	10800044 	addi	r2,r2,1
}
   35ef0:	e6ffff04 	addi	sp,fp,-4
   35ef4:	dfc00217 	ldw	ra,8(sp)
   35ef8:	df000117 	ldw	fp,4(sp)
   35efc:	dc000017 	ldw	r16,0(sp)
   35f00:	dec00304 	addi	sp,sp,12
   35f04:	f800283a 	ret

00035f08 <secp256k1_ecmult>:

static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {
   35f08:	defd0604 	addi	sp,sp,-3048
   35f0c:	dfc2f915 	stw	ra,3044(sp)
   35f10:	df02f815 	stw	fp,3040(sp)
   35f14:	dc02f715 	stw	r16,3036(sp)
   35f18:	df02f804 	addi	fp,sp,3040
   35f1c:	e13ffb15 	stw	r4,-20(fp)
   35f20:	e17ffc15 	stw	r5,-16(fp)
   35f24:	e1bffd15 	stw	r6,-12(fp)
   35f28:	e1fffe15 	stw	r7,-8(fp)
    if (bits_na_lam > bits) {
        bits = bits_na_lam;
    }
#else
    /* build wnaf representation for na. */
    bits_na     = secp256k1_ecmult_wnaf(wnaf_na,     256, na,      WINDOW_A);
   35f2c:	e0bdfb04 	addi	r2,fp,-2068
   35f30:	01c00144 	movi	r7,5
   35f34:	e1bffe17 	ldw	r6,-8(fp)
   35f38:	01404004 	movi	r5,256
   35f3c:	1009883a 	mov	r4,r2
   35f40:	0035b280 	call	35b28 <secp256k1_ecmult_wnaf>
   35f44:	e0bd0b15 	stw	r2,-3028(fp)
    bits = bits_na;
   35f48:	e0bd0b17 	ldw	r2,-3028(fp)
   35f4c:	e0bd0a15 	stw	r2,-3032(fp)
     * The exception is the precomputed G table points, which are actually
     * affine. Compared to the base used for other points, they have a Z ratio
     * of 1/Z, so we can use secp256k1_gej_add_zinv_var, which uses the same
     * isomorphism to efficiently add with a known Z inverse.
     */
    secp256k1_ecmult_odd_multiples_table_globalz_windowa(pre_a, &Z, a);
   35f50:	e0fdef04 	addi	r3,fp,-2116
   35f54:	e0bd0e04 	addi	r2,fp,-3016
   35f58:	e1bffd17 	ldw	r6,-12(fp)
   35f5c:	180b883a 	mov	r5,r3
   35f60:	1009883a 	mov	r4,r2
   35f64:	00357d40 	call	357d4 <secp256k1_ecmult_odd_multiples_table_globalz_windowa>
    }
    if (bits_ng_128 > bits) {
        bits = bits_ng_128;
    }
#else
    bits_ng     = secp256k1_ecmult_wnaf(wnaf_ng,     256, ng,      WINDOW_G);
   35f68:	e0befb04 	addi	r2,fp,-1044
   35f6c:	01c00404 	movi	r7,16
   35f70:	e1800217 	ldw	r6,8(fp)
   35f74:	01404004 	movi	r5,256
   35f78:	1009883a 	mov	r4,r2
   35f7c:	0035b280 	call	35b28 <secp256k1_ecmult_wnaf>
   35f80:	e0bd0c15 	stw	r2,-3024(fp)
    if (bits_ng > bits) {
   35f84:	e0bd0c17 	ldw	r2,-3024(fp)
   35f88:	e0fd0a17 	ldw	r3,-3032(fp)
   35f8c:	1880020e 	bge	r3,r2,35f98 <secp256k1_ecmult+0x90>
        bits = bits_ng;
   35f90:	e0bd0c17 	ldw	r2,-3024(fp)
   35f94:	e0bd0a15 	stw	r2,-3032(fp)
    }
#endif

    secp256k1_gej_set_infinity(r);
   35f98:	e13ffc17 	ldw	r4,-16(fp)
   35f9c:	0020c080 	call	20c08 <secp256k1_gej_set_infinity>

    for (i = bits - 1; i >= 0; i--) {
   35fa0:	e0bd0a17 	ldw	r2,-3032(fp)
   35fa4:	10bfffc4 	addi	r2,r2,-1
   35fa8:	e0bd0915 	stw	r2,-3036(fp)
   35fac:	0000dc06 	br	36320 <secp256k1_ecmult+0x418>
        int n;
        secp256k1_gej_double_var(r, r, NULL);
   35fb0:	000d883a 	mov	r6,zero
   35fb4:	e17ffc17 	ldw	r5,-16(fp)
   35fb8:	e13ffc17 	ldw	r4,-16(fp)
   35fbc:	002148c0 	call	2148c <secp256k1_gej_double_var>
        if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {
            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g_128, n, WINDOW_G);
            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);
        }
#else
        if (i < bits_na && (n = wnaf_na[i])) {
   35fc0:	e0fd0917 	ldw	r3,-3036(fp)
   35fc4:	e0bd0b17 	ldw	r2,-3028(fp)
   35fc8:	1880670e 	bge	r3,r2,36168 <secp256k1_ecmult+0x260>
   35fcc:	e0bd0917 	ldw	r2,-3036(fp)
   35fd0:	1085883a 	add	r2,r2,r2
   35fd4:	1085883a 	add	r2,r2,r2
   35fd8:	e0fd0904 	addi	r3,fp,-3036
   35fdc:	1885883a 	add	r2,r3,r2
   35fe0:	1080f204 	addi	r2,r2,968
   35fe4:	10800017 	ldw	r2,0(r2)
   35fe8:	e0bd0d15 	stw	r2,-3020(fp)
   35fec:	e0bd0d17 	ldw	r2,-3020(fp)
   35ff0:	10005d26 	beq	r2,zero,36168 <secp256k1_ecmult+0x260>
            ECMULT_TABLE_GET_GE(&tmpa, pre_a, n, WINDOW_A);
   35ff4:	e0bd0d17 	ldw	r2,-3020(fp)
   35ff8:	1080004c 	andi	r2,r2,1
   35ffc:	1005003a 	cmpeq	r2,r2,zero
   36000:	10803fcc 	andi	r2,r2,255
   36004:	10000d26 	beq	r2,zero,3603c <secp256k1_ecmult+0x134>
   36008:	d0a01617 	ldw	r2,-32680(gp)
   3600c:	10c00317 	ldw	r3,12(r2)
   36010:	008001b4 	movhi	r2,6
   36014:	10b0ff04 	addi	r2,r2,-15364
   36018:	d8800015 	stw	r2,0(sp)
   3601c:	01c05e04 	movi	r7,376
   36020:	018001b4 	movhi	r6,6
   36024:	31b0b304 	addi	r6,r6,-15668
   36028:	014001b4 	movhi	r5,6
   3602c:	296b3804 	addi	r5,r5,-21280
   36030:	1809883a 	mov	r4,r3
   36034:	00452600 	call	45260 <fprintf>
   36038:	00450340 	call	45034 <abort>
   3603c:	e0bd0d17 	ldw	r2,-3020(fp)
   36040:	10bffc50 	cmplti	r2,r2,-15
   36044:	10803fcc 	andi	r2,r2,255
   36048:	10000d26 	beq	r2,zero,36080 <secp256k1_ecmult+0x178>
   3604c:	d0a01617 	ldw	r2,-32680(gp)
   36050:	10c00317 	ldw	r3,12(r2)
   36054:	008001b4 	movhi	r2,6
   36058:	10b10904 	addi	r2,r2,-15324
   3605c:	d8800015 	stw	r2,0(sp)
   36060:	01c05e04 	movi	r7,376
   36064:	018001b4 	movhi	r6,6
   36068:	31b0b304 	addi	r6,r6,-15668
   3606c:	014001b4 	movhi	r5,6
   36070:	296b3804 	addi	r5,r5,-21280
   36074:	1809883a 	mov	r4,r3
   36078:	00452600 	call	45260 <fprintf>
   3607c:	00450340 	call	45034 <abort>
   36080:	e0bd0d17 	ldw	r2,-3020(fp)
   36084:	10800408 	cmpgei	r2,r2,16
   36088:	10803fcc 	andi	r2,r2,255
   3608c:	10000d26 	beq	r2,zero,360c4 <secp256k1_ecmult+0x1bc>
   36090:	d0a01617 	ldw	r2,-32680(gp)
   36094:	10c00317 	ldw	r3,12(r2)
   36098:	008001b4 	movhi	r2,6
   3609c:	10b11604 	addi	r2,r2,-15272
   360a0:	d8800015 	stw	r2,0(sp)
   360a4:	01c05e04 	movi	r7,376
   360a8:	018001b4 	movhi	r6,6
   360ac:	31b0b304 	addi	r6,r6,-15668
   360b0:	014001b4 	movhi	r5,6
   360b4:	296b3804 	addi	r5,r5,-21280
   360b8:	1809883a 	mov	r4,r3
   360bc:	00452600 	call	45260 <fprintf>
   360c0:	00450340 	call	45034 <abort>
   360c4:	e0bd0d17 	ldw	r2,-3020(fp)
   360c8:	0080130e 	bge	zero,r2,36118 <secp256k1_ecmult+0x210>
   360cc:	e0bd0d17 	ldw	r2,-3020(fp)
   360d0:	10bfffc4 	addi	r2,r2,-1
   360d4:	1006d7fa 	srli	r3,r2,31
   360d8:	1885883a 	add	r2,r3,r2
   360dc:	1005d07a 	srai	r2,r2,1
   360e0:	01401904 	movi	r5,100
   360e4:	1009883a 	mov	r4,r2
   360e8:	0042b540 	call	42b54 <__mulsi3>
   360ec:	e0fd0904 	addi	r3,fp,-3036
   360f0:	1885883a 	add	r2,r3,r2
   360f4:	10c00504 	addi	r3,r2,20
   360f8:	e0bdd604 	addi	r2,fp,-2216
   360fc:	1809883a 	mov	r4,r3
   36100:	00c01904 	movi	r3,100
   36104:	180d883a 	mov	r6,r3
   36108:	200b883a 	mov	r5,r4
   3610c:	1009883a 	mov	r4,r2
   36110:	0045c980 	call	45c98 <memcpy>
   36114:	00000e06 	br	36150 <secp256k1_ecmult+0x248>
   36118:	e0bd0d17 	ldw	r2,-3020(fp)
   3611c:	0084303a 	nor	r2,zero,r2
   36120:	1006d7fa 	srli	r3,r2,31
   36124:	1885883a 	add	r2,r3,r2
   36128:	1005d07a 	srai	r2,r2,1
   3612c:	e43d0e04 	addi	r16,fp,-3016
   36130:	01401904 	movi	r5,100
   36134:	1009883a 	mov	r4,r2
   36138:	0042b540 	call	42b54 <__mulsi3>
   3613c:	8087883a 	add	r3,r16,r2
   36140:	e0bdd604 	addi	r2,fp,-2216
   36144:	180b883a 	mov	r5,r3
   36148:	1009883a 	mov	r4,r2
   3614c:	00201500 	call	20150 <secp256k1_ge_neg>
            secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);
   36150:	e0bdd604 	addi	r2,fp,-2216
   36154:	000f883a 	mov	r7,zero
   36158:	100d883a 	mov	r6,r2
   3615c:	e17ffc17 	ldw	r5,-16(fp)
   36160:	e13ffc17 	ldw	r4,-16(fp)
   36164:	0021ce80 	call	21ce8 <secp256k1_gej_add_ge_var>
        }
        if (i < bits_ng && (n = wnaf_ng[i])) {
   36168:	e0fd0917 	ldw	r3,-3036(fp)
   3616c:	e0bd0c17 	ldw	r2,-3024(fp)
   36170:	1880680e 	bge	r3,r2,36314 <secp256k1_ecmult+0x40c>
   36174:	e0bd0917 	ldw	r2,-3036(fp)
   36178:	1085883a 	add	r2,r2,r2
   3617c:	1085883a 	add	r2,r2,r2
   36180:	e0fd0904 	addi	r3,fp,-3036
   36184:	1885883a 	add	r2,r3,r2
   36188:	1081f204 	addi	r2,r2,1992
   3618c:	10800017 	ldw	r2,0(r2)
   36190:	e0bd0d15 	stw	r2,-3020(fp)
   36194:	e0bd0d17 	ldw	r2,-3020(fp)
   36198:	10005e26 	beq	r2,zero,36314 <secp256k1_ecmult+0x40c>
            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);
   3619c:	e0bd0d17 	ldw	r2,-3020(fp)
   361a0:	1080004c 	andi	r2,r2,1
   361a4:	1005003a 	cmpeq	r2,r2,zero
   361a8:	10803fcc 	andi	r2,r2,255
   361ac:	10000d26 	beq	r2,zero,361e4 <secp256k1_ecmult+0x2dc>
   361b0:	d0a01617 	ldw	r2,-32680(gp)
   361b4:	10c00317 	ldw	r3,12(r2)
   361b8:	008001b4 	movhi	r2,6
   361bc:	10b0ff04 	addi	r2,r2,-15364
   361c0:	d8800015 	stw	r2,0(sp)
   361c4:	01c05f04 	movi	r7,380
   361c8:	018001b4 	movhi	r6,6
   361cc:	31b0b304 	addi	r6,r6,-15668
   361d0:	014001b4 	movhi	r5,6
   361d4:	296b3804 	addi	r5,r5,-21280
   361d8:	1809883a 	mov	r4,r3
   361dc:	00452600 	call	45260 <fprintf>
   361e0:	00450340 	call	45034 <abort>
   361e4:	e0bd0d17 	ldw	r2,-3020(fp)
   361e8:	10a00050 	cmplti	r2,r2,-32767
   361ec:	10803fcc 	andi	r2,r2,255
   361f0:	10000d26 	beq	r2,zero,36228 <secp256k1_ecmult+0x320>
   361f4:	d0a01617 	ldw	r2,-32680(gp)
   361f8:	10c00317 	ldw	r3,12(r2)
   361fc:	008001b4 	movhi	r2,6
   36200:	10b12304 	addi	r2,r2,-15220
   36204:	d8800015 	stw	r2,0(sp)
   36208:	01c05f04 	movi	r7,380
   3620c:	018001b4 	movhi	r6,6
   36210:	31b0b304 	addi	r6,r6,-15668
   36214:	014001b4 	movhi	r5,6
   36218:	296b3804 	addi	r5,r5,-21280
   3621c:	1809883a 	mov	r4,r3
   36220:	00452600 	call	45260 <fprintf>
   36224:	00450340 	call	45034 <abort>
   36228:	e0bd0d17 	ldw	r2,-3020(fp)
   3622c:	00dfffc4 	movi	r3,32767
   36230:	1884803a 	cmplt	r2,r3,r2
   36234:	10803fcc 	andi	r2,r2,255
   36238:	10000d26 	beq	r2,zero,36270 <secp256k1_ecmult+0x368>
   3623c:	d0a01617 	ldw	r2,-32680(gp)
   36240:	10c00317 	ldw	r3,12(r2)
   36244:	008001b4 	movhi	r2,6
   36248:	10b13104 	addi	r2,r2,-15164
   3624c:	d8800015 	stw	r2,0(sp)
   36250:	01c05f04 	movi	r7,380
   36254:	018001b4 	movhi	r6,6
   36258:	31b0b304 	addi	r6,r6,-15668
   3625c:	014001b4 	movhi	r5,6
   36260:	296b3804 	addi	r5,r5,-21280
   36264:	1809883a 	mov	r4,r3
   36268:	00452600 	call	45260 <fprintf>
   3626c:	00450340 	call	45034 <abort>
   36270:	e0bd0d17 	ldw	r2,-3020(fp)
   36274:	00800e0e 	bge	zero,r2,362b0 <secp256k1_ecmult+0x3a8>
   36278:	e0bffb17 	ldw	r2,-20(fp)
   3627c:	10c00017 	ldw	r3,0(r2)
   36280:	e0bd0d17 	ldw	r2,-3020(fp)
   36284:	10bfffc4 	addi	r2,r2,-1
   36288:	1008d7fa 	srli	r4,r2,31
   3628c:	2085883a 	add	r2,r4,r2
   36290:	1005d07a 	srai	r2,r2,1
   36294:	100491ba 	slli	r2,r2,6
   36298:	1887883a 	add	r3,r3,r2
   3629c:	e0bdd604 	addi	r2,fp,-2216
   362a0:	180b883a 	mov	r5,r3
   362a4:	1009883a 	mov	r4,r2
   362a8:	00230c00 	call	230c0 <secp256k1_ge_from_storage>
   362ac:	00001206 	br	362f8 <secp256k1_ecmult+0x3f0>
   362b0:	e0bffb17 	ldw	r2,-20(fp)
   362b4:	10c00017 	ldw	r3,0(r2)
   362b8:	e0bd0d17 	ldw	r2,-3020(fp)
   362bc:	0084303a 	nor	r2,zero,r2
   362c0:	1008d7fa 	srli	r4,r2,31
   362c4:	2085883a 	add	r2,r4,r2
   362c8:	1005d07a 	srai	r2,r2,1
   362cc:	100491ba 	slli	r2,r2,6
   362d0:	1887883a 	add	r3,r3,r2
   362d4:	e0bdd604 	addi	r2,fp,-2216
   362d8:	180b883a 	mov	r5,r3
   362dc:	1009883a 	mov	r4,r2
   362e0:	00230c00 	call	230c0 <secp256k1_ge_from_storage>
   362e4:	e0fdd604 	addi	r3,fp,-2216
   362e8:	e0bdd604 	addi	r2,fp,-2216
   362ec:	180b883a 	mov	r5,r3
   362f0:	1009883a 	mov	r4,r2
   362f4:	00201500 	call	20150 <secp256k1_ge_neg>
            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);
   362f8:	e0fdef04 	addi	r3,fp,-2116
   362fc:	e0bdd604 	addi	r2,fp,-2216
   36300:	180f883a 	mov	r7,r3
   36304:	100d883a 	mov	r6,r2
   36308:	e17ffc17 	ldw	r5,-16(fp)
   3630c:	e13ffc17 	ldw	r4,-16(fp)
   36310:	00222080 	call	22208 <secp256k1_gej_add_zinv_var>
    }
#endif

    secp256k1_gej_set_infinity(r);

    for (i = bits - 1; i >= 0; i--) {
   36314:	e0bd0917 	ldw	r2,-3036(fp)
   36318:	10bfffc4 	addi	r2,r2,-1
   3631c:	e0bd0915 	stw	r2,-3036(fp)
   36320:	e0bd0917 	ldw	r2,-3036(fp)
   36324:	103f220e 	bge	r2,zero,35fb0 <__alt_mem_epcs_flash_controller+0xfe024fb0>
            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);
        }
#endif
    }

    if (!r->infinity) {
   36328:	e0bffc17 	ldw	r2,-16(fp)
   3632c:	10802417 	ldw	r2,144(r2)
   36330:	1000091e 	bne	r2,zero,36358 <secp256k1_ecmult+0x450>
        secp256k1_fe_mul(&r->z, &r->z, &Z);
   36334:	e0bffc17 	ldw	r2,-16(fp)
   36338:	10c01804 	addi	r3,r2,96
   3633c:	e0bffc17 	ldw	r2,-16(fp)
   36340:	10801804 	addi	r2,r2,96
   36344:	e13def04 	addi	r4,fp,-2116
   36348:	200d883a 	mov	r6,r4
   3634c:	100b883a 	mov	r5,r2
   36350:	1809883a 	mov	r4,r3
   36354:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>
    }
}
   36358:	0001883a 	nop
   3635c:	e6ffff04 	addi	sp,fp,-4
   36360:	dfc00217 	ldw	ra,8(sp)
   36364:	df000117 	ldw	fp,4(sp)
   36368:	dc000017 	ldw	r16,0(sp)
   3636c:	dec00304 	addi	sp,sp,12
   36370:	f800283a 	ret

00036374 <secp256k1_wnaf_const>:
 *  Multiplications Secure against Side Channel Attacks`, Okeya and Tagaki. M. Joye (Ed.)
 *  CT-RSA 2003, LNCS 2612, pp. 328-443, 2003. Springer-Verlagy Berlin Heidelberg 2003
 *
 *  Numbers reference steps of `Algorithm SPA-resistant Width-w NAF with Odd Scalar` on pp. 335
 */
static int secp256k1_wnaf_const(int *wnaf, secp256k1_scalar s, int w) {
   36374:	deffe604 	addi	sp,sp,-104
   36378:	dfc01615 	stw	ra,88(sp)
   3637c:	df001515 	stw	fp,84(sp)
   36380:	dc001415 	stw	r16,80(sp)
   36384:	df001504 	addi	fp,sp,84
   36388:	e13ffe15 	stw	r4,-8(fp)
   3638c:	e1400215 	stw	r5,8(fp)
   36390:	e1800315 	stw	r6,12(fp)
   36394:	e1c00415 	stw	r7,16(fp)
    int global_sign;
    int skew = 0;
   36398:	e03fef15 	stw	zero,-68(fp)
    int word = 0;
   3639c:	e03fec15 	stw	zero,-80(fp)
     * Section 4.2 of the Okeya/Tagaki paper, which is to add either 1 (for even)
     * or 2 (for odd) to the number we are encoding, returning a skew value indicating
     * this, and having the caller compensate after doing the multiplication. */

    /* Negative numbers will be negated to keep their bit representation below the maximum width */
    flip = secp256k1_scalar_is_high(&s);
   363a0:	e1000204 	addi	r4,fp,8
   363a4:	00252900 	call	25290 <secp256k1_scalar_is_high>
   363a8:	e0bff015 	stw	r2,-64(fp)
    /* We add 1 to even numbers, 2 to odd ones, noting that negation flips parity */
    bit = flip ^ (s.d[0] & 1);
   363ac:	e0800217 	ldw	r2,8(fp)
   363b0:	10c0004c 	andi	r3,r2,1
   363b4:	e0bff017 	ldw	r2,-64(fp)
   363b8:	1884f03a 	xor	r2,r3,r2
   363bc:	e0bff115 	stw	r2,-60(fp)
    /* We check for negative one, since adding 2 to it will cause an overflow */
    secp256k1_scalar_negate(&neg_s, &s);
   363c0:	e0bff604 	addi	r2,fp,-40
   363c4:	e1400204 	addi	r5,fp,8
   363c8:	1009883a 	mov	r4,r2
   363cc:	0024d740 	call	24d74 <secp256k1_scalar_negate>
    not_neg_one = !secp256k1_scalar_is_one(&neg_s);
   363d0:	e0bff604 	addi	r2,fp,-40
   363d4:	1009883a 	mov	r4,r2
   363d8:	00252080 	call	25208 <secp256k1_scalar_is_one>
   363dc:	1005003a 	cmpeq	r2,r2,zero
   363e0:	10803fcc 	andi	r2,r2,255
   363e4:	e0bff215 	stw	r2,-56(fp)
    secp256k1_scalar_cadd_bit(&s, bit, not_neg_one);
   363e8:	e0bff117 	ldw	r2,-60(fp)
   363ec:	e1bff217 	ldw	r6,-56(fp)
   363f0:	100b883a 	mov	r5,r2
   363f4:	e1000204 	addi	r4,fp,8
   363f8:	002408c0 	call	2408c <secp256k1_scalar_cadd_bit>
    /* If we had negative one, flip == 1, s.d[0] == 0, bit == 1, so caller expects
     * that we added two to it and flipped it. In fact for -1 these operations are
     * identical. We only flipped, but since skewing is required (in the sense that
     * the skew must be 1 or 2, never zero) and flipping is not, we need to change
     * our flags to claim that we only skewed. */
    global_sign = secp256k1_scalar_cond_negate(&s, flip);
   363fc:	e17ff017 	ldw	r5,-64(fp)
   36400:	e1000204 	addi	r4,fp,8
   36404:	00254d00 	call	254d0 <secp256k1_scalar_cond_negate>
   36408:	e0bff315 	stw	r2,-52(fp)
    global_sign *= not_neg_one * 2 - 1;
   3640c:	e0bff217 	ldw	r2,-56(fp)
   36410:	1085883a 	add	r2,r2,r2
   36414:	10bfffc4 	addi	r2,r2,-1
   36418:	100b883a 	mov	r5,r2
   3641c:	e13ff317 	ldw	r4,-52(fp)
   36420:	0042b540 	call	42b54 <__mulsi3>
   36424:	e0bff315 	stw	r2,-52(fp)
    skew = 1 << bit;
   36428:	00c00044 	movi	r3,1
   3642c:	e0bff117 	ldw	r2,-60(fp)
   36430:	1884983a 	sll	r2,r3,r2
   36434:	e0bfef15 	stw	r2,-68(fp)

    /* 4 */
    u_last = secp256k1_scalar_shr_int(&s, w);
   36438:	e1400a17 	ldw	r5,40(fp)
   3643c:	e1000204 	addi	r4,fp,8
   36440:	00345a80 	call	345a8 <secp256k1_scalar_shr_int>
   36444:	e0bfed15 	stw	r2,-76(fp)
    while (word * w < WNAF_BITS) {
   36448:	00002d06 	br	36500 <secp256k1_wnaf_const+0x18c>
        int sign;
        int even;

        /* 4.1 4.4 */
        u = secp256k1_scalar_shr_int(&s, w);
   3644c:	e1400a17 	ldw	r5,40(fp)
   36450:	e1000204 	addi	r4,fp,8
   36454:	00345a80 	call	345a8 <secp256k1_scalar_shr_int>
   36458:	e0bfee15 	stw	r2,-72(fp)
        /* 4.2 */
        even = ((u & 1) == 0);
   3645c:	e0bfee17 	ldw	r2,-72(fp)
   36460:	1080004c 	andi	r2,r2,1
   36464:	1005003a 	cmpeq	r2,r2,zero
   36468:	10803fcc 	andi	r2,r2,255
   3646c:	e0bff415 	stw	r2,-48(fp)
        sign = 2 * (u_last > 0) - 1;
   36470:	e0bfed17 	ldw	r2,-76(fp)
   36474:	0080020e 	bge	zero,r2,36480 <secp256k1_wnaf_const+0x10c>
   36478:	00800044 	movi	r2,1
   3647c:	00000106 	br	36484 <secp256k1_wnaf_const+0x110>
   36480:	00bfffc4 	movi	r2,-1
   36484:	e0bff515 	stw	r2,-44(fp)
        u += sign * even;
   36488:	e17ff417 	ldw	r5,-48(fp)
   3648c:	e13ff517 	ldw	r4,-44(fp)
   36490:	0042b540 	call	42b54 <__mulsi3>
   36494:	1007883a 	mov	r3,r2
   36498:	e0bfee17 	ldw	r2,-72(fp)
   3649c:	10c5883a 	add	r2,r2,r3
   364a0:	e0bfee15 	stw	r2,-72(fp)
        u_last -= sign * even * (1 << w);
   364a4:	e17ff417 	ldw	r5,-48(fp)
   364a8:	e13ff517 	ldw	r4,-44(fp)
   364ac:	0042b540 	call	42b54 <__mulsi3>
   364b0:	1007883a 	mov	r3,r2
   364b4:	e0800a17 	ldw	r2,40(fp)
   364b8:	1884983a 	sll	r2,r3,r2
   364bc:	e0ffed17 	ldw	r3,-76(fp)
   364c0:	1885c83a 	sub	r2,r3,r2
   364c4:	e0bfed15 	stw	r2,-76(fp)

        /* 4.3, adapted for global sign change */
        wnaf[word++] = u_last * global_sign;
   364c8:	e0bfec17 	ldw	r2,-80(fp)
   364cc:	10c00044 	addi	r3,r2,1
   364d0:	e0ffec15 	stw	r3,-80(fp)
   364d4:	1085883a 	add	r2,r2,r2
   364d8:	1085883a 	add	r2,r2,r2
   364dc:	1007883a 	mov	r3,r2
   364e0:	e0bffe17 	ldw	r2,-8(fp)
   364e4:	10e1883a 	add	r16,r2,r3
   364e8:	e17ff317 	ldw	r5,-52(fp)
   364ec:	e13fed17 	ldw	r4,-76(fp)
   364f0:	0042b540 	call	42b54 <__mulsi3>
   364f4:	80800015 	stw	r2,0(r16)

        u_last = u;
   364f8:	e0bfee17 	ldw	r2,-72(fp)
   364fc:	e0bfed15 	stw	r2,-76(fp)
    global_sign *= not_neg_one * 2 - 1;
    skew = 1 << bit;

    /* 4 */
    u_last = secp256k1_scalar_shr_int(&s, w);
    while (word * w < WNAF_BITS) {
   36500:	e1400a17 	ldw	r5,40(fp)
   36504:	e13fec17 	ldw	r4,-80(fp)
   36508:	0042b540 	call	42b54 <__mulsi3>
   3650c:	10804010 	cmplti	r2,r2,256
   36510:	103fce1e 	bne	r2,zero,3644c <__alt_mem_epcs_flash_controller+0xfe02544c>
        /* 4.3, adapted for global sign change */
        wnaf[word++] = u_last * global_sign;

        u_last = u;
    }
    wnaf[word] = u * global_sign;
   36514:	e0bfec17 	ldw	r2,-80(fp)
   36518:	1085883a 	add	r2,r2,r2
   3651c:	1085883a 	add	r2,r2,r2
   36520:	1007883a 	mov	r3,r2
   36524:	e0bffe17 	ldw	r2,-8(fp)
   36528:	10e1883a 	add	r16,r2,r3
   3652c:	e17ff317 	ldw	r5,-52(fp)
   36530:	e13fee17 	ldw	r4,-72(fp)
   36534:	0042b540 	call	42b54 <__mulsi3>
   36538:	80800015 	stw	r2,0(r16)

    VERIFY_CHECK(secp256k1_scalar_is_zero(&s));
   3653c:	e1000204 	addi	r4,fp,8
   36540:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   36544:	1005003a 	cmpeq	r2,r2,zero
   36548:	10803fcc 	andi	r2,r2,255
   3654c:	10000d26 	beq	r2,zero,36584 <secp256k1_wnaf_const+0x210>
   36550:	d0a01617 	ldw	r2,-32680(gp)
   36554:	10c00317 	ldw	r3,12(r2)
   36558:	008001b4 	movhi	r2,6
   3655c:	10b14904 	addi	r2,r2,-15068
   36560:	d8800015 	stw	r2,0(sp)
   36564:	01c01d04 	movi	r7,116
   36568:	018001b4 	movhi	r6,6
   3656c:	31b13e04 	addi	r6,r6,-15112
   36570:	014001b4 	movhi	r5,6
   36574:	296b3804 	addi	r5,r5,-21280
   36578:	1809883a 	mov	r4,r3
   3657c:	00452600 	call	45260 <fprintf>
   36580:	00450340 	call	45034 <abort>
    VERIFY_CHECK(word == WNAF_SIZE(w));
   36584:	e0800a17 	ldw	r2,40(fp)
   36588:	10803fc4 	addi	r2,r2,255
   3658c:	e1400a17 	ldw	r5,40(fp)
   36590:	1009883a 	mov	r4,r2
   36594:	00429a00 	call	429a0 <__divsi3>
   36598:	1007883a 	mov	r3,r2
   3659c:	e0bfec17 	ldw	r2,-80(fp)
   365a0:	1884c03a 	cmpne	r2,r3,r2
   365a4:	10803fcc 	andi	r2,r2,255
   365a8:	10000d26 	beq	r2,zero,365e0 <secp256k1_wnaf_const+0x26c>
   365ac:	d0a01617 	ldw	r2,-32680(gp)
   365b0:	10c00317 	ldw	r3,12(r2)
   365b4:	008001b4 	movhi	r2,6
   365b8:	10b15604 	addi	r2,r2,-15016
   365bc:	d8800015 	stw	r2,0(sp)
   365c0:	01c01d44 	movi	r7,117
   365c4:	018001b4 	movhi	r6,6
   365c8:	31b13e04 	addi	r6,r6,-15112
   365cc:	014001b4 	movhi	r5,6
   365d0:	296b3804 	addi	r5,r5,-21280
   365d4:	1809883a 	mov	r4,r3
   365d8:	00452600 	call	45260 <fprintf>
   365dc:	00450340 	call	45034 <abort>
    return skew;
   365e0:	e0bfef17 	ldw	r2,-68(fp)
}
   365e4:	e6ffff04 	addi	sp,fp,-4
   365e8:	dfc00217 	ldw	ra,8(sp)
   365ec:	df000117 	ldw	fp,4(sp)
   365f0:	dc000017 	ldw	r16,0(sp)
   365f4:	dec00604 	addi	sp,sp,24
   365f8:	f800283a 	ret

000365fc <secp256k1_ecmult_const>:


static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *scalar) {
   365fc:	defe5604 	addi	sp,sp,-1704
   36600:	dfc1a915 	stw	ra,1700(sp)
   36604:	df01a815 	stw	fp,1696(sp)
   36608:	dc01a715 	stw	r16,1692(sp)
   3660c:	df01a804 	addi	fp,sp,1696
   36610:	e13ffc15 	stw	r4,-16(fp)
   36614:	e17ffd15 	stw	r5,-12(fp)
   36618:	e1bffe15 	stw	r6,-8(fp)
    int skew_lam;
    secp256k1_scalar q_1, q_lam;
#endif

    int i;
    secp256k1_scalar sc = *scalar;
   3661c:	e0bffe17 	ldw	r2,-8(fp)
   36620:	10c00017 	ldw	r3,0(r2)
   36624:	e0ff9615 	stw	r3,-424(fp)
   36628:	10c00117 	ldw	r3,4(r2)
   3662c:	e0ff9715 	stw	r3,-420(fp)
   36630:	10c00217 	ldw	r3,8(r2)
   36634:	e0ff9815 	stw	r3,-416(fp)
   36638:	10c00317 	ldw	r3,12(r2)
   3663c:	e0ff9915 	stw	r3,-412(fp)
   36640:	10c00417 	ldw	r3,16(r2)
   36644:	e0ff9a15 	stw	r3,-408(fp)
   36648:	10c00517 	ldw	r3,20(r2)
   3664c:	e0ff9b15 	stw	r3,-404(fp)
   36650:	10c00617 	ldw	r3,24(r2)
   36654:	e0ff9c15 	stw	r3,-400(fp)
   36658:	10800717 	ldw	r2,28(r2)
   3665c:	e0bf9d15 	stw	r2,-396(fp)
    /* split q into q_1 and q_lam (where q = q_1 + q_lam*lambda, and q_1 and q_lam are ~128 bit) */
    secp256k1_scalar_split_lambda(&q_1, &q_lam, &sc);
    skew_1   = secp256k1_wnaf_const(wnaf_1,   q_1,   WINDOW_A - 1);
    skew_lam = secp256k1_wnaf_const(wnaf_lam, q_lam, WINDOW_A - 1);
#else
    skew_1   = secp256k1_wnaf_const(wnaf_1, sc, WINDOW_A - 1);
   36660:	e0ff5504 	addi	r3,fp,-684
   36664:	00800104 	movi	r2,4
   36668:	d8800515 	stw	r2,20(sp)
   3666c:	e0bf9917 	ldw	r2,-412(fp)
   36670:	d8800015 	stw	r2,0(sp)
   36674:	e0bf9a17 	ldw	r2,-408(fp)
   36678:	d8800115 	stw	r2,4(sp)
   3667c:	e0bf9b17 	ldw	r2,-404(fp)
   36680:	d8800215 	stw	r2,8(sp)
   36684:	e0bf9c17 	ldw	r2,-400(fp)
   36688:	d8800315 	stw	r2,12(sp)
   3668c:	e0bf9d17 	ldw	r2,-396(fp)
   36690:	d8800415 	stw	r2,16(sp)
   36694:	e17f9617 	ldw	r5,-424(fp)
   36698:	e1bf9717 	ldw	r6,-420(fp)
   3669c:	e1ff9817 	ldw	r7,-416(fp)
   366a0:	1809883a 	mov	r4,r3
   366a4:	00363740 	call	36374 <secp256k1_wnaf_const>
   366a8:	e0be6215 	stw	r2,-1656(fp)
     * All multiples are brought to the same Z 'denominator', which is stored
     * in Z. Due to secp256k1' isomorphism we can do all operations pretending
     * that the Z coordinate was 1, use affine addition formulae, and correct
     * the Z coordinate of the result once at the end.
     */
    secp256k1_gej_set_ge(r, a);
   366ac:	e17ffd17 	ldw	r5,-12(fp)
   366b0:	e13ffc17 	ldw	r4,-16(fp)
   366b4:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
    secp256k1_ecmult_odd_multiples_table_globalz_windowa(pre_a, &Z, r);
   366b8:	e0ff4904 	addi	r3,fp,-732
   366bc:	e0be6804 	addi	r2,fp,-1632
   366c0:	e1bffc17 	ldw	r6,-16(fp)
   366c4:	180b883a 	mov	r5,r3
   366c8:	1009883a 	mov	r4,r2
   366cc:	00357d40 	call	357d4 <secp256k1_ecmult_odd_multiples_table_globalz_windowa>
    for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {
   366d0:	e03e5e15 	stw	zero,-1672(fp)
   366d4:	00000b06 	br	36704 <secp256k1_ecmult_const+0x108>
        secp256k1_fe_normalize_weak(&pre_a[i].y);
   366d8:	e43e6804 	addi	r16,fp,-1632
   366dc:	01401904 	movi	r5,100
   366e0:	e13e5e17 	ldw	r4,-1672(fp)
   366e4:	0042b540 	call	42b54 <__mulsi3>
   366e8:	10800c04 	addi	r2,r2,48
   366ec:	8085883a 	add	r2,r16,r2
   366f0:	1009883a 	mov	r4,r2
   366f4:	00124780 	call	12478 <secp256k1_fe_normalize_weak>
     * that the Z coordinate was 1, use affine addition formulae, and correct
     * the Z coordinate of the result once at the end.
     */
    secp256k1_gej_set_ge(r, a);
    secp256k1_ecmult_odd_multiples_table_globalz_windowa(pre_a, &Z, r);
    for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {
   366f8:	e0be5e17 	ldw	r2,-1672(fp)
   366fc:	10800044 	addi	r2,r2,1
   36700:	e0be5e15 	stw	r2,-1672(fp)
   36704:	e0be5e17 	ldw	r2,-1672(fp)
   36708:	10800210 	cmplti	r2,r2,8
   3670c:	103ff21e 	bne	r2,zero,366d8 <__alt_mem_epcs_flash_controller+0xfe0256d8>
#endif

    /* first loop iteration (separated out so we can directly set r, rather
     * than having it start at infinity, get doubled several times, then have
     * its new value added to it) */
    i = wnaf_1[WNAF_SIZE(WINDOW_A - 1)];
   36710:	e0bf9517 	ldw	r2,-428(fp)
   36714:	e0be5e15 	stw	r2,-1672(fp)
    VERIFY_CHECK(i != 0);
   36718:	e0be5e17 	ldw	r2,-1672(fp)
   3671c:	1005003a 	cmpeq	r2,r2,zero
   36720:	10803fcc 	andi	r2,r2,255
   36724:	10000d26 	beq	r2,zero,3675c <secp256k1_ecmult_const+0x160>
   36728:	d0a01617 	ldw	r2,-32680(gp)
   3672c:	10c00317 	ldw	r3,12(r2)
   36730:	008001b4 	movhi	r2,6
   36734:	10b16104 	addi	r2,r2,-14972
   36738:	d8800015 	stw	r2,0(sp)
   3673c:	01c02a84 	movi	r7,170
   36740:	018001b4 	movhi	r6,6
   36744:	31b13e04 	addi	r6,r6,-15112
   36748:	014001b4 	movhi	r5,6
   3674c:	296b3804 	addi	r5,r5,-21280
   36750:	1809883a 	mov	r4,r3
   36754:	00452600 	call	45260 <fprintf>
   36758:	00450340 	call	45034 <abort>
    ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a, i, WINDOW_A);
   3675c:	e0be5e17 	ldw	r2,-1672(fp)
   36760:	0080020e 	bge	zero,r2,3676c <secp256k1_ecmult_const+0x170>
   36764:	00800044 	movi	r2,1
   36768:	00000106 	br	36770 <secp256k1_ecmult_const+0x174>
   3676c:	00bfffc4 	movi	r2,-1
   36770:	e17e5e17 	ldw	r5,-1672(fp)
   36774:	1009883a 	mov	r4,r2
   36778:	0042b540 	call	42b54 <__mulsi3>
   3677c:	e0be6315 	stw	r2,-1652(fp)
   36780:	e0be6317 	ldw	r2,-1652(fp)
   36784:	1006d7fa 	srli	r3,r2,31
   36788:	1885883a 	add	r2,r3,r2
   3678c:	1005d07a 	srai	r2,r2,1
   36790:	e0be6415 	stw	r2,-1648(fp)
   36794:	e0be5e17 	ldw	r2,-1672(fp)
   36798:	1080004c 	andi	r2,r2,1
   3679c:	1005003a 	cmpeq	r2,r2,zero
   367a0:	10803fcc 	andi	r2,r2,255
   367a4:	10000d26 	beq	r2,zero,367dc <secp256k1_ecmult_const+0x1e0>
   367a8:	d0a01617 	ldw	r2,-32680(gp)
   367ac:	10c00317 	ldw	r3,12(r2)
   367b0:	008001b4 	movhi	r2,6
   367b4:	10b16904 	addi	r2,r2,-14940
   367b8:	d8800015 	stw	r2,0(sp)
   367bc:	01c02ac4 	movi	r7,171
   367c0:	018001b4 	movhi	r6,6
   367c4:	31b13e04 	addi	r6,r6,-15112
   367c8:	014001b4 	movhi	r5,6
   367cc:	296b3804 	addi	r5,r5,-21280
   367d0:	1809883a 	mov	r4,r3
   367d4:	00452600 	call	45260 <fprintf>
   367d8:	00450340 	call	45034 <abort>
   367dc:	e0be5e17 	ldw	r2,-1672(fp)
   367e0:	10bffc50 	cmplti	r2,r2,-15
   367e4:	10803fcc 	andi	r2,r2,255
   367e8:	10000d26 	beq	r2,zero,36820 <secp256k1_ecmult_const+0x224>
   367ec:	d0a01617 	ldw	r2,-32680(gp)
   367f0:	10c00317 	ldw	r3,12(r2)
   367f4:	008001b4 	movhi	r2,6
   367f8:	10b17304 	addi	r2,r2,-14900
   367fc:	d8800015 	stw	r2,0(sp)
   36800:	01c02ac4 	movi	r7,171
   36804:	018001b4 	movhi	r6,6
   36808:	31b13e04 	addi	r6,r6,-15112
   3680c:	014001b4 	movhi	r5,6
   36810:	296b3804 	addi	r5,r5,-21280
   36814:	1809883a 	mov	r4,r3
   36818:	00452600 	call	45260 <fprintf>
   3681c:	00450340 	call	45034 <abort>
   36820:	e0be5e17 	ldw	r2,-1672(fp)
   36824:	10800408 	cmpgei	r2,r2,16
   36828:	10803fcc 	andi	r2,r2,255
   3682c:	10000d26 	beq	r2,zero,36864 <secp256k1_ecmult_const+0x268>
   36830:	d0a01617 	ldw	r2,-32680(gp)
   36834:	10c00317 	ldw	r3,12(r2)
   36838:	008001b4 	movhi	r2,6
   3683c:	10b18004 	addi	r2,r2,-14848
   36840:	d8800015 	stw	r2,0(sp)
   36844:	01c02ac4 	movi	r7,171
   36848:	018001b4 	movhi	r6,6
   3684c:	31b13e04 	addi	r6,r6,-15112
   36850:	014001b4 	movhi	r5,6
   36854:	296b3804 	addi	r5,r5,-21280
   36858:	1809883a 	mov	r4,r3
   3685c:	00452600 	call	45260 <fprintf>
   36860:	00450340 	call	45034 <abort>
   36864:	e0bf3004 	addi	r2,fp,-832
   36868:	1009883a 	mov	r4,r2
   3686c:	00138500 	call	13850 <secp256k1_fe_clear>
   36870:	e0bf3004 	addi	r2,fp,-832
   36874:	10800c04 	addi	r2,r2,48
   36878:	1009883a 	mov	r4,r2
   3687c:	00138500 	call	13850 <secp256k1_fe_clear>
   36880:	e03e5f15 	stw	zero,-1668(fp)
   36884:	00002106 	br	3690c <secp256k1_ecmult_const+0x310>
   36888:	e43e6804 	addi	r16,fp,-1632
   3688c:	01401904 	movi	r5,100
   36890:	e13e5f17 	ldw	r4,-1668(fp)
   36894:	0042b540 	call	42b54 <__mulsi3>
   36898:	8089883a 	add	r4,r16,r2
   3689c:	e0fe5f17 	ldw	r3,-1668(fp)
   368a0:	e0be6417 	ldw	r2,-1648(fp)
   368a4:	1885003a 	cmpeq	r2,r3,r2
   368a8:	10c03fcc 	andi	r3,r2,255
   368ac:	e0bf3004 	addi	r2,fp,-832
   368b0:	180d883a 	mov	r6,r3
   368b4:	200b883a 	mov	r5,r4
   368b8:	1009883a 	mov	r4,r2
   368bc:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
   368c0:	e43e6804 	addi	r16,fp,-1632
   368c4:	01401904 	movi	r5,100
   368c8:	e13e5f17 	ldw	r4,-1668(fp)
   368cc:	0042b540 	call	42b54 <__mulsi3>
   368d0:	10800c04 	addi	r2,r2,48
   368d4:	8089883a 	add	r4,r16,r2
   368d8:	e0fe5f17 	ldw	r3,-1668(fp)
   368dc:	e0be6417 	ldw	r2,-1648(fp)
   368e0:	1885003a 	cmpeq	r2,r3,r2
   368e4:	10c03fcc 	andi	r3,r2,255
   368e8:	e0bf3004 	addi	r2,fp,-832
   368ec:	10800c04 	addi	r2,r2,48
   368f0:	180d883a 	mov	r6,r3
   368f4:	200b883a 	mov	r5,r4
   368f8:	1009883a 	mov	r4,r2
   368fc:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
   36900:	e0be5f17 	ldw	r2,-1668(fp)
   36904:	10800044 	addi	r2,r2,1
   36908:	e0be5f15 	stw	r2,-1668(fp)
   3690c:	e0be5f17 	ldw	r2,-1668(fp)
   36910:	10800210 	cmplti	r2,r2,8
   36914:	103fdc1e 	bne	r2,zero,36888 <__alt_mem_epcs_flash_controller+0xfe025888>
   36918:	e03f4815 	stw	zero,-736(fp)
   3691c:	e0bf3004 	addi	r2,fp,-832
   36920:	10c00c04 	addi	r3,r2,48
   36924:	e0bf9e04 	addi	r2,fp,-392
   36928:	01800044 	movi	r6,1
   3692c:	180b883a 	mov	r5,r3
   36930:	1009883a 	mov	r4,r2
   36934:	0013e240 	call	13e24 <secp256k1_fe_negate>
   36938:	e0fe5e17 	ldw	r3,-1672(fp)
   3693c:	e0be6317 	ldw	r2,-1652(fp)
   36940:	1884c03a 	cmpne	r2,r3,r2
   36944:	11003fcc 	andi	r4,r2,255
   36948:	e0ff9e04 	addi	r3,fp,-392
   3694c:	e0bf3004 	addi	r2,fp,-832
   36950:	10800c04 	addi	r2,r2,48
   36954:	200d883a 	mov	r6,r4
   36958:	180b883a 	mov	r5,r3
   3695c:	1009883a 	mov	r4,r2
   36960:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
    secp256k1_gej_set_ge(r, &tmpa);
   36964:	e0bf3004 	addi	r2,fp,-832
   36968:	100b883a 	mov	r5,r2
   3696c:	e13ffc17 	ldw	r4,-16(fp)
   36970:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
    VERIFY_CHECK(i != 0);
    ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a_lam, i, WINDOW_A);
    secp256k1_gej_add_ge(r, r, &tmpa);
#endif
    /* remaining loop iterations */
    for (i = WNAF_SIZE(WINDOW_A - 1) - 1; i >= 0; i--) {
   36974:	00800fc4 	movi	r2,63
   36978:	e0be5e15 	stw	r2,-1672(fp)
   3697c:	0000af06 	br	36c3c <secp256k1_ecmult_const+0x640>
        int n;
        int j;
        for (j = 0; j < WINDOW_A - 1; ++j) {
   36980:	e03e6015 	stw	zero,-1664(fp)
   36984:	00000706 	br	369a4 <secp256k1_ecmult_const+0x3a8>
            secp256k1_gej_double_nonzero(r, r, NULL);
   36988:	000d883a 	mov	r6,zero
   3698c:	e17ffc17 	ldw	r5,-16(fp)
   36990:	e13ffc17 	ldw	r4,-16(fp)
   36994:	00217740 	call	21774 <secp256k1_gej_double_nonzero>
#endif
    /* remaining loop iterations */
    for (i = WNAF_SIZE(WINDOW_A - 1) - 1; i >= 0; i--) {
        int n;
        int j;
        for (j = 0; j < WINDOW_A - 1; ++j) {
   36998:	e0be6017 	ldw	r2,-1664(fp)
   3699c:	10800044 	addi	r2,r2,1
   369a0:	e0be6015 	stw	r2,-1664(fp)
   369a4:	e0be6017 	ldw	r2,-1664(fp)
   369a8:	10800110 	cmplti	r2,r2,4
   369ac:	103ff61e 	bne	r2,zero,36988 <__alt_mem_epcs_flash_controller+0xfe025988>
            secp256k1_gej_double_nonzero(r, r, NULL);
        }

        n = wnaf_1[i];
   369b0:	e0be5e17 	ldw	r2,-1672(fp)
   369b4:	1085883a 	add	r2,r2,r2
   369b8:	1085883a 	add	r2,r2,r2
   369bc:	e0fe5e04 	addi	r3,fp,-1672
   369c0:	1885883a 	add	r2,r3,r2
   369c4:	1080f704 	addi	r2,r2,988
   369c8:	10800017 	ldw	r2,0(r2)
   369cc:	e0be6515 	stw	r2,-1644(fp)
        ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a, n, WINDOW_A);
   369d0:	e0be6517 	ldw	r2,-1644(fp)
   369d4:	0080020e 	bge	zero,r2,369e0 <secp256k1_ecmult_const+0x3e4>
   369d8:	00800044 	movi	r2,1
   369dc:	00000106 	br	369e4 <secp256k1_ecmult_const+0x3e8>
   369e0:	00bfffc4 	movi	r2,-1
   369e4:	e17e6517 	ldw	r5,-1644(fp)
   369e8:	1009883a 	mov	r4,r2
   369ec:	0042b540 	call	42b54 <__mulsi3>
   369f0:	e0be6615 	stw	r2,-1640(fp)
   369f4:	e0be6617 	ldw	r2,-1640(fp)
   369f8:	1006d7fa 	srli	r3,r2,31
   369fc:	1885883a 	add	r2,r3,r2
   36a00:	1005d07a 	srai	r2,r2,1
   36a04:	e0be6715 	stw	r2,-1636(fp)
   36a08:	e0be6517 	ldw	r2,-1644(fp)
   36a0c:	1080004c 	andi	r2,r2,1
   36a10:	1005003a 	cmpeq	r2,r2,zero
   36a14:	10803fcc 	andi	r2,r2,255
   36a18:	10000d26 	beq	r2,zero,36a50 <secp256k1_ecmult_const+0x454>
   36a1c:	d0a01617 	ldw	r2,-32680(gp)
   36a20:	10c00317 	ldw	r3,12(r2)
   36a24:	008001b4 	movhi	r2,6
   36a28:	10b0ff04 	addi	r2,r2,-15364
   36a2c:	d8800015 	stw	r2,0(sp)
   36a30:	01c02f04 	movi	r7,188
   36a34:	018001b4 	movhi	r6,6
   36a38:	31b13e04 	addi	r6,r6,-15112
   36a3c:	014001b4 	movhi	r5,6
   36a40:	296b3804 	addi	r5,r5,-21280
   36a44:	1809883a 	mov	r4,r3
   36a48:	00452600 	call	45260 <fprintf>
   36a4c:	00450340 	call	45034 <abort>
   36a50:	e0be6517 	ldw	r2,-1644(fp)
   36a54:	10bffc50 	cmplti	r2,r2,-15
   36a58:	10803fcc 	andi	r2,r2,255
   36a5c:	10000d26 	beq	r2,zero,36a94 <secp256k1_ecmult_const+0x498>
   36a60:	d0a01617 	ldw	r2,-32680(gp)
   36a64:	10c00317 	ldw	r3,12(r2)
   36a68:	008001b4 	movhi	r2,6
   36a6c:	10b10904 	addi	r2,r2,-15324
   36a70:	d8800015 	stw	r2,0(sp)
   36a74:	01c02f04 	movi	r7,188
   36a78:	018001b4 	movhi	r6,6
   36a7c:	31b13e04 	addi	r6,r6,-15112
   36a80:	014001b4 	movhi	r5,6
   36a84:	296b3804 	addi	r5,r5,-21280
   36a88:	1809883a 	mov	r4,r3
   36a8c:	00452600 	call	45260 <fprintf>
   36a90:	00450340 	call	45034 <abort>
   36a94:	e0be6517 	ldw	r2,-1644(fp)
   36a98:	10800408 	cmpgei	r2,r2,16
   36a9c:	10803fcc 	andi	r2,r2,255
   36aa0:	10000d26 	beq	r2,zero,36ad8 <secp256k1_ecmult_const+0x4dc>
   36aa4:	d0a01617 	ldw	r2,-32680(gp)
   36aa8:	10c00317 	ldw	r3,12(r2)
   36aac:	008001b4 	movhi	r2,6
   36ab0:	10b11604 	addi	r2,r2,-15272
   36ab4:	d8800015 	stw	r2,0(sp)
   36ab8:	01c02f04 	movi	r7,188
   36abc:	018001b4 	movhi	r6,6
   36ac0:	31b13e04 	addi	r6,r6,-15112
   36ac4:	014001b4 	movhi	r5,6
   36ac8:	296b3804 	addi	r5,r5,-21280
   36acc:	1809883a 	mov	r4,r3
   36ad0:	00452600 	call	45260 <fprintf>
   36ad4:	00450340 	call	45034 <abort>
   36ad8:	e0bf3004 	addi	r2,fp,-832
   36adc:	1009883a 	mov	r4,r2
   36ae0:	00138500 	call	13850 <secp256k1_fe_clear>
   36ae4:	e0bf3004 	addi	r2,fp,-832
   36ae8:	10800c04 	addi	r2,r2,48
   36aec:	1009883a 	mov	r4,r2
   36af0:	00138500 	call	13850 <secp256k1_fe_clear>
   36af4:	e03e6115 	stw	zero,-1660(fp)
   36af8:	00002106 	br	36b80 <secp256k1_ecmult_const+0x584>
   36afc:	e43e6804 	addi	r16,fp,-1632
   36b00:	01401904 	movi	r5,100
   36b04:	e13e6117 	ldw	r4,-1660(fp)
   36b08:	0042b540 	call	42b54 <__mulsi3>
   36b0c:	8089883a 	add	r4,r16,r2
   36b10:	e0fe6117 	ldw	r3,-1660(fp)
   36b14:	e0be6717 	ldw	r2,-1636(fp)
   36b18:	1885003a 	cmpeq	r2,r3,r2
   36b1c:	10c03fcc 	andi	r3,r2,255
   36b20:	e0bf3004 	addi	r2,fp,-832
   36b24:	180d883a 	mov	r6,r3
   36b28:	200b883a 	mov	r5,r4
   36b2c:	1009883a 	mov	r4,r2
   36b30:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
   36b34:	e43e6804 	addi	r16,fp,-1632
   36b38:	01401904 	movi	r5,100
   36b3c:	e13e6117 	ldw	r4,-1660(fp)
   36b40:	0042b540 	call	42b54 <__mulsi3>
   36b44:	10800c04 	addi	r2,r2,48
   36b48:	8089883a 	add	r4,r16,r2
   36b4c:	e0fe6117 	ldw	r3,-1660(fp)
   36b50:	e0be6717 	ldw	r2,-1636(fp)
   36b54:	1885003a 	cmpeq	r2,r3,r2
   36b58:	10c03fcc 	andi	r3,r2,255
   36b5c:	e0bf3004 	addi	r2,fp,-832
   36b60:	10800c04 	addi	r2,r2,48
   36b64:	180d883a 	mov	r6,r3
   36b68:	200b883a 	mov	r5,r4
   36b6c:	1009883a 	mov	r4,r2
   36b70:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
   36b74:	e0be6117 	ldw	r2,-1660(fp)
   36b78:	10800044 	addi	r2,r2,1
   36b7c:	e0be6115 	stw	r2,-1660(fp)
   36b80:	e0be6117 	ldw	r2,-1660(fp)
   36b84:	10800210 	cmplti	r2,r2,8
   36b88:	103fdc1e 	bne	r2,zero,36afc <__alt_mem_epcs_flash_controller+0xfe025afc>
   36b8c:	e03f4815 	stw	zero,-736(fp)
   36b90:	e0bf3004 	addi	r2,fp,-832
   36b94:	10c00c04 	addi	r3,r2,48
   36b98:	e0bf9e04 	addi	r2,fp,-392
   36b9c:	01800044 	movi	r6,1
   36ba0:	180b883a 	mov	r5,r3
   36ba4:	1009883a 	mov	r4,r2
   36ba8:	0013e240 	call	13e24 <secp256k1_fe_negate>
   36bac:	e0fe6517 	ldw	r3,-1644(fp)
   36bb0:	e0be6617 	ldw	r2,-1640(fp)
   36bb4:	1884c03a 	cmpne	r2,r3,r2
   36bb8:	11003fcc 	andi	r4,r2,255
   36bbc:	e0ff9e04 	addi	r3,fp,-392
   36bc0:	e0bf3004 	addi	r2,fp,-832
   36bc4:	10800c04 	addi	r2,r2,48
   36bc8:	200d883a 	mov	r6,r4
   36bcc:	180b883a 	mov	r5,r3
   36bd0:	1009883a 	mov	r4,r2
   36bd4:	001e3f40 	call	1e3f4 <secp256k1_fe_cmov>
        VERIFY_CHECK(n != 0);
   36bd8:	e0be6517 	ldw	r2,-1644(fp)
   36bdc:	1005003a 	cmpeq	r2,r2,zero
   36be0:	10803fcc 	andi	r2,r2,255
   36be4:	10000d26 	beq	r2,zero,36c1c <secp256k1_ecmult_const+0x620>
   36be8:	d0a01617 	ldw	r2,-32680(gp)
   36bec:	10c00317 	ldw	r3,12(r2)
   36bf0:	008001b4 	movhi	r2,6
   36bf4:	10b18d04 	addi	r2,r2,-14796
   36bf8:	d8800015 	stw	r2,0(sp)
   36bfc:	01c02f44 	movi	r7,189
   36c00:	018001b4 	movhi	r6,6
   36c04:	31b13e04 	addi	r6,r6,-15112
   36c08:	014001b4 	movhi	r5,6
   36c0c:	296b3804 	addi	r5,r5,-21280
   36c10:	1809883a 	mov	r4,r3
   36c14:	00452600 	call	45260 <fprintf>
   36c18:	00450340 	call	45034 <abort>
        secp256k1_gej_add_ge(r, r, &tmpa);
   36c1c:	e0bf3004 	addi	r2,fp,-832
   36c20:	100d883a 	mov	r6,r2
   36c24:	e17ffc17 	ldw	r5,-16(fp)
   36c28:	e13ffc17 	ldw	r4,-16(fp)
   36c2c:	00227500 	call	22750 <secp256k1_gej_add_ge>
    VERIFY_CHECK(i != 0);
    ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a_lam, i, WINDOW_A);
    secp256k1_gej_add_ge(r, r, &tmpa);
#endif
    /* remaining loop iterations */
    for (i = WNAF_SIZE(WINDOW_A - 1) - 1; i >= 0; i--) {
   36c30:	e0be5e17 	ldw	r2,-1672(fp)
   36c34:	10bfffc4 	addi	r2,r2,-1
   36c38:	e0be5e15 	stw	r2,-1672(fp)
   36c3c:	e0be5e17 	ldw	r2,-1672(fp)
   36c40:	103f4f0e 	bge	r2,zero,36980 <__alt_mem_epcs_flash_controller+0xfe025980>
        VERIFY_CHECK(n != 0);
        secp256k1_gej_add_ge(r, r, &tmpa);
#endif
    }

    secp256k1_fe_mul(&r->z, &r->z, &Z);
   36c44:	e0bffc17 	ldw	r2,-16(fp)
   36c48:	10c01804 	addi	r3,r2,96
   36c4c:	e0bffc17 	ldw	r2,-16(fp)
   36c50:	10801804 	addi	r2,r2,96
   36c54:	e13f4904 	addi	r4,fp,-732
   36c58:	200d883a 	mov	r6,r4
   36c5c:	100b883a 	mov	r5,r2
   36c60:	1809883a 	mov	r4,r3
   36c64:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

    {
        /* Correct for wNAF skew */
        secp256k1_ge correction = *a;
   36c68:	e0fffd17 	ldw	r3,-12(fp)
   36c6c:	e0bfc304 	addi	r2,fp,-244
   36c70:	1809883a 	mov	r4,r3
   36c74:	00c01904 	movi	r3,100
   36c78:	180d883a 	mov	r6,r3
   36c7c:	200b883a 	mov	r5,r4
   36c80:	1009883a 	mov	r4,r2
   36c84:	0045c980 	call	45c98 <memcpy>
#ifdef USE_ENDOMORPHISM
        secp256k1_ge_storage correction_lam_stor;
#endif
        secp256k1_ge_storage a2_stor;
        secp256k1_gej tmpj;
        secp256k1_gej_set_ge(&tmpj, &correction);
   36c88:	e0ffc304 	addi	r3,fp,-244
   36c8c:	e0bf9e04 	addi	r2,fp,-392
   36c90:	180b883a 	mov	r5,r3
   36c94:	1009883a 	mov	r4,r2
   36c98:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
        secp256k1_gej_double_var(&tmpj, &tmpj, NULL);
   36c9c:	e0ff9e04 	addi	r3,fp,-392
   36ca0:	e0bf9e04 	addi	r2,fp,-392
   36ca4:	000d883a 	mov	r6,zero
   36ca8:	180b883a 	mov	r5,r3
   36cac:	1009883a 	mov	r4,r2
   36cb0:	002148c0 	call	2148c <secp256k1_gej_double_var>
        secp256k1_ge_set_gej(&correction, &tmpj);
   36cb4:	e0ff9e04 	addi	r3,fp,-392
   36cb8:	e0bfc304 	addi	r2,fp,-244
   36cbc:	180b883a 	mov	r5,r3
   36cc0:	1009883a 	mov	r4,r2
   36cc4:	00201d00 	call	201d0 <secp256k1_ge_set_gej>
        secp256k1_ge_to_storage(&correction_1_stor, a);
   36cc8:	e0bfec04 	addi	r2,fp,-80
   36ccc:	e17ffd17 	ldw	r5,-12(fp)
   36cd0:	1009883a 	mov	r4,r2
   36cd4:	0022f440 	call	22f44 <secp256k1_ge_to_storage>
#ifdef USE_ENDOMORPHISM
        secp256k1_ge_to_storage(&correction_lam_stor, a);
#endif
        secp256k1_ge_to_storage(&a2_stor, &correction);
   36cd8:	e0ffc304 	addi	r3,fp,-244
   36cdc:	e0bfdc04 	addi	r2,fp,-144
   36ce0:	180b883a 	mov	r5,r3
   36ce4:	1009883a 	mov	r4,r2
   36ce8:	0022f440 	call	22f44 <secp256k1_ge_to_storage>

        /* For odd numbers this is 2a (so replace it), for even ones a (so no-op) */
        secp256k1_ge_storage_cmov(&correction_1_stor, &a2_stor, skew_1 == 2);
   36cec:	e0be6217 	ldw	r2,-1656(fp)
   36cf0:	108000a0 	cmpeqi	r2,r2,2
   36cf4:	11003fcc 	andi	r4,r2,255
   36cf8:	e0ffdc04 	addi	r3,fp,-144
   36cfc:	e0bfec04 	addi	r2,fp,-80
   36d00:	200d883a 	mov	r6,r4
   36d04:	180b883a 	mov	r5,r3
   36d08:	1009883a 	mov	r4,r2
   36d0c:	00231280 	call	23128 <secp256k1_ge_storage_cmov>
#ifdef USE_ENDOMORPHISM
        secp256k1_ge_storage_cmov(&correction_lam_stor, &a2_stor, skew_lam == 2);
#endif

        /* Apply the correction */
        secp256k1_ge_from_storage(&correction, &correction_1_stor);
   36d10:	e0ffec04 	addi	r3,fp,-80
   36d14:	e0bfc304 	addi	r2,fp,-244
   36d18:	180b883a 	mov	r5,r3
   36d1c:	1009883a 	mov	r4,r2
   36d20:	00230c00 	call	230c0 <secp256k1_ge_from_storage>
        secp256k1_ge_neg(&correction, &correction);
   36d24:	e0ffc304 	addi	r3,fp,-244
   36d28:	e0bfc304 	addi	r2,fp,-244
   36d2c:	180b883a 	mov	r5,r3
   36d30:	1009883a 	mov	r4,r2
   36d34:	00201500 	call	20150 <secp256k1_ge_neg>
        secp256k1_gej_add_ge(r, r, &correction);
   36d38:	e0bfc304 	addi	r2,fp,-244
   36d3c:	100d883a 	mov	r6,r2
   36d40:	e17ffc17 	ldw	r5,-16(fp)
   36d44:	e13ffc17 	ldw	r4,-16(fp)
   36d48:	00227500 	call	22750 <secp256k1_gej_add_ge>
        secp256k1_ge_neg(&correction, &correction);
        secp256k1_ge_mul_lambda(&correction, &correction);
        secp256k1_gej_add_ge(r, r, &correction);
#endif
    }
}
   36d4c:	0001883a 	nop
   36d50:	e6ffff04 	addi	sp,fp,-4
   36d54:	dfc00217 	ldw	ra,8(sp)
   36d58:	df000117 	ldw	fp,4(sp)
   36d5c:	dc000017 	ldw	r16,0(sp)
   36d60:	dec00304 	addi	sp,sp,12
   36d64:	f800283a 	ret

00036d68 <gettimedouble>:

#include <stdio.h>
#include <math.h>
#include "sys/time.h"

static double gettimedouble(void) {
   36d68:	defffa04 	addi	sp,sp,-24
   36d6c:	dfc00515 	stw	ra,20(sp)
   36d70:	df000415 	stw	fp,16(sp)
   36d74:	dc400315 	stw	r17,12(sp)
   36d78:	dc000215 	stw	r16,8(sp)
   36d7c:	df000404 	addi	fp,sp,16
    struct timeval tv;
    gettimeofday(&tv, NULL);
   36d80:	000b883a 	mov	r5,zero
   36d84:	e13ffc04 	addi	r4,fp,-16
   36d88:	0053f800 	call	53f80 <gettimeofday>
    return tv.tv_usec * 0.000001 + tv.tv_sec;
   36d8c:	e0bffd17 	ldw	r2,-12(fp)
   36d90:	1009883a 	mov	r4,r2
   36d94:	0044ef40 	call	44ef4 <__floatsidf>
   36d98:	1011883a 	mov	r8,r2
   36d9c:	1813883a 	mov	r9,r3
   36da0:	01a82db4 	movhi	r6,41142
   36da4:	31bb6344 	addi	r6,r6,-4723
   36da8:	01cfac74 	movhi	r7,16049
   36dac:	39f1bdc4 	addi	r7,r7,-14601
   36db0:	4009883a 	mov	r4,r8
   36db4:	480b883a 	mov	r5,r9
   36db8:	0043ee00 	call	43ee0 <__muldf3>
   36dbc:	1009883a 	mov	r4,r2
   36dc0:	180b883a 	mov	r5,r3
   36dc4:	2021883a 	mov	r16,r4
   36dc8:	2823883a 	mov	r17,r5
   36dcc:	e0bffc17 	ldw	r2,-16(fp)
   36dd0:	1009883a 	mov	r4,r2
   36dd4:	0044ef40 	call	44ef4 <__floatsidf>
   36dd8:	1009883a 	mov	r4,r2
   36ddc:	180b883a 	mov	r5,r3
   36de0:	200d883a 	mov	r6,r4
   36de4:	280f883a 	mov	r7,r5
   36de8:	8009883a 	mov	r4,r16
   36dec:	880b883a 	mov	r5,r17
   36df0:	0042b7c0 	call	42b7c <__adddf3>
   36df4:	100f883a 	mov	r7,r2
   36df8:	1811883a 	mov	r8,r3
   36dfc:	380b883a 	mov	r5,r7
   36e00:	400d883a 	mov	r6,r8
   36e04:	2807883a 	mov	r3,r5
   36e08:	3009883a 	mov	r4,r6
}
   36e0c:	1805883a 	mov	r2,r3
   36e10:	2007883a 	mov	r3,r4
   36e14:	e6fffe04 	addi	sp,fp,-8
   36e18:	dfc00317 	ldw	ra,12(sp)
   36e1c:	df000217 	ldw	fp,8(sp)
   36e20:	dc400117 	ldw	r17,4(sp)
   36e24:	dc000017 	ldw	r16,0(sp)
   36e28:	dec00404 	addi	sp,sp,16
   36e2c:	f800283a 	ret

00036e30 <print_number>:

void print_number(double x) {
   36e30:	defff904 	addi	sp,sp,-28
   36e34:	dfc00615 	stw	ra,24(sp)
   36e38:	df000515 	stw	fp,20(sp)
   36e3c:	df000504 	addi	fp,sp,20
   36e40:	e13ffe15 	stw	r4,-8(fp)
   36e44:	e17fff15 	stw	r5,-4(fp)
    double y = x;
   36e48:	e0bffe17 	ldw	r2,-8(fp)
   36e4c:	e0bffb15 	stw	r2,-20(fp)
   36e50:	e0bfff17 	ldw	r2,-4(fp)
   36e54:	e0bffc15 	stw	r2,-16(fp)
    int c = 0;
   36e58:	e03ffd15 	stw	zero,-12(fp)
    if (y < 0.0) {
   36e5c:	000d883a 	mov	r6,zero
   36e60:	000f883a 	mov	r7,zero
   36e64:	e13ffb17 	ldw	r4,-20(fp)
   36e68:	e17ffc17 	ldw	r5,-16(fp)
   36e6c:	0043dec0 	call	43dec <__ledf2>
   36e70:	1000050e 	bge	r2,zero,36e88 <print_number+0x58>
        y = -y;
   36e74:	e0bffb17 	ldw	r2,-20(fp)
   36e78:	e0bffb15 	stw	r2,-20(fp)
   36e7c:	e0bffc17 	ldw	r2,-16(fp)
   36e80:	10a0003c 	xorhi	r2,r2,32768
   36e84:	e0bffc15 	stw	r2,-16(fp)
    }
    while (y < 100.0) {
   36e88:	00000c06 	br	36ebc <print_number+0x8c>
        y *= 10.0;
   36e8c:	000d883a 	mov	r6,zero
   36e90:	01d00934 	movhi	r7,16420
   36e94:	e13ffb17 	ldw	r4,-20(fp)
   36e98:	e17ffc17 	ldw	r5,-16(fp)
   36e9c:	0043ee00 	call	43ee0 <__muldf3>
   36ea0:	1009883a 	mov	r4,r2
   36ea4:	180b883a 	mov	r5,r3
   36ea8:	e13ffb15 	stw	r4,-20(fp)
   36eac:	e17ffc15 	stw	r5,-16(fp)
        c++;
   36eb0:	e0bffd17 	ldw	r2,-12(fp)
   36eb4:	10800044 	addi	r2,r2,1
   36eb8:	e0bffd15 	stw	r2,-12(fp)
    double y = x;
    int c = 0;
    if (y < 0.0) {
        y = -y;
    }
    while (y < 100.0) {
   36ebc:	000d883a 	mov	r6,zero
   36ec0:	01d01674 	movhi	r7,16473
   36ec4:	e13ffb17 	ldw	r4,-20(fp)
   36ec8:	e17ffc17 	ldw	r5,-16(fp)
   36ecc:	0043dec0 	call	43dec <__ledf2>
   36ed0:	103fee16 	blt	r2,zero,36e8c <__alt_mem_epcs_flash_controller+0xfe025e8c>
        y *= 10.0;
        c++;
    }
    printf("%.*f", c, x);
   36ed4:	e1bffe17 	ldw	r6,-8(fp)
   36ed8:	e1ffff17 	ldw	r7,-4(fp)
   36edc:	e17ffd17 	ldw	r5,-12(fp)
   36ee0:	010001b4 	movhi	r4,6
   36ee4:	21319504 	addi	r4,r4,-14764
   36ee8:	00460940 	call	46094 <printf>
}
   36eec:	0001883a 	nop
   36ef0:	e037883a 	mov	sp,fp
   36ef4:	dfc00117 	ldw	ra,4(sp)
   36ef8:	df000017 	ldw	fp,0(sp)
   36efc:	dec00204 	addi	sp,sp,8
   36f00:	f800283a 	ret

00036f04 <run_benchmark>:

void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {
   36f04:	deffed04 	addi	sp,sp,-76
   36f08:	dfc01215 	stw	ra,72(sp)
   36f0c:	df001115 	stw	fp,68(sp)
   36f10:	dc401015 	stw	r17,64(sp)
   36f14:	dc000f15 	stw	r16,60(sp)
   36f18:	df001104 	addi	fp,sp,68
   36f1c:	e13ffa15 	stw	r4,-24(fp)
   36f20:	e17ffb15 	stw	r5,-20(fp)
   36f24:	e1bffc15 	stw	r6,-16(fp)
   36f28:	e1fffd15 	stw	r7,-12(fp)
    int i;
    double min = HUGE_VAL;
   36f2c:	e03ff015 	stw	zero,-64(fp)
   36f30:	009ffc34 	movhi	r2,32752
   36f34:	e0bff115 	stw	r2,-60(fp)
    double sum = 0.0;
   36f38:	e03ff215 	stw	zero,-56(fp)
   36f3c:	e03ff315 	stw	zero,-52(fp)
    double max = 0.0;
   36f40:	e03ff415 	stw	zero,-48(fp)
   36f44:	e03ff515 	stw	zero,-44(fp)
    for (i = 0; i < count; i++) {
   36f48:	e03fef15 	stw	zero,-68(fp)
   36f4c:	00003c06 	br	37040 <run_benchmark+0x13c>
        double begin, total;
        if (setup != NULL) {
   36f50:	e0bffc17 	ldw	r2,-16(fp)
   36f54:	10000326 	beq	r2,zero,36f64 <run_benchmark+0x60>
            setup(data);
   36f58:	e0bffc17 	ldw	r2,-16(fp)
   36f5c:	e1000217 	ldw	r4,8(fp)
   36f60:	103ee83a 	callr	r2
        }
        begin = gettimedouble();
   36f64:	0036d680 	call	36d68 <gettimedouble>
   36f68:	e0bff615 	stw	r2,-40(fp)
   36f6c:	e0fff715 	stw	r3,-36(fp)
        benchmark(data);
   36f70:	e0bffb17 	ldw	r2,-20(fp)
   36f74:	e1000217 	ldw	r4,8(fp)
   36f78:	103ee83a 	callr	r2
        total = gettimedouble() - begin;
   36f7c:	0036d680 	call	36d68 <gettimedouble>
   36f80:	1011883a 	mov	r8,r2
   36f84:	1813883a 	mov	r9,r3
   36f88:	e1bff617 	ldw	r6,-40(fp)
   36f8c:	e1fff717 	ldw	r7,-36(fp)
   36f90:	4009883a 	mov	r4,r8
   36f94:	480b883a 	mov	r5,r9
   36f98:	00445f80 	call	445f8 <__subdf3>
   36f9c:	1009883a 	mov	r4,r2
   36fa0:	180b883a 	mov	r5,r3
   36fa4:	e13ff815 	stw	r4,-32(fp)
   36fa8:	e17ff915 	stw	r5,-28(fp)
        if (teardown != NULL) {
   36fac:	e0bffd17 	ldw	r2,-12(fp)
   36fb0:	10000326 	beq	r2,zero,36fc0 <run_benchmark+0xbc>
            teardown(data);
   36fb4:	e0bffd17 	ldw	r2,-12(fp)
   36fb8:	e1000217 	ldw	r4,8(fp)
   36fbc:	103ee83a 	callr	r2
        }
        if (total < min) {
   36fc0:	e1bff017 	ldw	r6,-64(fp)
   36fc4:	e1fff117 	ldw	r7,-60(fp)
   36fc8:	e13ff817 	ldw	r4,-32(fp)
   36fcc:	e17ff917 	ldw	r5,-28(fp)
   36fd0:	0043dec0 	call	43dec <__ledf2>
   36fd4:	1000040e 	bge	r2,zero,36fe8 <run_benchmark+0xe4>
            min = total;
   36fd8:	e0bff817 	ldw	r2,-32(fp)
   36fdc:	e0bff015 	stw	r2,-64(fp)
   36fe0:	e0bff917 	ldw	r2,-28(fp)
   36fe4:	e0bff115 	stw	r2,-60(fp)
        }
        if (total > max) {
   36fe8:	e1bff417 	ldw	r6,-48(fp)
   36fec:	e1fff517 	ldw	r7,-44(fp)
   36ff0:	e13ff817 	ldw	r4,-32(fp)
   36ff4:	e17ff917 	ldw	r5,-28(fp)
   36ff8:	0043d100 	call	43d10 <__gedf2>
   36ffc:	0080040e 	bge	zero,r2,37010 <run_benchmark+0x10c>
            max = total;
   37000:	e0bff817 	ldw	r2,-32(fp)
   37004:	e0bff415 	stw	r2,-48(fp)
   37008:	e0bff917 	ldw	r2,-28(fp)
   3700c:	e0bff515 	stw	r2,-44(fp)
        }
        sum += total;
   37010:	e1bff817 	ldw	r6,-32(fp)
   37014:	e1fff917 	ldw	r7,-28(fp)
   37018:	e13ff217 	ldw	r4,-56(fp)
   3701c:	e17ff317 	ldw	r5,-52(fp)
   37020:	0042b7c0 	call	42b7c <__adddf3>
   37024:	1009883a 	mov	r4,r2
   37028:	180b883a 	mov	r5,r3
   3702c:	e13ff215 	stw	r4,-56(fp)
   37030:	e17ff315 	stw	r5,-52(fp)
void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {
    int i;
    double min = HUGE_VAL;
    double sum = 0.0;
    double max = 0.0;
    for (i = 0; i < count; i++) {
   37034:	e0bfef17 	ldw	r2,-68(fp)
   37038:	10800044 	addi	r2,r2,1
   3703c:	e0bfef15 	stw	r2,-68(fp)
   37040:	e0ffef17 	ldw	r3,-68(fp)
   37044:	e0800317 	ldw	r2,12(fp)
   37048:	18bfc116 	blt	r3,r2,36f50 <__alt_mem_epcs_flash_controller+0xfe025f50>
        if (total > max) {
            max = total;
        }
        sum += total;
    }
    printf("%s: min ", name);
   3704c:	e17ffa17 	ldw	r5,-24(fp)
   37050:	010001b4 	movhi	r4,6
   37054:	21319704 	addi	r4,r4,-14756
   37058:	00460940 	call	46094 <printf>
    print_number(min * 1000000.0 / iter);
   3705c:	000d883a 	mov	r6,zero
   37060:	01d04bf4 	movhi	r7,16687
   37064:	39e12004 	addi	r7,r7,-31616
   37068:	e13ff017 	ldw	r4,-64(fp)
   3706c:	e17ff117 	ldw	r5,-60(fp)
   37070:	0043ee00 	call	43ee0 <__muldf3>
   37074:	1009883a 	mov	r4,r2
   37078:	180b883a 	mov	r5,r3
   3707c:	2021883a 	mov	r16,r4
   37080:	2823883a 	mov	r17,r5
   37084:	e1000417 	ldw	r4,16(fp)
   37088:	0044ef40 	call	44ef4 <__floatsidf>
   3708c:	1009883a 	mov	r4,r2
   37090:	180b883a 	mov	r5,r3
   37094:	200d883a 	mov	r6,r4
   37098:	280f883a 	mov	r7,r5
   3709c:	8009883a 	mov	r4,r16
   370a0:	880b883a 	mov	r5,r17
   370a4:	00434280 	call	43428 <__divdf3>
   370a8:	1009883a 	mov	r4,r2
   370ac:	180b883a 	mov	r5,r3
   370b0:	2005883a 	mov	r2,r4
   370b4:	2807883a 	mov	r3,r5
   370b8:	1009883a 	mov	r4,r2
   370bc:	180b883a 	mov	r5,r3
   370c0:	0036e300 	call	36e30 <print_number>
    printf("us / avg ");
   370c4:	010001b4 	movhi	r4,6
   370c8:	21319a04 	addi	r4,r4,-14744
   370cc:	00460940 	call	46094 <printf>
    print_number((sum / count) * 1000000.0 / iter);
   370d0:	e1000317 	ldw	r4,12(fp)
   370d4:	0044ef40 	call	44ef4 <__floatsidf>
   370d8:	1009883a 	mov	r4,r2
   370dc:	180b883a 	mov	r5,r3
   370e0:	200d883a 	mov	r6,r4
   370e4:	280f883a 	mov	r7,r5
   370e8:	e13ff217 	ldw	r4,-56(fp)
   370ec:	e17ff317 	ldw	r5,-52(fp)
   370f0:	00434280 	call	43428 <__divdf3>
   370f4:	1009883a 	mov	r4,r2
   370f8:	180b883a 	mov	r5,r3
   370fc:	2005883a 	mov	r2,r4
   37100:	2807883a 	mov	r3,r5
   37104:	000d883a 	mov	r6,zero
   37108:	01d04bf4 	movhi	r7,16687
   3710c:	39e12004 	addi	r7,r7,-31616
   37110:	1009883a 	mov	r4,r2
   37114:	180b883a 	mov	r5,r3
   37118:	0043ee00 	call	43ee0 <__muldf3>
   3711c:	1009883a 	mov	r4,r2
   37120:	180b883a 	mov	r5,r3
   37124:	2021883a 	mov	r16,r4
   37128:	2823883a 	mov	r17,r5
   3712c:	e1000417 	ldw	r4,16(fp)
   37130:	0044ef40 	call	44ef4 <__floatsidf>
   37134:	1009883a 	mov	r4,r2
   37138:	180b883a 	mov	r5,r3
   3713c:	200d883a 	mov	r6,r4
   37140:	280f883a 	mov	r7,r5
   37144:	8009883a 	mov	r4,r16
   37148:	880b883a 	mov	r5,r17
   3714c:	00434280 	call	43428 <__divdf3>
   37150:	1009883a 	mov	r4,r2
   37154:	180b883a 	mov	r5,r3
   37158:	2005883a 	mov	r2,r4
   3715c:	2807883a 	mov	r3,r5
   37160:	1009883a 	mov	r4,r2
   37164:	180b883a 	mov	r5,r3
   37168:	0036e300 	call	36e30 <print_number>
    printf("us / max ");
   3716c:	010001b4 	movhi	r4,6
   37170:	21319d04 	addi	r4,r4,-14732
   37174:	00460940 	call	46094 <printf>
    print_number(max * 1000000.0 / iter);
   37178:	000d883a 	mov	r6,zero
   3717c:	01d04bf4 	movhi	r7,16687
   37180:	39e12004 	addi	r7,r7,-31616
   37184:	e13ff417 	ldw	r4,-48(fp)
   37188:	e17ff517 	ldw	r5,-44(fp)
   3718c:	0043ee00 	call	43ee0 <__muldf3>
   37190:	1009883a 	mov	r4,r2
   37194:	180b883a 	mov	r5,r3
   37198:	2021883a 	mov	r16,r4
   3719c:	2823883a 	mov	r17,r5
   371a0:	e1000417 	ldw	r4,16(fp)
   371a4:	0044ef40 	call	44ef4 <__floatsidf>
   371a8:	1009883a 	mov	r4,r2
   371ac:	180b883a 	mov	r5,r3
   371b0:	200d883a 	mov	r6,r4
   371b4:	280f883a 	mov	r7,r5
   371b8:	8009883a 	mov	r4,r16
   371bc:	880b883a 	mov	r5,r17
   371c0:	00434280 	call	43428 <__divdf3>
   371c4:	1009883a 	mov	r4,r2
   371c8:	180b883a 	mov	r5,r3
   371cc:	2005883a 	mov	r2,r4
   371d0:	2807883a 	mov	r3,r5
   371d4:	1009883a 	mov	r4,r2
   371d8:	180b883a 	mov	r5,r3
   371dc:	0036e300 	call	36e30 <print_number>
    printf("us\n");
   371e0:	010001b4 	movhi	r4,6
   371e4:	2131a004 	addi	r4,r4,-14720
   371e8:	00461b00 	call	461b0 <puts>
}
   371ec:	0001883a 	nop
   371f0:	e6fffe04 	addi	sp,fp,-8
   371f4:	dfc00317 	ldw	ra,12(sp)
   371f8:	df000217 	ldw	fp,8(sp)
   371fc:	dc400117 	ldw	r17,4(sp)
   37200:	dc000017 	ldw	r16,0(sp)
   37204:	dec00404 	addi	sp,sp,16
   37208:	f800283a 	ret

0003720c <secp256k1_ecmult_gen_context_init>:
#include "ecmult_gen.h"
#include "hash_impl.h"
#ifdef USE_ECMULT_STATIC_PRECOMPUTATION
#include "ecmult_static_context.h"
#endif
static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context *ctx) {
   3720c:	defffe04 	addi	sp,sp,-8
   37210:	df000115 	stw	fp,4(sp)
   37214:	df000104 	addi	fp,sp,4
   37218:	e13fff15 	stw	r4,-4(fp)
    ctx->prec = NULL;
   3721c:	e0bfff17 	ldw	r2,-4(fp)
   37220:	10000015 	stw	zero,0(r2)
}
   37224:	0001883a 	nop
   37228:	e037883a 	mov	sp,fp
   3722c:	df000017 	ldw	fp,0(sp)
   37230:	dec00104 	addi	sp,sp,4
   37234:	f800283a 	ret

00037238 <secp256k1_ecmult_gen_context_build>:

static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context *ctx, const secp256k1_callback* cb) {
   37238:	defffc04 	addi	sp,sp,-16
   3723c:	dfc00315 	stw	ra,12(sp)
   37240:	df000215 	stw	fp,8(sp)
   37244:	dc400115 	stw	r17,4(sp)
   37248:	dc000015 	stw	r16,0(sp)
   3724c:	df000204 	addi	fp,sp,8
   37250:	023fff34 	movhi	r8,65532
   37254:	42076604 	addi	r8,r8,7576
   37258:	da37883a 	add	sp,sp,r8
   3725c:	00800134 	movhi	r2,4
   37260:	10b89704 	addi	r2,r2,-7588
   37264:	00ffff34 	movhi	r3,65532
   37268:	18c76504 	addi	r3,r3,7572
   3726c:	1f07883a 	add	r3,r3,fp
   37270:	1885883a 	add	r2,r3,r2
   37274:	11000015 	stw	r4,0(r2)
   37278:	00800134 	movhi	r2,4
   3727c:	10b89804 	addi	r2,r2,-7584
   37280:	013fff34 	movhi	r4,65532
   37284:	21076504 	addi	r4,r4,7572
   37288:	2709883a 	add	r4,r4,fp
   3728c:	2085883a 	add	r2,r4,r2
   37290:	11400015 	stw	r5,0(r2)
    secp256k1_gej gj;
    secp256k1_gej nums_gej;
    int i, j;
#endif

    if (ctx->prec != NULL) {
   37294:	00800134 	movhi	r2,4
   37298:	10b89704 	addi	r2,r2,-7588
   3729c:	017fff34 	movhi	r5,65532
   372a0:	29476504 	addi	r5,r5,7572
   372a4:	2f0b883a 	add	r5,r5,fp
   372a8:	2885883a 	add	r2,r5,r2
   372ac:	10800017 	ldw	r2,0(r2)
   372b0:	10800017 	ldw	r2,0(r2)
   372b4:	1001f11e 	bne	r2,zero,37a7c <secp256k1_ecmult_gen_context_build+0x844>
        return;
    }
#ifndef USE_ECMULT_STATIC_PRECOMPUTATION
    ctx->prec = (secp256k1_ge_storage (*)[64][16])checked_malloc(cb, sizeof(*ctx->prec));
   372b8:	00800134 	movhi	r2,4
   372bc:	10b89804 	addi	r2,r2,-7584
   372c0:	00ffff34 	movhi	r3,65532
   372c4:	18c76504 	addi	r3,r3,7572
   372c8:	1f07883a 	add	r3,r3,fp
   372cc:	1885883a 	add	r2,r3,r2
   372d0:	01400074 	movhi	r5,1
   372d4:	11000017 	ldw	r4,0(r2)
   372d8:	000c1a80 	call	c1a8 <checked_malloc>
   372dc:	1007883a 	mov	r3,r2
   372e0:	00800134 	movhi	r2,4
   372e4:	10b89704 	addi	r2,r2,-7588
   372e8:	013fff34 	movhi	r4,65532
   372ec:	21076504 	addi	r4,r4,7572
   372f0:	2709883a 	add	r4,r4,fp
   372f4:	2085883a 	add	r2,r4,r2
   372f8:	10800017 	ldw	r2,0(r2)
   372fc:	10c00015 	stw	r3,0(r2)

    /* get the generator */
    secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);
   37300:	008000b4 	movhi	r2,2
   37304:	10a40304 	addi	r2,r2,-28660
   37308:	017fff34 	movhi	r5,65532
   3730c:	29476504 	addi	r5,r5,7572
   37310:	2f0b883a 	add	r5,r5,fp
   37314:	2885883a 	add	r2,r5,r2
   37318:	014001b4 	movhi	r5,6
   3731c:	296f2c04 	addi	r5,r5,-17232
   37320:	1009883a 	mov	r4,r2
   37324:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
    {
        static const unsigned char nums_b32[33] = "The scalar for this x is unknown";
        secp256k1_fe nums_x;
        secp256k1_ge nums_ge;
        int r;
        r = secp256k1_fe_set_b32(&nums_x, nums_b32);
   37328:	00800134 	movhi	r2,4
   3732c:	10b84d04 	addi	r2,r2,-7884
   37330:	00ffff34 	movhi	r3,65532
   37334:	18c76504 	addi	r3,r3,7572
   37338:	1f07883a 	add	r3,r3,fp
   3733c:	1885883a 	add	r2,r3,r2
   37340:	014001b4 	movhi	r5,6
   37344:	2972e704 	addi	r5,r5,-13412
   37348:	1009883a 	mov	r4,r2
   3734c:	0013a280 	call	13a28 <secp256k1_fe_set_b32>
   37350:	013fff34 	movhi	r4,65532
   37354:	21076704 	addi	r4,r4,7580
   37358:	2709883a 	add	r4,r4,fp
   3735c:	20800015 	stw	r2,0(r4)
        (void)r;
        VERIFY_CHECK(r);
   37360:	017fff34 	movhi	r5,65532
   37364:	29476704 	addi	r5,r5,7580
   37368:	2f0b883a 	add	r5,r5,fp
   3736c:	28800017 	ldw	r2,0(r5)
   37370:	1005003a 	cmpeq	r2,r2,zero
   37374:	10803fcc 	andi	r2,r2,255
   37378:	10000d26 	beq	r2,zero,373b0 <secp256k1_ecmult_gen_context_build+0x178>
   3737c:	d0a01617 	ldw	r2,-32680(gp)
   37380:	10c00317 	ldw	r3,12(r2)
   37384:	008001b4 	movhi	r2,6
   37388:	10b1ab04 	addi	r2,r2,-14676
   3738c:	d8800015 	stw	r2,0(sp)
   37390:	01c00b84 	movi	r7,46
   37394:	018001b4 	movhi	r6,6
   37398:	31b1a104 	addi	r6,r6,-14716
   3739c:	014001b4 	movhi	r5,6
   373a0:	296b3804 	addi	r5,r5,-21280
   373a4:	1809883a 	mov	r4,r3
   373a8:	00452600 	call	45260 <fprintf>
   373ac:	00450340 	call	45034 <abort>
        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);
   373b0:	00800134 	movhi	r2,4
   373b4:	10b84d04 	addi	r2,r2,-7884
   373b8:	013fff34 	movhi	r4,65532
   373bc:	21076504 	addi	r4,r4,7572
   373c0:	2709883a 	add	r4,r4,fp
   373c4:	2087883a 	add	r3,r4,r2
   373c8:	008000b4 	movhi	r2,2
   373cc:	10a44d04 	addi	r2,r2,-28364
   373d0:	017fff34 	movhi	r5,65532
   373d4:	29476504 	addi	r5,r5,7572
   373d8:	2f0b883a 	add	r5,r5,fp
   373dc:	2885883a 	add	r2,r5,r2
   373e0:	000d883a 	mov	r6,zero
   373e4:	180b883a 	mov	r5,r3
   373e8:	1009883a 	mov	r4,r2
   373ec:	0020e200 	call	20e20 <secp256k1_ge_set_xo_var>
   373f0:	00ffff34 	movhi	r3,65532
   373f4:	18c76704 	addi	r3,r3,7580
   373f8:	1f07883a 	add	r3,r3,fp
   373fc:	18800015 	stw	r2,0(r3)
        (void)r;
        VERIFY_CHECK(r);
   37400:	013fff34 	movhi	r4,65532
   37404:	21076704 	addi	r4,r4,7580
   37408:	2709883a 	add	r4,r4,fp
   3740c:	20800017 	ldw	r2,0(r4)
   37410:	1005003a 	cmpeq	r2,r2,zero
   37414:	10803fcc 	andi	r2,r2,255
   37418:	10000d26 	beq	r2,zero,37450 <secp256k1_ecmult_gen_context_build+0x218>
   3741c:	d0a01617 	ldw	r2,-32680(gp)
   37420:	10c00317 	ldw	r3,12(r2)
   37424:	008001b4 	movhi	r2,6
   37428:	10b1ab04 	addi	r2,r2,-14676
   3742c:	d8800015 	stw	r2,0(sp)
   37430:	01c00c44 	movi	r7,49
   37434:	018001b4 	movhi	r6,6
   37438:	31b1a104 	addi	r6,r6,-14716
   3743c:	014001b4 	movhi	r5,6
   37440:	296b3804 	addi	r5,r5,-21280
   37444:	1809883a 	mov	r4,r3
   37448:	00452600 	call	45260 <fprintf>
   3744c:	00450340 	call	45034 <abort>
        secp256k1_gej_set_ge(&nums_gej, &nums_ge);
   37450:	008000b4 	movhi	r2,2
   37454:	10a44d04 	addi	r2,r2,-28364
   37458:	017fff34 	movhi	r5,65532
   3745c:	29476504 	addi	r5,r5,7572
   37460:	2f0b883a 	add	r5,r5,fp
   37464:	2887883a 	add	r3,r5,r2
   37468:	008000b4 	movhi	r2,2
   3746c:	10a42804 	addi	r2,r2,-28512
   37470:	013fff34 	movhi	r4,65532
   37474:	21076504 	addi	r4,r4,7572
   37478:	2709883a 	add	r4,r4,fp
   3747c:	2085883a 	add	r2,r4,r2
   37480:	180b883a 	mov	r5,r3
   37484:	1009883a 	mov	r4,r2
   37488:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
        /* Add G to make the bits in x uniformly distributed. */
        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, &secp256k1_ge_const_g, NULL);
   3748c:	008000b4 	movhi	r2,2
   37490:	10a42804 	addi	r2,r2,-28512
   37494:	017fff34 	movhi	r5,65532
   37498:	29476504 	addi	r5,r5,7572
   3749c:	2f0b883a 	add	r5,r5,fp
   374a0:	2887883a 	add	r3,r5,r2
   374a4:	008000b4 	movhi	r2,2
   374a8:	10a42804 	addi	r2,r2,-28512
   374ac:	013fff34 	movhi	r4,65532
   374b0:	21076504 	addi	r4,r4,7572
   374b4:	2709883a 	add	r4,r4,fp
   374b8:	2085883a 	add	r2,r4,r2
   374bc:	000f883a 	mov	r7,zero
   374c0:	018001b4 	movhi	r6,6
   374c4:	31af2c04 	addi	r6,r6,-17232
   374c8:	180b883a 	mov	r5,r3
   374cc:	1009883a 	mov	r4,r2
   374d0:	0021ce80 	call	21ce8 <secp256k1_gej_add_ge_var>
    /* compute prec. */
    {
        secp256k1_gej precj[1024]; /* Jacobian versions of prec. */
        secp256k1_gej gbase;
        secp256k1_gej numsbase;
        gbase = gj; /* 16^j * G */
   374d4:	00800134 	movhi	r2,4
   374d8:	10b87204 	addi	r2,r2,-7736
   374dc:	017fff34 	movhi	r5,65532
   374e0:	29476504 	addi	r5,r5,7572
   374e4:	2f0b883a 	add	r5,r5,fp
   374e8:	2887883a 	add	r3,r5,r2
   374ec:	008000b4 	movhi	r2,2
   374f0:	10a40304 	addi	r2,r2,-28660
   374f4:	013fff34 	movhi	r4,65532
   374f8:	21076504 	addi	r4,r4,7572
   374fc:	2709883a 	add	r4,r4,fp
   37500:	2085883a 	add	r2,r4,r2
   37504:	1009883a 	mov	r4,r2
   37508:	00802504 	movi	r2,148
   3750c:	100d883a 	mov	r6,r2
   37510:	200b883a 	mov	r5,r4
   37514:	1809883a 	mov	r4,r3
   37518:	0045c980 	call	45c98 <memcpy>
        numsbase = nums_gej; /* 2^j * nums. */
   3751c:	00800134 	movhi	r2,4
   37520:	10b84d04 	addi	r2,r2,-7884
   37524:	017fff34 	movhi	r5,65532
   37528:	29476504 	addi	r5,r5,7572
   3752c:	2f0b883a 	add	r5,r5,fp
   37530:	2887883a 	add	r3,r5,r2
   37534:	008000b4 	movhi	r2,2
   37538:	10a42804 	addi	r2,r2,-28512
   3753c:	013fff34 	movhi	r4,65532
   37540:	21076504 	addi	r4,r4,7572
   37544:	2709883a 	add	r4,r4,fp
   37548:	2085883a 	add	r2,r4,r2
   3754c:	1009883a 	mov	r4,r2
   37550:	00802504 	movi	r2,148
   37554:	100d883a 	mov	r6,r2
   37558:	200b883a 	mov	r5,r4
   3755c:	1809883a 	mov	r4,r3
   37560:	0045c980 	call	45c98 <memcpy>
        for (j = 0; j < 64; j++) {
   37564:	017fff34 	movhi	r5,65532
   37568:	29476604 	addi	r5,r5,7576
   3756c:	2f0b883a 	add	r5,r5,fp
   37570:	28000015 	stw	zero,0(r5)
   37574:	0000cd06 	br	378ac <secp256k1_ecmult_gen_context_build+0x674>
            /* Set precj[j*16 .. j*16+15] to (numsbase, numsbase + gbase, ..., numsbase + 15*gbase). */
            precj[j*16] = numsbase;
   37578:	00ffff34 	movhi	r3,65532
   3757c:	18c76604 	addi	r3,r3,7576
   37580:	1f07883a 	add	r3,r3,fp
   37584:	18800017 	ldw	r2,0(r3)
   37588:	1006913a 	slli	r3,r2,4
   3758c:	008000b4 	movhi	r2,2
   37590:	10a44d04 	addi	r2,r2,-28364
   37594:	013fff34 	movhi	r4,65532
   37598:	21076504 	addi	r4,r4,7572
   3759c:	2709883a 	add	r4,r4,fp
   375a0:	20a1883a 	add	r16,r4,r2
   375a4:	01402504 	movi	r5,148
   375a8:	1809883a 	mov	r4,r3
   375ac:	0042b540 	call	42b54 <__mulsi3>
   375b0:	8087883a 	add	r3,r16,r2
   375b4:	00800134 	movhi	r2,4
   375b8:	10b84d04 	addi	r2,r2,-7884
   375bc:	017fff34 	movhi	r5,65532
   375c0:	29476504 	addi	r5,r5,7572
   375c4:	2f0b883a 	add	r5,r5,fp
   375c8:	2885883a 	add	r2,r5,r2
   375cc:	1009883a 	mov	r4,r2
   375d0:	00802504 	movi	r2,148
   375d4:	100d883a 	mov	r6,r2
   375d8:	200b883a 	mov	r5,r4
   375dc:	1809883a 	mov	r4,r3
   375e0:	0045c980 	call	45c98 <memcpy>
            for (i = 1; i < 16; i++) {
   375e4:	00800044 	movi	r2,1
   375e8:	00ffff34 	movhi	r3,65532
   375ec:	18c76504 	addi	r3,r3,7572
   375f0:	1f07883a 	add	r3,r3,fp
   375f4:	18800015 	stw	r2,0(r3)
   375f8:	00003d06 	br	376f0 <secp256k1_ecmult_gen_context_build+0x4b8>
                secp256k1_gej_add_var(&precj[j*16 + i], &precj[j*16 + i - 1], &gbase, NULL);
   375fc:	013fff34 	movhi	r4,65532
   37600:	21076604 	addi	r4,r4,7576
   37604:	2709883a 	add	r4,r4,fp
   37608:	20800017 	ldw	r2,0(r4)
   3760c:	1006913a 	slli	r3,r2,4
   37610:	017fff34 	movhi	r5,65532
   37614:	29476504 	addi	r5,r5,7572
   37618:	2f0b883a 	add	r5,r5,fp
   3761c:	28800017 	ldw	r2,0(r5)
   37620:	1887883a 	add	r3,r3,r2
   37624:	008000b4 	movhi	r2,2
   37628:	10a44d04 	addi	r2,r2,-28364
   3762c:	013fff34 	movhi	r4,65532
   37630:	21076504 	addi	r4,r4,7572
   37634:	2709883a 	add	r4,r4,fp
   37638:	20a1883a 	add	r16,r4,r2
   3763c:	01402504 	movi	r5,148
   37640:	1809883a 	mov	r4,r3
   37644:	0042b540 	call	42b54 <__mulsi3>
   37648:	80a3883a 	add	r17,r16,r2
   3764c:	017fff34 	movhi	r5,65532
   37650:	29476604 	addi	r5,r5,7576
   37654:	2f0b883a 	add	r5,r5,fp
   37658:	28800017 	ldw	r2,0(r5)
   3765c:	1006913a 	slli	r3,r2,4
   37660:	013fff34 	movhi	r4,65532
   37664:	21076504 	addi	r4,r4,7572
   37668:	2709883a 	add	r4,r4,fp
   3766c:	20800017 	ldw	r2,0(r4)
   37670:	1885883a 	add	r2,r3,r2
   37674:	10ffffc4 	addi	r3,r2,-1
   37678:	008000b4 	movhi	r2,2
   3767c:	10a44d04 	addi	r2,r2,-28364
   37680:	017fff34 	movhi	r5,65532
   37684:	29476504 	addi	r5,r5,7572
   37688:	2f0b883a 	add	r5,r5,fp
   3768c:	28a1883a 	add	r16,r5,r2
   37690:	01402504 	movi	r5,148
   37694:	1809883a 	mov	r4,r3
   37698:	0042b540 	call	42b54 <__mulsi3>
   3769c:	8087883a 	add	r3,r16,r2
   376a0:	00800134 	movhi	r2,4
   376a4:	10b87204 	addi	r2,r2,-7736
   376a8:	013fff34 	movhi	r4,65532
   376ac:	21076504 	addi	r4,r4,7572
   376b0:	2709883a 	add	r4,r4,fp
   376b4:	2085883a 	add	r2,r4,r2
   376b8:	000f883a 	mov	r7,zero
   376bc:	100d883a 	mov	r6,r2
   376c0:	180b883a 	mov	r5,r3
   376c4:	8809883a 	mov	r4,r17
   376c8:	00218000 	call	21800 <secp256k1_gej_add_var>
        gbase = gj; /* 16^j * G */
        numsbase = nums_gej; /* 2^j * nums. */
        for (j = 0; j < 64; j++) {
            /* Set precj[j*16 .. j*16+15] to (numsbase, numsbase + gbase, ..., numsbase + 15*gbase). */
            precj[j*16] = numsbase;
            for (i = 1; i < 16; i++) {
   376cc:	017fff34 	movhi	r5,65532
   376d0:	29476504 	addi	r5,r5,7572
   376d4:	2f0b883a 	add	r5,r5,fp
   376d8:	28800017 	ldw	r2,0(r5)
   376dc:	10800044 	addi	r2,r2,1
   376e0:	00ffff34 	movhi	r3,65532
   376e4:	18c76504 	addi	r3,r3,7572
   376e8:	1f07883a 	add	r3,r3,fp
   376ec:	18800015 	stw	r2,0(r3)
   376f0:	013fff34 	movhi	r4,65532
   376f4:	21076504 	addi	r4,r4,7572
   376f8:	2709883a 	add	r4,r4,fp
   376fc:	20800017 	ldw	r2,0(r4)
   37700:	10800410 	cmplti	r2,r2,16
   37704:	103fbd1e 	bne	r2,zero,375fc <__alt_mem_epcs_flash_controller+0xfe0265fc>
                secp256k1_gej_add_var(&precj[j*16 + i], &precj[j*16 + i - 1], &gbase, NULL);
            }
            /* Multiply gbase by 16. */
            for (i = 0; i < 4; i++) {
   37708:	017fff34 	movhi	r5,65532
   3770c:	29476504 	addi	r5,r5,7572
   37710:	2f0b883a 	add	r5,r5,fp
   37714:	28000015 	stw	zero,0(r5)
   37718:	00001906 	br	37780 <secp256k1_ecmult_gen_context_build+0x548>
                secp256k1_gej_double_var(&gbase, &gbase, NULL);
   3771c:	00800134 	movhi	r2,4
   37720:	10b87204 	addi	r2,r2,-7736
   37724:	013fff34 	movhi	r4,65532
   37728:	21076504 	addi	r4,r4,7572
   3772c:	2709883a 	add	r4,r4,fp
   37730:	2087883a 	add	r3,r4,r2
   37734:	00800134 	movhi	r2,4
   37738:	10b87204 	addi	r2,r2,-7736
   3773c:	017fff34 	movhi	r5,65532
   37740:	29476504 	addi	r5,r5,7572
   37744:	2f0b883a 	add	r5,r5,fp
   37748:	2885883a 	add	r2,r5,r2
   3774c:	000d883a 	mov	r6,zero
   37750:	180b883a 	mov	r5,r3
   37754:	1009883a 	mov	r4,r2
   37758:	002148c0 	call	2148c <secp256k1_gej_double_var>
            precj[j*16] = numsbase;
            for (i = 1; i < 16; i++) {
                secp256k1_gej_add_var(&precj[j*16 + i], &precj[j*16 + i - 1], &gbase, NULL);
            }
            /* Multiply gbase by 16. */
            for (i = 0; i < 4; i++) {
   3775c:	00ffff34 	movhi	r3,65532
   37760:	18c76504 	addi	r3,r3,7572
   37764:	1f07883a 	add	r3,r3,fp
   37768:	18800017 	ldw	r2,0(r3)
   3776c:	10800044 	addi	r2,r2,1
   37770:	013fff34 	movhi	r4,65532
   37774:	21076504 	addi	r4,r4,7572
   37778:	2709883a 	add	r4,r4,fp
   3777c:	20800015 	stw	r2,0(r4)
   37780:	017fff34 	movhi	r5,65532
   37784:	29476504 	addi	r5,r5,7572
   37788:	2f0b883a 	add	r5,r5,fp
   3778c:	28800017 	ldw	r2,0(r5)
   37790:	10800110 	cmplti	r2,r2,4
   37794:	103fe11e 	bne	r2,zero,3771c <__alt_mem_epcs_flash_controller+0xfe02671c>
                secp256k1_gej_double_var(&gbase, &gbase, NULL);
            }
            /* Multiply numbase by 2. */
            secp256k1_gej_double_var(&numsbase, &numsbase, NULL);
   37798:	00800134 	movhi	r2,4
   3779c:	10b84d04 	addi	r2,r2,-7884
   377a0:	013fff34 	movhi	r4,65532
   377a4:	21076504 	addi	r4,r4,7572
   377a8:	2709883a 	add	r4,r4,fp
   377ac:	2087883a 	add	r3,r4,r2
   377b0:	00800134 	movhi	r2,4
   377b4:	10b84d04 	addi	r2,r2,-7884
   377b8:	017fff34 	movhi	r5,65532
   377bc:	29476504 	addi	r5,r5,7572
   377c0:	2f0b883a 	add	r5,r5,fp
   377c4:	2885883a 	add	r2,r5,r2
   377c8:	000d883a 	mov	r6,zero
   377cc:	180b883a 	mov	r5,r3
   377d0:	1009883a 	mov	r4,r2
   377d4:	002148c0 	call	2148c <secp256k1_gej_double_var>
            if (j == 62) {
   377d8:	00ffff34 	movhi	r3,65532
   377dc:	18c76604 	addi	r3,r3,7576
   377e0:	1f07883a 	add	r3,r3,fp
   377e4:	18800017 	ldw	r2,0(r3)
   377e8:	10800f98 	cmpnei	r2,r2,62
   377ec:	1000261e 	bne	r2,zero,37888 <secp256k1_ecmult_gen_context_build+0x650>
                /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */
                secp256k1_gej_neg(&numsbase, &numsbase);
   377f0:	00800134 	movhi	r2,4
   377f4:	10b84d04 	addi	r2,r2,-7884
   377f8:	013fff34 	movhi	r4,65532
   377fc:	21076504 	addi	r4,r4,7572
   37800:	2709883a 	add	r4,r4,fp
   37804:	2087883a 	add	r3,r4,r2
   37808:	00800134 	movhi	r2,4
   3780c:	10b84d04 	addi	r2,r2,-7884
   37810:	017fff34 	movhi	r5,65532
   37814:	29476504 	addi	r5,r5,7572
   37818:	2f0b883a 	add	r5,r5,fp
   3781c:	2885883a 	add	r2,r5,r2
   37820:	180b883a 	mov	r5,r3
   37824:	1009883a 	mov	r4,r2
   37828:	00210f40 	call	210f4 <secp256k1_gej_neg>
                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);
   3782c:	008000b4 	movhi	r2,2
   37830:	10a42804 	addi	r2,r2,-28512
   37834:	00ffff34 	movhi	r3,65532
   37838:	18c76504 	addi	r3,r3,7572
   3783c:	1f07883a 	add	r3,r3,fp
   37840:	1889883a 	add	r4,r3,r2
   37844:	00800134 	movhi	r2,4
   37848:	10b84d04 	addi	r2,r2,-7884
   3784c:	017fff34 	movhi	r5,65532
   37850:	29476504 	addi	r5,r5,7572
   37854:	2f0b883a 	add	r5,r5,fp
   37858:	2887883a 	add	r3,r5,r2
   3785c:	00800134 	movhi	r2,4
   37860:	10b84d04 	addi	r2,r2,-7884
   37864:	017fff34 	movhi	r5,65532
   37868:	29476504 	addi	r5,r5,7572
   3786c:	2f0b883a 	add	r5,r5,fp
   37870:	2885883a 	add	r2,r5,r2
   37874:	000f883a 	mov	r7,zero
   37878:	200d883a 	mov	r6,r4
   3787c:	180b883a 	mov	r5,r3
   37880:	1009883a 	mov	r4,r2
   37884:	00218000 	call	21800 <secp256k1_gej_add_var>
        secp256k1_gej precj[1024]; /* Jacobian versions of prec. */
        secp256k1_gej gbase;
        secp256k1_gej numsbase;
        gbase = gj; /* 16^j * G */
        numsbase = nums_gej; /* 2^j * nums. */
        for (j = 0; j < 64; j++) {
   37888:	00ffff34 	movhi	r3,65532
   3788c:	18c76604 	addi	r3,r3,7576
   37890:	1f07883a 	add	r3,r3,fp
   37894:	18800017 	ldw	r2,0(r3)
   37898:	10800044 	addi	r2,r2,1
   3789c:	013fff34 	movhi	r4,65532
   378a0:	21076604 	addi	r4,r4,7576
   378a4:	2709883a 	add	r4,r4,fp
   378a8:	20800015 	stw	r2,0(r4)
   378ac:	017fff34 	movhi	r5,65532
   378b0:	29476604 	addi	r5,r5,7576
   378b4:	2f0b883a 	add	r5,r5,fp
   378b8:	28800017 	ldw	r2,0(r5)
   378bc:	10801010 	cmplti	r2,r2,64
   378c0:	103f2d1e 	bne	r2,zero,37578 <__alt_mem_epcs_flash_controller+0xfe026578>
                /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */
                secp256k1_gej_neg(&numsbase, &numsbase);
                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);
            }
        }
        secp256k1_ge_set_all_gej_var(1024, prec, precj, cb);
   378c4:	00800134 	movhi	r2,4
   378c8:	10b89804 	addi	r2,r2,-7584
   378cc:	013fff34 	movhi	r4,65532
   378d0:	21076504 	addi	r4,r4,7572
   378d4:	2709883a 	add	r4,r4,fp
   378d8:	2087883a 	add	r3,r4,r2
   378dc:	008000b4 	movhi	r2,2
   378e0:	10a44d04 	addi	r2,r2,-28364
   378e4:	017fff34 	movhi	r5,65532
   378e8:	29476504 	addi	r5,r5,7572
   378ec:	2f0b883a 	add	r5,r5,fp
   378f0:	2889883a 	add	r4,r5,r2
   378f4:	017fff34 	movhi	r5,65532
   378f8:	29476804 	addi	r5,r5,7584
   378fc:	e145883a 	add	r2,fp,r5
   37900:	19c00017 	ldw	r7,0(r3)
   37904:	200d883a 	mov	r6,r4
   37908:	100b883a 	mov	r5,r2
   3790c:	01010004 	movi	r4,1024
   37910:	00205380 	call	20538 <secp256k1_ge_set_all_gej_var>
    }
    for (j = 0; j < 64; j++) {
   37914:	00bfff34 	movhi	r2,65532
   37918:	10876604 	addi	r2,r2,7576
   3791c:	1705883a 	add	r2,r2,fp
   37920:	10000015 	stw	zero,0(r2)
   37924:	00004506 	br	37a3c <secp256k1_ecmult_gen_context_build+0x804>
        for (i = 0; i < 16; i++) {
   37928:	00ffff34 	movhi	r3,65532
   3792c:	18c76504 	addi	r3,r3,7572
   37930:	1f07883a 	add	r3,r3,fp
   37934:	18000015 	stw	zero,0(r3)
   37938:	00003106 	br	37a00 <secp256k1_ecmult_gen_context_build+0x7c8>
            secp256k1_ge_to_storage(&(*ctx->prec)[j][i], &prec[j*16 + i]);
   3793c:	00800134 	movhi	r2,4
   37940:	10b89704 	addi	r2,r2,-7588
   37944:	013fff34 	movhi	r4,65532
   37948:	21076504 	addi	r4,r4,7572
   3794c:	2709883a 	add	r4,r4,fp
   37950:	2085883a 	add	r2,r4,r2
   37954:	10800017 	ldw	r2,0(r2)
   37958:	10c00017 	ldw	r3,0(r2)
   3795c:	017fff34 	movhi	r5,65532
   37960:	29476604 	addi	r5,r5,7576
   37964:	2f0b883a 	add	r5,r5,fp
   37968:	28800017 	ldw	r2,0(r5)
   3796c:	1008913a 	slli	r4,r2,4
   37970:	017fff34 	movhi	r5,65532
   37974:	29476504 	addi	r5,r5,7572
   37978:	2f0b883a 	add	r5,r5,fp
   3797c:	28800017 	ldw	r2,0(r5)
   37980:	2085883a 	add	r2,r4,r2
   37984:	100491ba 	slli	r2,r2,6
   37988:	18a3883a 	add	r17,r3,r2
   3798c:	00ffff34 	movhi	r3,65532
   37990:	18c76604 	addi	r3,r3,7576
   37994:	1f07883a 	add	r3,r3,fp
   37998:	18800017 	ldw	r2,0(r3)
   3799c:	1006913a 	slli	r3,r2,4
   379a0:	013fff34 	movhi	r4,65532
   379a4:	21076504 	addi	r4,r4,7572
   379a8:	2709883a 	add	r4,r4,fp
   379ac:	20800017 	ldw	r2,0(r4)
   379b0:	1885883a 	add	r2,r3,r2
   379b4:	017fff34 	movhi	r5,65532
   379b8:	29476804 	addi	r5,r5,7584
   379bc:	e161883a 	add	r16,fp,r5
   379c0:	01401904 	movi	r5,100
   379c4:	1009883a 	mov	r4,r2
   379c8:	0042b540 	call	42b54 <__mulsi3>
   379cc:	8085883a 	add	r2,r16,r2
   379d0:	100b883a 	mov	r5,r2
   379d4:	8809883a 	mov	r4,r17
   379d8:	0022f440 	call	22f44 <secp256k1_ge_to_storage>
            }
        }
        secp256k1_ge_set_all_gej_var(1024, prec, precj, cb);
    }
    for (j = 0; j < 64; j++) {
        for (i = 0; i < 16; i++) {
   379dc:	00ffff34 	movhi	r3,65532
   379e0:	18c76504 	addi	r3,r3,7572
   379e4:	1f07883a 	add	r3,r3,fp
   379e8:	18800017 	ldw	r2,0(r3)
   379ec:	10800044 	addi	r2,r2,1
   379f0:	013fff34 	movhi	r4,65532
   379f4:	21076504 	addi	r4,r4,7572
   379f8:	2709883a 	add	r4,r4,fp
   379fc:	20800015 	stw	r2,0(r4)
   37a00:	017fff34 	movhi	r5,65532
   37a04:	29476504 	addi	r5,r5,7572
   37a08:	2f0b883a 	add	r5,r5,fp
   37a0c:	28800017 	ldw	r2,0(r5)
   37a10:	10800410 	cmplti	r2,r2,16
   37a14:	103fc91e 	bne	r2,zero,3793c <__alt_mem_epcs_flash_controller+0xfe02693c>
                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);
            }
        }
        secp256k1_ge_set_all_gej_var(1024, prec, precj, cb);
    }
    for (j = 0; j < 64; j++) {
   37a18:	00ffff34 	movhi	r3,65532
   37a1c:	18c76604 	addi	r3,r3,7576
   37a20:	1f07883a 	add	r3,r3,fp
   37a24:	18800017 	ldw	r2,0(r3)
   37a28:	10800044 	addi	r2,r2,1
   37a2c:	013fff34 	movhi	r4,65532
   37a30:	21076604 	addi	r4,r4,7576
   37a34:	2709883a 	add	r4,r4,fp
   37a38:	20800015 	stw	r2,0(r4)
   37a3c:	017fff34 	movhi	r5,65532
   37a40:	29476604 	addi	r5,r5,7576
   37a44:	2f0b883a 	add	r5,r5,fp
   37a48:	28800017 	ldw	r2,0(r5)
   37a4c:	10801010 	cmplti	r2,r2,64
   37a50:	103fb51e 	bne	r2,zero,37928 <__alt_mem_epcs_flash_controller+0xfe026928>
    }
#else
    (void)cb;
    ctx->prec = (secp256k1_ge_storage (*)[64][16])secp256k1_ecmult_static_context;
#endif
    secp256k1_ecmult_gen_blind(ctx, NULL);
   37a54:	00800134 	movhi	r2,4
   37a58:	10b89704 	addi	r2,r2,-7588
   37a5c:	00ffff34 	movhi	r3,65532
   37a60:	18c76504 	addi	r3,r3,7572
   37a64:	1f07883a 	add	r3,r3,fp
   37a68:	1885883a 	add	r2,r3,r2
   37a6c:	000b883a 	mov	r5,zero
   37a70:	11000017 	ldw	r4,0(r2)
   37a74:	0037d980 	call	37d98 <secp256k1_ecmult_gen_blind>
   37a78:	00000106 	br	37a80 <secp256k1_ecmult_gen_context_build+0x848>
    secp256k1_gej nums_gej;
    int i, j;
#endif

    if (ctx->prec != NULL) {
        return;
   37a7c:	0001883a 	nop
#else
    (void)cb;
    ctx->prec = (secp256k1_ge_storage (*)[64][16])secp256k1_ecmult_static_context;
#endif
    secp256k1_ecmult_gen_blind(ctx, NULL);
}
   37a80:	e6fffe04 	addi	sp,fp,-8
   37a84:	dfc00317 	ldw	ra,12(sp)
   37a88:	df000217 	ldw	fp,8(sp)
   37a8c:	dc400117 	ldw	r17,4(sp)
   37a90:	dc000017 	ldw	r16,0(sp)
   37a94:	dec00404 	addi	sp,sp,16
   37a98:	f800283a 	ret

00037a9c <secp256k1_ecmult_gen_context_is_built>:

static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context* ctx) {
   37a9c:	defffe04 	addi	sp,sp,-8
   37aa0:	df000115 	stw	fp,4(sp)
   37aa4:	df000104 	addi	fp,sp,4
   37aa8:	e13fff15 	stw	r4,-4(fp)
    return ctx->prec != NULL;
   37aac:	e0bfff17 	ldw	r2,-4(fp)
   37ab0:	10800017 	ldw	r2,0(r2)
   37ab4:	1004c03a 	cmpne	r2,r2,zero
   37ab8:	10803fcc 	andi	r2,r2,255
}
   37abc:	e037883a 	mov	sp,fp
   37ac0:	df000017 	ldw	fp,0(sp)
   37ac4:	dec00104 	addi	sp,sp,4
   37ac8:	f800283a 	ret

00037acc <secp256k1_ecmult_gen_context_clone>:

static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context *dst,
                                               const secp256k1_ecmult_gen_context *src, const secp256k1_callback* cb) {
   37acc:	defffb04 	addi	sp,sp,-20
   37ad0:	dfc00415 	stw	ra,16(sp)
   37ad4:	df000315 	stw	fp,12(sp)
   37ad8:	df000304 	addi	fp,sp,12
   37adc:	e13ffd15 	stw	r4,-12(fp)
   37ae0:	e17ffe15 	stw	r5,-8(fp)
   37ae4:	e1bfff15 	stw	r6,-4(fp)
    if (src->prec == NULL) {
   37ae8:	e0bffe17 	ldw	r2,-8(fp)
   37aec:	10800017 	ldw	r2,0(r2)
   37af0:	1000031e 	bne	r2,zero,37b00 <secp256k1_ecmult_gen_context_clone+0x34>
        dst->prec = NULL;
   37af4:	e0bffd17 	ldw	r2,-12(fp)
   37af8:	10000015 	stw	zero,0(r2)
        dst->prec = src->prec;
#endif
        dst->initial = src->initial;
        dst->blind = src->blind;
    }
}
   37afc:	00002906 	br	37ba4 <secp256k1_ecmult_gen_context_clone+0xd8>
                                               const secp256k1_ecmult_gen_context *src, const secp256k1_callback* cb) {
    if (src->prec == NULL) {
        dst->prec = NULL;
    } else {
#ifndef USE_ECMULT_STATIC_PRECOMPUTATION
        dst->prec = (secp256k1_ge_storage (*)[64][16])checked_malloc(cb, sizeof(*dst->prec));
   37b00:	01400074 	movhi	r5,1
   37b04:	e13fff17 	ldw	r4,-4(fp)
   37b08:	000c1a80 	call	c1a8 <checked_malloc>
   37b0c:	1007883a 	mov	r3,r2
   37b10:	e0bffd17 	ldw	r2,-12(fp)
   37b14:	10c00015 	stw	r3,0(r2)
        memcpy(dst->prec, src->prec, sizeof(*dst->prec));
   37b18:	e0bffd17 	ldw	r2,-12(fp)
   37b1c:	10c00017 	ldw	r3,0(r2)
   37b20:	e0bffe17 	ldw	r2,-8(fp)
   37b24:	10800017 	ldw	r2,0(r2)
   37b28:	01800074 	movhi	r6,1
   37b2c:	100b883a 	mov	r5,r2
   37b30:	1809883a 	mov	r4,r3
   37b34:	0045c980 	call	45c98 <memcpy>
#else
        (void)cb;
        dst->prec = src->prec;
#endif
        dst->initial = src->initial;
   37b38:	e0fffd17 	ldw	r3,-12(fp)
   37b3c:	e0bffe17 	ldw	r2,-8(fp)
   37b40:	18c00904 	addi	r3,r3,36
   37b44:	10800904 	addi	r2,r2,36
   37b48:	01002504 	movi	r4,148
   37b4c:	200d883a 	mov	r6,r4
   37b50:	100b883a 	mov	r5,r2
   37b54:	1809883a 	mov	r4,r3
   37b58:	0045c980 	call	45c98 <memcpy>
        dst->blind = src->blind;
   37b5c:	e0bffd17 	ldw	r2,-12(fp)
   37b60:	e0fffe17 	ldw	r3,-8(fp)
   37b64:	19000117 	ldw	r4,4(r3)
   37b68:	11000115 	stw	r4,4(r2)
   37b6c:	19000217 	ldw	r4,8(r3)
   37b70:	11000215 	stw	r4,8(r2)
   37b74:	19000317 	ldw	r4,12(r3)
   37b78:	11000315 	stw	r4,12(r2)
   37b7c:	19000417 	ldw	r4,16(r3)
   37b80:	11000415 	stw	r4,16(r2)
   37b84:	19000517 	ldw	r4,20(r3)
   37b88:	11000515 	stw	r4,20(r2)
   37b8c:	19000617 	ldw	r4,24(r3)
   37b90:	11000615 	stw	r4,24(r2)
   37b94:	19000717 	ldw	r4,28(r3)
   37b98:	11000715 	stw	r4,28(r2)
   37b9c:	18c00817 	ldw	r3,32(r3)
   37ba0:	10c00815 	stw	r3,32(r2)
    }
}
   37ba4:	0001883a 	nop
   37ba8:	e037883a 	mov	sp,fp
   37bac:	dfc00117 	ldw	ra,4(sp)
   37bb0:	df000017 	ldw	fp,0(sp)
   37bb4:	dec00204 	addi	sp,sp,8
   37bb8:	f800283a 	ret

00037bbc <secp256k1_ecmult_gen_context_clear>:

static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {
   37bbc:	defffd04 	addi	sp,sp,-12
   37bc0:	dfc00215 	stw	ra,8(sp)
   37bc4:	df000115 	stw	fp,4(sp)
   37bc8:	df000104 	addi	fp,sp,4
   37bcc:	e13fff15 	stw	r4,-4(fp)
#ifndef USE_ECMULT_STATIC_PRECOMPUTATION
    free(ctx->prec);
   37bd0:	e0bfff17 	ldw	r2,-4(fp)
   37bd4:	10800017 	ldw	r2,0(r2)
   37bd8:	1009883a 	mov	r4,r2
   37bdc:	00453fc0 	call	453fc <free>
#endif
    secp256k1_scalar_clear(&ctx->blind);
   37be0:	e0bfff17 	ldw	r2,-4(fp)
   37be4:	10800104 	addi	r2,r2,4
   37be8:	1009883a 	mov	r4,r2
   37bec:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    secp256k1_gej_clear(&ctx->initial);
   37bf0:	e0bfff17 	ldw	r2,-4(fp)
   37bf4:	10800904 	addi	r2,r2,36
   37bf8:	1009883a 	mov	r4,r2
   37bfc:	0020c780 	call	20c78 <secp256k1_gej_clear>
    ctx->prec = NULL;
   37c00:	e0bfff17 	ldw	r2,-4(fp)
   37c04:	10000015 	stw	zero,0(r2)
}
   37c08:	0001883a 	nop
   37c0c:	e037883a 	mov	sp,fp
   37c10:	dfc00117 	ldw	ra,4(sp)
   37c14:	df000017 	ldw	fp,0(sp)
   37c18:	dec00204 	addi	sp,sp,8
   37c1c:	f800283a 	ret

00037c20 <secp256k1_ecmult_gen>:

static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {
   37c20:	deffc704 	addi	sp,sp,-228
   37c24:	dfc03815 	stw	ra,224(sp)
   37c28:	df003715 	stw	fp,220(sp)
   37c2c:	df003704 	addi	fp,sp,220
   37c30:	e13ffd15 	stw	r4,-12(fp)
   37c34:	e17ffe15 	stw	r5,-8(fp)
   37c38:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_ge add;
    secp256k1_ge_storage adds;
    secp256k1_scalar gnb;
    int bits;
    int i, j;
    memset(&adds, 0, sizeof(adds));
   37c3c:	e0bfe504 	addi	r2,fp,-108
   37c40:	01801004 	movi	r6,64
   37c44:	000b883a 	mov	r5,zero
   37c48:	1009883a 	mov	r4,r2
   37c4c:	0045f3c0 	call	45f3c <memset>
    *r = ctx->initial;
   37c50:	e0fffe17 	ldw	r3,-8(fp)
   37c54:	e0bffd17 	ldw	r2,-12(fp)
   37c58:	1809883a 	mov	r4,r3
   37c5c:	10800904 	addi	r2,r2,36
   37c60:	00c02504 	movi	r3,148
   37c64:	180d883a 	mov	r6,r3
   37c68:	100b883a 	mov	r5,r2
   37c6c:	0045c980 	call	45c98 <memcpy>
    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */
    secp256k1_scalar_add(&gnb, gn, &ctx->blind);
   37c70:	e0bffd17 	ldw	r2,-12(fp)
   37c74:	10c00104 	addi	r3,r2,4
   37c78:	e0bff504 	addi	r2,fp,-44
   37c7c:	180d883a 	mov	r6,r3
   37c80:	e17fff17 	ldw	r5,-4(fp)
   37c84:	1009883a 	mov	r4,r2
   37c88:	0023ba00 	call	23ba0 <secp256k1_scalar_add>
    add.infinity = 0;
   37c8c:	e03fe415 	stw	zero,-112(fp)
    for (j = 0; j < 64; j++) {
   37c90:	e03fca15 	stw	zero,-216(fp)
   37c94:	00003006 	br	37d58 <secp256k1_ecmult_gen+0x138>
        bits = secp256k1_scalar_get_bits(&gnb, j * 4, 4);
   37c98:	e0bfca17 	ldw	r2,-216(fp)
   37c9c:	1085883a 	add	r2,r2,r2
   37ca0:	1085883a 	add	r2,r2,r2
   37ca4:	1007883a 	mov	r3,r2
   37ca8:	e0bff504 	addi	r2,fp,-44
   37cac:	01800104 	movi	r6,4
   37cb0:	180b883a 	mov	r5,r3
   37cb4:	1009883a 	mov	r4,r2
   37cb8:	00232c80 	call	232c8 <secp256k1_scalar_get_bits>
   37cbc:	e0bfcb15 	stw	r2,-212(fp)
        for (i = 0; i < 16; i++) {
   37cc0:	e03fc915 	stw	zero,-220(fp)
   37cc4:	00001406 	br	37d18 <secp256k1_ecmult_gen+0xf8>
             *    (https://cryptojedi.org/peter/data/chesrump-20130822.pdf) and
             *   "Cache Attacks and Countermeasures: the Case of AES", RSA 2006,
             *    by Dag Arne Osvik, Adi Shamir, and Eran Tromer
             *    (http://www.tau.ac.il/~tromer/papers/cache.pdf)
             */
            secp256k1_ge_storage_cmov(&adds, &(*ctx->prec)[j][i], i == bits);
   37cc8:	e0bffd17 	ldw	r2,-12(fp)
   37ccc:	10c00017 	ldw	r3,0(r2)
   37cd0:	e0bfca17 	ldw	r2,-216(fp)
   37cd4:	1008913a 	slli	r4,r2,4
   37cd8:	e0bfc917 	ldw	r2,-220(fp)
   37cdc:	2085883a 	add	r2,r4,r2
   37ce0:	100491ba 	slli	r2,r2,6
   37ce4:	1889883a 	add	r4,r3,r2
   37ce8:	e0ffc917 	ldw	r3,-220(fp)
   37cec:	e0bfcb17 	ldw	r2,-212(fp)
   37cf0:	1885003a 	cmpeq	r2,r3,r2
   37cf4:	10c03fcc 	andi	r3,r2,255
   37cf8:	e0bfe504 	addi	r2,fp,-108
   37cfc:	180d883a 	mov	r6,r3
   37d00:	200b883a 	mov	r5,r4
   37d04:	1009883a 	mov	r4,r2
   37d08:	00231280 	call	23128 <secp256k1_ge_storage_cmov>
    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */
    secp256k1_scalar_add(&gnb, gn, &ctx->blind);
    add.infinity = 0;
    for (j = 0; j < 64; j++) {
        bits = secp256k1_scalar_get_bits(&gnb, j * 4, 4);
        for (i = 0; i < 16; i++) {
   37d0c:	e0bfc917 	ldw	r2,-220(fp)
   37d10:	10800044 	addi	r2,r2,1
   37d14:	e0bfc915 	stw	r2,-220(fp)
   37d18:	e0bfc917 	ldw	r2,-220(fp)
   37d1c:	10800410 	cmplti	r2,r2,16
   37d20:	103fe91e 	bne	r2,zero,37cc8 <__alt_mem_epcs_flash_controller+0xfe026cc8>
             *    by Dag Arne Osvik, Adi Shamir, and Eran Tromer
             *    (http://www.tau.ac.il/~tromer/papers/cache.pdf)
             */
            secp256k1_ge_storage_cmov(&adds, &(*ctx->prec)[j][i], i == bits);
        }
        secp256k1_ge_from_storage(&add, &adds);
   37d24:	e0ffe504 	addi	r3,fp,-108
   37d28:	e0bfcc04 	addi	r2,fp,-208
   37d2c:	180b883a 	mov	r5,r3
   37d30:	1009883a 	mov	r4,r2
   37d34:	00230c00 	call	230c0 <secp256k1_ge_from_storage>
        secp256k1_gej_add_ge(r, r, &add);
   37d38:	e0bfcc04 	addi	r2,fp,-208
   37d3c:	100d883a 	mov	r6,r2
   37d40:	e17ffe17 	ldw	r5,-8(fp)
   37d44:	e13ffe17 	ldw	r4,-8(fp)
   37d48:	00227500 	call	22750 <secp256k1_gej_add_ge>
    memset(&adds, 0, sizeof(adds));
    *r = ctx->initial;
    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */
    secp256k1_scalar_add(&gnb, gn, &ctx->blind);
    add.infinity = 0;
    for (j = 0; j < 64; j++) {
   37d4c:	e0bfca17 	ldw	r2,-216(fp)
   37d50:	10800044 	addi	r2,r2,1
   37d54:	e0bfca15 	stw	r2,-216(fp)
   37d58:	e0bfca17 	ldw	r2,-216(fp)
   37d5c:	10801010 	cmplti	r2,r2,64
   37d60:	103fcd1e 	bne	r2,zero,37c98 <__alt_mem_epcs_flash_controller+0xfe026c98>
            secp256k1_ge_storage_cmov(&adds, &(*ctx->prec)[j][i], i == bits);
        }
        secp256k1_ge_from_storage(&add, &adds);
        secp256k1_gej_add_ge(r, r, &add);
    }
    bits = 0;
   37d64:	e03fcb15 	stw	zero,-212(fp)
    secp256k1_ge_clear(&add);
   37d68:	e0bfcc04 	addi	r2,fp,-208
   37d6c:	1009883a 	mov	r4,r2
   37d70:	0020cd80 	call	20cd8 <secp256k1_ge_clear>
    secp256k1_scalar_clear(&gnb);
   37d74:	e0bff504 	addi	r2,fp,-44
   37d78:	1009883a 	mov	r4,r2
   37d7c:	00231f80 	call	231f8 <secp256k1_scalar_clear>
}
   37d80:	0001883a 	nop
   37d84:	e037883a 	mov	sp,fp
   37d88:	dfc00117 	ldw	ra,4(sp)
   37d8c:	df000017 	ldw	fp,0(sp)
   37d90:	dec00204 	addi	sp,sp,8
   37d94:	f800283a 	ret

00037d98 <secp256k1_ecmult_gen_blind>:

/* Setup blinding values for secp256k1_ecmult_gen. */
static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32) {
   37d98:	deff9904 	addi	sp,sp,-412
   37d9c:	dfc06615 	stw	ra,408(sp)
   37da0:	df006515 	stw	fp,404(sp)
   37da4:	df006504 	addi	fp,sp,404
   37da8:	e13ffe15 	stw	r4,-8(fp)
   37dac:	e17fff15 	stw	r5,-4(fp)
    secp256k1_gej gb;
    secp256k1_fe s;
    unsigned char nonce32[32];
    secp256k1_rfc6979_hmac_sha256_t rng;
    int retry;
    unsigned char keydata[64] = {0};
   37db0:	e0bfee04 	addi	r2,fp,-72
   37db4:	00c01004 	movi	r3,64
   37db8:	180d883a 	mov	r6,r3
   37dbc:	000b883a 	mov	r5,zero
   37dc0:	1009883a 	mov	r4,r2
   37dc4:	0045f3c0 	call	45f3c <memset>
    if (seed32 == NULL) {
   37dc8:	e0bfff17 	ldw	r2,-4(fp)
   37dcc:	1000121e 	bne	r2,zero,37e18 <secp256k1_ecmult_gen_blind+0x80>
        /* When seed is NULL, reset the initial point and blinding value. */
        secp256k1_gej_set_ge(&ctx->initial, &secp256k1_ge_const_g);
   37dd0:	e0bffe17 	ldw	r2,-8(fp)
   37dd4:	10800904 	addi	r2,r2,36
   37dd8:	014001b4 	movhi	r5,6
   37ddc:	296f2c04 	addi	r5,r5,-17232
   37de0:	1009883a 	mov	r4,r2
   37de4:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
        secp256k1_gej_neg(&ctx->initial, &ctx->initial);
   37de8:	e0bffe17 	ldw	r2,-8(fp)
   37dec:	10c00904 	addi	r3,r2,36
   37df0:	e0bffe17 	ldw	r2,-8(fp)
   37df4:	10800904 	addi	r2,r2,36
   37df8:	100b883a 	mov	r5,r2
   37dfc:	1809883a 	mov	r4,r3
   37e00:	00210f40 	call	210f4 <secp256k1_gej_neg>
        secp256k1_scalar_set_int(&ctx->blind, 1);
   37e04:	e0bffe17 	ldw	r2,-8(fp)
   37e08:	10800104 	addi	r2,r2,4
   37e0c:	01400044 	movi	r5,1
   37e10:	1009883a 	mov	r4,r2
   37e14:	002325c0 	call	2325c <secp256k1_scalar_set_int>
    }
    /* The prior blinding value (if not reset) is chained forward by including it in the hash. */
    secp256k1_scalar_get_b32(nonce32, &ctx->blind);
   37e18:	e0bffe17 	ldw	r2,-8(fp)
   37e1c:	10c00104 	addi	r3,r2,4
   37e20:	e0bfd404 	addi	r2,fp,-176
   37e24:	180b883a 	mov	r5,r3
   37e28:	1009883a 	mov	r4,r2
   37e2c:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    /** Using a CSPRNG allows a failure free interface, avoids needing large amounts of random data,
     *   and guards against weak or adversarial seeds.  This is a simpler and safer interface than
     *   asking the caller for blinding values directly and expecting them to retry on failure.
     */
    memcpy(keydata, nonce32, 32);
   37e30:	e0bfd417 	ldw	r2,-176(fp)
   37e34:	e0bfee15 	stw	r2,-72(fp)
   37e38:	e0bfd517 	ldw	r2,-172(fp)
   37e3c:	e0bfef15 	stw	r2,-68(fp)
   37e40:	e0bfd617 	ldw	r2,-168(fp)
   37e44:	e0bff015 	stw	r2,-64(fp)
   37e48:	e0bfd717 	ldw	r2,-164(fp)
   37e4c:	e0bff115 	stw	r2,-60(fp)
   37e50:	e0bfd817 	ldw	r2,-160(fp)
   37e54:	e0bff215 	stw	r2,-56(fp)
   37e58:	e0bfd917 	ldw	r2,-156(fp)
   37e5c:	e0bff315 	stw	r2,-52(fp)
   37e60:	e0bfda17 	ldw	r2,-152(fp)
   37e64:	e0bff415 	stw	r2,-48(fp)
   37e68:	e0bfdb17 	ldw	r2,-148(fp)
   37e6c:	e0bff515 	stw	r2,-44(fp)
    if (seed32 != NULL) {
   37e70:	e0bfff17 	ldw	r2,-4(fp)
   37e74:	10000626 	beq	r2,zero,37e90 <secp256k1_ecmult_gen_blind+0xf8>
        memcpy(keydata + 32, seed32, 32);
   37e78:	e0bfee04 	addi	r2,fp,-72
   37e7c:	10800804 	addi	r2,r2,32
   37e80:	01800804 	movi	r6,32
   37e84:	e17fff17 	ldw	r5,-4(fp)
   37e88:	1009883a 	mov	r4,r2
   37e8c:	0045c980 	call	45c98 <memcpy>
    }
    secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, seed32 ? 64 : 32);
   37e90:	e0bfff17 	ldw	r2,-4(fp)
   37e94:	10000226 	beq	r2,zero,37ea0 <secp256k1_ecmult_gen_blind+0x108>
   37e98:	00801004 	movi	r2,64
   37e9c:	00000106 	br	37ea4 <secp256k1_ecmult_gen_blind+0x10c>
   37ea0:	00800804 	movi	r2,32
   37ea4:	e13fee04 	addi	r4,fp,-72
   37ea8:	e0ffdc04 	addi	r3,fp,-144
   37eac:	100d883a 	mov	r6,r2
   37eb0:	200b883a 	mov	r5,r4
   37eb4:	1809883a 	mov	r4,r3
   37eb8:	001171c0 	call	1171c <secp256k1_rfc6979_hmac_sha256_initialize>
    memset(keydata, 0, sizeof(keydata));
   37ebc:	e0bfee04 	addi	r2,fp,-72
   37ec0:	01801004 	movi	r6,64
   37ec4:	000b883a 	mov	r5,zero
   37ec8:	1009883a 	mov	r4,r2
   37ecc:	0045f3c0 	call	45f3c <memset>
    /* Retry for out of range results to achieve uniformity. */
    do {
        secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);
   37ed0:	e0ffd404 	addi	r3,fp,-176
   37ed4:	e0bfdc04 	addi	r2,fp,-144
   37ed8:	01800804 	movi	r6,32
   37edc:	180b883a 	mov	r5,r3
   37ee0:	1009883a 	mov	r4,r2
   37ee4:	00118bc0 	call	118bc <secp256k1_rfc6979_hmac_sha256_generate>
        retry = !secp256k1_fe_set_b32(&s, nonce32);
   37ee8:	e0ffd404 	addi	r3,fp,-176
   37eec:	e0bfc804 	addi	r2,fp,-224
   37ef0:	180b883a 	mov	r5,r3
   37ef4:	1009883a 	mov	r4,r2
   37ef8:	0013a280 	call	13a28 <secp256k1_fe_set_b32>
   37efc:	1005003a 	cmpeq	r2,r2,zero
   37f00:	10803fcc 	andi	r2,r2,255
   37f04:	e0bfed15 	stw	r2,-76(fp)
        retry |= secp256k1_fe_is_zero(&s);
   37f08:	e0bfc804 	addi	r2,fp,-224
   37f0c:	1009883a 	mov	r4,r2
   37f10:	00136ac0 	call	136ac <secp256k1_fe_is_zero>
   37f14:	1007883a 	mov	r3,r2
   37f18:	e0bfed17 	ldw	r2,-76(fp)
   37f1c:	1884b03a 	or	r2,r3,r2
   37f20:	e0bfed15 	stw	r2,-76(fp)
    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */
   37f24:	e0bfed17 	ldw	r2,-76(fp)
   37f28:	103fe91e 	bne	r2,zero,37ed0 <__alt_mem_epcs_flash_controller+0xfe026ed0>
    /* Randomize the projection to defend against multiplier sidechannels. */
    secp256k1_gej_rescale(&ctx->initial, &s);
   37f2c:	e0bffe17 	ldw	r2,-8(fp)
   37f30:	10800904 	addi	r2,r2,36
   37f34:	e0ffc804 	addi	r3,fp,-224
   37f38:	180b883a 	mov	r5,r3
   37f3c:	1009883a 	mov	r4,r2
   37f40:	0022e480 	call	22e48 <secp256k1_gej_rescale>
    secp256k1_fe_clear(&s);
   37f44:	e0bfc804 	addi	r2,fp,-224
   37f48:	1009883a 	mov	r4,r2
   37f4c:	00138500 	call	13850 <secp256k1_fe_clear>
    do {
        secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);
   37f50:	e0ffd404 	addi	r3,fp,-176
   37f54:	e0bfdc04 	addi	r2,fp,-144
   37f58:	01800804 	movi	r6,32
   37f5c:	180b883a 	mov	r5,r3
   37f60:	1009883a 	mov	r4,r2
   37f64:	00118bc0 	call	118bc <secp256k1_rfc6979_hmac_sha256_generate>
        secp256k1_scalar_set_b32(&b, nonce32, &retry);
   37f68:	e0ffed04 	addi	r3,fp,-76
   37f6c:	e0bfd404 	addi	r2,fp,-176
   37f70:	180d883a 	mov	r6,r3
   37f74:	100b883a 	mov	r5,r2
   37f78:	e13f9b04 	addi	r4,fp,-404
   37f7c:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
        /* A blinding value of 0 works, but would undermine the projection hardening. */
        retry |= secp256k1_scalar_is_zero(&b);
   37f80:	e13f9b04 	addi	r4,fp,-404
   37f84:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   37f88:	1007883a 	mov	r3,r2
   37f8c:	e0bfed17 	ldw	r2,-76(fp)
   37f90:	1884b03a 	or	r2,r3,r2
   37f94:	e0bfed15 	stw	r2,-76(fp)
    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > order. */
   37f98:	e0bfed17 	ldw	r2,-76(fp)
   37f9c:	103fec1e 	bne	r2,zero,37f50 <__alt_mem_epcs_flash_controller+0xfe026f50>
    secp256k1_rfc6979_hmac_sha256_finalize(&rng);
   37fa0:	e0bfdc04 	addi	r2,fp,-144
   37fa4:	1009883a 	mov	r4,r2
   37fa8:	0011a580 	call	11a58 <secp256k1_rfc6979_hmac_sha256_finalize>
    memset(nonce32, 0, 32);
   37fac:	e0bfd404 	addi	r2,fp,-176
   37fb0:	01800804 	movi	r6,32
   37fb4:	000b883a 	mov	r5,zero
   37fb8:	1009883a 	mov	r4,r2
   37fbc:	0045f3c0 	call	45f3c <memset>
    secp256k1_ecmult_gen(ctx, &gb, &b);
   37fc0:	e0bfa304 	addi	r2,fp,-372
   37fc4:	e1bf9b04 	addi	r6,fp,-404
   37fc8:	100b883a 	mov	r5,r2
   37fcc:	e13ffe17 	ldw	r4,-8(fp)
   37fd0:	0037c200 	call	37c20 <secp256k1_ecmult_gen>
    secp256k1_scalar_negate(&b, &b);
   37fd4:	e17f9b04 	addi	r5,fp,-404
   37fd8:	e13f9b04 	addi	r4,fp,-404
   37fdc:	0024d740 	call	24d74 <secp256k1_scalar_negate>
    ctx->blind = b;
   37fe0:	e0bffe17 	ldw	r2,-8(fp)
   37fe4:	e0ff9b17 	ldw	r3,-404(fp)
   37fe8:	10c00115 	stw	r3,4(r2)
   37fec:	e0ff9c17 	ldw	r3,-400(fp)
   37ff0:	10c00215 	stw	r3,8(r2)
   37ff4:	e0ff9d17 	ldw	r3,-396(fp)
   37ff8:	10c00315 	stw	r3,12(r2)
   37ffc:	e0ff9e17 	ldw	r3,-392(fp)
   38000:	10c00415 	stw	r3,16(r2)
   38004:	e0ff9f17 	ldw	r3,-388(fp)
   38008:	10c00515 	stw	r3,20(r2)
   3800c:	e0ffa017 	ldw	r3,-384(fp)
   38010:	10c00615 	stw	r3,24(r2)
   38014:	e0ffa117 	ldw	r3,-380(fp)
   38018:	10c00715 	stw	r3,28(r2)
   3801c:	e0ffa217 	ldw	r3,-376(fp)
   38020:	10c00815 	stw	r3,32(r2)
    ctx->initial = gb;
   38024:	e0bffe17 	ldw	r2,-8(fp)
   38028:	10800904 	addi	r2,r2,36
   3802c:	e0ffa304 	addi	r3,fp,-372
   38030:	01002504 	movi	r4,148
   38034:	200d883a 	mov	r6,r4
   38038:	180b883a 	mov	r5,r3
   3803c:	1009883a 	mov	r4,r2
   38040:	0045c980 	call	45c98 <memcpy>
    secp256k1_scalar_clear(&b);
   38044:	e13f9b04 	addi	r4,fp,-404
   38048:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    secp256k1_gej_clear(&gb);
   3804c:	e0bfa304 	addi	r2,fp,-372
   38050:	1009883a 	mov	r4,r2
   38054:	0020c780 	call	20c78 <secp256k1_gej_clear>
}
   38058:	0001883a 	nop
   3805c:	e037883a 	mov	sp,fp
   38060:	dfc00117 	ldw	ra,4(sp)
   38064:	df000017 	ldw	fp,0(sp)
   38068:	dec00204 	addi	sp,sp,8
   3806c:	f800283a 	ret

00038070 <secp256k1_der_read_len>:
 */
static const secp256k1_fe secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST(
    0, 0, 0, 1, 0x45512319UL, 0x50B75FC4UL, 0x402DA172UL, 0x2FC9BAEEUL
);

static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned char *sigend) {
   38070:	defffa04 	addi	sp,sp,-24
   38074:	df000515 	stw	fp,20(sp)
   38078:	df000504 	addi	fp,sp,20
   3807c:	e13ffe15 	stw	r4,-8(fp)
   38080:	e17fff15 	stw	r5,-4(fp)
    int lenleft, b1;
    size_t ret = 0;
   38084:	e03ffc15 	stw	zero,-16(fp)
    if (*sigp >= sigend) {
   38088:	e0bffe17 	ldw	r2,-8(fp)
   3808c:	10c00017 	ldw	r3,0(r2)
   38090:	e0bfff17 	ldw	r2,-4(fp)
   38094:	18800236 	bltu	r3,r2,380a0 <secp256k1_der_read_len+0x30>
        return -1;
   38098:	00bfffc4 	movi	r2,-1
   3809c:	00005006 	br	381e0 <secp256k1_der_read_len+0x170>
    }
    b1 = *((*sigp)++);
   380a0:	e0bffe17 	ldw	r2,-8(fp)
   380a4:	10800017 	ldw	r2,0(r2)
   380a8:	11000044 	addi	r4,r2,1
   380ac:	e0fffe17 	ldw	r3,-8(fp)
   380b0:	19000015 	stw	r4,0(r3)
   380b4:	10800003 	ldbu	r2,0(r2)
   380b8:	10803fcc 	andi	r2,r2,255
   380bc:	e0bffd15 	stw	r2,-12(fp)
    if (b1 == 0xFF) {
   380c0:	e0bffd17 	ldw	r2,-12(fp)
   380c4:	10803fd8 	cmpnei	r2,r2,255
   380c8:	1000021e 	bne	r2,zero,380d4 <secp256k1_der_read_len+0x64>
        /* X.690-0207 8.1.3.5.c the value 0xFF shall not be used. */
        return -1;
   380cc:	00bfffc4 	movi	r2,-1
   380d0:	00004306 	br	381e0 <secp256k1_der_read_len+0x170>
    }
    if ((b1 & 0x80) == 0) {
   380d4:	e0bffd17 	ldw	r2,-12(fp)
   380d8:	1080200c 	andi	r2,r2,128
   380dc:	1000021e 	bne	r2,zero,380e8 <secp256k1_der_read_len+0x78>
        /* X.690-0207 8.1.3.4 short form length octets */
        return b1;
   380e0:	e0bffd17 	ldw	r2,-12(fp)
   380e4:	00003e06 	br	381e0 <secp256k1_der_read_len+0x170>
    }
    if (b1 == 0x80) {
   380e8:	e0bffd17 	ldw	r2,-12(fp)
   380ec:	10802018 	cmpnei	r2,r2,128
   380f0:	1000021e 	bne	r2,zero,380fc <secp256k1_der_read_len+0x8c>
        /* Indefinite length is not allowed in DER. */
        return -1;
   380f4:	00bfffc4 	movi	r2,-1
   380f8:	00003906 	br	381e0 <secp256k1_der_read_len+0x170>
    }
    /* X.690-207 8.1.3.5 long form length octets */
    lenleft = b1 & 0x7F;
   380fc:	e0bffd17 	ldw	r2,-12(fp)
   38100:	10801fcc 	andi	r2,r2,127
   38104:	e0bffb15 	stw	r2,-20(fp)
    if (lenleft > sigend - *sigp) {
   38108:	e0bfff17 	ldw	r2,-4(fp)
   3810c:	e0fffe17 	ldw	r3,-8(fp)
   38110:	18c00017 	ldw	r3,0(r3)
   38114:	10c7c83a 	sub	r3,r2,r3
   38118:	e0bffb17 	ldw	r2,-20(fp)
   3811c:	1880020e 	bge	r3,r2,38128 <secp256k1_der_read_len+0xb8>
        return -1;
   38120:	00bfffc4 	movi	r2,-1
   38124:	00002e06 	br	381e0 <secp256k1_der_read_len+0x170>
    }
    if (**sigp == 0) {
   38128:	e0bffe17 	ldw	r2,-8(fp)
   3812c:	10800017 	ldw	r2,0(r2)
   38130:	10800003 	ldbu	r2,0(r2)
   38134:	10803fcc 	andi	r2,r2,255
   38138:	1000021e 	bne	r2,zero,38144 <secp256k1_der_read_len+0xd4>
        /* Not the shortest possible length encoding. */
        return -1;
   3813c:	00bfffc4 	movi	r2,-1
   38140:	00002706 	br	381e0 <secp256k1_der_read_len+0x170>
    }
    if ((size_t)lenleft > sizeof(size_t)) {
   38144:	e0bffb17 	ldw	r2,-20(fp)
   38148:	10800170 	cmpltui	r2,r2,5
   3814c:	10001c1e 	bne	r2,zero,381c0 <secp256k1_der_read_len+0x150>
        /* The resulting length would exceed the range of a size_t, so
         * certainly longer than the passed array size.
         */
        return -1;
   38150:	00bfffc4 	movi	r2,-1
   38154:	00002206 	br	381e0 <secp256k1_der_read_len+0x170>
    }
    while (lenleft > 0) {
        if ((ret >> ((sizeof(size_t) - 1) * 8)) != 0) {
        }
        ret = (ret << 8) | **sigp;
   38158:	e0bffc17 	ldw	r2,-16(fp)
   3815c:	1006923a 	slli	r3,r2,8
   38160:	e0bffe17 	ldw	r2,-8(fp)
   38164:	10800017 	ldw	r2,0(r2)
   38168:	10800003 	ldbu	r2,0(r2)
   3816c:	10803fcc 	andi	r2,r2,255
   38170:	1884b03a 	or	r2,r3,r2
   38174:	e0bffc15 	stw	r2,-16(fp)
        if (ret + lenleft > (size_t)(sigend - *sigp)) {
   38178:	e0fffb17 	ldw	r3,-20(fp)
   3817c:	e0bffc17 	ldw	r2,-16(fp)
   38180:	1885883a 	add	r2,r3,r2
   38184:	e0ffff17 	ldw	r3,-4(fp)
   38188:	e13ffe17 	ldw	r4,-8(fp)
   3818c:	21000017 	ldw	r4,0(r4)
   38190:	1907c83a 	sub	r3,r3,r4
   38194:	1880022e 	bgeu	r3,r2,381a0 <secp256k1_der_read_len+0x130>
            /* Result exceeds the length of the passed array. */
            return -1;
   38198:	00bfffc4 	movi	r2,-1
   3819c:	00001006 	br	381e0 <secp256k1_der_read_len+0x170>
        }
        (*sigp)++;
   381a0:	e0bffe17 	ldw	r2,-8(fp)
   381a4:	10800017 	ldw	r2,0(r2)
   381a8:	10c00044 	addi	r3,r2,1
   381ac:	e0bffe17 	ldw	r2,-8(fp)
   381b0:	10c00015 	stw	r3,0(r2)
        lenleft--;
   381b4:	e0bffb17 	ldw	r2,-20(fp)
   381b8:	10bfffc4 	addi	r2,r2,-1
   381bc:	e0bffb15 	stw	r2,-20(fp)
        /* The resulting length would exceed the range of a size_t, so
         * certainly longer than the passed array size.
         */
        return -1;
    }
    while (lenleft > 0) {
   381c0:	e0bffb17 	ldw	r2,-20(fp)
   381c4:	00bfe416 	blt	zero,r2,38158 <__alt_mem_epcs_flash_controller+0xfe027158>
            return -1;
        }
        (*sigp)++;
        lenleft--;
    }
    if (ret < 128) {
   381c8:	e0bffc17 	ldw	r2,-16(fp)
   381cc:	10802028 	cmpgeui	r2,r2,128
   381d0:	1000021e 	bne	r2,zero,381dc <secp256k1_der_read_len+0x16c>
        /* Not the shortest possible length encoding. */
        return -1;
   381d4:	00bfffc4 	movi	r2,-1
   381d8:	00000106 	br	381e0 <secp256k1_der_read_len+0x170>
    }
    return ret;
   381dc:	e0bffc17 	ldw	r2,-16(fp)
}
   381e0:	e037883a 	mov	sp,fp
   381e4:	df000017 	ldw	fp,0(sp)
   381e8:	dec00104 	addi	sp,sp,4
   381ec:	f800283a 	ret

000381f0 <secp256k1_der_parse_integer>:

static int secp256k1_der_parse_integer(secp256k1_scalar *r, const unsigned char **sig, const unsigned char *sigend) {
   381f0:	defff104 	addi	sp,sp,-60
   381f4:	dfc00e15 	stw	ra,56(sp)
   381f8:	df000d15 	stw	fp,52(sp)
   381fc:	df000d04 	addi	fp,sp,52
   38200:	e13ffd15 	stw	r4,-12(fp)
   38204:	e17ffe15 	stw	r5,-8(fp)
   38208:	e1bfff15 	stw	r6,-4(fp)
    int overflow = 0;
   3820c:	e03ff415 	stw	zero,-48(fp)
    unsigned char ra[32] = {0};
   38210:	e03ff515 	stw	zero,-44(fp)
   38214:	e03ff615 	stw	zero,-40(fp)
   38218:	e03ff715 	stw	zero,-36(fp)
   3821c:	e03ff815 	stw	zero,-32(fp)
   38220:	e03ff915 	stw	zero,-28(fp)
   38224:	e03ffa15 	stw	zero,-24(fp)
   38228:	e03ffb15 	stw	zero,-20(fp)
   3822c:	e03ffc15 	stw	zero,-16(fp)
    int rlen;

    if (*sig == sigend || **sig != 0x02) {
   38230:	e0bffe17 	ldw	r2,-8(fp)
   38234:	10c00017 	ldw	r3,0(r2)
   38238:	e0bfff17 	ldw	r2,-4(fp)
   3823c:	18800626 	beq	r3,r2,38258 <secp256k1_der_parse_integer+0x68>
   38240:	e0bffe17 	ldw	r2,-8(fp)
   38244:	10800017 	ldw	r2,0(r2)
   38248:	10800003 	ldbu	r2,0(r2)
   3824c:	10803fcc 	andi	r2,r2,255
   38250:	108000a0 	cmpeqi	r2,r2,2
   38254:	1000021e 	bne	r2,zero,38260 <secp256k1_der_parse_integer+0x70>
        /* Not a primitive integer (X.690-0207 8.3.1). */
        return 0;
   38258:	0005883a 	mov	r2,zero
   3825c:	00007606 	br	38438 <secp256k1_der_parse_integer+0x248>
    }
    (*sig)++;
   38260:	e0bffe17 	ldw	r2,-8(fp)
   38264:	10800017 	ldw	r2,0(r2)
   38268:	10c00044 	addi	r3,r2,1
   3826c:	e0bffe17 	ldw	r2,-8(fp)
   38270:	10c00015 	stw	r3,0(r2)
    rlen = secp256k1_der_read_len(sig, sigend);
   38274:	e17fff17 	ldw	r5,-4(fp)
   38278:	e13ffe17 	ldw	r4,-8(fp)
   3827c:	00380700 	call	38070 <secp256k1_der_read_len>
   38280:	e0bff315 	stw	r2,-52(fp)
    if (rlen <= 0 || (*sig) + rlen > sigend) {
   38284:	e0bff317 	ldw	r2,-52(fp)
   38288:	0080060e 	bge	zero,r2,382a4 <secp256k1_der_parse_integer+0xb4>
   3828c:	e0bffe17 	ldw	r2,-8(fp)
   38290:	10c00017 	ldw	r3,0(r2)
   38294:	e0bff317 	ldw	r2,-52(fp)
   38298:	1885883a 	add	r2,r3,r2
   3829c:	e0ffff17 	ldw	r3,-4(fp)
   382a0:	1880022e 	bgeu	r3,r2,382ac <secp256k1_der_parse_integer+0xbc>
        /* Exceeds bounds or not at least length 1 (X.690-0207 8.3.1).  */
        return 0;
   382a4:	0005883a 	mov	r2,zero
   382a8:	00006306 	br	38438 <secp256k1_der_parse_integer+0x248>
    }
    if (**sig == 0x00 && rlen > 1 && (((*sig)[1]) & 0x80) == 0x00) {
   382ac:	e0bffe17 	ldw	r2,-8(fp)
   382b0:	10800017 	ldw	r2,0(r2)
   382b4:	10800003 	ldbu	r2,0(r2)
   382b8:	10803fcc 	andi	r2,r2,255
   382bc:	10000d1e 	bne	r2,zero,382f4 <secp256k1_der_parse_integer+0x104>
   382c0:	e0bff317 	ldw	r2,-52(fp)
   382c4:	10800090 	cmplti	r2,r2,2
   382c8:	10000a1e 	bne	r2,zero,382f4 <secp256k1_der_parse_integer+0x104>
   382cc:	e0bffe17 	ldw	r2,-8(fp)
   382d0:	10800017 	ldw	r2,0(r2)
   382d4:	10800044 	addi	r2,r2,1
   382d8:	10800003 	ldbu	r2,0(r2)
   382dc:	10803fcc 	andi	r2,r2,255
   382e0:	1080201c 	xori	r2,r2,128
   382e4:	10bfe004 	addi	r2,r2,-128
   382e8:	10000216 	blt	r2,zero,382f4 <secp256k1_der_parse_integer+0x104>
        /* Excessive 0x00 padding. */
        return 0;
   382ec:	0005883a 	mov	r2,zero
   382f0:	00005106 	br	38438 <secp256k1_der_parse_integer+0x248>
    }
    if (**sig == 0xFF && rlen > 1 && (((*sig)[1]) & 0x80) == 0x80) {
   382f4:	e0bffe17 	ldw	r2,-8(fp)
   382f8:	10800017 	ldw	r2,0(r2)
   382fc:	10800003 	ldbu	r2,0(r2)
   38300:	10803fcc 	andi	r2,r2,255
   38304:	10803fd8 	cmpnei	r2,r2,255
   38308:	10000d1e 	bne	r2,zero,38340 <secp256k1_der_parse_integer+0x150>
   3830c:	e0bff317 	ldw	r2,-52(fp)
   38310:	10800090 	cmplti	r2,r2,2
   38314:	10000a1e 	bne	r2,zero,38340 <secp256k1_der_parse_integer+0x150>
   38318:	e0bffe17 	ldw	r2,-8(fp)
   3831c:	10800017 	ldw	r2,0(r2)
   38320:	10800044 	addi	r2,r2,1
   38324:	10800003 	ldbu	r2,0(r2)
   38328:	10803fcc 	andi	r2,r2,255
   3832c:	1080201c 	xori	r2,r2,128
   38330:	10bfe004 	addi	r2,r2,-128
   38334:	1000020e 	bge	r2,zero,38340 <secp256k1_der_parse_integer+0x150>
        /* Excessive 0xFF padding. */
        return 0;
   38338:	0005883a 	mov	r2,zero
   3833c:	00003e06 	br	38438 <secp256k1_der_parse_integer+0x248>
    }
    if ((**sig & 0x80) == 0x80) {
   38340:	e0bffe17 	ldw	r2,-8(fp)
   38344:	10800017 	ldw	r2,0(r2)
   38348:	10800003 	ldbu	r2,0(r2)
   3834c:	10803fcc 	andi	r2,r2,255
   38350:	1080201c 	xori	r2,r2,128
   38354:	10bfe004 	addi	r2,r2,-128
   38358:	10000b0e 	bge	r2,zero,38388 <secp256k1_der_parse_integer+0x198>
        /* Negative. */
        overflow = 1;
   3835c:	00800044 	movi	r2,1
   38360:	e0bff415 	stw	r2,-48(fp)
    }
    while (rlen > 0 && **sig == 0) {
   38364:	00000806 	br	38388 <secp256k1_der_parse_integer+0x198>
        /* Skip leading zero bytes */
        rlen--;
   38368:	e0bff317 	ldw	r2,-52(fp)
   3836c:	10bfffc4 	addi	r2,r2,-1
   38370:	e0bff315 	stw	r2,-52(fp)
        (*sig)++;
   38374:	e0bffe17 	ldw	r2,-8(fp)
   38378:	10800017 	ldw	r2,0(r2)
   3837c:	10c00044 	addi	r3,r2,1
   38380:	e0bffe17 	ldw	r2,-8(fp)
   38384:	10c00015 	stw	r3,0(r2)
    }
    if ((**sig & 0x80) == 0x80) {
        /* Negative. */
        overflow = 1;
    }
    while (rlen > 0 && **sig == 0) {
   38388:	e0bff317 	ldw	r2,-52(fp)
   3838c:	0080050e 	bge	zero,r2,383a4 <secp256k1_der_parse_integer+0x1b4>
   38390:	e0bffe17 	ldw	r2,-8(fp)
   38394:	10800017 	ldw	r2,0(r2)
   38398:	10800003 	ldbu	r2,0(r2)
   3839c:	10803fcc 	andi	r2,r2,255
   383a0:	103ff126 	beq	r2,zero,38368 <__alt_mem_epcs_flash_controller+0xfe027368>
        /* Skip leading zero bytes */
        rlen--;
        (*sig)++;
    }
    if (rlen > 32) {
   383a4:	e0bff317 	ldw	r2,-52(fp)
   383a8:	10800850 	cmplti	r2,r2,33
   383ac:	1000021e 	bne	r2,zero,383b8 <secp256k1_der_parse_integer+0x1c8>
        overflow = 1;
   383b0:	00800044 	movi	r2,1
   383b4:	e0bff415 	stw	r2,-48(fp)
    }
    if (!overflow) {
   383b8:	e0bff417 	ldw	r2,-48(fp)
   383bc:	1000121e 	bne	r2,zero,38408 <secp256k1_der_parse_integer+0x218>
        memcpy(ra + 32 - rlen, *sig, rlen);
   383c0:	e0bff317 	ldw	r2,-52(fp)
   383c4:	00c00804 	movi	r3,32
   383c8:	1885c83a 	sub	r2,r3,r2
   383cc:	e0fff504 	addi	r3,fp,-44
   383d0:	1887883a 	add	r3,r3,r2
   383d4:	e0bffe17 	ldw	r2,-8(fp)
   383d8:	10800017 	ldw	r2,0(r2)
   383dc:	e13ff317 	ldw	r4,-52(fp)
   383e0:	200d883a 	mov	r6,r4
   383e4:	100b883a 	mov	r5,r2
   383e8:	1809883a 	mov	r4,r3
   383ec:	0045c980 	call	45c98 <memcpy>
        secp256k1_scalar_set_b32(r, ra, &overflow);
   383f0:	e0fff404 	addi	r3,fp,-48
   383f4:	e0bff504 	addi	r2,fp,-44
   383f8:	180d883a 	mov	r6,r3
   383fc:	100b883a 	mov	r5,r2
   38400:	e13ffd17 	ldw	r4,-12(fp)
   38404:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    }
    if (overflow) {
   38408:	e0bff417 	ldw	r2,-48(fp)
   3840c:	10000326 	beq	r2,zero,3841c <secp256k1_der_parse_integer+0x22c>
        secp256k1_scalar_set_int(r, 0);
   38410:	000b883a 	mov	r5,zero
   38414:	e13ffd17 	ldw	r4,-12(fp)
   38418:	002325c0 	call	2325c <secp256k1_scalar_set_int>
    }
    (*sig) += rlen;
   3841c:	e0bffe17 	ldw	r2,-8(fp)
   38420:	10c00017 	ldw	r3,0(r2)
   38424:	e0bff317 	ldw	r2,-52(fp)
   38428:	1887883a 	add	r3,r3,r2
   3842c:	e0bffe17 	ldw	r2,-8(fp)
   38430:	10c00015 	stw	r3,0(r2)
    return 1;
   38434:	00800044 	movi	r2,1
}
   38438:	e037883a 	mov	sp,fp
   3843c:	dfc00117 	ldw	ra,4(sp)
   38440:	df000017 	ldw	fp,0(sp)
   38444:	dec00204 	addi	sp,sp,8
   38448:	f800283a 	ret

0003844c <secp256k1_ecdsa_sig_parse>:

static int secp256k1_ecdsa_sig_parse(secp256k1_scalar *rr, secp256k1_scalar *rs, const unsigned char *sig, size_t size) {
   3844c:	defff804 	addi	sp,sp,-32
   38450:	dfc00715 	stw	ra,28(sp)
   38454:	df000615 	stw	fp,24(sp)
   38458:	df000604 	addi	fp,sp,24
   3845c:	e13ffc15 	stw	r4,-16(fp)
   38460:	e17ffd15 	stw	r5,-12(fp)
   38464:	e1bffe15 	stw	r6,-8(fp)
   38468:	e1ffff15 	stw	r7,-4(fp)
    const unsigned char *sigend = sig + size;
   3846c:	e0fffe17 	ldw	r3,-8(fp)
   38470:	e0bfff17 	ldw	r2,-4(fp)
   38474:	1885883a 	add	r2,r3,r2
   38478:	e0bffa15 	stw	r2,-24(fp)
    int rlen;
    if (sig == sigend || *(sig++) != 0x30) {
   3847c:	e0fffe17 	ldw	r3,-8(fp)
   38480:	e0bffa17 	ldw	r2,-24(fp)
   38484:	18800726 	beq	r3,r2,384a4 <secp256k1_ecdsa_sig_parse+0x58>
   38488:	e0bffe17 	ldw	r2,-8(fp)
   3848c:	10c00044 	addi	r3,r2,1
   38490:	e0fffe15 	stw	r3,-8(fp)
   38494:	10800003 	ldbu	r2,0(r2)
   38498:	10803fcc 	andi	r2,r2,255
   3849c:	10800c20 	cmpeqi	r2,r2,48
   384a0:	1000021e 	bne	r2,zero,384ac <secp256k1_ecdsa_sig_parse+0x60>
        /* The encoding doesn't start with a constructed sequence (X.690-0207 8.9.1). */
        return 0;
   384a4:	0005883a 	mov	r2,zero
   384a8:	00002b06 	br	38558 <secp256k1_ecdsa_sig_parse+0x10c>
    }
    rlen = secp256k1_der_read_len(&sig, sigend);
   384ac:	e0bffe04 	addi	r2,fp,-8
   384b0:	e17ffa17 	ldw	r5,-24(fp)
   384b4:	1009883a 	mov	r4,r2
   384b8:	00380700 	call	38070 <secp256k1_der_read_len>
   384bc:	e0bffb15 	stw	r2,-20(fp)
    if (rlen < 0 || sig + rlen > sigend) {
   384c0:	e0bffb17 	ldw	r2,-20(fp)
   384c4:	10000516 	blt	r2,zero,384dc <secp256k1_ecdsa_sig_parse+0x90>
   384c8:	e0fffe17 	ldw	r3,-8(fp)
   384cc:	e0bffb17 	ldw	r2,-20(fp)
   384d0:	1885883a 	add	r2,r3,r2
   384d4:	e0fffa17 	ldw	r3,-24(fp)
   384d8:	1880022e 	bgeu	r3,r2,384e4 <secp256k1_ecdsa_sig_parse+0x98>
        /* Tuple exceeds bounds */
        return 0;
   384dc:	0005883a 	mov	r2,zero
   384e0:	00001d06 	br	38558 <secp256k1_ecdsa_sig_parse+0x10c>
    }
    if (sig + rlen != sigend) {
   384e4:	e0fffe17 	ldw	r3,-8(fp)
   384e8:	e0bffb17 	ldw	r2,-20(fp)
   384ec:	1887883a 	add	r3,r3,r2
   384f0:	e0bffa17 	ldw	r2,-24(fp)
   384f4:	18800226 	beq	r3,r2,38500 <secp256k1_ecdsa_sig_parse+0xb4>
        /* Garbage after tuple. */
        return 0;
   384f8:	0005883a 	mov	r2,zero
   384fc:	00001606 	br	38558 <secp256k1_ecdsa_sig_parse+0x10c>
    }

    if (!secp256k1_der_parse_integer(rr, &sig, sigend)) {
   38500:	e0bffe04 	addi	r2,fp,-8
   38504:	e1bffa17 	ldw	r6,-24(fp)
   38508:	100b883a 	mov	r5,r2
   3850c:	e13ffc17 	ldw	r4,-16(fp)
   38510:	00381f00 	call	381f0 <secp256k1_der_parse_integer>
   38514:	1000021e 	bne	r2,zero,38520 <secp256k1_ecdsa_sig_parse+0xd4>
        return 0;
   38518:	0005883a 	mov	r2,zero
   3851c:	00000e06 	br	38558 <secp256k1_ecdsa_sig_parse+0x10c>
    }
    if (!secp256k1_der_parse_integer(rs, &sig, sigend)) {
   38520:	e0bffe04 	addi	r2,fp,-8
   38524:	e1bffa17 	ldw	r6,-24(fp)
   38528:	100b883a 	mov	r5,r2
   3852c:	e13ffd17 	ldw	r4,-12(fp)
   38530:	00381f00 	call	381f0 <secp256k1_der_parse_integer>
   38534:	1000021e 	bne	r2,zero,38540 <secp256k1_ecdsa_sig_parse+0xf4>
        return 0;
   38538:	0005883a 	mov	r2,zero
   3853c:	00000606 	br	38558 <secp256k1_ecdsa_sig_parse+0x10c>
    }

    if (sig != sigend) {
   38540:	e0fffe17 	ldw	r3,-8(fp)
   38544:	e0bffa17 	ldw	r2,-24(fp)
   38548:	18800226 	beq	r3,r2,38554 <secp256k1_ecdsa_sig_parse+0x108>
        /* Trailing garbage inside tuple. */
        return 0;
   3854c:	0005883a 	mov	r2,zero
   38550:	00000106 	br	38558 <secp256k1_ecdsa_sig_parse+0x10c>
    }

    return 1;
   38554:	00800044 	movi	r2,1
}
   38558:	e037883a 	mov	sp,fp
   3855c:	dfc00117 	ldw	ra,4(sp)
   38560:	df000017 	ldw	fp,0(sp)
   38564:	dec00204 	addi	sp,sp,8
   38568:	f800283a 	ret

0003856c <secp256k1_ecdsa_sig_serialize>:

static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const secp256k1_scalar* ar, const secp256k1_scalar* as) {
   3856c:	deffe504 	addi	sp,sp,-108
   38570:	dfc01a15 	stw	ra,104(sp)
   38574:	df001915 	stw	fp,100(sp)
   38578:	df001904 	addi	fp,sp,100
   3857c:	e13ffc15 	stw	r4,-16(fp)
   38580:	e17ffd15 	stw	r5,-12(fp)
   38584:	e1bffe15 	stw	r6,-8(fp)
   38588:	e1ffff15 	stw	r7,-4(fp)
    unsigned char r[33] = {0}, s[33] = {0};
   3858c:	e03feb15 	stw	zero,-84(fp)
   38590:	e03fec15 	stw	zero,-80(fp)
   38594:	e03fed15 	stw	zero,-76(fp)
   38598:	e03fee15 	stw	zero,-72(fp)
   3859c:	e03fef15 	stw	zero,-68(fp)
   385a0:	e03ff015 	stw	zero,-64(fp)
   385a4:	e03ff115 	stw	zero,-60(fp)
   385a8:	e03ff215 	stw	zero,-56(fp)
   385ac:	e03ff305 	stb	zero,-52(fp)
   385b0:	e0bff344 	addi	r2,fp,-51
   385b4:	00c00844 	movi	r3,33
   385b8:	180d883a 	mov	r6,r3
   385bc:	000b883a 	mov	r5,zero
   385c0:	1009883a 	mov	r4,r2
   385c4:	0045f3c0 	call	45f3c <memset>
    unsigned char *rp = r, *sp = s;
   385c8:	e0bfeb04 	addi	r2,fp,-84
   385cc:	e0bfe715 	stw	r2,-100(fp)
   385d0:	e0bff344 	addi	r2,fp,-51
   385d4:	e0bfe815 	stw	r2,-96(fp)
    size_t lenR = 33, lenS = 33;
   385d8:	00800844 	movi	r2,33
   385dc:	e0bfe915 	stw	r2,-92(fp)
   385e0:	00800844 	movi	r2,33
   385e4:	e0bfea15 	stw	r2,-88(fp)
    secp256k1_scalar_get_b32(&r[1], ar);
   385e8:	e0bfeb04 	addi	r2,fp,-84
   385ec:	10800044 	addi	r2,r2,1
   385f0:	e17ffe17 	ldw	r5,-8(fp)
   385f4:	1009883a 	mov	r4,r2
   385f8:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    secp256k1_scalar_get_b32(&s[1], as);
   385fc:	e0bff344 	addi	r2,fp,-51
   38600:	10800044 	addi	r2,r2,1
   38604:	e17fff17 	ldw	r5,-4(fp)
   38608:	1009883a 	mov	r4,r2
   3860c:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    while (lenR > 1 && rp[0] == 0 && rp[1] < 0x80) { lenR--; rp++; }
   38610:	00000606 	br	3862c <secp256k1_ecdsa_sig_serialize+0xc0>
   38614:	e0bfe917 	ldw	r2,-92(fp)
   38618:	10bfffc4 	addi	r2,r2,-1
   3861c:	e0bfe915 	stw	r2,-92(fp)
   38620:	e0bfe717 	ldw	r2,-100(fp)
   38624:	10800044 	addi	r2,r2,1
   38628:	e0bfe715 	stw	r2,-100(fp)
   3862c:	e0bfe917 	ldw	r2,-92(fp)
   38630:	108000b0 	cmpltui	r2,r2,2
   38634:	1000121e 	bne	r2,zero,38680 <secp256k1_ecdsa_sig_serialize+0x114>
   38638:	e0bfe717 	ldw	r2,-100(fp)
   3863c:	10800003 	ldbu	r2,0(r2)
   38640:	10803fcc 	andi	r2,r2,255
   38644:	10000e1e 	bne	r2,zero,38680 <secp256k1_ecdsa_sig_serialize+0x114>
   38648:	e0bfe717 	ldw	r2,-100(fp)
   3864c:	10800044 	addi	r2,r2,1
   38650:	10800003 	ldbu	r2,0(r2)
   38654:	10803fcc 	andi	r2,r2,255
   38658:	1080201c 	xori	r2,r2,128
   3865c:	10bfe004 	addi	r2,r2,-128
   38660:	103fec0e 	bge	r2,zero,38614 <__alt_mem_epcs_flash_controller+0xfe027614>
    while (lenS > 1 && sp[0] == 0 && sp[1] < 0x80) { lenS--; sp++; }
   38664:	00000606 	br	38680 <secp256k1_ecdsa_sig_serialize+0x114>
   38668:	e0bfea17 	ldw	r2,-88(fp)
   3866c:	10bfffc4 	addi	r2,r2,-1
   38670:	e0bfea15 	stw	r2,-88(fp)
   38674:	e0bfe817 	ldw	r2,-96(fp)
   38678:	10800044 	addi	r2,r2,1
   3867c:	e0bfe815 	stw	r2,-96(fp)
   38680:	e0bfea17 	ldw	r2,-88(fp)
   38684:	108000b0 	cmpltui	r2,r2,2
   38688:	10000b1e 	bne	r2,zero,386b8 <secp256k1_ecdsa_sig_serialize+0x14c>
   3868c:	e0bfe817 	ldw	r2,-96(fp)
   38690:	10800003 	ldbu	r2,0(r2)
   38694:	10803fcc 	andi	r2,r2,255
   38698:	1000071e 	bne	r2,zero,386b8 <secp256k1_ecdsa_sig_serialize+0x14c>
   3869c:	e0bfe817 	ldw	r2,-96(fp)
   386a0:	10800044 	addi	r2,r2,1
   386a4:	10800003 	ldbu	r2,0(r2)
   386a8:	10803fcc 	andi	r2,r2,255
   386ac:	1080201c 	xori	r2,r2,128
   386b0:	10bfe004 	addi	r2,r2,-128
   386b4:	103fec0e 	bge	r2,zero,38668 <__alt_mem_epcs_flash_controller+0xfe027668>
    if (*size < 6+lenS+lenR) {
   386b8:	e0bffd17 	ldw	r2,-12(fp)
   386bc:	10c00017 	ldw	r3,0(r2)
   386c0:	e13fea17 	ldw	r4,-88(fp)
   386c4:	e0bfe917 	ldw	r2,-92(fp)
   386c8:	2085883a 	add	r2,r4,r2
   386cc:	10800184 	addi	r2,r2,6
   386d0:	1880082e 	bgeu	r3,r2,386f4 <secp256k1_ecdsa_sig_serialize+0x188>
        *size = 6 + lenS + lenR;
   386d4:	e0ffea17 	ldw	r3,-88(fp)
   386d8:	e0bfe917 	ldw	r2,-92(fp)
   386dc:	1885883a 	add	r2,r3,r2
   386e0:	10c00184 	addi	r3,r2,6
   386e4:	e0bffd17 	ldw	r2,-12(fp)
   386e8:	10c00015 	stw	r3,0(r2)
        return 0;
   386ec:	0005883a 	mov	r2,zero
   386f0:	00003406 	br	387c4 <secp256k1_ecdsa_sig_serialize+0x258>
    }
    *size = 6 + lenS + lenR;
   386f4:	e0ffea17 	ldw	r3,-88(fp)
   386f8:	e0bfe917 	ldw	r2,-92(fp)
   386fc:	1885883a 	add	r2,r3,r2
   38700:	10c00184 	addi	r3,r2,6
   38704:	e0bffd17 	ldw	r2,-12(fp)
   38708:	10c00015 	stw	r3,0(r2)
    sig[0] = 0x30;
   3870c:	e0bffc17 	ldw	r2,-16(fp)
   38710:	00c00c04 	movi	r3,48
   38714:	10c00005 	stb	r3,0(r2)
    sig[1] = 4 + lenS + lenR;
   38718:	e0bffc17 	ldw	r2,-16(fp)
   3871c:	10800044 	addi	r2,r2,1
   38720:	e0ffea17 	ldw	r3,-88(fp)
   38724:	1809883a 	mov	r4,r3
   38728:	e0ffe917 	ldw	r3,-92(fp)
   3872c:	20c7883a 	add	r3,r4,r3
   38730:	18c00104 	addi	r3,r3,4
   38734:	10c00005 	stb	r3,0(r2)
    sig[2] = 0x02;
   38738:	e0bffc17 	ldw	r2,-16(fp)
   3873c:	10800084 	addi	r2,r2,2
   38740:	00c00084 	movi	r3,2
   38744:	10c00005 	stb	r3,0(r2)
    sig[3] = lenR;
   38748:	e0bffc17 	ldw	r2,-16(fp)
   3874c:	108000c4 	addi	r2,r2,3
   38750:	e0ffe917 	ldw	r3,-92(fp)
   38754:	10c00005 	stb	r3,0(r2)
    memcpy(sig+4, rp, lenR);
   38758:	e0bffc17 	ldw	r2,-16(fp)
   3875c:	10800104 	addi	r2,r2,4
   38760:	e1bfe917 	ldw	r6,-92(fp)
   38764:	e17fe717 	ldw	r5,-100(fp)
   38768:	1009883a 	mov	r4,r2
   3876c:	0045c980 	call	45c98 <memcpy>
    sig[4+lenR] = 0x02;
   38770:	e0bfe917 	ldw	r2,-92(fp)
   38774:	10800104 	addi	r2,r2,4
   38778:	e0fffc17 	ldw	r3,-16(fp)
   3877c:	1885883a 	add	r2,r3,r2
   38780:	00c00084 	movi	r3,2
   38784:	10c00005 	stb	r3,0(r2)
    sig[5+lenR] = lenS;
   38788:	e0bfe917 	ldw	r2,-92(fp)
   3878c:	10800144 	addi	r2,r2,5
   38790:	e0fffc17 	ldw	r3,-16(fp)
   38794:	1885883a 	add	r2,r3,r2
   38798:	e0ffea17 	ldw	r3,-88(fp)
   3879c:	10c00005 	stb	r3,0(r2)
    memcpy(sig+lenR+6, sp, lenS);
   387a0:	e0bfe917 	ldw	r2,-92(fp)
   387a4:	10800184 	addi	r2,r2,6
   387a8:	e0fffc17 	ldw	r3,-16(fp)
   387ac:	1885883a 	add	r2,r3,r2
   387b0:	e1bfea17 	ldw	r6,-88(fp)
   387b4:	e17fe817 	ldw	r5,-96(fp)
   387b8:	1009883a 	mov	r4,r2
   387bc:	0045c980 	call	45c98 <memcpy>
    return 1;
   387c0:	00800044 	movi	r2,1
}
   387c4:	e037883a 	mov	sp,fp
   387c8:	dfc00117 	ldw	ra,4(sp)
   387cc:	df000017 	ldw	fp,0(sp)
   387d0:	dec00204 	addi	sp,sp,8
   387d4:	f800283a 	ret

000387d8 <secp256k1_ecdsa_sig_verify>:

static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar *sigs, const secp256k1_ge *pubkey, const secp256k1_scalar *message) {
   387d8:	deff8304 	addi	sp,sp,-500
   387dc:	dfc07c15 	stw	ra,496(sp)
   387e0:	df007b15 	stw	fp,492(sp)
   387e4:	df007b04 	addi	fp,sp,492
   387e8:	e13ffc15 	stw	r4,-16(fp)
   387ec:	e17ffd15 	stw	r5,-12(fp)
   387f0:	e1bffe15 	stw	r6,-8(fp)
   387f4:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar sn, u1, u2;
    secp256k1_fe xr;
    secp256k1_gej pubkeyj;
    secp256k1_gej pr;

    if (secp256k1_scalar_is_zero(sigr) || secp256k1_scalar_is_zero(sigs)) {
   387f8:	e13ffd17 	ldw	r4,-12(fp)
   387fc:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   38800:	1000031e 	bne	r2,zero,38810 <secp256k1_ecdsa_sig_verify+0x38>
   38804:	e13ffe17 	ldw	r4,-8(fp)
   38808:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   3880c:	10000226 	beq	r2,zero,38818 <secp256k1_ecdsa_sig_verify+0x40>
        return 0;
   38810:	0005883a 	mov	r2,zero
   38814:	00004906 	br	3893c <secp256k1_ecdsa_sig_verify+0x164>
    }

    secp256k1_scalar_inverse_var(&sn, sigs);
   38818:	e0bf8e04 	addi	r2,fp,-456
   3881c:	e17ffe17 	ldw	r5,-8(fp)
   38820:	1009883a 	mov	r4,r2
   38824:	00353900 	call	35390 <secp256k1_scalar_inverse_var>
    secp256k1_scalar_mul(&u1, &sn, message);
   38828:	e0ff8e04 	addi	r3,fp,-456
   3882c:	e0bf9604 	addi	r2,fp,-424
   38830:	e1800217 	ldw	r6,8(fp)
   38834:	180b883a 	mov	r5,r3
   38838:	1009883a 	mov	r4,r2
   3883c:	00345580 	call	34558 <secp256k1_scalar_mul>
    secp256k1_scalar_mul(&u2, &sn, sigr);
   38840:	e0ff8e04 	addi	r3,fp,-456
   38844:	e0bf9e04 	addi	r2,fp,-392
   38848:	e1bffd17 	ldw	r6,-12(fp)
   3884c:	180b883a 	mov	r5,r3
   38850:	1009883a 	mov	r4,r2
   38854:	00345580 	call	34558 <secp256k1_scalar_mul>
    secp256k1_gej_set_ge(&pubkeyj, pubkey);
   38858:	e0bfb204 	addi	r2,fp,-312
   3885c:	e17fff17 	ldw	r5,-4(fp)
   38860:	1009883a 	mov	r4,r2
   38864:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
    secp256k1_ecmult(ctx, &pr, &pubkeyj, &u2, &u1);
   38868:	e17f9e04 	addi	r5,fp,-392
   3886c:	e13fb204 	addi	r4,fp,-312
   38870:	e0ffd704 	addi	r3,fp,-164
   38874:	e0bf9604 	addi	r2,fp,-424
   38878:	d8800015 	stw	r2,0(sp)
   3887c:	280f883a 	mov	r7,r5
   38880:	200d883a 	mov	r6,r4
   38884:	180b883a 	mov	r5,r3
   38888:	e13ffc17 	ldw	r4,-16(fp)
   3888c:	0035f080 	call	35f08 <secp256k1_ecmult>
    if (secp256k1_gej_is_infinity(&pr)) {
   38890:	e0bfd704 	addi	r2,fp,-164
   38894:	1009883a 	mov	r4,r2
   38898:	002129c0 	call	2129c <secp256k1_gej_is_infinity>
   3889c:	10000226 	beq	r2,zero,388a8 <secp256k1_ecdsa_sig_verify+0xd0>
        return 0;
   388a0:	0005883a 	mov	r2,zero
   388a4:	00002506 	br	3893c <secp256k1_ecdsa_sig_verify+0x164>
    }
    secp256k1_scalar_get_b32(c, sigr);
   388a8:	e17ffd17 	ldw	r5,-12(fp)
   388ac:	e13f8604 	addi	r4,fp,-488
   388b0:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    secp256k1_fe_set_b32(&xr, c);
   388b4:	e0bfa604 	addi	r2,fp,-360
   388b8:	e17f8604 	addi	r5,fp,-488
   388bc:	1009883a 	mov	r4,r2
   388c0:	0013a280 	call	13a28 <secp256k1_fe_set_b32>
     *    <=> (xr * pr.z^2 mod p == pr.x) || (xr + n < p && (xr + n) * pr.z^2 mod p == pr.x)
     *
     *  Thus, we can avoid the inversion, but we have to check both cases separately.
     *  secp256k1_gej_eq_x implements the (xr * pr.z^2 mod p == pr.x) test.
     */
    if (secp256k1_gej_eq_x_var(&xr, &pr)) {
   388c4:	e0ffd704 	addi	r3,fp,-164
   388c8:	e0bfa604 	addi	r2,fp,-360
   388cc:	180b883a 	mov	r5,r3
   388d0:	1009883a 	mov	r4,r2
   388d4:	0020fdc0 	call	20fdc <secp256k1_gej_eq_x_var>
   388d8:	10000226 	beq	r2,zero,388e4 <secp256k1_ecdsa_sig_verify+0x10c>
        /* xr * pr.z^2 mod p == pr.x, so the signature is valid. */
        return 1;
   388dc:	00800044 	movi	r2,1
   388e0:	00001606 	br	3893c <secp256k1_ecdsa_sig_verify+0x164>
    }
    if (secp256k1_fe_cmp_var(&xr, &secp256k1_ecdsa_const_p_minus_order) >= 0) {
   388e4:	e0bfa604 	addi	r2,fp,-360
   388e8:	014001b4 	movhi	r5,6
   388ec:	2971be04 	addi	r5,r5,-14600
   388f0:	1009883a 	mov	r4,r2
   388f4:	00138c00 	call	138c0 <secp256k1_fe_cmp_var>
   388f8:	10000216 	blt	r2,zero,38904 <secp256k1_ecdsa_sig_verify+0x12c>
        /* xr + n >= p, so we can skip testing the second case. */
        return 0;
   388fc:	0005883a 	mov	r2,zero
   38900:	00000e06 	br	3893c <secp256k1_ecdsa_sig_verify+0x164>
    }
    secp256k1_fe_add(&xr, &secp256k1_ecdsa_const_order_as_fe);
   38904:	e0bfa604 	addi	r2,fp,-360
   38908:	014001b4 	movhi	r5,6
   3890c:	2971b204 	addi	r5,r5,-14648
   38910:	1009883a 	mov	r4,r2
   38914:	00142340 	call	14234 <secp256k1_fe_add>
    if (secp256k1_gej_eq_x_var(&xr, &pr)) {
   38918:	e0ffd704 	addi	r3,fp,-164
   3891c:	e0bfa604 	addi	r2,fp,-360
   38920:	180b883a 	mov	r5,r3
   38924:	1009883a 	mov	r4,r2
   38928:	0020fdc0 	call	20fdc <secp256k1_gej_eq_x_var>
   3892c:	10000226 	beq	r2,zero,38938 <secp256k1_ecdsa_sig_verify+0x160>
        /* (xr + n) * pr.z^2 mod p == pr.x, so the signature is valid. */
        return 1;
   38930:	00800044 	movi	r2,1
   38934:	00000106 	br	3893c <secp256k1_ecdsa_sig_verify+0x164>
    }
    return 0;
   38938:	0005883a 	mov	r2,zero
}
   3893c:	e037883a 	mov	sp,fp
   38940:	dfc00117 	ldw	ra,4(sp)
   38944:	df000017 	ldw	fp,0(sp)
   38948:	dec00204 	addi	sp,sp,8
   3894c:	f800283a 	ret

00038950 <secp256k1_ecdsa_sig_sign>:

static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid) {
   38950:	deffaa04 	addi	sp,sp,-344
   38954:	dfc05515 	stw	ra,340(sp)
   38958:	df005415 	stw	fp,336(sp)
   3895c:	dc005315 	stw	r16,332(sp)
   38960:	df005404 	addi	fp,sp,336
   38964:	e13ffb15 	stw	r4,-20(fp)
   38968:	e17ffc15 	stw	r5,-16(fp)
   3896c:	e1bffd15 	stw	r6,-12(fp)
   38970:	e1fffe15 	stw	r7,-8(fp)
    unsigned char b[32];
    secp256k1_gej rp;
    secp256k1_ge r;
    secp256k1_scalar n;
    int overflow = 0;
   38974:	e03ffa15 	stw	zero,-24(fp)

    secp256k1_ecmult_gen(ctx, &rp, nonce);
   38978:	e0bfb404 	addi	r2,fp,-304
   3897c:	e1800317 	ldw	r6,12(fp)
   38980:	100b883a 	mov	r5,r2
   38984:	e13ffb17 	ldw	r4,-20(fp)
   38988:	0037c200 	call	37c20 <secp256k1_ecmult_gen>
    secp256k1_ge_set_gej(&r, &rp);
   3898c:	e0ffb404 	addi	r3,fp,-304
   38990:	e0bfd904 	addi	r2,fp,-156
   38994:	180b883a 	mov	r5,r3
   38998:	1009883a 	mov	r4,r2
   3899c:	00201d00 	call	201d0 <secp256k1_ge_set_gej>
    secp256k1_fe_normalize(&r.x);
   389a0:	e0bfd904 	addi	r2,fp,-156
   389a4:	1009883a 	mov	r4,r2
   389a8:	0011e780 	call	11e78 <secp256k1_fe_normalize>
    secp256k1_fe_normalize(&r.y);
   389ac:	e0bfd904 	addi	r2,fp,-156
   389b0:	10800c04 	addi	r2,r2,48
   389b4:	1009883a 	mov	r4,r2
   389b8:	0011e780 	call	11e78 <secp256k1_fe_normalize>
    secp256k1_fe_get_b32(b, &r.x);
   389bc:	e0bfd904 	addi	r2,fp,-156
   389c0:	100b883a 	mov	r5,r2
   389c4:	e13fac04 	addi	r4,fp,-336
   389c8:	0013cac0 	call	13cac <secp256k1_fe_get_b32>
    secp256k1_scalar_set_b32(sigr, b, &overflow);
   389cc:	e0bffa04 	addi	r2,fp,-24
   389d0:	100d883a 	mov	r6,r2
   389d4:	e17fac04 	addi	r5,fp,-336
   389d8:	e13ffc17 	ldw	r4,-16(fp)
   389dc:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    if (secp256k1_scalar_is_zero(sigr)) {
   389e0:	e13ffc17 	ldw	r4,-16(fp)
   389e4:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   389e8:	10000826 	beq	r2,zero,38a0c <secp256k1_ecdsa_sig_sign+0xbc>
        /* P.x = order is on the curve, so technically sig->r could end up zero, which would be an invalid signature.
         * This branch is cryptographically unreachable as hitting it requires finding the discrete log of P.x = N.
         */
        secp256k1_gej_clear(&rp);
   389ec:	e0bfb404 	addi	r2,fp,-304
   389f0:	1009883a 	mov	r4,r2
   389f4:	0020c780 	call	20c78 <secp256k1_gej_clear>
        secp256k1_ge_clear(&r);
   389f8:	e0bfd904 	addi	r2,fp,-156
   389fc:	1009883a 	mov	r4,r2
   38a00:	0020cd80 	call	20cd8 <secp256k1_ge_clear>
        return 0;
   38a04:	0005883a 	mov	r2,zero
   38a08:	00003f06 	br	38b08 <secp256k1_ecdsa_sig_sign+0x1b8>
    }
    if (recid) {
   38a0c:	e0800417 	ldw	r2,16(fp)
   38a10:	10000e26 	beq	r2,zero,38a4c <secp256k1_ecdsa_sig_sign+0xfc>
        /* The overflow condition is cryptographically unreachable as hitting it requires finding the discrete log
         * of some P where P.x >= order, and only 1 in about 2^127 points meet this criteria.
         */
        *recid = (overflow ? 2 : 0) | (secp256k1_fe_is_odd(&r.y) ? 1 : 0);
   38a14:	e0bffa17 	ldw	r2,-24(fp)
   38a18:	10000226 	beq	r2,zero,38a24 <secp256k1_ecdsa_sig_sign+0xd4>
   38a1c:	04000084 	movi	r16,2
   38a20:	00000106 	br	38a28 <secp256k1_ecdsa_sig_sign+0xd8>
   38a24:	0021883a 	mov	r16,zero
   38a28:	e0bfd904 	addi	r2,fp,-156
   38a2c:	10800c04 	addi	r2,r2,48
   38a30:	1009883a 	mov	r4,r2
   38a34:	00137cc0 	call	137cc <secp256k1_fe_is_odd>
   38a38:	1004c03a 	cmpne	r2,r2,zero
   38a3c:	10803fcc 	andi	r2,r2,255
   38a40:	8086b03a 	or	r3,r16,r2
   38a44:	e0800417 	ldw	r2,16(fp)
   38a48:	10c00015 	stw	r3,0(r2)
    }
    secp256k1_scalar_mul(&n, sigr, seckey);
   38a4c:	e0bff204 	addi	r2,fp,-56
   38a50:	e1bffe17 	ldw	r6,-8(fp)
   38a54:	e17ffc17 	ldw	r5,-16(fp)
   38a58:	1009883a 	mov	r4,r2
   38a5c:	00345580 	call	34558 <secp256k1_scalar_mul>
    secp256k1_scalar_add(&n, &n, message);
   38a60:	e0fff204 	addi	r3,fp,-56
   38a64:	e0bff204 	addi	r2,fp,-56
   38a68:	e1800217 	ldw	r6,8(fp)
   38a6c:	180b883a 	mov	r5,r3
   38a70:	1009883a 	mov	r4,r2
   38a74:	0023ba00 	call	23ba0 <secp256k1_scalar_add>
    secp256k1_scalar_inverse(sigs, nonce);
   38a78:	e1400317 	ldw	r5,12(fp)
   38a7c:	e13ffd17 	ldw	r4,-12(fp)
   38a80:	003484c0 	call	3484c <secp256k1_scalar_inverse>
    secp256k1_scalar_mul(sigs, sigs, &n);
   38a84:	e0bff204 	addi	r2,fp,-56
   38a88:	100d883a 	mov	r6,r2
   38a8c:	e17ffd17 	ldw	r5,-12(fp)
   38a90:	e13ffd17 	ldw	r4,-12(fp)
   38a94:	00345580 	call	34558 <secp256k1_scalar_mul>
    secp256k1_scalar_clear(&n);
   38a98:	e0bff204 	addi	r2,fp,-56
   38a9c:	1009883a 	mov	r4,r2
   38aa0:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    secp256k1_gej_clear(&rp);
   38aa4:	e0bfb404 	addi	r2,fp,-304
   38aa8:	1009883a 	mov	r4,r2
   38aac:	0020c780 	call	20c78 <secp256k1_gej_clear>
    secp256k1_ge_clear(&r);
   38ab0:	e0bfd904 	addi	r2,fp,-156
   38ab4:	1009883a 	mov	r4,r2
   38ab8:	0020cd80 	call	20cd8 <secp256k1_ge_clear>
    if (secp256k1_scalar_is_zero(sigs)) {
   38abc:	e13ffd17 	ldw	r4,-12(fp)
   38ac0:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   38ac4:	10000226 	beq	r2,zero,38ad0 <secp256k1_ecdsa_sig_sign+0x180>
        return 0;
   38ac8:	0005883a 	mov	r2,zero
   38acc:	00000e06 	br	38b08 <secp256k1_ecdsa_sig_sign+0x1b8>
    }
    if (secp256k1_scalar_is_high(sigs)) {
   38ad0:	e13ffd17 	ldw	r4,-12(fp)
   38ad4:	00252900 	call	25290 <secp256k1_scalar_is_high>
   38ad8:	10000a26 	beq	r2,zero,38b04 <secp256k1_ecdsa_sig_sign+0x1b4>
        secp256k1_scalar_negate(sigs, sigs);
   38adc:	e17ffd17 	ldw	r5,-12(fp)
   38ae0:	e13ffd17 	ldw	r4,-12(fp)
   38ae4:	0024d740 	call	24d74 <secp256k1_scalar_negate>
        if (recid) {
   38ae8:	e0800417 	ldw	r2,16(fp)
   38aec:	10000526 	beq	r2,zero,38b04 <secp256k1_ecdsa_sig_sign+0x1b4>
            *recid ^= 1;
   38af0:	e0800417 	ldw	r2,16(fp)
   38af4:	10800017 	ldw	r2,0(r2)
   38af8:	10c0005c 	xori	r3,r2,1
   38afc:	e0800417 	ldw	r2,16(fp)
   38b00:	10c00015 	stw	r3,0(r2)
        }
    }
    return 1;
   38b04:	00800044 	movi	r2,1
}
   38b08:	e6ffff04 	addi	sp,fp,-4
   38b0c:	dfc00217 	ldw	ra,8(sp)
   38b10:	df000117 	ldw	fp,4(sp)
   38b14:	dc000017 	ldw	r16,0(sp)
   38b18:	dec00304 	addi	sp,sp,12
   38b1c:	f800283a 	ret

00038b20 <secp256k1_eckey_pubkey_parse>:
#include "scalar.h"
#include "field.h"
#include "group.h"
#include "ecmult_gen.h"

static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {
   38b20:	deffe304 	addi	sp,sp,-116
   38b24:	dfc01c15 	stw	ra,112(sp)
   38b28:	df001b15 	stw	fp,108(sp)
   38b2c:	df001b04 	addi	fp,sp,108
   38b30:	e13ffd15 	stw	r4,-12(fp)
   38b34:	e17ffe15 	stw	r5,-8(fp)
   38b38:	e1bfff15 	stw	r6,-4(fp)
    if (size == 33 && (pub[0] == 0x02 || pub[0] == 0x03)) {
   38b3c:	e0bfff17 	ldw	r2,-4(fp)
   38b40:	10800858 	cmpnei	r2,r2,33
   38b44:	10001e1e 	bne	r2,zero,38bc0 <secp256k1_eckey_pubkey_parse+0xa0>
   38b48:	e0bffe17 	ldw	r2,-8(fp)
   38b4c:	10800003 	ldbu	r2,0(r2)
   38b50:	10803fcc 	andi	r2,r2,255
   38b54:	108000a0 	cmpeqi	r2,r2,2
   38b58:	1000051e 	bne	r2,zero,38b70 <secp256k1_eckey_pubkey_parse+0x50>
   38b5c:	e0bffe17 	ldw	r2,-8(fp)
   38b60:	10800003 	ldbu	r2,0(r2)
   38b64:	10803fcc 	andi	r2,r2,255
   38b68:	108000d8 	cmpnei	r2,r2,3
   38b6c:	1000141e 	bne	r2,zero,38bc0 <secp256k1_eckey_pubkey_parse+0xa0>
        secp256k1_fe x;
        return secp256k1_fe_set_b32(&x, pub+1) && secp256k1_ge_set_xo_var(elem, &x, pub[0] == 0x03);
   38b70:	e0bffe17 	ldw	r2,-8(fp)
   38b74:	10800044 	addi	r2,r2,1
   38b78:	100b883a 	mov	r5,r2
   38b7c:	e13fe504 	addi	r4,fp,-108
   38b80:	0013a280 	call	13a28 <secp256k1_fe_set_b32>
   38b84:	10000c26 	beq	r2,zero,38bb8 <secp256k1_eckey_pubkey_parse+0x98>
   38b88:	e0bffe17 	ldw	r2,-8(fp)
   38b8c:	10800003 	ldbu	r2,0(r2)
   38b90:	10803fcc 	andi	r2,r2,255
   38b94:	108000e0 	cmpeqi	r2,r2,3
   38b98:	10803fcc 	andi	r2,r2,255
   38b9c:	100d883a 	mov	r6,r2
   38ba0:	e17fe504 	addi	r5,fp,-108
   38ba4:	e13ffd17 	ldw	r4,-12(fp)
   38ba8:	0020e200 	call	20e20 <secp256k1_ge_set_xo_var>
   38bac:	10000226 	beq	r2,zero,38bb8 <secp256k1_eckey_pubkey_parse+0x98>
   38bb0:	00800044 	movi	r2,1
   38bb4:	00004106 	br	38cbc <secp256k1_eckey_pubkey_parse+0x19c>
   38bb8:	0005883a 	mov	r2,zero
   38bbc:	00003f06 	br	38cbc <secp256k1_eckey_pubkey_parse+0x19c>
    } else if (size == 65 && (pub[0] == 0x04 || pub[0] == 0x06 || pub[0] == 0x07)) {
   38bc0:	e0bfff17 	ldw	r2,-4(fp)
   38bc4:	10801058 	cmpnei	r2,r2,65
   38bc8:	10003b1e 	bne	r2,zero,38cb8 <secp256k1_eckey_pubkey_parse+0x198>
   38bcc:	e0bffe17 	ldw	r2,-8(fp)
   38bd0:	10800003 	ldbu	r2,0(r2)
   38bd4:	10803fcc 	andi	r2,r2,255
   38bd8:	10800120 	cmpeqi	r2,r2,4
   38bdc:	10000a1e 	bne	r2,zero,38c08 <secp256k1_eckey_pubkey_parse+0xe8>
   38be0:	e0bffe17 	ldw	r2,-8(fp)
   38be4:	10800003 	ldbu	r2,0(r2)
   38be8:	10803fcc 	andi	r2,r2,255
   38bec:	108001a0 	cmpeqi	r2,r2,6
   38bf0:	1000051e 	bne	r2,zero,38c08 <secp256k1_eckey_pubkey_parse+0xe8>
   38bf4:	e0bffe17 	ldw	r2,-8(fp)
   38bf8:	10800003 	ldbu	r2,0(r2)
   38bfc:	10803fcc 	andi	r2,r2,255
   38c00:	108001d8 	cmpnei	r2,r2,7
   38c04:	10002c1e 	bne	r2,zero,38cb8 <secp256k1_eckey_pubkey_parse+0x198>
        secp256k1_fe x, y;
        if (!secp256k1_fe_set_b32(&x, pub+1) || !secp256k1_fe_set_b32(&y, pub+33)) {
   38c08:	e0bffe17 	ldw	r2,-8(fp)
   38c0c:	10c00044 	addi	r3,r2,1
   38c10:	e0bff104 	addi	r2,fp,-60
   38c14:	180b883a 	mov	r5,r3
   38c18:	1009883a 	mov	r4,r2
   38c1c:	0013a280 	call	13a28 <secp256k1_fe_set_b32>
   38c20:	10000626 	beq	r2,zero,38c3c <secp256k1_eckey_pubkey_parse+0x11c>
   38c24:	e0bffe17 	ldw	r2,-8(fp)
   38c28:	10800844 	addi	r2,r2,33
   38c2c:	100b883a 	mov	r5,r2
   38c30:	e13fe504 	addi	r4,fp,-108
   38c34:	0013a280 	call	13a28 <secp256k1_fe_set_b32>
   38c38:	1000021e 	bne	r2,zero,38c44 <secp256k1_eckey_pubkey_parse+0x124>
            return 0;
   38c3c:	0005883a 	mov	r2,zero
   38c40:	00001e06 	br	38cbc <secp256k1_eckey_pubkey_parse+0x19c>
        }
        secp256k1_ge_set_xy(elem, &x, &y);
   38c44:	e0bff104 	addi	r2,fp,-60
   38c48:	e1bfe504 	addi	r6,fp,-108
   38c4c:	100b883a 	mov	r5,r2
   38c50:	e13ffd17 	ldw	r4,-12(fp)
   38c54:	00200240 	call	20024 <secp256k1_ge_set_xy>
        if ((pub[0] == 0x06 || pub[0] == 0x07) && secp256k1_fe_is_odd(&y) != (pub[0] == 0x07)) {
   38c58:	e0bffe17 	ldw	r2,-8(fp)
   38c5c:	10800003 	ldbu	r2,0(r2)
   38c60:	10803fcc 	andi	r2,r2,255
   38c64:	108001a0 	cmpeqi	r2,r2,6
   38c68:	1000051e 	bne	r2,zero,38c80 <secp256k1_eckey_pubkey_parse+0x160>
   38c6c:	e0bffe17 	ldw	r2,-8(fp)
   38c70:	10800003 	ldbu	r2,0(r2)
   38c74:	10803fcc 	andi	r2,r2,255
   38c78:	108001d8 	cmpnei	r2,r2,7
   38c7c:	10000b1e 	bne	r2,zero,38cac <secp256k1_eckey_pubkey_parse+0x18c>
   38c80:	e13fe504 	addi	r4,fp,-108
   38c84:	00137cc0 	call	137cc <secp256k1_fe_is_odd>
   38c88:	1007883a 	mov	r3,r2
   38c8c:	e0bffe17 	ldw	r2,-8(fp)
   38c90:	10800003 	ldbu	r2,0(r2)
   38c94:	10803fcc 	andi	r2,r2,255
   38c98:	108001e0 	cmpeqi	r2,r2,7
   38c9c:	10803fcc 	andi	r2,r2,255
   38ca0:	18800226 	beq	r3,r2,38cac <secp256k1_eckey_pubkey_parse+0x18c>
            return 0;
   38ca4:	0005883a 	mov	r2,zero
   38ca8:	00000406 	br	38cbc <secp256k1_eckey_pubkey_parse+0x19c>
        }
        return secp256k1_ge_is_valid_var(elem);
   38cac:	e13ffd17 	ldw	r4,-12(fp)
   38cb0:	00213cc0 	call	213cc <secp256k1_ge_is_valid_var>
   38cb4:	00000106 	br	38cbc <secp256k1_eckey_pubkey_parse+0x19c>
    } else {
        return 0;
   38cb8:	0005883a 	mov	r2,zero
    }
}
   38cbc:	e037883a 	mov	sp,fp
   38cc0:	dfc00117 	ldw	ra,4(sp)
   38cc4:	df000017 	ldw	fp,0(sp)
   38cc8:	dec00204 	addi	sp,sp,8
   38ccc:	f800283a 	ret

00038cd0 <secp256k1_eckey_pubkey_serialize>:

static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *pub, size_t *size, int compressed) {
   38cd0:	defffa04 	addi	sp,sp,-24
   38cd4:	dfc00515 	stw	ra,20(sp)
   38cd8:	df000415 	stw	fp,16(sp)
   38cdc:	df000404 	addi	fp,sp,16
   38ce0:	e13ffc15 	stw	r4,-16(fp)
   38ce4:	e17ffd15 	stw	r5,-12(fp)
   38ce8:	e1bffe15 	stw	r6,-8(fp)
   38cec:	e1ffff15 	stw	r7,-4(fp)
    if (secp256k1_ge_is_infinity(elem)) {
   38cf0:	e13ffc17 	ldw	r4,-16(fp)
   38cf4:	00201280 	call	20128 <secp256k1_ge_is_infinity>
   38cf8:	10000226 	beq	r2,zero,38d04 <secp256k1_eckey_pubkey_serialize+0x34>
        return 0;
   38cfc:	0005883a 	mov	r2,zero
   38d00:	00002b06 	br	38db0 <secp256k1_eckey_pubkey_serialize+0xe0>
    }
    secp256k1_fe_normalize_var(&elem->x);
   38d04:	e0bffc17 	ldw	r2,-16(fp)
   38d08:	1009883a 	mov	r4,r2
   38d0c:	00127a80 	call	127a8 <secp256k1_fe_normalize_var>
    secp256k1_fe_normalize_var(&elem->y);
   38d10:	e0bffc17 	ldw	r2,-16(fp)
   38d14:	10800c04 	addi	r2,r2,48
   38d18:	1009883a 	mov	r4,r2
   38d1c:	00127a80 	call	127a8 <secp256k1_fe_normalize_var>
    secp256k1_fe_get_b32(&pub[1], &elem->x);
   38d20:	e0bffd17 	ldw	r2,-12(fp)
   38d24:	10800044 	addi	r2,r2,1
   38d28:	e0fffc17 	ldw	r3,-16(fp)
   38d2c:	180b883a 	mov	r5,r3
   38d30:	1009883a 	mov	r4,r2
   38d34:	0013cac0 	call	13cac <secp256k1_fe_get_b32>
    if (compressed) {
   38d38:	e0bfff17 	ldw	r2,-4(fp)
   38d3c:	10000e26 	beq	r2,zero,38d78 <secp256k1_eckey_pubkey_serialize+0xa8>
        *size = 33;
   38d40:	e0bffe17 	ldw	r2,-8(fp)
   38d44:	00c00844 	movi	r3,33
   38d48:	10c00015 	stw	r3,0(r2)
        pub[0] = 0x02 | (secp256k1_fe_is_odd(&elem->y) ? 0x01 : 0x00);
   38d4c:	e0bffc17 	ldw	r2,-16(fp)
   38d50:	10800c04 	addi	r2,r2,48
   38d54:	1009883a 	mov	r4,r2
   38d58:	00137cc0 	call	137cc <secp256k1_fe_is_odd>
   38d5c:	10000226 	beq	r2,zero,38d68 <secp256k1_eckey_pubkey_serialize+0x98>
   38d60:	008000c4 	movi	r2,3
   38d64:	00000106 	br	38d6c <secp256k1_eckey_pubkey_serialize+0x9c>
   38d68:	00800084 	movi	r2,2
   38d6c:	e0fffd17 	ldw	r3,-12(fp)
   38d70:	18800005 	stb	r2,0(r3)
   38d74:	00000d06 	br	38dac <secp256k1_eckey_pubkey_serialize+0xdc>
    } else {
        *size = 65;
   38d78:	e0bffe17 	ldw	r2,-8(fp)
   38d7c:	00c01044 	movi	r3,65
   38d80:	10c00015 	stw	r3,0(r2)
        pub[0] = 0x04;
   38d84:	e0bffd17 	ldw	r2,-12(fp)
   38d88:	00c00104 	movi	r3,4
   38d8c:	10c00005 	stb	r3,0(r2)
        secp256k1_fe_get_b32(&pub[33], &elem->y);
   38d90:	e0bffd17 	ldw	r2,-12(fp)
   38d94:	10c00844 	addi	r3,r2,33
   38d98:	e0bffc17 	ldw	r2,-16(fp)
   38d9c:	10800c04 	addi	r2,r2,48
   38da0:	100b883a 	mov	r5,r2
   38da4:	1809883a 	mov	r4,r3
   38da8:	0013cac0 	call	13cac <secp256k1_fe_get_b32>
    }
    return 1;
   38dac:	00800044 	movi	r2,1
}
   38db0:	e037883a 	mov	sp,fp
   38db4:	dfc00117 	ldw	ra,4(sp)
   38db8:	df000017 	ldw	fp,0(sp)
   38dbc:	dec00204 	addi	sp,sp,8
   38dc0:	f800283a 	ret

00038dc4 <secp256k1_eckey_privkey_tweak_add>:

static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar *key, const secp256k1_scalar *tweak) {
   38dc4:	defffc04 	addi	sp,sp,-16
   38dc8:	dfc00315 	stw	ra,12(sp)
   38dcc:	df000215 	stw	fp,8(sp)
   38dd0:	df000204 	addi	fp,sp,8
   38dd4:	e13ffe15 	stw	r4,-8(fp)
   38dd8:	e17fff15 	stw	r5,-4(fp)
    secp256k1_scalar_add(key, key, tweak);
   38ddc:	e1bfff17 	ldw	r6,-4(fp)
   38de0:	e17ffe17 	ldw	r5,-8(fp)
   38de4:	e13ffe17 	ldw	r4,-8(fp)
   38de8:	0023ba00 	call	23ba0 <secp256k1_scalar_add>
    if (secp256k1_scalar_is_zero(key)) {
   38dec:	e13ffe17 	ldw	r4,-8(fp)
   38df0:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   38df4:	10000226 	beq	r2,zero,38e00 <secp256k1_eckey_privkey_tweak_add+0x3c>
        return 0;
   38df8:	0005883a 	mov	r2,zero
   38dfc:	00000106 	br	38e04 <secp256k1_eckey_privkey_tweak_add+0x40>
    }
    return 1;
   38e00:	00800044 	movi	r2,1
}
   38e04:	e037883a 	mov	sp,fp
   38e08:	dfc00117 	ldw	ra,4(sp)
   38e0c:	df000017 	ldw	fp,0(sp)
   38e10:	dec00204 	addi	sp,sp,8
   38e14:	f800283a 	ret

00038e18 <secp256k1_eckey_pubkey_tweak_add>:

static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {
   38e18:	deffcd04 	addi	sp,sp,-204
   38e1c:	dfc03215 	stw	ra,200(sp)
   38e20:	df003115 	stw	fp,196(sp)
   38e24:	df003104 	addi	fp,sp,196
   38e28:	e13ffd15 	stw	r4,-12(fp)
   38e2c:	e17ffe15 	stw	r5,-8(fp)
   38e30:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_gej pt;
    secp256k1_scalar one;
    secp256k1_gej_set_ge(&pt, key);
   38e34:	e17ffe17 	ldw	r5,-8(fp)
   38e38:	e13fd004 	addi	r4,fp,-192
   38e3c:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
    secp256k1_scalar_set_int(&one, 1);
   38e40:	e0bff504 	addi	r2,fp,-44
   38e44:	01400044 	movi	r5,1
   38e48:	1009883a 	mov	r4,r2
   38e4c:	002325c0 	call	2325c <secp256k1_scalar_set_int>
    secp256k1_ecmult(ctx, &pt, &pt, &one, tweak);
   38e50:	e0fff504 	addi	r3,fp,-44
   38e54:	e0bfff17 	ldw	r2,-4(fp)
   38e58:	d8800015 	stw	r2,0(sp)
   38e5c:	180f883a 	mov	r7,r3
   38e60:	e1bfd004 	addi	r6,fp,-192
   38e64:	e17fd004 	addi	r5,fp,-192
   38e68:	e13ffd17 	ldw	r4,-12(fp)
   38e6c:	0035f080 	call	35f08 <secp256k1_ecmult>

    if (secp256k1_gej_is_infinity(&pt)) {
   38e70:	e13fd004 	addi	r4,fp,-192
   38e74:	002129c0 	call	2129c <secp256k1_gej_is_infinity>
   38e78:	10000226 	beq	r2,zero,38e84 <secp256k1_eckey_pubkey_tweak_add+0x6c>
        return 0;
   38e7c:	0005883a 	mov	r2,zero
   38e80:	00000406 	br	38e94 <secp256k1_eckey_pubkey_tweak_add+0x7c>
    }
    secp256k1_ge_set_gej(key, &pt);
   38e84:	e17fd004 	addi	r5,fp,-192
   38e88:	e13ffe17 	ldw	r4,-8(fp)
   38e8c:	00201d00 	call	201d0 <secp256k1_ge_set_gej>
    return 1;
   38e90:	00800044 	movi	r2,1
}
   38e94:	e037883a 	mov	sp,fp
   38e98:	dfc00117 	ldw	ra,4(sp)
   38e9c:	df000017 	ldw	fp,0(sp)
   38ea0:	dec00204 	addi	sp,sp,8
   38ea4:	f800283a 	ret

00038ea8 <secp256k1_eckey_privkey_tweak_mul>:

static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak) {
   38ea8:	defffc04 	addi	sp,sp,-16
   38eac:	dfc00315 	stw	ra,12(sp)
   38eb0:	df000215 	stw	fp,8(sp)
   38eb4:	df000204 	addi	fp,sp,8
   38eb8:	e13ffe15 	stw	r4,-8(fp)
   38ebc:	e17fff15 	stw	r5,-4(fp)
    if (secp256k1_scalar_is_zero(tweak)) {
   38ec0:	e13fff17 	ldw	r4,-4(fp)
   38ec4:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   38ec8:	10000226 	beq	r2,zero,38ed4 <secp256k1_eckey_privkey_tweak_mul+0x2c>
        return 0;
   38ecc:	0005883a 	mov	r2,zero
   38ed0:	00000506 	br	38ee8 <secp256k1_eckey_privkey_tweak_mul+0x40>
    }

    secp256k1_scalar_mul(key, key, tweak);
   38ed4:	e1bfff17 	ldw	r6,-4(fp)
   38ed8:	e17ffe17 	ldw	r5,-8(fp)
   38edc:	e13ffe17 	ldw	r4,-8(fp)
   38ee0:	00345580 	call	34558 <secp256k1_scalar_mul>
    return 1;
   38ee4:	00800044 	movi	r2,1
}
   38ee8:	e037883a 	mov	sp,fp
   38eec:	dfc00117 	ldw	ra,4(sp)
   38ef0:	df000017 	ldw	fp,0(sp)
   38ef4:	dec00204 	addi	sp,sp,8
   38ef8:	f800283a 	ret

00038efc <secp256k1_eckey_pubkey_tweak_mul>:

static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {
   38efc:	deffcd04 	addi	sp,sp,-204
   38f00:	dfc03215 	stw	ra,200(sp)
   38f04:	df003115 	stw	fp,196(sp)
   38f08:	df003104 	addi	fp,sp,196
   38f0c:	e13ffd15 	stw	r4,-12(fp)
   38f10:	e17ffe15 	stw	r5,-8(fp)
   38f14:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar zero;
    secp256k1_gej pt;
    if (secp256k1_scalar_is_zero(tweak)) {
   38f18:	e13fff17 	ldw	r4,-4(fp)
   38f1c:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   38f20:	10000226 	beq	r2,zero,38f2c <secp256k1_eckey_pubkey_tweak_mul+0x30>
        return 0;
   38f24:	0005883a 	mov	r2,zero
   38f28:	00001506 	br	38f80 <secp256k1_eckey_pubkey_tweak_mul+0x84>
    }

    secp256k1_scalar_set_int(&zero, 0);
   38f2c:	000b883a 	mov	r5,zero
   38f30:	e13fd004 	addi	r4,fp,-192
   38f34:	002325c0 	call	2325c <secp256k1_scalar_set_int>
    secp256k1_gej_set_ge(&pt, key);
   38f38:	e0bfd804 	addi	r2,fp,-160
   38f3c:	e17ffe17 	ldw	r5,-8(fp)
   38f40:	1009883a 	mov	r4,r2
   38f44:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
    secp256k1_ecmult(ctx, &pt, &pt, tweak, &zero);
   38f48:	e0ffd804 	addi	r3,fp,-160
   38f4c:	e0bfd804 	addi	r2,fp,-160
   38f50:	e13fd004 	addi	r4,fp,-192
   38f54:	d9000015 	stw	r4,0(sp)
   38f58:	e1ffff17 	ldw	r7,-4(fp)
   38f5c:	180d883a 	mov	r6,r3
   38f60:	100b883a 	mov	r5,r2
   38f64:	e13ffd17 	ldw	r4,-12(fp)
   38f68:	0035f080 	call	35f08 <secp256k1_ecmult>
    secp256k1_ge_set_gej(key, &pt);
   38f6c:	e0bfd804 	addi	r2,fp,-160
   38f70:	100b883a 	mov	r5,r2
   38f74:	e13ffe17 	ldw	r4,-8(fp)
   38f78:	00201d00 	call	201d0 <secp256k1_ge_set_gej>
    return 1;
   38f7c:	00800044 	movi	r2,1
}
   38f80:	e037883a 	mov	sp,fp
   38f84:	dfc00117 	ldw	ra,4(sp)
   38f88:	df000017 	ldw	fp,0(sp)
   38f8c:	dec00204 	addi	sp,sp,8
   38f90:	f800283a 	ret

00038f94 <default_illegal_callback_fn>:
        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
        return 0; \
    } \
} while(0)

static void default_illegal_callback_fn(const char* str, void* data) {
   38f94:	defffc04 	addi	sp,sp,-16
   38f98:	dfc00315 	stw	ra,12(sp)
   38f9c:	df000215 	stw	fp,8(sp)
   38fa0:	df000204 	addi	fp,sp,8
   38fa4:	e13ffe15 	stw	r4,-8(fp)
   38fa8:	e17fff15 	stw	r5,-4(fp)
    (void)data;
    fprintf(stderr, "[libsecp256k1] illegal argument: %s\n", str);
   38fac:	d0a01617 	ldw	r2,-32680(gp)
   38fb0:	10800317 	ldw	r2,12(r2)
   38fb4:	e1bffe17 	ldw	r6,-8(fp)
   38fb8:	014001b4 	movhi	r5,6
   38fbc:	2971ca04 	addi	r5,r5,-14552
   38fc0:	1009883a 	mov	r4,r2
   38fc4:	00452600 	call	45260 <fprintf>
    abort();
   38fc8:	00450340 	call	45034 <abort>

00038fcc <default_error_callback_fn>:
static const secp256k1_callback default_illegal_callback = {
    default_illegal_callback_fn,
    NULL
};

static void default_error_callback_fn(const char* str, void* data) {
   38fcc:	defffc04 	addi	sp,sp,-16
   38fd0:	dfc00315 	stw	ra,12(sp)
   38fd4:	df000215 	stw	fp,8(sp)
   38fd8:	df000204 	addi	fp,sp,8
   38fdc:	e13ffe15 	stw	r4,-8(fp)
   38fe0:	e17fff15 	stw	r5,-4(fp)
    (void)data;
    fprintf(stderr, "[libsecp256k1] internal consistency check failed: %s\n", str);
   38fe4:	d0a01617 	ldw	r2,-32680(gp)
   38fe8:	10800317 	ldw	r2,12(r2)
   38fec:	e1bffe17 	ldw	r6,-8(fp)
   38ff0:	014001b4 	movhi	r5,6
   38ff4:	2971d404 	addi	r5,r5,-14512
   38ff8:	1009883a 	mov	r4,r2
   38ffc:	00452600 	call	45260 <fprintf>
    abort();
   39000:	00450340 	call	45034 <abort>

00039004 <secp256k1_context_create>:
    secp256k1_ecmult_gen_context ecmult_gen_ctx;
    secp256k1_callback illegal_callback;
    secp256k1_callback error_callback;
};

secp256k1_context* secp256k1_context_create(unsigned int flags) {
   39004:	defffc04 	addi	sp,sp,-16
   39008:	dfc00315 	stw	ra,12(sp)
   3900c:	df000215 	stw	fp,8(sp)
   39010:	df000204 	addi	fp,sp,8
   39014:	e13fff15 	stw	r4,-4(fp)
    secp256k1_context* ret = (secp256k1_context*)checked_malloc(&default_error_callback, sizeof(secp256k1_context));
   39018:	01403304 	movi	r5,204
   3901c:	d1200e04 	addi	r4,gp,-32712
   39020:	000c1a80 	call	c1a8 <checked_malloc>
   39024:	e0bffe15 	stw	r2,-8(fp)
    ret->illegal_callback = default_illegal_callback;
   39028:	e0fffe17 	ldw	r3,-8(fp)
   3902c:	00800134 	movhi	r2,4
   39030:	10a3e504 	addi	r2,r2,-28780
   39034:	18802f15 	stw	r2,188(r3)
   39038:	e0bffe17 	ldw	r2,-8(fp)
   3903c:	10003015 	stw	zero,192(r2)
    ret->error_callback = default_error_callback;
   39040:	e0fffe17 	ldw	r3,-8(fp)
   39044:	00800134 	movhi	r2,4
   39048:	10a3f304 	addi	r2,r2,-28724
   3904c:	18803115 	stw	r2,196(r3)
   39050:	e0bffe17 	ldw	r2,-8(fp)
   39054:	10003215 	stw	zero,200(r2)

    if (EXPECT((flags & SECP256K1_FLAGS_TYPE_MASK) != SECP256K1_FLAGS_TYPE_CONTEXT, 0)) {
   39058:	e0bfff17 	ldw	r2,-4(fp)
   3905c:	10803fcc 	andi	r2,r2,255
   39060:	10800058 	cmpnei	r2,r2,1
   39064:	10803fcc 	andi	r2,r2,255
   39068:	10000a26 	beq	r2,zero,39094 <secp256k1_context_create+0x90>
            secp256k1_callback_call(&ret->illegal_callback,
   3906c:	e0bffe17 	ldw	r2,-8(fp)
   39070:	10802f04 	addi	r2,r2,188
   39074:	014001b4 	movhi	r5,6
   39078:	2971e204 	addi	r5,r5,-14456
   3907c:	1009883a 	mov	r4,r2
   39080:	000c15c0 	call	c15c <secp256k1_callback_call>
                                    "Invalid flags");
            free(ret);
   39084:	e13ffe17 	ldw	r4,-8(fp)
   39088:	00453fc0 	call	453fc <free>
            return NULL;
   3908c:	0005883a 	mov	r2,zero
   39090:	00001b06 	br	39100 <secp256k1_context_create+0xfc>
    }

    secp256k1_ecmult_context_init(&ret->ecmult_ctx);
   39094:	e0bffe17 	ldw	r2,-8(fp)
   39098:	1009883a 	mov	r4,r2
   3909c:	00359780 	call	35978 <secp256k1_ecmult_context_init>
    secp256k1_ecmult_gen_context_init(&ret->ecmult_gen_ctx);
   390a0:	e0bffe17 	ldw	r2,-8(fp)
   390a4:	10800104 	addi	r2,r2,4
   390a8:	1009883a 	mov	r4,r2
   390ac:	003720c0 	call	3720c <secp256k1_ecmult_gen_context_init>

    if (flags & SECP256K1_FLAGS_BIT_CONTEXT_SIGN) {
   390b0:	e0bfff17 	ldw	r2,-4(fp)
   390b4:	1080800c 	andi	r2,r2,512
   390b8:	10000726 	beq	r2,zero,390d8 <secp256k1_context_create+0xd4>
        secp256k1_ecmult_gen_context_build(&ret->ecmult_gen_ctx, &ret->error_callback);
   390bc:	e0bffe17 	ldw	r2,-8(fp)
   390c0:	10c00104 	addi	r3,r2,4
   390c4:	e0bffe17 	ldw	r2,-8(fp)
   390c8:	10803104 	addi	r2,r2,196
   390cc:	100b883a 	mov	r5,r2
   390d0:	1809883a 	mov	r4,r3
   390d4:	00372380 	call	37238 <secp256k1_ecmult_gen_context_build>
    }
    if (flags & SECP256K1_FLAGS_BIT_CONTEXT_VERIFY) {
   390d8:	e0bfff17 	ldw	r2,-4(fp)
   390dc:	1080400c 	andi	r2,r2,256
   390e0:	10000626 	beq	r2,zero,390fc <secp256k1_context_create+0xf8>
        secp256k1_ecmult_context_build(&ret->ecmult_ctx, &ret->error_callback);
   390e4:	e0fffe17 	ldw	r3,-8(fp)
   390e8:	e0bffe17 	ldw	r2,-8(fp)
   390ec:	10803104 	addi	r2,r2,196
   390f0:	100b883a 	mov	r5,r2
   390f4:	1809883a 	mov	r4,r3
   390f8:	00359a40 	call	359a4 <secp256k1_ecmult_context_build>
    }

    return ret;
   390fc:	e0bffe17 	ldw	r2,-8(fp)
}
   39100:	e037883a 	mov	sp,fp
   39104:	dfc00117 	ldw	ra,4(sp)
   39108:	df000017 	ldw	fp,0(sp)
   3910c:	dec00204 	addi	sp,sp,8
   39110:	f800283a 	ret

00039114 <secp256k1_context_clone>:

secp256k1_context* secp256k1_context_clone(const secp256k1_context* ctx) {
   39114:	defffc04 	addi	sp,sp,-16
   39118:	dfc00315 	stw	ra,12(sp)
   3911c:	df000215 	stw	fp,8(sp)
   39120:	df000204 	addi	fp,sp,8
   39124:	e13fff15 	stw	r4,-4(fp)
    secp256k1_context* ret = (secp256k1_context*)checked_malloc(&ctx->error_callback, sizeof(secp256k1_context));
   39128:	e0bfff17 	ldw	r2,-4(fp)
   3912c:	10803104 	addi	r2,r2,196
   39130:	01403304 	movi	r5,204
   39134:	1009883a 	mov	r4,r2
   39138:	000c1a80 	call	c1a8 <checked_malloc>
   3913c:	e0bffe15 	stw	r2,-8(fp)
    ret->illegal_callback = ctx->illegal_callback;
   39140:	e0bffe17 	ldw	r2,-8(fp)
   39144:	e0ffff17 	ldw	r3,-4(fp)
   39148:	19002f17 	ldw	r4,188(r3)
   3914c:	11002f15 	stw	r4,188(r2)
   39150:	18c03017 	ldw	r3,192(r3)
   39154:	10c03015 	stw	r3,192(r2)
    ret->error_callback = ctx->error_callback;
   39158:	e0bffe17 	ldw	r2,-8(fp)
   3915c:	e0ffff17 	ldw	r3,-4(fp)
   39160:	19003117 	ldw	r4,196(r3)
   39164:	11003115 	stw	r4,196(r2)
   39168:	18c03217 	ldw	r3,200(r3)
   3916c:	10c03215 	stw	r3,200(r2)
    secp256k1_ecmult_context_clone(&ret->ecmult_ctx, &ctx->ecmult_ctx, &ctx->error_callback);
   39170:	e0fffe17 	ldw	r3,-8(fp)
   39174:	e13fff17 	ldw	r4,-4(fp)
   39178:	e0bfff17 	ldw	r2,-4(fp)
   3917c:	10803104 	addi	r2,r2,196
   39180:	100d883a 	mov	r6,r2
   39184:	200b883a 	mov	r5,r4
   39188:	1809883a 	mov	r4,r3
   3918c:	0035a280 	call	35a28 <secp256k1_ecmult_context_clone>
    secp256k1_ecmult_gen_context_clone(&ret->ecmult_gen_ctx, &ctx->ecmult_gen_ctx, &ctx->error_callback);
   39190:	e0bffe17 	ldw	r2,-8(fp)
   39194:	10c00104 	addi	r3,r2,4
   39198:	e0bfff17 	ldw	r2,-4(fp)
   3919c:	11000104 	addi	r4,r2,4
   391a0:	e0bfff17 	ldw	r2,-4(fp)
   391a4:	10803104 	addi	r2,r2,196
   391a8:	100d883a 	mov	r6,r2
   391ac:	200b883a 	mov	r5,r4
   391b0:	1809883a 	mov	r4,r3
   391b4:	0037acc0 	call	37acc <secp256k1_ecmult_gen_context_clone>
    return ret;
   391b8:	e0bffe17 	ldw	r2,-8(fp)
}
   391bc:	e037883a 	mov	sp,fp
   391c0:	dfc00117 	ldw	ra,4(sp)
   391c4:	df000017 	ldw	fp,0(sp)
   391c8:	dec00204 	addi	sp,sp,8
   391cc:	f800283a 	ret

000391d0 <secp256k1_context_destroy>:

void secp256k1_context_destroy(secp256k1_context* ctx) {
   391d0:	defffd04 	addi	sp,sp,-12
   391d4:	dfc00215 	stw	ra,8(sp)
   391d8:	df000115 	stw	fp,4(sp)
   391dc:	df000104 	addi	fp,sp,4
   391e0:	e13fff15 	stw	r4,-4(fp)
    if (ctx != NULL) {
   391e4:	e0bfff17 	ldw	r2,-4(fp)
   391e8:	10000926 	beq	r2,zero,39210 <secp256k1_context_destroy+0x40>
        secp256k1_ecmult_context_clear(&ctx->ecmult_ctx);
   391ec:	e0bfff17 	ldw	r2,-4(fp)
   391f0:	1009883a 	mov	r4,r2
   391f4:	0035ae40 	call	35ae4 <secp256k1_ecmult_context_clear>
        secp256k1_ecmult_gen_context_clear(&ctx->ecmult_gen_ctx);
   391f8:	e0bfff17 	ldw	r2,-4(fp)
   391fc:	10800104 	addi	r2,r2,4
   39200:	1009883a 	mov	r4,r2
   39204:	0037bbc0 	call	37bbc <secp256k1_ecmult_gen_context_clear>

        free(ctx);
   39208:	e13fff17 	ldw	r4,-4(fp)
   3920c:	00453fc0 	call	453fc <free>
    }
}
   39210:	0001883a 	nop
   39214:	e037883a 	mov	sp,fp
   39218:	dfc00117 	ldw	ra,4(sp)
   3921c:	df000017 	ldw	fp,0(sp)
   39220:	dec00204 	addi	sp,sp,8
   39224:	f800283a 	ret

00039228 <secp256k1_context_set_illegal_callback>:

void secp256k1_context_set_illegal_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {
   39228:	defffc04 	addi	sp,sp,-16
   3922c:	df000315 	stw	fp,12(sp)
   39230:	df000304 	addi	fp,sp,12
   39234:	e13ffd15 	stw	r4,-12(fp)
   39238:	e17ffe15 	stw	r5,-8(fp)
   3923c:	e1bfff15 	stw	r6,-4(fp)
    if (fun == NULL) {
   39240:	e0bffe17 	ldw	r2,-8(fp)
   39244:	1000031e 	bne	r2,zero,39254 <secp256k1_context_set_illegal_callback+0x2c>
        fun = default_illegal_callback_fn;
   39248:	00800134 	movhi	r2,4
   3924c:	10a3e504 	addi	r2,r2,-28780
   39250:	e0bffe15 	stw	r2,-8(fp)
    }
    ctx->illegal_callback.fn = fun;
   39254:	e0bffd17 	ldw	r2,-12(fp)
   39258:	e0fffe17 	ldw	r3,-8(fp)
   3925c:	10c02f15 	stw	r3,188(r2)
    ctx->illegal_callback.data = data;
   39260:	e0bffd17 	ldw	r2,-12(fp)
   39264:	e0ffff17 	ldw	r3,-4(fp)
   39268:	10c03015 	stw	r3,192(r2)
}
   3926c:	0001883a 	nop
   39270:	e037883a 	mov	sp,fp
   39274:	df000017 	ldw	fp,0(sp)
   39278:	dec00104 	addi	sp,sp,4
   3927c:	f800283a 	ret

00039280 <secp256k1_context_set_error_callback>:

void secp256k1_context_set_error_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {
   39280:	defffc04 	addi	sp,sp,-16
   39284:	df000315 	stw	fp,12(sp)
   39288:	df000304 	addi	fp,sp,12
   3928c:	e13ffd15 	stw	r4,-12(fp)
   39290:	e17ffe15 	stw	r5,-8(fp)
   39294:	e1bfff15 	stw	r6,-4(fp)
    if (fun == NULL) {
   39298:	e0bffe17 	ldw	r2,-8(fp)
   3929c:	1000031e 	bne	r2,zero,392ac <secp256k1_context_set_error_callback+0x2c>
        fun = default_error_callback_fn;
   392a0:	00800134 	movhi	r2,4
   392a4:	10a3f304 	addi	r2,r2,-28724
   392a8:	e0bffe15 	stw	r2,-8(fp)
    }
    ctx->error_callback.fn = fun;
   392ac:	e0bffd17 	ldw	r2,-12(fp)
   392b0:	e0fffe17 	ldw	r3,-8(fp)
   392b4:	10c03115 	stw	r3,196(r2)
    ctx->error_callback.data = data;
   392b8:	e0bffd17 	ldw	r2,-12(fp)
   392bc:	e0ffff17 	ldw	r3,-4(fp)
   392c0:	10c03215 	stw	r3,200(r2)
}
   392c4:	0001883a 	nop
   392c8:	e037883a 	mov	sp,fp
   392cc:	df000017 	ldw	fp,0(sp)
   392d0:	dec00104 	addi	sp,sp,4
   392d4:	f800283a 	ret

000392d8 <secp256k1_pubkey_load>:

static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge, const secp256k1_pubkey* pubkey) {
   392d8:	deffeb04 	addi	sp,sp,-84
   392dc:	dfc01415 	stw	ra,80(sp)
   392e0:	df001315 	stw	fp,76(sp)
   392e4:	df001304 	addi	fp,sp,76
   392e8:	e13ffd15 	stw	r4,-12(fp)
   392ec:	e17ffe15 	stw	r5,-8(fp)
   392f0:	e1bfff15 	stw	r6,-4(fp)
    if (sizeof(secp256k1_ge_storage) == 64) {
        /* When the secp256k1_ge_storage type is exactly 64 byte, use its
         * representation inside secp256k1_pubkey, as conversion is very fast.
         * Note that secp256k1_pubkey_save must use the same representation. */
        secp256k1_ge_storage s;
        memcpy(&s, &pubkey->data[0], 64);
   392f4:	e0bfff17 	ldw	r2,-4(fp)
   392f8:	01801004 	movi	r6,64
   392fc:	100b883a 	mov	r5,r2
   39300:	e13fed04 	addi	r4,fp,-76
   39304:	0045c980 	call	45c98 <memcpy>
        secp256k1_ge_from_storage(ge, &s);
   39308:	e17fed04 	addi	r5,fp,-76
   3930c:	e13ffe17 	ldw	r4,-8(fp)
   39310:	00230c00 	call	230c0 <secp256k1_ge_from_storage>
        secp256k1_fe x, y;
        secp256k1_fe_set_b32(&x, pubkey->data);
        secp256k1_fe_set_b32(&y, pubkey->data + 32);
        secp256k1_ge_set_xy(ge, &x, &y);
    }
    ARG_CHECK(!secp256k1_fe_is_zero(&ge->x));
   39314:	e0bffe17 	ldw	r2,-8(fp)
   39318:	1009883a 	mov	r4,r2
   3931c:	00136ac0 	call	136ac <secp256k1_fe_is_zero>
   39320:	1004c03a 	cmpne	r2,r2,zero
   39324:	10803fcc 	andi	r2,r2,255
   39328:	10000826 	beq	r2,zero,3934c <secp256k1_pubkey_load+0x74>
   3932c:	e0bffd17 	ldw	r2,-12(fp)
   39330:	10802f04 	addi	r2,r2,188
   39334:	014001b4 	movhi	r5,6
   39338:	2971e604 	addi	r5,r5,-14440
   3933c:	1009883a 	mov	r4,r2
   39340:	000c15c0 	call	c15c <secp256k1_callback_call>
   39344:	0005883a 	mov	r2,zero
   39348:	00000106 	br	39350 <secp256k1_pubkey_load+0x78>
    return 1;
   3934c:	00800044 	movi	r2,1
}
   39350:	e037883a 	mov	sp,fp
   39354:	dfc00117 	ldw	ra,4(sp)
   39358:	df000017 	ldw	fp,0(sp)
   3935c:	dec00204 	addi	sp,sp,8
   39360:	f800283a 	ret

00039364 <secp256k1_pubkey_save>:

static void secp256k1_pubkey_save(secp256k1_pubkey* pubkey, secp256k1_ge* ge) {
   39364:	deffec04 	addi	sp,sp,-80
   39368:	dfc01315 	stw	ra,76(sp)
   3936c:	df001215 	stw	fp,72(sp)
   39370:	df001204 	addi	fp,sp,72
   39374:	e13ffe15 	stw	r4,-8(fp)
   39378:	e17fff15 	stw	r5,-4(fp)
    if (sizeof(secp256k1_ge_storage) == 64) {
        secp256k1_ge_storage s;
        secp256k1_ge_to_storage(&s, ge);
   3937c:	e17fff17 	ldw	r5,-4(fp)
   39380:	e13fee04 	addi	r4,fp,-72
   39384:	0022f440 	call	22f44 <secp256k1_ge_to_storage>
        memcpy(&pubkey->data[0], &s, 64);
   39388:	e0bffe17 	ldw	r2,-8(fp)
   3938c:	01801004 	movi	r6,64
   39390:	e17fee04 	addi	r5,fp,-72
   39394:	1009883a 	mov	r4,r2
   39398:	0045c980 	call	45c98 <memcpy>
        secp256k1_fe_normalize_var(&ge->x);
        secp256k1_fe_normalize_var(&ge->y);
        secp256k1_fe_get_b32(pubkey->data, &ge->x);
        secp256k1_fe_get_b32(pubkey->data + 32, &ge->y);
    }
}
   3939c:	0001883a 	nop
   393a0:	e037883a 	mov	sp,fp
   393a4:	dfc00117 	ldw	ra,4(sp)
   393a8:	df000017 	ldw	fp,0(sp)
   393ac:	dec00204 	addi	sp,sp,8
   393b0:	f800283a 	ret

000393b4 <secp256k1_ec_pubkey_parse>:

int secp256k1_ec_pubkey_parse(const secp256k1_context* ctx, secp256k1_pubkey* pubkey, const unsigned char *input, size_t inputlen) {
   393b4:	deffe004 	addi	sp,sp,-128
   393b8:	dfc01f15 	stw	ra,124(sp)
   393bc:	df001e15 	stw	fp,120(sp)
   393c0:	df001e04 	addi	fp,sp,120
   393c4:	e13ffc15 	stw	r4,-16(fp)
   393c8:	e17ffd15 	stw	r5,-12(fp)
   393cc:	e1bffe15 	stw	r6,-8(fp)
   393d0:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_ge Q;

    VERIFY_CHECK(ctx != NULL);
   393d4:	e0bffc17 	ldw	r2,-16(fp)
   393d8:	1005003a 	cmpeq	r2,r2,zero
   393dc:	10803fcc 	andi	r2,r2,255
   393e0:	10000d26 	beq	r2,zero,39418 <secp256k1_ec_pubkey_parse+0x64>
   393e4:	d0a01617 	ldw	r2,-32680(gp)
   393e8:	10c00317 	ldw	r3,12(r2)
   393ec:	008001b4 	movhi	r2,6
   393f0:	10b1f704 	addi	r2,r2,-14372
   393f4:	d8800015 	stw	r2,0(sp)
   393f8:	01c02644 	movi	r7,153
   393fc:	018001b4 	movhi	r6,6
   39400:	31b1ee04 	addi	r6,r6,-14408
   39404:	014001b4 	movhi	r5,6
   39408:	296b3804 	addi	r5,r5,-21280
   3940c:	1809883a 	mov	r4,r3
   39410:	00452600 	call	45260 <fprintf>
   39414:	00450340 	call	45034 <abort>
    ARG_CHECK(pubkey != NULL);
   39418:	e0bffd17 	ldw	r2,-12(fp)
   3941c:	1005003a 	cmpeq	r2,r2,zero
   39420:	10803fcc 	andi	r2,r2,255
   39424:	10000826 	beq	r2,zero,39448 <secp256k1_ec_pubkey_parse+0x94>
   39428:	e0bffc17 	ldw	r2,-16(fp)
   3942c:	10802f04 	addi	r2,r2,188
   39430:	014001b4 	movhi	r5,6
   39434:	29720004 	addi	r5,r5,-14336
   39438:	1009883a 	mov	r4,r2
   3943c:	000c15c0 	call	c15c <secp256k1_callback_call>
   39440:	0005883a 	mov	r2,zero
   39444:	00001d06 	br	394bc <secp256k1_ec_pubkey_parse+0x108>
    memset(pubkey, 0, sizeof(*pubkey));
   39448:	01801004 	movi	r6,64
   3944c:	000b883a 	mov	r5,zero
   39450:	e13ffd17 	ldw	r4,-12(fp)
   39454:	0045f3c0 	call	45f3c <memset>
    ARG_CHECK(input != NULL);
   39458:	e0bffe17 	ldw	r2,-8(fp)
   3945c:	1005003a 	cmpeq	r2,r2,zero
   39460:	10803fcc 	andi	r2,r2,255
   39464:	10000826 	beq	r2,zero,39488 <secp256k1_ec_pubkey_parse+0xd4>
   39468:	e0bffc17 	ldw	r2,-16(fp)
   3946c:	10802f04 	addi	r2,r2,188
   39470:	014001b4 	movhi	r5,6
   39474:	29720404 	addi	r5,r5,-14320
   39478:	1009883a 	mov	r4,r2
   3947c:	000c15c0 	call	c15c <secp256k1_callback_call>
   39480:	0005883a 	mov	r2,zero
   39484:	00000d06 	br	394bc <secp256k1_ec_pubkey_parse+0x108>
    if (!secp256k1_eckey_pubkey_parse(&Q, input, inputlen)) {
   39488:	e1bfff17 	ldw	r6,-4(fp)
   3948c:	e17ffe17 	ldw	r5,-8(fp)
   39490:	e13fe304 	addi	r4,fp,-116
   39494:	0038b200 	call	38b20 <secp256k1_eckey_pubkey_parse>
   39498:	1000021e 	bne	r2,zero,394a4 <secp256k1_ec_pubkey_parse+0xf0>
        return 0;
   3949c:	0005883a 	mov	r2,zero
   394a0:	00000606 	br	394bc <secp256k1_ec_pubkey_parse+0x108>
    }
    secp256k1_pubkey_save(pubkey, &Q);
   394a4:	e17fe304 	addi	r5,fp,-116
   394a8:	e13ffd17 	ldw	r4,-12(fp)
   394ac:	00393640 	call	39364 <secp256k1_pubkey_save>
    secp256k1_ge_clear(&Q);
   394b0:	e13fe304 	addi	r4,fp,-116
   394b4:	0020cd80 	call	20cd8 <secp256k1_ge_clear>
    return 1;
   394b8:	00800044 	movi	r2,1
}
   394bc:	e037883a 	mov	sp,fp
   394c0:	dfc00117 	ldw	ra,4(sp)
   394c4:	df000017 	ldw	fp,0(sp)
   394c8:	dec00204 	addi	sp,sp,8
   394cc:	f800283a 	ret

000394d0 <secp256k1_ec_pubkey_serialize>:

int secp256k1_ec_pubkey_serialize(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_pubkey* pubkey, unsigned int flags) {
   394d0:	deffde04 	addi	sp,sp,-136
   394d4:	dfc02115 	stw	ra,132(sp)
   394d8:	df002015 	stw	fp,128(sp)
   394dc:	df002004 	addi	fp,sp,128
   394e0:	e13ffc15 	stw	r4,-16(fp)
   394e4:	e17ffd15 	stw	r5,-12(fp)
   394e8:	e1bffe15 	stw	r6,-8(fp)
   394ec:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_ge Q;
    size_t len;
    int ret = 0;
   394f0:	e03fe115 	stw	zero,-124(fp)

    VERIFY_CHECK(ctx != NULL);
   394f4:	e0bffc17 	ldw	r2,-16(fp)
   394f8:	1005003a 	cmpeq	r2,r2,zero
   394fc:	10803fcc 	andi	r2,r2,255
   39500:	10000d26 	beq	r2,zero,39538 <secp256k1_ec_pubkey_serialize+0x68>
   39504:	d0a01617 	ldw	r2,-32680(gp)
   39508:	10c00317 	ldw	r3,12(r2)
   3950c:	008001b4 	movhi	r2,6
   39510:	10b1f704 	addi	r2,r2,-14372
   39514:	d8800015 	stw	r2,0(sp)
   39518:	01c02a84 	movi	r7,170
   3951c:	018001b4 	movhi	r6,6
   39520:	31b1ee04 	addi	r6,r6,-14408
   39524:	014001b4 	movhi	r5,6
   39528:	296b3804 	addi	r5,r5,-21280
   3952c:	1809883a 	mov	r4,r3
   39530:	00452600 	call	45260 <fprintf>
   39534:	00450340 	call	45034 <abort>
    ARG_CHECK(outputlen != NULL);
   39538:	e0bffe17 	ldw	r2,-8(fp)
   3953c:	1005003a 	cmpeq	r2,r2,zero
   39540:	10803fcc 	andi	r2,r2,255
   39544:	10000826 	beq	r2,zero,39568 <secp256k1_ec_pubkey_serialize+0x98>
   39548:	e0bffc17 	ldw	r2,-16(fp)
   3954c:	10802f04 	addi	r2,r2,188
   39550:	014001b4 	movhi	r5,6
   39554:	29720804 	addi	r5,r5,-14304
   39558:	1009883a 	mov	r4,r2
   3955c:	000c15c0 	call	c15c <secp256k1_callback_call>
   39560:	0005883a 	mov	r2,zero
   39564:	00005806 	br	396c8 <secp256k1_ec_pubkey_serialize+0x1f8>
    ARG_CHECK(*outputlen >= ((flags & SECP256K1_FLAGS_BIT_COMPRESSION) ? 33 : 65));
   39568:	e0bffe17 	ldw	r2,-8(fp)
   3956c:	10c00017 	ldw	r3,0(r2)
   39570:	e0800217 	ldw	r2,8(fp)
   39574:	1080400c 	andi	r2,r2,256
   39578:	10000226 	beq	r2,zero,39584 <secp256k1_ec_pubkey_serialize+0xb4>
   3957c:	00800844 	movi	r2,33
   39580:	00000106 	br	39588 <secp256k1_ec_pubkey_serialize+0xb8>
   39584:	00801044 	movi	r2,65
   39588:	1885803a 	cmpltu	r2,r3,r2
   3958c:	10803fcc 	andi	r2,r2,255
   39590:	10000826 	beq	r2,zero,395b4 <secp256k1_ec_pubkey_serialize+0xe4>
   39594:	e0bffc17 	ldw	r2,-16(fp)
   39598:	10802f04 	addi	r2,r2,188
   3959c:	014001b4 	movhi	r5,6
   395a0:	29720d04 	addi	r5,r5,-14284
   395a4:	1009883a 	mov	r4,r2
   395a8:	000c15c0 	call	c15c <secp256k1_callback_call>
   395ac:	0005883a 	mov	r2,zero
   395b0:	00004506 	br	396c8 <secp256k1_ec_pubkey_serialize+0x1f8>
    len = *outputlen;
   395b4:	e0bffe17 	ldw	r2,-8(fp)
   395b8:	10800017 	ldw	r2,0(r2)
   395bc:	e0bffb15 	stw	r2,-20(fp)
    *outputlen = 0;
   395c0:	e0bffe17 	ldw	r2,-8(fp)
   395c4:	10000015 	stw	zero,0(r2)
    ARG_CHECK(output != NULL);
   395c8:	e0bffd17 	ldw	r2,-12(fp)
   395cc:	1005003a 	cmpeq	r2,r2,zero
   395d0:	10803fcc 	andi	r2,r2,255
   395d4:	10000826 	beq	r2,zero,395f8 <secp256k1_ec_pubkey_serialize+0x128>
   395d8:	e0bffc17 	ldw	r2,-16(fp)
   395dc:	10802f04 	addi	r2,r2,188
   395e0:	014001b4 	movhi	r5,6
   395e4:	29721e04 	addi	r5,r5,-14216
   395e8:	1009883a 	mov	r4,r2
   395ec:	000c15c0 	call	c15c <secp256k1_callback_call>
   395f0:	0005883a 	mov	r2,zero
   395f4:	00003406 	br	396c8 <secp256k1_ec_pubkey_serialize+0x1f8>
    memset(output, 0, len);
   395f8:	e0bffb17 	ldw	r2,-20(fp)
   395fc:	100d883a 	mov	r6,r2
   39600:	000b883a 	mov	r5,zero
   39604:	e13ffd17 	ldw	r4,-12(fp)
   39608:	0045f3c0 	call	45f3c <memset>
    ARG_CHECK(pubkey != NULL);
   3960c:	e0bfff17 	ldw	r2,-4(fp)
   39610:	1005003a 	cmpeq	r2,r2,zero
   39614:	10803fcc 	andi	r2,r2,255
   39618:	10000826 	beq	r2,zero,3963c <secp256k1_ec_pubkey_serialize+0x16c>
   3961c:	e0bffc17 	ldw	r2,-16(fp)
   39620:	10802f04 	addi	r2,r2,188
   39624:	014001b4 	movhi	r5,6
   39628:	29720004 	addi	r5,r5,-14336
   3962c:	1009883a 	mov	r4,r2
   39630:	000c15c0 	call	c15c <secp256k1_callback_call>
   39634:	0005883a 	mov	r2,zero
   39638:	00002306 	br	396c8 <secp256k1_ec_pubkey_serialize+0x1f8>
    ARG_CHECK((flags & SECP256K1_FLAGS_TYPE_MASK) == SECP256K1_FLAGS_TYPE_COMPRESSION);
   3963c:	e0800217 	ldw	r2,8(fp)
   39640:	10803fcc 	andi	r2,r2,255
   39644:	10800098 	cmpnei	r2,r2,2
   39648:	10803fcc 	andi	r2,r2,255
   3964c:	10000826 	beq	r2,zero,39670 <secp256k1_ec_pubkey_serialize+0x1a0>
   39650:	e0bffc17 	ldw	r2,-16(fp)
   39654:	10802f04 	addi	r2,r2,188
   39658:	014001b4 	movhi	r5,6
   3965c:	29722204 	addi	r5,r5,-14200
   39660:	1009883a 	mov	r4,r2
   39664:	000c15c0 	call	c15c <secp256k1_callback_call>
   39668:	0005883a 	mov	r2,zero
   3966c:	00001606 	br	396c8 <secp256k1_ec_pubkey_serialize+0x1f8>
    if (secp256k1_pubkey_load(ctx, &Q, pubkey)) {
   39670:	e0bfe204 	addi	r2,fp,-120
   39674:	e1bfff17 	ldw	r6,-4(fp)
   39678:	100b883a 	mov	r5,r2
   3967c:	e13ffc17 	ldw	r4,-16(fp)
   39680:	00392d80 	call	392d8 <secp256k1_pubkey_load>
   39684:	10000f26 	beq	r2,zero,396c4 <secp256k1_ec_pubkey_serialize+0x1f4>
        ret = secp256k1_eckey_pubkey_serialize(&Q, output, &len, flags & SECP256K1_FLAGS_BIT_COMPRESSION);
   39688:	e0800217 	ldw	r2,8(fp)
   3968c:	1100400c 	andi	r4,r2,256
   39690:	e0fffb04 	addi	r3,fp,-20
   39694:	e0bfe204 	addi	r2,fp,-120
   39698:	200f883a 	mov	r7,r4
   3969c:	180d883a 	mov	r6,r3
   396a0:	e17ffd17 	ldw	r5,-12(fp)
   396a4:	1009883a 	mov	r4,r2
   396a8:	0038cd00 	call	38cd0 <secp256k1_eckey_pubkey_serialize>
   396ac:	e0bfe115 	stw	r2,-124(fp)
        if (ret) {
   396b0:	e0bfe117 	ldw	r2,-124(fp)
   396b4:	10000326 	beq	r2,zero,396c4 <secp256k1_ec_pubkey_serialize+0x1f4>
            *outputlen = len;
   396b8:	e0fffb17 	ldw	r3,-20(fp)
   396bc:	e0bffe17 	ldw	r2,-8(fp)
   396c0:	10c00015 	stw	r3,0(r2)
        }
    }
    return ret;
   396c4:	e0bfe117 	ldw	r2,-124(fp)
}
   396c8:	e037883a 	mov	sp,fp
   396cc:	dfc00117 	ldw	ra,4(sp)
   396d0:	df000017 	ldw	fp,0(sp)
   396d4:	dec00204 	addi	sp,sp,8
   396d8:	f800283a 	ret

000396dc <secp256k1_ecdsa_signature_load>:

static void secp256k1_ecdsa_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_ecdsa_signature* sig) {
   396dc:	defffa04 	addi	sp,sp,-24
   396e0:	dfc00515 	stw	ra,20(sp)
   396e4:	df000415 	stw	fp,16(sp)
   396e8:	df000404 	addi	fp,sp,16
   396ec:	e13ffc15 	stw	r4,-16(fp)
   396f0:	e17ffd15 	stw	r5,-12(fp)
   396f4:	e1bffe15 	stw	r6,-8(fp)
   396f8:	e1ffff15 	stw	r7,-4(fp)
    (void)ctx;
    if (sizeof(secp256k1_scalar) == 32) {
        /* When the secp256k1_scalar type is exactly 32 byte, use its
         * representation inside secp256k1_ecdsa_signature, as conversion is very fast.
         * Note that secp256k1_ecdsa_signature_save must use the same representation. */
        memcpy(r, &sig->data[0], 32);
   396fc:	e0bfff17 	ldw	r2,-4(fp)
   39700:	01800804 	movi	r6,32
   39704:	100b883a 	mov	r5,r2
   39708:	e13ffd17 	ldw	r4,-12(fp)
   3970c:	0045c980 	call	45c98 <memcpy>
        memcpy(s, &sig->data[32], 32);
   39710:	e0bfff17 	ldw	r2,-4(fp)
   39714:	10800804 	addi	r2,r2,32
   39718:	01800804 	movi	r6,32
   3971c:	100b883a 	mov	r5,r2
   39720:	e13ffe17 	ldw	r4,-8(fp)
   39724:	0045c980 	call	45c98 <memcpy>
    } else {
        secp256k1_scalar_set_b32(r, &sig->data[0], NULL);
        secp256k1_scalar_set_b32(s, &sig->data[32], NULL);
    }
}
   39728:	0001883a 	nop
   3972c:	e037883a 	mov	sp,fp
   39730:	dfc00117 	ldw	ra,4(sp)
   39734:	df000017 	ldw	fp,0(sp)
   39738:	dec00204 	addi	sp,sp,8
   3973c:	f800283a 	ret

00039740 <secp256k1_ecdsa_signature_save>:

static void secp256k1_ecdsa_signature_save(secp256k1_ecdsa_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s) {
   39740:	defffb04 	addi	sp,sp,-20
   39744:	dfc00415 	stw	ra,16(sp)
   39748:	df000315 	stw	fp,12(sp)
   3974c:	df000304 	addi	fp,sp,12
   39750:	e13ffd15 	stw	r4,-12(fp)
   39754:	e17ffe15 	stw	r5,-8(fp)
   39758:	e1bfff15 	stw	r6,-4(fp)
    if (sizeof(secp256k1_scalar) == 32) {
        memcpy(&sig->data[0], r, 32);
   3975c:	e0bffd17 	ldw	r2,-12(fp)
   39760:	01800804 	movi	r6,32
   39764:	e17ffe17 	ldw	r5,-8(fp)
   39768:	1009883a 	mov	r4,r2
   3976c:	0045c980 	call	45c98 <memcpy>
        memcpy(&sig->data[32], s, 32);
   39770:	e0bffd17 	ldw	r2,-12(fp)
   39774:	10800804 	addi	r2,r2,32
   39778:	01800804 	movi	r6,32
   3977c:	e17fff17 	ldw	r5,-4(fp)
   39780:	1009883a 	mov	r4,r2
   39784:	0045c980 	call	45c98 <memcpy>
    } else {
        secp256k1_scalar_get_b32(&sig->data[0], r);
        secp256k1_scalar_get_b32(&sig->data[32], s);
    }
}
   39788:	0001883a 	nop
   3978c:	e037883a 	mov	sp,fp
   39790:	dfc00117 	ldw	ra,4(sp)
   39794:	df000017 	ldw	fp,0(sp)
   39798:	dec00204 	addi	sp,sp,8
   3979c:	f800283a 	ret

000397a0 <secp256k1_ecdsa_signature_parse_der>:

int secp256k1_ecdsa_signature_parse_der(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {
   397a0:	deffe904 	addi	sp,sp,-92
   397a4:	dfc01615 	stw	ra,88(sp)
   397a8:	df001515 	stw	fp,84(sp)
   397ac:	df001504 	addi	fp,sp,84
   397b0:	e13ffc15 	stw	r4,-16(fp)
   397b4:	e17ffd15 	stw	r5,-12(fp)
   397b8:	e1bffe15 	stw	r6,-8(fp)
   397bc:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;

    VERIFY_CHECK(ctx != NULL);
   397c0:	e0bffc17 	ldw	r2,-16(fp)
   397c4:	1005003a 	cmpeq	r2,r2,zero
   397c8:	10803fcc 	andi	r2,r2,255
   397cc:	10000d26 	beq	r2,zero,39804 <secp256k1_ecdsa_signature_parse_der+0x64>
   397d0:	d0a01617 	ldw	r2,-32680(gp)
   397d4:	10c00317 	ldw	r3,12(r2)
   397d8:	008001b4 	movhi	r2,6
   397dc:	10b1f704 	addi	r2,r2,-14372
   397e0:	d8800015 	stw	r2,0(sp)
   397e4:	01c035c4 	movi	r7,215
   397e8:	018001b4 	movhi	r6,6
   397ec:	31b1ee04 	addi	r6,r6,-14408
   397f0:	014001b4 	movhi	r5,6
   397f4:	296b3804 	addi	r5,r5,-21280
   397f8:	1809883a 	mov	r4,r3
   397fc:	00452600 	call	45260 <fprintf>
   39800:	00450340 	call	45034 <abort>
    ARG_CHECK(sig != NULL);
   39804:	e0bffd17 	ldw	r2,-12(fp)
   39808:	1005003a 	cmpeq	r2,r2,zero
   3980c:	10803fcc 	andi	r2,r2,255
   39810:	10000826 	beq	r2,zero,39834 <secp256k1_ecdsa_signature_parse_der+0x94>
   39814:	e0bffc17 	ldw	r2,-16(fp)
   39818:	10802f04 	addi	r2,r2,188
   3981c:	014001b4 	movhi	r5,6
   39820:	29723404 	addi	r5,r5,-14128
   39824:	1009883a 	mov	r4,r2
   39828:	000c15c0 	call	c15c <secp256k1_callback_call>
   3982c:	0005883a 	mov	r2,zero
   39830:	00001f06 	br	398b0 <secp256k1_ecdsa_signature_parse_der+0x110>
    ARG_CHECK(input != NULL);
   39834:	e0bffe17 	ldw	r2,-8(fp)
   39838:	1005003a 	cmpeq	r2,r2,zero
   3983c:	10803fcc 	andi	r2,r2,255
   39840:	10000826 	beq	r2,zero,39864 <secp256k1_ecdsa_signature_parse_der+0xc4>
   39844:	e0bffc17 	ldw	r2,-16(fp)
   39848:	10802f04 	addi	r2,r2,188
   3984c:	014001b4 	movhi	r5,6
   39850:	29720404 	addi	r5,r5,-14320
   39854:	1009883a 	mov	r4,r2
   39858:	000c15c0 	call	c15c <secp256k1_callback_call>
   3985c:	0005883a 	mov	r2,zero
   39860:	00001306 	br	398b0 <secp256k1_ecdsa_signature_parse_der+0x110>

    if (secp256k1_ecdsa_sig_parse(&r, &s, input, inputlen)) {
   39864:	e0bff404 	addi	r2,fp,-48
   39868:	e1ffff17 	ldw	r7,-4(fp)
   3986c:	e1bffe17 	ldw	r6,-8(fp)
   39870:	100b883a 	mov	r5,r2
   39874:	e13fec04 	addi	r4,fp,-80
   39878:	003844c0 	call	3844c <secp256k1_ecdsa_sig_parse>
   3987c:	10000726 	beq	r2,zero,3989c <secp256k1_ecdsa_signature_parse_der+0xfc>
        secp256k1_ecdsa_signature_save(sig, &r, &s);
   39880:	e0bff404 	addi	r2,fp,-48
   39884:	100d883a 	mov	r6,r2
   39888:	e17fec04 	addi	r5,fp,-80
   3988c:	e13ffd17 	ldw	r4,-12(fp)
   39890:	00397400 	call	39740 <secp256k1_ecdsa_signature_save>
        return 1;
   39894:	00800044 	movi	r2,1
   39898:	00000506 	br	398b0 <secp256k1_ecdsa_signature_parse_der+0x110>
    } else {
        memset(sig, 0, sizeof(*sig));
   3989c:	01801004 	movi	r6,64
   398a0:	000b883a 	mov	r5,zero
   398a4:	e13ffd17 	ldw	r4,-12(fp)
   398a8:	0045f3c0 	call	45f3c <memset>
        return 0;
   398ac:	0005883a 	mov	r2,zero
    }
}
   398b0:	e037883a 	mov	sp,fp
   398b4:	dfc00117 	ldw	ra,4(sp)
   398b8:	df000017 	ldw	fp,0(sp)
   398bc:	dec00204 	addi	sp,sp,8
   398c0:	f800283a 	ret

000398c4 <secp256k1_ecdsa_signature_parse_compact>:

int secp256k1_ecdsa_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input64) {
   398c4:	deffe804 	addi	sp,sp,-96
   398c8:	dfc01715 	stw	ra,92(sp)
   398cc:	df001615 	stw	fp,88(sp)
   398d0:	df001604 	addi	fp,sp,88
   398d4:	e13ffd15 	stw	r4,-12(fp)
   398d8:	e17ffe15 	stw	r5,-8(fp)
   398dc:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar r, s;
    int ret = 1;
   398e0:	00800044 	movi	r2,1
   398e4:	e0bfeb15 	stw	r2,-84(fp)
    int overflow = 0;
   398e8:	e03ffc15 	stw	zero,-16(fp)

    VERIFY_CHECK(ctx != NULL);
   398ec:	e0bffd17 	ldw	r2,-12(fp)
   398f0:	1005003a 	cmpeq	r2,r2,zero
   398f4:	10803fcc 	andi	r2,r2,255
   398f8:	10000d26 	beq	r2,zero,39930 <secp256k1_ecdsa_signature_parse_compact+0x6c>
   398fc:	d0a01617 	ldw	r2,-32680(gp)
   39900:	10c00317 	ldw	r3,12(r2)
   39904:	008001b4 	movhi	r2,6
   39908:	10b1f704 	addi	r2,r2,-14372
   3990c:	d8800015 	stw	r2,0(sp)
   39910:	01c03a44 	movi	r7,233
   39914:	018001b4 	movhi	r6,6
   39918:	31b1ee04 	addi	r6,r6,-14408
   3991c:	014001b4 	movhi	r5,6
   39920:	296b3804 	addi	r5,r5,-21280
   39924:	1809883a 	mov	r4,r3
   39928:	00452600 	call	45260 <fprintf>
   3992c:	00450340 	call	45034 <abort>
    ARG_CHECK(sig != NULL);
   39930:	e0bffe17 	ldw	r2,-8(fp)
   39934:	1005003a 	cmpeq	r2,r2,zero
   39938:	10803fcc 	andi	r2,r2,255
   3993c:	10000826 	beq	r2,zero,39960 <secp256k1_ecdsa_signature_parse_compact+0x9c>
   39940:	e0bffd17 	ldw	r2,-12(fp)
   39944:	10802f04 	addi	r2,r2,188
   39948:	014001b4 	movhi	r5,6
   3994c:	29723404 	addi	r5,r5,-14128
   39950:	1009883a 	mov	r4,r2
   39954:	000c15c0 	call	c15c <secp256k1_callback_call>
   39958:	0005883a 	mov	r2,zero
   3995c:	00003406 	br	39a30 <secp256k1_ecdsa_signature_parse_compact+0x16c>
    ARG_CHECK(input64 != NULL);
   39960:	e0bfff17 	ldw	r2,-4(fp)
   39964:	1005003a 	cmpeq	r2,r2,zero
   39968:	10803fcc 	andi	r2,r2,255
   3996c:	10000826 	beq	r2,zero,39990 <secp256k1_ecdsa_signature_parse_compact+0xcc>
   39970:	e0bffd17 	ldw	r2,-12(fp)
   39974:	10802f04 	addi	r2,r2,188
   39978:	014001b4 	movhi	r5,6
   3997c:	29723704 	addi	r5,r5,-14116
   39980:	1009883a 	mov	r4,r2
   39984:	000c15c0 	call	c15c <secp256k1_callback_call>
   39988:	0005883a 	mov	r2,zero
   3998c:	00002806 	br	39a30 <secp256k1_ecdsa_signature_parse_compact+0x16c>

    secp256k1_scalar_set_b32(&r, &input64[0], &overflow);
   39990:	e0fffc04 	addi	r3,fp,-16
   39994:	e0bfec04 	addi	r2,fp,-80
   39998:	180d883a 	mov	r6,r3
   3999c:	e17fff17 	ldw	r5,-4(fp)
   399a0:	1009883a 	mov	r4,r2
   399a4:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    ret &= !overflow;
   399a8:	e0bffc17 	ldw	r2,-16(fp)
   399ac:	1005003a 	cmpeq	r2,r2,zero
   399b0:	10803fcc 	andi	r2,r2,255
   399b4:	e0ffeb17 	ldw	r3,-84(fp)
   399b8:	1884703a 	and	r2,r3,r2
   399bc:	e0bfeb15 	stw	r2,-84(fp)
    secp256k1_scalar_set_b32(&s, &input64[32], &overflow);
   399c0:	e0bfff17 	ldw	r2,-4(fp)
   399c4:	10c00804 	addi	r3,r2,32
   399c8:	e13ffc04 	addi	r4,fp,-16
   399cc:	e0bff404 	addi	r2,fp,-48
   399d0:	200d883a 	mov	r6,r4
   399d4:	180b883a 	mov	r5,r3
   399d8:	1009883a 	mov	r4,r2
   399dc:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    ret &= !overflow;
   399e0:	e0bffc17 	ldw	r2,-16(fp)
   399e4:	1005003a 	cmpeq	r2,r2,zero
   399e8:	10803fcc 	andi	r2,r2,255
   399ec:	e0ffeb17 	ldw	r3,-84(fp)
   399f0:	1884703a 	and	r2,r3,r2
   399f4:	e0bfeb15 	stw	r2,-84(fp)
    if (ret) {
   399f8:	e0bfeb17 	ldw	r2,-84(fp)
   399fc:	10000726 	beq	r2,zero,39a1c <secp256k1_ecdsa_signature_parse_compact+0x158>
        secp256k1_ecdsa_signature_save(sig, &r, &s);
   39a00:	e0fff404 	addi	r3,fp,-48
   39a04:	e0bfec04 	addi	r2,fp,-80
   39a08:	180d883a 	mov	r6,r3
   39a0c:	100b883a 	mov	r5,r2
   39a10:	e13ffe17 	ldw	r4,-8(fp)
   39a14:	00397400 	call	39740 <secp256k1_ecdsa_signature_save>
   39a18:	00000406 	br	39a2c <secp256k1_ecdsa_signature_parse_compact+0x168>
    } else {
        memset(sig, 0, sizeof(*sig));
   39a1c:	01801004 	movi	r6,64
   39a20:	000b883a 	mov	r5,zero
   39a24:	e13ffe17 	ldw	r4,-8(fp)
   39a28:	0045f3c0 	call	45f3c <memset>
    }
    return ret;
   39a2c:	e0bfeb17 	ldw	r2,-84(fp)
}
   39a30:	e037883a 	mov	sp,fp
   39a34:	dfc00117 	ldw	ra,4(sp)
   39a38:	df000017 	ldw	fp,0(sp)
   39a3c:	dec00204 	addi	sp,sp,8
   39a40:	f800283a 	ret

00039a44 <secp256k1_ecdsa_signature_serialize_der>:

int secp256k1_ecdsa_signature_serialize_der(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_ecdsa_signature* sig) {
   39a44:	deffe904 	addi	sp,sp,-92
   39a48:	dfc01615 	stw	ra,88(sp)
   39a4c:	df001515 	stw	fp,84(sp)
   39a50:	df001504 	addi	fp,sp,84
   39a54:	e13ffc15 	stw	r4,-16(fp)
   39a58:	e17ffd15 	stw	r5,-12(fp)
   39a5c:	e1bffe15 	stw	r6,-8(fp)
   39a60:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;

    VERIFY_CHECK(ctx != NULL);
   39a64:	e0bffc17 	ldw	r2,-16(fp)
   39a68:	1005003a 	cmpeq	r2,r2,zero
   39a6c:	10803fcc 	andi	r2,r2,255
   39a70:	10000d26 	beq	r2,zero,39aa8 <secp256k1_ecdsa_signature_serialize_der+0x64>
   39a74:	d0a01617 	ldw	r2,-32680(gp)
   39a78:	10c00317 	ldw	r3,12(r2)
   39a7c:	008001b4 	movhi	r2,6
   39a80:	10b1f704 	addi	r2,r2,-14372
   39a84:	d8800015 	stw	r2,0(sp)
   39a88:	01c03f04 	movi	r7,252
   39a8c:	018001b4 	movhi	r6,6
   39a90:	31b1ee04 	addi	r6,r6,-14408
   39a94:	014001b4 	movhi	r5,6
   39a98:	296b3804 	addi	r5,r5,-21280
   39a9c:	1809883a 	mov	r4,r3
   39aa0:	00452600 	call	45260 <fprintf>
   39aa4:	00450340 	call	45034 <abort>
    ARG_CHECK(output != NULL);
   39aa8:	e0bffd17 	ldw	r2,-12(fp)
   39aac:	1005003a 	cmpeq	r2,r2,zero
   39ab0:	10803fcc 	andi	r2,r2,255
   39ab4:	10000826 	beq	r2,zero,39ad8 <secp256k1_ecdsa_signature_serialize_der+0x94>
   39ab8:	e0bffc17 	ldw	r2,-16(fp)
   39abc:	10802f04 	addi	r2,r2,188
   39ac0:	014001b4 	movhi	r5,6
   39ac4:	29721e04 	addi	r5,r5,-14216
   39ac8:	1009883a 	mov	r4,r2
   39acc:	000c15c0 	call	c15c <secp256k1_callback_call>
   39ad0:	0005883a 	mov	r2,zero
   39ad4:	00002406 	br	39b68 <secp256k1_ecdsa_signature_serialize_der+0x124>
    ARG_CHECK(outputlen != NULL);
   39ad8:	e0bffe17 	ldw	r2,-8(fp)
   39adc:	1005003a 	cmpeq	r2,r2,zero
   39ae0:	10803fcc 	andi	r2,r2,255
   39ae4:	10000826 	beq	r2,zero,39b08 <secp256k1_ecdsa_signature_serialize_der+0xc4>
   39ae8:	e0bffc17 	ldw	r2,-16(fp)
   39aec:	10802f04 	addi	r2,r2,188
   39af0:	014001b4 	movhi	r5,6
   39af4:	29720804 	addi	r5,r5,-14304
   39af8:	1009883a 	mov	r4,r2
   39afc:	000c15c0 	call	c15c <secp256k1_callback_call>
   39b00:	0005883a 	mov	r2,zero
   39b04:	00001806 	br	39b68 <secp256k1_ecdsa_signature_serialize_der+0x124>
    ARG_CHECK(sig != NULL);
   39b08:	e0bfff17 	ldw	r2,-4(fp)
   39b0c:	1005003a 	cmpeq	r2,r2,zero
   39b10:	10803fcc 	andi	r2,r2,255
   39b14:	10000826 	beq	r2,zero,39b38 <secp256k1_ecdsa_signature_serialize_der+0xf4>
   39b18:	e0bffc17 	ldw	r2,-16(fp)
   39b1c:	10802f04 	addi	r2,r2,188
   39b20:	014001b4 	movhi	r5,6
   39b24:	29723404 	addi	r5,r5,-14128
   39b28:	1009883a 	mov	r4,r2
   39b2c:	000c15c0 	call	c15c <secp256k1_callback_call>
   39b30:	0005883a 	mov	r2,zero
   39b34:	00000c06 	br	39b68 <secp256k1_ecdsa_signature_serialize_der+0x124>

    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
   39b38:	e0bff404 	addi	r2,fp,-48
   39b3c:	e1ffff17 	ldw	r7,-4(fp)
   39b40:	100d883a 	mov	r6,r2
   39b44:	e17fec04 	addi	r5,fp,-80
   39b48:	e13ffc17 	ldw	r4,-16(fp)
   39b4c:	00396dc0 	call	396dc <secp256k1_ecdsa_signature_load>
    return secp256k1_ecdsa_sig_serialize(output, outputlen, &r, &s);
   39b50:	e0bff404 	addi	r2,fp,-48
   39b54:	100f883a 	mov	r7,r2
   39b58:	e1bfec04 	addi	r6,fp,-80
   39b5c:	e17ffe17 	ldw	r5,-8(fp)
   39b60:	e13ffd17 	ldw	r4,-12(fp)
   39b64:	003856c0 	call	3856c <secp256k1_ecdsa_sig_serialize>
}
   39b68:	e037883a 	mov	sp,fp
   39b6c:	dfc00117 	ldw	ra,4(sp)
   39b70:	df000017 	ldw	fp,0(sp)
   39b74:	dec00204 	addi	sp,sp,8
   39b78:	f800283a 	ret

00039b7c <secp256k1_ecdsa_signature_serialize_compact>:

int secp256k1_ecdsa_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, const secp256k1_ecdsa_signature* sig) {
   39b7c:	deffea04 	addi	sp,sp,-88
   39b80:	dfc01515 	stw	ra,84(sp)
   39b84:	df001415 	stw	fp,80(sp)
   39b88:	df001404 	addi	fp,sp,80
   39b8c:	e13ffd15 	stw	r4,-12(fp)
   39b90:	e17ffe15 	stw	r5,-8(fp)
   39b94:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar r, s;

    VERIFY_CHECK(ctx != NULL);
   39b98:	e0bffd17 	ldw	r2,-12(fp)
   39b9c:	1005003a 	cmpeq	r2,r2,zero
   39ba0:	10803fcc 	andi	r2,r2,255
   39ba4:	10000d26 	beq	r2,zero,39bdc <secp256k1_ecdsa_signature_serialize_compact+0x60>
   39ba8:	d0a01617 	ldw	r2,-32680(gp)
   39bac:	10c00317 	ldw	r3,12(r2)
   39bb0:	008001b4 	movhi	r2,6
   39bb4:	10b1f704 	addi	r2,r2,-14372
   39bb8:	d8800015 	stw	r2,0(sp)
   39bbc:	01c04204 	movi	r7,264
   39bc0:	018001b4 	movhi	r6,6
   39bc4:	31b1ee04 	addi	r6,r6,-14408
   39bc8:	014001b4 	movhi	r5,6
   39bcc:	296b3804 	addi	r5,r5,-21280
   39bd0:	1809883a 	mov	r4,r3
   39bd4:	00452600 	call	45260 <fprintf>
   39bd8:	00450340 	call	45034 <abort>
    ARG_CHECK(output64 != NULL);
   39bdc:	e0bffe17 	ldw	r2,-8(fp)
   39be0:	1005003a 	cmpeq	r2,r2,zero
   39be4:	10803fcc 	andi	r2,r2,255
   39be8:	10000826 	beq	r2,zero,39c0c <secp256k1_ecdsa_signature_serialize_compact+0x90>
   39bec:	e0bffd17 	ldw	r2,-12(fp)
   39bf0:	10802f04 	addi	r2,r2,188
   39bf4:	014001b4 	movhi	r5,6
   39bf8:	29723b04 	addi	r5,r5,-14100
   39bfc:	1009883a 	mov	r4,r2
   39c00:	000c15c0 	call	c15c <secp256k1_callback_call>
   39c04:	0005883a 	mov	r2,zero
   39c08:	00001c06 	br	39c7c <secp256k1_ecdsa_signature_serialize_compact+0x100>
    ARG_CHECK(sig != NULL);
   39c0c:	e0bfff17 	ldw	r2,-4(fp)
   39c10:	1005003a 	cmpeq	r2,r2,zero
   39c14:	10803fcc 	andi	r2,r2,255
   39c18:	10000826 	beq	r2,zero,39c3c <secp256k1_ecdsa_signature_serialize_compact+0xc0>
   39c1c:	e0bffd17 	ldw	r2,-12(fp)
   39c20:	10802f04 	addi	r2,r2,188
   39c24:	014001b4 	movhi	r5,6
   39c28:	29723404 	addi	r5,r5,-14128
   39c2c:	1009883a 	mov	r4,r2
   39c30:	000c15c0 	call	c15c <secp256k1_callback_call>
   39c34:	0005883a 	mov	r2,zero
   39c38:	00001006 	br	39c7c <secp256k1_ecdsa_signature_serialize_compact+0x100>

    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
   39c3c:	e0bff504 	addi	r2,fp,-44
   39c40:	e1ffff17 	ldw	r7,-4(fp)
   39c44:	100d883a 	mov	r6,r2
   39c48:	e17fed04 	addi	r5,fp,-76
   39c4c:	e13ffd17 	ldw	r4,-12(fp)
   39c50:	00396dc0 	call	396dc <secp256k1_ecdsa_signature_load>
    secp256k1_scalar_get_b32(&output64[0], &r);
   39c54:	e17fed04 	addi	r5,fp,-76
   39c58:	e13ffe17 	ldw	r4,-8(fp)
   39c5c:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    secp256k1_scalar_get_b32(&output64[32], &s);
   39c60:	e0bffe17 	ldw	r2,-8(fp)
   39c64:	10800804 	addi	r2,r2,32
   39c68:	e0fff504 	addi	r3,fp,-44
   39c6c:	180b883a 	mov	r5,r3
   39c70:	1009883a 	mov	r4,r2
   39c74:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    return 1;
   39c78:	00800044 	movi	r2,1
}
   39c7c:	e037883a 	mov	sp,fp
   39c80:	dfc00117 	ldw	ra,4(sp)
   39c84:	df000017 	ldw	fp,0(sp)
   39c88:	dec00204 	addi	sp,sp,8
   39c8c:	f800283a 	ret

00039c90 <secp256k1_ecdsa_signature_normalize>:

int secp256k1_ecdsa_signature_normalize(const secp256k1_context* ctx, secp256k1_ecdsa_signature *sigout, const secp256k1_ecdsa_signature *sigin) {
   39c90:	deffe904 	addi	sp,sp,-92
   39c94:	dfc01615 	stw	ra,88(sp)
   39c98:	df001515 	stw	fp,84(sp)
   39c9c:	df001504 	addi	fp,sp,84
   39ca0:	e13ffd15 	stw	r4,-12(fp)
   39ca4:	e17ffe15 	stw	r5,-8(fp)
   39ca8:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar r, s;
    int ret = 0;
   39cac:	e03fec15 	stw	zero,-80(fp)

    VERIFY_CHECK(ctx != NULL);
   39cb0:	e0bffd17 	ldw	r2,-12(fp)
   39cb4:	1005003a 	cmpeq	r2,r2,zero
   39cb8:	10803fcc 	andi	r2,r2,255
   39cbc:	10000d26 	beq	r2,zero,39cf4 <secp256k1_ecdsa_signature_normalize+0x64>
   39cc0:	d0a01617 	ldw	r2,-32680(gp)
   39cc4:	10c00317 	ldw	r3,12(r2)
   39cc8:	008001b4 	movhi	r2,6
   39ccc:	10b1f704 	addi	r2,r2,-14372
   39cd0:	d8800015 	stw	r2,0(sp)
   39cd4:	01c04584 	movi	r7,278
   39cd8:	018001b4 	movhi	r6,6
   39cdc:	31b1ee04 	addi	r6,r6,-14408
   39ce0:	014001b4 	movhi	r5,6
   39ce4:	296b3804 	addi	r5,r5,-21280
   39ce8:	1809883a 	mov	r4,r3
   39cec:	00452600 	call	45260 <fprintf>
   39cf0:	00450340 	call	45034 <abort>
    ARG_CHECK(sigin != NULL);
   39cf4:	e0bfff17 	ldw	r2,-4(fp)
   39cf8:	1005003a 	cmpeq	r2,r2,zero
   39cfc:	10803fcc 	andi	r2,r2,255
   39d00:	10000826 	beq	r2,zero,39d24 <secp256k1_ecdsa_signature_normalize+0x94>
   39d04:	e0bffd17 	ldw	r2,-12(fp)
   39d08:	10802f04 	addi	r2,r2,188
   39d0c:	014001b4 	movhi	r5,6
   39d10:	29724004 	addi	r5,r5,-14080
   39d14:	1009883a 	mov	r4,r2
   39d18:	000c15c0 	call	c15c <secp256k1_callback_call>
   39d1c:	0005883a 	mov	r2,zero
   39d20:	00001b06 	br	39d90 <secp256k1_ecdsa_signature_normalize+0x100>

    secp256k1_ecdsa_signature_load(ctx, &r, &s, sigin);
   39d24:	e0fff504 	addi	r3,fp,-44
   39d28:	e0bfed04 	addi	r2,fp,-76
   39d2c:	e1ffff17 	ldw	r7,-4(fp)
   39d30:	180d883a 	mov	r6,r3
   39d34:	100b883a 	mov	r5,r2
   39d38:	e13ffd17 	ldw	r4,-12(fp)
   39d3c:	00396dc0 	call	396dc <secp256k1_ecdsa_signature_load>
    ret = secp256k1_scalar_is_high(&s);
   39d40:	e0bff504 	addi	r2,fp,-44
   39d44:	1009883a 	mov	r4,r2
   39d48:	00252900 	call	25290 <secp256k1_scalar_is_high>
   39d4c:	e0bfec15 	stw	r2,-80(fp)
    if (sigout != NULL) {
   39d50:	e0bffe17 	ldw	r2,-8(fp)
   39d54:	10000d26 	beq	r2,zero,39d8c <secp256k1_ecdsa_signature_normalize+0xfc>
        if (ret) {
   39d58:	e0bfec17 	ldw	r2,-80(fp)
   39d5c:	10000526 	beq	r2,zero,39d74 <secp256k1_ecdsa_signature_normalize+0xe4>
            secp256k1_scalar_negate(&s, &s);
   39d60:	e0fff504 	addi	r3,fp,-44
   39d64:	e0bff504 	addi	r2,fp,-44
   39d68:	180b883a 	mov	r5,r3
   39d6c:	1009883a 	mov	r4,r2
   39d70:	0024d740 	call	24d74 <secp256k1_scalar_negate>
        }
        secp256k1_ecdsa_signature_save(sigout, &r, &s);
   39d74:	e0fff504 	addi	r3,fp,-44
   39d78:	e0bfed04 	addi	r2,fp,-76
   39d7c:	180d883a 	mov	r6,r3
   39d80:	100b883a 	mov	r5,r2
   39d84:	e13ffe17 	ldw	r4,-8(fp)
   39d88:	00397400 	call	39740 <secp256k1_ecdsa_signature_save>
    }

    return ret;
   39d8c:	e0bfec17 	ldw	r2,-80(fp)
}
   39d90:	e037883a 	mov	sp,fp
   39d94:	dfc00117 	ldw	ra,4(sp)
   39d98:	df000017 	ldw	fp,0(sp)
   39d9c:	dec00204 	addi	sp,sp,8
   39da0:	f800283a 	ret

00039da4 <secp256k1_ecdsa_verify>:

int secp256k1_ecdsa_verify(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *msg32, const secp256k1_pubkey *pubkey) {
   39da4:	deffc804 	addi	sp,sp,-224
   39da8:	dfc03715 	stw	ra,220(sp)
   39dac:	df003615 	stw	fp,216(sp)
   39db0:	df003604 	addi	fp,sp,216
   39db4:	e13ffc15 	stw	r4,-16(fp)
   39db8:	e17ffd15 	stw	r5,-12(fp)
   39dbc:	e1bffe15 	stw	r6,-8(fp)
   39dc0:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_ge q;
    secp256k1_scalar r, s;
    secp256k1_scalar m;
    VERIFY_CHECK(ctx != NULL);
   39dc4:	e0bffc17 	ldw	r2,-16(fp)
   39dc8:	1005003a 	cmpeq	r2,r2,zero
   39dcc:	10803fcc 	andi	r2,r2,255
   39dd0:	10000d26 	beq	r2,zero,39e08 <secp256k1_ecdsa_verify+0x64>
   39dd4:	d0a01617 	ldw	r2,-32680(gp)
   39dd8:	10c00317 	ldw	r3,12(r2)
   39ddc:	008001b4 	movhi	r2,6
   39de0:	10b1f704 	addi	r2,r2,-14372
   39de4:	d8800015 	stw	r2,0(sp)
   39de8:	01c04a44 	movi	r7,297
   39dec:	018001b4 	movhi	r6,6
   39df0:	31b1ee04 	addi	r6,r6,-14408
   39df4:	014001b4 	movhi	r5,6
   39df8:	296b3804 	addi	r5,r5,-21280
   39dfc:	1809883a 	mov	r4,r3
   39e00:	00452600 	call	45260 <fprintf>
   39e04:	00450340 	call	45034 <abort>
    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));
   39e08:	e0bffc17 	ldw	r2,-16(fp)
   39e0c:	1009883a 	mov	r4,r2
   39e10:	0035ab40 	call	35ab4 <secp256k1_ecmult_context_is_built>
   39e14:	1005003a 	cmpeq	r2,r2,zero
   39e18:	10803fcc 	andi	r2,r2,255
   39e1c:	10000826 	beq	r2,zero,39e40 <secp256k1_ecdsa_verify+0x9c>
   39e20:	e0bffc17 	ldw	r2,-16(fp)
   39e24:	10802f04 	addi	r2,r2,188
   39e28:	014001b4 	movhi	r5,6
   39e2c:	29724404 	addi	r5,r5,-14064
   39e30:	1009883a 	mov	r4,r2
   39e34:	000c15c0 	call	c15c <secp256k1_callback_call>
   39e38:	0005883a 	mov	r2,zero
   39e3c:	00004806 	br	39f60 <secp256k1_ecdsa_verify+0x1bc>
    ARG_CHECK(msg32 != NULL);
   39e40:	e0bffe17 	ldw	r2,-8(fp)
   39e44:	1005003a 	cmpeq	r2,r2,zero
   39e48:	10803fcc 	andi	r2,r2,255
   39e4c:	10000826 	beq	r2,zero,39e70 <secp256k1_ecdsa_verify+0xcc>
   39e50:	e0bffc17 	ldw	r2,-16(fp)
   39e54:	10802f04 	addi	r2,r2,188
   39e58:	014001b4 	movhi	r5,6
   39e5c:	29725104 	addi	r5,r5,-14012
   39e60:	1009883a 	mov	r4,r2
   39e64:	000c15c0 	call	c15c <secp256k1_callback_call>
   39e68:	0005883a 	mov	r2,zero
   39e6c:	00003c06 	br	39f60 <secp256k1_ecdsa_verify+0x1bc>
    ARG_CHECK(sig != NULL);
   39e70:	e0bffd17 	ldw	r2,-12(fp)
   39e74:	1005003a 	cmpeq	r2,r2,zero
   39e78:	10803fcc 	andi	r2,r2,255
   39e7c:	10000826 	beq	r2,zero,39ea0 <secp256k1_ecdsa_verify+0xfc>
   39e80:	e0bffc17 	ldw	r2,-16(fp)
   39e84:	10802f04 	addi	r2,r2,188
   39e88:	014001b4 	movhi	r5,6
   39e8c:	29723404 	addi	r5,r5,-14128
   39e90:	1009883a 	mov	r4,r2
   39e94:	000c15c0 	call	c15c <secp256k1_callback_call>
   39e98:	0005883a 	mov	r2,zero
   39e9c:	00003006 	br	39f60 <secp256k1_ecdsa_verify+0x1bc>
    ARG_CHECK(pubkey != NULL);
   39ea0:	e0bfff17 	ldw	r2,-4(fp)
   39ea4:	1005003a 	cmpeq	r2,r2,zero
   39ea8:	10803fcc 	andi	r2,r2,255
   39eac:	10000826 	beq	r2,zero,39ed0 <secp256k1_ecdsa_verify+0x12c>
   39eb0:	e0bffc17 	ldw	r2,-16(fp)
   39eb4:	10802f04 	addi	r2,r2,188
   39eb8:	014001b4 	movhi	r5,6
   39ebc:	29720004 	addi	r5,r5,-14336
   39ec0:	1009883a 	mov	r4,r2
   39ec4:	000c15c0 	call	c15c <secp256k1_callback_call>
   39ec8:	0005883a 	mov	r2,zero
   39ecc:	00002406 	br	39f60 <secp256k1_ecdsa_verify+0x1bc>

    secp256k1_scalar_set_b32(&m, msg32, NULL);
   39ed0:	e0bff404 	addi	r2,fp,-48
   39ed4:	000d883a 	mov	r6,zero
   39ed8:	e17ffe17 	ldw	r5,-8(fp)
   39edc:	1009883a 	mov	r4,r2
   39ee0:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
   39ee4:	e0ffec04 	addi	r3,fp,-80
   39ee8:	e0bfe404 	addi	r2,fp,-112
   39eec:	e1fffd17 	ldw	r7,-12(fp)
   39ef0:	180d883a 	mov	r6,r3
   39ef4:	100b883a 	mov	r5,r2
   39ef8:	e13ffc17 	ldw	r4,-16(fp)
   39efc:	00396dc0 	call	396dc <secp256k1_ecdsa_signature_load>
    return (!secp256k1_scalar_is_high(&s) &&
   39f00:	e0bfec04 	addi	r2,fp,-80
   39f04:	1009883a 	mov	r4,r2
   39f08:	00252900 	call	25290 <secp256k1_scalar_is_high>
            secp256k1_pubkey_load(ctx, &q, pubkey) &&
   39f0c:	1000121e 	bne	r2,zero,39f58 <secp256k1_ecdsa_verify+0x1b4>
   39f10:	e1bfff17 	ldw	r6,-4(fp)
   39f14:	e17fcb04 	addi	r5,fp,-212
   39f18:	e13ffc17 	ldw	r4,-16(fp)
   39f1c:	00392d80 	call	392d8 <secp256k1_pubkey_load>
    ARG_CHECK(sig != NULL);
    ARG_CHECK(pubkey != NULL);

    secp256k1_scalar_set_b32(&m, msg32, NULL);
    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
    return (!secp256k1_scalar_is_high(&s) &&
   39f20:	10000d26 	beq	r2,zero,39f58 <secp256k1_ecdsa_verify+0x1b4>
            secp256k1_pubkey_load(ctx, &q, pubkey) &&
            secp256k1_ecdsa_sig_verify(&ctx->ecmult_ctx, &r, &s, &q, &m));
   39f24:	e0fffc17 	ldw	r3,-16(fp)
   39f28:	e17fec04 	addi	r5,fp,-80
   39f2c:	e13fe404 	addi	r4,fp,-112
   39f30:	e0bff404 	addi	r2,fp,-48
   39f34:	d8800015 	stw	r2,0(sp)
   39f38:	e1ffcb04 	addi	r7,fp,-212
   39f3c:	280d883a 	mov	r6,r5
   39f40:	200b883a 	mov	r5,r4
   39f44:	1809883a 	mov	r4,r3
   39f48:	00387d80 	call	387d8 <secp256k1_ecdsa_sig_verify>
    ARG_CHECK(pubkey != NULL);

    secp256k1_scalar_set_b32(&m, msg32, NULL);
    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
    return (!secp256k1_scalar_is_high(&s) &&
            secp256k1_pubkey_load(ctx, &q, pubkey) &&
   39f4c:	10000226 	beq	r2,zero,39f58 <secp256k1_ecdsa_verify+0x1b4>
   39f50:	00800044 	movi	r2,1
   39f54:	00000106 	br	39f5c <secp256k1_ecdsa_verify+0x1b8>
   39f58:	0005883a 	mov	r2,zero
    ARG_CHECK(sig != NULL);
    ARG_CHECK(pubkey != NULL);

    secp256k1_scalar_set_b32(&m, msg32, NULL);
    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
    return (!secp256k1_scalar_is_high(&s) &&
   39f5c:	0001883a 	nop
            secp256k1_pubkey_load(ctx, &q, pubkey) &&
            secp256k1_ecdsa_sig_verify(&ctx->ecmult_ctx, &r, &s, &q, &m));
}
   39f60:	e037883a 	mov	sp,fp
   39f64:	dfc00117 	ldw	ra,4(sp)
   39f68:	df000017 	ldw	fp,0(sp)
   39f6c:	dec00204 	addi	sp,sp,8
   39f70:	f800283a 	ret

00039f74 <nonce_function_rfc6979>:

static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {
   39f74:	deffcb04 	addi	sp,sp,-212
   39f78:	dfc03415 	stw	ra,208(sp)
   39f7c:	df003315 	stw	fp,204(sp)
   39f80:	df003304 	addi	fp,sp,204
   39f84:	e13ffc15 	stw	r4,-16(fp)
   39f88:	e17ffd15 	stw	r5,-12(fp)
   39f8c:	e1bffe15 	stw	r6,-8(fp)
   39f90:	e1ffff15 	stw	r7,-4(fp)
   unsigned char keydata[112];
   int keylen = 64;
   39f94:	00801004 	movi	r2,64
   39f98:	e0bfcd15 	stw	r2,-204(fp)
    * - optionally 16 extra bytes with the algorithm name.
    * Because the arguments have distinct fixed lengths it is not possible for
    *  different argument mixtures to emulate each other and result in the same
    *  nonces.
    */
   memcpy(keydata, key32, 32);
   39f9c:	e0bfcf04 	addi	r2,fp,-196
   39fa0:	01800804 	movi	r6,32
   39fa4:	e17ffe17 	ldw	r5,-8(fp)
   39fa8:	1009883a 	mov	r4,r2
   39fac:	0045c980 	call	45c98 <memcpy>
   memcpy(keydata + 32, msg32, 32);
   39fb0:	e0bfcf04 	addi	r2,fp,-196
   39fb4:	10800804 	addi	r2,r2,32
   39fb8:	01800804 	movi	r6,32
   39fbc:	e17ffd17 	ldw	r5,-12(fp)
   39fc0:	1009883a 	mov	r4,r2
   39fc4:	0045c980 	call	45c98 <memcpy>
   if (data != NULL) {
   39fc8:	e0800217 	ldw	r2,8(fp)
   39fcc:	10000826 	beq	r2,zero,39ff0 <nonce_function_rfc6979+0x7c>
       memcpy(keydata + 64, data, 32);
   39fd0:	e0bfcf04 	addi	r2,fp,-196
   39fd4:	10801004 	addi	r2,r2,64
   39fd8:	01800804 	movi	r6,32
   39fdc:	e1400217 	ldw	r5,8(fp)
   39fe0:	1009883a 	mov	r4,r2
   39fe4:	0045c980 	call	45c98 <memcpy>
       keylen = 96;
   39fe8:	00801804 	movi	r2,96
   39fec:	e0bfcd15 	stw	r2,-204(fp)
   }
   if (algo16 != NULL) {
   39ff0:	e0bfff17 	ldw	r2,-4(fp)
   39ff4:	10000a26 	beq	r2,zero,3a020 <nonce_function_rfc6979+0xac>
       memcpy(keydata + keylen, algo16, 16);
   39ff8:	e0bfcd17 	ldw	r2,-204(fp)
   39ffc:	e0ffcf04 	addi	r3,fp,-196
   3a000:	1885883a 	add	r2,r3,r2
   3a004:	01800404 	movi	r6,16
   3a008:	e17fff17 	ldw	r5,-4(fp)
   3a00c:	1009883a 	mov	r4,r2
   3a010:	0045c980 	call	45c98 <memcpy>
       keylen += 16;
   3a014:	e0bfcd17 	ldw	r2,-204(fp)
   3a018:	10800404 	addi	r2,r2,16
   3a01c:	e0bfcd15 	stw	r2,-204(fp)
   }
   secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, keylen);
   3a020:	e13fcd17 	ldw	r4,-204(fp)
   3a024:	e0ffcf04 	addi	r3,fp,-196
   3a028:	e0bfeb04 	addi	r2,fp,-84
   3a02c:	200d883a 	mov	r6,r4
   3a030:	180b883a 	mov	r5,r3
   3a034:	1009883a 	mov	r4,r2
   3a038:	001171c0 	call	1171c <secp256k1_rfc6979_hmac_sha256_initialize>
   memset(keydata, 0, sizeof(keydata));
   3a03c:	e0bfcf04 	addi	r2,fp,-196
   3a040:	01801c04 	movi	r6,112
   3a044:	000b883a 	mov	r5,zero
   3a048:	1009883a 	mov	r4,r2
   3a04c:	0045f3c0 	call	45f3c <memset>
   for (i = 0; i <= counter; i++) {
   3a050:	e03fce15 	stw	zero,-200(fp)
   3a054:	00000806 	br	3a078 <nonce_function_rfc6979+0x104>
       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);
   3a058:	e0bfeb04 	addi	r2,fp,-84
   3a05c:	01800804 	movi	r6,32
   3a060:	e17ffc17 	ldw	r5,-16(fp)
   3a064:	1009883a 	mov	r4,r2
   3a068:	00118bc0 	call	118bc <secp256k1_rfc6979_hmac_sha256_generate>
       memcpy(keydata + keylen, algo16, 16);
       keylen += 16;
   }
   secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, keylen);
   memset(keydata, 0, sizeof(keydata));
   for (i = 0; i <= counter; i++) {
   3a06c:	e0bfce17 	ldw	r2,-200(fp)
   3a070:	10800044 	addi	r2,r2,1
   3a074:	e0bfce15 	stw	r2,-200(fp)
   3a078:	e0bfce17 	ldw	r2,-200(fp)
   3a07c:	e0c00317 	ldw	r3,12(fp)
   3a080:	18bff52e 	bgeu	r3,r2,3a058 <__alt_mem_epcs_flash_controller+0xfe029058>
       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);
   }
   secp256k1_rfc6979_hmac_sha256_finalize(&rng);
   3a084:	e0bfeb04 	addi	r2,fp,-84
   3a088:	1009883a 	mov	r4,r2
   3a08c:	0011a580 	call	11a58 <secp256k1_rfc6979_hmac_sha256_finalize>
   return 1;
   3a090:	00800044 	movi	r2,1
}
   3a094:	e037883a 	mov	sp,fp
   3a098:	dfc00117 	ldw	ra,4(sp)
   3a09c:	df000017 	ldw	fp,0(sp)
   3a0a0:	dec00204 	addi	sp,sp,8
   3a0a4:	f800283a 	ret

0003a0a8 <secp256k1_ecdsa_sign>:

const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;
const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;

int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {
   3a0a8:	deffc404 	addi	sp,sp,-240
   3a0ac:	dfc03b15 	stw	ra,236(sp)
   3a0b0:	df003a15 	stw	fp,232(sp)
   3a0b4:	df003a04 	addi	fp,sp,232
   3a0b8:	e13ffc15 	stw	r4,-16(fp)
   3a0bc:	e17ffd15 	stw	r5,-12(fp)
   3a0c0:	e1bffe15 	stw	r6,-8(fp)
   3a0c4:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;
    secp256k1_scalar sec, non, msg;
    int ret = 0;
   3a0c8:	e03fc915 	stw	zero,-220(fp)
    int overflow = 0;
   3a0cc:	e03ff315 	stw	zero,-52(fp)
    VERIFY_CHECK(ctx != NULL);
   3a0d0:	e0bffc17 	ldw	r2,-16(fp)
   3a0d4:	1005003a 	cmpeq	r2,r2,zero
   3a0d8:	10803fcc 	andi	r2,r2,255
   3a0dc:	10000d26 	beq	r2,zero,3a114 <secp256k1_ecdsa_sign+0x6c>
   3a0e0:	d0a01617 	ldw	r2,-32680(gp)
   3a0e4:	10c00317 	ldw	r3,12(r2)
   3a0e8:	008001b4 	movhi	r2,6
   3a0ec:	10b1f704 	addi	r2,r2,-14372
   3a0f0:	d8800015 	stw	r2,0(sp)
   3a0f4:	01c05784 	movi	r7,350
   3a0f8:	018001b4 	movhi	r6,6
   3a0fc:	31b1ee04 	addi	r6,r6,-14408
   3a100:	014001b4 	movhi	r5,6
   3a104:	296b3804 	addi	r5,r5,-21280
   3a108:	1809883a 	mov	r4,r3
   3a10c:	00452600 	call	45260 <fprintf>
   3a110:	00450340 	call	45034 <abort>
    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
   3a114:	e0bffc17 	ldw	r2,-16(fp)
   3a118:	10800104 	addi	r2,r2,4
   3a11c:	1009883a 	mov	r4,r2
   3a120:	0037a9c0 	call	37a9c <secp256k1_ecmult_gen_context_is_built>
   3a124:	1005003a 	cmpeq	r2,r2,zero
   3a128:	10803fcc 	andi	r2,r2,255
   3a12c:	10000826 	beq	r2,zero,3a150 <secp256k1_ecdsa_sign+0xa8>
   3a130:	e0bffc17 	ldw	r2,-16(fp)
   3a134:	10802f04 	addi	r2,r2,188
   3a138:	014001b4 	movhi	r5,6
   3a13c:	29725504 	addi	r5,r5,-13996
   3a140:	1009883a 	mov	r4,r2
   3a144:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a148:	0005883a 	mov	r2,zero
   3a14c:	00008906 	br	3a374 <secp256k1_ecdsa_sign+0x2cc>
    ARG_CHECK(msg32 != NULL);
   3a150:	e0bffe17 	ldw	r2,-8(fp)
   3a154:	1005003a 	cmpeq	r2,r2,zero
   3a158:	10803fcc 	andi	r2,r2,255
   3a15c:	10000826 	beq	r2,zero,3a180 <secp256k1_ecdsa_sign+0xd8>
   3a160:	e0bffc17 	ldw	r2,-16(fp)
   3a164:	10802f04 	addi	r2,r2,188
   3a168:	014001b4 	movhi	r5,6
   3a16c:	29725104 	addi	r5,r5,-14012
   3a170:	1009883a 	mov	r4,r2
   3a174:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a178:	0005883a 	mov	r2,zero
   3a17c:	00007d06 	br	3a374 <secp256k1_ecdsa_sign+0x2cc>
    ARG_CHECK(signature != NULL);
   3a180:	e0bffd17 	ldw	r2,-12(fp)
   3a184:	1005003a 	cmpeq	r2,r2,zero
   3a188:	10803fcc 	andi	r2,r2,255
   3a18c:	10000826 	beq	r2,zero,3a1b0 <secp256k1_ecdsa_sign+0x108>
   3a190:	e0bffc17 	ldw	r2,-16(fp)
   3a194:	10802f04 	addi	r2,r2,188
   3a198:	014001b4 	movhi	r5,6
   3a19c:	29726404 	addi	r5,r5,-13936
   3a1a0:	1009883a 	mov	r4,r2
   3a1a4:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a1a8:	0005883a 	mov	r2,zero
   3a1ac:	00007106 	br	3a374 <secp256k1_ecdsa_sign+0x2cc>
    ARG_CHECK(seckey != NULL);
   3a1b0:	e0bfff17 	ldw	r2,-4(fp)
   3a1b4:	1005003a 	cmpeq	r2,r2,zero
   3a1b8:	10803fcc 	andi	r2,r2,255
   3a1bc:	10000826 	beq	r2,zero,3a1e0 <secp256k1_ecdsa_sign+0x138>
   3a1c0:	e0bffc17 	ldw	r2,-16(fp)
   3a1c4:	10802f04 	addi	r2,r2,188
   3a1c8:	014001b4 	movhi	r5,6
   3a1cc:	29726904 	addi	r5,r5,-13916
   3a1d0:	1009883a 	mov	r4,r2
   3a1d4:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a1d8:	0005883a 	mov	r2,zero
   3a1dc:	00006506 	br	3a374 <secp256k1_ecdsa_sign+0x2cc>
    if (noncefp == NULL) {
   3a1e0:	e0800217 	ldw	r2,8(fp)
   3a1e4:	1000031e 	bne	r2,zero,3a1f4 <secp256k1_ecdsa_sign+0x14c>
        noncefp = secp256k1_nonce_function_default;
   3a1e8:	00800134 	movhi	r2,4
   3a1ec:	10a7dd04 	addi	r2,r2,-24716
   3a1f0:	e0800215 	stw	r2,8(fp)
    }

    secp256k1_scalar_set_b32(&sec, seckey, &overflow);
   3a1f4:	e0fff304 	addi	r3,fp,-52
   3a1f8:	e0bfdb04 	addi	r2,fp,-148
   3a1fc:	180d883a 	mov	r6,r3
   3a200:	e17fff17 	ldw	r5,-4(fp)
   3a204:	1009883a 	mov	r4,r2
   3a208:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    /* Fail if the secret key is invalid. */
    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {
   3a20c:	e0bff317 	ldw	r2,-52(fp)
   3a210:	10004a1e 	bne	r2,zero,3a33c <secp256k1_ecdsa_sign+0x294>
   3a214:	e0bfdb04 	addi	r2,fp,-148
   3a218:	1009883a 	mov	r4,r2
   3a21c:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   3a220:	1000461e 	bne	r2,zero,3a33c <secp256k1_ecdsa_sign+0x294>
        unsigned int count = 0;
   3a224:	e03fca15 	stw	zero,-216(fp)
        secp256k1_scalar_set_b32(&msg, msg32, NULL);
   3a228:	e0bfeb04 	addi	r2,fp,-84
   3a22c:	000d883a 	mov	r6,zero
   3a230:	e17ffe17 	ldw	r5,-8(fp)
   3a234:	1009883a 	mov	r4,r2
   3a238:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
        while (1) {
            unsigned char nonce32[32];
            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);
   3a23c:	e0fff404 	addi	r3,fp,-48
   3a240:	e0bfca17 	ldw	r2,-216(fp)
   3a244:	d8800115 	stw	r2,4(sp)
   3a248:	e0800317 	ldw	r2,12(fp)
   3a24c:	d8800015 	stw	r2,0(sp)
   3a250:	e0800217 	ldw	r2,8(fp)
   3a254:	000f883a 	mov	r7,zero
   3a258:	e1bfff17 	ldw	r6,-4(fp)
   3a25c:	e17ffe17 	ldw	r5,-8(fp)
   3a260:	1809883a 	mov	r4,r3
   3a264:	103ee83a 	callr	r2
   3a268:	e0bfc915 	stw	r2,-220(fp)
            if (!ret) {
   3a26c:	e0bfc917 	ldw	r2,-220(fp)
   3a270:	10002626 	beq	r2,zero,3a30c <secp256k1_ecdsa_sign+0x264>
                break;
            }
            secp256k1_scalar_set_b32(&non, nonce32, &overflow);
   3a274:	e13ff304 	addi	r4,fp,-52
   3a278:	e0fff404 	addi	r3,fp,-48
   3a27c:	e0bfe304 	addi	r2,fp,-116
   3a280:	200d883a 	mov	r6,r4
   3a284:	180b883a 	mov	r5,r3
   3a288:	1009883a 	mov	r4,r2
   3a28c:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
            memset(nonce32, 0, 32);
   3a290:	e0bff404 	addi	r2,fp,-48
   3a294:	01800804 	movi	r6,32
   3a298:	000b883a 	mov	r5,zero
   3a29c:	1009883a 	mov	r4,r2
   3a2a0:	0045f3c0 	call	45f3c <memset>
            if (!overflow && !secp256k1_scalar_is_zero(&non)) {
   3a2a4:	e0bff317 	ldw	r2,-52(fp)
   3a2a8:	1000141e 	bne	r2,zero,3a2fc <secp256k1_ecdsa_sign+0x254>
   3a2ac:	e0bfe304 	addi	r2,fp,-116
   3a2b0:	1009883a 	mov	r4,r2
   3a2b4:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   3a2b8:	1000101e 	bne	r2,zero,3a2fc <secp256k1_ecdsa_sign+0x254>
                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {
   3a2bc:	e0bffc17 	ldw	r2,-16(fp)
   3a2c0:	10c00104 	addi	r3,r2,4
   3a2c4:	e1bfdb04 	addi	r6,fp,-148
   3a2c8:	e17fd304 	addi	r5,fp,-180
   3a2cc:	e13fcb04 	addi	r4,fp,-212
   3a2d0:	d8000215 	stw	zero,8(sp)
   3a2d4:	e0bfe304 	addi	r2,fp,-116
   3a2d8:	d8800115 	stw	r2,4(sp)
   3a2dc:	e0bfeb04 	addi	r2,fp,-84
   3a2e0:	d8800015 	stw	r2,0(sp)
   3a2e4:	300f883a 	mov	r7,r6
   3a2e8:	280d883a 	mov	r6,r5
   3a2ec:	200b883a 	mov	r5,r4
   3a2f0:	1809883a 	mov	r4,r3
   3a2f4:	00389500 	call	38950 <secp256k1_ecdsa_sig_sign>
   3a2f8:	1000061e 	bne	r2,zero,3a314 <secp256k1_ecdsa_sign+0x26c>
                    break;
                }
            }
            count++;
   3a2fc:	e0bfca17 	ldw	r2,-216(fp)
   3a300:	10800044 	addi	r2,r2,1
   3a304:	e0bfca15 	stw	r2,-216(fp)
        }
   3a308:	003fcc06 	br	3a23c <__alt_mem_epcs_flash_controller+0xfe02923c>
        secp256k1_scalar_set_b32(&msg, msg32, NULL);
        while (1) {
            unsigned char nonce32[32];
            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);
            if (!ret) {
                break;
   3a30c:	0001883a 	nop
   3a310:	00000106 	br	3a318 <secp256k1_ecdsa_sign+0x270>
            }
            secp256k1_scalar_set_b32(&non, nonce32, &overflow);
            memset(nonce32, 0, 32);
            if (!overflow && !secp256k1_scalar_is_zero(&non)) {
                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {
                    break;
   3a314:	0001883a 	nop
                }
            }
            count++;
        }
        secp256k1_scalar_clear(&msg);
   3a318:	e0bfeb04 	addi	r2,fp,-84
   3a31c:	1009883a 	mov	r4,r2
   3a320:	00231f80 	call	231f8 <secp256k1_scalar_clear>
        secp256k1_scalar_clear(&non);
   3a324:	e0bfe304 	addi	r2,fp,-116
   3a328:	1009883a 	mov	r4,r2
   3a32c:	00231f80 	call	231f8 <secp256k1_scalar_clear>
        secp256k1_scalar_clear(&sec);
   3a330:	e0bfdb04 	addi	r2,fp,-148
   3a334:	1009883a 	mov	r4,r2
   3a338:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    }
    if (ret) {
   3a33c:	e0bfc917 	ldw	r2,-220(fp)
   3a340:	10000726 	beq	r2,zero,3a360 <secp256k1_ecdsa_sign+0x2b8>
        secp256k1_ecdsa_signature_save(signature, &r, &s);
   3a344:	e0ffd304 	addi	r3,fp,-180
   3a348:	e0bfcb04 	addi	r2,fp,-212
   3a34c:	180d883a 	mov	r6,r3
   3a350:	100b883a 	mov	r5,r2
   3a354:	e13ffd17 	ldw	r4,-12(fp)
   3a358:	00397400 	call	39740 <secp256k1_ecdsa_signature_save>
   3a35c:	00000406 	br	3a370 <secp256k1_ecdsa_sign+0x2c8>
    } else {
        memset(signature, 0, sizeof(*signature));
   3a360:	01801004 	movi	r6,64
   3a364:	000b883a 	mov	r5,zero
   3a368:	e13ffd17 	ldw	r4,-12(fp)
   3a36c:	0045f3c0 	call	45f3c <memset>
    }
    return ret;
   3a370:	e0bfc917 	ldw	r2,-220(fp)
}
   3a374:	e037883a 	mov	sp,fp
   3a378:	dfc00117 	ldw	ra,4(sp)
   3a37c:	df000017 	ldw	fp,0(sp)
   3a380:	dec00204 	addi	sp,sp,8
   3a384:	f800283a 	ret

0003a388 <secp256k1_ec_seckey_verify>:

int secp256k1_ec_seckey_verify(const secp256k1_context* ctx, const unsigned char *seckey) {
   3a388:	defff104 	addi	sp,sp,-60
   3a38c:	dfc00e15 	stw	ra,56(sp)
   3a390:	df000d15 	stw	fp,52(sp)
   3a394:	df000d04 	addi	fp,sp,52
   3a398:	e13ffe15 	stw	r4,-8(fp)
   3a39c:	e17fff15 	stw	r5,-4(fp)
    secp256k1_scalar sec;
    int ret;
    int overflow;
    VERIFY_CHECK(ctx != NULL);
   3a3a0:	e0bffe17 	ldw	r2,-8(fp)
   3a3a4:	1005003a 	cmpeq	r2,r2,zero
   3a3a8:	10803fcc 	andi	r2,r2,255
   3a3ac:	10000d26 	beq	r2,zero,3a3e4 <secp256k1_ec_seckey_verify+0x5c>
   3a3b0:	d0a01617 	ldw	r2,-32680(gp)
   3a3b4:	10c00317 	ldw	r3,12(r2)
   3a3b8:	008001b4 	movhi	r2,6
   3a3bc:	10b1f704 	addi	r2,r2,-14372
   3a3c0:	d8800015 	stw	r2,0(sp)
   3a3c4:	01c062c4 	movi	r7,395
   3a3c8:	018001b4 	movhi	r6,6
   3a3cc:	31b1ee04 	addi	r6,r6,-14408
   3a3d0:	014001b4 	movhi	r5,6
   3a3d4:	296b3804 	addi	r5,r5,-21280
   3a3d8:	1809883a 	mov	r4,r3
   3a3dc:	00452600 	call	45260 <fprintf>
   3a3e0:	00450340 	call	45034 <abort>
    ARG_CHECK(seckey != NULL);
   3a3e4:	e0bfff17 	ldw	r2,-4(fp)
   3a3e8:	1005003a 	cmpeq	r2,r2,zero
   3a3ec:	10803fcc 	andi	r2,r2,255
   3a3f0:	10000826 	beq	r2,zero,3a414 <secp256k1_ec_seckey_verify+0x8c>
   3a3f4:	e0bffe17 	ldw	r2,-8(fp)
   3a3f8:	10802f04 	addi	r2,r2,188
   3a3fc:	014001b4 	movhi	r5,6
   3a400:	29726904 	addi	r5,r5,-13916
   3a404:	1009883a 	mov	r4,r2
   3a408:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a40c:	0005883a 	mov	r2,zero
   3a410:	00001406 	br	3a464 <secp256k1_ec_seckey_verify+0xdc>

    secp256k1_scalar_set_b32(&sec, seckey, &overflow);
   3a414:	e0fffd04 	addi	r3,fp,-12
   3a418:	e0bff504 	addi	r2,fp,-44
   3a41c:	180d883a 	mov	r6,r3
   3a420:	e17fff17 	ldw	r5,-4(fp)
   3a424:	1009883a 	mov	r4,r2
   3a428:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    ret = !overflow && !secp256k1_scalar_is_zero(&sec);
   3a42c:	e0bffd17 	ldw	r2,-12(fp)
   3a430:	1000061e 	bne	r2,zero,3a44c <secp256k1_ec_seckey_verify+0xc4>
   3a434:	e0bff504 	addi	r2,fp,-44
   3a438:	1009883a 	mov	r4,r2
   3a43c:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   3a440:	1000021e 	bne	r2,zero,3a44c <secp256k1_ec_seckey_verify+0xc4>
   3a444:	00800044 	movi	r2,1
   3a448:	00000106 	br	3a450 <secp256k1_ec_seckey_verify+0xc8>
   3a44c:	0005883a 	mov	r2,zero
   3a450:	e0bff415 	stw	r2,-48(fp)
    secp256k1_scalar_clear(&sec);
   3a454:	e0bff504 	addi	r2,fp,-44
   3a458:	1009883a 	mov	r4,r2
   3a45c:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    return ret;
   3a460:	e0bff417 	ldw	r2,-48(fp)
}
   3a464:	e037883a 	mov	sp,fp
   3a468:	dfc00117 	ldw	ra,4(sp)
   3a46c:	df000017 	ldw	fp,0(sp)
   3a470:	dec00204 	addi	sp,sp,8
   3a474:	f800283a 	ret

0003a478 <secp256k1_ec_pubkey_create>:

int secp256k1_ec_pubkey_create(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *seckey) {
   3a478:	deffb104 	addi	sp,sp,-316
   3a47c:	dfc04e15 	stw	ra,312(sp)
   3a480:	df004d15 	stw	fp,308(sp)
   3a484:	dc004c15 	stw	r16,304(sp)
   3a488:	df004d04 	addi	fp,sp,308
   3a48c:	e13ffc15 	stw	r4,-16(fp)
   3a490:	e17ffd15 	stw	r5,-12(fp)
   3a494:	e1bffe15 	stw	r6,-8(fp)
    secp256k1_gej pj;
    secp256k1_ge p;
    secp256k1_scalar sec;
    int overflow;
    int ret = 0;
   3a498:	e03fb415 	stw	zero,-304(fp)
    VERIFY_CHECK(ctx != NULL);
   3a49c:	e0bffc17 	ldw	r2,-16(fp)
   3a4a0:	1005003a 	cmpeq	r2,r2,zero
   3a4a4:	10803fcc 	andi	r2,r2,255
   3a4a8:	10000d26 	beq	r2,zero,3a4e0 <secp256k1_ec_pubkey_create+0x68>
   3a4ac:	d0a01617 	ldw	r2,-32680(gp)
   3a4b0:	10c00317 	ldw	r3,12(r2)
   3a4b4:	008001b4 	movhi	r2,6
   3a4b8:	10b1f704 	addi	r2,r2,-14372
   3a4bc:	d8800015 	stw	r2,0(sp)
   3a4c0:	01c06684 	movi	r7,410
   3a4c4:	018001b4 	movhi	r6,6
   3a4c8:	31b1ee04 	addi	r6,r6,-14408
   3a4cc:	014001b4 	movhi	r5,6
   3a4d0:	296b3804 	addi	r5,r5,-21280
   3a4d4:	1809883a 	mov	r4,r3
   3a4d8:	00452600 	call	45260 <fprintf>
   3a4dc:	00450340 	call	45034 <abort>
    ARG_CHECK(pubkey != NULL);
   3a4e0:	e0bffd17 	ldw	r2,-12(fp)
   3a4e4:	1005003a 	cmpeq	r2,r2,zero
   3a4e8:	10803fcc 	andi	r2,r2,255
   3a4ec:	10000826 	beq	r2,zero,3a510 <secp256k1_ec_pubkey_create+0x98>
   3a4f0:	e0bffc17 	ldw	r2,-16(fp)
   3a4f4:	10802f04 	addi	r2,r2,188
   3a4f8:	014001b4 	movhi	r5,6
   3a4fc:	29720004 	addi	r5,r5,-14336
   3a500:	1009883a 	mov	r4,r2
   3a504:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a508:	0005883a 	mov	r2,zero
   3a50c:	00004606 	br	3a628 <secp256k1_ec_pubkey_create+0x1b0>
    memset(pubkey, 0, sizeof(*pubkey));
   3a510:	01801004 	movi	r6,64
   3a514:	000b883a 	mov	r5,zero
   3a518:	e13ffd17 	ldw	r4,-12(fp)
   3a51c:	0045f3c0 	call	45f3c <memset>
    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
   3a520:	e0bffc17 	ldw	r2,-16(fp)
   3a524:	10800104 	addi	r2,r2,4
   3a528:	1009883a 	mov	r4,r2
   3a52c:	0037a9c0 	call	37a9c <secp256k1_ecmult_gen_context_is_built>
   3a530:	1005003a 	cmpeq	r2,r2,zero
   3a534:	10803fcc 	andi	r2,r2,255
   3a538:	10000826 	beq	r2,zero,3a55c <secp256k1_ec_pubkey_create+0xe4>
   3a53c:	e0bffc17 	ldw	r2,-16(fp)
   3a540:	10802f04 	addi	r2,r2,188
   3a544:	014001b4 	movhi	r5,6
   3a548:	29725504 	addi	r5,r5,-13996
   3a54c:	1009883a 	mov	r4,r2
   3a550:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a554:	0005883a 	mov	r2,zero
   3a558:	00003306 	br	3a628 <secp256k1_ec_pubkey_create+0x1b0>
    ARG_CHECK(seckey != NULL);
   3a55c:	e0bffe17 	ldw	r2,-8(fp)
   3a560:	1005003a 	cmpeq	r2,r2,zero
   3a564:	10803fcc 	andi	r2,r2,255
   3a568:	10000826 	beq	r2,zero,3a58c <secp256k1_ec_pubkey_create+0x114>
   3a56c:	e0bffc17 	ldw	r2,-16(fp)
   3a570:	10802f04 	addi	r2,r2,188
   3a574:	014001b4 	movhi	r5,6
   3a578:	29726904 	addi	r5,r5,-13916
   3a57c:	1009883a 	mov	r4,r2
   3a580:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a584:	0005883a 	mov	r2,zero
   3a588:	00002706 	br	3a628 <secp256k1_ec_pubkey_create+0x1b0>

    secp256k1_scalar_set_b32(&sec, seckey, &overflow);
   3a58c:	e0fffb04 	addi	r3,fp,-20
   3a590:	e0bff304 	addi	r2,fp,-52
   3a594:	180d883a 	mov	r6,r3
   3a598:	e17ffe17 	ldw	r5,-8(fp)
   3a59c:	1009883a 	mov	r4,r2
   3a5a0:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    ret = (!overflow) & (!secp256k1_scalar_is_zero(&sec));
   3a5a4:	e0bffb17 	ldw	r2,-20(fp)
   3a5a8:	1005003a 	cmpeq	r2,r2,zero
   3a5ac:	1021883a 	mov	r16,r2
   3a5b0:	e0bff304 	addi	r2,fp,-52
   3a5b4:	1009883a 	mov	r4,r2
   3a5b8:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   3a5bc:	1005003a 	cmpeq	r2,r2,zero
   3a5c0:	8084703a 	and	r2,r16,r2
   3a5c4:	10803fcc 	andi	r2,r2,255
   3a5c8:	e0bfb415 	stw	r2,-304(fp)
    if (ret) {
   3a5cc:	e0bfb417 	ldw	r2,-304(fp)
   3a5d0:	10001126 	beq	r2,zero,3a618 <secp256k1_ec_pubkey_create+0x1a0>
        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &sec);
   3a5d4:	e0bffc17 	ldw	r2,-16(fp)
   3a5d8:	10800104 	addi	r2,r2,4
   3a5dc:	e13ff304 	addi	r4,fp,-52
   3a5e0:	e0ffb504 	addi	r3,fp,-300
   3a5e4:	200d883a 	mov	r6,r4
   3a5e8:	180b883a 	mov	r5,r3
   3a5ec:	1009883a 	mov	r4,r2
   3a5f0:	0037c200 	call	37c20 <secp256k1_ecmult_gen>
        secp256k1_ge_set_gej(&p, &pj);
   3a5f4:	e0ffb504 	addi	r3,fp,-300
   3a5f8:	e0bfda04 	addi	r2,fp,-152
   3a5fc:	180b883a 	mov	r5,r3
   3a600:	1009883a 	mov	r4,r2
   3a604:	00201d00 	call	201d0 <secp256k1_ge_set_gej>
        secp256k1_pubkey_save(pubkey, &p);
   3a608:	e0bfda04 	addi	r2,fp,-152
   3a60c:	100b883a 	mov	r5,r2
   3a610:	e13ffd17 	ldw	r4,-12(fp)
   3a614:	00393640 	call	39364 <secp256k1_pubkey_save>
    }
    secp256k1_scalar_clear(&sec);
   3a618:	e0bff304 	addi	r2,fp,-52
   3a61c:	1009883a 	mov	r4,r2
   3a620:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    return ret;
   3a624:	e0bfb417 	ldw	r2,-304(fp)
}
   3a628:	e6ffff04 	addi	sp,fp,-4
   3a62c:	dfc00217 	ldw	ra,8(sp)
   3a630:	df000117 	ldw	fp,4(sp)
   3a634:	dc000017 	ldw	r16,0(sp)
   3a638:	dec00304 	addi	sp,sp,12
   3a63c:	f800283a 	ret

0003a640 <secp256k1_ec_privkey_tweak_add>:

int secp256k1_ec_privkey_tweak_add(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {
   3a640:	deffe804 	addi	sp,sp,-96
   3a644:	dfc01715 	stw	ra,92(sp)
   3a648:	df001615 	stw	fp,88(sp)
   3a64c:	df001604 	addi	fp,sp,88
   3a650:	e13ffd15 	stw	r4,-12(fp)
   3a654:	e17ffe15 	stw	r5,-8(fp)
   3a658:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar term;
    secp256k1_scalar sec;
    int ret = 0;
   3a65c:	e03feb15 	stw	zero,-84(fp)
    int overflow = 0;
   3a660:	e03ffc15 	stw	zero,-16(fp)
    VERIFY_CHECK(ctx != NULL);
   3a664:	e0bffd17 	ldw	r2,-12(fp)
   3a668:	1005003a 	cmpeq	r2,r2,zero
   3a66c:	10803fcc 	andi	r2,r2,255
   3a670:	10000d26 	beq	r2,zero,3a6a8 <secp256k1_ec_privkey_tweak_add+0x68>
   3a674:	d0a01617 	ldw	r2,-32680(gp)
   3a678:	10c00317 	ldw	r3,12(r2)
   3a67c:	008001b4 	movhi	r2,6
   3a680:	10b1f704 	addi	r2,r2,-14372
   3a684:	d8800015 	stw	r2,0(sp)
   3a688:	01c06c04 	movi	r7,432
   3a68c:	018001b4 	movhi	r6,6
   3a690:	31b1ee04 	addi	r6,r6,-14408
   3a694:	014001b4 	movhi	r5,6
   3a698:	296b3804 	addi	r5,r5,-21280
   3a69c:	1809883a 	mov	r4,r3
   3a6a0:	00452600 	call	45260 <fprintf>
   3a6a4:	00450340 	call	45034 <abort>
    ARG_CHECK(seckey != NULL);
   3a6a8:	e0bffe17 	ldw	r2,-8(fp)
   3a6ac:	1005003a 	cmpeq	r2,r2,zero
   3a6b0:	10803fcc 	andi	r2,r2,255
   3a6b4:	10000826 	beq	r2,zero,3a6d8 <secp256k1_ec_privkey_tweak_add+0x98>
   3a6b8:	e0bffd17 	ldw	r2,-12(fp)
   3a6bc:	10802f04 	addi	r2,r2,188
   3a6c0:	014001b4 	movhi	r5,6
   3a6c4:	29726904 	addi	r5,r5,-13916
   3a6c8:	1009883a 	mov	r4,r2
   3a6cc:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a6d0:	0005883a 	mov	r2,zero
   3a6d4:	00003406 	br	3a7a8 <secp256k1_ec_privkey_tweak_add+0x168>
    ARG_CHECK(tweak != NULL);
   3a6d8:	e0bfff17 	ldw	r2,-4(fp)
   3a6dc:	1005003a 	cmpeq	r2,r2,zero
   3a6e0:	10803fcc 	andi	r2,r2,255
   3a6e4:	10000826 	beq	r2,zero,3a708 <secp256k1_ec_privkey_tweak_add+0xc8>
   3a6e8:	e0bffd17 	ldw	r2,-12(fp)
   3a6ec:	10802f04 	addi	r2,r2,188
   3a6f0:	014001b4 	movhi	r5,6
   3a6f4:	29726d04 	addi	r5,r5,-13900
   3a6f8:	1009883a 	mov	r4,r2
   3a6fc:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a700:	0005883a 	mov	r2,zero
   3a704:	00002806 	br	3a7a8 <secp256k1_ec_privkey_tweak_add+0x168>

    secp256k1_scalar_set_b32(&term, tweak, &overflow);
   3a708:	e0fffc04 	addi	r3,fp,-16
   3a70c:	e0bfec04 	addi	r2,fp,-80
   3a710:	180d883a 	mov	r6,r3
   3a714:	e17fff17 	ldw	r5,-4(fp)
   3a718:	1009883a 	mov	r4,r2
   3a71c:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    secp256k1_scalar_set_b32(&sec, seckey, NULL);
   3a720:	e0bff404 	addi	r2,fp,-48
   3a724:	000d883a 	mov	r6,zero
   3a728:	e17ffe17 	ldw	r5,-8(fp)
   3a72c:	1009883a 	mov	r4,r2
   3a730:	002468c0 	call	2468c <secp256k1_scalar_set_b32>

    ret = !overflow && secp256k1_eckey_privkey_tweak_add(&sec, &term);
   3a734:	e0bffc17 	ldw	r2,-16(fp)
   3a738:	1000081e 	bne	r2,zero,3a75c <secp256k1_ec_privkey_tweak_add+0x11c>
   3a73c:	e0ffec04 	addi	r3,fp,-80
   3a740:	e0bff404 	addi	r2,fp,-48
   3a744:	180b883a 	mov	r5,r3
   3a748:	1009883a 	mov	r4,r2
   3a74c:	0038dc40 	call	38dc4 <secp256k1_eckey_privkey_tweak_add>
   3a750:	10000226 	beq	r2,zero,3a75c <secp256k1_ec_privkey_tweak_add+0x11c>
   3a754:	00800044 	movi	r2,1
   3a758:	00000106 	br	3a760 <secp256k1_ec_privkey_tweak_add+0x120>
   3a75c:	0005883a 	mov	r2,zero
   3a760:	e0bfeb15 	stw	r2,-84(fp)
    memset(seckey, 0, 32);
   3a764:	01800804 	movi	r6,32
   3a768:	000b883a 	mov	r5,zero
   3a76c:	e13ffe17 	ldw	r4,-8(fp)
   3a770:	0045f3c0 	call	45f3c <memset>
    if (ret) {
   3a774:	e0bfeb17 	ldw	r2,-84(fp)
   3a778:	10000426 	beq	r2,zero,3a78c <secp256k1_ec_privkey_tweak_add+0x14c>
        secp256k1_scalar_get_b32(seckey, &sec);
   3a77c:	e0bff404 	addi	r2,fp,-48
   3a780:	100b883a 	mov	r5,r2
   3a784:	e13ffe17 	ldw	r4,-8(fp)
   3a788:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    }

    secp256k1_scalar_clear(&sec);
   3a78c:	e0bff404 	addi	r2,fp,-48
   3a790:	1009883a 	mov	r4,r2
   3a794:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    secp256k1_scalar_clear(&term);
   3a798:	e0bfec04 	addi	r2,fp,-80
   3a79c:	1009883a 	mov	r4,r2
   3a7a0:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    return ret;
   3a7a4:	e0bfeb17 	ldw	r2,-84(fp)
}
   3a7a8:	e037883a 	mov	sp,fp
   3a7ac:	dfc00117 	ldw	ra,4(sp)
   3a7b0:	df000017 	ldw	fp,0(sp)
   3a7b4:	dec00204 	addi	sp,sp,8
   3a7b8:	f800283a 	ret

0003a7bc <secp256k1_ec_pubkey_tweak_add>:

int secp256k1_ec_pubkey_tweak_add(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {
   3a7bc:	deffd704 	addi	sp,sp,-164
   3a7c0:	dfc02815 	stw	ra,160(sp)
   3a7c4:	df002715 	stw	fp,156(sp)
   3a7c8:	df002704 	addi	fp,sp,156
   3a7cc:	e13ffd15 	stw	r4,-12(fp)
   3a7d0:	e17ffe15 	stw	r5,-8(fp)
   3a7d4:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_ge p;
    secp256k1_scalar term;
    int ret = 0;
   3a7d8:	e03fda15 	stw	zero,-152(fp)
    int overflow = 0;
   3a7dc:	e03ffc15 	stw	zero,-16(fp)
    VERIFY_CHECK(ctx != NULL);
   3a7e0:	e0bffd17 	ldw	r2,-12(fp)
   3a7e4:	1005003a 	cmpeq	r2,r2,zero
   3a7e8:	10803fcc 	andi	r2,r2,255
   3a7ec:	10000d26 	beq	r2,zero,3a824 <secp256k1_ec_pubkey_tweak_add+0x68>
   3a7f0:	d0a01617 	ldw	r2,-32680(gp)
   3a7f4:	10c00317 	ldw	r3,12(r2)
   3a7f8:	008001b4 	movhi	r2,6
   3a7fc:	10b1f704 	addi	r2,r2,-14372
   3a800:	d8800015 	stw	r2,0(sp)
   3a804:	01c071c4 	movi	r7,455
   3a808:	018001b4 	movhi	r6,6
   3a80c:	31b1ee04 	addi	r6,r6,-14408
   3a810:	014001b4 	movhi	r5,6
   3a814:	296b3804 	addi	r5,r5,-21280
   3a818:	1809883a 	mov	r4,r3
   3a81c:	00452600 	call	45260 <fprintf>
   3a820:	00450340 	call	45034 <abort>
    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));
   3a824:	e0bffd17 	ldw	r2,-12(fp)
   3a828:	1009883a 	mov	r4,r2
   3a82c:	0035ab40 	call	35ab4 <secp256k1_ecmult_context_is_built>
   3a830:	1005003a 	cmpeq	r2,r2,zero
   3a834:	10803fcc 	andi	r2,r2,255
   3a838:	10000826 	beq	r2,zero,3a85c <secp256k1_ec_pubkey_tweak_add+0xa0>
   3a83c:	e0bffd17 	ldw	r2,-12(fp)
   3a840:	10802f04 	addi	r2,r2,188
   3a844:	014001b4 	movhi	r5,6
   3a848:	29724404 	addi	r5,r5,-14064
   3a84c:	1009883a 	mov	r4,r2
   3a850:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a854:	0005883a 	mov	r2,zero
   3a858:	00003f06 	br	3a958 <secp256k1_ec_pubkey_tweak_add+0x19c>
    ARG_CHECK(pubkey != NULL);
   3a85c:	e0bffe17 	ldw	r2,-8(fp)
   3a860:	1005003a 	cmpeq	r2,r2,zero
   3a864:	10803fcc 	andi	r2,r2,255
   3a868:	10000826 	beq	r2,zero,3a88c <secp256k1_ec_pubkey_tweak_add+0xd0>
   3a86c:	e0bffd17 	ldw	r2,-12(fp)
   3a870:	10802f04 	addi	r2,r2,188
   3a874:	014001b4 	movhi	r5,6
   3a878:	29720004 	addi	r5,r5,-14336
   3a87c:	1009883a 	mov	r4,r2
   3a880:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a884:	0005883a 	mov	r2,zero
   3a888:	00003306 	br	3a958 <secp256k1_ec_pubkey_tweak_add+0x19c>
    ARG_CHECK(tweak != NULL);
   3a88c:	e0bfff17 	ldw	r2,-4(fp)
   3a890:	1005003a 	cmpeq	r2,r2,zero
   3a894:	10803fcc 	andi	r2,r2,255
   3a898:	10000826 	beq	r2,zero,3a8bc <secp256k1_ec_pubkey_tweak_add+0x100>
   3a89c:	e0bffd17 	ldw	r2,-12(fp)
   3a8a0:	10802f04 	addi	r2,r2,188
   3a8a4:	014001b4 	movhi	r5,6
   3a8a8:	29726d04 	addi	r5,r5,-13900
   3a8ac:	1009883a 	mov	r4,r2
   3a8b0:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a8b4:	0005883a 	mov	r2,zero
   3a8b8:	00002706 	br	3a958 <secp256k1_ec_pubkey_tweak_add+0x19c>

    secp256k1_scalar_set_b32(&term, tweak, &overflow);
   3a8bc:	e0fffc04 	addi	r3,fp,-16
   3a8c0:	e0bff404 	addi	r2,fp,-48
   3a8c4:	180d883a 	mov	r6,r3
   3a8c8:	e17fff17 	ldw	r5,-4(fp)
   3a8cc:	1009883a 	mov	r4,r2
   3a8d0:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    ret = !overflow && secp256k1_pubkey_load(ctx, &p, pubkey);
   3a8d4:	e0bffc17 	ldw	r2,-16(fp)
   3a8d8:	1000081e 	bne	r2,zero,3a8fc <secp256k1_ec_pubkey_tweak_add+0x140>
   3a8dc:	e0bfdb04 	addi	r2,fp,-148
   3a8e0:	e1bffe17 	ldw	r6,-8(fp)
   3a8e4:	100b883a 	mov	r5,r2
   3a8e8:	e13ffd17 	ldw	r4,-12(fp)
   3a8ec:	00392d80 	call	392d8 <secp256k1_pubkey_load>
   3a8f0:	10000226 	beq	r2,zero,3a8fc <secp256k1_ec_pubkey_tweak_add+0x140>
   3a8f4:	00800044 	movi	r2,1
   3a8f8:	00000106 	br	3a900 <secp256k1_ec_pubkey_tweak_add+0x144>
   3a8fc:	0005883a 	mov	r2,zero
   3a900:	e0bfda15 	stw	r2,-152(fp)
    memset(pubkey, 0, sizeof(*pubkey));
   3a904:	01801004 	movi	r6,64
   3a908:	000b883a 	mov	r5,zero
   3a90c:	e13ffe17 	ldw	r4,-8(fp)
   3a910:	0045f3c0 	call	45f3c <memset>
    if (ret) {
   3a914:	e0bfda17 	ldw	r2,-152(fp)
   3a918:	10000e26 	beq	r2,zero,3a954 <secp256k1_ec_pubkey_tweak_add+0x198>
        if (secp256k1_eckey_pubkey_tweak_add(&ctx->ecmult_ctx, &p, &term)) {
   3a91c:	e0bffd17 	ldw	r2,-12(fp)
   3a920:	e13ff404 	addi	r4,fp,-48
   3a924:	e0ffdb04 	addi	r3,fp,-148
   3a928:	200d883a 	mov	r6,r4
   3a92c:	180b883a 	mov	r5,r3
   3a930:	1009883a 	mov	r4,r2
   3a934:	0038e180 	call	38e18 <secp256k1_eckey_pubkey_tweak_add>
   3a938:	10000526 	beq	r2,zero,3a950 <secp256k1_ec_pubkey_tweak_add+0x194>
            secp256k1_pubkey_save(pubkey, &p);
   3a93c:	e0bfdb04 	addi	r2,fp,-148
   3a940:	100b883a 	mov	r5,r2
   3a944:	e13ffe17 	ldw	r4,-8(fp)
   3a948:	00393640 	call	39364 <secp256k1_pubkey_save>
   3a94c:	00000106 	br	3a954 <secp256k1_ec_pubkey_tweak_add+0x198>
        } else {
            ret = 0;
   3a950:	e03fda15 	stw	zero,-152(fp)
        }
    }

    return ret;
   3a954:	e0bfda17 	ldw	r2,-152(fp)
}
   3a958:	e037883a 	mov	sp,fp
   3a95c:	dfc00117 	ldw	ra,4(sp)
   3a960:	df000017 	ldw	fp,0(sp)
   3a964:	dec00204 	addi	sp,sp,8
   3a968:	f800283a 	ret

0003a96c <secp256k1_ec_privkey_tweak_mul>:

int secp256k1_ec_privkey_tweak_mul(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {
   3a96c:	deffe804 	addi	sp,sp,-96
   3a970:	dfc01715 	stw	ra,92(sp)
   3a974:	df001615 	stw	fp,88(sp)
   3a978:	df001604 	addi	fp,sp,88
   3a97c:	e13ffd15 	stw	r4,-12(fp)
   3a980:	e17ffe15 	stw	r5,-8(fp)
   3a984:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar factor;
    secp256k1_scalar sec;
    int ret = 0;
   3a988:	e03feb15 	stw	zero,-84(fp)
    int overflow = 0;
   3a98c:	e03ffc15 	stw	zero,-16(fp)
    VERIFY_CHECK(ctx != NULL);
   3a990:	e0bffd17 	ldw	r2,-12(fp)
   3a994:	1005003a 	cmpeq	r2,r2,zero
   3a998:	10803fcc 	andi	r2,r2,255
   3a99c:	10000d26 	beq	r2,zero,3a9d4 <secp256k1_ec_privkey_tweak_mul+0x68>
   3a9a0:	d0a01617 	ldw	r2,-32680(gp)
   3a9a4:	10c00317 	ldw	r3,12(r2)
   3a9a8:	008001b4 	movhi	r2,6
   3a9ac:	10b1f704 	addi	r2,r2,-14372
   3a9b0:	d8800015 	stw	r2,0(sp)
   3a9b4:	01c077c4 	movi	r7,479
   3a9b8:	018001b4 	movhi	r6,6
   3a9bc:	31b1ee04 	addi	r6,r6,-14408
   3a9c0:	014001b4 	movhi	r5,6
   3a9c4:	296b3804 	addi	r5,r5,-21280
   3a9c8:	1809883a 	mov	r4,r3
   3a9cc:	00452600 	call	45260 <fprintf>
   3a9d0:	00450340 	call	45034 <abort>
    ARG_CHECK(seckey != NULL);
   3a9d4:	e0bffe17 	ldw	r2,-8(fp)
   3a9d8:	1005003a 	cmpeq	r2,r2,zero
   3a9dc:	10803fcc 	andi	r2,r2,255
   3a9e0:	10000826 	beq	r2,zero,3aa04 <secp256k1_ec_privkey_tweak_mul+0x98>
   3a9e4:	e0bffd17 	ldw	r2,-12(fp)
   3a9e8:	10802f04 	addi	r2,r2,188
   3a9ec:	014001b4 	movhi	r5,6
   3a9f0:	29726904 	addi	r5,r5,-13916
   3a9f4:	1009883a 	mov	r4,r2
   3a9f8:	000c15c0 	call	c15c <secp256k1_callback_call>
   3a9fc:	0005883a 	mov	r2,zero
   3aa00:	00003406 	br	3aad4 <secp256k1_ec_privkey_tweak_mul+0x168>
    ARG_CHECK(tweak != NULL);
   3aa04:	e0bfff17 	ldw	r2,-4(fp)
   3aa08:	1005003a 	cmpeq	r2,r2,zero
   3aa0c:	10803fcc 	andi	r2,r2,255
   3aa10:	10000826 	beq	r2,zero,3aa34 <secp256k1_ec_privkey_tweak_mul+0xc8>
   3aa14:	e0bffd17 	ldw	r2,-12(fp)
   3aa18:	10802f04 	addi	r2,r2,188
   3aa1c:	014001b4 	movhi	r5,6
   3aa20:	29726d04 	addi	r5,r5,-13900
   3aa24:	1009883a 	mov	r4,r2
   3aa28:	000c15c0 	call	c15c <secp256k1_callback_call>
   3aa2c:	0005883a 	mov	r2,zero
   3aa30:	00002806 	br	3aad4 <secp256k1_ec_privkey_tweak_mul+0x168>

    secp256k1_scalar_set_b32(&factor, tweak, &overflow);
   3aa34:	e0fffc04 	addi	r3,fp,-16
   3aa38:	e0bfec04 	addi	r2,fp,-80
   3aa3c:	180d883a 	mov	r6,r3
   3aa40:	e17fff17 	ldw	r5,-4(fp)
   3aa44:	1009883a 	mov	r4,r2
   3aa48:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    secp256k1_scalar_set_b32(&sec, seckey, NULL);
   3aa4c:	e0bff404 	addi	r2,fp,-48
   3aa50:	000d883a 	mov	r6,zero
   3aa54:	e17ffe17 	ldw	r5,-8(fp)
   3aa58:	1009883a 	mov	r4,r2
   3aa5c:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    ret = !overflow && secp256k1_eckey_privkey_tweak_mul(&sec, &factor);
   3aa60:	e0bffc17 	ldw	r2,-16(fp)
   3aa64:	1000081e 	bne	r2,zero,3aa88 <secp256k1_ec_privkey_tweak_mul+0x11c>
   3aa68:	e0ffec04 	addi	r3,fp,-80
   3aa6c:	e0bff404 	addi	r2,fp,-48
   3aa70:	180b883a 	mov	r5,r3
   3aa74:	1009883a 	mov	r4,r2
   3aa78:	0038ea80 	call	38ea8 <secp256k1_eckey_privkey_tweak_mul>
   3aa7c:	10000226 	beq	r2,zero,3aa88 <secp256k1_ec_privkey_tweak_mul+0x11c>
   3aa80:	00800044 	movi	r2,1
   3aa84:	00000106 	br	3aa8c <secp256k1_ec_privkey_tweak_mul+0x120>
   3aa88:	0005883a 	mov	r2,zero
   3aa8c:	e0bfeb15 	stw	r2,-84(fp)
    memset(seckey, 0, 32);
   3aa90:	01800804 	movi	r6,32
   3aa94:	000b883a 	mov	r5,zero
   3aa98:	e13ffe17 	ldw	r4,-8(fp)
   3aa9c:	0045f3c0 	call	45f3c <memset>
    if (ret) {
   3aaa0:	e0bfeb17 	ldw	r2,-84(fp)
   3aaa4:	10000426 	beq	r2,zero,3aab8 <secp256k1_ec_privkey_tweak_mul+0x14c>
        secp256k1_scalar_get_b32(seckey, &sec);
   3aaa8:	e0bff404 	addi	r2,fp,-48
   3aaac:	100b883a 	mov	r5,r2
   3aab0:	e13ffe17 	ldw	r4,-8(fp)
   3aab4:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    }

    secp256k1_scalar_clear(&sec);
   3aab8:	e0bff404 	addi	r2,fp,-48
   3aabc:	1009883a 	mov	r4,r2
   3aac0:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    secp256k1_scalar_clear(&factor);
   3aac4:	e0bfec04 	addi	r2,fp,-80
   3aac8:	1009883a 	mov	r4,r2
   3aacc:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    return ret;
   3aad0:	e0bfeb17 	ldw	r2,-84(fp)
}
   3aad4:	e037883a 	mov	sp,fp
   3aad8:	dfc00117 	ldw	ra,4(sp)
   3aadc:	df000017 	ldw	fp,0(sp)
   3aae0:	dec00204 	addi	sp,sp,8
   3aae4:	f800283a 	ret

0003aae8 <secp256k1_ec_pubkey_tweak_mul>:

int secp256k1_ec_pubkey_tweak_mul(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {
   3aae8:	deffd704 	addi	sp,sp,-164
   3aaec:	dfc02815 	stw	ra,160(sp)
   3aaf0:	df002715 	stw	fp,156(sp)
   3aaf4:	df002704 	addi	fp,sp,156
   3aaf8:	e13ffd15 	stw	r4,-12(fp)
   3aafc:	e17ffe15 	stw	r5,-8(fp)
   3ab00:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_ge p;
    secp256k1_scalar factor;
    int ret = 0;
   3ab04:	e03fda15 	stw	zero,-152(fp)
    int overflow = 0;
   3ab08:	e03ffc15 	stw	zero,-16(fp)
    VERIFY_CHECK(ctx != NULL);
   3ab0c:	e0bffd17 	ldw	r2,-12(fp)
   3ab10:	1005003a 	cmpeq	r2,r2,zero
   3ab14:	10803fcc 	andi	r2,r2,255
   3ab18:	10000d26 	beq	r2,zero,3ab50 <secp256k1_ec_pubkey_tweak_mul+0x68>
   3ab1c:	d0a01617 	ldw	r2,-32680(gp)
   3ab20:	10c00317 	ldw	r3,12(r2)
   3ab24:	008001b4 	movhi	r2,6
   3ab28:	10b1f704 	addi	r2,r2,-14372
   3ab2c:	d8800015 	stw	r2,0(sp)
   3ab30:	01c07d44 	movi	r7,501
   3ab34:	018001b4 	movhi	r6,6
   3ab38:	31b1ee04 	addi	r6,r6,-14408
   3ab3c:	014001b4 	movhi	r5,6
   3ab40:	296b3804 	addi	r5,r5,-21280
   3ab44:	1809883a 	mov	r4,r3
   3ab48:	00452600 	call	45260 <fprintf>
   3ab4c:	00450340 	call	45034 <abort>
    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));
   3ab50:	e0bffd17 	ldw	r2,-12(fp)
   3ab54:	1009883a 	mov	r4,r2
   3ab58:	0035ab40 	call	35ab4 <secp256k1_ecmult_context_is_built>
   3ab5c:	1005003a 	cmpeq	r2,r2,zero
   3ab60:	10803fcc 	andi	r2,r2,255
   3ab64:	10000826 	beq	r2,zero,3ab88 <secp256k1_ec_pubkey_tweak_mul+0xa0>
   3ab68:	e0bffd17 	ldw	r2,-12(fp)
   3ab6c:	10802f04 	addi	r2,r2,188
   3ab70:	014001b4 	movhi	r5,6
   3ab74:	29724404 	addi	r5,r5,-14064
   3ab78:	1009883a 	mov	r4,r2
   3ab7c:	000c15c0 	call	c15c <secp256k1_callback_call>
   3ab80:	0005883a 	mov	r2,zero
   3ab84:	00003f06 	br	3ac84 <secp256k1_ec_pubkey_tweak_mul+0x19c>
    ARG_CHECK(pubkey != NULL);
   3ab88:	e0bffe17 	ldw	r2,-8(fp)
   3ab8c:	1005003a 	cmpeq	r2,r2,zero
   3ab90:	10803fcc 	andi	r2,r2,255
   3ab94:	10000826 	beq	r2,zero,3abb8 <secp256k1_ec_pubkey_tweak_mul+0xd0>
   3ab98:	e0bffd17 	ldw	r2,-12(fp)
   3ab9c:	10802f04 	addi	r2,r2,188
   3aba0:	014001b4 	movhi	r5,6
   3aba4:	29720004 	addi	r5,r5,-14336
   3aba8:	1009883a 	mov	r4,r2
   3abac:	000c15c0 	call	c15c <secp256k1_callback_call>
   3abb0:	0005883a 	mov	r2,zero
   3abb4:	00003306 	br	3ac84 <secp256k1_ec_pubkey_tweak_mul+0x19c>
    ARG_CHECK(tweak != NULL);
   3abb8:	e0bfff17 	ldw	r2,-4(fp)
   3abbc:	1005003a 	cmpeq	r2,r2,zero
   3abc0:	10803fcc 	andi	r2,r2,255
   3abc4:	10000826 	beq	r2,zero,3abe8 <secp256k1_ec_pubkey_tweak_mul+0x100>
   3abc8:	e0bffd17 	ldw	r2,-12(fp)
   3abcc:	10802f04 	addi	r2,r2,188
   3abd0:	014001b4 	movhi	r5,6
   3abd4:	29726d04 	addi	r5,r5,-13900
   3abd8:	1009883a 	mov	r4,r2
   3abdc:	000c15c0 	call	c15c <secp256k1_callback_call>
   3abe0:	0005883a 	mov	r2,zero
   3abe4:	00002706 	br	3ac84 <secp256k1_ec_pubkey_tweak_mul+0x19c>

    secp256k1_scalar_set_b32(&factor, tweak, &overflow);
   3abe8:	e0fffc04 	addi	r3,fp,-16
   3abec:	e0bff404 	addi	r2,fp,-48
   3abf0:	180d883a 	mov	r6,r3
   3abf4:	e17fff17 	ldw	r5,-4(fp)
   3abf8:	1009883a 	mov	r4,r2
   3abfc:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    ret = !overflow && secp256k1_pubkey_load(ctx, &p, pubkey);
   3ac00:	e0bffc17 	ldw	r2,-16(fp)
   3ac04:	1000081e 	bne	r2,zero,3ac28 <secp256k1_ec_pubkey_tweak_mul+0x140>
   3ac08:	e0bfdb04 	addi	r2,fp,-148
   3ac0c:	e1bffe17 	ldw	r6,-8(fp)
   3ac10:	100b883a 	mov	r5,r2
   3ac14:	e13ffd17 	ldw	r4,-12(fp)
   3ac18:	00392d80 	call	392d8 <secp256k1_pubkey_load>
   3ac1c:	10000226 	beq	r2,zero,3ac28 <secp256k1_ec_pubkey_tweak_mul+0x140>
   3ac20:	00800044 	movi	r2,1
   3ac24:	00000106 	br	3ac2c <secp256k1_ec_pubkey_tweak_mul+0x144>
   3ac28:	0005883a 	mov	r2,zero
   3ac2c:	e0bfda15 	stw	r2,-152(fp)
    memset(pubkey, 0, sizeof(*pubkey));
   3ac30:	01801004 	movi	r6,64
   3ac34:	000b883a 	mov	r5,zero
   3ac38:	e13ffe17 	ldw	r4,-8(fp)
   3ac3c:	0045f3c0 	call	45f3c <memset>
    if (ret) {
   3ac40:	e0bfda17 	ldw	r2,-152(fp)
   3ac44:	10000e26 	beq	r2,zero,3ac80 <secp256k1_ec_pubkey_tweak_mul+0x198>
        if (secp256k1_eckey_pubkey_tweak_mul(&ctx->ecmult_ctx, &p, &factor)) {
   3ac48:	e0bffd17 	ldw	r2,-12(fp)
   3ac4c:	e13ff404 	addi	r4,fp,-48
   3ac50:	e0ffdb04 	addi	r3,fp,-148
   3ac54:	200d883a 	mov	r6,r4
   3ac58:	180b883a 	mov	r5,r3
   3ac5c:	1009883a 	mov	r4,r2
   3ac60:	0038efc0 	call	38efc <secp256k1_eckey_pubkey_tweak_mul>
   3ac64:	10000526 	beq	r2,zero,3ac7c <secp256k1_ec_pubkey_tweak_mul+0x194>
            secp256k1_pubkey_save(pubkey, &p);
   3ac68:	e0bfdb04 	addi	r2,fp,-148
   3ac6c:	100b883a 	mov	r5,r2
   3ac70:	e13ffe17 	ldw	r4,-8(fp)
   3ac74:	00393640 	call	39364 <secp256k1_pubkey_save>
   3ac78:	00000106 	br	3ac80 <secp256k1_ec_pubkey_tweak_mul+0x198>
        } else {
            ret = 0;
   3ac7c:	e03fda15 	stw	zero,-152(fp)
        }
    }

    return ret;
   3ac80:	e0bfda17 	ldw	r2,-152(fp)
}
   3ac84:	e037883a 	mov	sp,fp
   3ac88:	dfc00117 	ldw	ra,4(sp)
   3ac8c:	df000017 	ldw	fp,0(sp)
   3ac90:	dec00204 	addi	sp,sp,8
   3ac94:	f800283a 	ret

0003ac98 <secp256k1_context_randomize>:

int secp256k1_context_randomize(secp256k1_context* ctx, const unsigned char *seed32) {
   3ac98:	defffb04 	addi	sp,sp,-20
   3ac9c:	dfc00415 	stw	ra,16(sp)
   3aca0:	df000315 	stw	fp,12(sp)
   3aca4:	df000304 	addi	fp,sp,12
   3aca8:	e13ffe15 	stw	r4,-8(fp)
   3acac:	e17fff15 	stw	r5,-4(fp)
    VERIFY_CHECK(ctx != NULL);
   3acb0:	e0bffe17 	ldw	r2,-8(fp)
   3acb4:	1005003a 	cmpeq	r2,r2,zero
   3acb8:	10803fcc 	andi	r2,r2,255
   3acbc:	10000d26 	beq	r2,zero,3acf4 <secp256k1_context_randomize+0x5c>
   3acc0:	d0a01617 	ldw	r2,-32680(gp)
   3acc4:	10c00317 	ldw	r3,12(r2)
   3acc8:	008001b4 	movhi	r2,6
   3accc:	10b1f704 	addi	r2,r2,-14372
   3acd0:	d8800015 	stw	r2,0(sp)
   3acd4:	01c08244 	movi	r7,521
   3acd8:	018001b4 	movhi	r6,6
   3acdc:	31b1ee04 	addi	r6,r6,-14408
   3ace0:	014001b4 	movhi	r5,6
   3ace4:	296b3804 	addi	r5,r5,-21280
   3ace8:	1809883a 	mov	r4,r3
   3acec:	00452600 	call	45260 <fprintf>
   3acf0:	00450340 	call	45034 <abort>
    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
   3acf4:	e0bffe17 	ldw	r2,-8(fp)
   3acf8:	10800104 	addi	r2,r2,4
   3acfc:	1009883a 	mov	r4,r2
   3ad00:	0037a9c0 	call	37a9c <secp256k1_ecmult_gen_context_is_built>
   3ad04:	1005003a 	cmpeq	r2,r2,zero
   3ad08:	10803fcc 	andi	r2,r2,255
   3ad0c:	10000826 	beq	r2,zero,3ad30 <secp256k1_context_randomize+0x98>
   3ad10:	e0bffe17 	ldw	r2,-8(fp)
   3ad14:	10802f04 	addi	r2,r2,188
   3ad18:	014001b4 	movhi	r5,6
   3ad1c:	29725504 	addi	r5,r5,-13996
   3ad20:	1009883a 	mov	r4,r2
   3ad24:	000c15c0 	call	c15c <secp256k1_callback_call>
   3ad28:	0005883a 	mov	r2,zero
   3ad2c:	00000606 	br	3ad48 <secp256k1_context_randomize+0xb0>
    secp256k1_ecmult_gen_blind(&ctx->ecmult_gen_ctx, seed32);
   3ad30:	e0bffe17 	ldw	r2,-8(fp)
   3ad34:	10800104 	addi	r2,r2,4
   3ad38:	e17fff17 	ldw	r5,-4(fp)
   3ad3c:	1009883a 	mov	r4,r2
   3ad40:	0037d980 	call	37d98 <secp256k1_ecmult_gen_blind>
    return 1;
   3ad44:	00800044 	movi	r2,1
}
   3ad48:	e037883a 	mov	sp,fp
   3ad4c:	dfc00117 	ldw	ra,4(sp)
   3ad50:	df000017 	ldw	fp,0(sp)
   3ad54:	dec00204 	addi	sp,sp,8
   3ad58:	f800283a 	ret

0003ad5c <secp256k1_ec_pubkey_combine>:

int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *pubnonce, const secp256k1_pubkey * const *pubnonces, size_t n) {
   3ad5c:	deffbb04 	addi	sp,sp,-276
   3ad60:	dfc04415 	stw	ra,272(sp)
   3ad64:	df004315 	stw	fp,268(sp)
   3ad68:	df004304 	addi	fp,sp,268
   3ad6c:	e13ffc15 	stw	r4,-16(fp)
   3ad70:	e17ffd15 	stw	r5,-12(fp)
   3ad74:	e1bffe15 	stw	r6,-8(fp)
   3ad78:	e1ffff15 	stw	r7,-4(fp)
    size_t i;
    secp256k1_gej Qj;
    secp256k1_ge Q;

    ARG_CHECK(pubnonce != NULL);
   3ad7c:	e0bffd17 	ldw	r2,-12(fp)
   3ad80:	1005003a 	cmpeq	r2,r2,zero
   3ad84:	10803fcc 	andi	r2,r2,255
   3ad88:	10000826 	beq	r2,zero,3adac <secp256k1_ec_pubkey_combine+0x50>
   3ad8c:	e0bffc17 	ldw	r2,-16(fp)
   3ad90:	10802f04 	addi	r2,r2,188
   3ad94:	014001b4 	movhi	r5,6
   3ad98:	29727104 	addi	r5,r5,-13884
   3ad9c:	1009883a 	mov	r4,r2
   3ada0:	000c15c0 	call	c15c <secp256k1_callback_call>
   3ada4:	0005883a 	mov	r2,zero
   3ada8:	00004a06 	br	3aed4 <secp256k1_ec_pubkey_combine+0x178>
    memset(pubnonce, 0, sizeof(*pubnonce));
   3adac:	01801004 	movi	r6,64
   3adb0:	000b883a 	mov	r5,zero
   3adb4:	e13ffd17 	ldw	r4,-12(fp)
   3adb8:	0045f3c0 	call	45f3c <memset>
    ARG_CHECK(n >= 1);
   3adbc:	e0bfff17 	ldw	r2,-4(fp)
   3adc0:	1005003a 	cmpeq	r2,r2,zero
   3adc4:	10803fcc 	andi	r2,r2,255
   3adc8:	10000826 	beq	r2,zero,3adec <secp256k1_ec_pubkey_combine+0x90>
   3adcc:	e0bffc17 	ldw	r2,-16(fp)
   3add0:	10802f04 	addi	r2,r2,188
   3add4:	014001b4 	movhi	r5,6
   3add8:	29727604 	addi	r5,r5,-13864
   3addc:	1009883a 	mov	r4,r2
   3ade0:	000c15c0 	call	c15c <secp256k1_callback_call>
   3ade4:	0005883a 	mov	r2,zero
   3ade8:	00003a06 	br	3aed4 <secp256k1_ec_pubkey_combine+0x178>
    ARG_CHECK(pubnonces != NULL);
   3adec:	e0bffe17 	ldw	r2,-8(fp)
   3adf0:	1005003a 	cmpeq	r2,r2,zero
   3adf4:	10803fcc 	andi	r2,r2,255
   3adf8:	10000826 	beq	r2,zero,3ae1c <secp256k1_ec_pubkey_combine+0xc0>
   3adfc:	e0bffc17 	ldw	r2,-16(fp)
   3ae00:	10802f04 	addi	r2,r2,188
   3ae04:	014001b4 	movhi	r5,6
   3ae08:	29727804 	addi	r5,r5,-13856
   3ae0c:	1009883a 	mov	r4,r2
   3ae10:	000c15c0 	call	c15c <secp256k1_callback_call>
   3ae14:	0005883a 	mov	r2,zero
   3ae18:	00002e06 	br	3aed4 <secp256k1_ec_pubkey_combine+0x178>

    secp256k1_gej_set_infinity(&Qj);
   3ae1c:	e0bfbe04 	addi	r2,fp,-264
   3ae20:	1009883a 	mov	r4,r2
   3ae24:	0020c080 	call	20c08 <secp256k1_gej_set_infinity>

    for (i = 0; i < n; i++) {
   3ae28:	e03fbd15 	stw	zero,-268(fp)
   3ae2c:	00001606 	br	3ae88 <secp256k1_ec_pubkey_combine+0x12c>
        secp256k1_pubkey_load(ctx, &Q, pubnonces[i]);
   3ae30:	e0bfbd17 	ldw	r2,-268(fp)
   3ae34:	1085883a 	add	r2,r2,r2
   3ae38:	1085883a 	add	r2,r2,r2
   3ae3c:	1007883a 	mov	r3,r2
   3ae40:	e0bffe17 	ldw	r2,-8(fp)
   3ae44:	10c5883a 	add	r2,r2,r3
   3ae48:	10c00017 	ldw	r3,0(r2)
   3ae4c:	e0bfe304 	addi	r2,fp,-116
   3ae50:	180d883a 	mov	r6,r3
   3ae54:	100b883a 	mov	r5,r2
   3ae58:	e13ffc17 	ldw	r4,-16(fp)
   3ae5c:	00392d80 	call	392d8 <secp256k1_pubkey_load>
        secp256k1_gej_add_ge(&Qj, &Qj, &Q);
   3ae60:	e13fe304 	addi	r4,fp,-116
   3ae64:	e0ffbe04 	addi	r3,fp,-264
   3ae68:	e0bfbe04 	addi	r2,fp,-264
   3ae6c:	200d883a 	mov	r6,r4
   3ae70:	180b883a 	mov	r5,r3
   3ae74:	1009883a 	mov	r4,r2
   3ae78:	00227500 	call	22750 <secp256k1_gej_add_ge>
    ARG_CHECK(n >= 1);
    ARG_CHECK(pubnonces != NULL);

    secp256k1_gej_set_infinity(&Qj);

    for (i = 0; i < n; i++) {
   3ae7c:	e0bfbd17 	ldw	r2,-268(fp)
   3ae80:	10800044 	addi	r2,r2,1
   3ae84:	e0bfbd15 	stw	r2,-268(fp)
   3ae88:	e0ffbd17 	ldw	r3,-268(fp)
   3ae8c:	e0bfff17 	ldw	r2,-4(fp)
   3ae90:	18bfe736 	bltu	r3,r2,3ae30 <__alt_mem_epcs_flash_controller+0xfe029e30>
        secp256k1_pubkey_load(ctx, &Q, pubnonces[i]);
        secp256k1_gej_add_ge(&Qj, &Qj, &Q);
    }
    if (secp256k1_gej_is_infinity(&Qj)) {
   3ae94:	e0bfbe04 	addi	r2,fp,-264
   3ae98:	1009883a 	mov	r4,r2
   3ae9c:	002129c0 	call	2129c <secp256k1_gej_is_infinity>
   3aea0:	10000226 	beq	r2,zero,3aeac <secp256k1_ec_pubkey_combine+0x150>
        return 0;
   3aea4:	0005883a 	mov	r2,zero
   3aea8:	00000a06 	br	3aed4 <secp256k1_ec_pubkey_combine+0x178>
    }
    secp256k1_ge_set_gej(&Q, &Qj);
   3aeac:	e0ffbe04 	addi	r3,fp,-264
   3aeb0:	e0bfe304 	addi	r2,fp,-116
   3aeb4:	180b883a 	mov	r5,r3
   3aeb8:	1009883a 	mov	r4,r2
   3aebc:	00201d00 	call	201d0 <secp256k1_ge_set_gej>
    secp256k1_pubkey_save(pubnonce, &Q);
   3aec0:	e0bfe304 	addi	r2,fp,-116
   3aec4:	100b883a 	mov	r5,r2
   3aec8:	e13ffd17 	ldw	r4,-12(fp)
   3aecc:	00393640 	call	39364 <secp256k1_pubkey_save>
    return 1;
   3aed0:	00800044 	movi	r2,1
}
   3aed4:	e037883a 	mov	sp,fp
   3aed8:	dfc00117 	ldw	ra,4(sp)
   3aedc:	df000017 	ldw	fp,0(sp)
   3aee0:	dec00204 	addi	sp,sp,8
   3aee4:	f800283a 	ret

0003aee8 <secp256k1_ecdsa_recoverable_signature_load>:
#ifndef _SECP256K1_MODULE_RECOVERY_MAIN_
#define _SECP256K1_MODULE_RECOVERY_MAIN_

#include "../../../include/secp256k1_recovery.h"

static void secp256k1_ecdsa_recoverable_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, int* recid, const secp256k1_ecdsa_recoverable_signature* sig) {
   3aee8:	defffa04 	addi	sp,sp,-24
   3aeec:	dfc00515 	stw	ra,20(sp)
   3aef0:	df000415 	stw	fp,16(sp)
   3aef4:	df000404 	addi	fp,sp,16
   3aef8:	e13ffc15 	stw	r4,-16(fp)
   3aefc:	e17ffd15 	stw	r5,-12(fp)
   3af00:	e1bffe15 	stw	r6,-8(fp)
   3af04:	e1ffff15 	stw	r7,-4(fp)
    (void)ctx;
    if (sizeof(secp256k1_scalar) == 32) {
        /* When the secp256k1_scalar type is exactly 32 byte, use its
         * representation inside secp256k1_ecdsa_signature, as conversion is very fast.
         * Note that secp256k1_ecdsa_signature_save must use the same representation. */
        memcpy(r, &sig->data[0], 32);
   3af08:	e0800217 	ldw	r2,8(fp)
   3af0c:	01800804 	movi	r6,32
   3af10:	100b883a 	mov	r5,r2
   3af14:	e13ffd17 	ldw	r4,-12(fp)
   3af18:	0045c980 	call	45c98 <memcpy>
        memcpy(s, &sig->data[32], 32);
   3af1c:	e0800217 	ldw	r2,8(fp)
   3af20:	10800804 	addi	r2,r2,32
   3af24:	01800804 	movi	r6,32
   3af28:	100b883a 	mov	r5,r2
   3af2c:	e13ffe17 	ldw	r4,-8(fp)
   3af30:	0045c980 	call	45c98 <memcpy>
    } else {
        secp256k1_scalar_set_b32(r, &sig->data[0], NULL);
        secp256k1_scalar_set_b32(s, &sig->data[32], NULL);
    }
    *recid = sig->data[64];
   3af34:	e0800217 	ldw	r2,8(fp)
   3af38:	10801003 	ldbu	r2,64(r2)
   3af3c:	10c03fcc 	andi	r3,r2,255
   3af40:	e0bfff17 	ldw	r2,-4(fp)
   3af44:	10c00015 	stw	r3,0(r2)
}
   3af48:	0001883a 	nop
   3af4c:	e037883a 	mov	sp,fp
   3af50:	dfc00117 	ldw	ra,4(sp)
   3af54:	df000017 	ldw	fp,0(sp)
   3af58:	dec00204 	addi	sp,sp,8
   3af5c:	f800283a 	ret

0003af60 <secp256k1_ecdsa_recoverable_signature_save>:

static void secp256k1_ecdsa_recoverable_signature_save(secp256k1_ecdsa_recoverable_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s, int recid) {
   3af60:	defffa04 	addi	sp,sp,-24
   3af64:	dfc00515 	stw	ra,20(sp)
   3af68:	df000415 	stw	fp,16(sp)
   3af6c:	df000404 	addi	fp,sp,16
   3af70:	e13ffc15 	stw	r4,-16(fp)
   3af74:	e17ffd15 	stw	r5,-12(fp)
   3af78:	e1bffe15 	stw	r6,-8(fp)
   3af7c:	e1ffff15 	stw	r7,-4(fp)
    if (sizeof(secp256k1_scalar) == 32) {
        memcpy(&sig->data[0], r, 32);
   3af80:	e0bffc17 	ldw	r2,-16(fp)
   3af84:	01800804 	movi	r6,32
   3af88:	e17ffd17 	ldw	r5,-12(fp)
   3af8c:	1009883a 	mov	r4,r2
   3af90:	0045c980 	call	45c98 <memcpy>
        memcpy(&sig->data[32], s, 32);
   3af94:	e0bffc17 	ldw	r2,-16(fp)
   3af98:	10800804 	addi	r2,r2,32
   3af9c:	01800804 	movi	r6,32
   3afa0:	e17ffe17 	ldw	r5,-8(fp)
   3afa4:	1009883a 	mov	r4,r2
   3afa8:	0045c980 	call	45c98 <memcpy>
    } else {
        secp256k1_scalar_get_b32(&sig->data[0], r);
        secp256k1_scalar_get_b32(&sig->data[32], s);
    }
    sig->data[64] = recid;
   3afac:	e0bfff17 	ldw	r2,-4(fp)
   3afb0:	1007883a 	mov	r3,r2
   3afb4:	e0bffc17 	ldw	r2,-16(fp)
   3afb8:	10c01005 	stb	r3,64(r2)
}
   3afbc:	0001883a 	nop
   3afc0:	e037883a 	mov	sp,fp
   3afc4:	dfc00117 	ldw	ra,4(sp)
   3afc8:	df000017 	ldw	fp,0(sp)
   3afcc:	dec00204 	addi	sp,sp,8
   3afd0:	f800283a 	ret

0003afd4 <secp256k1_ecdsa_recoverable_signature_parse_compact>:

int secp256k1_ecdsa_recoverable_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature* sig, const unsigned char *input64, int recid) {
   3afd4:	deffe804 	addi	sp,sp,-96
   3afd8:	dfc01715 	stw	ra,92(sp)
   3afdc:	df001615 	stw	fp,88(sp)
   3afe0:	df001604 	addi	fp,sp,88
   3afe4:	e13ffc15 	stw	r4,-16(fp)
   3afe8:	e17ffd15 	stw	r5,-12(fp)
   3afec:	e1bffe15 	stw	r6,-8(fp)
   3aff0:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;
    int ret = 1;
   3aff4:	00800044 	movi	r2,1
   3aff8:	e0bfea15 	stw	r2,-88(fp)
    int overflow = 0;
   3affc:	e03ffb15 	stw	zero,-20(fp)

    (void)ctx;
    ARG_CHECK(sig != NULL);
   3b000:	e0bffd17 	ldw	r2,-12(fp)
   3b004:	1005003a 	cmpeq	r2,r2,zero
   3b008:	10803fcc 	andi	r2,r2,255
   3b00c:	10000826 	beq	r2,zero,3b030 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x5c>
   3b010:	e0bffc17 	ldw	r2,-16(fp)
   3b014:	10802f04 	addi	r2,r2,188
   3b018:	014001b4 	movhi	r5,6
   3b01c:	29723404 	addi	r5,r5,-14128
   3b020:	1009883a 	mov	r4,r2
   3b024:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b028:	0005883a 	mov	r2,zero
   3b02c:	00004506 	br	3b144 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x170>
    ARG_CHECK(input64 != NULL);
   3b030:	e0bffe17 	ldw	r2,-8(fp)
   3b034:	1005003a 	cmpeq	r2,r2,zero
   3b038:	10803fcc 	andi	r2,r2,255
   3b03c:	10000826 	beq	r2,zero,3b060 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x8c>
   3b040:	e0bffc17 	ldw	r2,-16(fp)
   3b044:	10802f04 	addi	r2,r2,188
   3b048:	014001b4 	movhi	r5,6
   3b04c:	29723704 	addi	r5,r5,-14116
   3b050:	1009883a 	mov	r4,r2
   3b054:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b058:	0005883a 	mov	r2,zero
   3b05c:	00003906 	br	3b144 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x170>
    ARG_CHECK(recid >= 0 && recid <= 3);
   3b060:	e0bfff17 	ldw	r2,-4(fp)
   3b064:	1004d7fa 	srli	r2,r2,31
   3b068:	10803fcc 	andi	r2,r2,255
   3b06c:	1000041e 	bne	r2,zero,3b080 <secp256k1_ecdsa_recoverable_signature_parse_compact+0xac>
   3b070:	e0bfff17 	ldw	r2,-4(fp)
   3b074:	10800108 	cmpgei	r2,r2,4
   3b078:	10803fcc 	andi	r2,r2,255
   3b07c:	10000826 	beq	r2,zero,3b0a0 <secp256k1_ecdsa_recoverable_signature_parse_compact+0xcc>
   3b080:	e0bffc17 	ldw	r2,-16(fp)
   3b084:	10802f04 	addi	r2,r2,188
   3b088:	014001b4 	movhi	r5,6
   3b08c:	29727d04 	addi	r5,r5,-13836
   3b090:	1009883a 	mov	r4,r2
   3b094:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b098:	0005883a 	mov	r2,zero
   3b09c:	00002906 	br	3b144 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x170>

    secp256k1_scalar_set_b32(&r, &input64[0], &overflow);
   3b0a0:	e0fffb04 	addi	r3,fp,-20
   3b0a4:	e0bfeb04 	addi	r2,fp,-84
   3b0a8:	180d883a 	mov	r6,r3
   3b0ac:	e17ffe17 	ldw	r5,-8(fp)
   3b0b0:	1009883a 	mov	r4,r2
   3b0b4:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    ret &= !overflow;
   3b0b8:	e0bffb17 	ldw	r2,-20(fp)
   3b0bc:	1005003a 	cmpeq	r2,r2,zero
   3b0c0:	10803fcc 	andi	r2,r2,255
   3b0c4:	e0ffea17 	ldw	r3,-88(fp)
   3b0c8:	1884703a 	and	r2,r3,r2
   3b0cc:	e0bfea15 	stw	r2,-88(fp)
    secp256k1_scalar_set_b32(&s, &input64[32], &overflow);
   3b0d0:	e0bffe17 	ldw	r2,-8(fp)
   3b0d4:	10c00804 	addi	r3,r2,32
   3b0d8:	e13ffb04 	addi	r4,fp,-20
   3b0dc:	e0bff304 	addi	r2,fp,-52
   3b0e0:	200d883a 	mov	r6,r4
   3b0e4:	180b883a 	mov	r5,r3
   3b0e8:	1009883a 	mov	r4,r2
   3b0ec:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    ret &= !overflow;
   3b0f0:	e0bffb17 	ldw	r2,-20(fp)
   3b0f4:	1005003a 	cmpeq	r2,r2,zero
   3b0f8:	10803fcc 	andi	r2,r2,255
   3b0fc:	e0ffea17 	ldw	r3,-88(fp)
   3b100:	1884703a 	and	r2,r3,r2
   3b104:	e0bfea15 	stw	r2,-88(fp)
    if (ret) {
   3b108:	e0bfea17 	ldw	r2,-88(fp)
   3b10c:	10000826 	beq	r2,zero,3b130 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x15c>
        secp256k1_ecdsa_recoverable_signature_save(sig, &r, &s, recid);
   3b110:	e0fff304 	addi	r3,fp,-52
   3b114:	e0bfeb04 	addi	r2,fp,-84
   3b118:	e1ffff17 	ldw	r7,-4(fp)
   3b11c:	180d883a 	mov	r6,r3
   3b120:	100b883a 	mov	r5,r2
   3b124:	e13ffd17 	ldw	r4,-12(fp)
   3b128:	003af600 	call	3af60 <secp256k1_ecdsa_recoverable_signature_save>
   3b12c:	00000406 	br	3b140 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x16c>
    } else {
        memset(sig, 0, sizeof(*sig));
   3b130:	01801044 	movi	r6,65
   3b134:	000b883a 	mov	r5,zero
   3b138:	e13ffd17 	ldw	r4,-12(fp)
   3b13c:	0045f3c0 	call	45f3c <memset>
    }
    return ret;
   3b140:	e0bfea17 	ldw	r2,-88(fp)
}
   3b144:	e037883a 	mov	sp,fp
   3b148:	dfc00117 	ldw	ra,4(sp)
   3b14c:	df000017 	ldw	fp,0(sp)
   3b150:	dec00204 	addi	sp,sp,8
   3b154:	f800283a 	ret

0003b158 <secp256k1_ecdsa_recoverable_signature_serialize_compact>:

int secp256k1_ecdsa_recoverable_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, int *recid, const secp256k1_ecdsa_recoverable_signature* sig) {
   3b158:	deffe904 	addi	sp,sp,-92
   3b15c:	dfc01615 	stw	ra,88(sp)
   3b160:	df001515 	stw	fp,84(sp)
   3b164:	df001504 	addi	fp,sp,84
   3b168:	e13ffc15 	stw	r4,-16(fp)
   3b16c:	e17ffd15 	stw	r5,-12(fp)
   3b170:	e1bffe15 	stw	r6,-8(fp)
   3b174:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;

    (void)ctx;
    ARG_CHECK(output64 != NULL);
   3b178:	e0bffd17 	ldw	r2,-12(fp)
   3b17c:	1005003a 	cmpeq	r2,r2,zero
   3b180:	10803fcc 	andi	r2,r2,255
   3b184:	10000826 	beq	r2,zero,3b1a8 <secp256k1_ecdsa_recoverable_signature_serialize_compact+0x50>
   3b188:	e0bffc17 	ldw	r2,-16(fp)
   3b18c:	10802f04 	addi	r2,r2,188
   3b190:	014001b4 	movhi	r5,6
   3b194:	29723b04 	addi	r5,r5,-14100
   3b198:	1009883a 	mov	r4,r2
   3b19c:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b1a0:	0005883a 	mov	r2,zero
   3b1a4:	00002a06 	br	3b250 <secp256k1_ecdsa_recoverable_signature_serialize_compact+0xf8>
    ARG_CHECK(sig != NULL);
   3b1a8:	e0bfff17 	ldw	r2,-4(fp)
   3b1ac:	1005003a 	cmpeq	r2,r2,zero
   3b1b0:	10803fcc 	andi	r2,r2,255
   3b1b4:	10000826 	beq	r2,zero,3b1d8 <secp256k1_ecdsa_recoverable_signature_serialize_compact+0x80>
   3b1b8:	e0bffc17 	ldw	r2,-16(fp)
   3b1bc:	10802f04 	addi	r2,r2,188
   3b1c0:	014001b4 	movhi	r5,6
   3b1c4:	29723404 	addi	r5,r5,-14128
   3b1c8:	1009883a 	mov	r4,r2
   3b1cc:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b1d0:	0005883a 	mov	r2,zero
   3b1d4:	00001e06 	br	3b250 <secp256k1_ecdsa_recoverable_signature_serialize_compact+0xf8>
    ARG_CHECK(recid != NULL);
   3b1d8:	e0bffe17 	ldw	r2,-8(fp)
   3b1dc:	1005003a 	cmpeq	r2,r2,zero
   3b1e0:	10803fcc 	andi	r2,r2,255
   3b1e4:	10000826 	beq	r2,zero,3b208 <secp256k1_ecdsa_recoverable_signature_serialize_compact+0xb0>
   3b1e8:	e0bffc17 	ldw	r2,-16(fp)
   3b1ec:	10802f04 	addi	r2,r2,188
   3b1f0:	014001b4 	movhi	r5,6
   3b1f4:	29728404 	addi	r5,r5,-13808
   3b1f8:	1009883a 	mov	r4,r2
   3b1fc:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b200:	0005883a 	mov	r2,zero
   3b204:	00001206 	br	3b250 <secp256k1_ecdsa_recoverable_signature_serialize_compact+0xf8>

    secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, recid, sig);
   3b208:	e0fff404 	addi	r3,fp,-48
   3b20c:	e0bfff17 	ldw	r2,-4(fp)
   3b210:	d8800015 	stw	r2,0(sp)
   3b214:	e1fffe17 	ldw	r7,-8(fp)
   3b218:	180d883a 	mov	r6,r3
   3b21c:	e17fec04 	addi	r5,fp,-80
   3b220:	e13ffc17 	ldw	r4,-16(fp)
   3b224:	003aee80 	call	3aee8 <secp256k1_ecdsa_recoverable_signature_load>
    secp256k1_scalar_get_b32(&output64[0], &r);
   3b228:	e17fec04 	addi	r5,fp,-80
   3b22c:	e13ffd17 	ldw	r4,-12(fp)
   3b230:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    secp256k1_scalar_get_b32(&output64[32], &s);
   3b234:	e0bffd17 	ldw	r2,-12(fp)
   3b238:	10800804 	addi	r2,r2,32
   3b23c:	e0fff404 	addi	r3,fp,-48
   3b240:	180b883a 	mov	r5,r3
   3b244:	1009883a 	mov	r4,r2
   3b248:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    return 1;
   3b24c:	00800044 	movi	r2,1
}
   3b250:	e037883a 	mov	sp,fp
   3b254:	dfc00117 	ldw	ra,4(sp)
   3b258:	df000017 	ldw	fp,0(sp)
   3b25c:	dec00204 	addi	sp,sp,8
   3b260:	f800283a 	ret

0003b264 <secp256k1_ecdsa_recoverable_signature_convert>:

int secp256k1_ecdsa_recoverable_signature_convert(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const secp256k1_ecdsa_recoverable_signature* sigin) {
   3b264:	deffe904 	addi	sp,sp,-92
   3b268:	dfc01615 	stw	ra,88(sp)
   3b26c:	df001515 	stw	fp,84(sp)
   3b270:	df001504 	addi	fp,sp,84
   3b274:	e13ffd15 	stw	r4,-12(fp)
   3b278:	e17ffe15 	stw	r5,-8(fp)
   3b27c:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar r, s;
    int recid;

    (void)ctx;
    ARG_CHECK(sig != NULL);
   3b280:	e0bffe17 	ldw	r2,-8(fp)
   3b284:	1005003a 	cmpeq	r2,r2,zero
   3b288:	10803fcc 	andi	r2,r2,255
   3b28c:	10000826 	beq	r2,zero,3b2b0 <secp256k1_ecdsa_recoverable_signature_convert+0x4c>
   3b290:	e0bffd17 	ldw	r2,-12(fp)
   3b294:	10802f04 	addi	r2,r2,188
   3b298:	014001b4 	movhi	r5,6
   3b29c:	29723404 	addi	r5,r5,-14128
   3b2a0:	1009883a 	mov	r4,r2
   3b2a4:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b2a8:	0005883a 	mov	r2,zero
   3b2ac:	00001b06 	br	3b31c <secp256k1_ecdsa_recoverable_signature_convert+0xb8>
    ARG_CHECK(sigin != NULL);
   3b2b0:	e0bfff17 	ldw	r2,-4(fp)
   3b2b4:	1005003a 	cmpeq	r2,r2,zero
   3b2b8:	10803fcc 	andi	r2,r2,255
   3b2bc:	10000826 	beq	r2,zero,3b2e0 <secp256k1_ecdsa_recoverable_signature_convert+0x7c>
   3b2c0:	e0bffd17 	ldw	r2,-12(fp)
   3b2c4:	10802f04 	addi	r2,r2,188
   3b2c8:	014001b4 	movhi	r5,6
   3b2cc:	29724004 	addi	r5,r5,-14080
   3b2d0:	1009883a 	mov	r4,r2
   3b2d4:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b2d8:	0005883a 	mov	r2,zero
   3b2dc:	00000f06 	br	3b31c <secp256k1_ecdsa_recoverable_signature_convert+0xb8>

    secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, sigin);
   3b2e0:	e13ffc04 	addi	r4,fp,-16
   3b2e4:	e0fff404 	addi	r3,fp,-48
   3b2e8:	e0bfff17 	ldw	r2,-4(fp)
   3b2ec:	d8800015 	stw	r2,0(sp)
   3b2f0:	200f883a 	mov	r7,r4
   3b2f4:	180d883a 	mov	r6,r3
   3b2f8:	e17fec04 	addi	r5,fp,-80
   3b2fc:	e13ffd17 	ldw	r4,-12(fp)
   3b300:	003aee80 	call	3aee8 <secp256k1_ecdsa_recoverable_signature_load>
    secp256k1_ecdsa_signature_save(sig, &r, &s);
   3b304:	e0bff404 	addi	r2,fp,-48
   3b308:	100d883a 	mov	r6,r2
   3b30c:	e17fec04 	addi	r5,fp,-80
   3b310:	e13ffe17 	ldw	r4,-8(fp)
   3b314:	00397400 	call	39740 <secp256k1_ecdsa_signature_save>
    return 1;
   3b318:	00800044 	movi	r2,1
}
   3b31c:	e037883a 	mov	sp,fp
   3b320:	dfc00117 	ldw	ra,4(sp)
   3b324:	df000017 	ldw	fp,0(sp)
   3b328:	dec00204 	addi	sp,sp,8
   3b32c:	f800283a 	ret

0003b330 <secp256k1_ecdsa_sig_recover>:

static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar* sigs, secp256k1_ge *pubkey, const secp256k1_scalar *message, int recid) {
   3b330:	deff6904 	addi	sp,sp,-604
   3b334:	dfc09615 	stw	ra,600(sp)
   3b338:	df009515 	stw	fp,596(sp)
   3b33c:	df009504 	addi	fp,sp,596
   3b340:	e13ffc15 	stw	r4,-16(fp)
   3b344:	e17ffd15 	stw	r5,-12(fp)
   3b348:	e1bffe15 	stw	r6,-8(fp)
   3b34c:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_gej xj;
    secp256k1_scalar rn, u1, u2;
    secp256k1_gej qj;
    int r;

    if (secp256k1_scalar_is_zero(sigr) || secp256k1_scalar_is_zero(sigs)) {
   3b350:	e13ffd17 	ldw	r4,-12(fp)
   3b354:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   3b358:	1000031e 	bne	r2,zero,3b368 <secp256k1_ecdsa_sig_recover+0x38>
   3b35c:	e13ffe17 	ldw	r4,-8(fp)
   3b360:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   3b364:	10000226 	beq	r2,zero,3b370 <secp256k1_ecdsa_sig_recover+0x40>
        return 0;
   3b368:	0005883a 	mov	r2,zero
   3b36c:	00006306 	br	3b4fc <secp256k1_ecdsa_sig_recover+0x1cc>
    }

    secp256k1_scalar_get_b32(brx, sigr);
   3b370:	e0bf6d04 	addi	r2,fp,-588
   3b374:	e17ffd17 	ldw	r5,-12(fp)
   3b378:	1009883a 	mov	r4,r2
   3b37c:	00249e80 	call	249e8 <secp256k1_scalar_get_b32>
    r = secp256k1_fe_set_b32(&fx, brx);
   3b380:	e0ff6d04 	addi	r3,fp,-588
   3b384:	e0bf7504 	addi	r2,fp,-556
   3b388:	180b883a 	mov	r5,r3
   3b38c:	1009883a 	mov	r4,r2
   3b390:	0013a280 	call	13a28 <secp256k1_fe_set_b32>
   3b394:	e0bf6c15 	stw	r2,-592(fp)
    (void)r;
    VERIFY_CHECK(r); /* brx comes from a scalar, so is less than the order; certainly less than p */
   3b398:	e0bf6c17 	ldw	r2,-592(fp)
   3b39c:	1005003a 	cmpeq	r2,r2,zero
   3b3a0:	10803fcc 	andi	r2,r2,255
   3b3a4:	10000d26 	beq	r2,zero,3b3dc <secp256k1_ecdsa_sig_recover+0xac>
   3b3a8:	d0a01617 	ldw	r2,-32680(gp)
   3b3ac:	10c00317 	ldw	r3,12(r2)
   3b3b0:	008001b4 	movhi	r2,6
   3b3b4:	10b1ab04 	addi	r2,r2,-14676
   3b3b8:	d8800015 	stw	r2,0(sp)
   3b3bc:	01c019c4 	movi	r7,103
   3b3c0:	018001b4 	movhi	r6,6
   3b3c4:	31b28804 	addi	r6,r6,-13792
   3b3c8:	014001b4 	movhi	r5,6
   3b3cc:	296b3804 	addi	r5,r5,-21280
   3b3d0:	1809883a 	mov	r4,r3
   3b3d4:	00452600 	call	45260 <fprintf>
   3b3d8:	00450340 	call	45034 <abort>
    if (recid & 2) {
   3b3dc:	e0800317 	ldw	r2,12(fp)
   3b3e0:	1080008c 	andi	r2,r2,2
   3b3e4:	10000d26 	beq	r2,zero,3b41c <secp256k1_ecdsa_sig_recover+0xec>
        if (secp256k1_fe_cmp_var(&fx, &secp256k1_ecdsa_const_p_minus_order) >= 0) {
   3b3e8:	e0bf7504 	addi	r2,fp,-556
   3b3ec:	014001b4 	movhi	r5,6
   3b3f0:	2971be04 	addi	r5,r5,-14600
   3b3f4:	1009883a 	mov	r4,r2
   3b3f8:	00138c00 	call	138c0 <secp256k1_fe_cmp_var>
   3b3fc:	10000216 	blt	r2,zero,3b408 <secp256k1_ecdsa_sig_recover+0xd8>
            return 0;
   3b400:	0005883a 	mov	r2,zero
   3b404:	00003d06 	br	3b4fc <secp256k1_ecdsa_sig_recover+0x1cc>
        }
        secp256k1_fe_add(&fx, &secp256k1_ecdsa_const_order_as_fe);
   3b408:	e0bf7504 	addi	r2,fp,-556
   3b40c:	014001b4 	movhi	r5,6
   3b410:	2971b204 	addi	r5,r5,-14648
   3b414:	1009883a 	mov	r4,r2
   3b418:	00142340 	call	14234 <secp256k1_fe_add>
    }
    if (!secp256k1_ge_set_xo_var(&x, &fx, recid & 1)) {
   3b41c:	e0800317 	ldw	r2,12(fp)
   3b420:	1100004c 	andi	r4,r2,1
   3b424:	e0ff7504 	addi	r3,fp,-556
   3b428:	e0bf8104 	addi	r2,fp,-508
   3b42c:	200d883a 	mov	r6,r4
   3b430:	180b883a 	mov	r5,r3
   3b434:	1009883a 	mov	r4,r2
   3b438:	0020e200 	call	20e20 <secp256k1_ge_set_xo_var>
   3b43c:	1000021e 	bne	r2,zero,3b448 <secp256k1_ecdsa_sig_recover+0x118>
        return 0;
   3b440:	0005883a 	mov	r2,zero
   3b444:	00002d06 	br	3b4fc <secp256k1_ecdsa_sig_recover+0x1cc>
    }
    secp256k1_gej_set_ge(&xj, &x);
   3b448:	e0ff8104 	addi	r3,fp,-508
   3b44c:	e0bf9a04 	addi	r2,fp,-408
   3b450:	180b883a 	mov	r5,r3
   3b454:	1009883a 	mov	r4,r2
   3b458:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
    secp256k1_scalar_inverse_var(&rn, sigr);
   3b45c:	e0bfbf04 	addi	r2,fp,-260
   3b460:	e17ffd17 	ldw	r5,-12(fp)
   3b464:	1009883a 	mov	r4,r2
   3b468:	00353900 	call	35390 <secp256k1_scalar_inverse_var>
    secp256k1_scalar_mul(&u1, &rn, message);
   3b46c:	e0ffbf04 	addi	r3,fp,-260
   3b470:	e0bfc704 	addi	r2,fp,-228
   3b474:	e1800217 	ldw	r6,8(fp)
   3b478:	180b883a 	mov	r5,r3
   3b47c:	1009883a 	mov	r4,r2
   3b480:	00345580 	call	34558 <secp256k1_scalar_mul>
    secp256k1_scalar_negate(&u1, &u1);
   3b484:	e0ffc704 	addi	r3,fp,-228
   3b488:	e0bfc704 	addi	r2,fp,-228
   3b48c:	180b883a 	mov	r5,r3
   3b490:	1009883a 	mov	r4,r2
   3b494:	0024d740 	call	24d74 <secp256k1_scalar_negate>
    secp256k1_scalar_mul(&u2, &rn, sigs);
   3b498:	e0ffbf04 	addi	r3,fp,-260
   3b49c:	e0bfcf04 	addi	r2,fp,-196
   3b4a0:	e1bffe17 	ldw	r6,-8(fp)
   3b4a4:	180b883a 	mov	r5,r3
   3b4a8:	1009883a 	mov	r4,r2
   3b4ac:	00345580 	call	34558 <secp256k1_scalar_mul>
    secp256k1_ecmult(ctx, &qj, &xj, &u2, &u1);
   3b4b0:	e17fcf04 	addi	r5,fp,-196
   3b4b4:	e13f9a04 	addi	r4,fp,-408
   3b4b8:	e0ffd704 	addi	r3,fp,-164
   3b4bc:	e0bfc704 	addi	r2,fp,-228
   3b4c0:	d8800015 	stw	r2,0(sp)
   3b4c4:	280f883a 	mov	r7,r5
   3b4c8:	200d883a 	mov	r6,r4
   3b4cc:	180b883a 	mov	r5,r3
   3b4d0:	e13ffc17 	ldw	r4,-16(fp)
   3b4d4:	0035f080 	call	35f08 <secp256k1_ecmult>
    secp256k1_ge_set_gej_var(pubkey, &qj);
   3b4d8:	e0bfd704 	addi	r2,fp,-164
   3b4dc:	100b883a 	mov	r5,r2
   3b4e0:	e13fff17 	ldw	r4,-4(fp)
   3b4e4:	002037c0 	call	2037c <secp256k1_ge_set_gej_var>
    return !secp256k1_gej_is_infinity(&qj);
   3b4e8:	e0bfd704 	addi	r2,fp,-164
   3b4ec:	1009883a 	mov	r4,r2
   3b4f0:	002129c0 	call	2129c <secp256k1_gej_is_infinity>
   3b4f4:	1005003a 	cmpeq	r2,r2,zero
   3b4f8:	10803fcc 	andi	r2,r2,255
}
   3b4fc:	e037883a 	mov	sp,fp
   3b500:	dfc00117 	ldw	ra,4(sp)
   3b504:	df000017 	ldw	fp,0(sp)
   3b508:	dec00204 	addi	sp,sp,8
   3b50c:	f800283a 	ret

0003b510 <secp256k1_ecdsa_sign_recoverable>:

int secp256k1_ecdsa_sign_recoverable(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {
   3b510:	deffc304 	addi	sp,sp,-244
   3b514:	dfc03c15 	stw	ra,240(sp)
   3b518:	df003b15 	stw	fp,236(sp)
   3b51c:	df003b04 	addi	fp,sp,236
   3b520:	e13ffc15 	stw	r4,-16(fp)
   3b524:	e17ffd15 	stw	r5,-12(fp)
   3b528:	e1bffe15 	stw	r6,-8(fp)
   3b52c:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;
    secp256k1_scalar sec, non, msg;
    int recid;
    int ret = 0;
   3b530:	e03fc815 	stw	zero,-224(fp)
    int overflow = 0;
   3b534:	e03ff315 	stw	zero,-52(fp)
    VERIFY_CHECK(ctx != NULL);
   3b538:	e0bffc17 	ldw	r2,-16(fp)
   3b53c:	1005003a 	cmpeq	r2,r2,zero
   3b540:	10803fcc 	andi	r2,r2,255
   3b544:	10000d26 	beq	r2,zero,3b57c <secp256k1_ecdsa_sign_recoverable+0x6c>
   3b548:	d0a01617 	ldw	r2,-32680(gp)
   3b54c:	10c00317 	ldw	r3,12(r2)
   3b550:	008001b4 	movhi	r2,6
   3b554:	10b1f704 	addi	r2,r2,-14372
   3b558:	d8800015 	stw	r2,0(sp)
   3b55c:	01c02044 	movi	r7,129
   3b560:	018001b4 	movhi	r6,6
   3b564:	31b28804 	addi	r6,r6,-13792
   3b568:	014001b4 	movhi	r5,6
   3b56c:	296b3804 	addi	r5,r5,-21280
   3b570:	1809883a 	mov	r4,r3
   3b574:	00452600 	call	45260 <fprintf>
   3b578:	00450340 	call	45034 <abort>
    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
   3b57c:	e0bffc17 	ldw	r2,-16(fp)
   3b580:	10800104 	addi	r2,r2,4
   3b584:	1009883a 	mov	r4,r2
   3b588:	0037a9c0 	call	37a9c <secp256k1_ecmult_gen_context_is_built>
   3b58c:	1005003a 	cmpeq	r2,r2,zero
   3b590:	10803fcc 	andi	r2,r2,255
   3b594:	10000826 	beq	r2,zero,3b5b8 <secp256k1_ecdsa_sign_recoverable+0xa8>
   3b598:	e0bffc17 	ldw	r2,-16(fp)
   3b59c:	10802f04 	addi	r2,r2,188
   3b5a0:	014001b4 	movhi	r5,6
   3b5a4:	29725504 	addi	r5,r5,-13996
   3b5a8:	1009883a 	mov	r4,r2
   3b5ac:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b5b0:	0005883a 	mov	r2,zero
   3b5b4:	00008c06 	br	3b7e8 <secp256k1_ecdsa_sign_recoverable+0x2d8>
    ARG_CHECK(msg32 != NULL);
   3b5b8:	e0bffe17 	ldw	r2,-8(fp)
   3b5bc:	1005003a 	cmpeq	r2,r2,zero
   3b5c0:	10803fcc 	andi	r2,r2,255
   3b5c4:	10000826 	beq	r2,zero,3b5e8 <secp256k1_ecdsa_sign_recoverable+0xd8>
   3b5c8:	e0bffc17 	ldw	r2,-16(fp)
   3b5cc:	10802f04 	addi	r2,r2,188
   3b5d0:	014001b4 	movhi	r5,6
   3b5d4:	29725104 	addi	r5,r5,-14012
   3b5d8:	1009883a 	mov	r4,r2
   3b5dc:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b5e0:	0005883a 	mov	r2,zero
   3b5e4:	00008006 	br	3b7e8 <secp256k1_ecdsa_sign_recoverable+0x2d8>
    ARG_CHECK(signature != NULL);
   3b5e8:	e0bffd17 	ldw	r2,-12(fp)
   3b5ec:	1005003a 	cmpeq	r2,r2,zero
   3b5f0:	10803fcc 	andi	r2,r2,255
   3b5f4:	10000826 	beq	r2,zero,3b618 <secp256k1_ecdsa_sign_recoverable+0x108>
   3b5f8:	e0bffc17 	ldw	r2,-16(fp)
   3b5fc:	10802f04 	addi	r2,r2,188
   3b600:	014001b4 	movhi	r5,6
   3b604:	29726404 	addi	r5,r5,-13936
   3b608:	1009883a 	mov	r4,r2
   3b60c:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b610:	0005883a 	mov	r2,zero
   3b614:	00007406 	br	3b7e8 <secp256k1_ecdsa_sign_recoverable+0x2d8>
    ARG_CHECK(seckey != NULL);
   3b618:	e0bfff17 	ldw	r2,-4(fp)
   3b61c:	1005003a 	cmpeq	r2,r2,zero
   3b620:	10803fcc 	andi	r2,r2,255
   3b624:	10000826 	beq	r2,zero,3b648 <secp256k1_ecdsa_sign_recoverable+0x138>
   3b628:	e0bffc17 	ldw	r2,-16(fp)
   3b62c:	10802f04 	addi	r2,r2,188
   3b630:	014001b4 	movhi	r5,6
   3b634:	29726904 	addi	r5,r5,-13916
   3b638:	1009883a 	mov	r4,r2
   3b63c:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b640:	0005883a 	mov	r2,zero
   3b644:	00006806 	br	3b7e8 <secp256k1_ecdsa_sign_recoverable+0x2d8>
    if (noncefp == NULL) {
   3b648:	e0800217 	ldw	r2,8(fp)
   3b64c:	1000031e 	bne	r2,zero,3b65c <secp256k1_ecdsa_sign_recoverable+0x14c>
        noncefp = secp256k1_nonce_function_default;
   3b650:	00800134 	movhi	r2,4
   3b654:	10a7dd04 	addi	r2,r2,-24716
   3b658:	e0800215 	stw	r2,8(fp)
    }

    secp256k1_scalar_set_b32(&sec, seckey, &overflow);
   3b65c:	e0fff304 	addi	r3,fp,-52
   3b660:	e0bfda04 	addi	r2,fp,-152
   3b664:	180d883a 	mov	r6,r3
   3b668:	e17fff17 	ldw	r5,-4(fp)
   3b66c:	1009883a 	mov	r4,r2
   3b670:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    /* Fail if the secret key is invalid. */
    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {
   3b674:	e0bff317 	ldw	r2,-52(fp)
   3b678:	10004b1e 	bne	r2,zero,3b7a8 <secp256k1_ecdsa_sign_recoverable+0x298>
   3b67c:	e0bfda04 	addi	r2,fp,-152
   3b680:	1009883a 	mov	r4,r2
   3b684:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   3b688:	1000471e 	bne	r2,zero,3b7a8 <secp256k1_ecdsa_sign_recoverable+0x298>
        unsigned int count = 0;
   3b68c:	e03fc915 	stw	zero,-220(fp)
        secp256k1_scalar_set_b32(&msg, msg32, NULL);
   3b690:	e0bfea04 	addi	r2,fp,-88
   3b694:	000d883a 	mov	r6,zero
   3b698:	e17ffe17 	ldw	r5,-8(fp)
   3b69c:	1009883a 	mov	r4,r2
   3b6a0:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
        while (1) {
            unsigned char nonce32[32];
            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);
   3b6a4:	e0fff404 	addi	r3,fp,-48
   3b6a8:	e0bfc917 	ldw	r2,-220(fp)
   3b6ac:	d8800115 	stw	r2,4(sp)
   3b6b0:	e0800317 	ldw	r2,12(fp)
   3b6b4:	d8800015 	stw	r2,0(sp)
   3b6b8:	e0800217 	ldw	r2,8(fp)
   3b6bc:	000f883a 	mov	r7,zero
   3b6c0:	e1bfff17 	ldw	r6,-4(fp)
   3b6c4:	e17ffe17 	ldw	r5,-8(fp)
   3b6c8:	1809883a 	mov	r4,r3
   3b6cc:	103ee83a 	callr	r2
   3b6d0:	e0bfc815 	stw	r2,-224(fp)
            if (!ret) {
   3b6d4:	e0bfc817 	ldw	r2,-224(fp)
   3b6d8:	10002726 	beq	r2,zero,3b778 <secp256k1_ecdsa_sign_recoverable+0x268>
                break;
            }
            secp256k1_scalar_set_b32(&non, nonce32, &overflow);
   3b6dc:	e13ff304 	addi	r4,fp,-52
   3b6e0:	e0fff404 	addi	r3,fp,-48
   3b6e4:	e0bfe204 	addi	r2,fp,-120
   3b6e8:	200d883a 	mov	r6,r4
   3b6ec:	180b883a 	mov	r5,r3
   3b6f0:	1009883a 	mov	r4,r2
   3b6f4:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
            memset(nonce32, 0, 32);
   3b6f8:	e0bff404 	addi	r2,fp,-48
   3b6fc:	01800804 	movi	r6,32
   3b700:	000b883a 	mov	r5,zero
   3b704:	1009883a 	mov	r4,r2
   3b708:	0045f3c0 	call	45f3c <memset>
            if (!secp256k1_scalar_is_zero(&non) && !overflow) {
   3b70c:	e0bfe204 	addi	r2,fp,-120
   3b710:	1009883a 	mov	r4,r2
   3b714:	0024cf00 	call	24cf0 <secp256k1_scalar_is_zero>
   3b718:	1000131e 	bne	r2,zero,3b768 <secp256k1_ecdsa_sign_recoverable+0x258>
   3b71c:	e0bff317 	ldw	r2,-52(fp)
   3b720:	1000111e 	bne	r2,zero,3b768 <secp256k1_ecdsa_sign_recoverable+0x258>
                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, &recid)) {
   3b724:	e0bffc17 	ldw	r2,-16(fp)
   3b728:	10c00104 	addi	r3,r2,4
   3b72c:	e1bfda04 	addi	r6,fp,-152
   3b730:	e17fd204 	addi	r5,fp,-184
   3b734:	e13fca04 	addi	r4,fp,-216
   3b738:	e0bff204 	addi	r2,fp,-56
   3b73c:	d8800215 	stw	r2,8(sp)
   3b740:	e0bfe204 	addi	r2,fp,-120
   3b744:	d8800115 	stw	r2,4(sp)
   3b748:	e0bfea04 	addi	r2,fp,-88
   3b74c:	d8800015 	stw	r2,0(sp)
   3b750:	300f883a 	mov	r7,r6
   3b754:	280d883a 	mov	r6,r5
   3b758:	200b883a 	mov	r5,r4
   3b75c:	1809883a 	mov	r4,r3
   3b760:	00389500 	call	38950 <secp256k1_ecdsa_sig_sign>
   3b764:	1000061e 	bne	r2,zero,3b780 <secp256k1_ecdsa_sign_recoverable+0x270>
                    break;
                }
            }
            count++;
   3b768:	e0bfc917 	ldw	r2,-220(fp)
   3b76c:	10800044 	addi	r2,r2,1
   3b770:	e0bfc915 	stw	r2,-220(fp)
        }
   3b774:	003fcb06 	br	3b6a4 <__alt_mem_epcs_flash_controller+0xfe02a6a4>
        secp256k1_scalar_set_b32(&msg, msg32, NULL);
        while (1) {
            unsigned char nonce32[32];
            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);
            if (!ret) {
                break;
   3b778:	0001883a 	nop
   3b77c:	00000106 	br	3b784 <secp256k1_ecdsa_sign_recoverable+0x274>
            }
            secp256k1_scalar_set_b32(&non, nonce32, &overflow);
            memset(nonce32, 0, 32);
            if (!secp256k1_scalar_is_zero(&non) && !overflow) {
                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, &recid)) {
                    break;
   3b780:	0001883a 	nop
                }
            }
            count++;
        }
        secp256k1_scalar_clear(&msg);
   3b784:	e0bfea04 	addi	r2,fp,-88
   3b788:	1009883a 	mov	r4,r2
   3b78c:	00231f80 	call	231f8 <secp256k1_scalar_clear>
        secp256k1_scalar_clear(&non);
   3b790:	e0bfe204 	addi	r2,fp,-120
   3b794:	1009883a 	mov	r4,r2
   3b798:	00231f80 	call	231f8 <secp256k1_scalar_clear>
        secp256k1_scalar_clear(&sec);
   3b79c:	e0bfda04 	addi	r2,fp,-152
   3b7a0:	1009883a 	mov	r4,r2
   3b7a4:	00231f80 	call	231f8 <secp256k1_scalar_clear>
    }
    if (ret) {
   3b7a8:	e0bfc817 	ldw	r2,-224(fp)
   3b7ac:	10000926 	beq	r2,zero,3b7d4 <secp256k1_ecdsa_sign_recoverable+0x2c4>
        secp256k1_ecdsa_recoverable_signature_save(signature, &r, &s, recid);
   3b7b0:	e13ff217 	ldw	r4,-56(fp)
   3b7b4:	e0ffd204 	addi	r3,fp,-184
   3b7b8:	e0bfca04 	addi	r2,fp,-216
   3b7bc:	200f883a 	mov	r7,r4
   3b7c0:	180d883a 	mov	r6,r3
   3b7c4:	100b883a 	mov	r5,r2
   3b7c8:	e13ffd17 	ldw	r4,-12(fp)
   3b7cc:	003af600 	call	3af60 <secp256k1_ecdsa_recoverable_signature_save>
   3b7d0:	00000406 	br	3b7e4 <secp256k1_ecdsa_sign_recoverable+0x2d4>
    } else {
        memset(signature, 0, sizeof(*signature));
   3b7d4:	01801044 	movi	r6,65
   3b7d8:	000b883a 	mov	r5,zero
   3b7dc:	e13ffd17 	ldw	r4,-12(fp)
   3b7e0:	0045f3c0 	call	45f3c <memset>
    }
    return ret;
   3b7e4:	e0bfc817 	ldw	r2,-224(fp)
}
   3b7e8:	e037883a 	mov	sp,fp
   3b7ec:	dfc00117 	ldw	ra,4(sp)
   3b7f0:	df000017 	ldw	fp,0(sp)
   3b7f4:	dec00204 	addi	sp,sp,8
   3b7f8:	f800283a 	ret

0003b7fc <secp256k1_ecdsa_recover>:

int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32) {
   3b7fc:	deffc604 	addi	sp,sp,-232
   3b800:	dfc03915 	stw	ra,228(sp)
   3b804:	df003815 	stw	fp,224(sp)
   3b808:	df003804 	addi	fp,sp,224
   3b80c:	e13ffc15 	stw	r4,-16(fp)
   3b810:	e17ffd15 	stw	r5,-12(fp)
   3b814:	e1bffe15 	stw	r6,-8(fp)
   3b818:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_ge q;
    secp256k1_scalar r, s;
    secp256k1_scalar m;
    int recid;
    VERIFY_CHECK(ctx != NULL);
   3b81c:	e0bffc17 	ldw	r2,-16(fp)
   3b820:	1005003a 	cmpeq	r2,r2,zero
   3b824:	10803fcc 	andi	r2,r2,255
   3b828:	10000d26 	beq	r2,zero,3b860 <secp256k1_ecdsa_recover+0x64>
   3b82c:	d0a01617 	ldw	r2,-32680(gp)
   3b830:	10c00317 	ldw	r3,12(r2)
   3b834:	008001b4 	movhi	r2,6
   3b838:	10b1f704 	addi	r2,r2,-14372
   3b83c:	d8800015 	stw	r2,0(sp)
   3b840:	01c02bc4 	movi	r7,175
   3b844:	018001b4 	movhi	r6,6
   3b848:	31b28804 	addi	r6,r6,-13792
   3b84c:	014001b4 	movhi	r5,6
   3b850:	296b3804 	addi	r5,r5,-21280
   3b854:	1809883a 	mov	r4,r3
   3b858:	00452600 	call	45260 <fprintf>
   3b85c:	00450340 	call	45034 <abort>
    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));
   3b860:	e0bffc17 	ldw	r2,-16(fp)
   3b864:	1009883a 	mov	r4,r2
   3b868:	0035ab40 	call	35ab4 <secp256k1_ecmult_context_is_built>
   3b86c:	1005003a 	cmpeq	r2,r2,zero
   3b870:	10803fcc 	andi	r2,r2,255
   3b874:	10000826 	beq	r2,zero,3b898 <secp256k1_ecdsa_recover+0x9c>
   3b878:	e0bffc17 	ldw	r2,-16(fp)
   3b87c:	10802f04 	addi	r2,r2,188
   3b880:	014001b4 	movhi	r5,6
   3b884:	29724404 	addi	r5,r5,-14064
   3b888:	1009883a 	mov	r4,r2
   3b88c:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b890:	0005883a 	mov	r2,zero
   3b894:	00005a06 	br	3ba00 <secp256k1_ecdsa_recover+0x204>
    ARG_CHECK(msg32 != NULL);
   3b898:	e0bfff17 	ldw	r2,-4(fp)
   3b89c:	1005003a 	cmpeq	r2,r2,zero
   3b8a0:	10803fcc 	andi	r2,r2,255
   3b8a4:	10000826 	beq	r2,zero,3b8c8 <secp256k1_ecdsa_recover+0xcc>
   3b8a8:	e0bffc17 	ldw	r2,-16(fp)
   3b8ac:	10802f04 	addi	r2,r2,188
   3b8b0:	014001b4 	movhi	r5,6
   3b8b4:	29725104 	addi	r5,r5,-14012
   3b8b8:	1009883a 	mov	r4,r2
   3b8bc:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b8c0:	0005883a 	mov	r2,zero
   3b8c4:	00004e06 	br	3ba00 <secp256k1_ecdsa_recover+0x204>
    ARG_CHECK(signature != NULL);
   3b8c8:	e0bffe17 	ldw	r2,-8(fp)
   3b8cc:	1005003a 	cmpeq	r2,r2,zero
   3b8d0:	10803fcc 	andi	r2,r2,255
   3b8d4:	10000826 	beq	r2,zero,3b8f8 <secp256k1_ecdsa_recover+0xfc>
   3b8d8:	e0bffc17 	ldw	r2,-16(fp)
   3b8dc:	10802f04 	addi	r2,r2,188
   3b8e0:	014001b4 	movhi	r5,6
   3b8e4:	29726404 	addi	r5,r5,-13936
   3b8e8:	1009883a 	mov	r4,r2
   3b8ec:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b8f0:	0005883a 	mov	r2,zero
   3b8f4:	00004206 	br	3ba00 <secp256k1_ecdsa_recover+0x204>
    ARG_CHECK(pubkey != NULL);
   3b8f8:	e0bffd17 	ldw	r2,-12(fp)
   3b8fc:	1005003a 	cmpeq	r2,r2,zero
   3b900:	10803fcc 	andi	r2,r2,255
   3b904:	10000826 	beq	r2,zero,3b928 <secp256k1_ecdsa_recover+0x12c>
   3b908:	e0bffc17 	ldw	r2,-16(fp)
   3b90c:	10802f04 	addi	r2,r2,188
   3b910:	014001b4 	movhi	r5,6
   3b914:	29720004 	addi	r5,r5,-14336
   3b918:	1009883a 	mov	r4,r2
   3b91c:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b920:	0005883a 	mov	r2,zero
   3b924:	00003606 	br	3ba00 <secp256k1_ecdsa_recover+0x204>

    secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, signature);
   3b928:	e17ffb04 	addi	r5,fp,-20
   3b92c:	e13feb04 	addi	r4,fp,-84
   3b930:	e0ffe304 	addi	r3,fp,-116
   3b934:	e0bffe17 	ldw	r2,-8(fp)
   3b938:	d8800015 	stw	r2,0(sp)
   3b93c:	280f883a 	mov	r7,r5
   3b940:	200d883a 	mov	r6,r4
   3b944:	180b883a 	mov	r5,r3
   3b948:	e13ffc17 	ldw	r4,-16(fp)
   3b94c:	003aee80 	call	3aee8 <secp256k1_ecdsa_recoverable_signature_load>
    ARG_CHECK(recid >= 0 && recid < 4);
   3b950:	e0bffb17 	ldw	r2,-20(fp)
   3b954:	1004d7fa 	srli	r2,r2,31
   3b958:	10803fcc 	andi	r2,r2,255
   3b95c:	1000041e 	bne	r2,zero,3b970 <secp256k1_ecdsa_recover+0x174>
   3b960:	e0bffb17 	ldw	r2,-20(fp)
   3b964:	10800108 	cmpgei	r2,r2,4
   3b968:	10803fcc 	andi	r2,r2,255
   3b96c:	10000826 	beq	r2,zero,3b990 <secp256k1_ecdsa_recover+0x194>
   3b970:	e0bffc17 	ldw	r2,-16(fp)
   3b974:	10802f04 	addi	r2,r2,188
   3b978:	014001b4 	movhi	r5,6
   3b97c:	29729504 	addi	r5,r5,-13740
   3b980:	1009883a 	mov	r4,r2
   3b984:	000c15c0 	call	c15c <secp256k1_callback_call>
   3b988:	0005883a 	mov	r2,zero
   3b98c:	00001c06 	br	3ba00 <secp256k1_ecdsa_recover+0x204>
    secp256k1_scalar_set_b32(&m, msg32, NULL);
   3b990:	e0bff304 	addi	r2,fp,-52
   3b994:	000d883a 	mov	r6,zero
   3b998:	e17fff17 	ldw	r5,-4(fp)
   3b99c:	1009883a 	mov	r4,r2
   3b9a0:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    if (secp256k1_ecdsa_sig_recover(&ctx->ecmult_ctx, &r, &s, &q, &m, recid)) {
   3b9a4:	e0fffc17 	ldw	r3,-16(fp)
   3b9a8:	e0bffb17 	ldw	r2,-20(fp)
   3b9ac:	e17feb04 	addi	r5,fp,-84
   3b9b0:	e13fe304 	addi	r4,fp,-116
   3b9b4:	d8800115 	stw	r2,4(sp)
   3b9b8:	e0bff304 	addi	r2,fp,-52
   3b9bc:	d8800015 	stw	r2,0(sp)
   3b9c0:	e1ffca04 	addi	r7,fp,-216
   3b9c4:	280d883a 	mov	r6,r5
   3b9c8:	200b883a 	mov	r5,r4
   3b9cc:	1809883a 	mov	r4,r3
   3b9d0:	003b3300 	call	3b330 <secp256k1_ecdsa_sig_recover>
   3b9d4:	10000526 	beq	r2,zero,3b9ec <secp256k1_ecdsa_recover+0x1f0>
        secp256k1_pubkey_save(pubkey, &q);
   3b9d8:	e17fca04 	addi	r5,fp,-216
   3b9dc:	e13ffd17 	ldw	r4,-12(fp)
   3b9e0:	00393640 	call	39364 <secp256k1_pubkey_save>
        return 1;
   3b9e4:	00800044 	movi	r2,1
   3b9e8:	00000506 	br	3ba00 <secp256k1_ecdsa_recover+0x204>
    } else {
        memset(pubkey, 0, sizeof(*pubkey));
   3b9ec:	01801004 	movi	r6,64
   3b9f0:	000b883a 	mov	r5,zero
   3b9f4:	e13ffd17 	ldw	r4,-12(fp)
   3b9f8:	0045f3c0 	call	45f3c <memset>
        return 0;
   3b9fc:	0005883a 	mov	r2,zero
    }
}
   3ba00:	e037883a 	mov	sp,fp
   3ba04:	dfc00117 	ldw	ra,4(sp)
   3ba08:	df000017 	ldw	fp,0(sp)
   3ba0c:	dec00204 	addi	sp,sp,8
   3ba10:	f800283a 	ret

0003ba14 <bench_setup>:
    secp256k1_gej gej_x, gej_y;
    unsigned char data[64];
    int wnaf[256];
} bench_inv_t;

void bench_setup(void* arg) {
   3ba14:	defffb04 	addi	sp,sp,-20
   3ba18:	dfc00415 	stw	ra,16(sp)
   3ba1c:	df000315 	stw	fp,12(sp)
   3ba20:	df000304 	addi	fp,sp,12
   3ba24:	e13fff15 	stw	r4,-4(fp)
    bench_inv_t *data = (bench_inv_t*)arg;
   3ba28:	e0bfff17 	ldw	r2,-4(fp)
   3ba2c:	e0bffe15 	stw	r2,-8(fp)
        0x97, 0xad, 0xaf, 0xb5, 0xb9, 0xbb, 0xbf, 0xc5,
        0xdb, 0xdd, 0xe3, 0xe7, 0xe9, 0xef, 0xf3, 0xf9,
        0x11, 0x15, 0x17, 0x1b, 0x1d, 0xb1, 0xbf, 0xd3
    };

    secp256k1_scalar_set_b32(&data->scalar_x, init_x, NULL);
   3ba30:	e0bffe17 	ldw	r2,-8(fp)
   3ba34:	000d883a 	mov	r6,zero
   3ba38:	014001b4 	movhi	r5,6
   3ba3c:	2972ef44 	addi	r5,r5,-13379
   3ba40:	1009883a 	mov	r4,r2
   3ba44:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    secp256k1_scalar_set_b32(&data->scalar_y, init_y, NULL);
   3ba48:	e0bffe17 	ldw	r2,-8(fp)
   3ba4c:	10800804 	addi	r2,r2,32
   3ba50:	000d883a 	mov	r6,zero
   3ba54:	014001b4 	movhi	r5,6
   3ba58:	2972f744 	addi	r5,r5,-13347
   3ba5c:	1009883a 	mov	r4,r2
   3ba60:	002468c0 	call	2468c <secp256k1_scalar_set_b32>
    secp256k1_fe_set_b32(&data->fe_x, init_x);
   3ba64:	e0bffe17 	ldw	r2,-8(fp)
   3ba68:	10801004 	addi	r2,r2,64
   3ba6c:	014001b4 	movhi	r5,6
   3ba70:	2972ef44 	addi	r5,r5,-13379
   3ba74:	1009883a 	mov	r4,r2
   3ba78:	0013a280 	call	13a28 <secp256k1_fe_set_b32>
    secp256k1_fe_set_b32(&data->fe_y, init_y);
   3ba7c:	e0bffe17 	ldw	r2,-8(fp)
   3ba80:	10801c04 	addi	r2,r2,112
   3ba84:	014001b4 	movhi	r5,6
   3ba88:	2972f744 	addi	r5,r5,-13347
   3ba8c:	1009883a 	mov	r4,r2
   3ba90:	0013a280 	call	13a28 <secp256k1_fe_set_b32>
    CHECK(secp256k1_ge_set_xo_var(&data->ge_x, &data->fe_x, 0));
   3ba94:	e0bffe17 	ldw	r2,-8(fp)
   3ba98:	10c02804 	addi	r3,r2,160
   3ba9c:	e0bffe17 	ldw	r2,-8(fp)
   3baa0:	10801004 	addi	r2,r2,64
   3baa4:	000d883a 	mov	r6,zero
   3baa8:	100b883a 	mov	r5,r2
   3baac:	1809883a 	mov	r4,r3
   3bab0:	0020e200 	call	20e20 <secp256k1_ge_set_xo_var>
   3bab4:	1005003a 	cmpeq	r2,r2,zero
   3bab8:	10803fcc 	andi	r2,r2,255
   3babc:	10000d26 	beq	r2,zero,3baf4 <bench_setup+0xe0>
   3bac0:	d0a01617 	ldw	r2,-32680(gp)
   3bac4:	10c00317 	ldw	r3,12(r2)
   3bac8:	008001b4 	movhi	r2,6
   3bacc:	10b2a504 	addi	r2,r2,-13676
   3bad0:	d8800015 	stw	r2,0(sp)
   3bad4:	01c00cc4 	movi	r7,51
   3bad8:	018001b4 	movhi	r6,6
   3badc:	31b29b04 	addi	r6,r6,-13716
   3bae0:	014001b4 	movhi	r5,6
   3bae4:	296b3804 	addi	r5,r5,-21280
   3bae8:	1809883a 	mov	r4,r3
   3baec:	00452600 	call	45260 <fprintf>
   3baf0:	00450340 	call	45034 <abort>
    CHECK(secp256k1_ge_set_xo_var(&data->ge_y, &data->fe_y, 1));
   3baf4:	e0bffe17 	ldw	r2,-8(fp)
   3baf8:	10c04104 	addi	r3,r2,260
   3bafc:	e0bffe17 	ldw	r2,-8(fp)
   3bb00:	10801c04 	addi	r2,r2,112
   3bb04:	01800044 	movi	r6,1
   3bb08:	100b883a 	mov	r5,r2
   3bb0c:	1809883a 	mov	r4,r3
   3bb10:	0020e200 	call	20e20 <secp256k1_ge_set_xo_var>
   3bb14:	1005003a 	cmpeq	r2,r2,zero
   3bb18:	10803fcc 	andi	r2,r2,255
   3bb1c:	10000d26 	beq	r2,zero,3bb54 <bench_setup+0x140>
   3bb20:	d0a01617 	ldw	r2,-32680(gp)
   3bb24:	10c00317 	ldw	r3,12(r2)
   3bb28:	008001b4 	movhi	r2,6
   3bb2c:	10b2b804 	addi	r2,r2,-13600
   3bb30:	d8800015 	stw	r2,0(sp)
   3bb34:	01c00d04 	movi	r7,52
   3bb38:	018001b4 	movhi	r6,6
   3bb3c:	31b29b04 	addi	r6,r6,-13716
   3bb40:	014001b4 	movhi	r5,6
   3bb44:	296b3804 	addi	r5,r5,-21280
   3bb48:	1809883a 	mov	r4,r3
   3bb4c:	00452600 	call	45260 <fprintf>
   3bb50:	00450340 	call	45034 <abort>
    secp256k1_gej_set_ge(&data->gej_x, &data->ge_x);
   3bb54:	e0bffe17 	ldw	r2,-8(fp)
   3bb58:	10c05a04 	addi	r3,r2,360
   3bb5c:	e0bffe17 	ldw	r2,-8(fp)
   3bb60:	10802804 	addi	r2,r2,160
   3bb64:	100b883a 	mov	r5,r2
   3bb68:	1809883a 	mov	r4,r3
   3bb6c:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
    secp256k1_gej_set_ge(&data->gej_y, &data->ge_y);
   3bb70:	e0bffe17 	ldw	r2,-8(fp)
   3bb74:	10c07f04 	addi	r3,r2,508
   3bb78:	e0bffe17 	ldw	r2,-8(fp)
   3bb7c:	10804104 	addi	r2,r2,260
   3bb80:	100b883a 	mov	r5,r2
   3bb84:	1809883a 	mov	r4,r3
   3bb88:	0020eb80 	call	20eb8 <secp256k1_gej_set_ge>
    memcpy(data->data, init_x, 32);
   3bb8c:	e0bffe17 	ldw	r2,-8(fp)
   3bb90:	10c0a404 	addi	r3,r2,656
   3bb94:	008001b4 	movhi	r2,6
   3bb98:	10b2ef44 	addi	r2,r2,-13379
   3bb9c:	1009883a 	mov	r4,r2
   3bba0:	00800804 	movi	r2,32
   3bba4:	100d883a 	mov	r6,r2
   3bba8:	200b883a 	mov	r5,r4
   3bbac:	1809883a 	mov	r4,r3
   3bbb0:	0045c980 	call	45c98 <memcpy>
    memcpy(data->data + 32, init_y, 32);
   3bbb4:	e0bffe17 	ldw	r2,-8(fp)
   3bbb8:	1080a404 	addi	r2,r2,656
   3bbbc:	10c00804 	addi	r3,r2,32
   3bbc0:	008001b4 	movhi	r2,6
   3bbc4:	10b2f744 	addi	r2,r2,-13347
   3bbc8:	1009883a 	mov	r4,r2
   3bbcc:	00800804 	movi	r2,32
   3bbd0:	100d883a 	mov	r6,r2
   3bbd4:	200b883a 	mov	r5,r4
   3bbd8:	1809883a 	mov	r4,r3
   3bbdc:	0045c980 	call	45c98 <memcpy>
}
   3bbe0:	0001883a 	nop
   3bbe4:	e037883a 	mov	sp,fp
   3bbe8:	dfc00117 	ldw	ra,4(sp)
   3bbec:	df000017 	ldw	fp,0(sp)
   3bbf0:	dec00204 	addi	sp,sp,8
   3bbf4:	f800283a 	ret

0003bbf8 <bench_scalar_add>:

void bench_scalar_add(void* arg) {
   3bbf8:	defffb04 	addi	sp,sp,-20
   3bbfc:	dfc00415 	stw	ra,16(sp)
   3bc00:	df000315 	stw	fp,12(sp)
   3bc04:	df000304 	addi	fp,sp,12
   3bc08:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3bc0c:	e0bfff17 	ldw	r2,-4(fp)
   3bc10:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000000; i++) {
   3bc14:	e03ffd15 	stw	zero,-12(fp)
   3bc18:	00000b06 	br	3bc48 <bench_scalar_add+0x50>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3bc1c:	e0fffe17 	ldw	r3,-8(fp)
   3bc20:	e13ffe17 	ldw	r4,-8(fp)
   3bc24:	e0bffe17 	ldw	r2,-8(fp)
   3bc28:	10800804 	addi	r2,r2,32
   3bc2c:	100d883a 	mov	r6,r2
   3bc30:	200b883a 	mov	r5,r4
   3bc34:	1809883a 	mov	r4,r3
   3bc38:	0023ba00 	call	23ba0 <secp256k1_scalar_add>

void bench_scalar_add(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000000; i++) {
   3bc3c:	e0bffd17 	ldw	r2,-12(fp)
   3bc40:	10800044 	addi	r2,r2,1
   3bc44:	e0bffd15 	stw	r2,-12(fp)
   3bc48:	e0fffd17 	ldw	r3,-12(fp)
   3bc4c:	008007f4 	movhi	r2,31
   3bc50:	10a11fc4 	addi	r2,r2,-31617
   3bc54:	10fff10e 	bge	r2,r3,3bc1c <__alt_mem_epcs_flash_controller+0xfe02ac1c>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3bc58:	0001883a 	nop
   3bc5c:	e037883a 	mov	sp,fp
   3bc60:	dfc00117 	ldw	ra,4(sp)
   3bc64:	df000017 	ldw	fp,0(sp)
   3bc68:	dec00204 	addi	sp,sp,8
   3bc6c:	f800283a 	ret

0003bc70 <bench_scalar_negate>:

void bench_scalar_negate(void* arg) {
   3bc70:	defffb04 	addi	sp,sp,-20
   3bc74:	dfc00415 	stw	ra,16(sp)
   3bc78:	df000315 	stw	fp,12(sp)
   3bc7c:	df000304 	addi	fp,sp,12
   3bc80:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3bc84:	e0bfff17 	ldw	r2,-4(fp)
   3bc88:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000000; i++) {
   3bc8c:	e03ffd15 	stw	zero,-12(fp)
   3bc90:	00000806 	br	3bcb4 <bench_scalar_negate+0x44>
        secp256k1_scalar_negate(&data->scalar_x, &data->scalar_x);
   3bc94:	e0bffe17 	ldw	r2,-8(fp)
   3bc98:	e0fffe17 	ldw	r3,-8(fp)
   3bc9c:	180b883a 	mov	r5,r3
   3bca0:	1009883a 	mov	r4,r2
   3bca4:	0024d740 	call	24d74 <secp256k1_scalar_negate>

void bench_scalar_negate(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000000; i++) {
   3bca8:	e0bffd17 	ldw	r2,-12(fp)
   3bcac:	10800044 	addi	r2,r2,1
   3bcb0:	e0bffd15 	stw	r2,-12(fp)
   3bcb4:	e0fffd17 	ldw	r3,-12(fp)
   3bcb8:	008007f4 	movhi	r2,31
   3bcbc:	10a11fc4 	addi	r2,r2,-31617
   3bcc0:	10fff40e 	bge	r2,r3,3bc94 <__alt_mem_epcs_flash_controller+0xfe02ac94>
        secp256k1_scalar_negate(&data->scalar_x, &data->scalar_x);
    }
}
   3bcc4:	0001883a 	nop
   3bcc8:	e037883a 	mov	sp,fp
   3bccc:	dfc00117 	ldw	ra,4(sp)
   3bcd0:	df000017 	ldw	fp,0(sp)
   3bcd4:	dec00204 	addi	sp,sp,8
   3bcd8:	f800283a 	ret

0003bcdc <bench_scalar_sqr>:

void bench_scalar_sqr(void* arg) {
   3bcdc:	defffb04 	addi	sp,sp,-20
   3bce0:	dfc00415 	stw	ra,16(sp)
   3bce4:	df000315 	stw	fp,12(sp)
   3bce8:	df000304 	addi	fp,sp,12
   3bcec:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3bcf0:	e0bfff17 	ldw	r2,-4(fp)
   3bcf4:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3bcf8:	e03ffd15 	stw	zero,-12(fp)
   3bcfc:	00000806 	br	3bd20 <bench_scalar_sqr+0x44>
        secp256k1_scalar_sqr(&data->scalar_x, &data->scalar_x);
   3bd00:	e0bffe17 	ldw	r2,-8(fp)
   3bd04:	e0fffe17 	ldw	r3,-8(fp)
   3bd08:	180b883a 	mov	r5,r3
   3bd0c:	1009883a 	mov	r4,r2
   3bd10:	00348040 	call	34804 <secp256k1_scalar_sqr>

void bench_scalar_sqr(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3bd14:	e0bffd17 	ldw	r2,-12(fp)
   3bd18:	10800044 	addi	r2,r2,1
   3bd1c:	e0bffd15 	stw	r2,-12(fp)
   3bd20:	e0fffd17 	ldw	r3,-12(fp)
   3bd24:	008000f4 	movhi	r2,3
   3bd28:	10834fc4 	addi	r2,r2,3391
   3bd2c:	10fff40e 	bge	r2,r3,3bd00 <__alt_mem_epcs_flash_controller+0xfe02ad00>
        secp256k1_scalar_sqr(&data->scalar_x, &data->scalar_x);
    }
}
   3bd30:	0001883a 	nop
   3bd34:	e037883a 	mov	sp,fp
   3bd38:	dfc00117 	ldw	ra,4(sp)
   3bd3c:	df000017 	ldw	fp,0(sp)
   3bd40:	dec00204 	addi	sp,sp,8
   3bd44:	f800283a 	ret

0003bd48 <bench_scalar_mul>:

void bench_scalar_mul(void* arg) {
   3bd48:	defffb04 	addi	sp,sp,-20
   3bd4c:	dfc00415 	stw	ra,16(sp)
   3bd50:	df000315 	stw	fp,12(sp)
   3bd54:	df000304 	addi	fp,sp,12
   3bd58:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3bd5c:	e0bfff17 	ldw	r2,-4(fp)
   3bd60:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3bd64:	e03ffd15 	stw	zero,-12(fp)
   3bd68:	00000b06 	br	3bd98 <bench_scalar_mul+0x50>
        secp256k1_scalar_mul(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3bd6c:	e0fffe17 	ldw	r3,-8(fp)
   3bd70:	e13ffe17 	ldw	r4,-8(fp)
   3bd74:	e0bffe17 	ldw	r2,-8(fp)
   3bd78:	10800804 	addi	r2,r2,32
   3bd7c:	100d883a 	mov	r6,r2
   3bd80:	200b883a 	mov	r5,r4
   3bd84:	1809883a 	mov	r4,r3
   3bd88:	00345580 	call	34558 <secp256k1_scalar_mul>

void bench_scalar_mul(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3bd8c:	e0bffd17 	ldw	r2,-12(fp)
   3bd90:	10800044 	addi	r2,r2,1
   3bd94:	e0bffd15 	stw	r2,-12(fp)
   3bd98:	e0fffd17 	ldw	r3,-12(fp)
   3bd9c:	008000f4 	movhi	r2,3
   3bda0:	10834fc4 	addi	r2,r2,3391
   3bda4:	10fff10e 	bge	r2,r3,3bd6c <__alt_mem_epcs_flash_controller+0xfe02ad6c>
        secp256k1_scalar_mul(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3bda8:	0001883a 	nop
   3bdac:	e037883a 	mov	sp,fp
   3bdb0:	dfc00117 	ldw	ra,4(sp)
   3bdb4:	df000017 	ldw	fp,0(sp)
   3bdb8:	dec00204 	addi	sp,sp,8
   3bdbc:	f800283a 	ret

0003bdc0 <bench_scalar_inverse>:
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
#endif

void bench_scalar_inverse(void* arg) {
   3bdc0:	defffb04 	addi	sp,sp,-20
   3bdc4:	dfc00415 	stw	ra,16(sp)
   3bdc8:	df000315 	stw	fp,12(sp)
   3bdcc:	df000304 	addi	fp,sp,12
   3bdd0:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3bdd4:	e0bfff17 	ldw	r2,-4(fp)
   3bdd8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000; i++) {
   3bddc:	e03ffd15 	stw	zero,-12(fp)
   3bde0:	00001006 	br	3be24 <bench_scalar_inverse+0x64>
        secp256k1_scalar_inverse(&data->scalar_x, &data->scalar_x);
   3bde4:	e0bffe17 	ldw	r2,-8(fp)
   3bde8:	e0fffe17 	ldw	r3,-8(fp)
   3bdec:	180b883a 	mov	r5,r3
   3bdf0:	1009883a 	mov	r4,r2
   3bdf4:	003484c0 	call	3484c <secp256k1_scalar_inverse>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3bdf8:	e0fffe17 	ldw	r3,-8(fp)
   3bdfc:	e13ffe17 	ldw	r4,-8(fp)
   3be00:	e0bffe17 	ldw	r2,-8(fp)
   3be04:	10800804 	addi	r2,r2,32
   3be08:	100d883a 	mov	r6,r2
   3be0c:	200b883a 	mov	r5,r4
   3be10:	1809883a 	mov	r4,r3
   3be14:	0023ba00 	call	23ba0 <secp256k1_scalar_add>

void bench_scalar_inverse(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000; i++) {
   3be18:	e0bffd17 	ldw	r2,-12(fp)
   3be1c:	10800044 	addi	r2,r2,1
   3be20:	e0bffd15 	stw	r2,-12(fp)
   3be24:	e0bffd17 	ldw	r2,-12(fp)
   3be28:	1081f410 	cmplti	r2,r2,2000
   3be2c:	103fed1e 	bne	r2,zero,3bde4 <__alt_mem_epcs_flash_controller+0xfe02ade4>
        secp256k1_scalar_inverse(&data->scalar_x, &data->scalar_x);
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3be30:	0001883a 	nop
   3be34:	e037883a 	mov	sp,fp
   3be38:	dfc00117 	ldw	ra,4(sp)
   3be3c:	df000017 	ldw	fp,0(sp)
   3be40:	dec00204 	addi	sp,sp,8
   3be44:	f800283a 	ret

0003be48 <bench_scalar_inverse_var>:

void bench_scalar_inverse_var(void* arg) {
   3be48:	defffb04 	addi	sp,sp,-20
   3be4c:	dfc00415 	stw	ra,16(sp)
   3be50:	df000315 	stw	fp,12(sp)
   3be54:	df000304 	addi	fp,sp,12
   3be58:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3be5c:	e0bfff17 	ldw	r2,-4(fp)
   3be60:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000; i++) {
   3be64:	e03ffd15 	stw	zero,-12(fp)
   3be68:	00001006 	br	3beac <bench_scalar_inverse_var+0x64>
        secp256k1_scalar_inverse_var(&data->scalar_x, &data->scalar_x);
   3be6c:	e0bffe17 	ldw	r2,-8(fp)
   3be70:	e0fffe17 	ldw	r3,-8(fp)
   3be74:	180b883a 	mov	r5,r3
   3be78:	1009883a 	mov	r4,r2
   3be7c:	00353900 	call	35390 <secp256k1_scalar_inverse_var>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3be80:	e0fffe17 	ldw	r3,-8(fp)
   3be84:	e13ffe17 	ldw	r4,-8(fp)
   3be88:	e0bffe17 	ldw	r2,-8(fp)
   3be8c:	10800804 	addi	r2,r2,32
   3be90:	100d883a 	mov	r6,r2
   3be94:	200b883a 	mov	r5,r4
   3be98:	1809883a 	mov	r4,r3
   3be9c:	0023ba00 	call	23ba0 <secp256k1_scalar_add>

void bench_scalar_inverse_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000; i++) {
   3bea0:	e0bffd17 	ldw	r2,-12(fp)
   3bea4:	10800044 	addi	r2,r2,1
   3bea8:	e0bffd15 	stw	r2,-12(fp)
   3beac:	e0bffd17 	ldw	r2,-12(fp)
   3beb0:	1081f410 	cmplti	r2,r2,2000
   3beb4:	103fed1e 	bne	r2,zero,3be6c <__alt_mem_epcs_flash_controller+0xfe02ae6c>
        secp256k1_scalar_inverse_var(&data->scalar_x, &data->scalar_x);
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3beb8:	0001883a 	nop
   3bebc:	e037883a 	mov	sp,fp
   3bec0:	dfc00117 	ldw	ra,4(sp)
   3bec4:	df000017 	ldw	fp,0(sp)
   3bec8:	dec00204 	addi	sp,sp,8
   3becc:	f800283a 	ret

0003bed0 <bench_field_normalize>:

void bench_field_normalize(void* arg) {
   3bed0:	defffb04 	addi	sp,sp,-20
   3bed4:	dfc00415 	stw	ra,16(sp)
   3bed8:	df000315 	stw	fp,12(sp)
   3bedc:	df000304 	addi	fp,sp,12
   3bee0:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3bee4:	e0bfff17 	ldw	r2,-4(fp)
   3bee8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000000; i++) {
   3beec:	e03ffd15 	stw	zero,-12(fp)
   3bef0:	00000706 	br	3bf10 <bench_field_normalize+0x40>
        secp256k1_fe_normalize(&data->fe_x);
   3bef4:	e0bffe17 	ldw	r2,-8(fp)
   3bef8:	10801004 	addi	r2,r2,64
   3befc:	1009883a 	mov	r4,r2
   3bf00:	0011e780 	call	11e78 <secp256k1_fe_normalize>

void bench_field_normalize(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000000; i++) {
   3bf04:	e0bffd17 	ldw	r2,-12(fp)
   3bf08:	10800044 	addi	r2,r2,1
   3bf0c:	e0bffd15 	stw	r2,-12(fp)
   3bf10:	e0fffd17 	ldw	r3,-12(fp)
   3bf14:	008007f4 	movhi	r2,31
   3bf18:	10a11fc4 	addi	r2,r2,-31617
   3bf1c:	10fff50e 	bge	r2,r3,3bef4 <__alt_mem_epcs_flash_controller+0xfe02aef4>
        secp256k1_fe_normalize(&data->fe_x);
    }
}
   3bf20:	0001883a 	nop
   3bf24:	e037883a 	mov	sp,fp
   3bf28:	dfc00117 	ldw	ra,4(sp)
   3bf2c:	df000017 	ldw	fp,0(sp)
   3bf30:	dec00204 	addi	sp,sp,8
   3bf34:	f800283a 	ret

0003bf38 <bench_field_normalize_weak>:

void bench_field_normalize_weak(void* arg) {
   3bf38:	defffb04 	addi	sp,sp,-20
   3bf3c:	dfc00415 	stw	ra,16(sp)
   3bf40:	df000315 	stw	fp,12(sp)
   3bf44:	df000304 	addi	fp,sp,12
   3bf48:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3bf4c:	e0bfff17 	ldw	r2,-4(fp)
   3bf50:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000000; i++) {
   3bf54:	e03ffd15 	stw	zero,-12(fp)
   3bf58:	00000706 	br	3bf78 <bench_field_normalize_weak+0x40>
        secp256k1_fe_normalize_weak(&data->fe_x);
   3bf5c:	e0bffe17 	ldw	r2,-8(fp)
   3bf60:	10801004 	addi	r2,r2,64
   3bf64:	1009883a 	mov	r4,r2
   3bf68:	00124780 	call	12478 <secp256k1_fe_normalize_weak>

void bench_field_normalize_weak(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000000; i++) {
   3bf6c:	e0bffd17 	ldw	r2,-12(fp)
   3bf70:	10800044 	addi	r2,r2,1
   3bf74:	e0bffd15 	stw	r2,-12(fp)
   3bf78:	e0fffd17 	ldw	r3,-12(fp)
   3bf7c:	008007f4 	movhi	r2,31
   3bf80:	10a11fc4 	addi	r2,r2,-31617
   3bf84:	10fff50e 	bge	r2,r3,3bf5c <__alt_mem_epcs_flash_controller+0xfe02af5c>
        secp256k1_fe_normalize_weak(&data->fe_x);
    }
}
   3bf88:	0001883a 	nop
   3bf8c:	e037883a 	mov	sp,fp
   3bf90:	dfc00117 	ldw	ra,4(sp)
   3bf94:	df000017 	ldw	fp,0(sp)
   3bf98:	dec00204 	addi	sp,sp,8
   3bf9c:	f800283a 	ret

0003bfa0 <bench_field_mul>:

void bench_field_mul(void* arg) {
   3bfa0:	defffb04 	addi	sp,sp,-20
   3bfa4:	dfc00415 	stw	ra,16(sp)
   3bfa8:	df000315 	stw	fp,12(sp)
   3bfac:	df000304 	addi	fp,sp,12
   3bfb0:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3bfb4:	e0bfff17 	ldw	r2,-4(fp)
   3bfb8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3bfbc:	e03ffd15 	stw	zero,-12(fp)
   3bfc0:	00000d06 	br	3bff8 <bench_field_mul+0x58>
        secp256k1_fe_mul(&data->fe_x, &data->fe_x, &data->fe_y);
   3bfc4:	e0bffe17 	ldw	r2,-8(fp)
   3bfc8:	10c01004 	addi	r3,r2,64
   3bfcc:	e0bffe17 	ldw	r2,-8(fp)
   3bfd0:	11001004 	addi	r4,r2,64
   3bfd4:	e0bffe17 	ldw	r2,-8(fp)
   3bfd8:	10801c04 	addi	r2,r2,112
   3bfdc:	100d883a 	mov	r6,r2
   3bfe0:	200b883a 	mov	r5,r4
   3bfe4:	1809883a 	mov	r4,r3
   3bfe8:	001e1f00 	call	1e1f0 <secp256k1_fe_mul>

void bench_field_mul(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3bfec:	e0bffd17 	ldw	r2,-12(fp)
   3bff0:	10800044 	addi	r2,r2,1
   3bff4:	e0bffd15 	stw	r2,-12(fp)
   3bff8:	e0fffd17 	ldw	r3,-12(fp)
   3bffc:	008000f4 	movhi	r2,3
   3c000:	10834fc4 	addi	r2,r2,3391
   3c004:	10ffef0e 	bge	r2,r3,3bfc4 <__alt_mem_epcs_flash_controller+0xfe02afc4>
        secp256k1_fe_mul(&data->fe_x, &data->fe_x, &data->fe_y);
    }
}
   3c008:	0001883a 	nop
   3c00c:	e037883a 	mov	sp,fp
   3c010:	dfc00117 	ldw	ra,4(sp)
   3c014:	df000017 	ldw	fp,0(sp)
   3c018:	dec00204 	addi	sp,sp,8
   3c01c:	f800283a 	ret

0003c020 <bench_field_sqr>:

void bench_field_sqr(void* arg) {
   3c020:	defffb04 	addi	sp,sp,-20
   3c024:	dfc00415 	stw	ra,16(sp)
   3c028:	df000315 	stw	fp,12(sp)
   3c02c:	df000304 	addi	fp,sp,12
   3c030:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c034:	e0bfff17 	ldw	r2,-4(fp)
   3c038:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3c03c:	e03ffd15 	stw	zero,-12(fp)
   3c040:	00000a06 	br	3c06c <bench_field_sqr+0x4c>
        secp256k1_fe_sqr(&data->fe_x, &data->fe_x);
   3c044:	e0bffe17 	ldw	r2,-8(fp)
   3c048:	10c01004 	addi	r3,r2,64
   3c04c:	e0bffe17 	ldw	r2,-8(fp)
   3c050:	10801004 	addi	r2,r2,64
   3c054:	100b883a 	mov	r5,r2
   3c058:	1809883a 	mov	r4,r3
   3c05c:	001e3440 	call	1e344 <secp256k1_fe_sqr>

void bench_field_sqr(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3c060:	e0bffd17 	ldw	r2,-12(fp)
   3c064:	10800044 	addi	r2,r2,1
   3c068:	e0bffd15 	stw	r2,-12(fp)
   3c06c:	e0fffd17 	ldw	r3,-12(fp)
   3c070:	008000f4 	movhi	r2,3
   3c074:	10834fc4 	addi	r2,r2,3391
   3c078:	10fff20e 	bge	r2,r3,3c044 <__alt_mem_epcs_flash_controller+0xfe02b044>
        secp256k1_fe_sqr(&data->fe_x, &data->fe_x);
    }
}
   3c07c:	0001883a 	nop
   3c080:	e037883a 	mov	sp,fp
   3c084:	dfc00117 	ldw	ra,4(sp)
   3c088:	df000017 	ldw	fp,0(sp)
   3c08c:	dec00204 	addi	sp,sp,8
   3c090:	f800283a 	ret

0003c094 <bench_field_inverse>:

void bench_field_inverse(void* arg) {
   3c094:	defffb04 	addi	sp,sp,-20
   3c098:	dfc00415 	stw	ra,16(sp)
   3c09c:	df000315 	stw	fp,12(sp)
   3c0a0:	df000304 	addi	fp,sp,12
   3c0a4:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c0a8:	e0bfff17 	ldw	r2,-4(fp)
   3c0ac:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3c0b0:	e03ffd15 	stw	zero,-12(fp)
   3c0b4:	00001106 	br	3c0fc <bench_field_inverse+0x68>
        secp256k1_fe_inv(&data->fe_x, &data->fe_x);
   3c0b8:	e0bffe17 	ldw	r2,-8(fp)
   3c0bc:	10c01004 	addi	r3,r2,64
   3c0c0:	e0bffe17 	ldw	r2,-8(fp)
   3c0c4:	10801004 	addi	r2,r2,64
   3c0c8:	100b883a 	mov	r5,r2
   3c0cc:	1809883a 	mov	r4,r3
   3c0d0:	001f3f00 	call	1f3f0 <secp256k1_fe_inv>
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
   3c0d4:	e0bffe17 	ldw	r2,-8(fp)
   3c0d8:	10c01004 	addi	r3,r2,64
   3c0dc:	e0bffe17 	ldw	r2,-8(fp)
   3c0e0:	10801c04 	addi	r2,r2,112
   3c0e4:	100b883a 	mov	r5,r2
   3c0e8:	1809883a 	mov	r4,r3
   3c0ec:	00142340 	call	14234 <secp256k1_fe_add>

void bench_field_inverse(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3c0f0:	e0bffd17 	ldw	r2,-12(fp)
   3c0f4:	10800044 	addi	r2,r2,1
   3c0f8:	e0bffd15 	stw	r2,-12(fp)
   3c0fc:	e0bffd17 	ldw	r2,-12(fp)
   3c100:	10938810 	cmplti	r2,r2,20000
   3c104:	103fec1e 	bne	r2,zero,3c0b8 <__alt_mem_epcs_flash_controller+0xfe02b0b8>
        secp256k1_fe_inv(&data->fe_x, &data->fe_x);
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
    }
}
   3c108:	0001883a 	nop
   3c10c:	e037883a 	mov	sp,fp
   3c110:	dfc00117 	ldw	ra,4(sp)
   3c114:	df000017 	ldw	fp,0(sp)
   3c118:	dec00204 	addi	sp,sp,8
   3c11c:	f800283a 	ret

0003c120 <bench_field_inverse_var>:

void bench_field_inverse_var(void* arg) {
   3c120:	defffb04 	addi	sp,sp,-20
   3c124:	dfc00415 	stw	ra,16(sp)
   3c128:	df000315 	stw	fp,12(sp)
   3c12c:	df000304 	addi	fp,sp,12
   3c130:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c134:	e0bfff17 	ldw	r2,-4(fp)
   3c138:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3c13c:	e03ffd15 	stw	zero,-12(fp)
   3c140:	00001106 	br	3c188 <bench_field_inverse_var+0x68>
        secp256k1_fe_inv_var(&data->fe_x, &data->fe_x);
   3c144:	e0bffe17 	ldw	r2,-8(fp)
   3c148:	10c01004 	addi	r3,r2,64
   3c14c:	e0bffe17 	ldw	r2,-8(fp)
   3c150:	10801004 	addi	r2,r2,64
   3c154:	100b883a 	mov	r5,r2
   3c158:	1809883a 	mov	r4,r3
   3c15c:	001fc380 	call	1fc38 <secp256k1_fe_inv_var>
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
   3c160:	e0bffe17 	ldw	r2,-8(fp)
   3c164:	10c01004 	addi	r3,r2,64
   3c168:	e0bffe17 	ldw	r2,-8(fp)
   3c16c:	10801c04 	addi	r2,r2,112
   3c170:	100b883a 	mov	r5,r2
   3c174:	1809883a 	mov	r4,r3
   3c178:	00142340 	call	14234 <secp256k1_fe_add>

void bench_field_inverse_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3c17c:	e0bffd17 	ldw	r2,-12(fp)
   3c180:	10800044 	addi	r2,r2,1
   3c184:	e0bffd15 	stw	r2,-12(fp)
   3c188:	e0bffd17 	ldw	r2,-12(fp)
   3c18c:	10938810 	cmplti	r2,r2,20000
   3c190:	103fec1e 	bne	r2,zero,3c144 <__alt_mem_epcs_flash_controller+0xfe02b144>
        secp256k1_fe_inv_var(&data->fe_x, &data->fe_x);
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
    }
}
   3c194:	0001883a 	nop
   3c198:	e037883a 	mov	sp,fp
   3c19c:	dfc00117 	ldw	ra,4(sp)
   3c1a0:	df000017 	ldw	fp,0(sp)
   3c1a4:	dec00204 	addi	sp,sp,8
   3c1a8:	f800283a 	ret

0003c1ac <bench_field_sqrt>:

void bench_field_sqrt(void* arg) {
   3c1ac:	defffb04 	addi	sp,sp,-20
   3c1b0:	dfc00415 	stw	ra,16(sp)
   3c1b4:	df000315 	stw	fp,12(sp)
   3c1b8:	df000304 	addi	fp,sp,12
   3c1bc:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c1c0:	e0bfff17 	ldw	r2,-4(fp)
   3c1c4:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3c1c8:	e03ffd15 	stw	zero,-12(fp)
   3c1cc:	00001106 	br	3c214 <bench_field_sqrt+0x68>
        secp256k1_fe_sqrt(&data->fe_x, &data->fe_x);
   3c1d0:	e0bffe17 	ldw	r2,-8(fp)
   3c1d4:	10c01004 	addi	r3,r2,64
   3c1d8:	e0bffe17 	ldw	r2,-8(fp)
   3c1dc:	10801004 	addi	r2,r2,64
   3c1e0:	100b883a 	mov	r5,r2
   3c1e4:	1809883a 	mov	r4,r3
   3c1e8:	001ebfc0 	call	1ebfc <secp256k1_fe_sqrt>
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
   3c1ec:	e0bffe17 	ldw	r2,-8(fp)
   3c1f0:	10c01004 	addi	r3,r2,64
   3c1f4:	e0bffe17 	ldw	r2,-8(fp)
   3c1f8:	10801c04 	addi	r2,r2,112
   3c1fc:	100b883a 	mov	r5,r2
   3c200:	1809883a 	mov	r4,r3
   3c204:	00142340 	call	14234 <secp256k1_fe_add>

void bench_field_sqrt(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3c208:	e0bffd17 	ldw	r2,-12(fp)
   3c20c:	10800044 	addi	r2,r2,1
   3c210:	e0bffd15 	stw	r2,-12(fp)
   3c214:	e0bffd17 	ldw	r2,-12(fp)
   3c218:	10938810 	cmplti	r2,r2,20000
   3c21c:	103fec1e 	bne	r2,zero,3c1d0 <__alt_mem_epcs_flash_controller+0xfe02b1d0>
        secp256k1_fe_sqrt(&data->fe_x, &data->fe_x);
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
    }
}
   3c220:	0001883a 	nop
   3c224:	e037883a 	mov	sp,fp
   3c228:	dfc00117 	ldw	ra,4(sp)
   3c22c:	df000017 	ldw	fp,0(sp)
   3c230:	dec00204 	addi	sp,sp,8
   3c234:	f800283a 	ret

0003c238 <bench_group_double_var>:

void bench_group_double_var(void* arg) {
   3c238:	defffb04 	addi	sp,sp,-20
   3c23c:	dfc00415 	stw	ra,16(sp)
   3c240:	df000315 	stw	fp,12(sp)
   3c244:	df000304 	addi	fp,sp,12
   3c248:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c24c:	e0bfff17 	ldw	r2,-4(fp)
   3c250:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3c254:	e03ffd15 	stw	zero,-12(fp)
   3c258:	00000b06 	br	3c288 <bench_group_double_var+0x50>
        secp256k1_gej_double_var(&data->gej_x, &data->gej_x, NULL);
   3c25c:	e0bffe17 	ldw	r2,-8(fp)
   3c260:	10c05a04 	addi	r3,r2,360
   3c264:	e0bffe17 	ldw	r2,-8(fp)
   3c268:	10805a04 	addi	r2,r2,360
   3c26c:	000d883a 	mov	r6,zero
   3c270:	100b883a 	mov	r5,r2
   3c274:	1809883a 	mov	r4,r3
   3c278:	002148c0 	call	2148c <secp256k1_gej_double_var>

void bench_group_double_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3c27c:	e0bffd17 	ldw	r2,-12(fp)
   3c280:	10800044 	addi	r2,r2,1
   3c284:	e0bffd15 	stw	r2,-12(fp)
   3c288:	e0fffd17 	ldw	r3,-12(fp)
   3c28c:	008000f4 	movhi	r2,3
   3c290:	10834fc4 	addi	r2,r2,3391
   3c294:	10fff10e 	bge	r2,r3,3c25c <__alt_mem_epcs_flash_controller+0xfe02b25c>
        secp256k1_gej_double_var(&data->gej_x, &data->gej_x, NULL);
    }
}
   3c298:	0001883a 	nop
   3c29c:	e037883a 	mov	sp,fp
   3c2a0:	dfc00117 	ldw	ra,4(sp)
   3c2a4:	df000017 	ldw	fp,0(sp)
   3c2a8:	dec00204 	addi	sp,sp,8
   3c2ac:	f800283a 	ret

0003c2b0 <bench_group_add_var>:

void bench_group_add_var(void* arg) {
   3c2b0:	defffb04 	addi	sp,sp,-20
   3c2b4:	dfc00415 	stw	ra,16(sp)
   3c2b8:	df000315 	stw	fp,12(sp)
   3c2bc:	df000304 	addi	fp,sp,12
   3c2c0:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c2c4:	e0bfff17 	ldw	r2,-4(fp)
   3c2c8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3c2cc:	e03ffd15 	stw	zero,-12(fp)
   3c2d0:	00000e06 	br	3c30c <bench_group_add_var+0x5c>
        secp256k1_gej_add_var(&data->gej_x, &data->gej_x, &data->gej_y, NULL);
   3c2d4:	e0bffe17 	ldw	r2,-8(fp)
   3c2d8:	10c05a04 	addi	r3,r2,360
   3c2dc:	e0bffe17 	ldw	r2,-8(fp)
   3c2e0:	11005a04 	addi	r4,r2,360
   3c2e4:	e0bffe17 	ldw	r2,-8(fp)
   3c2e8:	10807f04 	addi	r2,r2,508
   3c2ec:	000f883a 	mov	r7,zero
   3c2f0:	100d883a 	mov	r6,r2
   3c2f4:	200b883a 	mov	r5,r4
   3c2f8:	1809883a 	mov	r4,r3
   3c2fc:	00218000 	call	21800 <secp256k1_gej_add_var>

void bench_group_add_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3c300:	e0bffd17 	ldw	r2,-12(fp)
   3c304:	10800044 	addi	r2,r2,1
   3c308:	e0bffd15 	stw	r2,-12(fp)
   3c30c:	e0fffd17 	ldw	r3,-12(fp)
   3c310:	008000f4 	movhi	r2,3
   3c314:	10834fc4 	addi	r2,r2,3391
   3c318:	10ffee0e 	bge	r2,r3,3c2d4 <__alt_mem_epcs_flash_controller+0xfe02b2d4>
        secp256k1_gej_add_var(&data->gej_x, &data->gej_x, &data->gej_y, NULL);
    }
}
   3c31c:	0001883a 	nop
   3c320:	e037883a 	mov	sp,fp
   3c324:	dfc00117 	ldw	ra,4(sp)
   3c328:	df000017 	ldw	fp,0(sp)
   3c32c:	dec00204 	addi	sp,sp,8
   3c330:	f800283a 	ret

0003c334 <bench_group_add_affine>:

void bench_group_add_affine(void* arg) {
   3c334:	defffb04 	addi	sp,sp,-20
   3c338:	dfc00415 	stw	ra,16(sp)
   3c33c:	df000315 	stw	fp,12(sp)
   3c340:	df000304 	addi	fp,sp,12
   3c344:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c348:	e0bfff17 	ldw	r2,-4(fp)
   3c34c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3c350:	e03ffd15 	stw	zero,-12(fp)
   3c354:	00000d06 	br	3c38c <bench_group_add_affine+0x58>
        secp256k1_gej_add_ge(&data->gej_x, &data->gej_x, &data->ge_y);
   3c358:	e0bffe17 	ldw	r2,-8(fp)
   3c35c:	10c05a04 	addi	r3,r2,360
   3c360:	e0bffe17 	ldw	r2,-8(fp)
   3c364:	11005a04 	addi	r4,r2,360
   3c368:	e0bffe17 	ldw	r2,-8(fp)
   3c36c:	10804104 	addi	r2,r2,260
   3c370:	100d883a 	mov	r6,r2
   3c374:	200b883a 	mov	r5,r4
   3c378:	1809883a 	mov	r4,r3
   3c37c:	00227500 	call	22750 <secp256k1_gej_add_ge>

void bench_group_add_affine(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3c380:	e0bffd17 	ldw	r2,-12(fp)
   3c384:	10800044 	addi	r2,r2,1
   3c388:	e0bffd15 	stw	r2,-12(fp)
   3c38c:	e0fffd17 	ldw	r3,-12(fp)
   3c390:	008000f4 	movhi	r2,3
   3c394:	10834fc4 	addi	r2,r2,3391
   3c398:	10ffef0e 	bge	r2,r3,3c358 <__alt_mem_epcs_flash_controller+0xfe02b358>
        secp256k1_gej_add_ge(&data->gej_x, &data->gej_x, &data->ge_y);
    }
}
   3c39c:	0001883a 	nop
   3c3a0:	e037883a 	mov	sp,fp
   3c3a4:	dfc00117 	ldw	ra,4(sp)
   3c3a8:	df000017 	ldw	fp,0(sp)
   3c3ac:	dec00204 	addi	sp,sp,8
   3c3b0:	f800283a 	ret

0003c3b4 <bench_group_add_affine_var>:

void bench_group_add_affine_var(void* arg) {
   3c3b4:	defffb04 	addi	sp,sp,-20
   3c3b8:	dfc00415 	stw	ra,16(sp)
   3c3bc:	df000315 	stw	fp,12(sp)
   3c3c0:	df000304 	addi	fp,sp,12
   3c3c4:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c3c8:	e0bfff17 	ldw	r2,-4(fp)
   3c3cc:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3c3d0:	e03ffd15 	stw	zero,-12(fp)
   3c3d4:	00000e06 	br	3c410 <bench_group_add_affine_var+0x5c>
        secp256k1_gej_add_ge_var(&data->gej_x, &data->gej_x, &data->ge_y, NULL);
   3c3d8:	e0bffe17 	ldw	r2,-8(fp)
   3c3dc:	10c05a04 	addi	r3,r2,360
   3c3e0:	e0bffe17 	ldw	r2,-8(fp)
   3c3e4:	11005a04 	addi	r4,r2,360
   3c3e8:	e0bffe17 	ldw	r2,-8(fp)
   3c3ec:	10804104 	addi	r2,r2,260
   3c3f0:	000f883a 	mov	r7,zero
   3c3f4:	100d883a 	mov	r6,r2
   3c3f8:	200b883a 	mov	r5,r4
   3c3fc:	1809883a 	mov	r4,r3
   3c400:	0021ce80 	call	21ce8 <secp256k1_gej_add_ge_var>

void bench_group_add_affine_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3c404:	e0bffd17 	ldw	r2,-12(fp)
   3c408:	10800044 	addi	r2,r2,1
   3c40c:	e0bffd15 	stw	r2,-12(fp)
   3c410:	e0fffd17 	ldw	r3,-12(fp)
   3c414:	008000f4 	movhi	r2,3
   3c418:	10834fc4 	addi	r2,r2,3391
   3c41c:	10ffee0e 	bge	r2,r3,3c3d8 <__alt_mem_epcs_flash_controller+0xfe02b3d8>
        secp256k1_gej_add_ge_var(&data->gej_x, &data->gej_x, &data->ge_y, NULL);
    }
}
   3c420:	0001883a 	nop
   3c424:	e037883a 	mov	sp,fp
   3c428:	dfc00117 	ldw	ra,4(sp)
   3c42c:	df000017 	ldw	fp,0(sp)
   3c430:	dec00204 	addi	sp,sp,8
   3c434:	f800283a 	ret

0003c438 <bench_group_jacobi_var>:

void bench_group_jacobi_var(void* arg) {
   3c438:	defffb04 	addi	sp,sp,-20
   3c43c:	dfc00415 	stw	ra,16(sp)
   3c440:	df000315 	stw	fp,12(sp)
   3c444:	df000304 	addi	fp,sp,12
   3c448:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c44c:	e0bfff17 	ldw	r2,-4(fp)
   3c450:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3c454:	e03ffd15 	stw	zero,-12(fp)
   3c458:	00000706 	br	3c478 <bench_group_jacobi_var+0x40>
        secp256k1_gej_has_quad_y_var(&data->gej_x);
   3c45c:	e0bffe17 	ldw	r2,-8(fp)
   3c460:	10805a04 	addi	r2,r2,360
   3c464:	1009883a 	mov	r4,r2
   3c468:	00231940 	call	23194 <secp256k1_gej_has_quad_y_var>

void bench_group_jacobi_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3c46c:	e0bffd17 	ldw	r2,-12(fp)
   3c470:	10800044 	addi	r2,r2,1
   3c474:	e0bffd15 	stw	r2,-12(fp)
   3c478:	e0bffd17 	ldw	r2,-12(fp)
   3c47c:	10938810 	cmplti	r2,r2,20000
   3c480:	103ff61e 	bne	r2,zero,3c45c <__alt_mem_epcs_flash_controller+0xfe02b45c>
        secp256k1_gej_has_quad_y_var(&data->gej_x);
    }
}
   3c484:	0001883a 	nop
   3c488:	e037883a 	mov	sp,fp
   3c48c:	dfc00117 	ldw	ra,4(sp)
   3c490:	df000017 	ldw	fp,0(sp)
   3c494:	dec00204 	addi	sp,sp,8
   3c498:	f800283a 	ret

0003c49c <bench_ecmult_wnaf>:

void bench_ecmult_wnaf(void* arg) {
   3c49c:	defffb04 	addi	sp,sp,-20
   3c4a0:	dfc00415 	stw	ra,16(sp)
   3c4a4:	df000315 	stw	fp,12(sp)
   3c4a8:	df000304 	addi	fp,sp,12
   3c4ac:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c4b0:	e0bfff17 	ldw	r2,-4(fp)
   3c4b4:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3c4b8:	e03ffd15 	stw	zero,-12(fp)
   3c4bc:	00001306 	br	3c50c <bench_ecmult_wnaf+0x70>
        secp256k1_ecmult_wnaf(data->wnaf, 256, &data->scalar_x, WINDOW_A);
   3c4c0:	e0bffe17 	ldw	r2,-8(fp)
   3c4c4:	1080b404 	addi	r2,r2,720
   3c4c8:	e0fffe17 	ldw	r3,-8(fp)
   3c4cc:	01c00144 	movi	r7,5
   3c4d0:	180d883a 	mov	r6,r3
   3c4d4:	01404004 	movi	r5,256
   3c4d8:	1009883a 	mov	r4,r2
   3c4dc:	0035b280 	call	35b28 <secp256k1_ecmult_wnaf>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3c4e0:	e0fffe17 	ldw	r3,-8(fp)
   3c4e4:	e13ffe17 	ldw	r4,-8(fp)
   3c4e8:	e0bffe17 	ldw	r2,-8(fp)
   3c4ec:	10800804 	addi	r2,r2,32
   3c4f0:	100d883a 	mov	r6,r2
   3c4f4:	200b883a 	mov	r5,r4
   3c4f8:	1809883a 	mov	r4,r3
   3c4fc:	0023ba00 	call	23ba0 <secp256k1_scalar_add>

void bench_ecmult_wnaf(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3c500:	e0bffd17 	ldw	r2,-12(fp)
   3c504:	10800044 	addi	r2,r2,1
   3c508:	e0bffd15 	stw	r2,-12(fp)
   3c50c:	e0bffd17 	ldw	r2,-12(fp)
   3c510:	10938810 	cmplti	r2,r2,20000
   3c514:	103fea1e 	bne	r2,zero,3c4c0 <__alt_mem_epcs_flash_controller+0xfe02b4c0>
        secp256k1_ecmult_wnaf(data->wnaf, 256, &data->scalar_x, WINDOW_A);
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3c518:	0001883a 	nop
   3c51c:	e037883a 	mov	sp,fp
   3c520:	dfc00117 	ldw	ra,4(sp)
   3c524:	df000017 	ldw	fp,0(sp)
   3c528:	dec00204 	addi	sp,sp,8
   3c52c:	f800283a 	ret

0003c530 <bench_wnaf_const>:

void bench_wnaf_const(void* arg) {
   3c530:	defff504 	addi	sp,sp,-44
   3c534:	dfc00a15 	stw	ra,40(sp)
   3c538:	df000915 	stw	fp,36(sp)
   3c53c:	df000904 	addi	fp,sp,36
   3c540:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c544:	e0bfff17 	ldw	r2,-4(fp)
   3c548:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3c54c:	e03ffd15 	stw	zero,-12(fp)
   3c550:	00001e06 	br	3c5cc <bench_wnaf_const+0x9c>
        secp256k1_wnaf_const(data->wnaf, data->scalar_x, WINDOW_A);
   3c554:	e0bffe17 	ldw	r2,-8(fp)
   3c558:	1100b404 	addi	r4,r2,720
   3c55c:	e0bffe17 	ldw	r2,-8(fp)
   3c560:	00c00144 	movi	r3,5
   3c564:	d8c00515 	stw	r3,20(sp)
   3c568:	10c00317 	ldw	r3,12(r2)
   3c56c:	d8c00015 	stw	r3,0(sp)
   3c570:	10c00417 	ldw	r3,16(r2)
   3c574:	d8c00115 	stw	r3,4(sp)
   3c578:	10c00517 	ldw	r3,20(r2)
   3c57c:	d8c00215 	stw	r3,8(sp)
   3c580:	10c00617 	ldw	r3,24(r2)
   3c584:	d8c00315 	stw	r3,12(sp)
   3c588:	10c00717 	ldw	r3,28(r2)
   3c58c:	d8c00415 	stw	r3,16(sp)
   3c590:	11400017 	ldw	r5,0(r2)
   3c594:	11800117 	ldw	r6,4(r2)
   3c598:	11c00217 	ldw	r7,8(r2)
   3c59c:	00363740 	call	36374 <secp256k1_wnaf_const>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3c5a0:	e0fffe17 	ldw	r3,-8(fp)
   3c5a4:	e13ffe17 	ldw	r4,-8(fp)
   3c5a8:	e0bffe17 	ldw	r2,-8(fp)
   3c5ac:	10800804 	addi	r2,r2,32
   3c5b0:	100d883a 	mov	r6,r2
   3c5b4:	200b883a 	mov	r5,r4
   3c5b8:	1809883a 	mov	r4,r3
   3c5bc:	0023ba00 	call	23ba0 <secp256k1_scalar_add>

void bench_wnaf_const(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3c5c0:	e0bffd17 	ldw	r2,-12(fp)
   3c5c4:	10800044 	addi	r2,r2,1
   3c5c8:	e0bffd15 	stw	r2,-12(fp)
   3c5cc:	e0bffd17 	ldw	r2,-12(fp)
   3c5d0:	10938810 	cmplti	r2,r2,20000
   3c5d4:	103fdf1e 	bne	r2,zero,3c554 <__alt_mem_epcs_flash_controller+0xfe02b554>
        secp256k1_wnaf_const(data->wnaf, data->scalar_x, WINDOW_A);
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3c5d8:	0001883a 	nop
   3c5dc:	e037883a 	mov	sp,fp
   3c5e0:	dfc00117 	ldw	ra,4(sp)
   3c5e4:	df000017 	ldw	fp,0(sp)
   3c5e8:	dec00204 	addi	sp,sp,8
   3c5ec:	f800283a 	ret

0003c5f0 <bench_sha256>:


void bench_sha256(void* arg) {
   3c5f0:	deffe204 	addi	sp,sp,-120
   3c5f4:	dfc01d15 	stw	ra,116(sp)
   3c5f8:	df001c15 	stw	fp,112(sp)
   3c5fc:	df001c04 	addi	fp,sp,112
   3c600:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c604:	e0bfff17 	ldw	r2,-4(fp)
   3c608:	e0bfe515 	stw	r2,-108(fp)
    secp256k1_sha256_t sha;

    for (i = 0; i < 20000; i++) {
   3c60c:	e03fe415 	stw	zero,-112(fp)
   3c610:	00001306 	br	3c660 <bench_sha256+0x70>
        secp256k1_sha256_initialize(&sha);
   3c614:	e0bfe604 	addi	r2,fp,-104
   3c618:	1009883a 	mov	r4,r2
   3c61c:	000c1fc0 	call	c1fc <secp256k1_sha256_initialize>
        secp256k1_sha256_write(&sha, data->data, 32);
   3c620:	e0bfe517 	ldw	r2,-108(fp)
   3c624:	10c0a404 	addi	r3,r2,656
   3c628:	e0bfe604 	addi	r2,fp,-104
   3c62c:	01800804 	movi	r6,32
   3c630:	180b883a 	mov	r5,r3
   3c634:	1009883a 	mov	r4,r2
   3c638:	00111c80 	call	111c8 <secp256k1_sha256_write>
        secp256k1_sha256_finalize(&sha, data->data);
   3c63c:	e0bfe517 	ldw	r2,-108(fp)
   3c640:	10c0a404 	addi	r3,r2,656
   3c644:	e0bfe604 	addi	r2,fp,-104
   3c648:	180b883a 	mov	r5,r3
   3c64c:	1009883a 	mov	r4,r2
   3c650:	00112d40 	call	112d4 <secp256k1_sha256_finalize>
void bench_sha256(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
    secp256k1_sha256_t sha;

    for (i = 0; i < 20000; i++) {
   3c654:	e0bfe417 	ldw	r2,-112(fp)
   3c658:	10800044 	addi	r2,r2,1
   3c65c:	e0bfe415 	stw	r2,-112(fp)
   3c660:	e0bfe417 	ldw	r2,-112(fp)
   3c664:	10938810 	cmplti	r2,r2,20000
   3c668:	103fea1e 	bne	r2,zero,3c614 <__alt_mem_epcs_flash_controller+0xfe02b614>
        secp256k1_sha256_initialize(&sha);
        secp256k1_sha256_write(&sha, data->data, 32);
        secp256k1_sha256_finalize(&sha, data->data);
    }
}
   3c66c:	0001883a 	nop
   3c670:	e037883a 	mov	sp,fp
   3c674:	dfc00117 	ldw	ra,4(sp)
   3c678:	df000017 	ldw	fp,0(sp)
   3c67c:	dec00204 	addi	sp,sp,8
   3c680:	f800283a 	ret

0003c684 <bench_hmac_sha256>:

void bench_hmac_sha256(void* arg) {
   3c684:	deffc904 	addi	sp,sp,-220
   3c688:	dfc03615 	stw	ra,216(sp)
   3c68c:	df003515 	stw	fp,212(sp)
   3c690:	df003504 	addi	fp,sp,212
   3c694:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c698:	e0bfff17 	ldw	r2,-4(fp)
   3c69c:	e0bfcc15 	stw	r2,-208(fp)
    secp256k1_hmac_sha256_t hmac;

    for (i = 0; i < 20000; i++) {
   3c6a0:	e03fcb15 	stw	zero,-212(fp)
   3c6a4:	00001706 	br	3c704 <bench_hmac_sha256+0x80>
        secp256k1_hmac_sha256_initialize(&hmac, data->data, 32);
   3c6a8:	e0bfcc17 	ldw	r2,-208(fp)
   3c6ac:	10c0a404 	addi	r3,r2,656
   3c6b0:	e0bfcd04 	addi	r2,fp,-204
   3c6b4:	01800804 	movi	r6,32
   3c6b8:	180b883a 	mov	r5,r3
   3c6bc:	1009883a 	mov	r4,r2
   3c6c0:	001149c0 	call	1149c <secp256k1_hmac_sha256_initialize>
        secp256k1_hmac_sha256_write(&hmac, data->data, 32);
   3c6c4:	e0bfcc17 	ldw	r2,-208(fp)
   3c6c8:	10c0a404 	addi	r3,r2,656
   3c6cc:	e0bfcd04 	addi	r2,fp,-204
   3c6d0:	01800804 	movi	r6,32
   3c6d4:	180b883a 	mov	r5,r3
   3c6d8:	1009883a 	mov	r4,r2
   3c6dc:	00116580 	call	11658 <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_finalize(&hmac, data->data);
   3c6e0:	e0bfcc17 	ldw	r2,-208(fp)
   3c6e4:	10c0a404 	addi	r3,r2,656
   3c6e8:	e0bfcd04 	addi	r2,fp,-204
   3c6ec:	180b883a 	mov	r5,r3
   3c6f0:	1009883a 	mov	r4,r2
   3c6f4:	00116a00 	call	116a0 <secp256k1_hmac_sha256_finalize>
void bench_hmac_sha256(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
    secp256k1_hmac_sha256_t hmac;

    for (i = 0; i < 20000; i++) {
   3c6f8:	e0bfcb17 	ldw	r2,-212(fp)
   3c6fc:	10800044 	addi	r2,r2,1
   3c700:	e0bfcb15 	stw	r2,-212(fp)
   3c704:	e0bfcb17 	ldw	r2,-212(fp)
   3c708:	10938810 	cmplti	r2,r2,20000
   3c70c:	103fe61e 	bne	r2,zero,3c6a8 <__alt_mem_epcs_flash_controller+0xfe02b6a8>
        secp256k1_hmac_sha256_initialize(&hmac, data->data, 32);
        secp256k1_hmac_sha256_write(&hmac, data->data, 32);
        secp256k1_hmac_sha256_finalize(&hmac, data->data);
    }
}
   3c710:	0001883a 	nop
   3c714:	e037883a 	mov	sp,fp
   3c718:	dfc00117 	ldw	ra,4(sp)
   3c71c:	df000017 	ldw	fp,0(sp)
   3c720:	dec00204 	addi	sp,sp,8
   3c724:	f800283a 	ret

0003c728 <bench_rfc6979_hmac_sha256>:

void bench_rfc6979_hmac_sha256(void* arg) {
   3c728:	deffea04 	addi	sp,sp,-88
   3c72c:	dfc01515 	stw	ra,84(sp)
   3c730:	df001415 	stw	fp,80(sp)
   3c734:	df001404 	addi	fp,sp,80
   3c738:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3c73c:	e0bfff17 	ldw	r2,-4(fp)
   3c740:	e0bfed15 	stw	r2,-76(fp)
    secp256k1_rfc6979_hmac_sha256_t rng;

    for (i = 0; i < 20000; i++) {
   3c744:	e03fec15 	stw	zero,-80(fp)
   3c748:	00001106 	br	3c790 <bench_rfc6979_hmac_sha256+0x68>
        secp256k1_rfc6979_hmac_sha256_initialize(&rng, data->data, 64);
   3c74c:	e0bfed17 	ldw	r2,-76(fp)
   3c750:	10c0a404 	addi	r3,r2,656
   3c754:	e0bfee04 	addi	r2,fp,-72
   3c758:	01801004 	movi	r6,64
   3c75c:	180b883a 	mov	r5,r3
   3c760:	1009883a 	mov	r4,r2
   3c764:	001171c0 	call	1171c <secp256k1_rfc6979_hmac_sha256_initialize>
        secp256k1_rfc6979_hmac_sha256_generate(&rng, data->data, 32);
   3c768:	e0bfed17 	ldw	r2,-76(fp)
   3c76c:	10c0a404 	addi	r3,r2,656
   3c770:	e0bfee04 	addi	r2,fp,-72
   3c774:	01800804 	movi	r6,32
   3c778:	180b883a 	mov	r5,r3
   3c77c:	1009883a 	mov	r4,r2
   3c780:	00118bc0 	call	118bc <secp256k1_rfc6979_hmac_sha256_generate>
void bench_rfc6979_hmac_sha256(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
    secp256k1_rfc6979_hmac_sha256_t rng;

    for (i = 0; i < 20000; i++) {
   3c784:	e0bfec17 	ldw	r2,-80(fp)
   3c788:	10800044 	addi	r2,r2,1
   3c78c:	e0bfec15 	stw	r2,-80(fp)
   3c790:	e0bfec17 	ldw	r2,-80(fp)
   3c794:	10938810 	cmplti	r2,r2,20000
   3c798:	103fec1e 	bne	r2,zero,3c74c <__alt_mem_epcs_flash_controller+0xfe02b74c>
        secp256k1_rfc6979_hmac_sha256_initialize(&rng, data->data, 64);
        secp256k1_rfc6979_hmac_sha256_generate(&rng, data->data, 32);
    }
}
   3c79c:	0001883a 	nop
   3c7a0:	e037883a 	mov	sp,fp
   3c7a4:	dfc00117 	ldw	ra,4(sp)
   3c7a8:	df000017 	ldw	fp,0(sp)
   3c7ac:	dec00204 	addi	sp,sp,8
   3c7b0:	f800283a 	ret

0003c7b4 <bench_context_verify>:

void bench_context_verify(void* arg) {
   3c7b4:	defffc04 	addi	sp,sp,-16
   3c7b8:	dfc00315 	stw	ra,12(sp)
   3c7bc:	df000215 	stw	fp,8(sp)
   3c7c0:	df000204 	addi	fp,sp,8
   3c7c4:	e13fff15 	stw	r4,-4(fp)
    int i;
    (void)arg;
    for (i = 0; i < 20; i++) {
   3c7c8:	e03ffe15 	stw	zero,-8(fp)
   3c7cc:	00000706 	br	3c7ec <bench_context_verify+0x38>
        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_VERIFY));
   3c7d0:	01004044 	movi	r4,257
   3c7d4:	00390040 	call	39004 <secp256k1_context_create>
   3c7d8:	1009883a 	mov	r4,r2
   3c7dc:	00391d00 	call	391d0 <secp256k1_context_destroy>
}

void bench_context_verify(void* arg) {
    int i;
    (void)arg;
    for (i = 0; i < 20; i++) {
   3c7e0:	e0bffe17 	ldw	r2,-8(fp)
   3c7e4:	10800044 	addi	r2,r2,1
   3c7e8:	e0bffe15 	stw	r2,-8(fp)
   3c7ec:	e0bffe17 	ldw	r2,-8(fp)
   3c7f0:	10800510 	cmplti	r2,r2,20
   3c7f4:	103ff61e 	bne	r2,zero,3c7d0 <__alt_mem_epcs_flash_controller+0xfe02b7d0>
        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_VERIFY));
    }
}
   3c7f8:	0001883a 	nop
   3c7fc:	e037883a 	mov	sp,fp
   3c800:	dfc00117 	ldw	ra,4(sp)
   3c804:	df000017 	ldw	fp,0(sp)
   3c808:	dec00204 	addi	sp,sp,8
   3c80c:	f800283a 	ret

0003c810 <bench_context_sign>:

void bench_context_sign(void* arg) {
   3c810:	defffc04 	addi	sp,sp,-16
   3c814:	dfc00315 	stw	ra,12(sp)
   3c818:	df000215 	stw	fp,8(sp)
   3c81c:	df000204 	addi	fp,sp,8
   3c820:	e13fff15 	stw	r4,-4(fp)
    int i;
    (void)arg;
    for (i = 0; i < 200; i++) {
   3c824:	e03ffe15 	stw	zero,-8(fp)
   3c828:	00000706 	br	3c848 <bench_context_sign+0x38>
        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_SIGN));
   3c82c:	01008044 	movi	r4,513
   3c830:	00390040 	call	39004 <secp256k1_context_create>
   3c834:	1009883a 	mov	r4,r2
   3c838:	00391d00 	call	391d0 <secp256k1_context_destroy>
}

void bench_context_sign(void* arg) {
    int i;
    (void)arg;
    for (i = 0; i < 200; i++) {
   3c83c:	e0bffe17 	ldw	r2,-8(fp)
   3c840:	10800044 	addi	r2,r2,1
   3c844:	e0bffe15 	stw	r2,-8(fp)
   3c848:	e0bffe17 	ldw	r2,-8(fp)
   3c84c:	10803210 	cmplti	r2,r2,200
   3c850:	103ff61e 	bne	r2,zero,3c82c <__alt_mem_epcs_flash_controller+0xfe02b82c>
        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_SIGN));
    }
}
   3c854:	0001883a 	nop
   3c858:	e037883a 	mov	sp,fp
   3c85c:	dfc00117 	ldw	ra,4(sp)
   3c860:	df000017 	ldw	fp,0(sp)
   3c864:	dec00204 	addi	sp,sp,8
   3c868:	f800283a 	ret

0003c86c <have_flag>:
        secp256k1_num_jacobi(&nx, &norder);
    }
}
#endif

int have_flag(int argc, char** argv, char *flag) {
   3c86c:	defffa04 	addi	sp,sp,-24
   3c870:	dfc00515 	stw	ra,20(sp)
   3c874:	df000415 	stw	fp,16(sp)
   3c878:	df000404 	addi	fp,sp,16
   3c87c:	e13ffd15 	stw	r4,-12(fp)
   3c880:	e17ffe15 	stw	r5,-8(fp)
   3c884:	e1bfff15 	stw	r6,-4(fp)
    char** argm = argv + argc;
   3c888:	e0bffd17 	ldw	r2,-12(fp)
   3c88c:	1085883a 	add	r2,r2,r2
   3c890:	1085883a 	add	r2,r2,r2
   3c894:	1007883a 	mov	r3,r2
   3c898:	e0bffe17 	ldw	r2,-8(fp)
   3c89c:	10c5883a 	add	r2,r2,r3
   3c8a0:	e0bffc15 	stw	r2,-16(fp)
    argv++;
   3c8a4:	e0bffe17 	ldw	r2,-8(fp)
   3c8a8:	10800104 	addi	r2,r2,4
   3c8ac:	e0bffe15 	stw	r2,-8(fp)
    if (argv == argm) {
   3c8b0:	e0fffe17 	ldw	r3,-8(fp)
   3c8b4:	e0bffc17 	ldw	r2,-16(fp)
   3c8b8:	18800d1e 	bne	r3,r2,3c8f0 <have_flag+0x84>
        return 1;
   3c8bc:	00800044 	movi	r2,1
   3c8c0:	00001106 	br	3c908 <have_flag+0x9c>
    }
    while (argv != NULL && argv != argm) {
        if (strcmp(*argv, flag) == 0) {
   3c8c4:	e0bffe17 	ldw	r2,-8(fp)
   3c8c8:	10800017 	ldw	r2,0(r2)
   3c8cc:	e17fff17 	ldw	r5,-4(fp)
   3c8d0:	1009883a 	mov	r4,r2
   3c8d4:	0046d3c0 	call	46d3c <strcmp>
   3c8d8:	1000021e 	bne	r2,zero,3c8e4 <have_flag+0x78>
            return 1;
   3c8dc:	00800044 	movi	r2,1
   3c8e0:	00000906 	br	3c908 <have_flag+0x9c>
        }
        argv++;
   3c8e4:	e0bffe17 	ldw	r2,-8(fp)
   3c8e8:	10800104 	addi	r2,r2,4
   3c8ec:	e0bffe15 	stw	r2,-8(fp)
    char** argm = argv + argc;
    argv++;
    if (argv == argm) {
        return 1;
    }
    while (argv != NULL && argv != argm) {
   3c8f0:	e0bffe17 	ldw	r2,-8(fp)
   3c8f4:	10000326 	beq	r2,zero,3c904 <have_flag+0x98>
   3c8f8:	e0fffe17 	ldw	r3,-8(fp)
   3c8fc:	e0bffc17 	ldw	r2,-16(fp)
   3c900:	18bff01e 	bne	r3,r2,3c8c4 <__alt_mem_epcs_flash_controller+0xfe02b8c4>
        if (strcmp(*argv, flag) == 0) {
            return 1;
        }
        argv++;
    }
    return 0;
   3c904:	0005883a 	mov	r2,zero
}
   3c908:	e037883a 	mov	sp,fp
   3c90c:	dfc00117 	ldw	ra,4(sp)
   3c910:	df000017 	ldw	fp,0(sp)
   3c914:	dec00204 	addi	sp,sp,8
   3c918:	f800283a 	ret

0003c91c <bech32_polymod_step>:
#include <stdint.h>
#include <string.h>

#include "..\include\btc\segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
   3c91c:	defffd04 	addi	sp,sp,-12
   3c920:	df000215 	stw	fp,8(sp)
   3c924:	df000204 	addi	fp,sp,8
   3c928:	e13fff15 	stw	r4,-4(fp)
    uint8_t b = pre >> 25;
   3c92c:	e0bfff17 	ldw	r2,-4(fp)
   3c930:	1004d67a 	srli	r2,r2,25
   3c934:	e0bffe05 	stb	r2,-8(fp)
    return ((pre & 0x1FFFFFF) << 5) ^
   3c938:	e0ffff17 	ldw	r3,-4(fp)
   3c93c:	00808034 	movhi	r2,512
   3c940:	10bfffc4 	addi	r2,r2,-1
   3c944:	1884703a 	and	r2,r3,r2
   3c948:	1006917a 	slli	r3,r2,5
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
   3c94c:	e0bffe03 	ldbu	r2,-8(fp)
   3c950:	1080004c 	andi	r2,r2,1
   3c954:	0085c83a 	sub	r2,zero,r2
   3c958:	1009883a 	mov	r4,r2
   3c95c:	008edab4 	movhi	r2,15210
   3c960:	1095ec84 	addi	r2,r2,22450
   3c964:	2084703a 	and	r2,r4,r2

#include "..\include\btc\segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
   3c968:	1886f03a 	xor	r3,r3,r2
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
   3c96c:	e0bffe03 	ldbu	r2,-8(fp)
   3c970:	1004d07a 	srli	r2,r2,1
   3c974:	10803fcc 	andi	r2,r2,255
   3c978:	1080004c 	andi	r2,r2,1
   3c97c:	0085c83a 	sub	r2,zero,r2
   3c980:	1009883a 	mov	r4,r2
   3c984:	00899474 	movhi	r2,9809
   3c988:	10a39b44 	addi	r2,r2,-29075
   3c98c:	2084703a 	and	r2,r4,r2
#include "..\include\btc\segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
   3c990:	1886f03a 	xor	r3,r3,r2
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
        (-((b >> 2) & 1) & 0x1ea119faUL) ^
   3c994:	e0bffe03 	ldbu	r2,-8(fp)
   3c998:	1004d0ba 	srli	r2,r2,2
   3c99c:	10803fcc 	andi	r2,r2,255
   3c9a0:	1080004c 	andi	r2,r2,1
   3c9a4:	0085c83a 	sub	r2,zero,r2
   3c9a8:	1009883a 	mov	r4,r2
   3c9ac:	0087a874 	movhi	r2,7841
   3c9b0:	10867e84 	addi	r2,r2,6650
   3c9b4:	2084703a 	and	r2,r4,r2

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
   3c9b8:	1886f03a 	xor	r3,r3,r2
        (-((b >> 2) & 1) & 0x1ea119faUL) ^
        (-((b >> 3) & 1) & 0x3d4233ddUL) ^
   3c9bc:	e0bffe03 	ldbu	r2,-8(fp)
   3c9c0:	1004d0fa 	srli	r2,r2,3
   3c9c4:	10803fcc 	andi	r2,r2,255
   3c9c8:	1080004c 	andi	r2,r2,1
   3c9cc:	0085c83a 	sub	r2,zero,r2
   3c9d0:	1009883a 	mov	r4,r2
   3c9d4:	008f50b4 	movhi	r2,15682
   3c9d8:	108cf744 	addi	r2,r2,13277
   3c9dc:	2084703a 	and	r2,r4,r2
uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
        (-((b >> 2) & 1) & 0x1ea119faUL) ^
   3c9e0:	1886f03a 	xor	r3,r3,r2
        (-((b >> 3) & 1) & 0x3d4233ddUL) ^
        (-((b >> 4) & 1) & 0x2a1462b3UL);
   3c9e4:	e0bffe03 	ldbu	r2,-8(fp)
   3c9e8:	1004d13a 	srli	r2,r2,4
   3c9ec:	10803fcc 	andi	r2,r2,255
   3c9f0:	1080004c 	andi	r2,r2,1
   3c9f4:	0085c83a 	sub	r2,zero,r2
   3c9f8:	1009883a 	mov	r4,r2
   3c9fc:	008a8534 	movhi	r2,10772
   3ca00:	1098acc4 	addi	r2,r2,25267
   3ca04:	2084703a 	and	r2,r4,r2

#include "..\include\btc\segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
   3ca08:	1884f03a 	xor	r2,r3,r2
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
        (-((b >> 2) & 1) & 0x1ea119faUL) ^
        (-((b >> 3) & 1) & 0x3d4233ddUL) ^
        (-((b >> 4) & 1) & 0x2a1462b3UL);
}
   3ca0c:	e037883a 	mov	sp,fp
   3ca10:	df000017 	ldw	fp,0(sp)
   3ca14:	dec00104 	addi	sp,sp,4
   3ca18:	f800283a 	ret

0003ca1c <bech32_encode>:
     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,
    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,
     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1
};

int bech32_encode(char *output, const char *hrp, const uint8_t *data, size_t data_len) {
   3ca1c:	defff504 	addi	sp,sp,-44
   3ca20:	dfc00a15 	stw	ra,40(sp)
   3ca24:	df000915 	stw	fp,36(sp)
   3ca28:	dc400815 	stw	r17,32(sp)
   3ca2c:	dc000715 	stw	r16,28(sp)
   3ca30:	df000904 	addi	fp,sp,36
   3ca34:	e13ffa15 	stw	r4,-24(fp)
   3ca38:	e17ffb15 	stw	r5,-20(fp)
   3ca3c:	e1bffc15 	stw	r6,-16(fp)
   3ca40:	e1fffd15 	stw	r7,-12(fp)
    uint32_t chk = 1;
   3ca44:	00800044 	movi	r2,1
   3ca48:	e0bff715 	stw	r2,-36(fp)
    size_t i = 0;
   3ca4c:	e03ff815 	stw	zero,-32(fp)
    while (hrp[i] != 0) {
   3ca50:	00002206 	br	3cadc <bech32_encode+0xc0>
        int ch = hrp[i];
   3ca54:	e0fffb17 	ldw	r3,-20(fp)
   3ca58:	e0bff817 	ldw	r2,-32(fp)
   3ca5c:	1885883a 	add	r2,r3,r2
   3ca60:	10800003 	ldbu	r2,0(r2)
   3ca64:	10803fcc 	andi	r2,r2,255
   3ca68:	1080201c 	xori	r2,r2,128
   3ca6c:	10bfe004 	addi	r2,r2,-128
   3ca70:	e0bff915 	stw	r2,-28(fp)
        if (ch < 33 || ch > 126) {
   3ca74:	e0bff917 	ldw	r2,-28(fp)
   3ca78:	10800850 	cmplti	r2,r2,33
   3ca7c:	1000031e 	bne	r2,zero,3ca8c <bech32_encode+0x70>
   3ca80:	e0bff917 	ldw	r2,-28(fp)
   3ca84:	10801fd0 	cmplti	r2,r2,127
   3ca88:	1000021e 	bne	r2,zero,3ca94 <bech32_encode+0x78>
            return 0;
   3ca8c:	0005883a 	mov	r2,zero
   3ca90:	00008d06 	br	3ccc8 <bech32_encode+0x2ac>
        }

        if (ch >= 'A' && ch <= 'Z') return 0;
   3ca94:	e0bff917 	ldw	r2,-28(fp)
   3ca98:	10801050 	cmplti	r2,r2,65
   3ca9c:	1000051e 	bne	r2,zero,3cab4 <bech32_encode+0x98>
   3caa0:	e0bff917 	ldw	r2,-28(fp)
   3caa4:	108016c8 	cmpgei	r2,r2,91
   3caa8:	1000021e 	bne	r2,zero,3cab4 <bech32_encode+0x98>
   3caac:	0005883a 	mov	r2,zero
   3cab0:	00008506 	br	3ccc8 <bech32_encode+0x2ac>
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
   3cab4:	e13ff717 	ldw	r4,-36(fp)
   3cab8:	003c91c0 	call	3c91c <bech32_polymod_step>
   3cabc:	1007883a 	mov	r3,r2
   3cac0:	e0bff917 	ldw	r2,-28(fp)
   3cac4:	1005d17a 	srai	r2,r2,5
   3cac8:	1884f03a 	xor	r2,r3,r2
   3cacc:	e0bff715 	stw	r2,-36(fp)
        ++i;
   3cad0:	e0bff817 	ldw	r2,-32(fp)
   3cad4:	10800044 	addi	r2,r2,1
   3cad8:	e0bff815 	stw	r2,-32(fp)
};

int bech32_encode(char *output, const char *hrp, const uint8_t *data, size_t data_len) {
    uint32_t chk = 1;
    size_t i = 0;
    while (hrp[i] != 0) {
   3cadc:	e0fffb17 	ldw	r3,-20(fp)
   3cae0:	e0bff817 	ldw	r2,-32(fp)
   3cae4:	1885883a 	add	r2,r3,r2
   3cae8:	10800003 	ldbu	r2,0(r2)
   3caec:	10803fcc 	andi	r2,r2,255
   3caf0:	1080201c 	xori	r2,r2,128
   3caf4:	10bfe004 	addi	r2,r2,-128
   3caf8:	103fd61e 	bne	r2,zero,3ca54 <__alt_mem_epcs_flash_controller+0xfe02ba54>

        if (ch >= 'A' && ch <= 'Z') return 0;
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
        ++i;
    }
    if (i + 7 + data_len > 90) return 0;
   3cafc:	e0fff817 	ldw	r3,-32(fp)
   3cb00:	e0bffd17 	ldw	r2,-12(fp)
   3cb04:	1885883a 	add	r2,r3,r2
   3cb08:	108001c4 	addi	r2,r2,7
   3cb0c:	108016f0 	cmpltui	r2,r2,91
   3cb10:	1000021e 	bne	r2,zero,3cb1c <bech32_encode+0x100>
   3cb14:	0005883a 	mov	r2,zero
   3cb18:	00006b06 	br	3ccc8 <bech32_encode+0x2ac>
    chk = bech32_polymod_step(chk);
   3cb1c:	e13ff717 	ldw	r4,-36(fp)
   3cb20:	003c91c0 	call	3c91c <bech32_polymod_step>
   3cb24:	e0bff715 	stw	r2,-36(fp)
    while (*hrp != 0) {
   3cb28:	00001106 	br	3cb70 <bech32_encode+0x154>
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
   3cb2c:	e13ff717 	ldw	r4,-36(fp)
   3cb30:	003c91c0 	call	3c91c <bech32_polymod_step>
   3cb34:	1007883a 	mov	r3,r2
   3cb38:	e0bffb17 	ldw	r2,-20(fp)
   3cb3c:	10800003 	ldbu	r2,0(r2)
   3cb40:	10803fcc 	andi	r2,r2,255
   3cb44:	108007cc 	andi	r2,r2,31
   3cb48:	1884f03a 	xor	r2,r3,r2
   3cb4c:	e0bff715 	stw	r2,-36(fp)
        *(output++) = *(hrp++);
   3cb50:	e0bffa17 	ldw	r2,-24(fp)
   3cb54:	10c00044 	addi	r3,r2,1
   3cb58:	e0fffa15 	stw	r3,-24(fp)
   3cb5c:	e0fffb17 	ldw	r3,-20(fp)
   3cb60:	19000044 	addi	r4,r3,1
   3cb64:	e13ffb15 	stw	r4,-20(fp)
   3cb68:	18c00003 	ldbu	r3,0(r3)
   3cb6c:	10c00005 	stb	r3,0(r2)
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
        ++i;
    }
    if (i + 7 + data_len > 90) return 0;
    chk = bech32_polymod_step(chk);
    while (*hrp != 0) {
   3cb70:	e0bffb17 	ldw	r2,-20(fp)
   3cb74:	10800003 	ldbu	r2,0(r2)
   3cb78:	10803fcc 	andi	r2,r2,255
   3cb7c:	1080201c 	xori	r2,r2,128
   3cb80:	10bfe004 	addi	r2,r2,-128
   3cb84:	103fe91e 	bne	r2,zero,3cb2c <__alt_mem_epcs_flash_controller+0xfe02bb2c>
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
        *(output++) = *(hrp++);
    }
    *(output++) = '1';
   3cb88:	e0bffa17 	ldw	r2,-24(fp)
   3cb8c:	10c00044 	addi	r3,r2,1
   3cb90:	e0fffa15 	stw	r3,-24(fp)
   3cb94:	00c00c44 	movi	r3,49
   3cb98:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < data_len; ++i) {
   3cb9c:	e03ff815 	stw	zero,-32(fp)
   3cba0:	00001f06 	br	3cc20 <bech32_encode+0x204>
        if (*data >> 5) return 0;
   3cba4:	e0bffc17 	ldw	r2,-16(fp)
   3cba8:	10800003 	ldbu	r2,0(r2)
   3cbac:	10803fcc 	andi	r2,r2,255
   3cbb0:	1004d17a 	srli	r2,r2,5
   3cbb4:	10803fcc 	andi	r2,r2,255
   3cbb8:	10000226 	beq	r2,zero,3cbc4 <bech32_encode+0x1a8>
   3cbbc:	0005883a 	mov	r2,zero
   3cbc0:	00004106 	br	3ccc8 <bech32_encode+0x2ac>
        chk = bech32_polymod_step(chk) ^ (*data);
   3cbc4:	e13ff717 	ldw	r4,-36(fp)
   3cbc8:	003c91c0 	call	3c91c <bech32_polymod_step>
   3cbcc:	1007883a 	mov	r3,r2
   3cbd0:	e0bffc17 	ldw	r2,-16(fp)
   3cbd4:	10800003 	ldbu	r2,0(r2)
   3cbd8:	10803fcc 	andi	r2,r2,255
   3cbdc:	1884f03a 	xor	r2,r3,r2
   3cbe0:	e0bff715 	stw	r2,-36(fp)
        *(output++) = charset[*(data++)];
   3cbe4:	e0bffa17 	ldw	r2,-24(fp)
   3cbe8:	10c00044 	addi	r3,r2,1
   3cbec:	e0fffa15 	stw	r3,-24(fp)
   3cbf0:	d1201317 	ldw	r4,-32692(gp)
   3cbf4:	e0fffc17 	ldw	r3,-16(fp)
   3cbf8:	19400044 	addi	r5,r3,1
   3cbfc:	e17ffc15 	stw	r5,-16(fp)
   3cc00:	18c00003 	ldbu	r3,0(r3)
   3cc04:	18c03fcc 	andi	r3,r3,255
   3cc08:	20c7883a 	add	r3,r4,r3
   3cc0c:	18c00003 	ldbu	r3,0(r3)
   3cc10:	10c00005 	stb	r3,0(r2)
    while (*hrp != 0) {
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
        *(output++) = *(hrp++);
    }
    *(output++) = '1';
    for (i = 0; i < data_len; ++i) {
   3cc14:	e0bff817 	ldw	r2,-32(fp)
   3cc18:	10800044 	addi	r2,r2,1
   3cc1c:	e0bff815 	stw	r2,-32(fp)
   3cc20:	e0fff817 	ldw	r3,-32(fp)
   3cc24:	e0bffd17 	ldw	r2,-12(fp)
   3cc28:	18bfde36 	bltu	r3,r2,3cba4 <__alt_mem_epcs_flash_controller+0xfe02bba4>
        if (*data >> 5) return 0;
        chk = bech32_polymod_step(chk) ^ (*data);
        *(output++) = charset[*(data++)];
    }
    for (i = 0; i < 6; ++i) {
   3cc2c:	e03ff815 	stw	zero,-32(fp)
   3cc30:	00000606 	br	3cc4c <bech32_encode+0x230>
        chk = bech32_polymod_step(chk);
   3cc34:	e13ff717 	ldw	r4,-36(fp)
   3cc38:	003c91c0 	call	3c91c <bech32_polymod_step>
   3cc3c:	e0bff715 	stw	r2,-36(fp)
    for (i = 0; i < data_len; ++i) {
        if (*data >> 5) return 0;
        chk = bech32_polymod_step(chk) ^ (*data);
        *(output++) = charset[*(data++)];
    }
    for (i = 0; i < 6; ++i) {
   3cc40:	e0bff817 	ldw	r2,-32(fp)
   3cc44:	10800044 	addi	r2,r2,1
   3cc48:	e0bff815 	stw	r2,-32(fp)
   3cc4c:	e0bff817 	ldw	r2,-32(fp)
   3cc50:	108001b0 	cmpltui	r2,r2,6
   3cc54:	103ff71e 	bne	r2,zero,3cc34 <__alt_mem_epcs_flash_controller+0xfe02bc34>
        chk = bech32_polymod_step(chk);
    }
    chk ^= 1;
   3cc58:	e0bff717 	ldw	r2,-36(fp)
   3cc5c:	1080005c 	xori	r2,r2,1
   3cc60:	e0bff715 	stw	r2,-36(fp)
    for (i = 0; i < 6; ++i) {
   3cc64:	e03ff815 	stw	zero,-32(fp)
   3cc68:	00001106 	br	3ccb0 <bech32_encode+0x294>
        *(output++) = charset[(chk >> ((5 - i) * 5)) & 0x1f];
   3cc6c:	e43ffa17 	ldw	r16,-24(fp)
   3cc70:	80800044 	addi	r2,r16,1
   3cc74:	e0bffa15 	stw	r2,-24(fp)
   3cc78:	d4601317 	ldw	r17,-32692(gp)
   3cc7c:	017ffec4 	movi	r5,-5
   3cc80:	e13ff817 	ldw	r4,-32(fp)
   3cc84:	0042b540 	call	42b54 <__mulsi3>
   3cc88:	10800644 	addi	r2,r2,25
   3cc8c:	e0fff717 	ldw	r3,-36(fp)
   3cc90:	1884d83a 	srl	r2,r3,r2
   3cc94:	108007cc 	andi	r2,r2,31
   3cc98:	8885883a 	add	r2,r17,r2
   3cc9c:	10800003 	ldbu	r2,0(r2)
   3cca0:	80800005 	stb	r2,0(r16)
    }
    for (i = 0; i < 6; ++i) {
        chk = bech32_polymod_step(chk);
    }
    chk ^= 1;
    for (i = 0; i < 6; ++i) {
   3cca4:	e0bff817 	ldw	r2,-32(fp)
   3cca8:	10800044 	addi	r2,r2,1
   3ccac:	e0bff815 	stw	r2,-32(fp)
   3ccb0:	e0bff817 	ldw	r2,-32(fp)
   3ccb4:	108001b0 	cmpltui	r2,r2,6
   3ccb8:	103fec1e 	bne	r2,zero,3cc6c <__alt_mem_epcs_flash_controller+0xfe02bc6c>
        *(output++) = charset[(chk >> ((5 - i) * 5)) & 0x1f];
    }
    *output = 0;
   3ccbc:	e0bffa17 	ldw	r2,-24(fp)
   3ccc0:	10000005 	stb	zero,0(r2)
    return 1;
   3ccc4:	00800044 	movi	r2,1
}
   3ccc8:	e6fffe04 	addi	sp,fp,-8
   3cccc:	dfc00317 	ldw	ra,12(sp)
   3ccd0:	df000217 	ldw	fp,8(sp)
   3ccd4:	dc400117 	ldw	r17,4(sp)
   3ccd8:	dc000017 	ldw	r16,0(sp)
   3ccdc:	dec00404 	addi	sp,sp,16
   3cce0:	f800283a 	ret

0003cce4 <bech32_decode>:

int bech32_decode(char* hrp, uint8_t *data, size_t *data_len, const char *input) {
   3cce4:	defff204 	addi	sp,sp,-56
   3cce8:	dfc00d15 	stw	ra,52(sp)
   3ccec:	df000c15 	stw	fp,48(sp)
   3ccf0:	df000c04 	addi	fp,sp,48
   3ccf4:	e13ffc15 	stw	r4,-16(fp)
   3ccf8:	e17ffd15 	stw	r5,-12(fp)
   3ccfc:	e1bffe15 	stw	r6,-8(fp)
   3cd00:	e1ffff15 	stw	r7,-4(fp)
    uint32_t chk = 1;
   3cd04:	00800044 	movi	r2,1
   3cd08:	e0bff415 	stw	r2,-48(fp)
    size_t i;
    size_t input_len = strlen(input);
   3cd0c:	e13fff17 	ldw	r4,-4(fp)
   3cd10:	0046ef40 	call	46ef4 <strlen>
   3cd14:	e0bff915 	stw	r2,-28(fp)
    size_t hrp_len;
    int have_lower = 0, have_upper = 0;
   3cd18:	e03ff615 	stw	zero,-40(fp)
   3cd1c:	e03ff715 	stw	zero,-36(fp)
    if (input_len < 8 || input_len > 90) {
   3cd20:	e0bff917 	ldw	r2,-28(fp)
   3cd24:	10800230 	cmpltui	r2,r2,8
   3cd28:	1000031e 	bne	r2,zero,3cd38 <bech32_decode+0x54>
   3cd2c:	e0bff917 	ldw	r2,-28(fp)
   3cd30:	108016f0 	cmpltui	r2,r2,91
   3cd34:	1000021e 	bne	r2,zero,3cd40 <bech32_decode+0x5c>
        return 0;
   3cd38:	0005883a 	mov	r2,zero
   3cd3c:	0000ec06 	br	3d0f0 <bech32_decode+0x40c>
    }
    *data_len = 0;
   3cd40:	e0bffe17 	ldw	r2,-8(fp)
   3cd44:	10000015 	stw	zero,0(r2)
    while (*data_len < input_len && input[(input_len - 1) - *data_len] != '1') {
   3cd48:	00000506 	br	3cd60 <bech32_decode+0x7c>
        ++(*data_len);
   3cd4c:	e0bffe17 	ldw	r2,-8(fp)
   3cd50:	10800017 	ldw	r2,0(r2)
   3cd54:	10c00044 	addi	r3,r2,1
   3cd58:	e0bffe17 	ldw	r2,-8(fp)
   3cd5c:	10c00015 	stw	r3,0(r2)
    int have_lower = 0, have_upper = 0;
    if (input_len < 8 || input_len > 90) {
        return 0;
    }
    *data_len = 0;
    while (*data_len < input_len && input[(input_len - 1) - *data_len] != '1') {
   3cd60:	e0bffe17 	ldw	r2,-8(fp)
   3cd64:	10c00017 	ldw	r3,0(r2)
   3cd68:	e0bff917 	ldw	r2,-28(fp)
   3cd6c:	18800d2e 	bgeu	r3,r2,3cda4 <bech32_decode+0xc0>
   3cd70:	e0bffe17 	ldw	r2,-8(fp)
   3cd74:	10800017 	ldw	r2,0(r2)
   3cd78:	e0fff917 	ldw	r3,-28(fp)
   3cd7c:	1885c83a 	sub	r2,r3,r2
   3cd80:	10bfffc4 	addi	r2,r2,-1
   3cd84:	e0ffff17 	ldw	r3,-4(fp)
   3cd88:	1885883a 	add	r2,r3,r2
   3cd8c:	10800003 	ldbu	r2,0(r2)
   3cd90:	10803fcc 	andi	r2,r2,255
   3cd94:	1080201c 	xori	r2,r2,128
   3cd98:	10bfe004 	addi	r2,r2,-128
   3cd9c:	10800c58 	cmpnei	r2,r2,49
   3cda0:	103fea1e 	bne	r2,zero,3cd4c <__alt_mem_epcs_flash_controller+0xfe02bd4c>
        ++(*data_len);
    }
    hrp_len = input_len - (1 + *data_len);
   3cda4:	e0bffe17 	ldw	r2,-8(fp)
   3cda8:	10800017 	ldw	r2,0(r2)
   3cdac:	e0fff917 	ldw	r3,-28(fp)
   3cdb0:	1885c83a 	sub	r2,r3,r2
   3cdb4:	10bfffc4 	addi	r2,r2,-1
   3cdb8:	e0bffa15 	stw	r2,-24(fp)
    if (1 + *data_len >= input_len || *data_len < 6) {
   3cdbc:	e0bffe17 	ldw	r2,-8(fp)
   3cdc0:	10800017 	ldw	r2,0(r2)
   3cdc4:	10c00044 	addi	r3,r2,1
   3cdc8:	e0bff917 	ldw	r2,-28(fp)
   3cdcc:	1880042e 	bgeu	r3,r2,3cde0 <bech32_decode+0xfc>
   3cdd0:	e0bffe17 	ldw	r2,-8(fp)
   3cdd4:	10800017 	ldw	r2,0(r2)
   3cdd8:	108001a8 	cmpgeui	r2,r2,6
   3cddc:	1000021e 	bne	r2,zero,3cde8 <bech32_decode+0x104>
        return 0;
   3cde0:	0005883a 	mov	r2,zero
   3cde4:	0000c206 	br	3d0f0 <bech32_decode+0x40c>
    }
    *(data_len) -= 6;
   3cde8:	e0bffe17 	ldw	r2,-8(fp)
   3cdec:	10800017 	ldw	r2,0(r2)
   3cdf0:	10fffe84 	addi	r3,r2,-6
   3cdf4:	e0bffe17 	ldw	r2,-8(fp)
   3cdf8:	10c00015 	stw	r3,0(r2)
    for (i = 0; i < hrp_len; ++i) {
   3cdfc:	e03ff515 	stw	zero,-44(fp)
   3ce00:	00003306 	br	3ced0 <bech32_decode+0x1ec>
        int ch = input[i];
   3ce04:	e0ffff17 	ldw	r3,-4(fp)
   3ce08:	e0bff517 	ldw	r2,-44(fp)
   3ce0c:	1885883a 	add	r2,r3,r2
   3ce10:	10800003 	ldbu	r2,0(r2)
   3ce14:	10803fcc 	andi	r2,r2,255
   3ce18:	1080201c 	xori	r2,r2,128
   3ce1c:	10bfe004 	addi	r2,r2,-128
   3ce20:	e0bff815 	stw	r2,-32(fp)
        if (ch < 33 || ch > 126) {
   3ce24:	e0bff817 	ldw	r2,-32(fp)
   3ce28:	10800850 	cmplti	r2,r2,33
   3ce2c:	1000031e 	bne	r2,zero,3ce3c <bech32_decode+0x158>
   3ce30:	e0bff817 	ldw	r2,-32(fp)
   3ce34:	10801fd0 	cmplti	r2,r2,127
   3ce38:	1000021e 	bne	r2,zero,3ce44 <bech32_decode+0x160>
            return 0;
   3ce3c:	0005883a 	mov	r2,zero
   3ce40:	0000ab06 	br	3d0f0 <bech32_decode+0x40c>
        }
        if (ch >= 'a' && ch <= 'z') {
   3ce44:	e0bff817 	ldw	r2,-32(fp)
   3ce48:	10801850 	cmplti	r2,r2,97
   3ce4c:	1000061e 	bne	r2,zero,3ce68 <bech32_decode+0x184>
   3ce50:	e0bff817 	ldw	r2,-32(fp)
   3ce54:	10801ec8 	cmpgei	r2,r2,123
   3ce58:	1000031e 	bne	r2,zero,3ce68 <bech32_decode+0x184>
            have_lower = 1;
   3ce5c:	00800044 	movi	r2,1
   3ce60:	e0bff615 	stw	r2,-40(fp)
   3ce64:	00000b06 	br	3ce94 <bech32_decode+0x1b0>
        } else if (ch >= 'A' && ch <= 'Z') {
   3ce68:	e0bff817 	ldw	r2,-32(fp)
   3ce6c:	10801050 	cmplti	r2,r2,65
   3ce70:	1000081e 	bne	r2,zero,3ce94 <bech32_decode+0x1b0>
   3ce74:	e0bff817 	ldw	r2,-32(fp)
   3ce78:	108016c8 	cmpgei	r2,r2,91
   3ce7c:	1000051e 	bne	r2,zero,3ce94 <bech32_decode+0x1b0>
            have_upper = 1;
   3ce80:	00800044 	movi	r2,1
   3ce84:	e0bff715 	stw	r2,-36(fp)
            ch = (ch - 'A') + 'a';
   3ce88:	e0bff817 	ldw	r2,-32(fp)
   3ce8c:	10800804 	addi	r2,r2,32
   3ce90:	e0bff815 	stw	r2,-32(fp)
        }
        hrp[i] = ch;
   3ce94:	e0fffc17 	ldw	r3,-16(fp)
   3ce98:	e0bff517 	ldw	r2,-44(fp)
   3ce9c:	1885883a 	add	r2,r3,r2
   3cea0:	e0fff817 	ldw	r3,-32(fp)
   3cea4:	10c00005 	stb	r3,0(r2)
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
   3cea8:	e13ff417 	ldw	r4,-48(fp)
   3ceac:	003c91c0 	call	3c91c <bech32_polymod_step>
   3ceb0:	1007883a 	mov	r3,r2
   3ceb4:	e0bff817 	ldw	r2,-32(fp)
   3ceb8:	1005d17a 	srai	r2,r2,5
   3cebc:	1884f03a 	xor	r2,r3,r2
   3cec0:	e0bff415 	stw	r2,-48(fp)
    hrp_len = input_len - (1 + *data_len);
    if (1 + *data_len >= input_len || *data_len < 6) {
        return 0;
    }
    *(data_len) -= 6;
    for (i = 0; i < hrp_len; ++i) {
   3cec4:	e0bff517 	ldw	r2,-44(fp)
   3cec8:	10800044 	addi	r2,r2,1
   3cecc:	e0bff515 	stw	r2,-44(fp)
   3ced0:	e0fff517 	ldw	r3,-44(fp)
   3ced4:	e0bffa17 	ldw	r2,-24(fp)
   3ced8:	18bfca36 	bltu	r3,r2,3ce04 <__alt_mem_epcs_flash_controller+0xfe02be04>
            ch = (ch - 'A') + 'a';
        }
        hrp[i] = ch;
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
    }
    hrp[i] = 0;
   3cedc:	e0fffc17 	ldw	r3,-16(fp)
   3cee0:	e0bff517 	ldw	r2,-44(fp)
   3cee4:	1885883a 	add	r2,r3,r2
   3cee8:	10000005 	stb	zero,0(r2)
    chk = bech32_polymod_step(chk);
   3ceec:	e13ff417 	ldw	r4,-48(fp)
   3cef0:	003c91c0 	call	3c91c <bech32_polymod_step>
   3cef4:	e0bff415 	stw	r2,-48(fp)
    for (i = 0; i < hrp_len; ++i) {
   3cef8:	e03ff515 	stw	zero,-44(fp)
   3cefc:	00000e06 	br	3cf38 <bech32_decode+0x254>
        chk = bech32_polymod_step(chk) ^ (input[i] & 0x1f);
   3cf00:	e13ff417 	ldw	r4,-48(fp)
   3cf04:	003c91c0 	call	3c91c <bech32_polymod_step>
   3cf08:	1009883a 	mov	r4,r2
   3cf0c:	e0ffff17 	ldw	r3,-4(fp)
   3cf10:	e0bff517 	ldw	r2,-44(fp)
   3cf14:	1885883a 	add	r2,r3,r2
   3cf18:	10800003 	ldbu	r2,0(r2)
   3cf1c:	10803fcc 	andi	r2,r2,255
   3cf20:	108007cc 	andi	r2,r2,31
   3cf24:	2084f03a 	xor	r2,r4,r2
   3cf28:	e0bff415 	stw	r2,-48(fp)
        hrp[i] = ch;
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
    }
    hrp[i] = 0;
    chk = bech32_polymod_step(chk);
    for (i = 0; i < hrp_len; ++i) {
   3cf2c:	e0bff517 	ldw	r2,-44(fp)
   3cf30:	10800044 	addi	r2,r2,1
   3cf34:	e0bff515 	stw	r2,-44(fp)
   3cf38:	e0fff517 	ldw	r3,-44(fp)
   3cf3c:	e0bffa17 	ldw	r2,-24(fp)
   3cf40:	18bfef36 	bltu	r3,r2,3cf00 <__alt_mem_epcs_flash_controller+0xfe02bf00>
        chk = bech32_polymod_step(chk) ^ (input[i] & 0x1f);
    }
    ++i;
   3cf44:	e0bff517 	ldw	r2,-44(fp)
   3cf48:	10800044 	addi	r2,r2,1
   3cf4c:	e0bff515 	stw	r2,-44(fp)
    while (i < input_len) {
   3cf50:	00005b06 	br	3d0c0 <bech32_decode+0x3dc>
        int v = (input[i] & 0x80) ? -1 : charset_rev[(int)input[i]];
   3cf54:	e0ffff17 	ldw	r3,-4(fp)
   3cf58:	e0bff517 	ldw	r2,-44(fp)
   3cf5c:	1885883a 	add	r2,r3,r2
   3cf60:	10800003 	ldbu	r2,0(r2)
   3cf64:	10803fcc 	andi	r2,r2,255
   3cf68:	1080201c 	xori	r2,r2,128
   3cf6c:	10bfe004 	addi	r2,r2,-128
   3cf70:	10000f16 	blt	r2,zero,3cfb0 <bech32_decode+0x2cc>
   3cf74:	e0ffff17 	ldw	r3,-4(fp)
   3cf78:	e0bff517 	ldw	r2,-44(fp)
   3cf7c:	1885883a 	add	r2,r3,r2
   3cf80:	10800003 	ldbu	r2,0(r2)
   3cf84:	10c03fcc 	andi	r3,r2,255
   3cf88:	18c0201c 	xori	r3,r3,128
   3cf8c:	18ffe004 	addi	r3,r3,-128
   3cf90:	008001b4 	movhi	r2,6
   3cf94:	10b30844 	addi	r2,r2,-13279
   3cf98:	10c5883a 	add	r2,r2,r3
   3cf9c:	10800003 	ldbu	r2,0(r2)
   3cfa0:	10803fcc 	andi	r2,r2,255
   3cfa4:	1080201c 	xori	r2,r2,128
   3cfa8:	10bfe004 	addi	r2,r2,-128
   3cfac:	00000106 	br	3cfb4 <bech32_decode+0x2d0>
   3cfb0:	00bfffc4 	movi	r2,-1
   3cfb4:	e0bffb15 	stw	r2,-20(fp)
        if (input[i] >= 'a' && input[i] <= 'z') have_lower = 1;
   3cfb8:	e0ffff17 	ldw	r3,-4(fp)
   3cfbc:	e0bff517 	ldw	r2,-44(fp)
   3cfc0:	1885883a 	add	r2,r3,r2
   3cfc4:	10800003 	ldbu	r2,0(r2)
   3cfc8:	10803fcc 	andi	r2,r2,255
   3cfcc:	1080201c 	xori	r2,r2,128
   3cfd0:	10bfe004 	addi	r2,r2,-128
   3cfd4:	10801850 	cmplti	r2,r2,97
   3cfd8:	10000b1e 	bne	r2,zero,3d008 <bech32_decode+0x324>
   3cfdc:	e0ffff17 	ldw	r3,-4(fp)
   3cfe0:	e0bff517 	ldw	r2,-44(fp)
   3cfe4:	1885883a 	add	r2,r3,r2
   3cfe8:	10800003 	ldbu	r2,0(r2)
   3cfec:	10803fcc 	andi	r2,r2,255
   3cff0:	1080201c 	xori	r2,r2,128
   3cff4:	10bfe004 	addi	r2,r2,-128
   3cff8:	10801ec8 	cmpgei	r2,r2,123
   3cffc:	1000021e 	bne	r2,zero,3d008 <bech32_decode+0x324>
   3d000:	00800044 	movi	r2,1
   3d004:	e0bff615 	stw	r2,-40(fp)
        if (input[i] >= 'A' && input[i] <= 'Z') have_upper = 1;
   3d008:	e0ffff17 	ldw	r3,-4(fp)
   3d00c:	e0bff517 	ldw	r2,-44(fp)
   3d010:	1885883a 	add	r2,r3,r2
   3d014:	10800003 	ldbu	r2,0(r2)
   3d018:	10803fcc 	andi	r2,r2,255
   3d01c:	1080201c 	xori	r2,r2,128
   3d020:	10bfe004 	addi	r2,r2,-128
   3d024:	10801050 	cmplti	r2,r2,65
   3d028:	10000b1e 	bne	r2,zero,3d058 <bech32_decode+0x374>
   3d02c:	e0ffff17 	ldw	r3,-4(fp)
   3d030:	e0bff517 	ldw	r2,-44(fp)
   3d034:	1885883a 	add	r2,r3,r2
   3d038:	10800003 	ldbu	r2,0(r2)
   3d03c:	10803fcc 	andi	r2,r2,255
   3d040:	1080201c 	xori	r2,r2,128
   3d044:	10bfe004 	addi	r2,r2,-128
   3d048:	108016c8 	cmpgei	r2,r2,91
   3d04c:	1000021e 	bne	r2,zero,3d058 <bech32_decode+0x374>
   3d050:	00800044 	movi	r2,1
   3d054:	e0bff715 	stw	r2,-36(fp)
        if (v == -1) {
   3d058:	e0bffb17 	ldw	r2,-20(fp)
   3d05c:	10bfffd8 	cmpnei	r2,r2,-1
   3d060:	1000021e 	bne	r2,zero,3d06c <bech32_decode+0x388>
            return 0;
   3d064:	0005883a 	mov	r2,zero
   3d068:	00002106 	br	3d0f0 <bech32_decode+0x40c>
        }
        chk = bech32_polymod_step(chk) ^ v;
   3d06c:	e13ff417 	ldw	r4,-48(fp)
   3d070:	003c91c0 	call	3c91c <bech32_polymod_step>
   3d074:	1007883a 	mov	r3,r2
   3d078:	e0bffb17 	ldw	r2,-20(fp)
   3d07c:	1884f03a 	xor	r2,r3,r2
   3d080:	e0bff415 	stw	r2,-48(fp)
        if (i + 6 < input_len) {
   3d084:	e0bff517 	ldw	r2,-44(fp)
   3d088:	10c00184 	addi	r3,r2,6
   3d08c:	e0bff917 	ldw	r2,-28(fp)
   3d090:	1880082e 	bgeu	r3,r2,3d0b4 <bech32_decode+0x3d0>
            data[i - (1 + hrp_len)] = v;
   3d094:	e0fff517 	ldw	r3,-44(fp)
   3d098:	e0bffa17 	ldw	r2,-24(fp)
   3d09c:	1885c83a 	sub	r2,r3,r2
   3d0a0:	10bfffc4 	addi	r2,r2,-1
   3d0a4:	e0fffd17 	ldw	r3,-12(fp)
   3d0a8:	1885883a 	add	r2,r3,r2
   3d0ac:	e0fffb17 	ldw	r3,-20(fp)
   3d0b0:	10c00005 	stb	r3,0(r2)
        }
        ++i;
   3d0b4:	e0bff517 	ldw	r2,-44(fp)
   3d0b8:	10800044 	addi	r2,r2,1
   3d0bc:	e0bff515 	stw	r2,-44(fp)
    chk = bech32_polymod_step(chk);
    for (i = 0; i < hrp_len; ++i) {
        chk = bech32_polymod_step(chk) ^ (input[i] & 0x1f);
    }
    ++i;
    while (i < input_len) {
   3d0c0:	e0fff517 	ldw	r3,-44(fp)
   3d0c4:	e0bff917 	ldw	r2,-28(fp)
   3d0c8:	18bfa236 	bltu	r3,r2,3cf54 <__alt_mem_epcs_flash_controller+0xfe02bf54>
        if (i + 6 < input_len) {
            data[i - (1 + hrp_len)] = v;
        }
        ++i;
    }
    if (have_lower && have_upper) {
   3d0cc:	e0bff617 	ldw	r2,-40(fp)
   3d0d0:	10000426 	beq	r2,zero,3d0e4 <bech32_decode+0x400>
   3d0d4:	e0bff717 	ldw	r2,-36(fp)
   3d0d8:	10000226 	beq	r2,zero,3d0e4 <bech32_decode+0x400>
        return 0;
   3d0dc:	0005883a 	mov	r2,zero
   3d0e0:	00000306 	br	3d0f0 <bech32_decode+0x40c>
    }
    return chk == 1;
   3d0e4:	e0bff417 	ldw	r2,-48(fp)
   3d0e8:	10800060 	cmpeqi	r2,r2,1
   3d0ec:	10803fcc 	andi	r2,r2,255
}
   3d0f0:	e037883a 	mov	sp,fp
   3d0f4:	dfc00117 	ldw	ra,4(sp)
   3d0f8:	df000017 	ldw	fp,0(sp)
   3d0fc:	dec00204 	addi	sp,sp,8
   3d100:	f800283a 	ret

0003d104 <convert_bits>:

static int convert_bits(uint8_t* out, size_t* outlen, int outbits, const uint8_t* in, size_t inlen, int inbits, int pad) {
   3d104:	defff804 	addi	sp,sp,-32
   3d108:	df000715 	stw	fp,28(sp)
   3d10c:	df000704 	addi	fp,sp,28
   3d110:	e13ffc15 	stw	r4,-16(fp)
   3d114:	e17ffd15 	stw	r5,-12(fp)
   3d118:	e1bffe15 	stw	r6,-8(fp)
   3d11c:	e1ffff15 	stw	r7,-4(fp)
    uint32_t val = 0;
   3d120:	e03ff915 	stw	zero,-28(fp)
    int bits = 0;
   3d124:	e03ffa15 	stw	zero,-24(fp)
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
   3d128:	00c00044 	movi	r3,1
   3d12c:	e0bffe17 	ldw	r2,-8(fp)
   3d130:	1884983a 	sll	r2,r3,r2
   3d134:	10bfffc4 	addi	r2,r2,-1
   3d138:	e0bffb15 	stw	r2,-20(fp)
    while (inlen--) {
   3d13c:	00002406 	br	3d1d0 <convert_bits+0xcc>
        val = (val << inbits) | *(in++);
   3d140:	e0fff917 	ldw	r3,-28(fp)
   3d144:	e0800217 	ldw	r2,8(fp)
   3d148:	1886983a 	sll	r3,r3,r2
   3d14c:	e0bfff17 	ldw	r2,-4(fp)
   3d150:	11000044 	addi	r4,r2,1
   3d154:	e13fff15 	stw	r4,-4(fp)
   3d158:	10800003 	ldbu	r2,0(r2)
   3d15c:	10803fcc 	andi	r2,r2,255
   3d160:	1884b03a 	or	r2,r3,r2
   3d164:	e0bff915 	stw	r2,-28(fp)
        bits += inbits;
   3d168:	e0fffa17 	ldw	r3,-24(fp)
   3d16c:	e0800217 	ldw	r2,8(fp)
   3d170:	1885883a 	add	r2,r3,r2
   3d174:	e0bffa15 	stw	r2,-24(fp)
        while (bits >= outbits) {
   3d178:	00001206 	br	3d1c4 <convert_bits+0xc0>
            bits -= outbits;
   3d17c:	e0fffa17 	ldw	r3,-24(fp)
   3d180:	e0bffe17 	ldw	r2,-8(fp)
   3d184:	1885c83a 	sub	r2,r3,r2
   3d188:	e0bffa15 	stw	r2,-24(fp)
            out[(*outlen)++] = (val >> bits) & maxv;
   3d18c:	e0bffd17 	ldw	r2,-12(fp)
   3d190:	10800017 	ldw	r2,0(r2)
   3d194:	11000044 	addi	r4,r2,1
   3d198:	e0fffd17 	ldw	r3,-12(fp)
   3d19c:	19000015 	stw	r4,0(r3)
   3d1a0:	e0fffc17 	ldw	r3,-16(fp)
   3d1a4:	1885883a 	add	r2,r3,r2
   3d1a8:	e13ff917 	ldw	r4,-28(fp)
   3d1ac:	e0fffa17 	ldw	r3,-24(fp)
   3d1b0:	20c6d83a 	srl	r3,r4,r3
   3d1b4:	1809883a 	mov	r4,r3
   3d1b8:	e0fffb17 	ldw	r3,-20(fp)
   3d1bc:	20c6703a 	and	r3,r4,r3
   3d1c0:	10c00005 	stb	r3,0(r2)
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
        val = (val << inbits) | *(in++);
        bits += inbits;
        while (bits >= outbits) {
   3d1c4:	e0fffa17 	ldw	r3,-24(fp)
   3d1c8:	e0bffe17 	ldw	r2,-8(fp)
   3d1cc:	18bfeb0e 	bge	r3,r2,3d17c <__alt_mem_epcs_flash_controller+0xfe02c17c>

static int convert_bits(uint8_t* out, size_t* outlen, int outbits, const uint8_t* in, size_t inlen, int inbits, int pad) {
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
   3d1d0:	e0800117 	ldw	r2,4(fp)
   3d1d4:	10ffffc4 	addi	r3,r2,-1
   3d1d8:	e0c00115 	stw	r3,4(fp)
   3d1dc:	103fd81e 	bne	r2,zero,3d140 <__alt_mem_epcs_flash_controller+0xfe02c140>
        while (bits >= outbits) {
            bits -= outbits;
            out[(*outlen)++] = (val >> bits) & maxv;
        }
    }
    if (pad) {
   3d1e0:	e0800317 	ldw	r2,12(fp)
   3d1e4:	10001326 	beq	r2,zero,3d234 <convert_bits+0x130>
        if (bits) {
   3d1e8:	e0bffa17 	ldw	r2,-24(fp)
   3d1ec:	10001e26 	beq	r2,zero,3d268 <convert_bits+0x164>
            out[(*outlen)++] = (val << (outbits - bits)) & maxv;
   3d1f0:	e0bffd17 	ldw	r2,-12(fp)
   3d1f4:	10800017 	ldw	r2,0(r2)
   3d1f8:	11000044 	addi	r4,r2,1
   3d1fc:	e0fffd17 	ldw	r3,-12(fp)
   3d200:	19000015 	stw	r4,0(r3)
   3d204:	e0fffc17 	ldw	r3,-16(fp)
   3d208:	1885883a 	add	r2,r3,r2
   3d20c:	e13ffe17 	ldw	r4,-8(fp)
   3d210:	e0fffa17 	ldw	r3,-24(fp)
   3d214:	20c7c83a 	sub	r3,r4,r3
   3d218:	e13ff917 	ldw	r4,-28(fp)
   3d21c:	20c6983a 	sll	r3,r4,r3
   3d220:	1809883a 	mov	r4,r3
   3d224:	e0fffb17 	ldw	r3,-20(fp)
   3d228:	20c6703a 	and	r3,r4,r3
   3d22c:	10c00005 	stb	r3,0(r2)
   3d230:	00000d06 	br	3d268 <convert_bits+0x164>
        }
    } else if (((val << (outbits - bits)) & maxv) || bits >= inbits) {
   3d234:	e0fffe17 	ldw	r3,-8(fp)
   3d238:	e0bffa17 	ldw	r2,-24(fp)
   3d23c:	1885c83a 	sub	r2,r3,r2
   3d240:	e0fff917 	ldw	r3,-28(fp)
   3d244:	1886983a 	sll	r3,r3,r2
   3d248:	e0bffb17 	ldw	r2,-20(fp)
   3d24c:	1884703a 	and	r2,r3,r2
   3d250:	1000031e 	bne	r2,zero,3d260 <convert_bits+0x15c>
   3d254:	e0fffa17 	ldw	r3,-24(fp)
   3d258:	e0800217 	ldw	r2,8(fp)
   3d25c:	18800216 	blt	r3,r2,3d268 <convert_bits+0x164>
        return 0;
   3d260:	0005883a 	mov	r2,zero
   3d264:	00000106 	br	3d26c <convert_bits+0x168>
    }
    return 1;
   3d268:	00800044 	movi	r2,1
}
   3d26c:	e037883a 	mov	sp,fp
   3d270:	df000017 	ldw	fp,0(sp)
   3d274:	dec00104 	addi	sp,sp,4
   3d278:	f800283a 	ret

0003d27c <segwit_addr_encode>:

int segwit_addr_encode(char *output, const char *hrp, int witver, const uint8_t *witprog, size_t witprog_len) {
   3d27c:	deffe504 	addi	sp,sp,-108
   3d280:	dfc01a15 	stw	ra,104(sp)
   3d284:	df001915 	stw	fp,100(sp)
   3d288:	df001904 	addi	fp,sp,100
   3d28c:	e13ffc15 	stw	r4,-16(fp)
   3d290:	e17ffd15 	stw	r5,-12(fp)
   3d294:	e1bffe15 	stw	r6,-8(fp)
   3d298:	e1ffff15 	stw	r7,-4(fp)
    uint8_t data[65];
    size_t datalen = 0;
   3d29c:	e03ffb15 	stw	zero,-20(fp)
    if (witver > 16) return 0;
   3d2a0:	e0bffe17 	ldw	r2,-8(fp)
   3d2a4:	10800450 	cmplti	r2,r2,17
   3d2a8:	1000021e 	bne	r2,zero,3d2b4 <segwit_addr_encode+0x38>
   3d2ac:	0005883a 	mov	r2,zero
   3d2b0:	00002a06 	br	3d35c <segwit_addr_encode+0xe0>
    if (witver == 0 && witprog_len != 20 && witprog_len != 32) return 0;
   3d2b4:	e0bffe17 	ldw	r2,-8(fp)
   3d2b8:	1000081e 	bne	r2,zero,3d2dc <segwit_addr_encode+0x60>
   3d2bc:	e0800217 	ldw	r2,8(fp)
   3d2c0:	10800520 	cmpeqi	r2,r2,20
   3d2c4:	1000051e 	bne	r2,zero,3d2dc <segwit_addr_encode+0x60>
   3d2c8:	e0800217 	ldw	r2,8(fp)
   3d2cc:	10800820 	cmpeqi	r2,r2,32
   3d2d0:	1000021e 	bne	r2,zero,3d2dc <segwit_addr_encode+0x60>
   3d2d4:	0005883a 	mov	r2,zero
   3d2d8:	00002006 	br	3d35c <segwit_addr_encode+0xe0>
    if (witprog_len < 2 || witprog_len > 40) return 0;
   3d2dc:	e0800217 	ldw	r2,8(fp)
   3d2e0:	108000b0 	cmpltui	r2,r2,2
   3d2e4:	1000031e 	bne	r2,zero,3d2f4 <segwit_addr_encode+0x78>
   3d2e8:	e0800217 	ldw	r2,8(fp)
   3d2ec:	10800a70 	cmpltui	r2,r2,41
   3d2f0:	1000021e 	bne	r2,zero,3d2fc <segwit_addr_encode+0x80>
   3d2f4:	0005883a 	mov	r2,zero
   3d2f8:	00001806 	br	3d35c <segwit_addr_encode+0xe0>
    data[0] = witver;
   3d2fc:	e0bffe17 	ldw	r2,-8(fp)
   3d300:	e0bfea05 	stb	r2,-88(fp)
    convert_bits(data + 1, &datalen, 5, witprog, witprog_len, 8, 1);
   3d304:	e0ffea44 	addi	r3,fp,-87
   3d308:	e13ffb04 	addi	r4,fp,-20
   3d30c:	00800044 	movi	r2,1
   3d310:	d8800215 	stw	r2,8(sp)
   3d314:	00800204 	movi	r2,8
   3d318:	d8800115 	stw	r2,4(sp)
   3d31c:	e0800217 	ldw	r2,8(fp)
   3d320:	d8800015 	stw	r2,0(sp)
   3d324:	e1ffff17 	ldw	r7,-4(fp)
   3d328:	01800144 	movi	r6,5
   3d32c:	200b883a 	mov	r5,r4
   3d330:	1809883a 	mov	r4,r3
   3d334:	003d1040 	call	3d104 <convert_bits>
    ++datalen;
   3d338:	e0bffb17 	ldw	r2,-20(fp)
   3d33c:	10800044 	addi	r2,r2,1
   3d340:	e0bffb15 	stw	r2,-20(fp)
    return bech32_encode(output, hrp, data, datalen);
   3d344:	e0bffb17 	ldw	r2,-20(fp)
   3d348:	100f883a 	mov	r7,r2
   3d34c:	e1bfea04 	addi	r6,fp,-88
   3d350:	e17ffd17 	ldw	r5,-12(fp)
   3d354:	e13ffc17 	ldw	r4,-16(fp)
   3d358:	003ca1c0 	call	3ca1c <bech32_encode>
}
   3d35c:	e037883a 	mov	sp,fp
   3d360:	dfc00117 	ldw	ra,4(sp)
   3d364:	df000017 	ldw	fp,0(sp)
   3d368:	dec00204 	addi	sp,sp,8
   3d36c:	f800283a 	ret

0003d370 <segwit_addr_decode>:

int segwit_addr_decode(int* witver, uint8_t* witdata, size_t* witdata_len, const char* hrp, const char* addr) {
   3d370:	deffcc04 	addi	sp,sp,-208
   3d374:	dfc03315 	stw	ra,204(sp)
   3d378:	df003215 	stw	fp,200(sp)
   3d37c:	df003204 	addi	fp,sp,200
   3d380:	e13ffc15 	stw	r4,-16(fp)
   3d384:	e17ffd15 	stw	r5,-12(fp)
   3d388:	e1bffe15 	stw	r6,-8(fp)
   3d38c:	e1ffff15 	stw	r7,-4(fp)
    uint8_t data[84];
    char hrp_actual[84];
    size_t data_len;
    if (!bech32_decode(hrp_actual, data, &data_len, addr)) return 0;
   3d390:	e0fffb04 	addi	r3,fp,-20
   3d394:	e0bfe604 	addi	r2,fp,-104
   3d398:	e1c00217 	ldw	r7,8(fp)
   3d39c:	180d883a 	mov	r6,r3
   3d3a0:	e17fd104 	addi	r5,fp,-188
   3d3a4:	1009883a 	mov	r4,r2
   3d3a8:	003cce40 	call	3cce4 <bech32_decode>
   3d3ac:	1000021e 	bne	r2,zero,3d3b8 <segwit_addr_decode+0x48>
   3d3b0:	0005883a 	mov	r2,zero
   3d3b4:	00004206 	br	3d4c0 <segwit_addr_decode+0x150>
    if (data_len == 0 || data_len > 65) return 0;
   3d3b8:	e0bffb17 	ldw	r2,-20(fp)
   3d3bc:	10000326 	beq	r2,zero,3d3cc <segwit_addr_decode+0x5c>
   3d3c0:	e0bffb17 	ldw	r2,-20(fp)
   3d3c4:	108010b0 	cmpltui	r2,r2,66
   3d3c8:	1000021e 	bne	r2,zero,3d3d4 <segwit_addr_decode+0x64>
   3d3cc:	0005883a 	mov	r2,zero
   3d3d0:	00003b06 	br	3d4c0 <segwit_addr_decode+0x150>
    if (strncmp(hrp, hrp_actual, 84) != 0) return 0;
   3d3d4:	e0bfe604 	addi	r2,fp,-104
   3d3d8:	01801504 	movi	r6,84
   3d3dc:	100b883a 	mov	r5,r2
   3d3e0:	e13fff17 	ldw	r4,-4(fp)
   3d3e4:	0046f8c0 	call	46f8c <strncmp>
   3d3e8:	10000226 	beq	r2,zero,3d3f4 <segwit_addr_decode+0x84>
   3d3ec:	0005883a 	mov	r2,zero
   3d3f0:	00003306 	br	3d4c0 <segwit_addr_decode+0x150>
    if (data[0] > 16) return 0;
   3d3f4:	e0bfd103 	ldbu	r2,-188(fp)
   3d3f8:	10803fcc 	andi	r2,r2,255
   3d3fc:	10800470 	cmpltui	r2,r2,17
   3d400:	1000021e 	bne	r2,zero,3d40c <segwit_addr_decode+0x9c>
   3d404:	0005883a 	mov	r2,zero
   3d408:	00002d06 	br	3d4c0 <segwit_addr_decode+0x150>
    *witdata_len = 0;
   3d40c:	e0bffe17 	ldw	r2,-8(fp)
   3d410:	10000015 	stw	zero,0(r2)
    if (!convert_bits(witdata, witdata_len, 8, data + 1, data_len - 1, 5, 0)) return 0;
   3d414:	e13fd144 	addi	r4,fp,-187
   3d418:	e0bffb17 	ldw	r2,-20(fp)
   3d41c:	10bfffc4 	addi	r2,r2,-1
   3d420:	d8000215 	stw	zero,8(sp)
   3d424:	00c00144 	movi	r3,5
   3d428:	d8c00115 	stw	r3,4(sp)
   3d42c:	d8800015 	stw	r2,0(sp)
   3d430:	200f883a 	mov	r7,r4
   3d434:	01800204 	movi	r6,8
   3d438:	e17ffe17 	ldw	r5,-8(fp)
   3d43c:	e13ffd17 	ldw	r4,-12(fp)
   3d440:	003d1040 	call	3d104 <convert_bits>
   3d444:	1000021e 	bne	r2,zero,3d450 <segwit_addr_decode+0xe0>
   3d448:	0005883a 	mov	r2,zero
   3d44c:	00001c06 	br	3d4c0 <segwit_addr_decode+0x150>
    if (*witdata_len < 2 || *witdata_len > 40) return 0;
   3d450:	e0bffe17 	ldw	r2,-8(fp)
   3d454:	10800017 	ldw	r2,0(r2)
   3d458:	108000b0 	cmpltui	r2,r2,2
   3d45c:	1000041e 	bne	r2,zero,3d470 <segwit_addr_decode+0x100>
   3d460:	e0bffe17 	ldw	r2,-8(fp)
   3d464:	10800017 	ldw	r2,0(r2)
   3d468:	10800a70 	cmpltui	r2,r2,41
   3d46c:	1000021e 	bne	r2,zero,3d478 <segwit_addr_decode+0x108>
   3d470:	0005883a 	mov	r2,zero
   3d474:	00001206 	br	3d4c0 <segwit_addr_decode+0x150>
    if (data[0] == 0 && *witdata_len != 20 && *witdata_len != 32) return 0;
   3d478:	e0bfd103 	ldbu	r2,-188(fp)
   3d47c:	10803fcc 	andi	r2,r2,255
   3d480:	10000a1e 	bne	r2,zero,3d4ac <segwit_addr_decode+0x13c>
   3d484:	e0bffe17 	ldw	r2,-8(fp)
   3d488:	10800017 	ldw	r2,0(r2)
   3d48c:	10800520 	cmpeqi	r2,r2,20
   3d490:	1000061e 	bne	r2,zero,3d4ac <segwit_addr_decode+0x13c>
   3d494:	e0bffe17 	ldw	r2,-8(fp)
   3d498:	10800017 	ldw	r2,0(r2)
   3d49c:	10800820 	cmpeqi	r2,r2,32
   3d4a0:	1000021e 	bne	r2,zero,3d4ac <segwit_addr_decode+0x13c>
   3d4a4:	0005883a 	mov	r2,zero
   3d4a8:	00000506 	br	3d4c0 <segwit_addr_decode+0x150>
    *witver = data[0];
   3d4ac:	e0bfd103 	ldbu	r2,-188(fp)
   3d4b0:	10c03fcc 	andi	r3,r2,255
   3d4b4:	e0bffc17 	ldw	r2,-16(fp)
   3d4b8:	10c00015 	stw	r3,0(r2)
    return 1;
   3d4bc:	00800044 	movi	r2,1
}
   3d4c0:	e037883a 	mov	sp,fp
   3d4c4:	dfc00117 	ldw	ra,4(sp)
   3d4c8:	df000017 	ldw	fp,0(sp)
   3d4cc:	dec00204 	addi	sp,sp,8
   3d4d0:	f800283a 	ret

0003d4d4 <ser_bytes>:
#include "..\include\btc\serialize.h"

#include <string.h>

void ser_bytes(cstring* s, const void* p, size_t len)
{
   3d4d4:	defffb04 	addi	sp,sp,-20
   3d4d8:	dfc00415 	stw	ra,16(sp)
   3d4dc:	df000315 	stw	fp,12(sp)
   3d4e0:	df000304 	addi	fp,sp,12
   3d4e4:	e13ffd15 	stw	r4,-12(fp)
   3d4e8:	e17ffe15 	stw	r5,-8(fp)
   3d4ec:	e1bfff15 	stw	r6,-4(fp)
    cstr_append_buf(s, p, len);
   3d4f0:	e1bfff17 	ldw	r6,-4(fp)
   3d4f4:	e17ffe17 	ldw	r5,-8(fp)
   3d4f8:	e13ffd17 	ldw	r4,-12(fp)
   3d4fc:	00425700 	call	42570 <cstr_append_buf>
}
   3d500:	0001883a 	nop
   3d504:	e037883a 	mov	sp,fp
   3d508:	dfc00117 	ldw	ra,4(sp)
   3d50c:	df000017 	ldw	fp,0(sp)
   3d510:	dec00204 	addi	sp,sp,8
   3d514:	f800283a 	ret

0003d518 <ser_u16>:

void ser_u16(cstring* s, uint16_t v_)
{
   3d518:	defffb04 	addi	sp,sp,-20
   3d51c:	dfc00415 	stw	ra,16(sp)
   3d520:	df000315 	stw	fp,12(sp)
   3d524:	df000304 	addi	fp,sp,12
   3d528:	e13ffe15 	stw	r4,-8(fp)
   3d52c:	2805883a 	mov	r2,r5
   3d530:	e0bfff0d 	sth	r2,-4(fp)
    uint16_t v = htole16(v_);
   3d534:	e0bfff0b 	ldhu	r2,-4(fp)
   3d538:	e0bffd0d 	sth	r2,-12(fp)
    cstr_append_buf(s, &v, sizeof(v));
   3d53c:	01800084 	movi	r6,2
   3d540:	e17ffd04 	addi	r5,fp,-12
   3d544:	e13ffe17 	ldw	r4,-8(fp)
   3d548:	00425700 	call	42570 <cstr_append_buf>
}
   3d54c:	0001883a 	nop
   3d550:	e037883a 	mov	sp,fp
   3d554:	dfc00117 	ldw	ra,4(sp)
   3d558:	df000017 	ldw	fp,0(sp)
   3d55c:	dec00204 	addi	sp,sp,8
   3d560:	f800283a 	ret

0003d564 <ser_u32>:

void ser_u32(cstring* s, uint32_t v_)
{
   3d564:	defffb04 	addi	sp,sp,-20
   3d568:	dfc00415 	stw	ra,16(sp)
   3d56c:	df000315 	stw	fp,12(sp)
   3d570:	df000304 	addi	fp,sp,12
   3d574:	e13ffe15 	stw	r4,-8(fp)
   3d578:	e17fff15 	stw	r5,-4(fp)
    uint32_t v = htole32(v_);
   3d57c:	e0bfff17 	ldw	r2,-4(fp)
   3d580:	e0bffd15 	stw	r2,-12(fp)
    cstr_append_buf(s, &v, sizeof(v));
   3d584:	01800104 	movi	r6,4
   3d588:	e17ffd04 	addi	r5,fp,-12
   3d58c:	e13ffe17 	ldw	r4,-8(fp)
   3d590:	00425700 	call	42570 <cstr_append_buf>
}
   3d594:	0001883a 	nop
   3d598:	e037883a 	mov	sp,fp
   3d59c:	dfc00117 	ldw	ra,4(sp)
   3d5a0:	df000017 	ldw	fp,0(sp)
   3d5a4:	dec00204 	addi	sp,sp,8
   3d5a8:	f800283a 	ret

0003d5ac <ser_s32>:

void ser_s32(cstring* s, int32_t v_)
{
   3d5ac:	defffc04 	addi	sp,sp,-16
   3d5b0:	dfc00315 	stw	ra,12(sp)
   3d5b4:	df000215 	stw	fp,8(sp)
   3d5b8:	df000204 	addi	fp,sp,8
   3d5bc:	e13ffe15 	stw	r4,-8(fp)
   3d5c0:	e17fff15 	stw	r5,-4(fp)
    ser_u32(s, (uint32_t)v_);
   3d5c4:	e0bfff17 	ldw	r2,-4(fp)
   3d5c8:	100b883a 	mov	r5,r2
   3d5cc:	e13ffe17 	ldw	r4,-8(fp)
   3d5d0:	003d5640 	call	3d564 <ser_u32>
}
   3d5d4:	0001883a 	nop
   3d5d8:	e037883a 	mov	sp,fp
   3d5dc:	dfc00117 	ldw	ra,4(sp)
   3d5e0:	df000017 	ldw	fp,0(sp)
   3d5e4:	dec00204 	addi	sp,sp,8
   3d5e8:	f800283a 	ret

0003d5ec <ser_u64>:

void ser_u64(cstring* s, uint64_t v_)
{
   3d5ec:	defff904 	addi	sp,sp,-28
   3d5f0:	dfc00615 	stw	ra,24(sp)
   3d5f4:	df000515 	stw	fp,20(sp)
   3d5f8:	df000504 	addi	fp,sp,20
   3d5fc:	e13ffd15 	stw	r4,-12(fp)
   3d600:	e17ffe15 	stw	r5,-8(fp)
   3d604:	e1bfff15 	stw	r6,-4(fp)
    uint64_t v = htole64(v_);
   3d608:	e0bffe17 	ldw	r2,-8(fp)
   3d60c:	e0bffb15 	stw	r2,-20(fp)
   3d610:	e0bfff17 	ldw	r2,-4(fp)
   3d614:	e0bffc15 	stw	r2,-16(fp)
    cstr_append_buf(s, &v, sizeof(v));
   3d618:	01800204 	movi	r6,8
   3d61c:	e17ffb04 	addi	r5,fp,-20
   3d620:	e13ffd17 	ldw	r4,-12(fp)
   3d624:	00425700 	call	42570 <cstr_append_buf>
}
   3d628:	0001883a 	nop
   3d62c:	e037883a 	mov	sp,fp
   3d630:	dfc00117 	ldw	ra,4(sp)
   3d634:	df000017 	ldw	fp,0(sp)
   3d638:	dec00204 	addi	sp,sp,8
   3d63c:	f800283a 	ret

0003d640 <ser_s64>:

void ser_s64(cstring* s, int64_t v_)
{
   3d640:	defffb04 	addi	sp,sp,-20
   3d644:	dfc00415 	stw	ra,16(sp)
   3d648:	df000315 	stw	fp,12(sp)
   3d64c:	df000304 	addi	fp,sp,12
   3d650:	e13ffd15 	stw	r4,-12(fp)
   3d654:	e17ffe15 	stw	r5,-8(fp)
   3d658:	e1bfff15 	stw	r6,-4(fp)
    ser_u64(s, (uint64_t)v_);
   3d65c:	e0bffe17 	ldw	r2,-8(fp)
   3d660:	e0ffff17 	ldw	r3,-4(fp)
   3d664:	100b883a 	mov	r5,r2
   3d668:	180d883a 	mov	r6,r3
   3d66c:	e13ffd17 	ldw	r4,-12(fp)
   3d670:	003d5ec0 	call	3d5ec <ser_u64>
}
   3d674:	0001883a 	nop
   3d678:	e037883a 	mov	sp,fp
   3d67c:	dfc00117 	ldw	ra,4(sp)
   3d680:	df000017 	ldw	fp,0(sp)
   3d684:	dec00204 	addi	sp,sp,8
   3d688:	f800283a 	ret

0003d68c <ser_u256>:

void ser_u256(cstring* s, const unsigned char* v_)
{
   3d68c:	defffc04 	addi	sp,sp,-16
   3d690:	dfc00315 	stw	ra,12(sp)
   3d694:	df000215 	stw	fp,8(sp)
   3d698:	df000204 	addi	fp,sp,8
   3d69c:	e13ffe15 	stw	r4,-8(fp)
   3d6a0:	e17fff15 	stw	r5,-4(fp)
    ser_bytes(s, v_, 32);
   3d6a4:	01800804 	movi	r6,32
   3d6a8:	e17fff17 	ldw	r5,-4(fp)
   3d6ac:	e13ffe17 	ldw	r4,-8(fp)
   3d6b0:	003d4d40 	call	3d4d4 <ser_bytes>
}
   3d6b4:	0001883a 	nop
   3d6b8:	e037883a 	mov	sp,fp
   3d6bc:	dfc00117 	ldw	ra,4(sp)
   3d6c0:	df000017 	ldw	fp,0(sp)
   3d6c4:	dec00204 	addi	sp,sp,8
   3d6c8:	f800283a 	ret

0003d6cc <ser_varlen>:

void ser_varlen(cstring* s, uint32_t vlen)
{
   3d6cc:	defffb04 	addi	sp,sp,-20
   3d6d0:	dfc00415 	stw	ra,16(sp)
   3d6d4:	df000315 	stw	fp,12(sp)
   3d6d8:	df000304 	addi	fp,sp,12
   3d6dc:	e13ffe15 	stw	r4,-8(fp)
   3d6e0:	e17fff15 	stw	r5,-4(fp)
    unsigned char c;

    if (vlen < 253) {
   3d6e4:	e0bfff17 	ldw	r2,-4(fp)
   3d6e8:	10803f68 	cmpgeui	r2,r2,253
   3d6ec:	1000071e 	bne	r2,zero,3d70c <ser_varlen+0x40>
        c = vlen;
   3d6f0:	e0bfff17 	ldw	r2,-4(fp)
   3d6f4:	e0bffd05 	stb	r2,-12(fp)
        ser_bytes(s, &c, 1);
   3d6f8:	01800044 	movi	r6,1
   3d6fc:	e17ffd04 	addi	r5,fp,-12
   3d700:	e13ffe17 	ldw	r4,-8(fp)
   3d704:	003d4d40 	call	3d4d4 <ser_bytes>
        ser_bytes(s, &c, 1);
        ser_u32(s, vlen);
    }

    /* u64 case intentionally not implemented */
}
   3d708:	00001806 	br	3d76c <ser_varlen+0xa0>
    if (vlen < 253) {
        c = vlen;
        ser_bytes(s, &c, 1);
    }

    else if (vlen < 0x10000) {
   3d70c:	e0bfff17 	ldw	r2,-4(fp)
   3d710:	00ffffd4 	movui	r3,65535
   3d714:	18800c36 	bltu	r3,r2,3d748 <ser_varlen+0x7c>
        c = 253;
   3d718:	00bfff44 	movi	r2,-3
   3d71c:	e0bffd05 	stb	r2,-12(fp)
        ser_bytes(s, &c, 1);
   3d720:	01800044 	movi	r6,1
   3d724:	e17ffd04 	addi	r5,fp,-12
   3d728:	e13ffe17 	ldw	r4,-8(fp)
   3d72c:	003d4d40 	call	3d4d4 <ser_bytes>
        ser_u16(s, (uint16_t)vlen);
   3d730:	e0bfff17 	ldw	r2,-4(fp)
   3d734:	10bfffcc 	andi	r2,r2,65535
   3d738:	100b883a 	mov	r5,r2
   3d73c:	e13ffe17 	ldw	r4,-8(fp)
   3d740:	003d5180 	call	3d518 <ser_u16>
        ser_bytes(s, &c, 1);
        ser_u32(s, vlen);
    }

    /* u64 case intentionally not implemented */
}
   3d744:	00000906 	br	3d76c <ser_varlen+0xa0>
        ser_bytes(s, &c, 1);
        ser_u16(s, (uint16_t)vlen);
    }

    else {
        c = 254;
   3d748:	00bfff84 	movi	r2,-2
   3d74c:	e0bffd05 	stb	r2,-12(fp)
        ser_bytes(s, &c, 1);
   3d750:	01800044 	movi	r6,1
   3d754:	e17ffd04 	addi	r5,fp,-12
   3d758:	e13ffe17 	ldw	r4,-8(fp)
   3d75c:	003d4d40 	call	3d4d4 <ser_bytes>
        ser_u32(s, vlen);
   3d760:	e17fff17 	ldw	r5,-4(fp)
   3d764:	e13ffe17 	ldw	r4,-8(fp)
   3d768:	003d5640 	call	3d564 <ser_u32>
    }

    /* u64 case intentionally not implemented */
}
   3d76c:	0001883a 	nop
   3d770:	e037883a 	mov	sp,fp
   3d774:	dfc00117 	ldw	ra,4(sp)
   3d778:	df000017 	ldw	fp,0(sp)
   3d77c:	dec00204 	addi	sp,sp,8
   3d780:	f800283a 	ret

0003d784 <ser_str>:

void ser_str(cstring* s, const char* s_in, size_t maxlen)
{
   3d784:	defffa04 	addi	sp,sp,-24
   3d788:	dfc00515 	stw	ra,20(sp)
   3d78c:	df000415 	stw	fp,16(sp)
   3d790:	df000404 	addi	fp,sp,16
   3d794:	e13ffd15 	stw	r4,-12(fp)
   3d798:	e17ffe15 	stw	r5,-8(fp)
   3d79c:	e1bfff15 	stw	r6,-4(fp)
    size_t slen = strnlen(s_in, maxlen);
   3d7a0:	e17fff17 	ldw	r5,-4(fp)
   3d7a4:	e13ffe17 	ldw	r4,-8(fp)
   3d7a8:	00471480 	call	47148 <strnlen>
   3d7ac:	e0bffc15 	stw	r2,-16(fp)

    ser_varlen(s, slen);
   3d7b0:	e17ffc17 	ldw	r5,-16(fp)
   3d7b4:	e13ffd17 	ldw	r4,-12(fp)
   3d7b8:	003d6cc0 	call	3d6cc <ser_varlen>
    ser_bytes(s, s_in, slen);
   3d7bc:	e1bffc17 	ldw	r6,-16(fp)
   3d7c0:	e17ffe17 	ldw	r5,-8(fp)
   3d7c4:	e13ffd17 	ldw	r4,-12(fp)
   3d7c8:	003d4d40 	call	3d4d4 <ser_bytes>
}
   3d7cc:	0001883a 	nop
   3d7d0:	e037883a 	mov	sp,fp
   3d7d4:	dfc00117 	ldw	ra,4(sp)
   3d7d8:	df000017 	ldw	fp,0(sp)
   3d7dc:	dec00204 	addi	sp,sp,8
   3d7e0:	f800283a 	ret

0003d7e4 <ser_varstr>:

void ser_varstr(cstring* s, cstring* s_in)
{
   3d7e4:	defffc04 	addi	sp,sp,-16
   3d7e8:	dfc00315 	stw	ra,12(sp)
   3d7ec:	df000215 	stw	fp,8(sp)
   3d7f0:	df000204 	addi	fp,sp,8
   3d7f4:	e13ffe15 	stw	r4,-8(fp)
   3d7f8:	e17fff15 	stw	r5,-4(fp)
    if (!s_in || !s_in->len) {
   3d7fc:	e0bfff17 	ldw	r2,-4(fp)
   3d800:	10000326 	beq	r2,zero,3d810 <ser_varstr+0x2c>
   3d804:	e0bfff17 	ldw	r2,-4(fp)
   3d808:	10800117 	ldw	r2,4(r2)
   3d80c:	1000041e 	bne	r2,zero,3d820 <ser_varstr+0x3c>
        ser_varlen(s, 0);
   3d810:	000b883a 	mov	r5,zero
   3d814:	e13ffe17 	ldw	r4,-8(fp)
   3d818:	003d6cc0 	call	3d6cc <ser_varlen>
        return;
   3d81c:	00000d06 	br	3d854 <ser_varstr+0x70>
    }

    ser_varlen(s, s_in->len);
   3d820:	e0bfff17 	ldw	r2,-4(fp)
   3d824:	10800117 	ldw	r2,4(r2)
   3d828:	100b883a 	mov	r5,r2
   3d82c:	e13ffe17 	ldw	r4,-8(fp)
   3d830:	003d6cc0 	call	3d6cc <ser_varlen>
    ser_bytes(s, s_in->str, s_in->len);
   3d834:	e0bfff17 	ldw	r2,-4(fp)
   3d838:	10c00017 	ldw	r3,0(r2)
   3d83c:	e0bfff17 	ldw	r2,-4(fp)
   3d840:	10800117 	ldw	r2,4(r2)
   3d844:	100d883a 	mov	r6,r2
   3d848:	180b883a 	mov	r5,r3
   3d84c:	e13ffe17 	ldw	r4,-8(fp)
   3d850:	003d4d40 	call	3d4d4 <ser_bytes>
}
   3d854:	e037883a 	mov	sp,fp
   3d858:	dfc00117 	ldw	ra,4(sp)
   3d85c:	df000017 	ldw	fp,0(sp)
   3d860:	dec00204 	addi	sp,sp,8
   3d864:	f800283a 	ret

0003d868 <deser_skip>:

int deser_skip(struct const_buffer* buf, size_t len)
{
   3d868:	defffc04 	addi	sp,sp,-16
   3d86c:	df000315 	stw	fp,12(sp)
   3d870:	df000304 	addi	fp,sp,12
   3d874:	e13ffe15 	stw	r4,-8(fp)
   3d878:	e17fff15 	stw	r5,-4(fp)
    char* p;
    if (buf->len < len)
   3d87c:	e0bffe17 	ldw	r2,-8(fp)
   3d880:	10c00117 	ldw	r3,4(r2)
   3d884:	e0bfff17 	ldw	r2,-4(fp)
   3d888:	1880022e 	bgeu	r3,r2,3d894 <deser_skip+0x2c>
        return false;
   3d88c:	0005883a 	mov	r2,zero
   3d890:	00001106 	br	3d8d8 <deser_skip+0x70>

    p = (char*)buf->p;
   3d894:	e0bffe17 	ldw	r2,-8(fp)
   3d898:	10800017 	ldw	r2,0(r2)
   3d89c:	e0bffd15 	stw	r2,-12(fp)
    p += len;
   3d8a0:	e0fffd17 	ldw	r3,-12(fp)
   3d8a4:	e0bfff17 	ldw	r2,-4(fp)
   3d8a8:	1885883a 	add	r2,r3,r2
   3d8ac:	e0bffd15 	stw	r2,-12(fp)
    buf->p = p;
   3d8b0:	e0bffe17 	ldw	r2,-8(fp)
   3d8b4:	e0fffd17 	ldw	r3,-12(fp)
   3d8b8:	10c00015 	stw	r3,0(r2)
    buf->len -= len;
   3d8bc:	e0bffe17 	ldw	r2,-8(fp)
   3d8c0:	10c00117 	ldw	r3,4(r2)
   3d8c4:	e0bfff17 	ldw	r2,-4(fp)
   3d8c8:	1887c83a 	sub	r3,r3,r2
   3d8cc:	e0bffe17 	ldw	r2,-8(fp)
   3d8d0:	10c00115 	stw	r3,4(r2)

    return true;
   3d8d4:	00800044 	movi	r2,1
}
   3d8d8:	e037883a 	mov	sp,fp
   3d8dc:	df000017 	ldw	fp,0(sp)
   3d8e0:	dec00104 	addi	sp,sp,4
   3d8e4:	f800283a 	ret

0003d8e8 <deser_bytes>:

int deser_bytes(void* po, struct const_buffer* buf, size_t len)
{
   3d8e8:	defffa04 	addi	sp,sp,-24
   3d8ec:	dfc00515 	stw	ra,20(sp)
   3d8f0:	df000415 	stw	fp,16(sp)
   3d8f4:	df000404 	addi	fp,sp,16
   3d8f8:	e13ffd15 	stw	r4,-12(fp)
   3d8fc:	e17ffe15 	stw	r5,-8(fp)
   3d900:	e1bfff15 	stw	r6,-4(fp)
    char* p;
    if (buf->len < len)
   3d904:	e0bffe17 	ldw	r2,-8(fp)
   3d908:	10c00117 	ldw	r3,4(r2)
   3d90c:	e0bfff17 	ldw	r2,-4(fp)
   3d910:	1880022e 	bgeu	r3,r2,3d91c <deser_bytes+0x34>
        return false;
   3d914:	0005883a 	mov	r2,zero
   3d918:	00001706 	br	3d978 <deser_bytes+0x90>

    memcpy(po, buf->p, len);
   3d91c:	e0bffe17 	ldw	r2,-8(fp)
   3d920:	10800017 	ldw	r2,0(r2)
   3d924:	e1bfff17 	ldw	r6,-4(fp)
   3d928:	100b883a 	mov	r5,r2
   3d92c:	e13ffd17 	ldw	r4,-12(fp)
   3d930:	0045c980 	call	45c98 <memcpy>
    p = (char*)buf->p;
   3d934:	e0bffe17 	ldw	r2,-8(fp)
   3d938:	10800017 	ldw	r2,0(r2)
   3d93c:	e0bffc15 	stw	r2,-16(fp)
    p += len;
   3d940:	e0fffc17 	ldw	r3,-16(fp)
   3d944:	e0bfff17 	ldw	r2,-4(fp)
   3d948:	1885883a 	add	r2,r3,r2
   3d94c:	e0bffc15 	stw	r2,-16(fp)
    buf->p = p;
   3d950:	e0bffe17 	ldw	r2,-8(fp)
   3d954:	e0fffc17 	ldw	r3,-16(fp)
   3d958:	10c00015 	stw	r3,0(r2)
    buf->len -= len;
   3d95c:	e0bffe17 	ldw	r2,-8(fp)
   3d960:	10c00117 	ldw	r3,4(r2)
   3d964:	e0bfff17 	ldw	r2,-4(fp)
   3d968:	1887c83a 	sub	r3,r3,r2
   3d96c:	e0bffe17 	ldw	r2,-8(fp)
   3d970:	10c00115 	stw	r3,4(r2)

    return true;
   3d974:	00800044 	movi	r2,1
}
   3d978:	e037883a 	mov	sp,fp
   3d97c:	dfc00117 	ldw	ra,4(sp)
   3d980:	df000017 	ldw	fp,0(sp)
   3d984:	dec00204 	addi	sp,sp,8
   3d988:	f800283a 	ret

0003d98c <deser_u16>:

int deser_u16(uint16_t* vo, struct const_buffer* buf)
{
   3d98c:	defffb04 	addi	sp,sp,-20
   3d990:	dfc00415 	stw	ra,16(sp)
   3d994:	df000315 	stw	fp,12(sp)
   3d998:	df000304 	addi	fp,sp,12
   3d99c:	e13ffe15 	stw	r4,-8(fp)
   3d9a0:	e17fff15 	stw	r5,-4(fp)
    uint16_t v;

    if (!deser_bytes(&v, buf, sizeof(v)))
   3d9a4:	01800084 	movi	r6,2
   3d9a8:	e17fff17 	ldw	r5,-4(fp)
   3d9ac:	e13ffd04 	addi	r4,fp,-12
   3d9b0:	003d8e80 	call	3d8e8 <deser_bytes>
   3d9b4:	1000021e 	bne	r2,zero,3d9c0 <deser_u16+0x34>
        return false;
   3d9b8:	0005883a 	mov	r2,zero
   3d9bc:	00000406 	br	3d9d0 <deser_u16+0x44>

    *vo = le16toh(v);
   3d9c0:	e0fffd0b 	ldhu	r3,-12(fp)
   3d9c4:	e0bffe17 	ldw	r2,-8(fp)
   3d9c8:	10c0000d 	sth	r3,0(r2)
    return true;
   3d9cc:	00800044 	movi	r2,1
}
   3d9d0:	e037883a 	mov	sp,fp
   3d9d4:	dfc00117 	ldw	ra,4(sp)
   3d9d8:	df000017 	ldw	fp,0(sp)
   3d9dc:	dec00204 	addi	sp,sp,8
   3d9e0:	f800283a 	ret

0003d9e4 <deser_s32>:

int deser_s32(int32_t* vo, struct const_buffer* buf)
{
   3d9e4:	defffb04 	addi	sp,sp,-20
   3d9e8:	dfc00415 	stw	ra,16(sp)
   3d9ec:	df000315 	stw	fp,12(sp)
   3d9f0:	df000304 	addi	fp,sp,12
   3d9f4:	e13ffe15 	stw	r4,-8(fp)
   3d9f8:	e17fff15 	stw	r5,-4(fp)
    int32_t v;

    if (!deser_bytes(&v, buf, sizeof(v)))
   3d9fc:	01800104 	movi	r6,4
   3da00:	e17fff17 	ldw	r5,-4(fp)
   3da04:	e13ffd04 	addi	r4,fp,-12
   3da08:	003d8e80 	call	3d8e8 <deser_bytes>
   3da0c:	1000021e 	bne	r2,zero,3da18 <deser_s32+0x34>
        return false;
   3da10:	0005883a 	mov	r2,zero
   3da14:	00000406 	br	3da28 <deser_s32+0x44>

    *vo = le32toh(v);
   3da18:	e0fffd17 	ldw	r3,-12(fp)
   3da1c:	e0bffe17 	ldw	r2,-8(fp)
   3da20:	10c00015 	stw	r3,0(r2)
    return true;
   3da24:	00800044 	movi	r2,1
}
   3da28:	e037883a 	mov	sp,fp
   3da2c:	dfc00117 	ldw	ra,4(sp)
   3da30:	df000017 	ldw	fp,0(sp)
   3da34:	dec00204 	addi	sp,sp,8
   3da38:	f800283a 	ret

0003da3c <deser_u32>:

int deser_u32(uint32_t* vo, struct const_buffer* buf)
{
   3da3c:	defffb04 	addi	sp,sp,-20
   3da40:	dfc00415 	stw	ra,16(sp)
   3da44:	df000315 	stw	fp,12(sp)
   3da48:	df000304 	addi	fp,sp,12
   3da4c:	e13ffe15 	stw	r4,-8(fp)
   3da50:	e17fff15 	stw	r5,-4(fp)
    uint32_t v;

    if (!deser_bytes(&v, buf, sizeof(v)))
   3da54:	01800104 	movi	r6,4
   3da58:	e17fff17 	ldw	r5,-4(fp)
   3da5c:	e13ffd04 	addi	r4,fp,-12
   3da60:	003d8e80 	call	3d8e8 <deser_bytes>
   3da64:	1000021e 	bne	r2,zero,3da70 <deser_u32+0x34>
        return false;
   3da68:	0005883a 	mov	r2,zero
   3da6c:	00000406 	br	3da80 <deser_u32+0x44>

    *vo = le32toh(v);
   3da70:	e0fffd17 	ldw	r3,-12(fp)
   3da74:	e0bffe17 	ldw	r2,-8(fp)
   3da78:	10c00015 	stw	r3,0(r2)
    return true;
   3da7c:	00800044 	movi	r2,1
}
   3da80:	e037883a 	mov	sp,fp
   3da84:	dfc00117 	ldw	ra,4(sp)
   3da88:	df000017 	ldw	fp,0(sp)
   3da8c:	dec00204 	addi	sp,sp,8
   3da90:	f800283a 	ret

0003da94 <deser_u64>:

int deser_u64(uint64_t* vo, struct const_buffer* buf)
{
   3da94:	defffa04 	addi	sp,sp,-24
   3da98:	dfc00515 	stw	ra,20(sp)
   3da9c:	df000415 	stw	fp,16(sp)
   3daa0:	df000404 	addi	fp,sp,16
   3daa4:	e13ffe15 	stw	r4,-8(fp)
   3daa8:	e17fff15 	stw	r5,-4(fp)
    uint64_t v;

    if (!deser_bytes(&v, buf, sizeof(v)))
   3daac:	01800204 	movi	r6,8
   3dab0:	e17fff17 	ldw	r5,-4(fp)
   3dab4:	e13ffc04 	addi	r4,fp,-16
   3dab8:	003d8e80 	call	3d8e8 <deser_bytes>
   3dabc:	1000021e 	bne	r2,zero,3dac8 <deser_u64+0x34>
        return false;
   3dac0:	0005883a 	mov	r2,zero
   3dac4:	00000606 	br	3dae0 <deser_u64+0x4c>

    *vo = le64toh(v);
   3dac8:	e0bffc17 	ldw	r2,-16(fp)
   3dacc:	e0fffd17 	ldw	r3,-12(fp)
   3dad0:	e13ffe17 	ldw	r4,-8(fp)
   3dad4:	20800015 	stw	r2,0(r4)
   3dad8:	20c00115 	stw	r3,4(r4)
    return true;
   3dadc:	00800044 	movi	r2,1
}
   3dae0:	e037883a 	mov	sp,fp
   3dae4:	dfc00117 	ldw	ra,4(sp)
   3dae8:	df000017 	ldw	fp,0(sp)
   3daec:	dec00204 	addi	sp,sp,8
   3daf0:	f800283a 	ret

0003daf4 <deser_u256>:

int deser_u256(uint256 vo, struct const_buffer* buf)
{
   3daf4:	defffc04 	addi	sp,sp,-16
   3daf8:	dfc00315 	stw	ra,12(sp)
   3dafc:	df000215 	stw	fp,8(sp)
   3db00:	df000204 	addi	fp,sp,8
   3db04:	e13ffe15 	stw	r4,-8(fp)
   3db08:	e17fff15 	stw	r5,-4(fp)
    return deser_bytes(vo, buf, 32);
   3db0c:	01800804 	movi	r6,32
   3db10:	e17fff17 	ldw	r5,-4(fp)
   3db14:	e13ffe17 	ldw	r4,-8(fp)
   3db18:	003d8e80 	call	3d8e8 <deser_bytes>
}
   3db1c:	e037883a 	mov	sp,fp
   3db20:	dfc00117 	ldw	ra,4(sp)
   3db24:	df000017 	ldw	fp,0(sp)
   3db28:	dec00204 	addi	sp,sp,8
   3db2c:	f800283a 	ret

0003db30 <deser_varlen>:

int deser_varlen(uint32_t* lo, struct const_buffer* buf)
{
   3db30:	defff704 	addi	sp,sp,-36
   3db34:	dfc00815 	stw	ra,32(sp)
   3db38:	df000715 	stw	fp,28(sp)
   3db3c:	df000704 	addi	fp,sp,28
   3db40:	e13ffe15 	stw	r4,-8(fp)
   3db44:	e17fff15 	stw	r5,-4(fp)
    uint32_t len;

    unsigned char c;
    if (!deser_bytes(&c, buf, 1))
   3db48:	e0bffa04 	addi	r2,fp,-24
   3db4c:	01800044 	movi	r6,1
   3db50:	e17fff17 	ldw	r5,-4(fp)
   3db54:	1009883a 	mov	r4,r2
   3db58:	003d8e80 	call	3d8e8 <deser_bytes>
   3db5c:	1000021e 	bne	r2,zero,3db68 <deser_varlen+0x38>
        return false;
   3db60:	0005883a 	mov	r2,zero
   3db64:	00003306 	br	3dc34 <deser_varlen+0x104>

    if (c == 253) {
   3db68:	e0bffa03 	ldbu	r2,-24(fp)
   3db6c:	10803fcc 	andi	r2,r2,255
   3db70:	10803f58 	cmpnei	r2,r2,253
   3db74:	10000b1e 	bne	r2,zero,3dba4 <deser_varlen+0x74>
        uint16_t v16;
        if (!deser_u16(&v16, buf))
   3db78:	e0bffa84 	addi	r2,fp,-22
   3db7c:	e17fff17 	ldw	r5,-4(fp)
   3db80:	1009883a 	mov	r4,r2
   3db84:	003d98c0 	call	3d98c <deser_u16>
   3db88:	1000021e 	bne	r2,zero,3db94 <deser_varlen+0x64>
            return false;
   3db8c:	0005883a 	mov	r2,zero
   3db90:	00002806 	br	3dc34 <deser_varlen+0x104>
        len = v16;
   3db94:	e0bffa8b 	ldhu	r2,-22(fp)
   3db98:	10bfffcc 	andi	r2,r2,65535
   3db9c:	e0bff915 	stw	r2,-28(fp)
   3dba0:	00002006 	br	3dc24 <deser_varlen+0xf4>
    } else if (c == 254) {
   3dba4:	e0bffa03 	ldbu	r2,-24(fp)
   3dba8:	10803fcc 	andi	r2,r2,255
   3dbac:	10803f98 	cmpnei	r2,r2,254
   3dbb0:	10000a1e 	bne	r2,zero,3dbdc <deser_varlen+0xac>
        uint32_t v32;
        if (!deser_u32(&v32, buf))
   3dbb4:	e0bffb04 	addi	r2,fp,-20
   3dbb8:	e17fff17 	ldw	r5,-4(fp)
   3dbbc:	1009883a 	mov	r4,r2
   3dbc0:	003da3c0 	call	3da3c <deser_u32>
   3dbc4:	1000021e 	bne	r2,zero,3dbd0 <deser_varlen+0xa0>
            return false;
   3dbc8:	0005883a 	mov	r2,zero
   3dbcc:	00001906 	br	3dc34 <deser_varlen+0x104>
        len = v32;
   3dbd0:	e0bffb17 	ldw	r2,-20(fp)
   3dbd4:	e0bff915 	stw	r2,-28(fp)
   3dbd8:	00001206 	br	3dc24 <deser_varlen+0xf4>
    } else if (c == 255) {
   3dbdc:	e0bffa03 	ldbu	r2,-24(fp)
   3dbe0:	10803fcc 	andi	r2,r2,255
   3dbe4:	10803fd8 	cmpnei	r2,r2,255
   3dbe8:	10000b1e 	bne	r2,zero,3dc18 <deser_varlen+0xe8>
        uint64_t v64;
        if (!deser_u64(&v64, buf))
   3dbec:	e0bffc04 	addi	r2,fp,-16
   3dbf0:	e17fff17 	ldw	r5,-4(fp)
   3dbf4:	1009883a 	mov	r4,r2
   3dbf8:	003da940 	call	3da94 <deser_u64>
   3dbfc:	1000021e 	bne	r2,zero,3dc08 <deser_varlen+0xd8>
            return false;
   3dc00:	0005883a 	mov	r2,zero
   3dc04:	00000b06 	br	3dc34 <deser_varlen+0x104>
        len = (uint32_t)v64; /* WARNING: truncate */
   3dc08:	e0bffc17 	ldw	r2,-16(fp)
   3dc0c:	e0fffd17 	ldw	r3,-12(fp)
   3dc10:	e0bff915 	stw	r2,-28(fp)
   3dc14:	00000306 	br	3dc24 <deser_varlen+0xf4>
    } else
        len = c;
   3dc18:	e0bffa03 	ldbu	r2,-24(fp)
   3dc1c:	10803fcc 	andi	r2,r2,255
   3dc20:	e0bff915 	stw	r2,-28(fp)

    *lo = len;
   3dc24:	e0bffe17 	ldw	r2,-8(fp)
   3dc28:	e0fff917 	ldw	r3,-28(fp)
   3dc2c:	10c00015 	stw	r3,0(r2)
    return true;
   3dc30:	00800044 	movi	r2,1
}
   3dc34:	e037883a 	mov	sp,fp
   3dc38:	dfc00117 	ldw	ra,4(sp)
   3dc3c:	df000017 	ldw	fp,0(sp)
   3dc40:	dec00204 	addi	sp,sp,8
   3dc44:	f800283a 	ret

0003dc48 <deser_str>:
//    return true;
//}


int deser_str(char* so, struct const_buffer* buf, size_t maxlen)
{
   3dc48:	defff904 	addi	sp,sp,-28
   3dc4c:	dfc00615 	stw	ra,24(sp)
   3dc50:	df000515 	stw	fp,20(sp)
   3dc54:	df000504 	addi	fp,sp,20
   3dc58:	e13ffd15 	stw	r4,-12(fp)
   3dc5c:	e17ffe15 	stw	r5,-8(fp)
   3dc60:	e1bfff15 	stw	r6,-4(fp)
    uint32_t len;
    uint32_t skip_len = 0;
   3dc64:	e03ffb15 	stw	zero,-20(fp)
    if (!deser_varlen(&len, buf))
   3dc68:	e0bffc04 	addi	r2,fp,-16
   3dc6c:	e17ffe17 	ldw	r5,-8(fp)
   3dc70:	1009883a 	mov	r4,r2
   3dc74:	003db300 	call	3db30 <deser_varlen>
   3dc78:	1000021e 	bne	r2,zero,3dc84 <deser_str+0x3c>
        return false;
   3dc7c:	0005883a 	mov	r2,zero
   3dc80:	00002506 	br	3dd18 <deser_str+0xd0>

    /* if input larger than buffer, truncate copy, skip remainder */
    if (len > maxlen) {
   3dc84:	e0bffc17 	ldw	r2,-16(fp)
   3dc88:	e0ffff17 	ldw	r3,-4(fp)
   3dc8c:	1880062e 	bgeu	r3,r2,3dca8 <deser_str+0x60>
        skip_len = len - maxlen;
   3dc90:	e0fffc17 	ldw	r3,-16(fp)
   3dc94:	e0bfff17 	ldw	r2,-4(fp)
   3dc98:	1885c83a 	sub	r2,r3,r2
   3dc9c:	e0bffb15 	stw	r2,-20(fp)
        len = maxlen;
   3dca0:	e0bfff17 	ldw	r2,-4(fp)
   3dca4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (!deser_bytes(so, buf, len))
   3dca8:	e0bffc17 	ldw	r2,-16(fp)
   3dcac:	100d883a 	mov	r6,r2
   3dcb0:	e17ffe17 	ldw	r5,-8(fp)
   3dcb4:	e13ffd17 	ldw	r4,-12(fp)
   3dcb8:	003d8e80 	call	3d8e8 <deser_bytes>
   3dcbc:	1000021e 	bne	r2,zero,3dcc8 <deser_str+0x80>
        return false;
   3dcc0:	0005883a 	mov	r2,zero
   3dcc4:	00001406 	br	3dd18 <deser_str+0xd0>
    if (!deser_skip(buf, skip_len))
   3dcc8:	e17ffb17 	ldw	r5,-20(fp)
   3dccc:	e13ffe17 	ldw	r4,-8(fp)
   3dcd0:	003d8680 	call	3d868 <deser_skip>
   3dcd4:	1000021e 	bne	r2,zero,3dce0 <deser_str+0x98>
        return false;
   3dcd8:	0005883a 	mov	r2,zero
   3dcdc:	00000e06 	br	3dd18 <deser_str+0xd0>

    /* add C string null */
    if (len < maxlen)
   3dce0:	e0fffc17 	ldw	r3,-16(fp)
   3dce4:	e0bfff17 	ldw	r2,-4(fp)
   3dce8:	1880052e 	bgeu	r3,r2,3dd00 <deser_str+0xb8>
        so[len] = 0;
   3dcec:	e0bffc17 	ldw	r2,-16(fp)
   3dcf0:	e0fffd17 	ldw	r3,-12(fp)
   3dcf4:	1885883a 	add	r2,r3,r2
   3dcf8:	10000005 	stb	zero,0(r2)
   3dcfc:	00000506 	br	3dd14 <deser_str+0xcc>
    else
        so[maxlen - 1] = 0;
   3dd00:	e0bfff17 	ldw	r2,-4(fp)
   3dd04:	10bfffc4 	addi	r2,r2,-1
   3dd08:	e0fffd17 	ldw	r3,-12(fp)
   3dd0c:	1885883a 	add	r2,r3,r2
   3dd10:	10000005 	stb	zero,0(r2)

    return true;
   3dd14:	00800044 	movi	r2,1
}
   3dd18:	e037883a 	mov	sp,fp
   3dd1c:	dfc00117 	ldw	ra,4(sp)
   3dd20:	df000017 	ldw	fp,0(sp)
   3dd24:	dec00204 	addi	sp,sp,8
   3dd28:	f800283a 	ret

0003dd2c <deser_varstr>:

int deser_varstr(cstring** so, struct const_buffer* buf)
{
   3dd2c:	defff904 	addi	sp,sp,-28
   3dd30:	dfc00615 	stw	ra,24(sp)
   3dd34:	df000515 	stw	fp,20(sp)
   3dd38:	df000504 	addi	fp,sp,20
   3dd3c:	e13ffe15 	stw	r4,-8(fp)
   3dd40:	e17fff15 	stw	r5,-4(fp)
    uint32_t len;
    cstring* s;
    char* p;

    if (*so) {
   3dd44:	e0bffe17 	ldw	r2,-8(fp)
   3dd48:	10800017 	ldw	r2,0(r2)
   3dd4c:	10000726 	beq	r2,zero,3dd6c <deser_varstr+0x40>
        cstr_free(*so, 1);
   3dd50:	e0bffe17 	ldw	r2,-8(fp)
   3dd54:	10800017 	ldw	r2,0(r2)
   3dd58:	01400044 	movi	r5,1
   3dd5c:	1009883a 	mov	r4,r2
   3dd60:	00424440 	call	42444 <cstr_free>
        *so = NULL;
   3dd64:	e0bffe17 	ldw	r2,-8(fp)
   3dd68:	10000015 	stw	zero,0(r2)
    }

    if (!deser_varlen(&len, buf))
   3dd6c:	e0bffd04 	addi	r2,fp,-12
   3dd70:	e17fff17 	ldw	r5,-4(fp)
   3dd74:	1009883a 	mov	r4,r2
   3dd78:	003db300 	call	3db30 <deser_varlen>
   3dd7c:	1000021e 	bne	r2,zero,3dd88 <deser_varstr+0x5c>
        return false;
   3dd80:	0005883a 	mov	r2,zero
   3dd84:	00002506 	br	3de1c <deser_varstr+0xf0>

    if (buf->len < len)
   3dd88:	e0bfff17 	ldw	r2,-4(fp)
   3dd8c:	10c00117 	ldw	r3,4(r2)
   3dd90:	e0bffd17 	ldw	r2,-12(fp)
   3dd94:	1880022e 	bgeu	r3,r2,3dda0 <deser_varstr+0x74>
        return false;
   3dd98:	0005883a 	mov	r2,zero
   3dd9c:	00001f06 	br	3de1c <deser_varstr+0xf0>

    s = cstr_new_sz(len);
   3dda0:	e0bffd17 	ldw	r2,-12(fp)
   3dda4:	1009883a 	mov	r4,r2
   3dda8:	00422a00 	call	422a0 <cstr_new_sz>
   3ddac:	e0bffb15 	stw	r2,-20(fp)
    cstr_append_buf(s, buf->p, len);
   3ddb0:	e0bfff17 	ldw	r2,-4(fp)
   3ddb4:	10800017 	ldw	r2,0(r2)
   3ddb8:	e0fffd17 	ldw	r3,-12(fp)
   3ddbc:	180d883a 	mov	r6,r3
   3ddc0:	100b883a 	mov	r5,r2
   3ddc4:	e13ffb17 	ldw	r4,-20(fp)
   3ddc8:	00425700 	call	42570 <cstr_append_buf>

    p = (char*)buf->p;
   3ddcc:	e0bfff17 	ldw	r2,-4(fp)
   3ddd0:	10800017 	ldw	r2,0(r2)
   3ddd4:	e0bffc15 	stw	r2,-16(fp)
    p += len;
   3ddd8:	e0bffd17 	ldw	r2,-12(fp)
   3dddc:	e0fffc17 	ldw	r3,-16(fp)
   3dde0:	1885883a 	add	r2,r3,r2
   3dde4:	e0bffc15 	stw	r2,-16(fp)
    buf->p = p;
   3dde8:	e0bfff17 	ldw	r2,-4(fp)
   3ddec:	e0fffc17 	ldw	r3,-16(fp)
   3ddf0:	10c00015 	stw	r3,0(r2)
    buf->len -= len;
   3ddf4:	e0bfff17 	ldw	r2,-4(fp)
   3ddf8:	10c00117 	ldw	r3,4(r2)
   3ddfc:	e0bffd17 	ldw	r2,-12(fp)
   3de00:	1887c83a 	sub	r3,r3,r2
   3de04:	e0bfff17 	ldw	r2,-4(fp)
   3de08:	10c00115 	stw	r3,4(r2)

    *so = s;
   3de0c:	e0bffe17 	ldw	r2,-8(fp)
   3de10:	e0fffb17 	ldw	r3,-20(fp)
   3de14:	10c00015 	stw	r3,0(r2)

    return true;
   3de18:	00800044 	movi	r2,1
}
   3de1c:	e037883a 	mov	sp,fp
   3de20:	dfc00117 	ldw	ra,4(sp)
   3de24:	df000017 	ldw	fp,0(sp)
   3de28:	dec00204 	addi	sp,sp,8
   3de2c:	f800283a 	ret

0003de30 <deser_s64>:

int deser_s64(int64_t* vo, struct const_buffer* buf)
{
   3de30:	defffc04 	addi	sp,sp,-16
   3de34:	dfc00315 	stw	ra,12(sp)
   3de38:	df000215 	stw	fp,8(sp)
   3de3c:	df000204 	addi	fp,sp,8
   3de40:	e13ffe15 	stw	r4,-8(fp)
   3de44:	e17fff15 	stw	r5,-4(fp)
    return deser_u64((uint64_t*)vo, buf);
   3de48:	e17fff17 	ldw	r5,-4(fp)
   3de4c:	e13ffe17 	ldw	r4,-8(fp)
   3de50:	003da940 	call	3da94 <deser_u64>
}
   3de54:	e037883a 	mov	sp,fp
   3de58:	dfc00117 	ldw	ra,4(sp)
   3de5c:	df000017 	ldw	fp,0(sp)
   3de60:	dec00204 	addi	sp,sp,8
   3de64:	f800283a 	ret

0003de68 <sha256_Init>:
    0x5be0cd19137e2179ULL};


/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context)
{
   3de68:	defffd04 	addi	sp,sp,-12
   3de6c:	dfc00215 	stw	ra,8(sp)
   3de70:	df000115 	stw	fp,4(sp)
   3de74:	df000104 	addi	fp,sp,4
   3de78:	e13fff15 	stw	r4,-4(fp)
    if (context == (SHA256_CTX*)0) {
   3de7c:	e0bfff17 	ldw	r2,-4(fp)
   3de80:	10001026 	beq	r2,zero,3dec4 <sha256_Init+0x5c>
        return;
    }
    MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
   3de84:	e0bfff17 	ldw	r2,-4(fp)
   3de88:	01800804 	movi	r6,32
   3de8c:	014001b4 	movhi	r5,6
   3de90:	29736904 	addi	r5,r5,-12892
   3de94:	1009883a 	mov	r4,r2
   3de98:	0045c980 	call	45c98 <memcpy>
    MEMSET_BZERO(context->buffer, SHA256_BLOCK_LENGTH);
   3de9c:	e0bfff17 	ldw	r2,-4(fp)
   3dea0:	10800a04 	addi	r2,r2,40
   3dea4:	01801004 	movi	r6,64
   3dea8:	000b883a 	mov	r5,zero
   3deac:	1009883a 	mov	r4,r2
   3deb0:	0045f3c0 	call	45f3c <memset>
    context->bitcount = 0;
   3deb4:	e0bfff17 	ldw	r2,-4(fp)
   3deb8:	10000815 	stw	zero,32(r2)
   3debc:	10000915 	stw	zero,36(r2)
   3dec0:	00000106 	br	3dec8 <sha256_Init+0x60>

/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context)
{
    if (context == (SHA256_CTX*)0) {
        return;
   3dec4:	0001883a 	nop
    }
    MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
    MEMSET_BZERO(context->buffer, SHA256_BLOCK_LENGTH);
    context->bitcount = 0;
}
   3dec8:	e037883a 	mov	sp,fp
   3decc:	dfc00117 	ldw	ra,4(sp)
   3ded0:	df000017 	ldw	fp,0(sp)
   3ded4:	dec00204 	addi	sp,sp,8
   3ded8:	f800283a 	ret

0003dedc <sha256_Transform>:
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha256_Transform(SHA256_CTX* context, const sha2_word32* data)
{
   3dedc:	deffee04 	addi	sp,sp,-72
   3dee0:	df001115 	stw	fp,68(sp)
   3dee4:	df001104 	addi	fp,sp,68
   3dee8:	e13ffe15 	stw	r4,-8(fp)
   3deec:	e17fff15 	stw	r5,-4(fp)
    sha2_word32 a, b, c, d, e, f, g, h, s0, s1;
    sha2_word32 T1, T2, *W256;
    int j;

    W256 = (sha2_word32*)context->buffer;
   3def0:	e0bffe17 	ldw	r2,-8(fp)
   3def4:	10800a04 	addi	r2,r2,40
   3def8:	e0bff815 	stw	r2,-32(fp)

    /* Initialize registers with the prev. intermediate value */
    a = context->state[0];
   3defc:	e0bffe17 	ldw	r2,-8(fp)
   3df00:	10800017 	ldw	r2,0(r2)
   3df04:	e0bfef15 	stw	r2,-68(fp)
    b = context->state[1];
   3df08:	e0bffe17 	ldw	r2,-8(fp)
   3df0c:	10800117 	ldw	r2,4(r2)
   3df10:	e0bff015 	stw	r2,-64(fp)
    c = context->state[2];
   3df14:	e0bffe17 	ldw	r2,-8(fp)
   3df18:	10800217 	ldw	r2,8(r2)
   3df1c:	e0bff115 	stw	r2,-60(fp)
    d = context->state[3];
   3df20:	e0bffe17 	ldw	r2,-8(fp)
   3df24:	10800317 	ldw	r2,12(r2)
   3df28:	e0bff215 	stw	r2,-56(fp)
    e = context->state[4];
   3df2c:	e0bffe17 	ldw	r2,-8(fp)
   3df30:	10800417 	ldw	r2,16(r2)
   3df34:	e0bff315 	stw	r2,-52(fp)
    f = context->state[5];
   3df38:	e0bffe17 	ldw	r2,-8(fp)
   3df3c:	10800517 	ldw	r2,20(r2)
   3df40:	e0bff415 	stw	r2,-48(fp)
    g = context->state[6];
   3df44:	e0bffe17 	ldw	r2,-8(fp)
   3df48:	10800617 	ldw	r2,24(r2)
   3df4c:	e0bff515 	stw	r2,-44(fp)
    h = context->state[7];
   3df50:	e0bffe17 	ldw	r2,-8(fp)
   3df54:	10800717 	ldw	r2,28(r2)
   3df58:	e0bff615 	stw	r2,-40(fp)

    j = 0;
   3df5c:	e03ff715 	stw	zero,-36(fp)
    do {
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Copy data while converting to host byte order */
        REVERSE32(*data++, W256[j]);
   3df60:	e0bfff17 	ldw	r2,-4(fp)
   3df64:	10c00104 	addi	r3,r2,4
   3df68:	e0ffff15 	stw	r3,-4(fp)
   3df6c:	10800017 	ldw	r2,0(r2)
   3df70:	e0bff915 	stw	r2,-28(fp)
   3df74:	e0bff917 	ldw	r2,-28(fp)
   3df78:	1004143a 	roli	r2,r2,16
   3df7c:	e0bff915 	stw	r2,-28(fp)
   3df80:	e0bff717 	ldw	r2,-36(fp)
   3df84:	1085883a 	add	r2,r2,r2
   3df88:	1085883a 	add	r2,r2,r2
   3df8c:	1007883a 	mov	r3,r2
   3df90:	e0bff817 	ldw	r2,-32(fp)
   3df94:	10c7883a 	add	r3,r2,r3
   3df98:	e13ff917 	ldw	r4,-28(fp)
   3df9c:	00bfc074 	movhi	r2,65281
   3dfa0:	10bfc004 	addi	r2,r2,-256
   3dfa4:	2084703a 	and	r2,r4,r2
   3dfa8:	1008d23a 	srli	r4,r2,8
   3dfac:	e17ff917 	ldw	r5,-28(fp)
   3dfb0:	00803ff4 	movhi	r2,255
   3dfb4:	10803fc4 	addi	r2,r2,255
   3dfb8:	2884703a 	and	r2,r5,r2
   3dfbc:	1004923a 	slli	r2,r2,8
   3dfc0:	2084b03a 	or	r2,r4,r2
   3dfc4:	18800015 	stw	r2,0(r3)
        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + W256[j];
   3dfc8:	e0fff317 	ldw	r3,-52(fp)
   3dfcc:	00800184 	movi	r2,6
   3dfd0:	1886583a 	ror	r3,r3,r2
   3dfd4:	e13ff317 	ldw	r4,-52(fp)
   3dfd8:	008002c4 	movi	r2,11
   3dfdc:	2084583a 	ror	r2,r4,r2
   3dfe0:	1886f03a 	xor	r3,r3,r2
   3dfe4:	e0bff317 	ldw	r2,-52(fp)
   3dfe8:	100411fa 	roli	r2,r2,7
   3dfec:	1886f03a 	xor	r3,r3,r2
   3dff0:	e0bff617 	ldw	r2,-40(fp)
   3dff4:	1887883a 	add	r3,r3,r2
   3dff8:	e13ff317 	ldw	r4,-52(fp)
   3dffc:	e0bff417 	ldw	r2,-48(fp)
   3e000:	2088703a 	and	r4,r4,r2
   3e004:	e0bff317 	ldw	r2,-52(fp)
   3e008:	008a303a 	nor	r5,zero,r2
   3e00c:	e0bff517 	ldw	r2,-44(fp)
   3e010:	2884703a 	and	r2,r5,r2
   3e014:	2084f03a 	xor	r2,r4,r2
   3e018:	1889883a 	add	r4,r3,r2
   3e01c:	008001b4 	movhi	r2,6
   3e020:	10b32904 	addi	r2,r2,-13148
   3e024:	e0fff717 	ldw	r3,-36(fp)
   3e028:	18c7883a 	add	r3,r3,r3
   3e02c:	18c7883a 	add	r3,r3,r3
   3e030:	10c5883a 	add	r2,r2,r3
   3e034:	10800017 	ldw	r2,0(r2)
   3e038:	2087883a 	add	r3,r4,r2
   3e03c:	e0bff717 	ldw	r2,-36(fp)
   3e040:	1085883a 	add	r2,r2,r2
   3e044:	1085883a 	add	r2,r2,r2
   3e048:	1009883a 	mov	r4,r2
   3e04c:	e0bff817 	ldw	r2,-32(fp)
   3e050:	1105883a 	add	r2,r2,r4
   3e054:	10800017 	ldw	r2,0(r2)
   3e058:	1885883a 	add	r2,r3,r2
   3e05c:	e0bffa15 	stw	r2,-24(fp)
#else  /* BYTE_ORDER == LITTLE_ENDIAN */
        /* Apply the SHA-256 compression function to update a..h with copy */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
        T2 = Sigma0_256(a) + Maj(a, b, c);
   3e060:	e0ffef17 	ldw	r3,-68(fp)
   3e064:	00800084 	movi	r2,2
   3e068:	1886583a 	ror	r3,r3,r2
   3e06c:	e13fef17 	ldw	r4,-68(fp)
   3e070:	00800344 	movi	r2,13
   3e074:	2084583a 	ror	r2,r4,r2
   3e078:	1886f03a 	xor	r3,r3,r2
   3e07c:	e0bfef17 	ldw	r2,-68(fp)
   3e080:	100412ba 	roli	r2,r2,10
   3e084:	1886f03a 	xor	r3,r3,r2
   3e088:	e13fef17 	ldw	r4,-68(fp)
   3e08c:	e0bff017 	ldw	r2,-64(fp)
   3e090:	2088703a 	and	r4,r4,r2
   3e094:	e17fef17 	ldw	r5,-68(fp)
   3e098:	e0bff117 	ldw	r2,-60(fp)
   3e09c:	2884703a 	and	r2,r5,r2
   3e0a0:	2088f03a 	xor	r4,r4,r2
   3e0a4:	e17ff017 	ldw	r5,-64(fp)
   3e0a8:	e0bff117 	ldw	r2,-60(fp)
   3e0ac:	2884703a 	and	r2,r5,r2
   3e0b0:	2084f03a 	xor	r2,r4,r2
   3e0b4:	1885883a 	add	r2,r3,r2
   3e0b8:	e0bffb15 	stw	r2,-20(fp)
        h = g;
   3e0bc:	e0bff517 	ldw	r2,-44(fp)
   3e0c0:	e0bff615 	stw	r2,-40(fp)
        g = f;
   3e0c4:	e0bff417 	ldw	r2,-48(fp)
   3e0c8:	e0bff515 	stw	r2,-44(fp)
        f = e;
   3e0cc:	e0bff317 	ldw	r2,-52(fp)
   3e0d0:	e0bff415 	stw	r2,-48(fp)
        e = d + T1;
   3e0d4:	e0fff217 	ldw	r3,-56(fp)
   3e0d8:	e0bffa17 	ldw	r2,-24(fp)
   3e0dc:	1885883a 	add	r2,r3,r2
   3e0e0:	e0bff315 	stw	r2,-52(fp)
        d = c;
   3e0e4:	e0bff117 	ldw	r2,-60(fp)
   3e0e8:	e0bff215 	stw	r2,-56(fp)
        c = b;
   3e0ec:	e0bff017 	ldw	r2,-64(fp)
   3e0f0:	e0bff115 	stw	r2,-60(fp)
        b = a;
   3e0f4:	e0bfef17 	ldw	r2,-68(fp)
   3e0f8:	e0bff015 	stw	r2,-64(fp)
        a = T1 + T2;
   3e0fc:	e0fffa17 	ldw	r3,-24(fp)
   3e100:	e0bffb17 	ldw	r2,-20(fp)
   3e104:	1885883a 	add	r2,r3,r2
   3e108:	e0bfef15 	stw	r2,-68(fp)

        j++;
   3e10c:	e0bff717 	ldw	r2,-36(fp)
   3e110:	10800044 	addi	r2,r2,1
   3e114:	e0bff715 	stw	r2,-36(fp)
    } while (j < 16);
   3e118:	e0bff717 	ldw	r2,-36(fp)
   3e11c:	10800410 	cmplti	r2,r2,16
   3e120:	103f8f1e 	bne	r2,zero,3df60 <__alt_mem_epcs_flash_controller+0xfe02cf60>

    do {
        /* Part of the message block expansion: */
        s0 = W256[(j + 1) & 0x0f];
   3e124:	e0bff717 	ldw	r2,-36(fp)
   3e128:	10800044 	addi	r2,r2,1
   3e12c:	108003cc 	andi	r2,r2,15
   3e130:	1085883a 	add	r2,r2,r2
   3e134:	1085883a 	add	r2,r2,r2
   3e138:	1007883a 	mov	r3,r2
   3e13c:	e0bff817 	ldw	r2,-32(fp)
   3e140:	10c5883a 	add	r2,r2,r3
   3e144:	10800017 	ldw	r2,0(r2)
   3e148:	e0bffc15 	stw	r2,-16(fp)
        s0 = sigma0_256(s0);
   3e14c:	e0fffc17 	ldw	r3,-16(fp)
   3e150:	008001c4 	movi	r2,7
   3e154:	1886583a 	ror	r3,r3,r2
   3e158:	e0bffc17 	ldw	r2,-16(fp)
   3e15c:	100413ba 	roli	r2,r2,14
   3e160:	1886f03a 	xor	r3,r3,r2
   3e164:	e0bffc17 	ldw	r2,-16(fp)
   3e168:	1004d0fa 	srli	r2,r2,3
   3e16c:	1884f03a 	xor	r2,r3,r2
   3e170:	e0bffc15 	stw	r2,-16(fp)
        s1 = W256[(j + 14) & 0x0f];
   3e174:	e0bff717 	ldw	r2,-36(fp)
   3e178:	10800384 	addi	r2,r2,14
   3e17c:	108003cc 	andi	r2,r2,15
   3e180:	1085883a 	add	r2,r2,r2
   3e184:	1085883a 	add	r2,r2,r2
   3e188:	1007883a 	mov	r3,r2
   3e18c:	e0bff817 	ldw	r2,-32(fp)
   3e190:	10c5883a 	add	r2,r2,r3
   3e194:	10800017 	ldw	r2,0(r2)
   3e198:	e0bffd15 	stw	r2,-12(fp)
        s1 = sigma1_256(s1);
   3e19c:	e0bffd17 	ldw	r2,-12(fp)
   3e1a0:	100613fa 	roli	r3,r2,15
   3e1a4:	e0bffd17 	ldw	r2,-12(fp)
   3e1a8:	1004137a 	roli	r2,r2,13
   3e1ac:	1886f03a 	xor	r3,r3,r2
   3e1b0:	e0bffd17 	ldw	r2,-12(fp)
   3e1b4:	1004d2ba 	srli	r2,r2,10
   3e1b8:	1884f03a 	xor	r2,r3,r2
   3e1bc:	e0bffd15 	stw	r2,-12(fp)

        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
   3e1c0:	e0fff317 	ldw	r3,-52(fp)
   3e1c4:	00800184 	movi	r2,6
   3e1c8:	1886583a 	ror	r3,r3,r2
   3e1cc:	e13ff317 	ldw	r4,-52(fp)
   3e1d0:	008002c4 	movi	r2,11
   3e1d4:	2084583a 	ror	r2,r4,r2
   3e1d8:	1886f03a 	xor	r3,r3,r2
   3e1dc:	e0bff317 	ldw	r2,-52(fp)
   3e1e0:	100411fa 	roli	r2,r2,7
   3e1e4:	1886f03a 	xor	r3,r3,r2
   3e1e8:	e0bff617 	ldw	r2,-40(fp)
   3e1ec:	1887883a 	add	r3,r3,r2
   3e1f0:	e13ff317 	ldw	r4,-52(fp)
   3e1f4:	e0bff417 	ldw	r2,-48(fp)
   3e1f8:	2088703a 	and	r4,r4,r2
   3e1fc:	e0bff317 	ldw	r2,-52(fp)
   3e200:	008a303a 	nor	r5,zero,r2
   3e204:	e0bff517 	ldw	r2,-44(fp)
   3e208:	2884703a 	and	r2,r5,r2
   3e20c:	2084f03a 	xor	r2,r4,r2
   3e210:	1889883a 	add	r4,r3,r2
   3e214:	008001b4 	movhi	r2,6
   3e218:	10b32904 	addi	r2,r2,-13148
   3e21c:	e0fff717 	ldw	r3,-36(fp)
   3e220:	18c7883a 	add	r3,r3,r3
   3e224:	18c7883a 	add	r3,r3,r3
   3e228:	10c5883a 	add	r2,r2,r3
   3e22c:	10800017 	ldw	r2,0(r2)
   3e230:	2089883a 	add	r4,r4,r2
             (W256[j & 0x0f] += s1 + W256[(j + 9) & 0x0f] + s0);
   3e234:	e0bff717 	ldw	r2,-36(fp)
   3e238:	108003cc 	andi	r2,r2,15
   3e23c:	1085883a 	add	r2,r2,r2
   3e240:	1085883a 	add	r2,r2,r2
   3e244:	1007883a 	mov	r3,r2
   3e248:	e0bff817 	ldw	r2,-32(fp)
   3e24c:	10c5883a 	add	r2,r2,r3
   3e250:	e0fff717 	ldw	r3,-36(fp)
   3e254:	18c003cc 	andi	r3,r3,15
   3e258:	18c7883a 	add	r3,r3,r3
   3e25c:	18c7883a 	add	r3,r3,r3
   3e260:	180b883a 	mov	r5,r3
   3e264:	e0fff817 	ldw	r3,-32(fp)
   3e268:	1947883a 	add	r3,r3,r5
   3e26c:	19400017 	ldw	r5,0(r3)
   3e270:	e0fff717 	ldw	r3,-36(fp)
   3e274:	18c00244 	addi	r3,r3,9
   3e278:	18c003cc 	andi	r3,r3,15
   3e27c:	18c7883a 	add	r3,r3,r3
   3e280:	18c7883a 	add	r3,r3,r3
   3e284:	180d883a 	mov	r6,r3
   3e288:	e0fff817 	ldw	r3,-32(fp)
   3e28c:	1987883a 	add	r3,r3,r6
   3e290:	19800017 	ldw	r6,0(r3)
   3e294:	e0fffd17 	ldw	r3,-12(fp)
   3e298:	30cd883a 	add	r6,r6,r3
   3e29c:	e0fffc17 	ldw	r3,-16(fp)
   3e2a0:	30c7883a 	add	r3,r6,r3
   3e2a4:	28c7883a 	add	r3,r5,r3
   3e2a8:	10c00015 	stw	r3,0(r2)
   3e2ac:	10800017 	ldw	r2,0(r2)
        s0 = sigma0_256(s0);
        s1 = W256[(j + 14) & 0x0f];
        s1 = sigma1_256(s1);

        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
   3e2b0:	2085883a 	add	r2,r4,r2
   3e2b4:	e0bffa15 	stw	r2,-24(fp)
             (W256[j & 0x0f] += s1 + W256[(j + 9) & 0x0f] + s0);
        T2 = Sigma0_256(a) + Maj(a, b, c);
   3e2b8:	e0ffef17 	ldw	r3,-68(fp)
   3e2bc:	00800084 	movi	r2,2
   3e2c0:	1886583a 	ror	r3,r3,r2
   3e2c4:	e13fef17 	ldw	r4,-68(fp)
   3e2c8:	00800344 	movi	r2,13
   3e2cc:	2084583a 	ror	r2,r4,r2
   3e2d0:	1886f03a 	xor	r3,r3,r2
   3e2d4:	e0bfef17 	ldw	r2,-68(fp)
   3e2d8:	100412ba 	roli	r2,r2,10
   3e2dc:	1886f03a 	xor	r3,r3,r2
   3e2e0:	e13fef17 	ldw	r4,-68(fp)
   3e2e4:	e0bff017 	ldw	r2,-64(fp)
   3e2e8:	2088703a 	and	r4,r4,r2
   3e2ec:	e17fef17 	ldw	r5,-68(fp)
   3e2f0:	e0bff117 	ldw	r2,-60(fp)
   3e2f4:	2884703a 	and	r2,r5,r2
   3e2f8:	2088f03a 	xor	r4,r4,r2
   3e2fc:	e17ff017 	ldw	r5,-64(fp)
   3e300:	e0bff117 	ldw	r2,-60(fp)
   3e304:	2884703a 	and	r2,r5,r2
   3e308:	2084f03a 	xor	r2,r4,r2
   3e30c:	1885883a 	add	r2,r3,r2
   3e310:	e0bffb15 	stw	r2,-20(fp)
        h = g;
   3e314:	e0bff517 	ldw	r2,-44(fp)
   3e318:	e0bff615 	stw	r2,-40(fp)
        g = f;
   3e31c:	e0bff417 	ldw	r2,-48(fp)
   3e320:	e0bff515 	stw	r2,-44(fp)
        f = e;
   3e324:	e0bff317 	ldw	r2,-52(fp)
   3e328:	e0bff415 	stw	r2,-48(fp)
        e = d + T1;
   3e32c:	e0fff217 	ldw	r3,-56(fp)
   3e330:	e0bffa17 	ldw	r2,-24(fp)
   3e334:	1885883a 	add	r2,r3,r2
   3e338:	e0bff315 	stw	r2,-52(fp)
        d = c;
   3e33c:	e0bff117 	ldw	r2,-60(fp)
   3e340:	e0bff215 	stw	r2,-56(fp)
        c = b;
   3e344:	e0bff017 	ldw	r2,-64(fp)
   3e348:	e0bff115 	stw	r2,-60(fp)
        b = a;
   3e34c:	e0bfef17 	ldw	r2,-68(fp)
   3e350:	e0bff015 	stw	r2,-64(fp)
        a = T1 + T2;
   3e354:	e0fffa17 	ldw	r3,-24(fp)
   3e358:	e0bffb17 	ldw	r2,-20(fp)
   3e35c:	1885883a 	add	r2,r3,r2
   3e360:	e0bfef15 	stw	r2,-68(fp)

        j++;
   3e364:	e0bff717 	ldw	r2,-36(fp)
   3e368:	10800044 	addi	r2,r2,1
   3e36c:	e0bff715 	stw	r2,-36(fp)
    } while (j < 64);
   3e370:	e0bff717 	ldw	r2,-36(fp)
   3e374:	10801010 	cmplti	r2,r2,64
   3e378:	103f6a1e 	bne	r2,zero,3e124 <__alt_mem_epcs_flash_controller+0xfe02d124>

    /* Compute the current intermediate hash value */
    context->state[0] += a;
   3e37c:	e0bffe17 	ldw	r2,-8(fp)
   3e380:	10c00017 	ldw	r3,0(r2)
   3e384:	e0bfef17 	ldw	r2,-68(fp)
   3e388:	1887883a 	add	r3,r3,r2
   3e38c:	e0bffe17 	ldw	r2,-8(fp)
   3e390:	10c00015 	stw	r3,0(r2)
    context->state[1] += b;
   3e394:	e0bffe17 	ldw	r2,-8(fp)
   3e398:	10c00117 	ldw	r3,4(r2)
   3e39c:	e0bff017 	ldw	r2,-64(fp)
   3e3a0:	1887883a 	add	r3,r3,r2
   3e3a4:	e0bffe17 	ldw	r2,-8(fp)
   3e3a8:	10c00115 	stw	r3,4(r2)
    context->state[2] += c;
   3e3ac:	e0bffe17 	ldw	r2,-8(fp)
   3e3b0:	10c00217 	ldw	r3,8(r2)
   3e3b4:	e0bff117 	ldw	r2,-60(fp)
   3e3b8:	1887883a 	add	r3,r3,r2
   3e3bc:	e0bffe17 	ldw	r2,-8(fp)
   3e3c0:	10c00215 	stw	r3,8(r2)
    context->state[3] += d;
   3e3c4:	e0bffe17 	ldw	r2,-8(fp)
   3e3c8:	10c00317 	ldw	r3,12(r2)
   3e3cc:	e0bff217 	ldw	r2,-56(fp)
   3e3d0:	1887883a 	add	r3,r3,r2
   3e3d4:	e0bffe17 	ldw	r2,-8(fp)
   3e3d8:	10c00315 	stw	r3,12(r2)
    context->state[4] += e;
   3e3dc:	e0bffe17 	ldw	r2,-8(fp)
   3e3e0:	10c00417 	ldw	r3,16(r2)
   3e3e4:	e0bff317 	ldw	r2,-52(fp)
   3e3e8:	1887883a 	add	r3,r3,r2
   3e3ec:	e0bffe17 	ldw	r2,-8(fp)
   3e3f0:	10c00415 	stw	r3,16(r2)
    context->state[5] += f;
   3e3f4:	e0bffe17 	ldw	r2,-8(fp)
   3e3f8:	10c00517 	ldw	r3,20(r2)
   3e3fc:	e0bff417 	ldw	r2,-48(fp)
   3e400:	1887883a 	add	r3,r3,r2
   3e404:	e0bffe17 	ldw	r2,-8(fp)
   3e408:	10c00515 	stw	r3,20(r2)
    context->state[6] += g;
   3e40c:	e0bffe17 	ldw	r2,-8(fp)
   3e410:	10c00617 	ldw	r3,24(r2)
   3e414:	e0bff517 	ldw	r2,-44(fp)
   3e418:	1887883a 	add	r3,r3,r2
   3e41c:	e0bffe17 	ldw	r2,-8(fp)
   3e420:	10c00615 	stw	r3,24(r2)
    context->state[7] += h;
   3e424:	e0bffe17 	ldw	r2,-8(fp)
   3e428:	10c00717 	ldw	r3,28(r2)
   3e42c:	e0bff617 	ldw	r2,-40(fp)
   3e430:	1887883a 	add	r3,r3,r2
   3e434:	e0bffe17 	ldw	r2,-8(fp)
   3e438:	10c00715 	stw	r3,28(r2)

    /* Clean up */
    a = b = c = d = e = f = g = h = T1 = T2 = 0;
   3e43c:	e03ffb15 	stw	zero,-20(fp)
   3e440:	e0bffb17 	ldw	r2,-20(fp)
   3e444:	e0bffa15 	stw	r2,-24(fp)
   3e448:	e0bffa17 	ldw	r2,-24(fp)
   3e44c:	e0bff615 	stw	r2,-40(fp)
   3e450:	e0bff617 	ldw	r2,-40(fp)
   3e454:	e0bff515 	stw	r2,-44(fp)
   3e458:	e0bff517 	ldw	r2,-44(fp)
   3e45c:	e0bff415 	stw	r2,-48(fp)
   3e460:	e0bff417 	ldw	r2,-48(fp)
   3e464:	e0bff315 	stw	r2,-52(fp)
   3e468:	e0bff317 	ldw	r2,-52(fp)
   3e46c:	e0bff215 	stw	r2,-56(fp)
   3e470:	e0bff217 	ldw	r2,-56(fp)
   3e474:	e0bff115 	stw	r2,-60(fp)
   3e478:	e0bff117 	ldw	r2,-60(fp)
   3e47c:	e0bff015 	stw	r2,-64(fp)
   3e480:	e0bff017 	ldw	r2,-64(fp)
   3e484:	e0bfef15 	stw	r2,-68(fp)
}
   3e488:	0001883a 	nop
   3e48c:	e037883a 	mov	sp,fp
   3e490:	df000017 	ldw	fp,0(sp)
   3e494:	dec00104 	addi	sp,sp,4
   3e498:	f800283a 	ret

0003e49c <sha256_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha256_Update(SHA256_CTX* context, const sha2_byte* data, size_t len)
{
   3e49c:	defff304 	addi	sp,sp,-52
   3e4a0:	dfc00c15 	stw	ra,48(sp)
   3e4a4:	df000b15 	stw	fp,44(sp)
   3e4a8:	dd400a15 	stw	r21,40(sp)
   3e4ac:	dd000915 	stw	r20,36(sp)
   3e4b0:	dcc00815 	stw	r19,32(sp)
   3e4b4:	dc800715 	stw	r18,28(sp)
   3e4b8:	dc400615 	stw	r17,24(sp)
   3e4bc:	dc000515 	stw	r16,20(sp)
   3e4c0:	df000b04 	addi	fp,sp,44
   3e4c4:	e13ff715 	stw	r4,-36(fp)
   3e4c8:	e17ff815 	stw	r5,-32(fp)
   3e4cc:	e1bff915 	stw	r6,-28(fp)
    unsigned int freespace, usedspace;

    if (len == 0) {
   3e4d0:	e0bff917 	ldw	r2,-28(fp)
   3e4d4:	10008f26 	beq	r2,zero,3e714 <sha256_Update+0x278>
        /* Calling with no data is valid - we do nothing */
        return;
    }

    usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
   3e4d8:	e13ff717 	ldw	r4,-36(fp)
   3e4dc:	20800817 	ldw	r2,32(r4)
   3e4e0:	20c00917 	ldw	r3,36(r4)
   3e4e4:	1808977a 	slli	r4,r3,29
   3e4e8:	100ed0fa 	srli	r7,r2,3
   3e4ec:	21ceb03a 	or	r7,r4,r7
   3e4f0:	1810d0fa 	srli	r8,r3,3
   3e4f4:	3805883a 	mov	r2,r7
   3e4f8:	10800fcc 	andi	r2,r2,63
   3e4fc:	e0bff515 	stw	r2,-44(fp)
    if (usedspace > 0) {
   3e500:	e0bff517 	ldw	r2,-44(fp)
   3e504:	10006326 	beq	r2,zero,3e694 <sha256_Update+0x1f8>
        /* Calculate how much free space is available in the buffer */
        freespace = SHA256_BLOCK_LENGTH - usedspace;
   3e508:	00c01004 	movi	r3,64
   3e50c:	e0bff517 	ldw	r2,-44(fp)
   3e510:	1885c83a 	sub	r2,r3,r2
   3e514:	e0bff615 	stw	r2,-40(fp)

        if (len >= freespace) {
   3e518:	e0fff917 	ldw	r3,-28(fp)
   3e51c:	e0bff617 	ldw	r2,-40(fp)
   3e520:	18802736 	bltu	r3,r2,3e5c0 <sha256_Update+0x124>
            /* Fill the buffer completely and process it */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, freespace);
   3e524:	e0bff517 	ldw	r2,-44(fp)
   3e528:	10800a04 	addi	r2,r2,40
   3e52c:	e0fff717 	ldw	r3,-36(fp)
   3e530:	1885883a 	add	r2,r3,r2
   3e534:	e1bff617 	ldw	r6,-40(fp)
   3e538:	e17ff817 	ldw	r5,-32(fp)
   3e53c:	1009883a 	mov	r4,r2
   3e540:	0045c980 	call	45c98 <memcpy>
            context->bitcount += freespace << 3;
   3e544:	e0bff717 	ldw	r2,-36(fp)
   3e548:	11000817 	ldw	r4,32(r2)
   3e54c:	11400917 	ldw	r5,36(r2)
   3e550:	e0bff617 	ldw	r2,-40(fp)
   3e554:	100490fa 	slli	r2,r2,3
   3e558:	1029883a 	mov	r20,r2
   3e55c:	002b883a 	mov	r21,zero
   3e560:	2505883a 	add	r2,r4,r20
   3e564:	110d803a 	cmpltu	r6,r2,r4
   3e568:	2d47883a 	add	r3,r5,r21
   3e56c:	30c9883a 	add	r4,r6,r3
   3e570:	2007883a 	mov	r3,r4
   3e574:	1009883a 	mov	r4,r2
   3e578:	180b883a 	mov	r5,r3
   3e57c:	e0bff717 	ldw	r2,-36(fp)
   3e580:	11000815 	stw	r4,32(r2)
   3e584:	11400915 	stw	r5,36(r2)
            len -= freespace;
   3e588:	e0fff917 	ldw	r3,-28(fp)
   3e58c:	e0bff617 	ldw	r2,-40(fp)
   3e590:	1885c83a 	sub	r2,r3,r2
   3e594:	e0bff915 	stw	r2,-28(fp)
            data += freespace;
   3e598:	e0fff817 	ldw	r3,-32(fp)
   3e59c:	e0bff617 	ldw	r2,-40(fp)
   3e5a0:	1885883a 	add	r2,r3,r2
   3e5a4:	e0bff815 	stw	r2,-32(fp)
            sha256_Transform(context, (sha2_word32*)context->buffer);
   3e5a8:	e0bff717 	ldw	r2,-36(fp)
   3e5ac:	10800a04 	addi	r2,r2,40
   3e5b0:	100b883a 	mov	r5,r2
   3e5b4:	e13ff717 	ldw	r4,-36(fp)
   3e5b8:	003dedc0 	call	3dedc <sha256_Transform>
   3e5bc:	00003506 	br	3e694 <sha256_Update+0x1f8>
        } else {
            /* The buffer is not yet full */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, len);
   3e5c0:	e0bff517 	ldw	r2,-44(fp)
   3e5c4:	10800a04 	addi	r2,r2,40
   3e5c8:	e0fff717 	ldw	r3,-36(fp)
   3e5cc:	1885883a 	add	r2,r3,r2
   3e5d0:	e1bff917 	ldw	r6,-28(fp)
   3e5d4:	e17ff817 	ldw	r5,-32(fp)
   3e5d8:	1009883a 	mov	r4,r2
   3e5dc:	0045c980 	call	45c98 <memcpy>
            context->bitcount += len << 3;
   3e5e0:	e0bff717 	ldw	r2,-36(fp)
   3e5e4:	11000817 	ldw	r4,32(r2)
   3e5e8:	11400917 	ldw	r5,36(r2)
   3e5ec:	e0bff917 	ldw	r2,-28(fp)
   3e5f0:	100490fa 	slli	r2,r2,3
   3e5f4:	1025883a 	mov	r18,r2
   3e5f8:	0027883a 	mov	r19,zero
   3e5fc:	2485883a 	add	r2,r4,r18
   3e600:	110d803a 	cmpltu	r6,r2,r4
   3e604:	2cc7883a 	add	r3,r5,r19
   3e608:	30c9883a 	add	r4,r6,r3
   3e60c:	2007883a 	mov	r3,r4
   3e610:	1009883a 	mov	r4,r2
   3e614:	180b883a 	mov	r5,r3
   3e618:	e0bff717 	ldw	r2,-36(fp)
   3e61c:	11000815 	stw	r4,32(r2)
   3e620:	11400915 	stw	r5,36(r2)
            /* Clean up: */
            usedspace = freespace = 0;
   3e624:	e03ff615 	stw	zero,-40(fp)
   3e628:	e0bff617 	ldw	r2,-40(fp)
   3e62c:	e0bff515 	stw	r2,-44(fp)
            return;
   3e630:	00003906 	br	3e718 <sha256_Update+0x27c>
        }
    }
    while (len >= SHA256_BLOCK_LENGTH) {
        /* Process as many complete blocks as we can */
        sha256_Transform(context, (const sha2_word32*)data);
   3e634:	e17ff817 	ldw	r5,-32(fp)
   3e638:	e13ff717 	ldw	r4,-36(fp)
   3e63c:	003dedc0 	call	3dedc <sha256_Transform>
        context->bitcount += SHA256_BLOCK_LENGTH << 3;
   3e640:	e0bff717 	ldw	r2,-36(fp)
   3e644:	11000817 	ldw	r4,32(r2)
   3e648:	11400917 	ldw	r5,36(r2)
   3e64c:	01808004 	movi	r6,512
   3e650:	000f883a 	mov	r7,zero
   3e654:	2185883a 	add	r2,r4,r6
   3e658:	1111803a 	cmpltu	r8,r2,r4
   3e65c:	29c7883a 	add	r3,r5,r7
   3e660:	40c9883a 	add	r4,r8,r3
   3e664:	2007883a 	mov	r3,r4
   3e668:	1009883a 	mov	r4,r2
   3e66c:	180b883a 	mov	r5,r3
   3e670:	e0bff717 	ldw	r2,-36(fp)
   3e674:	11000815 	stw	r4,32(r2)
   3e678:	11400915 	stw	r5,36(r2)
        len -= SHA256_BLOCK_LENGTH;
   3e67c:	e0bff917 	ldw	r2,-28(fp)
   3e680:	10bff004 	addi	r2,r2,-64
   3e684:	e0bff915 	stw	r2,-28(fp)
        data += SHA256_BLOCK_LENGTH;
   3e688:	e0bff817 	ldw	r2,-32(fp)
   3e68c:	10801004 	addi	r2,r2,64
   3e690:	e0bff815 	stw	r2,-32(fp)
            /* Clean up: */
            usedspace = freespace = 0;
            return;
        }
    }
    while (len >= SHA256_BLOCK_LENGTH) {
   3e694:	e0bff917 	ldw	r2,-28(fp)
   3e698:	10801028 	cmpgeui	r2,r2,64
   3e69c:	103fe51e 	bne	r2,zero,3e634 <__alt_mem_epcs_flash_controller+0xfe02d634>
        sha256_Transform(context, (const sha2_word32*)data);
        context->bitcount += SHA256_BLOCK_LENGTH << 3;
        len -= SHA256_BLOCK_LENGTH;
        data += SHA256_BLOCK_LENGTH;
    }
    if (len > 0) {
   3e6a0:	e0bff917 	ldw	r2,-28(fp)
   3e6a4:	10001726 	beq	r2,zero,3e704 <sha256_Update+0x268>
        /* There's left-overs, so save 'em */
        MEMCPY_BCOPY(context->buffer, data, len);
   3e6a8:	e0bff717 	ldw	r2,-36(fp)
   3e6ac:	10800a04 	addi	r2,r2,40
   3e6b0:	e1bff917 	ldw	r6,-28(fp)
   3e6b4:	e17ff817 	ldw	r5,-32(fp)
   3e6b8:	1009883a 	mov	r4,r2
   3e6bc:	0045c980 	call	45c98 <memcpy>
        context->bitcount += len << 3;
   3e6c0:	e0bff717 	ldw	r2,-36(fp)
   3e6c4:	11000817 	ldw	r4,32(r2)
   3e6c8:	11400917 	ldw	r5,36(r2)
   3e6cc:	e0bff917 	ldw	r2,-28(fp)
   3e6d0:	100490fa 	slli	r2,r2,3
   3e6d4:	1021883a 	mov	r16,r2
   3e6d8:	0023883a 	mov	r17,zero
   3e6dc:	2405883a 	add	r2,r4,r16
   3e6e0:	110d803a 	cmpltu	r6,r2,r4
   3e6e4:	2c47883a 	add	r3,r5,r17
   3e6e8:	30c9883a 	add	r4,r6,r3
   3e6ec:	2007883a 	mov	r3,r4
   3e6f0:	1009883a 	mov	r4,r2
   3e6f4:	180b883a 	mov	r5,r3
   3e6f8:	e0bff717 	ldw	r2,-36(fp)
   3e6fc:	11000815 	stw	r4,32(r2)
   3e700:	11400915 	stw	r5,36(r2)
    }
    /* Clean up: */
    usedspace = freespace = 0;
   3e704:	e03ff615 	stw	zero,-40(fp)
   3e708:	e0bff617 	ldw	r2,-40(fp)
   3e70c:	e0bff515 	stw	r2,-44(fp)
   3e710:	00000106 	br	3e718 <sha256_Update+0x27c>
{
    unsigned int freespace, usedspace;

    if (len == 0) {
        /* Calling with no data is valid - we do nothing */
        return;
   3e714:	0001883a 	nop
        MEMCPY_BCOPY(context->buffer, data, len);
        context->bitcount += len << 3;
    }
    /* Clean up: */
    usedspace = freespace = 0;
}
   3e718:	e6fffa04 	addi	sp,fp,-24
   3e71c:	dfc00717 	ldw	ra,28(sp)
   3e720:	df000617 	ldw	fp,24(sp)
   3e724:	dd400517 	ldw	r21,20(sp)
   3e728:	dd000417 	ldw	r20,16(sp)
   3e72c:	dcc00317 	ldw	r19,12(sp)
   3e730:	dc800217 	ldw	r18,8(sp)
   3e734:	dc400117 	ldw	r17,4(sp)
   3e738:	dc000017 	ldw	r16,0(sp)
   3e73c:	dec00804 	addi	sp,sp,32
   3e740:	f800283a 	ret

0003e744 <sha256_Final>:

void sha256_Final(sha2_byte digest[], SHA256_CTX* context)
{
   3e744:	deffe804 	addi	sp,sp,-96
   3e748:	dfc01715 	stw	ra,92(sp)
   3e74c:	df001615 	stw	fp,88(sp)
   3e750:	ddc01515 	stw	r23,84(sp)
   3e754:	dd801415 	stw	r22,80(sp)
   3e758:	dd401315 	stw	r21,76(sp)
   3e75c:	dd001215 	stw	r20,72(sp)
   3e760:	dcc01115 	stw	r19,68(sp)
   3e764:	dc801015 	stw	r18,64(sp)
   3e768:	dc400f15 	stw	r17,60(sp)
   3e76c:	dc000e15 	stw	r16,56(sp)
   3e770:	df001604 	addi	fp,sp,88
   3e774:	e13ff215 	stw	r4,-56(fp)
   3e778:	e17ff315 	stw	r5,-52(fp)
    sha2_word32* d = (sha2_word32*)digest;
   3e77c:	e0bff217 	ldw	r2,-56(fp)
   3e780:	e0bfea15 	stw	r2,-88(fp)
    unsigned int usedspace;
    sha2_word64* t;

    /* If no digest buffer is passed, we don't bother doing this: */
    if (digest != (sha2_byte*)0) {
   3e784:	e0bff217 	ldw	r2,-56(fp)
   3e788:	1000cf26 	beq	r2,zero,3eac8 <sha256_Final+0x384>
        usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
   3e78c:	e13ff317 	ldw	r4,-52(fp)
   3e790:	20800817 	ldw	r2,32(r4)
   3e794:	20c00917 	ldw	r3,36(r4)
   3e798:	1808977a 	slli	r4,r3,29
   3e79c:	102cd0fa 	srli	r22,r2,3
   3e7a0:	25acb03a 	or	r22,r4,r22
   3e7a4:	182ed0fa 	srli	r23,r3,3
   3e7a8:	b005883a 	mov	r2,r22
   3e7ac:	10800fcc 	andi	r2,r2,63
   3e7b0:	e0bfed15 	stw	r2,-76(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Convert FROM host byte order */
        REVERSE64(context->bitcount, context->bitcount);
   3e7b4:	e0bff317 	ldw	r2,-52(fp)
   3e7b8:	10c00817 	ldw	r3,32(r2)
   3e7bc:	e0ffee15 	stw	r3,-72(fp)
   3e7c0:	10800917 	ldw	r2,36(r2)
   3e7c4:	e0bfef15 	stw	r2,-68(fp)
   3e7c8:	e0bfef17 	ldw	r2,-68(fp)
   3e7cc:	e0bff615 	stw	r2,-40(fp)
   3e7d0:	e0ffee17 	ldw	r3,-72(fp)
   3e7d4:	e0fff715 	stw	r3,-36(fp)
   3e7d8:	e0bff617 	ldw	r2,-40(fp)
   3e7dc:	e0bfee15 	stw	r2,-72(fp)
   3e7e0:	e0fff717 	ldw	r3,-36(fp)
   3e7e4:	e0ffef15 	stw	r3,-68(fp)
   3e7e8:	e0ffee17 	ldw	r3,-72(fp)
   3e7ec:	00bfc074 	movhi	r2,65281
   3e7f0:	10bfc004 	addi	r2,r2,-256
   3e7f4:	18a8703a 	and	r20,r3,r2
   3e7f8:	e0ffef17 	ldw	r3,-68(fp)
   3e7fc:	00bfc074 	movhi	r2,65281
   3e800:	10bfc004 	addi	r2,r2,-256
   3e804:	18aa703a 	and	r21,r3,r2
   3e808:	a804963a 	slli	r2,r21,24
   3e80c:	a018d23a 	srli	r12,r20,8
   3e810:	1318b03a 	or	r12,r2,r12
   3e814:	a81ad23a 	srli	r13,r21,8
   3e818:	e0ffee17 	ldw	r3,-72(fp)
   3e81c:	00803ff4 	movhi	r2,255
   3e820:	10803fc4 	addi	r2,r2,255
   3e824:	18a4703a 	and	r18,r3,r2
   3e828:	e0ffef17 	ldw	r3,-68(fp)
   3e82c:	00803ff4 	movhi	r2,255
   3e830:	10803fc4 	addi	r2,r2,255
   3e834:	18a6703a 	and	r19,r3,r2
   3e838:	9004d63a 	srli	r2,r18,24
   3e83c:	9816923a 	slli	r11,r19,8
   3e840:	12d6b03a 	or	r11,r2,r11
   3e844:	9014923a 	slli	r10,r18,8
   3e848:	6284b03a 	or	r2,r12,r10
   3e84c:	e0bfee15 	stw	r2,-72(fp)
   3e850:	6ac4b03a 	or	r2,r13,r11
   3e854:	e0bfef15 	stw	r2,-68(fp)
   3e858:	e0bfee17 	ldw	r2,-72(fp)
   3e85c:	143fffec 	andhi	r16,r2,65535
   3e860:	e0bfef17 	ldw	r2,-68(fp)
   3e864:	147fffec 	andhi	r17,r2,65535
   3e868:	8804943a 	slli	r2,r17,16
   3e86c:	8010d43a 	srli	r8,r16,16
   3e870:	1210b03a 	or	r8,r2,r8
   3e874:	8812d43a 	srli	r9,r17,16
   3e878:	e0bfee17 	ldw	r2,-72(fp)
   3e87c:	13bfffcc 	andi	r14,r2,65535
   3e880:	e0bfef17 	ldw	r2,-68(fp)
   3e884:	13ffffcc 	andi	r15,r2,65535
   3e888:	7004d43a 	srli	r2,r14,16
   3e88c:	780e943a 	slli	r7,r15,16
   3e890:	11ceb03a 	or	r7,r2,r7
   3e894:	700c943a 	slli	r6,r14,16
   3e898:	4184b03a 	or	r2,r8,r6
   3e89c:	e0bff415 	stw	r2,-48(fp)
   3e8a0:	49c6b03a 	or	r3,r9,r7
   3e8a4:	e0fff515 	stw	r3,-44(fp)
   3e8a8:	e0bff317 	ldw	r2,-52(fp)
   3e8ac:	e0fff417 	ldw	r3,-48(fp)
   3e8b0:	10c00815 	stw	r3,32(r2)
   3e8b4:	e0fff517 	ldw	r3,-44(fp)
   3e8b8:	10c00915 	stw	r3,36(r2)
#endif
        if (usedspace > 0) {
   3e8bc:	e0bfed17 	ldw	r2,-76(fp)
   3e8c0:	10002f26 	beq	r2,zero,3e980 <sha256_Final+0x23c>
            /* Begin padding with a 1 bit: */
            context->buffer[usedspace++] = 0x80;
   3e8c4:	e0bfed17 	ldw	r2,-76(fp)
   3e8c8:	10c00044 	addi	r3,r2,1
   3e8cc:	e0ffed15 	stw	r3,-76(fp)
   3e8d0:	e0fff317 	ldw	r3,-52(fp)
   3e8d4:	1885883a 	add	r2,r3,r2
   3e8d8:	10800a04 	addi	r2,r2,40
   3e8dc:	00ffe004 	movi	r3,-128
   3e8e0:	10c00005 	stb	r3,0(r2)

            if (usedspace <= SHA256_SHORT_BLOCK_LENGTH) {
   3e8e4:	e0bfed17 	ldw	r2,-76(fp)
   3e8e8:	10800e68 	cmpgeui	r2,r2,57
   3e8ec:	10000b1e 	bne	r2,zero,3e91c <sha256_Final+0x1d8>
                /* Set-up for the last transform: */
                MEMSET_BZERO(&context->buffer[usedspace], SHA256_SHORT_BLOCK_LENGTH - usedspace);
   3e8f0:	e0bfed17 	ldw	r2,-76(fp)
   3e8f4:	10800a04 	addi	r2,r2,40
   3e8f8:	e0fff317 	ldw	r3,-52(fp)
   3e8fc:	1889883a 	add	r4,r3,r2
   3e900:	00c00e04 	movi	r3,56
   3e904:	e0bfed17 	ldw	r2,-76(fp)
   3e908:	1885c83a 	sub	r2,r3,r2
   3e90c:	100d883a 	mov	r6,r2
   3e910:	000b883a 	mov	r5,zero
   3e914:	0045f3c0 	call	45f3c <memset>
   3e918:	00002206 	br	3e9a4 <sha256_Final+0x260>
            } else {
                if (usedspace < SHA256_BLOCK_LENGTH) {
   3e91c:	e0bfed17 	ldw	r2,-76(fp)
   3e920:	10801028 	cmpgeui	r2,r2,64
   3e924:	10000a1e 	bne	r2,zero,3e950 <sha256_Final+0x20c>
                    MEMSET_BZERO(&context->buffer[usedspace], SHA256_BLOCK_LENGTH - usedspace);
   3e928:	e0bfed17 	ldw	r2,-76(fp)
   3e92c:	10800a04 	addi	r2,r2,40
   3e930:	e0fff317 	ldw	r3,-52(fp)
   3e934:	1889883a 	add	r4,r3,r2
   3e938:	00c01004 	movi	r3,64
   3e93c:	e0bfed17 	ldw	r2,-76(fp)
   3e940:	1885c83a 	sub	r2,r3,r2
   3e944:	100d883a 	mov	r6,r2
   3e948:	000b883a 	mov	r5,zero
   3e94c:	0045f3c0 	call	45f3c <memset>
                }
                /* Do second-to-last transform: */
                sha256_Transform(context, (sha2_word32*)context->buffer);
   3e950:	e0bff317 	ldw	r2,-52(fp)
   3e954:	10800a04 	addi	r2,r2,40
   3e958:	100b883a 	mov	r5,r2
   3e95c:	e13ff317 	ldw	r4,-52(fp)
   3e960:	003dedc0 	call	3dedc <sha256_Transform>

                /* And set-up for the last transform: */
                MEMSET_BZERO(context->buffer, SHA256_SHORT_BLOCK_LENGTH);
   3e964:	e0bff317 	ldw	r2,-52(fp)
   3e968:	10800a04 	addi	r2,r2,40
   3e96c:	01800e04 	movi	r6,56
   3e970:	000b883a 	mov	r5,zero
   3e974:	1009883a 	mov	r4,r2
   3e978:	0045f3c0 	call	45f3c <memset>
   3e97c:	00000906 	br	3e9a4 <sha256_Final+0x260>
            }
        } else {
            /* Set-up for the last transform: */
            MEMSET_BZERO(context->buffer, SHA256_SHORT_BLOCK_LENGTH);
   3e980:	e0bff317 	ldw	r2,-52(fp)
   3e984:	10800a04 	addi	r2,r2,40
   3e988:	01800e04 	movi	r6,56
   3e98c:	000b883a 	mov	r5,zero
   3e990:	1009883a 	mov	r4,r2
   3e994:	0045f3c0 	call	45f3c <memset>

            /* Begin padding with a 1 bit: */
            *context->buffer = 0x80;
   3e998:	e0bff317 	ldw	r2,-52(fp)
   3e99c:	00ffe004 	movi	r3,-128
   3e9a0:	10c00a05 	stb	r3,40(r2)
        }
        /* Set the bit count: */
        t = (sha2_word64*)&context->buffer[SHA256_SHORT_BLOCK_LENGTH];
   3e9a4:	e0bff317 	ldw	r2,-52(fp)
   3e9a8:	10801804 	addi	r2,r2,96
   3e9ac:	e0bff015 	stw	r2,-64(fp)
        *t = context->bitcount;
   3e9b0:	e13ff317 	ldw	r4,-52(fp)
   3e9b4:	20800817 	ldw	r2,32(r4)
   3e9b8:	20c00917 	ldw	r3,36(r4)
   3e9bc:	e13ff017 	ldw	r4,-64(fp)
   3e9c0:	20800015 	stw	r2,0(r4)
   3e9c4:	20c00115 	stw	r3,4(r4)

        /* Final transform: */
        sha256_Transform(context, (sha2_word32*)context->buffer);
   3e9c8:	e0bff317 	ldw	r2,-52(fp)
   3e9cc:	10800a04 	addi	r2,r2,40
   3e9d0:	100b883a 	mov	r5,r2
   3e9d4:	e13ff317 	ldw	r4,-52(fp)
   3e9d8:	003dedc0 	call	3dedc <sha256_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
        {
        	for(int i=0; i < 32; i++){
   3e9dc:	e03feb15 	stw	zero,-84(fp)
   3e9e0:	00000706 	br	3ea00 <sha256_Final+0x2bc>
				digest[i] = 0;
   3e9e4:	e0bfeb17 	ldw	r2,-84(fp)
   3e9e8:	e0fff217 	ldw	r3,-56(fp)
   3e9ec:	1885883a 	add	r2,r3,r2
   3e9f0:	10000005 	stb	zero,0(r2)
        /* Final transform: */
        sha256_Transform(context, (sha2_word32*)context->buffer);

#if BYTE_ORDER == LITTLE_ENDIAN
        {
        	for(int i=0; i < 32; i++){
   3e9f4:	e0bfeb17 	ldw	r2,-84(fp)
   3e9f8:	10800044 	addi	r2,r2,1
   3e9fc:	e0bfeb15 	stw	r2,-84(fp)
   3ea00:	e0bfeb17 	ldw	r2,-84(fp)
   3ea04:	10800810 	cmplti	r2,r2,32
   3ea08:	103ff61e 	bne	r2,zero,3e9e4 <__alt_mem_epcs_flash_controller+0xfe02d9e4>
				digest[i] = 0;
			}
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
   3ea0c:	e03fec15 	stw	zero,-80(fp)
   3ea10:	00002a06 	br	3eabc <sha256_Final+0x378>
                REVERSE32(context->state[j], context->state[j]);
   3ea14:	e0fff317 	ldw	r3,-52(fp)
   3ea18:	e0bfec17 	ldw	r2,-80(fp)
   3ea1c:	1085883a 	add	r2,r2,r2
   3ea20:	1085883a 	add	r2,r2,r2
   3ea24:	1885883a 	add	r2,r3,r2
   3ea28:	10800017 	ldw	r2,0(r2)
   3ea2c:	e0bff115 	stw	r2,-60(fp)
   3ea30:	e0bff117 	ldw	r2,-60(fp)
   3ea34:	1004143a 	roli	r2,r2,16
   3ea38:	e0bff115 	stw	r2,-60(fp)
   3ea3c:	e0fff117 	ldw	r3,-60(fp)
   3ea40:	00bfc074 	movhi	r2,65281
   3ea44:	10bfc004 	addi	r2,r2,-256
   3ea48:	1884703a 	and	r2,r3,r2
   3ea4c:	1006d23a 	srli	r3,r2,8
   3ea50:	e13ff117 	ldw	r4,-60(fp)
   3ea54:	00803ff4 	movhi	r2,255
   3ea58:	10803fc4 	addi	r2,r2,255
   3ea5c:	2084703a 	and	r2,r4,r2
   3ea60:	1004923a 	slli	r2,r2,8
   3ea64:	1886b03a 	or	r3,r3,r2
   3ea68:	e13ff317 	ldw	r4,-52(fp)
   3ea6c:	e0bfec17 	ldw	r2,-80(fp)
   3ea70:	1085883a 	add	r2,r2,r2
   3ea74:	1085883a 	add	r2,r2,r2
   3ea78:	2085883a 	add	r2,r4,r2
   3ea7c:	10c00015 	stw	r3,0(r2)
//                *d++ = context->state[j];
//                *(sha2_word32 *)d++ = context->state[j];

                //Above code does not correctly convert all 32bit integers into 8 bit integers
                memcpy(d++, &context->state[j], sizeof(context->state[j]));
   3ea80:	e0ffea17 	ldw	r3,-88(fp)
   3ea84:	18800104 	addi	r2,r3,4
   3ea88:	e0bfea15 	stw	r2,-88(fp)
   3ea8c:	e0bfec17 	ldw	r2,-80(fp)
   3ea90:	1085883a 	add	r2,r2,r2
   3ea94:	1085883a 	add	r2,r2,r2
   3ea98:	e13ff317 	ldw	r4,-52(fp)
   3ea9c:	2085883a 	add	r2,r4,r2
   3eaa0:	01800104 	movi	r6,4
   3eaa4:	100b883a 	mov	r5,r2
   3eaa8:	1809883a 	mov	r4,r3
   3eaac:	0045c980 	call	45c98 <memcpy>
        	for(int i=0; i < 32; i++){
				digest[i] = 0;
			}
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
   3eab0:	e0bfec17 	ldw	r2,-80(fp)
   3eab4:	10800044 	addi	r2,r2,1
   3eab8:	e0bfec15 	stw	r2,-80(fp)
   3eabc:	e0bfec17 	ldw	r2,-80(fp)
   3eac0:	10800210 	cmplti	r2,r2,8
   3eac4:	103fd31e 	bne	r2,zero,3ea14 <__alt_mem_epcs_flash_controller+0xfe02da14>
        MEMCPY_BCOPY(d, context->state, SHA256_DIGEST_LENGTH);
#endif
    }

    /* Clean up state data: */
    MEMSET_BZERO(context, sizeof(SHA256_CTX));
   3eac8:	01801a04 	movi	r6,104
   3eacc:	000b883a 	mov	r5,zero
   3ead0:	e13ff317 	ldw	r4,-52(fp)
   3ead4:	0045f3c0 	call	45f3c <memset>
    usedspace = 0;
   3ead8:	e03fed15 	stw	zero,-76(fp)
}
   3eadc:	0001883a 	nop
   3eae0:	e6fff804 	addi	sp,fp,-32
   3eae4:	dfc00917 	ldw	ra,36(sp)
   3eae8:	df000817 	ldw	fp,32(sp)
   3eaec:	ddc00717 	ldw	r23,28(sp)
   3eaf0:	dd800617 	ldw	r22,24(sp)
   3eaf4:	dd400517 	ldw	r21,20(sp)
   3eaf8:	dd000417 	ldw	r20,16(sp)
   3eafc:	dcc00317 	ldw	r19,12(sp)
   3eb00:	dc800217 	ldw	r18,8(sp)
   3eb04:	dc400117 	ldw	r17,4(sp)
   3eb08:	dc000017 	ldw	r16,0(sp)
   3eb0c:	dec00a04 	addi	sp,sp,40
   3eb10:	f800283a 	ret

0003eb14 <sha256_Raw>:

void sha256_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA256_DIGEST_LENGTH])
{
   3eb14:	deffe104 	addi	sp,sp,-124
   3eb18:	dfc01e15 	stw	ra,120(sp)
   3eb1c:	df001d15 	stw	fp,116(sp)
   3eb20:	df001d04 	addi	fp,sp,116
   3eb24:	e13ffd15 	stw	r4,-12(fp)
   3eb28:	e17ffe15 	stw	r5,-8(fp)
   3eb2c:	e1bfff15 	stw	r6,-4(fp)
    SHA256_CTX context;
    sha256_Init(&context);
   3eb30:	e13fe304 	addi	r4,fp,-116
   3eb34:	003de680 	call	3de68 <sha256_Init>
    sha256_Update(&context, data, len);
   3eb38:	e1bffe17 	ldw	r6,-8(fp)
   3eb3c:	e17ffd17 	ldw	r5,-12(fp)
   3eb40:	e13fe304 	addi	r4,fp,-116
   3eb44:	003e49c0 	call	3e49c <sha256_Update>
    sha256_Final(digest, &context);
   3eb48:	e17fe304 	addi	r5,fp,-116
   3eb4c:	e13fff17 	ldw	r4,-4(fp)
   3eb50:	003e7440 	call	3e744 <sha256_Final>
}
   3eb54:	0001883a 	nop
   3eb58:	e037883a 	mov	sp,fp
   3eb5c:	dfc00117 	ldw	ra,4(sp)
   3eb60:	df000017 	ldw	fp,0(sp)
   3eb64:	dec00204 	addi	sp,sp,8
   3eb68:	f800283a 	ret

0003eb6c <sha512_Init>:


/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context)
{
   3eb6c:	defffd04 	addi	sp,sp,-12
   3eb70:	dfc00215 	stw	ra,8(sp)
   3eb74:	df000115 	stw	fp,4(sp)
   3eb78:	df000104 	addi	fp,sp,4
   3eb7c:	e13fff15 	stw	r4,-4(fp)
    if (context == (SHA512_CTX*)0) {
   3eb80:	e0bfff17 	ldw	r2,-4(fp)
   3eb84:	10001626 	beq	r2,zero,3ebe0 <sha512_Init+0x74>
        return;
    }
    MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
   3eb88:	e0bfff17 	ldw	r2,-4(fp)
   3eb8c:	01801004 	movi	r6,64
   3eb90:	014001b4 	movhi	r5,6
   3eb94:	29741104 	addi	r5,r5,-12220
   3eb98:	1009883a 	mov	r4,r2
   3eb9c:	0045c980 	call	45c98 <memcpy>
    MEMSET_BZERO(context->buffer, SHA512_BLOCK_LENGTH);
   3eba0:	e0bfff17 	ldw	r2,-4(fp)
   3eba4:	10801404 	addi	r2,r2,80
   3eba8:	01802004 	movi	r6,128
   3ebac:	000b883a 	mov	r5,zero
   3ebb0:	1009883a 	mov	r4,r2
   3ebb4:	0045f3c0 	call	45f3c <memset>
    context->bitcount[0] = context->bitcount[1] = 0;
   3ebb8:	e0bfff17 	ldw	r2,-4(fp)
   3ebbc:	10001215 	stw	zero,72(r2)
   3ebc0:	10001315 	stw	zero,76(r2)
   3ebc4:	e13fff17 	ldw	r4,-4(fp)
   3ebc8:	20801217 	ldw	r2,72(r4)
   3ebcc:	20c01317 	ldw	r3,76(r4)
   3ebd0:	e13fff17 	ldw	r4,-4(fp)
   3ebd4:	20801015 	stw	r2,64(r4)
   3ebd8:	20c01115 	stw	r3,68(r4)
   3ebdc:	00000106 	br	3ebe4 <sha512_Init+0x78>

/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context)
{
    if (context == (SHA512_CTX*)0) {
        return;
   3ebe0:	0001883a 	nop
    }
    MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
    MEMSET_BZERO(context->buffer, SHA512_BLOCK_LENGTH);
    context->bitcount[0] = context->bitcount[1] = 0;
}
   3ebe4:	e037883a 	mov	sp,fp
   3ebe8:	dfc00117 	ldw	ra,4(sp)
   3ebec:	df000017 	ldw	fp,0(sp)
   3ebf0:	dec00204 	addi	sp,sp,8
   3ebf4:	f800283a 	ret

0003ebf8 <sha512_Transform>:
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha512_Transform(SHA512_CTX* context, const sha2_word64* data)
{
   3ebf8:	deff7804 	addi	sp,sp,-544
   3ebfc:	df008715 	stw	fp,540(sp)
   3ec00:	dd808615 	stw	r22,536(sp)
   3ec04:	dd408515 	stw	r21,532(sp)
   3ec08:	dd008415 	stw	r20,528(sp)
   3ec0c:	dcc08315 	stw	r19,524(sp)
   3ec10:	dc808215 	stw	r18,520(sp)
   3ec14:	dc408115 	stw	r17,516(sp)
   3ec18:	dc008015 	stw	r16,512(sp)
   3ec1c:	df008704 	addi	fp,sp,540
   3ec20:	e13f9515 	stw	r4,-428(fp)
   3ec24:	e17f9615 	stw	r5,-424(fp)
    sha2_word64 a, b, c, d, e, f, g, h, s0, s1;
    sha2_word64 T1, T2, *W512 = (sha2_word64*)context->buffer;
   3ec28:	e0bf9517 	ldw	r2,-428(fp)
   3ec2c:	10801404 	addi	r2,r2,80
   3ec30:	e0bf8a15 	stw	r2,-472(fp)
    int j;

    /* Initialize registers with the prev. intermediate value */
    a = context->state[0];
   3ec34:	e0ff9517 	ldw	r3,-428(fp)
   3ec38:	18800017 	ldw	r2,0(r3)
   3ec3c:	e0bf7915 	stw	r2,-540(fp)
   3ec40:	18800117 	ldw	r2,4(r3)
   3ec44:	e0bf7a15 	stw	r2,-536(fp)
    b = context->state[1];
   3ec48:	e0ff9517 	ldw	r3,-428(fp)
   3ec4c:	18800217 	ldw	r2,8(r3)
   3ec50:	e0bf7b15 	stw	r2,-532(fp)
   3ec54:	18800317 	ldw	r2,12(r3)
   3ec58:	e0bf7c15 	stw	r2,-528(fp)
    c = context->state[2];
   3ec5c:	e0ff9517 	ldw	r3,-428(fp)
   3ec60:	18800417 	ldw	r2,16(r3)
   3ec64:	e0bf7d15 	stw	r2,-524(fp)
   3ec68:	18800517 	ldw	r2,20(r3)
   3ec6c:	e0bf7e15 	stw	r2,-520(fp)
    d = context->state[3];
   3ec70:	e0ff9517 	ldw	r3,-428(fp)
   3ec74:	18800617 	ldw	r2,24(r3)
   3ec78:	e0bf7f15 	stw	r2,-516(fp)
   3ec7c:	18800717 	ldw	r2,28(r3)
   3ec80:	e0bf8015 	stw	r2,-512(fp)
    e = context->state[4];
   3ec84:	e0ff9517 	ldw	r3,-428(fp)
   3ec88:	18800817 	ldw	r2,32(r3)
   3ec8c:	e0bf8115 	stw	r2,-508(fp)
   3ec90:	18800917 	ldw	r2,36(r3)
   3ec94:	e0bf8215 	stw	r2,-504(fp)
    f = context->state[5];
   3ec98:	e0ff9517 	ldw	r3,-428(fp)
   3ec9c:	18800a17 	ldw	r2,40(r3)
   3eca0:	e0bf8315 	stw	r2,-500(fp)
   3eca4:	18800b17 	ldw	r2,44(r3)
   3eca8:	e0bf8415 	stw	r2,-496(fp)
    g = context->state[6];
   3ecac:	e0ff9517 	ldw	r3,-428(fp)
   3ecb0:	18800c17 	ldw	r2,48(r3)
   3ecb4:	e0bf8515 	stw	r2,-492(fp)
   3ecb8:	18800d17 	ldw	r2,52(r3)
   3ecbc:	e0bf8615 	stw	r2,-488(fp)
    h = context->state[7];
   3ecc0:	e0ff9517 	ldw	r3,-428(fp)
   3ecc4:	18800e17 	ldw	r2,56(r3)
   3ecc8:	e0bf8715 	stw	r2,-484(fp)
   3eccc:	18800f17 	ldw	r2,60(r3)
   3ecd0:	e0bf8815 	stw	r2,-480(fp)

    j = 0;
   3ecd4:	e03f8915 	stw	zero,-476(fp)
    do {
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Convert TO host byte order */
        REVERSE64(*data++, W512[j]);
   3ecd8:	e0ff9617 	ldw	r3,-424(fp)
   3ecdc:	18800204 	addi	r2,r3,8
   3ece0:	e0bf9615 	stw	r2,-424(fp)
   3ece4:	18800017 	ldw	r2,0(r3)
   3ece8:	e0bf8b15 	stw	r2,-468(fp)
   3ecec:	18800117 	ldw	r2,4(r3)
   3ecf0:	e0bf8c15 	stw	r2,-464(fp)
   3ecf4:	e0bf8c17 	ldw	r2,-464(fp)
   3ecf8:	e0bff715 	stw	r2,-36(fp)
   3ecfc:	e0ff8b17 	ldw	r3,-468(fp)
   3ed00:	e0fff815 	stw	r3,-32(fp)
   3ed04:	e13ff717 	ldw	r4,-36(fp)
   3ed08:	e13f8b15 	stw	r4,-468(fp)
   3ed0c:	e17ff817 	ldw	r5,-32(fp)
   3ed10:	e17f8c15 	stw	r5,-464(fp)
   3ed14:	e0ff8b17 	ldw	r3,-468(fp)
   3ed18:	00bfc074 	movhi	r2,65281
   3ed1c:	10bfc004 	addi	r2,r2,-256
   3ed20:	1884703a 	and	r2,r3,r2
   3ed24:	e0bf9715 	stw	r2,-420(fp)
   3ed28:	e0ff8c17 	ldw	r3,-464(fp)
   3ed2c:	00bfc074 	movhi	r2,65281
   3ed30:	10bfc004 	addi	r2,r2,-256
   3ed34:	1884703a 	and	r2,r3,r2
   3ed38:	e0bf9815 	stw	r2,-416(fp)
   3ed3c:	e1bf9817 	ldw	r6,-416(fp)
   3ed40:	3004963a 	slli	r2,r6,24
   3ed44:	e1ff9717 	ldw	r7,-420(fp)
   3ed48:	380ed23a 	srli	r7,r7,8
   3ed4c:	e1ff9915 	stw	r7,-412(fp)
   3ed50:	e0ff9917 	ldw	r3,-412(fp)
   3ed54:	10c4b03a 	or	r2,r2,r3
   3ed58:	e0bf9915 	stw	r2,-412(fp)
   3ed5c:	e13f9817 	ldw	r4,-416(fp)
   3ed60:	2008d23a 	srli	r4,r4,8
   3ed64:	e13f9a15 	stw	r4,-408(fp)
   3ed68:	e0ff8b17 	ldw	r3,-468(fp)
   3ed6c:	00803ff4 	movhi	r2,255
   3ed70:	10803fc4 	addi	r2,r2,255
   3ed74:	1884703a 	and	r2,r3,r2
   3ed78:	e0bf9b15 	stw	r2,-404(fp)
   3ed7c:	e0ff8c17 	ldw	r3,-464(fp)
   3ed80:	00803ff4 	movhi	r2,255
   3ed84:	10803fc4 	addi	r2,r2,255
   3ed88:	1884703a 	and	r2,r3,r2
   3ed8c:	e0bf9c15 	stw	r2,-400(fp)
   3ed90:	e17f9b17 	ldw	r5,-404(fp)
   3ed94:	2804d63a 	srli	r2,r5,24
   3ed98:	e1bf9c17 	ldw	r6,-400(fp)
   3ed9c:	300c923a 	slli	r6,r6,8
   3eda0:	e1bf9e15 	stw	r6,-392(fp)
   3eda4:	e1ff9e17 	ldw	r7,-392(fp)
   3eda8:	11c4b03a 	or	r2,r2,r7
   3edac:	e0bf9e15 	stw	r2,-392(fp)
   3edb0:	e0bf9b17 	ldw	r2,-404(fp)
   3edb4:	1004923a 	slli	r2,r2,8
   3edb8:	e0bf9d15 	stw	r2,-396(fp)
   3edbc:	e0ff9917 	ldw	r3,-412(fp)
   3edc0:	e13f9d17 	ldw	r4,-396(fp)
   3edc4:	1904b03a 	or	r2,r3,r4
   3edc8:	e0bf8b15 	stw	r2,-468(fp)
   3edcc:	e17f9a17 	ldw	r5,-408(fp)
   3edd0:	e1bf9e17 	ldw	r6,-392(fp)
   3edd4:	2984b03a 	or	r2,r5,r6
   3edd8:	e0bf8c15 	stw	r2,-464(fp)
   3eddc:	e0bf8917 	ldw	r2,-476(fp)
   3ede0:	100690fa 	slli	r3,r2,3
   3ede4:	e0bf8a17 	ldw	r2,-472(fp)
   3ede8:	10c7883a 	add	r3,r2,r3
   3edec:	e0bf8b17 	ldw	r2,-468(fp)
   3edf0:	10bfffec 	andhi	r2,r2,65535
   3edf4:	e0bf9f15 	stw	r2,-388(fp)
   3edf8:	e0bf8c17 	ldw	r2,-464(fp)
   3edfc:	10bfffec 	andhi	r2,r2,65535
   3ee00:	e0bfa015 	stw	r2,-384(fp)
   3ee04:	e1ffa017 	ldw	r7,-384(fp)
   3ee08:	3804943a 	slli	r2,r7,16
   3ee0c:	e13f9f17 	ldw	r4,-388(fp)
   3ee10:	2008d43a 	srli	r4,r4,16
   3ee14:	e13fa115 	stw	r4,-380(fp)
   3ee18:	e17fa117 	ldw	r5,-380(fp)
   3ee1c:	1144b03a 	or	r2,r2,r5
   3ee20:	e0bfa115 	stw	r2,-380(fp)
   3ee24:	e1bfa017 	ldw	r6,-384(fp)
   3ee28:	300cd43a 	srli	r6,r6,16
   3ee2c:	e1bfa215 	stw	r6,-376(fp)
   3ee30:	e0bf8b17 	ldw	r2,-468(fp)
   3ee34:	10bfffcc 	andi	r2,r2,65535
   3ee38:	e0bfa315 	stw	r2,-372(fp)
   3ee3c:	e0bf8c17 	ldw	r2,-464(fp)
   3ee40:	10bfffcc 	andi	r2,r2,65535
   3ee44:	e0bfa415 	stw	r2,-368(fp)
   3ee48:	e1ffa317 	ldw	r7,-372(fp)
   3ee4c:	3804d43a 	srli	r2,r7,16
   3ee50:	e13fa417 	ldw	r4,-368(fp)
   3ee54:	2008943a 	slli	r4,r4,16
   3ee58:	e13fa615 	stw	r4,-360(fp)
   3ee5c:	e17fa617 	ldw	r5,-360(fp)
   3ee60:	1144b03a 	or	r2,r2,r5
   3ee64:	e0bfa615 	stw	r2,-360(fp)
   3ee68:	e1bfa317 	ldw	r6,-372(fp)
   3ee6c:	300c943a 	slli	r6,r6,16
   3ee70:	e1bfa515 	stw	r6,-364(fp)
   3ee74:	e1ffa117 	ldw	r7,-380(fp)
   3ee78:	e0bfa517 	ldw	r2,-364(fp)
   3ee7c:	388eb03a 	or	r7,r7,r2
   3ee80:	e1ffa715 	stw	r7,-356(fp)
   3ee84:	e13fa217 	ldw	r4,-376(fp)
   3ee88:	e17fa617 	ldw	r5,-360(fp)
   3ee8c:	2148b03a 	or	r4,r4,r5
   3ee90:	e13fa815 	stw	r4,-352(fp)
   3ee94:	e1bfa717 	ldw	r6,-356(fp)
   3ee98:	19800015 	stw	r6,0(r3)
   3ee9c:	e1ffa817 	ldw	r7,-352(fp)
   3eea0:	19c00115 	stw	r7,4(r3)
        /* Apply the SHA-512 compression function to update a..h */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + W512[j];
   3eea4:	e0bf8217 	ldw	r2,-504(fp)
   3eea8:	100694ba 	slli	r3,r2,18
   3eeac:	e0bf8117 	ldw	r2,-508(fp)
   3eeb0:	1004d3ba 	srli	r2,r2,14
   3eeb4:	1884b03a 	or	r2,r3,r2
   3eeb8:	e0bfa915 	stw	r2,-348(fp)
   3eebc:	e0bf8117 	ldw	r2,-508(fp)
   3eec0:	100694ba 	slli	r3,r2,18
   3eec4:	e0bf8217 	ldw	r2,-504(fp)
   3eec8:	1004d3ba 	srli	r2,r2,14
   3eecc:	1884b03a 	or	r2,r3,r2
   3eed0:	e0bfaa15 	stw	r2,-344(fp)
   3eed4:	e0bf8217 	ldw	r2,-504(fp)
   3eed8:	100693ba 	slli	r3,r2,14
   3eedc:	e0bf8117 	ldw	r2,-508(fp)
   3eee0:	1004d4ba 	srli	r2,r2,18
   3eee4:	1884b03a 	or	r2,r3,r2
   3eee8:	e0bfab15 	stw	r2,-340(fp)
   3eeec:	e0bf8117 	ldw	r2,-508(fp)
   3eef0:	100693ba 	slli	r3,r2,14
   3eef4:	e0bf8217 	ldw	r2,-504(fp)
   3eef8:	1004d4ba 	srli	r2,r2,18
   3eefc:	1884b03a 	or	r2,r3,r2
   3ef00:	e0bfac15 	stw	r2,-336(fp)
   3ef04:	e0bfa917 	ldw	r2,-348(fp)
   3ef08:	e0ffab17 	ldw	r3,-340(fp)
   3ef0c:	10c4f03a 	xor	r2,r2,r3
   3ef10:	e0bfad15 	stw	r2,-332(fp)
   3ef14:	e13faa17 	ldw	r4,-344(fp)
   3ef18:	e17fac17 	ldw	r5,-336(fp)
   3ef1c:	2148f03a 	xor	r4,r4,r5
   3ef20:	e13fae15 	stw	r4,-328(fp)
   3ef24:	e0bf8117 	ldw	r2,-508(fp)
   3ef28:	1006d27a 	srli	r3,r2,9
   3ef2c:	e0bf8217 	ldw	r2,-504(fp)
   3ef30:	100495fa 	slli	r2,r2,23
   3ef34:	1884b03a 	or	r2,r3,r2
   3ef38:	e0bfb015 	stw	r2,-320(fp)
   3ef3c:	e0bf8217 	ldw	r2,-504(fp)
   3ef40:	1006d27a 	srli	r3,r2,9
   3ef44:	e0bf8117 	ldw	r2,-508(fp)
   3ef48:	100495fa 	slli	r2,r2,23
   3ef4c:	1884b03a 	or	r2,r3,r2
   3ef50:	e0bfaf15 	stw	r2,-324(fp)
   3ef54:	e1bfad17 	ldw	r6,-332(fp)
   3ef58:	e1ffaf17 	ldw	r7,-324(fp)
   3ef5c:	31eaf03a 	xor	r21,r6,r7
   3ef60:	e0bfae17 	ldw	r2,-328(fp)
   3ef64:	e0ffb017 	ldw	r3,-320(fp)
   3ef68:	10ecf03a 	xor	r22,r2,r3
   3ef6c:	e0bf8717 	ldw	r2,-484(fp)
   3ef70:	e0ff8817 	ldw	r3,-480(fp)
   3ef74:	a889883a 	add	r4,r21,r2
   3ef78:	254d803a 	cmpltu	r6,r4,r21
   3ef7c:	b0cb883a 	add	r5,r22,r3
   3ef80:	3145883a 	add	r2,r6,r5
   3ef84:	100b883a 	mov	r5,r2
   3ef88:	200d883a 	mov	r6,r4
   3ef8c:	280f883a 	mov	r7,r5
   3ef90:	e0ff8117 	ldw	r3,-508(fp)
   3ef94:	e0bf8317 	ldw	r2,-500(fp)
   3ef98:	1884703a 	and	r2,r3,r2
   3ef9c:	e0bfb115 	stw	r2,-316(fp)
   3efa0:	e0ff8217 	ldw	r3,-504(fp)
   3efa4:	e0bf8417 	ldw	r2,-496(fp)
   3efa8:	1884703a 	and	r2,r3,r2
   3efac:	e0bfb215 	stw	r2,-312(fp)
   3efb0:	e0bf8117 	ldw	r2,-508(fp)
   3efb4:	0084303a 	nor	r2,zero,r2
   3efb8:	e0bfb315 	stw	r2,-308(fp)
   3efbc:	e0bf8217 	ldw	r2,-504(fp)
   3efc0:	0084303a 	nor	r2,zero,r2
   3efc4:	e0bfb415 	stw	r2,-304(fp)
   3efc8:	e0bf8517 	ldw	r2,-492(fp)
   3efcc:	e13fb317 	ldw	r4,-308(fp)
   3efd0:	1104703a 	and	r2,r2,r4
   3efd4:	e0bfb515 	stw	r2,-300(fp)
   3efd8:	e0bf8617 	ldw	r2,-488(fp)
   3efdc:	e17fb417 	ldw	r5,-304(fp)
   3efe0:	1144703a 	and	r2,r2,r5
   3efe4:	e0bfb615 	stw	r2,-296(fp)
   3efe8:	e0bfb117 	ldw	r2,-316(fp)
   3efec:	e0ffb517 	ldw	r3,-300(fp)
   3eff0:	10c4f03a 	xor	r2,r2,r3
   3eff4:	e0bfb715 	stw	r2,-292(fp)
   3eff8:	e13fb217 	ldw	r4,-312(fp)
   3effc:	e17fb617 	ldw	r5,-296(fp)
   3f000:	2148f03a 	xor	r4,r4,r5
   3f004:	e13fb815 	stw	r4,-288(fp)
   3f008:	e13fb717 	ldw	r4,-292(fp)
   3f00c:	3105883a 	add	r2,r6,r4
   3f010:	1189803a 	cmpltu	r4,r2,r6
   3f014:	e17fb817 	ldw	r5,-288(fp)
   3f018:	3947883a 	add	r3,r7,r5
   3f01c:	20c9883a 	add	r4,r4,r3
   3f020:	2007883a 	mov	r3,r4
   3f024:	100f883a 	mov	r7,r2
   3f028:	1811883a 	mov	r8,r3
   3f02c:	00c001b4 	movhi	r3,6
   3f030:	18f37104 	addi	r3,r3,-12860
   3f034:	e0bf8917 	ldw	r2,-476(fp)
   3f038:	100490fa 	slli	r2,r2,3
   3f03c:	1889883a 	add	r4,r3,r2
   3f040:	20800017 	ldw	r2,0(r4)
   3f044:	20c00117 	ldw	r3,4(r4)
   3f048:	3889883a 	add	r4,r7,r2
   3f04c:	21cd803a 	cmpltu	r6,r4,r7
   3f050:	40cb883a 	add	r5,r8,r3
   3f054:	3145883a 	add	r2,r6,r5
   3f058:	100b883a 	mov	r5,r2
   3f05c:	200f883a 	mov	r7,r4
   3f060:	2811883a 	mov	r8,r5
   3f064:	e0bf8917 	ldw	r2,-476(fp)
   3f068:	100690fa 	slli	r3,r2,3
   3f06c:	e0bf8a17 	ldw	r2,-472(fp)
   3f070:	10c5883a 	add	r2,r2,r3
   3f074:	11000017 	ldw	r4,0(r2)
   3f078:	11400117 	ldw	r5,4(r2)
   3f07c:	3905883a 	add	r2,r7,r4
   3f080:	11cd803a 	cmpltu	r6,r2,r7
   3f084:	4147883a 	add	r3,r8,r5
   3f088:	30c9883a 	add	r4,r6,r3
   3f08c:	2007883a 	mov	r3,r4
   3f090:	e0bf8d15 	stw	r2,-460(fp)
   3f094:	e0ff8e15 	stw	r3,-456(fp)
#else  /* BYTE_ORDER == LITTLE_ENDIAN */
        /* Apply the SHA-512 compression function to update a..h with copy */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + (W512[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
        T2 = Sigma0_512(a) + Maj(a, b, c);
   3f098:	e0bf7a17 	ldw	r2,-536(fp)
   3f09c:	1006913a 	slli	r3,r2,4
   3f0a0:	e0bf7917 	ldw	r2,-540(fp)
   3f0a4:	1004d73a 	srli	r2,r2,28
   3f0a8:	1884b03a 	or	r2,r3,r2
   3f0ac:	e0bfb915 	stw	r2,-284(fp)
   3f0b0:	e0bf7917 	ldw	r2,-540(fp)
   3f0b4:	1006913a 	slli	r3,r2,4
   3f0b8:	e0bf7a17 	ldw	r2,-536(fp)
   3f0bc:	1004d73a 	srli	r2,r2,28
   3f0c0:	1884b03a 	or	r2,r3,r2
   3f0c4:	e0bfba15 	stw	r2,-280(fp)
   3f0c8:	e0bf7917 	ldw	r2,-540(fp)
   3f0cc:	1006d0ba 	srli	r3,r2,2
   3f0d0:	e0bf7a17 	ldw	r2,-536(fp)
   3f0d4:	100497ba 	slli	r2,r2,30
   3f0d8:	1884b03a 	or	r2,r3,r2
   3f0dc:	e0bfbc15 	stw	r2,-272(fp)
   3f0e0:	e0bf7a17 	ldw	r2,-536(fp)
   3f0e4:	1006d0ba 	srli	r3,r2,2
   3f0e8:	e0bf7917 	ldw	r2,-540(fp)
   3f0ec:	100497ba 	slli	r2,r2,30
   3f0f0:	1884b03a 	or	r2,r3,r2
   3f0f4:	e0bfbb15 	stw	r2,-276(fp)
   3f0f8:	e1bfb917 	ldw	r6,-284(fp)
   3f0fc:	e1ffbb17 	ldw	r7,-276(fp)
   3f100:	31ccf03a 	xor	r6,r6,r7
   3f104:	e1bfbd15 	stw	r6,-268(fp)
   3f108:	e0bfba17 	ldw	r2,-280(fp)
   3f10c:	e0ffbc17 	ldw	r3,-272(fp)
   3f110:	10c4f03a 	xor	r2,r2,r3
   3f114:	e0bfbe15 	stw	r2,-264(fp)
   3f118:	e0bf7917 	ldw	r2,-540(fp)
   3f11c:	1006d1fa 	srli	r3,r2,7
   3f120:	e0bf7a17 	ldw	r2,-536(fp)
   3f124:	1004967a 	slli	r2,r2,25
   3f128:	1884b03a 	or	r2,r3,r2
   3f12c:	e0bfc015 	stw	r2,-256(fp)
   3f130:	e0bf7a17 	ldw	r2,-536(fp)
   3f134:	1006d1fa 	srli	r3,r2,7
   3f138:	e0bf7917 	ldw	r2,-540(fp)
   3f13c:	1004967a 	slli	r2,r2,25
   3f140:	1884b03a 	or	r2,r3,r2
   3f144:	e0bfbf15 	stw	r2,-260(fp)
   3f148:	e13fbd17 	ldw	r4,-268(fp)
   3f14c:	e17fbf17 	ldw	r5,-260(fp)
   3f150:	2152f03a 	xor	r9,r4,r5
   3f154:	e1bfbe17 	ldw	r6,-264(fp)
   3f158:	e1ffc017 	ldw	r7,-256(fp)
   3f15c:	31d4f03a 	xor	r10,r6,r7
   3f160:	e0ff7917 	ldw	r3,-540(fp)
   3f164:	e0bf7b17 	ldw	r2,-532(fp)
   3f168:	18a6703a 	and	r19,r3,r2
   3f16c:	e0ff7a17 	ldw	r3,-536(fp)
   3f170:	e0bf7c17 	ldw	r2,-528(fp)
   3f174:	18a8703a 	and	r20,r3,r2
   3f178:	e0ff7917 	ldw	r3,-540(fp)
   3f17c:	e0bf7d17 	ldw	r2,-524(fp)
   3f180:	18a2703a 	and	r17,r3,r2
   3f184:	e0ff7a17 	ldw	r3,-536(fp)
   3f188:	e0bf7e17 	ldw	r2,-520(fp)
   3f18c:	18a4703a 	and	r18,r3,r2
   3f190:	9c5ef03a 	xor	r15,r19,r17
   3f194:	a4a0f03a 	xor	r16,r20,r18
   3f198:	e0ff7b17 	ldw	r3,-532(fp)
   3f19c:	e0bf7d17 	ldw	r2,-524(fp)
   3f1a0:	189a703a 	and	r13,r3,r2
   3f1a4:	e0ff7c17 	ldw	r3,-528(fp)
   3f1a8:	e0bf7e17 	ldw	r2,-520(fp)
   3f1ac:	189c703a 	and	r14,r3,r2
   3f1b0:	7b56f03a 	xor	r11,r15,r13
   3f1b4:	8398f03a 	xor	r12,r16,r14
   3f1b8:	4ac5883a 	add	r2,r9,r11
   3f1bc:	1249803a 	cmpltu	r4,r2,r9
   3f1c0:	5307883a 	add	r3,r10,r12
   3f1c4:	20c9883a 	add	r4,r4,r3
   3f1c8:	2007883a 	mov	r3,r4
   3f1cc:	e0bf8f15 	stw	r2,-452(fp)
   3f1d0:	e0ff9015 	stw	r3,-448(fp)
        h = g;
   3f1d4:	e0bf8517 	ldw	r2,-492(fp)
   3f1d8:	e0bf8715 	stw	r2,-484(fp)
   3f1dc:	e0bf8617 	ldw	r2,-488(fp)
   3f1e0:	e0bf8815 	stw	r2,-480(fp)
        g = f;
   3f1e4:	e0bf8317 	ldw	r2,-500(fp)
   3f1e8:	e0bf8515 	stw	r2,-492(fp)
   3f1ec:	e0bf8417 	ldw	r2,-496(fp)
   3f1f0:	e0bf8615 	stw	r2,-488(fp)
        f = e;
   3f1f4:	e0bf8117 	ldw	r2,-508(fp)
   3f1f8:	e0bf8315 	stw	r2,-500(fp)
   3f1fc:	e0bf8217 	ldw	r2,-504(fp)
   3f200:	e0bf8415 	stw	r2,-496(fp)
        e = d + T1;
   3f204:	e1ff7f17 	ldw	r7,-516(fp)
   3f208:	e23f8017 	ldw	r8,-512(fp)
   3f20c:	e13f8d17 	ldw	r4,-460(fp)
   3f210:	e17f8e17 	ldw	r5,-456(fp)
   3f214:	3905883a 	add	r2,r7,r4
   3f218:	11cd803a 	cmpltu	r6,r2,r7
   3f21c:	4147883a 	add	r3,r8,r5
   3f220:	30c9883a 	add	r4,r6,r3
   3f224:	2007883a 	mov	r3,r4
   3f228:	e0bf8115 	stw	r2,-508(fp)
   3f22c:	e0ff8215 	stw	r3,-504(fp)
        d = c;
   3f230:	e0bf7d17 	ldw	r2,-524(fp)
   3f234:	e0bf7f15 	stw	r2,-516(fp)
   3f238:	e0bf7e17 	ldw	r2,-520(fp)
   3f23c:	e0bf8015 	stw	r2,-512(fp)
        c = b;
   3f240:	e0bf7b17 	ldw	r2,-532(fp)
   3f244:	e0bf7d15 	stw	r2,-524(fp)
   3f248:	e0bf7c17 	ldw	r2,-528(fp)
   3f24c:	e0bf7e15 	stw	r2,-520(fp)
        b = a;
   3f250:	e0bf7917 	ldw	r2,-540(fp)
   3f254:	e0bf7b15 	stw	r2,-532(fp)
   3f258:	e0bf7a17 	ldw	r2,-536(fp)
   3f25c:	e0bf7c15 	stw	r2,-528(fp)
        a = T1 + T2;
   3f260:	e1ff8d17 	ldw	r7,-460(fp)
   3f264:	e23f8e17 	ldw	r8,-456(fp)
   3f268:	e13f8f17 	ldw	r4,-452(fp)
   3f26c:	e17f9017 	ldw	r5,-448(fp)
   3f270:	3905883a 	add	r2,r7,r4
   3f274:	11cd803a 	cmpltu	r6,r2,r7
   3f278:	4147883a 	add	r3,r8,r5
   3f27c:	30c9883a 	add	r4,r6,r3
   3f280:	2007883a 	mov	r3,r4
   3f284:	e0bf7915 	stw	r2,-540(fp)
   3f288:	e0ff7a15 	stw	r3,-536(fp)

        j++;
   3f28c:	e0bf8917 	ldw	r2,-476(fp)
   3f290:	10800044 	addi	r2,r2,1
   3f294:	e0bf8915 	stw	r2,-476(fp)
    } while (j < 16);
   3f298:	e0bf8917 	ldw	r2,-476(fp)
   3f29c:	10800410 	cmplti	r2,r2,16
   3f2a0:	103e8d1e 	bne	r2,zero,3ecd8 <__alt_mem_epcs_flash_controller+0xfe02dcd8>

    do {
        /* Part of the message block expansion: */
        s0 = W512[(j + 1) & 0x0f];
   3f2a4:	e0bf8917 	ldw	r2,-476(fp)
   3f2a8:	10800044 	addi	r2,r2,1
   3f2ac:	108003cc 	andi	r2,r2,15
   3f2b0:	100690fa 	slli	r3,r2,3
   3f2b4:	e0bf8a17 	ldw	r2,-472(fp)
   3f2b8:	10c7883a 	add	r3,r2,r3
   3f2bc:	18800017 	ldw	r2,0(r3)
   3f2c0:	e0bf9115 	stw	r2,-444(fp)
   3f2c4:	18800117 	ldw	r2,4(r3)
   3f2c8:	e0bf9215 	stw	r2,-440(fp)
        s0 = sigma0_512(s0);
   3f2cc:	e0bf9217 	ldw	r2,-440(fp)
   3f2d0:	100697fa 	slli	r3,r2,31
   3f2d4:	e0bf9117 	ldw	r2,-444(fp)
   3f2d8:	1004d07a 	srli	r2,r2,1
   3f2dc:	1884b03a 	or	r2,r3,r2
   3f2e0:	e0bfc115 	stw	r2,-252(fp)
   3f2e4:	e0bf9117 	ldw	r2,-444(fp)
   3f2e8:	100697fa 	slli	r3,r2,31
   3f2ec:	e0bf9217 	ldw	r2,-440(fp)
   3f2f0:	1004d07a 	srli	r2,r2,1
   3f2f4:	1884b03a 	or	r2,r3,r2
   3f2f8:	e0bfc215 	stw	r2,-248(fp)
   3f2fc:	e0bf9217 	ldw	r2,-440(fp)
   3f300:	1006963a 	slli	r3,r2,24
   3f304:	e0bf9117 	ldw	r2,-444(fp)
   3f308:	1004d23a 	srli	r2,r2,8
   3f30c:	1884b03a 	or	r2,r3,r2
   3f310:	e0bfc315 	stw	r2,-244(fp)
   3f314:	e0bf9117 	ldw	r2,-444(fp)
   3f318:	1006963a 	slli	r3,r2,24
   3f31c:	e0bf9217 	ldw	r2,-440(fp)
   3f320:	1004d23a 	srli	r2,r2,8
   3f324:	1884b03a 	or	r2,r3,r2
   3f328:	e0bfc415 	stw	r2,-240(fp)
   3f32c:	e0bfc117 	ldw	r2,-252(fp)
   3f330:	e0ffc317 	ldw	r3,-244(fp)
   3f334:	10c4f03a 	xor	r2,r2,r3
   3f338:	e0bfc515 	stw	r2,-236(fp)
   3f33c:	e13fc217 	ldw	r4,-248(fp)
   3f340:	e17fc417 	ldw	r5,-240(fp)
   3f344:	2148f03a 	xor	r4,r4,r5
   3f348:	e13fc615 	stw	r4,-232(fp)
   3f34c:	e0bf9217 	ldw	r2,-440(fp)
   3f350:	1006967a 	slli	r3,r2,25
   3f354:	e0bf9117 	ldw	r2,-444(fp)
   3f358:	1004d1fa 	srli	r2,r2,7
   3f35c:	e0bfc715 	stw	r2,-228(fp)
   3f360:	e1bfc717 	ldw	r6,-228(fp)
   3f364:	1986b03a 	or	r3,r3,r6
   3f368:	e0ffc715 	stw	r3,-228(fp)
   3f36c:	e0bf9217 	ldw	r2,-440(fp)
   3f370:	1004d1fa 	srli	r2,r2,7
   3f374:	e0bfc815 	stw	r2,-224(fp)
   3f378:	e1ffc517 	ldw	r7,-236(fp)
   3f37c:	e0ffc717 	ldw	r3,-228(fp)
   3f380:	38c4f03a 	xor	r2,r7,r3
   3f384:	e0bf9115 	stw	r2,-444(fp)
   3f388:	e13fc617 	ldw	r4,-232(fp)
   3f38c:	e17fc817 	ldw	r5,-224(fp)
   3f390:	2144f03a 	xor	r2,r4,r5
   3f394:	e0bf9215 	stw	r2,-440(fp)
        s1 = W512[(j + 14) & 0x0f];
   3f398:	e0bf8917 	ldw	r2,-476(fp)
   3f39c:	10800384 	addi	r2,r2,14
   3f3a0:	108003cc 	andi	r2,r2,15
   3f3a4:	100690fa 	slli	r3,r2,3
   3f3a8:	e0bf8a17 	ldw	r2,-472(fp)
   3f3ac:	10c7883a 	add	r3,r2,r3
   3f3b0:	18800017 	ldw	r2,0(r3)
   3f3b4:	e0bf9315 	stw	r2,-436(fp)
   3f3b8:	18800117 	ldw	r2,4(r3)
   3f3bc:	e0bf9415 	stw	r2,-432(fp)
        s1 = sigma1_512(s1);
   3f3c0:	e0bf9417 	ldw	r2,-432(fp)
   3f3c4:	1006937a 	slli	r3,r2,13
   3f3c8:	e0bf9317 	ldw	r2,-436(fp)
   3f3cc:	1004d4fa 	srli	r2,r2,19
   3f3d0:	1884b03a 	or	r2,r3,r2
   3f3d4:	e0bfc915 	stw	r2,-220(fp)
   3f3d8:	e0bf9317 	ldw	r2,-436(fp)
   3f3dc:	1006937a 	slli	r3,r2,13
   3f3e0:	e0bf9417 	ldw	r2,-432(fp)
   3f3e4:	1004d4fa 	srli	r2,r2,19
   3f3e8:	1884b03a 	or	r2,r3,r2
   3f3ec:	e0bfca15 	stw	r2,-216(fp)
   3f3f0:	e0bf9317 	ldw	r2,-436(fp)
   3f3f4:	1006d77a 	srli	r3,r2,29
   3f3f8:	e0bf9417 	ldw	r2,-432(fp)
   3f3fc:	100490fa 	slli	r2,r2,3
   3f400:	1884b03a 	or	r2,r3,r2
   3f404:	e0bfcc15 	stw	r2,-208(fp)
   3f408:	e0bf9417 	ldw	r2,-432(fp)
   3f40c:	1006d77a 	srli	r3,r2,29
   3f410:	e0bf9317 	ldw	r2,-436(fp)
   3f414:	100490fa 	slli	r2,r2,3
   3f418:	1884b03a 	or	r2,r3,r2
   3f41c:	e0bfcb15 	stw	r2,-212(fp)
   3f420:	e1bfc917 	ldw	r6,-220(fp)
   3f424:	e1ffcb17 	ldw	r7,-212(fp)
   3f428:	31ccf03a 	xor	r6,r6,r7
   3f42c:	e1bfcd15 	stw	r6,-204(fp)
   3f430:	e0bfca17 	ldw	r2,-216(fp)
   3f434:	e0ffcc17 	ldw	r3,-208(fp)
   3f438:	10c4f03a 	xor	r2,r2,r3
   3f43c:	e0bfce15 	stw	r2,-200(fp)
   3f440:	e0bf9417 	ldw	r2,-432(fp)
   3f444:	100696ba 	slli	r3,r2,26
   3f448:	e0bf9317 	ldw	r2,-436(fp)
   3f44c:	1004d1ba 	srli	r2,r2,6
   3f450:	e0bfcf15 	stw	r2,-196(fp)
   3f454:	e13fcf17 	ldw	r4,-196(fp)
   3f458:	1906b03a 	or	r3,r3,r4
   3f45c:	e0ffcf15 	stw	r3,-196(fp)
   3f460:	e0bf9417 	ldw	r2,-432(fp)
   3f464:	1004d1ba 	srli	r2,r2,6
   3f468:	e0bfd015 	stw	r2,-192(fp)
   3f46c:	e17fcd17 	ldw	r5,-204(fp)
   3f470:	e1bfcf17 	ldw	r6,-196(fp)
   3f474:	2984f03a 	xor	r2,r5,r6
   3f478:	e0bf9315 	stw	r2,-436(fp)
   3f47c:	e1ffce17 	ldw	r7,-200(fp)
   3f480:	e0ffd017 	ldw	r3,-192(fp)
   3f484:	38c4f03a 	xor	r2,r7,r3
   3f488:	e0bf9415 	stw	r2,-432(fp)

        /* Apply the SHA-512 compression function to update a..h */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
   3f48c:	e0bf8217 	ldw	r2,-504(fp)
   3f490:	100694ba 	slli	r3,r2,18
   3f494:	e0bf8117 	ldw	r2,-508(fp)
   3f498:	1004d3ba 	srli	r2,r2,14
   3f49c:	1884b03a 	or	r2,r3,r2
   3f4a0:	e0bfd115 	stw	r2,-188(fp)
   3f4a4:	e0bf8117 	ldw	r2,-508(fp)
   3f4a8:	100694ba 	slli	r3,r2,18
   3f4ac:	e0bf8217 	ldw	r2,-504(fp)
   3f4b0:	1004d3ba 	srli	r2,r2,14
   3f4b4:	1884b03a 	or	r2,r3,r2
   3f4b8:	e0bfd215 	stw	r2,-184(fp)
   3f4bc:	e0bf8217 	ldw	r2,-504(fp)
   3f4c0:	100693ba 	slli	r3,r2,14
   3f4c4:	e0bf8117 	ldw	r2,-508(fp)
   3f4c8:	1004d4ba 	srli	r2,r2,18
   3f4cc:	1884b03a 	or	r2,r3,r2
   3f4d0:	e0bfd315 	stw	r2,-180(fp)
   3f4d4:	e0bf8117 	ldw	r2,-508(fp)
   3f4d8:	100693ba 	slli	r3,r2,14
   3f4dc:	e0bf8217 	ldw	r2,-504(fp)
   3f4e0:	1004d4ba 	srli	r2,r2,18
   3f4e4:	1884b03a 	or	r2,r3,r2
   3f4e8:	e0bfd415 	stw	r2,-176(fp)
   3f4ec:	e13fd117 	ldw	r4,-188(fp)
   3f4f0:	e17fd317 	ldw	r5,-180(fp)
   3f4f4:	2148f03a 	xor	r4,r4,r5
   3f4f8:	e13fd515 	stw	r4,-172(fp)
   3f4fc:	e1bfd217 	ldw	r6,-184(fp)
   3f500:	e1ffd417 	ldw	r7,-176(fp)
   3f504:	31ccf03a 	xor	r6,r6,r7
   3f508:	e1bfd615 	stw	r6,-168(fp)
   3f50c:	e0bf8117 	ldw	r2,-508(fp)
   3f510:	1006d27a 	srli	r3,r2,9
   3f514:	e0bf8217 	ldw	r2,-504(fp)
   3f518:	100495fa 	slli	r2,r2,23
   3f51c:	1884b03a 	or	r2,r3,r2
   3f520:	e0bfd815 	stw	r2,-160(fp)
   3f524:	e0bf8217 	ldw	r2,-504(fp)
   3f528:	1006d27a 	srli	r3,r2,9
   3f52c:	e0bf8117 	ldw	r2,-508(fp)
   3f530:	100495fa 	slli	r2,r2,23
   3f534:	1884b03a 	or	r2,r3,r2
   3f538:	e0bfd715 	stw	r2,-164(fp)
   3f53c:	e0bfd517 	ldw	r2,-172(fp)
   3f540:	e0ffd717 	ldw	r3,-164(fp)
   3f544:	10c4f03a 	xor	r2,r2,r3
   3f548:	e0bfd915 	stw	r2,-156(fp)
   3f54c:	e13fd617 	ldw	r4,-168(fp)
   3f550:	e17fd817 	ldw	r5,-160(fp)
   3f554:	2148f03a 	xor	r4,r4,r5
   3f558:	e13fda15 	stw	r4,-152(fp)
   3f55c:	e0bf8717 	ldw	r2,-484(fp)
   3f560:	e0ff8817 	ldw	r3,-480(fp)
   3f564:	e1bfd917 	ldw	r6,-156(fp)
   3f568:	3089883a 	add	r4,r6,r2
   3f56c:	e1ffd917 	ldw	r7,-156(fp)
   3f570:	21cd803a 	cmpltu	r6,r4,r7
   3f574:	e1ffda17 	ldw	r7,-152(fp)
   3f578:	38cb883a 	add	r5,r7,r3
   3f57c:	3145883a 	add	r2,r6,r5
   3f580:	100b883a 	mov	r5,r2
   3f584:	200d883a 	mov	r6,r4
   3f588:	280f883a 	mov	r7,r5
   3f58c:	e0ff8117 	ldw	r3,-508(fp)
   3f590:	e0bf8317 	ldw	r2,-500(fp)
   3f594:	1884703a 	and	r2,r3,r2
   3f598:	e0bfdb15 	stw	r2,-148(fp)
   3f59c:	e0ff8217 	ldw	r3,-504(fp)
   3f5a0:	e0bf8417 	ldw	r2,-496(fp)
   3f5a4:	1884703a 	and	r2,r3,r2
   3f5a8:	e0bfdc15 	stw	r2,-144(fp)
   3f5ac:	e0bf8117 	ldw	r2,-508(fp)
   3f5b0:	0084303a 	nor	r2,zero,r2
   3f5b4:	e0bfdd15 	stw	r2,-140(fp)
   3f5b8:	e0bf8217 	ldw	r2,-504(fp)
   3f5bc:	0084303a 	nor	r2,zero,r2
   3f5c0:	e0bfde15 	stw	r2,-136(fp)
   3f5c4:	e0bf8517 	ldw	r2,-492(fp)
   3f5c8:	e0ffdd17 	ldw	r3,-140(fp)
   3f5cc:	10c4703a 	and	r2,r2,r3
   3f5d0:	e0bfdf15 	stw	r2,-132(fp)
   3f5d4:	e0bf8617 	ldw	r2,-488(fp)
   3f5d8:	e13fde17 	ldw	r4,-136(fp)
   3f5dc:	1104703a 	and	r2,r2,r4
   3f5e0:	e0bfe015 	stw	r2,-128(fp)
   3f5e4:	e17fdb17 	ldw	r5,-148(fp)
   3f5e8:	e0bfdf17 	ldw	r2,-132(fp)
   3f5ec:	288af03a 	xor	r5,r5,r2
   3f5f0:	e17fe115 	stw	r5,-124(fp)
   3f5f4:	e0ffdc17 	ldw	r3,-144(fp)
   3f5f8:	e13fe017 	ldw	r4,-128(fp)
   3f5fc:	1906f03a 	xor	r3,r3,r4
   3f600:	e0ffe215 	stw	r3,-120(fp)
   3f604:	e17fe117 	ldw	r5,-124(fp)
   3f608:	3145883a 	add	r2,r6,r5
   3f60c:	1189803a 	cmpltu	r4,r2,r6
   3f610:	e17fe217 	ldw	r5,-120(fp)
   3f614:	3947883a 	add	r3,r7,r5
   3f618:	20c9883a 	add	r4,r4,r3
   3f61c:	2007883a 	mov	r3,r4
   3f620:	100f883a 	mov	r7,r2
   3f624:	1811883a 	mov	r8,r3
   3f628:	00c001b4 	movhi	r3,6
   3f62c:	18f37104 	addi	r3,r3,-12860
   3f630:	e0bf8917 	ldw	r2,-476(fp)
   3f634:	100490fa 	slli	r2,r2,3
   3f638:	1889883a 	add	r4,r3,r2
   3f63c:	20800017 	ldw	r2,0(r4)
   3f640:	20c00117 	ldw	r3,4(r4)
   3f644:	3889883a 	add	r4,r7,r2
   3f648:	21cd803a 	cmpltu	r6,r4,r7
   3f64c:	40cb883a 	add	r5,r8,r3
   3f650:	3145883a 	add	r2,r6,r5
   3f654:	100b883a 	mov	r5,r2
   3f658:	2019883a 	mov	r12,r4
   3f65c:	281b883a 	mov	r13,r5
             (W512[j & 0x0f] += s1 + W512[(j + 9) & 0x0f] + s0);
   3f660:	e0bf8917 	ldw	r2,-476(fp)
   3f664:	108003cc 	andi	r2,r2,15
   3f668:	100690fa 	slli	r3,r2,3
   3f66c:	e0bf8a17 	ldw	r2,-472(fp)
   3f670:	10d7883a 	add	r11,r2,r3
   3f674:	e0bf8917 	ldw	r2,-476(fp)
   3f678:	108003cc 	andi	r2,r2,15
   3f67c:	100690fa 	slli	r3,r2,3
   3f680:	e0bf8a17 	ldw	r2,-472(fp)
   3f684:	10c5883a 	add	r2,r2,r3
   3f688:	12400017 	ldw	r9,0(r2)
   3f68c:	12800117 	ldw	r10,4(r2)
   3f690:	e0bf8917 	ldw	r2,-476(fp)
   3f694:	10800244 	addi	r2,r2,9
   3f698:	108003cc 	andi	r2,r2,15
   3f69c:	100690fa 	slli	r3,r2,3
   3f6a0:	e0bf8a17 	ldw	r2,-472(fp)
   3f6a4:	10c5883a 	add	r2,r2,r3
   3f6a8:	11c00017 	ldw	r7,0(r2)
   3f6ac:	12000117 	ldw	r8,4(r2)
   3f6b0:	e0bf9317 	ldw	r2,-436(fp)
   3f6b4:	e0ff9417 	ldw	r3,-432(fp)
   3f6b8:	3889883a 	add	r4,r7,r2
   3f6bc:	21cd803a 	cmpltu	r6,r4,r7
   3f6c0:	40cb883a 	add	r5,r8,r3
   3f6c4:	3145883a 	add	r2,r6,r5
   3f6c8:	100b883a 	mov	r5,r2
   3f6cc:	200f883a 	mov	r7,r4
   3f6d0:	2811883a 	mov	r8,r5
   3f6d4:	e0bf9117 	ldw	r2,-444(fp)
   3f6d8:	e0ff9217 	ldw	r3,-440(fp)
   3f6dc:	3889883a 	add	r4,r7,r2
   3f6e0:	21cd803a 	cmpltu	r6,r4,r7
   3f6e4:	40cb883a 	add	r5,r8,r3
   3f6e8:	3145883a 	add	r2,r6,r5
   3f6ec:	100b883a 	mov	r5,r2
   3f6f0:	200d883a 	mov	r6,r4
   3f6f4:	280f883a 	mov	r7,r5
   3f6f8:	4989883a 	add	r4,r9,r6
   3f6fc:	2245803a 	cmpltu	r2,r4,r9
   3f700:	51cb883a 	add	r5,r10,r7
   3f704:	1145883a 	add	r2,r2,r5
   3f708:	100b883a 	mov	r5,r2
   3f70c:	2005883a 	mov	r2,r4
   3f710:	2807883a 	mov	r3,r5
   3f714:	58800015 	stw	r2,0(r11)
   3f718:	58c00115 	stw	r3,4(r11)
   3f71c:	59000017 	ldw	r4,0(r11)
   3f720:	59400117 	ldw	r5,4(r11)
        s0 = sigma0_512(s0);
        s1 = W512[(j + 14) & 0x0f];
        s1 = sigma1_512(s1);

        /* Apply the SHA-512 compression function to update a..h */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
   3f724:	6105883a 	add	r2,r12,r4
   3f728:	130d803a 	cmpltu	r6,r2,r12
   3f72c:	6947883a 	add	r3,r13,r5
   3f730:	30c9883a 	add	r4,r6,r3
   3f734:	2007883a 	mov	r3,r4
   3f738:	e0bf8d15 	stw	r2,-460(fp)
   3f73c:	e0ff8e15 	stw	r3,-456(fp)
             (W512[j & 0x0f] += s1 + W512[(j + 9) & 0x0f] + s0);
        T2 = Sigma0_512(a) + Maj(a, b, c);
   3f740:	e0bf7a17 	ldw	r2,-536(fp)
   3f744:	1006913a 	slli	r3,r2,4
   3f748:	e0bf7917 	ldw	r2,-540(fp)
   3f74c:	1004d73a 	srli	r2,r2,28
   3f750:	1884b03a 	or	r2,r3,r2
   3f754:	e0bfe315 	stw	r2,-116(fp)
   3f758:	e0bf7917 	ldw	r2,-540(fp)
   3f75c:	1006913a 	slli	r3,r2,4
   3f760:	e0bf7a17 	ldw	r2,-536(fp)
   3f764:	1004d73a 	srli	r2,r2,28
   3f768:	1884b03a 	or	r2,r3,r2
   3f76c:	e0bfe415 	stw	r2,-112(fp)
   3f770:	e0bf7917 	ldw	r2,-540(fp)
   3f774:	1006d0ba 	srli	r3,r2,2
   3f778:	e0bf7a17 	ldw	r2,-536(fp)
   3f77c:	100497ba 	slli	r2,r2,30
   3f780:	1884b03a 	or	r2,r3,r2
   3f784:	e0bfe615 	stw	r2,-104(fp)
   3f788:	e0bf7a17 	ldw	r2,-536(fp)
   3f78c:	1006d0ba 	srli	r3,r2,2
   3f790:	e0bf7917 	ldw	r2,-540(fp)
   3f794:	100497ba 	slli	r2,r2,30
   3f798:	1884b03a 	or	r2,r3,r2
   3f79c:	e0bfe515 	stw	r2,-108(fp)
   3f7a0:	e1bfe317 	ldw	r6,-116(fp)
   3f7a4:	e1ffe517 	ldw	r7,-108(fp)
   3f7a8:	31ccf03a 	xor	r6,r6,r7
   3f7ac:	e1bfe715 	stw	r6,-100(fp)
   3f7b0:	e0bfe417 	ldw	r2,-112(fp)
   3f7b4:	e0ffe617 	ldw	r3,-104(fp)
   3f7b8:	10c4f03a 	xor	r2,r2,r3
   3f7bc:	e0bfe815 	stw	r2,-96(fp)
   3f7c0:	e0bf7917 	ldw	r2,-540(fp)
   3f7c4:	1006d1fa 	srli	r3,r2,7
   3f7c8:	e0bf7a17 	ldw	r2,-536(fp)
   3f7cc:	1004967a 	slli	r2,r2,25
   3f7d0:	1884b03a 	or	r2,r3,r2
   3f7d4:	e0bfea15 	stw	r2,-88(fp)
   3f7d8:	e0bf7a17 	ldw	r2,-536(fp)
   3f7dc:	1006d1fa 	srli	r3,r2,7
   3f7e0:	e0bf7917 	ldw	r2,-540(fp)
   3f7e4:	1004967a 	slli	r2,r2,25
   3f7e8:	1884b03a 	or	r2,r3,r2
   3f7ec:	e0bfe915 	stw	r2,-92(fp)
   3f7f0:	e13fe717 	ldw	r4,-100(fp)
   3f7f4:	e17fe917 	ldw	r5,-92(fp)
   3f7f8:	2148f03a 	xor	r4,r4,r5
   3f7fc:	e13feb15 	stw	r4,-84(fp)
   3f800:	e1bfe817 	ldw	r6,-96(fp)
   3f804:	e1ffea17 	ldw	r7,-88(fp)
   3f808:	31ccf03a 	xor	r6,r6,r7
   3f80c:	e1bfec15 	stw	r6,-80(fp)
   3f810:	e0ff7917 	ldw	r3,-540(fp)
   3f814:	e0bf7b17 	ldw	r2,-532(fp)
   3f818:	1884703a 	and	r2,r3,r2
   3f81c:	e0bfed15 	stw	r2,-76(fp)
   3f820:	e0ff7a17 	ldw	r3,-536(fp)
   3f824:	e0bf7c17 	ldw	r2,-528(fp)
   3f828:	1884703a 	and	r2,r3,r2
   3f82c:	e0bfee15 	stw	r2,-72(fp)
   3f830:	e0ff7917 	ldw	r3,-540(fp)
   3f834:	e0bf7d17 	ldw	r2,-524(fp)
   3f838:	1884703a 	and	r2,r3,r2
   3f83c:	e0bfef15 	stw	r2,-68(fp)
   3f840:	e0ff7a17 	ldw	r3,-536(fp)
   3f844:	e0bf7e17 	ldw	r2,-520(fp)
   3f848:	1884703a 	and	r2,r3,r2
   3f84c:	e0bff015 	stw	r2,-64(fp)
   3f850:	e0bfed17 	ldw	r2,-76(fp)
   3f854:	e0ffef17 	ldw	r3,-68(fp)
   3f858:	10c4f03a 	xor	r2,r2,r3
   3f85c:	e0bff115 	stw	r2,-60(fp)
   3f860:	e13fee17 	ldw	r4,-72(fp)
   3f864:	e17ff017 	ldw	r5,-64(fp)
   3f868:	2148f03a 	xor	r4,r4,r5
   3f86c:	e13ff215 	stw	r4,-56(fp)
   3f870:	e0ff7b17 	ldw	r3,-532(fp)
   3f874:	e0bf7d17 	ldw	r2,-524(fp)
   3f878:	1884703a 	and	r2,r3,r2
   3f87c:	e0bff315 	stw	r2,-52(fp)
   3f880:	e0ff7c17 	ldw	r3,-528(fp)
   3f884:	e0bf7e17 	ldw	r2,-520(fp)
   3f888:	1884703a 	and	r2,r3,r2
   3f88c:	e0bff415 	stw	r2,-48(fp)
   3f890:	e1bff117 	ldw	r6,-60(fp)
   3f894:	e1fff317 	ldw	r7,-52(fp)
   3f898:	31ccf03a 	xor	r6,r6,r7
   3f89c:	e1bff515 	stw	r6,-44(fp)
   3f8a0:	e0bff217 	ldw	r2,-56(fp)
   3f8a4:	e0fff417 	ldw	r3,-48(fp)
   3f8a8:	10c4f03a 	xor	r2,r2,r3
   3f8ac:	e0bff615 	stw	r2,-40(fp)
   3f8b0:	e13feb17 	ldw	r4,-84(fp)
   3f8b4:	e17ff517 	ldw	r5,-44(fp)
   3f8b8:	2145883a 	add	r2,r4,r5
   3f8bc:	e1bfeb17 	ldw	r6,-84(fp)
   3f8c0:	1189803a 	cmpltu	r4,r2,r6
   3f8c4:	e1ffec17 	ldw	r7,-80(fp)
   3f8c8:	e17ff617 	ldw	r5,-40(fp)
   3f8cc:	3947883a 	add	r3,r7,r5
   3f8d0:	20c9883a 	add	r4,r4,r3
   3f8d4:	2007883a 	mov	r3,r4
   3f8d8:	e0bf8f15 	stw	r2,-452(fp)
   3f8dc:	e0ff9015 	stw	r3,-448(fp)
        h = g;
   3f8e0:	e0bf8517 	ldw	r2,-492(fp)
   3f8e4:	e0bf8715 	stw	r2,-484(fp)
   3f8e8:	e0bf8617 	ldw	r2,-488(fp)
   3f8ec:	e0bf8815 	stw	r2,-480(fp)
        g = f;
   3f8f0:	e0bf8317 	ldw	r2,-500(fp)
   3f8f4:	e0bf8515 	stw	r2,-492(fp)
   3f8f8:	e0bf8417 	ldw	r2,-496(fp)
   3f8fc:	e0bf8615 	stw	r2,-488(fp)
        f = e;
   3f900:	e0bf8117 	ldw	r2,-508(fp)
   3f904:	e0bf8315 	stw	r2,-500(fp)
   3f908:	e0bf8217 	ldw	r2,-504(fp)
   3f90c:	e0bf8415 	stw	r2,-496(fp)
        e = d + T1;
   3f910:	e1ff7f17 	ldw	r7,-516(fp)
   3f914:	e23f8017 	ldw	r8,-512(fp)
   3f918:	e13f8d17 	ldw	r4,-460(fp)
   3f91c:	e17f8e17 	ldw	r5,-456(fp)
   3f920:	3905883a 	add	r2,r7,r4
   3f924:	11cd803a 	cmpltu	r6,r2,r7
   3f928:	4147883a 	add	r3,r8,r5
   3f92c:	30c9883a 	add	r4,r6,r3
   3f930:	2007883a 	mov	r3,r4
   3f934:	e0bf8115 	stw	r2,-508(fp)
   3f938:	e0ff8215 	stw	r3,-504(fp)
        d = c;
   3f93c:	e0bf7d17 	ldw	r2,-524(fp)
   3f940:	e0bf7f15 	stw	r2,-516(fp)
   3f944:	e0bf7e17 	ldw	r2,-520(fp)
   3f948:	e0bf8015 	stw	r2,-512(fp)
        c = b;
   3f94c:	e0bf7b17 	ldw	r2,-532(fp)
   3f950:	e0bf7d15 	stw	r2,-524(fp)
   3f954:	e0bf7c17 	ldw	r2,-528(fp)
   3f958:	e0bf7e15 	stw	r2,-520(fp)
        b = a;
   3f95c:	e0bf7917 	ldw	r2,-540(fp)
   3f960:	e0bf7b15 	stw	r2,-532(fp)
   3f964:	e0bf7a17 	ldw	r2,-536(fp)
   3f968:	e0bf7c15 	stw	r2,-528(fp)
        a = T1 + T2;
   3f96c:	e1ff8d17 	ldw	r7,-460(fp)
   3f970:	e23f8e17 	ldw	r8,-456(fp)
   3f974:	e13f8f17 	ldw	r4,-452(fp)
   3f978:	e17f9017 	ldw	r5,-448(fp)
   3f97c:	3905883a 	add	r2,r7,r4
   3f980:	11cd803a 	cmpltu	r6,r2,r7
   3f984:	4147883a 	add	r3,r8,r5
   3f988:	30c9883a 	add	r4,r6,r3
   3f98c:	2007883a 	mov	r3,r4
   3f990:	e0bf7915 	stw	r2,-540(fp)
   3f994:	e0ff7a15 	stw	r3,-536(fp)

        j++;
   3f998:	e0bf8917 	ldw	r2,-476(fp)
   3f99c:	10800044 	addi	r2,r2,1
   3f9a0:	e0bf8915 	stw	r2,-476(fp)
    } while (j < 80);
   3f9a4:	e0bf8917 	ldw	r2,-476(fp)
   3f9a8:	10801410 	cmplti	r2,r2,80
   3f9ac:	103e3d1e 	bne	r2,zero,3f2a4 <__alt_mem_epcs_flash_controller+0xfe02e2a4>

    /* Compute the current intermediate hash value */
    context->state[0] += a;
   3f9b0:	e0bf9517 	ldw	r2,-428(fp)
   3f9b4:	11000017 	ldw	r4,0(r2)
   3f9b8:	11400117 	ldw	r5,4(r2)
   3f9bc:	e1bf7917 	ldw	r6,-540(fp)
   3f9c0:	e1ff7a17 	ldw	r7,-536(fp)
   3f9c4:	2185883a 	add	r2,r4,r6
   3f9c8:	1111803a 	cmpltu	r8,r2,r4
   3f9cc:	29c7883a 	add	r3,r5,r7
   3f9d0:	40c9883a 	add	r4,r8,r3
   3f9d4:	2007883a 	mov	r3,r4
   3f9d8:	1009883a 	mov	r4,r2
   3f9dc:	180b883a 	mov	r5,r3
   3f9e0:	e0bf9517 	ldw	r2,-428(fp)
   3f9e4:	11000015 	stw	r4,0(r2)
   3f9e8:	11400115 	stw	r5,4(r2)
    context->state[1] += b;
   3f9ec:	e0bf9517 	ldw	r2,-428(fp)
   3f9f0:	11000217 	ldw	r4,8(r2)
   3f9f4:	11400317 	ldw	r5,12(r2)
   3f9f8:	e1bf7b17 	ldw	r6,-532(fp)
   3f9fc:	e1ff7c17 	ldw	r7,-528(fp)
   3fa00:	2185883a 	add	r2,r4,r6
   3fa04:	1111803a 	cmpltu	r8,r2,r4
   3fa08:	29c7883a 	add	r3,r5,r7
   3fa0c:	40c9883a 	add	r4,r8,r3
   3fa10:	2007883a 	mov	r3,r4
   3fa14:	1009883a 	mov	r4,r2
   3fa18:	180b883a 	mov	r5,r3
   3fa1c:	e0bf9517 	ldw	r2,-428(fp)
   3fa20:	11000215 	stw	r4,8(r2)
   3fa24:	11400315 	stw	r5,12(r2)
    context->state[2] += c;
   3fa28:	e0bf9517 	ldw	r2,-428(fp)
   3fa2c:	11000417 	ldw	r4,16(r2)
   3fa30:	11400517 	ldw	r5,20(r2)
   3fa34:	e1bf7d17 	ldw	r6,-524(fp)
   3fa38:	e1ff7e17 	ldw	r7,-520(fp)
   3fa3c:	2185883a 	add	r2,r4,r6
   3fa40:	1111803a 	cmpltu	r8,r2,r4
   3fa44:	29c7883a 	add	r3,r5,r7
   3fa48:	40c9883a 	add	r4,r8,r3
   3fa4c:	2007883a 	mov	r3,r4
   3fa50:	1009883a 	mov	r4,r2
   3fa54:	180b883a 	mov	r5,r3
   3fa58:	e0bf9517 	ldw	r2,-428(fp)
   3fa5c:	11000415 	stw	r4,16(r2)
   3fa60:	11400515 	stw	r5,20(r2)
    context->state[3] += d;
   3fa64:	e0bf9517 	ldw	r2,-428(fp)
   3fa68:	11000617 	ldw	r4,24(r2)
   3fa6c:	11400717 	ldw	r5,28(r2)
   3fa70:	e1bf7f17 	ldw	r6,-516(fp)
   3fa74:	e1ff8017 	ldw	r7,-512(fp)
   3fa78:	2185883a 	add	r2,r4,r6
   3fa7c:	1111803a 	cmpltu	r8,r2,r4
   3fa80:	29c7883a 	add	r3,r5,r7
   3fa84:	40c9883a 	add	r4,r8,r3
   3fa88:	2007883a 	mov	r3,r4
   3fa8c:	1009883a 	mov	r4,r2
   3fa90:	180b883a 	mov	r5,r3
   3fa94:	e0bf9517 	ldw	r2,-428(fp)
   3fa98:	11000615 	stw	r4,24(r2)
   3fa9c:	11400715 	stw	r5,28(r2)
    context->state[4] += e;
   3faa0:	e0bf9517 	ldw	r2,-428(fp)
   3faa4:	11000817 	ldw	r4,32(r2)
   3faa8:	11400917 	ldw	r5,36(r2)
   3faac:	e1bf8117 	ldw	r6,-508(fp)
   3fab0:	e1ff8217 	ldw	r7,-504(fp)
   3fab4:	2185883a 	add	r2,r4,r6
   3fab8:	1111803a 	cmpltu	r8,r2,r4
   3fabc:	29c7883a 	add	r3,r5,r7
   3fac0:	40c9883a 	add	r4,r8,r3
   3fac4:	2007883a 	mov	r3,r4
   3fac8:	1009883a 	mov	r4,r2
   3facc:	180b883a 	mov	r5,r3
   3fad0:	e0bf9517 	ldw	r2,-428(fp)
   3fad4:	11000815 	stw	r4,32(r2)
   3fad8:	11400915 	stw	r5,36(r2)
    context->state[5] += f;
   3fadc:	e0bf9517 	ldw	r2,-428(fp)
   3fae0:	11000a17 	ldw	r4,40(r2)
   3fae4:	11400b17 	ldw	r5,44(r2)
   3fae8:	e1bf8317 	ldw	r6,-500(fp)
   3faec:	e1ff8417 	ldw	r7,-496(fp)
   3faf0:	2185883a 	add	r2,r4,r6
   3faf4:	1111803a 	cmpltu	r8,r2,r4
   3faf8:	29c7883a 	add	r3,r5,r7
   3fafc:	40c9883a 	add	r4,r8,r3
   3fb00:	2007883a 	mov	r3,r4
   3fb04:	1009883a 	mov	r4,r2
   3fb08:	180b883a 	mov	r5,r3
   3fb0c:	e0bf9517 	ldw	r2,-428(fp)
   3fb10:	11000a15 	stw	r4,40(r2)
   3fb14:	11400b15 	stw	r5,44(r2)
    context->state[6] += g;
   3fb18:	e0bf9517 	ldw	r2,-428(fp)
   3fb1c:	11000c17 	ldw	r4,48(r2)
   3fb20:	11400d17 	ldw	r5,52(r2)
   3fb24:	e1bf8517 	ldw	r6,-492(fp)
   3fb28:	e1ff8617 	ldw	r7,-488(fp)
   3fb2c:	2185883a 	add	r2,r4,r6
   3fb30:	1111803a 	cmpltu	r8,r2,r4
   3fb34:	29c7883a 	add	r3,r5,r7
   3fb38:	40c9883a 	add	r4,r8,r3
   3fb3c:	2007883a 	mov	r3,r4
   3fb40:	1009883a 	mov	r4,r2
   3fb44:	180b883a 	mov	r5,r3
   3fb48:	e0bf9517 	ldw	r2,-428(fp)
   3fb4c:	11000c15 	stw	r4,48(r2)
   3fb50:	11400d15 	stw	r5,52(r2)
    context->state[7] += h;
   3fb54:	e0bf9517 	ldw	r2,-428(fp)
   3fb58:	11000e17 	ldw	r4,56(r2)
   3fb5c:	11400f17 	ldw	r5,60(r2)
   3fb60:	e1bf8717 	ldw	r6,-484(fp)
   3fb64:	e1ff8817 	ldw	r7,-480(fp)
   3fb68:	2185883a 	add	r2,r4,r6
   3fb6c:	1111803a 	cmpltu	r8,r2,r4
   3fb70:	29c7883a 	add	r3,r5,r7
   3fb74:	40c9883a 	add	r4,r8,r3
   3fb78:	2007883a 	mov	r3,r4
   3fb7c:	1009883a 	mov	r4,r2
   3fb80:	180b883a 	mov	r5,r3
   3fb84:	e0bf9517 	ldw	r2,-428(fp)
   3fb88:	11000e15 	stw	r4,56(r2)
   3fb8c:	11400f15 	stw	r5,60(r2)

    /* Clean up */
    a = b = c = d = e = f = g = h = T1 = T2 = 0;
   3fb90:	e03f8f15 	stw	zero,-452(fp)
   3fb94:	e03f9015 	stw	zero,-448(fp)
   3fb98:	e0bf8f17 	ldw	r2,-452(fp)
   3fb9c:	e0bf8d15 	stw	r2,-460(fp)
   3fba0:	e0bf9017 	ldw	r2,-448(fp)
   3fba4:	e0bf8e15 	stw	r2,-456(fp)
   3fba8:	e0bf8d17 	ldw	r2,-460(fp)
   3fbac:	e0bf8715 	stw	r2,-484(fp)
   3fbb0:	e0bf8e17 	ldw	r2,-456(fp)
   3fbb4:	e0bf8815 	stw	r2,-480(fp)
   3fbb8:	e0bf8717 	ldw	r2,-484(fp)
   3fbbc:	e0bf8515 	stw	r2,-492(fp)
   3fbc0:	e0bf8817 	ldw	r2,-480(fp)
   3fbc4:	e0bf8615 	stw	r2,-488(fp)
   3fbc8:	e0bf8517 	ldw	r2,-492(fp)
   3fbcc:	e0bf8315 	stw	r2,-500(fp)
   3fbd0:	e0bf8617 	ldw	r2,-488(fp)
   3fbd4:	e0bf8415 	stw	r2,-496(fp)
   3fbd8:	e0bf8317 	ldw	r2,-500(fp)
   3fbdc:	e0bf8115 	stw	r2,-508(fp)
   3fbe0:	e0bf8417 	ldw	r2,-496(fp)
   3fbe4:	e0bf8215 	stw	r2,-504(fp)
   3fbe8:	e0bf8117 	ldw	r2,-508(fp)
   3fbec:	e0bf7f15 	stw	r2,-516(fp)
   3fbf0:	e0bf8217 	ldw	r2,-504(fp)
   3fbf4:	e0bf8015 	stw	r2,-512(fp)
   3fbf8:	e0bf7f17 	ldw	r2,-516(fp)
   3fbfc:	e0bf7d15 	stw	r2,-524(fp)
   3fc00:	e0bf8017 	ldw	r2,-512(fp)
   3fc04:	e0bf7e15 	stw	r2,-520(fp)
   3fc08:	e0bf7d17 	ldw	r2,-524(fp)
   3fc0c:	e0bf7b15 	stw	r2,-532(fp)
   3fc10:	e0bf7e17 	ldw	r2,-520(fp)
   3fc14:	e0bf7c15 	stw	r2,-528(fp)
   3fc18:	e0bf7b17 	ldw	r2,-532(fp)
   3fc1c:	e0bf7915 	stw	r2,-540(fp)
   3fc20:	e0bf7c17 	ldw	r2,-528(fp)
   3fc24:	e0bf7a15 	stw	r2,-536(fp)
}
   3fc28:	0001883a 	nop
   3fc2c:	e6fff904 	addi	sp,fp,-28
   3fc30:	df000717 	ldw	fp,28(sp)
   3fc34:	dd800617 	ldw	r22,24(sp)
   3fc38:	dd400517 	ldw	r21,20(sp)
   3fc3c:	dd000417 	ldw	r20,16(sp)
   3fc40:	dcc00317 	ldw	r19,12(sp)
   3fc44:	dc800217 	ldw	r18,8(sp)
   3fc48:	dc400117 	ldw	r17,4(sp)
   3fc4c:	dc000017 	ldw	r16,0(sp)
   3fc50:	dec00804 	addi	sp,sp,32
   3fc54:	f800283a 	ret

0003fc58 <sha512_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha512_Update(SHA512_CTX* context, const sha2_byte* data, size_t len)
{
   3fc58:	deffed04 	addi	sp,sp,-76
   3fc5c:	dfc01215 	stw	ra,72(sp)
   3fc60:	df001115 	stw	fp,68(sp)
   3fc64:	ddc01015 	stw	r23,64(sp)
   3fc68:	dd800f15 	stw	r22,60(sp)
   3fc6c:	dd400e15 	stw	r21,56(sp)
   3fc70:	dd000d15 	stw	r20,52(sp)
   3fc74:	dcc00c15 	stw	r19,48(sp)
   3fc78:	dc800b15 	stw	r18,44(sp)
   3fc7c:	dc400a15 	stw	r17,40(sp)
   3fc80:	dc000915 	stw	r16,36(sp)
   3fc84:	df001104 	addi	fp,sp,68
   3fc88:	e13ff115 	stw	r4,-60(fp)
   3fc8c:	e17ff215 	stw	r5,-56(fp)
   3fc90:	e1bff315 	stw	r6,-52(fp)
    unsigned int freespace, usedspace;

    if (len == 0) {
   3fc94:	e0bff317 	ldw	r2,-52(fp)
   3fc98:	1000f426 	beq	r2,zero,4006c <sha512_Update+0x414>
        /* Calling with no data is valid - we do nothing */
        return;
    }

    usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
   3fc9c:	e13ff117 	ldw	r4,-60(fp)
   3fca0:	20801017 	ldw	r2,64(r4)
   3fca4:	20c01117 	ldw	r3,68(r4)
   3fca8:	1808977a 	slli	r4,r3,29
   3fcac:	100ed0fa 	srli	r7,r2,3
   3fcb0:	21ceb03a 	or	r7,r4,r7
   3fcb4:	1810d0fa 	srli	r8,r3,3
   3fcb8:	3805883a 	mov	r2,r7
   3fcbc:	10801fcc 	andi	r2,r2,127
   3fcc0:	e0bfef15 	stw	r2,-68(fp)
    if (usedspace > 0) {
   3fcc4:	e0bfef17 	ldw	r2,-68(fp)
   3fcc8:	1000af26 	beq	r2,zero,3ff88 <sha512_Update+0x330>
        /* Calculate how much free space is available in the buffer */
        freespace = SHA512_BLOCK_LENGTH - usedspace;
   3fccc:	00c02004 	movi	r3,128
   3fcd0:	e0bfef17 	ldw	r2,-68(fp)
   3fcd4:	1885c83a 	sub	r2,r3,r2
   3fcd8:	e0bff015 	stw	r2,-64(fp)

        if (len >= freespace) {
   3fcdc:	e0fff317 	ldw	r3,-52(fp)
   3fce0:	e0bff017 	ldw	r2,-64(fp)
   3fce4:	18804236 	bltu	r3,r2,3fdf0 <sha512_Update+0x198>
            /* Fill the buffer completely and process it */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, freespace);
   3fce8:	e0bfef17 	ldw	r2,-68(fp)
   3fcec:	10801404 	addi	r2,r2,80
   3fcf0:	e0fff117 	ldw	r3,-60(fp)
   3fcf4:	1885883a 	add	r2,r3,r2
   3fcf8:	e1bff017 	ldw	r6,-64(fp)
   3fcfc:	e17ff217 	ldw	r5,-56(fp)
   3fd00:	1009883a 	mov	r4,r2
   3fd04:	0045c980 	call	45c98 <memcpy>
            ADDINC128(context->bitcount, freespace << 3);
   3fd08:	e0bff117 	ldw	r2,-60(fp)
   3fd0c:	11001017 	ldw	r4,64(r2)
   3fd10:	11401117 	ldw	r5,68(r2)
   3fd14:	e0bff017 	ldw	r2,-64(fp)
   3fd18:	100490fa 	slli	r2,r2,3
   3fd1c:	e0bff615 	stw	r2,-40(fp)
   3fd20:	e03ff715 	stw	zero,-36(fp)
   3fd24:	e1bff617 	ldw	r6,-40(fp)
   3fd28:	2185883a 	add	r2,r4,r6
   3fd2c:	110d803a 	cmpltu	r6,r2,r4
   3fd30:	e1fff717 	ldw	r7,-36(fp)
   3fd34:	29c7883a 	add	r3,r5,r7
   3fd38:	30c9883a 	add	r4,r6,r3
   3fd3c:	2007883a 	mov	r3,r4
   3fd40:	1009883a 	mov	r4,r2
   3fd44:	180b883a 	mov	r5,r3
   3fd48:	e0bff117 	ldw	r2,-60(fp)
   3fd4c:	11001015 	stw	r4,64(r2)
   3fd50:	11401115 	stw	r5,68(r2)
   3fd54:	e13ff117 	ldw	r4,-60(fp)
   3fd58:	20801017 	ldw	r2,64(r4)
   3fd5c:	20c01117 	ldw	r3,68(r4)
   3fd60:	e13ff017 	ldw	r4,-64(fp)
   3fd64:	200890fa 	slli	r4,r4,3
   3fd68:	2029883a 	mov	r20,r4
   3fd6c:	002b883a 	mov	r21,zero
   3fd70:	1d400236 	bltu	r3,r21,3fd7c <sha512_Update+0x124>
   3fd74:	a8c0101e 	bne	r21,r3,3fdb8 <sha512_Update+0x160>
   3fd78:	15000f2e 	bgeu	r2,r20,3fdb8 <sha512_Update+0x160>
   3fd7c:	e0bff117 	ldw	r2,-60(fp)
   3fd80:	11001217 	ldw	r4,72(r2)
   3fd84:	11401317 	ldw	r5,76(r2)
   3fd88:	01800044 	movi	r6,1
   3fd8c:	000f883a 	mov	r7,zero
   3fd90:	2185883a 	add	r2,r4,r6
   3fd94:	1111803a 	cmpltu	r8,r2,r4
   3fd98:	29c7883a 	add	r3,r5,r7
   3fd9c:	40c9883a 	add	r4,r8,r3
   3fda0:	2007883a 	mov	r3,r4
   3fda4:	1009883a 	mov	r4,r2
   3fda8:	180b883a 	mov	r5,r3
   3fdac:	e0bff117 	ldw	r2,-60(fp)
   3fdb0:	11001215 	stw	r4,72(r2)
   3fdb4:	11401315 	stw	r5,76(r2)
            len -= freespace;
   3fdb8:	e0fff317 	ldw	r3,-52(fp)
   3fdbc:	e0bff017 	ldw	r2,-64(fp)
   3fdc0:	1885c83a 	sub	r2,r3,r2
   3fdc4:	e0bff315 	stw	r2,-52(fp)
            data += freespace;
   3fdc8:	e0fff217 	ldw	r3,-56(fp)
   3fdcc:	e0bff017 	ldw	r2,-64(fp)
   3fdd0:	1885883a 	add	r2,r3,r2
   3fdd4:	e0bff215 	stw	r2,-56(fp)
            sha512_Transform(context, (sha2_word64*)context->buffer);
   3fdd8:	e0bff117 	ldw	r2,-60(fp)
   3fddc:	10801404 	addi	r2,r2,80
   3fde0:	100b883a 	mov	r5,r2
   3fde4:	e13ff117 	ldw	r4,-60(fp)
   3fde8:	003ebf80 	call	3ebf8 <sha512_Transform>
   3fdec:	00006606 	br	3ff88 <sha512_Update+0x330>
        } else {
            /* The buffer is not yet full */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, len);
   3fdf0:	e0bfef17 	ldw	r2,-68(fp)
   3fdf4:	10801404 	addi	r2,r2,80
   3fdf8:	e0fff117 	ldw	r3,-60(fp)
   3fdfc:	1885883a 	add	r2,r3,r2
   3fe00:	e1bff317 	ldw	r6,-52(fp)
   3fe04:	e17ff217 	ldw	r5,-56(fp)
   3fe08:	1009883a 	mov	r4,r2
   3fe0c:	0045c980 	call	45c98 <memcpy>
            ADDINC128(context->bitcount, len << 3);
   3fe10:	e0bff117 	ldw	r2,-60(fp)
   3fe14:	11001017 	ldw	r4,64(r2)
   3fe18:	11401117 	ldw	r5,68(r2)
   3fe1c:	e0bff317 	ldw	r2,-52(fp)
   3fe20:	100490fa 	slli	r2,r2,3
   3fe24:	e0bff415 	stw	r2,-48(fp)
   3fe28:	e03ff515 	stw	zero,-44(fp)
   3fe2c:	e1bff417 	ldw	r6,-48(fp)
   3fe30:	2185883a 	add	r2,r4,r6
   3fe34:	110d803a 	cmpltu	r6,r2,r4
   3fe38:	e1fff517 	ldw	r7,-44(fp)
   3fe3c:	29c7883a 	add	r3,r5,r7
   3fe40:	30c9883a 	add	r4,r6,r3
   3fe44:	2007883a 	mov	r3,r4
   3fe48:	1009883a 	mov	r4,r2
   3fe4c:	180b883a 	mov	r5,r3
   3fe50:	e0bff117 	ldw	r2,-60(fp)
   3fe54:	11001015 	stw	r4,64(r2)
   3fe58:	11401115 	stw	r5,68(r2)
   3fe5c:	e13ff117 	ldw	r4,-60(fp)
   3fe60:	20801017 	ldw	r2,64(r4)
   3fe64:	20c01117 	ldw	r3,68(r4)
   3fe68:	e13ff317 	ldw	r4,-52(fp)
   3fe6c:	200890fa 	slli	r4,r4,3
   3fe70:	2025883a 	mov	r18,r4
   3fe74:	0027883a 	mov	r19,zero
   3fe78:	1cc00236 	bltu	r3,r19,3fe84 <sha512_Update+0x22c>
   3fe7c:	98c0101e 	bne	r19,r3,3fec0 <sha512_Update+0x268>
   3fe80:	14800f2e 	bgeu	r2,r18,3fec0 <sha512_Update+0x268>
   3fe84:	e0bff117 	ldw	r2,-60(fp)
   3fe88:	11001217 	ldw	r4,72(r2)
   3fe8c:	11401317 	ldw	r5,76(r2)
   3fe90:	01800044 	movi	r6,1
   3fe94:	000f883a 	mov	r7,zero
   3fe98:	2185883a 	add	r2,r4,r6
   3fe9c:	1111803a 	cmpltu	r8,r2,r4
   3fea0:	29c7883a 	add	r3,r5,r7
   3fea4:	40c9883a 	add	r4,r8,r3
   3fea8:	2007883a 	mov	r3,r4
   3feac:	1009883a 	mov	r4,r2
   3feb0:	180b883a 	mov	r5,r3
   3feb4:	e0bff117 	ldw	r2,-60(fp)
   3feb8:	11001215 	stw	r4,72(r2)
   3febc:	11401315 	stw	r5,76(r2)
            /* Clean up: */
            usedspace = freespace = 0;
   3fec0:	e03ff015 	stw	zero,-64(fp)
   3fec4:	e0bff017 	ldw	r2,-64(fp)
   3fec8:	e0bfef15 	stw	r2,-68(fp)
            return;
   3fecc:	00006806 	br	40070 <sha512_Update+0x418>
        }
    }
    while (len >= SHA512_BLOCK_LENGTH) {
        /* Process as many complete blocks as we can */
        sha512_Transform(context, (const sha2_word64*)data);
   3fed0:	e17ff217 	ldw	r5,-56(fp)
   3fed4:	e13ff117 	ldw	r4,-60(fp)
   3fed8:	003ebf80 	call	3ebf8 <sha512_Transform>
        ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
   3fedc:	e0bff117 	ldw	r2,-60(fp)
   3fee0:	11001017 	ldw	r4,64(r2)
   3fee4:	11401117 	ldw	r5,68(r2)
   3fee8:	01810004 	movi	r6,1024
   3feec:	000f883a 	mov	r7,zero
   3fef0:	2185883a 	add	r2,r4,r6
   3fef4:	1111803a 	cmpltu	r8,r2,r4
   3fef8:	29c7883a 	add	r3,r5,r7
   3fefc:	40c9883a 	add	r4,r8,r3
   3ff00:	2007883a 	mov	r3,r4
   3ff04:	1009883a 	mov	r4,r2
   3ff08:	180b883a 	mov	r5,r3
   3ff0c:	e0bff117 	ldw	r2,-60(fp)
   3ff10:	11001015 	stw	r4,64(r2)
   3ff14:	11401115 	stw	r5,68(r2)
   3ff18:	e13ff117 	ldw	r4,-60(fp)
   3ff1c:	20801017 	ldw	r2,64(r4)
   3ff20:	20c01117 	ldw	r3,68(r4)
   3ff24:	1800121e 	bne	r3,zero,3ff70 <sha512_Update+0x318>
   3ff28:	1800021e 	bne	r3,zero,3ff34 <sha512_Update+0x2dc>
   3ff2c:	10810028 	cmpgeui	r2,r2,1024
   3ff30:	10000f1e 	bne	r2,zero,3ff70 <sha512_Update+0x318>
   3ff34:	e0bff117 	ldw	r2,-60(fp)
   3ff38:	11001217 	ldw	r4,72(r2)
   3ff3c:	11401317 	ldw	r5,76(r2)
   3ff40:	01800044 	movi	r6,1
   3ff44:	000f883a 	mov	r7,zero
   3ff48:	2185883a 	add	r2,r4,r6
   3ff4c:	1111803a 	cmpltu	r8,r2,r4
   3ff50:	29c7883a 	add	r3,r5,r7
   3ff54:	40c9883a 	add	r4,r8,r3
   3ff58:	2007883a 	mov	r3,r4
   3ff5c:	1009883a 	mov	r4,r2
   3ff60:	180b883a 	mov	r5,r3
   3ff64:	e0bff117 	ldw	r2,-60(fp)
   3ff68:	11001215 	stw	r4,72(r2)
   3ff6c:	11401315 	stw	r5,76(r2)
        len -= SHA512_BLOCK_LENGTH;
   3ff70:	e0bff317 	ldw	r2,-52(fp)
   3ff74:	10bfe004 	addi	r2,r2,-128
   3ff78:	e0bff315 	stw	r2,-52(fp)
        data += SHA512_BLOCK_LENGTH;
   3ff7c:	e0bff217 	ldw	r2,-56(fp)
   3ff80:	10802004 	addi	r2,r2,128
   3ff84:	e0bff215 	stw	r2,-56(fp)
            /* Clean up: */
            usedspace = freespace = 0;
            return;
        }
    }
    while (len >= SHA512_BLOCK_LENGTH) {
   3ff88:	e0bff317 	ldw	r2,-52(fp)
   3ff8c:	10802028 	cmpgeui	r2,r2,128
   3ff90:	103fcf1e 	bne	r2,zero,3fed0 <__alt_mem_epcs_flash_controller+0xfe02eed0>
        sha512_Transform(context, (const sha2_word64*)data);
        ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
        len -= SHA512_BLOCK_LENGTH;
        data += SHA512_BLOCK_LENGTH;
    }
    if (len > 0) {
   3ff94:	e0bff317 	ldw	r2,-52(fp)
   3ff98:	10003026 	beq	r2,zero,4005c <sha512_Update+0x404>
        /* There's left-overs, so save 'em */
        MEMCPY_BCOPY(context->buffer, data, len);
   3ff9c:	e0bff117 	ldw	r2,-60(fp)
   3ffa0:	10801404 	addi	r2,r2,80
   3ffa4:	e1bff317 	ldw	r6,-52(fp)
   3ffa8:	e17ff217 	ldw	r5,-56(fp)
   3ffac:	1009883a 	mov	r4,r2
   3ffb0:	0045c980 	call	45c98 <memcpy>
        ADDINC128(context->bitcount, len << 3);
   3ffb4:	e0bff117 	ldw	r2,-60(fp)
   3ffb8:	11001017 	ldw	r4,64(r2)
   3ffbc:	11401117 	ldw	r5,68(r2)
   3ffc0:	e0bff317 	ldw	r2,-52(fp)
   3ffc4:	100490fa 	slli	r2,r2,3
   3ffc8:	102d883a 	mov	r22,r2
   3ffcc:	002f883a 	mov	r23,zero
   3ffd0:	2585883a 	add	r2,r4,r22
   3ffd4:	110d803a 	cmpltu	r6,r2,r4
   3ffd8:	2dc7883a 	add	r3,r5,r23
   3ffdc:	30c9883a 	add	r4,r6,r3
   3ffe0:	2007883a 	mov	r3,r4
   3ffe4:	1009883a 	mov	r4,r2
   3ffe8:	180b883a 	mov	r5,r3
   3ffec:	e0bff117 	ldw	r2,-60(fp)
   3fff0:	11001015 	stw	r4,64(r2)
   3fff4:	11401115 	stw	r5,68(r2)
   3fff8:	e13ff117 	ldw	r4,-60(fp)
   3fffc:	20801017 	ldw	r2,64(r4)
   40000:	20c01117 	ldw	r3,68(r4)
   40004:	e13ff317 	ldw	r4,-52(fp)
   40008:	200890fa 	slli	r4,r4,3
   4000c:	2021883a 	mov	r16,r4
   40010:	0023883a 	mov	r17,zero
   40014:	1c400236 	bltu	r3,r17,40020 <sha512_Update+0x3c8>
   40018:	88c0101e 	bne	r17,r3,4005c <sha512_Update+0x404>
   4001c:	14000f2e 	bgeu	r2,r16,4005c <sha512_Update+0x404>
   40020:	e0bff117 	ldw	r2,-60(fp)
   40024:	11001217 	ldw	r4,72(r2)
   40028:	11401317 	ldw	r5,76(r2)
   4002c:	01800044 	movi	r6,1
   40030:	000f883a 	mov	r7,zero
   40034:	2185883a 	add	r2,r4,r6
   40038:	1111803a 	cmpltu	r8,r2,r4
   4003c:	29c7883a 	add	r3,r5,r7
   40040:	40c9883a 	add	r4,r8,r3
   40044:	2007883a 	mov	r3,r4
   40048:	1009883a 	mov	r4,r2
   4004c:	180b883a 	mov	r5,r3
   40050:	e0bff117 	ldw	r2,-60(fp)
   40054:	11001215 	stw	r4,72(r2)
   40058:	11401315 	stw	r5,76(r2)
    }
    /* Clean up: */
    usedspace = freespace = 0;
   4005c:	e03ff015 	stw	zero,-64(fp)
   40060:	e0bff017 	ldw	r2,-64(fp)
   40064:	e0bfef15 	stw	r2,-68(fp)
   40068:	00000106 	br	40070 <sha512_Update+0x418>
{
    unsigned int freespace, usedspace;

    if (len == 0) {
        /* Calling with no data is valid - we do nothing */
        return;
   4006c:	0001883a 	nop
        MEMCPY_BCOPY(context->buffer, data, len);
        ADDINC128(context->bitcount, len << 3);
    }
    /* Clean up: */
    usedspace = freespace = 0;
}
   40070:	e6fff804 	addi	sp,fp,-32
   40074:	dfc00917 	ldw	ra,36(sp)
   40078:	df000817 	ldw	fp,32(sp)
   4007c:	ddc00717 	ldw	r23,28(sp)
   40080:	dd800617 	ldw	r22,24(sp)
   40084:	dd400517 	ldw	r21,20(sp)
   40088:	dd000417 	ldw	r20,16(sp)
   4008c:	dcc00317 	ldw	r19,12(sp)
   40090:	dc800217 	ldw	r18,8(sp)
   40094:	dc400117 	ldw	r17,4(sp)
   40098:	dc000017 	ldw	r16,0(sp)
   4009c:	dec00a04 	addi	sp,sp,40
   400a0:	f800283a 	ret

000400a4 <sha512_Last>:

void sha512_Last(SHA512_CTX* context)
{
   400a4:	deffd804 	addi	sp,sp,-160
   400a8:	dfc02715 	stw	ra,156(sp)
   400ac:	df002615 	stw	fp,152(sp)
   400b0:	dd802515 	stw	r22,148(sp)
   400b4:	dd402415 	stw	r21,144(sp)
   400b8:	dd002315 	stw	r20,140(sp)
   400bc:	dcc02215 	stw	r19,136(sp)
   400c0:	dc802115 	stw	r18,132(sp)
   400c4:	dc402015 	stw	r17,128(sp)
   400c8:	dc001f15 	stw	r16,124(sp)
   400cc:	df002604 	addi	fp,sp,152
   400d0:	e13fe015 	stw	r4,-128(fp)
    unsigned int usedspace;
    sha2_word64* t;

    usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
   400d4:	e13fe017 	ldw	r4,-128(fp)
   400d8:	20801017 	ldw	r2,64(r4)
   400dc:	20c01117 	ldw	r3,68(r4)
   400e0:	1808977a 	slli	r4,r3,29
   400e4:	100ad0fa 	srli	r5,r2,3
   400e8:	214ab03a 	or	r5,r4,r5
   400ec:	180cd0fa 	srli	r6,r3,3
   400f0:	2805883a 	mov	r2,r5
   400f4:	10801fcc 	andi	r2,r2,127
   400f8:	e0bfda15 	stw	r2,-152(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
    /* Convert FROM host byte order */
    REVERSE64(context->bitcount[0], context->bitcount[0]);
   400fc:	e0ffe017 	ldw	r3,-128(fp)
   40100:	18801017 	ldw	r2,64(r3)
   40104:	e0bfdb15 	stw	r2,-148(fp)
   40108:	18801117 	ldw	r2,68(r3)
   4010c:	e0bfdc15 	stw	r2,-144(fp)
   40110:	e1ffdc17 	ldw	r7,-144(fp)
   40114:	e23fdb17 	ldw	r8,-148(fp)
   40118:	e1ffdb15 	stw	r7,-148(fp)
   4011c:	e23fdc15 	stw	r8,-144(fp)
   40120:	e0ffdb17 	ldw	r3,-148(fp)
   40124:	00bfc074 	movhi	r2,65281
   40128:	10bfc004 	addi	r2,r2,-256
   4012c:	1892703a 	and	r9,r3,r2
   40130:	e0ffdc17 	ldw	r3,-144(fp)
   40134:	00bfc074 	movhi	r2,65281
   40138:	10bfc004 	addi	r2,r2,-256
   4013c:	1894703a 	and	r10,r3,r2
   40140:	5004963a 	slli	r2,r10,24
   40144:	4806d23a 	srli	r3,r9,8
   40148:	e0ffe115 	stw	r3,-124(fp)
   4014c:	e0ffe117 	ldw	r3,-124(fp)
   40150:	10c4b03a 	or	r2,r2,r3
   40154:	e0bfe115 	stw	r2,-124(fp)
   40158:	5004d23a 	srli	r2,r10,8
   4015c:	e0bfe215 	stw	r2,-120(fp)
   40160:	e0ffdb17 	ldw	r3,-148(fp)
   40164:	00803ff4 	movhi	r2,255
   40168:	10803fc4 	addi	r2,r2,255
   4016c:	189a703a 	and	r13,r3,r2
   40170:	e0ffdc17 	ldw	r3,-144(fp)
   40174:	00803ff4 	movhi	r2,255
   40178:	10803fc4 	addi	r2,r2,255
   4017c:	189c703a 	and	r14,r3,r2
   40180:	6804d63a 	srli	r2,r13,24
   40184:	7018923a 	slli	r12,r14,8
   40188:	1318b03a 	or	r12,r2,r12
   4018c:	6816923a 	slli	r11,r13,8
   40190:	e0ffe117 	ldw	r3,-124(fp)
   40194:	1ac4b03a 	or	r2,r3,r11
   40198:	e0bfdb15 	stw	r2,-148(fp)
   4019c:	e0ffe217 	ldw	r3,-120(fp)
   401a0:	1b04b03a 	or	r2,r3,r12
   401a4:	e0bfdc15 	stw	r2,-144(fp)
   401a8:	e0bfdb17 	ldw	r2,-148(fp)
   401ac:	10bfffec 	andhi	r2,r2,65535
   401b0:	e0bfe315 	stw	r2,-116(fp)
   401b4:	e0bfdc17 	ldw	r2,-144(fp)
   401b8:	10bfffec 	andhi	r2,r2,65535
   401bc:	e0bfe415 	stw	r2,-112(fp)
   401c0:	e0ffe417 	ldw	r3,-112(fp)
   401c4:	1804943a 	slli	r2,r3,16
   401c8:	e0ffe317 	ldw	r3,-116(fp)
   401cc:	1806d43a 	srli	r3,r3,16
   401d0:	e0ffe515 	stw	r3,-108(fp)
   401d4:	e0ffe517 	ldw	r3,-108(fp)
   401d8:	10c4b03a 	or	r2,r2,r3
   401dc:	e0bfe515 	stw	r2,-108(fp)
   401e0:	e0bfe417 	ldw	r2,-112(fp)
   401e4:	1004d43a 	srli	r2,r2,16
   401e8:	e0bfe615 	stw	r2,-104(fp)
   401ec:	e0bfdb17 	ldw	r2,-148(fp)
   401f0:	10bfffcc 	andi	r2,r2,65535
   401f4:	e0bfe715 	stw	r2,-100(fp)
   401f8:	e0bfdc17 	ldw	r2,-144(fp)
   401fc:	10bfffcc 	andi	r2,r2,65535
   40200:	e0bfe815 	stw	r2,-96(fp)
   40204:	e0ffe717 	ldw	r3,-100(fp)
   40208:	1804d43a 	srli	r2,r3,16
   4020c:	e0ffe817 	ldw	r3,-96(fp)
   40210:	1806943a 	slli	r3,r3,16
   40214:	e0ffea15 	stw	r3,-88(fp)
   40218:	e0ffea17 	ldw	r3,-88(fp)
   4021c:	10c4b03a 	or	r2,r2,r3
   40220:	e0bfea15 	stw	r2,-88(fp)
   40224:	e0bfe717 	ldw	r2,-100(fp)
   40228:	1004943a 	slli	r2,r2,16
   4022c:	e0bfe915 	stw	r2,-92(fp)
   40230:	e0ffe517 	ldw	r3,-108(fp)
   40234:	e0bfe917 	ldw	r2,-92(fp)
   40238:	1886b03a 	or	r3,r3,r2
   4023c:	e0ffeb15 	stw	r3,-84(fp)
   40240:	e0ffe617 	ldw	r3,-104(fp)
   40244:	e0bfea17 	ldw	r2,-88(fp)
   40248:	1886b03a 	or	r3,r3,r2
   4024c:	e0ffec15 	stw	r3,-80(fp)
   40250:	e0bfe017 	ldw	r2,-128(fp)
   40254:	e0ffeb17 	ldw	r3,-84(fp)
   40258:	10c01015 	stw	r3,64(r2)
   4025c:	e0ffec17 	ldw	r3,-80(fp)
   40260:	10c01115 	stw	r3,68(r2)
    REVERSE64(context->bitcount[1], context->bitcount[1]);
   40264:	e0bfe017 	ldw	r2,-128(fp)
   40268:	10c01217 	ldw	r3,72(r2)
   4026c:	e0ffdd15 	stw	r3,-140(fp)
   40270:	10801317 	ldw	r2,76(r2)
   40274:	e0bfde15 	stw	r2,-136(fp)
   40278:	e0bfde17 	ldw	r2,-136(fp)
   4027c:	e0bff715 	stw	r2,-36(fp)
   40280:	e0ffdd17 	ldw	r3,-140(fp)
   40284:	e0fff815 	stw	r3,-32(fp)
   40288:	e0bff717 	ldw	r2,-36(fp)
   4028c:	e0bfdd15 	stw	r2,-140(fp)
   40290:	e0fff817 	ldw	r3,-32(fp)
   40294:	e0ffde15 	stw	r3,-136(fp)
   40298:	e0ffdd17 	ldw	r3,-140(fp)
   4029c:	00bfc074 	movhi	r2,65281
   402a0:	10bfc004 	addi	r2,r2,-256
   402a4:	1884703a 	and	r2,r3,r2
   402a8:	e0bfed15 	stw	r2,-76(fp)
   402ac:	e0ffde17 	ldw	r3,-136(fp)
   402b0:	00bfc074 	movhi	r2,65281
   402b4:	10bfc004 	addi	r2,r2,-256
   402b8:	1884703a 	and	r2,r3,r2
   402bc:	e0bfee15 	stw	r2,-72(fp)
   402c0:	e0ffee17 	ldw	r3,-72(fp)
   402c4:	1804963a 	slli	r2,r3,24
   402c8:	e0ffed17 	ldw	r3,-76(fp)
   402cc:	182ad23a 	srli	r21,r3,8
   402d0:	156ab03a 	or	r21,r2,r21
   402d4:	e0bfee17 	ldw	r2,-72(fp)
   402d8:	102cd23a 	srli	r22,r2,8
   402dc:	e0ffdd17 	ldw	r3,-140(fp)
   402e0:	00803ff4 	movhi	r2,255
   402e4:	10803fc4 	addi	r2,r2,255
   402e8:	1884703a 	and	r2,r3,r2
   402ec:	e0bfef15 	stw	r2,-68(fp)
   402f0:	e0ffde17 	ldw	r3,-136(fp)
   402f4:	00803ff4 	movhi	r2,255
   402f8:	10803fc4 	addi	r2,r2,255
   402fc:	1884703a 	and	r2,r3,r2
   40300:	e0bff015 	stw	r2,-64(fp)
   40304:	e0ffef17 	ldw	r3,-68(fp)
   40308:	1804d63a 	srli	r2,r3,24
   4030c:	e0fff017 	ldw	r3,-64(fp)
   40310:	1828923a 	slli	r20,r3,8
   40314:	1528b03a 	or	r20,r2,r20
   40318:	e0bfef17 	ldw	r2,-68(fp)
   4031c:	1026923a 	slli	r19,r2,8
   40320:	acc4b03a 	or	r2,r21,r19
   40324:	e0bfdd15 	stw	r2,-140(fp)
   40328:	b504b03a 	or	r2,r22,r20
   4032c:	e0bfde15 	stw	r2,-136(fp)
   40330:	e0bfdd17 	ldw	r2,-140(fp)
   40334:	10bfffec 	andhi	r2,r2,65535
   40338:	e0bff115 	stw	r2,-60(fp)
   4033c:	e0bfde17 	ldw	r2,-136(fp)
   40340:	10bfffec 	andhi	r2,r2,65535
   40344:	e0bff215 	stw	r2,-56(fp)
   40348:	e0fff217 	ldw	r3,-56(fp)
   4034c:	1804943a 	slli	r2,r3,16
   40350:	e0fff117 	ldw	r3,-60(fp)
   40354:	1822d43a 	srli	r17,r3,16
   40358:	1462b03a 	or	r17,r2,r17
   4035c:	e0bff217 	ldw	r2,-56(fp)
   40360:	1024d43a 	srli	r18,r2,16
   40364:	e0bfdd17 	ldw	r2,-140(fp)
   40368:	10bfffcc 	andi	r2,r2,65535
   4036c:	e0bff315 	stw	r2,-52(fp)
   40370:	e0bfde17 	ldw	r2,-136(fp)
   40374:	10bfffcc 	andi	r2,r2,65535
   40378:	e0bff415 	stw	r2,-48(fp)
   4037c:	e0fff317 	ldw	r3,-52(fp)
   40380:	1804d43a 	srli	r2,r3,16
   40384:	e0fff417 	ldw	r3,-48(fp)
   40388:	1820943a 	slli	r16,r3,16
   4038c:	1420b03a 	or	r16,r2,r16
   40390:	e0bff317 	ldw	r2,-52(fp)
   40394:	101e943a 	slli	r15,r2,16
   40398:	8bc6b03a 	or	r3,r17,r15
   4039c:	e0fff515 	stw	r3,-44(fp)
   403a0:	9404b03a 	or	r2,r18,r16
   403a4:	e0bff615 	stw	r2,-40(fp)
   403a8:	e0bfe017 	ldw	r2,-128(fp)
   403ac:	e0fff517 	ldw	r3,-44(fp)
   403b0:	10c01215 	stw	r3,72(r2)
   403b4:	e0fff617 	ldw	r3,-40(fp)
   403b8:	10c01315 	stw	r3,76(r2)
#endif
    if (usedspace > 0) {
   403bc:	e0bfda17 	ldw	r2,-152(fp)
   403c0:	10002f26 	beq	r2,zero,40480 <sha512_Last+0x3dc>
        /* Begin padding with a 1 bit: */
        context->buffer[usedspace++] = 0x80;
   403c4:	e0bfda17 	ldw	r2,-152(fp)
   403c8:	10c00044 	addi	r3,r2,1
   403cc:	e0ffda15 	stw	r3,-152(fp)
   403d0:	e0ffe017 	ldw	r3,-128(fp)
   403d4:	1885883a 	add	r2,r3,r2
   403d8:	10801404 	addi	r2,r2,80
   403dc:	00ffe004 	movi	r3,-128
   403e0:	10c00005 	stb	r3,0(r2)

        if (usedspace <= SHA512_SHORT_BLOCK_LENGTH) {
   403e4:	e0bfda17 	ldw	r2,-152(fp)
   403e8:	10801c68 	cmpgeui	r2,r2,113
   403ec:	10000b1e 	bne	r2,zero,4041c <sha512_Last+0x378>
            /* Set-up for the last transform: */
            MEMSET_BZERO(&context->buffer[usedspace], SHA512_SHORT_BLOCK_LENGTH - usedspace);
   403f0:	e0bfda17 	ldw	r2,-152(fp)
   403f4:	10801404 	addi	r2,r2,80
   403f8:	e0ffe017 	ldw	r3,-128(fp)
   403fc:	1889883a 	add	r4,r3,r2
   40400:	00c01c04 	movi	r3,112
   40404:	e0bfda17 	ldw	r2,-152(fp)
   40408:	1885c83a 	sub	r2,r3,r2
   4040c:	100d883a 	mov	r6,r2
   40410:	000b883a 	mov	r5,zero
   40414:	0045f3c0 	call	45f3c <memset>
   40418:	00002206 	br	404a4 <sha512_Last+0x400>
        } else {
            if (usedspace < SHA512_BLOCK_LENGTH) {
   4041c:	e0bfda17 	ldw	r2,-152(fp)
   40420:	10802028 	cmpgeui	r2,r2,128
   40424:	10000a1e 	bne	r2,zero,40450 <sha512_Last+0x3ac>
                MEMSET_BZERO(&context->buffer[usedspace], SHA512_BLOCK_LENGTH - usedspace);
   40428:	e0bfda17 	ldw	r2,-152(fp)
   4042c:	10801404 	addi	r2,r2,80
   40430:	e0ffe017 	ldw	r3,-128(fp)
   40434:	1889883a 	add	r4,r3,r2
   40438:	00c02004 	movi	r3,128
   4043c:	e0bfda17 	ldw	r2,-152(fp)
   40440:	1885c83a 	sub	r2,r3,r2
   40444:	100d883a 	mov	r6,r2
   40448:	000b883a 	mov	r5,zero
   4044c:	0045f3c0 	call	45f3c <memset>
            }
            /* Do second-to-last transform: */
            sha512_Transform(context, (sha2_word64*)context->buffer);
   40450:	e0bfe017 	ldw	r2,-128(fp)
   40454:	10801404 	addi	r2,r2,80
   40458:	100b883a 	mov	r5,r2
   4045c:	e13fe017 	ldw	r4,-128(fp)
   40460:	003ebf80 	call	3ebf8 <sha512_Transform>

            /* And set-up for the last transform: */
            MEMSET_BZERO(context->buffer, SHA512_BLOCK_LENGTH - 2);
   40464:	e0bfe017 	ldw	r2,-128(fp)
   40468:	10801404 	addi	r2,r2,80
   4046c:	01801f84 	movi	r6,126
   40470:	000b883a 	mov	r5,zero
   40474:	1009883a 	mov	r4,r2
   40478:	0045f3c0 	call	45f3c <memset>
   4047c:	00000906 	br	404a4 <sha512_Last+0x400>
        }
    } else {
        /* Prepare for final transform: */
        MEMSET_BZERO(context->buffer, SHA512_SHORT_BLOCK_LENGTH);
   40480:	e0bfe017 	ldw	r2,-128(fp)
   40484:	10801404 	addi	r2,r2,80
   40488:	01801c04 	movi	r6,112
   4048c:	000b883a 	mov	r5,zero
   40490:	1009883a 	mov	r4,r2
   40494:	0045f3c0 	call	45f3c <memset>

        /* Begin padding with a 1 bit: */
        *context->buffer = 0x80;
   40498:	e0bfe017 	ldw	r2,-128(fp)
   4049c:	00ffe004 	movi	r3,-128
   404a0:	10c01405 	stb	r3,80(r2)
    }
    /* Store the length of input data (in bits): */
    t = (sha2_word64*)&context->buffer[SHA512_SHORT_BLOCK_LENGTH];
   404a4:	e0bfe017 	ldw	r2,-128(fp)
   404a8:	10803004 	addi	r2,r2,192
   404ac:	e0bfdf15 	stw	r2,-132(fp)
    *t = context->bitcount[1];
   404b0:	e13fe017 	ldw	r4,-128(fp)
   404b4:	20801217 	ldw	r2,72(r4)
   404b8:	20c01317 	ldw	r3,76(r4)
   404bc:	e13fdf17 	ldw	r4,-132(fp)
   404c0:	20800015 	stw	r2,0(r4)
   404c4:	20c00115 	stw	r3,4(r4)
    t = (sha2_word64*)&context->buffer[SHA512_SHORT_BLOCK_LENGTH + 8];
   404c8:	e0bfe017 	ldw	r2,-128(fp)
   404cc:	10803204 	addi	r2,r2,200
   404d0:	e0bfdf15 	stw	r2,-132(fp)
    *t = context->bitcount[0];
   404d4:	e13fe017 	ldw	r4,-128(fp)
   404d8:	20801017 	ldw	r2,64(r4)
   404dc:	20c01117 	ldw	r3,68(r4)
   404e0:	e13fdf17 	ldw	r4,-132(fp)
   404e4:	20800015 	stw	r2,0(r4)
   404e8:	20c00115 	stw	r3,4(r4)

    /* Final transform: */
    sha512_Transform(context, (sha2_word64*)context->buffer);
   404ec:	e0bfe017 	ldw	r2,-128(fp)
   404f0:	10801404 	addi	r2,r2,80
   404f4:	100b883a 	mov	r5,r2
   404f8:	e13fe017 	ldw	r4,-128(fp)
   404fc:	003ebf80 	call	3ebf8 <sha512_Transform>
}
   40500:	0001883a 	nop
   40504:	e6fff904 	addi	sp,fp,-28
   40508:	dfc00817 	ldw	ra,32(sp)
   4050c:	df000717 	ldw	fp,28(sp)
   40510:	dd800617 	ldw	r22,24(sp)
   40514:	dd400517 	ldw	r21,20(sp)
   40518:	dd000417 	ldw	r20,16(sp)
   4051c:	dcc00317 	ldw	r19,12(sp)
   40520:	dc800217 	ldw	r18,8(sp)
   40524:	dc400117 	ldw	r17,4(sp)
   40528:	dc000017 	ldw	r16,0(sp)
   4052c:	dec00904 	addi	sp,sp,36
   40530:	f800283a 	ret

00040534 <sha512_Final>:

void sha512_Final(sha2_byte digest[], SHA512_CTX* context)
{
   40534:	deffe404 	addi	sp,sp,-112
   40538:	dfc01b15 	stw	ra,108(sp)
   4053c:	df001a15 	stw	fp,104(sp)
   40540:	ddc01915 	stw	r23,100(sp)
   40544:	dd801815 	stw	r22,96(sp)
   40548:	dd401715 	stw	r21,92(sp)
   4054c:	dd001615 	stw	r20,88(sp)
   40550:	dcc01515 	stw	r19,84(sp)
   40554:	dc801415 	stw	r18,80(sp)
   40558:	dc401315 	stw	r17,76(sp)
   4055c:	dc001215 	stw	r16,72(sp)
   40560:	df001a04 	addi	fp,sp,104
   40564:	e13fea15 	stw	r4,-88(fp)
   40568:	e17feb15 	stw	r5,-84(fp)
    sha2_word64* d = (sha2_word64*)digest;
   4056c:	e0bfea17 	ldw	r2,-88(fp)
   40570:	e0bfe615 	stw	r2,-104(fp)

    /* If no digest buffer is passed, we don't bother doing this: */
    if (digest != (sha2_byte*)0) {
   40574:	e0bfea17 	ldw	r2,-88(fp)
   40578:	10007126 	beq	r2,zero,40740 <sha512_Final+0x20c>
        sha512_Last(context);
   4057c:	e13feb17 	ldw	r4,-84(fp)
   40580:	00400a40 	call	400a4 <sha512_Last>
/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
   40584:	e03fe715 	stw	zero,-100(fp)
   40588:	00006a06 	br	40734 <sha512_Final+0x200>
                REVERSE64(context->state[j], context->state[j]);
   4058c:	e0ffeb17 	ldw	r3,-84(fp)
   40590:	e0bfe717 	ldw	r2,-100(fp)
   40594:	100490fa 	slli	r2,r2,3
   40598:	1885883a 	add	r2,r3,r2
   4059c:	10c00017 	ldw	r3,0(r2)
   405a0:	e0ffe815 	stw	r3,-96(fp)
   405a4:	10800117 	ldw	r2,4(r2)
   405a8:	e0bfe915 	stw	r2,-92(fp)
   405ac:	e0bfe917 	ldw	r2,-92(fp)
   405b0:	e0bff615 	stw	r2,-40(fp)
   405b4:	e0ffe817 	ldw	r3,-96(fp)
   405b8:	e0fff715 	stw	r3,-36(fp)
   405bc:	e0bff617 	ldw	r2,-40(fp)
   405c0:	e0bfe815 	stw	r2,-96(fp)
   405c4:	e0fff717 	ldw	r3,-36(fp)
   405c8:	e0ffe915 	stw	r3,-92(fp)
   405cc:	e0ffe817 	ldw	r3,-96(fp)
   405d0:	00bfc074 	movhi	r2,65281
   405d4:	10bfc004 	addi	r2,r2,-256
   405d8:	1884703a 	and	r2,r3,r2
   405dc:	e0bfec15 	stw	r2,-80(fp)
   405e0:	e0ffe917 	ldw	r3,-92(fp)
   405e4:	00bfc074 	movhi	r2,65281
   405e8:	10bfc004 	addi	r2,r2,-256
   405ec:	1884703a 	and	r2,r3,r2
   405f0:	e0bfed15 	stw	r2,-76(fp)
   405f4:	e0ffed17 	ldw	r3,-76(fp)
   405f8:	1804963a 	slli	r2,r3,24
   405fc:	e0ffec17 	ldw	r3,-80(fp)
   40600:	1820d23a 	srli	r16,r3,8
   40604:	1420b03a 	or	r16,r2,r16
   40608:	e0bfed17 	ldw	r2,-76(fp)
   4060c:	1022d23a 	srli	r17,r2,8
   40610:	e0ffe817 	ldw	r3,-96(fp)
   40614:	00803ff4 	movhi	r2,255
   40618:	10803fc4 	addi	r2,r2,255
   4061c:	1884703a 	and	r2,r3,r2
   40620:	e0bfee15 	stw	r2,-72(fp)
   40624:	e0ffe917 	ldw	r3,-92(fp)
   40628:	00803ff4 	movhi	r2,255
   4062c:	10803fc4 	addi	r2,r2,255
   40630:	1884703a 	and	r2,r3,r2
   40634:	e0bfef15 	stw	r2,-68(fp)
   40638:	e0ffee17 	ldw	r3,-72(fp)
   4063c:	1804d63a 	srli	r2,r3,24
   40640:	e0ffef17 	ldw	r3,-68(fp)
   40644:	1826923a 	slli	r19,r3,8
   40648:	14e6b03a 	or	r19,r2,r19
   4064c:	e0bfee17 	ldw	r2,-72(fp)
   40650:	1024923a 	slli	r18,r2,8
   40654:	8484b03a 	or	r2,r16,r18
   40658:	e0bfe815 	stw	r2,-96(fp)
   4065c:	8cc4b03a 	or	r2,r17,r19
   40660:	e0bfe915 	stw	r2,-92(fp)
   40664:	e0bfe817 	ldw	r2,-96(fp)
   40668:	10bfffec 	andhi	r2,r2,65535
   4066c:	e0bff015 	stw	r2,-64(fp)
   40670:	e0bfe917 	ldw	r2,-92(fp)
   40674:	10bfffec 	andhi	r2,r2,65535
   40678:	e0bff115 	stw	r2,-60(fp)
   4067c:	e0fff117 	ldw	r3,-60(fp)
   40680:	1804943a 	slli	r2,r3,16
   40684:	e0fff017 	ldw	r3,-64(fp)
   40688:	1828d43a 	srli	r20,r3,16
   4068c:	1528b03a 	or	r20,r2,r20
   40690:	e0bff117 	ldw	r2,-60(fp)
   40694:	102ad43a 	srli	r21,r2,16
   40698:	e0bfe817 	ldw	r2,-96(fp)
   4069c:	10bfffcc 	andi	r2,r2,65535
   406a0:	e0bff215 	stw	r2,-56(fp)
   406a4:	e0bfe917 	ldw	r2,-92(fp)
   406a8:	10bfffcc 	andi	r2,r2,65535
   406ac:	e0bff315 	stw	r2,-52(fp)
   406b0:	e0fff217 	ldw	r3,-56(fp)
   406b4:	1804d43a 	srli	r2,r3,16
   406b8:	e0fff317 	ldw	r3,-52(fp)
   406bc:	182e943a 	slli	r23,r3,16
   406c0:	15eeb03a 	or	r23,r2,r23
   406c4:	e0bff217 	ldw	r2,-56(fp)
   406c8:	102c943a 	slli	r22,r2,16
   406cc:	a586b03a 	or	r3,r20,r22
   406d0:	e0fff415 	stw	r3,-48(fp)
   406d4:	adc4b03a 	or	r2,r21,r23
   406d8:	e0bff515 	stw	r2,-44(fp)
   406dc:	e0ffeb17 	ldw	r3,-84(fp)
   406e0:	e0bfe717 	ldw	r2,-100(fp)
   406e4:	100490fa 	slli	r2,r2,3
   406e8:	1885883a 	add	r2,r3,r2
   406ec:	e0fff417 	ldw	r3,-48(fp)
   406f0:	10c00015 	stw	r3,0(r2)
   406f4:	e0fff517 	ldw	r3,-44(fp)
   406f8:	10c00115 	stw	r3,4(r2)
                memcpy(d++, &context->state[j], sizeof(context->state[j]));
   406fc:	e0bfe617 	ldw	r2,-104(fp)
   40700:	10c00204 	addi	r3,r2,8
   40704:	e0ffe615 	stw	r3,-104(fp)
   40708:	e0ffe717 	ldw	r3,-100(fp)
   4070c:	180690fa 	slli	r3,r3,3
   40710:	e13feb17 	ldw	r4,-84(fp)
   40714:	20c7883a 	add	r3,r4,r3
   40718:	01800204 	movi	r6,8
   4071c:	180b883a 	mov	r5,r3
   40720:	1009883a 	mov	r4,r2
   40724:	0045c980 	call	45c98 <memcpy>
/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
   40728:	e0bfe717 	ldw	r2,-100(fp)
   4072c:	10800044 	addi	r2,r2,1
   40730:	e0bfe715 	stw	r2,-100(fp)
   40734:	e0bfe717 	ldw	r2,-100(fp)
   40738:	10800210 	cmplti	r2,r2,8
   4073c:	103f931e 	bne	r2,zero,4058c <__alt_mem_epcs_flash_controller+0xfe02f58c>
        MEMCPY_BCOPY(d, context->state, SHA512_DIGEST_LENGTH);
#endif
    }

    /* Zero out state data */
    MEMSET_BZERO(context, sizeof(SHA512_CTX));
   40740:	01803404 	movi	r6,208
   40744:	000b883a 	mov	r5,zero
   40748:	e13feb17 	ldw	r4,-84(fp)
   4074c:	0045f3c0 	call	45f3c <memset>
}
   40750:	0001883a 	nop
   40754:	e6fff804 	addi	sp,fp,-32
   40758:	dfc00917 	ldw	ra,36(sp)
   4075c:	df000817 	ldw	fp,32(sp)
   40760:	ddc00717 	ldw	r23,28(sp)
   40764:	dd800617 	ldw	r22,24(sp)
   40768:	dd400517 	ldw	r21,20(sp)
   4076c:	dd000417 	ldw	r20,16(sp)
   40770:	dcc00317 	ldw	r19,12(sp)
   40774:	dc800217 	ldw	r18,8(sp)
   40778:	dc400117 	ldw	r17,4(sp)
   4077c:	dc000017 	ldw	r16,0(sp)
   40780:	dec00a04 	addi	sp,sp,40
   40784:	f800283a 	ret

00040788 <sha512_Raw>:

void sha512_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA512_DIGEST_LENGTH])
{
   40788:	deffc704 	addi	sp,sp,-228
   4078c:	dfc03815 	stw	ra,224(sp)
   40790:	df003715 	stw	fp,220(sp)
   40794:	df003704 	addi	fp,sp,220
   40798:	e13ffd15 	stw	r4,-12(fp)
   4079c:	e17ffe15 	stw	r5,-8(fp)
   407a0:	e1bfff15 	stw	r6,-4(fp)
    SHA512_CTX context;
    sha512_Init(&context);
   407a4:	e13fc904 	addi	r4,fp,-220
   407a8:	003eb6c0 	call	3eb6c <sha512_Init>
    sha512_Update(&context, data, len);
   407ac:	e1bffe17 	ldw	r6,-8(fp)
   407b0:	e17ffd17 	ldw	r5,-12(fp)
   407b4:	e13fc904 	addi	r4,fp,-220
   407b8:	003fc580 	call	3fc58 <sha512_Update>
    sha512_Final(digest, &context);
   407bc:	e17fc904 	addi	r5,fp,-220
   407c0:	e13fff17 	ldw	r4,-4(fp)
   407c4:	00405340 	call	40534 <sha512_Final>
}
   407c8:	0001883a 	nop
   407cc:	e037883a 	mov	sp,fp
   407d0:	dfc00117 	ldw	ra,4(sp)
   407d4:	df000017 	ldw	fp,0(sp)
   407d8:	dec00204 	addi	sp,sp,8
   407dc:	f800283a 	ret

000407e0 <hmac_sha256>:

void hmac_sha256(const uint8_t* key, const uint32_t keylen, const uint8_t* msg, const uint32_t msglen, uint8_t* hmac)
{
   407e0:	deffaf04 	addi	sp,sp,-324
   407e4:	dfc05015 	stw	ra,320(sp)
   407e8:	df004f15 	stw	fp,316(sp)
   407ec:	df004f04 	addi	fp,sp,316
   407f0:	e13ffc15 	stw	r4,-16(fp)
   407f4:	e17ffd15 	stw	r5,-12(fp)
   407f8:	e1bffe15 	stw	r6,-8(fp)
   407fc:	e1ffff15 	stw	r7,-4(fp)
    int i;
    uint8_t buf[SHA256_BLOCK_LENGTH], o_key_pad[SHA256_BLOCK_LENGTH],
        i_key_pad[SHA256_BLOCK_LENGTH];
    SHA256_CTX ctx;

    memset(buf, 0, SHA256_BLOCK_LENGTH);
   40800:	e0bfb204 	addi	r2,fp,-312
   40804:	01801004 	movi	r6,64
   40808:	000b883a 	mov	r5,zero
   4080c:	1009883a 	mov	r4,r2
   40810:	0045f3c0 	call	45f3c <memset>
    if (keylen > SHA256_BLOCK_LENGTH) {
   40814:	e0bffd17 	ldw	r2,-12(fp)
   40818:	10801070 	cmpltui	r2,r2,65
   4081c:	1000061e 	bne	r2,zero,40838 <hmac_sha256+0x58>
        sha256_Raw(key, keylen, buf);
   40820:	e0bfb204 	addi	r2,fp,-312
   40824:	100d883a 	mov	r6,r2
   40828:	e17ffd17 	ldw	r5,-12(fp)
   4082c:	e13ffc17 	ldw	r4,-16(fp)
   40830:	003eb140 	call	3eb14 <sha256_Raw>
   40834:	00000506 	br	4084c <hmac_sha256+0x6c>
    } else {
        memcpy(buf, key, keylen);
   40838:	e0bfb204 	addi	r2,fp,-312
   4083c:	e1bffd17 	ldw	r6,-12(fp)
   40840:	e17ffc17 	ldw	r5,-16(fp)
   40844:	1009883a 	mov	r4,r2
   40848:	0045c980 	call	45c98 <memcpy>
    }

    for (i = 0; i < SHA256_BLOCK_LENGTH; i++) {
   4084c:	e03fb115 	stw	zero,-316(fp)
   40850:	00001706 	br	408b0 <hmac_sha256+0xd0>
        o_key_pad[i] = buf[i] ^ 0x5c;
   40854:	e0ffb204 	addi	r3,fp,-312
   40858:	e0bfb117 	ldw	r2,-316(fp)
   4085c:	1885883a 	add	r2,r3,r2
   40860:	10800003 	ldbu	r2,0(r2)
   40864:	1080171c 	xori	r2,r2,92
   40868:	1009883a 	mov	r4,r2
   4086c:	e0ffc204 	addi	r3,fp,-248
   40870:	e0bfb117 	ldw	r2,-316(fp)
   40874:	1885883a 	add	r2,r3,r2
   40878:	11000005 	stb	r4,0(r2)
        i_key_pad[i] = buf[i] ^ 0x36;
   4087c:	e0ffb204 	addi	r3,fp,-312
   40880:	e0bfb117 	ldw	r2,-316(fp)
   40884:	1885883a 	add	r2,r3,r2
   40888:	10800003 	ldbu	r2,0(r2)
   4088c:	10800d9c 	xori	r2,r2,54
   40890:	1009883a 	mov	r4,r2
   40894:	e0ffd204 	addi	r3,fp,-184
   40898:	e0bfb117 	ldw	r2,-316(fp)
   4089c:	1885883a 	add	r2,r3,r2
   408a0:	11000005 	stb	r4,0(r2)
        sha256_Raw(key, keylen, buf);
    } else {
        memcpy(buf, key, keylen);
    }

    for (i = 0; i < SHA256_BLOCK_LENGTH; i++) {
   408a4:	e0bfb117 	ldw	r2,-316(fp)
   408a8:	10800044 	addi	r2,r2,1
   408ac:	e0bfb115 	stw	r2,-316(fp)
   408b0:	e0bfb117 	ldw	r2,-316(fp)
   408b4:	10801010 	cmplti	r2,r2,64
   408b8:	103fe61e 	bne	r2,zero,40854 <__alt_mem_epcs_flash_controller+0xfe02f854>
        o_key_pad[i] = buf[i] ^ 0x5c;
        i_key_pad[i] = buf[i] ^ 0x36;
    }

    sha256_Init(&ctx);
   408bc:	e0bfe204 	addi	r2,fp,-120
   408c0:	1009883a 	mov	r4,r2
   408c4:	003de680 	call	3de68 <sha256_Init>
    sha256_Update(&ctx, i_key_pad, SHA256_BLOCK_LENGTH);
   408c8:	e0ffd204 	addi	r3,fp,-184
   408cc:	e0bfe204 	addi	r2,fp,-120
   408d0:	01801004 	movi	r6,64
   408d4:	180b883a 	mov	r5,r3
   408d8:	1009883a 	mov	r4,r2
   408dc:	003e49c0 	call	3e49c <sha256_Update>
    sha256_Update(&ctx, msg, msglen);
   408e0:	e0bfe204 	addi	r2,fp,-120
   408e4:	e1bfff17 	ldw	r6,-4(fp)
   408e8:	e17ffe17 	ldw	r5,-8(fp)
   408ec:	1009883a 	mov	r4,r2
   408f0:	003e49c0 	call	3e49c <sha256_Update>
    sha256_Final(buf, &ctx);
   408f4:	e0ffe204 	addi	r3,fp,-120
   408f8:	e0bfb204 	addi	r2,fp,-312
   408fc:	180b883a 	mov	r5,r3
   40900:	1009883a 	mov	r4,r2
   40904:	003e7440 	call	3e744 <sha256_Final>

    sha256_Init(&ctx);
   40908:	e0bfe204 	addi	r2,fp,-120
   4090c:	1009883a 	mov	r4,r2
   40910:	003de680 	call	3de68 <sha256_Init>
    sha256_Update(&ctx, o_key_pad, SHA256_BLOCK_LENGTH);
   40914:	e0ffc204 	addi	r3,fp,-248
   40918:	e0bfe204 	addi	r2,fp,-120
   4091c:	01801004 	movi	r6,64
   40920:	180b883a 	mov	r5,r3
   40924:	1009883a 	mov	r4,r2
   40928:	003e49c0 	call	3e49c <sha256_Update>
    sha256_Update(&ctx, buf, SHA256_DIGEST_LENGTH);
   4092c:	e0ffb204 	addi	r3,fp,-312
   40930:	e0bfe204 	addi	r2,fp,-120
   40934:	01800804 	movi	r6,32
   40938:	180b883a 	mov	r5,r3
   4093c:	1009883a 	mov	r4,r2
   40940:	003e49c0 	call	3e49c <sha256_Update>
    sha256_Final(hmac, &ctx);
   40944:	e0bfe204 	addi	r2,fp,-120
   40948:	100b883a 	mov	r5,r2
   4094c:	e1000217 	ldw	r4,8(fp)
   40950:	003e7440 	call	3e744 <sha256_Final>
}
   40954:	0001883a 	nop
   40958:	e037883a 	mov	sp,fp
   4095c:	dfc00117 	ldw	ra,4(sp)
   40960:	df000017 	ldw	fp,0(sp)
   40964:	dec00204 	addi	sp,sp,8
   40968:	f800283a 	ret

0004096c <hmac_sha512>:

void hmac_sha512(const uint8_t* key, const uint32_t keylen, const uint8_t* msg, const uint32_t msglen, uint8_t* hmac)
{
   4096c:	deff6504 	addi	sp,sp,-620
   40970:	dfc09a15 	stw	ra,616(sp)
   40974:	df009915 	stw	fp,612(sp)
   40978:	df009904 	addi	fp,sp,612
   4097c:	e13ffc15 	stw	r4,-16(fp)
   40980:	e17ffd15 	stw	r5,-12(fp)
   40984:	e1bffe15 	stw	r6,-8(fp)
   40988:	e1ffff15 	stw	r7,-4(fp)
    int i;
    uint8_t buf[SHA512_BLOCK_LENGTH], o_key_pad[SHA512_BLOCK_LENGTH],
        i_key_pad[SHA512_BLOCK_LENGTH];
    SHA512_CTX ctx;

    memset(buf, 0, SHA512_BLOCK_LENGTH);
   4098c:	e0bf6804 	addi	r2,fp,-608
   40990:	01802004 	movi	r6,128
   40994:	000b883a 	mov	r5,zero
   40998:	1009883a 	mov	r4,r2
   4099c:	0045f3c0 	call	45f3c <memset>
    if (keylen > SHA512_BLOCK_LENGTH) {
   409a0:	e0bffd17 	ldw	r2,-12(fp)
   409a4:	10802070 	cmpltui	r2,r2,129
   409a8:	1000061e 	bne	r2,zero,409c4 <hmac_sha512+0x58>
        sha512_Raw(key, keylen, buf);
   409ac:	e0bf6804 	addi	r2,fp,-608
   409b0:	100d883a 	mov	r6,r2
   409b4:	e17ffd17 	ldw	r5,-12(fp)
   409b8:	e13ffc17 	ldw	r4,-16(fp)
   409bc:	00407880 	call	40788 <sha512_Raw>
   409c0:	00000506 	br	409d8 <hmac_sha512+0x6c>
    } else {
        memcpy(buf, key, keylen);
   409c4:	e0bf6804 	addi	r2,fp,-608
   409c8:	e1bffd17 	ldw	r6,-12(fp)
   409cc:	e17ffc17 	ldw	r5,-16(fp)
   409d0:	1009883a 	mov	r4,r2
   409d4:	0045c980 	call	45c98 <memcpy>
    }

    for (i = 0; i < SHA512_BLOCK_LENGTH; i++) {
   409d8:	e03f6715 	stw	zero,-612(fp)
   409dc:	00001706 	br	40a3c <hmac_sha512+0xd0>
        o_key_pad[i] = buf[i] ^ 0x5c;
   409e0:	e0ff6804 	addi	r3,fp,-608
   409e4:	e0bf6717 	ldw	r2,-612(fp)
   409e8:	1885883a 	add	r2,r3,r2
   409ec:	10800003 	ldbu	r2,0(r2)
   409f0:	1080171c 	xori	r2,r2,92
   409f4:	1009883a 	mov	r4,r2
   409f8:	e0ff8804 	addi	r3,fp,-480
   409fc:	e0bf6717 	ldw	r2,-612(fp)
   40a00:	1885883a 	add	r2,r3,r2
   40a04:	11000005 	stb	r4,0(r2)
        i_key_pad[i] = buf[i] ^ 0x36;
   40a08:	e0ff6804 	addi	r3,fp,-608
   40a0c:	e0bf6717 	ldw	r2,-612(fp)
   40a10:	1885883a 	add	r2,r3,r2
   40a14:	10800003 	ldbu	r2,0(r2)
   40a18:	10800d9c 	xori	r2,r2,54
   40a1c:	1009883a 	mov	r4,r2
   40a20:	e0ffa804 	addi	r3,fp,-352
   40a24:	e0bf6717 	ldw	r2,-612(fp)
   40a28:	1885883a 	add	r2,r3,r2
   40a2c:	11000005 	stb	r4,0(r2)
        sha512_Raw(key, keylen, buf);
    } else {
        memcpy(buf, key, keylen);
    }

    for (i = 0; i < SHA512_BLOCK_LENGTH; i++) {
   40a30:	e0bf6717 	ldw	r2,-612(fp)
   40a34:	10800044 	addi	r2,r2,1
   40a38:	e0bf6715 	stw	r2,-612(fp)
   40a3c:	e0bf6717 	ldw	r2,-612(fp)
   40a40:	10802010 	cmplti	r2,r2,128
   40a44:	103fe61e 	bne	r2,zero,409e0 <__alt_mem_epcs_flash_controller+0xfe02f9e0>
        o_key_pad[i] = buf[i] ^ 0x5c;
        i_key_pad[i] = buf[i] ^ 0x36;
    }

    sha512_Init(&ctx);
   40a48:	e0bfc804 	addi	r2,fp,-224
   40a4c:	1009883a 	mov	r4,r2
   40a50:	003eb6c0 	call	3eb6c <sha512_Init>
    sha512_Update(&ctx, i_key_pad, SHA512_BLOCK_LENGTH);
   40a54:	e0ffa804 	addi	r3,fp,-352
   40a58:	e0bfc804 	addi	r2,fp,-224
   40a5c:	01802004 	movi	r6,128
   40a60:	180b883a 	mov	r5,r3
   40a64:	1009883a 	mov	r4,r2
   40a68:	003fc580 	call	3fc58 <sha512_Update>
    sha512_Update(&ctx, msg, msglen);
   40a6c:	e0bfc804 	addi	r2,fp,-224
   40a70:	e1bfff17 	ldw	r6,-4(fp)
   40a74:	e17ffe17 	ldw	r5,-8(fp)
   40a78:	1009883a 	mov	r4,r2
   40a7c:	003fc580 	call	3fc58 <sha512_Update>
    sha512_Final(buf, &ctx);
   40a80:	e0ffc804 	addi	r3,fp,-224
   40a84:	e0bf6804 	addi	r2,fp,-608
   40a88:	180b883a 	mov	r5,r3
   40a8c:	1009883a 	mov	r4,r2
   40a90:	00405340 	call	40534 <sha512_Final>

    sha512_Init(&ctx);
   40a94:	e0bfc804 	addi	r2,fp,-224
   40a98:	1009883a 	mov	r4,r2
   40a9c:	003eb6c0 	call	3eb6c <sha512_Init>
    sha512_Update(&ctx, o_key_pad, SHA512_BLOCK_LENGTH);
   40aa0:	e0ff8804 	addi	r3,fp,-480
   40aa4:	e0bfc804 	addi	r2,fp,-224
   40aa8:	01802004 	movi	r6,128
   40aac:	180b883a 	mov	r5,r3
   40ab0:	1009883a 	mov	r4,r2
   40ab4:	003fc580 	call	3fc58 <sha512_Update>
    sha512_Update(&ctx, buf, SHA512_DIGEST_LENGTH);
   40ab8:	e0ff6804 	addi	r3,fp,-608
   40abc:	e0bfc804 	addi	r2,fp,-224
   40ac0:	01801004 	movi	r6,64
   40ac4:	180b883a 	mov	r5,r3
   40ac8:	1009883a 	mov	r4,r2
   40acc:	003fc580 	call	3fc58 <sha512_Update>
    sha512_Final(hmac, &ctx);
   40ad0:	e0bfc804 	addi	r2,fp,-224
   40ad4:	100b883a 	mov	r5,r2
   40ad8:	e1000217 	ldw	r4,8(fp)
   40adc:	00405340 	call	40534 <sha512_Final>
}
   40ae0:	0001883a 	nop
   40ae4:	e037883a 	mov	sp,fp
   40ae8:	dfc00117 	ldw	ra,4(sp)
   40aec:	df000017 	ldw	fp,0(sp)
   40af0:	dec00204 	addi	sp,sp,8
   40af4:	f800283a 	ret

00040af8 <utils_clear_buffers>:
static uint8_t buffer_hex_to_uint8[TO_UINT8_HEX_BUF_LEN];
static char buffer_uint8_to_hex[TO_UINT8_HEX_BUF_LEN];


void utils_clear_buffers(void)
{
   40af8:	defffe04 	addi	sp,sp,-8
   40afc:	dfc00115 	stw	ra,4(sp)
   40b00:	df000015 	stw	fp,0(sp)
   40b04:	d839883a 	mov	fp,sp
    memset(buffer_hex_to_uint8, 0, TO_UINT8_HEX_BUF_LEN);
   40b08:	01820004 	movi	r6,2048
   40b0c:	000b883a 	mov	r5,zero
   40b10:	010001b4 	movhi	r4,6
   40b14:	2106ab04 	addi	r4,r4,6828
   40b18:	0045f3c0 	call	45f3c <memset>
    memset(buffer_uint8_to_hex, 0, TO_UINT8_HEX_BUF_LEN);
   40b1c:	01820004 	movi	r6,2048
   40b20:	000b883a 	mov	r5,zero
   40b24:	010001b4 	movhi	r4,6
   40b28:	2108ab04 	addi	r4,r4,8876
   40b2c:	0045f3c0 	call	45f3c <memset>
}
   40b30:	0001883a 	nop
   40b34:	e037883a 	mov	sp,fp
   40b38:	dfc00117 	ldw	ra,4(sp)
   40b3c:	df000017 	ldw	fp,0(sp)
   40b40:	dec00204 	addi	sp,sp,8
   40b44:	f800283a 	ret

00040b48 <utils_hex_to_bin>:

void utils_hex_to_bin(const char* str, unsigned char* out, int inLen, int* outLen)
{
   40b48:	defff704 	addi	sp,sp,-36
   40b4c:	dfc00815 	stw	ra,32(sp)
   40b50:	df000715 	stw	fp,28(sp)
   40b54:	df000704 	addi	fp,sp,28
   40b58:	e13ffc15 	stw	r4,-16(fp)
   40b5c:	e17ffd15 	stw	r5,-12(fp)
   40b60:	e1bffe15 	stw	r6,-8(fp)
   40b64:	e1ffff15 	stw	r7,-4(fp)
    int bLen = inLen / 2;
   40b68:	e0bffe17 	ldw	r2,-8(fp)
   40b6c:	1006d7fa 	srli	r3,r2,31
   40b70:	1885883a 	add	r2,r3,r2
   40b74:	1005d07a 	srai	r2,r2,1
   40b78:	e0bffa15 	stw	r2,-24(fp)
    uint8_t c;
    int i;
    memset(out, 0, bLen);
   40b7c:	e0bffa17 	ldw	r2,-24(fp)
   40b80:	100d883a 	mov	r6,r2
   40b84:	000b883a 	mov	r5,zero
   40b88:	e13ffd17 	ldw	r4,-12(fp)
   40b8c:	0045f3c0 	call	45f3c <memset>
    for (i = 0; i < bLen; i++) {
   40b90:	e03ff915 	stw	zero,-28(fp)
   40b94:	0000d606 	br	40ef0 <utils_hex_to_bin+0x3a8>
        c = 0;
   40b98:	e03ffb05 	stb	zero,-20(fp)
        if (str[i * 2] >= '0' && str[i * 2] <= '9') {
   40b9c:	e0bff917 	ldw	r2,-28(fp)
   40ba0:	1085883a 	add	r2,r2,r2
   40ba4:	1007883a 	mov	r3,r2
   40ba8:	e0bffc17 	ldw	r2,-16(fp)
   40bac:	10c5883a 	add	r2,r2,r3
   40bb0:	10800003 	ldbu	r2,0(r2)
   40bb4:	10803fcc 	andi	r2,r2,255
   40bb8:	1080201c 	xori	r2,r2,128
   40bbc:	10bfe004 	addi	r2,r2,-128
   40bc0:	10800c10 	cmplti	r2,r2,48
   40bc4:	1000161e 	bne	r2,zero,40c20 <utils_hex_to_bin+0xd8>
   40bc8:	e0bff917 	ldw	r2,-28(fp)
   40bcc:	1085883a 	add	r2,r2,r2
   40bd0:	1007883a 	mov	r3,r2
   40bd4:	e0bffc17 	ldw	r2,-16(fp)
   40bd8:	10c5883a 	add	r2,r2,r3
   40bdc:	10800003 	ldbu	r2,0(r2)
   40be0:	10803fcc 	andi	r2,r2,255
   40be4:	1080201c 	xori	r2,r2,128
   40be8:	10bfe004 	addi	r2,r2,-128
   40bec:	10800e88 	cmpgei	r2,r2,58
   40bf0:	10000b1e 	bne	r2,zero,40c20 <utils_hex_to_bin+0xd8>
            *out = (str[i * 2] - '0') << 4;
   40bf4:	e0bff917 	ldw	r2,-28(fp)
   40bf8:	1085883a 	add	r2,r2,r2
   40bfc:	1007883a 	mov	r3,r2
   40c00:	e0bffc17 	ldw	r2,-16(fp)
   40c04:	10c5883a 	add	r2,r2,r3
   40c08:	10800003 	ldbu	r2,0(r2)
   40c0c:	10bff404 	addi	r2,r2,-48
   40c10:	1004913a 	slli	r2,r2,4
   40c14:	1007883a 	mov	r3,r2
   40c18:	e0bffd17 	ldw	r2,-12(fp)
   40c1c:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2] >= 'a' && str[i * 2] <= 'f') {
   40c20:	e0bff917 	ldw	r2,-28(fp)
   40c24:	1085883a 	add	r2,r2,r2
   40c28:	1007883a 	mov	r3,r2
   40c2c:	e0bffc17 	ldw	r2,-16(fp)
   40c30:	10c5883a 	add	r2,r2,r3
   40c34:	10800003 	ldbu	r2,0(r2)
   40c38:	10803fcc 	andi	r2,r2,255
   40c3c:	1080201c 	xori	r2,r2,128
   40c40:	10bfe004 	addi	r2,r2,-128
   40c44:	10801850 	cmplti	r2,r2,97
   40c48:	1000161e 	bne	r2,zero,40ca4 <utils_hex_to_bin+0x15c>
   40c4c:	e0bff917 	ldw	r2,-28(fp)
   40c50:	1085883a 	add	r2,r2,r2
   40c54:	1007883a 	mov	r3,r2
   40c58:	e0bffc17 	ldw	r2,-16(fp)
   40c5c:	10c5883a 	add	r2,r2,r3
   40c60:	10800003 	ldbu	r2,0(r2)
   40c64:	10803fcc 	andi	r2,r2,255
   40c68:	1080201c 	xori	r2,r2,128
   40c6c:	10bfe004 	addi	r2,r2,-128
   40c70:	108019c8 	cmpgei	r2,r2,103
   40c74:	10000b1e 	bne	r2,zero,40ca4 <utils_hex_to_bin+0x15c>
            *out = (10 + str[i * 2] - 'a') << 4;
   40c78:	e0bff917 	ldw	r2,-28(fp)
   40c7c:	1085883a 	add	r2,r2,r2
   40c80:	1007883a 	mov	r3,r2
   40c84:	e0bffc17 	ldw	r2,-16(fp)
   40c88:	10c5883a 	add	r2,r2,r3
   40c8c:	10800003 	ldbu	r2,0(r2)
   40c90:	10bfea44 	addi	r2,r2,-87
   40c94:	1004913a 	slli	r2,r2,4
   40c98:	1007883a 	mov	r3,r2
   40c9c:	e0bffd17 	ldw	r2,-12(fp)
   40ca0:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2] >= 'A' && str[i * 2] <= 'F') {
   40ca4:	e0bff917 	ldw	r2,-28(fp)
   40ca8:	1085883a 	add	r2,r2,r2
   40cac:	1007883a 	mov	r3,r2
   40cb0:	e0bffc17 	ldw	r2,-16(fp)
   40cb4:	10c5883a 	add	r2,r2,r3
   40cb8:	10800003 	ldbu	r2,0(r2)
   40cbc:	10803fcc 	andi	r2,r2,255
   40cc0:	1080201c 	xori	r2,r2,128
   40cc4:	10bfe004 	addi	r2,r2,-128
   40cc8:	10801050 	cmplti	r2,r2,65
   40ccc:	1000161e 	bne	r2,zero,40d28 <utils_hex_to_bin+0x1e0>
   40cd0:	e0bff917 	ldw	r2,-28(fp)
   40cd4:	1085883a 	add	r2,r2,r2
   40cd8:	1007883a 	mov	r3,r2
   40cdc:	e0bffc17 	ldw	r2,-16(fp)
   40ce0:	10c5883a 	add	r2,r2,r3
   40ce4:	10800003 	ldbu	r2,0(r2)
   40ce8:	10803fcc 	andi	r2,r2,255
   40cec:	1080201c 	xori	r2,r2,128
   40cf0:	10bfe004 	addi	r2,r2,-128
   40cf4:	108011c8 	cmpgei	r2,r2,71
   40cf8:	10000b1e 	bne	r2,zero,40d28 <utils_hex_to_bin+0x1e0>
            *out = (10 + str[i * 2] - 'A') << 4;
   40cfc:	e0bff917 	ldw	r2,-28(fp)
   40d00:	1085883a 	add	r2,r2,r2
   40d04:	1007883a 	mov	r3,r2
   40d08:	e0bffc17 	ldw	r2,-16(fp)
   40d0c:	10c5883a 	add	r2,r2,r3
   40d10:	10800003 	ldbu	r2,0(r2)
   40d14:	10bff244 	addi	r2,r2,-55
   40d18:	1004913a 	slli	r2,r2,4
   40d1c:	1007883a 	mov	r3,r2
   40d20:	e0bffd17 	ldw	r2,-12(fp)
   40d24:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2 + 1] >= '0' && str[i * 2 + 1] <= '9') {
   40d28:	e0bff917 	ldw	r2,-28(fp)
   40d2c:	1085883a 	add	r2,r2,r2
   40d30:	10800044 	addi	r2,r2,1
   40d34:	e0fffc17 	ldw	r3,-16(fp)
   40d38:	1885883a 	add	r2,r3,r2
   40d3c:	10800003 	ldbu	r2,0(r2)
   40d40:	10803fcc 	andi	r2,r2,255
   40d44:	1080201c 	xori	r2,r2,128
   40d48:	10bfe004 	addi	r2,r2,-128
   40d4c:	10800c10 	cmplti	r2,r2,48
   40d50:	1000191e 	bne	r2,zero,40db8 <utils_hex_to_bin+0x270>
   40d54:	e0bff917 	ldw	r2,-28(fp)
   40d58:	1085883a 	add	r2,r2,r2
   40d5c:	10800044 	addi	r2,r2,1
   40d60:	e0fffc17 	ldw	r3,-16(fp)
   40d64:	1885883a 	add	r2,r3,r2
   40d68:	10800003 	ldbu	r2,0(r2)
   40d6c:	10803fcc 	andi	r2,r2,255
   40d70:	1080201c 	xori	r2,r2,128
   40d74:	10bfe004 	addi	r2,r2,-128
   40d78:	10800e88 	cmpgei	r2,r2,58
   40d7c:	10000e1e 	bne	r2,zero,40db8 <utils_hex_to_bin+0x270>
            *out |= (str[i * 2 + 1] - '0');
   40d80:	e0bffd17 	ldw	r2,-12(fp)
   40d84:	10800003 	ldbu	r2,0(r2)
   40d88:	1009883a 	mov	r4,r2
   40d8c:	e0bff917 	ldw	r2,-28(fp)
   40d90:	1085883a 	add	r2,r2,r2
   40d94:	10800044 	addi	r2,r2,1
   40d98:	e0fffc17 	ldw	r3,-16(fp)
   40d9c:	1885883a 	add	r2,r3,r2
   40da0:	10800003 	ldbu	r2,0(r2)
   40da4:	10bff404 	addi	r2,r2,-48
   40da8:	2084b03a 	or	r2,r4,r2
   40dac:	1007883a 	mov	r3,r2
   40db0:	e0bffd17 	ldw	r2,-12(fp)
   40db4:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2 + 1] >= 'a' && str[i * 2 + 1] <= 'f') {
   40db8:	e0bff917 	ldw	r2,-28(fp)
   40dbc:	1085883a 	add	r2,r2,r2
   40dc0:	10800044 	addi	r2,r2,1
   40dc4:	e0fffc17 	ldw	r3,-16(fp)
   40dc8:	1885883a 	add	r2,r3,r2
   40dcc:	10800003 	ldbu	r2,0(r2)
   40dd0:	10803fcc 	andi	r2,r2,255
   40dd4:	1080201c 	xori	r2,r2,128
   40dd8:	10bfe004 	addi	r2,r2,-128
   40ddc:	10801850 	cmplti	r2,r2,97
   40de0:	1000191e 	bne	r2,zero,40e48 <utils_hex_to_bin+0x300>
   40de4:	e0bff917 	ldw	r2,-28(fp)
   40de8:	1085883a 	add	r2,r2,r2
   40dec:	10800044 	addi	r2,r2,1
   40df0:	e0fffc17 	ldw	r3,-16(fp)
   40df4:	1885883a 	add	r2,r3,r2
   40df8:	10800003 	ldbu	r2,0(r2)
   40dfc:	10803fcc 	andi	r2,r2,255
   40e00:	1080201c 	xori	r2,r2,128
   40e04:	10bfe004 	addi	r2,r2,-128
   40e08:	108019c8 	cmpgei	r2,r2,103
   40e0c:	10000e1e 	bne	r2,zero,40e48 <utils_hex_to_bin+0x300>
            *out |= (10 + str[i * 2 + 1] - 'a');
   40e10:	e0bffd17 	ldw	r2,-12(fp)
   40e14:	10800003 	ldbu	r2,0(r2)
   40e18:	1009883a 	mov	r4,r2
   40e1c:	e0bff917 	ldw	r2,-28(fp)
   40e20:	1085883a 	add	r2,r2,r2
   40e24:	10800044 	addi	r2,r2,1
   40e28:	e0fffc17 	ldw	r3,-16(fp)
   40e2c:	1885883a 	add	r2,r3,r2
   40e30:	10800003 	ldbu	r2,0(r2)
   40e34:	10bfea44 	addi	r2,r2,-87
   40e38:	2084b03a 	or	r2,r4,r2
   40e3c:	1007883a 	mov	r3,r2
   40e40:	e0bffd17 	ldw	r2,-12(fp)
   40e44:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2 + 1] >= 'A' && str[i * 2 + 1] <= 'F') {
   40e48:	e0bff917 	ldw	r2,-28(fp)
   40e4c:	1085883a 	add	r2,r2,r2
   40e50:	10800044 	addi	r2,r2,1
   40e54:	e0fffc17 	ldw	r3,-16(fp)
   40e58:	1885883a 	add	r2,r3,r2
   40e5c:	10800003 	ldbu	r2,0(r2)
   40e60:	10803fcc 	andi	r2,r2,255
   40e64:	1080201c 	xori	r2,r2,128
   40e68:	10bfe004 	addi	r2,r2,-128
   40e6c:	10801050 	cmplti	r2,r2,65
   40e70:	1000191e 	bne	r2,zero,40ed8 <utils_hex_to_bin+0x390>
   40e74:	e0bff917 	ldw	r2,-28(fp)
   40e78:	1085883a 	add	r2,r2,r2
   40e7c:	10800044 	addi	r2,r2,1
   40e80:	e0fffc17 	ldw	r3,-16(fp)
   40e84:	1885883a 	add	r2,r3,r2
   40e88:	10800003 	ldbu	r2,0(r2)
   40e8c:	10803fcc 	andi	r2,r2,255
   40e90:	1080201c 	xori	r2,r2,128
   40e94:	10bfe004 	addi	r2,r2,-128
   40e98:	108011c8 	cmpgei	r2,r2,71
   40e9c:	10000e1e 	bne	r2,zero,40ed8 <utils_hex_to_bin+0x390>
            *out |= (10 + str[i * 2 + 1] - 'A');
   40ea0:	e0bffd17 	ldw	r2,-12(fp)
   40ea4:	10800003 	ldbu	r2,0(r2)
   40ea8:	1009883a 	mov	r4,r2
   40eac:	e0bff917 	ldw	r2,-28(fp)
   40eb0:	1085883a 	add	r2,r2,r2
   40eb4:	10800044 	addi	r2,r2,1
   40eb8:	e0fffc17 	ldw	r3,-16(fp)
   40ebc:	1885883a 	add	r2,r3,r2
   40ec0:	10800003 	ldbu	r2,0(r2)
   40ec4:	10bff244 	addi	r2,r2,-55
   40ec8:	2084b03a 	or	r2,r4,r2
   40ecc:	1007883a 	mov	r3,r2
   40ed0:	e0bffd17 	ldw	r2,-12(fp)
   40ed4:	10c00005 	stb	r3,0(r2)
        }
        out++;
   40ed8:	e0bffd17 	ldw	r2,-12(fp)
   40edc:	10800044 	addi	r2,r2,1
   40ee0:	e0bffd15 	stw	r2,-12(fp)
{
    int bLen = inLen / 2;
    uint8_t c;
    int i;
    memset(out, 0, bLen);
    for (i = 0; i < bLen; i++) {
   40ee4:	e0bff917 	ldw	r2,-28(fp)
   40ee8:	10800044 	addi	r2,r2,1
   40eec:	e0bff915 	stw	r2,-28(fp)
   40ef0:	e0fff917 	ldw	r3,-28(fp)
   40ef4:	e0bffa17 	ldw	r2,-24(fp)
   40ef8:	18bf2716 	blt	r3,r2,40b98 <__alt_mem_epcs_flash_controller+0xfe02fb98>
        if (str[i * 2 + 1] >= 'A' && str[i * 2 + 1] <= 'F') {
            *out |= (10 + str[i * 2 + 1] - 'A');
        }
        out++;
    }
    *outLen = i;
   40efc:	e0bfff17 	ldw	r2,-4(fp)
   40f00:	e0fff917 	ldw	r3,-28(fp)
   40f04:	10c00015 	stw	r3,0(r2)
}
   40f08:	0001883a 	nop
   40f0c:	e037883a 	mov	sp,fp
   40f10:	dfc00117 	ldw	ra,4(sp)
   40f14:	df000017 	ldw	fp,0(sp)
   40f18:	dec00204 	addi	sp,sp,8
   40f1c:	f800283a 	ret

00040f20 <utils_hex_to_uint8>:

uint8_t* utils_hex_to_uint8(const char* str)
{
   40f20:	defffb04 	addi	sp,sp,-20
   40f24:	dfc00415 	stw	ra,16(sp)
   40f28:	df000315 	stw	fp,12(sp)
   40f2c:	df000304 	addi	fp,sp,12
   40f30:	e13fff15 	stw	r4,-4(fp)
    uint8_t c;
    size_t i;
    if (strlens(str) > TO_UINT8_HEX_BUF_LEN) {
   40f34:	e0bfff17 	ldw	r2,-4(fp)
   40f38:	10000626 	beq	r2,zero,40f54 <utils_hex_to_uint8+0x34>
   40f3c:	e13fff17 	ldw	r4,-4(fp)
   40f40:	0046ef40 	call	46ef4 <strlen>
   40f44:	10820070 	cmpltui	r2,r2,2049
   40f48:	1000021e 	bne	r2,zero,40f54 <utils_hex_to_uint8+0x34>
        return NULL;
   40f4c:	0005883a 	mov	r2,zero
   40f50:	0000e506 	br	412e8 <utils_hex_to_uint8+0x3c8>
    }
    memset(buffer_hex_to_uint8, 0, TO_UINT8_HEX_BUF_LEN);
   40f54:	01820004 	movi	r6,2048
   40f58:	000b883a 	mov	r5,zero
   40f5c:	010001b4 	movhi	r4,6
   40f60:	2106ab04 	addi	r4,r4,6828
   40f64:	0045f3c0 	call	45f3c <memset>
    for (i = 0; i < strlens(str) / 2; i++) {
   40f68:	e03ffe15 	stw	zero,-8(fp)
   40f6c:	0000d306 	br	412bc <utils_hex_to_uint8+0x39c>
        c = 0;
   40f70:	e03ffd05 	stb	zero,-12(fp)
        if (str[i * 2] >= '0' && str[i * 2] <= '9') {
   40f74:	e0bffe17 	ldw	r2,-8(fp)
   40f78:	1085883a 	add	r2,r2,r2
   40f7c:	1007883a 	mov	r3,r2
   40f80:	e0bfff17 	ldw	r2,-4(fp)
   40f84:	10c5883a 	add	r2,r2,r3
   40f88:	10800003 	ldbu	r2,0(r2)
   40f8c:	10803fcc 	andi	r2,r2,255
   40f90:	1080201c 	xori	r2,r2,128
   40f94:	10bfe004 	addi	r2,r2,-128
   40f98:	10800c10 	cmplti	r2,r2,48
   40f9c:	1000171e 	bne	r2,zero,40ffc <utils_hex_to_uint8+0xdc>
   40fa0:	e0bffe17 	ldw	r2,-8(fp)
   40fa4:	1085883a 	add	r2,r2,r2
   40fa8:	1007883a 	mov	r3,r2
   40fac:	e0bfff17 	ldw	r2,-4(fp)
   40fb0:	10c5883a 	add	r2,r2,r3
   40fb4:	10800003 	ldbu	r2,0(r2)
   40fb8:	10803fcc 	andi	r2,r2,255
   40fbc:	1080201c 	xori	r2,r2,128
   40fc0:	10bfe004 	addi	r2,r2,-128
   40fc4:	10800e88 	cmpgei	r2,r2,58
   40fc8:	10000c1e 	bne	r2,zero,40ffc <utils_hex_to_uint8+0xdc>
            c += (str[i * 2] - '0') << 4;
   40fcc:	e0bffe17 	ldw	r2,-8(fp)
   40fd0:	1085883a 	add	r2,r2,r2
   40fd4:	1007883a 	mov	r3,r2
   40fd8:	e0bfff17 	ldw	r2,-4(fp)
   40fdc:	10c5883a 	add	r2,r2,r3
   40fe0:	10800003 	ldbu	r2,0(r2)
   40fe4:	10bff404 	addi	r2,r2,-48
   40fe8:	1004913a 	slli	r2,r2,4
   40fec:	1007883a 	mov	r3,r2
   40ff0:	e0bffd03 	ldbu	r2,-12(fp)
   40ff4:	1885883a 	add	r2,r3,r2
   40ff8:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2] >= 'a' && str[i * 2] <= 'f') {
   40ffc:	e0bffe17 	ldw	r2,-8(fp)
   41000:	1085883a 	add	r2,r2,r2
   41004:	1007883a 	mov	r3,r2
   41008:	e0bfff17 	ldw	r2,-4(fp)
   4100c:	10c5883a 	add	r2,r2,r3
   41010:	10800003 	ldbu	r2,0(r2)
   41014:	10803fcc 	andi	r2,r2,255
   41018:	1080201c 	xori	r2,r2,128
   4101c:	10bfe004 	addi	r2,r2,-128
   41020:	10801850 	cmplti	r2,r2,97
   41024:	1000171e 	bne	r2,zero,41084 <utils_hex_to_uint8+0x164>
   41028:	e0bffe17 	ldw	r2,-8(fp)
   4102c:	1085883a 	add	r2,r2,r2
   41030:	1007883a 	mov	r3,r2
   41034:	e0bfff17 	ldw	r2,-4(fp)
   41038:	10c5883a 	add	r2,r2,r3
   4103c:	10800003 	ldbu	r2,0(r2)
   41040:	10803fcc 	andi	r2,r2,255
   41044:	1080201c 	xori	r2,r2,128
   41048:	10bfe004 	addi	r2,r2,-128
   4104c:	108019c8 	cmpgei	r2,r2,103
   41050:	10000c1e 	bne	r2,zero,41084 <utils_hex_to_uint8+0x164>
            c += (10 + str[i * 2] - 'a') << 4;
   41054:	e0bffe17 	ldw	r2,-8(fp)
   41058:	1085883a 	add	r2,r2,r2
   4105c:	1007883a 	mov	r3,r2
   41060:	e0bfff17 	ldw	r2,-4(fp)
   41064:	10c5883a 	add	r2,r2,r3
   41068:	10800003 	ldbu	r2,0(r2)
   4106c:	10bfea44 	addi	r2,r2,-87
   41070:	1004913a 	slli	r2,r2,4
   41074:	1007883a 	mov	r3,r2
   41078:	e0bffd03 	ldbu	r2,-12(fp)
   4107c:	1885883a 	add	r2,r3,r2
   41080:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2] >= 'A' && str[i * 2] <= 'F') {
   41084:	e0bffe17 	ldw	r2,-8(fp)
   41088:	1085883a 	add	r2,r2,r2
   4108c:	1007883a 	mov	r3,r2
   41090:	e0bfff17 	ldw	r2,-4(fp)
   41094:	10c5883a 	add	r2,r2,r3
   41098:	10800003 	ldbu	r2,0(r2)
   4109c:	10803fcc 	andi	r2,r2,255
   410a0:	1080201c 	xori	r2,r2,128
   410a4:	10bfe004 	addi	r2,r2,-128
   410a8:	10801050 	cmplti	r2,r2,65
   410ac:	1000171e 	bne	r2,zero,4110c <utils_hex_to_uint8+0x1ec>
   410b0:	e0bffe17 	ldw	r2,-8(fp)
   410b4:	1085883a 	add	r2,r2,r2
   410b8:	1007883a 	mov	r3,r2
   410bc:	e0bfff17 	ldw	r2,-4(fp)
   410c0:	10c5883a 	add	r2,r2,r3
   410c4:	10800003 	ldbu	r2,0(r2)
   410c8:	10803fcc 	andi	r2,r2,255
   410cc:	1080201c 	xori	r2,r2,128
   410d0:	10bfe004 	addi	r2,r2,-128
   410d4:	108011c8 	cmpgei	r2,r2,71
   410d8:	10000c1e 	bne	r2,zero,4110c <utils_hex_to_uint8+0x1ec>
            c += (10 + str[i * 2] - 'A') << 4;
   410dc:	e0bffe17 	ldw	r2,-8(fp)
   410e0:	1085883a 	add	r2,r2,r2
   410e4:	1007883a 	mov	r3,r2
   410e8:	e0bfff17 	ldw	r2,-4(fp)
   410ec:	10c5883a 	add	r2,r2,r3
   410f0:	10800003 	ldbu	r2,0(r2)
   410f4:	10bff244 	addi	r2,r2,-55
   410f8:	1004913a 	slli	r2,r2,4
   410fc:	1007883a 	mov	r3,r2
   41100:	e0bffd03 	ldbu	r2,-12(fp)
   41104:	1885883a 	add	r2,r3,r2
   41108:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2 + 1] >= '0' && str[i * 2 + 1] <= '9') {
   4110c:	e0bffe17 	ldw	r2,-8(fp)
   41110:	1085883a 	add	r2,r2,r2
   41114:	10800044 	addi	r2,r2,1
   41118:	e0ffff17 	ldw	r3,-4(fp)
   4111c:	1885883a 	add	r2,r3,r2
   41120:	10800003 	ldbu	r2,0(r2)
   41124:	10803fcc 	andi	r2,r2,255
   41128:	1080201c 	xori	r2,r2,128
   4112c:	10bfe004 	addi	r2,r2,-128
   41130:	10800c10 	cmplti	r2,r2,48
   41134:	1000161e 	bne	r2,zero,41190 <utils_hex_to_uint8+0x270>
   41138:	e0bffe17 	ldw	r2,-8(fp)
   4113c:	1085883a 	add	r2,r2,r2
   41140:	10800044 	addi	r2,r2,1
   41144:	e0ffff17 	ldw	r3,-4(fp)
   41148:	1885883a 	add	r2,r3,r2
   4114c:	10800003 	ldbu	r2,0(r2)
   41150:	10803fcc 	andi	r2,r2,255
   41154:	1080201c 	xori	r2,r2,128
   41158:	10bfe004 	addi	r2,r2,-128
   4115c:	10800e88 	cmpgei	r2,r2,58
   41160:	10000b1e 	bne	r2,zero,41190 <utils_hex_to_uint8+0x270>
            c += (str[i * 2 + 1] - '0');
   41164:	e0bffe17 	ldw	r2,-8(fp)
   41168:	1085883a 	add	r2,r2,r2
   4116c:	10800044 	addi	r2,r2,1
   41170:	e0ffff17 	ldw	r3,-4(fp)
   41174:	1885883a 	add	r2,r3,r2
   41178:	10800003 	ldbu	r2,0(r2)
   4117c:	1007883a 	mov	r3,r2
   41180:	e0bffd03 	ldbu	r2,-12(fp)
   41184:	1885883a 	add	r2,r3,r2
   41188:	10bff404 	addi	r2,r2,-48
   4118c:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2 + 1] >= 'a' && str[i * 2 + 1] <= 'f') {
   41190:	e0bffe17 	ldw	r2,-8(fp)
   41194:	1085883a 	add	r2,r2,r2
   41198:	10800044 	addi	r2,r2,1
   4119c:	e0ffff17 	ldw	r3,-4(fp)
   411a0:	1885883a 	add	r2,r3,r2
   411a4:	10800003 	ldbu	r2,0(r2)
   411a8:	10803fcc 	andi	r2,r2,255
   411ac:	1080201c 	xori	r2,r2,128
   411b0:	10bfe004 	addi	r2,r2,-128
   411b4:	10801850 	cmplti	r2,r2,97
   411b8:	1000161e 	bne	r2,zero,41214 <utils_hex_to_uint8+0x2f4>
   411bc:	e0bffe17 	ldw	r2,-8(fp)
   411c0:	1085883a 	add	r2,r2,r2
   411c4:	10800044 	addi	r2,r2,1
   411c8:	e0ffff17 	ldw	r3,-4(fp)
   411cc:	1885883a 	add	r2,r3,r2
   411d0:	10800003 	ldbu	r2,0(r2)
   411d4:	10803fcc 	andi	r2,r2,255
   411d8:	1080201c 	xori	r2,r2,128
   411dc:	10bfe004 	addi	r2,r2,-128
   411e0:	108019c8 	cmpgei	r2,r2,103
   411e4:	10000b1e 	bne	r2,zero,41214 <utils_hex_to_uint8+0x2f4>
            c += (10 + str[i * 2 + 1] - 'a');
   411e8:	e0bffe17 	ldw	r2,-8(fp)
   411ec:	1085883a 	add	r2,r2,r2
   411f0:	10800044 	addi	r2,r2,1
   411f4:	e0ffff17 	ldw	r3,-4(fp)
   411f8:	1885883a 	add	r2,r3,r2
   411fc:	10800003 	ldbu	r2,0(r2)
   41200:	1007883a 	mov	r3,r2
   41204:	e0bffd03 	ldbu	r2,-12(fp)
   41208:	1885883a 	add	r2,r3,r2
   4120c:	10bfea44 	addi	r2,r2,-87
   41210:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2 + 1] >= 'A' && str[i * 2 + 1] <= 'F') {
   41214:	e0bffe17 	ldw	r2,-8(fp)
   41218:	1085883a 	add	r2,r2,r2
   4121c:	10800044 	addi	r2,r2,1
   41220:	e0ffff17 	ldw	r3,-4(fp)
   41224:	1885883a 	add	r2,r3,r2
   41228:	10800003 	ldbu	r2,0(r2)
   4122c:	10803fcc 	andi	r2,r2,255
   41230:	1080201c 	xori	r2,r2,128
   41234:	10bfe004 	addi	r2,r2,-128
   41238:	10801050 	cmplti	r2,r2,65
   4123c:	1000161e 	bne	r2,zero,41298 <utils_hex_to_uint8+0x378>
   41240:	e0bffe17 	ldw	r2,-8(fp)
   41244:	1085883a 	add	r2,r2,r2
   41248:	10800044 	addi	r2,r2,1
   4124c:	e0ffff17 	ldw	r3,-4(fp)
   41250:	1885883a 	add	r2,r3,r2
   41254:	10800003 	ldbu	r2,0(r2)
   41258:	10803fcc 	andi	r2,r2,255
   4125c:	1080201c 	xori	r2,r2,128
   41260:	10bfe004 	addi	r2,r2,-128
   41264:	108011c8 	cmpgei	r2,r2,71
   41268:	10000b1e 	bne	r2,zero,41298 <utils_hex_to_uint8+0x378>
            c += (10 + str[i * 2 + 1] - 'A');
   4126c:	e0bffe17 	ldw	r2,-8(fp)
   41270:	1085883a 	add	r2,r2,r2
   41274:	10800044 	addi	r2,r2,1
   41278:	e0ffff17 	ldw	r3,-4(fp)
   4127c:	1885883a 	add	r2,r3,r2
   41280:	10800003 	ldbu	r2,0(r2)
   41284:	1007883a 	mov	r3,r2
   41288:	e0bffd03 	ldbu	r2,-12(fp)
   4128c:	1885883a 	add	r2,r3,r2
   41290:	10bff244 	addi	r2,r2,-55
   41294:	e0bffd05 	stb	r2,-12(fp)
        }
        buffer_hex_to_uint8[i] = c;
   41298:	008001b4 	movhi	r2,6
   4129c:	1086ab04 	addi	r2,r2,6828
   412a0:	e0fffe17 	ldw	r3,-8(fp)
   412a4:	10c5883a 	add	r2,r2,r3
   412a8:	e0fffd03 	ldbu	r3,-12(fp)
   412ac:	10c00005 	stb	r3,0(r2)
    size_t i;
    if (strlens(str) > TO_UINT8_HEX_BUF_LEN) {
        return NULL;
    }
    memset(buffer_hex_to_uint8, 0, TO_UINT8_HEX_BUF_LEN);
    for (i = 0; i < strlens(str) / 2; i++) {
   412b0:	e0bffe17 	ldw	r2,-8(fp)
   412b4:	10800044 	addi	r2,r2,1
   412b8:	e0bffe15 	stw	r2,-8(fp)
   412bc:	e0bfff17 	ldw	r2,-4(fp)
   412c0:	10000426 	beq	r2,zero,412d4 <utils_hex_to_uint8+0x3b4>
   412c4:	e13fff17 	ldw	r4,-4(fp)
   412c8:	0046ef40 	call	46ef4 <strlen>
   412cc:	1004d07a 	srli	r2,r2,1
   412d0:	00000106 	br	412d8 <utils_hex_to_uint8+0x3b8>
   412d4:	0005883a 	mov	r2,zero
   412d8:	e0fffe17 	ldw	r3,-8(fp)
   412dc:	18bf2436 	bltu	r3,r2,40f70 <__alt_mem_epcs_flash_controller+0xfe02ff70>
        if (str[i * 2 + 1] >= 'A' && str[i * 2 + 1] <= 'F') {
            c += (10 + str[i * 2 + 1] - 'A');
        }
        buffer_hex_to_uint8[i] = c;
    }
    return buffer_hex_to_uint8;
   412e0:	008001b4 	movhi	r2,6
   412e4:	1086ab04 	addi	r2,r2,6828
}
   412e8:	e037883a 	mov	sp,fp
   412ec:	dfc00117 	ldw	ra,4(sp)
   412f0:	df000017 	ldw	fp,0(sp)
   412f4:	dec00204 	addi	sp,sp,8
   412f8:	f800283a 	ret

000412fc <utils_bin_to_hex>:


void utils_bin_to_hex(unsigned char* bin_in, size_t inlen, char* hex_out)
{
   412fc:	defffb04 	addi	sp,sp,-20
   41300:	df000415 	stw	fp,16(sp)
   41304:	df000404 	addi	fp,sp,16
   41308:	e13ffd15 	stw	r4,-12(fp)
   4130c:	e17ffe15 	stw	r5,-8(fp)
   41310:	e1bfff15 	stw	r6,-4(fp)
    static char digits[] = "0123456789abcdef";
    size_t i;
    for (i = 0; i < inlen; i++) {
   41314:	e03ffc15 	stw	zero,-16(fp)
   41318:	00002506 	br	413b0 <utils_bin_to_hex+0xb4>
        hex_out[i * 2] = digits[(bin_in[i] >> 4) & 0xF];
   4131c:	e0bffc17 	ldw	r2,-16(fp)
   41320:	1085883a 	add	r2,r2,r2
   41324:	1007883a 	mov	r3,r2
   41328:	e0bfff17 	ldw	r2,-4(fp)
   4132c:	10c7883a 	add	r3,r2,r3
   41330:	e13ffd17 	ldw	r4,-12(fp)
   41334:	e0bffc17 	ldw	r2,-16(fp)
   41338:	2085883a 	add	r2,r4,r2
   4133c:	10800003 	ldbu	r2,0(r2)
   41340:	10803fcc 	andi	r2,r2,255
   41344:	1004d13a 	srli	r2,r2,4
   41348:	10803fcc 	andi	r2,r2,255
   4134c:	110003cc 	andi	r4,r2,15
   41350:	008001b4 	movhi	r2,6
   41354:	10b70904 	addi	r2,r2,-9180
   41358:	1105883a 	add	r2,r2,r4
   4135c:	10800003 	ldbu	r2,0(r2)
   41360:	18800005 	stb	r2,0(r3)
        hex_out[i * 2 + 1] = digits[bin_in[i] & 0xF];
   41364:	e0bffc17 	ldw	r2,-16(fp)
   41368:	1085883a 	add	r2,r2,r2
   4136c:	10800044 	addi	r2,r2,1
   41370:	e0ffff17 	ldw	r3,-4(fp)
   41374:	1887883a 	add	r3,r3,r2
   41378:	e13ffd17 	ldw	r4,-12(fp)
   4137c:	e0bffc17 	ldw	r2,-16(fp)
   41380:	2085883a 	add	r2,r4,r2
   41384:	10800003 	ldbu	r2,0(r2)
   41388:	10803fcc 	andi	r2,r2,255
   4138c:	110003cc 	andi	r4,r2,15
   41390:	008001b4 	movhi	r2,6
   41394:	10b70904 	addi	r2,r2,-9180
   41398:	1105883a 	add	r2,r2,r4
   4139c:	10800003 	ldbu	r2,0(r2)
   413a0:	18800005 	stb	r2,0(r3)

void utils_bin_to_hex(unsigned char* bin_in, size_t inlen, char* hex_out)
{
    static char digits[] = "0123456789abcdef";
    size_t i;
    for (i = 0; i < inlen; i++) {
   413a4:	e0bffc17 	ldw	r2,-16(fp)
   413a8:	10800044 	addi	r2,r2,1
   413ac:	e0bffc15 	stw	r2,-16(fp)
   413b0:	e0fffc17 	ldw	r3,-16(fp)
   413b4:	e0bffe17 	ldw	r2,-8(fp)
   413b8:	18bfd836 	bltu	r3,r2,4131c <__alt_mem_epcs_flash_controller+0xfe03031c>
        hex_out[i * 2] = digits[(bin_in[i] >> 4) & 0xF];
        hex_out[i * 2 + 1] = digits[bin_in[i] & 0xF];
    }
    hex_out[inlen * 2] = '\0';
   413bc:	e0bffe17 	ldw	r2,-8(fp)
   413c0:	1085883a 	add	r2,r2,r2
   413c4:	1007883a 	mov	r3,r2
   413c8:	e0bfff17 	ldw	r2,-4(fp)
   413cc:	10c5883a 	add	r2,r2,r3
   413d0:	10000005 	stb	zero,0(r2)
}
   413d4:	0001883a 	nop
   413d8:	e037883a 	mov	sp,fp
   413dc:	df000017 	ldw	fp,0(sp)
   413e0:	dec00104 	addi	sp,sp,4
   413e4:	f800283a 	ret

000413e8 <utils_uint8_to_hex>:


char* utils_uint8_to_hex(const uint8_t* bin, size_t l)
{
   413e8:	defffb04 	addi	sp,sp,-20
   413ec:	dfc00415 	stw	ra,16(sp)
   413f0:	df000315 	stw	fp,12(sp)
   413f4:	df000304 	addi	fp,sp,12
   413f8:	e13ffe15 	stw	r4,-8(fp)
   413fc:	e17fff15 	stw	r5,-4(fp)
    static char digits[] = "0123456789abcdef";
    size_t i;
    if (l > (TO_UINT8_HEX_BUF_LEN / 2 - 1)) {
   41400:	e0bfff17 	ldw	r2,-4(fp)
   41404:	10810030 	cmpltui	r2,r2,1024
   41408:	1000021e 	bne	r2,zero,41414 <utils_uint8_to_hex+0x2c>
        return NULL;
   4140c:	0005883a 	mov	r2,zero
   41410:	00003a06 	br	414fc <utils_uint8_to_hex+0x114>
    }
    memset(buffer_uint8_to_hex, 0, TO_UINT8_HEX_BUF_LEN);
   41414:	01820004 	movi	r6,2048
   41418:	000b883a 	mov	r5,zero
   4141c:	010001b4 	movhi	r4,6
   41420:	2108ab04 	addi	r4,r4,8876
   41424:	0045f3c0 	call	45f3c <memset>
    for (i = 0; i < l; i++) {
   41428:	e03ffd15 	stw	zero,-12(fp)
   4142c:	00002706 	br	414cc <utils_uint8_to_hex+0xe4>
        buffer_uint8_to_hex[i * 2] = digits[(bin[i] >> 4) & 0xF];
   41430:	e0bffd17 	ldw	r2,-12(fp)
   41434:	1085883a 	add	r2,r2,r2
   41438:	1009883a 	mov	r4,r2
   4143c:	e0fffe17 	ldw	r3,-8(fp)
   41440:	e0bffd17 	ldw	r2,-12(fp)
   41444:	1885883a 	add	r2,r3,r2
   41448:	10800003 	ldbu	r2,0(r2)
   4144c:	10803fcc 	andi	r2,r2,255
   41450:	1004d13a 	srli	r2,r2,4
   41454:	10803fcc 	andi	r2,r2,255
   41458:	10c003cc 	andi	r3,r2,15
   4145c:	008001b4 	movhi	r2,6
   41460:	10b70e04 	addi	r2,r2,-9160
   41464:	10c5883a 	add	r2,r2,r3
   41468:	10c00003 	ldbu	r3,0(r2)
   4146c:	008001b4 	movhi	r2,6
   41470:	1088ab04 	addi	r2,r2,8876
   41474:	1105883a 	add	r2,r2,r4
   41478:	10c00005 	stb	r3,0(r2)
        buffer_uint8_to_hex[i * 2 + 1] = digits[bin[i] & 0xF];
   4147c:	e0bffd17 	ldw	r2,-12(fp)
   41480:	1085883a 	add	r2,r2,r2
   41484:	11000044 	addi	r4,r2,1
   41488:	e0fffe17 	ldw	r3,-8(fp)
   4148c:	e0bffd17 	ldw	r2,-12(fp)
   41490:	1885883a 	add	r2,r3,r2
   41494:	10800003 	ldbu	r2,0(r2)
   41498:	10803fcc 	andi	r2,r2,255
   4149c:	10c003cc 	andi	r3,r2,15
   414a0:	008001b4 	movhi	r2,6
   414a4:	10b70e04 	addi	r2,r2,-9160
   414a8:	10c5883a 	add	r2,r2,r3
   414ac:	10c00003 	ldbu	r3,0(r2)
   414b0:	008001b4 	movhi	r2,6
   414b4:	1088ab04 	addi	r2,r2,8876
   414b8:	1105883a 	add	r2,r2,r4
   414bc:	10c00005 	stb	r3,0(r2)
    size_t i;
    if (l > (TO_UINT8_HEX_BUF_LEN / 2 - 1)) {
        return NULL;
    }
    memset(buffer_uint8_to_hex, 0, TO_UINT8_HEX_BUF_LEN);
    for (i = 0; i < l; i++) {
   414c0:	e0bffd17 	ldw	r2,-12(fp)
   414c4:	10800044 	addi	r2,r2,1
   414c8:	e0bffd15 	stw	r2,-12(fp)
   414cc:	e0fffd17 	ldw	r3,-12(fp)
   414d0:	e0bfff17 	ldw	r2,-4(fp)
   414d4:	18bfd636 	bltu	r3,r2,41430 <__alt_mem_epcs_flash_controller+0xfe030430>
        buffer_uint8_to_hex[i * 2] = digits[(bin[i] >> 4) & 0xF];
        buffer_uint8_to_hex[i * 2 + 1] = digits[bin[i] & 0xF];
    }
    buffer_uint8_to_hex[l * 2] = '\0';
   414d8:	e0bfff17 	ldw	r2,-4(fp)
   414dc:	1085883a 	add	r2,r2,r2
   414e0:	1007883a 	mov	r3,r2
   414e4:	008001b4 	movhi	r2,6
   414e8:	1088ab04 	addi	r2,r2,8876
   414ec:	10c5883a 	add	r2,r2,r3
   414f0:	10000005 	stb	zero,0(r2)
    return buffer_uint8_to_hex;
   414f4:	008001b4 	movhi	r2,6
   414f8:	1088ab04 	addi	r2,r2,8876
}
   414fc:	e037883a 	mov	sp,fp
   41500:	dfc00117 	ldw	ra,4(sp)
   41504:	df000017 	ldw	fp,0(sp)
   41508:	dec00204 	addi	sp,sp,8
   4150c:	f800283a 	ret

00041510 <utils_reverse_hex>:

void utils_reverse_hex(char* h, int len)
{
   41510:	defffa04 	addi	sp,sp,-24
   41514:	dfc00515 	stw	ra,20(sp)
   41518:	df000415 	stw	fp,16(sp)
   4151c:	df000404 	addi	fp,sp,16
   41520:	e13ffe15 	stw	r4,-8(fp)
   41524:	e17fff15 	stw	r5,-4(fp)
    char* copy = btc_malloc(len);
   41528:	e0bfff17 	ldw	r2,-4(fp)
   4152c:	1009883a 	mov	r4,r2
   41530:	00066000 	call	6600 <btc_malloc>
   41534:	e0bffd15 	stw	r2,-12(fp)
    int i;
    strncpy(copy, h, len);
   41538:	e0bfff17 	ldw	r2,-4(fp)
   4153c:	100d883a 	mov	r6,r2
   41540:	e17ffe17 	ldw	r5,-8(fp)
   41544:	e13ffd17 	ldw	r4,-12(fp)
   41548:	004705c0 	call	4705c <strncpy>
    for (i = 0; i < len; i += 2) {
   4154c:	e03ffc15 	stw	zero,-16(fp)
   41550:	00001a06 	br	415bc <utils_reverse_hex+0xac>
        h[i] = copy[len - i - 2];
   41554:	e0bffc17 	ldw	r2,-16(fp)
   41558:	e0fffe17 	ldw	r3,-8(fp)
   4155c:	1885883a 	add	r2,r3,r2
   41560:	e13fff17 	ldw	r4,-4(fp)
   41564:	e0fffc17 	ldw	r3,-16(fp)
   41568:	20c7c83a 	sub	r3,r4,r3
   4156c:	18ffff84 	addi	r3,r3,-2
   41570:	e13ffd17 	ldw	r4,-12(fp)
   41574:	20c7883a 	add	r3,r4,r3
   41578:	18c00003 	ldbu	r3,0(r3)
   4157c:	10c00005 	stb	r3,0(r2)
        h[i + 1] = copy[len - i - 1];
   41580:	e0bffc17 	ldw	r2,-16(fp)
   41584:	10800044 	addi	r2,r2,1
   41588:	e0fffe17 	ldw	r3,-8(fp)
   4158c:	1885883a 	add	r2,r3,r2
   41590:	e13fff17 	ldw	r4,-4(fp)
   41594:	e0fffc17 	ldw	r3,-16(fp)
   41598:	20c7c83a 	sub	r3,r4,r3
   4159c:	18ffffc4 	addi	r3,r3,-1
   415a0:	e13ffd17 	ldw	r4,-12(fp)
   415a4:	20c7883a 	add	r3,r4,r3
   415a8:	18c00003 	ldbu	r3,0(r3)
   415ac:	10c00005 	stb	r3,0(r2)
void utils_reverse_hex(char* h, int len)
{
    char* copy = btc_malloc(len);
    int i;
    strncpy(copy, h, len);
    for (i = 0; i < len; i += 2) {
   415b0:	e0bffc17 	ldw	r2,-16(fp)
   415b4:	10800084 	addi	r2,r2,2
   415b8:	e0bffc15 	stw	r2,-16(fp)
   415bc:	e0fffc17 	ldw	r3,-16(fp)
   415c0:	e0bfff17 	ldw	r2,-4(fp)
   415c4:	18bfe316 	blt	r3,r2,41554 <__alt_mem_epcs_flash_controller+0xfe030554>
        h[i] = copy[len - i - 2];
        h[i + 1] = copy[len - i - 1];
    }
    btc_free(copy);
   415c8:	e13ffd17 	ldw	r4,-12(fp)
   415cc:	00066c40 	call	66c4 <btc_free>
}
   415d0:	0001883a 	nop
   415d4:	e037883a 	mov	sp,fp
   415d8:	dfc00117 	ldw	ra,4(sp)
   415dc:	df000017 	ldw	fp,0(sp)
   415e0:	dec00204 	addi	sp,sp,8
   415e4:	f800283a 	ret

000415e8 <utils_hex_digit>:
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
};

signed char utils_hex_digit(char c)
{
   415e8:	defffe04 	addi	sp,sp,-8
   415ec:	df000115 	stw	fp,4(sp)
   415f0:	df000104 	addi	fp,sp,4
   415f4:	2005883a 	mov	r2,r4
   415f8:	e0bfff05 	stb	r2,-4(fp)
    return p_util_hexdigit[(unsigned char)c];
   415fc:	e0bfff03 	ldbu	r2,-4(fp)
   41600:	10c03fcc 	andi	r3,r2,255
   41604:	008001b4 	movhi	r2,6
   41608:	10b42104 	addi	r2,r2,-12156
   4160c:	10c5883a 	add	r2,r2,r3
   41610:	10800003 	ldbu	r2,0(r2)
}
   41614:	e037883a 	mov	sp,fp
   41618:	df000017 	ldw	fp,0(sp)
   4161c:	dec00104 	addi	sp,sp,4
   41620:	f800283a 	ret

00041624 <utils_uint256_sethex>:

void utils_uint256_sethex(char* psz, uint8_t* out)
{
   41624:	defff804 	addi	sp,sp,-32
   41628:	dfc00715 	stw	ra,28(sp)
   4162c:	df000615 	stw	fp,24(sp)
   41630:	df000604 	addi	fp,sp,24
   41634:	e13ffe15 	stw	r4,-8(fp)
   41638:	e17fff15 	stw	r5,-4(fp)
    memset(out, 0, sizeof(uint256));
   4163c:	01800804 	movi	r6,32
   41640:	000b883a 	mov	r5,zero
   41644:	e13fff17 	ldw	r4,-4(fp)
   41648:	0045f3c0 	call	45f3c <memset>

    // skip leading spaces
    while (isspace(*psz))
   4164c:	00000306 	br	4165c <utils_uint256_sethex+0x38>
        psz++;
   41650:	e0bffe17 	ldw	r2,-8(fp)
   41654:	10800044 	addi	r2,r2,1
   41658:	e0bffe15 	stw	r2,-8(fp)
void utils_uint256_sethex(char* psz, uint8_t* out)
{
    memset(out, 0, sizeof(uint256));

    // skip leading spaces
    while (isspace(*psz))
   4165c:	d0e01417 	ldw	r3,-32688(gp)
   41660:	e0bffe17 	ldw	r2,-8(fp)
   41664:	10800003 	ldbu	r2,0(r2)
   41668:	10803fcc 	andi	r2,r2,255
   4166c:	1080201c 	xori	r2,r2,128
   41670:	10bfe004 	addi	r2,r2,-128
   41674:	10800044 	addi	r2,r2,1
   41678:	1885883a 	add	r2,r3,r2
   4167c:	10800003 	ldbu	r2,0(r2)
   41680:	10803fcc 	andi	r2,r2,255
   41684:	1080020c 	andi	r2,r2,8
   41688:	103ff11e 	bne	r2,zero,41650 <__alt_mem_epcs_flash_controller+0xfe030650>
        psz++;

    // skip 0x
    if (psz[0] == '0' && tolower(psz[1]) == 'x')
   4168c:	e0bffe17 	ldw	r2,-8(fp)
   41690:	10800003 	ldbu	r2,0(r2)
   41694:	10803fcc 	andi	r2,r2,255
   41698:	1080201c 	xori	r2,r2,128
   4169c:	10bfe004 	addi	r2,r2,-128
   416a0:	10800c18 	cmpnei	r2,r2,48
   416a4:	1000151e 	bne	r2,zero,416fc <utils_uint256_sethex+0xd8>
   416a8:	e0bffe17 	ldw	r2,-8(fp)
   416ac:	10800043 	ldbu	r2,1(r2)
   416b0:	e0bffb05 	stb	r2,-20(fp)
   416b4:	d0e01417 	ldw	r3,-32688(gp)
   416b8:	e0bffb07 	ldb	r2,-20(fp)
   416bc:	10800044 	addi	r2,r2,1
   416c0:	1885883a 	add	r2,r3,r2
   416c4:	10800003 	ldbu	r2,0(r2)
   416c8:	10803fcc 	andi	r2,r2,255
   416cc:	108000cc 	andi	r2,r2,3
   416d0:	10800058 	cmpnei	r2,r2,1
   416d4:	1000031e 	bne	r2,zero,416e4 <utils_uint256_sethex+0xc0>
   416d8:	e0bffb07 	ldb	r2,-20(fp)
   416dc:	10800804 	addi	r2,r2,32
   416e0:	00000106 	br	416e8 <utils_uint256_sethex+0xc4>
   416e4:	e0bffb07 	ldb	r2,-20(fp)
   416e8:	10801e18 	cmpnei	r2,r2,120
   416ec:	1000031e 	bne	r2,zero,416fc <utils_uint256_sethex+0xd8>
        psz += 2;
   416f0:	e0bffe17 	ldw	r2,-8(fp)
   416f4:	10800084 	addi	r2,r2,2
   416f8:	e0bffe15 	stw	r2,-8(fp)

    // hex string to uint
    const char* pbegin = psz;
   416fc:	e0bffe17 	ldw	r2,-8(fp)
   41700:	e0bffc15 	stw	r2,-16(fp)
    while (utils_hex_digit(*psz) != -1)
   41704:	00000306 	br	41714 <utils_uint256_sethex+0xf0>
        psz++;
   41708:	e0bffe17 	ldw	r2,-8(fp)
   4170c:	10800044 	addi	r2,r2,1
   41710:	e0bffe15 	stw	r2,-8(fp)
    if (psz[0] == '0' && tolower(psz[1]) == 'x')
        psz += 2;

    // hex string to uint
    const char* pbegin = psz;
    while (utils_hex_digit(*psz) != -1)
   41714:	e0bffe17 	ldw	r2,-8(fp)
   41718:	10800003 	ldbu	r2,0(r2)
   4171c:	10803fcc 	andi	r2,r2,255
   41720:	1080201c 	xori	r2,r2,128
   41724:	10bfe004 	addi	r2,r2,-128
   41728:	1009883a 	mov	r4,r2
   4172c:	00415e80 	call	415e8 <utils_hex_digit>
   41730:	10803fcc 	andi	r2,r2,255
   41734:	1080201c 	xori	r2,r2,128
   41738:	10bfe004 	addi	r2,r2,-128
   4173c:	10bfffd8 	cmpnei	r2,r2,-1
   41740:	103ff11e 	bne	r2,zero,41708 <__alt_mem_epcs_flash_controller+0xfe030708>
        psz++;
    psz--;
   41744:	e0bffe17 	ldw	r2,-8(fp)
   41748:	10bfffc4 	addi	r2,r2,-1
   4174c:	e0bffe15 	stw	r2,-8(fp)
    unsigned char* p1 = (unsigned char*)out;
   41750:	e0bfff17 	ldw	r2,-4(fp)
   41754:	e0bffa15 	stw	r2,-24(fp)
    unsigned char* pend = p1 + sizeof(uint256);
   41758:	e0bffa17 	ldw	r2,-24(fp)
   4175c:	10800804 	addi	r2,r2,32
   41760:	e0bffd15 	stw	r2,-12(fp)
    while (psz >= pbegin && p1 < pend) {
   41764:	00002506 	br	417fc <utils_uint256_sethex+0x1d8>
        *p1 = utils_hex_digit(*psz--);
   41768:	e0bffe17 	ldw	r2,-8(fp)
   4176c:	10ffffc4 	addi	r3,r2,-1
   41770:	e0fffe15 	stw	r3,-8(fp)
   41774:	10800003 	ldbu	r2,0(r2)
   41778:	10803fcc 	andi	r2,r2,255
   4177c:	1080201c 	xori	r2,r2,128
   41780:	10bfe004 	addi	r2,r2,-128
   41784:	1009883a 	mov	r4,r2
   41788:	00415e80 	call	415e8 <utils_hex_digit>
   4178c:	1007883a 	mov	r3,r2
   41790:	e0bffa17 	ldw	r2,-24(fp)
   41794:	10c00005 	stb	r3,0(r2)
        if (psz >= pbegin) {
   41798:	e0fffe17 	ldw	r3,-8(fp)
   4179c:	e0bffc17 	ldw	r2,-16(fp)
   417a0:	18801636 	bltu	r3,r2,417fc <utils_uint256_sethex+0x1d8>
            *p1 |= ((unsigned char)utils_hex_digit(*psz--) << 4);
   417a4:	e0bffe17 	ldw	r2,-8(fp)
   417a8:	10ffffc4 	addi	r3,r2,-1
   417ac:	e0fffe15 	stw	r3,-8(fp)
   417b0:	10800003 	ldbu	r2,0(r2)
   417b4:	10803fcc 	andi	r2,r2,255
   417b8:	1080201c 	xori	r2,r2,128
   417bc:	10bfe004 	addi	r2,r2,-128
   417c0:	1009883a 	mov	r4,r2
   417c4:	00415e80 	call	415e8 <utils_hex_digit>
   417c8:	10803fcc 	andi	r2,r2,255
   417cc:	1008913a 	slli	r4,r2,4
   417d0:	e0bffa17 	ldw	r2,-24(fp)
   417d4:	10800003 	ldbu	r2,0(r2)
   417d8:	1007883a 	mov	r3,r2
   417dc:	2005883a 	mov	r2,r4
   417e0:	1884b03a 	or	r2,r3,r2
   417e4:	1007883a 	mov	r3,r2
   417e8:	e0bffa17 	ldw	r2,-24(fp)
   417ec:	10c00005 	stb	r3,0(r2)
            p1++;
   417f0:	e0bffa17 	ldw	r2,-24(fp)
   417f4:	10800044 	addi	r2,r2,1
   417f8:	e0bffa15 	stw	r2,-24(fp)
    while (utils_hex_digit(*psz) != -1)
        psz++;
    psz--;
    unsigned char* p1 = (unsigned char*)out;
    unsigned char* pend = p1 + sizeof(uint256);
    while (psz >= pbegin && p1 < pend) {
   417fc:	e0fffe17 	ldw	r3,-8(fp)
   41800:	e0bffc17 	ldw	r2,-16(fp)
   41804:	18800336 	bltu	r3,r2,41814 <utils_uint256_sethex+0x1f0>
   41808:	e0fffa17 	ldw	r3,-24(fp)
   4180c:	e0bffd17 	ldw	r2,-12(fp)
   41810:	18bfd536 	bltu	r3,r2,41768 <__alt_mem_epcs_flash_controller+0xfe030768>
        if (psz >= pbegin) {
            *p1 |= ((unsigned char)utils_hex_digit(*psz--) << 4);
            p1++;
        }
    }
}
   41814:	0001883a 	nop
   41818:	e037883a 	mov	sp,fp
   4181c:	dfc00117 	ldw	ra,4(sp)
   41820:	df000017 	ldw	fp,0(sp)
   41824:	dec00204 	addi	sp,sp,8
   41828:	f800283a 	ret

0004182c <safe_malloc>:

void* safe_malloc(size_t size)
{
   4182c:	defffc04 	addi	sp,sp,-16
   41830:	dfc00315 	stw	ra,12(sp)
   41834:	df000215 	stw	fp,8(sp)
   41838:	df000204 	addi	fp,sp,8
   4183c:	e13fff15 	stw	r4,-4(fp)
    void* result;

    if ((result = malloc(size))) { /* assignment intentional */
   41840:	e13fff17 	ldw	r4,-4(fp)
   41844:	00453e80 	call	453e8 <malloc>
   41848:	e0bffe15 	stw	r2,-8(fp)
   4184c:	e0bffe17 	ldw	r2,-8(fp)
   41850:	10000226 	beq	r2,zero,4185c <safe_malloc+0x30>
        return (result);
   41854:	e0bffe17 	ldw	r2,-8(fp)
   41858:	00000806 	br	4187c <safe_malloc+0x50>
    } else {
        printf("memory overflow: malloc failed in safe_malloc.");
   4185c:	010001b4 	movhi	r4,6
   41860:	21346104 	addi	r4,r4,-11900
   41864:	00460940 	call	46094 <printf>
        printf("  Exiting Program.\n");
   41868:	010001b4 	movhi	r4,6
   4186c:	21346d04 	addi	r4,r4,-11852
   41870:	00461b00 	call	461b0 <puts>
        exit(-1);
   41874:	013fffc4 	movi	r4,-1
   41878:	00451a40 	call	451a4 <exit>
        return (0);
    }
}
   4187c:	e037883a 	mov	sp,fp
   41880:	dfc00117 	ldw	ra,4(sp)
   41884:	df000017 	ldw	fp,0(sp)
   41888:	dec00204 	addi	sp,sp,8
   4188c:	f800283a 	ret

00041890 <btc_cheap_random_bytes>:

void btc_cheap_random_bytes(uint8_t* buf, uint32_t len)
{
   41890:	defffa04 	addi	sp,sp,-24
   41894:	dfc00515 	stw	ra,20(sp)
   41898:	df000415 	stw	fp,16(sp)
   4189c:	dc000315 	stw	r16,12(sp)
   418a0:	df000404 	addi	fp,sp,16
   418a4:	e13ffd15 	stw	r4,-12(fp)
   418a8:	e17ffe15 	stw	r5,-8(fp)
    srand(time(NULL));
   418ac:	0009883a 	mov	r4,zero
   418b0:	004975c0 	call	4975c <time>
   418b4:	1009883a 	mov	r4,r2
   418b8:	00461c40 	call	461c4 <srand>
    for (uint32_t i = 0; i < len; i++) {
   418bc:	e03ffc15 	stw	zero,-16(fp)
   418c0:	00000806 	br	418e4 <btc_cheap_random_bytes+0x54>
        buf[i] = rand();
   418c4:	e0fffd17 	ldw	r3,-12(fp)
   418c8:	e0bffc17 	ldw	r2,-16(fp)
   418cc:	18a1883a 	add	r16,r3,r2
   418d0:	00461dc0 	call	461dc <rand>
   418d4:	80800005 	stb	r2,0(r16)
}

void btc_cheap_random_bytes(uint8_t* buf, uint32_t len)
{
    srand(time(NULL));
    for (uint32_t i = 0; i < len; i++) {
   418d8:	e0bffc17 	ldw	r2,-16(fp)
   418dc:	10800044 	addi	r2,r2,1
   418e0:	e0bffc15 	stw	r2,-16(fp)
   418e4:	e0fffc17 	ldw	r3,-16(fp)
   418e8:	e0bffe17 	ldw	r2,-8(fp)
   418ec:	18bff536 	bltu	r3,r2,418c4 <__alt_mem_epcs_flash_controller+0xfe0308c4>
        buf[i] = rand();
    }
}
   418f0:	0001883a 	nop
   418f4:	e6ffff04 	addi	sp,fp,-4
   418f8:	dfc00217 	ldw	ra,8(sp)
   418fc:	df000117 	ldw	fp,4(sp)
   41900:	dc000017 	ldw	r16,0(sp)
   41904:	dec00304 	addi	sp,sp,12
   41908:	f800283a 	ret

0004190c <btc_get_default_datadir>:

void btc_get_default_datadir(cstring *path_out)
{
   4190c:	defffb04 	addi	sp,sp,-20
   41910:	dfc00415 	stw	ra,16(sp)
   41914:	df000315 	stw	fp,12(sp)
   41918:	df000304 	addi	fp,sp,12
   4191c:	e13fff15 	stw	r4,-4(fp)
    char* homedrive = getenv("HOMEDRIVE");
    char* homepath = getenv("HOMEDRIVE");
    cstr_append_buf(path_out, homedrive, strlen(homedrive));
    cstr_append_buf(path_out, homepath, strlen(homepath));
#else
    char* home = getenv("HOME");
   41920:	010001b4 	movhi	r4,6
   41924:	21347204 	addi	r4,r4,-11832
   41928:	004529c0 	call	4529c <getenv>
   4192c:	e0bffd15 	stw	r2,-12(fp)
    if (home == NULL || strlen(home) == 0)
   41930:	e0bffd17 	ldw	r2,-12(fp)
   41934:	10000626 	beq	r2,zero,41950 <btc_get_default_datadir+0x44>
   41938:	e0bffd17 	ldw	r2,-12(fp)
   4193c:	10800003 	ldbu	r2,0(r2)
   41940:	10803fcc 	andi	r2,r2,255
   41944:	1080201c 	xori	r2,r2,128
   41948:	10bfe004 	addi	r2,r2,-128
   4194c:	1000041e 	bne	r2,zero,41960 <btc_get_default_datadir+0x54>
        cstr_append_c(path_out, '/');
   41950:	01400bc4 	movi	r5,47
   41954:	e13fff17 	ldw	r4,-4(fp)
   41958:	004266c0 	call	4266c <cstr_append_c>
   4195c:	00000606 	br	41978 <btc_get_default_datadir+0x6c>
    else
        cstr_append_buf(path_out, home, strlen(home));
   41960:	e13ffd17 	ldw	r4,-12(fp)
   41964:	0046ef40 	call	46ef4 <strlen>
   41968:	100d883a 	mov	r6,r2
   4196c:	e17ffd17 	ldw	r5,-12(fp)
   41970:	e13fff17 	ldw	r4,-4(fp)
   41974:	00425700 	call	42570 <cstr_append_buf>
    // Mac
    char *osx_home = "/Library/Application Support/Bitcoin";
    cstr_append_buf(path_out, osx_home, strlen(osx_home));
#else
    // Unix
    char *posix_home = "/.bitcoin";
   41978:	008001b4 	movhi	r2,6
   4197c:	10b47404 	addi	r2,r2,-11824
   41980:	e0bffe15 	stw	r2,-8(fp)
    cstr_append_buf(path_out, posix_home, strlen(posix_home));
   41984:	e13ffe17 	ldw	r4,-8(fp)
   41988:	0046ef40 	call	46ef4 <strlen>
   4198c:	100d883a 	mov	r6,r2
   41990:	e17ffe17 	ldw	r5,-8(fp)
   41994:	e13fff17 	ldw	r4,-4(fp)
   41998:	00425700 	call	42570 <cstr_append_buf>
#endif
#endif
}
   4199c:	0001883a 	nop
   419a0:	e037883a 	mov	sp,fp
   419a4:	dfc00117 	ldw	ra,4(sp)
   419a8:	df000017 	ldw	fp,0(sp)
   419ac:	dec00204 	addi	sp,sp,8
   419b0:	f800283a 	ret

000419b4 <vector_new>:

#include "..\include\btc\vector.h"
#include "..\include\btc\memory.h"

vector* vector_new(size_t res, void (*free_f)(void*))
{
   419b4:	defffb04 	addi	sp,sp,-20
   419b8:	dfc00415 	stw	ra,16(sp)
   419bc:	df000315 	stw	fp,12(sp)
   419c0:	df000304 	addi	fp,sp,12
   419c4:	e13ffe15 	stw	r4,-8(fp)
   419c8:	e17fff15 	stw	r5,-4(fp)
    vector* vec = btc_calloc(1, sizeof(vector));
   419cc:	01400404 	movi	r5,16
   419d0:	01000044 	movi	r4,1
   419d4:	000663c0 	call	663c <btc_calloc>
   419d8:	e0bffd15 	stw	r2,-12(fp)
    if (!vec)
   419dc:	e0bffd17 	ldw	r2,-12(fp)
   419e0:	1000021e 	bne	r2,zero,419ec <vector_new+0x38>
        return NULL;
   419e4:	0005883a 	mov	r2,zero
   419e8:	00002206 	br	41a74 <vector_new+0xc0>

    vec->alloc = 8;
   419ec:	e0bffd17 	ldw	r2,-12(fp)
   419f0:	00c00204 	movi	r3,8
   419f4:	10c00215 	stw	r3,8(r2)
    while (vec->alloc < res)
   419f8:	00000606 	br	41a14 <vector_new+0x60>
        vec->alloc *= 2;
   419fc:	e0bffd17 	ldw	r2,-12(fp)
   41a00:	10800217 	ldw	r2,8(r2)
   41a04:	1085883a 	add	r2,r2,r2
   41a08:	1007883a 	mov	r3,r2
   41a0c:	e0bffd17 	ldw	r2,-12(fp)
   41a10:	10c00215 	stw	r3,8(r2)
    vector* vec = btc_calloc(1, sizeof(vector));
    if (!vec)
        return NULL;

    vec->alloc = 8;
    while (vec->alloc < res)
   41a14:	e0bffd17 	ldw	r2,-12(fp)
   41a18:	10c00217 	ldw	r3,8(r2)
   41a1c:	e0bffe17 	ldw	r2,-8(fp)
   41a20:	18bff636 	bltu	r3,r2,419fc <__alt_mem_epcs_flash_controller+0xfe0309fc>
        vec->alloc *= 2;

    vec->elem_free_f = free_f;
   41a24:	e0bffd17 	ldw	r2,-12(fp)
   41a28:	e0ffff17 	ldw	r3,-4(fp)
   41a2c:	10c00315 	stw	r3,12(r2)
    vec->data = btc_malloc(vec->alloc * sizeof(void*));
   41a30:	e0bffd17 	ldw	r2,-12(fp)
   41a34:	10800217 	ldw	r2,8(r2)
   41a38:	1085883a 	add	r2,r2,r2
   41a3c:	1085883a 	add	r2,r2,r2
   41a40:	1009883a 	mov	r4,r2
   41a44:	00066000 	call	6600 <btc_malloc>
   41a48:	1007883a 	mov	r3,r2
   41a4c:	e0bffd17 	ldw	r2,-12(fp)
   41a50:	10c00015 	stw	r3,0(r2)
    if (!vec->data) {
   41a54:	e0bffd17 	ldw	r2,-12(fp)
   41a58:	10800017 	ldw	r2,0(r2)
   41a5c:	1000041e 	bne	r2,zero,41a70 <vector_new+0xbc>
        btc_free(vec);
   41a60:	e13ffd17 	ldw	r4,-12(fp)
   41a64:	00066c40 	call	66c4 <btc_free>
        return NULL;
   41a68:	0005883a 	mov	r2,zero
   41a6c:	00000106 	br	41a74 <vector_new+0xc0>
    }

    return vec;
   41a70:	e0bffd17 	ldw	r2,-12(fp)
}
   41a74:	e037883a 	mov	sp,fp
   41a78:	dfc00117 	ldw	ra,4(sp)
   41a7c:	df000017 	ldw	fp,0(sp)
   41a80:	dec00204 	addi	sp,sp,8
   41a84:	f800283a 	ret

00041a88 <vector_free_data>:

static void vector_free_data(vector* vec)
{
   41a88:	defffc04 	addi	sp,sp,-16
   41a8c:	dfc00315 	stw	ra,12(sp)
   41a90:	df000215 	stw	fp,8(sp)
   41a94:	df000204 	addi	fp,sp,8
   41a98:	e13fff15 	stw	r4,-4(fp)
    if (!vec->data)
   41a9c:	e0bfff17 	ldw	r2,-4(fp)
   41aa0:	10800017 	ldw	r2,0(r2)
   41aa4:	10003126 	beq	r2,zero,41b6c <vector_free_data+0xe4>
        return;

    if (vec->elem_free_f) {
   41aa8:	e0bfff17 	ldw	r2,-4(fp)
   41aac:	10800317 	ldw	r2,12(r2)
   41ab0:	10002326 	beq	r2,zero,41b40 <vector_free_data+0xb8>
        unsigned int i;
        for (i = 0; i < vec->len; i++)
   41ab4:	e03ffe15 	stw	zero,-8(fp)
   41ab8:	00001d06 	br	41b30 <vector_free_data+0xa8>
            if (vec->data[i]) {
   41abc:	e0bfff17 	ldw	r2,-4(fp)
   41ac0:	10c00017 	ldw	r3,0(r2)
   41ac4:	e0bffe17 	ldw	r2,-8(fp)
   41ac8:	1085883a 	add	r2,r2,r2
   41acc:	1085883a 	add	r2,r2,r2
   41ad0:	1885883a 	add	r2,r3,r2
   41ad4:	10800017 	ldw	r2,0(r2)
   41ad8:	10001226 	beq	r2,zero,41b24 <vector_free_data+0x9c>
                vec->elem_free_f(vec->data[i]);
   41adc:	e0bfff17 	ldw	r2,-4(fp)
   41ae0:	10c00317 	ldw	r3,12(r2)
   41ae4:	e0bfff17 	ldw	r2,-4(fp)
   41ae8:	11000017 	ldw	r4,0(r2)
   41aec:	e0bffe17 	ldw	r2,-8(fp)
   41af0:	1085883a 	add	r2,r2,r2
   41af4:	1085883a 	add	r2,r2,r2
   41af8:	2085883a 	add	r2,r4,r2
   41afc:	10800017 	ldw	r2,0(r2)
   41b00:	1009883a 	mov	r4,r2
   41b04:	183ee83a 	callr	r3
                vec->data[i] = NULL;
   41b08:	e0bfff17 	ldw	r2,-4(fp)
   41b0c:	10c00017 	ldw	r3,0(r2)
   41b10:	e0bffe17 	ldw	r2,-8(fp)
   41b14:	1085883a 	add	r2,r2,r2
   41b18:	1085883a 	add	r2,r2,r2
   41b1c:	1885883a 	add	r2,r3,r2
   41b20:	10000015 	stw	zero,0(r2)
    if (!vec->data)
        return;

    if (vec->elem_free_f) {
        unsigned int i;
        for (i = 0; i < vec->len; i++)
   41b24:	e0bffe17 	ldw	r2,-8(fp)
   41b28:	10800044 	addi	r2,r2,1
   41b2c:	e0bffe15 	stw	r2,-8(fp)
   41b30:	e0bfff17 	ldw	r2,-4(fp)
   41b34:	10800117 	ldw	r2,4(r2)
   41b38:	e0fffe17 	ldw	r3,-8(fp)
   41b3c:	18bfdf36 	bltu	r3,r2,41abc <__alt_mem_epcs_flash_controller+0xfe030abc>
                vec->elem_free_f(vec->data[i]);
                vec->data[i] = NULL;
            }
    }

    btc_free(vec->data);
   41b40:	e0bfff17 	ldw	r2,-4(fp)
   41b44:	10800017 	ldw	r2,0(r2)
   41b48:	1009883a 	mov	r4,r2
   41b4c:	00066c40 	call	66c4 <btc_free>
    vec->data = NULL;
   41b50:	e0bfff17 	ldw	r2,-4(fp)
   41b54:	10000015 	stw	zero,0(r2)
    vec->alloc = 0;
   41b58:	e0bfff17 	ldw	r2,-4(fp)
   41b5c:	10000215 	stw	zero,8(r2)
    vec->len = 0;
   41b60:	e0bfff17 	ldw	r2,-4(fp)
   41b64:	10000115 	stw	zero,4(r2)
   41b68:	00000106 	br	41b70 <vector_free_data+0xe8>
}

static void vector_free_data(vector* vec)
{
    if (!vec->data)
        return;
   41b6c:	0001883a 	nop

    btc_free(vec->data);
    vec->data = NULL;
    vec->alloc = 0;
    vec->len = 0;
}
   41b70:	e037883a 	mov	sp,fp
   41b74:	dfc00117 	ldw	ra,4(sp)
   41b78:	df000017 	ldw	fp,0(sp)
   41b7c:	dec00204 	addi	sp,sp,8
   41b80:	f800283a 	ret

00041b84 <vector_free>:

void vector_free(vector* vec, btc_bool free_array)
{
   41b84:	defffc04 	addi	sp,sp,-16
   41b88:	dfc00315 	stw	ra,12(sp)
   41b8c:	df000215 	stw	fp,8(sp)
   41b90:	df000204 	addi	fp,sp,8
   41b94:	e13ffe15 	stw	r4,-8(fp)
   41b98:	2805883a 	mov	r2,r5
   41b9c:	e0bfff05 	stb	r2,-4(fp)
    if (!vec)
   41ba0:	e0bffe17 	ldw	r2,-8(fp)
   41ba4:	10000b26 	beq	r2,zero,41bd4 <vector_free+0x50>
        return;

    if (free_array)
   41ba8:	e0bfff03 	ldbu	r2,-4(fp)
   41bac:	10000226 	beq	r2,zero,41bb8 <vector_free+0x34>
        vector_free_data(vec);
   41bb0:	e13ffe17 	ldw	r4,-8(fp)
   41bb4:	0041a880 	call	41a88 <vector_free_data>

    memset(vec, 0, sizeof(*vec));
   41bb8:	01800404 	movi	r6,16
   41bbc:	000b883a 	mov	r5,zero
   41bc0:	e13ffe17 	ldw	r4,-8(fp)
   41bc4:	0045f3c0 	call	45f3c <memset>
    btc_free(vec);
   41bc8:	e13ffe17 	ldw	r4,-8(fp)
   41bcc:	00066c40 	call	66c4 <btc_free>
   41bd0:	00000106 	br	41bd8 <vector_free+0x54>
}

void vector_free(vector* vec, btc_bool free_array)
{
    if (!vec)
        return;
   41bd4:	0001883a 	nop
    if (free_array)
        vector_free_data(vec);

    memset(vec, 0, sizeof(*vec));
    btc_free(vec);
}
   41bd8:	e037883a 	mov	sp,fp
   41bdc:	dfc00117 	ldw	ra,4(sp)
   41be0:	df000017 	ldw	fp,0(sp)
   41be4:	dec00204 	addi	sp,sp,8
   41be8:	f800283a 	ret

00041bec <vector_grow>:

static btc_bool vector_grow(vector* vec, size_t min_sz)
{
   41bec:	defffa04 	addi	sp,sp,-24
   41bf0:	dfc00515 	stw	ra,20(sp)
   41bf4:	df000415 	stw	fp,16(sp)
   41bf8:	df000404 	addi	fp,sp,16
   41bfc:	e13ffe15 	stw	r4,-8(fp)
   41c00:	e17fff15 	stw	r5,-4(fp)
    size_t new_alloc = vec->alloc;
   41c04:	e0bffe17 	ldw	r2,-8(fp)
   41c08:	10800217 	ldw	r2,8(r2)
   41c0c:	e0bffc15 	stw	r2,-16(fp)
    while (new_alloc < min_sz)
   41c10:	00000306 	br	41c20 <vector_grow+0x34>
        new_alloc *= 2;
   41c14:	e0bffc17 	ldw	r2,-16(fp)
   41c18:	1085883a 	add	r2,r2,r2
   41c1c:	e0bffc15 	stw	r2,-16(fp)
}

static btc_bool vector_grow(vector* vec, size_t min_sz)
{
    size_t new_alloc = vec->alloc;
    while (new_alloc < min_sz)
   41c20:	e0fffc17 	ldw	r3,-16(fp)
   41c24:	e0bfff17 	ldw	r2,-4(fp)
   41c28:	18bffa36 	bltu	r3,r2,41c14 <__alt_mem_epcs_flash_controller+0xfe030c14>
        new_alloc *= 2;

    if (vec->alloc == new_alloc)
   41c2c:	e0bffe17 	ldw	r2,-8(fp)
   41c30:	10c00217 	ldw	r3,8(r2)
   41c34:	e0bffc17 	ldw	r2,-16(fp)
   41c38:	1880021e 	bne	r3,r2,41c44 <vector_grow+0x58>
        return true;
   41c3c:	00800044 	movi	r2,1
   41c40:	00001406 	br	41c94 <vector_grow+0xa8>

    void* new_data = btc_realloc(vec->data, new_alloc * sizeof(void*));
   41c44:	e0bffe17 	ldw	r2,-8(fp)
   41c48:	10c00017 	ldw	r3,0(r2)
   41c4c:	e0bffc17 	ldw	r2,-16(fp)
   41c50:	1085883a 	add	r2,r2,r2
   41c54:	1085883a 	add	r2,r2,r2
   41c58:	100b883a 	mov	r5,r2
   41c5c:	1809883a 	mov	r4,r3
   41c60:	00066800 	call	6680 <btc_realloc>
   41c64:	e0bffd15 	stw	r2,-12(fp)
    if (!new_data)
   41c68:	e0bffd17 	ldw	r2,-12(fp)
   41c6c:	1000021e 	bne	r2,zero,41c78 <vector_grow+0x8c>
        return false;
   41c70:	0005883a 	mov	r2,zero
   41c74:	00000706 	br	41c94 <vector_grow+0xa8>

    vec->data = new_data;
   41c78:	e0bffe17 	ldw	r2,-8(fp)
   41c7c:	e0fffd17 	ldw	r3,-12(fp)
   41c80:	10c00015 	stw	r3,0(r2)
    vec->alloc = new_alloc;
   41c84:	e0bffe17 	ldw	r2,-8(fp)
   41c88:	e0fffc17 	ldw	r3,-16(fp)
   41c8c:	10c00215 	stw	r3,8(r2)
    return true;
   41c90:	00800044 	movi	r2,1
}
   41c94:	e037883a 	mov	sp,fp
   41c98:	dfc00117 	ldw	ra,4(sp)
   41c9c:	df000017 	ldw	fp,0(sp)
   41ca0:	dec00204 	addi	sp,sp,8
   41ca4:	f800283a 	ret

00041ca8 <vector_find>:

ssize_t vector_find(vector* vec, void* data)
{
   41ca8:	defffc04 	addi	sp,sp,-16
   41cac:	df000315 	stw	fp,12(sp)
   41cb0:	df000304 	addi	fp,sp,12
   41cb4:	e13ffe15 	stw	r4,-8(fp)
   41cb8:	e17fff15 	stw	r5,-4(fp)
    if (vec && vec->len) {
   41cbc:	e0bffe17 	ldw	r2,-8(fp)
   41cc0:	10001726 	beq	r2,zero,41d20 <vector_find+0x78>
   41cc4:	e0bffe17 	ldw	r2,-8(fp)
   41cc8:	10800117 	ldw	r2,4(r2)
   41ccc:	10001426 	beq	r2,zero,41d20 <vector_find+0x78>
        size_t i;
        for (i = 0; i < vec->len; i++)
   41cd0:	e03ffd15 	stw	zero,-12(fp)
   41cd4:	00000e06 	br	41d10 <vector_find+0x68>
            if (vec->data[i] == data)
   41cd8:	e0bffe17 	ldw	r2,-8(fp)
   41cdc:	10c00017 	ldw	r3,0(r2)
   41ce0:	e0bffd17 	ldw	r2,-12(fp)
   41ce4:	1085883a 	add	r2,r2,r2
   41ce8:	1085883a 	add	r2,r2,r2
   41cec:	1885883a 	add	r2,r3,r2
   41cf0:	10c00017 	ldw	r3,0(r2)
   41cf4:	e0bfff17 	ldw	r2,-4(fp)
   41cf8:	1880021e 	bne	r3,r2,41d04 <vector_find+0x5c>
                return (ssize_t)i;
   41cfc:	e0bffd17 	ldw	r2,-12(fp)
   41d00:	00000806 	br	41d24 <vector_find+0x7c>

ssize_t vector_find(vector* vec, void* data)
{
    if (vec && vec->len) {
        size_t i;
        for (i = 0; i < vec->len; i++)
   41d04:	e0bffd17 	ldw	r2,-12(fp)
   41d08:	10800044 	addi	r2,r2,1
   41d0c:	e0bffd15 	stw	r2,-12(fp)
   41d10:	e0bffe17 	ldw	r2,-8(fp)
   41d14:	10800117 	ldw	r2,4(r2)
   41d18:	e0fffd17 	ldw	r3,-12(fp)
   41d1c:	18bfee36 	bltu	r3,r2,41cd8 <__alt_mem_epcs_flash_controller+0xfe030cd8>
            if (vec->data[i] == data)
                return (ssize_t)i;
    }

    return -1;
   41d20:	00bfffc4 	movi	r2,-1
}
   41d24:	e037883a 	mov	sp,fp
   41d28:	df000017 	ldw	fp,0(sp)
   41d2c:	dec00104 	addi	sp,sp,4
   41d30:	f800283a 	ret

00041d34 <vector_add>:

btc_bool vector_add(vector* vec, void* data)
{
   41d34:	defffc04 	addi	sp,sp,-16
   41d38:	dfc00315 	stw	ra,12(sp)
   41d3c:	df000215 	stw	fp,8(sp)
   41d40:	df000204 	addi	fp,sp,8
   41d44:	e13ffe15 	stw	r4,-8(fp)
   41d48:	e17fff15 	stw	r5,-4(fp)
    if (vec->len == vec->alloc)
   41d4c:	e0bffe17 	ldw	r2,-8(fp)
   41d50:	10c00117 	ldw	r3,4(r2)
   41d54:	e0bffe17 	ldw	r2,-8(fp)
   41d58:	10800217 	ldw	r2,8(r2)
   41d5c:	18800a1e 	bne	r3,r2,41d88 <vector_add+0x54>
        if (!vector_grow(vec, vec->len + 1))
   41d60:	e0bffe17 	ldw	r2,-8(fp)
   41d64:	10800117 	ldw	r2,4(r2)
   41d68:	10800044 	addi	r2,r2,1
   41d6c:	100b883a 	mov	r5,r2
   41d70:	e13ffe17 	ldw	r4,-8(fp)
   41d74:	0041bec0 	call	41bec <vector_grow>
   41d78:	10803fcc 	andi	r2,r2,255
   41d7c:	1000021e 	bne	r2,zero,41d88 <vector_add+0x54>
            return false;
   41d80:	0005883a 	mov	r2,zero
   41d84:	00000f06 	br	41dc4 <vector_add+0x90>

    vec->data[vec->len] = data;
   41d88:	e0bffe17 	ldw	r2,-8(fp)
   41d8c:	10c00017 	ldw	r3,0(r2)
   41d90:	e0bffe17 	ldw	r2,-8(fp)
   41d94:	10800117 	ldw	r2,4(r2)
   41d98:	1085883a 	add	r2,r2,r2
   41d9c:	1085883a 	add	r2,r2,r2
   41da0:	1885883a 	add	r2,r3,r2
   41da4:	e0ffff17 	ldw	r3,-4(fp)
   41da8:	10c00015 	stw	r3,0(r2)
    vec->len++;
   41dac:	e0bffe17 	ldw	r2,-8(fp)
   41db0:	10800117 	ldw	r2,4(r2)
   41db4:	10c00044 	addi	r3,r2,1
   41db8:	e0bffe17 	ldw	r2,-8(fp)
   41dbc:	10c00115 	stw	r3,4(r2)
    return true;
   41dc0:	00800044 	movi	r2,1
}
   41dc4:	e037883a 	mov	sp,fp
   41dc8:	dfc00117 	ldw	ra,4(sp)
   41dcc:	df000017 	ldw	fp,0(sp)
   41dd0:	dec00204 	addi	sp,sp,8
   41dd4:	f800283a 	ret

00041dd8 <vector_remove_range>:

void vector_remove_range(vector* vec, size_t pos, size_t len)
{
   41dd8:	defff904 	addi	sp,sp,-28
   41ddc:	dfc00615 	stw	ra,24(sp)
   41de0:	df000515 	stw	fp,20(sp)
   41de4:	df000504 	addi	fp,sp,20
   41de8:	e13ffd15 	stw	r4,-12(fp)
   41dec:	e17ffe15 	stw	r5,-8(fp)
   41df0:	e1bfff15 	stw	r6,-4(fp)
    if (!vec || ((pos + len) > vec->len))
   41df4:	e0bffd17 	ldw	r2,-12(fp)
   41df8:	10004226 	beq	r2,zero,41f04 <vector_remove_range+0x12c>
   41dfc:	e0fffe17 	ldw	r3,-8(fp)
   41e00:	e0bfff17 	ldw	r2,-4(fp)
   41e04:	1885883a 	add	r2,r3,r2
   41e08:	e0fffd17 	ldw	r3,-12(fp)
   41e0c:	18c00117 	ldw	r3,4(r3)
   41e10:	18803c36 	bltu	r3,r2,41f04 <vector_remove_range+0x12c>
        return;

    if (vec->elem_free_f) {
   41e14:	e0bffd17 	ldw	r2,-12(fp)
   41e18:	10800317 	ldw	r2,12(r2)
   41e1c:	10001826 	beq	r2,zero,41e80 <vector_remove_range+0xa8>
        unsigned int i, count;
        for (i = pos, count = 0; count < len; i++, count++)
   41e20:	e0bffe17 	ldw	r2,-8(fp)
   41e24:	e0bffb15 	stw	r2,-20(fp)
   41e28:	e03ffc15 	stw	zero,-16(fp)
   41e2c:	00001106 	br	41e74 <vector_remove_range+0x9c>
            vec->elem_free_f(vec->data[i]);
   41e30:	e0bffd17 	ldw	r2,-12(fp)
   41e34:	10c00317 	ldw	r3,12(r2)
   41e38:	e0bffd17 	ldw	r2,-12(fp)
   41e3c:	11000017 	ldw	r4,0(r2)
   41e40:	e0bffb17 	ldw	r2,-20(fp)
   41e44:	1085883a 	add	r2,r2,r2
   41e48:	1085883a 	add	r2,r2,r2
   41e4c:	2085883a 	add	r2,r4,r2
   41e50:	10800017 	ldw	r2,0(r2)
   41e54:	1009883a 	mov	r4,r2
   41e58:	183ee83a 	callr	r3
    if (!vec || ((pos + len) > vec->len))
        return;

    if (vec->elem_free_f) {
        unsigned int i, count;
        for (i = pos, count = 0; count < len; i++, count++)
   41e5c:	e0bffb17 	ldw	r2,-20(fp)
   41e60:	10800044 	addi	r2,r2,1
   41e64:	e0bffb15 	stw	r2,-20(fp)
   41e68:	e0bffc17 	ldw	r2,-16(fp)
   41e6c:	10800044 	addi	r2,r2,1
   41e70:	e0bffc15 	stw	r2,-16(fp)
   41e74:	e0fffc17 	ldw	r3,-16(fp)
   41e78:	e0bfff17 	ldw	r2,-4(fp)
   41e7c:	18bfec36 	bltu	r3,r2,41e30 <__alt_mem_epcs_flash_controller+0xfe030e30>
            vec->elem_free_f(vec->data[i]);
    }

    memmove(&vec->data[pos], &vec->data[pos + len], (vec->len - pos - len) * sizeof(void*));
   41e80:	e0bffd17 	ldw	r2,-12(fp)
   41e84:	10c00017 	ldw	r3,0(r2)
   41e88:	e0bffe17 	ldw	r2,-8(fp)
   41e8c:	1085883a 	add	r2,r2,r2
   41e90:	1085883a 	add	r2,r2,r2
   41e94:	188f883a 	add	r7,r3,r2
   41e98:	e0bffd17 	ldw	r2,-12(fp)
   41e9c:	10c00017 	ldw	r3,0(r2)
   41ea0:	e13ffe17 	ldw	r4,-8(fp)
   41ea4:	e0bfff17 	ldw	r2,-4(fp)
   41ea8:	2085883a 	add	r2,r4,r2
   41eac:	1085883a 	add	r2,r2,r2
   41eb0:	1085883a 	add	r2,r2,r2
   41eb4:	1889883a 	add	r4,r3,r2
   41eb8:	e0bffd17 	ldw	r2,-12(fp)
   41ebc:	10c00117 	ldw	r3,4(r2)
   41ec0:	e0bffe17 	ldw	r2,-8(fp)
   41ec4:	1887c83a 	sub	r3,r3,r2
   41ec8:	e0bfff17 	ldw	r2,-4(fp)
   41ecc:	1885c83a 	sub	r2,r3,r2
   41ed0:	1085883a 	add	r2,r2,r2
   41ed4:	1085883a 	add	r2,r2,r2
   41ed8:	100d883a 	mov	r6,r2
   41edc:	200b883a 	mov	r5,r4
   41ee0:	3809883a 	mov	r4,r7
   41ee4:	0045de00 	call	45de0 <memmove>
    vec->len -= len;
   41ee8:	e0bffd17 	ldw	r2,-12(fp)
   41eec:	10c00117 	ldw	r3,4(r2)
   41ef0:	e0bfff17 	ldw	r2,-4(fp)
   41ef4:	1887c83a 	sub	r3,r3,r2
   41ef8:	e0bffd17 	ldw	r2,-12(fp)
   41efc:	10c00115 	stw	r3,4(r2)
   41f00:	00000106 	br	41f08 <vector_remove_range+0x130>
}

void vector_remove_range(vector* vec, size_t pos, size_t len)
{
    if (!vec || ((pos + len) > vec->len))
        return;
   41f04:	0001883a 	nop
            vec->elem_free_f(vec->data[i]);
    }

    memmove(&vec->data[pos], &vec->data[pos + len], (vec->len - pos - len) * sizeof(void*));
    vec->len -= len;
}
   41f08:	e037883a 	mov	sp,fp
   41f0c:	dfc00117 	ldw	ra,4(sp)
   41f10:	df000017 	ldw	fp,0(sp)
   41f14:	dec00204 	addi	sp,sp,8
   41f18:	f800283a 	ret

00041f1c <vector_remove_idx>:

void vector_remove_idx(vector* vec, size_t pos)
{
   41f1c:	defffc04 	addi	sp,sp,-16
   41f20:	dfc00315 	stw	ra,12(sp)
   41f24:	df000215 	stw	fp,8(sp)
   41f28:	df000204 	addi	fp,sp,8
   41f2c:	e13ffe15 	stw	r4,-8(fp)
   41f30:	e17fff15 	stw	r5,-4(fp)
    vector_remove_range(vec, pos, 1);
   41f34:	01800044 	movi	r6,1
   41f38:	e17fff17 	ldw	r5,-4(fp)
   41f3c:	e13ffe17 	ldw	r4,-8(fp)
   41f40:	0041dd80 	call	41dd8 <vector_remove_range>
}
   41f44:	0001883a 	nop
   41f48:	e037883a 	mov	sp,fp
   41f4c:	dfc00117 	ldw	ra,4(sp)
   41f50:	df000017 	ldw	fp,0(sp)
   41f54:	dec00204 	addi	sp,sp,8
   41f58:	f800283a 	ret

00041f5c <vector_remove>:

btc_bool vector_remove(vector* vec, void* data)
{
   41f5c:	defffb04 	addi	sp,sp,-20
   41f60:	dfc00415 	stw	ra,16(sp)
   41f64:	df000315 	stw	fp,12(sp)
   41f68:	df000304 	addi	fp,sp,12
   41f6c:	e13ffe15 	stw	r4,-8(fp)
   41f70:	e17fff15 	stw	r5,-4(fp)
    ssize_t idx = vector_find(vec, data);
   41f74:	e17fff17 	ldw	r5,-4(fp)
   41f78:	e13ffe17 	ldw	r4,-8(fp)
   41f7c:	0041ca80 	call	41ca8 <vector_find>
   41f80:	e0bffd15 	stw	r2,-12(fp)
    if (idx < 0)
   41f84:	e0bffd17 	ldw	r2,-12(fp)
   41f88:	1000020e 	bge	r2,zero,41f94 <vector_remove+0x38>
        return false;
   41f8c:	0005883a 	mov	r2,zero
   41f90:	00000506 	br	41fa8 <vector_remove+0x4c>

    vector_remove_idx(vec, idx);
   41f94:	e0bffd17 	ldw	r2,-12(fp)
   41f98:	100b883a 	mov	r5,r2
   41f9c:	e13ffe17 	ldw	r4,-8(fp)
   41fa0:	0041f1c0 	call	41f1c <vector_remove_idx>
    return true;
   41fa4:	00800044 	movi	r2,1
}
   41fa8:	e037883a 	mov	sp,fp
   41fac:	dfc00117 	ldw	ra,4(sp)
   41fb0:	df000017 	ldw	fp,0(sp)
   41fb4:	dec00204 	addi	sp,sp,8
   41fb8:	f800283a 	ret

00041fbc <vector_resize>:

btc_bool vector_resize(vector* vec, size_t newsz)
{
   41fbc:	defffa04 	addi	sp,sp,-24
   41fc0:	dfc00515 	stw	ra,20(sp)
   41fc4:	df000415 	stw	fp,16(sp)
   41fc8:	df000404 	addi	fp,sp,16
   41fcc:	e13ffe15 	stw	r4,-8(fp)
   41fd0:	e17fff15 	stw	r5,-4(fp)
    unsigned int i;

    /* same size */
    if (newsz == vec->len)
   41fd4:	e0bffe17 	ldw	r2,-8(fp)
   41fd8:	10c00117 	ldw	r3,4(r2)
   41fdc:	e0bfff17 	ldw	r2,-4(fp)
   41fe0:	1880021e 	bne	r3,r2,41fec <vector_resize+0x30>
        return true;
   41fe4:	00800044 	movi	r2,1
   41fe8:	00004906 	br	42110 <vector_resize+0x154>

    /* truncate */
    else if (newsz < vec->len) {
   41fec:	e0bffe17 	ldw	r2,-8(fp)
   41ff0:	10800117 	ldw	r2,4(r2)
   41ff4:	e0ffff17 	ldw	r3,-4(fp)
   41ff8:	18802c2e 	bgeu	r3,r2,420ac <vector_resize+0xf0>
        size_t del_count = vec->len - newsz;
   41ffc:	e0bffe17 	ldw	r2,-8(fp)
   42000:	10c00117 	ldw	r3,4(r2)
   42004:	e0bfff17 	ldw	r2,-4(fp)
   42008:	1885c83a 	sub	r2,r3,r2
   4200c:	e0bffd15 	stw	r2,-12(fp)

        for (i = (vec->len - del_count); i < vec->len; i++) {
   42010:	e0bffe17 	ldw	r2,-8(fp)
   42014:	10c00117 	ldw	r3,4(r2)
   42018:	e0bffd17 	ldw	r2,-12(fp)
   4201c:	1885c83a 	sub	r2,r3,r2
   42020:	e0bffc15 	stw	r2,-16(fp)
   42024:	00001806 	br	42088 <vector_resize+0xcc>
            if (vec->elem_free_f)
   42028:	e0bffe17 	ldw	r2,-8(fp)
   4202c:	10800317 	ldw	r2,12(r2)
   42030:	10000b26 	beq	r2,zero,42060 <vector_resize+0xa4>
                vec->elem_free_f(vec->data[i]);
   42034:	e0bffe17 	ldw	r2,-8(fp)
   42038:	10c00317 	ldw	r3,12(r2)
   4203c:	e0bffe17 	ldw	r2,-8(fp)
   42040:	11000017 	ldw	r4,0(r2)
   42044:	e0bffc17 	ldw	r2,-16(fp)
   42048:	1085883a 	add	r2,r2,r2
   4204c:	1085883a 	add	r2,r2,r2
   42050:	2085883a 	add	r2,r4,r2
   42054:	10800017 	ldw	r2,0(r2)
   42058:	1009883a 	mov	r4,r2
   4205c:	183ee83a 	callr	r3
            vec->data[i] = NULL;
   42060:	e0bffe17 	ldw	r2,-8(fp)
   42064:	10c00017 	ldw	r3,0(r2)
   42068:	e0bffc17 	ldw	r2,-16(fp)
   4206c:	1085883a 	add	r2,r2,r2
   42070:	1085883a 	add	r2,r2,r2
   42074:	1885883a 	add	r2,r3,r2
   42078:	10000015 	stw	zero,0(r2)

    /* truncate */
    else if (newsz < vec->len) {
        size_t del_count = vec->len - newsz;

        for (i = (vec->len - del_count); i < vec->len; i++) {
   4207c:	e0bffc17 	ldw	r2,-16(fp)
   42080:	10800044 	addi	r2,r2,1
   42084:	e0bffc15 	stw	r2,-16(fp)
   42088:	e0bffe17 	ldw	r2,-8(fp)
   4208c:	10800117 	ldw	r2,4(r2)
   42090:	e0fffc17 	ldw	r3,-16(fp)
   42094:	18bfe436 	bltu	r3,r2,42028 <__alt_mem_epcs_flash_controller+0xfe031028>
            if (vec->elem_free_f)
                vec->elem_free_f(vec->data[i]);
            vec->data[i] = NULL;
        }

        vec->len = newsz;
   42098:	e0bffe17 	ldw	r2,-8(fp)
   4209c:	e0ffff17 	ldw	r3,-4(fp)
   420a0:	10c00115 	stw	r3,4(r2)
        return true;
   420a4:	00800044 	movi	r2,1
   420a8:	00001906 	br	42110 <vector_resize+0x154>
    }

    /* last possibility: grow */
    if (!vector_grow(vec, newsz))
   420ac:	e17fff17 	ldw	r5,-4(fp)
   420b0:	e13ffe17 	ldw	r4,-8(fp)
   420b4:	0041bec0 	call	41bec <vector_grow>
   420b8:	10803fcc 	andi	r2,r2,255
   420bc:	1000021e 	bne	r2,zero,420c8 <vector_resize+0x10c>
        return false;
   420c0:	0005883a 	mov	r2,zero
   420c4:	00001206 	br	42110 <vector_resize+0x154>

    /* set new elements to NULL */
    for (i = vec->len; i < newsz; i++)
   420c8:	e0bffe17 	ldw	r2,-8(fp)
   420cc:	10800117 	ldw	r2,4(r2)
   420d0:	e0bffc15 	stw	r2,-16(fp)
   420d4:	00000a06 	br	42100 <vector_resize+0x144>
        vec->data[i] = NULL;
   420d8:	e0bffe17 	ldw	r2,-8(fp)
   420dc:	10c00017 	ldw	r3,0(r2)
   420e0:	e0bffc17 	ldw	r2,-16(fp)
   420e4:	1085883a 	add	r2,r2,r2
   420e8:	1085883a 	add	r2,r2,r2
   420ec:	1885883a 	add	r2,r3,r2
   420f0:	10000015 	stw	zero,0(r2)
    /* last possibility: grow */
    if (!vector_grow(vec, newsz))
        return false;

    /* set new elements to NULL */
    for (i = vec->len; i < newsz; i++)
   420f4:	e0bffc17 	ldw	r2,-16(fp)
   420f8:	10800044 	addi	r2,r2,1
   420fc:	e0bffc15 	stw	r2,-16(fp)
   42100:	e0fffc17 	ldw	r3,-16(fp)
   42104:	e0bfff17 	ldw	r2,-4(fp)
   42108:	18bff336 	bltu	r3,r2,420d8 <__alt_mem_epcs_flash_controller+0xfe0310d8>
        vec->data[i] = NULL;

    return true;
   4210c:	00800044 	movi	r2,1
}
   42110:	e037883a 	mov	sp,fp
   42114:	dfc00117 	ldw	ra,4(sp)
   42118:	df000017 	ldw	fp,0(sp)
   4211c:	dec00204 	addi	sp,sp,8
   42120:	f800283a 	ret

00042124 <cstr_alloc_min_sz>:

#include "..\include\btc\cstr.h"
#include "..\include\btc\memory.h"

static int cstr_alloc_min_sz(cstring* s, size_t sz)
{
   42124:	defff904 	addi	sp,sp,-28
   42128:	dfc00615 	stw	ra,24(sp)
   4212c:	df000515 	stw	fp,20(sp)
   42130:	df000504 	addi	fp,sp,20
   42134:	e13ffe15 	stw	r4,-8(fp)
   42138:	e17fff15 	stw	r5,-4(fp)
    unsigned int shift;
    unsigned int al_sz;
    char* new_s;

    sz++; /* NULL overhead */
   4213c:	e0bfff17 	ldw	r2,-4(fp)
   42140:	10800044 	addi	r2,r2,1
   42144:	e0bfff15 	stw	r2,-4(fp)

    if (s->alloc && (s->alloc >= sz))
   42148:	e0bffe17 	ldw	r2,-8(fp)
   4214c:	10800217 	ldw	r2,8(r2)
   42150:	10000626 	beq	r2,zero,4216c <cstr_alloc_min_sz+0x48>
   42154:	e0bffe17 	ldw	r2,-8(fp)
   42158:	10c00217 	ldw	r3,8(r2)
   4215c:	e0bfff17 	ldw	r2,-4(fp)
   42160:	18800236 	bltu	r3,r2,4216c <cstr_alloc_min_sz+0x48>
        return 1;
   42164:	00800044 	movi	r2,1
   42168:	00002406 	br	421fc <cstr_alloc_min_sz+0xd8>

    shift = 3;
   4216c:	008000c4 	movi	r2,3
   42170:	e0bffb15 	stw	r2,-20(fp)
    while ((al_sz = (1 << shift)) < sz)
   42174:	00000306 	br	42184 <cstr_alloc_min_sz+0x60>
        shift++;
   42178:	e0bffb17 	ldw	r2,-20(fp)
   4217c:	10800044 	addi	r2,r2,1
   42180:	e0bffb15 	stw	r2,-20(fp)

    if (s->alloc && (s->alloc >= sz))
        return 1;

    shift = 3;
    while ((al_sz = (1 << shift)) < sz)
   42184:	00c00044 	movi	r3,1
   42188:	e0bffb17 	ldw	r2,-20(fp)
   4218c:	1884983a 	sll	r2,r3,r2
   42190:	e0bffc15 	stw	r2,-16(fp)
   42194:	e0fffc17 	ldw	r3,-16(fp)
   42198:	e0bfff17 	ldw	r2,-4(fp)
   4219c:	18bff636 	bltu	r3,r2,42178 <__alt_mem_epcs_flash_controller+0xfe031178>
        shift++;

    new_s = btc_realloc(s->str, al_sz);
   421a0:	e0bffe17 	ldw	r2,-8(fp)
   421a4:	10800017 	ldw	r2,0(r2)
   421a8:	e17ffc17 	ldw	r5,-16(fp)
   421ac:	1009883a 	mov	r4,r2
   421b0:	00066800 	call	6680 <btc_realloc>
   421b4:	e0bffd15 	stw	r2,-12(fp)
    if (!new_s)
   421b8:	e0bffd17 	ldw	r2,-12(fp)
   421bc:	1000021e 	bne	r2,zero,421c8 <cstr_alloc_min_sz+0xa4>
        return 0;
   421c0:	0005883a 	mov	r2,zero
   421c4:	00000d06 	br	421fc <cstr_alloc_min_sz+0xd8>

    s->str = new_s;
   421c8:	e0bffe17 	ldw	r2,-8(fp)
   421cc:	e0fffd17 	ldw	r3,-12(fp)
   421d0:	10c00015 	stw	r3,0(r2)
    s->alloc = al_sz;
   421d4:	e0bffe17 	ldw	r2,-8(fp)
   421d8:	e0fffc17 	ldw	r3,-16(fp)
   421dc:	10c00215 	stw	r3,8(r2)
    s->str[s->len] = 0;
   421e0:	e0bffe17 	ldw	r2,-8(fp)
   421e4:	10c00017 	ldw	r3,0(r2)
   421e8:	e0bffe17 	ldw	r2,-8(fp)
   421ec:	10800117 	ldw	r2,4(r2)
   421f0:	1885883a 	add	r2,r3,r2
   421f4:	10000005 	stb	zero,0(r2)

    return 1;
   421f8:	00800044 	movi	r2,1
}
   421fc:	e037883a 	mov	sp,fp
   42200:	dfc00117 	ldw	ra,4(sp)
   42204:	df000017 	ldw	fp,0(sp)
   42208:	dec00204 	addi	sp,sp,8
   4220c:	f800283a 	ret

00042210 <cstr_alloc_minsize>:

int cstr_alloc_minsize(cstring* s, size_t new_sz)
{
   42210:	defffc04 	addi	sp,sp,-16
   42214:	dfc00315 	stw	ra,12(sp)
   42218:	df000215 	stw	fp,8(sp)
   4221c:	df000204 	addi	fp,sp,8
   42220:	e13ffe15 	stw	r4,-8(fp)
   42224:	e17fff15 	stw	r5,-4(fp)
    /* no change */
    if (new_sz == s->len)
   42228:	e0bffe17 	ldw	r2,-8(fp)
   4222c:	10c00117 	ldw	r3,4(r2)
   42230:	e0bfff17 	ldw	r2,-4(fp)
   42234:	1880021e 	bne	r3,r2,42240 <cstr_alloc_minsize+0x30>
        return 1;
   42238:	00800044 	movi	r2,1
   4223c:	00001306 	br	4228c <cstr_alloc_minsize+0x7c>

    /* truncate string */
    if (new_sz <= s->len) {
   42240:	e0bffe17 	ldw	r2,-8(fp)
   42244:	10c00117 	ldw	r3,4(r2)
   42248:	e0bfff17 	ldw	r2,-4(fp)
   4224c:	18800236 	bltu	r3,r2,42258 <cstr_alloc_minsize+0x48>
        return 0;
   42250:	0005883a 	mov	r2,zero
   42254:	00000d06 	br	4228c <cstr_alloc_minsize+0x7c>
    }

    /* increase string size */
    if (!cstr_alloc_min_sz(s, new_sz))
   42258:	e17fff17 	ldw	r5,-4(fp)
   4225c:	e13ffe17 	ldw	r4,-8(fp)
   42260:	00421240 	call	42124 <cstr_alloc_min_sz>
   42264:	1000021e 	bne	r2,zero,42270 <cstr_alloc_minsize+0x60>
        return 0;
   42268:	0005883a 	mov	r2,zero
   4226c:	00000706 	br	4228c <cstr_alloc_minsize+0x7c>

    /* contents of string tail undefined */
    //s->len = new_sz;
    s->str[s->len] = 0;
   42270:	e0bffe17 	ldw	r2,-8(fp)
   42274:	10c00017 	ldw	r3,0(r2)
   42278:	e0bffe17 	ldw	r2,-8(fp)
   4227c:	10800117 	ldw	r2,4(r2)
   42280:	1885883a 	add	r2,r3,r2
   42284:	10000005 	stb	zero,0(r2)

    return 1;
   42288:	00800044 	movi	r2,1
}
   4228c:	e037883a 	mov	sp,fp
   42290:	dfc00117 	ldw	ra,4(sp)
   42294:	df000017 	ldw	fp,0(sp)
   42298:	dec00204 	addi	sp,sp,8
   4229c:	f800283a 	ret

000422a0 <cstr_new_sz>:

cstring* cstr_new_sz(size_t sz)
{
   422a0:	defffc04 	addi	sp,sp,-16
   422a4:	dfc00315 	stw	ra,12(sp)
   422a8:	df000215 	stw	fp,8(sp)
   422ac:	df000204 	addi	fp,sp,8
   422b0:	e13fff15 	stw	r4,-4(fp)
    cstring* s = btc_calloc(1, sizeof(cstring));
   422b4:	01400304 	movi	r5,12
   422b8:	01000044 	movi	r4,1
   422bc:	000663c0 	call	663c <btc_calloc>
   422c0:	e0bffe15 	stw	r2,-8(fp)
    if (!s)
   422c4:	e0bffe17 	ldw	r2,-8(fp)
   422c8:	1000021e 	bne	r2,zero,422d4 <cstr_new_sz+0x34>
        return NULL;
   422cc:	0005883a 	mov	r2,zero
   422d0:	00000906 	br	422f8 <cstr_new_sz+0x58>

    if (!cstr_alloc_min_sz(s, sz)) {
   422d4:	e17fff17 	ldw	r5,-4(fp)
   422d8:	e13ffe17 	ldw	r4,-8(fp)
   422dc:	00421240 	call	42124 <cstr_alloc_min_sz>
   422e0:	1000041e 	bne	r2,zero,422f4 <cstr_new_sz+0x54>
        btc_free(s);
   422e4:	e13ffe17 	ldw	r4,-8(fp)
   422e8:	00066c40 	call	66c4 <btc_free>
        return NULL;
   422ec:	0005883a 	mov	r2,zero
   422f0:	00000106 	br	422f8 <cstr_new_sz+0x58>
    }

    return s;
   422f4:	e0bffe17 	ldw	r2,-8(fp)
}
   422f8:	e037883a 	mov	sp,fp
   422fc:	dfc00117 	ldw	ra,4(sp)
   42300:	df000017 	ldw	fp,0(sp)
   42304:	dec00204 	addi	sp,sp,8
   42308:	f800283a 	ret

0004230c <cstr_new_buf>:

cstring* cstr_new_buf(const void* buf, size_t sz)
{
   4230c:	defffb04 	addi	sp,sp,-20
   42310:	dfc00415 	stw	ra,16(sp)
   42314:	df000315 	stw	fp,12(sp)
   42318:	df000304 	addi	fp,sp,12
   4231c:	e13ffe15 	stw	r4,-8(fp)
   42320:	e17fff15 	stw	r5,-4(fp)
    cstring* s = cstr_new_sz(sz);
   42324:	e13fff17 	ldw	r4,-4(fp)
   42328:	00422a00 	call	422a0 <cstr_new_sz>
   4232c:	e0bffd15 	stw	r2,-12(fp)
    if (!s)
   42330:	e0bffd17 	ldw	r2,-12(fp)
   42334:	1000021e 	bne	r2,zero,42340 <cstr_new_buf+0x34>
        return NULL;
   42338:	0005883a 	mov	r2,zero
   4233c:	00001006 	br	42380 <cstr_new_buf+0x74>

    memcpy(s->str, buf, sz);
   42340:	e0bffd17 	ldw	r2,-12(fp)
   42344:	10800017 	ldw	r2,0(r2)
   42348:	e1bfff17 	ldw	r6,-4(fp)
   4234c:	e17ffe17 	ldw	r5,-8(fp)
   42350:	1009883a 	mov	r4,r2
   42354:	0045c980 	call	45c98 <memcpy>
    s->len = sz;
   42358:	e0bffd17 	ldw	r2,-12(fp)
   4235c:	e0ffff17 	ldw	r3,-4(fp)
   42360:	10c00115 	stw	r3,4(r2)
    s->str[s->len] = 0;
   42364:	e0bffd17 	ldw	r2,-12(fp)
   42368:	10c00017 	ldw	r3,0(r2)
   4236c:	e0bffd17 	ldw	r2,-12(fp)
   42370:	10800117 	ldw	r2,4(r2)
   42374:	1885883a 	add	r2,r3,r2
   42378:	10000005 	stb	zero,0(r2)

    return s;
   4237c:	e0bffd17 	ldw	r2,-12(fp)
}
   42380:	e037883a 	mov	sp,fp
   42384:	dfc00117 	ldw	ra,4(sp)
   42388:	df000017 	ldw	fp,0(sp)
   4238c:	dec00204 	addi	sp,sp,8
   42390:	f800283a 	ret

00042394 <cstr_new_cstr>:

cstring* cstr_new_cstr(const cstring* copy_str)
{
   42394:	defffd04 	addi	sp,sp,-12
   42398:	dfc00215 	stw	ra,8(sp)
   4239c:	df000115 	stw	fp,4(sp)
   423a0:	df000104 	addi	fp,sp,4
   423a4:	e13fff15 	stw	r4,-4(fp)
    return cstr_new_buf(copy_str->str, copy_str->len);
   423a8:	e0bfff17 	ldw	r2,-4(fp)
   423ac:	10c00017 	ldw	r3,0(r2)
   423b0:	e0bfff17 	ldw	r2,-4(fp)
   423b4:	10800117 	ldw	r2,4(r2)
   423b8:	100b883a 	mov	r5,r2
   423bc:	1809883a 	mov	r4,r3
   423c0:	004230c0 	call	4230c <cstr_new_buf>
}
   423c4:	e037883a 	mov	sp,fp
   423c8:	dfc00117 	ldw	ra,4(sp)
   423cc:	df000017 	ldw	fp,0(sp)
   423d0:	dec00204 	addi	sp,sp,8
   423d4:	f800283a 	ret

000423d8 <cstr_new>:

cstring* cstr_new(const char* init_str)
{
   423d8:	defffc04 	addi	sp,sp,-16
   423dc:	dfc00315 	stw	ra,12(sp)
   423e0:	df000215 	stw	fp,8(sp)
   423e4:	df000204 	addi	fp,sp,8
   423e8:	e13fff15 	stw	r4,-4(fp)
    size_t slen;

    if (!init_str || !*init_str)
   423ec:	e0bfff17 	ldw	r2,-4(fp)
   423f0:	10000626 	beq	r2,zero,4240c <cstr_new+0x34>
   423f4:	e0bfff17 	ldw	r2,-4(fp)
   423f8:	10800003 	ldbu	r2,0(r2)
   423fc:	10803fcc 	andi	r2,r2,255
   42400:	1080201c 	xori	r2,r2,128
   42404:	10bfe004 	addi	r2,r2,-128
   42408:	1000031e 	bne	r2,zero,42418 <cstr_new+0x40>
        return cstr_new_sz(0);
   4240c:	0009883a 	mov	r4,zero
   42410:	00422a00 	call	422a0 <cstr_new_sz>
   42414:	00000606 	br	42430 <cstr_new+0x58>

    slen = strlen(init_str);
   42418:	e13fff17 	ldw	r4,-4(fp)
   4241c:	0046ef40 	call	46ef4 <strlen>
   42420:	e0bffe15 	stw	r2,-8(fp)
    return cstr_new_buf(init_str, slen);
   42424:	e17ffe17 	ldw	r5,-8(fp)
   42428:	e13fff17 	ldw	r4,-4(fp)
   4242c:	004230c0 	call	4230c <cstr_new_buf>
}
   42430:	e037883a 	mov	sp,fp
   42434:	dfc00117 	ldw	ra,4(sp)
   42438:	df000017 	ldw	fp,0(sp)
   4243c:	dec00204 	addi	sp,sp,8
   42440:	f800283a 	ret

00042444 <cstr_free>:

void cstr_free(cstring* s, int free_buf)
{
   42444:	defffc04 	addi	sp,sp,-16
   42448:	dfc00315 	stw	ra,12(sp)
   4244c:	df000215 	stw	fp,8(sp)
   42450:	df000204 	addi	fp,sp,8
   42454:	e13ffe15 	stw	r4,-8(fp)
   42458:	e17fff15 	stw	r5,-4(fp)
    if (!s)
   4245c:	e0bffe17 	ldw	r2,-8(fp)
   42460:	10000d26 	beq	r2,zero,42498 <cstr_free+0x54>
        return;

    if (free_buf)
   42464:	e0bfff17 	ldw	r2,-4(fp)
   42468:	10000426 	beq	r2,zero,4247c <cstr_free+0x38>
        btc_free(s->str);
   4246c:	e0bffe17 	ldw	r2,-8(fp)
   42470:	10800017 	ldw	r2,0(r2)
   42474:	1009883a 	mov	r4,r2
   42478:	00066c40 	call	66c4 <btc_free>

    memset(s, 0, sizeof(*s));
   4247c:	01800304 	movi	r6,12
   42480:	000b883a 	mov	r5,zero
   42484:	e13ffe17 	ldw	r4,-8(fp)
   42488:	0045f3c0 	call	45f3c <memset>
    btc_free(s);
   4248c:	e13ffe17 	ldw	r4,-8(fp)
   42490:	00066c40 	call	66c4 <btc_free>
   42494:	00000106 	br	4249c <cstr_free+0x58>
}

void cstr_free(cstring* s, int free_buf)
{
    if (!s)
        return;
   42498:	0001883a 	nop
    if (free_buf)
        btc_free(s->str);

    memset(s, 0, sizeof(*s));
    btc_free(s);
}
   4249c:	e037883a 	mov	sp,fp
   424a0:	dfc00117 	ldw	ra,4(sp)
   424a4:	df000017 	ldw	fp,0(sp)
   424a8:	dec00204 	addi	sp,sp,8
   424ac:	f800283a 	ret

000424b0 <cstr_resize>:

int cstr_resize(cstring* s, size_t new_sz)
{
   424b0:	defffc04 	addi	sp,sp,-16
   424b4:	dfc00315 	stw	ra,12(sp)
   424b8:	df000215 	stw	fp,8(sp)
   424bc:	df000204 	addi	fp,sp,8
   424c0:	e13ffe15 	stw	r4,-8(fp)
   424c4:	e17fff15 	stw	r5,-4(fp)
    /* no change */
    if (new_sz == s->len)
   424c8:	e0bffe17 	ldw	r2,-8(fp)
   424cc:	10c00117 	ldw	r3,4(r2)
   424d0:	e0bfff17 	ldw	r2,-4(fp)
   424d4:	1880021e 	bne	r3,r2,424e0 <cstr_resize+0x30>
        return 1;
   424d8:	00800044 	movi	r2,1
   424dc:	00001f06 	br	4255c <cstr_resize+0xac>

    /* truncate string */
    if (new_sz <= s->len) {
   424e0:	e0bffe17 	ldw	r2,-8(fp)
   424e4:	10c00117 	ldw	r3,4(r2)
   424e8:	e0bfff17 	ldw	r2,-4(fp)
   424ec:	18800b36 	bltu	r3,r2,4251c <cstr_resize+0x6c>
        s->len = new_sz;
   424f0:	e0bffe17 	ldw	r2,-8(fp)
   424f4:	e0ffff17 	ldw	r3,-4(fp)
   424f8:	10c00115 	stw	r3,4(r2)
        s->str[s->len] = 0;
   424fc:	e0bffe17 	ldw	r2,-8(fp)
   42500:	10c00017 	ldw	r3,0(r2)
   42504:	e0bffe17 	ldw	r2,-8(fp)
   42508:	10800117 	ldw	r2,4(r2)
   4250c:	1885883a 	add	r2,r3,r2
   42510:	10000005 	stb	zero,0(r2)
        return 1;
   42514:	00800044 	movi	r2,1
   42518:	00001006 	br	4255c <cstr_resize+0xac>
    }

    /* increase string size */
    if (!cstr_alloc_min_sz(s, new_sz))
   4251c:	e17fff17 	ldw	r5,-4(fp)
   42520:	e13ffe17 	ldw	r4,-8(fp)
   42524:	00421240 	call	42124 <cstr_alloc_min_sz>
   42528:	1000021e 	bne	r2,zero,42534 <cstr_resize+0x84>
        return 0;
   4252c:	0005883a 	mov	r2,zero
   42530:	00000a06 	br	4255c <cstr_resize+0xac>

    /* contents of string tail undefined */

    s->len = new_sz;
   42534:	e0bffe17 	ldw	r2,-8(fp)
   42538:	e0ffff17 	ldw	r3,-4(fp)
   4253c:	10c00115 	stw	r3,4(r2)
    s->str[s->len] = 0;
   42540:	e0bffe17 	ldw	r2,-8(fp)
   42544:	10c00017 	ldw	r3,0(r2)
   42548:	e0bffe17 	ldw	r2,-8(fp)
   4254c:	10800117 	ldw	r2,4(r2)
   42550:	1885883a 	add	r2,r3,r2
   42554:	10000005 	stb	zero,0(r2)

    return 1;
   42558:	00800044 	movi	r2,1
}
   4255c:	e037883a 	mov	sp,fp
   42560:	dfc00117 	ldw	ra,4(sp)
   42564:	df000017 	ldw	fp,0(sp)
   42568:	dec00204 	addi	sp,sp,8
   4256c:	f800283a 	ret

00042570 <cstr_append_buf>:

int cstr_append_buf(cstring* s, const void* buf, size_t sz)
{
   42570:	defffb04 	addi	sp,sp,-20
   42574:	dfc00415 	stw	ra,16(sp)
   42578:	df000315 	stw	fp,12(sp)
   4257c:	df000304 	addi	fp,sp,12
   42580:	e13ffd15 	stw	r4,-12(fp)
   42584:	e17ffe15 	stw	r5,-8(fp)
   42588:	e1bfff15 	stw	r6,-4(fp)
    if (!cstr_alloc_min_sz(s, s->len + sz))
   4258c:	e0bffd17 	ldw	r2,-12(fp)
   42590:	10c00117 	ldw	r3,4(r2)
   42594:	e0bfff17 	ldw	r2,-4(fp)
   42598:	1885883a 	add	r2,r3,r2
   4259c:	100b883a 	mov	r5,r2
   425a0:	e13ffd17 	ldw	r4,-12(fp)
   425a4:	00421240 	call	42124 <cstr_alloc_min_sz>
   425a8:	1000021e 	bne	r2,zero,425b4 <cstr_append_buf+0x44>
        return 0;
   425ac:	0005883a 	mov	r2,zero
   425b0:	00001606 	br	4260c <cstr_append_buf+0x9c>

    memcpy(s->str + s->len, buf, sz);
   425b4:	e0bffd17 	ldw	r2,-12(fp)
   425b8:	10c00017 	ldw	r3,0(r2)
   425bc:	e0bffd17 	ldw	r2,-12(fp)
   425c0:	10800117 	ldw	r2,4(r2)
   425c4:	1885883a 	add	r2,r3,r2
   425c8:	e1bfff17 	ldw	r6,-4(fp)
   425cc:	e17ffe17 	ldw	r5,-8(fp)
   425d0:	1009883a 	mov	r4,r2
   425d4:	0045c980 	call	45c98 <memcpy>
    s->len += sz;
   425d8:	e0bffd17 	ldw	r2,-12(fp)
   425dc:	10c00117 	ldw	r3,4(r2)
   425e0:	e0bfff17 	ldw	r2,-4(fp)
   425e4:	1887883a 	add	r3,r3,r2
   425e8:	e0bffd17 	ldw	r2,-12(fp)
   425ec:	10c00115 	stw	r3,4(r2)
    s->str[s->len] = 0;
   425f0:	e0bffd17 	ldw	r2,-12(fp)
   425f4:	10c00017 	ldw	r3,0(r2)
   425f8:	e0bffd17 	ldw	r2,-12(fp)
   425fc:	10800117 	ldw	r2,4(r2)
   42600:	1885883a 	add	r2,r3,r2
   42604:	10000005 	stb	zero,0(r2)

    return 1;
   42608:	00800044 	movi	r2,1
}
   4260c:	e037883a 	mov	sp,fp
   42610:	dfc00117 	ldw	ra,4(sp)
   42614:	df000017 	ldw	fp,0(sp)
   42618:	dec00204 	addi	sp,sp,8
   4261c:	f800283a 	ret

00042620 <cstr_append_cstr>:

int cstr_append_cstr(cstring* s, cstring* append)
{
   42620:	defffc04 	addi	sp,sp,-16
   42624:	dfc00315 	stw	ra,12(sp)
   42628:	df000215 	stw	fp,8(sp)
   4262c:	df000204 	addi	fp,sp,8
   42630:	e13ffe15 	stw	r4,-8(fp)
   42634:	e17fff15 	stw	r5,-4(fp)
    return cstr_append_buf(s, append->str, append->len);
   42638:	e0bfff17 	ldw	r2,-4(fp)
   4263c:	10c00017 	ldw	r3,0(r2)
   42640:	e0bfff17 	ldw	r2,-4(fp)
   42644:	10800117 	ldw	r2,4(r2)
   42648:	100d883a 	mov	r6,r2
   4264c:	180b883a 	mov	r5,r3
   42650:	e13ffe17 	ldw	r4,-8(fp)
   42654:	00425700 	call	42570 <cstr_append_buf>
}
   42658:	e037883a 	mov	sp,fp
   4265c:	dfc00117 	ldw	ra,4(sp)
   42660:	df000017 	ldw	fp,0(sp)
   42664:	dec00204 	addi	sp,sp,8
   42668:	f800283a 	ret

0004266c <cstr_append_c>:


int cstr_append_c(cstring* s, char ch)
{
   4266c:	defffc04 	addi	sp,sp,-16
   42670:	dfc00315 	stw	ra,12(sp)
   42674:	df000215 	stw	fp,8(sp)
   42678:	df000204 	addi	fp,sp,8
   4267c:	e13ffe15 	stw	r4,-8(fp)
   42680:	2805883a 	mov	r2,r5
   42684:	e0bfff05 	stb	r2,-4(fp)
    return cstr_append_buf(s, &ch, 1);
   42688:	e0bfff04 	addi	r2,fp,-4
   4268c:	01800044 	movi	r6,1
   42690:	100b883a 	mov	r5,r2
   42694:	e13ffe17 	ldw	r4,-8(fp)
   42698:	00425700 	call	42570 <cstr_append_buf>
}
   4269c:	e037883a 	mov	sp,fp
   426a0:	dfc00117 	ldw	ra,4(sp)
   426a4:	df000017 	ldw	fp,0(sp)
   426a8:	dec00204 	addi	sp,sp,8
   426ac:	f800283a 	ret

000426b0 <cstr_equal>:


int cstr_equal(const cstring* a, const cstring* b)
{
   426b0:	defffc04 	addi	sp,sp,-16
   426b4:	dfc00315 	stw	ra,12(sp)
   426b8:	df000215 	stw	fp,8(sp)
   426bc:	df000204 	addi	fp,sp,8
   426c0:	e13ffe15 	stw	r4,-8(fp)
   426c4:	e17fff15 	stw	r5,-4(fp)
    if (a == b)
   426c8:	e0fffe17 	ldw	r3,-8(fp)
   426cc:	e0bfff17 	ldw	r2,-4(fp)
   426d0:	1880021e 	bne	r3,r2,426dc <cstr_equal+0x2c>
        return 1;
   426d4:	00800044 	movi	r2,1
   426d8:	00001906 	br	42740 <cstr_equal+0x90>
    if (!a || !b)
   426dc:	e0bffe17 	ldw	r2,-8(fp)
   426e0:	10000226 	beq	r2,zero,426ec <cstr_equal+0x3c>
   426e4:	e0bfff17 	ldw	r2,-4(fp)
   426e8:	1000021e 	bne	r2,zero,426f4 <cstr_equal+0x44>
        return 0;
   426ec:	0005883a 	mov	r2,zero
   426f0:	00001306 	br	42740 <cstr_equal+0x90>
    if (a->len != b->len)
   426f4:	e0bffe17 	ldw	r2,-8(fp)
   426f8:	10c00117 	ldw	r3,4(r2)
   426fc:	e0bfff17 	ldw	r2,-4(fp)
   42700:	10800117 	ldw	r2,4(r2)
   42704:	18800226 	beq	r3,r2,42710 <cstr_equal+0x60>
        return 0;
   42708:	0005883a 	mov	r2,zero
   4270c:	00000c06 	br	42740 <cstr_equal+0x90>
    return (memcmp(a->str, b->str, a->len) == 0);
   42710:	e0bffe17 	ldw	r2,-8(fp)
   42714:	10c00017 	ldw	r3,0(r2)
   42718:	e0bfff17 	ldw	r2,-4(fp)
   4271c:	11000017 	ldw	r4,0(r2)
   42720:	e0bffe17 	ldw	r2,-8(fp)
   42724:	10800117 	ldw	r2,4(r2)
   42728:	100d883a 	mov	r6,r2
   4272c:	200b883a 	mov	r5,r4
   42730:	1809883a 	mov	r4,r3
   42734:	0045c1c0 	call	45c1c <memcmp>
   42738:	1005003a 	cmpeq	r2,r2,zero
   4273c:	10803fcc 	andi	r2,r2,255
}
   42740:	e037883a 	mov	sp,fp
   42744:	dfc00117 	ldw	ra,4(sp)
   42748:	df000017 	ldw	fp,0(sp)
   4274c:	dec00204 	addi	sp,sp,8
   42750:	f800283a 	ret

00042754 <cstr_compare>:

int cstr_compare(const cstring* a, const cstring* b)
{
   42754:	defffb04 	addi	sp,sp,-20
   42758:	df000415 	stw	fp,16(sp)
   4275c:	df000404 	addi	fp,sp,16
   42760:	e13ffe15 	stw	r4,-8(fp)
   42764:	e17fff15 	stw	r5,-4(fp)
    unsigned int i;
    if (a->len > b->len)
   42768:	e0bffe17 	ldw	r2,-8(fp)
   4276c:	10800117 	ldw	r2,4(r2)
   42770:	e0ffff17 	ldw	r3,-4(fp)
   42774:	18c00117 	ldw	r3,4(r3)
   42778:	1880022e 	bgeu	r3,r2,42784 <cstr_compare+0x30>
        return (1);
   4277c:	00800044 	movi	r2,1
   42780:	00002706 	br	42820 <cstr_compare+0xcc>
    if (a->len < b->len)
   42784:	e0bffe17 	ldw	r2,-8(fp)
   42788:	10c00117 	ldw	r3,4(r2)
   4278c:	e0bfff17 	ldw	r2,-4(fp)
   42790:	10800117 	ldw	r2,4(r2)
   42794:	1880022e 	bgeu	r3,r2,427a0 <cstr_compare+0x4c>
        return (-1);
   42798:	00bfffc4 	movi	r2,-1
   4279c:	00002006 	br	42820 <cstr_compare+0xcc>

    /* length equal, byte per byte compare */
    for (i = 0; i < a->len; i++) {
   427a0:	e03ffc15 	stw	zero,-16(fp)
   427a4:	00001906 	br	4280c <cstr_compare+0xb8>
        char a1 = a->str[i];
   427a8:	e0bffe17 	ldw	r2,-8(fp)
   427ac:	10c00017 	ldw	r3,0(r2)
   427b0:	e0bffc17 	ldw	r2,-16(fp)
   427b4:	1885883a 	add	r2,r3,r2
   427b8:	10800003 	ldbu	r2,0(r2)
   427bc:	e0bffd05 	stb	r2,-12(fp)
        char b1 = b->str[i];
   427c0:	e0bfff17 	ldw	r2,-4(fp)
   427c4:	10c00017 	ldw	r3,0(r2)
   427c8:	e0bffc17 	ldw	r2,-16(fp)
   427cc:	1885883a 	add	r2,r3,r2
   427d0:	10800003 	ldbu	r2,0(r2)
   427d4:	e0bffd45 	stb	r2,-11(fp)

        if (a1 > b1)
   427d8:	e0bffd07 	ldb	r2,-12(fp)
   427dc:	e0fffd47 	ldb	r3,-11(fp)
   427e0:	1880020e 	bge	r3,r2,427ec <cstr_compare+0x98>
            return (1);
   427e4:	00800044 	movi	r2,1
   427e8:	00000d06 	br	42820 <cstr_compare+0xcc>
        if (a1 < b1)
   427ec:	e0fffd07 	ldb	r3,-12(fp)
   427f0:	e0bffd47 	ldb	r2,-11(fp)
   427f4:	1880020e 	bge	r3,r2,42800 <cstr_compare+0xac>
            return (-1);
   427f8:	00bfffc4 	movi	r2,-1
   427fc:	00000806 	br	42820 <cstr_compare+0xcc>
        return (1);
    if (a->len < b->len)
        return (-1);

    /* length equal, byte per byte compare */
    for (i = 0; i < a->len; i++) {
   42800:	e0bffc17 	ldw	r2,-16(fp)
   42804:	10800044 	addi	r2,r2,1
   42808:	e0bffc15 	stw	r2,-16(fp)
   4280c:	e0bffe17 	ldw	r2,-8(fp)
   42810:	10800117 	ldw	r2,4(r2)
   42814:	e0fffc17 	ldw	r3,-16(fp)
   42818:	18bfe336 	bltu	r3,r2,427a8 <__alt_mem_epcs_flash_controller+0xfe0317a8>
        if (a1 > b1)
            return (1);
        if (a1 < b1)
            return (-1);
    }
    return (0);
   4281c:	0005883a 	mov	r2,zero
}
   42820:	e037883a 	mov	sp,fp
   42824:	df000017 	ldw	fp,0(sp)
   42828:	dec00104 	addi	sp,sp,4
   4282c:	f800283a 	ret

00042830 <cstr_erase>:

int cstr_erase(cstring* s, size_t pos, ssize_t len)
{
   42830:	defffa04 	addi	sp,sp,-24
   42834:	dfc00515 	stw	ra,20(sp)
   42838:	df000415 	stw	fp,16(sp)
   4283c:	df000404 	addi	fp,sp,16
   42840:	e13ffd15 	stw	r4,-12(fp)
   42844:	e17ffe15 	stw	r5,-8(fp)
   42848:	e1bfff15 	stw	r6,-4(fp)
    ssize_t old_tail;

    if (pos == s->len && len == 0)
   4284c:	e0bffd17 	ldw	r2,-12(fp)
   42850:	10c00117 	ldw	r3,4(r2)
   42854:	e0bffe17 	ldw	r2,-8(fp)
   42858:	1880041e 	bne	r3,r2,4286c <cstr_erase+0x3c>
   4285c:	e0bfff17 	ldw	r2,-4(fp)
   42860:	1000021e 	bne	r2,zero,4286c <cstr_erase+0x3c>
        return 1;
   42864:	00800044 	movi	r2,1
   42868:	00003006 	br	4292c <cstr_erase+0xfc>
    if (pos >= s->len)
   4286c:	e0bffd17 	ldw	r2,-12(fp)
   42870:	10800117 	ldw	r2,4(r2)
   42874:	e0fffe17 	ldw	r3,-8(fp)
   42878:	18800236 	bltu	r3,r2,42884 <cstr_erase+0x54>
        return 0;
   4287c:	0005883a 	mov	r2,zero
   42880:	00002a06 	br	4292c <cstr_erase+0xfc>

    old_tail = s->len - pos;
   42884:	e0bffd17 	ldw	r2,-12(fp)
   42888:	10c00117 	ldw	r3,4(r2)
   4288c:	e0bffe17 	ldw	r2,-8(fp)
   42890:	1885c83a 	sub	r2,r3,r2
   42894:	e0bffc15 	stw	r2,-16(fp)
    if ((len >= 0) && (len > old_tail))
   42898:	e0bfff17 	ldw	r2,-4(fp)
   4289c:	10000516 	blt	r2,zero,428b4 <cstr_erase+0x84>
   428a0:	e0bfff17 	ldw	r2,-4(fp)
   428a4:	e0fffc17 	ldw	r3,-16(fp)
   428a8:	1880020e 	bge	r3,r2,428b4 <cstr_erase+0x84>
        return 0;
   428ac:	0005883a 	mov	r2,zero
   428b0:	00001e06 	br	4292c <cstr_erase+0xfc>

    memmove(&s->str[pos], &s->str[pos + len], old_tail - len);
   428b4:	e0bffd17 	ldw	r2,-12(fp)
   428b8:	10c00017 	ldw	r3,0(r2)
   428bc:	e0bffe17 	ldw	r2,-8(fp)
   428c0:	188f883a 	add	r7,r3,r2
   428c4:	e0bffd17 	ldw	r2,-12(fp)
   428c8:	10c00017 	ldw	r3,0(r2)
   428cc:	e13fff17 	ldw	r4,-4(fp)
   428d0:	e0bffe17 	ldw	r2,-8(fp)
   428d4:	2085883a 	add	r2,r4,r2
   428d8:	1889883a 	add	r4,r3,r2
   428dc:	e0fffc17 	ldw	r3,-16(fp)
   428e0:	e0bfff17 	ldw	r2,-4(fp)
   428e4:	1885c83a 	sub	r2,r3,r2
   428e8:	100d883a 	mov	r6,r2
   428ec:	200b883a 	mov	r5,r4
   428f0:	3809883a 	mov	r4,r7
   428f4:	0045de00 	call	45de0 <memmove>
    s->len -= len;
   428f8:	e0bffd17 	ldw	r2,-12(fp)
   428fc:	10c00117 	ldw	r3,4(r2)
   42900:	e0bfff17 	ldw	r2,-4(fp)
   42904:	1887c83a 	sub	r3,r3,r2
   42908:	e0bffd17 	ldw	r2,-12(fp)
   4290c:	10c00115 	stw	r3,4(r2)
    s->str[s->len] = 0;
   42910:	e0bffd17 	ldw	r2,-12(fp)
   42914:	10c00017 	ldw	r3,0(r2)
   42918:	e0bffd17 	ldw	r2,-12(fp)
   4291c:	10800117 	ldw	r2,4(r2)
   42920:	1885883a 	add	r2,r3,r2
   42924:	10000005 	stb	zero,0(r2)

    return 1;
   42928:	00800044 	movi	r2,1
}
   4292c:	e037883a 	mov	sp,fp
   42930:	dfc00117 	ldw	ra,4(sp)
   42934:	df000017 	ldw	fp,0(sp)
   42938:	dec00204 	addi	sp,sp,8
   4293c:	f800283a 	ret

00042940 <__muldi3>:
   42940:	223fffcc 	andi	r8,r4,65535
   42944:	2006d43a 	srli	r3,r4,16
   42948:	32bfffcc 	andi	r10,r6,65535
   4294c:	3012d43a 	srli	r9,r6,16
   42950:	4297383a 	mul	r11,r8,r10
   42954:	1a95383a 	mul	r10,r3,r10
   42958:	4251383a 	mul	r8,r8,r9
   4295c:	5804d43a 	srli	r2,r11,16
   42960:	4291883a 	add	r8,r8,r10
   42964:	1205883a 	add	r2,r2,r8
   42968:	1a51383a 	mul	r8,r3,r9
   4296c:	1280022e 	bgeu	r2,r10,42978 <__muldi3+0x38>
   42970:	00c00074 	movhi	r3,1
   42974:	40d1883a 	add	r8,r8,r3
   42978:	1006d43a 	srli	r3,r2,16
   4297c:	21cf383a 	mul	r7,r4,r7
   42980:	314b383a 	mul	r5,r6,r5
   42984:	1004943a 	slli	r2,r2,16
   42988:	1a11883a 	add	r8,r3,r8
   4298c:	5affffcc 	andi	r11,r11,65535
   42990:	3947883a 	add	r3,r7,r5
   42994:	12c5883a 	add	r2,r2,r11
   42998:	1a07883a 	add	r3,r3,r8
   4299c:	f800283a 	ret

000429a0 <__divsi3>:
   429a0:	20001b16 	blt	r4,zero,42a10 <__divsi3+0x70>
   429a4:	000f883a 	mov	r7,zero
   429a8:	28001616 	blt	r5,zero,42a04 <__divsi3+0x64>
   429ac:	200d883a 	mov	r6,r4
   429b0:	29001a2e 	bgeu	r5,r4,42a1c <__divsi3+0x7c>
   429b4:	00800804 	movi	r2,32
   429b8:	00c00044 	movi	r3,1
   429bc:	00000106 	br	429c4 <__divsi3+0x24>
   429c0:	10000d26 	beq	r2,zero,429f8 <__divsi3+0x58>
   429c4:	294b883a 	add	r5,r5,r5
   429c8:	10bfffc4 	addi	r2,r2,-1
   429cc:	18c7883a 	add	r3,r3,r3
   429d0:	293ffb36 	bltu	r5,r4,429c0 <__alt_mem_epcs_flash_controller+0xfe0319c0>
   429d4:	0005883a 	mov	r2,zero
   429d8:	18000726 	beq	r3,zero,429f8 <__divsi3+0x58>
   429dc:	0005883a 	mov	r2,zero
   429e0:	31400236 	bltu	r6,r5,429ec <__divsi3+0x4c>
   429e4:	314dc83a 	sub	r6,r6,r5
   429e8:	10c4b03a 	or	r2,r2,r3
   429ec:	1806d07a 	srli	r3,r3,1
   429f0:	280ad07a 	srli	r5,r5,1
   429f4:	183ffa1e 	bne	r3,zero,429e0 <__alt_mem_epcs_flash_controller+0xfe0319e0>
   429f8:	38000126 	beq	r7,zero,42a00 <__divsi3+0x60>
   429fc:	0085c83a 	sub	r2,zero,r2
   42a00:	f800283a 	ret
   42a04:	014bc83a 	sub	r5,zero,r5
   42a08:	39c0005c 	xori	r7,r7,1
   42a0c:	003fe706 	br	429ac <__alt_mem_epcs_flash_controller+0xfe0319ac>
   42a10:	0109c83a 	sub	r4,zero,r4
   42a14:	01c00044 	movi	r7,1
   42a18:	003fe306 	br	429a8 <__alt_mem_epcs_flash_controller+0xfe0319a8>
   42a1c:	00c00044 	movi	r3,1
   42a20:	003fee06 	br	429dc <__alt_mem_epcs_flash_controller+0xfe0319dc>

00042a24 <__modsi3>:
   42a24:	20001716 	blt	r4,zero,42a84 <__modsi3+0x60>
   42a28:	000f883a 	mov	r7,zero
   42a2c:	2005883a 	mov	r2,r4
   42a30:	28001216 	blt	r5,zero,42a7c <__modsi3+0x58>
   42a34:	2900162e 	bgeu	r5,r4,42a90 <__modsi3+0x6c>
   42a38:	01800804 	movi	r6,32
   42a3c:	00c00044 	movi	r3,1
   42a40:	00000106 	br	42a48 <__modsi3+0x24>
   42a44:	30000a26 	beq	r6,zero,42a70 <__modsi3+0x4c>
   42a48:	294b883a 	add	r5,r5,r5
   42a4c:	31bfffc4 	addi	r6,r6,-1
   42a50:	18c7883a 	add	r3,r3,r3
   42a54:	293ffb36 	bltu	r5,r4,42a44 <__alt_mem_epcs_flash_controller+0xfe031a44>
   42a58:	18000526 	beq	r3,zero,42a70 <__modsi3+0x4c>
   42a5c:	1806d07a 	srli	r3,r3,1
   42a60:	11400136 	bltu	r2,r5,42a68 <__modsi3+0x44>
   42a64:	1145c83a 	sub	r2,r2,r5
   42a68:	280ad07a 	srli	r5,r5,1
   42a6c:	183ffb1e 	bne	r3,zero,42a5c <__alt_mem_epcs_flash_controller+0xfe031a5c>
   42a70:	38000126 	beq	r7,zero,42a78 <__modsi3+0x54>
   42a74:	0085c83a 	sub	r2,zero,r2
   42a78:	f800283a 	ret
   42a7c:	014bc83a 	sub	r5,zero,r5
   42a80:	003fec06 	br	42a34 <__alt_mem_epcs_flash_controller+0xfe031a34>
   42a84:	0109c83a 	sub	r4,zero,r4
   42a88:	01c00044 	movi	r7,1
   42a8c:	003fe706 	br	42a2c <__alt_mem_epcs_flash_controller+0xfe031a2c>
   42a90:	00c00044 	movi	r3,1
   42a94:	003ff106 	br	42a5c <__alt_mem_epcs_flash_controller+0xfe031a5c>

00042a98 <__udivsi3>:
   42a98:	200d883a 	mov	r6,r4
   42a9c:	2900152e 	bgeu	r5,r4,42af4 <__udivsi3+0x5c>
   42aa0:	28001416 	blt	r5,zero,42af4 <__udivsi3+0x5c>
   42aa4:	00800804 	movi	r2,32
   42aa8:	00c00044 	movi	r3,1
   42aac:	00000206 	br	42ab8 <__udivsi3+0x20>
   42ab0:	10000e26 	beq	r2,zero,42aec <__udivsi3+0x54>
   42ab4:	28000516 	blt	r5,zero,42acc <__udivsi3+0x34>
   42ab8:	294b883a 	add	r5,r5,r5
   42abc:	10bfffc4 	addi	r2,r2,-1
   42ac0:	18c7883a 	add	r3,r3,r3
   42ac4:	293ffa36 	bltu	r5,r4,42ab0 <__alt_mem_epcs_flash_controller+0xfe031ab0>
   42ac8:	18000826 	beq	r3,zero,42aec <__udivsi3+0x54>
   42acc:	0005883a 	mov	r2,zero
   42ad0:	31400236 	bltu	r6,r5,42adc <__udivsi3+0x44>
   42ad4:	314dc83a 	sub	r6,r6,r5
   42ad8:	10c4b03a 	or	r2,r2,r3
   42adc:	1806d07a 	srli	r3,r3,1
   42ae0:	280ad07a 	srli	r5,r5,1
   42ae4:	183ffa1e 	bne	r3,zero,42ad0 <__alt_mem_epcs_flash_controller+0xfe031ad0>
   42ae8:	f800283a 	ret
   42aec:	0005883a 	mov	r2,zero
   42af0:	f800283a 	ret
   42af4:	00c00044 	movi	r3,1
   42af8:	003ff406 	br	42acc <__alt_mem_epcs_flash_controller+0xfe031acc>

00042afc <__umodsi3>:
   42afc:	2005883a 	mov	r2,r4
   42b00:	2900122e 	bgeu	r5,r4,42b4c <__umodsi3+0x50>
   42b04:	28001116 	blt	r5,zero,42b4c <__umodsi3+0x50>
   42b08:	01800804 	movi	r6,32
   42b0c:	00c00044 	movi	r3,1
   42b10:	00000206 	br	42b1c <__umodsi3+0x20>
   42b14:	30000c26 	beq	r6,zero,42b48 <__umodsi3+0x4c>
   42b18:	28000516 	blt	r5,zero,42b30 <__umodsi3+0x34>
   42b1c:	294b883a 	add	r5,r5,r5
   42b20:	31bfffc4 	addi	r6,r6,-1
   42b24:	18c7883a 	add	r3,r3,r3
   42b28:	293ffa36 	bltu	r5,r4,42b14 <__alt_mem_epcs_flash_controller+0xfe031b14>
   42b2c:	18000626 	beq	r3,zero,42b48 <__umodsi3+0x4c>
   42b30:	1806d07a 	srli	r3,r3,1
   42b34:	11400136 	bltu	r2,r5,42b3c <__umodsi3+0x40>
   42b38:	1145c83a 	sub	r2,r2,r5
   42b3c:	280ad07a 	srli	r5,r5,1
   42b40:	183ffb1e 	bne	r3,zero,42b30 <__alt_mem_epcs_flash_controller+0xfe031b30>
   42b44:	f800283a 	ret
   42b48:	f800283a 	ret
   42b4c:	00c00044 	movi	r3,1
   42b50:	003ff706 	br	42b30 <__alt_mem_epcs_flash_controller+0xfe031b30>

00042b54 <__mulsi3>:
   42b54:	0005883a 	mov	r2,zero
   42b58:	20000726 	beq	r4,zero,42b78 <__mulsi3+0x24>
   42b5c:	20c0004c 	andi	r3,r4,1
   42b60:	2008d07a 	srli	r4,r4,1
   42b64:	18000126 	beq	r3,zero,42b6c <__mulsi3+0x18>
   42b68:	1145883a 	add	r2,r2,r5
   42b6c:	294b883a 	add	r5,r5,r5
   42b70:	203ffa1e 	bne	r4,zero,42b5c <__alt_mem_epcs_flash_controller+0xfe031b5c>
   42b74:	f800283a 	ret
   42b78:	f800283a 	ret

00042b7c <__adddf3>:
   42b7c:	02c00434 	movhi	r11,16
   42b80:	5affffc4 	addi	r11,r11,-1
   42b84:	2806d7fa 	srli	r3,r5,31
   42b88:	2ad4703a 	and	r10,r5,r11
   42b8c:	3ad2703a 	and	r9,r7,r11
   42b90:	3804d53a 	srli	r2,r7,20
   42b94:	3018d77a 	srli	r12,r6,29
   42b98:	280ad53a 	srli	r5,r5,20
   42b9c:	501490fa 	slli	r10,r10,3
   42ba0:	2010d77a 	srli	r8,r4,29
   42ba4:	481290fa 	slli	r9,r9,3
   42ba8:	380ed7fa 	srli	r7,r7,31
   42bac:	defffb04 	addi	sp,sp,-20
   42bb0:	dc800215 	stw	r18,8(sp)
   42bb4:	dc400115 	stw	r17,4(sp)
   42bb8:	dc000015 	stw	r16,0(sp)
   42bbc:	dfc00415 	stw	ra,16(sp)
   42bc0:	dcc00315 	stw	r19,12(sp)
   42bc4:	1c803fcc 	andi	r18,r3,255
   42bc8:	2c01ffcc 	andi	r16,r5,2047
   42bcc:	5210b03a 	or	r8,r10,r8
   42bd0:	202290fa 	slli	r17,r4,3
   42bd4:	1081ffcc 	andi	r2,r2,2047
   42bd8:	4b12b03a 	or	r9,r9,r12
   42bdc:	300c90fa 	slli	r6,r6,3
   42be0:	91c07526 	beq	r18,r7,42db8 <__adddf3+0x23c>
   42be4:	8087c83a 	sub	r3,r16,r2
   42be8:	00c0ab0e 	bge	zero,r3,42e98 <__adddf3+0x31c>
   42bec:	10002a1e 	bne	r2,zero,42c98 <__adddf3+0x11c>
   42bf0:	4984b03a 	or	r2,r9,r6
   42bf4:	1000961e 	bne	r2,zero,42e50 <__adddf3+0x2d4>
   42bf8:	888001cc 	andi	r2,r17,7
   42bfc:	10000726 	beq	r2,zero,42c1c <__adddf3+0xa0>
   42c00:	888003cc 	andi	r2,r17,15
   42c04:	00c00104 	movi	r3,4
   42c08:	10c00426 	beq	r2,r3,42c1c <__adddf3+0xa0>
   42c0c:	88c7883a 	add	r3,r17,r3
   42c10:	1c63803a 	cmpltu	r17,r3,r17
   42c14:	4451883a 	add	r8,r8,r17
   42c18:	1823883a 	mov	r17,r3
   42c1c:	4080202c 	andhi	r2,r8,128
   42c20:	10005926 	beq	r2,zero,42d88 <__adddf3+0x20c>
   42c24:	84000044 	addi	r16,r16,1
   42c28:	0081ffc4 	movi	r2,2047
   42c2c:	8080ba26 	beq	r16,r2,42f18 <__adddf3+0x39c>
   42c30:	00bfe034 	movhi	r2,65408
   42c34:	10bfffc4 	addi	r2,r2,-1
   42c38:	4090703a 	and	r8,r8,r2
   42c3c:	4004977a 	slli	r2,r8,29
   42c40:	4010927a 	slli	r8,r8,9
   42c44:	8822d0fa 	srli	r17,r17,3
   42c48:	8401ffcc 	andi	r16,r16,2047
   42c4c:	4010d33a 	srli	r8,r8,12
   42c50:	9007883a 	mov	r3,r18
   42c54:	1444b03a 	or	r2,r2,r17
   42c58:	8401ffcc 	andi	r16,r16,2047
   42c5c:	8020953a 	slli	r16,r16,20
   42c60:	18c03fcc 	andi	r3,r3,255
   42c64:	01000434 	movhi	r4,16
   42c68:	213fffc4 	addi	r4,r4,-1
   42c6c:	180697fa 	slli	r3,r3,31
   42c70:	4110703a 	and	r8,r8,r4
   42c74:	4410b03a 	or	r8,r8,r16
   42c78:	40c6b03a 	or	r3,r8,r3
   42c7c:	dfc00417 	ldw	ra,16(sp)
   42c80:	dcc00317 	ldw	r19,12(sp)
   42c84:	dc800217 	ldw	r18,8(sp)
   42c88:	dc400117 	ldw	r17,4(sp)
   42c8c:	dc000017 	ldw	r16,0(sp)
   42c90:	dec00504 	addi	sp,sp,20
   42c94:	f800283a 	ret
   42c98:	0081ffc4 	movi	r2,2047
   42c9c:	80bfd626 	beq	r16,r2,42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   42ca0:	4a402034 	orhi	r9,r9,128
   42ca4:	00800e04 	movi	r2,56
   42ca8:	10c09f16 	blt	r2,r3,42f28 <__adddf3+0x3ac>
   42cac:	008007c4 	movi	r2,31
   42cb0:	10c0c216 	blt	r2,r3,42fbc <__adddf3+0x440>
   42cb4:	00800804 	movi	r2,32
   42cb8:	10c5c83a 	sub	r2,r2,r3
   42cbc:	488a983a 	sll	r5,r9,r2
   42cc0:	30c8d83a 	srl	r4,r6,r3
   42cc4:	3084983a 	sll	r2,r6,r2
   42cc8:	48c6d83a 	srl	r3,r9,r3
   42ccc:	290cb03a 	or	r6,r5,r4
   42cd0:	1004c03a 	cmpne	r2,r2,zero
   42cd4:	308cb03a 	or	r6,r6,r2
   42cd8:	898dc83a 	sub	r6,r17,r6
   42cdc:	89a3803a 	cmpltu	r17,r17,r6
   42ce0:	40d1c83a 	sub	r8,r8,r3
   42ce4:	4451c83a 	sub	r8,r8,r17
   42ce8:	3023883a 	mov	r17,r6
   42cec:	4080202c 	andhi	r2,r8,128
   42cf0:	10002326 	beq	r2,zero,42d80 <__adddf3+0x204>
   42cf4:	04c02034 	movhi	r19,128
   42cf8:	9cffffc4 	addi	r19,r19,-1
   42cfc:	44e6703a 	and	r19,r8,r19
   42d00:	98007626 	beq	r19,zero,42edc <__adddf3+0x360>
   42d04:	9809883a 	mov	r4,r19
   42d08:	0044fd00 	call	44fd0 <__clzsi2>
   42d0c:	10fffe04 	addi	r3,r2,-8
   42d10:	010007c4 	movi	r4,31
   42d14:	20c07716 	blt	r4,r3,42ef4 <__adddf3+0x378>
   42d18:	00800804 	movi	r2,32
   42d1c:	10c5c83a 	sub	r2,r2,r3
   42d20:	8884d83a 	srl	r2,r17,r2
   42d24:	98d0983a 	sll	r8,r19,r3
   42d28:	88e2983a 	sll	r17,r17,r3
   42d2c:	1204b03a 	or	r2,r2,r8
   42d30:	1c007416 	blt	r3,r16,42f04 <__adddf3+0x388>
   42d34:	1c21c83a 	sub	r16,r3,r16
   42d38:	82000044 	addi	r8,r16,1
   42d3c:	00c007c4 	movi	r3,31
   42d40:	1a009116 	blt	r3,r8,42f88 <__adddf3+0x40c>
   42d44:	00c00804 	movi	r3,32
   42d48:	1a07c83a 	sub	r3,r3,r8
   42d4c:	8a08d83a 	srl	r4,r17,r8
   42d50:	88e2983a 	sll	r17,r17,r3
   42d54:	10c6983a 	sll	r3,r2,r3
   42d58:	1210d83a 	srl	r8,r2,r8
   42d5c:	8804c03a 	cmpne	r2,r17,zero
   42d60:	1906b03a 	or	r3,r3,r4
   42d64:	18a2b03a 	or	r17,r3,r2
   42d68:	0021883a 	mov	r16,zero
   42d6c:	003fa206 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   42d70:	1890b03a 	or	r8,r3,r2
   42d74:	40017d26 	beq	r8,zero,4336c <__adddf3+0x7f0>
   42d78:	1011883a 	mov	r8,r2
   42d7c:	1823883a 	mov	r17,r3
   42d80:	888001cc 	andi	r2,r17,7
   42d84:	103f9e1e 	bne	r2,zero,42c00 <__alt_mem_epcs_flash_controller+0xfe031c00>
   42d88:	4004977a 	slli	r2,r8,29
   42d8c:	8822d0fa 	srli	r17,r17,3
   42d90:	4010d0fa 	srli	r8,r8,3
   42d94:	9007883a 	mov	r3,r18
   42d98:	1444b03a 	or	r2,r2,r17
   42d9c:	0101ffc4 	movi	r4,2047
   42da0:	81002426 	beq	r16,r4,42e34 <__adddf3+0x2b8>
   42da4:	8120703a 	and	r16,r16,r4
   42da8:	01000434 	movhi	r4,16
   42dac:	213fffc4 	addi	r4,r4,-1
   42db0:	4110703a 	and	r8,r8,r4
   42db4:	003fa806 	br	42c58 <__alt_mem_epcs_flash_controller+0xfe031c58>
   42db8:	8089c83a 	sub	r4,r16,r2
   42dbc:	01005e0e 	bge	zero,r4,42f38 <__adddf3+0x3bc>
   42dc0:	10002b26 	beq	r2,zero,42e70 <__adddf3+0x2f4>
   42dc4:	0081ffc4 	movi	r2,2047
   42dc8:	80bf8b26 	beq	r16,r2,42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   42dcc:	4a402034 	orhi	r9,r9,128
   42dd0:	00800e04 	movi	r2,56
   42dd4:	1100a40e 	bge	r2,r4,43068 <__adddf3+0x4ec>
   42dd8:	498cb03a 	or	r6,r9,r6
   42ddc:	300ac03a 	cmpne	r5,r6,zero
   42de0:	0013883a 	mov	r9,zero
   42de4:	2c4b883a 	add	r5,r5,r17
   42de8:	2c63803a 	cmpltu	r17,r5,r17
   42dec:	4a11883a 	add	r8,r9,r8
   42df0:	8a11883a 	add	r8,r17,r8
   42df4:	2823883a 	mov	r17,r5
   42df8:	4080202c 	andhi	r2,r8,128
   42dfc:	103fe026 	beq	r2,zero,42d80 <__alt_mem_epcs_flash_controller+0xfe031d80>
   42e00:	84000044 	addi	r16,r16,1
   42e04:	0081ffc4 	movi	r2,2047
   42e08:	8080d226 	beq	r16,r2,43154 <__adddf3+0x5d8>
   42e0c:	00bfe034 	movhi	r2,65408
   42e10:	10bfffc4 	addi	r2,r2,-1
   42e14:	4090703a 	and	r8,r8,r2
   42e18:	880ad07a 	srli	r5,r17,1
   42e1c:	400897fa 	slli	r4,r8,31
   42e20:	88c0004c 	andi	r3,r17,1
   42e24:	28e2b03a 	or	r17,r5,r3
   42e28:	4010d07a 	srli	r8,r8,1
   42e2c:	2462b03a 	or	r17,r4,r17
   42e30:	003f7106 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   42e34:	4088b03a 	or	r4,r8,r2
   42e38:	20014526 	beq	r4,zero,43350 <__adddf3+0x7d4>
   42e3c:	01000434 	movhi	r4,16
   42e40:	42000234 	orhi	r8,r8,8
   42e44:	213fffc4 	addi	r4,r4,-1
   42e48:	4110703a 	and	r8,r8,r4
   42e4c:	003f8206 	br	42c58 <__alt_mem_epcs_flash_controller+0xfe031c58>
   42e50:	18ffffc4 	addi	r3,r3,-1
   42e54:	1800491e 	bne	r3,zero,42f7c <__adddf3+0x400>
   42e58:	898bc83a 	sub	r5,r17,r6
   42e5c:	8963803a 	cmpltu	r17,r17,r5
   42e60:	4251c83a 	sub	r8,r8,r9
   42e64:	4451c83a 	sub	r8,r8,r17
   42e68:	2823883a 	mov	r17,r5
   42e6c:	003f9f06 	br	42cec <__alt_mem_epcs_flash_controller+0xfe031cec>
   42e70:	4984b03a 	or	r2,r9,r6
   42e74:	103f6026 	beq	r2,zero,42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   42e78:	213fffc4 	addi	r4,r4,-1
   42e7c:	2000931e 	bne	r4,zero,430cc <__adddf3+0x550>
   42e80:	898d883a 	add	r6,r17,r6
   42e84:	3463803a 	cmpltu	r17,r6,r17
   42e88:	4251883a 	add	r8,r8,r9
   42e8c:	8a11883a 	add	r8,r17,r8
   42e90:	3023883a 	mov	r17,r6
   42e94:	003fd806 	br	42df8 <__alt_mem_epcs_flash_controller+0xfe031df8>
   42e98:	1800541e 	bne	r3,zero,42fec <__adddf3+0x470>
   42e9c:	80800044 	addi	r2,r16,1
   42ea0:	1081ffcc 	andi	r2,r2,2047
   42ea4:	00c00044 	movi	r3,1
   42ea8:	1880a00e 	bge	r3,r2,4312c <__adddf3+0x5b0>
   42eac:	8989c83a 	sub	r4,r17,r6
   42eb0:	8905803a 	cmpltu	r2,r17,r4
   42eb4:	4267c83a 	sub	r19,r8,r9
   42eb8:	98a7c83a 	sub	r19,r19,r2
   42ebc:	9880202c 	andhi	r2,r19,128
   42ec0:	10006326 	beq	r2,zero,43050 <__adddf3+0x4d4>
   42ec4:	3463c83a 	sub	r17,r6,r17
   42ec8:	4a07c83a 	sub	r3,r9,r8
   42ecc:	344d803a 	cmpltu	r6,r6,r17
   42ed0:	19a7c83a 	sub	r19,r3,r6
   42ed4:	3825883a 	mov	r18,r7
   42ed8:	983f8a1e 	bne	r19,zero,42d04 <__alt_mem_epcs_flash_controller+0xfe031d04>
   42edc:	8809883a 	mov	r4,r17
   42ee0:	0044fd00 	call	44fd0 <__clzsi2>
   42ee4:	10800804 	addi	r2,r2,32
   42ee8:	10fffe04 	addi	r3,r2,-8
   42eec:	010007c4 	movi	r4,31
   42ef0:	20ff890e 	bge	r4,r3,42d18 <__alt_mem_epcs_flash_controller+0xfe031d18>
   42ef4:	10bff604 	addi	r2,r2,-40
   42ef8:	8884983a 	sll	r2,r17,r2
   42efc:	0023883a 	mov	r17,zero
   42f00:	1c3f8c0e 	bge	r3,r16,42d34 <__alt_mem_epcs_flash_controller+0xfe031d34>
   42f04:	023fe034 	movhi	r8,65408
   42f08:	423fffc4 	addi	r8,r8,-1
   42f0c:	80e1c83a 	sub	r16,r16,r3
   42f10:	1210703a 	and	r8,r2,r8
   42f14:	003f3806 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   42f18:	9007883a 	mov	r3,r18
   42f1c:	0011883a 	mov	r8,zero
   42f20:	0005883a 	mov	r2,zero
   42f24:	003f4c06 	br	42c58 <__alt_mem_epcs_flash_controller+0xfe031c58>
   42f28:	498cb03a 	or	r6,r9,r6
   42f2c:	300cc03a 	cmpne	r6,r6,zero
   42f30:	0007883a 	mov	r3,zero
   42f34:	003f6806 	br	42cd8 <__alt_mem_epcs_flash_controller+0xfe031cd8>
   42f38:	20009c1e 	bne	r4,zero,431ac <__adddf3+0x630>
   42f3c:	80800044 	addi	r2,r16,1
   42f40:	1141ffcc 	andi	r5,r2,2047
   42f44:	01000044 	movi	r4,1
   42f48:	2140670e 	bge	r4,r5,430e8 <__adddf3+0x56c>
   42f4c:	0101ffc4 	movi	r4,2047
   42f50:	11007f26 	beq	r2,r4,43150 <__adddf3+0x5d4>
   42f54:	898d883a 	add	r6,r17,r6
   42f58:	4247883a 	add	r3,r8,r9
   42f5c:	3451803a 	cmpltu	r8,r6,r17
   42f60:	40d1883a 	add	r8,r8,r3
   42f64:	402297fa 	slli	r17,r8,31
   42f68:	300cd07a 	srli	r6,r6,1
   42f6c:	4010d07a 	srli	r8,r8,1
   42f70:	1021883a 	mov	r16,r2
   42f74:	89a2b03a 	or	r17,r17,r6
   42f78:	003f1f06 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   42f7c:	0081ffc4 	movi	r2,2047
   42f80:	80bf481e 	bne	r16,r2,42ca4 <__alt_mem_epcs_flash_controller+0xfe031ca4>
   42f84:	003f1c06 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   42f88:	843ff844 	addi	r16,r16,-31
   42f8c:	01000804 	movi	r4,32
   42f90:	1406d83a 	srl	r3,r2,r16
   42f94:	41005026 	beq	r8,r4,430d8 <__adddf3+0x55c>
   42f98:	01001004 	movi	r4,64
   42f9c:	2211c83a 	sub	r8,r4,r8
   42fa0:	1204983a 	sll	r2,r2,r8
   42fa4:	88a2b03a 	or	r17,r17,r2
   42fa8:	8822c03a 	cmpne	r17,r17,zero
   42fac:	1c62b03a 	or	r17,r3,r17
   42fb0:	0011883a 	mov	r8,zero
   42fb4:	0021883a 	mov	r16,zero
   42fb8:	003f7106 	br	42d80 <__alt_mem_epcs_flash_controller+0xfe031d80>
   42fbc:	193ff804 	addi	r4,r3,-32
   42fc0:	00800804 	movi	r2,32
   42fc4:	4908d83a 	srl	r4,r9,r4
   42fc8:	18804526 	beq	r3,r2,430e0 <__adddf3+0x564>
   42fcc:	00801004 	movi	r2,64
   42fd0:	10c5c83a 	sub	r2,r2,r3
   42fd4:	4886983a 	sll	r3,r9,r2
   42fd8:	198cb03a 	or	r6,r3,r6
   42fdc:	300cc03a 	cmpne	r6,r6,zero
   42fe0:	218cb03a 	or	r6,r4,r6
   42fe4:	0007883a 	mov	r3,zero
   42fe8:	003f3b06 	br	42cd8 <__alt_mem_epcs_flash_controller+0xfe031cd8>
   42fec:	80002a26 	beq	r16,zero,43098 <__adddf3+0x51c>
   42ff0:	0101ffc4 	movi	r4,2047
   42ff4:	11006826 	beq	r2,r4,43198 <__adddf3+0x61c>
   42ff8:	00c7c83a 	sub	r3,zero,r3
   42ffc:	42002034 	orhi	r8,r8,128
   43000:	01000e04 	movi	r4,56
   43004:	20c07c16 	blt	r4,r3,431f8 <__adddf3+0x67c>
   43008:	010007c4 	movi	r4,31
   4300c:	20c0da16 	blt	r4,r3,43378 <__adddf3+0x7fc>
   43010:	01000804 	movi	r4,32
   43014:	20c9c83a 	sub	r4,r4,r3
   43018:	4114983a 	sll	r10,r8,r4
   4301c:	88cad83a 	srl	r5,r17,r3
   43020:	8908983a 	sll	r4,r17,r4
   43024:	40c6d83a 	srl	r3,r8,r3
   43028:	5162b03a 	or	r17,r10,r5
   4302c:	2008c03a 	cmpne	r4,r4,zero
   43030:	8922b03a 	or	r17,r17,r4
   43034:	3463c83a 	sub	r17,r6,r17
   43038:	48c7c83a 	sub	r3,r9,r3
   4303c:	344d803a 	cmpltu	r6,r6,r17
   43040:	1991c83a 	sub	r8,r3,r6
   43044:	1021883a 	mov	r16,r2
   43048:	3825883a 	mov	r18,r7
   4304c:	003f2706 	br	42cec <__alt_mem_epcs_flash_controller+0xfe031cec>
   43050:	24d0b03a 	or	r8,r4,r19
   43054:	40001b1e 	bne	r8,zero,430c4 <__adddf3+0x548>
   43058:	0005883a 	mov	r2,zero
   4305c:	0007883a 	mov	r3,zero
   43060:	0021883a 	mov	r16,zero
   43064:	003f4d06 	br	42d9c <__alt_mem_epcs_flash_controller+0xfe031d9c>
   43068:	008007c4 	movi	r2,31
   4306c:	11003c16 	blt	r2,r4,43160 <__adddf3+0x5e4>
   43070:	00800804 	movi	r2,32
   43074:	1105c83a 	sub	r2,r2,r4
   43078:	488e983a 	sll	r7,r9,r2
   4307c:	310ad83a 	srl	r5,r6,r4
   43080:	3084983a 	sll	r2,r6,r2
   43084:	4912d83a 	srl	r9,r9,r4
   43088:	394ab03a 	or	r5,r7,r5
   4308c:	1004c03a 	cmpne	r2,r2,zero
   43090:	288ab03a 	or	r5,r5,r2
   43094:	003f5306 	br	42de4 <__alt_mem_epcs_flash_controller+0xfe031de4>
   43098:	4448b03a 	or	r4,r8,r17
   4309c:	20003e26 	beq	r4,zero,43198 <__adddf3+0x61c>
   430a0:	00c6303a 	nor	r3,zero,r3
   430a4:	18003a1e 	bne	r3,zero,43190 <__adddf3+0x614>
   430a8:	3463c83a 	sub	r17,r6,r17
   430ac:	4a07c83a 	sub	r3,r9,r8
   430b0:	344d803a 	cmpltu	r6,r6,r17
   430b4:	1991c83a 	sub	r8,r3,r6
   430b8:	1021883a 	mov	r16,r2
   430bc:	3825883a 	mov	r18,r7
   430c0:	003f0a06 	br	42cec <__alt_mem_epcs_flash_controller+0xfe031cec>
   430c4:	2023883a 	mov	r17,r4
   430c8:	003f0d06 	br	42d00 <__alt_mem_epcs_flash_controller+0xfe031d00>
   430cc:	0081ffc4 	movi	r2,2047
   430d0:	80bf3f1e 	bne	r16,r2,42dd0 <__alt_mem_epcs_flash_controller+0xfe031dd0>
   430d4:	003ec806 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   430d8:	0005883a 	mov	r2,zero
   430dc:	003fb106 	br	42fa4 <__alt_mem_epcs_flash_controller+0xfe031fa4>
   430e0:	0007883a 	mov	r3,zero
   430e4:	003fbc06 	br	42fd8 <__alt_mem_epcs_flash_controller+0xfe031fd8>
   430e8:	4444b03a 	or	r2,r8,r17
   430ec:	8000871e 	bne	r16,zero,4330c <__adddf3+0x790>
   430f0:	1000ba26 	beq	r2,zero,433dc <__adddf3+0x860>
   430f4:	4984b03a 	or	r2,r9,r6
   430f8:	103ebf26 	beq	r2,zero,42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   430fc:	8985883a 	add	r2,r17,r6
   43100:	4247883a 	add	r3,r8,r9
   43104:	1451803a 	cmpltu	r8,r2,r17
   43108:	40d1883a 	add	r8,r8,r3
   4310c:	40c0202c 	andhi	r3,r8,128
   43110:	1023883a 	mov	r17,r2
   43114:	183f1a26 	beq	r3,zero,42d80 <__alt_mem_epcs_flash_controller+0xfe031d80>
   43118:	00bfe034 	movhi	r2,65408
   4311c:	10bfffc4 	addi	r2,r2,-1
   43120:	2021883a 	mov	r16,r4
   43124:	4090703a 	and	r8,r8,r2
   43128:	003eb306 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   4312c:	4444b03a 	or	r2,r8,r17
   43130:	8000291e 	bne	r16,zero,431d8 <__adddf3+0x65c>
   43134:	10004b1e 	bne	r2,zero,43264 <__adddf3+0x6e8>
   43138:	4990b03a 	or	r8,r9,r6
   4313c:	40008b26 	beq	r8,zero,4336c <__adddf3+0x7f0>
   43140:	4811883a 	mov	r8,r9
   43144:	3023883a 	mov	r17,r6
   43148:	3825883a 	mov	r18,r7
   4314c:	003eaa06 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   43150:	1021883a 	mov	r16,r2
   43154:	0011883a 	mov	r8,zero
   43158:	0005883a 	mov	r2,zero
   4315c:	003f0f06 	br	42d9c <__alt_mem_epcs_flash_controller+0xfe031d9c>
   43160:	217ff804 	addi	r5,r4,-32
   43164:	00800804 	movi	r2,32
   43168:	494ad83a 	srl	r5,r9,r5
   4316c:	20807d26 	beq	r4,r2,43364 <__adddf3+0x7e8>
   43170:	00801004 	movi	r2,64
   43174:	1109c83a 	sub	r4,r2,r4
   43178:	4912983a 	sll	r9,r9,r4
   4317c:	498cb03a 	or	r6,r9,r6
   43180:	300cc03a 	cmpne	r6,r6,zero
   43184:	298ab03a 	or	r5,r5,r6
   43188:	0013883a 	mov	r9,zero
   4318c:	003f1506 	br	42de4 <__alt_mem_epcs_flash_controller+0xfe031de4>
   43190:	0101ffc4 	movi	r4,2047
   43194:	113f9a1e 	bne	r2,r4,43000 <__alt_mem_epcs_flash_controller+0xfe032000>
   43198:	4811883a 	mov	r8,r9
   4319c:	3023883a 	mov	r17,r6
   431a0:	1021883a 	mov	r16,r2
   431a4:	3825883a 	mov	r18,r7
   431a8:	003e9306 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   431ac:	8000161e 	bne	r16,zero,43208 <__adddf3+0x68c>
   431b0:	444ab03a 	or	r5,r8,r17
   431b4:	28005126 	beq	r5,zero,432fc <__adddf3+0x780>
   431b8:	0108303a 	nor	r4,zero,r4
   431bc:	20004d1e 	bne	r4,zero,432f4 <__adddf3+0x778>
   431c0:	89a3883a 	add	r17,r17,r6
   431c4:	4253883a 	add	r9,r8,r9
   431c8:	898d803a 	cmpltu	r6,r17,r6
   431cc:	3251883a 	add	r8,r6,r9
   431d0:	1021883a 	mov	r16,r2
   431d4:	003f0806 	br	42df8 <__alt_mem_epcs_flash_controller+0xfe031df8>
   431d8:	1000301e 	bne	r2,zero,4329c <__adddf3+0x720>
   431dc:	4984b03a 	or	r2,r9,r6
   431e0:	10007126 	beq	r2,zero,433a8 <__adddf3+0x82c>
   431e4:	4811883a 	mov	r8,r9
   431e8:	3023883a 	mov	r17,r6
   431ec:	3825883a 	mov	r18,r7
   431f0:	0401ffc4 	movi	r16,2047
   431f4:	003e8006 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   431f8:	4462b03a 	or	r17,r8,r17
   431fc:	8822c03a 	cmpne	r17,r17,zero
   43200:	0007883a 	mov	r3,zero
   43204:	003f8b06 	br	43034 <__alt_mem_epcs_flash_controller+0xfe032034>
   43208:	0141ffc4 	movi	r5,2047
   4320c:	11403b26 	beq	r2,r5,432fc <__adddf3+0x780>
   43210:	0109c83a 	sub	r4,zero,r4
   43214:	42002034 	orhi	r8,r8,128
   43218:	01400e04 	movi	r5,56
   4321c:	29006716 	blt	r5,r4,433bc <__adddf3+0x840>
   43220:	014007c4 	movi	r5,31
   43224:	29007016 	blt	r5,r4,433e8 <__adddf3+0x86c>
   43228:	01400804 	movi	r5,32
   4322c:	290bc83a 	sub	r5,r5,r4
   43230:	4154983a 	sll	r10,r8,r5
   43234:	890ed83a 	srl	r7,r17,r4
   43238:	894a983a 	sll	r5,r17,r5
   4323c:	4108d83a 	srl	r4,r8,r4
   43240:	51e2b03a 	or	r17,r10,r7
   43244:	280ac03a 	cmpne	r5,r5,zero
   43248:	8962b03a 	or	r17,r17,r5
   4324c:	89a3883a 	add	r17,r17,r6
   43250:	2253883a 	add	r9,r4,r9
   43254:	898d803a 	cmpltu	r6,r17,r6
   43258:	3251883a 	add	r8,r6,r9
   4325c:	1021883a 	mov	r16,r2
   43260:	003ee506 	br	42df8 <__alt_mem_epcs_flash_controller+0xfe031df8>
   43264:	4984b03a 	or	r2,r9,r6
   43268:	103e6326 	beq	r2,zero,42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   4326c:	8987c83a 	sub	r3,r17,r6
   43270:	88c9803a 	cmpltu	r4,r17,r3
   43274:	4245c83a 	sub	r2,r8,r9
   43278:	1105c83a 	sub	r2,r2,r4
   4327c:	1100202c 	andhi	r4,r2,128
   43280:	203ebb26 	beq	r4,zero,42d70 <__alt_mem_epcs_flash_controller+0xfe031d70>
   43284:	3463c83a 	sub	r17,r6,r17
   43288:	4a07c83a 	sub	r3,r9,r8
   4328c:	344d803a 	cmpltu	r6,r6,r17
   43290:	1991c83a 	sub	r8,r3,r6
   43294:	3825883a 	mov	r18,r7
   43298:	003e5706 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   4329c:	4984b03a 	or	r2,r9,r6
   432a0:	10002e26 	beq	r2,zero,4335c <__adddf3+0x7e0>
   432a4:	4004d0fa 	srli	r2,r8,3
   432a8:	8822d0fa 	srli	r17,r17,3
   432ac:	4010977a 	slli	r8,r8,29
   432b0:	10c0022c 	andhi	r3,r2,8
   432b4:	4462b03a 	or	r17,r8,r17
   432b8:	18000826 	beq	r3,zero,432dc <__adddf3+0x760>
   432bc:	4808d0fa 	srli	r4,r9,3
   432c0:	20c0022c 	andhi	r3,r4,8
   432c4:	1800051e 	bne	r3,zero,432dc <__adddf3+0x760>
   432c8:	300cd0fa 	srli	r6,r6,3
   432cc:	4806977a 	slli	r3,r9,29
   432d0:	2005883a 	mov	r2,r4
   432d4:	3825883a 	mov	r18,r7
   432d8:	19a2b03a 	or	r17,r3,r6
   432dc:	8810d77a 	srli	r8,r17,29
   432e0:	100490fa 	slli	r2,r2,3
   432e4:	882290fa 	slli	r17,r17,3
   432e8:	0401ffc4 	movi	r16,2047
   432ec:	4090b03a 	or	r8,r8,r2
   432f0:	003e4106 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   432f4:	0141ffc4 	movi	r5,2047
   432f8:	117fc71e 	bne	r2,r5,43218 <__alt_mem_epcs_flash_controller+0xfe032218>
   432fc:	4811883a 	mov	r8,r9
   43300:	3023883a 	mov	r17,r6
   43304:	1021883a 	mov	r16,r2
   43308:	003e3b06 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   4330c:	10002f26 	beq	r2,zero,433cc <__adddf3+0x850>
   43310:	4984b03a 	or	r2,r9,r6
   43314:	10001126 	beq	r2,zero,4335c <__adddf3+0x7e0>
   43318:	4004d0fa 	srli	r2,r8,3
   4331c:	8822d0fa 	srli	r17,r17,3
   43320:	4010977a 	slli	r8,r8,29
   43324:	10c0022c 	andhi	r3,r2,8
   43328:	4462b03a 	or	r17,r8,r17
   4332c:	183feb26 	beq	r3,zero,432dc <__alt_mem_epcs_flash_controller+0xfe0322dc>
   43330:	4808d0fa 	srli	r4,r9,3
   43334:	20c0022c 	andhi	r3,r4,8
   43338:	183fe81e 	bne	r3,zero,432dc <__alt_mem_epcs_flash_controller+0xfe0322dc>
   4333c:	300cd0fa 	srli	r6,r6,3
   43340:	4806977a 	slli	r3,r9,29
   43344:	2005883a 	mov	r2,r4
   43348:	19a2b03a 	or	r17,r3,r6
   4334c:	003fe306 	br	432dc <__alt_mem_epcs_flash_controller+0xfe0322dc>
   43350:	0011883a 	mov	r8,zero
   43354:	0005883a 	mov	r2,zero
   43358:	003e3f06 	br	42c58 <__alt_mem_epcs_flash_controller+0xfe031c58>
   4335c:	0401ffc4 	movi	r16,2047
   43360:	003e2506 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   43364:	0013883a 	mov	r9,zero
   43368:	003f8406 	br	4317c <__alt_mem_epcs_flash_controller+0xfe03217c>
   4336c:	0005883a 	mov	r2,zero
   43370:	0007883a 	mov	r3,zero
   43374:	003e8906 	br	42d9c <__alt_mem_epcs_flash_controller+0xfe031d9c>
   43378:	197ff804 	addi	r5,r3,-32
   4337c:	01000804 	movi	r4,32
   43380:	414ad83a 	srl	r5,r8,r5
   43384:	19002426 	beq	r3,r4,43418 <__adddf3+0x89c>
   43388:	01001004 	movi	r4,64
   4338c:	20c7c83a 	sub	r3,r4,r3
   43390:	40c6983a 	sll	r3,r8,r3
   43394:	1c46b03a 	or	r3,r3,r17
   43398:	1806c03a 	cmpne	r3,r3,zero
   4339c:	28e2b03a 	or	r17,r5,r3
   433a0:	0007883a 	mov	r3,zero
   433a4:	003f2306 	br	43034 <__alt_mem_epcs_flash_controller+0xfe032034>
   433a8:	0007883a 	mov	r3,zero
   433ac:	5811883a 	mov	r8,r11
   433b0:	00bfffc4 	movi	r2,-1
   433b4:	0401ffc4 	movi	r16,2047
   433b8:	003e7806 	br	42d9c <__alt_mem_epcs_flash_controller+0xfe031d9c>
   433bc:	4462b03a 	or	r17,r8,r17
   433c0:	8822c03a 	cmpne	r17,r17,zero
   433c4:	0009883a 	mov	r4,zero
   433c8:	003fa006 	br	4324c <__alt_mem_epcs_flash_controller+0xfe03224c>
   433cc:	4811883a 	mov	r8,r9
   433d0:	3023883a 	mov	r17,r6
   433d4:	0401ffc4 	movi	r16,2047
   433d8:	003e0706 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   433dc:	4811883a 	mov	r8,r9
   433e0:	3023883a 	mov	r17,r6
   433e4:	003e0406 	br	42bf8 <__alt_mem_epcs_flash_controller+0xfe031bf8>
   433e8:	21fff804 	addi	r7,r4,-32
   433ec:	01400804 	movi	r5,32
   433f0:	41ced83a 	srl	r7,r8,r7
   433f4:	21400a26 	beq	r4,r5,43420 <__adddf3+0x8a4>
   433f8:	01401004 	movi	r5,64
   433fc:	2909c83a 	sub	r4,r5,r4
   43400:	4108983a 	sll	r4,r8,r4
   43404:	2448b03a 	or	r4,r4,r17
   43408:	2008c03a 	cmpne	r4,r4,zero
   4340c:	3922b03a 	or	r17,r7,r4
   43410:	0009883a 	mov	r4,zero
   43414:	003f8d06 	br	4324c <__alt_mem_epcs_flash_controller+0xfe03224c>
   43418:	0007883a 	mov	r3,zero
   4341c:	003fdd06 	br	43394 <__alt_mem_epcs_flash_controller+0xfe032394>
   43420:	0009883a 	mov	r4,zero
   43424:	003ff706 	br	43404 <__alt_mem_epcs_flash_controller+0xfe032404>

00043428 <__divdf3>:
   43428:	defff204 	addi	sp,sp,-56
   4342c:	dd400915 	stw	r21,36(sp)
   43430:	282ad53a 	srli	r21,r5,20
   43434:	dd000815 	stw	r20,32(sp)
   43438:	2828d7fa 	srli	r20,r5,31
   4343c:	dc000415 	stw	r16,16(sp)
   43440:	04000434 	movhi	r16,16
   43444:	df000c15 	stw	fp,48(sp)
   43448:	843fffc4 	addi	r16,r16,-1
   4344c:	dfc00d15 	stw	ra,52(sp)
   43450:	ddc00b15 	stw	r23,44(sp)
   43454:	dd800a15 	stw	r22,40(sp)
   43458:	dcc00715 	stw	r19,28(sp)
   4345c:	dc800615 	stw	r18,24(sp)
   43460:	dc400515 	stw	r17,20(sp)
   43464:	ad41ffcc 	andi	r21,r21,2047
   43468:	2c20703a 	and	r16,r5,r16
   4346c:	a7003fcc 	andi	fp,r20,255
   43470:	a8006126 	beq	r21,zero,435f8 <__divdf3+0x1d0>
   43474:	0081ffc4 	movi	r2,2047
   43478:	2025883a 	mov	r18,r4
   4347c:	a8803726 	beq	r21,r2,4355c <__divdf3+0x134>
   43480:	80800434 	orhi	r2,r16,16
   43484:	100490fa 	slli	r2,r2,3
   43488:	2020d77a 	srli	r16,r4,29
   4348c:	202490fa 	slli	r18,r4,3
   43490:	ad7f0044 	addi	r21,r21,-1023
   43494:	80a0b03a 	or	r16,r16,r2
   43498:	0027883a 	mov	r19,zero
   4349c:	0013883a 	mov	r9,zero
   434a0:	3804d53a 	srli	r2,r7,20
   434a4:	382cd7fa 	srli	r22,r7,31
   434a8:	04400434 	movhi	r17,16
   434ac:	8c7fffc4 	addi	r17,r17,-1
   434b0:	1081ffcc 	andi	r2,r2,2047
   434b4:	3011883a 	mov	r8,r6
   434b8:	3c62703a 	and	r17,r7,r17
   434bc:	b5c03fcc 	andi	r23,r22,255
   434c0:	10006c26 	beq	r2,zero,43674 <__divdf3+0x24c>
   434c4:	00c1ffc4 	movi	r3,2047
   434c8:	10c06426 	beq	r2,r3,4365c <__divdf3+0x234>
   434cc:	88c00434 	orhi	r3,r17,16
   434d0:	180690fa 	slli	r3,r3,3
   434d4:	3022d77a 	srli	r17,r6,29
   434d8:	301090fa 	slli	r8,r6,3
   434dc:	10bf0044 	addi	r2,r2,-1023
   434e0:	88e2b03a 	or	r17,r17,r3
   434e4:	000f883a 	mov	r7,zero
   434e8:	a58cf03a 	xor	r6,r20,r22
   434ec:	3cc8b03a 	or	r4,r7,r19
   434f0:	a8abc83a 	sub	r21,r21,r2
   434f4:	008003c4 	movi	r2,15
   434f8:	3007883a 	mov	r3,r6
   434fc:	34c03fcc 	andi	r19,r6,255
   43500:	11009036 	bltu	r2,r4,43744 <__divdf3+0x31c>
   43504:	200890ba 	slli	r4,r4,2
   43508:	00800134 	movhi	r2,4
   4350c:	108d4704 	addi	r2,r2,13596
   43510:	2089883a 	add	r4,r4,r2
   43514:	20800017 	ldw	r2,0(r4)
   43518:	1000683a 	jmp	r2
   4351c:	00043744 	movi	zero,4317
   43520:	00043594 	movui	zero,4310
   43524:	00043734 	movhi	zero,4316
   43528:	00043588 	cmpgei	zero,zero,4310
   4352c:	00043734 	movhi	zero,4316
   43530:	00043708 	cmpgei	zero,zero,4316
   43534:	00043734 	movhi	zero,4316
   43538:	00043588 	cmpgei	zero,zero,4310
   4353c:	00043594 	movui	zero,4310
   43540:	00043594 	movui	zero,4310
   43544:	00043708 	cmpgei	zero,zero,4316
   43548:	00043588 	cmpgei	zero,zero,4310
   4354c:	00043578 	rdprs	zero,zero,4309
   43550:	00043578 	rdprs	zero,zero,4309
   43554:	00043578 	rdprs	zero,zero,4309
   43558:	00043a28 	cmpgeui	zero,zero,4328
   4355c:	2404b03a 	or	r2,r4,r16
   43560:	1000661e 	bne	r2,zero,436fc <__divdf3+0x2d4>
   43564:	04c00204 	movi	r19,8
   43568:	0021883a 	mov	r16,zero
   4356c:	0025883a 	mov	r18,zero
   43570:	02400084 	movi	r9,2
   43574:	003fca06 	br	434a0 <__alt_mem_epcs_flash_controller+0xfe0324a0>
   43578:	8023883a 	mov	r17,r16
   4357c:	9011883a 	mov	r8,r18
   43580:	e02f883a 	mov	r23,fp
   43584:	480f883a 	mov	r7,r9
   43588:	00800084 	movi	r2,2
   4358c:	3881311e 	bne	r7,r2,43a54 <__divdf3+0x62c>
   43590:	b827883a 	mov	r19,r23
   43594:	98c0004c 	andi	r3,r19,1
   43598:	0081ffc4 	movi	r2,2047
   4359c:	000b883a 	mov	r5,zero
   435a0:	0025883a 	mov	r18,zero
   435a4:	1004953a 	slli	r2,r2,20
   435a8:	18c03fcc 	andi	r3,r3,255
   435ac:	04400434 	movhi	r17,16
   435b0:	8c7fffc4 	addi	r17,r17,-1
   435b4:	180697fa 	slli	r3,r3,31
   435b8:	2c4a703a 	and	r5,r5,r17
   435bc:	288ab03a 	or	r5,r5,r2
   435c0:	28c6b03a 	or	r3,r5,r3
   435c4:	9005883a 	mov	r2,r18
   435c8:	dfc00d17 	ldw	ra,52(sp)
   435cc:	df000c17 	ldw	fp,48(sp)
   435d0:	ddc00b17 	ldw	r23,44(sp)
   435d4:	dd800a17 	ldw	r22,40(sp)
   435d8:	dd400917 	ldw	r21,36(sp)
   435dc:	dd000817 	ldw	r20,32(sp)
   435e0:	dcc00717 	ldw	r19,28(sp)
   435e4:	dc800617 	ldw	r18,24(sp)
   435e8:	dc400517 	ldw	r17,20(sp)
   435ec:	dc000417 	ldw	r16,16(sp)
   435f0:	dec00e04 	addi	sp,sp,56
   435f4:	f800283a 	ret
   435f8:	2404b03a 	or	r2,r4,r16
   435fc:	2027883a 	mov	r19,r4
   43600:	10003926 	beq	r2,zero,436e8 <__divdf3+0x2c0>
   43604:	80012e26 	beq	r16,zero,43ac0 <__divdf3+0x698>
   43608:	8009883a 	mov	r4,r16
   4360c:	d9800315 	stw	r6,12(sp)
   43610:	d9c00215 	stw	r7,8(sp)
   43614:	0044fd00 	call	44fd0 <__clzsi2>
   43618:	d9800317 	ldw	r6,12(sp)
   4361c:	d9c00217 	ldw	r7,8(sp)
   43620:	113ffd44 	addi	r4,r2,-11
   43624:	00c00704 	movi	r3,28
   43628:	19012116 	blt	r3,r4,43ab0 <__divdf3+0x688>
   4362c:	00c00744 	movi	r3,29
   43630:	147ffe04 	addi	r17,r2,-8
   43634:	1907c83a 	sub	r3,r3,r4
   43638:	8460983a 	sll	r16,r16,r17
   4363c:	98c6d83a 	srl	r3,r19,r3
   43640:	9c64983a 	sll	r18,r19,r17
   43644:	1c20b03a 	or	r16,r3,r16
   43648:	1080fcc4 	addi	r2,r2,1011
   4364c:	00abc83a 	sub	r21,zero,r2
   43650:	0027883a 	mov	r19,zero
   43654:	0013883a 	mov	r9,zero
   43658:	003f9106 	br	434a0 <__alt_mem_epcs_flash_controller+0xfe0324a0>
   4365c:	3446b03a 	or	r3,r6,r17
   43660:	18001f1e 	bne	r3,zero,436e0 <__divdf3+0x2b8>
   43664:	0023883a 	mov	r17,zero
   43668:	0011883a 	mov	r8,zero
   4366c:	01c00084 	movi	r7,2
   43670:	003f9d06 	br	434e8 <__alt_mem_epcs_flash_controller+0xfe0324e8>
   43674:	3446b03a 	or	r3,r6,r17
   43678:	18001526 	beq	r3,zero,436d0 <__divdf3+0x2a8>
   4367c:	88011b26 	beq	r17,zero,43aec <__divdf3+0x6c4>
   43680:	8809883a 	mov	r4,r17
   43684:	d9800315 	stw	r6,12(sp)
   43688:	da400115 	stw	r9,4(sp)
   4368c:	0044fd00 	call	44fd0 <__clzsi2>
   43690:	d9800317 	ldw	r6,12(sp)
   43694:	da400117 	ldw	r9,4(sp)
   43698:	113ffd44 	addi	r4,r2,-11
   4369c:	00c00704 	movi	r3,28
   436a0:	19010e16 	blt	r3,r4,43adc <__divdf3+0x6b4>
   436a4:	00c00744 	movi	r3,29
   436a8:	123ffe04 	addi	r8,r2,-8
   436ac:	1907c83a 	sub	r3,r3,r4
   436b0:	8a22983a 	sll	r17,r17,r8
   436b4:	30c6d83a 	srl	r3,r6,r3
   436b8:	3210983a 	sll	r8,r6,r8
   436bc:	1c62b03a 	or	r17,r3,r17
   436c0:	1080fcc4 	addi	r2,r2,1011
   436c4:	0085c83a 	sub	r2,zero,r2
   436c8:	000f883a 	mov	r7,zero
   436cc:	003f8606 	br	434e8 <__alt_mem_epcs_flash_controller+0xfe0324e8>
   436d0:	0023883a 	mov	r17,zero
   436d4:	0011883a 	mov	r8,zero
   436d8:	01c00044 	movi	r7,1
   436dc:	003f8206 	br	434e8 <__alt_mem_epcs_flash_controller+0xfe0324e8>
   436e0:	01c000c4 	movi	r7,3
   436e4:	003f8006 	br	434e8 <__alt_mem_epcs_flash_controller+0xfe0324e8>
   436e8:	04c00104 	movi	r19,4
   436ec:	0021883a 	mov	r16,zero
   436f0:	0025883a 	mov	r18,zero
   436f4:	02400044 	movi	r9,1
   436f8:	003f6906 	br	434a0 <__alt_mem_epcs_flash_controller+0xfe0324a0>
   436fc:	04c00304 	movi	r19,12
   43700:	024000c4 	movi	r9,3
   43704:	003f6606 	br	434a0 <__alt_mem_epcs_flash_controller+0xfe0324a0>
   43708:	01400434 	movhi	r5,16
   4370c:	0007883a 	mov	r3,zero
   43710:	297fffc4 	addi	r5,r5,-1
   43714:	04bfffc4 	movi	r18,-1
   43718:	0081ffc4 	movi	r2,2047
   4371c:	003fa106 	br	435a4 <__alt_mem_epcs_flash_controller+0xfe0325a4>
   43720:	00c00044 	movi	r3,1
   43724:	1887c83a 	sub	r3,r3,r2
   43728:	01000e04 	movi	r4,56
   4372c:	20c1210e 	bge	r4,r3,43bb4 <__divdf3+0x78c>
   43730:	98c0004c 	andi	r3,r19,1
   43734:	0005883a 	mov	r2,zero
   43738:	000b883a 	mov	r5,zero
   4373c:	0025883a 	mov	r18,zero
   43740:	003f9806 	br	435a4 <__alt_mem_epcs_flash_controller+0xfe0325a4>
   43744:	8c00fd36 	bltu	r17,r16,43b3c <__divdf3+0x714>
   43748:	8440fb26 	beq	r16,r17,43b38 <__divdf3+0x710>
   4374c:	8007883a 	mov	r3,r16
   43750:	ad7fffc4 	addi	r21,r21,-1
   43754:	0021883a 	mov	r16,zero
   43758:	4004d63a 	srli	r2,r8,24
   4375c:	8822923a 	slli	r17,r17,8
   43760:	1809883a 	mov	r4,r3
   43764:	402c923a 	slli	r22,r8,8
   43768:	88b8b03a 	or	fp,r17,r2
   4376c:	e028d43a 	srli	r20,fp,16
   43770:	d8c00015 	stw	r3,0(sp)
   43774:	e5ffffcc 	andi	r23,fp,65535
   43778:	a00b883a 	mov	r5,r20
   4377c:	0042a980 	call	42a98 <__udivsi3>
   43780:	d8c00017 	ldw	r3,0(sp)
   43784:	a00b883a 	mov	r5,r20
   43788:	d8800315 	stw	r2,12(sp)
   4378c:	1809883a 	mov	r4,r3
   43790:	0042afc0 	call	42afc <__umodsi3>
   43794:	d9800317 	ldw	r6,12(sp)
   43798:	1006943a 	slli	r3,r2,16
   4379c:	9004d43a 	srli	r2,r18,16
   437a0:	b9a3383a 	mul	r17,r23,r6
   437a4:	10c4b03a 	or	r2,r2,r3
   437a8:	1440062e 	bgeu	r2,r17,437c4 <__divdf3+0x39c>
   437ac:	1705883a 	add	r2,r2,fp
   437b0:	30ffffc4 	addi	r3,r6,-1
   437b4:	1700ee36 	bltu	r2,fp,43b70 <__divdf3+0x748>
   437b8:	1440ed2e 	bgeu	r2,r17,43b70 <__divdf3+0x748>
   437bc:	31bfff84 	addi	r6,r6,-2
   437c0:	1705883a 	add	r2,r2,fp
   437c4:	1463c83a 	sub	r17,r2,r17
   437c8:	a00b883a 	mov	r5,r20
   437cc:	8809883a 	mov	r4,r17
   437d0:	d9800315 	stw	r6,12(sp)
   437d4:	0042a980 	call	42a98 <__udivsi3>
   437d8:	a00b883a 	mov	r5,r20
   437dc:	8809883a 	mov	r4,r17
   437e0:	d8800215 	stw	r2,8(sp)
   437e4:	0042afc0 	call	42afc <__umodsi3>
   437e8:	d9c00217 	ldw	r7,8(sp)
   437ec:	1004943a 	slli	r2,r2,16
   437f0:	94bfffcc 	andi	r18,r18,65535
   437f4:	b9d1383a 	mul	r8,r23,r7
   437f8:	90a4b03a 	or	r18,r18,r2
   437fc:	d9800317 	ldw	r6,12(sp)
   43800:	9200062e 	bgeu	r18,r8,4381c <__divdf3+0x3f4>
   43804:	9725883a 	add	r18,r18,fp
   43808:	38bfffc4 	addi	r2,r7,-1
   4380c:	9700d636 	bltu	r18,fp,43b68 <__divdf3+0x740>
   43810:	9200d52e 	bgeu	r18,r8,43b68 <__divdf3+0x740>
   43814:	39ffff84 	addi	r7,r7,-2
   43818:	9725883a 	add	r18,r18,fp
   4381c:	3004943a 	slli	r2,r6,16
   43820:	b012d43a 	srli	r9,r22,16
   43824:	b1bfffcc 	andi	r6,r22,65535
   43828:	11e2b03a 	or	r17,r2,r7
   4382c:	8806d43a 	srli	r3,r17,16
   43830:	893fffcc 	andi	r4,r17,65535
   43834:	218b383a 	mul	r5,r4,r6
   43838:	30c5383a 	mul	r2,r6,r3
   4383c:	2249383a 	mul	r4,r4,r9
   43840:	280ed43a 	srli	r7,r5,16
   43844:	9225c83a 	sub	r18,r18,r8
   43848:	2089883a 	add	r4,r4,r2
   4384c:	3909883a 	add	r4,r7,r4
   43850:	1a47383a 	mul	r3,r3,r9
   43854:	2080022e 	bgeu	r4,r2,43860 <__divdf3+0x438>
   43858:	00800074 	movhi	r2,1
   4385c:	1887883a 	add	r3,r3,r2
   43860:	2004d43a 	srli	r2,r4,16
   43864:	2008943a 	slli	r4,r4,16
   43868:	297fffcc 	andi	r5,r5,65535
   4386c:	10c7883a 	add	r3,r2,r3
   43870:	2149883a 	add	r4,r4,r5
   43874:	90c0a536 	bltu	r18,r3,43b0c <__divdf3+0x6e4>
   43878:	90c0bf26 	beq	r18,r3,43b78 <__divdf3+0x750>
   4387c:	90c7c83a 	sub	r3,r18,r3
   43880:	810fc83a 	sub	r7,r16,r4
   43884:	81e5803a 	cmpltu	r18,r16,r7
   43888:	1ca5c83a 	sub	r18,r3,r18
   4388c:	e480c126 	beq	fp,r18,43b94 <__divdf3+0x76c>
   43890:	a00b883a 	mov	r5,r20
   43894:	9009883a 	mov	r4,r18
   43898:	d9800315 	stw	r6,12(sp)
   4389c:	d9c00215 	stw	r7,8(sp)
   438a0:	da400115 	stw	r9,4(sp)
   438a4:	0042a980 	call	42a98 <__udivsi3>
   438a8:	a00b883a 	mov	r5,r20
   438ac:	9009883a 	mov	r4,r18
   438b0:	d8800015 	stw	r2,0(sp)
   438b4:	0042afc0 	call	42afc <__umodsi3>
   438b8:	d9c00217 	ldw	r7,8(sp)
   438bc:	da000017 	ldw	r8,0(sp)
   438c0:	1006943a 	slli	r3,r2,16
   438c4:	3804d43a 	srli	r2,r7,16
   438c8:	ba21383a 	mul	r16,r23,r8
   438cc:	d9800317 	ldw	r6,12(sp)
   438d0:	10c4b03a 	or	r2,r2,r3
   438d4:	da400117 	ldw	r9,4(sp)
   438d8:	1400062e 	bgeu	r2,r16,438f4 <__divdf3+0x4cc>
   438dc:	1705883a 	add	r2,r2,fp
   438e0:	40ffffc4 	addi	r3,r8,-1
   438e4:	1700ad36 	bltu	r2,fp,43b9c <__divdf3+0x774>
   438e8:	1400ac2e 	bgeu	r2,r16,43b9c <__divdf3+0x774>
   438ec:	423fff84 	addi	r8,r8,-2
   438f0:	1705883a 	add	r2,r2,fp
   438f4:	1421c83a 	sub	r16,r2,r16
   438f8:	a00b883a 	mov	r5,r20
   438fc:	8009883a 	mov	r4,r16
   43900:	d9800315 	stw	r6,12(sp)
   43904:	d9c00215 	stw	r7,8(sp)
   43908:	da000015 	stw	r8,0(sp)
   4390c:	da400115 	stw	r9,4(sp)
   43910:	0042a980 	call	42a98 <__udivsi3>
   43914:	8009883a 	mov	r4,r16
   43918:	a00b883a 	mov	r5,r20
   4391c:	1025883a 	mov	r18,r2
   43920:	0042afc0 	call	42afc <__umodsi3>
   43924:	d9c00217 	ldw	r7,8(sp)
   43928:	1004943a 	slli	r2,r2,16
   4392c:	bcaf383a 	mul	r23,r23,r18
   43930:	393fffcc 	andi	r4,r7,65535
   43934:	2088b03a 	or	r4,r4,r2
   43938:	d9800317 	ldw	r6,12(sp)
   4393c:	da000017 	ldw	r8,0(sp)
   43940:	da400117 	ldw	r9,4(sp)
   43944:	25c0062e 	bgeu	r4,r23,43960 <__divdf3+0x538>
   43948:	2709883a 	add	r4,r4,fp
   4394c:	90bfffc4 	addi	r2,r18,-1
   43950:	27009436 	bltu	r4,fp,43ba4 <__divdf3+0x77c>
   43954:	25c0932e 	bgeu	r4,r23,43ba4 <__divdf3+0x77c>
   43958:	94bfff84 	addi	r18,r18,-2
   4395c:	2709883a 	add	r4,r4,fp
   43960:	4004943a 	slli	r2,r8,16
   43964:	25efc83a 	sub	r23,r4,r23
   43968:	1490b03a 	or	r8,r2,r18
   4396c:	4008d43a 	srli	r4,r8,16
   43970:	40ffffcc 	andi	r3,r8,65535
   43974:	30c5383a 	mul	r2,r6,r3
   43978:	1a47383a 	mul	r3,r3,r9
   4397c:	310d383a 	mul	r6,r6,r4
   43980:	100ad43a 	srli	r5,r2,16
   43984:	4913383a 	mul	r9,r9,r4
   43988:	1987883a 	add	r3,r3,r6
   4398c:	28c7883a 	add	r3,r5,r3
   43990:	1980022e 	bgeu	r3,r6,4399c <__divdf3+0x574>
   43994:	01000074 	movhi	r4,1
   43998:	4913883a 	add	r9,r9,r4
   4399c:	1808d43a 	srli	r4,r3,16
   439a0:	1806943a 	slli	r3,r3,16
   439a4:	10bfffcc 	andi	r2,r2,65535
   439a8:	2253883a 	add	r9,r4,r9
   439ac:	1887883a 	add	r3,r3,r2
   439b0:	ba403836 	bltu	r23,r9,43a94 <__divdf3+0x66c>
   439b4:	ba403626 	beq	r23,r9,43a90 <__divdf3+0x668>
   439b8:	42000054 	ori	r8,r8,1
   439bc:	a880ffc4 	addi	r2,r21,1023
   439c0:	00bf570e 	bge	zero,r2,43720 <__alt_mem_epcs_flash_controller+0xfe032720>
   439c4:	40c001cc 	andi	r3,r8,7
   439c8:	18000726 	beq	r3,zero,439e8 <__divdf3+0x5c0>
   439cc:	40c003cc 	andi	r3,r8,15
   439d0:	01000104 	movi	r4,4
   439d4:	19000426 	beq	r3,r4,439e8 <__divdf3+0x5c0>
   439d8:	4107883a 	add	r3,r8,r4
   439dc:	1a11803a 	cmpltu	r8,r3,r8
   439e0:	8a23883a 	add	r17,r17,r8
   439e4:	1811883a 	mov	r8,r3
   439e8:	88c0402c 	andhi	r3,r17,256
   439ec:	18000426 	beq	r3,zero,43a00 <__divdf3+0x5d8>
   439f0:	00ffc034 	movhi	r3,65280
   439f4:	18ffffc4 	addi	r3,r3,-1
   439f8:	a8810004 	addi	r2,r21,1024
   439fc:	88e2703a 	and	r17,r17,r3
   43a00:	00c1ff84 	movi	r3,2046
   43a04:	18bee316 	blt	r3,r2,43594 <__alt_mem_epcs_flash_controller+0xfe032594>
   43a08:	8824977a 	slli	r18,r17,29
   43a0c:	4010d0fa 	srli	r8,r8,3
   43a10:	8822927a 	slli	r17,r17,9
   43a14:	1081ffcc 	andi	r2,r2,2047
   43a18:	9224b03a 	or	r18,r18,r8
   43a1c:	880ad33a 	srli	r5,r17,12
   43a20:	98c0004c 	andi	r3,r19,1
   43a24:	003edf06 	br	435a4 <__alt_mem_epcs_flash_controller+0xfe0325a4>
   43a28:	8080022c 	andhi	r2,r16,8
   43a2c:	10001226 	beq	r2,zero,43a78 <__divdf3+0x650>
   43a30:	8880022c 	andhi	r2,r17,8
   43a34:	1000101e 	bne	r2,zero,43a78 <__divdf3+0x650>
   43a38:	00800434 	movhi	r2,16
   43a3c:	89400234 	orhi	r5,r17,8
   43a40:	10bfffc4 	addi	r2,r2,-1
   43a44:	b007883a 	mov	r3,r22
   43a48:	288a703a 	and	r5,r5,r2
   43a4c:	4025883a 	mov	r18,r8
   43a50:	003f3106 	br	43718 <__alt_mem_epcs_flash_controller+0xfe032718>
   43a54:	008000c4 	movi	r2,3
   43a58:	3880a626 	beq	r7,r2,43cf4 <__divdf3+0x8cc>
   43a5c:	00800044 	movi	r2,1
   43a60:	3880521e 	bne	r7,r2,43bac <__divdf3+0x784>
   43a64:	b807883a 	mov	r3,r23
   43a68:	0005883a 	mov	r2,zero
   43a6c:	000b883a 	mov	r5,zero
   43a70:	0025883a 	mov	r18,zero
   43a74:	003ecb06 	br	435a4 <__alt_mem_epcs_flash_controller+0xfe0325a4>
   43a78:	00800434 	movhi	r2,16
   43a7c:	81400234 	orhi	r5,r16,8
   43a80:	10bfffc4 	addi	r2,r2,-1
   43a84:	a007883a 	mov	r3,r20
   43a88:	288a703a 	and	r5,r5,r2
   43a8c:	003f2206 	br	43718 <__alt_mem_epcs_flash_controller+0xfe032718>
   43a90:	183fca26 	beq	r3,zero,439bc <__alt_mem_epcs_flash_controller+0xfe0329bc>
   43a94:	e5ef883a 	add	r23,fp,r23
   43a98:	40bfffc4 	addi	r2,r8,-1
   43a9c:	bf00392e 	bgeu	r23,fp,43b84 <__divdf3+0x75c>
   43aa0:	1011883a 	mov	r8,r2
   43aa4:	ba7fc41e 	bne	r23,r9,439b8 <__alt_mem_epcs_flash_controller+0xfe0329b8>
   43aa8:	b0ffc31e 	bne	r22,r3,439b8 <__alt_mem_epcs_flash_controller+0xfe0329b8>
   43aac:	003fc306 	br	439bc <__alt_mem_epcs_flash_controller+0xfe0329bc>
   43ab0:	143ff604 	addi	r16,r2,-40
   43ab4:	9c20983a 	sll	r16,r19,r16
   43ab8:	0025883a 	mov	r18,zero
   43abc:	003ee206 	br	43648 <__alt_mem_epcs_flash_controller+0xfe032648>
   43ac0:	d9800315 	stw	r6,12(sp)
   43ac4:	d9c00215 	stw	r7,8(sp)
   43ac8:	0044fd00 	call	44fd0 <__clzsi2>
   43acc:	10800804 	addi	r2,r2,32
   43ad0:	d9c00217 	ldw	r7,8(sp)
   43ad4:	d9800317 	ldw	r6,12(sp)
   43ad8:	003ed106 	br	43620 <__alt_mem_epcs_flash_controller+0xfe032620>
   43adc:	147ff604 	addi	r17,r2,-40
   43ae0:	3462983a 	sll	r17,r6,r17
   43ae4:	0011883a 	mov	r8,zero
   43ae8:	003ef506 	br	436c0 <__alt_mem_epcs_flash_controller+0xfe0326c0>
   43aec:	3009883a 	mov	r4,r6
   43af0:	d9800315 	stw	r6,12(sp)
   43af4:	da400115 	stw	r9,4(sp)
   43af8:	0044fd00 	call	44fd0 <__clzsi2>
   43afc:	10800804 	addi	r2,r2,32
   43b00:	da400117 	ldw	r9,4(sp)
   43b04:	d9800317 	ldw	r6,12(sp)
   43b08:	003ee306 	br	43698 <__alt_mem_epcs_flash_controller+0xfe032698>
   43b0c:	85a1883a 	add	r16,r16,r22
   43b10:	8585803a 	cmpltu	r2,r16,r22
   43b14:	1705883a 	add	r2,r2,fp
   43b18:	14a5883a 	add	r18,r2,r18
   43b1c:	88bfffc4 	addi	r2,r17,-1
   43b20:	e4800c2e 	bgeu	fp,r18,43b54 <__divdf3+0x72c>
   43b24:	90c03e36 	bltu	r18,r3,43c20 <__divdf3+0x7f8>
   43b28:	1c806926 	beq	r3,r18,43cd0 <__divdf3+0x8a8>
   43b2c:	90c7c83a 	sub	r3,r18,r3
   43b30:	1023883a 	mov	r17,r2
   43b34:	003f5206 	br	43880 <__alt_mem_epcs_flash_controller+0xfe032880>
   43b38:	923f0436 	bltu	r18,r8,4374c <__alt_mem_epcs_flash_controller+0xfe03274c>
   43b3c:	800897fa 	slli	r4,r16,31
   43b40:	9004d07a 	srli	r2,r18,1
   43b44:	8006d07a 	srli	r3,r16,1
   43b48:	902097fa 	slli	r16,r18,31
   43b4c:	20a4b03a 	or	r18,r4,r2
   43b50:	003f0106 	br	43758 <__alt_mem_epcs_flash_controller+0xfe032758>
   43b54:	e4bff51e 	bne	fp,r18,43b2c <__alt_mem_epcs_flash_controller+0xfe032b2c>
   43b58:	85bff22e 	bgeu	r16,r22,43b24 <__alt_mem_epcs_flash_controller+0xfe032b24>
   43b5c:	e0c7c83a 	sub	r3,fp,r3
   43b60:	1023883a 	mov	r17,r2
   43b64:	003f4606 	br	43880 <__alt_mem_epcs_flash_controller+0xfe032880>
   43b68:	100f883a 	mov	r7,r2
   43b6c:	003f2b06 	br	4381c <__alt_mem_epcs_flash_controller+0xfe03281c>
   43b70:	180d883a 	mov	r6,r3
   43b74:	003f1306 	br	437c4 <__alt_mem_epcs_flash_controller+0xfe0327c4>
   43b78:	813fe436 	bltu	r16,r4,43b0c <__alt_mem_epcs_flash_controller+0xfe032b0c>
   43b7c:	0007883a 	mov	r3,zero
   43b80:	003f3f06 	br	43880 <__alt_mem_epcs_flash_controller+0xfe032880>
   43b84:	ba402c36 	bltu	r23,r9,43c38 <__divdf3+0x810>
   43b88:	4dc05426 	beq	r9,r23,43cdc <__divdf3+0x8b4>
   43b8c:	1011883a 	mov	r8,r2
   43b90:	003f8906 	br	439b8 <__alt_mem_epcs_flash_controller+0xfe0329b8>
   43b94:	023fffc4 	movi	r8,-1
   43b98:	003f8806 	br	439bc <__alt_mem_epcs_flash_controller+0xfe0329bc>
   43b9c:	1811883a 	mov	r8,r3
   43ba0:	003f5406 	br	438f4 <__alt_mem_epcs_flash_controller+0xfe0328f4>
   43ba4:	1025883a 	mov	r18,r2
   43ba8:	003f6d06 	br	43960 <__alt_mem_epcs_flash_controller+0xfe032960>
   43bac:	b827883a 	mov	r19,r23
   43bb0:	003f8206 	br	439bc <__alt_mem_epcs_flash_controller+0xfe0329bc>
   43bb4:	010007c4 	movi	r4,31
   43bb8:	20c02616 	blt	r4,r3,43c54 <__divdf3+0x82c>
   43bbc:	00800804 	movi	r2,32
   43bc0:	10c5c83a 	sub	r2,r2,r3
   43bc4:	888a983a 	sll	r5,r17,r2
   43bc8:	40c8d83a 	srl	r4,r8,r3
   43bcc:	4084983a 	sll	r2,r8,r2
   43bd0:	88e2d83a 	srl	r17,r17,r3
   43bd4:	2906b03a 	or	r3,r5,r4
   43bd8:	1004c03a 	cmpne	r2,r2,zero
   43bdc:	1886b03a 	or	r3,r3,r2
   43be0:	188001cc 	andi	r2,r3,7
   43be4:	10000726 	beq	r2,zero,43c04 <__divdf3+0x7dc>
   43be8:	188003cc 	andi	r2,r3,15
   43bec:	01000104 	movi	r4,4
   43bf0:	11000426 	beq	r2,r4,43c04 <__divdf3+0x7dc>
   43bf4:	1805883a 	mov	r2,r3
   43bf8:	10c00104 	addi	r3,r2,4
   43bfc:	1885803a 	cmpltu	r2,r3,r2
   43c00:	88a3883a 	add	r17,r17,r2
   43c04:	8880202c 	andhi	r2,r17,128
   43c08:	10002726 	beq	r2,zero,43ca8 <__divdf3+0x880>
   43c0c:	98c0004c 	andi	r3,r19,1
   43c10:	00800044 	movi	r2,1
   43c14:	000b883a 	mov	r5,zero
   43c18:	0025883a 	mov	r18,zero
   43c1c:	003e6106 	br	435a4 <__alt_mem_epcs_flash_controller+0xfe0325a4>
   43c20:	85a1883a 	add	r16,r16,r22
   43c24:	8585803a 	cmpltu	r2,r16,r22
   43c28:	1705883a 	add	r2,r2,fp
   43c2c:	14a5883a 	add	r18,r2,r18
   43c30:	8c7fff84 	addi	r17,r17,-2
   43c34:	003f1106 	br	4387c <__alt_mem_epcs_flash_controller+0xfe03287c>
   43c38:	b589883a 	add	r4,r22,r22
   43c3c:	25ad803a 	cmpltu	r22,r4,r22
   43c40:	b739883a 	add	fp,r22,fp
   43c44:	40bfff84 	addi	r2,r8,-2
   43c48:	bf2f883a 	add	r23,r23,fp
   43c4c:	202d883a 	mov	r22,r4
   43c50:	003f9306 	br	43aa0 <__alt_mem_epcs_flash_controller+0xfe032aa0>
   43c54:	013ff844 	movi	r4,-31
   43c58:	2085c83a 	sub	r2,r4,r2
   43c5c:	8888d83a 	srl	r4,r17,r2
   43c60:	00800804 	movi	r2,32
   43c64:	18802126 	beq	r3,r2,43cec <__divdf3+0x8c4>
   43c68:	00801004 	movi	r2,64
   43c6c:	10c5c83a 	sub	r2,r2,r3
   43c70:	8884983a 	sll	r2,r17,r2
   43c74:	1204b03a 	or	r2,r2,r8
   43c78:	1004c03a 	cmpne	r2,r2,zero
   43c7c:	2084b03a 	or	r2,r4,r2
   43c80:	144001cc 	andi	r17,r2,7
   43c84:	88000d1e 	bne	r17,zero,43cbc <__divdf3+0x894>
   43c88:	000b883a 	mov	r5,zero
   43c8c:	1024d0fa 	srli	r18,r2,3
   43c90:	98c0004c 	andi	r3,r19,1
   43c94:	0005883a 	mov	r2,zero
   43c98:	9464b03a 	or	r18,r18,r17
   43c9c:	003e4106 	br	435a4 <__alt_mem_epcs_flash_controller+0xfe0325a4>
   43ca0:	1007883a 	mov	r3,r2
   43ca4:	0023883a 	mov	r17,zero
   43ca8:	880a927a 	slli	r5,r17,9
   43cac:	1805883a 	mov	r2,r3
   43cb0:	8822977a 	slli	r17,r17,29
   43cb4:	280ad33a 	srli	r5,r5,12
   43cb8:	003ff406 	br	43c8c <__alt_mem_epcs_flash_controller+0xfe032c8c>
   43cbc:	10c003cc 	andi	r3,r2,15
   43cc0:	01000104 	movi	r4,4
   43cc4:	193ff626 	beq	r3,r4,43ca0 <__alt_mem_epcs_flash_controller+0xfe032ca0>
   43cc8:	0023883a 	mov	r17,zero
   43ccc:	003fca06 	br	43bf8 <__alt_mem_epcs_flash_controller+0xfe032bf8>
   43cd0:	813fd336 	bltu	r16,r4,43c20 <__alt_mem_epcs_flash_controller+0xfe032c20>
   43cd4:	1023883a 	mov	r17,r2
   43cd8:	003fa806 	br	43b7c <__alt_mem_epcs_flash_controller+0xfe032b7c>
   43cdc:	b0ffd636 	bltu	r22,r3,43c38 <__alt_mem_epcs_flash_controller+0xfe032c38>
   43ce0:	1011883a 	mov	r8,r2
   43ce4:	b0ff341e 	bne	r22,r3,439b8 <__alt_mem_epcs_flash_controller+0xfe0329b8>
   43ce8:	003f3406 	br	439bc <__alt_mem_epcs_flash_controller+0xfe0329bc>
   43cec:	0005883a 	mov	r2,zero
   43cf0:	003fe006 	br	43c74 <__alt_mem_epcs_flash_controller+0xfe032c74>
   43cf4:	00800434 	movhi	r2,16
   43cf8:	89400234 	orhi	r5,r17,8
   43cfc:	10bfffc4 	addi	r2,r2,-1
   43d00:	b807883a 	mov	r3,r23
   43d04:	288a703a 	and	r5,r5,r2
   43d08:	4025883a 	mov	r18,r8
   43d0c:	003e8206 	br	43718 <__alt_mem_epcs_flash_controller+0xfe032718>

00043d10 <__gedf2>:
   43d10:	2804d53a 	srli	r2,r5,20
   43d14:	3806d53a 	srli	r3,r7,20
   43d18:	02000434 	movhi	r8,16
   43d1c:	423fffc4 	addi	r8,r8,-1
   43d20:	1081ffcc 	andi	r2,r2,2047
   43d24:	0241ffc4 	movi	r9,2047
   43d28:	2a14703a 	and	r10,r5,r8
   43d2c:	18c1ffcc 	andi	r3,r3,2047
   43d30:	3a10703a 	and	r8,r7,r8
   43d34:	280ad7fa 	srli	r5,r5,31
   43d38:	380ed7fa 	srli	r7,r7,31
   43d3c:	12401d26 	beq	r2,r9,43db4 <__gedf2+0xa4>
   43d40:	0241ffc4 	movi	r9,2047
   43d44:	1a401226 	beq	r3,r9,43d90 <__gedf2+0x80>
   43d48:	1000081e 	bne	r2,zero,43d6c <__gedf2+0x5c>
   43d4c:	2296b03a 	or	r11,r4,r10
   43d50:	5813003a 	cmpeq	r9,r11,zero
   43d54:	1800091e 	bne	r3,zero,43d7c <__gedf2+0x6c>
   43d58:	3218b03a 	or	r12,r6,r8
   43d5c:	6000071e 	bne	r12,zero,43d7c <__gedf2+0x6c>
   43d60:	0005883a 	mov	r2,zero
   43d64:	5800101e 	bne	r11,zero,43da8 <__gedf2+0x98>
   43d68:	f800283a 	ret
   43d6c:	18000c1e 	bne	r3,zero,43da0 <__gedf2+0x90>
   43d70:	3212b03a 	or	r9,r6,r8
   43d74:	48000c26 	beq	r9,zero,43da8 <__gedf2+0x98>
   43d78:	0013883a 	mov	r9,zero
   43d7c:	39c03fcc 	andi	r7,r7,255
   43d80:	48000826 	beq	r9,zero,43da4 <__gedf2+0x94>
   43d84:	38000926 	beq	r7,zero,43dac <__gedf2+0x9c>
   43d88:	00800044 	movi	r2,1
   43d8c:	f800283a 	ret
   43d90:	3212b03a 	or	r9,r6,r8
   43d94:	483fec26 	beq	r9,zero,43d48 <__alt_mem_epcs_flash_controller+0xfe032d48>
   43d98:	00bfff84 	movi	r2,-2
   43d9c:	f800283a 	ret
   43da0:	39c03fcc 	andi	r7,r7,255
   43da4:	29c00626 	beq	r5,r7,43dc0 <__gedf2+0xb0>
   43da8:	283ff726 	beq	r5,zero,43d88 <__alt_mem_epcs_flash_controller+0xfe032d88>
   43dac:	00bfffc4 	movi	r2,-1
   43db0:	f800283a 	ret
   43db4:	2292b03a 	or	r9,r4,r10
   43db8:	483fe126 	beq	r9,zero,43d40 <__alt_mem_epcs_flash_controller+0xfe032d40>
   43dbc:	003ff606 	br	43d98 <__alt_mem_epcs_flash_controller+0xfe032d98>
   43dc0:	18bff916 	blt	r3,r2,43da8 <__alt_mem_epcs_flash_controller+0xfe032da8>
   43dc4:	10c00316 	blt	r2,r3,43dd4 <__gedf2+0xc4>
   43dc8:	42bff736 	bltu	r8,r10,43da8 <__alt_mem_epcs_flash_controller+0xfe032da8>
   43dcc:	52000326 	beq	r10,r8,43ddc <__gedf2+0xcc>
   43dd0:	5200042e 	bgeu	r10,r8,43de4 <__gedf2+0xd4>
   43dd4:	283fec1e 	bne	r5,zero,43d88 <__alt_mem_epcs_flash_controller+0xfe032d88>
   43dd8:	003ff406 	br	43dac <__alt_mem_epcs_flash_controller+0xfe032dac>
   43ddc:	313ff236 	bltu	r6,r4,43da8 <__alt_mem_epcs_flash_controller+0xfe032da8>
   43de0:	21bffc36 	bltu	r4,r6,43dd4 <__alt_mem_epcs_flash_controller+0xfe032dd4>
   43de4:	0005883a 	mov	r2,zero
   43de8:	f800283a 	ret

00043dec <__ledf2>:
   43dec:	2804d53a 	srli	r2,r5,20
   43df0:	3810d53a 	srli	r8,r7,20
   43df4:	00c00434 	movhi	r3,16
   43df8:	18ffffc4 	addi	r3,r3,-1
   43dfc:	1081ffcc 	andi	r2,r2,2047
   43e00:	0241ffc4 	movi	r9,2047
   43e04:	28d4703a 	and	r10,r5,r3
   43e08:	4201ffcc 	andi	r8,r8,2047
   43e0c:	38c6703a 	and	r3,r7,r3
   43e10:	280ad7fa 	srli	r5,r5,31
   43e14:	380ed7fa 	srli	r7,r7,31
   43e18:	12401f26 	beq	r2,r9,43e98 <__ledf2+0xac>
   43e1c:	0241ffc4 	movi	r9,2047
   43e20:	42401426 	beq	r8,r9,43e74 <__ledf2+0x88>
   43e24:	1000091e 	bne	r2,zero,43e4c <__ledf2+0x60>
   43e28:	2296b03a 	or	r11,r4,r10
   43e2c:	5813003a 	cmpeq	r9,r11,zero
   43e30:	29403fcc 	andi	r5,r5,255
   43e34:	40000a1e 	bne	r8,zero,43e60 <__ledf2+0x74>
   43e38:	30d8b03a 	or	r12,r6,r3
   43e3c:	6000081e 	bne	r12,zero,43e60 <__ledf2+0x74>
   43e40:	0005883a 	mov	r2,zero
   43e44:	5800111e 	bne	r11,zero,43e8c <__ledf2+0xa0>
   43e48:	f800283a 	ret
   43e4c:	29403fcc 	andi	r5,r5,255
   43e50:	40000c1e 	bne	r8,zero,43e84 <__ledf2+0x98>
   43e54:	30d2b03a 	or	r9,r6,r3
   43e58:	48000c26 	beq	r9,zero,43e8c <__ledf2+0xa0>
   43e5c:	0013883a 	mov	r9,zero
   43e60:	39c03fcc 	andi	r7,r7,255
   43e64:	48000826 	beq	r9,zero,43e88 <__ledf2+0x9c>
   43e68:	38001126 	beq	r7,zero,43eb0 <__ledf2+0xc4>
   43e6c:	00800044 	movi	r2,1
   43e70:	f800283a 	ret
   43e74:	30d2b03a 	or	r9,r6,r3
   43e78:	483fea26 	beq	r9,zero,43e24 <__alt_mem_epcs_flash_controller+0xfe032e24>
   43e7c:	00800084 	movi	r2,2
   43e80:	f800283a 	ret
   43e84:	39c03fcc 	andi	r7,r7,255
   43e88:	39400726 	beq	r7,r5,43ea8 <__ledf2+0xbc>
   43e8c:	2800081e 	bne	r5,zero,43eb0 <__ledf2+0xc4>
   43e90:	00800044 	movi	r2,1
   43e94:	f800283a 	ret
   43e98:	2292b03a 	or	r9,r4,r10
   43e9c:	483fdf26 	beq	r9,zero,43e1c <__alt_mem_epcs_flash_controller+0xfe032e1c>
   43ea0:	00800084 	movi	r2,2
   43ea4:	f800283a 	ret
   43ea8:	4080030e 	bge	r8,r2,43eb8 <__ledf2+0xcc>
   43eac:	383fef26 	beq	r7,zero,43e6c <__alt_mem_epcs_flash_controller+0xfe032e6c>
   43eb0:	00bfffc4 	movi	r2,-1
   43eb4:	f800283a 	ret
   43eb8:	123feb16 	blt	r2,r8,43e68 <__alt_mem_epcs_flash_controller+0xfe032e68>
   43ebc:	1abff336 	bltu	r3,r10,43e8c <__alt_mem_epcs_flash_controller+0xfe032e8c>
   43ec0:	50c00326 	beq	r10,r3,43ed0 <__ledf2+0xe4>
   43ec4:	50c0042e 	bgeu	r10,r3,43ed8 <__ledf2+0xec>
   43ec8:	283fe81e 	bne	r5,zero,43e6c <__alt_mem_epcs_flash_controller+0xfe032e6c>
   43ecc:	003ff806 	br	43eb0 <__alt_mem_epcs_flash_controller+0xfe032eb0>
   43ed0:	313fee36 	bltu	r6,r4,43e8c <__alt_mem_epcs_flash_controller+0xfe032e8c>
   43ed4:	21bffc36 	bltu	r4,r6,43ec8 <__alt_mem_epcs_flash_controller+0xfe032ec8>
   43ed8:	0005883a 	mov	r2,zero
   43edc:	f800283a 	ret

00043ee0 <__muldf3>:
   43ee0:	defff304 	addi	sp,sp,-52
   43ee4:	2804d53a 	srli	r2,r5,20
   43ee8:	dd800915 	stw	r22,36(sp)
   43eec:	282cd7fa 	srli	r22,r5,31
   43ef0:	dc000315 	stw	r16,12(sp)
   43ef4:	04000434 	movhi	r16,16
   43ef8:	dd400815 	stw	r21,32(sp)
   43efc:	dc800515 	stw	r18,20(sp)
   43f00:	843fffc4 	addi	r16,r16,-1
   43f04:	dfc00c15 	stw	ra,48(sp)
   43f08:	df000b15 	stw	fp,44(sp)
   43f0c:	ddc00a15 	stw	r23,40(sp)
   43f10:	dd000715 	stw	r20,28(sp)
   43f14:	dcc00615 	stw	r19,24(sp)
   43f18:	dc400415 	stw	r17,16(sp)
   43f1c:	1481ffcc 	andi	r18,r2,2047
   43f20:	2c20703a 	and	r16,r5,r16
   43f24:	b02b883a 	mov	r21,r22
   43f28:	b2403fcc 	andi	r9,r22,255
   43f2c:	90006026 	beq	r18,zero,440b0 <__muldf3+0x1d0>
   43f30:	0081ffc4 	movi	r2,2047
   43f34:	2029883a 	mov	r20,r4
   43f38:	90803626 	beq	r18,r2,44014 <__muldf3+0x134>
   43f3c:	80800434 	orhi	r2,r16,16
   43f40:	100490fa 	slli	r2,r2,3
   43f44:	2020d77a 	srli	r16,r4,29
   43f48:	202890fa 	slli	r20,r4,3
   43f4c:	94bf0044 	addi	r18,r18,-1023
   43f50:	80a0b03a 	or	r16,r16,r2
   43f54:	0027883a 	mov	r19,zero
   43f58:	0039883a 	mov	fp,zero
   43f5c:	3804d53a 	srli	r2,r7,20
   43f60:	382ed7fa 	srli	r23,r7,31
   43f64:	04400434 	movhi	r17,16
   43f68:	8c7fffc4 	addi	r17,r17,-1
   43f6c:	1081ffcc 	andi	r2,r2,2047
   43f70:	3011883a 	mov	r8,r6
   43f74:	3c62703a 	and	r17,r7,r17
   43f78:	ba803fcc 	andi	r10,r23,255
   43f7c:	10006d26 	beq	r2,zero,44134 <__muldf3+0x254>
   43f80:	00c1ffc4 	movi	r3,2047
   43f84:	10c06526 	beq	r2,r3,4411c <__muldf3+0x23c>
   43f88:	88c00434 	orhi	r3,r17,16
   43f8c:	180690fa 	slli	r3,r3,3
   43f90:	3022d77a 	srli	r17,r6,29
   43f94:	301090fa 	slli	r8,r6,3
   43f98:	10bf0044 	addi	r2,r2,-1023
   43f9c:	88e2b03a 	or	r17,r17,r3
   43fa0:	000b883a 	mov	r5,zero
   43fa4:	9085883a 	add	r2,r18,r2
   43fa8:	2cc8b03a 	or	r4,r5,r19
   43fac:	00c003c4 	movi	r3,15
   43fb0:	bdacf03a 	xor	r22,r23,r22
   43fb4:	12c00044 	addi	r11,r2,1
   43fb8:	19009936 	bltu	r3,r4,44220 <__muldf3+0x340>
   43fbc:	200890ba 	slli	r4,r4,2
   43fc0:	00c00134 	movhi	r3,4
   43fc4:	18cff504 	addi	r3,r3,16340
   43fc8:	20c9883a 	add	r4,r4,r3
   43fcc:	20c00017 	ldw	r3,0(r4)
   43fd0:	1800683a 	jmp	r3
   43fd4:	00044220 	cmpeqi	zero,zero,4360
   43fd8:	00044034 	movhi	zero,4352
   43fdc:	00044034 	movhi	zero,4352
   43fe0:	00044030 	cmpltui	zero,zero,4352
   43fe4:	000441fc 	xorhi	zero,zero,4359
   43fe8:	000441fc 	xorhi	zero,zero,4359
   43fec:	000441e4 	muli	zero,zero,4359
   43ff0:	00044030 	cmpltui	zero,zero,4352
   43ff4:	000441fc 	xorhi	zero,zero,4359
   43ff8:	000441e4 	muli	zero,zero,4359
   43ffc:	000441fc 	xorhi	zero,zero,4359
   44000:	00044030 	cmpltui	zero,zero,4352
   44004:	0004420c 	andi	zero,zero,4360
   44008:	0004420c 	andi	zero,zero,4360
   4400c:	0004420c 	andi	zero,zero,4360
   44010:	00044428 	cmpgeui	zero,zero,4368
   44014:	2404b03a 	or	r2,r4,r16
   44018:	10006f1e 	bne	r2,zero,441d8 <__muldf3+0x2f8>
   4401c:	04c00204 	movi	r19,8
   44020:	0021883a 	mov	r16,zero
   44024:	0029883a 	mov	r20,zero
   44028:	07000084 	movi	fp,2
   4402c:	003fcb06 	br	43f5c <__alt_mem_epcs_flash_controller+0xfe032f5c>
   44030:	502d883a 	mov	r22,r10
   44034:	00800084 	movi	r2,2
   44038:	28805726 	beq	r5,r2,44198 <__muldf3+0x2b8>
   4403c:	008000c4 	movi	r2,3
   44040:	28816626 	beq	r5,r2,445dc <__muldf3+0x6fc>
   44044:	00800044 	movi	r2,1
   44048:	2881411e 	bne	r5,r2,44550 <__muldf3+0x670>
   4404c:	b02b883a 	mov	r21,r22
   44050:	0005883a 	mov	r2,zero
   44054:	000b883a 	mov	r5,zero
   44058:	0029883a 	mov	r20,zero
   4405c:	1004953a 	slli	r2,r2,20
   44060:	a8c03fcc 	andi	r3,r21,255
   44064:	04400434 	movhi	r17,16
   44068:	8c7fffc4 	addi	r17,r17,-1
   4406c:	180697fa 	slli	r3,r3,31
   44070:	2c4a703a 	and	r5,r5,r17
   44074:	288ab03a 	or	r5,r5,r2
   44078:	28c6b03a 	or	r3,r5,r3
   4407c:	a005883a 	mov	r2,r20
   44080:	dfc00c17 	ldw	ra,48(sp)
   44084:	df000b17 	ldw	fp,44(sp)
   44088:	ddc00a17 	ldw	r23,40(sp)
   4408c:	dd800917 	ldw	r22,36(sp)
   44090:	dd400817 	ldw	r21,32(sp)
   44094:	dd000717 	ldw	r20,28(sp)
   44098:	dcc00617 	ldw	r19,24(sp)
   4409c:	dc800517 	ldw	r18,20(sp)
   440a0:	dc400417 	ldw	r17,16(sp)
   440a4:	dc000317 	ldw	r16,12(sp)
   440a8:	dec00d04 	addi	sp,sp,52
   440ac:	f800283a 	ret
   440b0:	2404b03a 	or	r2,r4,r16
   440b4:	2027883a 	mov	r19,r4
   440b8:	10004226 	beq	r2,zero,441c4 <__muldf3+0x2e4>
   440bc:	8000fc26 	beq	r16,zero,444b0 <__muldf3+0x5d0>
   440c0:	8009883a 	mov	r4,r16
   440c4:	d9800215 	stw	r6,8(sp)
   440c8:	d9c00015 	stw	r7,0(sp)
   440cc:	da400115 	stw	r9,4(sp)
   440d0:	0044fd00 	call	44fd0 <__clzsi2>
   440d4:	d9800217 	ldw	r6,8(sp)
   440d8:	d9c00017 	ldw	r7,0(sp)
   440dc:	da400117 	ldw	r9,4(sp)
   440e0:	113ffd44 	addi	r4,r2,-11
   440e4:	00c00704 	movi	r3,28
   440e8:	1900ed16 	blt	r3,r4,444a0 <__muldf3+0x5c0>
   440ec:	00c00744 	movi	r3,29
   440f0:	147ffe04 	addi	r17,r2,-8
   440f4:	1907c83a 	sub	r3,r3,r4
   440f8:	8460983a 	sll	r16,r16,r17
   440fc:	98c6d83a 	srl	r3,r19,r3
   44100:	9c68983a 	sll	r20,r19,r17
   44104:	1c20b03a 	or	r16,r3,r16
   44108:	1080fcc4 	addi	r2,r2,1011
   4410c:	00a5c83a 	sub	r18,zero,r2
   44110:	0027883a 	mov	r19,zero
   44114:	0039883a 	mov	fp,zero
   44118:	003f9006 	br	43f5c <__alt_mem_epcs_flash_controller+0xfe032f5c>
   4411c:	3446b03a 	or	r3,r6,r17
   44120:	1800261e 	bne	r3,zero,441bc <__muldf3+0x2dc>
   44124:	0023883a 	mov	r17,zero
   44128:	0011883a 	mov	r8,zero
   4412c:	01400084 	movi	r5,2
   44130:	003f9c06 	br	43fa4 <__alt_mem_epcs_flash_controller+0xfe032fa4>
   44134:	3446b03a 	or	r3,r6,r17
   44138:	18001c26 	beq	r3,zero,441ac <__muldf3+0x2cc>
   4413c:	8800ce26 	beq	r17,zero,44478 <__muldf3+0x598>
   44140:	8809883a 	mov	r4,r17
   44144:	d9800215 	stw	r6,8(sp)
   44148:	da400115 	stw	r9,4(sp)
   4414c:	da800015 	stw	r10,0(sp)
   44150:	0044fd00 	call	44fd0 <__clzsi2>
   44154:	d9800217 	ldw	r6,8(sp)
   44158:	da400117 	ldw	r9,4(sp)
   4415c:	da800017 	ldw	r10,0(sp)
   44160:	113ffd44 	addi	r4,r2,-11
   44164:	00c00704 	movi	r3,28
   44168:	1900bf16 	blt	r3,r4,44468 <__muldf3+0x588>
   4416c:	00c00744 	movi	r3,29
   44170:	123ffe04 	addi	r8,r2,-8
   44174:	1907c83a 	sub	r3,r3,r4
   44178:	8a22983a 	sll	r17,r17,r8
   4417c:	30c6d83a 	srl	r3,r6,r3
   44180:	3210983a 	sll	r8,r6,r8
   44184:	1c62b03a 	or	r17,r3,r17
   44188:	1080fcc4 	addi	r2,r2,1011
   4418c:	0085c83a 	sub	r2,zero,r2
   44190:	000b883a 	mov	r5,zero
   44194:	003f8306 	br	43fa4 <__alt_mem_epcs_flash_controller+0xfe032fa4>
   44198:	b02b883a 	mov	r21,r22
   4419c:	0081ffc4 	movi	r2,2047
   441a0:	000b883a 	mov	r5,zero
   441a4:	0029883a 	mov	r20,zero
   441a8:	003fac06 	br	4405c <__alt_mem_epcs_flash_controller+0xfe03305c>
   441ac:	0023883a 	mov	r17,zero
   441b0:	0011883a 	mov	r8,zero
   441b4:	01400044 	movi	r5,1
   441b8:	003f7a06 	br	43fa4 <__alt_mem_epcs_flash_controller+0xfe032fa4>
   441bc:	014000c4 	movi	r5,3
   441c0:	003f7806 	br	43fa4 <__alt_mem_epcs_flash_controller+0xfe032fa4>
   441c4:	04c00104 	movi	r19,4
   441c8:	0021883a 	mov	r16,zero
   441cc:	0029883a 	mov	r20,zero
   441d0:	07000044 	movi	fp,1
   441d4:	003f6106 	br	43f5c <__alt_mem_epcs_flash_controller+0xfe032f5c>
   441d8:	04c00304 	movi	r19,12
   441dc:	070000c4 	movi	fp,3
   441e0:	003f5e06 	br	43f5c <__alt_mem_epcs_flash_controller+0xfe032f5c>
   441e4:	01400434 	movhi	r5,16
   441e8:	002b883a 	mov	r21,zero
   441ec:	297fffc4 	addi	r5,r5,-1
   441f0:	053fffc4 	movi	r20,-1
   441f4:	0081ffc4 	movi	r2,2047
   441f8:	003f9806 	br	4405c <__alt_mem_epcs_flash_controller+0xfe03305c>
   441fc:	8023883a 	mov	r17,r16
   44200:	a011883a 	mov	r8,r20
   44204:	e00b883a 	mov	r5,fp
   44208:	003f8a06 	br	44034 <__alt_mem_epcs_flash_controller+0xfe033034>
   4420c:	8023883a 	mov	r17,r16
   44210:	a011883a 	mov	r8,r20
   44214:	482d883a 	mov	r22,r9
   44218:	e00b883a 	mov	r5,fp
   4421c:	003f8506 	br	44034 <__alt_mem_epcs_flash_controller+0xfe033034>
   44220:	a00ad43a 	srli	r5,r20,16
   44224:	401ad43a 	srli	r13,r8,16
   44228:	a53fffcc 	andi	r20,r20,65535
   4422c:	423fffcc 	andi	r8,r8,65535
   44230:	4519383a 	mul	r12,r8,r20
   44234:	4147383a 	mul	r3,r8,r5
   44238:	6d09383a 	mul	r4,r13,r20
   4423c:	600cd43a 	srli	r6,r12,16
   44240:	2b5d383a 	mul	r14,r5,r13
   44244:	20c9883a 	add	r4,r4,r3
   44248:	310d883a 	add	r6,r6,r4
   4424c:	30c0022e 	bgeu	r6,r3,44258 <__muldf3+0x378>
   44250:	00c00074 	movhi	r3,1
   44254:	70dd883a 	add	r14,r14,r3
   44258:	8826d43a 	srli	r19,r17,16
   4425c:	8bffffcc 	andi	r15,r17,65535
   44260:	7d23383a 	mul	r17,r15,r20
   44264:	7949383a 	mul	r4,r15,r5
   44268:	9d29383a 	mul	r20,r19,r20
   4426c:	8814d43a 	srli	r10,r17,16
   44270:	3012943a 	slli	r9,r6,16
   44274:	a129883a 	add	r20,r20,r4
   44278:	633fffcc 	andi	r12,r12,65535
   4427c:	5515883a 	add	r10,r10,r20
   44280:	3006d43a 	srli	r3,r6,16
   44284:	4b13883a 	add	r9,r9,r12
   44288:	2ccb383a 	mul	r5,r5,r19
   4428c:	5100022e 	bgeu	r10,r4,44298 <__muldf3+0x3b8>
   44290:	01000074 	movhi	r4,1
   44294:	290b883a 	add	r5,r5,r4
   44298:	802ad43a 	srli	r21,r16,16
   4429c:	843fffcc 	andi	r16,r16,65535
   442a0:	440d383a 	mul	r6,r8,r16
   442a4:	4565383a 	mul	r18,r8,r21
   442a8:	8349383a 	mul	r4,r16,r13
   442ac:	500e943a 	slli	r7,r10,16
   442b0:	3010d43a 	srli	r8,r6,16
   442b4:	5028d43a 	srli	r20,r10,16
   442b8:	2489883a 	add	r4,r4,r18
   442bc:	8abfffcc 	andi	r10,r17,65535
   442c0:	3a95883a 	add	r10,r7,r10
   442c4:	4119883a 	add	r12,r8,r4
   442c8:	a169883a 	add	r20,r20,r5
   442cc:	1a87883a 	add	r3,r3,r10
   442d0:	6d5b383a 	mul	r13,r13,r21
   442d4:	6480022e 	bgeu	r12,r18,442e0 <__muldf3+0x400>
   442d8:	01000074 	movhi	r4,1
   442dc:	691b883a 	add	r13,r13,r4
   442e0:	7c25383a 	mul	r18,r15,r16
   442e4:	7d4b383a 	mul	r5,r15,r21
   442e8:	84cf383a 	mul	r7,r16,r19
   442ec:	901ed43a 	srli	r15,r18,16
   442f0:	6008d43a 	srli	r4,r12,16
   442f4:	6010943a 	slli	r8,r12,16
   442f8:	394f883a 	add	r7,r7,r5
   442fc:	333fffcc 	andi	r12,r6,65535
   44300:	79df883a 	add	r15,r15,r7
   44304:	235b883a 	add	r13,r4,r13
   44308:	9d63383a 	mul	r17,r19,r21
   4430c:	4309883a 	add	r4,r8,r12
   44310:	7940022e 	bgeu	r15,r5,4431c <__muldf3+0x43c>
   44314:	01400074 	movhi	r5,1
   44318:	8963883a 	add	r17,r17,r5
   4431c:	780a943a 	slli	r5,r15,16
   44320:	91bfffcc 	andi	r6,r18,65535
   44324:	70c7883a 	add	r3,r14,r3
   44328:	298d883a 	add	r6,r5,r6
   4432c:	1a8f803a 	cmpltu	r7,r3,r10
   44330:	350b883a 	add	r5,r6,r20
   44334:	20c7883a 	add	r3,r4,r3
   44338:	3955883a 	add	r10,r7,r5
   4433c:	1909803a 	cmpltu	r4,r3,r4
   44340:	6a91883a 	add	r8,r13,r10
   44344:	780cd43a 	srli	r6,r15,16
   44348:	2219883a 	add	r12,r4,r8
   4434c:	2d0b803a 	cmpltu	r5,r5,r20
   44350:	51cf803a 	cmpltu	r7,r10,r7
   44354:	29ceb03a 	or	r7,r5,r7
   44358:	4351803a 	cmpltu	r8,r8,r13
   4435c:	610b803a 	cmpltu	r5,r12,r4
   44360:	4148b03a 	or	r4,r8,r5
   44364:	398f883a 	add	r7,r7,r6
   44368:	3909883a 	add	r4,r7,r4
   4436c:	1810927a 	slli	r8,r3,9
   44370:	2449883a 	add	r4,r4,r17
   44374:	2008927a 	slli	r4,r4,9
   44378:	6022d5fa 	srli	r17,r12,23
   4437c:	1806d5fa 	srli	r3,r3,23
   44380:	4252b03a 	or	r9,r8,r9
   44384:	600a927a 	slli	r5,r12,9
   44388:	4810c03a 	cmpne	r8,r9,zero
   4438c:	2462b03a 	or	r17,r4,r17
   44390:	40c6b03a 	or	r3,r8,r3
   44394:	8900402c 	andhi	r4,r17,256
   44398:	1950b03a 	or	r8,r3,r5
   4439c:	20000726 	beq	r4,zero,443bc <__muldf3+0x4dc>
   443a0:	4006d07a 	srli	r3,r8,1
   443a4:	880497fa 	slli	r2,r17,31
   443a8:	4200004c 	andi	r8,r8,1
   443ac:	8822d07a 	srli	r17,r17,1
   443b0:	1a10b03a 	or	r8,r3,r8
   443b4:	1210b03a 	or	r8,r2,r8
   443b8:	5805883a 	mov	r2,r11
   443bc:	1140ffc4 	addi	r5,r2,1023
   443c0:	0140440e 	bge	zero,r5,444d4 <__muldf3+0x5f4>
   443c4:	40c001cc 	andi	r3,r8,7
   443c8:	18000726 	beq	r3,zero,443e8 <__muldf3+0x508>
   443cc:	40c003cc 	andi	r3,r8,15
   443d0:	01000104 	movi	r4,4
   443d4:	19000426 	beq	r3,r4,443e8 <__muldf3+0x508>
   443d8:	4107883a 	add	r3,r8,r4
   443dc:	1a11803a 	cmpltu	r8,r3,r8
   443e0:	8a23883a 	add	r17,r17,r8
   443e4:	1811883a 	mov	r8,r3
   443e8:	88c0402c 	andhi	r3,r17,256
   443ec:	18000426 	beq	r3,zero,44400 <__muldf3+0x520>
   443f0:	11410004 	addi	r5,r2,1024
   443f4:	00bfc034 	movhi	r2,65280
   443f8:	10bfffc4 	addi	r2,r2,-1
   443fc:	88a2703a 	and	r17,r17,r2
   44400:	0081ff84 	movi	r2,2046
   44404:	117f6416 	blt	r2,r5,44198 <__alt_mem_epcs_flash_controller+0xfe033198>
   44408:	8828977a 	slli	r20,r17,29
   4440c:	4010d0fa 	srli	r8,r8,3
   44410:	8822927a 	slli	r17,r17,9
   44414:	2881ffcc 	andi	r2,r5,2047
   44418:	a228b03a 	or	r20,r20,r8
   4441c:	880ad33a 	srli	r5,r17,12
   44420:	b02b883a 	mov	r21,r22
   44424:	003f0d06 	br	4405c <__alt_mem_epcs_flash_controller+0xfe03305c>
   44428:	8080022c 	andhi	r2,r16,8
   4442c:	10000926 	beq	r2,zero,44454 <__muldf3+0x574>
   44430:	8880022c 	andhi	r2,r17,8
   44434:	1000071e 	bne	r2,zero,44454 <__muldf3+0x574>
   44438:	00800434 	movhi	r2,16
   4443c:	89400234 	orhi	r5,r17,8
   44440:	10bfffc4 	addi	r2,r2,-1
   44444:	b82b883a 	mov	r21,r23
   44448:	288a703a 	and	r5,r5,r2
   4444c:	4029883a 	mov	r20,r8
   44450:	003f6806 	br	441f4 <__alt_mem_epcs_flash_controller+0xfe0331f4>
   44454:	00800434 	movhi	r2,16
   44458:	81400234 	orhi	r5,r16,8
   4445c:	10bfffc4 	addi	r2,r2,-1
   44460:	288a703a 	and	r5,r5,r2
   44464:	003f6306 	br	441f4 <__alt_mem_epcs_flash_controller+0xfe0331f4>
   44468:	147ff604 	addi	r17,r2,-40
   4446c:	3462983a 	sll	r17,r6,r17
   44470:	0011883a 	mov	r8,zero
   44474:	003f4406 	br	44188 <__alt_mem_epcs_flash_controller+0xfe033188>
   44478:	3009883a 	mov	r4,r6
   4447c:	d9800215 	stw	r6,8(sp)
   44480:	da400115 	stw	r9,4(sp)
   44484:	da800015 	stw	r10,0(sp)
   44488:	0044fd00 	call	44fd0 <__clzsi2>
   4448c:	10800804 	addi	r2,r2,32
   44490:	da800017 	ldw	r10,0(sp)
   44494:	da400117 	ldw	r9,4(sp)
   44498:	d9800217 	ldw	r6,8(sp)
   4449c:	003f3006 	br	44160 <__alt_mem_epcs_flash_controller+0xfe033160>
   444a0:	143ff604 	addi	r16,r2,-40
   444a4:	9c20983a 	sll	r16,r19,r16
   444a8:	0029883a 	mov	r20,zero
   444ac:	003f1606 	br	44108 <__alt_mem_epcs_flash_controller+0xfe033108>
   444b0:	d9800215 	stw	r6,8(sp)
   444b4:	d9c00015 	stw	r7,0(sp)
   444b8:	da400115 	stw	r9,4(sp)
   444bc:	0044fd00 	call	44fd0 <__clzsi2>
   444c0:	10800804 	addi	r2,r2,32
   444c4:	da400117 	ldw	r9,4(sp)
   444c8:	d9c00017 	ldw	r7,0(sp)
   444cc:	d9800217 	ldw	r6,8(sp)
   444d0:	003f0306 	br	440e0 <__alt_mem_epcs_flash_controller+0xfe0330e0>
   444d4:	00c00044 	movi	r3,1
   444d8:	1947c83a 	sub	r3,r3,r5
   444dc:	00800e04 	movi	r2,56
   444e0:	10feda16 	blt	r2,r3,4404c <__alt_mem_epcs_flash_controller+0xfe03304c>
   444e4:	008007c4 	movi	r2,31
   444e8:	10c01b16 	blt	r2,r3,44558 <__muldf3+0x678>
   444ec:	00800804 	movi	r2,32
   444f0:	10c5c83a 	sub	r2,r2,r3
   444f4:	888a983a 	sll	r5,r17,r2
   444f8:	40c8d83a 	srl	r4,r8,r3
   444fc:	4084983a 	sll	r2,r8,r2
   44500:	88e2d83a 	srl	r17,r17,r3
   44504:	2906b03a 	or	r3,r5,r4
   44508:	1004c03a 	cmpne	r2,r2,zero
   4450c:	1886b03a 	or	r3,r3,r2
   44510:	188001cc 	andi	r2,r3,7
   44514:	10000726 	beq	r2,zero,44534 <__muldf3+0x654>
   44518:	188003cc 	andi	r2,r3,15
   4451c:	01000104 	movi	r4,4
   44520:	11000426 	beq	r2,r4,44534 <__muldf3+0x654>
   44524:	1805883a 	mov	r2,r3
   44528:	10c00104 	addi	r3,r2,4
   4452c:	1885803a 	cmpltu	r2,r3,r2
   44530:	88a3883a 	add	r17,r17,r2
   44534:	8880202c 	andhi	r2,r17,128
   44538:	10001c26 	beq	r2,zero,445ac <__muldf3+0x6cc>
   4453c:	b02b883a 	mov	r21,r22
   44540:	00800044 	movi	r2,1
   44544:	000b883a 	mov	r5,zero
   44548:	0029883a 	mov	r20,zero
   4454c:	003ec306 	br	4405c <__alt_mem_epcs_flash_controller+0xfe03305c>
   44550:	5805883a 	mov	r2,r11
   44554:	003f9906 	br	443bc <__alt_mem_epcs_flash_controller+0xfe0333bc>
   44558:	00bff844 	movi	r2,-31
   4455c:	1145c83a 	sub	r2,r2,r5
   44560:	8888d83a 	srl	r4,r17,r2
   44564:	00800804 	movi	r2,32
   44568:	18801a26 	beq	r3,r2,445d4 <__muldf3+0x6f4>
   4456c:	00801004 	movi	r2,64
   44570:	10c5c83a 	sub	r2,r2,r3
   44574:	8884983a 	sll	r2,r17,r2
   44578:	1204b03a 	or	r2,r2,r8
   4457c:	1004c03a 	cmpne	r2,r2,zero
   44580:	2084b03a 	or	r2,r4,r2
   44584:	144001cc 	andi	r17,r2,7
   44588:	88000d1e 	bne	r17,zero,445c0 <__muldf3+0x6e0>
   4458c:	000b883a 	mov	r5,zero
   44590:	1028d0fa 	srli	r20,r2,3
   44594:	b02b883a 	mov	r21,r22
   44598:	0005883a 	mov	r2,zero
   4459c:	a468b03a 	or	r20,r20,r17
   445a0:	003eae06 	br	4405c <__alt_mem_epcs_flash_controller+0xfe03305c>
   445a4:	1007883a 	mov	r3,r2
   445a8:	0023883a 	mov	r17,zero
   445ac:	880a927a 	slli	r5,r17,9
   445b0:	1805883a 	mov	r2,r3
   445b4:	8822977a 	slli	r17,r17,29
   445b8:	280ad33a 	srli	r5,r5,12
   445bc:	003ff406 	br	44590 <__alt_mem_epcs_flash_controller+0xfe033590>
   445c0:	10c003cc 	andi	r3,r2,15
   445c4:	01000104 	movi	r4,4
   445c8:	193ff626 	beq	r3,r4,445a4 <__alt_mem_epcs_flash_controller+0xfe0335a4>
   445cc:	0023883a 	mov	r17,zero
   445d0:	003fd506 	br	44528 <__alt_mem_epcs_flash_controller+0xfe033528>
   445d4:	0005883a 	mov	r2,zero
   445d8:	003fe706 	br	44578 <__alt_mem_epcs_flash_controller+0xfe033578>
   445dc:	00800434 	movhi	r2,16
   445e0:	89400234 	orhi	r5,r17,8
   445e4:	10bfffc4 	addi	r2,r2,-1
   445e8:	b02b883a 	mov	r21,r22
   445ec:	288a703a 	and	r5,r5,r2
   445f0:	4029883a 	mov	r20,r8
   445f4:	003eff06 	br	441f4 <__alt_mem_epcs_flash_controller+0xfe0331f4>

000445f8 <__subdf3>:
   445f8:	02000434 	movhi	r8,16
   445fc:	423fffc4 	addi	r8,r8,-1
   44600:	defffb04 	addi	sp,sp,-20
   44604:	2a14703a 	and	r10,r5,r8
   44608:	3812d53a 	srli	r9,r7,20
   4460c:	3a10703a 	and	r8,r7,r8
   44610:	2006d77a 	srli	r3,r4,29
   44614:	3004d77a 	srli	r2,r6,29
   44618:	dc000015 	stw	r16,0(sp)
   4461c:	501490fa 	slli	r10,r10,3
   44620:	2820d53a 	srli	r16,r5,20
   44624:	401090fa 	slli	r8,r8,3
   44628:	dc800215 	stw	r18,8(sp)
   4462c:	dc400115 	stw	r17,4(sp)
   44630:	dfc00415 	stw	ra,16(sp)
   44634:	202290fa 	slli	r17,r4,3
   44638:	dcc00315 	stw	r19,12(sp)
   4463c:	4a41ffcc 	andi	r9,r9,2047
   44640:	0101ffc4 	movi	r4,2047
   44644:	2824d7fa 	srli	r18,r5,31
   44648:	8401ffcc 	andi	r16,r16,2047
   4464c:	50c6b03a 	or	r3,r10,r3
   44650:	380ed7fa 	srli	r7,r7,31
   44654:	408ab03a 	or	r5,r8,r2
   44658:	300c90fa 	slli	r6,r6,3
   4465c:	49009626 	beq	r9,r4,448b8 <__subdf3+0x2c0>
   44660:	39c0005c 	xori	r7,r7,1
   44664:	8245c83a 	sub	r2,r16,r9
   44668:	3c807426 	beq	r7,r18,4483c <__subdf3+0x244>
   4466c:	0080af0e 	bge	zero,r2,4492c <__subdf3+0x334>
   44670:	48002a1e 	bne	r9,zero,4471c <__subdf3+0x124>
   44674:	2988b03a 	or	r4,r5,r6
   44678:	20009a1e 	bne	r4,zero,448e4 <__subdf3+0x2ec>
   4467c:	888001cc 	andi	r2,r17,7
   44680:	10000726 	beq	r2,zero,446a0 <__subdf3+0xa8>
   44684:	888003cc 	andi	r2,r17,15
   44688:	01000104 	movi	r4,4
   4468c:	11000426 	beq	r2,r4,446a0 <__subdf3+0xa8>
   44690:	890b883a 	add	r5,r17,r4
   44694:	2c63803a 	cmpltu	r17,r5,r17
   44698:	1c47883a 	add	r3,r3,r17
   4469c:	2823883a 	mov	r17,r5
   446a0:	1880202c 	andhi	r2,r3,128
   446a4:	10005926 	beq	r2,zero,4480c <__subdf3+0x214>
   446a8:	84000044 	addi	r16,r16,1
   446ac:	0081ffc4 	movi	r2,2047
   446b0:	8080be26 	beq	r16,r2,449ac <__subdf3+0x3b4>
   446b4:	017fe034 	movhi	r5,65408
   446b8:	297fffc4 	addi	r5,r5,-1
   446bc:	1946703a 	and	r3,r3,r5
   446c0:	1804977a 	slli	r2,r3,29
   446c4:	1806927a 	slli	r3,r3,9
   446c8:	8822d0fa 	srli	r17,r17,3
   446cc:	8401ffcc 	andi	r16,r16,2047
   446d0:	180ad33a 	srli	r5,r3,12
   446d4:	9100004c 	andi	r4,r18,1
   446d8:	1444b03a 	or	r2,r2,r17
   446dc:	80c1ffcc 	andi	r3,r16,2047
   446e0:	1820953a 	slli	r16,r3,20
   446e4:	20c03fcc 	andi	r3,r4,255
   446e8:	180897fa 	slli	r4,r3,31
   446ec:	00c00434 	movhi	r3,16
   446f0:	18ffffc4 	addi	r3,r3,-1
   446f4:	28c6703a 	and	r3,r5,r3
   446f8:	1c06b03a 	or	r3,r3,r16
   446fc:	1906b03a 	or	r3,r3,r4
   44700:	dfc00417 	ldw	ra,16(sp)
   44704:	dcc00317 	ldw	r19,12(sp)
   44708:	dc800217 	ldw	r18,8(sp)
   4470c:	dc400117 	ldw	r17,4(sp)
   44710:	dc000017 	ldw	r16,0(sp)
   44714:	dec00504 	addi	sp,sp,20
   44718:	f800283a 	ret
   4471c:	0101ffc4 	movi	r4,2047
   44720:	813fd626 	beq	r16,r4,4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44724:	29402034 	orhi	r5,r5,128
   44728:	01000e04 	movi	r4,56
   4472c:	2080a316 	blt	r4,r2,449bc <__subdf3+0x3c4>
   44730:	010007c4 	movi	r4,31
   44734:	2080c616 	blt	r4,r2,44a50 <__subdf3+0x458>
   44738:	01000804 	movi	r4,32
   4473c:	2089c83a 	sub	r4,r4,r2
   44740:	2910983a 	sll	r8,r5,r4
   44744:	308ed83a 	srl	r7,r6,r2
   44748:	3108983a 	sll	r4,r6,r4
   4474c:	2884d83a 	srl	r2,r5,r2
   44750:	41ccb03a 	or	r6,r8,r7
   44754:	2008c03a 	cmpne	r4,r4,zero
   44758:	310cb03a 	or	r6,r6,r4
   4475c:	898dc83a 	sub	r6,r17,r6
   44760:	89a3803a 	cmpltu	r17,r17,r6
   44764:	1887c83a 	sub	r3,r3,r2
   44768:	1c47c83a 	sub	r3,r3,r17
   4476c:	3023883a 	mov	r17,r6
   44770:	1880202c 	andhi	r2,r3,128
   44774:	10002326 	beq	r2,zero,44804 <__subdf3+0x20c>
   44778:	04c02034 	movhi	r19,128
   4477c:	9cffffc4 	addi	r19,r19,-1
   44780:	1ce6703a 	and	r19,r3,r19
   44784:	98007a26 	beq	r19,zero,44970 <__subdf3+0x378>
   44788:	9809883a 	mov	r4,r19
   4478c:	0044fd00 	call	44fd0 <__clzsi2>
   44790:	113ffe04 	addi	r4,r2,-8
   44794:	00c007c4 	movi	r3,31
   44798:	19007b16 	blt	r3,r4,44988 <__subdf3+0x390>
   4479c:	00800804 	movi	r2,32
   447a0:	1105c83a 	sub	r2,r2,r4
   447a4:	8884d83a 	srl	r2,r17,r2
   447a8:	9906983a 	sll	r3,r19,r4
   447ac:	8922983a 	sll	r17,r17,r4
   447b0:	10c4b03a 	or	r2,r2,r3
   447b4:	24007816 	blt	r4,r16,44998 <__subdf3+0x3a0>
   447b8:	2421c83a 	sub	r16,r4,r16
   447bc:	80c00044 	addi	r3,r16,1
   447c0:	010007c4 	movi	r4,31
   447c4:	20c09516 	blt	r4,r3,44a1c <__subdf3+0x424>
   447c8:	01400804 	movi	r5,32
   447cc:	28cbc83a 	sub	r5,r5,r3
   447d0:	88c8d83a 	srl	r4,r17,r3
   447d4:	8962983a 	sll	r17,r17,r5
   447d8:	114a983a 	sll	r5,r2,r5
   447dc:	10c6d83a 	srl	r3,r2,r3
   447e0:	8804c03a 	cmpne	r2,r17,zero
   447e4:	290ab03a 	or	r5,r5,r4
   447e8:	28a2b03a 	or	r17,r5,r2
   447ec:	0021883a 	mov	r16,zero
   447f0:	003fa206 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   447f4:	2090b03a 	or	r8,r4,r2
   447f8:	40018e26 	beq	r8,zero,44e34 <__subdf3+0x83c>
   447fc:	1007883a 	mov	r3,r2
   44800:	2023883a 	mov	r17,r4
   44804:	888001cc 	andi	r2,r17,7
   44808:	103f9e1e 	bne	r2,zero,44684 <__alt_mem_epcs_flash_controller+0xfe033684>
   4480c:	1804977a 	slli	r2,r3,29
   44810:	8822d0fa 	srli	r17,r17,3
   44814:	1810d0fa 	srli	r8,r3,3
   44818:	9100004c 	andi	r4,r18,1
   4481c:	1444b03a 	or	r2,r2,r17
   44820:	00c1ffc4 	movi	r3,2047
   44824:	80c02826 	beq	r16,r3,448c8 <__subdf3+0x2d0>
   44828:	01400434 	movhi	r5,16
   4482c:	297fffc4 	addi	r5,r5,-1
   44830:	80e0703a 	and	r16,r16,r3
   44834:	414a703a 	and	r5,r8,r5
   44838:	003fa806 	br	446dc <__alt_mem_epcs_flash_controller+0xfe0336dc>
   4483c:	0080630e 	bge	zero,r2,449cc <__subdf3+0x3d4>
   44840:	48003026 	beq	r9,zero,44904 <__subdf3+0x30c>
   44844:	0101ffc4 	movi	r4,2047
   44848:	813f8c26 	beq	r16,r4,4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   4484c:	29402034 	orhi	r5,r5,128
   44850:	01000e04 	movi	r4,56
   44854:	2080a90e 	bge	r4,r2,44afc <__subdf3+0x504>
   44858:	298cb03a 	or	r6,r5,r6
   4485c:	3012c03a 	cmpne	r9,r6,zero
   44860:	0005883a 	mov	r2,zero
   44864:	4c53883a 	add	r9,r9,r17
   44868:	4c63803a 	cmpltu	r17,r9,r17
   4486c:	10c7883a 	add	r3,r2,r3
   44870:	88c7883a 	add	r3,r17,r3
   44874:	4823883a 	mov	r17,r9
   44878:	1880202c 	andhi	r2,r3,128
   4487c:	1000d026 	beq	r2,zero,44bc0 <__subdf3+0x5c8>
   44880:	84000044 	addi	r16,r16,1
   44884:	0081ffc4 	movi	r2,2047
   44888:	8080fe26 	beq	r16,r2,44c84 <__subdf3+0x68c>
   4488c:	00bfe034 	movhi	r2,65408
   44890:	10bfffc4 	addi	r2,r2,-1
   44894:	1886703a 	and	r3,r3,r2
   44898:	880ad07a 	srli	r5,r17,1
   4489c:	180497fa 	slli	r2,r3,31
   448a0:	8900004c 	andi	r4,r17,1
   448a4:	2922b03a 	or	r17,r5,r4
   448a8:	1806d07a 	srli	r3,r3,1
   448ac:	1462b03a 	or	r17,r2,r17
   448b0:	3825883a 	mov	r18,r7
   448b4:	003f7106 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   448b8:	2984b03a 	or	r2,r5,r6
   448bc:	103f6826 	beq	r2,zero,44660 <__alt_mem_epcs_flash_controller+0xfe033660>
   448c0:	39c03fcc 	andi	r7,r7,255
   448c4:	003f6706 	br	44664 <__alt_mem_epcs_flash_controller+0xfe033664>
   448c8:	4086b03a 	or	r3,r8,r2
   448cc:	18015226 	beq	r3,zero,44e18 <__subdf3+0x820>
   448d0:	00c00434 	movhi	r3,16
   448d4:	41400234 	orhi	r5,r8,8
   448d8:	18ffffc4 	addi	r3,r3,-1
   448dc:	28ca703a 	and	r5,r5,r3
   448e0:	003f7e06 	br	446dc <__alt_mem_epcs_flash_controller+0xfe0336dc>
   448e4:	10bfffc4 	addi	r2,r2,-1
   448e8:	1000491e 	bne	r2,zero,44a10 <__subdf3+0x418>
   448ec:	898fc83a 	sub	r7,r17,r6
   448f0:	89e3803a 	cmpltu	r17,r17,r7
   448f4:	1947c83a 	sub	r3,r3,r5
   448f8:	1c47c83a 	sub	r3,r3,r17
   448fc:	3823883a 	mov	r17,r7
   44900:	003f9b06 	br	44770 <__alt_mem_epcs_flash_controller+0xfe033770>
   44904:	2988b03a 	or	r4,r5,r6
   44908:	203f5c26 	beq	r4,zero,4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   4490c:	10bfffc4 	addi	r2,r2,-1
   44910:	1000931e 	bne	r2,zero,44b60 <__subdf3+0x568>
   44914:	898d883a 	add	r6,r17,r6
   44918:	3463803a 	cmpltu	r17,r6,r17
   4491c:	1947883a 	add	r3,r3,r5
   44920:	88c7883a 	add	r3,r17,r3
   44924:	3023883a 	mov	r17,r6
   44928:	003fd306 	br	44878 <__alt_mem_epcs_flash_controller+0xfe033878>
   4492c:	1000541e 	bne	r2,zero,44a80 <__subdf3+0x488>
   44930:	80800044 	addi	r2,r16,1
   44934:	1081ffcc 	andi	r2,r2,2047
   44938:	01000044 	movi	r4,1
   4493c:	2080a20e 	bge	r4,r2,44bc8 <__subdf3+0x5d0>
   44940:	8989c83a 	sub	r4,r17,r6
   44944:	8905803a 	cmpltu	r2,r17,r4
   44948:	1967c83a 	sub	r19,r3,r5
   4494c:	98a7c83a 	sub	r19,r19,r2
   44950:	9880202c 	andhi	r2,r19,128
   44954:	10006326 	beq	r2,zero,44ae4 <__subdf3+0x4ec>
   44958:	3463c83a 	sub	r17,r6,r17
   4495c:	28c7c83a 	sub	r3,r5,r3
   44960:	344d803a 	cmpltu	r6,r6,r17
   44964:	19a7c83a 	sub	r19,r3,r6
   44968:	3825883a 	mov	r18,r7
   4496c:	983f861e 	bne	r19,zero,44788 <__alt_mem_epcs_flash_controller+0xfe033788>
   44970:	8809883a 	mov	r4,r17
   44974:	0044fd00 	call	44fd0 <__clzsi2>
   44978:	10800804 	addi	r2,r2,32
   4497c:	113ffe04 	addi	r4,r2,-8
   44980:	00c007c4 	movi	r3,31
   44984:	193f850e 	bge	r3,r4,4479c <__alt_mem_epcs_flash_controller+0xfe03379c>
   44988:	10bff604 	addi	r2,r2,-40
   4498c:	8884983a 	sll	r2,r17,r2
   44990:	0023883a 	mov	r17,zero
   44994:	243f880e 	bge	r4,r16,447b8 <__alt_mem_epcs_flash_controller+0xfe0337b8>
   44998:	00ffe034 	movhi	r3,65408
   4499c:	18ffffc4 	addi	r3,r3,-1
   449a0:	8121c83a 	sub	r16,r16,r4
   449a4:	10c6703a 	and	r3,r2,r3
   449a8:	003f3406 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   449ac:	9100004c 	andi	r4,r18,1
   449b0:	000b883a 	mov	r5,zero
   449b4:	0005883a 	mov	r2,zero
   449b8:	003f4806 	br	446dc <__alt_mem_epcs_flash_controller+0xfe0336dc>
   449bc:	298cb03a 	or	r6,r5,r6
   449c0:	300cc03a 	cmpne	r6,r6,zero
   449c4:	0005883a 	mov	r2,zero
   449c8:	003f6406 	br	4475c <__alt_mem_epcs_flash_controller+0xfe03375c>
   449cc:	10009a1e 	bne	r2,zero,44c38 <__subdf3+0x640>
   449d0:	82400044 	addi	r9,r16,1
   449d4:	4881ffcc 	andi	r2,r9,2047
   449d8:	02800044 	movi	r10,1
   449dc:	5080670e 	bge	r10,r2,44b7c <__subdf3+0x584>
   449e0:	0081ffc4 	movi	r2,2047
   449e4:	4880af26 	beq	r9,r2,44ca4 <__subdf3+0x6ac>
   449e8:	898d883a 	add	r6,r17,r6
   449ec:	1945883a 	add	r2,r3,r5
   449f0:	3447803a 	cmpltu	r3,r6,r17
   449f4:	1887883a 	add	r3,r3,r2
   449f8:	182297fa 	slli	r17,r3,31
   449fc:	300cd07a 	srli	r6,r6,1
   44a00:	1806d07a 	srli	r3,r3,1
   44a04:	4821883a 	mov	r16,r9
   44a08:	89a2b03a 	or	r17,r17,r6
   44a0c:	003f1b06 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44a10:	0101ffc4 	movi	r4,2047
   44a14:	813f441e 	bne	r16,r4,44728 <__alt_mem_epcs_flash_controller+0xfe033728>
   44a18:	003f1806 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44a1c:	843ff844 	addi	r16,r16,-31
   44a20:	01400804 	movi	r5,32
   44a24:	1408d83a 	srl	r4,r2,r16
   44a28:	19405026 	beq	r3,r5,44b6c <__subdf3+0x574>
   44a2c:	01401004 	movi	r5,64
   44a30:	28c7c83a 	sub	r3,r5,r3
   44a34:	10c4983a 	sll	r2,r2,r3
   44a38:	88a2b03a 	or	r17,r17,r2
   44a3c:	8822c03a 	cmpne	r17,r17,zero
   44a40:	2462b03a 	or	r17,r4,r17
   44a44:	0007883a 	mov	r3,zero
   44a48:	0021883a 	mov	r16,zero
   44a4c:	003f6d06 	br	44804 <__alt_mem_epcs_flash_controller+0xfe033804>
   44a50:	11fff804 	addi	r7,r2,-32
   44a54:	01000804 	movi	r4,32
   44a58:	29ced83a 	srl	r7,r5,r7
   44a5c:	11004526 	beq	r2,r4,44b74 <__subdf3+0x57c>
   44a60:	01001004 	movi	r4,64
   44a64:	2089c83a 	sub	r4,r4,r2
   44a68:	2904983a 	sll	r2,r5,r4
   44a6c:	118cb03a 	or	r6,r2,r6
   44a70:	300cc03a 	cmpne	r6,r6,zero
   44a74:	398cb03a 	or	r6,r7,r6
   44a78:	0005883a 	mov	r2,zero
   44a7c:	003f3706 	br	4475c <__alt_mem_epcs_flash_controller+0xfe03375c>
   44a80:	80002a26 	beq	r16,zero,44b2c <__subdf3+0x534>
   44a84:	0101ffc4 	movi	r4,2047
   44a88:	49006626 	beq	r9,r4,44c24 <__subdf3+0x62c>
   44a8c:	0085c83a 	sub	r2,zero,r2
   44a90:	18c02034 	orhi	r3,r3,128
   44a94:	01000e04 	movi	r4,56
   44a98:	20807e16 	blt	r4,r2,44c94 <__subdf3+0x69c>
   44a9c:	010007c4 	movi	r4,31
   44aa0:	2080e716 	blt	r4,r2,44e40 <__subdf3+0x848>
   44aa4:	01000804 	movi	r4,32
   44aa8:	2089c83a 	sub	r4,r4,r2
   44aac:	1914983a 	sll	r10,r3,r4
   44ab0:	8890d83a 	srl	r8,r17,r2
   44ab4:	8908983a 	sll	r4,r17,r4
   44ab8:	1884d83a 	srl	r2,r3,r2
   44abc:	5222b03a 	or	r17,r10,r8
   44ac0:	2006c03a 	cmpne	r3,r4,zero
   44ac4:	88e2b03a 	or	r17,r17,r3
   44ac8:	3463c83a 	sub	r17,r6,r17
   44acc:	2885c83a 	sub	r2,r5,r2
   44ad0:	344d803a 	cmpltu	r6,r6,r17
   44ad4:	1187c83a 	sub	r3,r2,r6
   44ad8:	4821883a 	mov	r16,r9
   44adc:	3825883a 	mov	r18,r7
   44ae0:	003f2306 	br	44770 <__alt_mem_epcs_flash_controller+0xfe033770>
   44ae4:	24d0b03a 	or	r8,r4,r19
   44ae8:	40001b1e 	bne	r8,zero,44b58 <__subdf3+0x560>
   44aec:	0005883a 	mov	r2,zero
   44af0:	0009883a 	mov	r4,zero
   44af4:	0021883a 	mov	r16,zero
   44af8:	003f4906 	br	44820 <__alt_mem_epcs_flash_controller+0xfe033820>
   44afc:	010007c4 	movi	r4,31
   44b00:	20803a16 	blt	r4,r2,44bec <__subdf3+0x5f4>
   44b04:	01000804 	movi	r4,32
   44b08:	2089c83a 	sub	r4,r4,r2
   44b0c:	2912983a 	sll	r9,r5,r4
   44b10:	3090d83a 	srl	r8,r6,r2
   44b14:	3108983a 	sll	r4,r6,r4
   44b18:	2884d83a 	srl	r2,r5,r2
   44b1c:	4a12b03a 	or	r9,r9,r8
   44b20:	2008c03a 	cmpne	r4,r4,zero
   44b24:	4912b03a 	or	r9,r9,r4
   44b28:	003f4e06 	br	44864 <__alt_mem_epcs_flash_controller+0xfe033864>
   44b2c:	1c48b03a 	or	r4,r3,r17
   44b30:	20003c26 	beq	r4,zero,44c24 <__subdf3+0x62c>
   44b34:	0084303a 	nor	r2,zero,r2
   44b38:	1000381e 	bne	r2,zero,44c1c <__subdf3+0x624>
   44b3c:	3463c83a 	sub	r17,r6,r17
   44b40:	28c5c83a 	sub	r2,r5,r3
   44b44:	344d803a 	cmpltu	r6,r6,r17
   44b48:	1187c83a 	sub	r3,r2,r6
   44b4c:	4821883a 	mov	r16,r9
   44b50:	3825883a 	mov	r18,r7
   44b54:	003f0606 	br	44770 <__alt_mem_epcs_flash_controller+0xfe033770>
   44b58:	2023883a 	mov	r17,r4
   44b5c:	003f0906 	br	44784 <__alt_mem_epcs_flash_controller+0xfe033784>
   44b60:	0101ffc4 	movi	r4,2047
   44b64:	813f3a1e 	bne	r16,r4,44850 <__alt_mem_epcs_flash_controller+0xfe033850>
   44b68:	003ec406 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44b6c:	0005883a 	mov	r2,zero
   44b70:	003fb106 	br	44a38 <__alt_mem_epcs_flash_controller+0xfe033a38>
   44b74:	0005883a 	mov	r2,zero
   44b78:	003fbc06 	br	44a6c <__alt_mem_epcs_flash_controller+0xfe033a6c>
   44b7c:	1c44b03a 	or	r2,r3,r17
   44b80:	80008e1e 	bne	r16,zero,44dbc <__subdf3+0x7c4>
   44b84:	1000c826 	beq	r2,zero,44ea8 <__subdf3+0x8b0>
   44b88:	2984b03a 	or	r2,r5,r6
   44b8c:	103ebb26 	beq	r2,zero,4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44b90:	8989883a 	add	r4,r17,r6
   44b94:	1945883a 	add	r2,r3,r5
   44b98:	2447803a 	cmpltu	r3,r4,r17
   44b9c:	1887883a 	add	r3,r3,r2
   44ba0:	1880202c 	andhi	r2,r3,128
   44ba4:	2023883a 	mov	r17,r4
   44ba8:	103f1626 	beq	r2,zero,44804 <__alt_mem_epcs_flash_controller+0xfe033804>
   44bac:	00bfe034 	movhi	r2,65408
   44bb0:	10bfffc4 	addi	r2,r2,-1
   44bb4:	5021883a 	mov	r16,r10
   44bb8:	1886703a 	and	r3,r3,r2
   44bbc:	003eaf06 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44bc0:	3825883a 	mov	r18,r7
   44bc4:	003f0f06 	br	44804 <__alt_mem_epcs_flash_controller+0xfe033804>
   44bc8:	1c44b03a 	or	r2,r3,r17
   44bcc:	8000251e 	bne	r16,zero,44c64 <__subdf3+0x66c>
   44bd0:	1000661e 	bne	r2,zero,44d6c <__subdf3+0x774>
   44bd4:	2990b03a 	or	r8,r5,r6
   44bd8:	40009626 	beq	r8,zero,44e34 <__subdf3+0x83c>
   44bdc:	2807883a 	mov	r3,r5
   44be0:	3023883a 	mov	r17,r6
   44be4:	3825883a 	mov	r18,r7
   44be8:	003ea406 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44bec:	127ff804 	addi	r9,r2,-32
   44bf0:	01000804 	movi	r4,32
   44bf4:	2a52d83a 	srl	r9,r5,r9
   44bf8:	11008c26 	beq	r2,r4,44e2c <__subdf3+0x834>
   44bfc:	01001004 	movi	r4,64
   44c00:	2085c83a 	sub	r2,r4,r2
   44c04:	2884983a 	sll	r2,r5,r2
   44c08:	118cb03a 	or	r6,r2,r6
   44c0c:	300cc03a 	cmpne	r6,r6,zero
   44c10:	4992b03a 	or	r9,r9,r6
   44c14:	0005883a 	mov	r2,zero
   44c18:	003f1206 	br	44864 <__alt_mem_epcs_flash_controller+0xfe033864>
   44c1c:	0101ffc4 	movi	r4,2047
   44c20:	493f9c1e 	bne	r9,r4,44a94 <__alt_mem_epcs_flash_controller+0xfe033a94>
   44c24:	2807883a 	mov	r3,r5
   44c28:	3023883a 	mov	r17,r6
   44c2c:	4821883a 	mov	r16,r9
   44c30:	3825883a 	mov	r18,r7
   44c34:	003e9106 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44c38:	80001f1e 	bne	r16,zero,44cb8 <__subdf3+0x6c0>
   44c3c:	1c48b03a 	or	r4,r3,r17
   44c40:	20005a26 	beq	r4,zero,44dac <__subdf3+0x7b4>
   44c44:	0084303a 	nor	r2,zero,r2
   44c48:	1000561e 	bne	r2,zero,44da4 <__subdf3+0x7ac>
   44c4c:	89a3883a 	add	r17,r17,r6
   44c50:	1945883a 	add	r2,r3,r5
   44c54:	898d803a 	cmpltu	r6,r17,r6
   44c58:	3087883a 	add	r3,r6,r2
   44c5c:	4821883a 	mov	r16,r9
   44c60:	003f0506 	br	44878 <__alt_mem_epcs_flash_controller+0xfe033878>
   44c64:	10002b1e 	bne	r2,zero,44d14 <__subdf3+0x71c>
   44c68:	2984b03a 	or	r2,r5,r6
   44c6c:	10008026 	beq	r2,zero,44e70 <__subdf3+0x878>
   44c70:	2807883a 	mov	r3,r5
   44c74:	3023883a 	mov	r17,r6
   44c78:	3825883a 	mov	r18,r7
   44c7c:	0401ffc4 	movi	r16,2047
   44c80:	003e7e06 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44c84:	3809883a 	mov	r4,r7
   44c88:	0011883a 	mov	r8,zero
   44c8c:	0005883a 	mov	r2,zero
   44c90:	003ee306 	br	44820 <__alt_mem_epcs_flash_controller+0xfe033820>
   44c94:	1c62b03a 	or	r17,r3,r17
   44c98:	8822c03a 	cmpne	r17,r17,zero
   44c9c:	0005883a 	mov	r2,zero
   44ca0:	003f8906 	br	44ac8 <__alt_mem_epcs_flash_controller+0xfe033ac8>
   44ca4:	3809883a 	mov	r4,r7
   44ca8:	4821883a 	mov	r16,r9
   44cac:	0011883a 	mov	r8,zero
   44cb0:	0005883a 	mov	r2,zero
   44cb4:	003eda06 	br	44820 <__alt_mem_epcs_flash_controller+0xfe033820>
   44cb8:	0101ffc4 	movi	r4,2047
   44cbc:	49003b26 	beq	r9,r4,44dac <__subdf3+0x7b4>
   44cc0:	0085c83a 	sub	r2,zero,r2
   44cc4:	18c02034 	orhi	r3,r3,128
   44cc8:	01000e04 	movi	r4,56
   44ccc:	20806e16 	blt	r4,r2,44e88 <__subdf3+0x890>
   44cd0:	010007c4 	movi	r4,31
   44cd4:	20807716 	blt	r4,r2,44eb4 <__subdf3+0x8bc>
   44cd8:	01000804 	movi	r4,32
   44cdc:	2089c83a 	sub	r4,r4,r2
   44ce0:	1914983a 	sll	r10,r3,r4
   44ce4:	8890d83a 	srl	r8,r17,r2
   44ce8:	8908983a 	sll	r4,r17,r4
   44cec:	1884d83a 	srl	r2,r3,r2
   44cf0:	5222b03a 	or	r17,r10,r8
   44cf4:	2006c03a 	cmpne	r3,r4,zero
   44cf8:	88e2b03a 	or	r17,r17,r3
   44cfc:	89a3883a 	add	r17,r17,r6
   44d00:	1145883a 	add	r2,r2,r5
   44d04:	898d803a 	cmpltu	r6,r17,r6
   44d08:	3087883a 	add	r3,r6,r2
   44d0c:	4821883a 	mov	r16,r9
   44d10:	003ed906 	br	44878 <__alt_mem_epcs_flash_controller+0xfe033878>
   44d14:	2984b03a 	or	r2,r5,r6
   44d18:	10004226 	beq	r2,zero,44e24 <__subdf3+0x82c>
   44d1c:	1808d0fa 	srli	r4,r3,3
   44d20:	8822d0fa 	srli	r17,r17,3
   44d24:	1806977a 	slli	r3,r3,29
   44d28:	2080022c 	andhi	r2,r4,8
   44d2c:	1c62b03a 	or	r17,r3,r17
   44d30:	10000826 	beq	r2,zero,44d54 <__subdf3+0x75c>
   44d34:	2812d0fa 	srli	r9,r5,3
   44d38:	4880022c 	andhi	r2,r9,8
   44d3c:	1000051e 	bne	r2,zero,44d54 <__subdf3+0x75c>
   44d40:	300cd0fa 	srli	r6,r6,3
   44d44:	2804977a 	slli	r2,r5,29
   44d48:	4809883a 	mov	r4,r9
   44d4c:	3825883a 	mov	r18,r7
   44d50:	11a2b03a 	or	r17,r2,r6
   44d54:	8806d77a 	srli	r3,r17,29
   44d58:	200890fa 	slli	r4,r4,3
   44d5c:	882290fa 	slli	r17,r17,3
   44d60:	0401ffc4 	movi	r16,2047
   44d64:	1906b03a 	or	r3,r3,r4
   44d68:	003e4406 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44d6c:	2984b03a 	or	r2,r5,r6
   44d70:	103e4226 	beq	r2,zero,4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44d74:	8989c83a 	sub	r4,r17,r6
   44d78:	8911803a 	cmpltu	r8,r17,r4
   44d7c:	1945c83a 	sub	r2,r3,r5
   44d80:	1205c83a 	sub	r2,r2,r8
   44d84:	1200202c 	andhi	r8,r2,128
   44d88:	403e9a26 	beq	r8,zero,447f4 <__alt_mem_epcs_flash_controller+0xfe0337f4>
   44d8c:	3463c83a 	sub	r17,r6,r17
   44d90:	28c5c83a 	sub	r2,r5,r3
   44d94:	344d803a 	cmpltu	r6,r6,r17
   44d98:	1187c83a 	sub	r3,r2,r6
   44d9c:	3825883a 	mov	r18,r7
   44da0:	003e3606 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44da4:	0101ffc4 	movi	r4,2047
   44da8:	493fc71e 	bne	r9,r4,44cc8 <__alt_mem_epcs_flash_controller+0xfe033cc8>
   44dac:	2807883a 	mov	r3,r5
   44db0:	3023883a 	mov	r17,r6
   44db4:	4821883a 	mov	r16,r9
   44db8:	003e3006 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44dbc:	10003626 	beq	r2,zero,44e98 <__subdf3+0x8a0>
   44dc0:	2984b03a 	or	r2,r5,r6
   44dc4:	10001726 	beq	r2,zero,44e24 <__subdf3+0x82c>
   44dc8:	1808d0fa 	srli	r4,r3,3
   44dcc:	8822d0fa 	srli	r17,r17,3
   44dd0:	1806977a 	slli	r3,r3,29
   44dd4:	2080022c 	andhi	r2,r4,8
   44dd8:	1c62b03a 	or	r17,r3,r17
   44ddc:	10000726 	beq	r2,zero,44dfc <__subdf3+0x804>
   44de0:	2812d0fa 	srli	r9,r5,3
   44de4:	4880022c 	andhi	r2,r9,8
   44de8:	1000041e 	bne	r2,zero,44dfc <__subdf3+0x804>
   44dec:	300cd0fa 	srli	r6,r6,3
   44df0:	2804977a 	slli	r2,r5,29
   44df4:	4809883a 	mov	r4,r9
   44df8:	11a2b03a 	or	r17,r2,r6
   44dfc:	8806d77a 	srli	r3,r17,29
   44e00:	200890fa 	slli	r4,r4,3
   44e04:	882290fa 	slli	r17,r17,3
   44e08:	3825883a 	mov	r18,r7
   44e0c:	1906b03a 	or	r3,r3,r4
   44e10:	0401ffc4 	movi	r16,2047
   44e14:	003e1906 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44e18:	000b883a 	mov	r5,zero
   44e1c:	0005883a 	mov	r2,zero
   44e20:	003e2e06 	br	446dc <__alt_mem_epcs_flash_controller+0xfe0336dc>
   44e24:	0401ffc4 	movi	r16,2047
   44e28:	003e1406 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44e2c:	0005883a 	mov	r2,zero
   44e30:	003f7506 	br	44c08 <__alt_mem_epcs_flash_controller+0xfe033c08>
   44e34:	0005883a 	mov	r2,zero
   44e38:	0009883a 	mov	r4,zero
   44e3c:	003e7806 	br	44820 <__alt_mem_epcs_flash_controller+0xfe033820>
   44e40:	123ff804 	addi	r8,r2,-32
   44e44:	01000804 	movi	r4,32
   44e48:	1a10d83a 	srl	r8,r3,r8
   44e4c:	11002526 	beq	r2,r4,44ee4 <__subdf3+0x8ec>
   44e50:	01001004 	movi	r4,64
   44e54:	2085c83a 	sub	r2,r4,r2
   44e58:	1884983a 	sll	r2,r3,r2
   44e5c:	1444b03a 	or	r2,r2,r17
   44e60:	1004c03a 	cmpne	r2,r2,zero
   44e64:	40a2b03a 	or	r17,r8,r2
   44e68:	0005883a 	mov	r2,zero
   44e6c:	003f1606 	br	44ac8 <__alt_mem_epcs_flash_controller+0xfe033ac8>
   44e70:	02000434 	movhi	r8,16
   44e74:	0009883a 	mov	r4,zero
   44e78:	423fffc4 	addi	r8,r8,-1
   44e7c:	00bfffc4 	movi	r2,-1
   44e80:	0401ffc4 	movi	r16,2047
   44e84:	003e6606 	br	44820 <__alt_mem_epcs_flash_controller+0xfe033820>
   44e88:	1c62b03a 	or	r17,r3,r17
   44e8c:	8822c03a 	cmpne	r17,r17,zero
   44e90:	0005883a 	mov	r2,zero
   44e94:	003f9906 	br	44cfc <__alt_mem_epcs_flash_controller+0xfe033cfc>
   44e98:	2807883a 	mov	r3,r5
   44e9c:	3023883a 	mov	r17,r6
   44ea0:	0401ffc4 	movi	r16,2047
   44ea4:	003df506 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44ea8:	2807883a 	mov	r3,r5
   44eac:	3023883a 	mov	r17,r6
   44eb0:	003df206 	br	4467c <__alt_mem_epcs_flash_controller+0xfe03367c>
   44eb4:	123ff804 	addi	r8,r2,-32
   44eb8:	01000804 	movi	r4,32
   44ebc:	1a10d83a 	srl	r8,r3,r8
   44ec0:	11000a26 	beq	r2,r4,44eec <__subdf3+0x8f4>
   44ec4:	01001004 	movi	r4,64
   44ec8:	2085c83a 	sub	r2,r4,r2
   44ecc:	1884983a 	sll	r2,r3,r2
   44ed0:	1444b03a 	or	r2,r2,r17
   44ed4:	1004c03a 	cmpne	r2,r2,zero
   44ed8:	40a2b03a 	or	r17,r8,r2
   44edc:	0005883a 	mov	r2,zero
   44ee0:	003f8606 	br	44cfc <__alt_mem_epcs_flash_controller+0xfe033cfc>
   44ee4:	0005883a 	mov	r2,zero
   44ee8:	003fdc06 	br	44e5c <__alt_mem_epcs_flash_controller+0xfe033e5c>
   44eec:	0005883a 	mov	r2,zero
   44ef0:	003ff706 	br	44ed0 <__alt_mem_epcs_flash_controller+0xfe033ed0>

00044ef4 <__floatsidf>:
   44ef4:	defffd04 	addi	sp,sp,-12
   44ef8:	dfc00215 	stw	ra,8(sp)
   44efc:	dc400115 	stw	r17,4(sp)
   44f00:	dc000015 	stw	r16,0(sp)
   44f04:	20002b26 	beq	r4,zero,44fb4 <__floatsidf+0xc0>
   44f08:	2023883a 	mov	r17,r4
   44f0c:	2020d7fa 	srli	r16,r4,31
   44f10:	20002d16 	blt	r4,zero,44fc8 <__floatsidf+0xd4>
   44f14:	8809883a 	mov	r4,r17
   44f18:	0044fd00 	call	44fd0 <__clzsi2>
   44f1c:	01410784 	movi	r5,1054
   44f20:	288bc83a 	sub	r5,r5,r2
   44f24:	01010cc4 	movi	r4,1075
   44f28:	2149c83a 	sub	r4,r4,r5
   44f2c:	00c007c4 	movi	r3,31
   44f30:	1900160e 	bge	r3,r4,44f8c <__floatsidf+0x98>
   44f34:	00c104c4 	movi	r3,1043
   44f38:	1947c83a 	sub	r3,r3,r5
   44f3c:	88c6983a 	sll	r3,r17,r3
   44f40:	00800434 	movhi	r2,16
   44f44:	10bfffc4 	addi	r2,r2,-1
   44f48:	1886703a 	and	r3,r3,r2
   44f4c:	2941ffcc 	andi	r5,r5,2047
   44f50:	800d883a 	mov	r6,r16
   44f54:	0005883a 	mov	r2,zero
   44f58:	280a953a 	slli	r5,r5,20
   44f5c:	31803fcc 	andi	r6,r6,255
   44f60:	01000434 	movhi	r4,16
   44f64:	300c97fa 	slli	r6,r6,31
   44f68:	213fffc4 	addi	r4,r4,-1
   44f6c:	1906703a 	and	r3,r3,r4
   44f70:	1946b03a 	or	r3,r3,r5
   44f74:	1986b03a 	or	r3,r3,r6
   44f78:	dfc00217 	ldw	ra,8(sp)
   44f7c:	dc400117 	ldw	r17,4(sp)
   44f80:	dc000017 	ldw	r16,0(sp)
   44f84:	dec00304 	addi	sp,sp,12
   44f88:	f800283a 	ret
   44f8c:	00c002c4 	movi	r3,11
   44f90:	1887c83a 	sub	r3,r3,r2
   44f94:	88c6d83a 	srl	r3,r17,r3
   44f98:	8904983a 	sll	r2,r17,r4
   44f9c:	01000434 	movhi	r4,16
   44fa0:	213fffc4 	addi	r4,r4,-1
   44fa4:	2941ffcc 	andi	r5,r5,2047
   44fa8:	1906703a 	and	r3,r3,r4
   44fac:	800d883a 	mov	r6,r16
   44fb0:	003fe906 	br	44f58 <__alt_mem_epcs_flash_controller+0xfe033f58>
   44fb4:	000d883a 	mov	r6,zero
   44fb8:	000b883a 	mov	r5,zero
   44fbc:	0007883a 	mov	r3,zero
   44fc0:	0005883a 	mov	r2,zero
   44fc4:	003fe406 	br	44f58 <__alt_mem_epcs_flash_controller+0xfe033f58>
   44fc8:	0123c83a 	sub	r17,zero,r4
   44fcc:	003fd106 	br	44f14 <__alt_mem_epcs_flash_controller+0xfe033f14>

00044fd0 <__clzsi2>:
   44fd0:	00bfffd4 	movui	r2,65535
   44fd4:	11000536 	bltu	r2,r4,44fec <__clzsi2+0x1c>
   44fd8:	00803fc4 	movi	r2,255
   44fdc:	11000f36 	bltu	r2,r4,4501c <__clzsi2+0x4c>
   44fe0:	00800804 	movi	r2,32
   44fe4:	0007883a 	mov	r3,zero
   44fe8:	00000506 	br	45000 <__clzsi2+0x30>
   44fec:	00804034 	movhi	r2,256
   44ff0:	10bfffc4 	addi	r2,r2,-1
   44ff4:	11000c2e 	bgeu	r2,r4,45028 <__clzsi2+0x58>
   44ff8:	00800204 	movi	r2,8
   44ffc:	00c00604 	movi	r3,24
   45000:	20c8d83a 	srl	r4,r4,r3
   45004:	00c001b4 	movhi	r3,6
   45008:	18f47684 	addi	r3,r3,-11814
   4500c:	1909883a 	add	r4,r3,r4
   45010:	20c00003 	ldbu	r3,0(r4)
   45014:	10c5c83a 	sub	r2,r2,r3
   45018:	f800283a 	ret
   4501c:	00800604 	movi	r2,24
   45020:	00c00204 	movi	r3,8
   45024:	003ff606 	br	45000 <__alt_mem_epcs_flash_controller+0xfe034000>
   45028:	00800404 	movi	r2,16
   4502c:	1007883a 	mov	r3,r2
   45030:	003ff306 	br	45000 <__alt_mem_epcs_flash_controller+0xfe034000>

00045034 <abort>:
   45034:	deffff04 	addi	sp,sp,-4
   45038:	01000184 	movi	r4,6
   4503c:	dfc00015 	stw	ra,0(sp)
   45040:	0046a640 	call	46a64 <raise>
   45044:	01000044 	movi	r4,1
   45048:	0053e400 	call	53e40 <_exit>

0004504c <__assert_func>:
   4504c:	008001b4 	movhi	r2,6
   45050:	10be3804 	addi	r2,r2,-1824
   45054:	10800017 	ldw	r2,0(r2)
   45058:	defffc04 	addi	sp,sp,-16
   4505c:	dfc00315 	stw	ra,12(sp)
   45060:	2015883a 	mov	r10,r4
   45064:	2811883a 	mov	r8,r5
   45068:	3813883a 	mov	r9,r7
   4506c:	11000317 	ldw	r4,12(r2)
   45070:	30000c26 	beq	r6,zero,450a4 <__assert_func+0x58>
   45074:	00c001b4 	movhi	r3,6
   45078:	18f4b704 	addi	r3,r3,-11556
   4507c:	3005883a 	mov	r2,r6
   45080:	014001b4 	movhi	r5,6
   45084:	2974bb04 	addi	r5,r5,-11540
   45088:	500f883a 	mov	r7,r10
   4508c:	480d883a 	mov	r6,r9
   45090:	d8c00115 	stw	r3,4(sp)
   45094:	da000015 	stw	r8,0(sp)
   45098:	d8800215 	stw	r2,8(sp)
   4509c:	00451fc0 	call	451fc <fiprintf>
   450a0:	00450340 	call	45034 <abort>
   450a4:	00c001b4 	movhi	r3,6
   450a8:	18f4ba04 	addi	r3,r3,-11544
   450ac:	1805883a 	mov	r2,r3
   450b0:	003ff306 	br	45080 <__alt_mem_epcs_flash_controller+0xfe034080>

000450b4 <__assert>:
   450b4:	deffff04 	addi	sp,sp,-4
   450b8:	300f883a 	mov	r7,r6
   450bc:	000d883a 	mov	r6,zero
   450c0:	dfc00015 	stw	ra,0(sp)
   450c4:	004504c0 	call	4504c <__assert_func>

000450c8 <calloc>:
   450c8:	008001b4 	movhi	r2,6
   450cc:	10be3804 	addi	r2,r2,-1824
   450d0:	280d883a 	mov	r6,r5
   450d4:	200b883a 	mov	r5,r4
   450d8:	11000017 	ldw	r4,0(r2)
   450dc:	00450e01 	jmpi	450e0 <_calloc_r>

000450e0 <_calloc_r>:
   450e0:	298b383a 	mul	r5,r5,r6
   450e4:	defffe04 	addi	sp,sp,-8
   450e8:	dfc00115 	stw	ra,4(sp)
   450ec:	dc000015 	stw	r16,0(sp)
   450f0:	00454100 	call	45410 <_malloc_r>
   450f4:	10002926 	beq	r2,zero,4519c <_calloc_r+0xbc>
   450f8:	11bfff17 	ldw	r6,-4(r2)
   450fc:	1021883a 	mov	r16,r2
   45100:	00bfff04 	movi	r2,-4
   45104:	308c703a 	and	r6,r6,r2
   45108:	00c00904 	movi	r3,36
   4510c:	308d883a 	add	r6,r6,r2
   45110:	19801636 	bltu	r3,r6,4516c <_calloc_r+0x8c>
   45114:	008004c4 	movi	r2,19
   45118:	11800b2e 	bgeu	r2,r6,45148 <_calloc_r+0x68>
   4511c:	80000015 	stw	zero,0(r16)
   45120:	80000115 	stw	zero,4(r16)
   45124:	008006c4 	movi	r2,27
   45128:	11801a2e 	bgeu	r2,r6,45194 <_calloc_r+0xb4>
   4512c:	80000215 	stw	zero,8(r16)
   45130:	80000315 	stw	zero,12(r16)
   45134:	30c0151e 	bne	r6,r3,4518c <_calloc_r+0xac>
   45138:	80000415 	stw	zero,16(r16)
   4513c:	80800604 	addi	r2,r16,24
   45140:	80000515 	stw	zero,20(r16)
   45144:	00000106 	br	4514c <_calloc_r+0x6c>
   45148:	8005883a 	mov	r2,r16
   4514c:	10000015 	stw	zero,0(r2)
   45150:	10000115 	stw	zero,4(r2)
   45154:	10000215 	stw	zero,8(r2)
   45158:	8005883a 	mov	r2,r16
   4515c:	dfc00117 	ldw	ra,4(sp)
   45160:	dc000017 	ldw	r16,0(sp)
   45164:	dec00204 	addi	sp,sp,8
   45168:	f800283a 	ret
   4516c:	000b883a 	mov	r5,zero
   45170:	8009883a 	mov	r4,r16
   45174:	0045f3c0 	call	45f3c <memset>
   45178:	8005883a 	mov	r2,r16
   4517c:	dfc00117 	ldw	ra,4(sp)
   45180:	dc000017 	ldw	r16,0(sp)
   45184:	dec00204 	addi	sp,sp,8
   45188:	f800283a 	ret
   4518c:	80800404 	addi	r2,r16,16
   45190:	003fee06 	br	4514c <__alt_mem_epcs_flash_controller+0xfe03414c>
   45194:	80800204 	addi	r2,r16,8
   45198:	003fec06 	br	4514c <__alt_mem_epcs_flash_controller+0xfe03414c>
   4519c:	0005883a 	mov	r2,zero
   451a0:	003fee06 	br	4515c <__alt_mem_epcs_flash_controller+0xfe03415c>

000451a4 <exit>:
   451a4:	defffe04 	addi	sp,sp,-8
   451a8:	000b883a 	mov	r5,zero
   451ac:	dc000015 	stw	r16,0(sp)
   451b0:	dfc00115 	stw	ra,4(sp)
   451b4:	2021883a 	mov	r16,r4
   451b8:	004bbe80 	call	4bbe8 <__call_exitprocs>
   451bc:	008001b4 	movhi	r2,6
   451c0:	10be3704 	addi	r2,r2,-1828
   451c4:	11000017 	ldw	r4,0(r2)
   451c8:	20800f17 	ldw	r2,60(r4)
   451cc:	10000126 	beq	r2,zero,451d4 <exit+0x30>
   451d0:	103ee83a 	callr	r2
   451d4:	8009883a 	mov	r4,r16
   451d8:	0053e400 	call	53e40 <_exit>

000451dc <_fiprintf_r>:
   451dc:	defffe04 	addi	sp,sp,-8
   451e0:	dfc00015 	stw	ra,0(sp)
   451e4:	d9c00115 	stw	r7,4(sp)
   451e8:	d9c00104 	addi	r7,sp,4
   451ec:	00497ac0 	call	497ac <_vfiprintf_r>
   451f0:	dfc00017 	ldw	ra,0(sp)
   451f4:	dec00204 	addi	sp,sp,8
   451f8:	f800283a 	ret

000451fc <fiprintf>:
   451fc:	defffd04 	addi	sp,sp,-12
   45200:	2005883a 	mov	r2,r4
   45204:	dfc00015 	stw	ra,0(sp)
   45208:	d9800115 	stw	r6,4(sp)
   4520c:	d9c00215 	stw	r7,8(sp)
   45210:	00c001b4 	movhi	r3,6
   45214:	18fe3804 	addi	r3,r3,-1824
   45218:	19000017 	ldw	r4,0(r3)
   4521c:	280d883a 	mov	r6,r5
   45220:	d9c00104 	addi	r7,sp,4
   45224:	100b883a 	mov	r5,r2
   45228:	00497ac0 	call	497ac <_vfiprintf_r>
   4522c:	dfc00017 	ldw	ra,0(sp)
   45230:	dec00304 	addi	sp,sp,12
   45234:	f800283a 	ret

00045238 <_fprintf_r>:
   45238:	defffe04 	addi	sp,sp,-8
   4523c:	2809883a 	mov	r4,r5
   45240:	300b883a 	mov	r5,r6
   45244:	dfc00015 	stw	ra,0(sp)
   45248:	d9c00115 	stw	r7,4(sp)
   4524c:	d9800104 	addi	r6,sp,4
   45250:	004b9bc0 	call	4b9bc <__vfprintf_internal>
   45254:	dfc00017 	ldw	ra,0(sp)
   45258:	dec00204 	addi	sp,sp,8
   4525c:	f800283a 	ret

00045260 <fprintf>:
   45260:	defffd04 	addi	sp,sp,-12
   45264:	dfc00015 	stw	ra,0(sp)
   45268:	d9800115 	stw	r6,4(sp)
   4526c:	d9c00215 	stw	r7,8(sp)
   45270:	d9800104 	addi	r6,sp,4
   45274:	004b9bc0 	call	4b9bc <__vfprintf_internal>
   45278:	dfc00017 	ldw	ra,0(sp)
   4527c:	dec00304 	addi	sp,sp,12
   45280:	f800283a 	ret

00045284 <_findenv>:
   45284:	008001b4 	movhi	r2,6
   45288:	10be3804 	addi	r2,r2,-1824
   4528c:	280d883a 	mov	r6,r5
   45290:	200b883a 	mov	r5,r4
   45294:	11000017 	ldw	r4,0(r2)
   45298:	00452c81 	jmpi	452c8 <_findenv_r>

0004529c <getenv>:
   4529c:	008001b4 	movhi	r2,6
   452a0:	10be3804 	addi	r2,r2,-1824
   452a4:	200b883a 	mov	r5,r4
   452a8:	11000017 	ldw	r4,0(r2)
   452ac:	defffe04 	addi	sp,sp,-8
   452b0:	d80d883a 	mov	r6,sp
   452b4:	dfc00115 	stw	ra,4(sp)
   452b8:	00452c80 	call	452c8 <_findenv_r>
   452bc:	dfc00117 	ldw	ra,4(sp)
   452c0:	dec00204 	addi	sp,sp,8
   452c4:	f800283a 	ret

000452c8 <_findenv_r>:
   452c8:	defff704 	addi	sp,sp,-36
   452cc:	dd000415 	stw	r20,16(sp)
   452d0:	050001b4 	movhi	r20,6
   452d4:	a53e3b04 	addi	r20,r20,-1812
   452d8:	dd400515 	stw	r21,20(sp)
   452dc:	dcc00315 	stw	r19,12(sp)
   452e0:	dc800215 	stw	r18,8(sp)
   452e4:	dc000015 	stw	r16,0(sp)
   452e8:	dfc00815 	stw	ra,32(sp)
   452ec:	ddc00715 	stw	r23,28(sp)
   452f0:	dd800615 	stw	r22,24(sp)
   452f4:	dc400115 	stw	r17,4(sp)
   452f8:	202b883a 	mov	r21,r4
   452fc:	2825883a 	mov	r18,r5
   45300:	3027883a 	mov	r19,r6
   45304:	0053df80 	call	53df8 <__env_lock>
   45308:	a4000017 	ldw	r16,0(r20)
   4530c:	80001726 	beq	r16,zero,4536c <_findenv_r+0xa4>
   45310:	90c00007 	ldb	r3,0(r18)
   45314:	18002b26 	beq	r3,zero,453c4 <_findenv_r+0xfc>
   45318:	9005883a 	mov	r2,r18
   4531c:	01000f44 	movi	r4,61
   45320:	19001226 	beq	r3,r4,4536c <_findenv_r+0xa4>
   45324:	10800044 	addi	r2,r2,1
   45328:	10c00007 	ldb	r3,0(r2)
   4532c:	183ffc1e 	bne	r3,zero,45320 <__alt_mem_epcs_flash_controller+0xfe034320>
   45330:	14a3c83a 	sub	r17,r2,r18
   45334:	81000017 	ldw	r4,0(r16)
   45338:	20000c26 	beq	r4,zero,4536c <_findenv_r+0xa4>
   4533c:	05c00f44 	movi	r23,61
   45340:	880d883a 	mov	r6,r17
   45344:	900b883a 	mov	r5,r18
   45348:	0046f8c0 	call	46f8c <strncmp>
   4534c:	1000041e 	bne	r2,zero,45360 <_findenv_r+0x98>
   45350:	85800017 	ldw	r22,0(r16)
   45354:	b46d883a 	add	r22,r22,r17
   45358:	b0800007 	ldb	r2,0(r22)
   4535c:	15c01126 	beq	r2,r23,453a4 <_findenv_r+0xdc>
   45360:	84000104 	addi	r16,r16,4
   45364:	81000017 	ldw	r4,0(r16)
   45368:	203ff51e 	bne	r4,zero,45340 <__alt_mem_epcs_flash_controller+0xfe034340>
   4536c:	a809883a 	mov	r4,r21
   45370:	0053e1c0 	call	53e1c <__env_unlock>
   45374:	0005883a 	mov	r2,zero
   45378:	dfc00817 	ldw	ra,32(sp)
   4537c:	ddc00717 	ldw	r23,28(sp)
   45380:	dd800617 	ldw	r22,24(sp)
   45384:	dd400517 	ldw	r21,20(sp)
   45388:	dd000417 	ldw	r20,16(sp)
   4538c:	dcc00317 	ldw	r19,12(sp)
   45390:	dc800217 	ldw	r18,8(sp)
   45394:	dc400117 	ldw	r17,4(sp)
   45398:	dc000017 	ldw	r16,0(sp)
   4539c:	dec00904 	addi	sp,sp,36
   453a0:	f800283a 	ret
   453a4:	a0800017 	ldw	r2,0(r20)
   453a8:	a809883a 	mov	r4,r21
   453ac:	80a1c83a 	sub	r16,r16,r2
   453b0:	8021d0ba 	srai	r16,r16,2
   453b4:	9c000015 	stw	r16,0(r19)
   453b8:	0053e1c0 	call	53e1c <__env_unlock>
   453bc:	b0800044 	addi	r2,r22,1
   453c0:	003fed06 	br	45378 <__alt_mem_epcs_flash_controller+0xfe034378>
   453c4:	0023883a 	mov	r17,zero
   453c8:	003fda06 	br	45334 <__alt_mem_epcs_flash_controller+0xfe034334>

000453cc <_getenv_r>:
   453cc:	defffe04 	addi	sp,sp,-8
   453d0:	d80d883a 	mov	r6,sp
   453d4:	dfc00115 	stw	ra,4(sp)
   453d8:	00452c80 	call	452c8 <_findenv_r>
   453dc:	dfc00117 	ldw	ra,4(sp)
   453e0:	dec00204 	addi	sp,sp,8
   453e4:	f800283a 	ret

000453e8 <malloc>:
   453e8:	008001b4 	movhi	r2,6
   453ec:	10be3804 	addi	r2,r2,-1824
   453f0:	200b883a 	mov	r5,r4
   453f4:	11000017 	ldw	r4,0(r2)
   453f8:	00454101 	jmpi	45410 <_malloc_r>

000453fc <free>:
   453fc:	008001b4 	movhi	r2,6
   45400:	10be3804 	addi	r2,r2,-1824
   45404:	200b883a 	mov	r5,r4
   45408:	11000017 	ldw	r4,0(r2)
   4540c:	004dd5c1 	jmpi	4dd5c <_free_r>

00045410 <_malloc_r>:
   45410:	defff504 	addi	sp,sp,-44
   45414:	dc800315 	stw	r18,12(sp)
   45418:	dfc00a15 	stw	ra,40(sp)
   4541c:	df000915 	stw	fp,36(sp)
   45420:	ddc00815 	stw	r23,32(sp)
   45424:	dd800715 	stw	r22,28(sp)
   45428:	dd400615 	stw	r21,24(sp)
   4542c:	dd000515 	stw	r20,20(sp)
   45430:	dcc00415 	stw	r19,16(sp)
   45434:	dc400215 	stw	r17,8(sp)
   45438:	dc000115 	stw	r16,4(sp)
   4543c:	288002c4 	addi	r2,r5,11
   45440:	00c00584 	movi	r3,22
   45444:	2025883a 	mov	r18,r4
   45448:	18807f2e 	bgeu	r3,r2,45648 <_malloc_r+0x238>
   4544c:	047ffe04 	movi	r17,-8
   45450:	1462703a 	and	r17,r2,r17
   45454:	8800a316 	blt	r17,zero,456e4 <_malloc_r+0x2d4>
   45458:	8940a236 	bltu	r17,r5,456e4 <_malloc_r+0x2d4>
   4545c:	00548d80 	call	548d8 <__malloc_lock>
   45460:	00807dc4 	movi	r2,503
   45464:	1441e92e 	bgeu	r2,r17,45c0c <_malloc_r+0x7fc>
   45468:	8804d27a 	srli	r2,r17,9
   4546c:	1000a126 	beq	r2,zero,456f4 <_malloc_r+0x2e4>
   45470:	00c00104 	movi	r3,4
   45474:	18811e36 	bltu	r3,r2,458f0 <_malloc_r+0x4e0>
   45478:	8804d1ba 	srli	r2,r17,6
   4547c:	12000e44 	addi	r8,r2,57
   45480:	11c00e04 	addi	r7,r2,56
   45484:	4209883a 	add	r4,r8,r8
   45488:	04c001b4 	movhi	r19,6
   4548c:	2109883a 	add	r4,r4,r4
   45490:	9cf81c04 	addi	r19,r19,-8080
   45494:	2109883a 	add	r4,r4,r4
   45498:	9909883a 	add	r4,r19,r4
   4549c:	24000117 	ldw	r16,4(r4)
   454a0:	213ffe04 	addi	r4,r4,-8
   454a4:	24009726 	beq	r4,r16,45704 <_malloc_r+0x2f4>
   454a8:	80800117 	ldw	r2,4(r16)
   454ac:	01bfff04 	movi	r6,-4
   454b0:	014003c4 	movi	r5,15
   454b4:	1184703a 	and	r2,r2,r6
   454b8:	1447c83a 	sub	r3,r2,r17
   454bc:	28c00716 	blt	r5,r3,454dc <_malloc_r+0xcc>
   454c0:	1800920e 	bge	r3,zero,4570c <_malloc_r+0x2fc>
   454c4:	84000317 	ldw	r16,12(r16)
   454c8:	24008e26 	beq	r4,r16,45704 <_malloc_r+0x2f4>
   454cc:	80800117 	ldw	r2,4(r16)
   454d0:	1184703a 	and	r2,r2,r6
   454d4:	1447c83a 	sub	r3,r2,r17
   454d8:	28fff90e 	bge	r5,r3,454c0 <__alt_mem_epcs_flash_controller+0xfe0344c0>
   454dc:	3809883a 	mov	r4,r7
   454e0:	018001b4 	movhi	r6,6
   454e4:	9c000417 	ldw	r16,16(r19)
   454e8:	31b81c04 	addi	r6,r6,-8080
   454ec:	32000204 	addi	r8,r6,8
   454f0:	82013426 	beq	r16,r8,459c4 <_malloc_r+0x5b4>
   454f4:	80c00117 	ldw	r3,4(r16)
   454f8:	00bfff04 	movi	r2,-4
   454fc:	188e703a 	and	r7,r3,r2
   45500:	3c45c83a 	sub	r2,r7,r17
   45504:	00c003c4 	movi	r3,15
   45508:	18811f16 	blt	r3,r2,45988 <_malloc_r+0x578>
   4550c:	32000515 	stw	r8,20(r6)
   45510:	32000415 	stw	r8,16(r6)
   45514:	10007f0e 	bge	r2,zero,45714 <_malloc_r+0x304>
   45518:	00807fc4 	movi	r2,511
   4551c:	11c0fd36 	bltu	r2,r7,45914 <_malloc_r+0x504>
   45520:	3806d0fa 	srli	r3,r7,3
   45524:	01c00044 	movi	r7,1
   45528:	30800117 	ldw	r2,4(r6)
   4552c:	19400044 	addi	r5,r3,1
   45530:	294b883a 	add	r5,r5,r5
   45534:	1807d0ba 	srai	r3,r3,2
   45538:	294b883a 	add	r5,r5,r5
   4553c:	294b883a 	add	r5,r5,r5
   45540:	298b883a 	add	r5,r5,r6
   45544:	38c6983a 	sll	r3,r7,r3
   45548:	29c00017 	ldw	r7,0(r5)
   4554c:	2a7ffe04 	addi	r9,r5,-8
   45550:	1886b03a 	or	r3,r3,r2
   45554:	82400315 	stw	r9,12(r16)
   45558:	81c00215 	stw	r7,8(r16)
   4555c:	30c00115 	stw	r3,4(r6)
   45560:	2c000015 	stw	r16,0(r5)
   45564:	3c000315 	stw	r16,12(r7)
   45568:	2005d0ba 	srai	r2,r4,2
   4556c:	01400044 	movi	r5,1
   45570:	288a983a 	sll	r5,r5,r2
   45574:	19406f36 	bltu	r3,r5,45734 <_malloc_r+0x324>
   45578:	28c4703a 	and	r2,r5,r3
   4557c:	10000a1e 	bne	r2,zero,455a8 <_malloc_r+0x198>
   45580:	00bfff04 	movi	r2,-4
   45584:	294b883a 	add	r5,r5,r5
   45588:	2088703a 	and	r4,r4,r2
   4558c:	28c4703a 	and	r2,r5,r3
   45590:	21000104 	addi	r4,r4,4
   45594:	1000041e 	bne	r2,zero,455a8 <_malloc_r+0x198>
   45598:	294b883a 	add	r5,r5,r5
   4559c:	28c4703a 	and	r2,r5,r3
   455a0:	21000104 	addi	r4,r4,4
   455a4:	103ffc26 	beq	r2,zero,45598 <__alt_mem_epcs_flash_controller+0xfe034598>
   455a8:	02bfff04 	movi	r10,-4
   455ac:	024003c4 	movi	r9,15
   455b0:	21800044 	addi	r6,r4,1
   455b4:	318d883a 	add	r6,r6,r6
   455b8:	318d883a 	add	r6,r6,r6
   455bc:	318d883a 	add	r6,r6,r6
   455c0:	998d883a 	add	r6,r19,r6
   455c4:	333ffe04 	addi	r12,r6,-8
   455c8:	2017883a 	mov	r11,r4
   455cc:	31800104 	addi	r6,r6,4
   455d0:	34000017 	ldw	r16,0(r6)
   455d4:	31fffd04 	addi	r7,r6,-12
   455d8:	81c0041e 	bne	r16,r7,455ec <_malloc_r+0x1dc>
   455dc:	0000fb06 	br	459cc <_malloc_r+0x5bc>
   455e0:	1801030e 	bge	r3,zero,459f0 <_malloc_r+0x5e0>
   455e4:	84000317 	ldw	r16,12(r16)
   455e8:	81c0f826 	beq	r16,r7,459cc <_malloc_r+0x5bc>
   455ec:	80800117 	ldw	r2,4(r16)
   455f0:	1284703a 	and	r2,r2,r10
   455f4:	1447c83a 	sub	r3,r2,r17
   455f8:	48fff90e 	bge	r9,r3,455e0 <__alt_mem_epcs_flash_controller+0xfe0345e0>
   455fc:	80800317 	ldw	r2,12(r16)
   45600:	81000217 	ldw	r4,8(r16)
   45604:	89400054 	ori	r5,r17,1
   45608:	81400115 	stw	r5,4(r16)
   4560c:	20800315 	stw	r2,12(r4)
   45610:	11000215 	stw	r4,8(r2)
   45614:	8463883a 	add	r17,r16,r17
   45618:	9c400515 	stw	r17,20(r19)
   4561c:	9c400415 	stw	r17,16(r19)
   45620:	18800054 	ori	r2,r3,1
   45624:	88800115 	stw	r2,4(r17)
   45628:	8a000315 	stw	r8,12(r17)
   4562c:	8a000215 	stw	r8,8(r17)
   45630:	88e3883a 	add	r17,r17,r3
   45634:	88c00015 	stw	r3,0(r17)
   45638:	9009883a 	mov	r4,r18
   4563c:	00548fc0 	call	548fc <__malloc_unlock>
   45640:	80800204 	addi	r2,r16,8
   45644:	00001b06 	br	456b4 <_malloc_r+0x2a4>
   45648:	04400404 	movi	r17,16
   4564c:	89402536 	bltu	r17,r5,456e4 <_malloc_r+0x2d4>
   45650:	00548d80 	call	548d8 <__malloc_lock>
   45654:	00800184 	movi	r2,6
   45658:	01000084 	movi	r4,2
   4565c:	04c001b4 	movhi	r19,6
   45660:	1085883a 	add	r2,r2,r2
   45664:	9cf81c04 	addi	r19,r19,-8080
   45668:	1085883a 	add	r2,r2,r2
   4566c:	9885883a 	add	r2,r19,r2
   45670:	14000117 	ldw	r16,4(r2)
   45674:	10fffe04 	addi	r3,r2,-8
   45678:	80c0d926 	beq	r16,r3,459e0 <_malloc_r+0x5d0>
   4567c:	80c00117 	ldw	r3,4(r16)
   45680:	81000317 	ldw	r4,12(r16)
   45684:	00bfff04 	movi	r2,-4
   45688:	1884703a 	and	r2,r3,r2
   4568c:	81400217 	ldw	r5,8(r16)
   45690:	8085883a 	add	r2,r16,r2
   45694:	10c00117 	ldw	r3,4(r2)
   45698:	29000315 	stw	r4,12(r5)
   4569c:	21400215 	stw	r5,8(r4)
   456a0:	18c00054 	ori	r3,r3,1
   456a4:	10c00115 	stw	r3,4(r2)
   456a8:	9009883a 	mov	r4,r18
   456ac:	00548fc0 	call	548fc <__malloc_unlock>
   456b0:	80800204 	addi	r2,r16,8
   456b4:	dfc00a17 	ldw	ra,40(sp)
   456b8:	df000917 	ldw	fp,36(sp)
   456bc:	ddc00817 	ldw	r23,32(sp)
   456c0:	dd800717 	ldw	r22,28(sp)
   456c4:	dd400617 	ldw	r21,24(sp)
   456c8:	dd000517 	ldw	r20,20(sp)
   456cc:	dcc00417 	ldw	r19,16(sp)
   456d0:	dc800317 	ldw	r18,12(sp)
   456d4:	dc400217 	ldw	r17,8(sp)
   456d8:	dc000117 	ldw	r16,4(sp)
   456dc:	dec00b04 	addi	sp,sp,44
   456e0:	f800283a 	ret
   456e4:	00800304 	movi	r2,12
   456e8:	90800015 	stw	r2,0(r18)
   456ec:	0005883a 	mov	r2,zero
   456f0:	003ff006 	br	456b4 <__alt_mem_epcs_flash_controller+0xfe0346b4>
   456f4:	01002004 	movi	r4,128
   456f8:	02001004 	movi	r8,64
   456fc:	01c00fc4 	movi	r7,63
   45700:	003f6106 	br	45488 <__alt_mem_epcs_flash_controller+0xfe034488>
   45704:	4009883a 	mov	r4,r8
   45708:	003f7506 	br	454e0 <__alt_mem_epcs_flash_controller+0xfe0344e0>
   4570c:	81000317 	ldw	r4,12(r16)
   45710:	003fde06 	br	4568c <__alt_mem_epcs_flash_controller+0xfe03468c>
   45714:	81c5883a 	add	r2,r16,r7
   45718:	11400117 	ldw	r5,4(r2)
   4571c:	9009883a 	mov	r4,r18
   45720:	29400054 	ori	r5,r5,1
   45724:	11400115 	stw	r5,4(r2)
   45728:	00548fc0 	call	548fc <__malloc_unlock>
   4572c:	80800204 	addi	r2,r16,8
   45730:	003fe006 	br	456b4 <__alt_mem_epcs_flash_controller+0xfe0346b4>
   45734:	9c000217 	ldw	r16,8(r19)
   45738:	00bfff04 	movi	r2,-4
   4573c:	85800117 	ldw	r22,4(r16)
   45740:	b0ac703a 	and	r22,r22,r2
   45744:	b4400336 	bltu	r22,r17,45754 <_malloc_r+0x344>
   45748:	b445c83a 	sub	r2,r22,r17
   4574c:	00c003c4 	movi	r3,15
   45750:	18805d16 	blt	r3,r2,458c8 <_malloc_r+0x4b8>
   45754:	05c001b4 	movhi	r23,6
   45758:	008001b4 	movhi	r2,6
   4575c:	10869a04 	addi	r2,r2,6760
   45760:	bdfe3904 	addi	r23,r23,-1820
   45764:	15400017 	ldw	r21,0(r2)
   45768:	b8c00017 	ldw	r3,0(r23)
   4576c:	00bfffc4 	movi	r2,-1
   45770:	858d883a 	add	r6,r16,r22
   45774:	8d6b883a 	add	r21,r17,r21
   45778:	1880ea26 	beq	r3,r2,45b24 <_malloc_r+0x714>
   4577c:	ad4403c4 	addi	r21,r21,4111
   45780:	00bc0004 	movi	r2,-4096
   45784:	a8aa703a 	and	r21,r21,r2
   45788:	a80b883a 	mov	r5,r21
   4578c:	9009883a 	mov	r4,r18
   45790:	d9800015 	stw	r6,0(sp)
   45794:	00467bc0 	call	467bc <_sbrk_r>
   45798:	1029883a 	mov	r20,r2
   4579c:	00bfffc4 	movi	r2,-1
   457a0:	d9800017 	ldw	r6,0(sp)
   457a4:	a080e826 	beq	r20,r2,45b48 <_malloc_r+0x738>
   457a8:	a180a636 	bltu	r20,r6,45a44 <_malloc_r+0x634>
   457ac:	070001b4 	movhi	fp,6
   457b0:	e70aab04 	addi	fp,fp,10924
   457b4:	e0800017 	ldw	r2,0(fp)
   457b8:	a887883a 	add	r3,r21,r2
   457bc:	e0c00015 	stw	r3,0(fp)
   457c0:	3500e626 	beq	r6,r20,45b5c <_malloc_r+0x74c>
   457c4:	b9000017 	ldw	r4,0(r23)
   457c8:	00bfffc4 	movi	r2,-1
   457cc:	2080ee26 	beq	r4,r2,45b88 <_malloc_r+0x778>
   457d0:	a185c83a 	sub	r2,r20,r6
   457d4:	10c5883a 	add	r2,r2,r3
   457d8:	e0800015 	stw	r2,0(fp)
   457dc:	a0c001cc 	andi	r3,r20,7
   457e0:	1800bc26 	beq	r3,zero,45ad4 <_malloc_r+0x6c4>
   457e4:	a0e9c83a 	sub	r20,r20,r3
   457e8:	00840204 	movi	r2,4104
   457ec:	a5000204 	addi	r20,r20,8
   457f0:	10c7c83a 	sub	r3,r2,r3
   457f4:	a545883a 	add	r2,r20,r21
   457f8:	1083ffcc 	andi	r2,r2,4095
   457fc:	18abc83a 	sub	r21,r3,r2
   45800:	a80b883a 	mov	r5,r21
   45804:	9009883a 	mov	r4,r18
   45808:	00467bc0 	call	467bc <_sbrk_r>
   4580c:	00ffffc4 	movi	r3,-1
   45810:	10c0e126 	beq	r2,r3,45b98 <_malloc_r+0x788>
   45814:	1505c83a 	sub	r2,r2,r20
   45818:	1545883a 	add	r2,r2,r21
   4581c:	10800054 	ori	r2,r2,1
   45820:	e0c00017 	ldw	r3,0(fp)
   45824:	9d000215 	stw	r20,8(r19)
   45828:	a0800115 	stw	r2,4(r20)
   4582c:	a8c7883a 	add	r3,r21,r3
   45830:	e0c00015 	stw	r3,0(fp)
   45834:	84c00e26 	beq	r16,r19,45870 <_malloc_r+0x460>
   45838:	018003c4 	movi	r6,15
   4583c:	3580a72e 	bgeu	r6,r22,45adc <_malloc_r+0x6cc>
   45840:	81400117 	ldw	r5,4(r16)
   45844:	013ffe04 	movi	r4,-8
   45848:	b0bffd04 	addi	r2,r22,-12
   4584c:	1104703a 	and	r2,r2,r4
   45850:	2900004c 	andi	r4,r5,1
   45854:	2088b03a 	or	r4,r4,r2
   45858:	81000115 	stw	r4,4(r16)
   4585c:	01400144 	movi	r5,5
   45860:	8089883a 	add	r4,r16,r2
   45864:	21400115 	stw	r5,4(r4)
   45868:	21400215 	stw	r5,8(r4)
   4586c:	3080cd36 	bltu	r6,r2,45ba4 <_malloc_r+0x794>
   45870:	008001b4 	movhi	r2,6
   45874:	10869904 	addi	r2,r2,6756
   45878:	11000017 	ldw	r4,0(r2)
   4587c:	20c0012e 	bgeu	r4,r3,45884 <_malloc_r+0x474>
   45880:	10c00015 	stw	r3,0(r2)
   45884:	008001b4 	movhi	r2,6
   45888:	10869804 	addi	r2,r2,6752
   4588c:	11000017 	ldw	r4,0(r2)
   45890:	9c000217 	ldw	r16,8(r19)
   45894:	20c0012e 	bgeu	r4,r3,4589c <_malloc_r+0x48c>
   45898:	10c00015 	stw	r3,0(r2)
   4589c:	80c00117 	ldw	r3,4(r16)
   458a0:	00bfff04 	movi	r2,-4
   458a4:	1886703a 	and	r3,r3,r2
   458a8:	1c45c83a 	sub	r2,r3,r17
   458ac:	1c400236 	bltu	r3,r17,458b8 <_malloc_r+0x4a8>
   458b0:	00c003c4 	movi	r3,15
   458b4:	18800416 	blt	r3,r2,458c8 <_malloc_r+0x4b8>
   458b8:	9009883a 	mov	r4,r18
   458bc:	00548fc0 	call	548fc <__malloc_unlock>
   458c0:	0005883a 	mov	r2,zero
   458c4:	003f7b06 	br	456b4 <__alt_mem_epcs_flash_controller+0xfe0346b4>
   458c8:	88c00054 	ori	r3,r17,1
   458cc:	80c00115 	stw	r3,4(r16)
   458d0:	8463883a 	add	r17,r16,r17
   458d4:	10800054 	ori	r2,r2,1
   458d8:	9c400215 	stw	r17,8(r19)
   458dc:	88800115 	stw	r2,4(r17)
   458e0:	9009883a 	mov	r4,r18
   458e4:	00548fc0 	call	548fc <__malloc_unlock>
   458e8:	80800204 	addi	r2,r16,8
   458ec:	003f7106 	br	456b4 <__alt_mem_epcs_flash_controller+0xfe0346b4>
   458f0:	00c00504 	movi	r3,20
   458f4:	18804a2e 	bgeu	r3,r2,45a20 <_malloc_r+0x610>
   458f8:	00c01504 	movi	r3,84
   458fc:	18806e36 	bltu	r3,r2,45ab8 <_malloc_r+0x6a8>
   45900:	8804d33a 	srli	r2,r17,12
   45904:	12001bc4 	addi	r8,r2,111
   45908:	11c01b84 	addi	r7,r2,110
   4590c:	4209883a 	add	r4,r8,r8
   45910:	003edd06 	br	45488 <__alt_mem_epcs_flash_controller+0xfe034488>
   45914:	3804d27a 	srli	r2,r7,9
   45918:	00c00104 	movi	r3,4
   4591c:	1880442e 	bgeu	r3,r2,45a30 <_malloc_r+0x620>
   45920:	00c00504 	movi	r3,20
   45924:	18808136 	bltu	r3,r2,45b2c <_malloc_r+0x71c>
   45928:	11401704 	addi	r5,r2,92
   4592c:	10c016c4 	addi	r3,r2,91
   45930:	294b883a 	add	r5,r5,r5
   45934:	294b883a 	add	r5,r5,r5
   45938:	294b883a 	add	r5,r5,r5
   4593c:	994b883a 	add	r5,r19,r5
   45940:	28800017 	ldw	r2,0(r5)
   45944:	018001b4 	movhi	r6,6
   45948:	297ffe04 	addi	r5,r5,-8
   4594c:	31b81c04 	addi	r6,r6,-8080
   45950:	28806526 	beq	r5,r2,45ae8 <_malloc_r+0x6d8>
   45954:	01bfff04 	movi	r6,-4
   45958:	10c00117 	ldw	r3,4(r2)
   4595c:	1986703a 	and	r3,r3,r6
   45960:	38c0022e 	bgeu	r7,r3,4596c <_malloc_r+0x55c>
   45964:	10800217 	ldw	r2,8(r2)
   45968:	28bffb1e 	bne	r5,r2,45958 <__alt_mem_epcs_flash_controller+0xfe034958>
   4596c:	11400317 	ldw	r5,12(r2)
   45970:	98c00117 	ldw	r3,4(r19)
   45974:	81400315 	stw	r5,12(r16)
   45978:	80800215 	stw	r2,8(r16)
   4597c:	2c000215 	stw	r16,8(r5)
   45980:	14000315 	stw	r16,12(r2)
   45984:	003ef806 	br	45568 <__alt_mem_epcs_flash_controller+0xfe034568>
   45988:	88c00054 	ori	r3,r17,1
   4598c:	80c00115 	stw	r3,4(r16)
   45990:	8463883a 	add	r17,r16,r17
   45994:	34400515 	stw	r17,20(r6)
   45998:	34400415 	stw	r17,16(r6)
   4599c:	10c00054 	ori	r3,r2,1
   459a0:	8a000315 	stw	r8,12(r17)
   459a4:	8a000215 	stw	r8,8(r17)
   459a8:	88c00115 	stw	r3,4(r17)
   459ac:	88a3883a 	add	r17,r17,r2
   459b0:	88800015 	stw	r2,0(r17)
   459b4:	9009883a 	mov	r4,r18
   459b8:	00548fc0 	call	548fc <__malloc_unlock>
   459bc:	80800204 	addi	r2,r16,8
   459c0:	003f3c06 	br	456b4 <__alt_mem_epcs_flash_controller+0xfe0346b4>
   459c4:	30c00117 	ldw	r3,4(r6)
   459c8:	003ee706 	br	45568 <__alt_mem_epcs_flash_controller+0xfe034568>
   459cc:	5ac00044 	addi	r11,r11,1
   459d0:	588000cc 	andi	r2,r11,3
   459d4:	31800204 	addi	r6,r6,8
   459d8:	103efd1e 	bne	r2,zero,455d0 <__alt_mem_epcs_flash_controller+0xfe0345d0>
   459dc:	00002406 	br	45a70 <_malloc_r+0x660>
   459e0:	14000317 	ldw	r16,12(r2)
   459e4:	143f251e 	bne	r2,r16,4567c <__alt_mem_epcs_flash_controller+0xfe03467c>
   459e8:	21000084 	addi	r4,r4,2
   459ec:	003ebc06 	br	454e0 <__alt_mem_epcs_flash_controller+0xfe0344e0>
   459f0:	8085883a 	add	r2,r16,r2
   459f4:	10c00117 	ldw	r3,4(r2)
   459f8:	81000317 	ldw	r4,12(r16)
   459fc:	81400217 	ldw	r5,8(r16)
   45a00:	18c00054 	ori	r3,r3,1
   45a04:	10c00115 	stw	r3,4(r2)
   45a08:	29000315 	stw	r4,12(r5)
   45a0c:	21400215 	stw	r5,8(r4)
   45a10:	9009883a 	mov	r4,r18
   45a14:	00548fc0 	call	548fc <__malloc_unlock>
   45a18:	80800204 	addi	r2,r16,8
   45a1c:	003f2506 	br	456b4 <__alt_mem_epcs_flash_controller+0xfe0346b4>
   45a20:	12001704 	addi	r8,r2,92
   45a24:	11c016c4 	addi	r7,r2,91
   45a28:	4209883a 	add	r4,r8,r8
   45a2c:	003e9606 	br	45488 <__alt_mem_epcs_flash_controller+0xfe034488>
   45a30:	3804d1ba 	srli	r2,r7,6
   45a34:	11400e44 	addi	r5,r2,57
   45a38:	10c00e04 	addi	r3,r2,56
   45a3c:	294b883a 	add	r5,r5,r5
   45a40:	003fbc06 	br	45934 <__alt_mem_epcs_flash_controller+0xfe034934>
   45a44:	84ff5926 	beq	r16,r19,457ac <__alt_mem_epcs_flash_controller+0xfe0347ac>
   45a48:	008001b4 	movhi	r2,6
   45a4c:	10b81c04 	addi	r2,r2,-8080
   45a50:	14000217 	ldw	r16,8(r2)
   45a54:	00bfff04 	movi	r2,-4
   45a58:	80c00117 	ldw	r3,4(r16)
   45a5c:	1886703a 	and	r3,r3,r2
   45a60:	003f9106 	br	458a8 <__alt_mem_epcs_flash_controller+0xfe0348a8>
   45a64:	60800217 	ldw	r2,8(r12)
   45a68:	213fffc4 	addi	r4,r4,-1
   45a6c:	1300651e 	bne	r2,r12,45c04 <_malloc_r+0x7f4>
   45a70:	208000cc 	andi	r2,r4,3
   45a74:	633ffe04 	addi	r12,r12,-8
   45a78:	103ffa1e 	bne	r2,zero,45a64 <__alt_mem_epcs_flash_controller+0xfe034a64>
   45a7c:	98800117 	ldw	r2,4(r19)
   45a80:	0146303a 	nor	r3,zero,r5
   45a84:	1884703a 	and	r2,r3,r2
   45a88:	98800115 	stw	r2,4(r19)
   45a8c:	294b883a 	add	r5,r5,r5
   45a90:	117f2836 	bltu	r2,r5,45734 <__alt_mem_epcs_flash_controller+0xfe034734>
   45a94:	283f2726 	beq	r5,zero,45734 <__alt_mem_epcs_flash_controller+0xfe034734>
   45a98:	2886703a 	and	r3,r5,r2
   45a9c:	5809883a 	mov	r4,r11
   45aa0:	183ec31e 	bne	r3,zero,455b0 <__alt_mem_epcs_flash_controller+0xfe0345b0>
   45aa4:	294b883a 	add	r5,r5,r5
   45aa8:	2886703a 	and	r3,r5,r2
   45aac:	21000104 	addi	r4,r4,4
   45ab0:	183ffc26 	beq	r3,zero,45aa4 <__alt_mem_epcs_flash_controller+0xfe034aa4>
   45ab4:	003ebe06 	br	455b0 <__alt_mem_epcs_flash_controller+0xfe0345b0>
   45ab8:	00c05504 	movi	r3,340
   45abc:	18801236 	bltu	r3,r2,45b08 <_malloc_r+0x6f8>
   45ac0:	8804d3fa 	srli	r2,r17,15
   45ac4:	12001e04 	addi	r8,r2,120
   45ac8:	11c01dc4 	addi	r7,r2,119
   45acc:	4209883a 	add	r4,r8,r8
   45ad0:	003e6d06 	br	45488 <__alt_mem_epcs_flash_controller+0xfe034488>
   45ad4:	00c40004 	movi	r3,4096
   45ad8:	003f4606 	br	457f4 <__alt_mem_epcs_flash_controller+0xfe0347f4>
   45adc:	00800044 	movi	r2,1
   45ae0:	a0800115 	stw	r2,4(r20)
   45ae4:	003f7406 	br	458b8 <__alt_mem_epcs_flash_controller+0xfe0348b8>
   45ae8:	1805d0ba 	srai	r2,r3,2
   45aec:	01c00044 	movi	r7,1
   45af0:	30c00117 	ldw	r3,4(r6)
   45af4:	388e983a 	sll	r7,r7,r2
   45af8:	2805883a 	mov	r2,r5
   45afc:	38c6b03a 	or	r3,r7,r3
   45b00:	30c00115 	stw	r3,4(r6)
   45b04:	003f9b06 	br	45974 <__alt_mem_epcs_flash_controller+0xfe034974>
   45b08:	00c15504 	movi	r3,1364
   45b0c:	18801a36 	bltu	r3,r2,45b78 <_malloc_r+0x768>
   45b10:	8804d4ba 	srli	r2,r17,18
   45b14:	12001f44 	addi	r8,r2,125
   45b18:	11c01f04 	addi	r7,r2,124
   45b1c:	4209883a 	add	r4,r8,r8
   45b20:	003e5906 	br	45488 <__alt_mem_epcs_flash_controller+0xfe034488>
   45b24:	ad400404 	addi	r21,r21,16
   45b28:	003f1706 	br	45788 <__alt_mem_epcs_flash_controller+0xfe034788>
   45b2c:	00c01504 	movi	r3,84
   45b30:	18802336 	bltu	r3,r2,45bc0 <_malloc_r+0x7b0>
   45b34:	3804d33a 	srli	r2,r7,12
   45b38:	11401bc4 	addi	r5,r2,111
   45b3c:	10c01b84 	addi	r3,r2,110
   45b40:	294b883a 	add	r5,r5,r5
   45b44:	003f7b06 	br	45934 <__alt_mem_epcs_flash_controller+0xfe034934>
   45b48:	9c000217 	ldw	r16,8(r19)
   45b4c:	00bfff04 	movi	r2,-4
   45b50:	80c00117 	ldw	r3,4(r16)
   45b54:	1886703a 	and	r3,r3,r2
   45b58:	003f5306 	br	458a8 <__alt_mem_epcs_flash_controller+0xfe0348a8>
   45b5c:	3083ffcc 	andi	r2,r6,4095
   45b60:	103f181e 	bne	r2,zero,457c4 <__alt_mem_epcs_flash_controller+0xfe0347c4>
   45b64:	99000217 	ldw	r4,8(r19)
   45b68:	b545883a 	add	r2,r22,r21
   45b6c:	10800054 	ori	r2,r2,1
   45b70:	20800115 	stw	r2,4(r4)
   45b74:	003f3e06 	br	45870 <__alt_mem_epcs_flash_controller+0xfe034870>
   45b78:	01003f84 	movi	r4,254
   45b7c:	02001fc4 	movi	r8,127
   45b80:	01c01f84 	movi	r7,126
   45b84:	003e4006 	br	45488 <__alt_mem_epcs_flash_controller+0xfe034488>
   45b88:	008001b4 	movhi	r2,6
   45b8c:	10be3904 	addi	r2,r2,-1820
   45b90:	15000015 	stw	r20,0(r2)
   45b94:	003f1106 	br	457dc <__alt_mem_epcs_flash_controller+0xfe0347dc>
   45b98:	00800044 	movi	r2,1
   45b9c:	002b883a 	mov	r21,zero
   45ba0:	003f1f06 	br	45820 <__alt_mem_epcs_flash_controller+0xfe034820>
   45ba4:	81400204 	addi	r5,r16,8
   45ba8:	9009883a 	mov	r4,r18
   45bac:	004dd5c0 	call	4dd5c <_free_r>
   45bb0:	008001b4 	movhi	r2,6
   45bb4:	108aab04 	addi	r2,r2,10924
   45bb8:	10c00017 	ldw	r3,0(r2)
   45bbc:	003f2c06 	br	45870 <__alt_mem_epcs_flash_controller+0xfe034870>
   45bc0:	00c05504 	movi	r3,340
   45bc4:	18800536 	bltu	r3,r2,45bdc <_malloc_r+0x7cc>
   45bc8:	3804d3fa 	srli	r2,r7,15
   45bcc:	11401e04 	addi	r5,r2,120
   45bd0:	10c01dc4 	addi	r3,r2,119
   45bd4:	294b883a 	add	r5,r5,r5
   45bd8:	003f5606 	br	45934 <__alt_mem_epcs_flash_controller+0xfe034934>
   45bdc:	00c15504 	movi	r3,1364
   45be0:	18800536 	bltu	r3,r2,45bf8 <_malloc_r+0x7e8>
   45be4:	3804d4ba 	srli	r2,r7,18
   45be8:	11401f44 	addi	r5,r2,125
   45bec:	10c01f04 	addi	r3,r2,124
   45bf0:	294b883a 	add	r5,r5,r5
   45bf4:	003f4f06 	br	45934 <__alt_mem_epcs_flash_controller+0xfe034934>
   45bf8:	01403f84 	movi	r5,254
   45bfc:	00c01f84 	movi	r3,126
   45c00:	003f4c06 	br	45934 <__alt_mem_epcs_flash_controller+0xfe034934>
   45c04:	98800117 	ldw	r2,4(r19)
   45c08:	003fa006 	br	45a8c <__alt_mem_epcs_flash_controller+0xfe034a8c>
   45c0c:	8808d0fa 	srli	r4,r17,3
   45c10:	20800044 	addi	r2,r4,1
   45c14:	1085883a 	add	r2,r2,r2
   45c18:	003e9006 	br	4565c <__alt_mem_epcs_flash_controller+0xfe03465c>

00045c1c <memcmp>:
   45c1c:	01c000c4 	movi	r7,3
   45c20:	3980192e 	bgeu	r7,r6,45c88 <memcmp+0x6c>
   45c24:	2144b03a 	or	r2,r4,r5
   45c28:	11c4703a 	and	r2,r2,r7
   45c2c:	10000f26 	beq	r2,zero,45c6c <memcmp+0x50>
   45c30:	20800003 	ldbu	r2,0(r4)
   45c34:	28c00003 	ldbu	r3,0(r5)
   45c38:	10c0151e 	bne	r2,r3,45c90 <memcmp+0x74>
   45c3c:	31bfff84 	addi	r6,r6,-2
   45c40:	01ffffc4 	movi	r7,-1
   45c44:	00000406 	br	45c58 <memcmp+0x3c>
   45c48:	20800003 	ldbu	r2,0(r4)
   45c4c:	28c00003 	ldbu	r3,0(r5)
   45c50:	31bfffc4 	addi	r6,r6,-1
   45c54:	10c00e1e 	bne	r2,r3,45c90 <memcmp+0x74>
   45c58:	21000044 	addi	r4,r4,1
   45c5c:	29400044 	addi	r5,r5,1
   45c60:	31fff91e 	bne	r6,r7,45c48 <__alt_mem_epcs_flash_controller+0xfe034c48>
   45c64:	0005883a 	mov	r2,zero
   45c68:	f800283a 	ret
   45c6c:	20c00017 	ldw	r3,0(r4)
   45c70:	28800017 	ldw	r2,0(r5)
   45c74:	18bfee1e 	bne	r3,r2,45c30 <__alt_mem_epcs_flash_controller+0xfe034c30>
   45c78:	31bfff04 	addi	r6,r6,-4
   45c7c:	21000104 	addi	r4,r4,4
   45c80:	29400104 	addi	r5,r5,4
   45c84:	39bff936 	bltu	r7,r6,45c6c <__alt_mem_epcs_flash_controller+0xfe034c6c>
   45c88:	303fe91e 	bne	r6,zero,45c30 <__alt_mem_epcs_flash_controller+0xfe034c30>
   45c8c:	003ff506 	br	45c64 <__alt_mem_epcs_flash_controller+0xfe034c64>
   45c90:	10c5c83a 	sub	r2,r2,r3
   45c94:	f800283a 	ret

00045c98 <memcpy>:
   45c98:	defffd04 	addi	sp,sp,-12
   45c9c:	dfc00215 	stw	ra,8(sp)
   45ca0:	dc400115 	stw	r17,4(sp)
   45ca4:	dc000015 	stw	r16,0(sp)
   45ca8:	00c003c4 	movi	r3,15
   45cac:	2005883a 	mov	r2,r4
   45cb0:	1980452e 	bgeu	r3,r6,45dc8 <memcpy+0x130>
   45cb4:	2906b03a 	or	r3,r5,r4
   45cb8:	18c000cc 	andi	r3,r3,3
   45cbc:	1800441e 	bne	r3,zero,45dd0 <memcpy+0x138>
   45cc0:	347ffc04 	addi	r17,r6,-16
   45cc4:	8822d13a 	srli	r17,r17,4
   45cc8:	28c00104 	addi	r3,r5,4
   45ccc:	23400104 	addi	r13,r4,4
   45cd0:	8820913a 	slli	r16,r17,4
   45cd4:	2b000204 	addi	r12,r5,8
   45cd8:	22c00204 	addi	r11,r4,8
   45cdc:	84000504 	addi	r16,r16,20
   45ce0:	2a800304 	addi	r10,r5,12
   45ce4:	22400304 	addi	r9,r4,12
   45ce8:	2c21883a 	add	r16,r5,r16
   45cec:	2811883a 	mov	r8,r5
   45cf0:	200f883a 	mov	r7,r4
   45cf4:	41000017 	ldw	r4,0(r8)
   45cf8:	1fc00017 	ldw	ra,0(r3)
   45cfc:	63c00017 	ldw	r15,0(r12)
   45d00:	39000015 	stw	r4,0(r7)
   45d04:	53800017 	ldw	r14,0(r10)
   45d08:	6fc00015 	stw	ra,0(r13)
   45d0c:	5bc00015 	stw	r15,0(r11)
   45d10:	4b800015 	stw	r14,0(r9)
   45d14:	18c00404 	addi	r3,r3,16
   45d18:	39c00404 	addi	r7,r7,16
   45d1c:	42000404 	addi	r8,r8,16
   45d20:	6b400404 	addi	r13,r13,16
   45d24:	63000404 	addi	r12,r12,16
   45d28:	5ac00404 	addi	r11,r11,16
   45d2c:	52800404 	addi	r10,r10,16
   45d30:	4a400404 	addi	r9,r9,16
   45d34:	1c3fef1e 	bne	r3,r16,45cf4 <__alt_mem_epcs_flash_controller+0xfe034cf4>
   45d38:	89c00044 	addi	r7,r17,1
   45d3c:	380e913a 	slli	r7,r7,4
   45d40:	310003cc 	andi	r4,r6,15
   45d44:	02c000c4 	movi	r11,3
   45d48:	11c7883a 	add	r3,r2,r7
   45d4c:	29cb883a 	add	r5,r5,r7
   45d50:	5900212e 	bgeu	r11,r4,45dd8 <memcpy+0x140>
   45d54:	1813883a 	mov	r9,r3
   45d58:	2811883a 	mov	r8,r5
   45d5c:	200f883a 	mov	r7,r4
   45d60:	42800017 	ldw	r10,0(r8)
   45d64:	4a400104 	addi	r9,r9,4
   45d68:	39ffff04 	addi	r7,r7,-4
   45d6c:	4abfff15 	stw	r10,-4(r9)
   45d70:	42000104 	addi	r8,r8,4
   45d74:	59fffa36 	bltu	r11,r7,45d60 <__alt_mem_epcs_flash_controller+0xfe034d60>
   45d78:	213fff04 	addi	r4,r4,-4
   45d7c:	2008d0ba 	srli	r4,r4,2
   45d80:	318000cc 	andi	r6,r6,3
   45d84:	21000044 	addi	r4,r4,1
   45d88:	2109883a 	add	r4,r4,r4
   45d8c:	2109883a 	add	r4,r4,r4
   45d90:	1907883a 	add	r3,r3,r4
   45d94:	290b883a 	add	r5,r5,r4
   45d98:	30000626 	beq	r6,zero,45db4 <memcpy+0x11c>
   45d9c:	198d883a 	add	r6,r3,r6
   45da0:	29c00003 	ldbu	r7,0(r5)
   45da4:	18c00044 	addi	r3,r3,1
   45da8:	29400044 	addi	r5,r5,1
   45dac:	19ffffc5 	stb	r7,-1(r3)
   45db0:	19bffb1e 	bne	r3,r6,45da0 <__alt_mem_epcs_flash_controller+0xfe034da0>
   45db4:	dfc00217 	ldw	ra,8(sp)
   45db8:	dc400117 	ldw	r17,4(sp)
   45dbc:	dc000017 	ldw	r16,0(sp)
   45dc0:	dec00304 	addi	sp,sp,12
   45dc4:	f800283a 	ret
   45dc8:	2007883a 	mov	r3,r4
   45dcc:	003ff206 	br	45d98 <__alt_mem_epcs_flash_controller+0xfe034d98>
   45dd0:	2007883a 	mov	r3,r4
   45dd4:	003ff106 	br	45d9c <__alt_mem_epcs_flash_controller+0xfe034d9c>
   45dd8:	200d883a 	mov	r6,r4
   45ddc:	003fee06 	br	45d98 <__alt_mem_epcs_flash_controller+0xfe034d98>

00045de0 <memmove>:
   45de0:	2005883a 	mov	r2,r4
   45de4:	29000b2e 	bgeu	r5,r4,45e14 <memmove+0x34>
   45de8:	298f883a 	add	r7,r5,r6
   45dec:	21c0092e 	bgeu	r4,r7,45e14 <memmove+0x34>
   45df0:	2187883a 	add	r3,r4,r6
   45df4:	198bc83a 	sub	r5,r3,r6
   45df8:	30004826 	beq	r6,zero,45f1c <memmove+0x13c>
   45dfc:	39ffffc4 	addi	r7,r7,-1
   45e00:	39000003 	ldbu	r4,0(r7)
   45e04:	18ffffc4 	addi	r3,r3,-1
   45e08:	19000005 	stb	r4,0(r3)
   45e0c:	28fffb1e 	bne	r5,r3,45dfc <__alt_mem_epcs_flash_controller+0xfe034dfc>
   45e10:	f800283a 	ret
   45e14:	00c003c4 	movi	r3,15
   45e18:	1980412e 	bgeu	r3,r6,45f20 <memmove+0x140>
   45e1c:	2886b03a 	or	r3,r5,r2
   45e20:	18c000cc 	andi	r3,r3,3
   45e24:	1800401e 	bne	r3,zero,45f28 <memmove+0x148>
   45e28:	33fffc04 	addi	r15,r6,-16
   45e2c:	781ed13a 	srli	r15,r15,4
   45e30:	28c00104 	addi	r3,r5,4
   45e34:	13400104 	addi	r13,r2,4
   45e38:	781c913a 	slli	r14,r15,4
   45e3c:	2b000204 	addi	r12,r5,8
   45e40:	12c00204 	addi	r11,r2,8
   45e44:	73800504 	addi	r14,r14,20
   45e48:	2a800304 	addi	r10,r5,12
   45e4c:	12400304 	addi	r9,r2,12
   45e50:	2b9d883a 	add	r14,r5,r14
   45e54:	2811883a 	mov	r8,r5
   45e58:	100f883a 	mov	r7,r2
   45e5c:	41000017 	ldw	r4,0(r8)
   45e60:	39c00404 	addi	r7,r7,16
   45e64:	18c00404 	addi	r3,r3,16
   45e68:	393ffc15 	stw	r4,-16(r7)
   45e6c:	193ffc17 	ldw	r4,-16(r3)
   45e70:	6b400404 	addi	r13,r13,16
   45e74:	5ac00404 	addi	r11,r11,16
   45e78:	693ffc15 	stw	r4,-16(r13)
   45e7c:	61000017 	ldw	r4,0(r12)
   45e80:	4a400404 	addi	r9,r9,16
   45e84:	42000404 	addi	r8,r8,16
   45e88:	593ffc15 	stw	r4,-16(r11)
   45e8c:	51000017 	ldw	r4,0(r10)
   45e90:	63000404 	addi	r12,r12,16
   45e94:	52800404 	addi	r10,r10,16
   45e98:	493ffc15 	stw	r4,-16(r9)
   45e9c:	1bbfef1e 	bne	r3,r14,45e5c <__alt_mem_epcs_flash_controller+0xfe034e5c>
   45ea0:	79000044 	addi	r4,r15,1
   45ea4:	2008913a 	slli	r4,r4,4
   45ea8:	328003cc 	andi	r10,r6,15
   45eac:	02c000c4 	movi	r11,3
   45eb0:	1107883a 	add	r3,r2,r4
   45eb4:	290b883a 	add	r5,r5,r4
   45eb8:	5a801e2e 	bgeu	r11,r10,45f34 <memmove+0x154>
   45ebc:	1813883a 	mov	r9,r3
   45ec0:	2811883a 	mov	r8,r5
   45ec4:	500f883a 	mov	r7,r10
   45ec8:	41000017 	ldw	r4,0(r8)
   45ecc:	4a400104 	addi	r9,r9,4
   45ed0:	39ffff04 	addi	r7,r7,-4
   45ed4:	493fff15 	stw	r4,-4(r9)
   45ed8:	42000104 	addi	r8,r8,4
   45edc:	59fffa36 	bltu	r11,r7,45ec8 <__alt_mem_epcs_flash_controller+0xfe034ec8>
   45ee0:	513fff04 	addi	r4,r10,-4
   45ee4:	2008d0ba 	srli	r4,r4,2
   45ee8:	318000cc 	andi	r6,r6,3
   45eec:	21000044 	addi	r4,r4,1
   45ef0:	2109883a 	add	r4,r4,r4
   45ef4:	2109883a 	add	r4,r4,r4
   45ef8:	1907883a 	add	r3,r3,r4
   45efc:	290b883a 	add	r5,r5,r4
   45f00:	30000b26 	beq	r6,zero,45f30 <memmove+0x150>
   45f04:	198d883a 	add	r6,r3,r6
   45f08:	29c00003 	ldbu	r7,0(r5)
   45f0c:	18c00044 	addi	r3,r3,1
   45f10:	29400044 	addi	r5,r5,1
   45f14:	19ffffc5 	stb	r7,-1(r3)
   45f18:	19bffb1e 	bne	r3,r6,45f08 <__alt_mem_epcs_flash_controller+0xfe034f08>
   45f1c:	f800283a 	ret
   45f20:	1007883a 	mov	r3,r2
   45f24:	003ff606 	br	45f00 <__alt_mem_epcs_flash_controller+0xfe034f00>
   45f28:	1007883a 	mov	r3,r2
   45f2c:	003ff506 	br	45f04 <__alt_mem_epcs_flash_controller+0xfe034f04>
   45f30:	f800283a 	ret
   45f34:	500d883a 	mov	r6,r10
   45f38:	003ff106 	br	45f00 <__alt_mem_epcs_flash_controller+0xfe034f00>

00045f3c <memset>:
   45f3c:	20c000cc 	andi	r3,r4,3
   45f40:	2005883a 	mov	r2,r4
   45f44:	18004426 	beq	r3,zero,46058 <memset+0x11c>
   45f48:	31ffffc4 	addi	r7,r6,-1
   45f4c:	30004026 	beq	r6,zero,46050 <memset+0x114>
   45f50:	2813883a 	mov	r9,r5
   45f54:	200d883a 	mov	r6,r4
   45f58:	2007883a 	mov	r3,r4
   45f5c:	00000406 	br	45f70 <memset+0x34>
   45f60:	3a3fffc4 	addi	r8,r7,-1
   45f64:	31800044 	addi	r6,r6,1
   45f68:	38003926 	beq	r7,zero,46050 <memset+0x114>
   45f6c:	400f883a 	mov	r7,r8
   45f70:	18c00044 	addi	r3,r3,1
   45f74:	32400005 	stb	r9,0(r6)
   45f78:	1a0000cc 	andi	r8,r3,3
   45f7c:	403ff81e 	bne	r8,zero,45f60 <__alt_mem_epcs_flash_controller+0xfe034f60>
   45f80:	010000c4 	movi	r4,3
   45f84:	21c02d2e 	bgeu	r4,r7,4603c <memset+0x100>
   45f88:	29003fcc 	andi	r4,r5,255
   45f8c:	200c923a 	slli	r6,r4,8
   45f90:	3108b03a 	or	r4,r6,r4
   45f94:	200c943a 	slli	r6,r4,16
   45f98:	218cb03a 	or	r6,r4,r6
   45f9c:	010003c4 	movi	r4,15
   45fa0:	21c0182e 	bgeu	r4,r7,46004 <memset+0xc8>
   45fa4:	3b3ffc04 	addi	r12,r7,-16
   45fa8:	6018d13a 	srli	r12,r12,4
   45fac:	1a000104 	addi	r8,r3,4
   45fb0:	1ac00204 	addi	r11,r3,8
   45fb4:	6008913a 	slli	r4,r12,4
   45fb8:	1a800304 	addi	r10,r3,12
   45fbc:	1813883a 	mov	r9,r3
   45fc0:	21000504 	addi	r4,r4,20
   45fc4:	1909883a 	add	r4,r3,r4
   45fc8:	49800015 	stw	r6,0(r9)
   45fcc:	41800015 	stw	r6,0(r8)
   45fd0:	59800015 	stw	r6,0(r11)
   45fd4:	51800015 	stw	r6,0(r10)
   45fd8:	42000404 	addi	r8,r8,16
   45fdc:	4a400404 	addi	r9,r9,16
   45fe0:	5ac00404 	addi	r11,r11,16
   45fe4:	52800404 	addi	r10,r10,16
   45fe8:	413ff71e 	bne	r8,r4,45fc8 <__alt_mem_epcs_flash_controller+0xfe034fc8>
   45fec:	63000044 	addi	r12,r12,1
   45ff0:	6018913a 	slli	r12,r12,4
   45ff4:	39c003cc 	andi	r7,r7,15
   45ff8:	010000c4 	movi	r4,3
   45ffc:	1b07883a 	add	r3,r3,r12
   46000:	21c00e2e 	bgeu	r4,r7,4603c <memset+0x100>
   46004:	1813883a 	mov	r9,r3
   46008:	3811883a 	mov	r8,r7
   4600c:	010000c4 	movi	r4,3
   46010:	49800015 	stw	r6,0(r9)
   46014:	423fff04 	addi	r8,r8,-4
   46018:	4a400104 	addi	r9,r9,4
   4601c:	223ffc36 	bltu	r4,r8,46010 <__alt_mem_epcs_flash_controller+0xfe035010>
   46020:	393fff04 	addi	r4,r7,-4
   46024:	2008d0ba 	srli	r4,r4,2
   46028:	39c000cc 	andi	r7,r7,3
   4602c:	21000044 	addi	r4,r4,1
   46030:	2109883a 	add	r4,r4,r4
   46034:	2109883a 	add	r4,r4,r4
   46038:	1907883a 	add	r3,r3,r4
   4603c:	38000526 	beq	r7,zero,46054 <memset+0x118>
   46040:	19cf883a 	add	r7,r3,r7
   46044:	19400005 	stb	r5,0(r3)
   46048:	18c00044 	addi	r3,r3,1
   4604c:	38fffd1e 	bne	r7,r3,46044 <__alt_mem_epcs_flash_controller+0xfe035044>
   46050:	f800283a 	ret
   46054:	f800283a 	ret
   46058:	2007883a 	mov	r3,r4
   4605c:	300f883a 	mov	r7,r6
   46060:	003fc706 	br	45f80 <__alt_mem_epcs_flash_controller+0xfe034f80>

00046064 <_printf_r>:
   46064:	defffd04 	addi	sp,sp,-12
   46068:	2805883a 	mov	r2,r5
   4606c:	dfc00015 	stw	ra,0(sp)
   46070:	d9800115 	stw	r6,4(sp)
   46074:	d9c00215 	stw	r7,8(sp)
   46078:	21400217 	ldw	r5,8(r4)
   4607c:	d9c00104 	addi	r7,sp,4
   46080:	100d883a 	mov	r6,r2
   46084:	00497c40 	call	497c4 <___vfprintf_internal_r>
   46088:	dfc00017 	ldw	ra,0(sp)
   4608c:	dec00304 	addi	sp,sp,12
   46090:	f800283a 	ret

00046094 <printf>:
   46094:	defffc04 	addi	sp,sp,-16
   46098:	dfc00015 	stw	ra,0(sp)
   4609c:	d9400115 	stw	r5,4(sp)
   460a0:	d9800215 	stw	r6,8(sp)
   460a4:	d9c00315 	stw	r7,12(sp)
   460a8:	008001b4 	movhi	r2,6
   460ac:	10be3804 	addi	r2,r2,-1824
   460b0:	10800017 	ldw	r2,0(r2)
   460b4:	200b883a 	mov	r5,r4
   460b8:	d9800104 	addi	r6,sp,4
   460bc:	11000217 	ldw	r4,8(r2)
   460c0:	004b9bc0 	call	4b9bc <__vfprintf_internal>
   460c4:	dfc00017 	ldw	ra,0(sp)
   460c8:	dec00404 	addi	sp,sp,16
   460cc:	f800283a 	ret

000460d0 <_putchar_r>:
   460d0:	21800217 	ldw	r6,8(r4)
   460d4:	004fa841 	jmpi	4fa84 <_putc_r>

000460d8 <putchar>:
   460d8:	008001b4 	movhi	r2,6
   460dc:	10be3804 	addi	r2,r2,-1824
   460e0:	200b883a 	mov	r5,r4
   460e4:	11000017 	ldw	r4,0(r2)
   460e8:	21800217 	ldw	r6,8(r4)
   460ec:	004fa841 	jmpi	4fa84 <_putc_r>

000460f0 <_puts_r>:
   460f0:	defff604 	addi	sp,sp,-40
   460f4:	dc000715 	stw	r16,28(sp)
   460f8:	2021883a 	mov	r16,r4
   460fc:	2809883a 	mov	r4,r5
   46100:	dc400815 	stw	r17,32(sp)
   46104:	dfc00915 	stw	ra,36(sp)
   46108:	2823883a 	mov	r17,r5
   4610c:	0046ef40 	call	46ef4 <strlen>
   46110:	10c00044 	addi	r3,r2,1
   46114:	d8800115 	stw	r2,4(sp)
   46118:	008001b4 	movhi	r2,6
   4611c:	10b56804 	addi	r2,r2,-10848
   46120:	d8800215 	stw	r2,8(sp)
   46124:	00800044 	movi	r2,1
   46128:	d8800315 	stw	r2,12(sp)
   4612c:	00800084 	movi	r2,2
   46130:	dc400015 	stw	r17,0(sp)
   46134:	d8c00615 	stw	r3,24(sp)
   46138:	dec00415 	stw	sp,16(sp)
   4613c:	d8800515 	stw	r2,20(sp)
   46140:	80000226 	beq	r16,zero,4614c <_puts_r+0x5c>
   46144:	80800e17 	ldw	r2,56(r16)
   46148:	10001426 	beq	r2,zero,4619c <_puts_r+0xac>
   4614c:	81400217 	ldw	r5,8(r16)
   46150:	2880030b 	ldhu	r2,12(r5)
   46154:	10c8000c 	andi	r3,r2,8192
   46158:	1800061e 	bne	r3,zero,46174 <_puts_r+0x84>
   4615c:	29001917 	ldw	r4,100(r5)
   46160:	00f7ffc4 	movi	r3,-8193
   46164:	10880014 	ori	r2,r2,8192
   46168:	20c6703a 	and	r3,r4,r3
   4616c:	2880030d 	sth	r2,12(r5)
   46170:	28c01915 	stw	r3,100(r5)
   46174:	d9800404 	addi	r6,sp,16
   46178:	8009883a 	mov	r4,r16
   4617c:	004e06c0 	call	4e06c <__sfvwrite_r>
   46180:	1000091e 	bne	r2,zero,461a8 <_puts_r+0xb8>
   46184:	00800284 	movi	r2,10
   46188:	dfc00917 	ldw	ra,36(sp)
   4618c:	dc400817 	ldw	r17,32(sp)
   46190:	dc000717 	ldw	r16,28(sp)
   46194:	dec00a04 	addi	sp,sp,40
   46198:	f800283a 	ret
   4619c:	8009883a 	mov	r4,r16
   461a0:	004dbe80 	call	4dbe8 <__sinit>
   461a4:	003fe906 	br	4614c <__alt_mem_epcs_flash_controller+0xfe03514c>
   461a8:	00bfffc4 	movi	r2,-1
   461ac:	003ff606 	br	46188 <__alt_mem_epcs_flash_controller+0xfe035188>

000461b0 <puts>:
   461b0:	008001b4 	movhi	r2,6
   461b4:	10be3804 	addi	r2,r2,-1824
   461b8:	200b883a 	mov	r5,r4
   461bc:	11000017 	ldw	r4,0(r2)
   461c0:	00460f01 	jmpi	460f0 <_puts_r>

000461c4 <srand>:
   461c4:	008001b4 	movhi	r2,6
   461c8:	10be3804 	addi	r2,r2,-1824
   461cc:	10800017 	ldw	r2,0(r2)
   461d0:	11002915 	stw	r4,164(r2)
   461d4:	10002a15 	stw	zero,168(r2)
   461d8:	f800283a 	ret

000461dc <rand>:
   461dc:	008001b4 	movhi	r2,6
   461e0:	defffe04 	addi	sp,sp,-8
   461e4:	10be3804 	addi	r2,r2,-1824
   461e8:	dc000015 	stw	r16,0(sp)
   461ec:	14000017 	ldw	r16,0(r2)
   461f0:	dfc00115 	stw	ra,4(sp)
   461f4:	01932574 	movhi	r6,19605
   461f8:	81002917 	ldw	r4,164(r16)
   461fc:	81402a17 	ldw	r5,168(r16)
   46200:	01d614b4 	movhi	r7,22610
   46204:	319fcb44 	addi	r6,r6,32557
   46208:	39fd0b44 	addi	r7,r7,-3027
   4620c:	00429400 	call	42940 <__muldi3>
   46210:	11000044 	addi	r4,r2,1
   46214:	2085803a 	cmpltu	r2,r4,r2
   46218:	10c7883a 	add	r3,r2,r3
   4621c:	00a00034 	movhi	r2,32768
   46220:	10bfffc4 	addi	r2,r2,-1
   46224:	1884703a 	and	r2,r3,r2
   46228:	81002915 	stw	r4,164(r16)
   4622c:	80c02a15 	stw	r3,168(r16)
   46230:	dfc00117 	ldw	ra,4(sp)
   46234:	dc000017 	ldw	r16,0(sp)
   46238:	dec00204 	addi	sp,sp,8
   4623c:	f800283a 	ret

00046240 <realloc>:
   46240:	008001b4 	movhi	r2,6
   46244:	10be3804 	addi	r2,r2,-1824
   46248:	280d883a 	mov	r6,r5
   4624c:	200b883a 	mov	r5,r4
   46250:	11000017 	ldw	r4,0(r2)
   46254:	00462581 	jmpi	46258 <_realloc_r>

00046258 <_realloc_r>:
   46258:	defff604 	addi	sp,sp,-40
   4625c:	dc800215 	stw	r18,8(sp)
   46260:	dfc00915 	stw	ra,36(sp)
   46264:	df000815 	stw	fp,32(sp)
   46268:	ddc00715 	stw	r23,28(sp)
   4626c:	dd800615 	stw	r22,24(sp)
   46270:	dd400515 	stw	r21,20(sp)
   46274:	dd000415 	stw	r20,16(sp)
   46278:	dcc00315 	stw	r19,12(sp)
   4627c:	dc400115 	stw	r17,4(sp)
   46280:	dc000015 	stw	r16,0(sp)
   46284:	3025883a 	mov	r18,r6
   46288:	2800b726 	beq	r5,zero,46568 <_realloc_r+0x310>
   4628c:	282b883a 	mov	r21,r5
   46290:	2029883a 	mov	r20,r4
   46294:	00548d80 	call	548d8 <__malloc_lock>
   46298:	a8bfff17 	ldw	r2,-4(r21)
   4629c:	043fff04 	movi	r16,-4
   462a0:	90c002c4 	addi	r3,r18,11
   462a4:	01000584 	movi	r4,22
   462a8:	acfffe04 	addi	r19,r21,-8
   462ac:	1420703a 	and	r16,r2,r16
   462b0:	20c0332e 	bgeu	r4,r3,46380 <_realloc_r+0x128>
   462b4:	047ffe04 	movi	r17,-8
   462b8:	1c62703a 	and	r17,r3,r17
   462bc:	8807883a 	mov	r3,r17
   462c0:	88005816 	blt	r17,zero,46424 <_realloc_r+0x1cc>
   462c4:	8c805736 	bltu	r17,r18,46424 <_realloc_r+0x1cc>
   462c8:	80c0300e 	bge	r16,r3,4638c <_realloc_r+0x134>
   462cc:	070001b4 	movhi	fp,6
   462d0:	e7381c04 	addi	fp,fp,-8080
   462d4:	e1c00217 	ldw	r7,8(fp)
   462d8:	9c09883a 	add	r4,r19,r16
   462dc:	22000117 	ldw	r8,4(r4)
   462e0:	21c06326 	beq	r4,r7,46470 <_realloc_r+0x218>
   462e4:	017fff84 	movi	r5,-2
   462e8:	414a703a 	and	r5,r8,r5
   462ec:	214b883a 	add	r5,r4,r5
   462f0:	29800117 	ldw	r6,4(r5)
   462f4:	3180004c 	andi	r6,r6,1
   462f8:	30003f26 	beq	r6,zero,463f8 <_realloc_r+0x1a0>
   462fc:	1080004c 	andi	r2,r2,1
   46300:	10008326 	beq	r2,zero,46510 <_realloc_r+0x2b8>
   46304:	900b883a 	mov	r5,r18
   46308:	a009883a 	mov	r4,r20
   4630c:	00454100 	call	45410 <_malloc_r>
   46310:	1025883a 	mov	r18,r2
   46314:	10011e26 	beq	r2,zero,46790 <_realloc_r+0x538>
   46318:	a93fff17 	ldw	r4,-4(r21)
   4631c:	10fffe04 	addi	r3,r2,-8
   46320:	00bfff84 	movi	r2,-2
   46324:	2084703a 	and	r2,r4,r2
   46328:	9885883a 	add	r2,r19,r2
   4632c:	1880ee26 	beq	r3,r2,466e8 <_realloc_r+0x490>
   46330:	81bfff04 	addi	r6,r16,-4
   46334:	00800904 	movi	r2,36
   46338:	1180b836 	bltu	r2,r6,4661c <_realloc_r+0x3c4>
   4633c:	00c004c4 	movi	r3,19
   46340:	19809636 	bltu	r3,r6,4659c <_realloc_r+0x344>
   46344:	9005883a 	mov	r2,r18
   46348:	a807883a 	mov	r3,r21
   4634c:	19000017 	ldw	r4,0(r3)
   46350:	11000015 	stw	r4,0(r2)
   46354:	19000117 	ldw	r4,4(r3)
   46358:	11000115 	stw	r4,4(r2)
   4635c:	18c00217 	ldw	r3,8(r3)
   46360:	10c00215 	stw	r3,8(r2)
   46364:	a80b883a 	mov	r5,r21
   46368:	a009883a 	mov	r4,r20
   4636c:	004dd5c0 	call	4dd5c <_free_r>
   46370:	a009883a 	mov	r4,r20
   46374:	00548fc0 	call	548fc <__malloc_unlock>
   46378:	9005883a 	mov	r2,r18
   4637c:	00001206 	br	463c8 <_realloc_r+0x170>
   46380:	00c00404 	movi	r3,16
   46384:	1823883a 	mov	r17,r3
   46388:	003fce06 	br	462c4 <__alt_mem_epcs_flash_controller+0xfe0352c4>
   4638c:	a825883a 	mov	r18,r21
   46390:	8445c83a 	sub	r2,r16,r17
   46394:	00c003c4 	movi	r3,15
   46398:	18802636 	bltu	r3,r2,46434 <_realloc_r+0x1dc>
   4639c:	99800117 	ldw	r6,4(r19)
   463a0:	9c07883a 	add	r3,r19,r16
   463a4:	3180004c 	andi	r6,r6,1
   463a8:	3420b03a 	or	r16,r6,r16
   463ac:	9c000115 	stw	r16,4(r19)
   463b0:	18800117 	ldw	r2,4(r3)
   463b4:	10800054 	ori	r2,r2,1
   463b8:	18800115 	stw	r2,4(r3)
   463bc:	a009883a 	mov	r4,r20
   463c0:	00548fc0 	call	548fc <__malloc_unlock>
   463c4:	9005883a 	mov	r2,r18
   463c8:	dfc00917 	ldw	ra,36(sp)
   463cc:	df000817 	ldw	fp,32(sp)
   463d0:	ddc00717 	ldw	r23,28(sp)
   463d4:	dd800617 	ldw	r22,24(sp)
   463d8:	dd400517 	ldw	r21,20(sp)
   463dc:	dd000417 	ldw	r20,16(sp)
   463e0:	dcc00317 	ldw	r19,12(sp)
   463e4:	dc800217 	ldw	r18,8(sp)
   463e8:	dc400117 	ldw	r17,4(sp)
   463ec:	dc000017 	ldw	r16,0(sp)
   463f0:	dec00a04 	addi	sp,sp,40
   463f4:	f800283a 	ret
   463f8:	017fff04 	movi	r5,-4
   463fc:	414a703a 	and	r5,r8,r5
   46400:	814d883a 	add	r6,r16,r5
   46404:	30c01f16 	blt	r6,r3,46484 <_realloc_r+0x22c>
   46408:	20800317 	ldw	r2,12(r4)
   4640c:	20c00217 	ldw	r3,8(r4)
   46410:	a825883a 	mov	r18,r21
   46414:	3021883a 	mov	r16,r6
   46418:	18800315 	stw	r2,12(r3)
   4641c:	10c00215 	stw	r3,8(r2)
   46420:	003fdb06 	br	46390 <__alt_mem_epcs_flash_controller+0xfe035390>
   46424:	00800304 	movi	r2,12
   46428:	a0800015 	stw	r2,0(r20)
   4642c:	0005883a 	mov	r2,zero
   46430:	003fe506 	br	463c8 <__alt_mem_epcs_flash_controller+0xfe0353c8>
   46434:	98c00117 	ldw	r3,4(r19)
   46438:	9c4b883a 	add	r5,r19,r17
   4643c:	11000054 	ori	r4,r2,1
   46440:	18c0004c 	andi	r3,r3,1
   46444:	1c62b03a 	or	r17,r3,r17
   46448:	9c400115 	stw	r17,4(r19)
   4644c:	29000115 	stw	r4,4(r5)
   46450:	2885883a 	add	r2,r5,r2
   46454:	10c00117 	ldw	r3,4(r2)
   46458:	29400204 	addi	r5,r5,8
   4645c:	a009883a 	mov	r4,r20
   46460:	18c00054 	ori	r3,r3,1
   46464:	10c00115 	stw	r3,4(r2)
   46468:	004dd5c0 	call	4dd5c <_free_r>
   4646c:	003fd306 	br	463bc <__alt_mem_epcs_flash_controller+0xfe0353bc>
   46470:	017fff04 	movi	r5,-4
   46474:	414a703a 	and	r5,r8,r5
   46478:	89800404 	addi	r6,r17,16
   4647c:	8151883a 	add	r8,r16,r5
   46480:	4180590e 	bge	r8,r6,465e8 <_realloc_r+0x390>
   46484:	1080004c 	andi	r2,r2,1
   46488:	103f9e1e 	bne	r2,zero,46304 <__alt_mem_epcs_flash_controller+0xfe035304>
   4648c:	adbffe17 	ldw	r22,-8(r21)
   46490:	00bfff04 	movi	r2,-4
   46494:	9dadc83a 	sub	r22,r19,r22
   46498:	b1800117 	ldw	r6,4(r22)
   4649c:	3084703a 	and	r2,r6,r2
   464a0:	20002026 	beq	r4,zero,46524 <_realloc_r+0x2cc>
   464a4:	80af883a 	add	r23,r16,r2
   464a8:	b96f883a 	add	r23,r23,r5
   464ac:	21c05f26 	beq	r4,r7,4662c <_realloc_r+0x3d4>
   464b0:	b8c01c16 	blt	r23,r3,46524 <_realloc_r+0x2cc>
   464b4:	20800317 	ldw	r2,12(r4)
   464b8:	20c00217 	ldw	r3,8(r4)
   464bc:	81bfff04 	addi	r6,r16,-4
   464c0:	01000904 	movi	r4,36
   464c4:	18800315 	stw	r2,12(r3)
   464c8:	10c00215 	stw	r3,8(r2)
   464cc:	b0c00217 	ldw	r3,8(r22)
   464d0:	b0800317 	ldw	r2,12(r22)
   464d4:	b4800204 	addi	r18,r22,8
   464d8:	18800315 	stw	r2,12(r3)
   464dc:	10c00215 	stw	r3,8(r2)
   464e0:	21801b36 	bltu	r4,r6,46550 <_realloc_r+0x2f8>
   464e4:	008004c4 	movi	r2,19
   464e8:	1180352e 	bgeu	r2,r6,465c0 <_realloc_r+0x368>
   464ec:	a8800017 	ldw	r2,0(r21)
   464f0:	b0800215 	stw	r2,8(r22)
   464f4:	a8800117 	ldw	r2,4(r21)
   464f8:	b0800315 	stw	r2,12(r22)
   464fc:	008006c4 	movi	r2,27
   46500:	11807f36 	bltu	r2,r6,46700 <_realloc_r+0x4a8>
   46504:	b0800404 	addi	r2,r22,16
   46508:	ad400204 	addi	r21,r21,8
   4650c:	00002d06 	br	465c4 <_realloc_r+0x36c>
   46510:	adbffe17 	ldw	r22,-8(r21)
   46514:	00bfff04 	movi	r2,-4
   46518:	9dadc83a 	sub	r22,r19,r22
   4651c:	b1000117 	ldw	r4,4(r22)
   46520:	2084703a 	and	r2,r4,r2
   46524:	b03f7726 	beq	r22,zero,46304 <__alt_mem_epcs_flash_controller+0xfe035304>
   46528:	80af883a 	add	r23,r16,r2
   4652c:	b8ff7516 	blt	r23,r3,46304 <__alt_mem_epcs_flash_controller+0xfe035304>
   46530:	b0800317 	ldw	r2,12(r22)
   46534:	b0c00217 	ldw	r3,8(r22)
   46538:	81bfff04 	addi	r6,r16,-4
   4653c:	01000904 	movi	r4,36
   46540:	18800315 	stw	r2,12(r3)
   46544:	10c00215 	stw	r3,8(r2)
   46548:	b4800204 	addi	r18,r22,8
   4654c:	21bfe52e 	bgeu	r4,r6,464e4 <__alt_mem_epcs_flash_controller+0xfe0354e4>
   46550:	a80b883a 	mov	r5,r21
   46554:	9009883a 	mov	r4,r18
   46558:	0045de00 	call	45de0 <memmove>
   4655c:	b821883a 	mov	r16,r23
   46560:	b027883a 	mov	r19,r22
   46564:	003f8a06 	br	46390 <__alt_mem_epcs_flash_controller+0xfe035390>
   46568:	300b883a 	mov	r5,r6
   4656c:	dfc00917 	ldw	ra,36(sp)
   46570:	df000817 	ldw	fp,32(sp)
   46574:	ddc00717 	ldw	r23,28(sp)
   46578:	dd800617 	ldw	r22,24(sp)
   4657c:	dd400517 	ldw	r21,20(sp)
   46580:	dd000417 	ldw	r20,16(sp)
   46584:	dcc00317 	ldw	r19,12(sp)
   46588:	dc800217 	ldw	r18,8(sp)
   4658c:	dc400117 	ldw	r17,4(sp)
   46590:	dc000017 	ldw	r16,0(sp)
   46594:	dec00a04 	addi	sp,sp,40
   46598:	00454101 	jmpi	45410 <_malloc_r>
   4659c:	a8c00017 	ldw	r3,0(r21)
   465a0:	90c00015 	stw	r3,0(r18)
   465a4:	a8c00117 	ldw	r3,4(r21)
   465a8:	90c00115 	stw	r3,4(r18)
   465ac:	00c006c4 	movi	r3,27
   465b0:	19804536 	bltu	r3,r6,466c8 <_realloc_r+0x470>
   465b4:	90800204 	addi	r2,r18,8
   465b8:	a8c00204 	addi	r3,r21,8
   465bc:	003f6306 	br	4634c <__alt_mem_epcs_flash_controller+0xfe03534c>
   465c0:	9005883a 	mov	r2,r18
   465c4:	a8c00017 	ldw	r3,0(r21)
   465c8:	b821883a 	mov	r16,r23
   465cc:	b027883a 	mov	r19,r22
   465d0:	10c00015 	stw	r3,0(r2)
   465d4:	a8c00117 	ldw	r3,4(r21)
   465d8:	10c00115 	stw	r3,4(r2)
   465dc:	a8c00217 	ldw	r3,8(r21)
   465e0:	10c00215 	stw	r3,8(r2)
   465e4:	003f6a06 	br	46390 <__alt_mem_epcs_flash_controller+0xfe035390>
   465e8:	9c67883a 	add	r19,r19,r17
   465ec:	4445c83a 	sub	r2,r8,r17
   465f0:	e4c00215 	stw	r19,8(fp)
   465f4:	10800054 	ori	r2,r2,1
   465f8:	98800115 	stw	r2,4(r19)
   465fc:	a8bfff17 	ldw	r2,-4(r21)
   46600:	a009883a 	mov	r4,r20
   46604:	1080004c 	andi	r2,r2,1
   46608:	1462b03a 	or	r17,r2,r17
   4660c:	ac7fff15 	stw	r17,-4(r21)
   46610:	00548fc0 	call	548fc <__malloc_unlock>
   46614:	a805883a 	mov	r2,r21
   46618:	003f6b06 	br	463c8 <__alt_mem_epcs_flash_controller+0xfe0353c8>
   4661c:	a80b883a 	mov	r5,r21
   46620:	9009883a 	mov	r4,r18
   46624:	0045de00 	call	45de0 <memmove>
   46628:	003f4e06 	br	46364 <__alt_mem_epcs_flash_controller+0xfe035364>
   4662c:	89000404 	addi	r4,r17,16
   46630:	b93fbc16 	blt	r23,r4,46524 <__alt_mem_epcs_flash_controller+0xfe035524>
   46634:	b0800317 	ldw	r2,12(r22)
   46638:	b0c00217 	ldw	r3,8(r22)
   4663c:	81bfff04 	addi	r6,r16,-4
   46640:	01000904 	movi	r4,36
   46644:	18800315 	stw	r2,12(r3)
   46648:	10c00215 	stw	r3,8(r2)
   4664c:	b4800204 	addi	r18,r22,8
   46650:	21804336 	bltu	r4,r6,46760 <_realloc_r+0x508>
   46654:	008004c4 	movi	r2,19
   46658:	11803f2e 	bgeu	r2,r6,46758 <_realloc_r+0x500>
   4665c:	a8800017 	ldw	r2,0(r21)
   46660:	b0800215 	stw	r2,8(r22)
   46664:	a8800117 	ldw	r2,4(r21)
   46668:	b0800315 	stw	r2,12(r22)
   4666c:	008006c4 	movi	r2,27
   46670:	11803f36 	bltu	r2,r6,46770 <_realloc_r+0x518>
   46674:	b0800404 	addi	r2,r22,16
   46678:	ad400204 	addi	r21,r21,8
   4667c:	a8c00017 	ldw	r3,0(r21)
   46680:	10c00015 	stw	r3,0(r2)
   46684:	a8c00117 	ldw	r3,4(r21)
   46688:	10c00115 	stw	r3,4(r2)
   4668c:	a8c00217 	ldw	r3,8(r21)
   46690:	10c00215 	stw	r3,8(r2)
   46694:	b447883a 	add	r3,r22,r17
   46698:	bc45c83a 	sub	r2,r23,r17
   4669c:	e0c00215 	stw	r3,8(fp)
   466a0:	10800054 	ori	r2,r2,1
   466a4:	18800115 	stw	r2,4(r3)
   466a8:	b0800117 	ldw	r2,4(r22)
   466ac:	a009883a 	mov	r4,r20
   466b0:	1080004c 	andi	r2,r2,1
   466b4:	1462b03a 	or	r17,r2,r17
   466b8:	b4400115 	stw	r17,4(r22)
   466bc:	00548fc0 	call	548fc <__malloc_unlock>
   466c0:	9005883a 	mov	r2,r18
   466c4:	003f4006 	br	463c8 <__alt_mem_epcs_flash_controller+0xfe0353c8>
   466c8:	a8c00217 	ldw	r3,8(r21)
   466cc:	90c00215 	stw	r3,8(r18)
   466d0:	a8c00317 	ldw	r3,12(r21)
   466d4:	90c00315 	stw	r3,12(r18)
   466d8:	30801126 	beq	r6,r2,46720 <_realloc_r+0x4c8>
   466dc:	90800404 	addi	r2,r18,16
   466e0:	a8c00404 	addi	r3,r21,16
   466e4:	003f1906 	br	4634c <__alt_mem_epcs_flash_controller+0xfe03534c>
   466e8:	90ffff17 	ldw	r3,-4(r18)
   466ec:	00bfff04 	movi	r2,-4
   466f0:	a825883a 	mov	r18,r21
   466f4:	1884703a 	and	r2,r3,r2
   466f8:	80a1883a 	add	r16,r16,r2
   466fc:	003f2406 	br	46390 <__alt_mem_epcs_flash_controller+0xfe035390>
   46700:	a8800217 	ldw	r2,8(r21)
   46704:	b0800415 	stw	r2,16(r22)
   46708:	a8800317 	ldw	r2,12(r21)
   4670c:	b0800515 	stw	r2,20(r22)
   46710:	31000a26 	beq	r6,r4,4673c <_realloc_r+0x4e4>
   46714:	b0800604 	addi	r2,r22,24
   46718:	ad400404 	addi	r21,r21,16
   4671c:	003fa906 	br	465c4 <__alt_mem_epcs_flash_controller+0xfe0355c4>
   46720:	a9000417 	ldw	r4,16(r21)
   46724:	90800604 	addi	r2,r18,24
   46728:	a8c00604 	addi	r3,r21,24
   4672c:	91000415 	stw	r4,16(r18)
   46730:	a9000517 	ldw	r4,20(r21)
   46734:	91000515 	stw	r4,20(r18)
   46738:	003f0406 	br	4634c <__alt_mem_epcs_flash_controller+0xfe03534c>
   4673c:	a8c00417 	ldw	r3,16(r21)
   46740:	ad400604 	addi	r21,r21,24
   46744:	b0800804 	addi	r2,r22,32
   46748:	b0c00615 	stw	r3,24(r22)
   4674c:	a8ffff17 	ldw	r3,-4(r21)
   46750:	b0c00715 	stw	r3,28(r22)
   46754:	003f9b06 	br	465c4 <__alt_mem_epcs_flash_controller+0xfe0355c4>
   46758:	9005883a 	mov	r2,r18
   4675c:	003fc706 	br	4667c <__alt_mem_epcs_flash_controller+0xfe03567c>
   46760:	a80b883a 	mov	r5,r21
   46764:	9009883a 	mov	r4,r18
   46768:	0045de00 	call	45de0 <memmove>
   4676c:	003fc906 	br	46694 <__alt_mem_epcs_flash_controller+0xfe035694>
   46770:	a8800217 	ldw	r2,8(r21)
   46774:	b0800415 	stw	r2,16(r22)
   46778:	a8800317 	ldw	r2,12(r21)
   4677c:	b0800515 	stw	r2,20(r22)
   46780:	31000726 	beq	r6,r4,467a0 <_realloc_r+0x548>
   46784:	b0800604 	addi	r2,r22,24
   46788:	ad400404 	addi	r21,r21,16
   4678c:	003fbb06 	br	4667c <__alt_mem_epcs_flash_controller+0xfe03567c>
   46790:	a009883a 	mov	r4,r20
   46794:	00548fc0 	call	548fc <__malloc_unlock>
   46798:	0005883a 	mov	r2,zero
   4679c:	003f0a06 	br	463c8 <__alt_mem_epcs_flash_controller+0xfe0353c8>
   467a0:	a8c00417 	ldw	r3,16(r21)
   467a4:	ad400604 	addi	r21,r21,24
   467a8:	b0800804 	addi	r2,r22,32
   467ac:	b0c00615 	stw	r3,24(r22)
   467b0:	a8ffff17 	ldw	r3,-4(r21)
   467b4:	b0c00715 	stw	r3,28(r22)
   467b8:	003fb006 	br	4667c <__alt_mem_epcs_flash_controller+0xfe03567c>

000467bc <_sbrk_r>:
   467bc:	defffd04 	addi	sp,sp,-12
   467c0:	dc000015 	stw	r16,0(sp)
   467c4:	040001b4 	movhi	r16,6
   467c8:	dc400115 	stw	r17,4(sp)
   467cc:	84069c04 	addi	r16,r16,6768
   467d0:	2023883a 	mov	r17,r4
   467d4:	2809883a 	mov	r4,r5
   467d8:	dfc00215 	stw	ra,8(sp)
   467dc:	80000015 	stw	zero,0(r16)
   467e0:	0054abc0 	call	54abc <sbrk>
   467e4:	00ffffc4 	movi	r3,-1
   467e8:	10c00526 	beq	r2,r3,46800 <_sbrk_r+0x44>
   467ec:	dfc00217 	ldw	ra,8(sp)
   467f0:	dc400117 	ldw	r17,4(sp)
   467f4:	dc000017 	ldw	r16,0(sp)
   467f8:	dec00304 	addi	sp,sp,12
   467fc:	f800283a 	ret
   46800:	80c00017 	ldw	r3,0(r16)
   46804:	183ff926 	beq	r3,zero,467ec <__alt_mem_epcs_flash_controller+0xfe0357ec>
   46808:	88c00015 	stw	r3,0(r17)
   4680c:	003ff706 	br	467ec <__alt_mem_epcs_flash_controller+0xfe0357ec>

00046810 <_init_signal_r>:
   46810:	2080b717 	ldw	r2,732(r4)
   46814:	10000226 	beq	r2,zero,46820 <_init_signal_r+0x10>
   46818:	0005883a 	mov	r2,zero
   4681c:	f800283a 	ret
   46820:	defffe04 	addi	sp,sp,-8
   46824:	01402004 	movi	r5,128
   46828:	dc000015 	stw	r16,0(sp)
   4682c:	dfc00115 	stw	ra,4(sp)
   46830:	2021883a 	mov	r16,r4
   46834:	00454100 	call	45410 <_malloc_r>
   46838:	8080b715 	stw	r2,732(r16)
   4683c:	10000d26 	beq	r2,zero,46874 <_init_signal_r+0x64>
   46840:	0007883a 	mov	r3,zero
   46844:	01002004 	movi	r4,128
   46848:	00000106 	br	46850 <_init_signal_r+0x40>
   4684c:	8080b717 	ldw	r2,732(r16)
   46850:	10c5883a 	add	r2,r2,r3
   46854:	10000015 	stw	zero,0(r2)
   46858:	18c00104 	addi	r3,r3,4
   4685c:	193ffb1e 	bne	r3,r4,4684c <__alt_mem_epcs_flash_controller+0xfe03584c>
   46860:	0005883a 	mov	r2,zero
   46864:	dfc00117 	ldw	ra,4(sp)
   46868:	dc000017 	ldw	r16,0(sp)
   4686c:	dec00204 	addi	sp,sp,8
   46870:	f800283a 	ret
   46874:	00bfffc4 	movi	r2,-1
   46878:	003ffa06 	br	46864 <__alt_mem_epcs_flash_controller+0xfe035864>

0004687c <_signal_r>:
   4687c:	00c007c4 	movi	r3,31
   46880:	19401536 	bltu	r3,r5,468d8 <_signal_r+0x5c>
   46884:	2080b717 	ldw	r2,732(r4)
   46888:	defffc04 	addi	sp,sp,-16
   4688c:	dc800215 	stw	r18,8(sp)
   46890:	dc400115 	stw	r17,4(sp)
   46894:	dc000015 	stw	r16,0(sp)
   46898:	dfc00315 	stw	ra,12(sp)
   4689c:	3023883a 	mov	r17,r6
   468a0:	2021883a 	mov	r16,r4
   468a4:	2825883a 	mov	r18,r5
   468a8:	10000f26 	beq	r2,zero,468e8 <_signal_r+0x6c>
   468ac:	948b883a 	add	r5,r18,r18
   468b0:	294b883a 	add	r5,r5,r5
   468b4:	114b883a 	add	r5,r2,r5
   468b8:	28800017 	ldw	r2,0(r5)
   468bc:	2c400015 	stw	r17,0(r5)
   468c0:	dfc00317 	ldw	ra,12(sp)
   468c4:	dc800217 	ldw	r18,8(sp)
   468c8:	dc400117 	ldw	r17,4(sp)
   468cc:	dc000017 	ldw	r16,0(sp)
   468d0:	dec00404 	addi	sp,sp,16
   468d4:	f800283a 	ret
   468d8:	00c00584 	movi	r3,22
   468dc:	20c00015 	stw	r3,0(r4)
   468e0:	00bfffc4 	movi	r2,-1
   468e4:	f800283a 	ret
   468e8:	00468100 	call	46810 <_init_signal_r>
   468ec:	1000021e 	bne	r2,zero,468f8 <_signal_r+0x7c>
   468f0:	8080b717 	ldw	r2,732(r16)
   468f4:	003fed06 	br	468ac <__alt_mem_epcs_flash_controller+0xfe0358ac>
   468f8:	00bfffc4 	movi	r2,-1
   468fc:	003ff006 	br	468c0 <__alt_mem_epcs_flash_controller+0xfe0358c0>

00046900 <_raise_r>:
   46900:	008007c4 	movi	r2,31
   46904:	11402936 	bltu	r2,r5,469ac <_raise_r+0xac>
   46908:	20c0b717 	ldw	r3,732(r4)
   4690c:	defffd04 	addi	sp,sp,-12
   46910:	dc400115 	stw	r17,4(sp)
   46914:	dc000015 	stw	r16,0(sp)
   46918:	dfc00215 	stw	ra,8(sp)
   4691c:	2021883a 	mov	r16,r4
   46920:	2823883a 	mov	r17,r5
   46924:	18001726 	beq	r3,zero,46984 <_raise_r+0x84>
   46928:	2945883a 	add	r2,r5,r5
   4692c:	1085883a 	add	r2,r2,r2
   46930:	1887883a 	add	r3,r3,r2
   46934:	19800017 	ldw	r6,0(r3)
   46938:	30001226 	beq	r6,zero,46984 <_raise_r+0x84>
   4693c:	00800044 	movi	r2,1
   46940:	30800e26 	beq	r6,r2,4697c <_raise_r+0x7c>
   46944:	013fffc4 	movi	r4,-1
   46948:	31000926 	beq	r6,r4,46970 <_raise_r+0x70>
   4694c:	18000015 	stw	zero,0(r3)
   46950:	2809883a 	mov	r4,r5
   46954:	303ee83a 	callr	r6
   46958:	0005883a 	mov	r2,zero
   4695c:	dfc00217 	ldw	ra,8(sp)
   46960:	dc400117 	ldw	r17,4(sp)
   46964:	dc000017 	ldw	r16,0(sp)
   46968:	dec00304 	addi	sp,sp,12
   4696c:	f800283a 	ret
   46970:	00c00584 	movi	r3,22
   46974:	80c00015 	stw	r3,0(r16)
   46978:	003ff806 	br	4695c <__alt_mem_epcs_flash_controller+0xfe03595c>
   4697c:	0005883a 	mov	r2,zero
   46980:	003ff606 	br	4695c <__alt_mem_epcs_flash_controller+0xfe03595c>
   46984:	8009883a 	mov	r4,r16
   46988:	0046b100 	call	46b10 <_getpid_r>
   4698c:	880d883a 	mov	r6,r17
   46990:	100b883a 	mov	r5,r2
   46994:	8009883a 	mov	r4,r16
   46998:	dfc00217 	ldw	ra,8(sp)
   4699c:	dc400117 	ldw	r17,4(sp)
   469a0:	dc000017 	ldw	r16,0(sp)
   469a4:	dec00304 	addi	sp,sp,12
   469a8:	0046ab41 	jmpi	46ab4 <_kill_r>
   469ac:	00800584 	movi	r2,22
   469b0:	20800015 	stw	r2,0(r4)
   469b4:	00bfffc4 	movi	r2,-1
   469b8:	f800283a 	ret

000469bc <__sigtramp_r>:
   469bc:	008007c4 	movi	r2,31
   469c0:	11402436 	bltu	r2,r5,46a54 <__sigtramp_r+0x98>
   469c4:	20c0b717 	ldw	r3,732(r4)
   469c8:	defffd04 	addi	sp,sp,-12
   469cc:	dc400115 	stw	r17,4(sp)
   469d0:	dc000015 	stw	r16,0(sp)
   469d4:	dfc00215 	stw	ra,8(sp)
   469d8:	2021883a 	mov	r16,r4
   469dc:	2823883a 	mov	r17,r5
   469e0:	18001826 	beq	r3,zero,46a44 <__sigtramp_r+0x88>
   469e4:	8c45883a 	add	r2,r17,r17
   469e8:	1085883a 	add	r2,r2,r2
   469ec:	1885883a 	add	r2,r3,r2
   469f0:	10c00017 	ldw	r3,0(r2)
   469f4:	18001126 	beq	r3,zero,46a3c <__sigtramp_r+0x80>
   469f8:	013fffc4 	movi	r4,-1
   469fc:	19000d26 	beq	r3,r4,46a34 <__sigtramp_r+0x78>
   46a00:	01000044 	movi	r4,1
   46a04:	19000926 	beq	r3,r4,46a2c <__sigtramp_r+0x70>
   46a08:	10000015 	stw	zero,0(r2)
   46a0c:	8809883a 	mov	r4,r17
   46a10:	183ee83a 	callr	r3
   46a14:	0005883a 	mov	r2,zero
   46a18:	dfc00217 	ldw	ra,8(sp)
   46a1c:	dc400117 	ldw	r17,4(sp)
   46a20:	dc000017 	ldw	r16,0(sp)
   46a24:	dec00304 	addi	sp,sp,12
   46a28:	f800283a 	ret
   46a2c:	008000c4 	movi	r2,3
   46a30:	003ff906 	br	46a18 <__alt_mem_epcs_flash_controller+0xfe035a18>
   46a34:	00800084 	movi	r2,2
   46a38:	003ff706 	br	46a18 <__alt_mem_epcs_flash_controller+0xfe035a18>
   46a3c:	00800044 	movi	r2,1
   46a40:	003ff506 	br	46a18 <__alt_mem_epcs_flash_controller+0xfe035a18>
   46a44:	00468100 	call	46810 <_init_signal_r>
   46a48:	1000041e 	bne	r2,zero,46a5c <__sigtramp_r+0xa0>
   46a4c:	80c0b717 	ldw	r3,732(r16)
   46a50:	003fe406 	br	469e4 <__alt_mem_epcs_flash_controller+0xfe0359e4>
   46a54:	00bfffc4 	movi	r2,-1
   46a58:	f800283a 	ret
   46a5c:	00bfffc4 	movi	r2,-1
   46a60:	003fed06 	br	46a18 <__alt_mem_epcs_flash_controller+0xfe035a18>

00046a64 <raise>:
   46a64:	008001b4 	movhi	r2,6
   46a68:	10be3804 	addi	r2,r2,-1824
   46a6c:	200b883a 	mov	r5,r4
   46a70:	11000017 	ldw	r4,0(r2)
   46a74:	00469001 	jmpi	46900 <_raise_r>

00046a78 <signal>:
   46a78:	008001b4 	movhi	r2,6
   46a7c:	10be3804 	addi	r2,r2,-1824
   46a80:	280d883a 	mov	r6,r5
   46a84:	200b883a 	mov	r5,r4
   46a88:	11000017 	ldw	r4,0(r2)
   46a8c:	004687c1 	jmpi	4687c <_signal_r>

00046a90 <_init_signal>:
   46a90:	008001b4 	movhi	r2,6
   46a94:	10be3804 	addi	r2,r2,-1824
   46a98:	11000017 	ldw	r4,0(r2)
   46a9c:	00468101 	jmpi	46810 <_init_signal_r>

00046aa0 <__sigtramp>:
   46aa0:	008001b4 	movhi	r2,6
   46aa4:	10be3804 	addi	r2,r2,-1824
   46aa8:	200b883a 	mov	r5,r4
   46aac:	11000017 	ldw	r4,0(r2)
   46ab0:	00469bc1 	jmpi	469bc <__sigtramp_r>

00046ab4 <_kill_r>:
   46ab4:	defffd04 	addi	sp,sp,-12
   46ab8:	2805883a 	mov	r2,r5
   46abc:	dc000015 	stw	r16,0(sp)
   46ac0:	040001b4 	movhi	r16,6
   46ac4:	dc400115 	stw	r17,4(sp)
   46ac8:	84069c04 	addi	r16,r16,6768
   46acc:	2023883a 	mov	r17,r4
   46ad0:	300b883a 	mov	r5,r6
   46ad4:	1009883a 	mov	r4,r2
   46ad8:	dfc00215 	stw	ra,8(sp)
   46adc:	80000015 	stw	zero,0(r16)
   46ae0:	00545300 	call	54530 <kill>
   46ae4:	00ffffc4 	movi	r3,-1
   46ae8:	10c00526 	beq	r2,r3,46b00 <_kill_r+0x4c>
   46aec:	dfc00217 	ldw	ra,8(sp)
   46af0:	dc400117 	ldw	r17,4(sp)
   46af4:	dc000017 	ldw	r16,0(sp)
   46af8:	dec00304 	addi	sp,sp,12
   46afc:	f800283a 	ret
   46b00:	80c00017 	ldw	r3,0(r16)
   46b04:	183ff926 	beq	r3,zero,46aec <__alt_mem_epcs_flash_controller+0xfe035aec>
   46b08:	88c00015 	stw	r3,0(r17)
   46b0c:	003ff706 	br	46aec <__alt_mem_epcs_flash_controller+0xfe035aec>

00046b10 <_getpid_r>:
   46b10:	0053f601 	jmpi	53f60 <getpid>

00046b14 <_sprintf_r>:
   46b14:	deffe404 	addi	sp,sp,-112
   46b18:	2807883a 	mov	r3,r5
   46b1c:	dfc01a15 	stw	ra,104(sp)
   46b20:	d9c01b15 	stw	r7,108(sp)
   46b24:	00a00034 	movhi	r2,32768
   46b28:	10bfffc4 	addi	r2,r2,-1
   46b2c:	02008204 	movi	r8,520
   46b30:	d8800215 	stw	r2,8(sp)
   46b34:	d8800515 	stw	r2,20(sp)
   46b38:	d9c01b04 	addi	r7,sp,108
   46b3c:	d80b883a 	mov	r5,sp
   46b40:	00bfffc4 	movi	r2,-1
   46b44:	d8c00015 	stw	r3,0(sp)
   46b48:	d8c00415 	stw	r3,16(sp)
   46b4c:	da00030d 	sth	r8,12(sp)
   46b50:	d880038d 	sth	r2,14(sp)
   46b54:	00475840 	call	47584 <___svfprintf_internal_r>
   46b58:	d8c00017 	ldw	r3,0(sp)
   46b5c:	18000005 	stb	zero,0(r3)
   46b60:	dfc01a17 	ldw	ra,104(sp)
   46b64:	dec01c04 	addi	sp,sp,112
   46b68:	f800283a 	ret

00046b6c <sprintf>:
   46b6c:	deffe304 	addi	sp,sp,-116
   46b70:	2007883a 	mov	r3,r4
   46b74:	dfc01a15 	stw	ra,104(sp)
   46b78:	d9801b15 	stw	r6,108(sp)
   46b7c:	d9c01c15 	stw	r7,112(sp)
   46b80:	010001b4 	movhi	r4,6
   46b84:	213e3804 	addi	r4,r4,-1824
   46b88:	21000017 	ldw	r4,0(r4)
   46b8c:	00a00034 	movhi	r2,32768
   46b90:	10bfffc4 	addi	r2,r2,-1
   46b94:	280d883a 	mov	r6,r5
   46b98:	02008204 	movi	r8,520
   46b9c:	d8800215 	stw	r2,8(sp)
   46ba0:	d8800515 	stw	r2,20(sp)
   46ba4:	d9c01b04 	addi	r7,sp,108
   46ba8:	d80b883a 	mov	r5,sp
   46bac:	00bfffc4 	movi	r2,-1
   46bb0:	d8c00015 	stw	r3,0(sp)
   46bb4:	d8c00415 	stw	r3,16(sp)
   46bb8:	da00030d 	sth	r8,12(sp)
   46bbc:	d880038d 	sth	r2,14(sp)
   46bc0:	00475840 	call	47584 <___svfprintf_internal_r>
   46bc4:	d8c00017 	ldw	r3,0(sp)
   46bc8:	18000005 	stb	zero,0(r3)
   46bcc:	dfc01a17 	ldw	ra,104(sp)
   46bd0:	dec01d04 	addi	sp,sp,116
   46bd4:	f800283a 	ret

00046bd8 <strchr>:
   46bd8:	2ac03fcc 	andi	r11,r5,255
   46bdc:	2813883a 	mov	r9,r5
   46be0:	208000cc 	andi	r2,r4,3
   46be4:	58003726 	beq	r11,zero,46cc4 <strchr+0xec>
   46be8:	10000b26 	beq	r2,zero,46c18 <strchr+0x40>
   46bec:	20800003 	ldbu	r2,0(r4)
   46bf0:	10003226 	beq	r2,zero,46cbc <strchr+0xe4>
   46bf4:	28c03fcc 	andi	r3,r5,255
   46bf8:	5880041e 	bne	r11,r2,46c0c <strchr+0x34>
   46bfc:	00004d06 	br	46d34 <strchr+0x15c>
   46c00:	20800003 	ldbu	r2,0(r4)
   46c04:	10002d26 	beq	r2,zero,46cbc <strchr+0xe4>
   46c08:	18804a26 	beq	r3,r2,46d34 <strchr+0x15c>
   46c0c:	21000044 	addi	r4,r4,1
   46c10:	208000cc 	andi	r2,r4,3
   46c14:	103ffa1e 	bne	r2,zero,46c00 <__alt_mem_epcs_flash_controller+0xfe035c00>
   46c18:	29403fcc 	andi	r5,r5,255
   46c1c:	2814923a 	slli	r10,r5,8
   46c20:	20800017 	ldw	r2,0(r4)
   46c24:	01bfbff4 	movhi	r6,65279
   46c28:	2a8ab03a 	or	r5,r5,r10
   46c2c:	2814943a 	slli	r10,r5,16
   46c30:	31bfbfc4 	addi	r6,r6,-257
   46c34:	119b883a 	add	r13,r2,r6
   46c38:	5154b03a 	or	r10,r10,r5
   46c3c:	008e303a 	nor	r7,zero,r2
   46c40:	5084f03a 	xor	r2,r10,r2
   46c44:	1191883a 	add	r8,r2,r6
   46c48:	0086303a 	nor	r3,zero,r2
   46c4c:	03202074 	movhi	r12,32897
   46c50:	69ca703a 	and	r5,r13,r7
   46c54:	40c4703a 	and	r2,r8,r3
   46c58:	63202004 	addi	r12,r12,-32640
   46c5c:	2884b03a 	or	r2,r5,r2
   46c60:	1304703a 	and	r2,r2,r12
   46c64:	10000c1e 	bne	r2,zero,46c98 <strchr+0xc0>
   46c68:	21000104 	addi	r4,r4,4
   46c6c:	20c00017 	ldw	r3,0(r4)
   46c70:	50c4f03a 	xor	r2,r10,r3
   46c74:	1991883a 	add	r8,r3,r6
   46c78:	00ca303a 	nor	r5,zero,r3
   46c7c:	118f883a 	add	r7,r2,r6
   46c80:	0086303a 	nor	r3,zero,r2
   46c84:	414a703a 	and	r5,r8,r5
   46c88:	38c4703a 	and	r2,r7,r3
   46c8c:	2884b03a 	or	r2,r5,r2
   46c90:	1304703a 	and	r2,r2,r12
   46c94:	103ff426 	beq	r2,zero,46c68 <__alt_mem_epcs_flash_controller+0xfe035c68>
   46c98:	20800003 	ldbu	r2,0(r4)
   46c9c:	10000726 	beq	r2,zero,46cbc <strchr+0xe4>
   46ca0:	58802426 	beq	r11,r2,46d34 <strchr+0x15c>
   46ca4:	48c03fcc 	andi	r3,r9,255
   46ca8:	00000106 	br	46cb0 <strchr+0xd8>
   46cac:	18802126 	beq	r3,r2,46d34 <strchr+0x15c>
   46cb0:	21000044 	addi	r4,r4,1
   46cb4:	20800003 	ldbu	r2,0(r4)
   46cb8:	103ffc1e 	bne	r2,zero,46cac <__alt_mem_epcs_flash_controller+0xfe035cac>
   46cbc:	0005883a 	mov	r2,zero
   46cc0:	f800283a 	ret
   46cc4:	10000526 	beq	r2,zero,46cdc <strchr+0x104>
   46cc8:	20800003 	ldbu	r2,0(r4)
   46ccc:	10001926 	beq	r2,zero,46d34 <strchr+0x15c>
   46cd0:	21000044 	addi	r4,r4,1
   46cd4:	208000cc 	andi	r2,r4,3
   46cd8:	103ffb1e 	bne	r2,zero,46cc8 <__alt_mem_epcs_flash_controller+0xfe035cc8>
   46cdc:	20800017 	ldw	r2,0(r4)
   46ce0:	01bfbff4 	movhi	r6,65279
   46ce4:	31bfbfc4 	addi	r6,r6,-257
   46ce8:	0086303a 	nor	r3,zero,r2
   46cec:	01602074 	movhi	r5,32897
   46cf0:	1185883a 	add	r2,r2,r6
   46cf4:	29602004 	addi	r5,r5,-32640
   46cf8:	10c4703a 	and	r2,r2,r3
   46cfc:	1144703a 	and	r2,r2,r5
   46d00:	1000071e 	bne	r2,zero,46d20 <strchr+0x148>
   46d04:	21000104 	addi	r4,r4,4
   46d08:	20800017 	ldw	r2,0(r4)
   46d0c:	1187883a 	add	r3,r2,r6
   46d10:	0084303a 	nor	r2,zero,r2
   46d14:	1884703a 	and	r2,r3,r2
   46d18:	1144703a 	and	r2,r2,r5
   46d1c:	103ff926 	beq	r2,zero,46d04 <__alt_mem_epcs_flash_controller+0xfe035d04>
   46d20:	20800003 	ldbu	r2,0(r4)
   46d24:	10000326 	beq	r2,zero,46d34 <strchr+0x15c>
   46d28:	21000044 	addi	r4,r4,1
   46d2c:	20800003 	ldbu	r2,0(r4)
   46d30:	103ffd1e 	bne	r2,zero,46d28 <__alt_mem_epcs_flash_controller+0xfe035d28>
   46d34:	2005883a 	mov	r2,r4
   46d38:	f800283a 	ret

00046d3c <strcmp>:
   46d3c:	2144b03a 	or	r2,r4,r5
   46d40:	108000cc 	andi	r2,r2,3
   46d44:	1000171e 	bne	r2,zero,46da4 <strcmp+0x68>
   46d48:	20800017 	ldw	r2,0(r4)
   46d4c:	28c00017 	ldw	r3,0(r5)
   46d50:	10c0141e 	bne	r2,r3,46da4 <strcmp+0x68>
   46d54:	027fbff4 	movhi	r9,65279
   46d58:	4a7fbfc4 	addi	r9,r9,-257
   46d5c:	0086303a 	nor	r3,zero,r2
   46d60:	02202074 	movhi	r8,32897
   46d64:	1245883a 	add	r2,r2,r9
   46d68:	42202004 	addi	r8,r8,-32640
   46d6c:	10c4703a 	and	r2,r2,r3
   46d70:	1204703a 	and	r2,r2,r8
   46d74:	10000226 	beq	r2,zero,46d80 <strcmp+0x44>
   46d78:	00002306 	br	46e08 <strcmp+0xcc>
   46d7c:	1000221e 	bne	r2,zero,46e08 <strcmp+0xcc>
   46d80:	21000104 	addi	r4,r4,4
   46d84:	20c00017 	ldw	r3,0(r4)
   46d88:	29400104 	addi	r5,r5,4
   46d8c:	29800017 	ldw	r6,0(r5)
   46d90:	1a4f883a 	add	r7,r3,r9
   46d94:	00c4303a 	nor	r2,zero,r3
   46d98:	3884703a 	and	r2,r7,r2
   46d9c:	1204703a 	and	r2,r2,r8
   46da0:	19bff626 	beq	r3,r6,46d7c <__alt_mem_epcs_flash_controller+0xfe035d7c>
   46da4:	20800003 	ldbu	r2,0(r4)
   46da8:	10c03fcc 	andi	r3,r2,255
   46dac:	18c0201c 	xori	r3,r3,128
   46db0:	18ffe004 	addi	r3,r3,-128
   46db4:	18000c26 	beq	r3,zero,46de8 <strcmp+0xac>
   46db8:	29800007 	ldb	r6,0(r5)
   46dbc:	19800326 	beq	r3,r6,46dcc <strcmp+0x90>
   46dc0:	00001306 	br	46e10 <strcmp+0xd4>
   46dc4:	29800007 	ldb	r6,0(r5)
   46dc8:	11800b1e 	bne	r2,r6,46df8 <strcmp+0xbc>
   46dcc:	21000044 	addi	r4,r4,1
   46dd0:	20c00003 	ldbu	r3,0(r4)
   46dd4:	29400044 	addi	r5,r5,1
   46dd8:	18803fcc 	andi	r2,r3,255
   46ddc:	1080201c 	xori	r2,r2,128
   46de0:	10bfe004 	addi	r2,r2,-128
   46de4:	103ff71e 	bne	r2,zero,46dc4 <__alt_mem_epcs_flash_controller+0xfe035dc4>
   46de8:	0007883a 	mov	r3,zero
   46dec:	28800003 	ldbu	r2,0(r5)
   46df0:	1885c83a 	sub	r2,r3,r2
   46df4:	f800283a 	ret
   46df8:	28800003 	ldbu	r2,0(r5)
   46dfc:	18c03fcc 	andi	r3,r3,255
   46e00:	1885c83a 	sub	r2,r3,r2
   46e04:	f800283a 	ret
   46e08:	0005883a 	mov	r2,zero
   46e0c:	f800283a 	ret
   46e10:	10c03fcc 	andi	r3,r2,255
   46e14:	003ff506 	br	46dec <__alt_mem_epcs_flash_controller+0xfe035dec>

00046e18 <strcpy>:
   46e18:	2906b03a 	or	r3,r5,r4
   46e1c:	18c000cc 	andi	r3,r3,3
   46e20:	2005883a 	mov	r2,r4
   46e24:	1800161e 	bne	r3,zero,46e80 <strcpy+0x68>
   46e28:	29c00017 	ldw	r7,0(r5)
   46e2c:	02ffbff4 	movhi	r11,65279
   46e30:	5affbfc4 	addi	r11,r11,-257
   46e34:	02a02074 	movhi	r10,32897
   46e38:	01c6303a 	nor	r3,zero,r7
   46e3c:	3ac9883a 	add	r4,r7,r11
   46e40:	52a02004 	addi	r10,r10,-32640
   46e44:	20c6703a 	and	r3,r4,r3
   46e48:	1a86703a 	and	r3,r3,r10
   46e4c:	18000c1e 	bne	r3,zero,46e80 <strcpy+0x68>
   46e50:	1011883a 	mov	r8,r2
   46e54:	41c00015 	stw	r7,0(r8)
   46e58:	29400104 	addi	r5,r5,4
   46e5c:	29c00017 	ldw	r7,0(r5)
   46e60:	41800104 	addi	r6,r8,4
   46e64:	3011883a 	mov	r8,r6
   46e68:	3ad3883a 	add	r9,r7,r11
   46e6c:	01c6303a 	nor	r3,zero,r7
   46e70:	48c6703a 	and	r3,r9,r3
   46e74:	1a86703a 	and	r3,r3,r10
   46e78:	183ff626 	beq	r3,zero,46e54 <__alt_mem_epcs_flash_controller+0xfe035e54>
   46e7c:	00000106 	br	46e84 <strcpy+0x6c>
   46e80:	100d883a 	mov	r6,r2
   46e84:	28c00003 	ldbu	r3,0(r5)
   46e88:	31800044 	addi	r6,r6,1
   46e8c:	29400044 	addi	r5,r5,1
   46e90:	30ffffc5 	stb	r3,-1(r6)
   46e94:	18c03fcc 	andi	r3,r3,255
   46e98:	18c0201c 	xori	r3,r3,128
   46e9c:	18ffe004 	addi	r3,r3,-128
   46ea0:	183ff81e 	bne	r3,zero,46e84 <__alt_mem_epcs_flash_controller+0xfe035e84>
   46ea4:	f800283a 	ret

00046ea8 <strcspn>:
   46ea8:	21c00007 	ldb	r7,0(r4)
   46eac:	38000f26 	beq	r7,zero,46eec <strcspn+0x44>
   46eb0:	2a000007 	ldb	r8,0(r5)
   46eb4:	2005883a 	mov	r2,r4
   46eb8:	40000726 	beq	r8,zero,46ed8 <strcspn+0x30>
   46ebc:	3a000926 	beq	r7,r8,46ee4 <strcspn+0x3c>
   46ec0:	2807883a 	mov	r3,r5
   46ec4:	00000106 	br	46ecc <strcspn+0x24>
   46ec8:	31c00626 	beq	r6,r7,46ee4 <strcspn+0x3c>
   46ecc:	18c00044 	addi	r3,r3,1
   46ed0:	19800007 	ldb	r6,0(r3)
   46ed4:	303ffc1e 	bne	r6,zero,46ec8 <__alt_mem_epcs_flash_controller+0xfe035ec8>
   46ed8:	10800044 	addi	r2,r2,1
   46edc:	11c00007 	ldb	r7,0(r2)
   46ee0:	383ff51e 	bne	r7,zero,46eb8 <__alt_mem_epcs_flash_controller+0xfe035eb8>
   46ee4:	1105c83a 	sub	r2,r2,r4
   46ee8:	f800283a 	ret
   46eec:	0005883a 	mov	r2,zero
   46ef0:	f800283a 	ret

00046ef4 <strlen>:
   46ef4:	208000cc 	andi	r2,r4,3
   46ef8:	10002026 	beq	r2,zero,46f7c <strlen+0x88>
   46efc:	20800007 	ldb	r2,0(r4)
   46f00:	10002026 	beq	r2,zero,46f84 <strlen+0x90>
   46f04:	2005883a 	mov	r2,r4
   46f08:	00000206 	br	46f14 <strlen+0x20>
   46f0c:	10c00007 	ldb	r3,0(r2)
   46f10:	18001826 	beq	r3,zero,46f74 <strlen+0x80>
   46f14:	10800044 	addi	r2,r2,1
   46f18:	10c000cc 	andi	r3,r2,3
   46f1c:	183ffb1e 	bne	r3,zero,46f0c <__alt_mem_epcs_flash_controller+0xfe035f0c>
   46f20:	10c00017 	ldw	r3,0(r2)
   46f24:	01ffbff4 	movhi	r7,65279
   46f28:	39ffbfc4 	addi	r7,r7,-257
   46f2c:	00ca303a 	nor	r5,zero,r3
   46f30:	01a02074 	movhi	r6,32897
   46f34:	19c7883a 	add	r3,r3,r7
   46f38:	31a02004 	addi	r6,r6,-32640
   46f3c:	1946703a 	and	r3,r3,r5
   46f40:	1986703a 	and	r3,r3,r6
   46f44:	1800091e 	bne	r3,zero,46f6c <strlen+0x78>
   46f48:	10800104 	addi	r2,r2,4
   46f4c:	10c00017 	ldw	r3,0(r2)
   46f50:	19cb883a 	add	r5,r3,r7
   46f54:	00c6303a 	nor	r3,zero,r3
   46f58:	28c6703a 	and	r3,r5,r3
   46f5c:	1986703a 	and	r3,r3,r6
   46f60:	183ff926 	beq	r3,zero,46f48 <__alt_mem_epcs_flash_controller+0xfe035f48>
   46f64:	00000106 	br	46f6c <strlen+0x78>
   46f68:	10800044 	addi	r2,r2,1
   46f6c:	10c00007 	ldb	r3,0(r2)
   46f70:	183ffd1e 	bne	r3,zero,46f68 <__alt_mem_epcs_flash_controller+0xfe035f68>
   46f74:	1105c83a 	sub	r2,r2,r4
   46f78:	f800283a 	ret
   46f7c:	2005883a 	mov	r2,r4
   46f80:	003fe706 	br	46f20 <__alt_mem_epcs_flash_controller+0xfe035f20>
   46f84:	0005883a 	mov	r2,zero
   46f88:	f800283a 	ret

00046f8c <strncmp>:
   46f8c:	30003126 	beq	r6,zero,47054 <strncmp+0xc8>
   46f90:	2144b03a 	or	r2,r4,r5
   46f94:	108000cc 	andi	r2,r2,3
   46f98:	10001e1e 	bne	r2,zero,47014 <strncmp+0x88>
   46f9c:	024000c4 	movi	r9,3
   46fa0:	49801c2e 	bgeu	r9,r6,47014 <strncmp+0x88>
   46fa4:	20800017 	ldw	r2,0(r4)
   46fa8:	28c00017 	ldw	r3,0(r5)
   46fac:	10c0191e 	bne	r2,r3,47014 <strncmp+0x88>
   46fb0:	31bfff04 	addi	r6,r6,-4
   46fb4:	30002726 	beq	r6,zero,47054 <strncmp+0xc8>
   46fb8:	02ffbff4 	movhi	r11,65279
   46fbc:	5affbfc4 	addi	r11,r11,-257
   46fc0:	0086303a 	nor	r3,zero,r2
   46fc4:	02a02074 	movhi	r10,32897
   46fc8:	12c5883a 	add	r2,r2,r11
   46fcc:	52a02004 	addi	r10,r10,-32640
   46fd0:	10c4703a 	and	r2,r2,r3
   46fd4:	1284703a 	and	r2,r2,r10
   46fd8:	10000b26 	beq	r2,zero,47008 <strncmp+0x7c>
   46fdc:	00001d06 	br	47054 <strncmp+0xc8>
   46fe0:	20c00017 	ldw	r3,0(r4)
   46fe4:	29c00017 	ldw	r7,0(r5)
   46fe8:	1ad1883a 	add	r8,r3,r11
   46fec:	00c4303a 	nor	r2,zero,r3
   46ff0:	4084703a 	and	r2,r8,r2
   46ff4:	1284703a 	and	r2,r2,r10
   46ff8:	19c0061e 	bne	r3,r7,47014 <strncmp+0x88>
   46ffc:	31bfff04 	addi	r6,r6,-4
   47000:	30001426 	beq	r6,zero,47054 <strncmp+0xc8>
   47004:	1000131e 	bne	r2,zero,47054 <strncmp+0xc8>
   47008:	21000104 	addi	r4,r4,4
   4700c:	29400104 	addi	r5,r5,4
   47010:	49bff336 	bltu	r9,r6,46fe0 <__alt_mem_epcs_flash_controller+0xfe035fe0>
   47014:	28800007 	ldb	r2,0(r5)
   47018:	20c00007 	ldb	r3,0(r4)
   4701c:	31bfffc4 	addi	r6,r6,-1
   47020:	10c0081e 	bne	r2,r3,47044 <strncmp+0xb8>
   47024:	30000b26 	beq	r6,zero,47054 <strncmp+0xc8>
   47028:	10000a26 	beq	r2,zero,47054 <strncmp+0xc8>
   4702c:	21000044 	addi	r4,r4,1
   47030:	29400044 	addi	r5,r5,1
   47034:	20800007 	ldb	r2,0(r4)
   47038:	28c00007 	ldb	r3,0(r5)
   4703c:	31bfffc4 	addi	r6,r6,-1
   47040:	10fff826 	beq	r2,r3,47024 <__alt_mem_epcs_flash_controller+0xfe036024>
   47044:	20800003 	ldbu	r2,0(r4)
   47048:	28c00003 	ldbu	r3,0(r5)
   4704c:	10c5c83a 	sub	r2,r2,r3
   47050:	f800283a 	ret
   47054:	0005883a 	mov	r2,zero
   47058:	f800283a 	ret

0004705c <strncpy>:
   4705c:	2906b03a 	or	r3,r5,r4
   47060:	18c000cc 	andi	r3,r3,3
   47064:	2005883a 	mov	r2,r4
   47068:	18002c1e 	bne	r3,zero,4711c <strncpy+0xc0>
   4706c:	010000c4 	movi	r4,3
   47070:	21802a2e 	bgeu	r4,r6,4711c <strncpy+0xc0>
   47074:	033fbff4 	movhi	r12,65279
   47078:	02e02074 	movhi	r11,32897
   4707c:	633fbfc4 	addi	r12,r12,-257
   47080:	5ae02004 	addi	r11,r11,-32640
   47084:	100f883a 	mov	r7,r2
   47088:	2a000017 	ldw	r8,0(r5)
   4708c:	3815883a 	mov	r10,r7
   47090:	4313883a 	add	r9,r8,r12
   47094:	0206303a 	nor	r3,zero,r8
   47098:	48c6703a 	and	r3,r9,r3
   4709c:	1ac6703a 	and	r3,r3,r11
   470a0:	1800261e 	bne	r3,zero,4713c <strncpy+0xe0>
   470a4:	39c00104 	addi	r7,r7,4
   470a8:	52000015 	stw	r8,0(r10)
   470ac:	31bfff04 	addi	r6,r6,-4
   470b0:	3811883a 	mov	r8,r7
   470b4:	29400104 	addi	r5,r5,4
   470b8:	21bff336 	bltu	r4,r6,47088 <__alt_mem_epcs_flash_controller+0xfe036088>
   470bc:	30001e26 	beq	r6,zero,47138 <strncpy+0xdc>
   470c0:	29c00003 	ldbu	r7,0(r5)
   470c4:	31bfffc4 	addi	r6,r6,-1
   470c8:	40c00044 	addi	r3,r8,1
   470cc:	41c00005 	stb	r7,0(r8)
   470d0:	39c03fcc 	andi	r7,r7,255
   470d4:	39c0201c 	xori	r7,r7,128
   470d8:	39ffe004 	addi	r7,r7,-128
   470dc:	29400044 	addi	r5,r5,1
   470e0:	38001026 	beq	r7,zero,47124 <strncpy+0xc8>
   470e4:	1811883a 	mov	r8,r3
   470e8:	00000906 	br	47110 <strncpy+0xb4>
   470ec:	29c00003 	ldbu	r7,0(r5)
   470f0:	31bfffc4 	addi	r6,r6,-1
   470f4:	29400044 	addi	r5,r5,1
   470f8:	41c00005 	stb	r7,0(r8)
   470fc:	39c03fcc 	andi	r7,r7,255
   47100:	39c0201c 	xori	r7,r7,128
   47104:	39ffe004 	addi	r7,r7,-128
   47108:	1811883a 	mov	r8,r3
   4710c:	38000526 	beq	r7,zero,47124 <strncpy+0xc8>
   47110:	18c00044 	addi	r3,r3,1
   47114:	303ff51e 	bne	r6,zero,470ec <__alt_mem_epcs_flash_controller+0xfe0360ec>
   47118:	f800283a 	ret
   4711c:	1011883a 	mov	r8,r2
   47120:	003fe606 	br	470bc <__alt_mem_epcs_flash_controller+0xfe0360bc>
   47124:	30000726 	beq	r6,zero,47144 <strncpy+0xe8>
   47128:	198d883a 	add	r6,r3,r6
   4712c:	18000005 	stb	zero,0(r3)
   47130:	18c00044 	addi	r3,r3,1
   47134:	19bffd1e 	bne	r3,r6,4712c <__alt_mem_epcs_flash_controller+0xfe03612c>
   47138:	f800283a 	ret
   4713c:	3811883a 	mov	r8,r7
   47140:	003fdf06 	br	470c0 <__alt_mem_epcs_flash_controller+0xfe0360c0>
   47144:	f800283a 	ret

00047148 <strnlen>:
   47148:	28000e26 	beq	r5,zero,47184 <strnlen+0x3c>
   4714c:	20800007 	ldb	r2,0(r4)
   47150:	10000c26 	beq	r2,zero,47184 <strnlen+0x3c>
   47154:	20c00044 	addi	r3,r4,1
   47158:	214b883a 	add	r5,r4,r5
   4715c:	28c00526 	beq	r5,r3,47174 <strnlen+0x2c>
   47160:	19800007 	ldb	r6,0(r3)
   47164:	19c00044 	addi	r7,r3,1
   47168:	30000426 	beq	r6,zero,4717c <strnlen+0x34>
   4716c:	3807883a 	mov	r3,r7
   47170:	28fffb1e 	bne	r5,r3,47160 <__alt_mem_epcs_flash_controller+0xfe036160>
   47174:	2905c83a 	sub	r2,r5,r4
   47178:	f800283a 	ret
   4717c:	1905c83a 	sub	r2,r3,r4
   47180:	f800283a 	ret
   47184:	0005883a 	mov	r2,zero
   47188:	f800283a 	ret

0004718c <strtok>:
   4718c:	008001b4 	movhi	r2,6
   47190:	10be3804 	addi	r2,r2,-1824
   47194:	11800017 	ldw	r6,0(r2)
   47198:	01c00044 	movi	r7,1
   4719c:	31801704 	addi	r6,r6,92
   471a0:	00471a41 	jmpi	471a4 <__strtok_r>

000471a4 <__strtok_r>:
   471a4:	20001f26 	beq	r4,zero,47224 <__strtok_r+0x80>
   471a8:	2005883a 	mov	r2,r4
   471ac:	22400007 	ldb	r9,0(r4)
   471b0:	2807883a 	mov	r3,r5
   471b4:	21000044 	addi	r4,r4,1
   471b8:	00000106 	br	471c0 <__strtok_r+0x1c>
   471bc:	4a001226 	beq	r9,r8,47208 <__strtok_r+0x64>
   471c0:	1a000007 	ldb	r8,0(r3)
   471c4:	18c00044 	addi	r3,r3,1
   471c8:	403ffc1e 	bne	r8,zero,471bc <__alt_mem_epcs_flash_controller+0xfe0361bc>
   471cc:	48001926 	beq	r9,zero,47234 <__strtok_r+0x90>
   471d0:	22000007 	ldb	r8,0(r4)
   471d4:	2013883a 	mov	r9,r4
   471d8:	21000044 	addi	r4,r4,1
   471dc:	2015883a 	mov	r10,r4
   471e0:	2807883a 	mov	r3,r5
   471e4:	00000106 	br	471ec <__strtok_r+0x48>
   471e8:	383ff926 	beq	r7,zero,471d0 <__alt_mem_epcs_flash_controller+0xfe0361d0>
   471ec:	19c00007 	ldb	r7,0(r3)
   471f0:	18c00044 	addi	r3,r3,1
   471f4:	41fffc1e 	bne	r8,r7,471e8 <__alt_mem_epcs_flash_controller+0xfe0361e8>
   471f8:	40000726 	beq	r8,zero,47218 <__strtok_r+0x74>
   471fc:	48000005 	stb	zero,0(r9)
   47200:	32800015 	stw	r10,0(r6)
   47204:	f800283a 	ret
   47208:	383fe71e 	bne	r7,zero,471a8 <__alt_mem_epcs_flash_controller+0xfe0361a8>
   4720c:	31000015 	stw	r4,0(r6)
   47210:	10000005 	stb	zero,0(r2)
   47214:	f800283a 	ret
   47218:	0015883a 	mov	r10,zero
   4721c:	32800015 	stw	r10,0(r6)
   47220:	f800283a 	ret
   47224:	31000017 	ldw	r4,0(r6)
   47228:	203fdf1e 	bne	r4,zero,471a8 <__alt_mem_epcs_flash_controller+0xfe0361a8>
   4722c:	0005883a 	mov	r2,zero
   47230:	f800283a 	ret
   47234:	30000015 	stw	zero,0(r6)
   47238:	0005883a 	mov	r2,zero
   4723c:	f800283a 	ret

00047240 <strtok_r>:
   47240:	01c00044 	movi	r7,1
   47244:	00471a41 	jmpi	471a4 <__strtok_r>

00047248 <strtoull>:
   47248:	008001b4 	movhi	r2,6
   4724c:	10be3804 	addi	r2,r2,-1824
   47250:	300f883a 	mov	r7,r6
   47254:	280d883a 	mov	r6,r5
   47258:	200b883a 	mov	r5,r4
   4725c:	11000017 	ldw	r4,0(r2)
   47260:	00472641 	jmpi	47264 <_strtoull_r>

00047264 <_strtoull_r>:
   47264:	008001b4 	movhi	r2,6
   47268:	deffef04 	addi	sp,sp,-68
   4726c:	10be3604 	addi	r2,r2,-1832
   47270:	dd800d15 	stw	r22,52(sp)
   47274:	15800017 	ldw	r22,0(r2)
   47278:	df000f15 	stw	fp,60(sp)
   4727c:	d9000515 	stw	r4,20(sp)
   47280:	dfc01015 	stw	ra,64(sp)
   47284:	ddc00e15 	stw	r23,56(sp)
   47288:	dd400c15 	stw	r21,48(sp)
   4728c:	dd000b15 	stw	r20,44(sp)
   47290:	dcc00a15 	stw	r19,40(sp)
   47294:	dc800915 	stw	r18,36(sp)
   47298:	dc400815 	stw	r17,32(sp)
   4729c:	dc000715 	stw	r16,28(sp)
   472a0:	d9400215 	stw	r5,8(sp)
   472a4:	d9800115 	stw	r6,4(sp)
   472a8:	3839883a 	mov	fp,r7
   472ac:	2809883a 	mov	r4,r5
   472b0:	22000003 	ldbu	r8,0(r4)
   472b4:	24400044 	addi	r17,r4,1
   472b8:	2007883a 	mov	r3,r4
   472bc:	b205883a 	add	r2,r22,r8
   472c0:	10800043 	ldbu	r2,1(r2)
   472c4:	8809883a 	mov	r4,r17
   472c8:	1080020c 	andi	r2,r2,8
   472cc:	103ff81e 	bne	r2,zero,472b0 <__alt_mem_epcs_flash_controller+0xfe0362b0>
   472d0:	00800b44 	movi	r2,45
   472d4:	40807726 	beq	r8,r2,474b4 <_strtoull_r+0x250>
   472d8:	00800ac4 	movi	r2,43
   472dc:	40807a26 	beq	r8,r2,474c8 <_strtoull_r+0x264>
   472e0:	d8000415 	stw	zero,16(sp)
   472e4:	e0001426 	beq	fp,zero,47338 <_strtoull_r+0xd4>
   472e8:	00800404 	movi	r2,16
   472ec:	e0808826 	beq	fp,r2,47510 <_strtoull_r+0x2ac>
   472f0:	e025d7fa 	srai	r18,fp,31
   472f4:	013fffc4 	movi	r4,-1
   472f8:	200b883a 	mov	r5,r4
   472fc:	e00d883a 	mov	r6,fp
   47300:	900f883a 	mov	r7,r18
   47304:	da000615 	stw	r8,24(sp)
   47308:	00530600 	call	53060 <__udivdi3>
   4730c:	013fffc4 	movi	r4,-1
   47310:	e00d883a 	mov	r6,fp
   47314:	900f883a 	mov	r7,r18
   47318:	200b883a 	mov	r5,r4
   4731c:	1021883a 	mov	r16,r2
   47320:	182f883a 	mov	r23,r3
   47324:	00535d80 	call	535d8 <__umoddi3>
   47328:	d8800315 	stw	r2,12(sp)
   4732c:	df000015 	stw	fp,0(sp)
   47330:	da000617 	ldw	r8,24(sp)
   47334:	00000c06 	br	47368 <_strtoull_r+0x104>
   47338:	00800c04 	movi	r2,48
   4733c:	40806626 	beq	r8,r2,474d8 <_strtoull_r+0x274>
   47340:	00800284 	movi	r2,10
   47344:	00c00144 	movi	r3,5
   47348:	042666b4 	movhi	r16,39322
   4734c:	05c666b4 	movhi	r23,6554
   47350:	d8800015 	stw	r2,0(sp)
   47354:	d8c00315 	stw	r3,12(sp)
   47358:	84266644 	addi	r16,r16,-26215
   4735c:	bde66644 	addi	r23,r23,-26215
   47360:	0025883a 	mov	r18,zero
   47364:	1039883a 	mov	fp,r2
   47368:	b205883a 	add	r2,r22,r8
   4736c:	11800043 	ldbu	r6,1(r2)
   47370:	882b883a 	mov	r21,r17
   47374:	000f883a 	mov	r7,zero
   47378:	3080010c 	andi	r2,r6,4
   4737c:	0009883a 	mov	r4,zero
   47380:	000b883a 	mov	r5,zero
   47384:	04400044 	movi	r17,1
   47388:	053fffc4 	movi	r20,-1
   4738c:	10000d26 	beq	r2,zero,473c4 <_strtoull_r+0x160>
   47390:	44fff404 	addi	r19,r8,-48
   47394:	9f00110e 	bge	r19,fp,473dc <_strtoull_r+0x178>
   47398:	3d000426 	beq	r7,r20,473ac <_strtoull_r+0x148>
   4739c:	b9400236 	bltu	r23,r5,473a8 <_strtoull_r+0x144>
   473a0:	2dc0291e 	bne	r5,r23,47448 <_strtoull_r+0x1e4>
   473a4:	8100282e 	bgeu	r16,r4,47448 <_strtoull_r+0x1e4>
   473a8:	01ffffc4 	movi	r7,-1
   473ac:	aa000003 	ldbu	r8,0(r21)
   473b0:	ad400044 	addi	r21,r21,1
   473b4:	b205883a 	add	r2,r22,r8
   473b8:	11800043 	ldbu	r6,1(r2)
   473bc:	3080010c 	andi	r2,r6,4
   473c0:	103ff31e 	bne	r2,zero,47390 <__alt_mem_epcs_flash_controller+0xfe036390>
   473c4:	318000cc 	andi	r6,r6,3
   473c8:	30000426 	beq	r6,zero,473dc <_strtoull_r+0x178>
   473cc:	34402a26 	beq	r6,r17,47478 <_strtoull_r+0x214>
   473d0:	00c015c4 	movi	r3,87
   473d4:	40e7c83a 	sub	r19,r8,r3
   473d8:	9f3fef16 	blt	r19,fp,47398 <__alt_mem_epcs_flash_controller+0xfe036398>
   473dc:	38002c16 	blt	r7,zero,47490 <_strtoull_r+0x22c>
   473e0:	d8c00417 	ldw	r3,16(sp)
   473e4:	18000426 	beq	r3,zero,473f8 <_strtoull_r+0x194>
   473e8:	0109c83a 	sub	r4,zero,r4
   473ec:	2004c03a 	cmpne	r2,r4,zero
   473f0:	0151c83a 	sub	r8,zero,r5
   473f4:	408bc83a 	sub	r5,r8,r2
   473f8:	d8800117 	ldw	r2,4(sp)
   473fc:	10000426 	beq	r2,zero,47410 <_strtoull_r+0x1ac>
   47400:	dd000217 	ldw	r20,8(sp)
   47404:	3800291e 	bne	r7,zero,474ac <_strtoull_r+0x248>
   47408:	d8c00117 	ldw	r3,4(sp)
   4740c:	1d000015 	stw	r20,0(r3)
   47410:	2005883a 	mov	r2,r4
   47414:	2807883a 	mov	r3,r5
   47418:	dfc01017 	ldw	ra,64(sp)
   4741c:	df000f17 	ldw	fp,60(sp)
   47420:	ddc00e17 	ldw	r23,56(sp)
   47424:	dd800d17 	ldw	r22,52(sp)
   47428:	dd400c17 	ldw	r21,48(sp)
   4742c:	dd000b17 	ldw	r20,44(sp)
   47430:	dcc00a17 	ldw	r19,40(sp)
   47434:	dc800917 	ldw	r18,36(sp)
   47438:	dc400817 	ldw	r17,32(sp)
   4743c:	dc000717 	ldw	r16,28(sp)
   47440:	dec01104 	addi	sp,sp,68
   47444:	f800283a 	ret
   47448:	24000d26 	beq	r4,r16,47480 <_strtoull_r+0x21c>
   4744c:	d9800017 	ldw	r6,0(sp)
   47450:	900f883a 	mov	r7,r18
   47454:	00429400 	call	42940 <__muldi3>
   47458:	980bd7fa 	srai	r5,r19,31
   4745c:	9885883a 	add	r2,r19,r2
   47460:	14d1803a 	cmpltu	r8,r2,r19
   47464:	28c7883a 	add	r3,r5,r3
   47468:	1009883a 	mov	r4,r2
   4746c:	40cb883a 	add	r5,r8,r3
   47470:	01c00044 	movi	r7,1
   47474:	003fcd06 	br	473ac <__alt_mem_epcs_flash_controller+0xfe0363ac>
   47478:	00c00dc4 	movi	r3,55
   4747c:	003fd506 	br	473d4 <__alt_mem_epcs_flash_controller+0xfe0363d4>
   47480:	2dfff21e 	bne	r5,r23,4744c <__alt_mem_epcs_flash_controller+0xfe03644c>
   47484:	d8c00317 	ldw	r3,12(sp)
   47488:	1cffc716 	blt	r3,r19,473a8 <__alt_mem_epcs_flash_controller+0xfe0363a8>
   4748c:	003fef06 	br	4744c <__alt_mem_epcs_flash_controller+0xfe03644c>
   47490:	d8c00517 	ldw	r3,20(sp)
   47494:	00800884 	movi	r2,34
   47498:	013fffc4 	movi	r4,-1
   4749c:	18800015 	stw	r2,0(r3)
   474a0:	d8800117 	ldw	r2,4(sp)
   474a4:	200b883a 	mov	r5,r4
   474a8:	103fd926 	beq	r2,zero,47410 <__alt_mem_epcs_flash_controller+0xfe036410>
   474ac:	ad3fffc4 	addi	r20,r21,-1
   474b0:	003fd506 	br	47408 <__alt_mem_epcs_flash_controller+0xfe036408>
   474b4:	00800044 	movi	r2,1
   474b8:	1c400084 	addi	r17,r3,2
   474bc:	1a000043 	ldbu	r8,1(r3)
   474c0:	d8800415 	stw	r2,16(sp)
   474c4:	003f8706 	br	472e4 <__alt_mem_epcs_flash_controller+0xfe0362e4>
   474c8:	1c400084 	addi	r17,r3,2
   474cc:	1a000043 	ldbu	r8,1(r3)
   474d0:	d8000415 	stw	zero,16(sp)
   474d4:	003f8306 	br	472e4 <__alt_mem_epcs_flash_controller+0xfe0362e4>
   474d8:	88800003 	ldbu	r2,0(r17)
   474dc:	00c01604 	movi	r3,88
   474e0:	108037cc 	andi	r2,r2,223
   474e4:	10c01026 	beq	r2,r3,47528 <_strtoull_r+0x2c4>
   474e8:	00c00204 	movi	r3,8
   474ec:	008001c4 	movi	r2,7
   474f0:	043fffc4 	movi	r16,-1
   474f4:	05c80034 	movhi	r23,8192
   474f8:	d8c00015 	stw	r3,0(sp)
   474fc:	d8800315 	stw	r2,12(sp)
   47500:	bc2f883a 	add	r23,r23,r16
   47504:	0025883a 	mov	r18,zero
   47508:	1839883a 	mov	fp,r3
   4750c:	003f9606 	br	47368 <__alt_mem_epcs_flash_controller+0xfe036368>
   47510:	00800c04 	movi	r2,48
   47514:	4080101e 	bne	r8,r2,47558 <_strtoull_r+0x2f4>
   47518:	88800003 	ldbu	r2,0(r17)
   4751c:	00c01604 	movi	r3,88
   47520:	108037cc 	andi	r2,r2,223
   47524:	10c0141e 	bne	r2,r3,47578 <_strtoull_r+0x314>
   47528:	00c00404 	movi	r3,16
   4752c:	008003c4 	movi	r2,15
   47530:	043fffc4 	movi	r16,-1
   47534:	05c40034 	movhi	r23,4096
   47538:	8a000043 	ldbu	r8,1(r17)
   4753c:	d8c00015 	stw	r3,0(sp)
   47540:	d8800315 	stw	r2,12(sp)
   47544:	8c400084 	addi	r17,r17,2
   47548:	bc2f883a 	add	r23,r23,r16
   4754c:	0025883a 	mov	r18,zero
   47550:	1839883a 	mov	fp,r3
   47554:	003f8406 	br	47368 <__alt_mem_epcs_flash_controller+0xfe036368>
   47558:	008003c4 	movi	r2,15
   4755c:	d8800315 	stw	r2,12(sp)
   47560:	043fffc4 	movi	r16,-1
   47564:	05c40034 	movhi	r23,4096
   47568:	bc2f883a 	add	r23,r23,r16
   4756c:	df000015 	stw	fp,0(sp)
   47570:	0025883a 	mov	r18,zero
   47574:	003f7c06 	br	47368 <__alt_mem_epcs_flash_controller+0xfe036368>
   47578:	00c003c4 	movi	r3,15
   4757c:	d8c00315 	stw	r3,12(sp)
   47580:	003ff706 	br	47560 <__alt_mem_epcs_flash_controller+0xfe036560>

00047584 <___svfprintf_internal_r>:
   47584:	deffb704 	addi	sp,sp,-292
   47588:	dfc04815 	stw	ra,288(sp)
   4758c:	ddc04615 	stw	r23,280(sp)
   47590:	d9402c15 	stw	r5,176(sp)
   47594:	d9003915 	stw	r4,228(sp)
   47598:	302f883a 	mov	r23,r6
   4759c:	d9c02d15 	stw	r7,180(sp)
   475a0:	df004715 	stw	fp,284(sp)
   475a4:	dd804515 	stw	r22,276(sp)
   475a8:	dd404415 	stw	r21,272(sp)
   475ac:	dd004315 	stw	r20,268(sp)
   475b0:	dcc04215 	stw	r19,264(sp)
   475b4:	dc804115 	stw	r18,260(sp)
   475b8:	dc404015 	stw	r17,256(sp)
   475bc:	dc003f15 	stw	r16,252(sp)
   475c0:	004e7b80 	call	4e7b8 <_localeconv_r>
   475c4:	10800017 	ldw	r2,0(r2)
   475c8:	1009883a 	mov	r4,r2
   475cc:	d8803415 	stw	r2,208(sp)
   475d0:	0046ef40 	call	46ef4 <strlen>
   475d4:	d8c02c17 	ldw	r3,176(sp)
   475d8:	d8803815 	stw	r2,224(sp)
   475dc:	1880030b 	ldhu	r2,12(r3)
   475e0:	1080200c 	andi	r2,r2,128
   475e4:	10000226 	beq	r2,zero,475f0 <___svfprintf_internal_r+0x6c>
   475e8:	18800417 	ldw	r2,16(r3)
   475ec:	10067f26 	beq	r2,zero,48fec <___svfprintf_internal_r+0x1a68>
   475f0:	dcc03917 	ldw	r19,228(sp)
   475f4:	d8c00404 	addi	r3,sp,16
   475f8:	054001b4 	movhi	r21,6
   475fc:	d9001e04 	addi	r4,sp,120
   47600:	ad757984 	addi	r21,r21,-10778
   47604:	d8c01e15 	stw	r3,120(sp)
   47608:	d8002015 	stw	zero,128(sp)
   4760c:	d8001f15 	stw	zero,124(sp)
   47610:	d8003315 	stw	zero,204(sp)
   47614:	d8003615 	stw	zero,216(sp)
   47618:	d8003715 	stw	zero,220(sp)
   4761c:	1811883a 	mov	r8,r3
   47620:	d8003a15 	stw	zero,232(sp)
   47624:	d8003b15 	stw	zero,236(sp)
   47628:	d8002f15 	stw	zero,188(sp)
   4762c:	d9002815 	stw	r4,160(sp)
   47630:	b8800007 	ldb	r2,0(r23)
   47634:	10026726 	beq	r2,zero,47fd4 <___svfprintf_internal_r+0xa50>
   47638:	00c00944 	movi	r3,37
   4763c:	b821883a 	mov	r16,r23
   47640:	10c0021e 	bne	r2,r3,4764c <___svfprintf_internal_r+0xc8>
   47644:	00001406 	br	47698 <___svfprintf_internal_r+0x114>
   47648:	10c00326 	beq	r2,r3,47658 <___svfprintf_internal_r+0xd4>
   4764c:	84000044 	addi	r16,r16,1
   47650:	80800007 	ldb	r2,0(r16)
   47654:	103ffc1e 	bne	r2,zero,47648 <__alt_mem_epcs_flash_controller+0xfe036648>
   47658:	85e3c83a 	sub	r17,r16,r23
   4765c:	88000e26 	beq	r17,zero,47698 <___svfprintf_internal_r+0x114>
   47660:	d8c02017 	ldw	r3,128(sp)
   47664:	d8801f17 	ldw	r2,124(sp)
   47668:	45c00015 	stw	r23,0(r8)
   4766c:	1c47883a 	add	r3,r3,r17
   47670:	10800044 	addi	r2,r2,1
   47674:	d8c02015 	stw	r3,128(sp)
   47678:	44400115 	stw	r17,4(r8)
   4767c:	d8801f15 	stw	r2,124(sp)
   47680:	00c001c4 	movi	r3,7
   47684:	18809716 	blt	r3,r2,478e4 <___svfprintf_internal_r+0x360>
   47688:	42000204 	addi	r8,r8,8
   4768c:	d9402f17 	ldw	r5,188(sp)
   47690:	2c4b883a 	add	r5,r5,r17
   47694:	d9402f15 	stw	r5,188(sp)
   47698:	80800007 	ldb	r2,0(r16)
   4769c:	10009826 	beq	r2,zero,47900 <___svfprintf_internal_r+0x37c>
   476a0:	84400047 	ldb	r17,1(r16)
   476a4:	00bfffc4 	movi	r2,-1
   476a8:	85c00044 	addi	r23,r16,1
   476ac:	d8002785 	stb	zero,158(sp)
   476b0:	0007883a 	mov	r3,zero
   476b4:	000f883a 	mov	r7,zero
   476b8:	d8802915 	stw	r2,164(sp)
   476bc:	d8003115 	stw	zero,196(sp)
   476c0:	0025883a 	mov	r18,zero
   476c4:	01401604 	movi	r5,88
   476c8:	01800244 	movi	r6,9
   476cc:	02800a84 	movi	r10,42
   476d0:	02401b04 	movi	r9,108
   476d4:	bdc00044 	addi	r23,r23,1
   476d8:	88bff804 	addi	r2,r17,-32
   476dc:	2882f036 	bltu	r5,r2,482a0 <___svfprintf_internal_r+0xd1c>
   476e0:	100490ba 	slli	r2,r2,2
   476e4:	01000134 	movhi	r4,4
   476e8:	211dbe04 	addi	r4,r4,30456
   476ec:	1105883a 	add	r2,r2,r4
   476f0:	10800017 	ldw	r2,0(r2)
   476f4:	1000683a 	jmp	r2
   476f8:	00048208 	cmpgei	zero,zero,4616
   476fc:	000482a0 	cmpeqi	zero,zero,4618
   47700:	000482a0 	cmpeqi	zero,zero,4618
   47704:	000481fc 	xorhi	zero,zero,4615
   47708:	000482a0 	cmpeqi	zero,zero,4618
   4770c:	000482a0 	cmpeqi	zero,zero,4618
   47710:	000482a0 	cmpeqi	zero,zero,4618
   47714:	000482a0 	cmpeqi	zero,zero,4618
   47718:	000482a0 	cmpeqi	zero,zero,4618
   4771c:	000482a0 	cmpeqi	zero,zero,4618
   47720:	0004795c 	xori	zero,zero,4581
   47724:	00048138 	rdprs	zero,zero,4612
   47728:	000482a0 	cmpeqi	zero,zero,4618
   4772c:	0004786c 	andhi	zero,zero,4577
   47730:	00047984 	movi	zero,4582
   47734:	000482a0 	cmpeqi	zero,zero,4618
   47738:	000479f8 	rdprs	zero,zero,4583
   4773c:	000479c4 	movi	zero,4583
   47740:	000479c4 	movi	zero,4583
   47744:	000479c4 	movi	zero,4583
   47748:	000479c4 	movi	zero,4583
   4774c:	000479c4 	movi	zero,4583
   47750:	000479c4 	movi	zero,4583
   47754:	000479c4 	movi	zero,4583
   47758:	000479c4 	movi	zero,4583
   4775c:	000479c4 	movi	zero,4583
   47760:	000482a0 	cmpeqi	zero,zero,4618
   47764:	000482a0 	cmpeqi	zero,zero,4618
   47768:	000482a0 	cmpeqi	zero,zero,4618
   4776c:	000482a0 	cmpeqi	zero,zero,4618
   47770:	000482a0 	cmpeqi	zero,zero,4618
   47774:	000482a0 	cmpeqi	zero,zero,4618
   47778:	000482a0 	cmpeqi	zero,zero,4618
   4777c:	000482a0 	cmpeqi	zero,zero,4618
   47780:	000482a0 	cmpeqi	zero,zero,4618
   47784:	000482a0 	cmpeqi	zero,zero,4618
   47788:	00047ab0 	cmpltui	zero,zero,4586
   4778c:	00047a04 	movi	zero,4584
   47790:	000482a0 	cmpeqi	zero,zero,4618
   47794:	00047a04 	movi	zero,4584
   47798:	000482a0 	cmpeqi	zero,zero,4618
   4779c:	000482a0 	cmpeqi	zero,zero,4618
   477a0:	000482a0 	cmpeqi	zero,zero,4618
   477a4:	000482a0 	cmpeqi	zero,zero,4618
   477a8:	00047aa4 	muli	zero,zero,4586
   477ac:	000482a0 	cmpeqi	zero,zero,4618
   477b0:	000482a0 	cmpeqi	zero,zero,4618
   477b4:	00047b6c 	andhi	zero,zero,4589
   477b8:	000482a0 	cmpeqi	zero,zero,4618
   477bc:	000482a0 	cmpeqi	zero,zero,4618
   477c0:	000482a0 	cmpeqi	zero,zero,4618
   477c4:	000482a0 	cmpeqi	zero,zero,4618
   477c8:	000482a0 	cmpeqi	zero,zero,4618
   477cc:	00047fdc 	xori	zero,zero,4607
   477d0:	000482a0 	cmpeqi	zero,zero,4618
   477d4:	000482a0 	cmpeqi	zero,zero,4618
   477d8:	0004803c 	xorhi	zero,zero,4608
   477dc:	000482a0 	cmpeqi	zero,zero,4618
   477e0:	000482a0 	cmpeqi	zero,zero,4618
   477e4:	000482a0 	cmpeqi	zero,zero,4618
   477e8:	000482a0 	cmpeqi	zero,zero,4618
   477ec:	000482a0 	cmpeqi	zero,zero,4618
   477f0:	000482a0 	cmpeqi	zero,zero,4618
   477f4:	000482a0 	cmpeqi	zero,zero,4618
   477f8:	000482a0 	cmpeqi	zero,zero,4618
   477fc:	000482a0 	cmpeqi	zero,zero,4618
   47800:	000482a0 	cmpeqi	zero,zero,4618
   47804:	000480ec 	andhi	zero,zero,4611
   47808:	00048228 	cmpgeui	zero,zero,4616
   4780c:	00047a04 	movi	zero,4584
   47810:	00047a04 	movi	zero,4584
   47814:	00047a04 	movi	zero,4584
   47818:	0004827c 	xorhi	zero,zero,4617
   4781c:	00048228 	cmpgeui	zero,zero,4616
   47820:	000482a0 	cmpeqi	zero,zero,4618
   47824:	000482a0 	cmpeqi	zero,zero,4618
   47828:	00048238 	rdprs	zero,zero,4616
   4782c:	000482a0 	cmpeqi	zero,zero,4618
   47830:	00048248 	cmpgei	zero,zero,4617
   47834:	00048128 	cmpgeui	zero,zero,4612
   47838:	00047878 	rdprs	zero,zero,4577
   4783c:	00048148 	cmpgei	zero,zero,4613
   47840:	000482a0 	cmpeqi	zero,zero,4618
   47844:	00048154 	movui	zero,4613
   47848:	000482a0 	cmpeqi	zero,zero,4618
   4784c:	000481b0 	cmpltui	zero,zero,4614
   47850:	000482a0 	cmpeqi	zero,zero,4618
   47854:	000482a0 	cmpeqi	zero,zero,4618
   47858:	000481c0 	call	481c <addresses_from_pubkey+0x10>
   4785c:	d9003117 	ldw	r4,196(sp)
   47860:	d8802d15 	stw	r2,180(sp)
   47864:	0109c83a 	sub	r4,zero,r4
   47868:	d9003115 	stw	r4,196(sp)
   4786c:	94800114 	ori	r18,r18,4
   47870:	bc400007 	ldb	r17,0(r23)
   47874:	003f9706 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   47878:	00800c04 	movi	r2,48
   4787c:	d9002d17 	ldw	r4,180(sp)
   47880:	d9402917 	ldw	r5,164(sp)
   47884:	d8802705 	stb	r2,156(sp)
   47888:	00801e04 	movi	r2,120
   4788c:	d8802745 	stb	r2,157(sp)
   47890:	d8002785 	stb	zero,158(sp)
   47894:	20c00104 	addi	r3,r4,4
   47898:	25000017 	ldw	r20,0(r4)
   4789c:	002d883a 	mov	r22,zero
   478a0:	90800094 	ori	r2,r18,2
   478a4:	28028616 	blt	r5,zero,482c0 <___svfprintf_internal_r+0xd3c>
   478a8:	00bfdfc4 	movi	r2,-129
   478ac:	90a4703a 	and	r18,r18,r2
   478b0:	d8c02d15 	stw	r3,180(sp)
   478b4:	94800094 	ori	r18,r18,2
   478b8:	a002731e 	bne	r20,zero,48288 <___svfprintf_internal_r+0xd04>
   478bc:	008001b4 	movhi	r2,6
   478c0:	10b57204 	addi	r2,r2,-10808
   478c4:	d8803a15 	stw	r2,232(sp)
   478c8:	04401e04 	movi	r17,120
   478cc:	d8c02917 	ldw	r3,164(sp)
   478d0:	0039883a 	mov	fp,zero
   478d4:	1801d526 	beq	r3,zero,4802c <___svfprintf_internal_r+0xaa8>
   478d8:	0029883a 	mov	r20,zero
   478dc:	002d883a 	mov	r22,zero
   478e0:	0001f106 	br	480a8 <___svfprintf_internal_r+0xb24>
   478e4:	d9402c17 	ldw	r5,176(sp)
   478e8:	d9801e04 	addi	r6,sp,120
   478ec:	9809883a 	mov	r4,r19
   478f0:	004fd9c0 	call	4fd9c <__ssprint_r>
   478f4:	1000081e 	bne	r2,zero,47918 <___svfprintf_internal_r+0x394>
   478f8:	da000404 	addi	r8,sp,16
   478fc:	003f6306 	br	4768c <__alt_mem_epcs_flash_controller+0xfe03668c>
   47900:	d8802017 	ldw	r2,128(sp)
   47904:	10000426 	beq	r2,zero,47918 <___svfprintf_internal_r+0x394>
   47908:	d9402c17 	ldw	r5,176(sp)
   4790c:	d9003917 	ldw	r4,228(sp)
   47910:	d9801e04 	addi	r6,sp,120
   47914:	004fd9c0 	call	4fd9c <__ssprint_r>
   47918:	d8802c17 	ldw	r2,176(sp)
   4791c:	10c0030b 	ldhu	r3,12(r2)
   47920:	d8802f17 	ldw	r2,188(sp)
   47924:	18c0100c 	andi	r3,r3,64
   47928:	1805f51e 	bne	r3,zero,49100 <___svfprintf_internal_r+0x1b7c>
   4792c:	dfc04817 	ldw	ra,288(sp)
   47930:	df004717 	ldw	fp,284(sp)
   47934:	ddc04617 	ldw	r23,280(sp)
   47938:	dd804517 	ldw	r22,276(sp)
   4793c:	dd404417 	ldw	r21,272(sp)
   47940:	dd004317 	ldw	r20,268(sp)
   47944:	dcc04217 	ldw	r19,264(sp)
   47948:	dc804117 	ldw	r18,260(sp)
   4794c:	dc404017 	ldw	r17,256(sp)
   47950:	dc003f17 	ldw	r16,252(sp)
   47954:	dec04904 	addi	sp,sp,292
   47958:	f800283a 	ret
   4795c:	d8802d17 	ldw	r2,180(sp)
   47960:	d9002d17 	ldw	r4,180(sp)
   47964:	10800017 	ldw	r2,0(r2)
   47968:	d8803115 	stw	r2,196(sp)
   4796c:	20800104 	addi	r2,r4,4
   47970:	d9003117 	ldw	r4,196(sp)
   47974:	203fb916 	blt	r4,zero,4785c <__alt_mem_epcs_flash_controller+0xfe03685c>
   47978:	d8802d15 	stw	r2,180(sp)
   4797c:	bc400007 	ldb	r17,0(r23)
   47980:	003f5406 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   47984:	bc400007 	ldb	r17,0(r23)
   47988:	bac00044 	addi	r11,r23,1
   4798c:	8a873926 	beq	r17,r10,49674 <___svfprintf_internal_r+0x20f0>
   47990:	88bff404 	addi	r2,r17,-48
   47994:	0009883a 	mov	r4,zero
   47998:	30868836 	bltu	r6,r2,493bc <___svfprintf_internal_r+0x1e38>
   4799c:	5c400007 	ldb	r17,0(r11)
   479a0:	210002a4 	muli	r4,r4,10
   479a4:	5dc00044 	addi	r23,r11,1
   479a8:	b817883a 	mov	r11,r23
   479ac:	2089883a 	add	r4,r4,r2
   479b0:	88bff404 	addi	r2,r17,-48
   479b4:	30bff92e 	bgeu	r6,r2,4799c <__alt_mem_epcs_flash_controller+0xfe03699c>
   479b8:	2005d716 	blt	r4,zero,49118 <___svfprintf_internal_r+0x1b94>
   479bc:	d9002915 	stw	r4,164(sp)
   479c0:	003f4506 	br	476d8 <__alt_mem_epcs_flash_controller+0xfe0366d8>
   479c4:	b809883a 	mov	r4,r23
   479c8:	d8003115 	stw	zero,196(sp)
   479cc:	88bff404 	addi	r2,r17,-48
   479d0:	0017883a 	mov	r11,zero
   479d4:	24400007 	ldb	r17,0(r4)
   479d8:	5ac002a4 	muli	r11,r11,10
   479dc:	bdc00044 	addi	r23,r23,1
   479e0:	b809883a 	mov	r4,r23
   479e4:	12d7883a 	add	r11,r2,r11
   479e8:	88bff404 	addi	r2,r17,-48
   479ec:	30bff92e 	bgeu	r6,r2,479d4 <__alt_mem_epcs_flash_controller+0xfe0369d4>
   479f0:	dac03115 	stw	r11,196(sp)
   479f4:	003f3806 	br	476d8 <__alt_mem_epcs_flash_controller+0xfe0366d8>
   479f8:	94802014 	ori	r18,r18,128
   479fc:	bc400007 	ldb	r17,0(r23)
   47a00:	003f3406 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   47a04:	18c03fcc 	andi	r3,r3,255
   47a08:	1807471e 	bne	r3,zero,49728 <___svfprintf_internal_r+0x21a4>
   47a0c:	9080020c 	andi	r2,r18,8
   47a10:	10047d26 	beq	r2,zero,48c08 <___svfprintf_internal_r+0x1684>
   47a14:	d8c02d17 	ldw	r3,180(sp)
   47a18:	d9002d17 	ldw	r4,180(sp)
   47a1c:	d9402d17 	ldw	r5,180(sp)
   47a20:	18c00017 	ldw	r3,0(r3)
   47a24:	21000117 	ldw	r4,4(r4)
   47a28:	29400204 	addi	r5,r5,8
   47a2c:	d8c03615 	stw	r3,216(sp)
   47a30:	d9003715 	stw	r4,220(sp)
   47a34:	d9402d15 	stw	r5,180(sp)
   47a38:	d9003617 	ldw	r4,216(sp)
   47a3c:	d9403717 	ldw	r5,220(sp)
   47a40:	da003e15 	stw	r8,248(sp)
   47a44:	04000044 	movi	r16,1
   47a48:	004fbec0 	call	4fbec <__fpclassifyd>
   47a4c:	da003e17 	ldw	r8,248(sp)
   47a50:	14044b1e 	bne	r2,r16,48b80 <___svfprintf_internal_r+0x15fc>
   47a54:	d9003617 	ldw	r4,216(sp)
   47a58:	d9403717 	ldw	r5,220(sp)
   47a5c:	000d883a 	mov	r6,zero
   47a60:	000f883a 	mov	r7,zero
   47a64:	0043dec0 	call	43dec <__ledf2>
   47a68:	da003e17 	ldw	r8,248(sp)
   47a6c:	1005f316 	blt	r2,zero,4923c <___svfprintf_internal_r+0x1cb8>
   47a70:	df002783 	ldbu	fp,158(sp)
   47a74:	008011c4 	movi	r2,71
   47a78:	1445590e 	bge	r2,r17,48fe0 <___svfprintf_internal_r+0x1a5c>
   47a7c:	040001b4 	movhi	r16,6
   47a80:	84356a04 	addi	r16,r16,-10840
   47a84:	00c000c4 	movi	r3,3
   47a88:	00bfdfc4 	movi	r2,-129
   47a8c:	d8c02a15 	stw	r3,168(sp)
   47a90:	90a4703a 	and	r18,r18,r2
   47a94:	d8c02e15 	stw	r3,184(sp)
   47a98:	d8002915 	stw	zero,164(sp)
   47a9c:	d8003215 	stw	zero,200(sp)
   47aa0:	00006606 	br	47c3c <___svfprintf_internal_r+0x6b8>
   47aa4:	94800214 	ori	r18,r18,8
   47aa8:	bc400007 	ldb	r17,0(r23)
   47aac:	003f0906 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   47ab0:	18c03fcc 	andi	r3,r3,255
   47ab4:	1807181e 	bne	r3,zero,49718 <___svfprintf_internal_r+0x2194>
   47ab8:	94800414 	ori	r18,r18,16
   47abc:	9080080c 	andi	r2,r18,32
   47ac0:	10039626 	beq	r2,zero,4891c <___svfprintf_internal_r+0x1398>
   47ac4:	d9402d17 	ldw	r5,180(sp)
   47ac8:	28800117 	ldw	r2,4(r5)
   47acc:	2d000017 	ldw	r20,0(r5)
   47ad0:	29400204 	addi	r5,r5,8
   47ad4:	d9402d15 	stw	r5,180(sp)
   47ad8:	102d883a 	mov	r22,r2
   47adc:	10039816 	blt	r2,zero,48940 <___svfprintf_internal_r+0x13bc>
   47ae0:	d9402917 	ldw	r5,164(sp)
   47ae4:	df002783 	ldbu	fp,158(sp)
   47ae8:	2803ab16 	blt	r5,zero,48998 <___svfprintf_internal_r+0x1414>
   47aec:	00ffdfc4 	movi	r3,-129
   47af0:	a584b03a 	or	r2,r20,r22
   47af4:	90e4703a 	and	r18,r18,r3
   47af8:	10014a26 	beq	r2,zero,48024 <___svfprintf_internal_r+0xaa0>
   47afc:	b0034b26 	beq	r22,zero,4882c <___svfprintf_internal_r+0x12a8>
   47b00:	dc402a15 	stw	r17,168(sp)
   47b04:	dc001e04 	addi	r16,sp,120
   47b08:	b023883a 	mov	r17,r22
   47b0c:	402d883a 	mov	r22,r8
   47b10:	a009883a 	mov	r4,r20
   47b14:	880b883a 	mov	r5,r17
   47b18:	01800284 	movi	r6,10
   47b1c:	000f883a 	mov	r7,zero
   47b20:	00535d80 	call	535d8 <__umoddi3>
   47b24:	10800c04 	addi	r2,r2,48
   47b28:	843fffc4 	addi	r16,r16,-1
   47b2c:	a009883a 	mov	r4,r20
   47b30:	880b883a 	mov	r5,r17
   47b34:	80800005 	stb	r2,0(r16)
   47b38:	01800284 	movi	r6,10
   47b3c:	000f883a 	mov	r7,zero
   47b40:	00530600 	call	53060 <__udivdi3>
   47b44:	1029883a 	mov	r20,r2
   47b48:	10c4b03a 	or	r2,r2,r3
   47b4c:	1823883a 	mov	r17,r3
   47b50:	103fef1e 	bne	r2,zero,47b10 <__alt_mem_epcs_flash_controller+0xfe036b10>
   47b54:	d8c02817 	ldw	r3,160(sp)
   47b58:	dc402a17 	ldw	r17,168(sp)
   47b5c:	b011883a 	mov	r8,r22
   47b60:	1c07c83a 	sub	r3,r3,r16
   47b64:	d8c02e15 	stw	r3,184(sp)
   47b68:	00002e06 	br	47c24 <___svfprintf_internal_r+0x6a0>
   47b6c:	18c03fcc 	andi	r3,r3,255
   47b70:	1806e71e 	bne	r3,zero,49710 <___svfprintf_internal_r+0x218c>
   47b74:	94800414 	ori	r18,r18,16
   47b78:	9080080c 	andi	r2,r18,32
   47b7c:	1002d426 	beq	r2,zero,486d0 <___svfprintf_internal_r+0x114c>
   47b80:	d9402d17 	ldw	r5,180(sp)
   47b84:	d8c02917 	ldw	r3,164(sp)
   47b88:	d8002785 	stb	zero,158(sp)
   47b8c:	28800204 	addi	r2,r5,8
   47b90:	2d000017 	ldw	r20,0(r5)
   47b94:	2d800117 	ldw	r22,4(r5)
   47b98:	18041516 	blt	r3,zero,48bf0 <___svfprintf_internal_r+0x166c>
   47b9c:	013fdfc4 	movi	r4,-129
   47ba0:	a586b03a 	or	r3,r20,r22
   47ba4:	d8802d15 	stw	r2,180(sp)
   47ba8:	9124703a 	and	r18,r18,r4
   47bac:	1802d51e 	bne	r3,zero,48704 <___svfprintf_internal_r+0x1180>
   47bb0:	d9402917 	ldw	r5,164(sp)
   47bb4:	0039883a 	mov	fp,zero
   47bb8:	2806be26 	beq	r5,zero,496b4 <___svfprintf_internal_r+0x2130>
   47bbc:	0029883a 	mov	r20,zero
   47bc0:	002d883a 	mov	r22,zero
   47bc4:	dc001e04 	addi	r16,sp,120
   47bc8:	a006d0fa 	srli	r3,r20,3
   47bcc:	b008977a 	slli	r4,r22,29
   47bd0:	b02cd0fa 	srli	r22,r22,3
   47bd4:	a50001cc 	andi	r20,r20,7
   47bd8:	a0800c04 	addi	r2,r20,48
   47bdc:	843fffc4 	addi	r16,r16,-1
   47be0:	20e8b03a 	or	r20,r4,r3
   47be4:	80800005 	stb	r2,0(r16)
   47be8:	a586b03a 	or	r3,r20,r22
   47bec:	183ff61e 	bne	r3,zero,47bc8 <__alt_mem_epcs_flash_controller+0xfe036bc8>
   47bf0:	90c0004c 	andi	r3,r18,1
   47bf4:	18013926 	beq	r3,zero,480dc <___svfprintf_internal_r+0xb58>
   47bf8:	10803fcc 	andi	r2,r2,255
   47bfc:	1080201c 	xori	r2,r2,128
   47c00:	10bfe004 	addi	r2,r2,-128
   47c04:	00c00c04 	movi	r3,48
   47c08:	10c13426 	beq	r2,r3,480dc <___svfprintf_internal_r+0xb58>
   47c0c:	80ffffc5 	stb	r3,-1(r16)
   47c10:	d8c02817 	ldw	r3,160(sp)
   47c14:	80bfffc4 	addi	r2,r16,-1
   47c18:	1021883a 	mov	r16,r2
   47c1c:	1887c83a 	sub	r3,r3,r2
   47c20:	d8c02e15 	stw	r3,184(sp)
   47c24:	d8802e17 	ldw	r2,184(sp)
   47c28:	d9002917 	ldw	r4,164(sp)
   47c2c:	1100010e 	bge	r2,r4,47c34 <___svfprintf_internal_r+0x6b0>
   47c30:	2005883a 	mov	r2,r4
   47c34:	d8802a15 	stw	r2,168(sp)
   47c38:	d8003215 	stw	zero,200(sp)
   47c3c:	e7003fcc 	andi	fp,fp,255
   47c40:	e700201c 	xori	fp,fp,128
   47c44:	e73fe004 	addi	fp,fp,-128
   47c48:	e0000326 	beq	fp,zero,47c58 <___svfprintf_internal_r+0x6d4>
   47c4c:	d8c02a17 	ldw	r3,168(sp)
   47c50:	18c00044 	addi	r3,r3,1
   47c54:	d8c02a15 	stw	r3,168(sp)
   47c58:	90c0008c 	andi	r3,r18,2
   47c5c:	d8c02b15 	stw	r3,172(sp)
   47c60:	18000326 	beq	r3,zero,47c70 <___svfprintf_internal_r+0x6ec>
   47c64:	d8c02a17 	ldw	r3,168(sp)
   47c68:	18c00084 	addi	r3,r3,2
   47c6c:	d8c02a15 	stw	r3,168(sp)
   47c70:	90c0210c 	andi	r3,r18,132
   47c74:	d8c03015 	stw	r3,192(sp)
   47c78:	1801a11e 	bne	r3,zero,48300 <___svfprintf_internal_r+0xd7c>
   47c7c:	d9003117 	ldw	r4,196(sp)
   47c80:	d8c02a17 	ldw	r3,168(sp)
   47c84:	20e9c83a 	sub	r20,r4,r3
   47c88:	05019d0e 	bge	zero,r20,48300 <___svfprintf_internal_r+0xd7c>
   47c8c:	02400404 	movi	r9,16
   47c90:	d8c02017 	ldw	r3,128(sp)
   47c94:	d8801f17 	ldw	r2,124(sp)
   47c98:	4d051b0e 	bge	r9,r20,49108 <___svfprintf_internal_r+0x1b84>
   47c9c:	014001b4 	movhi	r5,6
   47ca0:	29757d84 	addi	r5,r5,-10762
   47ca4:	dc403c15 	stw	r17,240(sp)
   47ca8:	d9403515 	stw	r5,212(sp)
   47cac:	a023883a 	mov	r17,r20
   47cb0:	482d883a 	mov	r22,r9
   47cb4:	9029883a 	mov	r20,r18
   47cb8:	070001c4 	movi	fp,7
   47cbc:	8025883a 	mov	r18,r16
   47cc0:	dc002c17 	ldw	r16,176(sp)
   47cc4:	00000306 	br	47cd4 <___svfprintf_internal_r+0x750>
   47cc8:	8c7ffc04 	addi	r17,r17,-16
   47ccc:	42000204 	addi	r8,r8,8
   47cd0:	b440130e 	bge	r22,r17,47d20 <___svfprintf_internal_r+0x79c>
   47cd4:	010001b4 	movhi	r4,6
   47cd8:	18c00404 	addi	r3,r3,16
   47cdc:	10800044 	addi	r2,r2,1
   47ce0:	21357d84 	addi	r4,r4,-10762
   47ce4:	41000015 	stw	r4,0(r8)
   47ce8:	45800115 	stw	r22,4(r8)
   47cec:	d8c02015 	stw	r3,128(sp)
   47cf0:	d8801f15 	stw	r2,124(sp)
   47cf4:	e0bff40e 	bge	fp,r2,47cc8 <__alt_mem_epcs_flash_controller+0xfe036cc8>
   47cf8:	d9801e04 	addi	r6,sp,120
   47cfc:	800b883a 	mov	r5,r16
   47d00:	9809883a 	mov	r4,r19
   47d04:	004fd9c0 	call	4fd9c <__ssprint_r>
   47d08:	103f031e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   47d0c:	8c7ffc04 	addi	r17,r17,-16
   47d10:	d8c02017 	ldw	r3,128(sp)
   47d14:	d8801f17 	ldw	r2,124(sp)
   47d18:	da000404 	addi	r8,sp,16
   47d1c:	b47fed16 	blt	r22,r17,47cd4 <__alt_mem_epcs_flash_controller+0xfe036cd4>
   47d20:	9021883a 	mov	r16,r18
   47d24:	a025883a 	mov	r18,r20
   47d28:	8829883a 	mov	r20,r17
   47d2c:	dc403c17 	ldw	r17,240(sp)
   47d30:	d9403517 	ldw	r5,212(sp)
   47d34:	a0c7883a 	add	r3,r20,r3
   47d38:	10800044 	addi	r2,r2,1
   47d3c:	41400015 	stw	r5,0(r8)
   47d40:	45000115 	stw	r20,4(r8)
   47d44:	d8c02015 	stw	r3,128(sp)
   47d48:	d8801f15 	stw	r2,124(sp)
   47d4c:	010001c4 	movi	r4,7
   47d50:	20829f16 	blt	r4,r2,487d0 <___svfprintf_internal_r+0x124c>
   47d54:	df002787 	ldb	fp,158(sp)
   47d58:	42000204 	addi	r8,r8,8
   47d5c:	e0000c26 	beq	fp,zero,47d90 <___svfprintf_internal_r+0x80c>
   47d60:	d8801f17 	ldw	r2,124(sp)
   47d64:	d9002784 	addi	r4,sp,158
   47d68:	18c00044 	addi	r3,r3,1
   47d6c:	10800044 	addi	r2,r2,1
   47d70:	41000015 	stw	r4,0(r8)
   47d74:	01000044 	movi	r4,1
   47d78:	41000115 	stw	r4,4(r8)
   47d7c:	d8c02015 	stw	r3,128(sp)
   47d80:	d8801f15 	stw	r2,124(sp)
   47d84:	010001c4 	movi	r4,7
   47d88:	20823816 	blt	r4,r2,4866c <___svfprintf_internal_r+0x10e8>
   47d8c:	42000204 	addi	r8,r8,8
   47d90:	d8802b17 	ldw	r2,172(sp)
   47d94:	10000c26 	beq	r2,zero,47dc8 <___svfprintf_internal_r+0x844>
   47d98:	d8801f17 	ldw	r2,124(sp)
   47d9c:	d9002704 	addi	r4,sp,156
   47da0:	18c00084 	addi	r3,r3,2
   47da4:	10800044 	addi	r2,r2,1
   47da8:	41000015 	stw	r4,0(r8)
   47dac:	01000084 	movi	r4,2
   47db0:	41000115 	stw	r4,4(r8)
   47db4:	d8c02015 	stw	r3,128(sp)
   47db8:	d8801f15 	stw	r2,124(sp)
   47dbc:	010001c4 	movi	r4,7
   47dc0:	20823216 	blt	r4,r2,4868c <___svfprintf_internal_r+0x1108>
   47dc4:	42000204 	addi	r8,r8,8
   47dc8:	d9003017 	ldw	r4,192(sp)
   47dcc:	00802004 	movi	r2,128
   47dd0:	20819726 	beq	r4,r2,48430 <___svfprintf_internal_r+0xeac>
   47dd4:	d9402917 	ldw	r5,164(sp)
   47dd8:	d8802e17 	ldw	r2,184(sp)
   47ddc:	28adc83a 	sub	r22,r5,r2
   47de0:	05802f0e 	bge	zero,r22,47ea0 <___svfprintf_internal_r+0x91c>
   47de4:	07000404 	movi	fp,16
   47de8:	d8801f17 	ldw	r2,124(sp)
   47dec:	e583c00e 	bge	fp,r22,48cf0 <___svfprintf_internal_r+0x176c>
   47df0:	014001b4 	movhi	r5,6
   47df4:	29757984 	addi	r5,r5,-10778
   47df8:	dc402915 	stw	r17,164(sp)
   47dfc:	d9402b15 	stw	r5,172(sp)
   47e00:	b023883a 	mov	r17,r22
   47e04:	050001c4 	movi	r20,7
   47e08:	902d883a 	mov	r22,r18
   47e0c:	8025883a 	mov	r18,r16
   47e10:	dc002c17 	ldw	r16,176(sp)
   47e14:	00000306 	br	47e24 <___svfprintf_internal_r+0x8a0>
   47e18:	8c7ffc04 	addi	r17,r17,-16
   47e1c:	42000204 	addi	r8,r8,8
   47e20:	e440110e 	bge	fp,r17,47e68 <___svfprintf_internal_r+0x8e4>
   47e24:	18c00404 	addi	r3,r3,16
   47e28:	10800044 	addi	r2,r2,1
   47e2c:	45400015 	stw	r21,0(r8)
   47e30:	47000115 	stw	fp,4(r8)
   47e34:	d8c02015 	stw	r3,128(sp)
   47e38:	d8801f15 	stw	r2,124(sp)
   47e3c:	a0bff60e 	bge	r20,r2,47e18 <__alt_mem_epcs_flash_controller+0xfe036e18>
   47e40:	d9801e04 	addi	r6,sp,120
   47e44:	800b883a 	mov	r5,r16
   47e48:	9809883a 	mov	r4,r19
   47e4c:	004fd9c0 	call	4fd9c <__ssprint_r>
   47e50:	103eb11e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   47e54:	8c7ffc04 	addi	r17,r17,-16
   47e58:	d8c02017 	ldw	r3,128(sp)
   47e5c:	d8801f17 	ldw	r2,124(sp)
   47e60:	da000404 	addi	r8,sp,16
   47e64:	e47fef16 	blt	fp,r17,47e24 <__alt_mem_epcs_flash_controller+0xfe036e24>
   47e68:	9021883a 	mov	r16,r18
   47e6c:	b025883a 	mov	r18,r22
   47e70:	882d883a 	mov	r22,r17
   47e74:	dc402917 	ldw	r17,164(sp)
   47e78:	d9002b17 	ldw	r4,172(sp)
   47e7c:	1d87883a 	add	r3,r3,r22
   47e80:	10800044 	addi	r2,r2,1
   47e84:	41000015 	stw	r4,0(r8)
   47e88:	45800115 	stw	r22,4(r8)
   47e8c:	d8c02015 	stw	r3,128(sp)
   47e90:	d8801f15 	stw	r2,124(sp)
   47e94:	010001c4 	movi	r4,7
   47e98:	2081ec16 	blt	r4,r2,4864c <___svfprintf_internal_r+0x10c8>
   47e9c:	42000204 	addi	r8,r8,8
   47ea0:	9080400c 	andi	r2,r18,256
   47ea4:	1001181e 	bne	r2,zero,48308 <___svfprintf_internal_r+0xd84>
   47ea8:	d9402e17 	ldw	r5,184(sp)
   47eac:	d8801f17 	ldw	r2,124(sp)
   47eb0:	44000015 	stw	r16,0(r8)
   47eb4:	1947883a 	add	r3,r3,r5
   47eb8:	10800044 	addi	r2,r2,1
   47ebc:	41400115 	stw	r5,4(r8)
   47ec0:	d8c02015 	stw	r3,128(sp)
   47ec4:	d8801f15 	stw	r2,124(sp)
   47ec8:	010001c4 	movi	r4,7
   47ecc:	2081d116 	blt	r4,r2,48614 <___svfprintf_internal_r+0x1090>
   47ed0:	42000204 	addi	r8,r8,8
   47ed4:	9480010c 	andi	r18,r18,4
   47ed8:	90003226 	beq	r18,zero,47fa4 <___svfprintf_internal_r+0xa20>
   47edc:	d9403117 	ldw	r5,196(sp)
   47ee0:	d8802a17 	ldw	r2,168(sp)
   47ee4:	28a1c83a 	sub	r16,r5,r2
   47ee8:	04002e0e 	bge	zero,r16,47fa4 <___svfprintf_internal_r+0xa20>
   47eec:	04400404 	movi	r17,16
   47ef0:	d8801f17 	ldw	r2,124(sp)
   47ef4:	8c04b90e 	bge	r17,r16,491dc <___svfprintf_internal_r+0x1c58>
   47ef8:	014001b4 	movhi	r5,6
   47efc:	29757d84 	addi	r5,r5,-10762
   47f00:	d9403515 	stw	r5,212(sp)
   47f04:	048001c4 	movi	r18,7
   47f08:	dd002c17 	ldw	r20,176(sp)
   47f0c:	00000306 	br	47f1c <___svfprintf_internal_r+0x998>
   47f10:	843ffc04 	addi	r16,r16,-16
   47f14:	42000204 	addi	r8,r8,8
   47f18:	8c00130e 	bge	r17,r16,47f68 <___svfprintf_internal_r+0x9e4>
   47f1c:	010001b4 	movhi	r4,6
   47f20:	18c00404 	addi	r3,r3,16
   47f24:	10800044 	addi	r2,r2,1
   47f28:	21357d84 	addi	r4,r4,-10762
   47f2c:	41000015 	stw	r4,0(r8)
   47f30:	44400115 	stw	r17,4(r8)
   47f34:	d8c02015 	stw	r3,128(sp)
   47f38:	d8801f15 	stw	r2,124(sp)
   47f3c:	90bff40e 	bge	r18,r2,47f10 <__alt_mem_epcs_flash_controller+0xfe036f10>
   47f40:	d9801e04 	addi	r6,sp,120
   47f44:	a00b883a 	mov	r5,r20
   47f48:	9809883a 	mov	r4,r19
   47f4c:	004fd9c0 	call	4fd9c <__ssprint_r>
   47f50:	103e711e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   47f54:	843ffc04 	addi	r16,r16,-16
   47f58:	d8c02017 	ldw	r3,128(sp)
   47f5c:	d8801f17 	ldw	r2,124(sp)
   47f60:	da000404 	addi	r8,sp,16
   47f64:	8c3fed16 	blt	r17,r16,47f1c <__alt_mem_epcs_flash_controller+0xfe036f1c>
   47f68:	d9403517 	ldw	r5,212(sp)
   47f6c:	1c07883a 	add	r3,r3,r16
   47f70:	10800044 	addi	r2,r2,1
   47f74:	41400015 	stw	r5,0(r8)
   47f78:	44000115 	stw	r16,4(r8)
   47f7c:	d8c02015 	stw	r3,128(sp)
   47f80:	d8801f15 	stw	r2,124(sp)
   47f84:	010001c4 	movi	r4,7
   47f88:	2080060e 	bge	r4,r2,47fa4 <___svfprintf_internal_r+0xa20>
   47f8c:	d9402c17 	ldw	r5,176(sp)
   47f90:	d9801e04 	addi	r6,sp,120
   47f94:	9809883a 	mov	r4,r19
   47f98:	004fd9c0 	call	4fd9c <__ssprint_r>
   47f9c:	103e5e1e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   47fa0:	d8c02017 	ldw	r3,128(sp)
   47fa4:	d8803117 	ldw	r2,196(sp)
   47fa8:	d9002a17 	ldw	r4,168(sp)
   47fac:	1100010e 	bge	r2,r4,47fb4 <___svfprintf_internal_r+0xa30>
   47fb0:	2005883a 	mov	r2,r4
   47fb4:	d9402f17 	ldw	r5,188(sp)
   47fb8:	288b883a 	add	r5,r5,r2
   47fbc:	d9402f15 	stw	r5,188(sp)
   47fc0:	18019c1e 	bne	r3,zero,48634 <___svfprintf_internal_r+0x10b0>
   47fc4:	b8800007 	ldb	r2,0(r23)
   47fc8:	d8001f15 	stw	zero,124(sp)
   47fcc:	da000404 	addi	r8,sp,16
   47fd0:	103d991e 	bne	r2,zero,47638 <__alt_mem_epcs_flash_controller+0xfe036638>
   47fd4:	b821883a 	mov	r16,r23
   47fd8:	003daf06 	br	47698 <__alt_mem_epcs_flash_controller+0xfe036698>
   47fdc:	18c03fcc 	andi	r3,r3,255
   47fe0:	1805c71e 	bne	r3,zero,49700 <___svfprintf_internal_r+0x217c>
   47fe4:	94800414 	ori	r18,r18,16
   47fe8:	9080080c 	andi	r2,r18,32
   47fec:	10020126 	beq	r2,zero,487f4 <___svfprintf_internal_r+0x1270>
   47ff0:	d8802d17 	ldw	r2,180(sp)
   47ff4:	d9002917 	ldw	r4,164(sp)
   47ff8:	d8002785 	stb	zero,158(sp)
   47ffc:	10c00204 	addi	r3,r2,8
   48000:	15000017 	ldw	r20,0(r2)
   48004:	15800117 	ldw	r22,4(r2)
   48008:	20038e16 	blt	r4,zero,48e44 <___svfprintf_internal_r+0x18c0>
   4800c:	013fdfc4 	movi	r4,-129
   48010:	a584b03a 	or	r2,r20,r22
   48014:	d8c02d15 	stw	r3,180(sp)
   48018:	9124703a 	and	r18,r18,r4
   4801c:	0039883a 	mov	fp,zero
   48020:	103eb61e 	bne	r2,zero,47afc <__alt_mem_epcs_flash_controller+0xfe036afc>
   48024:	d8802917 	ldw	r2,164(sp)
   48028:	1002c81e 	bne	r2,zero,48b4c <___svfprintf_internal_r+0x15c8>
   4802c:	d8002915 	stw	zero,164(sp)
   48030:	d8002e15 	stw	zero,184(sp)
   48034:	dc001e04 	addi	r16,sp,120
   48038:	003efa06 	br	47c24 <__alt_mem_epcs_flash_controller+0xfe036c24>
   4803c:	18c03fcc 	andi	r3,r3,255
   48040:	1805ad1e 	bne	r3,zero,496f8 <___svfprintf_internal_r+0x2174>
   48044:	014001b4 	movhi	r5,6
   48048:	29756d04 	addi	r5,r5,-10828
   4804c:	d9403a15 	stw	r5,232(sp)
   48050:	9080080c 	andi	r2,r18,32
   48054:	10006126 	beq	r2,zero,481dc <___svfprintf_internal_r+0xc58>
   48058:	d8802d17 	ldw	r2,180(sp)
   4805c:	15000017 	ldw	r20,0(r2)
   48060:	15800117 	ldw	r22,4(r2)
   48064:	10800204 	addi	r2,r2,8
   48068:	d8802d15 	stw	r2,180(sp)
   4806c:	9080004c 	andi	r2,r18,1
   48070:	10018e26 	beq	r2,zero,486ac <___svfprintf_internal_r+0x1128>
   48074:	a584b03a 	or	r2,r20,r22
   48078:	10030926 	beq	r2,zero,48ca0 <___svfprintf_internal_r+0x171c>
   4807c:	d8c02917 	ldw	r3,164(sp)
   48080:	00800c04 	movi	r2,48
   48084:	d8802705 	stb	r2,156(sp)
   48088:	dc402745 	stb	r17,157(sp)
   4808c:	d8002785 	stb	zero,158(sp)
   48090:	90800094 	ori	r2,r18,2
   48094:	18048716 	blt	r3,zero,492b4 <___svfprintf_internal_r+0x1d30>
   48098:	00bfdfc4 	movi	r2,-129
   4809c:	90a4703a 	and	r18,r18,r2
   480a0:	94800094 	ori	r18,r18,2
   480a4:	0039883a 	mov	fp,zero
   480a8:	d9003a17 	ldw	r4,232(sp)
   480ac:	dc001e04 	addi	r16,sp,120
   480b0:	a08003cc 	andi	r2,r20,15
   480b4:	b006973a 	slli	r3,r22,28
   480b8:	2085883a 	add	r2,r4,r2
   480bc:	a028d13a 	srli	r20,r20,4
   480c0:	10800003 	ldbu	r2,0(r2)
   480c4:	b02cd13a 	srli	r22,r22,4
   480c8:	843fffc4 	addi	r16,r16,-1
   480cc:	1d28b03a 	or	r20,r3,r20
   480d0:	80800005 	stb	r2,0(r16)
   480d4:	a584b03a 	or	r2,r20,r22
   480d8:	103ff51e 	bne	r2,zero,480b0 <__alt_mem_epcs_flash_controller+0xfe0370b0>
   480dc:	d8c02817 	ldw	r3,160(sp)
   480e0:	1c07c83a 	sub	r3,r3,r16
   480e4:	d8c02e15 	stw	r3,184(sp)
   480e8:	003ece06 	br	47c24 <__alt_mem_epcs_flash_controller+0xfe036c24>
   480ec:	d8c02d17 	ldw	r3,180(sp)
   480f0:	d9002d17 	ldw	r4,180(sp)
   480f4:	d8002785 	stb	zero,158(sp)
   480f8:	18800017 	ldw	r2,0(r3)
   480fc:	21000104 	addi	r4,r4,4
   48100:	00c00044 	movi	r3,1
   48104:	d8c02a15 	stw	r3,168(sp)
   48108:	d8801405 	stb	r2,80(sp)
   4810c:	d9002d15 	stw	r4,180(sp)
   48110:	d8c02e15 	stw	r3,184(sp)
   48114:	d8002915 	stw	zero,164(sp)
   48118:	d8003215 	stw	zero,200(sp)
   4811c:	dc001404 	addi	r16,sp,80
   48120:	0039883a 	mov	fp,zero
   48124:	003ecc06 	br	47c58 <__alt_mem_epcs_flash_controller+0xfe036c58>
   48128:	18c03fcc 	andi	r3,r3,255
   4812c:	183e9226 	beq	r3,zero,47b78 <__alt_mem_epcs_flash_controller+0xfe036b78>
   48130:	d9c02785 	stb	r7,158(sp)
   48134:	003e9006 	br	47b78 <__alt_mem_epcs_flash_controller+0xfe036b78>
   48138:	00c00044 	movi	r3,1
   4813c:	01c00ac4 	movi	r7,43
   48140:	bc400007 	ldb	r17,0(r23)
   48144:	003d6306 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   48148:	94800814 	ori	r18,r18,32
   4814c:	bc400007 	ldb	r17,0(r23)
   48150:	003d6006 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   48154:	d8c02d17 	ldw	r3,180(sp)
   48158:	d8002785 	stb	zero,158(sp)
   4815c:	1c000017 	ldw	r16,0(r3)
   48160:	1d000104 	addi	r20,r3,4
   48164:	80040f26 	beq	r16,zero,491a4 <___svfprintf_internal_r+0x1c20>
   48168:	d9002917 	ldw	r4,164(sp)
   4816c:	2003dc16 	blt	r4,zero,490e0 <___svfprintf_internal_r+0x1b5c>
   48170:	200d883a 	mov	r6,r4
   48174:	000b883a 	mov	r5,zero
   48178:	8009883a 	mov	r4,r16
   4817c:	da003e15 	stw	r8,248(sp)
   48180:	004e9a40 	call	4e9a4 <memchr>
   48184:	da003e17 	ldw	r8,248(sp)
   48188:	10045826 	beq	r2,zero,492ec <___svfprintf_internal_r+0x1d68>
   4818c:	1405c83a 	sub	r2,r2,r16
   48190:	d8802e15 	stw	r2,184(sp)
   48194:	1003d816 	blt	r2,zero,490f8 <___svfprintf_internal_r+0x1b74>
   48198:	df002783 	ldbu	fp,158(sp)
   4819c:	d8802a15 	stw	r2,168(sp)
   481a0:	dd002d15 	stw	r20,180(sp)
   481a4:	d8002915 	stw	zero,164(sp)
   481a8:	d8003215 	stw	zero,200(sp)
   481ac:	003ea306 	br	47c3c <__alt_mem_epcs_flash_controller+0xfe036c3c>
   481b0:	18c03fcc 	andi	r3,r3,255
   481b4:	183f8c26 	beq	r3,zero,47fe8 <__alt_mem_epcs_flash_controller+0xfe036fe8>
   481b8:	d9c02785 	stb	r7,158(sp)
   481bc:	003f8a06 	br	47fe8 <__alt_mem_epcs_flash_controller+0xfe036fe8>
   481c0:	18c03fcc 	andi	r3,r3,255
   481c4:	1805631e 	bne	r3,zero,49754 <___svfprintf_internal_r+0x21d0>
   481c8:	014001b4 	movhi	r5,6
   481cc:	29757204 	addi	r5,r5,-10808
   481d0:	d9403a15 	stw	r5,232(sp)
   481d4:	9080080c 	andi	r2,r18,32
   481d8:	103f9f1e 	bne	r2,zero,48058 <__alt_mem_epcs_flash_controller+0xfe037058>
   481dc:	9080040c 	andi	r2,r18,16
   481e0:	10029c26 	beq	r2,zero,48c54 <___svfprintf_internal_r+0x16d0>
   481e4:	d8c02d17 	ldw	r3,180(sp)
   481e8:	002d883a 	mov	r22,zero
   481ec:	1d000017 	ldw	r20,0(r3)
   481f0:	18c00104 	addi	r3,r3,4
   481f4:	d8c02d15 	stw	r3,180(sp)
   481f8:	003f9c06 	br	4806c <__alt_mem_epcs_flash_controller+0xfe03706c>
   481fc:	94800054 	ori	r18,r18,1
   48200:	bc400007 	ldb	r17,0(r23)
   48204:	003d3306 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   48208:	38803fcc 	andi	r2,r7,255
   4820c:	1080201c 	xori	r2,r2,128
   48210:	10bfe004 	addi	r2,r2,-128
   48214:	1002971e 	bne	r2,zero,48c74 <___svfprintf_internal_r+0x16f0>
   48218:	00c00044 	movi	r3,1
   4821c:	01c00804 	movi	r7,32
   48220:	bc400007 	ldb	r17,0(r23)
   48224:	003d2b06 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   48228:	18c03fcc 	andi	r3,r3,255
   4822c:	183e2326 	beq	r3,zero,47abc <__alt_mem_epcs_flash_controller+0xfe036abc>
   48230:	d9c02785 	stb	r7,158(sp)
   48234:	003e2106 	br	47abc <__alt_mem_epcs_flash_controller+0xfe036abc>
   48238:	bc400007 	ldb	r17,0(r23)
   4823c:	8a430426 	beq	r17,r9,48e50 <___svfprintf_internal_r+0x18cc>
   48240:	94800414 	ori	r18,r18,16
   48244:	003d2306 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   48248:	18c03fcc 	andi	r3,r3,255
   4824c:	18053f1e 	bne	r3,zero,4974c <___svfprintf_internal_r+0x21c8>
   48250:	9080080c 	andi	r2,r18,32
   48254:	10028926 	beq	r2,zero,48c7c <___svfprintf_internal_r+0x16f8>
   48258:	d9402d17 	ldw	r5,180(sp)
   4825c:	d9002f17 	ldw	r4,188(sp)
   48260:	28800017 	ldw	r2,0(r5)
   48264:	2007d7fa 	srai	r3,r4,31
   48268:	29400104 	addi	r5,r5,4
   4826c:	d9402d15 	stw	r5,180(sp)
   48270:	11000015 	stw	r4,0(r2)
   48274:	10c00115 	stw	r3,4(r2)
   48278:	003ced06 	br	47630 <__alt_mem_epcs_flash_controller+0xfe036630>
   4827c:	94801014 	ori	r18,r18,64
   48280:	bc400007 	ldb	r17,0(r23)
   48284:	003d1306 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   48288:	010001b4 	movhi	r4,6
   4828c:	21357204 	addi	r4,r4,-10808
   48290:	0039883a 	mov	fp,zero
   48294:	d9003a15 	stw	r4,232(sp)
   48298:	04401e04 	movi	r17,120
   4829c:	003f8206 	br	480a8 <__alt_mem_epcs_flash_controller+0xfe0370a8>
   482a0:	18c03fcc 	andi	r3,r3,255
   482a4:	1805221e 	bne	r3,zero,49730 <___svfprintf_internal_r+0x21ac>
   482a8:	883d9526 	beq	r17,zero,47900 <__alt_mem_epcs_flash_controller+0xfe036900>
   482ac:	00c00044 	movi	r3,1
   482b0:	d8c02a15 	stw	r3,168(sp)
   482b4:	dc401405 	stb	r17,80(sp)
   482b8:	d8002785 	stb	zero,158(sp)
   482bc:	003f9406 	br	48110 <__alt_mem_epcs_flash_controller+0xfe037110>
   482c0:	010001b4 	movhi	r4,6
   482c4:	21357204 	addi	r4,r4,-10808
   482c8:	d9003a15 	stw	r4,232(sp)
   482cc:	d8c02d15 	stw	r3,180(sp)
   482d0:	1025883a 	mov	r18,r2
   482d4:	04401e04 	movi	r17,120
   482d8:	a584b03a 	or	r2,r20,r22
   482dc:	1000fa1e 	bne	r2,zero,486c8 <___svfprintf_internal_r+0x1144>
   482e0:	0039883a 	mov	fp,zero
   482e4:	00800084 	movi	r2,2
   482e8:	10803fcc 	andi	r2,r2,255
   482ec:	00c00044 	movi	r3,1
   482f0:	10c21626 	beq	r2,r3,48b4c <___svfprintf_internal_r+0x15c8>
   482f4:	00c00084 	movi	r3,2
   482f8:	10fe301e 	bne	r2,r3,47bbc <__alt_mem_epcs_flash_controller+0xfe036bbc>
   482fc:	003d7606 	br	478d8 <__alt_mem_epcs_flash_controller+0xfe0368d8>
   48300:	d8c02017 	ldw	r3,128(sp)
   48304:	003e9506 	br	47d5c <__alt_mem_epcs_flash_controller+0xfe036d5c>
   48308:	00801944 	movi	r2,101
   4830c:	14407c0e 	bge	r2,r17,48500 <___svfprintf_internal_r+0xf7c>
   48310:	d9003617 	ldw	r4,216(sp)
   48314:	d9403717 	ldw	r5,220(sp)
   48318:	000d883a 	mov	r6,zero
   4831c:	000f883a 	mov	r7,zero
   48320:	d8c03d15 	stw	r3,244(sp)
   48324:	da003e15 	stw	r8,248(sp)
   48328:	0053b100 	call	53b10 <__eqdf2>
   4832c:	d8c03d17 	ldw	r3,244(sp)
   48330:	da003e17 	ldw	r8,248(sp)
   48334:	1000f51e 	bne	r2,zero,4870c <___svfprintf_internal_r+0x1188>
   48338:	d8801f17 	ldw	r2,124(sp)
   4833c:	010001b4 	movhi	r4,6
   48340:	21357904 	addi	r4,r4,-10780
   48344:	18c00044 	addi	r3,r3,1
   48348:	10800044 	addi	r2,r2,1
   4834c:	41000015 	stw	r4,0(r8)
   48350:	01000044 	movi	r4,1
   48354:	41000115 	stw	r4,4(r8)
   48358:	d8c02015 	stw	r3,128(sp)
   4835c:	d8801f15 	stw	r2,124(sp)
   48360:	010001c4 	movi	r4,7
   48364:	20826616 	blt	r4,r2,48d00 <___svfprintf_internal_r+0x177c>
   48368:	42000204 	addi	r8,r8,8
   4836c:	d8802617 	ldw	r2,152(sp)
   48370:	d9403317 	ldw	r5,204(sp)
   48374:	11400216 	blt	r2,r5,48380 <___svfprintf_internal_r+0xdfc>
   48378:	9080004c 	andi	r2,r18,1
   4837c:	103ed526 	beq	r2,zero,47ed4 <__alt_mem_epcs_flash_controller+0xfe036ed4>
   48380:	d8803817 	ldw	r2,224(sp)
   48384:	d9003417 	ldw	r4,208(sp)
   48388:	d9403817 	ldw	r5,224(sp)
   4838c:	1887883a 	add	r3,r3,r2
   48390:	d8801f17 	ldw	r2,124(sp)
   48394:	41000015 	stw	r4,0(r8)
   48398:	41400115 	stw	r5,4(r8)
   4839c:	10800044 	addi	r2,r2,1
   483a0:	d8c02015 	stw	r3,128(sp)
   483a4:	d8801f15 	stw	r2,124(sp)
   483a8:	010001c4 	movi	r4,7
   483ac:	2082af16 	blt	r4,r2,48e6c <___svfprintf_internal_r+0x18e8>
   483b0:	42000204 	addi	r8,r8,8
   483b4:	d8803317 	ldw	r2,204(sp)
   483b8:	143fffc4 	addi	r16,r2,-1
   483bc:	043ec50e 	bge	zero,r16,47ed4 <__alt_mem_epcs_flash_controller+0xfe036ed4>
   483c0:	04400404 	movi	r17,16
   483c4:	d8801f17 	ldw	r2,124(sp)
   483c8:	8c00860e 	bge	r17,r16,485e4 <___svfprintf_internal_r+0x1060>
   483cc:	014001b4 	movhi	r5,6
   483d0:	29757984 	addi	r5,r5,-10778
   483d4:	d9402b15 	stw	r5,172(sp)
   483d8:	058001c4 	movi	r22,7
   483dc:	dd002c17 	ldw	r20,176(sp)
   483e0:	00000306 	br	483f0 <___svfprintf_internal_r+0xe6c>
   483e4:	42000204 	addi	r8,r8,8
   483e8:	843ffc04 	addi	r16,r16,-16
   483ec:	8c00800e 	bge	r17,r16,485f0 <___svfprintf_internal_r+0x106c>
   483f0:	18c00404 	addi	r3,r3,16
   483f4:	10800044 	addi	r2,r2,1
   483f8:	45400015 	stw	r21,0(r8)
   483fc:	44400115 	stw	r17,4(r8)
   48400:	d8c02015 	stw	r3,128(sp)
   48404:	d8801f15 	stw	r2,124(sp)
   48408:	b0bff60e 	bge	r22,r2,483e4 <__alt_mem_epcs_flash_controller+0xfe0373e4>
   4840c:	d9801e04 	addi	r6,sp,120
   48410:	a00b883a 	mov	r5,r20
   48414:	9809883a 	mov	r4,r19
   48418:	004fd9c0 	call	4fd9c <__ssprint_r>
   4841c:	103d3e1e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48420:	d8c02017 	ldw	r3,128(sp)
   48424:	d8801f17 	ldw	r2,124(sp)
   48428:	da000404 	addi	r8,sp,16
   4842c:	003fee06 	br	483e8 <__alt_mem_epcs_flash_controller+0xfe0373e8>
   48430:	d9403117 	ldw	r5,196(sp)
   48434:	d8802a17 	ldw	r2,168(sp)
   48438:	28adc83a 	sub	r22,r5,r2
   4843c:	05be650e 	bge	zero,r22,47dd4 <__alt_mem_epcs_flash_controller+0xfe036dd4>
   48440:	07000404 	movi	fp,16
   48444:	d8801f17 	ldw	r2,124(sp)
   48448:	e583a20e 	bge	fp,r22,492d4 <___svfprintf_internal_r+0x1d50>
   4844c:	014001b4 	movhi	r5,6
   48450:	29757984 	addi	r5,r5,-10778
   48454:	dc403015 	stw	r17,192(sp)
   48458:	d9402b15 	stw	r5,172(sp)
   4845c:	b023883a 	mov	r17,r22
   48460:	050001c4 	movi	r20,7
   48464:	902d883a 	mov	r22,r18
   48468:	8025883a 	mov	r18,r16
   4846c:	dc002c17 	ldw	r16,176(sp)
   48470:	00000306 	br	48480 <___svfprintf_internal_r+0xefc>
   48474:	8c7ffc04 	addi	r17,r17,-16
   48478:	42000204 	addi	r8,r8,8
   4847c:	e440110e 	bge	fp,r17,484c4 <___svfprintf_internal_r+0xf40>
   48480:	18c00404 	addi	r3,r3,16
   48484:	10800044 	addi	r2,r2,1
   48488:	45400015 	stw	r21,0(r8)
   4848c:	47000115 	stw	fp,4(r8)
   48490:	d8c02015 	stw	r3,128(sp)
   48494:	d8801f15 	stw	r2,124(sp)
   48498:	a0bff60e 	bge	r20,r2,48474 <__alt_mem_epcs_flash_controller+0xfe037474>
   4849c:	d9801e04 	addi	r6,sp,120
   484a0:	800b883a 	mov	r5,r16
   484a4:	9809883a 	mov	r4,r19
   484a8:	004fd9c0 	call	4fd9c <__ssprint_r>
   484ac:	103d1a1e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   484b0:	8c7ffc04 	addi	r17,r17,-16
   484b4:	d8c02017 	ldw	r3,128(sp)
   484b8:	d8801f17 	ldw	r2,124(sp)
   484bc:	da000404 	addi	r8,sp,16
   484c0:	e47fef16 	blt	fp,r17,48480 <__alt_mem_epcs_flash_controller+0xfe037480>
   484c4:	9021883a 	mov	r16,r18
   484c8:	b025883a 	mov	r18,r22
   484cc:	882d883a 	mov	r22,r17
   484d0:	dc403017 	ldw	r17,192(sp)
   484d4:	d9002b17 	ldw	r4,172(sp)
   484d8:	1d87883a 	add	r3,r3,r22
   484dc:	10800044 	addi	r2,r2,1
   484e0:	41000015 	stw	r4,0(r8)
   484e4:	45800115 	stw	r22,4(r8)
   484e8:	d8c02015 	stw	r3,128(sp)
   484ec:	d8801f15 	stw	r2,124(sp)
   484f0:	010001c4 	movi	r4,7
   484f4:	20819a16 	blt	r4,r2,48b60 <___svfprintf_internal_r+0x15dc>
   484f8:	42000204 	addi	r8,r8,8
   484fc:	003e3506 	br	47dd4 <__alt_mem_epcs_flash_controller+0xfe036dd4>
   48500:	d9403317 	ldw	r5,204(sp)
   48504:	00800044 	movi	r2,1
   48508:	18c00044 	addi	r3,r3,1
   4850c:	1141710e 	bge	r2,r5,48ad4 <___svfprintf_internal_r+0x1550>
   48510:	dc401f17 	ldw	r17,124(sp)
   48514:	00800044 	movi	r2,1
   48518:	40800115 	stw	r2,4(r8)
   4851c:	8c400044 	addi	r17,r17,1
   48520:	44000015 	stw	r16,0(r8)
   48524:	d8c02015 	stw	r3,128(sp)
   48528:	dc401f15 	stw	r17,124(sp)
   4852c:	008001c4 	movi	r2,7
   48530:	14417416 	blt	r2,r17,48b04 <___svfprintf_internal_r+0x1580>
   48534:	42000204 	addi	r8,r8,8
   48538:	d8803817 	ldw	r2,224(sp)
   4853c:	d9003417 	ldw	r4,208(sp)
   48540:	8c400044 	addi	r17,r17,1
   48544:	10c7883a 	add	r3,r2,r3
   48548:	40800115 	stw	r2,4(r8)
   4854c:	41000015 	stw	r4,0(r8)
   48550:	d8c02015 	stw	r3,128(sp)
   48554:	dc401f15 	stw	r17,124(sp)
   48558:	008001c4 	movi	r2,7
   4855c:	14417216 	blt	r2,r17,48b28 <___svfprintf_internal_r+0x15a4>
   48560:	45800204 	addi	r22,r8,8
   48564:	d9003617 	ldw	r4,216(sp)
   48568:	d9403717 	ldw	r5,220(sp)
   4856c:	000d883a 	mov	r6,zero
   48570:	000f883a 	mov	r7,zero
   48574:	d8c03d15 	stw	r3,244(sp)
   48578:	0053b100 	call	53b10 <__eqdf2>
   4857c:	d8c03d17 	ldw	r3,244(sp)
   48580:	1000b326 	beq	r2,zero,48850 <___svfprintf_internal_r+0x12cc>
   48584:	d9403317 	ldw	r5,204(sp)
   48588:	84000044 	addi	r16,r16,1
   4858c:	8c400044 	addi	r17,r17,1
   48590:	28bfffc4 	addi	r2,r5,-1
   48594:	1887883a 	add	r3,r3,r2
   48598:	b0800115 	stw	r2,4(r22)
   4859c:	b4000015 	stw	r16,0(r22)
   485a0:	d8c02015 	stw	r3,128(sp)
   485a4:	dc401f15 	stw	r17,124(sp)
   485a8:	008001c4 	movi	r2,7
   485ac:	1440d216 	blt	r2,r17,488f8 <___svfprintf_internal_r+0x1374>
   485b0:	b5800204 	addi	r22,r22,8
   485b4:	d9003b17 	ldw	r4,236(sp)
   485b8:	df0022c4 	addi	fp,sp,139
   485bc:	8c400044 	addi	r17,r17,1
   485c0:	20c7883a 	add	r3,r4,r3
   485c4:	b7000015 	stw	fp,0(r22)
   485c8:	b1000115 	stw	r4,4(r22)
   485cc:	d8c02015 	stw	r3,128(sp)
   485d0:	dc401f15 	stw	r17,124(sp)
   485d4:	008001c4 	movi	r2,7
   485d8:	14400e16 	blt	r2,r17,48614 <___svfprintf_internal_r+0x1090>
   485dc:	b2000204 	addi	r8,r22,8
   485e0:	003e3c06 	br	47ed4 <__alt_mem_epcs_flash_controller+0xfe036ed4>
   485e4:	010001b4 	movhi	r4,6
   485e8:	21357984 	addi	r4,r4,-10778
   485ec:	d9002b15 	stw	r4,172(sp)
   485f0:	d9002b17 	ldw	r4,172(sp)
   485f4:	1c07883a 	add	r3,r3,r16
   485f8:	44000115 	stw	r16,4(r8)
   485fc:	41000015 	stw	r4,0(r8)
   48600:	10800044 	addi	r2,r2,1
   48604:	d8c02015 	stw	r3,128(sp)
   48608:	d8801f15 	stw	r2,124(sp)
   4860c:	010001c4 	movi	r4,7
   48610:	20be2f0e 	bge	r4,r2,47ed0 <__alt_mem_epcs_flash_controller+0xfe036ed0>
   48614:	d9402c17 	ldw	r5,176(sp)
   48618:	d9801e04 	addi	r6,sp,120
   4861c:	9809883a 	mov	r4,r19
   48620:	004fd9c0 	call	4fd9c <__ssprint_r>
   48624:	103cbc1e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48628:	d8c02017 	ldw	r3,128(sp)
   4862c:	da000404 	addi	r8,sp,16
   48630:	003e2806 	br	47ed4 <__alt_mem_epcs_flash_controller+0xfe036ed4>
   48634:	d9402c17 	ldw	r5,176(sp)
   48638:	d9801e04 	addi	r6,sp,120
   4863c:	9809883a 	mov	r4,r19
   48640:	004fd9c0 	call	4fd9c <__ssprint_r>
   48644:	103e5f26 	beq	r2,zero,47fc4 <__alt_mem_epcs_flash_controller+0xfe036fc4>
   48648:	003cb306 	br	47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   4864c:	d9402c17 	ldw	r5,176(sp)
   48650:	d9801e04 	addi	r6,sp,120
   48654:	9809883a 	mov	r4,r19
   48658:	004fd9c0 	call	4fd9c <__ssprint_r>
   4865c:	103cae1e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48660:	d8c02017 	ldw	r3,128(sp)
   48664:	da000404 	addi	r8,sp,16
   48668:	003e0d06 	br	47ea0 <__alt_mem_epcs_flash_controller+0xfe036ea0>
   4866c:	d9402c17 	ldw	r5,176(sp)
   48670:	d9801e04 	addi	r6,sp,120
   48674:	9809883a 	mov	r4,r19
   48678:	004fd9c0 	call	4fd9c <__ssprint_r>
   4867c:	103ca61e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48680:	d8c02017 	ldw	r3,128(sp)
   48684:	da000404 	addi	r8,sp,16
   48688:	003dc106 	br	47d90 <__alt_mem_epcs_flash_controller+0xfe036d90>
   4868c:	d9402c17 	ldw	r5,176(sp)
   48690:	d9801e04 	addi	r6,sp,120
   48694:	9809883a 	mov	r4,r19
   48698:	004fd9c0 	call	4fd9c <__ssprint_r>
   4869c:	103c9e1e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   486a0:	d8c02017 	ldw	r3,128(sp)
   486a4:	da000404 	addi	r8,sp,16
   486a8:	003dc706 	br	47dc8 <__alt_mem_epcs_flash_controller+0xfe036dc8>
   486ac:	d8802917 	ldw	r2,164(sp)
   486b0:	d8002785 	stb	zero,158(sp)
   486b4:	103f0816 	blt	r2,zero,482d8 <__alt_mem_epcs_flash_controller+0xfe0372d8>
   486b8:	00ffdfc4 	movi	r3,-129
   486bc:	a584b03a 	or	r2,r20,r22
   486c0:	90e4703a 	and	r18,r18,r3
   486c4:	103c8126 	beq	r2,zero,478cc <__alt_mem_epcs_flash_controller+0xfe0368cc>
   486c8:	0039883a 	mov	fp,zero
   486cc:	003e7606 	br	480a8 <__alt_mem_epcs_flash_controller+0xfe0370a8>
   486d0:	9080040c 	andi	r2,r18,16
   486d4:	10013d26 	beq	r2,zero,48bcc <___svfprintf_internal_r+0x1648>
   486d8:	d9002d17 	ldw	r4,180(sp)
   486dc:	d9402917 	ldw	r5,164(sp)
   486e0:	d8002785 	stb	zero,158(sp)
   486e4:	20800104 	addi	r2,r4,4
   486e8:	25000017 	ldw	r20,0(r4)
   486ec:	002d883a 	mov	r22,zero
   486f0:	28013f16 	blt	r5,zero,48bf0 <___svfprintf_internal_r+0x166c>
   486f4:	00ffdfc4 	movi	r3,-129
   486f8:	d8802d15 	stw	r2,180(sp)
   486fc:	90e4703a 	and	r18,r18,r3
   48700:	a03d2b26 	beq	r20,zero,47bb0 <__alt_mem_epcs_flash_controller+0xfe036bb0>
   48704:	0039883a 	mov	fp,zero
   48708:	003d2e06 	br	47bc4 <__alt_mem_epcs_flash_controller+0xfe036bc4>
   4870c:	dc402617 	ldw	r17,152(sp)
   48710:	0441830e 	bge	zero,r17,48d20 <___svfprintf_internal_r+0x179c>
   48714:	dc403217 	ldw	r17,200(sp)
   48718:	d8803317 	ldw	r2,204(sp)
   4871c:	1440010e 	bge	r2,r17,48724 <___svfprintf_internal_r+0x11a0>
   48720:	1023883a 	mov	r17,r2
   48724:	04400a0e 	bge	zero,r17,48750 <___svfprintf_internal_r+0x11cc>
   48728:	d8801f17 	ldw	r2,124(sp)
   4872c:	1c47883a 	add	r3,r3,r17
   48730:	44000015 	stw	r16,0(r8)
   48734:	10800044 	addi	r2,r2,1
   48738:	44400115 	stw	r17,4(r8)
   4873c:	d8c02015 	stw	r3,128(sp)
   48740:	d8801f15 	stw	r2,124(sp)
   48744:	010001c4 	movi	r4,7
   48748:	20827516 	blt	r4,r2,49120 <___svfprintf_internal_r+0x1b9c>
   4874c:	42000204 	addi	r8,r8,8
   48750:	88027b16 	blt	r17,zero,49140 <___svfprintf_internal_r+0x1bbc>
   48754:	d9003217 	ldw	r4,200(sp)
   48758:	2463c83a 	sub	r17,r4,r17
   4875c:	0440990e 	bge	zero,r17,489c4 <___svfprintf_internal_r+0x1440>
   48760:	05800404 	movi	r22,16
   48764:	d8801f17 	ldw	r2,124(sp)
   48768:	b441530e 	bge	r22,r17,48cb8 <___svfprintf_internal_r+0x1734>
   4876c:	010001b4 	movhi	r4,6
   48770:	21357984 	addi	r4,r4,-10778
   48774:	d9002b15 	stw	r4,172(sp)
   48778:	070001c4 	movi	fp,7
   4877c:	dd002c17 	ldw	r20,176(sp)
   48780:	00000306 	br	48790 <___svfprintf_internal_r+0x120c>
   48784:	42000204 	addi	r8,r8,8
   48788:	8c7ffc04 	addi	r17,r17,-16
   4878c:	b4414d0e 	bge	r22,r17,48cc4 <___svfprintf_internal_r+0x1740>
   48790:	18c00404 	addi	r3,r3,16
   48794:	10800044 	addi	r2,r2,1
   48798:	45400015 	stw	r21,0(r8)
   4879c:	45800115 	stw	r22,4(r8)
   487a0:	d8c02015 	stw	r3,128(sp)
   487a4:	d8801f15 	stw	r2,124(sp)
   487a8:	e0bff60e 	bge	fp,r2,48784 <__alt_mem_epcs_flash_controller+0xfe037784>
   487ac:	d9801e04 	addi	r6,sp,120
   487b0:	a00b883a 	mov	r5,r20
   487b4:	9809883a 	mov	r4,r19
   487b8:	004fd9c0 	call	4fd9c <__ssprint_r>
   487bc:	103c561e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   487c0:	d8c02017 	ldw	r3,128(sp)
   487c4:	d8801f17 	ldw	r2,124(sp)
   487c8:	da000404 	addi	r8,sp,16
   487cc:	003fee06 	br	48788 <__alt_mem_epcs_flash_controller+0xfe037788>
   487d0:	d9402c17 	ldw	r5,176(sp)
   487d4:	d9801e04 	addi	r6,sp,120
   487d8:	9809883a 	mov	r4,r19
   487dc:	004fd9c0 	call	4fd9c <__ssprint_r>
   487e0:	103c4d1e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   487e4:	d8c02017 	ldw	r3,128(sp)
   487e8:	df002787 	ldb	fp,158(sp)
   487ec:	da000404 	addi	r8,sp,16
   487f0:	003d5a06 	br	47d5c <__alt_mem_epcs_flash_controller+0xfe036d5c>
   487f4:	9080040c 	andi	r2,r18,16
   487f8:	10005c26 	beq	r2,zero,4896c <___svfprintf_internal_r+0x13e8>
   487fc:	d9402d17 	ldw	r5,180(sp)
   48800:	d8c02917 	ldw	r3,164(sp)
   48804:	d8002785 	stb	zero,158(sp)
   48808:	28800104 	addi	r2,r5,4
   4880c:	2d000017 	ldw	r20,0(r5)
   48810:	002d883a 	mov	r22,zero
   48814:	18005e16 	blt	r3,zero,48990 <___svfprintf_internal_r+0x140c>
   48818:	00ffdfc4 	movi	r3,-129
   4881c:	d8802d15 	stw	r2,180(sp)
   48820:	90e4703a 	and	r18,r18,r3
   48824:	0039883a 	mov	fp,zero
   48828:	a03dfe26 	beq	r20,zero,48024 <__alt_mem_epcs_flash_controller+0xfe037024>
   4882c:	00800244 	movi	r2,9
   48830:	153cb336 	bltu	r2,r20,47b00 <__alt_mem_epcs_flash_controller+0xfe036b00>
   48834:	a5000c04 	addi	r20,r20,48
   48838:	dc001dc4 	addi	r16,sp,119
   4883c:	dd001dc5 	stb	r20,119(sp)
   48840:	d8c02817 	ldw	r3,160(sp)
   48844:	1c07c83a 	sub	r3,r3,r16
   48848:	d8c02e15 	stw	r3,184(sp)
   4884c:	003cf506 	br	47c24 <__alt_mem_epcs_flash_controller+0xfe036c24>
   48850:	d8803317 	ldw	r2,204(sp)
   48854:	143fffc4 	addi	r16,r2,-1
   48858:	043f560e 	bge	zero,r16,485b4 <__alt_mem_epcs_flash_controller+0xfe0375b4>
   4885c:	07000404 	movi	fp,16
   48860:	e403530e 	bge	fp,r16,495b0 <___svfprintf_internal_r+0x202c>
   48864:	014001b4 	movhi	r5,6
   48868:	29757984 	addi	r5,r5,-10778
   4886c:	d9402b15 	stw	r5,172(sp)
   48870:	01c001c4 	movi	r7,7
   48874:	dd002c17 	ldw	r20,176(sp)
   48878:	00000306 	br	48888 <___svfprintf_internal_r+0x1304>
   4887c:	843ffc04 	addi	r16,r16,-16
   48880:	b5800204 	addi	r22,r22,8
   48884:	e400130e 	bge	fp,r16,488d4 <___svfprintf_internal_r+0x1350>
   48888:	18c00404 	addi	r3,r3,16
   4888c:	8c400044 	addi	r17,r17,1
   48890:	b5400015 	stw	r21,0(r22)
   48894:	b7000115 	stw	fp,4(r22)
   48898:	d8c02015 	stw	r3,128(sp)
   4889c:	dc401f15 	stw	r17,124(sp)
   488a0:	3c7ff60e 	bge	r7,r17,4887c <__alt_mem_epcs_flash_controller+0xfe03787c>
   488a4:	d9801e04 	addi	r6,sp,120
   488a8:	a00b883a 	mov	r5,r20
   488ac:	9809883a 	mov	r4,r19
   488b0:	d9c03d15 	stw	r7,244(sp)
   488b4:	004fd9c0 	call	4fd9c <__ssprint_r>
   488b8:	d9c03d17 	ldw	r7,244(sp)
   488bc:	103c161e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   488c0:	843ffc04 	addi	r16,r16,-16
   488c4:	d8c02017 	ldw	r3,128(sp)
   488c8:	dc401f17 	ldw	r17,124(sp)
   488cc:	dd800404 	addi	r22,sp,16
   488d0:	e43fed16 	blt	fp,r16,48888 <__alt_mem_epcs_flash_controller+0xfe037888>
   488d4:	d8802b17 	ldw	r2,172(sp)
   488d8:	1c07883a 	add	r3,r3,r16
   488dc:	8c400044 	addi	r17,r17,1
   488e0:	b0800015 	stw	r2,0(r22)
   488e4:	b4000115 	stw	r16,4(r22)
   488e8:	d8c02015 	stw	r3,128(sp)
   488ec:	dc401f15 	stw	r17,124(sp)
   488f0:	008001c4 	movi	r2,7
   488f4:	147f2e0e 	bge	r2,r17,485b0 <__alt_mem_epcs_flash_controller+0xfe0375b0>
   488f8:	d9402c17 	ldw	r5,176(sp)
   488fc:	d9801e04 	addi	r6,sp,120
   48900:	9809883a 	mov	r4,r19
   48904:	004fd9c0 	call	4fd9c <__ssprint_r>
   48908:	103c031e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   4890c:	d8c02017 	ldw	r3,128(sp)
   48910:	dc401f17 	ldw	r17,124(sp)
   48914:	dd800404 	addi	r22,sp,16
   48918:	003f2606 	br	485b4 <__alt_mem_epcs_flash_controller+0xfe0375b4>
   4891c:	9080040c 	andi	r2,r18,16
   48920:	1000c326 	beq	r2,zero,48c30 <___svfprintf_internal_r+0x16ac>
   48924:	d8802d17 	ldw	r2,180(sp)
   48928:	15000017 	ldw	r20,0(r2)
   4892c:	10800104 	addi	r2,r2,4
   48930:	d8802d15 	stw	r2,180(sp)
   48934:	a02dd7fa 	srai	r22,r20,31
   48938:	b005883a 	mov	r2,r22
   4893c:	103c680e 	bge	r2,zero,47ae0 <__alt_mem_epcs_flash_controller+0xfe036ae0>
   48940:	0529c83a 	sub	r20,zero,r20
   48944:	a004c03a 	cmpne	r2,r20,zero
   48948:	05adc83a 	sub	r22,zero,r22
   4894c:	b0adc83a 	sub	r22,r22,r2
   48950:	d8802917 	ldw	r2,164(sp)
   48954:	07000b44 	movi	fp,45
   48958:	df002785 	stb	fp,158(sp)
   4895c:	10022e16 	blt	r2,zero,49218 <___svfprintf_internal_r+0x1c94>
   48960:	00bfdfc4 	movi	r2,-129
   48964:	90a4703a 	and	r18,r18,r2
   48968:	003c6406 	br	47afc <__alt_mem_epcs_flash_controller+0xfe036afc>
   4896c:	9080100c 	andi	r2,r18,64
   48970:	d8002785 	stb	zero,158(sp)
   48974:	10012526 	beq	r2,zero,48e0c <___svfprintf_internal_r+0x1888>
   48978:	d9002d17 	ldw	r4,180(sp)
   4897c:	d9402917 	ldw	r5,164(sp)
   48980:	002d883a 	mov	r22,zero
   48984:	20800104 	addi	r2,r4,4
   48988:	2500000b 	ldhu	r20,0(r4)
   4898c:	283fa20e 	bge	r5,zero,48818 <__alt_mem_epcs_flash_controller+0xfe037818>
   48990:	d8802d15 	stw	r2,180(sp)
   48994:	0039883a 	mov	fp,zero
   48998:	a584b03a 	or	r2,r20,r22
   4899c:	103c571e 	bne	r2,zero,47afc <__alt_mem_epcs_flash_controller+0xfe036afc>
   489a0:	00800044 	movi	r2,1
   489a4:	003e5006 	br	482e8 <__alt_mem_epcs_flash_controller+0xfe0372e8>
   489a8:	d9402c17 	ldw	r5,176(sp)
   489ac:	d9801e04 	addi	r6,sp,120
   489b0:	9809883a 	mov	r4,r19
   489b4:	004fd9c0 	call	4fd9c <__ssprint_r>
   489b8:	103bd71e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   489bc:	d8c02017 	ldw	r3,128(sp)
   489c0:	da000404 	addi	r8,sp,16
   489c4:	d9003217 	ldw	r4,200(sp)
   489c8:	d8802617 	ldw	r2,152(sp)
   489cc:	d9403317 	ldw	r5,204(sp)
   489d0:	8123883a 	add	r17,r16,r4
   489d4:	11400216 	blt	r2,r5,489e0 <___svfprintf_internal_r+0x145c>
   489d8:	9100004c 	andi	r4,r18,1
   489dc:	20000d26 	beq	r4,zero,48a14 <___svfprintf_internal_r+0x1490>
   489e0:	d9003817 	ldw	r4,224(sp)
   489e4:	d9403417 	ldw	r5,208(sp)
   489e8:	1907883a 	add	r3,r3,r4
   489ec:	d9001f17 	ldw	r4,124(sp)
   489f0:	41400015 	stw	r5,0(r8)
   489f4:	d9403817 	ldw	r5,224(sp)
   489f8:	21000044 	addi	r4,r4,1
   489fc:	d8c02015 	stw	r3,128(sp)
   48a00:	41400115 	stw	r5,4(r8)
   48a04:	d9001f15 	stw	r4,124(sp)
   48a08:	014001c4 	movi	r5,7
   48a0c:	2901dc16 	blt	r5,r4,49180 <___svfprintf_internal_r+0x1bfc>
   48a10:	42000204 	addi	r8,r8,8
   48a14:	d9003317 	ldw	r4,204(sp)
   48a18:	8121883a 	add	r16,r16,r4
   48a1c:	2085c83a 	sub	r2,r4,r2
   48a20:	8461c83a 	sub	r16,r16,r17
   48a24:	1400010e 	bge	r2,r16,48a2c <___svfprintf_internal_r+0x14a8>
   48a28:	1021883a 	mov	r16,r2
   48a2c:	04000a0e 	bge	zero,r16,48a58 <___svfprintf_internal_r+0x14d4>
   48a30:	d9001f17 	ldw	r4,124(sp)
   48a34:	1c07883a 	add	r3,r3,r16
   48a38:	44400015 	stw	r17,0(r8)
   48a3c:	21000044 	addi	r4,r4,1
   48a40:	44000115 	stw	r16,4(r8)
   48a44:	d8c02015 	stw	r3,128(sp)
   48a48:	d9001f15 	stw	r4,124(sp)
   48a4c:	014001c4 	movi	r5,7
   48a50:	2901e616 	blt	r5,r4,491ec <___svfprintf_internal_r+0x1c68>
   48a54:	42000204 	addi	r8,r8,8
   48a58:	8001f616 	blt	r16,zero,49234 <___svfprintf_internal_r+0x1cb0>
   48a5c:	1421c83a 	sub	r16,r2,r16
   48a60:	043d1c0e 	bge	zero,r16,47ed4 <__alt_mem_epcs_flash_controller+0xfe036ed4>
   48a64:	04400404 	movi	r17,16
   48a68:	d8801f17 	ldw	r2,124(sp)
   48a6c:	8c3edd0e 	bge	r17,r16,485e4 <__alt_mem_epcs_flash_controller+0xfe0375e4>
   48a70:	014001b4 	movhi	r5,6
   48a74:	29757984 	addi	r5,r5,-10778
   48a78:	d9402b15 	stw	r5,172(sp)
   48a7c:	058001c4 	movi	r22,7
   48a80:	dd002c17 	ldw	r20,176(sp)
   48a84:	00000306 	br	48a94 <___svfprintf_internal_r+0x1510>
   48a88:	42000204 	addi	r8,r8,8
   48a8c:	843ffc04 	addi	r16,r16,-16
   48a90:	8c3ed70e 	bge	r17,r16,485f0 <__alt_mem_epcs_flash_controller+0xfe0375f0>
   48a94:	18c00404 	addi	r3,r3,16
   48a98:	10800044 	addi	r2,r2,1
   48a9c:	45400015 	stw	r21,0(r8)
   48aa0:	44400115 	stw	r17,4(r8)
   48aa4:	d8c02015 	stw	r3,128(sp)
   48aa8:	d8801f15 	stw	r2,124(sp)
   48aac:	b0bff60e 	bge	r22,r2,48a88 <__alt_mem_epcs_flash_controller+0xfe037a88>
   48ab0:	d9801e04 	addi	r6,sp,120
   48ab4:	a00b883a 	mov	r5,r20
   48ab8:	9809883a 	mov	r4,r19
   48abc:	004fd9c0 	call	4fd9c <__ssprint_r>
   48ac0:	103b951e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48ac4:	d8c02017 	ldw	r3,128(sp)
   48ac8:	d8801f17 	ldw	r2,124(sp)
   48acc:	da000404 	addi	r8,sp,16
   48ad0:	003fee06 	br	48a8c <__alt_mem_epcs_flash_controller+0xfe037a8c>
   48ad4:	9088703a 	and	r4,r18,r2
   48ad8:	203e8d1e 	bne	r4,zero,48510 <__alt_mem_epcs_flash_controller+0xfe037510>
   48adc:	dc401f17 	ldw	r17,124(sp)
   48ae0:	40800115 	stw	r2,4(r8)
   48ae4:	44000015 	stw	r16,0(r8)
   48ae8:	8c400044 	addi	r17,r17,1
   48aec:	d8c02015 	stw	r3,128(sp)
   48af0:	dc401f15 	stw	r17,124(sp)
   48af4:	008001c4 	movi	r2,7
   48af8:	147f7f16 	blt	r2,r17,488f8 <__alt_mem_epcs_flash_controller+0xfe0378f8>
   48afc:	45800204 	addi	r22,r8,8
   48b00:	003eac06 	br	485b4 <__alt_mem_epcs_flash_controller+0xfe0375b4>
   48b04:	d9402c17 	ldw	r5,176(sp)
   48b08:	d9801e04 	addi	r6,sp,120
   48b0c:	9809883a 	mov	r4,r19
   48b10:	004fd9c0 	call	4fd9c <__ssprint_r>
   48b14:	103b801e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48b18:	d8c02017 	ldw	r3,128(sp)
   48b1c:	dc401f17 	ldw	r17,124(sp)
   48b20:	da000404 	addi	r8,sp,16
   48b24:	003e8406 	br	48538 <__alt_mem_epcs_flash_controller+0xfe037538>
   48b28:	d9402c17 	ldw	r5,176(sp)
   48b2c:	d9801e04 	addi	r6,sp,120
   48b30:	9809883a 	mov	r4,r19
   48b34:	004fd9c0 	call	4fd9c <__ssprint_r>
   48b38:	103b771e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48b3c:	d8c02017 	ldw	r3,128(sp)
   48b40:	dc401f17 	ldw	r17,124(sp)
   48b44:	dd800404 	addi	r22,sp,16
   48b48:	003e8606 	br	48564 <__alt_mem_epcs_flash_controller+0xfe037564>
   48b4c:	0029883a 	mov	r20,zero
   48b50:	a5000c04 	addi	r20,r20,48
   48b54:	dc001dc4 	addi	r16,sp,119
   48b58:	dd001dc5 	stb	r20,119(sp)
   48b5c:	003f3806 	br	48840 <__alt_mem_epcs_flash_controller+0xfe037840>
   48b60:	d9402c17 	ldw	r5,176(sp)
   48b64:	d9801e04 	addi	r6,sp,120
   48b68:	9809883a 	mov	r4,r19
   48b6c:	004fd9c0 	call	4fd9c <__ssprint_r>
   48b70:	103b691e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48b74:	d8c02017 	ldw	r3,128(sp)
   48b78:	da000404 	addi	r8,sp,16
   48b7c:	003c9506 	br	47dd4 <__alt_mem_epcs_flash_controller+0xfe036dd4>
   48b80:	d9003617 	ldw	r4,216(sp)
   48b84:	d9403717 	ldw	r5,220(sp)
   48b88:	da003e15 	stw	r8,248(sp)
   48b8c:	004fbec0 	call	4fbec <__fpclassifyd>
   48b90:	da003e17 	ldw	r8,248(sp)
   48b94:	1000bd1e 	bne	r2,zero,48e8c <___svfprintf_internal_r+0x1908>
   48b98:	008011c4 	movi	r2,71
   48b9c:	14411e0e 	bge	r2,r17,49018 <___svfprintf_internal_r+0x1a94>
   48ba0:	040001b4 	movhi	r16,6
   48ba4:	84356c04 	addi	r16,r16,-10832
   48ba8:	00c000c4 	movi	r3,3
   48bac:	00bfdfc4 	movi	r2,-129
   48bb0:	d8c02a15 	stw	r3,168(sp)
   48bb4:	90a4703a 	and	r18,r18,r2
   48bb8:	df002783 	ldbu	fp,158(sp)
   48bbc:	d8c02e15 	stw	r3,184(sp)
   48bc0:	d8002915 	stw	zero,164(sp)
   48bc4:	d8003215 	stw	zero,200(sp)
   48bc8:	003c1c06 	br	47c3c <__alt_mem_epcs_flash_controller+0xfe036c3c>
   48bcc:	9080100c 	andi	r2,r18,64
   48bd0:	d8002785 	stb	zero,158(sp)
   48bd4:	10009426 	beq	r2,zero,48e28 <___svfprintf_internal_r+0x18a4>
   48bd8:	d8c02d17 	ldw	r3,180(sp)
   48bdc:	d9002917 	ldw	r4,164(sp)
   48be0:	002d883a 	mov	r22,zero
   48be4:	18800104 	addi	r2,r3,4
   48be8:	1d00000b 	ldhu	r20,0(r3)
   48bec:	203ec10e 	bge	r4,zero,486f4 <__alt_mem_epcs_flash_controller+0xfe0376f4>
   48bf0:	a586b03a 	or	r3,r20,r22
   48bf4:	d8802d15 	stw	r2,180(sp)
   48bf8:	183ec21e 	bne	r3,zero,48704 <__alt_mem_epcs_flash_controller+0xfe037704>
   48bfc:	0039883a 	mov	fp,zero
   48c00:	0005883a 	mov	r2,zero
   48c04:	003db806 	br	482e8 <__alt_mem_epcs_flash_controller+0xfe0372e8>
   48c08:	d8802d17 	ldw	r2,180(sp)
   48c0c:	d8c02d17 	ldw	r3,180(sp)
   48c10:	d9002d17 	ldw	r4,180(sp)
   48c14:	10800017 	ldw	r2,0(r2)
   48c18:	18c00117 	ldw	r3,4(r3)
   48c1c:	21000204 	addi	r4,r4,8
   48c20:	d8803615 	stw	r2,216(sp)
   48c24:	d8c03715 	stw	r3,220(sp)
   48c28:	d9002d15 	stw	r4,180(sp)
   48c2c:	003b8206 	br	47a38 <__alt_mem_epcs_flash_controller+0xfe036a38>
   48c30:	9080100c 	andi	r2,r18,64
   48c34:	10010726 	beq	r2,zero,49054 <___svfprintf_internal_r+0x1ad0>
   48c38:	d8c02d17 	ldw	r3,180(sp)
   48c3c:	1d00000f 	ldh	r20,0(r3)
   48c40:	18c00104 	addi	r3,r3,4
   48c44:	d8c02d15 	stw	r3,180(sp)
   48c48:	a02dd7fa 	srai	r22,r20,31
   48c4c:	b005883a 	mov	r2,r22
   48c50:	003ba206 	br	47adc <__alt_mem_epcs_flash_controller+0xfe036adc>
   48c54:	9080100c 	andi	r2,r18,64
   48c58:	10010526 	beq	r2,zero,49070 <___svfprintf_internal_r+0x1aec>
   48c5c:	d9002d17 	ldw	r4,180(sp)
   48c60:	002d883a 	mov	r22,zero
   48c64:	2500000b 	ldhu	r20,0(r4)
   48c68:	21000104 	addi	r4,r4,4
   48c6c:	d9002d15 	stw	r4,180(sp)
   48c70:	003cfe06 	br	4806c <__alt_mem_epcs_flash_controller+0xfe03706c>
   48c74:	bc400007 	ldb	r17,0(r23)
   48c78:	003a9606 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   48c7c:	9080040c 	andi	r2,r18,16
   48c80:	10010126 	beq	r2,zero,49088 <___svfprintf_internal_r+0x1b04>
   48c84:	d9402d17 	ldw	r5,180(sp)
   48c88:	d8c02f17 	ldw	r3,188(sp)
   48c8c:	28800017 	ldw	r2,0(r5)
   48c90:	29400104 	addi	r5,r5,4
   48c94:	d9402d15 	stw	r5,180(sp)
   48c98:	10c00015 	stw	r3,0(r2)
   48c9c:	003a6406 	br	47630 <__alt_mem_epcs_flash_controller+0xfe036630>
   48ca0:	d9002917 	ldw	r4,164(sp)
   48ca4:	d8002785 	stb	zero,158(sp)
   48ca8:	203d8d16 	blt	r4,zero,482e0 <__alt_mem_epcs_flash_controller+0xfe0372e0>
   48cac:	00bfdfc4 	movi	r2,-129
   48cb0:	90a4703a 	and	r18,r18,r2
   48cb4:	003b0506 	br	478cc <__alt_mem_epcs_flash_controller+0xfe0368cc>
   48cb8:	014001b4 	movhi	r5,6
   48cbc:	29757984 	addi	r5,r5,-10778
   48cc0:	d9402b15 	stw	r5,172(sp)
   48cc4:	d9402b17 	ldw	r5,172(sp)
   48cc8:	1c47883a 	add	r3,r3,r17
   48ccc:	10800044 	addi	r2,r2,1
   48cd0:	41400015 	stw	r5,0(r8)
   48cd4:	44400115 	stw	r17,4(r8)
   48cd8:	d8c02015 	stw	r3,128(sp)
   48cdc:	d8801f15 	stw	r2,124(sp)
   48ce0:	010001c4 	movi	r4,7
   48ce4:	20bf3016 	blt	r4,r2,489a8 <__alt_mem_epcs_flash_controller+0xfe0379a8>
   48ce8:	42000204 	addi	r8,r8,8
   48cec:	003f3506 	br	489c4 <__alt_mem_epcs_flash_controller+0xfe0379c4>
   48cf0:	010001b4 	movhi	r4,6
   48cf4:	21357984 	addi	r4,r4,-10778
   48cf8:	d9002b15 	stw	r4,172(sp)
   48cfc:	003c5e06 	br	47e78 <__alt_mem_epcs_flash_controller+0xfe036e78>
   48d00:	d9402c17 	ldw	r5,176(sp)
   48d04:	d9801e04 	addi	r6,sp,120
   48d08:	9809883a 	mov	r4,r19
   48d0c:	004fd9c0 	call	4fd9c <__ssprint_r>
   48d10:	103b011e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48d14:	d8c02017 	ldw	r3,128(sp)
   48d18:	da000404 	addi	r8,sp,16
   48d1c:	003d9306 	br	4836c <__alt_mem_epcs_flash_controller+0xfe03736c>
   48d20:	d8801f17 	ldw	r2,124(sp)
   48d24:	014001b4 	movhi	r5,6
   48d28:	01000044 	movi	r4,1
   48d2c:	18c00044 	addi	r3,r3,1
   48d30:	10800044 	addi	r2,r2,1
   48d34:	29757904 	addi	r5,r5,-10780
   48d38:	41000115 	stw	r4,4(r8)
   48d3c:	41400015 	stw	r5,0(r8)
   48d40:	d8c02015 	stw	r3,128(sp)
   48d44:	d8801f15 	stw	r2,124(sp)
   48d48:	010001c4 	movi	r4,7
   48d4c:	2080b516 	blt	r4,r2,49024 <___svfprintf_internal_r+0x1aa0>
   48d50:	42000204 	addi	r8,r8,8
   48d54:	8800041e 	bne	r17,zero,48d68 <___svfprintf_internal_r+0x17e4>
   48d58:	d8803317 	ldw	r2,204(sp)
   48d5c:	1000021e 	bne	r2,zero,48d68 <___svfprintf_internal_r+0x17e4>
   48d60:	9080004c 	andi	r2,r18,1
   48d64:	103c5b26 	beq	r2,zero,47ed4 <__alt_mem_epcs_flash_controller+0xfe036ed4>
   48d68:	d9003817 	ldw	r4,224(sp)
   48d6c:	d8801f17 	ldw	r2,124(sp)
   48d70:	d9403417 	ldw	r5,208(sp)
   48d74:	20c7883a 	add	r3,r4,r3
   48d78:	10800044 	addi	r2,r2,1
   48d7c:	41000115 	stw	r4,4(r8)
   48d80:	41400015 	stw	r5,0(r8)
   48d84:	d8c02015 	stw	r3,128(sp)
   48d88:	d8801f15 	stw	r2,124(sp)
   48d8c:	010001c4 	movi	r4,7
   48d90:	20818016 	blt	r4,r2,49394 <___svfprintf_internal_r+0x1e10>
   48d94:	42000204 	addi	r8,r8,8
   48d98:	0463c83a 	sub	r17,zero,r17
   48d9c:	0440cb0e 	bge	zero,r17,490cc <___svfprintf_internal_r+0x1b48>
   48da0:	05800404 	movi	r22,16
   48da4:	b440e80e 	bge	r22,r17,49148 <___svfprintf_internal_r+0x1bc4>
   48da8:	014001b4 	movhi	r5,6
   48dac:	29757984 	addi	r5,r5,-10778
   48db0:	d9402b15 	stw	r5,172(sp)
   48db4:	070001c4 	movi	fp,7
   48db8:	dd002c17 	ldw	r20,176(sp)
   48dbc:	00000306 	br	48dcc <___svfprintf_internal_r+0x1848>
   48dc0:	42000204 	addi	r8,r8,8
   48dc4:	8c7ffc04 	addi	r17,r17,-16
   48dc8:	b440e20e 	bge	r22,r17,49154 <___svfprintf_internal_r+0x1bd0>
   48dcc:	18c00404 	addi	r3,r3,16
   48dd0:	10800044 	addi	r2,r2,1
   48dd4:	45400015 	stw	r21,0(r8)
   48dd8:	45800115 	stw	r22,4(r8)
   48ddc:	d8c02015 	stw	r3,128(sp)
   48de0:	d8801f15 	stw	r2,124(sp)
   48de4:	e0bff60e 	bge	fp,r2,48dc0 <__alt_mem_epcs_flash_controller+0xfe037dc0>
   48de8:	d9801e04 	addi	r6,sp,120
   48dec:	a00b883a 	mov	r5,r20
   48df0:	9809883a 	mov	r4,r19
   48df4:	004fd9c0 	call	4fd9c <__ssprint_r>
   48df8:	103ac71e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48dfc:	d8c02017 	ldw	r3,128(sp)
   48e00:	d8801f17 	ldw	r2,124(sp)
   48e04:	da000404 	addi	r8,sp,16
   48e08:	003fee06 	br	48dc4 <__alt_mem_epcs_flash_controller+0xfe037dc4>
   48e0c:	d8c02d17 	ldw	r3,180(sp)
   48e10:	d9002917 	ldw	r4,164(sp)
   48e14:	002d883a 	mov	r22,zero
   48e18:	18800104 	addi	r2,r3,4
   48e1c:	1d000017 	ldw	r20,0(r3)
   48e20:	203e7d0e 	bge	r4,zero,48818 <__alt_mem_epcs_flash_controller+0xfe037818>
   48e24:	003eda06 	br	48990 <__alt_mem_epcs_flash_controller+0xfe037990>
   48e28:	d9402d17 	ldw	r5,180(sp)
   48e2c:	d8c02917 	ldw	r3,164(sp)
   48e30:	002d883a 	mov	r22,zero
   48e34:	28800104 	addi	r2,r5,4
   48e38:	2d000017 	ldw	r20,0(r5)
   48e3c:	183e2d0e 	bge	r3,zero,486f4 <__alt_mem_epcs_flash_controller+0xfe0376f4>
   48e40:	003f6b06 	br	48bf0 <__alt_mem_epcs_flash_controller+0xfe037bf0>
   48e44:	d8c02d15 	stw	r3,180(sp)
   48e48:	0039883a 	mov	fp,zero
   48e4c:	003ed206 	br	48998 <__alt_mem_epcs_flash_controller+0xfe037998>
   48e50:	bc400043 	ldbu	r17,1(r23)
   48e54:	94800814 	ori	r18,r18,32
   48e58:	bdc00044 	addi	r23,r23,1
   48e5c:	8c403fcc 	andi	r17,r17,255
   48e60:	8c40201c 	xori	r17,r17,128
   48e64:	8c7fe004 	addi	r17,r17,-128
   48e68:	003a1a06 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   48e6c:	d9402c17 	ldw	r5,176(sp)
   48e70:	d9801e04 	addi	r6,sp,120
   48e74:	9809883a 	mov	r4,r19
   48e78:	004fd9c0 	call	4fd9c <__ssprint_r>
   48e7c:	103aa61e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   48e80:	d8c02017 	ldw	r3,128(sp)
   48e84:	da000404 	addi	r8,sp,16
   48e88:	003d4a06 	br	483b4 <__alt_mem_epcs_flash_controller+0xfe0373b4>
   48e8c:	d9002917 	ldw	r4,164(sp)
   48e90:	05bff7c4 	movi	r22,-33
   48e94:	00bfffc4 	movi	r2,-1
   48e98:	8dac703a 	and	r22,r17,r22
   48e9c:	20806a26 	beq	r4,r2,49048 <___svfprintf_internal_r+0x1ac4>
   48ea0:	008011c4 	movi	r2,71
   48ea4:	b0813726 	beq	r22,r2,49384 <___svfprintf_internal_r+0x1e00>
   48ea8:	d9003717 	ldw	r4,220(sp)
   48eac:	90c04014 	ori	r3,r18,256
   48eb0:	d8c02b15 	stw	r3,172(sp)
   48eb4:	20015d16 	blt	r4,zero,4942c <___svfprintf_internal_r+0x1ea8>
   48eb8:	dd003717 	ldw	r20,220(sp)
   48ebc:	d8002a05 	stb	zero,168(sp)
   48ec0:	00801984 	movi	r2,102
   48ec4:	88814026 	beq	r17,r2,493c8 <___svfprintf_internal_r+0x1e44>
   48ec8:	00801184 	movi	r2,70
   48ecc:	88817126 	beq	r17,r2,49494 <___svfprintf_internal_r+0x1f10>
   48ed0:	00801144 	movi	r2,69
   48ed4:	b0816226 	beq	r22,r2,49460 <___svfprintf_internal_r+0x1edc>
   48ed8:	d8c02917 	ldw	r3,164(sp)
   48edc:	d8802104 	addi	r2,sp,132
   48ee0:	d8800315 	stw	r2,12(sp)
   48ee4:	d9403617 	ldw	r5,216(sp)
   48ee8:	d8802504 	addi	r2,sp,148
   48eec:	d8800215 	stw	r2,8(sp)
   48ef0:	d8802604 	addi	r2,sp,152
   48ef4:	d8c00015 	stw	r3,0(sp)
   48ef8:	d8800115 	stw	r2,4(sp)
   48efc:	01c00084 	movi	r7,2
   48f00:	a00d883a 	mov	r6,r20
   48f04:	9809883a 	mov	r4,r19
   48f08:	d8c03d15 	stw	r3,244(sp)
   48f0c:	da003e15 	stw	r8,248(sp)
   48f10:	004bf680 	call	4bf68 <_dtoa_r>
   48f14:	1021883a 	mov	r16,r2
   48f18:	008019c4 	movi	r2,103
   48f1c:	d8c03d17 	ldw	r3,244(sp)
   48f20:	da003e17 	ldw	r8,248(sp)
   48f24:	8880e726 	beq	r17,r2,492c4 <___svfprintf_internal_r+0x1d40>
   48f28:	008011c4 	movi	r2,71
   48f2c:	8880d426 	beq	r17,r2,49280 <___svfprintf_internal_r+0x1cfc>
   48f30:	80f9883a 	add	fp,r16,r3
   48f34:	d9003617 	ldw	r4,216(sp)
   48f38:	000d883a 	mov	r6,zero
   48f3c:	000f883a 	mov	r7,zero
   48f40:	a00b883a 	mov	r5,r20
   48f44:	da003e15 	stw	r8,248(sp)
   48f48:	0053b100 	call	53b10 <__eqdf2>
   48f4c:	da003e17 	ldw	r8,248(sp)
   48f50:	1000e426 	beq	r2,zero,492e4 <___svfprintf_internal_r+0x1d60>
   48f54:	d8802117 	ldw	r2,132(sp)
   48f58:	1700062e 	bgeu	r2,fp,48f74 <___svfprintf_internal_r+0x19f0>
   48f5c:	01000c04 	movi	r4,48
   48f60:	10c00044 	addi	r3,r2,1
   48f64:	d8c02115 	stw	r3,132(sp)
   48f68:	11000005 	stb	r4,0(r2)
   48f6c:	d8802117 	ldw	r2,132(sp)
   48f70:	173ffb36 	bltu	r2,fp,48f60 <__alt_mem_epcs_flash_controller+0xfe037f60>
   48f74:	1405c83a 	sub	r2,r2,r16
   48f78:	d8803315 	stw	r2,204(sp)
   48f7c:	008011c4 	movi	r2,71
   48f80:	b080c526 	beq	r22,r2,49298 <___svfprintf_internal_r+0x1d14>
   48f84:	00801944 	movi	r2,101
   48f88:	1441d90e 	bge	r2,r17,496f0 <___svfprintf_internal_r+0x216c>
   48f8c:	d8c02617 	ldw	r3,152(sp)
   48f90:	00801984 	movi	r2,102
   48f94:	d8c03215 	stw	r3,200(sp)
   48f98:	88813426 	beq	r17,r2,4946c <___svfprintf_internal_r+0x1ee8>
   48f9c:	d8c03217 	ldw	r3,200(sp)
   48fa0:	d9003317 	ldw	r4,204(sp)
   48fa4:	19012516 	blt	r3,r4,4943c <___svfprintf_internal_r+0x1eb8>
   48fa8:	9480004c 	andi	r18,r18,1
   48fac:	9001841e 	bne	r18,zero,495c0 <___svfprintf_internal_r+0x203c>
   48fb0:	1805883a 	mov	r2,r3
   48fb4:	1801cc16 	blt	r3,zero,496e8 <___svfprintf_internal_r+0x2164>
   48fb8:	d8c03217 	ldw	r3,200(sp)
   48fbc:	044019c4 	movi	r17,103
   48fc0:	d8c02e15 	stw	r3,184(sp)
   48fc4:	df002a07 	ldb	fp,168(sp)
   48fc8:	e000a61e 	bne	fp,zero,49264 <___svfprintf_internal_r+0x1ce0>
   48fcc:	df002783 	ldbu	fp,158(sp)
   48fd0:	d8802a15 	stw	r2,168(sp)
   48fd4:	dc802b17 	ldw	r18,172(sp)
   48fd8:	d8002915 	stw	zero,164(sp)
   48fdc:	003b1706 	br	47c3c <__alt_mem_epcs_flash_controller+0xfe036c3c>
   48fe0:	040001b4 	movhi	r16,6
   48fe4:	84356904 	addi	r16,r16,-10844
   48fe8:	003aa606 	br	47a84 <__alt_mem_epcs_flash_controller+0xfe036a84>
   48fec:	d9003917 	ldw	r4,228(sp)
   48ff0:	04001004 	movi	r16,64
   48ff4:	800b883a 	mov	r5,r16
   48ff8:	00454100 	call	45410 <_malloc_r>
   48ffc:	d9002c17 	ldw	r4,176(sp)
   49000:	20800015 	stw	r2,0(r4)
   49004:	20800415 	stw	r2,16(r4)
   49008:	1001cb26 	beq	r2,zero,49738 <___svfprintf_internal_r+0x21b4>
   4900c:	d8802c17 	ldw	r2,176(sp)
   49010:	14000515 	stw	r16,20(r2)
   49014:	00397606 	br	475f0 <__alt_mem_epcs_flash_controller+0xfe0365f0>
   49018:	040001b4 	movhi	r16,6
   4901c:	84356b04 	addi	r16,r16,-10836
   49020:	003ee106 	br	48ba8 <__alt_mem_epcs_flash_controller+0xfe037ba8>
   49024:	d9402c17 	ldw	r5,176(sp)
   49028:	d9801e04 	addi	r6,sp,120
   4902c:	9809883a 	mov	r4,r19
   49030:	004fd9c0 	call	4fd9c <__ssprint_r>
   49034:	103a381e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   49038:	dc402617 	ldw	r17,152(sp)
   4903c:	d8c02017 	ldw	r3,128(sp)
   49040:	da000404 	addi	r8,sp,16
   49044:	003f4306 	br	48d54 <__alt_mem_epcs_flash_controller+0xfe037d54>
   49048:	01400184 	movi	r5,6
   4904c:	d9402915 	stw	r5,164(sp)
   49050:	003f9506 	br	48ea8 <__alt_mem_epcs_flash_controller+0xfe037ea8>
   49054:	d9002d17 	ldw	r4,180(sp)
   49058:	25000017 	ldw	r20,0(r4)
   4905c:	21000104 	addi	r4,r4,4
   49060:	d9002d15 	stw	r4,180(sp)
   49064:	a02dd7fa 	srai	r22,r20,31
   49068:	b005883a 	mov	r2,r22
   4906c:	003a9b06 	br	47adc <__alt_mem_epcs_flash_controller+0xfe036adc>
   49070:	d9402d17 	ldw	r5,180(sp)
   49074:	002d883a 	mov	r22,zero
   49078:	2d000017 	ldw	r20,0(r5)
   4907c:	29400104 	addi	r5,r5,4
   49080:	d9402d15 	stw	r5,180(sp)
   49084:	003bf906 	br	4806c <__alt_mem_epcs_flash_controller+0xfe03706c>
   49088:	9480100c 	andi	r18,r18,64
   4908c:	90006e26 	beq	r18,zero,49248 <___svfprintf_internal_r+0x1cc4>
   49090:	d9002d17 	ldw	r4,180(sp)
   49094:	d9402f17 	ldw	r5,188(sp)
   49098:	20800017 	ldw	r2,0(r4)
   4909c:	21000104 	addi	r4,r4,4
   490a0:	d9002d15 	stw	r4,180(sp)
   490a4:	1140000d 	sth	r5,0(r2)
   490a8:	00396106 	br	47630 <__alt_mem_epcs_flash_controller+0xfe036630>
   490ac:	d9402c17 	ldw	r5,176(sp)
   490b0:	d9801e04 	addi	r6,sp,120
   490b4:	9809883a 	mov	r4,r19
   490b8:	004fd9c0 	call	4fd9c <__ssprint_r>
   490bc:	103a161e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   490c0:	d8c02017 	ldw	r3,128(sp)
   490c4:	d8801f17 	ldw	r2,124(sp)
   490c8:	da000404 	addi	r8,sp,16
   490cc:	d9403317 	ldw	r5,204(sp)
   490d0:	10800044 	addi	r2,r2,1
   490d4:	44000015 	stw	r16,0(r8)
   490d8:	28c7883a 	add	r3,r5,r3
   490dc:	003b7706 	br	47ebc <__alt_mem_epcs_flash_controller+0xfe036ebc>
   490e0:	8009883a 	mov	r4,r16
   490e4:	da003e15 	stw	r8,248(sp)
   490e8:	0046ef40 	call	46ef4 <strlen>
   490ec:	d8802e15 	stw	r2,184(sp)
   490f0:	da003e17 	ldw	r8,248(sp)
   490f4:	103c280e 	bge	r2,zero,48198 <__alt_mem_epcs_flash_controller+0xfe037198>
   490f8:	0005883a 	mov	r2,zero
   490fc:	003c2606 	br	48198 <__alt_mem_epcs_flash_controller+0xfe037198>
   49100:	00bfffc4 	movi	r2,-1
   49104:	003a0906 	br	4792c <__alt_mem_epcs_flash_controller+0xfe03692c>
   49108:	010001b4 	movhi	r4,6
   4910c:	21357d84 	addi	r4,r4,-10762
   49110:	d9003515 	stw	r4,212(sp)
   49114:	003b0606 	br	47d30 <__alt_mem_epcs_flash_controller+0xfe036d30>
   49118:	013fffc4 	movi	r4,-1
   4911c:	003a2706 	br	479bc <__alt_mem_epcs_flash_controller+0xfe0369bc>
   49120:	d9402c17 	ldw	r5,176(sp)
   49124:	d9801e04 	addi	r6,sp,120
   49128:	9809883a 	mov	r4,r19
   4912c:	004fd9c0 	call	4fd9c <__ssprint_r>
   49130:	1039f91e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   49134:	d8c02017 	ldw	r3,128(sp)
   49138:	da000404 	addi	r8,sp,16
   4913c:	003d8406 	br	48750 <__alt_mem_epcs_flash_controller+0xfe037750>
   49140:	0023883a 	mov	r17,zero
   49144:	003d8306 	br	48754 <__alt_mem_epcs_flash_controller+0xfe037754>
   49148:	010001b4 	movhi	r4,6
   4914c:	21357984 	addi	r4,r4,-10778
   49150:	d9002b15 	stw	r4,172(sp)
   49154:	d9002b17 	ldw	r4,172(sp)
   49158:	1c47883a 	add	r3,r3,r17
   4915c:	10800044 	addi	r2,r2,1
   49160:	41000015 	stw	r4,0(r8)
   49164:	44400115 	stw	r17,4(r8)
   49168:	d8c02015 	stw	r3,128(sp)
   4916c:	d8801f15 	stw	r2,124(sp)
   49170:	010001c4 	movi	r4,7
   49174:	20bfcd16 	blt	r4,r2,490ac <__alt_mem_epcs_flash_controller+0xfe0380ac>
   49178:	42000204 	addi	r8,r8,8
   4917c:	003fd306 	br	490cc <__alt_mem_epcs_flash_controller+0xfe0380cc>
   49180:	d9402c17 	ldw	r5,176(sp)
   49184:	d9801e04 	addi	r6,sp,120
   49188:	9809883a 	mov	r4,r19
   4918c:	004fd9c0 	call	4fd9c <__ssprint_r>
   49190:	1039e11e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   49194:	d8802617 	ldw	r2,152(sp)
   49198:	d8c02017 	ldw	r3,128(sp)
   4919c:	da000404 	addi	r8,sp,16
   491a0:	003e1c06 	br	48a14 <__alt_mem_epcs_flash_controller+0xfe037a14>
   491a4:	d8802917 	ldw	r2,164(sp)
   491a8:	00c00184 	movi	r3,6
   491ac:	1880012e 	bgeu	r3,r2,491b4 <___svfprintf_internal_r+0x1c30>
   491b0:	1805883a 	mov	r2,r3
   491b4:	d8802e15 	stw	r2,184(sp)
   491b8:	1000f316 	blt	r2,zero,49588 <___svfprintf_internal_r+0x2004>
   491bc:	040001b4 	movhi	r16,6
   491c0:	d8802a15 	stw	r2,168(sp)
   491c4:	dd002d15 	stw	r20,180(sp)
   491c8:	d8002915 	stw	zero,164(sp)
   491cc:	d8003215 	stw	zero,200(sp)
   491d0:	84357704 	addi	r16,r16,-10788
   491d4:	0039883a 	mov	fp,zero
   491d8:	003a9f06 	br	47c58 <__alt_mem_epcs_flash_controller+0xfe036c58>
   491dc:	010001b4 	movhi	r4,6
   491e0:	21357d84 	addi	r4,r4,-10762
   491e4:	d9003515 	stw	r4,212(sp)
   491e8:	003b5f06 	br	47f68 <__alt_mem_epcs_flash_controller+0xfe036f68>
   491ec:	d9402c17 	ldw	r5,176(sp)
   491f0:	d9801e04 	addi	r6,sp,120
   491f4:	9809883a 	mov	r4,r19
   491f8:	004fd9c0 	call	4fd9c <__ssprint_r>
   491fc:	1039c61e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   49200:	d8802617 	ldw	r2,152(sp)
   49204:	d9403317 	ldw	r5,204(sp)
   49208:	d8c02017 	ldw	r3,128(sp)
   4920c:	da000404 	addi	r8,sp,16
   49210:	2885c83a 	sub	r2,r5,r2
   49214:	003e1006 	br	48a58 <__alt_mem_epcs_flash_controller+0xfe037a58>
   49218:	00800044 	movi	r2,1
   4921c:	10803fcc 	andi	r2,r2,255
   49220:	00c00044 	movi	r3,1
   49224:	10fa3526 	beq	r2,r3,47afc <__alt_mem_epcs_flash_controller+0xfe036afc>
   49228:	00c00084 	movi	r3,2
   4922c:	10fb9e26 	beq	r2,r3,480a8 <__alt_mem_epcs_flash_controller+0xfe0370a8>
   49230:	003a6406 	br	47bc4 <__alt_mem_epcs_flash_controller+0xfe036bc4>
   49234:	0021883a 	mov	r16,zero
   49238:	003e0806 	br	48a5c <__alt_mem_epcs_flash_controller+0xfe037a5c>
   4923c:	07000b44 	movi	fp,45
   49240:	df002785 	stb	fp,158(sp)
   49244:	003a0b06 	br	47a74 <__alt_mem_epcs_flash_controller+0xfe036a74>
   49248:	d8c02d17 	ldw	r3,180(sp)
   4924c:	d9002f17 	ldw	r4,188(sp)
   49250:	18800017 	ldw	r2,0(r3)
   49254:	18c00104 	addi	r3,r3,4
   49258:	d8c02d15 	stw	r3,180(sp)
   4925c:	11000015 	stw	r4,0(r2)
   49260:	0038f306 	br	47630 <__alt_mem_epcs_flash_controller+0xfe036630>
   49264:	00c00b44 	movi	r3,45
   49268:	d8c02785 	stb	r3,158(sp)
   4926c:	d8802a15 	stw	r2,168(sp)
   49270:	dc802b17 	ldw	r18,172(sp)
   49274:	d8002915 	stw	zero,164(sp)
   49278:	07000b44 	movi	fp,45
   4927c:	003a7306 	br	47c4c <__alt_mem_epcs_flash_controller+0xfe036c4c>
   49280:	9080004c 	andi	r2,r18,1
   49284:	1000941e 	bne	r2,zero,494d8 <___svfprintf_internal_r+0x1f54>
   49288:	d8802117 	ldw	r2,132(sp)
   4928c:	1405c83a 	sub	r2,r2,r16
   49290:	d8803315 	stw	r2,204(sp)
   49294:	b441161e 	bne	r22,r17,496f0 <___svfprintf_internal_r+0x216c>
   49298:	dd802617 	ldw	r22,152(sp)
   4929c:	00bfff44 	movi	r2,-3
   492a0:	b0801a16 	blt	r22,r2,4930c <___svfprintf_internal_r+0x1d88>
   492a4:	d9402917 	ldw	r5,164(sp)
   492a8:	2d801816 	blt	r5,r22,4930c <___svfprintf_internal_r+0x1d88>
   492ac:	dd803215 	stw	r22,200(sp)
   492b0:	003f3a06 	br	48f9c <__alt_mem_epcs_flash_controller+0xfe037f9c>
   492b4:	1025883a 	mov	r18,r2
   492b8:	0039883a 	mov	fp,zero
   492bc:	00800084 	movi	r2,2
   492c0:	003fd606 	br	4921c <__alt_mem_epcs_flash_controller+0xfe03821c>
   492c4:	9080004c 	andi	r2,r18,1
   492c8:	103f191e 	bne	r2,zero,48f30 <__alt_mem_epcs_flash_controller+0xfe037f30>
   492cc:	d8802117 	ldw	r2,132(sp)
   492d0:	003f2806 	br	48f74 <__alt_mem_epcs_flash_controller+0xfe037f74>
   492d4:	010001b4 	movhi	r4,6
   492d8:	21357984 	addi	r4,r4,-10778
   492dc:	d9002b15 	stw	r4,172(sp)
   492e0:	003c7c06 	br	484d4 <__alt_mem_epcs_flash_controller+0xfe0374d4>
   492e4:	e005883a 	mov	r2,fp
   492e8:	003f2206 	br	48f74 <__alt_mem_epcs_flash_controller+0xfe037f74>
   492ec:	d9402917 	ldw	r5,164(sp)
   492f0:	df002783 	ldbu	fp,158(sp)
   492f4:	dd002d15 	stw	r20,180(sp)
   492f8:	d9402a15 	stw	r5,168(sp)
   492fc:	d9402e15 	stw	r5,184(sp)
   49300:	d8002915 	stw	zero,164(sp)
   49304:	d8003215 	stw	zero,200(sp)
   49308:	003a4c06 	br	47c3c <__alt_mem_epcs_flash_controller+0xfe036c3c>
   4930c:	8c7fff84 	addi	r17,r17,-2
   49310:	b5bfffc4 	addi	r22,r22,-1
   49314:	dd802615 	stw	r22,152(sp)
   49318:	dc4022c5 	stb	r17,139(sp)
   4931c:	b000c316 	blt	r22,zero,4962c <___svfprintf_internal_r+0x20a8>
   49320:	00800ac4 	movi	r2,43
   49324:	d8802305 	stb	r2,140(sp)
   49328:	00800244 	movi	r2,9
   4932c:	15806e16 	blt	r2,r22,494e8 <___svfprintf_internal_r+0x1f64>
   49330:	00800c04 	movi	r2,48
   49334:	b5800c04 	addi	r22,r22,48
   49338:	d8802345 	stb	r2,141(sp)
   4933c:	dd802385 	stb	r22,142(sp)
   49340:	d88023c4 	addi	r2,sp,143
   49344:	df0022c4 	addi	fp,sp,139
   49348:	d8c03317 	ldw	r3,204(sp)
   4934c:	1739c83a 	sub	fp,r2,fp
   49350:	d9003317 	ldw	r4,204(sp)
   49354:	e0c7883a 	add	r3,fp,r3
   49358:	df003b15 	stw	fp,236(sp)
   4935c:	d8c02e15 	stw	r3,184(sp)
   49360:	00800044 	movi	r2,1
   49364:	1100b70e 	bge	r2,r4,49644 <___svfprintf_internal_r+0x20c0>
   49368:	d8c02e17 	ldw	r3,184(sp)
   4936c:	18c00044 	addi	r3,r3,1
   49370:	d8c02e15 	stw	r3,184(sp)
   49374:	1805883a 	mov	r2,r3
   49378:	1800b016 	blt	r3,zero,4963c <___svfprintf_internal_r+0x20b8>
   4937c:	d8003215 	stw	zero,200(sp)
   49380:	003f1006 	br	48fc4 <__alt_mem_epcs_flash_controller+0xfe037fc4>
   49384:	d8802917 	ldw	r2,164(sp)
   49388:	103ec71e 	bne	r2,zero,48ea8 <__alt_mem_epcs_flash_controller+0xfe037ea8>
   4938c:	dc002915 	stw	r16,164(sp)
   49390:	003ec506 	br	48ea8 <__alt_mem_epcs_flash_controller+0xfe037ea8>
   49394:	d9402c17 	ldw	r5,176(sp)
   49398:	d9801e04 	addi	r6,sp,120
   4939c:	9809883a 	mov	r4,r19
   493a0:	004fd9c0 	call	4fd9c <__ssprint_r>
   493a4:	10395c1e 	bne	r2,zero,47918 <__alt_mem_epcs_flash_controller+0xfe036918>
   493a8:	dc402617 	ldw	r17,152(sp)
   493ac:	d8c02017 	ldw	r3,128(sp)
   493b0:	d8801f17 	ldw	r2,124(sp)
   493b4:	da000404 	addi	r8,sp,16
   493b8:	003e7706 	br	48d98 <__alt_mem_epcs_flash_controller+0xfe037d98>
   493bc:	582f883a 	mov	r23,r11
   493c0:	d8002915 	stw	zero,164(sp)
   493c4:	0038c406 	br	476d8 <__alt_mem_epcs_flash_controller+0xfe0366d8>
   493c8:	d8c02917 	ldw	r3,164(sp)
   493cc:	d8802104 	addi	r2,sp,132
   493d0:	d8800315 	stw	r2,12(sp)
   493d4:	d9403617 	ldw	r5,216(sp)
   493d8:	d8802504 	addi	r2,sp,148
   493dc:	d8800215 	stw	r2,8(sp)
   493e0:	d8802604 	addi	r2,sp,152
   493e4:	d8c00015 	stw	r3,0(sp)
   493e8:	9809883a 	mov	r4,r19
   493ec:	d8800115 	stw	r2,4(sp)
   493f0:	01c000c4 	movi	r7,3
   493f4:	a00d883a 	mov	r6,r20
   493f8:	da003e15 	stw	r8,248(sp)
   493fc:	004bf680 	call	4bf68 <_dtoa_r>
   49400:	d9002917 	ldw	r4,164(sp)
   49404:	da003e17 	ldw	r8,248(sp)
   49408:	1021883a 	mov	r16,r2
   4940c:	1139883a 	add	fp,r2,r4
   49410:	2007883a 	mov	r3,r4
   49414:	81000007 	ldb	r4,0(r16)
   49418:	00800c04 	movi	r2,48
   4941c:	20806f26 	beq	r4,r2,495dc <___svfprintf_internal_r+0x2058>
   49420:	d8c02617 	ldw	r3,152(sp)
   49424:	e0f9883a 	add	fp,fp,r3
   49428:	003ec206 	br	48f34 <__alt_mem_epcs_flash_controller+0xfe037f34>
   4942c:	00c00b44 	movi	r3,45
   49430:	2520003c 	xorhi	r20,r4,32768
   49434:	d8c02a05 	stb	r3,168(sp)
   49438:	003ea106 	br	48ec0 <__alt_mem_epcs_flash_controller+0xfe037ec0>
   4943c:	d8c03217 	ldw	r3,200(sp)
   49440:	00c0890e 	bge	zero,r3,49668 <___svfprintf_internal_r+0x20e4>
   49444:	00800044 	movi	r2,1
   49448:	d9003317 	ldw	r4,204(sp)
   4944c:	1105883a 	add	r2,r2,r4
   49450:	d8802e15 	stw	r2,184(sp)
   49454:	10005f16 	blt	r2,zero,495d4 <___svfprintf_internal_r+0x2050>
   49458:	044019c4 	movi	r17,103
   4945c:	003ed906 	br	48fc4 <__alt_mem_epcs_flash_controller+0xfe037fc4>
   49460:	d9002917 	ldw	r4,164(sp)
   49464:	20c00044 	addi	r3,r4,1
   49468:	003e9c06 	br	48edc <__alt_mem_epcs_flash_controller+0xfe037edc>
   4946c:	d9002917 	ldw	r4,164(sp)
   49470:	00c0680e 	bge	zero,r3,49614 <___svfprintf_internal_r+0x2090>
   49474:	2000461e 	bne	r4,zero,49590 <___svfprintf_internal_r+0x200c>
   49478:	9480004c 	andi	r18,r18,1
   4947c:	9000441e 	bne	r18,zero,49590 <___svfprintf_internal_r+0x200c>
   49480:	1805883a 	mov	r2,r3
   49484:	1800a016 	blt	r3,zero,49708 <___svfprintf_internal_r+0x2184>
   49488:	d8c03217 	ldw	r3,200(sp)
   4948c:	d8c02e15 	stw	r3,184(sp)
   49490:	003ecc06 	br	48fc4 <__alt_mem_epcs_flash_controller+0xfe037fc4>
   49494:	d9402917 	ldw	r5,164(sp)
   49498:	d8802104 	addi	r2,sp,132
   4949c:	d8800315 	stw	r2,12(sp)
   494a0:	d9400015 	stw	r5,0(sp)
   494a4:	d8802504 	addi	r2,sp,148
   494a8:	d9403617 	ldw	r5,216(sp)
   494ac:	d8800215 	stw	r2,8(sp)
   494b0:	d8802604 	addi	r2,sp,152
   494b4:	d8800115 	stw	r2,4(sp)
   494b8:	01c000c4 	movi	r7,3
   494bc:	a00d883a 	mov	r6,r20
   494c0:	9809883a 	mov	r4,r19
   494c4:	da003e15 	stw	r8,248(sp)
   494c8:	004bf680 	call	4bf68 <_dtoa_r>
   494cc:	d8c02917 	ldw	r3,164(sp)
   494d0:	da003e17 	ldw	r8,248(sp)
   494d4:	1021883a 	mov	r16,r2
   494d8:	00801184 	movi	r2,70
   494dc:	80f9883a 	add	fp,r16,r3
   494e0:	88bfcc26 	beq	r17,r2,49414 <__alt_mem_epcs_flash_controller+0xfe038414>
   494e4:	003e9306 	br	48f34 <__alt_mem_epcs_flash_controller+0xfe037f34>
   494e8:	df0022c4 	addi	fp,sp,139
   494ec:	dc002915 	stw	r16,164(sp)
   494f0:	9829883a 	mov	r20,r19
   494f4:	e021883a 	mov	r16,fp
   494f8:	4027883a 	mov	r19,r8
   494fc:	b009883a 	mov	r4,r22
   49500:	01400284 	movi	r5,10
   49504:	0042a240 	call	42a24 <__modsi3>
   49508:	10800c04 	addi	r2,r2,48
   4950c:	843fffc4 	addi	r16,r16,-1
   49510:	b009883a 	mov	r4,r22
   49514:	01400284 	movi	r5,10
   49518:	80800005 	stb	r2,0(r16)
   4951c:	00429a00 	call	429a0 <__divsi3>
   49520:	102d883a 	mov	r22,r2
   49524:	00800244 	movi	r2,9
   49528:	15bff416 	blt	r2,r22,494fc <__alt_mem_epcs_flash_controller+0xfe0384fc>
   4952c:	9811883a 	mov	r8,r19
   49530:	b0800c04 	addi	r2,r22,48
   49534:	a027883a 	mov	r19,r20
   49538:	8029883a 	mov	r20,r16
   4953c:	a17fffc4 	addi	r5,r20,-1
   49540:	a0bfffc5 	stb	r2,-1(r20)
   49544:	dc002917 	ldw	r16,164(sp)
   49548:	2f00752e 	bgeu	r5,fp,49720 <___svfprintf_internal_r+0x219c>
   4954c:	d9c02384 	addi	r7,sp,142
   49550:	3d0fc83a 	sub	r7,r7,r20
   49554:	d9002344 	addi	r4,sp,141
   49558:	e1cf883a 	add	r7,fp,r7
   4955c:	00000106 	br	49564 <___svfprintf_internal_r+0x1fe0>
   49560:	28800003 	ldbu	r2,0(r5)
   49564:	20800005 	stb	r2,0(r4)
   49568:	21000044 	addi	r4,r4,1
   4956c:	29400044 	addi	r5,r5,1
   49570:	21fffb1e 	bne	r4,r7,49560 <__alt_mem_epcs_flash_controller+0xfe038560>
   49574:	d8802304 	addi	r2,sp,140
   49578:	1505c83a 	sub	r2,r2,r20
   4957c:	d8c02344 	addi	r3,sp,141
   49580:	1885883a 	add	r2,r3,r2
   49584:	003f7006 	br	49348 <__alt_mem_epcs_flash_controller+0xfe038348>
   49588:	0005883a 	mov	r2,zero
   4958c:	003f0b06 	br	491bc <__alt_mem_epcs_flash_controller+0xfe0381bc>
   49590:	d9002917 	ldw	r4,164(sp)
   49594:	d8c03217 	ldw	r3,200(sp)
   49598:	20800044 	addi	r2,r4,1
   4959c:	1885883a 	add	r2,r3,r2
   495a0:	d8802e15 	stw	r2,184(sp)
   495a4:	103e870e 	bge	r2,zero,48fc4 <__alt_mem_epcs_flash_controller+0xfe037fc4>
   495a8:	0005883a 	mov	r2,zero
   495ac:	003e8506 	br	48fc4 <__alt_mem_epcs_flash_controller+0xfe037fc4>
   495b0:	010001b4 	movhi	r4,6
   495b4:	21357984 	addi	r4,r4,-10778
   495b8:	d9002b15 	stw	r4,172(sp)
   495bc:	003cc506 	br	488d4 <__alt_mem_epcs_flash_controller+0xfe0378d4>
   495c0:	d8c03217 	ldw	r3,200(sp)
   495c4:	18c00044 	addi	r3,r3,1
   495c8:	d8c02e15 	stw	r3,184(sp)
   495cc:	1805883a 	mov	r2,r3
   495d0:	183fa10e 	bge	r3,zero,49458 <__alt_mem_epcs_flash_controller+0xfe038458>
   495d4:	0005883a 	mov	r2,zero
   495d8:	003f9f06 	br	49458 <__alt_mem_epcs_flash_controller+0xfe038458>
   495dc:	d9003617 	ldw	r4,216(sp)
   495e0:	000d883a 	mov	r6,zero
   495e4:	000f883a 	mov	r7,zero
   495e8:	a00b883a 	mov	r5,r20
   495ec:	d8c03d15 	stw	r3,244(sp)
   495f0:	da003e15 	stw	r8,248(sp)
   495f4:	0053b100 	call	53b10 <__eqdf2>
   495f8:	d8c03d17 	ldw	r3,244(sp)
   495fc:	da003e17 	ldw	r8,248(sp)
   49600:	103f8726 	beq	r2,zero,49420 <__alt_mem_epcs_flash_controller+0xfe038420>
   49604:	00800044 	movi	r2,1
   49608:	10c7c83a 	sub	r3,r2,r3
   4960c:	d8c02615 	stw	r3,152(sp)
   49610:	003f8406 	br	49424 <__alt_mem_epcs_flash_controller+0xfe038424>
   49614:	20000e1e 	bne	r4,zero,49650 <___svfprintf_internal_r+0x20cc>
   49618:	9480004c 	andi	r18,r18,1
   4961c:	90000c1e 	bne	r18,zero,49650 <___svfprintf_internal_r+0x20cc>
   49620:	00800044 	movi	r2,1
   49624:	d8802e15 	stw	r2,184(sp)
   49628:	003e6606 	br	48fc4 <__alt_mem_epcs_flash_controller+0xfe037fc4>
   4962c:	00800b44 	movi	r2,45
   49630:	05adc83a 	sub	r22,zero,r22
   49634:	d8802305 	stb	r2,140(sp)
   49638:	003f3b06 	br	49328 <__alt_mem_epcs_flash_controller+0xfe038328>
   4963c:	0005883a 	mov	r2,zero
   49640:	003f4e06 	br	4937c <__alt_mem_epcs_flash_controller+0xfe03837c>
   49644:	90a4703a 	and	r18,r18,r2
   49648:	903f4a26 	beq	r18,zero,49374 <__alt_mem_epcs_flash_controller+0xfe038374>
   4964c:	003f4606 	br	49368 <__alt_mem_epcs_flash_controller+0xfe038368>
   49650:	d8c02917 	ldw	r3,164(sp)
   49654:	18c00084 	addi	r3,r3,2
   49658:	d8c02e15 	stw	r3,184(sp)
   4965c:	1805883a 	mov	r2,r3
   49660:	183e580e 	bge	r3,zero,48fc4 <__alt_mem_epcs_flash_controller+0xfe037fc4>
   49664:	003fd006 	br	495a8 <__alt_mem_epcs_flash_controller+0xfe0385a8>
   49668:	00800084 	movi	r2,2
   4966c:	10c5c83a 	sub	r2,r2,r3
   49670:	003f7506 	br	49448 <__alt_mem_epcs_flash_controller+0xfe038448>
   49674:	d8802d17 	ldw	r2,180(sp)
   49678:	d9002d17 	ldw	r4,180(sp)
   4967c:	bc400043 	ldbu	r17,1(r23)
   49680:	10800017 	ldw	r2,0(r2)
   49684:	582f883a 	mov	r23,r11
   49688:	d8802915 	stw	r2,164(sp)
   4968c:	20800104 	addi	r2,r4,4
   49690:	d9002917 	ldw	r4,164(sp)
   49694:	d8802d15 	stw	r2,180(sp)
   49698:	203df00e 	bge	r4,zero,48e5c <__alt_mem_epcs_flash_controller+0xfe037e5c>
   4969c:	8c403fcc 	andi	r17,r17,255
   496a0:	00bfffc4 	movi	r2,-1
   496a4:	8c40201c 	xori	r17,r17,128
   496a8:	d8802915 	stw	r2,164(sp)
   496ac:	8c7fe004 	addi	r17,r17,-128
   496b0:	00380806 	br	476d4 <__alt_mem_epcs_flash_controller+0xfe0366d4>
   496b4:	9080004c 	andi	r2,r18,1
   496b8:	0039883a 	mov	fp,zero
   496bc:	10000726 	beq	r2,zero,496dc <___svfprintf_internal_r+0x2158>
   496c0:	d8c02817 	ldw	r3,160(sp)
   496c4:	dc001dc4 	addi	r16,sp,119
   496c8:	00800c04 	movi	r2,48
   496cc:	1c07c83a 	sub	r3,r3,r16
   496d0:	d8801dc5 	stb	r2,119(sp)
   496d4:	d8c02e15 	stw	r3,184(sp)
   496d8:	00395206 	br	47c24 <__alt_mem_epcs_flash_controller+0xfe036c24>
   496dc:	d8002e15 	stw	zero,184(sp)
   496e0:	dc001e04 	addi	r16,sp,120
   496e4:	00394f06 	br	47c24 <__alt_mem_epcs_flash_controller+0xfe036c24>
   496e8:	0005883a 	mov	r2,zero
   496ec:	003e3206 	br	48fb8 <__alt_mem_epcs_flash_controller+0xfe037fb8>
   496f0:	dd802617 	ldw	r22,152(sp)
   496f4:	003f0606 	br	49310 <__alt_mem_epcs_flash_controller+0xfe038310>
   496f8:	d9c02785 	stb	r7,158(sp)
   496fc:	003a5106 	br	48044 <__alt_mem_epcs_flash_controller+0xfe037044>
   49700:	d9c02785 	stb	r7,158(sp)
   49704:	003a3706 	br	47fe4 <__alt_mem_epcs_flash_controller+0xfe036fe4>
   49708:	0005883a 	mov	r2,zero
   4970c:	003f5e06 	br	49488 <__alt_mem_epcs_flash_controller+0xfe038488>
   49710:	d9c02785 	stb	r7,158(sp)
   49714:	00391706 	br	47b74 <__alt_mem_epcs_flash_controller+0xfe036b74>
   49718:	d9c02785 	stb	r7,158(sp)
   4971c:	0038e606 	br	47ab8 <__alt_mem_epcs_flash_controller+0xfe036ab8>
   49720:	d8802344 	addi	r2,sp,141
   49724:	003f0806 	br	49348 <__alt_mem_epcs_flash_controller+0xfe038348>
   49728:	d9c02785 	stb	r7,158(sp)
   4972c:	0038b706 	br	47a0c <__alt_mem_epcs_flash_controller+0xfe036a0c>
   49730:	d9c02785 	stb	r7,158(sp)
   49734:	003adc06 	br	482a8 <__alt_mem_epcs_flash_controller+0xfe0372a8>
   49738:	d9403917 	ldw	r5,228(sp)
   4973c:	00800304 	movi	r2,12
   49740:	28800015 	stw	r2,0(r5)
   49744:	00bfffc4 	movi	r2,-1
   49748:	00387806 	br	4792c <__alt_mem_epcs_flash_controller+0xfe03692c>
   4974c:	d9c02785 	stb	r7,158(sp)
   49750:	003abf06 	br	48250 <__alt_mem_epcs_flash_controller+0xfe037250>
   49754:	d9c02785 	stb	r7,158(sp)
   49758:	003a9b06 	br	481c8 <__alt_mem_epcs_flash_controller+0xfe0371c8>

0004975c <time>:
   4975c:	008001b4 	movhi	r2,6
   49760:	defffc04 	addi	sp,sp,-16
   49764:	10be3804 	addi	r2,r2,-1824
   49768:	dc000215 	stw	r16,8(sp)
   4976c:	2021883a 	mov	r16,r4
   49770:	11000017 	ldw	r4,0(r2)
   49774:	000d883a 	mov	r6,zero
   49778:	d80b883a 	mov	r5,sp
   4977c:	dfc00315 	stw	ra,12(sp)
   49780:	004e6b00 	call	4e6b0 <_gettimeofday_r>
   49784:	10000716 	blt	r2,zero,497a4 <time+0x48>
   49788:	d8800017 	ldw	r2,0(sp)
   4978c:	80000126 	beq	r16,zero,49794 <time+0x38>
   49790:	80800015 	stw	r2,0(r16)
   49794:	dfc00317 	ldw	ra,12(sp)
   49798:	dc000217 	ldw	r16,8(sp)
   4979c:	dec00404 	addi	sp,sp,16
   497a0:	f800283a 	ret
   497a4:	00bfffc4 	movi	r2,-1
   497a8:	003ffa06 	br	49794 <__alt_mem_epcs_flash_controller+0xfe038794>

000497ac <_vfiprintf_r>:
   497ac:	deffff04 	addi	sp,sp,-4
   497b0:	dfc00015 	stw	ra,0(sp)
   497b4:	00512bc0 	call	512bc <___vfiprintf_internal_r>
   497b8:	dfc00017 	ldw	ra,0(sp)
   497bc:	dec00104 	addi	sp,sp,4
   497c0:	f800283a 	ret

000497c4 <___vfprintf_internal_r>:
   497c4:	deffb804 	addi	sp,sp,-288
   497c8:	dfc04715 	stw	ra,284(sp)
   497cc:	ddc04515 	stw	r23,276(sp)
   497d0:	dd404315 	stw	r21,268(sp)
   497d4:	d9002c15 	stw	r4,176(sp)
   497d8:	282f883a 	mov	r23,r5
   497dc:	302b883a 	mov	r21,r6
   497e0:	d9c02d15 	stw	r7,180(sp)
   497e4:	df004615 	stw	fp,280(sp)
   497e8:	dd804415 	stw	r22,272(sp)
   497ec:	dd004215 	stw	r20,264(sp)
   497f0:	dcc04115 	stw	r19,260(sp)
   497f4:	dc804015 	stw	r18,256(sp)
   497f8:	dc403f15 	stw	r17,252(sp)
   497fc:	dc003e15 	stw	r16,248(sp)
   49800:	004e7b80 	call	4e7b8 <_localeconv_r>
   49804:	10800017 	ldw	r2,0(r2)
   49808:	1009883a 	mov	r4,r2
   4980c:	d8803415 	stw	r2,208(sp)
   49810:	0046ef40 	call	46ef4 <strlen>
   49814:	d8803715 	stw	r2,220(sp)
   49818:	d8802c17 	ldw	r2,176(sp)
   4981c:	10000226 	beq	r2,zero,49828 <___vfprintf_internal_r+0x64>
   49820:	10800e17 	ldw	r2,56(r2)
   49824:	1000f926 	beq	r2,zero,49c0c <___vfprintf_internal_r+0x448>
   49828:	b880030b 	ldhu	r2,12(r23)
   4982c:	10c8000c 	andi	r3,r2,8192
   49830:	1800061e 	bne	r3,zero,4984c <___vfprintf_internal_r+0x88>
   49834:	b9001917 	ldw	r4,100(r23)
   49838:	00f7ffc4 	movi	r3,-8193
   4983c:	10880014 	ori	r2,r2,8192
   49840:	20c6703a 	and	r3,r4,r3
   49844:	b880030d 	sth	r2,12(r23)
   49848:	b8c01915 	stw	r3,100(r23)
   4984c:	10c0020c 	andi	r3,r2,8
   49850:	1800c126 	beq	r3,zero,49b58 <___vfprintf_internal_r+0x394>
   49854:	b8c00417 	ldw	r3,16(r23)
   49858:	1800bf26 	beq	r3,zero,49b58 <___vfprintf_internal_r+0x394>
   4985c:	1080068c 	andi	r2,r2,26
   49860:	00c00284 	movi	r3,10
   49864:	10c0c426 	beq	r2,r3,49b78 <___vfprintf_internal_r+0x3b4>
   49868:	d8c00404 	addi	r3,sp,16
   4986c:	050001b4 	movhi	r20,6
   49870:	d9001e04 	addi	r4,sp,120
   49874:	a5358184 	addi	r20,r20,-10746
   49878:	d8c01e15 	stw	r3,120(sp)
   4987c:	d8002015 	stw	zero,128(sp)
   49880:	d8001f15 	stw	zero,124(sp)
   49884:	d8003315 	stw	zero,204(sp)
   49888:	d8003615 	stw	zero,216(sp)
   4988c:	d8003815 	stw	zero,224(sp)
   49890:	1811883a 	mov	r8,r3
   49894:	d8003915 	stw	zero,228(sp)
   49898:	d8003a15 	stw	zero,232(sp)
   4989c:	d8002f15 	stw	zero,188(sp)
   498a0:	d9002815 	stw	r4,160(sp)
   498a4:	a8800007 	ldb	r2,0(r21)
   498a8:	10027b26 	beq	r2,zero,4a298 <___vfprintf_internal_r+0xad4>
   498ac:	00c00944 	movi	r3,37
   498b0:	a821883a 	mov	r16,r21
   498b4:	10c0021e 	bne	r2,r3,498c0 <___vfprintf_internal_r+0xfc>
   498b8:	00001406 	br	4990c <___vfprintf_internal_r+0x148>
   498bc:	10c00326 	beq	r2,r3,498cc <___vfprintf_internal_r+0x108>
   498c0:	84000044 	addi	r16,r16,1
   498c4:	80800007 	ldb	r2,0(r16)
   498c8:	103ffc1e 	bne	r2,zero,498bc <__alt_mem_epcs_flash_controller+0xfe0388bc>
   498cc:	8563c83a 	sub	r17,r16,r21
   498d0:	88000e26 	beq	r17,zero,4990c <___vfprintf_internal_r+0x148>
   498d4:	d8c02017 	ldw	r3,128(sp)
   498d8:	d8801f17 	ldw	r2,124(sp)
   498dc:	45400015 	stw	r21,0(r8)
   498e0:	1c47883a 	add	r3,r3,r17
   498e4:	10800044 	addi	r2,r2,1
   498e8:	d8c02015 	stw	r3,128(sp)
   498ec:	44400115 	stw	r17,4(r8)
   498f0:	d8801f15 	stw	r2,124(sp)
   498f4:	00c001c4 	movi	r3,7
   498f8:	1880a716 	blt	r3,r2,49b98 <___vfprintf_internal_r+0x3d4>
   498fc:	42000204 	addi	r8,r8,8
   49900:	d9402f17 	ldw	r5,188(sp)
   49904:	2c4b883a 	add	r5,r5,r17
   49908:	d9402f15 	stw	r5,188(sp)
   4990c:	80800007 	ldb	r2,0(r16)
   49910:	1000a826 	beq	r2,zero,49bb4 <___vfprintf_internal_r+0x3f0>
   49914:	84400047 	ldb	r17,1(r16)
   49918:	00bfffc4 	movi	r2,-1
   4991c:	85400044 	addi	r21,r16,1
   49920:	d8002785 	stb	zero,158(sp)
   49924:	0007883a 	mov	r3,zero
   49928:	000f883a 	mov	r7,zero
   4992c:	d8802915 	stw	r2,164(sp)
   49930:	d8003115 	stw	zero,196(sp)
   49934:	0025883a 	mov	r18,zero
   49938:	01401604 	movi	r5,88
   4993c:	01800244 	movi	r6,9
   49940:	02800a84 	movi	r10,42
   49944:	02401b04 	movi	r9,108
   49948:	ad400044 	addi	r21,r21,1
   4994c:	88bff804 	addi	r2,r17,-32
   49950:	28830436 	bltu	r5,r2,4a564 <___vfprintf_internal_r+0xda0>
   49954:	100490ba 	slli	r2,r2,2
   49958:	01000174 	movhi	r4,5
   4995c:	21265b04 	addi	r4,r4,-26260
   49960:	1105883a 	add	r2,r2,r4
   49964:	10800017 	ldw	r2,0(r2)
   49968:	1000683a 	jmp	r2
   4996c:	0004a484 	movi	zero,4754
   49970:	0004a564 	muli	zero,zero,4757
   49974:	0004a564 	muli	zero,zero,4757
   49978:	0004a4a4 	muli	zero,zero,4754
   4997c:	0004a564 	muli	zero,zero,4757
   49980:	0004a564 	muli	zero,zero,4757
   49984:	0004a564 	muli	zero,zero,4757
   49988:	0004a564 	muli	zero,zero,4757
   4998c:	0004a564 	muli	zero,zero,4757
   49990:	0004a564 	muli	zero,zero,4757
   49994:	00049c18 	cmpnei	zero,zero,4720
   49998:	0004a3c0 	call	4a3c <gen_privatekey+0x4c>
   4999c:	0004a564 	muli	zero,zero,4757
   499a0:	00049ae0 	cmpeqi	zero,zero,4715
   499a4:	00049c40 	call	49c4 <pubkey_from_privatekey+0xac>
   499a8:	0004a564 	muli	zero,zero,4757
   499ac:	00049c80 	call	49c8 <pubkey_from_privatekey+0xb0>
   499b0:	00049c8c 	andi	zero,zero,4722
   499b4:	00049c8c 	andi	zero,zero,4722
   499b8:	00049c8c 	andi	zero,zero,4722
   499bc:	00049c8c 	andi	zero,zero,4722
   499c0:	00049c8c 	andi	zero,zero,4722
   499c4:	00049c8c 	andi	zero,zero,4722
   499c8:	00049c8c 	andi	zero,zero,4722
   499cc:	00049c8c 	andi	zero,zero,4722
   499d0:	00049c8c 	andi	zero,zero,4722
   499d4:	0004a564 	muli	zero,zero,4757
   499d8:	0004a564 	muli	zero,zero,4757
   499dc:	0004a564 	muli	zero,zero,4757
   499e0:	0004a564 	muli	zero,zero,4757
   499e4:	0004a564 	muli	zero,zero,4757
   499e8:	0004a564 	muli	zero,zero,4757
   499ec:	0004a564 	muli	zero,zero,4757
   499f0:	0004a564 	muli	zero,zero,4757
   499f4:	0004a564 	muli	zero,zero,4757
   499f8:	0004a564 	muli	zero,zero,4757
   499fc:	00049cc0 	call	49cc <pubkey_from_privatekey+0xb4>
   49a00:	00049d7c 	xorhi	zero,zero,4725
   49a04:	0004a564 	muli	zero,zero,4757
   49a08:	00049d7c 	xorhi	zero,zero,4725
   49a0c:	0004a564 	muli	zero,zero,4757
   49a10:	0004a564 	muli	zero,zero,4757
   49a14:	0004a564 	muli	zero,zero,4757
   49a18:	0004a564 	muli	zero,zero,4757
   49a1c:	00049e1c 	xori	zero,zero,4728
   49a20:	0004a564 	muli	zero,zero,4757
   49a24:	0004a564 	muli	zero,zero,4757
   49a28:	00049e28 	cmpgeui	zero,zero,4728
   49a2c:	0004a564 	muli	zero,zero,4757
   49a30:	0004a564 	muli	zero,zero,4757
   49a34:	0004a564 	muli	zero,zero,4757
   49a38:	0004a564 	muli	zero,zero,4757
   49a3c:	0004a564 	muli	zero,zero,4757
   49a40:	0004a2a0 	cmpeqi	zero,zero,4746
   49a44:	0004a564 	muli	zero,zero,4757
   49a48:	0004a564 	muli	zero,zero,4757
   49a4c:	0004a300 	call	4a30 <gen_privatekey+0x40>
   49a50:	0004a564 	muli	zero,zero,4757
   49a54:	0004a564 	muli	zero,zero,4757
   49a58:	0004a564 	muli	zero,zero,4757
   49a5c:	0004a564 	muli	zero,zero,4757
   49a60:	0004a564 	muli	zero,zero,4757
   49a64:	0004a564 	muli	zero,zero,4757
   49a68:	0004a564 	muli	zero,zero,4757
   49a6c:	0004a564 	muli	zero,zero,4757
   49a70:	0004a564 	muli	zero,zero,4757
   49a74:	0004a564 	muli	zero,zero,4757
   49a78:	0004a510 	cmplti	zero,zero,4756
   49a7c:	0004a4b0 	cmpltui	zero,zero,4754
   49a80:	00049d7c 	xorhi	zero,zero,4725
   49a84:	00049d7c 	xorhi	zero,zero,4725
   49a88:	00049d7c 	xorhi	zero,zero,4725
   49a8c:	0004a4c0 	call	4a4c <gen_privatekey+0x5c>
   49a90:	0004a4b0 	cmpltui	zero,zero,4754
   49a94:	0004a564 	muli	zero,zero,4757
   49a98:	0004a564 	muli	zero,zero,4757
   49a9c:	0004a4cc 	andi	zero,zero,4755
   49aa0:	0004a564 	muli	zero,zero,4757
   49aa4:	0004a4dc 	xori	zero,zero,4755
   49aa8:	0004a3b0 	cmpltui	zero,zero,4750
   49aac:	00049aec 	andhi	zero,zero,4715
   49ab0:	0004a3d0 	cmplti	zero,zero,4751
   49ab4:	0004a564 	muli	zero,zero,4757
   49ab8:	0004a3dc 	xori	zero,zero,4751
   49abc:	0004a564 	muli	zero,zero,4757
   49ac0:	0004a438 	rdprs	zero,zero,4752
   49ac4:	0004a564 	muli	zero,zero,4757
   49ac8:	0004a564 	muli	zero,zero,4757
   49acc:	0004a448 	cmpgei	zero,zero,4753
   49ad0:	d9003117 	ldw	r4,196(sp)
   49ad4:	d8802d15 	stw	r2,180(sp)
   49ad8:	0109c83a 	sub	r4,zero,r4
   49adc:	d9003115 	stw	r4,196(sp)
   49ae0:	94800114 	ori	r18,r18,4
   49ae4:	ac400007 	ldb	r17,0(r21)
   49ae8:	003f9706 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   49aec:	00800c04 	movi	r2,48
   49af0:	d9002d17 	ldw	r4,180(sp)
   49af4:	d9402917 	ldw	r5,164(sp)
   49af8:	d8802705 	stb	r2,156(sp)
   49afc:	00801e04 	movi	r2,120
   49b00:	d8802745 	stb	r2,157(sp)
   49b04:	d8002785 	stb	zero,158(sp)
   49b08:	20c00104 	addi	r3,r4,4
   49b0c:	24c00017 	ldw	r19,0(r4)
   49b10:	002d883a 	mov	r22,zero
   49b14:	90800094 	ori	r2,r18,2
   49b18:	28029a16 	blt	r5,zero,4a584 <___vfprintf_internal_r+0xdc0>
   49b1c:	00bfdfc4 	movi	r2,-129
   49b20:	90a4703a 	and	r18,r18,r2
   49b24:	d8c02d15 	stw	r3,180(sp)
   49b28:	94800094 	ori	r18,r18,2
   49b2c:	9802871e 	bne	r19,zero,4a54c <___vfprintf_internal_r+0xd88>
   49b30:	008001b4 	movhi	r2,6
   49b34:	10b57204 	addi	r2,r2,-10808
   49b38:	d8803915 	stw	r2,228(sp)
   49b3c:	04401e04 	movi	r17,120
   49b40:	d8802917 	ldw	r2,164(sp)
   49b44:	0039883a 	mov	fp,zero
   49b48:	1001e926 	beq	r2,zero,4a2f0 <___vfprintf_internal_r+0xb2c>
   49b4c:	0027883a 	mov	r19,zero
   49b50:	002d883a 	mov	r22,zero
   49b54:	00020506 	br	4a36c <___vfprintf_internal_r+0xba8>
   49b58:	d9002c17 	ldw	r4,176(sp)
   49b5c:	b80b883a 	mov	r5,r23
   49b60:	004ba940 	call	4ba94 <__swsetup_r>
   49b64:	1005ac1e 	bne	r2,zero,4b218 <___vfprintf_internal_r+0x1a54>
   49b68:	b880030b 	ldhu	r2,12(r23)
   49b6c:	00c00284 	movi	r3,10
   49b70:	1080068c 	andi	r2,r2,26
   49b74:	10ff3c1e 	bne	r2,r3,49868 <__alt_mem_epcs_flash_controller+0xfe038868>
   49b78:	b880038f 	ldh	r2,14(r23)
   49b7c:	103f3a16 	blt	r2,zero,49868 <__alt_mem_epcs_flash_controller+0xfe038868>
   49b80:	d9c02d17 	ldw	r7,180(sp)
   49b84:	d9002c17 	ldw	r4,176(sp)
   49b88:	a80d883a 	mov	r6,r21
   49b8c:	b80b883a 	mov	r5,r23
   49b90:	004b9d80 	call	4b9d8 <__sbprintf>
   49b94:	00001106 	br	49bdc <___vfprintf_internal_r+0x418>
   49b98:	d9002c17 	ldw	r4,176(sp)
   49b9c:	d9801e04 	addi	r6,sp,120
   49ba0:	b80b883a 	mov	r5,r23
   49ba4:	00512a40 	call	512a4 <__sprint_r>
   49ba8:	1000081e 	bne	r2,zero,49bcc <___vfprintf_internal_r+0x408>
   49bac:	da000404 	addi	r8,sp,16
   49bb0:	003f5306 	br	49900 <__alt_mem_epcs_flash_controller+0xfe038900>
   49bb4:	d8802017 	ldw	r2,128(sp)
   49bb8:	10000426 	beq	r2,zero,49bcc <___vfprintf_internal_r+0x408>
   49bbc:	d9002c17 	ldw	r4,176(sp)
   49bc0:	d9801e04 	addi	r6,sp,120
   49bc4:	b80b883a 	mov	r5,r23
   49bc8:	00512a40 	call	512a4 <__sprint_r>
   49bcc:	b880030b 	ldhu	r2,12(r23)
   49bd0:	1080100c 	andi	r2,r2,64
   49bd4:	1005901e 	bne	r2,zero,4b218 <___vfprintf_internal_r+0x1a54>
   49bd8:	d8802f17 	ldw	r2,188(sp)
   49bdc:	dfc04717 	ldw	ra,284(sp)
   49be0:	df004617 	ldw	fp,280(sp)
   49be4:	ddc04517 	ldw	r23,276(sp)
   49be8:	dd804417 	ldw	r22,272(sp)
   49bec:	dd404317 	ldw	r21,268(sp)
   49bf0:	dd004217 	ldw	r20,264(sp)
   49bf4:	dcc04117 	ldw	r19,260(sp)
   49bf8:	dc804017 	ldw	r18,256(sp)
   49bfc:	dc403f17 	ldw	r17,252(sp)
   49c00:	dc003e17 	ldw	r16,248(sp)
   49c04:	dec04804 	addi	sp,sp,288
   49c08:	f800283a 	ret
   49c0c:	d9002c17 	ldw	r4,176(sp)
   49c10:	004dbe80 	call	4dbe8 <__sinit>
   49c14:	003f0406 	br	49828 <__alt_mem_epcs_flash_controller+0xfe038828>
   49c18:	d8802d17 	ldw	r2,180(sp)
   49c1c:	d9002d17 	ldw	r4,180(sp)
   49c20:	10800017 	ldw	r2,0(r2)
   49c24:	d8803115 	stw	r2,196(sp)
   49c28:	20800104 	addi	r2,r4,4
   49c2c:	d9003117 	ldw	r4,196(sp)
   49c30:	203fa716 	blt	r4,zero,49ad0 <__alt_mem_epcs_flash_controller+0xfe038ad0>
   49c34:	d8802d15 	stw	r2,180(sp)
   49c38:	ac400007 	ldb	r17,0(r21)
   49c3c:	003f4206 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   49c40:	ac400007 	ldb	r17,0(r21)
   49c44:	aac00044 	addi	r11,r21,1
   49c48:	8a872826 	beq	r17,r10,4b8ec <___vfprintf_internal_r+0x2128>
   49c4c:	88bff404 	addi	r2,r17,-48
   49c50:	0009883a 	mov	r4,zero
   49c54:	30867d36 	bltu	r6,r2,4b64c <___vfprintf_internal_r+0x1e88>
   49c58:	5c400007 	ldb	r17,0(r11)
   49c5c:	210002a4 	muli	r4,r4,10
   49c60:	5d400044 	addi	r21,r11,1
   49c64:	a817883a 	mov	r11,r21
   49c68:	2089883a 	add	r4,r4,r2
   49c6c:	88bff404 	addi	r2,r17,-48
   49c70:	30bff92e 	bgeu	r6,r2,49c58 <__alt_mem_epcs_flash_controller+0xfe038c58>
   49c74:	2005c916 	blt	r4,zero,4b39c <___vfprintf_internal_r+0x1bd8>
   49c78:	d9002915 	stw	r4,164(sp)
   49c7c:	003f3306 	br	4994c <__alt_mem_epcs_flash_controller+0xfe03894c>
   49c80:	94802014 	ori	r18,r18,128
   49c84:	ac400007 	ldb	r17,0(r21)
   49c88:	003f2f06 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   49c8c:	a809883a 	mov	r4,r21
   49c90:	d8003115 	stw	zero,196(sp)
   49c94:	88bff404 	addi	r2,r17,-48
   49c98:	0017883a 	mov	r11,zero
   49c9c:	24400007 	ldb	r17,0(r4)
   49ca0:	5ac002a4 	muli	r11,r11,10
   49ca4:	ad400044 	addi	r21,r21,1
   49ca8:	a809883a 	mov	r4,r21
   49cac:	12d7883a 	add	r11,r2,r11
   49cb0:	88bff404 	addi	r2,r17,-48
   49cb4:	30bff92e 	bgeu	r6,r2,49c9c <__alt_mem_epcs_flash_controller+0xfe038c9c>
   49cb8:	dac03115 	stw	r11,196(sp)
   49cbc:	003f2306 	br	4994c <__alt_mem_epcs_flash_controller+0xfe03894c>
   49cc0:	18c03fcc 	andi	r3,r3,255
   49cc4:	18072b1e 	bne	r3,zero,4b974 <___vfprintf_internal_r+0x21b0>
   49cc8:	94800414 	ori	r18,r18,16
   49ccc:	9080080c 	andi	r2,r18,32
   49cd0:	10037b26 	beq	r2,zero,4aac0 <___vfprintf_internal_r+0x12fc>
   49cd4:	d9402d17 	ldw	r5,180(sp)
   49cd8:	28800117 	ldw	r2,4(r5)
   49cdc:	2cc00017 	ldw	r19,0(r5)
   49ce0:	29400204 	addi	r5,r5,8
   49ce4:	d9402d15 	stw	r5,180(sp)
   49ce8:	102d883a 	mov	r22,r2
   49cec:	10044b16 	blt	r2,zero,4ae1c <___vfprintf_internal_r+0x1658>
   49cf0:	d9402917 	ldw	r5,164(sp)
   49cf4:	df002783 	ldbu	fp,158(sp)
   49cf8:	2803bc16 	blt	r5,zero,4abec <___vfprintf_internal_r+0x1428>
   49cfc:	00ffdfc4 	movi	r3,-129
   49d00:	9d84b03a 	or	r2,r19,r22
   49d04:	90e4703a 	and	r18,r18,r3
   49d08:	10017726 	beq	r2,zero,4a2e8 <___vfprintf_internal_r+0xb24>
   49d0c:	b0038326 	beq	r22,zero,4ab1c <___vfprintf_internal_r+0x1358>
   49d10:	dc402a15 	stw	r17,168(sp)
   49d14:	dc001e04 	addi	r16,sp,120
   49d18:	b023883a 	mov	r17,r22
   49d1c:	402d883a 	mov	r22,r8
   49d20:	9809883a 	mov	r4,r19
   49d24:	880b883a 	mov	r5,r17
   49d28:	01800284 	movi	r6,10
   49d2c:	000f883a 	mov	r7,zero
   49d30:	00535d80 	call	535d8 <__umoddi3>
   49d34:	10800c04 	addi	r2,r2,48
   49d38:	843fffc4 	addi	r16,r16,-1
   49d3c:	9809883a 	mov	r4,r19
   49d40:	880b883a 	mov	r5,r17
   49d44:	80800005 	stb	r2,0(r16)
   49d48:	01800284 	movi	r6,10
   49d4c:	000f883a 	mov	r7,zero
   49d50:	00530600 	call	53060 <__udivdi3>
   49d54:	1027883a 	mov	r19,r2
   49d58:	10c4b03a 	or	r2,r2,r3
   49d5c:	1823883a 	mov	r17,r3
   49d60:	103fef1e 	bne	r2,zero,49d20 <__alt_mem_epcs_flash_controller+0xfe038d20>
   49d64:	d8c02817 	ldw	r3,160(sp)
   49d68:	dc402a17 	ldw	r17,168(sp)
   49d6c:	b011883a 	mov	r8,r22
   49d70:	1c07c83a 	sub	r3,r3,r16
   49d74:	d8c02e15 	stw	r3,184(sp)
   49d78:	00005906 	br	49ee0 <___vfprintf_internal_r+0x71c>
   49d7c:	18c03fcc 	andi	r3,r3,255
   49d80:	1806fa1e 	bne	r3,zero,4b96c <___vfprintf_internal_r+0x21a8>
   49d84:	9080020c 	andi	r2,r18,8
   49d88:	10048a26 	beq	r2,zero,4afb4 <___vfprintf_internal_r+0x17f0>
   49d8c:	d8c02d17 	ldw	r3,180(sp)
   49d90:	d9002d17 	ldw	r4,180(sp)
   49d94:	d9402d17 	ldw	r5,180(sp)
   49d98:	18c00017 	ldw	r3,0(r3)
   49d9c:	21000117 	ldw	r4,4(r4)
   49da0:	29400204 	addi	r5,r5,8
   49da4:	d8c03615 	stw	r3,216(sp)
   49da8:	d9003815 	stw	r4,224(sp)
   49dac:	d9402d15 	stw	r5,180(sp)
   49db0:	d9003617 	ldw	r4,216(sp)
   49db4:	d9403817 	ldw	r5,224(sp)
   49db8:	da003d15 	stw	r8,244(sp)
   49dbc:	04000044 	movi	r16,1
   49dc0:	004fbec0 	call	4fbec <__fpclassifyd>
   49dc4:	da003d17 	ldw	r8,244(sp)
   49dc8:	14041f1e 	bne	r2,r16,4ae48 <___vfprintf_internal_r+0x1684>
   49dcc:	d9003617 	ldw	r4,216(sp)
   49dd0:	d9403817 	ldw	r5,224(sp)
   49dd4:	000d883a 	mov	r6,zero
   49dd8:	000f883a 	mov	r7,zero
   49ddc:	0043dec0 	call	43dec <__ledf2>
   49de0:	da003d17 	ldw	r8,244(sp)
   49de4:	1005be16 	blt	r2,zero,4b4e0 <___vfprintf_internal_r+0x1d1c>
   49de8:	df002783 	ldbu	fp,158(sp)
   49dec:	008011c4 	movi	r2,71
   49df0:	1445330e 	bge	r2,r17,4b2c0 <___vfprintf_internal_r+0x1afc>
   49df4:	040001b4 	movhi	r16,6
   49df8:	84356a04 	addi	r16,r16,-10840
   49dfc:	00c000c4 	movi	r3,3
   49e00:	00bfdfc4 	movi	r2,-129
   49e04:	d8c02a15 	stw	r3,168(sp)
   49e08:	90a4703a 	and	r18,r18,r2
   49e0c:	d8c02e15 	stw	r3,184(sp)
   49e10:	d8002915 	stw	zero,164(sp)
   49e14:	d8003215 	stw	zero,200(sp)
   49e18:	00003706 	br	49ef8 <___vfprintf_internal_r+0x734>
   49e1c:	94800214 	ori	r18,r18,8
   49e20:	ac400007 	ldb	r17,0(r21)
   49e24:	003ec806 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   49e28:	18c03fcc 	andi	r3,r3,255
   49e2c:	1806db1e 	bne	r3,zero,4b99c <___vfprintf_internal_r+0x21d8>
   49e30:	94800414 	ori	r18,r18,16
   49e34:	9080080c 	andi	r2,r18,32
   49e38:	1002d826 	beq	r2,zero,4a99c <___vfprintf_internal_r+0x11d8>
   49e3c:	d9402d17 	ldw	r5,180(sp)
   49e40:	d8c02917 	ldw	r3,164(sp)
   49e44:	d8002785 	stb	zero,158(sp)
   49e48:	28800204 	addi	r2,r5,8
   49e4c:	2cc00017 	ldw	r19,0(r5)
   49e50:	2d800117 	ldw	r22,4(r5)
   49e54:	18048f16 	blt	r3,zero,4b094 <___vfprintf_internal_r+0x18d0>
   49e58:	013fdfc4 	movi	r4,-129
   49e5c:	9d86b03a 	or	r3,r19,r22
   49e60:	d8802d15 	stw	r2,180(sp)
   49e64:	9124703a 	and	r18,r18,r4
   49e68:	1802d91e 	bne	r3,zero,4a9d0 <___vfprintf_internal_r+0x120c>
   49e6c:	d8c02917 	ldw	r3,164(sp)
   49e70:	0039883a 	mov	fp,zero
   49e74:	1805c326 	beq	r3,zero,4b584 <___vfprintf_internal_r+0x1dc0>
   49e78:	0027883a 	mov	r19,zero
   49e7c:	002d883a 	mov	r22,zero
   49e80:	dc001e04 	addi	r16,sp,120
   49e84:	9806d0fa 	srli	r3,r19,3
   49e88:	b008977a 	slli	r4,r22,29
   49e8c:	b02cd0fa 	srli	r22,r22,3
   49e90:	9cc001cc 	andi	r19,r19,7
   49e94:	98800c04 	addi	r2,r19,48
   49e98:	843fffc4 	addi	r16,r16,-1
   49e9c:	20e6b03a 	or	r19,r4,r3
   49ea0:	80800005 	stb	r2,0(r16)
   49ea4:	9d86b03a 	or	r3,r19,r22
   49ea8:	183ff61e 	bne	r3,zero,49e84 <__alt_mem_epcs_flash_controller+0xfe038e84>
   49eac:	90c0004c 	andi	r3,r18,1
   49eb0:	18013b26 	beq	r3,zero,4a3a0 <___vfprintf_internal_r+0xbdc>
   49eb4:	10803fcc 	andi	r2,r2,255
   49eb8:	1080201c 	xori	r2,r2,128
   49ebc:	10bfe004 	addi	r2,r2,-128
   49ec0:	00c00c04 	movi	r3,48
   49ec4:	10c13626 	beq	r2,r3,4a3a0 <___vfprintf_internal_r+0xbdc>
   49ec8:	80ffffc5 	stb	r3,-1(r16)
   49ecc:	d8c02817 	ldw	r3,160(sp)
   49ed0:	80bfffc4 	addi	r2,r16,-1
   49ed4:	1021883a 	mov	r16,r2
   49ed8:	1887c83a 	sub	r3,r3,r2
   49edc:	d8c02e15 	stw	r3,184(sp)
   49ee0:	d8802e17 	ldw	r2,184(sp)
   49ee4:	d9002917 	ldw	r4,164(sp)
   49ee8:	1100010e 	bge	r2,r4,49ef0 <___vfprintf_internal_r+0x72c>
   49eec:	2005883a 	mov	r2,r4
   49ef0:	d8802a15 	stw	r2,168(sp)
   49ef4:	d8003215 	stw	zero,200(sp)
   49ef8:	e7003fcc 	andi	fp,fp,255
   49efc:	e700201c 	xori	fp,fp,128
   49f00:	e73fe004 	addi	fp,fp,-128
   49f04:	e0000326 	beq	fp,zero,49f14 <___vfprintf_internal_r+0x750>
   49f08:	d8c02a17 	ldw	r3,168(sp)
   49f0c:	18c00044 	addi	r3,r3,1
   49f10:	d8c02a15 	stw	r3,168(sp)
   49f14:	90c0008c 	andi	r3,r18,2
   49f18:	d8c02b15 	stw	r3,172(sp)
   49f1c:	18000326 	beq	r3,zero,49f2c <___vfprintf_internal_r+0x768>
   49f20:	d8c02a17 	ldw	r3,168(sp)
   49f24:	18c00084 	addi	r3,r3,2
   49f28:	d8c02a15 	stw	r3,168(sp)
   49f2c:	90c0210c 	andi	r3,r18,132
   49f30:	d8c03015 	stw	r3,192(sp)
   49f34:	1801a31e 	bne	r3,zero,4a5c4 <___vfprintf_internal_r+0xe00>
   49f38:	d9003117 	ldw	r4,196(sp)
   49f3c:	d8c02a17 	ldw	r3,168(sp)
   49f40:	20e7c83a 	sub	r19,r4,r3
   49f44:	04c19f0e 	bge	zero,r19,4a5c4 <___vfprintf_internal_r+0xe00>
   49f48:	02400404 	movi	r9,16
   49f4c:	d8c02017 	ldw	r3,128(sp)
   49f50:	d8801f17 	ldw	r2,124(sp)
   49f54:	4cc50d0e 	bge	r9,r19,4b38c <___vfprintf_internal_r+0x1bc8>
   49f58:	014001b4 	movhi	r5,6
   49f5c:	29758584 	addi	r5,r5,-10730
   49f60:	dc403b15 	stw	r17,236(sp)
   49f64:	d9403515 	stw	r5,212(sp)
   49f68:	9823883a 	mov	r17,r19
   49f6c:	482d883a 	mov	r22,r9
   49f70:	9027883a 	mov	r19,r18
   49f74:	070001c4 	movi	fp,7
   49f78:	8025883a 	mov	r18,r16
   49f7c:	dc002c17 	ldw	r16,176(sp)
   49f80:	00000306 	br	49f90 <___vfprintf_internal_r+0x7cc>
   49f84:	8c7ffc04 	addi	r17,r17,-16
   49f88:	42000204 	addi	r8,r8,8
   49f8c:	b440130e 	bge	r22,r17,49fdc <___vfprintf_internal_r+0x818>
   49f90:	010001b4 	movhi	r4,6
   49f94:	18c00404 	addi	r3,r3,16
   49f98:	10800044 	addi	r2,r2,1
   49f9c:	21358584 	addi	r4,r4,-10730
   49fa0:	41000015 	stw	r4,0(r8)
   49fa4:	45800115 	stw	r22,4(r8)
   49fa8:	d8c02015 	stw	r3,128(sp)
   49fac:	d8801f15 	stw	r2,124(sp)
   49fb0:	e0bff40e 	bge	fp,r2,49f84 <__alt_mem_epcs_flash_controller+0xfe038f84>
   49fb4:	d9801e04 	addi	r6,sp,120
   49fb8:	b80b883a 	mov	r5,r23
   49fbc:	8009883a 	mov	r4,r16
   49fc0:	00512a40 	call	512a4 <__sprint_r>
   49fc4:	103f011e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   49fc8:	8c7ffc04 	addi	r17,r17,-16
   49fcc:	d8c02017 	ldw	r3,128(sp)
   49fd0:	d8801f17 	ldw	r2,124(sp)
   49fd4:	da000404 	addi	r8,sp,16
   49fd8:	b47fed16 	blt	r22,r17,49f90 <__alt_mem_epcs_flash_controller+0xfe038f90>
   49fdc:	9021883a 	mov	r16,r18
   49fe0:	9825883a 	mov	r18,r19
   49fe4:	8827883a 	mov	r19,r17
   49fe8:	dc403b17 	ldw	r17,236(sp)
   49fec:	d9403517 	ldw	r5,212(sp)
   49ff0:	98c7883a 	add	r3,r19,r3
   49ff4:	10800044 	addi	r2,r2,1
   49ff8:	41400015 	stw	r5,0(r8)
   49ffc:	44c00115 	stw	r19,4(r8)
   4a000:	d8c02015 	stw	r3,128(sp)
   4a004:	d8801f15 	stw	r2,124(sp)
   4a008:	010001c4 	movi	r4,7
   4a00c:	2082a316 	blt	r4,r2,4aa9c <___vfprintf_internal_r+0x12d8>
   4a010:	df002787 	ldb	fp,158(sp)
   4a014:	42000204 	addi	r8,r8,8
   4a018:	e0000c26 	beq	fp,zero,4a04c <___vfprintf_internal_r+0x888>
   4a01c:	d8801f17 	ldw	r2,124(sp)
   4a020:	d9002784 	addi	r4,sp,158
   4a024:	18c00044 	addi	r3,r3,1
   4a028:	10800044 	addi	r2,r2,1
   4a02c:	41000015 	stw	r4,0(r8)
   4a030:	01000044 	movi	r4,1
   4a034:	41000115 	stw	r4,4(r8)
   4a038:	d8c02015 	stw	r3,128(sp)
   4a03c:	d8801f15 	stw	r2,124(sp)
   4a040:	010001c4 	movi	r4,7
   4a044:	20823c16 	blt	r4,r2,4a938 <___vfprintf_internal_r+0x1174>
   4a048:	42000204 	addi	r8,r8,8
   4a04c:	d8802b17 	ldw	r2,172(sp)
   4a050:	10000c26 	beq	r2,zero,4a084 <___vfprintf_internal_r+0x8c0>
   4a054:	d8801f17 	ldw	r2,124(sp)
   4a058:	d9002704 	addi	r4,sp,156
   4a05c:	18c00084 	addi	r3,r3,2
   4a060:	10800044 	addi	r2,r2,1
   4a064:	41000015 	stw	r4,0(r8)
   4a068:	01000084 	movi	r4,2
   4a06c:	41000115 	stw	r4,4(r8)
   4a070:	d8c02015 	stw	r3,128(sp)
   4a074:	d8801f15 	stw	r2,124(sp)
   4a078:	010001c4 	movi	r4,7
   4a07c:	20823616 	blt	r4,r2,4a958 <___vfprintf_internal_r+0x1194>
   4a080:	42000204 	addi	r8,r8,8
   4a084:	d9003017 	ldw	r4,192(sp)
   4a088:	00802004 	movi	r2,128
   4a08c:	20819926 	beq	r4,r2,4a6f4 <___vfprintf_internal_r+0xf30>
   4a090:	d9402917 	ldw	r5,164(sp)
   4a094:	d8802e17 	ldw	r2,184(sp)
   4a098:	28adc83a 	sub	r22,r5,r2
   4a09c:	0580310e 	bge	zero,r22,4a164 <___vfprintf_internal_r+0x9a0>
   4a0a0:	07000404 	movi	fp,16
   4a0a4:	d8801f17 	ldw	r2,124(sp)
   4a0a8:	e584140e 	bge	fp,r22,4b0fc <___vfprintf_internal_r+0x1938>
   4a0ac:	014001b4 	movhi	r5,6
   4a0b0:	29758184 	addi	r5,r5,-10746
   4a0b4:	dc402915 	stw	r17,164(sp)
   4a0b8:	d9402b15 	stw	r5,172(sp)
   4a0bc:	b023883a 	mov	r17,r22
   4a0c0:	04c001c4 	movi	r19,7
   4a0c4:	a82d883a 	mov	r22,r21
   4a0c8:	902b883a 	mov	r21,r18
   4a0cc:	8025883a 	mov	r18,r16
   4a0d0:	dc002c17 	ldw	r16,176(sp)
   4a0d4:	00000306 	br	4a0e4 <___vfprintf_internal_r+0x920>
   4a0d8:	8c7ffc04 	addi	r17,r17,-16
   4a0dc:	42000204 	addi	r8,r8,8
   4a0e0:	e440110e 	bge	fp,r17,4a128 <___vfprintf_internal_r+0x964>
   4a0e4:	18c00404 	addi	r3,r3,16
   4a0e8:	10800044 	addi	r2,r2,1
   4a0ec:	45000015 	stw	r20,0(r8)
   4a0f0:	47000115 	stw	fp,4(r8)
   4a0f4:	d8c02015 	stw	r3,128(sp)
   4a0f8:	d8801f15 	stw	r2,124(sp)
   4a0fc:	98bff60e 	bge	r19,r2,4a0d8 <__alt_mem_epcs_flash_controller+0xfe0390d8>
   4a100:	d9801e04 	addi	r6,sp,120
   4a104:	b80b883a 	mov	r5,r23
   4a108:	8009883a 	mov	r4,r16
   4a10c:	00512a40 	call	512a4 <__sprint_r>
   4a110:	103eae1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a114:	8c7ffc04 	addi	r17,r17,-16
   4a118:	d8c02017 	ldw	r3,128(sp)
   4a11c:	d8801f17 	ldw	r2,124(sp)
   4a120:	da000404 	addi	r8,sp,16
   4a124:	e47fef16 	blt	fp,r17,4a0e4 <__alt_mem_epcs_flash_controller+0xfe0390e4>
   4a128:	9021883a 	mov	r16,r18
   4a12c:	a825883a 	mov	r18,r21
   4a130:	b02b883a 	mov	r21,r22
   4a134:	882d883a 	mov	r22,r17
   4a138:	dc402917 	ldw	r17,164(sp)
   4a13c:	d9002b17 	ldw	r4,172(sp)
   4a140:	1d87883a 	add	r3,r3,r22
   4a144:	10800044 	addi	r2,r2,1
   4a148:	41000015 	stw	r4,0(r8)
   4a14c:	45800115 	stw	r22,4(r8)
   4a150:	d8c02015 	stw	r3,128(sp)
   4a154:	d8801f15 	stw	r2,124(sp)
   4a158:	010001c4 	movi	r4,7
   4a15c:	2081ee16 	blt	r4,r2,4a918 <___vfprintf_internal_r+0x1154>
   4a160:	42000204 	addi	r8,r8,8
   4a164:	9080400c 	andi	r2,r18,256
   4a168:	1001181e 	bne	r2,zero,4a5cc <___vfprintf_internal_r+0xe08>
   4a16c:	d9402e17 	ldw	r5,184(sp)
   4a170:	d8801f17 	ldw	r2,124(sp)
   4a174:	44000015 	stw	r16,0(r8)
   4a178:	1947883a 	add	r3,r3,r5
   4a17c:	10800044 	addi	r2,r2,1
   4a180:	41400115 	stw	r5,4(r8)
   4a184:	d8c02015 	stw	r3,128(sp)
   4a188:	d8801f15 	stw	r2,124(sp)
   4a18c:	010001c4 	movi	r4,7
   4a190:	2081d316 	blt	r4,r2,4a8e0 <___vfprintf_internal_r+0x111c>
   4a194:	42000204 	addi	r8,r8,8
   4a198:	9480010c 	andi	r18,r18,4
   4a19c:	90003226 	beq	r18,zero,4a268 <___vfprintf_internal_r+0xaa4>
   4a1a0:	d9403117 	ldw	r5,196(sp)
   4a1a4:	d8802a17 	ldw	r2,168(sp)
   4a1a8:	28a1c83a 	sub	r16,r5,r2
   4a1ac:	04002e0e 	bge	zero,r16,4a268 <___vfprintf_internal_r+0xaa4>
   4a1b0:	04400404 	movi	r17,16
   4a1b4:	d8801f17 	ldw	r2,124(sp)
   4a1b8:	8c04a20e 	bge	r17,r16,4b444 <___vfprintf_internal_r+0x1c80>
   4a1bc:	014001b4 	movhi	r5,6
   4a1c0:	29758584 	addi	r5,r5,-10730
   4a1c4:	d9403515 	stw	r5,212(sp)
   4a1c8:	048001c4 	movi	r18,7
   4a1cc:	dcc02c17 	ldw	r19,176(sp)
   4a1d0:	00000306 	br	4a1e0 <___vfprintf_internal_r+0xa1c>
   4a1d4:	843ffc04 	addi	r16,r16,-16
   4a1d8:	42000204 	addi	r8,r8,8
   4a1dc:	8c00130e 	bge	r17,r16,4a22c <___vfprintf_internal_r+0xa68>
   4a1e0:	010001b4 	movhi	r4,6
   4a1e4:	18c00404 	addi	r3,r3,16
   4a1e8:	10800044 	addi	r2,r2,1
   4a1ec:	21358584 	addi	r4,r4,-10730
   4a1f0:	41000015 	stw	r4,0(r8)
   4a1f4:	44400115 	stw	r17,4(r8)
   4a1f8:	d8c02015 	stw	r3,128(sp)
   4a1fc:	d8801f15 	stw	r2,124(sp)
   4a200:	90bff40e 	bge	r18,r2,4a1d4 <__alt_mem_epcs_flash_controller+0xfe0391d4>
   4a204:	d9801e04 	addi	r6,sp,120
   4a208:	b80b883a 	mov	r5,r23
   4a20c:	9809883a 	mov	r4,r19
   4a210:	00512a40 	call	512a4 <__sprint_r>
   4a214:	103e6d1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a218:	843ffc04 	addi	r16,r16,-16
   4a21c:	d8c02017 	ldw	r3,128(sp)
   4a220:	d8801f17 	ldw	r2,124(sp)
   4a224:	da000404 	addi	r8,sp,16
   4a228:	8c3fed16 	blt	r17,r16,4a1e0 <__alt_mem_epcs_flash_controller+0xfe0391e0>
   4a22c:	d9403517 	ldw	r5,212(sp)
   4a230:	1c07883a 	add	r3,r3,r16
   4a234:	10800044 	addi	r2,r2,1
   4a238:	41400015 	stw	r5,0(r8)
   4a23c:	44000115 	stw	r16,4(r8)
   4a240:	d8c02015 	stw	r3,128(sp)
   4a244:	d8801f15 	stw	r2,124(sp)
   4a248:	010001c4 	movi	r4,7
   4a24c:	2080060e 	bge	r4,r2,4a268 <___vfprintf_internal_r+0xaa4>
   4a250:	d9002c17 	ldw	r4,176(sp)
   4a254:	d9801e04 	addi	r6,sp,120
   4a258:	b80b883a 	mov	r5,r23
   4a25c:	00512a40 	call	512a4 <__sprint_r>
   4a260:	103e5a1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a264:	d8c02017 	ldw	r3,128(sp)
   4a268:	d8803117 	ldw	r2,196(sp)
   4a26c:	d9002a17 	ldw	r4,168(sp)
   4a270:	1100010e 	bge	r2,r4,4a278 <___vfprintf_internal_r+0xab4>
   4a274:	2005883a 	mov	r2,r4
   4a278:	d9402f17 	ldw	r5,188(sp)
   4a27c:	288b883a 	add	r5,r5,r2
   4a280:	d9402f15 	stw	r5,188(sp)
   4a284:	18019e1e 	bne	r3,zero,4a900 <___vfprintf_internal_r+0x113c>
   4a288:	a8800007 	ldb	r2,0(r21)
   4a28c:	d8001f15 	stw	zero,124(sp)
   4a290:	da000404 	addi	r8,sp,16
   4a294:	103d851e 	bne	r2,zero,498ac <__alt_mem_epcs_flash_controller+0xfe0388ac>
   4a298:	a821883a 	mov	r16,r21
   4a29c:	003d9b06 	br	4990c <__alt_mem_epcs_flash_controller+0xfe03890c>
   4a2a0:	18c03fcc 	andi	r3,r3,255
   4a2a4:	1805c11e 	bne	r3,zero,4b9ac <___vfprintf_internal_r+0x21e8>
   4a2a8:	94800414 	ori	r18,r18,16
   4a2ac:	9080080c 	andi	r2,r18,32
   4a2b0:	10020c26 	beq	r2,zero,4aae4 <___vfprintf_internal_r+0x1320>
   4a2b4:	d8802d17 	ldw	r2,180(sp)
   4a2b8:	d9002917 	ldw	r4,164(sp)
   4a2bc:	d8002785 	stb	zero,158(sp)
   4a2c0:	10c00204 	addi	r3,r2,8
   4a2c4:	14c00017 	ldw	r19,0(r2)
   4a2c8:	15800117 	ldw	r22,4(r2)
   4a2cc:	20040f16 	blt	r4,zero,4b30c <___vfprintf_internal_r+0x1b48>
   4a2d0:	013fdfc4 	movi	r4,-129
   4a2d4:	9d84b03a 	or	r2,r19,r22
   4a2d8:	d8c02d15 	stw	r3,180(sp)
   4a2dc:	9124703a 	and	r18,r18,r4
   4a2e0:	0039883a 	mov	fp,zero
   4a2e4:	103e891e 	bne	r2,zero,49d0c <__alt_mem_epcs_flash_controller+0xfe038d0c>
   4a2e8:	d9002917 	ldw	r4,164(sp)
   4a2ec:	2002c11e 	bne	r4,zero,4adf4 <___vfprintf_internal_r+0x1630>
   4a2f0:	d8002915 	stw	zero,164(sp)
   4a2f4:	d8002e15 	stw	zero,184(sp)
   4a2f8:	dc001e04 	addi	r16,sp,120
   4a2fc:	003ef806 	br	49ee0 <__alt_mem_epcs_flash_controller+0xfe038ee0>
   4a300:	18c03fcc 	andi	r3,r3,255
   4a304:	18059d1e 	bne	r3,zero,4b97c <___vfprintf_internal_r+0x21b8>
   4a308:	014001b4 	movhi	r5,6
   4a30c:	29756d04 	addi	r5,r5,-10828
   4a310:	d9403915 	stw	r5,228(sp)
   4a314:	9080080c 	andi	r2,r18,32
   4a318:	10005226 	beq	r2,zero,4a464 <___vfprintf_internal_r+0xca0>
   4a31c:	d8802d17 	ldw	r2,180(sp)
   4a320:	14c00017 	ldw	r19,0(r2)
   4a324:	15800117 	ldw	r22,4(r2)
   4a328:	10800204 	addi	r2,r2,8
   4a32c:	d8802d15 	stw	r2,180(sp)
   4a330:	9080004c 	andi	r2,r18,1
   4a334:	10019026 	beq	r2,zero,4a978 <___vfprintf_internal_r+0x11b4>
   4a338:	9d84b03a 	or	r2,r19,r22
   4a33c:	10036926 	beq	r2,zero,4b0e4 <___vfprintf_internal_r+0x1920>
   4a340:	d8c02917 	ldw	r3,164(sp)
   4a344:	00800c04 	movi	r2,48
   4a348:	d8802705 	stb	r2,156(sp)
   4a34c:	dc402745 	stb	r17,157(sp)
   4a350:	d8002785 	stb	zero,158(sp)
   4a354:	90800094 	ori	r2,r18,2
   4a358:	18045d16 	blt	r3,zero,4b4d0 <___vfprintf_internal_r+0x1d0c>
   4a35c:	00bfdfc4 	movi	r2,-129
   4a360:	90a4703a 	and	r18,r18,r2
   4a364:	94800094 	ori	r18,r18,2
   4a368:	0039883a 	mov	fp,zero
   4a36c:	d9003917 	ldw	r4,228(sp)
   4a370:	dc001e04 	addi	r16,sp,120
   4a374:	988003cc 	andi	r2,r19,15
   4a378:	b006973a 	slli	r3,r22,28
   4a37c:	2085883a 	add	r2,r4,r2
   4a380:	9826d13a 	srli	r19,r19,4
   4a384:	10800003 	ldbu	r2,0(r2)
   4a388:	b02cd13a 	srli	r22,r22,4
   4a38c:	843fffc4 	addi	r16,r16,-1
   4a390:	1ce6b03a 	or	r19,r3,r19
   4a394:	80800005 	stb	r2,0(r16)
   4a398:	9d84b03a 	or	r2,r19,r22
   4a39c:	103ff51e 	bne	r2,zero,4a374 <__alt_mem_epcs_flash_controller+0xfe039374>
   4a3a0:	d8c02817 	ldw	r3,160(sp)
   4a3a4:	1c07c83a 	sub	r3,r3,r16
   4a3a8:	d8c02e15 	stw	r3,184(sp)
   4a3ac:	003ecc06 	br	49ee0 <__alt_mem_epcs_flash_controller+0xfe038ee0>
   4a3b0:	18c03fcc 	andi	r3,r3,255
   4a3b4:	183e9f26 	beq	r3,zero,49e34 <__alt_mem_epcs_flash_controller+0xfe038e34>
   4a3b8:	d9c02785 	stb	r7,158(sp)
   4a3bc:	003e9d06 	br	49e34 <__alt_mem_epcs_flash_controller+0xfe038e34>
   4a3c0:	00c00044 	movi	r3,1
   4a3c4:	01c00ac4 	movi	r7,43
   4a3c8:	ac400007 	ldb	r17,0(r21)
   4a3cc:	003d5e06 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   4a3d0:	94800814 	ori	r18,r18,32
   4a3d4:	ac400007 	ldb	r17,0(r21)
   4a3d8:	003d5b06 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   4a3dc:	d8c02d17 	ldw	r3,180(sp)
   4a3e0:	d8002785 	stb	zero,158(sp)
   4a3e4:	1c000017 	ldw	r16,0(r3)
   4a3e8:	1cc00104 	addi	r19,r3,4
   4a3ec:	80041926 	beq	r16,zero,4b454 <___vfprintf_internal_r+0x1c90>
   4a3f0:	d9002917 	ldw	r4,164(sp)
   4a3f4:	2003d016 	blt	r4,zero,4b338 <___vfprintf_internal_r+0x1b74>
   4a3f8:	200d883a 	mov	r6,r4
   4a3fc:	000b883a 	mov	r5,zero
   4a400:	8009883a 	mov	r4,r16
   4a404:	da003d15 	stw	r8,244(sp)
   4a408:	004e9a40 	call	4e9a4 <memchr>
   4a40c:	da003d17 	ldw	r8,244(sp)
   4a410:	10045426 	beq	r2,zero,4b564 <___vfprintf_internal_r+0x1da0>
   4a414:	1405c83a 	sub	r2,r2,r16
   4a418:	d8802e15 	stw	r2,184(sp)
   4a41c:	1003cc16 	blt	r2,zero,4b350 <___vfprintf_internal_r+0x1b8c>
   4a420:	df002783 	ldbu	fp,158(sp)
   4a424:	d8802a15 	stw	r2,168(sp)
   4a428:	dcc02d15 	stw	r19,180(sp)
   4a42c:	d8002915 	stw	zero,164(sp)
   4a430:	d8003215 	stw	zero,200(sp)
   4a434:	003eb006 	br	49ef8 <__alt_mem_epcs_flash_controller+0xfe038ef8>
   4a438:	18c03fcc 	andi	r3,r3,255
   4a43c:	183f9b26 	beq	r3,zero,4a2ac <__alt_mem_epcs_flash_controller+0xfe0392ac>
   4a440:	d9c02785 	stb	r7,158(sp)
   4a444:	003f9906 	br	4a2ac <__alt_mem_epcs_flash_controller+0xfe0392ac>
   4a448:	18c03fcc 	andi	r3,r3,255
   4a44c:	1805551e 	bne	r3,zero,4b9a4 <___vfprintf_internal_r+0x21e0>
   4a450:	014001b4 	movhi	r5,6
   4a454:	29757204 	addi	r5,r5,-10808
   4a458:	d9403915 	stw	r5,228(sp)
   4a45c:	9080080c 	andi	r2,r18,32
   4a460:	103fae1e 	bne	r2,zero,4a31c <__alt_mem_epcs_flash_controller+0xfe03931c>
   4a464:	9080040c 	andi	r2,r18,16
   4a468:	1002de26 	beq	r2,zero,4afe4 <___vfprintf_internal_r+0x1820>
   4a46c:	d8c02d17 	ldw	r3,180(sp)
   4a470:	002d883a 	mov	r22,zero
   4a474:	1cc00017 	ldw	r19,0(r3)
   4a478:	18c00104 	addi	r3,r3,4
   4a47c:	d8c02d15 	stw	r3,180(sp)
   4a480:	003fab06 	br	4a330 <__alt_mem_epcs_flash_controller+0xfe039330>
   4a484:	38803fcc 	andi	r2,r7,255
   4a488:	1080201c 	xori	r2,r2,128
   4a48c:	10bfe004 	addi	r2,r2,-128
   4a490:	1002d21e 	bne	r2,zero,4afdc <___vfprintf_internal_r+0x1818>
   4a494:	00c00044 	movi	r3,1
   4a498:	01c00804 	movi	r7,32
   4a49c:	ac400007 	ldb	r17,0(r21)
   4a4a0:	003d2906 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   4a4a4:	94800054 	ori	r18,r18,1
   4a4a8:	ac400007 	ldb	r17,0(r21)
   4a4ac:	003d2606 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   4a4b0:	18c03fcc 	andi	r3,r3,255
   4a4b4:	183e0526 	beq	r3,zero,49ccc <__alt_mem_epcs_flash_controller+0xfe038ccc>
   4a4b8:	d9c02785 	stb	r7,158(sp)
   4a4bc:	003e0306 	br	49ccc <__alt_mem_epcs_flash_controller+0xfe038ccc>
   4a4c0:	94801014 	ori	r18,r18,64
   4a4c4:	ac400007 	ldb	r17,0(r21)
   4a4c8:	003d1f06 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   4a4cc:	ac400007 	ldb	r17,0(r21)
   4a4d0:	8a438726 	beq	r17,r9,4b2f0 <___vfprintf_internal_r+0x1b2c>
   4a4d4:	94800414 	ori	r18,r18,16
   4a4d8:	003d1b06 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   4a4dc:	18c03fcc 	andi	r3,r3,255
   4a4e0:	1805341e 	bne	r3,zero,4b9b4 <___vfprintf_internal_r+0x21f0>
   4a4e4:	9080080c 	andi	r2,r18,32
   4a4e8:	1002cd26 	beq	r2,zero,4b020 <___vfprintf_internal_r+0x185c>
   4a4ec:	d9402d17 	ldw	r5,180(sp)
   4a4f0:	d9002f17 	ldw	r4,188(sp)
   4a4f4:	28800017 	ldw	r2,0(r5)
   4a4f8:	2007d7fa 	srai	r3,r4,31
   4a4fc:	29400104 	addi	r5,r5,4
   4a500:	d9402d15 	stw	r5,180(sp)
   4a504:	11000015 	stw	r4,0(r2)
   4a508:	10c00115 	stw	r3,4(r2)
   4a50c:	003ce506 	br	498a4 <__alt_mem_epcs_flash_controller+0xfe0388a4>
   4a510:	d8c02d17 	ldw	r3,180(sp)
   4a514:	d9002d17 	ldw	r4,180(sp)
   4a518:	d8002785 	stb	zero,158(sp)
   4a51c:	18800017 	ldw	r2,0(r3)
   4a520:	21000104 	addi	r4,r4,4
   4a524:	00c00044 	movi	r3,1
   4a528:	d8c02a15 	stw	r3,168(sp)
   4a52c:	d8801405 	stb	r2,80(sp)
   4a530:	d9002d15 	stw	r4,180(sp)
   4a534:	d8c02e15 	stw	r3,184(sp)
   4a538:	d8002915 	stw	zero,164(sp)
   4a53c:	d8003215 	stw	zero,200(sp)
   4a540:	dc001404 	addi	r16,sp,80
   4a544:	0039883a 	mov	fp,zero
   4a548:	003e7206 	br	49f14 <__alt_mem_epcs_flash_controller+0xfe038f14>
   4a54c:	010001b4 	movhi	r4,6
   4a550:	21357204 	addi	r4,r4,-10808
   4a554:	0039883a 	mov	fp,zero
   4a558:	d9003915 	stw	r4,228(sp)
   4a55c:	04401e04 	movi	r17,120
   4a560:	003f8206 	br	4a36c <__alt_mem_epcs_flash_controller+0xfe03936c>
   4a564:	18c03fcc 	andi	r3,r3,255
   4a568:	1805061e 	bne	r3,zero,4b984 <___vfprintf_internal_r+0x21c0>
   4a56c:	883d9126 	beq	r17,zero,49bb4 <__alt_mem_epcs_flash_controller+0xfe038bb4>
   4a570:	00c00044 	movi	r3,1
   4a574:	d8c02a15 	stw	r3,168(sp)
   4a578:	dc401405 	stb	r17,80(sp)
   4a57c:	d8002785 	stb	zero,158(sp)
   4a580:	003fec06 	br	4a534 <__alt_mem_epcs_flash_controller+0xfe039534>
   4a584:	014001b4 	movhi	r5,6
   4a588:	29757204 	addi	r5,r5,-10808
   4a58c:	d9403915 	stw	r5,228(sp)
   4a590:	d8c02d15 	stw	r3,180(sp)
   4a594:	1025883a 	mov	r18,r2
   4a598:	04401e04 	movi	r17,120
   4a59c:	9d84b03a 	or	r2,r19,r22
   4a5a0:	1000fc1e 	bne	r2,zero,4a994 <___vfprintf_internal_r+0x11d0>
   4a5a4:	0039883a 	mov	fp,zero
   4a5a8:	00800084 	movi	r2,2
   4a5ac:	10803fcc 	andi	r2,r2,255
   4a5b0:	00c00044 	movi	r3,1
   4a5b4:	10c20f26 	beq	r2,r3,4adf4 <___vfprintf_internal_r+0x1630>
   4a5b8:	00c00084 	movi	r3,2
   4a5bc:	10fd6326 	beq	r2,r3,49b4c <__alt_mem_epcs_flash_controller+0xfe038b4c>
   4a5c0:	003e2d06 	br	49e78 <__alt_mem_epcs_flash_controller+0xfe038e78>
   4a5c4:	d8c02017 	ldw	r3,128(sp)
   4a5c8:	003e9306 	br	4a018 <__alt_mem_epcs_flash_controller+0xfe039018>
   4a5cc:	00801944 	movi	r2,101
   4a5d0:	14407e0e 	bge	r2,r17,4a7cc <___vfprintf_internal_r+0x1008>
   4a5d4:	d9003617 	ldw	r4,216(sp)
   4a5d8:	d9403817 	ldw	r5,224(sp)
   4a5dc:	000d883a 	mov	r6,zero
   4a5e0:	000f883a 	mov	r7,zero
   4a5e4:	d8c03c15 	stw	r3,240(sp)
   4a5e8:	da003d15 	stw	r8,244(sp)
   4a5ec:	0053b100 	call	53b10 <__eqdf2>
   4a5f0:	d8c03c17 	ldw	r3,240(sp)
   4a5f4:	da003d17 	ldw	r8,244(sp)
   4a5f8:	1000f71e 	bne	r2,zero,4a9d8 <___vfprintf_internal_r+0x1214>
   4a5fc:	d8801f17 	ldw	r2,124(sp)
   4a600:	010001b4 	movhi	r4,6
   4a604:	21357904 	addi	r4,r4,-10780
   4a608:	18c00044 	addi	r3,r3,1
   4a60c:	10800044 	addi	r2,r2,1
   4a610:	41000015 	stw	r4,0(r8)
   4a614:	01000044 	movi	r4,1
   4a618:	41000115 	stw	r4,4(r8)
   4a61c:	d8c02015 	stw	r3,128(sp)
   4a620:	d8801f15 	stw	r2,124(sp)
   4a624:	010001c4 	movi	r4,7
   4a628:	2082b816 	blt	r4,r2,4b10c <___vfprintf_internal_r+0x1948>
   4a62c:	42000204 	addi	r8,r8,8
   4a630:	d8802617 	ldw	r2,152(sp)
   4a634:	d9403317 	ldw	r5,204(sp)
   4a638:	11400216 	blt	r2,r5,4a644 <___vfprintf_internal_r+0xe80>
   4a63c:	9080004c 	andi	r2,r18,1
   4a640:	103ed526 	beq	r2,zero,4a198 <__alt_mem_epcs_flash_controller+0xfe039198>
   4a644:	d8803717 	ldw	r2,220(sp)
   4a648:	d9003417 	ldw	r4,208(sp)
   4a64c:	d9403717 	ldw	r5,220(sp)
   4a650:	1887883a 	add	r3,r3,r2
   4a654:	d8801f17 	ldw	r2,124(sp)
   4a658:	41000015 	stw	r4,0(r8)
   4a65c:	41400115 	stw	r5,4(r8)
   4a660:	10800044 	addi	r2,r2,1
   4a664:	d8c02015 	stw	r3,128(sp)
   4a668:	d8801f15 	stw	r2,124(sp)
   4a66c:	010001c4 	movi	r4,7
   4a670:	20832916 	blt	r4,r2,4b318 <___vfprintf_internal_r+0x1b54>
   4a674:	42000204 	addi	r8,r8,8
   4a678:	d8803317 	ldw	r2,204(sp)
   4a67c:	143fffc4 	addi	r16,r2,-1
   4a680:	043ec50e 	bge	zero,r16,4a198 <__alt_mem_epcs_flash_controller+0xfe039198>
   4a684:	04400404 	movi	r17,16
   4a688:	d8801f17 	ldw	r2,124(sp)
   4a68c:	8c00880e 	bge	r17,r16,4a8b0 <___vfprintf_internal_r+0x10ec>
   4a690:	014001b4 	movhi	r5,6
   4a694:	29758184 	addi	r5,r5,-10746
   4a698:	d9402b15 	stw	r5,172(sp)
   4a69c:	058001c4 	movi	r22,7
   4a6a0:	dcc02c17 	ldw	r19,176(sp)
   4a6a4:	00000306 	br	4a6b4 <___vfprintf_internal_r+0xef0>
   4a6a8:	42000204 	addi	r8,r8,8
   4a6ac:	843ffc04 	addi	r16,r16,-16
   4a6b0:	8c00820e 	bge	r17,r16,4a8bc <___vfprintf_internal_r+0x10f8>
   4a6b4:	18c00404 	addi	r3,r3,16
   4a6b8:	10800044 	addi	r2,r2,1
   4a6bc:	45000015 	stw	r20,0(r8)
   4a6c0:	44400115 	stw	r17,4(r8)
   4a6c4:	d8c02015 	stw	r3,128(sp)
   4a6c8:	d8801f15 	stw	r2,124(sp)
   4a6cc:	b0bff60e 	bge	r22,r2,4a6a8 <__alt_mem_epcs_flash_controller+0xfe0396a8>
   4a6d0:	d9801e04 	addi	r6,sp,120
   4a6d4:	b80b883a 	mov	r5,r23
   4a6d8:	9809883a 	mov	r4,r19
   4a6dc:	00512a40 	call	512a4 <__sprint_r>
   4a6e0:	103d3a1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a6e4:	d8c02017 	ldw	r3,128(sp)
   4a6e8:	d8801f17 	ldw	r2,124(sp)
   4a6ec:	da000404 	addi	r8,sp,16
   4a6f0:	003fee06 	br	4a6ac <__alt_mem_epcs_flash_controller+0xfe0396ac>
   4a6f4:	d9403117 	ldw	r5,196(sp)
   4a6f8:	d8802a17 	ldw	r2,168(sp)
   4a6fc:	28adc83a 	sub	r22,r5,r2
   4a700:	05be630e 	bge	zero,r22,4a090 <__alt_mem_epcs_flash_controller+0xfe039090>
   4a704:	07000404 	movi	fp,16
   4a708:	d8801f17 	ldw	r2,124(sp)
   4a70c:	e5838f0e 	bge	fp,r22,4b54c <___vfprintf_internal_r+0x1d88>
   4a710:	014001b4 	movhi	r5,6
   4a714:	29758184 	addi	r5,r5,-10746
   4a718:	dc403015 	stw	r17,192(sp)
   4a71c:	d9402b15 	stw	r5,172(sp)
   4a720:	b023883a 	mov	r17,r22
   4a724:	04c001c4 	movi	r19,7
   4a728:	a82d883a 	mov	r22,r21
   4a72c:	902b883a 	mov	r21,r18
   4a730:	8025883a 	mov	r18,r16
   4a734:	dc002c17 	ldw	r16,176(sp)
   4a738:	00000306 	br	4a748 <___vfprintf_internal_r+0xf84>
   4a73c:	8c7ffc04 	addi	r17,r17,-16
   4a740:	42000204 	addi	r8,r8,8
   4a744:	e440110e 	bge	fp,r17,4a78c <___vfprintf_internal_r+0xfc8>
   4a748:	18c00404 	addi	r3,r3,16
   4a74c:	10800044 	addi	r2,r2,1
   4a750:	45000015 	stw	r20,0(r8)
   4a754:	47000115 	stw	fp,4(r8)
   4a758:	d8c02015 	stw	r3,128(sp)
   4a75c:	d8801f15 	stw	r2,124(sp)
   4a760:	98bff60e 	bge	r19,r2,4a73c <__alt_mem_epcs_flash_controller+0xfe03973c>
   4a764:	d9801e04 	addi	r6,sp,120
   4a768:	b80b883a 	mov	r5,r23
   4a76c:	8009883a 	mov	r4,r16
   4a770:	00512a40 	call	512a4 <__sprint_r>
   4a774:	103d151e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a778:	8c7ffc04 	addi	r17,r17,-16
   4a77c:	d8c02017 	ldw	r3,128(sp)
   4a780:	d8801f17 	ldw	r2,124(sp)
   4a784:	da000404 	addi	r8,sp,16
   4a788:	e47fef16 	blt	fp,r17,4a748 <__alt_mem_epcs_flash_controller+0xfe039748>
   4a78c:	9021883a 	mov	r16,r18
   4a790:	a825883a 	mov	r18,r21
   4a794:	b02b883a 	mov	r21,r22
   4a798:	882d883a 	mov	r22,r17
   4a79c:	dc403017 	ldw	r17,192(sp)
   4a7a0:	d9002b17 	ldw	r4,172(sp)
   4a7a4:	1d87883a 	add	r3,r3,r22
   4a7a8:	10800044 	addi	r2,r2,1
   4a7ac:	41000015 	stw	r4,0(r8)
   4a7b0:	45800115 	stw	r22,4(r8)
   4a7b4:	d8c02015 	stw	r3,128(sp)
   4a7b8:	d8801f15 	stw	r2,124(sp)
   4a7bc:	010001c4 	movi	r4,7
   4a7c0:	20818e16 	blt	r4,r2,4adfc <___vfprintf_internal_r+0x1638>
   4a7c4:	42000204 	addi	r8,r8,8
   4a7c8:	003e3106 	br	4a090 <__alt_mem_epcs_flash_controller+0xfe039090>
   4a7cc:	d9403317 	ldw	r5,204(sp)
   4a7d0:	00800044 	movi	r2,1
   4a7d4:	18c00044 	addi	r3,r3,1
   4a7d8:	1141530e 	bge	r2,r5,4ad28 <___vfprintf_internal_r+0x1564>
   4a7dc:	dc401f17 	ldw	r17,124(sp)
   4a7e0:	00800044 	movi	r2,1
   4a7e4:	40800115 	stw	r2,4(r8)
   4a7e8:	8c400044 	addi	r17,r17,1
   4a7ec:	44000015 	stw	r16,0(r8)
   4a7f0:	d8c02015 	stw	r3,128(sp)
   4a7f4:	dc401f15 	stw	r17,124(sp)
   4a7f8:	008001c4 	movi	r2,7
   4a7fc:	14416b16 	blt	r2,r17,4adac <___vfprintf_internal_r+0x15e8>
   4a800:	42000204 	addi	r8,r8,8
   4a804:	d8803717 	ldw	r2,220(sp)
   4a808:	d9003417 	ldw	r4,208(sp)
   4a80c:	8c400044 	addi	r17,r17,1
   4a810:	10c7883a 	add	r3,r2,r3
   4a814:	40800115 	stw	r2,4(r8)
   4a818:	41000015 	stw	r4,0(r8)
   4a81c:	d8c02015 	stw	r3,128(sp)
   4a820:	dc401f15 	stw	r17,124(sp)
   4a824:	008001c4 	movi	r2,7
   4a828:	14416916 	blt	r2,r17,4add0 <___vfprintf_internal_r+0x160c>
   4a82c:	45800204 	addi	r22,r8,8
   4a830:	d9003617 	ldw	r4,216(sp)
   4a834:	d9403817 	ldw	r5,224(sp)
   4a838:	000d883a 	mov	r6,zero
   4a83c:	000f883a 	mov	r7,zero
   4a840:	d8c03c15 	stw	r3,240(sp)
   4a844:	0053b100 	call	53b10 <__eqdf2>
   4a848:	d8c03c17 	ldw	r3,240(sp)
   4a84c:	1000bc26 	beq	r2,zero,4ab40 <___vfprintf_internal_r+0x137c>
   4a850:	d9403317 	ldw	r5,204(sp)
   4a854:	84000044 	addi	r16,r16,1
   4a858:	8c400044 	addi	r17,r17,1
   4a85c:	28bfffc4 	addi	r2,r5,-1
   4a860:	1887883a 	add	r3,r3,r2
   4a864:	b0800115 	stw	r2,4(r22)
   4a868:	b4000015 	stw	r16,0(r22)
   4a86c:	d8c02015 	stw	r3,128(sp)
   4a870:	dc401f15 	stw	r17,124(sp)
   4a874:	008001c4 	movi	r2,7
   4a878:	14414316 	blt	r2,r17,4ad88 <___vfprintf_internal_r+0x15c4>
   4a87c:	b5800204 	addi	r22,r22,8
   4a880:	d9003a17 	ldw	r4,232(sp)
   4a884:	df0022c4 	addi	fp,sp,139
   4a888:	8c400044 	addi	r17,r17,1
   4a88c:	20c7883a 	add	r3,r4,r3
   4a890:	b7000015 	stw	fp,0(r22)
   4a894:	b1000115 	stw	r4,4(r22)
   4a898:	d8c02015 	stw	r3,128(sp)
   4a89c:	dc401f15 	stw	r17,124(sp)
   4a8a0:	008001c4 	movi	r2,7
   4a8a4:	14400e16 	blt	r2,r17,4a8e0 <___vfprintf_internal_r+0x111c>
   4a8a8:	b2000204 	addi	r8,r22,8
   4a8ac:	003e3a06 	br	4a198 <__alt_mem_epcs_flash_controller+0xfe039198>
   4a8b0:	010001b4 	movhi	r4,6
   4a8b4:	21358184 	addi	r4,r4,-10746
   4a8b8:	d9002b15 	stw	r4,172(sp)
   4a8bc:	d9002b17 	ldw	r4,172(sp)
   4a8c0:	1c07883a 	add	r3,r3,r16
   4a8c4:	44000115 	stw	r16,4(r8)
   4a8c8:	41000015 	stw	r4,0(r8)
   4a8cc:	10800044 	addi	r2,r2,1
   4a8d0:	d8c02015 	stw	r3,128(sp)
   4a8d4:	d8801f15 	stw	r2,124(sp)
   4a8d8:	010001c4 	movi	r4,7
   4a8dc:	20be2d0e 	bge	r4,r2,4a194 <__alt_mem_epcs_flash_controller+0xfe039194>
   4a8e0:	d9002c17 	ldw	r4,176(sp)
   4a8e4:	d9801e04 	addi	r6,sp,120
   4a8e8:	b80b883a 	mov	r5,r23
   4a8ec:	00512a40 	call	512a4 <__sprint_r>
   4a8f0:	103cb61e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a8f4:	d8c02017 	ldw	r3,128(sp)
   4a8f8:	da000404 	addi	r8,sp,16
   4a8fc:	003e2606 	br	4a198 <__alt_mem_epcs_flash_controller+0xfe039198>
   4a900:	d9002c17 	ldw	r4,176(sp)
   4a904:	d9801e04 	addi	r6,sp,120
   4a908:	b80b883a 	mov	r5,r23
   4a90c:	00512a40 	call	512a4 <__sprint_r>
   4a910:	103e5d26 	beq	r2,zero,4a288 <__alt_mem_epcs_flash_controller+0xfe039288>
   4a914:	003cad06 	br	49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a918:	d9002c17 	ldw	r4,176(sp)
   4a91c:	d9801e04 	addi	r6,sp,120
   4a920:	b80b883a 	mov	r5,r23
   4a924:	00512a40 	call	512a4 <__sprint_r>
   4a928:	103ca81e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a92c:	d8c02017 	ldw	r3,128(sp)
   4a930:	da000404 	addi	r8,sp,16
   4a934:	003e0b06 	br	4a164 <__alt_mem_epcs_flash_controller+0xfe039164>
   4a938:	d9002c17 	ldw	r4,176(sp)
   4a93c:	d9801e04 	addi	r6,sp,120
   4a940:	b80b883a 	mov	r5,r23
   4a944:	00512a40 	call	512a4 <__sprint_r>
   4a948:	103ca01e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a94c:	d8c02017 	ldw	r3,128(sp)
   4a950:	da000404 	addi	r8,sp,16
   4a954:	003dbd06 	br	4a04c <__alt_mem_epcs_flash_controller+0xfe03904c>
   4a958:	d9002c17 	ldw	r4,176(sp)
   4a95c:	d9801e04 	addi	r6,sp,120
   4a960:	b80b883a 	mov	r5,r23
   4a964:	00512a40 	call	512a4 <__sprint_r>
   4a968:	103c981e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4a96c:	d8c02017 	ldw	r3,128(sp)
   4a970:	da000404 	addi	r8,sp,16
   4a974:	003dc306 	br	4a084 <__alt_mem_epcs_flash_controller+0xfe039084>
   4a978:	d8802917 	ldw	r2,164(sp)
   4a97c:	d8002785 	stb	zero,158(sp)
   4a980:	103f0616 	blt	r2,zero,4a59c <__alt_mem_epcs_flash_controller+0xfe03959c>
   4a984:	00ffdfc4 	movi	r3,-129
   4a988:	9d84b03a 	or	r2,r19,r22
   4a98c:	90e4703a 	and	r18,r18,r3
   4a990:	103c6b26 	beq	r2,zero,49b40 <__alt_mem_epcs_flash_controller+0xfe038b40>
   4a994:	0039883a 	mov	fp,zero
   4a998:	003e7406 	br	4a36c <__alt_mem_epcs_flash_controller+0xfe03936c>
   4a99c:	9080040c 	andi	r2,r18,16
   4a9a0:	1001b326 	beq	r2,zero,4b070 <___vfprintf_internal_r+0x18ac>
   4a9a4:	d9002d17 	ldw	r4,180(sp)
   4a9a8:	d9402917 	ldw	r5,164(sp)
   4a9ac:	d8002785 	stb	zero,158(sp)
   4a9b0:	20800104 	addi	r2,r4,4
   4a9b4:	24c00017 	ldw	r19,0(r4)
   4a9b8:	002d883a 	mov	r22,zero
   4a9bc:	2801b516 	blt	r5,zero,4b094 <___vfprintf_internal_r+0x18d0>
   4a9c0:	00ffdfc4 	movi	r3,-129
   4a9c4:	d8802d15 	stw	r2,180(sp)
   4a9c8:	90e4703a 	and	r18,r18,r3
   4a9cc:	983d2726 	beq	r19,zero,49e6c <__alt_mem_epcs_flash_controller+0xfe038e6c>
   4a9d0:	0039883a 	mov	fp,zero
   4a9d4:	003d2a06 	br	49e80 <__alt_mem_epcs_flash_controller+0xfe038e80>
   4a9d8:	dc402617 	ldw	r17,152(sp)
   4a9dc:	0441d30e 	bge	zero,r17,4b12c <___vfprintf_internal_r+0x1968>
   4a9e0:	dc403217 	ldw	r17,200(sp)
   4a9e4:	d8803317 	ldw	r2,204(sp)
   4a9e8:	1440010e 	bge	r2,r17,4a9f0 <___vfprintf_internal_r+0x122c>
   4a9ec:	1023883a 	mov	r17,r2
   4a9f0:	04400a0e 	bge	zero,r17,4aa1c <___vfprintf_internal_r+0x1258>
   4a9f4:	d8801f17 	ldw	r2,124(sp)
   4a9f8:	1c47883a 	add	r3,r3,r17
   4a9fc:	44000015 	stw	r16,0(r8)
   4aa00:	10800044 	addi	r2,r2,1
   4aa04:	44400115 	stw	r17,4(r8)
   4aa08:	d8c02015 	stw	r3,128(sp)
   4aa0c:	d8801f15 	stw	r2,124(sp)
   4aa10:	010001c4 	movi	r4,7
   4aa14:	20826516 	blt	r4,r2,4b3ac <___vfprintf_internal_r+0x1be8>
   4aa18:	42000204 	addi	r8,r8,8
   4aa1c:	88026116 	blt	r17,zero,4b3a4 <___vfprintf_internal_r+0x1be0>
   4aa20:	d9003217 	ldw	r4,200(sp)
   4aa24:	2463c83a 	sub	r17,r4,r17
   4aa28:	04407b0e 	bge	zero,r17,4ac18 <___vfprintf_internal_r+0x1454>
   4aa2c:	05800404 	movi	r22,16
   4aa30:	d8801f17 	ldw	r2,124(sp)
   4aa34:	b4419d0e 	bge	r22,r17,4b0ac <___vfprintf_internal_r+0x18e8>
   4aa38:	010001b4 	movhi	r4,6
   4aa3c:	21358184 	addi	r4,r4,-10746
   4aa40:	d9002b15 	stw	r4,172(sp)
   4aa44:	070001c4 	movi	fp,7
   4aa48:	dcc02c17 	ldw	r19,176(sp)
   4aa4c:	00000306 	br	4aa5c <___vfprintf_internal_r+0x1298>
   4aa50:	42000204 	addi	r8,r8,8
   4aa54:	8c7ffc04 	addi	r17,r17,-16
   4aa58:	b441970e 	bge	r22,r17,4b0b8 <___vfprintf_internal_r+0x18f4>
   4aa5c:	18c00404 	addi	r3,r3,16
   4aa60:	10800044 	addi	r2,r2,1
   4aa64:	45000015 	stw	r20,0(r8)
   4aa68:	45800115 	stw	r22,4(r8)
   4aa6c:	d8c02015 	stw	r3,128(sp)
   4aa70:	d8801f15 	stw	r2,124(sp)
   4aa74:	e0bff60e 	bge	fp,r2,4aa50 <__alt_mem_epcs_flash_controller+0xfe039a50>
   4aa78:	d9801e04 	addi	r6,sp,120
   4aa7c:	b80b883a 	mov	r5,r23
   4aa80:	9809883a 	mov	r4,r19
   4aa84:	00512a40 	call	512a4 <__sprint_r>
   4aa88:	103c501e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4aa8c:	d8c02017 	ldw	r3,128(sp)
   4aa90:	d8801f17 	ldw	r2,124(sp)
   4aa94:	da000404 	addi	r8,sp,16
   4aa98:	003fee06 	br	4aa54 <__alt_mem_epcs_flash_controller+0xfe039a54>
   4aa9c:	d9002c17 	ldw	r4,176(sp)
   4aaa0:	d9801e04 	addi	r6,sp,120
   4aaa4:	b80b883a 	mov	r5,r23
   4aaa8:	00512a40 	call	512a4 <__sprint_r>
   4aaac:	103c471e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4aab0:	d8c02017 	ldw	r3,128(sp)
   4aab4:	df002787 	ldb	fp,158(sp)
   4aab8:	da000404 	addi	r8,sp,16
   4aabc:	003d5606 	br	4a018 <__alt_mem_epcs_flash_controller+0xfe039018>
   4aac0:	9080040c 	andi	r2,r18,16
   4aac4:	10016126 	beq	r2,zero,4b04c <___vfprintf_internal_r+0x1888>
   4aac8:	d8802d17 	ldw	r2,180(sp)
   4aacc:	14c00017 	ldw	r19,0(r2)
   4aad0:	10800104 	addi	r2,r2,4
   4aad4:	d8802d15 	stw	r2,180(sp)
   4aad8:	982dd7fa 	srai	r22,r19,31
   4aadc:	b005883a 	mov	r2,r22
   4aae0:	003c8206 	br	49cec <__alt_mem_epcs_flash_controller+0xfe038cec>
   4aae4:	9080040c 	andi	r2,r18,16
   4aae8:	10003526 	beq	r2,zero,4abc0 <___vfprintf_internal_r+0x13fc>
   4aaec:	d9402d17 	ldw	r5,180(sp)
   4aaf0:	d8c02917 	ldw	r3,164(sp)
   4aaf4:	d8002785 	stb	zero,158(sp)
   4aaf8:	28800104 	addi	r2,r5,4
   4aafc:	2cc00017 	ldw	r19,0(r5)
   4ab00:	002d883a 	mov	r22,zero
   4ab04:	18003716 	blt	r3,zero,4abe4 <___vfprintf_internal_r+0x1420>
   4ab08:	00ffdfc4 	movi	r3,-129
   4ab0c:	d8802d15 	stw	r2,180(sp)
   4ab10:	90e4703a 	and	r18,r18,r3
   4ab14:	0039883a 	mov	fp,zero
   4ab18:	983df326 	beq	r19,zero,4a2e8 <__alt_mem_epcs_flash_controller+0xfe0392e8>
   4ab1c:	00800244 	movi	r2,9
   4ab20:	14fc7b36 	bltu	r2,r19,49d10 <__alt_mem_epcs_flash_controller+0xfe038d10>
   4ab24:	d8c02817 	ldw	r3,160(sp)
   4ab28:	dc001dc4 	addi	r16,sp,119
   4ab2c:	9cc00c04 	addi	r19,r19,48
   4ab30:	1c07c83a 	sub	r3,r3,r16
   4ab34:	dcc01dc5 	stb	r19,119(sp)
   4ab38:	d8c02e15 	stw	r3,184(sp)
   4ab3c:	003ce806 	br	49ee0 <__alt_mem_epcs_flash_controller+0xfe038ee0>
   4ab40:	d8803317 	ldw	r2,204(sp)
   4ab44:	143fffc4 	addi	r16,r2,-1
   4ab48:	043f4d0e 	bge	zero,r16,4a880 <__alt_mem_epcs_flash_controller+0xfe039880>
   4ab4c:	07000404 	movi	fp,16
   4ab50:	e400810e 	bge	fp,r16,4ad58 <___vfprintf_internal_r+0x1594>
   4ab54:	014001b4 	movhi	r5,6
   4ab58:	29758184 	addi	r5,r5,-10746
   4ab5c:	d9402b15 	stw	r5,172(sp)
   4ab60:	01c001c4 	movi	r7,7
   4ab64:	dcc02c17 	ldw	r19,176(sp)
   4ab68:	00000306 	br	4ab78 <___vfprintf_internal_r+0x13b4>
   4ab6c:	b5800204 	addi	r22,r22,8
   4ab70:	843ffc04 	addi	r16,r16,-16
   4ab74:	e4007b0e 	bge	fp,r16,4ad64 <___vfprintf_internal_r+0x15a0>
   4ab78:	18c00404 	addi	r3,r3,16
   4ab7c:	8c400044 	addi	r17,r17,1
   4ab80:	b5000015 	stw	r20,0(r22)
   4ab84:	b7000115 	stw	fp,4(r22)
   4ab88:	d8c02015 	stw	r3,128(sp)
   4ab8c:	dc401f15 	stw	r17,124(sp)
   4ab90:	3c7ff60e 	bge	r7,r17,4ab6c <__alt_mem_epcs_flash_controller+0xfe039b6c>
   4ab94:	d9801e04 	addi	r6,sp,120
   4ab98:	b80b883a 	mov	r5,r23
   4ab9c:	9809883a 	mov	r4,r19
   4aba0:	d9c03c15 	stw	r7,240(sp)
   4aba4:	00512a40 	call	512a4 <__sprint_r>
   4aba8:	d9c03c17 	ldw	r7,240(sp)
   4abac:	103c071e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4abb0:	d8c02017 	ldw	r3,128(sp)
   4abb4:	dc401f17 	ldw	r17,124(sp)
   4abb8:	dd800404 	addi	r22,sp,16
   4abbc:	003fec06 	br	4ab70 <__alt_mem_epcs_flash_controller+0xfe039b70>
   4abc0:	9080100c 	andi	r2,r18,64
   4abc4:	d8002785 	stb	zero,158(sp)
   4abc8:	10010e26 	beq	r2,zero,4b004 <___vfprintf_internal_r+0x1840>
   4abcc:	d9002d17 	ldw	r4,180(sp)
   4abd0:	d9402917 	ldw	r5,164(sp)
   4abd4:	002d883a 	mov	r22,zero
   4abd8:	20800104 	addi	r2,r4,4
   4abdc:	24c0000b 	ldhu	r19,0(r4)
   4abe0:	283fc90e 	bge	r5,zero,4ab08 <__alt_mem_epcs_flash_controller+0xfe039b08>
   4abe4:	d8802d15 	stw	r2,180(sp)
   4abe8:	0039883a 	mov	fp,zero
   4abec:	9d84b03a 	or	r2,r19,r22
   4abf0:	103c461e 	bne	r2,zero,49d0c <__alt_mem_epcs_flash_controller+0xfe038d0c>
   4abf4:	00800044 	movi	r2,1
   4abf8:	003e6c06 	br	4a5ac <__alt_mem_epcs_flash_controller+0xfe0395ac>
   4abfc:	d9002c17 	ldw	r4,176(sp)
   4ac00:	d9801e04 	addi	r6,sp,120
   4ac04:	b80b883a 	mov	r5,r23
   4ac08:	00512a40 	call	512a4 <__sprint_r>
   4ac0c:	103bef1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4ac10:	d8c02017 	ldw	r3,128(sp)
   4ac14:	da000404 	addi	r8,sp,16
   4ac18:	d9003217 	ldw	r4,200(sp)
   4ac1c:	d8802617 	ldw	r2,152(sp)
   4ac20:	d9403317 	ldw	r5,204(sp)
   4ac24:	8123883a 	add	r17,r16,r4
   4ac28:	11400216 	blt	r2,r5,4ac34 <___vfprintf_internal_r+0x1470>
   4ac2c:	9100004c 	andi	r4,r18,1
   4ac30:	20000d26 	beq	r4,zero,4ac68 <___vfprintf_internal_r+0x14a4>
   4ac34:	d9003717 	ldw	r4,220(sp)
   4ac38:	d9403417 	ldw	r5,208(sp)
   4ac3c:	1907883a 	add	r3,r3,r4
   4ac40:	d9001f17 	ldw	r4,124(sp)
   4ac44:	41400015 	stw	r5,0(r8)
   4ac48:	d9403717 	ldw	r5,220(sp)
   4ac4c:	21000044 	addi	r4,r4,1
   4ac50:	d8c02015 	stw	r3,128(sp)
   4ac54:	41400115 	stw	r5,4(r8)
   4ac58:	d9001f15 	stw	r4,124(sp)
   4ac5c:	014001c4 	movi	r5,7
   4ac60:	2901e816 	blt	r5,r4,4b404 <___vfprintf_internal_r+0x1c40>
   4ac64:	42000204 	addi	r8,r8,8
   4ac68:	d9003317 	ldw	r4,204(sp)
   4ac6c:	8121883a 	add	r16,r16,r4
   4ac70:	2085c83a 	sub	r2,r4,r2
   4ac74:	8461c83a 	sub	r16,r16,r17
   4ac78:	1400010e 	bge	r2,r16,4ac80 <___vfprintf_internal_r+0x14bc>
   4ac7c:	1021883a 	mov	r16,r2
   4ac80:	04000a0e 	bge	zero,r16,4acac <___vfprintf_internal_r+0x14e8>
   4ac84:	d9001f17 	ldw	r4,124(sp)
   4ac88:	1c07883a 	add	r3,r3,r16
   4ac8c:	44400015 	stw	r17,0(r8)
   4ac90:	21000044 	addi	r4,r4,1
   4ac94:	44000115 	stw	r16,4(r8)
   4ac98:	d8c02015 	stw	r3,128(sp)
   4ac9c:	d9001f15 	stw	r4,124(sp)
   4aca0:	014001c4 	movi	r5,7
   4aca4:	2901fb16 	blt	r5,r4,4b494 <___vfprintf_internal_r+0x1cd0>
   4aca8:	42000204 	addi	r8,r8,8
   4acac:	8001f716 	blt	r16,zero,4b48c <___vfprintf_internal_r+0x1cc8>
   4acb0:	1421c83a 	sub	r16,r2,r16
   4acb4:	043d380e 	bge	zero,r16,4a198 <__alt_mem_epcs_flash_controller+0xfe039198>
   4acb8:	04400404 	movi	r17,16
   4acbc:	d8801f17 	ldw	r2,124(sp)
   4acc0:	8c3efb0e 	bge	r17,r16,4a8b0 <__alt_mem_epcs_flash_controller+0xfe0398b0>
   4acc4:	014001b4 	movhi	r5,6
   4acc8:	29758184 	addi	r5,r5,-10746
   4accc:	d9402b15 	stw	r5,172(sp)
   4acd0:	058001c4 	movi	r22,7
   4acd4:	dcc02c17 	ldw	r19,176(sp)
   4acd8:	00000306 	br	4ace8 <___vfprintf_internal_r+0x1524>
   4acdc:	42000204 	addi	r8,r8,8
   4ace0:	843ffc04 	addi	r16,r16,-16
   4ace4:	8c3ef50e 	bge	r17,r16,4a8bc <__alt_mem_epcs_flash_controller+0xfe0398bc>
   4ace8:	18c00404 	addi	r3,r3,16
   4acec:	10800044 	addi	r2,r2,1
   4acf0:	45000015 	stw	r20,0(r8)
   4acf4:	44400115 	stw	r17,4(r8)
   4acf8:	d8c02015 	stw	r3,128(sp)
   4acfc:	d8801f15 	stw	r2,124(sp)
   4ad00:	b0bff60e 	bge	r22,r2,4acdc <__alt_mem_epcs_flash_controller+0xfe039cdc>
   4ad04:	d9801e04 	addi	r6,sp,120
   4ad08:	b80b883a 	mov	r5,r23
   4ad0c:	9809883a 	mov	r4,r19
   4ad10:	00512a40 	call	512a4 <__sprint_r>
   4ad14:	103bad1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4ad18:	d8c02017 	ldw	r3,128(sp)
   4ad1c:	d8801f17 	ldw	r2,124(sp)
   4ad20:	da000404 	addi	r8,sp,16
   4ad24:	003fee06 	br	4ace0 <__alt_mem_epcs_flash_controller+0xfe039ce0>
   4ad28:	9088703a 	and	r4,r18,r2
   4ad2c:	203eab1e 	bne	r4,zero,4a7dc <__alt_mem_epcs_flash_controller+0xfe0397dc>
   4ad30:	dc401f17 	ldw	r17,124(sp)
   4ad34:	40800115 	stw	r2,4(r8)
   4ad38:	44000015 	stw	r16,0(r8)
   4ad3c:	8c400044 	addi	r17,r17,1
   4ad40:	d8c02015 	stw	r3,128(sp)
   4ad44:	dc401f15 	stw	r17,124(sp)
   4ad48:	008001c4 	movi	r2,7
   4ad4c:	14400e16 	blt	r2,r17,4ad88 <___vfprintf_internal_r+0x15c4>
   4ad50:	45800204 	addi	r22,r8,8
   4ad54:	003eca06 	br	4a880 <__alt_mem_epcs_flash_controller+0xfe039880>
   4ad58:	010001b4 	movhi	r4,6
   4ad5c:	21358184 	addi	r4,r4,-10746
   4ad60:	d9002b15 	stw	r4,172(sp)
   4ad64:	d8802b17 	ldw	r2,172(sp)
   4ad68:	1c07883a 	add	r3,r3,r16
   4ad6c:	8c400044 	addi	r17,r17,1
   4ad70:	b0800015 	stw	r2,0(r22)
   4ad74:	b4000115 	stw	r16,4(r22)
   4ad78:	d8c02015 	stw	r3,128(sp)
   4ad7c:	dc401f15 	stw	r17,124(sp)
   4ad80:	008001c4 	movi	r2,7
   4ad84:	147ebd0e 	bge	r2,r17,4a87c <__alt_mem_epcs_flash_controller+0xfe03987c>
   4ad88:	d9002c17 	ldw	r4,176(sp)
   4ad8c:	d9801e04 	addi	r6,sp,120
   4ad90:	b80b883a 	mov	r5,r23
   4ad94:	00512a40 	call	512a4 <__sprint_r>
   4ad98:	103b8c1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4ad9c:	d8c02017 	ldw	r3,128(sp)
   4ada0:	dc401f17 	ldw	r17,124(sp)
   4ada4:	dd800404 	addi	r22,sp,16
   4ada8:	003eb506 	br	4a880 <__alt_mem_epcs_flash_controller+0xfe039880>
   4adac:	d9002c17 	ldw	r4,176(sp)
   4adb0:	d9801e04 	addi	r6,sp,120
   4adb4:	b80b883a 	mov	r5,r23
   4adb8:	00512a40 	call	512a4 <__sprint_r>
   4adbc:	103b831e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4adc0:	d8c02017 	ldw	r3,128(sp)
   4adc4:	dc401f17 	ldw	r17,124(sp)
   4adc8:	da000404 	addi	r8,sp,16
   4adcc:	003e8d06 	br	4a804 <__alt_mem_epcs_flash_controller+0xfe039804>
   4add0:	d9002c17 	ldw	r4,176(sp)
   4add4:	d9801e04 	addi	r6,sp,120
   4add8:	b80b883a 	mov	r5,r23
   4addc:	00512a40 	call	512a4 <__sprint_r>
   4ade0:	103b7a1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4ade4:	d8c02017 	ldw	r3,128(sp)
   4ade8:	dc401f17 	ldw	r17,124(sp)
   4adec:	dd800404 	addi	r22,sp,16
   4adf0:	003e8f06 	br	4a830 <__alt_mem_epcs_flash_controller+0xfe039830>
   4adf4:	0027883a 	mov	r19,zero
   4adf8:	003f4a06 	br	4ab24 <__alt_mem_epcs_flash_controller+0xfe039b24>
   4adfc:	d9002c17 	ldw	r4,176(sp)
   4ae00:	d9801e04 	addi	r6,sp,120
   4ae04:	b80b883a 	mov	r5,r23
   4ae08:	00512a40 	call	512a4 <__sprint_r>
   4ae0c:	103b6f1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4ae10:	d8c02017 	ldw	r3,128(sp)
   4ae14:	da000404 	addi	r8,sp,16
   4ae18:	003c9d06 	br	4a090 <__alt_mem_epcs_flash_controller+0xfe039090>
   4ae1c:	04e7c83a 	sub	r19,zero,r19
   4ae20:	9804c03a 	cmpne	r2,r19,zero
   4ae24:	05adc83a 	sub	r22,zero,r22
   4ae28:	b0adc83a 	sub	r22,r22,r2
   4ae2c:	d8802917 	ldw	r2,164(sp)
   4ae30:	07000b44 	movi	fp,45
   4ae34:	df002785 	stb	fp,158(sp)
   4ae38:	10017b16 	blt	r2,zero,4b428 <___vfprintf_internal_r+0x1c64>
   4ae3c:	00bfdfc4 	movi	r2,-129
   4ae40:	90a4703a 	and	r18,r18,r2
   4ae44:	003bb106 	br	49d0c <__alt_mem_epcs_flash_controller+0xfe038d0c>
   4ae48:	d9003617 	ldw	r4,216(sp)
   4ae4c:	d9403817 	ldw	r5,224(sp)
   4ae50:	da003d15 	stw	r8,244(sp)
   4ae54:	004fbec0 	call	4fbec <__fpclassifyd>
   4ae58:	da003d17 	ldw	r8,244(sp)
   4ae5c:	1000f026 	beq	r2,zero,4b220 <___vfprintf_internal_r+0x1a5c>
   4ae60:	d9002917 	ldw	r4,164(sp)
   4ae64:	05bff7c4 	movi	r22,-33
   4ae68:	00bfffc4 	movi	r2,-1
   4ae6c:	8dac703a 	and	r22,r17,r22
   4ae70:	20820026 	beq	r4,r2,4b674 <___vfprintf_internal_r+0x1eb0>
   4ae74:	008011c4 	movi	r2,71
   4ae78:	b081f726 	beq	r22,r2,4b658 <___vfprintf_internal_r+0x1e94>
   4ae7c:	d9003817 	ldw	r4,224(sp)
   4ae80:	90c04014 	ori	r3,r18,256
   4ae84:	d8c02b15 	stw	r3,172(sp)
   4ae88:	20021516 	blt	r4,zero,4b6e0 <___vfprintf_internal_r+0x1f1c>
   4ae8c:	dcc03817 	ldw	r19,224(sp)
   4ae90:	d8002a05 	stb	zero,168(sp)
   4ae94:	00801984 	movi	r2,102
   4ae98:	8881f926 	beq	r17,r2,4b680 <___vfprintf_internal_r+0x1ebc>
   4ae9c:	00801184 	movi	r2,70
   4aea0:	88821c26 	beq	r17,r2,4b714 <___vfprintf_internal_r+0x1f50>
   4aea4:	00801144 	movi	r2,69
   4aea8:	b081ef26 	beq	r22,r2,4b668 <___vfprintf_internal_r+0x1ea4>
   4aeac:	d8c02917 	ldw	r3,164(sp)
   4aeb0:	d8802104 	addi	r2,sp,132
   4aeb4:	d8800315 	stw	r2,12(sp)
   4aeb8:	d9403617 	ldw	r5,216(sp)
   4aebc:	d8802504 	addi	r2,sp,148
   4aec0:	d9002c17 	ldw	r4,176(sp)
   4aec4:	d8800215 	stw	r2,8(sp)
   4aec8:	d8802604 	addi	r2,sp,152
   4aecc:	d8c00015 	stw	r3,0(sp)
   4aed0:	d8800115 	stw	r2,4(sp)
   4aed4:	01c00084 	movi	r7,2
   4aed8:	980d883a 	mov	r6,r19
   4aedc:	d8c03c15 	stw	r3,240(sp)
   4aee0:	da003d15 	stw	r8,244(sp)
   4aee4:	004bf680 	call	4bf68 <_dtoa_r>
   4aee8:	1021883a 	mov	r16,r2
   4aeec:	008019c4 	movi	r2,103
   4aef0:	d8c03c17 	ldw	r3,240(sp)
   4aef4:	da003d17 	ldw	r8,244(sp)
   4aef8:	88817126 	beq	r17,r2,4b4c0 <___vfprintf_internal_r+0x1cfc>
   4aefc:	008011c4 	movi	r2,71
   4af00:	88829226 	beq	r17,r2,4b94c <___vfprintf_internal_r+0x2188>
   4af04:	80f9883a 	add	fp,r16,r3
   4af08:	d9003617 	ldw	r4,216(sp)
   4af0c:	000d883a 	mov	r6,zero
   4af10:	000f883a 	mov	r7,zero
   4af14:	980b883a 	mov	r5,r19
   4af18:	da003d15 	stw	r8,244(sp)
   4af1c:	0053b100 	call	53b10 <__eqdf2>
   4af20:	da003d17 	ldw	r8,244(sp)
   4af24:	10018d26 	beq	r2,zero,4b55c <___vfprintf_internal_r+0x1d98>
   4af28:	d8802117 	ldw	r2,132(sp)
   4af2c:	1700062e 	bgeu	r2,fp,4af48 <___vfprintf_internal_r+0x1784>
   4af30:	01000c04 	movi	r4,48
   4af34:	10c00044 	addi	r3,r2,1
   4af38:	d8c02115 	stw	r3,132(sp)
   4af3c:	11000005 	stb	r4,0(r2)
   4af40:	d8802117 	ldw	r2,132(sp)
   4af44:	173ffb36 	bltu	r2,fp,4af34 <__alt_mem_epcs_flash_controller+0xfe039f34>
   4af48:	1405c83a 	sub	r2,r2,r16
   4af4c:	d8803315 	stw	r2,204(sp)
   4af50:	008011c4 	movi	r2,71
   4af54:	b0817626 	beq	r22,r2,4b530 <___vfprintf_internal_r+0x1d6c>
   4af58:	00801944 	movi	r2,101
   4af5c:	1442810e 	bge	r2,r17,4b964 <___vfprintf_internal_r+0x21a0>
   4af60:	d8c02617 	ldw	r3,152(sp)
   4af64:	00801984 	movi	r2,102
   4af68:	d8c03215 	stw	r3,200(sp)
   4af6c:	8881fe26 	beq	r17,r2,4b768 <___vfprintf_internal_r+0x1fa4>
   4af70:	d8c03217 	ldw	r3,200(sp)
   4af74:	d9003317 	ldw	r4,204(sp)
   4af78:	1901dd16 	blt	r3,r4,4b6f0 <___vfprintf_internal_r+0x1f2c>
   4af7c:	9480004c 	andi	r18,r18,1
   4af80:	90022b1e 	bne	r18,zero,4b830 <___vfprintf_internal_r+0x206c>
   4af84:	1805883a 	mov	r2,r3
   4af88:	18028016 	blt	r3,zero,4b98c <___vfprintf_internal_r+0x21c8>
   4af8c:	d8c03217 	ldw	r3,200(sp)
   4af90:	044019c4 	movi	r17,103
   4af94:	d8c02e15 	stw	r3,184(sp)
   4af98:	df002a07 	ldb	fp,168(sp)
   4af9c:	e001531e 	bne	fp,zero,4b4ec <___vfprintf_internal_r+0x1d28>
   4afa0:	df002783 	ldbu	fp,158(sp)
   4afa4:	d8802a15 	stw	r2,168(sp)
   4afa8:	dc802b17 	ldw	r18,172(sp)
   4afac:	d8002915 	stw	zero,164(sp)
   4afb0:	003bd106 	br	49ef8 <__alt_mem_epcs_flash_controller+0xfe038ef8>
   4afb4:	d8802d17 	ldw	r2,180(sp)
   4afb8:	d8c02d17 	ldw	r3,180(sp)
   4afbc:	d9002d17 	ldw	r4,180(sp)
   4afc0:	10800017 	ldw	r2,0(r2)
   4afc4:	18c00117 	ldw	r3,4(r3)
   4afc8:	21000204 	addi	r4,r4,8
   4afcc:	d8803615 	stw	r2,216(sp)
   4afd0:	d8c03815 	stw	r3,224(sp)
   4afd4:	d9002d15 	stw	r4,180(sp)
   4afd8:	003b7506 	br	49db0 <__alt_mem_epcs_flash_controller+0xfe038db0>
   4afdc:	ac400007 	ldb	r17,0(r21)
   4afe0:	003a5906 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   4afe4:	9080100c 	andi	r2,r18,64
   4afe8:	1000a826 	beq	r2,zero,4b28c <___vfprintf_internal_r+0x1ac8>
   4afec:	d9002d17 	ldw	r4,180(sp)
   4aff0:	002d883a 	mov	r22,zero
   4aff4:	24c0000b 	ldhu	r19,0(r4)
   4aff8:	21000104 	addi	r4,r4,4
   4affc:	d9002d15 	stw	r4,180(sp)
   4b000:	003ccb06 	br	4a330 <__alt_mem_epcs_flash_controller+0xfe039330>
   4b004:	d8c02d17 	ldw	r3,180(sp)
   4b008:	d9002917 	ldw	r4,164(sp)
   4b00c:	002d883a 	mov	r22,zero
   4b010:	18800104 	addi	r2,r3,4
   4b014:	1cc00017 	ldw	r19,0(r3)
   4b018:	203ebb0e 	bge	r4,zero,4ab08 <__alt_mem_epcs_flash_controller+0xfe039b08>
   4b01c:	003ef106 	br	4abe4 <__alt_mem_epcs_flash_controller+0xfe039be4>
   4b020:	9080040c 	andi	r2,r18,16
   4b024:	1000921e 	bne	r2,zero,4b270 <___vfprintf_internal_r+0x1aac>
   4b028:	9480100c 	andi	r18,r18,64
   4b02c:	90013926 	beq	r18,zero,4b514 <___vfprintf_internal_r+0x1d50>
   4b030:	d9002d17 	ldw	r4,180(sp)
   4b034:	d9402f17 	ldw	r5,188(sp)
   4b038:	20800017 	ldw	r2,0(r4)
   4b03c:	21000104 	addi	r4,r4,4
   4b040:	d9002d15 	stw	r4,180(sp)
   4b044:	1140000d 	sth	r5,0(r2)
   4b048:	003a1606 	br	498a4 <__alt_mem_epcs_flash_controller+0xfe0388a4>
   4b04c:	9080100c 	andi	r2,r18,64
   4b050:	10008026 	beq	r2,zero,4b254 <___vfprintf_internal_r+0x1a90>
   4b054:	d8c02d17 	ldw	r3,180(sp)
   4b058:	1cc0000f 	ldh	r19,0(r3)
   4b05c:	18c00104 	addi	r3,r3,4
   4b060:	d8c02d15 	stw	r3,180(sp)
   4b064:	982dd7fa 	srai	r22,r19,31
   4b068:	b005883a 	mov	r2,r22
   4b06c:	003b1f06 	br	49cec <__alt_mem_epcs_flash_controller+0xfe038cec>
   4b070:	9080100c 	andi	r2,r18,64
   4b074:	d8002785 	stb	zero,158(sp)
   4b078:	10008a1e 	bne	r2,zero,4b2a4 <___vfprintf_internal_r+0x1ae0>
   4b07c:	d9402d17 	ldw	r5,180(sp)
   4b080:	d8c02917 	ldw	r3,164(sp)
   4b084:	002d883a 	mov	r22,zero
   4b088:	28800104 	addi	r2,r5,4
   4b08c:	2cc00017 	ldw	r19,0(r5)
   4b090:	183e4b0e 	bge	r3,zero,4a9c0 <__alt_mem_epcs_flash_controller+0xfe0399c0>
   4b094:	9d86b03a 	or	r3,r19,r22
   4b098:	d8802d15 	stw	r2,180(sp)
   4b09c:	183e4c1e 	bne	r3,zero,4a9d0 <__alt_mem_epcs_flash_controller+0xfe0399d0>
   4b0a0:	0039883a 	mov	fp,zero
   4b0a4:	0005883a 	mov	r2,zero
   4b0a8:	003d4006 	br	4a5ac <__alt_mem_epcs_flash_controller+0xfe0395ac>
   4b0ac:	014001b4 	movhi	r5,6
   4b0b0:	29758184 	addi	r5,r5,-10746
   4b0b4:	d9402b15 	stw	r5,172(sp)
   4b0b8:	d9402b17 	ldw	r5,172(sp)
   4b0bc:	1c47883a 	add	r3,r3,r17
   4b0c0:	10800044 	addi	r2,r2,1
   4b0c4:	41400015 	stw	r5,0(r8)
   4b0c8:	44400115 	stw	r17,4(r8)
   4b0cc:	d8c02015 	stw	r3,128(sp)
   4b0d0:	d8801f15 	stw	r2,124(sp)
   4b0d4:	010001c4 	movi	r4,7
   4b0d8:	20bec816 	blt	r4,r2,4abfc <__alt_mem_epcs_flash_controller+0xfe039bfc>
   4b0dc:	42000204 	addi	r8,r8,8
   4b0e0:	003ecd06 	br	4ac18 <__alt_mem_epcs_flash_controller+0xfe039c18>
   4b0e4:	d9002917 	ldw	r4,164(sp)
   4b0e8:	d8002785 	stb	zero,158(sp)
   4b0ec:	203d2d16 	blt	r4,zero,4a5a4 <__alt_mem_epcs_flash_controller+0xfe0395a4>
   4b0f0:	00bfdfc4 	movi	r2,-129
   4b0f4:	90a4703a 	and	r18,r18,r2
   4b0f8:	003a9106 	br	49b40 <__alt_mem_epcs_flash_controller+0xfe038b40>
   4b0fc:	010001b4 	movhi	r4,6
   4b100:	21358184 	addi	r4,r4,-10746
   4b104:	d9002b15 	stw	r4,172(sp)
   4b108:	003c0c06 	br	4a13c <__alt_mem_epcs_flash_controller+0xfe03913c>
   4b10c:	d9002c17 	ldw	r4,176(sp)
   4b110:	d9801e04 	addi	r6,sp,120
   4b114:	b80b883a 	mov	r5,r23
   4b118:	00512a40 	call	512a4 <__sprint_r>
   4b11c:	103aab1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4b120:	d8c02017 	ldw	r3,128(sp)
   4b124:	da000404 	addi	r8,sp,16
   4b128:	003d4106 	br	4a630 <__alt_mem_epcs_flash_controller+0xfe039630>
   4b12c:	d8801f17 	ldw	r2,124(sp)
   4b130:	014001b4 	movhi	r5,6
   4b134:	01000044 	movi	r4,1
   4b138:	18c00044 	addi	r3,r3,1
   4b13c:	10800044 	addi	r2,r2,1
   4b140:	29757904 	addi	r5,r5,-10780
   4b144:	41000115 	stw	r4,4(r8)
   4b148:	41400015 	stw	r5,0(r8)
   4b14c:	d8c02015 	stw	r3,128(sp)
   4b150:	d8801f15 	stw	r2,124(sp)
   4b154:	010001c4 	movi	r4,7
   4b158:	20805c16 	blt	r4,r2,4b2cc <___vfprintf_internal_r+0x1b08>
   4b15c:	42000204 	addi	r8,r8,8
   4b160:	8800041e 	bne	r17,zero,4b174 <___vfprintf_internal_r+0x19b0>
   4b164:	d8803317 	ldw	r2,204(sp)
   4b168:	1000021e 	bne	r2,zero,4b174 <___vfprintf_internal_r+0x19b0>
   4b16c:	9080004c 	andi	r2,r18,1
   4b170:	103c0926 	beq	r2,zero,4a198 <__alt_mem_epcs_flash_controller+0xfe039198>
   4b174:	d9003717 	ldw	r4,220(sp)
   4b178:	d8801f17 	ldw	r2,124(sp)
   4b17c:	d9403417 	ldw	r5,208(sp)
   4b180:	20c7883a 	add	r3,r4,r3
   4b184:	10800044 	addi	r2,r2,1
   4b188:	41000115 	stw	r4,4(r8)
   4b18c:	41400015 	stw	r5,0(r8)
   4b190:	d8c02015 	stw	r3,128(sp)
   4b194:	d8801f15 	stw	r2,124(sp)
   4b198:	010001c4 	movi	r4,7
   4b19c:	20812116 	blt	r4,r2,4b624 <___vfprintf_internal_r+0x1e60>
   4b1a0:	42000204 	addi	r8,r8,8
   4b1a4:	0463c83a 	sub	r17,zero,r17
   4b1a8:	0440730e 	bge	zero,r17,4b378 <___vfprintf_internal_r+0x1bb4>
   4b1ac:	05800404 	movi	r22,16
   4b1b0:	b440860e 	bge	r22,r17,4b3cc <___vfprintf_internal_r+0x1c08>
   4b1b4:	014001b4 	movhi	r5,6
   4b1b8:	29758184 	addi	r5,r5,-10746
   4b1bc:	d9402b15 	stw	r5,172(sp)
   4b1c0:	070001c4 	movi	fp,7
   4b1c4:	dcc02c17 	ldw	r19,176(sp)
   4b1c8:	00000306 	br	4b1d8 <___vfprintf_internal_r+0x1a14>
   4b1cc:	42000204 	addi	r8,r8,8
   4b1d0:	8c7ffc04 	addi	r17,r17,-16
   4b1d4:	b440800e 	bge	r22,r17,4b3d8 <___vfprintf_internal_r+0x1c14>
   4b1d8:	18c00404 	addi	r3,r3,16
   4b1dc:	10800044 	addi	r2,r2,1
   4b1e0:	45000015 	stw	r20,0(r8)
   4b1e4:	45800115 	stw	r22,4(r8)
   4b1e8:	d8c02015 	stw	r3,128(sp)
   4b1ec:	d8801f15 	stw	r2,124(sp)
   4b1f0:	e0bff60e 	bge	fp,r2,4b1cc <__alt_mem_epcs_flash_controller+0xfe03a1cc>
   4b1f4:	d9801e04 	addi	r6,sp,120
   4b1f8:	b80b883a 	mov	r5,r23
   4b1fc:	9809883a 	mov	r4,r19
   4b200:	00512a40 	call	512a4 <__sprint_r>
   4b204:	103a711e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4b208:	d8c02017 	ldw	r3,128(sp)
   4b20c:	d8801f17 	ldw	r2,124(sp)
   4b210:	da000404 	addi	r8,sp,16
   4b214:	003fee06 	br	4b1d0 <__alt_mem_epcs_flash_controller+0xfe03a1d0>
   4b218:	00bfffc4 	movi	r2,-1
   4b21c:	003a6f06 	br	49bdc <__alt_mem_epcs_flash_controller+0xfe038bdc>
   4b220:	008011c4 	movi	r2,71
   4b224:	1440b816 	blt	r2,r17,4b508 <___vfprintf_internal_r+0x1d44>
   4b228:	040001b4 	movhi	r16,6
   4b22c:	84356b04 	addi	r16,r16,-10836
   4b230:	00c000c4 	movi	r3,3
   4b234:	00bfdfc4 	movi	r2,-129
   4b238:	d8c02a15 	stw	r3,168(sp)
   4b23c:	90a4703a 	and	r18,r18,r2
   4b240:	df002783 	ldbu	fp,158(sp)
   4b244:	d8c02e15 	stw	r3,184(sp)
   4b248:	d8002915 	stw	zero,164(sp)
   4b24c:	d8003215 	stw	zero,200(sp)
   4b250:	003b2906 	br	49ef8 <__alt_mem_epcs_flash_controller+0xfe038ef8>
   4b254:	d9002d17 	ldw	r4,180(sp)
   4b258:	24c00017 	ldw	r19,0(r4)
   4b25c:	21000104 	addi	r4,r4,4
   4b260:	d9002d15 	stw	r4,180(sp)
   4b264:	982dd7fa 	srai	r22,r19,31
   4b268:	b005883a 	mov	r2,r22
   4b26c:	003a9f06 	br	49cec <__alt_mem_epcs_flash_controller+0xfe038cec>
   4b270:	d9402d17 	ldw	r5,180(sp)
   4b274:	d8c02f17 	ldw	r3,188(sp)
   4b278:	28800017 	ldw	r2,0(r5)
   4b27c:	29400104 	addi	r5,r5,4
   4b280:	d9402d15 	stw	r5,180(sp)
   4b284:	10c00015 	stw	r3,0(r2)
   4b288:	00398606 	br	498a4 <__alt_mem_epcs_flash_controller+0xfe0388a4>
   4b28c:	d9402d17 	ldw	r5,180(sp)
   4b290:	002d883a 	mov	r22,zero
   4b294:	2cc00017 	ldw	r19,0(r5)
   4b298:	29400104 	addi	r5,r5,4
   4b29c:	d9402d15 	stw	r5,180(sp)
   4b2a0:	003c2306 	br	4a330 <__alt_mem_epcs_flash_controller+0xfe039330>
   4b2a4:	d8c02d17 	ldw	r3,180(sp)
   4b2a8:	d9002917 	ldw	r4,164(sp)
   4b2ac:	002d883a 	mov	r22,zero
   4b2b0:	18800104 	addi	r2,r3,4
   4b2b4:	1cc0000b 	ldhu	r19,0(r3)
   4b2b8:	203dc10e 	bge	r4,zero,4a9c0 <__alt_mem_epcs_flash_controller+0xfe0399c0>
   4b2bc:	003f7506 	br	4b094 <__alt_mem_epcs_flash_controller+0xfe03a094>
   4b2c0:	040001b4 	movhi	r16,6
   4b2c4:	84356904 	addi	r16,r16,-10844
   4b2c8:	003acc06 	br	49dfc <__alt_mem_epcs_flash_controller+0xfe038dfc>
   4b2cc:	d9002c17 	ldw	r4,176(sp)
   4b2d0:	d9801e04 	addi	r6,sp,120
   4b2d4:	b80b883a 	mov	r5,r23
   4b2d8:	00512a40 	call	512a4 <__sprint_r>
   4b2dc:	103a3b1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4b2e0:	dc402617 	ldw	r17,152(sp)
   4b2e4:	d8c02017 	ldw	r3,128(sp)
   4b2e8:	da000404 	addi	r8,sp,16
   4b2ec:	003f9c06 	br	4b160 <__alt_mem_epcs_flash_controller+0xfe03a160>
   4b2f0:	ac400043 	ldbu	r17,1(r21)
   4b2f4:	94800814 	ori	r18,r18,32
   4b2f8:	ad400044 	addi	r21,r21,1
   4b2fc:	8c403fcc 	andi	r17,r17,255
   4b300:	8c40201c 	xori	r17,r17,128
   4b304:	8c7fe004 	addi	r17,r17,-128
   4b308:	00398f06 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   4b30c:	d8c02d15 	stw	r3,180(sp)
   4b310:	0039883a 	mov	fp,zero
   4b314:	003e3506 	br	4abec <__alt_mem_epcs_flash_controller+0xfe039bec>
   4b318:	d9002c17 	ldw	r4,176(sp)
   4b31c:	d9801e04 	addi	r6,sp,120
   4b320:	b80b883a 	mov	r5,r23
   4b324:	00512a40 	call	512a4 <__sprint_r>
   4b328:	103a281e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4b32c:	d8c02017 	ldw	r3,128(sp)
   4b330:	da000404 	addi	r8,sp,16
   4b334:	003cd006 	br	4a678 <__alt_mem_epcs_flash_controller+0xfe039678>
   4b338:	8009883a 	mov	r4,r16
   4b33c:	da003d15 	stw	r8,244(sp)
   4b340:	0046ef40 	call	46ef4 <strlen>
   4b344:	d8802e15 	stw	r2,184(sp)
   4b348:	da003d17 	ldw	r8,244(sp)
   4b34c:	103c340e 	bge	r2,zero,4a420 <__alt_mem_epcs_flash_controller+0xfe039420>
   4b350:	0005883a 	mov	r2,zero
   4b354:	003c3206 	br	4a420 <__alt_mem_epcs_flash_controller+0xfe039420>
   4b358:	d9002c17 	ldw	r4,176(sp)
   4b35c:	d9801e04 	addi	r6,sp,120
   4b360:	b80b883a 	mov	r5,r23
   4b364:	00512a40 	call	512a4 <__sprint_r>
   4b368:	103a181e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4b36c:	d8c02017 	ldw	r3,128(sp)
   4b370:	d8801f17 	ldw	r2,124(sp)
   4b374:	da000404 	addi	r8,sp,16
   4b378:	d9403317 	ldw	r5,204(sp)
   4b37c:	10800044 	addi	r2,r2,1
   4b380:	44000015 	stw	r16,0(r8)
   4b384:	28c7883a 	add	r3,r5,r3
   4b388:	003b7d06 	br	4a180 <__alt_mem_epcs_flash_controller+0xfe039180>
   4b38c:	010001b4 	movhi	r4,6
   4b390:	21358584 	addi	r4,r4,-10730
   4b394:	d9003515 	stw	r4,212(sp)
   4b398:	003b1406 	br	49fec <__alt_mem_epcs_flash_controller+0xfe038fec>
   4b39c:	013fffc4 	movi	r4,-1
   4b3a0:	003a3506 	br	49c78 <__alt_mem_epcs_flash_controller+0xfe038c78>
   4b3a4:	0023883a 	mov	r17,zero
   4b3a8:	003d9d06 	br	4aa20 <__alt_mem_epcs_flash_controller+0xfe039a20>
   4b3ac:	d9002c17 	ldw	r4,176(sp)
   4b3b0:	d9801e04 	addi	r6,sp,120
   4b3b4:	b80b883a 	mov	r5,r23
   4b3b8:	00512a40 	call	512a4 <__sprint_r>
   4b3bc:	103a031e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4b3c0:	d8c02017 	ldw	r3,128(sp)
   4b3c4:	da000404 	addi	r8,sp,16
   4b3c8:	003d9406 	br	4aa1c <__alt_mem_epcs_flash_controller+0xfe039a1c>
   4b3cc:	010001b4 	movhi	r4,6
   4b3d0:	21358184 	addi	r4,r4,-10746
   4b3d4:	d9002b15 	stw	r4,172(sp)
   4b3d8:	d9002b17 	ldw	r4,172(sp)
   4b3dc:	1c47883a 	add	r3,r3,r17
   4b3e0:	10800044 	addi	r2,r2,1
   4b3e4:	41000015 	stw	r4,0(r8)
   4b3e8:	44400115 	stw	r17,4(r8)
   4b3ec:	d8c02015 	stw	r3,128(sp)
   4b3f0:	d8801f15 	stw	r2,124(sp)
   4b3f4:	010001c4 	movi	r4,7
   4b3f8:	20bfd716 	blt	r4,r2,4b358 <__alt_mem_epcs_flash_controller+0xfe03a358>
   4b3fc:	42000204 	addi	r8,r8,8
   4b400:	003fdd06 	br	4b378 <__alt_mem_epcs_flash_controller+0xfe03a378>
   4b404:	d9002c17 	ldw	r4,176(sp)
   4b408:	d9801e04 	addi	r6,sp,120
   4b40c:	b80b883a 	mov	r5,r23
   4b410:	00512a40 	call	512a4 <__sprint_r>
   4b414:	1039ed1e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4b418:	d8802617 	ldw	r2,152(sp)
   4b41c:	d8c02017 	ldw	r3,128(sp)
   4b420:	da000404 	addi	r8,sp,16
   4b424:	003e1006 	br	4ac68 <__alt_mem_epcs_flash_controller+0xfe039c68>
   4b428:	00800044 	movi	r2,1
   4b42c:	10803fcc 	andi	r2,r2,255
   4b430:	00c00044 	movi	r3,1
   4b434:	10fa3526 	beq	r2,r3,49d0c <__alt_mem_epcs_flash_controller+0xfe038d0c>
   4b438:	00c00084 	movi	r3,2
   4b43c:	10fbcb26 	beq	r2,r3,4a36c <__alt_mem_epcs_flash_controller+0xfe03936c>
   4b440:	003a8f06 	br	49e80 <__alt_mem_epcs_flash_controller+0xfe038e80>
   4b444:	010001b4 	movhi	r4,6
   4b448:	21358584 	addi	r4,r4,-10730
   4b44c:	d9003515 	stw	r4,212(sp)
   4b450:	003b7606 	br	4a22c <__alt_mem_epcs_flash_controller+0xfe03922c>
   4b454:	d8802917 	ldw	r2,164(sp)
   4b458:	00c00184 	movi	r3,6
   4b45c:	1880012e 	bgeu	r3,r2,4b464 <___vfprintf_internal_r+0x1ca0>
   4b460:	1805883a 	mov	r2,r3
   4b464:	d8802e15 	stw	r2,184(sp)
   4b468:	1000ef16 	blt	r2,zero,4b828 <___vfprintf_internal_r+0x2064>
   4b46c:	040001b4 	movhi	r16,6
   4b470:	d8802a15 	stw	r2,168(sp)
   4b474:	dcc02d15 	stw	r19,180(sp)
   4b478:	d8002915 	stw	zero,164(sp)
   4b47c:	d8003215 	stw	zero,200(sp)
   4b480:	84357704 	addi	r16,r16,-10788
   4b484:	0039883a 	mov	fp,zero
   4b488:	003aa206 	br	49f14 <__alt_mem_epcs_flash_controller+0xfe038f14>
   4b48c:	0021883a 	mov	r16,zero
   4b490:	003e0706 	br	4acb0 <__alt_mem_epcs_flash_controller+0xfe039cb0>
   4b494:	d9002c17 	ldw	r4,176(sp)
   4b498:	d9801e04 	addi	r6,sp,120
   4b49c:	b80b883a 	mov	r5,r23
   4b4a0:	00512a40 	call	512a4 <__sprint_r>
   4b4a4:	1039c91e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4b4a8:	d8802617 	ldw	r2,152(sp)
   4b4ac:	d9403317 	ldw	r5,204(sp)
   4b4b0:	d8c02017 	ldw	r3,128(sp)
   4b4b4:	da000404 	addi	r8,sp,16
   4b4b8:	2885c83a 	sub	r2,r5,r2
   4b4bc:	003dfb06 	br	4acac <__alt_mem_epcs_flash_controller+0xfe039cac>
   4b4c0:	9080004c 	andi	r2,r18,1
   4b4c4:	103e8f1e 	bne	r2,zero,4af04 <__alt_mem_epcs_flash_controller+0xfe039f04>
   4b4c8:	d8802117 	ldw	r2,132(sp)
   4b4cc:	003e9e06 	br	4af48 <__alt_mem_epcs_flash_controller+0xfe039f48>
   4b4d0:	1025883a 	mov	r18,r2
   4b4d4:	0039883a 	mov	fp,zero
   4b4d8:	00800084 	movi	r2,2
   4b4dc:	003fd306 	br	4b42c <__alt_mem_epcs_flash_controller+0xfe03a42c>
   4b4e0:	07000b44 	movi	fp,45
   4b4e4:	df002785 	stb	fp,158(sp)
   4b4e8:	003a4006 	br	49dec <__alt_mem_epcs_flash_controller+0xfe038dec>
   4b4ec:	00c00b44 	movi	r3,45
   4b4f0:	d8c02785 	stb	r3,158(sp)
   4b4f4:	d8802a15 	stw	r2,168(sp)
   4b4f8:	dc802b17 	ldw	r18,172(sp)
   4b4fc:	d8002915 	stw	zero,164(sp)
   4b500:	07000b44 	movi	fp,45
   4b504:	003a8006 	br	49f08 <__alt_mem_epcs_flash_controller+0xfe038f08>
   4b508:	040001b4 	movhi	r16,6
   4b50c:	84356c04 	addi	r16,r16,-10832
   4b510:	003f4706 	br	4b230 <__alt_mem_epcs_flash_controller+0xfe03a230>
   4b514:	d8c02d17 	ldw	r3,180(sp)
   4b518:	d9002f17 	ldw	r4,188(sp)
   4b51c:	18800017 	ldw	r2,0(r3)
   4b520:	18c00104 	addi	r3,r3,4
   4b524:	d8c02d15 	stw	r3,180(sp)
   4b528:	11000015 	stw	r4,0(r2)
   4b52c:	0038dd06 	br	498a4 <__alt_mem_epcs_flash_controller+0xfe0388a4>
   4b530:	dd802617 	ldw	r22,152(sp)
   4b534:	00bfff44 	movi	r2,-3
   4b538:	b0801c16 	blt	r22,r2,4b5ac <___vfprintf_internal_r+0x1de8>
   4b53c:	d9402917 	ldw	r5,164(sp)
   4b540:	2d801a16 	blt	r5,r22,4b5ac <___vfprintf_internal_r+0x1de8>
   4b544:	dd803215 	stw	r22,200(sp)
   4b548:	003e8906 	br	4af70 <__alt_mem_epcs_flash_controller+0xfe039f70>
   4b54c:	010001b4 	movhi	r4,6
   4b550:	21358184 	addi	r4,r4,-10746
   4b554:	d9002b15 	stw	r4,172(sp)
   4b558:	003c9106 	br	4a7a0 <__alt_mem_epcs_flash_controller+0xfe0397a0>
   4b55c:	e005883a 	mov	r2,fp
   4b560:	003e7906 	br	4af48 <__alt_mem_epcs_flash_controller+0xfe039f48>
   4b564:	d9402917 	ldw	r5,164(sp)
   4b568:	df002783 	ldbu	fp,158(sp)
   4b56c:	dcc02d15 	stw	r19,180(sp)
   4b570:	d9402a15 	stw	r5,168(sp)
   4b574:	d9402e15 	stw	r5,184(sp)
   4b578:	d8002915 	stw	zero,164(sp)
   4b57c:	d8003215 	stw	zero,200(sp)
   4b580:	003a5d06 	br	49ef8 <__alt_mem_epcs_flash_controller+0xfe038ef8>
   4b584:	9080004c 	andi	r2,r18,1
   4b588:	0039883a 	mov	fp,zero
   4b58c:	10000426 	beq	r2,zero,4b5a0 <___vfprintf_internal_r+0x1ddc>
   4b590:	00800c04 	movi	r2,48
   4b594:	dc001dc4 	addi	r16,sp,119
   4b598:	d8801dc5 	stb	r2,119(sp)
   4b59c:	003b8006 	br	4a3a0 <__alt_mem_epcs_flash_controller+0xfe0393a0>
   4b5a0:	d8002e15 	stw	zero,184(sp)
   4b5a4:	dc001e04 	addi	r16,sp,120
   4b5a8:	003a4d06 	br	49ee0 <__alt_mem_epcs_flash_controller+0xfe038ee0>
   4b5ac:	8c7fff84 	addi	r17,r17,-2
   4b5b0:	b5bfffc4 	addi	r22,r22,-1
   4b5b4:	dd802615 	stw	r22,152(sp)
   4b5b8:	dc4022c5 	stb	r17,139(sp)
   4b5bc:	b000bf16 	blt	r22,zero,4b8bc <___vfprintf_internal_r+0x20f8>
   4b5c0:	00800ac4 	movi	r2,43
   4b5c4:	d8802305 	stb	r2,140(sp)
   4b5c8:	00800244 	movi	r2,9
   4b5cc:	15807016 	blt	r2,r22,4b790 <___vfprintf_internal_r+0x1fcc>
   4b5d0:	00800c04 	movi	r2,48
   4b5d4:	b5800c04 	addi	r22,r22,48
   4b5d8:	d8802345 	stb	r2,141(sp)
   4b5dc:	dd802385 	stb	r22,142(sp)
   4b5e0:	d88023c4 	addi	r2,sp,143
   4b5e4:	df0022c4 	addi	fp,sp,139
   4b5e8:	d8c03317 	ldw	r3,204(sp)
   4b5ec:	1739c83a 	sub	fp,r2,fp
   4b5f0:	d9003317 	ldw	r4,204(sp)
   4b5f4:	e0c7883a 	add	r3,fp,r3
   4b5f8:	df003a15 	stw	fp,232(sp)
   4b5fc:	d8c02e15 	stw	r3,184(sp)
   4b600:	00800044 	movi	r2,1
   4b604:	1100b30e 	bge	r2,r4,4b8d4 <___vfprintf_internal_r+0x2110>
   4b608:	d8c02e17 	ldw	r3,184(sp)
   4b60c:	18c00044 	addi	r3,r3,1
   4b610:	d8c02e15 	stw	r3,184(sp)
   4b614:	1805883a 	mov	r2,r3
   4b618:	1800ac16 	blt	r3,zero,4b8cc <___vfprintf_internal_r+0x2108>
   4b61c:	d8003215 	stw	zero,200(sp)
   4b620:	003e5d06 	br	4af98 <__alt_mem_epcs_flash_controller+0xfe039f98>
   4b624:	d9002c17 	ldw	r4,176(sp)
   4b628:	d9801e04 	addi	r6,sp,120
   4b62c:	b80b883a 	mov	r5,r23
   4b630:	00512a40 	call	512a4 <__sprint_r>
   4b634:	1039651e 	bne	r2,zero,49bcc <__alt_mem_epcs_flash_controller+0xfe038bcc>
   4b638:	dc402617 	ldw	r17,152(sp)
   4b63c:	d8c02017 	ldw	r3,128(sp)
   4b640:	d8801f17 	ldw	r2,124(sp)
   4b644:	da000404 	addi	r8,sp,16
   4b648:	003ed606 	br	4b1a4 <__alt_mem_epcs_flash_controller+0xfe03a1a4>
   4b64c:	582b883a 	mov	r21,r11
   4b650:	d8002915 	stw	zero,164(sp)
   4b654:	0038bd06 	br	4994c <__alt_mem_epcs_flash_controller+0xfe03894c>
   4b658:	d8802917 	ldw	r2,164(sp)
   4b65c:	103e071e 	bne	r2,zero,4ae7c <__alt_mem_epcs_flash_controller+0xfe039e7c>
   4b660:	dc002915 	stw	r16,164(sp)
   4b664:	003e0506 	br	4ae7c <__alt_mem_epcs_flash_controller+0xfe039e7c>
   4b668:	d9002917 	ldw	r4,164(sp)
   4b66c:	20c00044 	addi	r3,r4,1
   4b670:	003e0f06 	br	4aeb0 <__alt_mem_epcs_flash_controller+0xfe039eb0>
   4b674:	01400184 	movi	r5,6
   4b678:	d9402915 	stw	r5,164(sp)
   4b67c:	003dff06 	br	4ae7c <__alt_mem_epcs_flash_controller+0xfe039e7c>
   4b680:	d8802104 	addi	r2,sp,132
   4b684:	d8800315 	stw	r2,12(sp)
   4b688:	d8802504 	addi	r2,sp,148
   4b68c:	d8800215 	stw	r2,8(sp)
   4b690:	d8802604 	addi	r2,sp,152
   4b694:	d8800115 	stw	r2,4(sp)
   4b698:	d8802917 	ldw	r2,164(sp)
   4b69c:	d9403617 	ldw	r5,216(sp)
   4b6a0:	d9002c17 	ldw	r4,176(sp)
   4b6a4:	d8800015 	stw	r2,0(sp)
   4b6a8:	01c000c4 	movi	r7,3
   4b6ac:	980d883a 	mov	r6,r19
   4b6b0:	da003d15 	stw	r8,244(sp)
   4b6b4:	004bf680 	call	4bf68 <_dtoa_r>
   4b6b8:	d8c02917 	ldw	r3,164(sp)
   4b6bc:	da003d17 	ldw	r8,244(sp)
   4b6c0:	1021883a 	mov	r16,r2
   4b6c4:	10f9883a 	add	fp,r2,r3
   4b6c8:	81000007 	ldb	r4,0(r16)
   4b6cc:	00800c04 	movi	r2,48
   4b6d0:	20805e26 	beq	r4,r2,4b84c <___vfprintf_internal_r+0x2088>
   4b6d4:	d8c02617 	ldw	r3,152(sp)
   4b6d8:	e0f9883a 	add	fp,fp,r3
   4b6dc:	003e0a06 	br	4af08 <__alt_mem_epcs_flash_controller+0xfe039f08>
   4b6e0:	00c00b44 	movi	r3,45
   4b6e4:	24e0003c 	xorhi	r19,r4,32768
   4b6e8:	d8c02a05 	stb	r3,168(sp)
   4b6ec:	003de906 	br	4ae94 <__alt_mem_epcs_flash_controller+0xfe039e94>
   4b6f0:	d8c03217 	ldw	r3,200(sp)
   4b6f4:	00c07a0e 	bge	zero,r3,4b8e0 <___vfprintf_internal_r+0x211c>
   4b6f8:	00800044 	movi	r2,1
   4b6fc:	d9003317 	ldw	r4,204(sp)
   4b700:	1105883a 	add	r2,r2,r4
   4b704:	d8802e15 	stw	r2,184(sp)
   4b708:	10004e16 	blt	r2,zero,4b844 <___vfprintf_internal_r+0x2080>
   4b70c:	044019c4 	movi	r17,103
   4b710:	003e2106 	br	4af98 <__alt_mem_epcs_flash_controller+0xfe039f98>
   4b714:	d9002917 	ldw	r4,164(sp)
   4b718:	d8802104 	addi	r2,sp,132
   4b71c:	d8800315 	stw	r2,12(sp)
   4b720:	d9000015 	stw	r4,0(sp)
   4b724:	d8802504 	addi	r2,sp,148
   4b728:	d9403617 	ldw	r5,216(sp)
   4b72c:	d9002c17 	ldw	r4,176(sp)
   4b730:	d8800215 	stw	r2,8(sp)
   4b734:	d8802604 	addi	r2,sp,152
   4b738:	d8800115 	stw	r2,4(sp)
   4b73c:	01c000c4 	movi	r7,3
   4b740:	980d883a 	mov	r6,r19
   4b744:	da003d15 	stw	r8,244(sp)
   4b748:	004bf680 	call	4bf68 <_dtoa_r>
   4b74c:	d8c02917 	ldw	r3,164(sp)
   4b750:	da003d17 	ldw	r8,244(sp)
   4b754:	1021883a 	mov	r16,r2
   4b758:	00801184 	movi	r2,70
   4b75c:	80f9883a 	add	fp,r16,r3
   4b760:	88bfd926 	beq	r17,r2,4b6c8 <__alt_mem_epcs_flash_controller+0xfe03a6c8>
   4b764:	003de806 	br	4af08 <__alt_mem_epcs_flash_controller+0xfe039f08>
   4b768:	d9002917 	ldw	r4,164(sp)
   4b76c:	00c04d0e 	bge	zero,r3,4b8a4 <___vfprintf_internal_r+0x20e0>
   4b770:	2000441e 	bne	r4,zero,4b884 <___vfprintf_internal_r+0x20c0>
   4b774:	9480004c 	andi	r18,r18,1
   4b778:	9000421e 	bne	r18,zero,4b884 <___vfprintf_internal_r+0x20c0>
   4b77c:	1805883a 	mov	r2,r3
   4b780:	18007016 	blt	r3,zero,4b944 <___vfprintf_internal_r+0x2180>
   4b784:	d8c03217 	ldw	r3,200(sp)
   4b788:	d8c02e15 	stw	r3,184(sp)
   4b78c:	003e0206 	br	4af98 <__alt_mem_epcs_flash_controller+0xfe039f98>
   4b790:	df0022c4 	addi	fp,sp,139
   4b794:	dc002915 	stw	r16,164(sp)
   4b798:	4027883a 	mov	r19,r8
   4b79c:	e021883a 	mov	r16,fp
   4b7a0:	b009883a 	mov	r4,r22
   4b7a4:	01400284 	movi	r5,10
   4b7a8:	0042a240 	call	42a24 <__modsi3>
   4b7ac:	10800c04 	addi	r2,r2,48
   4b7b0:	843fffc4 	addi	r16,r16,-1
   4b7b4:	b009883a 	mov	r4,r22
   4b7b8:	01400284 	movi	r5,10
   4b7bc:	80800005 	stb	r2,0(r16)
   4b7c0:	00429a00 	call	429a0 <__divsi3>
   4b7c4:	102d883a 	mov	r22,r2
   4b7c8:	00800244 	movi	r2,9
   4b7cc:	15bff416 	blt	r2,r22,4b7a0 <__alt_mem_epcs_flash_controller+0xfe03a7a0>
   4b7d0:	9811883a 	mov	r8,r19
   4b7d4:	b0800c04 	addi	r2,r22,48
   4b7d8:	8027883a 	mov	r19,r16
   4b7dc:	997fffc4 	addi	r5,r19,-1
   4b7e0:	98bfffc5 	stb	r2,-1(r19)
   4b7e4:	dc002917 	ldw	r16,164(sp)
   4b7e8:	2f006a2e 	bgeu	r5,fp,4b994 <___vfprintf_internal_r+0x21d0>
   4b7ec:	d9c02384 	addi	r7,sp,142
   4b7f0:	3ccfc83a 	sub	r7,r7,r19
   4b7f4:	d9002344 	addi	r4,sp,141
   4b7f8:	e1cf883a 	add	r7,fp,r7
   4b7fc:	00000106 	br	4b804 <___vfprintf_internal_r+0x2040>
   4b800:	28800003 	ldbu	r2,0(r5)
   4b804:	20800005 	stb	r2,0(r4)
   4b808:	21000044 	addi	r4,r4,1
   4b80c:	29400044 	addi	r5,r5,1
   4b810:	393ffb1e 	bne	r7,r4,4b800 <__alt_mem_epcs_flash_controller+0xfe03a800>
   4b814:	d8802304 	addi	r2,sp,140
   4b818:	14c5c83a 	sub	r2,r2,r19
   4b81c:	d8c02344 	addi	r3,sp,141
   4b820:	1885883a 	add	r2,r3,r2
   4b824:	003f7006 	br	4b5e8 <__alt_mem_epcs_flash_controller+0xfe03a5e8>
   4b828:	0005883a 	mov	r2,zero
   4b82c:	003f0f06 	br	4b46c <__alt_mem_epcs_flash_controller+0xfe03a46c>
   4b830:	d8c03217 	ldw	r3,200(sp)
   4b834:	18c00044 	addi	r3,r3,1
   4b838:	d8c02e15 	stw	r3,184(sp)
   4b83c:	1805883a 	mov	r2,r3
   4b840:	183fb20e 	bge	r3,zero,4b70c <__alt_mem_epcs_flash_controller+0xfe03a70c>
   4b844:	0005883a 	mov	r2,zero
   4b848:	003fb006 	br	4b70c <__alt_mem_epcs_flash_controller+0xfe03a70c>
   4b84c:	d9003617 	ldw	r4,216(sp)
   4b850:	000d883a 	mov	r6,zero
   4b854:	000f883a 	mov	r7,zero
   4b858:	980b883a 	mov	r5,r19
   4b85c:	d8c03c15 	stw	r3,240(sp)
   4b860:	da003d15 	stw	r8,244(sp)
   4b864:	0053b100 	call	53b10 <__eqdf2>
   4b868:	d8c03c17 	ldw	r3,240(sp)
   4b86c:	da003d17 	ldw	r8,244(sp)
   4b870:	103f9826 	beq	r2,zero,4b6d4 <__alt_mem_epcs_flash_controller+0xfe03a6d4>
   4b874:	00800044 	movi	r2,1
   4b878:	10c7c83a 	sub	r3,r2,r3
   4b87c:	d8c02615 	stw	r3,152(sp)
   4b880:	003f9506 	br	4b6d8 <__alt_mem_epcs_flash_controller+0xfe03a6d8>
   4b884:	d9002917 	ldw	r4,164(sp)
   4b888:	d8c03217 	ldw	r3,200(sp)
   4b88c:	20800044 	addi	r2,r4,1
   4b890:	1885883a 	add	r2,r3,r2
   4b894:	d8802e15 	stw	r2,184(sp)
   4b898:	103dbf0e 	bge	r2,zero,4af98 <__alt_mem_epcs_flash_controller+0xfe039f98>
   4b89c:	0005883a 	mov	r2,zero
   4b8a0:	003dbd06 	br	4af98 <__alt_mem_epcs_flash_controller+0xfe039f98>
   4b8a4:	2000211e 	bne	r4,zero,4b92c <___vfprintf_internal_r+0x2168>
   4b8a8:	9480004c 	andi	r18,r18,1
   4b8ac:	90001f1e 	bne	r18,zero,4b92c <___vfprintf_internal_r+0x2168>
   4b8b0:	00800044 	movi	r2,1
   4b8b4:	d8802e15 	stw	r2,184(sp)
   4b8b8:	003db706 	br	4af98 <__alt_mem_epcs_flash_controller+0xfe039f98>
   4b8bc:	00800b44 	movi	r2,45
   4b8c0:	05adc83a 	sub	r22,zero,r22
   4b8c4:	d8802305 	stb	r2,140(sp)
   4b8c8:	003f3f06 	br	4b5c8 <__alt_mem_epcs_flash_controller+0xfe03a5c8>
   4b8cc:	0005883a 	mov	r2,zero
   4b8d0:	003f5206 	br	4b61c <__alt_mem_epcs_flash_controller+0xfe03a61c>
   4b8d4:	90a4703a 	and	r18,r18,r2
   4b8d8:	903f4e26 	beq	r18,zero,4b614 <__alt_mem_epcs_flash_controller+0xfe03a614>
   4b8dc:	003f4a06 	br	4b608 <__alt_mem_epcs_flash_controller+0xfe03a608>
   4b8e0:	00800084 	movi	r2,2
   4b8e4:	10c5c83a 	sub	r2,r2,r3
   4b8e8:	003f8406 	br	4b6fc <__alt_mem_epcs_flash_controller+0xfe03a6fc>
   4b8ec:	d8802d17 	ldw	r2,180(sp)
   4b8f0:	d9002d17 	ldw	r4,180(sp)
   4b8f4:	ac400043 	ldbu	r17,1(r21)
   4b8f8:	10800017 	ldw	r2,0(r2)
   4b8fc:	582b883a 	mov	r21,r11
   4b900:	d8802915 	stw	r2,164(sp)
   4b904:	20800104 	addi	r2,r4,4
   4b908:	d9002917 	ldw	r4,164(sp)
   4b90c:	d8802d15 	stw	r2,180(sp)
   4b910:	203e7a0e 	bge	r4,zero,4b2fc <__alt_mem_epcs_flash_controller+0xfe03a2fc>
   4b914:	8c403fcc 	andi	r17,r17,255
   4b918:	00bfffc4 	movi	r2,-1
   4b91c:	8c40201c 	xori	r17,r17,128
   4b920:	d8802915 	stw	r2,164(sp)
   4b924:	8c7fe004 	addi	r17,r17,-128
   4b928:	00380706 	br	49948 <__alt_mem_epcs_flash_controller+0xfe038948>
   4b92c:	d8c02917 	ldw	r3,164(sp)
   4b930:	18c00084 	addi	r3,r3,2
   4b934:	d8c02e15 	stw	r3,184(sp)
   4b938:	1805883a 	mov	r2,r3
   4b93c:	183d960e 	bge	r3,zero,4af98 <__alt_mem_epcs_flash_controller+0xfe039f98>
   4b940:	003fd606 	br	4b89c <__alt_mem_epcs_flash_controller+0xfe03a89c>
   4b944:	0005883a 	mov	r2,zero
   4b948:	003f8e06 	br	4b784 <__alt_mem_epcs_flash_controller+0xfe03a784>
   4b94c:	9080004c 	andi	r2,r18,1
   4b950:	103f811e 	bne	r2,zero,4b758 <__alt_mem_epcs_flash_controller+0xfe03a758>
   4b954:	d8802117 	ldw	r2,132(sp)
   4b958:	1405c83a 	sub	r2,r2,r16
   4b95c:	d8803315 	stw	r2,204(sp)
   4b960:	b47ef326 	beq	r22,r17,4b530 <__alt_mem_epcs_flash_controller+0xfe03a530>
   4b964:	dd802617 	ldw	r22,152(sp)
   4b968:	003f1106 	br	4b5b0 <__alt_mem_epcs_flash_controller+0xfe03a5b0>
   4b96c:	d9c02785 	stb	r7,158(sp)
   4b970:	00390406 	br	49d84 <__alt_mem_epcs_flash_controller+0xfe038d84>
   4b974:	d9c02785 	stb	r7,158(sp)
   4b978:	0038d306 	br	49cc8 <__alt_mem_epcs_flash_controller+0xfe038cc8>
   4b97c:	d9c02785 	stb	r7,158(sp)
   4b980:	003a6106 	br	4a308 <__alt_mem_epcs_flash_controller+0xfe039308>
   4b984:	d9c02785 	stb	r7,158(sp)
   4b988:	003af806 	br	4a56c <__alt_mem_epcs_flash_controller+0xfe03956c>
   4b98c:	0005883a 	mov	r2,zero
   4b990:	003d7e06 	br	4af8c <__alt_mem_epcs_flash_controller+0xfe039f8c>
   4b994:	d8802344 	addi	r2,sp,141
   4b998:	003f1306 	br	4b5e8 <__alt_mem_epcs_flash_controller+0xfe03a5e8>
   4b99c:	d9c02785 	stb	r7,158(sp)
   4b9a0:	00392306 	br	49e30 <__alt_mem_epcs_flash_controller+0xfe038e30>
   4b9a4:	d9c02785 	stb	r7,158(sp)
   4b9a8:	003aa906 	br	4a450 <__alt_mem_epcs_flash_controller+0xfe039450>
   4b9ac:	d9c02785 	stb	r7,158(sp)
   4b9b0:	003a3d06 	br	4a2a8 <__alt_mem_epcs_flash_controller+0xfe0392a8>
   4b9b4:	d9c02785 	stb	r7,158(sp)
   4b9b8:	003aca06 	br	4a4e4 <__alt_mem_epcs_flash_controller+0xfe0394e4>

0004b9bc <__vfprintf_internal>:
   4b9bc:	008001b4 	movhi	r2,6
   4b9c0:	10be3804 	addi	r2,r2,-1824
   4b9c4:	300f883a 	mov	r7,r6
   4b9c8:	280d883a 	mov	r6,r5
   4b9cc:	200b883a 	mov	r5,r4
   4b9d0:	11000017 	ldw	r4,0(r2)
   4b9d4:	00497c41 	jmpi	497c4 <___vfprintf_internal_r>

0004b9d8 <__sbprintf>:
   4b9d8:	2880030b 	ldhu	r2,12(r5)
   4b9dc:	2ac01917 	ldw	r11,100(r5)
   4b9e0:	2a80038b 	ldhu	r10,14(r5)
   4b9e4:	2a400717 	ldw	r9,28(r5)
   4b9e8:	2a000917 	ldw	r8,36(r5)
   4b9ec:	defee204 	addi	sp,sp,-1144
   4b9f0:	00c10004 	movi	r3,1024
   4b9f4:	dc011a15 	stw	r16,1128(sp)
   4b9f8:	10bfff4c 	andi	r2,r2,65533
   4b9fc:	2821883a 	mov	r16,r5
   4ba00:	d8cb883a 	add	r5,sp,r3
   4ba04:	dc811c15 	stw	r18,1136(sp)
   4ba08:	dc411b15 	stw	r17,1132(sp)
   4ba0c:	dfc11d15 	stw	ra,1140(sp)
   4ba10:	2025883a 	mov	r18,r4
   4ba14:	d881030d 	sth	r2,1036(sp)
   4ba18:	dac11915 	stw	r11,1124(sp)
   4ba1c:	da81038d 	sth	r10,1038(sp)
   4ba20:	da410715 	stw	r9,1052(sp)
   4ba24:	da010915 	stw	r8,1060(sp)
   4ba28:	dec10015 	stw	sp,1024(sp)
   4ba2c:	dec10415 	stw	sp,1040(sp)
   4ba30:	d8c10215 	stw	r3,1032(sp)
   4ba34:	d8c10515 	stw	r3,1044(sp)
   4ba38:	d8010615 	stw	zero,1048(sp)
   4ba3c:	00497c40 	call	497c4 <___vfprintf_internal_r>
   4ba40:	1023883a 	mov	r17,r2
   4ba44:	10000416 	blt	r2,zero,4ba58 <__sbprintf+0x80>
   4ba48:	d9410004 	addi	r5,sp,1024
   4ba4c:	9009883a 	mov	r4,r18
   4ba50:	004d80c0 	call	4d80c <_fflush_r>
   4ba54:	10000d1e 	bne	r2,zero,4ba8c <__sbprintf+0xb4>
   4ba58:	d881030b 	ldhu	r2,1036(sp)
   4ba5c:	1080100c 	andi	r2,r2,64
   4ba60:	10000326 	beq	r2,zero,4ba70 <__sbprintf+0x98>
   4ba64:	8080030b 	ldhu	r2,12(r16)
   4ba68:	10801014 	ori	r2,r2,64
   4ba6c:	8080030d 	sth	r2,12(r16)
   4ba70:	8805883a 	mov	r2,r17
   4ba74:	dfc11d17 	ldw	ra,1140(sp)
   4ba78:	dc811c17 	ldw	r18,1136(sp)
   4ba7c:	dc411b17 	ldw	r17,1132(sp)
   4ba80:	dc011a17 	ldw	r16,1128(sp)
   4ba84:	dec11e04 	addi	sp,sp,1144
   4ba88:	f800283a 	ret
   4ba8c:	047fffc4 	movi	r17,-1
   4ba90:	003ff106 	br	4ba58 <__alt_mem_epcs_flash_controller+0xfe03aa58>

0004ba94 <__swsetup_r>:
   4ba94:	008001b4 	movhi	r2,6
   4ba98:	defffd04 	addi	sp,sp,-12
   4ba9c:	10be3804 	addi	r2,r2,-1824
   4baa0:	dc400115 	stw	r17,4(sp)
   4baa4:	2023883a 	mov	r17,r4
   4baa8:	11000017 	ldw	r4,0(r2)
   4baac:	dc000015 	stw	r16,0(sp)
   4bab0:	dfc00215 	stw	ra,8(sp)
   4bab4:	2821883a 	mov	r16,r5
   4bab8:	20000226 	beq	r4,zero,4bac4 <__swsetup_r+0x30>
   4babc:	20800e17 	ldw	r2,56(r4)
   4bac0:	10003126 	beq	r2,zero,4bb88 <__swsetup_r+0xf4>
   4bac4:	8080030b 	ldhu	r2,12(r16)
   4bac8:	10c0020c 	andi	r3,r2,8
   4bacc:	1009883a 	mov	r4,r2
   4bad0:	18000f26 	beq	r3,zero,4bb10 <__swsetup_r+0x7c>
   4bad4:	80c00417 	ldw	r3,16(r16)
   4bad8:	18001526 	beq	r3,zero,4bb30 <__swsetup_r+0x9c>
   4badc:	1100004c 	andi	r4,r2,1
   4bae0:	20001c1e 	bne	r4,zero,4bb54 <__swsetup_r+0xc0>
   4bae4:	1080008c 	andi	r2,r2,2
   4bae8:	1000291e 	bne	r2,zero,4bb90 <__swsetup_r+0xfc>
   4baec:	80800517 	ldw	r2,20(r16)
   4baf0:	80800215 	stw	r2,8(r16)
   4baf4:	18001c26 	beq	r3,zero,4bb68 <__swsetup_r+0xd4>
   4baf8:	0005883a 	mov	r2,zero
   4bafc:	dfc00217 	ldw	ra,8(sp)
   4bb00:	dc400117 	ldw	r17,4(sp)
   4bb04:	dc000017 	ldw	r16,0(sp)
   4bb08:	dec00304 	addi	sp,sp,12
   4bb0c:	f800283a 	ret
   4bb10:	2080040c 	andi	r2,r4,16
   4bb14:	10002e26 	beq	r2,zero,4bbd0 <__swsetup_r+0x13c>
   4bb18:	2080010c 	andi	r2,r4,4
   4bb1c:	10001e1e 	bne	r2,zero,4bb98 <__swsetup_r+0x104>
   4bb20:	80c00417 	ldw	r3,16(r16)
   4bb24:	20800214 	ori	r2,r4,8
   4bb28:	8080030d 	sth	r2,12(r16)
   4bb2c:	183feb1e 	bne	r3,zero,4badc <__alt_mem_epcs_flash_controller+0xfe03aadc>
   4bb30:	1100a00c 	andi	r4,r2,640
   4bb34:	01408004 	movi	r5,512
   4bb38:	217fe826 	beq	r4,r5,4badc <__alt_mem_epcs_flash_controller+0xfe03aadc>
   4bb3c:	800b883a 	mov	r5,r16
   4bb40:	8809883a 	mov	r4,r17
   4bb44:	004e7e80 	call	4e7e8 <__smakebuf_r>
   4bb48:	8080030b 	ldhu	r2,12(r16)
   4bb4c:	80c00417 	ldw	r3,16(r16)
   4bb50:	003fe206 	br	4badc <__alt_mem_epcs_flash_controller+0xfe03aadc>
   4bb54:	80800517 	ldw	r2,20(r16)
   4bb58:	80000215 	stw	zero,8(r16)
   4bb5c:	0085c83a 	sub	r2,zero,r2
   4bb60:	80800615 	stw	r2,24(r16)
   4bb64:	183fe41e 	bne	r3,zero,4baf8 <__alt_mem_epcs_flash_controller+0xfe03aaf8>
   4bb68:	80c0030b 	ldhu	r3,12(r16)
   4bb6c:	0005883a 	mov	r2,zero
   4bb70:	1900200c 	andi	r4,r3,128
   4bb74:	203fe126 	beq	r4,zero,4bafc <__alt_mem_epcs_flash_controller+0xfe03aafc>
   4bb78:	18c01014 	ori	r3,r3,64
   4bb7c:	80c0030d 	sth	r3,12(r16)
   4bb80:	00bfffc4 	movi	r2,-1
   4bb84:	003fdd06 	br	4bafc <__alt_mem_epcs_flash_controller+0xfe03aafc>
   4bb88:	004dbe80 	call	4dbe8 <__sinit>
   4bb8c:	003fcd06 	br	4bac4 <__alt_mem_epcs_flash_controller+0xfe03aac4>
   4bb90:	0005883a 	mov	r2,zero
   4bb94:	003fd606 	br	4baf0 <__alt_mem_epcs_flash_controller+0xfe03aaf0>
   4bb98:	81400c17 	ldw	r5,48(r16)
   4bb9c:	28000626 	beq	r5,zero,4bbb8 <__swsetup_r+0x124>
   4bba0:	80801004 	addi	r2,r16,64
   4bba4:	28800326 	beq	r5,r2,4bbb4 <__swsetup_r+0x120>
   4bba8:	8809883a 	mov	r4,r17
   4bbac:	004dd5c0 	call	4dd5c <_free_r>
   4bbb0:	8100030b 	ldhu	r4,12(r16)
   4bbb4:	80000c15 	stw	zero,48(r16)
   4bbb8:	80c00417 	ldw	r3,16(r16)
   4bbbc:	00bff6c4 	movi	r2,-37
   4bbc0:	1108703a 	and	r4,r2,r4
   4bbc4:	80000115 	stw	zero,4(r16)
   4bbc8:	80c00015 	stw	r3,0(r16)
   4bbcc:	003fd506 	br	4bb24 <__alt_mem_epcs_flash_controller+0xfe03ab24>
   4bbd0:	00800244 	movi	r2,9
   4bbd4:	88800015 	stw	r2,0(r17)
   4bbd8:	20801014 	ori	r2,r4,64
   4bbdc:	8080030d 	sth	r2,12(r16)
   4bbe0:	00bfffc4 	movi	r2,-1
   4bbe4:	003fc506 	br	4bafc <__alt_mem_epcs_flash_controller+0xfe03aafc>

0004bbe8 <__call_exitprocs>:
   4bbe8:	defff504 	addi	sp,sp,-44
   4bbec:	df000915 	stw	fp,36(sp)
   4bbf0:	dd400615 	stw	r21,24(sp)
   4bbf4:	dc800315 	stw	r18,12(sp)
   4bbf8:	dfc00a15 	stw	ra,40(sp)
   4bbfc:	ddc00815 	stw	r23,32(sp)
   4bc00:	dd800715 	stw	r22,28(sp)
   4bc04:	dd000515 	stw	r20,20(sp)
   4bc08:	dcc00415 	stw	r19,16(sp)
   4bc0c:	dc400215 	stw	r17,8(sp)
   4bc10:	dc000115 	stw	r16,4(sp)
   4bc14:	d9000015 	stw	r4,0(sp)
   4bc18:	2839883a 	mov	fp,r5
   4bc1c:	04800044 	movi	r18,1
   4bc20:	057fffc4 	movi	r21,-1
   4bc24:	008001b4 	movhi	r2,6
   4bc28:	10be3704 	addi	r2,r2,-1828
   4bc2c:	12000017 	ldw	r8,0(r2)
   4bc30:	45005217 	ldw	r20,328(r8)
   4bc34:	44c05204 	addi	r19,r8,328
   4bc38:	a0001c26 	beq	r20,zero,4bcac <__call_exitprocs+0xc4>
   4bc3c:	a0800117 	ldw	r2,4(r20)
   4bc40:	15ffffc4 	addi	r23,r2,-1
   4bc44:	b8000d16 	blt	r23,zero,4bc7c <__call_exitprocs+0x94>
   4bc48:	14000044 	addi	r16,r2,1
   4bc4c:	8421883a 	add	r16,r16,r16
   4bc50:	8421883a 	add	r16,r16,r16
   4bc54:	84402004 	addi	r17,r16,128
   4bc58:	a463883a 	add	r17,r20,r17
   4bc5c:	a421883a 	add	r16,r20,r16
   4bc60:	e0001e26 	beq	fp,zero,4bcdc <__call_exitprocs+0xf4>
   4bc64:	80804017 	ldw	r2,256(r16)
   4bc68:	e0801c26 	beq	fp,r2,4bcdc <__call_exitprocs+0xf4>
   4bc6c:	bdffffc4 	addi	r23,r23,-1
   4bc70:	843fff04 	addi	r16,r16,-4
   4bc74:	8c7fff04 	addi	r17,r17,-4
   4bc78:	bd7ff91e 	bne	r23,r21,4bc60 <__alt_mem_epcs_flash_controller+0xfe03ac60>
   4bc7c:	00800134 	movhi	r2,4
   4bc80:	1094ff04 	addi	r2,r2,21500
   4bc84:	10000926 	beq	r2,zero,4bcac <__call_exitprocs+0xc4>
   4bc88:	a0800117 	ldw	r2,4(r20)
   4bc8c:	1000301e 	bne	r2,zero,4bd50 <__call_exitprocs+0x168>
   4bc90:	a0800017 	ldw	r2,0(r20)
   4bc94:	10003226 	beq	r2,zero,4bd60 <__call_exitprocs+0x178>
   4bc98:	a009883a 	mov	r4,r20
   4bc9c:	98800015 	stw	r2,0(r19)
   4bca0:	00453fc0 	call	453fc <free>
   4bca4:	9d000017 	ldw	r20,0(r19)
   4bca8:	a03fe41e 	bne	r20,zero,4bc3c <__alt_mem_epcs_flash_controller+0xfe03ac3c>
   4bcac:	dfc00a17 	ldw	ra,40(sp)
   4bcb0:	df000917 	ldw	fp,36(sp)
   4bcb4:	ddc00817 	ldw	r23,32(sp)
   4bcb8:	dd800717 	ldw	r22,28(sp)
   4bcbc:	dd400617 	ldw	r21,24(sp)
   4bcc0:	dd000517 	ldw	r20,20(sp)
   4bcc4:	dcc00417 	ldw	r19,16(sp)
   4bcc8:	dc800317 	ldw	r18,12(sp)
   4bccc:	dc400217 	ldw	r17,8(sp)
   4bcd0:	dc000117 	ldw	r16,4(sp)
   4bcd4:	dec00b04 	addi	sp,sp,44
   4bcd8:	f800283a 	ret
   4bcdc:	a0800117 	ldw	r2,4(r20)
   4bce0:	80c00017 	ldw	r3,0(r16)
   4bce4:	10bfffc4 	addi	r2,r2,-1
   4bce8:	15c01426 	beq	r2,r23,4bd3c <__call_exitprocs+0x154>
   4bcec:	80000015 	stw	zero,0(r16)
   4bcf0:	183fde26 	beq	r3,zero,4bc6c <__alt_mem_epcs_flash_controller+0xfe03ac6c>
   4bcf4:	95c8983a 	sll	r4,r18,r23
   4bcf8:	a0806217 	ldw	r2,392(r20)
   4bcfc:	a5800117 	ldw	r22,4(r20)
   4bd00:	2084703a 	and	r2,r4,r2
   4bd04:	10000b26 	beq	r2,zero,4bd34 <__call_exitprocs+0x14c>
   4bd08:	a0806317 	ldw	r2,396(r20)
   4bd0c:	2088703a 	and	r4,r4,r2
   4bd10:	20000c1e 	bne	r4,zero,4bd44 <__call_exitprocs+0x15c>
   4bd14:	89400017 	ldw	r5,0(r17)
   4bd18:	d9000017 	ldw	r4,0(sp)
   4bd1c:	183ee83a 	callr	r3
   4bd20:	a0800117 	ldw	r2,4(r20)
   4bd24:	15bfbf1e 	bne	r2,r22,4bc24 <__alt_mem_epcs_flash_controller+0xfe03ac24>
   4bd28:	98800017 	ldw	r2,0(r19)
   4bd2c:	153fcf26 	beq	r2,r20,4bc6c <__alt_mem_epcs_flash_controller+0xfe03ac6c>
   4bd30:	003fbc06 	br	4bc24 <__alt_mem_epcs_flash_controller+0xfe03ac24>
   4bd34:	183ee83a 	callr	r3
   4bd38:	003ff906 	br	4bd20 <__alt_mem_epcs_flash_controller+0xfe03ad20>
   4bd3c:	a5c00115 	stw	r23,4(r20)
   4bd40:	003feb06 	br	4bcf0 <__alt_mem_epcs_flash_controller+0xfe03acf0>
   4bd44:	89000017 	ldw	r4,0(r17)
   4bd48:	183ee83a 	callr	r3
   4bd4c:	003ff406 	br	4bd20 <__alt_mem_epcs_flash_controller+0xfe03ad20>
   4bd50:	a0800017 	ldw	r2,0(r20)
   4bd54:	a027883a 	mov	r19,r20
   4bd58:	1029883a 	mov	r20,r2
   4bd5c:	003fb606 	br	4bc38 <__alt_mem_epcs_flash_controller+0xfe03ac38>
   4bd60:	0005883a 	mov	r2,zero
   4bd64:	003ffb06 	br	4bd54 <__alt_mem_epcs_flash_controller+0xfe03ad54>

0004bd68 <quorem>:
   4bd68:	defff704 	addi	sp,sp,-36
   4bd6c:	dc800215 	stw	r18,8(sp)
   4bd70:	20800417 	ldw	r2,16(r4)
   4bd74:	2c800417 	ldw	r18,16(r5)
   4bd78:	dfc00815 	stw	ra,32(sp)
   4bd7c:	ddc00715 	stw	r23,28(sp)
   4bd80:	dd800615 	stw	r22,24(sp)
   4bd84:	dd400515 	stw	r21,20(sp)
   4bd88:	dd000415 	stw	r20,16(sp)
   4bd8c:	dcc00315 	stw	r19,12(sp)
   4bd90:	dc400115 	stw	r17,4(sp)
   4bd94:	dc000015 	stw	r16,0(sp)
   4bd98:	14807116 	blt	r2,r18,4bf60 <quorem+0x1f8>
   4bd9c:	94bfffc4 	addi	r18,r18,-1
   4bda0:	94ad883a 	add	r22,r18,r18
   4bda4:	b5ad883a 	add	r22,r22,r22
   4bda8:	2c400504 	addi	r17,r5,20
   4bdac:	8da9883a 	add	r20,r17,r22
   4bdb0:	25400504 	addi	r21,r4,20
   4bdb4:	282f883a 	mov	r23,r5
   4bdb8:	adad883a 	add	r22,r21,r22
   4bdbc:	a1400017 	ldw	r5,0(r20)
   4bdc0:	2021883a 	mov	r16,r4
   4bdc4:	b1000017 	ldw	r4,0(r22)
   4bdc8:	29400044 	addi	r5,r5,1
   4bdcc:	0042a980 	call	42a98 <__udivsi3>
   4bdd0:	1027883a 	mov	r19,r2
   4bdd4:	10002c26 	beq	r2,zero,4be88 <quorem+0x120>
   4bdd8:	a813883a 	mov	r9,r21
   4bddc:	880b883a 	mov	r5,r17
   4bde0:	0009883a 	mov	r4,zero
   4bde4:	000d883a 	mov	r6,zero
   4bde8:	2a000017 	ldw	r8,0(r5)
   4bdec:	49c00017 	ldw	r7,0(r9)
   4bdf0:	29400104 	addi	r5,r5,4
   4bdf4:	40bfffcc 	andi	r2,r8,65535
   4bdf8:	14c5383a 	mul	r2,r2,r19
   4bdfc:	4010d43a 	srli	r8,r8,16
   4be00:	38ffffcc 	andi	r3,r7,65535
   4be04:	1105883a 	add	r2,r2,r4
   4be08:	1008d43a 	srli	r4,r2,16
   4be0c:	44d1383a 	mul	r8,r8,r19
   4be10:	198d883a 	add	r6,r3,r6
   4be14:	10ffffcc 	andi	r3,r2,65535
   4be18:	30c7c83a 	sub	r3,r6,r3
   4be1c:	380ed43a 	srli	r7,r7,16
   4be20:	4105883a 	add	r2,r8,r4
   4be24:	180dd43a 	srai	r6,r3,16
   4be28:	113fffcc 	andi	r4,r2,65535
   4be2c:	390fc83a 	sub	r7,r7,r4
   4be30:	398d883a 	add	r6,r7,r6
   4be34:	300e943a 	slli	r7,r6,16
   4be38:	18ffffcc 	andi	r3,r3,65535
   4be3c:	1008d43a 	srli	r4,r2,16
   4be40:	38ceb03a 	or	r7,r7,r3
   4be44:	49c00015 	stw	r7,0(r9)
   4be48:	300dd43a 	srai	r6,r6,16
   4be4c:	4a400104 	addi	r9,r9,4
   4be50:	a17fe52e 	bgeu	r20,r5,4bde8 <__alt_mem_epcs_flash_controller+0xfe03ade8>
   4be54:	b0800017 	ldw	r2,0(r22)
   4be58:	10000b1e 	bne	r2,zero,4be88 <quorem+0x120>
   4be5c:	b0bfff04 	addi	r2,r22,-4
   4be60:	a880082e 	bgeu	r21,r2,4be84 <quorem+0x11c>
   4be64:	b0ffff17 	ldw	r3,-4(r22)
   4be68:	18000326 	beq	r3,zero,4be78 <quorem+0x110>
   4be6c:	00000506 	br	4be84 <quorem+0x11c>
   4be70:	10c00017 	ldw	r3,0(r2)
   4be74:	1800031e 	bne	r3,zero,4be84 <quorem+0x11c>
   4be78:	10bfff04 	addi	r2,r2,-4
   4be7c:	94bfffc4 	addi	r18,r18,-1
   4be80:	a8bffb36 	bltu	r21,r2,4be70 <__alt_mem_epcs_flash_controller+0xfe03ae70>
   4be84:	84800415 	stw	r18,16(r16)
   4be88:	b80b883a 	mov	r5,r23
   4be8c:	8009883a 	mov	r4,r16
   4be90:	004f3500 	call	4f350 <__mcmp>
   4be94:	10002616 	blt	r2,zero,4bf30 <quorem+0x1c8>
   4be98:	9cc00044 	addi	r19,r19,1
   4be9c:	a805883a 	mov	r2,r21
   4bea0:	000b883a 	mov	r5,zero
   4bea4:	11000017 	ldw	r4,0(r2)
   4bea8:	89800017 	ldw	r6,0(r17)
   4beac:	10800104 	addi	r2,r2,4
   4beb0:	20ffffcc 	andi	r3,r4,65535
   4beb4:	194b883a 	add	r5,r3,r5
   4beb8:	30ffffcc 	andi	r3,r6,65535
   4bebc:	28c7c83a 	sub	r3,r5,r3
   4bec0:	300cd43a 	srli	r6,r6,16
   4bec4:	2008d43a 	srli	r4,r4,16
   4bec8:	180bd43a 	srai	r5,r3,16
   4becc:	18ffffcc 	andi	r3,r3,65535
   4bed0:	2189c83a 	sub	r4,r4,r6
   4bed4:	2149883a 	add	r4,r4,r5
   4bed8:	200c943a 	slli	r6,r4,16
   4bedc:	8c400104 	addi	r17,r17,4
   4bee0:	200bd43a 	srai	r5,r4,16
   4bee4:	30c6b03a 	or	r3,r6,r3
   4bee8:	10ffff15 	stw	r3,-4(r2)
   4beec:	a47fed2e 	bgeu	r20,r17,4bea4 <__alt_mem_epcs_flash_controller+0xfe03aea4>
   4bef0:	9485883a 	add	r2,r18,r18
   4bef4:	1085883a 	add	r2,r2,r2
   4bef8:	a887883a 	add	r3,r21,r2
   4befc:	18800017 	ldw	r2,0(r3)
   4bf00:	10000b1e 	bne	r2,zero,4bf30 <quorem+0x1c8>
   4bf04:	18bfff04 	addi	r2,r3,-4
   4bf08:	a880082e 	bgeu	r21,r2,4bf2c <quorem+0x1c4>
   4bf0c:	18ffff17 	ldw	r3,-4(r3)
   4bf10:	18000326 	beq	r3,zero,4bf20 <quorem+0x1b8>
   4bf14:	00000506 	br	4bf2c <quorem+0x1c4>
   4bf18:	10c00017 	ldw	r3,0(r2)
   4bf1c:	1800031e 	bne	r3,zero,4bf2c <quorem+0x1c4>
   4bf20:	10bfff04 	addi	r2,r2,-4
   4bf24:	94bfffc4 	addi	r18,r18,-1
   4bf28:	a8bffb36 	bltu	r21,r2,4bf18 <__alt_mem_epcs_flash_controller+0xfe03af18>
   4bf2c:	84800415 	stw	r18,16(r16)
   4bf30:	9805883a 	mov	r2,r19
   4bf34:	dfc00817 	ldw	ra,32(sp)
   4bf38:	ddc00717 	ldw	r23,28(sp)
   4bf3c:	dd800617 	ldw	r22,24(sp)
   4bf40:	dd400517 	ldw	r21,20(sp)
   4bf44:	dd000417 	ldw	r20,16(sp)
   4bf48:	dcc00317 	ldw	r19,12(sp)
   4bf4c:	dc800217 	ldw	r18,8(sp)
   4bf50:	dc400117 	ldw	r17,4(sp)
   4bf54:	dc000017 	ldw	r16,0(sp)
   4bf58:	dec00904 	addi	sp,sp,36
   4bf5c:	f800283a 	ret
   4bf60:	0005883a 	mov	r2,zero
   4bf64:	003ff306 	br	4bf34 <__alt_mem_epcs_flash_controller+0xfe03af34>

0004bf68 <_dtoa_r>:
   4bf68:	20801017 	ldw	r2,64(r4)
   4bf6c:	deffde04 	addi	sp,sp,-136
   4bf70:	df002015 	stw	fp,128(sp)
   4bf74:	dcc01b15 	stw	r19,108(sp)
   4bf78:	dc801a15 	stw	r18,104(sp)
   4bf7c:	dc401915 	stw	r17,100(sp)
   4bf80:	dc001815 	stw	r16,96(sp)
   4bf84:	dfc02115 	stw	ra,132(sp)
   4bf88:	ddc01f15 	stw	r23,124(sp)
   4bf8c:	dd801e15 	stw	r22,120(sp)
   4bf90:	dd401d15 	stw	r21,116(sp)
   4bf94:	dd001c15 	stw	r20,112(sp)
   4bf98:	d9c00315 	stw	r7,12(sp)
   4bf9c:	2039883a 	mov	fp,r4
   4bfa0:	3023883a 	mov	r17,r6
   4bfa4:	2825883a 	mov	r18,r5
   4bfa8:	dc002417 	ldw	r16,144(sp)
   4bfac:	3027883a 	mov	r19,r6
   4bfb0:	10000826 	beq	r2,zero,4bfd4 <_dtoa_r+0x6c>
   4bfb4:	21801117 	ldw	r6,68(r4)
   4bfb8:	00c00044 	movi	r3,1
   4bfbc:	100b883a 	mov	r5,r2
   4bfc0:	1986983a 	sll	r3,r3,r6
   4bfc4:	11800115 	stw	r6,4(r2)
   4bfc8:	10c00215 	stw	r3,8(r2)
   4bfcc:	004eb300 	call	4eb30 <_Bfree>
   4bfd0:	e0001015 	stw	zero,64(fp)
   4bfd4:	88002e16 	blt	r17,zero,4c090 <_dtoa_r+0x128>
   4bfd8:	80000015 	stw	zero,0(r16)
   4bfdc:	889ffc2c 	andhi	r2,r17,32752
   4bfe0:	00dffc34 	movhi	r3,32752
   4bfe4:	10c01c26 	beq	r2,r3,4c058 <_dtoa_r+0xf0>
   4bfe8:	000d883a 	mov	r6,zero
   4bfec:	000f883a 	mov	r7,zero
   4bff0:	9009883a 	mov	r4,r18
   4bff4:	980b883a 	mov	r5,r19
   4bff8:	0053b100 	call	53b10 <__eqdf2>
   4bffc:	10002b1e 	bne	r2,zero,4c0ac <_dtoa_r+0x144>
   4c000:	d9c02317 	ldw	r7,140(sp)
   4c004:	00800044 	movi	r2,1
   4c008:	38800015 	stw	r2,0(r7)
   4c00c:	d8802517 	ldw	r2,148(sp)
   4c010:	10019e26 	beq	r2,zero,4c68c <_dtoa_r+0x724>
   4c014:	d8c02517 	ldw	r3,148(sp)
   4c018:	008001b4 	movhi	r2,6
   4c01c:	10b57944 	addi	r2,r2,-10779
   4c020:	18800015 	stw	r2,0(r3)
   4c024:	10bfffc4 	addi	r2,r2,-1
   4c028:	dfc02117 	ldw	ra,132(sp)
   4c02c:	df002017 	ldw	fp,128(sp)
   4c030:	ddc01f17 	ldw	r23,124(sp)
   4c034:	dd801e17 	ldw	r22,120(sp)
   4c038:	dd401d17 	ldw	r21,116(sp)
   4c03c:	dd001c17 	ldw	r20,112(sp)
   4c040:	dcc01b17 	ldw	r19,108(sp)
   4c044:	dc801a17 	ldw	r18,104(sp)
   4c048:	dc401917 	ldw	r17,100(sp)
   4c04c:	dc001817 	ldw	r16,96(sp)
   4c050:	dec02204 	addi	sp,sp,136
   4c054:	f800283a 	ret
   4c058:	d8c02317 	ldw	r3,140(sp)
   4c05c:	0089c3c4 	movi	r2,9999
   4c060:	18800015 	stw	r2,0(r3)
   4c064:	90017726 	beq	r18,zero,4c644 <_dtoa_r+0x6dc>
   4c068:	008001b4 	movhi	r2,6
   4c06c:	10b58d04 	addi	r2,r2,-10700
   4c070:	d9002517 	ldw	r4,148(sp)
   4c074:	203fec26 	beq	r4,zero,4c028 <__alt_mem_epcs_flash_controller+0xfe03b028>
   4c078:	10c000c7 	ldb	r3,3(r2)
   4c07c:	1801781e 	bne	r3,zero,4c660 <_dtoa_r+0x6f8>
   4c080:	10c000c4 	addi	r3,r2,3
   4c084:	d9802517 	ldw	r6,148(sp)
   4c088:	30c00015 	stw	r3,0(r6)
   4c08c:	003fe606 	br	4c028 <__alt_mem_epcs_flash_controller+0xfe03b028>
   4c090:	04e00034 	movhi	r19,32768
   4c094:	9cffffc4 	addi	r19,r19,-1
   4c098:	00800044 	movi	r2,1
   4c09c:	8ce6703a 	and	r19,r17,r19
   4c0a0:	80800015 	stw	r2,0(r16)
   4c0a4:	9823883a 	mov	r17,r19
   4c0a8:	003fcc06 	br	4bfdc <__alt_mem_epcs_flash_controller+0xfe03afdc>
   4c0ac:	d8800204 	addi	r2,sp,8
   4c0b0:	d8800015 	stw	r2,0(sp)
   4c0b4:	d9c00104 	addi	r7,sp,4
   4c0b8:	900b883a 	mov	r5,r18
   4c0bc:	980d883a 	mov	r6,r19
   4c0c0:	e009883a 	mov	r4,fp
   4c0c4:	8820d53a 	srli	r16,r17,20
   4c0c8:	004f71c0 	call	4f71c <__d2b>
   4c0cc:	d8800915 	stw	r2,36(sp)
   4c0d0:	8001651e 	bne	r16,zero,4c668 <_dtoa_r+0x700>
   4c0d4:	dd800217 	ldw	r22,8(sp)
   4c0d8:	dc000117 	ldw	r16,4(sp)
   4c0dc:	00800804 	movi	r2,32
   4c0e0:	b421883a 	add	r16,r22,r16
   4c0e4:	80c10c84 	addi	r3,r16,1074
   4c0e8:	10c2d10e 	bge	r2,r3,4cc30 <_dtoa_r+0xcc8>
   4c0ec:	00801004 	movi	r2,64
   4c0f0:	81010484 	addi	r4,r16,1042
   4c0f4:	10c7c83a 	sub	r3,r2,r3
   4c0f8:	9108d83a 	srl	r4,r18,r4
   4c0fc:	88e2983a 	sll	r17,r17,r3
   4c100:	2448b03a 	or	r4,r4,r17
   4c104:	0053c180 	call	53c18 <__floatunsidf>
   4c108:	017f8434 	movhi	r5,65040
   4c10c:	01800044 	movi	r6,1
   4c110:	1009883a 	mov	r4,r2
   4c114:	194b883a 	add	r5,r3,r5
   4c118:	843fffc4 	addi	r16,r16,-1
   4c11c:	d9801115 	stw	r6,68(sp)
   4c120:	000d883a 	mov	r6,zero
   4c124:	01cffe34 	movhi	r7,16376
   4c128:	00445f80 	call	445f8 <__subdf3>
   4c12c:	0198dbf4 	movhi	r6,25455
   4c130:	01cff4f4 	movhi	r7,16339
   4c134:	3190d844 	addi	r6,r6,17249
   4c138:	39e1e9c4 	addi	r7,r7,-30809
   4c13c:	1009883a 	mov	r4,r2
   4c140:	180b883a 	mov	r5,r3
   4c144:	0043ee00 	call	43ee0 <__muldf3>
   4c148:	01a2d874 	movhi	r6,35681
   4c14c:	01cff1f4 	movhi	r7,16327
   4c150:	31b22cc4 	addi	r6,r6,-14157
   4c154:	39e28a04 	addi	r7,r7,-30168
   4c158:	180b883a 	mov	r5,r3
   4c15c:	1009883a 	mov	r4,r2
   4c160:	0042b7c0 	call	42b7c <__adddf3>
   4c164:	8009883a 	mov	r4,r16
   4c168:	1029883a 	mov	r20,r2
   4c16c:	1823883a 	mov	r17,r3
   4c170:	0044ef40 	call	44ef4 <__floatsidf>
   4c174:	019427f4 	movhi	r6,20639
   4c178:	01cff4f4 	movhi	r7,16339
   4c17c:	319e7ec4 	addi	r6,r6,31227
   4c180:	39d104c4 	addi	r7,r7,17427
   4c184:	1009883a 	mov	r4,r2
   4c188:	180b883a 	mov	r5,r3
   4c18c:	0043ee00 	call	43ee0 <__muldf3>
   4c190:	100d883a 	mov	r6,r2
   4c194:	180f883a 	mov	r7,r3
   4c198:	a009883a 	mov	r4,r20
   4c19c:	880b883a 	mov	r5,r17
   4c1a0:	0042b7c0 	call	42b7c <__adddf3>
   4c1a4:	1009883a 	mov	r4,r2
   4c1a8:	180b883a 	mov	r5,r3
   4c1ac:	1029883a 	mov	r20,r2
   4c1b0:	1823883a 	mov	r17,r3
   4c1b4:	0053b980 	call	53b98 <__fixdfsi>
   4c1b8:	000d883a 	mov	r6,zero
   4c1bc:	000f883a 	mov	r7,zero
   4c1c0:	a009883a 	mov	r4,r20
   4c1c4:	880b883a 	mov	r5,r17
   4c1c8:	d8800515 	stw	r2,20(sp)
   4c1cc:	0043dec0 	call	43dec <__ledf2>
   4c1d0:	10028716 	blt	r2,zero,4cbf0 <_dtoa_r+0xc88>
   4c1d4:	d8c00517 	ldw	r3,20(sp)
   4c1d8:	00800584 	movi	r2,22
   4c1dc:	10c27536 	bltu	r2,r3,4cbb4 <_dtoa_r+0xc4c>
   4c1e0:	180490fa 	slli	r2,r3,3
   4c1e4:	00c001b4 	movhi	r3,6
   4c1e8:	18f5a804 	addi	r3,r3,-10592
   4c1ec:	1885883a 	add	r2,r3,r2
   4c1f0:	11000017 	ldw	r4,0(r2)
   4c1f4:	11400117 	ldw	r5,4(r2)
   4c1f8:	900d883a 	mov	r6,r18
   4c1fc:	980f883a 	mov	r7,r19
   4c200:	0043d100 	call	43d10 <__gedf2>
   4c204:	00828d0e 	bge	zero,r2,4cc3c <_dtoa_r+0xcd4>
   4c208:	d9000517 	ldw	r4,20(sp)
   4c20c:	d8000e15 	stw	zero,56(sp)
   4c210:	213fffc4 	addi	r4,r4,-1
   4c214:	d9000515 	stw	r4,20(sp)
   4c218:	b42dc83a 	sub	r22,r22,r16
   4c21c:	b5bfffc4 	addi	r22,r22,-1
   4c220:	b0026f16 	blt	r22,zero,4cbe0 <_dtoa_r+0xc78>
   4c224:	d8000815 	stw	zero,32(sp)
   4c228:	d9c00517 	ldw	r7,20(sp)
   4c22c:	38026416 	blt	r7,zero,4cbc0 <_dtoa_r+0xc58>
   4c230:	b1ed883a 	add	r22,r22,r7
   4c234:	d9c00d15 	stw	r7,52(sp)
   4c238:	d8000a15 	stw	zero,40(sp)
   4c23c:	d9800317 	ldw	r6,12(sp)
   4c240:	00800244 	movi	r2,9
   4c244:	11811436 	bltu	r2,r6,4c698 <_dtoa_r+0x730>
   4c248:	00800144 	movi	r2,5
   4c24c:	1184e10e 	bge	r2,r6,4d5d4 <_dtoa_r+0x166c>
   4c250:	31bfff04 	addi	r6,r6,-4
   4c254:	d9800315 	stw	r6,12(sp)
   4c258:	0023883a 	mov	r17,zero
   4c25c:	d9800317 	ldw	r6,12(sp)
   4c260:	008000c4 	movi	r2,3
   4c264:	30836726 	beq	r6,r2,4d004 <_dtoa_r+0x109c>
   4c268:	1183410e 	bge	r2,r6,4cf70 <_dtoa_r+0x1008>
   4c26c:	d9c00317 	ldw	r7,12(sp)
   4c270:	00800104 	movi	r2,4
   4c274:	38827c26 	beq	r7,r2,4cc68 <_dtoa_r+0xd00>
   4c278:	00800144 	movi	r2,5
   4c27c:	3884c41e 	bne	r7,r2,4d590 <_dtoa_r+0x1628>
   4c280:	00800044 	movi	r2,1
   4c284:	d8800b15 	stw	r2,44(sp)
   4c288:	d8c00517 	ldw	r3,20(sp)
   4c28c:	d9002217 	ldw	r4,136(sp)
   4c290:	1907883a 	add	r3,r3,r4
   4c294:	19800044 	addi	r6,r3,1
   4c298:	d8c00c15 	stw	r3,48(sp)
   4c29c:	d9800615 	stw	r6,24(sp)
   4c2a0:	0183a40e 	bge	zero,r6,4d134 <_dtoa_r+0x11cc>
   4c2a4:	d9800617 	ldw	r6,24(sp)
   4c2a8:	3021883a 	mov	r16,r6
   4c2ac:	e0001115 	stw	zero,68(fp)
   4c2b0:	008005c4 	movi	r2,23
   4c2b4:	1184c92e 	bgeu	r2,r6,4d5dc <_dtoa_r+0x1674>
   4c2b8:	00c00044 	movi	r3,1
   4c2bc:	00800104 	movi	r2,4
   4c2c0:	1085883a 	add	r2,r2,r2
   4c2c4:	11000504 	addi	r4,r2,20
   4c2c8:	180b883a 	mov	r5,r3
   4c2cc:	18c00044 	addi	r3,r3,1
   4c2d0:	313ffb2e 	bgeu	r6,r4,4c2c0 <__alt_mem_epcs_flash_controller+0xfe03b2c0>
   4c2d4:	e1401115 	stw	r5,68(fp)
   4c2d8:	e009883a 	mov	r4,fp
   4c2dc:	004ea880 	call	4ea88 <_Balloc>
   4c2e0:	d8800715 	stw	r2,28(sp)
   4c2e4:	e0801015 	stw	r2,64(fp)
   4c2e8:	00800384 	movi	r2,14
   4c2ec:	1400f736 	bltu	r2,r16,4c6cc <_dtoa_r+0x764>
   4c2f0:	8800f626 	beq	r17,zero,4c6cc <_dtoa_r+0x764>
   4c2f4:	d9c00517 	ldw	r7,20(sp)
   4c2f8:	01c39a0e 	bge	zero,r7,4d164 <_dtoa_r+0x11fc>
   4c2fc:	388003cc 	andi	r2,r7,15
   4c300:	100490fa 	slli	r2,r2,3
   4c304:	382bd13a 	srai	r21,r7,4
   4c308:	00c001b4 	movhi	r3,6
   4c30c:	18f5a804 	addi	r3,r3,-10592
   4c310:	1885883a 	add	r2,r3,r2
   4c314:	a8c0040c 	andi	r3,r21,16
   4c318:	12400017 	ldw	r9,0(r2)
   4c31c:	12000117 	ldw	r8,4(r2)
   4c320:	18037926 	beq	r3,zero,4d108 <_dtoa_r+0x11a0>
   4c324:	008001b4 	movhi	r2,6
   4c328:	10b59e04 	addi	r2,r2,-10632
   4c32c:	11800817 	ldw	r6,32(r2)
   4c330:	11c00917 	ldw	r7,36(r2)
   4c334:	9009883a 	mov	r4,r18
   4c338:	980b883a 	mov	r5,r19
   4c33c:	da001715 	stw	r8,92(sp)
   4c340:	da401615 	stw	r9,88(sp)
   4c344:	00434280 	call	43428 <__divdf3>
   4c348:	da001717 	ldw	r8,92(sp)
   4c34c:	da401617 	ldw	r9,88(sp)
   4c350:	ad4003cc 	andi	r21,r21,15
   4c354:	040000c4 	movi	r16,3
   4c358:	1023883a 	mov	r17,r2
   4c35c:	1829883a 	mov	r20,r3
   4c360:	a8001126 	beq	r21,zero,4c3a8 <_dtoa_r+0x440>
   4c364:	05c001b4 	movhi	r23,6
   4c368:	bdf59e04 	addi	r23,r23,-10632
   4c36c:	4805883a 	mov	r2,r9
   4c370:	4007883a 	mov	r3,r8
   4c374:	a980004c 	andi	r6,r21,1
   4c378:	1009883a 	mov	r4,r2
   4c37c:	a82bd07a 	srai	r21,r21,1
   4c380:	180b883a 	mov	r5,r3
   4c384:	30000426 	beq	r6,zero,4c398 <_dtoa_r+0x430>
   4c388:	b9800017 	ldw	r6,0(r23)
   4c38c:	b9c00117 	ldw	r7,4(r23)
   4c390:	84000044 	addi	r16,r16,1
   4c394:	0043ee00 	call	43ee0 <__muldf3>
   4c398:	bdc00204 	addi	r23,r23,8
   4c39c:	a83ff51e 	bne	r21,zero,4c374 <__alt_mem_epcs_flash_controller+0xfe03b374>
   4c3a0:	1013883a 	mov	r9,r2
   4c3a4:	1811883a 	mov	r8,r3
   4c3a8:	480d883a 	mov	r6,r9
   4c3ac:	400f883a 	mov	r7,r8
   4c3b0:	8809883a 	mov	r4,r17
   4c3b4:	a00b883a 	mov	r5,r20
   4c3b8:	00434280 	call	43428 <__divdf3>
   4c3bc:	d8800f15 	stw	r2,60(sp)
   4c3c0:	d8c01015 	stw	r3,64(sp)
   4c3c4:	d8c00e17 	ldw	r3,56(sp)
   4c3c8:	18000626 	beq	r3,zero,4c3e4 <_dtoa_r+0x47c>
   4c3cc:	d9000f17 	ldw	r4,60(sp)
   4c3d0:	d9401017 	ldw	r5,64(sp)
   4c3d4:	000d883a 	mov	r6,zero
   4c3d8:	01cffc34 	movhi	r7,16368
   4c3dc:	0043dec0 	call	43dec <__ledf2>
   4c3e0:	10040b16 	blt	r2,zero,4d410 <_dtoa_r+0x14a8>
   4c3e4:	8009883a 	mov	r4,r16
   4c3e8:	0044ef40 	call	44ef4 <__floatsidf>
   4c3ec:	d9800f17 	ldw	r6,60(sp)
   4c3f0:	d9c01017 	ldw	r7,64(sp)
   4c3f4:	1009883a 	mov	r4,r2
   4c3f8:	180b883a 	mov	r5,r3
   4c3fc:	0043ee00 	call	43ee0 <__muldf3>
   4c400:	000d883a 	mov	r6,zero
   4c404:	01d00734 	movhi	r7,16412
   4c408:	1009883a 	mov	r4,r2
   4c40c:	180b883a 	mov	r5,r3
   4c410:	0042b7c0 	call	42b7c <__adddf3>
   4c414:	1021883a 	mov	r16,r2
   4c418:	d8800617 	ldw	r2,24(sp)
   4c41c:	047f3034 	movhi	r17,64704
   4c420:	1c63883a 	add	r17,r3,r17
   4c424:	10031826 	beq	r2,zero,4d088 <_dtoa_r+0x1120>
   4c428:	d8c00517 	ldw	r3,20(sp)
   4c42c:	db000617 	ldw	r12,24(sp)
   4c430:	d8c01315 	stw	r3,76(sp)
   4c434:	d9000b17 	ldw	r4,44(sp)
   4c438:	20038f26 	beq	r4,zero,4d278 <_dtoa_r+0x1310>
   4c43c:	60bfffc4 	addi	r2,r12,-1
   4c440:	100490fa 	slli	r2,r2,3
   4c444:	00c001b4 	movhi	r3,6
   4c448:	18f5a804 	addi	r3,r3,-10592
   4c44c:	1885883a 	add	r2,r3,r2
   4c450:	11800017 	ldw	r6,0(r2)
   4c454:	11c00117 	ldw	r7,4(r2)
   4c458:	d8800717 	ldw	r2,28(sp)
   4c45c:	0009883a 	mov	r4,zero
   4c460:	014ff834 	movhi	r5,16352
   4c464:	db001615 	stw	r12,88(sp)
   4c468:	15c00044 	addi	r23,r2,1
   4c46c:	00434280 	call	43428 <__divdf3>
   4c470:	800d883a 	mov	r6,r16
   4c474:	880f883a 	mov	r7,r17
   4c478:	1009883a 	mov	r4,r2
   4c47c:	180b883a 	mov	r5,r3
   4c480:	00445f80 	call	445f8 <__subdf3>
   4c484:	d9401017 	ldw	r5,64(sp)
   4c488:	d9000f17 	ldw	r4,60(sp)
   4c48c:	102b883a 	mov	r21,r2
   4c490:	d8c01215 	stw	r3,72(sp)
   4c494:	0053b980 	call	53b98 <__fixdfsi>
   4c498:	1009883a 	mov	r4,r2
   4c49c:	1029883a 	mov	r20,r2
   4c4a0:	0044ef40 	call	44ef4 <__floatsidf>
   4c4a4:	d9000f17 	ldw	r4,60(sp)
   4c4a8:	d9401017 	ldw	r5,64(sp)
   4c4ac:	100d883a 	mov	r6,r2
   4c4b0:	180f883a 	mov	r7,r3
   4c4b4:	00445f80 	call	445f8 <__subdf3>
   4c4b8:	1823883a 	mov	r17,r3
   4c4bc:	d8c00717 	ldw	r3,28(sp)
   4c4c0:	d9401217 	ldw	r5,72(sp)
   4c4c4:	a2000c04 	addi	r8,r20,48
   4c4c8:	1021883a 	mov	r16,r2
   4c4cc:	1a000005 	stb	r8,0(r3)
   4c4d0:	800d883a 	mov	r6,r16
   4c4d4:	880f883a 	mov	r7,r17
   4c4d8:	a809883a 	mov	r4,r21
   4c4dc:	4029883a 	mov	r20,r8
   4c4e0:	0043d100 	call	43d10 <__gedf2>
   4c4e4:	00841d16 	blt	zero,r2,4d55c <_dtoa_r+0x15f4>
   4c4e8:	800d883a 	mov	r6,r16
   4c4ec:	880f883a 	mov	r7,r17
   4c4f0:	0009883a 	mov	r4,zero
   4c4f4:	014ffc34 	movhi	r5,16368
   4c4f8:	00445f80 	call	445f8 <__subdf3>
   4c4fc:	d9401217 	ldw	r5,72(sp)
   4c500:	100d883a 	mov	r6,r2
   4c504:	180f883a 	mov	r7,r3
   4c508:	a809883a 	mov	r4,r21
   4c50c:	0043d100 	call	43d10 <__gedf2>
   4c510:	db001617 	ldw	r12,88(sp)
   4c514:	00840e16 	blt	zero,r2,4d550 <_dtoa_r+0x15e8>
   4c518:	00800044 	movi	r2,1
   4c51c:	13006b0e 	bge	r2,r12,4c6cc <_dtoa_r+0x764>
   4c520:	d9000717 	ldw	r4,28(sp)
   4c524:	dd800f15 	stw	r22,60(sp)
   4c528:	dcc01015 	stw	r19,64(sp)
   4c52c:	2319883a 	add	r12,r4,r12
   4c530:	dcc01217 	ldw	r19,72(sp)
   4c534:	602d883a 	mov	r22,r12
   4c538:	dc801215 	stw	r18,72(sp)
   4c53c:	b825883a 	mov	r18,r23
   4c540:	00000906 	br	4c568 <_dtoa_r+0x600>
   4c544:	00445f80 	call	445f8 <__subdf3>
   4c548:	a80d883a 	mov	r6,r21
   4c54c:	980f883a 	mov	r7,r19
   4c550:	1009883a 	mov	r4,r2
   4c554:	180b883a 	mov	r5,r3
   4c558:	0043dec0 	call	43dec <__ledf2>
   4c55c:	1003e816 	blt	r2,zero,4d500 <_dtoa_r+0x1598>
   4c560:	b825883a 	mov	r18,r23
   4c564:	bd83e926 	beq	r23,r22,4d50c <_dtoa_r+0x15a4>
   4c568:	a809883a 	mov	r4,r21
   4c56c:	980b883a 	mov	r5,r19
   4c570:	000d883a 	mov	r6,zero
   4c574:	01d00934 	movhi	r7,16420
   4c578:	0043ee00 	call	43ee0 <__muldf3>
   4c57c:	000d883a 	mov	r6,zero
   4c580:	01d00934 	movhi	r7,16420
   4c584:	8009883a 	mov	r4,r16
   4c588:	880b883a 	mov	r5,r17
   4c58c:	102b883a 	mov	r21,r2
   4c590:	1827883a 	mov	r19,r3
   4c594:	0043ee00 	call	43ee0 <__muldf3>
   4c598:	180b883a 	mov	r5,r3
   4c59c:	1009883a 	mov	r4,r2
   4c5a0:	1821883a 	mov	r16,r3
   4c5a4:	1023883a 	mov	r17,r2
   4c5a8:	0053b980 	call	53b98 <__fixdfsi>
   4c5ac:	1009883a 	mov	r4,r2
   4c5b0:	1029883a 	mov	r20,r2
   4c5b4:	0044ef40 	call	44ef4 <__floatsidf>
   4c5b8:	8809883a 	mov	r4,r17
   4c5bc:	800b883a 	mov	r5,r16
   4c5c0:	100d883a 	mov	r6,r2
   4c5c4:	180f883a 	mov	r7,r3
   4c5c8:	00445f80 	call	445f8 <__subdf3>
   4c5cc:	a5000c04 	addi	r20,r20,48
   4c5d0:	a80d883a 	mov	r6,r21
   4c5d4:	980f883a 	mov	r7,r19
   4c5d8:	1009883a 	mov	r4,r2
   4c5dc:	180b883a 	mov	r5,r3
   4c5e0:	95000005 	stb	r20,0(r18)
   4c5e4:	1021883a 	mov	r16,r2
   4c5e8:	1823883a 	mov	r17,r3
   4c5ec:	0043dec0 	call	43dec <__ledf2>
   4c5f0:	bdc00044 	addi	r23,r23,1
   4c5f4:	800d883a 	mov	r6,r16
   4c5f8:	880f883a 	mov	r7,r17
   4c5fc:	0009883a 	mov	r4,zero
   4c600:	014ffc34 	movhi	r5,16368
   4c604:	103fcf0e 	bge	r2,zero,4c544 <__alt_mem_epcs_flash_controller+0xfe03b544>
   4c608:	d8c01317 	ldw	r3,76(sp)
   4c60c:	d8c00515 	stw	r3,20(sp)
   4c610:	d9400917 	ldw	r5,36(sp)
   4c614:	e009883a 	mov	r4,fp
   4c618:	004eb300 	call	4eb30 <_Bfree>
   4c61c:	d9000517 	ldw	r4,20(sp)
   4c620:	d9802317 	ldw	r6,140(sp)
   4c624:	d9c02517 	ldw	r7,148(sp)
   4c628:	b8000005 	stb	zero,0(r23)
   4c62c:	20800044 	addi	r2,r4,1
   4c630:	30800015 	stw	r2,0(r6)
   4c634:	3802aa26 	beq	r7,zero,4d0e0 <_dtoa_r+0x1178>
   4c638:	3dc00015 	stw	r23,0(r7)
   4c63c:	d8800717 	ldw	r2,28(sp)
   4c640:	003e7906 	br	4c028 <__alt_mem_epcs_flash_controller+0xfe03b028>
   4c644:	00800434 	movhi	r2,16
   4c648:	10bfffc4 	addi	r2,r2,-1
   4c64c:	88a2703a 	and	r17,r17,r2
   4c650:	883e851e 	bne	r17,zero,4c068 <__alt_mem_epcs_flash_controller+0xfe03b068>
   4c654:	008001b4 	movhi	r2,6
   4c658:	10b58a04 	addi	r2,r2,-10712
   4c65c:	003e8406 	br	4c070 <__alt_mem_epcs_flash_controller+0xfe03b070>
   4c660:	10c00204 	addi	r3,r2,8
   4c664:	003e8706 	br	4c084 <__alt_mem_epcs_flash_controller+0xfe03b084>
   4c668:	01400434 	movhi	r5,16
   4c66c:	297fffc4 	addi	r5,r5,-1
   4c670:	994a703a 	and	r5,r19,r5
   4c674:	9009883a 	mov	r4,r18
   4c678:	843f0044 	addi	r16,r16,-1023
   4c67c:	294ffc34 	orhi	r5,r5,16368
   4c680:	dd800217 	ldw	r22,8(sp)
   4c684:	d8001115 	stw	zero,68(sp)
   4c688:	003ea506 	br	4c120 <__alt_mem_epcs_flash_controller+0xfe03b120>
   4c68c:	008001b4 	movhi	r2,6
   4c690:	10b57904 	addi	r2,r2,-10780
   4c694:	003e6406 	br	4c028 <__alt_mem_epcs_flash_controller+0xfe03b028>
   4c698:	e0001115 	stw	zero,68(fp)
   4c69c:	000b883a 	mov	r5,zero
   4c6a0:	e009883a 	mov	r4,fp
   4c6a4:	004ea880 	call	4ea88 <_Balloc>
   4c6a8:	01bfffc4 	movi	r6,-1
   4c6ac:	01c00044 	movi	r7,1
   4c6b0:	d8800715 	stw	r2,28(sp)
   4c6b4:	d9800c15 	stw	r6,48(sp)
   4c6b8:	e0801015 	stw	r2,64(fp)
   4c6bc:	d8000315 	stw	zero,12(sp)
   4c6c0:	d9c00b15 	stw	r7,44(sp)
   4c6c4:	d9800615 	stw	r6,24(sp)
   4c6c8:	d8002215 	stw	zero,136(sp)
   4c6cc:	d8800117 	ldw	r2,4(sp)
   4c6d0:	10008916 	blt	r2,zero,4c8f8 <_dtoa_r+0x990>
   4c6d4:	d9000517 	ldw	r4,20(sp)
   4c6d8:	00c00384 	movi	r3,14
   4c6dc:	19008616 	blt	r3,r4,4c8f8 <_dtoa_r+0x990>
   4c6e0:	200490fa 	slli	r2,r4,3
   4c6e4:	00c001b4 	movhi	r3,6
   4c6e8:	d9802217 	ldw	r6,136(sp)
   4c6ec:	18f5a804 	addi	r3,r3,-10592
   4c6f0:	1885883a 	add	r2,r3,r2
   4c6f4:	14000017 	ldw	r16,0(r2)
   4c6f8:	14400117 	ldw	r17,4(r2)
   4c6fc:	30016316 	blt	r6,zero,4cc8c <_dtoa_r+0xd24>
   4c700:	800d883a 	mov	r6,r16
   4c704:	880f883a 	mov	r7,r17
   4c708:	9009883a 	mov	r4,r18
   4c70c:	980b883a 	mov	r5,r19
   4c710:	00434280 	call	43428 <__divdf3>
   4c714:	180b883a 	mov	r5,r3
   4c718:	1009883a 	mov	r4,r2
   4c71c:	0053b980 	call	53b98 <__fixdfsi>
   4c720:	1009883a 	mov	r4,r2
   4c724:	102b883a 	mov	r21,r2
   4c728:	0044ef40 	call	44ef4 <__floatsidf>
   4c72c:	800d883a 	mov	r6,r16
   4c730:	880f883a 	mov	r7,r17
   4c734:	1009883a 	mov	r4,r2
   4c738:	180b883a 	mov	r5,r3
   4c73c:	0043ee00 	call	43ee0 <__muldf3>
   4c740:	100d883a 	mov	r6,r2
   4c744:	180f883a 	mov	r7,r3
   4c748:	9009883a 	mov	r4,r18
   4c74c:	980b883a 	mov	r5,r19
   4c750:	00445f80 	call	445f8 <__subdf3>
   4c754:	d9c00717 	ldw	r7,28(sp)
   4c758:	1009883a 	mov	r4,r2
   4c75c:	a8800c04 	addi	r2,r21,48
   4c760:	38800005 	stb	r2,0(r7)
   4c764:	3dc00044 	addi	r23,r7,1
   4c768:	d9c00617 	ldw	r7,24(sp)
   4c76c:	01800044 	movi	r6,1
   4c770:	180b883a 	mov	r5,r3
   4c774:	2005883a 	mov	r2,r4
   4c778:	39803826 	beq	r7,r6,4c85c <_dtoa_r+0x8f4>
   4c77c:	000d883a 	mov	r6,zero
   4c780:	01d00934 	movhi	r7,16420
   4c784:	0043ee00 	call	43ee0 <__muldf3>
   4c788:	000d883a 	mov	r6,zero
   4c78c:	000f883a 	mov	r7,zero
   4c790:	1009883a 	mov	r4,r2
   4c794:	180b883a 	mov	r5,r3
   4c798:	1025883a 	mov	r18,r2
   4c79c:	1827883a 	mov	r19,r3
   4c7a0:	0053b100 	call	53b10 <__eqdf2>
   4c7a4:	103f9a26 	beq	r2,zero,4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4c7a8:	d9c00617 	ldw	r7,24(sp)
   4c7ac:	d8c00717 	ldw	r3,28(sp)
   4c7b0:	b829883a 	mov	r20,r23
   4c7b4:	38bfffc4 	addi	r2,r7,-1
   4c7b8:	18ad883a 	add	r22,r3,r2
   4c7bc:	00000a06 	br	4c7e8 <_dtoa_r+0x880>
   4c7c0:	0043ee00 	call	43ee0 <__muldf3>
   4c7c4:	000d883a 	mov	r6,zero
   4c7c8:	000f883a 	mov	r7,zero
   4c7cc:	1009883a 	mov	r4,r2
   4c7d0:	180b883a 	mov	r5,r3
   4c7d4:	1025883a 	mov	r18,r2
   4c7d8:	1827883a 	mov	r19,r3
   4c7dc:	b829883a 	mov	r20,r23
   4c7e0:	0053b100 	call	53b10 <__eqdf2>
   4c7e4:	103f8a26 	beq	r2,zero,4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4c7e8:	800d883a 	mov	r6,r16
   4c7ec:	880f883a 	mov	r7,r17
   4c7f0:	9009883a 	mov	r4,r18
   4c7f4:	980b883a 	mov	r5,r19
   4c7f8:	00434280 	call	43428 <__divdf3>
   4c7fc:	180b883a 	mov	r5,r3
   4c800:	1009883a 	mov	r4,r2
   4c804:	0053b980 	call	53b98 <__fixdfsi>
   4c808:	1009883a 	mov	r4,r2
   4c80c:	102b883a 	mov	r21,r2
   4c810:	0044ef40 	call	44ef4 <__floatsidf>
   4c814:	800d883a 	mov	r6,r16
   4c818:	880f883a 	mov	r7,r17
   4c81c:	1009883a 	mov	r4,r2
   4c820:	180b883a 	mov	r5,r3
   4c824:	0043ee00 	call	43ee0 <__muldf3>
   4c828:	100d883a 	mov	r6,r2
   4c82c:	180f883a 	mov	r7,r3
   4c830:	9009883a 	mov	r4,r18
   4c834:	980b883a 	mov	r5,r19
   4c838:	00445f80 	call	445f8 <__subdf3>
   4c83c:	aa000c04 	addi	r8,r21,48
   4c840:	a2000005 	stb	r8,0(r20)
   4c844:	000d883a 	mov	r6,zero
   4c848:	01d00934 	movhi	r7,16420
   4c84c:	1009883a 	mov	r4,r2
   4c850:	180b883a 	mov	r5,r3
   4c854:	a5c00044 	addi	r23,r20,1
   4c858:	b53fd91e 	bne	r22,r20,4c7c0 <__alt_mem_epcs_flash_controller+0xfe03b7c0>
   4c85c:	100d883a 	mov	r6,r2
   4c860:	180f883a 	mov	r7,r3
   4c864:	1009883a 	mov	r4,r2
   4c868:	180b883a 	mov	r5,r3
   4c86c:	0042b7c0 	call	42b7c <__adddf3>
   4c870:	100d883a 	mov	r6,r2
   4c874:	180f883a 	mov	r7,r3
   4c878:	8009883a 	mov	r4,r16
   4c87c:	880b883a 	mov	r5,r17
   4c880:	1027883a 	mov	r19,r2
   4c884:	1825883a 	mov	r18,r3
   4c888:	0043dec0 	call	43dec <__ledf2>
   4c88c:	10000816 	blt	r2,zero,4c8b0 <_dtoa_r+0x948>
   4c890:	980d883a 	mov	r6,r19
   4c894:	900f883a 	mov	r7,r18
   4c898:	8009883a 	mov	r4,r16
   4c89c:	880b883a 	mov	r5,r17
   4c8a0:	0053b100 	call	53b10 <__eqdf2>
   4c8a4:	103f5a1e 	bne	r2,zero,4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4c8a8:	ad40004c 	andi	r21,r21,1
   4c8ac:	a83f5826 	beq	r21,zero,4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4c8b0:	bd3fffc3 	ldbu	r20,-1(r23)
   4c8b4:	b8bfffc4 	addi	r2,r23,-1
   4c8b8:	1007883a 	mov	r3,r2
   4c8bc:	01400e44 	movi	r5,57
   4c8c0:	d9800717 	ldw	r6,28(sp)
   4c8c4:	00000506 	br	4c8dc <_dtoa_r+0x974>
   4c8c8:	18ffffc4 	addi	r3,r3,-1
   4c8cc:	11824726 	beq	r2,r6,4d1ec <_dtoa_r+0x1284>
   4c8d0:	1d000003 	ldbu	r20,0(r3)
   4c8d4:	102f883a 	mov	r23,r2
   4c8d8:	10bfffc4 	addi	r2,r2,-1
   4c8dc:	a1003fcc 	andi	r4,r20,255
   4c8e0:	2100201c 	xori	r4,r4,128
   4c8e4:	213fe004 	addi	r4,r4,-128
   4c8e8:	217ff726 	beq	r4,r5,4c8c8 <__alt_mem_epcs_flash_controller+0xfe03b8c8>
   4c8ec:	a2000044 	addi	r8,r20,1
   4c8f0:	12000005 	stb	r8,0(r2)
   4c8f4:	003f4606 	br	4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4c8f8:	d9000b17 	ldw	r4,44(sp)
   4c8fc:	2000c826 	beq	r4,zero,4cc20 <_dtoa_r+0xcb8>
   4c900:	d9800317 	ldw	r6,12(sp)
   4c904:	00c00044 	movi	r3,1
   4c908:	1980f90e 	bge	r3,r6,4ccf0 <_dtoa_r+0xd88>
   4c90c:	d8800617 	ldw	r2,24(sp)
   4c910:	d8c00a17 	ldw	r3,40(sp)
   4c914:	157fffc4 	addi	r21,r2,-1
   4c918:	1d41f316 	blt	r3,r21,4d0e8 <_dtoa_r+0x1180>
   4c91c:	1d6bc83a 	sub	r21,r3,r21
   4c920:	d9c00617 	ldw	r7,24(sp)
   4c924:	3802aa16 	blt	r7,zero,4d3d0 <_dtoa_r+0x1468>
   4c928:	dd000817 	ldw	r20,32(sp)
   4c92c:	d8800617 	ldw	r2,24(sp)
   4c930:	d8c00817 	ldw	r3,32(sp)
   4c934:	01400044 	movi	r5,1
   4c938:	e009883a 	mov	r4,fp
   4c93c:	1887883a 	add	r3,r3,r2
   4c940:	d8c00815 	stw	r3,32(sp)
   4c944:	b0ad883a 	add	r22,r22,r2
   4c948:	004ee940 	call	4ee94 <__i2b>
   4c94c:	1023883a 	mov	r17,r2
   4c950:	a0000826 	beq	r20,zero,4c974 <_dtoa_r+0xa0c>
   4c954:	0580070e 	bge	zero,r22,4c974 <_dtoa_r+0xa0c>
   4c958:	a005883a 	mov	r2,r20
   4c95c:	b500b916 	blt	r22,r20,4cc44 <_dtoa_r+0xcdc>
   4c960:	d9000817 	ldw	r4,32(sp)
   4c964:	a0a9c83a 	sub	r20,r20,r2
   4c968:	b0adc83a 	sub	r22,r22,r2
   4c96c:	2089c83a 	sub	r4,r4,r2
   4c970:	d9000815 	stw	r4,32(sp)
   4c974:	d9800a17 	ldw	r6,40(sp)
   4c978:	0181810e 	bge	zero,r6,4cf80 <_dtoa_r+0x1018>
   4c97c:	d9c00b17 	ldw	r7,44(sp)
   4c980:	3800b326 	beq	r7,zero,4cc50 <_dtoa_r+0xce8>
   4c984:	a800b226 	beq	r21,zero,4cc50 <_dtoa_r+0xce8>
   4c988:	880b883a 	mov	r5,r17
   4c98c:	a80d883a 	mov	r6,r21
   4c990:	e009883a 	mov	r4,fp
   4c994:	004f0c80 	call	4f0c8 <__pow5mult>
   4c998:	d9800917 	ldw	r6,36(sp)
   4c99c:	100b883a 	mov	r5,r2
   4c9a0:	e009883a 	mov	r4,fp
   4c9a4:	1023883a 	mov	r17,r2
   4c9a8:	004eed00 	call	4eed0 <__multiply>
   4c9ac:	1021883a 	mov	r16,r2
   4c9b0:	d8800a17 	ldw	r2,40(sp)
   4c9b4:	d9400917 	ldw	r5,36(sp)
   4c9b8:	e009883a 	mov	r4,fp
   4c9bc:	1545c83a 	sub	r2,r2,r21
   4c9c0:	d8800a15 	stw	r2,40(sp)
   4c9c4:	004eb300 	call	4eb30 <_Bfree>
   4c9c8:	d8c00a17 	ldw	r3,40(sp)
   4c9cc:	18009f1e 	bne	r3,zero,4cc4c <_dtoa_r+0xce4>
   4c9d0:	05c00044 	movi	r23,1
   4c9d4:	e009883a 	mov	r4,fp
   4c9d8:	b80b883a 	mov	r5,r23
   4c9dc:	004ee940 	call	4ee94 <__i2b>
   4c9e0:	d9000d17 	ldw	r4,52(sp)
   4c9e4:	102b883a 	mov	r21,r2
   4c9e8:	2000ce26 	beq	r4,zero,4cd24 <_dtoa_r+0xdbc>
   4c9ec:	200d883a 	mov	r6,r4
   4c9f0:	100b883a 	mov	r5,r2
   4c9f4:	e009883a 	mov	r4,fp
   4c9f8:	004f0c80 	call	4f0c8 <__pow5mult>
   4c9fc:	d9800317 	ldw	r6,12(sp)
   4ca00:	102b883a 	mov	r21,r2
   4ca04:	b981810e 	bge	r23,r6,4d00c <_dtoa_r+0x10a4>
   4ca08:	0027883a 	mov	r19,zero
   4ca0c:	a8800417 	ldw	r2,16(r21)
   4ca10:	05c00804 	movi	r23,32
   4ca14:	10800104 	addi	r2,r2,4
   4ca18:	1085883a 	add	r2,r2,r2
   4ca1c:	1085883a 	add	r2,r2,r2
   4ca20:	a885883a 	add	r2,r21,r2
   4ca24:	11000017 	ldw	r4,0(r2)
   4ca28:	004ed7c0 	call	4ed7c <__hi0bits>
   4ca2c:	b885c83a 	sub	r2,r23,r2
   4ca30:	1585883a 	add	r2,r2,r22
   4ca34:	108007cc 	andi	r2,r2,31
   4ca38:	1000b326 	beq	r2,zero,4cd08 <_dtoa_r+0xda0>
   4ca3c:	00c00804 	movi	r3,32
   4ca40:	1887c83a 	sub	r3,r3,r2
   4ca44:	01000104 	movi	r4,4
   4ca48:	20c2cd0e 	bge	r4,r3,4d580 <_dtoa_r+0x1618>
   4ca4c:	00c00704 	movi	r3,28
   4ca50:	1885c83a 	sub	r2,r3,r2
   4ca54:	d8c00817 	ldw	r3,32(sp)
   4ca58:	a0a9883a 	add	r20,r20,r2
   4ca5c:	b0ad883a 	add	r22,r22,r2
   4ca60:	1887883a 	add	r3,r3,r2
   4ca64:	d8c00815 	stw	r3,32(sp)
   4ca68:	d9800817 	ldw	r6,32(sp)
   4ca6c:	0180040e 	bge	zero,r6,4ca80 <_dtoa_r+0xb18>
   4ca70:	800b883a 	mov	r5,r16
   4ca74:	e009883a 	mov	r4,fp
   4ca78:	004f2080 	call	4f208 <__lshift>
   4ca7c:	1021883a 	mov	r16,r2
   4ca80:	0580050e 	bge	zero,r22,4ca98 <_dtoa_r+0xb30>
   4ca84:	a80b883a 	mov	r5,r21
   4ca88:	b00d883a 	mov	r6,r22
   4ca8c:	e009883a 	mov	r4,fp
   4ca90:	004f2080 	call	4f208 <__lshift>
   4ca94:	102b883a 	mov	r21,r2
   4ca98:	d9c00e17 	ldw	r7,56(sp)
   4ca9c:	3801211e 	bne	r7,zero,4cf24 <_dtoa_r+0xfbc>
   4caa0:	d9800617 	ldw	r6,24(sp)
   4caa4:	0181380e 	bge	zero,r6,4cf88 <_dtoa_r+0x1020>
   4caa8:	d8c00b17 	ldw	r3,44(sp)
   4caac:	1800ab1e 	bne	r3,zero,4cd5c <_dtoa_r+0xdf4>
   4cab0:	dc800717 	ldw	r18,28(sp)
   4cab4:	dcc00617 	ldw	r19,24(sp)
   4cab8:	9029883a 	mov	r20,r18
   4cabc:	00000206 	br	4cac8 <_dtoa_r+0xb60>
   4cac0:	004eb580 	call	4eb58 <__multadd>
   4cac4:	1021883a 	mov	r16,r2
   4cac8:	a80b883a 	mov	r5,r21
   4cacc:	8009883a 	mov	r4,r16
   4cad0:	004bd680 	call	4bd68 <quorem>
   4cad4:	10800c04 	addi	r2,r2,48
   4cad8:	90800005 	stb	r2,0(r18)
   4cadc:	94800044 	addi	r18,r18,1
   4cae0:	9507c83a 	sub	r3,r18,r20
   4cae4:	000f883a 	mov	r7,zero
   4cae8:	01800284 	movi	r6,10
   4caec:	800b883a 	mov	r5,r16
   4caf0:	e009883a 	mov	r4,fp
   4caf4:	1cfff216 	blt	r3,r19,4cac0 <__alt_mem_epcs_flash_controller+0xfe03bac0>
   4caf8:	1011883a 	mov	r8,r2
   4cafc:	d8800617 	ldw	r2,24(sp)
   4cb00:	0082370e 	bge	zero,r2,4d3e0 <_dtoa_r+0x1478>
   4cb04:	d9000717 	ldw	r4,28(sp)
   4cb08:	0025883a 	mov	r18,zero
   4cb0c:	20af883a 	add	r23,r4,r2
   4cb10:	01800044 	movi	r6,1
   4cb14:	800b883a 	mov	r5,r16
   4cb18:	e009883a 	mov	r4,fp
   4cb1c:	da001715 	stw	r8,92(sp)
   4cb20:	004f2080 	call	4f208 <__lshift>
   4cb24:	a80b883a 	mov	r5,r21
   4cb28:	1009883a 	mov	r4,r2
   4cb2c:	d8800915 	stw	r2,36(sp)
   4cb30:	004f3500 	call	4f350 <__mcmp>
   4cb34:	da001717 	ldw	r8,92(sp)
   4cb38:	0081800e 	bge	zero,r2,4d13c <_dtoa_r+0x11d4>
   4cb3c:	b93fffc3 	ldbu	r4,-1(r23)
   4cb40:	b8bfffc4 	addi	r2,r23,-1
   4cb44:	1007883a 	mov	r3,r2
   4cb48:	01800e44 	movi	r6,57
   4cb4c:	d9c00717 	ldw	r7,28(sp)
   4cb50:	00000506 	br	4cb68 <_dtoa_r+0xc00>
   4cb54:	18ffffc4 	addi	r3,r3,-1
   4cb58:	11c12326 	beq	r2,r7,4cfe8 <_dtoa_r+0x1080>
   4cb5c:	19000003 	ldbu	r4,0(r3)
   4cb60:	102f883a 	mov	r23,r2
   4cb64:	10bfffc4 	addi	r2,r2,-1
   4cb68:	21403fcc 	andi	r5,r4,255
   4cb6c:	2940201c 	xori	r5,r5,128
   4cb70:	297fe004 	addi	r5,r5,-128
   4cb74:	29bff726 	beq	r5,r6,4cb54 <__alt_mem_epcs_flash_controller+0xfe03bb54>
   4cb78:	21000044 	addi	r4,r4,1
   4cb7c:	11000005 	stb	r4,0(r2)
   4cb80:	a80b883a 	mov	r5,r21
   4cb84:	e009883a 	mov	r4,fp
   4cb88:	004eb300 	call	4eb30 <_Bfree>
   4cb8c:	883ea026 	beq	r17,zero,4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4cb90:	90000426 	beq	r18,zero,4cba4 <_dtoa_r+0xc3c>
   4cb94:	94400326 	beq	r18,r17,4cba4 <_dtoa_r+0xc3c>
   4cb98:	900b883a 	mov	r5,r18
   4cb9c:	e009883a 	mov	r4,fp
   4cba0:	004eb300 	call	4eb30 <_Bfree>
   4cba4:	880b883a 	mov	r5,r17
   4cba8:	e009883a 	mov	r4,fp
   4cbac:	004eb300 	call	4eb30 <_Bfree>
   4cbb0:	003e9706 	br	4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4cbb4:	01800044 	movi	r6,1
   4cbb8:	d9800e15 	stw	r6,56(sp)
   4cbbc:	003d9606 	br	4c218 <__alt_mem_epcs_flash_controller+0xfe03b218>
   4cbc0:	d8800817 	ldw	r2,32(sp)
   4cbc4:	d8c00517 	ldw	r3,20(sp)
   4cbc8:	d8000d15 	stw	zero,52(sp)
   4cbcc:	10c5c83a 	sub	r2,r2,r3
   4cbd0:	00c9c83a 	sub	r4,zero,r3
   4cbd4:	d8800815 	stw	r2,32(sp)
   4cbd8:	d9000a15 	stw	r4,40(sp)
   4cbdc:	003d9706 	br	4c23c <__alt_mem_epcs_flash_controller+0xfe03b23c>
   4cbe0:	05adc83a 	sub	r22,zero,r22
   4cbe4:	dd800815 	stw	r22,32(sp)
   4cbe8:	002d883a 	mov	r22,zero
   4cbec:	003d8e06 	br	4c228 <__alt_mem_epcs_flash_controller+0xfe03b228>
   4cbf0:	d9000517 	ldw	r4,20(sp)
   4cbf4:	0044ef40 	call	44ef4 <__floatsidf>
   4cbf8:	100d883a 	mov	r6,r2
   4cbfc:	180f883a 	mov	r7,r3
   4cc00:	a009883a 	mov	r4,r20
   4cc04:	880b883a 	mov	r5,r17
   4cc08:	0053b100 	call	53b10 <__eqdf2>
   4cc0c:	103d7126 	beq	r2,zero,4c1d4 <__alt_mem_epcs_flash_controller+0xfe03b1d4>
   4cc10:	d9c00517 	ldw	r7,20(sp)
   4cc14:	39ffffc4 	addi	r7,r7,-1
   4cc18:	d9c00515 	stw	r7,20(sp)
   4cc1c:	003d6d06 	br	4c1d4 <__alt_mem_epcs_flash_controller+0xfe03b1d4>
   4cc20:	dd400a17 	ldw	r21,40(sp)
   4cc24:	dd000817 	ldw	r20,32(sp)
   4cc28:	0023883a 	mov	r17,zero
   4cc2c:	003f4806 	br	4c950 <__alt_mem_epcs_flash_controller+0xfe03b950>
   4cc30:	10e3c83a 	sub	r17,r2,r3
   4cc34:	9448983a 	sll	r4,r18,r17
   4cc38:	003d3206 	br	4c104 <__alt_mem_epcs_flash_controller+0xfe03b104>
   4cc3c:	d8000e15 	stw	zero,56(sp)
   4cc40:	003d7506 	br	4c218 <__alt_mem_epcs_flash_controller+0xfe03b218>
   4cc44:	b005883a 	mov	r2,r22
   4cc48:	003f4506 	br	4c960 <__alt_mem_epcs_flash_controller+0xfe03b960>
   4cc4c:	dc000915 	stw	r16,36(sp)
   4cc50:	d9800a17 	ldw	r6,40(sp)
   4cc54:	d9400917 	ldw	r5,36(sp)
   4cc58:	e009883a 	mov	r4,fp
   4cc5c:	004f0c80 	call	4f0c8 <__pow5mult>
   4cc60:	1021883a 	mov	r16,r2
   4cc64:	003f5a06 	br	4c9d0 <__alt_mem_epcs_flash_controller+0xfe03b9d0>
   4cc68:	01c00044 	movi	r7,1
   4cc6c:	d9c00b15 	stw	r7,44(sp)
   4cc70:	d8802217 	ldw	r2,136(sp)
   4cc74:	0081280e 	bge	zero,r2,4d118 <_dtoa_r+0x11b0>
   4cc78:	100d883a 	mov	r6,r2
   4cc7c:	1021883a 	mov	r16,r2
   4cc80:	d8800c15 	stw	r2,48(sp)
   4cc84:	d8800615 	stw	r2,24(sp)
   4cc88:	003d8806 	br	4c2ac <__alt_mem_epcs_flash_controller+0xfe03b2ac>
   4cc8c:	d8800617 	ldw	r2,24(sp)
   4cc90:	00be9b16 	blt	zero,r2,4c700 <__alt_mem_epcs_flash_controller+0xfe03b700>
   4cc94:	10010f1e 	bne	r2,zero,4d0d4 <_dtoa_r+0x116c>
   4cc98:	880b883a 	mov	r5,r17
   4cc9c:	000d883a 	mov	r6,zero
   4cca0:	01d00534 	movhi	r7,16404
   4cca4:	8009883a 	mov	r4,r16
   4cca8:	0043ee00 	call	43ee0 <__muldf3>
   4ccac:	900d883a 	mov	r6,r18
   4ccb0:	980f883a 	mov	r7,r19
   4ccb4:	1009883a 	mov	r4,r2
   4ccb8:	180b883a 	mov	r5,r3
   4ccbc:	0043d100 	call	43d10 <__gedf2>
   4ccc0:	002b883a 	mov	r21,zero
   4ccc4:	0023883a 	mov	r17,zero
   4ccc8:	1000bf16 	blt	r2,zero,4cfc8 <_dtoa_r+0x1060>
   4cccc:	d9802217 	ldw	r6,136(sp)
   4ccd0:	ddc00717 	ldw	r23,28(sp)
   4ccd4:	018c303a 	nor	r6,zero,r6
   4ccd8:	d9800515 	stw	r6,20(sp)
   4ccdc:	a80b883a 	mov	r5,r21
   4cce0:	e009883a 	mov	r4,fp
   4cce4:	004eb300 	call	4eb30 <_Bfree>
   4cce8:	883e4926 	beq	r17,zero,4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4ccec:	003fad06 	br	4cba4 <__alt_mem_epcs_flash_controller+0xfe03bba4>
   4ccf0:	d9c01117 	ldw	r7,68(sp)
   4ccf4:	3801bc26 	beq	r7,zero,4d3e8 <_dtoa_r+0x1480>
   4ccf8:	10810cc4 	addi	r2,r2,1075
   4ccfc:	dd400a17 	ldw	r21,40(sp)
   4cd00:	dd000817 	ldw	r20,32(sp)
   4cd04:	003f0a06 	br	4c930 <__alt_mem_epcs_flash_controller+0xfe03b930>
   4cd08:	00800704 	movi	r2,28
   4cd0c:	d9000817 	ldw	r4,32(sp)
   4cd10:	a0a9883a 	add	r20,r20,r2
   4cd14:	b0ad883a 	add	r22,r22,r2
   4cd18:	2089883a 	add	r4,r4,r2
   4cd1c:	d9000815 	stw	r4,32(sp)
   4cd20:	003f5106 	br	4ca68 <__alt_mem_epcs_flash_controller+0xfe03ba68>
   4cd24:	d8c00317 	ldw	r3,12(sp)
   4cd28:	b8c1fc0e 	bge	r23,r3,4d51c <_dtoa_r+0x15b4>
   4cd2c:	0027883a 	mov	r19,zero
   4cd30:	b805883a 	mov	r2,r23
   4cd34:	003f3e06 	br	4ca30 <__alt_mem_epcs_flash_controller+0xfe03ba30>
   4cd38:	880b883a 	mov	r5,r17
   4cd3c:	e009883a 	mov	r4,fp
   4cd40:	000f883a 	mov	r7,zero
   4cd44:	01800284 	movi	r6,10
   4cd48:	004eb580 	call	4eb58 <__multadd>
   4cd4c:	d9000c17 	ldw	r4,48(sp)
   4cd50:	1023883a 	mov	r17,r2
   4cd54:	0102040e 	bge	zero,r4,4d568 <_dtoa_r+0x1600>
   4cd58:	d9000615 	stw	r4,24(sp)
   4cd5c:	0500050e 	bge	zero,r20,4cd74 <_dtoa_r+0xe0c>
   4cd60:	880b883a 	mov	r5,r17
   4cd64:	a00d883a 	mov	r6,r20
   4cd68:	e009883a 	mov	r4,fp
   4cd6c:	004f2080 	call	4f208 <__lshift>
   4cd70:	1023883a 	mov	r17,r2
   4cd74:	9801241e 	bne	r19,zero,4d208 <_dtoa_r+0x12a0>
   4cd78:	8829883a 	mov	r20,r17
   4cd7c:	d9000617 	ldw	r4,24(sp)
   4cd80:	dcc00717 	ldw	r19,28(sp)
   4cd84:	9480004c 	andi	r18,r18,1
   4cd88:	20bfffc4 	addi	r2,r4,-1
   4cd8c:	9885883a 	add	r2,r19,r2
   4cd90:	d8800415 	stw	r2,16(sp)
   4cd94:	dc800615 	stw	r18,24(sp)
   4cd98:	a80b883a 	mov	r5,r21
   4cd9c:	8009883a 	mov	r4,r16
   4cda0:	004bd680 	call	4bd68 <quorem>
   4cda4:	880b883a 	mov	r5,r17
   4cda8:	8009883a 	mov	r4,r16
   4cdac:	102f883a 	mov	r23,r2
   4cdb0:	004f3500 	call	4f350 <__mcmp>
   4cdb4:	a80b883a 	mov	r5,r21
   4cdb8:	a00d883a 	mov	r6,r20
   4cdbc:	e009883a 	mov	r4,fp
   4cdc0:	102d883a 	mov	r22,r2
   4cdc4:	004f3b00 	call	4f3b0 <__mdiff>
   4cdc8:	1007883a 	mov	r3,r2
   4cdcc:	10800317 	ldw	r2,12(r2)
   4cdd0:	bc800c04 	addi	r18,r23,48
   4cdd4:	180b883a 	mov	r5,r3
   4cdd8:	10004e1e 	bne	r2,zero,4cf14 <_dtoa_r+0xfac>
   4cddc:	8009883a 	mov	r4,r16
   4cde0:	d8c01615 	stw	r3,88(sp)
   4cde4:	004f3500 	call	4f350 <__mcmp>
   4cde8:	d8c01617 	ldw	r3,88(sp)
   4cdec:	e009883a 	mov	r4,fp
   4cdf0:	d8801615 	stw	r2,88(sp)
   4cdf4:	180b883a 	mov	r5,r3
   4cdf8:	004eb300 	call	4eb30 <_Bfree>
   4cdfc:	d8801617 	ldw	r2,88(sp)
   4ce00:	1000041e 	bne	r2,zero,4ce14 <_dtoa_r+0xeac>
   4ce04:	d9800317 	ldw	r6,12(sp)
   4ce08:	3000021e 	bne	r6,zero,4ce14 <_dtoa_r+0xeac>
   4ce0c:	d8c00617 	ldw	r3,24(sp)
   4ce10:	18003726 	beq	r3,zero,4cef0 <_dtoa_r+0xf88>
   4ce14:	b0002016 	blt	r22,zero,4ce98 <_dtoa_r+0xf30>
   4ce18:	b000041e 	bne	r22,zero,4ce2c <_dtoa_r+0xec4>
   4ce1c:	d9000317 	ldw	r4,12(sp)
   4ce20:	2000021e 	bne	r4,zero,4ce2c <_dtoa_r+0xec4>
   4ce24:	d8c00617 	ldw	r3,24(sp)
   4ce28:	18001b26 	beq	r3,zero,4ce98 <_dtoa_r+0xf30>
   4ce2c:	00810716 	blt	zero,r2,4d24c <_dtoa_r+0x12e4>
   4ce30:	d8c00417 	ldw	r3,16(sp)
   4ce34:	9d800044 	addi	r22,r19,1
   4ce38:	9c800005 	stb	r18,0(r19)
   4ce3c:	b02f883a 	mov	r23,r22
   4ce40:	98c10626 	beq	r19,r3,4d25c <_dtoa_r+0x12f4>
   4ce44:	800b883a 	mov	r5,r16
   4ce48:	000f883a 	mov	r7,zero
   4ce4c:	01800284 	movi	r6,10
   4ce50:	e009883a 	mov	r4,fp
   4ce54:	004eb580 	call	4eb58 <__multadd>
   4ce58:	1021883a 	mov	r16,r2
   4ce5c:	000f883a 	mov	r7,zero
   4ce60:	01800284 	movi	r6,10
   4ce64:	880b883a 	mov	r5,r17
   4ce68:	e009883a 	mov	r4,fp
   4ce6c:	8d002526 	beq	r17,r20,4cf04 <_dtoa_r+0xf9c>
   4ce70:	004eb580 	call	4eb58 <__multadd>
   4ce74:	a00b883a 	mov	r5,r20
   4ce78:	000f883a 	mov	r7,zero
   4ce7c:	01800284 	movi	r6,10
   4ce80:	e009883a 	mov	r4,fp
   4ce84:	1023883a 	mov	r17,r2
   4ce88:	004eb580 	call	4eb58 <__multadd>
   4ce8c:	1029883a 	mov	r20,r2
   4ce90:	b027883a 	mov	r19,r22
   4ce94:	003fc006 	br	4cd98 <__alt_mem_epcs_flash_controller+0xfe03bd98>
   4ce98:	9011883a 	mov	r8,r18
   4ce9c:	00800e0e 	bge	zero,r2,4ced8 <_dtoa_r+0xf70>
   4cea0:	800b883a 	mov	r5,r16
   4cea4:	01800044 	movi	r6,1
   4cea8:	e009883a 	mov	r4,fp
   4ceac:	da001715 	stw	r8,92(sp)
   4ceb0:	004f2080 	call	4f208 <__lshift>
   4ceb4:	a80b883a 	mov	r5,r21
   4ceb8:	1009883a 	mov	r4,r2
   4cebc:	1021883a 	mov	r16,r2
   4cec0:	004f3500 	call	4f350 <__mcmp>
   4cec4:	da001717 	ldw	r8,92(sp)
   4cec8:	0081960e 	bge	zero,r2,4d524 <_dtoa_r+0x15bc>
   4cecc:	00800e44 	movi	r2,57
   4ced0:	40817026 	beq	r8,r2,4d494 <_dtoa_r+0x152c>
   4ced4:	ba000c44 	addi	r8,r23,49
   4ced8:	8825883a 	mov	r18,r17
   4cedc:	9dc00044 	addi	r23,r19,1
   4cee0:	9a000005 	stb	r8,0(r19)
   4cee4:	a023883a 	mov	r17,r20
   4cee8:	dc000915 	stw	r16,36(sp)
   4ceec:	003f2406 	br	4cb80 <__alt_mem_epcs_flash_controller+0xfe03bb80>
   4cef0:	00800e44 	movi	r2,57
   4cef4:	9011883a 	mov	r8,r18
   4cef8:	90816626 	beq	r18,r2,4d494 <_dtoa_r+0x152c>
   4cefc:	05bff516 	blt	zero,r22,4ced4 <__alt_mem_epcs_flash_controller+0xfe03bed4>
   4cf00:	003ff506 	br	4ced8 <__alt_mem_epcs_flash_controller+0xfe03bed8>
   4cf04:	004eb580 	call	4eb58 <__multadd>
   4cf08:	1023883a 	mov	r17,r2
   4cf0c:	1029883a 	mov	r20,r2
   4cf10:	003fdf06 	br	4ce90 <__alt_mem_epcs_flash_controller+0xfe03be90>
   4cf14:	e009883a 	mov	r4,fp
   4cf18:	004eb300 	call	4eb30 <_Bfree>
   4cf1c:	00800044 	movi	r2,1
   4cf20:	003fbc06 	br	4ce14 <__alt_mem_epcs_flash_controller+0xfe03be14>
   4cf24:	a80b883a 	mov	r5,r21
   4cf28:	8009883a 	mov	r4,r16
   4cf2c:	004f3500 	call	4f350 <__mcmp>
   4cf30:	103edb0e 	bge	r2,zero,4caa0 <__alt_mem_epcs_flash_controller+0xfe03baa0>
   4cf34:	800b883a 	mov	r5,r16
   4cf38:	000f883a 	mov	r7,zero
   4cf3c:	01800284 	movi	r6,10
   4cf40:	e009883a 	mov	r4,fp
   4cf44:	004eb580 	call	4eb58 <__multadd>
   4cf48:	1021883a 	mov	r16,r2
   4cf4c:	d8800517 	ldw	r2,20(sp)
   4cf50:	d8c00b17 	ldw	r3,44(sp)
   4cf54:	10bfffc4 	addi	r2,r2,-1
   4cf58:	d8800515 	stw	r2,20(sp)
   4cf5c:	183f761e 	bne	r3,zero,4cd38 <__alt_mem_epcs_flash_controller+0xfe03bd38>
   4cf60:	d9000c17 	ldw	r4,48(sp)
   4cf64:	0101730e 	bge	zero,r4,4d534 <_dtoa_r+0x15cc>
   4cf68:	d9000615 	stw	r4,24(sp)
   4cf6c:	003ed006 	br	4cab0 <__alt_mem_epcs_flash_controller+0xfe03bab0>
   4cf70:	00800084 	movi	r2,2
   4cf74:	3081861e 	bne	r6,r2,4d590 <_dtoa_r+0x1628>
   4cf78:	d8000b15 	stw	zero,44(sp)
   4cf7c:	003f3c06 	br	4cc70 <__alt_mem_epcs_flash_controller+0xfe03bc70>
   4cf80:	dc000917 	ldw	r16,36(sp)
   4cf84:	003e9206 	br	4c9d0 <__alt_mem_epcs_flash_controller+0xfe03b9d0>
   4cf88:	d9c00317 	ldw	r7,12(sp)
   4cf8c:	00800084 	movi	r2,2
   4cf90:	11fec50e 	bge	r2,r7,4caa8 <__alt_mem_epcs_flash_controller+0xfe03baa8>
   4cf94:	d9000617 	ldw	r4,24(sp)
   4cf98:	20013c1e 	bne	r4,zero,4d48c <_dtoa_r+0x1524>
   4cf9c:	a80b883a 	mov	r5,r21
   4cfa0:	000f883a 	mov	r7,zero
   4cfa4:	01800144 	movi	r6,5
   4cfa8:	e009883a 	mov	r4,fp
   4cfac:	004eb580 	call	4eb58 <__multadd>
   4cfb0:	100b883a 	mov	r5,r2
   4cfb4:	8009883a 	mov	r4,r16
   4cfb8:	102b883a 	mov	r21,r2
   4cfbc:	004f3500 	call	4f350 <__mcmp>
   4cfc0:	dc000915 	stw	r16,36(sp)
   4cfc4:	00bf410e 	bge	zero,r2,4cccc <__alt_mem_epcs_flash_controller+0xfe03bccc>
   4cfc8:	d9c00717 	ldw	r7,28(sp)
   4cfcc:	00800c44 	movi	r2,49
   4cfd0:	38800005 	stb	r2,0(r7)
   4cfd4:	d8800517 	ldw	r2,20(sp)
   4cfd8:	3dc00044 	addi	r23,r7,1
   4cfdc:	10800044 	addi	r2,r2,1
   4cfe0:	d8800515 	stw	r2,20(sp)
   4cfe4:	003f3d06 	br	4ccdc <__alt_mem_epcs_flash_controller+0xfe03bcdc>
   4cfe8:	d9800517 	ldw	r6,20(sp)
   4cfec:	d9c00717 	ldw	r7,28(sp)
   4cff0:	00800c44 	movi	r2,49
   4cff4:	31800044 	addi	r6,r6,1
   4cff8:	d9800515 	stw	r6,20(sp)
   4cffc:	38800005 	stb	r2,0(r7)
   4d000:	003edf06 	br	4cb80 <__alt_mem_epcs_flash_controller+0xfe03bb80>
   4d004:	d8000b15 	stw	zero,44(sp)
   4d008:	003c9f06 	br	4c288 <__alt_mem_epcs_flash_controller+0xfe03b288>
   4d00c:	903e7e1e 	bne	r18,zero,4ca08 <__alt_mem_epcs_flash_controller+0xfe03ba08>
   4d010:	00800434 	movhi	r2,16
   4d014:	10bfffc4 	addi	r2,r2,-1
   4d018:	9884703a 	and	r2,r19,r2
   4d01c:	1000ea1e 	bne	r2,zero,4d3c8 <_dtoa_r+0x1460>
   4d020:	9cdffc2c 	andhi	r19,r19,32752
   4d024:	9800e826 	beq	r19,zero,4d3c8 <_dtoa_r+0x1460>
   4d028:	d9c00817 	ldw	r7,32(sp)
   4d02c:	b5800044 	addi	r22,r22,1
   4d030:	04c00044 	movi	r19,1
   4d034:	39c00044 	addi	r7,r7,1
   4d038:	d9c00815 	stw	r7,32(sp)
   4d03c:	d8800d17 	ldw	r2,52(sp)
   4d040:	103e721e 	bne	r2,zero,4ca0c <__alt_mem_epcs_flash_controller+0xfe03ba0c>
   4d044:	00800044 	movi	r2,1
   4d048:	003e7906 	br	4ca30 <__alt_mem_epcs_flash_controller+0xfe03ba30>
   4d04c:	8009883a 	mov	r4,r16
   4d050:	0044ef40 	call	44ef4 <__floatsidf>
   4d054:	d9800f17 	ldw	r6,60(sp)
   4d058:	d9c01017 	ldw	r7,64(sp)
   4d05c:	1009883a 	mov	r4,r2
   4d060:	180b883a 	mov	r5,r3
   4d064:	0043ee00 	call	43ee0 <__muldf3>
   4d068:	000d883a 	mov	r6,zero
   4d06c:	01d00734 	movhi	r7,16412
   4d070:	1009883a 	mov	r4,r2
   4d074:	180b883a 	mov	r5,r3
   4d078:	0042b7c0 	call	42b7c <__adddf3>
   4d07c:	047f3034 	movhi	r17,64704
   4d080:	1021883a 	mov	r16,r2
   4d084:	1c63883a 	add	r17,r3,r17
   4d088:	d9000f17 	ldw	r4,60(sp)
   4d08c:	d9401017 	ldw	r5,64(sp)
   4d090:	000d883a 	mov	r6,zero
   4d094:	01d00534 	movhi	r7,16404
   4d098:	00445f80 	call	445f8 <__subdf3>
   4d09c:	800d883a 	mov	r6,r16
   4d0a0:	880f883a 	mov	r7,r17
   4d0a4:	1009883a 	mov	r4,r2
   4d0a8:	180b883a 	mov	r5,r3
   4d0ac:	102b883a 	mov	r21,r2
   4d0b0:	1829883a 	mov	r20,r3
   4d0b4:	0043d100 	call	43d10 <__gedf2>
   4d0b8:	00806c16 	blt	zero,r2,4d26c <_dtoa_r+0x1304>
   4d0bc:	89e0003c 	xorhi	r7,r17,32768
   4d0c0:	800d883a 	mov	r6,r16
   4d0c4:	a809883a 	mov	r4,r21
   4d0c8:	a00b883a 	mov	r5,r20
   4d0cc:	0043dec0 	call	43dec <__ledf2>
   4d0d0:	103d7e0e 	bge	r2,zero,4c6cc <__alt_mem_epcs_flash_controller+0xfe03b6cc>
   4d0d4:	002b883a 	mov	r21,zero
   4d0d8:	0023883a 	mov	r17,zero
   4d0dc:	003efb06 	br	4cccc <__alt_mem_epcs_flash_controller+0xfe03bccc>
   4d0e0:	d8800717 	ldw	r2,28(sp)
   4d0e4:	003bd006 	br	4c028 <__alt_mem_epcs_flash_controller+0xfe03b028>
   4d0e8:	d9000a17 	ldw	r4,40(sp)
   4d0ec:	d9800d17 	ldw	r6,52(sp)
   4d0f0:	dd400a15 	stw	r21,40(sp)
   4d0f4:	a905c83a 	sub	r2,r21,r4
   4d0f8:	308d883a 	add	r6,r6,r2
   4d0fc:	d9800d15 	stw	r6,52(sp)
   4d100:	002b883a 	mov	r21,zero
   4d104:	003e0606 	br	4c920 <__alt_mem_epcs_flash_controller+0xfe03b920>
   4d108:	9023883a 	mov	r17,r18
   4d10c:	9829883a 	mov	r20,r19
   4d110:	04000084 	movi	r16,2
   4d114:	003c9206 	br	4c360 <__alt_mem_epcs_flash_controller+0xfe03b360>
   4d118:	04000044 	movi	r16,1
   4d11c:	dc000c15 	stw	r16,48(sp)
   4d120:	dc000615 	stw	r16,24(sp)
   4d124:	dc002215 	stw	r16,136(sp)
   4d128:	e0001115 	stw	zero,68(fp)
   4d12c:	000b883a 	mov	r5,zero
   4d130:	003c6906 	br	4c2d8 <__alt_mem_epcs_flash_controller+0xfe03b2d8>
   4d134:	3021883a 	mov	r16,r6
   4d138:	003ffb06 	br	4d128 <__alt_mem_epcs_flash_controller+0xfe03c128>
   4d13c:	1000021e 	bne	r2,zero,4d148 <_dtoa_r+0x11e0>
   4d140:	4200004c 	andi	r8,r8,1
   4d144:	403e7d1e 	bne	r8,zero,4cb3c <__alt_mem_epcs_flash_controller+0xfe03bb3c>
   4d148:	01000c04 	movi	r4,48
   4d14c:	00000106 	br	4d154 <_dtoa_r+0x11ec>
   4d150:	102f883a 	mov	r23,r2
   4d154:	b8bfffc4 	addi	r2,r23,-1
   4d158:	10c00007 	ldb	r3,0(r2)
   4d15c:	193ffc26 	beq	r3,r4,4d150 <__alt_mem_epcs_flash_controller+0xfe03c150>
   4d160:	003e8706 	br	4cb80 <__alt_mem_epcs_flash_controller+0xfe03bb80>
   4d164:	d8800517 	ldw	r2,20(sp)
   4d168:	00a3c83a 	sub	r17,zero,r2
   4d16c:	8800a426 	beq	r17,zero,4d400 <_dtoa_r+0x1498>
   4d170:	888003cc 	andi	r2,r17,15
   4d174:	100490fa 	slli	r2,r2,3
   4d178:	00c001b4 	movhi	r3,6
   4d17c:	18f5a804 	addi	r3,r3,-10592
   4d180:	1885883a 	add	r2,r3,r2
   4d184:	11800017 	ldw	r6,0(r2)
   4d188:	11c00117 	ldw	r7,4(r2)
   4d18c:	9009883a 	mov	r4,r18
   4d190:	980b883a 	mov	r5,r19
   4d194:	8823d13a 	srai	r17,r17,4
   4d198:	0043ee00 	call	43ee0 <__muldf3>
   4d19c:	d8800f15 	stw	r2,60(sp)
   4d1a0:	d8c01015 	stw	r3,64(sp)
   4d1a4:	8800e826 	beq	r17,zero,4d548 <_dtoa_r+0x15e0>
   4d1a8:	050001b4 	movhi	r20,6
   4d1ac:	a5359e04 	addi	r20,r20,-10632
   4d1b0:	04000084 	movi	r16,2
   4d1b4:	8980004c 	andi	r6,r17,1
   4d1b8:	1009883a 	mov	r4,r2
   4d1bc:	8823d07a 	srai	r17,r17,1
   4d1c0:	180b883a 	mov	r5,r3
   4d1c4:	30000426 	beq	r6,zero,4d1d8 <_dtoa_r+0x1270>
   4d1c8:	a1800017 	ldw	r6,0(r20)
   4d1cc:	a1c00117 	ldw	r7,4(r20)
   4d1d0:	84000044 	addi	r16,r16,1
   4d1d4:	0043ee00 	call	43ee0 <__muldf3>
   4d1d8:	a5000204 	addi	r20,r20,8
   4d1dc:	883ff51e 	bne	r17,zero,4d1b4 <__alt_mem_epcs_flash_controller+0xfe03c1b4>
   4d1e0:	d8800f15 	stw	r2,60(sp)
   4d1e4:	d8c01015 	stw	r3,64(sp)
   4d1e8:	003c7606 	br	4c3c4 <__alt_mem_epcs_flash_controller+0xfe03b3c4>
   4d1ec:	00c00c04 	movi	r3,48
   4d1f0:	10c00005 	stb	r3,0(r2)
   4d1f4:	d8c00517 	ldw	r3,20(sp)
   4d1f8:	bd3fffc3 	ldbu	r20,-1(r23)
   4d1fc:	18c00044 	addi	r3,r3,1
   4d200:	d8c00515 	stw	r3,20(sp)
   4d204:	003db906 	br	4c8ec <__alt_mem_epcs_flash_controller+0xfe03b8ec>
   4d208:	89400117 	ldw	r5,4(r17)
   4d20c:	e009883a 	mov	r4,fp
   4d210:	004ea880 	call	4ea88 <_Balloc>
   4d214:	89800417 	ldw	r6,16(r17)
   4d218:	89400304 	addi	r5,r17,12
   4d21c:	11000304 	addi	r4,r2,12
   4d220:	31800084 	addi	r6,r6,2
   4d224:	318d883a 	add	r6,r6,r6
   4d228:	318d883a 	add	r6,r6,r6
   4d22c:	1027883a 	mov	r19,r2
   4d230:	0045c980 	call	45c98 <memcpy>
   4d234:	01800044 	movi	r6,1
   4d238:	980b883a 	mov	r5,r19
   4d23c:	e009883a 	mov	r4,fp
   4d240:	004f2080 	call	4f208 <__lshift>
   4d244:	1029883a 	mov	r20,r2
   4d248:	003ecc06 	br	4cd7c <__alt_mem_epcs_flash_controller+0xfe03bd7c>
   4d24c:	00800e44 	movi	r2,57
   4d250:	90809026 	beq	r18,r2,4d494 <_dtoa_r+0x152c>
   4d254:	92000044 	addi	r8,r18,1
   4d258:	003f1f06 	br	4ced8 <__alt_mem_epcs_flash_controller+0xfe03bed8>
   4d25c:	9011883a 	mov	r8,r18
   4d260:	8825883a 	mov	r18,r17
   4d264:	a023883a 	mov	r17,r20
   4d268:	003e2906 	br	4cb10 <__alt_mem_epcs_flash_controller+0xfe03bb10>
   4d26c:	002b883a 	mov	r21,zero
   4d270:	0023883a 	mov	r17,zero
   4d274:	003f5406 	br	4cfc8 <__alt_mem_epcs_flash_controller+0xfe03bfc8>
   4d278:	61bfffc4 	addi	r6,r12,-1
   4d27c:	300490fa 	slli	r2,r6,3
   4d280:	00c001b4 	movhi	r3,6
   4d284:	18f5a804 	addi	r3,r3,-10592
   4d288:	1885883a 	add	r2,r3,r2
   4d28c:	11000017 	ldw	r4,0(r2)
   4d290:	11400117 	ldw	r5,4(r2)
   4d294:	d8800717 	ldw	r2,28(sp)
   4d298:	880f883a 	mov	r7,r17
   4d29c:	d9801215 	stw	r6,72(sp)
   4d2a0:	800d883a 	mov	r6,r16
   4d2a4:	db001615 	stw	r12,88(sp)
   4d2a8:	15c00044 	addi	r23,r2,1
   4d2ac:	0043ee00 	call	43ee0 <__muldf3>
   4d2b0:	d9401017 	ldw	r5,64(sp)
   4d2b4:	d9000f17 	ldw	r4,60(sp)
   4d2b8:	d8c01515 	stw	r3,84(sp)
   4d2bc:	d8801415 	stw	r2,80(sp)
   4d2c0:	0053b980 	call	53b98 <__fixdfsi>
   4d2c4:	1009883a 	mov	r4,r2
   4d2c8:	1021883a 	mov	r16,r2
   4d2cc:	0044ef40 	call	44ef4 <__floatsidf>
   4d2d0:	d9000f17 	ldw	r4,60(sp)
   4d2d4:	d9401017 	ldw	r5,64(sp)
   4d2d8:	100d883a 	mov	r6,r2
   4d2dc:	180f883a 	mov	r7,r3
   4d2e0:	00445f80 	call	445f8 <__subdf3>
   4d2e4:	1829883a 	mov	r20,r3
   4d2e8:	d8c00717 	ldw	r3,28(sp)
   4d2ec:	84000c04 	addi	r16,r16,48
   4d2f0:	1023883a 	mov	r17,r2
   4d2f4:	1c000005 	stb	r16,0(r3)
   4d2f8:	db001617 	ldw	r12,88(sp)
   4d2fc:	00800044 	movi	r2,1
   4d300:	60802226 	beq	r12,r2,4d38c <_dtoa_r+0x1424>
   4d304:	d9c00717 	ldw	r7,28(sp)
   4d308:	8805883a 	mov	r2,r17
   4d30c:	b82b883a 	mov	r21,r23
   4d310:	3b19883a 	add	r12,r7,r12
   4d314:	6023883a 	mov	r17,r12
   4d318:	a007883a 	mov	r3,r20
   4d31c:	dc800f15 	stw	r18,60(sp)
   4d320:	000d883a 	mov	r6,zero
   4d324:	01d00934 	movhi	r7,16420
   4d328:	1009883a 	mov	r4,r2
   4d32c:	180b883a 	mov	r5,r3
   4d330:	0043ee00 	call	43ee0 <__muldf3>
   4d334:	180b883a 	mov	r5,r3
   4d338:	1009883a 	mov	r4,r2
   4d33c:	1829883a 	mov	r20,r3
   4d340:	1025883a 	mov	r18,r2
   4d344:	0053b980 	call	53b98 <__fixdfsi>
   4d348:	1009883a 	mov	r4,r2
   4d34c:	1021883a 	mov	r16,r2
   4d350:	0044ef40 	call	44ef4 <__floatsidf>
   4d354:	100d883a 	mov	r6,r2
   4d358:	180f883a 	mov	r7,r3
   4d35c:	9009883a 	mov	r4,r18
   4d360:	a00b883a 	mov	r5,r20
   4d364:	84000c04 	addi	r16,r16,48
   4d368:	00445f80 	call	445f8 <__subdf3>
   4d36c:	ad400044 	addi	r21,r21,1
   4d370:	ac3fffc5 	stb	r16,-1(r21)
   4d374:	ac7fea1e 	bne	r21,r17,4d320 <__alt_mem_epcs_flash_controller+0xfe03c320>
   4d378:	1023883a 	mov	r17,r2
   4d37c:	d8801217 	ldw	r2,72(sp)
   4d380:	dc800f17 	ldw	r18,60(sp)
   4d384:	1829883a 	mov	r20,r3
   4d388:	b8af883a 	add	r23,r23,r2
   4d38c:	d9001417 	ldw	r4,80(sp)
   4d390:	d9401517 	ldw	r5,84(sp)
   4d394:	000d883a 	mov	r6,zero
   4d398:	01cff834 	movhi	r7,16352
   4d39c:	0042b7c0 	call	42b7c <__adddf3>
   4d3a0:	880d883a 	mov	r6,r17
   4d3a4:	a00f883a 	mov	r7,r20
   4d3a8:	1009883a 	mov	r4,r2
   4d3ac:	180b883a 	mov	r5,r3
   4d3b0:	0043dec0 	call	43dec <__ledf2>
   4d3b4:	10003e0e 	bge	r2,zero,4d4b0 <_dtoa_r+0x1548>
   4d3b8:	d9001317 	ldw	r4,76(sp)
   4d3bc:	bd3fffc3 	ldbu	r20,-1(r23)
   4d3c0:	d9000515 	stw	r4,20(sp)
   4d3c4:	003d3b06 	br	4c8b4 <__alt_mem_epcs_flash_controller+0xfe03b8b4>
   4d3c8:	0027883a 	mov	r19,zero
   4d3cc:	003f1b06 	br	4d03c <__alt_mem_epcs_flash_controller+0xfe03c03c>
   4d3d0:	d8800817 	ldw	r2,32(sp)
   4d3d4:	11e9c83a 	sub	r20,r2,r7
   4d3d8:	0005883a 	mov	r2,zero
   4d3dc:	003d5406 	br	4c930 <__alt_mem_epcs_flash_controller+0xfe03b930>
   4d3e0:	00800044 	movi	r2,1
   4d3e4:	003dc706 	br	4cb04 <__alt_mem_epcs_flash_controller+0xfe03bb04>
   4d3e8:	d8c00217 	ldw	r3,8(sp)
   4d3ec:	00800d84 	movi	r2,54
   4d3f0:	dd400a17 	ldw	r21,40(sp)
   4d3f4:	10c5c83a 	sub	r2,r2,r3
   4d3f8:	dd000817 	ldw	r20,32(sp)
   4d3fc:	003d4c06 	br	4c930 <__alt_mem_epcs_flash_controller+0xfe03b930>
   4d400:	dc800f15 	stw	r18,60(sp)
   4d404:	dcc01015 	stw	r19,64(sp)
   4d408:	04000084 	movi	r16,2
   4d40c:	003bed06 	br	4c3c4 <__alt_mem_epcs_flash_controller+0xfe03b3c4>
   4d410:	d9000617 	ldw	r4,24(sp)
   4d414:	203f0d26 	beq	r4,zero,4d04c <__alt_mem_epcs_flash_controller+0xfe03c04c>
   4d418:	d9800c17 	ldw	r6,48(sp)
   4d41c:	01bcab0e 	bge	zero,r6,4c6cc <__alt_mem_epcs_flash_controller+0xfe03b6cc>
   4d420:	d9401017 	ldw	r5,64(sp)
   4d424:	d9000f17 	ldw	r4,60(sp)
   4d428:	000d883a 	mov	r6,zero
   4d42c:	01d00934 	movhi	r7,16420
   4d430:	0043ee00 	call	43ee0 <__muldf3>
   4d434:	81000044 	addi	r4,r16,1
   4d438:	d8800f15 	stw	r2,60(sp)
   4d43c:	d8c01015 	stw	r3,64(sp)
   4d440:	0044ef40 	call	44ef4 <__floatsidf>
   4d444:	d9800f17 	ldw	r6,60(sp)
   4d448:	d9c01017 	ldw	r7,64(sp)
   4d44c:	1009883a 	mov	r4,r2
   4d450:	180b883a 	mov	r5,r3
   4d454:	0043ee00 	call	43ee0 <__muldf3>
   4d458:	01d00734 	movhi	r7,16412
   4d45c:	000d883a 	mov	r6,zero
   4d460:	1009883a 	mov	r4,r2
   4d464:	180b883a 	mov	r5,r3
   4d468:	0042b7c0 	call	42b7c <__adddf3>
   4d46c:	d9c00517 	ldw	r7,20(sp)
   4d470:	047f3034 	movhi	r17,64704
   4d474:	1021883a 	mov	r16,r2
   4d478:	39ffffc4 	addi	r7,r7,-1
   4d47c:	d9c01315 	stw	r7,76(sp)
   4d480:	1c63883a 	add	r17,r3,r17
   4d484:	db000c17 	ldw	r12,48(sp)
   4d488:	003bea06 	br	4c434 <__alt_mem_epcs_flash_controller+0xfe03b434>
   4d48c:	dc000915 	stw	r16,36(sp)
   4d490:	003e0e06 	br	4cccc <__alt_mem_epcs_flash_controller+0xfe03bccc>
   4d494:	01000e44 	movi	r4,57
   4d498:	8825883a 	mov	r18,r17
   4d49c:	9dc00044 	addi	r23,r19,1
   4d4a0:	99000005 	stb	r4,0(r19)
   4d4a4:	a023883a 	mov	r17,r20
   4d4a8:	dc000915 	stw	r16,36(sp)
   4d4ac:	003da406 	br	4cb40 <__alt_mem_epcs_flash_controller+0xfe03bb40>
   4d4b0:	d9801417 	ldw	r6,80(sp)
   4d4b4:	d9c01517 	ldw	r7,84(sp)
   4d4b8:	0009883a 	mov	r4,zero
   4d4bc:	014ff834 	movhi	r5,16352
   4d4c0:	00445f80 	call	445f8 <__subdf3>
   4d4c4:	880d883a 	mov	r6,r17
   4d4c8:	a00f883a 	mov	r7,r20
   4d4cc:	1009883a 	mov	r4,r2
   4d4d0:	180b883a 	mov	r5,r3
   4d4d4:	0043d100 	call	43d10 <__gedf2>
   4d4d8:	00bc7c0e 	bge	zero,r2,4c6cc <__alt_mem_epcs_flash_controller+0xfe03b6cc>
   4d4dc:	01000c04 	movi	r4,48
   4d4e0:	00000106 	br	4d4e8 <_dtoa_r+0x1580>
   4d4e4:	102f883a 	mov	r23,r2
   4d4e8:	b8bfffc4 	addi	r2,r23,-1
   4d4ec:	10c00007 	ldb	r3,0(r2)
   4d4f0:	193ffc26 	beq	r3,r4,4d4e4 <__alt_mem_epcs_flash_controller+0xfe03c4e4>
   4d4f4:	d9801317 	ldw	r6,76(sp)
   4d4f8:	d9800515 	stw	r6,20(sp)
   4d4fc:	003c4406 	br	4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4d500:	d9801317 	ldw	r6,76(sp)
   4d504:	d9800515 	stw	r6,20(sp)
   4d508:	003cea06 	br	4c8b4 <__alt_mem_epcs_flash_controller+0xfe03b8b4>
   4d50c:	dd800f17 	ldw	r22,60(sp)
   4d510:	dcc01017 	ldw	r19,64(sp)
   4d514:	dc801217 	ldw	r18,72(sp)
   4d518:	003c6c06 	br	4c6cc <__alt_mem_epcs_flash_controller+0xfe03b6cc>
   4d51c:	903e031e 	bne	r18,zero,4cd2c <__alt_mem_epcs_flash_controller+0xfe03bd2c>
   4d520:	003ebb06 	br	4d010 <__alt_mem_epcs_flash_controller+0xfe03c010>
   4d524:	103e6c1e 	bne	r2,zero,4ced8 <__alt_mem_epcs_flash_controller+0xfe03bed8>
   4d528:	4080004c 	andi	r2,r8,1
   4d52c:	103e6a26 	beq	r2,zero,4ced8 <__alt_mem_epcs_flash_controller+0xfe03bed8>
   4d530:	003e6606 	br	4cecc <__alt_mem_epcs_flash_controller+0xfe03becc>
   4d534:	d8c00317 	ldw	r3,12(sp)
   4d538:	00800084 	movi	r2,2
   4d53c:	10c02916 	blt	r2,r3,4d5e4 <_dtoa_r+0x167c>
   4d540:	d9000c17 	ldw	r4,48(sp)
   4d544:	003e8806 	br	4cf68 <__alt_mem_epcs_flash_controller+0xfe03bf68>
   4d548:	04000084 	movi	r16,2
   4d54c:	003b9d06 	br	4c3c4 <__alt_mem_epcs_flash_controller+0xfe03b3c4>
   4d550:	d9001317 	ldw	r4,76(sp)
   4d554:	d9000515 	stw	r4,20(sp)
   4d558:	003cd606 	br	4c8b4 <__alt_mem_epcs_flash_controller+0xfe03b8b4>
   4d55c:	d8801317 	ldw	r2,76(sp)
   4d560:	d8800515 	stw	r2,20(sp)
   4d564:	003c2a06 	br	4c610 <__alt_mem_epcs_flash_controller+0xfe03b610>
   4d568:	d9800317 	ldw	r6,12(sp)
   4d56c:	00800084 	movi	r2,2
   4d570:	11801516 	blt	r2,r6,4d5c8 <_dtoa_r+0x1660>
   4d574:	d9c00c17 	ldw	r7,48(sp)
   4d578:	d9c00615 	stw	r7,24(sp)
   4d57c:	003df706 	br	4cd5c <__alt_mem_epcs_flash_controller+0xfe03bd5c>
   4d580:	193d3926 	beq	r3,r4,4ca68 <__alt_mem_epcs_flash_controller+0xfe03ba68>
   4d584:	00c00f04 	movi	r3,60
   4d588:	1885c83a 	sub	r2,r3,r2
   4d58c:	003ddf06 	br	4cd0c <__alt_mem_epcs_flash_controller+0xfe03bd0c>
   4d590:	e009883a 	mov	r4,fp
   4d594:	e0001115 	stw	zero,68(fp)
   4d598:	000b883a 	mov	r5,zero
   4d59c:	004ea880 	call	4ea88 <_Balloc>
   4d5a0:	d8800715 	stw	r2,28(sp)
   4d5a4:	d8c00717 	ldw	r3,28(sp)
   4d5a8:	00bfffc4 	movi	r2,-1
   4d5ac:	01000044 	movi	r4,1
   4d5b0:	d8800c15 	stw	r2,48(sp)
   4d5b4:	e0c01015 	stw	r3,64(fp)
   4d5b8:	d9000b15 	stw	r4,44(sp)
   4d5bc:	d8800615 	stw	r2,24(sp)
   4d5c0:	d8002215 	stw	zero,136(sp)
   4d5c4:	003c4106 	br	4c6cc <__alt_mem_epcs_flash_controller+0xfe03b6cc>
   4d5c8:	d8c00c17 	ldw	r3,48(sp)
   4d5cc:	d8c00615 	stw	r3,24(sp)
   4d5d0:	003e7006 	br	4cf94 <__alt_mem_epcs_flash_controller+0xfe03bf94>
   4d5d4:	04400044 	movi	r17,1
   4d5d8:	003b2006 	br	4c25c <__alt_mem_epcs_flash_controller+0xfe03b25c>
   4d5dc:	000b883a 	mov	r5,zero
   4d5e0:	003b3d06 	br	4c2d8 <__alt_mem_epcs_flash_controller+0xfe03b2d8>
   4d5e4:	d8800c17 	ldw	r2,48(sp)
   4d5e8:	d8800615 	stw	r2,24(sp)
   4d5ec:	003e6906 	br	4cf94 <__alt_mem_epcs_flash_controller+0xfe03bf94>

0004d5f0 <__sflush_r>:
   4d5f0:	2880030b 	ldhu	r2,12(r5)
   4d5f4:	defffb04 	addi	sp,sp,-20
   4d5f8:	dcc00315 	stw	r19,12(sp)
   4d5fc:	dc400115 	stw	r17,4(sp)
   4d600:	dfc00415 	stw	ra,16(sp)
   4d604:	dc800215 	stw	r18,8(sp)
   4d608:	dc000015 	stw	r16,0(sp)
   4d60c:	10c0020c 	andi	r3,r2,8
   4d610:	2823883a 	mov	r17,r5
   4d614:	2027883a 	mov	r19,r4
   4d618:	1800311e 	bne	r3,zero,4d6e0 <__sflush_r+0xf0>
   4d61c:	28c00117 	ldw	r3,4(r5)
   4d620:	10820014 	ori	r2,r2,2048
   4d624:	2880030d 	sth	r2,12(r5)
   4d628:	00c04b0e 	bge	zero,r3,4d758 <__sflush_r+0x168>
   4d62c:	8a000a17 	ldw	r8,40(r17)
   4d630:	40002326 	beq	r8,zero,4d6c0 <__sflush_r+0xd0>
   4d634:	9c000017 	ldw	r16,0(r19)
   4d638:	10c4000c 	andi	r3,r2,4096
   4d63c:	98000015 	stw	zero,0(r19)
   4d640:	18004826 	beq	r3,zero,4d764 <__sflush_r+0x174>
   4d644:	89801417 	ldw	r6,80(r17)
   4d648:	10c0010c 	andi	r3,r2,4
   4d64c:	18000626 	beq	r3,zero,4d668 <__sflush_r+0x78>
   4d650:	88c00117 	ldw	r3,4(r17)
   4d654:	88800c17 	ldw	r2,48(r17)
   4d658:	30cdc83a 	sub	r6,r6,r3
   4d65c:	10000226 	beq	r2,zero,4d668 <__sflush_r+0x78>
   4d660:	88800f17 	ldw	r2,60(r17)
   4d664:	308dc83a 	sub	r6,r6,r2
   4d668:	89400717 	ldw	r5,28(r17)
   4d66c:	000f883a 	mov	r7,zero
   4d670:	9809883a 	mov	r4,r19
   4d674:	403ee83a 	callr	r8
   4d678:	00ffffc4 	movi	r3,-1
   4d67c:	10c04426 	beq	r2,r3,4d790 <__sflush_r+0x1a0>
   4d680:	88c0030b 	ldhu	r3,12(r17)
   4d684:	89000417 	ldw	r4,16(r17)
   4d688:	88000115 	stw	zero,4(r17)
   4d68c:	197dffcc 	andi	r5,r3,63487
   4d690:	8940030d 	sth	r5,12(r17)
   4d694:	89000015 	stw	r4,0(r17)
   4d698:	18c4000c 	andi	r3,r3,4096
   4d69c:	18002c1e 	bne	r3,zero,4d750 <__sflush_r+0x160>
   4d6a0:	89400c17 	ldw	r5,48(r17)
   4d6a4:	9c000015 	stw	r16,0(r19)
   4d6a8:	28000526 	beq	r5,zero,4d6c0 <__sflush_r+0xd0>
   4d6ac:	88801004 	addi	r2,r17,64
   4d6b0:	28800226 	beq	r5,r2,4d6bc <__sflush_r+0xcc>
   4d6b4:	9809883a 	mov	r4,r19
   4d6b8:	004dd5c0 	call	4dd5c <_free_r>
   4d6bc:	88000c15 	stw	zero,48(r17)
   4d6c0:	0005883a 	mov	r2,zero
   4d6c4:	dfc00417 	ldw	ra,16(sp)
   4d6c8:	dcc00317 	ldw	r19,12(sp)
   4d6cc:	dc800217 	ldw	r18,8(sp)
   4d6d0:	dc400117 	ldw	r17,4(sp)
   4d6d4:	dc000017 	ldw	r16,0(sp)
   4d6d8:	dec00504 	addi	sp,sp,20
   4d6dc:	f800283a 	ret
   4d6e0:	2c800417 	ldw	r18,16(r5)
   4d6e4:	903ff626 	beq	r18,zero,4d6c0 <__alt_mem_epcs_flash_controller+0xfe03c6c0>
   4d6e8:	2c000017 	ldw	r16,0(r5)
   4d6ec:	108000cc 	andi	r2,r2,3
   4d6f0:	2c800015 	stw	r18,0(r5)
   4d6f4:	84a1c83a 	sub	r16,r16,r18
   4d6f8:	1000131e 	bne	r2,zero,4d748 <__sflush_r+0x158>
   4d6fc:	28800517 	ldw	r2,20(r5)
   4d700:	88800215 	stw	r2,8(r17)
   4d704:	04000316 	blt	zero,r16,4d714 <__sflush_r+0x124>
   4d708:	003fed06 	br	4d6c0 <__alt_mem_epcs_flash_controller+0xfe03c6c0>
   4d70c:	90a5883a 	add	r18,r18,r2
   4d710:	043feb0e 	bge	zero,r16,4d6c0 <__alt_mem_epcs_flash_controller+0xfe03c6c0>
   4d714:	88800917 	ldw	r2,36(r17)
   4d718:	89400717 	ldw	r5,28(r17)
   4d71c:	800f883a 	mov	r7,r16
   4d720:	900d883a 	mov	r6,r18
   4d724:	9809883a 	mov	r4,r19
   4d728:	103ee83a 	callr	r2
   4d72c:	80a1c83a 	sub	r16,r16,r2
   4d730:	00bff616 	blt	zero,r2,4d70c <__alt_mem_epcs_flash_controller+0xfe03c70c>
   4d734:	88c0030b 	ldhu	r3,12(r17)
   4d738:	00bfffc4 	movi	r2,-1
   4d73c:	18c01014 	ori	r3,r3,64
   4d740:	88c0030d 	sth	r3,12(r17)
   4d744:	003fdf06 	br	4d6c4 <__alt_mem_epcs_flash_controller+0xfe03c6c4>
   4d748:	0005883a 	mov	r2,zero
   4d74c:	003fec06 	br	4d700 <__alt_mem_epcs_flash_controller+0xfe03c700>
   4d750:	88801415 	stw	r2,80(r17)
   4d754:	003fd206 	br	4d6a0 <__alt_mem_epcs_flash_controller+0xfe03c6a0>
   4d758:	28c00f17 	ldw	r3,60(r5)
   4d75c:	00ffb316 	blt	zero,r3,4d62c <__alt_mem_epcs_flash_controller+0xfe03c62c>
   4d760:	003fd706 	br	4d6c0 <__alt_mem_epcs_flash_controller+0xfe03c6c0>
   4d764:	89400717 	ldw	r5,28(r17)
   4d768:	000d883a 	mov	r6,zero
   4d76c:	01c00044 	movi	r7,1
   4d770:	9809883a 	mov	r4,r19
   4d774:	403ee83a 	callr	r8
   4d778:	100d883a 	mov	r6,r2
   4d77c:	00bfffc4 	movi	r2,-1
   4d780:	30801426 	beq	r6,r2,4d7d4 <__sflush_r+0x1e4>
   4d784:	8880030b 	ldhu	r2,12(r17)
   4d788:	8a000a17 	ldw	r8,40(r17)
   4d78c:	003fae06 	br	4d648 <__alt_mem_epcs_flash_controller+0xfe03c648>
   4d790:	98c00017 	ldw	r3,0(r19)
   4d794:	183fba26 	beq	r3,zero,4d680 <__alt_mem_epcs_flash_controller+0xfe03c680>
   4d798:	01000744 	movi	r4,29
   4d79c:	19000626 	beq	r3,r4,4d7b8 <__sflush_r+0x1c8>
   4d7a0:	01000584 	movi	r4,22
   4d7a4:	19000426 	beq	r3,r4,4d7b8 <__sflush_r+0x1c8>
   4d7a8:	88c0030b 	ldhu	r3,12(r17)
   4d7ac:	18c01014 	ori	r3,r3,64
   4d7b0:	88c0030d 	sth	r3,12(r17)
   4d7b4:	003fc306 	br	4d6c4 <__alt_mem_epcs_flash_controller+0xfe03c6c4>
   4d7b8:	8880030b 	ldhu	r2,12(r17)
   4d7bc:	88c00417 	ldw	r3,16(r17)
   4d7c0:	88000115 	stw	zero,4(r17)
   4d7c4:	10bdffcc 	andi	r2,r2,63487
   4d7c8:	8880030d 	sth	r2,12(r17)
   4d7cc:	88c00015 	stw	r3,0(r17)
   4d7d0:	003fb306 	br	4d6a0 <__alt_mem_epcs_flash_controller+0xfe03c6a0>
   4d7d4:	98800017 	ldw	r2,0(r19)
   4d7d8:	103fea26 	beq	r2,zero,4d784 <__alt_mem_epcs_flash_controller+0xfe03c784>
   4d7dc:	00c00744 	movi	r3,29
   4d7e0:	10c00226 	beq	r2,r3,4d7ec <__sflush_r+0x1fc>
   4d7e4:	00c00584 	movi	r3,22
   4d7e8:	10c0031e 	bne	r2,r3,4d7f8 <__sflush_r+0x208>
   4d7ec:	9c000015 	stw	r16,0(r19)
   4d7f0:	0005883a 	mov	r2,zero
   4d7f4:	003fb306 	br	4d6c4 <__alt_mem_epcs_flash_controller+0xfe03c6c4>
   4d7f8:	88c0030b 	ldhu	r3,12(r17)
   4d7fc:	3005883a 	mov	r2,r6
   4d800:	18c01014 	ori	r3,r3,64
   4d804:	88c0030d 	sth	r3,12(r17)
   4d808:	003fae06 	br	4d6c4 <__alt_mem_epcs_flash_controller+0xfe03c6c4>

0004d80c <_fflush_r>:
   4d80c:	defffd04 	addi	sp,sp,-12
   4d810:	dc000115 	stw	r16,4(sp)
   4d814:	dfc00215 	stw	ra,8(sp)
   4d818:	2021883a 	mov	r16,r4
   4d81c:	20000226 	beq	r4,zero,4d828 <_fflush_r+0x1c>
   4d820:	20800e17 	ldw	r2,56(r4)
   4d824:	10000c26 	beq	r2,zero,4d858 <_fflush_r+0x4c>
   4d828:	2880030f 	ldh	r2,12(r5)
   4d82c:	1000051e 	bne	r2,zero,4d844 <_fflush_r+0x38>
   4d830:	0005883a 	mov	r2,zero
   4d834:	dfc00217 	ldw	ra,8(sp)
   4d838:	dc000117 	ldw	r16,4(sp)
   4d83c:	dec00304 	addi	sp,sp,12
   4d840:	f800283a 	ret
   4d844:	8009883a 	mov	r4,r16
   4d848:	dfc00217 	ldw	ra,8(sp)
   4d84c:	dc000117 	ldw	r16,4(sp)
   4d850:	dec00304 	addi	sp,sp,12
   4d854:	004d5f01 	jmpi	4d5f0 <__sflush_r>
   4d858:	d9400015 	stw	r5,0(sp)
   4d85c:	004dbe80 	call	4dbe8 <__sinit>
   4d860:	d9400017 	ldw	r5,0(sp)
   4d864:	003ff006 	br	4d828 <__alt_mem_epcs_flash_controller+0xfe03c828>

0004d868 <fflush>:
   4d868:	20000526 	beq	r4,zero,4d880 <fflush+0x18>
   4d86c:	008001b4 	movhi	r2,6
   4d870:	10be3804 	addi	r2,r2,-1824
   4d874:	200b883a 	mov	r5,r4
   4d878:	11000017 	ldw	r4,0(r2)
   4d87c:	004d80c1 	jmpi	4d80c <_fflush_r>
   4d880:	008001b4 	movhi	r2,6
   4d884:	10be3704 	addi	r2,r2,-1828
   4d888:	11000017 	ldw	r4,0(r2)
   4d88c:	01400174 	movhi	r5,5
   4d890:	29760304 	addi	r5,r5,-10228
   4d894:	004e5ec1 	jmpi	4e5ec <_fwalk_reent>

0004d898 <__fp_unlock>:
   4d898:	0005883a 	mov	r2,zero
   4d89c:	f800283a 	ret

0004d8a0 <_cleanup_r>:
   4d8a0:	01400174 	movhi	r5,5
   4d8a4:	294a7f04 	addi	r5,r5,10748
   4d8a8:	004e5ec1 	jmpi	4e5ec <_fwalk_reent>

0004d8ac <__sinit.part.1>:
   4d8ac:	defff704 	addi	sp,sp,-36
   4d8b0:	00c00174 	movhi	r3,5
   4d8b4:	dfc00815 	stw	ra,32(sp)
   4d8b8:	ddc00715 	stw	r23,28(sp)
   4d8bc:	dd800615 	stw	r22,24(sp)
   4d8c0:	dd400515 	stw	r21,20(sp)
   4d8c4:	dd000415 	stw	r20,16(sp)
   4d8c8:	dcc00315 	stw	r19,12(sp)
   4d8cc:	dc800215 	stw	r18,8(sp)
   4d8d0:	dc400115 	stw	r17,4(sp)
   4d8d4:	dc000015 	stw	r16,0(sp)
   4d8d8:	18f62804 	addi	r3,r3,-10080
   4d8dc:	24000117 	ldw	r16,4(r4)
   4d8e0:	20c00f15 	stw	r3,60(r4)
   4d8e4:	2080bb04 	addi	r2,r4,748
   4d8e8:	00c000c4 	movi	r3,3
   4d8ec:	20c0b915 	stw	r3,740(r4)
   4d8f0:	2080ba15 	stw	r2,744(r4)
   4d8f4:	2000b815 	stw	zero,736(r4)
   4d8f8:	05c00204 	movi	r23,8
   4d8fc:	00800104 	movi	r2,4
   4d900:	2025883a 	mov	r18,r4
   4d904:	b80d883a 	mov	r6,r23
   4d908:	81001704 	addi	r4,r16,92
   4d90c:	000b883a 	mov	r5,zero
   4d910:	80000015 	stw	zero,0(r16)
   4d914:	80000115 	stw	zero,4(r16)
   4d918:	80000215 	stw	zero,8(r16)
   4d91c:	8080030d 	sth	r2,12(r16)
   4d920:	80001915 	stw	zero,100(r16)
   4d924:	8000038d 	sth	zero,14(r16)
   4d928:	80000415 	stw	zero,16(r16)
   4d92c:	80000515 	stw	zero,20(r16)
   4d930:	80000615 	stw	zero,24(r16)
   4d934:	0045f3c0 	call	45f3c <memset>
   4d938:	05800174 	movhi	r22,5
   4d93c:	94400217 	ldw	r17,8(r18)
   4d940:	05400174 	movhi	r21,5
   4d944:	05000174 	movhi	r20,5
   4d948:	04c00174 	movhi	r19,5
   4d94c:	b5bf1804 	addi	r22,r22,-928
   4d950:	ad7f2f04 	addi	r21,r21,-836
   4d954:	a53f4e04 	addi	r20,r20,-712
   4d958:	9cff6504 	addi	r19,r19,-620
   4d95c:	85800815 	stw	r22,32(r16)
   4d960:	85400915 	stw	r21,36(r16)
   4d964:	85000a15 	stw	r20,40(r16)
   4d968:	84c00b15 	stw	r19,44(r16)
   4d96c:	84000715 	stw	r16,28(r16)
   4d970:	00800284 	movi	r2,10
   4d974:	8880030d 	sth	r2,12(r17)
   4d978:	00800044 	movi	r2,1
   4d97c:	b80d883a 	mov	r6,r23
   4d980:	89001704 	addi	r4,r17,92
   4d984:	000b883a 	mov	r5,zero
   4d988:	88000015 	stw	zero,0(r17)
   4d98c:	88000115 	stw	zero,4(r17)
   4d990:	88000215 	stw	zero,8(r17)
   4d994:	88001915 	stw	zero,100(r17)
   4d998:	8880038d 	sth	r2,14(r17)
   4d99c:	88000415 	stw	zero,16(r17)
   4d9a0:	88000515 	stw	zero,20(r17)
   4d9a4:	88000615 	stw	zero,24(r17)
   4d9a8:	0045f3c0 	call	45f3c <memset>
   4d9ac:	94000317 	ldw	r16,12(r18)
   4d9b0:	00800484 	movi	r2,18
   4d9b4:	8c400715 	stw	r17,28(r17)
   4d9b8:	8d800815 	stw	r22,32(r17)
   4d9bc:	8d400915 	stw	r21,36(r17)
   4d9c0:	8d000a15 	stw	r20,40(r17)
   4d9c4:	8cc00b15 	stw	r19,44(r17)
   4d9c8:	8080030d 	sth	r2,12(r16)
   4d9cc:	00800084 	movi	r2,2
   4d9d0:	80000015 	stw	zero,0(r16)
   4d9d4:	80000115 	stw	zero,4(r16)
   4d9d8:	80000215 	stw	zero,8(r16)
   4d9dc:	80001915 	stw	zero,100(r16)
   4d9e0:	8080038d 	sth	r2,14(r16)
   4d9e4:	80000415 	stw	zero,16(r16)
   4d9e8:	80000515 	stw	zero,20(r16)
   4d9ec:	80000615 	stw	zero,24(r16)
   4d9f0:	b80d883a 	mov	r6,r23
   4d9f4:	000b883a 	mov	r5,zero
   4d9f8:	81001704 	addi	r4,r16,92
   4d9fc:	0045f3c0 	call	45f3c <memset>
   4da00:	00800044 	movi	r2,1
   4da04:	84000715 	stw	r16,28(r16)
   4da08:	85800815 	stw	r22,32(r16)
   4da0c:	85400915 	stw	r21,36(r16)
   4da10:	85000a15 	stw	r20,40(r16)
   4da14:	84c00b15 	stw	r19,44(r16)
   4da18:	90800e15 	stw	r2,56(r18)
   4da1c:	dfc00817 	ldw	ra,32(sp)
   4da20:	ddc00717 	ldw	r23,28(sp)
   4da24:	dd800617 	ldw	r22,24(sp)
   4da28:	dd400517 	ldw	r21,20(sp)
   4da2c:	dd000417 	ldw	r20,16(sp)
   4da30:	dcc00317 	ldw	r19,12(sp)
   4da34:	dc800217 	ldw	r18,8(sp)
   4da38:	dc400117 	ldw	r17,4(sp)
   4da3c:	dc000017 	ldw	r16,0(sp)
   4da40:	dec00904 	addi	sp,sp,36
   4da44:	f800283a 	ret

0004da48 <__fp_lock>:
   4da48:	0005883a 	mov	r2,zero
   4da4c:	f800283a 	ret

0004da50 <__sfmoreglue>:
   4da50:	defffc04 	addi	sp,sp,-16
   4da54:	dc400115 	stw	r17,4(sp)
   4da58:	2c7fffc4 	addi	r17,r5,-1
   4da5c:	8c401a24 	muli	r17,r17,104
   4da60:	dc800215 	stw	r18,8(sp)
   4da64:	2825883a 	mov	r18,r5
   4da68:	89401d04 	addi	r5,r17,116
   4da6c:	dc000015 	stw	r16,0(sp)
   4da70:	dfc00315 	stw	ra,12(sp)
   4da74:	00454100 	call	45410 <_malloc_r>
   4da78:	1021883a 	mov	r16,r2
   4da7c:	10000726 	beq	r2,zero,4da9c <__sfmoreglue+0x4c>
   4da80:	11000304 	addi	r4,r2,12
   4da84:	10000015 	stw	zero,0(r2)
   4da88:	14800115 	stw	r18,4(r2)
   4da8c:	11000215 	stw	r4,8(r2)
   4da90:	89801a04 	addi	r6,r17,104
   4da94:	000b883a 	mov	r5,zero
   4da98:	0045f3c0 	call	45f3c <memset>
   4da9c:	8005883a 	mov	r2,r16
   4daa0:	dfc00317 	ldw	ra,12(sp)
   4daa4:	dc800217 	ldw	r18,8(sp)
   4daa8:	dc400117 	ldw	r17,4(sp)
   4daac:	dc000017 	ldw	r16,0(sp)
   4dab0:	dec00404 	addi	sp,sp,16
   4dab4:	f800283a 	ret

0004dab8 <__sfp>:
   4dab8:	defffb04 	addi	sp,sp,-20
   4dabc:	dc000015 	stw	r16,0(sp)
   4dac0:	040001b4 	movhi	r16,6
   4dac4:	843e3704 	addi	r16,r16,-1828
   4dac8:	dcc00315 	stw	r19,12(sp)
   4dacc:	2027883a 	mov	r19,r4
   4dad0:	81000017 	ldw	r4,0(r16)
   4dad4:	dfc00415 	stw	ra,16(sp)
   4dad8:	dc800215 	stw	r18,8(sp)
   4dadc:	20800e17 	ldw	r2,56(r4)
   4dae0:	dc400115 	stw	r17,4(sp)
   4dae4:	1000021e 	bne	r2,zero,4daf0 <__sfp+0x38>
   4dae8:	004d8ac0 	call	4d8ac <__sinit.part.1>
   4daec:	81000017 	ldw	r4,0(r16)
   4daf0:	2480b804 	addi	r18,r4,736
   4daf4:	047fffc4 	movi	r17,-1
   4daf8:	91000117 	ldw	r4,4(r18)
   4dafc:	94000217 	ldw	r16,8(r18)
   4db00:	213fffc4 	addi	r4,r4,-1
   4db04:	20000a16 	blt	r4,zero,4db30 <__sfp+0x78>
   4db08:	8080030f 	ldh	r2,12(r16)
   4db0c:	10000c26 	beq	r2,zero,4db40 <__sfp+0x88>
   4db10:	80c01d04 	addi	r3,r16,116
   4db14:	00000206 	br	4db20 <__sfp+0x68>
   4db18:	18bfe60f 	ldh	r2,-104(r3)
   4db1c:	10000826 	beq	r2,zero,4db40 <__sfp+0x88>
   4db20:	213fffc4 	addi	r4,r4,-1
   4db24:	1c3ffd04 	addi	r16,r3,-12
   4db28:	18c01a04 	addi	r3,r3,104
   4db2c:	247ffa1e 	bne	r4,r17,4db18 <__alt_mem_epcs_flash_controller+0xfe03cb18>
   4db30:	90800017 	ldw	r2,0(r18)
   4db34:	10001d26 	beq	r2,zero,4dbac <__sfp+0xf4>
   4db38:	1025883a 	mov	r18,r2
   4db3c:	003fee06 	br	4daf8 <__alt_mem_epcs_flash_controller+0xfe03caf8>
   4db40:	00bfffc4 	movi	r2,-1
   4db44:	8080038d 	sth	r2,14(r16)
   4db48:	00800044 	movi	r2,1
   4db4c:	8080030d 	sth	r2,12(r16)
   4db50:	80001915 	stw	zero,100(r16)
   4db54:	80000015 	stw	zero,0(r16)
   4db58:	80000215 	stw	zero,8(r16)
   4db5c:	80000115 	stw	zero,4(r16)
   4db60:	80000415 	stw	zero,16(r16)
   4db64:	80000515 	stw	zero,20(r16)
   4db68:	80000615 	stw	zero,24(r16)
   4db6c:	01800204 	movi	r6,8
   4db70:	000b883a 	mov	r5,zero
   4db74:	81001704 	addi	r4,r16,92
   4db78:	0045f3c0 	call	45f3c <memset>
   4db7c:	8005883a 	mov	r2,r16
   4db80:	80000c15 	stw	zero,48(r16)
   4db84:	80000d15 	stw	zero,52(r16)
   4db88:	80001115 	stw	zero,68(r16)
   4db8c:	80001215 	stw	zero,72(r16)
   4db90:	dfc00417 	ldw	ra,16(sp)
   4db94:	dcc00317 	ldw	r19,12(sp)
   4db98:	dc800217 	ldw	r18,8(sp)
   4db9c:	dc400117 	ldw	r17,4(sp)
   4dba0:	dc000017 	ldw	r16,0(sp)
   4dba4:	dec00504 	addi	sp,sp,20
   4dba8:	f800283a 	ret
   4dbac:	01400104 	movi	r5,4
   4dbb0:	9809883a 	mov	r4,r19
   4dbb4:	004da500 	call	4da50 <__sfmoreglue>
   4dbb8:	90800015 	stw	r2,0(r18)
   4dbbc:	103fde1e 	bne	r2,zero,4db38 <__alt_mem_epcs_flash_controller+0xfe03cb38>
   4dbc0:	00800304 	movi	r2,12
   4dbc4:	98800015 	stw	r2,0(r19)
   4dbc8:	0005883a 	mov	r2,zero
   4dbcc:	003ff006 	br	4db90 <__alt_mem_epcs_flash_controller+0xfe03cb90>

0004dbd0 <_cleanup>:
   4dbd0:	008001b4 	movhi	r2,6
   4dbd4:	10be3704 	addi	r2,r2,-1828
   4dbd8:	11000017 	ldw	r4,0(r2)
   4dbdc:	01400174 	movhi	r5,5
   4dbe0:	294a7f04 	addi	r5,r5,10748
   4dbe4:	004e5ec1 	jmpi	4e5ec <_fwalk_reent>

0004dbe8 <__sinit>:
   4dbe8:	20800e17 	ldw	r2,56(r4)
   4dbec:	10000126 	beq	r2,zero,4dbf4 <__sinit+0xc>
   4dbf0:	f800283a 	ret
   4dbf4:	004d8ac1 	jmpi	4d8ac <__sinit.part.1>

0004dbf8 <__sfp_lock_acquire>:
   4dbf8:	f800283a 	ret

0004dbfc <__sfp_lock_release>:
   4dbfc:	f800283a 	ret

0004dc00 <__sinit_lock_acquire>:
   4dc00:	f800283a 	ret

0004dc04 <__sinit_lock_release>:
   4dc04:	f800283a 	ret

0004dc08 <__fp_lock_all>:
   4dc08:	008001b4 	movhi	r2,6
   4dc0c:	10be3804 	addi	r2,r2,-1824
   4dc10:	11000017 	ldw	r4,0(r2)
   4dc14:	01400174 	movhi	r5,5
   4dc18:	29769204 	addi	r5,r5,-9656
   4dc1c:	004e5281 	jmpi	4e528 <_fwalk>

0004dc20 <__fp_unlock_all>:
   4dc20:	008001b4 	movhi	r2,6
   4dc24:	10be3804 	addi	r2,r2,-1824
   4dc28:	11000017 	ldw	r4,0(r2)
   4dc2c:	01400174 	movhi	r5,5
   4dc30:	29762604 	addi	r5,r5,-10088
   4dc34:	004e5281 	jmpi	4e528 <_fwalk>

0004dc38 <_malloc_trim_r>:
   4dc38:	defffb04 	addi	sp,sp,-20
   4dc3c:	dcc00315 	stw	r19,12(sp)
   4dc40:	04c001b4 	movhi	r19,6
   4dc44:	dc800215 	stw	r18,8(sp)
   4dc48:	dc400115 	stw	r17,4(sp)
   4dc4c:	dc000015 	stw	r16,0(sp)
   4dc50:	dfc00415 	stw	ra,16(sp)
   4dc54:	2821883a 	mov	r16,r5
   4dc58:	9cf81c04 	addi	r19,r19,-8080
   4dc5c:	2025883a 	mov	r18,r4
   4dc60:	00548d80 	call	548d8 <__malloc_lock>
   4dc64:	98800217 	ldw	r2,8(r19)
   4dc68:	14400117 	ldw	r17,4(r2)
   4dc6c:	00bfff04 	movi	r2,-4
   4dc70:	88a2703a 	and	r17,r17,r2
   4dc74:	8c21c83a 	sub	r16,r17,r16
   4dc78:	8403fbc4 	addi	r16,r16,4079
   4dc7c:	8020d33a 	srli	r16,r16,12
   4dc80:	0083ffc4 	movi	r2,4095
   4dc84:	843fffc4 	addi	r16,r16,-1
   4dc88:	8020933a 	slli	r16,r16,12
   4dc8c:	1400060e 	bge	r2,r16,4dca8 <_malloc_trim_r+0x70>
   4dc90:	000b883a 	mov	r5,zero
   4dc94:	9009883a 	mov	r4,r18
   4dc98:	00467bc0 	call	467bc <_sbrk_r>
   4dc9c:	98c00217 	ldw	r3,8(r19)
   4dca0:	1c47883a 	add	r3,r3,r17
   4dca4:	10c00a26 	beq	r2,r3,4dcd0 <_malloc_trim_r+0x98>
   4dca8:	9009883a 	mov	r4,r18
   4dcac:	00548fc0 	call	548fc <__malloc_unlock>
   4dcb0:	0005883a 	mov	r2,zero
   4dcb4:	dfc00417 	ldw	ra,16(sp)
   4dcb8:	dcc00317 	ldw	r19,12(sp)
   4dcbc:	dc800217 	ldw	r18,8(sp)
   4dcc0:	dc400117 	ldw	r17,4(sp)
   4dcc4:	dc000017 	ldw	r16,0(sp)
   4dcc8:	dec00504 	addi	sp,sp,20
   4dccc:	f800283a 	ret
   4dcd0:	040bc83a 	sub	r5,zero,r16
   4dcd4:	9009883a 	mov	r4,r18
   4dcd8:	00467bc0 	call	467bc <_sbrk_r>
   4dcdc:	00ffffc4 	movi	r3,-1
   4dce0:	10c00d26 	beq	r2,r3,4dd18 <_malloc_trim_r+0xe0>
   4dce4:	00c001b4 	movhi	r3,6
   4dce8:	18caab04 	addi	r3,r3,10924
   4dcec:	18800017 	ldw	r2,0(r3)
   4dcf0:	99000217 	ldw	r4,8(r19)
   4dcf4:	8c23c83a 	sub	r17,r17,r16
   4dcf8:	8c400054 	ori	r17,r17,1
   4dcfc:	1421c83a 	sub	r16,r2,r16
   4dd00:	24400115 	stw	r17,4(r4)
   4dd04:	9009883a 	mov	r4,r18
   4dd08:	1c000015 	stw	r16,0(r3)
   4dd0c:	00548fc0 	call	548fc <__malloc_unlock>
   4dd10:	00800044 	movi	r2,1
   4dd14:	003fe706 	br	4dcb4 <__alt_mem_epcs_flash_controller+0xfe03ccb4>
   4dd18:	000b883a 	mov	r5,zero
   4dd1c:	9009883a 	mov	r4,r18
   4dd20:	00467bc0 	call	467bc <_sbrk_r>
   4dd24:	99000217 	ldw	r4,8(r19)
   4dd28:	014003c4 	movi	r5,15
   4dd2c:	1107c83a 	sub	r3,r2,r4
   4dd30:	28ffdd0e 	bge	r5,r3,4dca8 <__alt_mem_epcs_flash_controller+0xfe03cca8>
   4dd34:	014001b4 	movhi	r5,6
   4dd38:	297e3904 	addi	r5,r5,-1820
   4dd3c:	29400017 	ldw	r5,0(r5)
   4dd40:	18c00054 	ori	r3,r3,1
   4dd44:	20c00115 	stw	r3,4(r4)
   4dd48:	00c001b4 	movhi	r3,6
   4dd4c:	1145c83a 	sub	r2,r2,r5
   4dd50:	18caab04 	addi	r3,r3,10924
   4dd54:	18800015 	stw	r2,0(r3)
   4dd58:	003fd306 	br	4dca8 <__alt_mem_epcs_flash_controller+0xfe03cca8>

0004dd5c <_free_r>:
   4dd5c:	28004126 	beq	r5,zero,4de64 <_free_r+0x108>
   4dd60:	defffd04 	addi	sp,sp,-12
   4dd64:	dc400115 	stw	r17,4(sp)
   4dd68:	dc000015 	stw	r16,0(sp)
   4dd6c:	2023883a 	mov	r17,r4
   4dd70:	2821883a 	mov	r16,r5
   4dd74:	dfc00215 	stw	ra,8(sp)
   4dd78:	00548d80 	call	548d8 <__malloc_lock>
   4dd7c:	81ffff17 	ldw	r7,-4(r16)
   4dd80:	00bfff84 	movi	r2,-2
   4dd84:	010001b4 	movhi	r4,6
   4dd88:	81bffe04 	addi	r6,r16,-8
   4dd8c:	3884703a 	and	r2,r7,r2
   4dd90:	21381c04 	addi	r4,r4,-8080
   4dd94:	308b883a 	add	r5,r6,r2
   4dd98:	2a400117 	ldw	r9,4(r5)
   4dd9c:	22000217 	ldw	r8,8(r4)
   4dda0:	00ffff04 	movi	r3,-4
   4dda4:	48c6703a 	and	r3,r9,r3
   4dda8:	2a005726 	beq	r5,r8,4df08 <_free_r+0x1ac>
   4ddac:	28c00115 	stw	r3,4(r5)
   4ddb0:	39c0004c 	andi	r7,r7,1
   4ddb4:	3800091e 	bne	r7,zero,4dddc <_free_r+0x80>
   4ddb8:	823ffe17 	ldw	r8,-8(r16)
   4ddbc:	22400204 	addi	r9,r4,8
   4ddc0:	320dc83a 	sub	r6,r6,r8
   4ddc4:	31c00217 	ldw	r7,8(r6)
   4ddc8:	1205883a 	add	r2,r2,r8
   4ddcc:	3a406526 	beq	r7,r9,4df64 <_free_r+0x208>
   4ddd0:	32000317 	ldw	r8,12(r6)
   4ddd4:	3a000315 	stw	r8,12(r7)
   4ddd8:	41c00215 	stw	r7,8(r8)
   4dddc:	28cf883a 	add	r7,r5,r3
   4dde0:	39c00117 	ldw	r7,4(r7)
   4dde4:	39c0004c 	andi	r7,r7,1
   4dde8:	38003a26 	beq	r7,zero,4ded4 <_free_r+0x178>
   4ddec:	10c00054 	ori	r3,r2,1
   4ddf0:	30c00115 	stw	r3,4(r6)
   4ddf4:	3087883a 	add	r3,r6,r2
   4ddf8:	18800015 	stw	r2,0(r3)
   4ddfc:	00c07fc4 	movi	r3,511
   4de00:	18801936 	bltu	r3,r2,4de68 <_free_r+0x10c>
   4de04:	1004d0fa 	srli	r2,r2,3
   4de08:	01c00044 	movi	r7,1
   4de0c:	21400117 	ldw	r5,4(r4)
   4de10:	10c00044 	addi	r3,r2,1
   4de14:	18c7883a 	add	r3,r3,r3
   4de18:	1005d0ba 	srai	r2,r2,2
   4de1c:	18c7883a 	add	r3,r3,r3
   4de20:	18c7883a 	add	r3,r3,r3
   4de24:	1907883a 	add	r3,r3,r4
   4de28:	3884983a 	sll	r2,r7,r2
   4de2c:	19c00017 	ldw	r7,0(r3)
   4de30:	1a3ffe04 	addi	r8,r3,-8
   4de34:	1144b03a 	or	r2,r2,r5
   4de38:	32000315 	stw	r8,12(r6)
   4de3c:	31c00215 	stw	r7,8(r6)
   4de40:	20800115 	stw	r2,4(r4)
   4de44:	19800015 	stw	r6,0(r3)
   4de48:	39800315 	stw	r6,12(r7)
   4de4c:	8809883a 	mov	r4,r17
   4de50:	dfc00217 	ldw	ra,8(sp)
   4de54:	dc400117 	ldw	r17,4(sp)
   4de58:	dc000017 	ldw	r16,0(sp)
   4de5c:	dec00304 	addi	sp,sp,12
   4de60:	00548fc1 	jmpi	548fc <__malloc_unlock>
   4de64:	f800283a 	ret
   4de68:	100ad27a 	srli	r5,r2,9
   4de6c:	00c00104 	movi	r3,4
   4de70:	19404a36 	bltu	r3,r5,4df9c <_free_r+0x240>
   4de74:	100ad1ba 	srli	r5,r2,6
   4de78:	28c00e44 	addi	r3,r5,57
   4de7c:	18c7883a 	add	r3,r3,r3
   4de80:	29400e04 	addi	r5,r5,56
   4de84:	18c7883a 	add	r3,r3,r3
   4de88:	18c7883a 	add	r3,r3,r3
   4de8c:	1909883a 	add	r4,r3,r4
   4de90:	20c00017 	ldw	r3,0(r4)
   4de94:	01c001b4 	movhi	r7,6
   4de98:	213ffe04 	addi	r4,r4,-8
   4de9c:	39f81c04 	addi	r7,r7,-8080
   4dea0:	20c04426 	beq	r4,r3,4dfb4 <_free_r+0x258>
   4dea4:	01ffff04 	movi	r7,-4
   4dea8:	19400117 	ldw	r5,4(r3)
   4deac:	29ca703a 	and	r5,r5,r7
   4deb0:	1140022e 	bgeu	r2,r5,4debc <_free_r+0x160>
   4deb4:	18c00217 	ldw	r3,8(r3)
   4deb8:	20fffb1e 	bne	r4,r3,4dea8 <__alt_mem_epcs_flash_controller+0xfe03cea8>
   4debc:	19000317 	ldw	r4,12(r3)
   4dec0:	31000315 	stw	r4,12(r6)
   4dec4:	30c00215 	stw	r3,8(r6)
   4dec8:	21800215 	stw	r6,8(r4)
   4decc:	19800315 	stw	r6,12(r3)
   4ded0:	003fde06 	br	4de4c <__alt_mem_epcs_flash_controller+0xfe03ce4c>
   4ded4:	29c00217 	ldw	r7,8(r5)
   4ded8:	10c5883a 	add	r2,r2,r3
   4dedc:	00c001b4 	movhi	r3,6
   4dee0:	18f81e04 	addi	r3,r3,-8072
   4dee4:	38c03b26 	beq	r7,r3,4dfd4 <_free_r+0x278>
   4dee8:	2a000317 	ldw	r8,12(r5)
   4deec:	11400054 	ori	r5,r2,1
   4def0:	3087883a 	add	r3,r6,r2
   4def4:	3a000315 	stw	r8,12(r7)
   4def8:	41c00215 	stw	r7,8(r8)
   4defc:	31400115 	stw	r5,4(r6)
   4df00:	18800015 	stw	r2,0(r3)
   4df04:	003fbd06 	br	4ddfc <__alt_mem_epcs_flash_controller+0xfe03cdfc>
   4df08:	39c0004c 	andi	r7,r7,1
   4df0c:	10c5883a 	add	r2,r2,r3
   4df10:	3800071e 	bne	r7,zero,4df30 <_free_r+0x1d4>
   4df14:	81fffe17 	ldw	r7,-8(r16)
   4df18:	31cdc83a 	sub	r6,r6,r7
   4df1c:	30c00317 	ldw	r3,12(r6)
   4df20:	31400217 	ldw	r5,8(r6)
   4df24:	11c5883a 	add	r2,r2,r7
   4df28:	28c00315 	stw	r3,12(r5)
   4df2c:	19400215 	stw	r5,8(r3)
   4df30:	10c00054 	ori	r3,r2,1
   4df34:	30c00115 	stw	r3,4(r6)
   4df38:	00c001b4 	movhi	r3,6
   4df3c:	18fe3a04 	addi	r3,r3,-1816
   4df40:	18c00017 	ldw	r3,0(r3)
   4df44:	21800215 	stw	r6,8(r4)
   4df48:	10ffc036 	bltu	r2,r3,4de4c <__alt_mem_epcs_flash_controller+0xfe03ce4c>
   4df4c:	008001b4 	movhi	r2,6
   4df50:	10869a04 	addi	r2,r2,6760
   4df54:	11400017 	ldw	r5,0(r2)
   4df58:	8809883a 	mov	r4,r17
   4df5c:	004dc380 	call	4dc38 <_malloc_trim_r>
   4df60:	003fba06 	br	4de4c <__alt_mem_epcs_flash_controller+0xfe03ce4c>
   4df64:	28c9883a 	add	r4,r5,r3
   4df68:	21000117 	ldw	r4,4(r4)
   4df6c:	2100004c 	andi	r4,r4,1
   4df70:	2000391e 	bne	r4,zero,4e058 <_free_r+0x2fc>
   4df74:	29c00217 	ldw	r7,8(r5)
   4df78:	29000317 	ldw	r4,12(r5)
   4df7c:	1885883a 	add	r2,r3,r2
   4df80:	10c00054 	ori	r3,r2,1
   4df84:	39000315 	stw	r4,12(r7)
   4df88:	21c00215 	stw	r7,8(r4)
   4df8c:	30c00115 	stw	r3,4(r6)
   4df90:	308d883a 	add	r6,r6,r2
   4df94:	30800015 	stw	r2,0(r6)
   4df98:	003fac06 	br	4de4c <__alt_mem_epcs_flash_controller+0xfe03ce4c>
   4df9c:	00c00504 	movi	r3,20
   4dfa0:	19401536 	bltu	r3,r5,4dff8 <_free_r+0x29c>
   4dfa4:	28c01704 	addi	r3,r5,92
   4dfa8:	18c7883a 	add	r3,r3,r3
   4dfac:	294016c4 	addi	r5,r5,91
   4dfb0:	003fb406 	br	4de84 <__alt_mem_epcs_flash_controller+0xfe03ce84>
   4dfb4:	280bd0ba 	srai	r5,r5,2
   4dfb8:	00c00044 	movi	r3,1
   4dfbc:	38800117 	ldw	r2,4(r7)
   4dfc0:	194a983a 	sll	r5,r3,r5
   4dfc4:	2007883a 	mov	r3,r4
   4dfc8:	2884b03a 	or	r2,r5,r2
   4dfcc:	38800115 	stw	r2,4(r7)
   4dfd0:	003fbb06 	br	4dec0 <__alt_mem_epcs_flash_controller+0xfe03cec0>
   4dfd4:	21800515 	stw	r6,20(r4)
   4dfd8:	21800415 	stw	r6,16(r4)
   4dfdc:	10c00054 	ori	r3,r2,1
   4dfe0:	31c00315 	stw	r7,12(r6)
   4dfe4:	31c00215 	stw	r7,8(r6)
   4dfe8:	30c00115 	stw	r3,4(r6)
   4dfec:	308d883a 	add	r6,r6,r2
   4dff0:	30800015 	stw	r2,0(r6)
   4dff4:	003f9506 	br	4de4c <__alt_mem_epcs_flash_controller+0xfe03ce4c>
   4dff8:	00c01504 	movi	r3,84
   4dffc:	19400536 	bltu	r3,r5,4e014 <_free_r+0x2b8>
   4e000:	100ad33a 	srli	r5,r2,12
   4e004:	28c01bc4 	addi	r3,r5,111
   4e008:	18c7883a 	add	r3,r3,r3
   4e00c:	29401b84 	addi	r5,r5,110
   4e010:	003f9c06 	br	4de84 <__alt_mem_epcs_flash_controller+0xfe03ce84>
   4e014:	00c05504 	movi	r3,340
   4e018:	19400536 	bltu	r3,r5,4e030 <_free_r+0x2d4>
   4e01c:	100ad3fa 	srli	r5,r2,15
   4e020:	28c01e04 	addi	r3,r5,120
   4e024:	18c7883a 	add	r3,r3,r3
   4e028:	29401dc4 	addi	r5,r5,119
   4e02c:	003f9506 	br	4de84 <__alt_mem_epcs_flash_controller+0xfe03ce84>
   4e030:	00c15504 	movi	r3,1364
   4e034:	19400536 	bltu	r3,r5,4e04c <_free_r+0x2f0>
   4e038:	100ad4ba 	srli	r5,r2,18
   4e03c:	28c01f44 	addi	r3,r5,125
   4e040:	18c7883a 	add	r3,r3,r3
   4e044:	29401f04 	addi	r5,r5,124
   4e048:	003f8e06 	br	4de84 <__alt_mem_epcs_flash_controller+0xfe03ce84>
   4e04c:	00c03f84 	movi	r3,254
   4e050:	01401f84 	movi	r5,126
   4e054:	003f8b06 	br	4de84 <__alt_mem_epcs_flash_controller+0xfe03ce84>
   4e058:	10c00054 	ori	r3,r2,1
   4e05c:	30c00115 	stw	r3,4(r6)
   4e060:	308d883a 	add	r6,r6,r2
   4e064:	30800015 	stw	r2,0(r6)
   4e068:	003f7806 	br	4de4c <__alt_mem_epcs_flash_controller+0xfe03ce4c>

0004e06c <__sfvwrite_r>:
   4e06c:	30800217 	ldw	r2,8(r6)
   4e070:	10006726 	beq	r2,zero,4e210 <__sfvwrite_r+0x1a4>
   4e074:	28c0030b 	ldhu	r3,12(r5)
   4e078:	defff404 	addi	sp,sp,-48
   4e07c:	dd400715 	stw	r21,28(sp)
   4e080:	dd000615 	stw	r20,24(sp)
   4e084:	dc000215 	stw	r16,8(sp)
   4e088:	dfc00b15 	stw	ra,44(sp)
   4e08c:	df000a15 	stw	fp,40(sp)
   4e090:	ddc00915 	stw	r23,36(sp)
   4e094:	dd800815 	stw	r22,32(sp)
   4e098:	dcc00515 	stw	r19,20(sp)
   4e09c:	dc800415 	stw	r18,16(sp)
   4e0a0:	dc400315 	stw	r17,12(sp)
   4e0a4:	1880020c 	andi	r2,r3,8
   4e0a8:	2821883a 	mov	r16,r5
   4e0ac:	202b883a 	mov	r21,r4
   4e0b0:	3029883a 	mov	r20,r6
   4e0b4:	10002726 	beq	r2,zero,4e154 <__sfvwrite_r+0xe8>
   4e0b8:	28800417 	ldw	r2,16(r5)
   4e0bc:	10002526 	beq	r2,zero,4e154 <__sfvwrite_r+0xe8>
   4e0c0:	1880008c 	andi	r2,r3,2
   4e0c4:	a4400017 	ldw	r17,0(r20)
   4e0c8:	10002a26 	beq	r2,zero,4e174 <__sfvwrite_r+0x108>
   4e0cc:	05a00034 	movhi	r22,32768
   4e0d0:	0027883a 	mov	r19,zero
   4e0d4:	0025883a 	mov	r18,zero
   4e0d8:	b5bf0004 	addi	r22,r22,-1024
   4e0dc:	980d883a 	mov	r6,r19
   4e0e0:	a809883a 	mov	r4,r21
   4e0e4:	90004626 	beq	r18,zero,4e200 <__sfvwrite_r+0x194>
   4e0e8:	900f883a 	mov	r7,r18
   4e0ec:	b480022e 	bgeu	r22,r18,4e0f8 <__sfvwrite_r+0x8c>
   4e0f0:	01e00034 	movhi	r7,32768
   4e0f4:	39ff0004 	addi	r7,r7,-1024
   4e0f8:	80800917 	ldw	r2,36(r16)
   4e0fc:	81400717 	ldw	r5,28(r16)
   4e100:	103ee83a 	callr	r2
   4e104:	0080570e 	bge	zero,r2,4e264 <__sfvwrite_r+0x1f8>
   4e108:	a0c00217 	ldw	r3,8(r20)
   4e10c:	98a7883a 	add	r19,r19,r2
   4e110:	90a5c83a 	sub	r18,r18,r2
   4e114:	1885c83a 	sub	r2,r3,r2
   4e118:	a0800215 	stw	r2,8(r20)
   4e11c:	103fef1e 	bne	r2,zero,4e0dc <__alt_mem_epcs_flash_controller+0xfe03d0dc>
   4e120:	0005883a 	mov	r2,zero
   4e124:	dfc00b17 	ldw	ra,44(sp)
   4e128:	df000a17 	ldw	fp,40(sp)
   4e12c:	ddc00917 	ldw	r23,36(sp)
   4e130:	dd800817 	ldw	r22,32(sp)
   4e134:	dd400717 	ldw	r21,28(sp)
   4e138:	dd000617 	ldw	r20,24(sp)
   4e13c:	dcc00517 	ldw	r19,20(sp)
   4e140:	dc800417 	ldw	r18,16(sp)
   4e144:	dc400317 	ldw	r17,12(sp)
   4e148:	dc000217 	ldw	r16,8(sp)
   4e14c:	dec00c04 	addi	sp,sp,48
   4e150:	f800283a 	ret
   4e154:	800b883a 	mov	r5,r16
   4e158:	a809883a 	mov	r4,r21
   4e15c:	004ba940 	call	4ba94 <__swsetup_r>
   4e160:	1000eb1e 	bne	r2,zero,4e510 <__sfvwrite_r+0x4a4>
   4e164:	80c0030b 	ldhu	r3,12(r16)
   4e168:	a4400017 	ldw	r17,0(r20)
   4e16c:	1880008c 	andi	r2,r3,2
   4e170:	103fd61e 	bne	r2,zero,4e0cc <__alt_mem_epcs_flash_controller+0xfe03d0cc>
   4e174:	1880004c 	andi	r2,r3,1
   4e178:	10003f1e 	bne	r2,zero,4e278 <__sfvwrite_r+0x20c>
   4e17c:	0039883a 	mov	fp,zero
   4e180:	0025883a 	mov	r18,zero
   4e184:	90001a26 	beq	r18,zero,4e1f0 <__sfvwrite_r+0x184>
   4e188:	1880800c 	andi	r2,r3,512
   4e18c:	84c00217 	ldw	r19,8(r16)
   4e190:	10002126 	beq	r2,zero,4e218 <__sfvwrite_r+0x1ac>
   4e194:	982f883a 	mov	r23,r19
   4e198:	94c09336 	bltu	r18,r19,4e3e8 <__sfvwrite_r+0x37c>
   4e19c:	1881200c 	andi	r2,r3,1152
   4e1a0:	10009e1e 	bne	r2,zero,4e41c <__sfvwrite_r+0x3b0>
   4e1a4:	81000017 	ldw	r4,0(r16)
   4e1a8:	b80d883a 	mov	r6,r23
   4e1ac:	e00b883a 	mov	r5,fp
   4e1b0:	0045de00 	call	45de0 <memmove>
   4e1b4:	80c00217 	ldw	r3,8(r16)
   4e1b8:	81000017 	ldw	r4,0(r16)
   4e1bc:	9005883a 	mov	r2,r18
   4e1c0:	1ce7c83a 	sub	r19,r3,r19
   4e1c4:	25cf883a 	add	r7,r4,r23
   4e1c8:	84c00215 	stw	r19,8(r16)
   4e1cc:	81c00015 	stw	r7,0(r16)
   4e1d0:	a0c00217 	ldw	r3,8(r20)
   4e1d4:	e0b9883a 	add	fp,fp,r2
   4e1d8:	90a5c83a 	sub	r18,r18,r2
   4e1dc:	18a7c83a 	sub	r19,r3,r2
   4e1e0:	a4c00215 	stw	r19,8(r20)
   4e1e4:	983fce26 	beq	r19,zero,4e120 <__alt_mem_epcs_flash_controller+0xfe03d120>
   4e1e8:	80c0030b 	ldhu	r3,12(r16)
   4e1ec:	903fe61e 	bne	r18,zero,4e188 <__alt_mem_epcs_flash_controller+0xfe03d188>
   4e1f0:	8f000017 	ldw	fp,0(r17)
   4e1f4:	8c800117 	ldw	r18,4(r17)
   4e1f8:	8c400204 	addi	r17,r17,8
   4e1fc:	003fe106 	br	4e184 <__alt_mem_epcs_flash_controller+0xfe03d184>
   4e200:	8cc00017 	ldw	r19,0(r17)
   4e204:	8c800117 	ldw	r18,4(r17)
   4e208:	8c400204 	addi	r17,r17,8
   4e20c:	003fb306 	br	4e0dc <__alt_mem_epcs_flash_controller+0xfe03d0dc>
   4e210:	0005883a 	mov	r2,zero
   4e214:	f800283a 	ret
   4e218:	81000017 	ldw	r4,0(r16)
   4e21c:	80800417 	ldw	r2,16(r16)
   4e220:	11005736 	bltu	r2,r4,4e380 <__sfvwrite_r+0x314>
   4e224:	85c00517 	ldw	r23,20(r16)
   4e228:	95c05536 	bltu	r18,r23,4e380 <__sfvwrite_r+0x314>
   4e22c:	00a00034 	movhi	r2,32768
   4e230:	10bfffc4 	addi	r2,r2,-1
   4e234:	9009883a 	mov	r4,r18
   4e238:	1480012e 	bgeu	r2,r18,4e240 <__sfvwrite_r+0x1d4>
   4e23c:	1009883a 	mov	r4,r2
   4e240:	b80b883a 	mov	r5,r23
   4e244:	00429a00 	call	429a0 <__divsi3>
   4e248:	15cf383a 	mul	r7,r2,r23
   4e24c:	81400717 	ldw	r5,28(r16)
   4e250:	80800917 	ldw	r2,36(r16)
   4e254:	e00d883a 	mov	r6,fp
   4e258:	a809883a 	mov	r4,r21
   4e25c:	103ee83a 	callr	r2
   4e260:	00bfdb16 	blt	zero,r2,4e1d0 <__alt_mem_epcs_flash_controller+0xfe03d1d0>
   4e264:	8080030b 	ldhu	r2,12(r16)
   4e268:	10801014 	ori	r2,r2,64
   4e26c:	8080030d 	sth	r2,12(r16)
   4e270:	00bfffc4 	movi	r2,-1
   4e274:	003fab06 	br	4e124 <__alt_mem_epcs_flash_controller+0xfe03d124>
   4e278:	0027883a 	mov	r19,zero
   4e27c:	0011883a 	mov	r8,zero
   4e280:	0039883a 	mov	fp,zero
   4e284:	0025883a 	mov	r18,zero
   4e288:	90001f26 	beq	r18,zero,4e308 <__sfvwrite_r+0x29c>
   4e28c:	40005a26 	beq	r8,zero,4e3f8 <__sfvwrite_r+0x38c>
   4e290:	982d883a 	mov	r22,r19
   4e294:	94c0012e 	bgeu	r18,r19,4e29c <__sfvwrite_r+0x230>
   4e298:	902d883a 	mov	r22,r18
   4e29c:	81000017 	ldw	r4,0(r16)
   4e2a0:	80800417 	ldw	r2,16(r16)
   4e2a4:	b02f883a 	mov	r23,r22
   4e2a8:	81c00517 	ldw	r7,20(r16)
   4e2ac:	1100032e 	bgeu	r2,r4,4e2bc <__sfvwrite_r+0x250>
   4e2b0:	80c00217 	ldw	r3,8(r16)
   4e2b4:	38c7883a 	add	r3,r7,r3
   4e2b8:	1d801816 	blt	r3,r22,4e31c <__sfvwrite_r+0x2b0>
   4e2bc:	b1c03e16 	blt	r22,r7,4e3b8 <__sfvwrite_r+0x34c>
   4e2c0:	80800917 	ldw	r2,36(r16)
   4e2c4:	81400717 	ldw	r5,28(r16)
   4e2c8:	e00d883a 	mov	r6,fp
   4e2cc:	da000115 	stw	r8,4(sp)
   4e2d0:	a809883a 	mov	r4,r21
   4e2d4:	103ee83a 	callr	r2
   4e2d8:	102f883a 	mov	r23,r2
   4e2dc:	da000117 	ldw	r8,4(sp)
   4e2e0:	00bfe00e 	bge	zero,r2,4e264 <__alt_mem_epcs_flash_controller+0xfe03d264>
   4e2e4:	9de7c83a 	sub	r19,r19,r23
   4e2e8:	98001f26 	beq	r19,zero,4e368 <__sfvwrite_r+0x2fc>
   4e2ec:	a0800217 	ldw	r2,8(r20)
   4e2f0:	e5f9883a 	add	fp,fp,r23
   4e2f4:	95e5c83a 	sub	r18,r18,r23
   4e2f8:	15efc83a 	sub	r23,r2,r23
   4e2fc:	a5c00215 	stw	r23,8(r20)
   4e300:	b83f8726 	beq	r23,zero,4e120 <__alt_mem_epcs_flash_controller+0xfe03d120>
   4e304:	903fe11e 	bne	r18,zero,4e28c <__alt_mem_epcs_flash_controller+0xfe03d28c>
   4e308:	8f000017 	ldw	fp,0(r17)
   4e30c:	8c800117 	ldw	r18,4(r17)
   4e310:	0011883a 	mov	r8,zero
   4e314:	8c400204 	addi	r17,r17,8
   4e318:	003fdb06 	br	4e288 <__alt_mem_epcs_flash_controller+0xfe03d288>
   4e31c:	180d883a 	mov	r6,r3
   4e320:	e00b883a 	mov	r5,fp
   4e324:	da000115 	stw	r8,4(sp)
   4e328:	d8c00015 	stw	r3,0(sp)
   4e32c:	0045de00 	call	45de0 <memmove>
   4e330:	d8c00017 	ldw	r3,0(sp)
   4e334:	80800017 	ldw	r2,0(r16)
   4e338:	800b883a 	mov	r5,r16
   4e33c:	a809883a 	mov	r4,r21
   4e340:	10c5883a 	add	r2,r2,r3
   4e344:	80800015 	stw	r2,0(r16)
   4e348:	d8c00015 	stw	r3,0(sp)
   4e34c:	004d80c0 	call	4d80c <_fflush_r>
   4e350:	d8c00017 	ldw	r3,0(sp)
   4e354:	da000117 	ldw	r8,4(sp)
   4e358:	103fc21e 	bne	r2,zero,4e264 <__alt_mem_epcs_flash_controller+0xfe03d264>
   4e35c:	182f883a 	mov	r23,r3
   4e360:	9de7c83a 	sub	r19,r19,r23
   4e364:	983fe11e 	bne	r19,zero,4e2ec <__alt_mem_epcs_flash_controller+0xfe03d2ec>
   4e368:	800b883a 	mov	r5,r16
   4e36c:	a809883a 	mov	r4,r21
   4e370:	004d80c0 	call	4d80c <_fflush_r>
   4e374:	103fbb1e 	bne	r2,zero,4e264 <__alt_mem_epcs_flash_controller+0xfe03d264>
   4e378:	0011883a 	mov	r8,zero
   4e37c:	003fdb06 	br	4e2ec <__alt_mem_epcs_flash_controller+0xfe03d2ec>
   4e380:	94c0012e 	bgeu	r18,r19,4e388 <__sfvwrite_r+0x31c>
   4e384:	9027883a 	mov	r19,r18
   4e388:	980d883a 	mov	r6,r19
   4e38c:	e00b883a 	mov	r5,fp
   4e390:	0045de00 	call	45de0 <memmove>
   4e394:	80800217 	ldw	r2,8(r16)
   4e398:	80c00017 	ldw	r3,0(r16)
   4e39c:	14c5c83a 	sub	r2,r2,r19
   4e3a0:	1cc7883a 	add	r3,r3,r19
   4e3a4:	80800215 	stw	r2,8(r16)
   4e3a8:	80c00015 	stw	r3,0(r16)
   4e3ac:	10004326 	beq	r2,zero,4e4bc <__sfvwrite_r+0x450>
   4e3b0:	9805883a 	mov	r2,r19
   4e3b4:	003f8606 	br	4e1d0 <__alt_mem_epcs_flash_controller+0xfe03d1d0>
   4e3b8:	b00d883a 	mov	r6,r22
   4e3bc:	e00b883a 	mov	r5,fp
   4e3c0:	da000115 	stw	r8,4(sp)
   4e3c4:	0045de00 	call	45de0 <memmove>
   4e3c8:	80800217 	ldw	r2,8(r16)
   4e3cc:	80c00017 	ldw	r3,0(r16)
   4e3d0:	da000117 	ldw	r8,4(sp)
   4e3d4:	1585c83a 	sub	r2,r2,r22
   4e3d8:	1dad883a 	add	r22,r3,r22
   4e3dc:	80800215 	stw	r2,8(r16)
   4e3e0:	85800015 	stw	r22,0(r16)
   4e3e4:	003fbf06 	br	4e2e4 <__alt_mem_epcs_flash_controller+0xfe03d2e4>
   4e3e8:	81000017 	ldw	r4,0(r16)
   4e3ec:	9027883a 	mov	r19,r18
   4e3f0:	902f883a 	mov	r23,r18
   4e3f4:	003f6c06 	br	4e1a8 <__alt_mem_epcs_flash_controller+0xfe03d1a8>
   4e3f8:	900d883a 	mov	r6,r18
   4e3fc:	01400284 	movi	r5,10
   4e400:	e009883a 	mov	r4,fp
   4e404:	004e9a40 	call	4e9a4 <memchr>
   4e408:	10003e26 	beq	r2,zero,4e504 <__sfvwrite_r+0x498>
   4e40c:	10800044 	addi	r2,r2,1
   4e410:	1727c83a 	sub	r19,r2,fp
   4e414:	02000044 	movi	r8,1
   4e418:	003f9d06 	br	4e290 <__alt_mem_epcs_flash_controller+0xfe03d290>
   4e41c:	80800517 	ldw	r2,20(r16)
   4e420:	81400417 	ldw	r5,16(r16)
   4e424:	81c00017 	ldw	r7,0(r16)
   4e428:	10a7883a 	add	r19,r2,r2
   4e42c:	9885883a 	add	r2,r19,r2
   4e430:	1026d7fa 	srli	r19,r2,31
   4e434:	396dc83a 	sub	r22,r7,r5
   4e438:	b1000044 	addi	r4,r22,1
   4e43c:	9885883a 	add	r2,r19,r2
   4e440:	1027d07a 	srai	r19,r2,1
   4e444:	2485883a 	add	r2,r4,r18
   4e448:	980d883a 	mov	r6,r19
   4e44c:	9880022e 	bgeu	r19,r2,4e458 <__sfvwrite_r+0x3ec>
   4e450:	1027883a 	mov	r19,r2
   4e454:	100d883a 	mov	r6,r2
   4e458:	18c1000c 	andi	r3,r3,1024
   4e45c:	18001c26 	beq	r3,zero,4e4d0 <__sfvwrite_r+0x464>
   4e460:	300b883a 	mov	r5,r6
   4e464:	a809883a 	mov	r4,r21
   4e468:	00454100 	call	45410 <_malloc_r>
   4e46c:	102f883a 	mov	r23,r2
   4e470:	10002926 	beq	r2,zero,4e518 <__sfvwrite_r+0x4ac>
   4e474:	81400417 	ldw	r5,16(r16)
   4e478:	b00d883a 	mov	r6,r22
   4e47c:	1009883a 	mov	r4,r2
   4e480:	0045c980 	call	45c98 <memcpy>
   4e484:	8080030b 	ldhu	r2,12(r16)
   4e488:	00fedfc4 	movi	r3,-1153
   4e48c:	10c4703a 	and	r2,r2,r3
   4e490:	10802014 	ori	r2,r2,128
   4e494:	8080030d 	sth	r2,12(r16)
   4e498:	bd89883a 	add	r4,r23,r22
   4e49c:	9d8fc83a 	sub	r7,r19,r22
   4e4a0:	85c00415 	stw	r23,16(r16)
   4e4a4:	84c00515 	stw	r19,20(r16)
   4e4a8:	81000015 	stw	r4,0(r16)
   4e4ac:	9027883a 	mov	r19,r18
   4e4b0:	81c00215 	stw	r7,8(r16)
   4e4b4:	902f883a 	mov	r23,r18
   4e4b8:	003f3b06 	br	4e1a8 <__alt_mem_epcs_flash_controller+0xfe03d1a8>
   4e4bc:	800b883a 	mov	r5,r16
   4e4c0:	a809883a 	mov	r4,r21
   4e4c4:	004d80c0 	call	4d80c <_fflush_r>
   4e4c8:	103fb926 	beq	r2,zero,4e3b0 <__alt_mem_epcs_flash_controller+0xfe03d3b0>
   4e4cc:	003f6506 	br	4e264 <__alt_mem_epcs_flash_controller+0xfe03d264>
   4e4d0:	a809883a 	mov	r4,r21
   4e4d4:	00462580 	call	46258 <_realloc_r>
   4e4d8:	102f883a 	mov	r23,r2
   4e4dc:	103fee1e 	bne	r2,zero,4e498 <__alt_mem_epcs_flash_controller+0xfe03d498>
   4e4e0:	81400417 	ldw	r5,16(r16)
   4e4e4:	a809883a 	mov	r4,r21
   4e4e8:	004dd5c0 	call	4dd5c <_free_r>
   4e4ec:	8080030b 	ldhu	r2,12(r16)
   4e4f0:	00ffdfc4 	movi	r3,-129
   4e4f4:	1884703a 	and	r2,r3,r2
   4e4f8:	00c00304 	movi	r3,12
   4e4fc:	a8c00015 	stw	r3,0(r21)
   4e500:	003f5906 	br	4e268 <__alt_mem_epcs_flash_controller+0xfe03d268>
   4e504:	94c00044 	addi	r19,r18,1
   4e508:	02000044 	movi	r8,1
   4e50c:	003f6006 	br	4e290 <__alt_mem_epcs_flash_controller+0xfe03d290>
   4e510:	00bfffc4 	movi	r2,-1
   4e514:	003f0306 	br	4e124 <__alt_mem_epcs_flash_controller+0xfe03d124>
   4e518:	00800304 	movi	r2,12
   4e51c:	a8800015 	stw	r2,0(r21)
   4e520:	8080030b 	ldhu	r2,12(r16)
   4e524:	003f5006 	br	4e268 <__alt_mem_epcs_flash_controller+0xfe03d268>

0004e528 <_fwalk>:
   4e528:	defff704 	addi	sp,sp,-36
   4e52c:	dd000415 	stw	r20,16(sp)
   4e530:	dfc00815 	stw	ra,32(sp)
   4e534:	ddc00715 	stw	r23,28(sp)
   4e538:	dd800615 	stw	r22,24(sp)
   4e53c:	dd400515 	stw	r21,20(sp)
   4e540:	dcc00315 	stw	r19,12(sp)
   4e544:	dc800215 	stw	r18,8(sp)
   4e548:	dc400115 	stw	r17,4(sp)
   4e54c:	dc000015 	stw	r16,0(sp)
   4e550:	2500b804 	addi	r20,r4,736
   4e554:	a0002326 	beq	r20,zero,4e5e4 <_fwalk+0xbc>
   4e558:	282b883a 	mov	r21,r5
   4e55c:	002f883a 	mov	r23,zero
   4e560:	05800044 	movi	r22,1
   4e564:	04ffffc4 	movi	r19,-1
   4e568:	a4400117 	ldw	r17,4(r20)
   4e56c:	a4800217 	ldw	r18,8(r20)
   4e570:	8c7fffc4 	addi	r17,r17,-1
   4e574:	88000d16 	blt	r17,zero,4e5ac <_fwalk+0x84>
   4e578:	94000304 	addi	r16,r18,12
   4e57c:	94800384 	addi	r18,r18,14
   4e580:	8080000b 	ldhu	r2,0(r16)
   4e584:	8c7fffc4 	addi	r17,r17,-1
   4e588:	813ffd04 	addi	r4,r16,-12
   4e58c:	b080042e 	bgeu	r22,r2,4e5a0 <_fwalk+0x78>
   4e590:	9080000f 	ldh	r2,0(r18)
   4e594:	14c00226 	beq	r2,r19,4e5a0 <_fwalk+0x78>
   4e598:	a83ee83a 	callr	r21
   4e59c:	b8aeb03a 	or	r23,r23,r2
   4e5a0:	84001a04 	addi	r16,r16,104
   4e5a4:	94801a04 	addi	r18,r18,104
   4e5a8:	8cfff51e 	bne	r17,r19,4e580 <__alt_mem_epcs_flash_controller+0xfe03d580>
   4e5ac:	a5000017 	ldw	r20,0(r20)
   4e5b0:	a03fed1e 	bne	r20,zero,4e568 <__alt_mem_epcs_flash_controller+0xfe03d568>
   4e5b4:	b805883a 	mov	r2,r23
   4e5b8:	dfc00817 	ldw	ra,32(sp)
   4e5bc:	ddc00717 	ldw	r23,28(sp)
   4e5c0:	dd800617 	ldw	r22,24(sp)
   4e5c4:	dd400517 	ldw	r21,20(sp)
   4e5c8:	dd000417 	ldw	r20,16(sp)
   4e5cc:	dcc00317 	ldw	r19,12(sp)
   4e5d0:	dc800217 	ldw	r18,8(sp)
   4e5d4:	dc400117 	ldw	r17,4(sp)
   4e5d8:	dc000017 	ldw	r16,0(sp)
   4e5dc:	dec00904 	addi	sp,sp,36
   4e5e0:	f800283a 	ret
   4e5e4:	002f883a 	mov	r23,zero
   4e5e8:	003ff206 	br	4e5b4 <__alt_mem_epcs_flash_controller+0xfe03d5b4>

0004e5ec <_fwalk_reent>:
   4e5ec:	defff704 	addi	sp,sp,-36
   4e5f0:	dd000415 	stw	r20,16(sp)
   4e5f4:	dfc00815 	stw	ra,32(sp)
   4e5f8:	ddc00715 	stw	r23,28(sp)
   4e5fc:	dd800615 	stw	r22,24(sp)
   4e600:	dd400515 	stw	r21,20(sp)
   4e604:	dcc00315 	stw	r19,12(sp)
   4e608:	dc800215 	stw	r18,8(sp)
   4e60c:	dc400115 	stw	r17,4(sp)
   4e610:	dc000015 	stw	r16,0(sp)
   4e614:	2500b804 	addi	r20,r4,736
   4e618:	a0002326 	beq	r20,zero,4e6a8 <_fwalk_reent+0xbc>
   4e61c:	282b883a 	mov	r21,r5
   4e620:	2027883a 	mov	r19,r4
   4e624:	002f883a 	mov	r23,zero
   4e628:	05800044 	movi	r22,1
   4e62c:	04bfffc4 	movi	r18,-1
   4e630:	a4400117 	ldw	r17,4(r20)
   4e634:	a4000217 	ldw	r16,8(r20)
   4e638:	8c7fffc4 	addi	r17,r17,-1
   4e63c:	88000c16 	blt	r17,zero,4e670 <_fwalk_reent+0x84>
   4e640:	84000304 	addi	r16,r16,12
   4e644:	8080000b 	ldhu	r2,0(r16)
   4e648:	8c7fffc4 	addi	r17,r17,-1
   4e64c:	817ffd04 	addi	r5,r16,-12
   4e650:	b080052e 	bgeu	r22,r2,4e668 <_fwalk_reent+0x7c>
   4e654:	8080008f 	ldh	r2,2(r16)
   4e658:	9809883a 	mov	r4,r19
   4e65c:	14800226 	beq	r2,r18,4e668 <_fwalk_reent+0x7c>
   4e660:	a83ee83a 	callr	r21
   4e664:	b8aeb03a 	or	r23,r23,r2
   4e668:	84001a04 	addi	r16,r16,104
   4e66c:	8cbff51e 	bne	r17,r18,4e644 <__alt_mem_epcs_flash_controller+0xfe03d644>
   4e670:	a5000017 	ldw	r20,0(r20)
   4e674:	a03fee1e 	bne	r20,zero,4e630 <__alt_mem_epcs_flash_controller+0xfe03d630>
   4e678:	b805883a 	mov	r2,r23
   4e67c:	dfc00817 	ldw	ra,32(sp)
   4e680:	ddc00717 	ldw	r23,28(sp)
   4e684:	dd800617 	ldw	r22,24(sp)
   4e688:	dd400517 	ldw	r21,20(sp)
   4e68c:	dd000417 	ldw	r20,16(sp)
   4e690:	dcc00317 	ldw	r19,12(sp)
   4e694:	dc800217 	ldw	r18,8(sp)
   4e698:	dc400117 	ldw	r17,4(sp)
   4e69c:	dc000017 	ldw	r16,0(sp)
   4e6a0:	dec00904 	addi	sp,sp,36
   4e6a4:	f800283a 	ret
   4e6a8:	002f883a 	mov	r23,zero
   4e6ac:	003ff206 	br	4e678 <__alt_mem_epcs_flash_controller+0xfe03d678>

0004e6b0 <_gettimeofday_r>:
   4e6b0:	defffd04 	addi	sp,sp,-12
   4e6b4:	2805883a 	mov	r2,r5
   4e6b8:	dc000015 	stw	r16,0(sp)
   4e6bc:	040001b4 	movhi	r16,6
   4e6c0:	dc400115 	stw	r17,4(sp)
   4e6c4:	84069c04 	addi	r16,r16,6768
   4e6c8:	2023883a 	mov	r17,r4
   4e6cc:	300b883a 	mov	r5,r6
   4e6d0:	1009883a 	mov	r4,r2
   4e6d4:	dfc00215 	stw	ra,8(sp)
   4e6d8:	80000015 	stw	zero,0(r16)
   4e6dc:	0053f800 	call	53f80 <gettimeofday>
   4e6e0:	00ffffc4 	movi	r3,-1
   4e6e4:	10c00526 	beq	r2,r3,4e6fc <_gettimeofday_r+0x4c>
   4e6e8:	dfc00217 	ldw	ra,8(sp)
   4e6ec:	dc400117 	ldw	r17,4(sp)
   4e6f0:	dc000017 	ldw	r16,0(sp)
   4e6f4:	dec00304 	addi	sp,sp,12
   4e6f8:	f800283a 	ret
   4e6fc:	80c00017 	ldw	r3,0(r16)
   4e700:	183ff926 	beq	r3,zero,4e6e8 <__alt_mem_epcs_flash_controller+0xfe03d6e8>
   4e704:	88c00015 	stw	r3,0(r17)
   4e708:	003ff706 	br	4e6e8 <__alt_mem_epcs_flash_controller+0xfe03d6e8>

0004e70c <_setlocale_r>:
   4e70c:	30001b26 	beq	r6,zero,4e77c <_setlocale_r+0x70>
   4e710:	014001b4 	movhi	r5,6
   4e714:	defffe04 	addi	sp,sp,-8
   4e718:	29758e04 	addi	r5,r5,-10696
   4e71c:	3009883a 	mov	r4,r6
   4e720:	dc000015 	stw	r16,0(sp)
   4e724:	dfc00115 	stw	ra,4(sp)
   4e728:	3021883a 	mov	r16,r6
   4e72c:	0046d3c0 	call	46d3c <strcmp>
   4e730:	1000061e 	bne	r2,zero,4e74c <_setlocale_r+0x40>
   4e734:	008001b4 	movhi	r2,6
   4e738:	10b56704 	addi	r2,r2,-10852
   4e73c:	dfc00117 	ldw	ra,4(sp)
   4e740:	dc000017 	ldw	r16,0(sp)
   4e744:	dec00204 	addi	sp,sp,8
   4e748:	f800283a 	ret
   4e74c:	014001b4 	movhi	r5,6
   4e750:	29756704 	addi	r5,r5,-10852
   4e754:	8009883a 	mov	r4,r16
   4e758:	0046d3c0 	call	46d3c <strcmp>
   4e75c:	103ff526 	beq	r2,zero,4e734 <__alt_mem_epcs_flash_controller+0xfe03d734>
   4e760:	014001b4 	movhi	r5,6
   4e764:	2974ba04 	addi	r5,r5,-11544
   4e768:	8009883a 	mov	r4,r16
   4e76c:	0046d3c0 	call	46d3c <strcmp>
   4e770:	103ff026 	beq	r2,zero,4e734 <__alt_mem_epcs_flash_controller+0xfe03d734>
   4e774:	0005883a 	mov	r2,zero
   4e778:	003ff006 	br	4e73c <__alt_mem_epcs_flash_controller+0xfe03d73c>
   4e77c:	008001b4 	movhi	r2,6
   4e780:	10b56704 	addi	r2,r2,-10852
   4e784:	f800283a 	ret

0004e788 <__locale_charset>:
   4e788:	008001b4 	movhi	r2,6
   4e78c:	10b92604 	addi	r2,r2,-7016
   4e790:	f800283a 	ret

0004e794 <__locale_mb_cur_max>:
   4e794:	008001b4 	movhi	r2,6
   4e798:	10be3c04 	addi	r2,r2,-1808
   4e79c:	10800017 	ldw	r2,0(r2)
   4e7a0:	f800283a 	ret

0004e7a4 <__locale_msgcharset>:
   4e7a4:	008001b4 	movhi	r2,6
   4e7a8:	10b91e04 	addi	r2,r2,-7048
   4e7ac:	f800283a 	ret

0004e7b0 <__locale_cjk_lang>:
   4e7b0:	0005883a 	mov	r2,zero
   4e7b4:	f800283a 	ret

0004e7b8 <_localeconv_r>:
   4e7b8:	008001b4 	movhi	r2,6
   4e7bc:	10b92e04 	addi	r2,r2,-6984
   4e7c0:	f800283a 	ret

0004e7c4 <setlocale>:
   4e7c4:	008001b4 	movhi	r2,6
   4e7c8:	10be3804 	addi	r2,r2,-1824
   4e7cc:	280d883a 	mov	r6,r5
   4e7d0:	200b883a 	mov	r5,r4
   4e7d4:	11000017 	ldw	r4,0(r2)
   4e7d8:	004e70c1 	jmpi	4e70c <_setlocale_r>

0004e7dc <localeconv>:
   4e7dc:	008001b4 	movhi	r2,6
   4e7e0:	10b92e04 	addi	r2,r2,-6984
   4e7e4:	f800283a 	ret

0004e7e8 <__smakebuf_r>:
   4e7e8:	2880030b 	ldhu	r2,12(r5)
   4e7ec:	10c0008c 	andi	r3,r2,2
   4e7f0:	1800411e 	bne	r3,zero,4e8f8 <__smakebuf_r+0x110>
   4e7f4:	deffec04 	addi	sp,sp,-80
   4e7f8:	dc000f15 	stw	r16,60(sp)
   4e7fc:	2821883a 	mov	r16,r5
   4e800:	2940038f 	ldh	r5,14(r5)
   4e804:	dc401015 	stw	r17,64(sp)
   4e808:	dfc01315 	stw	ra,76(sp)
   4e80c:	dcc01215 	stw	r19,72(sp)
   4e810:	dc801115 	stw	r18,68(sp)
   4e814:	2023883a 	mov	r17,r4
   4e818:	28001c16 	blt	r5,zero,4e88c <__smakebuf_r+0xa4>
   4e81c:	d80d883a 	mov	r6,sp
   4e820:	0052d080 	call	52d08 <_fstat_r>
   4e824:	10001816 	blt	r2,zero,4e888 <__smakebuf_r+0xa0>
   4e828:	d8800117 	ldw	r2,4(sp)
   4e82c:	00e00014 	movui	r3,32768
   4e830:	10bc000c 	andi	r2,r2,61440
   4e834:	14c80020 	cmpeqi	r19,r2,8192
   4e838:	10c03726 	beq	r2,r3,4e918 <__smakebuf_r+0x130>
   4e83c:	80c0030b 	ldhu	r3,12(r16)
   4e840:	18c20014 	ori	r3,r3,2048
   4e844:	80c0030d 	sth	r3,12(r16)
   4e848:	00c80004 	movi	r3,8192
   4e84c:	10c0521e 	bne	r2,r3,4e998 <__smakebuf_r+0x1b0>
   4e850:	8140038f 	ldh	r5,14(r16)
   4e854:	8809883a 	mov	r4,r17
   4e858:	0052d640 	call	52d64 <_isatty_r>
   4e85c:	10004c26 	beq	r2,zero,4e990 <__smakebuf_r+0x1a8>
   4e860:	8080030b 	ldhu	r2,12(r16)
   4e864:	80c010c4 	addi	r3,r16,67
   4e868:	80c00015 	stw	r3,0(r16)
   4e86c:	10800054 	ori	r2,r2,1
   4e870:	8080030d 	sth	r2,12(r16)
   4e874:	00800044 	movi	r2,1
   4e878:	80c00415 	stw	r3,16(r16)
   4e87c:	80800515 	stw	r2,20(r16)
   4e880:	04810004 	movi	r18,1024
   4e884:	00000706 	br	4e8a4 <__smakebuf_r+0xbc>
   4e888:	8080030b 	ldhu	r2,12(r16)
   4e88c:	10c0200c 	andi	r3,r2,128
   4e890:	18001f1e 	bne	r3,zero,4e910 <__smakebuf_r+0x128>
   4e894:	04810004 	movi	r18,1024
   4e898:	10820014 	ori	r2,r2,2048
   4e89c:	8080030d 	sth	r2,12(r16)
   4e8a0:	0027883a 	mov	r19,zero
   4e8a4:	900b883a 	mov	r5,r18
   4e8a8:	8809883a 	mov	r4,r17
   4e8ac:	00454100 	call	45410 <_malloc_r>
   4e8b0:	10002c26 	beq	r2,zero,4e964 <__smakebuf_r+0x17c>
   4e8b4:	80c0030b 	ldhu	r3,12(r16)
   4e8b8:	01000174 	movhi	r4,5
   4e8bc:	21362804 	addi	r4,r4,-10080
   4e8c0:	89000f15 	stw	r4,60(r17)
   4e8c4:	18c02014 	ori	r3,r3,128
   4e8c8:	80c0030d 	sth	r3,12(r16)
   4e8cc:	80800015 	stw	r2,0(r16)
   4e8d0:	80800415 	stw	r2,16(r16)
   4e8d4:	84800515 	stw	r18,20(r16)
   4e8d8:	98001a1e 	bne	r19,zero,4e944 <__smakebuf_r+0x15c>
   4e8dc:	dfc01317 	ldw	ra,76(sp)
   4e8e0:	dcc01217 	ldw	r19,72(sp)
   4e8e4:	dc801117 	ldw	r18,68(sp)
   4e8e8:	dc401017 	ldw	r17,64(sp)
   4e8ec:	dc000f17 	ldw	r16,60(sp)
   4e8f0:	dec01404 	addi	sp,sp,80
   4e8f4:	f800283a 	ret
   4e8f8:	288010c4 	addi	r2,r5,67
   4e8fc:	28800015 	stw	r2,0(r5)
   4e900:	28800415 	stw	r2,16(r5)
   4e904:	00800044 	movi	r2,1
   4e908:	28800515 	stw	r2,20(r5)
   4e90c:	f800283a 	ret
   4e910:	04801004 	movi	r18,64
   4e914:	003fe006 	br	4e898 <__alt_mem_epcs_flash_controller+0xfe03d898>
   4e918:	81000a17 	ldw	r4,40(r16)
   4e91c:	00c00174 	movhi	r3,5
   4e920:	18ff4e04 	addi	r3,r3,-712
   4e924:	20ffc51e 	bne	r4,r3,4e83c <__alt_mem_epcs_flash_controller+0xfe03d83c>
   4e928:	8080030b 	ldhu	r2,12(r16)
   4e92c:	04810004 	movi	r18,1024
   4e930:	84801315 	stw	r18,76(r16)
   4e934:	1484b03a 	or	r2,r2,r18
   4e938:	8080030d 	sth	r2,12(r16)
   4e93c:	0027883a 	mov	r19,zero
   4e940:	003fd806 	br	4e8a4 <__alt_mem_epcs_flash_controller+0xfe03d8a4>
   4e944:	8140038f 	ldh	r5,14(r16)
   4e948:	8809883a 	mov	r4,r17
   4e94c:	0052d640 	call	52d64 <_isatty_r>
   4e950:	103fe226 	beq	r2,zero,4e8dc <__alt_mem_epcs_flash_controller+0xfe03d8dc>
   4e954:	8080030b 	ldhu	r2,12(r16)
   4e958:	10800054 	ori	r2,r2,1
   4e95c:	8080030d 	sth	r2,12(r16)
   4e960:	003fde06 	br	4e8dc <__alt_mem_epcs_flash_controller+0xfe03d8dc>
   4e964:	8080030b 	ldhu	r2,12(r16)
   4e968:	10c0800c 	andi	r3,r2,512
   4e96c:	183fdb1e 	bne	r3,zero,4e8dc <__alt_mem_epcs_flash_controller+0xfe03d8dc>
   4e970:	10800094 	ori	r2,r2,2
   4e974:	80c010c4 	addi	r3,r16,67
   4e978:	8080030d 	sth	r2,12(r16)
   4e97c:	00800044 	movi	r2,1
   4e980:	80c00015 	stw	r3,0(r16)
   4e984:	80c00415 	stw	r3,16(r16)
   4e988:	80800515 	stw	r2,20(r16)
   4e98c:	003fd306 	br	4e8dc <__alt_mem_epcs_flash_controller+0xfe03d8dc>
   4e990:	04810004 	movi	r18,1024
   4e994:	003fc306 	br	4e8a4 <__alt_mem_epcs_flash_controller+0xfe03d8a4>
   4e998:	0027883a 	mov	r19,zero
   4e99c:	04810004 	movi	r18,1024
   4e9a0:	003fc006 	br	4e8a4 <__alt_mem_epcs_flash_controller+0xfe03d8a4>

0004e9a4 <memchr>:
   4e9a4:	208000cc 	andi	r2,r4,3
   4e9a8:	280f883a 	mov	r7,r5
   4e9ac:	10003426 	beq	r2,zero,4ea80 <memchr+0xdc>
   4e9b0:	30bfffc4 	addi	r2,r6,-1
   4e9b4:	30001a26 	beq	r6,zero,4ea20 <memchr+0x7c>
   4e9b8:	20c00003 	ldbu	r3,0(r4)
   4e9bc:	29803fcc 	andi	r6,r5,255
   4e9c0:	30c0051e 	bne	r6,r3,4e9d8 <memchr+0x34>
   4e9c4:	00001806 	br	4ea28 <memchr+0x84>
   4e9c8:	10001526 	beq	r2,zero,4ea20 <memchr+0x7c>
   4e9cc:	20c00003 	ldbu	r3,0(r4)
   4e9d0:	10bfffc4 	addi	r2,r2,-1
   4e9d4:	30c01426 	beq	r6,r3,4ea28 <memchr+0x84>
   4e9d8:	21000044 	addi	r4,r4,1
   4e9dc:	20c000cc 	andi	r3,r4,3
   4e9e0:	183ff91e 	bne	r3,zero,4e9c8 <__alt_mem_epcs_flash_controller+0xfe03d9c8>
   4e9e4:	020000c4 	movi	r8,3
   4e9e8:	40801136 	bltu	r8,r2,4ea30 <memchr+0x8c>
   4e9ec:	10000c26 	beq	r2,zero,4ea20 <memchr+0x7c>
   4e9f0:	20c00003 	ldbu	r3,0(r4)
   4e9f4:	29403fcc 	andi	r5,r5,255
   4e9f8:	28c00b26 	beq	r5,r3,4ea28 <memchr+0x84>
   4e9fc:	20c00044 	addi	r3,r4,1
   4ea00:	39803fcc 	andi	r6,r7,255
   4ea04:	2089883a 	add	r4,r4,r2
   4ea08:	00000306 	br	4ea18 <memchr+0x74>
   4ea0c:	18c00044 	addi	r3,r3,1
   4ea10:	197fffc3 	ldbu	r5,-1(r3)
   4ea14:	31400526 	beq	r6,r5,4ea2c <memchr+0x88>
   4ea18:	1805883a 	mov	r2,r3
   4ea1c:	20fffb1e 	bne	r4,r3,4ea0c <__alt_mem_epcs_flash_controller+0xfe03da0c>
   4ea20:	0005883a 	mov	r2,zero
   4ea24:	f800283a 	ret
   4ea28:	2005883a 	mov	r2,r4
   4ea2c:	f800283a 	ret
   4ea30:	28c03fcc 	andi	r3,r5,255
   4ea34:	1812923a 	slli	r9,r3,8
   4ea38:	02ffbff4 	movhi	r11,65279
   4ea3c:	02a02074 	movhi	r10,32897
   4ea40:	48d2b03a 	or	r9,r9,r3
   4ea44:	4806943a 	slli	r3,r9,16
   4ea48:	5affbfc4 	addi	r11,r11,-257
   4ea4c:	52a02004 	addi	r10,r10,-32640
   4ea50:	48d2b03a 	or	r9,r9,r3
   4ea54:	20c00017 	ldw	r3,0(r4)
   4ea58:	48c6f03a 	xor	r3,r9,r3
   4ea5c:	1acd883a 	add	r6,r3,r11
   4ea60:	00c6303a 	nor	r3,zero,r3
   4ea64:	30c6703a 	and	r3,r6,r3
   4ea68:	1a86703a 	and	r3,r3,r10
   4ea6c:	183fe01e 	bne	r3,zero,4e9f0 <__alt_mem_epcs_flash_controller+0xfe03d9f0>
   4ea70:	10bfff04 	addi	r2,r2,-4
   4ea74:	21000104 	addi	r4,r4,4
   4ea78:	40bff636 	bltu	r8,r2,4ea54 <__alt_mem_epcs_flash_controller+0xfe03da54>
   4ea7c:	003fdb06 	br	4e9ec <__alt_mem_epcs_flash_controller+0xfe03d9ec>
   4ea80:	3005883a 	mov	r2,r6
   4ea84:	003fd706 	br	4e9e4 <__alt_mem_epcs_flash_controller+0xfe03d9e4>

0004ea88 <_Balloc>:
   4ea88:	20801317 	ldw	r2,76(r4)
   4ea8c:	defffc04 	addi	sp,sp,-16
   4ea90:	dc400115 	stw	r17,4(sp)
   4ea94:	dc000015 	stw	r16,0(sp)
   4ea98:	dfc00315 	stw	ra,12(sp)
   4ea9c:	dc800215 	stw	r18,8(sp)
   4eaa0:	2023883a 	mov	r17,r4
   4eaa4:	2821883a 	mov	r16,r5
   4eaa8:	10000f26 	beq	r2,zero,4eae8 <_Balloc+0x60>
   4eaac:	8407883a 	add	r3,r16,r16
   4eab0:	18c7883a 	add	r3,r3,r3
   4eab4:	10c7883a 	add	r3,r2,r3
   4eab8:	18800017 	ldw	r2,0(r3)
   4eabc:	10001126 	beq	r2,zero,4eb04 <_Balloc+0x7c>
   4eac0:	11000017 	ldw	r4,0(r2)
   4eac4:	19000015 	stw	r4,0(r3)
   4eac8:	10000415 	stw	zero,16(r2)
   4eacc:	10000315 	stw	zero,12(r2)
   4ead0:	dfc00317 	ldw	ra,12(sp)
   4ead4:	dc800217 	ldw	r18,8(sp)
   4ead8:	dc400117 	ldw	r17,4(sp)
   4eadc:	dc000017 	ldw	r16,0(sp)
   4eae0:	dec00404 	addi	sp,sp,16
   4eae4:	f800283a 	ret
   4eae8:	01800844 	movi	r6,33
   4eaec:	01400104 	movi	r5,4
   4eaf0:	00450e00 	call	450e0 <_calloc_r>
   4eaf4:	88801315 	stw	r2,76(r17)
   4eaf8:	103fec1e 	bne	r2,zero,4eaac <__alt_mem_epcs_flash_controller+0xfe03daac>
   4eafc:	0005883a 	mov	r2,zero
   4eb00:	003ff306 	br	4ead0 <__alt_mem_epcs_flash_controller+0xfe03dad0>
   4eb04:	01400044 	movi	r5,1
   4eb08:	2c24983a 	sll	r18,r5,r16
   4eb0c:	8809883a 	mov	r4,r17
   4eb10:	91800144 	addi	r6,r18,5
   4eb14:	318d883a 	add	r6,r6,r6
   4eb18:	318d883a 	add	r6,r6,r6
   4eb1c:	00450e00 	call	450e0 <_calloc_r>
   4eb20:	103ff626 	beq	r2,zero,4eafc <__alt_mem_epcs_flash_controller+0xfe03dafc>
   4eb24:	14000115 	stw	r16,4(r2)
   4eb28:	14800215 	stw	r18,8(r2)
   4eb2c:	003fe606 	br	4eac8 <__alt_mem_epcs_flash_controller+0xfe03dac8>

0004eb30 <_Bfree>:
   4eb30:	28000826 	beq	r5,zero,4eb54 <_Bfree+0x24>
   4eb34:	28c00117 	ldw	r3,4(r5)
   4eb38:	20801317 	ldw	r2,76(r4)
   4eb3c:	18c7883a 	add	r3,r3,r3
   4eb40:	18c7883a 	add	r3,r3,r3
   4eb44:	10c5883a 	add	r2,r2,r3
   4eb48:	10c00017 	ldw	r3,0(r2)
   4eb4c:	28c00015 	stw	r3,0(r5)
   4eb50:	11400015 	stw	r5,0(r2)
   4eb54:	f800283a 	ret

0004eb58 <__multadd>:
   4eb58:	defffa04 	addi	sp,sp,-24
   4eb5c:	dc800315 	stw	r18,12(sp)
   4eb60:	dc400215 	stw	r17,8(sp)
   4eb64:	dc000115 	stw	r16,4(sp)
   4eb68:	2823883a 	mov	r17,r5
   4eb6c:	2c000417 	ldw	r16,16(r5)
   4eb70:	dfc00515 	stw	ra,20(sp)
   4eb74:	dcc00415 	stw	r19,16(sp)
   4eb78:	2025883a 	mov	r18,r4
   4eb7c:	29400504 	addi	r5,r5,20
   4eb80:	0011883a 	mov	r8,zero
   4eb84:	28c00017 	ldw	r3,0(r5)
   4eb88:	29400104 	addi	r5,r5,4
   4eb8c:	42000044 	addi	r8,r8,1
   4eb90:	18bfffcc 	andi	r2,r3,65535
   4eb94:	1185383a 	mul	r2,r2,r6
   4eb98:	1806d43a 	srli	r3,r3,16
   4eb9c:	11cf883a 	add	r7,r2,r7
   4eba0:	3808d43a 	srli	r4,r7,16
   4eba4:	1987383a 	mul	r3,r3,r6
   4eba8:	38bfffcc 	andi	r2,r7,65535
   4ebac:	1907883a 	add	r3,r3,r4
   4ebb0:	1808943a 	slli	r4,r3,16
   4ebb4:	180ed43a 	srli	r7,r3,16
   4ebb8:	2085883a 	add	r2,r4,r2
   4ebbc:	28bfff15 	stw	r2,-4(r5)
   4ebc0:	443ff016 	blt	r8,r16,4eb84 <__alt_mem_epcs_flash_controller+0xfe03db84>
   4ebc4:	38000926 	beq	r7,zero,4ebec <__multadd+0x94>
   4ebc8:	88800217 	ldw	r2,8(r17)
   4ebcc:	80800f0e 	bge	r16,r2,4ec0c <__multadd+0xb4>
   4ebd0:	80800144 	addi	r2,r16,5
   4ebd4:	1085883a 	add	r2,r2,r2
   4ebd8:	1085883a 	add	r2,r2,r2
   4ebdc:	8885883a 	add	r2,r17,r2
   4ebe0:	11c00015 	stw	r7,0(r2)
   4ebe4:	84000044 	addi	r16,r16,1
   4ebe8:	8c000415 	stw	r16,16(r17)
   4ebec:	8805883a 	mov	r2,r17
   4ebf0:	dfc00517 	ldw	ra,20(sp)
   4ebf4:	dcc00417 	ldw	r19,16(sp)
   4ebf8:	dc800317 	ldw	r18,12(sp)
   4ebfc:	dc400217 	ldw	r17,8(sp)
   4ec00:	dc000117 	ldw	r16,4(sp)
   4ec04:	dec00604 	addi	sp,sp,24
   4ec08:	f800283a 	ret
   4ec0c:	89400117 	ldw	r5,4(r17)
   4ec10:	9009883a 	mov	r4,r18
   4ec14:	d9c00015 	stw	r7,0(sp)
   4ec18:	29400044 	addi	r5,r5,1
   4ec1c:	004ea880 	call	4ea88 <_Balloc>
   4ec20:	89800417 	ldw	r6,16(r17)
   4ec24:	89400304 	addi	r5,r17,12
   4ec28:	11000304 	addi	r4,r2,12
   4ec2c:	31800084 	addi	r6,r6,2
   4ec30:	318d883a 	add	r6,r6,r6
   4ec34:	318d883a 	add	r6,r6,r6
   4ec38:	1027883a 	mov	r19,r2
   4ec3c:	0045c980 	call	45c98 <memcpy>
   4ec40:	d9c00017 	ldw	r7,0(sp)
   4ec44:	88000a26 	beq	r17,zero,4ec70 <__multadd+0x118>
   4ec48:	88c00117 	ldw	r3,4(r17)
   4ec4c:	90801317 	ldw	r2,76(r18)
   4ec50:	18c7883a 	add	r3,r3,r3
   4ec54:	18c7883a 	add	r3,r3,r3
   4ec58:	10c5883a 	add	r2,r2,r3
   4ec5c:	10c00017 	ldw	r3,0(r2)
   4ec60:	88c00015 	stw	r3,0(r17)
   4ec64:	14400015 	stw	r17,0(r2)
   4ec68:	9823883a 	mov	r17,r19
   4ec6c:	003fd806 	br	4ebd0 <__alt_mem_epcs_flash_controller+0xfe03dbd0>
   4ec70:	9823883a 	mov	r17,r19
   4ec74:	003fd606 	br	4ebd0 <__alt_mem_epcs_flash_controller+0xfe03dbd0>

0004ec78 <__s2b>:
   4ec78:	defff904 	addi	sp,sp,-28
   4ec7c:	dc400115 	stw	r17,4(sp)
   4ec80:	dc000015 	stw	r16,0(sp)
   4ec84:	2023883a 	mov	r17,r4
   4ec88:	2821883a 	mov	r16,r5
   4ec8c:	39000204 	addi	r4,r7,8
   4ec90:	01400244 	movi	r5,9
   4ec94:	dcc00315 	stw	r19,12(sp)
   4ec98:	dc800215 	stw	r18,8(sp)
   4ec9c:	dfc00615 	stw	ra,24(sp)
   4eca0:	dd400515 	stw	r21,20(sp)
   4eca4:	dd000415 	stw	r20,16(sp)
   4eca8:	3825883a 	mov	r18,r7
   4ecac:	3027883a 	mov	r19,r6
   4ecb0:	00429a00 	call	429a0 <__divsi3>
   4ecb4:	00c00044 	movi	r3,1
   4ecb8:	000b883a 	mov	r5,zero
   4ecbc:	1880030e 	bge	r3,r2,4eccc <__s2b+0x54>
   4ecc0:	18c7883a 	add	r3,r3,r3
   4ecc4:	29400044 	addi	r5,r5,1
   4ecc8:	18bffd16 	blt	r3,r2,4ecc0 <__alt_mem_epcs_flash_controller+0xfe03dcc0>
   4eccc:	8809883a 	mov	r4,r17
   4ecd0:	004ea880 	call	4ea88 <_Balloc>
   4ecd4:	d8c00717 	ldw	r3,28(sp)
   4ecd8:	10c00515 	stw	r3,20(r2)
   4ecdc:	00c00044 	movi	r3,1
   4ece0:	10c00415 	stw	r3,16(r2)
   4ece4:	00c00244 	movi	r3,9
   4ece8:	1cc0210e 	bge	r3,r19,4ed70 <__s2b+0xf8>
   4ecec:	80eb883a 	add	r21,r16,r3
   4ecf0:	a829883a 	mov	r20,r21
   4ecf4:	84e1883a 	add	r16,r16,r19
   4ecf8:	a1c00007 	ldb	r7,0(r20)
   4ecfc:	01800284 	movi	r6,10
   4ed00:	a5000044 	addi	r20,r20,1
   4ed04:	100b883a 	mov	r5,r2
   4ed08:	39fff404 	addi	r7,r7,-48
   4ed0c:	8809883a 	mov	r4,r17
   4ed10:	004eb580 	call	4eb58 <__multadd>
   4ed14:	a43ff81e 	bne	r20,r16,4ecf8 <__alt_mem_epcs_flash_controller+0xfe03dcf8>
   4ed18:	ace1883a 	add	r16,r21,r19
   4ed1c:	843ffe04 	addi	r16,r16,-8
   4ed20:	9c800a0e 	bge	r19,r18,4ed4c <__s2b+0xd4>
   4ed24:	94e5c83a 	sub	r18,r18,r19
   4ed28:	84a5883a 	add	r18,r16,r18
   4ed2c:	81c00007 	ldb	r7,0(r16)
   4ed30:	01800284 	movi	r6,10
   4ed34:	84000044 	addi	r16,r16,1
   4ed38:	100b883a 	mov	r5,r2
   4ed3c:	39fff404 	addi	r7,r7,-48
   4ed40:	8809883a 	mov	r4,r17
   4ed44:	004eb580 	call	4eb58 <__multadd>
   4ed48:	84bff81e 	bne	r16,r18,4ed2c <__alt_mem_epcs_flash_controller+0xfe03dd2c>
   4ed4c:	dfc00617 	ldw	ra,24(sp)
   4ed50:	dd400517 	ldw	r21,20(sp)
   4ed54:	dd000417 	ldw	r20,16(sp)
   4ed58:	dcc00317 	ldw	r19,12(sp)
   4ed5c:	dc800217 	ldw	r18,8(sp)
   4ed60:	dc400117 	ldw	r17,4(sp)
   4ed64:	dc000017 	ldw	r16,0(sp)
   4ed68:	dec00704 	addi	sp,sp,28
   4ed6c:	f800283a 	ret
   4ed70:	84000284 	addi	r16,r16,10
   4ed74:	1827883a 	mov	r19,r3
   4ed78:	003fe906 	br	4ed20 <__alt_mem_epcs_flash_controller+0xfe03dd20>

0004ed7c <__hi0bits>:
   4ed7c:	20bfffec 	andhi	r2,r4,65535
   4ed80:	1000141e 	bne	r2,zero,4edd4 <__hi0bits+0x58>
   4ed84:	2008943a 	slli	r4,r4,16
   4ed88:	00800404 	movi	r2,16
   4ed8c:	20ffc02c 	andhi	r3,r4,65280
   4ed90:	1800021e 	bne	r3,zero,4ed9c <__hi0bits+0x20>
   4ed94:	2008923a 	slli	r4,r4,8
   4ed98:	10800204 	addi	r2,r2,8
   4ed9c:	20fc002c 	andhi	r3,r4,61440
   4eda0:	1800021e 	bne	r3,zero,4edac <__hi0bits+0x30>
   4eda4:	2008913a 	slli	r4,r4,4
   4eda8:	10800104 	addi	r2,r2,4
   4edac:	20f0002c 	andhi	r3,r4,49152
   4edb0:	1800031e 	bne	r3,zero,4edc0 <__hi0bits+0x44>
   4edb4:	2109883a 	add	r4,r4,r4
   4edb8:	10800084 	addi	r2,r2,2
   4edbc:	2109883a 	add	r4,r4,r4
   4edc0:	20000316 	blt	r4,zero,4edd0 <__hi0bits+0x54>
   4edc4:	2110002c 	andhi	r4,r4,16384
   4edc8:	2000041e 	bne	r4,zero,4eddc <__hi0bits+0x60>
   4edcc:	00800804 	movi	r2,32
   4edd0:	f800283a 	ret
   4edd4:	0005883a 	mov	r2,zero
   4edd8:	003fec06 	br	4ed8c <__alt_mem_epcs_flash_controller+0xfe03dd8c>
   4eddc:	10800044 	addi	r2,r2,1
   4ede0:	f800283a 	ret

0004ede4 <__lo0bits>:
   4ede4:	20c00017 	ldw	r3,0(r4)
   4ede8:	188001cc 	andi	r2,r3,7
   4edec:	10000826 	beq	r2,zero,4ee10 <__lo0bits+0x2c>
   4edf0:	1880004c 	andi	r2,r3,1
   4edf4:	1000211e 	bne	r2,zero,4ee7c <__lo0bits+0x98>
   4edf8:	1880008c 	andi	r2,r3,2
   4edfc:	1000211e 	bne	r2,zero,4ee84 <__lo0bits+0xa0>
   4ee00:	1806d0ba 	srli	r3,r3,2
   4ee04:	00800084 	movi	r2,2
   4ee08:	20c00015 	stw	r3,0(r4)
   4ee0c:	f800283a 	ret
   4ee10:	18bfffcc 	andi	r2,r3,65535
   4ee14:	10001326 	beq	r2,zero,4ee64 <__lo0bits+0x80>
   4ee18:	0005883a 	mov	r2,zero
   4ee1c:	19403fcc 	andi	r5,r3,255
   4ee20:	2800021e 	bne	r5,zero,4ee2c <__lo0bits+0x48>
   4ee24:	1806d23a 	srli	r3,r3,8
   4ee28:	10800204 	addi	r2,r2,8
   4ee2c:	194003cc 	andi	r5,r3,15
   4ee30:	2800021e 	bne	r5,zero,4ee3c <__lo0bits+0x58>
   4ee34:	1806d13a 	srli	r3,r3,4
   4ee38:	10800104 	addi	r2,r2,4
   4ee3c:	194000cc 	andi	r5,r3,3
   4ee40:	2800021e 	bne	r5,zero,4ee4c <__lo0bits+0x68>
   4ee44:	1806d0ba 	srli	r3,r3,2
   4ee48:	10800084 	addi	r2,r2,2
   4ee4c:	1940004c 	andi	r5,r3,1
   4ee50:	2800081e 	bne	r5,zero,4ee74 <__lo0bits+0x90>
   4ee54:	1806d07a 	srli	r3,r3,1
   4ee58:	1800051e 	bne	r3,zero,4ee70 <__lo0bits+0x8c>
   4ee5c:	00800804 	movi	r2,32
   4ee60:	f800283a 	ret
   4ee64:	1806d43a 	srli	r3,r3,16
   4ee68:	00800404 	movi	r2,16
   4ee6c:	003feb06 	br	4ee1c <__alt_mem_epcs_flash_controller+0xfe03de1c>
   4ee70:	10800044 	addi	r2,r2,1
   4ee74:	20c00015 	stw	r3,0(r4)
   4ee78:	f800283a 	ret
   4ee7c:	0005883a 	mov	r2,zero
   4ee80:	f800283a 	ret
   4ee84:	1806d07a 	srli	r3,r3,1
   4ee88:	00800044 	movi	r2,1
   4ee8c:	20c00015 	stw	r3,0(r4)
   4ee90:	f800283a 	ret

0004ee94 <__i2b>:
   4ee94:	defffd04 	addi	sp,sp,-12
   4ee98:	dc000015 	stw	r16,0(sp)
   4ee9c:	04000044 	movi	r16,1
   4eea0:	dc400115 	stw	r17,4(sp)
   4eea4:	2823883a 	mov	r17,r5
   4eea8:	800b883a 	mov	r5,r16
   4eeac:	dfc00215 	stw	ra,8(sp)
   4eeb0:	004ea880 	call	4ea88 <_Balloc>
   4eeb4:	14400515 	stw	r17,20(r2)
   4eeb8:	14000415 	stw	r16,16(r2)
   4eebc:	dfc00217 	ldw	ra,8(sp)
   4eec0:	dc400117 	ldw	r17,4(sp)
   4eec4:	dc000017 	ldw	r16,0(sp)
   4eec8:	dec00304 	addi	sp,sp,12
   4eecc:	f800283a 	ret

0004eed0 <__multiply>:
   4eed0:	defffa04 	addi	sp,sp,-24
   4eed4:	dcc00315 	stw	r19,12(sp)
   4eed8:	dc800215 	stw	r18,8(sp)
   4eedc:	34c00417 	ldw	r19,16(r6)
   4eee0:	2c800417 	ldw	r18,16(r5)
   4eee4:	dd000415 	stw	r20,16(sp)
   4eee8:	dc400115 	stw	r17,4(sp)
   4eeec:	dfc00515 	stw	ra,20(sp)
   4eef0:	dc000015 	stw	r16,0(sp)
   4eef4:	2829883a 	mov	r20,r5
   4eef8:	3023883a 	mov	r17,r6
   4eefc:	94c0050e 	bge	r18,r19,4ef14 <__multiply+0x44>
   4ef00:	9007883a 	mov	r3,r18
   4ef04:	3029883a 	mov	r20,r6
   4ef08:	9825883a 	mov	r18,r19
   4ef0c:	2823883a 	mov	r17,r5
   4ef10:	1827883a 	mov	r19,r3
   4ef14:	a0800217 	ldw	r2,8(r20)
   4ef18:	94e1883a 	add	r16,r18,r19
   4ef1c:	a1400117 	ldw	r5,4(r20)
   4ef20:	1400010e 	bge	r2,r16,4ef28 <__multiply+0x58>
   4ef24:	29400044 	addi	r5,r5,1
   4ef28:	004ea880 	call	4ea88 <_Balloc>
   4ef2c:	8415883a 	add	r10,r16,r16
   4ef30:	12c00504 	addi	r11,r2,20
   4ef34:	5295883a 	add	r10,r10,r10
   4ef38:	5a95883a 	add	r10,r11,r10
   4ef3c:	5807883a 	mov	r3,r11
   4ef40:	5a80032e 	bgeu	r11,r10,4ef50 <__multiply+0x80>
   4ef44:	18000015 	stw	zero,0(r3)
   4ef48:	18c00104 	addi	r3,r3,4
   4ef4c:	1abffd36 	bltu	r3,r10,4ef44 <__alt_mem_epcs_flash_controller+0xfe03df44>
   4ef50:	9ce7883a 	add	r19,r19,r19
   4ef54:	94a5883a 	add	r18,r18,r18
   4ef58:	89800504 	addi	r6,r17,20
   4ef5c:	9ce7883a 	add	r19,r19,r19
   4ef60:	a3400504 	addi	r13,r20,20
   4ef64:	94a5883a 	add	r18,r18,r18
   4ef68:	34d9883a 	add	r12,r6,r19
   4ef6c:	6c93883a 	add	r9,r13,r18
   4ef70:	3300422e 	bgeu	r6,r12,4f07c <__multiply+0x1ac>
   4ef74:	37c00017 	ldw	ra,0(r6)
   4ef78:	fbffffcc 	andi	r15,ra,65535
   4ef7c:	78001b26 	beq	r15,zero,4efec <__multiply+0x11c>
   4ef80:	5811883a 	mov	r8,r11
   4ef84:	681d883a 	mov	r14,r13
   4ef88:	000f883a 	mov	r7,zero
   4ef8c:	71000017 	ldw	r4,0(r14)
   4ef90:	40c00017 	ldw	r3,0(r8)
   4ef94:	73800104 	addi	r14,r14,4
   4ef98:	217fffcc 	andi	r5,r4,65535
   4ef9c:	2bcb383a 	mul	r5,r5,r15
   4efa0:	2008d43a 	srli	r4,r4,16
   4efa4:	1c7fffcc 	andi	r17,r3,65535
   4efa8:	2c4b883a 	add	r5,r5,r17
   4efac:	29cb883a 	add	r5,r5,r7
   4efb0:	23c9383a 	mul	r4,r4,r15
   4efb4:	1806d43a 	srli	r3,r3,16
   4efb8:	280ed43a 	srli	r7,r5,16
   4efbc:	297fffcc 	andi	r5,r5,65535
   4efc0:	20c7883a 	add	r3,r4,r3
   4efc4:	19c7883a 	add	r3,r3,r7
   4efc8:	1808943a 	slli	r4,r3,16
   4efcc:	4023883a 	mov	r17,r8
   4efd0:	180ed43a 	srli	r7,r3,16
   4efd4:	214ab03a 	or	r5,r4,r5
   4efd8:	41400015 	stw	r5,0(r8)
   4efdc:	42000104 	addi	r8,r8,4
   4efe0:	727fea36 	bltu	r14,r9,4ef8c <__alt_mem_epcs_flash_controller+0xfe03df8c>
   4efe4:	89c00115 	stw	r7,4(r17)
   4efe8:	37c00017 	ldw	ra,0(r6)
   4efec:	f83ed43a 	srli	ra,ra,16
   4eff0:	f8001f26 	beq	ra,zero,4f070 <__multiply+0x1a0>
   4eff4:	58c00017 	ldw	r3,0(r11)
   4eff8:	681d883a 	mov	r14,r13
   4effc:	581f883a 	mov	r15,r11
   4f000:	1811883a 	mov	r8,r3
   4f004:	5825883a 	mov	r18,r11
   4f008:	000f883a 	mov	r7,zero
   4f00c:	00000106 	br	4f014 <__multiply+0x144>
   4f010:	8825883a 	mov	r18,r17
   4f014:	7140000b 	ldhu	r5,0(r14)
   4f018:	4010d43a 	srli	r8,r8,16
   4f01c:	193fffcc 	andi	r4,r3,65535
   4f020:	2fcb383a 	mul	r5,r5,ra
   4f024:	7bc00104 	addi	r15,r15,4
   4f028:	73800104 	addi	r14,r14,4
   4f02c:	2a0b883a 	add	r5,r5,r8
   4f030:	29cb883a 	add	r5,r5,r7
   4f034:	2806943a 	slli	r3,r5,16
   4f038:	94400104 	addi	r17,r18,4
   4f03c:	280ad43a 	srli	r5,r5,16
   4f040:	1908b03a 	or	r4,r3,r4
   4f044:	793fff15 	stw	r4,-4(r15)
   4f048:	70ffff17 	ldw	r3,-4(r14)
   4f04c:	8a000017 	ldw	r8,0(r17)
   4f050:	1806d43a 	srli	r3,r3,16
   4f054:	413fffcc 	andi	r4,r8,65535
   4f058:	1fc7383a 	mul	r3,r3,ra
   4f05c:	1907883a 	add	r3,r3,r4
   4f060:	1947883a 	add	r3,r3,r5
   4f064:	180ed43a 	srli	r7,r3,16
   4f068:	727fe936 	bltu	r14,r9,4f010 <__alt_mem_epcs_flash_controller+0xfe03e010>
   4f06c:	90c00115 	stw	r3,4(r18)
   4f070:	31800104 	addi	r6,r6,4
   4f074:	5ac00104 	addi	r11,r11,4
   4f078:	333fbe36 	bltu	r6,r12,4ef74 <__alt_mem_epcs_flash_controller+0xfe03df74>
   4f07c:	0400090e 	bge	zero,r16,4f0a4 <__multiply+0x1d4>
   4f080:	50ffff17 	ldw	r3,-4(r10)
   4f084:	52bfff04 	addi	r10,r10,-4
   4f088:	18000326 	beq	r3,zero,4f098 <__multiply+0x1c8>
   4f08c:	00000506 	br	4f0a4 <__multiply+0x1d4>
   4f090:	50c00017 	ldw	r3,0(r10)
   4f094:	1800031e 	bne	r3,zero,4f0a4 <__multiply+0x1d4>
   4f098:	843fffc4 	addi	r16,r16,-1
   4f09c:	52bfff04 	addi	r10,r10,-4
   4f0a0:	803ffb1e 	bne	r16,zero,4f090 <__alt_mem_epcs_flash_controller+0xfe03e090>
   4f0a4:	14000415 	stw	r16,16(r2)
   4f0a8:	dfc00517 	ldw	ra,20(sp)
   4f0ac:	dd000417 	ldw	r20,16(sp)
   4f0b0:	dcc00317 	ldw	r19,12(sp)
   4f0b4:	dc800217 	ldw	r18,8(sp)
   4f0b8:	dc400117 	ldw	r17,4(sp)
   4f0bc:	dc000017 	ldw	r16,0(sp)
   4f0c0:	dec00604 	addi	sp,sp,24
   4f0c4:	f800283a 	ret

0004f0c8 <__pow5mult>:
   4f0c8:	defffa04 	addi	sp,sp,-24
   4f0cc:	dcc00315 	stw	r19,12(sp)
   4f0d0:	dc000015 	stw	r16,0(sp)
   4f0d4:	dfc00515 	stw	ra,20(sp)
   4f0d8:	dd000415 	stw	r20,16(sp)
   4f0dc:	dc800215 	stw	r18,8(sp)
   4f0e0:	dc400115 	stw	r17,4(sp)
   4f0e4:	308000cc 	andi	r2,r6,3
   4f0e8:	3021883a 	mov	r16,r6
   4f0ec:	2027883a 	mov	r19,r4
   4f0f0:	10002f1e 	bne	r2,zero,4f1b0 <__pow5mult+0xe8>
   4f0f4:	2825883a 	mov	r18,r5
   4f0f8:	8021d0ba 	srai	r16,r16,2
   4f0fc:	80001a26 	beq	r16,zero,4f168 <__pow5mult+0xa0>
   4f100:	9c401217 	ldw	r17,72(r19)
   4f104:	8800061e 	bne	r17,zero,4f120 <__pow5mult+0x58>
   4f108:	00003406 	br	4f1dc <__pow5mult+0x114>
   4f10c:	8021d07a 	srai	r16,r16,1
   4f110:	80001526 	beq	r16,zero,4f168 <__pow5mult+0xa0>
   4f114:	88800017 	ldw	r2,0(r17)
   4f118:	10001c26 	beq	r2,zero,4f18c <__pow5mult+0xc4>
   4f11c:	1023883a 	mov	r17,r2
   4f120:	8080004c 	andi	r2,r16,1
   4f124:	103ff926 	beq	r2,zero,4f10c <__alt_mem_epcs_flash_controller+0xfe03e10c>
   4f128:	880d883a 	mov	r6,r17
   4f12c:	900b883a 	mov	r5,r18
   4f130:	9809883a 	mov	r4,r19
   4f134:	004eed00 	call	4eed0 <__multiply>
   4f138:	90001b26 	beq	r18,zero,4f1a8 <__pow5mult+0xe0>
   4f13c:	91000117 	ldw	r4,4(r18)
   4f140:	98c01317 	ldw	r3,76(r19)
   4f144:	8021d07a 	srai	r16,r16,1
   4f148:	2109883a 	add	r4,r4,r4
   4f14c:	2109883a 	add	r4,r4,r4
   4f150:	1907883a 	add	r3,r3,r4
   4f154:	19000017 	ldw	r4,0(r3)
   4f158:	91000015 	stw	r4,0(r18)
   4f15c:	1c800015 	stw	r18,0(r3)
   4f160:	1025883a 	mov	r18,r2
   4f164:	803feb1e 	bne	r16,zero,4f114 <__alt_mem_epcs_flash_controller+0xfe03e114>
   4f168:	9005883a 	mov	r2,r18
   4f16c:	dfc00517 	ldw	ra,20(sp)
   4f170:	dd000417 	ldw	r20,16(sp)
   4f174:	dcc00317 	ldw	r19,12(sp)
   4f178:	dc800217 	ldw	r18,8(sp)
   4f17c:	dc400117 	ldw	r17,4(sp)
   4f180:	dc000017 	ldw	r16,0(sp)
   4f184:	dec00604 	addi	sp,sp,24
   4f188:	f800283a 	ret
   4f18c:	880d883a 	mov	r6,r17
   4f190:	880b883a 	mov	r5,r17
   4f194:	9809883a 	mov	r4,r19
   4f198:	004eed00 	call	4eed0 <__multiply>
   4f19c:	88800015 	stw	r2,0(r17)
   4f1a0:	10000015 	stw	zero,0(r2)
   4f1a4:	003fdd06 	br	4f11c <__alt_mem_epcs_flash_controller+0xfe03e11c>
   4f1a8:	1025883a 	mov	r18,r2
   4f1ac:	003fd706 	br	4f10c <__alt_mem_epcs_flash_controller+0xfe03e10c>
   4f1b0:	10bfffc4 	addi	r2,r2,-1
   4f1b4:	1085883a 	add	r2,r2,r2
   4f1b8:	00c001b4 	movhi	r3,6
   4f1bc:	18f59104 	addi	r3,r3,-10684
   4f1c0:	1085883a 	add	r2,r2,r2
   4f1c4:	1885883a 	add	r2,r3,r2
   4f1c8:	11800017 	ldw	r6,0(r2)
   4f1cc:	000f883a 	mov	r7,zero
   4f1d0:	004eb580 	call	4eb58 <__multadd>
   4f1d4:	1025883a 	mov	r18,r2
   4f1d8:	003fc706 	br	4f0f8 <__alt_mem_epcs_flash_controller+0xfe03e0f8>
   4f1dc:	05000044 	movi	r20,1
   4f1e0:	a00b883a 	mov	r5,r20
   4f1e4:	9809883a 	mov	r4,r19
   4f1e8:	004ea880 	call	4ea88 <_Balloc>
   4f1ec:	1023883a 	mov	r17,r2
   4f1f0:	00809c44 	movi	r2,625
   4f1f4:	88800515 	stw	r2,20(r17)
   4f1f8:	8d000415 	stw	r20,16(r17)
   4f1fc:	9c401215 	stw	r17,72(r19)
   4f200:	88000015 	stw	zero,0(r17)
   4f204:	003fc606 	br	4f120 <__alt_mem_epcs_flash_controller+0xfe03e120>

0004f208 <__lshift>:
   4f208:	defff904 	addi	sp,sp,-28
   4f20c:	dd400515 	stw	r21,20(sp)
   4f210:	dcc00315 	stw	r19,12(sp)
   4f214:	302bd17a 	srai	r21,r6,5
   4f218:	2cc00417 	ldw	r19,16(r5)
   4f21c:	28800217 	ldw	r2,8(r5)
   4f220:	dd000415 	stw	r20,16(sp)
   4f224:	ace7883a 	add	r19,r21,r19
   4f228:	dc800215 	stw	r18,8(sp)
   4f22c:	dc400115 	stw	r17,4(sp)
   4f230:	dc000015 	stw	r16,0(sp)
   4f234:	dfc00615 	stw	ra,24(sp)
   4f238:	9c000044 	addi	r16,r19,1
   4f23c:	2823883a 	mov	r17,r5
   4f240:	3029883a 	mov	r20,r6
   4f244:	2025883a 	mov	r18,r4
   4f248:	29400117 	ldw	r5,4(r5)
   4f24c:	1400030e 	bge	r2,r16,4f25c <__lshift+0x54>
   4f250:	1085883a 	add	r2,r2,r2
   4f254:	29400044 	addi	r5,r5,1
   4f258:	143ffd16 	blt	r2,r16,4f250 <__alt_mem_epcs_flash_controller+0xfe03e250>
   4f25c:	9009883a 	mov	r4,r18
   4f260:	004ea880 	call	4ea88 <_Balloc>
   4f264:	10c00504 	addi	r3,r2,20
   4f268:	0540070e 	bge	zero,r21,4f288 <__lshift+0x80>
   4f26c:	ad6b883a 	add	r21,r21,r21
   4f270:	ad6b883a 	add	r21,r21,r21
   4f274:	1809883a 	mov	r4,r3
   4f278:	1d47883a 	add	r3,r3,r21
   4f27c:	20000015 	stw	zero,0(r4)
   4f280:	21000104 	addi	r4,r4,4
   4f284:	193ffd1e 	bne	r3,r4,4f27c <__alt_mem_epcs_flash_controller+0xfe03e27c>
   4f288:	8a000417 	ldw	r8,16(r17)
   4f28c:	89000504 	addi	r4,r17,20
   4f290:	a18007cc 	andi	r6,r20,31
   4f294:	4211883a 	add	r8,r8,r8
   4f298:	4211883a 	add	r8,r8,r8
   4f29c:	2211883a 	add	r8,r4,r8
   4f2a0:	30002326 	beq	r6,zero,4f330 <__lshift+0x128>
   4f2a4:	02400804 	movi	r9,32
   4f2a8:	4993c83a 	sub	r9,r9,r6
   4f2ac:	000b883a 	mov	r5,zero
   4f2b0:	21c00017 	ldw	r7,0(r4)
   4f2b4:	1815883a 	mov	r10,r3
   4f2b8:	18c00104 	addi	r3,r3,4
   4f2bc:	398e983a 	sll	r7,r7,r6
   4f2c0:	21000104 	addi	r4,r4,4
   4f2c4:	394ab03a 	or	r5,r7,r5
   4f2c8:	197fff15 	stw	r5,-4(r3)
   4f2cc:	217fff17 	ldw	r5,-4(r4)
   4f2d0:	2a4ad83a 	srl	r5,r5,r9
   4f2d4:	223ff636 	bltu	r4,r8,4f2b0 <__alt_mem_epcs_flash_controller+0xfe03e2b0>
   4f2d8:	51400115 	stw	r5,4(r10)
   4f2dc:	28001a1e 	bne	r5,zero,4f348 <__lshift+0x140>
   4f2e0:	843fffc4 	addi	r16,r16,-1
   4f2e4:	14000415 	stw	r16,16(r2)
   4f2e8:	88000826 	beq	r17,zero,4f30c <__lshift+0x104>
   4f2ec:	89000117 	ldw	r4,4(r17)
   4f2f0:	90c01317 	ldw	r3,76(r18)
   4f2f4:	2109883a 	add	r4,r4,r4
   4f2f8:	2109883a 	add	r4,r4,r4
   4f2fc:	1907883a 	add	r3,r3,r4
   4f300:	19000017 	ldw	r4,0(r3)
   4f304:	89000015 	stw	r4,0(r17)
   4f308:	1c400015 	stw	r17,0(r3)
   4f30c:	dfc00617 	ldw	ra,24(sp)
   4f310:	dd400517 	ldw	r21,20(sp)
   4f314:	dd000417 	ldw	r20,16(sp)
   4f318:	dcc00317 	ldw	r19,12(sp)
   4f31c:	dc800217 	ldw	r18,8(sp)
   4f320:	dc400117 	ldw	r17,4(sp)
   4f324:	dc000017 	ldw	r16,0(sp)
   4f328:	dec00704 	addi	sp,sp,28
   4f32c:	f800283a 	ret
   4f330:	21400017 	ldw	r5,0(r4)
   4f334:	18c00104 	addi	r3,r3,4
   4f338:	21000104 	addi	r4,r4,4
   4f33c:	197fff15 	stw	r5,-4(r3)
   4f340:	223ffb36 	bltu	r4,r8,4f330 <__alt_mem_epcs_flash_controller+0xfe03e330>
   4f344:	003fe606 	br	4f2e0 <__alt_mem_epcs_flash_controller+0xfe03e2e0>
   4f348:	9c000084 	addi	r16,r19,2
   4f34c:	003fe406 	br	4f2e0 <__alt_mem_epcs_flash_controller+0xfe03e2e0>

0004f350 <__mcmp>:
   4f350:	20800417 	ldw	r2,16(r4)
   4f354:	28c00417 	ldw	r3,16(r5)
   4f358:	10c5c83a 	sub	r2,r2,r3
   4f35c:	1000111e 	bne	r2,zero,4f3a4 <__mcmp+0x54>
   4f360:	18c7883a 	add	r3,r3,r3
   4f364:	18c7883a 	add	r3,r3,r3
   4f368:	21000504 	addi	r4,r4,20
   4f36c:	29400504 	addi	r5,r5,20
   4f370:	20c5883a 	add	r2,r4,r3
   4f374:	28cb883a 	add	r5,r5,r3
   4f378:	00000106 	br	4f380 <__mcmp+0x30>
   4f37c:	20800a2e 	bgeu	r4,r2,4f3a8 <__mcmp+0x58>
   4f380:	10bfff04 	addi	r2,r2,-4
   4f384:	297fff04 	addi	r5,r5,-4
   4f388:	11800017 	ldw	r6,0(r2)
   4f38c:	28c00017 	ldw	r3,0(r5)
   4f390:	30fffa26 	beq	r6,r3,4f37c <__alt_mem_epcs_flash_controller+0xfe03e37c>
   4f394:	30c00236 	bltu	r6,r3,4f3a0 <__mcmp+0x50>
   4f398:	00800044 	movi	r2,1
   4f39c:	f800283a 	ret
   4f3a0:	00bfffc4 	movi	r2,-1
   4f3a4:	f800283a 	ret
   4f3a8:	0005883a 	mov	r2,zero
   4f3ac:	f800283a 	ret

0004f3b0 <__mdiff>:
   4f3b0:	28c00417 	ldw	r3,16(r5)
   4f3b4:	30800417 	ldw	r2,16(r6)
   4f3b8:	defffa04 	addi	sp,sp,-24
   4f3bc:	dcc00315 	stw	r19,12(sp)
   4f3c0:	dc800215 	stw	r18,8(sp)
   4f3c4:	dfc00515 	stw	ra,20(sp)
   4f3c8:	dd000415 	stw	r20,16(sp)
   4f3cc:	dc400115 	stw	r17,4(sp)
   4f3d0:	dc000015 	stw	r16,0(sp)
   4f3d4:	1887c83a 	sub	r3,r3,r2
   4f3d8:	2825883a 	mov	r18,r5
   4f3dc:	3027883a 	mov	r19,r6
   4f3e0:	1800141e 	bne	r3,zero,4f434 <__mdiff+0x84>
   4f3e4:	1085883a 	add	r2,r2,r2
   4f3e8:	1085883a 	add	r2,r2,r2
   4f3ec:	2a000504 	addi	r8,r5,20
   4f3f0:	34000504 	addi	r16,r6,20
   4f3f4:	4087883a 	add	r3,r8,r2
   4f3f8:	8085883a 	add	r2,r16,r2
   4f3fc:	00000106 	br	4f404 <__mdiff+0x54>
   4f400:	40c0592e 	bgeu	r8,r3,4f568 <__mdiff+0x1b8>
   4f404:	18ffff04 	addi	r3,r3,-4
   4f408:	10bfff04 	addi	r2,r2,-4
   4f40c:	19c00017 	ldw	r7,0(r3)
   4f410:	11400017 	ldw	r5,0(r2)
   4f414:	397ffa26 	beq	r7,r5,4f400 <__alt_mem_epcs_flash_controller+0xfe03e400>
   4f418:	3940592e 	bgeu	r7,r5,4f580 <__mdiff+0x1d0>
   4f41c:	9005883a 	mov	r2,r18
   4f420:	4023883a 	mov	r17,r8
   4f424:	9825883a 	mov	r18,r19
   4f428:	05000044 	movi	r20,1
   4f42c:	1027883a 	mov	r19,r2
   4f430:	00000406 	br	4f444 <__mdiff+0x94>
   4f434:	18005616 	blt	r3,zero,4f590 <__mdiff+0x1e0>
   4f438:	34400504 	addi	r17,r6,20
   4f43c:	2c000504 	addi	r16,r5,20
   4f440:	0029883a 	mov	r20,zero
   4f444:	91400117 	ldw	r5,4(r18)
   4f448:	004ea880 	call	4ea88 <_Balloc>
   4f44c:	92400417 	ldw	r9,16(r18)
   4f450:	9b000417 	ldw	r12,16(r19)
   4f454:	12c00504 	addi	r11,r2,20
   4f458:	4a51883a 	add	r8,r9,r9
   4f45c:	6319883a 	add	r12,r12,r12
   4f460:	4211883a 	add	r8,r8,r8
   4f464:	6319883a 	add	r12,r12,r12
   4f468:	15000315 	stw	r20,12(r2)
   4f46c:	8211883a 	add	r8,r16,r8
   4f470:	8b19883a 	add	r12,r17,r12
   4f474:	0007883a 	mov	r3,zero
   4f478:	81400017 	ldw	r5,0(r16)
   4f47c:	89c00017 	ldw	r7,0(r17)
   4f480:	59800104 	addi	r6,r11,4
   4f484:	293fffcc 	andi	r4,r5,65535
   4f488:	20c7883a 	add	r3,r4,r3
   4f48c:	393fffcc 	andi	r4,r7,65535
   4f490:	1909c83a 	sub	r4,r3,r4
   4f494:	280ad43a 	srli	r5,r5,16
   4f498:	380ed43a 	srli	r7,r7,16
   4f49c:	2007d43a 	srai	r3,r4,16
   4f4a0:	213fffcc 	andi	r4,r4,65535
   4f4a4:	29cbc83a 	sub	r5,r5,r7
   4f4a8:	28c7883a 	add	r3,r5,r3
   4f4ac:	180a943a 	slli	r5,r3,16
   4f4b0:	8c400104 	addi	r17,r17,4
   4f4b4:	84000104 	addi	r16,r16,4
   4f4b8:	2908b03a 	or	r4,r5,r4
   4f4bc:	59000015 	stw	r4,0(r11)
   4f4c0:	1807d43a 	srai	r3,r3,16
   4f4c4:	3015883a 	mov	r10,r6
   4f4c8:	3017883a 	mov	r11,r6
   4f4cc:	8b3fea36 	bltu	r17,r12,4f478 <__alt_mem_epcs_flash_controller+0xfe03e478>
   4f4d0:	8200162e 	bgeu	r16,r8,4f52c <__mdiff+0x17c>
   4f4d4:	8017883a 	mov	r11,r16
   4f4d8:	59400017 	ldw	r5,0(r11)
   4f4dc:	31800104 	addi	r6,r6,4
   4f4e0:	5ac00104 	addi	r11,r11,4
   4f4e4:	293fffcc 	andi	r4,r5,65535
   4f4e8:	20c7883a 	add	r3,r4,r3
   4f4ec:	280ed43a 	srli	r7,r5,16
   4f4f0:	180bd43a 	srai	r5,r3,16
   4f4f4:	193fffcc 	andi	r4,r3,65535
   4f4f8:	3947883a 	add	r3,r7,r5
   4f4fc:	180a943a 	slli	r5,r3,16
   4f500:	1807d43a 	srai	r3,r3,16
   4f504:	2908b03a 	or	r4,r5,r4
   4f508:	313fff15 	stw	r4,-4(r6)
   4f50c:	5a3ff236 	bltu	r11,r8,4f4d8 <__alt_mem_epcs_flash_controller+0xfe03e4d8>
   4f510:	0406303a 	nor	r3,zero,r16
   4f514:	1a07883a 	add	r3,r3,r8
   4f518:	1806d0ba 	srli	r3,r3,2
   4f51c:	18c00044 	addi	r3,r3,1
   4f520:	18c7883a 	add	r3,r3,r3
   4f524:	18c7883a 	add	r3,r3,r3
   4f528:	50d5883a 	add	r10,r10,r3
   4f52c:	50ffff04 	addi	r3,r10,-4
   4f530:	2000041e 	bne	r4,zero,4f544 <__mdiff+0x194>
   4f534:	18ffff04 	addi	r3,r3,-4
   4f538:	19000017 	ldw	r4,0(r3)
   4f53c:	4a7fffc4 	addi	r9,r9,-1
   4f540:	203ffc26 	beq	r4,zero,4f534 <__alt_mem_epcs_flash_controller+0xfe03e534>
   4f544:	12400415 	stw	r9,16(r2)
   4f548:	dfc00517 	ldw	ra,20(sp)
   4f54c:	dd000417 	ldw	r20,16(sp)
   4f550:	dcc00317 	ldw	r19,12(sp)
   4f554:	dc800217 	ldw	r18,8(sp)
   4f558:	dc400117 	ldw	r17,4(sp)
   4f55c:	dc000017 	ldw	r16,0(sp)
   4f560:	dec00604 	addi	sp,sp,24
   4f564:	f800283a 	ret
   4f568:	000b883a 	mov	r5,zero
   4f56c:	004ea880 	call	4ea88 <_Balloc>
   4f570:	00c00044 	movi	r3,1
   4f574:	10c00415 	stw	r3,16(r2)
   4f578:	10000515 	stw	zero,20(r2)
   4f57c:	003ff206 	br	4f548 <__alt_mem_epcs_flash_controller+0xfe03e548>
   4f580:	8023883a 	mov	r17,r16
   4f584:	0029883a 	mov	r20,zero
   4f588:	4021883a 	mov	r16,r8
   4f58c:	003fad06 	br	4f444 <__alt_mem_epcs_flash_controller+0xfe03e444>
   4f590:	9005883a 	mov	r2,r18
   4f594:	94400504 	addi	r17,r18,20
   4f598:	9c000504 	addi	r16,r19,20
   4f59c:	9825883a 	mov	r18,r19
   4f5a0:	05000044 	movi	r20,1
   4f5a4:	1027883a 	mov	r19,r2
   4f5a8:	003fa606 	br	4f444 <__alt_mem_epcs_flash_controller+0xfe03e444>

0004f5ac <__ulp>:
   4f5ac:	295ffc2c 	andhi	r5,r5,32752
   4f5b0:	00bf3034 	movhi	r2,64704
   4f5b4:	2887883a 	add	r3,r5,r2
   4f5b8:	00c0020e 	bge	zero,r3,4f5c4 <__ulp+0x18>
   4f5bc:	0005883a 	mov	r2,zero
   4f5c0:	f800283a 	ret
   4f5c4:	00c7c83a 	sub	r3,zero,r3
   4f5c8:	1807d53a 	srai	r3,r3,20
   4f5cc:	008004c4 	movi	r2,19
   4f5d0:	10c00b0e 	bge	r2,r3,4f600 <__ulp+0x54>
   4f5d4:	18bffb04 	addi	r2,r3,-20
   4f5d8:	01000784 	movi	r4,30
   4f5dc:	0007883a 	mov	r3,zero
   4f5e0:	20800516 	blt	r4,r2,4f5f8 <__ulp+0x4c>
   4f5e4:	010007c4 	movi	r4,31
   4f5e8:	2089c83a 	sub	r4,r4,r2
   4f5ec:	00800044 	movi	r2,1
   4f5f0:	1104983a 	sll	r2,r2,r4
   4f5f4:	f800283a 	ret
   4f5f8:	00800044 	movi	r2,1
   4f5fc:	f800283a 	ret
   4f600:	01400234 	movhi	r5,8
   4f604:	28c7d83a 	sra	r3,r5,r3
   4f608:	0005883a 	mov	r2,zero
   4f60c:	f800283a 	ret

0004f610 <__b2d>:
   4f610:	defffa04 	addi	sp,sp,-24
   4f614:	dc000015 	stw	r16,0(sp)
   4f618:	24000417 	ldw	r16,16(r4)
   4f61c:	dc400115 	stw	r17,4(sp)
   4f620:	24400504 	addi	r17,r4,20
   4f624:	8421883a 	add	r16,r16,r16
   4f628:	8421883a 	add	r16,r16,r16
   4f62c:	8c21883a 	add	r16,r17,r16
   4f630:	dc800215 	stw	r18,8(sp)
   4f634:	84bfff17 	ldw	r18,-4(r16)
   4f638:	dd000415 	stw	r20,16(sp)
   4f63c:	dcc00315 	stw	r19,12(sp)
   4f640:	9009883a 	mov	r4,r18
   4f644:	2829883a 	mov	r20,r5
   4f648:	dfc00515 	stw	ra,20(sp)
   4f64c:	004ed7c0 	call	4ed7c <__hi0bits>
   4f650:	00c00804 	movi	r3,32
   4f654:	1889c83a 	sub	r4,r3,r2
   4f658:	a1000015 	stw	r4,0(r20)
   4f65c:	01000284 	movi	r4,10
   4f660:	84ffff04 	addi	r19,r16,-4
   4f664:	20801216 	blt	r4,r2,4f6b0 <__b2d+0xa0>
   4f668:	018002c4 	movi	r6,11
   4f66c:	308dc83a 	sub	r6,r6,r2
   4f670:	9186d83a 	srl	r3,r18,r6
   4f674:	18cffc34 	orhi	r3,r3,16368
   4f678:	8cc0212e 	bgeu	r17,r19,4f700 <__b2d+0xf0>
   4f67c:	813ffe17 	ldw	r4,-8(r16)
   4f680:	218cd83a 	srl	r6,r4,r6
   4f684:	10800544 	addi	r2,r2,21
   4f688:	9084983a 	sll	r2,r18,r2
   4f68c:	1184b03a 	or	r2,r2,r6
   4f690:	dfc00517 	ldw	ra,20(sp)
   4f694:	dd000417 	ldw	r20,16(sp)
   4f698:	dcc00317 	ldw	r19,12(sp)
   4f69c:	dc800217 	ldw	r18,8(sp)
   4f6a0:	dc400117 	ldw	r17,4(sp)
   4f6a4:	dc000017 	ldw	r16,0(sp)
   4f6a8:	dec00604 	addi	sp,sp,24
   4f6ac:	f800283a 	ret
   4f6b0:	8cc00f2e 	bgeu	r17,r19,4f6f0 <__b2d+0xe0>
   4f6b4:	117ffd44 	addi	r5,r2,-11
   4f6b8:	80bffe17 	ldw	r2,-8(r16)
   4f6bc:	28000e26 	beq	r5,zero,4f6f8 <__b2d+0xe8>
   4f6c0:	1949c83a 	sub	r4,r3,r5
   4f6c4:	9164983a 	sll	r18,r18,r5
   4f6c8:	1106d83a 	srl	r3,r2,r4
   4f6cc:	81bffe04 	addi	r6,r16,-8
   4f6d0:	948ffc34 	orhi	r18,r18,16368
   4f6d4:	90c6b03a 	or	r3,r18,r3
   4f6d8:	89800e2e 	bgeu	r17,r6,4f714 <__b2d+0x104>
   4f6dc:	81bffd17 	ldw	r6,-12(r16)
   4f6e0:	1144983a 	sll	r2,r2,r5
   4f6e4:	310ad83a 	srl	r5,r6,r4
   4f6e8:	2884b03a 	or	r2,r5,r2
   4f6ec:	003fe806 	br	4f690 <__alt_mem_epcs_flash_controller+0xfe03e690>
   4f6f0:	10bffd44 	addi	r2,r2,-11
   4f6f4:	1000041e 	bne	r2,zero,4f708 <__b2d+0xf8>
   4f6f8:	90cffc34 	orhi	r3,r18,16368
   4f6fc:	003fe406 	br	4f690 <__alt_mem_epcs_flash_controller+0xfe03e690>
   4f700:	000d883a 	mov	r6,zero
   4f704:	003fdf06 	br	4f684 <__alt_mem_epcs_flash_controller+0xfe03e684>
   4f708:	90a4983a 	sll	r18,r18,r2
   4f70c:	0005883a 	mov	r2,zero
   4f710:	003ff906 	br	4f6f8 <__alt_mem_epcs_flash_controller+0xfe03e6f8>
   4f714:	1144983a 	sll	r2,r2,r5
   4f718:	003fdd06 	br	4f690 <__alt_mem_epcs_flash_controller+0xfe03e690>

0004f71c <__d2b>:
   4f71c:	defff804 	addi	sp,sp,-32
   4f720:	dc000215 	stw	r16,8(sp)
   4f724:	3021883a 	mov	r16,r6
   4f728:	dc400315 	stw	r17,12(sp)
   4f72c:	8022907a 	slli	r17,r16,1
   4f730:	dd000615 	stw	r20,24(sp)
   4f734:	2829883a 	mov	r20,r5
   4f738:	01400044 	movi	r5,1
   4f73c:	dcc00515 	stw	r19,20(sp)
   4f740:	dc800415 	stw	r18,16(sp)
   4f744:	dfc00715 	stw	ra,28(sp)
   4f748:	3825883a 	mov	r18,r7
   4f74c:	8822d57a 	srli	r17,r17,21
   4f750:	004ea880 	call	4ea88 <_Balloc>
   4f754:	1027883a 	mov	r19,r2
   4f758:	00800434 	movhi	r2,16
   4f75c:	10bfffc4 	addi	r2,r2,-1
   4f760:	808c703a 	and	r6,r16,r2
   4f764:	88000126 	beq	r17,zero,4f76c <__d2b+0x50>
   4f768:	31800434 	orhi	r6,r6,16
   4f76c:	d9800015 	stw	r6,0(sp)
   4f770:	a0002426 	beq	r20,zero,4f804 <__d2b+0xe8>
   4f774:	d9000104 	addi	r4,sp,4
   4f778:	dd000115 	stw	r20,4(sp)
   4f77c:	004ede40 	call	4ede4 <__lo0bits>
   4f780:	d8c00017 	ldw	r3,0(sp)
   4f784:	10002f1e 	bne	r2,zero,4f844 <__d2b+0x128>
   4f788:	d9000117 	ldw	r4,4(sp)
   4f78c:	99000515 	stw	r4,20(r19)
   4f790:	1821003a 	cmpeq	r16,r3,zero
   4f794:	01000084 	movi	r4,2
   4f798:	2421c83a 	sub	r16,r4,r16
   4f79c:	98c00615 	stw	r3,24(r19)
   4f7a0:	9c000415 	stw	r16,16(r19)
   4f7a4:	88001f1e 	bne	r17,zero,4f824 <__d2b+0x108>
   4f7a8:	10bef384 	addi	r2,r2,-1074
   4f7ac:	90800015 	stw	r2,0(r18)
   4f7b0:	00900034 	movhi	r2,16384
   4f7b4:	10bfffc4 	addi	r2,r2,-1
   4f7b8:	8085883a 	add	r2,r16,r2
   4f7bc:	1085883a 	add	r2,r2,r2
   4f7c0:	1085883a 	add	r2,r2,r2
   4f7c4:	9885883a 	add	r2,r19,r2
   4f7c8:	11000517 	ldw	r4,20(r2)
   4f7cc:	8020917a 	slli	r16,r16,5
   4f7d0:	004ed7c0 	call	4ed7c <__hi0bits>
   4f7d4:	d8c00817 	ldw	r3,32(sp)
   4f7d8:	8085c83a 	sub	r2,r16,r2
   4f7dc:	18800015 	stw	r2,0(r3)
   4f7e0:	9805883a 	mov	r2,r19
   4f7e4:	dfc00717 	ldw	ra,28(sp)
   4f7e8:	dd000617 	ldw	r20,24(sp)
   4f7ec:	dcc00517 	ldw	r19,20(sp)
   4f7f0:	dc800417 	ldw	r18,16(sp)
   4f7f4:	dc400317 	ldw	r17,12(sp)
   4f7f8:	dc000217 	ldw	r16,8(sp)
   4f7fc:	dec00804 	addi	sp,sp,32
   4f800:	f800283a 	ret
   4f804:	d809883a 	mov	r4,sp
   4f808:	004ede40 	call	4ede4 <__lo0bits>
   4f80c:	d8c00017 	ldw	r3,0(sp)
   4f810:	04000044 	movi	r16,1
   4f814:	9c000415 	stw	r16,16(r19)
   4f818:	98c00515 	stw	r3,20(r19)
   4f81c:	10800804 	addi	r2,r2,32
   4f820:	883fe126 	beq	r17,zero,4f7a8 <__alt_mem_epcs_flash_controller+0xfe03e7a8>
   4f824:	00c00d44 	movi	r3,53
   4f828:	8c7ef344 	addi	r17,r17,-1075
   4f82c:	88a3883a 	add	r17,r17,r2
   4f830:	1885c83a 	sub	r2,r3,r2
   4f834:	d8c00817 	ldw	r3,32(sp)
   4f838:	94400015 	stw	r17,0(r18)
   4f83c:	18800015 	stw	r2,0(r3)
   4f840:	003fe706 	br	4f7e0 <__alt_mem_epcs_flash_controller+0xfe03e7e0>
   4f844:	01000804 	movi	r4,32
   4f848:	2089c83a 	sub	r4,r4,r2
   4f84c:	1908983a 	sll	r4,r3,r4
   4f850:	d9400117 	ldw	r5,4(sp)
   4f854:	1886d83a 	srl	r3,r3,r2
   4f858:	2148b03a 	or	r4,r4,r5
   4f85c:	99000515 	stw	r4,20(r19)
   4f860:	d8c00015 	stw	r3,0(sp)
   4f864:	003fca06 	br	4f790 <__alt_mem_epcs_flash_controller+0xfe03e790>

0004f868 <__ratio>:
   4f868:	defff904 	addi	sp,sp,-28
   4f86c:	dc400315 	stw	r17,12(sp)
   4f870:	2823883a 	mov	r17,r5
   4f874:	d9400104 	addi	r5,sp,4
   4f878:	dfc00615 	stw	ra,24(sp)
   4f87c:	dcc00515 	stw	r19,20(sp)
   4f880:	dc800415 	stw	r18,16(sp)
   4f884:	2027883a 	mov	r19,r4
   4f888:	dc000215 	stw	r16,8(sp)
   4f88c:	004f6100 	call	4f610 <__b2d>
   4f890:	d80b883a 	mov	r5,sp
   4f894:	8809883a 	mov	r4,r17
   4f898:	1025883a 	mov	r18,r2
   4f89c:	1821883a 	mov	r16,r3
   4f8a0:	004f6100 	call	4f610 <__b2d>
   4f8a4:	8a000417 	ldw	r8,16(r17)
   4f8a8:	99000417 	ldw	r4,16(r19)
   4f8ac:	d9400117 	ldw	r5,4(sp)
   4f8b0:	2209c83a 	sub	r4,r4,r8
   4f8b4:	2010917a 	slli	r8,r4,5
   4f8b8:	d9000017 	ldw	r4,0(sp)
   4f8bc:	2909c83a 	sub	r4,r5,r4
   4f8c0:	4109883a 	add	r4,r8,r4
   4f8c4:	01000e0e 	bge	zero,r4,4f900 <__ratio+0x98>
   4f8c8:	2008953a 	slli	r4,r4,20
   4f8cc:	2421883a 	add	r16,r4,r16
   4f8d0:	100d883a 	mov	r6,r2
   4f8d4:	180f883a 	mov	r7,r3
   4f8d8:	9009883a 	mov	r4,r18
   4f8dc:	800b883a 	mov	r5,r16
   4f8e0:	00434280 	call	43428 <__divdf3>
   4f8e4:	dfc00617 	ldw	ra,24(sp)
   4f8e8:	dcc00517 	ldw	r19,20(sp)
   4f8ec:	dc800417 	ldw	r18,16(sp)
   4f8f0:	dc400317 	ldw	r17,12(sp)
   4f8f4:	dc000217 	ldw	r16,8(sp)
   4f8f8:	dec00704 	addi	sp,sp,28
   4f8fc:	f800283a 	ret
   4f900:	2008953a 	slli	r4,r4,20
   4f904:	1907c83a 	sub	r3,r3,r4
   4f908:	003ff106 	br	4f8d0 <__alt_mem_epcs_flash_controller+0xfe03e8d0>

0004f90c <_mprec_log10>:
   4f90c:	defffe04 	addi	sp,sp,-8
   4f910:	dc000015 	stw	r16,0(sp)
   4f914:	dfc00115 	stw	ra,4(sp)
   4f918:	008005c4 	movi	r2,23
   4f91c:	2021883a 	mov	r16,r4
   4f920:	11000d0e 	bge	r2,r4,4f958 <_mprec_log10+0x4c>
   4f924:	0005883a 	mov	r2,zero
   4f928:	00cffc34 	movhi	r3,16368
   4f92c:	843fffc4 	addi	r16,r16,-1
   4f930:	000d883a 	mov	r6,zero
   4f934:	01d00934 	movhi	r7,16420
   4f938:	1009883a 	mov	r4,r2
   4f93c:	180b883a 	mov	r5,r3
   4f940:	0043ee00 	call	43ee0 <__muldf3>
   4f944:	803ff91e 	bne	r16,zero,4f92c <__alt_mem_epcs_flash_controller+0xfe03e92c>
   4f948:	dfc00117 	ldw	ra,4(sp)
   4f94c:	dc000017 	ldw	r16,0(sp)
   4f950:	dec00204 	addi	sp,sp,8
   4f954:	f800283a 	ret
   4f958:	202090fa 	slli	r16,r4,3
   4f95c:	008001b4 	movhi	r2,6
   4f960:	10b5a804 	addi	r2,r2,-10592
   4f964:	1421883a 	add	r16,r2,r16
   4f968:	80800017 	ldw	r2,0(r16)
   4f96c:	80c00117 	ldw	r3,4(r16)
   4f970:	dfc00117 	ldw	ra,4(sp)
   4f974:	dc000017 	ldw	r16,0(sp)
   4f978:	dec00204 	addi	sp,sp,8
   4f97c:	f800283a 	ret

0004f980 <__copybits>:
   4f980:	297fffc4 	addi	r5,r5,-1
   4f984:	280fd17a 	srai	r7,r5,5
   4f988:	30c00417 	ldw	r3,16(r6)
   4f98c:	30800504 	addi	r2,r6,20
   4f990:	39c00044 	addi	r7,r7,1
   4f994:	18c7883a 	add	r3,r3,r3
   4f998:	39cf883a 	add	r7,r7,r7
   4f99c:	18c7883a 	add	r3,r3,r3
   4f9a0:	39cf883a 	add	r7,r7,r7
   4f9a4:	10c7883a 	add	r3,r2,r3
   4f9a8:	21cf883a 	add	r7,r4,r7
   4f9ac:	10c00d2e 	bgeu	r2,r3,4f9e4 <__copybits+0x64>
   4f9b0:	200b883a 	mov	r5,r4
   4f9b4:	12000017 	ldw	r8,0(r2)
   4f9b8:	29400104 	addi	r5,r5,4
   4f9bc:	10800104 	addi	r2,r2,4
   4f9c0:	2a3fff15 	stw	r8,-4(r5)
   4f9c4:	10fffb36 	bltu	r2,r3,4f9b4 <__alt_mem_epcs_flash_controller+0xfe03e9b4>
   4f9c8:	1985c83a 	sub	r2,r3,r6
   4f9cc:	10bffac4 	addi	r2,r2,-21
   4f9d0:	1004d0ba 	srli	r2,r2,2
   4f9d4:	10800044 	addi	r2,r2,1
   4f9d8:	1085883a 	add	r2,r2,r2
   4f9dc:	1085883a 	add	r2,r2,r2
   4f9e0:	2089883a 	add	r4,r4,r2
   4f9e4:	21c0032e 	bgeu	r4,r7,4f9f4 <__copybits+0x74>
   4f9e8:	20000015 	stw	zero,0(r4)
   4f9ec:	21000104 	addi	r4,r4,4
   4f9f0:	21fffd36 	bltu	r4,r7,4f9e8 <__alt_mem_epcs_flash_controller+0xfe03e9e8>
   4f9f4:	f800283a 	ret

0004f9f8 <__any_on>:
   4f9f8:	20c00417 	ldw	r3,16(r4)
   4f9fc:	2805d17a 	srai	r2,r5,5
   4fa00:	21000504 	addi	r4,r4,20
   4fa04:	18800d0e 	bge	r3,r2,4fa3c <__any_on+0x44>
   4fa08:	18c7883a 	add	r3,r3,r3
   4fa0c:	18c7883a 	add	r3,r3,r3
   4fa10:	20c7883a 	add	r3,r4,r3
   4fa14:	20c0192e 	bgeu	r4,r3,4fa7c <__any_on+0x84>
   4fa18:	18bfff17 	ldw	r2,-4(r3)
   4fa1c:	18ffff04 	addi	r3,r3,-4
   4fa20:	1000041e 	bne	r2,zero,4fa34 <__any_on+0x3c>
   4fa24:	20c0142e 	bgeu	r4,r3,4fa78 <__any_on+0x80>
   4fa28:	18ffff04 	addi	r3,r3,-4
   4fa2c:	19400017 	ldw	r5,0(r3)
   4fa30:	283ffc26 	beq	r5,zero,4fa24 <__alt_mem_epcs_flash_controller+0xfe03ea24>
   4fa34:	00800044 	movi	r2,1
   4fa38:	f800283a 	ret
   4fa3c:	10c00a0e 	bge	r2,r3,4fa68 <__any_on+0x70>
   4fa40:	1085883a 	add	r2,r2,r2
   4fa44:	1085883a 	add	r2,r2,r2
   4fa48:	294007cc 	andi	r5,r5,31
   4fa4c:	2087883a 	add	r3,r4,r2
   4fa50:	283ff026 	beq	r5,zero,4fa14 <__alt_mem_epcs_flash_controller+0xfe03ea14>
   4fa54:	19800017 	ldw	r6,0(r3)
   4fa58:	3144d83a 	srl	r2,r6,r5
   4fa5c:	114a983a 	sll	r5,r2,r5
   4fa60:	317ff41e 	bne	r6,r5,4fa34 <__alt_mem_epcs_flash_controller+0xfe03ea34>
   4fa64:	003feb06 	br	4fa14 <__alt_mem_epcs_flash_controller+0xfe03ea14>
   4fa68:	1085883a 	add	r2,r2,r2
   4fa6c:	1085883a 	add	r2,r2,r2
   4fa70:	2087883a 	add	r3,r4,r2
   4fa74:	003fe706 	br	4fa14 <__alt_mem_epcs_flash_controller+0xfe03ea14>
   4fa78:	f800283a 	ret
   4fa7c:	0005883a 	mov	r2,zero
   4fa80:	f800283a 	ret

0004fa84 <_putc_r>:
   4fa84:	defffc04 	addi	sp,sp,-16
   4fa88:	dc000215 	stw	r16,8(sp)
   4fa8c:	dfc00315 	stw	ra,12(sp)
   4fa90:	2021883a 	mov	r16,r4
   4fa94:	20000226 	beq	r4,zero,4faa0 <_putc_r+0x1c>
   4fa98:	20800e17 	ldw	r2,56(r4)
   4fa9c:	10001b26 	beq	r2,zero,4fb0c <_putc_r+0x88>
   4faa0:	30800217 	ldw	r2,8(r6)
   4faa4:	10bfffc4 	addi	r2,r2,-1
   4faa8:	30800215 	stw	r2,8(r6)
   4faac:	10000a16 	blt	r2,zero,4fad8 <_putc_r+0x54>
   4fab0:	30800017 	ldw	r2,0(r6)
   4fab4:	11400005 	stb	r5,0(r2)
   4fab8:	30800017 	ldw	r2,0(r6)
   4fabc:	10c00044 	addi	r3,r2,1
   4fac0:	30c00015 	stw	r3,0(r6)
   4fac4:	10800003 	ldbu	r2,0(r2)
   4fac8:	dfc00317 	ldw	ra,12(sp)
   4facc:	dc000217 	ldw	r16,8(sp)
   4fad0:	dec00404 	addi	sp,sp,16
   4fad4:	f800283a 	ret
   4fad8:	30c00617 	ldw	r3,24(r6)
   4fadc:	10c00616 	blt	r2,r3,4faf8 <_putc_r+0x74>
   4fae0:	30800017 	ldw	r2,0(r6)
   4fae4:	00c00284 	movi	r3,10
   4fae8:	11400005 	stb	r5,0(r2)
   4faec:	30800017 	ldw	r2,0(r6)
   4faf0:	11400003 	ldbu	r5,0(r2)
   4faf4:	28fff11e 	bne	r5,r3,4fabc <__alt_mem_epcs_flash_controller+0xfe03eabc>
   4faf8:	8009883a 	mov	r4,r16
   4fafc:	dfc00317 	ldw	ra,12(sp)
   4fb00:	dc000217 	ldw	r16,8(sp)
   4fb04:	dec00404 	addi	sp,sp,16
   4fb08:	00527f01 	jmpi	527f0 <__swbuf_r>
   4fb0c:	d9400015 	stw	r5,0(sp)
   4fb10:	d9800115 	stw	r6,4(sp)
   4fb14:	004dbe80 	call	4dbe8 <__sinit>
   4fb18:	d9800117 	ldw	r6,4(sp)
   4fb1c:	d9400017 	ldw	r5,0(sp)
   4fb20:	003fdf06 	br	4faa0 <__alt_mem_epcs_flash_controller+0xfe03eaa0>

0004fb24 <putc>:
   4fb24:	008001b4 	movhi	r2,6
   4fb28:	defffc04 	addi	sp,sp,-16
   4fb2c:	10be3804 	addi	r2,r2,-1824
   4fb30:	dc000115 	stw	r16,4(sp)
   4fb34:	14000017 	ldw	r16,0(r2)
   4fb38:	dc400215 	stw	r17,8(sp)
   4fb3c:	dfc00315 	stw	ra,12(sp)
   4fb40:	2023883a 	mov	r17,r4
   4fb44:	80000226 	beq	r16,zero,4fb50 <putc+0x2c>
   4fb48:	80800e17 	ldw	r2,56(r16)
   4fb4c:	10001a26 	beq	r2,zero,4fbb8 <putc+0x94>
   4fb50:	28800217 	ldw	r2,8(r5)
   4fb54:	10bfffc4 	addi	r2,r2,-1
   4fb58:	28800215 	stw	r2,8(r5)
   4fb5c:	10000b16 	blt	r2,zero,4fb8c <putc+0x68>
   4fb60:	28800017 	ldw	r2,0(r5)
   4fb64:	14400005 	stb	r17,0(r2)
   4fb68:	28800017 	ldw	r2,0(r5)
   4fb6c:	10c00044 	addi	r3,r2,1
   4fb70:	28c00015 	stw	r3,0(r5)
   4fb74:	10800003 	ldbu	r2,0(r2)
   4fb78:	dfc00317 	ldw	ra,12(sp)
   4fb7c:	dc400217 	ldw	r17,8(sp)
   4fb80:	dc000117 	ldw	r16,4(sp)
   4fb84:	dec00404 	addi	sp,sp,16
   4fb88:	f800283a 	ret
   4fb8c:	28c00617 	ldw	r3,24(r5)
   4fb90:	10c00e16 	blt	r2,r3,4fbcc <putc+0xa8>
   4fb94:	28800017 	ldw	r2,0(r5)
   4fb98:	01000284 	movi	r4,10
   4fb9c:	14400005 	stb	r17,0(r2)
   4fba0:	28800017 	ldw	r2,0(r5)
   4fba4:	10c00003 	ldbu	r3,0(r2)
   4fba8:	193ff01e 	bne	r3,r4,4fb6c <__alt_mem_epcs_flash_controller+0xfe03eb6c>
   4fbac:	280d883a 	mov	r6,r5
   4fbb0:	180b883a 	mov	r5,r3
   4fbb4:	00000706 	br	4fbd4 <putc+0xb0>
   4fbb8:	8009883a 	mov	r4,r16
   4fbbc:	d9400015 	stw	r5,0(sp)
   4fbc0:	004dbe80 	call	4dbe8 <__sinit>
   4fbc4:	d9400017 	ldw	r5,0(sp)
   4fbc8:	003fe106 	br	4fb50 <__alt_mem_epcs_flash_controller+0xfe03eb50>
   4fbcc:	280d883a 	mov	r6,r5
   4fbd0:	880b883a 	mov	r5,r17
   4fbd4:	8009883a 	mov	r4,r16
   4fbd8:	dfc00317 	ldw	ra,12(sp)
   4fbdc:	dc400217 	ldw	r17,8(sp)
   4fbe0:	dc000117 	ldw	r16,4(sp)
   4fbe4:	dec00404 	addi	sp,sp,16
   4fbe8:	00527f01 	jmpi	527f0 <__swbuf_r>

0004fbec <__fpclassifyd>:
   4fbec:	00a00034 	movhi	r2,32768
   4fbf0:	10bfffc4 	addi	r2,r2,-1
   4fbf4:	2884703a 	and	r2,r5,r2
   4fbf8:	10000726 	beq	r2,zero,4fc18 <__fpclassifyd+0x2c>
   4fbfc:	00fffc34 	movhi	r3,65520
   4fc00:	019ff834 	movhi	r6,32736
   4fc04:	28c7883a 	add	r3,r5,r3
   4fc08:	31bfffc4 	addi	r6,r6,-1
   4fc0c:	30c00536 	bltu	r6,r3,4fc24 <__fpclassifyd+0x38>
   4fc10:	00800104 	movi	r2,4
   4fc14:	f800283a 	ret
   4fc18:	2000021e 	bne	r4,zero,4fc24 <__fpclassifyd+0x38>
   4fc1c:	00800084 	movi	r2,2
   4fc20:	f800283a 	ret
   4fc24:	00dffc34 	movhi	r3,32752
   4fc28:	019ff834 	movhi	r6,32736
   4fc2c:	28cb883a 	add	r5,r5,r3
   4fc30:	31bfffc4 	addi	r6,r6,-1
   4fc34:	317ff62e 	bgeu	r6,r5,4fc10 <__alt_mem_epcs_flash_controller+0xfe03ec10>
   4fc38:	01400434 	movhi	r5,16
   4fc3c:	297fffc4 	addi	r5,r5,-1
   4fc40:	28800236 	bltu	r5,r2,4fc4c <__fpclassifyd+0x60>
   4fc44:	008000c4 	movi	r2,3
   4fc48:	f800283a 	ret
   4fc4c:	10c00226 	beq	r2,r3,4fc58 <__fpclassifyd+0x6c>
   4fc50:	0005883a 	mov	r2,zero
   4fc54:	f800283a 	ret
   4fc58:	2005003a 	cmpeq	r2,r4,zero
   4fc5c:	f800283a 	ret

0004fc60 <__sread>:
   4fc60:	defffe04 	addi	sp,sp,-8
   4fc64:	dc000015 	stw	r16,0(sp)
   4fc68:	2821883a 	mov	r16,r5
   4fc6c:	2940038f 	ldh	r5,14(r5)
   4fc70:	dfc00115 	stw	ra,4(sp)
   4fc74:	0052e180 	call	52e18 <_read_r>
   4fc78:	10000716 	blt	r2,zero,4fc98 <__sread+0x38>
   4fc7c:	80c01417 	ldw	r3,80(r16)
   4fc80:	1887883a 	add	r3,r3,r2
   4fc84:	80c01415 	stw	r3,80(r16)
   4fc88:	dfc00117 	ldw	ra,4(sp)
   4fc8c:	dc000017 	ldw	r16,0(sp)
   4fc90:	dec00204 	addi	sp,sp,8
   4fc94:	f800283a 	ret
   4fc98:	80c0030b 	ldhu	r3,12(r16)
   4fc9c:	18fbffcc 	andi	r3,r3,61439
   4fca0:	80c0030d 	sth	r3,12(r16)
   4fca4:	dfc00117 	ldw	ra,4(sp)
   4fca8:	dc000017 	ldw	r16,0(sp)
   4fcac:	dec00204 	addi	sp,sp,8
   4fcb0:	f800283a 	ret

0004fcb4 <__seofread>:
   4fcb4:	0005883a 	mov	r2,zero
   4fcb8:	f800283a 	ret

0004fcbc <__swrite>:
   4fcbc:	2880030b 	ldhu	r2,12(r5)
   4fcc0:	defffb04 	addi	sp,sp,-20
   4fcc4:	dcc00315 	stw	r19,12(sp)
   4fcc8:	dc800215 	stw	r18,8(sp)
   4fccc:	dc400115 	stw	r17,4(sp)
   4fcd0:	dc000015 	stw	r16,0(sp)
   4fcd4:	dfc00415 	stw	ra,16(sp)
   4fcd8:	10c0400c 	andi	r3,r2,256
   4fcdc:	2821883a 	mov	r16,r5
   4fce0:	2023883a 	mov	r17,r4
   4fce4:	3025883a 	mov	r18,r6
   4fce8:	3827883a 	mov	r19,r7
   4fcec:	18000526 	beq	r3,zero,4fd04 <__swrite+0x48>
   4fcf0:	2940038f 	ldh	r5,14(r5)
   4fcf4:	01c00084 	movi	r7,2
   4fcf8:	000d883a 	mov	r6,zero
   4fcfc:	0052db80 	call	52db8 <_lseek_r>
   4fd00:	8080030b 	ldhu	r2,12(r16)
   4fd04:	8140038f 	ldh	r5,14(r16)
   4fd08:	10bbffcc 	andi	r2,r2,61439
   4fd0c:	980f883a 	mov	r7,r19
   4fd10:	900d883a 	mov	r6,r18
   4fd14:	8809883a 	mov	r4,r17
   4fd18:	8080030d 	sth	r2,12(r16)
   4fd1c:	dfc00417 	ldw	ra,16(sp)
   4fd20:	dcc00317 	ldw	r19,12(sp)
   4fd24:	dc800217 	ldw	r18,8(sp)
   4fd28:	dc400117 	ldw	r17,4(sp)
   4fd2c:	dc000017 	ldw	r16,0(sp)
   4fd30:	dec00504 	addi	sp,sp,20
   4fd34:	00529481 	jmpi	52948 <_write_r>

0004fd38 <__sseek>:
   4fd38:	defffe04 	addi	sp,sp,-8
   4fd3c:	dc000015 	stw	r16,0(sp)
   4fd40:	2821883a 	mov	r16,r5
   4fd44:	2940038f 	ldh	r5,14(r5)
   4fd48:	dfc00115 	stw	ra,4(sp)
   4fd4c:	0052db80 	call	52db8 <_lseek_r>
   4fd50:	00ffffc4 	movi	r3,-1
   4fd54:	10c00826 	beq	r2,r3,4fd78 <__sseek+0x40>
   4fd58:	80c0030b 	ldhu	r3,12(r16)
   4fd5c:	80801415 	stw	r2,80(r16)
   4fd60:	18c40014 	ori	r3,r3,4096
   4fd64:	80c0030d 	sth	r3,12(r16)
   4fd68:	dfc00117 	ldw	ra,4(sp)
   4fd6c:	dc000017 	ldw	r16,0(sp)
   4fd70:	dec00204 	addi	sp,sp,8
   4fd74:	f800283a 	ret
   4fd78:	80c0030b 	ldhu	r3,12(r16)
   4fd7c:	18fbffcc 	andi	r3,r3,61439
   4fd80:	80c0030d 	sth	r3,12(r16)
   4fd84:	dfc00117 	ldw	ra,4(sp)
   4fd88:	dc000017 	ldw	r16,0(sp)
   4fd8c:	dec00204 	addi	sp,sp,8
   4fd90:	f800283a 	ret

0004fd94 <__sclose>:
   4fd94:	2940038f 	ldh	r5,14(r5)
   4fd98:	00529a81 	jmpi	529a8 <_close_r>

0004fd9c <__ssprint_r>:
   4fd9c:	30800217 	ldw	r2,8(r6)
   4fda0:	defff604 	addi	sp,sp,-40
   4fda4:	dc800215 	stw	r18,8(sp)
   4fda8:	dfc00915 	stw	ra,36(sp)
   4fdac:	df000815 	stw	fp,32(sp)
   4fdb0:	ddc00715 	stw	r23,28(sp)
   4fdb4:	dd800615 	stw	r22,24(sp)
   4fdb8:	dd400515 	stw	r21,20(sp)
   4fdbc:	dd000415 	stw	r20,16(sp)
   4fdc0:	dcc00315 	stw	r19,12(sp)
   4fdc4:	dc400115 	stw	r17,4(sp)
   4fdc8:	dc000015 	stw	r16,0(sp)
   4fdcc:	3025883a 	mov	r18,r6
   4fdd0:	10005826 	beq	r2,zero,4ff34 <__ssprint_r+0x198>
   4fdd4:	2027883a 	mov	r19,r4
   4fdd8:	35c00017 	ldw	r23,0(r6)
   4fddc:	29000017 	ldw	r4,0(r5)
   4fde0:	28800217 	ldw	r2,8(r5)
   4fde4:	2823883a 	mov	r17,r5
   4fde8:	0039883a 	mov	fp,zero
   4fdec:	0021883a 	mov	r16,zero
   4fdf0:	80003926 	beq	r16,zero,4fed8 <__ssprint_r+0x13c>
   4fdf4:	102b883a 	mov	r21,r2
   4fdf8:	102d883a 	mov	r22,r2
   4fdfc:	80803a36 	bltu	r16,r2,4fee8 <__ssprint_r+0x14c>
   4fe00:	88c0030b 	ldhu	r3,12(r17)
   4fe04:	1881200c 	andi	r2,r3,1152
   4fe08:	10002626 	beq	r2,zero,4fea4 <__ssprint_r+0x108>
   4fe0c:	88800517 	ldw	r2,20(r17)
   4fe10:	89400417 	ldw	r5,16(r17)
   4fe14:	81800044 	addi	r6,r16,1
   4fe18:	108f883a 	add	r7,r2,r2
   4fe1c:	3885883a 	add	r2,r7,r2
   4fe20:	100ed7fa 	srli	r7,r2,31
   4fe24:	216dc83a 	sub	r22,r4,r5
   4fe28:	3589883a 	add	r4,r6,r22
   4fe2c:	3885883a 	add	r2,r7,r2
   4fe30:	102bd07a 	srai	r21,r2,1
   4fe34:	a80d883a 	mov	r6,r21
   4fe38:	a900022e 	bgeu	r21,r4,4fe44 <__ssprint_r+0xa8>
   4fe3c:	202b883a 	mov	r21,r4
   4fe40:	200d883a 	mov	r6,r4
   4fe44:	18c1000c 	andi	r3,r3,1024
   4fe48:	18002a26 	beq	r3,zero,4fef4 <__ssprint_r+0x158>
   4fe4c:	300b883a 	mov	r5,r6
   4fe50:	9809883a 	mov	r4,r19
   4fe54:	00454100 	call	45410 <_malloc_r>
   4fe58:	1029883a 	mov	r20,r2
   4fe5c:	10002c26 	beq	r2,zero,4ff10 <__ssprint_r+0x174>
   4fe60:	89400417 	ldw	r5,16(r17)
   4fe64:	b00d883a 	mov	r6,r22
   4fe68:	1009883a 	mov	r4,r2
   4fe6c:	0045c980 	call	45c98 <memcpy>
   4fe70:	8880030b 	ldhu	r2,12(r17)
   4fe74:	00fedfc4 	movi	r3,-1153
   4fe78:	10c4703a 	and	r2,r2,r3
   4fe7c:	10802014 	ori	r2,r2,128
   4fe80:	8880030d 	sth	r2,12(r17)
   4fe84:	a589883a 	add	r4,r20,r22
   4fe88:	adadc83a 	sub	r22,r21,r22
   4fe8c:	8d400515 	stw	r21,20(r17)
   4fe90:	8d800215 	stw	r22,8(r17)
   4fe94:	8d000415 	stw	r20,16(r17)
   4fe98:	89000015 	stw	r4,0(r17)
   4fe9c:	802b883a 	mov	r21,r16
   4fea0:	802d883a 	mov	r22,r16
   4fea4:	b00d883a 	mov	r6,r22
   4fea8:	e00b883a 	mov	r5,fp
   4feac:	0045de00 	call	45de0 <memmove>
   4feb0:	88800217 	ldw	r2,8(r17)
   4feb4:	89000017 	ldw	r4,0(r17)
   4feb8:	90c00217 	ldw	r3,8(r18)
   4febc:	1545c83a 	sub	r2,r2,r21
   4fec0:	2589883a 	add	r4,r4,r22
   4fec4:	88800215 	stw	r2,8(r17)
   4fec8:	89000015 	stw	r4,0(r17)
   4fecc:	1c21c83a 	sub	r16,r3,r16
   4fed0:	94000215 	stw	r16,8(r18)
   4fed4:	80001726 	beq	r16,zero,4ff34 <__ssprint_r+0x198>
   4fed8:	bf000017 	ldw	fp,0(r23)
   4fedc:	bc000117 	ldw	r16,4(r23)
   4fee0:	bdc00204 	addi	r23,r23,8
   4fee4:	003fc206 	br	4fdf0 <__alt_mem_epcs_flash_controller+0xfe03edf0>
   4fee8:	802b883a 	mov	r21,r16
   4feec:	802d883a 	mov	r22,r16
   4fef0:	003fec06 	br	4fea4 <__alt_mem_epcs_flash_controller+0xfe03eea4>
   4fef4:	9809883a 	mov	r4,r19
   4fef8:	00462580 	call	46258 <_realloc_r>
   4fefc:	1029883a 	mov	r20,r2
   4ff00:	103fe01e 	bne	r2,zero,4fe84 <__alt_mem_epcs_flash_controller+0xfe03ee84>
   4ff04:	89400417 	ldw	r5,16(r17)
   4ff08:	9809883a 	mov	r4,r19
   4ff0c:	004dd5c0 	call	4dd5c <_free_r>
   4ff10:	88c0030b 	ldhu	r3,12(r17)
   4ff14:	00800304 	movi	r2,12
   4ff18:	98800015 	stw	r2,0(r19)
   4ff1c:	18c01014 	ori	r3,r3,64
   4ff20:	88c0030d 	sth	r3,12(r17)
   4ff24:	00bfffc4 	movi	r2,-1
   4ff28:	90000215 	stw	zero,8(r18)
   4ff2c:	90000115 	stw	zero,4(r18)
   4ff30:	00000206 	br	4ff3c <__ssprint_r+0x1a0>
   4ff34:	90000115 	stw	zero,4(r18)
   4ff38:	0005883a 	mov	r2,zero
   4ff3c:	dfc00917 	ldw	ra,36(sp)
   4ff40:	df000817 	ldw	fp,32(sp)
   4ff44:	ddc00717 	ldw	r23,28(sp)
   4ff48:	dd800617 	ldw	r22,24(sp)
   4ff4c:	dd400517 	ldw	r21,20(sp)
   4ff50:	dd000417 	ldw	r20,16(sp)
   4ff54:	dcc00317 	ldw	r19,12(sp)
   4ff58:	dc800217 	ldw	r18,8(sp)
   4ff5c:	dc400117 	ldw	r17,4(sp)
   4ff60:	dc000017 	ldw	r16,0(sp)
   4ff64:	dec00a04 	addi	sp,sp,40
   4ff68:	f800283a 	ret

0004ff6c <___svfiprintf_internal_r>:
   4ff6c:	2880030b 	ldhu	r2,12(r5)
   4ff70:	deffc804 	addi	sp,sp,-224
   4ff74:	dcc03115 	stw	r19,196(sp)
   4ff78:	dfc03715 	stw	ra,220(sp)
   4ff7c:	df003615 	stw	fp,216(sp)
   4ff80:	ddc03515 	stw	r23,212(sp)
   4ff84:	dd803415 	stw	r22,208(sp)
   4ff88:	dd403315 	stw	r21,204(sp)
   4ff8c:	dd003215 	stw	r20,200(sp)
   4ff90:	dc803015 	stw	r18,192(sp)
   4ff94:	dc402f15 	stw	r17,188(sp)
   4ff98:	dc002e15 	stw	r16,184(sp)
   4ff9c:	d9402715 	stw	r5,156(sp)
   4ffa0:	d9002a15 	stw	r4,168(sp)
   4ffa4:	1080200c 	andi	r2,r2,128
   4ffa8:	d9c02315 	stw	r7,140(sp)
   4ffac:	3027883a 	mov	r19,r6
   4ffb0:	10000226 	beq	r2,zero,4ffbc <___svfiprintf_internal_r+0x50>
   4ffb4:	28800417 	ldw	r2,16(r5)
   4ffb8:	10041d26 	beq	r2,zero,51030 <___svfiprintf_internal_r+0x10c4>
   4ffbc:	dac01a04 	addi	r11,sp,104
   4ffc0:	dac01e15 	stw	r11,120(sp)
   4ffc4:	d8801e17 	ldw	r2,120(sp)
   4ffc8:	dac019c4 	addi	r11,sp,103
   4ffcc:	dd402a17 	ldw	r21,168(sp)
   4ffd0:	ddc02717 	ldw	r23,156(sp)
   4ffd4:	058001b4 	movhi	r22,6
   4ffd8:	050001b4 	movhi	r20,6
   4ffdc:	dac01f15 	stw	r11,124(sp)
   4ffe0:	12d7c83a 	sub	r11,r2,r11
   4ffe4:	b5b5de04 	addi	r22,r22,-10376
   4ffe8:	a535da04 	addi	r20,r20,-10392
   4ffec:	dec01a15 	stw	sp,104(sp)
   4fff0:	d8001c15 	stw	zero,112(sp)
   4fff4:	d8001b15 	stw	zero,108(sp)
   4fff8:	d811883a 	mov	r8,sp
   4fffc:	d8002915 	stw	zero,164(sp)
   50000:	d8002515 	stw	zero,148(sp)
   50004:	dac02b15 	stw	r11,172(sp)
   50008:	98800007 	ldb	r2,0(r19)
   5000c:	1002dd26 	beq	r2,zero,50b84 <___svfiprintf_internal_r+0xc18>
   50010:	00c00944 	movi	r3,37
   50014:	9823883a 	mov	r17,r19
   50018:	10c0021e 	bne	r2,r3,50024 <___svfiprintf_internal_r+0xb8>
   5001c:	00001406 	br	50070 <___svfiprintf_internal_r+0x104>
   50020:	10c00326 	beq	r2,r3,50030 <___svfiprintf_internal_r+0xc4>
   50024:	8c400044 	addi	r17,r17,1
   50028:	88800007 	ldb	r2,0(r17)
   5002c:	103ffc1e 	bne	r2,zero,50020 <__alt_mem_epcs_flash_controller+0xfe03f020>
   50030:	8ce1c83a 	sub	r16,r17,r19
   50034:	80000e26 	beq	r16,zero,50070 <___svfiprintf_internal_r+0x104>
   50038:	d8c01c17 	ldw	r3,112(sp)
   5003c:	d8801b17 	ldw	r2,108(sp)
   50040:	44c00015 	stw	r19,0(r8)
   50044:	1c07883a 	add	r3,r3,r16
   50048:	10800044 	addi	r2,r2,1
   5004c:	d8c01c15 	stw	r3,112(sp)
   50050:	44000115 	stw	r16,4(r8)
   50054:	d8801b15 	stw	r2,108(sp)
   50058:	00c001c4 	movi	r3,7
   5005c:	18831e16 	blt	r3,r2,50cd8 <___svfiprintf_internal_r+0xd6c>
   50060:	42000204 	addi	r8,r8,8
   50064:	dac02517 	ldw	r11,148(sp)
   50068:	5c17883a 	add	r11,r11,r16
   5006c:	dac02515 	stw	r11,148(sp)
   50070:	88800007 	ldb	r2,0(r17)
   50074:	1002c526 	beq	r2,zero,50b8c <___svfiprintf_internal_r+0xc20>
   50078:	88c00047 	ldb	r3,1(r17)
   5007c:	8cc00044 	addi	r19,r17,1
   50080:	d8001d85 	stb	zero,118(sp)
   50084:	0009883a 	mov	r4,zero
   50088:	000f883a 	mov	r7,zero
   5008c:	043fffc4 	movi	r16,-1
   50090:	d8002415 	stw	zero,144(sp)
   50094:	0025883a 	mov	r18,zero
   50098:	01401604 	movi	r5,88
   5009c:	01800244 	movi	r6,9
   500a0:	02800a84 	movi	r10,42
   500a4:	02401b04 	movi	r9,108
   500a8:	9cc00044 	addi	r19,r19,1
   500ac:	18bff804 	addi	r2,r3,-32
   500b0:	2881dd36 	bltu	r5,r2,50828 <___svfiprintf_internal_r+0x8bc>
   500b4:	100490ba 	slli	r2,r2,2
   500b8:	02c00174 	movhi	r11,5
   500bc:	5ac03304 	addi	r11,r11,204
   500c0:	12c5883a 	add	r2,r2,r11
   500c4:	10800017 	ldw	r2,0(r2)
   500c8:	1000683a 	jmp	r2
   500cc:	000502c8 	cmpgei	zero,zero,5131
   500d0:	00050828 	cmpgeui	zero,zero,5152
   500d4:	00050828 	cmpgeui	zero,zero,5152
   500d8:	000502bc 	xorhi	zero,zero,5130
   500dc:	00050828 	cmpgeui	zero,zero,5152
   500e0:	00050828 	cmpgeui	zero,zero,5152
   500e4:	00050828 	cmpgeui	zero,zero,5152
   500e8:	00050828 	cmpgeui	zero,zero,5152
   500ec:	00050828 	cmpgeui	zero,zero,5152
   500f0:	00050828 	cmpgeui	zero,zero,5152
   500f4:	00050230 	cmpltui	zero,zero,5128
   500f8:	0005040c 	andi	zero,zero,5136
   500fc:	00050828 	cmpgeui	zero,zero,5152
   50100:	0005025c 	xori	zero,zero,5129
   50104:	0005085c 	xori	zero,zero,5153
   50108:	00050828 	cmpgeui	zero,zero,5152
   5010c:	00050850 	cmplti	zero,zero,5153
   50110:	000507f0 	cmpltui	zero,zero,5151
   50114:	000507f0 	cmpltui	zero,zero,5151
   50118:	000507f0 	cmpltui	zero,zero,5151
   5011c:	000507f0 	cmpltui	zero,zero,5151
   50120:	000507f0 	cmpltui	zero,zero,5151
   50124:	000507f0 	cmpltui	zero,zero,5151
   50128:	000507f0 	cmpltui	zero,zero,5151
   5012c:	000507f0 	cmpltui	zero,zero,5151
   50130:	000507f0 	cmpltui	zero,zero,5151
   50134:	00050828 	cmpgeui	zero,zero,5152
   50138:	00050828 	cmpgeui	zero,zero,5152
   5013c:	00050828 	cmpgeui	zero,zero,5152
   50140:	00050828 	cmpgeui	zero,zero,5152
   50144:	00050828 	cmpgeui	zero,zero,5152
   50148:	00050828 	cmpgeui	zero,zero,5152
   5014c:	00050828 	cmpgeui	zero,zero,5152
   50150:	00050828 	cmpgeui	zero,zero,5152
   50154:	00050828 	cmpgeui	zero,zero,5152
   50158:	00050828 	cmpgeui	zero,zero,5152
   5015c:	0005078c 	andi	zero,zero,5150
   50160:	00050828 	cmpgeui	zero,zero,5152
   50164:	00050828 	cmpgeui	zero,zero,5152
   50168:	00050828 	cmpgeui	zero,zero,5152
   5016c:	00050828 	cmpgeui	zero,zero,5152
   50170:	00050828 	cmpgeui	zero,zero,5152
   50174:	00050828 	cmpgeui	zero,zero,5152
   50178:	00050828 	cmpgeui	zero,zero,5152
   5017c:	00050828 	cmpgeui	zero,zero,5152
   50180:	00050828 	cmpgeui	zero,zero,5152
   50184:	00050828 	cmpgeui	zero,zero,5152
   50188:	00050904 	movi	zero,5156
   5018c:	00050828 	cmpgeui	zero,zero,5152
   50190:	00050828 	cmpgeui	zero,zero,5152
   50194:	00050828 	cmpgeui	zero,zero,5152
   50198:	00050828 	cmpgeui	zero,zero,5152
   5019c:	00050828 	cmpgeui	zero,zero,5152
   501a0:	0005089c 	xori	zero,zero,5154
   501a4:	00050828 	cmpgeui	zero,zero,5152
   501a8:	00050828 	cmpgeui	zero,zero,5152
   501ac:	000505d0 	cmplti	zero,zero,5143
   501b0:	00050828 	cmpgeui	zero,zero,5152
   501b4:	00050828 	cmpgeui	zero,zero,5152
   501b8:	00050828 	cmpgeui	zero,zero,5152
   501bc:	00050828 	cmpgeui	zero,zero,5152
   501c0:	00050828 	cmpgeui	zero,zero,5152
   501c4:	00050828 	cmpgeui	zero,zero,5152
   501c8:	00050828 	cmpgeui	zero,zero,5152
   501cc:	00050828 	cmpgeui	zero,zero,5152
   501d0:	00050828 	cmpgeui	zero,zero,5152
   501d4:	00050828 	cmpgeui	zero,zero,5152
   501d8:	000504c0 	call	504c <hd_derive+0x120>
   501dc:	0005066c 	andhi	zero,zero,5145
   501e0:	00050828 	cmpgeui	zero,zero,5152
   501e4:	00050828 	cmpgeui	zero,zero,5152
   501e8:	00050828 	cmpgeui	zero,zero,5152
   501ec:	00050660 	cmpeqi	zero,zero,5145
   501f0:	0005066c 	andhi	zero,zero,5145
   501f4:	00050828 	cmpgeui	zero,zero,5152
   501f8:	00050828 	cmpgeui	zero,zero,5152
   501fc:	00050650 	cmplti	zero,zero,5145
   50200:	00050828 	cmpgeui	zero,zero,5152
   50204:	00050614 	movui	zero,5144
   50208:	0005041c 	xori	zero,zero,5136
   5020c:	00050268 	cmpgeui	zero,zero,5129
   50210:	00050780 	call	5078 <btc_hash+0x24>
   50214:	00050828 	cmpgeui	zero,zero,5152
   50218:	00050734 	movhi	zero,5148
   5021c:	00050828 	cmpgeui	zero,zero,5152
   50220:	0005038c 	andi	zero,zero,5134
   50224:	00050828 	cmpgeui	zero,zero,5152
   50228:	00050828 	cmpgeui	zero,zero,5152
   5022c:	000502e8 	cmpgeui	zero,zero,5131
   50230:	dac02317 	ldw	r11,140(sp)
   50234:	5ac00017 	ldw	r11,0(r11)
   50238:	dac02415 	stw	r11,144(sp)
   5023c:	dac02317 	ldw	r11,140(sp)
   50240:	58800104 	addi	r2,r11,4
   50244:	dac02417 	ldw	r11,144(sp)
   50248:	5802e90e 	bge	r11,zero,50df0 <___svfiprintf_internal_r+0xe84>
   5024c:	dac02417 	ldw	r11,144(sp)
   50250:	d8802315 	stw	r2,140(sp)
   50254:	02d7c83a 	sub	r11,zero,r11
   50258:	dac02415 	stw	r11,144(sp)
   5025c:	94800114 	ori	r18,r18,4
   50260:	98c00007 	ldb	r3,0(r19)
   50264:	003f9006 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   50268:	00800c04 	movi	r2,48
   5026c:	dac02317 	ldw	r11,140(sp)
   50270:	d8801d05 	stb	r2,116(sp)
   50274:	00801e04 	movi	r2,120
   50278:	d8801d45 	stb	r2,117(sp)
   5027c:	d8001d85 	stb	zero,118(sp)
   50280:	58c00104 	addi	r3,r11,4
   50284:	5f000017 	ldw	fp,0(r11)
   50288:	0013883a 	mov	r9,zero
   5028c:	90800094 	ori	r2,r18,2
   50290:	80032b16 	blt	r16,zero,50f40 <___svfiprintf_internal_r+0xfd4>
   50294:	00bfdfc4 	movi	r2,-129
   50298:	90a4703a 	and	r18,r18,r2
   5029c:	d8c02315 	stw	r3,140(sp)
   502a0:	94800094 	ori	r18,r18,2
   502a4:	e002dc26 	beq	fp,zero,50e18 <___svfiprintf_internal_r+0xeac>
   502a8:	010001b4 	movhi	r4,6
   502ac:	21357204 	addi	r4,r4,-10808
   502b0:	0015883a 	mov	r10,zero
   502b4:	d9002915 	stw	r4,164(sp)
   502b8:	00002306 	br	50348 <___svfiprintf_internal_r+0x3dc>
   502bc:	94800054 	ori	r18,r18,1
   502c0:	98c00007 	ldb	r3,0(r19)
   502c4:	003f7806 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   502c8:	38803fcc 	andi	r2,r7,255
   502cc:	1080201c 	xori	r2,r2,128
   502d0:	10bfe004 	addi	r2,r2,-128
   502d4:	1002f31e 	bne	r2,zero,50ea4 <___svfiprintf_internal_r+0xf38>
   502d8:	01000044 	movi	r4,1
   502dc:	01c00804 	movi	r7,32
   502e0:	98c00007 	ldb	r3,0(r19)
   502e4:	003f7006 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   502e8:	21003fcc 	andi	r4,r4,255
   502ec:	2003aa1e 	bne	r4,zero,51198 <___svfiprintf_internal_r+0x122c>
   502f0:	008001b4 	movhi	r2,6
   502f4:	10b57204 	addi	r2,r2,-10808
   502f8:	d8802915 	stw	r2,164(sp)
   502fc:	9080080c 	andi	r2,r18,32
   50300:	1000ba26 	beq	r2,zero,505ec <___svfiprintf_internal_r+0x680>
   50304:	dac02317 	ldw	r11,140(sp)
   50308:	5f000017 	ldw	fp,0(r11)
   5030c:	5a400117 	ldw	r9,4(r11)
   50310:	5ac00204 	addi	r11,r11,8
   50314:	dac02315 	stw	r11,140(sp)
   50318:	9080004c 	andi	r2,r18,1
   5031c:	10029026 	beq	r2,zero,50d60 <___svfiprintf_internal_r+0xdf4>
   50320:	e244b03a 	or	r2,fp,r9
   50324:	1002d41e 	bne	r2,zero,50e78 <___svfiprintf_internal_r+0xf0c>
   50328:	d8001d85 	stb	zero,118(sp)
   5032c:	80030b16 	blt	r16,zero,50f5c <___svfiprintf_internal_r+0xff0>
   50330:	00bfdfc4 	movi	r2,-129
   50334:	90a4703a 	and	r18,r18,r2
   50338:	0015883a 	mov	r10,zero
   5033c:	80002426 	beq	r16,zero,503d0 <___svfiprintf_internal_r+0x464>
   50340:	0039883a 	mov	fp,zero
   50344:	0013883a 	mov	r9,zero
   50348:	d9002917 	ldw	r4,164(sp)
   5034c:	dc401a04 	addi	r17,sp,104
   50350:	e08003cc 	andi	r2,fp,15
   50354:	4806973a 	slli	r3,r9,28
   50358:	2085883a 	add	r2,r4,r2
   5035c:	e038d13a 	srli	fp,fp,4
   50360:	10800003 	ldbu	r2,0(r2)
   50364:	4812d13a 	srli	r9,r9,4
   50368:	8c7fffc4 	addi	r17,r17,-1
   5036c:	1f38b03a 	or	fp,r3,fp
   50370:	88800005 	stb	r2,0(r17)
   50374:	e244b03a 	or	r2,fp,r9
   50378:	103ff51e 	bne	r2,zero,50350 <__alt_mem_epcs_flash_controller+0xfe03f350>
   5037c:	dac01e17 	ldw	r11,120(sp)
   50380:	5c57c83a 	sub	r11,r11,r17
   50384:	dac02115 	stw	r11,132(sp)
   50388:	00001406 	br	503dc <___svfiprintf_internal_r+0x470>
   5038c:	21003fcc 	andi	r4,r4,255
   50390:	2003741e 	bne	r4,zero,51164 <___svfiprintf_internal_r+0x11f8>
   50394:	9080080c 	andi	r2,r18,32
   50398:	10014526 	beq	r2,zero,508b0 <___svfiprintf_internal_r+0x944>
   5039c:	dac02317 	ldw	r11,140(sp)
   503a0:	d8001d85 	stb	zero,118(sp)
   503a4:	58c00204 	addi	r3,r11,8
   503a8:	5f000017 	ldw	fp,0(r11)
   503ac:	5a400117 	ldw	r9,4(r11)
   503b0:	8002d916 	blt	r16,zero,50f18 <___svfiprintf_internal_r+0xfac>
   503b4:	013fdfc4 	movi	r4,-129
   503b8:	e244b03a 	or	r2,fp,r9
   503bc:	d8c02315 	stw	r3,140(sp)
   503c0:	9124703a 	and	r18,r18,r4
   503c4:	0015883a 	mov	r10,zero
   503c8:	1000b91e 	bne	r2,zero,506b0 <___svfiprintf_internal_r+0x744>
   503cc:	8002e61e 	bne	r16,zero,50f68 <___svfiprintf_internal_r+0xffc>
   503d0:	0021883a 	mov	r16,zero
   503d4:	d8002115 	stw	zero,132(sp)
   503d8:	dc401a04 	addi	r17,sp,104
   503dc:	d8c02117 	ldw	r3,132(sp)
   503e0:	dc002015 	stw	r16,128(sp)
   503e4:	80c0010e 	bge	r16,r3,503ec <___svfiprintf_internal_r+0x480>
   503e8:	d8c02015 	stw	r3,128(sp)
   503ec:	52803fcc 	andi	r10,r10,255
   503f0:	5280201c 	xori	r10,r10,128
   503f4:	52bfe004 	addi	r10,r10,-128
   503f8:	50003c26 	beq	r10,zero,504ec <___svfiprintf_internal_r+0x580>
   503fc:	dac02017 	ldw	r11,128(sp)
   50400:	5ac00044 	addi	r11,r11,1
   50404:	dac02015 	stw	r11,128(sp)
   50408:	00003806 	br	504ec <___svfiprintf_internal_r+0x580>
   5040c:	01000044 	movi	r4,1
   50410:	01c00ac4 	movi	r7,43
   50414:	98c00007 	ldb	r3,0(r19)
   50418:	003f2306 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   5041c:	21003fcc 	andi	r4,r4,255
   50420:	2003481e 	bne	r4,zero,51144 <___svfiprintf_internal_r+0x11d8>
   50424:	9080080c 	andi	r2,r18,32
   50428:	10013b26 	beq	r2,zero,50918 <___svfiprintf_internal_r+0x9ac>
   5042c:	dac02317 	ldw	r11,140(sp)
   50430:	d8001d85 	stb	zero,118(sp)
   50434:	58800204 	addi	r2,r11,8
   50438:	5f000017 	ldw	fp,0(r11)
   5043c:	5a400117 	ldw	r9,4(r11)
   50440:	8002a816 	blt	r16,zero,50ee4 <___svfiprintf_internal_r+0xf78>
   50444:	013fdfc4 	movi	r4,-129
   50448:	e246b03a 	or	r3,fp,r9
   5044c:	d8802315 	stw	r2,140(sp)
   50450:	9124703a 	and	r18,r18,r4
   50454:	18013c26 	beq	r3,zero,50948 <___svfiprintf_internal_r+0x9dc>
   50458:	0015883a 	mov	r10,zero
   5045c:	dc401a04 	addi	r17,sp,104
   50460:	e006d0fa 	srli	r3,fp,3
   50464:	4808977a 	slli	r4,r9,29
   50468:	4812d0fa 	srli	r9,r9,3
   5046c:	e70001cc 	andi	fp,fp,7
   50470:	e0800c04 	addi	r2,fp,48
   50474:	8c7fffc4 	addi	r17,r17,-1
   50478:	20f8b03a 	or	fp,r4,r3
   5047c:	88800005 	stb	r2,0(r17)
   50480:	e246b03a 	or	r3,fp,r9
   50484:	183ff61e 	bne	r3,zero,50460 <__alt_mem_epcs_flash_controller+0xfe03f460>
   50488:	90c0004c 	andi	r3,r18,1
   5048c:	1800a526 	beq	r3,zero,50724 <___svfiprintf_internal_r+0x7b8>
   50490:	10803fcc 	andi	r2,r2,255
   50494:	1080201c 	xori	r2,r2,128
   50498:	10bfe004 	addi	r2,r2,-128
   5049c:	00c00c04 	movi	r3,48
   504a0:	10ffb626 	beq	r2,r3,5037c <__alt_mem_epcs_flash_controller+0xfe03f37c>
   504a4:	88ffffc5 	stb	r3,-1(r17)
   504a8:	d8c01e17 	ldw	r3,120(sp)
   504ac:	88bfffc4 	addi	r2,r17,-1
   504b0:	1023883a 	mov	r17,r2
   504b4:	1887c83a 	sub	r3,r3,r2
   504b8:	d8c02115 	stw	r3,132(sp)
   504bc:	003fc706 	br	503dc <__alt_mem_epcs_flash_controller+0xfe03f3dc>
   504c0:	dac02317 	ldw	r11,140(sp)
   504c4:	00c00044 	movi	r3,1
   504c8:	d8c02015 	stw	r3,128(sp)
   504cc:	58800017 	ldw	r2,0(r11)
   504d0:	5ac00104 	addi	r11,r11,4
   504d4:	d8001d85 	stb	zero,118(sp)
   504d8:	d8801005 	stb	r2,64(sp)
   504dc:	dac02315 	stw	r11,140(sp)
   504e0:	d8c02115 	stw	r3,132(sp)
   504e4:	dc401004 	addi	r17,sp,64
   504e8:	0021883a 	mov	r16,zero
   504ec:	90c0008c 	andi	r3,r18,2
   504f0:	d8c02215 	stw	r3,136(sp)
   504f4:	18000326 	beq	r3,zero,50504 <___svfiprintf_internal_r+0x598>
   504f8:	dac02017 	ldw	r11,128(sp)
   504fc:	5ac00084 	addi	r11,r11,2
   50500:	dac02015 	stw	r11,128(sp)
   50504:	90c0210c 	andi	r3,r18,132
   50508:	d8c02615 	stw	r3,152(sp)
   5050c:	1801131e 	bne	r3,zero,5095c <___svfiprintf_internal_r+0x9f0>
   50510:	dac02417 	ldw	r11,144(sp)
   50514:	d8c02017 	ldw	r3,128(sp)
   50518:	58f9c83a 	sub	fp,r11,r3
   5051c:	07010f0e 	bge	zero,fp,5095c <___svfiprintf_internal_r+0x9f0>
   50520:	02400404 	movi	r9,16
   50524:	d8c01c17 	ldw	r3,112(sp)
   50528:	d8801b17 	ldw	r2,108(sp)
   5052c:	4f02d60e 	bge	r9,fp,51088 <___svfiprintf_internal_r+0x111c>
   50530:	014001b4 	movhi	r5,6
   50534:	2975de04 	addi	r5,r5,-10376
   50538:	d9402815 	stw	r5,160(sp)
   5053c:	028001c4 	movi	r10,7
   50540:	00000306 	br	50550 <___svfiprintf_internal_r+0x5e4>
   50544:	e73ffc04 	addi	fp,fp,-16
   50548:	42000204 	addi	r8,r8,8
   5054c:	4f00150e 	bge	r9,fp,505a4 <___svfiprintf_internal_r+0x638>
   50550:	18c00404 	addi	r3,r3,16
   50554:	10800044 	addi	r2,r2,1
   50558:	45800015 	stw	r22,0(r8)
   5055c:	42400115 	stw	r9,4(r8)
   50560:	d8c01c15 	stw	r3,112(sp)
   50564:	d8801b15 	stw	r2,108(sp)
   50568:	50bff60e 	bge	r10,r2,50544 <__alt_mem_epcs_flash_controller+0xfe03f544>
   5056c:	d9801a04 	addi	r6,sp,104
   50570:	b80b883a 	mov	r5,r23
   50574:	a809883a 	mov	r4,r21
   50578:	da402c15 	stw	r9,176(sp)
   5057c:	da802d15 	stw	r10,180(sp)
   50580:	004fd9c0 	call	4fd9c <__ssprint_r>
   50584:	da402c17 	ldw	r9,176(sp)
   50588:	da802d17 	ldw	r10,180(sp)
   5058c:	1001851e 	bne	r2,zero,50ba4 <___svfiprintf_internal_r+0xc38>
   50590:	e73ffc04 	addi	fp,fp,-16
   50594:	d8c01c17 	ldw	r3,112(sp)
   50598:	d8801b17 	ldw	r2,108(sp)
   5059c:	d811883a 	mov	r8,sp
   505a0:	4f3feb16 	blt	r9,fp,50550 <__alt_mem_epcs_flash_controller+0xfe03f550>
   505a4:	dac02817 	ldw	r11,160(sp)
   505a8:	e0c7883a 	add	r3,fp,r3
   505ac:	10800044 	addi	r2,r2,1
   505b0:	42c00015 	stw	r11,0(r8)
   505b4:	47000115 	stw	fp,4(r8)
   505b8:	d8c01c15 	stw	r3,112(sp)
   505bc:	d8801b15 	stw	r2,108(sp)
   505c0:	010001c4 	movi	r4,7
   505c4:	2081ee16 	blt	r4,r2,50d80 <___svfiprintf_internal_r+0xe14>
   505c8:	42000204 	addi	r8,r8,8
   505cc:	0000e506 	br	50964 <___svfiprintf_internal_r+0x9f8>
   505d0:	21003fcc 	andi	r4,r4,255
   505d4:	2002dd1e 	bne	r4,zero,5114c <___svfiprintf_internal_r+0x11e0>
   505d8:	008001b4 	movhi	r2,6
   505dc:	10b56d04 	addi	r2,r2,-10828
   505e0:	d8802915 	stw	r2,164(sp)
   505e4:	9080080c 	andi	r2,r18,32
   505e8:	103f461e 	bne	r2,zero,50304 <__alt_mem_epcs_flash_controller+0xfe03f304>
   505ec:	9080040c 	andi	r2,r18,16
   505f0:	10022e1e 	bne	r2,zero,50eac <___svfiprintf_internal_r+0xf40>
   505f4:	9080100c 	andi	r2,r18,64
   505f8:	dac02317 	ldw	r11,140(sp)
   505fc:	10027326 	beq	r2,zero,50fcc <___svfiprintf_internal_r+0x1060>
   50600:	5f00000b 	ldhu	fp,0(r11)
   50604:	5ac00104 	addi	r11,r11,4
   50608:	0013883a 	mov	r9,zero
   5060c:	dac02315 	stw	r11,140(sp)
   50610:	003f4106 	br	50318 <__alt_mem_epcs_flash_controller+0xfe03f318>
   50614:	21003fcc 	andi	r4,r4,255
   50618:	2002e11e 	bne	r4,zero,511a0 <___svfiprintf_internal_r+0x1234>
   5061c:	9080080c 	andi	r2,r18,32
   50620:	1002011e 	bne	r2,zero,50e28 <___svfiprintf_internal_r+0xebc>
   50624:	9080040c 	andi	r2,r18,16
   50628:	10023e1e 	bne	r2,zero,50f24 <___svfiprintf_internal_r+0xfb8>
   5062c:	9480100c 	andi	r18,r18,64
   50630:	90023c26 	beq	r18,zero,50f24 <___svfiprintf_internal_r+0xfb8>
   50634:	dac02317 	ldw	r11,140(sp)
   50638:	58800017 	ldw	r2,0(r11)
   5063c:	5ac00104 	addi	r11,r11,4
   50640:	dac02315 	stw	r11,140(sp)
   50644:	dac02517 	ldw	r11,148(sp)
   50648:	12c0000d 	sth	r11,0(r2)
   5064c:	003e6e06 	br	50008 <__alt_mem_epcs_flash_controller+0xfe03f008>
   50650:	98c00007 	ldb	r3,0(r19)
   50654:	1a422926 	beq	r3,r9,50efc <___svfiprintf_internal_r+0xf90>
   50658:	94800414 	ori	r18,r18,16
   5065c:	003e9206 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   50660:	94801014 	ori	r18,r18,64
   50664:	98c00007 	ldb	r3,0(r19)
   50668:	003e8f06 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   5066c:	21003fcc 	andi	r4,r4,255
   50670:	2002c71e 	bne	r4,zero,51190 <___svfiprintf_internal_r+0x1224>
   50674:	9080080c 	andi	r2,r18,32
   50678:	10004926 	beq	r2,zero,507a0 <___svfiprintf_internal_r+0x834>
   5067c:	dac02317 	ldw	r11,140(sp)
   50680:	58800117 	ldw	r2,4(r11)
   50684:	5f000017 	ldw	fp,0(r11)
   50688:	5ac00204 	addi	r11,r11,8
   5068c:	dac02315 	stw	r11,140(sp)
   50690:	1013883a 	mov	r9,r2
   50694:	10004b16 	blt	r2,zero,507c4 <___svfiprintf_internal_r+0x858>
   50698:	da801d83 	ldbu	r10,118(sp)
   5069c:	8001cb16 	blt	r16,zero,50dcc <___svfiprintf_internal_r+0xe60>
   506a0:	00ffdfc4 	movi	r3,-129
   506a4:	e244b03a 	or	r2,fp,r9
   506a8:	90e4703a 	and	r18,r18,r3
   506ac:	103f4726 	beq	r2,zero,503cc <__alt_mem_epcs_flash_controller+0xfe03f3cc>
   506b0:	48008c26 	beq	r9,zero,508e4 <___svfiprintf_internal_r+0x978>
   506b4:	dc802015 	stw	r18,128(sp)
   506b8:	dc002115 	stw	r16,132(sp)
   506bc:	dc401a04 	addi	r17,sp,104
   506c0:	e021883a 	mov	r16,fp
   506c4:	da002215 	stw	r8,136(sp)
   506c8:	5039883a 	mov	fp,r10
   506cc:	4825883a 	mov	r18,r9
   506d0:	8009883a 	mov	r4,r16
   506d4:	900b883a 	mov	r5,r18
   506d8:	01800284 	movi	r6,10
   506dc:	000f883a 	mov	r7,zero
   506e0:	00535d80 	call	535d8 <__umoddi3>
   506e4:	10800c04 	addi	r2,r2,48
   506e8:	8c7fffc4 	addi	r17,r17,-1
   506ec:	8009883a 	mov	r4,r16
   506f0:	900b883a 	mov	r5,r18
   506f4:	88800005 	stb	r2,0(r17)
   506f8:	01800284 	movi	r6,10
   506fc:	000f883a 	mov	r7,zero
   50700:	00530600 	call	53060 <__udivdi3>
   50704:	1021883a 	mov	r16,r2
   50708:	10c4b03a 	or	r2,r2,r3
   5070c:	1825883a 	mov	r18,r3
   50710:	103fef1e 	bne	r2,zero,506d0 <__alt_mem_epcs_flash_controller+0xfe03f6d0>
   50714:	dc802017 	ldw	r18,128(sp)
   50718:	dc002117 	ldw	r16,132(sp)
   5071c:	da002217 	ldw	r8,136(sp)
   50720:	e015883a 	mov	r10,fp
   50724:	d8c01e17 	ldw	r3,120(sp)
   50728:	1c47c83a 	sub	r3,r3,r17
   5072c:	d8c02115 	stw	r3,132(sp)
   50730:	003f2a06 	br	503dc <__alt_mem_epcs_flash_controller+0xfe03f3dc>
   50734:	dac02317 	ldw	r11,140(sp)
   50738:	d8001d85 	stb	zero,118(sp)
   5073c:	5c400017 	ldw	r17,0(r11)
   50740:	5f000104 	addi	fp,r11,4
   50744:	88022f26 	beq	r17,zero,51004 <___svfiprintf_internal_r+0x1098>
   50748:	80022516 	blt	r16,zero,50fe0 <___svfiprintf_internal_r+0x1074>
   5074c:	800d883a 	mov	r6,r16
   50750:	000b883a 	mov	r5,zero
   50754:	8809883a 	mov	r4,r17
   50758:	da002c15 	stw	r8,176(sp)
   5075c:	004e9a40 	call	4e9a4 <memchr>
   50760:	da002c17 	ldw	r8,176(sp)
   50764:	10026426 	beq	r2,zero,510f8 <___svfiprintf_internal_r+0x118c>
   50768:	1445c83a 	sub	r2,r2,r17
   5076c:	d8802115 	stw	r2,132(sp)
   50770:	da801d83 	ldbu	r10,118(sp)
   50774:	df002315 	stw	fp,140(sp)
   50778:	0021883a 	mov	r16,zero
   5077c:	003f1706 	br	503dc <__alt_mem_epcs_flash_controller+0xfe03f3dc>
   50780:	94800814 	ori	r18,r18,32
   50784:	98c00007 	ldb	r3,0(r19)
   50788:	003e4706 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   5078c:	21003fcc 	andi	r4,r4,255
   50790:	2002701e 	bne	r4,zero,51154 <___svfiprintf_internal_r+0x11e8>
   50794:	94800414 	ori	r18,r18,16
   50798:	9080080c 	andi	r2,r18,32
   5079c:	103fb71e 	bne	r2,zero,5067c <__alt_mem_epcs_flash_controller+0xfe03f67c>
   507a0:	9080040c 	andi	r2,r18,16
   507a4:	1001ab26 	beq	r2,zero,50e54 <___svfiprintf_internal_r+0xee8>
   507a8:	dac02317 	ldw	r11,140(sp)
   507ac:	5f000017 	ldw	fp,0(r11)
   507b0:	5ac00104 	addi	r11,r11,4
   507b4:	dac02315 	stw	r11,140(sp)
   507b8:	e013d7fa 	srai	r9,fp,31
   507bc:	4805883a 	mov	r2,r9
   507c0:	103fb50e 	bge	r2,zero,50698 <__alt_mem_epcs_flash_controller+0xfe03f698>
   507c4:	0739c83a 	sub	fp,zero,fp
   507c8:	02800b44 	movi	r10,45
   507cc:	e004c03a 	cmpne	r2,fp,zero
   507d0:	0253c83a 	sub	r9,zero,r9
   507d4:	da801d85 	stb	r10,118(sp)
   507d8:	4893c83a 	sub	r9,r9,r2
   507dc:	80023016 	blt	r16,zero,510a0 <___svfiprintf_internal_r+0x1134>
   507e0:	00bfdfc4 	movi	r2,-129
   507e4:	90a4703a 	and	r18,r18,r2
   507e8:	483fb21e 	bne	r9,zero,506b4 <__alt_mem_epcs_flash_controller+0xfe03f6b4>
   507ec:	00003d06 	br	508e4 <___svfiprintf_internal_r+0x978>
   507f0:	9817883a 	mov	r11,r19
   507f4:	d8002415 	stw	zero,144(sp)
   507f8:	18bff404 	addi	r2,r3,-48
   507fc:	0019883a 	mov	r12,zero
   50800:	58c00007 	ldb	r3,0(r11)
   50804:	630002a4 	muli	r12,r12,10
   50808:	9cc00044 	addi	r19,r19,1
   5080c:	9817883a 	mov	r11,r19
   50810:	1319883a 	add	r12,r2,r12
   50814:	18bff404 	addi	r2,r3,-48
   50818:	30bff92e 	bgeu	r6,r2,50800 <__alt_mem_epcs_flash_controller+0xfe03f800>
   5081c:	db002415 	stw	r12,144(sp)
   50820:	18bff804 	addi	r2,r3,-32
   50824:	28be232e 	bgeu	r5,r2,500b4 <__alt_mem_epcs_flash_controller+0xfe03f0b4>
   50828:	21003fcc 	andi	r4,r4,255
   5082c:	20024b1e 	bne	r4,zero,5115c <___svfiprintf_internal_r+0x11f0>
   50830:	1800d626 	beq	r3,zero,50b8c <___svfiprintf_internal_r+0xc20>
   50834:	02c00044 	movi	r11,1
   50838:	dac02015 	stw	r11,128(sp)
   5083c:	d8c01005 	stb	r3,64(sp)
   50840:	d8001d85 	stb	zero,118(sp)
   50844:	dac02115 	stw	r11,132(sp)
   50848:	dc401004 	addi	r17,sp,64
   5084c:	003f2606 	br	504e8 <__alt_mem_epcs_flash_controller+0xfe03f4e8>
   50850:	94802014 	ori	r18,r18,128
   50854:	98c00007 	ldb	r3,0(r19)
   50858:	003e1306 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   5085c:	98c00007 	ldb	r3,0(r19)
   50860:	9ac00044 	addi	r11,r19,1
   50864:	1a822b26 	beq	r3,r10,51114 <___svfiprintf_internal_r+0x11a8>
   50868:	18bff404 	addi	r2,r3,-48
   5086c:	0021883a 	mov	r16,zero
   50870:	30821e36 	bltu	r6,r2,510ec <___svfiprintf_internal_r+0x1180>
   50874:	58c00007 	ldb	r3,0(r11)
   50878:	840002a4 	muli	r16,r16,10
   5087c:	5cc00044 	addi	r19,r11,1
   50880:	9817883a 	mov	r11,r19
   50884:	80a1883a 	add	r16,r16,r2
   50888:	18bff404 	addi	r2,r3,-48
   5088c:	30bff92e 	bgeu	r6,r2,50874 <__alt_mem_epcs_flash_controller+0xfe03f874>
   50890:	803e060e 	bge	r16,zero,500ac <__alt_mem_epcs_flash_controller+0xfe03f0ac>
   50894:	043fffc4 	movi	r16,-1
   50898:	003e0406 	br	500ac <__alt_mem_epcs_flash_controller+0xfe03f0ac>
   5089c:	21003fcc 	andi	r4,r4,255
   508a0:	2002371e 	bne	r4,zero,51180 <___svfiprintf_internal_r+0x1214>
   508a4:	94800414 	ori	r18,r18,16
   508a8:	9080080c 	andi	r2,r18,32
   508ac:	103ebb1e 	bne	r2,zero,5039c <__alt_mem_epcs_flash_controller+0xfe03f39c>
   508b0:	9080040c 	andi	r2,r18,16
   508b4:	10013b26 	beq	r2,zero,50da4 <___svfiprintf_internal_r+0xe38>
   508b8:	dac02317 	ldw	r11,140(sp)
   508bc:	d8001d85 	stb	zero,118(sp)
   508c0:	0013883a 	mov	r9,zero
   508c4:	58800104 	addi	r2,r11,4
   508c8:	5f000017 	ldw	fp,0(r11)
   508cc:	80013d16 	blt	r16,zero,50dc4 <___svfiprintf_internal_r+0xe58>
   508d0:	00ffdfc4 	movi	r3,-129
   508d4:	d8802315 	stw	r2,140(sp)
   508d8:	90e4703a 	and	r18,r18,r3
   508dc:	0015883a 	mov	r10,zero
   508e0:	e03eba26 	beq	fp,zero,503cc <__alt_mem_epcs_flash_controller+0xfe03f3cc>
   508e4:	00800244 	movi	r2,9
   508e8:	173f7236 	bltu	r2,fp,506b4 <__alt_mem_epcs_flash_controller+0xfe03f6b4>
   508ec:	dac02b17 	ldw	r11,172(sp)
   508f0:	e7000c04 	addi	fp,fp,48
   508f4:	df0019c5 	stb	fp,103(sp)
   508f8:	dac02115 	stw	r11,132(sp)
   508fc:	dc4019c4 	addi	r17,sp,103
   50900:	003eb606 	br	503dc <__alt_mem_epcs_flash_controller+0xfe03f3dc>
   50904:	21003fcc 	andi	r4,r4,255
   50908:	20021f1e 	bne	r4,zero,51188 <___svfiprintf_internal_r+0x121c>
   5090c:	94800414 	ori	r18,r18,16
   50910:	9080080c 	andi	r2,r18,32
   50914:	103ec51e 	bne	r2,zero,5042c <__alt_mem_epcs_flash_controller+0xfe03f42c>
   50918:	9080040c 	andi	r2,r18,16
   5091c:	10016926 	beq	r2,zero,50ec4 <___svfiprintf_internal_r+0xf58>
   50920:	dac02317 	ldw	r11,140(sp)
   50924:	d8001d85 	stb	zero,118(sp)
   50928:	0013883a 	mov	r9,zero
   5092c:	58800104 	addi	r2,r11,4
   50930:	5f000017 	ldw	fp,0(r11)
   50934:	80016b16 	blt	r16,zero,50ee4 <___svfiprintf_internal_r+0xf78>
   50938:	00ffdfc4 	movi	r3,-129
   5093c:	d8802315 	stw	r2,140(sp)
   50940:	90e4703a 	and	r18,r18,r3
   50944:	e03ec41e 	bne	fp,zero,50458 <__alt_mem_epcs_flash_controller+0xfe03f458>
   50948:	0015883a 	mov	r10,zero
   5094c:	8001c226 	beq	r16,zero,51058 <___svfiprintf_internal_r+0x10ec>
   50950:	0039883a 	mov	fp,zero
   50954:	0013883a 	mov	r9,zero
   50958:	003ec006 	br	5045c <__alt_mem_epcs_flash_controller+0xfe03f45c>
   5095c:	d8c01c17 	ldw	r3,112(sp)
   50960:	d8801b17 	ldw	r2,108(sp)
   50964:	d9001d87 	ldb	r4,118(sp)
   50968:	20000b26 	beq	r4,zero,50998 <___svfiprintf_internal_r+0xa2c>
   5096c:	d9001d84 	addi	r4,sp,118
   50970:	18c00044 	addi	r3,r3,1
   50974:	10800044 	addi	r2,r2,1
   50978:	41000015 	stw	r4,0(r8)
   5097c:	01000044 	movi	r4,1
   50980:	41000115 	stw	r4,4(r8)
   50984:	d8c01c15 	stw	r3,112(sp)
   50988:	d8801b15 	stw	r2,108(sp)
   5098c:	010001c4 	movi	r4,7
   50990:	2080e116 	blt	r4,r2,50d18 <___svfiprintf_internal_r+0xdac>
   50994:	42000204 	addi	r8,r8,8
   50998:	dac02217 	ldw	r11,136(sp)
   5099c:	58000b26 	beq	r11,zero,509cc <___svfiprintf_internal_r+0xa60>
   509a0:	d9001d04 	addi	r4,sp,116
   509a4:	18c00084 	addi	r3,r3,2
   509a8:	10800044 	addi	r2,r2,1
   509ac:	41000015 	stw	r4,0(r8)
   509b0:	01000084 	movi	r4,2
   509b4:	41000115 	stw	r4,4(r8)
   509b8:	d8c01c15 	stw	r3,112(sp)
   509bc:	d8801b15 	stw	r2,108(sp)
   509c0:	010001c4 	movi	r4,7
   509c4:	2080dd16 	blt	r4,r2,50d3c <___svfiprintf_internal_r+0xdd0>
   509c8:	42000204 	addi	r8,r8,8
   509cc:	dac02617 	ldw	r11,152(sp)
   509d0:	01002004 	movi	r4,128
   509d4:	59008426 	beq	r11,r4,50be8 <___svfiprintf_internal_r+0xc7c>
   509d8:	dac02117 	ldw	r11,132(sp)
   509dc:	82e1c83a 	sub	r16,r16,r11
   509e0:	0400270e 	bge	zero,r16,50a80 <___svfiprintf_internal_r+0xb14>
   509e4:	01c00404 	movi	r7,16
   509e8:	3c016a0e 	bge	r7,r16,50f94 <___svfiprintf_internal_r+0x1028>
   509ec:	014001b4 	movhi	r5,6
   509f0:	2975da04 	addi	r5,r5,-10392
   509f4:	d9402215 	stw	r5,136(sp)
   509f8:	070001c4 	movi	fp,7
   509fc:	00000306 	br	50a0c <___svfiprintf_internal_r+0xaa0>
   50a00:	843ffc04 	addi	r16,r16,-16
   50a04:	42000204 	addi	r8,r8,8
   50a08:	3c00130e 	bge	r7,r16,50a58 <___svfiprintf_internal_r+0xaec>
   50a0c:	18c00404 	addi	r3,r3,16
   50a10:	10800044 	addi	r2,r2,1
   50a14:	45000015 	stw	r20,0(r8)
   50a18:	41c00115 	stw	r7,4(r8)
   50a1c:	d8c01c15 	stw	r3,112(sp)
   50a20:	d8801b15 	stw	r2,108(sp)
   50a24:	e0bff60e 	bge	fp,r2,50a00 <__alt_mem_epcs_flash_controller+0xfe03fa00>
   50a28:	d9801a04 	addi	r6,sp,104
   50a2c:	b80b883a 	mov	r5,r23
   50a30:	a809883a 	mov	r4,r21
   50a34:	d9c02c15 	stw	r7,176(sp)
   50a38:	004fd9c0 	call	4fd9c <__ssprint_r>
   50a3c:	d9c02c17 	ldw	r7,176(sp)
   50a40:	1000581e 	bne	r2,zero,50ba4 <___svfiprintf_internal_r+0xc38>
   50a44:	843ffc04 	addi	r16,r16,-16
   50a48:	d8c01c17 	ldw	r3,112(sp)
   50a4c:	d8801b17 	ldw	r2,108(sp)
   50a50:	d811883a 	mov	r8,sp
   50a54:	3c3fed16 	blt	r7,r16,50a0c <__alt_mem_epcs_flash_controller+0xfe03fa0c>
   50a58:	dac02217 	ldw	r11,136(sp)
   50a5c:	1c07883a 	add	r3,r3,r16
   50a60:	10800044 	addi	r2,r2,1
   50a64:	42c00015 	stw	r11,0(r8)
   50a68:	44000115 	stw	r16,4(r8)
   50a6c:	d8c01c15 	stw	r3,112(sp)
   50a70:	d8801b15 	stw	r2,108(sp)
   50a74:	010001c4 	movi	r4,7
   50a78:	20809e16 	blt	r4,r2,50cf4 <___svfiprintf_internal_r+0xd88>
   50a7c:	42000204 	addi	r8,r8,8
   50a80:	dac02117 	ldw	r11,132(sp)
   50a84:	10800044 	addi	r2,r2,1
   50a88:	44400015 	stw	r17,0(r8)
   50a8c:	58c7883a 	add	r3,r11,r3
   50a90:	42c00115 	stw	r11,4(r8)
   50a94:	d8c01c15 	stw	r3,112(sp)
   50a98:	d8801b15 	stw	r2,108(sp)
   50a9c:	010001c4 	movi	r4,7
   50aa0:	20807f16 	blt	r4,r2,50ca0 <___svfiprintf_internal_r+0xd34>
   50aa4:	42000204 	addi	r8,r8,8
   50aa8:	9480010c 	andi	r18,r18,4
   50aac:	90002926 	beq	r18,zero,50b54 <___svfiprintf_internal_r+0xbe8>
   50ab0:	dac02417 	ldw	r11,144(sp)
   50ab4:	d8802017 	ldw	r2,128(sp)
   50ab8:	58a1c83a 	sub	r16,r11,r2
   50abc:	0400250e 	bge	zero,r16,50b54 <___svfiprintf_internal_r+0xbe8>
   50ac0:	04400404 	movi	r17,16
   50ac4:	d8801b17 	ldw	r2,108(sp)
   50ac8:	8c017c0e 	bge	r17,r16,510bc <___svfiprintf_internal_r+0x1150>
   50acc:	014001b4 	movhi	r5,6
   50ad0:	2975de04 	addi	r5,r5,-10376
   50ad4:	d9402815 	stw	r5,160(sp)
   50ad8:	048001c4 	movi	r18,7
   50adc:	00000306 	br	50aec <___svfiprintf_internal_r+0xb80>
   50ae0:	843ffc04 	addi	r16,r16,-16
   50ae4:	42000204 	addi	r8,r8,8
   50ae8:	8c00110e 	bge	r17,r16,50b30 <___svfiprintf_internal_r+0xbc4>
   50aec:	18c00404 	addi	r3,r3,16
   50af0:	10800044 	addi	r2,r2,1
   50af4:	45800015 	stw	r22,0(r8)
   50af8:	44400115 	stw	r17,4(r8)
   50afc:	d8c01c15 	stw	r3,112(sp)
   50b00:	d8801b15 	stw	r2,108(sp)
   50b04:	90bff60e 	bge	r18,r2,50ae0 <__alt_mem_epcs_flash_controller+0xfe03fae0>
   50b08:	d9801a04 	addi	r6,sp,104
   50b0c:	b80b883a 	mov	r5,r23
   50b10:	a809883a 	mov	r4,r21
   50b14:	004fd9c0 	call	4fd9c <__ssprint_r>
   50b18:	1000221e 	bne	r2,zero,50ba4 <___svfiprintf_internal_r+0xc38>
   50b1c:	843ffc04 	addi	r16,r16,-16
   50b20:	d8c01c17 	ldw	r3,112(sp)
   50b24:	d8801b17 	ldw	r2,108(sp)
   50b28:	d811883a 	mov	r8,sp
   50b2c:	8c3fef16 	blt	r17,r16,50aec <__alt_mem_epcs_flash_controller+0xfe03faec>
   50b30:	dac02817 	ldw	r11,160(sp)
   50b34:	1c07883a 	add	r3,r3,r16
   50b38:	10800044 	addi	r2,r2,1
   50b3c:	42c00015 	stw	r11,0(r8)
   50b40:	44000115 	stw	r16,4(r8)
   50b44:	d8c01c15 	stw	r3,112(sp)
   50b48:	d8801b15 	stw	r2,108(sp)
   50b4c:	010001c4 	movi	r4,7
   50b50:	2080aa16 	blt	r4,r2,50dfc <___svfiprintf_internal_r+0xe90>
   50b54:	d8802417 	ldw	r2,144(sp)
   50b58:	dac02017 	ldw	r11,128(sp)
   50b5c:	12c0010e 	bge	r2,r11,50b64 <___svfiprintf_internal_r+0xbf8>
   50b60:	5805883a 	mov	r2,r11
   50b64:	dac02517 	ldw	r11,148(sp)
   50b68:	5897883a 	add	r11,r11,r2
   50b6c:	dac02515 	stw	r11,148(sp)
   50b70:	1800531e 	bne	r3,zero,50cc0 <___svfiprintf_internal_r+0xd54>
   50b74:	98800007 	ldb	r2,0(r19)
   50b78:	d8001b15 	stw	zero,108(sp)
   50b7c:	d811883a 	mov	r8,sp
   50b80:	103d231e 	bne	r2,zero,50010 <__alt_mem_epcs_flash_controller+0xfe03f010>
   50b84:	9823883a 	mov	r17,r19
   50b88:	003d3906 	br	50070 <__alt_mem_epcs_flash_controller+0xfe03f070>
   50b8c:	d8801c17 	ldw	r2,112(sp)
   50b90:	10000426 	beq	r2,zero,50ba4 <___svfiprintf_internal_r+0xc38>
   50b94:	d9402717 	ldw	r5,156(sp)
   50b98:	d9002a17 	ldw	r4,168(sp)
   50b9c:	d9801a04 	addi	r6,sp,104
   50ba0:	004fd9c0 	call	4fd9c <__ssprint_r>
   50ba4:	dac02717 	ldw	r11,156(sp)
   50ba8:	d8802517 	ldw	r2,148(sp)
   50bac:	58c0030b 	ldhu	r3,12(r11)
   50bb0:	18c0100c 	andi	r3,r3,64
   50bb4:	1801381e 	bne	r3,zero,51098 <___svfiprintf_internal_r+0x112c>
   50bb8:	dfc03717 	ldw	ra,220(sp)
   50bbc:	df003617 	ldw	fp,216(sp)
   50bc0:	ddc03517 	ldw	r23,212(sp)
   50bc4:	dd803417 	ldw	r22,208(sp)
   50bc8:	dd403317 	ldw	r21,204(sp)
   50bcc:	dd003217 	ldw	r20,200(sp)
   50bd0:	dcc03117 	ldw	r19,196(sp)
   50bd4:	dc803017 	ldw	r18,192(sp)
   50bd8:	dc402f17 	ldw	r17,188(sp)
   50bdc:	dc002e17 	ldw	r16,184(sp)
   50be0:	dec03804 	addi	sp,sp,224
   50be4:	f800283a 	ret
   50be8:	dac02417 	ldw	r11,144(sp)
   50bec:	d9002017 	ldw	r4,128(sp)
   50bf0:	5939c83a 	sub	fp,r11,r4
   50bf4:	073f780e 	bge	zero,fp,509d8 <__alt_mem_epcs_flash_controller+0xfe03f9d8>
   50bf8:	02400404 	movi	r9,16
   50bfc:	4f01370e 	bge	r9,fp,510dc <___svfiprintf_internal_r+0x1170>
   50c00:	02c001b4 	movhi	r11,6
   50c04:	5af5da04 	addi	r11,r11,-10392
   50c08:	dac02215 	stw	r11,136(sp)
   50c0c:	028001c4 	movi	r10,7
   50c10:	00000306 	br	50c20 <___svfiprintf_internal_r+0xcb4>
   50c14:	e73ffc04 	addi	fp,fp,-16
   50c18:	42000204 	addi	r8,r8,8
   50c1c:	4f00150e 	bge	r9,fp,50c74 <___svfiprintf_internal_r+0xd08>
   50c20:	18c00404 	addi	r3,r3,16
   50c24:	10800044 	addi	r2,r2,1
   50c28:	45000015 	stw	r20,0(r8)
   50c2c:	42400115 	stw	r9,4(r8)
   50c30:	d8c01c15 	stw	r3,112(sp)
   50c34:	d8801b15 	stw	r2,108(sp)
   50c38:	50bff60e 	bge	r10,r2,50c14 <__alt_mem_epcs_flash_controller+0xfe03fc14>
   50c3c:	d9801a04 	addi	r6,sp,104
   50c40:	b80b883a 	mov	r5,r23
   50c44:	a809883a 	mov	r4,r21
   50c48:	da402c15 	stw	r9,176(sp)
   50c4c:	da802d15 	stw	r10,180(sp)
   50c50:	004fd9c0 	call	4fd9c <__ssprint_r>
   50c54:	da402c17 	ldw	r9,176(sp)
   50c58:	da802d17 	ldw	r10,180(sp)
   50c5c:	103fd11e 	bne	r2,zero,50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50c60:	e73ffc04 	addi	fp,fp,-16
   50c64:	d8c01c17 	ldw	r3,112(sp)
   50c68:	d8801b17 	ldw	r2,108(sp)
   50c6c:	d811883a 	mov	r8,sp
   50c70:	4f3feb16 	blt	r9,fp,50c20 <__alt_mem_epcs_flash_controller+0xfe03fc20>
   50c74:	dac02217 	ldw	r11,136(sp)
   50c78:	1f07883a 	add	r3,r3,fp
   50c7c:	10800044 	addi	r2,r2,1
   50c80:	42c00015 	stw	r11,0(r8)
   50c84:	47000115 	stw	fp,4(r8)
   50c88:	d8c01c15 	stw	r3,112(sp)
   50c8c:	d8801b15 	stw	r2,108(sp)
   50c90:	010001c4 	movi	r4,7
   50c94:	2080b616 	blt	r4,r2,50f70 <___svfiprintf_internal_r+0x1004>
   50c98:	42000204 	addi	r8,r8,8
   50c9c:	003f4e06 	br	509d8 <__alt_mem_epcs_flash_controller+0xfe03f9d8>
   50ca0:	d9801a04 	addi	r6,sp,104
   50ca4:	b80b883a 	mov	r5,r23
   50ca8:	a809883a 	mov	r4,r21
   50cac:	004fd9c0 	call	4fd9c <__ssprint_r>
   50cb0:	103fbc1e 	bne	r2,zero,50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50cb4:	d8c01c17 	ldw	r3,112(sp)
   50cb8:	d811883a 	mov	r8,sp
   50cbc:	003f7a06 	br	50aa8 <__alt_mem_epcs_flash_controller+0xfe03faa8>
   50cc0:	d9801a04 	addi	r6,sp,104
   50cc4:	b80b883a 	mov	r5,r23
   50cc8:	a809883a 	mov	r4,r21
   50ccc:	004fd9c0 	call	4fd9c <__ssprint_r>
   50cd0:	103fa826 	beq	r2,zero,50b74 <__alt_mem_epcs_flash_controller+0xfe03fb74>
   50cd4:	003fb306 	br	50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50cd8:	d9801a04 	addi	r6,sp,104
   50cdc:	b80b883a 	mov	r5,r23
   50ce0:	a809883a 	mov	r4,r21
   50ce4:	004fd9c0 	call	4fd9c <__ssprint_r>
   50ce8:	103fae1e 	bne	r2,zero,50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50cec:	d811883a 	mov	r8,sp
   50cf0:	003cdc06 	br	50064 <__alt_mem_epcs_flash_controller+0xfe03f064>
   50cf4:	d9801a04 	addi	r6,sp,104
   50cf8:	b80b883a 	mov	r5,r23
   50cfc:	a809883a 	mov	r4,r21
   50d00:	004fd9c0 	call	4fd9c <__ssprint_r>
   50d04:	103fa71e 	bne	r2,zero,50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50d08:	d8c01c17 	ldw	r3,112(sp)
   50d0c:	d8801b17 	ldw	r2,108(sp)
   50d10:	d811883a 	mov	r8,sp
   50d14:	003f5a06 	br	50a80 <__alt_mem_epcs_flash_controller+0xfe03fa80>
   50d18:	d9801a04 	addi	r6,sp,104
   50d1c:	b80b883a 	mov	r5,r23
   50d20:	a809883a 	mov	r4,r21
   50d24:	004fd9c0 	call	4fd9c <__ssprint_r>
   50d28:	103f9e1e 	bne	r2,zero,50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50d2c:	d8c01c17 	ldw	r3,112(sp)
   50d30:	d8801b17 	ldw	r2,108(sp)
   50d34:	d811883a 	mov	r8,sp
   50d38:	003f1706 	br	50998 <__alt_mem_epcs_flash_controller+0xfe03f998>
   50d3c:	d9801a04 	addi	r6,sp,104
   50d40:	b80b883a 	mov	r5,r23
   50d44:	a809883a 	mov	r4,r21
   50d48:	004fd9c0 	call	4fd9c <__ssprint_r>
   50d4c:	103f951e 	bne	r2,zero,50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50d50:	d8c01c17 	ldw	r3,112(sp)
   50d54:	d8801b17 	ldw	r2,108(sp)
   50d58:	d811883a 	mov	r8,sp
   50d5c:	003f1b06 	br	509cc <__alt_mem_epcs_flash_controller+0xfe03f9cc>
   50d60:	d8001d85 	stb	zero,118(sp)
   50d64:	80007b16 	blt	r16,zero,50f54 <___svfiprintf_internal_r+0xfe8>
   50d68:	00ffdfc4 	movi	r3,-129
   50d6c:	e244b03a 	or	r2,fp,r9
   50d70:	90e4703a 	and	r18,r18,r3
   50d74:	103d7026 	beq	r2,zero,50338 <__alt_mem_epcs_flash_controller+0xfe03f338>
   50d78:	0015883a 	mov	r10,zero
   50d7c:	003d7206 	br	50348 <__alt_mem_epcs_flash_controller+0xfe03f348>
   50d80:	d9801a04 	addi	r6,sp,104
   50d84:	b80b883a 	mov	r5,r23
   50d88:	a809883a 	mov	r4,r21
   50d8c:	004fd9c0 	call	4fd9c <__ssprint_r>
   50d90:	103f841e 	bne	r2,zero,50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50d94:	d8c01c17 	ldw	r3,112(sp)
   50d98:	d8801b17 	ldw	r2,108(sp)
   50d9c:	d811883a 	mov	r8,sp
   50da0:	003ef006 	br	50964 <__alt_mem_epcs_flash_controller+0xfe03f964>
   50da4:	9080100c 	andi	r2,r18,64
   50da8:	d8001d85 	stb	zero,118(sp)
   50dac:	dac02317 	ldw	r11,140(sp)
   50db0:	10008126 	beq	r2,zero,50fb8 <___svfiprintf_internal_r+0x104c>
   50db4:	58800104 	addi	r2,r11,4
   50db8:	5f00000b 	ldhu	fp,0(r11)
   50dbc:	0013883a 	mov	r9,zero
   50dc0:	803ec30e 	bge	r16,zero,508d0 <__alt_mem_epcs_flash_controller+0xfe03f8d0>
   50dc4:	d8802315 	stw	r2,140(sp)
   50dc8:	0015883a 	mov	r10,zero
   50dcc:	e244b03a 	or	r2,fp,r9
   50dd0:	103e371e 	bne	r2,zero,506b0 <__alt_mem_epcs_flash_controller+0xfe03f6b0>
   50dd4:	00800044 	movi	r2,1
   50dd8:	10803fcc 	andi	r2,r2,255
   50ddc:	00c00044 	movi	r3,1
   50de0:	10c06126 	beq	r2,r3,50f68 <___svfiprintf_internal_r+0xffc>
   50de4:	00c00084 	movi	r3,2
   50de8:	10fd5526 	beq	r2,r3,50340 <__alt_mem_epcs_flash_controller+0xfe03f340>
   50dec:	003ed806 	br	50950 <__alt_mem_epcs_flash_controller+0xfe03f950>
   50df0:	d8802315 	stw	r2,140(sp)
   50df4:	98c00007 	ldb	r3,0(r19)
   50df8:	003cab06 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   50dfc:	d9801a04 	addi	r6,sp,104
   50e00:	b80b883a 	mov	r5,r23
   50e04:	a809883a 	mov	r4,r21
   50e08:	004fd9c0 	call	4fd9c <__ssprint_r>
   50e0c:	103f651e 	bne	r2,zero,50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50e10:	d8c01c17 	ldw	r3,112(sp)
   50e14:	003f4f06 	br	50b54 <__alt_mem_epcs_flash_controller+0xfe03fb54>
   50e18:	008001b4 	movhi	r2,6
   50e1c:	10b57204 	addi	r2,r2,-10808
   50e20:	d8802915 	stw	r2,164(sp)
   50e24:	003d4406 	br	50338 <__alt_mem_epcs_flash_controller+0xfe03f338>
   50e28:	dac02317 	ldw	r11,140(sp)
   50e2c:	58800017 	ldw	r2,0(r11)
   50e30:	dac02517 	ldw	r11,148(sp)
   50e34:	5807d7fa 	srai	r3,r11,31
   50e38:	dac02317 	ldw	r11,140(sp)
   50e3c:	10c00115 	stw	r3,4(r2)
   50e40:	5ac00104 	addi	r11,r11,4
   50e44:	dac02315 	stw	r11,140(sp)
   50e48:	dac02517 	ldw	r11,148(sp)
   50e4c:	12c00015 	stw	r11,0(r2)
   50e50:	003c6d06 	br	50008 <__alt_mem_epcs_flash_controller+0xfe03f008>
   50e54:	9080100c 	andi	r2,r18,64
   50e58:	dac02317 	ldw	r11,140(sp)
   50e5c:	103e5326 	beq	r2,zero,507ac <__alt_mem_epcs_flash_controller+0xfe03f7ac>
   50e60:	5f00000f 	ldh	fp,0(r11)
   50e64:	5ac00104 	addi	r11,r11,4
   50e68:	dac02315 	stw	r11,140(sp)
   50e6c:	e013d7fa 	srai	r9,fp,31
   50e70:	4805883a 	mov	r2,r9
   50e74:	003e0706 	br	50694 <__alt_mem_epcs_flash_controller+0xfe03f694>
   50e78:	00800c04 	movi	r2,48
   50e7c:	d8801d05 	stb	r2,116(sp)
   50e80:	d8c01d45 	stb	r3,117(sp)
   50e84:	d8001d85 	stb	zero,118(sp)
   50e88:	90800094 	ori	r2,r18,2
   50e8c:	80008f16 	blt	r16,zero,510cc <___svfiprintf_internal_r+0x1160>
   50e90:	00bfdfc4 	movi	r2,-129
   50e94:	90a4703a 	and	r18,r18,r2
   50e98:	94800094 	ori	r18,r18,2
   50e9c:	0015883a 	mov	r10,zero
   50ea0:	003d2906 	br	50348 <__alt_mem_epcs_flash_controller+0xfe03f348>
   50ea4:	98c00007 	ldb	r3,0(r19)
   50ea8:	003c7f06 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   50eac:	dac02317 	ldw	r11,140(sp)
   50eb0:	0013883a 	mov	r9,zero
   50eb4:	5f000017 	ldw	fp,0(r11)
   50eb8:	5ac00104 	addi	r11,r11,4
   50ebc:	dac02315 	stw	r11,140(sp)
   50ec0:	003d1506 	br	50318 <__alt_mem_epcs_flash_controller+0xfe03f318>
   50ec4:	9080100c 	andi	r2,r18,64
   50ec8:	d8001d85 	stb	zero,118(sp)
   50ecc:	dac02317 	ldw	r11,140(sp)
   50ed0:	10003426 	beq	r2,zero,50fa4 <___svfiprintf_internal_r+0x1038>
   50ed4:	58800104 	addi	r2,r11,4
   50ed8:	5f00000b 	ldhu	fp,0(r11)
   50edc:	0013883a 	mov	r9,zero
   50ee0:	803e950e 	bge	r16,zero,50938 <__alt_mem_epcs_flash_controller+0xfe03f938>
   50ee4:	e246b03a 	or	r3,fp,r9
   50ee8:	d8802315 	stw	r2,140(sp)
   50eec:	183d5a1e 	bne	r3,zero,50458 <__alt_mem_epcs_flash_controller+0xfe03f458>
   50ef0:	0015883a 	mov	r10,zero
   50ef4:	0005883a 	mov	r2,zero
   50ef8:	003fb706 	br	50dd8 <__alt_mem_epcs_flash_controller+0xfe03fdd8>
   50efc:	98c00043 	ldbu	r3,1(r19)
   50f00:	94800814 	ori	r18,r18,32
   50f04:	9cc00044 	addi	r19,r19,1
   50f08:	18c03fcc 	andi	r3,r3,255
   50f0c:	18c0201c 	xori	r3,r3,128
   50f10:	18ffe004 	addi	r3,r3,-128
   50f14:	003c6406 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   50f18:	d8c02315 	stw	r3,140(sp)
   50f1c:	0015883a 	mov	r10,zero
   50f20:	003faa06 	br	50dcc <__alt_mem_epcs_flash_controller+0xfe03fdcc>
   50f24:	dac02317 	ldw	r11,140(sp)
   50f28:	58800017 	ldw	r2,0(r11)
   50f2c:	5ac00104 	addi	r11,r11,4
   50f30:	dac02315 	stw	r11,140(sp)
   50f34:	dac02517 	ldw	r11,148(sp)
   50f38:	12c00015 	stw	r11,0(r2)
   50f3c:	003c3206 	br	50008 <__alt_mem_epcs_flash_controller+0xfe03f008>
   50f40:	010001b4 	movhi	r4,6
   50f44:	21357204 	addi	r4,r4,-10808
   50f48:	d9002915 	stw	r4,164(sp)
   50f4c:	d8c02315 	stw	r3,140(sp)
   50f50:	1025883a 	mov	r18,r2
   50f54:	e244b03a 	or	r2,fp,r9
   50f58:	103f871e 	bne	r2,zero,50d78 <__alt_mem_epcs_flash_controller+0xfe03fd78>
   50f5c:	0015883a 	mov	r10,zero
   50f60:	00800084 	movi	r2,2
   50f64:	003f9c06 	br	50dd8 <__alt_mem_epcs_flash_controller+0xfe03fdd8>
   50f68:	0039883a 	mov	fp,zero
   50f6c:	003e5f06 	br	508ec <__alt_mem_epcs_flash_controller+0xfe03f8ec>
   50f70:	d9801a04 	addi	r6,sp,104
   50f74:	b80b883a 	mov	r5,r23
   50f78:	a809883a 	mov	r4,r21
   50f7c:	004fd9c0 	call	4fd9c <__ssprint_r>
   50f80:	103f081e 	bne	r2,zero,50ba4 <__alt_mem_epcs_flash_controller+0xfe03fba4>
   50f84:	d8c01c17 	ldw	r3,112(sp)
   50f88:	d8801b17 	ldw	r2,108(sp)
   50f8c:	d811883a 	mov	r8,sp
   50f90:	003e9106 	br	509d8 <__alt_mem_epcs_flash_controller+0xfe03f9d8>
   50f94:	010001b4 	movhi	r4,6
   50f98:	2135da04 	addi	r4,r4,-10392
   50f9c:	d9002215 	stw	r4,136(sp)
   50fa0:	003ead06 	br	50a58 <__alt_mem_epcs_flash_controller+0xfe03fa58>
   50fa4:	58800104 	addi	r2,r11,4
   50fa8:	5f000017 	ldw	fp,0(r11)
   50fac:	0013883a 	mov	r9,zero
   50fb0:	803e610e 	bge	r16,zero,50938 <__alt_mem_epcs_flash_controller+0xfe03f938>
   50fb4:	003fcb06 	br	50ee4 <__alt_mem_epcs_flash_controller+0xfe03fee4>
   50fb8:	58800104 	addi	r2,r11,4
   50fbc:	5f000017 	ldw	fp,0(r11)
   50fc0:	0013883a 	mov	r9,zero
   50fc4:	803e420e 	bge	r16,zero,508d0 <__alt_mem_epcs_flash_controller+0xfe03f8d0>
   50fc8:	003f7e06 	br	50dc4 <__alt_mem_epcs_flash_controller+0xfe03fdc4>
   50fcc:	5f000017 	ldw	fp,0(r11)
   50fd0:	5ac00104 	addi	r11,r11,4
   50fd4:	0013883a 	mov	r9,zero
   50fd8:	dac02315 	stw	r11,140(sp)
   50fdc:	003cce06 	br	50318 <__alt_mem_epcs_flash_controller+0xfe03f318>
   50fe0:	8809883a 	mov	r4,r17
   50fe4:	da002c15 	stw	r8,176(sp)
   50fe8:	0046ef40 	call	46ef4 <strlen>
   50fec:	d8802115 	stw	r2,132(sp)
   50ff0:	da801d83 	ldbu	r10,118(sp)
   50ff4:	df002315 	stw	fp,140(sp)
   50ff8:	0021883a 	mov	r16,zero
   50ffc:	da002c17 	ldw	r8,176(sp)
   51000:	003cf606 	br	503dc <__alt_mem_epcs_flash_controller+0xfe03f3dc>
   51004:	00800184 	movi	r2,6
   51008:	1400012e 	bgeu	r2,r16,51010 <___svfiprintf_internal_r+0x10a4>
   5100c:	1021883a 	mov	r16,r2
   51010:	dc002115 	stw	r16,132(sp)
   51014:	8005883a 	mov	r2,r16
   51018:	80003c16 	blt	r16,zero,5110c <___svfiprintf_internal_r+0x11a0>
   5101c:	044001b4 	movhi	r17,6
   51020:	d8802015 	stw	r2,128(sp)
   51024:	df002315 	stw	fp,140(sp)
   51028:	8c757704 	addi	r17,r17,-10788
   5102c:	003d2e06 	br	504e8 <__alt_mem_epcs_flash_controller+0xfe03f4e8>
   51030:	04001004 	movi	r16,64
   51034:	800b883a 	mov	r5,r16
   51038:	00454100 	call	45410 <_malloc_r>
   5103c:	dac02717 	ldw	r11,156(sp)
   51040:	58800015 	stw	r2,0(r11)
   51044:	58800415 	stw	r2,16(r11)
   51048:	10004826 	beq	r2,zero,5116c <___svfiprintf_internal_r+0x1200>
   5104c:	dac02717 	ldw	r11,156(sp)
   51050:	5c000515 	stw	r16,20(r11)
   51054:	003bd906 	br	4ffbc <__alt_mem_epcs_flash_controller+0xfe03efbc>
   51058:	9080004c 	andi	r2,r18,1
   5105c:	0015883a 	mov	r10,zero
   51060:	10000626 	beq	r2,zero,5107c <___svfiprintf_internal_r+0x1110>
   51064:	dac02b17 	ldw	r11,172(sp)
   51068:	00800c04 	movi	r2,48
   5106c:	d88019c5 	stb	r2,103(sp)
   51070:	dac02115 	stw	r11,132(sp)
   51074:	dc4019c4 	addi	r17,sp,103
   51078:	003cd806 	br	503dc <__alt_mem_epcs_flash_controller+0xfe03f3dc>
   5107c:	d8002115 	stw	zero,132(sp)
   51080:	dc401a04 	addi	r17,sp,104
   51084:	003cd506 	br	503dc <__alt_mem_epcs_flash_controller+0xfe03f3dc>
   51088:	010001b4 	movhi	r4,6
   5108c:	2135de04 	addi	r4,r4,-10376
   51090:	d9002815 	stw	r4,160(sp)
   51094:	003d4306 	br	505a4 <__alt_mem_epcs_flash_controller+0xfe03f5a4>
   51098:	00bfffc4 	movi	r2,-1
   5109c:	003ec606 	br	50bb8 <__alt_mem_epcs_flash_controller+0xfe03fbb8>
   510a0:	00800044 	movi	r2,1
   510a4:	10803fcc 	andi	r2,r2,255
   510a8:	00c00044 	movi	r3,1
   510ac:	10fd8026 	beq	r2,r3,506b0 <__alt_mem_epcs_flash_controller+0xfe03f6b0>
   510b0:	00c00084 	movi	r3,2
   510b4:	10fca426 	beq	r2,r3,50348 <__alt_mem_epcs_flash_controller+0xfe03f348>
   510b8:	003ce806 	br	5045c <__alt_mem_epcs_flash_controller+0xfe03f45c>
   510bc:	010001b4 	movhi	r4,6
   510c0:	2135de04 	addi	r4,r4,-10376
   510c4:	d9002815 	stw	r4,160(sp)
   510c8:	003e9906 	br	50b30 <__alt_mem_epcs_flash_controller+0xfe03fb30>
   510cc:	1025883a 	mov	r18,r2
   510d0:	0015883a 	mov	r10,zero
   510d4:	00800084 	movi	r2,2
   510d8:	003ff206 	br	510a4 <__alt_mem_epcs_flash_controller+0xfe0400a4>
   510dc:	014001b4 	movhi	r5,6
   510e0:	2975da04 	addi	r5,r5,-10392
   510e4:	d9402215 	stw	r5,136(sp)
   510e8:	003ee206 	br	50c74 <__alt_mem_epcs_flash_controller+0xfe03fc74>
   510ec:	5827883a 	mov	r19,r11
   510f0:	0021883a 	mov	r16,zero
   510f4:	003bed06 	br	500ac <__alt_mem_epcs_flash_controller+0xfe03f0ac>
   510f8:	dc002115 	stw	r16,132(sp)
   510fc:	da801d83 	ldbu	r10,118(sp)
   51100:	df002315 	stw	fp,140(sp)
   51104:	0021883a 	mov	r16,zero
   51108:	003cb406 	br	503dc <__alt_mem_epcs_flash_controller+0xfe03f3dc>
   5110c:	0005883a 	mov	r2,zero
   51110:	003fc206 	br	5101c <__alt_mem_epcs_flash_controller+0xfe04001c>
   51114:	d8802317 	ldw	r2,140(sp)
   51118:	98c00043 	ldbu	r3,1(r19)
   5111c:	5827883a 	mov	r19,r11
   51120:	14000017 	ldw	r16,0(r2)
   51124:	10800104 	addi	r2,r2,4
   51128:	d8802315 	stw	r2,140(sp)
   5112c:	803f760e 	bge	r16,zero,50f08 <__alt_mem_epcs_flash_controller+0xfe03ff08>
   51130:	18c03fcc 	andi	r3,r3,255
   51134:	18c0201c 	xori	r3,r3,128
   51138:	043fffc4 	movi	r16,-1
   5113c:	18ffe004 	addi	r3,r3,-128
   51140:	003bd906 	br	500a8 <__alt_mem_epcs_flash_controller+0xfe03f0a8>
   51144:	d9c01d85 	stb	r7,118(sp)
   51148:	003cb606 	br	50424 <__alt_mem_epcs_flash_controller+0xfe03f424>
   5114c:	d9c01d85 	stb	r7,118(sp)
   51150:	003d2106 	br	505d8 <__alt_mem_epcs_flash_controller+0xfe03f5d8>
   51154:	d9c01d85 	stb	r7,118(sp)
   51158:	003d8e06 	br	50794 <__alt_mem_epcs_flash_controller+0xfe03f794>
   5115c:	d9c01d85 	stb	r7,118(sp)
   51160:	003db306 	br	50830 <__alt_mem_epcs_flash_controller+0xfe03f830>
   51164:	d9c01d85 	stb	r7,118(sp)
   51168:	003c8a06 	br	50394 <__alt_mem_epcs_flash_controller+0xfe03f394>
   5116c:	dac02a17 	ldw	r11,168(sp)
   51170:	00800304 	movi	r2,12
   51174:	58800015 	stw	r2,0(r11)
   51178:	00bfffc4 	movi	r2,-1
   5117c:	003e8e06 	br	50bb8 <__alt_mem_epcs_flash_controller+0xfe03fbb8>
   51180:	d9c01d85 	stb	r7,118(sp)
   51184:	003dc706 	br	508a4 <__alt_mem_epcs_flash_controller+0xfe03f8a4>
   51188:	d9c01d85 	stb	r7,118(sp)
   5118c:	003ddf06 	br	5090c <__alt_mem_epcs_flash_controller+0xfe03f90c>
   51190:	d9c01d85 	stb	r7,118(sp)
   51194:	003d3706 	br	50674 <__alt_mem_epcs_flash_controller+0xfe03f674>
   51198:	d9c01d85 	stb	r7,118(sp)
   5119c:	003c5406 	br	502f0 <__alt_mem_epcs_flash_controller+0xfe03f2f0>
   511a0:	d9c01d85 	stb	r7,118(sp)
   511a4:	003d1d06 	br	5061c <__alt_mem_epcs_flash_controller+0xfe03f61c>

000511a8 <__sprint_r.part.0>:
   511a8:	28801917 	ldw	r2,100(r5)
   511ac:	defff604 	addi	sp,sp,-40
   511b0:	dd400515 	stw	r21,20(sp)
   511b4:	dfc00915 	stw	ra,36(sp)
   511b8:	df000815 	stw	fp,32(sp)
   511bc:	ddc00715 	stw	r23,28(sp)
   511c0:	dd800615 	stw	r22,24(sp)
   511c4:	dd000415 	stw	r20,16(sp)
   511c8:	dcc00315 	stw	r19,12(sp)
   511cc:	dc800215 	stw	r18,8(sp)
   511d0:	dc400115 	stw	r17,4(sp)
   511d4:	dc000015 	stw	r16,0(sp)
   511d8:	1088000c 	andi	r2,r2,8192
   511dc:	302b883a 	mov	r21,r6
   511e0:	10002e26 	beq	r2,zero,5129c <__sprint_r.part.0+0xf4>
   511e4:	30800217 	ldw	r2,8(r6)
   511e8:	35800017 	ldw	r22,0(r6)
   511ec:	10002926 	beq	r2,zero,51294 <__sprint_r.part.0+0xec>
   511f0:	2827883a 	mov	r19,r5
   511f4:	2029883a 	mov	r20,r4
   511f8:	b5c00104 	addi	r23,r22,4
   511fc:	04bfffc4 	movi	r18,-1
   51200:	bc400017 	ldw	r17,0(r23)
   51204:	b4000017 	ldw	r16,0(r22)
   51208:	0039883a 	mov	fp,zero
   5120c:	8822d0ba 	srli	r17,r17,2
   51210:	8800031e 	bne	r17,zero,51220 <__sprint_r.part.0+0x78>
   51214:	00001806 	br	51278 <__sprint_r.part.0+0xd0>
   51218:	84000104 	addi	r16,r16,4
   5121c:	8f001526 	beq	r17,fp,51274 <__sprint_r.part.0+0xcc>
   51220:	81400017 	ldw	r5,0(r16)
   51224:	980d883a 	mov	r6,r19
   51228:	a009883a 	mov	r4,r20
   5122c:	0052c640 	call	52c64 <_fputwc_r>
   51230:	e7000044 	addi	fp,fp,1
   51234:	14bff81e 	bne	r2,r18,51218 <__alt_mem_epcs_flash_controller+0xfe040218>
   51238:	9005883a 	mov	r2,r18
   5123c:	a8000215 	stw	zero,8(r21)
   51240:	a8000115 	stw	zero,4(r21)
   51244:	dfc00917 	ldw	ra,36(sp)
   51248:	df000817 	ldw	fp,32(sp)
   5124c:	ddc00717 	ldw	r23,28(sp)
   51250:	dd800617 	ldw	r22,24(sp)
   51254:	dd400517 	ldw	r21,20(sp)
   51258:	dd000417 	ldw	r20,16(sp)
   5125c:	dcc00317 	ldw	r19,12(sp)
   51260:	dc800217 	ldw	r18,8(sp)
   51264:	dc400117 	ldw	r17,4(sp)
   51268:	dc000017 	ldw	r16,0(sp)
   5126c:	dec00a04 	addi	sp,sp,40
   51270:	f800283a 	ret
   51274:	a8800217 	ldw	r2,8(r21)
   51278:	8c63883a 	add	r17,r17,r17
   5127c:	8c63883a 	add	r17,r17,r17
   51280:	1445c83a 	sub	r2,r2,r17
   51284:	a8800215 	stw	r2,8(r21)
   51288:	b5800204 	addi	r22,r22,8
   5128c:	bdc00204 	addi	r23,r23,8
   51290:	103fdb1e 	bne	r2,zero,51200 <__alt_mem_epcs_flash_controller+0xfe040200>
   51294:	0005883a 	mov	r2,zero
   51298:	003fe806 	br	5123c <__alt_mem_epcs_flash_controller+0xfe04023c>
   5129c:	004e06c0 	call	4e06c <__sfvwrite_r>
   512a0:	003fe606 	br	5123c <__alt_mem_epcs_flash_controller+0xfe04023c>

000512a4 <__sprint_r>:
   512a4:	30c00217 	ldw	r3,8(r6)
   512a8:	18000126 	beq	r3,zero,512b0 <__sprint_r+0xc>
   512ac:	00511a81 	jmpi	511a8 <__sprint_r.part.0>
   512b0:	30000115 	stw	zero,4(r6)
   512b4:	0005883a 	mov	r2,zero
   512b8:	f800283a 	ret

000512bc <___vfiprintf_internal_r>:
   512bc:	deffc904 	addi	sp,sp,-220
   512c0:	df003515 	stw	fp,212(sp)
   512c4:	dd003115 	stw	r20,196(sp)
   512c8:	dfc03615 	stw	ra,216(sp)
   512cc:	ddc03415 	stw	r23,208(sp)
   512d0:	dd803315 	stw	r22,204(sp)
   512d4:	dd403215 	stw	r21,200(sp)
   512d8:	dcc03015 	stw	r19,192(sp)
   512dc:	dc802f15 	stw	r18,188(sp)
   512e0:	dc402e15 	stw	r17,184(sp)
   512e4:	dc002d15 	stw	r16,180(sp)
   512e8:	d9002015 	stw	r4,128(sp)
   512ec:	d9c02215 	stw	r7,136(sp)
   512f0:	2829883a 	mov	r20,r5
   512f4:	3039883a 	mov	fp,r6
   512f8:	20000226 	beq	r4,zero,51304 <___vfiprintf_internal_r+0x48>
   512fc:	20800e17 	ldw	r2,56(r4)
   51300:	1000cf26 	beq	r2,zero,51640 <___vfiprintf_internal_r+0x384>
   51304:	a080030b 	ldhu	r2,12(r20)
   51308:	10c8000c 	andi	r3,r2,8192
   5130c:	1800061e 	bne	r3,zero,51328 <___vfiprintf_internal_r+0x6c>
   51310:	a1001917 	ldw	r4,100(r20)
   51314:	00f7ffc4 	movi	r3,-8193
   51318:	10880014 	ori	r2,r2,8192
   5131c:	20c6703a 	and	r3,r4,r3
   51320:	a080030d 	sth	r2,12(r20)
   51324:	a0c01915 	stw	r3,100(r20)
   51328:	10c0020c 	andi	r3,r2,8
   5132c:	1800a926 	beq	r3,zero,515d4 <___vfiprintf_internal_r+0x318>
   51330:	a0c00417 	ldw	r3,16(r20)
   51334:	1800a726 	beq	r3,zero,515d4 <___vfiprintf_internal_r+0x318>
   51338:	1080068c 	andi	r2,r2,26
   5133c:	00c00284 	movi	r3,10
   51340:	10c0ac26 	beq	r2,r3,515f4 <___vfiprintf_internal_r+0x338>
   51344:	da801a04 	addi	r10,sp,104
   51348:	da801e15 	stw	r10,120(sp)
   5134c:	d8801e17 	ldw	r2,120(sp)
   51350:	da8019c4 	addi	r10,sp,103
   51354:	058001b4 	movhi	r22,6
   51358:	05c001b4 	movhi	r23,6
   5135c:	da801f15 	stw	r10,124(sp)
   51360:	1295c83a 	sub	r10,r2,r10
   51364:	b5b5e604 	addi	r22,r22,-10344
   51368:	bdf5e204 	addi	r23,r23,-10360
   5136c:	dec01a15 	stw	sp,104(sp)
   51370:	d8001c15 	stw	zero,112(sp)
   51374:	d8001b15 	stw	zero,108(sp)
   51378:	d8002615 	stw	zero,152(sp)
   5137c:	d8002315 	stw	zero,140(sp)
   51380:	da802715 	stw	r10,156(sp)
   51384:	d811883a 	mov	r8,sp
   51388:	dd002115 	stw	r20,132(sp)
   5138c:	e021883a 	mov	r16,fp
   51390:	80800007 	ldb	r2,0(r16)
   51394:	1003ea26 	beq	r2,zero,52340 <___vfiprintf_internal_r+0x1084>
   51398:	00c00944 	movi	r3,37
   5139c:	8025883a 	mov	r18,r16
   513a0:	10c0021e 	bne	r2,r3,513ac <___vfiprintf_internal_r+0xf0>
   513a4:	00001606 	br	51400 <___vfiprintf_internal_r+0x144>
   513a8:	10c00326 	beq	r2,r3,513b8 <___vfiprintf_internal_r+0xfc>
   513ac:	94800044 	addi	r18,r18,1
   513b0:	90800007 	ldb	r2,0(r18)
   513b4:	103ffc1e 	bne	r2,zero,513a8 <__alt_mem_epcs_flash_controller+0xfe0403a8>
   513b8:	9423c83a 	sub	r17,r18,r16
   513bc:	88001026 	beq	r17,zero,51400 <___vfiprintf_internal_r+0x144>
   513c0:	d8c01c17 	ldw	r3,112(sp)
   513c4:	d8801b17 	ldw	r2,108(sp)
   513c8:	44000015 	stw	r16,0(r8)
   513cc:	88c7883a 	add	r3,r17,r3
   513d0:	10800044 	addi	r2,r2,1
   513d4:	44400115 	stw	r17,4(r8)
   513d8:	d8c01c15 	stw	r3,112(sp)
   513dc:	d8801b15 	stw	r2,108(sp)
   513e0:	010001c4 	movi	r4,7
   513e4:	2080760e 	bge	r4,r2,515c0 <___vfiprintf_internal_r+0x304>
   513e8:	1803821e 	bne	r3,zero,521f4 <___vfiprintf_internal_r+0xf38>
   513ec:	da802317 	ldw	r10,140(sp)
   513f0:	d8001b15 	stw	zero,108(sp)
   513f4:	d811883a 	mov	r8,sp
   513f8:	5455883a 	add	r10,r10,r17
   513fc:	da802315 	stw	r10,140(sp)
   51400:	90800007 	ldb	r2,0(r18)
   51404:	10044626 	beq	r2,zero,52520 <___vfiprintf_internal_r+0x1264>
   51408:	90c00047 	ldb	r3,1(r18)
   5140c:	94000044 	addi	r16,r18,1
   51410:	d8001d85 	stb	zero,118(sp)
   51414:	0009883a 	mov	r4,zero
   51418:	000f883a 	mov	r7,zero
   5141c:	027fffc4 	movi	r9,-1
   51420:	0023883a 	mov	r17,zero
   51424:	0029883a 	mov	r20,zero
   51428:	01401604 	movi	r5,88
   5142c:	01800244 	movi	r6,9
   51430:	03400a84 	movi	r13,42
   51434:	03001b04 	movi	r12,108
   51438:	84000044 	addi	r16,r16,1
   5143c:	18bff804 	addi	r2,r3,-32
   51440:	28827336 	bltu	r5,r2,51e10 <___vfiprintf_internal_r+0xb54>
   51444:	100490ba 	slli	r2,r2,2
   51448:	02800174 	movhi	r10,5
   5144c:	52851704 	addi	r10,r10,5212
   51450:	1285883a 	add	r2,r2,r10
   51454:	10800017 	ldw	r2,0(r2)
   51458:	1000683a 	jmp	r2
   5145c:	00051b44 	movi	zero,5229
   51460:	00051e10 	cmplti	zero,zero,5240
   51464:	00051e10 	cmplti	zero,zero,5240
   51468:	00051b64 	muli	zero,zero,5229
   5146c:	00051e10 	cmplti	zero,zero,5240
   51470:	00051e10 	cmplti	zero,zero,5240
   51474:	00051e10 	cmplti	zero,zero,5240
   51478:	00051e10 	cmplti	zero,zero,5240
   5147c:	00051e10 	cmplti	zero,zero,5240
   51480:	00051e10 	cmplti	zero,zero,5240
   51484:	00051d4c 	andi	zero,zero,5237
   51488:	00051d68 	cmpgeui	zero,zero,5237
   5148c:	00051e10 	cmplti	zero,zero,5240
   51490:	00051650 	cmplti	zero,zero,5209
   51494:	00051d78 	rdprs	zero,zero,5237
   51498:	00051e10 	cmplti	zero,zero,5240
   5149c:	00051b70 	cmpltui	zero,zero,5229
   514a0:	00051b7c 	xorhi	zero,zero,5229
   514a4:	00051b7c 	xorhi	zero,zero,5229
   514a8:	00051b7c 	xorhi	zero,zero,5229
   514ac:	00051b7c 	xorhi	zero,zero,5229
   514b0:	00051b7c 	xorhi	zero,zero,5229
   514b4:	00051b7c 	xorhi	zero,zero,5229
   514b8:	00051b7c 	xorhi	zero,zero,5229
   514bc:	00051b7c 	xorhi	zero,zero,5229
   514c0:	00051b7c 	xorhi	zero,zero,5229
   514c4:	00051e10 	cmplti	zero,zero,5240
   514c8:	00051e10 	cmplti	zero,zero,5240
   514cc:	00051e10 	cmplti	zero,zero,5240
   514d0:	00051e10 	cmplti	zero,zero,5240
   514d4:	00051e10 	cmplti	zero,zero,5240
   514d8:	00051e10 	cmplti	zero,zero,5240
   514dc:	00051e10 	cmplti	zero,zero,5240
   514e0:	00051e10 	cmplti	zero,zero,5240
   514e4:	00051e10 	cmplti	zero,zero,5240
   514e8:	00051e10 	cmplti	zero,zero,5240
   514ec:	00051ba8 	cmpgeui	zero,zero,5230
   514f0:	00051e10 	cmplti	zero,zero,5240
   514f4:	00051e10 	cmplti	zero,zero,5240
   514f8:	00051e10 	cmplti	zero,zero,5240
   514fc:	00051e10 	cmplti	zero,zero,5240
   51500:	00051e10 	cmplti	zero,zero,5240
   51504:	00051e10 	cmplti	zero,zero,5240
   51508:	00051e10 	cmplti	zero,zero,5240
   5150c:	00051e10 	cmplti	zero,zero,5240
   51510:	00051e10 	cmplti	zero,zero,5240
   51514:	00051e10 	cmplti	zero,zero,5240
   51518:	00051be0 	cmpeqi	zero,zero,5231
   5151c:	00051e10 	cmplti	zero,zero,5240
   51520:	00051e10 	cmplti	zero,zero,5240
   51524:	00051e10 	cmplti	zero,zero,5240
   51528:	00051e10 	cmplti	zero,zero,5240
   5152c:	00051e10 	cmplti	zero,zero,5240
   51530:	00051c38 	rdprs	zero,zero,5232
   51534:	00051e10 	cmplti	zero,zero,5240
   51538:	00051e10 	cmplti	zero,zero,5240
   5153c:	00051ca8 	cmpgeui	zero,zero,5234
   51540:	00051e10 	cmplti	zero,zero,5240
   51544:	00051e10 	cmplti	zero,zero,5240
   51548:	00051e10 	cmplti	zero,zero,5240
   5154c:	00051e10 	cmplti	zero,zero,5240
   51550:	00051e10 	cmplti	zero,zero,5240
   51554:	00051e10 	cmplti	zero,zero,5240
   51558:	00051e10 	cmplti	zero,zero,5240
   5155c:	00051e10 	cmplti	zero,zero,5240
   51560:	00051e10 	cmplti	zero,zero,5240
   51564:	00051e10 	cmplti	zero,zero,5240
   51568:	00051a54 	movui	zero,5225
   5156c:	00051a80 	call	51a8 <btc_privkey_cleanse+0x38>
   51570:	00051e10 	cmplti	zero,zero,5240
   51574:	00051e10 	cmplti	zero,zero,5240
   51578:	00051e10 	cmplti	zero,zero,5240
   5157c:	00051db8 	rdprs	zero,zero,5238
   51580:	00051a80 	call	51a8 <btc_privkey_cleanse+0x38>
   51584:	00051e10 	cmplti	zero,zero,5240
   51588:	00051e10 	cmplti	zero,zero,5240
   5158c:	00051914 	movui	zero,5220
   51590:	00051e10 	cmplti	zero,zero,5240
   51594:	00051924 	muli	zero,zero,5220
   51598:	00051960 	cmpeqi	zero,zero,5221
   5159c:	0005165c 	xori	zero,zero,5209
   515a0:	00051908 	cmpgei	zero,zero,5220
   515a4:	00051e10 	cmplti	zero,zero,5240
   515a8:	00051ce4 	muli	zero,zero,5235
   515ac:	00051e10 	cmplti	zero,zero,5240
   515b0:	00051d3c 	xorhi	zero,zero,5236
   515b4:	00051e10 	cmplti	zero,zero,5240
   515b8:	00051e10 	cmplti	zero,zero,5240
   515bc:	00051a00 	call	51a0 <btc_privkey_cleanse+0x30>
   515c0:	42000204 	addi	r8,r8,8
   515c4:	da802317 	ldw	r10,140(sp)
   515c8:	5455883a 	add	r10,r10,r17
   515cc:	da802315 	stw	r10,140(sp)
   515d0:	003f8b06 	br	51400 <__alt_mem_epcs_flash_controller+0xfe040400>
   515d4:	d9002017 	ldw	r4,128(sp)
   515d8:	a00b883a 	mov	r5,r20
   515dc:	004ba940 	call	4ba94 <__swsetup_r>
   515e0:	1003b11e 	bne	r2,zero,524a8 <___vfiprintf_internal_r+0x11ec>
   515e4:	a080030b 	ldhu	r2,12(r20)
   515e8:	00c00284 	movi	r3,10
   515ec:	1080068c 	andi	r2,r2,26
   515f0:	10ff541e 	bne	r2,r3,51344 <__alt_mem_epcs_flash_controller+0xfe040344>
   515f4:	a080038f 	ldh	r2,14(r20)
   515f8:	103f5216 	blt	r2,zero,51344 <__alt_mem_epcs_flash_controller+0xfe040344>
   515fc:	d9c02217 	ldw	r7,136(sp)
   51600:	d9002017 	ldw	r4,128(sp)
   51604:	e00d883a 	mov	r6,fp
   51608:	a00b883a 	mov	r5,r20
   5160c:	00527340 	call	52734 <__sbprintf>
   51610:	dfc03617 	ldw	ra,216(sp)
   51614:	df003517 	ldw	fp,212(sp)
   51618:	ddc03417 	ldw	r23,208(sp)
   5161c:	dd803317 	ldw	r22,204(sp)
   51620:	dd403217 	ldw	r21,200(sp)
   51624:	dd003117 	ldw	r20,196(sp)
   51628:	dcc03017 	ldw	r19,192(sp)
   5162c:	dc802f17 	ldw	r18,188(sp)
   51630:	dc402e17 	ldw	r17,184(sp)
   51634:	dc002d17 	ldw	r16,180(sp)
   51638:	dec03704 	addi	sp,sp,220
   5163c:	f800283a 	ret
   51640:	004dbe80 	call	4dbe8 <__sinit>
   51644:	003f2f06 	br	51304 <__alt_mem_epcs_flash_controller+0xfe040304>
   51648:	0463c83a 	sub	r17,zero,r17
   5164c:	d8802215 	stw	r2,136(sp)
   51650:	a5000114 	ori	r20,r20,4
   51654:	80c00007 	ldb	r3,0(r16)
   51658:	003f7706 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   5165c:	00800c04 	movi	r2,48
   51660:	da802217 	ldw	r10,136(sp)
   51664:	d8801d05 	stb	r2,116(sp)
   51668:	00801e04 	movi	r2,120
   5166c:	d8801d45 	stb	r2,117(sp)
   51670:	d8001d85 	stb	zero,118(sp)
   51674:	50c00104 	addi	r3,r10,4
   51678:	54800017 	ldw	r18,0(r10)
   5167c:	0027883a 	mov	r19,zero
   51680:	a0800094 	ori	r2,r20,2
   51684:	48030b16 	blt	r9,zero,522b4 <___vfiprintf_internal_r+0xff8>
   51688:	00bfdfc4 	movi	r2,-129
   5168c:	a096703a 	and	r11,r20,r2
   51690:	d8c02215 	stw	r3,136(sp)
   51694:	5d000094 	ori	r20,r11,2
   51698:	90032b1e 	bne	r18,zero,52348 <___vfiprintf_internal_r+0x108c>
   5169c:	008001b4 	movhi	r2,6
   516a0:	10b57204 	addi	r2,r2,-10808
   516a4:	d8802615 	stw	r2,152(sp)
   516a8:	0039883a 	mov	fp,zero
   516ac:	48017b1e 	bne	r9,zero,51c9c <___vfiprintf_internal_r+0x9e0>
   516b0:	0013883a 	mov	r9,zero
   516b4:	0027883a 	mov	r19,zero
   516b8:	dd401a04 	addi	r21,sp,104
   516bc:	4825883a 	mov	r18,r9
   516c0:	4cc0010e 	bge	r9,r19,516c8 <___vfiprintf_internal_r+0x40c>
   516c4:	9825883a 	mov	r18,r19
   516c8:	e7003fcc 	andi	fp,fp,255
   516cc:	e700201c 	xori	fp,fp,128
   516d0:	e73fe004 	addi	fp,fp,-128
   516d4:	e0000126 	beq	fp,zero,516dc <___vfiprintf_internal_r+0x420>
   516d8:	94800044 	addi	r18,r18,1
   516dc:	a380008c 	andi	r14,r20,2
   516e0:	70000126 	beq	r14,zero,516e8 <___vfiprintf_internal_r+0x42c>
   516e4:	94800084 	addi	r18,r18,2
   516e8:	a700210c 	andi	fp,r20,132
   516ec:	e001df1e 	bne	fp,zero,51e6c <___vfiprintf_internal_r+0xbb0>
   516f0:	8c87c83a 	sub	r3,r17,r18
   516f4:	00c1dd0e 	bge	zero,r3,51e6c <___vfiprintf_internal_r+0xbb0>
   516f8:	01c00404 	movi	r7,16
   516fc:	d8801c17 	ldw	r2,112(sp)
   51700:	38c3ad0e 	bge	r7,r3,525b8 <___vfiprintf_internal_r+0x12fc>
   51704:	028001b4 	movhi	r10,6
   51708:	52b5e604 	addi	r10,r10,-10344
   5170c:	dc002915 	stw	r16,164(sp)
   51710:	d9801b17 	ldw	r6,108(sp)
   51714:	da802415 	stw	r10,144(sp)
   51718:	03c001c4 	movi	r15,7
   5171c:	da402515 	stw	r9,148(sp)
   51720:	db802815 	stw	r14,160(sp)
   51724:	1821883a 	mov	r16,r3
   51728:	00000506 	br	51740 <___vfiprintf_internal_r+0x484>
   5172c:	31400084 	addi	r5,r6,2
   51730:	42000204 	addi	r8,r8,8
   51734:	200d883a 	mov	r6,r4
   51738:	843ffc04 	addi	r16,r16,-16
   5173c:	3c000d0e 	bge	r7,r16,51774 <___vfiprintf_internal_r+0x4b8>
   51740:	10800404 	addi	r2,r2,16
   51744:	31000044 	addi	r4,r6,1
   51748:	45800015 	stw	r22,0(r8)
   5174c:	41c00115 	stw	r7,4(r8)
   51750:	d8801c15 	stw	r2,112(sp)
   51754:	d9001b15 	stw	r4,108(sp)
   51758:	793ff40e 	bge	r15,r4,5172c <__alt_mem_epcs_flash_controller+0xfe04072c>
   5175c:	1001b51e 	bne	r2,zero,51e34 <___vfiprintf_internal_r+0xb78>
   51760:	843ffc04 	addi	r16,r16,-16
   51764:	000d883a 	mov	r6,zero
   51768:	01400044 	movi	r5,1
   5176c:	d811883a 	mov	r8,sp
   51770:	3c3ff316 	blt	r7,r16,51740 <__alt_mem_epcs_flash_controller+0xfe040740>
   51774:	8007883a 	mov	r3,r16
   51778:	da402517 	ldw	r9,148(sp)
   5177c:	db802817 	ldw	r14,160(sp)
   51780:	dc002917 	ldw	r16,164(sp)
   51784:	da802417 	ldw	r10,144(sp)
   51788:	1885883a 	add	r2,r3,r2
   5178c:	40c00115 	stw	r3,4(r8)
   51790:	42800015 	stw	r10,0(r8)
   51794:	d8801c15 	stw	r2,112(sp)
   51798:	d9401b15 	stw	r5,108(sp)
   5179c:	00c001c4 	movi	r3,7
   517a0:	19426016 	blt	r3,r5,52124 <___vfiprintf_internal_r+0xe68>
   517a4:	d8c01d87 	ldb	r3,118(sp)
   517a8:	42000204 	addi	r8,r8,8
   517ac:	29000044 	addi	r4,r5,1
   517b0:	1801b31e 	bne	r3,zero,51e80 <___vfiprintf_internal_r+0xbc4>
   517b4:	7001c026 	beq	r14,zero,51eb8 <___vfiprintf_internal_r+0xbfc>
   517b8:	d8c01d04 	addi	r3,sp,116
   517bc:	10800084 	addi	r2,r2,2
   517c0:	40c00015 	stw	r3,0(r8)
   517c4:	00c00084 	movi	r3,2
   517c8:	40c00115 	stw	r3,4(r8)
   517cc:	d8801c15 	stw	r2,112(sp)
   517d0:	d9001b15 	stw	r4,108(sp)
   517d4:	00c001c4 	movi	r3,7
   517d8:	1902650e 	bge	r3,r4,52170 <___vfiprintf_internal_r+0xeb4>
   517dc:	10029a1e 	bne	r2,zero,52248 <___vfiprintf_internal_r+0xf8c>
   517e0:	00c02004 	movi	r3,128
   517e4:	01000044 	movi	r4,1
   517e8:	000b883a 	mov	r5,zero
   517ec:	d811883a 	mov	r8,sp
   517f0:	e0c1b31e 	bne	fp,r3,51ec0 <___vfiprintf_internal_r+0xc04>
   517f4:	8cb9c83a 	sub	fp,r17,r18
   517f8:	0701b10e 	bge	zero,fp,51ec0 <___vfiprintf_internal_r+0xc04>
   517fc:	01c00404 	movi	r7,16
   51800:	3f03890e 	bge	r7,fp,52628 <___vfiprintf_internal_r+0x136c>
   51804:	00c001b4 	movhi	r3,6
   51808:	18f5e204 	addi	r3,r3,-10360
   5180c:	d8c02415 	stw	r3,144(sp)
   51810:	8007883a 	mov	r3,r16
   51814:	034001c4 	movi	r13,7
   51818:	e021883a 	mov	r16,fp
   5181c:	da402515 	stw	r9,148(sp)
   51820:	1839883a 	mov	fp,r3
   51824:	00000506 	br	5183c <___vfiprintf_internal_r+0x580>
   51828:	29800084 	addi	r6,r5,2
   5182c:	42000204 	addi	r8,r8,8
   51830:	180b883a 	mov	r5,r3
   51834:	843ffc04 	addi	r16,r16,-16
   51838:	3c000d0e 	bge	r7,r16,51870 <___vfiprintf_internal_r+0x5b4>
   5183c:	10800404 	addi	r2,r2,16
   51840:	28c00044 	addi	r3,r5,1
   51844:	45c00015 	stw	r23,0(r8)
   51848:	41c00115 	stw	r7,4(r8)
   5184c:	d8801c15 	stw	r2,112(sp)
   51850:	d8c01b15 	stw	r3,108(sp)
   51854:	68fff40e 	bge	r13,r3,51828 <__alt_mem_epcs_flash_controller+0xfe040828>
   51858:	1002241e 	bne	r2,zero,520ec <___vfiprintf_internal_r+0xe30>
   5185c:	843ffc04 	addi	r16,r16,-16
   51860:	01800044 	movi	r6,1
   51864:	000b883a 	mov	r5,zero
   51868:	d811883a 	mov	r8,sp
   5186c:	3c3ff316 	blt	r7,r16,5183c <__alt_mem_epcs_flash_controller+0xfe04083c>
   51870:	da402517 	ldw	r9,148(sp)
   51874:	e007883a 	mov	r3,fp
   51878:	8039883a 	mov	fp,r16
   5187c:	1821883a 	mov	r16,r3
   51880:	d8c02417 	ldw	r3,144(sp)
   51884:	1705883a 	add	r2,r2,fp
   51888:	47000115 	stw	fp,4(r8)
   5188c:	40c00015 	stw	r3,0(r8)
   51890:	d8801c15 	stw	r2,112(sp)
   51894:	d9801b15 	stw	r6,108(sp)
   51898:	00c001c4 	movi	r3,7
   5189c:	19827616 	blt	r3,r6,52278 <___vfiprintf_internal_r+0xfbc>
   518a0:	4cf9c83a 	sub	fp,r9,r19
   518a4:	42000204 	addi	r8,r8,8
   518a8:	31000044 	addi	r4,r6,1
   518ac:	300b883a 	mov	r5,r6
   518b0:	07018516 	blt	zero,fp,51ec8 <___vfiprintf_internal_r+0xc0c>
   518b4:	9885883a 	add	r2,r19,r2
   518b8:	45400015 	stw	r21,0(r8)
   518bc:	44c00115 	stw	r19,4(r8)
   518c0:	d8801c15 	stw	r2,112(sp)
   518c4:	d9001b15 	stw	r4,108(sp)
   518c8:	00c001c4 	movi	r3,7
   518cc:	1901dd0e 	bge	r3,r4,52044 <___vfiprintf_internal_r+0xd88>
   518d0:	1002401e 	bne	r2,zero,521d4 <___vfiprintf_internal_r+0xf18>
   518d4:	d8001b15 	stw	zero,108(sp)
   518d8:	a2c0010c 	andi	r11,r20,4
   518dc:	58000226 	beq	r11,zero,518e8 <___vfiprintf_internal_r+0x62c>
   518e0:	8ca7c83a 	sub	r19,r17,r18
   518e4:	04c2f216 	blt	zero,r19,524b0 <___vfiprintf_internal_r+0x11f4>
   518e8:	8c80010e 	bge	r17,r18,518f0 <___vfiprintf_internal_r+0x634>
   518ec:	9023883a 	mov	r17,r18
   518f0:	da802317 	ldw	r10,140(sp)
   518f4:	5455883a 	add	r10,r10,r17
   518f8:	da802315 	stw	r10,140(sp)
   518fc:	d8001b15 	stw	zero,108(sp)
   51900:	d811883a 	mov	r8,sp
   51904:	003ea206 	br	51390 <__alt_mem_epcs_flash_controller+0xfe040390>
   51908:	a5000814 	ori	r20,r20,32
   5190c:	80c00007 	ldb	r3,0(r16)
   51910:	003ec906 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   51914:	80c00007 	ldb	r3,0(r16)
   51918:	1b030926 	beq	r3,r12,52540 <___vfiprintf_internal_r+0x1284>
   5191c:	a5000414 	ori	r20,r20,16
   51920:	003ec506 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   51924:	21003fcc 	andi	r4,r4,255
   51928:	20035e1e 	bne	r4,zero,526a4 <___vfiprintf_internal_r+0x13e8>
   5192c:	a080080c 	andi	r2,r20,32
   51930:	1002a526 	beq	r2,zero,523c8 <___vfiprintf_internal_r+0x110c>
   51934:	da802217 	ldw	r10,136(sp)
   51938:	50800017 	ldw	r2,0(r10)
   5193c:	da802317 	ldw	r10,140(sp)
   51940:	5007d7fa 	srai	r3,r10,31
   51944:	da802217 	ldw	r10,136(sp)
   51948:	10c00115 	stw	r3,4(r2)
   5194c:	52800104 	addi	r10,r10,4
   51950:	da802215 	stw	r10,136(sp)
   51954:	da802317 	ldw	r10,140(sp)
   51958:	12800015 	stw	r10,0(r2)
   5195c:	003e8c06 	br	51390 <__alt_mem_epcs_flash_controller+0xfe040390>
   51960:	21003fcc 	andi	r4,r4,255
   51964:	2003511e 	bne	r4,zero,526ac <___vfiprintf_internal_r+0x13f0>
   51968:	a080080c 	andi	r2,r20,32
   5196c:	1000a126 	beq	r2,zero,51bf4 <___vfiprintf_internal_r+0x938>
   51970:	da802217 	ldw	r10,136(sp)
   51974:	d8001d85 	stb	zero,118(sp)
   51978:	50800204 	addi	r2,r10,8
   5197c:	54800017 	ldw	r18,0(r10)
   51980:	54c00117 	ldw	r19,4(r10)
   51984:	4802b416 	blt	r9,zero,52458 <___vfiprintf_internal_r+0x119c>
   51988:	013fdfc4 	movi	r4,-129
   5198c:	94c6b03a 	or	r3,r18,r19
   51990:	d8802215 	stw	r2,136(sp)
   51994:	a128703a 	and	r20,r20,r4
   51998:	1800a226 	beq	r3,zero,51c24 <___vfiprintf_internal_r+0x968>
   5199c:	0039883a 	mov	fp,zero
   519a0:	dd401a04 	addi	r21,sp,104
   519a4:	9006d0fa 	srli	r3,r18,3
   519a8:	9808977a 	slli	r4,r19,29
   519ac:	9826d0fa 	srli	r19,r19,3
   519b0:	948001cc 	andi	r18,r18,7
   519b4:	90800c04 	addi	r2,r18,48
   519b8:	ad7fffc4 	addi	r21,r21,-1
   519bc:	20e4b03a 	or	r18,r4,r3
   519c0:	a8800005 	stb	r2,0(r21)
   519c4:	94c6b03a 	or	r3,r18,r19
   519c8:	183ff61e 	bne	r3,zero,519a4 <__alt_mem_epcs_flash_controller+0xfe0409a4>
   519cc:	a0c0004c 	andi	r3,r20,1
   519d0:	18005926 	beq	r3,zero,51b38 <___vfiprintf_internal_r+0x87c>
   519d4:	10803fcc 	andi	r2,r2,255
   519d8:	1080201c 	xori	r2,r2,128
   519dc:	10bfe004 	addi	r2,r2,-128
   519e0:	00c00c04 	movi	r3,48
   519e4:	10c05426 	beq	r2,r3,51b38 <___vfiprintf_internal_r+0x87c>
   519e8:	da801e17 	ldw	r10,120(sp)
   519ec:	a8bfffc4 	addi	r2,r21,-1
   519f0:	a8ffffc5 	stb	r3,-1(r21)
   519f4:	50a7c83a 	sub	r19,r10,r2
   519f8:	102b883a 	mov	r21,r2
   519fc:	003f2f06 	br	516bc <__alt_mem_epcs_flash_controller+0xfe0406bc>
   51a00:	21003fcc 	andi	r4,r4,255
   51a04:	2003421e 	bne	r4,zero,52710 <___vfiprintf_internal_r+0x1454>
   51a08:	008001b4 	movhi	r2,6
   51a0c:	10b57204 	addi	r2,r2,-10808
   51a10:	d8802615 	stw	r2,152(sp)
   51a14:	a080080c 	andi	r2,r20,32
   51a18:	1000aa26 	beq	r2,zero,51cc4 <___vfiprintf_internal_r+0xa08>
   51a1c:	da802217 	ldw	r10,136(sp)
   51a20:	54800017 	ldw	r18,0(r10)
   51a24:	54c00117 	ldw	r19,4(r10)
   51a28:	52800204 	addi	r10,r10,8
   51a2c:	da802215 	stw	r10,136(sp)
   51a30:	a080004c 	andi	r2,r20,1
   51a34:	1001d226 	beq	r2,zero,52180 <___vfiprintf_internal_r+0xec4>
   51a38:	94c4b03a 	or	r2,r18,r19
   51a3c:	1002351e 	bne	r2,zero,52314 <___vfiprintf_internal_r+0x1058>
   51a40:	d8001d85 	stb	zero,118(sp)
   51a44:	48022216 	blt	r9,zero,522d0 <___vfiprintf_internal_r+0x1014>
   51a48:	00bfdfc4 	movi	r2,-129
   51a4c:	a0a8703a 	and	r20,r20,r2
   51a50:	003f1506 	br	516a8 <__alt_mem_epcs_flash_controller+0xfe0406a8>
   51a54:	da802217 	ldw	r10,136(sp)
   51a58:	04800044 	movi	r18,1
   51a5c:	d8001d85 	stb	zero,118(sp)
   51a60:	50800017 	ldw	r2,0(r10)
   51a64:	52800104 	addi	r10,r10,4
   51a68:	da802215 	stw	r10,136(sp)
   51a6c:	d8801005 	stb	r2,64(sp)
   51a70:	9027883a 	mov	r19,r18
   51a74:	dd401004 	addi	r21,sp,64
   51a78:	0013883a 	mov	r9,zero
   51a7c:	003f1706 	br	516dc <__alt_mem_epcs_flash_controller+0xfe0406dc>
   51a80:	21003fcc 	andi	r4,r4,255
   51a84:	2003201e 	bne	r4,zero,52708 <___vfiprintf_internal_r+0x144c>
   51a88:	a080080c 	andi	r2,r20,32
   51a8c:	10004b26 	beq	r2,zero,51bbc <___vfiprintf_internal_r+0x900>
   51a90:	da802217 	ldw	r10,136(sp)
   51a94:	50800117 	ldw	r2,4(r10)
   51a98:	54800017 	ldw	r18,0(r10)
   51a9c:	52800204 	addi	r10,r10,8
   51aa0:	da802215 	stw	r10,136(sp)
   51aa4:	1027883a 	mov	r19,r2
   51aa8:	10022c16 	blt	r2,zero,5235c <___vfiprintf_internal_r+0x10a0>
   51aac:	df001d83 	ldbu	fp,118(sp)
   51ab0:	48007216 	blt	r9,zero,51c7c <___vfiprintf_internal_r+0x9c0>
   51ab4:	00ffdfc4 	movi	r3,-129
   51ab8:	94c4b03a 	or	r2,r18,r19
   51abc:	a0e8703a 	and	r20,r20,r3
   51ac0:	1000cc26 	beq	r2,zero,51df4 <___vfiprintf_internal_r+0xb38>
   51ac4:	98021026 	beq	r19,zero,52308 <___vfiprintf_internal_r+0x104c>
   51ac8:	dc402415 	stw	r17,144(sp)
   51acc:	dc002515 	stw	r16,148(sp)
   51ad0:	9823883a 	mov	r17,r19
   51ad4:	9021883a 	mov	r16,r18
   51ad8:	dd401a04 	addi	r21,sp,104
   51adc:	4825883a 	mov	r18,r9
   51ae0:	4027883a 	mov	r19,r8
   51ae4:	8009883a 	mov	r4,r16
   51ae8:	880b883a 	mov	r5,r17
   51aec:	01800284 	movi	r6,10
   51af0:	000f883a 	mov	r7,zero
   51af4:	00535d80 	call	535d8 <__umoddi3>
   51af8:	10800c04 	addi	r2,r2,48
   51afc:	ad7fffc4 	addi	r21,r21,-1
   51b00:	8009883a 	mov	r4,r16
   51b04:	880b883a 	mov	r5,r17
   51b08:	a8800005 	stb	r2,0(r21)
   51b0c:	01800284 	movi	r6,10
   51b10:	000f883a 	mov	r7,zero
   51b14:	00530600 	call	53060 <__udivdi3>
   51b18:	1021883a 	mov	r16,r2
   51b1c:	10c4b03a 	or	r2,r2,r3
   51b20:	1823883a 	mov	r17,r3
   51b24:	103fef1e 	bne	r2,zero,51ae4 <__alt_mem_epcs_flash_controller+0xfe040ae4>
   51b28:	dc402417 	ldw	r17,144(sp)
   51b2c:	dc002517 	ldw	r16,148(sp)
   51b30:	9013883a 	mov	r9,r18
   51b34:	9811883a 	mov	r8,r19
   51b38:	da801e17 	ldw	r10,120(sp)
   51b3c:	5567c83a 	sub	r19,r10,r21
   51b40:	003ede06 	br	516bc <__alt_mem_epcs_flash_controller+0xfe0406bc>
   51b44:	38803fcc 	andi	r2,r7,255
   51b48:	1080201c 	xori	r2,r2,128
   51b4c:	10bfe004 	addi	r2,r2,-128
   51b50:	1002371e 	bne	r2,zero,52430 <___vfiprintf_internal_r+0x1174>
   51b54:	01000044 	movi	r4,1
   51b58:	01c00804 	movi	r7,32
   51b5c:	80c00007 	ldb	r3,0(r16)
   51b60:	003e3506 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   51b64:	a5000054 	ori	r20,r20,1
   51b68:	80c00007 	ldb	r3,0(r16)
   51b6c:	003e3206 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   51b70:	a5002014 	ori	r20,r20,128
   51b74:	80c00007 	ldb	r3,0(r16)
   51b78:	003e2f06 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   51b7c:	8015883a 	mov	r10,r16
   51b80:	0023883a 	mov	r17,zero
   51b84:	18bff404 	addi	r2,r3,-48
   51b88:	50c00007 	ldb	r3,0(r10)
   51b8c:	8c4002a4 	muli	r17,r17,10
   51b90:	84000044 	addi	r16,r16,1
   51b94:	8015883a 	mov	r10,r16
   51b98:	1463883a 	add	r17,r2,r17
   51b9c:	18bff404 	addi	r2,r3,-48
   51ba0:	30bff92e 	bgeu	r6,r2,51b88 <__alt_mem_epcs_flash_controller+0xfe040b88>
   51ba4:	003e2506 	br	5143c <__alt_mem_epcs_flash_controller+0xfe04043c>
   51ba8:	21003fcc 	andi	r4,r4,255
   51bac:	2002d41e 	bne	r4,zero,52700 <___vfiprintf_internal_r+0x1444>
   51bb0:	a5000414 	ori	r20,r20,16
   51bb4:	a080080c 	andi	r2,r20,32
   51bb8:	103fb51e 	bne	r2,zero,51a90 <__alt_mem_epcs_flash_controller+0xfe040a90>
   51bbc:	a080040c 	andi	r2,r20,16
   51bc0:	1001f826 	beq	r2,zero,523a4 <___vfiprintf_internal_r+0x10e8>
   51bc4:	da802217 	ldw	r10,136(sp)
   51bc8:	54800017 	ldw	r18,0(r10)
   51bcc:	52800104 	addi	r10,r10,4
   51bd0:	da802215 	stw	r10,136(sp)
   51bd4:	9027d7fa 	srai	r19,r18,31
   51bd8:	9805883a 	mov	r2,r19
   51bdc:	003fb206 	br	51aa8 <__alt_mem_epcs_flash_controller+0xfe040aa8>
   51be0:	21003fcc 	andi	r4,r4,255
   51be4:	2002c41e 	bne	r4,zero,526f8 <___vfiprintf_internal_r+0x143c>
   51be8:	a5000414 	ori	r20,r20,16
   51bec:	a080080c 	andi	r2,r20,32
   51bf0:	103f5f1e 	bne	r2,zero,51970 <__alt_mem_epcs_flash_controller+0xfe040970>
   51bf4:	a080040c 	andi	r2,r20,16
   51bf8:	10020f26 	beq	r2,zero,52438 <___vfiprintf_internal_r+0x117c>
   51bfc:	da802217 	ldw	r10,136(sp)
   51c00:	d8001d85 	stb	zero,118(sp)
   51c04:	0027883a 	mov	r19,zero
   51c08:	50800104 	addi	r2,r10,4
   51c0c:	54800017 	ldw	r18,0(r10)
   51c10:	48021116 	blt	r9,zero,52458 <___vfiprintf_internal_r+0x119c>
   51c14:	00ffdfc4 	movi	r3,-129
   51c18:	d8802215 	stw	r2,136(sp)
   51c1c:	a0e8703a 	and	r20,r20,r3
   51c20:	903f5e1e 	bne	r18,zero,5199c <__alt_mem_epcs_flash_controller+0xfe04099c>
   51c24:	0039883a 	mov	fp,zero
   51c28:	4802a626 	beq	r9,zero,526c4 <___vfiprintf_internal_r+0x1408>
   51c2c:	0025883a 	mov	r18,zero
   51c30:	0027883a 	mov	r19,zero
   51c34:	003f5a06 	br	519a0 <__alt_mem_epcs_flash_controller+0xfe0409a0>
   51c38:	21003fcc 	andi	r4,r4,255
   51c3c:	20029f1e 	bne	r4,zero,526bc <___vfiprintf_internal_r+0x1400>
   51c40:	a5000414 	ori	r20,r20,16
   51c44:	a080080c 	andi	r2,r20,32
   51c48:	10005e1e 	bne	r2,zero,51dc4 <___vfiprintf_internal_r+0xb08>
   51c4c:	a080040c 	andi	r2,r20,16
   51c50:	1001a21e 	bne	r2,zero,522dc <___vfiprintf_internal_r+0x1020>
   51c54:	a080100c 	andi	r2,r20,64
   51c58:	d8001d85 	stb	zero,118(sp)
   51c5c:	da802217 	ldw	r10,136(sp)
   51c60:	1002231e 	bne	r2,zero,524f0 <___vfiprintf_internal_r+0x1234>
   51c64:	50800104 	addi	r2,r10,4
   51c68:	54800017 	ldw	r18,0(r10)
   51c6c:	0027883a 	mov	r19,zero
   51c70:	4801a00e 	bge	r9,zero,522f4 <___vfiprintf_internal_r+0x1038>
   51c74:	d8802215 	stw	r2,136(sp)
   51c78:	0039883a 	mov	fp,zero
   51c7c:	94c4b03a 	or	r2,r18,r19
   51c80:	103f901e 	bne	r2,zero,51ac4 <__alt_mem_epcs_flash_controller+0xfe040ac4>
   51c84:	00800044 	movi	r2,1
   51c88:	10803fcc 	andi	r2,r2,255
   51c8c:	00c00044 	movi	r3,1
   51c90:	10c05926 	beq	r2,r3,51df8 <___vfiprintf_internal_r+0xb3c>
   51c94:	00c00084 	movi	r3,2
   51c98:	10ffe41e 	bne	r2,r3,51c2c <__alt_mem_epcs_flash_controller+0xfe040c2c>
   51c9c:	0025883a 	mov	r18,zero
   51ca0:	0027883a 	mov	r19,zero
   51ca4:	00013d06 	br	5219c <___vfiprintf_internal_r+0xee0>
   51ca8:	21003fcc 	andi	r4,r4,255
   51cac:	2002811e 	bne	r4,zero,526b4 <___vfiprintf_internal_r+0x13f8>
   51cb0:	008001b4 	movhi	r2,6
   51cb4:	10b56d04 	addi	r2,r2,-10828
   51cb8:	d8802615 	stw	r2,152(sp)
   51cbc:	a080080c 	andi	r2,r20,32
   51cc0:	103f561e 	bne	r2,zero,51a1c <__alt_mem_epcs_flash_controller+0xfe040a1c>
   51cc4:	a080040c 	andi	r2,r20,16
   51cc8:	1001d126 	beq	r2,zero,52410 <___vfiprintf_internal_r+0x1154>
   51ccc:	da802217 	ldw	r10,136(sp)
   51cd0:	0027883a 	mov	r19,zero
   51cd4:	54800017 	ldw	r18,0(r10)
   51cd8:	52800104 	addi	r10,r10,4
   51cdc:	da802215 	stw	r10,136(sp)
   51ce0:	003f5306 	br	51a30 <__alt_mem_epcs_flash_controller+0xfe040a30>
   51ce4:	da802217 	ldw	r10,136(sp)
   51ce8:	d8001d85 	stb	zero,118(sp)
   51cec:	55400017 	ldw	r21,0(r10)
   51cf0:	50c00104 	addi	r3,r10,4
   51cf4:	a8024226 	beq	r21,zero,52600 <___vfiprintf_internal_r+0x1344>
   51cf8:	48021816 	blt	r9,zero,5255c <___vfiprintf_internal_r+0x12a0>
   51cfc:	480d883a 	mov	r6,r9
   51d00:	000b883a 	mov	r5,zero
   51d04:	a809883a 	mov	r4,r21
   51d08:	d8c02a15 	stw	r3,168(sp)
   51d0c:	da002b15 	stw	r8,172(sp)
   51d10:	da402c15 	stw	r9,176(sp)
   51d14:	004e9a40 	call	4e9a4 <memchr>
   51d18:	d8c02a17 	ldw	r3,168(sp)
   51d1c:	da002b17 	ldw	r8,172(sp)
   51d20:	da402c17 	ldw	r9,176(sp)
   51d24:	10024826 	beq	r2,zero,52648 <___vfiprintf_internal_r+0x138c>
   51d28:	1567c83a 	sub	r19,r2,r21
   51d2c:	df001d83 	ldbu	fp,118(sp)
   51d30:	d8c02215 	stw	r3,136(sp)
   51d34:	0013883a 	mov	r9,zero
   51d38:	003e6006 	br	516bc <__alt_mem_epcs_flash_controller+0xfe0406bc>
   51d3c:	21003fcc 	andi	r4,r4,255
   51d40:	203fc026 	beq	r4,zero,51c44 <__alt_mem_epcs_flash_controller+0xfe040c44>
   51d44:	d9c01d85 	stb	r7,118(sp)
   51d48:	003fbe06 	br	51c44 <__alt_mem_epcs_flash_controller+0xfe040c44>
   51d4c:	da802217 	ldw	r10,136(sp)
   51d50:	54400017 	ldw	r17,0(r10)
   51d54:	50800104 	addi	r2,r10,4
   51d58:	883e3b16 	blt	r17,zero,51648 <__alt_mem_epcs_flash_controller+0xfe040648>
   51d5c:	d8802215 	stw	r2,136(sp)
   51d60:	80c00007 	ldb	r3,0(r16)
   51d64:	003db406 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   51d68:	01000044 	movi	r4,1
   51d6c:	01c00ac4 	movi	r7,43
   51d70:	80c00007 	ldb	r3,0(r16)
   51d74:	003db006 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   51d78:	80c00007 	ldb	r3,0(r16)
   51d7c:	82800044 	addi	r10,r16,1
   51d80:	1b423c26 	beq	r3,r13,52674 <___vfiprintf_internal_r+0x13b8>
   51d84:	18bff404 	addi	r2,r3,-48
   51d88:	0013883a 	mov	r9,zero
   51d8c:	30822b36 	bltu	r6,r2,5263c <___vfiprintf_internal_r+0x1380>
   51d90:	50c00007 	ldb	r3,0(r10)
   51d94:	4a4002a4 	muli	r9,r9,10
   51d98:	54000044 	addi	r16,r10,1
   51d9c:	8015883a 	mov	r10,r16
   51da0:	4893883a 	add	r9,r9,r2
   51da4:	18bff404 	addi	r2,r3,-48
   51da8:	30bff92e 	bgeu	r6,r2,51d90 <__alt_mem_epcs_flash_controller+0xfe040d90>
   51dac:	483da30e 	bge	r9,zero,5143c <__alt_mem_epcs_flash_controller+0xfe04043c>
   51db0:	027fffc4 	movi	r9,-1
   51db4:	003da106 	br	5143c <__alt_mem_epcs_flash_controller+0xfe04043c>
   51db8:	a5001014 	ori	r20,r20,64
   51dbc:	80c00007 	ldb	r3,0(r16)
   51dc0:	003d9d06 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   51dc4:	da802217 	ldw	r10,136(sp)
   51dc8:	d8001d85 	stb	zero,118(sp)
   51dcc:	50c00204 	addi	r3,r10,8
   51dd0:	54800017 	ldw	r18,0(r10)
   51dd4:	54c00117 	ldw	r19,4(r10)
   51dd8:	4801ca16 	blt	r9,zero,52504 <___vfiprintf_internal_r+0x1248>
   51ddc:	013fdfc4 	movi	r4,-129
   51de0:	94c4b03a 	or	r2,r18,r19
   51de4:	d8c02215 	stw	r3,136(sp)
   51de8:	a128703a 	and	r20,r20,r4
   51dec:	0039883a 	mov	fp,zero
   51df0:	103f341e 	bne	r2,zero,51ac4 <__alt_mem_epcs_flash_controller+0xfe040ac4>
   51df4:	483e2e26 	beq	r9,zero,516b0 <__alt_mem_epcs_flash_controller+0xfe0406b0>
   51df8:	0025883a 	mov	r18,zero
   51dfc:	94800c04 	addi	r18,r18,48
   51e00:	dc8019c5 	stb	r18,103(sp)
   51e04:	dcc02717 	ldw	r19,156(sp)
   51e08:	dd4019c4 	addi	r21,sp,103
   51e0c:	003e2b06 	br	516bc <__alt_mem_epcs_flash_controller+0xfe0406bc>
   51e10:	21003fcc 	andi	r4,r4,255
   51e14:	2002361e 	bne	r4,zero,526f0 <___vfiprintf_internal_r+0x1434>
   51e18:	1801c126 	beq	r3,zero,52520 <___vfiprintf_internal_r+0x1264>
   51e1c:	04800044 	movi	r18,1
   51e20:	d8c01005 	stb	r3,64(sp)
   51e24:	d8001d85 	stb	zero,118(sp)
   51e28:	9027883a 	mov	r19,r18
   51e2c:	dd401004 	addi	r21,sp,64
   51e30:	003f1106 	br	51a78 <__alt_mem_epcs_flash_controller+0xfe040a78>
   51e34:	d9402117 	ldw	r5,132(sp)
   51e38:	d9002017 	ldw	r4,128(sp)
   51e3c:	d9801a04 	addi	r6,sp,104
   51e40:	d9c02b15 	stw	r7,172(sp)
   51e44:	dbc02a15 	stw	r15,168(sp)
   51e48:	00511a80 	call	511a8 <__sprint_r.part.0>
   51e4c:	d9c02b17 	ldw	r7,172(sp)
   51e50:	dbc02a17 	ldw	r15,168(sp)
   51e54:	10006d1e 	bne	r2,zero,5200c <___vfiprintf_internal_r+0xd50>
   51e58:	d9801b17 	ldw	r6,108(sp)
   51e5c:	d8801c17 	ldw	r2,112(sp)
   51e60:	d811883a 	mov	r8,sp
   51e64:	31400044 	addi	r5,r6,1
   51e68:	003e3306 	br	51738 <__alt_mem_epcs_flash_controller+0xfe040738>
   51e6c:	d9401b17 	ldw	r5,108(sp)
   51e70:	d8801c17 	ldw	r2,112(sp)
   51e74:	29000044 	addi	r4,r5,1
   51e78:	d8c01d87 	ldb	r3,118(sp)
   51e7c:	183e4d26 	beq	r3,zero,517b4 <__alt_mem_epcs_flash_controller+0xfe0407b4>
   51e80:	00c00044 	movi	r3,1
   51e84:	d9401d84 	addi	r5,sp,118
   51e88:	10c5883a 	add	r2,r2,r3
   51e8c:	41400015 	stw	r5,0(r8)
   51e90:	40c00115 	stw	r3,4(r8)
   51e94:	d8801c15 	stw	r2,112(sp)
   51e98:	d9001b15 	stw	r4,108(sp)
   51e9c:	014001c4 	movi	r5,7
   51ea0:	2900a90e 	bge	r5,r4,52148 <___vfiprintf_internal_r+0xe8c>
   51ea4:	1000da1e 	bne	r2,zero,52210 <___vfiprintf_internal_r+0xf54>
   51ea8:	7000ab1e 	bne	r14,zero,52158 <___vfiprintf_internal_r+0xe9c>
   51eac:	000b883a 	mov	r5,zero
   51eb0:	1809883a 	mov	r4,r3
   51eb4:	d811883a 	mov	r8,sp
   51eb8:	00c02004 	movi	r3,128
   51ebc:	e0fe4d26 	beq	fp,r3,517f4 <__alt_mem_epcs_flash_controller+0xfe0407f4>
   51ec0:	4cf9c83a 	sub	fp,r9,r19
   51ec4:	073e7b0e 	bge	zero,fp,518b4 <__alt_mem_epcs_flash_controller+0xfe0408b4>
   51ec8:	01c00404 	movi	r7,16
   51ecc:	3f01900e 	bge	r7,fp,52510 <___vfiprintf_internal_r+0x1254>
   51ed0:	00c001b4 	movhi	r3,6
   51ed4:	18f5e204 	addi	r3,r3,-10360
   51ed8:	d8c02415 	stw	r3,144(sp)
   51edc:	034001c4 	movi	r13,7
   51ee0:	00000506 	br	51ef8 <___vfiprintf_internal_r+0xc3c>
   51ee4:	29000084 	addi	r4,r5,2
   51ee8:	42000204 	addi	r8,r8,8
   51eec:	180b883a 	mov	r5,r3
   51ef0:	e73ffc04 	addi	fp,fp,-16
   51ef4:	3f000d0e 	bge	r7,fp,51f2c <___vfiprintf_internal_r+0xc70>
   51ef8:	10800404 	addi	r2,r2,16
   51efc:	28c00044 	addi	r3,r5,1
   51f00:	45c00015 	stw	r23,0(r8)
   51f04:	41c00115 	stw	r7,4(r8)
   51f08:	d8801c15 	stw	r2,112(sp)
   51f0c:	d8c01b15 	stw	r3,108(sp)
   51f10:	68fff40e 	bge	r13,r3,51ee4 <__alt_mem_epcs_flash_controller+0xfe040ee4>
   51f14:	1000101e 	bne	r2,zero,51f58 <___vfiprintf_internal_r+0xc9c>
   51f18:	e73ffc04 	addi	fp,fp,-16
   51f1c:	01000044 	movi	r4,1
   51f20:	000b883a 	mov	r5,zero
   51f24:	d811883a 	mov	r8,sp
   51f28:	3f3ff316 	blt	r7,fp,51ef8 <__alt_mem_epcs_flash_controller+0xfe040ef8>
   51f2c:	da802417 	ldw	r10,144(sp)
   51f30:	1705883a 	add	r2,r2,fp
   51f34:	47000115 	stw	fp,4(r8)
   51f38:	42800015 	stw	r10,0(r8)
   51f3c:	d8801c15 	stw	r2,112(sp)
   51f40:	d9001b15 	stw	r4,108(sp)
   51f44:	00c001c4 	movi	r3,7
   51f48:	19003616 	blt	r3,r4,52024 <___vfiprintf_internal_r+0xd68>
   51f4c:	42000204 	addi	r8,r8,8
   51f50:	21000044 	addi	r4,r4,1
   51f54:	003e5706 	br	518b4 <__alt_mem_epcs_flash_controller+0xfe0408b4>
   51f58:	d9402117 	ldw	r5,132(sp)
   51f5c:	d9002017 	ldw	r4,128(sp)
   51f60:	d9801a04 	addi	r6,sp,104
   51f64:	d9c02b15 	stw	r7,172(sp)
   51f68:	db402a15 	stw	r13,168(sp)
   51f6c:	00511a80 	call	511a8 <__sprint_r.part.0>
   51f70:	d9c02b17 	ldw	r7,172(sp)
   51f74:	db402a17 	ldw	r13,168(sp)
   51f78:	1000241e 	bne	r2,zero,5200c <___vfiprintf_internal_r+0xd50>
   51f7c:	d9401b17 	ldw	r5,108(sp)
   51f80:	d8801c17 	ldw	r2,112(sp)
   51f84:	d811883a 	mov	r8,sp
   51f88:	29000044 	addi	r4,r5,1
   51f8c:	003fd806 	br	51ef0 <__alt_mem_epcs_flash_controller+0xfe040ef0>
   51f90:	d9401b17 	ldw	r5,108(sp)
   51f94:	00c001b4 	movhi	r3,6
   51f98:	18f5e604 	addi	r3,r3,-10344
   51f9c:	d8c02415 	stw	r3,144(sp)
   51fa0:	29400044 	addi	r5,r5,1
   51fa4:	d8c02417 	ldw	r3,144(sp)
   51fa8:	14c5883a 	add	r2,r2,r19
   51fac:	44c00115 	stw	r19,4(r8)
   51fb0:	40c00015 	stw	r3,0(r8)
   51fb4:	d8801c15 	stw	r2,112(sp)
   51fb8:	d9401b15 	stw	r5,108(sp)
   51fbc:	00c001c4 	movi	r3,7
   51fc0:	1940070e 	bge	r3,r5,51fe0 <___vfiprintf_internal_r+0xd24>
   51fc4:	103e4826 	beq	r2,zero,518e8 <__alt_mem_epcs_flash_controller+0xfe0408e8>
   51fc8:	d9402117 	ldw	r5,132(sp)
   51fcc:	d9002017 	ldw	r4,128(sp)
   51fd0:	d9801a04 	addi	r6,sp,104
   51fd4:	00511a80 	call	511a8 <__sprint_r.part.0>
   51fd8:	10000c1e 	bne	r2,zero,5200c <___vfiprintf_internal_r+0xd50>
   51fdc:	d8801c17 	ldw	r2,112(sp)
   51fe0:	8c80010e 	bge	r17,r18,51fe8 <___vfiprintf_internal_r+0xd2c>
   51fe4:	9023883a 	mov	r17,r18
   51fe8:	da802317 	ldw	r10,140(sp)
   51fec:	5455883a 	add	r10,r10,r17
   51ff0:	da802315 	stw	r10,140(sp)
   51ff4:	103e4126 	beq	r2,zero,518fc <__alt_mem_epcs_flash_controller+0xfe0408fc>
   51ff8:	d9402117 	ldw	r5,132(sp)
   51ffc:	d9002017 	ldw	r4,128(sp)
   52000:	d9801a04 	addi	r6,sp,104
   52004:	00511a80 	call	511a8 <__sprint_r.part.0>
   52008:	103e3c26 	beq	r2,zero,518fc <__alt_mem_epcs_flash_controller+0xfe0408fc>
   5200c:	dd002117 	ldw	r20,132(sp)
   52010:	a080030b 	ldhu	r2,12(r20)
   52014:	1080100c 	andi	r2,r2,64
   52018:	1001231e 	bne	r2,zero,524a8 <___vfiprintf_internal_r+0x11ec>
   5201c:	d8802317 	ldw	r2,140(sp)
   52020:	003d7b06 	br	51610 <__alt_mem_epcs_flash_controller+0xfe040610>
   52024:	1000991e 	bne	r2,zero,5228c <___vfiprintf_internal_r+0xfd0>
   52028:	00c00044 	movi	r3,1
   5202c:	9805883a 	mov	r2,r19
   52030:	dd400015 	stw	r21,0(sp)
   52034:	dcc00115 	stw	r19,4(sp)
   52038:	dcc01c15 	stw	r19,112(sp)
   5203c:	d8c01b15 	stw	r3,108(sp)
   52040:	d811883a 	mov	r8,sp
   52044:	42000204 	addi	r8,r8,8
   52048:	a2c0010c 	andi	r11,r20,4
   5204c:	583fe426 	beq	r11,zero,51fe0 <__alt_mem_epcs_flash_controller+0xfe040fe0>
   52050:	8ca7c83a 	sub	r19,r17,r18
   52054:	04ffe20e 	bge	zero,r19,51fe0 <__alt_mem_epcs_flash_controller+0xfe040fe0>
   52058:	01c00404 	movi	r7,16
   5205c:	3cffcc0e 	bge	r7,r19,51f90 <__alt_mem_epcs_flash_controller+0xfe040f90>
   52060:	028001b4 	movhi	r10,6
   52064:	52b5e604 	addi	r10,r10,-10344
   52068:	d9001b17 	ldw	r4,108(sp)
   5206c:	da802415 	stw	r10,144(sp)
   52070:	382b883a 	mov	r21,r7
   52074:	050001c4 	movi	r20,7
   52078:	df002017 	ldw	fp,128(sp)
   5207c:	00000506 	br	52094 <___vfiprintf_internal_r+0xdd8>
   52080:	21400084 	addi	r5,r4,2
   52084:	42000204 	addi	r8,r8,8
   52088:	1809883a 	mov	r4,r3
   5208c:	9cfffc04 	addi	r19,r19,-16
   52090:	acffc40e 	bge	r21,r19,51fa4 <__alt_mem_epcs_flash_controller+0xfe040fa4>
   52094:	10800404 	addi	r2,r2,16
   52098:	20c00044 	addi	r3,r4,1
   5209c:	45800015 	stw	r22,0(r8)
   520a0:	45400115 	stw	r21,4(r8)
   520a4:	d8801c15 	stw	r2,112(sp)
   520a8:	d8c01b15 	stw	r3,108(sp)
   520ac:	a0fff40e 	bge	r20,r3,52080 <__alt_mem_epcs_flash_controller+0xfe041080>
   520b0:	1000041e 	bne	r2,zero,520c4 <___vfiprintf_internal_r+0xe08>
   520b4:	01400044 	movi	r5,1
   520b8:	0009883a 	mov	r4,zero
   520bc:	d811883a 	mov	r8,sp
   520c0:	003ff206 	br	5208c <__alt_mem_epcs_flash_controller+0xfe04108c>
   520c4:	d9402117 	ldw	r5,132(sp)
   520c8:	d9801a04 	addi	r6,sp,104
   520cc:	e009883a 	mov	r4,fp
   520d0:	00511a80 	call	511a8 <__sprint_r.part.0>
   520d4:	103fcd1e 	bne	r2,zero,5200c <__alt_mem_epcs_flash_controller+0xfe04100c>
   520d8:	d9001b17 	ldw	r4,108(sp)
   520dc:	d8801c17 	ldw	r2,112(sp)
   520e0:	d811883a 	mov	r8,sp
   520e4:	21400044 	addi	r5,r4,1
   520e8:	003fe806 	br	5208c <__alt_mem_epcs_flash_controller+0xfe04108c>
   520ec:	d9402117 	ldw	r5,132(sp)
   520f0:	d9002017 	ldw	r4,128(sp)
   520f4:	d9801a04 	addi	r6,sp,104
   520f8:	d9c02b15 	stw	r7,172(sp)
   520fc:	db402a15 	stw	r13,168(sp)
   52100:	00511a80 	call	511a8 <__sprint_r.part.0>
   52104:	d9c02b17 	ldw	r7,172(sp)
   52108:	db402a17 	ldw	r13,168(sp)
   5210c:	103fbf1e 	bne	r2,zero,5200c <__alt_mem_epcs_flash_controller+0xfe04100c>
   52110:	d9401b17 	ldw	r5,108(sp)
   52114:	d8801c17 	ldw	r2,112(sp)
   52118:	d811883a 	mov	r8,sp
   5211c:	29800044 	addi	r6,r5,1
   52120:	003dc406 	br	51834 <__alt_mem_epcs_flash_controller+0xfe040834>
   52124:	1000d21e 	bne	r2,zero,52470 <___vfiprintf_internal_r+0x11b4>
   52128:	d8c01d87 	ldb	r3,118(sp)
   5212c:	18009526 	beq	r3,zero,52384 <___vfiprintf_internal_r+0x10c8>
   52130:	00800044 	movi	r2,1
   52134:	d8c01d84 	addi	r3,sp,118
   52138:	1009883a 	mov	r4,r2
   5213c:	d8c00015 	stw	r3,0(sp)
   52140:	d8800115 	stw	r2,4(sp)
   52144:	d811883a 	mov	r8,sp
   52148:	200b883a 	mov	r5,r4
   5214c:	42000204 	addi	r8,r8,8
   52150:	21000044 	addi	r4,r4,1
   52154:	003d9706 	br	517b4 <__alt_mem_epcs_flash_controller+0xfe0407b4>
   52158:	d9001d04 	addi	r4,sp,116
   5215c:	00800084 	movi	r2,2
   52160:	d9000015 	stw	r4,0(sp)
   52164:	d8800115 	stw	r2,4(sp)
   52168:	1809883a 	mov	r4,r3
   5216c:	d811883a 	mov	r8,sp
   52170:	200b883a 	mov	r5,r4
   52174:	42000204 	addi	r8,r8,8
   52178:	21000044 	addi	r4,r4,1
   5217c:	003f4e06 	br	51eb8 <__alt_mem_epcs_flash_controller+0xfe040eb8>
   52180:	d8001d85 	stb	zero,118(sp)
   52184:	48005016 	blt	r9,zero,522c8 <___vfiprintf_internal_r+0x100c>
   52188:	00ffdfc4 	movi	r3,-129
   5218c:	94c4b03a 	or	r2,r18,r19
   52190:	a0e8703a 	and	r20,r20,r3
   52194:	103d4426 	beq	r2,zero,516a8 <__alt_mem_epcs_flash_controller+0xfe0406a8>
   52198:	0039883a 	mov	fp,zero
   5219c:	d9002617 	ldw	r4,152(sp)
   521a0:	dd401a04 	addi	r21,sp,104
   521a4:	908003cc 	andi	r2,r18,15
   521a8:	9806973a 	slli	r3,r19,28
   521ac:	2085883a 	add	r2,r4,r2
   521b0:	9024d13a 	srli	r18,r18,4
   521b4:	10800003 	ldbu	r2,0(r2)
   521b8:	9826d13a 	srli	r19,r19,4
   521bc:	ad7fffc4 	addi	r21,r21,-1
   521c0:	1ca4b03a 	or	r18,r3,r18
   521c4:	a8800005 	stb	r2,0(r21)
   521c8:	94c4b03a 	or	r2,r18,r19
   521cc:	103ff51e 	bne	r2,zero,521a4 <__alt_mem_epcs_flash_controller+0xfe0411a4>
   521d0:	003e5906 	br	51b38 <__alt_mem_epcs_flash_controller+0xfe040b38>
   521d4:	d9402117 	ldw	r5,132(sp)
   521d8:	d9002017 	ldw	r4,128(sp)
   521dc:	d9801a04 	addi	r6,sp,104
   521e0:	00511a80 	call	511a8 <__sprint_r.part.0>
   521e4:	103f891e 	bne	r2,zero,5200c <__alt_mem_epcs_flash_controller+0xfe04100c>
   521e8:	d8801c17 	ldw	r2,112(sp)
   521ec:	d811883a 	mov	r8,sp
   521f0:	003f9506 	br	52048 <__alt_mem_epcs_flash_controller+0xfe041048>
   521f4:	d9402117 	ldw	r5,132(sp)
   521f8:	d9002017 	ldw	r4,128(sp)
   521fc:	d9801a04 	addi	r6,sp,104
   52200:	00511a80 	call	511a8 <__sprint_r.part.0>
   52204:	103f811e 	bne	r2,zero,5200c <__alt_mem_epcs_flash_controller+0xfe04100c>
   52208:	d811883a 	mov	r8,sp
   5220c:	003ced06 	br	515c4 <__alt_mem_epcs_flash_controller+0xfe0405c4>
   52210:	d9402117 	ldw	r5,132(sp)
   52214:	d9002017 	ldw	r4,128(sp)
   52218:	d9801a04 	addi	r6,sp,104
   5221c:	da402c15 	stw	r9,176(sp)
   52220:	db802a15 	stw	r14,168(sp)
   52224:	00511a80 	call	511a8 <__sprint_r.part.0>
   52228:	da402c17 	ldw	r9,176(sp)
   5222c:	db802a17 	ldw	r14,168(sp)
   52230:	103f761e 	bne	r2,zero,5200c <__alt_mem_epcs_flash_controller+0xfe04100c>
   52234:	d9401b17 	ldw	r5,108(sp)
   52238:	d8801c17 	ldw	r2,112(sp)
   5223c:	d811883a 	mov	r8,sp
   52240:	29000044 	addi	r4,r5,1
   52244:	003d5b06 	br	517b4 <__alt_mem_epcs_flash_controller+0xfe0407b4>
   52248:	d9402117 	ldw	r5,132(sp)
   5224c:	d9002017 	ldw	r4,128(sp)
   52250:	d9801a04 	addi	r6,sp,104
   52254:	da402c15 	stw	r9,176(sp)
   52258:	00511a80 	call	511a8 <__sprint_r.part.0>
   5225c:	da402c17 	ldw	r9,176(sp)
   52260:	103f6a1e 	bne	r2,zero,5200c <__alt_mem_epcs_flash_controller+0xfe04100c>
   52264:	d9401b17 	ldw	r5,108(sp)
   52268:	d8801c17 	ldw	r2,112(sp)
   5226c:	d811883a 	mov	r8,sp
   52270:	29000044 	addi	r4,r5,1
   52274:	003f1006 	br	51eb8 <__alt_mem_epcs_flash_controller+0xfe040eb8>
   52278:	1000c31e 	bne	r2,zero,52588 <___vfiprintf_internal_r+0x12cc>
   5227c:	01000044 	movi	r4,1
   52280:	000b883a 	mov	r5,zero
   52284:	d811883a 	mov	r8,sp
   52288:	003f0d06 	br	51ec0 <__alt_mem_epcs_flash_controller+0xfe040ec0>
   5228c:	d9402117 	ldw	r5,132(sp)
   52290:	d9002017 	ldw	r4,128(sp)
   52294:	d9801a04 	addi	r6,sp,104
   52298:	00511a80 	call	511a8 <__sprint_r.part.0>
   5229c:	103f5b1e 	bne	r2,zero,5200c <__alt_mem_epcs_flash_controller+0xfe04100c>
   522a0:	d9001b17 	ldw	r4,108(sp)
   522a4:	d8801c17 	ldw	r2,112(sp)
   522a8:	d811883a 	mov	r8,sp
   522ac:	21000044 	addi	r4,r4,1
   522b0:	003d8006 	br	518b4 <__alt_mem_epcs_flash_controller+0xfe0408b4>
   522b4:	010001b4 	movhi	r4,6
   522b8:	21357204 	addi	r4,r4,-10808
   522bc:	d9002615 	stw	r4,152(sp)
   522c0:	d8c02215 	stw	r3,136(sp)
   522c4:	1029883a 	mov	r20,r2
   522c8:	94c4b03a 	or	r2,r18,r19
   522cc:	103fb21e 	bne	r2,zero,52198 <__alt_mem_epcs_flash_controller+0xfe041198>
   522d0:	0039883a 	mov	fp,zero
   522d4:	00800084 	movi	r2,2
   522d8:	003e6b06 	br	51c88 <__alt_mem_epcs_flash_controller+0xfe040c88>
   522dc:	da802217 	ldw	r10,136(sp)
   522e0:	d8001d85 	stb	zero,118(sp)
   522e4:	0027883a 	mov	r19,zero
   522e8:	50800104 	addi	r2,r10,4
   522ec:	54800017 	ldw	r18,0(r10)
   522f0:	483e6016 	blt	r9,zero,51c74 <__alt_mem_epcs_flash_controller+0xfe040c74>
   522f4:	00ffdfc4 	movi	r3,-129
   522f8:	d8802215 	stw	r2,136(sp)
   522fc:	a0e8703a 	and	r20,r20,r3
   52300:	0039883a 	mov	fp,zero
   52304:	903ebb26 	beq	r18,zero,51df4 <__alt_mem_epcs_flash_controller+0xfe040df4>
   52308:	00800244 	movi	r2,9
   5230c:	14bdee36 	bltu	r2,r18,51ac8 <__alt_mem_epcs_flash_controller+0xfe040ac8>
   52310:	003eba06 	br	51dfc <__alt_mem_epcs_flash_controller+0xfe040dfc>
   52314:	00800c04 	movi	r2,48
   52318:	d8c01d45 	stb	r3,117(sp)
   5231c:	d8801d05 	stb	r2,116(sp)
   52320:	d8001d85 	stb	zero,118(sp)
   52324:	a0c00094 	ori	r3,r20,2
   52328:	4800a916 	blt	r9,zero,525d0 <___vfiprintf_internal_r+0x1314>
   5232c:	00bfdfc4 	movi	r2,-129
   52330:	a096703a 	and	r11,r20,r2
   52334:	5d000094 	ori	r20,r11,2
   52338:	0039883a 	mov	fp,zero
   5233c:	003f9706 	br	5219c <__alt_mem_epcs_flash_controller+0xfe04119c>
   52340:	8025883a 	mov	r18,r16
   52344:	003c2e06 	br	51400 <__alt_mem_epcs_flash_controller+0xfe040400>
   52348:	008001b4 	movhi	r2,6
   5234c:	10b57204 	addi	r2,r2,-10808
   52350:	0039883a 	mov	fp,zero
   52354:	d8802615 	stw	r2,152(sp)
   52358:	003f9006 	br	5219c <__alt_mem_epcs_flash_controller+0xfe04119c>
   5235c:	04a5c83a 	sub	r18,zero,r18
   52360:	07000b44 	movi	fp,45
   52364:	9004c03a 	cmpne	r2,r18,zero
   52368:	04e7c83a 	sub	r19,zero,r19
   5236c:	df001d85 	stb	fp,118(sp)
   52370:	98a7c83a 	sub	r19,r19,r2
   52374:	48009f16 	blt	r9,zero,525f4 <___vfiprintf_internal_r+0x1338>
   52378:	00bfdfc4 	movi	r2,-129
   5237c:	a0a8703a 	and	r20,r20,r2
   52380:	003dd006 	br	51ac4 <__alt_mem_epcs_flash_controller+0xfe040ac4>
   52384:	70004c26 	beq	r14,zero,524b8 <___vfiprintf_internal_r+0x11fc>
   52388:	00800084 	movi	r2,2
   5238c:	d8c01d04 	addi	r3,sp,116
   52390:	d8c00015 	stw	r3,0(sp)
   52394:	d8800115 	stw	r2,4(sp)
   52398:	01000044 	movi	r4,1
   5239c:	d811883a 	mov	r8,sp
   523a0:	003f7306 	br	52170 <__alt_mem_epcs_flash_controller+0xfe041170>
   523a4:	a080100c 	andi	r2,r20,64
   523a8:	da802217 	ldw	r10,136(sp)
   523ac:	103e0626 	beq	r2,zero,51bc8 <__alt_mem_epcs_flash_controller+0xfe040bc8>
   523b0:	5480000f 	ldh	r18,0(r10)
   523b4:	52800104 	addi	r10,r10,4
   523b8:	da802215 	stw	r10,136(sp)
   523bc:	9027d7fa 	srai	r19,r18,31
   523c0:	9805883a 	mov	r2,r19
   523c4:	003db806 	br	51aa8 <__alt_mem_epcs_flash_controller+0xfe040aa8>
   523c8:	a080040c 	andi	r2,r20,16
   523cc:	1000091e 	bne	r2,zero,523f4 <___vfiprintf_internal_r+0x1138>
   523d0:	a2c0100c 	andi	r11,r20,64
   523d4:	58000726 	beq	r11,zero,523f4 <___vfiprintf_internal_r+0x1138>
   523d8:	da802217 	ldw	r10,136(sp)
   523dc:	50800017 	ldw	r2,0(r10)
   523e0:	52800104 	addi	r10,r10,4
   523e4:	da802215 	stw	r10,136(sp)
   523e8:	da802317 	ldw	r10,140(sp)
   523ec:	1280000d 	sth	r10,0(r2)
   523f0:	003be706 	br	51390 <__alt_mem_epcs_flash_controller+0xfe040390>
   523f4:	da802217 	ldw	r10,136(sp)
   523f8:	50800017 	ldw	r2,0(r10)
   523fc:	52800104 	addi	r10,r10,4
   52400:	da802215 	stw	r10,136(sp)
   52404:	da802317 	ldw	r10,140(sp)
   52408:	12800015 	stw	r10,0(r2)
   5240c:	003be006 	br	51390 <__alt_mem_epcs_flash_controller+0xfe040390>
   52410:	a080100c 	andi	r2,r20,64
   52414:	da802217 	ldw	r10,136(sp)
   52418:	10003026 	beq	r2,zero,524dc <___vfiprintf_internal_r+0x1220>
   5241c:	5480000b 	ldhu	r18,0(r10)
   52420:	52800104 	addi	r10,r10,4
   52424:	0027883a 	mov	r19,zero
   52428:	da802215 	stw	r10,136(sp)
   5242c:	003d8006 	br	51a30 <__alt_mem_epcs_flash_controller+0xfe040a30>
   52430:	80c00007 	ldb	r3,0(r16)
   52434:	003c0006 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   52438:	a080100c 	andi	r2,r20,64
   5243c:	d8001d85 	stb	zero,118(sp)
   52440:	da802217 	ldw	r10,136(sp)
   52444:	1000201e 	bne	r2,zero,524c8 <___vfiprintf_internal_r+0x120c>
   52448:	50800104 	addi	r2,r10,4
   5244c:	54800017 	ldw	r18,0(r10)
   52450:	0027883a 	mov	r19,zero
   52454:	483def0e 	bge	r9,zero,51c14 <__alt_mem_epcs_flash_controller+0xfe040c14>
   52458:	94c6b03a 	or	r3,r18,r19
   5245c:	d8802215 	stw	r2,136(sp)
   52460:	183d4e1e 	bne	r3,zero,5199c <__alt_mem_epcs_flash_controller+0xfe04099c>
   52464:	0039883a 	mov	fp,zero
   52468:	0005883a 	mov	r2,zero
   5246c:	003e0606 	br	51c88 <__alt_mem_epcs_flash_controller+0xfe040c88>
   52470:	d9402117 	ldw	r5,132(sp)
   52474:	d9002017 	ldw	r4,128(sp)
   52478:	d9801a04 	addi	r6,sp,104
   5247c:	da402c15 	stw	r9,176(sp)
   52480:	db802a15 	stw	r14,168(sp)
   52484:	00511a80 	call	511a8 <__sprint_r.part.0>
   52488:	da402c17 	ldw	r9,176(sp)
   5248c:	db802a17 	ldw	r14,168(sp)
   52490:	103ede1e 	bne	r2,zero,5200c <__alt_mem_epcs_flash_controller+0xfe04100c>
   52494:	d9401b17 	ldw	r5,108(sp)
   52498:	d8801c17 	ldw	r2,112(sp)
   5249c:	d811883a 	mov	r8,sp
   524a0:	29000044 	addi	r4,r5,1
   524a4:	003e7406 	br	51e78 <__alt_mem_epcs_flash_controller+0xfe040e78>
   524a8:	00bfffc4 	movi	r2,-1
   524ac:	003c5806 	br	51610 <__alt_mem_epcs_flash_controller+0xfe040610>
   524b0:	d811883a 	mov	r8,sp
   524b4:	003ee806 	br	52058 <__alt_mem_epcs_flash_controller+0xfe041058>
   524b8:	000b883a 	mov	r5,zero
   524bc:	01000044 	movi	r4,1
   524c0:	d811883a 	mov	r8,sp
   524c4:	003e7c06 	br	51eb8 <__alt_mem_epcs_flash_controller+0xfe040eb8>
   524c8:	50800104 	addi	r2,r10,4
   524cc:	5480000b 	ldhu	r18,0(r10)
   524d0:	0027883a 	mov	r19,zero
   524d4:	483dcf0e 	bge	r9,zero,51c14 <__alt_mem_epcs_flash_controller+0xfe040c14>
   524d8:	003fdf06 	br	52458 <__alt_mem_epcs_flash_controller+0xfe041458>
   524dc:	54800017 	ldw	r18,0(r10)
   524e0:	52800104 	addi	r10,r10,4
   524e4:	0027883a 	mov	r19,zero
   524e8:	da802215 	stw	r10,136(sp)
   524ec:	003d5006 	br	51a30 <__alt_mem_epcs_flash_controller+0xfe040a30>
   524f0:	50800104 	addi	r2,r10,4
   524f4:	5480000b 	ldhu	r18,0(r10)
   524f8:	0027883a 	mov	r19,zero
   524fc:	483f7d0e 	bge	r9,zero,522f4 <__alt_mem_epcs_flash_controller+0xfe0412f4>
   52500:	003ddc06 	br	51c74 <__alt_mem_epcs_flash_controller+0xfe040c74>
   52504:	d8c02215 	stw	r3,136(sp)
   52508:	0039883a 	mov	fp,zero
   5250c:	003ddb06 	br	51c7c <__alt_mem_epcs_flash_controller+0xfe040c7c>
   52510:	028001b4 	movhi	r10,6
   52514:	52b5e204 	addi	r10,r10,-10360
   52518:	da802415 	stw	r10,144(sp)
   5251c:	003e8306 	br	51f2c <__alt_mem_epcs_flash_controller+0xfe040f2c>
   52520:	d8801c17 	ldw	r2,112(sp)
   52524:	dd002117 	ldw	r20,132(sp)
   52528:	103eb926 	beq	r2,zero,52010 <__alt_mem_epcs_flash_controller+0xfe041010>
   5252c:	d9002017 	ldw	r4,128(sp)
   52530:	d9801a04 	addi	r6,sp,104
   52534:	a00b883a 	mov	r5,r20
   52538:	00511a80 	call	511a8 <__sprint_r.part.0>
   5253c:	003eb406 	br	52010 <__alt_mem_epcs_flash_controller+0xfe041010>
   52540:	80c00043 	ldbu	r3,1(r16)
   52544:	a5000814 	ori	r20,r20,32
   52548:	84000044 	addi	r16,r16,1
   5254c:	18c03fcc 	andi	r3,r3,255
   52550:	18c0201c 	xori	r3,r3,128
   52554:	18ffe004 	addi	r3,r3,-128
   52558:	003bb706 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   5255c:	a809883a 	mov	r4,r21
   52560:	d8c02a15 	stw	r3,168(sp)
   52564:	da002b15 	stw	r8,172(sp)
   52568:	0046ef40 	call	46ef4 <strlen>
   5256c:	d8c02a17 	ldw	r3,168(sp)
   52570:	1027883a 	mov	r19,r2
   52574:	df001d83 	ldbu	fp,118(sp)
   52578:	d8c02215 	stw	r3,136(sp)
   5257c:	0013883a 	mov	r9,zero
   52580:	da002b17 	ldw	r8,172(sp)
   52584:	003c4d06 	br	516bc <__alt_mem_epcs_flash_controller+0xfe0406bc>
   52588:	d9402117 	ldw	r5,132(sp)
   5258c:	d9002017 	ldw	r4,128(sp)
   52590:	d9801a04 	addi	r6,sp,104
   52594:	da402c15 	stw	r9,176(sp)
   52598:	00511a80 	call	511a8 <__sprint_r.part.0>
   5259c:	da402c17 	ldw	r9,176(sp)
   525a0:	103e9a1e 	bne	r2,zero,5200c <__alt_mem_epcs_flash_controller+0xfe04100c>
   525a4:	d9401b17 	ldw	r5,108(sp)
   525a8:	d8801c17 	ldw	r2,112(sp)
   525ac:	d811883a 	mov	r8,sp
   525b0:	29000044 	addi	r4,r5,1
   525b4:	003e4206 	br	51ec0 <__alt_mem_epcs_flash_controller+0xfe040ec0>
   525b8:	d9401b17 	ldw	r5,108(sp)
   525bc:	010001b4 	movhi	r4,6
   525c0:	2135e604 	addi	r4,r4,-10344
   525c4:	d9002415 	stw	r4,144(sp)
   525c8:	29400044 	addi	r5,r5,1
   525cc:	003c6d06 	br	51784 <__alt_mem_epcs_flash_controller+0xfe040784>
   525d0:	0039883a 	mov	fp,zero
   525d4:	00800084 	movi	r2,2
   525d8:	10803fcc 	andi	r2,r2,255
   525dc:	01000044 	movi	r4,1
   525e0:	11001e26 	beq	r2,r4,5265c <___vfiprintf_internal_r+0x13a0>
   525e4:	01000084 	movi	r4,2
   525e8:	11001e1e 	bne	r2,r4,52664 <___vfiprintf_internal_r+0x13a8>
   525ec:	1829883a 	mov	r20,r3
   525f0:	003eea06 	br	5219c <__alt_mem_epcs_flash_controller+0xfe04119c>
   525f4:	a007883a 	mov	r3,r20
   525f8:	00800044 	movi	r2,1
   525fc:	003ff606 	br	525d8 <__alt_mem_epcs_flash_controller+0xfe0415d8>
   52600:	00800184 	movi	r2,6
   52604:	1240012e 	bgeu	r2,r9,5260c <___vfiprintf_internal_r+0x1350>
   52608:	1013883a 	mov	r9,r2
   5260c:	4827883a 	mov	r19,r9
   52610:	4825883a 	mov	r18,r9
   52614:	48001516 	blt	r9,zero,5266c <___vfiprintf_internal_r+0x13b0>
   52618:	054001b4 	movhi	r21,6
   5261c:	d8c02215 	stw	r3,136(sp)
   52620:	ad757704 	addi	r21,r21,-10788
   52624:	003d1406 	br	51a78 <__alt_mem_epcs_flash_controller+0xfe040a78>
   52628:	028001b4 	movhi	r10,6
   5262c:	52b5e204 	addi	r10,r10,-10360
   52630:	da802415 	stw	r10,144(sp)
   52634:	200d883a 	mov	r6,r4
   52638:	003c9106 	br	51880 <__alt_mem_epcs_flash_controller+0xfe040880>
   5263c:	5021883a 	mov	r16,r10
   52640:	0013883a 	mov	r9,zero
   52644:	003b7d06 	br	5143c <__alt_mem_epcs_flash_controller+0xfe04043c>
   52648:	4827883a 	mov	r19,r9
   5264c:	df001d83 	ldbu	fp,118(sp)
   52650:	d8c02215 	stw	r3,136(sp)
   52654:	0013883a 	mov	r9,zero
   52658:	003c1806 	br	516bc <__alt_mem_epcs_flash_controller+0xfe0406bc>
   5265c:	1829883a 	mov	r20,r3
   52660:	003d1806 	br	51ac4 <__alt_mem_epcs_flash_controller+0xfe040ac4>
   52664:	1829883a 	mov	r20,r3
   52668:	003ccd06 	br	519a0 <__alt_mem_epcs_flash_controller+0xfe0409a0>
   5266c:	0025883a 	mov	r18,zero
   52670:	003fe906 	br	52618 <__alt_mem_epcs_flash_controller+0xfe041618>
   52674:	d8802217 	ldw	r2,136(sp)
   52678:	80c00043 	ldbu	r3,1(r16)
   5267c:	5021883a 	mov	r16,r10
   52680:	12400017 	ldw	r9,0(r2)
   52684:	10800104 	addi	r2,r2,4
   52688:	d8802215 	stw	r2,136(sp)
   5268c:	483faf0e 	bge	r9,zero,5254c <__alt_mem_epcs_flash_controller+0xfe04154c>
   52690:	18c03fcc 	andi	r3,r3,255
   52694:	18c0201c 	xori	r3,r3,128
   52698:	027fffc4 	movi	r9,-1
   5269c:	18ffe004 	addi	r3,r3,-128
   526a0:	003b6506 	br	51438 <__alt_mem_epcs_flash_controller+0xfe040438>
   526a4:	d9c01d85 	stb	r7,118(sp)
   526a8:	003ca006 	br	5192c <__alt_mem_epcs_flash_controller+0xfe04092c>
   526ac:	d9c01d85 	stb	r7,118(sp)
   526b0:	003cad06 	br	51968 <__alt_mem_epcs_flash_controller+0xfe040968>
   526b4:	d9c01d85 	stb	r7,118(sp)
   526b8:	003d7d06 	br	51cb0 <__alt_mem_epcs_flash_controller+0xfe040cb0>
   526bc:	d9c01d85 	stb	r7,118(sp)
   526c0:	003d5f06 	br	51c40 <__alt_mem_epcs_flash_controller+0xfe040c40>
   526c4:	a080004c 	andi	r2,r20,1
   526c8:	0039883a 	mov	fp,zero
   526cc:	10000526 	beq	r2,zero,526e4 <___vfiprintf_internal_r+0x1428>
   526d0:	00800c04 	movi	r2,48
   526d4:	d88019c5 	stb	r2,103(sp)
   526d8:	dcc02717 	ldw	r19,156(sp)
   526dc:	dd4019c4 	addi	r21,sp,103
   526e0:	003bf606 	br	516bc <__alt_mem_epcs_flash_controller+0xfe0406bc>
   526e4:	0027883a 	mov	r19,zero
   526e8:	dd401a04 	addi	r21,sp,104
   526ec:	003bf306 	br	516bc <__alt_mem_epcs_flash_controller+0xfe0406bc>
   526f0:	d9c01d85 	stb	r7,118(sp)
   526f4:	003dc806 	br	51e18 <__alt_mem_epcs_flash_controller+0xfe040e18>
   526f8:	d9c01d85 	stb	r7,118(sp)
   526fc:	003d3a06 	br	51be8 <__alt_mem_epcs_flash_controller+0xfe040be8>
   52700:	d9c01d85 	stb	r7,118(sp)
   52704:	003d2a06 	br	51bb0 <__alt_mem_epcs_flash_controller+0xfe040bb0>
   52708:	d9c01d85 	stb	r7,118(sp)
   5270c:	003cde06 	br	51a88 <__alt_mem_epcs_flash_controller+0xfe040a88>
   52710:	d9c01d85 	stb	r7,118(sp)
   52714:	003cbc06 	br	51a08 <__alt_mem_epcs_flash_controller+0xfe040a08>

00052718 <__vfiprintf_internal>:
   52718:	008001b4 	movhi	r2,6
   5271c:	10be3804 	addi	r2,r2,-1824
   52720:	300f883a 	mov	r7,r6
   52724:	280d883a 	mov	r6,r5
   52728:	200b883a 	mov	r5,r4
   5272c:	11000017 	ldw	r4,0(r2)
   52730:	00512bc1 	jmpi	512bc <___vfiprintf_internal_r>

00052734 <__sbprintf>:
   52734:	2880030b 	ldhu	r2,12(r5)
   52738:	2ac01917 	ldw	r11,100(r5)
   5273c:	2a80038b 	ldhu	r10,14(r5)
   52740:	2a400717 	ldw	r9,28(r5)
   52744:	2a000917 	ldw	r8,36(r5)
   52748:	defee204 	addi	sp,sp,-1144
   5274c:	00c10004 	movi	r3,1024
   52750:	dc011a15 	stw	r16,1128(sp)
   52754:	10bfff4c 	andi	r2,r2,65533
   52758:	2821883a 	mov	r16,r5
   5275c:	d8cb883a 	add	r5,sp,r3
   52760:	dc811c15 	stw	r18,1136(sp)
   52764:	dc411b15 	stw	r17,1132(sp)
   52768:	dfc11d15 	stw	ra,1140(sp)
   5276c:	2025883a 	mov	r18,r4
   52770:	d881030d 	sth	r2,1036(sp)
   52774:	dac11915 	stw	r11,1124(sp)
   52778:	da81038d 	sth	r10,1038(sp)
   5277c:	da410715 	stw	r9,1052(sp)
   52780:	da010915 	stw	r8,1060(sp)
   52784:	dec10015 	stw	sp,1024(sp)
   52788:	dec10415 	stw	sp,1040(sp)
   5278c:	d8c10215 	stw	r3,1032(sp)
   52790:	d8c10515 	stw	r3,1044(sp)
   52794:	d8010615 	stw	zero,1048(sp)
   52798:	00512bc0 	call	512bc <___vfiprintf_internal_r>
   5279c:	1023883a 	mov	r17,r2
   527a0:	10000416 	blt	r2,zero,527b4 <__sbprintf+0x80>
   527a4:	d9410004 	addi	r5,sp,1024
   527a8:	9009883a 	mov	r4,r18
   527ac:	004d80c0 	call	4d80c <_fflush_r>
   527b0:	10000d1e 	bne	r2,zero,527e8 <__sbprintf+0xb4>
   527b4:	d881030b 	ldhu	r2,1036(sp)
   527b8:	1080100c 	andi	r2,r2,64
   527bc:	10000326 	beq	r2,zero,527cc <__sbprintf+0x98>
   527c0:	8080030b 	ldhu	r2,12(r16)
   527c4:	10801014 	ori	r2,r2,64
   527c8:	8080030d 	sth	r2,12(r16)
   527cc:	8805883a 	mov	r2,r17
   527d0:	dfc11d17 	ldw	ra,1140(sp)
   527d4:	dc811c17 	ldw	r18,1136(sp)
   527d8:	dc411b17 	ldw	r17,1132(sp)
   527dc:	dc011a17 	ldw	r16,1128(sp)
   527e0:	dec11e04 	addi	sp,sp,1144
   527e4:	f800283a 	ret
   527e8:	047fffc4 	movi	r17,-1
   527ec:	003ff106 	br	527b4 <__alt_mem_epcs_flash_controller+0xfe0417b4>

000527f0 <__swbuf_r>:
   527f0:	defffb04 	addi	sp,sp,-20
   527f4:	dcc00315 	stw	r19,12(sp)
   527f8:	dc800215 	stw	r18,8(sp)
   527fc:	dc000015 	stw	r16,0(sp)
   52800:	dfc00415 	stw	ra,16(sp)
   52804:	dc400115 	stw	r17,4(sp)
   52808:	2025883a 	mov	r18,r4
   5280c:	2827883a 	mov	r19,r5
   52810:	3021883a 	mov	r16,r6
   52814:	20000226 	beq	r4,zero,52820 <__swbuf_r+0x30>
   52818:	20800e17 	ldw	r2,56(r4)
   5281c:	10004226 	beq	r2,zero,52928 <__swbuf_r+0x138>
   52820:	80800617 	ldw	r2,24(r16)
   52824:	8100030b 	ldhu	r4,12(r16)
   52828:	80800215 	stw	r2,8(r16)
   5282c:	2080020c 	andi	r2,r4,8
   52830:	10003626 	beq	r2,zero,5290c <__swbuf_r+0x11c>
   52834:	80c00417 	ldw	r3,16(r16)
   52838:	18003426 	beq	r3,zero,5290c <__swbuf_r+0x11c>
   5283c:	2088000c 	andi	r2,r4,8192
   52840:	9c403fcc 	andi	r17,r19,255
   52844:	10001a26 	beq	r2,zero,528b0 <__swbuf_r+0xc0>
   52848:	80800017 	ldw	r2,0(r16)
   5284c:	81000517 	ldw	r4,20(r16)
   52850:	10c7c83a 	sub	r3,r2,r3
   52854:	1900200e 	bge	r3,r4,528d8 <__swbuf_r+0xe8>
   52858:	18c00044 	addi	r3,r3,1
   5285c:	81000217 	ldw	r4,8(r16)
   52860:	11400044 	addi	r5,r2,1
   52864:	81400015 	stw	r5,0(r16)
   52868:	213fffc4 	addi	r4,r4,-1
   5286c:	81000215 	stw	r4,8(r16)
   52870:	14c00005 	stb	r19,0(r2)
   52874:	80800517 	ldw	r2,20(r16)
   52878:	10c01e26 	beq	r2,r3,528f4 <__swbuf_r+0x104>
   5287c:	8080030b 	ldhu	r2,12(r16)
   52880:	1080004c 	andi	r2,r2,1
   52884:	10000226 	beq	r2,zero,52890 <__swbuf_r+0xa0>
   52888:	00800284 	movi	r2,10
   5288c:	88801926 	beq	r17,r2,528f4 <__swbuf_r+0x104>
   52890:	8805883a 	mov	r2,r17
   52894:	dfc00417 	ldw	ra,16(sp)
   52898:	dcc00317 	ldw	r19,12(sp)
   5289c:	dc800217 	ldw	r18,8(sp)
   528a0:	dc400117 	ldw	r17,4(sp)
   528a4:	dc000017 	ldw	r16,0(sp)
   528a8:	dec00504 	addi	sp,sp,20
   528ac:	f800283a 	ret
   528b0:	81401917 	ldw	r5,100(r16)
   528b4:	00b7ffc4 	movi	r2,-8193
   528b8:	21080014 	ori	r4,r4,8192
   528bc:	2884703a 	and	r2,r5,r2
   528c0:	80801915 	stw	r2,100(r16)
   528c4:	80800017 	ldw	r2,0(r16)
   528c8:	8100030d 	sth	r4,12(r16)
   528cc:	81000517 	ldw	r4,20(r16)
   528d0:	10c7c83a 	sub	r3,r2,r3
   528d4:	193fe016 	blt	r3,r4,52858 <__alt_mem_epcs_flash_controller+0xfe041858>
   528d8:	800b883a 	mov	r5,r16
   528dc:	9009883a 	mov	r4,r18
   528e0:	004d80c0 	call	4d80c <_fflush_r>
   528e4:	1000071e 	bne	r2,zero,52904 <__swbuf_r+0x114>
   528e8:	80800017 	ldw	r2,0(r16)
   528ec:	00c00044 	movi	r3,1
   528f0:	003fda06 	br	5285c <__alt_mem_epcs_flash_controller+0xfe04185c>
   528f4:	800b883a 	mov	r5,r16
   528f8:	9009883a 	mov	r4,r18
   528fc:	004d80c0 	call	4d80c <_fflush_r>
   52900:	103fe326 	beq	r2,zero,52890 <__alt_mem_epcs_flash_controller+0xfe041890>
   52904:	00bfffc4 	movi	r2,-1
   52908:	003fe206 	br	52894 <__alt_mem_epcs_flash_controller+0xfe041894>
   5290c:	800b883a 	mov	r5,r16
   52910:	9009883a 	mov	r4,r18
   52914:	004ba940 	call	4ba94 <__swsetup_r>
   52918:	103ffa1e 	bne	r2,zero,52904 <__alt_mem_epcs_flash_controller+0xfe041904>
   5291c:	8100030b 	ldhu	r4,12(r16)
   52920:	80c00417 	ldw	r3,16(r16)
   52924:	003fc506 	br	5283c <__alt_mem_epcs_flash_controller+0xfe04183c>
   52928:	004dbe80 	call	4dbe8 <__sinit>
   5292c:	003fbc06 	br	52820 <__alt_mem_epcs_flash_controller+0xfe041820>

00052930 <__swbuf>:
   52930:	008001b4 	movhi	r2,6
   52934:	10be3804 	addi	r2,r2,-1824
   52938:	280d883a 	mov	r6,r5
   5293c:	200b883a 	mov	r5,r4
   52940:	11000017 	ldw	r4,0(r2)
   52944:	00527f01 	jmpi	527f0 <__swbuf_r>

00052948 <_write_r>:
   52948:	defffd04 	addi	sp,sp,-12
   5294c:	2805883a 	mov	r2,r5
   52950:	dc000015 	stw	r16,0(sp)
   52954:	040001b4 	movhi	r16,6
   52958:	dc400115 	stw	r17,4(sp)
   5295c:	300b883a 	mov	r5,r6
   52960:	84069c04 	addi	r16,r16,6768
   52964:	2023883a 	mov	r17,r4
   52968:	380d883a 	mov	r6,r7
   5296c:	1009883a 	mov	r4,r2
   52970:	dfc00215 	stw	ra,8(sp)
   52974:	80000015 	stw	zero,0(r16)
   52978:	0054d7c0 	call	54d7c <write>
   5297c:	00ffffc4 	movi	r3,-1
   52980:	10c00526 	beq	r2,r3,52998 <_write_r+0x50>
   52984:	dfc00217 	ldw	ra,8(sp)
   52988:	dc400117 	ldw	r17,4(sp)
   5298c:	dc000017 	ldw	r16,0(sp)
   52990:	dec00304 	addi	sp,sp,12
   52994:	f800283a 	ret
   52998:	80c00017 	ldw	r3,0(r16)
   5299c:	183ff926 	beq	r3,zero,52984 <__alt_mem_epcs_flash_controller+0xfe041984>
   529a0:	88c00015 	stw	r3,0(r17)
   529a4:	003ff706 	br	52984 <__alt_mem_epcs_flash_controller+0xfe041984>

000529a8 <_close_r>:
   529a8:	defffd04 	addi	sp,sp,-12
   529ac:	dc000015 	stw	r16,0(sp)
   529b0:	040001b4 	movhi	r16,6
   529b4:	dc400115 	stw	r17,4(sp)
   529b8:	84069c04 	addi	r16,r16,6768
   529bc:	2023883a 	mov	r17,r4
   529c0:	2809883a 	mov	r4,r5
   529c4:	dfc00215 	stw	ra,8(sp)
   529c8:	80000015 	stw	zero,0(r16)
   529cc:	0053cfc0 	call	53cfc <close>
   529d0:	00ffffc4 	movi	r3,-1
   529d4:	10c00526 	beq	r2,r3,529ec <_close_r+0x44>
   529d8:	dfc00217 	ldw	ra,8(sp)
   529dc:	dc400117 	ldw	r17,4(sp)
   529e0:	dc000017 	ldw	r16,0(sp)
   529e4:	dec00304 	addi	sp,sp,12
   529e8:	f800283a 	ret
   529ec:	80c00017 	ldw	r3,0(r16)
   529f0:	183ff926 	beq	r3,zero,529d8 <__alt_mem_epcs_flash_controller+0xfe0419d8>
   529f4:	88c00015 	stw	r3,0(r17)
   529f8:	003ff706 	br	529d8 <__alt_mem_epcs_flash_controller+0xfe0419d8>

000529fc <_fclose_r>:
   529fc:	28003926 	beq	r5,zero,52ae4 <_fclose_r+0xe8>
   52a00:	defffc04 	addi	sp,sp,-16
   52a04:	dc400115 	stw	r17,4(sp)
   52a08:	dc000015 	stw	r16,0(sp)
   52a0c:	dfc00315 	stw	ra,12(sp)
   52a10:	dc800215 	stw	r18,8(sp)
   52a14:	2023883a 	mov	r17,r4
   52a18:	2821883a 	mov	r16,r5
   52a1c:	20000226 	beq	r4,zero,52a28 <_fclose_r+0x2c>
   52a20:	20800e17 	ldw	r2,56(r4)
   52a24:	10002726 	beq	r2,zero,52ac4 <_fclose_r+0xc8>
   52a28:	8080030f 	ldh	r2,12(r16)
   52a2c:	1000071e 	bne	r2,zero,52a4c <_fclose_r+0x50>
   52a30:	0005883a 	mov	r2,zero
   52a34:	dfc00317 	ldw	ra,12(sp)
   52a38:	dc800217 	ldw	r18,8(sp)
   52a3c:	dc400117 	ldw	r17,4(sp)
   52a40:	dc000017 	ldw	r16,0(sp)
   52a44:	dec00404 	addi	sp,sp,16
   52a48:	f800283a 	ret
   52a4c:	800b883a 	mov	r5,r16
   52a50:	8809883a 	mov	r4,r17
   52a54:	004d5f00 	call	4d5f0 <__sflush_r>
   52a58:	1025883a 	mov	r18,r2
   52a5c:	80800b17 	ldw	r2,44(r16)
   52a60:	10000426 	beq	r2,zero,52a74 <_fclose_r+0x78>
   52a64:	81400717 	ldw	r5,28(r16)
   52a68:	8809883a 	mov	r4,r17
   52a6c:	103ee83a 	callr	r2
   52a70:	10001616 	blt	r2,zero,52acc <_fclose_r+0xd0>
   52a74:	8080030b 	ldhu	r2,12(r16)
   52a78:	1080200c 	andi	r2,r2,128
   52a7c:	1000151e 	bne	r2,zero,52ad4 <_fclose_r+0xd8>
   52a80:	81400c17 	ldw	r5,48(r16)
   52a84:	28000526 	beq	r5,zero,52a9c <_fclose_r+0xa0>
   52a88:	80801004 	addi	r2,r16,64
   52a8c:	28800226 	beq	r5,r2,52a98 <_fclose_r+0x9c>
   52a90:	8809883a 	mov	r4,r17
   52a94:	004dd5c0 	call	4dd5c <_free_r>
   52a98:	80000c15 	stw	zero,48(r16)
   52a9c:	81401117 	ldw	r5,68(r16)
   52aa0:	28000326 	beq	r5,zero,52ab0 <_fclose_r+0xb4>
   52aa4:	8809883a 	mov	r4,r17
   52aa8:	004dd5c0 	call	4dd5c <_free_r>
   52aac:	80001115 	stw	zero,68(r16)
   52ab0:	004dbf80 	call	4dbf8 <__sfp_lock_acquire>
   52ab4:	8000030d 	sth	zero,12(r16)
   52ab8:	004dbfc0 	call	4dbfc <__sfp_lock_release>
   52abc:	9005883a 	mov	r2,r18
   52ac0:	003fdc06 	br	52a34 <__alt_mem_epcs_flash_controller+0xfe041a34>
   52ac4:	004dbe80 	call	4dbe8 <__sinit>
   52ac8:	003fd706 	br	52a28 <__alt_mem_epcs_flash_controller+0xfe041a28>
   52acc:	04bfffc4 	movi	r18,-1
   52ad0:	003fe806 	br	52a74 <__alt_mem_epcs_flash_controller+0xfe041a74>
   52ad4:	81400417 	ldw	r5,16(r16)
   52ad8:	8809883a 	mov	r4,r17
   52adc:	004dd5c0 	call	4dd5c <_free_r>
   52ae0:	003fe706 	br	52a80 <__alt_mem_epcs_flash_controller+0xfe041a80>
   52ae4:	0005883a 	mov	r2,zero
   52ae8:	f800283a 	ret

00052aec <fclose>:
   52aec:	008001b4 	movhi	r2,6
   52af0:	10be3804 	addi	r2,r2,-1824
   52af4:	200b883a 	mov	r5,r4
   52af8:	11000017 	ldw	r4,0(r2)
   52afc:	00529fc1 	jmpi	529fc <_fclose_r>

00052b00 <__fputwc>:
   52b00:	defff804 	addi	sp,sp,-32
   52b04:	dcc00415 	stw	r19,16(sp)
   52b08:	dc800315 	stw	r18,12(sp)
   52b0c:	dc000115 	stw	r16,4(sp)
   52b10:	dfc00715 	stw	ra,28(sp)
   52b14:	dd400615 	stw	r21,24(sp)
   52b18:	dd000515 	stw	r20,20(sp)
   52b1c:	dc400215 	stw	r17,8(sp)
   52b20:	2027883a 	mov	r19,r4
   52b24:	2825883a 	mov	r18,r5
   52b28:	3021883a 	mov	r16,r6
   52b2c:	004e7940 	call	4e794 <__locale_mb_cur_max>
   52b30:	00c00044 	movi	r3,1
   52b34:	10c03e26 	beq	r2,r3,52c30 <__fputwc+0x130>
   52b38:	81c01704 	addi	r7,r16,92
   52b3c:	900d883a 	mov	r6,r18
   52b40:	d80b883a 	mov	r5,sp
   52b44:	9809883a 	mov	r4,r19
   52b48:	0052e780 	call	52e78 <_wcrtomb_r>
   52b4c:	1029883a 	mov	r20,r2
   52b50:	00bfffc4 	movi	r2,-1
   52b54:	a0802026 	beq	r20,r2,52bd8 <__fputwc+0xd8>
   52b58:	d9400003 	ldbu	r5,0(sp)
   52b5c:	a0001c26 	beq	r20,zero,52bd0 <__fputwc+0xd0>
   52b60:	0023883a 	mov	r17,zero
   52b64:	05400284 	movi	r21,10
   52b68:	00000906 	br	52b90 <__fputwc+0x90>
   52b6c:	80800017 	ldw	r2,0(r16)
   52b70:	11400005 	stb	r5,0(r2)
   52b74:	80c00017 	ldw	r3,0(r16)
   52b78:	18c00044 	addi	r3,r3,1
   52b7c:	80c00015 	stw	r3,0(r16)
   52b80:	8c400044 	addi	r17,r17,1
   52b84:	dc45883a 	add	r2,sp,r17
   52b88:	8d00112e 	bgeu	r17,r20,52bd0 <__fputwc+0xd0>
   52b8c:	11400003 	ldbu	r5,0(r2)
   52b90:	80c00217 	ldw	r3,8(r16)
   52b94:	18ffffc4 	addi	r3,r3,-1
   52b98:	80c00215 	stw	r3,8(r16)
   52b9c:	183ff30e 	bge	r3,zero,52b6c <__alt_mem_epcs_flash_controller+0xfe041b6c>
   52ba0:	80800617 	ldw	r2,24(r16)
   52ba4:	18801916 	blt	r3,r2,52c0c <__fputwc+0x10c>
   52ba8:	80800017 	ldw	r2,0(r16)
   52bac:	11400005 	stb	r5,0(r2)
   52bb0:	80800017 	ldw	r2,0(r16)
   52bb4:	10c00003 	ldbu	r3,0(r2)
   52bb8:	10800044 	addi	r2,r2,1
   52bbc:	1d402326 	beq	r3,r21,52c4c <__fputwc+0x14c>
   52bc0:	80800015 	stw	r2,0(r16)
   52bc4:	8c400044 	addi	r17,r17,1
   52bc8:	dc45883a 	add	r2,sp,r17
   52bcc:	8d3fef36 	bltu	r17,r20,52b8c <__alt_mem_epcs_flash_controller+0xfe041b8c>
   52bd0:	9005883a 	mov	r2,r18
   52bd4:	00000406 	br	52be8 <__fputwc+0xe8>
   52bd8:	80c0030b 	ldhu	r3,12(r16)
   52bdc:	a005883a 	mov	r2,r20
   52be0:	18c01014 	ori	r3,r3,64
   52be4:	80c0030d 	sth	r3,12(r16)
   52be8:	dfc00717 	ldw	ra,28(sp)
   52bec:	dd400617 	ldw	r21,24(sp)
   52bf0:	dd000517 	ldw	r20,20(sp)
   52bf4:	dcc00417 	ldw	r19,16(sp)
   52bf8:	dc800317 	ldw	r18,12(sp)
   52bfc:	dc400217 	ldw	r17,8(sp)
   52c00:	dc000117 	ldw	r16,4(sp)
   52c04:	dec00804 	addi	sp,sp,32
   52c08:	f800283a 	ret
   52c0c:	800d883a 	mov	r6,r16
   52c10:	29403fcc 	andi	r5,r5,255
   52c14:	9809883a 	mov	r4,r19
   52c18:	00527f00 	call	527f0 <__swbuf_r>
   52c1c:	10bfffe0 	cmpeqi	r2,r2,-1
   52c20:	10803fcc 	andi	r2,r2,255
   52c24:	103fd626 	beq	r2,zero,52b80 <__alt_mem_epcs_flash_controller+0xfe041b80>
   52c28:	00bfffc4 	movi	r2,-1
   52c2c:	003fee06 	br	52be8 <__alt_mem_epcs_flash_controller+0xfe041be8>
   52c30:	90ffffc4 	addi	r3,r18,-1
   52c34:	01003f84 	movi	r4,254
   52c38:	20ffbf36 	bltu	r4,r3,52b38 <__alt_mem_epcs_flash_controller+0xfe041b38>
   52c3c:	900b883a 	mov	r5,r18
   52c40:	dc800005 	stb	r18,0(sp)
   52c44:	1029883a 	mov	r20,r2
   52c48:	003fc506 	br	52b60 <__alt_mem_epcs_flash_controller+0xfe041b60>
   52c4c:	800d883a 	mov	r6,r16
   52c50:	a80b883a 	mov	r5,r21
   52c54:	9809883a 	mov	r4,r19
   52c58:	00527f00 	call	527f0 <__swbuf_r>
   52c5c:	10bfffe0 	cmpeqi	r2,r2,-1
   52c60:	003fef06 	br	52c20 <__alt_mem_epcs_flash_controller+0xfe041c20>

00052c64 <_fputwc_r>:
   52c64:	3080030b 	ldhu	r2,12(r6)
   52c68:	10c8000c 	andi	r3,r2,8192
   52c6c:	1800051e 	bne	r3,zero,52c84 <_fputwc_r+0x20>
   52c70:	30c01917 	ldw	r3,100(r6)
   52c74:	10880014 	ori	r2,r2,8192
   52c78:	3080030d 	sth	r2,12(r6)
   52c7c:	18880014 	ori	r2,r3,8192
   52c80:	30801915 	stw	r2,100(r6)
   52c84:	0052b001 	jmpi	52b00 <__fputwc>

00052c88 <fputwc>:
   52c88:	008001b4 	movhi	r2,6
   52c8c:	defffc04 	addi	sp,sp,-16
   52c90:	10be3804 	addi	r2,r2,-1824
   52c94:	dc000115 	stw	r16,4(sp)
   52c98:	14000017 	ldw	r16,0(r2)
   52c9c:	dc400215 	stw	r17,8(sp)
   52ca0:	dfc00315 	stw	ra,12(sp)
   52ca4:	2023883a 	mov	r17,r4
   52ca8:	80000226 	beq	r16,zero,52cb4 <fputwc+0x2c>
   52cac:	80800e17 	ldw	r2,56(r16)
   52cb0:	10001026 	beq	r2,zero,52cf4 <fputwc+0x6c>
   52cb4:	2880030b 	ldhu	r2,12(r5)
   52cb8:	10c8000c 	andi	r3,r2,8192
   52cbc:	1800051e 	bne	r3,zero,52cd4 <fputwc+0x4c>
   52cc0:	28c01917 	ldw	r3,100(r5)
   52cc4:	10880014 	ori	r2,r2,8192
   52cc8:	2880030d 	sth	r2,12(r5)
   52ccc:	18880014 	ori	r2,r3,8192
   52cd0:	28801915 	stw	r2,100(r5)
   52cd4:	280d883a 	mov	r6,r5
   52cd8:	8009883a 	mov	r4,r16
   52cdc:	880b883a 	mov	r5,r17
   52ce0:	dfc00317 	ldw	ra,12(sp)
   52ce4:	dc400217 	ldw	r17,8(sp)
   52ce8:	dc000117 	ldw	r16,4(sp)
   52cec:	dec00404 	addi	sp,sp,16
   52cf0:	0052b001 	jmpi	52b00 <__fputwc>
   52cf4:	8009883a 	mov	r4,r16
   52cf8:	d9400015 	stw	r5,0(sp)
   52cfc:	004dbe80 	call	4dbe8 <__sinit>
   52d00:	d9400017 	ldw	r5,0(sp)
   52d04:	003feb06 	br	52cb4 <__alt_mem_epcs_flash_controller+0xfe041cb4>

00052d08 <_fstat_r>:
   52d08:	defffd04 	addi	sp,sp,-12
   52d0c:	2805883a 	mov	r2,r5
   52d10:	dc000015 	stw	r16,0(sp)
   52d14:	040001b4 	movhi	r16,6
   52d18:	dc400115 	stw	r17,4(sp)
   52d1c:	84069c04 	addi	r16,r16,6768
   52d20:	2023883a 	mov	r17,r4
   52d24:	300b883a 	mov	r5,r6
   52d28:	1009883a 	mov	r4,r2
   52d2c:	dfc00215 	stw	ra,8(sp)
   52d30:	80000015 	stw	zero,0(r16)
   52d34:	0053eb00 	call	53eb0 <fstat>
   52d38:	00ffffc4 	movi	r3,-1
   52d3c:	10c00526 	beq	r2,r3,52d54 <_fstat_r+0x4c>
   52d40:	dfc00217 	ldw	ra,8(sp)
   52d44:	dc400117 	ldw	r17,4(sp)
   52d48:	dc000017 	ldw	r16,0(sp)
   52d4c:	dec00304 	addi	sp,sp,12
   52d50:	f800283a 	ret
   52d54:	80c00017 	ldw	r3,0(r16)
   52d58:	183ff926 	beq	r3,zero,52d40 <__alt_mem_epcs_flash_controller+0xfe041d40>
   52d5c:	88c00015 	stw	r3,0(r17)
   52d60:	003ff706 	br	52d40 <__alt_mem_epcs_flash_controller+0xfe041d40>

00052d64 <_isatty_r>:
   52d64:	defffd04 	addi	sp,sp,-12
   52d68:	dc000015 	stw	r16,0(sp)
   52d6c:	040001b4 	movhi	r16,6
   52d70:	dc400115 	stw	r17,4(sp)
   52d74:	84069c04 	addi	r16,r16,6768
   52d78:	2023883a 	mov	r17,r4
   52d7c:	2809883a 	mov	r4,r5
   52d80:	dfc00215 	stw	ra,8(sp)
   52d84:	80000015 	stw	zero,0(r16)
   52d88:	00544500 	call	54450 <isatty>
   52d8c:	00ffffc4 	movi	r3,-1
   52d90:	10c00526 	beq	r2,r3,52da8 <_isatty_r+0x44>
   52d94:	dfc00217 	ldw	ra,8(sp)
   52d98:	dc400117 	ldw	r17,4(sp)
   52d9c:	dc000017 	ldw	r16,0(sp)
   52da0:	dec00304 	addi	sp,sp,12
   52da4:	f800283a 	ret
   52da8:	80c00017 	ldw	r3,0(r16)
   52dac:	183ff926 	beq	r3,zero,52d94 <__alt_mem_epcs_flash_controller+0xfe041d94>
   52db0:	88c00015 	stw	r3,0(r17)
   52db4:	003ff706 	br	52d94 <__alt_mem_epcs_flash_controller+0xfe041d94>

00052db8 <_lseek_r>:
   52db8:	defffd04 	addi	sp,sp,-12
   52dbc:	2805883a 	mov	r2,r5
   52dc0:	dc000015 	stw	r16,0(sp)
   52dc4:	040001b4 	movhi	r16,6
   52dc8:	dc400115 	stw	r17,4(sp)
   52dcc:	300b883a 	mov	r5,r6
   52dd0:	84069c04 	addi	r16,r16,6768
   52dd4:	2023883a 	mov	r17,r4
   52dd8:	380d883a 	mov	r6,r7
   52ddc:	1009883a 	mov	r4,r2
   52de0:	dfc00215 	stw	ra,8(sp)
   52de4:	80000015 	stw	zero,0(r16)
   52de8:	00547880 	call	54788 <lseek>
   52dec:	00ffffc4 	movi	r3,-1
   52df0:	10c00526 	beq	r2,r3,52e08 <_lseek_r+0x50>
   52df4:	dfc00217 	ldw	ra,8(sp)
   52df8:	dc400117 	ldw	r17,4(sp)
   52dfc:	dc000017 	ldw	r16,0(sp)
   52e00:	dec00304 	addi	sp,sp,12
   52e04:	f800283a 	ret
   52e08:	80c00017 	ldw	r3,0(r16)
   52e0c:	183ff926 	beq	r3,zero,52df4 <__alt_mem_epcs_flash_controller+0xfe041df4>
   52e10:	88c00015 	stw	r3,0(r17)
   52e14:	003ff706 	br	52df4 <__alt_mem_epcs_flash_controller+0xfe041df4>

00052e18 <_read_r>:
   52e18:	defffd04 	addi	sp,sp,-12
   52e1c:	2805883a 	mov	r2,r5
   52e20:	dc000015 	stw	r16,0(sp)
   52e24:	040001b4 	movhi	r16,6
   52e28:	dc400115 	stw	r17,4(sp)
   52e2c:	300b883a 	mov	r5,r6
   52e30:	84069c04 	addi	r16,r16,6768
   52e34:	2023883a 	mov	r17,r4
   52e38:	380d883a 	mov	r6,r7
   52e3c:	1009883a 	mov	r4,r2
   52e40:	dfc00215 	stw	ra,8(sp)
   52e44:	80000015 	stw	zero,0(r16)
   52e48:	005495c0 	call	5495c <read>
   52e4c:	00ffffc4 	movi	r3,-1
   52e50:	10c00526 	beq	r2,r3,52e68 <_read_r+0x50>
   52e54:	dfc00217 	ldw	ra,8(sp)
   52e58:	dc400117 	ldw	r17,4(sp)
   52e5c:	dc000017 	ldw	r16,0(sp)
   52e60:	dec00304 	addi	sp,sp,12
   52e64:	f800283a 	ret
   52e68:	80c00017 	ldw	r3,0(r16)
   52e6c:	183ff926 	beq	r3,zero,52e54 <__alt_mem_epcs_flash_controller+0xfe041e54>
   52e70:	88c00015 	stw	r3,0(r17)
   52e74:	003ff706 	br	52e54 <__alt_mem_epcs_flash_controller+0xfe041e54>

00052e78 <_wcrtomb_r>:
   52e78:	defff604 	addi	sp,sp,-40
   52e7c:	008001b4 	movhi	r2,6
   52e80:	dc800815 	stw	r18,32(sp)
   52e84:	dc400715 	stw	r17,28(sp)
   52e88:	dc000615 	stw	r16,24(sp)
   52e8c:	10be3d04 	addi	r2,r2,-1804
   52e90:	dfc00915 	stw	ra,36(sp)
   52e94:	2021883a 	mov	r16,r4
   52e98:	3823883a 	mov	r17,r7
   52e9c:	14800017 	ldw	r18,0(r2)
   52ea0:	28001426 	beq	r5,zero,52ef4 <_wcrtomb_r+0x7c>
   52ea4:	d9400415 	stw	r5,16(sp)
   52ea8:	d9800515 	stw	r6,20(sp)
   52eac:	004e7880 	call	4e788 <__locale_charset>
   52eb0:	d9800517 	ldw	r6,20(sp)
   52eb4:	d9400417 	ldw	r5,16(sp)
   52eb8:	100f883a 	mov	r7,r2
   52ebc:	dc400015 	stw	r17,0(sp)
   52ec0:	8009883a 	mov	r4,r16
   52ec4:	903ee83a 	callr	r18
   52ec8:	00ffffc4 	movi	r3,-1
   52ecc:	10c0031e 	bne	r2,r3,52edc <_wcrtomb_r+0x64>
   52ed0:	88000015 	stw	zero,0(r17)
   52ed4:	00c02284 	movi	r3,138
   52ed8:	80c00015 	stw	r3,0(r16)
   52edc:	dfc00917 	ldw	ra,36(sp)
   52ee0:	dc800817 	ldw	r18,32(sp)
   52ee4:	dc400717 	ldw	r17,28(sp)
   52ee8:	dc000617 	ldw	r16,24(sp)
   52eec:	dec00a04 	addi	sp,sp,40
   52ef0:	f800283a 	ret
   52ef4:	004e7880 	call	4e788 <__locale_charset>
   52ef8:	100f883a 	mov	r7,r2
   52efc:	dc400015 	stw	r17,0(sp)
   52f00:	000d883a 	mov	r6,zero
   52f04:	d9400104 	addi	r5,sp,4
   52f08:	8009883a 	mov	r4,r16
   52f0c:	903ee83a 	callr	r18
   52f10:	003fed06 	br	52ec8 <__alt_mem_epcs_flash_controller+0xfe041ec8>

00052f14 <wcrtomb>:
   52f14:	defff604 	addi	sp,sp,-40
   52f18:	008001b4 	movhi	r2,6
   52f1c:	dc800615 	stw	r18,24(sp)
   52f20:	dc400515 	stw	r17,20(sp)
   52f24:	10be3804 	addi	r2,r2,-1824
   52f28:	dfc00915 	stw	ra,36(sp)
   52f2c:	dd000815 	stw	r20,32(sp)
   52f30:	dcc00715 	stw	r19,28(sp)
   52f34:	dc000415 	stw	r16,16(sp)
   52f38:	3025883a 	mov	r18,r6
   52f3c:	14400017 	ldw	r17,0(r2)
   52f40:	20001926 	beq	r4,zero,52fa8 <wcrtomb+0x94>
   52f44:	008001b4 	movhi	r2,6
   52f48:	10be3d04 	addi	r2,r2,-1804
   52f4c:	15000017 	ldw	r20,0(r2)
   52f50:	2021883a 	mov	r16,r4
   52f54:	2827883a 	mov	r19,r5
   52f58:	004e7880 	call	4e788 <__locale_charset>
   52f5c:	100f883a 	mov	r7,r2
   52f60:	dc800015 	stw	r18,0(sp)
   52f64:	980d883a 	mov	r6,r19
   52f68:	800b883a 	mov	r5,r16
   52f6c:	8809883a 	mov	r4,r17
   52f70:	a03ee83a 	callr	r20
   52f74:	00ffffc4 	movi	r3,-1
   52f78:	10c0031e 	bne	r2,r3,52f88 <wcrtomb+0x74>
   52f7c:	90000015 	stw	zero,0(r18)
   52f80:	00c02284 	movi	r3,138
   52f84:	88c00015 	stw	r3,0(r17)
   52f88:	dfc00917 	ldw	ra,36(sp)
   52f8c:	dd000817 	ldw	r20,32(sp)
   52f90:	dcc00717 	ldw	r19,28(sp)
   52f94:	dc800617 	ldw	r18,24(sp)
   52f98:	dc400517 	ldw	r17,20(sp)
   52f9c:	dc000417 	ldw	r16,16(sp)
   52fa0:	dec00a04 	addi	sp,sp,40
   52fa4:	f800283a 	ret
   52fa8:	008001b4 	movhi	r2,6
   52fac:	10be3d04 	addi	r2,r2,-1804
   52fb0:	14000017 	ldw	r16,0(r2)
   52fb4:	004e7880 	call	4e788 <__locale_charset>
   52fb8:	100f883a 	mov	r7,r2
   52fbc:	dc800015 	stw	r18,0(sp)
   52fc0:	000d883a 	mov	r6,zero
   52fc4:	d9400104 	addi	r5,sp,4
   52fc8:	8809883a 	mov	r4,r17
   52fcc:	803ee83a 	callr	r16
   52fd0:	003fe806 	br	52f74 <__alt_mem_epcs_flash_controller+0xfe041f74>

00052fd4 <__ascii_wctomb>:
   52fd4:	28000526 	beq	r5,zero,52fec <__ascii_wctomb+0x18>
   52fd8:	00803fc4 	movi	r2,255
   52fdc:	11800536 	bltu	r2,r6,52ff4 <__ascii_wctomb+0x20>
   52fe0:	29800005 	stb	r6,0(r5)
   52fe4:	00800044 	movi	r2,1
   52fe8:	f800283a 	ret
   52fec:	0005883a 	mov	r2,zero
   52ff0:	f800283a 	ret
   52ff4:	00802284 	movi	r2,138
   52ff8:	20800015 	stw	r2,0(r4)
   52ffc:	00bfffc4 	movi	r2,-1
   53000:	f800283a 	ret

00053004 <_wctomb_r>:
   53004:	008001b4 	movhi	r2,6
   53008:	defff904 	addi	sp,sp,-28
   5300c:	10be3d04 	addi	r2,r2,-1804
   53010:	dfc00615 	stw	ra,24(sp)
   53014:	dc400515 	stw	r17,20(sp)
   53018:	dc000415 	stw	r16,16(sp)
   5301c:	3823883a 	mov	r17,r7
   53020:	14000017 	ldw	r16,0(r2)
   53024:	d9000115 	stw	r4,4(sp)
   53028:	d9400215 	stw	r5,8(sp)
   5302c:	d9800315 	stw	r6,12(sp)
   53030:	004e7880 	call	4e788 <__locale_charset>
   53034:	d9800317 	ldw	r6,12(sp)
   53038:	d9400217 	ldw	r5,8(sp)
   5303c:	d9000117 	ldw	r4,4(sp)
   53040:	100f883a 	mov	r7,r2
   53044:	dc400015 	stw	r17,0(sp)
   53048:	803ee83a 	callr	r16
   5304c:	dfc00617 	ldw	ra,24(sp)
   53050:	dc400517 	ldw	r17,20(sp)
   53054:	dc000417 	ldw	r16,16(sp)
   53058:	dec00704 	addi	sp,sp,28
   5305c:	f800283a 	ret

00053060 <__udivdi3>:
   53060:	defff504 	addi	sp,sp,-44
   53064:	dcc00415 	stw	r19,16(sp)
   53068:	dc000115 	stw	r16,4(sp)
   5306c:	dfc00a15 	stw	ra,40(sp)
   53070:	df000915 	stw	fp,36(sp)
   53074:	ddc00815 	stw	r23,32(sp)
   53078:	dd800715 	stw	r22,28(sp)
   5307c:	dd400615 	stw	r21,24(sp)
   53080:	dd000515 	stw	r20,20(sp)
   53084:	dc800315 	stw	r18,12(sp)
   53088:	dc400215 	stw	r17,8(sp)
   5308c:	2027883a 	mov	r19,r4
   53090:	2821883a 	mov	r16,r5
   53094:	3800411e 	bne	r7,zero,5319c <__udivdi3+0x13c>
   53098:	3023883a 	mov	r17,r6
   5309c:	2025883a 	mov	r18,r4
   530a0:	2980522e 	bgeu	r5,r6,531ec <__udivdi3+0x18c>
   530a4:	00bfffd4 	movui	r2,65535
   530a8:	282d883a 	mov	r22,r5
   530ac:	1180a836 	bltu	r2,r6,53350 <__udivdi3+0x2f0>
   530b0:	00803fc4 	movi	r2,255
   530b4:	1185803a 	cmpltu	r2,r2,r6
   530b8:	100490fa 	slli	r2,r2,3
   530bc:	3086d83a 	srl	r3,r6,r2
   530c0:	010001b4 	movhi	r4,6
   530c4:	21347684 	addi	r4,r4,-11814
   530c8:	20c7883a 	add	r3,r4,r3
   530cc:	18c00003 	ldbu	r3,0(r3)
   530d0:	1885883a 	add	r2,r3,r2
   530d4:	00c00804 	movi	r3,32
   530d8:	1887c83a 	sub	r3,r3,r2
   530dc:	18000526 	beq	r3,zero,530f4 <__udivdi3+0x94>
   530e0:	80e0983a 	sll	r16,r16,r3
   530e4:	9884d83a 	srl	r2,r19,r2
   530e8:	30e2983a 	sll	r17,r6,r3
   530ec:	98e4983a 	sll	r18,r19,r3
   530f0:	142cb03a 	or	r22,r2,r16
   530f4:	882ad43a 	srli	r21,r17,16
   530f8:	b009883a 	mov	r4,r22
   530fc:	8d3fffcc 	andi	r20,r17,65535
   53100:	a80b883a 	mov	r5,r21
   53104:	0042afc0 	call	42afc <__umodsi3>
   53108:	b009883a 	mov	r4,r22
   5310c:	a80b883a 	mov	r5,r21
   53110:	1027883a 	mov	r19,r2
   53114:	0042a980 	call	42a98 <__udivsi3>
   53118:	102d883a 	mov	r22,r2
   5311c:	9826943a 	slli	r19,r19,16
   53120:	9004d43a 	srli	r2,r18,16
   53124:	a5a1383a 	mul	r16,r20,r22
   53128:	14c4b03a 	or	r2,r2,r19
   5312c:	1400052e 	bgeu	r2,r16,53144 <__udivdi3+0xe4>
   53130:	1445883a 	add	r2,r2,r17
   53134:	b0ffffc4 	addi	r3,r22,-1
   53138:	14400136 	bltu	r2,r17,53140 <__udivdi3+0xe0>
   5313c:	14012336 	bltu	r2,r16,535cc <__udivdi3+0x56c>
   53140:	182d883a 	mov	r22,r3
   53144:	1421c83a 	sub	r16,r2,r16
   53148:	a80b883a 	mov	r5,r21
   5314c:	8009883a 	mov	r4,r16
   53150:	0042afc0 	call	42afc <__umodsi3>
   53154:	1027883a 	mov	r19,r2
   53158:	a80b883a 	mov	r5,r21
   5315c:	8009883a 	mov	r4,r16
   53160:	0042a980 	call	42a98 <__udivsi3>
   53164:	9826943a 	slli	r19,r19,16
   53168:	a0a9383a 	mul	r20,r20,r2
   5316c:	94bfffcc 	andi	r18,r18,65535
   53170:	94e4b03a 	or	r18,r18,r19
   53174:	9500052e 	bgeu	r18,r20,5318c <__udivdi3+0x12c>
   53178:	8ca5883a 	add	r18,r17,r18
   5317c:	10ffffc4 	addi	r3,r2,-1
   53180:	9440f136 	bltu	r18,r17,53548 <__udivdi3+0x4e8>
   53184:	9500f02e 	bgeu	r18,r20,53548 <__udivdi3+0x4e8>
   53188:	10bfff84 	addi	r2,r2,-2
   5318c:	b00c943a 	slli	r6,r22,16
   53190:	0007883a 	mov	r3,zero
   53194:	3084b03a 	or	r2,r6,r2
   53198:	00005906 	br	53300 <__udivdi3+0x2a0>
   5319c:	29c05636 	bltu	r5,r7,532f8 <__udivdi3+0x298>
   531a0:	00bfffd4 	movui	r2,65535
   531a4:	11c0622e 	bgeu	r2,r7,53330 <__udivdi3+0x2d0>
   531a8:	00804034 	movhi	r2,256
   531ac:	10bfffc4 	addi	r2,r2,-1
   531b0:	11c0ee36 	bltu	r2,r7,5356c <__udivdi3+0x50c>
   531b4:	00800404 	movi	r2,16
   531b8:	3886d83a 	srl	r3,r7,r2
   531bc:	010001b4 	movhi	r4,6
   531c0:	21347684 	addi	r4,r4,-11814
   531c4:	20c7883a 	add	r3,r4,r3
   531c8:	18c00003 	ldbu	r3,0(r3)
   531cc:	05400804 	movi	r21,32
   531d0:	1885883a 	add	r2,r3,r2
   531d4:	a8abc83a 	sub	r21,r21,r2
   531d8:	a800621e 	bne	r21,zero,53364 <__udivdi3+0x304>
   531dc:	3c00e936 	bltu	r7,r16,53584 <__udivdi3+0x524>
   531e0:	9985403a 	cmpgeu	r2,r19,r6
   531e4:	0007883a 	mov	r3,zero
   531e8:	00004506 	br	53300 <__udivdi3+0x2a0>
   531ec:	3000041e 	bne	r6,zero,53200 <__udivdi3+0x1a0>
   531f0:	000b883a 	mov	r5,zero
   531f4:	01000044 	movi	r4,1
   531f8:	0042a980 	call	42a98 <__udivsi3>
   531fc:	1023883a 	mov	r17,r2
   53200:	00bfffd4 	movui	r2,65535
   53204:	14404e2e 	bgeu	r2,r17,53340 <__udivdi3+0x2e0>
   53208:	00804034 	movhi	r2,256
   5320c:	10bfffc4 	addi	r2,r2,-1
   53210:	1440d836 	bltu	r2,r17,53574 <__udivdi3+0x514>
   53214:	00800404 	movi	r2,16
   53218:	8886d83a 	srl	r3,r17,r2
   5321c:	010001b4 	movhi	r4,6
   53220:	21347684 	addi	r4,r4,-11814
   53224:	20c7883a 	add	r3,r4,r3
   53228:	18c00003 	ldbu	r3,0(r3)
   5322c:	1885883a 	add	r2,r3,r2
   53230:	00c00804 	movi	r3,32
   53234:	1887c83a 	sub	r3,r3,r2
   53238:	18008f1e 	bne	r3,zero,53478 <__udivdi3+0x418>
   5323c:	882ad43a 	srli	r21,r17,16
   53240:	8461c83a 	sub	r16,r16,r17
   53244:	8d3fffcc 	andi	r20,r17,65535
   53248:	00c00044 	movi	r3,1
   5324c:	8009883a 	mov	r4,r16
   53250:	a80b883a 	mov	r5,r21
   53254:	d8c00015 	stw	r3,0(sp)
   53258:	0042afc0 	call	42afc <__umodsi3>
   5325c:	8009883a 	mov	r4,r16
   53260:	a80b883a 	mov	r5,r21
   53264:	1027883a 	mov	r19,r2
   53268:	0042a980 	call	42a98 <__udivsi3>
   5326c:	9826943a 	slli	r19,r19,16
   53270:	9008d43a 	srli	r4,r18,16
   53274:	1521383a 	mul	r16,r2,r20
   53278:	102d883a 	mov	r22,r2
   5327c:	24c8b03a 	or	r4,r4,r19
   53280:	d8c00017 	ldw	r3,0(sp)
   53284:	2400052e 	bgeu	r4,r16,5329c <__udivdi3+0x23c>
   53288:	2449883a 	add	r4,r4,r17
   5328c:	b0bfffc4 	addi	r2,r22,-1
   53290:	24400136 	bltu	r4,r17,53298 <__udivdi3+0x238>
   53294:	2400ca36 	bltu	r4,r16,535c0 <__udivdi3+0x560>
   53298:	102d883a 	mov	r22,r2
   5329c:	2421c83a 	sub	r16,r4,r16
   532a0:	a80b883a 	mov	r5,r21
   532a4:	8009883a 	mov	r4,r16
   532a8:	d8c00015 	stw	r3,0(sp)
   532ac:	0042afc0 	call	42afc <__umodsi3>
   532b0:	1027883a 	mov	r19,r2
   532b4:	a80b883a 	mov	r5,r21
   532b8:	8009883a 	mov	r4,r16
   532bc:	0042a980 	call	42a98 <__udivsi3>
   532c0:	9826943a 	slli	r19,r19,16
   532c4:	1529383a 	mul	r20,r2,r20
   532c8:	94bfffcc 	andi	r18,r18,65535
   532cc:	94e4b03a 	or	r18,r18,r19
   532d0:	d8c00017 	ldw	r3,0(sp)
   532d4:	9500052e 	bgeu	r18,r20,532ec <__udivdi3+0x28c>
   532d8:	8ca5883a 	add	r18,r17,r18
   532dc:	113fffc4 	addi	r4,r2,-1
   532e0:	94409736 	bltu	r18,r17,53540 <__udivdi3+0x4e0>
   532e4:	9500962e 	bgeu	r18,r20,53540 <__udivdi3+0x4e0>
   532e8:	10bfff84 	addi	r2,r2,-2
   532ec:	b00c943a 	slli	r6,r22,16
   532f0:	3084b03a 	or	r2,r6,r2
   532f4:	00000206 	br	53300 <__udivdi3+0x2a0>
   532f8:	0007883a 	mov	r3,zero
   532fc:	0005883a 	mov	r2,zero
   53300:	dfc00a17 	ldw	ra,40(sp)
   53304:	df000917 	ldw	fp,36(sp)
   53308:	ddc00817 	ldw	r23,32(sp)
   5330c:	dd800717 	ldw	r22,28(sp)
   53310:	dd400617 	ldw	r21,24(sp)
   53314:	dd000517 	ldw	r20,20(sp)
   53318:	dcc00417 	ldw	r19,16(sp)
   5331c:	dc800317 	ldw	r18,12(sp)
   53320:	dc400217 	ldw	r17,8(sp)
   53324:	dc000117 	ldw	r16,4(sp)
   53328:	dec00b04 	addi	sp,sp,44
   5332c:	f800283a 	ret
   53330:	00803fc4 	movi	r2,255
   53334:	11c5803a 	cmpltu	r2,r2,r7
   53338:	100490fa 	slli	r2,r2,3
   5333c:	003f9e06 	br	531b8 <__alt_mem_epcs_flash_controller+0xfe0421b8>
   53340:	00803fc4 	movi	r2,255
   53344:	1445803a 	cmpltu	r2,r2,r17
   53348:	100490fa 	slli	r2,r2,3
   5334c:	003fb206 	br	53218 <__alt_mem_epcs_flash_controller+0xfe042218>
   53350:	00804034 	movhi	r2,256
   53354:	10bfffc4 	addi	r2,r2,-1
   53358:	11808836 	bltu	r2,r6,5357c <__udivdi3+0x51c>
   5335c:	00800404 	movi	r2,16
   53360:	003f5606 	br	530bc <__alt_mem_epcs_flash_controller+0xfe0420bc>
   53364:	30aed83a 	srl	r23,r6,r2
   53368:	3d4e983a 	sll	r7,r7,r21
   5336c:	80acd83a 	srl	r22,r16,r2
   53370:	9884d83a 	srl	r2,r19,r2
   53374:	3deeb03a 	or	r23,r7,r23
   53378:	b824d43a 	srli	r18,r23,16
   5337c:	8560983a 	sll	r16,r16,r21
   53380:	b009883a 	mov	r4,r22
   53384:	900b883a 	mov	r5,r18
   53388:	3568983a 	sll	r20,r6,r21
   5338c:	1420b03a 	or	r16,r2,r16
   53390:	0042afc0 	call	42afc <__umodsi3>
   53394:	b009883a 	mov	r4,r22
   53398:	900b883a 	mov	r5,r18
   5339c:	1023883a 	mov	r17,r2
   533a0:	0042a980 	call	42a98 <__udivsi3>
   533a4:	8808943a 	slli	r4,r17,16
   533a8:	bf3fffcc 	andi	fp,r23,65535
   533ac:	8006d43a 	srli	r3,r16,16
   533b0:	e0a3383a 	mul	r17,fp,r2
   533b4:	100d883a 	mov	r6,r2
   533b8:	1906b03a 	or	r3,r3,r4
   533bc:	1c40042e 	bgeu	r3,r17,533d0 <__udivdi3+0x370>
   533c0:	1dc7883a 	add	r3,r3,r23
   533c4:	10bfffc4 	addi	r2,r2,-1
   533c8:	1dc0752e 	bgeu	r3,r23,535a0 <__udivdi3+0x540>
   533cc:	100d883a 	mov	r6,r2
   533d0:	1c63c83a 	sub	r17,r3,r17
   533d4:	900b883a 	mov	r5,r18
   533d8:	8809883a 	mov	r4,r17
   533dc:	d9800015 	stw	r6,0(sp)
   533e0:	0042afc0 	call	42afc <__umodsi3>
   533e4:	102d883a 	mov	r22,r2
   533e8:	8809883a 	mov	r4,r17
   533ec:	900b883a 	mov	r5,r18
   533f0:	0042a980 	call	42a98 <__udivsi3>
   533f4:	b02c943a 	slli	r22,r22,16
   533f8:	e089383a 	mul	r4,fp,r2
   533fc:	843fffcc 	andi	r16,r16,65535
   53400:	85a0b03a 	or	r16,r16,r22
   53404:	d9800017 	ldw	r6,0(sp)
   53408:	8100042e 	bgeu	r16,r4,5341c <__udivdi3+0x3bc>
   5340c:	85e1883a 	add	r16,r16,r23
   53410:	10ffffc4 	addi	r3,r2,-1
   53414:	85c05e2e 	bgeu	r16,r23,53590 <__udivdi3+0x530>
   53418:	1805883a 	mov	r2,r3
   5341c:	300c943a 	slli	r6,r6,16
   53420:	a17fffcc 	andi	r5,r20,65535
   53424:	a028d43a 	srli	r20,r20,16
   53428:	3084b03a 	or	r2,r6,r2
   5342c:	10ffffcc 	andi	r3,r2,65535
   53430:	100cd43a 	srli	r6,r2,16
   53434:	194f383a 	mul	r7,r3,r5
   53438:	1d07383a 	mul	r3,r3,r20
   5343c:	314b383a 	mul	r5,r6,r5
   53440:	3810d43a 	srli	r8,r7,16
   53444:	8121c83a 	sub	r16,r16,r4
   53448:	1947883a 	add	r3,r3,r5
   5344c:	40c7883a 	add	r3,r8,r3
   53450:	350d383a 	mul	r6,r6,r20
   53454:	1940022e 	bgeu	r3,r5,53460 <__udivdi3+0x400>
   53458:	01000074 	movhi	r4,1
   5345c:	310d883a 	add	r6,r6,r4
   53460:	1828d43a 	srli	r20,r3,16
   53464:	a18d883a 	add	r6,r20,r6
   53468:	81803e36 	bltu	r16,r6,53564 <__udivdi3+0x504>
   5346c:	81803826 	beq	r16,r6,53550 <__udivdi3+0x4f0>
   53470:	0007883a 	mov	r3,zero
   53474:	003fa206 	br	53300 <__alt_mem_epcs_flash_controller+0xfe042300>
   53478:	88e2983a 	sll	r17,r17,r3
   5347c:	80a8d83a 	srl	r20,r16,r2
   53480:	80e0983a 	sll	r16,r16,r3
   53484:	882ad43a 	srli	r21,r17,16
   53488:	9884d83a 	srl	r2,r19,r2
   5348c:	a009883a 	mov	r4,r20
   53490:	a80b883a 	mov	r5,r21
   53494:	142eb03a 	or	r23,r2,r16
   53498:	98e4983a 	sll	r18,r19,r3
   5349c:	0042afc0 	call	42afc <__umodsi3>
   534a0:	a009883a 	mov	r4,r20
   534a4:	a80b883a 	mov	r5,r21
   534a8:	1021883a 	mov	r16,r2
   534ac:	0042a980 	call	42a98 <__udivsi3>
   534b0:	1039883a 	mov	fp,r2
   534b4:	8d3fffcc 	andi	r20,r17,65535
   534b8:	8020943a 	slli	r16,r16,16
   534bc:	b804d43a 	srli	r2,r23,16
   534c0:	a72d383a 	mul	r22,r20,fp
   534c4:	1404b03a 	or	r2,r2,r16
   534c8:	1580062e 	bgeu	r2,r22,534e4 <__udivdi3+0x484>
   534cc:	1445883a 	add	r2,r2,r17
   534d0:	e0ffffc4 	addi	r3,fp,-1
   534d4:	14403836 	bltu	r2,r17,535b8 <__udivdi3+0x558>
   534d8:	1580372e 	bgeu	r2,r22,535b8 <__udivdi3+0x558>
   534dc:	e73fff84 	addi	fp,fp,-2
   534e0:	1445883a 	add	r2,r2,r17
   534e4:	15adc83a 	sub	r22,r2,r22
   534e8:	a80b883a 	mov	r5,r21
   534ec:	b009883a 	mov	r4,r22
   534f0:	0042afc0 	call	42afc <__umodsi3>
   534f4:	1027883a 	mov	r19,r2
   534f8:	b009883a 	mov	r4,r22
   534fc:	a80b883a 	mov	r5,r21
   53500:	0042a980 	call	42a98 <__udivsi3>
   53504:	9826943a 	slli	r19,r19,16
   53508:	a0a1383a 	mul	r16,r20,r2
   5350c:	b93fffcc 	andi	r4,r23,65535
   53510:	24c8b03a 	or	r4,r4,r19
   53514:	2400062e 	bgeu	r4,r16,53530 <__udivdi3+0x4d0>
   53518:	2449883a 	add	r4,r4,r17
   5351c:	10ffffc4 	addi	r3,r2,-1
   53520:	24402336 	bltu	r4,r17,535b0 <__udivdi3+0x550>
   53524:	2400222e 	bgeu	r4,r16,535b0 <__udivdi3+0x550>
   53528:	10bfff84 	addi	r2,r2,-2
   5352c:	2449883a 	add	r4,r4,r17
   53530:	e038943a 	slli	fp,fp,16
   53534:	2421c83a 	sub	r16,r4,r16
   53538:	e086b03a 	or	r3,fp,r2
   5353c:	003f4306 	br	5324c <__alt_mem_epcs_flash_controller+0xfe04224c>
   53540:	2005883a 	mov	r2,r4
   53544:	003f6906 	br	532ec <__alt_mem_epcs_flash_controller+0xfe0422ec>
   53548:	1805883a 	mov	r2,r3
   5354c:	003f0f06 	br	5318c <__alt_mem_epcs_flash_controller+0xfe04218c>
   53550:	1806943a 	slli	r3,r3,16
   53554:	9d66983a 	sll	r19,r19,r21
   53558:	39ffffcc 	andi	r7,r7,65535
   5355c:	19c7883a 	add	r3,r3,r7
   53560:	98ffc32e 	bgeu	r19,r3,53470 <__alt_mem_epcs_flash_controller+0xfe042470>
   53564:	10bfffc4 	addi	r2,r2,-1
   53568:	003fc106 	br	53470 <__alt_mem_epcs_flash_controller+0xfe042470>
   5356c:	00800604 	movi	r2,24
   53570:	003f1106 	br	531b8 <__alt_mem_epcs_flash_controller+0xfe0421b8>
   53574:	00800604 	movi	r2,24
   53578:	003f2706 	br	53218 <__alt_mem_epcs_flash_controller+0xfe042218>
   5357c:	00800604 	movi	r2,24
   53580:	003ece06 	br	530bc <__alt_mem_epcs_flash_controller+0xfe0420bc>
   53584:	0007883a 	mov	r3,zero
   53588:	00800044 	movi	r2,1
   5358c:	003f5c06 	br	53300 <__alt_mem_epcs_flash_controller+0xfe042300>
   53590:	813fa12e 	bgeu	r16,r4,53418 <__alt_mem_epcs_flash_controller+0xfe042418>
   53594:	10bfff84 	addi	r2,r2,-2
   53598:	85e1883a 	add	r16,r16,r23
   5359c:	003f9f06 	br	5341c <__alt_mem_epcs_flash_controller+0xfe04241c>
   535a0:	1c7f8a2e 	bgeu	r3,r17,533cc <__alt_mem_epcs_flash_controller+0xfe0423cc>
   535a4:	31bfff84 	addi	r6,r6,-2
   535a8:	1dc7883a 	add	r3,r3,r23
   535ac:	003f8806 	br	533d0 <__alt_mem_epcs_flash_controller+0xfe0423d0>
   535b0:	1805883a 	mov	r2,r3
   535b4:	003fde06 	br	53530 <__alt_mem_epcs_flash_controller+0xfe042530>
   535b8:	1839883a 	mov	fp,r3
   535bc:	003fc906 	br	534e4 <__alt_mem_epcs_flash_controller+0xfe0424e4>
   535c0:	b5bfff84 	addi	r22,r22,-2
   535c4:	2449883a 	add	r4,r4,r17
   535c8:	003f3406 	br	5329c <__alt_mem_epcs_flash_controller+0xfe04229c>
   535cc:	b5bfff84 	addi	r22,r22,-2
   535d0:	1445883a 	add	r2,r2,r17
   535d4:	003edb06 	br	53144 <__alt_mem_epcs_flash_controller+0xfe042144>

000535d8 <__umoddi3>:
   535d8:	defff404 	addi	sp,sp,-48
   535dc:	df000a15 	stw	fp,40(sp)
   535e0:	dc400315 	stw	r17,12(sp)
   535e4:	dc000215 	stw	r16,8(sp)
   535e8:	dfc00b15 	stw	ra,44(sp)
   535ec:	ddc00915 	stw	r23,36(sp)
   535f0:	dd800815 	stw	r22,32(sp)
   535f4:	dd400715 	stw	r21,28(sp)
   535f8:	dd000615 	stw	r20,24(sp)
   535fc:	dcc00515 	stw	r19,20(sp)
   53600:	dc800415 	stw	r18,16(sp)
   53604:	2021883a 	mov	r16,r4
   53608:	2823883a 	mov	r17,r5
   5360c:	2839883a 	mov	fp,r5
   53610:	38003c1e 	bne	r7,zero,53704 <__umoddi3+0x12c>
   53614:	3027883a 	mov	r19,r6
   53618:	2029883a 	mov	r20,r4
   5361c:	2980512e 	bgeu	r5,r6,53764 <__umoddi3+0x18c>
   53620:	00bfffd4 	movui	r2,65535
   53624:	11809a36 	bltu	r2,r6,53890 <__umoddi3+0x2b8>
   53628:	01003fc4 	movi	r4,255
   5362c:	2189803a 	cmpltu	r4,r4,r6
   53630:	200890fa 	slli	r4,r4,3
   53634:	3104d83a 	srl	r2,r6,r4
   53638:	00c001b4 	movhi	r3,6
   5363c:	18f47684 	addi	r3,r3,-11814
   53640:	1885883a 	add	r2,r3,r2
   53644:	10c00003 	ldbu	r3,0(r2)
   53648:	00800804 	movi	r2,32
   5364c:	1909883a 	add	r4,r3,r4
   53650:	1125c83a 	sub	r18,r2,r4
   53654:	90000526 	beq	r18,zero,5366c <__umoddi3+0x94>
   53658:	8ca2983a 	sll	r17,r17,r18
   5365c:	8108d83a 	srl	r4,r16,r4
   53660:	34a6983a 	sll	r19,r6,r18
   53664:	84a8983a 	sll	r20,r16,r18
   53668:	2478b03a 	or	fp,r4,r17
   5366c:	982ed43a 	srli	r23,r19,16
   53670:	e009883a 	mov	r4,fp
   53674:	9dbfffcc 	andi	r22,r19,65535
   53678:	b80b883a 	mov	r5,r23
   5367c:	0042afc0 	call	42afc <__umodsi3>
   53680:	e009883a 	mov	r4,fp
   53684:	b80b883a 	mov	r5,r23
   53688:	102b883a 	mov	r21,r2
   5368c:	0042a980 	call	42a98 <__udivsi3>
   53690:	a806943a 	slli	r3,r21,16
   53694:	a008d43a 	srli	r4,r20,16
   53698:	b085383a 	mul	r2,r22,r2
   5369c:	20c8b03a 	or	r4,r4,r3
   536a0:	2080032e 	bgeu	r4,r2,536b0 <__umoddi3+0xd8>
   536a4:	24c9883a 	add	r4,r4,r19
   536a8:	24c00136 	bltu	r4,r19,536b0 <__umoddi3+0xd8>
   536ac:	20811036 	bltu	r4,r2,53af0 <__umoddi3+0x518>
   536b0:	20abc83a 	sub	r21,r4,r2
   536b4:	b80b883a 	mov	r5,r23
   536b8:	a809883a 	mov	r4,r21
   536bc:	0042afc0 	call	42afc <__umodsi3>
   536c0:	1023883a 	mov	r17,r2
   536c4:	b80b883a 	mov	r5,r23
   536c8:	a809883a 	mov	r4,r21
   536cc:	0042a980 	call	42a98 <__udivsi3>
   536d0:	8822943a 	slli	r17,r17,16
   536d4:	b085383a 	mul	r2,r22,r2
   536d8:	a0ffffcc 	andi	r3,r20,65535
   536dc:	1c46b03a 	or	r3,r3,r17
   536e0:	1880042e 	bgeu	r3,r2,536f4 <__umoddi3+0x11c>
   536e4:	1cc7883a 	add	r3,r3,r19
   536e8:	1cc00236 	bltu	r3,r19,536f4 <__umoddi3+0x11c>
   536ec:	1880012e 	bgeu	r3,r2,536f4 <__umoddi3+0x11c>
   536f0:	1cc7883a 	add	r3,r3,r19
   536f4:	1885c83a 	sub	r2,r3,r2
   536f8:	1484d83a 	srl	r2,r2,r18
   536fc:	0007883a 	mov	r3,zero
   53700:	00004f06 	br	53840 <__umoddi3+0x268>
   53704:	29c04c36 	bltu	r5,r7,53838 <__umoddi3+0x260>
   53708:	00bfffd4 	movui	r2,65535
   5370c:	11c0582e 	bgeu	r2,r7,53870 <__umoddi3+0x298>
   53710:	00804034 	movhi	r2,256
   53714:	10bfffc4 	addi	r2,r2,-1
   53718:	11c0e736 	bltu	r2,r7,53ab8 <__umoddi3+0x4e0>
   5371c:	01000404 	movi	r4,16
   53720:	3904d83a 	srl	r2,r7,r4
   53724:	00c001b4 	movhi	r3,6
   53728:	18f47684 	addi	r3,r3,-11814
   5372c:	1885883a 	add	r2,r3,r2
   53730:	14c00003 	ldbu	r19,0(r2)
   53734:	00c00804 	movi	r3,32
   53738:	9927883a 	add	r19,r19,r4
   5373c:	1ce9c83a 	sub	r20,r3,r19
   53740:	a000581e 	bne	r20,zero,538a4 <__umoddi3+0x2cc>
   53744:	3c400136 	bltu	r7,r17,5374c <__umoddi3+0x174>
   53748:	8180eb36 	bltu	r16,r6,53af8 <__umoddi3+0x520>
   5374c:	8185c83a 	sub	r2,r16,r6
   53750:	89e3c83a 	sub	r17,r17,r7
   53754:	8089803a 	cmpltu	r4,r16,r2
   53758:	8939c83a 	sub	fp,r17,r4
   5375c:	e007883a 	mov	r3,fp
   53760:	00003706 	br	53840 <__umoddi3+0x268>
   53764:	3000041e 	bne	r6,zero,53778 <__umoddi3+0x1a0>
   53768:	000b883a 	mov	r5,zero
   5376c:	01000044 	movi	r4,1
   53770:	0042a980 	call	42a98 <__udivsi3>
   53774:	1027883a 	mov	r19,r2
   53778:	00bfffd4 	movui	r2,65535
   5377c:	14c0402e 	bgeu	r2,r19,53880 <__umoddi3+0x2a8>
   53780:	00804034 	movhi	r2,256
   53784:	10bfffc4 	addi	r2,r2,-1
   53788:	14c0cd36 	bltu	r2,r19,53ac0 <__umoddi3+0x4e8>
   5378c:	00800404 	movi	r2,16
   53790:	9886d83a 	srl	r3,r19,r2
   53794:	010001b4 	movhi	r4,6
   53798:	21347684 	addi	r4,r4,-11814
   5379c:	20c7883a 	add	r3,r4,r3
   537a0:	18c00003 	ldbu	r3,0(r3)
   537a4:	1887883a 	add	r3,r3,r2
   537a8:	00800804 	movi	r2,32
   537ac:	10e5c83a 	sub	r18,r2,r3
   537b0:	9000901e 	bne	r18,zero,539f4 <__umoddi3+0x41c>
   537b4:	982cd43a 	srli	r22,r19,16
   537b8:	8ce3c83a 	sub	r17,r17,r19
   537bc:	9d7fffcc 	andi	r21,r19,65535
   537c0:	b00b883a 	mov	r5,r22
   537c4:	8809883a 	mov	r4,r17
   537c8:	0042afc0 	call	42afc <__umodsi3>
   537cc:	8809883a 	mov	r4,r17
   537d0:	b00b883a 	mov	r5,r22
   537d4:	1021883a 	mov	r16,r2
   537d8:	0042a980 	call	42a98 <__udivsi3>
   537dc:	8006943a 	slli	r3,r16,16
   537e0:	a008d43a 	srli	r4,r20,16
   537e4:	1545383a 	mul	r2,r2,r21
   537e8:	20c8b03a 	or	r4,r4,r3
   537ec:	2080042e 	bgeu	r4,r2,53800 <__umoddi3+0x228>
   537f0:	24c9883a 	add	r4,r4,r19
   537f4:	24c00236 	bltu	r4,r19,53800 <__umoddi3+0x228>
   537f8:	2080012e 	bgeu	r4,r2,53800 <__umoddi3+0x228>
   537fc:	24c9883a 	add	r4,r4,r19
   53800:	20a1c83a 	sub	r16,r4,r2
   53804:	b00b883a 	mov	r5,r22
   53808:	8009883a 	mov	r4,r16
   5380c:	0042afc0 	call	42afc <__umodsi3>
   53810:	1023883a 	mov	r17,r2
   53814:	b00b883a 	mov	r5,r22
   53818:	8009883a 	mov	r4,r16
   5381c:	0042a980 	call	42a98 <__udivsi3>
   53820:	8822943a 	slli	r17,r17,16
   53824:	1545383a 	mul	r2,r2,r21
   53828:	a53fffcc 	andi	r20,r20,65535
   5382c:	a446b03a 	or	r3,r20,r17
   53830:	18bfb02e 	bgeu	r3,r2,536f4 <__alt_mem_epcs_flash_controller+0xfe0426f4>
   53834:	003fab06 	br	536e4 <__alt_mem_epcs_flash_controller+0xfe0426e4>
   53838:	2005883a 	mov	r2,r4
   5383c:	2807883a 	mov	r3,r5
   53840:	dfc00b17 	ldw	ra,44(sp)
   53844:	df000a17 	ldw	fp,40(sp)
   53848:	ddc00917 	ldw	r23,36(sp)
   5384c:	dd800817 	ldw	r22,32(sp)
   53850:	dd400717 	ldw	r21,28(sp)
   53854:	dd000617 	ldw	r20,24(sp)
   53858:	dcc00517 	ldw	r19,20(sp)
   5385c:	dc800417 	ldw	r18,16(sp)
   53860:	dc400317 	ldw	r17,12(sp)
   53864:	dc000217 	ldw	r16,8(sp)
   53868:	dec00c04 	addi	sp,sp,48
   5386c:	f800283a 	ret
   53870:	04c03fc4 	movi	r19,255
   53874:	99c9803a 	cmpltu	r4,r19,r7
   53878:	200890fa 	slli	r4,r4,3
   5387c:	003fa806 	br	53720 <__alt_mem_epcs_flash_controller+0xfe042720>
   53880:	00803fc4 	movi	r2,255
   53884:	14c5803a 	cmpltu	r2,r2,r19
   53888:	100490fa 	slli	r2,r2,3
   5388c:	003fc006 	br	53790 <__alt_mem_epcs_flash_controller+0xfe042790>
   53890:	00804034 	movhi	r2,256
   53894:	10bfffc4 	addi	r2,r2,-1
   53898:	11808b36 	bltu	r2,r6,53ac8 <__umoddi3+0x4f0>
   5389c:	01000404 	movi	r4,16
   538a0:	003f6406 	br	53634 <__alt_mem_epcs_flash_controller+0xfe042634>
   538a4:	34c4d83a 	srl	r2,r6,r19
   538a8:	3d0e983a 	sll	r7,r7,r20
   538ac:	8cf8d83a 	srl	fp,r17,r19
   538b0:	8d10983a 	sll	r8,r17,r20
   538b4:	38aab03a 	or	r21,r7,r2
   538b8:	a82cd43a 	srli	r22,r21,16
   538bc:	84e2d83a 	srl	r17,r16,r19
   538c0:	e009883a 	mov	r4,fp
   538c4:	b00b883a 	mov	r5,r22
   538c8:	8a22b03a 	or	r17,r17,r8
   538cc:	3524983a 	sll	r18,r6,r20
   538d0:	0042afc0 	call	42afc <__umodsi3>
   538d4:	e009883a 	mov	r4,fp
   538d8:	b00b883a 	mov	r5,r22
   538dc:	102f883a 	mov	r23,r2
   538e0:	0042a980 	call	42a98 <__udivsi3>
   538e4:	100d883a 	mov	r6,r2
   538e8:	b808943a 	slli	r4,r23,16
   538ec:	aa3fffcc 	andi	r8,r21,65535
   538f0:	8804d43a 	srli	r2,r17,16
   538f4:	41af383a 	mul	r23,r8,r6
   538f8:	8520983a 	sll	r16,r16,r20
   538fc:	1104b03a 	or	r2,r2,r4
   53900:	15c0042e 	bgeu	r2,r23,53914 <__umoddi3+0x33c>
   53904:	1545883a 	add	r2,r2,r21
   53908:	30ffffc4 	addi	r3,r6,-1
   5390c:	1540742e 	bgeu	r2,r21,53ae0 <__umoddi3+0x508>
   53910:	180d883a 	mov	r6,r3
   53914:	15efc83a 	sub	r23,r2,r23
   53918:	b00b883a 	mov	r5,r22
   5391c:	b809883a 	mov	r4,r23
   53920:	d9800115 	stw	r6,4(sp)
   53924:	da000015 	stw	r8,0(sp)
   53928:	0042afc0 	call	42afc <__umodsi3>
   5392c:	b00b883a 	mov	r5,r22
   53930:	b809883a 	mov	r4,r23
   53934:	1039883a 	mov	fp,r2
   53938:	0042a980 	call	42a98 <__udivsi3>
   5393c:	da000017 	ldw	r8,0(sp)
   53940:	e038943a 	slli	fp,fp,16
   53944:	100b883a 	mov	r5,r2
   53948:	4089383a 	mul	r4,r8,r2
   5394c:	8a3fffcc 	andi	r8,r17,65535
   53950:	4710b03a 	or	r8,r8,fp
   53954:	d9800117 	ldw	r6,4(sp)
   53958:	4100042e 	bgeu	r8,r4,5396c <__umoddi3+0x394>
   5395c:	4551883a 	add	r8,r8,r21
   53960:	10bfffc4 	addi	r2,r2,-1
   53964:	45405a2e 	bgeu	r8,r21,53ad0 <__umoddi3+0x4f8>
   53968:	100b883a 	mov	r5,r2
   5396c:	300c943a 	slli	r6,r6,16
   53970:	91ffffcc 	andi	r7,r18,65535
   53974:	9004d43a 	srli	r2,r18,16
   53978:	314cb03a 	or	r6,r6,r5
   5397c:	317fffcc 	andi	r5,r6,65535
   53980:	300cd43a 	srli	r6,r6,16
   53984:	29d3383a 	mul	r9,r5,r7
   53988:	288b383a 	mul	r5,r5,r2
   5398c:	31cf383a 	mul	r7,r6,r7
   53990:	4806d43a 	srli	r3,r9,16
   53994:	4111c83a 	sub	r8,r8,r4
   53998:	29cb883a 	add	r5,r5,r7
   5399c:	194b883a 	add	r5,r3,r5
   539a0:	3085383a 	mul	r2,r6,r2
   539a4:	29c0022e 	bgeu	r5,r7,539b0 <__umoddi3+0x3d8>
   539a8:	00c00074 	movhi	r3,1
   539ac:	10c5883a 	add	r2,r2,r3
   539b0:	2808d43a 	srli	r4,r5,16
   539b4:	280a943a 	slli	r5,r5,16
   539b8:	4a7fffcc 	andi	r9,r9,65535
   539bc:	2085883a 	add	r2,r4,r2
   539c0:	2a4b883a 	add	r5,r5,r9
   539c4:	40803636 	bltu	r8,r2,53aa0 <__umoddi3+0x4c8>
   539c8:	40804d26 	beq	r8,r2,53b00 <__umoddi3+0x528>
   539cc:	4089c83a 	sub	r4,r8,r2
   539d0:	280f883a 	mov	r7,r5
   539d4:	81cfc83a 	sub	r7,r16,r7
   539d8:	81c7803a 	cmpltu	r3,r16,r7
   539dc:	20c7c83a 	sub	r3,r4,r3
   539e0:	1cc4983a 	sll	r2,r3,r19
   539e4:	3d0ed83a 	srl	r7,r7,r20
   539e8:	1d06d83a 	srl	r3,r3,r20
   539ec:	11c4b03a 	or	r2,r2,r7
   539f0:	003f9306 	br	53840 <__alt_mem_epcs_flash_controller+0xfe042840>
   539f4:	9ca6983a 	sll	r19,r19,r18
   539f8:	88e8d83a 	srl	r20,r17,r3
   539fc:	80c4d83a 	srl	r2,r16,r3
   53a00:	982cd43a 	srli	r22,r19,16
   53a04:	8ca2983a 	sll	r17,r17,r18
   53a08:	a009883a 	mov	r4,r20
   53a0c:	b00b883a 	mov	r5,r22
   53a10:	1478b03a 	or	fp,r2,r17
   53a14:	0042afc0 	call	42afc <__umodsi3>
   53a18:	a009883a 	mov	r4,r20
   53a1c:	b00b883a 	mov	r5,r22
   53a20:	1023883a 	mov	r17,r2
   53a24:	0042a980 	call	42a98 <__udivsi3>
   53a28:	9d7fffcc 	andi	r21,r19,65535
   53a2c:	880a943a 	slli	r5,r17,16
   53a30:	e008d43a 	srli	r4,fp,16
   53a34:	a885383a 	mul	r2,r21,r2
   53a38:	84a8983a 	sll	r20,r16,r18
   53a3c:	2148b03a 	or	r4,r4,r5
   53a40:	2080042e 	bgeu	r4,r2,53a54 <__umoddi3+0x47c>
   53a44:	24c9883a 	add	r4,r4,r19
   53a48:	24c00236 	bltu	r4,r19,53a54 <__umoddi3+0x47c>
   53a4c:	2080012e 	bgeu	r4,r2,53a54 <__umoddi3+0x47c>
   53a50:	24c9883a 	add	r4,r4,r19
   53a54:	20a3c83a 	sub	r17,r4,r2
   53a58:	b00b883a 	mov	r5,r22
   53a5c:	8809883a 	mov	r4,r17
   53a60:	0042afc0 	call	42afc <__umodsi3>
   53a64:	102f883a 	mov	r23,r2
   53a68:	8809883a 	mov	r4,r17
   53a6c:	b00b883a 	mov	r5,r22
   53a70:	0042a980 	call	42a98 <__udivsi3>
   53a74:	b82e943a 	slli	r23,r23,16
   53a78:	a885383a 	mul	r2,r21,r2
   53a7c:	e13fffcc 	andi	r4,fp,65535
   53a80:	25c8b03a 	or	r4,r4,r23
   53a84:	2080042e 	bgeu	r4,r2,53a98 <__umoddi3+0x4c0>
   53a88:	24c9883a 	add	r4,r4,r19
   53a8c:	24c00236 	bltu	r4,r19,53a98 <__umoddi3+0x4c0>
   53a90:	2080012e 	bgeu	r4,r2,53a98 <__umoddi3+0x4c0>
   53a94:	24c9883a 	add	r4,r4,r19
   53a98:	20a3c83a 	sub	r17,r4,r2
   53a9c:	003f4806 	br	537c0 <__alt_mem_epcs_flash_controller+0xfe0427c0>
   53aa0:	2c8fc83a 	sub	r7,r5,r18
   53aa4:	1545c83a 	sub	r2,r2,r21
   53aa8:	29cb803a 	cmpltu	r5,r5,r7
   53aac:	1145c83a 	sub	r2,r2,r5
   53ab0:	4089c83a 	sub	r4,r8,r2
   53ab4:	003fc706 	br	539d4 <__alt_mem_epcs_flash_controller+0xfe0429d4>
   53ab8:	01000604 	movi	r4,24
   53abc:	003f1806 	br	53720 <__alt_mem_epcs_flash_controller+0xfe042720>
   53ac0:	00800604 	movi	r2,24
   53ac4:	003f3206 	br	53790 <__alt_mem_epcs_flash_controller+0xfe042790>
   53ac8:	01000604 	movi	r4,24
   53acc:	003ed906 	br	53634 <__alt_mem_epcs_flash_controller+0xfe042634>
   53ad0:	413fa52e 	bgeu	r8,r4,53968 <__alt_mem_epcs_flash_controller+0xfe042968>
   53ad4:	297fff84 	addi	r5,r5,-2
   53ad8:	4551883a 	add	r8,r8,r21
   53adc:	003fa306 	br	5396c <__alt_mem_epcs_flash_controller+0xfe04296c>
   53ae0:	15ff8b2e 	bgeu	r2,r23,53910 <__alt_mem_epcs_flash_controller+0xfe042910>
   53ae4:	31bfff84 	addi	r6,r6,-2
   53ae8:	1545883a 	add	r2,r2,r21
   53aec:	003f8906 	br	53914 <__alt_mem_epcs_flash_controller+0xfe042914>
   53af0:	24c9883a 	add	r4,r4,r19
   53af4:	003eee06 	br	536b0 <__alt_mem_epcs_flash_controller+0xfe0426b0>
   53af8:	8005883a 	mov	r2,r16
   53afc:	003f1706 	br	5375c <__alt_mem_epcs_flash_controller+0xfe04275c>
   53b00:	817fe736 	bltu	r16,r5,53aa0 <__alt_mem_epcs_flash_controller+0xfe042aa0>
   53b04:	280f883a 	mov	r7,r5
   53b08:	0009883a 	mov	r4,zero
   53b0c:	003fb106 	br	539d4 <__alt_mem_epcs_flash_controller+0xfe0429d4>

00053b10 <__eqdf2>:
   53b10:	2804d53a 	srli	r2,r5,20
   53b14:	3806d53a 	srli	r3,r7,20
   53b18:	02000434 	movhi	r8,16
   53b1c:	423fffc4 	addi	r8,r8,-1
   53b20:	1081ffcc 	andi	r2,r2,2047
   53b24:	0281ffc4 	movi	r10,2047
   53b28:	2a12703a 	and	r9,r5,r8
   53b2c:	18c1ffcc 	andi	r3,r3,2047
   53b30:	3a10703a 	and	r8,r7,r8
   53b34:	280ad7fa 	srli	r5,r5,31
   53b38:	380ed7fa 	srli	r7,r7,31
   53b3c:	12801026 	beq	r2,r10,53b80 <__eqdf2+0x70>
   53b40:	0281ffc4 	movi	r10,2047
   53b44:	1a800a26 	beq	r3,r10,53b70 <__eqdf2+0x60>
   53b48:	10c00226 	beq	r2,r3,53b54 <__eqdf2+0x44>
   53b4c:	00800044 	movi	r2,1
   53b50:	f800283a 	ret
   53b54:	4a3ffd1e 	bne	r9,r8,53b4c <__alt_mem_epcs_flash_controller+0xfe042b4c>
   53b58:	21bffc1e 	bne	r4,r6,53b4c <__alt_mem_epcs_flash_controller+0xfe042b4c>
   53b5c:	29c00c26 	beq	r5,r7,53b90 <__eqdf2+0x80>
   53b60:	103ffa1e 	bne	r2,zero,53b4c <__alt_mem_epcs_flash_controller+0xfe042b4c>
   53b64:	2244b03a 	or	r2,r4,r9
   53b68:	1004c03a 	cmpne	r2,r2,zero
   53b6c:	f800283a 	ret
   53b70:	3214b03a 	or	r10,r6,r8
   53b74:	503ff426 	beq	r10,zero,53b48 <__alt_mem_epcs_flash_controller+0xfe042b48>
   53b78:	00800044 	movi	r2,1
   53b7c:	f800283a 	ret
   53b80:	2254b03a 	or	r10,r4,r9
   53b84:	503fee26 	beq	r10,zero,53b40 <__alt_mem_epcs_flash_controller+0xfe042b40>
   53b88:	00800044 	movi	r2,1
   53b8c:	f800283a 	ret
   53b90:	0005883a 	mov	r2,zero
   53b94:	f800283a 	ret

00053b98 <__fixdfsi>:
   53b98:	280cd53a 	srli	r6,r5,20
   53b9c:	00c00434 	movhi	r3,16
   53ba0:	18ffffc4 	addi	r3,r3,-1
   53ba4:	3181ffcc 	andi	r6,r6,2047
   53ba8:	01c0ff84 	movi	r7,1022
   53bac:	28c6703a 	and	r3,r5,r3
   53bb0:	280ad7fa 	srli	r5,r5,31
   53bb4:	3980120e 	bge	r7,r6,53c00 <__fixdfsi+0x68>
   53bb8:	00810744 	movi	r2,1053
   53bbc:	11800c16 	blt	r2,r6,53bf0 <__fixdfsi+0x58>
   53bc0:	00810cc4 	movi	r2,1075
   53bc4:	1185c83a 	sub	r2,r2,r6
   53bc8:	01c007c4 	movi	r7,31
   53bcc:	18c00434 	orhi	r3,r3,16
   53bd0:	38800d16 	blt	r7,r2,53c08 <__fixdfsi+0x70>
   53bd4:	31befb44 	addi	r6,r6,-1043
   53bd8:	2084d83a 	srl	r2,r4,r2
   53bdc:	1986983a 	sll	r3,r3,r6
   53be0:	1884b03a 	or	r2,r3,r2
   53be4:	28000726 	beq	r5,zero,53c04 <__fixdfsi+0x6c>
   53be8:	0085c83a 	sub	r2,zero,r2
   53bec:	f800283a 	ret
   53bf0:	00a00034 	movhi	r2,32768
   53bf4:	10bfffc4 	addi	r2,r2,-1
   53bf8:	2885883a 	add	r2,r5,r2
   53bfc:	f800283a 	ret
   53c00:	0005883a 	mov	r2,zero
   53c04:	f800283a 	ret
   53c08:	008104c4 	movi	r2,1043
   53c0c:	1185c83a 	sub	r2,r2,r6
   53c10:	1884d83a 	srl	r2,r3,r2
   53c14:	003ff306 	br	53be4 <__alt_mem_epcs_flash_controller+0xfe042be4>

00053c18 <__floatunsidf>:
   53c18:	defffe04 	addi	sp,sp,-8
   53c1c:	dc000015 	stw	r16,0(sp)
   53c20:	dfc00115 	stw	ra,4(sp)
   53c24:	2021883a 	mov	r16,r4
   53c28:	20002226 	beq	r4,zero,53cb4 <__floatunsidf+0x9c>
   53c2c:	0044fd00 	call	44fd0 <__clzsi2>
   53c30:	01010784 	movi	r4,1054
   53c34:	2089c83a 	sub	r4,r4,r2
   53c38:	01810cc4 	movi	r6,1075
   53c3c:	310dc83a 	sub	r6,r6,r4
   53c40:	00c007c4 	movi	r3,31
   53c44:	1980120e 	bge	r3,r6,53c90 <__floatunsidf+0x78>
   53c48:	00c104c4 	movi	r3,1043
   53c4c:	1907c83a 	sub	r3,r3,r4
   53c50:	80ca983a 	sll	r5,r16,r3
   53c54:	00800434 	movhi	r2,16
   53c58:	10bfffc4 	addi	r2,r2,-1
   53c5c:	2101ffcc 	andi	r4,r4,2047
   53c60:	0021883a 	mov	r16,zero
   53c64:	288a703a 	and	r5,r5,r2
   53c68:	2008953a 	slli	r4,r4,20
   53c6c:	00c00434 	movhi	r3,16
   53c70:	18ffffc4 	addi	r3,r3,-1
   53c74:	28c6703a 	and	r3,r5,r3
   53c78:	8005883a 	mov	r2,r16
   53c7c:	1906b03a 	or	r3,r3,r4
   53c80:	dfc00117 	ldw	ra,4(sp)
   53c84:	dc000017 	ldw	r16,0(sp)
   53c88:	dec00204 	addi	sp,sp,8
   53c8c:	f800283a 	ret
   53c90:	00c002c4 	movi	r3,11
   53c94:	188bc83a 	sub	r5,r3,r2
   53c98:	814ad83a 	srl	r5,r16,r5
   53c9c:	00c00434 	movhi	r3,16
   53ca0:	18ffffc4 	addi	r3,r3,-1
   53ca4:	81a0983a 	sll	r16,r16,r6
   53ca8:	2101ffcc 	andi	r4,r4,2047
   53cac:	28ca703a 	and	r5,r5,r3
   53cb0:	003fed06 	br	53c68 <__alt_mem_epcs_flash_controller+0xfe042c68>
   53cb4:	0009883a 	mov	r4,zero
   53cb8:	000b883a 	mov	r5,zero
   53cbc:	003fea06 	br	53c68 <__alt_mem_epcs_flash_controller+0xfe042c68>

00053cc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   53cc0:	defffe04 	addi	sp,sp,-8
   53cc4:	dfc00115 	stw	ra,4(sp)
   53cc8:	df000015 	stw	fp,0(sp)
   53ccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   53cd0:	d0a02117 	ldw	r2,-32636(gp)
   53cd4:	10000326 	beq	r2,zero,53ce4 <alt_get_errno+0x24>
   53cd8:	d0a02117 	ldw	r2,-32636(gp)
   53cdc:	103ee83a 	callr	r2
   53ce0:	00000106 	br	53ce8 <alt_get_errno+0x28>
   53ce4:	d0a87a04 	addi	r2,gp,-24088
}
   53ce8:	e037883a 	mov	sp,fp
   53cec:	dfc00117 	ldw	ra,4(sp)
   53cf0:	df000017 	ldw	fp,0(sp)
   53cf4:	dec00204 	addi	sp,sp,8
   53cf8:	f800283a 	ret

00053cfc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   53cfc:	defffb04 	addi	sp,sp,-20
   53d00:	dfc00415 	stw	ra,16(sp)
   53d04:	df000315 	stw	fp,12(sp)
   53d08:	df000304 	addi	fp,sp,12
   53d0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   53d10:	e0bfff17 	ldw	r2,-4(fp)
   53d14:	10000616 	blt	r2,zero,53d30 <close+0x34>
   53d18:	e0bfff17 	ldw	r2,-4(fp)
   53d1c:	10c00324 	muli	r3,r2,12
   53d20:	008001b4 	movhi	r2,6
   53d24:	10b94604 	addi	r2,r2,-6888
   53d28:	1885883a 	add	r2,r3,r2
   53d2c:	00000106 	br	53d34 <close+0x38>
   53d30:	0005883a 	mov	r2,zero
   53d34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   53d38:	e0bffd17 	ldw	r2,-12(fp)
   53d3c:	10001926 	beq	r2,zero,53da4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   53d40:	e0bffd17 	ldw	r2,-12(fp)
   53d44:	10800017 	ldw	r2,0(r2)
   53d48:	10800417 	ldw	r2,16(r2)
   53d4c:	10000626 	beq	r2,zero,53d68 <close+0x6c>
   53d50:	e0bffd17 	ldw	r2,-12(fp)
   53d54:	10800017 	ldw	r2,0(r2)
   53d58:	10800417 	ldw	r2,16(r2)
   53d5c:	e13ffd17 	ldw	r4,-12(fp)
   53d60:	103ee83a 	callr	r2
   53d64:	00000106 	br	53d6c <close+0x70>
   53d68:	0005883a 	mov	r2,zero
   53d6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   53d70:	e13fff17 	ldw	r4,-4(fp)
   53d74:	0054a580 	call	54a58 <alt_release_fd>
    if (rval < 0)
   53d78:	e0bffe17 	ldw	r2,-8(fp)
   53d7c:	1000070e 	bge	r2,zero,53d9c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   53d80:	0053cc00 	call	53cc0 <alt_get_errno>
   53d84:	1007883a 	mov	r3,r2
   53d88:	e0bffe17 	ldw	r2,-8(fp)
   53d8c:	0085c83a 	sub	r2,zero,r2
   53d90:	18800015 	stw	r2,0(r3)
      return -1;
   53d94:	00bfffc4 	movi	r2,-1
   53d98:	00000706 	br	53db8 <close+0xbc>
    }
    return 0;
   53d9c:	0005883a 	mov	r2,zero
   53da0:	00000506 	br	53db8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   53da4:	0053cc00 	call	53cc0 <alt_get_errno>
   53da8:	1007883a 	mov	r3,r2
   53dac:	00801444 	movi	r2,81
   53db0:	18800015 	stw	r2,0(r3)
    return -1;
   53db4:	00bfffc4 	movi	r2,-1
  }
}
   53db8:	e037883a 	mov	sp,fp
   53dbc:	dfc00117 	ldw	ra,4(sp)
   53dc0:	df000017 	ldw	fp,0(sp)
   53dc4:	dec00204 	addi	sp,sp,8
   53dc8:	f800283a 	ret

00053dcc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   53dcc:	defffc04 	addi	sp,sp,-16
   53dd0:	df000315 	stw	fp,12(sp)
   53dd4:	df000304 	addi	fp,sp,12
   53dd8:	e13ffd15 	stw	r4,-12(fp)
   53ddc:	e17ffe15 	stw	r5,-8(fp)
   53de0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   53de4:	e0bfff17 	ldw	r2,-4(fp)
}
   53de8:	e037883a 	mov	sp,fp
   53dec:	df000017 	ldw	fp,0(sp)
   53df0:	dec00104 	addi	sp,sp,4
   53df4:	f800283a 	ret

00053df8 <__env_lock>:
 * this requires that environment variables are never manipulated by an interrupt 
 * service routine.
 */

void __env_lock ( struct _reent *_r )
{
   53df8:	defffe04 	addi	sp,sp,-8
   53dfc:	df000115 	stw	fp,4(sp)
   53e00:	df000104 	addi	fp,sp,4
   53e04:	e13fff15 	stw	r4,-4(fp)
}
   53e08:	0001883a 	nop
   53e0c:	e037883a 	mov	sp,fp
   53e10:	df000017 	ldw	fp,0(sp)
   53e14:	dec00104 	addi	sp,sp,4
   53e18:	f800283a 	ret

00053e1c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   53e1c:	defffe04 	addi	sp,sp,-8
   53e20:	df000115 	stw	fp,4(sp)
   53e24:	df000104 	addi	fp,sp,4
   53e28:	e13fff15 	stw	r4,-4(fp)
}
   53e2c:	0001883a 	nop
   53e30:	e037883a 	mov	sp,fp
   53e34:	df000017 	ldw	fp,0(sp)
   53e38:	dec00104 	addi	sp,sp,4
   53e3c:	f800283a 	ret

00053e40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   53e40:	defffd04 	addi	sp,sp,-12
   53e44:	df000215 	stw	fp,8(sp)
   53e48:	df000204 	addi	fp,sp,8
   53e4c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   53e50:	0001883a 	nop
   53e54:	e0bfff17 	ldw	r2,-4(fp)
   53e58:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   53e5c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   53e60:	10000226 	beq	r2,zero,53e6c <_exit+0x2c>
    ALT_SIM_FAIL();
   53e64:	002af070 	cmpltui	zero,zero,43969
   53e68:	00000106 	br	53e70 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   53e6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   53e70:	003fff06 	br	53e70 <__alt_mem_epcs_flash_controller+0xfe042e70>

00053e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   53e74:	defffe04 	addi	sp,sp,-8
   53e78:	dfc00115 	stw	ra,4(sp)
   53e7c:	df000015 	stw	fp,0(sp)
   53e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   53e84:	d0a02117 	ldw	r2,-32636(gp)
   53e88:	10000326 	beq	r2,zero,53e98 <alt_get_errno+0x24>
   53e8c:	d0a02117 	ldw	r2,-32636(gp)
   53e90:	103ee83a 	callr	r2
   53e94:	00000106 	br	53e9c <alt_get_errno+0x28>
   53e98:	d0a87a04 	addi	r2,gp,-24088
}
   53e9c:	e037883a 	mov	sp,fp
   53ea0:	dfc00117 	ldw	ra,4(sp)
   53ea4:	df000017 	ldw	fp,0(sp)
   53ea8:	dec00204 	addi	sp,sp,8
   53eac:	f800283a 	ret

00053eb0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   53eb0:	defffb04 	addi	sp,sp,-20
   53eb4:	dfc00415 	stw	ra,16(sp)
   53eb8:	df000315 	stw	fp,12(sp)
   53ebc:	df000304 	addi	fp,sp,12
   53ec0:	e13ffe15 	stw	r4,-8(fp)
   53ec4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   53ec8:	e0bffe17 	ldw	r2,-8(fp)
   53ecc:	10000616 	blt	r2,zero,53ee8 <fstat+0x38>
   53ed0:	e0bffe17 	ldw	r2,-8(fp)
   53ed4:	10c00324 	muli	r3,r2,12
   53ed8:	008001b4 	movhi	r2,6
   53edc:	10b94604 	addi	r2,r2,-6888
   53ee0:	1885883a 	add	r2,r3,r2
   53ee4:	00000106 	br	53eec <fstat+0x3c>
   53ee8:	0005883a 	mov	r2,zero
   53eec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   53ef0:	e0bffd17 	ldw	r2,-12(fp)
   53ef4:	10001026 	beq	r2,zero,53f38 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   53ef8:	e0bffd17 	ldw	r2,-12(fp)
   53efc:	10800017 	ldw	r2,0(r2)
   53f00:	10800817 	ldw	r2,32(r2)
   53f04:	10000726 	beq	r2,zero,53f24 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   53f08:	e0bffd17 	ldw	r2,-12(fp)
   53f0c:	10800017 	ldw	r2,0(r2)
   53f10:	10800817 	ldw	r2,32(r2)
   53f14:	e17fff17 	ldw	r5,-4(fp)
   53f18:	e13ffd17 	ldw	r4,-12(fp)
   53f1c:	103ee83a 	callr	r2
   53f20:	00000a06 	br	53f4c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   53f24:	e0bfff17 	ldw	r2,-4(fp)
   53f28:	00c80004 	movi	r3,8192
   53f2c:	10c00115 	stw	r3,4(r2)
      return 0;
   53f30:	0005883a 	mov	r2,zero
   53f34:	00000506 	br	53f4c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   53f38:	0053e740 	call	53e74 <alt_get_errno>
   53f3c:	1007883a 	mov	r3,r2
   53f40:	00801444 	movi	r2,81
   53f44:	18800015 	stw	r2,0(r3)
    return -1;
   53f48:	00bfffc4 	movi	r2,-1
  }
}
   53f4c:	e037883a 	mov	sp,fp
   53f50:	dfc00117 	ldw	ra,4(sp)
   53f54:	df000017 	ldw	fp,0(sp)
   53f58:	dec00204 	addi	sp,sp,8
   53f5c:	f800283a 	ret

00053f60 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   53f60:	deffff04 	addi	sp,sp,-4
   53f64:	df000015 	stw	fp,0(sp)
   53f68:	d839883a 	mov	fp,sp
  return 0;
   53f6c:	0005883a 	mov	r2,zero
}
   53f70:	e037883a 	mov	sp,fp
   53f74:	df000017 	ldw	fp,0(sp)
   53f78:	dec00104 	addi	sp,sp,4
   53f7c:	f800283a 	ret

00053f80 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   53f80:	defff404 	addi	sp,sp,-48
   53f84:	dfc00b15 	stw	ra,44(sp)
   53f88:	df000a15 	stw	fp,40(sp)
   53f8c:	dd000915 	stw	r20,36(sp)
   53f90:	dcc00815 	stw	r19,32(sp)
   53f94:	dc800715 	stw	r18,28(sp)
   53f98:	dc400615 	stw	r17,24(sp)
   53f9c:	dc000515 	stw	r16,20(sp)
   53fa0:	df000a04 	addi	fp,sp,40
   53fa4:	e13ff915 	stw	r4,-28(fp)
   53fa8:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   53fac:	e0bffa17 	ldw	r2,-24(fp)
   53fb0:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   53fb4:	d0a88717 	ldw	r2,-24036(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   53fb8:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   53fbc:	d0a88617 	ldw	r2,-24040(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   53fc0:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   53fc4:	e0bff817 	ldw	r2,-32(fp)
   53fc8:	10005f26 	beq	r2,zero,54148 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   53fcc:	d0a88017 	ldw	r2,-24064(gp)
   53fd0:	1029883a 	mov	r20,r2
   53fd4:	e17ff817 	ldw	r5,-32(fp)
   53fd8:	e13ff717 	ldw	r4,-36(fp)
   53fdc:	0042a980 	call	42a98 <__udivsi3>
   53fe0:	a085883a 	add	r2,r20,r2
   53fe4:	1007883a 	mov	r3,r2
   53fe8:	e0bff917 	ldw	r2,-28(fp)
   53fec:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   53ff0:	d0a88117 	ldw	r2,-24060(gp)
   53ff4:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   53ff8:	e0bff717 	ldw	r2,-36(fp)
   53ffc:	1021883a 	mov	r16,r2
   54000:	0023883a 	mov	r17,zero
   54004:	e17ff817 	ldw	r5,-32(fp)
   54008:	010003f4 	movhi	r4,15
   5400c:	21109004 	addi	r4,r4,16960
   54010:	0042a980 	call	42a98 <__udivsi3>
   54014:	1025883a 	mov	r18,r2
   54018:	0027883a 	mov	r19,zero
   5401c:	900d883a 	mov	r6,r18
   54020:	980f883a 	mov	r7,r19
   54024:	8009883a 	mov	r4,r16
   54028:	880b883a 	mov	r5,r17
   5402c:	00429400 	call	42940 <__muldi3>
   54030:	1009883a 	mov	r4,r2
   54034:	180b883a 	mov	r5,r3
   54038:	2005883a 	mov	r2,r4
   5403c:	2807883a 	mov	r3,r5
   54040:	018003f4 	movhi	r6,15
   54044:	31909004 	addi	r6,r6,16960
   54048:	000f883a 	mov	r7,zero
   5404c:	1009883a 	mov	r4,r2
   54050:	180b883a 	mov	r5,r3
   54054:	00535d80 	call	535d8 <__umoddi3>
   54058:	1009883a 	mov	r4,r2
   5405c:	180b883a 	mov	r5,r3
   54060:	2005883a 	mov	r2,r4
   54064:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   54068:	a085883a 	add	r2,r20,r2
   5406c:	1007883a 	mov	r3,r2
   54070:	e0bff917 	ldw	r2,-28(fp)
   54074:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   54078:	00001406 	br	540cc <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   5407c:	e0bff917 	ldw	r2,-28(fp)
   54080:	10800017 	ldw	r2,0(r2)
   54084:	00800516 	blt	zero,r2,5409c <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   54088:	e0bff917 	ldw	r2,-28(fp)
   5408c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   54090:	e0bff917 	ldw	r2,-28(fp)
   54094:	10000115 	stw	zero,4(r2)
          break;
   54098:	00000f06 	br	540d8 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   5409c:	e0bff917 	ldw	r2,-28(fp)
   540a0:	10800017 	ldw	r2,0(r2)
   540a4:	10ffffc4 	addi	r3,r2,-1
   540a8:	e0bff917 	ldw	r2,-28(fp)
   540ac:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   540b0:	e0bff917 	ldw	r2,-28(fp)
   540b4:	10c00117 	ldw	r3,4(r2)
   540b8:	008003f4 	movhi	r2,15
   540bc:	10909004 	addi	r2,r2,16960
   540c0:	1887883a 	add	r3,r3,r2
   540c4:	e0bff917 	ldw	r2,-28(fp)
   540c8:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   540cc:	e0bff917 	ldw	r2,-28(fp)
   540d0:	10800117 	ldw	r2,4(r2)
   540d4:	103fe916 	blt	r2,zero,5407c <__alt_mem_epcs_flash_controller+0xfe04307c>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   540d8:	00000c06 	br	5410c <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   540dc:	e0bff917 	ldw	r2,-28(fp)
   540e0:	10800017 	ldw	r2,0(r2)
   540e4:	10c00044 	addi	r3,r2,1
   540e8:	e0bff917 	ldw	r2,-28(fp)
   540ec:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   540f0:	e0bff917 	ldw	r2,-28(fp)
   540f4:	10c00117 	ldw	r3,4(r2)
   540f8:	00bffc74 	movhi	r2,65521
   540fc:	10af7004 	addi	r2,r2,-16960
   54100:	1887883a 	add	r3,r3,r2
   54104:	e0bff917 	ldw	r2,-28(fp)
   54108:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   5410c:	e0bff917 	ldw	r2,-28(fp)
   54110:	10c00117 	ldw	r3,4(r2)
   54114:	008003f4 	movhi	r2,15
   54118:	10908fc4 	addi	r2,r2,16959
   5411c:	10ffef16 	blt	r2,r3,540dc <__alt_mem_epcs_flash_controller+0xfe0430dc>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   54120:	e0bff617 	ldw	r2,-40(fp)
   54124:	10000626 	beq	r2,zero,54140 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   54128:	d0e87e17 	ldw	r3,-24072(gp)
   5412c:	e0bff617 	ldw	r2,-40(fp)
   54130:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   54134:	d0e87f17 	ldw	r3,-24068(gp)
   54138:	e0bff617 	ldw	r2,-40(fp)
   5413c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   54140:	0005883a 	mov	r2,zero
   54144:	00000106 	br	5414c <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   54148:	00bfde84 	movi	r2,-134
}
   5414c:	e6fffb04 	addi	sp,fp,-20
   54150:	dfc00617 	ldw	ra,24(sp)
   54154:	df000517 	ldw	fp,20(sp)
   54158:	dd000417 	ldw	r20,16(sp)
   5415c:	dcc00317 	ldw	r19,12(sp)
   54160:	dc800217 	ldw	r18,8(sp)
   54164:	dc400117 	ldw	r17,4(sp)
   54168:	dc000017 	ldw	r16,0(sp)
   5416c:	dec00704 	addi	sp,sp,28
   54170:	f800283a 	ret

00054174 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54174:	defff904 	addi	sp,sp,-28
   54178:	dfc00615 	stw	ra,24(sp)
   5417c:	df000515 	stw	fp,20(sp)
   54180:	df000504 	addi	fp,sp,20
   54184:	e13ffc15 	stw	r4,-16(fp)
   54188:	e17ffd15 	stw	r5,-12(fp)
   5418c:	e1bffe15 	stw	r6,-8(fp)
   54190:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   54194:	e0800217 	ldw	r2,8(fp)
   54198:	d8800015 	stw	r2,0(sp)
   5419c:	e1ffff17 	ldw	r7,-4(fp)
   541a0:	e1bffe17 	ldw	r6,-8(fp)
   541a4:	e17ffd17 	ldw	r5,-12(fp)
   541a8:	e13ffc17 	ldw	r4,-16(fp)
   541ac:	00543240 	call	54324 <alt_iic_isr_register>
}  
   541b0:	e037883a 	mov	sp,fp
   541b4:	dfc00117 	ldw	ra,4(sp)
   541b8:	df000017 	ldw	fp,0(sp)
   541bc:	dec00204 	addi	sp,sp,8
   541c0:	f800283a 	ret

000541c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   541c4:	defff904 	addi	sp,sp,-28
   541c8:	df000615 	stw	fp,24(sp)
   541cc:	df000604 	addi	fp,sp,24
   541d0:	e13ffe15 	stw	r4,-8(fp)
   541d4:	e17fff15 	stw	r5,-4(fp)
   541d8:	e0bfff17 	ldw	r2,-4(fp)
   541dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   541e0:	0005303a 	rdctl	r2,status
   541e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   541e8:	e0fffb17 	ldw	r3,-20(fp)
   541ec:	00bfff84 	movi	r2,-2
   541f0:	1884703a 	and	r2,r3,r2
   541f4:	1001703a 	wrctl	status,r2
  
  return context;
   541f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   541fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   54200:	00c00044 	movi	r3,1
   54204:	e0bffa17 	ldw	r2,-24(fp)
   54208:	1884983a 	sll	r2,r3,r2
   5420c:	1007883a 	mov	r3,r2
   54210:	d0a88217 	ldw	r2,-24056(gp)
   54214:	1884b03a 	or	r2,r3,r2
   54218:	d0a88215 	stw	r2,-24056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   5421c:	d0a88217 	ldw	r2,-24056(gp)
   54220:	100170fa 	wrctl	ienable,r2
   54224:	e0bffc17 	ldw	r2,-16(fp)
   54228:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5422c:	e0bffd17 	ldw	r2,-12(fp)
   54230:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   54234:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   54238:	0001883a 	nop
}
   5423c:	e037883a 	mov	sp,fp
   54240:	df000017 	ldw	fp,0(sp)
   54244:	dec00104 	addi	sp,sp,4
   54248:	f800283a 	ret

0005424c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   5424c:	defff904 	addi	sp,sp,-28
   54250:	df000615 	stw	fp,24(sp)
   54254:	df000604 	addi	fp,sp,24
   54258:	e13ffe15 	stw	r4,-8(fp)
   5425c:	e17fff15 	stw	r5,-4(fp)
   54260:	e0bfff17 	ldw	r2,-4(fp)
   54264:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54268:	0005303a 	rdctl	r2,status
   5426c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54270:	e0fffb17 	ldw	r3,-20(fp)
   54274:	00bfff84 	movi	r2,-2
   54278:	1884703a 	and	r2,r3,r2
   5427c:	1001703a 	wrctl	status,r2
  
  return context;
   54280:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   54284:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   54288:	00c00044 	movi	r3,1
   5428c:	e0bffa17 	ldw	r2,-24(fp)
   54290:	1884983a 	sll	r2,r3,r2
   54294:	0084303a 	nor	r2,zero,r2
   54298:	1007883a 	mov	r3,r2
   5429c:	d0a88217 	ldw	r2,-24056(gp)
   542a0:	1884703a 	and	r2,r3,r2
   542a4:	d0a88215 	stw	r2,-24056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   542a8:	d0a88217 	ldw	r2,-24056(gp)
   542ac:	100170fa 	wrctl	ienable,r2
   542b0:	e0bffc17 	ldw	r2,-16(fp)
   542b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   542b8:	e0bffd17 	ldw	r2,-12(fp)
   542bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   542c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   542c4:	0001883a 	nop
}
   542c8:	e037883a 	mov	sp,fp
   542cc:	df000017 	ldw	fp,0(sp)
   542d0:	dec00104 	addi	sp,sp,4
   542d4:	f800283a 	ret

000542d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   542d8:	defffc04 	addi	sp,sp,-16
   542dc:	df000315 	stw	fp,12(sp)
   542e0:	df000304 	addi	fp,sp,12
   542e4:	e13ffe15 	stw	r4,-8(fp)
   542e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   542ec:	000530fa 	rdctl	r2,ienable
   542f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   542f4:	00c00044 	movi	r3,1
   542f8:	e0bfff17 	ldw	r2,-4(fp)
   542fc:	1884983a 	sll	r2,r3,r2
   54300:	1007883a 	mov	r3,r2
   54304:	e0bffd17 	ldw	r2,-12(fp)
   54308:	1884703a 	and	r2,r3,r2
   5430c:	1004c03a 	cmpne	r2,r2,zero
   54310:	10803fcc 	andi	r2,r2,255
}
   54314:	e037883a 	mov	sp,fp
   54318:	df000017 	ldw	fp,0(sp)
   5431c:	dec00104 	addi	sp,sp,4
   54320:	f800283a 	ret

00054324 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54324:	defff504 	addi	sp,sp,-44
   54328:	dfc00a15 	stw	ra,40(sp)
   5432c:	df000915 	stw	fp,36(sp)
   54330:	df000904 	addi	fp,sp,36
   54334:	e13ffc15 	stw	r4,-16(fp)
   54338:	e17ffd15 	stw	r5,-12(fp)
   5433c:	e1bffe15 	stw	r6,-8(fp)
   54340:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   54344:	00bffa84 	movi	r2,-22
   54348:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   5434c:	e0bffd17 	ldw	r2,-12(fp)
   54350:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   54354:	e0bff817 	ldw	r2,-32(fp)
   54358:	10800808 	cmpgei	r2,r2,32
   5435c:	1000271e 	bne	r2,zero,543fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54360:	0005303a 	rdctl	r2,status
   54364:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54368:	e0fffb17 	ldw	r3,-20(fp)
   5436c:	00bfff84 	movi	r2,-2
   54370:	1884703a 	and	r2,r3,r2
   54374:	1001703a 	wrctl	status,r2
  
  return context;
   54378:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   5437c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   54380:	008001b4 	movhi	r2,6
   54384:	108cb504 	addi	r2,r2,13012
   54388:	e0fff817 	ldw	r3,-32(fp)
   5438c:	180690fa 	slli	r3,r3,3
   54390:	10c5883a 	add	r2,r2,r3
   54394:	e0fffe17 	ldw	r3,-8(fp)
   54398:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   5439c:	008001b4 	movhi	r2,6
   543a0:	108cb504 	addi	r2,r2,13012
   543a4:	e0fff817 	ldw	r3,-32(fp)
   543a8:	180690fa 	slli	r3,r3,3
   543ac:	10c5883a 	add	r2,r2,r3
   543b0:	10800104 	addi	r2,r2,4
   543b4:	e0ffff17 	ldw	r3,-4(fp)
   543b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   543bc:	e0bffe17 	ldw	r2,-8(fp)
   543c0:	10000526 	beq	r2,zero,543d8 <alt_iic_isr_register+0xb4>
   543c4:	e0bff817 	ldw	r2,-32(fp)
   543c8:	100b883a 	mov	r5,r2
   543cc:	e13ffc17 	ldw	r4,-16(fp)
   543d0:	00541c40 	call	541c4 <alt_ic_irq_enable>
   543d4:	00000406 	br	543e8 <alt_iic_isr_register+0xc4>
   543d8:	e0bff817 	ldw	r2,-32(fp)
   543dc:	100b883a 	mov	r5,r2
   543e0:	e13ffc17 	ldw	r4,-16(fp)
   543e4:	005424c0 	call	5424c <alt_ic_irq_disable>
   543e8:	e0bff715 	stw	r2,-36(fp)
   543ec:	e0bffa17 	ldw	r2,-24(fp)
   543f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   543f4:	e0bff917 	ldw	r2,-28(fp)
   543f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   543fc:	e0bff717 	ldw	r2,-36(fp)
}
   54400:	e037883a 	mov	sp,fp
   54404:	dfc00117 	ldw	ra,4(sp)
   54408:	df000017 	ldw	fp,0(sp)
   5440c:	dec00204 	addi	sp,sp,8
   54410:	f800283a 	ret

00054414 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54414:	defffe04 	addi	sp,sp,-8
   54418:	dfc00115 	stw	ra,4(sp)
   5441c:	df000015 	stw	fp,0(sp)
   54420:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54424:	d0a02117 	ldw	r2,-32636(gp)
   54428:	10000326 	beq	r2,zero,54438 <alt_get_errno+0x24>
   5442c:	d0a02117 	ldw	r2,-32636(gp)
   54430:	103ee83a 	callr	r2
   54434:	00000106 	br	5443c <alt_get_errno+0x28>
   54438:	d0a87a04 	addi	r2,gp,-24088
}
   5443c:	e037883a 	mov	sp,fp
   54440:	dfc00117 	ldw	ra,4(sp)
   54444:	df000017 	ldw	fp,0(sp)
   54448:	dec00204 	addi	sp,sp,8
   5444c:	f800283a 	ret

00054450 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   54450:	deffed04 	addi	sp,sp,-76
   54454:	dfc01215 	stw	ra,72(sp)
   54458:	df001115 	stw	fp,68(sp)
   5445c:	df001104 	addi	fp,sp,68
   54460:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   54464:	e0bfff17 	ldw	r2,-4(fp)
   54468:	10000616 	blt	r2,zero,54484 <isatty+0x34>
   5446c:	e0bfff17 	ldw	r2,-4(fp)
   54470:	10c00324 	muli	r3,r2,12
   54474:	008001b4 	movhi	r2,6
   54478:	10b94604 	addi	r2,r2,-6888
   5447c:	1885883a 	add	r2,r3,r2
   54480:	00000106 	br	54488 <isatty+0x38>
   54484:	0005883a 	mov	r2,zero
   54488:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   5448c:	e0bfef17 	ldw	r2,-68(fp)
   54490:	10000e26 	beq	r2,zero,544cc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   54494:	e0bfef17 	ldw	r2,-68(fp)
   54498:	10800017 	ldw	r2,0(r2)
   5449c:	10800817 	ldw	r2,32(r2)
   544a0:	1000021e 	bne	r2,zero,544ac <isatty+0x5c>
    {
      return 1;
   544a4:	00800044 	movi	r2,1
   544a8:	00000d06 	br	544e0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   544ac:	e0bff004 	addi	r2,fp,-64
   544b0:	100b883a 	mov	r5,r2
   544b4:	e13fff17 	ldw	r4,-4(fp)
   544b8:	0053eb00 	call	53eb0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   544bc:	e0bff117 	ldw	r2,-60(fp)
   544c0:	10880020 	cmpeqi	r2,r2,8192
   544c4:	10803fcc 	andi	r2,r2,255
   544c8:	00000506 	br	544e0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   544cc:	00544140 	call	54414 <alt_get_errno>
   544d0:	1007883a 	mov	r3,r2
   544d4:	00801444 	movi	r2,81
   544d8:	18800015 	stw	r2,0(r3)
    return 0;
   544dc:	0005883a 	mov	r2,zero
  }
}
   544e0:	e037883a 	mov	sp,fp
   544e4:	dfc00117 	ldw	ra,4(sp)
   544e8:	df000017 	ldw	fp,0(sp)
   544ec:	dec00204 	addi	sp,sp,8
   544f0:	f800283a 	ret

000544f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   544f4:	defffe04 	addi	sp,sp,-8
   544f8:	dfc00115 	stw	ra,4(sp)
   544fc:	df000015 	stw	fp,0(sp)
   54500:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54504:	d0a02117 	ldw	r2,-32636(gp)
   54508:	10000326 	beq	r2,zero,54518 <alt_get_errno+0x24>
   5450c:	d0a02117 	ldw	r2,-32636(gp)
   54510:	103ee83a 	callr	r2
   54514:	00000106 	br	5451c <alt_get_errno+0x28>
   54518:	d0a87a04 	addi	r2,gp,-24088
}
   5451c:	e037883a 	mov	sp,fp
   54520:	dfc00117 	ldw	ra,4(sp)
   54524:	df000017 	ldw	fp,0(sp)
   54528:	dec00204 	addi	sp,sp,8
   5452c:	f800283a 	ret

00054530 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   54530:	defffb04 	addi	sp,sp,-20
   54534:	dfc00415 	stw	ra,16(sp)
   54538:	df000315 	stw	fp,12(sp)
   5453c:	df000304 	addi	fp,sp,12
   54540:	e13ffe15 	stw	r4,-8(fp)
   54544:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   54548:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   5454c:	e0bffe17 	ldw	r2,-8(fp)
   54550:	00802f16 	blt	zero,r2,54610 <kill+0xe0>
  {
    switch (sig)
   54554:	e0bfff17 	ldw	r2,-4(fp)
   54558:	10800828 	cmpgeui	r2,r2,32
   5455c:	1000291e 	bne	r2,zero,54604 <kill+0xd4>
   54560:	e0bfff17 	ldw	r2,-4(fp)
   54564:	100690ba 	slli	r3,r2,2
   54568:	00800174 	movhi	r2,5
   5456c:	10915f04 	addi	r2,r2,17788
   54570:	1885883a 	add	r2,r3,r2
   54574:	10800017 	ldw	r2,0(r2)
   54578:	1000683a 	jmp	r2
   5457c:	00054624 	muli	zero,zero,5400
   54580:	00054604 	movi	zero,5400
   54584:	00054604 	movi	zero,5400
   54588:	000545fc 	xorhi	zero,zero,5399
   5458c:	000545fc 	xorhi	zero,zero,5399
   54590:	000545fc 	xorhi	zero,zero,5399
   54594:	000545fc 	xorhi	zero,zero,5399
   54598:	00054604 	movi	zero,5400
   5459c:	000545fc 	xorhi	zero,zero,5399
   545a0:	000545fc 	xorhi	zero,zero,5399
   545a4:	000545fc 	xorhi	zero,zero,5399
   545a8:	000545fc 	xorhi	zero,zero,5399
   545ac:	000545fc 	xorhi	zero,zero,5399
   545b0:	000545fc 	xorhi	zero,zero,5399
   545b4:	000545fc 	xorhi	zero,zero,5399
   545b8:	000545fc 	xorhi	zero,zero,5399
   545bc:	00054624 	muli	zero,zero,5400
   545c0:	00054604 	movi	zero,5400
   545c4:	00054604 	movi	zero,5400
   545c8:	00054604 	movi	zero,5400
   545cc:	00054624 	muli	zero,zero,5400
   545d0:	00054604 	movi	zero,5400
   545d4:	00054604 	movi	zero,5400
   545d8:	000545fc 	xorhi	zero,zero,5399
   545dc:	000545fc 	xorhi	zero,zero,5399
   545e0:	000545fc 	xorhi	zero,zero,5399
   545e4:	000545fc 	xorhi	zero,zero,5399
   545e8:	000545fc 	xorhi	zero,zero,5399
   545ec:	00054604 	movi	zero,5400
   545f0:	00054604 	movi	zero,5400
   545f4:	000545fc 	xorhi	zero,zero,5399
   545f8:	000545fc 	xorhi	zero,zero,5399
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   545fc:	0009883a 	mov	r4,zero
   54600:	0053e400 	call	53e40 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   54604:	00800584 	movi	r2,22
   54608:	e0bffd15 	stw	r2,-12(fp)
   5460c:	00000606 	br	54628 <kill+0xf8>
    }
  }

  else if (pid > 0)
   54610:	e0bffe17 	ldw	r2,-8(fp)
   54614:	0080040e 	bge	zero,r2,54628 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   54618:	008000c4 	movi	r2,3
   5461c:	e0bffd15 	stw	r2,-12(fp)
   54620:	00000106 	br	54628 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   54624:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   54628:	e0bffd17 	ldw	r2,-12(fp)
   5462c:	10000626 	beq	r2,zero,54648 <kill+0x118>
  {
    ALT_ERRNO = status;
   54630:	00544f40 	call	544f4 <alt_get_errno>
   54634:	1007883a 	mov	r3,r2
   54638:	e0bffd17 	ldw	r2,-12(fp)
   5463c:	18800015 	stw	r2,0(r3)
    return -1;
   54640:	00bfffc4 	movi	r2,-1
   54644:	00000106 	br	5464c <kill+0x11c>
  }

  return 0;
   54648:	0005883a 	mov	r2,zero
}
   5464c:	e037883a 	mov	sp,fp
   54650:	dfc00117 	ldw	ra,4(sp)
   54654:	df000017 	ldw	fp,0(sp)
   54658:	dec00204 	addi	sp,sp,8
   5465c:	f800283a 	ret

00054660 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   54660:	defffc04 	addi	sp,sp,-16
   54664:	df000315 	stw	fp,12(sp)
   54668:	df000304 	addi	fp,sp,12
   5466c:	e13ffd15 	stw	r4,-12(fp)
   54670:	e17ffe15 	stw	r5,-8(fp)
   54674:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   54678:	e0fffe17 	ldw	r3,-8(fp)
   5467c:	e0bffd17 	ldw	r2,-12(fp)
   54680:	18800c26 	beq	r3,r2,546b4 <alt_load_section+0x54>
  {
    while( to != end )
   54684:	00000806 	br	546a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   54688:	e0bffe17 	ldw	r2,-8(fp)
   5468c:	10c00104 	addi	r3,r2,4
   54690:	e0fffe15 	stw	r3,-8(fp)
   54694:	e0fffd17 	ldw	r3,-12(fp)
   54698:	19000104 	addi	r4,r3,4
   5469c:	e13ffd15 	stw	r4,-12(fp)
   546a0:	18c00017 	ldw	r3,0(r3)
   546a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   546a8:	e0fffe17 	ldw	r3,-8(fp)
   546ac:	e0bfff17 	ldw	r2,-4(fp)
   546b0:	18bff51e 	bne	r3,r2,54688 <__alt_mem_epcs_flash_controller+0xfe043688>
    {
      *to++ = *from++;
    }
  }
}
   546b4:	0001883a 	nop
   546b8:	e037883a 	mov	sp,fp
   546bc:	df000017 	ldw	fp,0(sp)
   546c0:	dec00104 	addi	sp,sp,4
   546c4:	f800283a 	ret

000546c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   546c8:	defffe04 	addi	sp,sp,-8
   546cc:	dfc00115 	stw	ra,4(sp)
   546d0:	df000015 	stw	fp,0(sp)
   546d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   546d8:	018001b4 	movhi	r6,6
   546dc:	31be4a04 	addi	r6,r6,-1752
   546e0:	014001b4 	movhi	r5,6
   546e4:	2975ff04 	addi	r5,r5,-10244
   546e8:	010001b4 	movhi	r4,6
   546ec:	213e4a04 	addi	r4,r4,-1752
   546f0:	00546600 	call	54660 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   546f4:	01800034 	movhi	r6,0
   546f8:	31809104 	addi	r6,r6,580
   546fc:	01400034 	movhi	r5,0
   54700:	29400804 	addi	r5,r5,32
   54704:	01000034 	movhi	r4,0
   54708:	21000804 	addi	r4,r4,32
   5470c:	00546600 	call	54660 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   54710:	018001b4 	movhi	r6,6
   54714:	31b5ff04 	addi	r6,r6,-10244
   54718:	014001b4 	movhi	r5,6
   5471c:	2960dd04 	addi	r5,r5,-31884
   54720:	010001b4 	movhi	r4,6
   54724:	2120dd04 	addi	r4,r4,-31884
   54728:	00546600 	call	54660 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   5472c:	00576540 	call	57654 <alt_dcache_flush_all>
  alt_icache_flush_all();
   54730:	00578f80 	call	578f8 <alt_icache_flush_all>
}
   54734:	0001883a 	nop
   54738:	e037883a 	mov	sp,fp
   5473c:	dfc00117 	ldw	ra,4(sp)
   54740:	df000017 	ldw	fp,0(sp)
   54744:	dec00204 	addi	sp,sp,8
   54748:	f800283a 	ret

0005474c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5474c:	defffe04 	addi	sp,sp,-8
   54750:	dfc00115 	stw	ra,4(sp)
   54754:	df000015 	stw	fp,0(sp)
   54758:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5475c:	d0a02117 	ldw	r2,-32636(gp)
   54760:	10000326 	beq	r2,zero,54770 <alt_get_errno+0x24>
   54764:	d0a02117 	ldw	r2,-32636(gp)
   54768:	103ee83a 	callr	r2
   5476c:	00000106 	br	54774 <alt_get_errno+0x28>
   54770:	d0a87a04 	addi	r2,gp,-24088
}
   54774:	e037883a 	mov	sp,fp
   54778:	dfc00117 	ldw	ra,4(sp)
   5477c:	df000017 	ldw	fp,0(sp)
   54780:	dec00204 	addi	sp,sp,8
   54784:	f800283a 	ret

00054788 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   54788:	defff904 	addi	sp,sp,-28
   5478c:	dfc00615 	stw	ra,24(sp)
   54790:	df000515 	stw	fp,20(sp)
   54794:	df000504 	addi	fp,sp,20
   54798:	e13ffd15 	stw	r4,-12(fp)
   5479c:	e17ffe15 	stw	r5,-8(fp)
   547a0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   547a4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   547a8:	e0bffd17 	ldw	r2,-12(fp)
   547ac:	10000616 	blt	r2,zero,547c8 <lseek+0x40>
   547b0:	e0bffd17 	ldw	r2,-12(fp)
   547b4:	10c00324 	muli	r3,r2,12
   547b8:	008001b4 	movhi	r2,6
   547bc:	10b94604 	addi	r2,r2,-6888
   547c0:	1885883a 	add	r2,r3,r2
   547c4:	00000106 	br	547cc <lseek+0x44>
   547c8:	0005883a 	mov	r2,zero
   547cc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   547d0:	e0bffc17 	ldw	r2,-16(fp)
   547d4:	10001026 	beq	r2,zero,54818 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   547d8:	e0bffc17 	ldw	r2,-16(fp)
   547dc:	10800017 	ldw	r2,0(r2)
   547e0:	10800717 	ldw	r2,28(r2)
   547e4:	10000926 	beq	r2,zero,5480c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   547e8:	e0bffc17 	ldw	r2,-16(fp)
   547ec:	10800017 	ldw	r2,0(r2)
   547f0:	10800717 	ldw	r2,28(r2)
   547f4:	e1bfff17 	ldw	r6,-4(fp)
   547f8:	e17ffe17 	ldw	r5,-8(fp)
   547fc:	e13ffc17 	ldw	r4,-16(fp)
   54800:	103ee83a 	callr	r2
   54804:	e0bffb15 	stw	r2,-20(fp)
   54808:	00000506 	br	54820 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   5480c:	00bfde84 	movi	r2,-134
   54810:	e0bffb15 	stw	r2,-20(fp)
   54814:	00000206 	br	54820 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   54818:	00bfebc4 	movi	r2,-81
   5481c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   54820:	e0bffb17 	ldw	r2,-20(fp)
   54824:	1000070e 	bge	r2,zero,54844 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   54828:	005474c0 	call	5474c <alt_get_errno>
   5482c:	1007883a 	mov	r3,r2
   54830:	e0bffb17 	ldw	r2,-20(fp)
   54834:	0085c83a 	sub	r2,zero,r2
   54838:	18800015 	stw	r2,0(r3)
    rc = -1;
   5483c:	00bfffc4 	movi	r2,-1
   54840:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   54844:	e0bffb17 	ldw	r2,-20(fp)
}
   54848:	e037883a 	mov	sp,fp
   5484c:	dfc00117 	ldw	ra,4(sp)
   54850:	df000017 	ldw	fp,0(sp)
   54854:	dec00204 	addi	sp,sp,8
   54858:	f800283a 	ret

0005485c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   5485c:	defffd04 	addi	sp,sp,-12
   54860:	dfc00215 	stw	ra,8(sp)
   54864:	df000115 	stw	fp,4(sp)
   54868:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   5486c:	0009883a 	mov	r4,zero
   54870:	0054ea80 	call	54ea8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   54874:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   54878:	0054ee00 	call	54ee0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   5487c:	018001b4 	movhi	r6,6
   54880:	31b5ed04 	addi	r6,r6,-10316
   54884:	014001b4 	movhi	r5,6
   54888:	2975ed04 	addi	r5,r5,-10316
   5488c:	010001b4 	movhi	r4,6
   54890:	2135ed04 	addi	r4,r4,-10316
   54894:	0057a8c0 	call	57a8c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   54898:	005777c0 	call	5777c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   5489c:	01000174 	movhi	r4,5
   548a0:	211df704 	addi	r4,r4,30684
   548a4:	00582480 	call	58248 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   548a8:	d0a88317 	ldw	r2,-24052(gp)
   548ac:	d0e88417 	ldw	r3,-24048(gp)
   548b0:	d1288517 	ldw	r4,-24044(gp)
   548b4:	200d883a 	mov	r6,r4
   548b8:	180b883a 	mov	r5,r3
   548bc:	1009883a 	mov	r4,r2
   548c0:	00019fc0 	call	19fc <main>
   548c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   548c8:	01000044 	movi	r4,1
   548cc:	0053cfc0 	call	53cfc <close>
  exit (result);
   548d0:	e13fff17 	ldw	r4,-4(fp)
   548d4:	00451a40 	call	451a4 <exit>

000548d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   548d8:	defffe04 	addi	sp,sp,-8
   548dc:	df000115 	stw	fp,4(sp)
   548e0:	df000104 	addi	fp,sp,4
   548e4:	e13fff15 	stw	r4,-4(fp)
}
   548e8:	0001883a 	nop
   548ec:	e037883a 	mov	sp,fp
   548f0:	df000017 	ldw	fp,0(sp)
   548f4:	dec00104 	addi	sp,sp,4
   548f8:	f800283a 	ret

000548fc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   548fc:	defffe04 	addi	sp,sp,-8
   54900:	df000115 	stw	fp,4(sp)
   54904:	df000104 	addi	fp,sp,4
   54908:	e13fff15 	stw	r4,-4(fp)
}
   5490c:	0001883a 	nop
   54910:	e037883a 	mov	sp,fp
   54914:	df000017 	ldw	fp,0(sp)
   54918:	dec00104 	addi	sp,sp,4
   5491c:	f800283a 	ret

00054920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54920:	defffe04 	addi	sp,sp,-8
   54924:	dfc00115 	stw	ra,4(sp)
   54928:	df000015 	stw	fp,0(sp)
   5492c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54930:	d0a02117 	ldw	r2,-32636(gp)
   54934:	10000326 	beq	r2,zero,54944 <alt_get_errno+0x24>
   54938:	d0a02117 	ldw	r2,-32636(gp)
   5493c:	103ee83a 	callr	r2
   54940:	00000106 	br	54948 <alt_get_errno+0x28>
   54944:	d0a87a04 	addi	r2,gp,-24088
}
   54948:	e037883a 	mov	sp,fp
   5494c:	dfc00117 	ldw	ra,4(sp)
   54950:	df000017 	ldw	fp,0(sp)
   54954:	dec00204 	addi	sp,sp,8
   54958:	f800283a 	ret

0005495c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   5495c:	defff904 	addi	sp,sp,-28
   54960:	dfc00615 	stw	ra,24(sp)
   54964:	df000515 	stw	fp,20(sp)
   54968:	df000504 	addi	fp,sp,20
   5496c:	e13ffd15 	stw	r4,-12(fp)
   54970:	e17ffe15 	stw	r5,-8(fp)
   54974:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   54978:	e0bffd17 	ldw	r2,-12(fp)
   5497c:	10000616 	blt	r2,zero,54998 <read+0x3c>
   54980:	e0bffd17 	ldw	r2,-12(fp)
   54984:	10c00324 	muli	r3,r2,12
   54988:	008001b4 	movhi	r2,6
   5498c:	10b94604 	addi	r2,r2,-6888
   54990:	1885883a 	add	r2,r3,r2
   54994:	00000106 	br	5499c <read+0x40>
   54998:	0005883a 	mov	r2,zero
   5499c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   549a0:	e0bffb17 	ldw	r2,-20(fp)
   549a4:	10002226 	beq	r2,zero,54a30 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   549a8:	e0bffb17 	ldw	r2,-20(fp)
   549ac:	10800217 	ldw	r2,8(r2)
   549b0:	108000cc 	andi	r2,r2,3
   549b4:	10800060 	cmpeqi	r2,r2,1
   549b8:	1000181e 	bne	r2,zero,54a1c <read+0xc0>
        (fd->dev->read))
   549bc:	e0bffb17 	ldw	r2,-20(fp)
   549c0:	10800017 	ldw	r2,0(r2)
   549c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   549c8:	10001426 	beq	r2,zero,54a1c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   549cc:	e0bffb17 	ldw	r2,-20(fp)
   549d0:	10800017 	ldw	r2,0(r2)
   549d4:	10800517 	ldw	r2,20(r2)
   549d8:	e0ffff17 	ldw	r3,-4(fp)
   549dc:	180d883a 	mov	r6,r3
   549e0:	e17ffe17 	ldw	r5,-8(fp)
   549e4:	e13ffb17 	ldw	r4,-20(fp)
   549e8:	103ee83a 	callr	r2
   549ec:	e0bffc15 	stw	r2,-16(fp)
   549f0:	e0bffc17 	ldw	r2,-16(fp)
   549f4:	1000070e 	bge	r2,zero,54a14 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   549f8:	00549200 	call	54920 <alt_get_errno>
   549fc:	1007883a 	mov	r3,r2
   54a00:	e0bffc17 	ldw	r2,-16(fp)
   54a04:	0085c83a 	sub	r2,zero,r2
   54a08:	18800015 	stw	r2,0(r3)
          return -1;
   54a0c:	00bfffc4 	movi	r2,-1
   54a10:	00000c06 	br	54a44 <read+0xe8>
        }
        return rval;
   54a14:	e0bffc17 	ldw	r2,-16(fp)
   54a18:	00000a06 	br	54a44 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   54a1c:	00549200 	call	54920 <alt_get_errno>
   54a20:	1007883a 	mov	r3,r2
   54a24:	00800344 	movi	r2,13
   54a28:	18800015 	stw	r2,0(r3)
   54a2c:	00000406 	br	54a40 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   54a30:	00549200 	call	54920 <alt_get_errno>
   54a34:	1007883a 	mov	r3,r2
   54a38:	00801444 	movi	r2,81
   54a3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   54a40:	00bfffc4 	movi	r2,-1
}
   54a44:	e037883a 	mov	sp,fp
   54a48:	dfc00117 	ldw	ra,4(sp)
   54a4c:	df000017 	ldw	fp,0(sp)
   54a50:	dec00204 	addi	sp,sp,8
   54a54:	f800283a 	ret

00054a58 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   54a58:	defffe04 	addi	sp,sp,-8
   54a5c:	df000115 	stw	fp,4(sp)
   54a60:	df000104 	addi	fp,sp,4
   54a64:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   54a68:	e0bfff17 	ldw	r2,-4(fp)
   54a6c:	108000d0 	cmplti	r2,r2,3
   54a70:	10000d1e 	bne	r2,zero,54aa8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   54a74:	008001b4 	movhi	r2,6
   54a78:	10b94604 	addi	r2,r2,-6888
   54a7c:	e0ffff17 	ldw	r3,-4(fp)
   54a80:	18c00324 	muli	r3,r3,12
   54a84:	10c5883a 	add	r2,r2,r3
   54a88:	10800204 	addi	r2,r2,8
   54a8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   54a90:	008001b4 	movhi	r2,6
   54a94:	10b94604 	addi	r2,r2,-6888
   54a98:	e0ffff17 	ldw	r3,-4(fp)
   54a9c:	18c00324 	muli	r3,r3,12
   54aa0:	10c5883a 	add	r2,r2,r3
   54aa4:	10000015 	stw	zero,0(r2)
  }
}
   54aa8:	0001883a 	nop
   54aac:	e037883a 	mov	sp,fp
   54ab0:	df000017 	ldw	fp,0(sp)
   54ab4:	dec00104 	addi	sp,sp,4
   54ab8:	f800283a 	ret

00054abc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   54abc:	defff904 	addi	sp,sp,-28
   54ac0:	df000615 	stw	fp,24(sp)
   54ac4:	df000604 	addi	fp,sp,24
   54ac8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54acc:	0005303a 	rdctl	r2,status
   54ad0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54ad4:	e0fffe17 	ldw	r3,-8(fp)
   54ad8:	00bfff84 	movi	r2,-2
   54adc:	1884703a 	and	r2,r3,r2
   54ae0:	1001703a 	wrctl	status,r2
  
  return context;
   54ae4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   54ae8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   54aec:	d0a02317 	ldw	r2,-32628(gp)
   54af0:	10c000c4 	addi	r3,r2,3
   54af4:	00bfff04 	movi	r2,-4
   54af8:	1884703a 	and	r2,r3,r2
   54afc:	d0a02315 	stw	r2,-32628(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   54b00:	d0e02317 	ldw	r3,-32628(gp)
   54b04:	e0bfff17 	ldw	r2,-4(fp)
   54b08:	1887883a 	add	r3,r3,r2
   54b0c:	00808034 	movhi	r2,512
   54b10:	10800004 	addi	r2,r2,0
   54b14:	10c0062e 	bgeu	r2,r3,54b30 <sbrk+0x74>
   54b18:	e0bffb17 	ldw	r2,-20(fp)
   54b1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54b20:	e0bffa17 	ldw	r2,-24(fp)
   54b24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   54b28:	00bfffc4 	movi	r2,-1
   54b2c:	00000b06 	br	54b5c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   54b30:	d0a02317 	ldw	r2,-32628(gp)
   54b34:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   54b38:	d0e02317 	ldw	r3,-32628(gp)
   54b3c:	e0bfff17 	ldw	r2,-4(fp)
   54b40:	1885883a 	add	r2,r3,r2
   54b44:	d0a02315 	stw	r2,-32628(gp)
   54b48:	e0bffb17 	ldw	r2,-20(fp)
   54b4c:	e0bffc15 	stw	r2,-16(fp)
   54b50:	e0bffc17 	ldw	r2,-16(fp)
   54b54:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   54b58:	e0bffd17 	ldw	r2,-12(fp)
} 
   54b5c:	e037883a 	mov	sp,fp
   54b60:	df000017 	ldw	fp,0(sp)
   54b64:	dec00104 	addi	sp,sp,4
   54b68:	f800283a 	ret

00054b6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   54b6c:	defffa04 	addi	sp,sp,-24
   54b70:	df000515 	stw	fp,20(sp)
   54b74:	df000504 	addi	fp,sp,20
   54b78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54b7c:	0005303a 	rdctl	r2,status
   54b80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54b84:	e0fffc17 	ldw	r3,-16(fp)
   54b88:	00bfff84 	movi	r2,-2
   54b8c:	1884703a 	and	r2,r3,r2
   54b90:	1001703a 	wrctl	status,r2
  
  return context;
   54b94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   54b98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   54b9c:	e0bfff17 	ldw	r2,-4(fp)
   54ba0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   54ba4:	e0bffd17 	ldw	r2,-12(fp)
   54ba8:	10800017 	ldw	r2,0(r2)
   54bac:	e0fffd17 	ldw	r3,-12(fp)
   54bb0:	18c00117 	ldw	r3,4(r3)
   54bb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   54bb8:	e0bffd17 	ldw	r2,-12(fp)
   54bbc:	10800117 	ldw	r2,4(r2)
   54bc0:	e0fffd17 	ldw	r3,-12(fp)
   54bc4:	18c00017 	ldw	r3,0(r3)
   54bc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   54bcc:	e0bffd17 	ldw	r2,-12(fp)
   54bd0:	e0fffd17 	ldw	r3,-12(fp)
   54bd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   54bd8:	e0bffd17 	ldw	r2,-12(fp)
   54bdc:	e0fffd17 	ldw	r3,-12(fp)
   54be0:	10c00015 	stw	r3,0(r2)
   54be4:	e0bffb17 	ldw	r2,-20(fp)
   54be8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54bec:	e0bffe17 	ldw	r2,-8(fp)
   54bf0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   54bf4:	0001883a 	nop
   54bf8:	e037883a 	mov	sp,fp
   54bfc:	df000017 	ldw	fp,0(sp)
   54c00:	dec00104 	addi	sp,sp,4
   54c04:	f800283a 	ret

00054c08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   54c08:	defffb04 	addi	sp,sp,-20
   54c0c:	dfc00415 	stw	ra,16(sp)
   54c10:	df000315 	stw	fp,12(sp)
   54c14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   54c18:	d0a02417 	ldw	r2,-32624(gp)
   54c1c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   54c20:	d0a88717 	ldw	r2,-24036(gp)
   54c24:	10800044 	addi	r2,r2,1
   54c28:	d0a88715 	stw	r2,-24036(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   54c2c:	00002e06 	br	54ce8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   54c30:	e0bffd17 	ldw	r2,-12(fp)
   54c34:	10800017 	ldw	r2,0(r2)
   54c38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   54c3c:	e0bffd17 	ldw	r2,-12(fp)
   54c40:	10800403 	ldbu	r2,16(r2)
   54c44:	10803fcc 	andi	r2,r2,255
   54c48:	10000426 	beq	r2,zero,54c5c <alt_tick+0x54>
   54c4c:	d0a88717 	ldw	r2,-24036(gp)
   54c50:	1000021e 	bne	r2,zero,54c5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   54c54:	e0bffd17 	ldw	r2,-12(fp)
   54c58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   54c5c:	e0bffd17 	ldw	r2,-12(fp)
   54c60:	10800217 	ldw	r2,8(r2)
   54c64:	d0e88717 	ldw	r3,-24036(gp)
   54c68:	18801d36 	bltu	r3,r2,54ce0 <alt_tick+0xd8>
   54c6c:	e0bffd17 	ldw	r2,-12(fp)
   54c70:	10800403 	ldbu	r2,16(r2)
   54c74:	10803fcc 	andi	r2,r2,255
   54c78:	1000191e 	bne	r2,zero,54ce0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   54c7c:	e0bffd17 	ldw	r2,-12(fp)
   54c80:	10800317 	ldw	r2,12(r2)
   54c84:	e0fffd17 	ldw	r3,-12(fp)
   54c88:	18c00517 	ldw	r3,20(r3)
   54c8c:	1809883a 	mov	r4,r3
   54c90:	103ee83a 	callr	r2
   54c94:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   54c98:	e0bfff17 	ldw	r2,-4(fp)
   54c9c:	1000031e 	bne	r2,zero,54cac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   54ca0:	e13ffd17 	ldw	r4,-12(fp)
   54ca4:	0054b6c0 	call	54b6c <alt_alarm_stop>
   54ca8:	00000d06 	br	54ce0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   54cac:	e0bffd17 	ldw	r2,-12(fp)
   54cb0:	10c00217 	ldw	r3,8(r2)
   54cb4:	e0bfff17 	ldw	r2,-4(fp)
   54cb8:	1887883a 	add	r3,r3,r2
   54cbc:	e0bffd17 	ldw	r2,-12(fp)
   54cc0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   54cc4:	e0bffd17 	ldw	r2,-12(fp)
   54cc8:	10c00217 	ldw	r3,8(r2)
   54ccc:	d0a88717 	ldw	r2,-24036(gp)
   54cd0:	1880032e 	bgeu	r3,r2,54ce0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   54cd4:	e0bffd17 	ldw	r2,-12(fp)
   54cd8:	00c00044 	movi	r3,1
   54cdc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   54ce0:	e0bffe17 	ldw	r2,-8(fp)
   54ce4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   54ce8:	e0fffd17 	ldw	r3,-12(fp)
   54cec:	d0a02404 	addi	r2,gp,-32624
   54cf0:	18bfcf1e 	bne	r3,r2,54c30 <__alt_mem_epcs_flash_controller+0xfe043c30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   54cf4:	0001883a 	nop
}
   54cf8:	0001883a 	nop
   54cfc:	e037883a 	mov	sp,fp
   54d00:	dfc00117 	ldw	ra,4(sp)
   54d04:	df000017 	ldw	fp,0(sp)
   54d08:	dec00204 	addi	sp,sp,8
   54d0c:	f800283a 	ret

00054d10 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   54d10:	defffd04 	addi	sp,sp,-12
   54d14:	dfc00215 	stw	ra,8(sp)
   54d18:	df000115 	stw	fp,4(sp)
   54d1c:	df000104 	addi	fp,sp,4
   54d20:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   54d24:	e13fff17 	ldw	r4,-4(fp)
   54d28:	00574fc0 	call	574fc <alt_busy_sleep>
}
   54d2c:	e037883a 	mov	sp,fp
   54d30:	dfc00117 	ldw	ra,4(sp)
   54d34:	df000017 	ldw	fp,0(sp)
   54d38:	dec00204 	addi	sp,sp,8
   54d3c:	f800283a 	ret

00054d40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54d40:	defffe04 	addi	sp,sp,-8
   54d44:	dfc00115 	stw	ra,4(sp)
   54d48:	df000015 	stw	fp,0(sp)
   54d4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54d50:	d0a02117 	ldw	r2,-32636(gp)
   54d54:	10000326 	beq	r2,zero,54d64 <alt_get_errno+0x24>
   54d58:	d0a02117 	ldw	r2,-32636(gp)
   54d5c:	103ee83a 	callr	r2
   54d60:	00000106 	br	54d68 <alt_get_errno+0x28>
   54d64:	d0a87a04 	addi	r2,gp,-24088
}
   54d68:	e037883a 	mov	sp,fp
   54d6c:	dfc00117 	ldw	ra,4(sp)
   54d70:	df000017 	ldw	fp,0(sp)
   54d74:	dec00204 	addi	sp,sp,8
   54d78:	f800283a 	ret

00054d7c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   54d7c:	defff904 	addi	sp,sp,-28
   54d80:	dfc00615 	stw	ra,24(sp)
   54d84:	df000515 	stw	fp,20(sp)
   54d88:	df000504 	addi	fp,sp,20
   54d8c:	e13ffd15 	stw	r4,-12(fp)
   54d90:	e17ffe15 	stw	r5,-8(fp)
   54d94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   54d98:	e0bffd17 	ldw	r2,-12(fp)
   54d9c:	10000616 	blt	r2,zero,54db8 <write+0x3c>
   54da0:	e0bffd17 	ldw	r2,-12(fp)
   54da4:	10c00324 	muli	r3,r2,12
   54da8:	008001b4 	movhi	r2,6
   54dac:	10b94604 	addi	r2,r2,-6888
   54db0:	1885883a 	add	r2,r3,r2
   54db4:	00000106 	br	54dbc <write+0x40>
   54db8:	0005883a 	mov	r2,zero
   54dbc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   54dc0:	e0bffb17 	ldw	r2,-20(fp)
   54dc4:	10002126 	beq	r2,zero,54e4c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   54dc8:	e0bffb17 	ldw	r2,-20(fp)
   54dcc:	10800217 	ldw	r2,8(r2)
   54dd0:	108000cc 	andi	r2,r2,3
   54dd4:	10001826 	beq	r2,zero,54e38 <write+0xbc>
   54dd8:	e0bffb17 	ldw	r2,-20(fp)
   54ddc:	10800017 	ldw	r2,0(r2)
   54de0:	10800617 	ldw	r2,24(r2)
   54de4:	10001426 	beq	r2,zero,54e38 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   54de8:	e0bffb17 	ldw	r2,-20(fp)
   54dec:	10800017 	ldw	r2,0(r2)
   54df0:	10800617 	ldw	r2,24(r2)
   54df4:	e0ffff17 	ldw	r3,-4(fp)
   54df8:	180d883a 	mov	r6,r3
   54dfc:	e17ffe17 	ldw	r5,-8(fp)
   54e00:	e13ffb17 	ldw	r4,-20(fp)
   54e04:	103ee83a 	callr	r2
   54e08:	e0bffc15 	stw	r2,-16(fp)
   54e0c:	e0bffc17 	ldw	r2,-16(fp)
   54e10:	1000070e 	bge	r2,zero,54e30 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   54e14:	0054d400 	call	54d40 <alt_get_errno>
   54e18:	1007883a 	mov	r3,r2
   54e1c:	e0bffc17 	ldw	r2,-16(fp)
   54e20:	0085c83a 	sub	r2,zero,r2
   54e24:	18800015 	stw	r2,0(r3)
        return -1;
   54e28:	00bfffc4 	movi	r2,-1
   54e2c:	00000c06 	br	54e60 <write+0xe4>
      }
      return rval;
   54e30:	e0bffc17 	ldw	r2,-16(fp)
   54e34:	00000a06 	br	54e60 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   54e38:	0054d400 	call	54d40 <alt_get_errno>
   54e3c:	1007883a 	mov	r3,r2
   54e40:	00800344 	movi	r2,13
   54e44:	18800015 	stw	r2,0(r3)
   54e48:	00000406 	br	54e5c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   54e4c:	0054d400 	call	54d40 <alt_get_errno>
   54e50:	1007883a 	mov	r3,r2
   54e54:	00801444 	movi	r2,81
   54e58:	18800015 	stw	r2,0(r3)
  }
  return -1;
   54e5c:	00bfffc4 	movi	r2,-1
}
   54e60:	e037883a 	mov	sp,fp
   54e64:	dfc00117 	ldw	ra,4(sp)
   54e68:	df000017 	ldw	fp,0(sp)
   54e6c:	dec00204 	addi	sp,sp,8
   54e70:	f800283a 	ret

00054e74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   54e74:	defffd04 	addi	sp,sp,-12
   54e78:	dfc00215 	stw	ra,8(sp)
   54e7c:	df000115 	stw	fp,4(sp)
   54e80:	df000104 	addi	fp,sp,4
   54e84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   54e88:	d1601e04 	addi	r5,gp,-32648
   54e8c:	e13fff17 	ldw	r4,-4(fp)
   54e90:	00576d80 	call	576d8 <alt_dev_llist_insert>
}
   54e94:	e037883a 	mov	sp,fp
   54e98:	dfc00117 	ldw	ra,4(sp)
   54e9c:	df000017 	ldw	fp,0(sp)
   54ea0:	dec00204 	addi	sp,sp,8
   54ea4:	f800283a 	ret

00054ea8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   54ea8:	defffd04 	addi	sp,sp,-12
   54eac:	dfc00215 	stw	ra,8(sp)
   54eb0:	df000115 	stw	fp,4(sp)
   54eb4:	df000104 	addi	fp,sp,4
   54eb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   54ebc:	0057d5c0 	call	57d5c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   54ec0:	00800044 	movi	r2,1
   54ec4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   54ec8:	0001883a 	nop
   54ecc:	e037883a 	mov	sp,fp
   54ed0:	dfc00117 	ldw	ra,4(sp)
   54ed4:	df000017 	ldw	fp,0(sp)
   54ed8:	dec00204 	addi	sp,sp,8
   54edc:	f800283a 	ret

00054ee0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   54ee0:	defffe04 	addi	sp,sp,-8
   54ee4:	dfc00115 	stw	ra,4(sp)
   54ee8:	df000015 	stw	fp,0(sp)
   54eec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
   54ef0:	010001b4 	movhi	r4,6
   54ef4:	2139a604 	addi	r4,r4,-6504
   54ef8:	0054f8c0 	call	54f8c <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   54efc:	000d883a 	mov	r6,zero
   54f00:	000b883a 	mov	r5,zero
   54f04:	010001b4 	movhi	r4,6
   54f08:	2139e304 	addi	r4,r4,-6260
   54f0c:	0055bb80 	call	55bb8 <altera_avalon_jtag_uart_init>
   54f10:	010001b4 	movhi	r4,6
   54f14:	2139d904 	addi	r4,r4,-6300
   54f18:	0054e740 	call	54e74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   54f1c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   54f20:	01800084 	movi	r6,2
   54f24:	000b883a 	mov	r5,zero
   54f28:	010001b4 	movhi	r4,6
   54f2c:	213dfb04 	addi	r4,r4,-2068
   54f30:	00565cc0 	call	565cc <altera_avalon_uart_init>
   54f34:	010001b4 	movhi	r4,6
   54f38:	213df104 	addi	r4,r4,-2108
   54f3c:	0054e740 	call	54e74 <alt_dev_reg>
}
   54f40:	0001883a 	nop
   54f44:	e037883a 	mov	sp,fp
   54f48:	dfc00117 	ldw	ra,4(sp)
   54f4c:	df000017 	ldw	fp,0(sp)
   54f50:	dec00204 	addi	sp,sp,8
   54f54:	f800283a 	ret

00054f58 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
   54f58:	defffd04 	addi	sp,sp,-12
   54f5c:	dfc00215 	stw	ra,8(sp)
   54f60:	df000115 	stw	fp,4(sp)
   54f64:	df000104 	addi	fp,sp,4
   54f68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   54f6c:	d1602604 	addi	r5,gp,-32616
   54f70:	e13fff17 	ldw	r4,-4(fp)
   54f74:	00576d80 	call	576d8 <alt_dev_llist_insert>
}
   54f78:	e037883a 	mov	sp,fp
   54f7c:	dfc00117 	ldw	ra,4(sp)
   54f80:	df000017 	ldw	fp,0(sp)
   54f84:	dec00204 	addi	sp,sp,8
   54f88:	f800283a 	ret

00054f8c <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
   54f8c:	defffc04 	addi	sp,sp,-16
   54f90:	dfc00315 	stw	ra,12(sp)
   54f94:	df000215 	stw	fp,8(sp)
   54f98:	df000204 	addi	fp,sp,8
   54f9c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   54fa0:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
   54fa4:	e13fff17 	ldw	r4,-4(fp)
   54fa8:	0054fe00 	call	54fe0 <alt_epcs_flash_query>
   54fac:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
   54fb0:	e0bffe17 	ldw	r2,-8(fp)
   54fb4:	1000041e 	bne	r2,zero,54fc8 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
   54fb8:	e0bfff17 	ldw	r2,-4(fp)
   54fbc:	1009883a 	mov	r4,r2
   54fc0:	0054f580 	call	54f58 <alt_flash_device_register>
   54fc4:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
   54fc8:	e0bffe17 	ldw	r2,-8(fp)
}
   54fcc:	e037883a 	mov	sp,fp
   54fd0:	dfc00117 	ldw	ra,4(sp)
   54fd4:	df000017 	ldw	fp,0(sp)
   54fd8:	dec00204 	addi	sp,sp,8
   54fdc:	f800283a 	ret

00054fe0 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
   54fe0:	defffc04 	addi	sp,sp,-16
   54fe4:	dfc00315 	stw	ra,12(sp)
   54fe8:	df000215 	stw	fp,8(sp)
   54fec:	df000204 	addi	fp,sp,8
   54ff0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   54ff4:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
   54ff8:	e0bfff17 	ldw	r2,-4(fp)
   54ffc:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
   55000:	e0bfff17 	ldw	r2,-4(fp)
   55004:	10802e17 	ldw	r2,184(r2)
   55008:	1009883a 	mov	r4,r2
   5500c:	00572300 	call	57230 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
   55010:	10c03fcc 	andi	r3,r2,255
   55014:	e0bfff17 	ldw	r2,-4(fp)
   55018:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
   5501c:	e0bfff17 	ldw	r2,-4(fp)
   55020:	10803017 	ldw	r2,192(r2)
   55024:	10800598 	cmpnei	r2,r2,22
   55028:	10000a1e 	bne	r2,zero,55054 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   5502c:	e0bfff17 	ldw	r2,-4(fp)
   55030:	00c02034 	movhi	r3,128
   55034:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
   55038:	e0bfff17 	ldw	r2,-4(fp)
   5503c:	00c02004 	movi	r3,128
   55040:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   55044:	e0bfff17 	ldw	r2,-4(fp)
   55048:	00c00074 	movhi	r3,1
   5504c:	10c01015 	stw	r3,64(r2)
   55050:	0000ce06 	br	5538c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
   55054:	e0bfff17 	ldw	r2,-4(fp)
   55058:	10803017 	ldw	r2,192(r2)
   5505c:	10800518 	cmpnei	r2,r2,20
   55060:	10000a1e 	bne	r2,zero,5508c <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   55064:	e0bfff17 	ldw	r2,-4(fp)
   55068:	00c00834 	movhi	r3,32
   5506c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
   55070:	e0bfff17 	ldw	r2,-4(fp)
   55074:	00c00804 	movi	r3,32
   55078:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   5507c:	e0bfff17 	ldw	r2,-4(fp)
   55080:	00c00074 	movhi	r3,1
   55084:	10c01015 	stw	r3,64(r2)
   55088:	0000c006 	br	5538c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
   5508c:	e0bfff17 	ldw	r2,-4(fp)
   55090:	10803017 	ldw	r2,192(r2)
   55094:	108004d8 	cmpnei	r2,r2,19
   55098:	10000a1e 	bne	r2,zero,550c4 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
   5509c:	e0bfff17 	ldw	r2,-4(fp)
   550a0:	00c00434 	movhi	r3,16
   550a4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
   550a8:	e0bfff17 	ldw	r2,-4(fp)
   550ac:	00c00404 	movi	r3,16
   550b0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   550b4:	e0bfff17 	ldw	r2,-4(fp)
   550b8:	00c00074 	movhi	r3,1
   550bc:	10c01015 	stw	r3,64(r2)
   550c0:	0000b206 	br	5538c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
   550c4:	e0bfff17 	ldw	r2,-4(fp)
   550c8:	10803017 	ldw	r2,192(r2)
   550cc:	10800498 	cmpnei	r2,r2,18
   550d0:	10000a1e 	bne	r2,zero,550fc <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
   550d4:	e0bfff17 	ldw	r2,-4(fp)
   550d8:	00c00234 	movhi	r3,8
   550dc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
   550e0:	e0bfff17 	ldw	r2,-4(fp)
   550e4:	00c00204 	movi	r3,8
   550e8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   550ec:	e0bfff17 	ldw	r2,-4(fp)
   550f0:	00c00074 	movhi	r3,1
   550f4:	10c01015 	stw	r3,64(r2)
   550f8:	0000a406 	br	5538c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
   550fc:	e0bfff17 	ldw	r2,-4(fp)
   55100:	10803017 	ldw	r2,192(r2)
   55104:	10800418 	cmpnei	r2,r2,16
   55108:	10000a1e 	bne	r2,zero,55134 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
   5510c:	e0bfff17 	ldw	r2,-4(fp)
   55110:	00c000b4 	movhi	r3,2
   55114:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
   55118:	e0bfff17 	ldw	r2,-4(fp)
   5511c:	00c00104 	movi	r3,4
   55120:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
   55124:	e0bfff17 	ldw	r2,-4(fp)
   55128:	00e00014 	movui	r3,32768
   5512c:	10c01015 	stw	r3,64(r2)
   55130:	00009606 	br	5538c <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
   55134:	e0bfff17 	ldw	r2,-4(fp)
   55138:	10802e17 	ldw	r2,184(r2)
   5513c:	1009883a 	mov	r4,r2
   55140:	00572980 	call	57298 <epcs_read_device_id>
   55144:	1007883a 	mov	r3,r2
   55148:	e0bfff17 	ldw	r2,-4(fp)
   5514c:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
   55150:	e0bfff17 	ldw	r2,-4(fp)
   55154:	10c03017 	ldw	r3,192(r2)
   55158:	00804034 	movhi	r2,256
   5515c:	10bfffc4 	addi	r2,r2,-1
   55160:	1886703a 	and	r3,r3,r2
   55164:	00800874 	movhi	r2,33
   55168:	10ae8544 	addi	r2,r2,-17899
   5516c:	18800a1e 	bne	r3,r2,55198 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   55170:	e0bfff17 	ldw	r2,-4(fp)
   55174:	00c00834 	movhi	r3,32
   55178:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
   5517c:	e0bfff17 	ldw	r2,-4(fp)
   55180:	00c00804 	movi	r3,32
   55184:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   55188:	e0bfff17 	ldw	r2,-4(fp)
   5518c:	00c00074 	movhi	r3,1
   55190:	10c01015 	stw	r3,64(r2)
   55194:	00007d06 	br	5538c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
   55198:	e0bfff17 	ldw	r2,-4(fp)
   5519c:	10c03017 	ldw	r3,192(r2)
   551a0:	00804034 	movhi	r2,256
   551a4:	10bfffc4 	addi	r2,r2,-1
   551a8:	1886703a 	and	r3,r3,r2
   551ac:	00800874 	movhi	r2,33
   551b0:	10ae8584 	addi	r2,r2,-17898
   551b4:	18800a1e 	bne	r3,r2,551e0 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
   551b8:	e0bfff17 	ldw	r2,-4(fp)
   551bc:	00c01034 	movhi	r3,64
   551c0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
   551c4:	e0bfff17 	ldw	r2,-4(fp)
   551c8:	00c01004 	movi	r3,64
   551cc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   551d0:	e0bfff17 	ldw	r2,-4(fp)
   551d4:	00c00074 	movhi	r3,1
   551d8:	10c01015 	stw	r3,64(r2)
   551dc:	00006b06 	br	5538c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
   551e0:	e0bfff17 	ldw	r2,-4(fp)
   551e4:	10c03017 	ldw	r3,192(r2)
   551e8:	00804034 	movhi	r2,256
   551ec:	10bfffc4 	addi	r2,r2,-1
   551f0:	1886703a 	and	r3,r3,r2
   551f4:	00800874 	movhi	r2,33
   551f8:	10ae85c4 	addi	r2,r2,-17897
   551fc:	18800a1e 	bne	r3,r2,55228 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   55200:	e0bfff17 	ldw	r2,-4(fp)
   55204:	00c02034 	movhi	r3,128
   55208:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
   5520c:	e0bfff17 	ldw	r2,-4(fp)
   55210:	00c02004 	movi	r3,128
   55214:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   55218:	e0bfff17 	ldw	r2,-4(fp)
   5521c:	00c00074 	movhi	r3,1
   55220:	10c01015 	stw	r3,64(r2)
   55224:	00005906 	br	5538c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
   55228:	e0bfff17 	ldw	r2,-4(fp)
   5522c:	10c03017 	ldw	r3,192(r2)
   55230:	00804034 	movhi	r2,256
   55234:	10bfffc4 	addi	r2,r2,-1
   55238:	1886703a 	and	r3,r3,r2
   5523c:	00800874 	movhi	r2,33
   55240:	10ae8604 	addi	r2,r2,-17896
   55244:	18800a1e 	bne	r3,r2,55270 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   55248:	e0bfff17 	ldw	r2,-4(fp)
   5524c:	00c04034 	movhi	r3,256
   55250:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
   55254:	e0bfff17 	ldw	r2,-4(fp)
   55258:	00c04004 	movi	r3,256
   5525c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   55260:	e0bfff17 	ldw	r2,-4(fp)
   55264:	00c00074 	movhi	r3,1
   55268:	10c01015 	stw	r3,64(r2)
   5526c:	00004706 	br	5538c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
   55270:	e0bfff17 	ldw	r2,-4(fp)
   55274:	10803017 	ldw	r2,192(r2)
   55278:	10803fcc 	andi	r2,r2,255
   5527c:	10800618 	cmpnei	r2,r2,24
   55280:	10000a1e 	bne	r2,zero,552ac <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   55284:	e0bfff17 	ldw	r2,-4(fp)
   55288:	00c04034 	movhi	r3,256
   5528c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
   55290:	e0bfff17 	ldw	r2,-4(fp)
   55294:	00c01004 	movi	r3,64
   55298:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
   5529c:	e0bfff17 	ldw	r2,-4(fp)
   552a0:	00c00134 	movhi	r3,4
   552a4:	10c01015 	stw	r3,64(r2)
   552a8:	00003806 	br	5538c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
   552ac:	e0bfff17 	ldw	r2,-4(fp)
   552b0:	10803017 	ldw	r2,192(r2)
   552b4:	10803fcc 	andi	r2,r2,255
   552b8:	10800658 	cmpnei	r2,r2,25
   552bc:	10000d1e 	bne	r2,zero,552f4 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
   552c0:	e0bfff17 	ldw	r2,-4(fp)
   552c4:	00c08034 	movhi	r3,512
   552c8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
   552cc:	e0bfff17 	ldw	r2,-4(fp)
   552d0:	00c08004 	movi	r3,512
   552d4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   552d8:	e0bfff17 	ldw	r2,-4(fp)
   552dc:	00c00074 	movhi	r3,1
   552e0:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
   552e4:	e0bfff17 	ldw	r2,-4(fp)
   552e8:	00c00044 	movi	r3,1
   552ec:	10c03215 	stw	r3,200(r2)
   552f0:	00002606 	br	5538c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
   552f4:	e0bfff17 	ldw	r2,-4(fp)
   552f8:	10803017 	ldw	r2,192(r2)
   552fc:	10803fcc 	andi	r2,r2,255
   55300:	10800818 	cmpnei	r2,r2,32
   55304:	10000d1e 	bne	r2,zero,5533c <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
   55308:	e0bfff17 	ldw	r2,-4(fp)
   5530c:	00c10034 	movhi	r3,1024
   55310:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
   55314:	e0bfff17 	ldw	r2,-4(fp)
   55318:	00c10004 	movi	r3,1024
   5531c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   55320:	e0bfff17 	ldw	r2,-4(fp)
   55324:	00c00074 	movhi	r3,1
   55328:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   5532c:	e0bfff17 	ldw	r2,-4(fp)
   55330:	00c00044 	movi	r3,1
   55334:	10c03215 	stw	r3,200(r2)
   55338:	00001406 	br	5538c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
   5533c:	e0bfff17 	ldw	r2,-4(fp)
   55340:	10803017 	ldw	r2,192(r2)
   55344:	10803fcc 	andi	r2,r2,255
   55348:	10800858 	cmpnei	r2,r2,33
   5534c:	10000d1e 	bne	r2,zero,55384 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
   55350:	e0bfff17 	ldw	r2,-4(fp)
   55354:	00c20034 	movhi	r3,2048
   55358:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
   5535c:	e0bfff17 	ldw	r2,-4(fp)
   55360:	00c20004 	movi	r3,2048
   55364:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   55368:	e0bfff17 	ldw	r2,-4(fp)
   5536c:	00c00074 	movhi	r3,1
   55370:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   55374:	e0bfff17 	ldw	r2,-4(fp)
   55378:	00c00044 	movi	r3,1
   5537c:	10c03215 	stw	r3,200(r2)
   55380:	00000206 	br	5538c <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
   55384:	00bffb44 	movi	r2,-19
   55388:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   5538c:	e0bfff17 	ldw	r2,-4(fp)
   55390:	10800e17 	ldw	r2,56(r2)
   55394:	1007883a 	mov	r3,r2
   55398:	e0bfff17 	ldw	r2,-4(fp)
   5539c:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
   553a0:	e0bfff17 	ldw	r2,-4(fp)
   553a4:	00c00044 	movi	r3,1
   553a8:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
   553ac:	e0bfff17 	ldw	r2,-4(fp)
   553b0:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
   553b4:	e0bfff17 	ldw	r2,-4(fp)
   553b8:	00c04004 	movi	r3,256
   553bc:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
   553c0:	e0bffe17 	ldw	r2,-8(fp)
}
   553c4:	e037883a 	mov	sp,fp
   553c8:	dfc00117 	ldw	ra,4(sp)
   553cc:	df000017 	ldw	fp,0(sp)
   553d0:	dec00204 	addi	sp,sp,8
   553d4:	f800283a 	ret

000553d8 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
   553d8:	deffee04 	addi	sp,sp,-72
   553dc:	dfc01115 	stw	ra,68(sp)
   553e0:	df001015 	stw	fp,64(sp)
   553e4:	df001004 	addi	fp,sp,64
   553e8:	e13ffc15 	stw	r4,-16(fp)
   553ec:	e17ffd15 	stw	r5,-12(fp)
   553f0:	e1bffe15 	stw	r6,-8(fp)
   553f4:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
   553f8:	00800804 	movi	r2,32
   553fc:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
   55400:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
   55404:	00002706 	br	554a4 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
   55408:	e0fff117 	ldw	r3,-60(fp)
   5540c:	e0bfff17 	ldw	r2,-4(fp)
   55410:	1880012e 	bgeu	r3,r2,55418 <alt_epcs_flash_memcmp+0x40>
   55414:	1805883a 	mov	r2,r3
   55418:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
   5541c:	e0fffe17 	ldw	r3,-8(fp)
   55420:	e0bff017 	ldw	r2,-64(fp)
   55424:	1885883a 	add	r2,r3,r2
   55428:	e0fff404 	addi	r3,fp,-48
   5542c:	e1fff217 	ldw	r7,-56(fp)
   55430:	180d883a 	mov	r6,r3
   55434:	100b883a 	mov	r5,r2
   55438:	e13ffc17 	ldw	r4,-16(fp)
   5543c:	00559bc0 	call	559bc <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
   55440:	1000020e 	bge	r2,zero,5544c <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
   55444:	00bfffc4 	movi	r2,-1
   55448:	00001906 	br	554b0 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   5544c:	e0bff017 	ldw	r2,-64(fp)
   55450:	e0fffd17 	ldw	r3,-12(fp)
   55454:	1885883a 	add	r2,r3,r2
   55458:	e13ff217 	ldw	r4,-56(fp)
   5545c:	e0fff404 	addi	r3,fp,-48
   55460:	200d883a 	mov	r6,r4
   55464:	180b883a 	mov	r5,r3
   55468:	1009883a 	mov	r4,r2
   5546c:	0045c1c0 	call	45c1c <memcmp>
   55470:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
   55474:	e0bff317 	ldw	r2,-52(fp)
   55478:	10000226 	beq	r2,zero,55484 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
   5547c:	e0bff317 	ldw	r2,-52(fp)
   55480:	00000b06 	br	554b0 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
   55484:	e0bff217 	ldw	r2,-56(fp)
   55488:	e0ffff17 	ldw	r3,-4(fp)
   5548c:	1885c83a 	sub	r2,r3,r2
   55490:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
   55494:	e0fff017 	ldw	r3,-64(fp)
   55498:	e0bff217 	ldw	r2,-56(fp)
   5549c:	1885883a 	add	r2,r3,r2
   554a0:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
   554a4:	e0bfff17 	ldw	r2,-4(fp)
   554a8:	103fd71e 	bne	r2,zero,55408 <__alt_mem_epcs_flash_controller+0xfe044408>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
   554ac:	0005883a 	mov	r2,zero
}
   554b0:	e037883a 	mov	sp,fp
   554b4:	dfc00117 	ldw	ra,4(sp)
   554b8:	df000017 	ldw	fp,0(sp)
   554bc:	dec00204 	addi	sp,sp,8
   554c0:	f800283a 	ret

000554c4 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
   554c4:	defff404 	addi	sp,sp,-48
   554c8:	dfc00b15 	stw	ra,44(sp)
   554cc:	df000a15 	stw	fp,40(sp)
   554d0:	df000a04 	addi	fp,sp,40
   554d4:	e13ffc15 	stw	r4,-16(fp)
   554d8:	e17ffd15 	stw	r5,-12(fp)
   554dc:	e1bffe15 	stw	r6,-8(fp)
   554e0:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
   554e4:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   554e8:	e03ff815 	stw	zero,-32(fp)
   554ec:	00008306 	br	556fc <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   554f0:	e0fffc17 	ldw	r3,-16(fp)
   554f4:	e0bff817 	ldw	r2,-32(fp)
   554f8:	1004913a 	slli	r2,r2,4
   554fc:	1885883a 	add	r2,r3,r2
   55500:	10800d04 	addi	r2,r2,52
   55504:	10800017 	ldw	r2,0(r2)
   55508:	e0fffd17 	ldw	r3,-12(fp)
   5550c:	18807816 	blt	r3,r2,556f0 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
   55510:	e0fffc17 	ldw	r3,-16(fp)
   55514:	e0bff817 	ldw	r2,-32(fp)
   55518:	1004913a 	slli	r2,r2,4
   5551c:	1885883a 	add	r2,r3,r2
   55520:	10800d04 	addi	r2,r2,52
   55524:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
   55528:	e13ffc17 	ldw	r4,-16(fp)
   5552c:	e0bff817 	ldw	r2,-32(fp)
   55530:	1004913a 	slli	r2,r2,4
   55534:	2085883a 	add	r2,r4,r2
   55538:	10800e04 	addi	r2,r2,56
   5553c:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
   55540:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   55544:	e0fffd17 	ldw	r3,-12(fp)
   55548:	1880690e 	bge	r3,r2,556f0 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
   5554c:	e0fffc17 	ldw	r3,-16(fp)
   55550:	e0bff817 	ldw	r2,-32(fp)
   55554:	1004913a 	slli	r2,r2,4
   55558:	1885883a 	add	r2,r3,r2
   5555c:	10800d04 	addi	r2,r2,52
   55560:	10800017 	ldw	r2,0(r2)
   55564:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   55568:	e03ff915 	stw	zero,-28(fp)
   5556c:	00005806 	br	556d0 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
   55570:	e0fffd17 	ldw	r3,-12(fp)
   55574:	e0bffa17 	ldw	r2,-24(fp)
   55578:	18804916 	blt	r3,r2,556a0 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
   5557c:	e0fffc17 	ldw	r3,-16(fp)
   55580:	e0bff817 	ldw	r2,-32(fp)
   55584:	10800104 	addi	r2,r2,4
   55588:	1004913a 	slli	r2,r2,4
   5558c:	1885883a 	add	r2,r3,r2
   55590:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
   55594:	e0bffa17 	ldw	r2,-24(fp)
   55598:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
   5559c:	e0fffd17 	ldw	r3,-12(fp)
   555a0:	18803f0e 	bge	r3,r2,556a0 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
   555a4:	e0fffc17 	ldw	r3,-16(fp)
   555a8:	e0bff817 	ldw	r2,-32(fp)
   555ac:	10800104 	addi	r2,r2,4
   555b0:	1004913a 	slli	r2,r2,4
   555b4:	1885883a 	add	r2,r3,r2
   555b8:	10c00017 	ldw	r3,0(r2)
   555bc:	e0bffa17 	ldw	r2,-24(fp)
   555c0:	1887883a 	add	r3,r3,r2
   555c4:	e0bffd17 	ldw	r2,-12(fp)
   555c8:	1885c83a 	sub	r2,r3,r2
   555cc:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
   555d0:	e0fffb17 	ldw	r3,-20(fp)
   555d4:	e0bfff17 	ldw	r2,-4(fp)
   555d8:	1880010e 	bge	r3,r2,555e0 <alt_epcs_flash_write+0x11c>
   555dc:	1805883a 	mov	r2,r3
   555e0:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
   555e4:	e0bffb17 	ldw	r2,-20(fp)
   555e8:	100f883a 	mov	r7,r2
   555ec:	e1bffd17 	ldw	r6,-12(fp)
   555f0:	e17ffe17 	ldw	r5,-8(fp)
   555f4:	e13ffc17 	ldw	r4,-16(fp)
   555f8:	00553d80 	call	553d8 <alt_epcs_flash_memcmp>
   555fc:	10001226 	beq	r2,zero,55648 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
   55600:	e0bffc17 	ldw	r2,-16(fp)
   55604:	10800817 	ldw	r2,32(r2)
   55608:	e17ffa17 	ldw	r5,-24(fp)
   5560c:	e13ffc17 	ldw	r4,-16(fp)
   55610:	103ee83a 	callr	r2
   55614:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
   55618:	e0bff717 	ldw	r2,-36(fp)
   5561c:	10000a1e 	bne	r2,zero,55648 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
   55620:	e0bffc17 	ldw	r2,-16(fp)
   55624:	10800917 	ldw	r2,36(r2)
   55628:	e0fffb17 	ldw	r3,-20(fp)
   5562c:	d8c00015 	stw	r3,0(sp)
   55630:	e1fffe17 	ldw	r7,-8(fp)
   55634:	e1bffd17 	ldw	r6,-12(fp)
   55638:	e17ffa17 	ldw	r5,-24(fp)
   5563c:	e13ffc17 	ldw	r4,-16(fp)
   55640:	103ee83a 	callr	r2
   55644:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
   55648:	e0ffff17 	ldw	r3,-4(fp)
   5564c:	e0bffb17 	ldw	r2,-20(fp)
   55650:	18802e26 	beq	r3,r2,5570c <alt_epcs_flash_write+0x248>
   55654:	e0bff717 	ldw	r2,-36(fp)
   55658:	10002c1e 	bne	r2,zero,5570c <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
   5565c:	e0ffff17 	ldw	r3,-4(fp)
   55660:	e0bffb17 	ldw	r2,-20(fp)
   55664:	1885c83a 	sub	r2,r3,r2
   55668:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
   5566c:	e0fffc17 	ldw	r3,-16(fp)
   55670:	e0bff817 	ldw	r2,-32(fp)
   55674:	10800104 	addi	r2,r2,4
   55678:	1004913a 	slli	r2,r2,4
   5567c:	1885883a 	add	r2,r3,r2
   55680:	10c00017 	ldw	r3,0(r2)
   55684:	e0bffa17 	ldw	r2,-24(fp)
   55688:	1885883a 	add	r2,r3,r2
   5568c:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
   55690:	e0bffb17 	ldw	r2,-20(fp)
   55694:	e0fffe17 	ldw	r3,-8(fp)
   55698:	1885883a 	add	r2,r3,r2
   5569c:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
   556a0:	e0fffc17 	ldw	r3,-16(fp)
   556a4:	e0bff817 	ldw	r2,-32(fp)
   556a8:	10800104 	addi	r2,r2,4
   556ac:	1004913a 	slli	r2,r2,4
   556b0:	1885883a 	add	r2,r3,r2
   556b4:	10800017 	ldw	r2,0(r2)
   556b8:	e0fffa17 	ldw	r3,-24(fp)
   556bc:	1885883a 	add	r2,r3,r2
   556c0:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   556c4:	e0bff917 	ldw	r2,-28(fp)
   556c8:	10800044 	addi	r2,r2,1
   556cc:	e0bff915 	stw	r2,-28(fp)
   556d0:	e0fffc17 	ldw	r3,-16(fp)
   556d4:	e0bff817 	ldw	r2,-32(fp)
   556d8:	1004913a 	slli	r2,r2,4
   556dc:	1885883a 	add	r2,r3,r2
   556e0:	10800f04 	addi	r2,r2,60
   556e4:	10800017 	ldw	r2,0(r2)
   556e8:	e0fff917 	ldw	r3,-28(fp)
   556ec:	18bfa016 	blt	r3,r2,55570 <__alt_mem_epcs_flash_controller+0xfe044570>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   556f0:	e0bff817 	ldw	r2,-32(fp)
   556f4:	10800044 	addi	r2,r2,1
   556f8:	e0bff815 	stw	r2,-32(fp)
   556fc:	e0bffc17 	ldw	r2,-16(fp)
   55700:	10800c17 	ldw	r2,48(r2)
   55704:	e0fff817 	ldw	r3,-32(fp)
   55708:	18bf7916 	blt	r3,r2,554f0 <__alt_mem_epcs_flash_controller+0xfe0444f0>
      }
    }
  }

finished:
  return ret_code;
   5570c:	e0bff717 	ldw	r2,-36(fp)
}
   55710:	e037883a 	mov	sp,fp
   55714:	dfc00117 	ldw	ra,4(sp)
   55718:	df000017 	ldw	fp,0(sp)
   5571c:	dec00204 	addi	sp,sp,8
   55720:	f800283a 	ret

00055724 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
   55724:	defffa04 	addi	sp,sp,-24
   55728:	df000515 	stw	fp,20(sp)
   5572c:	df000504 	addi	fp,sp,20
   55730:	e13ffd15 	stw	r4,-12(fp)
   55734:	e17ffe15 	stw	r5,-8(fp)
   55738:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
   5573c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
   55740:	e0bffd17 	ldw	r2,-12(fp)
   55744:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
   55748:	e0bffc17 	ldw	r2,-16(fp)
   5574c:	10c00c17 	ldw	r3,48(r2)
   55750:	e0bfff17 	ldw	r2,-4(fp)
   55754:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
   55758:	e0bffc17 	ldw	r2,-16(fp)
   5575c:	10800c17 	ldw	r2,48(r2)
   55760:	1000031e 	bne	r2,zero,55770 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
   55764:	00bffec4 	movi	r2,-5
   55768:	e0bffb15 	stw	r2,-20(fp)
   5576c:	00000b06 	br	5579c <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   55770:	e0bffc17 	ldw	r2,-16(fp)
   55774:	10800c17 	ldw	r2,48(r2)
   55778:	10800250 	cmplti	r2,r2,9
   5577c:	1000031e 	bne	r2,zero,5578c <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
   55780:	00bffd04 	movi	r2,-12
   55784:	e0bffb15 	stw	r2,-20(fp)
   55788:	00000406 	br	5579c <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
   5578c:	e0bffc17 	ldw	r2,-16(fp)
   55790:	10c00d04 	addi	r3,r2,52
   55794:	e0bffe17 	ldw	r2,-8(fp)
   55798:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
   5579c:	e0bffb17 	ldw	r2,-20(fp)
}
   557a0:	e037883a 	mov	sp,fp
   557a4:	df000017 	ldw	fp,0(sp)
   557a8:	dec00104 	addi	sp,sp,4
   557ac:	f800283a 	ret

000557b0 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
   557b0:	defff904 	addi	sp,sp,-28
   557b4:	df000615 	stw	fp,24(sp)
   557b8:	df000604 	addi	fp,sp,24
   557bc:	e13ffe15 	stw	r4,-8(fp)
   557c0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   557c4:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   557c8:	e0bffe17 	ldw	r2,-8(fp)
   557cc:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
   557d0:	e0bffb17 	ldw	r2,-20(fp)
   557d4:	10800c17 	ldw	r2,48(r2)
   557d8:	10bfffc4 	addi	r2,r2,-1
   557dc:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   557e0:	e0fffb17 	ldw	r3,-20(fp)
   557e4:	e0bffc17 	ldw	r2,-16(fp)
   557e8:	1004913a 	slli	r2,r2,4
   557ec:	1885883a 	add	r2,r3,r2
   557f0:	10800d04 	addi	r2,r2,52
   557f4:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
   557f8:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
   557fc:	e13ffb17 	ldw	r4,-20(fp)
   55800:	e0bffc17 	ldw	r2,-16(fp)
   55804:	1004913a 	slli	r2,r2,4
   55808:	2085883a 	add	r2,r4,r2
   5580c:	10800e04 	addi	r2,r2,56
   55810:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   55814:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
   55818:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
   5581c:	e0bfff17 	ldw	r2,-4(fp)
   55820:	e0fffd17 	ldw	r3,-12(fp)
   55824:	1880022e 	bgeu	r3,r2,55830 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
   55828:	00bffec4 	movi	r2,-5
   5582c:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
   55830:	e0bffa17 	ldw	r2,-24(fp)
}
   55834:	e037883a 	mov	sp,fp
   55838:	df000017 	ldw	fp,0(sp)
   5583c:	dec00104 	addi	sp,sp,4
   55840:	f800283a 	ret

00055844 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
   55844:	defffa04 	addi	sp,sp,-24
   55848:	dfc00515 	stw	ra,20(sp)
   5584c:	df000415 	stw	fp,16(sp)
   55850:	df000404 	addi	fp,sp,16
   55854:	e13ffe15 	stw	r4,-8(fp)
   55858:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   5585c:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   55860:	e0bffe17 	ldw	r2,-8(fp)
   55864:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
   55868:	e17fff17 	ldw	r5,-4(fp)
   5586c:	e13ffe17 	ldw	r4,-8(fp)
   55870:	00557b00 	call	557b0 <alt_epcs_test_address>
   55874:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
   55878:	e0bffc17 	ldw	r2,-16(fp)
   5587c:	10000916 	blt	r2,zero,558a4 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
   55880:	e0bffd17 	ldw	r2,-12(fp)
   55884:	10c02e17 	ldw	r3,184(r2)
   55888:	e13fff17 	ldw	r4,-4(fp)
   5588c:	e0bffd17 	ldw	r2,-12(fp)
   55890:	10803217 	ldw	r2,200(r2)
   55894:	100d883a 	mov	r6,r2
   55898:	200b883a 	mov	r5,r4
   5589c:	1809883a 	mov	r4,r3
   558a0:	0056e640 	call	56e64 <epcs_sector_erase>
  }
  return ret_code;
   558a4:	e0bffc17 	ldw	r2,-16(fp)
}
   558a8:	e037883a 	mov	sp,fp
   558ac:	dfc00117 	ldw	ra,4(sp)
   558b0:	df000017 	ldw	fp,0(sp)
   558b4:	dec00204 	addi	sp,sp,8
   558b8:	f800283a 	ret

000558bc <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   558bc:	defff404 	addi	sp,sp,-48
   558c0:	dfc00b15 	stw	ra,44(sp)
   558c4:	df000a15 	stw	fp,40(sp)
   558c8:	df000a04 	addi	fp,sp,40
   558cc:	e13ffc15 	stw	r4,-16(fp)
   558d0:	e17ffd15 	stw	r5,-12(fp)
   558d4:	e1bffe15 	stw	r6,-8(fp)
   558d8:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   558dc:	e0bffc17 	ldw	r2,-16(fp)
   558e0:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
   558e4:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
   558e8:	e17ffe17 	ldw	r5,-8(fp)
   558ec:	e13ffc17 	ldw	r4,-16(fp)
   558f0:	00557b00 	call	557b0 <alt_epcs_test_address>
   558f4:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
   558f8:	e0bff917 	ldw	r2,-28(fp)
   558fc:	10002916 	blt	r2,zero,559a4 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   55900:	00002606 	br	5599c <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
   55904:	e0bff817 	ldw	r2,-32(fp)
   55908:	10c03117 	ldw	r3,196(r2)
   5590c:	e0bffe17 	ldw	r2,-8(fp)
   55910:	1887883a 	add	r3,r3,r2
   55914:	e0bff817 	ldw	r2,-32(fp)
   55918:	10803117 	ldw	r2,196(r2)
   5591c:	0085c83a 	sub	r2,zero,r2
   55920:	1884703a 	and	r2,r3,r2
   55924:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
   55928:	e0fffa17 	ldw	r3,-24(fp)
   5592c:	e0bffe17 	ldw	r2,-8(fp)
   55930:	1885c83a 	sub	r2,r3,r2
   55934:	e0c00217 	ldw	r3,8(fp)
   55938:	1880010e 	bge	r3,r2,55940 <alt_epcs_flash_write_block+0x84>
   5593c:	1805883a 	mov	r2,r3
   55940:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   55944:	e0bff817 	ldw	r2,-32(fp)
   55948:	11002e17 	ldw	r4,184(r2)
   5594c:	e0bff717 	ldw	r2,-36(fp)
   55950:	e0ffff17 	ldw	r3,-4(fp)
   55954:	1887883a 	add	r3,r3,r2
   55958:	e0bff817 	ldw	r2,-32(fp)
   5595c:	10803217 	ldw	r2,200(r2)
   55960:	d8800015 	stw	r2,0(sp)
   55964:	e1fffb17 	ldw	r7,-20(fp)
   55968:	180d883a 	mov	r6,r3
   5596c:	e17ffe17 	ldw	r5,-8(fp)
   55970:	00571140 	call	57114 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
   55974:	e0c00217 	ldw	r3,8(fp)
   55978:	e0bffb17 	ldw	r2,-20(fp)
   5597c:	1885c83a 	sub	r2,r3,r2
   55980:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
   55984:	e0fff717 	ldw	r3,-36(fp)
   55988:	e0bffb17 	ldw	r2,-20(fp)
   5598c:	1885883a 	add	r2,r3,r2
   55990:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
   55994:	e0bffa17 	ldw	r2,-24(fp)
   55998:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   5599c:	e0800217 	ldw	r2,8(fp)
   559a0:	103fd81e 	bne	r2,zero,55904 <__alt_mem_epcs_flash_controller+0xfe044904>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
   559a4:	e0bff917 	ldw	r2,-28(fp)
}
   559a8:	e037883a 	mov	sp,fp
   559ac:	dfc00117 	ldw	ra,4(sp)
   559b0:	df000017 	ldw	fp,0(sp)
   559b4:	dec00204 	addi	sp,sp,8
   559b8:	f800283a 	ret

000559bc <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
   559bc:	defff704 	addi	sp,sp,-36
   559c0:	dfc00815 	stw	ra,32(sp)
   559c4:	df000715 	stw	fp,28(sp)
   559c8:	df000704 	addi	fp,sp,28
   559cc:	e13ffc15 	stw	r4,-16(fp)
   559d0:	e17ffd15 	stw	r5,-12(fp)
   559d4:	e1bffe15 	stw	r6,-8(fp)
   559d8:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
   559dc:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   559e0:	e0bffc17 	ldw	r2,-16(fp)
   559e4:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
   559e8:	e17ffd17 	ldw	r5,-12(fp)
   559ec:	e13ffc17 	ldw	r4,-16(fp)
   559f0:	00557b00 	call	557b0 <alt_epcs_test_address>
   559f4:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
   559f8:	e0bffa17 	ldw	r2,-24(fp)
   559fc:	10000f16 	blt	r2,zero,55a3c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
   55a00:	e0bffb17 	ldw	r2,-20(fp)
   55a04:	10c02e17 	ldw	r3,184(r2)
   55a08:	e0bffb17 	ldw	r2,-20(fp)
   55a0c:	10803217 	ldw	r2,200(r2)
   55a10:	d8800015 	stw	r2,0(sp)
   55a14:	e1ffff17 	ldw	r7,-4(fp)
   55a18:	e1bffe17 	ldw	r6,-8(fp)
   55a1c:	e17ffd17 	ldw	r5,-12(fp)
   55a20:	1809883a 	mov	r4,r3
   55a24:	0056f600 	call	56f60 <epcs_read_buffer>
   55a28:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
   55a2c:	e0fffa17 	ldw	r3,-24(fp)
   55a30:	e0bfff17 	ldw	r2,-4(fp)
   55a34:	1880011e 	bne	r3,r2,55a3c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
   55a38:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
   55a3c:	e0bffa17 	ldw	r2,-24(fp)
}
   55a40:	e037883a 	mov	sp,fp
   55a44:	dfc00117 	ldw	ra,4(sp)
   55a48:	df000017 	ldw	fp,0(sp)
   55a4c:	dec00204 	addi	sp,sp,8
   55a50:	f800283a 	ret

00055a54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   55a54:	defffa04 	addi	sp,sp,-24
   55a58:	dfc00515 	stw	ra,20(sp)
   55a5c:	df000415 	stw	fp,16(sp)
   55a60:	df000404 	addi	fp,sp,16
   55a64:	e13ffd15 	stw	r4,-12(fp)
   55a68:	e17ffe15 	stw	r5,-8(fp)
   55a6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   55a70:	e0bffd17 	ldw	r2,-12(fp)
   55a74:	10800017 	ldw	r2,0(r2)
   55a78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   55a7c:	e0bffc17 	ldw	r2,-16(fp)
   55a80:	10c00a04 	addi	r3,r2,40
   55a84:	e0bffd17 	ldw	r2,-12(fp)
   55a88:	10800217 	ldw	r2,8(r2)
   55a8c:	100f883a 	mov	r7,r2
   55a90:	e1bfff17 	ldw	r6,-4(fp)
   55a94:	e17ffe17 	ldw	r5,-8(fp)
   55a98:	1809883a 	mov	r4,r3
   55a9c:	005607c0 	call	5607c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   55aa0:	e037883a 	mov	sp,fp
   55aa4:	dfc00117 	ldw	ra,4(sp)
   55aa8:	df000017 	ldw	fp,0(sp)
   55aac:	dec00204 	addi	sp,sp,8
   55ab0:	f800283a 	ret

00055ab4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   55ab4:	defffa04 	addi	sp,sp,-24
   55ab8:	dfc00515 	stw	ra,20(sp)
   55abc:	df000415 	stw	fp,16(sp)
   55ac0:	df000404 	addi	fp,sp,16
   55ac4:	e13ffd15 	stw	r4,-12(fp)
   55ac8:	e17ffe15 	stw	r5,-8(fp)
   55acc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   55ad0:	e0bffd17 	ldw	r2,-12(fp)
   55ad4:	10800017 	ldw	r2,0(r2)
   55ad8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   55adc:	e0bffc17 	ldw	r2,-16(fp)
   55ae0:	10c00a04 	addi	r3,r2,40
   55ae4:	e0bffd17 	ldw	r2,-12(fp)
   55ae8:	10800217 	ldw	r2,8(r2)
   55aec:	100f883a 	mov	r7,r2
   55af0:	e1bfff17 	ldw	r6,-4(fp)
   55af4:	e17ffe17 	ldw	r5,-8(fp)
   55af8:	1809883a 	mov	r4,r3
   55afc:	00562980 	call	56298 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   55b00:	e037883a 	mov	sp,fp
   55b04:	dfc00117 	ldw	ra,4(sp)
   55b08:	df000017 	ldw	fp,0(sp)
   55b0c:	dec00204 	addi	sp,sp,8
   55b10:	f800283a 	ret

00055b14 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   55b14:	defffc04 	addi	sp,sp,-16
   55b18:	dfc00315 	stw	ra,12(sp)
   55b1c:	df000215 	stw	fp,8(sp)
   55b20:	df000204 	addi	fp,sp,8
   55b24:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   55b28:	e0bfff17 	ldw	r2,-4(fp)
   55b2c:	10800017 	ldw	r2,0(r2)
   55b30:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   55b34:	e0bffe17 	ldw	r2,-8(fp)
   55b38:	10c00a04 	addi	r3,r2,40
   55b3c:	e0bfff17 	ldw	r2,-4(fp)
   55b40:	10800217 	ldw	r2,8(r2)
   55b44:	100b883a 	mov	r5,r2
   55b48:	1809883a 	mov	r4,r3
   55b4c:	0055f240 	call	55f24 <altera_avalon_jtag_uart_close>
}
   55b50:	e037883a 	mov	sp,fp
   55b54:	dfc00117 	ldw	ra,4(sp)
   55b58:	df000017 	ldw	fp,0(sp)
   55b5c:	dec00204 	addi	sp,sp,8
   55b60:	f800283a 	ret

00055b64 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   55b64:	defffa04 	addi	sp,sp,-24
   55b68:	dfc00515 	stw	ra,20(sp)
   55b6c:	df000415 	stw	fp,16(sp)
   55b70:	df000404 	addi	fp,sp,16
   55b74:	e13ffd15 	stw	r4,-12(fp)
   55b78:	e17ffe15 	stw	r5,-8(fp)
   55b7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   55b80:	e0bffd17 	ldw	r2,-12(fp)
   55b84:	10800017 	ldw	r2,0(r2)
   55b88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   55b8c:	e0bffc17 	ldw	r2,-16(fp)
   55b90:	10800a04 	addi	r2,r2,40
   55b94:	e1bfff17 	ldw	r6,-4(fp)
   55b98:	e17ffe17 	ldw	r5,-8(fp)
   55b9c:	1009883a 	mov	r4,r2
   55ba0:	0055f8c0 	call	55f8c <altera_avalon_jtag_uart_ioctl>
}
   55ba4:	e037883a 	mov	sp,fp
   55ba8:	dfc00117 	ldw	ra,4(sp)
   55bac:	df000017 	ldw	fp,0(sp)
   55bb0:	dec00204 	addi	sp,sp,8
   55bb4:	f800283a 	ret

00055bb8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   55bb8:	defffa04 	addi	sp,sp,-24
   55bbc:	dfc00515 	stw	ra,20(sp)
   55bc0:	df000415 	stw	fp,16(sp)
   55bc4:	df000404 	addi	fp,sp,16
   55bc8:	e13ffd15 	stw	r4,-12(fp)
   55bcc:	e17ffe15 	stw	r5,-8(fp)
   55bd0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   55bd4:	e0bffd17 	ldw	r2,-12(fp)
   55bd8:	00c00044 	movi	r3,1
   55bdc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   55be0:	e0bffd17 	ldw	r2,-12(fp)
   55be4:	10800017 	ldw	r2,0(r2)
   55be8:	10800104 	addi	r2,r2,4
   55bec:	1007883a 	mov	r3,r2
   55bf0:	e0bffd17 	ldw	r2,-12(fp)
   55bf4:	10800817 	ldw	r2,32(r2)
   55bf8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   55bfc:	e0bffe17 	ldw	r2,-8(fp)
   55c00:	e0ffff17 	ldw	r3,-4(fp)
   55c04:	d8000015 	stw	zero,0(sp)
   55c08:	e1fffd17 	ldw	r7,-12(fp)
   55c0c:	01800174 	movhi	r6,5
   55c10:	31971e04 	addi	r6,r6,23672
   55c14:	180b883a 	mov	r5,r3
   55c18:	1009883a 	mov	r4,r2
   55c1c:	00541740 	call	54174 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   55c20:	e0bffd17 	ldw	r2,-12(fp)
   55c24:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   55c28:	e0bffd17 	ldw	r2,-12(fp)
   55c2c:	10800204 	addi	r2,r2,8
   55c30:	d0e88617 	ldw	r3,-24040(gp)
   55c34:	e1fffd17 	ldw	r7,-12(fp)
   55c38:	01800174 	movhi	r6,5
   55c3c:	3197a104 	addi	r6,r6,24196
   55c40:	180b883a 	mov	r5,r3
   55c44:	1009883a 	mov	r4,r2
   55c48:	00573d00 	call	573d0 <alt_alarm_start>
   55c4c:	1000040e 	bge	r2,zero,55c60 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   55c50:	e0fffd17 	ldw	r3,-12(fp)
   55c54:	00a00034 	movhi	r2,32768
   55c58:	10bfffc4 	addi	r2,r2,-1
   55c5c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   55c60:	0001883a 	nop
   55c64:	e037883a 	mov	sp,fp
   55c68:	dfc00117 	ldw	ra,4(sp)
   55c6c:	df000017 	ldw	fp,0(sp)
   55c70:	dec00204 	addi	sp,sp,8
   55c74:	f800283a 	ret

00055c78 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   55c78:	defff804 	addi	sp,sp,-32
   55c7c:	df000715 	stw	fp,28(sp)
   55c80:	df000704 	addi	fp,sp,28
   55c84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   55c88:	e0bfff17 	ldw	r2,-4(fp)
   55c8c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   55c90:	e0bffb17 	ldw	r2,-20(fp)
   55c94:	10800017 	ldw	r2,0(r2)
   55c98:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   55c9c:	e0bffc17 	ldw	r2,-16(fp)
   55ca0:	10800104 	addi	r2,r2,4
   55ca4:	10800037 	ldwio	r2,0(r2)
   55ca8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   55cac:	e0bffd17 	ldw	r2,-12(fp)
   55cb0:	1080c00c 	andi	r2,r2,768
   55cb4:	10006d26 	beq	r2,zero,55e6c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   55cb8:	e0bffd17 	ldw	r2,-12(fp)
   55cbc:	1080400c 	andi	r2,r2,256
   55cc0:	10003526 	beq	r2,zero,55d98 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   55cc4:	00800074 	movhi	r2,1
   55cc8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55ccc:	e0bffb17 	ldw	r2,-20(fp)
   55cd0:	10800a17 	ldw	r2,40(r2)
   55cd4:	10800044 	addi	r2,r2,1
   55cd8:	1081ffcc 	andi	r2,r2,2047
   55cdc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   55ce0:	e0bffb17 	ldw	r2,-20(fp)
   55ce4:	10c00b17 	ldw	r3,44(r2)
   55ce8:	e0bffe17 	ldw	r2,-8(fp)
   55cec:	18801526 	beq	r3,r2,55d44 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   55cf0:	e0bffc17 	ldw	r2,-16(fp)
   55cf4:	10800037 	ldwio	r2,0(r2)
   55cf8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   55cfc:	e0bff917 	ldw	r2,-28(fp)
   55d00:	10a0000c 	andi	r2,r2,32768
   55d04:	10001126 	beq	r2,zero,55d4c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   55d08:	e0bffb17 	ldw	r2,-20(fp)
   55d0c:	10800a17 	ldw	r2,40(r2)
   55d10:	e0fff917 	ldw	r3,-28(fp)
   55d14:	1809883a 	mov	r4,r3
   55d18:	e0fffb17 	ldw	r3,-20(fp)
   55d1c:	1885883a 	add	r2,r3,r2
   55d20:	10800e04 	addi	r2,r2,56
   55d24:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55d28:	e0bffb17 	ldw	r2,-20(fp)
   55d2c:	10800a17 	ldw	r2,40(r2)
   55d30:	10800044 	addi	r2,r2,1
   55d34:	10c1ffcc 	andi	r3,r2,2047
   55d38:	e0bffb17 	ldw	r2,-20(fp)
   55d3c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   55d40:	003fe206 	br	55ccc <__alt_mem_epcs_flash_controller+0xfe044ccc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   55d44:	0001883a 	nop
   55d48:	00000106 	br	55d50 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   55d4c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   55d50:	e0bff917 	ldw	r2,-28(fp)
   55d54:	10bfffec 	andhi	r2,r2,65535
   55d58:	10000f26 	beq	r2,zero,55d98 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   55d5c:	e0bffb17 	ldw	r2,-20(fp)
   55d60:	10c00817 	ldw	r3,32(r2)
   55d64:	00bfff84 	movi	r2,-2
   55d68:	1886703a 	and	r3,r3,r2
   55d6c:	e0bffb17 	ldw	r2,-20(fp)
   55d70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   55d74:	e0bffc17 	ldw	r2,-16(fp)
   55d78:	10800104 	addi	r2,r2,4
   55d7c:	1007883a 	mov	r3,r2
   55d80:	e0bffb17 	ldw	r2,-20(fp)
   55d84:	10800817 	ldw	r2,32(r2)
   55d88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   55d8c:	e0bffc17 	ldw	r2,-16(fp)
   55d90:	10800104 	addi	r2,r2,4
   55d94:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   55d98:	e0bffd17 	ldw	r2,-12(fp)
   55d9c:	1080800c 	andi	r2,r2,512
   55da0:	103fbe26 	beq	r2,zero,55c9c <__alt_mem_epcs_flash_controller+0xfe044c9c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   55da4:	e0bffd17 	ldw	r2,-12(fp)
   55da8:	1004d43a 	srli	r2,r2,16
   55dac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   55db0:	00001406 	br	55e04 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   55db4:	e0bffc17 	ldw	r2,-16(fp)
   55db8:	e0fffb17 	ldw	r3,-20(fp)
   55dbc:	18c00d17 	ldw	r3,52(r3)
   55dc0:	e13ffb17 	ldw	r4,-20(fp)
   55dc4:	20c7883a 	add	r3,r4,r3
   55dc8:	18c20e04 	addi	r3,r3,2104
   55dcc:	18c00003 	ldbu	r3,0(r3)
   55dd0:	18c03fcc 	andi	r3,r3,255
   55dd4:	18c0201c 	xori	r3,r3,128
   55dd8:	18ffe004 	addi	r3,r3,-128
   55ddc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55de0:	e0bffb17 	ldw	r2,-20(fp)
   55de4:	10800d17 	ldw	r2,52(r2)
   55de8:	10800044 	addi	r2,r2,1
   55dec:	10c1ffcc 	andi	r3,r2,2047
   55df0:	e0bffb17 	ldw	r2,-20(fp)
   55df4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   55df8:	e0bffa17 	ldw	r2,-24(fp)
   55dfc:	10bfffc4 	addi	r2,r2,-1
   55e00:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   55e04:	e0bffa17 	ldw	r2,-24(fp)
   55e08:	10000526 	beq	r2,zero,55e20 <altera_avalon_jtag_uart_irq+0x1a8>
   55e0c:	e0bffb17 	ldw	r2,-20(fp)
   55e10:	10c00d17 	ldw	r3,52(r2)
   55e14:	e0bffb17 	ldw	r2,-20(fp)
   55e18:	10800c17 	ldw	r2,48(r2)
   55e1c:	18bfe51e 	bne	r3,r2,55db4 <__alt_mem_epcs_flash_controller+0xfe044db4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   55e20:	e0bffa17 	ldw	r2,-24(fp)
   55e24:	103f9d26 	beq	r2,zero,55c9c <__alt_mem_epcs_flash_controller+0xfe044c9c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   55e28:	e0bffb17 	ldw	r2,-20(fp)
   55e2c:	10c00817 	ldw	r3,32(r2)
   55e30:	00bfff44 	movi	r2,-3
   55e34:	1886703a 	and	r3,r3,r2
   55e38:	e0bffb17 	ldw	r2,-20(fp)
   55e3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   55e40:	e0bffb17 	ldw	r2,-20(fp)
   55e44:	10800017 	ldw	r2,0(r2)
   55e48:	10800104 	addi	r2,r2,4
   55e4c:	1007883a 	mov	r3,r2
   55e50:	e0bffb17 	ldw	r2,-20(fp)
   55e54:	10800817 	ldw	r2,32(r2)
   55e58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   55e5c:	e0bffc17 	ldw	r2,-16(fp)
   55e60:	10800104 	addi	r2,r2,4
   55e64:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   55e68:	003f8c06 	br	55c9c <__alt_mem_epcs_flash_controller+0xfe044c9c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   55e6c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   55e70:	0001883a 	nop
   55e74:	e037883a 	mov	sp,fp
   55e78:	df000017 	ldw	fp,0(sp)
   55e7c:	dec00104 	addi	sp,sp,4
   55e80:	f800283a 	ret

00055e84 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   55e84:	defff804 	addi	sp,sp,-32
   55e88:	df000715 	stw	fp,28(sp)
   55e8c:	df000704 	addi	fp,sp,28
   55e90:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   55e94:	e0bffb17 	ldw	r2,-20(fp)
   55e98:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   55e9c:	e0bff917 	ldw	r2,-28(fp)
   55ea0:	10800017 	ldw	r2,0(r2)
   55ea4:	10800104 	addi	r2,r2,4
   55ea8:	10800037 	ldwio	r2,0(r2)
   55eac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   55eb0:	e0bffa17 	ldw	r2,-24(fp)
   55eb4:	1081000c 	andi	r2,r2,1024
   55eb8:	10000b26 	beq	r2,zero,55ee8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   55ebc:	e0bff917 	ldw	r2,-28(fp)
   55ec0:	10800017 	ldw	r2,0(r2)
   55ec4:	10800104 	addi	r2,r2,4
   55ec8:	1007883a 	mov	r3,r2
   55ecc:	e0bff917 	ldw	r2,-28(fp)
   55ed0:	10800817 	ldw	r2,32(r2)
   55ed4:	10810014 	ori	r2,r2,1024
   55ed8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   55edc:	e0bff917 	ldw	r2,-28(fp)
   55ee0:	10000915 	stw	zero,36(r2)
   55ee4:	00000a06 	br	55f10 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   55ee8:	e0bff917 	ldw	r2,-28(fp)
   55eec:	10c00917 	ldw	r3,36(r2)
   55ef0:	00a00034 	movhi	r2,32768
   55ef4:	10bfff04 	addi	r2,r2,-4
   55ef8:	10c00536 	bltu	r2,r3,55f10 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   55efc:	e0bff917 	ldw	r2,-28(fp)
   55f00:	10800917 	ldw	r2,36(r2)
   55f04:	10c00044 	addi	r3,r2,1
   55f08:	e0bff917 	ldw	r2,-28(fp)
   55f0c:	10c00915 	stw	r3,36(r2)
   55f10:	d0a88617 	ldw	r2,-24040(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   55f14:	e037883a 	mov	sp,fp
   55f18:	df000017 	ldw	fp,0(sp)
   55f1c:	dec00104 	addi	sp,sp,4
   55f20:	f800283a 	ret

00055f24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   55f24:	defffd04 	addi	sp,sp,-12
   55f28:	df000215 	stw	fp,8(sp)
   55f2c:	df000204 	addi	fp,sp,8
   55f30:	e13ffe15 	stw	r4,-8(fp)
   55f34:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   55f38:	00000506 	br	55f50 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   55f3c:	e0bfff17 	ldw	r2,-4(fp)
   55f40:	1090000c 	andi	r2,r2,16384
   55f44:	10000226 	beq	r2,zero,55f50 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   55f48:	00bffd44 	movi	r2,-11
   55f4c:	00000b06 	br	55f7c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   55f50:	e0bffe17 	ldw	r2,-8(fp)
   55f54:	10c00d17 	ldw	r3,52(r2)
   55f58:	e0bffe17 	ldw	r2,-8(fp)
   55f5c:	10800c17 	ldw	r2,48(r2)
   55f60:	18800526 	beq	r3,r2,55f78 <altera_avalon_jtag_uart_close+0x54>
   55f64:	e0bffe17 	ldw	r2,-8(fp)
   55f68:	10c00917 	ldw	r3,36(r2)
   55f6c:	e0bffe17 	ldw	r2,-8(fp)
   55f70:	10800117 	ldw	r2,4(r2)
   55f74:	18bff136 	bltu	r3,r2,55f3c <__alt_mem_epcs_flash_controller+0xfe044f3c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   55f78:	0005883a 	mov	r2,zero
}
   55f7c:	e037883a 	mov	sp,fp
   55f80:	df000017 	ldw	fp,0(sp)
   55f84:	dec00104 	addi	sp,sp,4
   55f88:	f800283a 	ret

00055f8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   55f8c:	defffa04 	addi	sp,sp,-24
   55f90:	df000515 	stw	fp,20(sp)
   55f94:	df000504 	addi	fp,sp,20
   55f98:	e13ffd15 	stw	r4,-12(fp)
   55f9c:	e17ffe15 	stw	r5,-8(fp)
   55fa0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   55fa4:	00bff9c4 	movi	r2,-25
   55fa8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   55fac:	e0bffe17 	ldw	r2,-8(fp)
   55fb0:	10da8060 	cmpeqi	r3,r2,27137
   55fb4:	1800031e 	bne	r3,zero,55fc4 <altera_avalon_jtag_uart_ioctl+0x38>
   55fb8:	109a80a0 	cmpeqi	r2,r2,27138
   55fbc:	1000181e 	bne	r2,zero,56020 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   55fc0:	00002906 	br	56068 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   55fc4:	e0bffd17 	ldw	r2,-12(fp)
   55fc8:	10c00117 	ldw	r3,4(r2)
   55fcc:	00a00034 	movhi	r2,32768
   55fd0:	10bfffc4 	addi	r2,r2,-1
   55fd4:	18802126 	beq	r3,r2,5605c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   55fd8:	e0bfff17 	ldw	r2,-4(fp)
   55fdc:	10800017 	ldw	r2,0(r2)
   55fe0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   55fe4:	e0bffc17 	ldw	r2,-16(fp)
   55fe8:	10800090 	cmplti	r2,r2,2
   55fec:	1000061e 	bne	r2,zero,56008 <altera_avalon_jtag_uart_ioctl+0x7c>
   55ff0:	e0fffc17 	ldw	r3,-16(fp)
   55ff4:	00a00034 	movhi	r2,32768
   55ff8:	10bfffc4 	addi	r2,r2,-1
   55ffc:	18800226 	beq	r3,r2,56008 <altera_avalon_jtag_uart_ioctl+0x7c>
   56000:	e0bffc17 	ldw	r2,-16(fp)
   56004:	00000206 	br	56010 <altera_avalon_jtag_uart_ioctl+0x84>
   56008:	00a00034 	movhi	r2,32768
   5600c:	10bfff84 	addi	r2,r2,-2
   56010:	e0fffd17 	ldw	r3,-12(fp)
   56014:	18800115 	stw	r2,4(r3)
      rc = 0;
   56018:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   5601c:	00000f06 	br	5605c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   56020:	e0bffd17 	ldw	r2,-12(fp)
   56024:	10c00117 	ldw	r3,4(r2)
   56028:	00a00034 	movhi	r2,32768
   5602c:	10bfffc4 	addi	r2,r2,-1
   56030:	18800c26 	beq	r3,r2,56064 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   56034:	e0bffd17 	ldw	r2,-12(fp)
   56038:	10c00917 	ldw	r3,36(r2)
   5603c:	e0bffd17 	ldw	r2,-12(fp)
   56040:	10800117 	ldw	r2,4(r2)
   56044:	1885803a 	cmpltu	r2,r3,r2
   56048:	10c03fcc 	andi	r3,r2,255
   5604c:	e0bfff17 	ldw	r2,-4(fp)
   56050:	10c00015 	stw	r3,0(r2)
      rc = 0;
   56054:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   56058:	00000206 	br	56064 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   5605c:	0001883a 	nop
   56060:	00000106 	br	56068 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   56064:	0001883a 	nop

  default:
    break;
  }

  return rc;
   56068:	e0bffb17 	ldw	r2,-20(fp)
}
   5606c:	e037883a 	mov	sp,fp
   56070:	df000017 	ldw	fp,0(sp)
   56074:	dec00104 	addi	sp,sp,4
   56078:	f800283a 	ret

0005607c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   5607c:	defff304 	addi	sp,sp,-52
   56080:	dfc00c15 	stw	ra,48(sp)
   56084:	df000b15 	stw	fp,44(sp)
   56088:	df000b04 	addi	fp,sp,44
   5608c:	e13ffc15 	stw	r4,-16(fp)
   56090:	e17ffd15 	stw	r5,-12(fp)
   56094:	e1bffe15 	stw	r6,-8(fp)
   56098:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   5609c:	e0bffd17 	ldw	r2,-12(fp)
   560a0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   560a4:	00004706 	br	561c4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   560a8:	e0bffc17 	ldw	r2,-16(fp)
   560ac:	10800a17 	ldw	r2,40(r2)
   560b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   560b4:	e0bffc17 	ldw	r2,-16(fp)
   560b8:	10800b17 	ldw	r2,44(r2)
   560bc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   560c0:	e0fff717 	ldw	r3,-36(fp)
   560c4:	e0bff817 	ldw	r2,-32(fp)
   560c8:	18800536 	bltu	r3,r2,560e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   560cc:	e0fff717 	ldw	r3,-36(fp)
   560d0:	e0bff817 	ldw	r2,-32(fp)
   560d4:	1885c83a 	sub	r2,r3,r2
   560d8:	e0bff615 	stw	r2,-40(fp)
   560dc:	00000406 	br	560f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   560e0:	00c20004 	movi	r3,2048
   560e4:	e0bff817 	ldw	r2,-32(fp)
   560e8:	1885c83a 	sub	r2,r3,r2
   560ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   560f0:	e0bff617 	ldw	r2,-40(fp)
   560f4:	10001e26 	beq	r2,zero,56170 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   560f8:	e0fffe17 	ldw	r3,-8(fp)
   560fc:	e0bff617 	ldw	r2,-40(fp)
   56100:	1880022e 	bgeu	r3,r2,5610c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   56104:	e0bffe17 	ldw	r2,-8(fp)
   56108:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   5610c:	e0bffc17 	ldw	r2,-16(fp)
   56110:	10c00e04 	addi	r3,r2,56
   56114:	e0bff817 	ldw	r2,-32(fp)
   56118:	1885883a 	add	r2,r3,r2
   5611c:	e1bff617 	ldw	r6,-40(fp)
   56120:	100b883a 	mov	r5,r2
   56124:	e13ff517 	ldw	r4,-44(fp)
   56128:	0045c980 	call	45c98 <memcpy>
      ptr   += n;
   5612c:	e0fff517 	ldw	r3,-44(fp)
   56130:	e0bff617 	ldw	r2,-40(fp)
   56134:	1885883a 	add	r2,r3,r2
   56138:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   5613c:	e0fffe17 	ldw	r3,-8(fp)
   56140:	e0bff617 	ldw	r2,-40(fp)
   56144:	1885c83a 	sub	r2,r3,r2
   56148:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5614c:	e0fff817 	ldw	r3,-32(fp)
   56150:	e0bff617 	ldw	r2,-40(fp)
   56154:	1885883a 	add	r2,r3,r2
   56158:	10c1ffcc 	andi	r3,r2,2047
   5615c:	e0bffc17 	ldw	r2,-16(fp)
   56160:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   56164:	e0bffe17 	ldw	r2,-8(fp)
   56168:	00bfcf16 	blt	zero,r2,560a8 <__alt_mem_epcs_flash_controller+0xfe0450a8>
   5616c:	00000106 	br	56174 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   56170:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   56174:	e0fff517 	ldw	r3,-44(fp)
   56178:	e0bffd17 	ldw	r2,-12(fp)
   5617c:	1880141e 	bne	r3,r2,561d0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   56180:	e0bfff17 	ldw	r2,-4(fp)
   56184:	1090000c 	andi	r2,r2,16384
   56188:	1000131e 	bne	r2,zero,561d8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   5618c:	0001883a 	nop
   56190:	e0bffc17 	ldw	r2,-16(fp)
   56194:	10c00a17 	ldw	r3,40(r2)
   56198:	e0bff717 	ldw	r2,-36(fp)
   5619c:	1880051e 	bne	r3,r2,561b4 <altera_avalon_jtag_uart_read+0x138>
   561a0:	e0bffc17 	ldw	r2,-16(fp)
   561a4:	10c00917 	ldw	r3,36(r2)
   561a8:	e0bffc17 	ldw	r2,-16(fp)
   561ac:	10800117 	ldw	r2,4(r2)
   561b0:	18bff736 	bltu	r3,r2,56190 <__alt_mem_epcs_flash_controller+0xfe045190>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   561b4:	e0bffc17 	ldw	r2,-16(fp)
   561b8:	10c00a17 	ldw	r3,40(r2)
   561bc:	e0bff717 	ldw	r2,-36(fp)
   561c0:	18800726 	beq	r3,r2,561e0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   561c4:	e0bffe17 	ldw	r2,-8(fp)
   561c8:	00bfb716 	blt	zero,r2,560a8 <__alt_mem_epcs_flash_controller+0xfe0450a8>
   561cc:	00000506 	br	561e4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   561d0:	0001883a 	nop
   561d4:	00000306 	br	561e4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   561d8:	0001883a 	nop
   561dc:	00000106 	br	561e4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   561e0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   561e4:	e0fff517 	ldw	r3,-44(fp)
   561e8:	e0bffd17 	ldw	r2,-12(fp)
   561ec:	18801826 	beq	r3,r2,56250 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   561f0:	0005303a 	rdctl	r2,status
   561f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   561f8:	e0fffb17 	ldw	r3,-20(fp)
   561fc:	00bfff84 	movi	r2,-2
   56200:	1884703a 	and	r2,r3,r2
   56204:	1001703a 	wrctl	status,r2
  
  return context;
   56208:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   5620c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   56210:	e0bffc17 	ldw	r2,-16(fp)
   56214:	10800817 	ldw	r2,32(r2)
   56218:	10c00054 	ori	r3,r2,1
   5621c:	e0bffc17 	ldw	r2,-16(fp)
   56220:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   56224:	e0bffc17 	ldw	r2,-16(fp)
   56228:	10800017 	ldw	r2,0(r2)
   5622c:	10800104 	addi	r2,r2,4
   56230:	1007883a 	mov	r3,r2
   56234:	e0bffc17 	ldw	r2,-16(fp)
   56238:	10800817 	ldw	r2,32(r2)
   5623c:	18800035 	stwio	r2,0(r3)
   56240:	e0bffa17 	ldw	r2,-24(fp)
   56244:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56248:	e0bff917 	ldw	r2,-28(fp)
   5624c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   56250:	e0fff517 	ldw	r3,-44(fp)
   56254:	e0bffd17 	ldw	r2,-12(fp)
   56258:	18800426 	beq	r3,r2,5626c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   5625c:	e0fff517 	ldw	r3,-44(fp)
   56260:	e0bffd17 	ldw	r2,-12(fp)
   56264:	1885c83a 	sub	r2,r3,r2
   56268:	00000606 	br	56284 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   5626c:	e0bfff17 	ldw	r2,-4(fp)
   56270:	1090000c 	andi	r2,r2,16384
   56274:	10000226 	beq	r2,zero,56280 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   56278:	00bffd44 	movi	r2,-11
   5627c:	00000106 	br	56284 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   56280:	00bffec4 	movi	r2,-5
}
   56284:	e037883a 	mov	sp,fp
   56288:	dfc00117 	ldw	ra,4(sp)
   5628c:	df000017 	ldw	fp,0(sp)
   56290:	dec00204 	addi	sp,sp,8
   56294:	f800283a 	ret

00056298 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   56298:	defff304 	addi	sp,sp,-52
   5629c:	dfc00c15 	stw	ra,48(sp)
   562a0:	df000b15 	stw	fp,44(sp)
   562a4:	df000b04 	addi	fp,sp,44
   562a8:	e13ffc15 	stw	r4,-16(fp)
   562ac:	e17ffd15 	stw	r5,-12(fp)
   562b0:	e1bffe15 	stw	r6,-8(fp)
   562b4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   562b8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   562bc:	e0bffd17 	ldw	r2,-12(fp)
   562c0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   562c4:	00003706 	br	563a4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   562c8:	e0bffc17 	ldw	r2,-16(fp)
   562cc:	10800c17 	ldw	r2,48(r2)
   562d0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   562d4:	e0bffc17 	ldw	r2,-16(fp)
   562d8:	10800d17 	ldw	r2,52(r2)
   562dc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   562e0:	e0fff917 	ldw	r3,-28(fp)
   562e4:	e0bff517 	ldw	r2,-44(fp)
   562e8:	1880062e 	bgeu	r3,r2,56304 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   562ec:	e0fff517 	ldw	r3,-44(fp)
   562f0:	e0bff917 	ldw	r2,-28(fp)
   562f4:	1885c83a 	sub	r2,r3,r2
   562f8:	10bfffc4 	addi	r2,r2,-1
   562fc:	e0bff615 	stw	r2,-40(fp)
   56300:	00000b06 	br	56330 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   56304:	e0bff517 	ldw	r2,-44(fp)
   56308:	10000526 	beq	r2,zero,56320 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   5630c:	00c20004 	movi	r3,2048
   56310:	e0bff917 	ldw	r2,-28(fp)
   56314:	1885c83a 	sub	r2,r3,r2
   56318:	e0bff615 	stw	r2,-40(fp)
   5631c:	00000406 	br	56330 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   56320:	00c1ffc4 	movi	r3,2047
   56324:	e0bff917 	ldw	r2,-28(fp)
   56328:	1885c83a 	sub	r2,r3,r2
   5632c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   56330:	e0bff617 	ldw	r2,-40(fp)
   56334:	10001e26 	beq	r2,zero,563b0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   56338:	e0fffe17 	ldw	r3,-8(fp)
   5633c:	e0bff617 	ldw	r2,-40(fp)
   56340:	1880022e 	bgeu	r3,r2,5634c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   56344:	e0bffe17 	ldw	r2,-8(fp)
   56348:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   5634c:	e0bffc17 	ldw	r2,-16(fp)
   56350:	10c20e04 	addi	r3,r2,2104
   56354:	e0bff917 	ldw	r2,-28(fp)
   56358:	1885883a 	add	r2,r3,r2
   5635c:	e1bff617 	ldw	r6,-40(fp)
   56360:	e17ffd17 	ldw	r5,-12(fp)
   56364:	1009883a 	mov	r4,r2
   56368:	0045c980 	call	45c98 <memcpy>
      ptr   += n;
   5636c:	e0fffd17 	ldw	r3,-12(fp)
   56370:	e0bff617 	ldw	r2,-40(fp)
   56374:	1885883a 	add	r2,r3,r2
   56378:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   5637c:	e0fffe17 	ldw	r3,-8(fp)
   56380:	e0bff617 	ldw	r2,-40(fp)
   56384:	1885c83a 	sub	r2,r3,r2
   56388:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5638c:	e0fff917 	ldw	r3,-28(fp)
   56390:	e0bff617 	ldw	r2,-40(fp)
   56394:	1885883a 	add	r2,r3,r2
   56398:	10c1ffcc 	andi	r3,r2,2047
   5639c:	e0bffc17 	ldw	r2,-16(fp)
   563a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   563a4:	e0bffe17 	ldw	r2,-8(fp)
   563a8:	00bfc716 	blt	zero,r2,562c8 <__alt_mem_epcs_flash_controller+0xfe0452c8>
   563ac:	00000106 	br	563b4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   563b0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   563b4:	0005303a 	rdctl	r2,status
   563b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   563bc:	e0fffb17 	ldw	r3,-20(fp)
   563c0:	00bfff84 	movi	r2,-2
   563c4:	1884703a 	and	r2,r3,r2
   563c8:	1001703a 	wrctl	status,r2
  
  return context;
   563cc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   563d0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   563d4:	e0bffc17 	ldw	r2,-16(fp)
   563d8:	10800817 	ldw	r2,32(r2)
   563dc:	10c00094 	ori	r3,r2,2
   563e0:	e0bffc17 	ldw	r2,-16(fp)
   563e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   563e8:	e0bffc17 	ldw	r2,-16(fp)
   563ec:	10800017 	ldw	r2,0(r2)
   563f0:	10800104 	addi	r2,r2,4
   563f4:	1007883a 	mov	r3,r2
   563f8:	e0bffc17 	ldw	r2,-16(fp)
   563fc:	10800817 	ldw	r2,32(r2)
   56400:	18800035 	stwio	r2,0(r3)
   56404:	e0bffa17 	ldw	r2,-24(fp)
   56408:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5640c:	e0bff817 	ldw	r2,-32(fp)
   56410:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   56414:	e0bffe17 	ldw	r2,-8(fp)
   56418:	0080100e 	bge	zero,r2,5645c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   5641c:	e0bfff17 	ldw	r2,-4(fp)
   56420:	1090000c 	andi	r2,r2,16384
   56424:	1000101e 	bne	r2,zero,56468 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   56428:	0001883a 	nop
   5642c:	e0bffc17 	ldw	r2,-16(fp)
   56430:	10c00d17 	ldw	r3,52(r2)
   56434:	e0bff517 	ldw	r2,-44(fp)
   56438:	1880051e 	bne	r3,r2,56450 <altera_avalon_jtag_uart_write+0x1b8>
   5643c:	e0bffc17 	ldw	r2,-16(fp)
   56440:	10c00917 	ldw	r3,36(r2)
   56444:	e0bffc17 	ldw	r2,-16(fp)
   56448:	10800117 	ldw	r2,4(r2)
   5644c:	18bff736 	bltu	r3,r2,5642c <__alt_mem_epcs_flash_controller+0xfe04542c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   56450:	e0bffc17 	ldw	r2,-16(fp)
   56454:	10800917 	ldw	r2,36(r2)
   56458:	1000051e 	bne	r2,zero,56470 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   5645c:	e0bffe17 	ldw	r2,-8(fp)
   56460:	00bfd016 	blt	zero,r2,563a4 <__alt_mem_epcs_flash_controller+0xfe0453a4>
   56464:	00000306 	br	56474 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   56468:	0001883a 	nop
   5646c:	00000106 	br	56474 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   56470:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   56474:	e0fffd17 	ldw	r3,-12(fp)
   56478:	e0bff717 	ldw	r2,-36(fp)
   5647c:	18800426 	beq	r3,r2,56490 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   56480:	e0fffd17 	ldw	r3,-12(fp)
   56484:	e0bff717 	ldw	r2,-36(fp)
   56488:	1885c83a 	sub	r2,r3,r2
   5648c:	00000606 	br	564a8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   56490:	e0bfff17 	ldw	r2,-4(fp)
   56494:	1090000c 	andi	r2,r2,16384
   56498:	10000226 	beq	r2,zero,564a4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   5649c:	00bffd44 	movi	r2,-11
   564a0:	00000106 	br	564a8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   564a4:	00bffec4 	movi	r2,-5
}
   564a8:	e037883a 	mov	sp,fp
   564ac:	dfc00117 	ldw	ra,4(sp)
   564b0:	df000017 	ldw	fp,0(sp)
   564b4:	dec00204 	addi	sp,sp,8
   564b8:	f800283a 	ret

000564bc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   564bc:	defffa04 	addi	sp,sp,-24
   564c0:	dfc00515 	stw	ra,20(sp)
   564c4:	df000415 	stw	fp,16(sp)
   564c8:	df000404 	addi	fp,sp,16
   564cc:	e13ffd15 	stw	r4,-12(fp)
   564d0:	e17ffe15 	stw	r5,-8(fp)
   564d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   564d8:	e0bffd17 	ldw	r2,-12(fp)
   564dc:	10800017 	ldw	r2,0(r2)
   564e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   564e4:	e0bffc17 	ldw	r2,-16(fp)
   564e8:	10c00a04 	addi	r3,r2,40
   564ec:	e0bffd17 	ldw	r2,-12(fp)
   564f0:	10800217 	ldw	r2,8(r2)
   564f4:	100f883a 	mov	r7,r2
   564f8:	e1bfff17 	ldw	r6,-4(fp)
   564fc:	e17ffe17 	ldw	r5,-8(fp)
   56500:	1809883a 	mov	r4,r3
   56504:	00569d00 	call	569d0 <altera_avalon_uart_read>
      fd->fd_flags);
}
   56508:	e037883a 	mov	sp,fp
   5650c:	dfc00117 	ldw	ra,4(sp)
   56510:	df000017 	ldw	fp,0(sp)
   56514:	dec00204 	addi	sp,sp,8
   56518:	f800283a 	ret

0005651c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   5651c:	defffa04 	addi	sp,sp,-24
   56520:	dfc00515 	stw	ra,20(sp)
   56524:	df000415 	stw	fp,16(sp)
   56528:	df000404 	addi	fp,sp,16
   5652c:	e13ffd15 	stw	r4,-12(fp)
   56530:	e17ffe15 	stw	r5,-8(fp)
   56534:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   56538:	e0bffd17 	ldw	r2,-12(fp)
   5653c:	10800017 	ldw	r2,0(r2)
   56540:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   56544:	e0bffc17 	ldw	r2,-16(fp)
   56548:	10c00a04 	addi	r3,r2,40
   5654c:	e0bffd17 	ldw	r2,-12(fp)
   56550:	10800217 	ldw	r2,8(r2)
   56554:	100f883a 	mov	r7,r2
   56558:	e1bfff17 	ldw	r6,-4(fp)
   5655c:	e17ffe17 	ldw	r5,-8(fp)
   56560:	1809883a 	mov	r4,r3
   56564:	0056be80 	call	56be8 <altera_avalon_uart_write>
      fd->fd_flags);
}
   56568:	e037883a 	mov	sp,fp
   5656c:	dfc00117 	ldw	ra,4(sp)
   56570:	df000017 	ldw	fp,0(sp)
   56574:	dec00204 	addi	sp,sp,8
   56578:	f800283a 	ret

0005657c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   5657c:	defffc04 	addi	sp,sp,-16
   56580:	dfc00315 	stw	ra,12(sp)
   56584:	df000215 	stw	fp,8(sp)
   56588:	df000204 	addi	fp,sp,8
   5658c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   56590:	e0bfff17 	ldw	r2,-4(fp)
   56594:	10800017 	ldw	r2,0(r2)
   56598:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   5659c:	e0bffe17 	ldw	r2,-8(fp)
   565a0:	10c00a04 	addi	r3,r2,40
   565a4:	e0bfff17 	ldw	r2,-4(fp)
   565a8:	10800217 	ldw	r2,8(r2)
   565ac:	100b883a 	mov	r5,r2
   565b0:	1809883a 	mov	r4,r3
   565b4:	00569400 	call	56940 <altera_avalon_uart_close>
}
   565b8:	e037883a 	mov	sp,fp
   565bc:	dfc00117 	ldw	ra,4(sp)
   565c0:	df000017 	ldw	fp,0(sp)
   565c4:	dec00204 	addi	sp,sp,8
   565c8:	f800283a 	ret

000565cc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   565cc:	defff804 	addi	sp,sp,-32
   565d0:	dfc00715 	stw	ra,28(sp)
   565d4:	df000615 	stw	fp,24(sp)
   565d8:	df000604 	addi	fp,sp,24
   565dc:	e13ffd15 	stw	r4,-12(fp)
   565e0:	e17ffe15 	stw	r5,-8(fp)
   565e4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   565e8:	e0bffd17 	ldw	r2,-12(fp)
   565ec:	10800017 	ldw	r2,0(r2)
   565f0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   565f4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   565f8:	1000041e 	bne	r2,zero,5660c <altera_avalon_uart_init+0x40>
   565fc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   56600:	1000021e 	bne	r2,zero,5660c <altera_avalon_uart_init+0x40>
   56604:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   56608:	10000226 	beq	r2,zero,56614 <altera_avalon_uart_init+0x48>
   5660c:	00800044 	movi	r2,1
   56610:	00000106 	br	56618 <altera_avalon_uart_init+0x4c>
   56614:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   56618:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   5661c:	e0bffc17 	ldw	r2,-16(fp)
   56620:	10000f1e 	bne	r2,zero,56660 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   56624:	e0bffd17 	ldw	r2,-12(fp)
   56628:	00c32004 	movi	r3,3200
   5662c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   56630:	e0bffb17 	ldw	r2,-20(fp)
   56634:	10800304 	addi	r2,r2,12
   56638:	e0fffd17 	ldw	r3,-12(fp)
   5663c:	18c00117 	ldw	r3,4(r3)
   56640:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   56644:	d8000015 	stw	zero,0(sp)
   56648:	e1fffd17 	ldw	r7,-12(fp)
   5664c:	01800174 	movhi	r6,5
   56650:	31999e04 	addi	r6,r6,26232
   56654:	e17fff17 	ldw	r5,-4(fp)
   56658:	e13ffe17 	ldw	r4,-8(fp)
   5665c:	00541740 	call	54174 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   56660:	0001883a 	nop
   56664:	e037883a 	mov	sp,fp
   56668:	dfc00117 	ldw	ra,4(sp)
   5666c:	df000017 	ldw	fp,0(sp)
   56670:	dec00204 	addi	sp,sp,8
   56674:	f800283a 	ret

00056678 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   56678:	defffa04 	addi	sp,sp,-24
   5667c:	dfc00515 	stw	ra,20(sp)
   56680:	df000415 	stw	fp,16(sp)
   56684:	df000404 	addi	fp,sp,16
   56688:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   5668c:	e0bfff17 	ldw	r2,-4(fp)
   56690:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   56694:	e0bffc17 	ldw	r2,-16(fp)
   56698:	10800017 	ldw	r2,0(r2)
   5669c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   566a0:	e0bffd17 	ldw	r2,-12(fp)
   566a4:	10800204 	addi	r2,r2,8
   566a8:	10800037 	ldwio	r2,0(r2)
   566ac:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   566b0:	e0bffd17 	ldw	r2,-12(fp)
   566b4:	10800204 	addi	r2,r2,8
   566b8:	0007883a 	mov	r3,zero
   566bc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   566c0:	e0bffd17 	ldw	r2,-12(fp)
   566c4:	10800204 	addi	r2,r2,8
   566c8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   566cc:	e0bffe17 	ldw	r2,-8(fp)
   566d0:	1080200c 	andi	r2,r2,128
   566d4:	10000326 	beq	r2,zero,566e4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   566d8:	e17ffe17 	ldw	r5,-8(fp)
   566dc:	e13ffc17 	ldw	r4,-16(fp)
   566e0:	00567140 	call	56714 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   566e4:	e0bffe17 	ldw	r2,-8(fp)
   566e8:	1081100c 	andi	r2,r2,1088
   566ec:	10000326 	beq	r2,zero,566fc <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   566f0:	e17ffe17 	ldw	r5,-8(fp)
   566f4:	e13ffc17 	ldw	r4,-16(fp)
   566f8:	00567f80 	call	567f8 <altera_avalon_uart_txirq>
  }
  

}
   566fc:	0001883a 	nop
   56700:	e037883a 	mov	sp,fp
   56704:	dfc00117 	ldw	ra,4(sp)
   56708:	df000017 	ldw	fp,0(sp)
   5670c:	dec00204 	addi	sp,sp,8
   56710:	f800283a 	ret

00056714 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   56714:	defffc04 	addi	sp,sp,-16
   56718:	df000315 	stw	fp,12(sp)
   5671c:	df000304 	addi	fp,sp,12
   56720:	e13ffe15 	stw	r4,-8(fp)
   56724:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   56728:	e0bfff17 	ldw	r2,-4(fp)
   5672c:	108000cc 	andi	r2,r2,3
   56730:	10002c1e 	bne	r2,zero,567e4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   56734:	e0bffe17 	ldw	r2,-8(fp)
   56738:	10800317 	ldw	r2,12(r2)
   5673c:	e0bffe17 	ldw	r2,-8(fp)
   56740:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   56744:	e0bffe17 	ldw	r2,-8(fp)
   56748:	10800317 	ldw	r2,12(r2)
   5674c:	10800044 	addi	r2,r2,1
   56750:	10800fcc 	andi	r2,r2,63
   56754:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   56758:	e0bffe17 	ldw	r2,-8(fp)
   5675c:	10800317 	ldw	r2,12(r2)
   56760:	e0fffe17 	ldw	r3,-8(fp)
   56764:	18c00017 	ldw	r3,0(r3)
   56768:	18c00037 	ldwio	r3,0(r3)
   5676c:	1809883a 	mov	r4,r3
   56770:	e0fffe17 	ldw	r3,-8(fp)
   56774:	1885883a 	add	r2,r3,r2
   56778:	10800704 	addi	r2,r2,28
   5677c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   56780:	e0bffe17 	ldw	r2,-8(fp)
   56784:	e0fffd17 	ldw	r3,-12(fp)
   56788:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   5678c:	e0bffe17 	ldw	r2,-8(fp)
   56790:	10800317 	ldw	r2,12(r2)
   56794:	10800044 	addi	r2,r2,1
   56798:	10800fcc 	andi	r2,r2,63
   5679c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   567a0:	e0bffe17 	ldw	r2,-8(fp)
   567a4:	10c00217 	ldw	r3,8(r2)
   567a8:	e0bffd17 	ldw	r2,-12(fp)
   567ac:	18800e1e 	bne	r3,r2,567e8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   567b0:	e0bffe17 	ldw	r2,-8(fp)
   567b4:	10c00117 	ldw	r3,4(r2)
   567b8:	00bfdfc4 	movi	r2,-129
   567bc:	1886703a 	and	r3,r3,r2
   567c0:	e0bffe17 	ldw	r2,-8(fp)
   567c4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   567c8:	e0bffe17 	ldw	r2,-8(fp)
   567cc:	10800017 	ldw	r2,0(r2)
   567d0:	10800304 	addi	r2,r2,12
   567d4:	e0fffe17 	ldw	r3,-8(fp)
   567d8:	18c00117 	ldw	r3,4(r3)
   567dc:	10c00035 	stwio	r3,0(r2)
   567e0:	00000106 	br	567e8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   567e4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   567e8:	e037883a 	mov	sp,fp
   567ec:	df000017 	ldw	fp,0(sp)
   567f0:	dec00104 	addi	sp,sp,4
   567f4:	f800283a 	ret

000567f8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   567f8:	defffb04 	addi	sp,sp,-20
   567fc:	df000415 	stw	fp,16(sp)
   56800:	df000404 	addi	fp,sp,16
   56804:	e13ffc15 	stw	r4,-16(fp)
   56808:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   5680c:	e0bffc17 	ldw	r2,-16(fp)
   56810:	10c00417 	ldw	r3,16(r2)
   56814:	e0bffc17 	ldw	r2,-16(fp)
   56818:	10800517 	ldw	r2,20(r2)
   5681c:	18803226 	beq	r3,r2,568e8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   56820:	e0bffc17 	ldw	r2,-16(fp)
   56824:	10800617 	ldw	r2,24(r2)
   56828:	1080008c 	andi	r2,r2,2
   5682c:	10000326 	beq	r2,zero,5683c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   56830:	e0bffd17 	ldw	r2,-12(fp)
   56834:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   56838:	10001d26 	beq	r2,zero,568b0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   5683c:	e0bffc17 	ldw	r2,-16(fp)
   56840:	10800417 	ldw	r2,16(r2)
   56844:	e0bffc17 	ldw	r2,-16(fp)
   56848:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   5684c:	e0bffc17 	ldw	r2,-16(fp)
   56850:	10800017 	ldw	r2,0(r2)
   56854:	10800104 	addi	r2,r2,4
   56858:	e0fffc17 	ldw	r3,-16(fp)
   5685c:	18c00417 	ldw	r3,16(r3)
   56860:	e13ffc17 	ldw	r4,-16(fp)
   56864:	20c7883a 	add	r3,r4,r3
   56868:	18c01704 	addi	r3,r3,92
   5686c:	18c00003 	ldbu	r3,0(r3)
   56870:	18c03fcc 	andi	r3,r3,255
   56874:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   56878:	e0bffc17 	ldw	r2,-16(fp)
   5687c:	10800417 	ldw	r2,16(r2)
   56880:	10800044 	addi	r2,r2,1
   56884:	e0fffc17 	ldw	r3,-16(fp)
   56888:	18800415 	stw	r2,16(r3)
   5688c:	10c00fcc 	andi	r3,r2,63
   56890:	e0bffc17 	ldw	r2,-16(fp)
   56894:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   56898:	e0bffc17 	ldw	r2,-16(fp)
   5689c:	10800117 	ldw	r2,4(r2)
   568a0:	10c01014 	ori	r3,r2,64
   568a4:	e0bffc17 	ldw	r2,-16(fp)
   568a8:	10c00115 	stw	r3,4(r2)
   568ac:	00000e06 	br	568e8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   568b0:	e0bffc17 	ldw	r2,-16(fp)
   568b4:	10800017 	ldw	r2,0(r2)
   568b8:	10800204 	addi	r2,r2,8
   568bc:	10800037 	ldwio	r2,0(r2)
   568c0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   568c4:	e0bffd17 	ldw	r2,-12(fp)
   568c8:	1082000c 	andi	r2,r2,2048
   568cc:	1000061e 	bne	r2,zero,568e8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   568d0:	e0bffc17 	ldw	r2,-16(fp)
   568d4:	10c00117 	ldw	r3,4(r2)
   568d8:	00bfefc4 	movi	r2,-65
   568dc:	1886703a 	and	r3,r3,r2
   568e0:	e0bffc17 	ldw	r2,-16(fp)
   568e4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   568e8:	e0bffc17 	ldw	r2,-16(fp)
   568ec:	10c00417 	ldw	r3,16(r2)
   568f0:	e0bffc17 	ldw	r2,-16(fp)
   568f4:	10800517 	ldw	r2,20(r2)
   568f8:	1880061e 	bne	r3,r2,56914 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   568fc:	e0bffc17 	ldw	r2,-16(fp)
   56900:	10c00117 	ldw	r3,4(r2)
   56904:	00beefc4 	movi	r2,-1089
   56908:	1886703a 	and	r3,r3,r2
   5690c:	e0bffc17 	ldw	r2,-16(fp)
   56910:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   56914:	e0bffc17 	ldw	r2,-16(fp)
   56918:	10800017 	ldw	r2,0(r2)
   5691c:	10800304 	addi	r2,r2,12
   56920:	e0fffc17 	ldw	r3,-16(fp)
   56924:	18c00117 	ldw	r3,4(r3)
   56928:	10c00035 	stwio	r3,0(r2)
}
   5692c:	0001883a 	nop
   56930:	e037883a 	mov	sp,fp
   56934:	df000017 	ldw	fp,0(sp)
   56938:	dec00104 	addi	sp,sp,4
   5693c:	f800283a 	ret

00056940 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   56940:	defffd04 	addi	sp,sp,-12
   56944:	df000215 	stw	fp,8(sp)
   56948:	df000204 	addi	fp,sp,8
   5694c:	e13ffe15 	stw	r4,-8(fp)
   56950:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   56954:	00000506 	br	5696c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   56958:	e0bfff17 	ldw	r2,-4(fp)
   5695c:	1090000c 	andi	r2,r2,16384
   56960:	10000226 	beq	r2,zero,5696c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   56964:	00bffd44 	movi	r2,-11
   56968:	00000606 	br	56984 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   5696c:	e0bffe17 	ldw	r2,-8(fp)
   56970:	10c00417 	ldw	r3,16(r2)
   56974:	e0bffe17 	ldw	r2,-8(fp)
   56978:	10800517 	ldw	r2,20(r2)
   5697c:	18bff61e 	bne	r3,r2,56958 <__alt_mem_epcs_flash_controller+0xfe045958>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   56980:	0005883a 	mov	r2,zero
}
   56984:	e037883a 	mov	sp,fp
   56988:	df000017 	ldw	fp,0(sp)
   5698c:	dec00104 	addi	sp,sp,4
   56990:	f800283a 	ret

00056994 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   56994:	defffe04 	addi	sp,sp,-8
   56998:	dfc00115 	stw	ra,4(sp)
   5699c:	df000015 	stw	fp,0(sp)
   569a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   569a4:	d0a02117 	ldw	r2,-32636(gp)
   569a8:	10000326 	beq	r2,zero,569b8 <alt_get_errno+0x24>
   569ac:	d0a02117 	ldw	r2,-32636(gp)
   569b0:	103ee83a 	callr	r2
   569b4:	00000106 	br	569bc <alt_get_errno+0x28>
   569b8:	d0a87a04 	addi	r2,gp,-24088
}
   569bc:	e037883a 	mov	sp,fp
   569c0:	dfc00117 	ldw	ra,4(sp)
   569c4:	df000017 	ldw	fp,0(sp)
   569c8:	dec00204 	addi	sp,sp,8
   569cc:	f800283a 	ret

000569d0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   569d0:	defff204 	addi	sp,sp,-56
   569d4:	dfc00d15 	stw	ra,52(sp)
   569d8:	df000c15 	stw	fp,48(sp)
   569dc:	df000c04 	addi	fp,sp,48
   569e0:	e13ffc15 	stw	r4,-16(fp)
   569e4:	e17ffd15 	stw	r5,-12(fp)
   569e8:	e1bffe15 	stw	r6,-8(fp)
   569ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   569f0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   569f4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   569f8:	e0bfff17 	ldw	r2,-4(fp)
   569fc:	1090000c 	andi	r2,r2,16384
   56a00:	1005003a 	cmpeq	r2,r2,zero
   56a04:	10803fcc 	andi	r2,r2,255
   56a08:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   56a0c:	00001306 	br	56a5c <altera_avalon_uart_read+0x8c>
    {
      count++;
   56a10:	e0bff517 	ldw	r2,-44(fp)
   56a14:	10800044 	addi	r2,r2,1
   56a18:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   56a1c:	e0bffd17 	ldw	r2,-12(fp)
   56a20:	10c00044 	addi	r3,r2,1
   56a24:	e0fffd15 	stw	r3,-12(fp)
   56a28:	e0fffc17 	ldw	r3,-16(fp)
   56a2c:	18c00217 	ldw	r3,8(r3)
   56a30:	e13ffc17 	ldw	r4,-16(fp)
   56a34:	20c7883a 	add	r3,r4,r3
   56a38:	18c00704 	addi	r3,r3,28
   56a3c:	18c00003 	ldbu	r3,0(r3)
   56a40:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   56a44:	e0bffc17 	ldw	r2,-16(fp)
   56a48:	10800217 	ldw	r2,8(r2)
   56a4c:	10800044 	addi	r2,r2,1
   56a50:	10c00fcc 	andi	r3,r2,63
   56a54:	e0bffc17 	ldw	r2,-16(fp)
   56a58:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   56a5c:	e0fff517 	ldw	r3,-44(fp)
   56a60:	e0bffe17 	ldw	r2,-8(fp)
   56a64:	1880050e 	bge	r3,r2,56a7c <altera_avalon_uart_read+0xac>
   56a68:	e0bffc17 	ldw	r2,-16(fp)
   56a6c:	10c00217 	ldw	r3,8(r2)
   56a70:	e0bffc17 	ldw	r2,-16(fp)
   56a74:	10800317 	ldw	r2,12(r2)
   56a78:	18bfe51e 	bne	r3,r2,56a10 <__alt_mem_epcs_flash_controller+0xfe045a10>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   56a7c:	e0bff517 	ldw	r2,-44(fp)
   56a80:	1000251e 	bne	r2,zero,56b18 <altera_avalon_uart_read+0x148>
   56a84:	e0bffc17 	ldw	r2,-16(fp)
   56a88:	10c00217 	ldw	r3,8(r2)
   56a8c:	e0bffc17 	ldw	r2,-16(fp)
   56a90:	10800317 	ldw	r2,12(r2)
   56a94:	1880201e 	bne	r3,r2,56b18 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   56a98:	e0bff617 	ldw	r2,-40(fp)
   56a9c:	1000071e 	bne	r2,zero,56abc <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   56aa0:	00569940 	call	56994 <alt_get_errno>
   56aa4:	1007883a 	mov	r3,r2
   56aa8:	008002c4 	movi	r2,11
   56aac:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   56ab0:	00800044 	movi	r2,1
   56ab4:	e0bff405 	stb	r2,-48(fp)
        break;
   56ab8:	00001b06 	br	56b28 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56abc:	0005303a 	rdctl	r2,status
   56ac0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56ac4:	e0fff917 	ldw	r3,-28(fp)
   56ac8:	00bfff84 	movi	r2,-2
   56acc:	1884703a 	and	r2,r3,r2
   56ad0:	1001703a 	wrctl	status,r2
  
  return context;
   56ad4:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   56ad8:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   56adc:	e0bffc17 	ldw	r2,-16(fp)
   56ae0:	10800117 	ldw	r2,4(r2)
   56ae4:	10c02014 	ori	r3,r2,128
   56ae8:	e0bffc17 	ldw	r2,-16(fp)
   56aec:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   56af0:	e0bffc17 	ldw	r2,-16(fp)
   56af4:	10800017 	ldw	r2,0(r2)
   56af8:	10800304 	addi	r2,r2,12
   56afc:	e0fffc17 	ldw	r3,-16(fp)
   56b00:	18c00117 	ldw	r3,4(r3)
   56b04:	10c00035 	stwio	r3,0(r2)
   56b08:	e0bff817 	ldw	r2,-32(fp)
   56b0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56b10:	e0bffa17 	ldw	r2,-24(fp)
   56b14:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   56b18:	e0bff517 	ldw	r2,-44(fp)
   56b1c:	1000021e 	bne	r2,zero,56b28 <altera_avalon_uart_read+0x158>
   56b20:	e0bffe17 	ldw	r2,-8(fp)
   56b24:	103fcd1e 	bne	r2,zero,56a5c <__alt_mem_epcs_flash_controller+0xfe045a5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56b28:	0005303a 	rdctl	r2,status
   56b2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56b30:	e0fffb17 	ldw	r3,-20(fp)
   56b34:	00bfff84 	movi	r2,-2
   56b38:	1884703a 	and	r2,r3,r2
   56b3c:	1001703a 	wrctl	status,r2
  
  return context;
   56b40:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   56b44:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   56b48:	e0bffc17 	ldw	r2,-16(fp)
   56b4c:	10800117 	ldw	r2,4(r2)
   56b50:	10c02014 	ori	r3,r2,128
   56b54:	e0bffc17 	ldw	r2,-16(fp)
   56b58:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   56b5c:	e0bffc17 	ldw	r2,-16(fp)
   56b60:	10800017 	ldw	r2,0(r2)
   56b64:	10800304 	addi	r2,r2,12
   56b68:	e0fffc17 	ldw	r3,-16(fp)
   56b6c:	18c00117 	ldw	r3,4(r3)
   56b70:	10c00035 	stwio	r3,0(r2)
   56b74:	e0bff817 	ldw	r2,-32(fp)
   56b78:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56b7c:	e0bff717 	ldw	r2,-36(fp)
   56b80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   56b84:	e0bff403 	ldbu	r2,-48(fp)
   56b88:	10000226 	beq	r2,zero,56b94 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   56b8c:	00bffd44 	movi	r2,-11
   56b90:	00000106 	br	56b98 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   56b94:	e0bff517 	ldw	r2,-44(fp)
  }
}
   56b98:	e037883a 	mov	sp,fp
   56b9c:	dfc00117 	ldw	ra,4(sp)
   56ba0:	df000017 	ldw	fp,0(sp)
   56ba4:	dec00204 	addi	sp,sp,8
   56ba8:	f800283a 	ret

00056bac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   56bac:	defffe04 	addi	sp,sp,-8
   56bb0:	dfc00115 	stw	ra,4(sp)
   56bb4:	df000015 	stw	fp,0(sp)
   56bb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   56bbc:	d0a02117 	ldw	r2,-32636(gp)
   56bc0:	10000326 	beq	r2,zero,56bd0 <alt_get_errno+0x24>
   56bc4:	d0a02117 	ldw	r2,-32636(gp)
   56bc8:	103ee83a 	callr	r2
   56bcc:	00000106 	br	56bd4 <alt_get_errno+0x28>
   56bd0:	d0a87a04 	addi	r2,gp,-24088
}
   56bd4:	e037883a 	mov	sp,fp
   56bd8:	dfc00117 	ldw	ra,4(sp)
   56bdc:	df000017 	ldw	fp,0(sp)
   56be0:	dec00204 	addi	sp,sp,8
   56be4:	f800283a 	ret

00056be8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   56be8:	defff204 	addi	sp,sp,-56
   56bec:	dfc00d15 	stw	ra,52(sp)
   56bf0:	df000c15 	stw	fp,48(sp)
   56bf4:	df000c04 	addi	fp,sp,48
   56bf8:	e13ffc15 	stw	r4,-16(fp)
   56bfc:	e17ffd15 	stw	r5,-12(fp)
   56c00:	e1bffe15 	stw	r6,-8(fp)
   56c04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   56c08:	e0bffe17 	ldw	r2,-8(fp)
   56c0c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   56c10:	e0bfff17 	ldw	r2,-4(fp)
   56c14:	1090000c 	andi	r2,r2,16384
   56c18:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   56c1c:	00003c06 	br	56d10 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   56c20:	e0bffc17 	ldw	r2,-16(fp)
   56c24:	10800517 	ldw	r2,20(r2)
   56c28:	10800044 	addi	r2,r2,1
   56c2c:	10800fcc 	andi	r2,r2,63
   56c30:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   56c34:	e0bffc17 	ldw	r2,-16(fp)
   56c38:	10c00417 	ldw	r3,16(r2)
   56c3c:	e0bff717 	ldw	r2,-36(fp)
   56c40:	1880221e 	bne	r3,r2,56ccc <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   56c44:	e0bff517 	ldw	r2,-44(fp)
   56c48:	10000526 	beq	r2,zero,56c60 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   56c4c:	0056bac0 	call	56bac <alt_get_errno>
   56c50:	1007883a 	mov	r3,r2
   56c54:	008002c4 	movi	r2,11
   56c58:	18800015 	stw	r2,0(r3)
        break;
   56c5c:	00002e06 	br	56d18 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56c60:	0005303a 	rdctl	r2,status
   56c64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56c68:	e0fff917 	ldw	r3,-28(fp)
   56c6c:	00bfff84 	movi	r2,-2
   56c70:	1884703a 	and	r2,r3,r2
   56c74:	1001703a 	wrctl	status,r2
  
  return context;
   56c78:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   56c7c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   56c80:	e0bffc17 	ldw	r2,-16(fp)
   56c84:	10800117 	ldw	r2,4(r2)
   56c88:	10c11014 	ori	r3,r2,1088
   56c8c:	e0bffc17 	ldw	r2,-16(fp)
   56c90:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   56c94:	e0bffc17 	ldw	r2,-16(fp)
   56c98:	10800017 	ldw	r2,0(r2)
   56c9c:	10800304 	addi	r2,r2,12
   56ca0:	e0fffc17 	ldw	r3,-16(fp)
   56ca4:	18c00117 	ldw	r3,4(r3)
   56ca8:	10c00035 	stwio	r3,0(r2)
   56cac:	e0bff817 	ldw	r2,-32(fp)
   56cb0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56cb4:	e0bff617 	ldw	r2,-40(fp)
   56cb8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   56cbc:	e0bffc17 	ldw	r2,-16(fp)
   56cc0:	10c00417 	ldw	r3,16(r2)
   56cc4:	e0bff717 	ldw	r2,-36(fp)
   56cc8:	18bffc26 	beq	r3,r2,56cbc <__alt_mem_epcs_flash_controller+0xfe045cbc>
      }
    }

    count--;
   56ccc:	e0bff417 	ldw	r2,-48(fp)
   56cd0:	10bfffc4 	addi	r2,r2,-1
   56cd4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   56cd8:	e0bffc17 	ldw	r2,-16(fp)
   56cdc:	10c00517 	ldw	r3,20(r2)
   56ce0:	e0bffd17 	ldw	r2,-12(fp)
   56ce4:	11000044 	addi	r4,r2,1
   56ce8:	e13ffd15 	stw	r4,-12(fp)
   56cec:	10800003 	ldbu	r2,0(r2)
   56cf0:	1009883a 	mov	r4,r2
   56cf4:	e0bffc17 	ldw	r2,-16(fp)
   56cf8:	10c5883a 	add	r2,r2,r3
   56cfc:	10801704 	addi	r2,r2,92
   56d00:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   56d04:	e0bffc17 	ldw	r2,-16(fp)
   56d08:	e0fff717 	ldw	r3,-36(fp)
   56d0c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   56d10:	e0bff417 	ldw	r2,-48(fp)
   56d14:	103fc21e 	bne	r2,zero,56c20 <__alt_mem_epcs_flash_controller+0xfe045c20>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56d18:	0005303a 	rdctl	r2,status
   56d1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56d20:	e0fffb17 	ldw	r3,-20(fp)
   56d24:	00bfff84 	movi	r2,-2
   56d28:	1884703a 	and	r2,r3,r2
   56d2c:	1001703a 	wrctl	status,r2
  
  return context;
   56d30:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   56d34:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   56d38:	e0bffc17 	ldw	r2,-16(fp)
   56d3c:	10800117 	ldw	r2,4(r2)
   56d40:	10c11014 	ori	r3,r2,1088
   56d44:	e0bffc17 	ldw	r2,-16(fp)
   56d48:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   56d4c:	e0bffc17 	ldw	r2,-16(fp)
   56d50:	10800017 	ldw	r2,0(r2)
   56d54:	10800304 	addi	r2,r2,12
   56d58:	e0fffc17 	ldw	r3,-16(fp)
   56d5c:	18c00117 	ldw	r3,4(r3)
   56d60:	10c00035 	stwio	r3,0(r2)
   56d64:	e0bff817 	ldw	r2,-32(fp)
   56d68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56d6c:	e0bffa17 	ldw	r2,-24(fp)
   56d70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   56d74:	e0fffe17 	ldw	r3,-8(fp)
   56d78:	e0bff417 	ldw	r2,-48(fp)
   56d7c:	1885c83a 	sub	r2,r3,r2
}
   56d80:	e037883a 	mov	sp,fp
   56d84:	dfc00117 	ldw	ra,4(sp)
   56d88:	df000017 	ldw	fp,0(sp)
   56d8c:	dec00204 	addi	sp,sp,8
   56d90:	f800283a 	ret

00056d94 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   56d94:	defff904 	addi	sp,sp,-28
   56d98:	dfc00615 	stw	ra,24(sp)
   56d9c:	df000515 	stw	fp,20(sp)
   56da0:	df000504 	addi	fp,sp,20
   56da4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
   56da8:	00800144 	movi	r2,5
   56dac:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
   56db0:	d8000215 	stw	zero,8(sp)
   56db4:	e0bffe44 	addi	r2,fp,-7
   56db8:	d8800115 	stw	r2,4(sp)
   56dbc:	00800044 	movi	r2,1
   56dc0:	d8800015 	stw	r2,0(sp)
   56dc4:	e1fffe04 	addi	r7,fp,-8
   56dc8:	01800044 	movi	r6,1
   56dcc:	000b883a 	mov	r5,zero
   56dd0:	e13fff17 	ldw	r4,-4(fp)
   56dd4:	0057d800 	call	57d80 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
   56dd8:	e0bffe43 	ldbu	r2,-7(fp)
}
   56ddc:	e037883a 	mov	sp,fp
   56de0:	dfc00117 	ldw	ra,4(sp)
   56de4:	df000017 	ldw	fp,0(sp)
   56de8:	dec00204 	addi	sp,sp,8
   56dec:	f800283a 	ret

00056df0 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
   56df0:	defffd04 	addi	sp,sp,-12
   56df4:	dfc00215 	stw	ra,8(sp)
   56df8:	df000115 	stw	fp,4(sp)
   56dfc:	df000104 	addi	fp,sp,4
   56e00:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
   56e04:	e13fff17 	ldw	r4,-4(fp)
   56e08:	0056d940 	call	56d94 <epcs_read_status_register>
   56e0c:	10803fcc 	andi	r2,r2,255
   56e10:	1080004c 	andi	r2,r2,1
}
   56e14:	e037883a 	mov	sp,fp
   56e18:	dfc00117 	ldw	ra,4(sp)
   56e1c:	df000017 	ldw	fp,0(sp)
   56e20:	dec00204 	addi	sp,sp,8
   56e24:	f800283a 	ret

00056e28 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   56e28:	defffd04 	addi	sp,sp,-12
   56e2c:	dfc00215 	stw	ra,8(sp)
   56e30:	df000115 	stw	fp,4(sp)
   56e34:	df000104 	addi	fp,sp,4
   56e38:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   56e3c:	0001883a 	nop
   56e40:	e13fff17 	ldw	r4,-4(fp)
   56e44:	0056df00 	call	56df0 <epcs_test_wip>
   56e48:	103ffd1e 	bne	r2,zero,56e40 <__alt_mem_epcs_flash_controller+0xfe045e40>
  {
  }
}
   56e4c:	0001883a 	nop
   56e50:	e037883a 	mov	sp,fp
   56e54:	dfc00117 	ldw	ra,4(sp)
   56e58:	df000017 	ldw	fp,0(sp)
   56e5c:	dec00204 	addi	sp,sp,8
   56e60:	f800283a 	ret

00056e64 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   56e64:	defff604 	addi	sp,sp,-40
   56e68:	dfc00915 	stw	ra,36(sp)
   56e6c:	df000815 	stw	fp,32(sp)
   56e70:	df000804 	addi	fp,sp,32
   56e74:	e13ffd15 	stw	r4,-12(fp)
   56e78:	e17ffe15 	stw	r5,-8(fp)
   56e7c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   56e80:	e0bfff17 	ldw	r2,-4(fp)
   56e84:	10001226 	beq	r2,zero,56ed0 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   56e88:	00bff604 	movi	r2,-40
   56e8c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
   56e90:	e0bffe17 	ldw	r2,-8(fp)
   56e94:	1004d63a 	srli	r2,r2,24
   56e98:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
   56e9c:	e0bffe17 	ldw	r2,-8(fp)
   56ea0:	1004d43a 	srli	r2,r2,16
   56ea4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
   56ea8:	e0bffe17 	ldw	r2,-8(fp)
   56eac:	1004d23a 	srli	r2,r2,8
   56eb0:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
   56eb4:	e0bffe17 	ldw	r2,-8(fp)
   56eb8:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
   56ebc:	00800144 	movi	r2,5
   56ec0:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
   56ec4:	e13ffd17 	ldw	r4,-12(fp)
   56ec8:	00573180 	call	57318 <epcs_enter_4_bytes_mode>
   56ecc:	00000c06 	br	56f00 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
   56ed0:	00bff604 	movi	r2,-40
   56ed4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
   56ed8:	e0bffe17 	ldw	r2,-8(fp)
   56edc:	1004d43a 	srli	r2,r2,16
   56ee0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
   56ee4:	e0bffe17 	ldw	r2,-8(fp)
   56ee8:	1004d23a 	srli	r2,r2,8
   56eec:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
   56ef0:	e0bffe17 	ldw	r2,-8(fp)
   56ef4:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
   56ef8:	00800104 	movi	r2,4
   56efc:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   56f00:	e13ffd17 	ldw	r4,-12(fp)
   56f04:	00570540 	call	57054 <epcs_write_enable>

  alt_avalon_spi_command(
   56f08:	e0bffb03 	ldbu	r2,-20(fp)
   56f0c:	e0fffb44 	addi	r3,fp,-19
   56f10:	d8000215 	stw	zero,8(sp)
   56f14:	d8000115 	stw	zero,4(sp)
   56f18:	d8000015 	stw	zero,0(sp)
   56f1c:	180f883a 	mov	r7,r3
   56f20:	100d883a 	mov	r6,r2
   56f24:	000b883a 	mov	r5,zero
   56f28:	e13ffd17 	ldw	r4,-12(fp)
   56f2c:	0057d800 	call	57d80 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   56f30:	e13ffd17 	ldw	r4,-12(fp)
   56f34:	0056e280 	call	56e28 <epcs_await_wip_released>

  if(four_bytes_mode)
   56f38:	e0bfff17 	ldw	r2,-4(fp)
   56f3c:	10000226 	beq	r2,zero,56f48 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
   56f40:	e13ffd17 	ldw	r4,-12(fp)
   56f44:	00573740 	call	57374 <epcs_exit_4_bytes_mode>
  }
}
   56f48:	0001883a 	nop
   56f4c:	e037883a 	mov	sp,fp
   56f50:	dfc00117 	ldw	ra,4(sp)
   56f54:	df000017 	ldw	fp,0(sp)
   56f58:	dec00204 	addi	sp,sp,8
   56f5c:	f800283a 	ret

00056f60 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   56f60:	defff404 	addi	sp,sp,-48
   56f64:	dfc00b15 	stw	ra,44(sp)
   56f68:	df000a15 	stw	fp,40(sp)
   56f6c:	df000a04 	addi	fp,sp,40
   56f70:	e13ffc15 	stw	r4,-16(fp)
   56f74:	e17ffd15 	stw	r5,-12(fp)
   56f78:	e1bffe15 	stw	r6,-8(fp)
   56f7c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   56f80:	008000c4 	movi	r2,3
   56f84:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   56f88:	e0800217 	ldw	r2,8(fp)
   56f8c:	10001026 	beq	r2,zero,56fd0 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   56f90:	e0bffd17 	ldw	r2,-12(fp)
   56f94:	1004d63a 	srli	r2,r2,24
   56f98:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
   56f9c:	e0bffd17 	ldw	r2,-12(fp)
   56fa0:	1005d43a 	srai	r2,r2,16
   56fa4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
   56fa8:	e0bffd17 	ldw	r2,-12(fp)
   56fac:	1005d23a 	srai	r2,r2,8
   56fb0:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
   56fb4:	e0bffd17 	ldw	r2,-12(fp)
   56fb8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
   56fbc:	00800144 	movi	r2,5
   56fc0:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
   56fc4:	e13ffc17 	ldw	r4,-16(fp)
   56fc8:	00573180 	call	57318 <epcs_enter_4_bytes_mode>
   56fcc:	00000a06 	br	56ff8 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   56fd0:	e0bffd17 	ldw	r2,-12(fp)
   56fd4:	1005d43a 	srai	r2,r2,16
   56fd8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
   56fdc:	e0bffd17 	ldw	r2,-12(fp)
   56fe0:	1005d23a 	srai	r2,r2,8
   56fe4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
   56fe8:	e0bffd17 	ldw	r2,-12(fp)
   56fec:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
   56ff0:	00800104 	movi	r2,4
   56ff4:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
   56ff8:	e13ffc17 	ldw	r4,-16(fp)
   56ffc:	0056e280 	call	56e28 <epcs_await_wip_released>

  alt_avalon_spi_command(
   57000:	e0bfff17 	ldw	r2,-4(fp)
   57004:	e13ffa04 	addi	r4,fp,-24
   57008:	d8000215 	stw	zero,8(sp)
   5700c:	e0fffe17 	ldw	r3,-8(fp)
   57010:	d8c00115 	stw	r3,4(sp)
   57014:	d8800015 	stw	r2,0(sp)
   57018:	200f883a 	mov	r7,r4
   5701c:	e1bff917 	ldw	r6,-28(fp)
   57020:	000b883a 	mov	r5,zero
   57024:	e13ffc17 	ldw	r4,-16(fp)
   57028:	0057d800 	call	57d80 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
   5702c:	e0800217 	ldw	r2,8(fp)
   57030:	10000226 	beq	r2,zero,5703c <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
   57034:	e13ffc17 	ldw	r4,-16(fp)
   57038:	00573740 	call	57374 <epcs_exit_4_bytes_mode>
  }

  return length;
   5703c:	e0bfff17 	ldw	r2,-4(fp)
}
   57040:	e037883a 	mov	sp,fp
   57044:	dfc00117 	ldw	ra,4(sp)
   57048:	df000017 	ldw	fp,0(sp)
   5704c:	dec00204 	addi	sp,sp,8
   57050:	f800283a 	ret

00057054 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
   57054:	defff904 	addi	sp,sp,-28
   57058:	dfc00615 	stw	ra,24(sp)
   5705c:	df000515 	stw	fp,20(sp)
   57060:	df000504 	addi	fp,sp,20
   57064:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
   57068:	00800184 	movi	r2,6
   5706c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
   57070:	d8000215 	stw	zero,8(sp)
   57074:	d8000115 	stw	zero,4(sp)
   57078:	d8000015 	stw	zero,0(sp)
   5707c:	e1fffe04 	addi	r7,fp,-8
   57080:	01800044 	movi	r6,1
   57084:	000b883a 	mov	r5,zero
   57088:	e13fff17 	ldw	r4,-4(fp)
   5708c:	0057d800 	call	57d80 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   57090:	0001883a 	nop
   57094:	e037883a 	mov	sp,fp
   57098:	dfc00117 	ldw	ra,4(sp)
   5709c:	df000017 	ldw	fp,0(sp)
   570a0:	dec00204 	addi	sp,sp,8
   570a4:	f800283a 	ret

000570a8 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   570a8:	defff804 	addi	sp,sp,-32
   570ac:	dfc00715 	stw	ra,28(sp)
   570b0:	df000615 	stw	fp,24(sp)
   570b4:	df000604 	addi	fp,sp,24
   570b8:	e13ffe15 	stw	r4,-8(fp)
   570bc:	2805883a 	mov	r2,r5
   570c0:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   570c4:	00800044 	movi	r2,1
   570c8:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
   570cc:	e0bfff03 	ldbu	r2,-4(fp)
   570d0:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
   570d4:	d8000215 	stw	zero,8(sp)
   570d8:	d8000115 	stw	zero,4(sp)
   570dc:	d8000015 	stw	zero,0(sp)
   570e0:	e1fffd04 	addi	r7,fp,-12
   570e4:	01800084 	movi	r6,2
   570e8:	000b883a 	mov	r5,zero
   570ec:	e13ffe17 	ldw	r4,-8(fp)
   570f0:	0057d800 	call	57d80 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   570f4:	e13ffe17 	ldw	r4,-8(fp)
   570f8:	0056e280 	call	56e28 <epcs_await_wip_released>
}
   570fc:	0001883a 	nop
   57100:	e037883a 	mov	sp,fp
   57104:	dfc00117 	ldw	ra,4(sp)
   57108:	df000017 	ldw	fp,0(sp)
   5710c:	dec00204 	addi	sp,sp,8
   57110:	f800283a 	ret

00057114 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   57114:	defff404 	addi	sp,sp,-48
   57118:	dfc00b15 	stw	ra,44(sp)
   5711c:	df000a15 	stw	fp,40(sp)
   57120:	df000a04 	addi	fp,sp,40
   57124:	e13ffc15 	stw	r4,-16(fp)
   57128:	e17ffd15 	stw	r5,-12(fp)
   5712c:	e1bffe15 	stw	r6,-8(fp)
   57130:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   57134:	00800084 	movi	r2,2
   57138:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   5713c:	e0800217 	ldw	r2,8(fp)
   57140:	10001026 	beq	r2,zero,57184 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
   57144:	e0bffd17 	ldw	r2,-12(fp)
   57148:	1004d63a 	srli	r2,r2,24
   5714c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
   57150:	e0bffd17 	ldw	r2,-12(fp)
   57154:	1005d43a 	srai	r2,r2,16
   57158:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
   5715c:	e0bffd17 	ldw	r2,-12(fp)
   57160:	1005d23a 	srai	r2,r2,8
   57164:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
   57168:	e0bffd17 	ldw	r2,-12(fp)
   5716c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
   57170:	00800144 	movi	r2,5
   57174:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
   57178:	e13ffc17 	ldw	r4,-16(fp)
   5717c:	00573180 	call	57318 <epcs_enter_4_bytes_mode>
   57180:	00000a06 	br	571ac <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   57184:	e0bffd17 	ldw	r2,-12(fp)
   57188:	1005d43a 	srai	r2,r2,16
   5718c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
   57190:	e0bffd17 	ldw	r2,-12(fp)
   57194:	1005d23a 	srai	r2,r2,8
   57198:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
   5719c:	e0bffd17 	ldw	r2,-12(fp)
   571a0:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
   571a4:	00800104 	movi	r2,4
   571a8:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
   571ac:	e13ffc17 	ldw	r4,-16(fp)
   571b0:	00570540 	call	57054 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   571b4:	e0fffa04 	addi	r3,fp,-24
   571b8:	00800044 	movi	r2,1
   571bc:	d8800215 	stw	r2,8(sp)
   571c0:	d8000115 	stw	zero,4(sp)
   571c4:	d8000015 	stw	zero,0(sp)
   571c8:	180f883a 	mov	r7,r3
   571cc:	e1bff917 	ldw	r6,-28(fp)
   571d0:	000b883a 	mov	r5,zero
   571d4:	e13ffc17 	ldw	r4,-16(fp)
   571d8:	0057d800 	call	57d80 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   571dc:	e0bfff17 	ldw	r2,-4(fp)
   571e0:	d8000215 	stw	zero,8(sp)
   571e4:	d8000115 	stw	zero,4(sp)
   571e8:	d8000015 	stw	zero,0(sp)
   571ec:	e1fffe17 	ldw	r7,-8(fp)
   571f0:	100d883a 	mov	r6,r2
   571f4:	000b883a 	mov	r5,zero
   571f8:	e13ffc17 	ldw	r4,-16(fp)
   571fc:	0057d800 	call	57d80 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   57200:	e13ffc17 	ldw	r4,-16(fp)
   57204:	0056e280 	call	56e28 <epcs_await_wip_released>

  if(four_bytes_mode)
   57208:	e0800217 	ldw	r2,8(fp)
   5720c:	10000226 	beq	r2,zero,57218 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
   57210:	e13ffc17 	ldw	r4,-16(fp)
   57214:	00573740 	call	57374 <epcs_exit_4_bytes_mode>
  }

  return length;
   57218:	e0bfff17 	ldw	r2,-4(fp)
}
   5721c:	e037883a 	mov	sp,fp
   57220:	dfc00117 	ldw	ra,4(sp)
   57224:	df000017 	ldw	fp,0(sp)
   57228:	dec00204 	addi	sp,sp,8
   5722c:	f800283a 	ret

00057230 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   57230:	defff804 	addi	sp,sp,-32
   57234:	dfc00715 	stw	ra,28(sp)
   57238:	df000615 	stw	fp,24(sp)
   5723c:	df000604 	addi	fp,sp,24
   57240:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   57244:	00bfeac4 	movi	r2,-85
   57248:	e0bffd05 	stb	r2,-12(fp)
   5724c:	e03ffd45 	stb	zero,-11(fp)
   57250:	e03ffd85 	stb	zero,-10(fp)
   57254:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
   57258:	d8000215 	stw	zero,8(sp)
   5725c:	e0bffe04 	addi	r2,fp,-8
   57260:	d8800115 	stw	r2,4(sp)
   57264:	00800044 	movi	r2,1
   57268:	d8800015 	stw	r2,0(sp)
   5726c:	e1fffd04 	addi	r7,fp,-12
   57270:	01800104 	movi	r6,4
   57274:	000b883a 	mov	r5,zero
   57278:	e13fff17 	ldw	r4,-4(fp)
   5727c:	0057d800 	call	57d80 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
   57280:	e0bffe03 	ldbu	r2,-8(fp)
}
   57284:	e037883a 	mov	sp,fp
   57288:	dfc00117 	ldw	ra,4(sp)
   5728c:	df000017 	ldw	fp,0(sp)
   57290:	dec00204 	addi	sp,sp,8
   57294:	f800283a 	ret

00057298 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
   57298:	defff904 	addi	sp,sp,-28
   5729c:	dfc00615 	stw	ra,24(sp)
   572a0:	df000515 	stw	fp,20(sp)
   572a4:	df000504 	addi	fp,sp,20
   572a8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   572ac:	00bfe7c4 	movi	r2,-97
   572b0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   572b4:	d8000215 	stw	zero,8(sp)
   572b8:	e0bffe44 	addi	r2,fp,-7
   572bc:	d8800115 	stw	r2,4(sp)
   572c0:	008000c4 	movi	r2,3
   572c4:	d8800015 	stw	r2,0(sp)
   572c8:	e1fffe04 	addi	r7,fp,-8
   572cc:	01800044 	movi	r6,1
   572d0:	000b883a 	mov	r5,zero
   572d4:	e13fff17 	ldw	r4,-4(fp)
   572d8:	0057d800 	call	57d80 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
   572dc:	e0bffe43 	ldbu	r2,-7(fp)
   572e0:	10803fcc 	andi	r2,r2,255
   572e4:	1006943a 	slli	r3,r2,16
   572e8:	e0bffe83 	ldbu	r2,-6(fp)
   572ec:	10803fcc 	andi	r2,r2,255
   572f0:	1004923a 	slli	r2,r2,8
   572f4:	1886b03a 	or	r3,r3,r2
   572f8:	e0bffec3 	ldbu	r2,-5(fp)
   572fc:	10803fcc 	andi	r2,r2,255
   57300:	1884b03a 	or	r2,r3,r2
}
   57304:	e037883a 	mov	sp,fp
   57308:	dfc00117 	ldw	ra,4(sp)
   5730c:	df000017 	ldw	fp,0(sp)
   57310:	dec00204 	addi	sp,sp,8
   57314:	f800283a 	ret

00057318 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   57318:	defff904 	addi	sp,sp,-28
   5731c:	dfc00615 	stw	ra,24(sp)
   57320:	df000515 	stw	fp,20(sp)
   57324:	df000504 	addi	fp,sp,20
   57328:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
   5732c:	00bfedc4 	movi	r2,-73
   57330:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   57334:	e13fff17 	ldw	r4,-4(fp)
   57338:	00570540 	call	57054 <epcs_write_enable>

  alt_avalon_spi_command(
   5733c:	d8000215 	stw	zero,8(sp)
   57340:	d8000115 	stw	zero,4(sp)
   57344:	d8000015 	stw	zero,0(sp)
   57348:	e1fffe04 	addi	r7,fp,-8
   5734c:	01800044 	movi	r6,1
   57350:	000b883a 	mov	r5,zero
   57354:	e13fff17 	ldw	r4,-4(fp)
   57358:	0057d800 	call	57d80 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   5735c:	0001883a 	nop
}
   57360:	e037883a 	mov	sp,fp
   57364:	dfc00117 	ldw	ra,4(sp)
   57368:	df000017 	ldw	fp,0(sp)
   5736c:	dec00204 	addi	sp,sp,8
   57370:	f800283a 	ret

00057374 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   57374:	defff904 	addi	sp,sp,-28
   57378:	dfc00615 	stw	ra,24(sp)
   5737c:	df000515 	stw	fp,20(sp)
   57380:	df000504 	addi	fp,sp,20
   57384:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   57388:	00bffa44 	movi	r2,-23
   5738c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   57390:	e13fff17 	ldw	r4,-4(fp)
   57394:	00570540 	call	57054 <epcs_write_enable>

  alt_avalon_spi_command(
   57398:	d8000215 	stw	zero,8(sp)
   5739c:	d8000115 	stw	zero,4(sp)
   573a0:	d8000015 	stw	zero,0(sp)
   573a4:	e1fffe04 	addi	r7,fp,-8
   573a8:	01800044 	movi	r6,1
   573ac:	000b883a 	mov	r5,zero
   573b0:	e13fff17 	ldw	r4,-4(fp)
   573b4:	0057d800 	call	57d80 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   573b8:	0001883a 	nop
}
   573bc:	e037883a 	mov	sp,fp
   573c0:	dfc00117 	ldw	ra,4(sp)
   573c4:	df000017 	ldw	fp,0(sp)
   573c8:	dec00204 	addi	sp,sp,8
   573cc:	f800283a 	ret

000573d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   573d0:	defff504 	addi	sp,sp,-44
   573d4:	df000a15 	stw	fp,40(sp)
   573d8:	df000a04 	addi	fp,sp,40
   573dc:	e13ffc15 	stw	r4,-16(fp)
   573e0:	e17ffd15 	stw	r5,-12(fp)
   573e4:	e1bffe15 	stw	r6,-8(fp)
   573e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   573ec:	e03ff615 	stw	zero,-40(fp)
   573f0:	d0a88617 	ldw	r2,-24040(gp)
  
  if (alt_ticks_per_second ())
   573f4:	10003c26 	beq	r2,zero,574e8 <alt_alarm_start+0x118>
  {
    if (alarm)
   573f8:	e0bffc17 	ldw	r2,-16(fp)
   573fc:	10003826 	beq	r2,zero,574e0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   57400:	e0bffc17 	ldw	r2,-16(fp)
   57404:	e0fffe17 	ldw	r3,-8(fp)
   57408:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   5740c:	e0bffc17 	ldw	r2,-16(fp)
   57410:	e0ffff17 	ldw	r3,-4(fp)
   57414:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57418:	0005303a 	rdctl	r2,status
   5741c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57420:	e0fff917 	ldw	r3,-28(fp)
   57424:	00bfff84 	movi	r2,-2
   57428:	1884703a 	and	r2,r3,r2
   5742c:	1001703a 	wrctl	status,r2
  
  return context;
   57430:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   57434:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   57438:	d0a88717 	ldw	r2,-24036(gp)
      
      current_nticks = alt_nticks();
   5743c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   57440:	e0fffd17 	ldw	r3,-12(fp)
   57444:	e0bff617 	ldw	r2,-40(fp)
   57448:	1885883a 	add	r2,r3,r2
   5744c:	10c00044 	addi	r3,r2,1
   57450:	e0bffc17 	ldw	r2,-16(fp)
   57454:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   57458:	e0bffc17 	ldw	r2,-16(fp)
   5745c:	10c00217 	ldw	r3,8(r2)
   57460:	e0bff617 	ldw	r2,-40(fp)
   57464:	1880042e 	bgeu	r3,r2,57478 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   57468:	e0bffc17 	ldw	r2,-16(fp)
   5746c:	00c00044 	movi	r3,1
   57470:	10c00405 	stb	r3,16(r2)
   57474:	00000206 	br	57480 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   57478:	e0bffc17 	ldw	r2,-16(fp)
   5747c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   57480:	e0bffc17 	ldw	r2,-16(fp)
   57484:	d0e02404 	addi	r3,gp,-32624
   57488:	e0fffa15 	stw	r3,-24(fp)
   5748c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   57490:	e0bffb17 	ldw	r2,-20(fp)
   57494:	e0fffa17 	ldw	r3,-24(fp)
   57498:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5749c:	e0bffa17 	ldw	r2,-24(fp)
   574a0:	10c00017 	ldw	r3,0(r2)
   574a4:	e0bffb17 	ldw	r2,-20(fp)
   574a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   574ac:	e0bffa17 	ldw	r2,-24(fp)
   574b0:	10800017 	ldw	r2,0(r2)
   574b4:	e0fffb17 	ldw	r3,-20(fp)
   574b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   574bc:	e0bffa17 	ldw	r2,-24(fp)
   574c0:	e0fffb17 	ldw	r3,-20(fp)
   574c4:	10c00015 	stw	r3,0(r2)
   574c8:	e0bff817 	ldw	r2,-32(fp)
   574cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   574d0:	e0bff717 	ldw	r2,-36(fp)
   574d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   574d8:	0005883a 	mov	r2,zero
   574dc:	00000306 	br	574ec <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   574e0:	00bffa84 	movi	r2,-22
   574e4:	00000106 	br	574ec <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   574e8:	00bfde84 	movi	r2,-134
  }
}
   574ec:	e037883a 	mov	sp,fp
   574f0:	df000017 	ldw	fp,0(sp)
   574f4:	dec00104 	addi	sp,sp,4
   574f8:	f800283a 	ret

000574fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   574fc:	defffa04 	addi	sp,sp,-24
   57500:	dfc00515 	stw	ra,20(sp)
   57504:	df000415 	stw	fp,16(sp)
   57508:	df000404 	addi	fp,sp,16
   5750c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   57510:	008000c4 	movi	r2,3
   57514:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   57518:	e0fffd17 	ldw	r3,-12(fp)
   5751c:	008003f4 	movhi	r2,15
   57520:	10909004 	addi	r2,r2,16960
   57524:	1885383a 	mul	r2,r3,r2
   57528:	100b883a 	mov	r5,r2
   5752c:	0100bef4 	movhi	r4,763
   57530:	213c2004 	addi	r4,r4,-3968
   57534:	0042a980 	call	42a98 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   57538:	100b883a 	mov	r5,r2
   5753c:	01200034 	movhi	r4,32768
   57540:	213fffc4 	addi	r4,r4,-1
   57544:	0042a980 	call	42a98 <__udivsi3>
   57548:	100b883a 	mov	r5,r2
   5754c:	e13fff17 	ldw	r4,-4(fp)
   57550:	0042a980 	call	42a98 <__udivsi3>
   57554:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   57558:	e0bffe17 	ldw	r2,-8(fp)
   5755c:	10002a26 	beq	r2,zero,57608 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   57560:	e03ffc15 	stw	zero,-16(fp)
   57564:	00001706 	br	575c4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   57568:	00a00034 	movhi	r2,32768
   5756c:	10bfffc4 	addi	r2,r2,-1
   57570:	10bfffc4 	addi	r2,r2,-1
   57574:	103ffe1e 	bne	r2,zero,57570 <__alt_mem_epcs_flash_controller+0xfe046570>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   57578:	e0fffd17 	ldw	r3,-12(fp)
   5757c:	008003f4 	movhi	r2,15
   57580:	10909004 	addi	r2,r2,16960
   57584:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   57588:	100b883a 	mov	r5,r2
   5758c:	0100bef4 	movhi	r4,763
   57590:	213c2004 	addi	r4,r4,-3968
   57594:	0042a980 	call	42a98 <__udivsi3>
   57598:	100b883a 	mov	r5,r2
   5759c:	01200034 	movhi	r4,32768
   575a0:	213fffc4 	addi	r4,r4,-1
   575a4:	0042a980 	call	42a98 <__udivsi3>
   575a8:	1007883a 	mov	r3,r2
   575ac:	e0bfff17 	ldw	r2,-4(fp)
   575b0:	10c5c83a 	sub	r2,r2,r3
   575b4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   575b8:	e0bffc17 	ldw	r2,-16(fp)
   575bc:	10800044 	addi	r2,r2,1
   575c0:	e0bffc15 	stw	r2,-16(fp)
   575c4:	e0fffc17 	ldw	r3,-16(fp)
   575c8:	e0bffe17 	ldw	r2,-8(fp)
   575cc:	18bfe616 	blt	r3,r2,57568 <__alt_mem_epcs_flash_controller+0xfe046568>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   575d0:	e0fffd17 	ldw	r3,-12(fp)
   575d4:	008003f4 	movhi	r2,15
   575d8:	10909004 	addi	r2,r2,16960
   575dc:	1885383a 	mul	r2,r3,r2
   575e0:	100b883a 	mov	r5,r2
   575e4:	0100bef4 	movhi	r4,763
   575e8:	213c2004 	addi	r4,r4,-3968
   575ec:	0042a980 	call	42a98 <__udivsi3>
   575f0:	1007883a 	mov	r3,r2
   575f4:	e0bfff17 	ldw	r2,-4(fp)
   575f8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   575fc:	10bfffc4 	addi	r2,r2,-1
   57600:	103ffe1e 	bne	r2,zero,575fc <__alt_mem_epcs_flash_controller+0xfe0465fc>
   57604:	00000d06 	br	5763c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   57608:	e0fffd17 	ldw	r3,-12(fp)
   5760c:	008003f4 	movhi	r2,15
   57610:	10909004 	addi	r2,r2,16960
   57614:	1885383a 	mul	r2,r3,r2
   57618:	100b883a 	mov	r5,r2
   5761c:	0100bef4 	movhi	r4,763
   57620:	213c2004 	addi	r4,r4,-3968
   57624:	0042a980 	call	42a98 <__udivsi3>
   57628:	1007883a 	mov	r3,r2
   5762c:	e0bfff17 	ldw	r2,-4(fp)
   57630:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   57634:	10bfffc4 	addi	r2,r2,-1
   57638:	00bffe16 	blt	zero,r2,57634 <__alt_mem_epcs_flash_controller+0xfe046634>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   5763c:	0005883a 	mov	r2,zero
}
   57640:	e037883a 	mov	sp,fp
   57644:	dfc00117 	ldw	ra,4(sp)
   57648:	df000017 	ldw	fp,0(sp)
   5764c:	dec00204 	addi	sp,sp,8
   57650:	f800283a 	ret

00057654 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   57654:	defffe04 	addi	sp,sp,-8
   57658:	df000115 	stw	fp,4(sp)
   5765c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   57660:	e03fff15 	stw	zero,-4(fp)
   57664:	00000506 	br	5767c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   57668:	e0bfff17 	ldw	r2,-4(fp)
   5766c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   57670:	e0bfff17 	ldw	r2,-4(fp)
   57674:	10800804 	addi	r2,r2,32
   57678:	e0bfff15 	stw	r2,-4(fp)
   5767c:	e0bfff17 	ldw	r2,-4(fp)
   57680:	10820030 	cmpltui	r2,r2,2048
   57684:	103ff81e 	bne	r2,zero,57668 <__alt_mem_epcs_flash_controller+0xfe046668>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   57688:	0001883a 	nop
   5768c:	e037883a 	mov	sp,fp
   57690:	df000017 	ldw	fp,0(sp)
   57694:	dec00104 	addi	sp,sp,4
   57698:	f800283a 	ret

0005769c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5769c:	defffe04 	addi	sp,sp,-8
   576a0:	dfc00115 	stw	ra,4(sp)
   576a4:	df000015 	stw	fp,0(sp)
   576a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   576ac:	d0a02117 	ldw	r2,-32636(gp)
   576b0:	10000326 	beq	r2,zero,576c0 <alt_get_errno+0x24>
   576b4:	d0a02117 	ldw	r2,-32636(gp)
   576b8:	103ee83a 	callr	r2
   576bc:	00000106 	br	576c4 <alt_get_errno+0x28>
   576c0:	d0a87a04 	addi	r2,gp,-24088
}
   576c4:	e037883a 	mov	sp,fp
   576c8:	dfc00117 	ldw	ra,4(sp)
   576cc:	df000017 	ldw	fp,0(sp)
   576d0:	dec00204 	addi	sp,sp,8
   576d4:	f800283a 	ret

000576d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   576d8:	defffa04 	addi	sp,sp,-24
   576dc:	dfc00515 	stw	ra,20(sp)
   576e0:	df000415 	stw	fp,16(sp)
   576e4:	df000404 	addi	fp,sp,16
   576e8:	e13ffe15 	stw	r4,-8(fp)
   576ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   576f0:	e0bffe17 	ldw	r2,-8(fp)
   576f4:	10000326 	beq	r2,zero,57704 <alt_dev_llist_insert+0x2c>
   576f8:	e0bffe17 	ldw	r2,-8(fp)
   576fc:	10800217 	ldw	r2,8(r2)
   57700:	1000061e 	bne	r2,zero,5771c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   57704:	005769c0 	call	5769c <alt_get_errno>
   57708:	1007883a 	mov	r3,r2
   5770c:	00800584 	movi	r2,22
   57710:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   57714:	00bffa84 	movi	r2,-22
   57718:	00001306 	br	57768 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   5771c:	e0bffe17 	ldw	r2,-8(fp)
   57720:	e0ffff17 	ldw	r3,-4(fp)
   57724:	e0fffc15 	stw	r3,-16(fp)
   57728:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5772c:	e0bffd17 	ldw	r2,-12(fp)
   57730:	e0fffc17 	ldw	r3,-16(fp)
   57734:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   57738:	e0bffc17 	ldw	r2,-16(fp)
   5773c:	10c00017 	ldw	r3,0(r2)
   57740:	e0bffd17 	ldw	r2,-12(fp)
   57744:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   57748:	e0bffc17 	ldw	r2,-16(fp)
   5774c:	10800017 	ldw	r2,0(r2)
   57750:	e0fffd17 	ldw	r3,-12(fp)
   57754:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   57758:	e0bffc17 	ldw	r2,-16(fp)
   5775c:	e0fffd17 	ldw	r3,-12(fp)
   57760:	10c00015 	stw	r3,0(r2)

  return 0;  
   57764:	0005883a 	mov	r2,zero
}
   57768:	e037883a 	mov	sp,fp
   5776c:	dfc00117 	ldw	ra,4(sp)
   57770:	df000017 	ldw	fp,0(sp)
   57774:	dec00204 	addi	sp,sp,8
   57778:	f800283a 	ret

0005777c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   5777c:	defffd04 	addi	sp,sp,-12
   57780:	dfc00215 	stw	ra,8(sp)
   57784:	df000115 	stw	fp,4(sp)
   57788:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5778c:	008001b4 	movhi	r2,6
   57790:	10a0dc04 	addi	r2,r2,-31888
   57794:	e0bfff15 	stw	r2,-4(fp)
   57798:	00000606 	br	577b4 <_do_ctors+0x38>
        (*ctor) (); 
   5779c:	e0bfff17 	ldw	r2,-4(fp)
   577a0:	10800017 	ldw	r2,0(r2)
   577a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   577a8:	e0bfff17 	ldw	r2,-4(fp)
   577ac:	10bfff04 	addi	r2,r2,-4
   577b0:	e0bfff15 	stw	r2,-4(fp)
   577b4:	e0ffff17 	ldw	r3,-4(fp)
   577b8:	008001b4 	movhi	r2,6
   577bc:	10a0dd04 	addi	r2,r2,-31884
   577c0:	18bff62e 	bgeu	r3,r2,5779c <__alt_mem_epcs_flash_controller+0xfe04679c>
        (*ctor) (); 
}
   577c4:	0001883a 	nop
   577c8:	e037883a 	mov	sp,fp
   577cc:	dfc00117 	ldw	ra,4(sp)
   577d0:	df000017 	ldw	fp,0(sp)
   577d4:	dec00204 	addi	sp,sp,8
   577d8:	f800283a 	ret

000577dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   577dc:	defffd04 	addi	sp,sp,-12
   577e0:	dfc00215 	stw	ra,8(sp)
   577e4:	df000115 	stw	fp,4(sp)
   577e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   577ec:	008001b4 	movhi	r2,6
   577f0:	10a0dc04 	addi	r2,r2,-31888
   577f4:	e0bfff15 	stw	r2,-4(fp)
   577f8:	00000606 	br	57814 <_do_dtors+0x38>
        (*dtor) (); 
   577fc:	e0bfff17 	ldw	r2,-4(fp)
   57800:	10800017 	ldw	r2,0(r2)
   57804:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   57808:	e0bfff17 	ldw	r2,-4(fp)
   5780c:	10bfff04 	addi	r2,r2,-4
   57810:	e0bfff15 	stw	r2,-4(fp)
   57814:	e0ffff17 	ldw	r3,-4(fp)
   57818:	008001b4 	movhi	r2,6
   5781c:	10a0dd04 	addi	r2,r2,-31884
   57820:	18bff62e 	bgeu	r3,r2,577fc <__alt_mem_epcs_flash_controller+0xfe0467fc>
        (*dtor) (); 
}
   57824:	0001883a 	nop
   57828:	e037883a 	mov	sp,fp
   5782c:	dfc00117 	ldw	ra,4(sp)
   57830:	df000017 	ldw	fp,0(sp)
   57834:	dec00204 	addi	sp,sp,8
   57838:	f800283a 	ret

0005783c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   5783c:	defffc04 	addi	sp,sp,-16
   57840:	dfc00315 	stw	ra,12(sp)
   57844:	df000215 	stw	fp,8(sp)
   57848:	df000204 	addi	fp,sp,8
   5784c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   57850:	d1602604 	addi	r5,gp,-32616
   57854:	e13fff17 	ldw	r4,-4(fp)
   57858:	0057f7c0 	call	57f7c <alt_find_dev>
   5785c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   57860:	e0bffe17 	ldw	r2,-8(fp)
   57864:	10000926 	beq	r2,zero,5788c <alt_flash_open_dev+0x50>
   57868:	e0bffe17 	ldw	r2,-8(fp)
   5786c:	10800317 	ldw	r2,12(r2)
   57870:	10000626 	beq	r2,zero,5788c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   57874:	e0bffe17 	ldw	r2,-8(fp)
   57878:	10800317 	ldw	r2,12(r2)
   5787c:	e17fff17 	ldw	r5,-4(fp)
   57880:	e13ffe17 	ldw	r4,-8(fp)
   57884:	103ee83a 	callr	r2
   57888:	00000106 	br	57890 <alt_flash_open_dev+0x54>
  }

  return dev;
   5788c:	e0bffe17 	ldw	r2,-8(fp)
}
   57890:	e037883a 	mov	sp,fp
   57894:	dfc00117 	ldw	ra,4(sp)
   57898:	df000017 	ldw	fp,0(sp)
   5789c:	dec00204 	addi	sp,sp,8
   578a0:	f800283a 	ret

000578a4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   578a4:	defffd04 	addi	sp,sp,-12
   578a8:	dfc00215 	stw	ra,8(sp)
   578ac:	df000115 	stw	fp,4(sp)
   578b0:	df000104 	addi	fp,sp,4
   578b4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   578b8:	e0bfff17 	ldw	r2,-4(fp)
   578bc:	10000826 	beq	r2,zero,578e0 <alt_flash_close_dev+0x3c>
   578c0:	e0bfff17 	ldw	r2,-4(fp)
   578c4:	10800417 	ldw	r2,16(r2)
   578c8:	10000526 	beq	r2,zero,578e0 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   578cc:	e0bfff17 	ldw	r2,-4(fp)
   578d0:	10800417 	ldw	r2,16(r2)
   578d4:	e13fff17 	ldw	r4,-4(fp)
   578d8:	103ee83a 	callr	r2
  }
  return;
   578dc:	0001883a 	nop
   578e0:	0001883a 	nop
}
   578e4:	e037883a 	mov	sp,fp
   578e8:	dfc00117 	ldw	ra,4(sp)
   578ec:	df000017 	ldw	fp,0(sp)
   578f0:	dec00204 	addi	sp,sp,8
   578f4:	f800283a 	ret

000578f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   578f8:	defffe04 	addi	sp,sp,-8
   578fc:	dfc00115 	stw	ra,4(sp)
   57900:	df000015 	stw	fp,0(sp)
   57904:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   57908:	01440004 	movi	r5,4096
   5790c:	0009883a 	mov	r4,zero
   57910:	00581b80 	call	581b8 <alt_icache_flush>
#endif
}
   57914:	0001883a 	nop
   57918:	e037883a 	mov	sp,fp
   5791c:	dfc00117 	ldw	ra,4(sp)
   57920:	df000017 	ldw	fp,0(sp)
   57924:	dec00204 	addi	sp,sp,8
   57928:	f800283a 	ret

0005792c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   5792c:	defffe04 	addi	sp,sp,-8
   57930:	df000115 	stw	fp,4(sp)
   57934:	df000104 	addi	fp,sp,4
   57938:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   5793c:	e0bfff17 	ldw	r2,-4(fp)
   57940:	10bffe84 	addi	r2,r2,-6
   57944:	10c00428 	cmpgeui	r3,r2,16
   57948:	18001a1e 	bne	r3,zero,579b4 <alt_exception_cause_generated_bad_addr+0x88>
   5794c:	100690ba 	slli	r3,r2,2
   57950:	00800174 	movhi	r2,5
   57954:	109e5904 	addi	r2,r2,31076
   57958:	1885883a 	add	r2,r3,r2
   5795c:	10800017 	ldw	r2,0(r2)
   57960:	1000683a 	jmp	r2
   57964:	000579a4 	muli	zero,zero,5606
   57968:	000579a4 	muli	zero,zero,5606
   5796c:	000579b4 	movhi	zero,5606
   57970:	000579b4 	movhi	zero,5606
   57974:	000579b4 	movhi	zero,5606
   57978:	000579a4 	muli	zero,zero,5606
   5797c:	000579ac 	andhi	zero,zero,5606
   57980:	000579b4 	movhi	zero,5606
   57984:	000579a4 	muli	zero,zero,5606
   57988:	000579a4 	muli	zero,zero,5606
   5798c:	000579b4 	movhi	zero,5606
   57990:	000579a4 	muli	zero,zero,5606
   57994:	000579ac 	andhi	zero,zero,5606
   57998:	000579b4 	movhi	zero,5606
   5799c:	000579b4 	movhi	zero,5606
   579a0:	000579a4 	muli	zero,zero,5606
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   579a4:	00800044 	movi	r2,1
   579a8:	00000306 	br	579b8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   579ac:	0005883a 	mov	r2,zero
   579b0:	00000106 	br	579b8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   579b4:	0005883a 	mov	r2,zero
  }
}
   579b8:	e037883a 	mov	sp,fp
   579bc:	df000017 	ldw	fp,0(sp)
   579c0:	dec00104 	addi	sp,sp,4
   579c4:	f800283a 	ret

000579c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   579c8:	defff904 	addi	sp,sp,-28
   579cc:	dfc00615 	stw	ra,24(sp)
   579d0:	df000515 	stw	fp,20(sp)
   579d4:	df000504 	addi	fp,sp,20
   579d8:	e13ffc15 	stw	r4,-16(fp)
   579dc:	e17ffd15 	stw	r5,-12(fp)
   579e0:	e1bffe15 	stw	r6,-8(fp)
   579e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   579e8:	e1bfff17 	ldw	r6,-4(fp)
   579ec:	e17ffe17 	ldw	r5,-8(fp)
   579f0:	e13ffd17 	ldw	r4,-12(fp)
   579f4:	0057c080 	call	57c08 <open>
   579f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   579fc:	e0bffb17 	ldw	r2,-20(fp)
   57a00:	10001c16 	blt	r2,zero,57a74 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   57a04:	008001b4 	movhi	r2,6
   57a08:	10b94604 	addi	r2,r2,-6888
   57a0c:	e0fffb17 	ldw	r3,-20(fp)
   57a10:	18c00324 	muli	r3,r3,12
   57a14:	10c5883a 	add	r2,r2,r3
   57a18:	10c00017 	ldw	r3,0(r2)
   57a1c:	e0bffc17 	ldw	r2,-16(fp)
   57a20:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   57a24:	008001b4 	movhi	r2,6
   57a28:	10b94604 	addi	r2,r2,-6888
   57a2c:	e0fffb17 	ldw	r3,-20(fp)
   57a30:	18c00324 	muli	r3,r3,12
   57a34:	10c5883a 	add	r2,r2,r3
   57a38:	10800104 	addi	r2,r2,4
   57a3c:	10c00017 	ldw	r3,0(r2)
   57a40:	e0bffc17 	ldw	r2,-16(fp)
   57a44:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   57a48:	008001b4 	movhi	r2,6
   57a4c:	10b94604 	addi	r2,r2,-6888
   57a50:	e0fffb17 	ldw	r3,-20(fp)
   57a54:	18c00324 	muli	r3,r3,12
   57a58:	10c5883a 	add	r2,r2,r3
   57a5c:	10800204 	addi	r2,r2,8
   57a60:	10c00017 	ldw	r3,0(r2)
   57a64:	e0bffc17 	ldw	r2,-16(fp)
   57a68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   57a6c:	e13ffb17 	ldw	r4,-20(fp)
   57a70:	0054a580 	call	54a58 <alt_release_fd>
  }
} 
   57a74:	0001883a 	nop
   57a78:	e037883a 	mov	sp,fp
   57a7c:	dfc00117 	ldw	ra,4(sp)
   57a80:	df000017 	ldw	fp,0(sp)
   57a84:	dec00204 	addi	sp,sp,8
   57a88:	f800283a 	ret

00057a8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   57a8c:	defffb04 	addi	sp,sp,-20
   57a90:	dfc00415 	stw	ra,16(sp)
   57a94:	df000315 	stw	fp,12(sp)
   57a98:	df000304 	addi	fp,sp,12
   57a9c:	e13ffd15 	stw	r4,-12(fp)
   57aa0:	e17ffe15 	stw	r5,-8(fp)
   57aa4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   57aa8:	01c07fc4 	movi	r7,511
   57aac:	01800044 	movi	r6,1
   57ab0:	e17ffd17 	ldw	r5,-12(fp)
   57ab4:	010001b4 	movhi	r4,6
   57ab8:	21394904 	addi	r4,r4,-6876
   57abc:	00579c80 	call	579c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   57ac0:	01c07fc4 	movi	r7,511
   57ac4:	000d883a 	mov	r6,zero
   57ac8:	e17ffe17 	ldw	r5,-8(fp)
   57acc:	010001b4 	movhi	r4,6
   57ad0:	21394604 	addi	r4,r4,-6888
   57ad4:	00579c80 	call	579c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   57ad8:	01c07fc4 	movi	r7,511
   57adc:	01800044 	movi	r6,1
   57ae0:	e17fff17 	ldw	r5,-4(fp)
   57ae4:	010001b4 	movhi	r4,6
   57ae8:	21394c04 	addi	r4,r4,-6864
   57aec:	00579c80 	call	579c8 <alt_open_fd>
}  
   57af0:	0001883a 	nop
   57af4:	e037883a 	mov	sp,fp
   57af8:	dfc00117 	ldw	ra,4(sp)
   57afc:	df000017 	ldw	fp,0(sp)
   57b00:	dec00204 	addi	sp,sp,8
   57b04:	f800283a 	ret

00057b08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   57b08:	defffe04 	addi	sp,sp,-8
   57b0c:	dfc00115 	stw	ra,4(sp)
   57b10:	df000015 	stw	fp,0(sp)
   57b14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   57b18:	d0a02117 	ldw	r2,-32636(gp)
   57b1c:	10000326 	beq	r2,zero,57b2c <alt_get_errno+0x24>
   57b20:	d0a02117 	ldw	r2,-32636(gp)
   57b24:	103ee83a 	callr	r2
   57b28:	00000106 	br	57b30 <alt_get_errno+0x28>
   57b2c:	d0a87a04 	addi	r2,gp,-24088
}
   57b30:	e037883a 	mov	sp,fp
   57b34:	dfc00117 	ldw	ra,4(sp)
   57b38:	df000017 	ldw	fp,0(sp)
   57b3c:	dec00204 	addi	sp,sp,8
   57b40:	f800283a 	ret

00057b44 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   57b44:	defffd04 	addi	sp,sp,-12
   57b48:	df000215 	stw	fp,8(sp)
   57b4c:	df000204 	addi	fp,sp,8
   57b50:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   57b54:	e0bfff17 	ldw	r2,-4(fp)
   57b58:	10800217 	ldw	r2,8(r2)
   57b5c:	10d00034 	orhi	r3,r2,16384
   57b60:	e0bfff17 	ldw	r2,-4(fp)
   57b64:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   57b68:	e03ffe15 	stw	zero,-8(fp)
   57b6c:	00001d06 	br	57be4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   57b70:	008001b4 	movhi	r2,6
   57b74:	10b94604 	addi	r2,r2,-6888
   57b78:	e0fffe17 	ldw	r3,-8(fp)
   57b7c:	18c00324 	muli	r3,r3,12
   57b80:	10c5883a 	add	r2,r2,r3
   57b84:	10c00017 	ldw	r3,0(r2)
   57b88:	e0bfff17 	ldw	r2,-4(fp)
   57b8c:	10800017 	ldw	r2,0(r2)
   57b90:	1880111e 	bne	r3,r2,57bd8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   57b94:	008001b4 	movhi	r2,6
   57b98:	10b94604 	addi	r2,r2,-6888
   57b9c:	e0fffe17 	ldw	r3,-8(fp)
   57ba0:	18c00324 	muli	r3,r3,12
   57ba4:	10c5883a 	add	r2,r2,r3
   57ba8:	10800204 	addi	r2,r2,8
   57bac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   57bb0:	1000090e 	bge	r2,zero,57bd8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   57bb4:	e0bffe17 	ldw	r2,-8(fp)
   57bb8:	10c00324 	muli	r3,r2,12
   57bbc:	008001b4 	movhi	r2,6
   57bc0:	10b94604 	addi	r2,r2,-6888
   57bc4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   57bc8:	e0bfff17 	ldw	r2,-4(fp)
   57bcc:	18800226 	beq	r3,r2,57bd8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   57bd0:	00bffcc4 	movi	r2,-13
   57bd4:	00000806 	br	57bf8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   57bd8:	e0bffe17 	ldw	r2,-8(fp)
   57bdc:	10800044 	addi	r2,r2,1
   57be0:	e0bffe15 	stw	r2,-8(fp)
   57be4:	d0a02017 	ldw	r2,-32640(gp)
   57be8:	1007883a 	mov	r3,r2
   57bec:	e0bffe17 	ldw	r2,-8(fp)
   57bf0:	18bfdf2e 	bgeu	r3,r2,57b70 <__alt_mem_epcs_flash_controller+0xfe046b70>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   57bf4:	0005883a 	mov	r2,zero
}
   57bf8:	e037883a 	mov	sp,fp
   57bfc:	df000017 	ldw	fp,0(sp)
   57c00:	dec00104 	addi	sp,sp,4
   57c04:	f800283a 	ret

00057c08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   57c08:	defff604 	addi	sp,sp,-40
   57c0c:	dfc00915 	stw	ra,36(sp)
   57c10:	df000815 	stw	fp,32(sp)
   57c14:	df000804 	addi	fp,sp,32
   57c18:	e13ffd15 	stw	r4,-12(fp)
   57c1c:	e17ffe15 	stw	r5,-8(fp)
   57c20:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   57c24:	00bfffc4 	movi	r2,-1
   57c28:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   57c2c:	00bffb44 	movi	r2,-19
   57c30:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   57c34:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   57c38:	d1601e04 	addi	r5,gp,-32648
   57c3c:	e13ffd17 	ldw	r4,-12(fp)
   57c40:	0057f7c0 	call	57f7c <alt_find_dev>
   57c44:	e0bff815 	stw	r2,-32(fp)
   57c48:	e0bff817 	ldw	r2,-32(fp)
   57c4c:	1000051e 	bne	r2,zero,57c64 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   57c50:	e13ffd17 	ldw	r4,-12(fp)
   57c54:	005800c0 	call	5800c <alt_find_file>
   57c58:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   57c5c:	00800044 	movi	r2,1
   57c60:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   57c64:	e0bff817 	ldw	r2,-32(fp)
   57c68:	10002926 	beq	r2,zero,57d10 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   57c6c:	e13ff817 	ldw	r4,-32(fp)
   57c70:	00581140 	call	58114 <alt_get_fd>
   57c74:	e0bff915 	stw	r2,-28(fp)
   57c78:	e0bff917 	ldw	r2,-28(fp)
   57c7c:	1000030e 	bge	r2,zero,57c8c <open+0x84>
    {
      status = index;
   57c80:	e0bff917 	ldw	r2,-28(fp)
   57c84:	e0bffa15 	stw	r2,-24(fp)
   57c88:	00002306 	br	57d18 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   57c8c:	e0bff917 	ldw	r2,-28(fp)
   57c90:	10c00324 	muli	r3,r2,12
   57c94:	008001b4 	movhi	r2,6
   57c98:	10b94604 	addi	r2,r2,-6888
   57c9c:	1885883a 	add	r2,r3,r2
   57ca0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   57ca4:	e0fffe17 	ldw	r3,-8(fp)
   57ca8:	00900034 	movhi	r2,16384
   57cac:	10bfffc4 	addi	r2,r2,-1
   57cb0:	1886703a 	and	r3,r3,r2
   57cb4:	e0bffc17 	ldw	r2,-16(fp)
   57cb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   57cbc:	e0bffb17 	ldw	r2,-20(fp)
   57cc0:	1000051e 	bne	r2,zero,57cd8 <open+0xd0>
   57cc4:	e13ffc17 	ldw	r4,-16(fp)
   57cc8:	0057b440 	call	57b44 <alt_file_locked>
   57ccc:	e0bffa15 	stw	r2,-24(fp)
   57cd0:	e0bffa17 	ldw	r2,-24(fp)
   57cd4:	10001016 	blt	r2,zero,57d18 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   57cd8:	e0bff817 	ldw	r2,-32(fp)
   57cdc:	10800317 	ldw	r2,12(r2)
   57ce0:	10000826 	beq	r2,zero,57d04 <open+0xfc>
   57ce4:	e0bff817 	ldw	r2,-32(fp)
   57ce8:	10800317 	ldw	r2,12(r2)
   57cec:	e1ffff17 	ldw	r7,-4(fp)
   57cf0:	e1bffe17 	ldw	r6,-8(fp)
   57cf4:	e17ffd17 	ldw	r5,-12(fp)
   57cf8:	e13ffc17 	ldw	r4,-16(fp)
   57cfc:	103ee83a 	callr	r2
   57d00:	00000106 	br	57d08 <open+0x100>
   57d04:	0005883a 	mov	r2,zero
   57d08:	e0bffa15 	stw	r2,-24(fp)
   57d0c:	00000206 	br	57d18 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   57d10:	00bffb44 	movi	r2,-19
   57d14:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   57d18:	e0bffa17 	ldw	r2,-24(fp)
   57d1c:	1000090e 	bge	r2,zero,57d44 <open+0x13c>
  {
    alt_release_fd (index);  
   57d20:	e13ff917 	ldw	r4,-28(fp)
   57d24:	0054a580 	call	54a58 <alt_release_fd>
    ALT_ERRNO = -status;
   57d28:	0057b080 	call	57b08 <alt_get_errno>
   57d2c:	1007883a 	mov	r3,r2
   57d30:	e0bffa17 	ldw	r2,-24(fp)
   57d34:	0085c83a 	sub	r2,zero,r2
   57d38:	18800015 	stw	r2,0(r3)
    return -1;
   57d3c:	00bfffc4 	movi	r2,-1
   57d40:	00000106 	br	57d48 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   57d44:	e0bff917 	ldw	r2,-28(fp)
}
   57d48:	e037883a 	mov	sp,fp
   57d4c:	dfc00117 	ldw	ra,4(sp)
   57d50:	df000017 	ldw	fp,0(sp)
   57d54:	dec00204 	addi	sp,sp,8
   57d58:	f800283a 	ret

00057d5c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   57d5c:	deffff04 	addi	sp,sp,-4
   57d60:	df000015 	stw	fp,0(sp)
   57d64:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   57d68:	000170fa 	wrctl	ienable,zero
}
   57d6c:	0001883a 	nop
   57d70:	e037883a 	mov	sp,fp
   57d74:	df000017 	ldw	fp,0(sp)
   57d78:	dec00104 	addi	sp,sp,4
   57d7c:	f800283a 	ret

00057d80 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   57d80:	defff404 	addi	sp,sp,-48
   57d84:	df000b15 	stw	fp,44(sp)
   57d88:	df000b04 	addi	fp,sp,44
   57d8c:	e13ffc15 	stw	r4,-16(fp)
   57d90:	e17ffd15 	stw	r5,-12(fp)
   57d94:	e1bffe15 	stw	r6,-8(fp)
   57d98:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   57d9c:	e0ffff17 	ldw	r3,-4(fp)
   57da0:	e0bffe17 	ldw	r2,-8(fp)
   57da4:	1885883a 	add	r2,r3,r2
   57da8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   57dac:	e0c00217 	ldw	r3,8(fp)
   57db0:	e0800117 	ldw	r2,4(fp)
   57db4:	1885883a 	add	r2,r3,r2
   57db8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   57dbc:	e0800117 	ldw	r2,4(fp)
   57dc0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   57dc4:	e0bffe17 	ldw	r2,-8(fp)
   57dc8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   57dcc:	00800044 	movi	r2,1
   57dd0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   57dd4:	e0bffc17 	ldw	r2,-16(fp)
   57dd8:	10800504 	addi	r2,r2,20
   57ddc:	1009883a 	mov	r4,r2
   57de0:	00c00044 	movi	r3,1
   57de4:	e0bffd17 	ldw	r2,-12(fp)
   57de8:	1884983a 	sll	r2,r3,r2
   57dec:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   57df0:	e0800317 	ldw	r2,12(fp)
   57df4:	1080008c 	andi	r2,r2,2
   57df8:	1000051e 	bne	r2,zero,57e10 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   57dfc:	e0bffc17 	ldw	r2,-16(fp)
   57e00:	10800304 	addi	r2,r2,12
   57e04:	1007883a 	mov	r3,r2
   57e08:	00810004 	movi	r2,1024
   57e0c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   57e10:	e0bffc17 	ldw	r2,-16(fp)
   57e14:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   57e18:	e0bffc17 	ldw	r2,-16(fp)
   57e1c:	10800204 	addi	r2,r2,8
   57e20:	10800037 	ldwio	r2,0(r2)
   57e24:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   57e28:	e0bffa17 	ldw	r2,-24(fp)
   57e2c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   57e30:	10000226 	beq	r2,zero,57e3c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   57e34:	e0bff717 	ldw	r2,-36(fp)
   57e38:	1000031e 	bne	r2,zero,57e48 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   57e3c:	e0bffa17 	ldw	r2,-24(fp)
   57e40:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   57e44:	103ff426 	beq	r2,zero,57e18 <__alt_mem_epcs_flash_controller+0xfe046e18>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   57e48:	e0bffa17 	ldw	r2,-24(fp)
   57e4c:	1080100c 	andi	r2,r2,64
   57e50:	10001e26 	beq	r2,zero,57ecc <alt_avalon_spi_command+0x14c>
   57e54:	e0bff717 	ldw	r2,-36(fp)
   57e58:	00801c0e 	bge	zero,r2,57ecc <alt_avalon_spi_command+0x14c>
    {
      credits--;
   57e5c:	e0bff717 	ldw	r2,-36(fp)
   57e60:	10bfffc4 	addi	r2,r2,-1
   57e64:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   57e68:	e0ffff17 	ldw	r3,-4(fp)
   57e6c:	e0bff817 	ldw	r2,-32(fp)
   57e70:	18800a2e 	bgeu	r3,r2,57e9c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   57e74:	e0bffc17 	ldw	r2,-16(fp)
   57e78:	10800104 	addi	r2,r2,4
   57e7c:	1009883a 	mov	r4,r2
   57e80:	e0bfff17 	ldw	r2,-4(fp)
   57e84:	10c00044 	addi	r3,r2,1
   57e88:	e0ffff15 	stw	r3,-4(fp)
   57e8c:	10800003 	ldbu	r2,0(r2)
   57e90:	10803fcc 	andi	r2,r2,255
   57e94:	20800035 	stwio	r2,0(r4)
   57e98:	00000c06 	br	57ecc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   57e9c:	e0bff517 	ldw	r2,-44(fp)
   57ea0:	10000826 	beq	r2,zero,57ec4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   57ea4:	e0bff517 	ldw	r2,-44(fp)
   57ea8:	10bfffc4 	addi	r2,r2,-1
   57eac:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   57eb0:	e0bffc17 	ldw	r2,-16(fp)
   57eb4:	10800104 	addi	r2,r2,4
   57eb8:	0007883a 	mov	r3,zero
   57ebc:	10c00035 	stwio	r3,0(r2)
   57ec0:	00000206 	br	57ecc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   57ec4:	00bf0004 	movi	r2,-1024
   57ec8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   57ecc:	e0bffa17 	ldw	r2,-24(fp)
   57ed0:	1080200c 	andi	r2,r2,128
   57ed4:	103fd026 	beq	r2,zero,57e18 <__alt_mem_epcs_flash_controller+0xfe046e18>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   57ed8:	e0bffc17 	ldw	r2,-16(fp)
   57edc:	10800037 	ldwio	r2,0(r2)
   57ee0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   57ee4:	e0bff617 	ldw	r2,-40(fp)
   57ee8:	10000426 	beq	r2,zero,57efc <alt_avalon_spi_command+0x17c>
        read_ignore--;
   57eec:	e0bff617 	ldw	r2,-40(fp)
   57ef0:	10bfffc4 	addi	r2,r2,-1
   57ef4:	e0bff615 	stw	r2,-40(fp)
   57ef8:	00000506 	br	57f10 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   57efc:	e0800217 	ldw	r2,8(fp)
   57f00:	10c00044 	addi	r3,r2,1
   57f04:	e0c00215 	stw	r3,8(fp)
   57f08:	e0fffb17 	ldw	r3,-20(fp)
   57f0c:	10c00005 	stb	r3,0(r2)
      credits++;
   57f10:	e0bff717 	ldw	r2,-36(fp)
   57f14:	10800044 	addi	r2,r2,1
   57f18:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   57f1c:	e0bff617 	ldw	r2,-40(fp)
   57f20:	103fbd1e 	bne	r2,zero,57e18 <__alt_mem_epcs_flash_controller+0xfe046e18>
   57f24:	e0c00217 	ldw	r3,8(fp)
   57f28:	e0bff917 	ldw	r2,-28(fp)
   57f2c:	18bfba1e 	bne	r3,r2,57e18 <__alt_mem_epcs_flash_controller+0xfe046e18>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   57f30:	e0bffc17 	ldw	r2,-16(fp)
   57f34:	10800204 	addi	r2,r2,8
   57f38:	10800037 	ldwio	r2,0(r2)
   57f3c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   57f40:	e0bffa17 	ldw	r2,-24(fp)
   57f44:	1080080c 	andi	r2,r2,32
   57f48:	103ff926 	beq	r2,zero,57f30 <__alt_mem_epcs_flash_controller+0xfe046f30>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   57f4c:	e0800317 	ldw	r2,12(fp)
   57f50:	1080004c 	andi	r2,r2,1
   57f54:	1000041e 	bne	r2,zero,57f68 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   57f58:	e0bffc17 	ldw	r2,-16(fp)
   57f5c:	10800304 	addi	r2,r2,12
   57f60:	0007883a 	mov	r3,zero
   57f64:	10c00035 	stwio	r3,0(r2)

  return read_length;
   57f68:	e0800117 	ldw	r2,4(fp)
}
   57f6c:	e037883a 	mov	sp,fp
   57f70:	df000017 	ldw	fp,0(sp)
   57f74:	dec00104 	addi	sp,sp,4
   57f78:	f800283a 	ret

00057f7c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   57f7c:	defffa04 	addi	sp,sp,-24
   57f80:	dfc00515 	stw	ra,20(sp)
   57f84:	df000415 	stw	fp,16(sp)
   57f88:	df000404 	addi	fp,sp,16
   57f8c:	e13ffe15 	stw	r4,-8(fp)
   57f90:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   57f94:	e0bfff17 	ldw	r2,-4(fp)
   57f98:	10800017 	ldw	r2,0(r2)
   57f9c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   57fa0:	e13ffe17 	ldw	r4,-8(fp)
   57fa4:	0046ef40 	call	46ef4 <strlen>
   57fa8:	10800044 	addi	r2,r2,1
   57fac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   57fb0:	00000d06 	br	57fe8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   57fb4:	e0bffc17 	ldw	r2,-16(fp)
   57fb8:	10800217 	ldw	r2,8(r2)
   57fbc:	e0fffd17 	ldw	r3,-12(fp)
   57fc0:	180d883a 	mov	r6,r3
   57fc4:	e17ffe17 	ldw	r5,-8(fp)
   57fc8:	1009883a 	mov	r4,r2
   57fcc:	0045c1c0 	call	45c1c <memcmp>
   57fd0:	1000021e 	bne	r2,zero,57fdc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   57fd4:	e0bffc17 	ldw	r2,-16(fp)
   57fd8:	00000706 	br	57ff8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   57fdc:	e0bffc17 	ldw	r2,-16(fp)
   57fe0:	10800017 	ldw	r2,0(r2)
   57fe4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   57fe8:	e0fffc17 	ldw	r3,-16(fp)
   57fec:	e0bfff17 	ldw	r2,-4(fp)
   57ff0:	18bff01e 	bne	r3,r2,57fb4 <__alt_mem_epcs_flash_controller+0xfe046fb4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   57ff4:	0005883a 	mov	r2,zero
}
   57ff8:	e037883a 	mov	sp,fp
   57ffc:	dfc00117 	ldw	ra,4(sp)
   58000:	df000017 	ldw	fp,0(sp)
   58004:	dec00204 	addi	sp,sp,8
   58008:	f800283a 	ret

0005800c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   5800c:	defffb04 	addi	sp,sp,-20
   58010:	dfc00415 	stw	ra,16(sp)
   58014:	df000315 	stw	fp,12(sp)
   58018:	df000304 	addi	fp,sp,12
   5801c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   58020:	d0a01c17 	ldw	r2,-32656(gp)
   58024:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   58028:	00003106 	br	580f0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   5802c:	e0bffd17 	ldw	r2,-12(fp)
   58030:	10800217 	ldw	r2,8(r2)
   58034:	1009883a 	mov	r4,r2
   58038:	0046ef40 	call	46ef4 <strlen>
   5803c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   58040:	e0bffd17 	ldw	r2,-12(fp)
   58044:	10c00217 	ldw	r3,8(r2)
   58048:	e0bffe17 	ldw	r2,-8(fp)
   5804c:	10bfffc4 	addi	r2,r2,-1
   58050:	1885883a 	add	r2,r3,r2
   58054:	10800003 	ldbu	r2,0(r2)
   58058:	10803fcc 	andi	r2,r2,255
   5805c:	1080201c 	xori	r2,r2,128
   58060:	10bfe004 	addi	r2,r2,-128
   58064:	10800bd8 	cmpnei	r2,r2,47
   58068:	1000031e 	bne	r2,zero,58078 <alt_find_file+0x6c>
    {
      len -= 1;
   5806c:	e0bffe17 	ldw	r2,-8(fp)
   58070:	10bfffc4 	addi	r2,r2,-1
   58074:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   58078:	e0bffe17 	ldw	r2,-8(fp)
   5807c:	e0ffff17 	ldw	r3,-4(fp)
   58080:	1885883a 	add	r2,r3,r2
   58084:	10800003 	ldbu	r2,0(r2)
   58088:	10803fcc 	andi	r2,r2,255
   5808c:	1080201c 	xori	r2,r2,128
   58090:	10bfe004 	addi	r2,r2,-128
   58094:	10800be0 	cmpeqi	r2,r2,47
   58098:	1000081e 	bne	r2,zero,580bc <alt_find_file+0xb0>
   5809c:	e0bffe17 	ldw	r2,-8(fp)
   580a0:	e0ffff17 	ldw	r3,-4(fp)
   580a4:	1885883a 	add	r2,r3,r2
   580a8:	10800003 	ldbu	r2,0(r2)
   580ac:	10803fcc 	andi	r2,r2,255
   580b0:	1080201c 	xori	r2,r2,128
   580b4:	10bfe004 	addi	r2,r2,-128
   580b8:	10000a1e 	bne	r2,zero,580e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   580bc:	e0bffd17 	ldw	r2,-12(fp)
   580c0:	10800217 	ldw	r2,8(r2)
   580c4:	e0fffe17 	ldw	r3,-8(fp)
   580c8:	180d883a 	mov	r6,r3
   580cc:	e17fff17 	ldw	r5,-4(fp)
   580d0:	1009883a 	mov	r4,r2
   580d4:	0045c1c0 	call	45c1c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   580d8:	1000021e 	bne	r2,zero,580e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   580dc:	e0bffd17 	ldw	r2,-12(fp)
   580e0:	00000706 	br	58100 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   580e4:	e0bffd17 	ldw	r2,-12(fp)
   580e8:	10800017 	ldw	r2,0(r2)
   580ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   580f0:	e0fffd17 	ldw	r3,-12(fp)
   580f4:	d0a01c04 	addi	r2,gp,-32656
   580f8:	18bfcc1e 	bne	r3,r2,5802c <__alt_mem_epcs_flash_controller+0xfe04702c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   580fc:	0005883a 	mov	r2,zero
}
   58100:	e037883a 	mov	sp,fp
   58104:	dfc00117 	ldw	ra,4(sp)
   58108:	df000017 	ldw	fp,0(sp)
   5810c:	dec00204 	addi	sp,sp,8
   58110:	f800283a 	ret

00058114 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   58114:	defffc04 	addi	sp,sp,-16
   58118:	df000315 	stw	fp,12(sp)
   5811c:	df000304 	addi	fp,sp,12
   58120:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   58124:	00bffa04 	movi	r2,-24
   58128:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   5812c:	e03ffd15 	stw	zero,-12(fp)
   58130:	00001906 	br	58198 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   58134:	008001b4 	movhi	r2,6
   58138:	10b94604 	addi	r2,r2,-6888
   5813c:	e0fffd17 	ldw	r3,-12(fp)
   58140:	18c00324 	muli	r3,r3,12
   58144:	10c5883a 	add	r2,r2,r3
   58148:	10800017 	ldw	r2,0(r2)
   5814c:	10000f1e 	bne	r2,zero,5818c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   58150:	008001b4 	movhi	r2,6
   58154:	10b94604 	addi	r2,r2,-6888
   58158:	e0fffd17 	ldw	r3,-12(fp)
   5815c:	18c00324 	muli	r3,r3,12
   58160:	10c5883a 	add	r2,r2,r3
   58164:	e0ffff17 	ldw	r3,-4(fp)
   58168:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   5816c:	d0e02017 	ldw	r3,-32640(gp)
   58170:	e0bffd17 	ldw	r2,-12(fp)
   58174:	1880020e 	bge	r3,r2,58180 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   58178:	e0bffd17 	ldw	r2,-12(fp)
   5817c:	d0a02015 	stw	r2,-32640(gp)
      }
      rc = i;
   58180:	e0bffd17 	ldw	r2,-12(fp)
   58184:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   58188:	00000606 	br	581a4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   5818c:	e0bffd17 	ldw	r2,-12(fp)
   58190:	10800044 	addi	r2,r2,1
   58194:	e0bffd15 	stw	r2,-12(fp)
   58198:	e0bffd17 	ldw	r2,-12(fp)
   5819c:	10800810 	cmplti	r2,r2,32
   581a0:	103fe41e 	bne	r2,zero,58134 <__alt_mem_epcs_flash_controller+0xfe047134>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   581a4:	e0bffe17 	ldw	r2,-8(fp)
}
   581a8:	e037883a 	mov	sp,fp
   581ac:	df000017 	ldw	fp,0(sp)
   581b0:	dec00104 	addi	sp,sp,4
   581b4:	f800283a 	ret

000581b8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   581b8:	defffb04 	addi	sp,sp,-20
   581bc:	df000415 	stw	fp,16(sp)
   581c0:	df000404 	addi	fp,sp,16
   581c4:	e13ffe15 	stw	r4,-8(fp)
   581c8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   581cc:	e0bfff17 	ldw	r2,-4(fp)
   581d0:	10840070 	cmpltui	r2,r2,4097
   581d4:	1000021e 	bne	r2,zero,581e0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   581d8:	00840004 	movi	r2,4096
   581dc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   581e0:	e0fffe17 	ldw	r3,-8(fp)
   581e4:	e0bfff17 	ldw	r2,-4(fp)
   581e8:	1885883a 	add	r2,r3,r2
   581ec:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   581f0:	e0bffe17 	ldw	r2,-8(fp)
   581f4:	e0bffc15 	stw	r2,-16(fp)
   581f8:	00000506 	br	58210 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   581fc:	e0bffc17 	ldw	r2,-16(fp)
   58200:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   58204:	e0bffc17 	ldw	r2,-16(fp)
   58208:	10800804 	addi	r2,r2,32
   5820c:	e0bffc15 	stw	r2,-16(fp)
   58210:	e0fffc17 	ldw	r3,-16(fp)
   58214:	e0bffd17 	ldw	r2,-12(fp)
   58218:	18bff836 	bltu	r3,r2,581fc <__alt_mem_epcs_flash_controller+0xfe0471fc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   5821c:	e0bffe17 	ldw	r2,-8(fp)
   58220:	108007cc 	andi	r2,r2,31
   58224:	10000226 	beq	r2,zero,58230 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   58228:	e0bffc17 	ldw	r2,-16(fp)
   5822c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   58230:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   58234:	0001883a 	nop
   58238:	e037883a 	mov	sp,fp
   5823c:	df000017 	ldw	fp,0(sp)
   58240:	dec00104 	addi	sp,sp,4
   58244:	f800283a 	ret

00058248 <atexit>:
   58248:	200b883a 	mov	r5,r4
   5824c:	000f883a 	mov	r7,zero
   58250:	000d883a 	mov	r6,zero
   58254:	0009883a 	mov	r4,zero
   58258:	005825c1 	jmpi	5825c <__register_exitproc>

0005825c <__register_exitproc>:
   5825c:	defffa04 	addi	sp,sp,-24
   58260:	dc000315 	stw	r16,12(sp)
   58264:	040001b4 	movhi	r16,6
   58268:	843e3704 	addi	r16,r16,-1828
   5826c:	80c00017 	ldw	r3,0(r16)
   58270:	dc400415 	stw	r17,16(sp)
   58274:	dfc00515 	stw	ra,20(sp)
   58278:	18805217 	ldw	r2,328(r3)
   5827c:	2023883a 	mov	r17,r4
   58280:	10003726 	beq	r2,zero,58360 <__register_exitproc+0x104>
   58284:	10c00117 	ldw	r3,4(r2)
   58288:	010007c4 	movi	r4,31
   5828c:	20c00e16 	blt	r4,r3,582c8 <__register_exitproc+0x6c>
   58290:	1a000044 	addi	r8,r3,1
   58294:	8800221e 	bne	r17,zero,58320 <__register_exitproc+0xc4>
   58298:	18c00084 	addi	r3,r3,2
   5829c:	18c7883a 	add	r3,r3,r3
   582a0:	18c7883a 	add	r3,r3,r3
   582a4:	12000115 	stw	r8,4(r2)
   582a8:	10c7883a 	add	r3,r2,r3
   582ac:	19400015 	stw	r5,0(r3)
   582b0:	0005883a 	mov	r2,zero
   582b4:	dfc00517 	ldw	ra,20(sp)
   582b8:	dc400417 	ldw	r17,16(sp)
   582bc:	dc000317 	ldw	r16,12(sp)
   582c0:	dec00604 	addi	sp,sp,24
   582c4:	f800283a 	ret
   582c8:	00800134 	movhi	r2,4
   582cc:	1094fa04 	addi	r2,r2,21480
   582d0:	10002626 	beq	r2,zero,5836c <__register_exitproc+0x110>
   582d4:	01006404 	movi	r4,400
   582d8:	d9400015 	stw	r5,0(sp)
   582dc:	d9800115 	stw	r6,4(sp)
   582e0:	d9c00215 	stw	r7,8(sp)
   582e4:	00453e80 	call	453e8 <malloc>
   582e8:	d9400017 	ldw	r5,0(sp)
   582ec:	d9800117 	ldw	r6,4(sp)
   582f0:	d9c00217 	ldw	r7,8(sp)
   582f4:	10001d26 	beq	r2,zero,5836c <__register_exitproc+0x110>
   582f8:	81000017 	ldw	r4,0(r16)
   582fc:	10000115 	stw	zero,4(r2)
   58300:	02000044 	movi	r8,1
   58304:	22405217 	ldw	r9,328(r4)
   58308:	0007883a 	mov	r3,zero
   5830c:	12400015 	stw	r9,0(r2)
   58310:	20805215 	stw	r2,328(r4)
   58314:	10006215 	stw	zero,392(r2)
   58318:	10006315 	stw	zero,396(r2)
   5831c:	883fde26 	beq	r17,zero,58298 <__alt_mem_epcs_flash_controller+0xfe047298>
   58320:	18c9883a 	add	r4,r3,r3
   58324:	2109883a 	add	r4,r4,r4
   58328:	1109883a 	add	r4,r2,r4
   5832c:	21802215 	stw	r6,136(r4)
   58330:	01800044 	movi	r6,1
   58334:	12406217 	ldw	r9,392(r2)
   58338:	30cc983a 	sll	r6,r6,r3
   5833c:	4992b03a 	or	r9,r9,r6
   58340:	12406215 	stw	r9,392(r2)
   58344:	21c04215 	stw	r7,264(r4)
   58348:	01000084 	movi	r4,2
   5834c:	893fd21e 	bne	r17,r4,58298 <__alt_mem_epcs_flash_controller+0xfe047298>
   58350:	11006317 	ldw	r4,396(r2)
   58354:	218cb03a 	or	r6,r4,r6
   58358:	11806315 	stw	r6,396(r2)
   5835c:	003fce06 	br	58298 <__alt_mem_epcs_flash_controller+0xfe047298>
   58360:	18805304 	addi	r2,r3,332
   58364:	18805215 	stw	r2,328(r3)
   58368:	003fc606 	br	58284 <__alt_mem_epcs_flash_controller+0xfe047284>
   5836c:	00bfffc4 	movi	r2,-1
   58370:	003fd006 	br	582b4 <__alt_mem_epcs_flash_controller+0xfe0472b4>
