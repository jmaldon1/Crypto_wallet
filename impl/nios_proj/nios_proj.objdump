
nios_proj.elf:     file format elf32-littlenios2
nios_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02008230

Program Header:
    LOAD off    0x00001000 vaddr 0x02008000 paddr 0x02008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02008020 paddr 0x02008020 align 2**12
         filesz 0x000051f8 memsz 0x000051f8 flags r-x
    LOAD off    0x00007000 vaddr 0x00000000 paddr 0x0200d218 align 2**12
         filesz 0x00001524 memsz 0x00001e4c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02008000  02008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02008020  02008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004fe8  02008230  02008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  00000000  0200d218  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000014ac  00000078  0200d290  00007078  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000928  00001524  0200e73c  00008524  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00001e4c  00001e4c  00008524  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  0200e73c  0200e73c  00008524  2**0
                  CONTENTS
  8 .epcs_flash_controller 00000000  02011000  02011000  00008524  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00008524  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000007f0  00000000  00000000  00008548  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000abed  00000000  00000000  00008d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003ce5  00000000  00000000  00013925  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000418b  00000000  00000000  0001760a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014e4  00000000  00000000  0001b798  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000288a  00000000  00000000  0001cc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000181b  00000000  00000000  0001f506  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000040  00000000  00000000  00020d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000002d0  00000000  00000000  00020d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000236f5  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  000236f8  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000236fb  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000236fc  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000236fd  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00023701  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00023705  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  00023709  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  00023712  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0002371b  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000013  00000000  00000000  00023724  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003d  00000000  00000000  00023737  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005cbef  00000000  00000000  00023774  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02008000 l    d  .entry	00000000 .entry
02008020 l    d  .exceptions	00000000 .exceptions
02008230 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000078 l    d  .rwdata	00000000 .rwdata
00001524 l    d  .bss	00000000 .bss
00001e4c l    d  .sdram	00000000 .sdram
0200e73c l    d  .onchip_memory2	00000000 .onchip_memory2
02011000 l    d  .epcs_flash_controller	00000000 .epcs_flash_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Class2018/Documents/Projects/Crypto_wallet/impl/nios_proj_bsp//obj/HAL/src/crt0.o
02008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 uart_usb.c
020085c4 l     F .text	0000012c IsrUart
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02008c74 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00000078 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
020095f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02009790 l     F .text	00000034 alt_dev_reg
00000158 l     O .rwdata	000000cc epcs_flash_controller
00000224 l     O .rwdata	00001060 jtag_uart
00001284 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02009874 l     F .text	00000034 alt_flash_device_register
020098fc l     F .text	000003f8 alt_epcs_flash_query
02009cf4 l     F .text	000000ec alt_epcs_flash_memcmp
0200a0cc l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200a594 l     F .text	0000020c altera_avalon_jtag_uart_irq
0200a7a0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0200af94 l     F .text	0000009c altera_avalon_uart_irq
0200b030 l     F .text	000000e4 altera_avalon_uart_rxirq
0200b114 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0200b2b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0200b4c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0200b70c l     F .text	00000038 epcs_test_wip
0200b744 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0200bf70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0200c0a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200c0d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0200c3e8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0200c548 l     F .text	0000003c alt_get_errno
0200c584 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000153c g     O .bss	00000004 alt_instruction_exception_handler
020087a4 g     F .text	0000003c EmptyUart
0200a040 g     F .text	0000008c alt_epcs_flash_get_info
020096e4 g     F .text	0000007c alt_main
00001d4c g     O .bss	00000100 alt_irq
0200d290 g       *ABS*	00000000 __flash_rwdata_start
020092d0 g     F .text	00000060 memmove
0200c9f4 g     F .text	00000024 altera_nios2_gen2_irq_init
0200b780 g     F .text	000000fc epcs_sector_erase
02009228 g     F .text	000000a8 __sfvwrite_small_str
02008000 g     F .entry	0000000c __reset
02008020 g       *ABS*	00000000 __flash_exceptions_start
00001548 g     O .bss	00000004 errno
00001534 g     O .bss	00000004 alt_argv
000094f0 g       *ABS*	00000000 _gp
02009760 g     F .text	00000030 usleep
00001370 g     O .rwdata	00000180 alt_fd_list
0200b9c4 g     F .text	0000006c epcs_write_status_register
0200cc14 g     F .text	00000090 alt_find_dev
0200ced4 g     F .text	00000028 memcpy
02008454 g     F .text	00000068 u32getRandom
0200c4cc g     F .text	0000007c alt_io_redirect
0200d218 g       *ABS*	00000000 __DTOR_END__
0200c34c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0200a1d8 g     F .text	00000100 alt_epcs_flash_write_block
0200a998 g     F .text	0000021c altera_avalon_jtag_uart_read
02008ac0 g     F .text	00000064 .hidden __udivsi3
0200842c g     F .text	00000028 u08getRandom
0000150c g     O .rwdata	00000004 alt_max_fd
0200a160 g     F .text	00000078 alt_epcs_flash_erase_block
000014f0 g     O .rwdata	00000004 _global_impure_ptr
0200bc90 g     F .text	0000005c epcs_exit_4_bytes_mode
02008770 g     F .text	00000034 closeUart
00001e4c g       *ABS*	00000000 __bss_end
02009508 g     F .text	000000f0 alt_iic_isr_register
0200c8ec g     F .text	00000108 alt_tick
0200aee8 g     F .text	000000ac altera_avalon_uart_init
020094bc g     F .text	0000004c alt_ic_irq_enabled
0200c850 g     F .text	0000009c alt_alarm_stop
0000152c g     O .bss	00000004 alt_irq_active
020080fc g     F .exceptions	000000d4 alt_irq_handler
00001348 g     O .rwdata	00000028 alt_dev_null
0200c084 g     F .text	00000020 alt_dcache_flush_all
00001524 g       *ABS*	00000000 __ram_rwdata_end
00001504 g     O .rwdata	00000008 alt_dev_list
0000154c g     O .bss	00000400 rx_buffer
00000078 g       *ABS*	00000000 __ram_rodata_end
0000194c g     O .bss	00000400 tx_buffer
02008b24 g     F .text	00000058 .hidden __umodsi3
0200bb4c g     F .text	00000068 epcs_read_electronic_signature
00001e4c g       *ABS*	00000000 end
0200b504 g     F .text	000001ac altera_avalon_uart_write
0200a4d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
020081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0200d218 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0200ae38 g     F .text	00000060 altera_avalon_uart_write_fd
0200ae98 g     F .text	00000050 altera_avalon_uart_close_fd
0200abb4 g     F .text	00000224 altera_avalon_jtag_uart_write
02008b7c g     F .text	00000064 _sprintf_r
0200d054 g     F .text	00000190 __call_exitprocs
02008230 g     F .text	0000003c _start
00001540 g     O .bss	00000004 _alt_tick_rate
0200ca18 g     F .text	000001fc alt_avalon_spi_command
00001544 g     O .bss	00000004 _alt_nticks
020097fc g     F .text	00000078 alt_sys_init
0200cefc g     F .text	00000158 __register_exitproc
0200a840 g     F .text	00000068 altera_avalon_jtag_uart_close
02009330 g     F .text	00000028 .hidden __mulsi3
00000078 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
0200b6b0 g     F .text	0000005c epcs_read_status_register
0200a370 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0200cdac g     F .text	000000c4 alt_get_fd
0200be18 g     F .text	00000158 alt_busy_sleep
0200bbb4 g     F .text	00000080 epcs_read_device_id
0200cea4 g     F .text	00000030 memcmp
0200a430 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001e4c g       *ABS*	00000000 __alt_stack_base
0200a480 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02011000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
0200cca4 g     F .text	00000108 alt_find_file
0200c10c g     F .text	000000a4 alt_dev_llist_insert
02008ce0 g     F .text	0000052c ___svfprintf_internal_r
00001514 g     O .rwdata	00000008 alt_flash_dev_list
00001524 g       *ABS*	00000000 __bss_start
020082ac g     F .text	0000011c main
00001538 g     O .bss	00000004 alt_envp
0200a3d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
020088ac g     F .text	0000011c PutCUart
00001510 g     O .rwdata	00000004 alt_errno
020089c8 g     F .text	00000084 .hidden __divsi3
0200d218 g       *ABS*	00000000 __CTOR_END__
0200852c g     F .text	00000098 uartGetLine
02009de0 g     F .text	00000260 alt_epcs_flash_write
0200d218 g       *ABS*	00000000 __flash_rodata_start
0200d218 g       *ABS*	00000000 __DTOR_LIST__
020097c4 g     F .text	00000038 alt_irq_init
0200c7cc g     F .text	00000084 alt_release_fd
02008be0 g     F .text	00000078 sprintf
0200ce70 g     F .text	00000014 atexit
000014f4 g     O .rwdata	00000004 _impure_ptr
00001530 g     O .bss	00000004 alt_argc
0200c210 g     F .text	00000060 _do_dtors
00001528 g     O .bss	00000002 RxHead
0000152a g     O .bss	00000002 RxTail
02008020 g       .exceptions	00000000 alt_irq_entry
000014fc g     O .rwdata	00000008 alt_fs_list
0200920c g     F .text	0000001c __vfprintf_internal_unused
02008020 g       *ABS*	00000000 __ram_exceptions_start
0200b87c g     F .text	000000f4 epcs_read_buffer
02008000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0200883c g     F .text	00000070 PutStrUart
020098a8 g     F .text	00000054 alt_epcs_flash_init
02009358 g     F .text	00000050 alt_ic_isr_register
00001524 g       *ABS*	00000000 _edata
0200add8 g     F .text	00000060 altera_avalon_uart_read_fd
00001e4c g       *ABS*	00000000 _end
0200c270 g     F .text	00000068 alt_flash_open_dev
020084bc g     F .text	00000070 getRandomBuffer
02008230 g       *ABS*	00000000 __ram_exceptions_end
0200a8a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02009430 g     F .text	0000008c alt_ic_irq_disable
0200826c g     F .text	00000040 initialize
0200bc34 g     F .text	0000005c epcs_enter_4_bytes_mode
0200ce84 g     F .text	00000020 exit
0200c2d8 g     F .text	00000054 alt_flash_close_dev
02008a4c g     F .text	00000074 .hidden __modsi3
020083c8 g     F .text	00000064 initRandom
02000000 g       *ABS*	00000000 __alt_data_end
02008020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
0200b25c g     F .text	00000054 altera_avalon_uart_close
0200d1e4 g     F .text	00000034 _exit
0200bcec g     F .text	0000012c alt_alarm_start
02008c58 g     F .text	0000001c strlen
0200b970 g     F .text	00000054 epcs_write_enable
0200c670 g     F .text	0000015c open
0200c32c g     F .text	00000020 alt_icache_flush_all
000014f8 g     O .rwdata	00000004 alt_priority_mask
020093a8 g     F .text	00000088 alt_ic_irq_enable
0200b2ec g     F .text	000001dc altera_avalon_uart_read
0200a2d8 g     F .text	00000098 alt_epcs_flash_read
0000151c g     O .rwdata	00000008 alt_alarm_list
020086f0 g     F .text	00000080 initUart
0200c1b0 g     F .text	00000060 _do_ctors
0200bfac g     F .text	000000d8 close
020087e0 g     F .text	0000005c GetCUart
02009660 g     F .text	00000084 alt_load
00001524 g     O .bss	00000002 TxHead
0200ba30 g     F .text	0000011c epcs_write_buffer
00001526 g     O .bss	00000002 TxTail



Disassembly of section .entry:

02008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2008000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2008004:	08608c14 	ori	at,at,33328
    jmp r1
 2008008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2008020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2008024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2008028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2008030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2008034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2008038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2008040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2008044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2008048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2008050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2008054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2008058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2008060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2008064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2008068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2008070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2008074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2008078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200807c:	10000326 	beq	r2,zero,200808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2008080:	20000226 	beq	r4,zero,200808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2008084:	20080fc0 	call	20080fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2008088:	00000706 	br	20080a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2008090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2008094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2008098:	20081d00 	call	20081d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200809c:	1000021e 	bne	r2,zero,20080a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20080a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20080a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20080a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20080ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20080b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20080b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20080b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20080bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20080c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20080c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20080c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20080cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20080d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20080d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20080d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20080dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20080e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20080e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20080e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20080ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20080f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20080f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20080f8:	ef80083a 	eret

020080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20080fc:	defff904 	addi	sp,sp,-28
 2008100:	dfc00615 	stw	ra,24(sp)
 2008104:	df000515 	stw	fp,20(sp)
 2008108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2008110:	0005313a 	rdctl	r2,ipending
 2008114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2008118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2008120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2008124:	00800044 	movi	r2,1
 2008128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200812c:	e0fffb17 	ldw	r3,-20(fp)
 2008130:	e0bffc17 	ldw	r2,-16(fp)
 2008134:	1884703a 	and	r2,r3,r2
 2008138:	10001426 	beq	r2,zero,200818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200813c:	00800034 	movhi	r2,0
 2008140:	10875304 	addi	r2,r2,7500
 2008144:	e0fffd17 	ldw	r3,-12(fp)
 2008148:	180690fa 	slli	r3,r3,3
 200814c:	10c5883a 	add	r2,r2,r3
 2008150:	10c00017 	ldw	r3,0(r2)
 2008154:	00800034 	movhi	r2,0
 2008158:	10875304 	addi	r2,r2,7500
 200815c:	e13ffd17 	ldw	r4,-12(fp)
 2008160:	200890fa 	slli	r4,r4,3
 2008164:	1105883a 	add	r2,r2,r4
 2008168:	10800104 	addi	r2,r2,4
 200816c:	10800017 	ldw	r2,0(r2)
 2008170:	1009883a 	mov	r4,r2
 2008174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2008178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200817c:	0005313a 	rdctl	r2,ipending
 2008180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2008184:	e0bfff17 	ldw	r2,-4(fp)
 2008188:	00000706 	br	20081a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200818c:	e0bffc17 	ldw	r2,-16(fp)
 2008190:	1085883a 	add	r2,r2,r2
 2008194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2008198:	e0bffd17 	ldw	r2,-12(fp)
 200819c:	10800044 	addi	r2,r2,1
 20081a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20081a4:	003fe106 	br	200812c <__alt_mem_epcs_flash_controller+0xffff712c>

    active = alt_irq_pending ();
 20081a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20081ac:	e0bffb17 	ldw	r2,-20(fp)
 20081b0:	103fdb1e 	bne	r2,zero,2008120 <__alt_mem_epcs_flash_controller+0xffff7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20081b4:	0001883a 	nop
}
 20081b8:	0001883a 	nop
 20081bc:	e037883a 	mov	sp,fp
 20081c0:	dfc00117 	ldw	ra,4(sp)
 20081c4:	df000017 	ldw	fp,0(sp)
 20081c8:	dec00204 	addi	sp,sp,8
 20081cc:	f800283a 	ret

020081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20081d0:	defffb04 	addi	sp,sp,-20
 20081d4:	dfc00415 	stw	ra,16(sp)
 20081d8:	df000315 	stw	fp,12(sp)
 20081dc:	df000304 	addi	fp,sp,12
 20081e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20081e4:	00bfffc4 	movi	r2,-1
 20081e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20081ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20081f0:	d0a01317 	ldw	r2,-32692(gp)
 20081f4:	10000726 	beq	r2,zero,2008214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20081f8:	d0a01317 	ldw	r2,-32692(gp)
 20081fc:	e0fffd17 	ldw	r3,-12(fp)
 2008200:	e1bffe17 	ldw	r6,-8(fp)
 2008204:	e17fff17 	ldw	r5,-4(fp)
 2008208:	1809883a 	mov	r4,r3
 200820c:	103ee83a 	callr	r2
 2008210:	00000206 	br	200821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2008214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2008218:	0005883a 	mov	r2,zero
}
 200821c:	e037883a 	mov	sp,fp
 2008220:	dfc00117 	ldw	ra,4(sp)
 2008224:	df000017 	ldw	fp,0(sp)
 2008228:	dec00204 	addi	sp,sp,8
 200822c:	f800283a 	ret

Disassembly of section .text:

02008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2008230:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 2008234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2008238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 200823c:	d6a53c14 	ori	gp,gp,38128
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2008240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 2008244:	10854914 	ori	r2,r2,5412

    movhi r3, %hi(__bss_end)
 2008248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 200824c:	18c79314 	ori	r3,r3,7756

    beq r2, r3, 1f
 2008250:	10c00326 	beq	r2,r3,2008260 <_start+0x30>

0:
    stw zero, (r2)
 2008254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2008258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200825c:	10fffd36 	bltu	r2,r3,2008254 <__alt_mem_epcs_flash_controller+0xffff7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2008260:	20096600 	call	2009660 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2008264:	20096e40 	call	20096e4 <alt_main>

02008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2008268:	003fff06 	br	2008268 <__alt_mem_epcs_flash_controller+0xffff7268>

0200826c <initialize>:
//#include "bip39.h"



void initialize()
{
 200826c:	defffd04 	addi	sp,sp,-12
 2008270:	dfc00215 	stw	ra,8(sp)
 2008274:	df000115 	stw	fp,4(sp)
 2008278:	df000104 	addi	fp,sp,4
	/* initialize hardware random number generator */
	alt_u32 randSeed = 0x12345678;
 200827c:	00848d34 	movhi	r2,4660
 2008280:	10959e04 	addi	r2,r2,22136
 2008284:	e0bfff15 	stw	r2,-4(fp)
    initRandom(randSeed);
 2008288:	e13fff17 	ldw	r4,-4(fp)
 200828c:	20083c80 	call	20083c8 <initRandom>

    /* initialize uart to usb */
    initUart();
 2008290:	20086f00 	call	20086f0 <initUart>
}
 2008294:	0001883a 	nop
 2008298:	e037883a 	mov	sp,fp
 200829c:	dfc00117 	ldw	ra,4(sp)
 20082a0:	df000017 	ldw	fp,0(sp)
 20082a4:	dec00204 	addi	sp,sp,8
 20082a8:	f800283a 	ret

020082ac <main>:



int main()
{
 20082ac:	defdf304 	addi	sp,sp,-2100
 20082b0:	dfc20c15 	stw	ra,2096(sp)
 20082b4:	df020b15 	stw	fp,2092(sp)
 20082b8:	df020b04 	addi	fp,sp,2092
    initialize();
 20082bc:	200826c0 	call	200826c <initialize>
	PutStrUart("FPGA Cryptocurreny Wallet\n");
 20082c0:	01000034 	movhi	r4,0
 20082c4:	21000004 	addi	r4,r4,0
 20082c8:	200883c0 	call	200883c <PutStrUart>

	alt_u8 data[32];
	getRandomBuffer(&(data[0]), 32);
 20082cc:	e0bdf804 	addi	r2,fp,-2080
 20082d0:	01400804 	movi	r5,32
 20082d4:	1009883a 	mov	r4,r2
 20082d8:	20084bc0 	call	20084bc <getRandomBuffer>
//	const char *mnemonic_phrase = mnemonic_generate(128);
//	printf("MNEMONIC PHRASE: %s\n", mnemonic_phrase);

	char buffer[2048];

	sprintf(buffer, "Random Buffer:\n");
 20082dc:	e0be0004 	addi	r2,fp,-2048
 20082e0:	00d91bb4 	movhi	r3,25710
 20082e4:	18d85484 	addi	r3,r3,24914
 20082e8:	10c00015 	stw	r3,0(r2)
 20082ec:	00d08834 	movhi	r3,16928
 20082f0:	18db5bc4 	addi	r3,r3,28015
 20082f4:	10c00115 	stw	r3,4(r2)
 20082f8:	00d959b4 	movhi	r3,25958
 20082fc:	18d99d44 	addi	r3,r3,26229
 2008300:	10c00215 	stw	r3,8(r2)
 2008304:	00c002b4 	movhi	r3,10
 2008308:	18ce9c84 	addi	r3,r3,14962
 200830c:	10c00315 	stw	r3,12(r2)
	PutStrUart((char *)&(buffer[0]));
 2008310:	e0be0004 	addi	r2,fp,-2048
 2008314:	1009883a 	mov	r4,r2
 2008318:	200883c0 	call	200883c <PutStrUart>

	for(int i = 0; i < 32; ++i)
 200831c:	e03df515 	stw	zero,-2092(fp)
 2008320:	00001106 	br	2008368 <main+0xbc>
	{
		sprintf(buffer, "0x%02x\n", data[i]);
 2008324:	e0fdf804 	addi	r3,fp,-2080
 2008328:	e0bdf517 	ldw	r2,-2092(fp)
 200832c:	1885883a 	add	r2,r3,r2
 2008330:	10800003 	ldbu	r2,0(r2)
 2008334:	10c03fcc 	andi	r3,r2,255
 2008338:	e0be0004 	addi	r2,fp,-2048
 200833c:	180d883a 	mov	r6,r3
 2008340:	01400034 	movhi	r5,0
 2008344:	29400704 	addi	r5,r5,28
 2008348:	1009883a 	mov	r4,r2
 200834c:	2008be00 	call	2008be0 <sprintf>
		PutStrUart((char *)&(buffer[0]));
 2008350:	e0be0004 	addi	r2,fp,-2048
 2008354:	1009883a 	mov	r4,r2
 2008358:	200883c0 	call	200883c <PutStrUart>
	char buffer[2048];

	sprintf(buffer, "Random Buffer:\n");
	PutStrUart((char *)&(buffer[0]));

	for(int i = 0; i < 32; ++i)
 200835c:	e0bdf517 	ldw	r2,-2092(fp)
 2008360:	10800044 	addi	r2,r2,1
 2008364:	e0bdf515 	stw	r2,-2092(fp)
 2008368:	e0bdf517 	ldw	r2,-2092(fp)
 200836c:	10800810 	cmplti	r2,r2,32
 2008370:	103fec1e 	bne	r2,zero,2008324 <__alt_mem_epcs_flash_controller+0xffff7324>
	}

//	sprintf(buffer, "Menmonic phrase: %s\n", mnemonic_phrase);
//	PutStrUart((char *)&(buffer[0]));

	alt_u8 count = 0;
 2008374:	e03df605 	stb	zero,-2088(fp)
	alt_u32 randVal;
//	char buffer[1024];
    while(1)
    {
    	uartGetLine();
 2008378:	200852c0 	call	200852c <uartGetLine>
		count++;
 200837c:	e0bdf603 	ldbu	r2,-2088(fp)
 2008380:	10800044 	addi	r2,r2,1
 2008384:	e0bdf605 	stb	r2,-2088(fp)
		if ((count % 1000000000) == 0)
 2008388:	e0bdf603 	ldbu	r2,-2088(fp)
 200838c:	014ee6f4 	movhi	r5,15259
 2008390:	29728004 	addi	r5,r5,-13824
 2008394:	1009883a 	mov	r4,r2
 2008398:	2008a4c0 	call	2008a4c <__modsi3>
 200839c:	1000071e 	bne	r2,zero,20083bc <main+0x110>
		{
	    	randVal = u32getRandom();
 20083a0:	20084540 	call	2008454 <u32getRandom>
 20083a4:	e0bdf715 	stw	r2,-2084(fp)
	    	IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, randVal & 0xFF);
 20083a8:	e0bdf717 	ldw	r2,-2084(fp)
 20083ac:	10c03fcc 	andi	r3,r2,255
 20083b0:	00808074 	movhi	r2,513
 20083b4:	10881404 	addi	r2,r2,8272
 20083b8:	10c00035 	stwio	r3,0(r2)
//	    	sprintf(buffer, "Random value: 0x%08x\n", randVal);
//	    	PutStrUart((char *)&(buffer[0]));
		}
		ALT_USLEEP(100);
 20083bc:	01001904 	movi	r4,100
 20083c0:	20097600 	call	2009760 <usleep>
    }
 20083c4:	003fec06 	br	2008378 <__alt_mem_epcs_flash_controller+0xffff7378>

020083c8 <initRandom>:
#include "altera_avalon_pio_regs.h"
#include "sys/alt_sys_wrappers.h"


void initRandom(alt_u32 seed)
{
 20083c8:	defffd04 	addi	sp,sp,-12
 20083cc:	dfc00215 	stw	ra,8(sp)
 20083d0:	df000115 	stw	fp,4(sp)
 20083d4:	df000104 	addi	fp,sp,4
 20083d8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PO_RANDOM_SEED_BASE, seed);
 20083dc:	e0ffff17 	ldw	r3,-4(fp)
 20083e0:	00808074 	movhi	r2,513
 20083e4:	10880804 	addi	r2,r2,8224
 20083e8:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_PIO_DATA(PO_SYSTEM_CONTROL_BASE, 0x01);
 20083ec:	00c00044 	movi	r3,1
 20083f0:	00808074 	movhi	r2,513
 20083f4:	10880c04 	addi	r2,r2,8240
 20083f8:	10c00035 	stwio	r3,0(r2)
	ALT_USLEEP(100);
 20083fc:	01001904 	movi	r4,100
 2008400:	20097600 	call	2009760 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PO_SYSTEM_CONTROL_BASE, 0x00);
 2008404:	0007883a 	mov	r3,zero
 2008408:	00808074 	movhi	r2,513
 200840c:	10880c04 	addi	r2,r2,8240
 2008410:	10c00035 	stwio	r3,0(r2)
}
 2008414:	0001883a 	nop
 2008418:	e037883a 	mov	sp,fp
 200841c:	dfc00117 	ldw	ra,4(sp)
 2008420:	df000017 	ldw	fp,0(sp)
 2008424:	dec00204 	addi	sp,sp,8
 2008428:	f800283a 	ret

0200842c <u08getRandom>:



alt_u8 u08getRandom()
{
 200842c:	deffff04 	addi	sp,sp,-4
 2008430:	df000015 	stw	fp,0(sp)
 2008434:	d839883a 	mov	fp,sp
	return (IORD_ALTERA_AVALON_PIO_DATA(PI_RANDOM_VALUE_BASE) & 0xFF);
 2008438:	00808074 	movhi	r2,513
 200843c:	10881004 	addi	r2,r2,8256
 2008440:	10800037 	ldwio	r2,0(r2)
}
 2008444:	e037883a 	mov	sp,fp
 2008448:	df000017 	ldw	fp,0(sp)
 200844c:	dec00104 	addi	sp,sp,4
 2008450:	f800283a 	ret

02008454 <u32getRandom>:



alt_u32 u32getRandom()
{
 2008454:	defffd04 	addi	sp,sp,-12
 2008458:	dfc00215 	stw	ra,8(sp)
 200845c:	df000115 	stw	fp,4(sp)
 2008460:	dc000015 	stw	r16,0(sp)
 2008464:	df000104 	addi	fp,sp,4
	return ((u08getRandom() & 0xFF) | ((u08getRandom() & 0xFF) << 8) | ((u08getRandom() & 0xFF) << 16) | ((alt_u32) (u08getRandom() & 0xFF) << 24));
 2008468:	200842c0 	call	200842c <u08getRandom>
 200846c:	14003fcc 	andi	r16,r2,255
 2008470:	200842c0 	call	200842c <u08getRandom>
 2008474:	10803fcc 	andi	r2,r2,255
 2008478:	1004923a 	slli	r2,r2,8
 200847c:	80a0b03a 	or	r16,r16,r2
 2008480:	200842c0 	call	200842c <u08getRandom>
 2008484:	10803fcc 	andi	r2,r2,255
 2008488:	1004943a 	slli	r2,r2,16
 200848c:	8084b03a 	or	r2,r16,r2
 2008490:	1021883a 	mov	r16,r2
 2008494:	200842c0 	call	200842c <u08getRandom>
 2008498:	10803fcc 	andi	r2,r2,255
 200849c:	1004963a 	slli	r2,r2,24
 20084a0:	8084b03a 	or	r2,r16,r2
}
 20084a4:	e6ffff04 	addi	sp,fp,-4
 20084a8:	dfc00217 	ldw	ra,8(sp)
 20084ac:	df000117 	ldw	fp,4(sp)
 20084b0:	dc000017 	ldw	r16,0(sp)
 20084b4:	dec00304 	addi	sp,sp,12
 20084b8:	f800283a 	ret

020084bc <getRandomBuffer>:



void getRandomBuffer(alt_u8 *buffer, alt_u32 len)
{
 20084bc:	defff904 	addi	sp,sp,-28
 20084c0:	dfc00615 	stw	ra,24(sp)
 20084c4:	df000515 	stw	fp,20(sp)
 20084c8:	dc000415 	stw	r16,16(sp)
 20084cc:	df000504 	addi	fp,sp,20
 20084d0:	e13ffd15 	stw	r4,-12(fp)
 20084d4:	e17ffe15 	stw	r5,-8(fp)
	alt_u32 r = 0;
 20084d8:	e03ffc15 	stw	zero,-16(fp)
	for (alt_u32 i = 0; i < len; ++i)
 20084dc:	e03ffb15 	stw	zero,-20(fp)
 20084e0:	00000806 	br	2008504 <getRandomBuffer+0x48>
	{
		buffer[i] = u08getRandom();
 20084e4:	e0fffd17 	ldw	r3,-12(fp)
 20084e8:	e0bffb17 	ldw	r2,-20(fp)
 20084ec:	18a1883a 	add	r16,r3,r2
 20084f0:	200842c0 	call	200842c <u08getRandom>
 20084f4:	80800005 	stb	r2,0(r16)


void getRandomBuffer(alt_u8 *buffer, alt_u32 len)
{
	alt_u32 r = 0;
	for (alt_u32 i = 0; i < len; ++i)
 20084f8:	e0bffb17 	ldw	r2,-20(fp)
 20084fc:	10800044 	addi	r2,r2,1
 2008500:	e0bffb15 	stw	r2,-20(fp)
 2008504:	e0fffb17 	ldw	r3,-20(fp)
 2008508:	e0bffe17 	ldw	r2,-8(fp)
 200850c:	18bff536 	bltu	r3,r2,20084e4 <__alt_mem_epcs_flash_controller+0xffff74e4>
	{
		buffer[i] = u08getRandom();
	}
}
 2008510:	0001883a 	nop
 2008514:	e6ffff04 	addi	sp,fp,-4
 2008518:	dfc00217 	ldw	ra,8(sp)
 200851c:	df000117 	ldw	fp,4(sp)
 2008520:	dc000017 	ldw	r16,0(sp)
 2008524:	dec00304 	addi	sp,sp,12
 2008528:	f800283a 	ret

0200852c <uartGetLine>:
#include "altera_avalon_uart.h"
#include "sys/alt_irq.h"


void uartGetLine()
{
 200852c:	defffd04 	addi	sp,sp,-12
 2008530:	dfc00215 	stw	ra,8(sp)
 2008534:	df000115 	stw	fp,4(sp)
 2008538:	df000104 	addi	fp,sp,4
	if (!EmptyUart())
 200853c:	20087a40 	call	20087a4 <EmptyUart>
 2008540:	10803fcc 	andi	r2,r2,255
 2008544:	1000191e 	bne	r2,zero,20085ac <uartGetLine+0x80>
	{
		unsigned char c = GetCUart();
 2008548:	20087e00 	call	20087e0 <GetCUart>
 200854c:	e0bfff05 	stb	r2,-4(fp)

		switch(c)
 2008550:	e0bfff03 	ldbu	r2,-4(fp)
 2008554:	10c002a0 	cmpeqi	r3,r2,10
 2008558:	1800051e 	bne	r3,zero,2008570 <uartGetLine+0x44>
 200855c:	10c00360 	cmpeqi	r3,r2,13
 2008560:	1800031e 	bne	r3,zero,2008570 <uartGetLine+0x44>
 2008564:	10800220 	cmpeqi	r2,r2,8
 2008568:	1000051e 	bne	r2,zero,2008580 <uartGetLine+0x54>
 200856c:	00000b06 	br	200859c <uartGetLine+0x70>
		{
		case '\r':
		case '\n':
			PutCUart(c);
 2008570:	e0bfff03 	ldbu	r2,-4(fp)
 2008574:	1009883a 	mov	r4,r2
 2008578:	20088ac0 	call	20088ac <PutCUart>
			break;
 200857c:	00000b06 	br	20085ac <uartGetLine+0x80>

		case '\b':
			PutCUart('\b');
 2008580:	01000204 	movi	r4,8
 2008584:	20088ac0 	call	20088ac <PutCUart>
			PutCUart(' ');
 2008588:	01000804 	movi	r4,32
 200858c:	20088ac0 	call	20088ac <PutCUart>
			PutCUart('\b');
 2008590:	01000204 	movi	r4,8
 2008594:	20088ac0 	call	20088ac <PutCUart>
			break;
 2008598:	00000406 	br	20085ac <uartGetLine+0x80>

		default:
			PutCUart(c);
 200859c:	e0bfff03 	ldbu	r2,-4(fp)
 20085a0:	1009883a 	mov	r4,r2
 20085a4:	20088ac0 	call	20088ac <PutCUart>
		}
	}
}
 20085a8:	00000006 	br	20085ac <uartGetLine+0x80>
 20085ac:	0001883a 	nop
 20085b0:	e037883a 	mov	sp,fp
 20085b4:	dfc00117 	ldw	ra,4(sp)
 20085b8:	df000017 	ldw	fp,0(sp)
 20085bc:	dec00204 	addi	sp,sp,8
 20085c0:	f800283a 	ret

020085c4 <IsrUart>:
unsigned short RxTail = 0;
unsigned char rx_buffer[RX_BUFFER_SIZE];


static void IsrUart(void* context, unsigned int id)
{
 20085c4:	defffc04 	addi	sp,sp,-16
 20085c8:	df000315 	stw	fp,12(sp)
 20085cc:	df000304 	addi	fp,sp,12
 20085d0:	e13ffe15 	stw	r4,-8(fp)
 20085d4:	e17fff15 	stw	r5,-4(fp)
	int sr = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
 20085d8:	00808074 	movhi	r2,513
 20085dc:	10880204 	addi	r2,r2,8200
 20085e0:	10800037 	ldwio	r2,0(r2)
 20085e4:	e0bffd15 	stw	r2,-12(fp)

	if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 20085e8:	e0bffd17 	ldw	r2,-12(fp)
 20085ec:	1080200c 	andi	r2,r2,128
 20085f0:	10001626 	beq	r2,zero,200864c <IsrUart+0x88>
	{
		rx_buffer[RxHead] = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
 20085f4:	d0a00e0b 	ldhu	r2,-32712(gp)
 20085f8:	10ffffcc 	andi	r3,r2,65535
 20085fc:	00808074 	movhi	r2,513
 2008600:	10880004 	addi	r2,r2,8192
 2008604:	10800037 	ldwio	r2,0(r2)
 2008608:	1009883a 	mov	r4,r2
 200860c:	00800034 	movhi	r2,0
 2008610:	10855304 	addi	r2,r2,5452
 2008614:	10c5883a 	add	r2,r2,r3
 2008618:	11000005 	stb	r4,0(r2)

		IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE, 0);
 200861c:	0007883a 	mov	r3,zero
 2008620:	00808074 	movhi	r2,513
 2008624:	10880204 	addi	r2,r2,8200
 2008628:	10c00035 	stwio	r3,0(r2)

		if (++RxHead > (RX_BUFFER_SIZE - 1))
 200862c:	d0a00e0b 	ldhu	r2,-32712(gp)
 2008630:	10800044 	addi	r2,r2,1
 2008634:	d0a00e0d 	sth	r2,-32712(gp)
 2008638:	d0a00e0b 	ldhu	r2,-32712(gp)
 200863c:	10bfffcc 	andi	r2,r2,65535
 2008640:	10810030 	cmpltui	r2,r2,1024
 2008644:	1000011e 	bne	r2,zero,200864c <IsrUart+0x88>
		{
			RxHead = 0;
 2008648:	d0200e0d 	sth	zero,-32712(gp)
		}
	}

	if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
 200864c:	e0bffd17 	ldw	r2,-12(fp)
 2008650:	1080100c 	andi	r2,r2,64
 2008654:	10002126 	beq	r2,zero,20086dc <IsrUart+0x118>
	{
		if(IORD_ALTERA_AVALON_UART_CONTROL(UART_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK)
 2008658:	00808074 	movhi	r2,513
 200865c:	10880304 	addi	r2,r2,8204
 2008660:	10800037 	ldwio	r2,0(r2)
 2008664:	1080100c 	andi	r2,r2,64
 2008668:	10001c26 	beq	r2,zero,20086dc <IsrUart+0x118>
		{
			if (TxTail != TxHead)
 200866c:	d0e00d8b 	ldhu	r3,-32714(gp)
 2008670:	d0a00d0b 	ldhu	r2,-32716(gp)
 2008674:	18ffffcc 	andi	r3,r3,65535
 2008678:	10bfffcc 	andi	r2,r2,65535
 200867c:	18801326 	beq	r3,r2,20086cc <IsrUart+0x108>
			{
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, tx_buffer[TxTail]);
 2008680:	d0a00d8b 	ldhu	r2,-32714(gp)
 2008684:	10ffffcc 	andi	r3,r2,65535
 2008688:	00800034 	movhi	r2,0
 200868c:	10865304 	addi	r2,r2,6476
 2008690:	10c5883a 	add	r2,r2,r3
 2008694:	10800003 	ldbu	r2,0(r2)
 2008698:	10c03fcc 	andi	r3,r2,255
 200869c:	00808074 	movhi	r2,513
 20086a0:	10880104 	addi	r2,r2,8196
 20086a4:	10c00035 	stwio	r3,0(r2)

				if (++TxTail > (TX_BUFFER_SIZE - 1))
 20086a8:	d0a00d8b 	ldhu	r2,-32714(gp)
 20086ac:	10800044 	addi	r2,r2,1
 20086b0:	d0a00d8d 	sth	r2,-32714(gp)
 20086b4:	d0a00d8b 	ldhu	r2,-32714(gp)
 20086b8:	10bfffcc 	andi	r2,r2,65535
 20086bc:	10810030 	cmpltui	r2,r2,1024
 20086c0:	1000061e 	bne	r2,zero,20086dc <IsrUart+0x118>
				{
					TxTail = 0;
 20086c4:	d0200d8d 	sth	zero,-32714(gp)
			{
				IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
			}
		}
	}
}
 20086c8:	00000406 	br	20086dc <IsrUart+0x118>
					TxTail = 0;
				}
			}
			else
			{
				IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
 20086cc:	00c02004 	movi	r3,128
 20086d0:	00808074 	movhi	r2,513
 20086d4:	10880304 	addi	r2,r2,8204
 20086d8:	10c00035 	stwio	r3,0(r2)
			}
		}
	}
}
 20086dc:	0001883a 	nop
 20086e0:	e037883a 	mov	sp,fp
 20086e4:	df000017 	ldw	fp,0(sp)
 20086e8:	dec00104 	addi	sp,sp,4
 20086ec:	f800283a 	ret

020086f0 <initUart>:


void initUart(unsigned int BaudRate)
{
 20086f0:	defffa04 	addi	sp,sp,-24
 20086f4:	dfc00515 	stw	ra,20(sp)
 20086f8:	df000415 	stw	fp,16(sp)
 20086fc:	df000404 	addi	fp,sp,16
 2008700:	e13fff15 	stw	r4,-4(fp)
	int context_uart;
	unsigned int divisor = (ALT_CPU_FREQ/UART_USB_BAUD_RATE) +1;
 2008704:	00806cc4 	movi	r2,435
 2008708:	e0bffd15 	stw	r2,-12(fp)

	IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, divisor);
 200870c:	e0fffd17 	ldw	r3,-12(fp)
 2008710:	00808074 	movhi	r2,513
 2008714:	10880404 	addi	r2,r2,8208
 2008718:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
 200871c:	00c02004 	movi	r3,128
 2008720:	00808074 	movhi	r2,513
 2008724:	10880304 	addi	r2,r2,8204
 2008728:	10c00035 	stwio	r3,0(r2)


#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ, (alt_isr_func) IsrUart, &context_uart, NULL);
 200872c:	e0bffe04 	addi	r2,fp,-8
 2008730:	d8000015 	stw	zero,0(sp)
 2008734:	100f883a 	mov	r7,r2
 2008738:	01808074 	movhi	r6,513
 200873c:	31a17104 	addi	r6,r6,-31292
 2008740:	01400084 	movi	r5,2
 2008744:	0009883a 	mov	r4,zero
 2008748:	20093580 	call	2009358 <alt_ic_isr_register>
	alt_ic_irq_enable (UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ);
 200874c:	01400084 	movi	r5,2
 2008750:	0009883a 	mov	r4,zero
 2008754:	20093a80 	call	20093a8 <alt_ic_irq_enable>
#else
	alt_irq_register(UART_IRQ, &context_uart, IsrUart);
	alt_irq_enable(UART_IRQ);
#endif
}
 2008758:	0001883a 	nop
 200875c:	e037883a 	mov	sp,fp
 2008760:	dfc00117 	ldw	ra,4(sp)
 2008764:	df000017 	ldw	fp,0(sp)
 2008768:	dec00204 	addi	sp,sp,8
 200876c:	f800283a 	ret

02008770 <closeUart>:



void closeUart()
{
 2008770:	defffe04 	addi	sp,sp,-8
 2008774:	dfc00115 	stw	ra,4(sp)
 2008778:	df000015 	stw	fp,0(sp)
 200877c:	d839883a 	mov	fp,sp
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_irq_disable (UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ);
 2008780:	01400084 	movi	r5,2
 2008784:	0009883a 	mov	r4,zero
 2008788:	20094300 	call	2009430 <alt_ic_irq_disable>

#else
	alt_irq_disable(UART_IRQ);
#endif
}
 200878c:	0001883a 	nop
 2008790:	e037883a 	mov	sp,fp
 2008794:	dfc00117 	ldw	ra,4(sp)
 2008798:	df000017 	ldw	fp,0(sp)
 200879c:	dec00204 	addi	sp,sp,8
 20087a0:	f800283a 	ret

020087a4 <EmptyUart>:



unsigned char EmptyUart()
{
 20087a4:	deffff04 	addi	sp,sp,-4
 20087a8:	df000015 	stw	fp,0(sp)
 20087ac:	d839883a 	mov	fp,sp
	if(RxHead == RxTail)
 20087b0:	d0e00e0b 	ldhu	r3,-32712(gp)
 20087b4:	d0a00e8b 	ldhu	r2,-32710(gp)
 20087b8:	18ffffcc 	andi	r3,r3,65535
 20087bc:	10bfffcc 	andi	r2,r2,65535
 20087c0:	1880021e 	bne	r3,r2,20087cc <EmptyUart+0x28>
	{
		return 1;
 20087c4:	00800044 	movi	r2,1
 20087c8:	00000106 	br	20087d0 <EmptyUart+0x2c>
	}
	return 0;
 20087cc:	0005883a 	mov	r2,zero
}
 20087d0:	e037883a 	mov	sp,fp
 20087d4:	df000017 	ldw	fp,0(sp)
 20087d8:	dec00104 	addi	sp,sp,4
 20087dc:	f800283a 	ret

020087e0 <GetCUart>:



unsigned char GetCUart(void)
{
 20087e0:	defffe04 	addi	sp,sp,-8
 20087e4:	df000115 	stw	fp,4(sp)
 20087e8:	df000104 	addi	fp,sp,4
	unsigned char rxChar;

	/* buffer is empty */
	rxChar = rx_buffer[RxTail];
 20087ec:	d0a00e8b 	ldhu	r2,-32710(gp)
 20087f0:	10ffffcc 	andi	r3,r2,65535
 20087f4:	00800034 	movhi	r2,0
 20087f8:	10855304 	addi	r2,r2,5452
 20087fc:	10c5883a 	add	r2,r2,r3
 2008800:	10800003 	ldbu	r2,0(r2)
 2008804:	e0bfff05 	stb	r2,-4(fp)

	if (++RxTail > (RX_BUFFER_SIZE - 1))
 2008808:	d0a00e8b 	ldhu	r2,-32710(gp)
 200880c:	10800044 	addi	r2,r2,1
 2008810:	d0a00e8d 	sth	r2,-32710(gp)
 2008814:	d0a00e8b 	ldhu	r2,-32710(gp)
 2008818:	10bfffcc 	andi	r2,r2,65535
 200881c:	10810030 	cmpltui	r2,r2,1024
 2008820:	1000011e 	bne	r2,zero,2008828 <GetCUart+0x48>
	{
		RxTail = 0;
 2008824:	d0200e8d 	sth	zero,-32710(gp)
	}

	return rxChar;
 2008828:	e0bfff03 	ldbu	r2,-4(fp)
}
 200882c:	e037883a 	mov	sp,fp
 2008830:	df000017 	ldw	fp,0(sp)
 2008834:	dec00104 	addi	sp,sp,4
 2008838:	f800283a 	ret

0200883c <PutStrUart>:



unsigned char PutStrUart(char *str)
{
 200883c:	defffc04 	addi	sp,sp,-16
 2008840:	dfc00315 	stw	ra,12(sp)
 2008844:	df000215 	stw	fp,8(sp)
 2008848:	df000204 	addi	fp,sp,8
 200884c:	e13fff15 	stw	r4,-4(fp)
	for(int i = 0; i < strlen(str); ++i)
 2008850:	e03ffe15 	stw	zero,-8(fp)
 2008854:	00000a06 	br	2008880 <PutStrUart+0x44>
	{
		PutCUart(str[i]);
 2008858:	e0bffe17 	ldw	r2,-8(fp)
 200885c:	e0ffff17 	ldw	r3,-4(fp)
 2008860:	1885883a 	add	r2,r3,r2
 2008864:	10800003 	ldbu	r2,0(r2)
 2008868:	10803fcc 	andi	r2,r2,255
 200886c:	1009883a 	mov	r4,r2
 2008870:	20088ac0 	call	20088ac <PutCUart>



unsigned char PutStrUart(char *str)
{
	for(int i = 0; i < strlen(str); ++i)
 2008874:	e0bffe17 	ldw	r2,-8(fp)
 2008878:	10800044 	addi	r2,r2,1
 200887c:	e0bffe15 	stw	r2,-8(fp)
 2008880:	e13fff17 	ldw	r4,-4(fp)
 2008884:	2008c580 	call	2008c58 <strlen>
 2008888:	1007883a 	mov	r3,r2
 200888c:	e0bffe17 	ldw	r2,-8(fp)
 2008890:	10fff136 	bltu	r2,r3,2008858 <__alt_mem_epcs_flash_controller+0xffff7858>
	{
		PutCUart(str[i]);
	}
	return 0;
 2008894:	0005883a 	mov	r2,zero
}
 2008898:	e037883a 	mov	sp,fp
 200889c:	dfc00117 	ldw	ra,4(sp)
 20088a0:	df000017 	ldw	fp,0(sp)
 20088a4:	dec00204 	addi	sp,sp,8
 20088a8:	f800283a 	ret

020088ac <PutCUart>:



unsigned char PutCUart(unsigned char in_char)
{
 20088ac:	defffc04 	addi	sp,sp,-16
 20088b0:	df000315 	stw	fp,12(sp)
 20088b4:	df000304 	addi	fp,sp,12
 20088b8:	2005883a 	mov	r2,r4
 20088bc:	e0bfff05 	stb	r2,-4(fp)
	unsigned short size;
	unsigned int z = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
 20088c0:	00808074 	movhi	r2,513
 20088c4:	10880204 	addi	r2,r2,8200
 20088c8:	10800037 	ldwio	r2,0(r2)
 20088cc:	1080100c 	andi	r2,r2,64
 20088d0:	e0bffe15 	stw	r2,-8(fp)

	if ((TxHead == TxTail) && z)
 20088d4:	d0e00d0b 	ldhu	r3,-32716(gp)
 20088d8:	d0a00d8b 	ldhu	r2,-32714(gp)
 20088dc:	18ffffcc 	andi	r3,r3,65535
 20088e0:	10bfffcc 	andi	r2,r2,65535
 20088e4:	1880071e 	bne	r3,r2,2008904 <PutCUart+0x58>
 20088e8:	e0bffe17 	ldw	r2,-8(fp)
 20088ec:	10000526 	beq	r2,zero,2008904 <PutCUart+0x58>
	{
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, in_char);
 20088f0:	e0ffff03 	ldbu	r3,-4(fp)
 20088f4:	00808074 	movhi	r2,513
 20088f8:	10880104 	addi	r2,r2,8196
 20088fc:	10c00035 	stwio	r3,0(r2)
 2008900:	00002c06 	br	20089b4 <PutCUart+0x108>
	}
	else
	{
		if (TxHead >= TxTail)
 2008904:	d0e00d0b 	ldhu	r3,-32716(gp)
 2008908:	d0a00d8b 	ldhu	r2,-32714(gp)
 200890c:	18ffffcc 	andi	r3,r3,65535
 2008910:	10bfffcc 	andi	r2,r2,65535
 2008914:	18800536 	bltu	r3,r2,200892c <PutCUart+0x80>
		{
			size = TxHead - TxTail;
 2008918:	d0e00d0b 	ldhu	r3,-32716(gp)
 200891c:	d0a00d8b 	ldhu	r2,-32714(gp)
 2008920:	1885c83a 	sub	r2,r3,r2
 2008924:	e0bffd0d 	sth	r2,-12(fp)
 2008928:	00000506 	br	2008940 <PutCUart+0x94>
		}

		else
		{
			size = ((TX_BUFFER_SIZE - 1) - TxTail) + TxHead;
 200892c:	d0e00d0b 	ldhu	r3,-32716(gp)
 2008930:	d0a00d8b 	ldhu	r2,-32714(gp)
 2008934:	1885c83a 	sub	r2,r3,r2
 2008938:	1080ffc4 	addi	r2,r2,1023
 200893c:	e0bffd0d 	sth	r2,-12(fp)
		}

		if (size > (TX_BUFFER_SIZE - 3))
 2008940:	e0bffd0b 	ldhu	r2,-12(fp)
 2008944:	1080ffb0 	cmpltui	r2,r2,1022
 2008948:	1000021e 	bne	r2,zero,2008954 <PutCUart+0xa8>
		{
			return (-1);
 200894c:	00bfffc4 	movi	r2,-1
 2008950:	00001906 	br	20089b8 <PutCUart+0x10c>
		}

		tx_buffer[TxHead] = in_char;
 2008954:	d0a00d0b 	ldhu	r2,-32716(gp)
 2008958:	10ffffcc 	andi	r3,r2,65535
 200895c:	00800034 	movhi	r2,0
 2008960:	10865304 	addi	r2,r2,6476
 2008964:	10c5883a 	add	r2,r2,r3
 2008968:	e0ffff03 	ldbu	r3,-4(fp)
 200896c:	10c00005 	stb	r3,0(r2)

		if (++TxHead > (TX_BUFFER_SIZE - 1))
 2008970:	d0a00d0b 	ldhu	r2,-32716(gp)
 2008974:	10800044 	addi	r2,r2,1
 2008978:	d0a00d0d 	sth	r2,-32716(gp)
 200897c:	d0a00d0b 	ldhu	r2,-32716(gp)
 2008980:	10bfffcc 	andi	r2,r2,65535
 2008984:	10810030 	cmpltui	r2,r2,1024
 2008988:	1000011e 	bne	r2,zero,2008990 <PutCUart+0xe4>
		{
			TxHead = 0;
 200898c:	d0200d0d 	sth	zero,-32716(gp)
		}

		z = IORD_ALTERA_AVALON_UART_CONTROL(UART_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2008990:	00808074 	movhi	r2,513
 2008994:	10880304 	addi	r2,r2,8204
 2008998:	10800037 	ldwio	r2,0(r2)
 200899c:	10801014 	ori	r2,r2,64
 20089a0:	e0bffe15 	stw	r2,-8(fp)
		IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, z);
 20089a4:	e0fffe17 	ldw	r3,-8(fp)
 20089a8:	00808074 	movhi	r2,513
 20089ac:	10880304 	addi	r2,r2,8204
 20089b0:	10c00035 	stwio	r3,0(r2)
	}
	return(1);
 20089b4:	00800044 	movi	r2,1
}
 20089b8:	e037883a 	mov	sp,fp
 20089bc:	df000017 	ldw	fp,0(sp)
 20089c0:	dec00104 	addi	sp,sp,4
 20089c4:	f800283a 	ret

020089c8 <__divsi3>:
 20089c8:	20001b16 	blt	r4,zero,2008a38 <__divsi3+0x70>
 20089cc:	000f883a 	mov	r7,zero
 20089d0:	28001616 	blt	r5,zero,2008a2c <__divsi3+0x64>
 20089d4:	200d883a 	mov	r6,r4
 20089d8:	29001a2e 	bgeu	r5,r4,2008a44 <__divsi3+0x7c>
 20089dc:	00800804 	movi	r2,32
 20089e0:	00c00044 	movi	r3,1
 20089e4:	00000106 	br	20089ec <__divsi3+0x24>
 20089e8:	10000d26 	beq	r2,zero,2008a20 <__divsi3+0x58>
 20089ec:	294b883a 	add	r5,r5,r5
 20089f0:	10bfffc4 	addi	r2,r2,-1
 20089f4:	18c7883a 	add	r3,r3,r3
 20089f8:	293ffb36 	bltu	r5,r4,20089e8 <__alt_mem_epcs_flash_controller+0xffff79e8>
 20089fc:	0005883a 	mov	r2,zero
 2008a00:	18000726 	beq	r3,zero,2008a20 <__divsi3+0x58>
 2008a04:	0005883a 	mov	r2,zero
 2008a08:	31400236 	bltu	r6,r5,2008a14 <__divsi3+0x4c>
 2008a0c:	314dc83a 	sub	r6,r6,r5
 2008a10:	10c4b03a 	or	r2,r2,r3
 2008a14:	1806d07a 	srli	r3,r3,1
 2008a18:	280ad07a 	srli	r5,r5,1
 2008a1c:	183ffa1e 	bne	r3,zero,2008a08 <__alt_mem_epcs_flash_controller+0xffff7a08>
 2008a20:	38000126 	beq	r7,zero,2008a28 <__divsi3+0x60>
 2008a24:	0085c83a 	sub	r2,zero,r2
 2008a28:	f800283a 	ret
 2008a2c:	014bc83a 	sub	r5,zero,r5
 2008a30:	39c0005c 	xori	r7,r7,1
 2008a34:	003fe706 	br	20089d4 <__alt_mem_epcs_flash_controller+0xffff79d4>
 2008a38:	0109c83a 	sub	r4,zero,r4
 2008a3c:	01c00044 	movi	r7,1
 2008a40:	003fe306 	br	20089d0 <__alt_mem_epcs_flash_controller+0xffff79d0>
 2008a44:	00c00044 	movi	r3,1
 2008a48:	003fee06 	br	2008a04 <__alt_mem_epcs_flash_controller+0xffff7a04>

02008a4c <__modsi3>:
 2008a4c:	20001716 	blt	r4,zero,2008aac <__modsi3+0x60>
 2008a50:	000f883a 	mov	r7,zero
 2008a54:	2005883a 	mov	r2,r4
 2008a58:	28001216 	blt	r5,zero,2008aa4 <__modsi3+0x58>
 2008a5c:	2900162e 	bgeu	r5,r4,2008ab8 <__modsi3+0x6c>
 2008a60:	01800804 	movi	r6,32
 2008a64:	00c00044 	movi	r3,1
 2008a68:	00000106 	br	2008a70 <__modsi3+0x24>
 2008a6c:	30000a26 	beq	r6,zero,2008a98 <__modsi3+0x4c>
 2008a70:	294b883a 	add	r5,r5,r5
 2008a74:	31bfffc4 	addi	r6,r6,-1
 2008a78:	18c7883a 	add	r3,r3,r3
 2008a7c:	293ffb36 	bltu	r5,r4,2008a6c <__alt_mem_epcs_flash_controller+0xffff7a6c>
 2008a80:	18000526 	beq	r3,zero,2008a98 <__modsi3+0x4c>
 2008a84:	1806d07a 	srli	r3,r3,1
 2008a88:	11400136 	bltu	r2,r5,2008a90 <__modsi3+0x44>
 2008a8c:	1145c83a 	sub	r2,r2,r5
 2008a90:	280ad07a 	srli	r5,r5,1
 2008a94:	183ffb1e 	bne	r3,zero,2008a84 <__alt_mem_epcs_flash_controller+0xffff7a84>
 2008a98:	38000126 	beq	r7,zero,2008aa0 <__modsi3+0x54>
 2008a9c:	0085c83a 	sub	r2,zero,r2
 2008aa0:	f800283a 	ret
 2008aa4:	014bc83a 	sub	r5,zero,r5
 2008aa8:	003fec06 	br	2008a5c <__alt_mem_epcs_flash_controller+0xffff7a5c>
 2008aac:	0109c83a 	sub	r4,zero,r4
 2008ab0:	01c00044 	movi	r7,1
 2008ab4:	003fe706 	br	2008a54 <__alt_mem_epcs_flash_controller+0xffff7a54>
 2008ab8:	00c00044 	movi	r3,1
 2008abc:	003ff106 	br	2008a84 <__alt_mem_epcs_flash_controller+0xffff7a84>

02008ac0 <__udivsi3>:
 2008ac0:	200d883a 	mov	r6,r4
 2008ac4:	2900152e 	bgeu	r5,r4,2008b1c <__udivsi3+0x5c>
 2008ac8:	28001416 	blt	r5,zero,2008b1c <__udivsi3+0x5c>
 2008acc:	00800804 	movi	r2,32
 2008ad0:	00c00044 	movi	r3,1
 2008ad4:	00000206 	br	2008ae0 <__udivsi3+0x20>
 2008ad8:	10000e26 	beq	r2,zero,2008b14 <__udivsi3+0x54>
 2008adc:	28000516 	blt	r5,zero,2008af4 <__udivsi3+0x34>
 2008ae0:	294b883a 	add	r5,r5,r5
 2008ae4:	10bfffc4 	addi	r2,r2,-1
 2008ae8:	18c7883a 	add	r3,r3,r3
 2008aec:	293ffa36 	bltu	r5,r4,2008ad8 <__alt_mem_epcs_flash_controller+0xffff7ad8>
 2008af0:	18000826 	beq	r3,zero,2008b14 <__udivsi3+0x54>
 2008af4:	0005883a 	mov	r2,zero
 2008af8:	31400236 	bltu	r6,r5,2008b04 <__udivsi3+0x44>
 2008afc:	314dc83a 	sub	r6,r6,r5
 2008b00:	10c4b03a 	or	r2,r2,r3
 2008b04:	1806d07a 	srli	r3,r3,1
 2008b08:	280ad07a 	srli	r5,r5,1
 2008b0c:	183ffa1e 	bne	r3,zero,2008af8 <__alt_mem_epcs_flash_controller+0xffff7af8>
 2008b10:	f800283a 	ret
 2008b14:	0005883a 	mov	r2,zero
 2008b18:	f800283a 	ret
 2008b1c:	00c00044 	movi	r3,1
 2008b20:	003ff406 	br	2008af4 <__alt_mem_epcs_flash_controller+0xffff7af4>

02008b24 <__umodsi3>:
 2008b24:	2005883a 	mov	r2,r4
 2008b28:	2900122e 	bgeu	r5,r4,2008b74 <__umodsi3+0x50>
 2008b2c:	28001116 	blt	r5,zero,2008b74 <__umodsi3+0x50>
 2008b30:	01800804 	movi	r6,32
 2008b34:	00c00044 	movi	r3,1
 2008b38:	00000206 	br	2008b44 <__umodsi3+0x20>
 2008b3c:	30000c26 	beq	r6,zero,2008b70 <__umodsi3+0x4c>
 2008b40:	28000516 	blt	r5,zero,2008b58 <__umodsi3+0x34>
 2008b44:	294b883a 	add	r5,r5,r5
 2008b48:	31bfffc4 	addi	r6,r6,-1
 2008b4c:	18c7883a 	add	r3,r3,r3
 2008b50:	293ffa36 	bltu	r5,r4,2008b3c <__alt_mem_epcs_flash_controller+0xffff7b3c>
 2008b54:	18000626 	beq	r3,zero,2008b70 <__umodsi3+0x4c>
 2008b58:	1806d07a 	srli	r3,r3,1
 2008b5c:	11400136 	bltu	r2,r5,2008b64 <__umodsi3+0x40>
 2008b60:	1145c83a 	sub	r2,r2,r5
 2008b64:	280ad07a 	srli	r5,r5,1
 2008b68:	183ffb1e 	bne	r3,zero,2008b58 <__alt_mem_epcs_flash_controller+0xffff7b58>
 2008b6c:	f800283a 	ret
 2008b70:	f800283a 	ret
 2008b74:	00c00044 	movi	r3,1
 2008b78:	003ff706 	br	2008b58 <__alt_mem_epcs_flash_controller+0xffff7b58>

02008b7c <_sprintf_r>:
 2008b7c:	defff704 	addi	sp,sp,-36
 2008b80:	dfc00715 	stw	ra,28(sp)
 2008b84:	d9c00815 	stw	r7,32(sp)
 2008b88:	00808204 	movi	r2,520
 2008b8c:	d880000d 	sth	r2,0(sp)
 2008b90:	00a00034 	movhi	r2,32768
 2008b94:	10bfffc4 	addi	r2,r2,-1
 2008b98:	d8800515 	stw	r2,20(sp)
 2008b9c:	d8800315 	stw	r2,12(sp)
 2008ba0:	00bfffc4 	movi	r2,-1
 2008ba4:	d880008d 	sth	r2,2(sp)
 2008ba8:	00808074 	movhi	r2,513
 2008bac:	d9400415 	stw	r5,16(sp)
 2008bb0:	d9400215 	stw	r5,8(sp)
 2008bb4:	10a48a04 	addi	r2,r2,-28120
 2008bb8:	d9c00804 	addi	r7,sp,32
 2008bbc:	d80b883a 	mov	r5,sp
 2008bc0:	d8800115 	stw	r2,4(sp)
 2008bc4:	d8000615 	stw	zero,24(sp)
 2008bc8:	2008ce00 	call	2008ce0 <___svfprintf_internal_r>
 2008bcc:	d8c00417 	ldw	r3,16(sp)
 2008bd0:	18000005 	stb	zero,0(r3)
 2008bd4:	dfc00717 	ldw	ra,28(sp)
 2008bd8:	dec00904 	addi	sp,sp,36
 2008bdc:	f800283a 	ret

02008be0 <sprintf>:
 2008be0:	defff604 	addi	sp,sp,-40
 2008be4:	dfc00715 	stw	ra,28(sp)
 2008be8:	d9800815 	stw	r6,32(sp)
 2008bec:	d9c00915 	stw	r7,36(sp)
 2008bf0:	00808204 	movi	r2,520
 2008bf4:	d880000d 	sth	r2,0(sp)
 2008bf8:	00a00034 	movhi	r2,32768
 2008bfc:	10bfffc4 	addi	r2,r2,-1
 2008c00:	d8800515 	stw	r2,20(sp)
 2008c04:	d8800315 	stw	r2,12(sp)
 2008c08:	00bfffc4 	movi	r2,-1
 2008c0c:	d880008d 	sth	r2,2(sp)
 2008c10:	00808074 	movhi	r2,513
 2008c14:	10a48a04 	addi	r2,r2,-28120
 2008c18:	d8800115 	stw	r2,4(sp)
 2008c1c:	00800034 	movhi	r2,0
 2008c20:	10853d04 	addi	r2,r2,5364
 2008c24:	d9000415 	stw	r4,16(sp)
 2008c28:	d9000215 	stw	r4,8(sp)
 2008c2c:	11000017 	ldw	r4,0(r2)
 2008c30:	280d883a 	mov	r6,r5
 2008c34:	d9c00804 	addi	r7,sp,32
 2008c38:	d80b883a 	mov	r5,sp
 2008c3c:	d8000615 	stw	zero,24(sp)
 2008c40:	2008ce00 	call	2008ce0 <___svfprintf_internal_r>
 2008c44:	d8c00417 	ldw	r3,16(sp)
 2008c48:	18000005 	stb	zero,0(r3)
 2008c4c:	dfc00717 	ldw	ra,28(sp)
 2008c50:	dec00a04 	addi	sp,sp,40
 2008c54:	f800283a 	ret

02008c58 <strlen>:
 2008c58:	2005883a 	mov	r2,r4
 2008c5c:	10c00007 	ldb	r3,0(r2)
 2008c60:	18000226 	beq	r3,zero,2008c6c <strlen+0x14>
 2008c64:	10800044 	addi	r2,r2,1
 2008c68:	003ffc06 	br	2008c5c <__alt_mem_epcs_flash_controller+0xffff7c5c>
 2008c6c:	1105c83a 	sub	r2,r2,r4
 2008c70:	f800283a 	ret

02008c74 <print_repeat>:
 2008c74:	defffb04 	addi	sp,sp,-20
 2008c78:	dc800315 	stw	r18,12(sp)
 2008c7c:	dc400215 	stw	r17,8(sp)
 2008c80:	dc000115 	stw	r16,4(sp)
 2008c84:	dfc00415 	stw	ra,16(sp)
 2008c88:	2025883a 	mov	r18,r4
 2008c8c:	2823883a 	mov	r17,r5
 2008c90:	d9800005 	stb	r6,0(sp)
 2008c94:	3821883a 	mov	r16,r7
 2008c98:	04000a0e 	bge	zero,r16,2008cc4 <print_repeat+0x50>
 2008c9c:	88800117 	ldw	r2,4(r17)
 2008ca0:	01c00044 	movi	r7,1
 2008ca4:	d80d883a 	mov	r6,sp
 2008ca8:	880b883a 	mov	r5,r17
 2008cac:	9009883a 	mov	r4,r18
 2008cb0:	103ee83a 	callr	r2
 2008cb4:	843fffc4 	addi	r16,r16,-1
 2008cb8:	103ff726 	beq	r2,zero,2008c98 <__alt_mem_epcs_flash_controller+0xffff7c98>
 2008cbc:	00bfffc4 	movi	r2,-1
 2008cc0:	00000106 	br	2008cc8 <print_repeat+0x54>
 2008cc4:	0005883a 	mov	r2,zero
 2008cc8:	dfc00417 	ldw	ra,16(sp)
 2008ccc:	dc800317 	ldw	r18,12(sp)
 2008cd0:	dc400217 	ldw	r17,8(sp)
 2008cd4:	dc000117 	ldw	r16,4(sp)
 2008cd8:	dec00504 	addi	sp,sp,20
 2008cdc:	f800283a 	ret

02008ce0 <___svfprintf_internal_r>:
 2008ce0:	deffe504 	addi	sp,sp,-108
 2008ce4:	d8c00804 	addi	r3,sp,32
 2008ce8:	ddc01815 	stw	r23,96(sp)
 2008cec:	dd801715 	stw	r22,92(sp)
 2008cf0:	dd401615 	stw	r21,88(sp)
 2008cf4:	dd001515 	stw	r20,84(sp)
 2008cf8:	dcc01415 	stw	r19,80(sp)
 2008cfc:	dc801315 	stw	r18,76(sp)
 2008d00:	dc401215 	stw	r17,72(sp)
 2008d04:	dc001115 	stw	r16,68(sp)
 2008d08:	dfc01a15 	stw	ra,104(sp)
 2008d0c:	df001915 	stw	fp,100(sp)
 2008d10:	2029883a 	mov	r20,r4
 2008d14:	2823883a 	mov	r17,r5
 2008d18:	382d883a 	mov	r22,r7
 2008d1c:	d9800f15 	stw	r6,60(sp)
 2008d20:	0021883a 	mov	r16,zero
 2008d24:	d8000e15 	stw	zero,56(sp)
 2008d28:	d8000a15 	stw	zero,40(sp)
 2008d2c:	002b883a 	mov	r21,zero
 2008d30:	0027883a 	mov	r19,zero
 2008d34:	0025883a 	mov	r18,zero
 2008d38:	d8000c15 	stw	zero,48(sp)
 2008d3c:	d8000b15 	stw	zero,44(sp)
 2008d40:	002f883a 	mov	r23,zero
 2008d44:	d8c00915 	stw	r3,36(sp)
 2008d48:	d8c00f17 	ldw	r3,60(sp)
 2008d4c:	19000003 	ldbu	r4,0(r3)
 2008d50:	20803fcc 	andi	r2,r4,255
 2008d54:	1080201c 	xori	r2,r2,128
 2008d58:	10bfe004 	addi	r2,r2,-128
 2008d5c:	10011e26 	beq	r2,zero,20091d8 <___svfprintf_internal_r+0x4f8>
 2008d60:	00c00044 	movi	r3,1
 2008d64:	b8c01426 	beq	r23,r3,2008db8 <___svfprintf_internal_r+0xd8>
 2008d68:	1dc00216 	blt	r3,r23,2008d74 <___svfprintf_internal_r+0x94>
 2008d6c:	b8000626 	beq	r23,zero,2008d88 <___svfprintf_internal_r+0xa8>
 2008d70:	00011506 	br	20091c8 <___svfprintf_internal_r+0x4e8>
 2008d74:	01400084 	movi	r5,2
 2008d78:	b9401d26 	beq	r23,r5,2008df0 <___svfprintf_internal_r+0x110>
 2008d7c:	014000c4 	movi	r5,3
 2008d80:	b9402b26 	beq	r23,r5,2008e30 <___svfprintf_internal_r+0x150>
 2008d84:	00011006 	br	20091c8 <___svfprintf_internal_r+0x4e8>
 2008d88:	01400944 	movi	r5,37
 2008d8c:	1140fc26 	beq	r2,r5,2009180 <___svfprintf_internal_r+0x4a0>
 2008d90:	88800117 	ldw	r2,4(r17)
 2008d94:	d9000005 	stb	r4,0(sp)
 2008d98:	01c00044 	movi	r7,1
 2008d9c:	d80d883a 	mov	r6,sp
 2008da0:	880b883a 	mov	r5,r17
 2008da4:	a009883a 	mov	r4,r20
 2008da8:	103ee83a 	callr	r2
 2008dac:	1000d81e 	bne	r2,zero,2009110 <___svfprintf_internal_r+0x430>
 2008db0:	84000044 	addi	r16,r16,1
 2008db4:	00010406 	br	20091c8 <___svfprintf_internal_r+0x4e8>
 2008db8:	01400c04 	movi	r5,48
 2008dbc:	1140fa26 	beq	r2,r5,20091a8 <___svfprintf_internal_r+0x4c8>
 2008dc0:	01400944 	movi	r5,37
 2008dc4:	11400a1e 	bne	r2,r5,2008df0 <___svfprintf_internal_r+0x110>
 2008dc8:	d8800005 	stb	r2,0(sp)
 2008dcc:	88800117 	ldw	r2,4(r17)
 2008dd0:	b80f883a 	mov	r7,r23
 2008dd4:	d80d883a 	mov	r6,sp
 2008dd8:	880b883a 	mov	r5,r17
 2008ddc:	a009883a 	mov	r4,r20
 2008de0:	103ee83a 	callr	r2
 2008de4:	1000ca1e 	bne	r2,zero,2009110 <___svfprintf_internal_r+0x430>
 2008de8:	84000044 	addi	r16,r16,1
 2008dec:	0000f506 	br	20091c4 <___svfprintf_internal_r+0x4e4>
 2008df0:	25fff404 	addi	r23,r4,-48
 2008df4:	bdc03fcc 	andi	r23,r23,255
 2008df8:	00c00244 	movi	r3,9
 2008dfc:	1dc00936 	bltu	r3,r23,2008e24 <___svfprintf_internal_r+0x144>
 2008e00:	00bfffc4 	movi	r2,-1
 2008e04:	90800426 	beq	r18,r2,2008e18 <___svfprintf_internal_r+0x138>
 2008e08:	01400284 	movi	r5,10
 2008e0c:	9009883a 	mov	r4,r18
 2008e10:	20093300 	call	2009330 <__mulsi3>
 2008e14:	00000106 	br	2008e1c <___svfprintf_internal_r+0x13c>
 2008e18:	0005883a 	mov	r2,zero
 2008e1c:	b8a5883a 	add	r18,r23,r2
 2008e20:	0000e206 	br	20091ac <___svfprintf_internal_r+0x4cc>
 2008e24:	01400b84 	movi	r5,46
 2008e28:	1140e426 	beq	r2,r5,20091bc <___svfprintf_internal_r+0x4dc>
 2008e2c:	05c00084 	movi	r23,2
 2008e30:	213ff404 	addi	r4,r4,-48
 2008e34:	27003fcc 	andi	fp,r4,255
 2008e38:	00c00244 	movi	r3,9
 2008e3c:	1f000936 	bltu	r3,fp,2008e64 <___svfprintf_internal_r+0x184>
 2008e40:	00bfffc4 	movi	r2,-1
 2008e44:	98800426 	beq	r19,r2,2008e58 <___svfprintf_internal_r+0x178>
 2008e48:	01400284 	movi	r5,10
 2008e4c:	9809883a 	mov	r4,r19
 2008e50:	20093300 	call	2009330 <__mulsi3>
 2008e54:	00000106 	br	2008e5c <___svfprintf_internal_r+0x17c>
 2008e58:	0005883a 	mov	r2,zero
 2008e5c:	e0a7883a 	add	r19,fp,r2
 2008e60:	0000d906 	br	20091c8 <___svfprintf_internal_r+0x4e8>
 2008e64:	00c01b04 	movi	r3,108
 2008e68:	10c0d226 	beq	r2,r3,20091b4 <___svfprintf_internal_r+0x4d4>
 2008e6c:	013fffc4 	movi	r4,-1
 2008e70:	99000226 	beq	r19,r4,2008e7c <___svfprintf_internal_r+0x19c>
 2008e74:	d8000b15 	stw	zero,44(sp)
 2008e78:	00000106 	br	2008e80 <___svfprintf_internal_r+0x1a0>
 2008e7c:	04c00044 	movi	r19,1
 2008e80:	01001a44 	movi	r4,105
 2008e84:	11001626 	beq	r2,r4,2008ee0 <___svfprintf_internal_r+0x200>
 2008e88:	20800916 	blt	r4,r2,2008eb0 <___svfprintf_internal_r+0x1d0>
 2008e8c:	010018c4 	movi	r4,99
 2008e90:	11008826 	beq	r2,r4,20090b4 <___svfprintf_internal_r+0x3d4>
 2008e94:	01001904 	movi	r4,100
 2008e98:	11001126 	beq	r2,r4,2008ee0 <___svfprintf_internal_r+0x200>
 2008e9c:	01001604 	movi	r4,88
 2008ea0:	1100c81e 	bne	r2,r4,20091c4 <___svfprintf_internal_r+0x4e4>
 2008ea4:	00c00044 	movi	r3,1
 2008ea8:	d8c00e15 	stw	r3,56(sp)
 2008eac:	00001506 	br	2008f04 <___svfprintf_internal_r+0x224>
 2008eb0:	01001cc4 	movi	r4,115
 2008eb4:	11009826 	beq	r2,r4,2009118 <___svfprintf_internal_r+0x438>
 2008eb8:	20800416 	blt	r4,r2,2008ecc <___svfprintf_internal_r+0x1ec>
 2008ebc:	01001bc4 	movi	r4,111
 2008ec0:	1100c01e 	bne	r2,r4,20091c4 <___svfprintf_internal_r+0x4e4>
 2008ec4:	05400204 	movi	r21,8
 2008ec8:	00000f06 	br	2008f08 <___svfprintf_internal_r+0x228>
 2008ecc:	01001d44 	movi	r4,117
 2008ed0:	11000d26 	beq	r2,r4,2008f08 <___svfprintf_internal_r+0x228>
 2008ed4:	01001e04 	movi	r4,120
 2008ed8:	11000a26 	beq	r2,r4,2008f04 <___svfprintf_internal_r+0x224>
 2008edc:	0000b906 	br	20091c4 <___svfprintf_internal_r+0x4e4>
 2008ee0:	d8c00a17 	ldw	r3,40(sp)
 2008ee4:	b7000104 	addi	fp,r22,4
 2008ee8:	18000726 	beq	r3,zero,2008f08 <___svfprintf_internal_r+0x228>
 2008eec:	df000d15 	stw	fp,52(sp)
 2008ef0:	b5c00017 	ldw	r23,0(r22)
 2008ef4:	b800080e 	bge	r23,zero,2008f18 <___svfprintf_internal_r+0x238>
 2008ef8:	05efc83a 	sub	r23,zero,r23
 2008efc:	02400044 	movi	r9,1
 2008f00:	00000606 	br	2008f1c <___svfprintf_internal_r+0x23c>
 2008f04:	05400404 	movi	r21,16
 2008f08:	b0c00104 	addi	r3,r22,4
 2008f0c:	d8c00d15 	stw	r3,52(sp)
 2008f10:	b5c00017 	ldw	r23,0(r22)
 2008f14:	d8000a15 	stw	zero,40(sp)
 2008f18:	0013883a 	mov	r9,zero
 2008f1c:	d839883a 	mov	fp,sp
 2008f20:	b8001726 	beq	r23,zero,2008f80 <___svfprintf_internal_r+0x2a0>
 2008f24:	a80b883a 	mov	r5,r21
 2008f28:	b809883a 	mov	r4,r23
 2008f2c:	da401015 	stw	r9,64(sp)
 2008f30:	2008ac00 	call	2008ac0 <__udivsi3>
 2008f34:	a80b883a 	mov	r5,r21
 2008f38:	1009883a 	mov	r4,r2
 2008f3c:	102d883a 	mov	r22,r2
 2008f40:	20093300 	call	2009330 <__mulsi3>
 2008f44:	b885c83a 	sub	r2,r23,r2
 2008f48:	00c00244 	movi	r3,9
 2008f4c:	da401017 	ldw	r9,64(sp)
 2008f50:	18800216 	blt	r3,r2,2008f5c <___svfprintf_internal_r+0x27c>
 2008f54:	10800c04 	addi	r2,r2,48
 2008f58:	00000506 	br	2008f70 <___svfprintf_internal_r+0x290>
 2008f5c:	d8c00e17 	ldw	r3,56(sp)
 2008f60:	18000226 	beq	r3,zero,2008f6c <___svfprintf_internal_r+0x28c>
 2008f64:	10800dc4 	addi	r2,r2,55
 2008f68:	00000106 	br	2008f70 <___svfprintf_internal_r+0x290>
 2008f6c:	108015c4 	addi	r2,r2,87
 2008f70:	e0800005 	stb	r2,0(fp)
 2008f74:	b02f883a 	mov	r23,r22
 2008f78:	e7000044 	addi	fp,fp,1
 2008f7c:	003fe806 	br	2008f20 <__alt_mem_epcs_flash_controller+0xffff7f20>
 2008f80:	e6efc83a 	sub	r23,fp,sp
 2008f84:	9dc5c83a 	sub	r2,r19,r23
 2008f88:	0080090e 	bge	zero,r2,2008fb0 <___svfprintf_internal_r+0x2d0>
 2008f8c:	e085883a 	add	r2,fp,r2
 2008f90:	01400c04 	movi	r5,48
 2008f94:	d8c00917 	ldw	r3,36(sp)
 2008f98:	e009883a 	mov	r4,fp
 2008f9c:	e0c0032e 	bgeu	fp,r3,2008fac <___svfprintf_internal_r+0x2cc>
 2008fa0:	e7000044 	addi	fp,fp,1
 2008fa4:	21400005 	stb	r5,0(r4)
 2008fa8:	e0bffa1e 	bne	fp,r2,2008f94 <__alt_mem_epcs_flash_controller+0xffff7f94>
 2008fac:	e6efc83a 	sub	r23,fp,sp
 2008fb0:	d8c00b17 	ldw	r3,44(sp)
 2008fb4:	4dd1883a 	add	r8,r9,r23
 2008fb8:	922dc83a 	sub	r22,r18,r8
 2008fbc:	18001626 	beq	r3,zero,2009018 <___svfprintf_internal_r+0x338>
 2008fc0:	48000a26 	beq	r9,zero,2008fec <___svfprintf_internal_r+0x30c>
 2008fc4:	00800b44 	movi	r2,45
 2008fc8:	d8800805 	stb	r2,32(sp)
 2008fcc:	88800117 	ldw	r2,4(r17)
 2008fd0:	01c00044 	movi	r7,1
 2008fd4:	d9800804 	addi	r6,sp,32
 2008fd8:	880b883a 	mov	r5,r17
 2008fdc:	a009883a 	mov	r4,r20
 2008fe0:	103ee83a 	callr	r2
 2008fe4:	10004a1e 	bne	r2,zero,2009110 <___svfprintf_internal_r+0x430>
 2008fe8:	84000044 	addi	r16,r16,1
 2008fec:	0580070e 	bge	zero,r22,200900c <___svfprintf_internal_r+0x32c>
 2008ff0:	b00f883a 	mov	r7,r22
 2008ff4:	01800c04 	movi	r6,48
 2008ff8:	880b883a 	mov	r5,r17
 2008ffc:	a009883a 	mov	r4,r20
 2009000:	2008c740 	call	2008c74 <print_repeat>
 2009004:	1000421e 	bne	r2,zero,2009110 <___svfprintf_internal_r+0x430>
 2009008:	85a1883a 	add	r16,r16,r22
 200900c:	e02d883a 	mov	r22,fp
 2009010:	bf2fc83a 	sub	r23,r23,fp
 2009014:	00002006 	br	2009098 <___svfprintf_internal_r+0x3b8>
 2009018:	0580090e 	bge	zero,r22,2009040 <___svfprintf_internal_r+0x360>
 200901c:	b00f883a 	mov	r7,r22
 2009020:	01800804 	movi	r6,32
 2009024:	880b883a 	mov	r5,r17
 2009028:	a009883a 	mov	r4,r20
 200902c:	da401015 	stw	r9,64(sp)
 2009030:	2008c740 	call	2008c74 <print_repeat>
 2009034:	da401017 	ldw	r9,64(sp)
 2009038:	1000351e 	bne	r2,zero,2009110 <___svfprintf_internal_r+0x430>
 200903c:	85a1883a 	add	r16,r16,r22
 2009040:	483ff226 	beq	r9,zero,200900c <__alt_mem_epcs_flash_controller+0xffff800c>
 2009044:	00800b44 	movi	r2,45
 2009048:	d8800805 	stb	r2,32(sp)
 200904c:	88800117 	ldw	r2,4(r17)
 2009050:	01c00044 	movi	r7,1
 2009054:	d9800804 	addi	r6,sp,32
 2009058:	880b883a 	mov	r5,r17
 200905c:	a009883a 	mov	r4,r20
 2009060:	103ee83a 	callr	r2
 2009064:	10002a1e 	bne	r2,zero,2009110 <___svfprintf_internal_r+0x430>
 2009068:	84000044 	addi	r16,r16,1
 200906c:	003fe706 	br	200900c <__alt_mem_epcs_flash_controller+0xffff800c>
 2009070:	b5bfffc4 	addi	r22,r22,-1
 2009074:	b0800003 	ldbu	r2,0(r22)
 2009078:	01c00044 	movi	r7,1
 200907c:	d9800804 	addi	r6,sp,32
 2009080:	d8800805 	stb	r2,32(sp)
 2009084:	88800117 	ldw	r2,4(r17)
 2009088:	880b883a 	mov	r5,r17
 200908c:	a009883a 	mov	r4,r20
 2009090:	103ee83a 	callr	r2
 2009094:	10001e1e 	bne	r2,zero,2009110 <___svfprintf_internal_r+0x430>
 2009098:	8585c83a 	sub	r2,r16,r22
 200909c:	b5c9883a 	add	r4,r22,r23
 20090a0:	e085883a 	add	r2,fp,r2
 20090a4:	013ff216 	blt	zero,r4,2009070 <__alt_mem_epcs_flash_controller+0xffff8070>
 20090a8:	1021883a 	mov	r16,r2
 20090ac:	dd800d17 	ldw	r22,52(sp)
 20090b0:	00004406 	br	20091c4 <___svfprintf_internal_r+0x4e4>
 20090b4:	00800044 	movi	r2,1
 20090b8:	1480080e 	bge	r2,r18,20090dc <___svfprintf_internal_r+0x3fc>
 20090bc:	95ffffc4 	addi	r23,r18,-1
 20090c0:	b80f883a 	mov	r7,r23
 20090c4:	01800804 	movi	r6,32
 20090c8:	880b883a 	mov	r5,r17
 20090cc:	a009883a 	mov	r4,r20
 20090d0:	2008c740 	call	2008c74 <print_repeat>
 20090d4:	10000e1e 	bne	r2,zero,2009110 <___svfprintf_internal_r+0x430>
 20090d8:	85e1883a 	add	r16,r16,r23
 20090dc:	b0800017 	ldw	r2,0(r22)
 20090e0:	01c00044 	movi	r7,1
 20090e4:	d80d883a 	mov	r6,sp
 20090e8:	d8800005 	stb	r2,0(sp)
 20090ec:	88800117 	ldw	r2,4(r17)
 20090f0:	880b883a 	mov	r5,r17
 20090f4:	a009883a 	mov	r4,r20
 20090f8:	b5c00104 	addi	r23,r22,4
 20090fc:	103ee83a 	callr	r2
 2009100:	1000031e 	bne	r2,zero,2009110 <___svfprintf_internal_r+0x430>
 2009104:	84000044 	addi	r16,r16,1
 2009108:	b82d883a 	mov	r22,r23
 200910c:	00002d06 	br	20091c4 <___svfprintf_internal_r+0x4e4>
 2009110:	00bfffc4 	movi	r2,-1
 2009114:	00003106 	br	20091dc <___svfprintf_internal_r+0x4fc>
 2009118:	b5c00017 	ldw	r23,0(r22)
 200911c:	b7000104 	addi	fp,r22,4
 2009120:	b809883a 	mov	r4,r23
 2009124:	2008c580 	call	2008c58 <strlen>
 2009128:	9091c83a 	sub	r8,r18,r2
 200912c:	102d883a 	mov	r22,r2
 2009130:	0200090e 	bge	zero,r8,2009158 <___svfprintf_internal_r+0x478>
 2009134:	400f883a 	mov	r7,r8
 2009138:	01800804 	movi	r6,32
 200913c:	880b883a 	mov	r5,r17
 2009140:	a009883a 	mov	r4,r20
 2009144:	da001015 	stw	r8,64(sp)
 2009148:	2008c740 	call	2008c74 <print_repeat>
 200914c:	da001017 	ldw	r8,64(sp)
 2009150:	103fef1e 	bne	r2,zero,2009110 <__alt_mem_epcs_flash_controller+0xffff8110>
 2009154:	8221883a 	add	r16,r16,r8
 2009158:	88800117 	ldw	r2,4(r17)
 200915c:	b00f883a 	mov	r7,r22
 2009160:	b80d883a 	mov	r6,r23
 2009164:	880b883a 	mov	r5,r17
 2009168:	a009883a 	mov	r4,r20
 200916c:	103ee83a 	callr	r2
 2009170:	103fe71e 	bne	r2,zero,2009110 <__alt_mem_epcs_flash_controller+0xffff8110>
 2009174:	85a1883a 	add	r16,r16,r22
 2009178:	e02d883a 	mov	r22,fp
 200917c:	00001106 	br	20091c4 <___svfprintf_internal_r+0x4e4>
 2009180:	00c00044 	movi	r3,1
 2009184:	04ffffc4 	movi	r19,-1
 2009188:	d8000e15 	stw	zero,56(sp)
 200918c:	d8c00a15 	stw	r3,40(sp)
 2009190:	05400284 	movi	r21,10
 2009194:	9825883a 	mov	r18,r19
 2009198:	d8000c15 	stw	zero,48(sp)
 200919c:	d8000b15 	stw	zero,44(sp)
 20091a0:	182f883a 	mov	r23,r3
 20091a4:	00000806 	br	20091c8 <___svfprintf_internal_r+0x4e8>
 20091a8:	ddc00b15 	stw	r23,44(sp)
 20091ac:	05c00084 	movi	r23,2
 20091b0:	00000506 	br	20091c8 <___svfprintf_internal_r+0x4e8>
 20091b4:	00c00044 	movi	r3,1
 20091b8:	d8c00c15 	stw	r3,48(sp)
 20091bc:	05c000c4 	movi	r23,3
 20091c0:	00000106 	br	20091c8 <___svfprintf_internal_r+0x4e8>
 20091c4:	002f883a 	mov	r23,zero
 20091c8:	d8c00f17 	ldw	r3,60(sp)
 20091cc:	18c00044 	addi	r3,r3,1
 20091d0:	d8c00f15 	stw	r3,60(sp)
 20091d4:	003edc06 	br	2008d48 <__alt_mem_epcs_flash_controller+0xffff7d48>
 20091d8:	8005883a 	mov	r2,r16
 20091dc:	dfc01a17 	ldw	ra,104(sp)
 20091e0:	df001917 	ldw	fp,100(sp)
 20091e4:	ddc01817 	ldw	r23,96(sp)
 20091e8:	dd801717 	ldw	r22,92(sp)
 20091ec:	dd401617 	ldw	r21,88(sp)
 20091f0:	dd001517 	ldw	r20,84(sp)
 20091f4:	dcc01417 	ldw	r19,80(sp)
 20091f8:	dc801317 	ldw	r18,76(sp)
 20091fc:	dc401217 	ldw	r17,72(sp)
 2009200:	dc001117 	ldw	r16,68(sp)
 2009204:	dec01b04 	addi	sp,sp,108
 2009208:	f800283a 	ret

0200920c <__vfprintf_internal_unused>:
 200920c:	00800034 	movhi	r2,0
 2009210:	10853d04 	addi	r2,r2,5364
 2009214:	300f883a 	mov	r7,r6
 2009218:	280d883a 	mov	r6,r5
 200921c:	200b883a 	mov	r5,r4
 2009220:	11000017 	ldw	r4,0(r2)
 2009224:	2008ce01 	jmpi	2008ce0 <___svfprintf_internal_r>

02009228 <__sfvwrite_small_str>:
 2009228:	2880000b 	ldhu	r2,0(r5)
 200922c:	10c0020c 	andi	r3,r2,8
 2009230:	18002026 	beq	r3,zero,20092b4 <__sfvwrite_small_str+0x8c>
 2009234:	28c0008f 	ldh	r3,2(r5)
 2009238:	defffd04 	addi	sp,sp,-12
 200923c:	dc000015 	stw	r16,0(sp)
 2009240:	dfc00215 	stw	ra,8(sp)
 2009244:	dc400115 	stw	r17,4(sp)
 2009248:	2821883a 	mov	r16,r5
 200924c:	1800150e 	bge	r3,zero,20092a4 <__sfvwrite_small_str+0x7c>
 2009250:	10c0800c 	andi	r3,r2,512
 2009254:	18001326 	beq	r3,zero,20092a4 <__sfvwrite_small_str+0x7c>
 2009258:	2c400517 	ldw	r17,20(r5)
 200925c:	89c0030e 	bge	r17,r7,200926c <__sfvwrite_small_str+0x44>
 2009260:	10c0200c 	andi	r3,r2,128
 2009264:	18000326 	beq	r3,zero,2009274 <__sfvwrite_small_str+0x4c>
 2009268:	00000e06 	br	20092a4 <__sfvwrite_small_str+0x7c>
 200926c:	3c40010e 	bge	r7,r17,2009274 <__sfvwrite_small_str+0x4c>
 2009270:	3823883a 	mov	r17,r7
 2009274:	81000417 	ldw	r4,16(r16)
 2009278:	300b883a 	mov	r5,r6
 200927c:	880d883a 	mov	r6,r17
 2009280:	20092d00 	call	20092d0 <memmove>
 2009284:	80800517 	ldw	r2,20(r16)
 2009288:	1445c83a 	sub	r2,r2,r17
 200928c:	80800515 	stw	r2,20(r16)
 2009290:	80800417 	ldw	r2,16(r16)
 2009294:	1463883a 	add	r17,r2,r17
 2009298:	84400415 	stw	r17,16(r16)
 200929c:	0005883a 	mov	r2,zero
 20092a0:	00000606 	br	20092bc <__sfvwrite_small_str+0x94>
 20092a4:	10801014 	ori	r2,r2,64
 20092a8:	8080000d 	sth	r2,0(r16)
 20092ac:	00bfffc4 	movi	r2,-1
 20092b0:	00000206 	br	20092bc <__sfvwrite_small_str+0x94>
 20092b4:	00bfffc4 	movi	r2,-1
 20092b8:	f800283a 	ret
 20092bc:	dfc00217 	ldw	ra,8(sp)
 20092c0:	dc400117 	ldw	r17,4(sp)
 20092c4:	dc000017 	ldw	r16,0(sp)
 20092c8:	dec00304 	addi	sp,sp,12
 20092cc:	f800283a 	ret

020092d0 <memmove>:
 20092d0:	2005883a 	mov	r2,r4
 20092d4:	218f883a 	add	r7,r4,r6
 20092d8:	29000236 	bltu	r5,r4,20092e4 <memmove+0x14>
 20092dc:	1007883a 	mov	r3,r2
 20092e0:	00000c06 	br	2009314 <memmove+0x44>
 20092e4:	2987883a 	add	r3,r5,r6
 20092e8:	20fffc2e 	bgeu	r4,r3,20092dc <__alt_mem_epcs_flash_controller+0xffff82dc>
 20092ec:	380b883a 	mov	r5,r7
 20092f0:	30cdc83a 	sub	r6,r6,r3
 20092f4:	1989883a 	add	r4,r3,r6
 20092f8:	20000526 	beq	r4,zero,2009310 <memmove+0x40>
 20092fc:	18ffffc4 	addi	r3,r3,-1
 2009300:	19000003 	ldbu	r4,0(r3)
 2009304:	297fffc4 	addi	r5,r5,-1
 2009308:	29000005 	stb	r4,0(r5)
 200930c:	003ff906 	br	20092f4 <__alt_mem_epcs_flash_controller+0xffff82f4>
 2009310:	f800283a 	ret
 2009314:	19c00526 	beq	r3,r7,200932c <memmove+0x5c>
 2009318:	29000003 	ldbu	r4,0(r5)
 200931c:	18c00044 	addi	r3,r3,1
 2009320:	29400044 	addi	r5,r5,1
 2009324:	193fffc5 	stb	r4,-1(r3)
 2009328:	003ffa06 	br	2009314 <__alt_mem_epcs_flash_controller+0xffff8314>
 200932c:	f800283a 	ret

02009330 <__mulsi3>:
 2009330:	0005883a 	mov	r2,zero
 2009334:	20000726 	beq	r4,zero,2009354 <__mulsi3+0x24>
 2009338:	20c0004c 	andi	r3,r4,1
 200933c:	2008d07a 	srli	r4,r4,1
 2009340:	18000126 	beq	r3,zero,2009348 <__mulsi3+0x18>
 2009344:	1145883a 	add	r2,r2,r5
 2009348:	294b883a 	add	r5,r5,r5
 200934c:	203ffa1e 	bne	r4,zero,2009338 <__alt_mem_epcs_flash_controller+0xffff8338>
 2009350:	f800283a 	ret
 2009354:	f800283a 	ret

02009358 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2009358:	defff904 	addi	sp,sp,-28
 200935c:	dfc00615 	stw	ra,24(sp)
 2009360:	df000515 	stw	fp,20(sp)
 2009364:	df000504 	addi	fp,sp,20
 2009368:	e13ffc15 	stw	r4,-16(fp)
 200936c:	e17ffd15 	stw	r5,-12(fp)
 2009370:	e1bffe15 	stw	r6,-8(fp)
 2009374:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2009378:	e0800217 	ldw	r2,8(fp)
 200937c:	d8800015 	stw	r2,0(sp)
 2009380:	e1ffff17 	ldw	r7,-4(fp)
 2009384:	e1bffe17 	ldw	r6,-8(fp)
 2009388:	e17ffd17 	ldw	r5,-12(fp)
 200938c:	e13ffc17 	ldw	r4,-16(fp)
 2009390:	20095080 	call	2009508 <alt_iic_isr_register>
}  
 2009394:	e037883a 	mov	sp,fp
 2009398:	dfc00117 	ldw	ra,4(sp)
 200939c:	df000017 	ldw	fp,0(sp)
 20093a0:	dec00204 	addi	sp,sp,8
 20093a4:	f800283a 	ret

020093a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 20093a8:	defff904 	addi	sp,sp,-28
 20093ac:	df000615 	stw	fp,24(sp)
 20093b0:	df000604 	addi	fp,sp,24
 20093b4:	e13ffe15 	stw	r4,-8(fp)
 20093b8:	e17fff15 	stw	r5,-4(fp)
 20093bc:	e0bfff17 	ldw	r2,-4(fp)
 20093c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20093c4:	0005303a 	rdctl	r2,status
 20093c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20093cc:	e0fffb17 	ldw	r3,-20(fp)
 20093d0:	00bfff84 	movi	r2,-2
 20093d4:	1884703a 	and	r2,r3,r2
 20093d8:	1001703a 	wrctl	status,r2
  
  return context;
 20093dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20093e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 20093e4:	00c00044 	movi	r3,1
 20093e8:	e0bffa17 	ldw	r2,-24(fp)
 20093ec:	1884983a 	sll	r2,r3,r2
 20093f0:	1007883a 	mov	r3,r2
 20093f4:	d0a00f17 	ldw	r2,-32708(gp)
 20093f8:	1884b03a 	or	r2,r3,r2
 20093fc:	d0a00f15 	stw	r2,-32708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2009400:	d0a00f17 	ldw	r2,-32708(gp)
 2009404:	100170fa 	wrctl	ienable,r2
 2009408:	e0bffc17 	ldw	r2,-16(fp)
 200940c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009410:	e0bffd17 	ldw	r2,-12(fp)
 2009414:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2009418:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 200941c:	0001883a 	nop
}
 2009420:	e037883a 	mov	sp,fp
 2009424:	df000017 	ldw	fp,0(sp)
 2009428:	dec00104 	addi	sp,sp,4
 200942c:	f800283a 	ret

02009430 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2009430:	defff904 	addi	sp,sp,-28
 2009434:	df000615 	stw	fp,24(sp)
 2009438:	df000604 	addi	fp,sp,24
 200943c:	e13ffe15 	stw	r4,-8(fp)
 2009440:	e17fff15 	stw	r5,-4(fp)
 2009444:	e0bfff17 	ldw	r2,-4(fp)
 2009448:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200944c:	0005303a 	rdctl	r2,status
 2009450:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009454:	e0fffb17 	ldw	r3,-20(fp)
 2009458:	00bfff84 	movi	r2,-2
 200945c:	1884703a 	and	r2,r3,r2
 2009460:	1001703a 	wrctl	status,r2
  
  return context;
 2009464:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2009468:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 200946c:	00c00044 	movi	r3,1
 2009470:	e0bffa17 	ldw	r2,-24(fp)
 2009474:	1884983a 	sll	r2,r3,r2
 2009478:	0084303a 	nor	r2,zero,r2
 200947c:	1007883a 	mov	r3,r2
 2009480:	d0a00f17 	ldw	r2,-32708(gp)
 2009484:	1884703a 	and	r2,r3,r2
 2009488:	d0a00f15 	stw	r2,-32708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200948c:	d0a00f17 	ldw	r2,-32708(gp)
 2009490:	100170fa 	wrctl	ienable,r2
 2009494:	e0bffc17 	ldw	r2,-16(fp)
 2009498:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200949c:	e0bffd17 	ldw	r2,-12(fp)
 20094a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20094a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 20094a8:	0001883a 	nop
}
 20094ac:	e037883a 	mov	sp,fp
 20094b0:	df000017 	ldw	fp,0(sp)
 20094b4:	dec00104 	addi	sp,sp,4
 20094b8:	f800283a 	ret

020094bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 20094bc:	defffc04 	addi	sp,sp,-16
 20094c0:	df000315 	stw	fp,12(sp)
 20094c4:	df000304 	addi	fp,sp,12
 20094c8:	e13ffe15 	stw	r4,-8(fp)
 20094cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 20094d0:	000530fa 	rdctl	r2,ienable
 20094d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 20094d8:	00c00044 	movi	r3,1
 20094dc:	e0bfff17 	ldw	r2,-4(fp)
 20094e0:	1884983a 	sll	r2,r3,r2
 20094e4:	1007883a 	mov	r3,r2
 20094e8:	e0bffd17 	ldw	r2,-12(fp)
 20094ec:	1884703a 	and	r2,r3,r2
 20094f0:	1004c03a 	cmpne	r2,r2,zero
 20094f4:	10803fcc 	andi	r2,r2,255
}
 20094f8:	e037883a 	mov	sp,fp
 20094fc:	df000017 	ldw	fp,0(sp)
 2009500:	dec00104 	addi	sp,sp,4
 2009504:	f800283a 	ret

02009508 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2009508:	defff504 	addi	sp,sp,-44
 200950c:	dfc00a15 	stw	ra,40(sp)
 2009510:	df000915 	stw	fp,36(sp)
 2009514:	df000904 	addi	fp,sp,36
 2009518:	e13ffc15 	stw	r4,-16(fp)
 200951c:	e17ffd15 	stw	r5,-12(fp)
 2009520:	e1bffe15 	stw	r6,-8(fp)
 2009524:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2009528:	00bffa84 	movi	r2,-22
 200952c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2009530:	e0bffd17 	ldw	r2,-12(fp)
 2009534:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2009538:	e0bff817 	ldw	r2,-32(fp)
 200953c:	10800808 	cmpgei	r2,r2,32
 2009540:	1000271e 	bne	r2,zero,20095e0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009544:	0005303a 	rdctl	r2,status
 2009548:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200954c:	e0fffb17 	ldw	r3,-20(fp)
 2009550:	00bfff84 	movi	r2,-2
 2009554:	1884703a 	and	r2,r3,r2
 2009558:	1001703a 	wrctl	status,r2
  
  return context;
 200955c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2009560:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 2009564:	00800034 	movhi	r2,0
 2009568:	10875304 	addi	r2,r2,7500
 200956c:	e0fff817 	ldw	r3,-32(fp)
 2009570:	180690fa 	slli	r3,r3,3
 2009574:	10c5883a 	add	r2,r2,r3
 2009578:	e0fffe17 	ldw	r3,-8(fp)
 200957c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2009580:	00800034 	movhi	r2,0
 2009584:	10875304 	addi	r2,r2,7500
 2009588:	e0fff817 	ldw	r3,-32(fp)
 200958c:	180690fa 	slli	r3,r3,3
 2009590:	10c5883a 	add	r2,r2,r3
 2009594:	10800104 	addi	r2,r2,4
 2009598:	e0ffff17 	ldw	r3,-4(fp)
 200959c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 20095a0:	e0bffe17 	ldw	r2,-8(fp)
 20095a4:	10000526 	beq	r2,zero,20095bc <alt_iic_isr_register+0xb4>
 20095a8:	e0bff817 	ldw	r2,-32(fp)
 20095ac:	100b883a 	mov	r5,r2
 20095b0:	e13ffc17 	ldw	r4,-16(fp)
 20095b4:	20093a80 	call	20093a8 <alt_ic_irq_enable>
 20095b8:	00000406 	br	20095cc <alt_iic_isr_register+0xc4>
 20095bc:	e0bff817 	ldw	r2,-32(fp)
 20095c0:	100b883a 	mov	r5,r2
 20095c4:	e13ffc17 	ldw	r4,-16(fp)
 20095c8:	20094300 	call	2009430 <alt_ic_irq_disable>
 20095cc:	e0bff715 	stw	r2,-36(fp)
 20095d0:	e0bffa17 	ldw	r2,-24(fp)
 20095d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20095d8:	e0bff917 	ldw	r2,-28(fp)
 20095dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20095e0:	e0bff717 	ldw	r2,-36(fp)
}
 20095e4:	e037883a 	mov	sp,fp
 20095e8:	dfc00117 	ldw	ra,4(sp)
 20095ec:	df000017 	ldw	fp,0(sp)
 20095f0:	dec00204 	addi	sp,sp,8
 20095f4:	f800283a 	ret

020095f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20095f8:	defffc04 	addi	sp,sp,-16
 20095fc:	df000315 	stw	fp,12(sp)
 2009600:	df000304 	addi	fp,sp,12
 2009604:	e13ffd15 	stw	r4,-12(fp)
 2009608:	e17ffe15 	stw	r5,-8(fp)
 200960c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2009610:	e0fffe17 	ldw	r3,-8(fp)
 2009614:	e0bffd17 	ldw	r2,-12(fp)
 2009618:	18800c26 	beq	r3,r2,200964c <alt_load_section+0x54>
  {
    while( to != end )
 200961c:	00000806 	br	2009640 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2009620:	e0bffe17 	ldw	r2,-8(fp)
 2009624:	10c00104 	addi	r3,r2,4
 2009628:	e0fffe15 	stw	r3,-8(fp)
 200962c:	e0fffd17 	ldw	r3,-12(fp)
 2009630:	19000104 	addi	r4,r3,4
 2009634:	e13ffd15 	stw	r4,-12(fp)
 2009638:	18c00017 	ldw	r3,0(r3)
 200963c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2009640:	e0fffe17 	ldw	r3,-8(fp)
 2009644:	e0bfff17 	ldw	r2,-4(fp)
 2009648:	18bff51e 	bne	r3,r2,2009620 <__alt_mem_epcs_flash_controller+0xffff8620>
    {
      *to++ = *from++;
    }
  }
}
 200964c:	0001883a 	nop
 2009650:	e037883a 	mov	sp,fp
 2009654:	df000017 	ldw	fp,0(sp)
 2009658:	dec00104 	addi	sp,sp,4
 200965c:	f800283a 	ret

02009660 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2009660:	defffe04 	addi	sp,sp,-8
 2009664:	dfc00115 	stw	ra,4(sp)
 2009668:	df000015 	stw	fp,0(sp)
 200966c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2009670:	01800034 	movhi	r6,0
 2009674:	31854904 	addi	r6,r6,5412
 2009678:	01400034 	movhi	r5,0
 200967c:	29401e04 	addi	r5,r5,120
 2009680:	01008074 	movhi	r4,513
 2009684:	2134a404 	addi	r4,r4,-11632
 2009688:	20095f80 	call	20095f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200968c:	01808074 	movhi	r6,513
 2009690:	31a08c04 	addi	r6,r6,-32208
 2009694:	01408074 	movhi	r5,513
 2009698:	29600804 	addi	r5,r5,-32736
 200969c:	01008074 	movhi	r4,513
 20096a0:	21200804 	addi	r4,r4,-32736
 20096a4:	20095f80 	call	20095f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 20096a8:	01800034 	movhi	r6,0
 20096ac:	31801e04 	addi	r6,r6,120
 20096b0:	01400034 	movhi	r5,0
 20096b4:	29400004 	addi	r5,r5,0
 20096b8:	01008074 	movhi	r4,513
 20096bc:	21348604 	addi	r4,r4,-11752
 20096c0:	20095f80 	call	20095f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20096c4:	200c0840 	call	200c084 <alt_dcache_flush_all>
  alt_icache_flush_all();
 20096c8:	200c32c0 	call	200c32c <alt_icache_flush_all>
}
 20096cc:	0001883a 	nop
 20096d0:	e037883a 	mov	sp,fp
 20096d4:	dfc00117 	ldw	ra,4(sp)
 20096d8:	df000017 	ldw	fp,0(sp)
 20096dc:	dec00204 	addi	sp,sp,8
 20096e0:	f800283a 	ret

020096e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20096e4:	defffd04 	addi	sp,sp,-12
 20096e8:	dfc00215 	stw	ra,8(sp)
 20096ec:	df000115 	stw	fp,4(sp)
 20096f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20096f4:	0009883a 	mov	r4,zero
 20096f8:	20097c40 	call	20097c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20096fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2009700:	20097fc0 	call	20097fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2009704:	01800034 	movhi	r6,0
 2009708:	31800904 	addi	r6,r6,36
 200970c:	01400034 	movhi	r5,0
 2009710:	29400904 	addi	r5,r5,36
 2009714:	01000034 	movhi	r4,0
 2009718:	21000904 	addi	r4,r4,36
 200971c:	200c4cc0 	call	200c4cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2009720:	200c1b00 	call	200c1b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2009724:	01008074 	movhi	r4,513
 2009728:	21308404 	addi	r4,r4,-15856
 200972c:	200ce700 	call	200ce70 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2009730:	d0a01017 	ldw	r2,-32704(gp)
 2009734:	d0e01117 	ldw	r3,-32700(gp)
 2009738:	d1201217 	ldw	r4,-32696(gp)
 200973c:	200d883a 	mov	r6,r4
 2009740:	180b883a 	mov	r5,r3
 2009744:	1009883a 	mov	r4,r2
 2009748:	20082ac0 	call	20082ac <main>
 200974c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2009750:	01000044 	movi	r4,1
 2009754:	200bfac0 	call	200bfac <close>
  exit (result);
 2009758:	e13fff17 	ldw	r4,-4(fp)
 200975c:	200ce840 	call	200ce84 <exit>

02009760 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 2009760:	defffd04 	addi	sp,sp,-12
 2009764:	dfc00215 	stw	ra,8(sp)
 2009768:	df000115 	stw	fp,4(sp)
 200976c:	df000104 	addi	fp,sp,4
 2009770:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2009774:	e13fff17 	ldw	r4,-4(fp)
 2009778:	200be180 	call	200be18 <alt_busy_sleep>
}
 200977c:	e037883a 	mov	sp,fp
 2009780:	dfc00117 	ldw	ra,4(sp)
 2009784:	df000017 	ldw	fp,0(sp)
 2009788:	dec00204 	addi	sp,sp,8
 200978c:	f800283a 	ret

02009790 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2009790:	defffd04 	addi	sp,sp,-12
 2009794:	dfc00215 	stw	ra,8(sp)
 2009798:	df000115 	stw	fp,4(sp)
 200979c:	df000104 	addi	fp,sp,4
 20097a0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20097a4:	d1600504 	addi	r5,gp,-32748
 20097a8:	e13fff17 	ldw	r4,-4(fp)
 20097ac:	200c10c0 	call	200c10c <alt_dev_llist_insert>
}
 20097b0:	e037883a 	mov	sp,fp
 20097b4:	dfc00117 	ldw	ra,4(sp)
 20097b8:	df000017 	ldw	fp,0(sp)
 20097bc:	dec00204 	addi	sp,sp,8
 20097c0:	f800283a 	ret

020097c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20097c4:	defffd04 	addi	sp,sp,-12
 20097c8:	dfc00215 	stw	ra,8(sp)
 20097cc:	df000115 	stw	fp,4(sp)
 20097d0:	df000104 	addi	fp,sp,4
 20097d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 20097d8:	200c9f40 	call	200c9f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20097dc:	00800044 	movi	r2,1
 20097e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20097e4:	0001883a 	nop
 20097e8:	e037883a 	mov	sp,fp
 20097ec:	dfc00117 	ldw	ra,4(sp)
 20097f0:	df000017 	ldw	fp,0(sp)
 20097f4:	dec00204 	addi	sp,sp,8
 20097f8:	f800283a 	ret

020097fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20097fc:	defffe04 	addi	sp,sp,-8
 2009800:	dfc00115 	stw	ra,4(sp)
 2009804:	df000015 	stw	fp,0(sp)
 2009808:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
 200980c:	01000034 	movhi	r4,0
 2009810:	21005604 	addi	r4,r4,344
 2009814:	20098a80 	call	20098a8 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2009818:	000d883a 	mov	r6,zero
 200981c:	000b883a 	mov	r5,zero
 2009820:	01000034 	movhi	r4,0
 2009824:	21009304 	addi	r4,r4,588
 2009828:	200a4d40 	call	200a4d4 <altera_avalon_jtag_uart_init>
 200982c:	01000034 	movhi	r4,0
 2009830:	21008904 	addi	r4,r4,548
 2009834:	20097900 	call	2009790 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 2009838:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 200983c:	01800084 	movi	r6,2
 2009840:	000b883a 	mov	r5,zero
 2009844:	01000034 	movhi	r4,0
 2009848:	2104ab04 	addi	r4,r4,4780
 200984c:	200aee80 	call	200aee8 <altera_avalon_uart_init>
 2009850:	01000034 	movhi	r4,0
 2009854:	2104a104 	addi	r4,r4,4740
 2009858:	20097900 	call	2009790 <alt_dev_reg>
}
 200985c:	0001883a 	nop
 2009860:	e037883a 	mov	sp,fp
 2009864:	dfc00117 	ldw	ra,4(sp)
 2009868:	df000017 	ldw	fp,0(sp)
 200986c:	dec00204 	addi	sp,sp,8
 2009870:	f800283a 	ret

02009874 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2009874:	defffd04 	addi	sp,sp,-12
 2009878:	dfc00215 	stw	ra,8(sp)
 200987c:	df000115 	stw	fp,4(sp)
 2009880:	df000104 	addi	fp,sp,4
 2009884:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2009888:	d1600904 	addi	r5,gp,-32732
 200988c:	e13fff17 	ldw	r4,-4(fp)
 2009890:	200c10c0 	call	200c10c <alt_dev_llist_insert>
}
 2009894:	e037883a 	mov	sp,fp
 2009898:	dfc00117 	ldw	ra,4(sp)
 200989c:	df000017 	ldw	fp,0(sp)
 20098a0:	dec00204 	addi	sp,sp,8
 20098a4:	f800283a 	ret

020098a8 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 20098a8:	defffc04 	addi	sp,sp,-16
 20098ac:	dfc00315 	stw	ra,12(sp)
 20098b0:	df000215 	stw	fp,8(sp)
 20098b4:	df000204 	addi	fp,sp,8
 20098b8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20098bc:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 20098c0:	e13fff17 	ldw	r4,-4(fp)
 20098c4:	20098fc0 	call	20098fc <alt_epcs_flash_query>
 20098c8:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 20098cc:	e0bffe17 	ldw	r2,-8(fp)
 20098d0:	1000041e 	bne	r2,zero,20098e4 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 20098d4:	e0bfff17 	ldw	r2,-4(fp)
 20098d8:	1009883a 	mov	r4,r2
 20098dc:	20098740 	call	2009874 <alt_flash_device_register>
 20098e0:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 20098e4:	e0bffe17 	ldw	r2,-8(fp)
}
 20098e8:	e037883a 	mov	sp,fp
 20098ec:	dfc00117 	ldw	ra,4(sp)
 20098f0:	df000017 	ldw	fp,0(sp)
 20098f4:	dec00204 	addi	sp,sp,8
 20098f8:	f800283a 	ret

020098fc <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 20098fc:	defffc04 	addi	sp,sp,-16
 2009900:	dfc00315 	stw	ra,12(sp)
 2009904:	df000215 	stw	fp,8(sp)
 2009908:	df000204 	addi	fp,sp,8
 200990c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2009910:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 2009914:	e0bfff17 	ldw	r2,-4(fp)
 2009918:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 200991c:	e0bfff17 	ldw	r2,-4(fp)
 2009920:	10802e17 	ldw	r2,184(r2)
 2009924:	1009883a 	mov	r4,r2
 2009928:	200bb4c0 	call	200bb4c <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 200992c:	10c03fcc 	andi	r3,r2,255
 2009930:	e0bfff17 	ldw	r2,-4(fp)
 2009934:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2009938:	e0bfff17 	ldw	r2,-4(fp)
 200993c:	10803017 	ldw	r2,192(r2)
 2009940:	10800598 	cmpnei	r2,r2,22
 2009944:	10000a1e 	bne	r2,zero,2009970 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2009948:	e0bfff17 	ldw	r2,-4(fp)
 200994c:	00c02034 	movhi	r3,128
 2009950:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 2009954:	e0bfff17 	ldw	r2,-4(fp)
 2009958:	00c02004 	movi	r3,128
 200995c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2009960:	e0bfff17 	ldw	r2,-4(fp)
 2009964:	00c00074 	movhi	r3,1
 2009968:	10c01015 	stw	r3,64(r2)
 200996c:	0000ce06 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2009970:	e0bfff17 	ldw	r2,-4(fp)
 2009974:	10803017 	ldw	r2,192(r2)
 2009978:	10800518 	cmpnei	r2,r2,20
 200997c:	10000a1e 	bne	r2,zero,20099a8 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2009980:	e0bfff17 	ldw	r2,-4(fp)
 2009984:	00c00834 	movhi	r3,32
 2009988:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 200998c:	e0bfff17 	ldw	r2,-4(fp)
 2009990:	00c00804 	movi	r3,32
 2009994:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2009998:	e0bfff17 	ldw	r2,-4(fp)
 200999c:	00c00074 	movhi	r3,1
 20099a0:	10c01015 	stw	r3,64(r2)
 20099a4:	0000c006 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 20099a8:	e0bfff17 	ldw	r2,-4(fp)
 20099ac:	10803017 	ldw	r2,192(r2)
 20099b0:	108004d8 	cmpnei	r2,r2,19
 20099b4:	10000a1e 	bne	r2,zero,20099e0 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 20099b8:	e0bfff17 	ldw	r2,-4(fp)
 20099bc:	00c00434 	movhi	r3,16
 20099c0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 20099c4:	e0bfff17 	ldw	r2,-4(fp)
 20099c8:	00c00404 	movi	r3,16
 20099cc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20099d0:	e0bfff17 	ldw	r2,-4(fp)
 20099d4:	00c00074 	movhi	r3,1
 20099d8:	10c01015 	stw	r3,64(r2)
 20099dc:	0000b206 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 20099e0:	e0bfff17 	ldw	r2,-4(fp)
 20099e4:	10803017 	ldw	r2,192(r2)
 20099e8:	10800498 	cmpnei	r2,r2,18
 20099ec:	10000a1e 	bne	r2,zero,2009a18 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 20099f0:	e0bfff17 	ldw	r2,-4(fp)
 20099f4:	00c00234 	movhi	r3,8
 20099f8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 20099fc:	e0bfff17 	ldw	r2,-4(fp)
 2009a00:	00c00204 	movi	r3,8
 2009a04:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2009a08:	e0bfff17 	ldw	r2,-4(fp)
 2009a0c:	00c00074 	movhi	r3,1
 2009a10:	10c01015 	stw	r3,64(r2)
 2009a14:	0000a406 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2009a18:	e0bfff17 	ldw	r2,-4(fp)
 2009a1c:	10803017 	ldw	r2,192(r2)
 2009a20:	10800418 	cmpnei	r2,r2,16
 2009a24:	10000a1e 	bne	r2,zero,2009a50 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2009a28:	e0bfff17 	ldw	r2,-4(fp)
 2009a2c:	00c000b4 	movhi	r3,2
 2009a30:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 2009a34:	e0bfff17 	ldw	r2,-4(fp)
 2009a38:	00c00104 	movi	r3,4
 2009a3c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 2009a40:	e0bfff17 	ldw	r2,-4(fp)
 2009a44:	00e00014 	movui	r3,32768
 2009a48:	10c01015 	stw	r3,64(r2)
 2009a4c:	00009606 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2009a50:	e0bfff17 	ldw	r2,-4(fp)
 2009a54:	10802e17 	ldw	r2,184(r2)
 2009a58:	1009883a 	mov	r4,r2
 2009a5c:	200bbb40 	call	200bbb4 <epcs_read_device_id>
 2009a60:	1007883a 	mov	r3,r2
 2009a64:	e0bfff17 	ldw	r2,-4(fp)
 2009a68:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 2009a6c:	e0bfff17 	ldw	r2,-4(fp)
 2009a70:	10c03017 	ldw	r3,192(r2)
 2009a74:	00804034 	movhi	r2,256
 2009a78:	10bfffc4 	addi	r2,r2,-1
 2009a7c:	1886703a 	and	r3,r3,r2
 2009a80:	00800874 	movhi	r2,33
 2009a84:	10ae8544 	addi	r2,r2,-17899
 2009a88:	18800a1e 	bne	r3,r2,2009ab4 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2009a8c:	e0bfff17 	ldw	r2,-4(fp)
 2009a90:	00c00834 	movhi	r3,32
 2009a94:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 2009a98:	e0bfff17 	ldw	r2,-4(fp)
 2009a9c:	00c00804 	movi	r3,32
 2009aa0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2009aa4:	e0bfff17 	ldw	r2,-4(fp)
 2009aa8:	00c00074 	movhi	r3,1
 2009aac:	10c01015 	stw	r3,64(r2)
 2009ab0:	00007d06 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 2009ab4:	e0bfff17 	ldw	r2,-4(fp)
 2009ab8:	10c03017 	ldw	r3,192(r2)
 2009abc:	00804034 	movhi	r2,256
 2009ac0:	10bfffc4 	addi	r2,r2,-1
 2009ac4:	1886703a 	and	r3,r3,r2
 2009ac8:	00800874 	movhi	r2,33
 2009acc:	10ae8584 	addi	r2,r2,-17898
 2009ad0:	18800a1e 	bne	r3,r2,2009afc <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 2009ad4:	e0bfff17 	ldw	r2,-4(fp)
 2009ad8:	00c01034 	movhi	r3,64
 2009adc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 2009ae0:	e0bfff17 	ldw	r2,-4(fp)
 2009ae4:	00c01004 	movi	r3,64
 2009ae8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2009aec:	e0bfff17 	ldw	r2,-4(fp)
 2009af0:	00c00074 	movhi	r3,1
 2009af4:	10c01015 	stw	r3,64(r2)
 2009af8:	00006b06 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 2009afc:	e0bfff17 	ldw	r2,-4(fp)
 2009b00:	10c03017 	ldw	r3,192(r2)
 2009b04:	00804034 	movhi	r2,256
 2009b08:	10bfffc4 	addi	r2,r2,-1
 2009b0c:	1886703a 	and	r3,r3,r2
 2009b10:	00800874 	movhi	r2,33
 2009b14:	10ae85c4 	addi	r2,r2,-17897
 2009b18:	18800a1e 	bne	r3,r2,2009b44 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2009b1c:	e0bfff17 	ldw	r2,-4(fp)
 2009b20:	00c02034 	movhi	r3,128
 2009b24:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 2009b28:	e0bfff17 	ldw	r2,-4(fp)
 2009b2c:	00c02004 	movi	r3,128
 2009b30:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2009b34:	e0bfff17 	ldw	r2,-4(fp)
 2009b38:	00c00074 	movhi	r3,1
 2009b3c:	10c01015 	stw	r3,64(r2)
 2009b40:	00005906 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 2009b44:	e0bfff17 	ldw	r2,-4(fp)
 2009b48:	10c03017 	ldw	r3,192(r2)
 2009b4c:	00804034 	movhi	r2,256
 2009b50:	10bfffc4 	addi	r2,r2,-1
 2009b54:	1886703a 	and	r3,r3,r2
 2009b58:	00800874 	movhi	r2,33
 2009b5c:	10ae8604 	addi	r2,r2,-17896
 2009b60:	18800a1e 	bne	r3,r2,2009b8c <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2009b64:	e0bfff17 	ldw	r2,-4(fp)
 2009b68:	00c04034 	movhi	r3,256
 2009b6c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2009b70:	e0bfff17 	ldw	r2,-4(fp)
 2009b74:	00c04004 	movi	r3,256
 2009b78:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2009b7c:	e0bfff17 	ldw	r2,-4(fp)
 2009b80:	00c00074 	movhi	r3,1
 2009b84:	10c01015 	stw	r3,64(r2)
 2009b88:	00004706 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2009b8c:	e0bfff17 	ldw	r2,-4(fp)
 2009b90:	10803017 	ldw	r2,192(r2)
 2009b94:	10803fcc 	andi	r2,r2,255
 2009b98:	10800618 	cmpnei	r2,r2,24
 2009b9c:	10000a1e 	bne	r2,zero,2009bc8 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2009ba0:	e0bfff17 	ldw	r2,-4(fp)
 2009ba4:	00c04034 	movhi	r3,256
 2009ba8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 2009bac:	e0bfff17 	ldw	r2,-4(fp)
 2009bb0:	00c01004 	movi	r3,64
 2009bb4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 2009bb8:	e0bfff17 	ldw	r2,-4(fp)
 2009bbc:	00c00134 	movhi	r3,4
 2009bc0:	10c01015 	stw	r3,64(r2)
 2009bc4:	00003806 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 2009bc8:	e0bfff17 	ldw	r2,-4(fp)
 2009bcc:	10803017 	ldw	r2,192(r2)
 2009bd0:	10803fcc 	andi	r2,r2,255
 2009bd4:	10800658 	cmpnei	r2,r2,25
 2009bd8:	10000d1e 	bne	r2,zero,2009c10 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 2009bdc:	e0bfff17 	ldw	r2,-4(fp)
 2009be0:	00c08034 	movhi	r3,512
 2009be4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 2009be8:	e0bfff17 	ldw	r2,-4(fp)
 2009bec:	00c08004 	movi	r3,512
 2009bf0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2009bf4:	e0bfff17 	ldw	r2,-4(fp)
 2009bf8:	00c00074 	movhi	r3,1
 2009bfc:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 2009c00:	e0bfff17 	ldw	r2,-4(fp)
 2009c04:	00c00044 	movi	r3,1
 2009c08:	10c03215 	stw	r3,200(r2)
 2009c0c:	00002606 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 2009c10:	e0bfff17 	ldw	r2,-4(fp)
 2009c14:	10803017 	ldw	r2,192(r2)
 2009c18:	10803fcc 	andi	r2,r2,255
 2009c1c:	10800818 	cmpnei	r2,r2,32
 2009c20:	10000d1e 	bne	r2,zero,2009c58 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 2009c24:	e0bfff17 	ldw	r2,-4(fp)
 2009c28:	00c10034 	movhi	r3,1024
 2009c2c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 2009c30:	e0bfff17 	ldw	r2,-4(fp)
 2009c34:	00c10004 	movi	r3,1024
 2009c38:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2009c3c:	e0bfff17 	ldw	r2,-4(fp)
 2009c40:	00c00074 	movhi	r3,1
 2009c44:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2009c48:	e0bfff17 	ldw	r2,-4(fp)
 2009c4c:	00c00044 	movi	r3,1
 2009c50:	10c03215 	stw	r3,200(r2)
 2009c54:	00001406 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 2009c58:	e0bfff17 	ldw	r2,-4(fp)
 2009c5c:	10803017 	ldw	r2,192(r2)
 2009c60:	10803fcc 	andi	r2,r2,255
 2009c64:	10800858 	cmpnei	r2,r2,33
 2009c68:	10000d1e 	bne	r2,zero,2009ca0 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 2009c6c:	e0bfff17 	ldw	r2,-4(fp)
 2009c70:	00c20034 	movhi	r3,2048
 2009c74:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 2009c78:	e0bfff17 	ldw	r2,-4(fp)
 2009c7c:	00c20004 	movi	r3,2048
 2009c80:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2009c84:	e0bfff17 	ldw	r2,-4(fp)
 2009c88:	00c00074 	movhi	r3,1
 2009c8c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2009c90:	e0bfff17 	ldw	r2,-4(fp)
 2009c94:	00c00044 	movi	r3,1
 2009c98:	10c03215 	stw	r3,200(r2)
 2009c9c:	00000206 	br	2009ca8 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2009ca0:	00bffb44 	movi	r2,-19
 2009ca4:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2009ca8:	e0bfff17 	ldw	r2,-4(fp)
 2009cac:	10800e17 	ldw	r2,56(r2)
 2009cb0:	1007883a 	mov	r3,r2
 2009cb4:	e0bfff17 	ldw	r2,-4(fp)
 2009cb8:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 2009cbc:	e0bfff17 	ldw	r2,-4(fp)
 2009cc0:	00c00044 	movi	r3,1
 2009cc4:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 2009cc8:	e0bfff17 	ldw	r2,-4(fp)
 2009ccc:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2009cd0:	e0bfff17 	ldw	r2,-4(fp)
 2009cd4:	00c04004 	movi	r3,256
 2009cd8:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2009cdc:	e0bffe17 	ldw	r2,-8(fp)
}
 2009ce0:	e037883a 	mov	sp,fp
 2009ce4:	dfc00117 	ldw	ra,4(sp)
 2009ce8:	df000017 	ldw	fp,0(sp)
 2009cec:	dec00204 	addi	sp,sp,8
 2009cf0:	f800283a 	ret

02009cf4 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2009cf4:	deffee04 	addi	sp,sp,-72
 2009cf8:	dfc01115 	stw	ra,68(sp)
 2009cfc:	df001015 	stw	fp,64(sp)
 2009d00:	df001004 	addi	fp,sp,64
 2009d04:	e13ffc15 	stw	r4,-16(fp)
 2009d08:	e17ffd15 	stw	r5,-12(fp)
 2009d0c:	e1bffe15 	stw	r6,-8(fp)
 2009d10:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2009d14:	00800804 	movi	r2,32
 2009d18:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2009d1c:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 2009d20:	00002706 	br	2009dc0 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2009d24:	e0fff117 	ldw	r3,-60(fp)
 2009d28:	e0bfff17 	ldw	r2,-4(fp)
 2009d2c:	1880012e 	bgeu	r3,r2,2009d34 <alt_epcs_flash_memcmp+0x40>
 2009d30:	1805883a 	mov	r2,r3
 2009d34:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2009d38:	e0fffe17 	ldw	r3,-8(fp)
 2009d3c:	e0bff017 	ldw	r2,-64(fp)
 2009d40:	1885883a 	add	r2,r3,r2
 2009d44:	e0fff404 	addi	r3,fp,-48
 2009d48:	e1fff217 	ldw	r7,-56(fp)
 2009d4c:	180d883a 	mov	r6,r3
 2009d50:	100b883a 	mov	r5,r2
 2009d54:	e13ffc17 	ldw	r4,-16(fp)
 2009d58:	200a2d80 	call	200a2d8 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2009d5c:	1000020e 	bge	r2,zero,2009d68 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2009d60:	00bfffc4 	movi	r2,-1
 2009d64:	00001906 	br	2009dcc <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2009d68:	e0bff017 	ldw	r2,-64(fp)
 2009d6c:	e0fffd17 	ldw	r3,-12(fp)
 2009d70:	1885883a 	add	r2,r3,r2
 2009d74:	e13ff217 	ldw	r4,-56(fp)
 2009d78:	e0fff404 	addi	r3,fp,-48
 2009d7c:	200d883a 	mov	r6,r4
 2009d80:	180b883a 	mov	r5,r3
 2009d84:	1009883a 	mov	r4,r2
 2009d88:	200cea40 	call	200cea4 <memcmp>
 2009d8c:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2009d90:	e0bff317 	ldw	r2,-52(fp)
 2009d94:	10000226 	beq	r2,zero,2009da0 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 2009d98:	e0bff317 	ldw	r2,-52(fp)
 2009d9c:	00000b06 	br	2009dcc <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 2009da0:	e0bff217 	ldw	r2,-56(fp)
 2009da4:	e0ffff17 	ldw	r3,-4(fp)
 2009da8:	1885c83a 	sub	r2,r3,r2
 2009dac:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2009db0:	e0fff017 	ldw	r3,-64(fp)
 2009db4:	e0bff217 	ldw	r2,-56(fp)
 2009db8:	1885883a 	add	r2,r3,r2
 2009dbc:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2009dc0:	e0bfff17 	ldw	r2,-4(fp)
 2009dc4:	103fd71e 	bne	r2,zero,2009d24 <__alt_mem_epcs_flash_controller+0xffff8d24>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2009dc8:	0005883a 	mov	r2,zero
}
 2009dcc:	e037883a 	mov	sp,fp
 2009dd0:	dfc00117 	ldw	ra,4(sp)
 2009dd4:	df000017 	ldw	fp,0(sp)
 2009dd8:	dec00204 	addi	sp,sp,8
 2009ddc:	f800283a 	ret

02009de0 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2009de0:	defff404 	addi	sp,sp,-48
 2009de4:	dfc00b15 	stw	ra,44(sp)
 2009de8:	df000a15 	stw	fp,40(sp)
 2009dec:	df000a04 	addi	fp,sp,40
 2009df0:	e13ffc15 	stw	r4,-16(fp)
 2009df4:	e17ffd15 	stw	r5,-12(fp)
 2009df8:	e1bffe15 	stw	r6,-8(fp)
 2009dfc:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2009e00:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2009e04:	e03ff815 	stw	zero,-32(fp)
 2009e08:	00008306 	br	200a018 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2009e0c:	e0fffc17 	ldw	r3,-16(fp)
 2009e10:	e0bff817 	ldw	r2,-32(fp)
 2009e14:	1004913a 	slli	r2,r2,4
 2009e18:	1885883a 	add	r2,r3,r2
 2009e1c:	10800d04 	addi	r2,r2,52
 2009e20:	10800017 	ldw	r2,0(r2)
 2009e24:	e0fffd17 	ldw	r3,-12(fp)
 2009e28:	18807816 	blt	r3,r2,200a00c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 2009e2c:	e0fffc17 	ldw	r3,-16(fp)
 2009e30:	e0bff817 	ldw	r2,-32(fp)
 2009e34:	1004913a 	slli	r2,r2,4
 2009e38:	1885883a 	add	r2,r3,r2
 2009e3c:	10800d04 	addi	r2,r2,52
 2009e40:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 2009e44:	e13ffc17 	ldw	r4,-16(fp)
 2009e48:	e0bff817 	ldw	r2,-32(fp)
 2009e4c:	1004913a 	slli	r2,r2,4
 2009e50:	2085883a 	add	r2,r4,r2
 2009e54:	10800e04 	addi	r2,r2,56
 2009e58:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 2009e5c:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2009e60:	e0fffd17 	ldw	r3,-12(fp)
 2009e64:	1880690e 	bge	r3,r2,200a00c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2009e68:	e0fffc17 	ldw	r3,-16(fp)
 2009e6c:	e0bff817 	ldw	r2,-32(fp)
 2009e70:	1004913a 	slli	r2,r2,4
 2009e74:	1885883a 	add	r2,r3,r2
 2009e78:	10800d04 	addi	r2,r2,52
 2009e7c:	10800017 	ldw	r2,0(r2)
 2009e80:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2009e84:	e03ff915 	stw	zero,-28(fp)
 2009e88:	00005806 	br	2009fec <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2009e8c:	e0fffd17 	ldw	r3,-12(fp)
 2009e90:	e0bffa17 	ldw	r2,-24(fp)
 2009e94:	18804916 	blt	r3,r2,2009fbc <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 2009e98:	e0fffc17 	ldw	r3,-16(fp)
 2009e9c:	e0bff817 	ldw	r2,-32(fp)
 2009ea0:	10800104 	addi	r2,r2,4
 2009ea4:	1004913a 	slli	r2,r2,4
 2009ea8:	1885883a 	add	r2,r3,r2
 2009eac:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2009eb0:	e0bffa17 	ldw	r2,-24(fp)
 2009eb4:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 2009eb8:	e0fffd17 	ldw	r3,-12(fp)
 2009ebc:	18803f0e 	bge	r3,r2,2009fbc <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2009ec0:	e0fffc17 	ldw	r3,-16(fp)
 2009ec4:	e0bff817 	ldw	r2,-32(fp)
 2009ec8:	10800104 	addi	r2,r2,4
 2009ecc:	1004913a 	slli	r2,r2,4
 2009ed0:	1885883a 	add	r2,r3,r2
 2009ed4:	10c00017 	ldw	r3,0(r2)
 2009ed8:	e0bffa17 	ldw	r2,-24(fp)
 2009edc:	1887883a 	add	r3,r3,r2
 2009ee0:	e0bffd17 	ldw	r2,-12(fp)
 2009ee4:	1885c83a 	sub	r2,r3,r2
 2009ee8:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2009eec:	e0fffb17 	ldw	r3,-20(fp)
 2009ef0:	e0bfff17 	ldw	r2,-4(fp)
 2009ef4:	1880010e 	bge	r3,r2,2009efc <alt_epcs_flash_write+0x11c>
 2009ef8:	1805883a 	mov	r2,r3
 2009efc:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2009f00:	e0bffb17 	ldw	r2,-20(fp)
 2009f04:	100f883a 	mov	r7,r2
 2009f08:	e1bffd17 	ldw	r6,-12(fp)
 2009f0c:	e17ffe17 	ldw	r5,-8(fp)
 2009f10:	e13ffc17 	ldw	r4,-16(fp)
 2009f14:	2009cf40 	call	2009cf4 <alt_epcs_flash_memcmp>
 2009f18:	10001226 	beq	r2,zero,2009f64 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2009f1c:	e0bffc17 	ldw	r2,-16(fp)
 2009f20:	10800817 	ldw	r2,32(r2)
 2009f24:	e17ffa17 	ldw	r5,-24(fp)
 2009f28:	e13ffc17 	ldw	r4,-16(fp)
 2009f2c:	103ee83a 	callr	r2
 2009f30:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 2009f34:	e0bff717 	ldw	r2,-36(fp)
 2009f38:	10000a1e 	bne	r2,zero,2009f64 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 2009f3c:	e0bffc17 	ldw	r2,-16(fp)
 2009f40:	10800917 	ldw	r2,36(r2)
 2009f44:	e0fffb17 	ldw	r3,-20(fp)
 2009f48:	d8c00015 	stw	r3,0(sp)
 2009f4c:	e1fffe17 	ldw	r7,-8(fp)
 2009f50:	e1bffd17 	ldw	r6,-12(fp)
 2009f54:	e17ffa17 	ldw	r5,-24(fp)
 2009f58:	e13ffc17 	ldw	r4,-16(fp)
 2009f5c:	103ee83a 	callr	r2
 2009f60:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2009f64:	e0ffff17 	ldw	r3,-4(fp)
 2009f68:	e0bffb17 	ldw	r2,-20(fp)
 2009f6c:	18802e26 	beq	r3,r2,200a028 <alt_epcs_flash_write+0x248>
 2009f70:	e0bff717 	ldw	r2,-36(fp)
 2009f74:	10002c1e 	bne	r2,zero,200a028 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 2009f78:	e0ffff17 	ldw	r3,-4(fp)
 2009f7c:	e0bffb17 	ldw	r2,-20(fp)
 2009f80:	1885c83a 	sub	r2,r3,r2
 2009f84:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2009f88:	e0fffc17 	ldw	r3,-16(fp)
 2009f8c:	e0bff817 	ldw	r2,-32(fp)
 2009f90:	10800104 	addi	r2,r2,4
 2009f94:	1004913a 	slli	r2,r2,4
 2009f98:	1885883a 	add	r2,r3,r2
 2009f9c:	10c00017 	ldw	r3,0(r2)
 2009fa0:	e0bffa17 	ldw	r2,-24(fp)
 2009fa4:	1885883a 	add	r2,r3,r2
 2009fa8:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2009fac:	e0bffb17 	ldw	r2,-20(fp)
 2009fb0:	e0fffe17 	ldw	r3,-8(fp)
 2009fb4:	1885883a 	add	r2,r3,r2
 2009fb8:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2009fbc:	e0fffc17 	ldw	r3,-16(fp)
 2009fc0:	e0bff817 	ldw	r2,-32(fp)
 2009fc4:	10800104 	addi	r2,r2,4
 2009fc8:	1004913a 	slli	r2,r2,4
 2009fcc:	1885883a 	add	r2,r3,r2
 2009fd0:	10800017 	ldw	r2,0(r2)
 2009fd4:	e0fffa17 	ldw	r3,-24(fp)
 2009fd8:	1885883a 	add	r2,r3,r2
 2009fdc:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2009fe0:	e0bff917 	ldw	r2,-28(fp)
 2009fe4:	10800044 	addi	r2,r2,1
 2009fe8:	e0bff915 	stw	r2,-28(fp)
 2009fec:	e0fffc17 	ldw	r3,-16(fp)
 2009ff0:	e0bff817 	ldw	r2,-32(fp)
 2009ff4:	1004913a 	slli	r2,r2,4
 2009ff8:	1885883a 	add	r2,r3,r2
 2009ffc:	10800f04 	addi	r2,r2,60
 200a000:	10800017 	ldw	r2,0(r2)
 200a004:	e0fff917 	ldw	r3,-28(fp)
 200a008:	18bfa016 	blt	r3,r2,2009e8c <__alt_mem_epcs_flash_controller+0xffff8e8c>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200a00c:	e0bff817 	ldw	r2,-32(fp)
 200a010:	10800044 	addi	r2,r2,1
 200a014:	e0bff815 	stw	r2,-32(fp)
 200a018:	e0bffc17 	ldw	r2,-16(fp)
 200a01c:	10800c17 	ldw	r2,48(r2)
 200a020:	e0fff817 	ldw	r3,-32(fp)
 200a024:	18bf7916 	blt	r3,r2,2009e0c <__alt_mem_epcs_flash_controller+0xffff8e0c>
      }
    }
  }

finished:
  return ret_code;
 200a028:	e0bff717 	ldw	r2,-36(fp)
}
 200a02c:	e037883a 	mov	sp,fp
 200a030:	dfc00117 	ldw	ra,4(sp)
 200a034:	df000017 	ldw	fp,0(sp)
 200a038:	dec00204 	addi	sp,sp,8
 200a03c:	f800283a 	ret

0200a040 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 200a040:	defffa04 	addi	sp,sp,-24
 200a044:	df000515 	stw	fp,20(sp)
 200a048:	df000504 	addi	fp,sp,20
 200a04c:	e13ffd15 	stw	r4,-12(fp)
 200a050:	e17ffe15 	stw	r5,-8(fp)
 200a054:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 200a058:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 200a05c:	e0bffd17 	ldw	r2,-12(fp)
 200a060:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 200a064:	e0bffc17 	ldw	r2,-16(fp)
 200a068:	10c00c17 	ldw	r3,48(r2)
 200a06c:	e0bfff17 	ldw	r2,-4(fp)
 200a070:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 200a074:	e0bffc17 	ldw	r2,-16(fp)
 200a078:	10800c17 	ldw	r2,48(r2)
 200a07c:	1000031e 	bne	r2,zero,200a08c <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 200a080:	00bffec4 	movi	r2,-5
 200a084:	e0bffb15 	stw	r2,-20(fp)
 200a088:	00000b06 	br	200a0b8 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 200a08c:	e0bffc17 	ldw	r2,-16(fp)
 200a090:	10800c17 	ldw	r2,48(r2)
 200a094:	10800250 	cmplti	r2,r2,9
 200a098:	1000031e 	bne	r2,zero,200a0a8 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 200a09c:	00bffd04 	movi	r2,-12
 200a0a0:	e0bffb15 	stw	r2,-20(fp)
 200a0a4:	00000406 	br	200a0b8 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 200a0a8:	e0bffc17 	ldw	r2,-16(fp)
 200a0ac:	10c00d04 	addi	r3,r2,52
 200a0b0:	e0bffe17 	ldw	r2,-8(fp)
 200a0b4:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 200a0b8:	e0bffb17 	ldw	r2,-20(fp)
}
 200a0bc:	e037883a 	mov	sp,fp
 200a0c0:	df000017 	ldw	fp,0(sp)
 200a0c4:	dec00104 	addi	sp,sp,4
 200a0c8:	f800283a 	ret

0200a0cc <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 200a0cc:	defff904 	addi	sp,sp,-28
 200a0d0:	df000615 	stw	fp,24(sp)
 200a0d4:	df000604 	addi	fp,sp,24
 200a0d8:	e13ffe15 	stw	r4,-8(fp)
 200a0dc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200a0e0:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200a0e4:	e0bffe17 	ldw	r2,-8(fp)
 200a0e8:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 200a0ec:	e0bffb17 	ldw	r2,-20(fp)
 200a0f0:	10800c17 	ldw	r2,48(r2)
 200a0f4:	10bfffc4 	addi	r2,r2,-1
 200a0f8:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 200a0fc:	e0fffb17 	ldw	r3,-20(fp)
 200a100:	e0bffc17 	ldw	r2,-16(fp)
 200a104:	1004913a 	slli	r2,r2,4
 200a108:	1885883a 	add	r2,r3,r2
 200a10c:	10800d04 	addi	r2,r2,52
 200a110:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 200a114:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 200a118:	e13ffb17 	ldw	r4,-20(fp)
 200a11c:	e0bffc17 	ldw	r2,-16(fp)
 200a120:	1004913a 	slli	r2,r2,4
 200a124:	2085883a 	add	r2,r4,r2
 200a128:	10800e04 	addi	r2,r2,56
 200a12c:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 200a130:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 200a134:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 200a138:	e0bfff17 	ldw	r2,-4(fp)
 200a13c:	e0fffd17 	ldw	r3,-12(fp)
 200a140:	1880022e 	bgeu	r3,r2,200a14c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 200a144:	00bffec4 	movi	r2,-5
 200a148:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 200a14c:	e0bffa17 	ldw	r2,-24(fp)
}
 200a150:	e037883a 	mov	sp,fp
 200a154:	df000017 	ldw	fp,0(sp)
 200a158:	dec00104 	addi	sp,sp,4
 200a15c:	f800283a 	ret

0200a160 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 200a160:	defffa04 	addi	sp,sp,-24
 200a164:	dfc00515 	stw	ra,20(sp)
 200a168:	df000415 	stw	fp,16(sp)
 200a16c:	df000404 	addi	fp,sp,16
 200a170:	e13ffe15 	stw	r4,-8(fp)
 200a174:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200a178:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200a17c:	e0bffe17 	ldw	r2,-8(fp)
 200a180:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 200a184:	e17fff17 	ldw	r5,-4(fp)
 200a188:	e13ffe17 	ldw	r4,-8(fp)
 200a18c:	200a0cc0 	call	200a0cc <alt_epcs_test_address>
 200a190:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 200a194:	e0bffc17 	ldw	r2,-16(fp)
 200a198:	10000916 	blt	r2,zero,200a1c0 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 200a19c:	e0bffd17 	ldw	r2,-12(fp)
 200a1a0:	10c02e17 	ldw	r3,184(r2)
 200a1a4:	e13fff17 	ldw	r4,-4(fp)
 200a1a8:	e0bffd17 	ldw	r2,-12(fp)
 200a1ac:	10803217 	ldw	r2,200(r2)
 200a1b0:	100d883a 	mov	r6,r2
 200a1b4:	200b883a 	mov	r5,r4
 200a1b8:	1809883a 	mov	r4,r3
 200a1bc:	200b7800 	call	200b780 <epcs_sector_erase>
  }
  return ret_code;
 200a1c0:	e0bffc17 	ldw	r2,-16(fp)
}
 200a1c4:	e037883a 	mov	sp,fp
 200a1c8:	dfc00117 	ldw	ra,4(sp)
 200a1cc:	df000017 	ldw	fp,0(sp)
 200a1d0:	dec00204 	addi	sp,sp,8
 200a1d4:	f800283a 	ret

0200a1d8 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 200a1d8:	defff404 	addi	sp,sp,-48
 200a1dc:	dfc00b15 	stw	ra,44(sp)
 200a1e0:	df000a15 	stw	fp,40(sp)
 200a1e4:	df000a04 	addi	fp,sp,40
 200a1e8:	e13ffc15 	stw	r4,-16(fp)
 200a1ec:	e17ffd15 	stw	r5,-12(fp)
 200a1f0:	e1bffe15 	stw	r6,-8(fp)
 200a1f4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200a1f8:	e0bffc17 	ldw	r2,-16(fp)
 200a1fc:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 200a200:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 200a204:	e17ffe17 	ldw	r5,-8(fp)
 200a208:	e13ffc17 	ldw	r4,-16(fp)
 200a20c:	200a0cc0 	call	200a0cc <alt_epcs_test_address>
 200a210:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 200a214:	e0bff917 	ldw	r2,-28(fp)
 200a218:	10002916 	blt	r2,zero,200a2c0 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200a21c:	00002606 	br	200a2b8 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 200a220:	e0bff817 	ldw	r2,-32(fp)
 200a224:	10c03117 	ldw	r3,196(r2)
 200a228:	e0bffe17 	ldw	r2,-8(fp)
 200a22c:	1887883a 	add	r3,r3,r2
 200a230:	e0bff817 	ldw	r2,-32(fp)
 200a234:	10803117 	ldw	r2,196(r2)
 200a238:	0085c83a 	sub	r2,zero,r2
 200a23c:	1884703a 	and	r2,r3,r2
 200a240:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 200a244:	e0fffa17 	ldw	r3,-24(fp)
 200a248:	e0bffe17 	ldw	r2,-8(fp)
 200a24c:	1885c83a 	sub	r2,r3,r2
 200a250:	e0c00217 	ldw	r3,8(fp)
 200a254:	1880010e 	bge	r3,r2,200a25c <alt_epcs_flash_write_block+0x84>
 200a258:	1805883a 	mov	r2,r3
 200a25c:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 200a260:	e0bff817 	ldw	r2,-32(fp)
 200a264:	11002e17 	ldw	r4,184(r2)
 200a268:	e0bff717 	ldw	r2,-36(fp)
 200a26c:	e0ffff17 	ldw	r3,-4(fp)
 200a270:	1887883a 	add	r3,r3,r2
 200a274:	e0bff817 	ldw	r2,-32(fp)
 200a278:	10803217 	ldw	r2,200(r2)
 200a27c:	d8800015 	stw	r2,0(sp)
 200a280:	e1fffb17 	ldw	r7,-20(fp)
 200a284:	180d883a 	mov	r6,r3
 200a288:	e17ffe17 	ldw	r5,-8(fp)
 200a28c:	200ba300 	call	200ba30 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 200a290:	e0c00217 	ldw	r3,8(fp)
 200a294:	e0bffb17 	ldw	r2,-20(fp)
 200a298:	1885c83a 	sub	r2,r3,r2
 200a29c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 200a2a0:	e0fff717 	ldw	r3,-36(fp)
 200a2a4:	e0bffb17 	ldw	r2,-20(fp)
 200a2a8:	1885883a 	add	r2,r3,r2
 200a2ac:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 200a2b0:	e0bffa17 	ldw	r2,-24(fp)
 200a2b4:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200a2b8:	e0800217 	ldw	r2,8(fp)
 200a2bc:	103fd81e 	bne	r2,zero,200a220 <__alt_mem_epcs_flash_controller+0xffff9220>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 200a2c0:	e0bff917 	ldw	r2,-28(fp)
}
 200a2c4:	e037883a 	mov	sp,fp
 200a2c8:	dfc00117 	ldw	ra,4(sp)
 200a2cc:	df000017 	ldw	fp,0(sp)
 200a2d0:	dec00204 	addi	sp,sp,8
 200a2d4:	f800283a 	ret

0200a2d8 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 200a2d8:	defff704 	addi	sp,sp,-36
 200a2dc:	dfc00815 	stw	ra,32(sp)
 200a2e0:	df000715 	stw	fp,28(sp)
 200a2e4:	df000704 	addi	fp,sp,28
 200a2e8:	e13ffc15 	stw	r4,-16(fp)
 200a2ec:	e17ffd15 	stw	r5,-12(fp)
 200a2f0:	e1bffe15 	stw	r6,-8(fp)
 200a2f4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 200a2f8:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200a2fc:	e0bffc17 	ldw	r2,-16(fp)
 200a300:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 200a304:	e17ffd17 	ldw	r5,-12(fp)
 200a308:	e13ffc17 	ldw	r4,-16(fp)
 200a30c:	200a0cc0 	call	200a0cc <alt_epcs_test_address>
 200a310:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 200a314:	e0bffa17 	ldw	r2,-24(fp)
 200a318:	10000f16 	blt	r2,zero,200a358 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 200a31c:	e0bffb17 	ldw	r2,-20(fp)
 200a320:	10c02e17 	ldw	r3,184(r2)
 200a324:	e0bffb17 	ldw	r2,-20(fp)
 200a328:	10803217 	ldw	r2,200(r2)
 200a32c:	d8800015 	stw	r2,0(sp)
 200a330:	e1ffff17 	ldw	r7,-4(fp)
 200a334:	e1bffe17 	ldw	r6,-8(fp)
 200a338:	e17ffd17 	ldw	r5,-12(fp)
 200a33c:	1809883a 	mov	r4,r3
 200a340:	200b87c0 	call	200b87c <epcs_read_buffer>
 200a344:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 200a348:	e0fffa17 	ldw	r3,-24(fp)
 200a34c:	e0bfff17 	ldw	r2,-4(fp)
 200a350:	1880011e 	bne	r3,r2,200a358 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 200a354:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 200a358:	e0bffa17 	ldw	r2,-24(fp)
}
 200a35c:	e037883a 	mov	sp,fp
 200a360:	dfc00117 	ldw	ra,4(sp)
 200a364:	df000017 	ldw	fp,0(sp)
 200a368:	dec00204 	addi	sp,sp,8
 200a36c:	f800283a 	ret

0200a370 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200a370:	defffa04 	addi	sp,sp,-24
 200a374:	dfc00515 	stw	ra,20(sp)
 200a378:	df000415 	stw	fp,16(sp)
 200a37c:	df000404 	addi	fp,sp,16
 200a380:	e13ffd15 	stw	r4,-12(fp)
 200a384:	e17ffe15 	stw	r5,-8(fp)
 200a388:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200a38c:	e0bffd17 	ldw	r2,-12(fp)
 200a390:	10800017 	ldw	r2,0(r2)
 200a394:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200a398:	e0bffc17 	ldw	r2,-16(fp)
 200a39c:	10c00a04 	addi	r3,r2,40
 200a3a0:	e0bffd17 	ldw	r2,-12(fp)
 200a3a4:	10800217 	ldw	r2,8(r2)
 200a3a8:	100f883a 	mov	r7,r2
 200a3ac:	e1bfff17 	ldw	r6,-4(fp)
 200a3b0:	e17ffe17 	ldw	r5,-8(fp)
 200a3b4:	1809883a 	mov	r4,r3
 200a3b8:	200a9980 	call	200a998 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200a3bc:	e037883a 	mov	sp,fp
 200a3c0:	dfc00117 	ldw	ra,4(sp)
 200a3c4:	df000017 	ldw	fp,0(sp)
 200a3c8:	dec00204 	addi	sp,sp,8
 200a3cc:	f800283a 	ret

0200a3d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200a3d0:	defffa04 	addi	sp,sp,-24
 200a3d4:	dfc00515 	stw	ra,20(sp)
 200a3d8:	df000415 	stw	fp,16(sp)
 200a3dc:	df000404 	addi	fp,sp,16
 200a3e0:	e13ffd15 	stw	r4,-12(fp)
 200a3e4:	e17ffe15 	stw	r5,-8(fp)
 200a3e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200a3ec:	e0bffd17 	ldw	r2,-12(fp)
 200a3f0:	10800017 	ldw	r2,0(r2)
 200a3f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200a3f8:	e0bffc17 	ldw	r2,-16(fp)
 200a3fc:	10c00a04 	addi	r3,r2,40
 200a400:	e0bffd17 	ldw	r2,-12(fp)
 200a404:	10800217 	ldw	r2,8(r2)
 200a408:	100f883a 	mov	r7,r2
 200a40c:	e1bfff17 	ldw	r6,-4(fp)
 200a410:	e17ffe17 	ldw	r5,-8(fp)
 200a414:	1809883a 	mov	r4,r3
 200a418:	200abb40 	call	200abb4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200a41c:	e037883a 	mov	sp,fp
 200a420:	dfc00117 	ldw	ra,4(sp)
 200a424:	df000017 	ldw	fp,0(sp)
 200a428:	dec00204 	addi	sp,sp,8
 200a42c:	f800283a 	ret

0200a430 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200a430:	defffc04 	addi	sp,sp,-16
 200a434:	dfc00315 	stw	ra,12(sp)
 200a438:	df000215 	stw	fp,8(sp)
 200a43c:	df000204 	addi	fp,sp,8
 200a440:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200a444:	e0bfff17 	ldw	r2,-4(fp)
 200a448:	10800017 	ldw	r2,0(r2)
 200a44c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200a450:	e0bffe17 	ldw	r2,-8(fp)
 200a454:	10c00a04 	addi	r3,r2,40
 200a458:	e0bfff17 	ldw	r2,-4(fp)
 200a45c:	10800217 	ldw	r2,8(r2)
 200a460:	100b883a 	mov	r5,r2
 200a464:	1809883a 	mov	r4,r3
 200a468:	200a8400 	call	200a840 <altera_avalon_jtag_uart_close>
}
 200a46c:	e037883a 	mov	sp,fp
 200a470:	dfc00117 	ldw	ra,4(sp)
 200a474:	df000017 	ldw	fp,0(sp)
 200a478:	dec00204 	addi	sp,sp,8
 200a47c:	f800283a 	ret

0200a480 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200a480:	defffa04 	addi	sp,sp,-24
 200a484:	dfc00515 	stw	ra,20(sp)
 200a488:	df000415 	stw	fp,16(sp)
 200a48c:	df000404 	addi	fp,sp,16
 200a490:	e13ffd15 	stw	r4,-12(fp)
 200a494:	e17ffe15 	stw	r5,-8(fp)
 200a498:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200a49c:	e0bffd17 	ldw	r2,-12(fp)
 200a4a0:	10800017 	ldw	r2,0(r2)
 200a4a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200a4a8:	e0bffc17 	ldw	r2,-16(fp)
 200a4ac:	10800a04 	addi	r2,r2,40
 200a4b0:	e1bfff17 	ldw	r6,-4(fp)
 200a4b4:	e17ffe17 	ldw	r5,-8(fp)
 200a4b8:	1009883a 	mov	r4,r2
 200a4bc:	200a8a80 	call	200a8a8 <altera_avalon_jtag_uart_ioctl>
}
 200a4c0:	e037883a 	mov	sp,fp
 200a4c4:	dfc00117 	ldw	ra,4(sp)
 200a4c8:	df000017 	ldw	fp,0(sp)
 200a4cc:	dec00204 	addi	sp,sp,8
 200a4d0:	f800283a 	ret

0200a4d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200a4d4:	defffa04 	addi	sp,sp,-24
 200a4d8:	dfc00515 	stw	ra,20(sp)
 200a4dc:	df000415 	stw	fp,16(sp)
 200a4e0:	df000404 	addi	fp,sp,16
 200a4e4:	e13ffd15 	stw	r4,-12(fp)
 200a4e8:	e17ffe15 	stw	r5,-8(fp)
 200a4ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200a4f0:	e0bffd17 	ldw	r2,-12(fp)
 200a4f4:	00c00044 	movi	r3,1
 200a4f8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200a4fc:	e0bffd17 	ldw	r2,-12(fp)
 200a500:	10800017 	ldw	r2,0(r2)
 200a504:	10800104 	addi	r2,r2,4
 200a508:	1007883a 	mov	r3,r2
 200a50c:	e0bffd17 	ldw	r2,-12(fp)
 200a510:	10800817 	ldw	r2,32(r2)
 200a514:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200a518:	e0bffe17 	ldw	r2,-8(fp)
 200a51c:	e0ffff17 	ldw	r3,-4(fp)
 200a520:	d8000015 	stw	zero,0(sp)
 200a524:	e1fffd17 	ldw	r7,-12(fp)
 200a528:	01808074 	movhi	r6,513
 200a52c:	31a96504 	addi	r6,r6,-23148
 200a530:	180b883a 	mov	r5,r3
 200a534:	1009883a 	mov	r4,r2
 200a538:	20093580 	call	2009358 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200a53c:	e0bffd17 	ldw	r2,-12(fp)
 200a540:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200a544:	e0bffd17 	ldw	r2,-12(fp)
 200a548:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200a54c:	d0e01417 	ldw	r3,-32688(gp)
 200a550:	e1fffd17 	ldw	r7,-12(fp)
 200a554:	01808074 	movhi	r6,513
 200a558:	31a9e804 	addi	r6,r6,-22624
 200a55c:	180b883a 	mov	r5,r3
 200a560:	1009883a 	mov	r4,r2
 200a564:	200bcec0 	call	200bcec <alt_alarm_start>
 200a568:	1000040e 	bge	r2,zero,200a57c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200a56c:	e0fffd17 	ldw	r3,-12(fp)
 200a570:	00a00034 	movhi	r2,32768
 200a574:	10bfffc4 	addi	r2,r2,-1
 200a578:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200a57c:	0001883a 	nop
 200a580:	e037883a 	mov	sp,fp
 200a584:	dfc00117 	ldw	ra,4(sp)
 200a588:	df000017 	ldw	fp,0(sp)
 200a58c:	dec00204 	addi	sp,sp,8
 200a590:	f800283a 	ret

0200a594 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200a594:	defff804 	addi	sp,sp,-32
 200a598:	df000715 	stw	fp,28(sp)
 200a59c:	df000704 	addi	fp,sp,28
 200a5a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200a5a4:	e0bfff17 	ldw	r2,-4(fp)
 200a5a8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 200a5ac:	e0bffb17 	ldw	r2,-20(fp)
 200a5b0:	10800017 	ldw	r2,0(r2)
 200a5b4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200a5b8:	e0bffc17 	ldw	r2,-16(fp)
 200a5bc:	10800104 	addi	r2,r2,4
 200a5c0:	10800037 	ldwio	r2,0(r2)
 200a5c4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200a5c8:	e0bffd17 	ldw	r2,-12(fp)
 200a5cc:	1080c00c 	andi	r2,r2,768
 200a5d0:	10006d26 	beq	r2,zero,200a788 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200a5d4:	e0bffd17 	ldw	r2,-12(fp)
 200a5d8:	1080400c 	andi	r2,r2,256
 200a5dc:	10003526 	beq	r2,zero,200a6b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200a5e0:	00800074 	movhi	r2,1
 200a5e4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200a5e8:	e0bffb17 	ldw	r2,-20(fp)
 200a5ec:	10800a17 	ldw	r2,40(r2)
 200a5f0:	10800044 	addi	r2,r2,1
 200a5f4:	1081ffcc 	andi	r2,r2,2047
 200a5f8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 200a5fc:	e0bffb17 	ldw	r2,-20(fp)
 200a600:	10c00b17 	ldw	r3,44(r2)
 200a604:	e0bffe17 	ldw	r2,-8(fp)
 200a608:	18801526 	beq	r3,r2,200a660 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200a60c:	e0bffc17 	ldw	r2,-16(fp)
 200a610:	10800037 	ldwio	r2,0(r2)
 200a614:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200a618:	e0bff917 	ldw	r2,-28(fp)
 200a61c:	10a0000c 	andi	r2,r2,32768
 200a620:	10001126 	beq	r2,zero,200a668 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200a624:	e0bffb17 	ldw	r2,-20(fp)
 200a628:	10800a17 	ldw	r2,40(r2)
 200a62c:	e0fff917 	ldw	r3,-28(fp)
 200a630:	1809883a 	mov	r4,r3
 200a634:	e0fffb17 	ldw	r3,-20(fp)
 200a638:	1885883a 	add	r2,r3,r2
 200a63c:	10800e04 	addi	r2,r2,56
 200a640:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200a644:	e0bffb17 	ldw	r2,-20(fp)
 200a648:	10800a17 	ldw	r2,40(r2)
 200a64c:	10800044 	addi	r2,r2,1
 200a650:	10c1ffcc 	andi	r3,r2,2047
 200a654:	e0bffb17 	ldw	r2,-20(fp)
 200a658:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200a65c:	003fe206 	br	200a5e8 <__alt_mem_epcs_flash_controller+0xffff95e8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200a660:	0001883a 	nop
 200a664:	00000106 	br	200a66c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200a668:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200a66c:	e0bff917 	ldw	r2,-28(fp)
 200a670:	10bfffec 	andhi	r2,r2,65535
 200a674:	10000f26 	beq	r2,zero,200a6b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200a678:	e0bffb17 	ldw	r2,-20(fp)
 200a67c:	10c00817 	ldw	r3,32(r2)
 200a680:	00bfff84 	movi	r2,-2
 200a684:	1886703a 	and	r3,r3,r2
 200a688:	e0bffb17 	ldw	r2,-20(fp)
 200a68c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200a690:	e0bffc17 	ldw	r2,-16(fp)
 200a694:	10800104 	addi	r2,r2,4
 200a698:	1007883a 	mov	r3,r2
 200a69c:	e0bffb17 	ldw	r2,-20(fp)
 200a6a0:	10800817 	ldw	r2,32(r2)
 200a6a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200a6a8:	e0bffc17 	ldw	r2,-16(fp)
 200a6ac:	10800104 	addi	r2,r2,4
 200a6b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200a6b4:	e0bffd17 	ldw	r2,-12(fp)
 200a6b8:	1080800c 	andi	r2,r2,512
 200a6bc:	103fbe26 	beq	r2,zero,200a5b8 <__alt_mem_epcs_flash_controller+0xffff95b8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200a6c0:	e0bffd17 	ldw	r2,-12(fp)
 200a6c4:	1004d43a 	srli	r2,r2,16
 200a6c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200a6cc:	00001406 	br	200a720 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200a6d0:	e0bffc17 	ldw	r2,-16(fp)
 200a6d4:	e0fffb17 	ldw	r3,-20(fp)
 200a6d8:	18c00d17 	ldw	r3,52(r3)
 200a6dc:	e13ffb17 	ldw	r4,-20(fp)
 200a6e0:	20c7883a 	add	r3,r4,r3
 200a6e4:	18c20e04 	addi	r3,r3,2104
 200a6e8:	18c00003 	ldbu	r3,0(r3)
 200a6ec:	18c03fcc 	andi	r3,r3,255
 200a6f0:	18c0201c 	xori	r3,r3,128
 200a6f4:	18ffe004 	addi	r3,r3,-128
 200a6f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200a6fc:	e0bffb17 	ldw	r2,-20(fp)
 200a700:	10800d17 	ldw	r2,52(r2)
 200a704:	10800044 	addi	r2,r2,1
 200a708:	10c1ffcc 	andi	r3,r2,2047
 200a70c:	e0bffb17 	ldw	r2,-20(fp)
 200a710:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 200a714:	e0bffa17 	ldw	r2,-24(fp)
 200a718:	10bfffc4 	addi	r2,r2,-1
 200a71c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200a720:	e0bffa17 	ldw	r2,-24(fp)
 200a724:	10000526 	beq	r2,zero,200a73c <altera_avalon_jtag_uart_irq+0x1a8>
 200a728:	e0bffb17 	ldw	r2,-20(fp)
 200a72c:	10c00d17 	ldw	r3,52(r2)
 200a730:	e0bffb17 	ldw	r2,-20(fp)
 200a734:	10800c17 	ldw	r2,48(r2)
 200a738:	18bfe51e 	bne	r3,r2,200a6d0 <__alt_mem_epcs_flash_controller+0xffff96d0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200a73c:	e0bffa17 	ldw	r2,-24(fp)
 200a740:	103f9d26 	beq	r2,zero,200a5b8 <__alt_mem_epcs_flash_controller+0xffff95b8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200a744:	e0bffb17 	ldw	r2,-20(fp)
 200a748:	10c00817 	ldw	r3,32(r2)
 200a74c:	00bfff44 	movi	r2,-3
 200a750:	1886703a 	and	r3,r3,r2
 200a754:	e0bffb17 	ldw	r2,-20(fp)
 200a758:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200a75c:	e0bffb17 	ldw	r2,-20(fp)
 200a760:	10800017 	ldw	r2,0(r2)
 200a764:	10800104 	addi	r2,r2,4
 200a768:	1007883a 	mov	r3,r2
 200a76c:	e0bffb17 	ldw	r2,-20(fp)
 200a770:	10800817 	ldw	r2,32(r2)
 200a774:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200a778:	e0bffc17 	ldw	r2,-16(fp)
 200a77c:	10800104 	addi	r2,r2,4
 200a780:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200a784:	003f8c06 	br	200a5b8 <__alt_mem_epcs_flash_controller+0xffff95b8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 200a788:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 200a78c:	0001883a 	nop
 200a790:	e037883a 	mov	sp,fp
 200a794:	df000017 	ldw	fp,0(sp)
 200a798:	dec00104 	addi	sp,sp,4
 200a79c:	f800283a 	ret

0200a7a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200a7a0:	defff804 	addi	sp,sp,-32
 200a7a4:	df000715 	stw	fp,28(sp)
 200a7a8:	df000704 	addi	fp,sp,28
 200a7ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200a7b0:	e0bffb17 	ldw	r2,-20(fp)
 200a7b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200a7b8:	e0bff917 	ldw	r2,-28(fp)
 200a7bc:	10800017 	ldw	r2,0(r2)
 200a7c0:	10800104 	addi	r2,r2,4
 200a7c4:	10800037 	ldwio	r2,0(r2)
 200a7c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200a7cc:	e0bffa17 	ldw	r2,-24(fp)
 200a7d0:	1081000c 	andi	r2,r2,1024
 200a7d4:	10000b26 	beq	r2,zero,200a804 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200a7d8:	e0bff917 	ldw	r2,-28(fp)
 200a7dc:	10800017 	ldw	r2,0(r2)
 200a7e0:	10800104 	addi	r2,r2,4
 200a7e4:	1007883a 	mov	r3,r2
 200a7e8:	e0bff917 	ldw	r2,-28(fp)
 200a7ec:	10800817 	ldw	r2,32(r2)
 200a7f0:	10810014 	ori	r2,r2,1024
 200a7f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 200a7f8:	e0bff917 	ldw	r2,-28(fp)
 200a7fc:	10000915 	stw	zero,36(r2)
 200a800:	00000a06 	br	200a82c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200a804:	e0bff917 	ldw	r2,-28(fp)
 200a808:	10c00917 	ldw	r3,36(r2)
 200a80c:	00a00034 	movhi	r2,32768
 200a810:	10bfff04 	addi	r2,r2,-4
 200a814:	10c00536 	bltu	r2,r3,200a82c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 200a818:	e0bff917 	ldw	r2,-28(fp)
 200a81c:	10800917 	ldw	r2,36(r2)
 200a820:	10c00044 	addi	r3,r2,1
 200a824:	e0bff917 	ldw	r2,-28(fp)
 200a828:	10c00915 	stw	r3,36(r2)
 200a82c:	d0a01417 	ldw	r2,-32688(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200a830:	e037883a 	mov	sp,fp
 200a834:	df000017 	ldw	fp,0(sp)
 200a838:	dec00104 	addi	sp,sp,4
 200a83c:	f800283a 	ret

0200a840 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200a840:	defffd04 	addi	sp,sp,-12
 200a844:	df000215 	stw	fp,8(sp)
 200a848:	df000204 	addi	fp,sp,8
 200a84c:	e13ffe15 	stw	r4,-8(fp)
 200a850:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200a854:	00000506 	br	200a86c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200a858:	e0bfff17 	ldw	r2,-4(fp)
 200a85c:	1090000c 	andi	r2,r2,16384
 200a860:	10000226 	beq	r2,zero,200a86c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200a864:	00bffd44 	movi	r2,-11
 200a868:	00000b06 	br	200a898 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200a86c:	e0bffe17 	ldw	r2,-8(fp)
 200a870:	10c00d17 	ldw	r3,52(r2)
 200a874:	e0bffe17 	ldw	r2,-8(fp)
 200a878:	10800c17 	ldw	r2,48(r2)
 200a87c:	18800526 	beq	r3,r2,200a894 <altera_avalon_jtag_uart_close+0x54>
 200a880:	e0bffe17 	ldw	r2,-8(fp)
 200a884:	10c00917 	ldw	r3,36(r2)
 200a888:	e0bffe17 	ldw	r2,-8(fp)
 200a88c:	10800117 	ldw	r2,4(r2)
 200a890:	18bff136 	bltu	r3,r2,200a858 <__alt_mem_epcs_flash_controller+0xffff9858>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200a894:	0005883a 	mov	r2,zero
}
 200a898:	e037883a 	mov	sp,fp
 200a89c:	df000017 	ldw	fp,0(sp)
 200a8a0:	dec00104 	addi	sp,sp,4
 200a8a4:	f800283a 	ret

0200a8a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200a8a8:	defffa04 	addi	sp,sp,-24
 200a8ac:	df000515 	stw	fp,20(sp)
 200a8b0:	df000504 	addi	fp,sp,20
 200a8b4:	e13ffd15 	stw	r4,-12(fp)
 200a8b8:	e17ffe15 	stw	r5,-8(fp)
 200a8bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 200a8c0:	00bff9c4 	movi	r2,-25
 200a8c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 200a8c8:	e0bffe17 	ldw	r2,-8(fp)
 200a8cc:	10da8060 	cmpeqi	r3,r2,27137
 200a8d0:	1800031e 	bne	r3,zero,200a8e0 <altera_avalon_jtag_uart_ioctl+0x38>
 200a8d4:	109a80a0 	cmpeqi	r2,r2,27138
 200a8d8:	1000181e 	bne	r2,zero,200a93c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 200a8dc:	00002906 	br	200a984 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200a8e0:	e0bffd17 	ldw	r2,-12(fp)
 200a8e4:	10c00117 	ldw	r3,4(r2)
 200a8e8:	00a00034 	movhi	r2,32768
 200a8ec:	10bfffc4 	addi	r2,r2,-1
 200a8f0:	18802126 	beq	r3,r2,200a978 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 200a8f4:	e0bfff17 	ldw	r2,-4(fp)
 200a8f8:	10800017 	ldw	r2,0(r2)
 200a8fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200a900:	e0bffc17 	ldw	r2,-16(fp)
 200a904:	10800090 	cmplti	r2,r2,2
 200a908:	1000061e 	bne	r2,zero,200a924 <altera_avalon_jtag_uart_ioctl+0x7c>
 200a90c:	e0fffc17 	ldw	r3,-16(fp)
 200a910:	00a00034 	movhi	r2,32768
 200a914:	10bfffc4 	addi	r2,r2,-1
 200a918:	18800226 	beq	r3,r2,200a924 <altera_avalon_jtag_uart_ioctl+0x7c>
 200a91c:	e0bffc17 	ldw	r2,-16(fp)
 200a920:	00000206 	br	200a92c <altera_avalon_jtag_uart_ioctl+0x84>
 200a924:	00a00034 	movhi	r2,32768
 200a928:	10bfff84 	addi	r2,r2,-2
 200a92c:	e0fffd17 	ldw	r3,-12(fp)
 200a930:	18800115 	stw	r2,4(r3)
      rc = 0;
 200a934:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200a938:	00000f06 	br	200a978 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200a93c:	e0bffd17 	ldw	r2,-12(fp)
 200a940:	10c00117 	ldw	r3,4(r2)
 200a944:	00a00034 	movhi	r2,32768
 200a948:	10bfffc4 	addi	r2,r2,-1
 200a94c:	18800c26 	beq	r3,r2,200a980 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200a950:	e0bffd17 	ldw	r2,-12(fp)
 200a954:	10c00917 	ldw	r3,36(r2)
 200a958:	e0bffd17 	ldw	r2,-12(fp)
 200a95c:	10800117 	ldw	r2,4(r2)
 200a960:	1885803a 	cmpltu	r2,r3,r2
 200a964:	10c03fcc 	andi	r3,r2,255
 200a968:	e0bfff17 	ldw	r2,-4(fp)
 200a96c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200a970:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200a974:	00000206 	br	200a980 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 200a978:	0001883a 	nop
 200a97c:	00000106 	br	200a984 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 200a980:	0001883a 	nop

  default:
    break;
  }

  return rc;
 200a984:	e0bffb17 	ldw	r2,-20(fp)
}
 200a988:	e037883a 	mov	sp,fp
 200a98c:	df000017 	ldw	fp,0(sp)
 200a990:	dec00104 	addi	sp,sp,4
 200a994:	f800283a 	ret

0200a998 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200a998:	defff304 	addi	sp,sp,-52
 200a99c:	dfc00c15 	stw	ra,48(sp)
 200a9a0:	df000b15 	stw	fp,44(sp)
 200a9a4:	df000b04 	addi	fp,sp,44
 200a9a8:	e13ffc15 	stw	r4,-16(fp)
 200a9ac:	e17ffd15 	stw	r5,-12(fp)
 200a9b0:	e1bffe15 	stw	r6,-8(fp)
 200a9b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 200a9b8:	e0bffd17 	ldw	r2,-12(fp)
 200a9bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200a9c0:	00004706 	br	200aae0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200a9c4:	e0bffc17 	ldw	r2,-16(fp)
 200a9c8:	10800a17 	ldw	r2,40(r2)
 200a9cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200a9d0:	e0bffc17 	ldw	r2,-16(fp)
 200a9d4:	10800b17 	ldw	r2,44(r2)
 200a9d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 200a9dc:	e0fff717 	ldw	r3,-36(fp)
 200a9e0:	e0bff817 	ldw	r2,-32(fp)
 200a9e4:	18800536 	bltu	r3,r2,200a9fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 200a9e8:	e0fff717 	ldw	r3,-36(fp)
 200a9ec:	e0bff817 	ldw	r2,-32(fp)
 200a9f0:	1885c83a 	sub	r2,r3,r2
 200a9f4:	e0bff615 	stw	r2,-40(fp)
 200a9f8:	00000406 	br	200aa0c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200a9fc:	00c20004 	movi	r3,2048
 200aa00:	e0bff817 	ldw	r2,-32(fp)
 200aa04:	1885c83a 	sub	r2,r3,r2
 200aa08:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200aa0c:	e0bff617 	ldw	r2,-40(fp)
 200aa10:	10001e26 	beq	r2,zero,200aa8c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 200aa14:	e0fffe17 	ldw	r3,-8(fp)
 200aa18:	e0bff617 	ldw	r2,-40(fp)
 200aa1c:	1880022e 	bgeu	r3,r2,200aa28 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 200aa20:	e0bffe17 	ldw	r2,-8(fp)
 200aa24:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200aa28:	e0bffc17 	ldw	r2,-16(fp)
 200aa2c:	10c00e04 	addi	r3,r2,56
 200aa30:	e0bff817 	ldw	r2,-32(fp)
 200aa34:	1885883a 	add	r2,r3,r2
 200aa38:	e1bff617 	ldw	r6,-40(fp)
 200aa3c:	100b883a 	mov	r5,r2
 200aa40:	e13ff517 	ldw	r4,-44(fp)
 200aa44:	200ced40 	call	200ced4 <memcpy>
      ptr   += n;
 200aa48:	e0fff517 	ldw	r3,-44(fp)
 200aa4c:	e0bff617 	ldw	r2,-40(fp)
 200aa50:	1885883a 	add	r2,r3,r2
 200aa54:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 200aa58:	e0fffe17 	ldw	r3,-8(fp)
 200aa5c:	e0bff617 	ldw	r2,-40(fp)
 200aa60:	1885c83a 	sub	r2,r3,r2
 200aa64:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200aa68:	e0fff817 	ldw	r3,-32(fp)
 200aa6c:	e0bff617 	ldw	r2,-40(fp)
 200aa70:	1885883a 	add	r2,r3,r2
 200aa74:	10c1ffcc 	andi	r3,r2,2047
 200aa78:	e0bffc17 	ldw	r2,-16(fp)
 200aa7c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200aa80:	e0bffe17 	ldw	r2,-8(fp)
 200aa84:	00bfcf16 	blt	zero,r2,200a9c4 <__alt_mem_epcs_flash_controller+0xffff99c4>
 200aa88:	00000106 	br	200aa90 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 200aa8c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 200aa90:	e0fff517 	ldw	r3,-44(fp)
 200aa94:	e0bffd17 	ldw	r2,-12(fp)
 200aa98:	1880141e 	bne	r3,r2,200aaec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200aa9c:	e0bfff17 	ldw	r2,-4(fp)
 200aaa0:	1090000c 	andi	r2,r2,16384
 200aaa4:	1000131e 	bne	r2,zero,200aaf4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200aaa8:	0001883a 	nop
 200aaac:	e0bffc17 	ldw	r2,-16(fp)
 200aab0:	10c00a17 	ldw	r3,40(r2)
 200aab4:	e0bff717 	ldw	r2,-36(fp)
 200aab8:	1880051e 	bne	r3,r2,200aad0 <altera_avalon_jtag_uart_read+0x138>
 200aabc:	e0bffc17 	ldw	r2,-16(fp)
 200aac0:	10c00917 	ldw	r3,36(r2)
 200aac4:	e0bffc17 	ldw	r2,-16(fp)
 200aac8:	10800117 	ldw	r2,4(r2)
 200aacc:	18bff736 	bltu	r3,r2,200aaac <__alt_mem_epcs_flash_controller+0xffff9aac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200aad0:	e0bffc17 	ldw	r2,-16(fp)
 200aad4:	10c00a17 	ldw	r3,40(r2)
 200aad8:	e0bff717 	ldw	r2,-36(fp)
 200aadc:	18800726 	beq	r3,r2,200aafc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200aae0:	e0bffe17 	ldw	r2,-8(fp)
 200aae4:	00bfb716 	blt	zero,r2,200a9c4 <__alt_mem_epcs_flash_controller+0xffff99c4>
 200aae8:	00000506 	br	200ab00 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 200aaec:	0001883a 	nop
 200aaf0:	00000306 	br	200ab00 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 200aaf4:	0001883a 	nop
 200aaf8:	00000106 	br	200ab00 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 200aafc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200ab00:	e0fff517 	ldw	r3,-44(fp)
 200ab04:	e0bffd17 	ldw	r2,-12(fp)
 200ab08:	18801826 	beq	r3,r2,200ab6c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ab0c:	0005303a 	rdctl	r2,status
 200ab10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ab14:	e0fffb17 	ldw	r3,-20(fp)
 200ab18:	00bfff84 	movi	r2,-2
 200ab1c:	1884703a 	and	r2,r3,r2
 200ab20:	1001703a 	wrctl	status,r2
  
  return context;
 200ab24:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200ab28:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200ab2c:	e0bffc17 	ldw	r2,-16(fp)
 200ab30:	10800817 	ldw	r2,32(r2)
 200ab34:	10c00054 	ori	r3,r2,1
 200ab38:	e0bffc17 	ldw	r2,-16(fp)
 200ab3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200ab40:	e0bffc17 	ldw	r2,-16(fp)
 200ab44:	10800017 	ldw	r2,0(r2)
 200ab48:	10800104 	addi	r2,r2,4
 200ab4c:	1007883a 	mov	r3,r2
 200ab50:	e0bffc17 	ldw	r2,-16(fp)
 200ab54:	10800817 	ldw	r2,32(r2)
 200ab58:	18800035 	stwio	r2,0(r3)
 200ab5c:	e0bffa17 	ldw	r2,-24(fp)
 200ab60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ab64:	e0bff917 	ldw	r2,-28(fp)
 200ab68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200ab6c:	e0fff517 	ldw	r3,-44(fp)
 200ab70:	e0bffd17 	ldw	r2,-12(fp)
 200ab74:	18800426 	beq	r3,r2,200ab88 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 200ab78:	e0fff517 	ldw	r3,-44(fp)
 200ab7c:	e0bffd17 	ldw	r2,-12(fp)
 200ab80:	1885c83a 	sub	r2,r3,r2
 200ab84:	00000606 	br	200aba0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 200ab88:	e0bfff17 	ldw	r2,-4(fp)
 200ab8c:	1090000c 	andi	r2,r2,16384
 200ab90:	10000226 	beq	r2,zero,200ab9c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 200ab94:	00bffd44 	movi	r2,-11
 200ab98:	00000106 	br	200aba0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 200ab9c:	00bffec4 	movi	r2,-5
}
 200aba0:	e037883a 	mov	sp,fp
 200aba4:	dfc00117 	ldw	ra,4(sp)
 200aba8:	df000017 	ldw	fp,0(sp)
 200abac:	dec00204 	addi	sp,sp,8
 200abb0:	f800283a 	ret

0200abb4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200abb4:	defff304 	addi	sp,sp,-52
 200abb8:	dfc00c15 	stw	ra,48(sp)
 200abbc:	df000b15 	stw	fp,44(sp)
 200abc0:	df000b04 	addi	fp,sp,44
 200abc4:	e13ffc15 	stw	r4,-16(fp)
 200abc8:	e17ffd15 	stw	r5,-12(fp)
 200abcc:	e1bffe15 	stw	r6,-8(fp)
 200abd0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200abd4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200abd8:	e0bffd17 	ldw	r2,-12(fp)
 200abdc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200abe0:	00003706 	br	200acc0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200abe4:	e0bffc17 	ldw	r2,-16(fp)
 200abe8:	10800c17 	ldw	r2,48(r2)
 200abec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 200abf0:	e0bffc17 	ldw	r2,-16(fp)
 200abf4:	10800d17 	ldw	r2,52(r2)
 200abf8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 200abfc:	e0fff917 	ldw	r3,-28(fp)
 200ac00:	e0bff517 	ldw	r2,-44(fp)
 200ac04:	1880062e 	bgeu	r3,r2,200ac20 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 200ac08:	e0fff517 	ldw	r3,-44(fp)
 200ac0c:	e0bff917 	ldw	r2,-28(fp)
 200ac10:	1885c83a 	sub	r2,r3,r2
 200ac14:	10bfffc4 	addi	r2,r2,-1
 200ac18:	e0bff615 	stw	r2,-40(fp)
 200ac1c:	00000b06 	br	200ac4c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 200ac20:	e0bff517 	ldw	r2,-44(fp)
 200ac24:	10000526 	beq	r2,zero,200ac3c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200ac28:	00c20004 	movi	r3,2048
 200ac2c:	e0bff917 	ldw	r2,-28(fp)
 200ac30:	1885c83a 	sub	r2,r3,r2
 200ac34:	e0bff615 	stw	r2,-40(fp)
 200ac38:	00000406 	br	200ac4c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200ac3c:	00c1ffc4 	movi	r3,2047
 200ac40:	e0bff917 	ldw	r2,-28(fp)
 200ac44:	1885c83a 	sub	r2,r3,r2
 200ac48:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200ac4c:	e0bff617 	ldw	r2,-40(fp)
 200ac50:	10001e26 	beq	r2,zero,200accc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 200ac54:	e0fffe17 	ldw	r3,-8(fp)
 200ac58:	e0bff617 	ldw	r2,-40(fp)
 200ac5c:	1880022e 	bgeu	r3,r2,200ac68 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 200ac60:	e0bffe17 	ldw	r2,-8(fp)
 200ac64:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200ac68:	e0bffc17 	ldw	r2,-16(fp)
 200ac6c:	10c20e04 	addi	r3,r2,2104
 200ac70:	e0bff917 	ldw	r2,-28(fp)
 200ac74:	1885883a 	add	r2,r3,r2
 200ac78:	e1bff617 	ldw	r6,-40(fp)
 200ac7c:	e17ffd17 	ldw	r5,-12(fp)
 200ac80:	1009883a 	mov	r4,r2
 200ac84:	200ced40 	call	200ced4 <memcpy>
      ptr   += n;
 200ac88:	e0fffd17 	ldw	r3,-12(fp)
 200ac8c:	e0bff617 	ldw	r2,-40(fp)
 200ac90:	1885883a 	add	r2,r3,r2
 200ac94:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 200ac98:	e0fffe17 	ldw	r3,-8(fp)
 200ac9c:	e0bff617 	ldw	r2,-40(fp)
 200aca0:	1885c83a 	sub	r2,r3,r2
 200aca4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200aca8:	e0fff917 	ldw	r3,-28(fp)
 200acac:	e0bff617 	ldw	r2,-40(fp)
 200acb0:	1885883a 	add	r2,r3,r2
 200acb4:	10c1ffcc 	andi	r3,r2,2047
 200acb8:	e0bffc17 	ldw	r2,-16(fp)
 200acbc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200acc0:	e0bffe17 	ldw	r2,-8(fp)
 200acc4:	00bfc716 	blt	zero,r2,200abe4 <__alt_mem_epcs_flash_controller+0xffff9be4>
 200acc8:	00000106 	br	200acd0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 200accc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200acd0:	0005303a 	rdctl	r2,status
 200acd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200acd8:	e0fffb17 	ldw	r3,-20(fp)
 200acdc:	00bfff84 	movi	r2,-2
 200ace0:	1884703a 	and	r2,r3,r2
 200ace4:	1001703a 	wrctl	status,r2
  
  return context;
 200ace8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200acec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200acf0:	e0bffc17 	ldw	r2,-16(fp)
 200acf4:	10800817 	ldw	r2,32(r2)
 200acf8:	10c00094 	ori	r3,r2,2
 200acfc:	e0bffc17 	ldw	r2,-16(fp)
 200ad00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200ad04:	e0bffc17 	ldw	r2,-16(fp)
 200ad08:	10800017 	ldw	r2,0(r2)
 200ad0c:	10800104 	addi	r2,r2,4
 200ad10:	1007883a 	mov	r3,r2
 200ad14:	e0bffc17 	ldw	r2,-16(fp)
 200ad18:	10800817 	ldw	r2,32(r2)
 200ad1c:	18800035 	stwio	r2,0(r3)
 200ad20:	e0bffa17 	ldw	r2,-24(fp)
 200ad24:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ad28:	e0bff817 	ldw	r2,-32(fp)
 200ad2c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200ad30:	e0bffe17 	ldw	r2,-8(fp)
 200ad34:	0080100e 	bge	zero,r2,200ad78 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 200ad38:	e0bfff17 	ldw	r2,-4(fp)
 200ad3c:	1090000c 	andi	r2,r2,16384
 200ad40:	1000101e 	bne	r2,zero,200ad84 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200ad44:	0001883a 	nop
 200ad48:	e0bffc17 	ldw	r2,-16(fp)
 200ad4c:	10c00d17 	ldw	r3,52(r2)
 200ad50:	e0bff517 	ldw	r2,-44(fp)
 200ad54:	1880051e 	bne	r3,r2,200ad6c <altera_avalon_jtag_uart_write+0x1b8>
 200ad58:	e0bffc17 	ldw	r2,-16(fp)
 200ad5c:	10c00917 	ldw	r3,36(r2)
 200ad60:	e0bffc17 	ldw	r2,-16(fp)
 200ad64:	10800117 	ldw	r2,4(r2)
 200ad68:	18bff736 	bltu	r3,r2,200ad48 <__alt_mem_epcs_flash_controller+0xffff9d48>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 200ad6c:	e0bffc17 	ldw	r2,-16(fp)
 200ad70:	10800917 	ldw	r2,36(r2)
 200ad74:	1000051e 	bne	r2,zero,200ad8c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 200ad78:	e0bffe17 	ldw	r2,-8(fp)
 200ad7c:	00bfd016 	blt	zero,r2,200acc0 <__alt_mem_epcs_flash_controller+0xffff9cc0>
 200ad80:	00000306 	br	200ad90 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 200ad84:	0001883a 	nop
 200ad88:	00000106 	br	200ad90 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 200ad8c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200ad90:	e0fffd17 	ldw	r3,-12(fp)
 200ad94:	e0bff717 	ldw	r2,-36(fp)
 200ad98:	18800426 	beq	r3,r2,200adac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 200ad9c:	e0fffd17 	ldw	r3,-12(fp)
 200ada0:	e0bff717 	ldw	r2,-36(fp)
 200ada4:	1885c83a 	sub	r2,r3,r2
 200ada8:	00000606 	br	200adc4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 200adac:	e0bfff17 	ldw	r2,-4(fp)
 200adb0:	1090000c 	andi	r2,r2,16384
 200adb4:	10000226 	beq	r2,zero,200adc0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 200adb8:	00bffd44 	movi	r2,-11
 200adbc:	00000106 	br	200adc4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 200adc0:	00bffec4 	movi	r2,-5
}
 200adc4:	e037883a 	mov	sp,fp
 200adc8:	dfc00117 	ldw	ra,4(sp)
 200adcc:	df000017 	ldw	fp,0(sp)
 200add0:	dec00204 	addi	sp,sp,8
 200add4:	f800283a 	ret

0200add8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200add8:	defffa04 	addi	sp,sp,-24
 200addc:	dfc00515 	stw	ra,20(sp)
 200ade0:	df000415 	stw	fp,16(sp)
 200ade4:	df000404 	addi	fp,sp,16
 200ade8:	e13ffd15 	stw	r4,-12(fp)
 200adec:	e17ffe15 	stw	r5,-8(fp)
 200adf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 200adf4:	e0bffd17 	ldw	r2,-12(fp)
 200adf8:	10800017 	ldw	r2,0(r2)
 200adfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 200ae00:	e0bffc17 	ldw	r2,-16(fp)
 200ae04:	10c00a04 	addi	r3,r2,40
 200ae08:	e0bffd17 	ldw	r2,-12(fp)
 200ae0c:	10800217 	ldw	r2,8(r2)
 200ae10:	100f883a 	mov	r7,r2
 200ae14:	e1bfff17 	ldw	r6,-4(fp)
 200ae18:	e17ffe17 	ldw	r5,-8(fp)
 200ae1c:	1809883a 	mov	r4,r3
 200ae20:	200b2ec0 	call	200b2ec <altera_avalon_uart_read>
      fd->fd_flags);
}
 200ae24:	e037883a 	mov	sp,fp
 200ae28:	dfc00117 	ldw	ra,4(sp)
 200ae2c:	df000017 	ldw	fp,0(sp)
 200ae30:	dec00204 	addi	sp,sp,8
 200ae34:	f800283a 	ret

0200ae38 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200ae38:	defffa04 	addi	sp,sp,-24
 200ae3c:	dfc00515 	stw	ra,20(sp)
 200ae40:	df000415 	stw	fp,16(sp)
 200ae44:	df000404 	addi	fp,sp,16
 200ae48:	e13ffd15 	stw	r4,-12(fp)
 200ae4c:	e17ffe15 	stw	r5,-8(fp)
 200ae50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 200ae54:	e0bffd17 	ldw	r2,-12(fp)
 200ae58:	10800017 	ldw	r2,0(r2)
 200ae5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 200ae60:	e0bffc17 	ldw	r2,-16(fp)
 200ae64:	10c00a04 	addi	r3,r2,40
 200ae68:	e0bffd17 	ldw	r2,-12(fp)
 200ae6c:	10800217 	ldw	r2,8(r2)
 200ae70:	100f883a 	mov	r7,r2
 200ae74:	e1bfff17 	ldw	r6,-4(fp)
 200ae78:	e17ffe17 	ldw	r5,-8(fp)
 200ae7c:	1809883a 	mov	r4,r3
 200ae80:	200b5040 	call	200b504 <altera_avalon_uart_write>
      fd->fd_flags);
}
 200ae84:	e037883a 	mov	sp,fp
 200ae88:	dfc00117 	ldw	ra,4(sp)
 200ae8c:	df000017 	ldw	fp,0(sp)
 200ae90:	dec00204 	addi	sp,sp,8
 200ae94:	f800283a 	ret

0200ae98 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 200ae98:	defffc04 	addi	sp,sp,-16
 200ae9c:	dfc00315 	stw	ra,12(sp)
 200aea0:	df000215 	stw	fp,8(sp)
 200aea4:	df000204 	addi	fp,sp,8
 200aea8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 200aeac:	e0bfff17 	ldw	r2,-4(fp)
 200aeb0:	10800017 	ldw	r2,0(r2)
 200aeb4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 200aeb8:	e0bffe17 	ldw	r2,-8(fp)
 200aebc:	10c00a04 	addi	r3,r2,40
 200aec0:	e0bfff17 	ldw	r2,-4(fp)
 200aec4:	10800217 	ldw	r2,8(r2)
 200aec8:	100b883a 	mov	r5,r2
 200aecc:	1809883a 	mov	r4,r3
 200aed0:	200b25c0 	call	200b25c <altera_avalon_uart_close>
}
 200aed4:	e037883a 	mov	sp,fp
 200aed8:	dfc00117 	ldw	ra,4(sp)
 200aedc:	df000017 	ldw	fp,0(sp)
 200aee0:	dec00204 	addi	sp,sp,8
 200aee4:	f800283a 	ret

0200aee8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 200aee8:	defff804 	addi	sp,sp,-32
 200aeec:	dfc00715 	stw	ra,28(sp)
 200aef0:	df000615 	stw	fp,24(sp)
 200aef4:	df000604 	addi	fp,sp,24
 200aef8:	e13ffd15 	stw	r4,-12(fp)
 200aefc:	e17ffe15 	stw	r5,-8(fp)
 200af00:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 200af04:	e0bffd17 	ldw	r2,-12(fp)
 200af08:	10800017 	ldw	r2,0(r2)
 200af0c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 200af10:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 200af14:	1000041e 	bne	r2,zero,200af28 <altera_avalon_uart_init+0x40>
 200af18:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 200af1c:	1000021e 	bne	r2,zero,200af28 <altera_avalon_uart_init+0x40>
 200af20:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 200af24:	10000226 	beq	r2,zero,200af30 <altera_avalon_uart_init+0x48>
 200af28:	00800044 	movi	r2,1
 200af2c:	00000106 	br	200af34 <altera_avalon_uart_init+0x4c>
 200af30:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 200af34:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 200af38:	e0bffc17 	ldw	r2,-16(fp)
 200af3c:	10000f1e 	bne	r2,zero,200af7c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 200af40:	e0bffd17 	ldw	r2,-12(fp)
 200af44:	00c32004 	movi	r3,3200
 200af48:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 200af4c:	e0bffb17 	ldw	r2,-20(fp)
 200af50:	10800304 	addi	r2,r2,12
 200af54:	e0fffd17 	ldw	r3,-12(fp)
 200af58:	18c00117 	ldw	r3,4(r3)
 200af5c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 200af60:	d8000015 	stw	zero,0(sp)
 200af64:	e1fffd17 	ldw	r7,-12(fp)
 200af68:	01808074 	movhi	r6,513
 200af6c:	31abe504 	addi	r6,r6,-20588
 200af70:	e17fff17 	ldw	r5,-4(fp)
 200af74:	e13ffe17 	ldw	r4,-8(fp)
 200af78:	20093580 	call	2009358 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 200af7c:	0001883a 	nop
 200af80:	e037883a 	mov	sp,fp
 200af84:	dfc00117 	ldw	ra,4(sp)
 200af88:	df000017 	ldw	fp,0(sp)
 200af8c:	dec00204 	addi	sp,sp,8
 200af90:	f800283a 	ret

0200af94 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 200af94:	defffa04 	addi	sp,sp,-24
 200af98:	dfc00515 	stw	ra,20(sp)
 200af9c:	df000415 	stw	fp,16(sp)
 200afa0:	df000404 	addi	fp,sp,16
 200afa4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 200afa8:	e0bfff17 	ldw	r2,-4(fp)
 200afac:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 200afb0:	e0bffc17 	ldw	r2,-16(fp)
 200afb4:	10800017 	ldw	r2,0(r2)
 200afb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 200afbc:	e0bffd17 	ldw	r2,-12(fp)
 200afc0:	10800204 	addi	r2,r2,8
 200afc4:	10800037 	ldwio	r2,0(r2)
 200afc8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 200afcc:	e0bffd17 	ldw	r2,-12(fp)
 200afd0:	10800204 	addi	r2,r2,8
 200afd4:	0007883a 	mov	r3,zero
 200afd8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 200afdc:	e0bffd17 	ldw	r2,-12(fp)
 200afe0:	10800204 	addi	r2,r2,8
 200afe4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 200afe8:	e0bffe17 	ldw	r2,-8(fp)
 200afec:	1080200c 	andi	r2,r2,128
 200aff0:	10000326 	beq	r2,zero,200b000 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 200aff4:	e17ffe17 	ldw	r5,-8(fp)
 200aff8:	e13ffc17 	ldw	r4,-16(fp)
 200affc:	200b0300 	call	200b030 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 200b000:	e0bffe17 	ldw	r2,-8(fp)
 200b004:	1081100c 	andi	r2,r2,1088
 200b008:	10000326 	beq	r2,zero,200b018 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 200b00c:	e17ffe17 	ldw	r5,-8(fp)
 200b010:	e13ffc17 	ldw	r4,-16(fp)
 200b014:	200b1140 	call	200b114 <altera_avalon_uart_txirq>
  }
  

}
 200b018:	0001883a 	nop
 200b01c:	e037883a 	mov	sp,fp
 200b020:	dfc00117 	ldw	ra,4(sp)
 200b024:	df000017 	ldw	fp,0(sp)
 200b028:	dec00204 	addi	sp,sp,8
 200b02c:	f800283a 	ret

0200b030 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 200b030:	defffc04 	addi	sp,sp,-16
 200b034:	df000315 	stw	fp,12(sp)
 200b038:	df000304 	addi	fp,sp,12
 200b03c:	e13ffe15 	stw	r4,-8(fp)
 200b040:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 200b044:	e0bfff17 	ldw	r2,-4(fp)
 200b048:	108000cc 	andi	r2,r2,3
 200b04c:	10002c1e 	bne	r2,zero,200b100 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 200b050:	e0bffe17 	ldw	r2,-8(fp)
 200b054:	10800317 	ldw	r2,12(r2)
 200b058:	e0bffe17 	ldw	r2,-8(fp)
 200b05c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 200b060:	e0bffe17 	ldw	r2,-8(fp)
 200b064:	10800317 	ldw	r2,12(r2)
 200b068:	10800044 	addi	r2,r2,1
 200b06c:	10800fcc 	andi	r2,r2,63
 200b070:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 200b074:	e0bffe17 	ldw	r2,-8(fp)
 200b078:	10800317 	ldw	r2,12(r2)
 200b07c:	e0fffe17 	ldw	r3,-8(fp)
 200b080:	18c00017 	ldw	r3,0(r3)
 200b084:	18c00037 	ldwio	r3,0(r3)
 200b088:	1809883a 	mov	r4,r3
 200b08c:	e0fffe17 	ldw	r3,-8(fp)
 200b090:	1885883a 	add	r2,r3,r2
 200b094:	10800704 	addi	r2,r2,28
 200b098:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 200b09c:	e0bffe17 	ldw	r2,-8(fp)
 200b0a0:	e0fffd17 	ldw	r3,-12(fp)
 200b0a4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 200b0a8:	e0bffe17 	ldw	r2,-8(fp)
 200b0ac:	10800317 	ldw	r2,12(r2)
 200b0b0:	10800044 	addi	r2,r2,1
 200b0b4:	10800fcc 	andi	r2,r2,63
 200b0b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 200b0bc:	e0bffe17 	ldw	r2,-8(fp)
 200b0c0:	10c00217 	ldw	r3,8(r2)
 200b0c4:	e0bffd17 	ldw	r2,-12(fp)
 200b0c8:	18800e1e 	bne	r3,r2,200b104 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 200b0cc:	e0bffe17 	ldw	r2,-8(fp)
 200b0d0:	10c00117 	ldw	r3,4(r2)
 200b0d4:	00bfdfc4 	movi	r2,-129
 200b0d8:	1886703a 	and	r3,r3,r2
 200b0dc:	e0bffe17 	ldw	r2,-8(fp)
 200b0e0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 200b0e4:	e0bffe17 	ldw	r2,-8(fp)
 200b0e8:	10800017 	ldw	r2,0(r2)
 200b0ec:	10800304 	addi	r2,r2,12
 200b0f0:	e0fffe17 	ldw	r3,-8(fp)
 200b0f4:	18c00117 	ldw	r3,4(r3)
 200b0f8:	10c00035 	stwio	r3,0(r2)
 200b0fc:	00000106 	br	200b104 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 200b100:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 200b104:	e037883a 	mov	sp,fp
 200b108:	df000017 	ldw	fp,0(sp)
 200b10c:	dec00104 	addi	sp,sp,4
 200b110:	f800283a 	ret

0200b114 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 200b114:	defffb04 	addi	sp,sp,-20
 200b118:	df000415 	stw	fp,16(sp)
 200b11c:	df000404 	addi	fp,sp,16
 200b120:	e13ffc15 	stw	r4,-16(fp)
 200b124:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 200b128:	e0bffc17 	ldw	r2,-16(fp)
 200b12c:	10c00417 	ldw	r3,16(r2)
 200b130:	e0bffc17 	ldw	r2,-16(fp)
 200b134:	10800517 	ldw	r2,20(r2)
 200b138:	18803226 	beq	r3,r2,200b204 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 200b13c:	e0bffc17 	ldw	r2,-16(fp)
 200b140:	10800617 	ldw	r2,24(r2)
 200b144:	1080008c 	andi	r2,r2,2
 200b148:	10000326 	beq	r2,zero,200b158 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 200b14c:	e0bffd17 	ldw	r2,-12(fp)
 200b150:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 200b154:	10001d26 	beq	r2,zero,200b1cc <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 200b158:	e0bffc17 	ldw	r2,-16(fp)
 200b15c:	10800417 	ldw	r2,16(r2)
 200b160:	e0bffc17 	ldw	r2,-16(fp)
 200b164:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 200b168:	e0bffc17 	ldw	r2,-16(fp)
 200b16c:	10800017 	ldw	r2,0(r2)
 200b170:	10800104 	addi	r2,r2,4
 200b174:	e0fffc17 	ldw	r3,-16(fp)
 200b178:	18c00417 	ldw	r3,16(r3)
 200b17c:	e13ffc17 	ldw	r4,-16(fp)
 200b180:	20c7883a 	add	r3,r4,r3
 200b184:	18c01704 	addi	r3,r3,92
 200b188:	18c00003 	ldbu	r3,0(r3)
 200b18c:	18c03fcc 	andi	r3,r3,255
 200b190:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 200b194:	e0bffc17 	ldw	r2,-16(fp)
 200b198:	10800417 	ldw	r2,16(r2)
 200b19c:	10800044 	addi	r2,r2,1
 200b1a0:	e0fffc17 	ldw	r3,-16(fp)
 200b1a4:	18800415 	stw	r2,16(r3)
 200b1a8:	10c00fcc 	andi	r3,r2,63
 200b1ac:	e0bffc17 	ldw	r2,-16(fp)
 200b1b0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 200b1b4:	e0bffc17 	ldw	r2,-16(fp)
 200b1b8:	10800117 	ldw	r2,4(r2)
 200b1bc:	10c01014 	ori	r3,r2,64
 200b1c0:	e0bffc17 	ldw	r2,-16(fp)
 200b1c4:	10c00115 	stw	r3,4(r2)
 200b1c8:	00000e06 	br	200b204 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 200b1cc:	e0bffc17 	ldw	r2,-16(fp)
 200b1d0:	10800017 	ldw	r2,0(r2)
 200b1d4:	10800204 	addi	r2,r2,8
 200b1d8:	10800037 	ldwio	r2,0(r2)
 200b1dc:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 200b1e0:	e0bffd17 	ldw	r2,-12(fp)
 200b1e4:	1082000c 	andi	r2,r2,2048
 200b1e8:	1000061e 	bne	r2,zero,200b204 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 200b1ec:	e0bffc17 	ldw	r2,-16(fp)
 200b1f0:	10c00117 	ldw	r3,4(r2)
 200b1f4:	00bfefc4 	movi	r2,-65
 200b1f8:	1886703a 	and	r3,r3,r2
 200b1fc:	e0bffc17 	ldw	r2,-16(fp)
 200b200:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 200b204:	e0bffc17 	ldw	r2,-16(fp)
 200b208:	10c00417 	ldw	r3,16(r2)
 200b20c:	e0bffc17 	ldw	r2,-16(fp)
 200b210:	10800517 	ldw	r2,20(r2)
 200b214:	1880061e 	bne	r3,r2,200b230 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 200b218:	e0bffc17 	ldw	r2,-16(fp)
 200b21c:	10c00117 	ldw	r3,4(r2)
 200b220:	00beefc4 	movi	r2,-1089
 200b224:	1886703a 	and	r3,r3,r2
 200b228:	e0bffc17 	ldw	r2,-16(fp)
 200b22c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200b230:	e0bffc17 	ldw	r2,-16(fp)
 200b234:	10800017 	ldw	r2,0(r2)
 200b238:	10800304 	addi	r2,r2,12
 200b23c:	e0fffc17 	ldw	r3,-16(fp)
 200b240:	18c00117 	ldw	r3,4(r3)
 200b244:	10c00035 	stwio	r3,0(r2)
}
 200b248:	0001883a 	nop
 200b24c:	e037883a 	mov	sp,fp
 200b250:	df000017 	ldw	fp,0(sp)
 200b254:	dec00104 	addi	sp,sp,4
 200b258:	f800283a 	ret

0200b25c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 200b25c:	defffd04 	addi	sp,sp,-12
 200b260:	df000215 	stw	fp,8(sp)
 200b264:	df000204 	addi	fp,sp,8
 200b268:	e13ffe15 	stw	r4,-8(fp)
 200b26c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 200b270:	00000506 	br	200b288 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200b274:	e0bfff17 	ldw	r2,-4(fp)
 200b278:	1090000c 	andi	r2,r2,16384
 200b27c:	10000226 	beq	r2,zero,200b288 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200b280:	00bffd44 	movi	r2,-11
 200b284:	00000606 	br	200b2a0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 200b288:	e0bffe17 	ldw	r2,-8(fp)
 200b28c:	10c00417 	ldw	r3,16(r2)
 200b290:	e0bffe17 	ldw	r2,-8(fp)
 200b294:	10800517 	ldw	r2,20(r2)
 200b298:	18bff61e 	bne	r3,r2,200b274 <__alt_mem_epcs_flash_controller+0xffffa274>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200b29c:	0005883a 	mov	r2,zero
}
 200b2a0:	e037883a 	mov	sp,fp
 200b2a4:	df000017 	ldw	fp,0(sp)
 200b2a8:	dec00104 	addi	sp,sp,4
 200b2ac:	f800283a 	ret

0200b2b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b2b0:	defffe04 	addi	sp,sp,-8
 200b2b4:	dfc00115 	stw	ra,4(sp)
 200b2b8:	df000015 	stw	fp,0(sp)
 200b2bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200b2c0:	d0a00817 	ldw	r2,-32736(gp)
 200b2c4:	10000326 	beq	r2,zero,200b2d4 <alt_get_errno+0x24>
 200b2c8:	d0a00817 	ldw	r2,-32736(gp)
 200b2cc:	103ee83a 	callr	r2
 200b2d0:	00000106 	br	200b2d8 <alt_get_errno+0x28>
 200b2d4:	d0a01604 	addi	r2,gp,-32680
}
 200b2d8:	e037883a 	mov	sp,fp
 200b2dc:	dfc00117 	ldw	ra,4(sp)
 200b2e0:	df000017 	ldw	fp,0(sp)
 200b2e4:	dec00204 	addi	sp,sp,8
 200b2e8:	f800283a 	ret

0200b2ec <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 200b2ec:	defff204 	addi	sp,sp,-56
 200b2f0:	dfc00d15 	stw	ra,52(sp)
 200b2f4:	df000c15 	stw	fp,48(sp)
 200b2f8:	df000c04 	addi	fp,sp,48
 200b2fc:	e13ffc15 	stw	r4,-16(fp)
 200b300:	e17ffd15 	stw	r5,-12(fp)
 200b304:	e1bffe15 	stw	r6,-8(fp)
 200b308:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 200b30c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 200b310:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 200b314:	e0bfff17 	ldw	r2,-4(fp)
 200b318:	1090000c 	andi	r2,r2,16384
 200b31c:	1005003a 	cmpeq	r2,r2,zero
 200b320:	10803fcc 	andi	r2,r2,255
 200b324:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 200b328:	00001306 	br	200b378 <altera_avalon_uart_read+0x8c>
    {
      count++;
 200b32c:	e0bff517 	ldw	r2,-44(fp)
 200b330:	10800044 	addi	r2,r2,1
 200b334:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 200b338:	e0bffd17 	ldw	r2,-12(fp)
 200b33c:	10c00044 	addi	r3,r2,1
 200b340:	e0fffd15 	stw	r3,-12(fp)
 200b344:	e0fffc17 	ldw	r3,-16(fp)
 200b348:	18c00217 	ldw	r3,8(r3)
 200b34c:	e13ffc17 	ldw	r4,-16(fp)
 200b350:	20c7883a 	add	r3,r4,r3
 200b354:	18c00704 	addi	r3,r3,28
 200b358:	18c00003 	ldbu	r3,0(r3)
 200b35c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 200b360:	e0bffc17 	ldw	r2,-16(fp)
 200b364:	10800217 	ldw	r2,8(r2)
 200b368:	10800044 	addi	r2,r2,1
 200b36c:	10c00fcc 	andi	r3,r2,63
 200b370:	e0bffc17 	ldw	r2,-16(fp)
 200b374:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 200b378:	e0fff517 	ldw	r3,-44(fp)
 200b37c:	e0bffe17 	ldw	r2,-8(fp)
 200b380:	1880050e 	bge	r3,r2,200b398 <altera_avalon_uart_read+0xac>
 200b384:	e0bffc17 	ldw	r2,-16(fp)
 200b388:	10c00217 	ldw	r3,8(r2)
 200b38c:	e0bffc17 	ldw	r2,-16(fp)
 200b390:	10800317 	ldw	r2,12(r2)
 200b394:	18bfe51e 	bne	r3,r2,200b32c <__alt_mem_epcs_flash_controller+0xffffa32c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 200b398:	e0bff517 	ldw	r2,-44(fp)
 200b39c:	1000251e 	bne	r2,zero,200b434 <altera_avalon_uart_read+0x148>
 200b3a0:	e0bffc17 	ldw	r2,-16(fp)
 200b3a4:	10c00217 	ldw	r3,8(r2)
 200b3a8:	e0bffc17 	ldw	r2,-16(fp)
 200b3ac:	10800317 	ldw	r2,12(r2)
 200b3b0:	1880201e 	bne	r3,r2,200b434 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 200b3b4:	e0bff617 	ldw	r2,-40(fp)
 200b3b8:	1000071e 	bne	r2,zero,200b3d8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 200b3bc:	200b2b00 	call	200b2b0 <alt_get_errno>
 200b3c0:	1007883a 	mov	r3,r2
 200b3c4:	008002c4 	movi	r2,11
 200b3c8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 200b3cc:	00800044 	movi	r2,1
 200b3d0:	e0bff405 	stb	r2,-48(fp)
        break;
 200b3d4:	00001b06 	br	200b444 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b3d8:	0005303a 	rdctl	r2,status
 200b3dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b3e0:	e0fff917 	ldw	r3,-28(fp)
 200b3e4:	00bfff84 	movi	r2,-2
 200b3e8:	1884703a 	and	r2,r3,r2
 200b3ec:	1001703a 	wrctl	status,r2
  
  return context;
 200b3f0:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 200b3f4:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 200b3f8:	e0bffc17 	ldw	r2,-16(fp)
 200b3fc:	10800117 	ldw	r2,4(r2)
 200b400:	10c02014 	ori	r3,r2,128
 200b404:	e0bffc17 	ldw	r2,-16(fp)
 200b408:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200b40c:	e0bffc17 	ldw	r2,-16(fp)
 200b410:	10800017 	ldw	r2,0(r2)
 200b414:	10800304 	addi	r2,r2,12
 200b418:	e0fffc17 	ldw	r3,-16(fp)
 200b41c:	18c00117 	ldw	r3,4(r3)
 200b420:	10c00035 	stwio	r3,0(r2)
 200b424:	e0bff817 	ldw	r2,-32(fp)
 200b428:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b42c:	e0bffa17 	ldw	r2,-24(fp)
 200b430:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 200b434:	e0bff517 	ldw	r2,-44(fp)
 200b438:	1000021e 	bne	r2,zero,200b444 <altera_avalon_uart_read+0x158>
 200b43c:	e0bffe17 	ldw	r2,-8(fp)
 200b440:	103fcd1e 	bne	r2,zero,200b378 <__alt_mem_epcs_flash_controller+0xffffa378>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b444:	0005303a 	rdctl	r2,status
 200b448:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b44c:	e0fffb17 	ldw	r3,-20(fp)
 200b450:	00bfff84 	movi	r2,-2
 200b454:	1884703a 	and	r2,r3,r2
 200b458:	1001703a 	wrctl	status,r2
  
  return context;
 200b45c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 200b460:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 200b464:	e0bffc17 	ldw	r2,-16(fp)
 200b468:	10800117 	ldw	r2,4(r2)
 200b46c:	10c02014 	ori	r3,r2,128
 200b470:	e0bffc17 	ldw	r2,-16(fp)
 200b474:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200b478:	e0bffc17 	ldw	r2,-16(fp)
 200b47c:	10800017 	ldw	r2,0(r2)
 200b480:	10800304 	addi	r2,r2,12
 200b484:	e0fffc17 	ldw	r3,-16(fp)
 200b488:	18c00117 	ldw	r3,4(r3)
 200b48c:	10c00035 	stwio	r3,0(r2)
 200b490:	e0bff817 	ldw	r2,-32(fp)
 200b494:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b498:	e0bff717 	ldw	r2,-36(fp)
 200b49c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 200b4a0:	e0bff403 	ldbu	r2,-48(fp)
 200b4a4:	10000226 	beq	r2,zero,200b4b0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 200b4a8:	00bffd44 	movi	r2,-11
 200b4ac:	00000106 	br	200b4b4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 200b4b0:	e0bff517 	ldw	r2,-44(fp)
  }
}
 200b4b4:	e037883a 	mov	sp,fp
 200b4b8:	dfc00117 	ldw	ra,4(sp)
 200b4bc:	df000017 	ldw	fp,0(sp)
 200b4c0:	dec00204 	addi	sp,sp,8
 200b4c4:	f800283a 	ret

0200b4c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b4c8:	defffe04 	addi	sp,sp,-8
 200b4cc:	dfc00115 	stw	ra,4(sp)
 200b4d0:	df000015 	stw	fp,0(sp)
 200b4d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200b4d8:	d0a00817 	ldw	r2,-32736(gp)
 200b4dc:	10000326 	beq	r2,zero,200b4ec <alt_get_errno+0x24>
 200b4e0:	d0a00817 	ldw	r2,-32736(gp)
 200b4e4:	103ee83a 	callr	r2
 200b4e8:	00000106 	br	200b4f0 <alt_get_errno+0x28>
 200b4ec:	d0a01604 	addi	r2,gp,-32680
}
 200b4f0:	e037883a 	mov	sp,fp
 200b4f4:	dfc00117 	ldw	ra,4(sp)
 200b4f8:	df000017 	ldw	fp,0(sp)
 200b4fc:	dec00204 	addi	sp,sp,8
 200b500:	f800283a 	ret

0200b504 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 200b504:	defff204 	addi	sp,sp,-56
 200b508:	dfc00d15 	stw	ra,52(sp)
 200b50c:	df000c15 	stw	fp,48(sp)
 200b510:	df000c04 	addi	fp,sp,48
 200b514:	e13ffc15 	stw	r4,-16(fp)
 200b518:	e17ffd15 	stw	r5,-12(fp)
 200b51c:	e1bffe15 	stw	r6,-8(fp)
 200b520:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 200b524:	e0bffe17 	ldw	r2,-8(fp)
 200b528:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 200b52c:	e0bfff17 	ldw	r2,-4(fp)
 200b530:	1090000c 	andi	r2,r2,16384
 200b534:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 200b538:	00003c06 	br	200b62c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 200b53c:	e0bffc17 	ldw	r2,-16(fp)
 200b540:	10800517 	ldw	r2,20(r2)
 200b544:	10800044 	addi	r2,r2,1
 200b548:	10800fcc 	andi	r2,r2,63
 200b54c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 200b550:	e0bffc17 	ldw	r2,-16(fp)
 200b554:	10c00417 	ldw	r3,16(r2)
 200b558:	e0bff717 	ldw	r2,-36(fp)
 200b55c:	1880221e 	bne	r3,r2,200b5e8 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 200b560:	e0bff517 	ldw	r2,-44(fp)
 200b564:	10000526 	beq	r2,zero,200b57c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 200b568:	200b4c80 	call	200b4c8 <alt_get_errno>
 200b56c:	1007883a 	mov	r3,r2
 200b570:	008002c4 	movi	r2,11
 200b574:	18800015 	stw	r2,0(r3)
        break;
 200b578:	00002e06 	br	200b634 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b57c:	0005303a 	rdctl	r2,status
 200b580:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b584:	e0fff917 	ldw	r3,-28(fp)
 200b588:	00bfff84 	movi	r2,-2
 200b58c:	1884703a 	and	r2,r3,r2
 200b590:	1001703a 	wrctl	status,r2
  
  return context;
 200b594:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 200b598:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 200b59c:	e0bffc17 	ldw	r2,-16(fp)
 200b5a0:	10800117 	ldw	r2,4(r2)
 200b5a4:	10c11014 	ori	r3,r2,1088
 200b5a8:	e0bffc17 	ldw	r2,-16(fp)
 200b5ac:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200b5b0:	e0bffc17 	ldw	r2,-16(fp)
 200b5b4:	10800017 	ldw	r2,0(r2)
 200b5b8:	10800304 	addi	r2,r2,12
 200b5bc:	e0fffc17 	ldw	r3,-16(fp)
 200b5c0:	18c00117 	ldw	r3,4(r3)
 200b5c4:	10c00035 	stwio	r3,0(r2)
 200b5c8:	e0bff817 	ldw	r2,-32(fp)
 200b5cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b5d0:	e0bff617 	ldw	r2,-40(fp)
 200b5d4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 200b5d8:	e0bffc17 	ldw	r2,-16(fp)
 200b5dc:	10c00417 	ldw	r3,16(r2)
 200b5e0:	e0bff717 	ldw	r2,-36(fp)
 200b5e4:	18bffc26 	beq	r3,r2,200b5d8 <__alt_mem_epcs_flash_controller+0xffffa5d8>
      }
    }

    count--;
 200b5e8:	e0bff417 	ldw	r2,-48(fp)
 200b5ec:	10bfffc4 	addi	r2,r2,-1
 200b5f0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 200b5f4:	e0bffc17 	ldw	r2,-16(fp)
 200b5f8:	10c00517 	ldw	r3,20(r2)
 200b5fc:	e0bffd17 	ldw	r2,-12(fp)
 200b600:	11000044 	addi	r4,r2,1
 200b604:	e13ffd15 	stw	r4,-12(fp)
 200b608:	10800003 	ldbu	r2,0(r2)
 200b60c:	1009883a 	mov	r4,r2
 200b610:	e0bffc17 	ldw	r2,-16(fp)
 200b614:	10c5883a 	add	r2,r2,r3
 200b618:	10801704 	addi	r2,r2,92
 200b61c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 200b620:	e0bffc17 	ldw	r2,-16(fp)
 200b624:	e0fff717 	ldw	r3,-36(fp)
 200b628:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 200b62c:	e0bff417 	ldw	r2,-48(fp)
 200b630:	103fc21e 	bne	r2,zero,200b53c <__alt_mem_epcs_flash_controller+0xffffa53c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b634:	0005303a 	rdctl	r2,status
 200b638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b63c:	e0fffb17 	ldw	r3,-20(fp)
 200b640:	00bfff84 	movi	r2,-2
 200b644:	1884703a 	and	r2,r3,r2
 200b648:	1001703a 	wrctl	status,r2
  
  return context;
 200b64c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 200b650:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 200b654:	e0bffc17 	ldw	r2,-16(fp)
 200b658:	10800117 	ldw	r2,4(r2)
 200b65c:	10c11014 	ori	r3,r2,1088
 200b660:	e0bffc17 	ldw	r2,-16(fp)
 200b664:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200b668:	e0bffc17 	ldw	r2,-16(fp)
 200b66c:	10800017 	ldw	r2,0(r2)
 200b670:	10800304 	addi	r2,r2,12
 200b674:	e0fffc17 	ldw	r3,-16(fp)
 200b678:	18c00117 	ldw	r3,4(r3)
 200b67c:	10c00035 	stwio	r3,0(r2)
 200b680:	e0bff817 	ldw	r2,-32(fp)
 200b684:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b688:	e0bffa17 	ldw	r2,-24(fp)
 200b68c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 200b690:	e0fffe17 	ldw	r3,-8(fp)
 200b694:	e0bff417 	ldw	r2,-48(fp)
 200b698:	1885c83a 	sub	r2,r3,r2
}
 200b69c:	e037883a 	mov	sp,fp
 200b6a0:	dfc00117 	ldw	ra,4(sp)
 200b6a4:	df000017 	ldw	fp,0(sp)
 200b6a8:	dec00204 	addi	sp,sp,8
 200b6ac:	f800283a 	ret

0200b6b0 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 200b6b0:	defff904 	addi	sp,sp,-28
 200b6b4:	dfc00615 	stw	ra,24(sp)
 200b6b8:	df000515 	stw	fp,20(sp)
 200b6bc:	df000504 	addi	fp,sp,20
 200b6c0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 200b6c4:	00800144 	movi	r2,5
 200b6c8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 200b6cc:	d8000215 	stw	zero,8(sp)
 200b6d0:	e0bffe44 	addi	r2,fp,-7
 200b6d4:	d8800115 	stw	r2,4(sp)
 200b6d8:	00800044 	movi	r2,1
 200b6dc:	d8800015 	stw	r2,0(sp)
 200b6e0:	e1fffe04 	addi	r7,fp,-8
 200b6e4:	01800044 	movi	r6,1
 200b6e8:	000b883a 	mov	r5,zero
 200b6ec:	e13fff17 	ldw	r4,-4(fp)
 200b6f0:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 200b6f4:	e0bffe43 	ldbu	r2,-7(fp)
}
 200b6f8:	e037883a 	mov	sp,fp
 200b6fc:	dfc00117 	ldw	ra,4(sp)
 200b700:	df000017 	ldw	fp,0(sp)
 200b704:	dec00204 	addi	sp,sp,8
 200b708:	f800283a 	ret

0200b70c <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 200b70c:	defffd04 	addi	sp,sp,-12
 200b710:	dfc00215 	stw	ra,8(sp)
 200b714:	df000115 	stw	fp,4(sp)
 200b718:	df000104 	addi	fp,sp,4
 200b71c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 200b720:	e13fff17 	ldw	r4,-4(fp)
 200b724:	200b6b00 	call	200b6b0 <epcs_read_status_register>
 200b728:	10803fcc 	andi	r2,r2,255
 200b72c:	1080004c 	andi	r2,r2,1
}
 200b730:	e037883a 	mov	sp,fp
 200b734:	dfc00117 	ldw	ra,4(sp)
 200b738:	df000017 	ldw	fp,0(sp)
 200b73c:	dec00204 	addi	sp,sp,8
 200b740:	f800283a 	ret

0200b744 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 200b744:	defffd04 	addi	sp,sp,-12
 200b748:	dfc00215 	stw	ra,8(sp)
 200b74c:	df000115 	stw	fp,4(sp)
 200b750:	df000104 	addi	fp,sp,4
 200b754:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 200b758:	0001883a 	nop
 200b75c:	e13fff17 	ldw	r4,-4(fp)
 200b760:	200b70c0 	call	200b70c <epcs_test_wip>
 200b764:	103ffd1e 	bne	r2,zero,200b75c <__alt_mem_epcs_flash_controller+0xffffa75c>
  {
  }
}
 200b768:	0001883a 	nop
 200b76c:	e037883a 	mov	sp,fp
 200b770:	dfc00117 	ldw	ra,4(sp)
 200b774:	df000017 	ldw	fp,0(sp)
 200b778:	dec00204 	addi	sp,sp,8
 200b77c:	f800283a 	ret

0200b780 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 200b780:	defff604 	addi	sp,sp,-40
 200b784:	dfc00915 	stw	ra,36(sp)
 200b788:	df000815 	stw	fp,32(sp)
 200b78c:	df000804 	addi	fp,sp,32
 200b790:	e13ffd15 	stw	r4,-12(fp)
 200b794:	e17ffe15 	stw	r5,-8(fp)
 200b798:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 200b79c:	e0bfff17 	ldw	r2,-4(fp)
 200b7a0:	10001226 	beq	r2,zero,200b7ec <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 200b7a4:	00bff604 	movi	r2,-40
 200b7a8:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 200b7ac:	e0bffe17 	ldw	r2,-8(fp)
 200b7b0:	1004d63a 	srli	r2,r2,24
 200b7b4:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 200b7b8:	e0bffe17 	ldw	r2,-8(fp)
 200b7bc:	1004d43a 	srli	r2,r2,16
 200b7c0:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 200b7c4:	e0bffe17 	ldw	r2,-8(fp)
 200b7c8:	1004d23a 	srli	r2,r2,8
 200b7cc:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 200b7d0:	e0bffe17 	ldw	r2,-8(fp)
 200b7d4:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 200b7d8:	00800144 	movi	r2,5
 200b7dc:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 200b7e0:	e13ffd17 	ldw	r4,-12(fp)
 200b7e4:	200bc340 	call	200bc34 <epcs_enter_4_bytes_mode>
 200b7e8:	00000c06 	br	200b81c <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 200b7ec:	00bff604 	movi	r2,-40
 200b7f0:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 200b7f4:	e0bffe17 	ldw	r2,-8(fp)
 200b7f8:	1004d43a 	srli	r2,r2,16
 200b7fc:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 200b800:	e0bffe17 	ldw	r2,-8(fp)
 200b804:	1004d23a 	srli	r2,r2,8
 200b808:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 200b80c:	e0bffe17 	ldw	r2,-8(fp)
 200b810:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 200b814:	00800104 	movi	r2,4
 200b818:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 200b81c:	e13ffd17 	ldw	r4,-12(fp)
 200b820:	200b9700 	call	200b970 <epcs_write_enable>

  alt_avalon_spi_command(
 200b824:	e0bffb03 	ldbu	r2,-20(fp)
 200b828:	e0fffb44 	addi	r3,fp,-19
 200b82c:	d8000215 	stw	zero,8(sp)
 200b830:	d8000115 	stw	zero,4(sp)
 200b834:	d8000015 	stw	zero,0(sp)
 200b838:	180f883a 	mov	r7,r3
 200b83c:	100d883a 	mov	r6,r2
 200b840:	000b883a 	mov	r5,zero
 200b844:	e13ffd17 	ldw	r4,-12(fp)
 200b848:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200b84c:	e13ffd17 	ldw	r4,-12(fp)
 200b850:	200b7440 	call	200b744 <epcs_await_wip_released>

  if(four_bytes_mode)
 200b854:	e0bfff17 	ldw	r2,-4(fp)
 200b858:	10000226 	beq	r2,zero,200b864 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 200b85c:	e13ffd17 	ldw	r4,-12(fp)
 200b860:	200bc900 	call	200bc90 <epcs_exit_4_bytes_mode>
  }
}
 200b864:	0001883a 	nop
 200b868:	e037883a 	mov	sp,fp
 200b86c:	dfc00117 	ldw	ra,4(sp)
 200b870:	df000017 	ldw	fp,0(sp)
 200b874:	dec00204 	addi	sp,sp,8
 200b878:	f800283a 	ret

0200b87c <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 200b87c:	defff404 	addi	sp,sp,-48
 200b880:	dfc00b15 	stw	ra,44(sp)
 200b884:	df000a15 	stw	fp,40(sp)
 200b888:	df000a04 	addi	fp,sp,40
 200b88c:	e13ffc15 	stw	r4,-16(fp)
 200b890:	e17ffd15 	stw	r5,-12(fp)
 200b894:	e1bffe15 	stw	r6,-8(fp)
 200b898:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 200b89c:	008000c4 	movi	r2,3
 200b8a0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 200b8a4:	e0800217 	ldw	r2,8(fp)
 200b8a8:	10001026 	beq	r2,zero,200b8ec <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 200b8ac:	e0bffd17 	ldw	r2,-12(fp)
 200b8b0:	1004d63a 	srli	r2,r2,24
 200b8b4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 200b8b8:	e0bffd17 	ldw	r2,-12(fp)
 200b8bc:	1005d43a 	srai	r2,r2,16
 200b8c0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 200b8c4:	e0bffd17 	ldw	r2,-12(fp)
 200b8c8:	1005d23a 	srai	r2,r2,8
 200b8cc:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 200b8d0:	e0bffd17 	ldw	r2,-12(fp)
 200b8d4:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 200b8d8:	00800144 	movi	r2,5
 200b8dc:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 200b8e0:	e13ffc17 	ldw	r4,-16(fp)
 200b8e4:	200bc340 	call	200bc34 <epcs_enter_4_bytes_mode>
 200b8e8:	00000a06 	br	200b914 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 200b8ec:	e0bffd17 	ldw	r2,-12(fp)
 200b8f0:	1005d43a 	srai	r2,r2,16
 200b8f4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 200b8f8:	e0bffd17 	ldw	r2,-12(fp)
 200b8fc:	1005d23a 	srai	r2,r2,8
 200b900:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 200b904:	e0bffd17 	ldw	r2,-12(fp)
 200b908:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 200b90c:	00800104 	movi	r2,4
 200b910:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 200b914:	e13ffc17 	ldw	r4,-16(fp)
 200b918:	200b7440 	call	200b744 <epcs_await_wip_released>

  alt_avalon_spi_command(
 200b91c:	e0bfff17 	ldw	r2,-4(fp)
 200b920:	e13ffa04 	addi	r4,fp,-24
 200b924:	d8000215 	stw	zero,8(sp)
 200b928:	e0fffe17 	ldw	r3,-8(fp)
 200b92c:	d8c00115 	stw	r3,4(sp)
 200b930:	d8800015 	stw	r2,0(sp)
 200b934:	200f883a 	mov	r7,r4
 200b938:	e1bff917 	ldw	r6,-28(fp)
 200b93c:	000b883a 	mov	r5,zero
 200b940:	e13ffc17 	ldw	r4,-16(fp)
 200b944:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 200b948:	e0800217 	ldw	r2,8(fp)
 200b94c:	10000226 	beq	r2,zero,200b958 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 200b950:	e13ffc17 	ldw	r4,-16(fp)
 200b954:	200bc900 	call	200bc90 <epcs_exit_4_bytes_mode>
  }

  return length;
 200b958:	e0bfff17 	ldw	r2,-4(fp)
}
 200b95c:	e037883a 	mov	sp,fp
 200b960:	dfc00117 	ldw	ra,4(sp)
 200b964:	df000017 	ldw	fp,0(sp)
 200b968:	dec00204 	addi	sp,sp,8
 200b96c:	f800283a 	ret

0200b970 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 200b970:	defff904 	addi	sp,sp,-28
 200b974:	dfc00615 	stw	ra,24(sp)
 200b978:	df000515 	stw	fp,20(sp)
 200b97c:	df000504 	addi	fp,sp,20
 200b980:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 200b984:	00800184 	movi	r2,6
 200b988:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 200b98c:	d8000215 	stw	zero,8(sp)
 200b990:	d8000115 	stw	zero,4(sp)
 200b994:	d8000015 	stw	zero,0(sp)
 200b998:	e1fffe04 	addi	r7,fp,-8
 200b99c:	01800044 	movi	r6,1
 200b9a0:	000b883a 	mov	r5,zero
 200b9a4:	e13fff17 	ldw	r4,-4(fp)
 200b9a8:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 200b9ac:	0001883a 	nop
 200b9b0:	e037883a 	mov	sp,fp
 200b9b4:	dfc00117 	ldw	ra,4(sp)
 200b9b8:	df000017 	ldw	fp,0(sp)
 200b9bc:	dec00204 	addi	sp,sp,8
 200b9c0:	f800283a 	ret

0200b9c4 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 200b9c4:	defff804 	addi	sp,sp,-32
 200b9c8:	dfc00715 	stw	ra,28(sp)
 200b9cc:	df000615 	stw	fp,24(sp)
 200b9d0:	df000604 	addi	fp,sp,24
 200b9d4:	e13ffe15 	stw	r4,-8(fp)
 200b9d8:	2805883a 	mov	r2,r5
 200b9dc:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 200b9e0:	00800044 	movi	r2,1
 200b9e4:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 200b9e8:	e0bfff03 	ldbu	r2,-4(fp)
 200b9ec:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 200b9f0:	d8000215 	stw	zero,8(sp)
 200b9f4:	d8000115 	stw	zero,4(sp)
 200b9f8:	d8000015 	stw	zero,0(sp)
 200b9fc:	e1fffd04 	addi	r7,fp,-12
 200ba00:	01800084 	movi	r6,2
 200ba04:	000b883a 	mov	r5,zero
 200ba08:	e13ffe17 	ldw	r4,-8(fp)
 200ba0c:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200ba10:	e13ffe17 	ldw	r4,-8(fp)
 200ba14:	200b7440 	call	200b744 <epcs_await_wip_released>
}
 200ba18:	0001883a 	nop
 200ba1c:	e037883a 	mov	sp,fp
 200ba20:	dfc00117 	ldw	ra,4(sp)
 200ba24:	df000017 	ldw	fp,0(sp)
 200ba28:	dec00204 	addi	sp,sp,8
 200ba2c:	f800283a 	ret

0200ba30 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 200ba30:	defff404 	addi	sp,sp,-48
 200ba34:	dfc00b15 	stw	ra,44(sp)
 200ba38:	df000a15 	stw	fp,40(sp)
 200ba3c:	df000a04 	addi	fp,sp,40
 200ba40:	e13ffc15 	stw	r4,-16(fp)
 200ba44:	e17ffd15 	stw	r5,-12(fp)
 200ba48:	e1bffe15 	stw	r6,-8(fp)
 200ba4c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 200ba50:	00800084 	movi	r2,2
 200ba54:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 200ba58:	e0800217 	ldw	r2,8(fp)
 200ba5c:	10001026 	beq	r2,zero,200baa0 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 200ba60:	e0bffd17 	ldw	r2,-12(fp)
 200ba64:	1004d63a 	srli	r2,r2,24
 200ba68:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 200ba6c:	e0bffd17 	ldw	r2,-12(fp)
 200ba70:	1005d43a 	srai	r2,r2,16
 200ba74:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 200ba78:	e0bffd17 	ldw	r2,-12(fp)
 200ba7c:	1005d23a 	srai	r2,r2,8
 200ba80:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 200ba84:	e0bffd17 	ldw	r2,-12(fp)
 200ba88:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 200ba8c:	00800144 	movi	r2,5
 200ba90:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 200ba94:	e13ffc17 	ldw	r4,-16(fp)
 200ba98:	200bc340 	call	200bc34 <epcs_enter_4_bytes_mode>
 200ba9c:	00000a06 	br	200bac8 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 200baa0:	e0bffd17 	ldw	r2,-12(fp)
 200baa4:	1005d43a 	srai	r2,r2,16
 200baa8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 200baac:	e0bffd17 	ldw	r2,-12(fp)
 200bab0:	1005d23a 	srai	r2,r2,8
 200bab4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 200bab8:	e0bffd17 	ldw	r2,-12(fp)
 200babc:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 200bac0:	00800104 	movi	r2,4
 200bac4:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 200bac8:	e13ffc17 	ldw	r4,-16(fp)
 200bacc:	200b9700 	call	200b970 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 200bad0:	e0fffa04 	addi	r3,fp,-24
 200bad4:	00800044 	movi	r2,1
 200bad8:	d8800215 	stw	r2,8(sp)
 200badc:	d8000115 	stw	zero,4(sp)
 200bae0:	d8000015 	stw	zero,0(sp)
 200bae4:	180f883a 	mov	r7,r3
 200bae8:	e1bff917 	ldw	r6,-28(fp)
 200baec:	000b883a 	mov	r5,zero
 200baf0:	e13ffc17 	ldw	r4,-16(fp)
 200baf4:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 200baf8:	e0bfff17 	ldw	r2,-4(fp)
 200bafc:	d8000215 	stw	zero,8(sp)
 200bb00:	d8000115 	stw	zero,4(sp)
 200bb04:	d8000015 	stw	zero,0(sp)
 200bb08:	e1fffe17 	ldw	r7,-8(fp)
 200bb0c:	100d883a 	mov	r6,r2
 200bb10:	000b883a 	mov	r5,zero
 200bb14:	e13ffc17 	ldw	r4,-16(fp)
 200bb18:	200ca180 	call	200ca18 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 200bb1c:	e13ffc17 	ldw	r4,-16(fp)
 200bb20:	200b7440 	call	200b744 <epcs_await_wip_released>

  if(four_bytes_mode)
 200bb24:	e0800217 	ldw	r2,8(fp)
 200bb28:	10000226 	beq	r2,zero,200bb34 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 200bb2c:	e13ffc17 	ldw	r4,-16(fp)
 200bb30:	200bc900 	call	200bc90 <epcs_exit_4_bytes_mode>
  }

  return length;
 200bb34:	e0bfff17 	ldw	r2,-4(fp)
}
 200bb38:	e037883a 	mov	sp,fp
 200bb3c:	dfc00117 	ldw	ra,4(sp)
 200bb40:	df000017 	ldw	fp,0(sp)
 200bb44:	dec00204 	addi	sp,sp,8
 200bb48:	f800283a 	ret

0200bb4c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 200bb4c:	defff804 	addi	sp,sp,-32
 200bb50:	dfc00715 	stw	ra,28(sp)
 200bb54:	df000615 	stw	fp,24(sp)
 200bb58:	df000604 	addi	fp,sp,24
 200bb5c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 200bb60:	00bfeac4 	movi	r2,-85
 200bb64:	e0bffd05 	stb	r2,-12(fp)
 200bb68:	e03ffd45 	stb	zero,-11(fp)
 200bb6c:	e03ffd85 	stb	zero,-10(fp)
 200bb70:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 200bb74:	d8000215 	stw	zero,8(sp)
 200bb78:	e0bffe04 	addi	r2,fp,-8
 200bb7c:	d8800115 	stw	r2,4(sp)
 200bb80:	00800044 	movi	r2,1
 200bb84:	d8800015 	stw	r2,0(sp)
 200bb88:	e1fffd04 	addi	r7,fp,-12
 200bb8c:	01800104 	movi	r6,4
 200bb90:	000b883a 	mov	r5,zero
 200bb94:	e13fff17 	ldw	r4,-4(fp)
 200bb98:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 200bb9c:	e0bffe03 	ldbu	r2,-8(fp)
}
 200bba0:	e037883a 	mov	sp,fp
 200bba4:	dfc00117 	ldw	ra,4(sp)
 200bba8:	df000017 	ldw	fp,0(sp)
 200bbac:	dec00204 	addi	sp,sp,8
 200bbb0:	f800283a 	ret

0200bbb4 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 200bbb4:	defff904 	addi	sp,sp,-28
 200bbb8:	dfc00615 	stw	ra,24(sp)
 200bbbc:	df000515 	stw	fp,20(sp)
 200bbc0:	df000504 	addi	fp,sp,20
 200bbc4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 200bbc8:	00bfe7c4 	movi	r2,-97
 200bbcc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 200bbd0:	d8000215 	stw	zero,8(sp)
 200bbd4:	e0bffe44 	addi	r2,fp,-7
 200bbd8:	d8800115 	stw	r2,4(sp)
 200bbdc:	008000c4 	movi	r2,3
 200bbe0:	d8800015 	stw	r2,0(sp)
 200bbe4:	e1fffe04 	addi	r7,fp,-8
 200bbe8:	01800044 	movi	r6,1
 200bbec:	000b883a 	mov	r5,zero
 200bbf0:	e13fff17 	ldw	r4,-4(fp)
 200bbf4:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 200bbf8:	e0bffe43 	ldbu	r2,-7(fp)
 200bbfc:	10803fcc 	andi	r2,r2,255
 200bc00:	1006943a 	slli	r3,r2,16
 200bc04:	e0bffe83 	ldbu	r2,-6(fp)
 200bc08:	10803fcc 	andi	r2,r2,255
 200bc0c:	1004923a 	slli	r2,r2,8
 200bc10:	1886b03a 	or	r3,r3,r2
 200bc14:	e0bffec3 	ldbu	r2,-5(fp)
 200bc18:	10803fcc 	andi	r2,r2,255
 200bc1c:	1884b03a 	or	r2,r3,r2
}
 200bc20:	e037883a 	mov	sp,fp
 200bc24:	dfc00117 	ldw	ra,4(sp)
 200bc28:	df000017 	ldw	fp,0(sp)
 200bc2c:	dec00204 	addi	sp,sp,8
 200bc30:	f800283a 	ret

0200bc34 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 200bc34:	defff904 	addi	sp,sp,-28
 200bc38:	dfc00615 	stw	ra,24(sp)
 200bc3c:	df000515 	stw	fp,20(sp)
 200bc40:	df000504 	addi	fp,sp,20
 200bc44:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 200bc48:	00bfedc4 	movi	r2,-73
 200bc4c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200bc50:	e13fff17 	ldw	r4,-4(fp)
 200bc54:	200b9700 	call	200b970 <epcs_write_enable>

  alt_avalon_spi_command(
 200bc58:	d8000215 	stw	zero,8(sp)
 200bc5c:	d8000115 	stw	zero,4(sp)
 200bc60:	d8000015 	stw	zero,0(sp)
 200bc64:	e1fffe04 	addi	r7,fp,-8
 200bc68:	01800044 	movi	r6,1
 200bc6c:	000b883a 	mov	r5,zero
 200bc70:	e13fff17 	ldw	r4,-4(fp)
 200bc74:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 200bc78:	0001883a 	nop
}
 200bc7c:	e037883a 	mov	sp,fp
 200bc80:	dfc00117 	ldw	ra,4(sp)
 200bc84:	df000017 	ldw	fp,0(sp)
 200bc88:	dec00204 	addi	sp,sp,8
 200bc8c:	f800283a 	ret

0200bc90 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 200bc90:	defff904 	addi	sp,sp,-28
 200bc94:	dfc00615 	stw	ra,24(sp)
 200bc98:	df000515 	stw	fp,20(sp)
 200bc9c:	df000504 	addi	fp,sp,20
 200bca0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 200bca4:	00bffa44 	movi	r2,-23
 200bca8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200bcac:	e13fff17 	ldw	r4,-4(fp)
 200bcb0:	200b9700 	call	200b970 <epcs_write_enable>

  alt_avalon_spi_command(
 200bcb4:	d8000215 	stw	zero,8(sp)
 200bcb8:	d8000115 	stw	zero,4(sp)
 200bcbc:	d8000015 	stw	zero,0(sp)
 200bcc0:	e1fffe04 	addi	r7,fp,-8
 200bcc4:	01800044 	movi	r6,1
 200bcc8:	000b883a 	mov	r5,zero
 200bccc:	e13fff17 	ldw	r4,-4(fp)
 200bcd0:	200ca180 	call	200ca18 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 200bcd4:	0001883a 	nop
}
 200bcd8:	e037883a 	mov	sp,fp
 200bcdc:	dfc00117 	ldw	ra,4(sp)
 200bce0:	df000017 	ldw	fp,0(sp)
 200bce4:	dec00204 	addi	sp,sp,8
 200bce8:	f800283a 	ret

0200bcec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200bcec:	defff504 	addi	sp,sp,-44
 200bcf0:	df000a15 	stw	fp,40(sp)
 200bcf4:	df000a04 	addi	fp,sp,40
 200bcf8:	e13ffc15 	stw	r4,-16(fp)
 200bcfc:	e17ffd15 	stw	r5,-12(fp)
 200bd00:	e1bffe15 	stw	r6,-8(fp)
 200bd04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200bd08:	e03ff615 	stw	zero,-40(fp)
 200bd0c:	d0a01417 	ldw	r2,-32688(gp)
  
  if (alt_ticks_per_second ())
 200bd10:	10003c26 	beq	r2,zero,200be04 <alt_alarm_start+0x118>
  {
    if (alarm)
 200bd14:	e0bffc17 	ldw	r2,-16(fp)
 200bd18:	10003826 	beq	r2,zero,200bdfc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 200bd1c:	e0bffc17 	ldw	r2,-16(fp)
 200bd20:	e0fffe17 	ldw	r3,-8(fp)
 200bd24:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 200bd28:	e0bffc17 	ldw	r2,-16(fp)
 200bd2c:	e0ffff17 	ldw	r3,-4(fp)
 200bd30:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200bd34:	0005303a 	rdctl	r2,status
 200bd38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200bd3c:	e0fff917 	ldw	r3,-28(fp)
 200bd40:	00bfff84 	movi	r2,-2
 200bd44:	1884703a 	and	r2,r3,r2
 200bd48:	1001703a 	wrctl	status,r2
  
  return context;
 200bd4c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 200bd50:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200bd54:	d0a01517 	ldw	r2,-32684(gp)
      
      current_nticks = alt_nticks();
 200bd58:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200bd5c:	e0fffd17 	ldw	r3,-12(fp)
 200bd60:	e0bff617 	ldw	r2,-40(fp)
 200bd64:	1885883a 	add	r2,r3,r2
 200bd68:	10c00044 	addi	r3,r2,1
 200bd6c:	e0bffc17 	ldw	r2,-16(fp)
 200bd70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200bd74:	e0bffc17 	ldw	r2,-16(fp)
 200bd78:	10c00217 	ldw	r3,8(r2)
 200bd7c:	e0bff617 	ldw	r2,-40(fp)
 200bd80:	1880042e 	bgeu	r3,r2,200bd94 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 200bd84:	e0bffc17 	ldw	r2,-16(fp)
 200bd88:	00c00044 	movi	r3,1
 200bd8c:	10c00405 	stb	r3,16(r2)
 200bd90:	00000206 	br	200bd9c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 200bd94:	e0bffc17 	ldw	r2,-16(fp)
 200bd98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200bd9c:	e0bffc17 	ldw	r2,-16(fp)
 200bda0:	d0e00b04 	addi	r3,gp,-32724
 200bda4:	e0fffa15 	stw	r3,-24(fp)
 200bda8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200bdac:	e0bffb17 	ldw	r2,-20(fp)
 200bdb0:	e0fffa17 	ldw	r3,-24(fp)
 200bdb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200bdb8:	e0bffa17 	ldw	r2,-24(fp)
 200bdbc:	10c00017 	ldw	r3,0(r2)
 200bdc0:	e0bffb17 	ldw	r2,-20(fp)
 200bdc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200bdc8:	e0bffa17 	ldw	r2,-24(fp)
 200bdcc:	10800017 	ldw	r2,0(r2)
 200bdd0:	e0fffb17 	ldw	r3,-20(fp)
 200bdd4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200bdd8:	e0bffa17 	ldw	r2,-24(fp)
 200bddc:	e0fffb17 	ldw	r3,-20(fp)
 200bde0:	10c00015 	stw	r3,0(r2)
 200bde4:	e0bff817 	ldw	r2,-32(fp)
 200bde8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200bdec:	e0bff717 	ldw	r2,-36(fp)
 200bdf0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200bdf4:	0005883a 	mov	r2,zero
 200bdf8:	00000306 	br	200be08 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 200bdfc:	00bffa84 	movi	r2,-22
 200be00:	00000106 	br	200be08 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 200be04:	00bfde84 	movi	r2,-134
  }
}
 200be08:	e037883a 	mov	sp,fp
 200be0c:	df000017 	ldw	fp,0(sp)
 200be10:	dec00104 	addi	sp,sp,4
 200be14:	f800283a 	ret

0200be18 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 200be18:	defffa04 	addi	sp,sp,-24
 200be1c:	dfc00515 	stw	ra,20(sp)
 200be20:	df000415 	stw	fp,16(sp)
 200be24:	df000404 	addi	fp,sp,16
 200be28:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 200be2c:	00800244 	movi	r2,9
 200be30:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 200be34:	014003f4 	movhi	r5,15
 200be38:	29509004 	addi	r5,r5,16960
 200be3c:	e13ffd17 	ldw	r4,-12(fp)
 200be40:	20093300 	call	2009330 <__mulsi3>
 200be44:	100b883a 	mov	r5,r2
 200be48:	0100bef4 	movhi	r4,763
 200be4c:	213c2004 	addi	r4,r4,-3968
 200be50:	2008ac00 	call	2008ac0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 200be54:	100b883a 	mov	r5,r2
 200be58:	01200034 	movhi	r4,32768
 200be5c:	213fffc4 	addi	r4,r4,-1
 200be60:	2008ac00 	call	2008ac0 <__udivsi3>
 200be64:	100b883a 	mov	r5,r2
 200be68:	e13fff17 	ldw	r4,-4(fp)
 200be6c:	2008ac00 	call	2008ac0 <__udivsi3>
 200be70:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 200be74:	e0bffe17 	ldw	r2,-8(fp)
 200be78:	10002a26 	beq	r2,zero,200bf24 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 200be7c:	e03ffc15 	stw	zero,-16(fp)
 200be80:	00001706 	br	200bee0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 200be84:	00a00034 	movhi	r2,32768
 200be88:	10bfffc4 	addi	r2,r2,-1
 200be8c:	10bfffc4 	addi	r2,r2,-1
 200be90:	103ffe1e 	bne	r2,zero,200be8c <__alt_mem_epcs_flash_controller+0xffffae8c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 200be94:	014003f4 	movhi	r5,15
 200be98:	29509004 	addi	r5,r5,16960
 200be9c:	e13ffd17 	ldw	r4,-12(fp)
 200bea0:	20093300 	call	2009330 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 200bea4:	100b883a 	mov	r5,r2
 200bea8:	0100bef4 	movhi	r4,763
 200beac:	213c2004 	addi	r4,r4,-3968
 200beb0:	2008ac00 	call	2008ac0 <__udivsi3>
 200beb4:	100b883a 	mov	r5,r2
 200beb8:	01200034 	movhi	r4,32768
 200bebc:	213fffc4 	addi	r4,r4,-1
 200bec0:	2008ac00 	call	2008ac0 <__udivsi3>
 200bec4:	1007883a 	mov	r3,r2
 200bec8:	e0bfff17 	ldw	r2,-4(fp)
 200becc:	10c5c83a 	sub	r2,r2,r3
 200bed0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 200bed4:	e0bffc17 	ldw	r2,-16(fp)
 200bed8:	10800044 	addi	r2,r2,1
 200bedc:	e0bffc15 	stw	r2,-16(fp)
 200bee0:	e0fffc17 	ldw	r3,-16(fp)
 200bee4:	e0bffe17 	ldw	r2,-8(fp)
 200bee8:	18bfe616 	blt	r3,r2,200be84 <__alt_mem_epcs_flash_controller+0xffffae84>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 200beec:	014003f4 	movhi	r5,15
 200bef0:	29509004 	addi	r5,r5,16960
 200bef4:	e13ffd17 	ldw	r4,-12(fp)
 200bef8:	20093300 	call	2009330 <__mulsi3>
 200befc:	100b883a 	mov	r5,r2
 200bf00:	0100bef4 	movhi	r4,763
 200bf04:	213c2004 	addi	r4,r4,-3968
 200bf08:	2008ac00 	call	2008ac0 <__udivsi3>
 200bf0c:	e17fff17 	ldw	r5,-4(fp)
 200bf10:	1009883a 	mov	r4,r2
 200bf14:	20093300 	call	2009330 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200bf18:	10bfffc4 	addi	r2,r2,-1
 200bf1c:	103ffe1e 	bne	r2,zero,200bf18 <__alt_mem_epcs_flash_controller+0xffffaf18>
 200bf20:	00000d06 	br	200bf58 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 200bf24:	014003f4 	movhi	r5,15
 200bf28:	29509004 	addi	r5,r5,16960
 200bf2c:	e13ffd17 	ldw	r4,-12(fp)
 200bf30:	20093300 	call	2009330 <__mulsi3>
 200bf34:	100b883a 	mov	r5,r2
 200bf38:	0100bef4 	movhi	r4,763
 200bf3c:	213c2004 	addi	r4,r4,-3968
 200bf40:	2008ac00 	call	2008ac0 <__udivsi3>
 200bf44:	e17fff17 	ldw	r5,-4(fp)
 200bf48:	1009883a 	mov	r4,r2
 200bf4c:	20093300 	call	2009330 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200bf50:	10bfffc4 	addi	r2,r2,-1
 200bf54:	00bffe16 	blt	zero,r2,200bf50 <__alt_mem_epcs_flash_controller+0xffffaf50>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 200bf58:	0005883a 	mov	r2,zero
}
 200bf5c:	e037883a 	mov	sp,fp
 200bf60:	dfc00117 	ldw	ra,4(sp)
 200bf64:	df000017 	ldw	fp,0(sp)
 200bf68:	dec00204 	addi	sp,sp,8
 200bf6c:	f800283a 	ret

0200bf70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200bf70:	defffe04 	addi	sp,sp,-8
 200bf74:	dfc00115 	stw	ra,4(sp)
 200bf78:	df000015 	stw	fp,0(sp)
 200bf7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200bf80:	d0a00817 	ldw	r2,-32736(gp)
 200bf84:	10000326 	beq	r2,zero,200bf94 <alt_get_errno+0x24>
 200bf88:	d0a00817 	ldw	r2,-32736(gp)
 200bf8c:	103ee83a 	callr	r2
 200bf90:	00000106 	br	200bf98 <alt_get_errno+0x28>
 200bf94:	d0a01604 	addi	r2,gp,-32680
}
 200bf98:	e037883a 	mov	sp,fp
 200bf9c:	dfc00117 	ldw	ra,4(sp)
 200bfa0:	df000017 	ldw	fp,0(sp)
 200bfa4:	dec00204 	addi	sp,sp,8
 200bfa8:	f800283a 	ret

0200bfac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200bfac:	defffb04 	addi	sp,sp,-20
 200bfb0:	dfc00415 	stw	ra,16(sp)
 200bfb4:	df000315 	stw	fp,12(sp)
 200bfb8:	df000304 	addi	fp,sp,12
 200bfbc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200bfc0:	e0bfff17 	ldw	r2,-4(fp)
 200bfc4:	10000816 	blt	r2,zero,200bfe8 <close+0x3c>
 200bfc8:	01400304 	movi	r5,12
 200bfcc:	e13fff17 	ldw	r4,-4(fp)
 200bfd0:	20093300 	call	2009330 <__mulsi3>
 200bfd4:	1007883a 	mov	r3,r2
 200bfd8:	00800034 	movhi	r2,0
 200bfdc:	1084dc04 	addi	r2,r2,4976
 200bfe0:	1885883a 	add	r2,r3,r2
 200bfe4:	00000106 	br	200bfec <close+0x40>
 200bfe8:	0005883a 	mov	r2,zero
 200bfec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200bff0:	e0bffd17 	ldw	r2,-12(fp)
 200bff4:	10001926 	beq	r2,zero,200c05c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200bff8:	e0bffd17 	ldw	r2,-12(fp)
 200bffc:	10800017 	ldw	r2,0(r2)
 200c000:	10800417 	ldw	r2,16(r2)
 200c004:	10000626 	beq	r2,zero,200c020 <close+0x74>
 200c008:	e0bffd17 	ldw	r2,-12(fp)
 200c00c:	10800017 	ldw	r2,0(r2)
 200c010:	10800417 	ldw	r2,16(r2)
 200c014:	e13ffd17 	ldw	r4,-12(fp)
 200c018:	103ee83a 	callr	r2
 200c01c:	00000106 	br	200c024 <close+0x78>
 200c020:	0005883a 	mov	r2,zero
 200c024:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200c028:	e13fff17 	ldw	r4,-4(fp)
 200c02c:	200c7cc0 	call	200c7cc <alt_release_fd>
    if (rval < 0)
 200c030:	e0bffe17 	ldw	r2,-8(fp)
 200c034:	1000070e 	bge	r2,zero,200c054 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 200c038:	200bf700 	call	200bf70 <alt_get_errno>
 200c03c:	1007883a 	mov	r3,r2
 200c040:	e0bffe17 	ldw	r2,-8(fp)
 200c044:	0085c83a 	sub	r2,zero,r2
 200c048:	18800015 	stw	r2,0(r3)
      return -1;
 200c04c:	00bfffc4 	movi	r2,-1
 200c050:	00000706 	br	200c070 <close+0xc4>
    }
    return 0;
 200c054:	0005883a 	mov	r2,zero
 200c058:	00000506 	br	200c070 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200c05c:	200bf700 	call	200bf70 <alt_get_errno>
 200c060:	1007883a 	mov	r3,r2
 200c064:	00801444 	movi	r2,81
 200c068:	18800015 	stw	r2,0(r3)
    return -1;
 200c06c:	00bfffc4 	movi	r2,-1
  }
}
 200c070:	e037883a 	mov	sp,fp
 200c074:	dfc00117 	ldw	ra,4(sp)
 200c078:	df000017 	ldw	fp,0(sp)
 200c07c:	dec00204 	addi	sp,sp,8
 200c080:	f800283a 	ret

0200c084 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 200c084:	deffff04 	addi	sp,sp,-4
 200c088:	df000015 	stw	fp,0(sp)
 200c08c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200c090:	0001883a 	nop
 200c094:	e037883a 	mov	sp,fp
 200c098:	df000017 	ldw	fp,0(sp)
 200c09c:	dec00104 	addi	sp,sp,4
 200c0a0:	f800283a 	ret

0200c0a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200c0a4:	defffc04 	addi	sp,sp,-16
 200c0a8:	df000315 	stw	fp,12(sp)
 200c0ac:	df000304 	addi	fp,sp,12
 200c0b0:	e13ffd15 	stw	r4,-12(fp)
 200c0b4:	e17ffe15 	stw	r5,-8(fp)
 200c0b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200c0bc:	e0bfff17 	ldw	r2,-4(fp)
}
 200c0c0:	e037883a 	mov	sp,fp
 200c0c4:	df000017 	ldw	fp,0(sp)
 200c0c8:	dec00104 	addi	sp,sp,4
 200c0cc:	f800283a 	ret

0200c0d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200c0d0:	defffe04 	addi	sp,sp,-8
 200c0d4:	dfc00115 	stw	ra,4(sp)
 200c0d8:	df000015 	stw	fp,0(sp)
 200c0dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200c0e0:	d0a00817 	ldw	r2,-32736(gp)
 200c0e4:	10000326 	beq	r2,zero,200c0f4 <alt_get_errno+0x24>
 200c0e8:	d0a00817 	ldw	r2,-32736(gp)
 200c0ec:	103ee83a 	callr	r2
 200c0f0:	00000106 	br	200c0f8 <alt_get_errno+0x28>
 200c0f4:	d0a01604 	addi	r2,gp,-32680
}
 200c0f8:	e037883a 	mov	sp,fp
 200c0fc:	dfc00117 	ldw	ra,4(sp)
 200c100:	df000017 	ldw	fp,0(sp)
 200c104:	dec00204 	addi	sp,sp,8
 200c108:	f800283a 	ret

0200c10c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200c10c:	defffa04 	addi	sp,sp,-24
 200c110:	dfc00515 	stw	ra,20(sp)
 200c114:	df000415 	stw	fp,16(sp)
 200c118:	df000404 	addi	fp,sp,16
 200c11c:	e13ffe15 	stw	r4,-8(fp)
 200c120:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200c124:	e0bffe17 	ldw	r2,-8(fp)
 200c128:	10000326 	beq	r2,zero,200c138 <alt_dev_llist_insert+0x2c>
 200c12c:	e0bffe17 	ldw	r2,-8(fp)
 200c130:	10800217 	ldw	r2,8(r2)
 200c134:	1000061e 	bne	r2,zero,200c150 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 200c138:	200c0d00 	call	200c0d0 <alt_get_errno>
 200c13c:	1007883a 	mov	r3,r2
 200c140:	00800584 	movi	r2,22
 200c144:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 200c148:	00bffa84 	movi	r2,-22
 200c14c:	00001306 	br	200c19c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 200c150:	e0bffe17 	ldw	r2,-8(fp)
 200c154:	e0ffff17 	ldw	r3,-4(fp)
 200c158:	e0fffc15 	stw	r3,-16(fp)
 200c15c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200c160:	e0bffd17 	ldw	r2,-12(fp)
 200c164:	e0fffc17 	ldw	r3,-16(fp)
 200c168:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200c16c:	e0bffc17 	ldw	r2,-16(fp)
 200c170:	10c00017 	ldw	r3,0(r2)
 200c174:	e0bffd17 	ldw	r2,-12(fp)
 200c178:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200c17c:	e0bffc17 	ldw	r2,-16(fp)
 200c180:	10800017 	ldw	r2,0(r2)
 200c184:	e0fffd17 	ldw	r3,-12(fp)
 200c188:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200c18c:	e0bffc17 	ldw	r2,-16(fp)
 200c190:	e0fffd17 	ldw	r3,-12(fp)
 200c194:	10c00015 	stw	r3,0(r2)

  return 0;  
 200c198:	0005883a 	mov	r2,zero
}
 200c19c:	e037883a 	mov	sp,fp
 200c1a0:	dfc00117 	ldw	ra,4(sp)
 200c1a4:	df000017 	ldw	fp,0(sp)
 200c1a8:	dec00204 	addi	sp,sp,8
 200c1ac:	f800283a 	ret

0200c1b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200c1b0:	defffd04 	addi	sp,sp,-12
 200c1b4:	dfc00215 	stw	ra,8(sp)
 200c1b8:	df000115 	stw	fp,4(sp)
 200c1bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200c1c0:	00808074 	movhi	r2,513
 200c1c4:	10b48504 	addi	r2,r2,-11756
 200c1c8:	e0bfff15 	stw	r2,-4(fp)
 200c1cc:	00000606 	br	200c1e8 <_do_ctors+0x38>
        (*ctor) (); 
 200c1d0:	e0bfff17 	ldw	r2,-4(fp)
 200c1d4:	10800017 	ldw	r2,0(r2)
 200c1d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200c1dc:	e0bfff17 	ldw	r2,-4(fp)
 200c1e0:	10bfff04 	addi	r2,r2,-4
 200c1e4:	e0bfff15 	stw	r2,-4(fp)
 200c1e8:	e0ffff17 	ldw	r3,-4(fp)
 200c1ec:	00808074 	movhi	r2,513
 200c1f0:	10b48604 	addi	r2,r2,-11752
 200c1f4:	18bff62e 	bgeu	r3,r2,200c1d0 <__alt_mem_epcs_flash_controller+0xffffb1d0>
        (*ctor) (); 
}
 200c1f8:	0001883a 	nop
 200c1fc:	e037883a 	mov	sp,fp
 200c200:	dfc00117 	ldw	ra,4(sp)
 200c204:	df000017 	ldw	fp,0(sp)
 200c208:	dec00204 	addi	sp,sp,8
 200c20c:	f800283a 	ret

0200c210 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200c210:	defffd04 	addi	sp,sp,-12
 200c214:	dfc00215 	stw	ra,8(sp)
 200c218:	df000115 	stw	fp,4(sp)
 200c21c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200c220:	00808074 	movhi	r2,513
 200c224:	10b48504 	addi	r2,r2,-11756
 200c228:	e0bfff15 	stw	r2,-4(fp)
 200c22c:	00000606 	br	200c248 <_do_dtors+0x38>
        (*dtor) (); 
 200c230:	e0bfff17 	ldw	r2,-4(fp)
 200c234:	10800017 	ldw	r2,0(r2)
 200c238:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200c23c:	e0bfff17 	ldw	r2,-4(fp)
 200c240:	10bfff04 	addi	r2,r2,-4
 200c244:	e0bfff15 	stw	r2,-4(fp)
 200c248:	e0ffff17 	ldw	r3,-4(fp)
 200c24c:	00808074 	movhi	r2,513
 200c250:	10b48604 	addi	r2,r2,-11752
 200c254:	18bff62e 	bgeu	r3,r2,200c230 <__alt_mem_epcs_flash_controller+0xffffb230>
        (*dtor) (); 
}
 200c258:	0001883a 	nop
 200c25c:	e037883a 	mov	sp,fp
 200c260:	dfc00117 	ldw	ra,4(sp)
 200c264:	df000017 	ldw	fp,0(sp)
 200c268:	dec00204 	addi	sp,sp,8
 200c26c:	f800283a 	ret

0200c270 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 200c270:	defffc04 	addi	sp,sp,-16
 200c274:	dfc00315 	stw	ra,12(sp)
 200c278:	df000215 	stw	fp,8(sp)
 200c27c:	df000204 	addi	fp,sp,8
 200c280:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 200c284:	d1600904 	addi	r5,gp,-32732
 200c288:	e13fff17 	ldw	r4,-4(fp)
 200c28c:	200cc140 	call	200cc14 <alt_find_dev>
 200c290:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 200c294:	e0bffe17 	ldw	r2,-8(fp)
 200c298:	10000926 	beq	r2,zero,200c2c0 <alt_flash_open_dev+0x50>
 200c29c:	e0bffe17 	ldw	r2,-8(fp)
 200c2a0:	10800317 	ldw	r2,12(r2)
 200c2a4:	10000626 	beq	r2,zero,200c2c0 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 200c2a8:	e0bffe17 	ldw	r2,-8(fp)
 200c2ac:	10800317 	ldw	r2,12(r2)
 200c2b0:	e17fff17 	ldw	r5,-4(fp)
 200c2b4:	e13ffe17 	ldw	r4,-8(fp)
 200c2b8:	103ee83a 	callr	r2
 200c2bc:	00000106 	br	200c2c4 <alt_flash_open_dev+0x54>
  }

  return dev;
 200c2c0:	e0bffe17 	ldw	r2,-8(fp)
}
 200c2c4:	e037883a 	mov	sp,fp
 200c2c8:	dfc00117 	ldw	ra,4(sp)
 200c2cc:	df000017 	ldw	fp,0(sp)
 200c2d0:	dec00204 	addi	sp,sp,8
 200c2d4:	f800283a 	ret

0200c2d8 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 200c2d8:	defffd04 	addi	sp,sp,-12
 200c2dc:	dfc00215 	stw	ra,8(sp)
 200c2e0:	df000115 	stw	fp,4(sp)
 200c2e4:	df000104 	addi	fp,sp,4
 200c2e8:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 200c2ec:	e0bfff17 	ldw	r2,-4(fp)
 200c2f0:	10000826 	beq	r2,zero,200c314 <alt_flash_close_dev+0x3c>
 200c2f4:	e0bfff17 	ldw	r2,-4(fp)
 200c2f8:	10800417 	ldw	r2,16(r2)
 200c2fc:	10000526 	beq	r2,zero,200c314 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 200c300:	e0bfff17 	ldw	r2,-4(fp)
 200c304:	10800417 	ldw	r2,16(r2)
 200c308:	e13fff17 	ldw	r4,-4(fp)
 200c30c:	103ee83a 	callr	r2
  }
  return;
 200c310:	0001883a 	nop
 200c314:	0001883a 	nop
}
 200c318:	e037883a 	mov	sp,fp
 200c31c:	dfc00117 	ldw	ra,4(sp)
 200c320:	df000017 	ldw	fp,0(sp)
 200c324:	dec00204 	addi	sp,sp,8
 200c328:	f800283a 	ret

0200c32c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 200c32c:	deffff04 	addi	sp,sp,-4
 200c330:	df000015 	stw	fp,0(sp)
 200c334:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 200c338:	0001883a 	nop
 200c33c:	e037883a 	mov	sp,fp
 200c340:	df000017 	ldw	fp,0(sp)
 200c344:	dec00104 	addi	sp,sp,4
 200c348:	f800283a 	ret

0200c34c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 200c34c:	defffe04 	addi	sp,sp,-8
 200c350:	df000115 	stw	fp,4(sp)
 200c354:	df000104 	addi	fp,sp,4
 200c358:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 200c35c:	e0bfff17 	ldw	r2,-4(fp)
 200c360:	10bffe84 	addi	r2,r2,-6
 200c364:	10c00428 	cmpgeui	r3,r2,16
 200c368:	18001a1e 	bne	r3,zero,200c3d4 <alt_exception_cause_generated_bad_addr+0x88>
 200c36c:	100690ba 	slli	r3,r2,2
 200c370:	00808074 	movhi	r2,513
 200c374:	10b0e104 	addi	r2,r2,-15484
 200c378:	1885883a 	add	r2,r3,r2
 200c37c:	10800017 	ldw	r2,0(r2)
 200c380:	1000683a 	jmp	r2
 200c384:	0200c3c4 	movi	r8,783
 200c388:	0200c3c4 	movi	r8,783
 200c38c:	0200c3d4 	movui	r8,783
 200c390:	0200c3d4 	movui	r8,783
 200c394:	0200c3d4 	movui	r8,783
 200c398:	0200c3c4 	movi	r8,783
 200c39c:	0200c3cc 	andi	r8,zero,783
 200c3a0:	0200c3d4 	movui	r8,783
 200c3a4:	0200c3c4 	movi	r8,783
 200c3a8:	0200c3c4 	movi	r8,783
 200c3ac:	0200c3d4 	movui	r8,783
 200c3b0:	0200c3c4 	movi	r8,783
 200c3b4:	0200c3cc 	andi	r8,zero,783
 200c3b8:	0200c3d4 	movui	r8,783
 200c3bc:	0200c3d4 	movui	r8,783
 200c3c0:	0200c3c4 	movi	r8,783
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 200c3c4:	00800044 	movi	r2,1
 200c3c8:	00000306 	br	200c3d8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 200c3cc:	0005883a 	mov	r2,zero
 200c3d0:	00000106 	br	200c3d8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 200c3d4:	0005883a 	mov	r2,zero
  }
}
 200c3d8:	e037883a 	mov	sp,fp
 200c3dc:	df000017 	ldw	fp,0(sp)
 200c3e0:	dec00104 	addi	sp,sp,4
 200c3e4:	f800283a 	ret

0200c3e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 200c3e8:	defff804 	addi	sp,sp,-32
 200c3ec:	dfc00715 	stw	ra,28(sp)
 200c3f0:	df000615 	stw	fp,24(sp)
 200c3f4:	dc000515 	stw	r16,20(sp)
 200c3f8:	df000604 	addi	fp,sp,24
 200c3fc:	e13ffb15 	stw	r4,-20(fp)
 200c400:	e17ffc15 	stw	r5,-16(fp)
 200c404:	e1bffd15 	stw	r6,-12(fp)
 200c408:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 200c40c:	e1bffe17 	ldw	r6,-8(fp)
 200c410:	e17ffd17 	ldw	r5,-12(fp)
 200c414:	e13ffc17 	ldw	r4,-16(fp)
 200c418:	200c6700 	call	200c670 <open>
 200c41c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 200c420:	e0bffa17 	ldw	r2,-24(fp)
 200c424:	10002216 	blt	r2,zero,200c4b0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 200c428:	04000034 	movhi	r16,0
 200c42c:	8404dc04 	addi	r16,r16,4976
 200c430:	e0bffa17 	ldw	r2,-24(fp)
 200c434:	01400304 	movi	r5,12
 200c438:	1009883a 	mov	r4,r2
 200c43c:	20093300 	call	2009330 <__mulsi3>
 200c440:	8085883a 	add	r2,r16,r2
 200c444:	10c00017 	ldw	r3,0(r2)
 200c448:	e0bffb17 	ldw	r2,-20(fp)
 200c44c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 200c450:	04000034 	movhi	r16,0
 200c454:	8404dc04 	addi	r16,r16,4976
 200c458:	e0bffa17 	ldw	r2,-24(fp)
 200c45c:	01400304 	movi	r5,12
 200c460:	1009883a 	mov	r4,r2
 200c464:	20093300 	call	2009330 <__mulsi3>
 200c468:	8085883a 	add	r2,r16,r2
 200c46c:	10800104 	addi	r2,r2,4
 200c470:	10c00017 	ldw	r3,0(r2)
 200c474:	e0bffb17 	ldw	r2,-20(fp)
 200c478:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200c47c:	04000034 	movhi	r16,0
 200c480:	8404dc04 	addi	r16,r16,4976
 200c484:	e0bffa17 	ldw	r2,-24(fp)
 200c488:	01400304 	movi	r5,12
 200c48c:	1009883a 	mov	r4,r2
 200c490:	20093300 	call	2009330 <__mulsi3>
 200c494:	8085883a 	add	r2,r16,r2
 200c498:	10800204 	addi	r2,r2,8
 200c49c:	10c00017 	ldw	r3,0(r2)
 200c4a0:	e0bffb17 	ldw	r2,-20(fp)
 200c4a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 200c4a8:	e13ffa17 	ldw	r4,-24(fp)
 200c4ac:	200c7cc0 	call	200c7cc <alt_release_fd>
  }
} 
 200c4b0:	0001883a 	nop
 200c4b4:	e6ffff04 	addi	sp,fp,-4
 200c4b8:	dfc00217 	ldw	ra,8(sp)
 200c4bc:	df000117 	ldw	fp,4(sp)
 200c4c0:	dc000017 	ldw	r16,0(sp)
 200c4c4:	dec00304 	addi	sp,sp,12
 200c4c8:	f800283a 	ret

0200c4cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 200c4cc:	defffb04 	addi	sp,sp,-20
 200c4d0:	dfc00415 	stw	ra,16(sp)
 200c4d4:	df000315 	stw	fp,12(sp)
 200c4d8:	df000304 	addi	fp,sp,12
 200c4dc:	e13ffd15 	stw	r4,-12(fp)
 200c4e0:	e17ffe15 	stw	r5,-8(fp)
 200c4e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 200c4e8:	01c07fc4 	movi	r7,511
 200c4ec:	01800044 	movi	r6,1
 200c4f0:	e17ffd17 	ldw	r5,-12(fp)
 200c4f4:	01000034 	movhi	r4,0
 200c4f8:	2104df04 	addi	r4,r4,4988
 200c4fc:	200c3e80 	call	200c3e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 200c500:	01c07fc4 	movi	r7,511
 200c504:	000d883a 	mov	r6,zero
 200c508:	e17ffe17 	ldw	r5,-8(fp)
 200c50c:	01000034 	movhi	r4,0
 200c510:	2104dc04 	addi	r4,r4,4976
 200c514:	200c3e80 	call	200c3e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 200c518:	01c07fc4 	movi	r7,511
 200c51c:	01800044 	movi	r6,1
 200c520:	e17fff17 	ldw	r5,-4(fp)
 200c524:	01000034 	movhi	r4,0
 200c528:	2104e204 	addi	r4,r4,5000
 200c52c:	200c3e80 	call	200c3e8 <alt_open_fd>
}  
 200c530:	0001883a 	nop
 200c534:	e037883a 	mov	sp,fp
 200c538:	dfc00117 	ldw	ra,4(sp)
 200c53c:	df000017 	ldw	fp,0(sp)
 200c540:	dec00204 	addi	sp,sp,8
 200c544:	f800283a 	ret

0200c548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200c548:	defffe04 	addi	sp,sp,-8
 200c54c:	dfc00115 	stw	ra,4(sp)
 200c550:	df000015 	stw	fp,0(sp)
 200c554:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200c558:	d0a00817 	ldw	r2,-32736(gp)
 200c55c:	10000326 	beq	r2,zero,200c56c <alt_get_errno+0x24>
 200c560:	d0a00817 	ldw	r2,-32736(gp)
 200c564:	103ee83a 	callr	r2
 200c568:	00000106 	br	200c570 <alt_get_errno+0x28>
 200c56c:	d0a01604 	addi	r2,gp,-32680
}
 200c570:	e037883a 	mov	sp,fp
 200c574:	dfc00117 	ldw	ra,4(sp)
 200c578:	df000017 	ldw	fp,0(sp)
 200c57c:	dec00204 	addi	sp,sp,8
 200c580:	f800283a 	ret

0200c584 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 200c584:	defffb04 	addi	sp,sp,-20
 200c588:	dfc00415 	stw	ra,16(sp)
 200c58c:	df000315 	stw	fp,12(sp)
 200c590:	dc000215 	stw	r16,8(sp)
 200c594:	df000304 	addi	fp,sp,12
 200c598:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200c59c:	e0bffe17 	ldw	r2,-8(fp)
 200c5a0:	10800217 	ldw	r2,8(r2)
 200c5a4:	10d00034 	orhi	r3,r2,16384
 200c5a8:	e0bffe17 	ldw	r2,-8(fp)
 200c5ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200c5b0:	e03ffd15 	stw	zero,-12(fp)
 200c5b4:	00002306 	br	200c644 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200c5b8:	04000034 	movhi	r16,0
 200c5bc:	8404dc04 	addi	r16,r16,4976
 200c5c0:	e0bffd17 	ldw	r2,-12(fp)
 200c5c4:	01400304 	movi	r5,12
 200c5c8:	1009883a 	mov	r4,r2
 200c5cc:	20093300 	call	2009330 <__mulsi3>
 200c5d0:	8085883a 	add	r2,r16,r2
 200c5d4:	10c00017 	ldw	r3,0(r2)
 200c5d8:	e0bffe17 	ldw	r2,-8(fp)
 200c5dc:	10800017 	ldw	r2,0(r2)
 200c5e0:	1880151e 	bne	r3,r2,200c638 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200c5e4:	04000034 	movhi	r16,0
 200c5e8:	8404dc04 	addi	r16,r16,4976
 200c5ec:	e0bffd17 	ldw	r2,-12(fp)
 200c5f0:	01400304 	movi	r5,12
 200c5f4:	1009883a 	mov	r4,r2
 200c5f8:	20093300 	call	2009330 <__mulsi3>
 200c5fc:	8085883a 	add	r2,r16,r2
 200c600:	10800204 	addi	r2,r2,8
 200c604:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200c608:	10000b0e 	bge	r2,zero,200c638 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 200c60c:	01400304 	movi	r5,12
 200c610:	e13ffd17 	ldw	r4,-12(fp)
 200c614:	20093300 	call	2009330 <__mulsi3>
 200c618:	1007883a 	mov	r3,r2
 200c61c:	00800034 	movhi	r2,0
 200c620:	1084dc04 	addi	r2,r2,4976
 200c624:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200c628:	e0bffe17 	ldw	r2,-8(fp)
 200c62c:	18800226 	beq	r3,r2,200c638 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200c630:	00bffcc4 	movi	r2,-13
 200c634:	00000806 	br	200c658 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200c638:	e0bffd17 	ldw	r2,-12(fp)
 200c63c:	10800044 	addi	r2,r2,1
 200c640:	e0bffd15 	stw	r2,-12(fp)
 200c644:	d0a00717 	ldw	r2,-32740(gp)
 200c648:	1007883a 	mov	r3,r2
 200c64c:	e0bffd17 	ldw	r2,-12(fp)
 200c650:	18bfd92e 	bgeu	r3,r2,200c5b8 <__alt_mem_epcs_flash_controller+0xffffb5b8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200c654:	0005883a 	mov	r2,zero
}
 200c658:	e6ffff04 	addi	sp,fp,-4
 200c65c:	dfc00217 	ldw	ra,8(sp)
 200c660:	df000117 	ldw	fp,4(sp)
 200c664:	dc000017 	ldw	r16,0(sp)
 200c668:	dec00304 	addi	sp,sp,12
 200c66c:	f800283a 	ret

0200c670 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 200c670:	defff604 	addi	sp,sp,-40
 200c674:	dfc00915 	stw	ra,36(sp)
 200c678:	df000815 	stw	fp,32(sp)
 200c67c:	df000804 	addi	fp,sp,32
 200c680:	e13ffd15 	stw	r4,-12(fp)
 200c684:	e17ffe15 	stw	r5,-8(fp)
 200c688:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200c68c:	00bfffc4 	movi	r2,-1
 200c690:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 200c694:	00bffb44 	movi	r2,-19
 200c698:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 200c69c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 200c6a0:	d1600504 	addi	r5,gp,-32748
 200c6a4:	e13ffd17 	ldw	r4,-12(fp)
 200c6a8:	200cc140 	call	200cc14 <alt_find_dev>
 200c6ac:	e0bff815 	stw	r2,-32(fp)
 200c6b0:	e0bff817 	ldw	r2,-32(fp)
 200c6b4:	1000051e 	bne	r2,zero,200c6cc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200c6b8:	e13ffd17 	ldw	r4,-12(fp)
 200c6bc:	200cca40 	call	200cca4 <alt_find_file>
 200c6c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 200c6c4:	00800044 	movi	r2,1
 200c6c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 200c6cc:	e0bff817 	ldw	r2,-32(fp)
 200c6d0:	10002b26 	beq	r2,zero,200c780 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200c6d4:	e13ff817 	ldw	r4,-32(fp)
 200c6d8:	200cdac0 	call	200cdac <alt_get_fd>
 200c6dc:	e0bff915 	stw	r2,-28(fp)
 200c6e0:	e0bff917 	ldw	r2,-28(fp)
 200c6e4:	1000030e 	bge	r2,zero,200c6f4 <open+0x84>
    {
      status = index;
 200c6e8:	e0bff917 	ldw	r2,-28(fp)
 200c6ec:	e0bffa15 	stw	r2,-24(fp)
 200c6f0:	00002506 	br	200c788 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 200c6f4:	01400304 	movi	r5,12
 200c6f8:	e13ff917 	ldw	r4,-28(fp)
 200c6fc:	20093300 	call	2009330 <__mulsi3>
 200c700:	1007883a 	mov	r3,r2
 200c704:	00800034 	movhi	r2,0
 200c708:	1084dc04 	addi	r2,r2,4976
 200c70c:	1885883a 	add	r2,r3,r2
 200c710:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200c714:	e0fffe17 	ldw	r3,-8(fp)
 200c718:	00900034 	movhi	r2,16384
 200c71c:	10bfffc4 	addi	r2,r2,-1
 200c720:	1886703a 	and	r3,r3,r2
 200c724:	e0bffc17 	ldw	r2,-16(fp)
 200c728:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200c72c:	e0bffb17 	ldw	r2,-20(fp)
 200c730:	1000051e 	bne	r2,zero,200c748 <open+0xd8>
 200c734:	e13ffc17 	ldw	r4,-16(fp)
 200c738:	200c5840 	call	200c584 <alt_file_locked>
 200c73c:	e0bffa15 	stw	r2,-24(fp)
 200c740:	e0bffa17 	ldw	r2,-24(fp)
 200c744:	10001016 	blt	r2,zero,200c788 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200c748:	e0bff817 	ldw	r2,-32(fp)
 200c74c:	10800317 	ldw	r2,12(r2)
 200c750:	10000826 	beq	r2,zero,200c774 <open+0x104>
 200c754:	e0bff817 	ldw	r2,-32(fp)
 200c758:	10800317 	ldw	r2,12(r2)
 200c75c:	e1ffff17 	ldw	r7,-4(fp)
 200c760:	e1bffe17 	ldw	r6,-8(fp)
 200c764:	e17ffd17 	ldw	r5,-12(fp)
 200c768:	e13ffc17 	ldw	r4,-16(fp)
 200c76c:	103ee83a 	callr	r2
 200c770:	00000106 	br	200c778 <open+0x108>
 200c774:	0005883a 	mov	r2,zero
 200c778:	e0bffa15 	stw	r2,-24(fp)
 200c77c:	00000206 	br	200c788 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 200c780:	00bffb44 	movi	r2,-19
 200c784:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 200c788:	e0bffa17 	ldw	r2,-24(fp)
 200c78c:	1000090e 	bge	r2,zero,200c7b4 <open+0x144>
  {
    alt_release_fd (index);  
 200c790:	e13ff917 	ldw	r4,-28(fp)
 200c794:	200c7cc0 	call	200c7cc <alt_release_fd>
    ALT_ERRNO = -status;
 200c798:	200c5480 	call	200c548 <alt_get_errno>
 200c79c:	1007883a 	mov	r3,r2
 200c7a0:	e0bffa17 	ldw	r2,-24(fp)
 200c7a4:	0085c83a 	sub	r2,zero,r2
 200c7a8:	18800015 	stw	r2,0(r3)
    return -1;
 200c7ac:	00bfffc4 	movi	r2,-1
 200c7b0:	00000106 	br	200c7b8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 200c7b4:	e0bff917 	ldw	r2,-28(fp)
}
 200c7b8:	e037883a 	mov	sp,fp
 200c7bc:	dfc00117 	ldw	ra,4(sp)
 200c7c0:	df000017 	ldw	fp,0(sp)
 200c7c4:	dec00204 	addi	sp,sp,8
 200c7c8:	f800283a 	ret

0200c7cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200c7cc:	defffc04 	addi	sp,sp,-16
 200c7d0:	dfc00315 	stw	ra,12(sp)
 200c7d4:	df000215 	stw	fp,8(sp)
 200c7d8:	dc000115 	stw	r16,4(sp)
 200c7dc:	df000204 	addi	fp,sp,8
 200c7e0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 200c7e4:	e0bffe17 	ldw	r2,-8(fp)
 200c7e8:	108000d0 	cmplti	r2,r2,3
 200c7ec:	1000111e 	bne	r2,zero,200c834 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200c7f0:	04000034 	movhi	r16,0
 200c7f4:	8404dc04 	addi	r16,r16,4976
 200c7f8:	e0bffe17 	ldw	r2,-8(fp)
 200c7fc:	01400304 	movi	r5,12
 200c800:	1009883a 	mov	r4,r2
 200c804:	20093300 	call	2009330 <__mulsi3>
 200c808:	8085883a 	add	r2,r16,r2
 200c80c:	10800204 	addi	r2,r2,8
 200c810:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200c814:	04000034 	movhi	r16,0
 200c818:	8404dc04 	addi	r16,r16,4976
 200c81c:	e0bffe17 	ldw	r2,-8(fp)
 200c820:	01400304 	movi	r5,12
 200c824:	1009883a 	mov	r4,r2
 200c828:	20093300 	call	2009330 <__mulsi3>
 200c82c:	8085883a 	add	r2,r16,r2
 200c830:	10000015 	stw	zero,0(r2)
  }
}
 200c834:	0001883a 	nop
 200c838:	e6ffff04 	addi	sp,fp,-4
 200c83c:	dfc00217 	ldw	ra,8(sp)
 200c840:	df000117 	ldw	fp,4(sp)
 200c844:	dc000017 	ldw	r16,0(sp)
 200c848:	dec00304 	addi	sp,sp,12
 200c84c:	f800283a 	ret

0200c850 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200c850:	defffa04 	addi	sp,sp,-24
 200c854:	df000515 	stw	fp,20(sp)
 200c858:	df000504 	addi	fp,sp,20
 200c85c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c860:	0005303a 	rdctl	r2,status
 200c864:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c868:	e0fffc17 	ldw	r3,-16(fp)
 200c86c:	00bfff84 	movi	r2,-2
 200c870:	1884703a 	and	r2,r3,r2
 200c874:	1001703a 	wrctl	status,r2
  
  return context;
 200c878:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 200c87c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 200c880:	e0bfff17 	ldw	r2,-4(fp)
 200c884:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200c888:	e0bffd17 	ldw	r2,-12(fp)
 200c88c:	10800017 	ldw	r2,0(r2)
 200c890:	e0fffd17 	ldw	r3,-12(fp)
 200c894:	18c00117 	ldw	r3,4(r3)
 200c898:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 200c89c:	e0bffd17 	ldw	r2,-12(fp)
 200c8a0:	10800117 	ldw	r2,4(r2)
 200c8a4:	e0fffd17 	ldw	r3,-12(fp)
 200c8a8:	18c00017 	ldw	r3,0(r3)
 200c8ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200c8b0:	e0bffd17 	ldw	r2,-12(fp)
 200c8b4:	e0fffd17 	ldw	r3,-12(fp)
 200c8b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 200c8bc:	e0bffd17 	ldw	r2,-12(fp)
 200c8c0:	e0fffd17 	ldw	r3,-12(fp)
 200c8c4:	10c00015 	stw	r3,0(r2)
 200c8c8:	e0bffb17 	ldw	r2,-20(fp)
 200c8cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c8d0:	e0bffe17 	ldw	r2,-8(fp)
 200c8d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200c8d8:	0001883a 	nop
 200c8dc:	e037883a 	mov	sp,fp
 200c8e0:	df000017 	ldw	fp,0(sp)
 200c8e4:	dec00104 	addi	sp,sp,4
 200c8e8:	f800283a 	ret

0200c8ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 200c8ec:	defffb04 	addi	sp,sp,-20
 200c8f0:	dfc00415 	stw	ra,16(sp)
 200c8f4:	df000315 	stw	fp,12(sp)
 200c8f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 200c8fc:	d0a00b17 	ldw	r2,-32724(gp)
 200c900:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 200c904:	d0a01517 	ldw	r2,-32684(gp)
 200c908:	10800044 	addi	r2,r2,1
 200c90c:	d0a01515 	stw	r2,-32684(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200c910:	00002e06 	br	200c9cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 200c914:	e0bffd17 	ldw	r2,-12(fp)
 200c918:	10800017 	ldw	r2,0(r2)
 200c91c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200c920:	e0bffd17 	ldw	r2,-12(fp)
 200c924:	10800403 	ldbu	r2,16(r2)
 200c928:	10803fcc 	andi	r2,r2,255
 200c92c:	10000426 	beq	r2,zero,200c940 <alt_tick+0x54>
 200c930:	d0a01517 	ldw	r2,-32684(gp)
 200c934:	1000021e 	bne	r2,zero,200c940 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 200c938:	e0bffd17 	ldw	r2,-12(fp)
 200c93c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 200c940:	e0bffd17 	ldw	r2,-12(fp)
 200c944:	10800217 	ldw	r2,8(r2)
 200c948:	d0e01517 	ldw	r3,-32684(gp)
 200c94c:	18801d36 	bltu	r3,r2,200c9c4 <alt_tick+0xd8>
 200c950:	e0bffd17 	ldw	r2,-12(fp)
 200c954:	10800403 	ldbu	r2,16(r2)
 200c958:	10803fcc 	andi	r2,r2,255
 200c95c:	1000191e 	bne	r2,zero,200c9c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 200c960:	e0bffd17 	ldw	r2,-12(fp)
 200c964:	10800317 	ldw	r2,12(r2)
 200c968:	e0fffd17 	ldw	r3,-12(fp)
 200c96c:	18c00517 	ldw	r3,20(r3)
 200c970:	1809883a 	mov	r4,r3
 200c974:	103ee83a 	callr	r2
 200c978:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 200c97c:	e0bfff17 	ldw	r2,-4(fp)
 200c980:	1000031e 	bne	r2,zero,200c990 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 200c984:	e13ffd17 	ldw	r4,-12(fp)
 200c988:	200c8500 	call	200c850 <alt_alarm_stop>
 200c98c:	00000d06 	br	200c9c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 200c990:	e0bffd17 	ldw	r2,-12(fp)
 200c994:	10c00217 	ldw	r3,8(r2)
 200c998:	e0bfff17 	ldw	r2,-4(fp)
 200c99c:	1887883a 	add	r3,r3,r2
 200c9a0:	e0bffd17 	ldw	r2,-12(fp)
 200c9a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 200c9a8:	e0bffd17 	ldw	r2,-12(fp)
 200c9ac:	10c00217 	ldw	r3,8(r2)
 200c9b0:	d0a01517 	ldw	r2,-32684(gp)
 200c9b4:	1880032e 	bgeu	r3,r2,200c9c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 200c9b8:	e0bffd17 	ldw	r2,-12(fp)
 200c9bc:	00c00044 	movi	r3,1
 200c9c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 200c9c4:	e0bffe17 	ldw	r2,-8(fp)
 200c9c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200c9cc:	e0fffd17 	ldw	r3,-12(fp)
 200c9d0:	d0a00b04 	addi	r2,gp,-32724
 200c9d4:	18bfcf1e 	bne	r3,r2,200c914 <__alt_mem_epcs_flash_controller+0xffffb914>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 200c9d8:	0001883a 	nop
}
 200c9dc:	0001883a 	nop
 200c9e0:	e037883a 	mov	sp,fp
 200c9e4:	dfc00117 	ldw	ra,4(sp)
 200c9e8:	df000017 	ldw	fp,0(sp)
 200c9ec:	dec00204 	addi	sp,sp,8
 200c9f0:	f800283a 	ret

0200c9f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 200c9f4:	deffff04 	addi	sp,sp,-4
 200c9f8:	df000015 	stw	fp,0(sp)
 200c9fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 200ca00:	000170fa 	wrctl	ienable,zero
}
 200ca04:	0001883a 	nop
 200ca08:	e037883a 	mov	sp,fp
 200ca0c:	df000017 	ldw	fp,0(sp)
 200ca10:	dec00104 	addi	sp,sp,4
 200ca14:	f800283a 	ret

0200ca18 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 200ca18:	defff404 	addi	sp,sp,-48
 200ca1c:	df000b15 	stw	fp,44(sp)
 200ca20:	df000b04 	addi	fp,sp,44
 200ca24:	e13ffc15 	stw	r4,-16(fp)
 200ca28:	e17ffd15 	stw	r5,-12(fp)
 200ca2c:	e1bffe15 	stw	r6,-8(fp)
 200ca30:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 200ca34:	e0ffff17 	ldw	r3,-4(fp)
 200ca38:	e0bffe17 	ldw	r2,-8(fp)
 200ca3c:	1885883a 	add	r2,r3,r2
 200ca40:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 200ca44:	e0c00217 	ldw	r3,8(fp)
 200ca48:	e0800117 	ldw	r2,4(fp)
 200ca4c:	1885883a 	add	r2,r3,r2
 200ca50:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 200ca54:	e0800117 	ldw	r2,4(fp)
 200ca58:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 200ca5c:	e0bffe17 	ldw	r2,-8(fp)
 200ca60:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 200ca64:	00800044 	movi	r2,1
 200ca68:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 200ca6c:	e0bffc17 	ldw	r2,-16(fp)
 200ca70:	10800504 	addi	r2,r2,20
 200ca74:	1009883a 	mov	r4,r2
 200ca78:	00c00044 	movi	r3,1
 200ca7c:	e0bffd17 	ldw	r2,-12(fp)
 200ca80:	1884983a 	sll	r2,r3,r2
 200ca84:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 200ca88:	e0800317 	ldw	r2,12(fp)
 200ca8c:	1080008c 	andi	r2,r2,2
 200ca90:	1000051e 	bne	r2,zero,200caa8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 200ca94:	e0bffc17 	ldw	r2,-16(fp)
 200ca98:	10800304 	addi	r2,r2,12
 200ca9c:	1007883a 	mov	r3,r2
 200caa0:	00810004 	movi	r2,1024
 200caa4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 200caa8:	e0bffc17 	ldw	r2,-16(fp)
 200caac:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 200cab0:	e0bffc17 	ldw	r2,-16(fp)
 200cab4:	10800204 	addi	r2,r2,8
 200cab8:	10800037 	ldwio	r2,0(r2)
 200cabc:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 200cac0:	e0bffa17 	ldw	r2,-24(fp)
 200cac4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 200cac8:	10000226 	beq	r2,zero,200cad4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 200cacc:	e0bff717 	ldw	r2,-36(fp)
 200cad0:	1000031e 	bne	r2,zero,200cae0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 200cad4:	e0bffa17 	ldw	r2,-24(fp)
 200cad8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 200cadc:	103ff426 	beq	r2,zero,200cab0 <__alt_mem_epcs_flash_controller+0xffffbab0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 200cae0:	e0bffa17 	ldw	r2,-24(fp)
 200cae4:	1080100c 	andi	r2,r2,64
 200cae8:	10001e26 	beq	r2,zero,200cb64 <alt_avalon_spi_command+0x14c>
 200caec:	e0bff717 	ldw	r2,-36(fp)
 200caf0:	00801c0e 	bge	zero,r2,200cb64 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 200caf4:	e0bff717 	ldw	r2,-36(fp)
 200caf8:	10bfffc4 	addi	r2,r2,-1
 200cafc:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 200cb00:	e0ffff17 	ldw	r3,-4(fp)
 200cb04:	e0bff817 	ldw	r2,-32(fp)
 200cb08:	18800a2e 	bgeu	r3,r2,200cb34 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 200cb0c:	e0bffc17 	ldw	r2,-16(fp)
 200cb10:	10800104 	addi	r2,r2,4
 200cb14:	1009883a 	mov	r4,r2
 200cb18:	e0bfff17 	ldw	r2,-4(fp)
 200cb1c:	10c00044 	addi	r3,r2,1
 200cb20:	e0ffff15 	stw	r3,-4(fp)
 200cb24:	10800003 	ldbu	r2,0(r2)
 200cb28:	10803fcc 	andi	r2,r2,255
 200cb2c:	20800035 	stwio	r2,0(r4)
 200cb30:	00000c06 	br	200cb64 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 200cb34:	e0bff517 	ldw	r2,-44(fp)
 200cb38:	10000826 	beq	r2,zero,200cb5c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 200cb3c:	e0bff517 	ldw	r2,-44(fp)
 200cb40:	10bfffc4 	addi	r2,r2,-1
 200cb44:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 200cb48:	e0bffc17 	ldw	r2,-16(fp)
 200cb4c:	10800104 	addi	r2,r2,4
 200cb50:	0007883a 	mov	r3,zero
 200cb54:	10c00035 	stwio	r3,0(r2)
 200cb58:	00000206 	br	200cb64 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 200cb5c:	00bf0004 	movi	r2,-1024
 200cb60:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 200cb64:	e0bffa17 	ldw	r2,-24(fp)
 200cb68:	1080200c 	andi	r2,r2,128
 200cb6c:	103fd026 	beq	r2,zero,200cab0 <__alt_mem_epcs_flash_controller+0xffffbab0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 200cb70:	e0bffc17 	ldw	r2,-16(fp)
 200cb74:	10800037 	ldwio	r2,0(r2)
 200cb78:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 200cb7c:	e0bff617 	ldw	r2,-40(fp)
 200cb80:	10000426 	beq	r2,zero,200cb94 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 200cb84:	e0bff617 	ldw	r2,-40(fp)
 200cb88:	10bfffc4 	addi	r2,r2,-1
 200cb8c:	e0bff615 	stw	r2,-40(fp)
 200cb90:	00000506 	br	200cba8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 200cb94:	e0800217 	ldw	r2,8(fp)
 200cb98:	10c00044 	addi	r3,r2,1
 200cb9c:	e0c00215 	stw	r3,8(fp)
 200cba0:	e0fffb17 	ldw	r3,-20(fp)
 200cba4:	10c00005 	stb	r3,0(r2)
      credits++;
 200cba8:	e0bff717 	ldw	r2,-36(fp)
 200cbac:	10800044 	addi	r2,r2,1
 200cbb0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 200cbb4:	e0bff617 	ldw	r2,-40(fp)
 200cbb8:	103fbd1e 	bne	r2,zero,200cab0 <__alt_mem_epcs_flash_controller+0xffffbab0>
 200cbbc:	e0c00217 	ldw	r3,8(fp)
 200cbc0:	e0bff917 	ldw	r2,-28(fp)
 200cbc4:	18bfba1e 	bne	r3,r2,200cab0 <__alt_mem_epcs_flash_controller+0xffffbab0>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 200cbc8:	e0bffc17 	ldw	r2,-16(fp)
 200cbcc:	10800204 	addi	r2,r2,8
 200cbd0:	10800037 	ldwio	r2,0(r2)
 200cbd4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 200cbd8:	e0bffa17 	ldw	r2,-24(fp)
 200cbdc:	1080080c 	andi	r2,r2,32
 200cbe0:	103ff926 	beq	r2,zero,200cbc8 <__alt_mem_epcs_flash_controller+0xffffbbc8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 200cbe4:	e0800317 	ldw	r2,12(fp)
 200cbe8:	1080004c 	andi	r2,r2,1
 200cbec:	1000041e 	bne	r2,zero,200cc00 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 200cbf0:	e0bffc17 	ldw	r2,-16(fp)
 200cbf4:	10800304 	addi	r2,r2,12
 200cbf8:	0007883a 	mov	r3,zero
 200cbfc:	10c00035 	stwio	r3,0(r2)

  return read_length;
 200cc00:	e0800117 	ldw	r2,4(fp)
}
 200cc04:	e037883a 	mov	sp,fp
 200cc08:	df000017 	ldw	fp,0(sp)
 200cc0c:	dec00104 	addi	sp,sp,4
 200cc10:	f800283a 	ret

0200cc14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 200cc14:	defffa04 	addi	sp,sp,-24
 200cc18:	dfc00515 	stw	ra,20(sp)
 200cc1c:	df000415 	stw	fp,16(sp)
 200cc20:	df000404 	addi	fp,sp,16
 200cc24:	e13ffe15 	stw	r4,-8(fp)
 200cc28:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 200cc2c:	e0bfff17 	ldw	r2,-4(fp)
 200cc30:	10800017 	ldw	r2,0(r2)
 200cc34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 200cc38:	e13ffe17 	ldw	r4,-8(fp)
 200cc3c:	2008c580 	call	2008c58 <strlen>
 200cc40:	10800044 	addi	r2,r2,1
 200cc44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200cc48:	00000d06 	br	200cc80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 200cc4c:	e0bffc17 	ldw	r2,-16(fp)
 200cc50:	10800217 	ldw	r2,8(r2)
 200cc54:	e0fffd17 	ldw	r3,-12(fp)
 200cc58:	180d883a 	mov	r6,r3
 200cc5c:	e17ffe17 	ldw	r5,-8(fp)
 200cc60:	1009883a 	mov	r4,r2
 200cc64:	200cea40 	call	200cea4 <memcmp>
 200cc68:	1000021e 	bne	r2,zero,200cc74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 200cc6c:	e0bffc17 	ldw	r2,-16(fp)
 200cc70:	00000706 	br	200cc90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200cc74:	e0bffc17 	ldw	r2,-16(fp)
 200cc78:	10800017 	ldw	r2,0(r2)
 200cc7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200cc80:	e0fffc17 	ldw	r3,-16(fp)
 200cc84:	e0bfff17 	ldw	r2,-4(fp)
 200cc88:	18bff01e 	bne	r3,r2,200cc4c <__alt_mem_epcs_flash_controller+0xffffbc4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 200cc8c:	0005883a 	mov	r2,zero
}
 200cc90:	e037883a 	mov	sp,fp
 200cc94:	dfc00117 	ldw	ra,4(sp)
 200cc98:	df000017 	ldw	fp,0(sp)
 200cc9c:	dec00204 	addi	sp,sp,8
 200cca0:	f800283a 	ret

0200cca4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 200cca4:	defffb04 	addi	sp,sp,-20
 200cca8:	dfc00415 	stw	ra,16(sp)
 200ccac:	df000315 	stw	fp,12(sp)
 200ccb0:	df000304 	addi	fp,sp,12
 200ccb4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 200ccb8:	d0a00317 	ldw	r2,-32756(gp)
 200ccbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200ccc0:	00003106 	br	200cd88 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 200ccc4:	e0bffd17 	ldw	r2,-12(fp)
 200ccc8:	10800217 	ldw	r2,8(r2)
 200cccc:	1009883a 	mov	r4,r2
 200ccd0:	2008c580 	call	2008c58 <strlen>
 200ccd4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 200ccd8:	e0bffd17 	ldw	r2,-12(fp)
 200ccdc:	10c00217 	ldw	r3,8(r2)
 200cce0:	e0bffe17 	ldw	r2,-8(fp)
 200cce4:	10bfffc4 	addi	r2,r2,-1
 200cce8:	1885883a 	add	r2,r3,r2
 200ccec:	10800003 	ldbu	r2,0(r2)
 200ccf0:	10803fcc 	andi	r2,r2,255
 200ccf4:	1080201c 	xori	r2,r2,128
 200ccf8:	10bfe004 	addi	r2,r2,-128
 200ccfc:	10800bd8 	cmpnei	r2,r2,47
 200cd00:	1000031e 	bne	r2,zero,200cd10 <alt_find_file+0x6c>
    {
      len -= 1;
 200cd04:	e0bffe17 	ldw	r2,-8(fp)
 200cd08:	10bfffc4 	addi	r2,r2,-1
 200cd0c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200cd10:	e0bffe17 	ldw	r2,-8(fp)
 200cd14:	e0ffff17 	ldw	r3,-4(fp)
 200cd18:	1885883a 	add	r2,r3,r2
 200cd1c:	10800003 	ldbu	r2,0(r2)
 200cd20:	10803fcc 	andi	r2,r2,255
 200cd24:	1080201c 	xori	r2,r2,128
 200cd28:	10bfe004 	addi	r2,r2,-128
 200cd2c:	10800be0 	cmpeqi	r2,r2,47
 200cd30:	1000081e 	bne	r2,zero,200cd54 <alt_find_file+0xb0>
 200cd34:	e0bffe17 	ldw	r2,-8(fp)
 200cd38:	e0ffff17 	ldw	r3,-4(fp)
 200cd3c:	1885883a 	add	r2,r3,r2
 200cd40:	10800003 	ldbu	r2,0(r2)
 200cd44:	10803fcc 	andi	r2,r2,255
 200cd48:	1080201c 	xori	r2,r2,128
 200cd4c:	10bfe004 	addi	r2,r2,-128
 200cd50:	10000a1e 	bne	r2,zero,200cd7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 200cd54:	e0bffd17 	ldw	r2,-12(fp)
 200cd58:	10800217 	ldw	r2,8(r2)
 200cd5c:	e0fffe17 	ldw	r3,-8(fp)
 200cd60:	180d883a 	mov	r6,r3
 200cd64:	e17fff17 	ldw	r5,-4(fp)
 200cd68:	1009883a 	mov	r4,r2
 200cd6c:	200cea40 	call	200cea4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200cd70:	1000021e 	bne	r2,zero,200cd7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 200cd74:	e0bffd17 	ldw	r2,-12(fp)
 200cd78:	00000706 	br	200cd98 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 200cd7c:	e0bffd17 	ldw	r2,-12(fp)
 200cd80:	10800017 	ldw	r2,0(r2)
 200cd84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200cd88:	e0fffd17 	ldw	r3,-12(fp)
 200cd8c:	d0a00304 	addi	r2,gp,-32756
 200cd90:	18bfcc1e 	bne	r3,r2,200ccc4 <__alt_mem_epcs_flash_controller+0xffffbcc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200cd94:	0005883a 	mov	r2,zero
}
 200cd98:	e037883a 	mov	sp,fp
 200cd9c:	dfc00117 	ldw	ra,4(sp)
 200cda0:	df000017 	ldw	fp,0(sp)
 200cda4:	dec00204 	addi	sp,sp,8
 200cda8:	f800283a 	ret

0200cdac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 200cdac:	defffa04 	addi	sp,sp,-24
 200cdb0:	dfc00515 	stw	ra,20(sp)
 200cdb4:	df000415 	stw	fp,16(sp)
 200cdb8:	dc000315 	stw	r16,12(sp)
 200cdbc:	df000404 	addi	fp,sp,16
 200cdc0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 200cdc4:	00bffa04 	movi	r2,-24
 200cdc8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200cdcc:	e03ffc15 	stw	zero,-16(fp)
 200cdd0:	00001d06 	br	200ce48 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 200cdd4:	04000034 	movhi	r16,0
 200cdd8:	8404dc04 	addi	r16,r16,4976
 200cddc:	e0bffc17 	ldw	r2,-16(fp)
 200cde0:	01400304 	movi	r5,12
 200cde4:	1009883a 	mov	r4,r2
 200cde8:	20093300 	call	2009330 <__mulsi3>
 200cdec:	8085883a 	add	r2,r16,r2
 200cdf0:	10800017 	ldw	r2,0(r2)
 200cdf4:	1000111e 	bne	r2,zero,200ce3c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 200cdf8:	04000034 	movhi	r16,0
 200cdfc:	8404dc04 	addi	r16,r16,4976
 200ce00:	e0bffc17 	ldw	r2,-16(fp)
 200ce04:	01400304 	movi	r5,12
 200ce08:	1009883a 	mov	r4,r2
 200ce0c:	20093300 	call	2009330 <__mulsi3>
 200ce10:	8085883a 	add	r2,r16,r2
 200ce14:	e0fffe17 	ldw	r3,-8(fp)
 200ce18:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 200ce1c:	d0e00717 	ldw	r3,-32740(gp)
 200ce20:	e0bffc17 	ldw	r2,-16(fp)
 200ce24:	1880020e 	bge	r3,r2,200ce30 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 200ce28:	e0bffc17 	ldw	r2,-16(fp)
 200ce2c:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
 200ce30:	e0bffc17 	ldw	r2,-16(fp)
 200ce34:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 200ce38:	00000606 	br	200ce54 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200ce3c:	e0bffc17 	ldw	r2,-16(fp)
 200ce40:	10800044 	addi	r2,r2,1
 200ce44:	e0bffc15 	stw	r2,-16(fp)
 200ce48:	e0bffc17 	ldw	r2,-16(fp)
 200ce4c:	10800810 	cmplti	r2,r2,32
 200ce50:	103fe01e 	bne	r2,zero,200cdd4 <__alt_mem_epcs_flash_controller+0xffffbdd4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 200ce54:	e0bffd17 	ldw	r2,-12(fp)
}
 200ce58:	e6ffff04 	addi	sp,fp,-4
 200ce5c:	dfc00217 	ldw	ra,8(sp)
 200ce60:	df000117 	ldw	fp,4(sp)
 200ce64:	dc000017 	ldw	r16,0(sp)
 200ce68:	dec00304 	addi	sp,sp,12
 200ce6c:	f800283a 	ret

0200ce70 <atexit>:
 200ce70:	200b883a 	mov	r5,r4
 200ce74:	000f883a 	mov	r7,zero
 200ce78:	000d883a 	mov	r6,zero
 200ce7c:	0009883a 	mov	r4,zero
 200ce80:	200cefc1 	jmpi	200cefc <__register_exitproc>

0200ce84 <exit>:
 200ce84:	defffe04 	addi	sp,sp,-8
 200ce88:	000b883a 	mov	r5,zero
 200ce8c:	dc000015 	stw	r16,0(sp)
 200ce90:	dfc00115 	stw	ra,4(sp)
 200ce94:	2021883a 	mov	r16,r4
 200ce98:	200d0540 	call	200d054 <__call_exitprocs>
 200ce9c:	8009883a 	mov	r4,r16
 200cea0:	200d1e40 	call	200d1e4 <_exit>

0200cea4 <memcmp>:
 200cea4:	218d883a 	add	r6,r4,r6
 200cea8:	21800826 	beq	r4,r6,200cecc <memcmp+0x28>
 200ceac:	20800003 	ldbu	r2,0(r4)
 200ceb0:	28c00003 	ldbu	r3,0(r5)
 200ceb4:	10c00226 	beq	r2,r3,200cec0 <memcmp+0x1c>
 200ceb8:	10c5c83a 	sub	r2,r2,r3
 200cebc:	f800283a 	ret
 200cec0:	21000044 	addi	r4,r4,1
 200cec4:	29400044 	addi	r5,r5,1
 200cec8:	003ff706 	br	200cea8 <__alt_mem_epcs_flash_controller+0xffffbea8>
 200cecc:	0005883a 	mov	r2,zero
 200ced0:	f800283a 	ret

0200ced4 <memcpy>:
 200ced4:	2005883a 	mov	r2,r4
 200ced8:	2007883a 	mov	r3,r4
 200cedc:	218d883a 	add	r6,r4,r6
 200cee0:	19800526 	beq	r3,r6,200cef8 <memcpy+0x24>
 200cee4:	29000003 	ldbu	r4,0(r5)
 200cee8:	18c00044 	addi	r3,r3,1
 200ceec:	29400044 	addi	r5,r5,1
 200cef0:	193fffc5 	stb	r4,-1(r3)
 200cef4:	003ffa06 	br	200cee0 <__alt_mem_epcs_flash_controller+0xffffbee0>
 200cef8:	f800283a 	ret

0200cefc <__register_exitproc>:
 200cefc:	00800034 	movhi	r2,0
 200cf00:	10853c04 	addi	r2,r2,5360
 200cf04:	10c00017 	ldw	r3,0(r2)
 200cf08:	defff904 	addi	sp,sp,-28
 200cf0c:	dc000015 	stw	r16,0(sp)
 200cf10:	1c000c17 	ldw	r16,48(r3)
 200cf14:	dd400515 	stw	r21,20(sp)
 200cf18:	dd000415 	stw	r20,16(sp)
 200cf1c:	dcc00315 	stw	r19,12(sp)
 200cf20:	dc800215 	stw	r18,8(sp)
 200cf24:	dc400115 	stw	r17,4(sp)
 200cf28:	dfc00615 	stw	ra,24(sp)
 200cf2c:	202b883a 	mov	r21,r4
 200cf30:	2823883a 	mov	r17,r5
 200cf34:	3027883a 	mov	r19,r6
 200cf38:	3825883a 	mov	r18,r7
 200cf3c:	1029883a 	mov	r20,r2
 200cf40:	8000021e 	bne	r16,zero,200cf4c <__register_exitproc+0x50>
 200cf44:	1c000d04 	addi	r16,r3,52
 200cf48:	1c000c15 	stw	r16,48(r3)
 200cf4c:	80800117 	ldw	r2,4(r16)
 200cf50:	00c007c4 	movi	r3,31
 200cf54:	1880110e 	bge	r3,r2,200cf9c <__register_exitproc+0xa0>
 200cf58:	00800034 	movhi	r2,0
 200cf5c:	10800004 	addi	r2,r2,0
 200cf60:	1000021e 	bne	r2,zero,200cf6c <__register_exitproc+0x70>
 200cf64:	00bfffc4 	movi	r2,-1
 200cf68:	00003106 	br	200d030 <__register_exitproc+0x134>
 200cf6c:	01002304 	movi	r4,140
 200cf70:	00000000 	call	0 <__alt_mem_sdram>
 200cf74:	1021883a 	mov	r16,r2
 200cf78:	103ffa26 	beq	r2,zero,200cf64 <__alt_mem_epcs_flash_controller+0xffffbf64>
 200cf7c:	10000115 	stw	zero,4(r2)
 200cf80:	a0800017 	ldw	r2,0(r20)
 200cf84:	10c00c17 	ldw	r3,48(r2)
 200cf88:	80c00015 	stw	r3,0(r16)
 200cf8c:	14000c15 	stw	r16,48(r2)
 200cf90:	80002215 	stw	zero,136(r16)
 200cf94:	a8001d26 	beq	r21,zero,200d00c <__register_exitproc+0x110>
 200cf98:	00000606 	br	200cfb4 <__register_exitproc+0xb8>
 200cf9c:	a8001b26 	beq	r21,zero,200d00c <__register_exitproc+0x110>
 200cfa0:	80802217 	ldw	r2,136(r16)
 200cfa4:	1000091e 	bne	r2,zero,200cfcc <__register_exitproc+0xd0>
 200cfa8:	00800034 	movhi	r2,0
 200cfac:	10800004 	addi	r2,r2,0
 200cfb0:	103fec26 	beq	r2,zero,200cf64 <__alt_mem_epcs_flash_controller+0xffffbf64>
 200cfb4:	01004204 	movi	r4,264
 200cfb8:	00000000 	call	0 <__alt_mem_sdram>
 200cfbc:	103fe926 	beq	r2,zero,200cf64 <__alt_mem_epcs_flash_controller+0xffffbf64>
 200cfc0:	10004015 	stw	zero,256(r2)
 200cfc4:	10004115 	stw	zero,260(r2)
 200cfc8:	80802215 	stw	r2,136(r16)
 200cfcc:	81400117 	ldw	r5,4(r16)
 200cfd0:	01000044 	movi	r4,1
 200cfd4:	2947883a 	add	r3,r5,r5
 200cfd8:	18c7883a 	add	r3,r3,r3
 200cfdc:	10c7883a 	add	r3,r2,r3
 200cfe0:	1cc00015 	stw	r19,0(r3)
 200cfe4:	2148983a 	sll	r4,r4,r5
 200cfe8:	11404017 	ldw	r5,256(r2)
 200cfec:	290ab03a 	or	r5,r5,r4
 200cff0:	11404015 	stw	r5,256(r2)
 200cff4:	1c802015 	stw	r18,128(r3)
 200cff8:	00c00084 	movi	r3,2
 200cffc:	a8c0031e 	bne	r21,r3,200d00c <__register_exitproc+0x110>
 200d000:	10c04117 	ldw	r3,260(r2)
 200d004:	1908b03a 	or	r4,r3,r4
 200d008:	11004115 	stw	r4,260(r2)
 200d00c:	80800117 	ldw	r2,4(r16)
 200d010:	10c00044 	addi	r3,r2,1
 200d014:	10800084 	addi	r2,r2,2
 200d018:	1085883a 	add	r2,r2,r2
 200d01c:	1085883a 	add	r2,r2,r2
 200d020:	80c00115 	stw	r3,4(r16)
 200d024:	80a1883a 	add	r16,r16,r2
 200d028:	84400015 	stw	r17,0(r16)
 200d02c:	0005883a 	mov	r2,zero
 200d030:	dfc00617 	ldw	ra,24(sp)
 200d034:	dd400517 	ldw	r21,20(sp)
 200d038:	dd000417 	ldw	r20,16(sp)
 200d03c:	dcc00317 	ldw	r19,12(sp)
 200d040:	dc800217 	ldw	r18,8(sp)
 200d044:	dc400117 	ldw	r17,4(sp)
 200d048:	dc000017 	ldw	r16,0(sp)
 200d04c:	dec00704 	addi	sp,sp,28
 200d050:	f800283a 	ret

0200d054 <__call_exitprocs>:
 200d054:	defff504 	addi	sp,sp,-44
 200d058:	dd000515 	stw	r20,20(sp)
 200d05c:	05000034 	movhi	r20,0
 200d060:	dc800315 	stw	r18,12(sp)
 200d064:	dfc00a15 	stw	ra,40(sp)
 200d068:	df000915 	stw	fp,36(sp)
 200d06c:	ddc00815 	stw	r23,32(sp)
 200d070:	dd800715 	stw	r22,28(sp)
 200d074:	dd400615 	stw	r21,24(sp)
 200d078:	dcc00415 	stw	r19,16(sp)
 200d07c:	dc400215 	stw	r17,8(sp)
 200d080:	dc000115 	stw	r16,4(sp)
 200d084:	d9000015 	stw	r4,0(sp)
 200d088:	2825883a 	mov	r18,r5
 200d08c:	a5053c04 	addi	r20,r20,5360
 200d090:	a4400017 	ldw	r17,0(r20)
 200d094:	8cc00c17 	ldw	r19,48(r17)
 200d098:	8c400c04 	addi	r17,r17,48
 200d09c:	98004526 	beq	r19,zero,200d1b4 <__call_exitprocs+0x160>
 200d0a0:	9c000117 	ldw	r16,4(r19)
 200d0a4:	00900034 	movhi	r2,16384
 200d0a8:	10bfffc4 	addi	r2,r2,-1
 200d0ac:	9d402217 	ldw	r21,136(r19)
 200d0b0:	85bfffc4 	addi	r22,r16,-1
 200d0b4:	80a1883a 	add	r16,r16,r2
 200d0b8:	8421883a 	add	r16,r16,r16
 200d0bc:	8421883a 	add	r16,r16,r16
 200d0c0:	ac2f883a 	add	r23,r21,r16
 200d0c4:	84000204 	addi	r16,r16,8
 200d0c8:	9c21883a 	add	r16,r19,r16
 200d0cc:	b0002716 	blt	r22,zero,200d16c <__call_exitprocs+0x118>
 200d0d0:	90000726 	beq	r18,zero,200d0f0 <__call_exitprocs+0x9c>
 200d0d4:	a800041e 	bne	r21,zero,200d0e8 <__call_exitprocs+0x94>
 200d0d8:	b5bfffc4 	addi	r22,r22,-1
 200d0dc:	bdffff04 	addi	r23,r23,-4
 200d0e0:	843fff04 	addi	r16,r16,-4
 200d0e4:	003ff906 	br	200d0cc <__alt_mem_epcs_flash_controller+0xffffc0cc>
 200d0e8:	b9002017 	ldw	r4,128(r23)
 200d0ec:	913ffa1e 	bne	r18,r4,200d0d8 <__alt_mem_epcs_flash_controller+0xffffc0d8>
 200d0f0:	99000117 	ldw	r4,4(r19)
 200d0f4:	82000017 	ldw	r8,0(r16)
 200d0f8:	213fffc4 	addi	r4,r4,-1
 200d0fc:	b100021e 	bne	r22,r4,200d108 <__call_exitprocs+0xb4>
 200d100:	9d800115 	stw	r22,4(r19)
 200d104:	00000106 	br	200d10c <__call_exitprocs+0xb8>
 200d108:	80000015 	stw	zero,0(r16)
 200d10c:	403ff226 	beq	r8,zero,200d0d8 <__alt_mem_epcs_flash_controller+0xffffc0d8>
 200d110:	9f000117 	ldw	fp,4(r19)
 200d114:	a8000526 	beq	r21,zero,200d12c <__call_exitprocs+0xd8>
 200d118:	00800044 	movi	r2,1
 200d11c:	1592983a 	sll	r9,r2,r22
 200d120:	a9404017 	ldw	r5,256(r21)
 200d124:	494a703a 	and	r5,r9,r5
 200d128:	2800021e 	bne	r5,zero,200d134 <__call_exitprocs+0xe0>
 200d12c:	403ee83a 	callr	r8
 200d130:	00000906 	br	200d158 <__call_exitprocs+0x104>
 200d134:	a9004117 	ldw	r4,260(r21)
 200d138:	4908703a 	and	r4,r9,r4
 200d13c:	2000041e 	bne	r4,zero,200d150 <__call_exitprocs+0xfc>
 200d140:	b9400017 	ldw	r5,0(r23)
 200d144:	d9000017 	ldw	r4,0(sp)
 200d148:	403ee83a 	callr	r8
 200d14c:	00000206 	br	200d158 <__call_exitprocs+0x104>
 200d150:	b9000017 	ldw	r4,0(r23)
 200d154:	403ee83a 	callr	r8
 200d158:	99000117 	ldw	r4,4(r19)
 200d15c:	e13fcc1e 	bne	fp,r4,200d090 <__alt_mem_epcs_flash_controller+0xffffc090>
 200d160:	89000017 	ldw	r4,0(r17)
 200d164:	993fdc26 	beq	r19,r4,200d0d8 <__alt_mem_epcs_flash_controller+0xffffc0d8>
 200d168:	003fc906 	br	200d090 <__alt_mem_epcs_flash_controller+0xffffc090>
 200d16c:	00800034 	movhi	r2,0
 200d170:	10800004 	addi	r2,r2,0
 200d174:	10000f26 	beq	r2,zero,200d1b4 <__call_exitprocs+0x160>
 200d178:	99400117 	ldw	r5,4(r19)
 200d17c:	99000017 	ldw	r4,0(r19)
 200d180:	2800091e 	bne	r5,zero,200d1a8 <__call_exitprocs+0x154>
 200d184:	20000826 	beq	r4,zero,200d1a8 <__call_exitprocs+0x154>
 200d188:	89000015 	stw	r4,0(r17)
 200d18c:	a8000226 	beq	r21,zero,200d198 <__call_exitprocs+0x144>
 200d190:	a809883a 	mov	r4,r21
 200d194:	00000000 	call	0 <__alt_mem_sdram>
 200d198:	9809883a 	mov	r4,r19
 200d19c:	00000000 	call	0 <__alt_mem_sdram>
 200d1a0:	8cc00017 	ldw	r19,0(r17)
 200d1a4:	003fbd06 	br	200d09c <__alt_mem_epcs_flash_controller+0xffffc09c>
 200d1a8:	9823883a 	mov	r17,r19
 200d1ac:	2027883a 	mov	r19,r4
 200d1b0:	003fba06 	br	200d09c <__alt_mem_epcs_flash_controller+0xffffc09c>
 200d1b4:	dfc00a17 	ldw	ra,40(sp)
 200d1b8:	df000917 	ldw	fp,36(sp)
 200d1bc:	ddc00817 	ldw	r23,32(sp)
 200d1c0:	dd800717 	ldw	r22,28(sp)
 200d1c4:	dd400617 	ldw	r21,24(sp)
 200d1c8:	dd000517 	ldw	r20,20(sp)
 200d1cc:	dcc00417 	ldw	r19,16(sp)
 200d1d0:	dc800317 	ldw	r18,12(sp)
 200d1d4:	dc400217 	ldw	r17,8(sp)
 200d1d8:	dc000117 	ldw	r16,4(sp)
 200d1dc:	dec00b04 	addi	sp,sp,44
 200d1e0:	f800283a 	ret

0200d1e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 200d1e4:	defffd04 	addi	sp,sp,-12
 200d1e8:	df000215 	stw	fp,8(sp)
 200d1ec:	df000204 	addi	fp,sp,8
 200d1f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 200d1f4:	0001883a 	nop
 200d1f8:	e0bfff17 	ldw	r2,-4(fp)
 200d1fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 200d200:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 200d204:	10000226 	beq	r2,zero,200d210 <_exit+0x2c>
    ALT_SIM_FAIL();
 200d208:	002af070 	cmpltui	zero,zero,43969
 200d20c:	00000106 	br	200d214 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 200d210:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 200d214:	003fff06 	br	200d214 <__alt_mem_epcs_flash_controller+0xffffc214>
