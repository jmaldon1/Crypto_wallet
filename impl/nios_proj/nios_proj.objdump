
nios_proj.elf:     file format elf32-littlenios2
nios_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00056db0 memsz 0x00056db0 flags r-x
    LOAD off    0x00057dd0 vaddr 0x00056dd0 paddr 0x00058258 align 2**12
         filesz 0x00001488 memsz 0x00001488 flags rw-
    LOAD off    0x000596e0 vaddr 0x000596e0 paddr 0x000596e0 align 2**12
         filesz 0x00000000 memsz 0x00001ce8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0004ba84  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000b108  0004bcc8  0004bcc8  0004ccc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001488  00056dd0  00058258  00057dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001ce8  000596e0  000596e0  000596e0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0005b3c8  0005b3c8  00059258  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  02000000  02000000  00059258  2**0
                  CONTENTS
  8 .epcs_flash_controller 00000000  02009000  02009000  00059258  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00059258  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000010d0  00000000  00000000  00059280  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00029181  00000000  00000000  0005a350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009586  00000000  00000000  000834d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012815  00000000  00000000  0008ca57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006304  00000000  00000000  0009f26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007331  00000000  00000000  000a5570  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000b59d  00000000  00000000  000ac8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000030  00000000  00000000  000b7e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001308  00000000  00000000  000b7e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000c09c1  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  000c09c4  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000c09c7  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000c09c8  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000c09c9  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000c09cd  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000c09d1  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  000c09d5  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  000c09de  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  000c09e7  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000d  00000000  00000000  000c09f0  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003d  00000000  00000000  000c09fd  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00051a51  00000000  00000000  000c0a3a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0004bcc8 l    d  .rodata	00000000 .rodata
00056dd0 l    d  .rwdata	00000000 .rwdata
000596e0 l    d  .bss	00000000 .bss
0005b3c8 l    d  .sdram	00000000 .sdram
02000000 l    d  .onchip_memory2	00000000 .onchip_memory2
02009000 l    d  .epcs_flash_controller	00000000 .epcs_flash_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Class2018/Documents/Projects/Crypto_wallet/impl/nios_proj_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 bip39.c
0004fc8c l     O .rodata	00002004 wordlist
000596e0 l     O .bss	00000004 bip39_cache_index
00059730 l     O .bss	00000604 bip39_cache
00059d34 l     O .bss	000000f0 mnemo.3380
00059e24 l     O .bss	00000144 pctx.3407
00000000 l    df *ABS*	00000000 hmac.c
00059f68 l     O .bss	00000040 i_key_pad.2093
00059fa8 l     O .bss	000000a8 hctx.2114
0005a050 l     O .bss	00000040 key_pad.2121
0005a090 l     O .bss	00000068 context.2122
0005a0f8 l     O .bss	00000080 i_key_pad.2138
0005a178 l     O .bss	00000080 key_pad.2166
0005a1f8 l     O .bss	000000d0 context.2167
00000000 l    df *ABS*	00000000 memzero.c
00000000 l    df *ABS*	00000000 pbkdf2.c
00000000 l    df *ABS*	00000000 rand.c
000596e4 l     O .bss	00000004 initialized.3065
00000000 l    df *ABS*	00000000 sha2.c
00051cb0 l     O .rodata	00000100 K256
00051dd0 l     O .rodata	00000280 K512
000581c8 l     O .rwdata	00000004 sha2_hex_digits
00005a8c l     F .text	0000050c sha512_Last
00000000 l    df *ABS*	00000000 wallet_main.c
000581cc l     O .rwdata	00000004 MAX_SCRIPT_SIZE
00000000 l    df *ABS*	00000000 wallet_system.c
00000000 l    df *ABS*	00000000 chainparams.c
00000000 l    df *ABS*	00000000 commontools.c
000581d0 l     O .rwdata	00000004 MAX_SCRIPT_SIZE
00054278 l     O .rodata	00000016 __func__.4354
00054290 l     O .rodata	00000017 __func__.4363
000542a8 l     O .rodata	0000000e __func__.4378
000542b8 l     O .rodata	0000000e __func__.4390
00000000 l    df *ABS*	00000000 ecc_key.c
00006d14 l     F .text	00000054 btc_hash
00006d68 l     F .text	00000044 btc_hash_sngl_sha256
000581d4 l     O .rwdata	00000004 MAX_SCRIPT_SIZE
00054398 l     O .rodata	00000010 __func__.3816
000543a8 l     O .rodata	0000001a __func__.3825
000543c4 l     O .rodata	00000017 __func__.3835
00000000 l    df *ABS*	00000000 ecc_libsecp256k1.c
000596e8 l     O .bss	00000004 secp256k1_ctx
00054470 l     O .rodata	0000000e __func__.3322
00054480 l     O .rodata	00000013 __func__.3336
00054494 l     O .rodata	0000001e __func__.3341
000544b4 l     O .rodata	0000001d __func__.3348
000544d4 l     O .rodata	0000001a __func__.3352
000544f0 l     O .rodata	00000016 __func__.3358
00054508 l     O .rodata	0000000d __func__.3365
00054518 l     O .rodata	00000015 __func__.3373
00054530 l     O .rodata	00000021 __func__.3382
00054554 l     O .rodata	00000017 __func__.3391
0005456c l     O .rodata	00000013 __func__.3401
00054580 l     O .rodata	00000022 __func__.3409
000545a4 l     O .rodata	00000017 __func__.3417
00000000 l    df *ABS*	00000000 memory.c
000545bc l     O .rodata	00000010 default_mem_mapper
00056dd0 l     O .rwdata	00000010 current_mem_mapper
00000000 l    df *ABS*	00000000 random.c
000581d8 l     O .rwdata	00000008 default_rnd_mapper
000581e0 l     O .rwdata	00000008 current_rnd_mapper
00000000 l    df *ABS*	00000000 ripemd160.c
00008728 l     F .text	00003c40 compress
00000000 l    df *ABS*	00000000 script.c
000581e8 l     O .rwdata	00000004 MAX_SCRIPT_SIZE
0000c7a4 l     F .text	00000044 btc_hash_sngl_sha256
000546f8 l     O .rodata	00000029 __func__.3795
0000ce2c l     F .text	00000028 btc_script_is_pushdata
0000ce54 l     F .text	00000034 btc_script_is_op
0000ce88 l     F .text	000000a4 btc_script_is_op_pubkey
0000cf2c l     F .text	00000064 btc_script_is_op_pubkeyhash
0000d2ac l     F .text	00000058 btc_script_is_op_smallint
00054724 l     O .rodata	00000010 __func__.3882
0000dbec l     F .text	00000078 btc_decode_op_n
00054734 l     O .rodata	00000010 __func__.3930
00054744 l     O .rodata	0000001d __func__.3937
00000000 l    df *ABS*	00000000 bench_internal.c
0000de20 l     F .text	0000004c secp256k1_callback_call
0000de6c l     F .text	00000054 checked_malloc
0000dec0 l     F .text	000000ac secp256k1_sha256_initialize
0000df6c l     F .text	00004f20 secp256k1_sha256_transform
00012e8c l     F .text	0000010c secp256k1_sha256_write
00012f98 l     F .text	000001c8 secp256k1_sha256_finalize
000565ec l     O .rodata	00000040 pad.3486
00013160 l     F .text	000001bc secp256k1_hmac_sha256_initialize
0001331c l     F .text	00000048 secp256k1_hmac_sha256_write
00013364 l     F .text	0000007c secp256k1_hmac_sha256_finalize
000133e0 l     F .text	000001a0 secp256k1_rfc6979_hmac_sha256_initialize
00058204 l     O .rwdata	00000001 zero.3523
00058205 l     O .rwdata	00000001 one.3524
00013580 l     F .text	0000019c secp256k1_rfc6979_hmac_sha256_generate
00058206 l     O .rwdata	00000001 zero.3530
0001371c l     F .text	00000060 secp256k1_rfc6979_hmac_sha256_finalize
0001377c l     F .text	000003c0 secp256k1_fe_verify
00013b3c l     F .text	00000600 secp256k1_fe_normalize
0001413c l     F .text	00000330 secp256k1_fe_normalize_weak
0001446c l     F .text	000005f8 secp256k1_fe_normalize_var
00014a64 l     F .text	00000400 secp256k1_fe_normalizes_to_zero
00014e64 l     F .text	00000428 secp256k1_fe_normalizes_to_zero_var
0001528c l     F .text	000000e4 secp256k1_fe_set_int
00015370 l     F .text	00000120 secp256k1_fe_is_zero
00015490 l     F .text	00000084 secp256k1_fe_is_odd
00015514 l     F .text	00000070 secp256k1_fe_clear
00015584 l     F .text	00000168 secp256k1_fe_cmp_var
000156ec l     F .text	00000284 secp256k1_fe_set_b32
00015970 l     F .text	00000178 secp256k1_fe_get_b32
00015ae8 l     F .text	00000248 secp256k1_fe_negate
00015d30 l     F .text	000001c8 secp256k1_fe_mul_int
00015ef8 l     F .text	0000017c secp256k1_fe_add
00016074 l     F .text	00005968 secp256k1_fe_mul_inner
0001b9dc l     F .text	000044d8 secp256k1_fe_sqr_inner
0001feb4 l     F .text	00000154 secp256k1_fe_mul
00020008 l     F .text	000000b0 secp256k1_fe_sqr
000200b8 l     F .text	0000023c secp256k1_fe_cmov
000202f4 l     F .text	000001a4 secp256k1_fe_storage_cmov
00020498 l     F .text	000001a8 secp256k1_fe_to_storage
00020640 l     F .text	000001e0 secp256k1_fe_from_storage
00020820 l     F .text	00000050 secp256k1_fe_equal
00020870 l     F .text	00000050 secp256k1_fe_equal_var
000208c0 l     F .text	000007f4 secp256k1_fe_sqrt
000210b4 l     F .text	00000848 secp256k1_fe_inv
000218fc l     F .text	0000003c secp256k1_fe_inv_var
00021938 l     F .text	000002dc secp256k1_fe_inv_all_var
00021c14 l     F .text	00000034 secp256k1_fe_is_quad_var
00055770 l     O .rodata	00000064 secp256k1_ge_const_g
00021c48 l     F .text	000000a0 secp256k1_ge_set_gej_zinv
00021ce8 l     F .text	00000104 secp256k1_ge_set_xy
00021dec l     F .text	00000028 secp256k1_ge_is_infinity
00021e14 l     F .text	00000080 secp256k1_ge_neg
00021e94 l     F .text	000001ac secp256k1_ge_set_gej
00022040 l     F .text	000001bc secp256k1_ge_set_gej_var
000221fc l     F .text	00000260 secp256k1_ge_set_all_gej_var
0002245c l     F .text	00000150 secp256k1_ge_set_table_gej_var
000225ac l     F .text	00000320 secp256k1_ge_globalz_set_table_gej
000228cc l     F .text	00000070 secp256k1_gej_set_infinity
0002293c l     F .text	00000060 secp256k1_gej_clear
0002299c l     F .text	00000050 secp256k1_ge_clear
000229ec l     F .text	000000f8 secp256k1_ge_set_xquad
00022ae4 l     F .text	00000098 secp256k1_ge_set_xo_var
00022b7c l     F .text	00000124 secp256k1_gej_set_ge
00022ca0 l     F .text	00000118 secp256k1_gej_eq_x_var
00022db8 l     F .text	000001a8 secp256k1_gej_neg
00022f60 l     F .text	00000028 secp256k1_gej_is_infinity
00022f88 l     F .text	00000108 secp256k1_gej_is_valid_var
00023090 l     F .text	000000c0 secp256k1_ge_is_valid_var
00023150 l     F .text	000002e8 secp256k1_gej_double_var
00023438 l     F .text	0000008c secp256k1_gej_double_nonzero
000234c4 l     F .text	000004e8 secp256k1_gej_add_var
000239ac l     F .text	00000520 secp256k1_gej_add_ge_var
00023ecc l     F .text	00000548 secp256k1_gej_add_zinv_var
00024414 l     F .text	000006f8 secp256k1_gej_add_ge
0005662c l     O .rodata	00000030 fe_1.4308
00024b0c l     F .text	000000fc secp256k1_gej_rescale
00024c08 l     F .text	0000017c secp256k1_ge_to_storage
00024d84 l     F .text	00000068 secp256k1_ge_from_storage
00024dec l     F .text	0000006c secp256k1_ge_storage_cmov
00024e58 l     F .text	00000064 secp256k1_gej_has_quad_y_var
00024ebc l     F .text	00000064 secp256k1_scalar_clear
00024f20 l     F .text	0000006c secp256k1_scalar_set_int
00024f8c l     F .text	000000c8 secp256k1_scalar_get_bits
00025054 l     F .text	000001b4 secp256k1_scalar_get_bits_var
00025208 l     F .text	00000218 secp256k1_scalar_check_overflow
00025420 l     F .text	00000444 secp256k1_scalar_reduce
00025864 l     F .text	000004ec secp256k1_scalar_add
00025d50 l     F .text	00000600 secp256k1_scalar_cadd_bit
00026350 l     F .text	0000035c secp256k1_scalar_set_b32
000266ac l     F .text	00000308 secp256k1_scalar_get_b32
000269b4 l     F .text	00000084 secp256k1_scalar_is_zero
00026a38 l     F .text	00000494 secp256k1_scalar_negate
00026ecc l     F .text	00000088 secp256k1_scalar_is_one
00026f54 l     F .text	00000240 secp256k1_scalar_is_high
00027194 l     F .text	000005c4 secp256k1_scalar_cond_negate
00027758 l     F .text	00004bf0 secp256k1_scalar_reduce_512
0002c348 l     F .text	00004bec secp256k1_scalar_mul_512
00030f34 l     F .text	000052e8 secp256k1_scalar_sqr_512
0003621c l     F .text	00000050 secp256k1_scalar_mul
0003626c l     F .text	0000025c secp256k1_scalar_shr_int
000364c8 l     F .text	00000048 secp256k1_scalar_sqr
00036510 l     F .text	00000b44 secp256k1_scalar_inverse
00037054 l     F .text	0000003c secp256k1_scalar_inverse_var
00037090 l     F .text	00000408 secp256k1_ecmult_odd_multiples_table
00037498 l     F .text	00000068 secp256k1_ecmult_odd_multiples_table_globalz_windowa
00037500 l     F .text	0000013c secp256k1_ecmult_odd_multiples_table_storage_var
0003763c l     F .text	0000002c secp256k1_ecmult_context_init
00037668 l     F .text	00000084 secp256k1_ecmult_context_build
000376ec l     F .text	0000008c secp256k1_ecmult_context_clone
00037778 l     F .text	00000030 secp256k1_ecmult_context_is_built
000377a8 l     F .text	00000044 secp256k1_ecmult_context_clear
000377ec l     F .text	000003e0 secp256k1_ecmult_wnaf
00037bcc l     F .text	0000046c secp256k1_ecmult
00038038 l     F .text	00000288 secp256k1_wnaf_const
000382c0 l     F .text	0000076c secp256k1_ecmult_const
00038a2c l     F .text	000000c8 gettimedouble
00038ed0 l     F .text	0000002c secp256k1_ecmult_gen_context_init
00038efc l     F .text	00000864 secp256k1_ecmult_gen_context_build
0005665c l     O .rodata	00000021 nums_b32.6041
00039a5c l     F .text	000002d8 secp256k1_ecmult_gen_blind
00039760 l     F .text	00000030 secp256k1_ecmult_gen_context_is_built
00039790 l     F .text	000000f0 secp256k1_ecmult_gen_context_clone
00039880 l     F .text	00000064 secp256k1_ecmult_gen_context_clear
000398e4 l     F .text	00000178 secp256k1_ecmult_gen
00056188 l     O .rodata	00000030 secp256k1_ecdsa_const_order_as_fe
000561b8 l     O .rodata	00000030 secp256k1_ecdsa_const_p_minus_order
00039d34 l     F .text	00000180 secp256k1_der_read_len
00039eb4 l     F .text	0000025c secp256k1_der_parse_integer
0003a110 l     F .text	00000120 secp256k1_ecdsa_sig_parse
0003a230 l     F .text	0000026c secp256k1_ecdsa_sig_serialize
0003a49c l     F .text	00000178 secp256k1_ecdsa_sig_verify
0003a614 l     F .text	000001d0 secp256k1_ecdsa_sig_sign
0003a7e4 l     F .text	000001b0 secp256k1_eckey_pubkey_parse
0003a994 l     F .text	000000f4 secp256k1_eckey_pubkey_serialize
0003aa88 l     F .text	00000054 secp256k1_eckey_privkey_tweak_add
0003aadc l     F .text	00000090 secp256k1_eckey_pubkey_tweak_add
0003ab6c l     F .text	00000054 secp256k1_eckey_privkey_tweak_mul
0003abc0 l     F .text	00000098 secp256k1_eckey_pubkey_tweak_mul
0003ac58 l     F .text	00000038 default_illegal_callback_fn
000581ec l     O .rwdata	00000008 default_illegal_callback
0003ac90 l     F .text	00000038 default_error_callback_fn
000581f4 l     O .rwdata	00000008 default_error_callback
0003af9c l     F .text	0000008c secp256k1_pubkey_load
0003b028 l     F .text	00000050 secp256k1_pubkey_save
0003b3a0 l     F .text	00000064 secp256k1_ecdsa_signature_load
0003b404 l     F .text	00000060 secp256k1_ecdsa_signature_save
0003bc38 l     F .text	00000134 nonce_function_rfc6979
0003cbac l     F .text	00000078 secp256k1_ecdsa_recoverable_signature_load
0003cc24 l     F .text	00000074 secp256k1_ecdsa_recoverable_signature_save
0003cff4 l     F .text	000001e0 secp256k1_ecdsa_sig_recover
0005667d l     O .rodata	00000020 init_x.6633
0005669d l     O .rodata	00000020 init_y.6634
00000000 l    df *ABS*	00000000 segwit_addr.c
00058208 l     O .rwdata	00000004 charset
000566e1 l     O .rodata	00000080 charset_rev
0003edc8 l     F .text	00000178 convert_bits
00000000 l    df *ABS*	00000000 serialize.c
00000000 l    df *ABS*	00000000 utils.c
0005a2c8 l     O .bss	00000800 buffer_hex_to_uint8
0005aac8 l     O .bss	00000800 buffer_uint8_to_hex
00056de0 l     O .rwdata	00000011 digits.3639
00056df4 l     O .rwdata	00000011 digits.3648
00000000 l    df *ABS*	00000000 vector.c
00040abc l     F .text	000000fc vector_free_data
00040c20 l     F .text	000000bc vector_grow
00000000 l    df *ABS*	00000000 base58.c
000568bc l     O .rodata	00000080 b58digits_map
0005693c l     O .rodata	0000003b b58digits_ordered
00000000 l    df *ABS*	00000000 bip32.c
00041f20 l     F .text	00000044 btc_hash_sngl_sha256
00041f64 l     F .text	00000074 write_be
00041fd8 l     F .text	00000074 read_be
000427a8 l     F .text	000000fc btc_hdnode_serialize
000569b0 l     O .rodata	00000014 __func__.3755
0005820c l     O .rwdata	00000002 delim.3751
00058210 l     O .rwdata	00000005 prime.3752
00056e08 l     O .rwdata	0000000b digits.3753
00000000 l    df *ABS*	00000000 cstr.c
000430c4 l     F .text	000000ec cstr_alloc_min_sz
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 ctype_.c
00056c04 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 getenv.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 impure.c
00056e14 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
000596f4 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strnlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00047158 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 environ.c
000596fc l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_kill.c
00048740 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000488ac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00058228 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00048c68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00048d9c l     F .text	00000034 alt_dev_reg
00056ef4 l     O .rwdata	000000cc epcs_flash_controller
00056fc0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00048e60 l     F .text	00000034 alt_flash_device_register
00048ee8 l     F .text	000003f8 alt_epcs_flash_query
000492e0 l     F .text	000000ec alt_epcs_flash_memcmp
000496b8 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00049b80 l     F .text	0000020c altera_avalon_jtag_uart_irq
00049d8c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
0004a420 l     F .text	00000038 epcs_test_wip
0004a458 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0004ab2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0004ac80 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004acac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004b1dc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004b31c l     F .text	0000003c alt_get_errno
0004b358 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 __atexit.c
0005972c g     O .bss	00000004 alt_instruction_exception_handler
000479e4 g     F .text	0000001c _malloc_usable_size_r
0000d074 g     F .text	00000140 btc_script_is_pubkeyhash
0000816c g     F .text	00000090 btc_ecc_der_to_compact
0003d6d8 g     F .text	000001e4 bench_setup
0004962c g     F .text	0000008c alt_epcs_flash_get_info
0003db0c g     F .text	00000088 bench_scalar_inverse_var
00048998 g     F .text	0000007c alt_main
000066c4 g     F .text	00000080 gen_privatekey
00046c10 g     F .text	0000002c strcpy
000531c4 g     O .rodata	00000858 btc_chainparams_regtest
000022b8 g     F .text	000007ac sha1_Transform
00046750 g     F .text	00000080 _puts_r
0004061c g     F .text	0000003c utils_hex_digit
0005b2c8 g     O .bss	00000100 alt_irq
000076e4 g     F .text	000000a4 btc_pubkey_getaddr_p2sh_p2wpkh
0003aeec g     F .text	00000058 secp256k1_context_set_illegal_callback
00058258 g       *ABS*	00000000 __flash_rwdata_start
0004360c g     F .text	00000044 cstr_append_c
0004295c g     F .text	00000058 btc_hdnode_get_hash160
000478ec g     F .text	00000054 _gettimeofday_r
00008504 g     F .text	00000034 btc_free_internal
0005b3c8 g       *ABS*	00000000 __alt_heap_start
00046e8c g     F .text	00000008 strtok_r
000085c8 g     F .text	00000038 btc_rnd_set_mapper
00006804 g     F .text	000003e8 hd_print_node
00046b50 g     F .text	00000054 _kill_r
0000d4e8 g     F .text	000001dc btc_script_classify
0003c7ac g     F .text	000001b0 secp256k1_ec_pubkey_tweak_mul
0003b194 g     F .text	0000020c secp256k1_ec_pubkey_serialize
00046704 g     F .text	0000004c printf
00046928 g     F .text	0000007c _signal_r
0000195c g     F .text	00000378 pbkdf2_hmac_sha512_Init
0003b954 g     F .text	00000114 secp256k1_ecdsa_signature_normalize
0003c95c g     F .text	000000c4 secp256k1_context_randomize
0003da0c g     F .text	00000078 bench_scalar_mul
00040f90 g     F .text	00000060 vector_remove
0000792c g     F .text	00000044 btc_ecc_stop
0003f700 g     F .text	00000058 deser_u32
000074d0 g     F .text	0000004c btc_key_sign_hash
00040860 g     F .text	00000064 safe_malloc
00043334 g     F .text	00000044 cstr_new_cstr
00007d8c g     F .text	000000bc btc_ecc_sign_compact
000463c0 g     F .text	00000060 memmove
00052050 g     O .rodata	00000040 sha512_initial_hash_value
00046dfc g     F .text	00000090 __strtok_r
0003fb2c g     F .text	00000050 utils_clear_buffers
00040bb8 g     F .text	00000068 vector_free
000062c8 g     F .text	00000058 sha512_Raw
00044cb0 g     F .text	000000dc .hidden __gtdf2
0004b5d4 g     F .text	00000024 altera_nios2_gen2_irq_init
0003ff54 g     F .text	000003dc utils_hex_to_uint8
00008344 g     F .text	00000044 btc_realloc
0004a494 g     F .text	000000fc epcs_sector_erase
0003dd58 g     F .text	0000008c bench_field_inverse
00041d64 g     F .text	000000fc btc_base58_decode_check
000040c8 g     F .text	00000100 sha256_End
00000000 g     F .entry	0000001c __reset
0000d77c g     F .text	000000f8 btc_script_append_pushdata
0003bd6c g     F .text	000002e0 secp256k1_ecdsa_sign
00046200 g     F .text	0000002c getenv
00007a7c g     F .text	00000068 btc_ecc_private_key_tweak_add
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007568 g     F .text	00000054 btc_key_sign_hash_compact_recoverable
000083c8 g     F .text	00000064 btc_malloc_internal
00007680 g     F .text	00000064 btc_pubkey_verify_sig
00059700 g     O .bss	00000004 errno
0003ce1c g     F .text	0000010c secp256k1_ecdsa_recoverable_signature_serialize_compact
00006ef4 g     F .text	000000d4 btc_privkey_verify_pubkey
00059718 g     O .bss	00000004 alt_argv
000601c8 g       *ABS*	00000000 _gp
0000daf4 g     F .text	00000070 btc_script_get_scripthash
0004852c g     F .text	00000020 getpid
000581fc g     O .rwdata	00000004 secp256k1_nonce_function_rfc6979
000008f8 g     F .text	00000138 hmac_sha256_Init
000431b0 g     F .text	00000090 cstr_alloc_minsize
0003c04c g     F .text	000000f0 secp256k1_ec_seckey_verify
00058048 g     O .rwdata	00000180 alt_fd_list
0004a6d8 g     F .text	0000006c epcs_write_status_register
0004b7f4 g     F .text	00000090 alt_find_dev
00046398 g     F .text	00000028 memcpy
000041c8 g     F .text	00000058 sha256_Raw
00045e94 g     F .text	000000dc .hidden __floatsidf
00042750 g     F .text	00000058 btc_hdnode_fill_public_key
0004b2a0 g     F .text	0000007c alt_io_redirect
00044d8c g     F .text	000000f4 .hidden __ltdf2
0003e1f4 g     F .text	000000c0 bench_wnaf_const
0004bcc8 g       *ABS*	00000000 __DTOR_END__
000467d0 g     F .text	00000014 puts
0004bac0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0003d934 g     F .text	0000006c bench_scalar_negate
0004204c g     F .text	00000038 btc_hdnode_new
00007e48 g     F .text	000000c0 btc_ecc_sign_compact_recoverable
000497c4 g     F .text	00000100 alt_epcs_flash_write_block
00042084 g     F .text	000000c4 btc_hdnode_copy
00049f84 g     F .text	0000021c altera_avalon_jtag_uart_read
00046340 g     F .text	00000014 malloc
000466c8 g     F .text	0000003c _printf_r
0003e348 g     F .text	000000a4 bench_hmac_sha256
00043a38 g     F .text	00000064 .hidden __udivsi3
0003f6a8 g     F .text	00000058 deser_s32
000469a4 g     F .text	000000b4 _raise_r
00045fec g     F .text	00000064 __assert_func
00059704 g     O .bss	00000008 alt_timezone
0004ba30 g     F .text	00000090 alt_icache_flush
00007214 g     F .text	00000058 btc_pubkey_init
000436f4 g     F .text	000000dc cstr_compare
00046ba4 g     F .text	00000004 _getpid_r
00007c24 g     F .text	000000b4 btc_ecc_verify_pubkey
0000826c g     F .text	00000058 btc_mem_set_mapper
00046eb0 g     F .text	00000258 _strtoull_r
00041ecc g     F .text	00000054 btc_p2wpkh_addr_from_hash160
00046a58 g     F .text	000000a8 __sigtramp_r
0003f9f0 g     F .text	00000104 deser_varstr
00046870 g     F .text	00000050 _sbrk_r
0003b708 g     F .text	00000138 secp256k1_ecdsa_signature_serialize_der
00008590 g     F .text	00000038 btc_rnd_set_mapper_default
0003ca20 g     F .text	0000018c secp256k1_ec_pubkey_combine
00001cd4 g     F .text	00000144 pbkdf2_hmac_sha512_Update
0003f1dc g     F .text	0000004c ser_u16
00007078 g     F .text	0000019c btc_privkey_decode_wif
00008630 g     F .text	0000004c btc_random_bytes
00058244 g     O .rwdata	00000004 alt_max_fd
000408c4 g     F .text	0000007c btc_cheap_random_bytes
00040f50 g     F .text	00000040 vector_remove_idx
0003f304 g     F .text	0000004c ser_s64
0003e160 g     F .text	00000094 bench_ecmult_wnaf
0000d1b4 g     F .text	000000f8 btc_script_is_scripthash
0003f034 g     F .text	00000164 segwit_addr_decode
0003d8bc g     F .text	00000078 bench_scalar_add
00043b1c g     F .text	000008ac .hidden __adddf3
0004974c g     F .text	00000078 alt_epcs_flash_erase_block
0003cf28 g     F .text	000000cc secp256k1_ecdsa_recoverable_signature_convert
00047f78 g     F .text	00000538 .hidden __umoddi3
0005821c g     O .rwdata	00000004 _global_impure_ptr
0004a9a4 g     F .text	0000005c epcs_exit_4_bytes_mode
000031a4 g     F .text	00000100 sha1_End
00047940 g     F .text	000000a4 _realloc_r
0005b3c8 g       *ABS*	00000000 __bss_end
0004b0ec g     F .text	000000f0 alt_iic_isr_register
00048b60 g     F .text	00000108 alt_tick
00047a00 g     F .text	00000578 .hidden __udivdi3
0003fb7c g     F .text	000003d8 utils_hex_to_bin
00043378 g     F .text	0000006c cstr_new
00045fd4 g     F .text	00000018 abort
000435c0 g     F .text	0000004c cstr_append_cstr
00000b94 g     F .text	000001ec hmac_sha256_prepare
00006dac g     F .text	00000040 btc_privkey_init
0004b0a0 g     F .text	0000004c alt_ic_irq_enabled
00048ac4 g     F .text	0000009c alt_alarm_stop
00001370 g     F .text	00000040 memzero
000421c4 g     F .text	000000fc btc_hdnode_from_seed
00059728 g     O .bss	00000004 alt_irq_active
00046d0c g     F .text	00000024 strnlen
00006e6c g     F .text	00000088 btc_privkey_gen
0003acc8 g     F .text	00000110 secp256k1_context_create
00004220 g     F .text	00000054 sha256_Data
000000fc g     F .exceptions	000000d4 alt_irq_handler
00058020 g     O .rwdata	00000028 alt_dev_null
00043510 g     F .text	000000b0 cstr_append_buf
00000b24 g     F .text	00000070 hmac_sha256
0004ac38 g     F .text	00000048 alt_dcache_flush_all
00043450 g     F .text	000000c0 cstr_resize
000072e0 g     F .text	00000048 btc_pubkey_is_valid
00046064 g     F .text	00000018 calloc
0003dc64 g     F .text	00000080 bench_field_mul
000064e0 g     F .text	0000010c addresses_from_pubkey
0000d450 g     F .text	00000098 btc_script_classify_ops
0003e478 g     F .text	0000005c bench_context_verify
00058258 g       *ABS*	00000000 __ram_rwdata_end
0003e2b4 g     F .text	00000094 bench_sha256
0005823c g     O .rwdata	00000008 alt_dev_list
00048ca4 g     F .text	000000f8 write
0000dc64 g     F .text	000001bc btc_script_is_witnessprogram
00058224 g     O .rwdata	00000004 environ
00040940 g     F .text	000000a8 btc_get_default_datadir
00056dd0 g       *ABS*	00000000 __ram_rodata_end
00046100 g     F .text	00000030 fprintf
0004877c g     F .text	00000130 kill
00044d8c g     F .text	000000f4 .hidden __ledf2
0003f198 g     F .text	00000044 ser_bytes
00043a9c g     F .text	00000058 .hidden __umodsi3
0004a860 g     F .text	00000068 epcs_read_electronic_signature
0005b3c8 g       *ABS*	00000000 end
000021c8  w    F .text	0000008c random_buffer
00008498 g     F .text	0000006c btc_realloc_internal
00003350 g     F .text	00000070 sha256_Init
00000eb8 g     F .text	0000004c hmac_sha512_Update
00002e6c g     F .text	00000338 sha1_Final
0000c7e8 g     F .text	00000348 btc_script_copy_without_op_codeseperator
00041be4 g     F .text	00000180 btc_base58_encode_check
00049ac0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0004bcc8 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00005f98 g     F .text	00000230 sha512_Final
00042498 g     F .text	000002b8 btc_hdnode_private_ckd
00045f70 g     F .text	00000064 .hidden __clzsi2
00007ae4 g     F .text	000000dc btc_ecc_public_key_tweak_add
0004a1a0 g     F .text	00000224 altera_avalon_jtag_uart_write
00002254 g     F .text	00000064 sha1_Init
000471c4 g     F .text	00000524 ___vfprintf_internal_r
0003c13c g     F .text	000001c8 secp256k1_ec_pubkey_create
0004648c g     F .text	000000e4 _free_r
00000d80 g     F .text	00000138 hmac_sha512_Init
0004775c g     F .text	00000190 __call_exitprocs
0003faf4 g     F .text	00000038 deser_s64
00001fd4 g     F .text	00000170 pbkdf2_hmac_sha512
0003f5ac g     F .text	000000a4 deser_bytes
0003f7b8 g     F .text	0000003c deser_u256
00038af4 g     F .text	000000d4 print_number
000432ac g     F .text	00000088 cstr_new_buf
00000244 g     F .text	0000004c _start
00059720 g     O .bss	00000004 _alt_tick_rate
000065ec g     F .text	000000d8 pubkey_from_privatekey
000467f8 g     F .text	00000060 rand
0003dce4 g     F .text	00000074 bench_field_sqr
0003f52c g     F .text	00000080 deser_skip
0003e4d4 g     F .text	0000005c bench_context_sign
0004b5f8 g     F .text	000001fc alt_avalon_spi_command
00059724 g     O .bss	00000004 _alt_nticks
00046b14 g     F .text	00000018 signal
00048e08 g     F .text	00000058 alt_sys_init
00041708 g     F .text	00000150 btc_b58check
0004bb70 g     F .text	00000158 __register_exitproc
00053fb0 g     O .rodata	00000150 btc_mainnet_checkpoint_array
00046c58 g     F .text	00000060 strncmp
00049e2c g     F .text	00000068 altera_avalon_jtag_uart_close
00043af4 g     F .text	00000028 .hidden __mulsi3
00056dd0 g       *ABS*	00000000 __ram_rwdata_start
0004bcc8 g       *ABS*	00000000 __ram_rodata_start
00046cb8 g     F .text	00000054 strncpy
0000c368 g     F .text	0000043c btc_ripemd160
00041858 g     F .text	0000038c btc_base58_encode
0003cc98 g     F .text	00000184 secp256k1_ecdsa_recoverable_signature_parse_compact
000073e8 g     F .text	00000070 btc_pubkey_get_hex
0000cb30 g     F .text	00000038 btc_script_op_new
00008538 g     F .text	00000058 btc_mem_zero
0004a3c4 g     F .text	0000005c epcs_read_status_register
00038bc8 g     F .text	00000308 run_benchmark
000033c0 g     F .text	000005c8 sha256_Transform
00046858 g     F .text	00000018 realloc
0003c630 g     F .text	0000017c secp256k1_ec_privkey_tweak_mul
0004995c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004b98c g     F .text	000000a4 alt_get_fd
00042cbc g     F .text	000003a0 btc_hd_generate_key
000013b0 g     F .text	00000224 pbkdf2_hmac_sha256_Init
00001704 g     F .text	000000e8 pbkdf2_hmac_sha256_Final
00046d30 g     F .text	000000cc strtok
0004a8c8 g     F .text	00000080 epcs_read_device_id
00040ff0 g     F .text	00000168 vector_resize
00046368 g     F .text	00000030 memcmp
00049a1c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000437d0 g     F .text	00000110 cstr_erase
0005b3c8 g       *ABS*	00000000 __alt_stack_base
00049a6c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0003d9a0 g     F .text	0000006c bench_scalar_sqr
000443c8 g     F .text	000008e8 .hidden __divdf3
00006e30 g     F .text	0000003c btc_privkey_cleanse
00044e80 g     F .text	00000718 .hidden __muldf3
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
0004b884 g     F .text	00000108 alt_find_file
00002144 g     F .text	00000084 random32
0004ace8 g     F .text	000000a4 alt_dev_llist_insert
000460cc g     F .text	00000034 _fprintf_r
00048a14 g     F .text	000000b0 sbrk
00046440 g     F .text	0000004c _calloc_r
0003ae94 g     F .text	00000058 secp256k1_context_destroy
00000a7c g     F .text	000000a8 hmac_sha256_Final
00007458 g     F .text	00000078 btc_pubkey_from_key
000032a4 g     F .text	00000058 sha1_Raw
0005824c g     O .rwdata	00000008 alt_flash_dev_list
00046e94 g     F .text	0000001c strtoull
00046130 g     F .text	000000b8 __sfvwrite_small_dev
0004854c g     F .text	000001f4 gettimeofday
0000da90 g     F .text	00000064 btc_script_build_p2sh
00043240 g     F .text	0000006c cstr_new_sz
0000d304 g     F .text	0000014c btc_script_is_multisig
000596e0 g       *ABS*	00000000 __bss_start
00046420 g     F .text	00000020 memset
0000d6c4 g     F .text	00000074 btc_encode_op_n
00006374 g     F .text	0000016c main
00003d90 g     F .text	00000338 sha256_Final
000086b4 g     F .text	00000074 btc_random_bytes_internal
00007850 g     F .text	000000dc btc_ecc_start
0005971c g     O .bss	00000004 alt_envp
0000842c g     F .text	0000006c btc_calloc_internal
000499bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000467e4 g     F .text	00000014 srand
0003e9a8 g     F .text	00000420 bech32_decode
00006dec g     F .text	00000044 btc_privkey_is_valid
0004305c g     F .text	00000068 btc_hdnode_has_privkey
00000290 g     F .text	000000a0 mnemonic_generate
02000000 g       *ABS*	00000000 __alt_heap_limit
0004622c g     F .text	000000f8 _findenv_r
00046570 g     F .text	00000158 _malloc_r
00047108 g     F .text	00000050 time
00058248 g     O .rwdata	00000004 alt_errno
00046b2c g     F .text	00000010 _init_signal
000484d4 g     F .text	00000024 __env_unlock
000461e8 g     F .text	00000018 _findenv
00052114 g     O .rodata	00000858 btc_chainparams_main
0003df74 g     F .text	00000084 bench_group_add_var
00043940 g     F .text	00000084 .hidden __divsi3
0004bcc8 g       *ABS*	00000000 __CTOR_END__
00040330 g     F .text	000000ec utils_bin_to_hex
000493cc g     F .text	00000260 alt_epcs_flash_write
0000d874 g     F .text	00000148 btc_script_build_multisig
00046bd8 g     F .text	00000038 strcmp
0003e530 g     F .text	000000b0 have_flag
0004bcc8 g       *ABS*	00000000 __flash_rodata_start
0003b078 g     F .text	0000011c secp256k1_ec_pubkey_parse
0004bcc8 g       *ABS*	00000000 __DTOR_LIST__
000429b4 g     F .text	00000068 btc_hdnode_get_p2pkh_address
00008600 g     F .text	00000030 btc_random_init
0000521c g     F .text	00000870 sha512_Update
0003da84 g     F .text	00000088 bench_scalar_inverse
0003de70 g     F .text	0000008c bench_field_sqrt
00042900 g     F .text	0000005c btc_hdnode_serialize_private
00048dd0 g     F .text	00000038 alt_irq_init
0004b570 g     F .text	00000064 alt_release_fd
000428a4 g     F .text	0000005c btc_hdnode_serialize_public
00004274 g     F .text	00000088 sha512_Init
000569c4 g     O .rodata	00000100 .hidden __clz_tab
0003f4a8 g     F .text	00000084 ser_varstr
00040cdc g     F .text	0000008c vector_find
00000330 g     F .text	00000260 mnemonic_from_data
0004bb5c g     F .text	00000014 atexit
00047704 g     F .text	00000058 _write_r
0000cbc8 g     F .text	00000044 btc_script_op_free_cb
0003e6e0 g     F .text	000002c8 bech32_encode
00056764 g     O .rodata	00000100 p_util_hexdigit
0003dff8 g     F .text	00000080 bench_group_add_affine
0003dbfc g     F .text	00000068 bench_field_normalize_weak
0003f2b0 g     F .text	00000054 ser_u64
00006744 g     F .text	000000c0 hd_gen_master
0003defc g     F .text	00000078 bench_group_double_var
00058220 g     O .rwdata	00000004 _impure_ptr
00059714 g     O .bss	00000004 alt_argc
0003f7f4 g     F .text	00000118 deser_varlen
00007cd8 g     F .text	000000b4 btc_ecc_sign
0004adec g     F .text	00000060 _do_dtors
0003db94 g     F .text	00000068 bench_field_normalize
0000726c g     F .text	00000074 btc_pubkey_get_length
0003f650 g     F .text	00000058 deser_u16
0000cc0c g     F .text	00000220 btc_script_get_ops
0003f270 g     F .text	00000040 ser_s32
00000020 g       .exceptions	00000000 alt_irq_entry
00007bc0 g     F .text	00000064 btc_ecc_verify_privatekey
00051c9c g     O .rodata	00000014 sha1_initial_hash_value
000422c0 g     F .text	000001d8 btc_hdnode_public_ckd
00008388 g     F .text	00000040 btc_free
00007328 g     F .text	0000004c btc_pubkey_cleanse
0003f448 g     F .text	00000060 ser_str
0000da38 g     F .text	00000058 btc_script_build_p2wpkh
00058234 g     O .rwdata	00000008 alt_fs_list
000032fc g     F .text	00000054 sha1_Data
00041158 g     F .text	000005b0 btc_base58_decode
00000a30 g     F .text	0000004c hmac_sha256_Update
0000751c g     F .text	0000004c btc_key_sign_hash_compact
0005970c g     O .bss	00000008 alt_resettime
000042fc g     F .text	00000f20 sha512_Transform
00000f04 g     F .text	000000a8 hmac_sha512_Final
0003f390 g     F .text	000000b8 ser_varlen
00000020 g       *ABS*	00000000 __ram_exceptions_start
0004a590 g     F .text	000000f4 epcs_read_buffer
02000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00006320 g     F .text	00000054 sha512_Data
00051db0 g     O .rodata	00000020 sha256_initial_hash_value
000061c8 g     F .text	00000100 sha512_End
00048e94 g     F .text	00000054 alt_epcs_flash_init
00058200 g     O .rwdata	00000004 secp256k1_nonce_function_default
000409e8 g     F .text	000000d4 vector_new
0004af3c g     F .text	00000050 alt_ic_isr_register
000080c0 g     F .text	000000ac btc_ecc_compact_to_der_normalized
0003add8 g     F .text	000000bc secp256k1_context_clone
00058258 g       *ABS*	00000000 _edata
00040d68 g     F .text	000000a4 vector_add
0005b3c8 g       *ABS*	00000000 _end
0004ae4c g     F .text	00000068 alt_flash_open_dev
0000d738 g     F .text	00000044 btc_script_append_op
000081fc g     F .text	00000070 btc_mem_set_mapper_default
00007f08 g     F .text	000000dc btc_ecc_recover_pubkey
000077ec g     F .text	00000064 btc_pubkey_getaddr_p2wpkh
00000244 g       *ABS*	00000000 __ram_exceptions_end
00049e94 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00001010 g     F .text	00000360 hmac_sha512_prepare
0003b464 g     F .text	00000124 secp256k1_ecdsa_signature_parse_der
00042a1c g     F .text	0000006c btc_hdnode_get_pub_hex
0004b014 g     F .text	0000008c alt_ic_irq_disable
0004a948 g     F .text	0000005c epcs_enter_4_bytes_mode
0000d9bc g     F .text	0000007c btc_script_build_p2pkh
000015d4 g     F .text	00000130 pbkdf2_hmac_sha256_Update
00003988 g     F .text	00000408 sha256_Update
0004607c g     F .text	00000020 exit
0004609c g     F .text	00000030 fiprintf
00043650 g     F .text	000000a4 cstr_equal
0003e078 g     F .text	00000084 bench_group_add_affine_var
0004aeb4 g     F .text	00000054 alt_flash_close_dev
00040e0c g     F .text	00000144 vector_remove_range
0003b588 g     F .text	00000180 secp256k1_ecdsa_signature_parse_compact
0003c304 g     F .text	0000017c secp256k1_ec_privkey_tweak_add
000439c4 g     F .text	00000074 .hidden __modsi3
00001e18 g     F .text	000001bc pbkdf2_hmac_sha512_Final
00058218 g     O .rwdata	00000004 __ctype_ptr__
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00042148 g     F .text	0000007c btc_hdnode_free
00000000 g       *ABS*	00000000 __alt_mem_sdram
0003b840 g     F .text	00000114 secp256k1_ecdsa_signature_serialize_compact
000075bc g     F .text	000000c4 btc_key_sign_recover_pubkey
0003e0fc g     F .text	00000064 bench_group_jacobi_var
0003ef40 g     F .text	000000f4 segwit_addr_encode
00056b03 g     O .rodata	00000101 _ctype_
00007fe4 g     F .text	000000dc btc_ecc_verify_sig
00006fc8 g     F .text	000000b0 btc_privkey_encode_wif
00042a88 g     F .text	00000234 btc_hdnode_deserialize
0003d4c0 g     F .text	00000218 secp256k1_ecdsa_recover
00007374 g     F .text	00000074 btc_pubkey_get_hash160
0000cf90 g     F .text	000000e4 btc_script_is_pubkey
0003f758 g     F .text	00000060 deser_u64
0003f90c g     F .text	000000e4 deser_str
000484f8 g     F .text	00000034 _exit
0004aa00 g     F .text	0000012c alt_alarm_start
00006bec g     F .text	00000128 hd_derive
000438e0 g     F .text	00000060 .hidden __muldi3
000433e4 g     F .text	0000006c cstr_free
0005296c g     O .rodata	00000858 btc_chainparams_test
00046c3c g     F .text	0000001c strlen
0004a684 g     F .text	00000054 epcs_write_enable
0003e3ec g     F .text	0000008c bench_rfc6979_hmac_sha256
000468c0 g     F .text	00000068 _init_signal_r
0004b41c g     F .text	00000154 open
0000db64 g     F .text	00000088 btc_tx_out_type_to_str
000017ec g     F .text	00000170 pbkdf2_hmac_sha256
00044cb0 g     F .text	000000dc .hidden __gedf2
0003e5e0 g     F .text	00000100 bech32_polymod_step
000596ec g     O .bss	00000004 __malloc_sbrk_start
00008300 g     F .text	00000044 btc_calloc
00046050 g     F .text	00000014 __assert
0003af44 g     F .text	00000058 secp256k1_context_set_error_callback
0004af08 g     F .text	00000034 alt_icache_flush_all
00046ba8 g     F .text	00000030 strchr
00000590 g     F .text	00000368 mnemonic_to_seed
00002a64 g     F .text	00000408 sha1_Update
00007788 g     F .text	00000064 btc_pubkey_getaddr_p2pkh
00000fac g     F .text	00000064 hmac_sha512
00041e60 g     F .text	0000006c btc_p2pkh_addr_from_hash160
00007970 g     F .text	0000010c btc_ecc_get_pubkey
0003ba68 g     F .text	000001d0 secp256k1_ecdsa_verify
00058254 g     O .rwdata	00000004 alt_priority_mask
000596f0 g     O .bss	00000004 __malloc_free_list
000082c4 g     F .text	0000003c btc_malloc
0004af8c g     F .text	00000088 alt_ic_irq_enable
000476e8 g     F .text	0000001c __vfprintf_internal
0000cb68 g     F .text	00000060 btc_script_op_free
000484b0 g     F .text	00000024 __env_lock
00045598 g     F .text	000008fc .hidden __subdf3
0003d1d4 g     F .text	000002ec secp256k1_ecdsa_sign_recoverable
0003f228 g     F .text	00000048 ser_u32
000498c4 g     F .text	00000098 alt_epcs_flash_read
0004041c g     F .text	00000128 utils_uint8_to_hex
0005822c g     O .rwdata	00000008 alt_alarm_list
0004ad8c g     F .text	00000060 _do_ctors
00046b3c g     F .text	00000014 __sigtramp
0000867c g     F .text	00000038 btc_random_init_internal
0004ab68 g     F .text	000000d0 close
0003dde4 g     F .text	0000008c bench_field_inverse_var
0003f350 g     F .text	00000040 ser_u256
00048914 g     F .text	00000084 alt_load
00040658 g     F .text	00000208 utils_uint256_sethex
0003c480 g     F .text	000001b0 secp256k1_ec_pubkey_tweak_add
00040544 g     F .text	000000d8 utils_reverse_hex
00046b00 g     F .text	00000014 raise
00046354 g     F .text	00000014 free
0004a744 g     F .text	0000011c epcs_write_buffer
00046324 g     F .text	0000001c _getenv_r



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_epcs_flash_controller+0xfdff7004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008001b4 	movhi	r2,6
 140:	10acb204 	addi	r2,r2,-19768
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008001b4 	movhi	r2,6
 158:	10acb204 	addi	r2,r2,-19768
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_epcs_flash_controller+0xfdff712c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_epcs_flash_controller+0xfdff7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a55917 	ldw	r2,-27292(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a55917 	ldw	r2,-27292(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_mem_epcs_flash_controller+0xfdff7248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
     260:	d6807214 	ori	gp,gp,456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
     268:	10a5b814 	ori	r2,r2,38624

    movhi r3, %hi(__bss_end)
     26c:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
     270:	18ecf214 	ori	r3,r3,46024

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_mem_epcs_flash_controller+0xfdff7278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	00489140 	call	48914 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	00489980 	call	48998 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_mem_epcs_flash_controller+0xfdff728c>

00000290 <mnemonic_generate>:
//	printf("\n");
//    return 0;
//}

const char *mnemonic_generate(int strength)
{
     290:	defff404 	addi	sp,sp,-48
     294:	dfc00b15 	stw	ra,44(sp)
     298:	df000a15 	stw	fp,40(sp)
     29c:	df000a04 	addi	fp,sp,40
     2a0:	e13fff15 	stw	r4,-4(fp)
	if (strength % 32 || strength < 128 || strength > 256) {
     2a4:	e0bfff17 	ldw	r2,-4(fp)
     2a8:	108007cc 	andi	r2,r2,31
     2ac:	1000061e 	bne	r2,zero,2c8 <mnemonic_generate+0x38>
     2b0:	e0bfff17 	ldw	r2,-4(fp)
     2b4:	10802010 	cmplti	r2,r2,128
     2b8:	1000031e 	bne	r2,zero,2c8 <mnemonic_generate+0x38>
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	10804050 	cmplti	r2,r2,257
     2c4:	1000021e 	bne	r2,zero,2d0 <mnemonic_generate+0x40>
		return 0;
     2c8:	0005883a 	mov	r2,zero
     2cc:	00001306 	br	31c <mnemonic_generate+0x8c>
	}
	uint8_t data[32];
	random_buffer(data, 32);
     2d0:	e0bff704 	addi	r2,fp,-36
     2d4:	01400804 	movi	r5,32
     2d8:	1009883a 	mov	r4,r2
     2dc:	00021c80 	call	21c8 <random_buffer>
	// for(int i = 0; i < 32; i++){
	// 	printf("%x\n", data[i]);
	// }
	const char *r = mnemonic_from_data(data, strength / 8);
     2e0:	e0bfff17 	ldw	r2,-4(fp)
     2e4:	1000010e 	bge	r2,zero,2ec <mnemonic_generate+0x5c>
     2e8:	108001c4 	addi	r2,r2,7
     2ec:	1005d0fa 	srai	r2,r2,3
     2f0:	1007883a 	mov	r3,r2
     2f4:	e0bff704 	addi	r2,fp,-36
     2f8:	180b883a 	mov	r5,r3
     2fc:	1009883a 	mov	r4,r2
     300:	00003300 	call	330 <mnemonic_from_data>
     304:	e0bff615 	stw	r2,-40(fp)
	memzero(data, sizeof(data));
     308:	e0bff704 	addi	r2,fp,-36
     30c:	01400804 	movi	r5,32
     310:	1009883a 	mov	r4,r2
     314:	00013700 	call	1370 <memzero>
	return r;
     318:	e0bff617 	ldw	r2,-40(fp)
}
     31c:	e037883a 	mov	sp,fp
     320:	dfc00117 	ldw	ra,4(sp)
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00204 	addi	sp,sp,8
     32c:	f800283a 	ret

00000330 <mnemonic_from_data>:

const char *mnemonic_from_data(const uint8_t *data, int len)
{
     330:	deffed04 	addi	sp,sp,-76
     334:	dfc01215 	stw	ra,72(sp)
     338:	df001115 	stw	fp,68(sp)
     33c:	dc001015 	stw	r16,64(sp)
     340:	df001104 	addi	fp,sp,68
     344:	e13ffd15 	stw	r4,-12(fp)
     348:	e17ffe15 	stw	r5,-8(fp)
	if (len % 4 || len < 16 || len > 32) {
     34c:	e0bffe17 	ldw	r2,-8(fp)
     350:	108000cc 	andi	r2,r2,3
     354:	1000061e 	bne	r2,zero,370 <mnemonic_from_data+0x40>
     358:	e0bffe17 	ldw	r2,-8(fp)
     35c:	10800410 	cmplti	r2,r2,16
     360:	1000031e 	bne	r2,zero,370 <mnemonic_from_data+0x40>
     364:	e0bffe17 	ldw	r2,-8(fp)
     368:	10800850 	cmplti	r2,r2,33
     36c:	1000021e 	bne	r2,zero,378 <mnemonic_from_data+0x48>
		return 0;
     370:	0005883a 	mov	r2,zero
     374:	00008006 	br	578 <mnemonic_from_data+0x248>
	}

	uint8_t bits[32 + 1];

	sha256_Raw(data, len, bits);
     378:	e0bffe17 	ldw	r2,-8(fp)
     37c:	e0fff404 	addi	r3,fp,-48
     380:	180d883a 	mov	r6,r3
     384:	100b883a 	mov	r5,r2
     388:	e13ffd17 	ldw	r4,-12(fp)
     38c:	00041c80 	call	41c8 <sha256_Raw>
	// checksum
	bits[len] = bits[0];
     390:	e0fff403 	ldbu	r3,-48(fp)
     394:	e13ff404 	addi	r4,fp,-48
     398:	e0bffe17 	ldw	r2,-8(fp)
     39c:	2085883a 	add	r2,r4,r2
     3a0:	10c00005 	stb	r3,0(r2)
	// data
	memcpy(bits, data, len);
     3a4:	e0fffe17 	ldw	r3,-8(fp)
     3a8:	e0bff404 	addi	r2,fp,-48
     3ac:	180d883a 	mov	r6,r3
     3b0:	e17ffd17 	ldw	r5,-12(fp)
     3b4:	1009883a 	mov	r4,r2
     3b8:	00463980 	call	46398 <memcpy>

	int mlen = len * 3 / 4;
     3bc:	e0fffe17 	ldw	r3,-8(fp)
     3c0:	1805883a 	mov	r2,r3
     3c4:	1085883a 	add	r2,r2,r2
     3c8:	10c5883a 	add	r2,r2,r3
     3cc:	1000010e 	bge	r2,zero,3d4 <mnemonic_from_data+0xa4>
     3d0:	108000c4 	addi	r2,r2,3
     3d4:	1005d0ba 	srai	r2,r2,2
     3d8:	e0bff315 	stw	r2,-52(fp)
	static CONFIDENTIAL char mnemo[24 * 10];

	int i, j, idx;
	char *p = mnemo;
     3dc:	008001b4 	movhi	r2,6
     3e0:	10a74d04 	addi	r2,r2,-25292
     3e4:	e0bff215 	stw	r2,-56(fp)
	for (i = 0; i < mlen; i++) {
     3e8:	e03fef15 	stw	zero,-68(fp)
     3ec:	00005906 	br	554 <mnemonic_from_data+0x224>
		idx = 0;
     3f0:	e03ff115 	stw	zero,-60(fp)
		for (j = 0; j < 11; j++) {
     3f4:	e03ff015 	stw	zero,-64(fp)
     3f8:	00002d06 	br	4b0 <mnemonic_from_data+0x180>
			idx <<= 1;
     3fc:	e0bff117 	ldw	r2,-60(fp)
     400:	1085883a 	add	r2,r2,r2
     404:	e0bff115 	stw	r2,-60(fp)
			idx += (bits[(i * 11 + j) / 8] & (1 << (7 - ((i * 11 + j) % 8)))) > 0;
     408:	014002c4 	movi	r5,11
     40c:	e13fef17 	ldw	r4,-68(fp)
     410:	0043af40 	call	43af4 <__mulsi3>
     414:	1007883a 	mov	r3,r2
     418:	e0bff017 	ldw	r2,-64(fp)
     41c:	1885883a 	add	r2,r3,r2
     420:	1000010e 	bge	r2,zero,428 <mnemonic_from_data+0xf8>
     424:	108001c4 	addi	r2,r2,7
     428:	1005d0fa 	srai	r2,r2,3
     42c:	1007883a 	mov	r3,r2
     430:	e0bff404 	addi	r2,fp,-48
     434:	10c5883a 	add	r2,r2,r3
     438:	10800003 	ldbu	r2,0(r2)
     43c:	14003fcc 	andi	r16,r2,255
     440:	014002c4 	movi	r5,11
     444:	e13fef17 	ldw	r4,-68(fp)
     448:	0043af40 	call	43af4 <__mulsi3>
     44c:	1007883a 	mov	r3,r2
     450:	e0bff017 	ldw	r2,-64(fp)
     454:	1887883a 	add	r3,r3,r2
     458:	00a00034 	movhi	r2,32768
     45c:	108001c4 	addi	r2,r2,7
     460:	1884703a 	and	r2,r3,r2
     464:	1000040e 	bge	r2,zero,478 <mnemonic_from_data+0x148>
     468:	10bfffc4 	addi	r2,r2,-1
     46c:	00fffe04 	movi	r3,-8
     470:	10c4b03a 	or	r2,r2,r3
     474:	10800044 	addi	r2,r2,1
     478:	1007883a 	mov	r3,r2
     47c:	008001c4 	movi	r2,7
     480:	10c5c83a 	sub	r2,r2,r3
     484:	00c00044 	movi	r3,1
     488:	1884983a 	sll	r2,r3,r2
     48c:	8084703a 	and	r2,r16,r2
     490:	0084803a 	cmplt	r2,zero,r2
     494:	10803fcc 	andi	r2,r2,255
     498:	e0fff117 	ldw	r3,-60(fp)
     49c:	1885883a 	add	r2,r3,r2
     4a0:	e0bff115 	stw	r2,-60(fp)

	int i, j, idx;
	char *p = mnemo;
	for (i = 0; i < mlen; i++) {
		idx = 0;
		for (j = 0; j < 11; j++) {
     4a4:	e0bff017 	ldw	r2,-64(fp)
     4a8:	10800044 	addi	r2,r2,1
     4ac:	e0bff015 	stw	r2,-64(fp)
     4b0:	e0bff017 	ldw	r2,-64(fp)
     4b4:	108002d0 	cmplti	r2,r2,11
     4b8:	103fd01e 	bne	r2,zero,3fc <__alt_mem_epcs_flash_controller+0xfdff73fc>
			idx <<= 1;
			idx += (bits[(i * 11 + j) / 8] & (1 << (7 - ((i * 11 + j) % 8)))) > 0;
		}
		strcpy(p, wordlist[idx]);
     4bc:	00800174 	movhi	r2,5
     4c0:	10bf2304 	addi	r2,r2,-884
     4c4:	e0fff117 	ldw	r3,-60(fp)
     4c8:	18c7883a 	add	r3,r3,r3
     4cc:	18c7883a 	add	r3,r3,r3
     4d0:	10c5883a 	add	r2,r2,r3
     4d4:	10800017 	ldw	r2,0(r2)
     4d8:	100b883a 	mov	r5,r2
     4dc:	e13ff217 	ldw	r4,-56(fp)
     4e0:	0046c100 	call	46c10 <strcpy>
		p += strlen(wordlist[idx]);
     4e4:	00800174 	movhi	r2,5
     4e8:	10bf2304 	addi	r2,r2,-884
     4ec:	e0fff117 	ldw	r3,-60(fp)
     4f0:	18c7883a 	add	r3,r3,r3
     4f4:	18c7883a 	add	r3,r3,r3
     4f8:	10c5883a 	add	r2,r2,r3
     4fc:	10800017 	ldw	r2,0(r2)
     500:	1009883a 	mov	r4,r2
     504:	0046c3c0 	call	46c3c <strlen>
     508:	1007883a 	mov	r3,r2
     50c:	e0bff217 	ldw	r2,-56(fp)
     510:	10c5883a 	add	r2,r2,r3
     514:	e0bff215 	stw	r2,-56(fp)
		*p = (i < mlen - 1) ? ' ' : 0;
     518:	e0bff317 	ldw	r2,-52(fp)
     51c:	10bfffc4 	addi	r2,r2,-1
     520:	e0ffef17 	ldw	r3,-68(fp)
     524:	1880020e 	bge	r3,r2,530 <mnemonic_from_data+0x200>
     528:	00800804 	movi	r2,32
     52c:	00000106 	br	534 <mnemonic_from_data+0x204>
     530:	0005883a 	mov	r2,zero
     534:	e0fff217 	ldw	r3,-56(fp)
     538:	18800005 	stb	r2,0(r3)
		p++;
     53c:	e0bff217 	ldw	r2,-56(fp)
     540:	10800044 	addi	r2,r2,1
     544:	e0bff215 	stw	r2,-56(fp)
	int mlen = len * 3 / 4;
	static CONFIDENTIAL char mnemo[24 * 10];

	int i, j, idx;
	char *p = mnemo;
	for (i = 0; i < mlen; i++) {
     548:	e0bfef17 	ldw	r2,-68(fp)
     54c:	10800044 	addi	r2,r2,1
     550:	e0bfef15 	stw	r2,-68(fp)
     554:	e0ffef17 	ldw	r3,-68(fp)
     558:	e0bff317 	ldw	r2,-52(fp)
     55c:	18bfa416 	blt	r3,r2,3f0 <__alt_mem_epcs_flash_controller+0xfdff73f0>
		strcpy(p, wordlist[idx]);
		p += strlen(wordlist[idx]);
		*p = (i < mlen - 1) ? ' ' : 0;
		p++;
	}
	memzero(bits, sizeof(bits));
     560:	e0bff404 	addi	r2,fp,-48
     564:	01400844 	movi	r5,33
     568:	1009883a 	mov	r4,r2
     56c:	00013700 	call	1370 <memzero>

	return mnemo;
     570:	008001b4 	movhi	r2,6
     574:	10a74d04 	addi	r2,r2,-25292
}
     578:	e6ffff04 	addi	sp,fp,-4
     57c:	dfc00217 	ldw	ra,8(sp)
     580:	df000117 	ldw	fp,4(sp)
     584:	dc000017 	ldw	r16,0(sp)
     588:	dec00304 	addi	sp,sp,12
     58c:	f800283a 	ret

00000590 <mnemonic_to_seed>:

// passphrase must be at most 256 characters or code may crash
void mnemonic_to_seed(const char *mnemonic, const char *passphrase, uint8_t seed[512 / 8], void (*progress_callback)(uint32_t current, uint32_t total))
{
     590:	deffb104 	addi	sp,sp,-316
     594:	dfc04e15 	stw	ra,312(sp)
     598:	df004d15 	stw	fp,308(sp)
     59c:	dc004c15 	stw	r16,304(sp)
     5a0:	df004d04 	addi	fp,sp,308
     5a4:	e13ffb15 	stw	r4,-20(fp)
     5a8:	e17ffc15 	stw	r5,-16(fp)
     5ac:	e1bffd15 	stw	r6,-12(fp)
     5b0:	e1fffe15 	stw	r7,-8(fp)
	int passphraselen = strlen(passphrase);
     5b4:	e13ffc17 	ldw	r4,-16(fp)
     5b8:	0046c3c0 	call	46c3c <strlen>
     5bc:	e0bfb715 	stw	r2,-292(fp)
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
     5c0:	e13ffb17 	ldw	r4,-20(fp)
     5c4:	0046c3c0 	call	46c3c <strlen>
     5c8:	e0bfb815 	stw	r2,-288(fp)
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
     5cc:	e0bfb817 	ldw	r2,-288(fp)
     5d0:	10804008 	cmpgei	r2,r2,256
     5d4:	1000401e 	bne	r2,zero,6d8 <mnemonic_to_seed+0x148>
     5d8:	e0bfb717 	ldw	r2,-292(fp)
     5dc:	10801008 	cmpgei	r2,r2,64
     5e0:	10003d1e 	bne	r2,zero,6d8 <mnemonic_to_seed+0x148>
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
     5e4:	e03fb515 	stw	zero,-300(fp)
     5e8:	00003806 	br	6cc <mnemonic_to_seed+0x13c>
			if (!bip39_cache[i].set) continue;
     5ec:	040001b4 	movhi	r16,6
     5f0:	8425cc04 	addi	r16,r16,-26832
     5f4:	e0bfb517 	ldw	r2,-300(fp)
     5f8:	01406044 	movi	r5,385
     5fc:	1009883a 	mov	r4,r2
     600:	0043af40 	call	43af4 <__mulsi3>
     604:	8085883a 	add	r2,r16,r2
     608:	10800003 	ldbu	r2,0(r2)
     60c:	1080005c 	xori	r2,r2,1
     610:	10803fcc 	andi	r2,r2,255
     614:	1000251e 	bne	r2,zero,6ac <mnemonic_to_seed+0x11c>
			if (strcmp(bip39_cache[i].mnemonic, mnemonic) != 0) continue;
     618:	01406044 	movi	r5,385
     61c:	e13fb517 	ldw	r4,-300(fp)
     620:	0043af40 	call	43af4 <__mulsi3>
     624:	1007883a 	mov	r3,r2
     628:	008001b4 	movhi	r2,6
     62c:	10a5cc04 	addi	r2,r2,-26832
     630:	1885883a 	add	r2,r3,r2
     634:	10800044 	addi	r2,r2,1
     638:	e17ffb17 	ldw	r5,-20(fp)
     63c:	1009883a 	mov	r4,r2
     640:	0046bd80 	call	46bd8 <strcmp>
     644:	10001b1e 	bne	r2,zero,6b4 <mnemonic_to_seed+0x124>
			if (strcmp(bip39_cache[i].passphrase, passphrase) != 0) continue;
     648:	01406044 	movi	r5,385
     64c:	e13fb517 	ldw	r4,-300(fp)
     650:	0043af40 	call	43af4 <__mulsi3>
     654:	10c04004 	addi	r3,r2,256
     658:	008001b4 	movhi	r2,6
     65c:	10a5cc04 	addi	r2,r2,-26832
     660:	1885883a 	add	r2,r3,r2
     664:	10800044 	addi	r2,r2,1
     668:	e17ffc17 	ldw	r5,-16(fp)
     66c:	1009883a 	mov	r4,r2
     670:	0046bd80 	call	46bd8 <strcmp>
     674:	1000111e 	bne	r2,zero,6bc <mnemonic_to_seed+0x12c>
			// found the correct entry
			memcpy(seed, bip39_cache[i].seed, 512 / 8);
     678:	01406044 	movi	r5,385
     67c:	e13fb517 	ldw	r4,-300(fp)
     680:	0043af40 	call	43af4 <__mulsi3>
     684:	10c05004 	addi	r3,r2,320
     688:	008001b4 	movhi	r2,6
     68c:	10a5cc04 	addi	r2,r2,-26832
     690:	1885883a 	add	r2,r3,r2
     694:	10800044 	addi	r2,r2,1
     698:	01801004 	movi	r6,64
     69c:	100b883a 	mov	r5,r2
     6a0:	e13ffd17 	ldw	r4,-12(fp)
     6a4:	00463980 	call	46398 <memcpy>
			return;
     6a8:	00008d06 	br	8e0 <mnemonic_to_seed+0x350>
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
			if (!bip39_cache[i].set) continue;
     6ac:	0001883a 	nop
     6b0:	00000306 	br	6c0 <mnemonic_to_seed+0x130>
			if (strcmp(bip39_cache[i].mnemonic, mnemonic) != 0) continue;
     6b4:	0001883a 	nop
     6b8:	00000106 	br	6c0 <mnemonic_to_seed+0x130>
			if (strcmp(bip39_cache[i].passphrase, passphrase) != 0) continue;
     6bc:	0001883a 	nop
	int passphraselen = strlen(passphrase);
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
     6c0:	e0bfb517 	ldw	r2,-300(fp)
     6c4:	10800044 	addi	r2,r2,1
     6c8:	e0bfb515 	stw	r2,-300(fp)
     6cc:	e0bfb517 	ldw	r2,-300(fp)
     6d0:	10800110 	cmplti	r2,r2,4
     6d4:	103fc51e 	bne	r2,zero,5ec <__alt_mem_epcs_flash_controller+0xfdff75ec>
			return;
		}
	}
#endif
	uint8_t salt[8 + 256];
	memcpy(salt, "mnemonic", 8);
     6d8:	e0bfb904 	addi	r2,fp,-284
     6dc:	01800204 	movi	r6,8
     6e0:	01400174 	movhi	r5,5
     6e4:	29472404 	addi	r5,r5,7312
     6e8:	1009883a 	mov	r4,r2
     6ec:	00463980 	call	46398 <memcpy>
	memcpy(salt + 8, passphrase, passphraselen);
     6f0:	e0bfb904 	addi	r2,fp,-284
     6f4:	10800204 	addi	r2,r2,8
     6f8:	e0ffb717 	ldw	r3,-292(fp)
     6fc:	180d883a 	mov	r6,r3
     700:	e17ffc17 	ldw	r5,-16(fp)
     704:	1009883a 	mov	r4,r2
     708:	00463980 	call	46398 <memcpy>
	static CONFIDENTIAL PBKDF2_HMAC_SHA512_CTX pctx;
	pbkdf2_hmac_sha512_Init(&pctx, (const uint8_t *)mnemonic, strlen(mnemonic), salt, passphraselen + 8, 1);
     70c:	e13ffb17 	ldw	r4,-20(fp)
     710:	0046c3c0 	call	46c3c <strlen>
     714:	100b883a 	mov	r5,r2
     718:	e0bfb717 	ldw	r2,-292(fp)
     71c:	10800204 	addi	r2,r2,8
     720:	e13fb904 	addi	r4,fp,-284
     724:	00c00044 	movi	r3,1
     728:	d8c00115 	stw	r3,4(sp)
     72c:	d8800015 	stw	r2,0(sp)
     730:	200f883a 	mov	r7,r4
     734:	280d883a 	mov	r6,r5
     738:	e17ffb17 	ldw	r5,-20(fp)
     73c:	010001b4 	movhi	r4,6
     740:	21278904 	addi	r4,r4,-25052
     744:	000195c0 	call	195c <pbkdf2_hmac_sha512_Init>
	if (progress_callback) {
     748:	e0bffe17 	ldw	r2,-8(fp)
     74c:	10000426 	beq	r2,zero,760 <mnemonic_to_seed+0x1d0>
		progress_callback(0, BIP39_PBKDF2_ROUNDS);
     750:	e0bffe17 	ldw	r2,-8(fp)
     754:	01420004 	movi	r5,2048
     758:	0009883a 	mov	r4,zero
     75c:	103ee83a 	callr	r2
	}
	for (int i = 0; i < 16; i++) {
     760:	e03fb615 	stw	zero,-296(fp)
     764:	00001406 	br	7b8 <mnemonic_to_seed+0x228>
		pbkdf2_hmac_sha512_Update(&pctx, BIP39_PBKDF2_ROUNDS / 16);
     768:	01402004 	movi	r5,128
     76c:	010001b4 	movhi	r4,6
     770:	21278904 	addi	r4,r4,-25052
     774:	0001cd40 	call	1cd4 <pbkdf2_hmac_sha512_Update>
		if (progress_callback) {
     778:	e0bffe17 	ldw	r2,-8(fp)
     77c:	10000b26 	beq	r2,zero,7ac <mnemonic_to_seed+0x21c>
			progress_callback((i + 1) * BIP39_PBKDF2_ROUNDS / 16, BIP39_PBKDF2_ROUNDS);
     780:	e0bfb617 	ldw	r2,-296(fp)
     784:	10800044 	addi	r2,r2,1
     788:	100492fa 	slli	r2,r2,11
     78c:	1000010e 	bge	r2,zero,794 <mnemonic_to_seed+0x204>
     790:	108003c4 	addi	r2,r2,15
     794:	1005d13a 	srai	r2,r2,4
     798:	1007883a 	mov	r3,r2
     79c:	e0bffe17 	ldw	r2,-8(fp)
     7a0:	01420004 	movi	r5,2048
     7a4:	1809883a 	mov	r4,r3
     7a8:	103ee83a 	callr	r2
	static CONFIDENTIAL PBKDF2_HMAC_SHA512_CTX pctx;
	pbkdf2_hmac_sha512_Init(&pctx, (const uint8_t *)mnemonic, strlen(mnemonic), salt, passphraselen + 8, 1);
	if (progress_callback) {
		progress_callback(0, BIP39_PBKDF2_ROUNDS);
	}
	for (int i = 0; i < 16; i++) {
     7ac:	e0bfb617 	ldw	r2,-296(fp)
     7b0:	10800044 	addi	r2,r2,1
     7b4:	e0bfb615 	stw	r2,-296(fp)
     7b8:	e0bfb617 	ldw	r2,-296(fp)
     7bc:	10800410 	cmplti	r2,r2,16
     7c0:	103fe91e 	bne	r2,zero,768 <__alt_mem_epcs_flash_controller+0xfdff7768>
		pbkdf2_hmac_sha512_Update(&pctx, BIP39_PBKDF2_ROUNDS / 16);
		if (progress_callback) {
			progress_callback((i + 1) * BIP39_PBKDF2_ROUNDS / 16, BIP39_PBKDF2_ROUNDS);
		}
	}
	pbkdf2_hmac_sha512_Final(&pctx, seed);
     7c4:	e17ffd17 	ldw	r5,-12(fp)
     7c8:	010001b4 	movhi	r4,6
     7cc:	21278904 	addi	r4,r4,-25052
     7d0:	0001e180 	call	1e18 <pbkdf2_hmac_sha512_Final>
	memzero(salt, sizeof(salt));
     7d4:	e0bfb904 	addi	r2,fp,-284
     7d8:	01404204 	movi	r5,264
     7dc:	1009883a 	mov	r4,r2
     7e0:	00013700 	call	1370 <memzero>
#if USE_BIP39_CACHE
	// store to cache
	if (mnemoniclen < 256 && passphraselen < 64) {
     7e4:	e0bfb817 	ldw	r2,-288(fp)
     7e8:	10804008 	cmpgei	r2,r2,256
     7ec:	10003c1e 	bne	r2,zero,8e0 <mnemonic_to_seed+0x350>
     7f0:	e0bfb717 	ldw	r2,-292(fp)
     7f4:	10801008 	cmpgei	r2,r2,64
     7f8:	1000391e 	bne	r2,zero,8e0 <mnemonic_to_seed+0x350>
		bip39_cache[bip39_cache_index].set = true;
     7fc:	d0a54617 	ldw	r2,-27368(gp)
     800:	040001b4 	movhi	r16,6
     804:	8425cc04 	addi	r16,r16,-26832
     808:	01406044 	movi	r5,385
     80c:	1009883a 	mov	r4,r2
     810:	0043af40 	call	43af4 <__mulsi3>
     814:	8085883a 	add	r2,r16,r2
     818:	00c00044 	movi	r3,1
     81c:	10c00005 	stb	r3,0(r2)
		strcpy(bip39_cache[bip39_cache_index].mnemonic, mnemonic);
     820:	d0a54617 	ldw	r2,-27368(gp)
     824:	01406044 	movi	r5,385
     828:	1009883a 	mov	r4,r2
     82c:	0043af40 	call	43af4 <__mulsi3>
     830:	1007883a 	mov	r3,r2
     834:	008001b4 	movhi	r2,6
     838:	10a5cc04 	addi	r2,r2,-26832
     83c:	1885883a 	add	r2,r3,r2
     840:	10800044 	addi	r2,r2,1
     844:	e17ffb17 	ldw	r5,-20(fp)
     848:	1009883a 	mov	r4,r2
     84c:	0046c100 	call	46c10 <strcpy>
		strcpy(bip39_cache[bip39_cache_index].passphrase, passphrase);
     850:	d0a54617 	ldw	r2,-27368(gp)
     854:	01406044 	movi	r5,385
     858:	1009883a 	mov	r4,r2
     85c:	0043af40 	call	43af4 <__mulsi3>
     860:	10c04004 	addi	r3,r2,256
     864:	008001b4 	movhi	r2,6
     868:	10a5cc04 	addi	r2,r2,-26832
     86c:	1885883a 	add	r2,r3,r2
     870:	10800044 	addi	r2,r2,1
     874:	e17ffc17 	ldw	r5,-16(fp)
     878:	1009883a 	mov	r4,r2
     87c:	0046c100 	call	46c10 <strcpy>
		memcpy(bip39_cache[bip39_cache_index].seed, seed, 512 / 8);
     880:	d0a54617 	ldw	r2,-27368(gp)
     884:	01406044 	movi	r5,385
     888:	1009883a 	mov	r4,r2
     88c:	0043af40 	call	43af4 <__mulsi3>
     890:	10c05004 	addi	r3,r2,320
     894:	008001b4 	movhi	r2,6
     898:	10a5cc04 	addi	r2,r2,-26832
     89c:	1885883a 	add	r2,r3,r2
     8a0:	10800044 	addi	r2,r2,1
     8a4:	01801004 	movi	r6,64
     8a8:	e17ffd17 	ldw	r5,-12(fp)
     8ac:	1009883a 	mov	r4,r2
     8b0:	00463980 	call	46398 <memcpy>
		bip39_cache_index = (bip39_cache_index + 1) % BIP39_CACHE_SIZE;
     8b4:	d0a54617 	ldw	r2,-27368(gp)
     8b8:	10c00044 	addi	r3,r2,1
     8bc:	00a00034 	movhi	r2,32768
     8c0:	108000c4 	addi	r2,r2,3
     8c4:	1884703a 	and	r2,r3,r2
     8c8:	1000040e 	bge	r2,zero,8dc <mnemonic_to_seed+0x34c>
     8cc:	10bfffc4 	addi	r2,r2,-1
     8d0:	00ffff04 	movi	r3,-4
     8d4:	10c4b03a 	or	r2,r2,r3
     8d8:	10800044 	addi	r2,r2,1
     8dc:	d0a54615 	stw	r2,-27368(gp)
	}
#endif
}
     8e0:	e6ffff04 	addi	sp,fp,-4
     8e4:	dfc00217 	ldw	ra,8(sp)
     8e8:	df000117 	ldw	fp,4(sp)
     8ec:	dc000017 	ldw	r16,0(sp)
     8f0:	dec00304 	addi	sp,sp,12
     8f4:	f800283a 	ret

000008f8 <hmac_sha256_Init>:
#include "..\Include\hmac.h"
#include "..\Include\options.h"
#include "..\Include\memzero.h"

void hmac_sha256_Init(HMAC_SHA256_CTX *hctx, const uint8_t *key, const uint32_t keylen)
{
     8f8:	defffa04 	addi	sp,sp,-24
     8fc:	dfc00515 	stw	ra,20(sp)
     900:	df000415 	stw	fp,16(sp)
     904:	df000404 	addi	fp,sp,16
     908:	e13ffd15 	stw	r4,-12(fp)
     90c:	e17ffe15 	stw	r5,-8(fp)
     910:	e1bfff15 	stw	r6,-4(fp)
	static CONFIDENTIAL uint8_t i_key_pad[SHA256_BLOCK_LENGTH];
	memset(i_key_pad, 0, SHA256_BLOCK_LENGTH);
     914:	01801004 	movi	r6,64
     918:	000b883a 	mov	r5,zero
     91c:	010001b4 	movhi	r4,6
     920:	2127da04 	addi	r4,r4,-24728
     924:	00464200 	call	46420 <memset>
	if (keylen > SHA256_BLOCK_LENGTH) {
     928:	e0bfff17 	ldw	r2,-4(fp)
     92c:	10801070 	cmpltui	r2,r2,65
     930:	1000061e 	bne	r2,zero,94c <hmac_sha256_Init+0x54>
		sha256_Raw(key, keylen, i_key_pad);
     934:	018001b4 	movhi	r6,6
     938:	31a7da04 	addi	r6,r6,-24728
     93c:	e17fff17 	ldw	r5,-4(fp)
     940:	e13ffe17 	ldw	r4,-8(fp)
     944:	00041c80 	call	41c8 <sha256_Raw>
     948:	00000506 	br	960 <hmac_sha256_Init+0x68>
	} else {
		memcpy(i_key_pad, key, keylen);
     94c:	e1bfff17 	ldw	r6,-4(fp)
     950:	e17ffe17 	ldw	r5,-8(fp)
     954:	010001b4 	movhi	r4,6
     958:	2127da04 	addi	r4,r4,-24728
     95c:	00463980 	call	46398 <memcpy>
	}
	for (int i = 0; i < SHA256_BLOCK_LENGTH; i++) {
     960:	e03ffc15 	stw	zero,-16(fp)
     964:	00001a06 	br	9d0 <hmac_sha256_Init+0xd8>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
     968:	008001b4 	movhi	r2,6
     96c:	10a7da04 	addi	r2,r2,-24728
     970:	e0fffc17 	ldw	r3,-16(fp)
     974:	10c5883a 	add	r2,r2,r3
     978:	10800003 	ldbu	r2,0(r2)
     97c:	1080171c 	xori	r2,r2,92
     980:	1009883a 	mov	r4,r2
     984:	e0fffd17 	ldw	r3,-12(fp)
     988:	e0bffc17 	ldw	r2,-16(fp)
     98c:	1885883a 	add	r2,r3,r2
     990:	11000005 	stb	r4,0(r2)
		i_key_pad[i] ^= 0x36;
     994:	008001b4 	movhi	r2,6
     998:	10a7da04 	addi	r2,r2,-24728
     99c:	e0fffc17 	ldw	r3,-16(fp)
     9a0:	10c5883a 	add	r2,r2,r3
     9a4:	10800003 	ldbu	r2,0(r2)
     9a8:	10800d9c 	xori	r2,r2,54
     9ac:	1009883a 	mov	r4,r2
     9b0:	008001b4 	movhi	r2,6
     9b4:	10a7da04 	addi	r2,r2,-24728
     9b8:	e0fffc17 	ldw	r3,-16(fp)
     9bc:	10c5883a 	add	r2,r2,r3
     9c0:	11000005 	stb	r4,0(r2)
	if (keylen > SHA256_BLOCK_LENGTH) {
		sha256_Raw(key, keylen, i_key_pad);
	} else {
		memcpy(i_key_pad, key, keylen);
	}
	for (int i = 0; i < SHA256_BLOCK_LENGTH; i++) {
     9c4:	e0bffc17 	ldw	r2,-16(fp)
     9c8:	10800044 	addi	r2,r2,1
     9cc:	e0bffc15 	stw	r2,-16(fp)
     9d0:	e0bffc17 	ldw	r2,-16(fp)
     9d4:	10801010 	cmplti	r2,r2,64
     9d8:	103fe31e 	bne	r2,zero,968 <__alt_mem_epcs_flash_controller+0xfdff7968>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
		i_key_pad[i] ^= 0x36;
	}
	sha256_Init(&(hctx->ctx));
     9dc:	e0bffd17 	ldw	r2,-12(fp)
     9e0:	10801004 	addi	r2,r2,64
     9e4:	1009883a 	mov	r4,r2
     9e8:	00033500 	call	3350 <sha256_Init>
	sha256_Update(&(hctx->ctx), i_key_pad, SHA256_BLOCK_LENGTH);
     9ec:	e0bffd17 	ldw	r2,-12(fp)
     9f0:	10801004 	addi	r2,r2,64
     9f4:	01801004 	movi	r6,64
     9f8:	014001b4 	movhi	r5,6
     9fc:	2967da04 	addi	r5,r5,-24728
     a00:	1009883a 	mov	r4,r2
     a04:	00039880 	call	3988 <sha256_Update>
	memzero(i_key_pad, sizeof(i_key_pad));
     a08:	01401004 	movi	r5,64
     a0c:	010001b4 	movhi	r4,6
     a10:	2127da04 	addi	r4,r4,-24728
     a14:	00013700 	call	1370 <memzero>
}
     a18:	0001883a 	nop
     a1c:	e037883a 	mov	sp,fp
     a20:	dfc00117 	ldw	ra,4(sp)
     a24:	df000017 	ldw	fp,0(sp)
     a28:	dec00204 	addi	sp,sp,8
     a2c:	f800283a 	ret

00000a30 <hmac_sha256_Update>:

void hmac_sha256_Update(HMAC_SHA256_CTX *hctx, const uint8_t *msg, const uint32_t msglen)
{
     a30:	defffb04 	addi	sp,sp,-20
     a34:	dfc00415 	stw	ra,16(sp)
     a38:	df000315 	stw	fp,12(sp)
     a3c:	df000304 	addi	fp,sp,12
     a40:	e13ffd15 	stw	r4,-12(fp)
     a44:	e17ffe15 	stw	r5,-8(fp)
     a48:	e1bfff15 	stw	r6,-4(fp)
	sha256_Update(&(hctx->ctx), msg, msglen);
     a4c:	e0bffd17 	ldw	r2,-12(fp)
     a50:	10801004 	addi	r2,r2,64
     a54:	e1bfff17 	ldw	r6,-4(fp)
     a58:	e17ffe17 	ldw	r5,-8(fp)
     a5c:	1009883a 	mov	r4,r2
     a60:	00039880 	call	3988 <sha256_Update>
}
     a64:	0001883a 	nop
     a68:	e037883a 	mov	sp,fp
     a6c:	dfc00117 	ldw	ra,4(sp)
     a70:	df000017 	ldw	fp,0(sp)
     a74:	dec00204 	addi	sp,sp,8
     a78:	f800283a 	ret

00000a7c <hmac_sha256_Final>:

void hmac_sha256_Final(HMAC_SHA256_CTX *hctx, uint8_t *hmac)
{
     a7c:	defffc04 	addi	sp,sp,-16
     a80:	dfc00315 	stw	ra,12(sp)
     a84:	df000215 	stw	fp,8(sp)
     a88:	df000204 	addi	fp,sp,8
     a8c:	e13ffe15 	stw	r4,-8(fp)
     a90:	e17fff15 	stw	r5,-4(fp)
	sha256_Final(&(hctx->ctx), hmac);
     a94:	e0bffe17 	ldw	r2,-8(fp)
     a98:	10801004 	addi	r2,r2,64
     a9c:	e17fff17 	ldw	r5,-4(fp)
     aa0:	1009883a 	mov	r4,r2
     aa4:	0003d900 	call	3d90 <sha256_Final>
	sha256_Init(&(hctx->ctx));
     aa8:	e0bffe17 	ldw	r2,-8(fp)
     aac:	10801004 	addi	r2,r2,64
     ab0:	1009883a 	mov	r4,r2
     ab4:	00033500 	call	3350 <sha256_Init>
	sha256_Update(&(hctx->ctx), hctx->o_key_pad, SHA256_BLOCK_LENGTH);
     ab8:	e0bffe17 	ldw	r2,-8(fp)
     abc:	10801004 	addi	r2,r2,64
     ac0:	e0fffe17 	ldw	r3,-8(fp)
     ac4:	01801004 	movi	r6,64
     ac8:	180b883a 	mov	r5,r3
     acc:	1009883a 	mov	r4,r2
     ad0:	00039880 	call	3988 <sha256_Update>
	sha256_Update(&(hctx->ctx), hmac, SHA256_DIGEST_LENGTH);
     ad4:	e0bffe17 	ldw	r2,-8(fp)
     ad8:	10801004 	addi	r2,r2,64
     adc:	01800804 	movi	r6,32
     ae0:	e17fff17 	ldw	r5,-4(fp)
     ae4:	1009883a 	mov	r4,r2
     ae8:	00039880 	call	3988 <sha256_Update>
	sha256_Final(&(hctx->ctx), hmac);
     aec:	e0bffe17 	ldw	r2,-8(fp)
     af0:	10801004 	addi	r2,r2,64
     af4:	e17fff17 	ldw	r5,-4(fp)
     af8:	1009883a 	mov	r4,r2
     afc:	0003d900 	call	3d90 <sha256_Final>
	memzero(hctx, sizeof(HMAC_SHA256_CTX));
     b00:	01402a04 	movi	r5,168
     b04:	e13ffe17 	ldw	r4,-8(fp)
     b08:	00013700 	call	1370 <memzero>
}
     b0c:	0001883a 	nop
     b10:	e037883a 	mov	sp,fp
     b14:	dfc00117 	ldw	ra,4(sp)
     b18:	df000017 	ldw	fp,0(sp)
     b1c:	dec00204 	addi	sp,sp,8
     b20:	f800283a 	ret

00000b24 <hmac_sha256>:

void hmac_sha256(const uint8_t *key, const uint32_t keylen, const uint8_t *msg, const uint32_t msglen, uint8_t *hmac)
{
     b24:	defffa04 	addi	sp,sp,-24
     b28:	dfc00515 	stw	ra,20(sp)
     b2c:	df000415 	stw	fp,16(sp)
     b30:	df000404 	addi	fp,sp,16
     b34:	e13ffc15 	stw	r4,-16(fp)
     b38:	e17ffd15 	stw	r5,-12(fp)
     b3c:	e1bffe15 	stw	r6,-8(fp)
     b40:	e1ffff15 	stw	r7,-4(fp)
	static CONFIDENTIAL HMAC_SHA256_CTX hctx;
	hmac_sha256_Init(&hctx, key, keylen);
     b44:	e1bffd17 	ldw	r6,-12(fp)
     b48:	e17ffc17 	ldw	r5,-16(fp)
     b4c:	010001b4 	movhi	r4,6
     b50:	2127ea04 	addi	r4,r4,-24664
     b54:	00008f80 	call	8f8 <hmac_sha256_Init>
	hmac_sha256_Update(&hctx, msg, msglen);
     b58:	e1bfff17 	ldw	r6,-4(fp)
     b5c:	e17ffe17 	ldw	r5,-8(fp)
     b60:	010001b4 	movhi	r4,6
     b64:	2127ea04 	addi	r4,r4,-24664
     b68:	0000a300 	call	a30 <hmac_sha256_Update>
	hmac_sha256_Final(&hctx, hmac);
     b6c:	e1400217 	ldw	r5,8(fp)
     b70:	010001b4 	movhi	r4,6
     b74:	2127ea04 	addi	r4,r4,-24664
     b78:	0000a7c0 	call	a7c <hmac_sha256_Final>
}
     b7c:	0001883a 	nop
     b80:	e037883a 	mov	sp,fp
     b84:	dfc00117 	ldw	ra,4(sp)
     b88:	df000017 	ldw	fp,0(sp)
     b8c:	dec00204 	addi	sp,sp,8
     b90:	f800283a 	ret

00000b94 <hmac_sha256_prepare>:

void hmac_sha256_prepare(const uint8_t *key, const uint32_t keylen, uint32_t *opad_digest, uint32_t *ipad_digest)
{
     b94:	defff604 	addi	sp,sp,-40
     b98:	dfc00915 	stw	ra,36(sp)
     b9c:	df000815 	stw	fp,32(sp)
     ba0:	df000804 	addi	fp,sp,32
     ba4:	e13ffc15 	stw	r4,-16(fp)
     ba8:	e17ffd15 	stw	r5,-12(fp)
     bac:	e1bffe15 	stw	r6,-8(fp)
     bb0:	e1ffff15 	stw	r7,-4(fp)
	static CONFIDENTIAL uint32_t key_pad[SHA256_BLOCK_LENGTH/sizeof(uint32_t)];

	memzero(key_pad, sizeof(key_pad));
     bb4:	01401004 	movi	r5,64
     bb8:	010001b4 	movhi	r4,6
     bbc:	21281404 	addi	r4,r4,-24496
     bc0:	00013700 	call	1370 <memzero>
	if (keylen > SHA256_BLOCK_LENGTH) {
     bc4:	e0bffd17 	ldw	r2,-12(fp)
     bc8:	10801070 	cmpltui	r2,r2,65
     bcc:	10000e1e 	bne	r2,zero,c08 <hmac_sha256_prepare+0x74>
		static CONFIDENTIAL SHA256_CTX context;
		sha256_Init(&context);
     bd0:	010001b4 	movhi	r4,6
     bd4:	21282404 	addi	r4,r4,-24432
     bd8:	00033500 	call	3350 <sha256_Init>
		sha256_Update(&context, key, keylen);
     bdc:	e1bffd17 	ldw	r6,-12(fp)
     be0:	e17ffc17 	ldw	r5,-16(fp)
     be4:	010001b4 	movhi	r4,6
     be8:	21282404 	addi	r4,r4,-24432
     bec:	00039880 	call	3988 <sha256_Update>
		sha256_Final(&context, (uint8_t*)key_pad);
     bf0:	014001b4 	movhi	r5,6
     bf4:	29681404 	addi	r5,r5,-24496
     bf8:	010001b4 	movhi	r4,6
     bfc:	21282404 	addi	r4,r4,-24432
     c00:	0003d900 	call	3d90 <sha256_Final>
     c04:	00000506 	br	c1c <hmac_sha256_prepare+0x88>
	} else {
		memcpy(key_pad, key, keylen);
     c08:	e1bffd17 	ldw	r6,-12(fp)
     c0c:	e17ffc17 	ldw	r5,-16(fp)
     c10:	010001b4 	movhi	r4,6
     c14:	21281404 	addi	r4,r4,-24496
     c18:	00463980 	call	46398 <memcpy>
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
     c1c:	e03ff815 	stw	zero,-32(fp)
     c20:	00002506 	br	cb8 <hmac_sha256_prepare+0x124>
		uint32_t data;
#if BYTE_ORDER == LITTLE_ENDIAN
		REVERSE32(key_pad[i], data);
     c24:	008001b4 	movhi	r2,6
     c28:	10a81404 	addi	r2,r2,-24496
     c2c:	e0fff817 	ldw	r3,-32(fp)
     c30:	18c7883a 	add	r3,r3,r3
     c34:	18c7883a 	add	r3,r3,r3
     c38:	10c5883a 	add	r2,r2,r3
     c3c:	10800017 	ldw	r2,0(r2)
     c40:	e0bffa15 	stw	r2,-24(fp)
     c44:	e0bffa17 	ldw	r2,-24(fp)
     c48:	1004143a 	roli	r2,r2,16
     c4c:	e0bffa15 	stw	r2,-24(fp)
     c50:	e0fffa17 	ldw	r3,-24(fp)
     c54:	00bfc074 	movhi	r2,65281
     c58:	10bfc004 	addi	r2,r2,-256
     c5c:	1884703a 	and	r2,r3,r2
     c60:	1006d23a 	srli	r3,r2,8
     c64:	e13ffa17 	ldw	r4,-24(fp)
     c68:	00803ff4 	movhi	r2,255
     c6c:	10803fc4 	addi	r2,r2,255
     c70:	2084703a 	and	r2,r4,r2
     c74:	1004923a 	slli	r2,r2,8
     c78:	1884b03a 	or	r2,r3,r2
     c7c:	e0bffb15 	stw	r2,-20(fp)
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c;
     c80:	e0fffb17 	ldw	r3,-20(fp)
     c84:	00971734 	movhi	r2,23644
     c88:	10971704 	addi	r2,r2,23644
     c8c:	1888f03a 	xor	r4,r3,r2
     c90:	008001b4 	movhi	r2,6
     c94:	10a81404 	addi	r2,r2,-24496
     c98:	e0fff817 	ldw	r3,-32(fp)
     c9c:	18c7883a 	add	r3,r3,r3
     ca0:	18c7883a 	add	r3,r3,r3
     ca4:	10c5883a 	add	r2,r2,r3
     ca8:	11000015 	stw	r4,0(r2)
	} else {
		memcpy(key_pad, key, keylen);
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
     cac:	e0bff817 	ldw	r2,-32(fp)
     cb0:	10800044 	addi	r2,r2,1
     cb4:	e0bff815 	stw	r2,-32(fp)
     cb8:	e0bff817 	ldw	r2,-32(fp)
     cbc:	10800410 	cmplti	r2,r2,16
     cc0:	103fd81e 	bne	r2,zero,c24 <__alt_mem_epcs_flash_controller+0xfdff7c24>
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c;
	}
	sha256_Transform(sha256_initial_hash_value, key_pad, opad_digest);
     cc4:	e1bffe17 	ldw	r6,-8(fp)
     cc8:	014001b4 	movhi	r5,6
     ccc:	29681404 	addi	r5,r5,-24496
     cd0:	01000174 	movhi	r4,5
     cd4:	21076c04 	addi	r4,r4,7600
     cd8:	00033c00 	call	33c0 <sha256_Transform>

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
     cdc:	e03ff915 	stw	zero,-28(fp)
     ce0:	00001406 	br	d34 <hmac_sha256_prepare+0x1a0>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c ^ 0x36363636;
     ce4:	008001b4 	movhi	r2,6
     ce8:	10a81404 	addi	r2,r2,-24496
     cec:	e0fff917 	ldw	r3,-28(fp)
     cf0:	18c7883a 	add	r3,r3,r3
     cf4:	18c7883a 	add	r3,r3,r3
     cf8:	10c5883a 	add	r2,r2,r3
     cfc:	10c00017 	ldw	r3,0(r2)
     d00:	009a9ab4 	movhi	r2,27242
     d04:	109a9a84 	addi	r2,r2,27242
     d08:	1888f03a 	xor	r4,r3,r2
     d0c:	008001b4 	movhi	r2,6
     d10:	10a81404 	addi	r2,r2,-24496
     d14:	e0fff917 	ldw	r3,-28(fp)
     d18:	18c7883a 	add	r3,r3,r3
     d1c:	18c7883a 	add	r3,r3,r3
     d20:	10c5883a 	add	r2,r2,r3
     d24:	11000015 	stw	r4,0(r2)
		key_pad[i] = data ^ 0x5c5c5c5c;
	}
	sha256_Transform(sha256_initial_hash_value, key_pad, opad_digest);

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
     d28:	e0bff917 	ldw	r2,-28(fp)
     d2c:	10800044 	addi	r2,r2,1
     d30:	e0bff915 	stw	r2,-28(fp)
     d34:	e0bff917 	ldw	r2,-28(fp)
     d38:	10800410 	cmplti	r2,r2,16
     d3c:	103fe91e 	bne	r2,zero,ce4 <__alt_mem_epcs_flash_controller+0xfdff7ce4>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c ^ 0x36363636;
	}
	sha256_Transform(sha256_initial_hash_value, key_pad, ipad_digest);
     d40:	e1bfff17 	ldw	r6,-4(fp)
     d44:	014001b4 	movhi	r5,6
     d48:	29681404 	addi	r5,r5,-24496
     d4c:	01000174 	movhi	r4,5
     d50:	21076c04 	addi	r4,r4,7600
     d54:	00033c00 	call	33c0 <sha256_Transform>
	memzero(key_pad, sizeof(key_pad));
     d58:	01401004 	movi	r5,64
     d5c:	010001b4 	movhi	r4,6
     d60:	21281404 	addi	r4,r4,-24496
     d64:	00013700 	call	1370 <memzero>
}
     d68:	0001883a 	nop
     d6c:	e037883a 	mov	sp,fp
     d70:	dfc00117 	ldw	ra,4(sp)
     d74:	df000017 	ldw	fp,0(sp)
     d78:	dec00204 	addi	sp,sp,8
     d7c:	f800283a 	ret

00000d80 <hmac_sha512_Init>:

void hmac_sha512_Init(HMAC_SHA512_CTX *hctx, const uint8_t *key, const uint32_t keylen)
{
     d80:	defffa04 	addi	sp,sp,-24
     d84:	dfc00515 	stw	ra,20(sp)
     d88:	df000415 	stw	fp,16(sp)
     d8c:	df000404 	addi	fp,sp,16
     d90:	e13ffd15 	stw	r4,-12(fp)
     d94:	e17ffe15 	stw	r5,-8(fp)
     d98:	e1bfff15 	stw	r6,-4(fp)
	static CONFIDENTIAL uint8_t i_key_pad[SHA512_BLOCK_LENGTH];
	memset(i_key_pad, 0, SHA512_BLOCK_LENGTH);
     d9c:	01802004 	movi	r6,128
     da0:	000b883a 	mov	r5,zero
     da4:	010001b4 	movhi	r4,6
     da8:	21283e04 	addi	r4,r4,-24328
     dac:	00464200 	call	46420 <memset>
	if (keylen > SHA512_BLOCK_LENGTH) {
     db0:	e0bfff17 	ldw	r2,-4(fp)
     db4:	10802070 	cmpltui	r2,r2,129
     db8:	1000061e 	bne	r2,zero,dd4 <hmac_sha512_Init+0x54>
		sha512_Raw(key, keylen, i_key_pad);
     dbc:	018001b4 	movhi	r6,6
     dc0:	31a83e04 	addi	r6,r6,-24328
     dc4:	e17fff17 	ldw	r5,-4(fp)
     dc8:	e13ffe17 	ldw	r4,-8(fp)
     dcc:	00062c80 	call	62c8 <sha512_Raw>
     dd0:	00000506 	br	de8 <hmac_sha512_Init+0x68>
	} else {
		memcpy(i_key_pad, key, keylen);
     dd4:	e1bfff17 	ldw	r6,-4(fp)
     dd8:	e17ffe17 	ldw	r5,-8(fp)
     ddc:	010001b4 	movhi	r4,6
     de0:	21283e04 	addi	r4,r4,-24328
     de4:	00463980 	call	46398 <memcpy>
	}
	for (int i = 0; i < SHA512_BLOCK_LENGTH; i++) {
     de8:	e03ffc15 	stw	zero,-16(fp)
     dec:	00001a06 	br	e58 <hmac_sha512_Init+0xd8>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
     df0:	008001b4 	movhi	r2,6
     df4:	10a83e04 	addi	r2,r2,-24328
     df8:	e0fffc17 	ldw	r3,-16(fp)
     dfc:	10c5883a 	add	r2,r2,r3
     e00:	10800003 	ldbu	r2,0(r2)
     e04:	1080171c 	xori	r2,r2,92
     e08:	1009883a 	mov	r4,r2
     e0c:	e0fffd17 	ldw	r3,-12(fp)
     e10:	e0bffc17 	ldw	r2,-16(fp)
     e14:	1885883a 	add	r2,r3,r2
     e18:	11000005 	stb	r4,0(r2)
		i_key_pad[i] ^= 0x36;
     e1c:	008001b4 	movhi	r2,6
     e20:	10a83e04 	addi	r2,r2,-24328
     e24:	e0fffc17 	ldw	r3,-16(fp)
     e28:	10c5883a 	add	r2,r2,r3
     e2c:	10800003 	ldbu	r2,0(r2)
     e30:	10800d9c 	xori	r2,r2,54
     e34:	1009883a 	mov	r4,r2
     e38:	008001b4 	movhi	r2,6
     e3c:	10a83e04 	addi	r2,r2,-24328
     e40:	e0fffc17 	ldw	r3,-16(fp)
     e44:	10c5883a 	add	r2,r2,r3
     e48:	11000005 	stb	r4,0(r2)
	if (keylen > SHA512_BLOCK_LENGTH) {
		sha512_Raw(key, keylen, i_key_pad);
	} else {
		memcpy(i_key_pad, key, keylen);
	}
	for (int i = 0; i < SHA512_BLOCK_LENGTH; i++) {
     e4c:	e0bffc17 	ldw	r2,-16(fp)
     e50:	10800044 	addi	r2,r2,1
     e54:	e0bffc15 	stw	r2,-16(fp)
     e58:	e0bffc17 	ldw	r2,-16(fp)
     e5c:	10802010 	cmplti	r2,r2,128
     e60:	103fe31e 	bne	r2,zero,df0 <__alt_mem_epcs_flash_controller+0xfdff7df0>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
		i_key_pad[i] ^= 0x36;
	}
	sha512_Init(&(hctx->ctx));
     e64:	e0bffd17 	ldw	r2,-12(fp)
     e68:	10802004 	addi	r2,r2,128
     e6c:	1009883a 	mov	r4,r2
     e70:	00042740 	call	4274 <sha512_Init>
	sha512_Update(&(hctx->ctx), i_key_pad, SHA512_BLOCK_LENGTH);
     e74:	e0bffd17 	ldw	r2,-12(fp)
     e78:	10802004 	addi	r2,r2,128
     e7c:	01802004 	movi	r6,128
     e80:	014001b4 	movhi	r5,6
     e84:	29683e04 	addi	r5,r5,-24328
     e88:	1009883a 	mov	r4,r2
     e8c:	000521c0 	call	521c <sha512_Update>
	memzero(i_key_pad, sizeof(i_key_pad));
     e90:	01402004 	movi	r5,128
     e94:	010001b4 	movhi	r4,6
     e98:	21283e04 	addi	r4,r4,-24328
     e9c:	00013700 	call	1370 <memzero>
}
     ea0:	0001883a 	nop
     ea4:	e037883a 	mov	sp,fp
     ea8:	dfc00117 	ldw	ra,4(sp)
     eac:	df000017 	ldw	fp,0(sp)
     eb0:	dec00204 	addi	sp,sp,8
     eb4:	f800283a 	ret

00000eb8 <hmac_sha512_Update>:

void hmac_sha512_Update(HMAC_SHA512_CTX *hctx, const uint8_t *msg, const uint32_t msglen)
{
     eb8:	defffb04 	addi	sp,sp,-20
     ebc:	dfc00415 	stw	ra,16(sp)
     ec0:	df000315 	stw	fp,12(sp)
     ec4:	df000304 	addi	fp,sp,12
     ec8:	e13ffd15 	stw	r4,-12(fp)
     ecc:	e17ffe15 	stw	r5,-8(fp)
     ed0:	e1bfff15 	stw	r6,-4(fp)
	sha512_Update(&(hctx->ctx), msg, msglen);
     ed4:	e0bffd17 	ldw	r2,-12(fp)
     ed8:	10802004 	addi	r2,r2,128
     edc:	e1bfff17 	ldw	r6,-4(fp)
     ee0:	e17ffe17 	ldw	r5,-8(fp)
     ee4:	1009883a 	mov	r4,r2
     ee8:	000521c0 	call	521c <sha512_Update>
}
     eec:	0001883a 	nop
     ef0:	e037883a 	mov	sp,fp
     ef4:	dfc00117 	ldw	ra,4(sp)
     ef8:	df000017 	ldw	fp,0(sp)
     efc:	dec00204 	addi	sp,sp,8
     f00:	f800283a 	ret

00000f04 <hmac_sha512_Final>:

void hmac_sha512_Final(HMAC_SHA512_CTX *hctx, uint8_t *hmac)
{
     f04:	defffc04 	addi	sp,sp,-16
     f08:	dfc00315 	stw	ra,12(sp)
     f0c:	df000215 	stw	fp,8(sp)
     f10:	df000204 	addi	fp,sp,8
     f14:	e13ffe15 	stw	r4,-8(fp)
     f18:	e17fff15 	stw	r5,-4(fp)
	sha512_Final(&(hctx->ctx), hmac);
     f1c:	e0bffe17 	ldw	r2,-8(fp)
     f20:	10802004 	addi	r2,r2,128
     f24:	e17fff17 	ldw	r5,-4(fp)
     f28:	1009883a 	mov	r4,r2
     f2c:	0005f980 	call	5f98 <sha512_Final>
	sha512_Init(&(hctx->ctx));
     f30:	e0bffe17 	ldw	r2,-8(fp)
     f34:	10802004 	addi	r2,r2,128
     f38:	1009883a 	mov	r4,r2
     f3c:	00042740 	call	4274 <sha512_Init>
	sha512_Update(&(hctx->ctx), hctx->o_key_pad, SHA512_BLOCK_LENGTH);
     f40:	e0bffe17 	ldw	r2,-8(fp)
     f44:	10802004 	addi	r2,r2,128
     f48:	e0fffe17 	ldw	r3,-8(fp)
     f4c:	01802004 	movi	r6,128
     f50:	180b883a 	mov	r5,r3
     f54:	1009883a 	mov	r4,r2
     f58:	000521c0 	call	521c <sha512_Update>
	sha512_Update(&(hctx->ctx), hmac, SHA512_DIGEST_LENGTH);
     f5c:	e0bffe17 	ldw	r2,-8(fp)
     f60:	10802004 	addi	r2,r2,128
     f64:	01801004 	movi	r6,64
     f68:	e17fff17 	ldw	r5,-4(fp)
     f6c:	1009883a 	mov	r4,r2
     f70:	000521c0 	call	521c <sha512_Update>
	sha512_Final(&(hctx->ctx), hmac);
     f74:	e0bffe17 	ldw	r2,-8(fp)
     f78:	10802004 	addi	r2,r2,128
     f7c:	e17fff17 	ldw	r5,-4(fp)
     f80:	1009883a 	mov	r4,r2
     f84:	0005f980 	call	5f98 <sha512_Final>
	memzero(hctx, sizeof(HMAC_SHA512_CTX));
     f88:	01405404 	movi	r5,336
     f8c:	e13ffe17 	ldw	r4,-8(fp)
     f90:	00013700 	call	1370 <memzero>
}
     f94:	0001883a 	nop
     f98:	e037883a 	mov	sp,fp
     f9c:	dfc00117 	ldw	ra,4(sp)
     fa0:	df000017 	ldw	fp,0(sp)
     fa4:	dec00204 	addi	sp,sp,8
     fa8:	f800283a 	ret

00000fac <hmac_sha512>:

void hmac_sha512(const uint8_t *key, const uint32_t keylen, const uint8_t *msg, const uint32_t msglen, uint8_t *hmac)
{
     fac:	deffa604 	addi	sp,sp,-360
     fb0:	dfc05915 	stw	ra,356(sp)
     fb4:	df005815 	stw	fp,352(sp)
     fb8:	df005804 	addi	fp,sp,352
     fbc:	e13ffc15 	stw	r4,-16(fp)
     fc0:	e17ffd15 	stw	r5,-12(fp)
     fc4:	e1bffe15 	stw	r6,-8(fp)
     fc8:	e1ffff15 	stw	r7,-4(fp)
	HMAC_SHA512_CTX hctx;
	hmac_sha512_Init(&hctx, key, keylen);
     fcc:	e1bffd17 	ldw	r6,-12(fp)
     fd0:	e17ffc17 	ldw	r5,-16(fp)
     fd4:	e13fa804 	addi	r4,fp,-352
     fd8:	0000d800 	call	d80 <hmac_sha512_Init>
	hmac_sha512_Update(&hctx, msg, msglen);
     fdc:	e1bfff17 	ldw	r6,-4(fp)
     fe0:	e17ffe17 	ldw	r5,-8(fp)
     fe4:	e13fa804 	addi	r4,fp,-352
     fe8:	0000eb80 	call	eb8 <hmac_sha512_Update>
	hmac_sha512_Final(&hctx, hmac);
     fec:	e1400217 	ldw	r5,8(fp)
     ff0:	e13fa804 	addi	r4,fp,-352
     ff4:	0000f040 	call	f04 <hmac_sha512_Final>
}
     ff8:	0001883a 	nop
     ffc:	e037883a 	mov	sp,fp
    1000:	dfc00117 	ldw	ra,4(sp)
    1004:	df000017 	ldw	fp,0(sp)
    1008:	dec00204 	addi	sp,sp,8
    100c:	f800283a 	ret

00001010 <hmac_sha512_prepare>:

void hmac_sha512_prepare(const uint8_t *key, const uint32_t keylen, uint64_t *opad_digest, uint64_t *ipad_digest)
{
    1010:	deffde04 	addi	sp,sp,-136
    1014:	dfc02115 	stw	ra,132(sp)
    1018:	df002015 	stw	fp,128(sp)
    101c:	ddc01f15 	stw	r23,124(sp)
    1020:	dd801e15 	stw	r22,120(sp)
    1024:	dd401d15 	stw	r21,116(sp)
    1028:	dd001c15 	stw	r20,112(sp)
    102c:	dcc01b15 	stw	r19,108(sp)
    1030:	dc801a15 	stw	r18,104(sp)
    1034:	dc401915 	stw	r17,100(sp)
    1038:	dc001815 	stw	r16,96(sp)
    103c:	df002004 	addi	fp,sp,128
    1040:	e13fe615 	stw	r4,-104(fp)
    1044:	e17fe715 	stw	r5,-100(fp)
    1048:	e1bfe815 	stw	r6,-96(fp)
    104c:	e1ffe915 	stw	r7,-92(fp)
	static CONFIDENTIAL uint64_t key_pad[SHA512_BLOCK_LENGTH/sizeof(uint64_t)];

	memzero(key_pad, sizeof(key_pad));
    1050:	01402004 	movi	r5,128
    1054:	010001b4 	movhi	r4,6
    1058:	21285e04 	addi	r4,r4,-24200
    105c:	00013700 	call	1370 <memzero>
	if (keylen > SHA512_BLOCK_LENGTH) {
    1060:	e0bfe717 	ldw	r2,-100(fp)
    1064:	10802070 	cmpltui	r2,r2,129
    1068:	10000e1e 	bne	r2,zero,10a4 <hmac_sha512_prepare+0x94>
		static CONFIDENTIAL SHA512_CTX context;
		sha512_Init(&context);
    106c:	010001b4 	movhi	r4,6
    1070:	21287e04 	addi	r4,r4,-24072
    1074:	00042740 	call	4274 <sha512_Init>
		sha512_Update(&context, key, keylen);
    1078:	e1bfe717 	ldw	r6,-100(fp)
    107c:	e17fe617 	ldw	r5,-104(fp)
    1080:	010001b4 	movhi	r4,6
    1084:	21287e04 	addi	r4,r4,-24072
    1088:	000521c0 	call	521c <sha512_Update>
		sha512_Final(&context, (uint8_t*)key_pad);
    108c:	014001b4 	movhi	r5,6
    1090:	29685e04 	addi	r5,r5,-24200
    1094:	010001b4 	movhi	r4,6
    1098:	21287e04 	addi	r4,r4,-24072
    109c:	0005f980 	call	5f98 <sha512_Final>
    10a0:	00000506 	br	10b8 <hmac_sha512_prepare+0xa8>
	} else {
		memcpy(key_pad, key, keylen);
    10a4:	e1bfe717 	ldw	r6,-100(fp)
    10a8:	e17fe617 	ldw	r5,-104(fp)
    10ac:	010001b4 	movhi	r4,6
    10b0:	21285e04 	addi	r4,r4,-24200
    10b4:	00463980 	call	46398 <memcpy>
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    10b8:	e03fe015 	stw	zero,-128(fp)
    10bc:	00006b06 	br	126c <hmac_sha512_prepare+0x25c>
		uint64_t data;
#if BYTE_ORDER == LITTLE_ENDIAN
		REVERSE64(key_pad[i], data);
    10c0:	008001b4 	movhi	r2,6
    10c4:	10a85e04 	addi	r2,r2,-24200
    10c8:	e0ffe017 	ldw	r3,-128(fp)
    10cc:	180690fa 	slli	r3,r3,3
    10d0:	10c5883a 	add	r2,r2,r3
    10d4:	10c00017 	ldw	r3,0(r2)
    10d8:	e0ffe215 	stw	r3,-120(fp)
    10dc:	10800117 	ldw	r2,4(r2)
    10e0:	e0bfe315 	stw	r2,-116(fp)
    10e4:	e0bfe317 	ldw	r2,-116(fp)
    10e8:	e0bff615 	stw	r2,-40(fp)
    10ec:	e0ffe217 	ldw	r3,-120(fp)
    10f0:	e0fff715 	stw	r3,-36(fp)
    10f4:	e0bff617 	ldw	r2,-40(fp)
    10f8:	e0bfe215 	stw	r2,-120(fp)
    10fc:	e0fff717 	ldw	r3,-36(fp)
    1100:	e0ffe315 	stw	r3,-116(fp)
    1104:	e0ffe217 	ldw	r3,-120(fp)
    1108:	00bfc074 	movhi	r2,65281
    110c:	10bfc004 	addi	r2,r2,-256
    1110:	1884703a 	and	r2,r3,r2
    1114:	e0bfea15 	stw	r2,-88(fp)
    1118:	e0ffe317 	ldw	r3,-116(fp)
    111c:	00bfc074 	movhi	r2,65281
    1120:	10bfc004 	addi	r2,r2,-256
    1124:	1884703a 	and	r2,r3,r2
    1128:	e0bfeb15 	stw	r2,-84(fp)
    112c:	e0ffeb17 	ldw	r3,-84(fp)
    1130:	1804963a 	slli	r2,r3,24
    1134:	e0ffea17 	ldw	r3,-88(fp)
    1138:	1820d23a 	srli	r16,r3,8
    113c:	1420b03a 	or	r16,r2,r16
    1140:	e0bfeb17 	ldw	r2,-84(fp)
    1144:	1022d23a 	srli	r17,r2,8
    1148:	e0ffe217 	ldw	r3,-120(fp)
    114c:	00803ff4 	movhi	r2,255
    1150:	10803fc4 	addi	r2,r2,255
    1154:	1884703a 	and	r2,r3,r2
    1158:	e0bfec15 	stw	r2,-80(fp)
    115c:	e0ffe317 	ldw	r3,-116(fp)
    1160:	00803ff4 	movhi	r2,255
    1164:	10803fc4 	addi	r2,r2,255
    1168:	1884703a 	and	r2,r3,r2
    116c:	e0bfed15 	stw	r2,-76(fp)
    1170:	e0ffec17 	ldw	r3,-80(fp)
    1174:	1804d63a 	srli	r2,r3,24
    1178:	e0ffed17 	ldw	r3,-76(fp)
    117c:	1826923a 	slli	r19,r3,8
    1180:	14e6b03a 	or	r19,r2,r19
    1184:	e0bfec17 	ldw	r2,-80(fp)
    1188:	1024923a 	slli	r18,r2,8
    118c:	8484b03a 	or	r2,r16,r18
    1190:	e0bfe215 	stw	r2,-120(fp)
    1194:	8cc4b03a 	or	r2,r17,r19
    1198:	e0bfe315 	stw	r2,-116(fp)
    119c:	e0bfe217 	ldw	r2,-120(fp)
    11a0:	10bfffec 	andhi	r2,r2,65535
    11a4:	e0bfee15 	stw	r2,-72(fp)
    11a8:	e0bfe317 	ldw	r2,-116(fp)
    11ac:	10bfffec 	andhi	r2,r2,65535
    11b0:	e0bfef15 	stw	r2,-68(fp)
    11b4:	e0ffef17 	ldw	r3,-68(fp)
    11b8:	1804943a 	slli	r2,r3,16
    11bc:	e0ffee17 	ldw	r3,-72(fp)
    11c0:	1828d43a 	srli	r20,r3,16
    11c4:	1528b03a 	or	r20,r2,r20
    11c8:	e0bfef17 	ldw	r2,-68(fp)
    11cc:	102ad43a 	srli	r21,r2,16
    11d0:	e0bfe217 	ldw	r2,-120(fp)
    11d4:	10bfffcc 	andi	r2,r2,65535
    11d8:	e0bff015 	stw	r2,-64(fp)
    11dc:	e0bfe317 	ldw	r2,-116(fp)
    11e0:	10bfffcc 	andi	r2,r2,65535
    11e4:	e0bff115 	stw	r2,-60(fp)
    11e8:	e0fff017 	ldw	r3,-64(fp)
    11ec:	1804d43a 	srli	r2,r3,16
    11f0:	e0fff117 	ldw	r3,-60(fp)
    11f4:	182e943a 	slli	r23,r3,16
    11f8:	15eeb03a 	or	r23,r2,r23
    11fc:	e0bff017 	ldw	r2,-64(fp)
    1200:	102c943a 	slli	r22,r2,16
    1204:	a584b03a 	or	r2,r20,r22
    1208:	e0bfe415 	stw	r2,-112(fp)
    120c:	adc4b03a 	or	r2,r21,r23
    1210:	e0bfe515 	stw	r2,-108(fp)
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
    1214:	e0ffe417 	ldw	r3,-112(fp)
    1218:	00971734 	movhi	r2,23644
    121c:	10971704 	addi	r2,r2,23644
    1220:	1884f03a 	xor	r2,r3,r2
    1224:	e0bff215 	stw	r2,-56(fp)
    1228:	e0ffe517 	ldw	r3,-108(fp)
    122c:	00971734 	movhi	r2,23644
    1230:	10971704 	addi	r2,r2,23644
    1234:	1884f03a 	xor	r2,r3,r2
    1238:	e0bff315 	stw	r2,-52(fp)
    123c:	008001b4 	movhi	r2,6
    1240:	10a85e04 	addi	r2,r2,-24200
    1244:	e0ffe017 	ldw	r3,-128(fp)
    1248:	180690fa 	slli	r3,r3,3
    124c:	10c5883a 	add	r2,r2,r3
    1250:	e0fff217 	ldw	r3,-56(fp)
    1254:	10c00015 	stw	r3,0(r2)
    1258:	e0fff317 	ldw	r3,-52(fp)
    125c:	10c00115 	stw	r3,4(r2)
	} else {
		memcpy(key_pad, key, keylen);
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    1260:	e0bfe017 	ldw	r2,-128(fp)
    1264:	10800044 	addi	r2,r2,1
    1268:	e0bfe015 	stw	r2,-128(fp)
    126c:	e0bfe017 	ldw	r2,-128(fp)
    1270:	10800410 	cmplti	r2,r2,16
    1274:	103f921e 	bne	r2,zero,10c0 <__alt_mem_epcs_flash_controller+0xfdff80c0>
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
	}
	sha512_Transform(sha512_initial_hash_value, key_pad, opad_digest);
    1278:	e1bfe817 	ldw	r6,-96(fp)
    127c:	014001b4 	movhi	r5,6
    1280:	29685e04 	addi	r5,r5,-24200
    1284:	01000174 	movhi	r4,5
    1288:	21081404 	addi	r4,r4,8272
    128c:	00042fc0 	call	42fc <sha512_Transform>

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    1290:	e03fe115 	stw	zero,-124(fp)
    1294:	00001b06 	br	1304 <hmac_sha512_prepare+0x2f4>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c5c5c5c5c ^ 0x3636363636363636;
    1298:	008001b4 	movhi	r2,6
    129c:	10a85e04 	addi	r2,r2,-24200
    12a0:	e0ffe117 	ldw	r3,-124(fp)
    12a4:	180690fa 	slli	r3,r3,3
    12a8:	10c9883a 	add	r4,r2,r3
    12ac:	20800017 	ldw	r2,0(r4)
    12b0:	20c00117 	ldw	r3,4(r4)
    12b4:	011a9ab4 	movhi	r4,27242
    12b8:	211a9a84 	addi	r4,r4,27242
    12bc:	1108f03a 	xor	r4,r2,r4
    12c0:	e13ff415 	stw	r4,-48(fp)
    12c4:	011a9ab4 	movhi	r4,27242
    12c8:	211a9a84 	addi	r4,r4,27242
    12cc:	1908f03a 	xor	r4,r3,r4
    12d0:	e13ff515 	stw	r4,-44(fp)
    12d4:	008001b4 	movhi	r2,6
    12d8:	10a85e04 	addi	r2,r2,-24200
    12dc:	e0ffe117 	ldw	r3,-124(fp)
    12e0:	180690fa 	slli	r3,r3,3
    12e4:	10c5883a 	add	r2,r2,r3
    12e8:	e0fff417 	ldw	r3,-48(fp)
    12ec:	10c00015 	stw	r3,0(r2)
    12f0:	e0fff517 	ldw	r3,-44(fp)
    12f4:	10c00115 	stw	r3,4(r2)
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
	}
	sha512_Transform(sha512_initial_hash_value, key_pad, opad_digest);

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    12f8:	e0bfe117 	ldw	r2,-124(fp)
    12fc:	10800044 	addi	r2,r2,1
    1300:	e0bfe115 	stw	r2,-124(fp)
    1304:	e0bfe117 	ldw	r2,-124(fp)
    1308:	10800410 	cmplti	r2,r2,16
    130c:	103fe21e 	bne	r2,zero,1298 <__alt_mem_epcs_flash_controller+0xfdff8298>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c5c5c5c5c ^ 0x3636363636363636;
	}
	sha512_Transform(sha512_initial_hash_value, key_pad, ipad_digest);
    1310:	e1bfe917 	ldw	r6,-92(fp)
    1314:	014001b4 	movhi	r5,6
    1318:	29685e04 	addi	r5,r5,-24200
    131c:	01000174 	movhi	r4,5
    1320:	21081404 	addi	r4,r4,8272
    1324:	00042fc0 	call	42fc <sha512_Transform>
	memzero(key_pad, sizeof(key_pad));
    1328:	01402004 	movi	r5,128
    132c:	010001b4 	movhi	r4,6
    1330:	21285e04 	addi	r4,r4,-24200
    1334:	00013700 	call	1370 <memzero>
}
    1338:	0001883a 	nop
    133c:	e6fff804 	addi	sp,fp,-32
    1340:	dfc00917 	ldw	ra,36(sp)
    1344:	df000817 	ldw	fp,32(sp)
    1348:	ddc00717 	ldw	r23,28(sp)
    134c:	dd800617 	ldw	r22,24(sp)
    1350:	dd400517 	ldw	r21,20(sp)
    1354:	dd000417 	ldw	r20,16(sp)
    1358:	dcc00317 	ldw	r19,12(sp)
    135c:	dc800217 	ldw	r18,8(sp)
    1360:	dc400117 	ldw	r17,4(sp)
    1364:	dc000017 	ldw	r16,0(sp)
    1368:	dec00a04 	addi	sp,sp,40
    136c:	f800283a 	ret

00001370 <memzero>:
#include <string.h>

void memzero(void *s, size_t n)
{
    1370:	defffc04 	addi	sp,sp,-16
    1374:	dfc00315 	stw	ra,12(sp)
    1378:	df000215 	stw	fp,8(sp)
    137c:	df000204 	addi	fp,sp,8
    1380:	e13ffe15 	stw	r4,-8(fp)
    1384:	e17fff15 	stw	r5,-4(fp)
	memset(s, 0, n);
    1388:	e1bfff17 	ldw	r6,-4(fp)
    138c:	000b883a 	mov	r5,zero
    1390:	e13ffe17 	ldw	r4,-8(fp)
    1394:	00464200 	call	46420 <memset>
}
    1398:	0001883a 	nop
    139c:	e037883a 	mov	sp,fp
    13a0:	dfc00117 	ldw	ra,4(sp)
    13a4:	df000017 	ldw	fp,0(sp)
    13a8:	dec00204 	addi	sp,sp,8
    13ac:	f800283a 	ret

000013b0 <pbkdf2_hmac_sha256_Init>:
#include "..\Include\hmac.h"
#include "..\Include\sha2.h"
#include "..\Include\memzero.h"

void pbkdf2_hmac_sha256_Init(PBKDF2_HMAC_SHA256_CTX *pctx, const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t blocknr)
{
    13b0:	deffdd04 	addi	sp,sp,-140
    13b4:	dfc02215 	stw	ra,136(sp)
    13b8:	df002115 	stw	fp,132(sp)
    13bc:	df002104 	addi	fp,sp,132
    13c0:	e13ffc15 	stw	r4,-16(fp)
    13c4:	e17ffd15 	stw	r5,-12(fp)
    13c8:	e1bffe15 	stw	r6,-8(fp)
    13cc:	e1ffff15 	stw	r7,-4(fp)
	SHA256_CTX ctx;
#if BYTE_ORDER == LITTLE_ENDIAN
	REVERSE32(blocknr, blocknr);
    13d0:	e0800317 	ldw	r2,12(fp)
    13d4:	e0bfe015 	stw	r2,-128(fp)
    13d8:	e0bfe017 	ldw	r2,-128(fp)
    13dc:	1004143a 	roli	r2,r2,16
    13e0:	e0bfe015 	stw	r2,-128(fp)
    13e4:	e0ffe017 	ldw	r3,-128(fp)
    13e8:	00bfc074 	movhi	r2,65281
    13ec:	10bfc004 	addi	r2,r2,-256
    13f0:	1884703a 	and	r2,r3,r2
    13f4:	1006d23a 	srli	r3,r2,8
    13f8:	e13fe017 	ldw	r4,-128(fp)
    13fc:	00803ff4 	movhi	r2,255
    1400:	10803fc4 	addi	r2,r2,255
    1404:	2084703a 	and	r2,r4,r2
    1408:	1004923a 	slli	r2,r2,8
    140c:	1884b03a 	or	r2,r3,r2
    1410:	e0800315 	stw	r2,12(fp)
#endif

	hmac_sha256_prepare(pass, passlen, pctx->odig, pctx->idig);
    1414:	e0fffe17 	ldw	r3,-8(fp)
    1418:	e13ffc17 	ldw	r4,-16(fp)
    141c:	e0bffc17 	ldw	r2,-16(fp)
    1420:	10800804 	addi	r2,r2,32
    1424:	100f883a 	mov	r7,r2
    1428:	200d883a 	mov	r6,r4
    142c:	180b883a 	mov	r5,r3
    1430:	e13ffd17 	ldw	r4,-12(fp)
    1434:	0000b940 	call	b94 <hmac_sha256_prepare>
	memset(pctx->g, 0, sizeof(pctx->g));
    1438:	e0bffc17 	ldw	r2,-16(fp)
    143c:	10801804 	addi	r2,r2,96
    1440:	01801004 	movi	r6,64
    1444:	000b883a 	mov	r5,zero
    1448:	1009883a 	mov	r4,r2
    144c:	00464200 	call	46420 <memset>
	pctx->g[8] = 0x80000000;
    1450:	e0bffc17 	ldw	r2,-16(fp)
    1454:	00e00034 	movhi	r3,32768
    1458:	10c02015 	stw	r3,128(r2)
	pctx->g[15] = (SHA256_BLOCK_LENGTH + SHA256_DIGEST_LENGTH) * 8;
    145c:	e0bffc17 	ldw	r2,-16(fp)
    1460:	00c0c004 	movi	r3,768
    1464:	10c02715 	stw	r3,156(r2)

	memcpy (ctx.state, pctx->idig, sizeof(pctx->idig));
    1468:	e0bffc17 	ldw	r2,-16(fp)
    146c:	10c00804 	addi	r3,r2,32
    1470:	e0bfe204 	addi	r2,fp,-120
    1474:	01800804 	movi	r6,32
    1478:	180b883a 	mov	r5,r3
    147c:	1009883a 	mov	r4,r2
    1480:	00463980 	call	46398 <memcpy>
	ctx.bitcount = SHA256_BLOCK_LENGTH * 8;
    1484:	00808004 	movi	r2,512
    1488:	e0bfea15 	stw	r2,-88(fp)
    148c:	e03feb15 	stw	zero,-84(fp)
	sha256_Update(&ctx, salt, saltlen);
    1490:	e0c00217 	ldw	r3,8(fp)
    1494:	e0bfe204 	addi	r2,fp,-120
    1498:	180d883a 	mov	r6,r3
    149c:	e17fff17 	ldw	r5,-4(fp)
    14a0:	1009883a 	mov	r4,r2
    14a4:	00039880 	call	3988 <sha256_Update>
	sha256_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
    14a8:	e0c00304 	addi	r3,fp,12
    14ac:	e0bfe204 	addi	r2,fp,-120
    14b0:	01800104 	movi	r6,4
    14b4:	180b883a 	mov	r5,r3
    14b8:	1009883a 	mov	r4,r2
    14bc:	00039880 	call	3988 <sha256_Update>
	sha256_Final(&ctx, (uint8_t*)pctx->g);
    14c0:	e0bffc17 	ldw	r2,-16(fp)
    14c4:	10c01804 	addi	r3,r2,96
    14c8:	e0bfe204 	addi	r2,fp,-120
    14cc:	180b883a 	mov	r5,r3
    14d0:	1009883a 	mov	r4,r2
    14d4:	0003d900 	call	3d90 <sha256_Final>
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH / sizeof(uint32_t); k++) {
    14d8:	e03fdf15 	stw	zero,-132(fp)
    14dc:	00002006 	br	1560 <pbkdf2_hmac_sha256_Init+0x1b0>
		REVERSE32(pctx->g[k], pctx->g[k]);
    14e0:	e0fffc17 	ldw	r3,-16(fp)
    14e4:	e0bfdf17 	ldw	r2,-132(fp)
    14e8:	10800604 	addi	r2,r2,24
    14ec:	1085883a 	add	r2,r2,r2
    14f0:	1085883a 	add	r2,r2,r2
    14f4:	1885883a 	add	r2,r3,r2
    14f8:	10800017 	ldw	r2,0(r2)
    14fc:	e0bfe115 	stw	r2,-124(fp)
    1500:	e0bfe117 	ldw	r2,-124(fp)
    1504:	1004143a 	roli	r2,r2,16
    1508:	e0bfe115 	stw	r2,-124(fp)
    150c:	e0ffe117 	ldw	r3,-124(fp)
    1510:	00bfc074 	movhi	r2,65281
    1514:	10bfc004 	addi	r2,r2,-256
    1518:	1884703a 	and	r2,r3,r2
    151c:	1006d23a 	srli	r3,r2,8
    1520:	e13fe117 	ldw	r4,-124(fp)
    1524:	00803ff4 	movhi	r2,255
    1528:	10803fc4 	addi	r2,r2,255
    152c:	2084703a 	and	r2,r4,r2
    1530:	1004923a 	slli	r2,r2,8
    1534:	1886b03a 	or	r3,r3,r2
    1538:	e13ffc17 	ldw	r4,-16(fp)
    153c:	e0bfdf17 	ldw	r2,-132(fp)
    1540:	10800604 	addi	r2,r2,24
    1544:	1085883a 	add	r2,r2,r2
    1548:	1085883a 	add	r2,r2,r2
    154c:	2085883a 	add	r2,r4,r2
    1550:	10c00015 	stw	r3,0(r2)
	ctx.bitcount = SHA256_BLOCK_LENGTH * 8;
	sha256_Update(&ctx, salt, saltlen);
	sha256_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
	sha256_Final(&ctx, (uint8_t*)pctx->g);
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH / sizeof(uint32_t); k++) {
    1554:	e0bfdf17 	ldw	r2,-132(fp)
    1558:	10800044 	addi	r2,r2,1
    155c:	e0bfdf15 	stw	r2,-132(fp)
    1560:	e0bfdf17 	ldw	r2,-132(fp)
    1564:	10800230 	cmpltui	r2,r2,8
    1568:	103fdd1e 	bne	r2,zero,14e0 <__alt_mem_epcs_flash_controller+0xfdff84e0>
		REVERSE32(pctx->g[k], pctx->g[k]);
	}
#endif
	sha256_Transform(pctx->odig, pctx->g, pctx->g);
    156c:	e0fffc17 	ldw	r3,-16(fp)
    1570:	e0bffc17 	ldw	r2,-16(fp)
    1574:	11001804 	addi	r4,r2,96
    1578:	e0bffc17 	ldw	r2,-16(fp)
    157c:	10801804 	addi	r2,r2,96
    1580:	100d883a 	mov	r6,r2
    1584:	200b883a 	mov	r5,r4
    1588:	1809883a 	mov	r4,r3
    158c:	00033c00 	call	33c0 <sha256_Transform>
	memcpy(pctx->f, pctx->g, SHA256_DIGEST_LENGTH);
    1590:	e0bffc17 	ldw	r2,-16(fp)
    1594:	10c01004 	addi	r3,r2,64
    1598:	e0bffc17 	ldw	r2,-16(fp)
    159c:	10801804 	addi	r2,r2,96
    15a0:	01800804 	movi	r6,32
    15a4:	100b883a 	mov	r5,r2
    15a8:	1809883a 	mov	r4,r3
    15ac:	00463980 	call	46398 <memcpy>
	pctx->first = 1;
    15b0:	e0bffc17 	ldw	r2,-16(fp)
    15b4:	00c00044 	movi	r3,1
    15b8:	10c02805 	stb	r3,160(r2)
}
    15bc:	0001883a 	nop
    15c0:	e037883a 	mov	sp,fp
    15c4:	dfc00117 	ldw	ra,4(sp)
    15c8:	df000017 	ldw	fp,0(sp)
    15cc:	dec00204 	addi	sp,sp,8
    15d0:	f800283a 	ret

000015d4 <pbkdf2_hmac_sha256_Update>:

void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
    15d4:	defffa04 	addi	sp,sp,-24
    15d8:	dfc00515 	stw	ra,20(sp)
    15dc:	df000415 	stw	fp,16(sp)
    15e0:	df000404 	addi	fp,sp,16
    15e4:	e13ffe15 	stw	r4,-8(fp)
    15e8:	e17fff15 	stw	r5,-4(fp)
	for (uint32_t i = pctx->first; i < iterations; i++) {
    15ec:	e0bffe17 	ldw	r2,-8(fp)
    15f0:	10802803 	ldbu	r2,160(r2)
    15f4:	10803fcc 	andi	r2,r2,255
    15f8:	1080201c 	xori	r2,r2,128
    15fc:	10bfe004 	addi	r2,r2,-128
    1600:	e0bffc15 	stw	r2,-16(fp)
    1604:	00003406 	br	16d8 <pbkdf2_hmac_sha256_Update+0x104>
		sha256_Transform(pctx->idig, pctx->g, pctx->g);
    1608:	e0bffe17 	ldw	r2,-8(fp)
    160c:	10c00804 	addi	r3,r2,32
    1610:	e0bffe17 	ldw	r2,-8(fp)
    1614:	11001804 	addi	r4,r2,96
    1618:	e0bffe17 	ldw	r2,-8(fp)
    161c:	10801804 	addi	r2,r2,96
    1620:	100d883a 	mov	r6,r2
    1624:	200b883a 	mov	r5,r4
    1628:	1809883a 	mov	r4,r3
    162c:	00033c00 	call	33c0 <sha256_Transform>
		sha256_Transform(pctx->odig, pctx->g, pctx->g);
    1630:	e0fffe17 	ldw	r3,-8(fp)
    1634:	e0bffe17 	ldw	r2,-8(fp)
    1638:	11001804 	addi	r4,r2,96
    163c:	e0bffe17 	ldw	r2,-8(fp)
    1640:	10801804 	addi	r2,r2,96
    1644:	100d883a 	mov	r6,r2
    1648:	200b883a 	mov	r5,r4
    164c:	1809883a 	mov	r4,r3
    1650:	00033c00 	call	33c0 <sha256_Transform>
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
    1654:	e03ffd15 	stw	zero,-12(fp)
    1658:	00001906 	br	16c0 <pbkdf2_hmac_sha256_Update+0xec>
			pctx->f[j] ^= pctx->g[j];
    165c:	e0fffe17 	ldw	r3,-8(fp)
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	10800404 	addi	r2,r2,16
    1668:	1085883a 	add	r2,r2,r2
    166c:	1085883a 	add	r2,r2,r2
    1670:	1885883a 	add	r2,r3,r2
    1674:	10c00017 	ldw	r3,0(r2)
    1678:	e13ffe17 	ldw	r4,-8(fp)
    167c:	e0bffd17 	ldw	r2,-12(fp)
    1680:	10800604 	addi	r2,r2,24
    1684:	1085883a 	add	r2,r2,r2
    1688:	1085883a 	add	r2,r2,r2
    168c:	2085883a 	add	r2,r4,r2
    1690:	10800017 	ldw	r2,0(r2)
    1694:	1886f03a 	xor	r3,r3,r2
    1698:	e13ffe17 	ldw	r4,-8(fp)
    169c:	e0bffd17 	ldw	r2,-12(fp)
    16a0:	10800404 	addi	r2,r2,16
    16a4:	1085883a 	add	r2,r2,r2
    16a8:	1085883a 	add	r2,r2,r2
    16ac:	2085883a 	add	r2,r4,r2
    16b0:	10c00015 	stw	r3,0(r2)
void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
		sha256_Transform(pctx->idig, pctx->g, pctx->g);
		sha256_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
    16b4:	e0bffd17 	ldw	r2,-12(fp)
    16b8:	10800044 	addi	r2,r2,1
    16bc:	e0bffd15 	stw	r2,-12(fp)
    16c0:	e0bffd17 	ldw	r2,-12(fp)
    16c4:	10800230 	cmpltui	r2,r2,8
    16c8:	103fe41e 	bne	r2,zero,165c <__alt_mem_epcs_flash_controller+0xfdff865c>
	pctx->first = 1;
}

void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
    16cc:	e0bffc17 	ldw	r2,-16(fp)
    16d0:	10800044 	addi	r2,r2,1
    16d4:	e0bffc15 	stw	r2,-16(fp)
    16d8:	e0fffc17 	ldw	r3,-16(fp)
    16dc:	e0bfff17 	ldw	r2,-4(fp)
    16e0:	18bfc936 	bltu	r3,r2,1608 <__alt_mem_epcs_flash_controller+0xfdff8608>
		sha256_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
			pctx->f[j] ^= pctx->g[j];
		}
	}
	pctx->first = 0;
    16e4:	e0bffe17 	ldw	r2,-8(fp)
    16e8:	10002805 	stb	zero,160(r2)
}
    16ec:	0001883a 	nop
    16f0:	e037883a 	mov	sp,fp
    16f4:	dfc00117 	ldw	ra,4(sp)
    16f8:	df000017 	ldw	fp,0(sp)
    16fc:	dec00204 	addi	sp,sp,8
    1700:	f800283a 	ret

00001704 <pbkdf2_hmac_sha256_Final>:

void pbkdf2_hmac_sha256_Final(PBKDF2_HMAC_SHA256_CTX *pctx, uint8_t *key)
{
    1704:	defffa04 	addi	sp,sp,-24
    1708:	dfc00515 	stw	ra,20(sp)
    170c:	df000415 	stw	fp,16(sp)
    1710:	df000404 	addi	fp,sp,16
    1714:	e13ffe15 	stw	r4,-8(fp)
    1718:	e17fff15 	stw	r5,-4(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH/sizeof(uint32_t); k++) {
    171c:	e03ffc15 	stw	zero,-16(fp)
    1720:	00002006 	br	17a4 <pbkdf2_hmac_sha256_Final+0xa0>
		REVERSE32(pctx->f[k], pctx->f[k]);
    1724:	e0fffe17 	ldw	r3,-8(fp)
    1728:	e0bffc17 	ldw	r2,-16(fp)
    172c:	10800404 	addi	r2,r2,16
    1730:	1085883a 	add	r2,r2,r2
    1734:	1085883a 	add	r2,r2,r2
    1738:	1885883a 	add	r2,r3,r2
    173c:	10800017 	ldw	r2,0(r2)
    1740:	e0bffd15 	stw	r2,-12(fp)
    1744:	e0bffd17 	ldw	r2,-12(fp)
    1748:	1004143a 	roli	r2,r2,16
    174c:	e0bffd15 	stw	r2,-12(fp)
    1750:	e0fffd17 	ldw	r3,-12(fp)
    1754:	00bfc074 	movhi	r2,65281
    1758:	10bfc004 	addi	r2,r2,-256
    175c:	1884703a 	and	r2,r3,r2
    1760:	1006d23a 	srli	r3,r2,8
    1764:	e13ffd17 	ldw	r4,-12(fp)
    1768:	00803ff4 	movhi	r2,255
    176c:	10803fc4 	addi	r2,r2,255
    1770:	2084703a 	and	r2,r4,r2
    1774:	1004923a 	slli	r2,r2,8
    1778:	1886b03a 	or	r3,r3,r2
    177c:	e13ffe17 	ldw	r4,-8(fp)
    1780:	e0bffc17 	ldw	r2,-16(fp)
    1784:	10800404 	addi	r2,r2,16
    1788:	1085883a 	add	r2,r2,r2
    178c:	1085883a 	add	r2,r2,r2
    1790:	2085883a 	add	r2,r4,r2
    1794:	10c00015 	stw	r3,0(r2)
}

void pbkdf2_hmac_sha256_Final(PBKDF2_HMAC_SHA256_CTX *pctx, uint8_t *key)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH/sizeof(uint32_t); k++) {
    1798:	e0bffc17 	ldw	r2,-16(fp)
    179c:	10800044 	addi	r2,r2,1
    17a0:	e0bffc15 	stw	r2,-16(fp)
    17a4:	e0bffc17 	ldw	r2,-16(fp)
    17a8:	10800230 	cmpltui	r2,r2,8
    17ac:	103fdd1e 	bne	r2,zero,1724 <__alt_mem_epcs_flash_controller+0xfdff8724>
		REVERSE32(pctx->f[k], pctx->f[k]);
	}
#endif
	memcpy(key, pctx->f, SHA256_DIGEST_LENGTH);
    17b0:	e0bffe17 	ldw	r2,-8(fp)
    17b4:	10801004 	addi	r2,r2,64
    17b8:	01800804 	movi	r6,32
    17bc:	100b883a 	mov	r5,r2
    17c0:	e13fff17 	ldw	r4,-4(fp)
    17c4:	00463980 	call	46398 <memcpy>
	memzero(pctx, sizeof(PBKDF2_HMAC_SHA256_CTX));
    17c8:	01402904 	movi	r5,164
    17cc:	e13ffe17 	ldw	r4,-8(fp)
    17d0:	00013700 	call	1370 <memzero>
}
    17d4:	0001883a 	nop
    17d8:	e037883a 	mov	sp,fp
    17dc:	dfc00117 	ldw	ra,4(sp)
    17e0:	df000017 	ldw	fp,0(sp)
    17e4:	dec00204 	addi	sp,sp,8
    17e8:	f800283a 	ret

000017ec <pbkdf2_hmac_sha256>:

void pbkdf2_hmac_sha256(const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t iterations, uint8_t *key, int keylen)
{
    17ec:	deffc304 	addi	sp,sp,-244
    17f0:	dfc03c15 	stw	ra,240(sp)
    17f4:	df003b15 	stw	fp,236(sp)
    17f8:	df003b04 	addi	fp,sp,236
    17fc:	e13ffc15 	stw	r4,-16(fp)
    1800:	e17ffd15 	stw	r5,-12(fp)
    1804:	e1bffe15 	stw	r6,-8(fp)
    1808:	e1ffff15 	stw	r7,-4(fp)
	uint32_t last_block_size = keylen % SHA256_DIGEST_LENGTH;
    180c:	e0c00417 	ldw	r3,16(fp)
    1810:	00a00034 	movhi	r2,32768
    1814:	108007c4 	addi	r2,r2,31
    1818:	1884703a 	and	r2,r3,r2
    181c:	1000040e 	bge	r2,zero,1830 <pbkdf2_hmac_sha256+0x44>
    1820:	10bfffc4 	addi	r2,r2,-1
    1824:	00fff804 	movi	r3,-32
    1828:	10c4b03a 	or	r2,r2,r3
    182c:	10800044 	addi	r2,r2,1
    1830:	e0bfc715 	stw	r2,-228(fp)
	uint32_t blocks_count = keylen / SHA256_DIGEST_LENGTH;
    1834:	e0800417 	ldw	r2,16(fp)
    1838:	1000010e 	bge	r2,zero,1840 <pbkdf2_hmac_sha256+0x54>
    183c:	108007c4 	addi	r2,r2,31
    1840:	1005d17a 	srai	r2,r2,5
    1844:	e0bfc815 	stw	r2,-224(fp)
	if (last_block_size) {
    1848:	e0bfc717 	ldw	r2,-228(fp)
    184c:	10000426 	beq	r2,zero,1860 <pbkdf2_hmac_sha256+0x74>
		blocks_count++;
    1850:	e0bfc817 	ldw	r2,-224(fp)
    1854:	10800044 	addi	r2,r2,1
    1858:	e0bfc815 	stw	r2,-224(fp)
    185c:	00000206 	br	1868 <pbkdf2_hmac_sha256+0x7c>
	} else {
		last_block_size = SHA256_DIGEST_LENGTH;
    1860:	00800804 	movi	r2,32
    1864:	e0bfc715 	stw	r2,-228(fp)
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    1868:	00800044 	movi	r2,1
    186c:	e0bfc915 	stw	r2,-220(fp)
    1870:	00003106 	br	1938 <pbkdf2_hmac_sha256+0x14c>
		PBKDF2_HMAC_SHA256_CTX pctx;
		pbkdf2_hmac_sha256_Init(&pctx, pass, passlen, salt, saltlen, blocknr);
    1874:	e0ffcb04 	addi	r3,fp,-212
    1878:	e0bfc917 	ldw	r2,-220(fp)
    187c:	d8800115 	stw	r2,4(sp)
    1880:	e0bfff17 	ldw	r2,-4(fp)
    1884:	d8800015 	stw	r2,0(sp)
    1888:	e1fffe17 	ldw	r7,-8(fp)
    188c:	e1bffd17 	ldw	r6,-12(fp)
    1890:	e17ffc17 	ldw	r5,-16(fp)
    1894:	1809883a 	mov	r4,r3
    1898:	00013b00 	call	13b0 <pbkdf2_hmac_sha256_Init>
		pbkdf2_hmac_sha256_Update(&pctx, iterations);
    189c:	e0bfcb04 	addi	r2,fp,-212
    18a0:	e1400217 	ldw	r5,8(fp)
    18a4:	1009883a 	mov	r4,r2
    18a8:	00015d40 	call	15d4 <pbkdf2_hmac_sha256_Update>
		uint8_t digest[SHA256_DIGEST_LENGTH];
		pbkdf2_hmac_sha256_Final(&pctx, digest);
    18ac:	e0fff404 	addi	r3,fp,-48
    18b0:	e0bfcb04 	addi	r2,fp,-212
    18b4:	180b883a 	mov	r5,r3
    18b8:	1009883a 	mov	r4,r2
    18bc:	00017040 	call	1704 <pbkdf2_hmac_sha256_Final>
		uint32_t key_offset = (blocknr - 1) * SHA256_DIGEST_LENGTH;
    18c0:	e0ffc917 	ldw	r3,-220(fp)
    18c4:	00820034 	movhi	r2,2048
    18c8:	10bfffc4 	addi	r2,r2,-1
    18cc:	1885883a 	add	r2,r3,r2
    18d0:	1004917a 	slli	r2,r2,5
    18d4:	e0bfca15 	stw	r2,-216(fp)
		if (blocknr < blocks_count) {
    18d8:	e0ffc917 	ldw	r3,-220(fp)
    18dc:	e0bfc817 	ldw	r2,-224(fp)
    18e0:	18800a2e 	bgeu	r3,r2,190c <pbkdf2_hmac_sha256+0x120>
			memcpy(key + key_offset, digest, SHA256_DIGEST_LENGTH);
    18e4:	e0c00317 	ldw	r3,12(fp)
    18e8:	e0bfca17 	ldw	r2,-216(fp)
    18ec:	1885883a 	add	r2,r3,r2
    18f0:	1009883a 	mov	r4,r2
    18f4:	e0bff404 	addi	r2,fp,-48
    18f8:	00c00804 	movi	r3,32
    18fc:	180d883a 	mov	r6,r3
    1900:	100b883a 	mov	r5,r2
    1904:	00463980 	call	46398 <memcpy>
    1908:	00000806 	br	192c <pbkdf2_hmac_sha256+0x140>
		} else {
			memcpy(key + key_offset, digest, last_block_size);
    190c:	e0c00317 	ldw	r3,12(fp)
    1910:	e0bfca17 	ldw	r2,-216(fp)
    1914:	1885883a 	add	r2,r3,r2
    1918:	e0fff404 	addi	r3,fp,-48
    191c:	e1bfc717 	ldw	r6,-228(fp)
    1920:	180b883a 	mov	r5,r3
    1924:	1009883a 	mov	r4,r2
    1928:	00463980 	call	46398 <memcpy>
	if (last_block_size) {
		blocks_count++;
	} else {
		last_block_size = SHA256_DIGEST_LENGTH;
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    192c:	e0bfc917 	ldw	r2,-220(fp)
    1930:	10800044 	addi	r2,r2,1
    1934:	e0bfc915 	stw	r2,-220(fp)
    1938:	e0bfc917 	ldw	r2,-220(fp)
    193c:	e0ffc817 	ldw	r3,-224(fp)
    1940:	18bfcc2e 	bgeu	r3,r2,1874 <__alt_mem_epcs_flash_controller+0xfdff8874>
			memcpy(key + key_offset, digest, SHA256_DIGEST_LENGTH);
		} else {
			memcpy(key + key_offset, digest, last_block_size);
		}
	}
}
    1944:	0001883a 	nop
    1948:	e037883a 	mov	sp,fp
    194c:	dfc00117 	ldw	ra,4(sp)
    1950:	df000017 	ldw	fp,0(sp)
    1954:	dec00204 	addi	sp,sp,8
    1958:	f800283a 	ret

0000195c <pbkdf2_hmac_sha512_Init>:

void pbkdf2_hmac_sha512_Init(PBKDF2_HMAC_SHA512_CTX *pctx, const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t blocknr)
{
    195c:	deffae04 	addi	sp,sp,-328
    1960:	dfc05115 	stw	ra,324(sp)
    1964:	df005015 	stw	fp,320(sp)
    1968:	ddc04f15 	stw	r23,316(sp)
    196c:	dd804e15 	stw	r22,312(sp)
    1970:	dd404d15 	stw	r21,308(sp)
    1974:	dd004c15 	stw	r20,304(sp)
    1978:	dcc04b15 	stw	r19,300(sp)
    197c:	dc804a15 	stw	r18,296(sp)
    1980:	dc404915 	stw	r17,292(sp)
    1984:	dc004815 	stw	r16,288(sp)
    1988:	df005004 	addi	fp,sp,320
    198c:	e13fe815 	stw	r4,-96(fp)
    1990:	e17fe915 	stw	r5,-92(fp)
    1994:	e1bfea15 	stw	r6,-88(fp)
    1998:	e1ffeb15 	stw	r7,-84(fp)
	SHA512_CTX ctx;
#if BYTE_ORDER == LITTLE_ENDIAN
	REVERSE32(blocknr, blocknr);
    199c:	e0800317 	ldw	r2,12(fp)
    19a0:	e0bfb115 	stw	r2,-316(fp)
    19a4:	e0bfb117 	ldw	r2,-316(fp)
    19a8:	1004143a 	roli	r2,r2,16
    19ac:	e0bfb115 	stw	r2,-316(fp)
    19b0:	e0ffb117 	ldw	r3,-316(fp)
    19b4:	00bfc074 	movhi	r2,65281
    19b8:	10bfc004 	addi	r2,r2,-256
    19bc:	1884703a 	and	r2,r3,r2
    19c0:	1006d23a 	srli	r3,r2,8
    19c4:	e13fb117 	ldw	r4,-316(fp)
    19c8:	00803ff4 	movhi	r2,255
    19cc:	10803fc4 	addi	r2,r2,255
    19d0:	2084703a 	and	r2,r4,r2
    19d4:	1004923a 	slli	r2,r2,8
    19d8:	1884b03a 	or	r2,r3,r2
    19dc:	e0800315 	stw	r2,12(fp)
#endif

	hmac_sha512_prepare(pass, passlen, pctx->odig, pctx->idig);
    19e0:	e0ffea17 	ldw	r3,-88(fp)
    19e4:	e13fe817 	ldw	r4,-96(fp)
    19e8:	e0bfe817 	ldw	r2,-96(fp)
    19ec:	10801004 	addi	r2,r2,64
    19f0:	100f883a 	mov	r7,r2
    19f4:	200d883a 	mov	r6,r4
    19f8:	180b883a 	mov	r5,r3
    19fc:	e13fe917 	ldw	r4,-92(fp)
    1a00:	00010100 	call	1010 <hmac_sha512_prepare>
	memset(pctx->g, 0, sizeof(pctx->g));
    1a04:	e0bfe817 	ldw	r2,-96(fp)
    1a08:	10803004 	addi	r2,r2,192
    1a0c:	01802004 	movi	r6,128
    1a10:	000b883a 	mov	r5,zero
    1a14:	1009883a 	mov	r4,r2
    1a18:	00464200 	call	46420 <memset>
	pctx->g[8] = 0x8000000000000000;
    1a1c:	e0bfe817 	ldw	r2,-96(fp)
    1a20:	10004015 	stw	zero,256(r2)
    1a24:	00e00034 	movhi	r3,32768
    1a28:	10c04115 	stw	r3,260(r2)
	pctx->g[15] = (SHA512_BLOCK_LENGTH + SHA512_DIGEST_LENGTH) * 8;
    1a2c:	e0bfe817 	ldw	r2,-96(fp)
    1a30:	00c18004 	movi	r3,1536
    1a34:	10c04e15 	stw	r3,312(r2)
    1a38:	10004f15 	stw	zero,316(r2)

	memcpy (ctx.state, pctx->idig, sizeof(pctx->idig));
    1a3c:	e0bfe817 	ldw	r2,-96(fp)
    1a40:	10c01004 	addi	r3,r2,64
    1a44:	e0bfb404 	addi	r2,fp,-304
    1a48:	01801004 	movi	r6,64
    1a4c:	180b883a 	mov	r5,r3
    1a50:	1009883a 	mov	r4,r2
    1a54:	00463980 	call	46398 <memcpy>
	ctx.bitcount[0] = SHA512_BLOCK_LENGTH * 8;
    1a58:	00810004 	movi	r2,1024
    1a5c:	e0bfc415 	stw	r2,-240(fp)
    1a60:	e03fc515 	stw	zero,-236(fp)
	ctx.bitcount[1] = 0;
    1a64:	e03fc615 	stw	zero,-232(fp)
    1a68:	e03fc715 	stw	zero,-228(fp)
	sha512_Update(&ctx, salt, saltlen);
    1a6c:	e0c00217 	ldw	r3,8(fp)
    1a70:	e0bfb404 	addi	r2,fp,-304
    1a74:	180d883a 	mov	r6,r3
    1a78:	e17feb17 	ldw	r5,-84(fp)
    1a7c:	1009883a 	mov	r4,r2
    1a80:	000521c0 	call	521c <sha512_Update>
	sha512_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
    1a84:	e0c00304 	addi	r3,fp,12
    1a88:	e0bfb404 	addi	r2,fp,-304
    1a8c:	01800104 	movi	r6,4
    1a90:	180b883a 	mov	r5,r3
    1a94:	1009883a 	mov	r4,r2
    1a98:	000521c0 	call	521c <sha512_Update>
	sha512_Final(&ctx, (uint8_t*)pctx->g);
    1a9c:	e0bfe817 	ldw	r2,-96(fp)
    1aa0:	10c03004 	addi	r3,r2,192
    1aa4:	e0bfb404 	addi	r2,fp,-304
    1aa8:	180b883a 	mov	r5,r3
    1aac:	1009883a 	mov	r4,r2
    1ab0:	0005f980 	call	5f98 <sha512_Final>
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH / sizeof(uint64_t); k++) {
    1ab4:	e03fb015 	stw	zero,-320(fp)
    1ab8:	00006106 	br	1c40 <pbkdf2_hmac_sha512_Init+0x2e4>
		REVERSE64(pctx->g[k], pctx->g[k]);
    1abc:	e0ffe817 	ldw	r3,-96(fp)
    1ac0:	e0bfb017 	ldw	r2,-320(fp)
    1ac4:	10800604 	addi	r2,r2,24
    1ac8:	100490fa 	slli	r2,r2,3
    1acc:	1885883a 	add	r2,r3,r2
    1ad0:	10c00017 	ldw	r3,0(r2)
    1ad4:	e0ffb215 	stw	r3,-312(fp)
    1ad8:	10800117 	ldw	r2,4(r2)
    1adc:	e0bfb315 	stw	r2,-308(fp)
    1ae0:	e0bfb317 	ldw	r2,-308(fp)
    1ae4:	e0bff615 	stw	r2,-40(fp)
    1ae8:	e0ffb217 	ldw	r3,-312(fp)
    1aec:	e0fff715 	stw	r3,-36(fp)
    1af0:	e0bff617 	ldw	r2,-40(fp)
    1af4:	e0bfb215 	stw	r2,-312(fp)
    1af8:	e0fff717 	ldw	r3,-36(fp)
    1afc:	e0ffb315 	stw	r3,-308(fp)
    1b00:	e0ffb217 	ldw	r3,-312(fp)
    1b04:	00bfc074 	movhi	r2,65281
    1b08:	10bfc004 	addi	r2,r2,-256
    1b0c:	1884703a 	and	r2,r3,r2
    1b10:	e0bfec15 	stw	r2,-80(fp)
    1b14:	e0ffb317 	ldw	r3,-308(fp)
    1b18:	00bfc074 	movhi	r2,65281
    1b1c:	10bfc004 	addi	r2,r2,-256
    1b20:	1884703a 	and	r2,r3,r2
    1b24:	e0bfed15 	stw	r2,-76(fp)
    1b28:	e0ffed17 	ldw	r3,-76(fp)
    1b2c:	1804963a 	slli	r2,r3,24
    1b30:	e0ffec17 	ldw	r3,-80(fp)
    1b34:	1820d23a 	srli	r16,r3,8
    1b38:	1420b03a 	or	r16,r2,r16
    1b3c:	e0bfed17 	ldw	r2,-76(fp)
    1b40:	1022d23a 	srli	r17,r2,8
    1b44:	e0ffb217 	ldw	r3,-312(fp)
    1b48:	00803ff4 	movhi	r2,255
    1b4c:	10803fc4 	addi	r2,r2,255
    1b50:	1884703a 	and	r2,r3,r2
    1b54:	e0bfee15 	stw	r2,-72(fp)
    1b58:	e0ffb317 	ldw	r3,-308(fp)
    1b5c:	00803ff4 	movhi	r2,255
    1b60:	10803fc4 	addi	r2,r2,255
    1b64:	1884703a 	and	r2,r3,r2
    1b68:	e0bfef15 	stw	r2,-68(fp)
    1b6c:	e0ffee17 	ldw	r3,-72(fp)
    1b70:	1804d63a 	srli	r2,r3,24
    1b74:	e0ffef17 	ldw	r3,-68(fp)
    1b78:	1826923a 	slli	r19,r3,8
    1b7c:	14e6b03a 	or	r19,r2,r19
    1b80:	e0bfee17 	ldw	r2,-72(fp)
    1b84:	1024923a 	slli	r18,r2,8
    1b88:	8484b03a 	or	r2,r16,r18
    1b8c:	e0bfb215 	stw	r2,-312(fp)
    1b90:	8cc4b03a 	or	r2,r17,r19
    1b94:	e0bfb315 	stw	r2,-308(fp)
    1b98:	e0bfb217 	ldw	r2,-312(fp)
    1b9c:	10bfffec 	andhi	r2,r2,65535
    1ba0:	e0bff015 	stw	r2,-64(fp)
    1ba4:	e0bfb317 	ldw	r2,-308(fp)
    1ba8:	10bfffec 	andhi	r2,r2,65535
    1bac:	e0bff115 	stw	r2,-60(fp)
    1bb0:	e0fff117 	ldw	r3,-60(fp)
    1bb4:	1804943a 	slli	r2,r3,16
    1bb8:	e0fff017 	ldw	r3,-64(fp)
    1bbc:	1828d43a 	srli	r20,r3,16
    1bc0:	1528b03a 	or	r20,r2,r20
    1bc4:	e0bff117 	ldw	r2,-60(fp)
    1bc8:	102ad43a 	srli	r21,r2,16
    1bcc:	e0bfb217 	ldw	r2,-312(fp)
    1bd0:	10bfffcc 	andi	r2,r2,65535
    1bd4:	e0bff215 	stw	r2,-56(fp)
    1bd8:	e0bfb317 	ldw	r2,-308(fp)
    1bdc:	10bfffcc 	andi	r2,r2,65535
    1be0:	e0bff315 	stw	r2,-52(fp)
    1be4:	e0fff217 	ldw	r3,-56(fp)
    1be8:	1804d43a 	srli	r2,r3,16
    1bec:	e0fff317 	ldw	r3,-52(fp)
    1bf0:	182e943a 	slli	r23,r3,16
    1bf4:	15eeb03a 	or	r23,r2,r23
    1bf8:	e0bff217 	ldw	r2,-56(fp)
    1bfc:	102c943a 	slli	r22,r2,16
    1c00:	a586b03a 	or	r3,r20,r22
    1c04:	e0fff415 	stw	r3,-48(fp)
    1c08:	adc4b03a 	or	r2,r21,r23
    1c0c:	e0bff515 	stw	r2,-44(fp)
    1c10:	e0ffe817 	ldw	r3,-96(fp)
    1c14:	e0bfb017 	ldw	r2,-320(fp)
    1c18:	10800604 	addi	r2,r2,24
    1c1c:	100490fa 	slli	r2,r2,3
    1c20:	1885883a 	add	r2,r3,r2
    1c24:	e0fff417 	ldw	r3,-48(fp)
    1c28:	10c00015 	stw	r3,0(r2)
    1c2c:	e0fff517 	ldw	r3,-44(fp)
    1c30:	10c00115 	stw	r3,4(r2)
	ctx.bitcount[1] = 0;
	sha512_Update(&ctx, salt, saltlen);
	sha512_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
	sha512_Final(&ctx, (uint8_t*)pctx->g);
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH / sizeof(uint64_t); k++) {
    1c34:	e0bfb017 	ldw	r2,-320(fp)
    1c38:	10800044 	addi	r2,r2,1
    1c3c:	e0bfb015 	stw	r2,-320(fp)
    1c40:	e0bfb017 	ldw	r2,-320(fp)
    1c44:	10800230 	cmpltui	r2,r2,8
    1c48:	103f9c1e 	bne	r2,zero,1abc <__alt_mem_epcs_flash_controller+0xfdff8abc>
		REVERSE64(pctx->g[k], pctx->g[k]);
	}
#endif
	sha512_Transform(pctx->odig, pctx->g, pctx->g);
    1c4c:	e0ffe817 	ldw	r3,-96(fp)
    1c50:	e0bfe817 	ldw	r2,-96(fp)
    1c54:	11003004 	addi	r4,r2,192
    1c58:	e0bfe817 	ldw	r2,-96(fp)
    1c5c:	10803004 	addi	r2,r2,192
    1c60:	100d883a 	mov	r6,r2
    1c64:	200b883a 	mov	r5,r4
    1c68:	1809883a 	mov	r4,r3
    1c6c:	00042fc0 	call	42fc <sha512_Transform>
	memcpy(pctx->f, pctx->g, SHA512_DIGEST_LENGTH);
    1c70:	e0bfe817 	ldw	r2,-96(fp)
    1c74:	10c02004 	addi	r3,r2,128
    1c78:	e0bfe817 	ldw	r2,-96(fp)
    1c7c:	10803004 	addi	r2,r2,192
    1c80:	01801004 	movi	r6,64
    1c84:	100b883a 	mov	r5,r2
    1c88:	1809883a 	mov	r4,r3
    1c8c:	00463980 	call	46398 <memcpy>
	pctx->first = 1;
    1c90:	e0bfe817 	ldw	r2,-96(fp)
    1c94:	00c00044 	movi	r3,1
    1c98:	10c05005 	stb	r3,320(r2)
}
    1c9c:	0001883a 	nop
    1ca0:	e6fff804 	addi	sp,fp,-32
    1ca4:	dfc00917 	ldw	ra,36(sp)
    1ca8:	df000817 	ldw	fp,32(sp)
    1cac:	ddc00717 	ldw	r23,28(sp)
    1cb0:	dd800617 	ldw	r22,24(sp)
    1cb4:	dd400517 	ldw	r21,20(sp)
    1cb8:	dd000417 	ldw	r20,16(sp)
    1cbc:	dcc00317 	ldw	r19,12(sp)
    1cc0:	dc800217 	ldw	r18,8(sp)
    1cc4:	dc400117 	ldw	r17,4(sp)
    1cc8:	dc000017 	ldw	r16,0(sp)
    1ccc:	dec00a04 	addi	sp,sp,40
    1cd0:	f800283a 	ret

00001cd4 <pbkdf2_hmac_sha512_Update>:

void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
    1cd4:	defff804 	addi	sp,sp,-32
    1cd8:	dfc00715 	stw	ra,28(sp)
    1cdc:	df000615 	stw	fp,24(sp)
    1ce0:	dc400515 	stw	r17,20(sp)
    1ce4:	dc000415 	stw	r16,16(sp)
    1ce8:	df000604 	addi	fp,sp,24
    1cec:	e13ffc15 	stw	r4,-16(fp)
    1cf0:	e17ffd15 	stw	r5,-12(fp)
	for (uint32_t i = pctx->first; i < iterations; i++) {
    1cf4:	e0bffc17 	ldw	r2,-16(fp)
    1cf8:	10805003 	ldbu	r2,320(r2)
    1cfc:	10803fcc 	andi	r2,r2,255
    1d00:	1080201c 	xori	r2,r2,128
    1d04:	10bfe004 	addi	r2,r2,-128
    1d08:	e0bffa15 	stw	r2,-24(fp)
    1d0c:	00003506 	br	1de4 <pbkdf2_hmac_sha512_Update+0x110>
		sha512_Transform(pctx->idig, pctx->g, pctx->g);
    1d10:	e0bffc17 	ldw	r2,-16(fp)
    1d14:	10c01004 	addi	r3,r2,64
    1d18:	e0bffc17 	ldw	r2,-16(fp)
    1d1c:	11003004 	addi	r4,r2,192
    1d20:	e0bffc17 	ldw	r2,-16(fp)
    1d24:	10803004 	addi	r2,r2,192
    1d28:	100d883a 	mov	r6,r2
    1d2c:	200b883a 	mov	r5,r4
    1d30:	1809883a 	mov	r4,r3
    1d34:	00042fc0 	call	42fc <sha512_Transform>
		sha512_Transform(pctx->odig, pctx->g, pctx->g);
    1d38:	e0fffc17 	ldw	r3,-16(fp)
    1d3c:	e0bffc17 	ldw	r2,-16(fp)
    1d40:	11003004 	addi	r4,r2,192
    1d44:	e0bffc17 	ldw	r2,-16(fp)
    1d48:	10803004 	addi	r2,r2,192
    1d4c:	100d883a 	mov	r6,r2
    1d50:	200b883a 	mov	r5,r4
    1d54:	1809883a 	mov	r4,r3
    1d58:	00042fc0 	call	42fc <sha512_Transform>
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
    1d5c:	e03ffb15 	stw	zero,-20(fp)
    1d60:	00001a06 	br	1dcc <pbkdf2_hmac_sha512_Update+0xf8>
			pctx->f[j] ^= pctx->g[j];
    1d64:	e0fffc17 	ldw	r3,-16(fp)
    1d68:	e0bffb17 	ldw	r2,-20(fp)
    1d6c:	10800404 	addi	r2,r2,16
    1d70:	100490fa 	slli	r2,r2,3
    1d74:	1885883a 	add	r2,r3,r2
    1d78:	11000017 	ldw	r4,0(r2)
    1d7c:	11400117 	ldw	r5,4(r2)
    1d80:	e0fffc17 	ldw	r3,-16(fp)
    1d84:	e0bffb17 	ldw	r2,-20(fp)
    1d88:	10800604 	addi	r2,r2,24
    1d8c:	100490fa 	slli	r2,r2,3
    1d90:	188d883a 	add	r6,r3,r2
    1d94:	30800017 	ldw	r2,0(r6)
    1d98:	30c00117 	ldw	r3,4(r6)
    1d9c:	20a0f03a 	xor	r16,r4,r2
    1da0:	28e2f03a 	xor	r17,r5,r3
    1da4:	e0fffc17 	ldw	r3,-16(fp)
    1da8:	e0bffb17 	ldw	r2,-20(fp)
    1dac:	10800404 	addi	r2,r2,16
    1db0:	100490fa 	slli	r2,r2,3
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	14000015 	stw	r16,0(r2)
    1dbc:	14400115 	stw	r17,4(r2)
void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
		sha512_Transform(pctx->idig, pctx->g, pctx->g);
		sha512_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
    1dc0:	e0bffb17 	ldw	r2,-20(fp)
    1dc4:	10800044 	addi	r2,r2,1
    1dc8:	e0bffb15 	stw	r2,-20(fp)
    1dcc:	e0bffb17 	ldw	r2,-20(fp)
    1dd0:	10800230 	cmpltui	r2,r2,8
    1dd4:	103fe31e 	bne	r2,zero,1d64 <__alt_mem_epcs_flash_controller+0xfdff8d64>
	pctx->first = 1;
}

void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
    1dd8:	e0bffa17 	ldw	r2,-24(fp)
    1ddc:	10800044 	addi	r2,r2,1
    1de0:	e0bffa15 	stw	r2,-24(fp)
    1de4:	e0fffa17 	ldw	r3,-24(fp)
    1de8:	e0bffd17 	ldw	r2,-12(fp)
    1dec:	18bfc836 	bltu	r3,r2,1d10 <__alt_mem_epcs_flash_controller+0xfdff8d10>
		sha512_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
			pctx->f[j] ^= pctx->g[j];
		}
	}
	pctx->first = 0;
    1df0:	e0bffc17 	ldw	r2,-16(fp)
    1df4:	10005005 	stb	zero,320(r2)
}
    1df8:	0001883a 	nop
    1dfc:	e6fffe04 	addi	sp,fp,-8
    1e00:	dfc00317 	ldw	ra,12(sp)
    1e04:	df000217 	ldw	fp,8(sp)
    1e08:	dc400117 	ldw	r17,4(sp)
    1e0c:	dc000017 	ldw	r16,0(sp)
    1e10:	dec00404 	addi	sp,sp,16
    1e14:	f800283a 	ret

00001e18 <pbkdf2_hmac_sha512_Final>:

void pbkdf2_hmac_sha512_Final(PBKDF2_HMAC_SHA512_CTX *pctx, uint8_t *key)
{
    1e18:	defff104 	addi	sp,sp,-60
    1e1c:	dfc00e15 	stw	ra,56(sp)
    1e20:	df000d15 	stw	fp,52(sp)
    1e24:	ddc00c15 	stw	r23,48(sp)
    1e28:	dd800b15 	stw	r22,44(sp)
    1e2c:	dd400a15 	stw	r21,40(sp)
    1e30:	dd000915 	stw	r20,36(sp)
    1e34:	dcc00815 	stw	r19,32(sp)
    1e38:	dc800715 	stw	r18,28(sp)
    1e3c:	dc400615 	stw	r17,24(sp)
    1e40:	dc000515 	stw	r16,20(sp)
    1e44:	df000d04 	addi	fp,sp,52
    1e48:	e13ff615 	stw	r4,-40(fp)
    1e4c:	e17ff715 	stw	r5,-36(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH/sizeof(uint64_t); k++) {
    1e50:	e03ff315 	stw	zero,-52(fp)
    1e54:	00004506 	br	1f6c <pbkdf2_hmac_sha512_Final+0x154>
		REVERSE64(pctx->f[k], pctx->f[k]);
    1e58:	e17ff617 	ldw	r5,-40(fp)
    1e5c:	e13ff317 	ldw	r4,-52(fp)
    1e60:	21000404 	addi	r4,r4,16
    1e64:	200890fa 	slli	r4,r4,3
    1e68:	2909883a 	add	r4,r5,r4
    1e6c:	21400017 	ldw	r5,0(r4)
    1e70:	e17ff415 	stw	r5,-48(fp)
    1e74:	21000117 	ldw	r4,4(r4)
    1e78:	e13ff515 	stw	r4,-44(fp)
    1e7c:	e5bff517 	ldw	r22,-44(fp)
    1e80:	e5fff417 	ldw	r23,-48(fp)
    1e84:	e5bff415 	stw	r22,-48(fp)
    1e88:	e5fff515 	stw	r23,-44(fp)
    1e8c:	e17ff417 	ldw	r5,-48(fp)
    1e90:	013fc074 	movhi	r4,65281
    1e94:	213fc004 	addi	r4,r4,-256
    1e98:	2918703a 	and	r12,r5,r4
    1e9c:	e17ff517 	ldw	r5,-44(fp)
    1ea0:	013fc074 	movhi	r4,65281
    1ea4:	213fc004 	addi	r4,r4,-256
    1ea8:	291a703a 	and	r13,r5,r4
    1eac:	6808963a 	slli	r4,r13,24
    1eb0:	6004d23a 	srli	r2,r12,8
    1eb4:	2084b03a 	or	r2,r4,r2
    1eb8:	6806d23a 	srli	r3,r13,8
    1ebc:	e17ff417 	ldw	r5,-48(fp)
    1ec0:	01003ff4 	movhi	r4,255
    1ec4:	21003fc4 	addi	r4,r4,255
    1ec8:	291c703a 	and	r14,r5,r4
    1ecc:	e17ff517 	ldw	r5,-44(fp)
    1ed0:	01003ff4 	movhi	r4,255
    1ed4:	21003fc4 	addi	r4,r4,255
    1ed8:	291e703a 	and	r15,r5,r4
    1edc:	7008d63a 	srli	r4,r14,24
    1ee0:	780e923a 	slli	r7,r15,8
    1ee4:	21ceb03a 	or	r7,r4,r7
    1ee8:	700c923a 	slli	r6,r14,8
    1eec:	1188b03a 	or	r4,r2,r6
    1ef0:	e13ff415 	stw	r4,-48(fp)
    1ef4:	19c8b03a 	or	r4,r3,r7
    1ef8:	e13ff515 	stw	r4,-44(fp)
    1efc:	e13ff417 	ldw	r4,-48(fp)
    1f00:	243fffec 	andhi	r16,r4,65535
    1f04:	e13ff517 	ldw	r4,-44(fp)
    1f08:	247fffec 	andhi	r17,r4,65535
    1f0c:	8808943a 	slli	r4,r17,16
    1f10:	8010d43a 	srli	r8,r16,16
    1f14:	2210b03a 	or	r8,r4,r8
    1f18:	8812d43a 	srli	r9,r17,16
    1f1c:	e13ff417 	ldw	r4,-48(fp)
    1f20:	24bfffcc 	andi	r18,r4,65535
    1f24:	e13ff517 	ldw	r4,-44(fp)
    1f28:	24ffffcc 	andi	r19,r4,65535
    1f2c:	9008d43a 	srli	r4,r18,16
    1f30:	9816943a 	slli	r11,r19,16
    1f34:	22d6b03a 	or	r11,r4,r11
    1f38:	9014943a 	slli	r10,r18,16
    1f3c:	42a8b03a 	or	r20,r8,r10
    1f40:	4aeab03a 	or	r21,r9,r11
    1f44:	e17ff617 	ldw	r5,-40(fp)
    1f48:	e13ff317 	ldw	r4,-52(fp)
    1f4c:	21000404 	addi	r4,r4,16
    1f50:	200890fa 	slli	r4,r4,3
    1f54:	2909883a 	add	r4,r5,r4
    1f58:	25000015 	stw	r20,0(r4)
    1f5c:	25400115 	stw	r21,4(r4)
}

void pbkdf2_hmac_sha512_Final(PBKDF2_HMAC_SHA512_CTX *pctx, uint8_t *key)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH/sizeof(uint64_t); k++) {
    1f60:	e13ff317 	ldw	r4,-52(fp)
    1f64:	21000044 	addi	r4,r4,1
    1f68:	e13ff315 	stw	r4,-52(fp)
    1f6c:	e13ff317 	ldw	r4,-52(fp)
    1f70:	21000230 	cmpltui	r4,r4,8
    1f74:	203fb81e 	bne	r4,zero,1e58 <__alt_mem_epcs_flash_controller+0xfdff8e58>
		REVERSE64(pctx->f[k], pctx->f[k]);
	}
#endif
	memcpy(key, pctx->f, SHA512_DIGEST_LENGTH);
    1f78:	e0bff617 	ldw	r2,-40(fp)
    1f7c:	10802004 	addi	r2,r2,128
    1f80:	01801004 	movi	r6,64
    1f84:	100b883a 	mov	r5,r2
    1f88:	e13ff717 	ldw	r4,-36(fp)
    1f8c:	00463980 	call	46398 <memcpy>
	memzero(pctx, sizeof(PBKDF2_HMAC_SHA512_CTX));
    1f90:	01405104 	movi	r5,324
    1f94:	e13ff617 	ldw	r4,-40(fp)
    1f98:	00013700 	call	1370 <memzero>
}
    1f9c:	0001883a 	nop
    1fa0:	e6fff804 	addi	sp,fp,-32
    1fa4:	dfc00917 	ldw	ra,36(sp)
    1fa8:	df000817 	ldw	fp,32(sp)
    1fac:	ddc00717 	ldw	r23,28(sp)
    1fb0:	dd800617 	ldw	r22,24(sp)
    1fb4:	dd400517 	ldw	r21,20(sp)
    1fb8:	dd000417 	ldw	r20,16(sp)
    1fbc:	dcc00317 	ldw	r19,12(sp)
    1fc0:	dc800217 	ldw	r18,8(sp)
    1fc4:	dc400117 	ldw	r17,4(sp)
    1fc8:	dc000017 	ldw	r16,0(sp)
    1fcc:	dec00a04 	addi	sp,sp,40
    1fd0:	f800283a 	ret

00001fd4 <pbkdf2_hmac_sha512>:

void pbkdf2_hmac_sha512(const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t iterations, uint8_t *key, int keylen)
{
    1fd4:	deff9304 	addi	sp,sp,-436
    1fd8:	dfc06c15 	stw	ra,432(sp)
    1fdc:	df006b15 	stw	fp,428(sp)
    1fe0:	df006b04 	addi	fp,sp,428
    1fe4:	e13ffc15 	stw	r4,-16(fp)
    1fe8:	e17ffd15 	stw	r5,-12(fp)
    1fec:	e1bffe15 	stw	r6,-8(fp)
    1ff0:	e1ffff15 	stw	r7,-4(fp)
	uint32_t last_block_size = keylen % SHA512_DIGEST_LENGTH;
    1ff4:	e0c00417 	ldw	r3,16(fp)
    1ff8:	00a00034 	movhi	r2,32768
    1ffc:	10800fc4 	addi	r2,r2,63
    2000:	1884703a 	and	r2,r3,r2
    2004:	1000040e 	bge	r2,zero,2018 <pbkdf2_hmac_sha512+0x44>
    2008:	10bfffc4 	addi	r2,r2,-1
    200c:	00fff004 	movi	r3,-64
    2010:	10c4b03a 	or	r2,r2,r3
    2014:	10800044 	addi	r2,r2,1
    2018:	e0bf9715 	stw	r2,-420(fp)
	uint32_t blocks_count = keylen / SHA512_DIGEST_LENGTH;
    201c:	e0800417 	ldw	r2,16(fp)
    2020:	1000010e 	bge	r2,zero,2028 <pbkdf2_hmac_sha512+0x54>
    2024:	10800fc4 	addi	r2,r2,63
    2028:	1005d1ba 	srai	r2,r2,6
    202c:	e0bf9815 	stw	r2,-416(fp)
	if (last_block_size) {
    2030:	e0bf9717 	ldw	r2,-420(fp)
    2034:	10000426 	beq	r2,zero,2048 <pbkdf2_hmac_sha512+0x74>
		blocks_count++;
    2038:	e0bf9817 	ldw	r2,-416(fp)
    203c:	10800044 	addi	r2,r2,1
    2040:	e0bf9815 	stw	r2,-416(fp)
    2044:	00000206 	br	2050 <pbkdf2_hmac_sha512+0x7c>
	} else {
		last_block_size = SHA512_DIGEST_LENGTH;
    2048:	00801004 	movi	r2,64
    204c:	e0bf9715 	stw	r2,-420(fp)
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    2050:	00800044 	movi	r2,1
    2054:	e0bf9915 	stw	r2,-412(fp)
    2058:	00003106 	br	2120 <pbkdf2_hmac_sha512+0x14c>
		PBKDF2_HMAC_SHA512_CTX pctx;
		pbkdf2_hmac_sha512_Init(&pctx, pass, passlen, salt, saltlen, blocknr);
    205c:	e0ff9b04 	addi	r3,fp,-404
    2060:	e0bf9917 	ldw	r2,-412(fp)
    2064:	d8800115 	stw	r2,4(sp)
    2068:	e0bfff17 	ldw	r2,-4(fp)
    206c:	d8800015 	stw	r2,0(sp)
    2070:	e1fffe17 	ldw	r7,-8(fp)
    2074:	e1bffd17 	ldw	r6,-12(fp)
    2078:	e17ffc17 	ldw	r5,-16(fp)
    207c:	1809883a 	mov	r4,r3
    2080:	000195c0 	call	195c <pbkdf2_hmac_sha512_Init>
		pbkdf2_hmac_sha512_Update(&pctx, iterations);
    2084:	e0bf9b04 	addi	r2,fp,-404
    2088:	e1400217 	ldw	r5,8(fp)
    208c:	1009883a 	mov	r4,r2
    2090:	0001cd40 	call	1cd4 <pbkdf2_hmac_sha512_Update>
		uint8_t digest[SHA512_DIGEST_LENGTH];
		pbkdf2_hmac_sha512_Final(&pctx, digest);
    2094:	e0ffec04 	addi	r3,fp,-80
    2098:	e0bf9b04 	addi	r2,fp,-404
    209c:	180b883a 	mov	r5,r3
    20a0:	1009883a 	mov	r4,r2
    20a4:	0001e180 	call	1e18 <pbkdf2_hmac_sha512_Final>
		uint32_t key_offset = (blocknr - 1) * SHA512_DIGEST_LENGTH;
    20a8:	e0ff9917 	ldw	r3,-412(fp)
    20ac:	00810034 	movhi	r2,1024
    20b0:	10bfffc4 	addi	r2,r2,-1
    20b4:	1885883a 	add	r2,r3,r2
    20b8:	100491ba 	slli	r2,r2,6
    20bc:	e0bf9a15 	stw	r2,-408(fp)
		if (blocknr < blocks_count) {
    20c0:	e0ff9917 	ldw	r3,-412(fp)
    20c4:	e0bf9817 	ldw	r2,-416(fp)
    20c8:	18800a2e 	bgeu	r3,r2,20f4 <pbkdf2_hmac_sha512+0x120>
			memcpy(key + key_offset, digest, SHA512_DIGEST_LENGTH);
    20cc:	e0c00317 	ldw	r3,12(fp)
    20d0:	e0bf9a17 	ldw	r2,-408(fp)
    20d4:	1885883a 	add	r2,r3,r2
    20d8:	1009883a 	mov	r4,r2
    20dc:	e0bfec04 	addi	r2,fp,-80
    20e0:	00c01004 	movi	r3,64
    20e4:	180d883a 	mov	r6,r3
    20e8:	100b883a 	mov	r5,r2
    20ec:	00463980 	call	46398 <memcpy>
    20f0:	00000806 	br	2114 <pbkdf2_hmac_sha512+0x140>
		} else {
			memcpy(key + key_offset, digest, last_block_size);
    20f4:	e0c00317 	ldw	r3,12(fp)
    20f8:	e0bf9a17 	ldw	r2,-408(fp)
    20fc:	1885883a 	add	r2,r3,r2
    2100:	e0ffec04 	addi	r3,fp,-80
    2104:	e1bf9717 	ldw	r6,-420(fp)
    2108:	180b883a 	mov	r5,r3
    210c:	1009883a 	mov	r4,r2
    2110:	00463980 	call	46398 <memcpy>
	if (last_block_size) {
		blocks_count++;
	} else {
		last_block_size = SHA512_DIGEST_LENGTH;
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    2114:	e0bf9917 	ldw	r2,-412(fp)
    2118:	10800044 	addi	r2,r2,1
    211c:	e0bf9915 	stw	r2,-412(fp)
    2120:	e0bf9917 	ldw	r2,-412(fp)
    2124:	e0ff9817 	ldw	r3,-416(fp)
    2128:	18bfcc2e 	bgeu	r3,r2,205c <__alt_mem_epcs_flash_controller+0xfdff905c>
			memcpy(key + key_offset, digest, SHA512_DIGEST_LENGTH);
		} else {
			memcpy(key + key_offset, digest, last_block_size);
		}
	}
}
    212c:	0001883a 	nop
    2130:	e037883a 	mov	sp,fp
    2134:	dfc00117 	ldw	ra,4(sp)
    2138:	df000017 	ldw	fp,0(sp)
    213c:	dec00204 	addi	sp,sp,8
    2140:	f800283a 	ret

00002144 <random32>:

#include <stdio.h>
#include <time.h>

uint32_t random32(void)
{
    2144:	defffd04 	addi	sp,sp,-12
    2148:	dfc00215 	stw	ra,8(sp)
    214c:	df000115 	stw	fp,4(sp)
    2150:	dc000015 	stw	r16,0(sp)
    2154:	df000104 	addi	fp,sp,4
	static int initialized = 0;
	if (!initialized) {
    2158:	d0a54717 	ldw	r2,-27364(gp)
    215c:	1000061e 	bne	r2,zero,2178 <random32+0x34>
		srand((unsigned)time(NULL));
    2160:	0009883a 	mov	r4,zero
    2164:	00471080 	call	47108 <time>
    2168:	1009883a 	mov	r4,r2
    216c:	00467e40 	call	467e4 <srand>
		initialized = 1;
    2170:	00800044 	movi	r2,1
    2174:	d0a54715 	stw	r2,-27364(gp)
	}
	return ((rand() & 0xFF) | ((rand() & 0xFF) << 8) | ((rand() & 0xFF) << 16) | ((uint32_t) (rand() & 0xFF) << 24));
    2178:	00467f80 	call	467f8 <rand>
    217c:	14003fcc 	andi	r16,r2,255
    2180:	00467f80 	call	467f8 <rand>
    2184:	1004923a 	slli	r2,r2,8
    2188:	10bfffcc 	andi	r2,r2,65535
    218c:	80a0b03a 	or	r16,r16,r2
    2190:	00467f80 	call	467f8 <rand>
    2194:	10803fcc 	andi	r2,r2,255
    2198:	1004943a 	slli	r2,r2,16
    219c:	8084b03a 	or	r2,r16,r2
    21a0:	1021883a 	mov	r16,r2
    21a4:	00467f80 	call	467f8 <rand>
    21a8:	1004963a 	slli	r2,r2,24
    21ac:	8084b03a 	or	r2,r16,r2
}
    21b0:	e6ffff04 	addi	sp,fp,-4
    21b4:	dfc00217 	ldw	ra,8(sp)
    21b8:	df000117 	ldw	fp,4(sp)
    21bc:	dc000017 	ldw	r16,0(sp)
    21c0:	dec00304 	addi	sp,sp,12
    21c4:	f800283a 	ret

000021c8 <random_buffer>:
//

//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(uint8_t *buf, size_t len)
{
    21c8:	defffa04 	addi	sp,sp,-24
    21cc:	dfc00515 	stw	ra,20(sp)
    21d0:	df000415 	stw	fp,16(sp)
    21d4:	df000404 	addi	fp,sp,16
    21d8:	e13ffe15 	stw	r4,-8(fp)
    21dc:	e17fff15 	stw	r5,-4(fp)
	uint32_t r = 0;
    21e0:	e03ffc15 	stw	zero,-16(fp)
	for (size_t i = 0; i < len; i++) {
    21e4:	e03ffd15 	stw	zero,-12(fp)
    21e8:	00001106 	br	2230 <random_buffer+0x68>
		if (i % 4 == 0) {
    21ec:	e0bffd17 	ldw	r2,-12(fp)
    21f0:	108000cc 	andi	r2,r2,3
    21f4:	1000021e 	bne	r2,zero,2200 <random_buffer+0x38>
			r = random32();
    21f8:	00021440 	call	2144 <random32>
    21fc:	e0bffc15 	stw	r2,-16(fp)
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
    2200:	e0fffe17 	ldw	r3,-8(fp)
    2204:	e0bffd17 	ldw	r2,-12(fp)
    2208:	1885883a 	add	r2,r3,r2
    220c:	e0fffd17 	ldw	r3,-12(fp)
    2210:	18c000cc 	andi	r3,r3,3
    2214:	180690fa 	slli	r3,r3,3
    2218:	e13ffc17 	ldw	r4,-16(fp)
    221c:	20c6d83a 	srl	r3,r4,r3
    2220:	10c00005 	stb	r3,0(r2)
//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(uint8_t *buf, size_t len)
{
	uint32_t r = 0;
	for (size_t i = 0; i < len; i++) {
    2224:	e0bffd17 	ldw	r2,-12(fp)
    2228:	10800044 	addi	r2,r2,1
    222c:	e0bffd15 	stw	r2,-12(fp)
    2230:	e0fffd17 	ldw	r3,-12(fp)
    2234:	e0bfff17 	ldw	r2,-4(fp)
    2238:	18bfec36 	bltu	r3,r2,21ec <__alt_mem_epcs_flash_controller+0xfdff91ec>
		if (i % 4 == 0) {
			r = random32();
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
	}
}
    223c:	0001883a 	nop
    2240:	e037883a 	mov	sp,fp
    2244:	dfc00117 	ldw	ra,4(sp)
    2248:	df000017 	ldw	fp,0(sp)
    224c:	dec00204 	addi	sp,sp,8
    2250:	f800283a 	ret

00002254 <sha1_Init>:
 */
static const char *sha2_hex_digits = "0123456789abcdef";


/*** SHA-1: ***********************************************************/
void sha1_Init(SHA1_CTX* context) {
    2254:	defffd04 	addi	sp,sp,-12
    2258:	dfc00215 	stw	ra,8(sp)
    225c:	df000115 	stw	fp,4(sp)
    2260:	df000104 	addi	fp,sp,4
    2264:	e13fff15 	stw	r4,-4(fp)
	MEMCPY_BCOPY(context->state, sha1_initial_hash_value, SHA1_DIGEST_LENGTH);
    2268:	e0bfff17 	ldw	r2,-4(fp)
    226c:	01800504 	movi	r6,20
    2270:	01400174 	movhi	r5,5
    2274:	29472704 	addi	r5,r5,7324
    2278:	1009883a 	mov	r4,r2
    227c:	00463980 	call	46398 <memcpy>
	memzero(context->buffer, SHA1_BLOCK_LENGTH);
    2280:	e0bfff17 	ldw	r2,-4(fp)
    2284:	10800704 	addi	r2,r2,28
    2288:	01401004 	movi	r5,64
    228c:	1009883a 	mov	r4,r2
    2290:	00013700 	call	1370 <memzero>
	context->bitcount = 0;
    2294:	e0bfff17 	ldw	r2,-4(fp)
    2298:	10000515 	stw	zero,20(r2)
    229c:	10000615 	stw	zero,24(r2)
}
    22a0:	0001883a 	nop
    22a4:	e037883a 	mov	sp,fp
    22a8:	dfc00117 	ldw	ra,4(sp)
    22ac:	df000017 	ldw	fp,0(sp)
    22b0:	dec00204 	addi	sp,sp,8
    22b4:	f800283a 	ret

000022b8 <sha1_Transform>:
	a = b = c = d = e = T1 = 0;
}

#else  /* SHA2_UNROLL_TRANSFORM */

void sha1_Transform(const sha2_word32* state_in, const sha2_word32* data, sha2_word32* state_out) {
    22b8:	deffe504 	addi	sp,sp,-108
    22bc:	df001a15 	stw	fp,104(sp)
    22c0:	df001a04 	addi	fp,sp,104
    22c4:	e13ffd15 	stw	r4,-12(fp)
    22c8:	e17ffe15 	stw	r5,-8(fp)
    22cc:	e1bfff15 	stw	r6,-4(fp)
	sha2_word32	T1;
	sha2_word32	W1[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    22d0:	e0bffd17 	ldw	r2,-12(fp)
    22d4:	10800017 	ldw	r2,0(r2)
    22d8:	e0bfe615 	stw	r2,-104(fp)
	b = state_in[1];
    22dc:	e0bffd17 	ldw	r2,-12(fp)
    22e0:	10800117 	ldw	r2,4(r2)
    22e4:	e0bfe715 	stw	r2,-100(fp)
	c = state_in[2];
    22e8:	e0bffd17 	ldw	r2,-12(fp)
    22ec:	10800217 	ldw	r2,8(r2)
    22f0:	e0bfe815 	stw	r2,-96(fp)
	d = state_in[3];
    22f4:	e0bffd17 	ldw	r2,-12(fp)
    22f8:	10800317 	ldw	r2,12(r2)
    22fc:	e0bfe915 	stw	r2,-92(fp)
	e = state_in[4];
    2300:	e0bffd17 	ldw	r2,-12(fp)
    2304:	10800417 	ldw	r2,16(r2)
    2308:	e0bfea15 	stw	r2,-88(fp)
	j = 0;
    230c:	e03feb15 	stw	zero,-84(fp)
	do {
		T1 = ROTL32(5, a) + Ch(b, c, d) + e + K1_0_TO_19 + (W1[j] = *data++);
    2310:	e0bfe617 	ldw	r2,-104(fp)
    2314:	1006117a 	roli	r3,r2,5
    2318:	e13fe717 	ldw	r4,-100(fp)
    231c:	e0bfe817 	ldw	r2,-96(fp)
    2320:	2088703a 	and	r4,r4,r2
    2324:	e0bfe717 	ldw	r2,-100(fp)
    2328:	008a303a 	nor	r5,zero,r2
    232c:	e0bfe917 	ldw	r2,-92(fp)
    2330:	2884703a 	and	r2,r5,r2
    2334:	2084f03a 	xor	r2,r4,r2
    2338:	1887883a 	add	r3,r3,r2
    233c:	e0bfea17 	ldw	r2,-88(fp)
    2340:	1887883a 	add	r3,r3,r2
    2344:	e0bffe17 	ldw	r2,-8(fp)
    2348:	11000104 	addi	r4,r2,4
    234c:	e13ffe15 	stw	r4,-8(fp)
    2350:	11000017 	ldw	r4,0(r2)
    2354:	e0bfeb17 	ldw	r2,-84(fp)
    2358:	1085883a 	add	r2,r2,r2
    235c:	1085883a 	add	r2,r2,r2
    2360:	e17fe604 	addi	r5,fp,-104
    2364:	2885883a 	add	r2,r5,r2
    2368:	10800704 	addi	r2,r2,28
    236c:	11000015 	stw	r4,0(r2)
    2370:	e0bfeb17 	ldw	r2,-84(fp)
    2374:	1085883a 	add	r2,r2,r2
    2378:	1085883a 	add	r2,r2,r2
    237c:	e1bfe604 	addi	r6,fp,-104
    2380:	3085883a 	add	r2,r6,r2
    2384:	10800704 	addi	r2,r2,28
    2388:	10800017 	ldw	r2,0(r2)
    238c:	1887883a 	add	r3,r3,r2
    2390:	0096a0b4 	movhi	r2,23170
    2394:	109e6644 	addi	r2,r2,31129
    2398:	1885883a 	add	r2,r3,r2
    239c:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    23a0:	e0bfe917 	ldw	r2,-92(fp)
    23a4:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    23a8:	e0bfe817 	ldw	r2,-96(fp)
    23ac:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    23b0:	e0ffe717 	ldw	r3,-100(fp)
    23b4:	00800084 	movi	r2,2
    23b8:	1884583a 	ror	r2,r3,r2
    23bc:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    23c0:	e0bfe617 	ldw	r2,-104(fp)
    23c4:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    23c8:	e0bfec17 	ldw	r2,-80(fp)
    23cc:	e0bfe615 	stw	r2,-104(fp)
		j++;
    23d0:	e0bfeb17 	ldw	r2,-84(fp)
    23d4:	10800044 	addi	r2,r2,1
    23d8:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 16);
    23dc:	e0bfeb17 	ldw	r2,-84(fp)
    23e0:	10800410 	cmplti	r2,r2,16
    23e4:	103fca1e 	bne	r2,zero,2310 <__alt_mem_epcs_flash_controller+0xfdff9310>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    23e8:	e0bfeb17 	ldw	r2,-84(fp)
    23ec:	10800344 	addi	r2,r2,13
    23f0:	108003cc 	andi	r2,r2,15
    23f4:	1085883a 	add	r2,r2,r2
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	e0ffe604 	addi	r3,fp,-104
    2400:	1885883a 	add	r2,r3,r2
    2404:	10800704 	addi	r2,r2,28
    2408:	10c00017 	ldw	r3,0(r2)
    240c:	e0bfeb17 	ldw	r2,-84(fp)
    2410:	10800204 	addi	r2,r2,8
    2414:	108003cc 	andi	r2,r2,15
    2418:	1085883a 	add	r2,r2,r2
    241c:	1085883a 	add	r2,r2,r2
    2420:	e13fe604 	addi	r4,fp,-104
    2424:	2085883a 	add	r2,r4,r2
    2428:	10800704 	addi	r2,r2,28
    242c:	10800017 	ldw	r2,0(r2)
    2430:	1886f03a 	xor	r3,r3,r2
    2434:	e0bfeb17 	ldw	r2,-84(fp)
    2438:	10800084 	addi	r2,r2,2
    243c:	108003cc 	andi	r2,r2,15
    2440:	1085883a 	add	r2,r2,r2
    2444:	1085883a 	add	r2,r2,r2
    2448:	e17fe604 	addi	r5,fp,-104
    244c:	2885883a 	add	r2,r5,r2
    2450:	10800704 	addi	r2,r2,28
    2454:	10800017 	ldw	r2,0(r2)
    2458:	1886f03a 	xor	r3,r3,r2
    245c:	e0bfeb17 	ldw	r2,-84(fp)
    2460:	108003cc 	andi	r2,r2,15
    2464:	1085883a 	add	r2,r2,r2
    2468:	1085883a 	add	r2,r2,r2
    246c:	e1bfe604 	addi	r6,fp,-104
    2470:	3085883a 	add	r2,r6,r2
    2474:	10800704 	addi	r2,r2,28
    2478:	10800017 	ldw	r2,0(r2)
    247c:	1884f03a 	xor	r2,r3,r2
    2480:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Ch(b,c,d) + e + K1_0_TO_19 + (W1[j&0x0f] = ROTL32(1, T1));
    2484:	e0bfe617 	ldw	r2,-104(fp)
    2488:	1006117a 	roli	r3,r2,5
    248c:	e13fe717 	ldw	r4,-100(fp)
    2490:	e0bfe817 	ldw	r2,-96(fp)
    2494:	2088703a 	and	r4,r4,r2
    2498:	e0bfe717 	ldw	r2,-100(fp)
    249c:	008a303a 	nor	r5,zero,r2
    24a0:	e0bfe917 	ldw	r2,-92(fp)
    24a4:	2884703a 	and	r2,r5,r2
    24a8:	2084f03a 	xor	r2,r4,r2
    24ac:	1887883a 	add	r3,r3,r2
    24b0:	e0bfea17 	ldw	r2,-88(fp)
    24b4:	1889883a 	add	r4,r3,r2
    24b8:	e0bfeb17 	ldw	r2,-84(fp)
    24bc:	108003cc 	andi	r2,r2,15
    24c0:	e0ffec17 	ldw	r3,-80(fp)
    24c4:	180a107a 	roli	r5,r3,1
    24c8:	1087883a 	add	r3,r2,r2
    24cc:	18c7883a 	add	r3,r3,r3
    24d0:	e1bfe604 	addi	r6,fp,-104
    24d4:	30c7883a 	add	r3,r6,r3
    24d8:	18c00704 	addi	r3,r3,28
    24dc:	19400015 	stw	r5,0(r3)
    24e0:	1085883a 	add	r2,r2,r2
    24e4:	1085883a 	add	r2,r2,r2
    24e8:	e0ffe604 	addi	r3,fp,-104
    24ec:	1885883a 	add	r2,r3,r2
    24f0:	10800704 	addi	r2,r2,28
    24f4:	10800017 	ldw	r2,0(r2)
    24f8:	2087883a 	add	r3,r4,r2
    24fc:	0096a0b4 	movhi	r2,23170
    2500:	109e6644 	addi	r2,r2,31129
    2504:	1885883a 	add	r2,r3,r2
    2508:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    250c:	e0bfe917 	ldw	r2,-92(fp)
    2510:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    2514:	e0bfe817 	ldw	r2,-96(fp)
    2518:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    251c:	e0ffe717 	ldw	r3,-100(fp)
    2520:	00800084 	movi	r2,2
    2524:	1884583a 	ror	r2,r3,r2
    2528:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    252c:	e0bfe617 	ldw	r2,-104(fp)
    2530:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    2534:	e0bfec17 	ldw	r2,-80(fp)
    2538:	e0bfe615 	stw	r2,-104(fp)
		j++;
    253c:	e0bfeb17 	ldw	r2,-84(fp)
    2540:	10800044 	addi	r2,r2,1
    2544:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 20);
    2548:	e0bfeb17 	ldw	r2,-84(fp)
    254c:	10800510 	cmplti	r2,r2,20
    2550:	103fa51e 	bne	r2,zero,23e8 <__alt_mem_epcs_flash_controller+0xfdff93e8>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    2554:	e0bfeb17 	ldw	r2,-84(fp)
    2558:	10800344 	addi	r2,r2,13
    255c:	108003cc 	andi	r2,r2,15
    2560:	1085883a 	add	r2,r2,r2
    2564:	1085883a 	add	r2,r2,r2
    2568:	e13fe604 	addi	r4,fp,-104
    256c:	2085883a 	add	r2,r4,r2
    2570:	10800704 	addi	r2,r2,28
    2574:	10c00017 	ldw	r3,0(r2)
    2578:	e0bfeb17 	ldw	r2,-84(fp)
    257c:	10800204 	addi	r2,r2,8
    2580:	108003cc 	andi	r2,r2,15
    2584:	1085883a 	add	r2,r2,r2
    2588:	1085883a 	add	r2,r2,r2
    258c:	e17fe604 	addi	r5,fp,-104
    2590:	2885883a 	add	r2,r5,r2
    2594:	10800704 	addi	r2,r2,28
    2598:	10800017 	ldw	r2,0(r2)
    259c:	1886f03a 	xor	r3,r3,r2
    25a0:	e0bfeb17 	ldw	r2,-84(fp)
    25a4:	10800084 	addi	r2,r2,2
    25a8:	108003cc 	andi	r2,r2,15
    25ac:	1085883a 	add	r2,r2,r2
    25b0:	1085883a 	add	r2,r2,r2
    25b4:	e1bfe604 	addi	r6,fp,-104
    25b8:	3085883a 	add	r2,r6,r2
    25bc:	10800704 	addi	r2,r2,28
    25c0:	10800017 	ldw	r2,0(r2)
    25c4:	1886f03a 	xor	r3,r3,r2
    25c8:	e0bfeb17 	ldw	r2,-84(fp)
    25cc:	108003cc 	andi	r2,r2,15
    25d0:	1085883a 	add	r2,r2,r2
    25d4:	1085883a 	add	r2,r2,r2
    25d8:	e13fe604 	addi	r4,fp,-104
    25dc:	2085883a 	add	r2,r4,r2
    25e0:	10800704 	addi	r2,r2,28
    25e4:	10800017 	ldw	r2,0(r2)
    25e8:	1884f03a 	xor	r2,r3,r2
    25ec:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Parity(b,c,d) + e + K1_20_TO_39 + (W1[j&0x0f] = ROTL32(1, T1));
    25f0:	e0bfe617 	ldw	r2,-104(fp)
    25f4:	1006117a 	roli	r3,r2,5
    25f8:	e13fe717 	ldw	r4,-100(fp)
    25fc:	e0bfe817 	ldw	r2,-96(fp)
    2600:	2088f03a 	xor	r4,r4,r2
    2604:	e0bfe917 	ldw	r2,-92(fp)
    2608:	2084f03a 	xor	r2,r4,r2
    260c:	1887883a 	add	r3,r3,r2
    2610:	e0bfea17 	ldw	r2,-88(fp)
    2614:	1889883a 	add	r4,r3,r2
    2618:	e0bfeb17 	ldw	r2,-84(fp)
    261c:	108003cc 	andi	r2,r2,15
    2620:	e0ffec17 	ldw	r3,-80(fp)
    2624:	180a107a 	roli	r5,r3,1
    2628:	1087883a 	add	r3,r2,r2
    262c:	18c7883a 	add	r3,r3,r3
    2630:	e1bfe604 	addi	r6,fp,-104
    2634:	30c7883a 	add	r3,r6,r3
    2638:	18c00704 	addi	r3,r3,28
    263c:	19400015 	stw	r5,0(r3)
    2640:	1085883a 	add	r2,r2,r2
    2644:	1085883a 	add	r2,r2,r2
    2648:	e0ffe604 	addi	r3,fp,-104
    264c:	1885883a 	add	r2,r3,r2
    2650:	10800704 	addi	r2,r2,28
    2654:	10800017 	ldw	r2,0(r2)
    2658:	2087883a 	add	r3,r4,r2
    265c:	009bb6b4 	movhi	r2,28378
    2660:	10bae844 	addi	r2,r2,-5215
    2664:	1885883a 	add	r2,r3,r2
    2668:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    266c:	e0bfe917 	ldw	r2,-92(fp)
    2670:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    2674:	e0bfe817 	ldw	r2,-96(fp)
    2678:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    267c:	e0ffe717 	ldw	r3,-100(fp)
    2680:	00800084 	movi	r2,2
    2684:	1884583a 	ror	r2,r3,r2
    2688:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    268c:	e0bfe617 	ldw	r2,-104(fp)
    2690:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    2694:	e0bfec17 	ldw	r2,-80(fp)
    2698:	e0bfe615 	stw	r2,-104(fp)
		j++;
    269c:	e0bfeb17 	ldw	r2,-84(fp)
    26a0:	10800044 	addi	r2,r2,1
    26a4:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 40);
    26a8:	e0bfeb17 	ldw	r2,-84(fp)
    26ac:	10800a10 	cmplti	r2,r2,40
    26b0:	103fa81e 	bne	r2,zero,2554 <__alt_mem_epcs_flash_controller+0xfdff9554>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    26b4:	e0bfeb17 	ldw	r2,-84(fp)
    26b8:	10800344 	addi	r2,r2,13
    26bc:	108003cc 	andi	r2,r2,15
    26c0:	1085883a 	add	r2,r2,r2
    26c4:	1085883a 	add	r2,r2,r2
    26c8:	e13fe604 	addi	r4,fp,-104
    26cc:	2085883a 	add	r2,r4,r2
    26d0:	10800704 	addi	r2,r2,28
    26d4:	10c00017 	ldw	r3,0(r2)
    26d8:	e0bfeb17 	ldw	r2,-84(fp)
    26dc:	10800204 	addi	r2,r2,8
    26e0:	108003cc 	andi	r2,r2,15
    26e4:	1085883a 	add	r2,r2,r2
    26e8:	1085883a 	add	r2,r2,r2
    26ec:	e17fe604 	addi	r5,fp,-104
    26f0:	2885883a 	add	r2,r5,r2
    26f4:	10800704 	addi	r2,r2,28
    26f8:	10800017 	ldw	r2,0(r2)
    26fc:	1886f03a 	xor	r3,r3,r2
    2700:	e0bfeb17 	ldw	r2,-84(fp)
    2704:	10800084 	addi	r2,r2,2
    2708:	108003cc 	andi	r2,r2,15
    270c:	1085883a 	add	r2,r2,r2
    2710:	1085883a 	add	r2,r2,r2
    2714:	e1bfe604 	addi	r6,fp,-104
    2718:	3085883a 	add	r2,r6,r2
    271c:	10800704 	addi	r2,r2,28
    2720:	10800017 	ldw	r2,0(r2)
    2724:	1886f03a 	xor	r3,r3,r2
    2728:	e0bfeb17 	ldw	r2,-84(fp)
    272c:	108003cc 	andi	r2,r2,15
    2730:	1085883a 	add	r2,r2,r2
    2734:	1085883a 	add	r2,r2,r2
    2738:	e13fe604 	addi	r4,fp,-104
    273c:	2085883a 	add	r2,r4,r2
    2740:	10800704 	addi	r2,r2,28
    2744:	10800017 	ldw	r2,0(r2)
    2748:	1884f03a 	xor	r2,r3,r2
    274c:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Maj(b,c,d) + e + K1_40_TO_59 + (W1[j&0x0f] = ROTL32(1, T1));
    2750:	e0bfe617 	ldw	r2,-104(fp)
    2754:	1006117a 	roli	r3,r2,5
    2758:	e13fe717 	ldw	r4,-100(fp)
    275c:	e0bfe817 	ldw	r2,-96(fp)
    2760:	2088703a 	and	r4,r4,r2
    2764:	e17fe717 	ldw	r5,-100(fp)
    2768:	e0bfe917 	ldw	r2,-92(fp)
    276c:	2884703a 	and	r2,r5,r2
    2770:	2088f03a 	xor	r4,r4,r2
    2774:	e17fe817 	ldw	r5,-96(fp)
    2778:	e0bfe917 	ldw	r2,-92(fp)
    277c:	2884703a 	and	r2,r5,r2
    2780:	2084f03a 	xor	r2,r4,r2
    2784:	1887883a 	add	r3,r3,r2
    2788:	e0bfea17 	ldw	r2,-88(fp)
    278c:	1889883a 	add	r4,r3,r2
    2790:	e0bfeb17 	ldw	r2,-84(fp)
    2794:	108003cc 	andi	r2,r2,15
    2798:	e0ffec17 	ldw	r3,-80(fp)
    279c:	180a107a 	roli	r5,r3,1
    27a0:	1087883a 	add	r3,r2,r2
    27a4:	18c7883a 	add	r3,r3,r3
    27a8:	e1bfe604 	addi	r6,fp,-104
    27ac:	30c7883a 	add	r3,r6,r3
    27b0:	18c00704 	addi	r3,r3,28
    27b4:	19400015 	stw	r5,0(r3)
    27b8:	1085883a 	add	r2,r2,r2
    27bc:	1085883a 	add	r2,r2,r2
    27c0:	e0ffe604 	addi	r3,fp,-104
    27c4:	1885883a 	add	r2,r3,r2
    27c8:	10800704 	addi	r2,r2,28
    27cc:	10800017 	ldw	r2,0(r2)
    27d0:	2087883a 	add	r3,r4,r2
    27d4:	00a3c734 	movhi	r2,36636
    27d8:	10af3704 	addi	r2,r2,-17188
    27dc:	1885883a 	add	r2,r3,r2
    27e0:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    27e4:	e0bfe917 	ldw	r2,-92(fp)
    27e8:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    27ec:	e0bfe817 	ldw	r2,-96(fp)
    27f0:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    27f4:	e0ffe717 	ldw	r3,-100(fp)
    27f8:	00800084 	movi	r2,2
    27fc:	1884583a 	ror	r2,r3,r2
    2800:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    2804:	e0bfe617 	ldw	r2,-104(fp)
    2808:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    280c:	e0bfec17 	ldw	r2,-80(fp)
    2810:	e0bfe615 	stw	r2,-104(fp)
		j++;
    2814:	e0bfeb17 	ldw	r2,-84(fp)
    2818:	10800044 	addi	r2,r2,1
    281c:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 60);
    2820:	e0bfeb17 	ldw	r2,-84(fp)
    2824:	10800f10 	cmplti	r2,r2,60
    2828:	103fa21e 	bne	r2,zero,26b4 <__alt_mem_epcs_flash_controller+0xfdff96b4>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    282c:	e0bfeb17 	ldw	r2,-84(fp)
    2830:	10800344 	addi	r2,r2,13
    2834:	108003cc 	andi	r2,r2,15
    2838:	1085883a 	add	r2,r2,r2
    283c:	1085883a 	add	r2,r2,r2
    2840:	e13fe604 	addi	r4,fp,-104
    2844:	2085883a 	add	r2,r4,r2
    2848:	10800704 	addi	r2,r2,28
    284c:	10c00017 	ldw	r3,0(r2)
    2850:	e0bfeb17 	ldw	r2,-84(fp)
    2854:	10800204 	addi	r2,r2,8
    2858:	108003cc 	andi	r2,r2,15
    285c:	1085883a 	add	r2,r2,r2
    2860:	1085883a 	add	r2,r2,r2
    2864:	e17fe604 	addi	r5,fp,-104
    2868:	2885883a 	add	r2,r5,r2
    286c:	10800704 	addi	r2,r2,28
    2870:	10800017 	ldw	r2,0(r2)
    2874:	1886f03a 	xor	r3,r3,r2
    2878:	e0bfeb17 	ldw	r2,-84(fp)
    287c:	10800084 	addi	r2,r2,2
    2880:	108003cc 	andi	r2,r2,15
    2884:	1085883a 	add	r2,r2,r2
    2888:	1085883a 	add	r2,r2,r2
    288c:	e1bfe604 	addi	r6,fp,-104
    2890:	3085883a 	add	r2,r6,r2
    2894:	10800704 	addi	r2,r2,28
    2898:	10800017 	ldw	r2,0(r2)
    289c:	1886f03a 	xor	r3,r3,r2
    28a0:	e0bfeb17 	ldw	r2,-84(fp)
    28a4:	108003cc 	andi	r2,r2,15
    28a8:	1085883a 	add	r2,r2,r2
    28ac:	1085883a 	add	r2,r2,r2
    28b0:	e13fe604 	addi	r4,fp,-104
    28b4:	2085883a 	add	r2,r4,r2
    28b8:	10800704 	addi	r2,r2,28
    28bc:	10800017 	ldw	r2,0(r2)
    28c0:	1884f03a 	xor	r2,r3,r2
    28c4:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Parity(b,c,d) + e + K1_60_TO_79 + (W1[j&0x0f] = ROTL32(1, T1));
    28c8:	e0bfe617 	ldw	r2,-104(fp)
    28cc:	1006117a 	roli	r3,r2,5
    28d0:	e13fe717 	ldw	r4,-100(fp)
    28d4:	e0bfe817 	ldw	r2,-96(fp)
    28d8:	2088f03a 	xor	r4,r4,r2
    28dc:	e0bfe917 	ldw	r2,-92(fp)
    28e0:	2084f03a 	xor	r2,r4,r2
    28e4:	1887883a 	add	r3,r3,r2
    28e8:	e0bfea17 	ldw	r2,-88(fp)
    28ec:	1889883a 	add	r4,r3,r2
    28f0:	e0bfeb17 	ldw	r2,-84(fp)
    28f4:	108003cc 	andi	r2,r2,15
    28f8:	e0ffec17 	ldw	r3,-80(fp)
    28fc:	180a107a 	roli	r5,r3,1
    2900:	1087883a 	add	r3,r2,r2
    2904:	18c7883a 	add	r3,r3,r3
    2908:	e1bfe604 	addi	r6,fp,-104
    290c:	30c7883a 	add	r3,r6,r3
    2910:	18c00704 	addi	r3,r3,28
    2914:	19400015 	stw	r5,0(r3)
    2918:	1085883a 	add	r2,r2,r2
    291c:	1085883a 	add	r2,r2,r2
    2920:	e0ffe604 	addi	r3,fp,-104
    2924:	1885883a 	add	r2,r3,r2
    2928:	10800704 	addi	r2,r2,28
    292c:	10800017 	ldw	r2,0(r2)
    2930:	2087883a 	add	r3,r4,r2
    2934:	00b298f4 	movhi	r2,51811
    2938:	10b07584 	addi	r2,r2,-15914
    293c:	1885883a 	add	r2,r3,r2
    2940:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    2944:	e0bfe917 	ldw	r2,-92(fp)
    2948:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    294c:	e0bfe817 	ldw	r2,-96(fp)
    2950:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    2954:	e0ffe717 	ldw	r3,-100(fp)
    2958:	00800084 	movi	r2,2
    295c:	1884583a 	ror	r2,r3,r2
    2960:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    2964:	e0bfe617 	ldw	r2,-104(fp)
    2968:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    296c:	e0bfec17 	ldw	r2,-80(fp)
    2970:	e0bfe615 	stw	r2,-104(fp)
		j++;
    2974:	e0bfeb17 	ldw	r2,-84(fp)
    2978:	10800044 	addi	r2,r2,1
    297c:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 80);
    2980:	e0bfeb17 	ldw	r2,-84(fp)
    2984:	10801410 	cmplti	r2,r2,80
    2988:	103fa81e 	bne	r2,zero,282c <__alt_mem_epcs_flash_controller+0xfdff982c>


	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    298c:	e0bffd17 	ldw	r2,-12(fp)
    2990:	10c00017 	ldw	r3,0(r2)
    2994:	e0bfe617 	ldw	r2,-104(fp)
    2998:	1887883a 	add	r3,r3,r2
    299c:	e0bfff17 	ldw	r2,-4(fp)
    29a0:	10c00015 	stw	r3,0(r2)
	state_out[1] = state_in[1] + b;
    29a4:	e0bfff17 	ldw	r2,-4(fp)
    29a8:	10800104 	addi	r2,r2,4
    29ac:	e0fffd17 	ldw	r3,-12(fp)
    29b0:	18c00104 	addi	r3,r3,4
    29b4:	19000017 	ldw	r4,0(r3)
    29b8:	e0ffe717 	ldw	r3,-100(fp)
    29bc:	20c7883a 	add	r3,r4,r3
    29c0:	10c00015 	stw	r3,0(r2)
	state_out[2] = state_in[2] + c;
    29c4:	e0bfff17 	ldw	r2,-4(fp)
    29c8:	10800204 	addi	r2,r2,8
    29cc:	e0fffd17 	ldw	r3,-12(fp)
    29d0:	18c00204 	addi	r3,r3,8
    29d4:	19000017 	ldw	r4,0(r3)
    29d8:	e0ffe817 	ldw	r3,-96(fp)
    29dc:	20c7883a 	add	r3,r4,r3
    29e0:	10c00015 	stw	r3,0(r2)
	state_out[3] = state_in[3] + d;
    29e4:	e0bfff17 	ldw	r2,-4(fp)
    29e8:	10800304 	addi	r2,r2,12
    29ec:	e0fffd17 	ldw	r3,-12(fp)
    29f0:	18c00304 	addi	r3,r3,12
    29f4:	19000017 	ldw	r4,0(r3)
    29f8:	e0ffe917 	ldw	r3,-92(fp)
    29fc:	20c7883a 	add	r3,r4,r3
    2a00:	10c00015 	stw	r3,0(r2)
	state_out[4] = state_in[4] + e;
    2a04:	e0bfff17 	ldw	r2,-4(fp)
    2a08:	10800404 	addi	r2,r2,16
    2a0c:	e0fffd17 	ldw	r3,-12(fp)
    2a10:	18c00404 	addi	r3,r3,16
    2a14:	19000017 	ldw	r4,0(r3)
    2a18:	e0ffea17 	ldw	r3,-88(fp)
    2a1c:	20c7883a 	add	r3,r4,r3
    2a20:	10c00015 	stw	r3,0(r2)

	/* Clean up */
	a = b = c = d = e = T1 = 0;
    2a24:	e03fec15 	stw	zero,-80(fp)
    2a28:	e0bfec17 	ldw	r2,-80(fp)
    2a2c:	e0bfea15 	stw	r2,-88(fp)
    2a30:	e0bfea17 	ldw	r2,-88(fp)
    2a34:	e0bfe915 	stw	r2,-92(fp)
    2a38:	e0bfe917 	ldw	r2,-92(fp)
    2a3c:	e0bfe815 	stw	r2,-96(fp)
    2a40:	e0bfe817 	ldw	r2,-96(fp)
    2a44:	e0bfe715 	stw	r2,-100(fp)
    2a48:	e0bfe717 	ldw	r2,-100(fp)
    2a4c:	e0bfe615 	stw	r2,-104(fp)
}
    2a50:	0001883a 	nop
    2a54:	e037883a 	mov	sp,fp
    2a58:	df000017 	ldw	fp,0(sp)
    2a5c:	dec00104 	addi	sp,sp,4
    2a60:	f800283a 	ret

00002a64 <sha1_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha1_Update(SHA1_CTX* context, const sha2_byte *data, size_t len) {
    2a64:	deffef04 	addi	sp,sp,-68
    2a68:	dfc01015 	stw	ra,64(sp)
    2a6c:	df000f15 	stw	fp,60(sp)
    2a70:	dd400e15 	stw	r21,56(sp)
    2a74:	dd000d15 	stw	r20,52(sp)
    2a78:	dcc00c15 	stw	r19,48(sp)
    2a7c:	dc800b15 	stw	r18,44(sp)
    2a80:	dc400a15 	stw	r17,40(sp)
    2a84:	dc000915 	stw	r16,36(sp)
    2a88:	df000f04 	addi	fp,sp,60
    2a8c:	e13ff715 	stw	r4,-36(fp)
    2a90:	e17ff815 	stw	r5,-32(fp)
    2a94:	e1bff915 	stw	r6,-28(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    2a98:	e0bff917 	ldw	r2,-28(fp)
    2a9c:	1000e726 	beq	r2,zero,2e3c <sha1_Update+0x3d8>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount >> 3) % SHA1_BLOCK_LENGTH;
    2aa0:	e13ff717 	ldw	r4,-36(fp)
    2aa4:	20800517 	ldw	r2,20(r4)
    2aa8:	20c00617 	ldw	r3,24(r4)
    2aac:	1808977a 	slli	r4,r3,29
    2ab0:	100ed0fa 	srli	r7,r2,3
    2ab4:	21ceb03a 	or	r7,r4,r7
    2ab8:	1810d0fa 	srli	r8,r3,3
    2abc:	3805883a 	mov	r2,r7
    2ac0:	10800fcc 	andi	r2,r2,63
    2ac4:	e0bff315 	stw	r2,-52(fp)
	if (usedspace > 0) {
    2ac8:	e0bff317 	ldw	r2,-52(fp)
    2acc:	1000bb26 	beq	r2,zero,2dbc <sha1_Update+0x358>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA1_BLOCK_LENGTH - usedspace;
    2ad0:	00c01004 	movi	r3,64
    2ad4:	e0bff317 	ldw	r2,-52(fp)
    2ad8:	1885c83a 	sub	r2,r3,r2
    2adc:	e0bff415 	stw	r2,-48(fp)

		if (len >= freespace) {
    2ae0:	e0fff917 	ldw	r3,-28(fp)
    2ae4:	e0bff417 	ldw	r2,-48(fp)
    2ae8:	18804f36 	bltu	r3,r2,2c28 <sha1_Update+0x1c4>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    2aec:	e0bff717 	ldw	r2,-36(fp)
    2af0:	10c00704 	addi	r3,r2,28
    2af4:	e0bff317 	ldw	r2,-52(fp)
    2af8:	1885883a 	add	r2,r3,r2
    2afc:	e1bff417 	ldw	r6,-48(fp)
    2b00:	e17ff817 	ldw	r5,-32(fp)
    2b04:	1009883a 	mov	r4,r2
    2b08:	00463980 	call	46398 <memcpy>
			context->bitcount += freespace << 3;
    2b0c:	e0bff717 	ldw	r2,-36(fp)
    2b10:	11000517 	ldw	r4,20(r2)
    2b14:	11400617 	ldw	r5,24(r2)
    2b18:	e0bff417 	ldw	r2,-48(fp)
    2b1c:	100490fa 	slli	r2,r2,3
    2b20:	1029883a 	mov	r20,r2
    2b24:	002b883a 	mov	r21,zero
    2b28:	2505883a 	add	r2,r4,r20
    2b2c:	110d803a 	cmpltu	r6,r2,r4
    2b30:	2d47883a 	add	r3,r5,r21
    2b34:	30c9883a 	add	r4,r6,r3
    2b38:	2007883a 	mov	r3,r4
    2b3c:	1009883a 	mov	r4,r2
    2b40:	180b883a 	mov	r5,r3
    2b44:	e0bff717 	ldw	r2,-36(fp)
    2b48:	11000515 	stw	r4,20(r2)
    2b4c:	11400615 	stw	r5,24(r2)
			len -= freespace;
    2b50:	e0fff917 	ldw	r3,-28(fp)
    2b54:	e0bff417 	ldw	r2,-48(fp)
    2b58:	1885c83a 	sub	r2,r3,r2
    2b5c:	e0bff915 	stw	r2,-28(fp)
			data += freespace;
    2b60:	e0fff817 	ldw	r3,-32(fp)
    2b64:	e0bff417 	ldw	r2,-48(fp)
    2b68:	1885883a 	add	r2,r3,r2
    2b6c:	e0bff815 	stw	r2,-32(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    2b70:	e03ff115 	stw	zero,-60(fp)
    2b74:	00002006 	br	2bf8 <sha1_Update+0x194>
				REVERSE32(context->buffer[j],context->buffer[j]);
    2b78:	e0fff717 	ldw	r3,-36(fp)
    2b7c:	e0bff117 	ldw	r2,-60(fp)
    2b80:	108001c4 	addi	r2,r2,7
    2b84:	1085883a 	add	r2,r2,r2
    2b88:	1085883a 	add	r2,r2,r2
    2b8c:	1885883a 	add	r2,r3,r2
    2b90:	10800017 	ldw	r2,0(r2)
    2b94:	e0bff515 	stw	r2,-44(fp)
    2b98:	e0bff517 	ldw	r2,-44(fp)
    2b9c:	1004143a 	roli	r2,r2,16
    2ba0:	e0bff515 	stw	r2,-44(fp)
    2ba4:	e0fff517 	ldw	r3,-44(fp)
    2ba8:	00bfc074 	movhi	r2,65281
    2bac:	10bfc004 	addi	r2,r2,-256
    2bb0:	1884703a 	and	r2,r3,r2
    2bb4:	1006d23a 	srli	r3,r2,8
    2bb8:	e13ff517 	ldw	r4,-44(fp)
    2bbc:	00803ff4 	movhi	r2,255
    2bc0:	10803fc4 	addi	r2,r2,255
    2bc4:	2084703a 	and	r2,r4,r2
    2bc8:	1004923a 	slli	r2,r2,8
    2bcc:	1886b03a 	or	r3,r3,r2
    2bd0:	e13ff717 	ldw	r4,-36(fp)
    2bd4:	e0bff117 	ldw	r2,-60(fp)
    2bd8:	108001c4 	addi	r2,r2,7
    2bdc:	1085883a 	add	r2,r2,r2
    2be0:	1085883a 	add	r2,r2,r2
    2be4:	2085883a 	add	r2,r4,r2
    2be8:	10c00015 	stw	r3,0(r2)
			context->bitcount += freespace << 3;
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    2bec:	e0bff117 	ldw	r2,-60(fp)
    2bf0:	10800044 	addi	r2,r2,1
    2bf4:	e0bff115 	stw	r2,-60(fp)
    2bf8:	e0bff117 	ldw	r2,-60(fp)
    2bfc:	10800410 	cmplti	r2,r2,16
    2c00:	103fdd1e 	bne	r2,zero,2b78 <__alt_mem_epcs_flash_controller+0xfdff9b78>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			sha1_Transform(context->state, context->buffer, context->state);
    2c04:	e0fff717 	ldw	r3,-36(fp)
    2c08:	e0bff717 	ldw	r2,-36(fp)
    2c0c:	10800704 	addi	r2,r2,28
    2c10:	e13ff717 	ldw	r4,-36(fp)
    2c14:	200d883a 	mov	r6,r4
    2c18:	100b883a 	mov	r5,r2
    2c1c:	1809883a 	mov	r4,r3
    2c20:	00022b80 	call	22b8 <sha1_Transform>
    2c24:	00006506 	br	2dbc <sha1_Update+0x358>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    2c28:	e0bff717 	ldw	r2,-36(fp)
    2c2c:	10c00704 	addi	r3,r2,28
    2c30:	e0bff317 	ldw	r2,-52(fp)
    2c34:	1885883a 	add	r2,r3,r2
    2c38:	e1bff917 	ldw	r6,-28(fp)
    2c3c:	e17ff817 	ldw	r5,-32(fp)
    2c40:	1009883a 	mov	r4,r2
    2c44:	00463980 	call	46398 <memcpy>
			context->bitcount += len << 3;
    2c48:	e0bff717 	ldw	r2,-36(fp)
    2c4c:	11000517 	ldw	r4,20(r2)
    2c50:	11400617 	ldw	r5,24(r2)
    2c54:	e0bff917 	ldw	r2,-28(fp)
    2c58:	100490fa 	slli	r2,r2,3
    2c5c:	1025883a 	mov	r18,r2
    2c60:	0027883a 	mov	r19,zero
    2c64:	2485883a 	add	r2,r4,r18
    2c68:	110d803a 	cmpltu	r6,r2,r4
    2c6c:	2cc7883a 	add	r3,r5,r19
    2c70:	30c9883a 	add	r4,r6,r3
    2c74:	2007883a 	mov	r3,r4
    2c78:	1009883a 	mov	r4,r2
    2c7c:	180b883a 	mov	r5,r3
    2c80:	e0bff717 	ldw	r2,-36(fp)
    2c84:	11000515 	stw	r4,20(r2)
    2c88:	11400615 	stw	r5,24(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    2c8c:	e03ff415 	stw	zero,-48(fp)
    2c90:	e0bff417 	ldw	r2,-48(fp)
    2c94:	e0bff315 	stw	r2,-52(fp)
			return;
    2c98:	00006906 	br	2e40 <sha1_Update+0x3dc>
		}
	}
	while (len >= SHA1_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA1_BLOCK_LENGTH);
    2c9c:	e0bff717 	ldw	r2,-36(fp)
    2ca0:	10800704 	addi	r2,r2,28
    2ca4:	01801004 	movi	r6,64
    2ca8:	e17ff817 	ldw	r5,-32(fp)
    2cac:	1009883a 	mov	r4,r2
    2cb0:	00463980 	call	46398 <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    2cb4:	e03ff215 	stw	zero,-56(fp)
    2cb8:	00002006 	br	2d3c <sha1_Update+0x2d8>
			REVERSE32(context->buffer[j],context->buffer[j]);
    2cbc:	e0fff717 	ldw	r3,-36(fp)
    2cc0:	e0bff217 	ldw	r2,-56(fp)
    2cc4:	108001c4 	addi	r2,r2,7
    2cc8:	1085883a 	add	r2,r2,r2
    2ccc:	1085883a 	add	r2,r2,r2
    2cd0:	1885883a 	add	r2,r3,r2
    2cd4:	10800017 	ldw	r2,0(r2)
    2cd8:	e0bff615 	stw	r2,-40(fp)
    2cdc:	e0bff617 	ldw	r2,-40(fp)
    2ce0:	1004143a 	roli	r2,r2,16
    2ce4:	e0bff615 	stw	r2,-40(fp)
    2ce8:	e0fff617 	ldw	r3,-40(fp)
    2cec:	00bfc074 	movhi	r2,65281
    2cf0:	10bfc004 	addi	r2,r2,-256
    2cf4:	1884703a 	and	r2,r3,r2
    2cf8:	1006d23a 	srli	r3,r2,8
    2cfc:	e13ff617 	ldw	r4,-40(fp)
    2d00:	00803ff4 	movhi	r2,255
    2d04:	10803fc4 	addi	r2,r2,255
    2d08:	2084703a 	and	r2,r4,r2
    2d0c:	1004923a 	slli	r2,r2,8
    2d10:	1886b03a 	or	r3,r3,r2
    2d14:	e13ff717 	ldw	r4,-36(fp)
    2d18:	e0bff217 	ldw	r2,-56(fp)
    2d1c:	108001c4 	addi	r2,r2,7
    2d20:	1085883a 	add	r2,r2,r2
    2d24:	1085883a 	add	r2,r2,r2
    2d28:	2085883a 	add	r2,r4,r2
    2d2c:	10c00015 	stw	r3,0(r2)
	while (len >= SHA1_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA1_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    2d30:	e0bff217 	ldw	r2,-56(fp)
    2d34:	10800044 	addi	r2,r2,1
    2d38:	e0bff215 	stw	r2,-56(fp)
    2d3c:	e0bff217 	ldw	r2,-56(fp)
    2d40:	10800410 	cmplti	r2,r2,16
    2d44:	103fdd1e 	bne	r2,zero,2cbc <__alt_mem_epcs_flash_controller+0xfdff9cbc>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		sha1_Transform(context->state, context->buffer, context->state);
    2d48:	e0fff717 	ldw	r3,-36(fp)
    2d4c:	e0bff717 	ldw	r2,-36(fp)
    2d50:	10800704 	addi	r2,r2,28
    2d54:	e13ff717 	ldw	r4,-36(fp)
    2d58:	200d883a 	mov	r6,r4
    2d5c:	100b883a 	mov	r5,r2
    2d60:	1809883a 	mov	r4,r3
    2d64:	00022b80 	call	22b8 <sha1_Transform>
		context->bitcount += SHA1_BLOCK_LENGTH << 3;
    2d68:	e0bff717 	ldw	r2,-36(fp)
    2d6c:	11000517 	ldw	r4,20(r2)
    2d70:	11400617 	ldw	r5,24(r2)
    2d74:	01808004 	movi	r6,512
    2d78:	000f883a 	mov	r7,zero
    2d7c:	2185883a 	add	r2,r4,r6
    2d80:	1111803a 	cmpltu	r8,r2,r4
    2d84:	29c7883a 	add	r3,r5,r7
    2d88:	40c9883a 	add	r4,r8,r3
    2d8c:	2007883a 	mov	r3,r4
    2d90:	1009883a 	mov	r4,r2
    2d94:	180b883a 	mov	r5,r3
    2d98:	e0bff717 	ldw	r2,-36(fp)
    2d9c:	11000515 	stw	r4,20(r2)
    2da0:	11400615 	stw	r5,24(r2)
		len -= SHA1_BLOCK_LENGTH;
    2da4:	e0bff917 	ldw	r2,-28(fp)
    2da8:	10bff004 	addi	r2,r2,-64
    2dac:	e0bff915 	stw	r2,-28(fp)
		data += SHA1_BLOCK_LENGTH;
    2db0:	e0bff817 	ldw	r2,-32(fp)
    2db4:	10801004 	addi	r2,r2,64
    2db8:	e0bff815 	stw	r2,-32(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA1_BLOCK_LENGTH) {
    2dbc:	e0bff917 	ldw	r2,-28(fp)
    2dc0:	10801028 	cmpgeui	r2,r2,64
    2dc4:	103fb51e 	bne	r2,zero,2c9c <__alt_mem_epcs_flash_controller+0xfdff9c9c>
		sha1_Transform(context->state, context->buffer, context->state);
		context->bitcount += SHA1_BLOCK_LENGTH << 3;
		len -= SHA1_BLOCK_LENGTH;
		data += SHA1_BLOCK_LENGTH;
	}
	if (len > 0) {
    2dc8:	e0bff917 	ldw	r2,-28(fp)
    2dcc:	10001726 	beq	r2,zero,2e2c <sha1_Update+0x3c8>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    2dd0:	e0bff717 	ldw	r2,-36(fp)
    2dd4:	10800704 	addi	r2,r2,28
    2dd8:	e1bff917 	ldw	r6,-28(fp)
    2ddc:	e17ff817 	ldw	r5,-32(fp)
    2de0:	1009883a 	mov	r4,r2
    2de4:	00463980 	call	46398 <memcpy>
		context->bitcount += len << 3;
    2de8:	e0bff717 	ldw	r2,-36(fp)
    2dec:	11000517 	ldw	r4,20(r2)
    2df0:	11400617 	ldw	r5,24(r2)
    2df4:	e0bff917 	ldw	r2,-28(fp)
    2df8:	100490fa 	slli	r2,r2,3
    2dfc:	1021883a 	mov	r16,r2
    2e00:	0023883a 	mov	r17,zero
    2e04:	2405883a 	add	r2,r4,r16
    2e08:	110d803a 	cmpltu	r6,r2,r4
    2e0c:	2c47883a 	add	r3,r5,r17
    2e10:	30c9883a 	add	r4,r6,r3
    2e14:	2007883a 	mov	r3,r4
    2e18:	1009883a 	mov	r4,r2
    2e1c:	180b883a 	mov	r5,r3
    2e20:	e0bff717 	ldw	r2,-36(fp)
    2e24:	11000515 	stw	r4,20(r2)
    2e28:	11400615 	stw	r5,24(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    2e2c:	e03ff415 	stw	zero,-48(fp)
    2e30:	e0bff417 	ldw	r2,-48(fp)
    2e34:	e0bff315 	stw	r2,-52(fp)
    2e38:	00000106 	br	2e40 <sha1_Update+0x3dc>
void sha1_Update(SHA1_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    2e3c:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		context->bitcount += len << 3;
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    2e40:	e6fffa04 	addi	sp,fp,-24
    2e44:	dfc00717 	ldw	ra,28(sp)
    2e48:	df000617 	ldw	fp,24(sp)
    2e4c:	dd400517 	ldw	r21,20(sp)
    2e50:	dd000417 	ldw	r20,16(sp)
    2e54:	dcc00317 	ldw	r19,12(sp)
    2e58:	dc800217 	ldw	r18,8(sp)
    2e5c:	dc400117 	ldw	r17,4(sp)
    2e60:	dc000017 	ldw	r16,0(sp)
    2e64:	dec00804 	addi	sp,sp,32
    2e68:	f800283a 	ret

00002e6c <sha1_Final>:

void sha1_Final(SHA1_CTX* context, sha2_byte digest[]) {
    2e6c:	defff304 	addi	sp,sp,-52
    2e70:	dfc00c15 	stw	ra,48(sp)
    2e74:	df000b15 	stw	fp,44(sp)
    2e78:	dc400a15 	stw	r17,40(sp)
    2e7c:	dc000915 	stw	r16,36(sp)
    2e80:	df000b04 	addi	fp,sp,44
    2e84:	e13ffc15 	stw	r4,-16(fp)
    2e88:	e17ffd15 	stw	r5,-12(fp)
	unsigned int	usedspace;

	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    2e8c:	e0bffd17 	ldw	r2,-12(fp)
    2e90:	1000b826 	beq	r2,zero,3174 <sha1_Final+0x308>
		usedspace = (context->bitcount >> 3) % SHA1_BLOCK_LENGTH;
    2e94:	e13ffc17 	ldw	r4,-16(fp)
    2e98:	20800517 	ldw	r2,20(r4)
    2e9c:	20c00617 	ldw	r3,24(r4)
    2ea0:	1808977a 	slli	r4,r3,29
    2ea4:	100cd0fa 	srli	r6,r2,3
    2ea8:	218cb03a 	or	r6,r4,r6
    2eac:	180ed0fa 	srli	r7,r3,3
    2eb0:	3005883a 	mov	r2,r6
    2eb4:	10800fcc 	andi	r2,r2,63
    2eb8:	e0bff515 	stw	r2,-44(fp)
		/* Begin padding with a 1 bit: */
		((uint8_t*)context->buffer)[usedspace++] = 0x80;
    2ebc:	e0bffc17 	ldw	r2,-16(fp)
    2ec0:	10c00704 	addi	r3,r2,28
    2ec4:	e0bff517 	ldw	r2,-44(fp)
    2ec8:	11000044 	addi	r4,r2,1
    2ecc:	e13ff515 	stw	r4,-44(fp)
    2ed0:	1885883a 	add	r2,r3,r2
    2ed4:	00ffe004 	movi	r3,-128
    2ed8:	10c00005 	stb	r3,0(r2)

		if (usedspace > SHA1_SHORT_BLOCK_LENGTH) {
    2edc:	e0bff517 	ldw	r2,-44(fp)
    2ee0:	10800e70 	cmpltui	r2,r2,57
    2ee4:	1000371e 	bne	r2,zero,2fc4 <sha1_Final+0x158>
			memzero(((uint8_t*)context->buffer) + usedspace, SHA1_BLOCK_LENGTH - usedspace);
    2ee8:	e0bffc17 	ldw	r2,-16(fp)
    2eec:	10c00704 	addi	r3,r2,28
    2ef0:	e0bff517 	ldw	r2,-44(fp)
    2ef4:	1889883a 	add	r4,r3,r2
    2ef8:	00c01004 	movi	r3,64
    2efc:	e0bff517 	ldw	r2,-44(fp)
    2f00:	1885c83a 	sub	r2,r3,r2
    2f04:	100b883a 	mov	r5,r2
    2f08:	00013700 	call	1370 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    2f0c:	e03ff615 	stw	zero,-40(fp)
    2f10:	00002006 	br	2f94 <sha1_Final+0x128>
				REVERSE32(context->buffer[j],context->buffer[j]);
    2f14:	e0fffc17 	ldw	r3,-16(fp)
    2f18:	e0bff617 	ldw	r2,-40(fp)
    2f1c:	108001c4 	addi	r2,r2,7
    2f20:	1085883a 	add	r2,r2,r2
    2f24:	1085883a 	add	r2,r2,r2
    2f28:	1885883a 	add	r2,r3,r2
    2f2c:	10800017 	ldw	r2,0(r2)
    2f30:	e0bff915 	stw	r2,-28(fp)
    2f34:	e0bff917 	ldw	r2,-28(fp)
    2f38:	1004143a 	roli	r2,r2,16
    2f3c:	e0bff915 	stw	r2,-28(fp)
    2f40:	e0fff917 	ldw	r3,-28(fp)
    2f44:	00bfc074 	movhi	r2,65281
    2f48:	10bfc004 	addi	r2,r2,-256
    2f4c:	1884703a 	and	r2,r3,r2
    2f50:	1006d23a 	srli	r3,r2,8
    2f54:	e13ff917 	ldw	r4,-28(fp)
    2f58:	00803ff4 	movhi	r2,255
    2f5c:	10803fc4 	addi	r2,r2,255
    2f60:	2084703a 	and	r2,r4,r2
    2f64:	1004923a 	slli	r2,r2,8
    2f68:	1886b03a 	or	r3,r3,r2
    2f6c:	e13ffc17 	ldw	r4,-16(fp)
    2f70:	e0bff617 	ldw	r2,-40(fp)
    2f74:	108001c4 	addi	r2,r2,7
    2f78:	1085883a 	add	r2,r2,r2
    2f7c:	1085883a 	add	r2,r2,r2
    2f80:	2085883a 	add	r2,r4,r2
    2f84:	10c00015 	stw	r3,0(r2)
		if (usedspace > SHA1_SHORT_BLOCK_LENGTH) {
			memzero(((uint8_t*)context->buffer) + usedspace, SHA1_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    2f88:	e0bff617 	ldw	r2,-40(fp)
    2f8c:	10800044 	addi	r2,r2,1
    2f90:	e0bff615 	stw	r2,-40(fp)
    2f94:	e0bff617 	ldw	r2,-40(fp)
    2f98:	10800410 	cmplti	r2,r2,16
    2f9c:	103fdd1e 	bne	r2,zero,2f14 <__alt_mem_epcs_flash_controller+0xfdff9f14>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			/* Do second-to-last transform: */
			sha1_Transform(context->state, context->buffer, context->state);
    2fa0:	e0fffc17 	ldw	r3,-16(fp)
    2fa4:	e0bffc17 	ldw	r2,-16(fp)
    2fa8:	10800704 	addi	r2,r2,28
    2fac:	e13ffc17 	ldw	r4,-16(fp)
    2fb0:	200d883a 	mov	r6,r4
    2fb4:	100b883a 	mov	r5,r2
    2fb8:	1809883a 	mov	r4,r3
    2fbc:	00022b80 	call	22b8 <sha1_Transform>

			/* And prepare the last transform: */
			usedspace = 0;
    2fc0:	e03ff515 	stw	zero,-44(fp)
		}
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA1_SHORT_BLOCK_LENGTH - usedspace);
    2fc4:	e0bffc17 	ldw	r2,-16(fp)
    2fc8:	10c00704 	addi	r3,r2,28
    2fcc:	e0bff517 	ldw	r2,-44(fp)
    2fd0:	1889883a 	add	r4,r3,r2
    2fd4:	00c00e04 	movi	r3,56
    2fd8:	e0bff517 	ldw	r2,-44(fp)
    2fdc:	1885c83a 	sub	r2,r3,r2
    2fe0:	100b883a 	mov	r5,r2
    2fe4:	00013700 	call	1370 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    2fe8:	e03ff715 	stw	zero,-36(fp)
    2fec:	00002006 	br	3070 <sha1_Final+0x204>
			REVERSE32(context->buffer[j],context->buffer[j]);
    2ff0:	e0fffc17 	ldw	r3,-16(fp)
    2ff4:	e0bff717 	ldw	r2,-36(fp)
    2ff8:	108001c4 	addi	r2,r2,7
    2ffc:	1085883a 	add	r2,r2,r2
    3000:	1085883a 	add	r2,r2,r2
    3004:	1885883a 	add	r2,r3,r2
    3008:	10800017 	ldw	r2,0(r2)
    300c:	e0bffa15 	stw	r2,-24(fp)
    3010:	e0bffa17 	ldw	r2,-24(fp)
    3014:	1004143a 	roli	r2,r2,16
    3018:	e0bffa15 	stw	r2,-24(fp)
    301c:	e0fffa17 	ldw	r3,-24(fp)
    3020:	00bfc074 	movhi	r2,65281
    3024:	10bfc004 	addi	r2,r2,-256
    3028:	1884703a 	and	r2,r3,r2
    302c:	1006d23a 	srli	r3,r2,8
    3030:	e13ffa17 	ldw	r4,-24(fp)
    3034:	00803ff4 	movhi	r2,255
    3038:	10803fc4 	addi	r2,r2,255
    303c:	2084703a 	and	r2,r4,r2
    3040:	1004923a 	slli	r2,r2,8
    3044:	1886b03a 	or	r3,r3,r2
    3048:	e13ffc17 	ldw	r4,-16(fp)
    304c:	e0bff717 	ldw	r2,-36(fp)
    3050:	108001c4 	addi	r2,r2,7
    3054:	1085883a 	add	r2,r2,r2
    3058:	1085883a 	add	r2,r2,r2
    305c:	2085883a 	add	r2,r4,r2
    3060:	10c00015 	stw	r3,0(r2)
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA1_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    3064:	e0bff717 	ldw	r2,-36(fp)
    3068:	10800044 	addi	r2,r2,1
    306c:	e0bff715 	stw	r2,-36(fp)
    3070:	e0bff717 	ldw	r2,-36(fp)
    3074:	10800390 	cmplti	r2,r2,14
    3078:	103fdd1e 	bne	r2,zero,2ff0 <__alt_mem_epcs_flash_controller+0xfdff9ff0>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Set the bit count: */
		context->buffer[14] = context->bitcount >> 32;
    307c:	e13ffc17 	ldw	r4,-16(fp)
    3080:	20800517 	ldw	r2,20(r4)
    3084:	20c00617 	ldw	r3,24(r4)
    3088:	1820d83a 	srl	r16,r3,zero
    308c:	0023883a 	mov	r17,zero
    3090:	8007883a 	mov	r3,r16
    3094:	e0bffc17 	ldw	r2,-16(fp)
    3098:	10c01515 	stw	r3,84(r2)
		context->buffer[15] = context->bitcount & 0xffffffff;
    309c:	e13ffc17 	ldw	r4,-16(fp)
    30a0:	20800517 	ldw	r2,20(r4)
    30a4:	20c00617 	ldw	r3,24(r4)
    30a8:	1007883a 	mov	r3,r2
    30ac:	e0bffc17 	ldw	r2,-16(fp)
    30b0:	10c01615 	stw	r3,88(r2)

		/* Final transform: */
		sha1_Transform(context->state, context->buffer, context->state);
    30b4:	e0fffc17 	ldw	r3,-16(fp)
    30b8:	e0bffc17 	ldw	r2,-16(fp)
    30bc:	10800704 	addi	r2,r2,28
    30c0:	e13ffc17 	ldw	r4,-16(fp)
    30c4:	200d883a 	mov	r6,r4
    30c8:	100b883a 	mov	r5,r2
    30cc:	1809883a 	mov	r4,r3
    30d0:	00022b80 	call	22b8 <sha1_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 5; j++) {
    30d4:	e03ff815 	stw	zero,-32(fp)
    30d8:	00001e06 	br	3154 <sha1_Final+0x2e8>
			REVERSE32(context->state[j],context->state[j]);
    30dc:	e0fffc17 	ldw	r3,-16(fp)
    30e0:	e0bff817 	ldw	r2,-32(fp)
    30e4:	1085883a 	add	r2,r2,r2
    30e8:	1085883a 	add	r2,r2,r2
    30ec:	1885883a 	add	r2,r3,r2
    30f0:	10800017 	ldw	r2,0(r2)
    30f4:	e0bffb15 	stw	r2,-20(fp)
    30f8:	e0bffb17 	ldw	r2,-20(fp)
    30fc:	1004143a 	roli	r2,r2,16
    3100:	e0bffb15 	stw	r2,-20(fp)
    3104:	e0fffb17 	ldw	r3,-20(fp)
    3108:	00bfc074 	movhi	r2,65281
    310c:	10bfc004 	addi	r2,r2,-256
    3110:	1884703a 	and	r2,r3,r2
    3114:	1006d23a 	srli	r3,r2,8
    3118:	e13ffb17 	ldw	r4,-20(fp)
    311c:	00803ff4 	movhi	r2,255
    3120:	10803fc4 	addi	r2,r2,255
    3124:	2084703a 	and	r2,r4,r2
    3128:	1004923a 	slli	r2,r2,8
    312c:	1886b03a 	or	r3,r3,r2
    3130:	e13ffc17 	ldw	r4,-16(fp)
    3134:	e0bff817 	ldw	r2,-32(fp)
    3138:	1085883a 	add	r2,r2,r2
    313c:	1085883a 	add	r2,r2,r2
    3140:	2085883a 	add	r2,r4,r2
    3144:	10c00015 	stw	r3,0(r2)
		/* Final transform: */
		sha1_Transform(context->state, context->buffer, context->state);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 5; j++) {
    3148:	e0bff817 	ldw	r2,-32(fp)
    314c:	10800044 	addi	r2,r2,1
    3150:	e0bff815 	stw	r2,-32(fp)
    3154:	e0bff817 	ldw	r2,-32(fp)
    3158:	10800150 	cmplti	r2,r2,5
    315c:	103fdf1e 	bne	r2,zero,30dc <__alt_mem_epcs_flash_controller+0xfdffa0dc>
			REVERSE32(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA1_DIGEST_LENGTH);
    3160:	e0bffc17 	ldw	r2,-16(fp)
    3164:	01800504 	movi	r6,20
    3168:	100b883a 	mov	r5,r2
    316c:	e13ffd17 	ldw	r4,-12(fp)
    3170:	00463980 	call	46398 <memcpy>
	}

	/* Clean up state data: */
	memzero(context, sizeof(SHA1_CTX));
    3174:	01401704 	movi	r5,92
    3178:	e13ffc17 	ldw	r4,-16(fp)
    317c:	00013700 	call	1370 <memzero>
	usedspace = 0;
    3180:	e03ff515 	stw	zero,-44(fp)
}
    3184:	0001883a 	nop
    3188:	e6fffe04 	addi	sp,fp,-8
    318c:	dfc00317 	ldw	ra,12(sp)
    3190:	df000217 	ldw	fp,8(sp)
    3194:	dc400117 	ldw	r17,4(sp)
    3198:	dc000017 	ldw	r16,0(sp)
    319c:	dec00404 	addi	sp,sp,16
    31a0:	f800283a 	ret

000031a4 <sha1_End>:

char *sha1_End(SHA1_CTX* context, char buffer[]) {
    31a4:	defff504 	addi	sp,sp,-44
    31a8:	dfc00a15 	stw	ra,40(sp)
    31ac:	df000915 	stw	fp,36(sp)
    31b0:	df000904 	addi	fp,sp,36
    31b4:	e13ffe15 	stw	r4,-8(fp)
    31b8:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA1_DIGEST_LENGTH], *d = digest;
    31bc:	e0bff904 	addi	r2,fp,-28
    31c0:	e0bff715 	stw	r2,-36(fp)
	int		i;

	if (buffer != (char*)0) {
    31c4:	e0bfff17 	ldw	r2,-4(fp)
    31c8:	10002926 	beq	r2,zero,3270 <sha1_End+0xcc>
		sha1_Final(context, digest);
    31cc:	e0bff904 	addi	r2,fp,-28
    31d0:	100b883a 	mov	r5,r2
    31d4:	e13ffe17 	ldw	r4,-8(fp)
    31d8:	0002e6c0 	call	2e6c <sha1_Final>

		for (i = 0; i < SHA1_DIGEST_LENGTH; i++) {
    31dc:	e03ff815 	stw	zero,-32(fp)
    31e0:	00001d06 	br	3258 <sha1_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    31e4:	e0bfff17 	ldw	r2,-4(fp)
    31e8:	10c00044 	addi	r3,r2,1
    31ec:	e0ffff15 	stw	r3,-4(fp)
    31f0:	d1200017 	ldw	r4,-32768(gp)
    31f4:	e0fff717 	ldw	r3,-36(fp)
    31f8:	18c00003 	ldbu	r3,0(r3)
    31fc:	18c03fcc 	andi	r3,r3,255
    3200:	1806d13a 	srli	r3,r3,4
    3204:	18c03fcc 	andi	r3,r3,255
    3208:	20c7883a 	add	r3,r4,r3
    320c:	18c00003 	ldbu	r3,0(r3)
    3210:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    3214:	e0bfff17 	ldw	r2,-4(fp)
    3218:	10c00044 	addi	r3,r2,1
    321c:	e0ffff15 	stw	r3,-4(fp)
    3220:	d1200017 	ldw	r4,-32768(gp)
    3224:	e0fff717 	ldw	r3,-36(fp)
    3228:	18c00003 	ldbu	r3,0(r3)
    322c:	18c03fcc 	andi	r3,r3,255
    3230:	18c003cc 	andi	r3,r3,15
    3234:	20c7883a 	add	r3,r4,r3
    3238:	18c00003 	ldbu	r3,0(r3)
    323c:	10c00005 	stb	r3,0(r2)
			d++;
    3240:	e0bff717 	ldw	r2,-36(fp)
    3244:	10800044 	addi	r2,r2,1
    3248:	e0bff715 	stw	r2,-36(fp)
	int		i;

	if (buffer != (char*)0) {
		sha1_Final(context, digest);

		for (i = 0; i < SHA1_DIGEST_LENGTH; i++) {
    324c:	e0bff817 	ldw	r2,-32(fp)
    3250:	10800044 	addi	r2,r2,1
    3254:	e0bff815 	stw	r2,-32(fp)
    3258:	e0bff817 	ldw	r2,-32(fp)
    325c:	10800510 	cmplti	r2,r2,20
    3260:	103fe01e 	bne	r2,zero,31e4 <__alt_mem_epcs_flash_controller+0xfdffa1e4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    3264:	e0bfff17 	ldw	r2,-4(fp)
    3268:	10000005 	stb	zero,0(r2)
    326c:	00000306 	br	327c <sha1_End+0xd8>
	} else {
		memzero(context, sizeof(SHA1_CTX));
    3270:	01401704 	movi	r5,92
    3274:	e13ffe17 	ldw	r4,-8(fp)
    3278:	00013700 	call	1370 <memzero>
	}
	memzero(digest, SHA1_DIGEST_LENGTH);
    327c:	e0bff904 	addi	r2,fp,-28
    3280:	01400504 	movi	r5,20
    3284:	1009883a 	mov	r4,r2
    3288:	00013700 	call	1370 <memzero>
	return buffer;
    328c:	e0bfff17 	ldw	r2,-4(fp)
}
    3290:	e037883a 	mov	sp,fp
    3294:	dfc00117 	ldw	ra,4(sp)
    3298:	df000017 	ldw	fp,0(sp)
    329c:	dec00204 	addi	sp,sp,8
    32a0:	f800283a 	ret

000032a4 <sha1_Raw>:

void sha1_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA1_DIGEST_LENGTH]) {
    32a4:	deffe404 	addi	sp,sp,-112
    32a8:	dfc01b15 	stw	ra,108(sp)
    32ac:	df001a15 	stw	fp,104(sp)
    32b0:	df001a04 	addi	fp,sp,104
    32b4:	e13ffd15 	stw	r4,-12(fp)
    32b8:	e17ffe15 	stw	r5,-8(fp)
    32bc:	e1bfff15 	stw	r6,-4(fp)
	SHA1_CTX	context;
	sha1_Init(&context);
    32c0:	e13fe604 	addi	r4,fp,-104
    32c4:	00022540 	call	2254 <sha1_Init>
	sha1_Update(&context, data, len);
    32c8:	e1bffe17 	ldw	r6,-8(fp)
    32cc:	e17ffd17 	ldw	r5,-12(fp)
    32d0:	e13fe604 	addi	r4,fp,-104
    32d4:	0002a640 	call	2a64 <sha1_Update>
	sha1_Final(&context, digest);
    32d8:	e17fff17 	ldw	r5,-4(fp)
    32dc:	e13fe604 	addi	r4,fp,-104
    32e0:	0002e6c0 	call	2e6c <sha1_Final>
}
    32e4:	0001883a 	nop
    32e8:	e037883a 	mov	sp,fp
    32ec:	dfc00117 	ldw	ra,4(sp)
    32f0:	df000017 	ldw	fp,0(sp)
    32f4:	dec00204 	addi	sp,sp,8
    32f8:	f800283a 	ret

000032fc <sha1_Data>:

char* sha1_Data(const sha2_byte* data, size_t len, char digest[SHA1_DIGEST_STRING_LENGTH]) {
    32fc:	deffe404 	addi	sp,sp,-112
    3300:	dfc01b15 	stw	ra,108(sp)
    3304:	df001a15 	stw	fp,104(sp)
    3308:	df001a04 	addi	fp,sp,104
    330c:	e13ffd15 	stw	r4,-12(fp)
    3310:	e17ffe15 	stw	r5,-8(fp)
    3314:	e1bfff15 	stw	r6,-4(fp)
	SHA1_CTX	context;

	sha1_Init(&context);
    3318:	e13fe604 	addi	r4,fp,-104
    331c:	00022540 	call	2254 <sha1_Init>
	sha1_Update(&context, data, len);
    3320:	e1bffe17 	ldw	r6,-8(fp)
    3324:	e17ffd17 	ldw	r5,-12(fp)
    3328:	e13fe604 	addi	r4,fp,-104
    332c:	0002a640 	call	2a64 <sha1_Update>
	return sha1_End(&context, digest);
    3330:	e17fff17 	ldw	r5,-4(fp)
    3334:	e13fe604 	addi	r4,fp,-104
    3338:	00031a40 	call	31a4 <sha1_End>
}
    333c:	e037883a 	mov	sp,fp
    3340:	dfc00117 	ldw	ra,4(sp)
    3344:	df000017 	ldw	fp,0(sp)
    3348:	dec00204 	addi	sp,sp,8
    334c:	f800283a 	ret

00003350 <sha256_Init>:

/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context) {
    3350:	defffd04 	addi	sp,sp,-12
    3354:	dfc00215 	stw	ra,8(sp)
    3358:	df000115 	stw	fp,4(sp)
    335c:	df000104 	addi	fp,sp,4
    3360:	e13fff15 	stw	r4,-4(fp)
	if (context == (SHA256_CTX*)0) {
    3364:	e0bfff17 	ldw	r2,-4(fp)
    3368:	10000f26 	beq	r2,zero,33a8 <sha256_Init+0x58>
		return;
	}
	MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
    336c:	e0bfff17 	ldw	r2,-4(fp)
    3370:	01800804 	movi	r6,32
    3374:	01400174 	movhi	r5,5
    3378:	29476c04 	addi	r5,r5,7600
    337c:	1009883a 	mov	r4,r2
    3380:	00463980 	call	46398 <memcpy>
	memzero(context->buffer, SHA256_BLOCK_LENGTH);
    3384:	e0bfff17 	ldw	r2,-4(fp)
    3388:	10800a04 	addi	r2,r2,40
    338c:	01401004 	movi	r5,64
    3390:	1009883a 	mov	r4,r2
    3394:	00013700 	call	1370 <memzero>
	context->bitcount = 0;
    3398:	e0bfff17 	ldw	r2,-4(fp)
    339c:	10000815 	stw	zero,32(r2)
    33a0:	10000915 	stw	zero,36(r2)
    33a4:	00000106 	br	33ac <sha256_Init+0x5c>
}

/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context) {
	if (context == (SHA256_CTX*)0) {
		return;
    33a8:	0001883a 	nop
	}
	MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
	memzero(context->buffer, SHA256_BLOCK_LENGTH);
	context->bitcount = 0;
}
    33ac:	e037883a 	mov	sp,fp
    33b0:	dfc00117 	ldw	ra,4(sp)
    33b4:	df000017 	ldw	fp,0(sp)
    33b8:	dec00204 	addi	sp,sp,8
    33bc:	f800283a 	ret

000033c0 <sha256_Transform>:
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha256_Transform(const sha2_word32* state_in, const sha2_word32* data, sha2_word32* state_out) {
    33c0:	deffdf04 	addi	sp,sp,-132
    33c4:	df002015 	stw	fp,128(sp)
    33c8:	df002004 	addi	fp,sp,128
    33cc:	e13ffd15 	stw	r4,-12(fp)
    33d0:	e17ffe15 	stw	r5,-8(fp)
    33d4:	e1bfff15 	stw	r6,-4(fp)
	sha2_word32	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word32	T1, T2, W256[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    33d8:	e0bffd17 	ldw	r2,-12(fp)
    33dc:	10800017 	ldw	r2,0(r2)
    33e0:	e0bfe015 	stw	r2,-128(fp)
	b = state_in[1];
    33e4:	e0bffd17 	ldw	r2,-12(fp)
    33e8:	10800117 	ldw	r2,4(r2)
    33ec:	e0bfe115 	stw	r2,-124(fp)
	c = state_in[2];
    33f0:	e0bffd17 	ldw	r2,-12(fp)
    33f4:	10800217 	ldw	r2,8(r2)
    33f8:	e0bfe215 	stw	r2,-120(fp)
	d = state_in[3];
    33fc:	e0bffd17 	ldw	r2,-12(fp)
    3400:	10800317 	ldw	r2,12(r2)
    3404:	e0bfe315 	stw	r2,-116(fp)
	e = state_in[4];
    3408:	e0bffd17 	ldw	r2,-12(fp)
    340c:	10800417 	ldw	r2,16(r2)
    3410:	e0bfe415 	stw	r2,-112(fp)
	f = state_in[5];
    3414:	e0bffd17 	ldw	r2,-12(fp)
    3418:	10800517 	ldw	r2,20(r2)
    341c:	e0bfe515 	stw	r2,-108(fp)
	g = state_in[6];
    3420:	e0bffd17 	ldw	r2,-12(fp)
    3424:	10800617 	ldw	r2,24(r2)
    3428:	e0bfe615 	stw	r2,-104(fp)
	h = state_in[7];
    342c:	e0bffd17 	ldw	r2,-12(fp)
    3430:	10800717 	ldw	r2,28(r2)
    3434:	e0bfe715 	stw	r2,-100(fp)

	j = 0;
    3438:	e03fe815 	stw	zero,-96(fp)
	do {
		/* Apply the SHA-256 compression function to update a..h with copy */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
    343c:	e0ffe417 	ldw	r3,-112(fp)
    3440:	00800184 	movi	r2,6
    3444:	1886583a 	ror	r3,r3,r2
    3448:	e13fe417 	ldw	r4,-112(fp)
    344c:	008002c4 	movi	r2,11
    3450:	2084583a 	ror	r2,r4,r2
    3454:	1886f03a 	xor	r3,r3,r2
    3458:	e0bfe417 	ldw	r2,-112(fp)
    345c:	100411fa 	roli	r2,r2,7
    3460:	1886f03a 	xor	r3,r3,r2
    3464:	e0bfe717 	ldw	r2,-100(fp)
    3468:	1887883a 	add	r3,r3,r2
    346c:	e13fe417 	ldw	r4,-112(fp)
    3470:	e0bfe517 	ldw	r2,-108(fp)
    3474:	2088703a 	and	r4,r4,r2
    3478:	e0bfe417 	ldw	r2,-112(fp)
    347c:	008a303a 	nor	r5,zero,r2
    3480:	e0bfe617 	ldw	r2,-104(fp)
    3484:	2884703a 	and	r2,r5,r2
    3488:	2084f03a 	xor	r2,r4,r2
    348c:	1889883a 	add	r4,r3,r2
    3490:	00800174 	movhi	r2,5
    3494:	10872c04 	addi	r2,r2,7344
    3498:	e0ffe817 	ldw	r3,-96(fp)
    349c:	18c7883a 	add	r3,r3,r3
    34a0:	18c7883a 	add	r3,r3,r3
    34a4:	10c5883a 	add	r2,r2,r3
    34a8:	10800017 	ldw	r2,0(r2)
    34ac:	2087883a 	add	r3,r4,r2
    34b0:	e0bffe17 	ldw	r2,-8(fp)
    34b4:	11000104 	addi	r4,r2,4
    34b8:	e13ffe15 	stw	r4,-8(fp)
    34bc:	11000017 	ldw	r4,0(r2)
    34c0:	e0bfe817 	ldw	r2,-96(fp)
    34c4:	1085883a 	add	r2,r2,r2
    34c8:	1085883a 	add	r2,r2,r2
    34cc:	e17fe004 	addi	r5,fp,-128
    34d0:	2885883a 	add	r2,r5,r2
    34d4:	10800d04 	addi	r2,r2,52
    34d8:	11000015 	stw	r4,0(r2)
    34dc:	e0bfe817 	ldw	r2,-96(fp)
    34e0:	1085883a 	add	r2,r2,r2
    34e4:	1085883a 	add	r2,r2,r2
    34e8:	e1bfe004 	addi	r6,fp,-128
    34ec:	3085883a 	add	r2,r6,r2
    34f0:	10800d04 	addi	r2,r2,52
    34f4:	10800017 	ldw	r2,0(r2)
    34f8:	1885883a 	add	r2,r3,r2
    34fc:	e0bfe915 	stw	r2,-92(fp)
		T2 = Sigma0_256(a) + Maj(a, b, c);
    3500:	e0ffe017 	ldw	r3,-128(fp)
    3504:	00800084 	movi	r2,2
    3508:	1886583a 	ror	r3,r3,r2
    350c:	e13fe017 	ldw	r4,-128(fp)
    3510:	00800344 	movi	r2,13
    3514:	2084583a 	ror	r2,r4,r2
    3518:	1886f03a 	xor	r3,r3,r2
    351c:	e0bfe017 	ldw	r2,-128(fp)
    3520:	100412ba 	roli	r2,r2,10
    3524:	1886f03a 	xor	r3,r3,r2
    3528:	e13fe017 	ldw	r4,-128(fp)
    352c:	e0bfe117 	ldw	r2,-124(fp)
    3530:	2088703a 	and	r4,r4,r2
    3534:	e17fe017 	ldw	r5,-128(fp)
    3538:	e0bfe217 	ldw	r2,-120(fp)
    353c:	2884703a 	and	r2,r5,r2
    3540:	2088f03a 	xor	r4,r4,r2
    3544:	e17fe117 	ldw	r5,-124(fp)
    3548:	e0bfe217 	ldw	r2,-120(fp)
    354c:	2884703a 	and	r2,r5,r2
    3550:	2084f03a 	xor	r2,r4,r2
    3554:	1885883a 	add	r2,r3,r2
    3558:	e0bfea15 	stw	r2,-88(fp)
		h = g;
    355c:	e0bfe617 	ldw	r2,-104(fp)
    3560:	e0bfe715 	stw	r2,-100(fp)
		g = f;
    3564:	e0bfe517 	ldw	r2,-108(fp)
    3568:	e0bfe615 	stw	r2,-104(fp)
		f = e;
    356c:	e0bfe417 	ldw	r2,-112(fp)
    3570:	e0bfe515 	stw	r2,-108(fp)
		e = d + T1;
    3574:	e0ffe317 	ldw	r3,-116(fp)
    3578:	e0bfe917 	ldw	r2,-92(fp)
    357c:	1885883a 	add	r2,r3,r2
    3580:	e0bfe415 	stw	r2,-112(fp)
		d = c;
    3584:	e0bfe217 	ldw	r2,-120(fp)
    3588:	e0bfe315 	stw	r2,-116(fp)
		c = b;
    358c:	e0bfe117 	ldw	r2,-124(fp)
    3590:	e0bfe215 	stw	r2,-120(fp)
		b = a;
    3594:	e0bfe017 	ldw	r2,-128(fp)
    3598:	e0bfe115 	stw	r2,-124(fp)
		a = T1 + T2;
    359c:	e0ffe917 	ldw	r3,-92(fp)
    35a0:	e0bfea17 	ldw	r2,-88(fp)
    35a4:	1885883a 	add	r2,r3,r2
    35a8:	e0bfe015 	stw	r2,-128(fp)

		j++;
    35ac:	e0bfe817 	ldw	r2,-96(fp)
    35b0:	10800044 	addi	r2,r2,1
    35b4:	e0bfe815 	stw	r2,-96(fp)
	} while (j < 16);
    35b8:	e0bfe817 	ldw	r2,-96(fp)
    35bc:	10800410 	cmplti	r2,r2,16
    35c0:	103f9e1e 	bne	r2,zero,343c <__alt_mem_epcs_flash_controller+0xfdffa43c>

	do {
		/* Part of the message block expansion: */
		s0 = W256[(j+1)&0x0f];
    35c4:	e0bfe817 	ldw	r2,-96(fp)
    35c8:	10800044 	addi	r2,r2,1
    35cc:	108003cc 	andi	r2,r2,15
    35d0:	1085883a 	add	r2,r2,r2
    35d4:	1085883a 	add	r2,r2,r2
    35d8:	e0ffe004 	addi	r3,fp,-128
    35dc:	1885883a 	add	r2,r3,r2
    35e0:	10800d04 	addi	r2,r2,52
    35e4:	10800017 	ldw	r2,0(r2)
    35e8:	e0bfeb15 	stw	r2,-84(fp)
		s0 = sigma0_256(s0);
    35ec:	e0ffeb17 	ldw	r3,-84(fp)
    35f0:	008001c4 	movi	r2,7
    35f4:	1886583a 	ror	r3,r3,r2
    35f8:	e0bfeb17 	ldw	r2,-84(fp)
    35fc:	100413ba 	roli	r2,r2,14
    3600:	1886f03a 	xor	r3,r3,r2
    3604:	e0bfeb17 	ldw	r2,-84(fp)
    3608:	1004d0fa 	srli	r2,r2,3
    360c:	1884f03a 	xor	r2,r3,r2
    3610:	e0bfeb15 	stw	r2,-84(fp)
		s1 = W256[(j+14)&0x0f];	
    3614:	e0bfe817 	ldw	r2,-96(fp)
    3618:	10800384 	addi	r2,r2,14
    361c:	108003cc 	andi	r2,r2,15
    3620:	1085883a 	add	r2,r2,r2
    3624:	1085883a 	add	r2,r2,r2
    3628:	e13fe004 	addi	r4,fp,-128
    362c:	2085883a 	add	r2,r4,r2
    3630:	10800d04 	addi	r2,r2,52
    3634:	10800017 	ldw	r2,0(r2)
    3638:	e0bfec15 	stw	r2,-80(fp)
		s1 = sigma1_256(s1);
    363c:	e0bfec17 	ldw	r2,-80(fp)
    3640:	100613fa 	roli	r3,r2,15
    3644:	e0bfec17 	ldw	r2,-80(fp)
    3648:	1004137a 	roli	r2,r2,13
    364c:	1886f03a 	xor	r3,r3,r2
    3650:	e0bfec17 	ldw	r2,-80(fp)
    3654:	1004d2ba 	srli	r2,r2,10
    3658:	1884f03a 	xor	r2,r3,r2
    365c:	e0bfec15 	stw	r2,-80(fp)

		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + 
    3660:	e0ffe417 	ldw	r3,-112(fp)
    3664:	00800184 	movi	r2,6
    3668:	1886583a 	ror	r3,r3,r2
    366c:	e13fe417 	ldw	r4,-112(fp)
    3670:	008002c4 	movi	r2,11
    3674:	2084583a 	ror	r2,r4,r2
    3678:	1886f03a 	xor	r3,r3,r2
    367c:	e0bfe417 	ldw	r2,-112(fp)
    3680:	100411fa 	roli	r2,r2,7
    3684:	1886f03a 	xor	r3,r3,r2
    3688:	e0bfe717 	ldw	r2,-100(fp)
    368c:	1887883a 	add	r3,r3,r2
    3690:	e13fe417 	ldw	r4,-112(fp)
    3694:	e0bfe517 	ldw	r2,-108(fp)
    3698:	2088703a 	and	r4,r4,r2
    369c:	e0bfe417 	ldw	r2,-112(fp)
    36a0:	008a303a 	nor	r5,zero,r2
    36a4:	e0bfe617 	ldw	r2,-104(fp)
    36a8:	2884703a 	and	r2,r5,r2
    36ac:	2084f03a 	xor	r2,r4,r2
    36b0:	1889883a 	add	r4,r3,r2
    36b4:	00800174 	movhi	r2,5
    36b8:	10872c04 	addi	r2,r2,7344
    36bc:	e0ffe817 	ldw	r3,-96(fp)
    36c0:	18c7883a 	add	r3,r3,r3
    36c4:	18c7883a 	add	r3,r3,r3
    36c8:	10c5883a 	add	r2,r2,r3
    36cc:	10800017 	ldw	r2,0(r2)
    36d0:	2089883a 	add	r4,r4,r2
		     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
    36d4:	e0bfe817 	ldw	r2,-96(fp)
    36d8:	108003cc 	andi	r2,r2,15
    36dc:	e0ffe817 	ldw	r3,-96(fp)
    36e0:	18c003cc 	andi	r3,r3,15
    36e4:	18c7883a 	add	r3,r3,r3
    36e8:	18c7883a 	add	r3,r3,r3
    36ec:	e17fe004 	addi	r5,fp,-128
    36f0:	28c7883a 	add	r3,r5,r3
    36f4:	18c00d04 	addi	r3,r3,52
    36f8:	19400017 	ldw	r5,0(r3)
    36fc:	e0ffe817 	ldw	r3,-96(fp)
    3700:	18c00244 	addi	r3,r3,9
    3704:	18c003cc 	andi	r3,r3,15
    3708:	18c7883a 	add	r3,r3,r3
    370c:	18c7883a 	add	r3,r3,r3
    3710:	e1bfe004 	addi	r6,fp,-128
    3714:	30c7883a 	add	r3,r6,r3
    3718:	18c00d04 	addi	r3,r3,52
    371c:	19800017 	ldw	r6,0(r3)
    3720:	e0ffec17 	ldw	r3,-80(fp)
    3724:	30cd883a 	add	r6,r6,r3
    3728:	e0ffeb17 	ldw	r3,-84(fp)
    372c:	30c7883a 	add	r3,r6,r3
    3730:	28cb883a 	add	r5,r5,r3
    3734:	1087883a 	add	r3,r2,r2
    3738:	18c7883a 	add	r3,r3,r3
    373c:	e1bfe004 	addi	r6,fp,-128
    3740:	30c7883a 	add	r3,r6,r3
    3744:	18c00d04 	addi	r3,r3,52
    3748:	19400015 	stw	r5,0(r3)
    374c:	1085883a 	add	r2,r2,r2
    3750:	1085883a 	add	r2,r2,r2
    3754:	e0ffe004 	addi	r3,fp,-128
    3758:	1885883a 	add	r2,r3,r2
    375c:	10800d04 	addi	r2,r2,52
    3760:	10800017 	ldw	r2,0(r2)
		s0 = sigma0_256(s0);
		s1 = W256[(j+14)&0x0f];	
		s1 = sigma1_256(s1);

		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + 
    3764:	2085883a 	add	r2,r4,r2
    3768:	e0bfe915 	stw	r2,-92(fp)
		     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
		T2 = Sigma0_256(a) + Maj(a, b, c);
    376c:	e0ffe017 	ldw	r3,-128(fp)
    3770:	00800084 	movi	r2,2
    3774:	1886583a 	ror	r3,r3,r2
    3778:	e13fe017 	ldw	r4,-128(fp)
    377c:	00800344 	movi	r2,13
    3780:	2084583a 	ror	r2,r4,r2
    3784:	1886f03a 	xor	r3,r3,r2
    3788:	e0bfe017 	ldw	r2,-128(fp)
    378c:	100412ba 	roli	r2,r2,10
    3790:	1886f03a 	xor	r3,r3,r2
    3794:	e13fe017 	ldw	r4,-128(fp)
    3798:	e0bfe117 	ldw	r2,-124(fp)
    379c:	2088703a 	and	r4,r4,r2
    37a0:	e17fe017 	ldw	r5,-128(fp)
    37a4:	e0bfe217 	ldw	r2,-120(fp)
    37a8:	2884703a 	and	r2,r5,r2
    37ac:	2088f03a 	xor	r4,r4,r2
    37b0:	e17fe117 	ldw	r5,-124(fp)
    37b4:	e0bfe217 	ldw	r2,-120(fp)
    37b8:	2884703a 	and	r2,r5,r2
    37bc:	2084f03a 	xor	r2,r4,r2
    37c0:	1885883a 	add	r2,r3,r2
    37c4:	e0bfea15 	stw	r2,-88(fp)
		h = g;
    37c8:	e0bfe617 	ldw	r2,-104(fp)
    37cc:	e0bfe715 	stw	r2,-100(fp)
		g = f;
    37d0:	e0bfe517 	ldw	r2,-108(fp)
    37d4:	e0bfe615 	stw	r2,-104(fp)
		f = e;
    37d8:	e0bfe417 	ldw	r2,-112(fp)
    37dc:	e0bfe515 	stw	r2,-108(fp)
		e = d + T1;
    37e0:	e0ffe317 	ldw	r3,-116(fp)
    37e4:	e0bfe917 	ldw	r2,-92(fp)
    37e8:	1885883a 	add	r2,r3,r2
    37ec:	e0bfe415 	stw	r2,-112(fp)
		d = c;
    37f0:	e0bfe217 	ldw	r2,-120(fp)
    37f4:	e0bfe315 	stw	r2,-116(fp)
		c = b;
    37f8:	e0bfe117 	ldw	r2,-124(fp)
    37fc:	e0bfe215 	stw	r2,-120(fp)
		b = a;
    3800:	e0bfe017 	ldw	r2,-128(fp)
    3804:	e0bfe115 	stw	r2,-124(fp)
		a = T1 + T2;
    3808:	e0ffe917 	ldw	r3,-92(fp)
    380c:	e0bfea17 	ldw	r2,-88(fp)
    3810:	1885883a 	add	r2,r3,r2
    3814:	e0bfe015 	stw	r2,-128(fp)

		j++;
    3818:	e0bfe817 	ldw	r2,-96(fp)
    381c:	10800044 	addi	r2,r2,1
    3820:	e0bfe815 	stw	r2,-96(fp)
	} while (j < 64);
    3824:	e0bfe817 	ldw	r2,-96(fp)
    3828:	10801010 	cmplti	r2,r2,64
    382c:	103f651e 	bne	r2,zero,35c4 <__alt_mem_epcs_flash_controller+0xfdffa5c4>

	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    3830:	e0bffd17 	ldw	r2,-12(fp)
    3834:	10c00017 	ldw	r3,0(r2)
    3838:	e0bfe017 	ldw	r2,-128(fp)
    383c:	1887883a 	add	r3,r3,r2
    3840:	e0bfff17 	ldw	r2,-4(fp)
    3844:	10c00015 	stw	r3,0(r2)
	state_out[1] = state_in[1] + b;
    3848:	e0bfff17 	ldw	r2,-4(fp)
    384c:	10800104 	addi	r2,r2,4
    3850:	e0fffd17 	ldw	r3,-12(fp)
    3854:	18c00104 	addi	r3,r3,4
    3858:	19000017 	ldw	r4,0(r3)
    385c:	e0ffe117 	ldw	r3,-124(fp)
    3860:	20c7883a 	add	r3,r4,r3
    3864:	10c00015 	stw	r3,0(r2)
	state_out[2] = state_in[2] + c;
    3868:	e0bfff17 	ldw	r2,-4(fp)
    386c:	10800204 	addi	r2,r2,8
    3870:	e0fffd17 	ldw	r3,-12(fp)
    3874:	18c00204 	addi	r3,r3,8
    3878:	19000017 	ldw	r4,0(r3)
    387c:	e0ffe217 	ldw	r3,-120(fp)
    3880:	20c7883a 	add	r3,r4,r3
    3884:	10c00015 	stw	r3,0(r2)
	state_out[3] = state_in[3] + d;
    3888:	e0bfff17 	ldw	r2,-4(fp)
    388c:	10800304 	addi	r2,r2,12
    3890:	e0fffd17 	ldw	r3,-12(fp)
    3894:	18c00304 	addi	r3,r3,12
    3898:	19000017 	ldw	r4,0(r3)
    389c:	e0ffe317 	ldw	r3,-116(fp)
    38a0:	20c7883a 	add	r3,r4,r3
    38a4:	10c00015 	stw	r3,0(r2)
	state_out[4] = state_in[4] + e;
    38a8:	e0bfff17 	ldw	r2,-4(fp)
    38ac:	10800404 	addi	r2,r2,16
    38b0:	e0fffd17 	ldw	r3,-12(fp)
    38b4:	18c00404 	addi	r3,r3,16
    38b8:	19000017 	ldw	r4,0(r3)
    38bc:	e0ffe417 	ldw	r3,-112(fp)
    38c0:	20c7883a 	add	r3,r4,r3
    38c4:	10c00015 	stw	r3,0(r2)
	state_out[5] = state_in[5] + f;
    38c8:	e0bfff17 	ldw	r2,-4(fp)
    38cc:	10800504 	addi	r2,r2,20
    38d0:	e0fffd17 	ldw	r3,-12(fp)
    38d4:	18c00504 	addi	r3,r3,20
    38d8:	19000017 	ldw	r4,0(r3)
    38dc:	e0ffe517 	ldw	r3,-108(fp)
    38e0:	20c7883a 	add	r3,r4,r3
    38e4:	10c00015 	stw	r3,0(r2)
	state_out[6] = state_in[6] + g;
    38e8:	e0bfff17 	ldw	r2,-4(fp)
    38ec:	10800604 	addi	r2,r2,24
    38f0:	e0fffd17 	ldw	r3,-12(fp)
    38f4:	18c00604 	addi	r3,r3,24
    38f8:	19000017 	ldw	r4,0(r3)
    38fc:	e0ffe617 	ldw	r3,-104(fp)
    3900:	20c7883a 	add	r3,r4,r3
    3904:	10c00015 	stw	r3,0(r2)
	state_out[7] = state_in[7] + h;
    3908:	e0bfff17 	ldw	r2,-4(fp)
    390c:	10800704 	addi	r2,r2,28
    3910:	e0fffd17 	ldw	r3,-12(fp)
    3914:	18c00704 	addi	r3,r3,28
    3918:	19000017 	ldw	r4,0(r3)
    391c:	e0ffe717 	ldw	r3,-100(fp)
    3920:	20c7883a 	add	r3,r4,r3
    3924:	10c00015 	stw	r3,0(r2)

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
    3928:	e03fea15 	stw	zero,-88(fp)
    392c:	e0bfea17 	ldw	r2,-88(fp)
    3930:	e0bfe915 	stw	r2,-92(fp)
    3934:	e0bfe917 	ldw	r2,-92(fp)
    3938:	e0bfe715 	stw	r2,-100(fp)
    393c:	e0bfe717 	ldw	r2,-100(fp)
    3940:	e0bfe615 	stw	r2,-104(fp)
    3944:	e0bfe617 	ldw	r2,-104(fp)
    3948:	e0bfe515 	stw	r2,-108(fp)
    394c:	e0bfe517 	ldw	r2,-108(fp)
    3950:	e0bfe415 	stw	r2,-112(fp)
    3954:	e0bfe417 	ldw	r2,-112(fp)
    3958:	e0bfe315 	stw	r2,-116(fp)
    395c:	e0bfe317 	ldw	r2,-116(fp)
    3960:	e0bfe215 	stw	r2,-120(fp)
    3964:	e0bfe217 	ldw	r2,-120(fp)
    3968:	e0bfe115 	stw	r2,-124(fp)
    396c:	e0bfe117 	ldw	r2,-124(fp)
    3970:	e0bfe015 	stw	r2,-128(fp)
}
    3974:	0001883a 	nop
    3978:	e037883a 	mov	sp,fp
    397c:	df000017 	ldw	fp,0(sp)
    3980:	dec00104 	addi	sp,sp,4
    3984:	f800283a 	ret

00003988 <sha256_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha256_Update(SHA256_CTX* context, const sha2_byte *data, size_t len) {
    3988:	deffef04 	addi	sp,sp,-68
    398c:	dfc01015 	stw	ra,64(sp)
    3990:	df000f15 	stw	fp,60(sp)
    3994:	dd400e15 	stw	r21,56(sp)
    3998:	dd000d15 	stw	r20,52(sp)
    399c:	dcc00c15 	stw	r19,48(sp)
    39a0:	dc800b15 	stw	r18,44(sp)
    39a4:	dc400a15 	stw	r17,40(sp)
    39a8:	dc000915 	stw	r16,36(sp)
    39ac:	df000f04 	addi	fp,sp,60
    39b0:	e13ff715 	stw	r4,-36(fp)
    39b4:	e17ff815 	stw	r5,-32(fp)
    39b8:	e1bff915 	stw	r6,-28(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    39bc:	e0bff917 	ldw	r2,-28(fp)
    39c0:	1000e726 	beq	r2,zero,3d60 <sha256_Update+0x3d8>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    39c4:	e13ff717 	ldw	r4,-36(fp)
    39c8:	20800817 	ldw	r2,32(r4)
    39cc:	20c00917 	ldw	r3,36(r4)
    39d0:	1808977a 	slli	r4,r3,29
    39d4:	100ed0fa 	srli	r7,r2,3
    39d8:	21ceb03a 	or	r7,r4,r7
    39dc:	1810d0fa 	srli	r8,r3,3
    39e0:	3805883a 	mov	r2,r7
    39e4:	10800fcc 	andi	r2,r2,63
    39e8:	e0bff315 	stw	r2,-52(fp)
	if (usedspace > 0) {
    39ec:	e0bff317 	ldw	r2,-52(fp)
    39f0:	1000bb26 	beq	r2,zero,3ce0 <sha256_Update+0x358>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA256_BLOCK_LENGTH - usedspace;
    39f4:	00c01004 	movi	r3,64
    39f8:	e0bff317 	ldw	r2,-52(fp)
    39fc:	1885c83a 	sub	r2,r3,r2
    3a00:	e0bff415 	stw	r2,-48(fp)

		if (len >= freespace) {
    3a04:	e0fff917 	ldw	r3,-28(fp)
    3a08:	e0bff417 	ldw	r2,-48(fp)
    3a0c:	18804f36 	bltu	r3,r2,3b4c <sha256_Update+0x1c4>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    3a10:	e0bff717 	ldw	r2,-36(fp)
    3a14:	10c00a04 	addi	r3,r2,40
    3a18:	e0bff317 	ldw	r2,-52(fp)
    3a1c:	1885883a 	add	r2,r3,r2
    3a20:	e1bff417 	ldw	r6,-48(fp)
    3a24:	e17ff817 	ldw	r5,-32(fp)
    3a28:	1009883a 	mov	r4,r2
    3a2c:	00463980 	call	46398 <memcpy>
			context->bitcount += freespace << 3;
    3a30:	e0bff717 	ldw	r2,-36(fp)
    3a34:	11000817 	ldw	r4,32(r2)
    3a38:	11400917 	ldw	r5,36(r2)
    3a3c:	e0bff417 	ldw	r2,-48(fp)
    3a40:	100490fa 	slli	r2,r2,3
    3a44:	1029883a 	mov	r20,r2
    3a48:	002b883a 	mov	r21,zero
    3a4c:	2505883a 	add	r2,r4,r20
    3a50:	110d803a 	cmpltu	r6,r2,r4
    3a54:	2d47883a 	add	r3,r5,r21
    3a58:	30c9883a 	add	r4,r6,r3
    3a5c:	2007883a 	mov	r3,r4
    3a60:	1009883a 	mov	r4,r2
    3a64:	180b883a 	mov	r5,r3
    3a68:	e0bff717 	ldw	r2,-36(fp)
    3a6c:	11000815 	stw	r4,32(r2)
    3a70:	11400915 	stw	r5,36(r2)
			len -= freespace;
    3a74:	e0fff917 	ldw	r3,-28(fp)
    3a78:	e0bff417 	ldw	r2,-48(fp)
    3a7c:	1885c83a 	sub	r2,r3,r2
    3a80:	e0bff915 	stw	r2,-28(fp)
			data += freespace;
    3a84:	e0fff817 	ldw	r3,-32(fp)
    3a88:	e0bff417 	ldw	r2,-48(fp)
    3a8c:	1885883a 	add	r2,r3,r2
    3a90:	e0bff815 	stw	r2,-32(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    3a94:	e03ff115 	stw	zero,-60(fp)
    3a98:	00002006 	br	3b1c <sha256_Update+0x194>
				REVERSE32(context->buffer[j],context->buffer[j]);
    3a9c:	e0fff717 	ldw	r3,-36(fp)
    3aa0:	e0bff117 	ldw	r2,-60(fp)
    3aa4:	10800284 	addi	r2,r2,10
    3aa8:	1085883a 	add	r2,r2,r2
    3aac:	1085883a 	add	r2,r2,r2
    3ab0:	1885883a 	add	r2,r3,r2
    3ab4:	10800017 	ldw	r2,0(r2)
    3ab8:	e0bff515 	stw	r2,-44(fp)
    3abc:	e0bff517 	ldw	r2,-44(fp)
    3ac0:	1004143a 	roli	r2,r2,16
    3ac4:	e0bff515 	stw	r2,-44(fp)
    3ac8:	e0fff517 	ldw	r3,-44(fp)
    3acc:	00bfc074 	movhi	r2,65281
    3ad0:	10bfc004 	addi	r2,r2,-256
    3ad4:	1884703a 	and	r2,r3,r2
    3ad8:	1006d23a 	srli	r3,r2,8
    3adc:	e13ff517 	ldw	r4,-44(fp)
    3ae0:	00803ff4 	movhi	r2,255
    3ae4:	10803fc4 	addi	r2,r2,255
    3ae8:	2084703a 	and	r2,r4,r2
    3aec:	1004923a 	slli	r2,r2,8
    3af0:	1886b03a 	or	r3,r3,r2
    3af4:	e13ff717 	ldw	r4,-36(fp)
    3af8:	e0bff117 	ldw	r2,-60(fp)
    3afc:	10800284 	addi	r2,r2,10
    3b00:	1085883a 	add	r2,r2,r2
    3b04:	1085883a 	add	r2,r2,r2
    3b08:	2085883a 	add	r2,r4,r2
    3b0c:	10c00015 	stw	r3,0(r2)
			context->bitcount += freespace << 3;
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    3b10:	e0bff117 	ldw	r2,-60(fp)
    3b14:	10800044 	addi	r2,r2,1
    3b18:	e0bff115 	stw	r2,-60(fp)
    3b1c:	e0bff117 	ldw	r2,-60(fp)
    3b20:	10800410 	cmplti	r2,r2,16
    3b24:	103fdd1e 	bne	r2,zero,3a9c <__alt_mem_epcs_flash_controller+0xfdffaa9c>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			sha256_Transform(context->state, context->buffer, context->state);
    3b28:	e0fff717 	ldw	r3,-36(fp)
    3b2c:	e0bff717 	ldw	r2,-36(fp)
    3b30:	10800a04 	addi	r2,r2,40
    3b34:	e13ff717 	ldw	r4,-36(fp)
    3b38:	200d883a 	mov	r6,r4
    3b3c:	100b883a 	mov	r5,r2
    3b40:	1809883a 	mov	r4,r3
    3b44:	00033c00 	call	33c0 <sha256_Transform>
    3b48:	00006506 	br	3ce0 <sha256_Update+0x358>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    3b4c:	e0bff717 	ldw	r2,-36(fp)
    3b50:	10c00a04 	addi	r3,r2,40
    3b54:	e0bff317 	ldw	r2,-52(fp)
    3b58:	1885883a 	add	r2,r3,r2
    3b5c:	e1bff917 	ldw	r6,-28(fp)
    3b60:	e17ff817 	ldw	r5,-32(fp)
    3b64:	1009883a 	mov	r4,r2
    3b68:	00463980 	call	46398 <memcpy>
			context->bitcount += len << 3;
    3b6c:	e0bff717 	ldw	r2,-36(fp)
    3b70:	11000817 	ldw	r4,32(r2)
    3b74:	11400917 	ldw	r5,36(r2)
    3b78:	e0bff917 	ldw	r2,-28(fp)
    3b7c:	100490fa 	slli	r2,r2,3
    3b80:	1025883a 	mov	r18,r2
    3b84:	0027883a 	mov	r19,zero
    3b88:	2485883a 	add	r2,r4,r18
    3b8c:	110d803a 	cmpltu	r6,r2,r4
    3b90:	2cc7883a 	add	r3,r5,r19
    3b94:	30c9883a 	add	r4,r6,r3
    3b98:	2007883a 	mov	r3,r4
    3b9c:	1009883a 	mov	r4,r2
    3ba0:	180b883a 	mov	r5,r3
    3ba4:	e0bff717 	ldw	r2,-36(fp)
    3ba8:	11000815 	stw	r4,32(r2)
    3bac:	11400915 	stw	r5,36(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    3bb0:	e03ff415 	stw	zero,-48(fp)
    3bb4:	e0bff417 	ldw	r2,-48(fp)
    3bb8:	e0bff315 	stw	r2,-52(fp)
			return;
    3bbc:	00006906 	br	3d64 <sha256_Update+0x3dc>
		}
	}
	while (len >= SHA256_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA256_BLOCK_LENGTH);
    3bc0:	e0bff717 	ldw	r2,-36(fp)
    3bc4:	10800a04 	addi	r2,r2,40
    3bc8:	01801004 	movi	r6,64
    3bcc:	e17ff817 	ldw	r5,-32(fp)
    3bd0:	1009883a 	mov	r4,r2
    3bd4:	00463980 	call	46398 <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    3bd8:	e03ff215 	stw	zero,-56(fp)
    3bdc:	00002006 	br	3c60 <sha256_Update+0x2d8>
			REVERSE32(context->buffer[j],context->buffer[j]);
    3be0:	e0fff717 	ldw	r3,-36(fp)
    3be4:	e0bff217 	ldw	r2,-56(fp)
    3be8:	10800284 	addi	r2,r2,10
    3bec:	1085883a 	add	r2,r2,r2
    3bf0:	1085883a 	add	r2,r2,r2
    3bf4:	1885883a 	add	r2,r3,r2
    3bf8:	10800017 	ldw	r2,0(r2)
    3bfc:	e0bff615 	stw	r2,-40(fp)
    3c00:	e0bff617 	ldw	r2,-40(fp)
    3c04:	1004143a 	roli	r2,r2,16
    3c08:	e0bff615 	stw	r2,-40(fp)
    3c0c:	e0fff617 	ldw	r3,-40(fp)
    3c10:	00bfc074 	movhi	r2,65281
    3c14:	10bfc004 	addi	r2,r2,-256
    3c18:	1884703a 	and	r2,r3,r2
    3c1c:	1006d23a 	srli	r3,r2,8
    3c20:	e13ff617 	ldw	r4,-40(fp)
    3c24:	00803ff4 	movhi	r2,255
    3c28:	10803fc4 	addi	r2,r2,255
    3c2c:	2084703a 	and	r2,r4,r2
    3c30:	1004923a 	slli	r2,r2,8
    3c34:	1886b03a 	or	r3,r3,r2
    3c38:	e13ff717 	ldw	r4,-36(fp)
    3c3c:	e0bff217 	ldw	r2,-56(fp)
    3c40:	10800284 	addi	r2,r2,10
    3c44:	1085883a 	add	r2,r2,r2
    3c48:	1085883a 	add	r2,r2,r2
    3c4c:	2085883a 	add	r2,r4,r2
    3c50:	10c00015 	stw	r3,0(r2)
	while (len >= SHA256_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA256_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    3c54:	e0bff217 	ldw	r2,-56(fp)
    3c58:	10800044 	addi	r2,r2,1
    3c5c:	e0bff215 	stw	r2,-56(fp)
    3c60:	e0bff217 	ldw	r2,-56(fp)
    3c64:	10800410 	cmplti	r2,r2,16
    3c68:	103fdd1e 	bne	r2,zero,3be0 <__alt_mem_epcs_flash_controller+0xfdffabe0>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		sha256_Transform(context->state, context->buffer, context->state);
    3c6c:	e0fff717 	ldw	r3,-36(fp)
    3c70:	e0bff717 	ldw	r2,-36(fp)
    3c74:	10800a04 	addi	r2,r2,40
    3c78:	e13ff717 	ldw	r4,-36(fp)
    3c7c:	200d883a 	mov	r6,r4
    3c80:	100b883a 	mov	r5,r2
    3c84:	1809883a 	mov	r4,r3
    3c88:	00033c00 	call	33c0 <sha256_Transform>
		context->bitcount += SHA256_BLOCK_LENGTH << 3;
    3c8c:	e0bff717 	ldw	r2,-36(fp)
    3c90:	11000817 	ldw	r4,32(r2)
    3c94:	11400917 	ldw	r5,36(r2)
    3c98:	01808004 	movi	r6,512
    3c9c:	000f883a 	mov	r7,zero
    3ca0:	2185883a 	add	r2,r4,r6
    3ca4:	1111803a 	cmpltu	r8,r2,r4
    3ca8:	29c7883a 	add	r3,r5,r7
    3cac:	40c9883a 	add	r4,r8,r3
    3cb0:	2007883a 	mov	r3,r4
    3cb4:	1009883a 	mov	r4,r2
    3cb8:	180b883a 	mov	r5,r3
    3cbc:	e0bff717 	ldw	r2,-36(fp)
    3cc0:	11000815 	stw	r4,32(r2)
    3cc4:	11400915 	stw	r5,36(r2)
		len -= SHA256_BLOCK_LENGTH;
    3cc8:	e0bff917 	ldw	r2,-28(fp)
    3ccc:	10bff004 	addi	r2,r2,-64
    3cd0:	e0bff915 	stw	r2,-28(fp)
		data += SHA256_BLOCK_LENGTH;
    3cd4:	e0bff817 	ldw	r2,-32(fp)
    3cd8:	10801004 	addi	r2,r2,64
    3cdc:	e0bff815 	stw	r2,-32(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA256_BLOCK_LENGTH) {
    3ce0:	e0bff917 	ldw	r2,-28(fp)
    3ce4:	10801028 	cmpgeui	r2,r2,64
    3ce8:	103fb51e 	bne	r2,zero,3bc0 <__alt_mem_epcs_flash_controller+0xfdffabc0>
		sha256_Transform(context->state, context->buffer, context->state);
		context->bitcount += SHA256_BLOCK_LENGTH << 3;
		len -= SHA256_BLOCK_LENGTH;
		data += SHA256_BLOCK_LENGTH;
	}
	if (len > 0) {
    3cec:	e0bff917 	ldw	r2,-28(fp)
    3cf0:	10001726 	beq	r2,zero,3d50 <sha256_Update+0x3c8>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    3cf4:	e0bff717 	ldw	r2,-36(fp)
    3cf8:	10800a04 	addi	r2,r2,40
    3cfc:	e1bff917 	ldw	r6,-28(fp)
    3d00:	e17ff817 	ldw	r5,-32(fp)
    3d04:	1009883a 	mov	r4,r2
    3d08:	00463980 	call	46398 <memcpy>
		context->bitcount += len << 3;
    3d0c:	e0bff717 	ldw	r2,-36(fp)
    3d10:	11000817 	ldw	r4,32(r2)
    3d14:	11400917 	ldw	r5,36(r2)
    3d18:	e0bff917 	ldw	r2,-28(fp)
    3d1c:	100490fa 	slli	r2,r2,3
    3d20:	1021883a 	mov	r16,r2
    3d24:	0023883a 	mov	r17,zero
    3d28:	2405883a 	add	r2,r4,r16
    3d2c:	110d803a 	cmpltu	r6,r2,r4
    3d30:	2c47883a 	add	r3,r5,r17
    3d34:	30c9883a 	add	r4,r6,r3
    3d38:	2007883a 	mov	r3,r4
    3d3c:	1009883a 	mov	r4,r2
    3d40:	180b883a 	mov	r5,r3
    3d44:	e0bff717 	ldw	r2,-36(fp)
    3d48:	11000815 	stw	r4,32(r2)
    3d4c:	11400915 	stw	r5,36(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    3d50:	e03ff415 	stw	zero,-48(fp)
    3d54:	e0bff417 	ldw	r2,-48(fp)
    3d58:	e0bff315 	stw	r2,-52(fp)
    3d5c:	00000106 	br	3d64 <sha256_Update+0x3dc>
void sha256_Update(SHA256_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    3d60:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		context->bitcount += len << 3;
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    3d64:	e6fffa04 	addi	sp,fp,-24
    3d68:	dfc00717 	ldw	ra,28(sp)
    3d6c:	df000617 	ldw	fp,24(sp)
    3d70:	dd400517 	ldw	r21,20(sp)
    3d74:	dd000417 	ldw	r20,16(sp)
    3d78:	dcc00317 	ldw	r19,12(sp)
    3d7c:	dc800217 	ldw	r18,8(sp)
    3d80:	dc400117 	ldw	r17,4(sp)
    3d84:	dc000017 	ldw	r16,0(sp)
    3d88:	dec00804 	addi	sp,sp,32
    3d8c:	f800283a 	ret

00003d90 <sha256_Final>:

void sha256_Final(SHA256_CTX* context, sha2_byte digest[]) {
    3d90:	defff304 	addi	sp,sp,-52
    3d94:	dfc00c15 	stw	ra,48(sp)
    3d98:	df000b15 	stw	fp,44(sp)
    3d9c:	dc400a15 	stw	r17,40(sp)
    3da0:	dc000915 	stw	r16,36(sp)
    3da4:	df000b04 	addi	fp,sp,44
    3da8:	e13ffc15 	stw	r4,-16(fp)
    3dac:	e17ffd15 	stw	r5,-12(fp)
	unsigned int	usedspace;

	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    3db0:	e0bffd17 	ldw	r2,-12(fp)
    3db4:	1000b826 	beq	r2,zero,4098 <sha256_Final+0x308>
		usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    3db8:	e13ffc17 	ldw	r4,-16(fp)
    3dbc:	20800817 	ldw	r2,32(r4)
    3dc0:	20c00917 	ldw	r3,36(r4)
    3dc4:	1808977a 	slli	r4,r3,29
    3dc8:	100cd0fa 	srli	r6,r2,3
    3dcc:	218cb03a 	or	r6,r4,r6
    3dd0:	180ed0fa 	srli	r7,r3,3
    3dd4:	3005883a 	mov	r2,r6
    3dd8:	10800fcc 	andi	r2,r2,63
    3ddc:	e0bff515 	stw	r2,-44(fp)
		/* Begin padding with a 1 bit: */
		((uint8_t*)context->buffer)[usedspace++] = 0x80;
    3de0:	e0bffc17 	ldw	r2,-16(fp)
    3de4:	10c00a04 	addi	r3,r2,40
    3de8:	e0bff517 	ldw	r2,-44(fp)
    3dec:	11000044 	addi	r4,r2,1
    3df0:	e13ff515 	stw	r4,-44(fp)
    3df4:	1885883a 	add	r2,r3,r2
    3df8:	00ffe004 	movi	r3,-128
    3dfc:	10c00005 	stb	r3,0(r2)
		
		if (usedspace > SHA256_SHORT_BLOCK_LENGTH) {
    3e00:	e0bff517 	ldw	r2,-44(fp)
    3e04:	10800e70 	cmpltui	r2,r2,57
    3e08:	1000371e 	bne	r2,zero,3ee8 <sha256_Final+0x158>
			memzero(((uint8_t*)context->buffer) + usedspace, SHA256_BLOCK_LENGTH - usedspace);
    3e0c:	e0bffc17 	ldw	r2,-16(fp)
    3e10:	10c00a04 	addi	r3,r2,40
    3e14:	e0bff517 	ldw	r2,-44(fp)
    3e18:	1889883a 	add	r4,r3,r2
    3e1c:	00c01004 	movi	r3,64
    3e20:	e0bff517 	ldw	r2,-44(fp)
    3e24:	1885c83a 	sub	r2,r3,r2
    3e28:	100b883a 	mov	r5,r2
    3e2c:	00013700 	call	1370 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    3e30:	e03ff615 	stw	zero,-40(fp)
    3e34:	00002006 	br	3eb8 <sha256_Final+0x128>
				REVERSE32(context->buffer[j],context->buffer[j]);
    3e38:	e0fffc17 	ldw	r3,-16(fp)
    3e3c:	e0bff617 	ldw	r2,-40(fp)
    3e40:	10800284 	addi	r2,r2,10
    3e44:	1085883a 	add	r2,r2,r2
    3e48:	1085883a 	add	r2,r2,r2
    3e4c:	1885883a 	add	r2,r3,r2
    3e50:	10800017 	ldw	r2,0(r2)
    3e54:	e0bff915 	stw	r2,-28(fp)
    3e58:	e0bff917 	ldw	r2,-28(fp)
    3e5c:	1004143a 	roli	r2,r2,16
    3e60:	e0bff915 	stw	r2,-28(fp)
    3e64:	e0fff917 	ldw	r3,-28(fp)
    3e68:	00bfc074 	movhi	r2,65281
    3e6c:	10bfc004 	addi	r2,r2,-256
    3e70:	1884703a 	and	r2,r3,r2
    3e74:	1006d23a 	srli	r3,r2,8
    3e78:	e13ff917 	ldw	r4,-28(fp)
    3e7c:	00803ff4 	movhi	r2,255
    3e80:	10803fc4 	addi	r2,r2,255
    3e84:	2084703a 	and	r2,r4,r2
    3e88:	1004923a 	slli	r2,r2,8
    3e8c:	1886b03a 	or	r3,r3,r2
    3e90:	e13ffc17 	ldw	r4,-16(fp)
    3e94:	e0bff617 	ldw	r2,-40(fp)
    3e98:	10800284 	addi	r2,r2,10
    3e9c:	1085883a 	add	r2,r2,r2
    3ea0:	1085883a 	add	r2,r2,r2
    3ea4:	2085883a 	add	r2,r4,r2
    3ea8:	10c00015 	stw	r3,0(r2)
		if (usedspace > SHA256_SHORT_BLOCK_LENGTH) {
			memzero(((uint8_t*)context->buffer) + usedspace, SHA256_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    3eac:	e0bff617 	ldw	r2,-40(fp)
    3eb0:	10800044 	addi	r2,r2,1
    3eb4:	e0bff615 	stw	r2,-40(fp)
    3eb8:	e0bff617 	ldw	r2,-40(fp)
    3ebc:	10800410 	cmplti	r2,r2,16
    3ec0:	103fdd1e 	bne	r2,zero,3e38 <__alt_mem_epcs_flash_controller+0xfdffae38>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			/* Do second-to-last transform: */
			sha256_Transform(context->state, context->buffer, context->state);
    3ec4:	e0fffc17 	ldw	r3,-16(fp)
    3ec8:	e0bffc17 	ldw	r2,-16(fp)
    3ecc:	10800a04 	addi	r2,r2,40
    3ed0:	e13ffc17 	ldw	r4,-16(fp)
    3ed4:	200d883a 	mov	r6,r4
    3ed8:	100b883a 	mov	r5,r2
    3edc:	1809883a 	mov	r4,r3
    3ee0:	00033c00 	call	33c0 <sha256_Transform>
			
			/* And prepare the last transform: */
			usedspace = 0;
    3ee4:	e03ff515 	stw	zero,-44(fp)
		}
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA256_SHORT_BLOCK_LENGTH - usedspace);
    3ee8:	e0bffc17 	ldw	r2,-16(fp)
    3eec:	10c00a04 	addi	r3,r2,40
    3ef0:	e0bff517 	ldw	r2,-44(fp)
    3ef4:	1889883a 	add	r4,r3,r2
    3ef8:	00c00e04 	movi	r3,56
    3efc:	e0bff517 	ldw	r2,-44(fp)
    3f00:	1885c83a 	sub	r2,r3,r2
    3f04:	100b883a 	mov	r5,r2
    3f08:	00013700 	call	1370 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    3f0c:	e03ff715 	stw	zero,-36(fp)
    3f10:	00002006 	br	3f94 <sha256_Final+0x204>
			REVERSE32(context->buffer[j],context->buffer[j]);
    3f14:	e0fffc17 	ldw	r3,-16(fp)
    3f18:	e0bff717 	ldw	r2,-36(fp)
    3f1c:	10800284 	addi	r2,r2,10
    3f20:	1085883a 	add	r2,r2,r2
    3f24:	1085883a 	add	r2,r2,r2
    3f28:	1885883a 	add	r2,r3,r2
    3f2c:	10800017 	ldw	r2,0(r2)
    3f30:	e0bffa15 	stw	r2,-24(fp)
    3f34:	e0bffa17 	ldw	r2,-24(fp)
    3f38:	1004143a 	roli	r2,r2,16
    3f3c:	e0bffa15 	stw	r2,-24(fp)
    3f40:	e0fffa17 	ldw	r3,-24(fp)
    3f44:	00bfc074 	movhi	r2,65281
    3f48:	10bfc004 	addi	r2,r2,-256
    3f4c:	1884703a 	and	r2,r3,r2
    3f50:	1006d23a 	srli	r3,r2,8
    3f54:	e13ffa17 	ldw	r4,-24(fp)
    3f58:	00803ff4 	movhi	r2,255
    3f5c:	10803fc4 	addi	r2,r2,255
    3f60:	2084703a 	and	r2,r4,r2
    3f64:	1004923a 	slli	r2,r2,8
    3f68:	1886b03a 	or	r3,r3,r2
    3f6c:	e13ffc17 	ldw	r4,-16(fp)
    3f70:	e0bff717 	ldw	r2,-36(fp)
    3f74:	10800284 	addi	r2,r2,10
    3f78:	1085883a 	add	r2,r2,r2
    3f7c:	1085883a 	add	r2,r2,r2
    3f80:	2085883a 	add	r2,r4,r2
    3f84:	10c00015 	stw	r3,0(r2)
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA256_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    3f88:	e0bff717 	ldw	r2,-36(fp)
    3f8c:	10800044 	addi	r2,r2,1
    3f90:	e0bff715 	stw	r2,-36(fp)
    3f94:	e0bff717 	ldw	r2,-36(fp)
    3f98:	10800390 	cmplti	r2,r2,14
    3f9c:	103fdd1e 	bne	r2,zero,3f14 <__alt_mem_epcs_flash_controller+0xfdffaf14>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Set the bit count: */
		context->buffer[14] = context->bitcount >> 32;
    3fa0:	e13ffc17 	ldw	r4,-16(fp)
    3fa4:	20800817 	ldw	r2,32(r4)
    3fa8:	20c00917 	ldw	r3,36(r4)
    3fac:	1820d83a 	srl	r16,r3,zero
    3fb0:	0023883a 	mov	r17,zero
    3fb4:	8007883a 	mov	r3,r16
    3fb8:	e0bffc17 	ldw	r2,-16(fp)
    3fbc:	10c01815 	stw	r3,96(r2)
		context->buffer[15] = context->bitcount & 0xffffffff;
    3fc0:	e13ffc17 	ldw	r4,-16(fp)
    3fc4:	20800817 	ldw	r2,32(r4)
    3fc8:	20c00917 	ldw	r3,36(r4)
    3fcc:	1007883a 	mov	r3,r2
    3fd0:	e0bffc17 	ldw	r2,-16(fp)
    3fd4:	10c01915 	stw	r3,100(r2)

		/* Final transform: */
		sha256_Transform(context->state, context->buffer, context->state);
    3fd8:	e0fffc17 	ldw	r3,-16(fp)
    3fdc:	e0bffc17 	ldw	r2,-16(fp)
    3fe0:	10800a04 	addi	r2,r2,40
    3fe4:	e13ffc17 	ldw	r4,-16(fp)
    3fe8:	200d883a 	mov	r6,r4
    3fec:	100b883a 	mov	r5,r2
    3ff0:	1809883a 	mov	r4,r3
    3ff4:	00033c00 	call	33c0 <sha256_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    3ff8:	e03ff815 	stw	zero,-32(fp)
    3ffc:	00001e06 	br	4078 <sha256_Final+0x2e8>
			REVERSE32(context->state[j],context->state[j]);
    4000:	e0fffc17 	ldw	r3,-16(fp)
    4004:	e0bff817 	ldw	r2,-32(fp)
    4008:	1085883a 	add	r2,r2,r2
    400c:	1085883a 	add	r2,r2,r2
    4010:	1885883a 	add	r2,r3,r2
    4014:	10800017 	ldw	r2,0(r2)
    4018:	e0bffb15 	stw	r2,-20(fp)
    401c:	e0bffb17 	ldw	r2,-20(fp)
    4020:	1004143a 	roli	r2,r2,16
    4024:	e0bffb15 	stw	r2,-20(fp)
    4028:	e0fffb17 	ldw	r3,-20(fp)
    402c:	00bfc074 	movhi	r2,65281
    4030:	10bfc004 	addi	r2,r2,-256
    4034:	1884703a 	and	r2,r3,r2
    4038:	1006d23a 	srli	r3,r2,8
    403c:	e13ffb17 	ldw	r4,-20(fp)
    4040:	00803ff4 	movhi	r2,255
    4044:	10803fc4 	addi	r2,r2,255
    4048:	2084703a 	and	r2,r4,r2
    404c:	1004923a 	slli	r2,r2,8
    4050:	1886b03a 	or	r3,r3,r2
    4054:	e13ffc17 	ldw	r4,-16(fp)
    4058:	e0bff817 	ldw	r2,-32(fp)
    405c:	1085883a 	add	r2,r2,r2
    4060:	1085883a 	add	r2,r2,r2
    4064:	2085883a 	add	r2,r4,r2
    4068:	10c00015 	stw	r3,0(r2)
		/* Final transform: */
		sha256_Transform(context->state, context->buffer, context->state);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    406c:	e0bff817 	ldw	r2,-32(fp)
    4070:	10800044 	addi	r2,r2,1
    4074:	e0bff815 	stw	r2,-32(fp)
    4078:	e0bff817 	ldw	r2,-32(fp)
    407c:	10800210 	cmplti	r2,r2,8
    4080:	103fdf1e 	bne	r2,zero,4000 <__alt_mem_epcs_flash_controller+0xfdffb000>
			REVERSE32(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA256_DIGEST_LENGTH);
    4084:	e0bffc17 	ldw	r2,-16(fp)
    4088:	01800804 	movi	r6,32
    408c:	100b883a 	mov	r5,r2
    4090:	e13ffd17 	ldw	r4,-12(fp)
    4094:	00463980 	call	46398 <memcpy>
	}

	/* Clean up state data: */
	memzero(context, sizeof(SHA256_CTX));
    4098:	01401a04 	movi	r5,104
    409c:	e13ffc17 	ldw	r4,-16(fp)
    40a0:	00013700 	call	1370 <memzero>
	usedspace = 0;
    40a4:	e03ff515 	stw	zero,-44(fp)
}
    40a8:	0001883a 	nop
    40ac:	e6fffe04 	addi	sp,fp,-8
    40b0:	dfc00317 	ldw	ra,12(sp)
    40b4:	df000217 	ldw	fp,8(sp)
    40b8:	dc400117 	ldw	r17,4(sp)
    40bc:	dc000017 	ldw	r16,0(sp)
    40c0:	dec00404 	addi	sp,sp,16
    40c4:	f800283a 	ret

000040c8 <sha256_End>:

char *sha256_End(SHA256_CTX* context, char buffer[]) {
    40c8:	defff204 	addi	sp,sp,-56
    40cc:	dfc00d15 	stw	ra,52(sp)
    40d0:	df000c15 	stw	fp,48(sp)
    40d4:	df000c04 	addi	fp,sp,48
    40d8:	e13ffe15 	stw	r4,-8(fp)
    40dc:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA256_DIGEST_LENGTH], *d = digest;
    40e0:	e0bff604 	addi	r2,fp,-40
    40e4:	e0bff415 	stw	r2,-48(fp)
	int		i;

	if (buffer != (char*)0) {
    40e8:	e0bfff17 	ldw	r2,-4(fp)
    40ec:	10002926 	beq	r2,zero,4194 <sha256_End+0xcc>
		sha256_Final(context, digest);
    40f0:	e0bff604 	addi	r2,fp,-40
    40f4:	100b883a 	mov	r5,r2
    40f8:	e13ffe17 	ldw	r4,-8(fp)
    40fc:	0003d900 	call	3d90 <sha256_Final>

		for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
    4100:	e03ff515 	stw	zero,-44(fp)
    4104:	00001d06 	br	417c <sha256_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    4108:	e0bfff17 	ldw	r2,-4(fp)
    410c:	10c00044 	addi	r3,r2,1
    4110:	e0ffff15 	stw	r3,-4(fp)
    4114:	d1200017 	ldw	r4,-32768(gp)
    4118:	e0fff417 	ldw	r3,-48(fp)
    411c:	18c00003 	ldbu	r3,0(r3)
    4120:	18c03fcc 	andi	r3,r3,255
    4124:	1806d13a 	srli	r3,r3,4
    4128:	18c03fcc 	andi	r3,r3,255
    412c:	20c7883a 	add	r3,r4,r3
    4130:	18c00003 	ldbu	r3,0(r3)
    4134:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    4138:	e0bfff17 	ldw	r2,-4(fp)
    413c:	10c00044 	addi	r3,r2,1
    4140:	e0ffff15 	stw	r3,-4(fp)
    4144:	d1200017 	ldw	r4,-32768(gp)
    4148:	e0fff417 	ldw	r3,-48(fp)
    414c:	18c00003 	ldbu	r3,0(r3)
    4150:	18c03fcc 	andi	r3,r3,255
    4154:	18c003cc 	andi	r3,r3,15
    4158:	20c7883a 	add	r3,r4,r3
    415c:	18c00003 	ldbu	r3,0(r3)
    4160:	10c00005 	stb	r3,0(r2)
			d++;
    4164:	e0bff417 	ldw	r2,-48(fp)
    4168:	10800044 	addi	r2,r2,1
    416c:	e0bff415 	stw	r2,-48(fp)
	int		i;

	if (buffer != (char*)0) {
		sha256_Final(context, digest);

		for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
    4170:	e0bff517 	ldw	r2,-44(fp)
    4174:	10800044 	addi	r2,r2,1
    4178:	e0bff515 	stw	r2,-44(fp)
    417c:	e0bff517 	ldw	r2,-44(fp)
    4180:	10800810 	cmplti	r2,r2,32
    4184:	103fe01e 	bne	r2,zero,4108 <__alt_mem_epcs_flash_controller+0xfdffb108>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    4188:	e0bfff17 	ldw	r2,-4(fp)
    418c:	10000005 	stb	zero,0(r2)
    4190:	00000306 	br	41a0 <sha256_End+0xd8>
	} else {
		memzero(context, sizeof(SHA256_CTX));
    4194:	01401a04 	movi	r5,104
    4198:	e13ffe17 	ldw	r4,-8(fp)
    419c:	00013700 	call	1370 <memzero>
	}
	memzero(digest, SHA256_DIGEST_LENGTH);
    41a0:	e0bff604 	addi	r2,fp,-40
    41a4:	01400804 	movi	r5,32
    41a8:	1009883a 	mov	r4,r2
    41ac:	00013700 	call	1370 <memzero>
	return buffer;
    41b0:	e0bfff17 	ldw	r2,-4(fp)
}
    41b4:	e037883a 	mov	sp,fp
    41b8:	dfc00117 	ldw	ra,4(sp)
    41bc:	df000017 	ldw	fp,0(sp)
    41c0:	dec00204 	addi	sp,sp,8
    41c4:	f800283a 	ret

000041c8 <sha256_Raw>:

void sha256_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA256_DIGEST_LENGTH]) {
    41c8:	deffe104 	addi	sp,sp,-124
    41cc:	dfc01e15 	stw	ra,120(sp)
    41d0:	df001d15 	stw	fp,116(sp)
    41d4:	df001d04 	addi	fp,sp,116
    41d8:	e13ffd15 	stw	r4,-12(fp)
    41dc:	e17ffe15 	stw	r5,-8(fp)
    41e0:	e1bfff15 	stw	r6,-4(fp)
	SHA256_CTX	context;
	sha256_Init(&context);
    41e4:	e13fe304 	addi	r4,fp,-116
    41e8:	00033500 	call	3350 <sha256_Init>
	sha256_Update(&context, data, len);
    41ec:	e1bffe17 	ldw	r6,-8(fp)
    41f0:	e17ffd17 	ldw	r5,-12(fp)
    41f4:	e13fe304 	addi	r4,fp,-116
    41f8:	00039880 	call	3988 <sha256_Update>
	sha256_Final(&context, digest);
    41fc:	e17fff17 	ldw	r5,-4(fp)
    4200:	e13fe304 	addi	r4,fp,-116
    4204:	0003d900 	call	3d90 <sha256_Final>
}
    4208:	0001883a 	nop
    420c:	e037883a 	mov	sp,fp
    4210:	dfc00117 	ldw	ra,4(sp)
    4214:	df000017 	ldw	fp,0(sp)
    4218:	dec00204 	addi	sp,sp,8
    421c:	f800283a 	ret

00004220 <sha256_Data>:

char* sha256_Data(const sha2_byte* data, size_t len, char digest[SHA256_DIGEST_STRING_LENGTH]) {
    4220:	deffe104 	addi	sp,sp,-124
    4224:	dfc01e15 	stw	ra,120(sp)
    4228:	df001d15 	stw	fp,116(sp)
    422c:	df001d04 	addi	fp,sp,116
    4230:	e13ffd15 	stw	r4,-12(fp)
    4234:	e17ffe15 	stw	r5,-8(fp)
    4238:	e1bfff15 	stw	r6,-4(fp)
	SHA256_CTX	context;

	sha256_Init(&context);
    423c:	e13fe304 	addi	r4,fp,-116
    4240:	00033500 	call	3350 <sha256_Init>
	sha256_Update(&context, data, len);
    4244:	e1bffe17 	ldw	r6,-8(fp)
    4248:	e17ffd17 	ldw	r5,-12(fp)
    424c:	e13fe304 	addi	r4,fp,-116
    4250:	00039880 	call	3988 <sha256_Update>
	return sha256_End(&context, digest);
    4254:	e17fff17 	ldw	r5,-4(fp)
    4258:	e13fe304 	addi	r4,fp,-116
    425c:	00040c80 	call	40c8 <sha256_End>
}
    4260:	e037883a 	mov	sp,fp
    4264:	dfc00117 	ldw	ra,4(sp)
    4268:	df000017 	ldw	fp,0(sp)
    426c:	dec00204 	addi	sp,sp,8
    4270:	f800283a 	ret

00004274 <sha512_Init>:


/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context) {
    4274:	defffd04 	addi	sp,sp,-12
    4278:	dfc00215 	stw	ra,8(sp)
    427c:	df000115 	stw	fp,4(sp)
    4280:	df000104 	addi	fp,sp,4
    4284:	e13fff15 	stw	r4,-4(fp)
	if (context == (SHA512_CTX*)0) {
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	10001526 	beq	r2,zero,42e4 <sha512_Init+0x70>
		return;
	}
	MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
    4290:	e0bfff17 	ldw	r2,-4(fp)
    4294:	01801004 	movi	r6,64
    4298:	01400174 	movhi	r5,5
    429c:	29481404 	addi	r5,r5,8272
    42a0:	1009883a 	mov	r4,r2
    42a4:	00463980 	call	46398 <memcpy>
	memzero(context->buffer, SHA512_BLOCK_LENGTH);
    42a8:	e0bfff17 	ldw	r2,-4(fp)
    42ac:	10801404 	addi	r2,r2,80
    42b0:	01402004 	movi	r5,128
    42b4:	1009883a 	mov	r4,r2
    42b8:	00013700 	call	1370 <memzero>
	context->bitcount[0] = context->bitcount[1] =  0;
    42bc:	e0bfff17 	ldw	r2,-4(fp)
    42c0:	10001215 	stw	zero,72(r2)
    42c4:	10001315 	stw	zero,76(r2)
    42c8:	e13fff17 	ldw	r4,-4(fp)
    42cc:	20801217 	ldw	r2,72(r4)
    42d0:	20c01317 	ldw	r3,76(r4)
    42d4:	e13fff17 	ldw	r4,-4(fp)
    42d8:	20801015 	stw	r2,64(r4)
    42dc:	20c01115 	stw	r3,68(r4)
    42e0:	00000106 	br	42e8 <sha512_Init+0x74>


/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context) {
	if (context == (SHA512_CTX*)0) {
		return;
    42e4:	0001883a 	nop
	}
	MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
	memzero(context->buffer, SHA512_BLOCK_LENGTH);
	context->bitcount[0] = context->bitcount[1] =  0;
}
    42e8:	e037883a 	mov	sp,fp
    42ec:	dfc00117 	ldw	ra,4(sp)
    42f0:	df000017 	ldw	fp,0(sp)
    42f4:	dec00204 	addi	sp,sp,8
    42f8:	f800283a 	ret

000042fc <sha512_Transform>:
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha512_Transform(const sha2_word64* state_in, const sha2_word64* data, sha2_word64* state_out) {
    42fc:	deff6e04 	addi	sp,sp,-584
    4300:	df009115 	stw	fp,580(sp)
    4304:	dd809015 	stw	r22,576(sp)
    4308:	dd408f15 	stw	r21,572(sp)
    430c:	dd008e15 	stw	r20,568(sp)
    4310:	dcc08d15 	stw	r19,564(sp)
    4314:	dc808c15 	stw	r18,560(sp)
    4318:	dc408b15 	stw	r17,556(sp)
    431c:	dc008a15 	stw	r16,552(sp)
    4320:	df009104 	addi	fp,sp,580
    4324:	e13fa815 	stw	r4,-352(fp)
    4328:	e17fa915 	stw	r5,-348(fp)
    432c:	e1bfaa15 	stw	r6,-344(fp)
	sha2_word64	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word64	T1, T2, W512[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    4330:	e0ffa817 	ldw	r3,-352(fp)
    4334:	18800017 	ldw	r2,0(r3)
    4338:	e0bf6f15 	stw	r2,-580(fp)
    433c:	18800117 	ldw	r2,4(r3)
    4340:	e0bf7015 	stw	r2,-576(fp)
	b = state_in[1];
    4344:	e0ffa817 	ldw	r3,-352(fp)
    4348:	18800217 	ldw	r2,8(r3)
    434c:	e0bf7115 	stw	r2,-572(fp)
    4350:	18800317 	ldw	r2,12(r3)
    4354:	e0bf7215 	stw	r2,-568(fp)
	c = state_in[2];
    4358:	e0ffa817 	ldw	r3,-352(fp)
    435c:	18800417 	ldw	r2,16(r3)
    4360:	e0bf7315 	stw	r2,-564(fp)
    4364:	18800517 	ldw	r2,20(r3)
    4368:	e0bf7415 	stw	r2,-560(fp)
	d = state_in[3];
    436c:	e0ffa817 	ldw	r3,-352(fp)
    4370:	18800617 	ldw	r2,24(r3)
    4374:	e0bf7515 	stw	r2,-556(fp)
    4378:	18800717 	ldw	r2,28(r3)
    437c:	e0bf7615 	stw	r2,-552(fp)
	e = state_in[4];
    4380:	e0ffa817 	ldw	r3,-352(fp)
    4384:	18800817 	ldw	r2,32(r3)
    4388:	e0bf7715 	stw	r2,-548(fp)
    438c:	18800917 	ldw	r2,36(r3)
    4390:	e0bf7815 	stw	r2,-544(fp)
	f = state_in[5];
    4394:	e0ffa817 	ldw	r3,-352(fp)
    4398:	18800a17 	ldw	r2,40(r3)
    439c:	e0bf7915 	stw	r2,-540(fp)
    43a0:	18800b17 	ldw	r2,44(r3)
    43a4:	e0bf7a15 	stw	r2,-536(fp)
	g = state_in[6];
    43a8:	e0ffa817 	ldw	r3,-352(fp)
    43ac:	18800c17 	ldw	r2,48(r3)
    43b0:	e0bf7b15 	stw	r2,-532(fp)
    43b4:	18800d17 	ldw	r2,52(r3)
    43b8:	e0bf7c15 	stw	r2,-528(fp)
	h = state_in[7];
    43bc:	e0ffa817 	ldw	r3,-352(fp)
    43c0:	18800e17 	ldw	r2,56(r3)
    43c4:	e0bf7d15 	stw	r2,-524(fp)
    43c8:	18800f17 	ldw	r2,60(r3)
    43cc:	e0bf7e15 	stw	r2,-520(fp)

	j = 0;
    43d0:	e03f7f15 	stw	zero,-516(fp)
	do {
		/* Apply the SHA-512 compression function to update a..h with copy */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + (W512[j] = *data++);
    43d4:	e0bf7817 	ldw	r2,-544(fp)
    43d8:	100694ba 	slli	r3,r2,18
    43dc:	e0bf7717 	ldw	r2,-548(fp)
    43e0:	1004d3ba 	srli	r2,r2,14
    43e4:	1884b03a 	or	r2,r3,r2
    43e8:	e0bfab15 	stw	r2,-340(fp)
    43ec:	e0bf7717 	ldw	r2,-548(fp)
    43f0:	100694ba 	slli	r3,r2,18
    43f4:	e0bf7817 	ldw	r2,-544(fp)
    43f8:	1004d3ba 	srli	r2,r2,14
    43fc:	1884b03a 	or	r2,r3,r2
    4400:	e0bfac15 	stw	r2,-336(fp)
    4404:	e0bf7817 	ldw	r2,-544(fp)
    4408:	100693ba 	slli	r3,r2,14
    440c:	e0bf7717 	ldw	r2,-548(fp)
    4410:	1004d4ba 	srli	r2,r2,18
    4414:	1884b03a 	or	r2,r3,r2
    4418:	e0bfad15 	stw	r2,-332(fp)
    441c:	e0bf7717 	ldw	r2,-548(fp)
    4420:	100693ba 	slli	r3,r2,14
    4424:	e0bf7817 	ldw	r2,-544(fp)
    4428:	1004d4ba 	srli	r2,r2,18
    442c:	1884b03a 	or	r2,r3,r2
    4430:	e0bfae15 	stw	r2,-328(fp)
    4434:	e0bfab17 	ldw	r2,-340(fp)
    4438:	e0ffad17 	ldw	r3,-332(fp)
    443c:	10c4f03a 	xor	r2,r2,r3
    4440:	e0bfaf15 	stw	r2,-324(fp)
    4444:	e13fac17 	ldw	r4,-336(fp)
    4448:	e17fae17 	ldw	r5,-328(fp)
    444c:	2148f03a 	xor	r4,r4,r5
    4450:	e13fb015 	stw	r4,-320(fp)
    4454:	e0bf7717 	ldw	r2,-548(fp)
    4458:	1006d27a 	srli	r3,r2,9
    445c:	e0bf7817 	ldw	r2,-544(fp)
    4460:	100495fa 	slli	r2,r2,23
    4464:	1884b03a 	or	r2,r3,r2
    4468:	e0bfb215 	stw	r2,-312(fp)
    446c:	e0bf7817 	ldw	r2,-544(fp)
    4470:	1006d27a 	srli	r3,r2,9
    4474:	e0bf7717 	ldw	r2,-548(fp)
    4478:	100495fa 	slli	r2,r2,23
    447c:	1884b03a 	or	r2,r3,r2
    4480:	e0bfb115 	stw	r2,-316(fp)
    4484:	e1bfaf17 	ldw	r6,-324(fp)
    4488:	e1ffb117 	ldw	r7,-316(fp)
    448c:	31ccf03a 	xor	r6,r6,r7
    4490:	e1bfb315 	stw	r6,-308(fp)
    4494:	e0bfb017 	ldw	r2,-320(fp)
    4498:	e0ffb217 	ldw	r3,-312(fp)
    449c:	10c4f03a 	xor	r2,r2,r3
    44a0:	e0bfb415 	stw	r2,-304(fp)
    44a4:	e0bf7d17 	ldw	r2,-524(fp)
    44a8:	e0ff7e17 	ldw	r3,-520(fp)
    44ac:	e1bfb317 	ldw	r6,-308(fp)
    44b0:	3089883a 	add	r4,r6,r2
    44b4:	e1ffb317 	ldw	r7,-308(fp)
    44b8:	21cd803a 	cmpltu	r6,r4,r7
    44bc:	e1ffb417 	ldw	r7,-304(fp)
    44c0:	38cb883a 	add	r5,r7,r3
    44c4:	3145883a 	add	r2,r6,r5
    44c8:	100b883a 	mov	r5,r2
    44cc:	200d883a 	mov	r6,r4
    44d0:	280f883a 	mov	r7,r5
    44d4:	e0ff7717 	ldw	r3,-548(fp)
    44d8:	e0bf7917 	ldw	r2,-540(fp)
    44dc:	1884703a 	and	r2,r3,r2
    44e0:	e0bfb515 	stw	r2,-300(fp)
    44e4:	e0ff7817 	ldw	r3,-544(fp)
    44e8:	e0bf7a17 	ldw	r2,-536(fp)
    44ec:	1884703a 	and	r2,r3,r2
    44f0:	e0bfb615 	stw	r2,-296(fp)
    44f4:	e0bf7717 	ldw	r2,-548(fp)
    44f8:	0084303a 	nor	r2,zero,r2
    44fc:	e0bfb715 	stw	r2,-292(fp)
    4500:	e0bf7817 	ldw	r2,-544(fp)
    4504:	0084303a 	nor	r2,zero,r2
    4508:	e0bfb815 	stw	r2,-288(fp)
    450c:	e0bf7b17 	ldw	r2,-532(fp)
    4510:	e0ffb717 	ldw	r3,-292(fp)
    4514:	10c4703a 	and	r2,r2,r3
    4518:	e0bfb915 	stw	r2,-284(fp)
    451c:	e0bf7c17 	ldw	r2,-528(fp)
    4520:	e13fb817 	ldw	r4,-288(fp)
    4524:	1104703a 	and	r2,r2,r4
    4528:	e0bfba15 	stw	r2,-280(fp)
    452c:	e17fb517 	ldw	r5,-300(fp)
    4530:	e0bfb917 	ldw	r2,-284(fp)
    4534:	288af03a 	xor	r5,r5,r2
    4538:	e17fbb15 	stw	r5,-276(fp)
    453c:	e0ffb617 	ldw	r3,-296(fp)
    4540:	e13fba17 	ldw	r4,-280(fp)
    4544:	1906f03a 	xor	r3,r3,r4
    4548:	e0ffbc15 	stw	r3,-272(fp)
    454c:	e17fbb17 	ldw	r5,-276(fp)
    4550:	3145883a 	add	r2,r6,r5
    4554:	1189803a 	cmpltu	r4,r2,r6
    4558:	e17fbc17 	ldw	r5,-272(fp)
    455c:	3947883a 	add	r3,r7,r5
    4560:	20c9883a 	add	r4,r4,r3
    4564:	2007883a 	mov	r3,r4
    4568:	100f883a 	mov	r7,r2
    456c:	1811883a 	mov	r8,r3
    4570:	00c00174 	movhi	r3,5
    4574:	18c77404 	addi	r3,r3,7632
    4578:	e0bf7f17 	ldw	r2,-516(fp)
    457c:	100490fa 	slli	r2,r2,3
    4580:	1889883a 	add	r4,r3,r2
    4584:	20800017 	ldw	r2,0(r4)
    4588:	20c00117 	ldw	r3,4(r4)
    458c:	3889883a 	add	r4,r7,r2
    4590:	21cd803a 	cmpltu	r6,r4,r7
    4594:	40cb883a 	add	r5,r8,r3
    4598:	3145883a 	add	r2,r6,r5
    459c:	100b883a 	mov	r5,r2
    45a0:	200f883a 	mov	r7,r4
    45a4:	2811883a 	mov	r8,r5
    45a8:	e0ffa917 	ldw	r3,-348(fp)
    45ac:	18800204 	addi	r2,r3,8
    45b0:	e0bfa915 	stw	r2,-348(fp)
    45b4:	19000017 	ldw	r4,0(r3)
    45b8:	19400117 	ldw	r5,4(r3)
    45bc:	e0bf7f17 	ldw	r2,-516(fp)
    45c0:	100490fa 	slli	r2,r2,3
    45c4:	e1bf6f04 	addi	r6,fp,-580
    45c8:	3085883a 	add	r2,r6,r2
    45cc:	10801904 	addi	r2,r2,100
    45d0:	11000015 	stw	r4,0(r2)
    45d4:	11400115 	stw	r5,4(r2)
    45d8:	e0bf7f17 	ldw	r2,-516(fp)
    45dc:	100490fa 	slli	r2,r2,3
    45e0:	e0ff6f04 	addi	r3,fp,-580
    45e4:	1885883a 	add	r2,r3,r2
    45e8:	10801904 	addi	r2,r2,100
    45ec:	11000017 	ldw	r4,0(r2)
    45f0:	11400117 	ldw	r5,4(r2)
    45f4:	3905883a 	add	r2,r7,r4
    45f8:	11cd803a 	cmpltu	r6,r2,r7
    45fc:	4147883a 	add	r3,r8,r5
    4600:	30c9883a 	add	r4,r6,r3
    4604:	2007883a 	mov	r3,r4
    4608:	e0bf8015 	stw	r2,-512(fp)
    460c:	e0ff8115 	stw	r3,-508(fp)
		T2 = Sigma0_512(a) + Maj(a, b, c);
    4610:	e0bf7017 	ldw	r2,-576(fp)
    4614:	1006913a 	slli	r3,r2,4
    4618:	e0bf6f17 	ldw	r2,-580(fp)
    461c:	1004d73a 	srli	r2,r2,28
    4620:	1884b03a 	or	r2,r3,r2
    4624:	e0bfbd15 	stw	r2,-268(fp)
    4628:	e0bf6f17 	ldw	r2,-580(fp)
    462c:	1006913a 	slli	r3,r2,4
    4630:	e0bf7017 	ldw	r2,-576(fp)
    4634:	1004d73a 	srli	r2,r2,28
    4638:	1884b03a 	or	r2,r3,r2
    463c:	e0bfbe15 	stw	r2,-264(fp)
    4640:	e0bf6f17 	ldw	r2,-580(fp)
    4644:	1006d0ba 	srli	r3,r2,2
    4648:	e0bf7017 	ldw	r2,-576(fp)
    464c:	100497ba 	slli	r2,r2,30
    4650:	1884b03a 	or	r2,r3,r2
    4654:	e0bfc015 	stw	r2,-256(fp)
    4658:	e0bf7017 	ldw	r2,-576(fp)
    465c:	1006d0ba 	srli	r3,r2,2
    4660:	e0bf6f17 	ldw	r2,-580(fp)
    4664:	100497ba 	slli	r2,r2,30
    4668:	1884b03a 	or	r2,r3,r2
    466c:	e0bfbf15 	stw	r2,-260(fp)
    4670:	e13fbd17 	ldw	r4,-268(fp)
    4674:	e17fbf17 	ldw	r5,-260(fp)
    4678:	2148f03a 	xor	r4,r4,r5
    467c:	e13fc115 	stw	r4,-252(fp)
    4680:	e1bfbe17 	ldw	r6,-264(fp)
    4684:	e1ffc017 	ldw	r7,-256(fp)
    4688:	31ccf03a 	xor	r6,r6,r7
    468c:	e1bfc215 	stw	r6,-248(fp)
    4690:	e0bf6f17 	ldw	r2,-580(fp)
    4694:	1006d1fa 	srli	r3,r2,7
    4698:	e0bf7017 	ldw	r2,-576(fp)
    469c:	1004967a 	slli	r2,r2,25
    46a0:	18acb03a 	or	r22,r3,r2
    46a4:	e0bf7017 	ldw	r2,-576(fp)
    46a8:	1006d1fa 	srli	r3,r2,7
    46ac:	e0bf6f17 	ldw	r2,-580(fp)
    46b0:	1004967a 	slli	r2,r2,25
    46b4:	18aab03a 	or	r21,r3,r2
    46b8:	e0bfc117 	ldw	r2,-252(fp)
    46bc:	1552f03a 	xor	r9,r2,r21
    46c0:	e0ffc217 	ldw	r3,-248(fp)
    46c4:	1d94f03a 	xor	r10,r3,r22
    46c8:	e0ff6f17 	ldw	r3,-580(fp)
    46cc:	e0bf7117 	ldw	r2,-572(fp)
    46d0:	18a6703a 	and	r19,r3,r2
    46d4:	e0ff7017 	ldw	r3,-576(fp)
    46d8:	e0bf7217 	ldw	r2,-568(fp)
    46dc:	18a8703a 	and	r20,r3,r2
    46e0:	e0ff6f17 	ldw	r3,-580(fp)
    46e4:	e0bf7317 	ldw	r2,-564(fp)
    46e8:	18a2703a 	and	r17,r3,r2
    46ec:	e0ff7017 	ldw	r3,-576(fp)
    46f0:	e0bf7417 	ldw	r2,-560(fp)
    46f4:	18a4703a 	and	r18,r3,r2
    46f8:	9c5ef03a 	xor	r15,r19,r17
    46fc:	a4a0f03a 	xor	r16,r20,r18
    4700:	e0ff7117 	ldw	r3,-572(fp)
    4704:	e0bf7317 	ldw	r2,-564(fp)
    4708:	189a703a 	and	r13,r3,r2
    470c:	e0ff7217 	ldw	r3,-568(fp)
    4710:	e0bf7417 	ldw	r2,-560(fp)
    4714:	189c703a 	and	r14,r3,r2
    4718:	7b56f03a 	xor	r11,r15,r13
    471c:	8398f03a 	xor	r12,r16,r14
    4720:	4ac5883a 	add	r2,r9,r11
    4724:	1249803a 	cmpltu	r4,r2,r9
    4728:	5307883a 	add	r3,r10,r12
    472c:	20c9883a 	add	r4,r4,r3
    4730:	2007883a 	mov	r3,r4
    4734:	e0bf8215 	stw	r2,-504(fp)
    4738:	e0ff8315 	stw	r3,-500(fp)
		h = g;
    473c:	e0bf7b17 	ldw	r2,-532(fp)
    4740:	e0bf7d15 	stw	r2,-524(fp)
    4744:	e0bf7c17 	ldw	r2,-528(fp)
    4748:	e0bf7e15 	stw	r2,-520(fp)
		g = f;
    474c:	e0bf7917 	ldw	r2,-540(fp)
    4750:	e0bf7b15 	stw	r2,-532(fp)
    4754:	e0bf7a17 	ldw	r2,-536(fp)
    4758:	e0bf7c15 	stw	r2,-528(fp)
		f = e;
    475c:	e0bf7717 	ldw	r2,-548(fp)
    4760:	e0bf7915 	stw	r2,-540(fp)
    4764:	e0bf7817 	ldw	r2,-544(fp)
    4768:	e0bf7a15 	stw	r2,-536(fp)
		e = d + T1;
    476c:	e1ff7517 	ldw	r7,-556(fp)
    4770:	e23f7617 	ldw	r8,-552(fp)
    4774:	e13f8017 	ldw	r4,-512(fp)
    4778:	e17f8117 	ldw	r5,-508(fp)
    477c:	3905883a 	add	r2,r7,r4
    4780:	11cd803a 	cmpltu	r6,r2,r7
    4784:	4147883a 	add	r3,r8,r5
    4788:	30c9883a 	add	r4,r6,r3
    478c:	2007883a 	mov	r3,r4
    4790:	e0bf7715 	stw	r2,-548(fp)
    4794:	e0ff7815 	stw	r3,-544(fp)
		d = c;
    4798:	e0bf7317 	ldw	r2,-564(fp)
    479c:	e0bf7515 	stw	r2,-556(fp)
    47a0:	e0bf7417 	ldw	r2,-560(fp)
    47a4:	e0bf7615 	stw	r2,-552(fp)
		c = b;
    47a8:	e0bf7117 	ldw	r2,-572(fp)
    47ac:	e0bf7315 	stw	r2,-564(fp)
    47b0:	e0bf7217 	ldw	r2,-568(fp)
    47b4:	e0bf7415 	stw	r2,-560(fp)
		b = a;
    47b8:	e0bf6f17 	ldw	r2,-580(fp)
    47bc:	e0bf7115 	stw	r2,-572(fp)
    47c0:	e0bf7017 	ldw	r2,-576(fp)
    47c4:	e0bf7215 	stw	r2,-568(fp)
		a = T1 + T2;
    47c8:	e1ff8017 	ldw	r7,-512(fp)
    47cc:	e23f8117 	ldw	r8,-508(fp)
    47d0:	e13f8217 	ldw	r4,-504(fp)
    47d4:	e17f8317 	ldw	r5,-500(fp)
    47d8:	3905883a 	add	r2,r7,r4
    47dc:	11cd803a 	cmpltu	r6,r2,r7
    47e0:	4147883a 	add	r3,r8,r5
    47e4:	30c9883a 	add	r4,r6,r3
    47e8:	2007883a 	mov	r3,r4
    47ec:	e0bf6f15 	stw	r2,-580(fp)
    47f0:	e0ff7015 	stw	r3,-576(fp)

		j++;
    47f4:	e0bf7f17 	ldw	r2,-516(fp)
    47f8:	10800044 	addi	r2,r2,1
    47fc:	e0bf7f15 	stw	r2,-516(fp)
	} while (j < 16);
    4800:	e0bf7f17 	ldw	r2,-516(fp)
    4804:	10800410 	cmplti	r2,r2,16
    4808:	103ef21e 	bne	r2,zero,43d4 <__alt_mem_epcs_flash_controller+0xfdffb3d4>

	do {
		/* Part of the message block expansion: */
		s0 = W512[(j+1)&0x0f];
    480c:	e0bf7f17 	ldw	r2,-516(fp)
    4810:	10800044 	addi	r2,r2,1
    4814:	108003cc 	andi	r2,r2,15
    4818:	100490fa 	slli	r2,r2,3
    481c:	e13f6f04 	addi	r4,fp,-580
    4820:	2085883a 	add	r2,r4,r2
    4824:	10c01904 	addi	r3,r2,100
    4828:	18800017 	ldw	r2,0(r3)
    482c:	e0bf8415 	stw	r2,-496(fp)
    4830:	18800117 	ldw	r2,4(r3)
    4834:	e0bf8515 	stw	r2,-492(fp)
		s0 = sigma0_512(s0);
    4838:	e0bf8517 	ldw	r2,-492(fp)
    483c:	100697fa 	slli	r3,r2,31
    4840:	e0bf8417 	ldw	r2,-496(fp)
    4844:	1004d07a 	srli	r2,r2,1
    4848:	1884b03a 	or	r2,r3,r2
    484c:	e0bfc315 	stw	r2,-244(fp)
    4850:	e0bf8417 	ldw	r2,-496(fp)
    4854:	100697fa 	slli	r3,r2,31
    4858:	e0bf8517 	ldw	r2,-492(fp)
    485c:	1004d07a 	srli	r2,r2,1
    4860:	1884b03a 	or	r2,r3,r2
    4864:	e0bfc415 	stw	r2,-240(fp)
    4868:	e0bf8517 	ldw	r2,-492(fp)
    486c:	1006963a 	slli	r3,r2,24
    4870:	e0bf8417 	ldw	r2,-496(fp)
    4874:	1004d23a 	srli	r2,r2,8
    4878:	1884b03a 	or	r2,r3,r2
    487c:	e0bfc515 	stw	r2,-236(fp)
    4880:	e0bf8417 	ldw	r2,-496(fp)
    4884:	1006963a 	slli	r3,r2,24
    4888:	e0bf8517 	ldw	r2,-492(fp)
    488c:	1004d23a 	srli	r2,r2,8
    4890:	1884b03a 	or	r2,r3,r2
    4894:	e0bfc615 	stw	r2,-232(fp)
    4898:	e17fc317 	ldw	r5,-244(fp)
    489c:	e1bfc517 	ldw	r6,-236(fp)
    48a0:	298af03a 	xor	r5,r5,r6
    48a4:	e17fc715 	stw	r5,-228(fp)
    48a8:	e1ffc417 	ldw	r7,-240(fp)
    48ac:	e0bfc617 	ldw	r2,-232(fp)
    48b0:	388ef03a 	xor	r7,r7,r2
    48b4:	e1ffc815 	stw	r7,-224(fp)
    48b8:	e0bf8517 	ldw	r2,-492(fp)
    48bc:	1006967a 	slli	r3,r2,25
    48c0:	e0bf8417 	ldw	r2,-496(fp)
    48c4:	1004d1fa 	srli	r2,r2,7
    48c8:	e0bfc915 	stw	r2,-220(fp)
    48cc:	e13fc917 	ldw	r4,-220(fp)
    48d0:	1906b03a 	or	r3,r3,r4
    48d4:	e0ffc915 	stw	r3,-220(fp)
    48d8:	e0bf8517 	ldw	r2,-492(fp)
    48dc:	1004d1fa 	srli	r2,r2,7
    48e0:	e0bfca15 	stw	r2,-216(fp)
    48e4:	e17fc717 	ldw	r5,-228(fp)
    48e8:	e1bfc917 	ldw	r6,-220(fp)
    48ec:	2984f03a 	xor	r2,r5,r6
    48f0:	e0bf8415 	stw	r2,-496(fp)
    48f4:	e1ffc817 	ldw	r7,-224(fp)
    48f8:	e0ffca17 	ldw	r3,-216(fp)
    48fc:	38c4f03a 	xor	r2,r7,r3
    4900:	e0bf8515 	stw	r2,-492(fp)
		s1 = W512[(j+14)&0x0f];
    4904:	e0bf7f17 	ldw	r2,-516(fp)
    4908:	10800384 	addi	r2,r2,14
    490c:	108003cc 	andi	r2,r2,15
    4910:	100490fa 	slli	r2,r2,3
    4914:	e13f6f04 	addi	r4,fp,-580
    4918:	2085883a 	add	r2,r4,r2
    491c:	10c01904 	addi	r3,r2,100
    4920:	18800017 	ldw	r2,0(r3)
    4924:	e0bf8615 	stw	r2,-488(fp)
    4928:	18800117 	ldw	r2,4(r3)
    492c:	e0bf8715 	stw	r2,-484(fp)
		s1 =  sigma1_512(s1);
    4930:	e0bf8717 	ldw	r2,-484(fp)
    4934:	1006937a 	slli	r3,r2,13
    4938:	e0bf8617 	ldw	r2,-488(fp)
    493c:	1004d4fa 	srli	r2,r2,19
    4940:	1884b03a 	or	r2,r3,r2
    4944:	e0bfcb15 	stw	r2,-212(fp)
    4948:	e0bf8617 	ldw	r2,-488(fp)
    494c:	1006937a 	slli	r3,r2,13
    4950:	e0bf8717 	ldw	r2,-484(fp)
    4954:	1004d4fa 	srli	r2,r2,19
    4958:	1884b03a 	or	r2,r3,r2
    495c:	e0bfcc15 	stw	r2,-208(fp)
    4960:	e0bf8617 	ldw	r2,-488(fp)
    4964:	1006d77a 	srli	r3,r2,29
    4968:	e0bf8717 	ldw	r2,-484(fp)
    496c:	100490fa 	slli	r2,r2,3
    4970:	1884b03a 	or	r2,r3,r2
    4974:	e0bfce15 	stw	r2,-200(fp)
    4978:	e0bf8717 	ldw	r2,-484(fp)
    497c:	1006d77a 	srli	r3,r2,29
    4980:	e0bf8617 	ldw	r2,-488(fp)
    4984:	100490fa 	slli	r2,r2,3
    4988:	1884b03a 	or	r2,r3,r2
    498c:	e0bfcd15 	stw	r2,-204(fp)
    4990:	e17fcb17 	ldw	r5,-212(fp)
    4994:	e1bfcd17 	ldw	r6,-204(fp)
    4998:	298af03a 	xor	r5,r5,r6
    499c:	e17fcf15 	stw	r5,-196(fp)
    49a0:	e1ffcc17 	ldw	r7,-208(fp)
    49a4:	e0bfce17 	ldw	r2,-200(fp)
    49a8:	388ef03a 	xor	r7,r7,r2
    49ac:	e1ffd015 	stw	r7,-192(fp)
    49b0:	e0bf8717 	ldw	r2,-484(fp)
    49b4:	100696ba 	slli	r3,r2,26
    49b8:	e0bf8617 	ldw	r2,-488(fp)
    49bc:	1004d1ba 	srli	r2,r2,6
    49c0:	e0bfd115 	stw	r2,-188(fp)
    49c4:	e13fd117 	ldw	r4,-188(fp)
    49c8:	1906b03a 	or	r3,r3,r4
    49cc:	e0ffd115 	stw	r3,-188(fp)
    49d0:	e0bf8717 	ldw	r2,-484(fp)
    49d4:	1004d1ba 	srli	r2,r2,6
    49d8:	e0bfd215 	stw	r2,-184(fp)
    49dc:	e17fcf17 	ldw	r5,-196(fp)
    49e0:	e1bfd117 	ldw	r6,-188(fp)
    49e4:	2984f03a 	xor	r2,r5,r6
    49e8:	e0bf8615 	stw	r2,-488(fp)
    49ec:	e1ffd017 	ldw	r7,-192(fp)
    49f0:	e0ffd217 	ldw	r3,-184(fp)
    49f4:	38c4f03a 	xor	r2,r7,r3
    49f8:	e0bf8715 	stw	r2,-484(fp)

		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    49fc:	e0bf7817 	ldw	r2,-544(fp)
    4a00:	100694ba 	slli	r3,r2,18
    4a04:	e0bf7717 	ldw	r2,-548(fp)
    4a08:	1004d3ba 	srli	r2,r2,14
    4a0c:	1884b03a 	or	r2,r3,r2
    4a10:	e0bfd315 	stw	r2,-180(fp)
    4a14:	e0bf7717 	ldw	r2,-548(fp)
    4a18:	100694ba 	slli	r3,r2,18
    4a1c:	e0bf7817 	ldw	r2,-544(fp)
    4a20:	1004d3ba 	srli	r2,r2,14
    4a24:	1884b03a 	or	r2,r3,r2
    4a28:	e0bfd415 	stw	r2,-176(fp)
    4a2c:	e0bf7817 	ldw	r2,-544(fp)
    4a30:	100693ba 	slli	r3,r2,14
    4a34:	e0bf7717 	ldw	r2,-548(fp)
    4a38:	1004d4ba 	srli	r2,r2,18
    4a3c:	1884b03a 	or	r2,r3,r2
    4a40:	e0bfd515 	stw	r2,-172(fp)
    4a44:	e0bf7717 	ldw	r2,-548(fp)
    4a48:	100693ba 	slli	r3,r2,14
    4a4c:	e0bf7817 	ldw	r2,-544(fp)
    4a50:	1004d4ba 	srli	r2,r2,18
    4a54:	1884b03a 	or	r2,r3,r2
    4a58:	e0bfd615 	stw	r2,-168(fp)
    4a5c:	e13fd317 	ldw	r4,-180(fp)
    4a60:	e17fd517 	ldw	r5,-172(fp)
    4a64:	2148f03a 	xor	r4,r4,r5
    4a68:	e13fd715 	stw	r4,-164(fp)
    4a6c:	e1bfd417 	ldw	r6,-176(fp)
    4a70:	e1ffd617 	ldw	r7,-168(fp)
    4a74:	31ccf03a 	xor	r6,r6,r7
    4a78:	e1bfd815 	stw	r6,-160(fp)
    4a7c:	e0bf7717 	ldw	r2,-548(fp)
    4a80:	1006d27a 	srli	r3,r2,9
    4a84:	e0bf7817 	ldw	r2,-544(fp)
    4a88:	100495fa 	slli	r2,r2,23
    4a8c:	1884b03a 	or	r2,r3,r2
    4a90:	e0bfda15 	stw	r2,-152(fp)
    4a94:	e0bf7817 	ldw	r2,-544(fp)
    4a98:	1006d27a 	srli	r3,r2,9
    4a9c:	e0bf7717 	ldw	r2,-548(fp)
    4aa0:	100495fa 	slli	r2,r2,23
    4aa4:	1884b03a 	or	r2,r3,r2
    4aa8:	e0bfd915 	stw	r2,-156(fp)
    4aac:	e0bfd717 	ldw	r2,-164(fp)
    4ab0:	e0ffd917 	ldw	r3,-156(fp)
    4ab4:	10c4f03a 	xor	r2,r2,r3
    4ab8:	e0bfdb15 	stw	r2,-148(fp)
    4abc:	e13fd817 	ldw	r4,-160(fp)
    4ac0:	e17fda17 	ldw	r5,-152(fp)
    4ac4:	2148f03a 	xor	r4,r4,r5
    4ac8:	e13fdc15 	stw	r4,-144(fp)
    4acc:	e0bf7d17 	ldw	r2,-524(fp)
    4ad0:	e0ff7e17 	ldw	r3,-520(fp)
    4ad4:	e1bfdb17 	ldw	r6,-148(fp)
    4ad8:	3089883a 	add	r4,r6,r2
    4adc:	e1ffdb17 	ldw	r7,-148(fp)
    4ae0:	21cd803a 	cmpltu	r6,r4,r7
    4ae4:	e1ffdc17 	ldw	r7,-144(fp)
    4ae8:	38cb883a 	add	r5,r7,r3
    4aec:	3145883a 	add	r2,r6,r5
    4af0:	100b883a 	mov	r5,r2
    4af4:	200d883a 	mov	r6,r4
    4af8:	280f883a 	mov	r7,r5
    4afc:	e0ff7717 	ldw	r3,-548(fp)
    4b00:	e0bf7917 	ldw	r2,-540(fp)
    4b04:	1884703a 	and	r2,r3,r2
    4b08:	e0bfdd15 	stw	r2,-140(fp)
    4b0c:	e0ff7817 	ldw	r3,-544(fp)
    4b10:	e0bf7a17 	ldw	r2,-536(fp)
    4b14:	1884703a 	and	r2,r3,r2
    4b18:	e0bfde15 	stw	r2,-136(fp)
    4b1c:	e0bf7717 	ldw	r2,-548(fp)
    4b20:	0084303a 	nor	r2,zero,r2
    4b24:	e0bfdf15 	stw	r2,-132(fp)
    4b28:	e0bf7817 	ldw	r2,-544(fp)
    4b2c:	0084303a 	nor	r2,zero,r2
    4b30:	e0bfe015 	stw	r2,-128(fp)
    4b34:	e0bf7b17 	ldw	r2,-532(fp)
    4b38:	e0ffdf17 	ldw	r3,-132(fp)
    4b3c:	10c4703a 	and	r2,r2,r3
    4b40:	e0bfe115 	stw	r2,-124(fp)
    4b44:	e0bf7c17 	ldw	r2,-528(fp)
    4b48:	e13fe017 	ldw	r4,-128(fp)
    4b4c:	1104703a 	and	r2,r2,r4
    4b50:	e0bfe215 	stw	r2,-120(fp)
    4b54:	e17fdd17 	ldw	r5,-140(fp)
    4b58:	e0bfe117 	ldw	r2,-124(fp)
    4b5c:	288af03a 	xor	r5,r5,r2
    4b60:	e17fe315 	stw	r5,-116(fp)
    4b64:	e0ffde17 	ldw	r3,-136(fp)
    4b68:	e13fe217 	ldw	r4,-120(fp)
    4b6c:	1906f03a 	xor	r3,r3,r4
    4b70:	e0ffe415 	stw	r3,-112(fp)
    4b74:	e17fe317 	ldw	r5,-116(fp)
    4b78:	3145883a 	add	r2,r6,r5
    4b7c:	1189803a 	cmpltu	r4,r2,r6
    4b80:	e17fe417 	ldw	r5,-112(fp)
    4b84:	3947883a 	add	r3,r7,r5
    4b88:	20c9883a 	add	r4,r4,r3
    4b8c:	2007883a 	mov	r3,r4
    4b90:	100f883a 	mov	r7,r2
    4b94:	1811883a 	mov	r8,r3
    4b98:	00c00174 	movhi	r3,5
    4b9c:	18c77404 	addi	r3,r3,7632
    4ba0:	e0bf7f17 	ldw	r2,-516(fp)
    4ba4:	100490fa 	slli	r2,r2,3
    4ba8:	1889883a 	add	r4,r3,r2
    4bac:	20800017 	ldw	r2,0(r4)
    4bb0:	20c00117 	ldw	r3,4(r4)
    4bb4:	3889883a 	add	r4,r7,r2
    4bb8:	21cd803a 	cmpltu	r6,r4,r7
    4bbc:	40cb883a 	add	r5,r8,r3
    4bc0:	3145883a 	add	r2,r6,r5
    4bc4:	100b883a 	mov	r5,r2
    4bc8:	2017883a 	mov	r11,r4
    4bcc:	2819883a 	mov	r12,r5
		     (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);
    4bd0:	e0bf7f17 	ldw	r2,-516(fp)
    4bd4:	134003cc 	andi	r13,r2,15
    4bd8:	e0bf7f17 	ldw	r2,-516(fp)
    4bdc:	108003cc 	andi	r2,r2,15
    4be0:	100490fa 	slli	r2,r2,3
    4be4:	e1bf6f04 	addi	r6,fp,-580
    4be8:	3085883a 	add	r2,r6,r2
    4bec:	10801904 	addi	r2,r2,100
    4bf0:	12400017 	ldw	r9,0(r2)
    4bf4:	12800117 	ldw	r10,4(r2)
    4bf8:	e0bf7f17 	ldw	r2,-516(fp)
    4bfc:	10800244 	addi	r2,r2,9
    4c00:	108003cc 	andi	r2,r2,15
    4c04:	100490fa 	slli	r2,r2,3
    4c08:	e1ff6f04 	addi	r7,fp,-580
    4c0c:	3885883a 	add	r2,r7,r2
    4c10:	10801904 	addi	r2,r2,100
    4c14:	11c00017 	ldw	r7,0(r2)
    4c18:	12000117 	ldw	r8,4(r2)
    4c1c:	e0bf8617 	ldw	r2,-488(fp)
    4c20:	e0ff8717 	ldw	r3,-484(fp)
    4c24:	3889883a 	add	r4,r7,r2
    4c28:	21cd803a 	cmpltu	r6,r4,r7
    4c2c:	40cb883a 	add	r5,r8,r3
    4c30:	3145883a 	add	r2,r6,r5
    4c34:	100b883a 	mov	r5,r2
    4c38:	200f883a 	mov	r7,r4
    4c3c:	2811883a 	mov	r8,r5
    4c40:	e0bf8417 	ldw	r2,-496(fp)
    4c44:	e0ff8517 	ldw	r3,-492(fp)
    4c48:	3889883a 	add	r4,r7,r2
    4c4c:	21cd803a 	cmpltu	r6,r4,r7
    4c50:	40cb883a 	add	r5,r8,r3
    4c54:	3145883a 	add	r2,r6,r5
    4c58:	100b883a 	mov	r5,r2
    4c5c:	200d883a 	mov	r6,r4
    4c60:	280f883a 	mov	r7,r5
    4c64:	4985883a 	add	r2,r9,r6
    4c68:	1249803a 	cmpltu	r4,r2,r9
    4c6c:	51c7883a 	add	r3,r10,r7
    4c70:	20c9883a 	add	r4,r4,r3
    4c74:	2007883a 	mov	r3,r4
    4c78:	1009883a 	mov	r4,r2
    4c7c:	180b883a 	mov	r5,r3
    4c80:	680490fa 	slli	r2,r13,3
    4c84:	e0ff6f04 	addi	r3,fp,-580
    4c88:	1885883a 	add	r2,r3,r2
    4c8c:	10801904 	addi	r2,r2,100
    4c90:	11000015 	stw	r4,0(r2)
    4c94:	11400115 	stw	r5,4(r2)
    4c98:	680490fa 	slli	r2,r13,3
    4c9c:	e13f6f04 	addi	r4,fp,-580
    4ca0:	2085883a 	add	r2,r4,r2
    4ca4:	10801904 	addi	r2,r2,100
    4ca8:	11000017 	ldw	r4,0(r2)
    4cac:	11400117 	ldw	r5,4(r2)
		s0 = sigma0_512(s0);
		s1 = W512[(j+14)&0x0f];
		s1 =  sigma1_512(s1);

		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    4cb0:	5905883a 	add	r2,r11,r4
    4cb4:	12cd803a 	cmpltu	r6,r2,r11
    4cb8:	6147883a 	add	r3,r12,r5
    4cbc:	30c9883a 	add	r4,r6,r3
    4cc0:	2007883a 	mov	r3,r4
    4cc4:	e0bf8015 	stw	r2,-512(fp)
    4cc8:	e0ff8115 	stw	r3,-508(fp)
		     (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);
		T2 = Sigma0_512(a) + Maj(a, b, c);
    4ccc:	e0bf7017 	ldw	r2,-576(fp)
    4cd0:	1006913a 	slli	r3,r2,4
    4cd4:	e0bf6f17 	ldw	r2,-580(fp)
    4cd8:	1004d73a 	srli	r2,r2,28
    4cdc:	1884b03a 	or	r2,r3,r2
    4ce0:	e0bfe515 	stw	r2,-108(fp)
    4ce4:	e0bf6f17 	ldw	r2,-580(fp)
    4ce8:	1006913a 	slli	r3,r2,4
    4cec:	e0bf7017 	ldw	r2,-576(fp)
    4cf0:	1004d73a 	srli	r2,r2,28
    4cf4:	1884b03a 	or	r2,r3,r2
    4cf8:	e0bfe615 	stw	r2,-104(fp)
    4cfc:	e0bf6f17 	ldw	r2,-580(fp)
    4d00:	1006d0ba 	srli	r3,r2,2
    4d04:	e0bf7017 	ldw	r2,-576(fp)
    4d08:	100497ba 	slli	r2,r2,30
    4d0c:	1884b03a 	or	r2,r3,r2
    4d10:	e0bfe815 	stw	r2,-96(fp)
    4d14:	e0bf7017 	ldw	r2,-576(fp)
    4d18:	1006d0ba 	srli	r3,r2,2
    4d1c:	e0bf6f17 	ldw	r2,-580(fp)
    4d20:	100497ba 	slli	r2,r2,30
    4d24:	1884b03a 	or	r2,r3,r2
    4d28:	e0bfe715 	stw	r2,-100(fp)
    4d2c:	e17fe517 	ldw	r5,-108(fp)
    4d30:	e1bfe717 	ldw	r6,-100(fp)
    4d34:	298af03a 	xor	r5,r5,r6
    4d38:	e17fe915 	stw	r5,-92(fp)
    4d3c:	e1ffe617 	ldw	r7,-104(fp)
    4d40:	e0bfe817 	ldw	r2,-96(fp)
    4d44:	388ef03a 	xor	r7,r7,r2
    4d48:	e1ffea15 	stw	r7,-88(fp)
    4d4c:	e0bf6f17 	ldw	r2,-580(fp)
    4d50:	1006d1fa 	srli	r3,r2,7
    4d54:	e0bf7017 	ldw	r2,-576(fp)
    4d58:	1004967a 	slli	r2,r2,25
    4d5c:	1884b03a 	or	r2,r3,r2
    4d60:	e0bfec15 	stw	r2,-80(fp)
    4d64:	e0bf7017 	ldw	r2,-576(fp)
    4d68:	1006d1fa 	srli	r3,r2,7
    4d6c:	e0bf6f17 	ldw	r2,-580(fp)
    4d70:	1004967a 	slli	r2,r2,25
    4d74:	1884b03a 	or	r2,r3,r2
    4d78:	e0bfeb15 	stw	r2,-84(fp)
    4d7c:	e0ffe917 	ldw	r3,-92(fp)
    4d80:	e13feb17 	ldw	r4,-84(fp)
    4d84:	1906f03a 	xor	r3,r3,r4
    4d88:	e0ffed15 	stw	r3,-76(fp)
    4d8c:	e17fea17 	ldw	r5,-88(fp)
    4d90:	e1bfec17 	ldw	r6,-80(fp)
    4d94:	298af03a 	xor	r5,r5,r6
    4d98:	e17fee15 	stw	r5,-72(fp)
    4d9c:	e0ff6f17 	ldw	r3,-580(fp)
    4da0:	e0bf7117 	ldw	r2,-572(fp)
    4da4:	1884703a 	and	r2,r3,r2
    4da8:	e0bfef15 	stw	r2,-68(fp)
    4dac:	e0ff7017 	ldw	r3,-576(fp)
    4db0:	e0bf7217 	ldw	r2,-568(fp)
    4db4:	1884703a 	and	r2,r3,r2
    4db8:	e0bff015 	stw	r2,-64(fp)
    4dbc:	e0ff6f17 	ldw	r3,-580(fp)
    4dc0:	e0bf7317 	ldw	r2,-564(fp)
    4dc4:	1884703a 	and	r2,r3,r2
    4dc8:	e0bff115 	stw	r2,-60(fp)
    4dcc:	e0ff7017 	ldw	r3,-576(fp)
    4dd0:	e0bf7417 	ldw	r2,-560(fp)
    4dd4:	1884703a 	and	r2,r3,r2
    4dd8:	e0bff215 	stw	r2,-56(fp)
    4ddc:	e1ffef17 	ldw	r7,-68(fp)
    4de0:	e0bff117 	ldw	r2,-60(fp)
    4de4:	388ef03a 	xor	r7,r7,r2
    4de8:	e1fff315 	stw	r7,-52(fp)
    4dec:	e0fff017 	ldw	r3,-64(fp)
    4df0:	e13ff217 	ldw	r4,-56(fp)
    4df4:	1906f03a 	xor	r3,r3,r4
    4df8:	e0fff415 	stw	r3,-48(fp)
    4dfc:	e0ff7117 	ldw	r3,-572(fp)
    4e00:	e0bf7317 	ldw	r2,-564(fp)
    4e04:	1884703a 	and	r2,r3,r2
    4e08:	e0bff515 	stw	r2,-44(fp)
    4e0c:	e0ff7217 	ldw	r3,-568(fp)
    4e10:	e0bf7417 	ldw	r2,-560(fp)
    4e14:	1884703a 	and	r2,r3,r2
    4e18:	e0bff615 	stw	r2,-40(fp)
    4e1c:	e17ff317 	ldw	r5,-52(fp)
    4e20:	e1bff517 	ldw	r6,-44(fp)
    4e24:	298af03a 	xor	r5,r5,r6
    4e28:	e17ff715 	stw	r5,-36(fp)
    4e2c:	e1fff417 	ldw	r7,-48(fp)
    4e30:	e0bff617 	ldw	r2,-40(fp)
    4e34:	388ef03a 	xor	r7,r7,r2
    4e38:	e1fff815 	stw	r7,-32(fp)
    4e3c:	e13fed17 	ldw	r4,-76(fp)
    4e40:	e17ff717 	ldw	r5,-36(fp)
    4e44:	2145883a 	add	r2,r4,r5
    4e48:	e1bfed17 	ldw	r6,-76(fp)
    4e4c:	1189803a 	cmpltu	r4,r2,r6
    4e50:	e1ffee17 	ldw	r7,-72(fp)
    4e54:	e17ff817 	ldw	r5,-32(fp)
    4e58:	3947883a 	add	r3,r7,r5
    4e5c:	20c9883a 	add	r4,r4,r3
    4e60:	2007883a 	mov	r3,r4
    4e64:	e0bf8215 	stw	r2,-504(fp)
    4e68:	e0ff8315 	stw	r3,-500(fp)
		h = g;
    4e6c:	e0bf7b17 	ldw	r2,-532(fp)
    4e70:	e0bf7d15 	stw	r2,-524(fp)
    4e74:	e0bf7c17 	ldw	r2,-528(fp)
    4e78:	e0bf7e15 	stw	r2,-520(fp)
		g = f;
    4e7c:	e0bf7917 	ldw	r2,-540(fp)
    4e80:	e0bf7b15 	stw	r2,-532(fp)
    4e84:	e0bf7a17 	ldw	r2,-536(fp)
    4e88:	e0bf7c15 	stw	r2,-528(fp)
		f = e;
    4e8c:	e0bf7717 	ldw	r2,-548(fp)
    4e90:	e0bf7915 	stw	r2,-540(fp)
    4e94:	e0bf7817 	ldw	r2,-544(fp)
    4e98:	e0bf7a15 	stw	r2,-536(fp)
		e = d + T1;
    4e9c:	e1ff7517 	ldw	r7,-556(fp)
    4ea0:	e23f7617 	ldw	r8,-552(fp)
    4ea4:	e13f8017 	ldw	r4,-512(fp)
    4ea8:	e17f8117 	ldw	r5,-508(fp)
    4eac:	3905883a 	add	r2,r7,r4
    4eb0:	11cd803a 	cmpltu	r6,r2,r7
    4eb4:	4147883a 	add	r3,r8,r5
    4eb8:	30c9883a 	add	r4,r6,r3
    4ebc:	2007883a 	mov	r3,r4
    4ec0:	e0bf7715 	stw	r2,-548(fp)
    4ec4:	e0ff7815 	stw	r3,-544(fp)
		d = c;
    4ec8:	e0bf7317 	ldw	r2,-564(fp)
    4ecc:	e0bf7515 	stw	r2,-556(fp)
    4ed0:	e0bf7417 	ldw	r2,-560(fp)
    4ed4:	e0bf7615 	stw	r2,-552(fp)
		c = b;
    4ed8:	e0bf7117 	ldw	r2,-572(fp)
    4edc:	e0bf7315 	stw	r2,-564(fp)
    4ee0:	e0bf7217 	ldw	r2,-568(fp)
    4ee4:	e0bf7415 	stw	r2,-560(fp)
		b = a;
    4ee8:	e0bf6f17 	ldw	r2,-580(fp)
    4eec:	e0bf7115 	stw	r2,-572(fp)
    4ef0:	e0bf7017 	ldw	r2,-576(fp)
    4ef4:	e0bf7215 	stw	r2,-568(fp)
		a = T1 + T2;
    4ef8:	e1ff8017 	ldw	r7,-512(fp)
    4efc:	e23f8117 	ldw	r8,-508(fp)
    4f00:	e13f8217 	ldw	r4,-504(fp)
    4f04:	e17f8317 	ldw	r5,-500(fp)
    4f08:	3905883a 	add	r2,r7,r4
    4f0c:	11cd803a 	cmpltu	r6,r2,r7
    4f10:	4147883a 	add	r3,r8,r5
    4f14:	30c9883a 	add	r4,r6,r3
    4f18:	2007883a 	mov	r3,r4
    4f1c:	e0bf6f15 	stw	r2,-580(fp)
    4f20:	e0ff7015 	stw	r3,-576(fp)

		j++;
    4f24:	e0bf7f17 	ldw	r2,-516(fp)
    4f28:	10800044 	addi	r2,r2,1
    4f2c:	e0bf7f15 	stw	r2,-516(fp)
	} while (j < 80);
    4f30:	e0bf7f17 	ldw	r2,-516(fp)
    4f34:	10801410 	cmplti	r2,r2,80
    4f38:	103e341e 	bne	r2,zero,480c <__alt_mem_epcs_flash_controller+0xfdffb80c>

	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    4f3c:	e0bfa817 	ldw	r2,-352(fp)
    4f40:	11000017 	ldw	r4,0(r2)
    4f44:	11400117 	ldw	r5,4(r2)
    4f48:	e1bf6f17 	ldw	r6,-580(fp)
    4f4c:	e1ff7017 	ldw	r7,-576(fp)
    4f50:	2185883a 	add	r2,r4,r6
    4f54:	1111803a 	cmpltu	r8,r2,r4
    4f58:	29c7883a 	add	r3,r5,r7
    4f5c:	40c9883a 	add	r4,r8,r3
    4f60:	2007883a 	mov	r3,r4
    4f64:	1009883a 	mov	r4,r2
    4f68:	180b883a 	mov	r5,r3
    4f6c:	e0bfaa17 	ldw	r2,-344(fp)
    4f70:	11000015 	stw	r4,0(r2)
    4f74:	11400115 	stw	r5,4(r2)
	state_out[1] = state_in[1] + b;
    4f78:	e0bfaa17 	ldw	r2,-344(fp)
    4f7c:	12000204 	addi	r8,r2,8
    4f80:	e0bfa817 	ldw	r2,-352(fp)
    4f84:	10800204 	addi	r2,r2,8
    4f88:	11000017 	ldw	r4,0(r2)
    4f8c:	11400117 	ldw	r5,4(r2)
    4f90:	e1bf7117 	ldw	r6,-572(fp)
    4f94:	e1ff7217 	ldw	r7,-568(fp)
    4f98:	2185883a 	add	r2,r4,r6
    4f9c:	1113803a 	cmpltu	r9,r2,r4
    4fa0:	29c7883a 	add	r3,r5,r7
    4fa4:	48c9883a 	add	r4,r9,r3
    4fa8:	2007883a 	mov	r3,r4
    4fac:	1009883a 	mov	r4,r2
    4fb0:	180b883a 	mov	r5,r3
    4fb4:	41000015 	stw	r4,0(r8)
    4fb8:	41400115 	stw	r5,4(r8)
	state_out[2] = state_in[2] + c;
    4fbc:	e0bfaa17 	ldw	r2,-344(fp)
    4fc0:	12000404 	addi	r8,r2,16
    4fc4:	e0bfa817 	ldw	r2,-352(fp)
    4fc8:	10800404 	addi	r2,r2,16
    4fcc:	11000017 	ldw	r4,0(r2)
    4fd0:	11400117 	ldw	r5,4(r2)
    4fd4:	e1bf7317 	ldw	r6,-564(fp)
    4fd8:	e1ff7417 	ldw	r7,-560(fp)
    4fdc:	2185883a 	add	r2,r4,r6
    4fe0:	1113803a 	cmpltu	r9,r2,r4
    4fe4:	29c7883a 	add	r3,r5,r7
    4fe8:	48c9883a 	add	r4,r9,r3
    4fec:	2007883a 	mov	r3,r4
    4ff0:	1009883a 	mov	r4,r2
    4ff4:	180b883a 	mov	r5,r3
    4ff8:	41000015 	stw	r4,0(r8)
    4ffc:	41400115 	stw	r5,4(r8)
	state_out[3] = state_in[3] + d;
    5000:	e0bfaa17 	ldw	r2,-344(fp)
    5004:	12000604 	addi	r8,r2,24
    5008:	e0bfa817 	ldw	r2,-352(fp)
    500c:	10800604 	addi	r2,r2,24
    5010:	11000017 	ldw	r4,0(r2)
    5014:	11400117 	ldw	r5,4(r2)
    5018:	e1bf7517 	ldw	r6,-556(fp)
    501c:	e1ff7617 	ldw	r7,-552(fp)
    5020:	2185883a 	add	r2,r4,r6
    5024:	1113803a 	cmpltu	r9,r2,r4
    5028:	29c7883a 	add	r3,r5,r7
    502c:	48c9883a 	add	r4,r9,r3
    5030:	2007883a 	mov	r3,r4
    5034:	1009883a 	mov	r4,r2
    5038:	180b883a 	mov	r5,r3
    503c:	41000015 	stw	r4,0(r8)
    5040:	41400115 	stw	r5,4(r8)
	state_out[4] = state_in[4] + e;
    5044:	e0bfaa17 	ldw	r2,-344(fp)
    5048:	12000804 	addi	r8,r2,32
    504c:	e0bfa817 	ldw	r2,-352(fp)
    5050:	10800804 	addi	r2,r2,32
    5054:	11000017 	ldw	r4,0(r2)
    5058:	11400117 	ldw	r5,4(r2)
    505c:	e1bf7717 	ldw	r6,-548(fp)
    5060:	e1ff7817 	ldw	r7,-544(fp)
    5064:	2185883a 	add	r2,r4,r6
    5068:	1113803a 	cmpltu	r9,r2,r4
    506c:	29c7883a 	add	r3,r5,r7
    5070:	48c9883a 	add	r4,r9,r3
    5074:	2007883a 	mov	r3,r4
    5078:	1009883a 	mov	r4,r2
    507c:	180b883a 	mov	r5,r3
    5080:	41000015 	stw	r4,0(r8)
    5084:	41400115 	stw	r5,4(r8)
	state_out[5] = state_in[5] + f;
    5088:	e0bfaa17 	ldw	r2,-344(fp)
    508c:	12000a04 	addi	r8,r2,40
    5090:	e0bfa817 	ldw	r2,-352(fp)
    5094:	10800a04 	addi	r2,r2,40
    5098:	11000017 	ldw	r4,0(r2)
    509c:	11400117 	ldw	r5,4(r2)
    50a0:	e1bf7917 	ldw	r6,-540(fp)
    50a4:	e1ff7a17 	ldw	r7,-536(fp)
    50a8:	2185883a 	add	r2,r4,r6
    50ac:	1113803a 	cmpltu	r9,r2,r4
    50b0:	29c7883a 	add	r3,r5,r7
    50b4:	48c9883a 	add	r4,r9,r3
    50b8:	2007883a 	mov	r3,r4
    50bc:	1009883a 	mov	r4,r2
    50c0:	180b883a 	mov	r5,r3
    50c4:	41000015 	stw	r4,0(r8)
    50c8:	41400115 	stw	r5,4(r8)
	state_out[6] = state_in[6] + g;
    50cc:	e0bfaa17 	ldw	r2,-344(fp)
    50d0:	12000c04 	addi	r8,r2,48
    50d4:	e0bfa817 	ldw	r2,-352(fp)
    50d8:	10800c04 	addi	r2,r2,48
    50dc:	11000017 	ldw	r4,0(r2)
    50e0:	11400117 	ldw	r5,4(r2)
    50e4:	e1bf7b17 	ldw	r6,-532(fp)
    50e8:	e1ff7c17 	ldw	r7,-528(fp)
    50ec:	2185883a 	add	r2,r4,r6
    50f0:	1113803a 	cmpltu	r9,r2,r4
    50f4:	29c7883a 	add	r3,r5,r7
    50f8:	48c9883a 	add	r4,r9,r3
    50fc:	2007883a 	mov	r3,r4
    5100:	1009883a 	mov	r4,r2
    5104:	180b883a 	mov	r5,r3
    5108:	41000015 	stw	r4,0(r8)
    510c:	41400115 	stw	r5,4(r8)
	state_out[7] = state_in[7] + h;
    5110:	e0bfaa17 	ldw	r2,-344(fp)
    5114:	12000e04 	addi	r8,r2,56
    5118:	e0bfa817 	ldw	r2,-352(fp)
    511c:	10800e04 	addi	r2,r2,56
    5120:	11000017 	ldw	r4,0(r2)
    5124:	11400117 	ldw	r5,4(r2)
    5128:	e1bf7d17 	ldw	r6,-524(fp)
    512c:	e1ff7e17 	ldw	r7,-520(fp)
    5130:	2185883a 	add	r2,r4,r6
    5134:	1113803a 	cmpltu	r9,r2,r4
    5138:	29c7883a 	add	r3,r5,r7
    513c:	48c9883a 	add	r4,r9,r3
    5140:	2007883a 	mov	r3,r4
    5144:	1009883a 	mov	r4,r2
    5148:	180b883a 	mov	r5,r3
    514c:	41000015 	stw	r4,0(r8)
    5150:	41400115 	stw	r5,4(r8)

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
    5154:	e03f8215 	stw	zero,-504(fp)
    5158:	e03f8315 	stw	zero,-500(fp)
    515c:	e0bf8217 	ldw	r2,-504(fp)
    5160:	e0bf8015 	stw	r2,-512(fp)
    5164:	e0bf8317 	ldw	r2,-500(fp)
    5168:	e0bf8115 	stw	r2,-508(fp)
    516c:	e0bf8017 	ldw	r2,-512(fp)
    5170:	e0bf7d15 	stw	r2,-524(fp)
    5174:	e0bf8117 	ldw	r2,-508(fp)
    5178:	e0bf7e15 	stw	r2,-520(fp)
    517c:	e0bf7d17 	ldw	r2,-524(fp)
    5180:	e0bf7b15 	stw	r2,-532(fp)
    5184:	e0bf7e17 	ldw	r2,-520(fp)
    5188:	e0bf7c15 	stw	r2,-528(fp)
    518c:	e0bf7b17 	ldw	r2,-532(fp)
    5190:	e0bf7915 	stw	r2,-540(fp)
    5194:	e0bf7c17 	ldw	r2,-528(fp)
    5198:	e0bf7a15 	stw	r2,-536(fp)
    519c:	e0bf7917 	ldw	r2,-540(fp)
    51a0:	e0bf7715 	stw	r2,-548(fp)
    51a4:	e0bf7a17 	ldw	r2,-536(fp)
    51a8:	e0bf7815 	stw	r2,-544(fp)
    51ac:	e0bf7717 	ldw	r2,-548(fp)
    51b0:	e0bf7515 	stw	r2,-556(fp)
    51b4:	e0bf7817 	ldw	r2,-544(fp)
    51b8:	e0bf7615 	stw	r2,-552(fp)
    51bc:	e0bf7517 	ldw	r2,-556(fp)
    51c0:	e0bf7315 	stw	r2,-564(fp)
    51c4:	e0bf7617 	ldw	r2,-552(fp)
    51c8:	e0bf7415 	stw	r2,-560(fp)
    51cc:	e0bf7317 	ldw	r2,-564(fp)
    51d0:	e0bf7115 	stw	r2,-572(fp)
    51d4:	e0bf7417 	ldw	r2,-560(fp)
    51d8:	e0bf7215 	stw	r2,-568(fp)
    51dc:	e0bf7117 	ldw	r2,-572(fp)
    51e0:	e0bf6f15 	stw	r2,-580(fp)
    51e4:	e0bf7217 	ldw	r2,-568(fp)
    51e8:	e0bf7015 	stw	r2,-576(fp)
}
    51ec:	0001883a 	nop
    51f0:	e6fff904 	addi	sp,fp,-28
    51f4:	df000717 	ldw	fp,28(sp)
    51f8:	dd800617 	ldw	r22,24(sp)
    51fc:	dd400517 	ldw	r21,20(sp)
    5200:	dd000417 	ldw	r20,16(sp)
    5204:	dcc00317 	ldw	r19,12(sp)
    5208:	dc800217 	ldw	r18,8(sp)
    520c:	dc400117 	ldw	r17,4(sp)
    5210:	dc000017 	ldw	r16,0(sp)
    5214:	dec00804 	addi	sp,sp,32
    5218:	f800283a 	ret

0000521c <sha512_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
    521c:	deffbf04 	addi	sp,sp,-260
    5220:	dfc04015 	stw	ra,256(sp)
    5224:	df003f15 	stw	fp,252(sp)
    5228:	ddc03e15 	stw	r23,248(sp)
    522c:	dd803d15 	stw	r22,244(sp)
    5230:	dd403c15 	stw	r21,240(sp)
    5234:	dd003b15 	stw	r20,236(sp)
    5238:	dcc03a15 	stw	r19,232(sp)
    523c:	dc803915 	stw	r18,228(sp)
    5240:	dc403815 	stw	r17,224(sp)
    5244:	dc003715 	stw	r16,220(sp)
    5248:	df003f04 	addi	fp,sp,252
    524c:	e13fc915 	stw	r4,-220(fp)
    5250:	e17fca15 	stw	r5,-216(fp)
    5254:	e1bfcb15 	stw	r6,-212(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    5258:	e0bfcb17 	ldw	r2,-212(fp)
    525c:	1001fd26 	beq	r2,zero,5a54 <sha512_Update+0x838>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    5260:	e13fc917 	ldw	r4,-220(fp)
    5264:	20801017 	ldw	r2,64(r4)
    5268:	20c01117 	ldw	r3,68(r4)
    526c:	1808977a 	slli	r4,r3,29
    5270:	100ed0fa 	srli	r7,r2,3
    5274:	21ceb03a 	or	r7,r4,r7
    5278:	1810d0fa 	srli	r8,r3,3
    527c:	3805883a 	mov	r2,r7
    5280:	10801fcc 	andi	r2,r2,127
    5284:	e0bfc315 	stw	r2,-244(fp)
	if (usedspace > 0) {
    5288:	e0bfc317 	ldw	r2,-244(fp)
    528c:	1001b326 	beq	r2,zero,595c <sha512_Update+0x740>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA512_BLOCK_LENGTH - usedspace;
    5290:	00c02004 	movi	r3,128
    5294:	e0bfc317 	ldw	r2,-244(fp)
    5298:	1885c83a 	sub	r2,r3,r2
    529c:	e0bfc415 	stw	r2,-240(fp)

		if (len >= freespace) {
    52a0:	e0ffcb17 	ldw	r3,-212(fp)
    52a4:	e0bfc417 	ldw	r2,-240(fp)
    52a8:	1880c036 	bltu	r3,r2,55ac <sha512_Update+0x390>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    52ac:	e0bfc917 	ldw	r2,-220(fp)
    52b0:	10c01404 	addi	r3,r2,80
    52b4:	e0bfc317 	ldw	r2,-244(fp)
    52b8:	1885883a 	add	r2,r3,r2
    52bc:	e1bfc417 	ldw	r6,-240(fp)
    52c0:	e17fca17 	ldw	r5,-216(fp)
    52c4:	1009883a 	mov	r4,r2
    52c8:	00463980 	call	46398 <memcpy>
			ADDINC128(context->bitcount, freespace << 3);
    52cc:	e0bfc917 	ldw	r2,-220(fp)
    52d0:	11401017 	ldw	r5,64(r2)
    52d4:	11801117 	ldw	r6,68(r2)
    52d8:	e0bfc417 	ldw	r2,-240(fp)
    52dc:	100490fa 	slli	r2,r2,3
    52e0:	102d883a 	mov	r22,r2
    52e4:	002f883a 	mov	r23,zero
    52e8:	2d85883a 	add	r2,r5,r22
    52ec:	1149803a 	cmpltu	r4,r2,r5
    52f0:	35c7883a 	add	r3,r6,r23
    52f4:	20c9883a 	add	r4,r4,r3
    52f8:	2007883a 	mov	r3,r4
    52fc:	1009883a 	mov	r4,r2
    5300:	180b883a 	mov	r5,r3
    5304:	e0bfc917 	ldw	r2,-220(fp)
    5308:	11001015 	stw	r4,64(r2)
    530c:	11401115 	stw	r5,68(r2)
    5310:	e0bfc917 	ldw	r2,-220(fp)
    5314:	10c01017 	ldw	r3,64(r2)
    5318:	11001117 	ldw	r4,68(r2)
    531c:	e0bfc417 	ldw	r2,-240(fp)
    5320:	100490fa 	slli	r2,r2,3
    5324:	1029883a 	mov	r20,r2
    5328:	002b883a 	mov	r21,zero
    532c:	25400236 	bltu	r4,r21,5338 <sha512_Update+0x11c>
    5330:	a900101e 	bne	r21,r4,5374 <sha512_Update+0x158>
    5334:	1d000f2e 	bgeu	r3,r20,5374 <sha512_Update+0x158>
    5338:	e0bfc917 	ldw	r2,-220(fp)
    533c:	11c01217 	ldw	r7,72(r2)
    5340:	12001317 	ldw	r8,76(r2)
    5344:	01000044 	movi	r4,1
    5348:	000b883a 	mov	r5,zero
    534c:	3905883a 	add	r2,r7,r4
    5350:	11cd803a 	cmpltu	r6,r2,r7
    5354:	4147883a 	add	r3,r8,r5
    5358:	30c9883a 	add	r4,r6,r3
    535c:	2007883a 	mov	r3,r4
    5360:	1009883a 	mov	r4,r2
    5364:	180b883a 	mov	r5,r3
    5368:	e0bfc917 	ldw	r2,-220(fp)
    536c:	11001215 	stw	r4,72(r2)
    5370:	11401315 	stw	r5,76(r2)
			len -= freespace;
    5374:	e0ffcb17 	ldw	r3,-212(fp)
    5378:	e0bfc417 	ldw	r2,-240(fp)
    537c:	1885c83a 	sub	r2,r3,r2
    5380:	e0bfcb15 	stw	r2,-212(fp)
			data += freespace;
    5384:	e0ffca17 	ldw	r3,-216(fp)
    5388:	e0bfc417 	ldw	r2,-240(fp)
    538c:	1885883a 	add	r2,r3,r2
    5390:	e0bfca15 	stw	r2,-216(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    5394:	e03fc115 	stw	zero,-252(fp)
    5398:	00007906 	br	5580 <sha512_Update+0x364>
				REVERSE64(context->buffer[j],context->buffer[j]);
    539c:	e0ffc917 	ldw	r3,-220(fp)
    53a0:	e0bfc117 	ldw	r2,-252(fp)
    53a4:	10800284 	addi	r2,r2,10
    53a8:	100490fa 	slli	r2,r2,3
    53ac:	1887883a 	add	r3,r3,r2
    53b0:	18800017 	ldw	r2,0(r3)
    53b4:	e0bfc515 	stw	r2,-236(fp)
    53b8:	18800117 	ldw	r2,4(r3)
    53bc:	e0bfc615 	stw	r2,-232(fp)
    53c0:	e0bfc617 	ldw	r2,-232(fp)
    53c4:	e0bff415 	stw	r2,-48(fp)
    53c8:	e0ffc517 	ldw	r3,-236(fp)
    53cc:	e0fff515 	stw	r3,-44(fp)
    53d0:	e13ff417 	ldw	r4,-48(fp)
    53d4:	e13fc515 	stw	r4,-236(fp)
    53d8:	e1bff517 	ldw	r6,-44(fp)
    53dc:	e1bfc615 	stw	r6,-232(fp)
    53e0:	e0ffc517 	ldw	r3,-236(fp)
    53e4:	00bfc074 	movhi	r2,65281
    53e8:	10bfc004 	addi	r2,r2,-256
    53ec:	1884703a 	and	r2,r3,r2
    53f0:	e0bfcc15 	stw	r2,-208(fp)
    53f4:	e0ffc617 	ldw	r3,-232(fp)
    53f8:	00bfc074 	movhi	r2,65281
    53fc:	10bfc004 	addi	r2,r2,-256
    5400:	1884703a 	and	r2,r3,r2
    5404:	e0bfcd15 	stw	r2,-204(fp)
    5408:	e1ffcd17 	ldw	r7,-204(fp)
    540c:	3804963a 	slli	r2,r7,24
    5410:	e0ffcc17 	ldw	r3,-208(fp)
    5414:	1806d23a 	srli	r3,r3,8
    5418:	e0ffce15 	stw	r3,-200(fp)
    541c:	e13fce17 	ldw	r4,-200(fp)
    5420:	1104b03a 	or	r2,r2,r4
    5424:	e0bfce15 	stw	r2,-200(fp)
    5428:	e1bfcd17 	ldw	r6,-204(fp)
    542c:	300cd23a 	srli	r6,r6,8
    5430:	e1bfcf15 	stw	r6,-196(fp)
    5434:	e0ffc517 	ldw	r3,-236(fp)
    5438:	00803ff4 	movhi	r2,255
    543c:	10803fc4 	addi	r2,r2,255
    5440:	1884703a 	and	r2,r3,r2
    5444:	e0bfd015 	stw	r2,-192(fp)
    5448:	e0ffc617 	ldw	r3,-232(fp)
    544c:	00803ff4 	movhi	r2,255
    5450:	10803fc4 	addi	r2,r2,255
    5454:	1884703a 	and	r2,r3,r2
    5458:	e0bfd115 	stw	r2,-188(fp)
    545c:	e1ffd017 	ldw	r7,-192(fp)
    5460:	3804d63a 	srli	r2,r7,24
    5464:	e0ffd117 	ldw	r3,-188(fp)
    5468:	1806923a 	slli	r3,r3,8
    546c:	e0ffd315 	stw	r3,-180(fp)
    5470:	e13fd317 	ldw	r4,-180(fp)
    5474:	1104b03a 	or	r2,r2,r4
    5478:	e0bfd315 	stw	r2,-180(fp)
    547c:	e1bfd017 	ldw	r6,-192(fp)
    5480:	300c923a 	slli	r6,r6,8
    5484:	e1bfd215 	stw	r6,-184(fp)
    5488:	e1ffce17 	ldw	r7,-200(fp)
    548c:	e0ffd217 	ldw	r3,-184(fp)
    5490:	38c4b03a 	or	r2,r7,r3
    5494:	e0bfc515 	stw	r2,-236(fp)
    5498:	e13fcf17 	ldw	r4,-196(fp)
    549c:	e1bfd317 	ldw	r6,-180(fp)
    54a0:	2184b03a 	or	r2,r4,r6
    54a4:	e0bfc615 	stw	r2,-232(fp)
    54a8:	e0bfc517 	ldw	r2,-236(fp)
    54ac:	10bfffec 	andhi	r2,r2,65535
    54b0:	e0bfd415 	stw	r2,-176(fp)
    54b4:	e0bfc617 	ldw	r2,-232(fp)
    54b8:	10bfffec 	andhi	r2,r2,65535
    54bc:	e0bfd515 	stw	r2,-172(fp)
    54c0:	e1ffd517 	ldw	r7,-172(fp)
    54c4:	3804943a 	slli	r2,r7,16
    54c8:	e0ffd417 	ldw	r3,-176(fp)
    54cc:	1806d43a 	srli	r3,r3,16
    54d0:	e0ffd615 	stw	r3,-168(fp)
    54d4:	e13fd617 	ldw	r4,-168(fp)
    54d8:	1104b03a 	or	r2,r2,r4
    54dc:	e0bfd615 	stw	r2,-168(fp)
    54e0:	e1bfd517 	ldw	r6,-172(fp)
    54e4:	300cd43a 	srli	r6,r6,16
    54e8:	e1bfd715 	stw	r6,-164(fp)
    54ec:	e0bfc517 	ldw	r2,-236(fp)
    54f0:	10bfffcc 	andi	r2,r2,65535
    54f4:	e0bfd815 	stw	r2,-160(fp)
    54f8:	e0bfc617 	ldw	r2,-232(fp)
    54fc:	10bfffcc 	andi	r2,r2,65535
    5500:	e0bfd915 	stw	r2,-156(fp)
    5504:	e1ffd817 	ldw	r7,-160(fp)
    5508:	3804d43a 	srli	r2,r7,16
    550c:	e0ffd917 	ldw	r3,-156(fp)
    5510:	1806943a 	slli	r3,r3,16
    5514:	e0ffdb15 	stw	r3,-148(fp)
    5518:	e13fdb17 	ldw	r4,-148(fp)
    551c:	1104b03a 	or	r2,r2,r4
    5520:	e0bfdb15 	stw	r2,-148(fp)
    5524:	e1bfd817 	ldw	r6,-160(fp)
    5528:	300c943a 	slli	r6,r6,16
    552c:	e1bfda15 	stw	r6,-152(fp)
    5530:	e1ffd617 	ldw	r7,-168(fp)
    5534:	e0bfda17 	ldw	r2,-152(fp)
    5538:	388eb03a 	or	r7,r7,r2
    553c:	e1ffdc15 	stw	r7,-144(fp)
    5540:	e0ffd717 	ldw	r3,-164(fp)
    5544:	e13fdb17 	ldw	r4,-148(fp)
    5548:	1906b03a 	or	r3,r3,r4
    554c:	e0ffdd15 	stw	r3,-140(fp)
    5550:	e0ffc917 	ldw	r3,-220(fp)
    5554:	e0bfc117 	ldw	r2,-252(fp)
    5558:	10800284 	addi	r2,r2,10
    555c:	100490fa 	slli	r2,r2,3
    5560:	1885883a 	add	r2,r3,r2
    5564:	e1bfdc17 	ldw	r6,-144(fp)
    5568:	11800015 	stw	r6,0(r2)
    556c:	e1ffdd17 	ldw	r7,-140(fp)
    5570:	11c00115 	stw	r7,4(r2)
			ADDINC128(context->bitcount, freespace << 3);
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    5574:	e0bfc117 	ldw	r2,-252(fp)
    5578:	10800044 	addi	r2,r2,1
    557c:	e0bfc115 	stw	r2,-252(fp)
    5580:	e0bfc117 	ldw	r2,-252(fp)
    5584:	10800410 	cmplti	r2,r2,16
    5588:	103f841e 	bne	r2,zero,539c <__alt_mem_epcs_flash_controller+0xfdffc39c>
				REVERSE64(context->buffer[j],context->buffer[j]);
			}
#endif
			sha512_Transform(context->state, context->buffer, context->state);
    558c:	e13fc917 	ldw	r4,-220(fp)
    5590:	e0bfc917 	ldw	r2,-220(fp)
    5594:	10c01404 	addi	r3,r2,80
    5598:	e0bfc917 	ldw	r2,-220(fp)
    559c:	100d883a 	mov	r6,r2
    55a0:	180b883a 	mov	r5,r3
    55a4:	00042fc0 	call	42fc <sha512_Transform>
    55a8:	0000ec06 	br	595c <sha512_Update+0x740>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    55ac:	e0bfc917 	ldw	r2,-220(fp)
    55b0:	10c01404 	addi	r3,r2,80
    55b4:	e0bfc317 	ldw	r2,-244(fp)
    55b8:	1885883a 	add	r2,r3,r2
    55bc:	e1bfcb17 	ldw	r6,-212(fp)
    55c0:	e17fca17 	ldw	r5,-216(fp)
    55c4:	1009883a 	mov	r4,r2
    55c8:	00463980 	call	46398 <memcpy>
			ADDINC128(context->bitcount, len << 3);
    55cc:	e0bfc917 	ldw	r2,-220(fp)
    55d0:	11001017 	ldw	r4,64(r2)
    55d4:	11401117 	ldw	r5,68(r2)
    55d8:	e0bfcb17 	ldw	r2,-212(fp)
    55dc:	100490fa 	slli	r2,r2,3
    55e0:	1025883a 	mov	r18,r2
    55e4:	0027883a 	mov	r19,zero
    55e8:	2485883a 	add	r2,r4,r18
    55ec:	110d803a 	cmpltu	r6,r2,r4
    55f0:	2cc7883a 	add	r3,r5,r19
    55f4:	30c9883a 	add	r4,r6,r3
    55f8:	2007883a 	mov	r3,r4
    55fc:	1009883a 	mov	r4,r2
    5600:	180b883a 	mov	r5,r3
    5604:	e0bfc917 	ldw	r2,-220(fp)
    5608:	11001015 	stw	r4,64(r2)
    560c:	11401115 	stw	r5,68(r2)
    5610:	e13fc917 	ldw	r4,-220(fp)
    5614:	20801017 	ldw	r2,64(r4)
    5618:	20c01117 	ldw	r3,68(r4)
    561c:	e13fcb17 	ldw	r4,-212(fp)
    5620:	200890fa 	slli	r4,r4,3
    5624:	2021883a 	mov	r16,r4
    5628:	0023883a 	mov	r17,zero
    562c:	1c400236 	bltu	r3,r17,5638 <sha512_Update+0x41c>
    5630:	88c0101e 	bne	r17,r3,5674 <sha512_Update+0x458>
    5634:	14000f2e 	bgeu	r2,r16,5674 <sha512_Update+0x458>
    5638:	e0bfc917 	ldw	r2,-220(fp)
    563c:	11001217 	ldw	r4,72(r2)
    5640:	11401317 	ldw	r5,76(r2)
    5644:	01800044 	movi	r6,1
    5648:	000f883a 	mov	r7,zero
    564c:	2185883a 	add	r2,r4,r6
    5650:	1111803a 	cmpltu	r8,r2,r4
    5654:	29c7883a 	add	r3,r5,r7
    5658:	40c9883a 	add	r4,r8,r3
    565c:	2007883a 	mov	r3,r4
    5660:	1009883a 	mov	r4,r2
    5664:	180b883a 	mov	r5,r3
    5668:	e0bfc917 	ldw	r2,-220(fp)
    566c:	11001215 	stw	r4,72(r2)
    5670:	11401315 	stw	r5,76(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    5674:	e03fc415 	stw	zero,-240(fp)
    5678:	e0bfc417 	ldw	r2,-240(fp)
    567c:	e0bfc315 	stw	r2,-244(fp)
			return;
    5680:	0000f506 	br	5a58 <sha512_Update+0x83c>
		}
	}
	while (len >= SHA512_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA512_BLOCK_LENGTH);
    5684:	e0bfc917 	ldw	r2,-220(fp)
    5688:	10801404 	addi	r2,r2,80
    568c:	01802004 	movi	r6,128
    5690:	e17fca17 	ldw	r5,-216(fp)
    5694:	1009883a 	mov	r4,r2
    5698:	00463980 	call	46398 <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    569c:	e03fc215 	stw	zero,-248(fp)
    56a0:	00007906 	br	5888 <sha512_Update+0x66c>
			REVERSE64(context->buffer[j],context->buffer[j]);
    56a4:	e0ffc917 	ldw	r3,-220(fp)
    56a8:	e0bfc217 	ldw	r2,-248(fp)
    56ac:	10800284 	addi	r2,r2,10
    56b0:	100490fa 	slli	r2,r2,3
    56b4:	1887883a 	add	r3,r3,r2
    56b8:	18800017 	ldw	r2,0(r3)
    56bc:	e0bfc715 	stw	r2,-228(fp)
    56c0:	18800117 	ldw	r2,4(r3)
    56c4:	e0bfc815 	stw	r2,-224(fp)
    56c8:	e0bfc817 	ldw	r2,-224(fp)
    56cc:	e0bff615 	stw	r2,-40(fp)
    56d0:	e0ffc717 	ldw	r3,-228(fp)
    56d4:	e0fff715 	stw	r3,-36(fp)
    56d8:	e13ff617 	ldw	r4,-40(fp)
    56dc:	e13fc715 	stw	r4,-228(fp)
    56e0:	e1bff717 	ldw	r6,-36(fp)
    56e4:	e1bfc815 	stw	r6,-224(fp)
    56e8:	e0ffc717 	ldw	r3,-228(fp)
    56ec:	00bfc074 	movhi	r2,65281
    56f0:	10bfc004 	addi	r2,r2,-256
    56f4:	1884703a 	and	r2,r3,r2
    56f8:	e0bfde15 	stw	r2,-136(fp)
    56fc:	e0ffc817 	ldw	r3,-224(fp)
    5700:	00bfc074 	movhi	r2,65281
    5704:	10bfc004 	addi	r2,r2,-256
    5708:	1884703a 	and	r2,r3,r2
    570c:	e0bfdf15 	stw	r2,-132(fp)
    5710:	e1ffdf17 	ldw	r7,-132(fp)
    5714:	3804963a 	slli	r2,r7,24
    5718:	e0ffde17 	ldw	r3,-136(fp)
    571c:	1806d23a 	srli	r3,r3,8
    5720:	e0ffe015 	stw	r3,-128(fp)
    5724:	e13fe017 	ldw	r4,-128(fp)
    5728:	1104b03a 	or	r2,r2,r4
    572c:	e0bfe015 	stw	r2,-128(fp)
    5730:	e1bfdf17 	ldw	r6,-132(fp)
    5734:	300cd23a 	srli	r6,r6,8
    5738:	e1bfe115 	stw	r6,-124(fp)
    573c:	e0ffc717 	ldw	r3,-228(fp)
    5740:	00803ff4 	movhi	r2,255
    5744:	10803fc4 	addi	r2,r2,255
    5748:	1884703a 	and	r2,r3,r2
    574c:	e0bfe215 	stw	r2,-120(fp)
    5750:	e0ffc817 	ldw	r3,-224(fp)
    5754:	00803ff4 	movhi	r2,255
    5758:	10803fc4 	addi	r2,r2,255
    575c:	1884703a 	and	r2,r3,r2
    5760:	e0bfe315 	stw	r2,-116(fp)
    5764:	e1ffe217 	ldw	r7,-120(fp)
    5768:	3804d63a 	srli	r2,r7,24
    576c:	e0ffe317 	ldw	r3,-116(fp)
    5770:	1806923a 	slli	r3,r3,8
    5774:	e0ffe515 	stw	r3,-108(fp)
    5778:	e13fe517 	ldw	r4,-108(fp)
    577c:	1104b03a 	or	r2,r2,r4
    5780:	e0bfe515 	stw	r2,-108(fp)
    5784:	e1bfe217 	ldw	r6,-120(fp)
    5788:	300c923a 	slli	r6,r6,8
    578c:	e1bfe415 	stw	r6,-112(fp)
    5790:	e1ffe017 	ldw	r7,-128(fp)
    5794:	e0ffe417 	ldw	r3,-112(fp)
    5798:	38c4b03a 	or	r2,r7,r3
    579c:	e0bfc715 	stw	r2,-228(fp)
    57a0:	e13fe117 	ldw	r4,-124(fp)
    57a4:	e1bfe517 	ldw	r6,-108(fp)
    57a8:	2184b03a 	or	r2,r4,r6
    57ac:	e0bfc815 	stw	r2,-224(fp)
    57b0:	e0bfc717 	ldw	r2,-228(fp)
    57b4:	10bfffec 	andhi	r2,r2,65535
    57b8:	e0bfe615 	stw	r2,-104(fp)
    57bc:	e0bfc817 	ldw	r2,-224(fp)
    57c0:	10bfffec 	andhi	r2,r2,65535
    57c4:	e0bfe715 	stw	r2,-100(fp)
    57c8:	e1ffe717 	ldw	r7,-100(fp)
    57cc:	3804943a 	slli	r2,r7,16
    57d0:	e0ffe617 	ldw	r3,-104(fp)
    57d4:	1806d43a 	srli	r3,r3,16
    57d8:	e0ffe815 	stw	r3,-96(fp)
    57dc:	e13fe817 	ldw	r4,-96(fp)
    57e0:	1104b03a 	or	r2,r2,r4
    57e4:	e0bfe815 	stw	r2,-96(fp)
    57e8:	e1bfe717 	ldw	r6,-100(fp)
    57ec:	300cd43a 	srli	r6,r6,16
    57f0:	e1bfe915 	stw	r6,-92(fp)
    57f4:	e0bfc717 	ldw	r2,-228(fp)
    57f8:	10bfffcc 	andi	r2,r2,65535
    57fc:	e0bfea15 	stw	r2,-88(fp)
    5800:	e0bfc817 	ldw	r2,-224(fp)
    5804:	10bfffcc 	andi	r2,r2,65535
    5808:	e0bfeb15 	stw	r2,-84(fp)
    580c:	e1ffea17 	ldw	r7,-88(fp)
    5810:	3804d43a 	srli	r2,r7,16
    5814:	e0ffeb17 	ldw	r3,-84(fp)
    5818:	1806943a 	slli	r3,r3,16
    581c:	e0ffed15 	stw	r3,-76(fp)
    5820:	e13fed17 	ldw	r4,-76(fp)
    5824:	1104b03a 	or	r2,r2,r4
    5828:	e0bfed15 	stw	r2,-76(fp)
    582c:	e1bfea17 	ldw	r6,-88(fp)
    5830:	300c943a 	slli	r6,r6,16
    5834:	e1bfec15 	stw	r6,-80(fp)
    5838:	e1ffe817 	ldw	r7,-96(fp)
    583c:	e0bfec17 	ldw	r2,-80(fp)
    5840:	388eb03a 	or	r7,r7,r2
    5844:	e1ffee15 	stw	r7,-72(fp)
    5848:	e0ffe917 	ldw	r3,-92(fp)
    584c:	e13fed17 	ldw	r4,-76(fp)
    5850:	1906b03a 	or	r3,r3,r4
    5854:	e0ffef15 	stw	r3,-68(fp)
    5858:	e0ffc917 	ldw	r3,-220(fp)
    585c:	e0bfc217 	ldw	r2,-248(fp)
    5860:	10800284 	addi	r2,r2,10
    5864:	100490fa 	slli	r2,r2,3
    5868:	1885883a 	add	r2,r3,r2
    586c:	e1bfee17 	ldw	r6,-72(fp)
    5870:	11800015 	stw	r6,0(r2)
    5874:	e1ffef17 	ldw	r7,-68(fp)
    5878:	11c00115 	stw	r7,4(r2)
	while (len >= SHA512_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA512_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    587c:	e0bfc217 	ldw	r2,-248(fp)
    5880:	10800044 	addi	r2,r2,1
    5884:	e0bfc215 	stw	r2,-248(fp)
    5888:	e0bfc217 	ldw	r2,-248(fp)
    588c:	10800410 	cmplti	r2,r2,16
    5890:	103f841e 	bne	r2,zero,56a4 <__alt_mem_epcs_flash_controller+0xfdffc6a4>
			REVERSE64(context->buffer[j],context->buffer[j]);
		}
#endif
		sha512_Transform(context->state, context->buffer, context->state);
    5894:	e13fc917 	ldw	r4,-220(fp)
    5898:	e0bfc917 	ldw	r2,-220(fp)
    589c:	10c01404 	addi	r3,r2,80
    58a0:	e0bfc917 	ldw	r2,-220(fp)
    58a4:	100d883a 	mov	r6,r2
    58a8:	180b883a 	mov	r5,r3
    58ac:	00042fc0 	call	42fc <sha512_Transform>
		ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
    58b0:	e0bfc917 	ldw	r2,-220(fp)
    58b4:	11c01017 	ldw	r7,64(r2)
    58b8:	12001117 	ldw	r8,68(r2)
    58bc:	01010004 	movi	r4,1024
    58c0:	000b883a 	mov	r5,zero
    58c4:	3905883a 	add	r2,r7,r4
    58c8:	11cd803a 	cmpltu	r6,r2,r7
    58cc:	4147883a 	add	r3,r8,r5
    58d0:	30c9883a 	add	r4,r6,r3
    58d4:	2007883a 	mov	r3,r4
    58d8:	1009883a 	mov	r4,r2
    58dc:	180b883a 	mov	r5,r3
    58e0:	e0bfc917 	ldw	r2,-220(fp)
    58e4:	11001015 	stw	r4,64(r2)
    58e8:	11401115 	stw	r5,68(r2)
    58ec:	e13fc917 	ldw	r4,-220(fp)
    58f0:	20801017 	ldw	r2,64(r4)
    58f4:	20c01117 	ldw	r3,68(r4)
    58f8:	1800121e 	bne	r3,zero,5944 <sha512_Update+0x728>
    58fc:	1800021e 	bne	r3,zero,5908 <sha512_Update+0x6ec>
    5900:	10810028 	cmpgeui	r2,r2,1024
    5904:	10000f1e 	bne	r2,zero,5944 <sha512_Update+0x728>
    5908:	e0bfc917 	ldw	r2,-220(fp)
    590c:	11c01217 	ldw	r7,72(r2)
    5910:	12001317 	ldw	r8,76(r2)
    5914:	01000044 	movi	r4,1
    5918:	000b883a 	mov	r5,zero
    591c:	3905883a 	add	r2,r7,r4
    5920:	11cd803a 	cmpltu	r6,r2,r7
    5924:	4147883a 	add	r3,r8,r5
    5928:	30c9883a 	add	r4,r6,r3
    592c:	2007883a 	mov	r3,r4
    5930:	1009883a 	mov	r4,r2
    5934:	180b883a 	mov	r5,r3
    5938:	e0bfc917 	ldw	r2,-220(fp)
    593c:	11001215 	stw	r4,72(r2)
    5940:	11401315 	stw	r5,76(r2)
		len -= SHA512_BLOCK_LENGTH;
    5944:	e0bfcb17 	ldw	r2,-212(fp)
    5948:	10bfe004 	addi	r2,r2,-128
    594c:	e0bfcb15 	stw	r2,-212(fp)
		data += SHA512_BLOCK_LENGTH;
    5950:	e0bfca17 	ldw	r2,-216(fp)
    5954:	10802004 	addi	r2,r2,128
    5958:	e0bfca15 	stw	r2,-216(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA512_BLOCK_LENGTH) {
    595c:	e0bfcb17 	ldw	r2,-212(fp)
    5960:	10802028 	cmpgeui	r2,r2,128
    5964:	103f471e 	bne	r2,zero,5684 <__alt_mem_epcs_flash_controller+0xfdffc684>
		sha512_Transform(context->state, context->buffer, context->state);
		ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
		len -= SHA512_BLOCK_LENGTH;
		data += SHA512_BLOCK_LENGTH;
	}
	if (len > 0) {
    5968:	e0bfcb17 	ldw	r2,-212(fp)
    596c:	10003526 	beq	r2,zero,5a44 <sha512_Update+0x828>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    5970:	e0bfc917 	ldw	r2,-220(fp)
    5974:	10801404 	addi	r2,r2,80
    5978:	e1bfcb17 	ldw	r6,-212(fp)
    597c:	e17fca17 	ldw	r5,-216(fp)
    5980:	1009883a 	mov	r4,r2
    5984:	00463980 	call	46398 <memcpy>
		ADDINC128(context->bitcount, len << 3);
    5988:	e0bfc917 	ldw	r2,-220(fp)
    598c:	11001017 	ldw	r4,64(r2)
    5990:	11401117 	ldw	r5,68(r2)
    5994:	e0bfcb17 	ldw	r2,-212(fp)
    5998:	100490fa 	slli	r2,r2,3
    599c:	e0bff015 	stw	r2,-64(fp)
    59a0:	e03ff115 	stw	zero,-60(fp)
    59a4:	e1bff017 	ldw	r6,-64(fp)
    59a8:	2185883a 	add	r2,r4,r6
    59ac:	110d803a 	cmpltu	r6,r2,r4
    59b0:	e1fff117 	ldw	r7,-60(fp)
    59b4:	29c7883a 	add	r3,r5,r7
    59b8:	30c9883a 	add	r4,r6,r3
    59bc:	2007883a 	mov	r3,r4
    59c0:	1009883a 	mov	r4,r2
    59c4:	180b883a 	mov	r5,r3
    59c8:	e0bfc917 	ldw	r2,-220(fp)
    59cc:	11001015 	stw	r4,64(r2)
    59d0:	11401115 	stw	r5,68(r2)
    59d4:	e13fc917 	ldw	r4,-220(fp)
    59d8:	20801017 	ldw	r2,64(r4)
    59dc:	20c01117 	ldw	r3,68(r4)
    59e0:	e13fcb17 	ldw	r4,-212(fp)
    59e4:	200890fa 	slli	r4,r4,3
    59e8:	e13ff215 	stw	r4,-56(fp)
    59ec:	e03ff315 	stw	zero,-52(fp)
    59f0:	e13ff317 	ldw	r4,-52(fp)
    59f4:	19000436 	bltu	r3,r4,5a08 <sha512_Update+0x7ec>
    59f8:	e1bff317 	ldw	r6,-52(fp)
    59fc:	30c0111e 	bne	r6,r3,5a44 <sha512_Update+0x828>
    5a00:	e1fff217 	ldw	r7,-56(fp)
    5a04:	11c00f2e 	bgeu	r2,r7,5a44 <sha512_Update+0x828>
    5a08:	e0bfc917 	ldw	r2,-220(fp)
    5a0c:	11001217 	ldw	r4,72(r2)
    5a10:	11401317 	ldw	r5,76(r2)
    5a14:	01800044 	movi	r6,1
    5a18:	000f883a 	mov	r7,zero
    5a1c:	2185883a 	add	r2,r4,r6
    5a20:	1111803a 	cmpltu	r8,r2,r4
    5a24:	29c7883a 	add	r3,r5,r7
    5a28:	40c9883a 	add	r4,r8,r3
    5a2c:	2007883a 	mov	r3,r4
    5a30:	1009883a 	mov	r4,r2
    5a34:	180b883a 	mov	r5,r3
    5a38:	e0bfc917 	ldw	r2,-220(fp)
    5a3c:	11001215 	stw	r4,72(r2)
    5a40:	11401315 	stw	r5,76(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    5a44:	e03fc415 	stw	zero,-240(fp)
    5a48:	e0bfc417 	ldw	r2,-240(fp)
    5a4c:	e0bfc315 	stw	r2,-244(fp)
    5a50:	00000106 	br	5a58 <sha512_Update+0x83c>
void sha512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    5a54:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		ADDINC128(context->bitcount, len << 3);
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    5a58:	e6fff804 	addi	sp,fp,-32
    5a5c:	dfc00917 	ldw	ra,36(sp)
    5a60:	df000817 	ldw	fp,32(sp)
    5a64:	ddc00717 	ldw	r23,28(sp)
    5a68:	dd800617 	ldw	r22,24(sp)
    5a6c:	dd400517 	ldw	r21,20(sp)
    5a70:	dd000417 	ldw	r20,16(sp)
    5a74:	dcc00317 	ldw	r19,12(sp)
    5a78:	dc800217 	ldw	r18,8(sp)
    5a7c:	dc400117 	ldw	r17,4(sp)
    5a80:	dc000017 	ldw	r16,0(sp)
    5a84:	dec00a04 	addi	sp,sp,40
    5a88:	f800283a 	ret

00005a8c <sha512_Last>:

static void sha512_Last(SHA512_CTX* context) {
    5a8c:	deffce04 	addi	sp,sp,-200
    5a90:	dfc03115 	stw	ra,196(sp)
    5a94:	df003015 	stw	fp,192(sp)
    5a98:	ddc02f15 	stw	r23,188(sp)
    5a9c:	dd802e15 	stw	r22,184(sp)
    5aa0:	dd402d15 	stw	r21,180(sp)
    5aa4:	dd002c15 	stw	r20,176(sp)
    5aa8:	dcc02b15 	stw	r19,172(sp)
    5aac:	dc802a15 	stw	r18,168(sp)
    5ab0:	dc402915 	stw	r17,164(sp)
    5ab4:	dc002815 	stw	r16,160(sp)
    5ab8:	df003004 	addi	fp,sp,192
    5abc:	e13fd715 	stw	r4,-164(fp)
	unsigned int	usedspace;

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    5ac0:	e13fd717 	ldw	r4,-164(fp)
    5ac4:	20801017 	ldw	r2,64(r4)
    5ac8:	20c01117 	ldw	r3,68(r4)
    5acc:	1808977a 	slli	r4,r3,29
    5ad0:	100ad0fa 	srli	r5,r2,3
    5ad4:	214ab03a 	or	r5,r4,r5
    5ad8:	180cd0fa 	srli	r6,r3,3
    5adc:	2805883a 	mov	r2,r5
    5ae0:	10801fcc 	andi	r2,r2,127
    5ae4:	e0bfd015 	stw	r2,-192(fp)
	/* Begin padding with a 1 bit: */
	((uint8_t*)context->buffer)[usedspace++] = 0x80;
    5ae8:	e0bfd717 	ldw	r2,-164(fp)
    5aec:	11001404 	addi	r4,r2,80
    5af0:	e0ffd017 	ldw	r3,-192(fp)
    5af4:	18800044 	addi	r2,r3,1
    5af8:	e0bfd015 	stw	r2,-192(fp)
    5afc:	20c7883a 	add	r3,r4,r3
    5b00:	00bfe004 	movi	r2,-128
    5b04:	18800005 	stb	r2,0(r3)
	
	if (usedspace > SHA512_SHORT_BLOCK_LENGTH) {
    5b08:	e0bfd017 	ldw	r2,-192(fp)
    5b0c:	10801c70 	cmpltui	r2,r2,113
    5b10:	1000901e 	bne	r2,zero,5d54 <sha512_Last+0x2c8>
		memzero(((uint8_t*)context->buffer) + usedspace, SHA512_BLOCK_LENGTH - usedspace);
    5b14:	e0bfd717 	ldw	r2,-164(fp)
    5b18:	10c01404 	addi	r3,r2,80
    5b1c:	e0bfd017 	ldw	r2,-192(fp)
    5b20:	1889883a 	add	r4,r3,r2
    5b24:	00c02004 	movi	r3,128
    5b28:	e0bfd017 	ldw	r2,-192(fp)
    5b2c:	1885c83a 	sub	r2,r3,r2
    5b30:	100b883a 	mov	r5,r2
    5b34:	00013700 	call	1370 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    5b38:	e03fd115 	stw	zero,-188(fp)
    5b3c:	00007906 	br	5d24 <sha512_Last+0x298>
			REVERSE64(context->buffer[j],context->buffer[j]);
    5b40:	e0ffd717 	ldw	r3,-164(fp)
    5b44:	e0bfd117 	ldw	r2,-188(fp)
    5b48:	10800284 	addi	r2,r2,10
    5b4c:	100490fa 	slli	r2,r2,3
    5b50:	1887883a 	add	r3,r3,r2
    5b54:	18800017 	ldw	r2,0(r3)
    5b58:	e0bfd315 	stw	r2,-180(fp)
    5b5c:	18800117 	ldw	r2,4(r3)
    5b60:	e0bfd415 	stw	r2,-176(fp)
    5b64:	e0bfd417 	ldw	r2,-176(fp)
    5b68:	e0bff415 	stw	r2,-48(fp)
    5b6c:	e0ffd317 	ldw	r3,-180(fp)
    5b70:	e0fff515 	stw	r3,-44(fp)
    5b74:	e13ff417 	ldw	r4,-48(fp)
    5b78:	e13fd315 	stw	r4,-180(fp)
    5b7c:	e0bff517 	ldw	r2,-44(fp)
    5b80:	e0bfd415 	stw	r2,-176(fp)
    5b84:	e0ffd317 	ldw	r3,-180(fp)
    5b88:	00bfc074 	movhi	r2,65281
    5b8c:	10bfc004 	addi	r2,r2,-256
    5b90:	1884703a 	and	r2,r3,r2
    5b94:	e0bfd815 	stw	r2,-160(fp)
    5b98:	e0ffd417 	ldw	r3,-176(fp)
    5b9c:	00bfc074 	movhi	r2,65281
    5ba0:	10bfc004 	addi	r2,r2,-256
    5ba4:	1884703a 	and	r2,r3,r2
    5ba8:	e0bfd915 	stw	r2,-156(fp)
    5bac:	e0ffd917 	ldw	r3,-156(fp)
    5bb0:	1804963a 	slli	r2,r3,24
    5bb4:	e13fd817 	ldw	r4,-160(fp)
    5bb8:	2008d23a 	srli	r4,r4,8
    5bbc:	e13fda15 	stw	r4,-152(fp)
    5bc0:	e0ffda17 	ldw	r3,-152(fp)
    5bc4:	10c4b03a 	or	r2,r2,r3
    5bc8:	e0bfda15 	stw	r2,-152(fp)
    5bcc:	e13fd917 	ldw	r4,-156(fp)
    5bd0:	2008d23a 	srli	r4,r4,8
    5bd4:	e13fdb15 	stw	r4,-148(fp)
    5bd8:	e0ffd317 	ldw	r3,-180(fp)
    5bdc:	00803ff4 	movhi	r2,255
    5be0:	10803fc4 	addi	r2,r2,255
    5be4:	1884703a 	and	r2,r3,r2
    5be8:	e0bfdc15 	stw	r2,-144(fp)
    5bec:	e0ffd417 	ldw	r3,-176(fp)
    5bf0:	00803ff4 	movhi	r2,255
    5bf4:	10803fc4 	addi	r2,r2,255
    5bf8:	1884703a 	and	r2,r3,r2
    5bfc:	e0bfdd15 	stw	r2,-140(fp)
    5c00:	e0ffdc17 	ldw	r3,-144(fp)
    5c04:	1804d63a 	srli	r2,r3,24
    5c08:	e13fdd17 	ldw	r4,-140(fp)
    5c0c:	2008923a 	slli	r4,r4,8
    5c10:	e13fdf15 	stw	r4,-132(fp)
    5c14:	e0ffdf17 	ldw	r3,-132(fp)
    5c18:	10c4b03a 	or	r2,r2,r3
    5c1c:	e0bfdf15 	stw	r2,-132(fp)
    5c20:	e13fdc17 	ldw	r4,-144(fp)
    5c24:	2008923a 	slli	r4,r4,8
    5c28:	e13fde15 	stw	r4,-136(fp)
    5c2c:	e0ffda17 	ldw	r3,-152(fp)
    5c30:	e13fde17 	ldw	r4,-136(fp)
    5c34:	1904b03a 	or	r2,r3,r4
    5c38:	e0bfd315 	stw	r2,-180(fp)
    5c3c:	e0ffdb17 	ldw	r3,-148(fp)
    5c40:	e13fdf17 	ldw	r4,-132(fp)
    5c44:	1904b03a 	or	r2,r3,r4
    5c48:	e0bfd415 	stw	r2,-176(fp)
    5c4c:	e0bfd317 	ldw	r2,-180(fp)
    5c50:	10bfffec 	andhi	r2,r2,65535
    5c54:	e0bfe015 	stw	r2,-128(fp)
    5c58:	e0bfd417 	ldw	r2,-176(fp)
    5c5c:	10bfffec 	andhi	r2,r2,65535
    5c60:	e0bfe115 	stw	r2,-124(fp)
    5c64:	e0ffe117 	ldw	r3,-124(fp)
    5c68:	1804943a 	slli	r2,r3,16
    5c6c:	e13fe017 	ldw	r4,-128(fp)
    5c70:	2008d43a 	srli	r4,r4,16
    5c74:	e13fe215 	stw	r4,-120(fp)
    5c78:	e0ffe217 	ldw	r3,-120(fp)
    5c7c:	10c4b03a 	or	r2,r2,r3
    5c80:	e0bfe215 	stw	r2,-120(fp)
    5c84:	e13fe117 	ldw	r4,-124(fp)
    5c88:	2008d43a 	srli	r4,r4,16
    5c8c:	e13fe315 	stw	r4,-116(fp)
    5c90:	e0bfd317 	ldw	r2,-180(fp)
    5c94:	10bfffcc 	andi	r2,r2,65535
    5c98:	e0bfe415 	stw	r2,-112(fp)
    5c9c:	e0bfd417 	ldw	r2,-176(fp)
    5ca0:	10bfffcc 	andi	r2,r2,65535
    5ca4:	e0bfe515 	stw	r2,-108(fp)
    5ca8:	e0ffe417 	ldw	r3,-112(fp)
    5cac:	1804d43a 	srli	r2,r3,16
    5cb0:	e13fe517 	ldw	r4,-108(fp)
    5cb4:	2008943a 	slli	r4,r4,16
    5cb8:	e13fe715 	stw	r4,-100(fp)
    5cbc:	e0ffe717 	ldw	r3,-100(fp)
    5cc0:	10c4b03a 	or	r2,r2,r3
    5cc4:	e0bfe715 	stw	r2,-100(fp)
    5cc8:	e13fe417 	ldw	r4,-112(fp)
    5ccc:	2008943a 	slli	r4,r4,16
    5cd0:	e13fe615 	stw	r4,-104(fp)
    5cd4:	e0bfe217 	ldw	r2,-120(fp)
    5cd8:	e0ffe617 	ldw	r3,-104(fp)
    5cdc:	10c4b03a 	or	r2,r2,r3
    5ce0:	e0bfe815 	stw	r2,-96(fp)
    5ce4:	e13fe317 	ldw	r4,-116(fp)
    5ce8:	e0bfe717 	ldw	r2,-100(fp)
    5cec:	2088b03a 	or	r4,r4,r2
    5cf0:	e13fe915 	stw	r4,-92(fp)
    5cf4:	e0ffd717 	ldw	r3,-164(fp)
    5cf8:	e0bfd117 	ldw	r2,-188(fp)
    5cfc:	10800284 	addi	r2,r2,10
    5d00:	100490fa 	slli	r2,r2,3
    5d04:	1885883a 	add	r2,r3,r2
    5d08:	e0ffe817 	ldw	r3,-96(fp)
    5d0c:	10c00015 	stw	r3,0(r2)
    5d10:	e13fe917 	ldw	r4,-92(fp)
    5d14:	11000115 	stw	r4,4(r2)
	if (usedspace > SHA512_SHORT_BLOCK_LENGTH) {
		memzero(((uint8_t*)context->buffer) + usedspace, SHA512_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    5d18:	e0bfd117 	ldw	r2,-188(fp)
    5d1c:	10800044 	addi	r2,r2,1
    5d20:	e0bfd115 	stw	r2,-188(fp)
    5d24:	e0bfd117 	ldw	r2,-188(fp)
    5d28:	10800410 	cmplti	r2,r2,16
    5d2c:	103f841e 	bne	r2,zero,5b40 <__alt_mem_epcs_flash_controller+0xfdffcb40>
			REVERSE64(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Do second-to-last transform: */
		sha512_Transform(context->state, context->buffer, context->state);
    5d30:	e0ffd717 	ldw	r3,-164(fp)
    5d34:	e0bfd717 	ldw	r2,-164(fp)
    5d38:	10801404 	addi	r2,r2,80
    5d3c:	e13fd717 	ldw	r4,-164(fp)
    5d40:	200d883a 	mov	r6,r4
    5d44:	100b883a 	mov	r5,r2
    5d48:	1809883a 	mov	r4,r3
    5d4c:	00042fc0 	call	42fc <sha512_Transform>

		/* And prepare the last transform: */
		usedspace = 0;
    5d50:	e03fd015 	stw	zero,-192(fp)
	}
	/* Set-up for the last transform: */
	memzero(((uint8_t*)context->buffer) + usedspace, SHA512_SHORT_BLOCK_LENGTH - usedspace);
    5d54:	e0bfd717 	ldw	r2,-164(fp)
    5d58:	10c01404 	addi	r3,r2,80
    5d5c:	e0bfd017 	ldw	r2,-192(fp)
    5d60:	1889883a 	add	r4,r3,r2
    5d64:	00c01c04 	movi	r3,112
    5d68:	e0bfd017 	ldw	r2,-192(fp)
    5d6c:	1885c83a 	sub	r2,r3,r2
    5d70:	100b883a 	mov	r5,r2
    5d74:	00013700 	call	1370 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert TO host byte order */
	for (int j = 0; j < 14; j++) {
    5d78:	e03fd215 	stw	zero,-184(fp)
    5d7c:	00006106 	br	5f04 <sha512_Last+0x478>
		REVERSE64(context->buffer[j],context->buffer[j]);
    5d80:	e0ffd717 	ldw	r3,-164(fp)
    5d84:	e0bfd217 	ldw	r2,-184(fp)
    5d88:	10800284 	addi	r2,r2,10
    5d8c:	100490fa 	slli	r2,r2,3
    5d90:	1885883a 	add	r2,r3,r2
    5d94:	10c00017 	ldw	r3,0(r2)
    5d98:	e0ffd515 	stw	r3,-172(fp)
    5d9c:	10800117 	ldw	r2,4(r2)
    5da0:	e0bfd615 	stw	r2,-168(fp)
    5da4:	e0bfd617 	ldw	r2,-168(fp)
    5da8:	e0bff615 	stw	r2,-40(fp)
    5dac:	e0ffd517 	ldw	r3,-172(fp)
    5db0:	e0fff715 	stw	r3,-36(fp)
    5db4:	e13ff617 	ldw	r4,-40(fp)
    5db8:	e13fd515 	stw	r4,-172(fp)
    5dbc:	e0bff717 	ldw	r2,-36(fp)
    5dc0:	e0bfd615 	stw	r2,-168(fp)
    5dc4:	e0ffd517 	ldw	r3,-172(fp)
    5dc8:	00bfc074 	movhi	r2,65281
    5dcc:	10bfc004 	addi	r2,r2,-256
    5dd0:	1884703a 	and	r2,r3,r2
    5dd4:	e0bfea15 	stw	r2,-88(fp)
    5dd8:	e0ffd617 	ldw	r3,-168(fp)
    5ddc:	00bfc074 	movhi	r2,65281
    5de0:	10bfc004 	addi	r2,r2,-256
    5de4:	1884703a 	and	r2,r3,r2
    5de8:	e0bfeb15 	stw	r2,-84(fp)
    5dec:	e0ffeb17 	ldw	r3,-84(fp)
    5df0:	1804963a 	slli	r2,r3,24
    5df4:	e13fea17 	ldw	r4,-88(fp)
    5df8:	2020d23a 	srli	r16,r4,8
    5dfc:	1420b03a 	or	r16,r2,r16
    5e00:	e0bfeb17 	ldw	r2,-84(fp)
    5e04:	1022d23a 	srli	r17,r2,8
    5e08:	e0ffd517 	ldw	r3,-172(fp)
    5e0c:	00803ff4 	movhi	r2,255
    5e10:	10803fc4 	addi	r2,r2,255
    5e14:	1884703a 	and	r2,r3,r2
    5e18:	e0bfec15 	stw	r2,-80(fp)
    5e1c:	e0ffd617 	ldw	r3,-168(fp)
    5e20:	00803ff4 	movhi	r2,255
    5e24:	10803fc4 	addi	r2,r2,255
    5e28:	1884703a 	and	r2,r3,r2
    5e2c:	e0bfed15 	stw	r2,-76(fp)
    5e30:	e0ffec17 	ldw	r3,-80(fp)
    5e34:	1804d63a 	srli	r2,r3,24
    5e38:	e13fed17 	ldw	r4,-76(fp)
    5e3c:	2026923a 	slli	r19,r4,8
    5e40:	14e6b03a 	or	r19,r2,r19
    5e44:	e0bfec17 	ldw	r2,-80(fp)
    5e48:	1024923a 	slli	r18,r2,8
    5e4c:	8484b03a 	or	r2,r16,r18
    5e50:	e0bfd515 	stw	r2,-172(fp)
    5e54:	8cc4b03a 	or	r2,r17,r19
    5e58:	e0bfd615 	stw	r2,-168(fp)
    5e5c:	e0bfd517 	ldw	r2,-172(fp)
    5e60:	10bfffec 	andhi	r2,r2,65535
    5e64:	e0bfee15 	stw	r2,-72(fp)
    5e68:	e0bfd617 	ldw	r2,-168(fp)
    5e6c:	10bfffec 	andhi	r2,r2,65535
    5e70:	e0bfef15 	stw	r2,-68(fp)
    5e74:	e0ffef17 	ldw	r3,-68(fp)
    5e78:	1804943a 	slli	r2,r3,16
    5e7c:	e13fee17 	ldw	r4,-72(fp)
    5e80:	2028d43a 	srli	r20,r4,16
    5e84:	1528b03a 	or	r20,r2,r20
    5e88:	e0bfef17 	ldw	r2,-68(fp)
    5e8c:	102ad43a 	srli	r21,r2,16
    5e90:	e0bfd517 	ldw	r2,-172(fp)
    5e94:	10bfffcc 	andi	r2,r2,65535
    5e98:	e0bff015 	stw	r2,-64(fp)
    5e9c:	e0bfd617 	ldw	r2,-168(fp)
    5ea0:	10bfffcc 	andi	r2,r2,65535
    5ea4:	e0bff115 	stw	r2,-60(fp)
    5ea8:	e0fff017 	ldw	r3,-64(fp)
    5eac:	1804d43a 	srli	r2,r3,16
    5eb0:	e13ff117 	ldw	r4,-60(fp)
    5eb4:	202e943a 	slli	r23,r4,16
    5eb8:	15eeb03a 	or	r23,r2,r23
    5ebc:	e0bff017 	ldw	r2,-64(fp)
    5ec0:	102c943a 	slli	r22,r2,16
    5ec4:	a586b03a 	or	r3,r20,r22
    5ec8:	e0fff215 	stw	r3,-56(fp)
    5ecc:	adc8b03a 	or	r4,r21,r23
    5ed0:	e13ff315 	stw	r4,-52(fp)
    5ed4:	e0ffd717 	ldw	r3,-164(fp)
    5ed8:	e0bfd217 	ldw	r2,-184(fp)
    5edc:	10800284 	addi	r2,r2,10
    5ee0:	100490fa 	slli	r2,r2,3
    5ee4:	1885883a 	add	r2,r3,r2
    5ee8:	e0fff217 	ldw	r3,-56(fp)
    5eec:	10c00015 	stw	r3,0(r2)
    5ef0:	e13ff317 	ldw	r4,-52(fp)
    5ef4:	11000115 	stw	r4,4(r2)
	/* Set-up for the last transform: */
	memzero(((uint8_t*)context->buffer) + usedspace, SHA512_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert TO host byte order */
	for (int j = 0; j < 14; j++) {
    5ef8:	e0bfd217 	ldw	r2,-184(fp)
    5efc:	10800044 	addi	r2,r2,1
    5f00:	e0bfd215 	stw	r2,-184(fp)
    5f04:	e0bfd217 	ldw	r2,-184(fp)
    5f08:	10800390 	cmplti	r2,r2,14
    5f0c:	103f9c1e 	bne	r2,zero,5d80 <__alt_mem_epcs_flash_controller+0xfdffcd80>
		REVERSE64(context->buffer[j],context->buffer[j]);
	}
#endif
	/* Store the length of input data (in bits): */
	context->buffer[14] = context->bitcount[1];
    5f10:	e13fd717 	ldw	r4,-164(fp)
    5f14:	20801217 	ldw	r2,72(r4)
    5f18:	20c01317 	ldw	r3,76(r4)
    5f1c:	e13fd717 	ldw	r4,-164(fp)
    5f20:	20803015 	stw	r2,192(r4)
    5f24:	20c03115 	stw	r3,196(r4)
	context->buffer[15] = context->bitcount[0];
    5f28:	e13fd717 	ldw	r4,-164(fp)
    5f2c:	20801017 	ldw	r2,64(r4)
    5f30:	20c01117 	ldw	r3,68(r4)
    5f34:	e13fd717 	ldw	r4,-164(fp)
    5f38:	20803215 	stw	r2,200(r4)
    5f3c:	20c03315 	stw	r3,204(r4)

	/* Final transform: */
	sha512_Transform(context->state, context->buffer, context->state);
    5f40:	e0ffd717 	ldw	r3,-164(fp)
    5f44:	e0bfd717 	ldw	r2,-164(fp)
    5f48:	10801404 	addi	r2,r2,80
    5f4c:	e13fd717 	ldw	r4,-164(fp)
    5f50:	200d883a 	mov	r6,r4
    5f54:	100b883a 	mov	r5,r2
    5f58:	1809883a 	mov	r4,r3
    5f5c:	00042fc0 	call	42fc <sha512_Transform>
}
    5f60:	0001883a 	nop
    5f64:	e6fff804 	addi	sp,fp,-32
    5f68:	dfc00917 	ldw	ra,36(sp)
    5f6c:	df000817 	ldw	fp,32(sp)
    5f70:	ddc00717 	ldw	r23,28(sp)
    5f74:	dd800617 	ldw	r22,24(sp)
    5f78:	dd400517 	ldw	r21,20(sp)
    5f7c:	dd000417 	ldw	r20,16(sp)
    5f80:	dcc00317 	ldw	r19,12(sp)
    5f84:	dc800217 	ldw	r18,8(sp)
    5f88:	dc400117 	ldw	r17,4(sp)
    5f8c:	dc000017 	ldw	r16,0(sp)
    5f90:	dec00a04 	addi	sp,sp,40
    5f94:	f800283a 	ret

00005f98 <sha512_Final>:

void sha512_Final(SHA512_CTX* context, sha2_byte digest[]) {
    5f98:	deffe504 	addi	sp,sp,-108
    5f9c:	dfc01a15 	stw	ra,104(sp)
    5fa0:	df001915 	stw	fp,100(sp)
    5fa4:	ddc01815 	stw	r23,96(sp)
    5fa8:	dd801715 	stw	r22,92(sp)
    5fac:	dd401615 	stw	r21,88(sp)
    5fb0:	dd001515 	stw	r20,84(sp)
    5fb4:	dcc01415 	stw	r19,80(sp)
    5fb8:	dc801315 	stw	r18,76(sp)
    5fbc:	dc401215 	stw	r17,72(sp)
    5fc0:	dc001115 	stw	r16,68(sp)
    5fc4:	df001904 	addi	fp,sp,100
    5fc8:	e13fea15 	stw	r4,-88(fp)
    5fcc:	e17feb15 	stw	r5,-84(fp)
	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    5fd0:	e0bfeb17 	ldw	r2,-84(fp)
    5fd4:	10006b26 	beq	r2,zero,6184 <sha512_Final+0x1ec>
		sha512_Last(context);
    5fd8:	e13fea17 	ldw	r4,-88(fp)
    5fdc:	0005a8c0 	call	5a8c <sha512_Last>

		/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    5fe0:	e03fe715 	stw	zero,-100(fp)
    5fe4:	00005f06 	br	6164 <sha512_Final+0x1cc>
			REVERSE64(context->state[j],context->state[j]);
    5fe8:	e0ffea17 	ldw	r3,-88(fp)
    5fec:	e0bfe717 	ldw	r2,-100(fp)
    5ff0:	100490fa 	slli	r2,r2,3
    5ff4:	1885883a 	add	r2,r3,r2
    5ff8:	10c00017 	ldw	r3,0(r2)
    5ffc:	e0ffe815 	stw	r3,-96(fp)
    6000:	10800117 	ldw	r2,4(r2)
    6004:	e0bfe915 	stw	r2,-92(fp)
    6008:	e0bfe917 	ldw	r2,-92(fp)
    600c:	e0bff615 	stw	r2,-40(fp)
    6010:	e0ffe817 	ldw	r3,-96(fp)
    6014:	e0fff715 	stw	r3,-36(fp)
    6018:	e0bff617 	ldw	r2,-40(fp)
    601c:	e0bfe815 	stw	r2,-96(fp)
    6020:	e0fff717 	ldw	r3,-36(fp)
    6024:	e0ffe915 	stw	r3,-92(fp)
    6028:	e0ffe817 	ldw	r3,-96(fp)
    602c:	00bfc074 	movhi	r2,65281
    6030:	10bfc004 	addi	r2,r2,-256
    6034:	1884703a 	and	r2,r3,r2
    6038:	e0bfec15 	stw	r2,-80(fp)
    603c:	e0ffe917 	ldw	r3,-92(fp)
    6040:	00bfc074 	movhi	r2,65281
    6044:	10bfc004 	addi	r2,r2,-256
    6048:	1884703a 	and	r2,r3,r2
    604c:	e0bfed15 	stw	r2,-76(fp)
    6050:	e0ffed17 	ldw	r3,-76(fp)
    6054:	1804963a 	slli	r2,r3,24
    6058:	e0ffec17 	ldw	r3,-80(fp)
    605c:	1820d23a 	srli	r16,r3,8
    6060:	1420b03a 	or	r16,r2,r16
    6064:	e0bfed17 	ldw	r2,-76(fp)
    6068:	1022d23a 	srli	r17,r2,8
    606c:	e0ffe817 	ldw	r3,-96(fp)
    6070:	00803ff4 	movhi	r2,255
    6074:	10803fc4 	addi	r2,r2,255
    6078:	1884703a 	and	r2,r3,r2
    607c:	e0bfee15 	stw	r2,-72(fp)
    6080:	e0ffe917 	ldw	r3,-92(fp)
    6084:	00803ff4 	movhi	r2,255
    6088:	10803fc4 	addi	r2,r2,255
    608c:	1884703a 	and	r2,r3,r2
    6090:	e0bfef15 	stw	r2,-68(fp)
    6094:	e0ffee17 	ldw	r3,-72(fp)
    6098:	1804d63a 	srli	r2,r3,24
    609c:	e0ffef17 	ldw	r3,-68(fp)
    60a0:	1826923a 	slli	r19,r3,8
    60a4:	14e6b03a 	or	r19,r2,r19
    60a8:	e0bfee17 	ldw	r2,-72(fp)
    60ac:	1024923a 	slli	r18,r2,8
    60b0:	8484b03a 	or	r2,r16,r18
    60b4:	e0bfe815 	stw	r2,-96(fp)
    60b8:	8cc4b03a 	or	r2,r17,r19
    60bc:	e0bfe915 	stw	r2,-92(fp)
    60c0:	e0bfe817 	ldw	r2,-96(fp)
    60c4:	10bfffec 	andhi	r2,r2,65535
    60c8:	e0bff015 	stw	r2,-64(fp)
    60cc:	e0bfe917 	ldw	r2,-92(fp)
    60d0:	10bfffec 	andhi	r2,r2,65535
    60d4:	e0bff115 	stw	r2,-60(fp)
    60d8:	e0fff117 	ldw	r3,-60(fp)
    60dc:	1804943a 	slli	r2,r3,16
    60e0:	e0fff017 	ldw	r3,-64(fp)
    60e4:	1828d43a 	srli	r20,r3,16
    60e8:	1528b03a 	or	r20,r2,r20
    60ec:	e0bff117 	ldw	r2,-60(fp)
    60f0:	102ad43a 	srli	r21,r2,16
    60f4:	e0bfe817 	ldw	r2,-96(fp)
    60f8:	10bfffcc 	andi	r2,r2,65535
    60fc:	e0bff215 	stw	r2,-56(fp)
    6100:	e0bfe917 	ldw	r2,-92(fp)
    6104:	10bfffcc 	andi	r2,r2,65535
    6108:	e0bff315 	stw	r2,-52(fp)
    610c:	e0fff217 	ldw	r3,-56(fp)
    6110:	1804d43a 	srli	r2,r3,16
    6114:	e0fff317 	ldw	r3,-52(fp)
    6118:	182e943a 	slli	r23,r3,16
    611c:	15eeb03a 	or	r23,r2,r23
    6120:	e0bff217 	ldw	r2,-56(fp)
    6124:	102c943a 	slli	r22,r2,16
    6128:	a586b03a 	or	r3,r20,r22
    612c:	e0fff415 	stw	r3,-48(fp)
    6130:	adc4b03a 	or	r2,r21,r23
    6134:	e0bff515 	stw	r2,-44(fp)
    6138:	e0ffea17 	ldw	r3,-88(fp)
    613c:	e0bfe717 	ldw	r2,-100(fp)
    6140:	100490fa 	slli	r2,r2,3
    6144:	1885883a 	add	r2,r3,r2
    6148:	e0fff417 	ldw	r3,-48(fp)
    614c:	10c00015 	stw	r3,0(r2)
    6150:	e0fff517 	ldw	r3,-44(fp)
    6154:	10c00115 	stw	r3,4(r2)
		sha512_Last(context);

		/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    6158:	e0bfe717 	ldw	r2,-100(fp)
    615c:	10800044 	addi	r2,r2,1
    6160:	e0bfe715 	stw	r2,-100(fp)
    6164:	e0bfe717 	ldw	r2,-100(fp)
    6168:	10800210 	cmplti	r2,r2,8
    616c:	103f9e1e 	bne	r2,zero,5fe8 <__alt_mem_epcs_flash_controller+0xfdffcfe8>
			REVERSE64(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA512_DIGEST_LENGTH);
    6170:	e0bfea17 	ldw	r2,-88(fp)
    6174:	01801004 	movi	r6,64
    6178:	100b883a 	mov	r5,r2
    617c:	e13feb17 	ldw	r4,-84(fp)
    6180:	00463980 	call	46398 <memcpy>
	}

	/* Zero out state data */
	memzero(context, sizeof(SHA512_CTX));
    6184:	01403404 	movi	r5,208
    6188:	e13fea17 	ldw	r4,-88(fp)
    618c:	00013700 	call	1370 <memzero>
}
    6190:	0001883a 	nop
    6194:	e6fff804 	addi	sp,fp,-32
    6198:	dfc00917 	ldw	ra,36(sp)
    619c:	df000817 	ldw	fp,32(sp)
    61a0:	ddc00717 	ldw	r23,28(sp)
    61a4:	dd800617 	ldw	r22,24(sp)
    61a8:	dd400517 	ldw	r21,20(sp)
    61ac:	dd000417 	ldw	r20,16(sp)
    61b0:	dcc00317 	ldw	r19,12(sp)
    61b4:	dc800217 	ldw	r18,8(sp)
    61b8:	dc400117 	ldw	r17,4(sp)
    61bc:	dc000017 	ldw	r16,0(sp)
    61c0:	dec00a04 	addi	sp,sp,40
    61c4:	f800283a 	ret

000061c8 <sha512_End>:

char *sha512_End(SHA512_CTX* context, char buffer[]) {
    61c8:	deffea04 	addi	sp,sp,-88
    61cc:	dfc01515 	stw	ra,84(sp)
    61d0:	df001415 	stw	fp,80(sp)
    61d4:	df001404 	addi	fp,sp,80
    61d8:	e13ffe15 	stw	r4,-8(fp)
    61dc:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA512_DIGEST_LENGTH], *d = digest;
    61e0:	e0bfee04 	addi	r2,fp,-72
    61e4:	e0bfec15 	stw	r2,-80(fp)
	int		i;

	if (buffer != (char*)0) {
    61e8:	e0bfff17 	ldw	r2,-4(fp)
    61ec:	10002926 	beq	r2,zero,6294 <sha512_End+0xcc>
		sha512_Final(context, digest);
    61f0:	e0bfee04 	addi	r2,fp,-72
    61f4:	100b883a 	mov	r5,r2
    61f8:	e13ffe17 	ldw	r4,-8(fp)
    61fc:	0005f980 	call	5f98 <sha512_Final>

		for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
    6200:	e03fed15 	stw	zero,-76(fp)
    6204:	00001d06 	br	627c <sha512_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    6208:	e0bfff17 	ldw	r2,-4(fp)
    620c:	10c00044 	addi	r3,r2,1
    6210:	e0ffff15 	stw	r3,-4(fp)
    6214:	d1200017 	ldw	r4,-32768(gp)
    6218:	e0ffec17 	ldw	r3,-80(fp)
    621c:	18c00003 	ldbu	r3,0(r3)
    6220:	18c03fcc 	andi	r3,r3,255
    6224:	1806d13a 	srli	r3,r3,4
    6228:	18c03fcc 	andi	r3,r3,255
    622c:	20c7883a 	add	r3,r4,r3
    6230:	18c00003 	ldbu	r3,0(r3)
    6234:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    6238:	e0bfff17 	ldw	r2,-4(fp)
    623c:	10c00044 	addi	r3,r2,1
    6240:	e0ffff15 	stw	r3,-4(fp)
    6244:	d1200017 	ldw	r4,-32768(gp)
    6248:	e0ffec17 	ldw	r3,-80(fp)
    624c:	18c00003 	ldbu	r3,0(r3)
    6250:	18c03fcc 	andi	r3,r3,255
    6254:	18c003cc 	andi	r3,r3,15
    6258:	20c7883a 	add	r3,r4,r3
    625c:	18c00003 	ldbu	r3,0(r3)
    6260:	10c00005 	stb	r3,0(r2)
			d++;
    6264:	e0bfec17 	ldw	r2,-80(fp)
    6268:	10800044 	addi	r2,r2,1
    626c:	e0bfec15 	stw	r2,-80(fp)
	int		i;

	if (buffer != (char*)0) {
		sha512_Final(context, digest);

		for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
    6270:	e0bfed17 	ldw	r2,-76(fp)
    6274:	10800044 	addi	r2,r2,1
    6278:	e0bfed15 	stw	r2,-76(fp)
    627c:	e0bfed17 	ldw	r2,-76(fp)
    6280:	10801010 	cmplti	r2,r2,64
    6284:	103fe01e 	bne	r2,zero,6208 <__alt_mem_epcs_flash_controller+0xfdffd208>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    6288:	e0bfff17 	ldw	r2,-4(fp)
    628c:	10000005 	stb	zero,0(r2)
    6290:	00000306 	br	62a0 <sha512_End+0xd8>
	} else {
		memzero(context, sizeof(SHA512_CTX));
    6294:	01403404 	movi	r5,208
    6298:	e13ffe17 	ldw	r4,-8(fp)
    629c:	00013700 	call	1370 <memzero>
	}
	memzero(digest, SHA512_DIGEST_LENGTH);
    62a0:	e0bfee04 	addi	r2,fp,-72
    62a4:	01401004 	movi	r5,64
    62a8:	1009883a 	mov	r4,r2
    62ac:	00013700 	call	1370 <memzero>
	return buffer;
    62b0:	e0bfff17 	ldw	r2,-4(fp)
}
    62b4:	e037883a 	mov	sp,fp
    62b8:	dfc00117 	ldw	ra,4(sp)
    62bc:	df000017 	ldw	fp,0(sp)
    62c0:	dec00204 	addi	sp,sp,8
    62c4:	f800283a 	ret

000062c8 <sha512_Raw>:

void sha512_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA512_DIGEST_LENGTH]) {
    62c8:	deffc704 	addi	sp,sp,-228
    62cc:	dfc03815 	stw	ra,224(sp)
    62d0:	df003715 	stw	fp,220(sp)
    62d4:	df003704 	addi	fp,sp,220
    62d8:	e13ffd15 	stw	r4,-12(fp)
    62dc:	e17ffe15 	stw	r5,-8(fp)
    62e0:	e1bfff15 	stw	r6,-4(fp)
	SHA512_CTX	context;
	sha512_Init(&context);
    62e4:	e13fc904 	addi	r4,fp,-220
    62e8:	00042740 	call	4274 <sha512_Init>
	sha512_Update(&context, data, len);
    62ec:	e1bffe17 	ldw	r6,-8(fp)
    62f0:	e17ffd17 	ldw	r5,-12(fp)
    62f4:	e13fc904 	addi	r4,fp,-220
    62f8:	000521c0 	call	521c <sha512_Update>
	sha512_Final(&context, digest);
    62fc:	e17fff17 	ldw	r5,-4(fp)
    6300:	e13fc904 	addi	r4,fp,-220
    6304:	0005f980 	call	5f98 <sha512_Final>
}
    6308:	0001883a 	nop
    630c:	e037883a 	mov	sp,fp
    6310:	dfc00117 	ldw	ra,4(sp)
    6314:	df000017 	ldw	fp,0(sp)
    6318:	dec00204 	addi	sp,sp,8
    631c:	f800283a 	ret

00006320 <sha512_Data>:

char* sha512_Data(const sha2_byte* data, size_t len, char digest[SHA512_DIGEST_STRING_LENGTH]) {
    6320:	deffc704 	addi	sp,sp,-228
    6324:	dfc03815 	stw	ra,224(sp)
    6328:	df003715 	stw	fp,220(sp)
    632c:	df003704 	addi	fp,sp,220
    6330:	e13ffd15 	stw	r4,-12(fp)
    6334:	e17ffe15 	stw	r5,-8(fp)
    6338:	e1bfff15 	stw	r6,-4(fp)
	SHA512_CTX	context;

	sha512_Init(&context);
    633c:	e13fc904 	addi	r4,fp,-220
    6340:	00042740 	call	4274 <sha512_Init>
	sha512_Update(&context, data, len);
    6344:	e1bffe17 	ldw	r6,-8(fp)
    6348:	e17ffd17 	ldw	r5,-12(fp)
    634c:	e13fc904 	addi	r4,fp,-220
    6350:	000521c0 	call	521c <sha512_Update>
	return sha512_End(&context, digest);
    6354:	e17fff17 	ldw	r5,-4(fp)
    6358:	e13fc904 	addi	r4,fp,-220
    635c:	00061c80 	call	61c8 <sha512_End>
}
    6360:	e037883a 	mov	sp,fp
    6364:	dfc00117 	ldw	ra,4(sp)
    6368:	df000017 	ldw	fp,0(sp)
    636c:	dec00204 	addi	sp,sp,8
    6370:	f800283a 	ret

00006374 <main>:
#include <tool.h>
#include <chainparams.h>


int main()
{
    6374:	deffef04 	addi	sp,sp,-68
    6378:	dfc01015 	stw	ra,64(sp)
    637c:	df000f15 	stw	fp,60(sp)
    6380:	ddc00e15 	stw	r23,56(sp)
    6384:	dd800d15 	stw	r22,52(sp)
    6388:	dd400c15 	stw	r21,48(sp)
    638c:	dd000b15 	stw	r20,44(sp)
    6390:	dcc00a15 	stw	r19,40(sp)
    6394:	dc800915 	stw	r18,36(sp)
    6398:	dc400815 	stw	r17,32(sp)
    639c:	dc000715 	stw	r16,28(sp)
    63a0:	df000f04 	addi	fp,sp,60
	printf("Hello World from NIOS II hol\n");
    63a4:	01000174 	movhi	r4,5
    63a8:	21082904 	addi	r4,r4,8356
    63ac:	00467d00 	call	467d0 <puts>
	printf("Software Version: %d.%d.%d\n\n", SOFTWARE_VERSION_MAJOR, SOFTWARE_VERSION_MINOR, SOFTWARE_VERSION_REV);
    63b0:	000f883a 	mov	r7,zero
    63b4:	000d883a 	mov	r6,zero
    63b8:	01400044 	movi	r5,1
    63bc:	01000174 	movhi	r4,5
    63c0:	21083104 	addi	r4,r4,8388
    63c4:	00467040 	call	46704 <printf>

	void *lots_of_memory = malloc(1024 * 1024 * 10);	// attempt to allocate 10MB
    63c8:	01002834 	movhi	r4,160
    63cc:	00463400 	call	46340 <malloc>
    63d0:	e0bff315 	stw	r2,-52(fp)
    printf("SDRAM malloc returned 0x%08lx\n", (alt_u32)lots_of_memory);
    63d4:	e0bff317 	ldw	r2,-52(fp)
    63d8:	100b883a 	mov	r5,r2
    63dc:	01000174 	movhi	r4,5
    63e0:	21083904 	addi	r4,r4,8420
    63e4:	00467040 	call	46704 <printf>
//    uint8_t seed[64];
//
//    const char *mnemonic_phrase = mnemonic_generate(128);
//    printf("MNEMONIC PHRASE: %s", mnemonic_phrase);

    const btc_chainparams* chain = &btc_chainparams_test;
    63e8:	00800174 	movhi	r2,5
    63ec:	108a5b04 	addi	r2,r2,10604
    63f0:	e0bff415 	stw	r2,-48(fp)
    size_t sizeout = 128;
    63f4:	00802004 	movi	r2,128
    63f8:	e0bff515 	stw	r2,-44(fp)
    char masterkey[sizeout];
    63fc:	e0bff517 	ldw	r2,-44(fp)
    6400:	1007883a 	mov	r3,r2
    6404:	18ffffc4 	addi	r3,r3,-1
    6408:	e0fff615 	stw	r3,-40(fp)
    640c:	102d883a 	mov	r22,r2
    6410:	002f883a 	mov	r23,zero
    6414:	b006d77a 	srli	r3,r22,29
    6418:	b82690fa 	slli	r19,r23,3
    641c:	1ce6b03a 	or	r19,r3,r19
    6420:	b02490fa 	slli	r18,r22,3
    6424:	1029883a 	mov	r20,r2
    6428:	002b883a 	mov	r21,zero
    642c:	a006d77a 	srli	r3,r20,29
    6430:	a82290fa 	slli	r17,r21,3
    6434:	1c62b03a 	or	r17,r3,r17
    6438:	a02090fa 	slli	r16,r20,3
    643c:	108000c4 	addi	r2,r2,3
    6440:	1004d0ba 	srli	r2,r2,2
    6444:	1085883a 	add	r2,r2,r2
    6448:	1085883a 	add	r2,r2,r2
    644c:	d8b7c83a 	sub	sp,sp,r2
    6450:	d805883a 	mov	r2,sp
    6454:	1005883a 	mov	r2,r2
    6458:	e0bff715 	stw	r2,-36(fp)
    hd_gen_master(chain, masterkey, sizeout);
    645c:	e0bff717 	ldw	r2,-36(fp)
    6460:	e1bff517 	ldw	r6,-44(fp)
    6464:	100b883a 	mov	r5,r2
    6468:	e13ff417 	ldw	r4,-48(fp)
    646c:	00067440 	call	6744 <hd_gen_master>
    printf("masterkey: %s\n", masterkey);
    6470:	e0bff717 	ldw	r2,-36(fp)
    6474:	100b883a 	mov	r5,r2
    6478:	01000174 	movhi	r4,5
    647c:	21084104 	addi	r4,r4,8452
    6480:	00467040 	call	46704 <printf>

    hd_print_node(chain, masterkey);
    6484:	e0bff717 	ldw	r2,-36(fp)
    6488:	100b883a 	mov	r5,r2
    648c:	e13ff417 	ldw	r4,-48(fp)
    6490:	00068040 	call	6804 <hd_print_node>
//		printf("%x", seed[i]);
//	}
//	printf("\n");
//
//
    int count = 0;
    6494:	e03ff115 	stw	zero,-60(fp)
    int delay;

    // main loop
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
    6498:	e0bff117 	ldw	r2,-60(fp)
    649c:	10c03fcc 	andi	r3,r2,255
    64a0:	00808074 	movhi	r2,513
    64a4:	10a80804 	addi	r2,r2,-24544
    64a8:	10c00035 	stwio	r3,0(r2)
        delay = 0;
    64ac:	e03ff215 	stw	zero,-56(fp)
        while(delay < 200000)
    64b0:	00000306 	br	64c0 <main+0x14c>
        {
            delay++;
    64b4:	e0bff217 	ldw	r2,-56(fp)
    64b8:	10800044 	addi	r2,r2,1
    64bc:	e0bff215 	stw	r2,-56(fp)
    // main loop
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
        delay = 0;
        while(delay < 200000)
    64c0:	e0fff217 	ldw	r3,-56(fp)
    64c4:	008000f4 	movhi	r2,3
    64c8:	10834fc4 	addi	r2,r2,3391
    64cc:	10fff90e 	bge	r2,r3,64b4 <__alt_mem_epcs_flash_controller+0xfdffd4b4>
        {
            delay++;
        }
        count++;
    64d0:	e0bff117 	ldw	r2,-60(fp)
    64d4:	10800044 	addi	r2,r2,1
    64d8:	e0bff115 	stw	r2,-60(fp)
    }
    64dc:	003fee06 	br	6498 <__alt_mem_epcs_flash_controller+0xfdffd498>

000064e0 <addresses_from_pubkey>:
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

btc_bool addresses_from_pubkey(const btc_chainparams* chain, const char* pubkey_hex, char* p2pkh_address, char* p2sh_p2wpkh_address, char *p2wpkh_address)
{
    64e0:	deffe804 	addi	sp,sp,-96
    64e4:	dfc01715 	stw	ra,92(sp)
    64e8:	df001615 	stw	fp,88(sp)
    64ec:	df001604 	addi	fp,sp,88
    64f0:	e13ffc15 	stw	r4,-16(fp)
    64f4:	e17ffd15 	stw	r5,-12(fp)
    64f8:	e1bffe15 	stw	r6,-8(fp)
    64fc:	e1ffff15 	stw	r7,-4(fp)
    if (!pubkey_hex || strlen(pubkey_hex) != 66)
    6500:	e0bffd17 	ldw	r2,-12(fp)
    6504:	10000426 	beq	r2,zero,6518 <addresses_from_pubkey+0x38>
    6508:	e13ffd17 	ldw	r4,-12(fp)
    650c:	0046c3c0 	call	46c3c <strlen>
    6510:	108010a0 	cmpeqi	r2,r2,66
    6514:	1000021e 	bne	r2,zero,6520 <addresses_from_pubkey+0x40>
        return false;
    6518:	0005883a 	mov	r2,zero
    651c:	00002e06 	br	65d8 <addresses_from_pubkey+0xf8>

    btc_pubkey pubkey;
    btc_pubkey_init(&pubkey);
    6520:	e13fea04 	addi	r4,fp,-88
    6524:	00072140 	call	7214 <btc_pubkey_init>
    pubkey.compressed = 1;
    6528:	00800044 	movi	r2,1
    652c:	e0bfea05 	stb	r2,-88(fp)

    size_t outlen = 0;
    6530:	e03ffb15 	stw	zero,-20(fp)
    utils_hex_to_bin(pubkey_hex, pubkey.pubkey, strlen(pubkey_hex), (int*)&outlen);
    6534:	e13ffd17 	ldw	r4,-12(fp)
    6538:	0046c3c0 	call	46c3c <strlen>
    653c:	1009883a 	mov	r4,r2
    6540:	e0fffb04 	addi	r3,fp,-20
    6544:	e0bfea44 	addi	r2,fp,-87
    6548:	180f883a 	mov	r7,r3
    654c:	200d883a 	mov	r6,r4
    6550:	100b883a 	mov	r5,r2
    6554:	e13ffd17 	ldw	r4,-12(fp)
    6558:	003fb7c0 	call	3fb7c <utils_hex_to_bin>
    if (outlen != BTC_ECKEY_COMPRESSED_LENGTH) {
    655c:	e0bffb17 	ldw	r2,-20(fp)
    6560:	10800860 	cmpeqi	r2,r2,33
    6564:	1000021e 	bne	r2,zero,6570 <addresses_from_pubkey+0x90>
        return false;
    6568:	0005883a 	mov	r2,zero
    656c:	00001a06 	br	65d8 <addresses_from_pubkey+0xf8>
    }
    assert(btc_pubkey_is_valid(&pubkey) == 1);
    6570:	e13fea04 	addi	r4,fp,-88
    6574:	00072e00 	call	72e0 <btc_pubkey_is_valid>
    6578:	10803fcc 	andi	r2,r2,255
    657c:	10800060 	cmpeqi	r2,r2,1
    6580:	1000081e 	bne	r2,zero,65a4 <addresses_from_pubkey+0xc4>
    6584:	01c00174 	movhi	r7,5
    6588:	39d04004 	addi	r7,r7,16640
    658c:	01800174 	movhi	r6,5
    6590:	31909e04 	addi	r6,r6,17016
    6594:	01400a44 	movi	r5,41
    6598:	01000174 	movhi	r4,5
    659c:	21104904 	addi	r4,r4,16676
    65a0:	0045fec0 	call	45fec <__assert_func>

    btc_pubkey_getaddr_p2pkh(&pubkey, chain, p2pkh_address);
    65a4:	e1bffe17 	ldw	r6,-8(fp)
    65a8:	e17ffc17 	ldw	r5,-16(fp)
    65ac:	e13fea04 	addi	r4,fp,-88
    65b0:	00077880 	call	7788 <btc_pubkey_getaddr_p2pkh>
    btc_pubkey_getaddr_p2sh_p2wpkh(&pubkey, chain, p2sh_p2wpkh_address);
    65b4:	e1bfff17 	ldw	r6,-4(fp)
    65b8:	e17ffc17 	ldw	r5,-16(fp)
    65bc:	e13fea04 	addi	r4,fp,-88
    65c0:	00076e40 	call	76e4 <btc_pubkey_getaddr_p2sh_p2wpkh>
    btc_pubkey_getaddr_p2wpkh(&pubkey, chain, p2wpkh_address);
    65c4:	e1800217 	ldw	r6,8(fp)
    65c8:	e17ffc17 	ldw	r5,-16(fp)
    65cc:	e13fea04 	addi	r4,fp,-88
    65d0:	00077ec0 	call	77ec <btc_pubkey_getaddr_p2wpkh>
    return true;
    65d4:	00800044 	movi	r2,1
}
    65d8:	e037883a 	mov	sp,fp
    65dc:	dfc00117 	ldw	ra,4(sp)
    65e0:	df000017 	ldw	fp,0(sp)
    65e4:	dec00204 	addi	sp,sp,8
    65e8:	f800283a 	ret

000065ec <pubkey_from_privatekey>:

btc_bool pubkey_from_privatekey(const btc_chainparams* chain, const char* privkey_wif, char* pubkey_hex, size_t* sizeout)
{
    65ec:	deffe104 	addi	sp,sp,-124
    65f0:	dfc01e15 	stw	ra,120(sp)
    65f4:	df001d15 	stw	fp,116(sp)
    65f8:	df001d04 	addi	fp,sp,116
    65fc:	e13ffc15 	stw	r4,-16(fp)
    6600:	e17ffd15 	stw	r5,-12(fp)
    6604:	e1bffe15 	stw	r6,-8(fp)
    6608:	e1ffff15 	stw	r7,-4(fp)
    btc_key key;
    btc_privkey_init(&key);
    660c:	e13fe304 	addi	r4,fp,-116
    6610:	0006dac0 	call	6dac <btc_privkey_init>
    if (!btc_privkey_decode_wif(privkey_wif, chain, &key)) {
    6614:	e1bfe304 	addi	r6,fp,-116
    6618:	e17ffc17 	ldw	r5,-16(fp)
    661c:	e13ffd17 	ldw	r4,-12(fp)
    6620:	00070780 	call	7078 <btc_privkey_decode_wif>
    6624:	10803fcc 	andi	r2,r2,255
    6628:	1000021e 	bne	r2,zero,6634 <pubkey_from_privatekey+0x48>
        return false;
    662c:	0005883a 	mov	r2,zero
    6630:	00001f06 	br	66b0 <pubkey_from_privatekey+0xc4>
    }

    btc_pubkey pubkey;
    btc_pubkey_init(&pubkey);
    6634:	e0bfeb04 	addi	r2,fp,-84
    6638:	1009883a 	mov	r4,r2
    663c:	00072140 	call	7214 <btc_pubkey_init>
    assert(btc_pubkey_is_valid(&pubkey) == 0);
    6640:	e0bfeb04 	addi	r2,fp,-84
    6644:	1009883a 	mov	r4,r2
    6648:	00072e00 	call	72e0 <btc_pubkey_is_valid>
    664c:	10803fcc 	andi	r2,r2,255
    6650:	10000826 	beq	r2,zero,6674 <pubkey_from_privatekey+0x88>
    6654:	01c00174 	movhi	r7,5
    6658:	39d04f04 	addi	r7,r7,16700
    665c:	01800174 	movhi	r6,5
    6660:	3190a404 	addi	r6,r6,17040
    6664:	01400ec4 	movi	r5,59
    6668:	01000174 	movhi	r4,5
    666c:	21104904 	addi	r4,r4,16676
    6670:	0045fec0 	call	45fec <__assert_func>
    btc_pubkey_from_key(&key, &pubkey);
    6674:	e0bfeb04 	addi	r2,fp,-84
    6678:	100b883a 	mov	r5,r2
    667c:	e13fe304 	addi	r4,fp,-116
    6680:	00074580 	call	7458 <btc_pubkey_from_key>
    btc_privkey_cleanse(&key);
    6684:	e13fe304 	addi	r4,fp,-116
    6688:	0006e300 	call	6e30 <btc_privkey_cleanse>

    btc_pubkey_get_hex(&pubkey, pubkey_hex, sizeout);
    668c:	e0bfeb04 	addi	r2,fp,-84
    6690:	e1bfff17 	ldw	r6,-4(fp)
    6694:	e17ffe17 	ldw	r5,-8(fp)
    6698:	1009883a 	mov	r4,r2
    669c:	00073e80 	call	73e8 <btc_pubkey_get_hex>
    btc_pubkey_cleanse(&pubkey);
    66a0:	e0bfeb04 	addi	r2,fp,-84
    66a4:	1009883a 	mov	r4,r2
    66a8:	00073280 	call	7328 <btc_pubkey_cleanse>

    return true;
    66ac:	00800044 	movi	r2,1
}
    66b0:	e037883a 	mov	sp,fp
    66b4:	dfc00117 	ldw	ra,4(sp)
    66b8:	df000017 	ldw	fp,0(sp)
    66bc:	dec00204 	addi	sp,sp,8
    66c0:	f800283a 	ret

000066c4 <gen_privatekey>:

btc_bool gen_privatekey(const btc_chainparams* chain, char* privkey_wif, size_t strsize_wif, char* privkey_hex_or_null)
{
    66c4:	defff204 	addi	sp,sp,-56
    66c8:	dfc00d15 	stw	ra,52(sp)
    66cc:	df000c15 	stw	fp,48(sp)
    66d0:	df000c04 	addi	fp,sp,48
    66d4:	e13ffc15 	stw	r4,-16(fp)
    66d8:	e17ffd15 	stw	r5,-12(fp)
    66dc:	e1bffe15 	stw	r6,-8(fp)
    66e0:	e1ffff15 	stw	r7,-4(fp)
    btc_key key;
    btc_privkey_init(&key);
    66e4:	e13ff404 	addi	r4,fp,-48
    66e8:	0006dac0 	call	6dac <btc_privkey_init>
    btc_privkey_gen(&key);
    66ec:	e13ff404 	addi	r4,fp,-48
    66f0:	0006e6c0 	call	6e6c <btc_privkey_gen>
    btc_privkey_encode_wif(&key, chain, privkey_wif, &strsize_wif);
    66f4:	e0bffe04 	addi	r2,fp,-8
    66f8:	100f883a 	mov	r7,r2
    66fc:	e1bffd17 	ldw	r6,-12(fp)
    6700:	e17ffc17 	ldw	r5,-16(fp)
    6704:	e13ff404 	addi	r4,fp,-48
    6708:	0006fc80 	call	6fc8 <btc_privkey_encode_wif>

    // also export the hex privkey if use had passed in a valid pointer
    // will always export 32 bytes
    if (privkey_hex_or_null != NULL)
    670c:	e0bfff17 	ldw	r2,-4(fp)
    6710:	10000426 	beq	r2,zero,6724 <gen_privatekey+0x60>
        utils_bin_to_hex(key.privkey, BTC_ECKEY_PKEY_LENGTH, privkey_hex_or_null);
    6714:	e1bfff17 	ldw	r6,-4(fp)
    6718:	01400804 	movi	r5,32
    671c:	e13ff404 	addi	r4,fp,-48
    6720:	00403300 	call	40330 <utils_bin_to_hex>
    btc_privkey_cleanse(&key);
    6724:	e13ff404 	addi	r4,fp,-48
    6728:	0006e300 	call	6e30 <btc_privkey_cleanse>
    return true;
    672c:	00800044 	movi	r2,1
}
    6730:	e037883a 	mov	sp,fp
    6734:	dfc00117 	ldw	ra,4(sp)
    6738:	df000017 	ldw	fp,0(sp)
    673c:	dec00204 	addi	sp,sp,8
    6740:	f800283a 	ret

00006744 <hd_gen_master>:

btc_bool hd_gen_master(const btc_chainparams* chain, char* masterkeyhex, size_t strsize)
{
    6744:	deffd704 	addi	sp,sp,-164
    6748:	dfc02815 	stw	ra,160(sp)
    674c:	df002715 	stw	fp,156(sp)
    6750:	df002704 	addi	fp,sp,156
    6754:	e13ffd15 	stw	r4,-12(fp)
    6758:	e17ffe15 	stw	r5,-8(fp)
    675c:	e1bfff15 	stw	r6,-4(fp)
    btc_hdnode node;
    uint8_t seed[32];
    assert(btc_random_bytes(seed, 32, true));
    6760:	e0bff504 	addi	r2,fp,-44
    6764:	01800044 	movi	r6,1
    6768:	01400804 	movi	r5,32
    676c:	1009883a 	mov	r4,r2
    6770:	00086300 	call	8630 <btc_random_bytes>
    6774:	10803fcc 	andi	r2,r2,255
    6778:	1000081e 	bne	r2,zero,679c <hd_gen_master+0x58>
    677c:	01c00174 	movhi	r7,5
    6780:	39d05804 	addi	r7,r7,16736
    6784:	01800174 	movhi	r6,5
    6788:	3190aa04 	addi	r6,r6,17064
    678c:	01401604 	movi	r5,88
    6790:	01000174 	movhi	r4,5
    6794:	21104904 	addi	r4,r4,16676
    6798:	0045fec0 	call	45fec <__assert_func>
//    random_buffer(seed, 32);
    btc_hdnode_from_seed(seed, 32, &node);
    679c:	e0bff504 	addi	r2,fp,-44
    67a0:	e1bfd904 	addi	r6,fp,-156
    67a4:	01400804 	movi	r5,32
    67a8:	1009883a 	mov	r4,r2
    67ac:	00421c40 	call	421c4 <btc_hdnode_from_seed>
    memset(seed, 0, 32);
    67b0:	e0bff504 	addi	r2,fp,-44
    67b4:	01800804 	movi	r6,32
    67b8:	000b883a 	mov	r5,zero
    67bc:	1009883a 	mov	r4,r2
    67c0:	00464200 	call	46420 <memset>
    btc_hdnode_serialize_private(&node, chain, masterkeyhex, strsize);
    67c4:	e0bfff17 	ldw	r2,-4(fp)
    67c8:	100f883a 	mov	r7,r2
    67cc:	e1bffe17 	ldw	r6,-8(fp)
    67d0:	e17ffd17 	ldw	r5,-12(fp)
    67d4:	e13fd904 	addi	r4,fp,-156
    67d8:	00429000 	call	42900 <btc_hdnode_serialize_private>
    memset(&node, 0, sizeof(node));
    67dc:	01801c04 	movi	r6,112
    67e0:	000b883a 	mov	r5,zero
    67e4:	e13fd904 	addi	r4,fp,-156
    67e8:	00464200 	call	46420 <memset>
    return true;
    67ec:	00800044 	movi	r2,1
}
    67f0:	e037883a 	mov	sp,fp
    67f4:	dfc00117 	ldw	ra,4(sp)
    67f8:	df000017 	ldw	fp,0(sp)
    67fc:	dec00204 	addi	sp,sp,8
    6800:	f800283a 	ret

00006804 <hd_print_node>:

btc_bool hd_print_node(const btc_chainparams* chain, const char* nodeser)
{
    6804:	deffbe04 	addi	sp,sp,-264
    6808:	dfc04115 	stw	ra,260(sp)
    680c:	df004015 	stw	fp,256(sp)
    6810:	ddc03f15 	stw	r23,252(sp)
    6814:	dd803e15 	stw	r22,248(sp)
    6818:	dd403d15 	stw	r21,244(sp)
    681c:	dd003c15 	stw	r20,240(sp)
    6820:	dcc03b15 	stw	r19,236(sp)
    6824:	dc803a15 	stw	r18,232(sp)
    6828:	dc403915 	stw	r17,228(sp)
    682c:	dc003815 	stw	r16,224(sp)
    6830:	df004004 	addi	fp,sp,256
    6834:	e13fe515 	stw	r4,-108(fp)
    6838:	e17fe615 	stw	r5,-104(fp)
    683c:	d805883a 	mov	r2,sp
    6840:	e0bfe715 	stw	r2,-100(fp)
    btc_hdnode node;
    if (!btc_hdnode_deserialize(nodeser, chain, &node))
    6844:	e0bfc804 	addi	r2,fp,-224
    6848:	100d883a 	mov	r6,r2
    684c:	e17fe517 	ldw	r5,-108(fp)
    6850:	e13fe617 	ldw	r4,-104(fp)
    6854:	0042a880 	call	42a88 <btc_hdnode_deserialize>
    6858:	10803fcc 	andi	r2,r2,255
    685c:	1000021e 	bne	r2,zero,6868 <hd_print_node+0x64>
        return false;
    6860:	0005883a 	mov	r2,zero
    6864:	0000d306 	br	6bb4 <hd_print_node+0x3b0>

    size_t strsize = 128;
    6868:	00802004 	movi	r2,128
    686c:	e0bfe415 	stw	r2,-112(fp)
    char str[strsize];
    6870:	e0ffe417 	ldw	r3,-112(fp)
    6874:	1805883a 	mov	r2,r3
    6878:	10bfffc4 	addi	r2,r2,-1
    687c:	e0bfc015 	stw	r2,-256(fp)
    6880:	e0ffe815 	stw	r3,-96(fp)
    6884:	e03fe915 	stw	zero,-92(fp)
    6888:	e13fe817 	ldw	r4,-96(fp)
    688c:	2004d77a 	srli	r2,r4,29
    6890:	e13fe917 	ldw	r4,-92(fp)
    6894:	200890fa 	slli	r4,r4,3
    6898:	e13feb15 	stw	r4,-84(fp)
    689c:	e13feb17 	ldw	r4,-84(fp)
    68a0:	1104b03a 	or	r2,r2,r4
    68a4:	e0bfeb15 	stw	r2,-84(fp)
    68a8:	e0bfe817 	ldw	r2,-96(fp)
    68ac:	100490fa 	slli	r2,r2,3
    68b0:	e0ffec15 	stw	r3,-80(fp)
    68b4:	e03fed15 	stw	zero,-76(fp)
    68b8:	e13fec17 	ldw	r4,-80(fp)
    68bc:	2004d77a 	srli	r2,r4,29
    68c0:	e13fed17 	ldw	r4,-76(fp)
    68c4:	200890fa 	slli	r4,r4,3
    68c8:	e13fef15 	stw	r4,-68(fp)
    68cc:	e13fef17 	ldw	r4,-68(fp)
    68d0:	1104b03a 	or	r2,r2,r4
    68d4:	e0bfef15 	stw	r2,-68(fp)
    68d8:	e0bfec17 	ldw	r2,-80(fp)
    68dc:	100490fa 	slli	r2,r2,3
    68e0:	188000c4 	addi	r2,r3,3
    68e4:	1004d0ba 	srli	r2,r2,2
    68e8:	1085883a 	add	r2,r2,r2
    68ec:	1085883a 	add	r2,r2,r2
    68f0:	d8b7c83a 	sub	sp,sp,r2
    68f4:	d805883a 	mov	r2,sp
    68f8:	1005883a 	mov	r2,r2
    68fc:	e0bfc115 	stw	r2,-252(fp)
    btc_hdnode_get_p2pkh_address(&node, chain, str, strsize);
    6900:	e0ffc117 	ldw	r3,-252(fp)
    6904:	e0bfe417 	ldw	r2,-112(fp)
    6908:	1009883a 	mov	r4,r2
    690c:	e0bfc804 	addi	r2,fp,-224
    6910:	200f883a 	mov	r7,r4
    6914:	180d883a 	mov	r6,r3
    6918:	e17fe517 	ldw	r5,-108(fp)
    691c:	1009883a 	mov	r4,r2
    6920:	00429b40 	call	429b4 <btc_hdnode_get_p2pkh_address>

    printf("ext key: %s\n", nodeser);
    6924:	e17fe617 	ldw	r5,-104(fp)
    6928:	01000174 	movhi	r4,5
    692c:	21106104 	addi	r4,r4,16772
    6930:	00467040 	call	46704 <printf>

    size_t privkey_wif_size_bin = 34;
    6934:	00800884 	movi	r2,34
    6938:	e0bfc215 	stw	r2,-248(fp)
    uint8_t pkeybase58c[privkey_wif_size_bin];
    693c:	e0bfc217 	ldw	r2,-248(fp)
    6940:	1007883a 	mov	r3,r2
    6944:	18ffffc4 	addi	r3,r3,-1
    6948:	e0ffc315 	stw	r3,-244(fp)
    694c:	e0bff015 	stw	r2,-64(fp)
    6950:	e03ff115 	stw	zero,-60(fp)
    6954:	e13ff017 	ldw	r4,-64(fp)
    6958:	2006d77a 	srli	r3,r4,29
    695c:	e13ff117 	ldw	r4,-60(fp)
    6960:	202e90fa 	slli	r23,r4,3
    6964:	1deeb03a 	or	r23,r3,r23
    6968:	e0fff017 	ldw	r3,-64(fp)
    696c:	182c90fa 	slli	r22,r3,3
    6970:	e0bff215 	stw	r2,-56(fp)
    6974:	e03ff315 	stw	zero,-52(fp)
    6978:	e13ff217 	ldw	r4,-56(fp)
    697c:	2006d77a 	srli	r3,r4,29
    6980:	e13ff317 	ldw	r4,-52(fp)
    6984:	202a90fa 	slli	r21,r4,3
    6988:	1d6ab03a 	or	r21,r3,r21
    698c:	e0fff217 	ldw	r3,-56(fp)
    6990:	182890fa 	slli	r20,r3,3
    6994:	108000c4 	addi	r2,r2,3
    6998:	1004d0ba 	srli	r2,r2,2
    699c:	1085883a 	add	r2,r2,r2
    69a0:	1085883a 	add	r2,r2,r2
    69a4:	d8b7c83a 	sub	sp,sp,r2
    69a8:	d805883a 	mov	r2,sp
    69ac:	1005883a 	mov	r2,r2
    69b0:	e0bfc415 	stw	r2,-240(fp)
    pkeybase58c[0] = chain->b58prefix_secret_address;
    69b4:	e0bfe517 	ldw	r2,-108(fp)
    69b8:	10c009c3 	ldbu	r3,39(r2)
    69bc:	e0bfc417 	ldw	r2,-240(fp)
    69c0:	10c00005 	stb	r3,0(r2)
    pkeybase58c[33] = 1; /* always use compressed keys */
    69c4:	e0bfc417 	ldw	r2,-240(fp)
    69c8:	00c00044 	movi	r3,1
    69cc:	10c00845 	stb	r3,33(r2)
    size_t privkey_wif_size = 128;
    69d0:	00802004 	movi	r2,128
    69d4:	e0bfc515 	stw	r2,-236(fp)
    char privkey_wif[privkey_wif_size];
    69d8:	e0bfc517 	ldw	r2,-236(fp)
    69dc:	1007883a 	mov	r3,r2
    69e0:	18ffffc4 	addi	r3,r3,-1
    69e4:	e0ffc615 	stw	r3,-232(fp)
    69e8:	e0bff415 	stw	r2,-48(fp)
    69ec:	e03ff515 	stw	zero,-44(fp)
    69f0:	e13ff417 	ldw	r4,-48(fp)
    69f4:	2006d77a 	srli	r3,r4,29
    69f8:	e13ff517 	ldw	r4,-44(fp)
    69fc:	202690fa 	slli	r19,r4,3
    6a00:	1ce6b03a 	or	r19,r3,r19
    6a04:	e0fff417 	ldw	r3,-48(fp)
    6a08:	182490fa 	slli	r18,r3,3
    6a0c:	e0bff615 	stw	r2,-40(fp)
    6a10:	e03ff715 	stw	zero,-36(fp)
    6a14:	e13ff617 	ldw	r4,-40(fp)
    6a18:	2006d77a 	srli	r3,r4,29
    6a1c:	e13ff717 	ldw	r4,-36(fp)
    6a20:	202290fa 	slli	r17,r4,3
    6a24:	1c62b03a 	or	r17,r3,r17
    6a28:	e0fff617 	ldw	r3,-40(fp)
    6a2c:	182090fa 	slli	r16,r3,3
    6a30:	108000c4 	addi	r2,r2,3
    6a34:	1004d0ba 	srli	r2,r2,2
    6a38:	1085883a 	add	r2,r2,r2
    6a3c:	1085883a 	add	r2,r2,r2
    6a40:	d8b7c83a 	sub	sp,sp,r2
    6a44:	d805883a 	mov	r2,sp
    6a48:	1005883a 	mov	r2,r2
    6a4c:	e0bfc715 	stw	r2,-228(fp)
    memcpy(&pkeybase58c[1], node.private_key, BTC_ECKEY_PKEY_LENGTH);
    6a50:	e0bfc417 	ldw	r2,-240(fp)
    6a54:	10800044 	addi	r2,r2,1
    6a58:	1009883a 	mov	r4,r2
    6a5c:	e0bfd304 	addi	r2,fp,-180
    6a60:	00c00804 	movi	r3,32
    6a64:	180d883a 	mov	r6,r3
    6a68:	100b883a 	mov	r5,r2
    6a6c:	00463980 	call	46398 <memcpy>
    assert(btc_base58_encode_check(pkeybase58c, privkey_wif_size_bin, privkey_wif, privkey_wif_size) != 0);
    6a70:	e0bfc417 	ldw	r2,-240(fp)
    6a74:	e0ffc217 	ldw	r3,-248(fp)
    6a78:	e13fc717 	ldw	r4,-228(fp)
    6a7c:	e17fc517 	ldw	r5,-236(fp)
    6a80:	280f883a 	mov	r7,r5
    6a84:	200d883a 	mov	r6,r4
    6a88:	180b883a 	mov	r5,r3
    6a8c:	1009883a 	mov	r4,r2
    6a90:	0041be40 	call	41be4 <btc_base58_encode_check>
    6a94:	1000081e 	bne	r2,zero,6ab8 <hd_print_node+0x2b4>
    6a98:	01c00174 	movhi	r7,5
    6a9c:	39d06504 	addi	r7,r7,16788
    6aa0:	01800174 	movhi	r6,5
    6aa4:	3190ae04 	addi	r6,r6,17080
    6aa8:	01401d04 	movi	r5,116
    6aac:	01000174 	movhi	r4,5
    6ab0:	21104904 	addi	r4,r4,16676
    6ab4:	0045fec0 	call	45fec <__assert_func>
    if (btc_hdnode_has_privkey(&node)) {
    6ab8:	e0bfc804 	addi	r2,fp,-224
    6abc:	1009883a 	mov	r4,r2
    6ac0:	004305c0 	call	4305c <btc_hdnode_has_privkey>
    6ac4:	10803fcc 	andi	r2,r2,255
    6ac8:	10000526 	beq	r2,zero,6ae0 <hd_print_node+0x2dc>
        printf("privatekey WIF: %s\n", privkey_wif);
    6acc:	e0bfc717 	ldw	r2,-228(fp)
    6ad0:	100b883a 	mov	r5,r2
    6ad4:	01000174 	movhi	r4,5
    6ad8:	21107d04 	addi	r4,r4,16884
    6adc:	00467040 	call	46704 <printf>
    }

    printf("depth: %d\n", node.depth);
    6ae0:	e0bfc817 	ldw	r2,-224(fp)
    6ae4:	100b883a 	mov	r5,r2
    6ae8:	01000174 	movhi	r4,5
    6aec:	21108204 	addi	r4,r4,16904
    6af0:	00467040 	call	46704 <printf>
    printf("child index: %d\n", node.child_num);
    6af4:	e0bfca17 	ldw	r2,-216(fp)
    6af8:	100b883a 	mov	r5,r2
    6afc:	01000174 	movhi	r4,5
    6b00:	21108504 	addi	r4,r4,16916
    6b04:	00467040 	call	46704 <printf>
    printf("p2pkh address: %s\n", str);
    6b08:	e0bfc117 	ldw	r2,-252(fp)
    6b0c:	100b883a 	mov	r5,r2
    6b10:	01000174 	movhi	r4,5
    6b14:	21108a04 	addi	r4,r4,16936
    6b18:	00467040 	call	46704 <printf>
    printf("p2wpkh address: %s\n", str);
    6b1c:	e0bfc117 	ldw	r2,-252(fp)
    6b20:	100b883a 	mov	r5,r2
    6b24:	01000174 	movhi	r4,5
    6b28:	21108f04 	addi	r4,r4,16956
    6b2c:	00467040 	call	46704 <printf>

    if (!btc_hdnode_get_pub_hex(&node, str, &strsize))
    6b30:	e0ffc117 	ldw	r3,-252(fp)
    6b34:	e13fe404 	addi	r4,fp,-112
    6b38:	e0bfc804 	addi	r2,fp,-224
    6b3c:	200d883a 	mov	r6,r4
    6b40:	180b883a 	mov	r5,r3
    6b44:	1009883a 	mov	r4,r2
    6b48:	0042a1c0 	call	42a1c <btc_hdnode_get_pub_hex>
    6b4c:	10803fcc 	andi	r2,r2,255
    6b50:	1000021e 	bne	r2,zero,6b5c <hd_print_node+0x358>
        return false;
    6b54:	0005883a 	mov	r2,zero
    6b58:	00001606 	br	6bb4 <hd_print_node+0x3b0>
    printf("pubkey hex: %s\n", str);
    6b5c:	e0bfc117 	ldw	r2,-252(fp)
    6b60:	100b883a 	mov	r5,r2
    6b64:	01000174 	movhi	r4,5
    6b68:	21109404 	addi	r4,r4,16976
    6b6c:	00467040 	call	46704 <printf>

    strsize = 128;
    6b70:	00802004 	movi	r2,128
    6b74:	e0bfe415 	stw	r2,-112(fp)
    btc_hdnode_serialize_public(&node, chain, str, strsize);
    6b78:	e0ffc117 	ldw	r3,-252(fp)
    6b7c:	e0bfe417 	ldw	r2,-112(fp)
    6b80:	1009883a 	mov	r4,r2
    6b84:	e0bfc804 	addi	r2,fp,-224
    6b88:	200f883a 	mov	r7,r4
    6b8c:	180d883a 	mov	r6,r3
    6b90:	e17fe517 	ldw	r5,-108(fp)
    6b94:	1009883a 	mov	r4,r2
    6b98:	00428a40 	call	428a4 <btc_hdnode_serialize_public>
    printf("extended pubkey: %s\n", str);
    6b9c:	e0bfc117 	ldw	r2,-252(fp)
    6ba0:	100b883a 	mov	r5,r2
    6ba4:	01000174 	movhi	r4,5
    6ba8:	21109804 	addi	r4,r4,16992
    6bac:	00467040 	call	46704 <printf>
    return true;
    6bb0:	00800044 	movi	r2,1
    6bb4:	e6ffe717 	ldw	sp,-100(fp)
}
    6bb8:	e6fff804 	addi	sp,fp,-32
    6bbc:	dfc00917 	ldw	ra,36(sp)
    6bc0:	df000817 	ldw	fp,32(sp)
    6bc4:	ddc00717 	ldw	r23,28(sp)
    6bc8:	dd800617 	ldw	r22,24(sp)
    6bcc:	dd400517 	ldw	r21,20(sp)
    6bd0:	dd000417 	ldw	r20,16(sp)
    6bd4:	dcc00317 	ldw	r19,12(sp)
    6bd8:	dc800217 	ldw	r18,8(sp)
    6bdc:	dc400117 	ldw	r17,4(sp)
    6be0:	dc000017 	ldw	r16,0(sp)
    6be4:	dec00a04 	addi	sp,sp,40
    6be8:	f800283a 	ret

00006bec <hd_derive>:

btc_bool hd_derive(const btc_chainparams* chain, const char* masterkey, const char* keypath, char* extkeyout, size_t extkeyout_size)
{
    6bec:	deffc004 	addi	sp,sp,-256
    6bf0:	dfc03f15 	stw	ra,252(sp)
    6bf4:	df003e15 	stw	fp,248(sp)
    6bf8:	df003e04 	addi	fp,sp,248
    6bfc:	e13ffc15 	stw	r4,-16(fp)
    6c00:	e17ffd15 	stw	r5,-12(fp)
    6c04:	e1bffe15 	stw	r6,-8(fp)
    6c08:	e1ffff15 	stw	r7,-4(fp)
    if (!keypath || !masterkey || !extkeyout) {
    6c0c:	e0bffe17 	ldw	r2,-8(fp)
    6c10:	10000426 	beq	r2,zero,6c24 <hd_derive+0x38>
    6c14:	e0bffd17 	ldw	r2,-12(fp)
    6c18:	10000226 	beq	r2,zero,6c24 <hd_derive+0x38>
    6c1c:	e0bfff17 	ldw	r2,-4(fp)
    6c20:	1000021e 	bne	r2,zero,6c2c <hd_derive+0x40>
        return false;
    6c24:	0005883a 	mov	r2,zero
    6c28:	00003506 	br	6d00 <hd_derive+0x114>
    }
    btc_hdnode node, nodenew;
    if (!btc_hdnode_deserialize(masterkey, chain, &node))
    6c2c:	e0bfc404 	addi	r2,fp,-240
    6c30:	100d883a 	mov	r6,r2
    6c34:	e17ffc17 	ldw	r5,-16(fp)
    6c38:	e13ffd17 	ldw	r4,-12(fp)
    6c3c:	0042a880 	call	42a88 <btc_hdnode_deserialize>
    6c40:	10803fcc 	andi	r2,r2,255
    6c44:	1000021e 	bne	r2,zero,6c50 <hd_derive+0x64>
        return false;
    6c48:	0005883a 	mov	r2,zero
    6c4c:	00002c06 	br	6d00 <hd_derive+0x114>

    //check if we only have the publickey
    bool pubckd = !btc_hdnode_has_privkey(&node);
    6c50:	e0bfc404 	addi	r2,fp,-240
    6c54:	1009883a 	mov	r4,r2
    6c58:	004305c0 	call	4305c <btc_hdnode_has_privkey>
    6c5c:	10803fcc 	andi	r2,r2,255
    6c60:	1005003a 	cmpeq	r2,r2,zero
    6c64:	e0bfc305 	stb	r2,-244(fp)

    //derive child key, use pubckd or privckd
    if (!btc_hd_generate_key(&nodenew, keypath, pubckd ? node.public_key : node.private_key, node.chain_code, pubckd))
    6c68:	e0bfc303 	ldbu	r2,-244(fp)
    6c6c:	10000326 	beq	r2,zero,6c7c <hd_derive+0x90>
    6c70:	e0bfc404 	addi	r2,fp,-240
    6c74:	10801304 	addi	r2,r2,76
    6c78:	00000206 	br	6c84 <hd_derive+0x98>
    6c7c:	e0bfc404 	addi	r2,fp,-240
    6c80:	10800b04 	addi	r2,r2,44
    6c84:	e0ffc303 	ldbu	r3,-244(fp)
    6c88:	e13fc404 	addi	r4,fp,-240
    6c8c:	21400304 	addi	r5,r4,12
    6c90:	e13fe004 	addi	r4,fp,-128
    6c94:	d8c00015 	stw	r3,0(sp)
    6c98:	280f883a 	mov	r7,r5
    6c9c:	100d883a 	mov	r6,r2
    6ca0:	e17ffe17 	ldw	r5,-8(fp)
    6ca4:	0042cbc0 	call	42cbc <btc_hd_generate_key>
    6ca8:	10803fcc 	andi	r2,r2,255
    6cac:	1000021e 	bne	r2,zero,6cb8 <hd_derive+0xcc>
        return false;
    6cb0:	0005883a 	mov	r2,zero
    6cb4:	00001206 	br	6d00 <hd_derive+0x114>

    if (pubckd)
    6cb8:	e0bfc303 	ldbu	r2,-244(fp)
    6cbc:	10000826 	beq	r2,zero,6ce0 <hd_derive+0xf4>
        btc_hdnode_serialize_public(&nodenew, chain, extkeyout, extkeyout_size);
    6cc0:	e0c00217 	ldw	r3,8(fp)
    6cc4:	e0bfe004 	addi	r2,fp,-128
    6cc8:	180f883a 	mov	r7,r3
    6ccc:	e1bfff17 	ldw	r6,-4(fp)
    6cd0:	e17ffc17 	ldw	r5,-16(fp)
    6cd4:	1009883a 	mov	r4,r2
    6cd8:	00428a40 	call	428a4 <btc_hdnode_serialize_public>
    6cdc:	00000706 	br	6cfc <hd_derive+0x110>
    else
        btc_hdnode_serialize_private(&nodenew, chain, extkeyout, extkeyout_size);
    6ce0:	e0c00217 	ldw	r3,8(fp)
    6ce4:	e0bfe004 	addi	r2,fp,-128
    6ce8:	180f883a 	mov	r7,r3
    6cec:	e1bfff17 	ldw	r6,-4(fp)
    6cf0:	e17ffc17 	ldw	r5,-16(fp)
    6cf4:	1009883a 	mov	r4,r2
    6cf8:	00429000 	call	42900 <btc_hdnode_serialize_private>
    return true;
    6cfc:	00800044 	movi	r2,1
}
    6d00:	e037883a 	mov	sp,fp
    6d04:	dfc00117 	ldw	ra,4(sp)
    6d08:	df000017 	ldw	fp,0(sp)
    6d0c:	dec00204 	addi	sp,sp,8
    6d10:	f800283a 	ret

00006d14 <btc_hash>:
    memcpy(hash_dest, hash_src, BTC_HASH_LENGTH);
}

//bitcoin double sha256 hash
LIBBTC_API static inline void btc_hash(const unsigned char* datain, size_t length, uint256 hashout)
{
    6d14:	defffb04 	addi	sp,sp,-20
    6d18:	dfc00415 	stw	ra,16(sp)
    6d1c:	df000315 	stw	fp,12(sp)
    6d20:	df000304 	addi	fp,sp,12
    6d24:	e13ffd15 	stw	r4,-12(fp)
    6d28:	e17ffe15 	stw	r5,-8(fp)
    6d2c:	e1bfff15 	stw	r6,-4(fp)
    sha256_Raw(datain, length, hashout);
    6d30:	e1bfff17 	ldw	r6,-4(fp)
    6d34:	e17ffe17 	ldw	r5,-8(fp)
    6d38:	e13ffd17 	ldw	r4,-12(fp)
    6d3c:	00041c80 	call	41c8 <sha256_Raw>
    sha256_Raw(hashout, SHA256_DIGEST_LENGTH, hashout);
    6d40:	e1bfff17 	ldw	r6,-4(fp)
    6d44:	01400804 	movi	r5,32
    6d48:	e13fff17 	ldw	r4,-4(fp)
    6d4c:	00041c80 	call	41c8 <sha256_Raw>
}
    6d50:	0001883a 	nop
    6d54:	e037883a 	mov	sp,fp
    6d58:	dfc00117 	ldw	ra,4(sp)
    6d5c:	df000017 	ldw	fp,0(sp)
    6d60:	dec00204 	addi	sp,sp,8
    6d64:	f800283a 	ret

00006d68 <btc_hash_sngl_sha256>:

//single sha256 hash
LIBBTC_API static inline void btc_hash_sngl_sha256(const unsigned char* datain, size_t length, uint256 hashout)
{
    6d68:	defffb04 	addi	sp,sp,-20
    6d6c:	dfc00415 	stw	ra,16(sp)
    6d70:	df000315 	stw	fp,12(sp)
    6d74:	df000304 	addi	fp,sp,12
    6d78:	e13ffd15 	stw	r4,-12(fp)
    6d7c:	e17ffe15 	stw	r5,-8(fp)
    6d80:	e1bfff15 	stw	r6,-4(fp)
    sha256_Raw(datain, length, hashout);
    6d84:	e1bfff17 	ldw	r6,-4(fp)
    6d88:	e17ffe17 	ldw	r5,-8(fp)
    6d8c:	e13ffd17 	ldw	r4,-12(fp)
    6d90:	00041c80 	call	41c8 <sha256_Raw>
}
    6d94:	0001883a 	nop
    6d98:	e037883a 	mov	sp,fp
    6d9c:	dfc00117 	ldw	ra,4(sp)
    6da0:	df000017 	ldw	fp,0(sp)
    6da4:	dec00204 	addi	sp,sp,8
    6da8:	f800283a 	ret

00006dac <btc_privkey_init>:
#include "..\include\btc\segwit_addr.h"
#include "..\include\btc\utils.h"


void btc_privkey_init(btc_key* privkey)
{
    6dac:	defffd04 	addi	sp,sp,-12
    6db0:	dfc00215 	stw	ra,8(sp)
    6db4:	df000115 	stw	fp,4(sp)
    6db8:	df000104 	addi	fp,sp,4
    6dbc:	e13fff15 	stw	r4,-4(fp)
    memset(&privkey->privkey, 0, BTC_ECKEY_PKEY_LENGTH);
    6dc0:	e0bfff17 	ldw	r2,-4(fp)
    6dc4:	01800804 	movi	r6,32
    6dc8:	000b883a 	mov	r5,zero
    6dcc:	1009883a 	mov	r4,r2
    6dd0:	00464200 	call	46420 <memset>
}
    6dd4:	0001883a 	nop
    6dd8:	e037883a 	mov	sp,fp
    6ddc:	dfc00117 	ldw	ra,4(sp)
    6de0:	df000017 	ldw	fp,0(sp)
    6de4:	dec00204 	addi	sp,sp,8
    6de8:	f800283a 	ret

00006dec <btc_privkey_is_valid>:


btc_bool btc_privkey_is_valid(const btc_key* privkey)
{
    6dec:	defffd04 	addi	sp,sp,-12
    6df0:	dfc00215 	stw	ra,8(sp)
    6df4:	df000115 	stw	fp,4(sp)
    6df8:	df000104 	addi	fp,sp,4
    6dfc:	e13fff15 	stw	r4,-4(fp)
    if (!privkey) {
    6e00:	e0bfff17 	ldw	r2,-4(fp)
    6e04:	1000021e 	bne	r2,zero,6e10 <btc_privkey_is_valid+0x24>
        return false;
    6e08:	0005883a 	mov	r2,zero
    6e0c:	00000306 	br	6e1c <btc_privkey_is_valid+0x30>
    }
    return btc_ecc_verify_privatekey(privkey->privkey);
    6e10:	e0bfff17 	ldw	r2,-4(fp)
    6e14:	1009883a 	mov	r4,r2
    6e18:	0007bc00 	call	7bc0 <btc_ecc_verify_privatekey>
}
    6e1c:	e037883a 	mov	sp,fp
    6e20:	dfc00117 	ldw	ra,4(sp)
    6e24:	df000017 	ldw	fp,0(sp)
    6e28:	dec00204 	addi	sp,sp,8
    6e2c:	f800283a 	ret

00006e30 <btc_privkey_cleanse>:


void btc_privkey_cleanse(btc_key* privkey)
{
    6e30:	defffd04 	addi	sp,sp,-12
    6e34:	dfc00215 	stw	ra,8(sp)
    6e38:	df000115 	stw	fp,4(sp)
    6e3c:	df000104 	addi	fp,sp,4
    6e40:	e13fff15 	stw	r4,-4(fp)
    btc_mem_zero(&privkey->privkey, BTC_ECKEY_PKEY_LENGTH);
    6e44:	e0bfff17 	ldw	r2,-4(fp)
    6e48:	01400804 	movi	r5,32
    6e4c:	1009883a 	mov	r4,r2
    6e50:	00085380 	call	8538 <btc_mem_zero>
}
    6e54:	0001883a 	nop
    6e58:	e037883a 	mov	sp,fp
    6e5c:	dfc00117 	ldw	ra,4(sp)
    6e60:	df000017 	ldw	fp,0(sp)
    6e64:	dec00204 	addi	sp,sp,8
    6e68:	f800283a 	ret

00006e6c <btc_privkey_gen>:


void btc_privkey_gen(btc_key* privkey)
{
    6e6c:	defffd04 	addi	sp,sp,-12
    6e70:	dfc00215 	stw	ra,8(sp)
    6e74:	df000115 	stw	fp,4(sp)
    6e78:	df000104 	addi	fp,sp,4
    6e7c:	e13fff15 	stw	r4,-4(fp)
    if (privkey == NULL)
    6e80:	e0bfff17 	ldw	r2,-4(fp)
    6e84:	10001526 	beq	r2,zero,6edc <btc_privkey_gen+0x70>
        return;

    do {
        assert(btc_random_bytes(privkey->privkey, BTC_ECKEY_PKEY_LENGTH, 0));
    6e88:	e0bfff17 	ldw	r2,-4(fp)
    6e8c:	000d883a 	mov	r6,zero
    6e90:	01400804 	movi	r5,32
    6e94:	1009883a 	mov	r4,r2
    6e98:	00086300 	call	8630 <btc_random_bytes>
    6e9c:	10803fcc 	andi	r2,r2,255
    6ea0:	1000081e 	bne	r2,zero,6ec4 <btc_privkey_gen+0x58>
    6ea4:	01c00174 	movhi	r7,5
    6ea8:	39d0b204 	addi	r7,r7,17096
    6eac:	01800174 	movhi	r6,5
    6eb0:	3190e604 	addi	r6,r6,17304
    6eb4:	01401204 	movi	r5,72
    6eb8:	01000174 	movhi	r4,5
    6ebc:	2110c204 	addi	r4,r4,17160
    6ec0:	0045fec0 	call	45fec <__assert_func>
    } while (btc_ecc_verify_privatekey(privkey->privkey) == 0);
    6ec4:	e0bfff17 	ldw	r2,-4(fp)
    6ec8:	1009883a 	mov	r4,r2
    6ecc:	0007bc00 	call	7bc0 <btc_ecc_verify_privatekey>
    6ed0:	10803fcc 	andi	r2,r2,255
    6ed4:	103fec26 	beq	r2,zero,6e88 <__alt_mem_epcs_flash_controller+0xfdffde88>
    6ed8:	00000106 	br	6ee0 <btc_privkey_gen+0x74>


void btc_privkey_gen(btc_key* privkey)
{
    if (privkey == NULL)
        return;
    6edc:	0001883a 	nop

    do {
        assert(btc_random_bytes(privkey->privkey, BTC_ECKEY_PKEY_LENGTH, 0));
    } while (btc_ecc_verify_privatekey(privkey->privkey) == 0);
}
    6ee0:	e037883a 	mov	sp,fp
    6ee4:	dfc00117 	ldw	ra,4(sp)
    6ee8:	df000017 	ldw	fp,0(sp)
    6eec:	dec00204 	addi	sp,sp,8
    6ef0:	f800283a 	ret

00006ef4 <btc_privkey_verify_pubkey>:


btc_bool btc_privkey_verify_pubkey(btc_key* privkey, btc_pubkey* pubkey)
{
    6ef4:	deffd804 	addi	sp,sp,-160
    6ef8:	dfc02715 	stw	ra,156(sp)
    6efc:	df002615 	stw	fp,152(sp)
    6f00:	df002604 	addi	fp,sp,152
    6f04:	e13ffe15 	stw	r4,-8(fp)
    6f08:	e17fff15 	stw	r5,-4(fp)
    uint256 rnddata, hash;
    assert(btc_random_bytes(rnddata, BTC_HASH_LENGTH, 0));
    6f0c:	000d883a 	mov	r6,zero
    6f10:	01400804 	movi	r5,32
    6f14:	e13fda04 	addi	r4,fp,-152
    6f18:	00086300 	call	8630 <btc_random_bytes>
    6f1c:	10803fcc 	andi	r2,r2,255
    6f20:	1000081e 	bne	r2,zero,6f44 <btc_privkey_verify_pubkey+0x50>
    6f24:	01c00174 	movhi	r7,5
    6f28:	39d0c704 	addi	r7,r7,17180
    6f2c:	01800174 	movhi	r6,5
    6f30:	3190ea04 	addi	r6,r6,17320
    6f34:	01401404 	movi	r5,80
    6f38:	01000174 	movhi	r4,5
    6f3c:	2110c204 	addi	r4,r4,17160
    6f40:	0045fec0 	call	45fec <__assert_func>
    btc_hash(rnddata, BTC_HASH_LENGTH, hash);
    6f44:	e0bfe204 	addi	r2,fp,-120
    6f48:	100d883a 	mov	r6,r2
    6f4c:	01400804 	movi	r5,32
    6f50:	e13fda04 	addi	r4,fp,-152
    6f54:	0006d140 	call	6d14 <btc_hash>

    unsigned char sig[74];
    size_t siglen = 74;
    6f58:	00801284 	movi	r2,74
    6f5c:	e0bffd15 	stw	r2,-12(fp)

    if (!btc_key_sign_hash(privkey, hash, sig, &siglen))
    6f60:	e13ffd04 	addi	r4,fp,-12
    6f64:	e0ffea04 	addi	r3,fp,-88
    6f68:	e0bfe204 	addi	r2,fp,-120
    6f6c:	200f883a 	mov	r7,r4
    6f70:	180d883a 	mov	r6,r3
    6f74:	100b883a 	mov	r5,r2
    6f78:	e13ffe17 	ldw	r4,-8(fp)
    6f7c:	00074d00 	call	74d0 <btc_key_sign_hash>
    6f80:	10803fcc 	andi	r2,r2,255
    6f84:	1000021e 	bne	r2,zero,6f90 <btc_privkey_verify_pubkey+0x9c>
        return false;
    6f88:	0005883a 	mov	r2,zero
    6f8c:	00000906 	br	6fb4 <btc_privkey_verify_pubkey+0xc0>

    return btc_pubkey_verify_sig(pubkey, hash, sig, siglen);
    6f90:	e0bffd17 	ldw	r2,-12(fp)
    6f94:	1009883a 	mov	r4,r2
    6f98:	e0ffea04 	addi	r3,fp,-88
    6f9c:	e0bfe204 	addi	r2,fp,-120
    6fa0:	200f883a 	mov	r7,r4
    6fa4:	180d883a 	mov	r6,r3
    6fa8:	100b883a 	mov	r5,r2
    6fac:	e13fff17 	ldw	r4,-4(fp)
    6fb0:	00076800 	call	7680 <btc_pubkey_verify_sig>
}
    6fb4:	e037883a 	mov	sp,fp
    6fb8:	dfc00117 	ldw	ra,4(sp)
    6fbc:	df000017 	ldw	fp,0(sp)
    6fc0:	dec00204 	addi	sp,sp,8
    6fc4:	f800283a 	ret

00006fc8 <btc_privkey_encode_wif>:

void btc_privkey_encode_wif(const btc_key* privkey, const btc_chainparams* chain, char *privkey_wif, size_t *strsize_inout) {
    6fc8:	defff104 	addi	sp,sp,-60
    6fcc:	dfc00e15 	stw	ra,56(sp)
    6fd0:	df000d15 	stw	fp,52(sp)
    6fd4:	df000d04 	addi	fp,sp,52
    6fd8:	e13ffc15 	stw	r4,-16(fp)
    6fdc:	e17ffd15 	stw	r5,-12(fp)
    6fe0:	e1bffe15 	stw	r6,-8(fp)
    6fe4:	e1ffff15 	stw	r7,-4(fp)
    uint8_t pkeybase58c[34];
    pkeybase58c[0] = chain->b58prefix_secret_address;
    6fe8:	e0bffd17 	ldw	r2,-12(fp)
    6fec:	108009c3 	ldbu	r2,39(r2)
    6ff0:	e0bff305 	stb	r2,-52(fp)
    pkeybase58c[33] = 1; /* always use compressed keys */
    6ff4:	00800044 	movi	r2,1
    6ff8:	e0bffb45 	stb	r2,-19(fp)

    memcpy(&pkeybase58c[1], privkey->privkey, BTC_ECKEY_PKEY_LENGTH);
    6ffc:	e0fffc17 	ldw	r3,-16(fp)
    7000:	e0bff344 	addi	r2,fp,-51
    7004:	01800804 	movi	r6,32
    7008:	180b883a 	mov	r5,r3
    700c:	1009883a 	mov	r4,r2
    7010:	00463980 	call	46398 <memcpy>
    assert(btc_base58_encode_check(pkeybase58c, 34, privkey_wif, *strsize_inout) != 0);
    7014:	e0bfff17 	ldw	r2,-4(fp)
    7018:	10800017 	ldw	r2,0(r2)
    701c:	100f883a 	mov	r7,r2
    7020:	e1bffe17 	ldw	r6,-8(fp)
    7024:	01400884 	movi	r5,34
    7028:	e13ff304 	addi	r4,fp,-52
    702c:	0041be40 	call	41be4 <btc_base58_encode_check>
    7030:	1000081e 	bne	r2,zero,7054 <btc_privkey_encode_wif+0x8c>
    7034:	01c00174 	movhi	r7,5
    7038:	39d0d304 	addi	r7,r7,17228
    703c:	01800174 	movhi	r6,5
    7040:	3190f104 	addi	r6,r6,17348
    7044:	01401884 	movi	r5,98
    7048:	01000174 	movhi	r4,5
    704c:	2110c204 	addi	r4,r4,17160
    7050:	0045fec0 	call	45fec <__assert_func>
    btc_mem_zero(&pkeybase58c, 34);
    7054:	01400884 	movi	r5,34
    7058:	e13ff304 	addi	r4,fp,-52
    705c:	00085380 	call	8538 <btc_mem_zero>
}
    7060:	0001883a 	nop
    7064:	e037883a 	mov	sp,fp
    7068:	dfc00117 	ldw	ra,4(sp)
    706c:	df000017 	ldw	fp,0(sp)
    7070:	dec00204 	addi	sp,sp,8
    7074:	f800283a 	ret

00007078 <btc_privkey_decode_wif>:

btc_bool btc_privkey_decode_wif(const char *privkey_wif, const btc_chainparams* chain, btc_key* privkey) {
    7078:	deffee04 	addi	sp,sp,-72
    707c:	dfc01115 	stw	ra,68(sp)
    7080:	df001015 	stw	fp,64(sp)
    7084:	ddc00f15 	stw	r23,60(sp)
    7088:	dd800e15 	stw	r22,56(sp)
    708c:	dd400d15 	stw	r21,52(sp)
    7090:	dd000c15 	stw	r20,48(sp)
    7094:	dcc00b15 	stw	r19,44(sp)
    7098:	dc800a15 	stw	r18,40(sp)
    709c:	dc400915 	stw	r17,36(sp)
    70a0:	dc000815 	stw	r16,32(sp)
    70a4:	df001004 	addi	fp,sp,64
    70a8:	e13ff315 	stw	r4,-52(fp)
    70ac:	e17ff415 	stw	r5,-48(fp)
    70b0:	e1bff515 	stw	r6,-44(fp)
    70b4:	d805883a 	mov	r2,sp
    70b8:	e0bff615 	stw	r2,-40(fp)

    if (!privkey_wif || strlen(privkey_wif) < 50) {
    70bc:	e0bff317 	ldw	r2,-52(fp)
    70c0:	10000426 	beq	r2,zero,70d4 <btc_privkey_decode_wif+0x5c>
    70c4:	e13ff317 	ldw	r4,-52(fp)
    70c8:	0046c3c0 	call	46c3c <strlen>
    70cc:	10800ca8 	cmpgeui	r2,r2,50
    70d0:	1000021e 	bne	r2,zero,70dc <btc_privkey_decode_wif+0x64>
        return false;
    70d4:	0005883a 	mov	r2,zero
    70d8:	00004006 	br	71dc <btc_privkey_decode_wif+0x164>
    }
    uint8_t privkey_data[strlen(privkey_wif)];
    70dc:	e13ff317 	ldw	r4,-52(fp)
    70e0:	0046c3c0 	call	46c3c <strlen>
    70e4:	e0bff715 	stw	r2,-36(fp)
    70e8:	e0bff717 	ldw	r2,-36(fp)
    70ec:	10bfffc4 	addi	r2,r2,-1
    70f0:	e0bff015 	stw	r2,-64(fp)
    70f4:	e5bff717 	ldw	r22,-36(fp)
    70f8:	002f883a 	mov	r23,zero
    70fc:	b004d77a 	srli	r2,r22,29
    7100:	b82690fa 	slli	r19,r23,3
    7104:	14e6b03a 	or	r19,r2,r19
    7108:	b02490fa 	slli	r18,r22,3
    710c:	e53ff717 	ldw	r20,-36(fp)
    7110:	002b883a 	mov	r21,zero
    7114:	a004d77a 	srli	r2,r20,29
    7118:	a82290fa 	slli	r17,r21,3
    711c:	1462b03a 	or	r17,r2,r17
    7120:	a02090fa 	slli	r16,r20,3
    7124:	e0fff717 	ldw	r3,-36(fp)
    7128:	188000c4 	addi	r2,r3,3
    712c:	1004d0ba 	srli	r2,r2,2
    7130:	1085883a 	add	r2,r2,r2
    7134:	1085883a 	add	r2,r2,r2
    7138:	d8b7c83a 	sub	sp,sp,r2
    713c:	d805883a 	mov	r2,sp
    7140:	1005883a 	mov	r2,r2
    7144:	e0bff115 	stw	r2,-60(fp)
    memset(privkey_data, 0, sizeof(privkey_data));
    7148:	e0bff117 	ldw	r2,-60(fp)
    714c:	e1bff717 	ldw	r6,-36(fp)
    7150:	000b883a 	mov	r5,zero
    7154:	1009883a 	mov	r4,r2
    7158:	00464200 	call	46420 <memset>
    size_t outlen = 0;
    715c:	e03ff215 	stw	zero,-56(fp)

    outlen = btc_base58_decode_check(privkey_wif, privkey_data, sizeof(privkey_data));
    7160:	e0bff117 	ldw	r2,-60(fp)
    7164:	e1bff717 	ldw	r6,-36(fp)
    7168:	100b883a 	mov	r5,r2
    716c:	e13ff317 	ldw	r4,-52(fp)
    7170:	0041d640 	call	41d64 <btc_base58_decode_check>
    7174:	e0bff215 	stw	r2,-56(fp)
    if (!outlen) {
    7178:	e0bff217 	ldw	r2,-56(fp)
    717c:	1000021e 	bne	r2,zero,7188 <btc_privkey_decode_wif+0x110>
        return false;
    7180:	0005883a 	mov	r2,zero
    7184:	00001506 	br	71dc <btc_privkey_decode_wif+0x164>
    }
    if (privkey_data[0] != chain->b58prefix_secret_address) {
    7188:	e0bff117 	ldw	r2,-60(fp)
    718c:	10c00003 	ldbu	r3,0(r2)
    7190:	e0bff417 	ldw	r2,-48(fp)
    7194:	108009c3 	ldbu	r2,39(r2)
    7198:	18c03fcc 	andi	r3,r3,255
    719c:	10803fcc 	andi	r2,r2,255
    71a0:	18800226 	beq	r3,r2,71ac <btc_privkey_decode_wif+0x134>
        return false;
    71a4:	0005883a 	mov	r2,zero
    71a8:	00000c06 	br	71dc <btc_privkey_decode_wif+0x164>
    }
    memcpy(privkey->privkey, &privkey_data[1], BTC_ECKEY_PKEY_LENGTH);
    71ac:	e0fff517 	ldw	r3,-44(fp)
    71b0:	e0bff117 	ldw	r2,-60(fp)
    71b4:	10800044 	addi	r2,r2,1
    71b8:	01800804 	movi	r6,32
    71bc:	100b883a 	mov	r5,r2
    71c0:	1809883a 	mov	r4,r3
    71c4:	00463980 	call	46398 <memcpy>
    btc_mem_zero(&privkey_data, sizeof(privkey_data));
    71c8:	e0bff117 	ldw	r2,-60(fp)
    71cc:	e17ff717 	ldw	r5,-36(fp)
    71d0:	1009883a 	mov	r4,r2
    71d4:	00085380 	call	8538 <btc_mem_zero>
    return true;
    71d8:	00800044 	movi	r2,1
    71dc:	e6fff617 	ldw	sp,-40(fp)
}
    71e0:	e6fff804 	addi	sp,fp,-32
    71e4:	dfc00917 	ldw	ra,36(sp)
    71e8:	df000817 	ldw	fp,32(sp)
    71ec:	ddc00717 	ldw	r23,28(sp)
    71f0:	dd800617 	ldw	r22,24(sp)
    71f4:	dd400517 	ldw	r21,20(sp)
    71f8:	dd000417 	ldw	r20,16(sp)
    71fc:	dcc00317 	ldw	r19,12(sp)
    7200:	dc800217 	ldw	r18,8(sp)
    7204:	dc400117 	ldw	r17,4(sp)
    7208:	dc000017 	ldw	r16,0(sp)
    720c:	dec00a04 	addi	sp,sp,40
    7210:	f800283a 	ret

00007214 <btc_pubkey_init>:

void btc_pubkey_init(btc_pubkey* pubkey)
{
    7214:	defffd04 	addi	sp,sp,-12
    7218:	dfc00215 	stw	ra,8(sp)
    721c:	df000115 	stw	fp,4(sp)
    7220:	df000104 	addi	fp,sp,4
    7224:	e13fff15 	stw	r4,-4(fp)
    if (pubkey == NULL)
    7228:	e0bfff17 	ldw	r2,-4(fp)
    722c:	10000926 	beq	r2,zero,7254 <btc_pubkey_init+0x40>
        return;

    memset(pubkey->pubkey, 0, BTC_ECKEY_UNCOMPRESSED_LENGTH);
    7230:	e0bfff17 	ldw	r2,-4(fp)
    7234:	10800044 	addi	r2,r2,1
    7238:	01801044 	movi	r6,65
    723c:	000b883a 	mov	r5,zero
    7240:	1009883a 	mov	r4,r2
    7244:	00464200 	call	46420 <memset>
    pubkey->compressed = false;
    7248:	e0bfff17 	ldw	r2,-4(fp)
    724c:	10000005 	stb	zero,0(r2)
    7250:	00000106 	br	7258 <btc_pubkey_init+0x44>
}

void btc_pubkey_init(btc_pubkey* pubkey)
{
    if (pubkey == NULL)
        return;
    7254:	0001883a 	nop

    memset(pubkey->pubkey, 0, BTC_ECKEY_UNCOMPRESSED_LENGTH);
    pubkey->compressed = false;
}
    7258:	e037883a 	mov	sp,fp
    725c:	dfc00117 	ldw	ra,4(sp)
    7260:	df000017 	ldw	fp,0(sp)
    7264:	dec00204 	addi	sp,sp,8
    7268:	f800283a 	ret

0000726c <btc_pubkey_get_length>:


unsigned int btc_pubkey_get_length(unsigned char ch_header)
{
    726c:	defffe04 	addi	sp,sp,-8
    7270:	df000115 	stw	fp,4(sp)
    7274:	df000104 	addi	fp,sp,4
    7278:	2005883a 	mov	r2,r4
    727c:	e0bfff05 	stb	r2,-4(fp)
    if (ch_header == 2 || ch_header == 3)
    7280:	e0bfff03 	ldbu	r2,-4(fp)
    7284:	108000a0 	cmpeqi	r2,r2,2
    7288:	1000031e 	bne	r2,zero,7298 <btc_pubkey_get_length+0x2c>
    728c:	e0bfff03 	ldbu	r2,-4(fp)
    7290:	108000d8 	cmpnei	r2,r2,3
    7294:	1000021e 	bne	r2,zero,72a0 <btc_pubkey_get_length+0x34>
        return BTC_ECKEY_COMPRESSED_LENGTH;
    7298:	00800844 	movi	r2,33
    729c:	00000c06 	br	72d0 <btc_pubkey_get_length+0x64>
    if (ch_header == 4 || ch_header == 6 || ch_header == 7)
    72a0:	e0bfff03 	ldbu	r2,-4(fp)
    72a4:	10800120 	cmpeqi	r2,r2,4
    72a8:	1000061e 	bne	r2,zero,72c4 <btc_pubkey_get_length+0x58>
    72ac:	e0bfff03 	ldbu	r2,-4(fp)
    72b0:	108001a0 	cmpeqi	r2,r2,6
    72b4:	1000031e 	bne	r2,zero,72c4 <btc_pubkey_get_length+0x58>
    72b8:	e0bfff03 	ldbu	r2,-4(fp)
    72bc:	108001d8 	cmpnei	r2,r2,7
    72c0:	1000021e 	bne	r2,zero,72cc <btc_pubkey_get_length+0x60>
        return BTC_ECKEY_UNCOMPRESSED_LENGTH;
    72c4:	00801044 	movi	r2,65
    72c8:	00000106 	br	72d0 <btc_pubkey_get_length+0x64>
    return 0;
    72cc:	0005883a 	mov	r2,zero
}
    72d0:	e037883a 	mov	sp,fp
    72d4:	df000017 	ldw	fp,0(sp)
    72d8:	dec00104 	addi	sp,sp,4
    72dc:	f800283a 	ret

000072e0 <btc_pubkey_is_valid>:


btc_bool btc_pubkey_is_valid(const btc_pubkey* pubkey)
{
    72e0:	defffd04 	addi	sp,sp,-12
    72e4:	dfc00215 	stw	ra,8(sp)
    72e8:	df000115 	stw	fp,4(sp)
    72ec:	df000104 	addi	fp,sp,4
    72f0:	e13fff15 	stw	r4,-4(fp)
    return btc_ecc_verify_pubkey(pubkey->pubkey, pubkey->compressed);
    72f4:	e0bfff17 	ldw	r2,-4(fp)
    72f8:	10c00044 	addi	r3,r2,1
    72fc:	e0bfff17 	ldw	r2,-4(fp)
    7300:	10800003 	ldbu	r2,0(r2)
    7304:	10803fcc 	andi	r2,r2,255
    7308:	100b883a 	mov	r5,r2
    730c:	1809883a 	mov	r4,r3
    7310:	0007c240 	call	7c24 <btc_ecc_verify_pubkey>
}
    7314:	e037883a 	mov	sp,fp
    7318:	dfc00117 	ldw	ra,4(sp)
    731c:	df000017 	ldw	fp,0(sp)
    7320:	dec00204 	addi	sp,sp,8
    7324:	f800283a 	ret

00007328 <btc_pubkey_cleanse>:


void btc_pubkey_cleanse(btc_pubkey* pubkey)
{
    7328:	defffd04 	addi	sp,sp,-12
    732c:	dfc00215 	stw	ra,8(sp)
    7330:	df000115 	stw	fp,4(sp)
    7334:	df000104 	addi	fp,sp,4
    7338:	e13fff15 	stw	r4,-4(fp)
    if (pubkey == NULL)
    733c:	e0bfff17 	ldw	r2,-4(fp)
    7340:	10000626 	beq	r2,zero,735c <btc_pubkey_cleanse+0x34>
        return;

    btc_mem_zero(pubkey->pubkey, BTC_ECKEY_UNCOMPRESSED_LENGTH);
    7344:	e0bfff17 	ldw	r2,-4(fp)
    7348:	10800044 	addi	r2,r2,1
    734c:	01401044 	movi	r5,65
    7350:	1009883a 	mov	r4,r2
    7354:	00085380 	call	8538 <btc_mem_zero>
    7358:	00000106 	br	7360 <btc_pubkey_cleanse+0x38>


void btc_pubkey_cleanse(btc_pubkey* pubkey)
{
    if (pubkey == NULL)
        return;
    735c:	0001883a 	nop

    btc_mem_zero(pubkey->pubkey, BTC_ECKEY_UNCOMPRESSED_LENGTH);
}
    7360:	e037883a 	mov	sp,fp
    7364:	dfc00117 	ldw	ra,4(sp)
    7368:	df000017 	ldw	fp,0(sp)
    736c:	dec00204 	addi	sp,sp,8
    7370:	f800283a 	ret

00007374 <btc_pubkey_get_hash160>:


void btc_pubkey_get_hash160(const btc_pubkey* pubkey, uint160 hash160)
{
    7374:	defff404 	addi	sp,sp,-48
    7378:	dfc00b15 	stw	ra,44(sp)
    737c:	df000a15 	stw	fp,40(sp)
    7380:	df000a04 	addi	fp,sp,40
    7384:	e13ffe15 	stw	r4,-8(fp)
    7388:	e17fff15 	stw	r5,-4(fp)
    uint256 hashout;
    btc_hash_sngl_sha256(pubkey->pubkey, pubkey->compressed ? BTC_ECKEY_COMPRESSED_LENGTH : BTC_ECKEY_UNCOMPRESSED_LENGTH, hashout);
    738c:	e0bffe17 	ldw	r2,-8(fp)
    7390:	10c00044 	addi	r3,r2,1
    7394:	e0bffe17 	ldw	r2,-8(fp)
    7398:	10800003 	ldbu	r2,0(r2)
    739c:	10803fcc 	andi	r2,r2,255
    73a0:	10000226 	beq	r2,zero,73ac <btc_pubkey_get_hash160+0x38>
    73a4:	00800844 	movi	r2,33
    73a8:	00000106 	br	73b0 <btc_pubkey_get_hash160+0x3c>
    73ac:	00801044 	movi	r2,65
    73b0:	e1bff604 	addi	r6,fp,-40
    73b4:	100b883a 	mov	r5,r2
    73b8:	1809883a 	mov	r4,r3
    73bc:	0006d680 	call	6d68 <btc_hash_sngl_sha256>

    btc_ripemd160(hashout, sizeof(hashout), hash160);
    73c0:	e1bfff17 	ldw	r6,-4(fp)
    73c4:	01400804 	movi	r5,32
    73c8:	e13ff604 	addi	r4,fp,-40
    73cc:	000c3680 	call	c368 <btc_ripemd160>
}
    73d0:	0001883a 	nop
    73d4:	e037883a 	mov	sp,fp
    73d8:	dfc00117 	ldw	ra,4(sp)
    73dc:	df000017 	ldw	fp,0(sp)
    73e0:	dec00204 	addi	sp,sp,8
    73e4:	f800283a 	ret

000073e8 <btc_pubkey_get_hex>:


btc_bool btc_pubkey_get_hex(const btc_pubkey* pubkey, char* str, size_t* strsize)
{
    73e8:	defffb04 	addi	sp,sp,-20
    73ec:	dfc00415 	stw	ra,16(sp)
    73f0:	df000315 	stw	fp,12(sp)
    73f4:	df000304 	addi	fp,sp,12
    73f8:	e13ffd15 	stw	r4,-12(fp)
    73fc:	e17ffe15 	stw	r5,-8(fp)
    7400:	e1bfff15 	stw	r6,-4(fp)
    if (*strsize < BTC_ECKEY_COMPRESSED_LENGTH * 2)
    7404:	e0bfff17 	ldw	r2,-4(fp)
    7408:	10800017 	ldw	r2,0(r2)
    740c:	108010a8 	cmpgeui	r2,r2,66
    7410:	1000021e 	bne	r2,zero,741c <btc_pubkey_get_hex+0x34>
        return false;
    7414:	0005883a 	mov	r2,zero
    7418:	00000a06 	br	7444 <btc_pubkey_get_hex+0x5c>
    utils_bin_to_hex((unsigned char*)pubkey->pubkey, BTC_ECKEY_COMPRESSED_LENGTH, str);
    741c:	e0bffd17 	ldw	r2,-12(fp)
    7420:	10800044 	addi	r2,r2,1
    7424:	e1bffe17 	ldw	r6,-8(fp)
    7428:	01400844 	movi	r5,33
    742c:	1009883a 	mov	r4,r2
    7430:	00403300 	call	40330 <utils_bin_to_hex>
    *strsize = BTC_ECKEY_COMPRESSED_LENGTH * 2;
    7434:	e0bfff17 	ldw	r2,-4(fp)
    7438:	00c01084 	movi	r3,66
    743c:	10c00015 	stw	r3,0(r2)
    return true;
    7440:	00800044 	movi	r2,1
}
    7444:	e037883a 	mov	sp,fp
    7448:	dfc00117 	ldw	ra,4(sp)
    744c:	df000017 	ldw	fp,0(sp)
    7450:	dec00204 	addi	sp,sp,8
    7454:	f800283a 	ret

00007458 <btc_pubkey_from_key>:


void btc_pubkey_from_key(const btc_key* privkey, btc_pubkey* pubkey_inout)
{
    7458:	defffb04 	addi	sp,sp,-20
    745c:	dfc00415 	stw	ra,16(sp)
    7460:	df000315 	stw	fp,12(sp)
    7464:	df000304 	addi	fp,sp,12
    7468:	e13ffe15 	stw	r4,-8(fp)
    746c:	e17fff15 	stw	r5,-4(fp)
    if (pubkey_inout == NULL || privkey == NULL)
    7470:	e0bfff17 	ldw	r2,-4(fp)
    7474:	10001026 	beq	r2,zero,74b8 <btc_pubkey_from_key+0x60>
    7478:	e0bffe17 	ldw	r2,-8(fp)
    747c:	10000e26 	beq	r2,zero,74b8 <btc_pubkey_from_key+0x60>
        return;

    size_t in_out_len = BTC_ECKEY_COMPRESSED_LENGTH;
    7480:	00800844 	movi	r2,33
    7484:	e0bffd15 	stw	r2,-12(fp)

    btc_ecc_get_pubkey(privkey->privkey, pubkey_inout->pubkey, &in_out_len, true);
    7488:	e0fffe17 	ldw	r3,-8(fp)
    748c:	e0bfff17 	ldw	r2,-4(fp)
    7490:	10800044 	addi	r2,r2,1
    7494:	01c00044 	movi	r7,1
    7498:	e1bffd04 	addi	r6,fp,-12
    749c:	100b883a 	mov	r5,r2
    74a0:	1809883a 	mov	r4,r3
    74a4:	00079700 	call	7970 <btc_ecc_get_pubkey>
    pubkey_inout->compressed = true;
    74a8:	e0bfff17 	ldw	r2,-4(fp)
    74ac:	00c00044 	movi	r3,1
    74b0:	10c00005 	stb	r3,0(r2)
    74b4:	00000106 	br	74bc <btc_pubkey_from_key+0x64>


void btc_pubkey_from_key(const btc_key* privkey, btc_pubkey* pubkey_inout)
{
    if (pubkey_inout == NULL || privkey == NULL)
        return;
    74b8:	0001883a 	nop

    size_t in_out_len = BTC_ECKEY_COMPRESSED_LENGTH;

    btc_ecc_get_pubkey(privkey->privkey, pubkey_inout->pubkey, &in_out_len, true);
    pubkey_inout->compressed = true;
}
    74bc:	e037883a 	mov	sp,fp
    74c0:	dfc00117 	ldw	ra,4(sp)
    74c4:	df000017 	ldw	fp,0(sp)
    74c8:	dec00204 	addi	sp,sp,8
    74cc:	f800283a 	ret

000074d0 <btc_key_sign_hash>:


btc_bool btc_key_sign_hash(const btc_key* privkey, const uint256 hash, unsigned char* sigout, size_t* outlen)
{
    74d0:	defffa04 	addi	sp,sp,-24
    74d4:	dfc00515 	stw	ra,20(sp)
    74d8:	df000415 	stw	fp,16(sp)
    74dc:	df000404 	addi	fp,sp,16
    74e0:	e13ffc15 	stw	r4,-16(fp)
    74e4:	e17ffd15 	stw	r5,-12(fp)
    74e8:	e1bffe15 	stw	r6,-8(fp)
    74ec:	e1ffff15 	stw	r7,-4(fp)
    return btc_ecc_sign(privkey->privkey, hash, sigout, outlen);
    74f0:	e0bffc17 	ldw	r2,-16(fp)
    74f4:	e1ffff17 	ldw	r7,-4(fp)
    74f8:	e1bffe17 	ldw	r6,-8(fp)
    74fc:	e17ffd17 	ldw	r5,-12(fp)
    7500:	1009883a 	mov	r4,r2
    7504:	0007cd80 	call	7cd8 <btc_ecc_sign>
}
    7508:	e037883a 	mov	sp,fp
    750c:	dfc00117 	ldw	ra,4(sp)
    7510:	df000017 	ldw	fp,0(sp)
    7514:	dec00204 	addi	sp,sp,8
    7518:	f800283a 	ret

0000751c <btc_key_sign_hash_compact>:


btc_bool btc_key_sign_hash_compact(const btc_key* privkey, const uint256 hash, unsigned char* sigout, size_t* outlen)
{
    751c:	defffa04 	addi	sp,sp,-24
    7520:	dfc00515 	stw	ra,20(sp)
    7524:	df000415 	stw	fp,16(sp)
    7528:	df000404 	addi	fp,sp,16
    752c:	e13ffc15 	stw	r4,-16(fp)
    7530:	e17ffd15 	stw	r5,-12(fp)
    7534:	e1bffe15 	stw	r6,-8(fp)
    7538:	e1ffff15 	stw	r7,-4(fp)
    return btc_ecc_sign_compact(privkey->privkey, hash, sigout, outlen);
    753c:	e0bffc17 	ldw	r2,-16(fp)
    7540:	e1ffff17 	ldw	r7,-4(fp)
    7544:	e1bffe17 	ldw	r6,-8(fp)
    7548:	e17ffd17 	ldw	r5,-12(fp)
    754c:	1009883a 	mov	r4,r2
    7550:	0007d8c0 	call	7d8c <btc_ecc_sign_compact>
}
    7554:	e037883a 	mov	sp,fp
    7558:	dfc00117 	ldw	ra,4(sp)
    755c:	df000017 	ldw	fp,0(sp)
    7560:	dec00204 	addi	sp,sp,8
    7564:	f800283a 	ret

00007568 <btc_key_sign_hash_compact_recoverable>:

btc_bool btc_key_sign_hash_compact_recoverable(const btc_key* privkey, const uint256 hash, unsigned char* sigout, size_t* outlen, int* recid)
{
    7568:	defff904 	addi	sp,sp,-28
    756c:	dfc00615 	stw	ra,24(sp)
    7570:	df000515 	stw	fp,20(sp)
    7574:	df000504 	addi	fp,sp,20
    7578:	e13ffc15 	stw	r4,-16(fp)
    757c:	e17ffd15 	stw	r5,-12(fp)
    7580:	e1bffe15 	stw	r6,-8(fp)
    7584:	e1ffff15 	stw	r7,-4(fp)
    return btc_ecc_sign_compact_recoverable(privkey->privkey, hash, sigout, outlen, recid);
    7588:	e0fffc17 	ldw	r3,-16(fp)
    758c:	e0800217 	ldw	r2,8(fp)
    7590:	d8800015 	stw	r2,0(sp)
    7594:	e1ffff17 	ldw	r7,-4(fp)
    7598:	e1bffe17 	ldw	r6,-8(fp)
    759c:	e17ffd17 	ldw	r5,-12(fp)
    75a0:	1809883a 	mov	r4,r3
    75a4:	0007e480 	call	7e48 <btc_ecc_sign_compact_recoverable>
}
    75a8:	e037883a 	mov	sp,fp
    75ac:	dfc00117 	ldw	ra,4(sp)
    75b0:	df000017 	ldw	fp,0(sp)
    75b4:	dec00204 	addi	sp,sp,8
    75b8:	f800283a 	ret

000075bc <btc_key_sign_recover_pubkey>:

btc_bool btc_key_sign_recover_pubkey(const unsigned char* sig, const uint256 hash, int recid, btc_pubkey* pubkey)
{
    75bc:	deffd804 	addi	sp,sp,-160
    75c0:	dfc02715 	stw	ra,156(sp)
    75c4:	df002615 	stw	fp,152(sp)
    75c8:	df002604 	addi	fp,sp,152
    75cc:	e13ffc15 	stw	r4,-16(fp)
    75d0:	e17ffd15 	stw	r5,-12(fp)
    75d4:	e1bffe15 	stw	r6,-8(fp)
    75d8:	e1ffff15 	stw	r7,-4(fp)
    uint8_t pubkeybuf[128];
    size_t outlen = 128;
    75dc:	00802004 	movi	r2,128
    75e0:	e0bffb15 	stw	r2,-20(fp)
    if (!btc_ecc_recover_pubkey(sig, hash, recid, pubkeybuf, &outlen) || outlen > BTC_ECKEY_UNCOMPRESSED_LENGTH) {
    75e4:	e0bffb04 	addi	r2,fp,-20
    75e8:	d8800015 	stw	r2,0(sp)
    75ec:	e1ffdb04 	addi	r7,fp,-148
    75f0:	e1bffe17 	ldw	r6,-8(fp)
    75f4:	e17ffd17 	ldw	r5,-12(fp)
    75f8:	e13ffc17 	ldw	r4,-16(fp)
    75fc:	0007f080 	call	7f08 <btc_ecc_recover_pubkey>
    7600:	10803fcc 	andi	r2,r2,255
    7604:	10000326 	beq	r2,zero,7614 <btc_key_sign_recover_pubkey+0x58>
    7608:	e0bffb17 	ldw	r2,-20(fp)
    760c:	108010b0 	cmpltui	r2,r2,66
    7610:	1000021e 	bne	r2,zero,761c <btc_key_sign_recover_pubkey+0x60>
        return 0;
    7614:	0005883a 	mov	r2,zero
    7618:	00001406 	br	766c <btc_key_sign_recover_pubkey+0xb0>
    }
    memset(pubkey->pubkey, 0, sizeof(pubkey->pubkey));
    761c:	e0bfff17 	ldw	r2,-4(fp)
    7620:	10800044 	addi	r2,r2,1
    7624:	01801044 	movi	r6,65
    7628:	000b883a 	mov	r5,zero
    762c:	1009883a 	mov	r4,r2
    7630:	00464200 	call	46420 <memset>
    memcpy(pubkey->pubkey, pubkeybuf, outlen);
    7634:	e0bfff17 	ldw	r2,-4(fp)
    7638:	10800044 	addi	r2,r2,1
    763c:	e0fffb17 	ldw	r3,-20(fp)
    7640:	180d883a 	mov	r6,r3
    7644:	e17fdb04 	addi	r5,fp,-148
    7648:	1009883a 	mov	r4,r2
    764c:	00463980 	call	46398 <memcpy>
    if (outlen == BTC_ECKEY_COMPRESSED_LENGTH) {
    7650:	e0bffb17 	ldw	r2,-20(fp)
    7654:	10800858 	cmpnei	r2,r2,33
    7658:	1000031e 	bne	r2,zero,7668 <btc_key_sign_recover_pubkey+0xac>
        pubkey->compressed = true;
    765c:	e0bfff17 	ldw	r2,-4(fp)
    7660:	00c00044 	movi	r3,1
    7664:	10c00005 	stb	r3,0(r2)
    }
    return 1;
    7668:	00800044 	movi	r2,1
}
    766c:	e037883a 	mov	sp,fp
    7670:	dfc00117 	ldw	ra,4(sp)
    7674:	df000017 	ldw	fp,0(sp)
    7678:	dec00204 	addi	sp,sp,8
    767c:	f800283a 	ret

00007680 <btc_pubkey_verify_sig>:

btc_bool btc_pubkey_verify_sig(const btc_pubkey* pubkey, const uint256 hash, unsigned char* sigder, int len)
{
    7680:	defff904 	addi	sp,sp,-28
    7684:	dfc00615 	stw	ra,24(sp)
    7688:	df000515 	stw	fp,20(sp)
    768c:	df000504 	addi	fp,sp,20
    7690:	e13ffc15 	stw	r4,-16(fp)
    7694:	e17ffd15 	stw	r5,-12(fp)
    7698:	e1bffe15 	stw	r6,-8(fp)
    769c:	e1ffff15 	stw	r7,-4(fp)
    return btc_ecc_verify_sig(pubkey->pubkey, pubkey->compressed, hash, sigder, len);
    76a0:	e0bffc17 	ldw	r2,-16(fp)
    76a4:	10c00044 	addi	r3,r2,1
    76a8:	e0bffc17 	ldw	r2,-16(fp)
    76ac:	10800003 	ldbu	r2,0(r2)
    76b0:	11003fcc 	andi	r4,r2,255
    76b4:	e0bfff17 	ldw	r2,-4(fp)
    76b8:	d8800015 	stw	r2,0(sp)
    76bc:	e1fffe17 	ldw	r7,-8(fp)
    76c0:	e1bffd17 	ldw	r6,-12(fp)
    76c4:	200b883a 	mov	r5,r4
    76c8:	1809883a 	mov	r4,r3
    76cc:	0007fe40 	call	7fe4 <btc_ecc_verify_sig>
}
    76d0:	e037883a 	mov	sp,fp
    76d4:	dfc00117 	ldw	ra,4(sp)
    76d8:	df000017 	ldw	fp,0(sp)
    76dc:	dec00204 	addi	sp,sp,8
    76e0:	f800283a 	ret

000076e4 <btc_pubkey_getaddr_p2sh_p2wpkh>:

btc_bool btc_pubkey_getaddr_p2sh_p2wpkh(const btc_pubkey* pubkey, const btc_chainparams* chain, char *addrout) {
    76e4:	deffef04 	addi	sp,sp,-68
    76e8:	dfc01015 	stw	ra,64(sp)
    76ec:	df000f15 	stw	fp,60(sp)
    76f0:	df000f04 	addi	fp,sp,60
    76f4:	e13ffd15 	stw	r4,-12(fp)
    76f8:	e17ffe15 	stw	r5,-8(fp)
    76fc:	e1bfff15 	stw	r6,-4(fp)
    cstring *p2wphk_script = cstr_new_sz(22);
    7700:	01000584 	movi	r4,22
    7704:	00432400 	call	43240 <cstr_new_sz>
    7708:	e0bff115 	stw	r2,-60(fp)
    uint160 keyhash;
    btc_pubkey_get_hash160(pubkey, keyhash);
    770c:	e0bff204 	addi	r2,fp,-56
    7710:	100b883a 	mov	r5,r2
    7714:	e13ffd17 	ldw	r4,-12(fp)
    7718:	00073740 	call	7374 <btc_pubkey_get_hash160>
    btc_script_build_p2wpkh(p2wphk_script, keyhash);
    771c:	e0bff204 	addi	r2,fp,-56
    7720:	100b883a 	mov	r5,r2
    7724:	e13ff117 	ldw	r4,-60(fp)
    7728:	000da380 	call	da38 <btc_script_build_p2wpkh>

    uint8_t hash160[sizeof(uint160)+1];
    hash160[0] = chain->b58prefix_script_address;
    772c:	e0bffe17 	ldw	r2,-8(fp)
    7730:	10800843 	ldbu	r2,33(r2)
    7734:	e0bff705 	stb	r2,-36(fp)
    btc_script_get_scripthash(p2wphk_script, hash160+1);
    7738:	e0bff704 	addi	r2,fp,-36
    773c:	10800044 	addi	r2,r2,1
    7740:	100b883a 	mov	r5,r2
    7744:	e13ff117 	ldw	r4,-60(fp)
    7748:	000daf40 	call	daf4 <btc_script_get_scripthash>
    cstr_free(p2wphk_script, true);
    774c:	01400044 	movi	r5,1
    7750:	e13ff117 	ldw	r4,-60(fp)
    7754:	00433e40 	call	433e4 <cstr_free>

    btc_base58_encode_check(hash160, sizeof(hash160), addrout, 100);
    7758:	e0bff704 	addi	r2,fp,-36
    775c:	01c01904 	movi	r7,100
    7760:	e1bfff17 	ldw	r6,-4(fp)
    7764:	01400544 	movi	r5,21
    7768:	1009883a 	mov	r4,r2
    776c:	0041be40 	call	41be4 <btc_base58_encode_check>
    return true;
    7770:	00800044 	movi	r2,1
}
    7774:	e037883a 	mov	sp,fp
    7778:	dfc00117 	ldw	ra,4(sp)
    777c:	df000017 	ldw	fp,0(sp)
    7780:	dec00204 	addi	sp,sp,8
    7784:	f800283a 	ret

00007788 <btc_pubkey_getaddr_p2pkh>:

btc_bool btc_pubkey_getaddr_p2pkh(const btc_pubkey* pubkey, const btc_chainparams* chain, char *addrout) {
    7788:	defff504 	addi	sp,sp,-44
    778c:	dfc00a15 	stw	ra,40(sp)
    7790:	df000915 	stw	fp,36(sp)
    7794:	df000904 	addi	fp,sp,36
    7798:	e13ffd15 	stw	r4,-12(fp)
    779c:	e17ffe15 	stw	r5,-8(fp)
    77a0:	e1bfff15 	stw	r6,-4(fp)
    uint8_t hash160[sizeof(uint160)+1];
    hash160[0] = chain->b58prefix_pubkey_address;
    77a4:	e0bffe17 	ldw	r2,-8(fp)
    77a8:	10800803 	ldbu	r2,32(r2)
    77ac:	e0bff705 	stb	r2,-36(fp)
    btc_pubkey_get_hash160(pubkey, hash160 + 1);
    77b0:	e0bff744 	addi	r2,fp,-35
    77b4:	100b883a 	mov	r5,r2
    77b8:	e13ffd17 	ldw	r4,-12(fp)
    77bc:	00073740 	call	7374 <btc_pubkey_get_hash160>
    btc_base58_encode_check(hash160, sizeof(hash160), addrout, 100);
    77c0:	01c01904 	movi	r7,100
    77c4:	e1bfff17 	ldw	r6,-4(fp)
    77c8:	01400544 	movi	r5,21
    77cc:	e13ff704 	addi	r4,fp,-36
    77d0:	0041be40 	call	41be4 <btc_base58_encode_check>
    return true;
    77d4:	00800044 	movi	r2,1
}
    77d8:	e037883a 	mov	sp,fp
    77dc:	dfc00117 	ldw	ra,4(sp)
    77e0:	df000017 	ldw	fp,0(sp)
    77e4:	dec00204 	addi	sp,sp,8
    77e8:	f800283a 	ret

000077ec <btc_pubkey_getaddr_p2wpkh>:

btc_bool btc_pubkey_getaddr_p2wpkh(const btc_pubkey* pubkey, const btc_chainparams* chain, char *addrout) {
    77ec:	defff504 	addi	sp,sp,-44
    77f0:	dfc00a15 	stw	ra,40(sp)
    77f4:	df000915 	stw	fp,36(sp)
    77f8:	df000904 	addi	fp,sp,36
    77fc:	e13ffd15 	stw	r4,-12(fp)
    7800:	e17ffe15 	stw	r5,-8(fp)
    7804:	e1bfff15 	stw	r6,-4(fp)
    uint160 hash160;
    btc_pubkey_get_hash160(pubkey, hash160);
    7808:	e17ff804 	addi	r5,fp,-32
    780c:	e13ffd17 	ldw	r4,-12(fp)
    7810:	00073740 	call	7374 <btc_pubkey_get_hash160>
    segwit_addr_encode(addrout, chain->bech32_hrp, 0, hash160, sizeof(hash160));
    7814:	e0bffe17 	ldw	r2,-8(fp)
    7818:	10c00884 	addi	r3,r2,34
    781c:	00800504 	movi	r2,20
    7820:	d8800015 	stw	r2,0(sp)
    7824:	e1fff804 	addi	r7,fp,-32
    7828:	000d883a 	mov	r6,zero
    782c:	180b883a 	mov	r5,r3
    7830:	e13fff17 	ldw	r4,-4(fp)
    7834:	003ef400 	call	3ef40 <segwit_addr_encode>
    return true;
    7838:	00800044 	movi	r2,1
}
    783c:	e037883a 	mov	sp,fp
    7840:	dfc00117 	ldw	ra,4(sp)
    7844:	df000017 	ldw	fp,0(sp)
    7848:	dec00204 	addi	sp,sp,8
    784c:	f800283a 	ret

00007850 <btc_ecc_start>:
#include "..\include\btc\random.h"

static secp256k1_context* secp256k1_ctx = NULL;

void btc_ecc_start(void)
{
    7850:	defff504 	addi	sp,sp,-44
    7854:	dfc00a15 	stw	ra,40(sp)
    7858:	df000915 	stw	fp,36(sp)
    785c:	df000904 	addi	fp,sp,36
    btc_random_init();
    7860:	00086000 	call	8600 <btc_random_init>

    secp256k1_ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);
    7864:	0100c044 	movi	r4,769
    7868:	003acc80 	call	3acc8 <secp256k1_context_create>
    786c:	d0a54815 	stw	r2,-27360(gp)
    assert(secp256k1_ctx != NULL);
    7870:	d0a54817 	ldw	r2,-27360(gp)
    7874:	1000081e 	bne	r2,zero,7898 <btc_ecc_start+0x48>
    7878:	01c00174 	movhi	r7,5
    787c:	39d0f704 	addi	r7,r7,17372
    7880:	01800174 	movhi	r6,5
    7884:	31911c04 	addi	r6,r6,17520
    7888:	01400484 	movi	r5,18
    788c:	01000174 	movhi	r4,5
    7890:	2110fd04 	addi	r4,r4,17396
    7894:	0045fec0 	call	45fec <__assert_func>

    uint8_t seed[32];
    assert(btc_random_bytes(seed, 32, 0));
    7898:	e0bff804 	addi	r2,fp,-32
    789c:	000d883a 	mov	r6,zero
    78a0:	01400804 	movi	r5,32
    78a4:	1009883a 	mov	r4,r2
    78a8:	00086300 	call	8630 <btc_random_bytes>
    78ac:	10803fcc 	andi	r2,r2,255
    78b0:	1000081e 	bne	r2,zero,78d4 <btc_ecc_start+0x84>
    78b4:	01c00174 	movhi	r7,5
    78b8:	39d10404 	addi	r7,r7,17424
    78bc:	01800174 	movhi	r6,5
    78c0:	31911c04 	addi	r6,r6,17520
    78c4:	01400544 	movi	r5,21
    78c8:	01000174 	movhi	r4,5
    78cc:	2110fd04 	addi	r4,r4,17396
    78d0:	0045fec0 	call	45fec <__assert_func>
    int ret = secp256k1_context_randomize(secp256k1_ctx, seed);
    78d4:	d0a54817 	ldw	r2,-27360(gp)
    78d8:	e0fff804 	addi	r3,fp,-32
    78dc:	180b883a 	mov	r5,r3
    78e0:	1009883a 	mov	r4,r2
    78e4:	003c95c0 	call	3c95c <secp256k1_context_randomize>
    78e8:	e0bff715 	stw	r2,-36(fp)
    assert(ret);
    78ec:	e0bff717 	ldw	r2,-36(fp)
    78f0:	1000081e 	bne	r2,zero,7914 <btc_ecc_start+0xc4>
    78f4:	01c00174 	movhi	r7,5
    78f8:	39d10c04 	addi	r7,r7,17456
    78fc:	01800174 	movhi	r6,5
    7900:	31911c04 	addi	r6,r6,17520
    7904:	014005c4 	movi	r5,23
    7908:	01000174 	movhi	r4,5
    790c:	2110fd04 	addi	r4,r4,17396
    7910:	0045fec0 	call	45fec <__assert_func>
}
    7914:	0001883a 	nop
    7918:	e037883a 	mov	sp,fp
    791c:	dfc00117 	ldw	ra,4(sp)
    7920:	df000017 	ldw	fp,0(sp)
    7924:	dec00204 	addi	sp,sp,8
    7928:	f800283a 	ret

0000792c <btc_ecc_stop>:


void btc_ecc_stop(void)
{
    792c:	defffd04 	addi	sp,sp,-12
    7930:	dfc00215 	stw	ra,8(sp)
    7934:	df000115 	stw	fp,4(sp)
    7938:	df000104 	addi	fp,sp,4
    secp256k1_context* ctx = secp256k1_ctx;
    793c:	d0a54817 	ldw	r2,-27360(gp)
    7940:	e0bfff15 	stw	r2,-4(fp)
    secp256k1_ctx = NULL;
    7944:	d0254815 	stw	zero,-27360(gp)

    if (ctx) {
    7948:	e0bfff17 	ldw	r2,-4(fp)
    794c:	10000226 	beq	r2,zero,7958 <btc_ecc_stop+0x2c>
        secp256k1_context_destroy(ctx);
    7950:	e13fff17 	ldw	r4,-4(fp)
    7954:	003ae940 	call	3ae94 <secp256k1_context_destroy>
    }
}
    7958:	0001883a 	nop
    795c:	e037883a 	mov	sp,fp
    7960:	dfc00117 	ldw	ra,4(sp)
    7964:	df000017 	ldw	fp,0(sp)
    7968:	dec00204 	addi	sp,sp,8
    796c:	f800283a 	ret

00007970 <btc_ecc_get_pubkey>:


void btc_ecc_get_pubkey(const uint8_t* private_key, uint8_t* public_key, size_t* in_outlen, btc_bool compressed)
{
    7970:	deffe904 	addi	sp,sp,-92
    7974:	dfc01615 	stw	ra,88(sp)
    7978:	df001515 	stw	fp,84(sp)
    797c:	df001504 	addi	fp,sp,84
    7980:	e13ffc15 	stw	r4,-16(fp)
    7984:	e17ffd15 	stw	r5,-12(fp)
    7988:	e1bffe15 	stw	r6,-8(fp)
    798c:	3805883a 	mov	r2,r7
    7990:	e0bfff05 	stb	r2,-4(fp)
    secp256k1_pubkey pubkey;
    assert(secp256k1_ctx);
    7994:	d0a54817 	ldw	r2,-27360(gp)
    7998:	1000081e 	bne	r2,zero,79bc <btc_ecc_get_pubkey+0x4c>
    799c:	01c00174 	movhi	r7,5
    79a0:	39d10d04 	addi	r7,r7,17460
    79a4:	01800174 	movhi	r6,5
    79a8:	31912004 	addi	r6,r6,17536
    79ac:	01400a44 	movi	r5,41
    79b0:	01000174 	movhi	r4,5
    79b4:	2110fd04 	addi	r4,r4,17396
    79b8:	0045fec0 	call	45fec <__assert_func>
    assert((int)*in_outlen == (compressed ? 33 : 65));
    79bc:	e0bffe17 	ldw	r2,-8(fp)
    79c0:	10800017 	ldw	r2,0(r2)
    79c4:	1007883a 	mov	r3,r2
    79c8:	e0bfff03 	ldbu	r2,-4(fp)
    79cc:	10000226 	beq	r2,zero,79d8 <btc_ecc_get_pubkey+0x68>
    79d0:	00800844 	movi	r2,33
    79d4:	00000106 	br	79dc <btc_ecc_get_pubkey+0x6c>
    79d8:	00801044 	movi	r2,65
    79dc:	18800826 	beq	r3,r2,7a00 <btc_ecc_get_pubkey+0x90>
    79e0:	01c00174 	movhi	r7,5
    79e4:	39d11104 	addi	r7,r7,17476
    79e8:	01800174 	movhi	r6,5
    79ec:	31912004 	addi	r6,r6,17536
    79f0:	01400a84 	movi	r5,42
    79f4:	01000174 	movhi	r4,5
    79f8:	2110fd04 	addi	r4,r4,17396
    79fc:	0045fec0 	call	45fec <__assert_func>
    memset(public_key, 0, *in_outlen);
    7a00:	e0bffe17 	ldw	r2,-8(fp)
    7a04:	10800017 	ldw	r2,0(r2)
    7a08:	100d883a 	mov	r6,r2
    7a0c:	000b883a 	mov	r5,zero
    7a10:	e13ffd17 	ldw	r4,-12(fp)
    7a14:	00464200 	call	46420 <memset>

    if (!secp256k1_ec_pubkey_create(secp256k1_ctx, &pubkey, (const unsigned char*)private_key)) {
    7a18:	d0a54817 	ldw	r2,-27360(gp)
    7a1c:	e1bffc17 	ldw	r6,-16(fp)
    7a20:	e17fec04 	addi	r5,fp,-80
    7a24:	1009883a 	mov	r4,r2
    7a28:	003c13c0 	call	3c13c <secp256k1_ec_pubkey_create>
    7a2c:	10000d26 	beq	r2,zero,7a64 <btc_ecc_get_pubkey+0xf4>
        return;
    }

    if (!secp256k1_ec_pubkey_serialize(secp256k1_ctx, public_key, in_outlen, &pubkey, compressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED)) {
    7a30:	d0e54817 	ldw	r3,-27360(gp)
    7a34:	e0bfff03 	ldbu	r2,-4(fp)
    7a38:	10000226 	beq	r2,zero,7a44 <btc_ecc_get_pubkey+0xd4>
    7a3c:	00804084 	movi	r2,258
    7a40:	00000106 	br	7a48 <btc_ecc_get_pubkey+0xd8>
    7a44:	00800084 	movi	r2,2
    7a48:	d8800015 	stw	r2,0(sp)
    7a4c:	e1ffec04 	addi	r7,fp,-80
    7a50:	e1bffe17 	ldw	r6,-8(fp)
    7a54:	e17ffd17 	ldw	r5,-12(fp)
    7a58:	1809883a 	mov	r4,r3
    7a5c:	003b1940 	call	3b194 <secp256k1_ec_pubkey_serialize>
        return;
    }

    return;
    7a60:	00000106 	br	7a68 <btc_ecc_get_pubkey+0xf8>
    assert(secp256k1_ctx);
    assert((int)*in_outlen == (compressed ? 33 : 65));
    memset(public_key, 0, *in_outlen);

    if (!secp256k1_ec_pubkey_create(secp256k1_ctx, &pubkey, (const unsigned char*)private_key)) {
        return;
    7a64:	0001883a 	nop
    if (!secp256k1_ec_pubkey_serialize(secp256k1_ctx, public_key, in_outlen, &pubkey, compressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED)) {
        return;
    }

    return;
}
    7a68:	e037883a 	mov	sp,fp
    7a6c:	dfc00117 	ldw	ra,4(sp)
    7a70:	df000017 	ldw	fp,0(sp)
    7a74:	dec00204 	addi	sp,sp,8
    7a78:	f800283a 	ret

00007a7c <btc_ecc_private_key_tweak_add>:

btc_bool btc_ecc_private_key_tweak_add(uint8_t* private_key, const uint8_t* tweak)
{
    7a7c:	defffc04 	addi	sp,sp,-16
    7a80:	dfc00315 	stw	ra,12(sp)
    7a84:	df000215 	stw	fp,8(sp)
    7a88:	df000204 	addi	fp,sp,8
    7a8c:	e13ffe15 	stw	r4,-8(fp)
    7a90:	e17fff15 	stw	r5,-4(fp)
    assert(secp256k1_ctx);
    7a94:	d0a54817 	ldw	r2,-27360(gp)
    7a98:	1000081e 	bne	r2,zero,7abc <btc_ecc_private_key_tweak_add+0x40>
    7a9c:	01c00174 	movhi	r7,5
    7aa0:	39d10d04 	addi	r7,r7,17460
    7aa4:	01800174 	movhi	r6,5
    7aa8:	31912504 	addi	r6,r6,17556
    7aac:	01400e84 	movi	r5,58
    7ab0:	01000174 	movhi	r4,5
    7ab4:	2110fd04 	addi	r4,r4,17396
    7ab8:	0045fec0 	call	45fec <__assert_func>
    return secp256k1_ec_privkey_tweak_add(secp256k1_ctx, (unsigned char*)private_key, (const unsigned char*)tweak);
    7abc:	d0a54817 	ldw	r2,-27360(gp)
    7ac0:	e1bfff17 	ldw	r6,-4(fp)
    7ac4:	e17ffe17 	ldw	r5,-8(fp)
    7ac8:	1009883a 	mov	r4,r2
    7acc:	003c3040 	call	3c304 <secp256k1_ec_privkey_tweak_add>
}
    7ad0:	e037883a 	mov	sp,fp
    7ad4:	dfc00117 	ldw	ra,4(sp)
    7ad8:	df000017 	ldw	fp,0(sp)
    7adc:	dec00204 	addi	sp,sp,8
    7ae0:	f800283a 	ret

00007ae4 <btc_ecc_public_key_tweak_add>:

btc_bool btc_ecc_public_key_tweak_add(uint8_t* public_key_inout, const uint8_t* tweak)
{
    7ae4:	deffea04 	addi	sp,sp,-88
    7ae8:	dfc01515 	stw	ra,84(sp)
    7aec:	df001415 	stw	fp,80(sp)
    7af0:	df001404 	addi	fp,sp,80
    7af4:	e13ffe15 	stw	r4,-8(fp)
    7af8:	e17fff15 	stw	r5,-4(fp)
    size_t out = BTC_ECKEY_COMPRESSED_LENGTH;
    7afc:	00800844 	movi	r2,33
    7b00:	e0bfed15 	stw	r2,-76(fp)
    secp256k1_pubkey pubkey;

    assert(secp256k1_ctx);
    7b04:	d0a54817 	ldw	r2,-27360(gp)
    7b08:	1000081e 	bne	r2,zero,7b2c <btc_ecc_public_key_tweak_add+0x48>
    7b0c:	01c00174 	movhi	r7,5
    7b10:	39d10d04 	addi	r7,r7,17460
    7b14:	01800174 	movhi	r6,5
    7b18:	31912d04 	addi	r6,r6,17588
    7b1c:	014010c4 	movi	r5,67
    7b20:	01000174 	movhi	r4,5
    7b24:	2110fd04 	addi	r4,r4,17396
    7b28:	0045fec0 	call	45fec <__assert_func>
    if (!secp256k1_ec_pubkey_parse(secp256k1_ctx, &pubkey, public_key_inout, 33))
    7b2c:	d0a54817 	ldw	r2,-27360(gp)
    7b30:	e0ffee04 	addi	r3,fp,-72
    7b34:	01c00844 	movi	r7,33
    7b38:	e1bffe17 	ldw	r6,-8(fp)
    7b3c:	180b883a 	mov	r5,r3
    7b40:	1009883a 	mov	r4,r2
    7b44:	003b0780 	call	3b078 <secp256k1_ec_pubkey_parse>
    7b48:	1000021e 	bne	r2,zero,7b54 <btc_ecc_public_key_tweak_add+0x70>
        return false;
    7b4c:	0005883a 	mov	r2,zero
    7b50:	00001606 	br	7bac <btc_ecc_public_key_tweak_add+0xc8>

    if (!secp256k1_ec_pubkey_tweak_add(secp256k1_ctx, &pubkey, (const unsigned char*)tweak))
    7b54:	d0a54817 	ldw	r2,-27360(gp)
    7b58:	e0ffee04 	addi	r3,fp,-72
    7b5c:	e1bfff17 	ldw	r6,-4(fp)
    7b60:	180b883a 	mov	r5,r3
    7b64:	1009883a 	mov	r4,r2
    7b68:	003c4800 	call	3c480 <secp256k1_ec_pubkey_tweak_add>
    7b6c:	1000021e 	bne	r2,zero,7b78 <btc_ecc_public_key_tweak_add+0x94>
        return false;
    7b70:	0005883a 	mov	r2,zero
    7b74:	00000d06 	br	7bac <btc_ecc_public_key_tweak_add+0xc8>

    if (!secp256k1_ec_pubkey_serialize(secp256k1_ctx, public_key_inout, &out, &pubkey, SECP256K1_EC_COMPRESSED))
    7b78:	d0e54817 	ldw	r3,-27360(gp)
    7b7c:	e13fee04 	addi	r4,fp,-72
    7b80:	00804084 	movi	r2,258
    7b84:	d8800015 	stw	r2,0(sp)
    7b88:	200f883a 	mov	r7,r4
    7b8c:	e1bfed04 	addi	r6,fp,-76
    7b90:	e17ffe17 	ldw	r5,-8(fp)
    7b94:	1809883a 	mov	r4,r3
    7b98:	003b1940 	call	3b194 <secp256k1_ec_pubkey_serialize>
    7b9c:	1000021e 	bne	r2,zero,7ba8 <btc_ecc_public_key_tweak_add+0xc4>
        return false;
    7ba0:	0005883a 	mov	r2,zero
    7ba4:	00000106 	br	7bac <btc_ecc_public_key_tweak_add+0xc8>

    return true;
    7ba8:	00800044 	movi	r2,1
}
    7bac:	e037883a 	mov	sp,fp
    7bb0:	dfc00117 	ldw	ra,4(sp)
    7bb4:	df000017 	ldw	fp,0(sp)
    7bb8:	dec00204 	addi	sp,sp,8
    7bbc:	f800283a 	ret

00007bc0 <btc_ecc_verify_privatekey>:


btc_bool btc_ecc_verify_privatekey(const uint8_t* private_key)
{
    7bc0:	defffd04 	addi	sp,sp,-12
    7bc4:	dfc00215 	stw	ra,8(sp)
    7bc8:	df000115 	stw	fp,4(sp)
    7bcc:	df000104 	addi	fp,sp,4
    7bd0:	e13fff15 	stw	r4,-4(fp)
	btc_ecc_start();
    7bd4:	00078500 	call	7850 <btc_ecc_start>
    assert(secp256k1_ctx);
    7bd8:	d0a54817 	ldw	r2,-27360(gp)
    7bdc:	1000081e 	bne	r2,zero,7c00 <btc_ecc_verify_privatekey+0x40>
    7be0:	01c00174 	movhi	r7,5
    7be4:	39d10d04 	addi	r7,r7,17460
    7be8:	01800174 	movhi	r6,5
    7bec:	31913504 	addi	r6,r6,17620
    7bf0:	01401504 	movi	r5,84
    7bf4:	01000174 	movhi	r4,5
    7bf8:	2110fd04 	addi	r4,r4,17396
    7bfc:	0045fec0 	call	45fec <__assert_func>
    return secp256k1_ec_seckey_verify(secp256k1_ctx, (const unsigned char*)private_key);
    7c00:	d0a54817 	ldw	r2,-27360(gp)
    7c04:	e17fff17 	ldw	r5,-4(fp)
    7c08:	1009883a 	mov	r4,r2
    7c0c:	003c04c0 	call	3c04c <secp256k1_ec_seckey_verify>
}
    7c10:	e037883a 	mov	sp,fp
    7c14:	dfc00117 	ldw	ra,4(sp)
    7c18:	df000017 	ldw	fp,0(sp)
    7c1c:	dec00204 	addi	sp,sp,8
    7c20:	f800283a 	ret

00007c24 <btc_ecc_verify_pubkey>:

btc_bool btc_ecc_verify_pubkey(const uint8_t* public_key, btc_bool compressed)
{
    7c24:	deffec04 	addi	sp,sp,-80
    7c28:	dfc01315 	stw	ra,76(sp)
    7c2c:	df001215 	stw	fp,72(sp)
    7c30:	df001204 	addi	fp,sp,72
    7c34:	e13ffe15 	stw	r4,-8(fp)
    7c38:	2805883a 	mov	r2,r5
    7c3c:	e0bfff05 	stb	r2,-4(fp)
    secp256k1_pubkey pubkey;

    assert(secp256k1_ctx);
    7c40:	d0a54817 	ldw	r2,-27360(gp)
    7c44:	1000081e 	bne	r2,zero,7c68 <btc_ecc_verify_pubkey+0x44>
    7c48:	01c00174 	movhi	r7,5
    7c4c:	39d10d04 	addi	r7,r7,17460
    7c50:	01800174 	movhi	r6,5
    7c54:	31913c04 	addi	r6,r6,17648
    7c58:	01401704 	movi	r5,92
    7c5c:	01000174 	movhi	r4,5
    7c60:	2110fd04 	addi	r4,r4,17396
    7c64:	0045fec0 	call	45fec <__assert_func>
    if (!secp256k1_ec_pubkey_parse(secp256k1_ctx, &pubkey, public_key, compressed ? 33 : 65)) {
    7c68:	d0e54817 	ldw	r3,-27360(gp)
    7c6c:	e0bfff03 	ldbu	r2,-4(fp)
    7c70:	10000226 	beq	r2,zero,7c7c <btc_ecc_verify_pubkey+0x58>
    7c74:	00800844 	movi	r2,33
    7c78:	00000106 	br	7c80 <btc_ecc_verify_pubkey+0x5c>
    7c7c:	00801044 	movi	r2,65
    7c80:	100f883a 	mov	r7,r2
    7c84:	e1bffe17 	ldw	r6,-8(fp)
    7c88:	e17fee04 	addi	r5,fp,-72
    7c8c:	1809883a 	mov	r4,r3
    7c90:	003b0780 	call	3b078 <secp256k1_ec_pubkey_parse>
    7c94:	1000061e 	bne	r2,zero,7cb0 <btc_ecc_verify_pubkey+0x8c>
        memset(&pubkey, 0, sizeof(pubkey));
    7c98:	01801004 	movi	r6,64
    7c9c:	000b883a 	mov	r5,zero
    7ca0:	e13fee04 	addi	r4,fp,-72
    7ca4:	00464200 	call	46420 <memset>
        return false;
    7ca8:	0005883a 	mov	r2,zero
    7cac:	00000506 	br	7cc4 <btc_ecc_verify_pubkey+0xa0>
    }

    memset(&pubkey, 0, sizeof(pubkey));
    7cb0:	01801004 	movi	r6,64
    7cb4:	000b883a 	mov	r5,zero
    7cb8:	e13fee04 	addi	r4,fp,-72
    7cbc:	00464200 	call	46420 <memset>
    return true;
    7cc0:	00800044 	movi	r2,1
}
    7cc4:	e037883a 	mov	sp,fp
    7cc8:	dfc00117 	ldw	ra,4(sp)
    7ccc:	df000017 	ldw	fp,0(sp)
    7cd0:	dec00204 	addi	sp,sp,8
    7cd4:	f800283a 	ret

00007cd8 <btc_ecc_sign>:

btc_bool btc_ecc_sign(const uint8_t* private_key, const uint256 hash, unsigned char* sigder, size_t* outlen)
{
    7cd8:	deffe804 	addi	sp,sp,-96
    7cdc:	dfc01715 	stw	ra,92(sp)
    7ce0:	df001615 	stw	fp,88(sp)
    7ce4:	df001604 	addi	fp,sp,88
    7ce8:	e13ffc15 	stw	r4,-16(fp)
    7cec:	e17ffd15 	stw	r5,-12(fp)
    7cf0:	e1bffe15 	stw	r6,-8(fp)
    7cf4:	e1ffff15 	stw	r7,-4(fp)
    assert(secp256k1_ctx);
    7cf8:	d0a54817 	ldw	r2,-27360(gp)
    7cfc:	1000081e 	bne	r2,zero,7d20 <btc_ecc_sign+0x48>
    7d00:	01c00174 	movhi	r7,5
    7d04:	39d10d04 	addi	r7,r7,17460
    7d08:	01800174 	movhi	r6,5
    7d0c:	31914204 	addi	r6,r6,17672
    7d10:	01401a04 	movi	r5,104
    7d14:	01000174 	movhi	r4,5
    7d18:	2110fd04 	addi	r4,r4,17396
    7d1c:	0045fec0 	call	45fec <__assert_func>

    secp256k1_ecdsa_signature sig;
    if (!secp256k1_ecdsa_sign(secp256k1_ctx, &sig, hash, private_key, secp256k1_nonce_function_rfc6979, NULL))
    7d20:	d0e54817 	ldw	r3,-27360(gp)
    7d24:	d0a00d17 	ldw	r2,-32716(gp)
    7d28:	d8000115 	stw	zero,4(sp)
    7d2c:	d8800015 	stw	r2,0(sp)
    7d30:	e1fffc17 	ldw	r7,-16(fp)
    7d34:	e1bffd17 	ldw	r6,-12(fp)
    7d38:	e17fec04 	addi	r5,fp,-80
    7d3c:	1809883a 	mov	r4,r3
    7d40:	003bd6c0 	call	3bd6c <secp256k1_ecdsa_sign>
    7d44:	1000021e 	bne	r2,zero,7d50 <btc_ecc_sign+0x78>
        return 0;
    7d48:	0005883a 	mov	r2,zero
    7d4c:	00000a06 	br	7d78 <btc_ecc_sign+0xa0>

    if (!secp256k1_ecdsa_signature_serialize_der(secp256k1_ctx, sigder, outlen, &sig))
    7d50:	d0a54817 	ldw	r2,-27360(gp)
    7d54:	e1ffec04 	addi	r7,fp,-80
    7d58:	e1bfff17 	ldw	r6,-4(fp)
    7d5c:	e17ffe17 	ldw	r5,-8(fp)
    7d60:	1009883a 	mov	r4,r2
    7d64:	003b7080 	call	3b708 <secp256k1_ecdsa_signature_serialize_der>
    7d68:	1000021e 	bne	r2,zero,7d74 <btc_ecc_sign+0x9c>
        return 0;
    7d6c:	0005883a 	mov	r2,zero
    7d70:	00000106 	br	7d78 <btc_ecc_sign+0xa0>

    return 1;
    7d74:	00800044 	movi	r2,1
}
    7d78:	e037883a 	mov	sp,fp
    7d7c:	dfc00117 	ldw	ra,4(sp)
    7d80:	df000017 	ldw	fp,0(sp)
    7d84:	dec00204 	addi	sp,sp,8
    7d88:	f800283a 	ret

00007d8c <btc_ecc_sign_compact>:

btc_bool btc_ecc_sign_compact(const uint8_t* private_key, const uint256 hash, unsigned char* sigcomp, size_t* outlen)
{
    7d8c:	deffe804 	addi	sp,sp,-96
    7d90:	dfc01715 	stw	ra,92(sp)
    7d94:	df001615 	stw	fp,88(sp)
    7d98:	df001604 	addi	fp,sp,88
    7d9c:	e13ffc15 	stw	r4,-16(fp)
    7da0:	e17ffd15 	stw	r5,-12(fp)
    7da4:	e1bffe15 	stw	r6,-8(fp)
    7da8:	e1ffff15 	stw	r7,-4(fp)
    assert(secp256k1_ctx);
    7dac:	d0a54817 	ldw	r2,-27360(gp)
    7db0:	1000081e 	bne	r2,zero,7dd4 <btc_ecc_sign_compact+0x48>
    7db4:	01c00174 	movhi	r7,5
    7db8:	39d10d04 	addi	r7,r7,17460
    7dbc:	01800174 	movhi	r6,5
    7dc0:	31914604 	addi	r6,r6,17688
    7dc4:	01401d84 	movi	r5,118
    7dc8:	01000174 	movhi	r4,5
    7dcc:	2110fd04 	addi	r4,r4,17396
    7dd0:	0045fec0 	call	45fec <__assert_func>

    secp256k1_ecdsa_signature sig;
    if (!secp256k1_ecdsa_sign(secp256k1_ctx, &sig, hash, private_key, secp256k1_nonce_function_rfc6979, NULL))
    7dd4:	d0e54817 	ldw	r3,-27360(gp)
    7dd8:	d0a00d17 	ldw	r2,-32716(gp)
    7ddc:	d8000115 	stw	zero,4(sp)
    7de0:	d8800015 	stw	r2,0(sp)
    7de4:	e1fffc17 	ldw	r7,-16(fp)
    7de8:	e1bffd17 	ldw	r6,-12(fp)
    7dec:	e17fec04 	addi	r5,fp,-80
    7df0:	1809883a 	mov	r4,r3
    7df4:	003bd6c0 	call	3bd6c <secp256k1_ecdsa_sign>
    7df8:	1000021e 	bne	r2,zero,7e04 <btc_ecc_sign_compact+0x78>
        return 0;
    7dfc:	0005883a 	mov	r2,zero
    7e00:	00000c06 	br	7e34 <btc_ecc_sign_compact+0xa8>

    *outlen = 64;
    7e04:	e0bfff17 	ldw	r2,-4(fp)
    7e08:	00c01004 	movi	r3,64
    7e0c:	10c00015 	stw	r3,0(r2)
    if (!secp256k1_ecdsa_signature_serialize_compact(secp256k1_ctx, sigcomp, &sig))
    7e10:	d0a54817 	ldw	r2,-27360(gp)
    7e14:	e1bfec04 	addi	r6,fp,-80
    7e18:	e17ffe17 	ldw	r5,-8(fp)
    7e1c:	1009883a 	mov	r4,r2
    7e20:	003b8400 	call	3b840 <secp256k1_ecdsa_signature_serialize_compact>
    7e24:	1000021e 	bne	r2,zero,7e30 <btc_ecc_sign_compact+0xa4>
        return 0;
    7e28:	0005883a 	mov	r2,zero
    7e2c:	00000106 	br	7e34 <btc_ecc_sign_compact+0xa8>

    return 1;
    7e30:	00800044 	movi	r2,1
}
    7e34:	e037883a 	mov	sp,fp
    7e38:	dfc00117 	ldw	ra,4(sp)
    7e3c:	df000017 	ldw	fp,0(sp)
    7e40:	dec00204 	addi	sp,sp,8
    7e44:	f800283a 	ret

00007e48 <btc_ecc_sign_compact_recoverable>:

btc_bool btc_ecc_sign_compact_recoverable(const uint8_t* private_key, const uint256 hash, unsigned char* sigrec, size_t* outlen, int *recid)
{
    7e48:	deffe704 	addi	sp,sp,-100
    7e4c:	dfc01815 	stw	ra,96(sp)
    7e50:	df001715 	stw	fp,92(sp)
    7e54:	df001704 	addi	fp,sp,92
    7e58:	e13ffc15 	stw	r4,-16(fp)
    7e5c:	e17ffd15 	stw	r5,-12(fp)
    7e60:	e1bffe15 	stw	r6,-8(fp)
    7e64:	e1ffff15 	stw	r7,-4(fp)
    assert(secp256k1_ctx);
    7e68:	d0a54817 	ldw	r2,-27360(gp)
    7e6c:	1000081e 	bne	r2,zero,7e90 <btc_ecc_sign_compact_recoverable+0x48>
    7e70:	01c00174 	movhi	r7,5
    7e74:	39d10d04 	addi	r7,r7,17460
    7e78:	01800174 	movhi	r6,5
    7e7c:	31914c04 	addi	r6,r6,17712
    7e80:	01402144 	movi	r5,133
    7e84:	01000174 	movhi	r4,5
    7e88:	2110fd04 	addi	r4,r4,17396
    7e8c:	0045fec0 	call	45fec <__assert_func>

    secp256k1_ecdsa_recoverable_signature sig;
    if (!secp256k1_ecdsa_sign_recoverable(secp256k1_ctx, &sig, hash, private_key, secp256k1_nonce_function_rfc6979, NULL))
    7e90:	d0e54817 	ldw	r3,-27360(gp)
    7e94:	d0a00d17 	ldw	r2,-32716(gp)
    7e98:	d8000115 	stw	zero,4(sp)
    7e9c:	d8800015 	stw	r2,0(sp)
    7ea0:	e1fffc17 	ldw	r7,-16(fp)
    7ea4:	e1bffd17 	ldw	r6,-12(fp)
    7ea8:	e17feb04 	addi	r5,fp,-84
    7eac:	1809883a 	mov	r4,r3
    7eb0:	003d1d40 	call	3d1d4 <secp256k1_ecdsa_sign_recoverable>
    7eb4:	1000021e 	bne	r2,zero,7ec0 <btc_ecc_sign_compact_recoverable+0x78>
        return 0;
    7eb8:	0005883a 	mov	r2,zero
    7ebc:	00000d06 	br	7ef4 <btc_ecc_sign_compact_recoverable+0xac>

    *outlen = 65;
    7ec0:	e0bfff17 	ldw	r2,-4(fp)
    7ec4:	00c01044 	movi	r3,65
    7ec8:	10c00015 	stw	r3,0(r2)
    if (!secp256k1_ecdsa_recoverable_signature_serialize_compact(secp256k1_ctx, sigrec, recid, &sig))
    7ecc:	d0a54817 	ldw	r2,-27360(gp)
    7ed0:	e1ffeb04 	addi	r7,fp,-84
    7ed4:	e1800217 	ldw	r6,8(fp)
    7ed8:	e17ffe17 	ldw	r5,-8(fp)
    7edc:	1009883a 	mov	r4,r2
    7ee0:	003ce1c0 	call	3ce1c <secp256k1_ecdsa_recoverable_signature_serialize_compact>
    7ee4:	1000021e 	bne	r2,zero,7ef0 <btc_ecc_sign_compact_recoverable+0xa8>
        return 0;
    7ee8:	0005883a 	mov	r2,zero
    7eec:	00000106 	br	7ef4 <btc_ecc_sign_compact_recoverable+0xac>

    return 1;
    7ef0:	00800044 	movi	r2,1
}
    7ef4:	e037883a 	mov	sp,fp
    7ef8:	dfc00117 	ldw	ra,4(sp)
    7efc:	df000017 	ldw	fp,0(sp)
    7f00:	dec00204 	addi	sp,sp,8
    7f04:	f800283a 	ret

00007f08 <btc_ecc_recover_pubkey>:

btc_bool btc_ecc_recover_pubkey(const unsigned char* sigrec, const uint256 hash, const int recid, uint8_t* public_key, size_t *outlen)
{
    7f08:	deffd804 	addi	sp,sp,-160
    7f0c:	dfc02715 	stw	ra,156(sp)
    7f10:	df002615 	stw	fp,152(sp)
    7f14:	df002604 	addi	fp,sp,152
    7f18:	e13ffc15 	stw	r4,-16(fp)
    7f1c:	e17ffd15 	stw	r5,-12(fp)
    7f20:	e1bffe15 	stw	r6,-8(fp)
    7f24:	e1ffff15 	stw	r7,-4(fp)
    assert(secp256k1_ctx);
    7f28:	d0a54817 	ldw	r2,-27360(gp)
    7f2c:	1000081e 	bne	r2,zero,7f50 <btc_ecc_recover_pubkey+0x48>
    7f30:	01c00174 	movhi	r7,5
    7f34:	39d10d04 	addi	r7,r7,17460
    7f38:	01800174 	movhi	r6,5
    7f3c:	31915504 	addi	r6,r6,17748
    7f40:	01402504 	movi	r5,148
    7f44:	01000174 	movhi	r4,5
    7f48:	2110fd04 	addi	r4,r4,17396
    7f4c:	0045fec0 	call	45fec <__assert_func>

    secp256k1_pubkey pubkey;
    secp256k1_ecdsa_recoverable_signature sig;

    if (!secp256k1_ecdsa_recoverable_signature_parse_compact(secp256k1_ctx, &sig, sigrec, recid))
    7f50:	d0a54817 	ldw	r2,-27360(gp)
    7f54:	e0ffeb04 	addi	r3,fp,-84
    7f58:	e1fffe17 	ldw	r7,-8(fp)
    7f5c:	e1bffc17 	ldw	r6,-16(fp)
    7f60:	180b883a 	mov	r5,r3
    7f64:	1009883a 	mov	r4,r2
    7f68:	003cc980 	call	3cc98 <secp256k1_ecdsa_recoverable_signature_parse_compact>
    7f6c:	1000021e 	bne	r2,zero,7f78 <btc_ecc_recover_pubkey+0x70>
        return false;
    7f70:	0005883a 	mov	r2,zero
    7f74:	00001606 	br	7fd0 <btc_ecc_recover_pubkey+0xc8>

    if (!secp256k1_ecdsa_recover(secp256k1_ctx, &pubkey, &sig, hash))
    7f78:	d0a54817 	ldw	r2,-27360(gp)
    7f7c:	e0ffeb04 	addi	r3,fp,-84
    7f80:	e1fffd17 	ldw	r7,-12(fp)
    7f84:	180d883a 	mov	r6,r3
    7f88:	e17fdb04 	addi	r5,fp,-148
    7f8c:	1009883a 	mov	r4,r2
    7f90:	003d4c00 	call	3d4c0 <secp256k1_ecdsa_recover>
    7f94:	1000021e 	bne	r2,zero,7fa0 <btc_ecc_recover_pubkey+0x98>
        return 0;
    7f98:	0005883a 	mov	r2,zero
    7f9c:	00000c06 	br	7fd0 <btc_ecc_recover_pubkey+0xc8>

    if (!secp256k1_ec_pubkey_serialize(secp256k1_ctx, public_key, outlen, &pubkey, SECP256K1_EC_COMPRESSED))
    7fa0:	d0e54817 	ldw	r3,-27360(gp)
    7fa4:	00804084 	movi	r2,258
    7fa8:	d8800015 	stw	r2,0(sp)
    7fac:	e1ffdb04 	addi	r7,fp,-148
    7fb0:	e1800217 	ldw	r6,8(fp)
    7fb4:	e17fff17 	ldw	r5,-4(fp)
    7fb8:	1809883a 	mov	r4,r3
    7fbc:	003b1940 	call	3b194 <secp256k1_ec_pubkey_serialize>
    7fc0:	1000021e 	bne	r2,zero,7fcc <btc_ecc_recover_pubkey+0xc4>
        return 0;
    7fc4:	0005883a 	mov	r2,zero
    7fc8:	00000106 	br	7fd0 <btc_ecc_recover_pubkey+0xc8>

    return 1;
    7fcc:	00800044 	movi	r2,1
}
    7fd0:	e037883a 	mov	sp,fp
    7fd4:	dfc00117 	ldw	ra,4(sp)
    7fd8:	df000017 	ldw	fp,0(sp)
    7fdc:	dec00204 	addi	sp,sp,8
    7fe0:	f800283a 	ret

00007fe4 <btc_ecc_verify_sig>:

btc_bool btc_ecc_verify_sig(const uint8_t* public_key, btc_bool compressed, const uint256 hash, unsigned char* sigder, size_t siglen)
{
    7fe4:	deffda04 	addi	sp,sp,-152
    7fe8:	dfc02515 	stw	ra,148(sp)
    7fec:	df002415 	stw	fp,144(sp)
    7ff0:	df002404 	addi	fp,sp,144
    7ff4:	e13ffc15 	stw	r4,-16(fp)
    7ff8:	2805883a 	mov	r2,r5
    7ffc:	e1bffe15 	stw	r6,-8(fp)
    8000:	e1ffff15 	stw	r7,-4(fp)
    8004:	e0bffd05 	stb	r2,-12(fp)
    assert(secp256k1_ctx);
    8008:	d0a54817 	ldw	r2,-27360(gp)
    800c:	1000081e 	bne	r2,zero,8030 <btc_ecc_verify_sig+0x4c>
    8010:	01c00174 	movhi	r7,5
    8014:	39d10d04 	addi	r7,r7,17460
    8018:	01800174 	movhi	r6,5
    801c:	31915b04 	addi	r6,r6,17772
    8020:	014029c4 	movi	r5,167
    8024:	01000174 	movhi	r4,5
    8028:	2110fd04 	addi	r4,r4,17396
    802c:	0045fec0 	call	45fec <__assert_func>

    secp256k1_ecdsa_signature sig;
    secp256k1_pubkey pubkey;

    if (!secp256k1_ec_pubkey_parse(secp256k1_ctx, &pubkey, public_key, compressed ? 33 : 65))
    8030:	d0e54817 	ldw	r3,-27360(gp)
    8034:	e0bffd03 	ldbu	r2,-12(fp)
    8038:	10000226 	beq	r2,zero,8044 <btc_ecc_verify_sig+0x60>
    803c:	00800844 	movi	r2,33
    8040:	00000106 	br	8048 <btc_ecc_verify_sig+0x64>
    8044:	00801044 	movi	r2,65
    8048:	e13fec04 	addi	r4,fp,-80
    804c:	100f883a 	mov	r7,r2
    8050:	e1bffc17 	ldw	r6,-16(fp)
    8054:	200b883a 	mov	r5,r4
    8058:	1809883a 	mov	r4,r3
    805c:	003b0780 	call	3b078 <secp256k1_ec_pubkey_parse>
    8060:	1000021e 	bne	r2,zero,806c <btc_ecc_verify_sig+0x88>
        return false;
    8064:	0005883a 	mov	r2,zero
    8068:	00001006 	br	80ac <btc_ecc_verify_sig+0xc8>

    if (!secp256k1_ecdsa_signature_parse_der(secp256k1_ctx, &sig, sigder, siglen))
    806c:	d0a54817 	ldw	r2,-27360(gp)
    8070:	e1c00217 	ldw	r7,8(fp)
    8074:	e1bfff17 	ldw	r6,-4(fp)
    8078:	e17fdc04 	addi	r5,fp,-144
    807c:	1009883a 	mov	r4,r2
    8080:	003b4640 	call	3b464 <secp256k1_ecdsa_signature_parse_der>
    8084:	1000021e 	bne	r2,zero,8090 <btc_ecc_verify_sig+0xac>
        return false;
    8088:	0005883a 	mov	r2,zero
    808c:	00000706 	br	80ac <btc_ecc_verify_sig+0xc8>

    return secp256k1_ecdsa_verify(secp256k1_ctx, &sig, hash, &pubkey);
    8090:	d0a54817 	ldw	r2,-27360(gp)
    8094:	e0ffec04 	addi	r3,fp,-80
    8098:	180f883a 	mov	r7,r3
    809c:	e1bffe17 	ldw	r6,-8(fp)
    80a0:	e17fdc04 	addi	r5,fp,-144
    80a4:	1009883a 	mov	r4,r2
    80a8:	003ba680 	call	3ba68 <secp256k1_ecdsa_verify>
}
    80ac:	e037883a 	mov	sp,fp
    80b0:	dfc00117 	ldw	ra,4(sp)
    80b4:	df000017 	ldw	fp,0(sp)
    80b8:	dec00204 	addi	sp,sp,8
    80bc:	f800283a 	ret

000080c0 <btc_ecc_compact_to_der_normalized>:

btc_bool btc_ecc_compact_to_der_normalized(unsigned char* sigcomp_in, unsigned char* sigder_out, size_t* sigder_len_out)
{
    80c0:	deffdb04 	addi	sp,sp,-148
    80c4:	dfc02415 	stw	ra,144(sp)
    80c8:	df002315 	stw	fp,140(sp)
    80cc:	df002304 	addi	fp,sp,140
    80d0:	e13ffd15 	stw	r4,-12(fp)
    80d4:	e17ffe15 	stw	r5,-8(fp)
    80d8:	e1bfff15 	stw	r6,-4(fp)
    assert(secp256k1_ctx);
    80dc:	d0a54817 	ldw	r2,-27360(gp)
    80e0:	1000081e 	bne	r2,zero,8104 <btc_ecc_compact_to_der_normalized+0x44>
    80e4:	01c00174 	movhi	r7,5
    80e8:	39d10d04 	addi	r7,r7,17460
    80ec:	01800174 	movhi	r6,5
    80f0:	31916004 	addi	r6,r6,17792
    80f4:	01402dc4 	movi	r5,183
    80f8:	01000174 	movhi	r4,5
    80fc:	2110fd04 	addi	r4,r4,17396
    8100:	0045fec0 	call	45fec <__assert_func>

    secp256k1_ecdsa_signature sig;
    if (!secp256k1_ecdsa_signature_parse_compact(secp256k1_ctx, &sig, sigcomp_in))
    8104:	d0a54817 	ldw	r2,-27360(gp)
    8108:	e1bffd17 	ldw	r6,-12(fp)
    810c:	e17fdd04 	addi	r5,fp,-140
    8110:	1009883a 	mov	r4,r2
    8114:	003b5880 	call	3b588 <secp256k1_ecdsa_signature_parse_compact>
    8118:	1000021e 	bne	r2,zero,8124 <btc_ecc_compact_to_der_normalized+0x64>
        return false;
    811c:	0005883a 	mov	r2,zero
    8120:	00000d06 	br	8158 <btc_ecc_compact_to_der_normalized+0x98>

    secp256k1_ecdsa_signature sigNorm;
    secp256k1_ecdsa_signature_normalize(secp256k1_ctx, &sigNorm, &sig);
    8124:	d0a54817 	ldw	r2,-27360(gp)
    8128:	e0ffed04 	addi	r3,fp,-76
    812c:	e1bfdd04 	addi	r6,fp,-140
    8130:	180b883a 	mov	r5,r3
    8134:	1009883a 	mov	r4,r2
    8138:	003b9540 	call	3b954 <secp256k1_ecdsa_signature_normalize>

    return secp256k1_ecdsa_signature_serialize_der(secp256k1_ctx, sigder_out, sigder_len_out, &sigNorm);
    813c:	d0a54817 	ldw	r2,-27360(gp)
    8140:	e0ffed04 	addi	r3,fp,-76
    8144:	180f883a 	mov	r7,r3
    8148:	e1bfff17 	ldw	r6,-4(fp)
    814c:	e17ffe17 	ldw	r5,-8(fp)
    8150:	1009883a 	mov	r4,r2
    8154:	003b7080 	call	3b708 <secp256k1_ecdsa_signature_serialize_der>
}
    8158:	e037883a 	mov	sp,fp
    815c:	dfc00117 	ldw	ra,4(sp)
    8160:	df000017 	ldw	fp,0(sp)
    8164:	dec00204 	addi	sp,sp,8
    8168:	f800283a 	ret

0000816c <btc_ecc_der_to_compact>:

btc_bool btc_ecc_der_to_compact(unsigned char* sigder_in, size_t sigder_len, unsigned char* sigcomp_out)
{
    816c:	deffeb04 	addi	sp,sp,-84
    8170:	dfc01415 	stw	ra,80(sp)
    8174:	df001315 	stw	fp,76(sp)
    8178:	df001304 	addi	fp,sp,76
    817c:	e13ffd15 	stw	r4,-12(fp)
    8180:	e17ffe15 	stw	r5,-8(fp)
    8184:	e1bfff15 	stw	r6,-4(fp)
    assert(secp256k1_ctx);
    8188:	d0a54817 	ldw	r2,-27360(gp)
    818c:	1000081e 	bne	r2,zero,81b0 <btc_ecc_der_to_compact+0x44>
    8190:	01c00174 	movhi	r7,5
    8194:	39d10d04 	addi	r7,r7,17460
    8198:	01800174 	movhi	r6,5
    819c:	31916904 	addi	r6,r6,17828
    81a0:	01403144 	movi	r5,197
    81a4:	01000174 	movhi	r4,5
    81a8:	2110fd04 	addi	r4,r4,17396
    81ac:	0045fec0 	call	45fec <__assert_func>

    secp256k1_ecdsa_signature sig;
    if (!secp256k1_ecdsa_signature_parse_der(secp256k1_ctx, &sig, sigder_in, sigder_len))
    81b0:	d0a54817 	ldw	r2,-27360(gp)
    81b4:	e1fffe17 	ldw	r7,-8(fp)
    81b8:	e1bffd17 	ldw	r6,-12(fp)
    81bc:	e17fed04 	addi	r5,fp,-76
    81c0:	1009883a 	mov	r4,r2
    81c4:	003b4640 	call	3b464 <secp256k1_ecdsa_signature_parse_der>
    81c8:	1000021e 	bne	r2,zero,81d4 <btc_ecc_der_to_compact+0x68>
        return false;
    81cc:	0005883a 	mov	r2,zero
    81d0:	00000506 	br	81e8 <btc_ecc_der_to_compact+0x7c>

    return secp256k1_ecdsa_signature_serialize_compact(secp256k1_ctx, sigcomp_out, &sig);
    81d4:	d0a54817 	ldw	r2,-27360(gp)
    81d8:	e1bfed04 	addi	r6,fp,-76
    81dc:	e17fff17 	ldw	r5,-4(fp)
    81e0:	1009883a 	mov	r4,r2
    81e4:	003b8400 	call	3b840 <secp256k1_ecdsa_signature_serialize_compact>
}
    81e8:	e037883a 	mov	sp,fp
    81ec:	dfc00117 	ldw	ra,4(sp)
    81f0:	df000017 	ldw	fp,0(sp)
    81f4:	dec00204 	addi	sp,sp,8
    81f8:	f800283a 	ret

000081fc <btc_mem_set_mapper_default>:

static const btc_mem_mapper default_mem_mapper = {btc_malloc_internal, btc_calloc_internal, btc_realloc_internal, btc_free_internal};
static btc_mem_mapper current_mem_mapper = {btc_malloc_internal, btc_calloc_internal, btc_realloc_internal, btc_free_internal};

void btc_mem_set_mapper_default()
{
    81fc:	deffff04 	addi	sp,sp,-4
    8200:	df000015 	stw	fp,0(sp)
    8204:	d839883a 	mov	fp,sp
    current_mem_mapper = default_mem_mapper;
    8208:	00800174 	movhi	r2,5
    820c:	109b7404 	addi	r2,r2,28112
    8210:	00c00074 	movhi	r3,1
    8214:	18e0f204 	addi	r3,r3,-31800
    8218:	10c00015 	stw	r3,0(r2)
    821c:	00800174 	movhi	r2,5
    8220:	109b7404 	addi	r2,r2,28112
    8224:	00c00074 	movhi	r3,1
    8228:	18e10b04 	addi	r3,r3,-31700
    822c:	10c00115 	stw	r3,4(r2)
    8230:	00800174 	movhi	r2,5
    8234:	109b7404 	addi	r2,r2,28112
    8238:	00c00074 	movhi	r3,1
    823c:	18e12604 	addi	r3,r3,-31592
    8240:	10c00215 	stw	r3,8(r2)
    8244:	00800174 	movhi	r2,5
    8248:	109b7404 	addi	r2,r2,28112
    824c:	00c00074 	movhi	r3,1
    8250:	18e14104 	addi	r3,r3,-31484
    8254:	10c00315 	stw	r3,12(r2)
}
    8258:	0001883a 	nop
    825c:	e037883a 	mov	sp,fp
    8260:	df000017 	ldw	fp,0(sp)
    8264:	dec00104 	addi	sp,sp,4
    8268:	f800283a 	ret

0000826c <btc_mem_set_mapper>:

void btc_mem_set_mapper(const btc_mem_mapper mapper)
{
    826c:	defffb04 	addi	sp,sp,-20
    8270:	df000415 	stw	fp,16(sp)
    8274:	df000404 	addi	fp,sp,16
    8278:	e13ffc15 	stw	r4,-16(fp)
    827c:	e17ffd15 	stw	r5,-12(fp)
    8280:	e1bffe15 	stw	r6,-8(fp)
    8284:	e1ffff15 	stw	r7,-4(fp)
    current_mem_mapper = mapper;
    8288:	00800174 	movhi	r2,5
    828c:	109b7404 	addi	r2,r2,28112
    8290:	e0fffc17 	ldw	r3,-16(fp)
    8294:	10c00015 	stw	r3,0(r2)
    8298:	e0fffd17 	ldw	r3,-12(fp)
    829c:	10c00115 	stw	r3,4(r2)
    82a0:	e0fffe17 	ldw	r3,-8(fp)
    82a4:	10c00215 	stw	r3,8(r2)
    82a8:	e0ffff17 	ldw	r3,-4(fp)
    82ac:	10c00315 	stw	r3,12(r2)
}
    82b0:	0001883a 	nop
    82b4:	e037883a 	mov	sp,fp
    82b8:	df000017 	ldw	fp,0(sp)
    82bc:	dec00104 	addi	sp,sp,4
    82c0:	f800283a 	ret

000082c4 <btc_malloc>:

void* btc_malloc(size_t size)
{
    82c4:	defffd04 	addi	sp,sp,-12
    82c8:	dfc00215 	stw	ra,8(sp)
    82cc:	df000115 	stw	fp,4(sp)
    82d0:	df000104 	addi	fp,sp,4
    82d4:	e13fff15 	stw	r4,-4(fp)
    return current_mem_mapper.btc_malloc(size);
    82d8:	00800174 	movhi	r2,5
    82dc:	109b7404 	addi	r2,r2,28112
    82e0:	10800017 	ldw	r2,0(r2)
    82e4:	e13fff17 	ldw	r4,-4(fp)
    82e8:	103ee83a 	callr	r2
}
    82ec:	e037883a 	mov	sp,fp
    82f0:	dfc00117 	ldw	ra,4(sp)
    82f4:	df000017 	ldw	fp,0(sp)
    82f8:	dec00204 	addi	sp,sp,8
    82fc:	f800283a 	ret

00008300 <btc_calloc>:

void* btc_calloc(size_t count, size_t size)
{
    8300:	defffc04 	addi	sp,sp,-16
    8304:	dfc00315 	stw	ra,12(sp)
    8308:	df000215 	stw	fp,8(sp)
    830c:	df000204 	addi	fp,sp,8
    8310:	e13ffe15 	stw	r4,-8(fp)
    8314:	e17fff15 	stw	r5,-4(fp)
    return current_mem_mapper.btc_calloc(count, size);
    8318:	00800174 	movhi	r2,5
    831c:	109b7404 	addi	r2,r2,28112
    8320:	10800117 	ldw	r2,4(r2)
    8324:	e17fff17 	ldw	r5,-4(fp)
    8328:	e13ffe17 	ldw	r4,-8(fp)
    832c:	103ee83a 	callr	r2
}
    8330:	e037883a 	mov	sp,fp
    8334:	dfc00117 	ldw	ra,4(sp)
    8338:	df000017 	ldw	fp,0(sp)
    833c:	dec00204 	addi	sp,sp,8
    8340:	f800283a 	ret

00008344 <btc_realloc>:

void* btc_realloc(void *ptr, size_t size)
{
    8344:	defffc04 	addi	sp,sp,-16
    8348:	dfc00315 	stw	ra,12(sp)
    834c:	df000215 	stw	fp,8(sp)
    8350:	df000204 	addi	fp,sp,8
    8354:	e13ffe15 	stw	r4,-8(fp)
    8358:	e17fff15 	stw	r5,-4(fp)
    return current_mem_mapper.btc_realloc(ptr, size);
    835c:	00800174 	movhi	r2,5
    8360:	109b7404 	addi	r2,r2,28112
    8364:	10800217 	ldw	r2,8(r2)
    8368:	e17fff17 	ldw	r5,-4(fp)
    836c:	e13ffe17 	ldw	r4,-8(fp)
    8370:	103ee83a 	callr	r2
}
    8374:	e037883a 	mov	sp,fp
    8378:	dfc00117 	ldw	ra,4(sp)
    837c:	df000017 	ldw	fp,0(sp)
    8380:	dec00204 	addi	sp,sp,8
    8384:	f800283a 	ret

00008388 <btc_free>:

void btc_free(void* ptr)
{
    8388:	defffd04 	addi	sp,sp,-12
    838c:	dfc00215 	stw	ra,8(sp)
    8390:	df000115 	stw	fp,4(sp)
    8394:	df000104 	addi	fp,sp,4
    8398:	e13fff15 	stw	r4,-4(fp)
    current_mem_mapper.btc_free(ptr);
    839c:	00800174 	movhi	r2,5
    83a0:	109b7404 	addi	r2,r2,28112
    83a4:	10800317 	ldw	r2,12(r2)
    83a8:	e13fff17 	ldw	r4,-4(fp)
    83ac:	103ee83a 	callr	r2
}
    83b0:	0001883a 	nop
    83b4:	e037883a 	mov	sp,fp
    83b8:	dfc00117 	ldw	ra,4(sp)
    83bc:	df000017 	ldw	fp,0(sp)
    83c0:	dec00204 	addi	sp,sp,8
    83c4:	f800283a 	ret

000083c8 <btc_malloc_internal>:

void* btc_malloc_internal(size_t size)
{
    83c8:	defffc04 	addi	sp,sp,-16
    83cc:	dfc00315 	stw	ra,12(sp)
    83d0:	df000215 	stw	fp,8(sp)
    83d4:	df000204 	addi	fp,sp,8
    83d8:	e13fff15 	stw	r4,-4(fp)
    void* result;

    if ((result = malloc(size))) { /* assignment intentional */
    83dc:	e13fff17 	ldw	r4,-4(fp)
    83e0:	00463400 	call	46340 <malloc>
    83e4:	e0bffe15 	stw	r2,-8(fp)
    83e8:	e0bffe17 	ldw	r2,-8(fp)
    83ec:	10000226 	beq	r2,zero,83f8 <btc_malloc_internal+0x30>
        return (result);
    83f0:	e0bffe17 	ldw	r2,-8(fp)
    83f4:	00000806 	br	8418 <btc_malloc_internal+0x50>
    } else {
        printf("memory overflow: malloc failed in btc_malloc.");
    83f8:	01000174 	movhi	r4,5
    83fc:	21117304 	addi	r4,r4,17868
    8400:	00467040 	call	46704 <printf>
        printf("  Exiting Program.\n");
    8404:	01000174 	movhi	r4,5
    8408:	21117f04 	addi	r4,r4,17916
    840c:	00467d00 	call	467d0 <puts>
        exit(-1);
    8410:	013fffc4 	movi	r4,-1
    8414:	004607c0 	call	4607c <exit>
        return (0);
    }
}
    8418:	e037883a 	mov	sp,fp
    841c:	dfc00117 	ldw	ra,4(sp)
    8420:	df000017 	ldw	fp,0(sp)
    8424:	dec00204 	addi	sp,sp,8
    8428:	f800283a 	ret

0000842c <btc_calloc_internal>:

void* btc_calloc_internal(size_t count, size_t size)
{
    842c:	defffb04 	addi	sp,sp,-20
    8430:	dfc00415 	stw	ra,16(sp)
    8434:	df000315 	stw	fp,12(sp)
    8438:	df000304 	addi	fp,sp,12
    843c:	e13ffe15 	stw	r4,-8(fp)
    8440:	e17fff15 	stw	r5,-4(fp)
    void* result;

    if ((result = calloc(count, size))) { /* assignment intentional */
    8444:	e17fff17 	ldw	r5,-4(fp)
    8448:	e13ffe17 	ldw	r4,-8(fp)
    844c:	00460640 	call	46064 <calloc>
    8450:	e0bffd15 	stw	r2,-12(fp)
    8454:	e0bffd17 	ldw	r2,-12(fp)
    8458:	10000226 	beq	r2,zero,8464 <btc_calloc_internal+0x38>
        return (result);
    845c:	e0bffd17 	ldw	r2,-12(fp)
    8460:	00000806 	br	8484 <btc_calloc_internal+0x58>
    } else {
        printf("memory overflow: calloc failed in btc_malloc.");
    8464:	01000174 	movhi	r4,5
    8468:	21118404 	addi	r4,r4,17936
    846c:	00467040 	call	46704 <printf>
        printf("  Exiting Program.\n");
    8470:	01000174 	movhi	r4,5
    8474:	21117f04 	addi	r4,r4,17916
    8478:	00467d00 	call	467d0 <puts>
        exit(-1);
    847c:	013fffc4 	movi	r4,-1
    8480:	004607c0 	call	4607c <exit>
        return (0);
    }
}
    8484:	e037883a 	mov	sp,fp
    8488:	dfc00117 	ldw	ra,4(sp)
    848c:	df000017 	ldw	fp,0(sp)
    8490:	dec00204 	addi	sp,sp,8
    8494:	f800283a 	ret

00008498 <btc_realloc_internal>:

void* btc_realloc_internal(void *ptr, size_t size)
{
    8498:	defffb04 	addi	sp,sp,-20
    849c:	dfc00415 	stw	ra,16(sp)
    84a0:	df000315 	stw	fp,12(sp)
    84a4:	df000304 	addi	fp,sp,12
    84a8:	e13ffe15 	stw	r4,-8(fp)
    84ac:	e17fff15 	stw	r5,-4(fp)
    void* result;

    if ((result = realloc(ptr, size))) { /* assignment intentional */
    84b0:	e17fff17 	ldw	r5,-4(fp)
    84b4:	e13ffe17 	ldw	r4,-8(fp)
    84b8:	00468580 	call	46858 <realloc>
    84bc:	e0bffd15 	stw	r2,-12(fp)
    84c0:	e0bffd17 	ldw	r2,-12(fp)
    84c4:	10000226 	beq	r2,zero,84d0 <btc_realloc_internal+0x38>
        return (result);
    84c8:	e0bffd17 	ldw	r2,-12(fp)
    84cc:	00000806 	br	84f0 <btc_realloc_internal+0x58>
    } else {
        printf("memory overflow: calloc failed in btc_malloc.");
    84d0:	01000174 	movhi	r4,5
    84d4:	21118404 	addi	r4,r4,17936
    84d8:	00467040 	call	46704 <printf>
        printf("  Exiting Program.\n");
    84dc:	01000174 	movhi	r4,5
    84e0:	21117f04 	addi	r4,r4,17916
    84e4:	00467d00 	call	467d0 <puts>
        exit(-1);
    84e8:	013fffc4 	movi	r4,-1
    84ec:	004607c0 	call	4607c <exit>
        return (0);
    }
}
    84f0:	e037883a 	mov	sp,fp
    84f4:	dfc00117 	ldw	ra,4(sp)
    84f8:	df000017 	ldw	fp,0(sp)
    84fc:	dec00204 	addi	sp,sp,8
    8500:	f800283a 	ret

00008504 <btc_free_internal>:

void btc_free_internal(void* ptr)
{
    8504:	defffd04 	addi	sp,sp,-12
    8508:	dfc00215 	stw	ra,8(sp)
    850c:	df000115 	stw	fp,4(sp)
    8510:	df000104 	addi	fp,sp,4
    8514:	e13fff15 	stw	r4,-4(fp)
    free(ptr);
    8518:	e13fff17 	ldw	r4,-4(fp)
    851c:	00463540 	call	46354 <free>
}
    8520:	0001883a 	nop
    8524:	e037883a 	mov	sp,fp
    8528:	dfc00117 	ldw	ra,4(sp)
    852c:	df000017 	ldw	fp,0(sp)
    8530:	dec00204 	addi	sp,sp,8
    8534:	f800283a 	ret

00008538 <btc_mem_zero>:
{
    memset_s(dst, len, 0, len);
}
#else
volatile void *btc_mem_zero(volatile void *dst, size_t len)
{
    8538:	defffc04 	addi	sp,sp,-16
    853c:	df000315 	stw	fp,12(sp)
    8540:	df000304 	addi	fp,sp,12
    8544:	e13ffe15 	stw	r4,-8(fp)
    8548:	e17fff15 	stw	r5,-4(fp)
    volatile char *buf;
    for (buf = (volatile char *)dst;  len;  buf[--len] = 0);
    854c:	e0bffe17 	ldw	r2,-8(fp)
    8550:	e0bffd15 	stw	r2,-12(fp)
    8554:	00000706 	br	8574 <btc_mem_zero+0x3c>
    8558:	e0bfff17 	ldw	r2,-4(fp)
    855c:	10bfffc4 	addi	r2,r2,-1
    8560:	e0bfff15 	stw	r2,-4(fp)
    8564:	e0fffd17 	ldw	r3,-12(fp)
    8568:	e0bfff17 	ldw	r2,-4(fp)
    856c:	1885883a 	add	r2,r3,r2
    8570:	10000005 	stb	zero,0(r2)
    8574:	e0bfff17 	ldw	r2,-4(fp)
    8578:	103ff71e 	bne	r2,zero,8558 <__alt_mem_epcs_flash_controller+0xfdfff558>
    return dst;
    857c:	e0bffe17 	ldw	r2,-8(fp)
}
    8580:	e037883a 	mov	sp,fp
    8584:	df000017 	ldw	fp,0(sp)
    8588:	dec00104 	addi	sp,sp,4
    858c:	f800283a 	ret

00008590 <btc_rnd_set_mapper_default>:

static const btc_rnd_mapper default_rnd_mapper = {btc_random_init_internal, btc_random_bytes_internal};
static btc_rnd_mapper current_rnd_mapper = {btc_random_init_internal, btc_random_bytes_internal};

void btc_rnd_set_mapper_default()
{
    8590:	deffff04 	addi	sp,sp,-4
    8594:	df000015 	stw	fp,0(sp)
    8598:	d839883a 	mov	fp,sp
    current_rnd_mapper = default_rnd_mapper;
    859c:	00800074 	movhi	r2,1
    85a0:	10a19f04 	addi	r2,r2,-31108
    85a4:	d0a00615 	stw	r2,-32744(gp)
    85a8:	00800074 	movhi	r2,1
    85ac:	10a1ad04 	addi	r2,r2,-31052
    85b0:	d0a00715 	stw	r2,-32740(gp)
}
    85b4:	0001883a 	nop
    85b8:	e037883a 	mov	sp,fp
    85bc:	df000017 	ldw	fp,0(sp)
    85c0:	dec00104 	addi	sp,sp,4
    85c4:	f800283a 	ret

000085c8 <btc_rnd_set_mapper>:

void btc_rnd_set_mapper(const btc_rnd_mapper mapper)
{
    85c8:	defffd04 	addi	sp,sp,-12
    85cc:	df000215 	stw	fp,8(sp)
    85d0:	df000204 	addi	fp,sp,8
    85d4:	e13ffe15 	stw	r4,-8(fp)
    85d8:	e17fff15 	stw	r5,-4(fp)
    current_rnd_mapper = mapper;
    85dc:	e0bffe17 	ldw	r2,-8(fp)
    85e0:	d0a00615 	stw	r2,-32744(gp)
    85e4:	e0bfff17 	ldw	r2,-4(fp)
    85e8:	d0a00715 	stw	r2,-32740(gp)
}
    85ec:	0001883a 	nop
    85f0:	e037883a 	mov	sp,fp
    85f4:	df000017 	ldw	fp,0(sp)
    85f8:	dec00104 	addi	sp,sp,4
    85fc:	f800283a 	ret

00008600 <btc_random_init>:

void btc_random_init(void)
{
    8600:	defffe04 	addi	sp,sp,-8
    8604:	dfc00115 	stw	ra,4(sp)
    8608:	df000015 	stw	fp,0(sp)
    860c:	d839883a 	mov	fp,sp
    current_rnd_mapper.btc_random_init();
    8610:	d0a00617 	ldw	r2,-32744(gp)
    8614:	103ee83a 	callr	r2
}
    8618:	0001883a 	nop
    861c:	e037883a 	mov	sp,fp
    8620:	dfc00117 	ldw	ra,4(sp)
    8624:	df000017 	ldw	fp,0(sp)
    8628:	dec00204 	addi	sp,sp,8
    862c:	f800283a 	ret

00008630 <btc_random_bytes>:

btc_bool btc_random_bytes(uint8_t* buf, uint32_t len, const uint8_t update_seed)
{
    8630:	defffb04 	addi	sp,sp,-20
    8634:	dfc00415 	stw	ra,16(sp)
    8638:	df000315 	stw	fp,12(sp)
    863c:	df000304 	addi	fp,sp,12
    8640:	e13ffd15 	stw	r4,-12(fp)
    8644:	e17ffe15 	stw	r5,-8(fp)
    8648:	3005883a 	mov	r2,r6
    864c:	e0bfff05 	stb	r2,-4(fp)
    return current_rnd_mapper.btc_random_bytes(buf, len, update_seed);
    8650:	d0a00717 	ldw	r2,-32740(gp)
    8654:	e0ffff03 	ldbu	r3,-4(fp)
    8658:	180d883a 	mov	r6,r3
    865c:	e17ffe17 	ldw	r5,-8(fp)
    8660:	e13ffd17 	ldw	r4,-12(fp)
    8664:	103ee83a 	callr	r2
}
    8668:	e037883a 	mov	sp,fp
    866c:	dfc00117 	ldw	ra,4(sp)
    8670:	df000017 	ldw	fp,0(sp)
    8674:	dec00204 	addi	sp,sp,8
    8678:	f800283a 	ret

0000867c <btc_random_init_internal>:

#ifdef TESTING
void btc_random_init_internal(void)
{
    867c:	defffe04 	addi	sp,sp,-8
    8680:	dfc00115 	stw	ra,4(sp)
    8684:	df000015 	stw	fp,0(sp)
    8688:	d839883a 	mov	fp,sp
    srand(time(NULL));
    868c:	0009883a 	mov	r4,zero
    8690:	00471080 	call	47108 <time>
    8694:	1009883a 	mov	r4,r2
    8698:	00467e40 	call	467e4 <srand>
}
    869c:	0001883a 	nop
    86a0:	e037883a 	mov	sp,fp
    86a4:	dfc00117 	ldw	ra,4(sp)
    86a8:	df000017 	ldw	fp,0(sp)
    86ac:	dec00204 	addi	sp,sp,8
    86b0:	f800283a 	ret

000086b4 <btc_random_bytes_internal>:


btc_bool btc_random_bytes_internal(uint8_t* buf, uint32_t len, uint8_t update_seed)
{
    86b4:	defff904 	addi	sp,sp,-28
    86b8:	dfc00615 	stw	ra,24(sp)
    86bc:	df000515 	stw	fp,20(sp)
    86c0:	dc000415 	stw	r16,16(sp)
    86c4:	df000504 	addi	fp,sp,20
    86c8:	e13ffc15 	stw	r4,-16(fp)
    86cc:	e17ffd15 	stw	r5,-12(fp)
    86d0:	3005883a 	mov	r2,r6
    86d4:	e0bffe05 	stb	r2,-8(fp)
    (void)update_seed;
    for (uint32_t i = 0; i < len; i++) {
    86d8:	e03ffb15 	stw	zero,-20(fp)
    86dc:	00000806 	br	8700 <btc_random_bytes_internal+0x4c>
        buf[i] = rand();
    86e0:	e0fffc17 	ldw	r3,-16(fp)
    86e4:	e0bffb17 	ldw	r2,-20(fp)
    86e8:	18a1883a 	add	r16,r3,r2
    86ec:	00467f80 	call	467f8 <rand>
    86f0:	80800005 	stb	r2,0(r16)


btc_bool btc_random_bytes_internal(uint8_t* buf, uint32_t len, uint8_t update_seed)
{
    (void)update_seed;
    for (uint32_t i = 0; i < len; i++) {
    86f4:	e0bffb17 	ldw	r2,-20(fp)
    86f8:	10800044 	addi	r2,r2,1
    86fc:	e0bffb15 	stw	r2,-20(fp)
    8700:	e0fffb17 	ldw	r3,-20(fp)
    8704:	e0bffd17 	ldw	r2,-12(fp)
    8708:	18bff536 	bltu	r3,r2,86e0 <__alt_mem_epcs_flash_controller+0xfdfff6e0>
        buf[i] = rand();
    }

    return true;
    870c:	00800044 	movi	r2,1
}
    8710:	e6ffff04 	addi	sp,fp,-4
    8714:	dfc00217 	ldw	ra,8(sp)
    8718:	df000117 	ldw	fp,4(sp)
    871c:	dc000017 	ldw	r16,0(sp)
    8720:	dec00304 	addi	sp,sp,12
    8724:	f800283a 	ret

00008728 <compress>:
        (a) = ROL((a), (s)) + (e);                    \
        (c) = ROL((c), 10);                           \
    }

static void compress(uint32_t* MDbuf, uint32_t* X)
{
    8728:	defff304 	addi	sp,sp,-52
    872c:	df000c15 	stw	fp,48(sp)
    8730:	df000c04 	addi	fp,sp,48
    8734:	e13ffe15 	stw	r4,-8(fp)
    8738:	e17fff15 	stw	r5,-4(fp)
    uint32_t aa = MDbuf[0], bb = MDbuf[1], cc = MDbuf[2], dd = MDbuf[3], ee = MDbuf[4];
    873c:	e0bffe17 	ldw	r2,-8(fp)
    8740:	10800017 	ldw	r2,0(r2)
    8744:	e0bff415 	stw	r2,-48(fp)
    8748:	e0bffe17 	ldw	r2,-8(fp)
    874c:	10800117 	ldw	r2,4(r2)
    8750:	e0bff515 	stw	r2,-44(fp)
    8754:	e0bffe17 	ldw	r2,-8(fp)
    8758:	10800217 	ldw	r2,8(r2)
    875c:	e0bff615 	stw	r2,-40(fp)
    8760:	e0bffe17 	ldw	r2,-8(fp)
    8764:	10800317 	ldw	r2,12(r2)
    8768:	e0bff715 	stw	r2,-36(fp)
    876c:	e0bffe17 	ldw	r2,-8(fp)
    8770:	10800417 	ldw	r2,16(r2)
    8774:	e0bff815 	stw	r2,-32(fp)
    uint32_t aaa = MDbuf[0], bbb = MDbuf[1], ccc = MDbuf[2], ddd = MDbuf[3], eee = MDbuf[4];
    8778:	e0bffe17 	ldw	r2,-8(fp)
    877c:	10800017 	ldw	r2,0(r2)
    8780:	e0bff915 	stw	r2,-28(fp)
    8784:	e0bffe17 	ldw	r2,-8(fp)
    8788:	10800117 	ldw	r2,4(r2)
    878c:	e0bffa15 	stw	r2,-24(fp)
    8790:	e0bffe17 	ldw	r2,-8(fp)
    8794:	10800217 	ldw	r2,8(r2)
    8798:	e0bffb15 	stw	r2,-20(fp)
    879c:	e0bffe17 	ldw	r2,-8(fp)
    87a0:	10800317 	ldw	r2,12(r2)
    87a4:	e0bffc15 	stw	r2,-16(fp)
    87a8:	e0bffe17 	ldw	r2,-8(fp)
    87ac:	10800417 	ldw	r2,16(r2)
    87b0:	e0bffd15 	stw	r2,-12(fp)

    /* round 1 */
    FF(aa, bb, cc, dd, ee, X[0], 11);
    87b4:	e0fff517 	ldw	r3,-44(fp)
    87b8:	e0bff617 	ldw	r2,-40(fp)
    87bc:	1886f03a 	xor	r3,r3,r2
    87c0:	e0bff717 	ldw	r2,-36(fp)
    87c4:	1886f03a 	xor	r3,r3,r2
    87c8:	e0bfff17 	ldw	r2,-4(fp)
    87cc:	10800017 	ldw	r2,0(r2)
    87d0:	1885883a 	add	r2,r3,r2
    87d4:	e0fff417 	ldw	r3,-48(fp)
    87d8:	1885883a 	add	r2,r3,r2
    87dc:	e0bff415 	stw	r2,-48(fp)
    87e0:	e0bff417 	ldw	r2,-48(fp)
    87e4:	100612fa 	roli	r3,r2,11
    87e8:	e0bff817 	ldw	r2,-32(fp)
    87ec:	1885883a 	add	r2,r3,r2
    87f0:	e0bff415 	stw	r2,-48(fp)
    87f4:	e0bff617 	ldw	r2,-40(fp)
    87f8:	100412ba 	roli	r2,r2,10
    87fc:	e0bff615 	stw	r2,-40(fp)
    FF(ee, aa, bb, cc, dd, X[1], 14);
    8800:	e0fff417 	ldw	r3,-48(fp)
    8804:	e0bff517 	ldw	r2,-44(fp)
    8808:	1886f03a 	xor	r3,r3,r2
    880c:	e0bff617 	ldw	r2,-40(fp)
    8810:	1886f03a 	xor	r3,r3,r2
    8814:	e0bfff17 	ldw	r2,-4(fp)
    8818:	10800104 	addi	r2,r2,4
    881c:	10800017 	ldw	r2,0(r2)
    8820:	1885883a 	add	r2,r3,r2
    8824:	e0fff817 	ldw	r3,-32(fp)
    8828:	1885883a 	add	r2,r3,r2
    882c:	e0bff815 	stw	r2,-32(fp)
    8830:	e0bff817 	ldw	r2,-32(fp)
    8834:	100613ba 	roli	r3,r2,14
    8838:	e0bff717 	ldw	r2,-36(fp)
    883c:	1885883a 	add	r2,r3,r2
    8840:	e0bff815 	stw	r2,-32(fp)
    8844:	e0bff517 	ldw	r2,-44(fp)
    8848:	100412ba 	roli	r2,r2,10
    884c:	e0bff515 	stw	r2,-44(fp)
    FF(dd, ee, aa, bb, cc, X[2], 15);
    8850:	e0fff817 	ldw	r3,-32(fp)
    8854:	e0bff417 	ldw	r2,-48(fp)
    8858:	1886f03a 	xor	r3,r3,r2
    885c:	e0bff517 	ldw	r2,-44(fp)
    8860:	1886f03a 	xor	r3,r3,r2
    8864:	e0bfff17 	ldw	r2,-4(fp)
    8868:	10800204 	addi	r2,r2,8
    886c:	10800017 	ldw	r2,0(r2)
    8870:	1885883a 	add	r2,r3,r2
    8874:	e0fff717 	ldw	r3,-36(fp)
    8878:	1885883a 	add	r2,r3,r2
    887c:	e0bff715 	stw	r2,-36(fp)
    8880:	e0bff717 	ldw	r2,-36(fp)
    8884:	100613fa 	roli	r3,r2,15
    8888:	e0bff617 	ldw	r2,-40(fp)
    888c:	1885883a 	add	r2,r3,r2
    8890:	e0bff715 	stw	r2,-36(fp)
    8894:	e0bff417 	ldw	r2,-48(fp)
    8898:	100412ba 	roli	r2,r2,10
    889c:	e0bff415 	stw	r2,-48(fp)
    FF(cc, dd, ee, aa, bb, X[3], 12);
    88a0:	e0fff717 	ldw	r3,-36(fp)
    88a4:	e0bff817 	ldw	r2,-32(fp)
    88a8:	1886f03a 	xor	r3,r3,r2
    88ac:	e0bff417 	ldw	r2,-48(fp)
    88b0:	1886f03a 	xor	r3,r3,r2
    88b4:	e0bfff17 	ldw	r2,-4(fp)
    88b8:	10800304 	addi	r2,r2,12
    88bc:	10800017 	ldw	r2,0(r2)
    88c0:	1885883a 	add	r2,r3,r2
    88c4:	e0fff617 	ldw	r3,-40(fp)
    88c8:	1885883a 	add	r2,r3,r2
    88cc:	e0bff615 	stw	r2,-40(fp)
    88d0:	e0bff617 	ldw	r2,-40(fp)
    88d4:	1006133a 	roli	r3,r2,12
    88d8:	e0bff517 	ldw	r2,-44(fp)
    88dc:	1885883a 	add	r2,r3,r2
    88e0:	e0bff615 	stw	r2,-40(fp)
    88e4:	e0bff817 	ldw	r2,-32(fp)
    88e8:	100412ba 	roli	r2,r2,10
    88ec:	e0bff815 	stw	r2,-32(fp)
    FF(bb, cc, dd, ee, aa, X[4], 5);
    88f0:	e0fff617 	ldw	r3,-40(fp)
    88f4:	e0bff717 	ldw	r2,-36(fp)
    88f8:	1886f03a 	xor	r3,r3,r2
    88fc:	e0bff817 	ldw	r2,-32(fp)
    8900:	1886f03a 	xor	r3,r3,r2
    8904:	e0bfff17 	ldw	r2,-4(fp)
    8908:	10800404 	addi	r2,r2,16
    890c:	10800017 	ldw	r2,0(r2)
    8910:	1885883a 	add	r2,r3,r2
    8914:	e0fff517 	ldw	r3,-44(fp)
    8918:	1885883a 	add	r2,r3,r2
    891c:	e0bff515 	stw	r2,-44(fp)
    8920:	e0bff517 	ldw	r2,-44(fp)
    8924:	1006117a 	roli	r3,r2,5
    8928:	e0bff417 	ldw	r2,-48(fp)
    892c:	1885883a 	add	r2,r3,r2
    8930:	e0bff515 	stw	r2,-44(fp)
    8934:	e0bff717 	ldw	r2,-36(fp)
    8938:	100412ba 	roli	r2,r2,10
    893c:	e0bff715 	stw	r2,-36(fp)
    FF(aa, bb, cc, dd, ee, X[5], 8);
    8940:	e0fff517 	ldw	r3,-44(fp)
    8944:	e0bff617 	ldw	r2,-40(fp)
    8948:	1886f03a 	xor	r3,r3,r2
    894c:	e0bff717 	ldw	r2,-36(fp)
    8950:	1886f03a 	xor	r3,r3,r2
    8954:	e0bfff17 	ldw	r2,-4(fp)
    8958:	10800504 	addi	r2,r2,20
    895c:	10800017 	ldw	r2,0(r2)
    8960:	1885883a 	add	r2,r3,r2
    8964:	e0fff417 	ldw	r3,-48(fp)
    8968:	1885883a 	add	r2,r3,r2
    896c:	e0bff415 	stw	r2,-48(fp)
    8970:	e0bff417 	ldw	r2,-48(fp)
    8974:	1006123a 	roli	r3,r2,8
    8978:	e0bff817 	ldw	r2,-32(fp)
    897c:	1885883a 	add	r2,r3,r2
    8980:	e0bff415 	stw	r2,-48(fp)
    8984:	e0bff617 	ldw	r2,-40(fp)
    8988:	100412ba 	roli	r2,r2,10
    898c:	e0bff615 	stw	r2,-40(fp)
    FF(ee, aa, bb, cc, dd, X[6], 7);
    8990:	e0fff417 	ldw	r3,-48(fp)
    8994:	e0bff517 	ldw	r2,-44(fp)
    8998:	1886f03a 	xor	r3,r3,r2
    899c:	e0bff617 	ldw	r2,-40(fp)
    89a0:	1886f03a 	xor	r3,r3,r2
    89a4:	e0bfff17 	ldw	r2,-4(fp)
    89a8:	10800604 	addi	r2,r2,24
    89ac:	10800017 	ldw	r2,0(r2)
    89b0:	1885883a 	add	r2,r3,r2
    89b4:	e0fff817 	ldw	r3,-32(fp)
    89b8:	1885883a 	add	r2,r3,r2
    89bc:	e0bff815 	stw	r2,-32(fp)
    89c0:	e0bff817 	ldw	r2,-32(fp)
    89c4:	100611fa 	roli	r3,r2,7
    89c8:	e0bff717 	ldw	r2,-36(fp)
    89cc:	1885883a 	add	r2,r3,r2
    89d0:	e0bff815 	stw	r2,-32(fp)
    89d4:	e0bff517 	ldw	r2,-44(fp)
    89d8:	100412ba 	roli	r2,r2,10
    89dc:	e0bff515 	stw	r2,-44(fp)
    FF(dd, ee, aa, bb, cc, X[7], 9);
    89e0:	e0fff817 	ldw	r3,-32(fp)
    89e4:	e0bff417 	ldw	r2,-48(fp)
    89e8:	1886f03a 	xor	r3,r3,r2
    89ec:	e0bff517 	ldw	r2,-44(fp)
    89f0:	1886f03a 	xor	r3,r3,r2
    89f4:	e0bfff17 	ldw	r2,-4(fp)
    89f8:	10800704 	addi	r2,r2,28
    89fc:	10800017 	ldw	r2,0(r2)
    8a00:	1885883a 	add	r2,r3,r2
    8a04:	e0fff717 	ldw	r3,-36(fp)
    8a08:	1885883a 	add	r2,r3,r2
    8a0c:	e0bff715 	stw	r2,-36(fp)
    8a10:	e0bff717 	ldw	r2,-36(fp)
    8a14:	1006127a 	roli	r3,r2,9
    8a18:	e0bff617 	ldw	r2,-40(fp)
    8a1c:	1885883a 	add	r2,r3,r2
    8a20:	e0bff715 	stw	r2,-36(fp)
    8a24:	e0bff417 	ldw	r2,-48(fp)
    8a28:	100412ba 	roli	r2,r2,10
    8a2c:	e0bff415 	stw	r2,-48(fp)
    FF(cc, dd, ee, aa, bb, X[8], 11);
    8a30:	e0fff717 	ldw	r3,-36(fp)
    8a34:	e0bff817 	ldw	r2,-32(fp)
    8a38:	1886f03a 	xor	r3,r3,r2
    8a3c:	e0bff417 	ldw	r2,-48(fp)
    8a40:	1886f03a 	xor	r3,r3,r2
    8a44:	e0bfff17 	ldw	r2,-4(fp)
    8a48:	10800804 	addi	r2,r2,32
    8a4c:	10800017 	ldw	r2,0(r2)
    8a50:	1885883a 	add	r2,r3,r2
    8a54:	e0fff617 	ldw	r3,-40(fp)
    8a58:	1885883a 	add	r2,r3,r2
    8a5c:	e0bff615 	stw	r2,-40(fp)
    8a60:	e0bff617 	ldw	r2,-40(fp)
    8a64:	100612fa 	roli	r3,r2,11
    8a68:	e0bff517 	ldw	r2,-44(fp)
    8a6c:	1885883a 	add	r2,r3,r2
    8a70:	e0bff615 	stw	r2,-40(fp)
    8a74:	e0bff817 	ldw	r2,-32(fp)
    8a78:	100412ba 	roli	r2,r2,10
    8a7c:	e0bff815 	stw	r2,-32(fp)
    FF(bb, cc, dd, ee, aa, X[9], 13);
    8a80:	e0fff617 	ldw	r3,-40(fp)
    8a84:	e0bff717 	ldw	r2,-36(fp)
    8a88:	1886f03a 	xor	r3,r3,r2
    8a8c:	e0bff817 	ldw	r2,-32(fp)
    8a90:	1886f03a 	xor	r3,r3,r2
    8a94:	e0bfff17 	ldw	r2,-4(fp)
    8a98:	10800904 	addi	r2,r2,36
    8a9c:	10800017 	ldw	r2,0(r2)
    8aa0:	1885883a 	add	r2,r3,r2
    8aa4:	e0fff517 	ldw	r3,-44(fp)
    8aa8:	1885883a 	add	r2,r3,r2
    8aac:	e0bff515 	stw	r2,-44(fp)
    8ab0:	e0bff517 	ldw	r2,-44(fp)
    8ab4:	1006137a 	roli	r3,r2,13
    8ab8:	e0bff417 	ldw	r2,-48(fp)
    8abc:	1885883a 	add	r2,r3,r2
    8ac0:	e0bff515 	stw	r2,-44(fp)
    8ac4:	e0bff717 	ldw	r2,-36(fp)
    8ac8:	100412ba 	roli	r2,r2,10
    8acc:	e0bff715 	stw	r2,-36(fp)
    FF(aa, bb, cc, dd, ee, X[10], 14);
    8ad0:	e0fff517 	ldw	r3,-44(fp)
    8ad4:	e0bff617 	ldw	r2,-40(fp)
    8ad8:	1886f03a 	xor	r3,r3,r2
    8adc:	e0bff717 	ldw	r2,-36(fp)
    8ae0:	1886f03a 	xor	r3,r3,r2
    8ae4:	e0bfff17 	ldw	r2,-4(fp)
    8ae8:	10800a04 	addi	r2,r2,40
    8aec:	10800017 	ldw	r2,0(r2)
    8af0:	1885883a 	add	r2,r3,r2
    8af4:	e0fff417 	ldw	r3,-48(fp)
    8af8:	1885883a 	add	r2,r3,r2
    8afc:	e0bff415 	stw	r2,-48(fp)
    8b00:	e0bff417 	ldw	r2,-48(fp)
    8b04:	100613ba 	roli	r3,r2,14
    8b08:	e0bff817 	ldw	r2,-32(fp)
    8b0c:	1885883a 	add	r2,r3,r2
    8b10:	e0bff415 	stw	r2,-48(fp)
    8b14:	e0bff617 	ldw	r2,-40(fp)
    8b18:	100412ba 	roli	r2,r2,10
    8b1c:	e0bff615 	stw	r2,-40(fp)
    FF(ee, aa, bb, cc, dd, X[11], 15);
    8b20:	e0fff417 	ldw	r3,-48(fp)
    8b24:	e0bff517 	ldw	r2,-44(fp)
    8b28:	1886f03a 	xor	r3,r3,r2
    8b2c:	e0bff617 	ldw	r2,-40(fp)
    8b30:	1886f03a 	xor	r3,r3,r2
    8b34:	e0bfff17 	ldw	r2,-4(fp)
    8b38:	10800b04 	addi	r2,r2,44
    8b3c:	10800017 	ldw	r2,0(r2)
    8b40:	1885883a 	add	r2,r3,r2
    8b44:	e0fff817 	ldw	r3,-32(fp)
    8b48:	1885883a 	add	r2,r3,r2
    8b4c:	e0bff815 	stw	r2,-32(fp)
    8b50:	e0bff817 	ldw	r2,-32(fp)
    8b54:	100613fa 	roli	r3,r2,15
    8b58:	e0bff717 	ldw	r2,-36(fp)
    8b5c:	1885883a 	add	r2,r3,r2
    8b60:	e0bff815 	stw	r2,-32(fp)
    8b64:	e0bff517 	ldw	r2,-44(fp)
    8b68:	100412ba 	roli	r2,r2,10
    8b6c:	e0bff515 	stw	r2,-44(fp)
    FF(dd, ee, aa, bb, cc, X[12], 6);
    8b70:	e0fff817 	ldw	r3,-32(fp)
    8b74:	e0bff417 	ldw	r2,-48(fp)
    8b78:	1886f03a 	xor	r3,r3,r2
    8b7c:	e0bff517 	ldw	r2,-44(fp)
    8b80:	1886f03a 	xor	r3,r3,r2
    8b84:	e0bfff17 	ldw	r2,-4(fp)
    8b88:	10800c04 	addi	r2,r2,48
    8b8c:	10800017 	ldw	r2,0(r2)
    8b90:	1885883a 	add	r2,r3,r2
    8b94:	e0fff717 	ldw	r3,-36(fp)
    8b98:	1885883a 	add	r2,r3,r2
    8b9c:	e0bff715 	stw	r2,-36(fp)
    8ba0:	e0bff717 	ldw	r2,-36(fp)
    8ba4:	100611ba 	roli	r3,r2,6
    8ba8:	e0bff617 	ldw	r2,-40(fp)
    8bac:	1885883a 	add	r2,r3,r2
    8bb0:	e0bff715 	stw	r2,-36(fp)
    8bb4:	e0bff417 	ldw	r2,-48(fp)
    8bb8:	100412ba 	roli	r2,r2,10
    8bbc:	e0bff415 	stw	r2,-48(fp)
    FF(cc, dd, ee, aa, bb, X[13], 7);
    8bc0:	e0fff717 	ldw	r3,-36(fp)
    8bc4:	e0bff817 	ldw	r2,-32(fp)
    8bc8:	1886f03a 	xor	r3,r3,r2
    8bcc:	e0bff417 	ldw	r2,-48(fp)
    8bd0:	1886f03a 	xor	r3,r3,r2
    8bd4:	e0bfff17 	ldw	r2,-4(fp)
    8bd8:	10800d04 	addi	r2,r2,52
    8bdc:	10800017 	ldw	r2,0(r2)
    8be0:	1885883a 	add	r2,r3,r2
    8be4:	e0fff617 	ldw	r3,-40(fp)
    8be8:	1885883a 	add	r2,r3,r2
    8bec:	e0bff615 	stw	r2,-40(fp)
    8bf0:	e0bff617 	ldw	r2,-40(fp)
    8bf4:	100611fa 	roli	r3,r2,7
    8bf8:	e0bff517 	ldw	r2,-44(fp)
    8bfc:	1885883a 	add	r2,r3,r2
    8c00:	e0bff615 	stw	r2,-40(fp)
    8c04:	e0bff817 	ldw	r2,-32(fp)
    8c08:	100412ba 	roli	r2,r2,10
    8c0c:	e0bff815 	stw	r2,-32(fp)
    FF(bb, cc, dd, ee, aa, X[14], 9);
    8c10:	e0fff617 	ldw	r3,-40(fp)
    8c14:	e0bff717 	ldw	r2,-36(fp)
    8c18:	1886f03a 	xor	r3,r3,r2
    8c1c:	e0bff817 	ldw	r2,-32(fp)
    8c20:	1886f03a 	xor	r3,r3,r2
    8c24:	e0bfff17 	ldw	r2,-4(fp)
    8c28:	10800e04 	addi	r2,r2,56
    8c2c:	10800017 	ldw	r2,0(r2)
    8c30:	1885883a 	add	r2,r3,r2
    8c34:	e0fff517 	ldw	r3,-44(fp)
    8c38:	1885883a 	add	r2,r3,r2
    8c3c:	e0bff515 	stw	r2,-44(fp)
    8c40:	e0bff517 	ldw	r2,-44(fp)
    8c44:	1006127a 	roli	r3,r2,9
    8c48:	e0bff417 	ldw	r2,-48(fp)
    8c4c:	1885883a 	add	r2,r3,r2
    8c50:	e0bff515 	stw	r2,-44(fp)
    8c54:	e0bff717 	ldw	r2,-36(fp)
    8c58:	100412ba 	roli	r2,r2,10
    8c5c:	e0bff715 	stw	r2,-36(fp)
    FF(aa, bb, cc, dd, ee, X[15], 8);
    8c60:	e0fff517 	ldw	r3,-44(fp)
    8c64:	e0bff617 	ldw	r2,-40(fp)
    8c68:	1886f03a 	xor	r3,r3,r2
    8c6c:	e0bff717 	ldw	r2,-36(fp)
    8c70:	1886f03a 	xor	r3,r3,r2
    8c74:	e0bfff17 	ldw	r2,-4(fp)
    8c78:	10800f04 	addi	r2,r2,60
    8c7c:	10800017 	ldw	r2,0(r2)
    8c80:	1885883a 	add	r2,r3,r2
    8c84:	e0fff417 	ldw	r3,-48(fp)
    8c88:	1885883a 	add	r2,r3,r2
    8c8c:	e0bff415 	stw	r2,-48(fp)
    8c90:	e0bff417 	ldw	r2,-48(fp)
    8c94:	1006123a 	roli	r3,r2,8
    8c98:	e0bff817 	ldw	r2,-32(fp)
    8c9c:	1885883a 	add	r2,r3,r2
    8ca0:	e0bff415 	stw	r2,-48(fp)
    8ca4:	e0bff617 	ldw	r2,-40(fp)
    8ca8:	100412ba 	roli	r2,r2,10
    8cac:	e0bff615 	stw	r2,-40(fp)

    /* round 2 */
    GG(ee, aa, bb, cc, dd, X[7], 7);
    8cb0:	e0fff617 	ldw	r3,-40(fp)
    8cb4:	e0bff517 	ldw	r2,-44(fp)
    8cb8:	1886f03a 	xor	r3,r3,r2
    8cbc:	e0bff417 	ldw	r2,-48(fp)
    8cc0:	1886703a 	and	r3,r3,r2
    8cc4:	e0bff617 	ldw	r2,-40(fp)
    8cc8:	1886f03a 	xor	r3,r3,r2
    8ccc:	e0bfff17 	ldw	r2,-4(fp)
    8cd0:	10800704 	addi	r2,r2,28
    8cd4:	10800017 	ldw	r2,0(r2)
    8cd8:	1887883a 	add	r3,r3,r2
    8cdc:	e0bff817 	ldw	r2,-32(fp)
    8ce0:	1887883a 	add	r3,r3,r2
    8ce4:	0096a0b4 	movhi	r2,23170
    8ce8:	109e6644 	addi	r2,r2,31129
    8cec:	1885883a 	add	r2,r3,r2
    8cf0:	e0bff815 	stw	r2,-32(fp)
    8cf4:	e0bff817 	ldw	r2,-32(fp)
    8cf8:	100611fa 	roli	r3,r2,7
    8cfc:	e0bff717 	ldw	r2,-36(fp)
    8d00:	1885883a 	add	r2,r3,r2
    8d04:	e0bff815 	stw	r2,-32(fp)
    8d08:	e0bff517 	ldw	r2,-44(fp)
    8d0c:	100412ba 	roli	r2,r2,10
    8d10:	e0bff515 	stw	r2,-44(fp)
    GG(dd, ee, aa, bb, cc, X[4], 6);
    8d14:	e0fff517 	ldw	r3,-44(fp)
    8d18:	e0bff417 	ldw	r2,-48(fp)
    8d1c:	1886f03a 	xor	r3,r3,r2
    8d20:	e0bff817 	ldw	r2,-32(fp)
    8d24:	1886703a 	and	r3,r3,r2
    8d28:	e0bff517 	ldw	r2,-44(fp)
    8d2c:	1886f03a 	xor	r3,r3,r2
    8d30:	e0bfff17 	ldw	r2,-4(fp)
    8d34:	10800404 	addi	r2,r2,16
    8d38:	10800017 	ldw	r2,0(r2)
    8d3c:	1887883a 	add	r3,r3,r2
    8d40:	e0bff717 	ldw	r2,-36(fp)
    8d44:	1887883a 	add	r3,r3,r2
    8d48:	0096a0b4 	movhi	r2,23170
    8d4c:	109e6644 	addi	r2,r2,31129
    8d50:	1885883a 	add	r2,r3,r2
    8d54:	e0bff715 	stw	r2,-36(fp)
    8d58:	e0bff717 	ldw	r2,-36(fp)
    8d5c:	100611ba 	roli	r3,r2,6
    8d60:	e0bff617 	ldw	r2,-40(fp)
    8d64:	1885883a 	add	r2,r3,r2
    8d68:	e0bff715 	stw	r2,-36(fp)
    8d6c:	e0bff417 	ldw	r2,-48(fp)
    8d70:	100412ba 	roli	r2,r2,10
    8d74:	e0bff415 	stw	r2,-48(fp)
    GG(cc, dd, ee, aa, bb, X[13], 8);
    8d78:	e0fff417 	ldw	r3,-48(fp)
    8d7c:	e0bff817 	ldw	r2,-32(fp)
    8d80:	1886f03a 	xor	r3,r3,r2
    8d84:	e0bff717 	ldw	r2,-36(fp)
    8d88:	1886703a 	and	r3,r3,r2
    8d8c:	e0bff417 	ldw	r2,-48(fp)
    8d90:	1886f03a 	xor	r3,r3,r2
    8d94:	e0bfff17 	ldw	r2,-4(fp)
    8d98:	10800d04 	addi	r2,r2,52
    8d9c:	10800017 	ldw	r2,0(r2)
    8da0:	1887883a 	add	r3,r3,r2
    8da4:	e0bff617 	ldw	r2,-40(fp)
    8da8:	1887883a 	add	r3,r3,r2
    8dac:	0096a0b4 	movhi	r2,23170
    8db0:	109e6644 	addi	r2,r2,31129
    8db4:	1885883a 	add	r2,r3,r2
    8db8:	e0bff615 	stw	r2,-40(fp)
    8dbc:	e0bff617 	ldw	r2,-40(fp)
    8dc0:	1006123a 	roli	r3,r2,8
    8dc4:	e0bff517 	ldw	r2,-44(fp)
    8dc8:	1885883a 	add	r2,r3,r2
    8dcc:	e0bff615 	stw	r2,-40(fp)
    8dd0:	e0bff817 	ldw	r2,-32(fp)
    8dd4:	100412ba 	roli	r2,r2,10
    8dd8:	e0bff815 	stw	r2,-32(fp)
    GG(bb, cc, dd, ee, aa, X[1], 13);
    8ddc:	e0fff817 	ldw	r3,-32(fp)
    8de0:	e0bff717 	ldw	r2,-36(fp)
    8de4:	1886f03a 	xor	r3,r3,r2
    8de8:	e0bff617 	ldw	r2,-40(fp)
    8dec:	1886703a 	and	r3,r3,r2
    8df0:	e0bff817 	ldw	r2,-32(fp)
    8df4:	1886f03a 	xor	r3,r3,r2
    8df8:	e0bfff17 	ldw	r2,-4(fp)
    8dfc:	10800104 	addi	r2,r2,4
    8e00:	10800017 	ldw	r2,0(r2)
    8e04:	1887883a 	add	r3,r3,r2
    8e08:	e0bff517 	ldw	r2,-44(fp)
    8e0c:	1887883a 	add	r3,r3,r2
    8e10:	0096a0b4 	movhi	r2,23170
    8e14:	109e6644 	addi	r2,r2,31129
    8e18:	1885883a 	add	r2,r3,r2
    8e1c:	e0bff515 	stw	r2,-44(fp)
    8e20:	e0bff517 	ldw	r2,-44(fp)
    8e24:	1006137a 	roli	r3,r2,13
    8e28:	e0bff417 	ldw	r2,-48(fp)
    8e2c:	1885883a 	add	r2,r3,r2
    8e30:	e0bff515 	stw	r2,-44(fp)
    8e34:	e0bff717 	ldw	r2,-36(fp)
    8e38:	100412ba 	roli	r2,r2,10
    8e3c:	e0bff715 	stw	r2,-36(fp)
    GG(aa, bb, cc, dd, ee, X[10], 11);
    8e40:	e0fff717 	ldw	r3,-36(fp)
    8e44:	e0bff617 	ldw	r2,-40(fp)
    8e48:	1886f03a 	xor	r3,r3,r2
    8e4c:	e0bff517 	ldw	r2,-44(fp)
    8e50:	1886703a 	and	r3,r3,r2
    8e54:	e0bff717 	ldw	r2,-36(fp)
    8e58:	1886f03a 	xor	r3,r3,r2
    8e5c:	e0bfff17 	ldw	r2,-4(fp)
    8e60:	10800a04 	addi	r2,r2,40
    8e64:	10800017 	ldw	r2,0(r2)
    8e68:	1887883a 	add	r3,r3,r2
    8e6c:	e0bff417 	ldw	r2,-48(fp)
    8e70:	1887883a 	add	r3,r3,r2
    8e74:	0096a0b4 	movhi	r2,23170
    8e78:	109e6644 	addi	r2,r2,31129
    8e7c:	1885883a 	add	r2,r3,r2
    8e80:	e0bff415 	stw	r2,-48(fp)
    8e84:	e0bff417 	ldw	r2,-48(fp)
    8e88:	100612fa 	roli	r3,r2,11
    8e8c:	e0bff817 	ldw	r2,-32(fp)
    8e90:	1885883a 	add	r2,r3,r2
    8e94:	e0bff415 	stw	r2,-48(fp)
    8e98:	e0bff617 	ldw	r2,-40(fp)
    8e9c:	100412ba 	roli	r2,r2,10
    8ea0:	e0bff615 	stw	r2,-40(fp)
    GG(ee, aa, bb, cc, dd, X[6], 9);
    8ea4:	e0fff617 	ldw	r3,-40(fp)
    8ea8:	e0bff517 	ldw	r2,-44(fp)
    8eac:	1886f03a 	xor	r3,r3,r2
    8eb0:	e0bff417 	ldw	r2,-48(fp)
    8eb4:	1886703a 	and	r3,r3,r2
    8eb8:	e0bff617 	ldw	r2,-40(fp)
    8ebc:	1886f03a 	xor	r3,r3,r2
    8ec0:	e0bfff17 	ldw	r2,-4(fp)
    8ec4:	10800604 	addi	r2,r2,24
    8ec8:	10800017 	ldw	r2,0(r2)
    8ecc:	1887883a 	add	r3,r3,r2
    8ed0:	e0bff817 	ldw	r2,-32(fp)
    8ed4:	1887883a 	add	r3,r3,r2
    8ed8:	0096a0b4 	movhi	r2,23170
    8edc:	109e6644 	addi	r2,r2,31129
    8ee0:	1885883a 	add	r2,r3,r2
    8ee4:	e0bff815 	stw	r2,-32(fp)
    8ee8:	e0bff817 	ldw	r2,-32(fp)
    8eec:	1006127a 	roli	r3,r2,9
    8ef0:	e0bff717 	ldw	r2,-36(fp)
    8ef4:	1885883a 	add	r2,r3,r2
    8ef8:	e0bff815 	stw	r2,-32(fp)
    8efc:	e0bff517 	ldw	r2,-44(fp)
    8f00:	100412ba 	roli	r2,r2,10
    8f04:	e0bff515 	stw	r2,-44(fp)
    GG(dd, ee, aa, bb, cc, X[15], 7);
    8f08:	e0fff517 	ldw	r3,-44(fp)
    8f0c:	e0bff417 	ldw	r2,-48(fp)
    8f10:	1886f03a 	xor	r3,r3,r2
    8f14:	e0bff817 	ldw	r2,-32(fp)
    8f18:	1886703a 	and	r3,r3,r2
    8f1c:	e0bff517 	ldw	r2,-44(fp)
    8f20:	1886f03a 	xor	r3,r3,r2
    8f24:	e0bfff17 	ldw	r2,-4(fp)
    8f28:	10800f04 	addi	r2,r2,60
    8f2c:	10800017 	ldw	r2,0(r2)
    8f30:	1887883a 	add	r3,r3,r2
    8f34:	e0bff717 	ldw	r2,-36(fp)
    8f38:	1887883a 	add	r3,r3,r2
    8f3c:	0096a0b4 	movhi	r2,23170
    8f40:	109e6644 	addi	r2,r2,31129
    8f44:	1885883a 	add	r2,r3,r2
    8f48:	e0bff715 	stw	r2,-36(fp)
    8f4c:	e0bff717 	ldw	r2,-36(fp)
    8f50:	100611fa 	roli	r3,r2,7
    8f54:	e0bff617 	ldw	r2,-40(fp)
    8f58:	1885883a 	add	r2,r3,r2
    8f5c:	e0bff715 	stw	r2,-36(fp)
    8f60:	e0bff417 	ldw	r2,-48(fp)
    8f64:	100412ba 	roli	r2,r2,10
    8f68:	e0bff415 	stw	r2,-48(fp)
    GG(cc, dd, ee, aa, bb, X[3], 15);
    8f6c:	e0fff417 	ldw	r3,-48(fp)
    8f70:	e0bff817 	ldw	r2,-32(fp)
    8f74:	1886f03a 	xor	r3,r3,r2
    8f78:	e0bff717 	ldw	r2,-36(fp)
    8f7c:	1886703a 	and	r3,r3,r2
    8f80:	e0bff417 	ldw	r2,-48(fp)
    8f84:	1886f03a 	xor	r3,r3,r2
    8f88:	e0bfff17 	ldw	r2,-4(fp)
    8f8c:	10800304 	addi	r2,r2,12
    8f90:	10800017 	ldw	r2,0(r2)
    8f94:	1887883a 	add	r3,r3,r2
    8f98:	e0bff617 	ldw	r2,-40(fp)
    8f9c:	1887883a 	add	r3,r3,r2
    8fa0:	0096a0b4 	movhi	r2,23170
    8fa4:	109e6644 	addi	r2,r2,31129
    8fa8:	1885883a 	add	r2,r3,r2
    8fac:	e0bff615 	stw	r2,-40(fp)
    8fb0:	e0bff617 	ldw	r2,-40(fp)
    8fb4:	100613fa 	roli	r3,r2,15
    8fb8:	e0bff517 	ldw	r2,-44(fp)
    8fbc:	1885883a 	add	r2,r3,r2
    8fc0:	e0bff615 	stw	r2,-40(fp)
    8fc4:	e0bff817 	ldw	r2,-32(fp)
    8fc8:	100412ba 	roli	r2,r2,10
    8fcc:	e0bff815 	stw	r2,-32(fp)
    GG(bb, cc, dd, ee, aa, X[12], 7);
    8fd0:	e0fff817 	ldw	r3,-32(fp)
    8fd4:	e0bff717 	ldw	r2,-36(fp)
    8fd8:	1886f03a 	xor	r3,r3,r2
    8fdc:	e0bff617 	ldw	r2,-40(fp)
    8fe0:	1886703a 	and	r3,r3,r2
    8fe4:	e0bff817 	ldw	r2,-32(fp)
    8fe8:	1886f03a 	xor	r3,r3,r2
    8fec:	e0bfff17 	ldw	r2,-4(fp)
    8ff0:	10800c04 	addi	r2,r2,48
    8ff4:	10800017 	ldw	r2,0(r2)
    8ff8:	1887883a 	add	r3,r3,r2
    8ffc:	e0bff517 	ldw	r2,-44(fp)
    9000:	1887883a 	add	r3,r3,r2
    9004:	0096a0b4 	movhi	r2,23170
    9008:	109e6644 	addi	r2,r2,31129
    900c:	1885883a 	add	r2,r3,r2
    9010:	e0bff515 	stw	r2,-44(fp)
    9014:	e0bff517 	ldw	r2,-44(fp)
    9018:	100611fa 	roli	r3,r2,7
    901c:	e0bff417 	ldw	r2,-48(fp)
    9020:	1885883a 	add	r2,r3,r2
    9024:	e0bff515 	stw	r2,-44(fp)
    9028:	e0bff717 	ldw	r2,-36(fp)
    902c:	100412ba 	roli	r2,r2,10
    9030:	e0bff715 	stw	r2,-36(fp)
    GG(aa, bb, cc, dd, ee, X[0], 12);
    9034:	e0fff717 	ldw	r3,-36(fp)
    9038:	e0bff617 	ldw	r2,-40(fp)
    903c:	1886f03a 	xor	r3,r3,r2
    9040:	e0bff517 	ldw	r2,-44(fp)
    9044:	1886703a 	and	r3,r3,r2
    9048:	e0bff717 	ldw	r2,-36(fp)
    904c:	1886f03a 	xor	r3,r3,r2
    9050:	e0bfff17 	ldw	r2,-4(fp)
    9054:	10800017 	ldw	r2,0(r2)
    9058:	1887883a 	add	r3,r3,r2
    905c:	e0bff417 	ldw	r2,-48(fp)
    9060:	1887883a 	add	r3,r3,r2
    9064:	0096a0b4 	movhi	r2,23170
    9068:	109e6644 	addi	r2,r2,31129
    906c:	1885883a 	add	r2,r3,r2
    9070:	e0bff415 	stw	r2,-48(fp)
    9074:	e0bff417 	ldw	r2,-48(fp)
    9078:	1006133a 	roli	r3,r2,12
    907c:	e0bff817 	ldw	r2,-32(fp)
    9080:	1885883a 	add	r2,r3,r2
    9084:	e0bff415 	stw	r2,-48(fp)
    9088:	e0bff617 	ldw	r2,-40(fp)
    908c:	100412ba 	roli	r2,r2,10
    9090:	e0bff615 	stw	r2,-40(fp)
    GG(ee, aa, bb, cc, dd, X[9], 15);
    9094:	e0fff617 	ldw	r3,-40(fp)
    9098:	e0bff517 	ldw	r2,-44(fp)
    909c:	1886f03a 	xor	r3,r3,r2
    90a0:	e0bff417 	ldw	r2,-48(fp)
    90a4:	1886703a 	and	r3,r3,r2
    90a8:	e0bff617 	ldw	r2,-40(fp)
    90ac:	1886f03a 	xor	r3,r3,r2
    90b0:	e0bfff17 	ldw	r2,-4(fp)
    90b4:	10800904 	addi	r2,r2,36
    90b8:	10800017 	ldw	r2,0(r2)
    90bc:	1887883a 	add	r3,r3,r2
    90c0:	e0bff817 	ldw	r2,-32(fp)
    90c4:	1887883a 	add	r3,r3,r2
    90c8:	0096a0b4 	movhi	r2,23170
    90cc:	109e6644 	addi	r2,r2,31129
    90d0:	1885883a 	add	r2,r3,r2
    90d4:	e0bff815 	stw	r2,-32(fp)
    90d8:	e0bff817 	ldw	r2,-32(fp)
    90dc:	100613fa 	roli	r3,r2,15
    90e0:	e0bff717 	ldw	r2,-36(fp)
    90e4:	1885883a 	add	r2,r3,r2
    90e8:	e0bff815 	stw	r2,-32(fp)
    90ec:	e0bff517 	ldw	r2,-44(fp)
    90f0:	100412ba 	roli	r2,r2,10
    90f4:	e0bff515 	stw	r2,-44(fp)
    GG(dd, ee, aa, bb, cc, X[5], 9);
    90f8:	e0fff517 	ldw	r3,-44(fp)
    90fc:	e0bff417 	ldw	r2,-48(fp)
    9100:	1886f03a 	xor	r3,r3,r2
    9104:	e0bff817 	ldw	r2,-32(fp)
    9108:	1886703a 	and	r3,r3,r2
    910c:	e0bff517 	ldw	r2,-44(fp)
    9110:	1886f03a 	xor	r3,r3,r2
    9114:	e0bfff17 	ldw	r2,-4(fp)
    9118:	10800504 	addi	r2,r2,20
    911c:	10800017 	ldw	r2,0(r2)
    9120:	1887883a 	add	r3,r3,r2
    9124:	e0bff717 	ldw	r2,-36(fp)
    9128:	1887883a 	add	r3,r3,r2
    912c:	0096a0b4 	movhi	r2,23170
    9130:	109e6644 	addi	r2,r2,31129
    9134:	1885883a 	add	r2,r3,r2
    9138:	e0bff715 	stw	r2,-36(fp)
    913c:	e0bff717 	ldw	r2,-36(fp)
    9140:	1006127a 	roli	r3,r2,9
    9144:	e0bff617 	ldw	r2,-40(fp)
    9148:	1885883a 	add	r2,r3,r2
    914c:	e0bff715 	stw	r2,-36(fp)
    9150:	e0bff417 	ldw	r2,-48(fp)
    9154:	100412ba 	roli	r2,r2,10
    9158:	e0bff415 	stw	r2,-48(fp)
    GG(cc, dd, ee, aa, bb, X[2], 11);
    915c:	e0fff417 	ldw	r3,-48(fp)
    9160:	e0bff817 	ldw	r2,-32(fp)
    9164:	1886f03a 	xor	r3,r3,r2
    9168:	e0bff717 	ldw	r2,-36(fp)
    916c:	1886703a 	and	r3,r3,r2
    9170:	e0bff417 	ldw	r2,-48(fp)
    9174:	1886f03a 	xor	r3,r3,r2
    9178:	e0bfff17 	ldw	r2,-4(fp)
    917c:	10800204 	addi	r2,r2,8
    9180:	10800017 	ldw	r2,0(r2)
    9184:	1887883a 	add	r3,r3,r2
    9188:	e0bff617 	ldw	r2,-40(fp)
    918c:	1887883a 	add	r3,r3,r2
    9190:	0096a0b4 	movhi	r2,23170
    9194:	109e6644 	addi	r2,r2,31129
    9198:	1885883a 	add	r2,r3,r2
    919c:	e0bff615 	stw	r2,-40(fp)
    91a0:	e0bff617 	ldw	r2,-40(fp)
    91a4:	100612fa 	roli	r3,r2,11
    91a8:	e0bff517 	ldw	r2,-44(fp)
    91ac:	1885883a 	add	r2,r3,r2
    91b0:	e0bff615 	stw	r2,-40(fp)
    91b4:	e0bff817 	ldw	r2,-32(fp)
    91b8:	100412ba 	roli	r2,r2,10
    91bc:	e0bff815 	stw	r2,-32(fp)
    GG(bb, cc, dd, ee, aa, X[14], 7);
    91c0:	e0fff817 	ldw	r3,-32(fp)
    91c4:	e0bff717 	ldw	r2,-36(fp)
    91c8:	1886f03a 	xor	r3,r3,r2
    91cc:	e0bff617 	ldw	r2,-40(fp)
    91d0:	1886703a 	and	r3,r3,r2
    91d4:	e0bff817 	ldw	r2,-32(fp)
    91d8:	1886f03a 	xor	r3,r3,r2
    91dc:	e0bfff17 	ldw	r2,-4(fp)
    91e0:	10800e04 	addi	r2,r2,56
    91e4:	10800017 	ldw	r2,0(r2)
    91e8:	1887883a 	add	r3,r3,r2
    91ec:	e0bff517 	ldw	r2,-44(fp)
    91f0:	1887883a 	add	r3,r3,r2
    91f4:	0096a0b4 	movhi	r2,23170
    91f8:	109e6644 	addi	r2,r2,31129
    91fc:	1885883a 	add	r2,r3,r2
    9200:	e0bff515 	stw	r2,-44(fp)
    9204:	e0bff517 	ldw	r2,-44(fp)
    9208:	100611fa 	roli	r3,r2,7
    920c:	e0bff417 	ldw	r2,-48(fp)
    9210:	1885883a 	add	r2,r3,r2
    9214:	e0bff515 	stw	r2,-44(fp)
    9218:	e0bff717 	ldw	r2,-36(fp)
    921c:	100412ba 	roli	r2,r2,10
    9220:	e0bff715 	stw	r2,-36(fp)
    GG(aa, bb, cc, dd, ee, X[11], 13);
    9224:	e0fff717 	ldw	r3,-36(fp)
    9228:	e0bff617 	ldw	r2,-40(fp)
    922c:	1886f03a 	xor	r3,r3,r2
    9230:	e0bff517 	ldw	r2,-44(fp)
    9234:	1886703a 	and	r3,r3,r2
    9238:	e0bff717 	ldw	r2,-36(fp)
    923c:	1886f03a 	xor	r3,r3,r2
    9240:	e0bfff17 	ldw	r2,-4(fp)
    9244:	10800b04 	addi	r2,r2,44
    9248:	10800017 	ldw	r2,0(r2)
    924c:	1887883a 	add	r3,r3,r2
    9250:	e0bff417 	ldw	r2,-48(fp)
    9254:	1887883a 	add	r3,r3,r2
    9258:	0096a0b4 	movhi	r2,23170
    925c:	109e6644 	addi	r2,r2,31129
    9260:	1885883a 	add	r2,r3,r2
    9264:	e0bff415 	stw	r2,-48(fp)
    9268:	e0bff417 	ldw	r2,-48(fp)
    926c:	1006137a 	roli	r3,r2,13
    9270:	e0bff817 	ldw	r2,-32(fp)
    9274:	1885883a 	add	r2,r3,r2
    9278:	e0bff415 	stw	r2,-48(fp)
    927c:	e0bff617 	ldw	r2,-40(fp)
    9280:	100412ba 	roli	r2,r2,10
    9284:	e0bff615 	stw	r2,-40(fp)
    GG(ee, aa, bb, cc, dd, X[8], 12);
    9288:	e0fff617 	ldw	r3,-40(fp)
    928c:	e0bff517 	ldw	r2,-44(fp)
    9290:	1886f03a 	xor	r3,r3,r2
    9294:	e0bff417 	ldw	r2,-48(fp)
    9298:	1886703a 	and	r3,r3,r2
    929c:	e0bff617 	ldw	r2,-40(fp)
    92a0:	1886f03a 	xor	r3,r3,r2
    92a4:	e0bfff17 	ldw	r2,-4(fp)
    92a8:	10800804 	addi	r2,r2,32
    92ac:	10800017 	ldw	r2,0(r2)
    92b0:	1887883a 	add	r3,r3,r2
    92b4:	e0bff817 	ldw	r2,-32(fp)
    92b8:	1887883a 	add	r3,r3,r2
    92bc:	0096a0b4 	movhi	r2,23170
    92c0:	109e6644 	addi	r2,r2,31129
    92c4:	1885883a 	add	r2,r3,r2
    92c8:	e0bff815 	stw	r2,-32(fp)
    92cc:	e0bff817 	ldw	r2,-32(fp)
    92d0:	1006133a 	roli	r3,r2,12
    92d4:	e0bff717 	ldw	r2,-36(fp)
    92d8:	1885883a 	add	r2,r3,r2
    92dc:	e0bff815 	stw	r2,-32(fp)
    92e0:	e0bff517 	ldw	r2,-44(fp)
    92e4:	100412ba 	roli	r2,r2,10
    92e8:	e0bff515 	stw	r2,-44(fp)

    /* round 3 */
    HH(dd, ee, aa, bb, cc, X[3], 11);
    92ec:	e0bff417 	ldw	r2,-48(fp)
    92f0:	0086303a 	nor	r3,zero,r2
    92f4:	e0bff817 	ldw	r2,-32(fp)
    92f8:	1886b03a 	or	r3,r3,r2
    92fc:	e0bff517 	ldw	r2,-44(fp)
    9300:	1886f03a 	xor	r3,r3,r2
    9304:	e0bfff17 	ldw	r2,-4(fp)
    9308:	10800304 	addi	r2,r2,12
    930c:	10800017 	ldw	r2,0(r2)
    9310:	1887883a 	add	r3,r3,r2
    9314:	e0bff717 	ldw	r2,-36(fp)
    9318:	1887883a 	add	r3,r3,r2
    931c:	009bb6b4 	movhi	r2,28378
    9320:	10bae844 	addi	r2,r2,-5215
    9324:	1885883a 	add	r2,r3,r2
    9328:	e0bff715 	stw	r2,-36(fp)
    932c:	e0bff717 	ldw	r2,-36(fp)
    9330:	100612fa 	roli	r3,r2,11
    9334:	e0bff617 	ldw	r2,-40(fp)
    9338:	1885883a 	add	r2,r3,r2
    933c:	e0bff715 	stw	r2,-36(fp)
    9340:	e0bff417 	ldw	r2,-48(fp)
    9344:	100412ba 	roli	r2,r2,10
    9348:	e0bff415 	stw	r2,-48(fp)
    HH(cc, dd, ee, aa, bb, X[10], 13);
    934c:	e0bff817 	ldw	r2,-32(fp)
    9350:	0086303a 	nor	r3,zero,r2
    9354:	e0bff717 	ldw	r2,-36(fp)
    9358:	1886b03a 	or	r3,r3,r2
    935c:	e0bff417 	ldw	r2,-48(fp)
    9360:	1886f03a 	xor	r3,r3,r2
    9364:	e0bfff17 	ldw	r2,-4(fp)
    9368:	10800a04 	addi	r2,r2,40
    936c:	10800017 	ldw	r2,0(r2)
    9370:	1887883a 	add	r3,r3,r2
    9374:	e0bff617 	ldw	r2,-40(fp)
    9378:	1887883a 	add	r3,r3,r2
    937c:	009bb6b4 	movhi	r2,28378
    9380:	10bae844 	addi	r2,r2,-5215
    9384:	1885883a 	add	r2,r3,r2
    9388:	e0bff615 	stw	r2,-40(fp)
    938c:	e0bff617 	ldw	r2,-40(fp)
    9390:	1006137a 	roli	r3,r2,13
    9394:	e0bff517 	ldw	r2,-44(fp)
    9398:	1885883a 	add	r2,r3,r2
    939c:	e0bff615 	stw	r2,-40(fp)
    93a0:	e0bff817 	ldw	r2,-32(fp)
    93a4:	100412ba 	roli	r2,r2,10
    93a8:	e0bff815 	stw	r2,-32(fp)
    HH(bb, cc, dd, ee, aa, X[14], 6);
    93ac:	e0bff717 	ldw	r2,-36(fp)
    93b0:	0086303a 	nor	r3,zero,r2
    93b4:	e0bff617 	ldw	r2,-40(fp)
    93b8:	1886b03a 	or	r3,r3,r2
    93bc:	e0bff817 	ldw	r2,-32(fp)
    93c0:	1886f03a 	xor	r3,r3,r2
    93c4:	e0bfff17 	ldw	r2,-4(fp)
    93c8:	10800e04 	addi	r2,r2,56
    93cc:	10800017 	ldw	r2,0(r2)
    93d0:	1887883a 	add	r3,r3,r2
    93d4:	e0bff517 	ldw	r2,-44(fp)
    93d8:	1887883a 	add	r3,r3,r2
    93dc:	009bb6b4 	movhi	r2,28378
    93e0:	10bae844 	addi	r2,r2,-5215
    93e4:	1885883a 	add	r2,r3,r2
    93e8:	e0bff515 	stw	r2,-44(fp)
    93ec:	e0bff517 	ldw	r2,-44(fp)
    93f0:	100611ba 	roli	r3,r2,6
    93f4:	e0bff417 	ldw	r2,-48(fp)
    93f8:	1885883a 	add	r2,r3,r2
    93fc:	e0bff515 	stw	r2,-44(fp)
    9400:	e0bff717 	ldw	r2,-36(fp)
    9404:	100412ba 	roli	r2,r2,10
    9408:	e0bff715 	stw	r2,-36(fp)
    HH(aa, bb, cc, dd, ee, X[4], 7);
    940c:	e0bff617 	ldw	r2,-40(fp)
    9410:	0086303a 	nor	r3,zero,r2
    9414:	e0bff517 	ldw	r2,-44(fp)
    9418:	1886b03a 	or	r3,r3,r2
    941c:	e0bff717 	ldw	r2,-36(fp)
    9420:	1886f03a 	xor	r3,r3,r2
    9424:	e0bfff17 	ldw	r2,-4(fp)
    9428:	10800404 	addi	r2,r2,16
    942c:	10800017 	ldw	r2,0(r2)
    9430:	1887883a 	add	r3,r3,r2
    9434:	e0bff417 	ldw	r2,-48(fp)
    9438:	1887883a 	add	r3,r3,r2
    943c:	009bb6b4 	movhi	r2,28378
    9440:	10bae844 	addi	r2,r2,-5215
    9444:	1885883a 	add	r2,r3,r2
    9448:	e0bff415 	stw	r2,-48(fp)
    944c:	e0bff417 	ldw	r2,-48(fp)
    9450:	100611fa 	roli	r3,r2,7
    9454:	e0bff817 	ldw	r2,-32(fp)
    9458:	1885883a 	add	r2,r3,r2
    945c:	e0bff415 	stw	r2,-48(fp)
    9460:	e0bff617 	ldw	r2,-40(fp)
    9464:	100412ba 	roli	r2,r2,10
    9468:	e0bff615 	stw	r2,-40(fp)
    HH(ee, aa, bb, cc, dd, X[9], 14);
    946c:	e0bff517 	ldw	r2,-44(fp)
    9470:	0086303a 	nor	r3,zero,r2
    9474:	e0bff417 	ldw	r2,-48(fp)
    9478:	1886b03a 	or	r3,r3,r2
    947c:	e0bff617 	ldw	r2,-40(fp)
    9480:	1886f03a 	xor	r3,r3,r2
    9484:	e0bfff17 	ldw	r2,-4(fp)
    9488:	10800904 	addi	r2,r2,36
    948c:	10800017 	ldw	r2,0(r2)
    9490:	1887883a 	add	r3,r3,r2
    9494:	e0bff817 	ldw	r2,-32(fp)
    9498:	1887883a 	add	r3,r3,r2
    949c:	009bb6b4 	movhi	r2,28378
    94a0:	10bae844 	addi	r2,r2,-5215
    94a4:	1885883a 	add	r2,r3,r2
    94a8:	e0bff815 	stw	r2,-32(fp)
    94ac:	e0bff817 	ldw	r2,-32(fp)
    94b0:	100613ba 	roli	r3,r2,14
    94b4:	e0bff717 	ldw	r2,-36(fp)
    94b8:	1885883a 	add	r2,r3,r2
    94bc:	e0bff815 	stw	r2,-32(fp)
    94c0:	e0bff517 	ldw	r2,-44(fp)
    94c4:	100412ba 	roli	r2,r2,10
    94c8:	e0bff515 	stw	r2,-44(fp)
    HH(dd, ee, aa, bb, cc, X[15], 9);
    94cc:	e0bff417 	ldw	r2,-48(fp)
    94d0:	0086303a 	nor	r3,zero,r2
    94d4:	e0bff817 	ldw	r2,-32(fp)
    94d8:	1886b03a 	or	r3,r3,r2
    94dc:	e0bff517 	ldw	r2,-44(fp)
    94e0:	1886f03a 	xor	r3,r3,r2
    94e4:	e0bfff17 	ldw	r2,-4(fp)
    94e8:	10800f04 	addi	r2,r2,60
    94ec:	10800017 	ldw	r2,0(r2)
    94f0:	1887883a 	add	r3,r3,r2
    94f4:	e0bff717 	ldw	r2,-36(fp)
    94f8:	1887883a 	add	r3,r3,r2
    94fc:	009bb6b4 	movhi	r2,28378
    9500:	10bae844 	addi	r2,r2,-5215
    9504:	1885883a 	add	r2,r3,r2
    9508:	e0bff715 	stw	r2,-36(fp)
    950c:	e0bff717 	ldw	r2,-36(fp)
    9510:	1006127a 	roli	r3,r2,9
    9514:	e0bff617 	ldw	r2,-40(fp)
    9518:	1885883a 	add	r2,r3,r2
    951c:	e0bff715 	stw	r2,-36(fp)
    9520:	e0bff417 	ldw	r2,-48(fp)
    9524:	100412ba 	roli	r2,r2,10
    9528:	e0bff415 	stw	r2,-48(fp)
    HH(cc, dd, ee, aa, bb, X[8], 13);
    952c:	e0bff817 	ldw	r2,-32(fp)
    9530:	0086303a 	nor	r3,zero,r2
    9534:	e0bff717 	ldw	r2,-36(fp)
    9538:	1886b03a 	or	r3,r3,r2
    953c:	e0bff417 	ldw	r2,-48(fp)
    9540:	1886f03a 	xor	r3,r3,r2
    9544:	e0bfff17 	ldw	r2,-4(fp)
    9548:	10800804 	addi	r2,r2,32
    954c:	10800017 	ldw	r2,0(r2)
    9550:	1887883a 	add	r3,r3,r2
    9554:	e0bff617 	ldw	r2,-40(fp)
    9558:	1887883a 	add	r3,r3,r2
    955c:	009bb6b4 	movhi	r2,28378
    9560:	10bae844 	addi	r2,r2,-5215
    9564:	1885883a 	add	r2,r3,r2
    9568:	e0bff615 	stw	r2,-40(fp)
    956c:	e0bff617 	ldw	r2,-40(fp)
    9570:	1006137a 	roli	r3,r2,13
    9574:	e0bff517 	ldw	r2,-44(fp)
    9578:	1885883a 	add	r2,r3,r2
    957c:	e0bff615 	stw	r2,-40(fp)
    9580:	e0bff817 	ldw	r2,-32(fp)
    9584:	100412ba 	roli	r2,r2,10
    9588:	e0bff815 	stw	r2,-32(fp)
    HH(bb, cc, dd, ee, aa, X[1], 15);
    958c:	e0bff717 	ldw	r2,-36(fp)
    9590:	0086303a 	nor	r3,zero,r2
    9594:	e0bff617 	ldw	r2,-40(fp)
    9598:	1886b03a 	or	r3,r3,r2
    959c:	e0bff817 	ldw	r2,-32(fp)
    95a0:	1886f03a 	xor	r3,r3,r2
    95a4:	e0bfff17 	ldw	r2,-4(fp)
    95a8:	10800104 	addi	r2,r2,4
    95ac:	10800017 	ldw	r2,0(r2)
    95b0:	1887883a 	add	r3,r3,r2
    95b4:	e0bff517 	ldw	r2,-44(fp)
    95b8:	1887883a 	add	r3,r3,r2
    95bc:	009bb6b4 	movhi	r2,28378
    95c0:	10bae844 	addi	r2,r2,-5215
    95c4:	1885883a 	add	r2,r3,r2
    95c8:	e0bff515 	stw	r2,-44(fp)
    95cc:	e0bff517 	ldw	r2,-44(fp)
    95d0:	100613fa 	roli	r3,r2,15
    95d4:	e0bff417 	ldw	r2,-48(fp)
    95d8:	1885883a 	add	r2,r3,r2
    95dc:	e0bff515 	stw	r2,-44(fp)
    95e0:	e0bff717 	ldw	r2,-36(fp)
    95e4:	100412ba 	roli	r2,r2,10
    95e8:	e0bff715 	stw	r2,-36(fp)
    HH(aa, bb, cc, dd, ee, X[2], 14);
    95ec:	e0bff617 	ldw	r2,-40(fp)
    95f0:	0086303a 	nor	r3,zero,r2
    95f4:	e0bff517 	ldw	r2,-44(fp)
    95f8:	1886b03a 	or	r3,r3,r2
    95fc:	e0bff717 	ldw	r2,-36(fp)
    9600:	1886f03a 	xor	r3,r3,r2
    9604:	e0bfff17 	ldw	r2,-4(fp)
    9608:	10800204 	addi	r2,r2,8
    960c:	10800017 	ldw	r2,0(r2)
    9610:	1887883a 	add	r3,r3,r2
    9614:	e0bff417 	ldw	r2,-48(fp)
    9618:	1887883a 	add	r3,r3,r2
    961c:	009bb6b4 	movhi	r2,28378
    9620:	10bae844 	addi	r2,r2,-5215
    9624:	1885883a 	add	r2,r3,r2
    9628:	e0bff415 	stw	r2,-48(fp)
    962c:	e0bff417 	ldw	r2,-48(fp)
    9630:	100613ba 	roli	r3,r2,14
    9634:	e0bff817 	ldw	r2,-32(fp)
    9638:	1885883a 	add	r2,r3,r2
    963c:	e0bff415 	stw	r2,-48(fp)
    9640:	e0bff617 	ldw	r2,-40(fp)
    9644:	100412ba 	roli	r2,r2,10
    9648:	e0bff615 	stw	r2,-40(fp)
    HH(ee, aa, bb, cc, dd, X[7], 8);
    964c:	e0bff517 	ldw	r2,-44(fp)
    9650:	0086303a 	nor	r3,zero,r2
    9654:	e0bff417 	ldw	r2,-48(fp)
    9658:	1886b03a 	or	r3,r3,r2
    965c:	e0bff617 	ldw	r2,-40(fp)
    9660:	1886f03a 	xor	r3,r3,r2
    9664:	e0bfff17 	ldw	r2,-4(fp)
    9668:	10800704 	addi	r2,r2,28
    966c:	10800017 	ldw	r2,0(r2)
    9670:	1887883a 	add	r3,r3,r2
    9674:	e0bff817 	ldw	r2,-32(fp)
    9678:	1887883a 	add	r3,r3,r2
    967c:	009bb6b4 	movhi	r2,28378
    9680:	10bae844 	addi	r2,r2,-5215
    9684:	1885883a 	add	r2,r3,r2
    9688:	e0bff815 	stw	r2,-32(fp)
    968c:	e0bff817 	ldw	r2,-32(fp)
    9690:	1006123a 	roli	r3,r2,8
    9694:	e0bff717 	ldw	r2,-36(fp)
    9698:	1885883a 	add	r2,r3,r2
    969c:	e0bff815 	stw	r2,-32(fp)
    96a0:	e0bff517 	ldw	r2,-44(fp)
    96a4:	100412ba 	roli	r2,r2,10
    96a8:	e0bff515 	stw	r2,-44(fp)
    HH(dd, ee, aa, bb, cc, X[0], 13);
    96ac:	e0bff417 	ldw	r2,-48(fp)
    96b0:	0086303a 	nor	r3,zero,r2
    96b4:	e0bff817 	ldw	r2,-32(fp)
    96b8:	1886b03a 	or	r3,r3,r2
    96bc:	e0bff517 	ldw	r2,-44(fp)
    96c0:	1886f03a 	xor	r3,r3,r2
    96c4:	e0bfff17 	ldw	r2,-4(fp)
    96c8:	10800017 	ldw	r2,0(r2)
    96cc:	1887883a 	add	r3,r3,r2
    96d0:	e0bff717 	ldw	r2,-36(fp)
    96d4:	1887883a 	add	r3,r3,r2
    96d8:	009bb6b4 	movhi	r2,28378
    96dc:	10bae844 	addi	r2,r2,-5215
    96e0:	1885883a 	add	r2,r3,r2
    96e4:	e0bff715 	stw	r2,-36(fp)
    96e8:	e0bff717 	ldw	r2,-36(fp)
    96ec:	1006137a 	roli	r3,r2,13
    96f0:	e0bff617 	ldw	r2,-40(fp)
    96f4:	1885883a 	add	r2,r3,r2
    96f8:	e0bff715 	stw	r2,-36(fp)
    96fc:	e0bff417 	ldw	r2,-48(fp)
    9700:	100412ba 	roli	r2,r2,10
    9704:	e0bff415 	stw	r2,-48(fp)
    HH(cc, dd, ee, aa, bb, X[6], 6);
    9708:	e0bff817 	ldw	r2,-32(fp)
    970c:	0086303a 	nor	r3,zero,r2
    9710:	e0bff717 	ldw	r2,-36(fp)
    9714:	1886b03a 	or	r3,r3,r2
    9718:	e0bff417 	ldw	r2,-48(fp)
    971c:	1886f03a 	xor	r3,r3,r2
    9720:	e0bfff17 	ldw	r2,-4(fp)
    9724:	10800604 	addi	r2,r2,24
    9728:	10800017 	ldw	r2,0(r2)
    972c:	1887883a 	add	r3,r3,r2
    9730:	e0bff617 	ldw	r2,-40(fp)
    9734:	1887883a 	add	r3,r3,r2
    9738:	009bb6b4 	movhi	r2,28378
    973c:	10bae844 	addi	r2,r2,-5215
    9740:	1885883a 	add	r2,r3,r2
    9744:	e0bff615 	stw	r2,-40(fp)
    9748:	e0bff617 	ldw	r2,-40(fp)
    974c:	100611ba 	roli	r3,r2,6
    9750:	e0bff517 	ldw	r2,-44(fp)
    9754:	1885883a 	add	r2,r3,r2
    9758:	e0bff615 	stw	r2,-40(fp)
    975c:	e0bff817 	ldw	r2,-32(fp)
    9760:	100412ba 	roli	r2,r2,10
    9764:	e0bff815 	stw	r2,-32(fp)
    HH(bb, cc, dd, ee, aa, X[13], 5);
    9768:	e0bff717 	ldw	r2,-36(fp)
    976c:	0086303a 	nor	r3,zero,r2
    9770:	e0bff617 	ldw	r2,-40(fp)
    9774:	1886b03a 	or	r3,r3,r2
    9778:	e0bff817 	ldw	r2,-32(fp)
    977c:	1886f03a 	xor	r3,r3,r2
    9780:	e0bfff17 	ldw	r2,-4(fp)
    9784:	10800d04 	addi	r2,r2,52
    9788:	10800017 	ldw	r2,0(r2)
    978c:	1887883a 	add	r3,r3,r2
    9790:	e0bff517 	ldw	r2,-44(fp)
    9794:	1887883a 	add	r3,r3,r2
    9798:	009bb6b4 	movhi	r2,28378
    979c:	10bae844 	addi	r2,r2,-5215
    97a0:	1885883a 	add	r2,r3,r2
    97a4:	e0bff515 	stw	r2,-44(fp)
    97a8:	e0bff517 	ldw	r2,-44(fp)
    97ac:	1006117a 	roli	r3,r2,5
    97b0:	e0bff417 	ldw	r2,-48(fp)
    97b4:	1885883a 	add	r2,r3,r2
    97b8:	e0bff515 	stw	r2,-44(fp)
    97bc:	e0bff717 	ldw	r2,-36(fp)
    97c0:	100412ba 	roli	r2,r2,10
    97c4:	e0bff715 	stw	r2,-36(fp)
    HH(aa, bb, cc, dd, ee, X[11], 12);
    97c8:	e0bff617 	ldw	r2,-40(fp)
    97cc:	0086303a 	nor	r3,zero,r2
    97d0:	e0bff517 	ldw	r2,-44(fp)
    97d4:	1886b03a 	or	r3,r3,r2
    97d8:	e0bff717 	ldw	r2,-36(fp)
    97dc:	1886f03a 	xor	r3,r3,r2
    97e0:	e0bfff17 	ldw	r2,-4(fp)
    97e4:	10800b04 	addi	r2,r2,44
    97e8:	10800017 	ldw	r2,0(r2)
    97ec:	1887883a 	add	r3,r3,r2
    97f0:	e0bff417 	ldw	r2,-48(fp)
    97f4:	1887883a 	add	r3,r3,r2
    97f8:	009bb6b4 	movhi	r2,28378
    97fc:	10bae844 	addi	r2,r2,-5215
    9800:	1885883a 	add	r2,r3,r2
    9804:	e0bff415 	stw	r2,-48(fp)
    9808:	e0bff417 	ldw	r2,-48(fp)
    980c:	1006133a 	roli	r3,r2,12
    9810:	e0bff817 	ldw	r2,-32(fp)
    9814:	1885883a 	add	r2,r3,r2
    9818:	e0bff415 	stw	r2,-48(fp)
    981c:	e0bff617 	ldw	r2,-40(fp)
    9820:	100412ba 	roli	r2,r2,10
    9824:	e0bff615 	stw	r2,-40(fp)
    HH(ee, aa, bb, cc, dd, X[5], 7);
    9828:	e0bff517 	ldw	r2,-44(fp)
    982c:	0086303a 	nor	r3,zero,r2
    9830:	e0bff417 	ldw	r2,-48(fp)
    9834:	1886b03a 	or	r3,r3,r2
    9838:	e0bff617 	ldw	r2,-40(fp)
    983c:	1886f03a 	xor	r3,r3,r2
    9840:	e0bfff17 	ldw	r2,-4(fp)
    9844:	10800504 	addi	r2,r2,20
    9848:	10800017 	ldw	r2,0(r2)
    984c:	1887883a 	add	r3,r3,r2
    9850:	e0bff817 	ldw	r2,-32(fp)
    9854:	1887883a 	add	r3,r3,r2
    9858:	009bb6b4 	movhi	r2,28378
    985c:	10bae844 	addi	r2,r2,-5215
    9860:	1885883a 	add	r2,r3,r2
    9864:	e0bff815 	stw	r2,-32(fp)
    9868:	e0bff817 	ldw	r2,-32(fp)
    986c:	100611fa 	roli	r3,r2,7
    9870:	e0bff717 	ldw	r2,-36(fp)
    9874:	1885883a 	add	r2,r3,r2
    9878:	e0bff815 	stw	r2,-32(fp)
    987c:	e0bff517 	ldw	r2,-44(fp)
    9880:	100412ba 	roli	r2,r2,10
    9884:	e0bff515 	stw	r2,-44(fp)
    HH(dd, ee, aa, bb, cc, X[12], 5);
    9888:	e0bff417 	ldw	r2,-48(fp)
    988c:	0086303a 	nor	r3,zero,r2
    9890:	e0bff817 	ldw	r2,-32(fp)
    9894:	1886b03a 	or	r3,r3,r2
    9898:	e0bff517 	ldw	r2,-44(fp)
    989c:	1886f03a 	xor	r3,r3,r2
    98a0:	e0bfff17 	ldw	r2,-4(fp)
    98a4:	10800c04 	addi	r2,r2,48
    98a8:	10800017 	ldw	r2,0(r2)
    98ac:	1887883a 	add	r3,r3,r2
    98b0:	e0bff717 	ldw	r2,-36(fp)
    98b4:	1887883a 	add	r3,r3,r2
    98b8:	009bb6b4 	movhi	r2,28378
    98bc:	10bae844 	addi	r2,r2,-5215
    98c0:	1885883a 	add	r2,r3,r2
    98c4:	e0bff715 	stw	r2,-36(fp)
    98c8:	e0bff717 	ldw	r2,-36(fp)
    98cc:	1006117a 	roli	r3,r2,5
    98d0:	e0bff617 	ldw	r2,-40(fp)
    98d4:	1885883a 	add	r2,r3,r2
    98d8:	e0bff715 	stw	r2,-36(fp)
    98dc:	e0bff417 	ldw	r2,-48(fp)
    98e0:	100412ba 	roli	r2,r2,10
    98e4:	e0bff415 	stw	r2,-48(fp)

    /* round 4 */
    II(cc, dd, ee, aa, bb, X[1], 11);
    98e8:	e0fff817 	ldw	r3,-32(fp)
    98ec:	e0bff717 	ldw	r2,-36(fp)
    98f0:	1886f03a 	xor	r3,r3,r2
    98f4:	e0bff417 	ldw	r2,-48(fp)
    98f8:	1886703a 	and	r3,r3,r2
    98fc:	e0bff817 	ldw	r2,-32(fp)
    9900:	1886f03a 	xor	r3,r3,r2
    9904:	e0bfff17 	ldw	r2,-4(fp)
    9908:	10800104 	addi	r2,r2,4
    990c:	10800017 	ldw	r2,0(r2)
    9910:	1887883a 	add	r3,r3,r2
    9914:	e0bff617 	ldw	r2,-40(fp)
    9918:	1887883a 	add	r3,r3,r2
    991c:	00a3c734 	movhi	r2,36636
    9920:	10af3704 	addi	r2,r2,-17188
    9924:	1885883a 	add	r2,r3,r2
    9928:	e0bff615 	stw	r2,-40(fp)
    992c:	e0bff617 	ldw	r2,-40(fp)
    9930:	100612fa 	roli	r3,r2,11
    9934:	e0bff517 	ldw	r2,-44(fp)
    9938:	1885883a 	add	r2,r3,r2
    993c:	e0bff615 	stw	r2,-40(fp)
    9940:	e0bff817 	ldw	r2,-32(fp)
    9944:	100412ba 	roli	r2,r2,10
    9948:	e0bff815 	stw	r2,-32(fp)
    II(bb, cc, dd, ee, aa, X[9], 12);
    994c:	e0fff717 	ldw	r3,-36(fp)
    9950:	e0bff617 	ldw	r2,-40(fp)
    9954:	1886f03a 	xor	r3,r3,r2
    9958:	e0bff817 	ldw	r2,-32(fp)
    995c:	1886703a 	and	r3,r3,r2
    9960:	e0bff717 	ldw	r2,-36(fp)
    9964:	1886f03a 	xor	r3,r3,r2
    9968:	e0bfff17 	ldw	r2,-4(fp)
    996c:	10800904 	addi	r2,r2,36
    9970:	10800017 	ldw	r2,0(r2)
    9974:	1887883a 	add	r3,r3,r2
    9978:	e0bff517 	ldw	r2,-44(fp)
    997c:	1887883a 	add	r3,r3,r2
    9980:	00a3c734 	movhi	r2,36636
    9984:	10af3704 	addi	r2,r2,-17188
    9988:	1885883a 	add	r2,r3,r2
    998c:	e0bff515 	stw	r2,-44(fp)
    9990:	e0bff517 	ldw	r2,-44(fp)
    9994:	1006133a 	roli	r3,r2,12
    9998:	e0bff417 	ldw	r2,-48(fp)
    999c:	1885883a 	add	r2,r3,r2
    99a0:	e0bff515 	stw	r2,-44(fp)
    99a4:	e0bff717 	ldw	r2,-36(fp)
    99a8:	100412ba 	roli	r2,r2,10
    99ac:	e0bff715 	stw	r2,-36(fp)
    II(aa, bb, cc, dd, ee, X[11], 14);
    99b0:	e0fff617 	ldw	r3,-40(fp)
    99b4:	e0bff517 	ldw	r2,-44(fp)
    99b8:	1886f03a 	xor	r3,r3,r2
    99bc:	e0bff717 	ldw	r2,-36(fp)
    99c0:	1886703a 	and	r3,r3,r2
    99c4:	e0bff617 	ldw	r2,-40(fp)
    99c8:	1886f03a 	xor	r3,r3,r2
    99cc:	e0bfff17 	ldw	r2,-4(fp)
    99d0:	10800b04 	addi	r2,r2,44
    99d4:	10800017 	ldw	r2,0(r2)
    99d8:	1887883a 	add	r3,r3,r2
    99dc:	e0bff417 	ldw	r2,-48(fp)
    99e0:	1887883a 	add	r3,r3,r2
    99e4:	00a3c734 	movhi	r2,36636
    99e8:	10af3704 	addi	r2,r2,-17188
    99ec:	1885883a 	add	r2,r3,r2
    99f0:	e0bff415 	stw	r2,-48(fp)
    99f4:	e0bff417 	ldw	r2,-48(fp)
    99f8:	100613ba 	roli	r3,r2,14
    99fc:	e0bff817 	ldw	r2,-32(fp)
    9a00:	1885883a 	add	r2,r3,r2
    9a04:	e0bff415 	stw	r2,-48(fp)
    9a08:	e0bff617 	ldw	r2,-40(fp)
    9a0c:	100412ba 	roli	r2,r2,10
    9a10:	e0bff615 	stw	r2,-40(fp)
    II(ee, aa, bb, cc, dd, X[10], 15);
    9a14:	e0fff517 	ldw	r3,-44(fp)
    9a18:	e0bff417 	ldw	r2,-48(fp)
    9a1c:	1886f03a 	xor	r3,r3,r2
    9a20:	e0bff617 	ldw	r2,-40(fp)
    9a24:	1886703a 	and	r3,r3,r2
    9a28:	e0bff517 	ldw	r2,-44(fp)
    9a2c:	1886f03a 	xor	r3,r3,r2
    9a30:	e0bfff17 	ldw	r2,-4(fp)
    9a34:	10800a04 	addi	r2,r2,40
    9a38:	10800017 	ldw	r2,0(r2)
    9a3c:	1887883a 	add	r3,r3,r2
    9a40:	e0bff817 	ldw	r2,-32(fp)
    9a44:	1887883a 	add	r3,r3,r2
    9a48:	00a3c734 	movhi	r2,36636
    9a4c:	10af3704 	addi	r2,r2,-17188
    9a50:	1885883a 	add	r2,r3,r2
    9a54:	e0bff815 	stw	r2,-32(fp)
    9a58:	e0bff817 	ldw	r2,-32(fp)
    9a5c:	100613fa 	roli	r3,r2,15
    9a60:	e0bff717 	ldw	r2,-36(fp)
    9a64:	1885883a 	add	r2,r3,r2
    9a68:	e0bff815 	stw	r2,-32(fp)
    9a6c:	e0bff517 	ldw	r2,-44(fp)
    9a70:	100412ba 	roli	r2,r2,10
    9a74:	e0bff515 	stw	r2,-44(fp)
    II(dd, ee, aa, bb, cc, X[0], 14);
    9a78:	e0fff417 	ldw	r3,-48(fp)
    9a7c:	e0bff817 	ldw	r2,-32(fp)
    9a80:	1886f03a 	xor	r3,r3,r2
    9a84:	e0bff517 	ldw	r2,-44(fp)
    9a88:	1886703a 	and	r3,r3,r2
    9a8c:	e0bff417 	ldw	r2,-48(fp)
    9a90:	1886f03a 	xor	r3,r3,r2
    9a94:	e0bfff17 	ldw	r2,-4(fp)
    9a98:	10800017 	ldw	r2,0(r2)
    9a9c:	1887883a 	add	r3,r3,r2
    9aa0:	e0bff717 	ldw	r2,-36(fp)
    9aa4:	1887883a 	add	r3,r3,r2
    9aa8:	00a3c734 	movhi	r2,36636
    9aac:	10af3704 	addi	r2,r2,-17188
    9ab0:	1885883a 	add	r2,r3,r2
    9ab4:	e0bff715 	stw	r2,-36(fp)
    9ab8:	e0bff717 	ldw	r2,-36(fp)
    9abc:	100613ba 	roli	r3,r2,14
    9ac0:	e0bff617 	ldw	r2,-40(fp)
    9ac4:	1885883a 	add	r2,r3,r2
    9ac8:	e0bff715 	stw	r2,-36(fp)
    9acc:	e0bff417 	ldw	r2,-48(fp)
    9ad0:	100412ba 	roli	r2,r2,10
    9ad4:	e0bff415 	stw	r2,-48(fp)
    II(cc, dd, ee, aa, bb, X[8], 15);
    9ad8:	e0fff817 	ldw	r3,-32(fp)
    9adc:	e0bff717 	ldw	r2,-36(fp)
    9ae0:	1886f03a 	xor	r3,r3,r2
    9ae4:	e0bff417 	ldw	r2,-48(fp)
    9ae8:	1886703a 	and	r3,r3,r2
    9aec:	e0bff817 	ldw	r2,-32(fp)
    9af0:	1886f03a 	xor	r3,r3,r2
    9af4:	e0bfff17 	ldw	r2,-4(fp)
    9af8:	10800804 	addi	r2,r2,32
    9afc:	10800017 	ldw	r2,0(r2)
    9b00:	1887883a 	add	r3,r3,r2
    9b04:	e0bff617 	ldw	r2,-40(fp)
    9b08:	1887883a 	add	r3,r3,r2
    9b0c:	00a3c734 	movhi	r2,36636
    9b10:	10af3704 	addi	r2,r2,-17188
    9b14:	1885883a 	add	r2,r3,r2
    9b18:	e0bff615 	stw	r2,-40(fp)
    9b1c:	e0bff617 	ldw	r2,-40(fp)
    9b20:	100613fa 	roli	r3,r2,15
    9b24:	e0bff517 	ldw	r2,-44(fp)
    9b28:	1885883a 	add	r2,r3,r2
    9b2c:	e0bff615 	stw	r2,-40(fp)
    9b30:	e0bff817 	ldw	r2,-32(fp)
    9b34:	100412ba 	roli	r2,r2,10
    9b38:	e0bff815 	stw	r2,-32(fp)
    II(bb, cc, dd, ee, aa, X[12], 9);
    9b3c:	e0fff717 	ldw	r3,-36(fp)
    9b40:	e0bff617 	ldw	r2,-40(fp)
    9b44:	1886f03a 	xor	r3,r3,r2
    9b48:	e0bff817 	ldw	r2,-32(fp)
    9b4c:	1886703a 	and	r3,r3,r2
    9b50:	e0bff717 	ldw	r2,-36(fp)
    9b54:	1886f03a 	xor	r3,r3,r2
    9b58:	e0bfff17 	ldw	r2,-4(fp)
    9b5c:	10800c04 	addi	r2,r2,48
    9b60:	10800017 	ldw	r2,0(r2)
    9b64:	1887883a 	add	r3,r3,r2
    9b68:	e0bff517 	ldw	r2,-44(fp)
    9b6c:	1887883a 	add	r3,r3,r2
    9b70:	00a3c734 	movhi	r2,36636
    9b74:	10af3704 	addi	r2,r2,-17188
    9b78:	1885883a 	add	r2,r3,r2
    9b7c:	e0bff515 	stw	r2,-44(fp)
    9b80:	e0bff517 	ldw	r2,-44(fp)
    9b84:	1006127a 	roli	r3,r2,9
    9b88:	e0bff417 	ldw	r2,-48(fp)
    9b8c:	1885883a 	add	r2,r3,r2
    9b90:	e0bff515 	stw	r2,-44(fp)
    9b94:	e0bff717 	ldw	r2,-36(fp)
    9b98:	100412ba 	roli	r2,r2,10
    9b9c:	e0bff715 	stw	r2,-36(fp)
    II(aa, bb, cc, dd, ee, X[4], 8);
    9ba0:	e0fff617 	ldw	r3,-40(fp)
    9ba4:	e0bff517 	ldw	r2,-44(fp)
    9ba8:	1886f03a 	xor	r3,r3,r2
    9bac:	e0bff717 	ldw	r2,-36(fp)
    9bb0:	1886703a 	and	r3,r3,r2
    9bb4:	e0bff617 	ldw	r2,-40(fp)
    9bb8:	1886f03a 	xor	r3,r3,r2
    9bbc:	e0bfff17 	ldw	r2,-4(fp)
    9bc0:	10800404 	addi	r2,r2,16
    9bc4:	10800017 	ldw	r2,0(r2)
    9bc8:	1887883a 	add	r3,r3,r2
    9bcc:	e0bff417 	ldw	r2,-48(fp)
    9bd0:	1887883a 	add	r3,r3,r2
    9bd4:	00a3c734 	movhi	r2,36636
    9bd8:	10af3704 	addi	r2,r2,-17188
    9bdc:	1885883a 	add	r2,r3,r2
    9be0:	e0bff415 	stw	r2,-48(fp)
    9be4:	e0bff417 	ldw	r2,-48(fp)
    9be8:	1006123a 	roli	r3,r2,8
    9bec:	e0bff817 	ldw	r2,-32(fp)
    9bf0:	1885883a 	add	r2,r3,r2
    9bf4:	e0bff415 	stw	r2,-48(fp)
    9bf8:	e0bff617 	ldw	r2,-40(fp)
    9bfc:	100412ba 	roli	r2,r2,10
    9c00:	e0bff615 	stw	r2,-40(fp)
    II(ee, aa, bb, cc, dd, X[13], 9);
    9c04:	e0fff517 	ldw	r3,-44(fp)
    9c08:	e0bff417 	ldw	r2,-48(fp)
    9c0c:	1886f03a 	xor	r3,r3,r2
    9c10:	e0bff617 	ldw	r2,-40(fp)
    9c14:	1886703a 	and	r3,r3,r2
    9c18:	e0bff517 	ldw	r2,-44(fp)
    9c1c:	1886f03a 	xor	r3,r3,r2
    9c20:	e0bfff17 	ldw	r2,-4(fp)
    9c24:	10800d04 	addi	r2,r2,52
    9c28:	10800017 	ldw	r2,0(r2)
    9c2c:	1887883a 	add	r3,r3,r2
    9c30:	e0bff817 	ldw	r2,-32(fp)
    9c34:	1887883a 	add	r3,r3,r2
    9c38:	00a3c734 	movhi	r2,36636
    9c3c:	10af3704 	addi	r2,r2,-17188
    9c40:	1885883a 	add	r2,r3,r2
    9c44:	e0bff815 	stw	r2,-32(fp)
    9c48:	e0bff817 	ldw	r2,-32(fp)
    9c4c:	1006127a 	roli	r3,r2,9
    9c50:	e0bff717 	ldw	r2,-36(fp)
    9c54:	1885883a 	add	r2,r3,r2
    9c58:	e0bff815 	stw	r2,-32(fp)
    9c5c:	e0bff517 	ldw	r2,-44(fp)
    9c60:	100412ba 	roli	r2,r2,10
    9c64:	e0bff515 	stw	r2,-44(fp)
    II(dd, ee, aa, bb, cc, X[3], 14);
    9c68:	e0fff417 	ldw	r3,-48(fp)
    9c6c:	e0bff817 	ldw	r2,-32(fp)
    9c70:	1886f03a 	xor	r3,r3,r2
    9c74:	e0bff517 	ldw	r2,-44(fp)
    9c78:	1886703a 	and	r3,r3,r2
    9c7c:	e0bff417 	ldw	r2,-48(fp)
    9c80:	1886f03a 	xor	r3,r3,r2
    9c84:	e0bfff17 	ldw	r2,-4(fp)
    9c88:	10800304 	addi	r2,r2,12
    9c8c:	10800017 	ldw	r2,0(r2)
    9c90:	1887883a 	add	r3,r3,r2
    9c94:	e0bff717 	ldw	r2,-36(fp)
    9c98:	1887883a 	add	r3,r3,r2
    9c9c:	00a3c734 	movhi	r2,36636
    9ca0:	10af3704 	addi	r2,r2,-17188
    9ca4:	1885883a 	add	r2,r3,r2
    9ca8:	e0bff715 	stw	r2,-36(fp)
    9cac:	e0bff717 	ldw	r2,-36(fp)
    9cb0:	100613ba 	roli	r3,r2,14
    9cb4:	e0bff617 	ldw	r2,-40(fp)
    9cb8:	1885883a 	add	r2,r3,r2
    9cbc:	e0bff715 	stw	r2,-36(fp)
    9cc0:	e0bff417 	ldw	r2,-48(fp)
    9cc4:	100412ba 	roli	r2,r2,10
    9cc8:	e0bff415 	stw	r2,-48(fp)
    II(cc, dd, ee, aa, bb, X[7], 5);
    9ccc:	e0fff817 	ldw	r3,-32(fp)
    9cd0:	e0bff717 	ldw	r2,-36(fp)
    9cd4:	1886f03a 	xor	r3,r3,r2
    9cd8:	e0bff417 	ldw	r2,-48(fp)
    9cdc:	1886703a 	and	r3,r3,r2
    9ce0:	e0bff817 	ldw	r2,-32(fp)
    9ce4:	1886f03a 	xor	r3,r3,r2
    9ce8:	e0bfff17 	ldw	r2,-4(fp)
    9cec:	10800704 	addi	r2,r2,28
    9cf0:	10800017 	ldw	r2,0(r2)
    9cf4:	1887883a 	add	r3,r3,r2
    9cf8:	e0bff617 	ldw	r2,-40(fp)
    9cfc:	1887883a 	add	r3,r3,r2
    9d00:	00a3c734 	movhi	r2,36636
    9d04:	10af3704 	addi	r2,r2,-17188
    9d08:	1885883a 	add	r2,r3,r2
    9d0c:	e0bff615 	stw	r2,-40(fp)
    9d10:	e0bff617 	ldw	r2,-40(fp)
    9d14:	1006117a 	roli	r3,r2,5
    9d18:	e0bff517 	ldw	r2,-44(fp)
    9d1c:	1885883a 	add	r2,r3,r2
    9d20:	e0bff615 	stw	r2,-40(fp)
    9d24:	e0bff817 	ldw	r2,-32(fp)
    9d28:	100412ba 	roli	r2,r2,10
    9d2c:	e0bff815 	stw	r2,-32(fp)
    II(bb, cc, dd, ee, aa, X[15], 6);
    9d30:	e0fff717 	ldw	r3,-36(fp)
    9d34:	e0bff617 	ldw	r2,-40(fp)
    9d38:	1886f03a 	xor	r3,r3,r2
    9d3c:	e0bff817 	ldw	r2,-32(fp)
    9d40:	1886703a 	and	r3,r3,r2
    9d44:	e0bff717 	ldw	r2,-36(fp)
    9d48:	1886f03a 	xor	r3,r3,r2
    9d4c:	e0bfff17 	ldw	r2,-4(fp)
    9d50:	10800f04 	addi	r2,r2,60
    9d54:	10800017 	ldw	r2,0(r2)
    9d58:	1887883a 	add	r3,r3,r2
    9d5c:	e0bff517 	ldw	r2,-44(fp)
    9d60:	1887883a 	add	r3,r3,r2
    9d64:	00a3c734 	movhi	r2,36636
    9d68:	10af3704 	addi	r2,r2,-17188
    9d6c:	1885883a 	add	r2,r3,r2
    9d70:	e0bff515 	stw	r2,-44(fp)
    9d74:	e0bff517 	ldw	r2,-44(fp)
    9d78:	100611ba 	roli	r3,r2,6
    9d7c:	e0bff417 	ldw	r2,-48(fp)
    9d80:	1885883a 	add	r2,r3,r2
    9d84:	e0bff515 	stw	r2,-44(fp)
    9d88:	e0bff717 	ldw	r2,-36(fp)
    9d8c:	100412ba 	roli	r2,r2,10
    9d90:	e0bff715 	stw	r2,-36(fp)
    II(aa, bb, cc, dd, ee, X[14], 8);
    9d94:	e0fff617 	ldw	r3,-40(fp)
    9d98:	e0bff517 	ldw	r2,-44(fp)
    9d9c:	1886f03a 	xor	r3,r3,r2
    9da0:	e0bff717 	ldw	r2,-36(fp)
    9da4:	1886703a 	and	r3,r3,r2
    9da8:	e0bff617 	ldw	r2,-40(fp)
    9dac:	1886f03a 	xor	r3,r3,r2
    9db0:	e0bfff17 	ldw	r2,-4(fp)
    9db4:	10800e04 	addi	r2,r2,56
    9db8:	10800017 	ldw	r2,0(r2)
    9dbc:	1887883a 	add	r3,r3,r2
    9dc0:	e0bff417 	ldw	r2,-48(fp)
    9dc4:	1887883a 	add	r3,r3,r2
    9dc8:	00a3c734 	movhi	r2,36636
    9dcc:	10af3704 	addi	r2,r2,-17188
    9dd0:	1885883a 	add	r2,r3,r2
    9dd4:	e0bff415 	stw	r2,-48(fp)
    9dd8:	e0bff417 	ldw	r2,-48(fp)
    9ddc:	1006123a 	roli	r3,r2,8
    9de0:	e0bff817 	ldw	r2,-32(fp)
    9de4:	1885883a 	add	r2,r3,r2
    9de8:	e0bff415 	stw	r2,-48(fp)
    9dec:	e0bff617 	ldw	r2,-40(fp)
    9df0:	100412ba 	roli	r2,r2,10
    9df4:	e0bff615 	stw	r2,-40(fp)
    II(ee, aa, bb, cc, dd, X[5], 6);
    9df8:	e0fff517 	ldw	r3,-44(fp)
    9dfc:	e0bff417 	ldw	r2,-48(fp)
    9e00:	1886f03a 	xor	r3,r3,r2
    9e04:	e0bff617 	ldw	r2,-40(fp)
    9e08:	1886703a 	and	r3,r3,r2
    9e0c:	e0bff517 	ldw	r2,-44(fp)
    9e10:	1886f03a 	xor	r3,r3,r2
    9e14:	e0bfff17 	ldw	r2,-4(fp)
    9e18:	10800504 	addi	r2,r2,20
    9e1c:	10800017 	ldw	r2,0(r2)
    9e20:	1887883a 	add	r3,r3,r2
    9e24:	e0bff817 	ldw	r2,-32(fp)
    9e28:	1887883a 	add	r3,r3,r2
    9e2c:	00a3c734 	movhi	r2,36636
    9e30:	10af3704 	addi	r2,r2,-17188
    9e34:	1885883a 	add	r2,r3,r2
    9e38:	e0bff815 	stw	r2,-32(fp)
    9e3c:	e0bff817 	ldw	r2,-32(fp)
    9e40:	100611ba 	roli	r3,r2,6
    9e44:	e0bff717 	ldw	r2,-36(fp)
    9e48:	1885883a 	add	r2,r3,r2
    9e4c:	e0bff815 	stw	r2,-32(fp)
    9e50:	e0bff517 	ldw	r2,-44(fp)
    9e54:	100412ba 	roli	r2,r2,10
    9e58:	e0bff515 	stw	r2,-44(fp)
    II(dd, ee, aa, bb, cc, X[6], 5);
    9e5c:	e0fff417 	ldw	r3,-48(fp)
    9e60:	e0bff817 	ldw	r2,-32(fp)
    9e64:	1886f03a 	xor	r3,r3,r2
    9e68:	e0bff517 	ldw	r2,-44(fp)
    9e6c:	1886703a 	and	r3,r3,r2
    9e70:	e0bff417 	ldw	r2,-48(fp)
    9e74:	1886f03a 	xor	r3,r3,r2
    9e78:	e0bfff17 	ldw	r2,-4(fp)
    9e7c:	10800604 	addi	r2,r2,24
    9e80:	10800017 	ldw	r2,0(r2)
    9e84:	1887883a 	add	r3,r3,r2
    9e88:	e0bff717 	ldw	r2,-36(fp)
    9e8c:	1887883a 	add	r3,r3,r2
    9e90:	00a3c734 	movhi	r2,36636
    9e94:	10af3704 	addi	r2,r2,-17188
    9e98:	1885883a 	add	r2,r3,r2
    9e9c:	e0bff715 	stw	r2,-36(fp)
    9ea0:	e0bff717 	ldw	r2,-36(fp)
    9ea4:	1006117a 	roli	r3,r2,5
    9ea8:	e0bff617 	ldw	r2,-40(fp)
    9eac:	1885883a 	add	r2,r3,r2
    9eb0:	e0bff715 	stw	r2,-36(fp)
    9eb4:	e0bff417 	ldw	r2,-48(fp)
    9eb8:	100412ba 	roli	r2,r2,10
    9ebc:	e0bff415 	stw	r2,-48(fp)
    II(cc, dd, ee, aa, bb, X[2], 12);
    9ec0:	e0fff817 	ldw	r3,-32(fp)
    9ec4:	e0bff717 	ldw	r2,-36(fp)
    9ec8:	1886f03a 	xor	r3,r3,r2
    9ecc:	e0bff417 	ldw	r2,-48(fp)
    9ed0:	1886703a 	and	r3,r3,r2
    9ed4:	e0bff817 	ldw	r2,-32(fp)
    9ed8:	1886f03a 	xor	r3,r3,r2
    9edc:	e0bfff17 	ldw	r2,-4(fp)
    9ee0:	10800204 	addi	r2,r2,8
    9ee4:	10800017 	ldw	r2,0(r2)
    9ee8:	1887883a 	add	r3,r3,r2
    9eec:	e0bff617 	ldw	r2,-40(fp)
    9ef0:	1887883a 	add	r3,r3,r2
    9ef4:	00a3c734 	movhi	r2,36636
    9ef8:	10af3704 	addi	r2,r2,-17188
    9efc:	1885883a 	add	r2,r3,r2
    9f00:	e0bff615 	stw	r2,-40(fp)
    9f04:	e0bff617 	ldw	r2,-40(fp)
    9f08:	1006133a 	roli	r3,r2,12
    9f0c:	e0bff517 	ldw	r2,-44(fp)
    9f10:	1885883a 	add	r2,r3,r2
    9f14:	e0bff615 	stw	r2,-40(fp)
    9f18:	e0bff817 	ldw	r2,-32(fp)
    9f1c:	100412ba 	roli	r2,r2,10
    9f20:	e0bff815 	stw	r2,-32(fp)

    /* round 5 */
    JJ(bb, cc, dd, ee, aa, X[4], 9);
    9f24:	e0bff817 	ldw	r2,-32(fp)
    9f28:	0086303a 	nor	r3,zero,r2
    9f2c:	e0bff717 	ldw	r2,-36(fp)
    9f30:	1886b03a 	or	r3,r3,r2
    9f34:	e0bff617 	ldw	r2,-40(fp)
    9f38:	1886f03a 	xor	r3,r3,r2
    9f3c:	e0bfff17 	ldw	r2,-4(fp)
    9f40:	10800404 	addi	r2,r2,16
    9f44:	10800017 	ldw	r2,0(r2)
    9f48:	1887883a 	add	r3,r3,r2
    9f4c:	e0bff517 	ldw	r2,-44(fp)
    9f50:	1887883a 	add	r3,r3,r2
    9f54:	00aa5534 	movhi	r2,43348
    9f58:	10bf5384 	addi	r2,r2,-690
    9f5c:	1885883a 	add	r2,r3,r2
    9f60:	e0bff515 	stw	r2,-44(fp)
    9f64:	e0bff517 	ldw	r2,-44(fp)
    9f68:	1006127a 	roli	r3,r2,9
    9f6c:	e0bff417 	ldw	r2,-48(fp)
    9f70:	1885883a 	add	r2,r3,r2
    9f74:	e0bff515 	stw	r2,-44(fp)
    9f78:	e0bff717 	ldw	r2,-36(fp)
    9f7c:	100412ba 	roli	r2,r2,10
    9f80:	e0bff715 	stw	r2,-36(fp)
    JJ(aa, bb, cc, dd, ee, X[0], 15);
    9f84:	e0bff717 	ldw	r2,-36(fp)
    9f88:	0086303a 	nor	r3,zero,r2
    9f8c:	e0bff617 	ldw	r2,-40(fp)
    9f90:	1886b03a 	or	r3,r3,r2
    9f94:	e0bff517 	ldw	r2,-44(fp)
    9f98:	1886f03a 	xor	r3,r3,r2
    9f9c:	e0bfff17 	ldw	r2,-4(fp)
    9fa0:	10800017 	ldw	r2,0(r2)
    9fa4:	1887883a 	add	r3,r3,r2
    9fa8:	e0bff417 	ldw	r2,-48(fp)
    9fac:	1887883a 	add	r3,r3,r2
    9fb0:	00aa5534 	movhi	r2,43348
    9fb4:	10bf5384 	addi	r2,r2,-690
    9fb8:	1885883a 	add	r2,r3,r2
    9fbc:	e0bff415 	stw	r2,-48(fp)
    9fc0:	e0bff417 	ldw	r2,-48(fp)
    9fc4:	100613fa 	roli	r3,r2,15
    9fc8:	e0bff817 	ldw	r2,-32(fp)
    9fcc:	1885883a 	add	r2,r3,r2
    9fd0:	e0bff415 	stw	r2,-48(fp)
    9fd4:	e0bff617 	ldw	r2,-40(fp)
    9fd8:	100412ba 	roli	r2,r2,10
    9fdc:	e0bff615 	stw	r2,-40(fp)
    JJ(ee, aa, bb, cc, dd, X[5], 5);
    9fe0:	e0bff617 	ldw	r2,-40(fp)
    9fe4:	0086303a 	nor	r3,zero,r2
    9fe8:	e0bff517 	ldw	r2,-44(fp)
    9fec:	1886b03a 	or	r3,r3,r2
    9ff0:	e0bff417 	ldw	r2,-48(fp)
    9ff4:	1886f03a 	xor	r3,r3,r2
    9ff8:	e0bfff17 	ldw	r2,-4(fp)
    9ffc:	10800504 	addi	r2,r2,20
    a000:	10800017 	ldw	r2,0(r2)
    a004:	1887883a 	add	r3,r3,r2
    a008:	e0bff817 	ldw	r2,-32(fp)
    a00c:	1887883a 	add	r3,r3,r2
    a010:	00aa5534 	movhi	r2,43348
    a014:	10bf5384 	addi	r2,r2,-690
    a018:	1885883a 	add	r2,r3,r2
    a01c:	e0bff815 	stw	r2,-32(fp)
    a020:	e0bff817 	ldw	r2,-32(fp)
    a024:	1006117a 	roli	r3,r2,5
    a028:	e0bff717 	ldw	r2,-36(fp)
    a02c:	1885883a 	add	r2,r3,r2
    a030:	e0bff815 	stw	r2,-32(fp)
    a034:	e0bff517 	ldw	r2,-44(fp)
    a038:	100412ba 	roli	r2,r2,10
    a03c:	e0bff515 	stw	r2,-44(fp)
    JJ(dd, ee, aa, bb, cc, X[9], 11);
    a040:	e0bff517 	ldw	r2,-44(fp)
    a044:	0086303a 	nor	r3,zero,r2
    a048:	e0bff417 	ldw	r2,-48(fp)
    a04c:	1886b03a 	or	r3,r3,r2
    a050:	e0bff817 	ldw	r2,-32(fp)
    a054:	1886f03a 	xor	r3,r3,r2
    a058:	e0bfff17 	ldw	r2,-4(fp)
    a05c:	10800904 	addi	r2,r2,36
    a060:	10800017 	ldw	r2,0(r2)
    a064:	1887883a 	add	r3,r3,r2
    a068:	e0bff717 	ldw	r2,-36(fp)
    a06c:	1887883a 	add	r3,r3,r2
    a070:	00aa5534 	movhi	r2,43348
    a074:	10bf5384 	addi	r2,r2,-690
    a078:	1885883a 	add	r2,r3,r2
    a07c:	e0bff715 	stw	r2,-36(fp)
    a080:	e0bff717 	ldw	r2,-36(fp)
    a084:	100612fa 	roli	r3,r2,11
    a088:	e0bff617 	ldw	r2,-40(fp)
    a08c:	1885883a 	add	r2,r3,r2
    a090:	e0bff715 	stw	r2,-36(fp)
    a094:	e0bff417 	ldw	r2,-48(fp)
    a098:	100412ba 	roli	r2,r2,10
    a09c:	e0bff415 	stw	r2,-48(fp)
    JJ(cc, dd, ee, aa, bb, X[7], 6);
    a0a0:	e0bff417 	ldw	r2,-48(fp)
    a0a4:	0086303a 	nor	r3,zero,r2
    a0a8:	e0bff817 	ldw	r2,-32(fp)
    a0ac:	1886b03a 	or	r3,r3,r2
    a0b0:	e0bff717 	ldw	r2,-36(fp)
    a0b4:	1886f03a 	xor	r3,r3,r2
    a0b8:	e0bfff17 	ldw	r2,-4(fp)
    a0bc:	10800704 	addi	r2,r2,28
    a0c0:	10800017 	ldw	r2,0(r2)
    a0c4:	1887883a 	add	r3,r3,r2
    a0c8:	e0bff617 	ldw	r2,-40(fp)
    a0cc:	1887883a 	add	r3,r3,r2
    a0d0:	00aa5534 	movhi	r2,43348
    a0d4:	10bf5384 	addi	r2,r2,-690
    a0d8:	1885883a 	add	r2,r3,r2
    a0dc:	e0bff615 	stw	r2,-40(fp)
    a0e0:	e0bff617 	ldw	r2,-40(fp)
    a0e4:	100611ba 	roli	r3,r2,6
    a0e8:	e0bff517 	ldw	r2,-44(fp)
    a0ec:	1885883a 	add	r2,r3,r2
    a0f0:	e0bff615 	stw	r2,-40(fp)
    a0f4:	e0bff817 	ldw	r2,-32(fp)
    a0f8:	100412ba 	roli	r2,r2,10
    a0fc:	e0bff815 	stw	r2,-32(fp)
    JJ(bb, cc, dd, ee, aa, X[12], 8);
    a100:	e0bff817 	ldw	r2,-32(fp)
    a104:	0086303a 	nor	r3,zero,r2
    a108:	e0bff717 	ldw	r2,-36(fp)
    a10c:	1886b03a 	or	r3,r3,r2
    a110:	e0bff617 	ldw	r2,-40(fp)
    a114:	1886f03a 	xor	r3,r3,r2
    a118:	e0bfff17 	ldw	r2,-4(fp)
    a11c:	10800c04 	addi	r2,r2,48
    a120:	10800017 	ldw	r2,0(r2)
    a124:	1887883a 	add	r3,r3,r2
    a128:	e0bff517 	ldw	r2,-44(fp)
    a12c:	1887883a 	add	r3,r3,r2
    a130:	00aa5534 	movhi	r2,43348
    a134:	10bf5384 	addi	r2,r2,-690
    a138:	1885883a 	add	r2,r3,r2
    a13c:	e0bff515 	stw	r2,-44(fp)
    a140:	e0bff517 	ldw	r2,-44(fp)
    a144:	1006123a 	roli	r3,r2,8
    a148:	e0bff417 	ldw	r2,-48(fp)
    a14c:	1885883a 	add	r2,r3,r2
    a150:	e0bff515 	stw	r2,-44(fp)
    a154:	e0bff717 	ldw	r2,-36(fp)
    a158:	100412ba 	roli	r2,r2,10
    a15c:	e0bff715 	stw	r2,-36(fp)
    JJ(aa, bb, cc, dd, ee, X[2], 13);
    a160:	e0bff717 	ldw	r2,-36(fp)
    a164:	0086303a 	nor	r3,zero,r2
    a168:	e0bff617 	ldw	r2,-40(fp)
    a16c:	1886b03a 	or	r3,r3,r2
    a170:	e0bff517 	ldw	r2,-44(fp)
    a174:	1886f03a 	xor	r3,r3,r2
    a178:	e0bfff17 	ldw	r2,-4(fp)
    a17c:	10800204 	addi	r2,r2,8
    a180:	10800017 	ldw	r2,0(r2)
    a184:	1887883a 	add	r3,r3,r2
    a188:	e0bff417 	ldw	r2,-48(fp)
    a18c:	1887883a 	add	r3,r3,r2
    a190:	00aa5534 	movhi	r2,43348
    a194:	10bf5384 	addi	r2,r2,-690
    a198:	1885883a 	add	r2,r3,r2
    a19c:	e0bff415 	stw	r2,-48(fp)
    a1a0:	e0bff417 	ldw	r2,-48(fp)
    a1a4:	1006137a 	roli	r3,r2,13
    a1a8:	e0bff817 	ldw	r2,-32(fp)
    a1ac:	1885883a 	add	r2,r3,r2
    a1b0:	e0bff415 	stw	r2,-48(fp)
    a1b4:	e0bff617 	ldw	r2,-40(fp)
    a1b8:	100412ba 	roli	r2,r2,10
    a1bc:	e0bff615 	stw	r2,-40(fp)
    JJ(ee, aa, bb, cc, dd, X[10], 12);
    a1c0:	e0bff617 	ldw	r2,-40(fp)
    a1c4:	0086303a 	nor	r3,zero,r2
    a1c8:	e0bff517 	ldw	r2,-44(fp)
    a1cc:	1886b03a 	or	r3,r3,r2
    a1d0:	e0bff417 	ldw	r2,-48(fp)
    a1d4:	1886f03a 	xor	r3,r3,r2
    a1d8:	e0bfff17 	ldw	r2,-4(fp)
    a1dc:	10800a04 	addi	r2,r2,40
    a1e0:	10800017 	ldw	r2,0(r2)
    a1e4:	1887883a 	add	r3,r3,r2
    a1e8:	e0bff817 	ldw	r2,-32(fp)
    a1ec:	1887883a 	add	r3,r3,r2
    a1f0:	00aa5534 	movhi	r2,43348
    a1f4:	10bf5384 	addi	r2,r2,-690
    a1f8:	1885883a 	add	r2,r3,r2
    a1fc:	e0bff815 	stw	r2,-32(fp)
    a200:	e0bff817 	ldw	r2,-32(fp)
    a204:	1006133a 	roli	r3,r2,12
    a208:	e0bff717 	ldw	r2,-36(fp)
    a20c:	1885883a 	add	r2,r3,r2
    a210:	e0bff815 	stw	r2,-32(fp)
    a214:	e0bff517 	ldw	r2,-44(fp)
    a218:	100412ba 	roli	r2,r2,10
    a21c:	e0bff515 	stw	r2,-44(fp)
    JJ(dd, ee, aa, bb, cc, X[14], 5);
    a220:	e0bff517 	ldw	r2,-44(fp)
    a224:	0086303a 	nor	r3,zero,r2
    a228:	e0bff417 	ldw	r2,-48(fp)
    a22c:	1886b03a 	or	r3,r3,r2
    a230:	e0bff817 	ldw	r2,-32(fp)
    a234:	1886f03a 	xor	r3,r3,r2
    a238:	e0bfff17 	ldw	r2,-4(fp)
    a23c:	10800e04 	addi	r2,r2,56
    a240:	10800017 	ldw	r2,0(r2)
    a244:	1887883a 	add	r3,r3,r2
    a248:	e0bff717 	ldw	r2,-36(fp)
    a24c:	1887883a 	add	r3,r3,r2
    a250:	00aa5534 	movhi	r2,43348
    a254:	10bf5384 	addi	r2,r2,-690
    a258:	1885883a 	add	r2,r3,r2
    a25c:	e0bff715 	stw	r2,-36(fp)
    a260:	e0bff717 	ldw	r2,-36(fp)
    a264:	1006117a 	roli	r3,r2,5
    a268:	e0bff617 	ldw	r2,-40(fp)
    a26c:	1885883a 	add	r2,r3,r2
    a270:	e0bff715 	stw	r2,-36(fp)
    a274:	e0bff417 	ldw	r2,-48(fp)
    a278:	100412ba 	roli	r2,r2,10
    a27c:	e0bff415 	stw	r2,-48(fp)
    JJ(cc, dd, ee, aa, bb, X[1], 12);
    a280:	e0bff417 	ldw	r2,-48(fp)
    a284:	0086303a 	nor	r3,zero,r2
    a288:	e0bff817 	ldw	r2,-32(fp)
    a28c:	1886b03a 	or	r3,r3,r2
    a290:	e0bff717 	ldw	r2,-36(fp)
    a294:	1886f03a 	xor	r3,r3,r2
    a298:	e0bfff17 	ldw	r2,-4(fp)
    a29c:	10800104 	addi	r2,r2,4
    a2a0:	10800017 	ldw	r2,0(r2)
    a2a4:	1887883a 	add	r3,r3,r2
    a2a8:	e0bff617 	ldw	r2,-40(fp)
    a2ac:	1887883a 	add	r3,r3,r2
    a2b0:	00aa5534 	movhi	r2,43348
    a2b4:	10bf5384 	addi	r2,r2,-690
    a2b8:	1885883a 	add	r2,r3,r2
    a2bc:	e0bff615 	stw	r2,-40(fp)
    a2c0:	e0bff617 	ldw	r2,-40(fp)
    a2c4:	1006133a 	roli	r3,r2,12
    a2c8:	e0bff517 	ldw	r2,-44(fp)
    a2cc:	1885883a 	add	r2,r3,r2
    a2d0:	e0bff615 	stw	r2,-40(fp)
    a2d4:	e0bff817 	ldw	r2,-32(fp)
    a2d8:	100412ba 	roli	r2,r2,10
    a2dc:	e0bff815 	stw	r2,-32(fp)
    JJ(bb, cc, dd, ee, aa, X[3], 13);
    a2e0:	e0bff817 	ldw	r2,-32(fp)
    a2e4:	0086303a 	nor	r3,zero,r2
    a2e8:	e0bff717 	ldw	r2,-36(fp)
    a2ec:	1886b03a 	or	r3,r3,r2
    a2f0:	e0bff617 	ldw	r2,-40(fp)
    a2f4:	1886f03a 	xor	r3,r3,r2
    a2f8:	e0bfff17 	ldw	r2,-4(fp)
    a2fc:	10800304 	addi	r2,r2,12
    a300:	10800017 	ldw	r2,0(r2)
    a304:	1887883a 	add	r3,r3,r2
    a308:	e0bff517 	ldw	r2,-44(fp)
    a30c:	1887883a 	add	r3,r3,r2
    a310:	00aa5534 	movhi	r2,43348
    a314:	10bf5384 	addi	r2,r2,-690
    a318:	1885883a 	add	r2,r3,r2
    a31c:	e0bff515 	stw	r2,-44(fp)
    a320:	e0bff517 	ldw	r2,-44(fp)
    a324:	1006137a 	roli	r3,r2,13
    a328:	e0bff417 	ldw	r2,-48(fp)
    a32c:	1885883a 	add	r2,r3,r2
    a330:	e0bff515 	stw	r2,-44(fp)
    a334:	e0bff717 	ldw	r2,-36(fp)
    a338:	100412ba 	roli	r2,r2,10
    a33c:	e0bff715 	stw	r2,-36(fp)
    JJ(aa, bb, cc, dd, ee, X[8], 14);
    a340:	e0bff717 	ldw	r2,-36(fp)
    a344:	0086303a 	nor	r3,zero,r2
    a348:	e0bff617 	ldw	r2,-40(fp)
    a34c:	1886b03a 	or	r3,r3,r2
    a350:	e0bff517 	ldw	r2,-44(fp)
    a354:	1886f03a 	xor	r3,r3,r2
    a358:	e0bfff17 	ldw	r2,-4(fp)
    a35c:	10800804 	addi	r2,r2,32
    a360:	10800017 	ldw	r2,0(r2)
    a364:	1887883a 	add	r3,r3,r2
    a368:	e0bff417 	ldw	r2,-48(fp)
    a36c:	1887883a 	add	r3,r3,r2
    a370:	00aa5534 	movhi	r2,43348
    a374:	10bf5384 	addi	r2,r2,-690
    a378:	1885883a 	add	r2,r3,r2
    a37c:	e0bff415 	stw	r2,-48(fp)
    a380:	e0bff417 	ldw	r2,-48(fp)
    a384:	100613ba 	roli	r3,r2,14
    a388:	e0bff817 	ldw	r2,-32(fp)
    a38c:	1885883a 	add	r2,r3,r2
    a390:	e0bff415 	stw	r2,-48(fp)
    a394:	e0bff617 	ldw	r2,-40(fp)
    a398:	100412ba 	roli	r2,r2,10
    a39c:	e0bff615 	stw	r2,-40(fp)
    JJ(ee, aa, bb, cc, dd, X[11], 11);
    a3a0:	e0bff617 	ldw	r2,-40(fp)
    a3a4:	0086303a 	nor	r3,zero,r2
    a3a8:	e0bff517 	ldw	r2,-44(fp)
    a3ac:	1886b03a 	or	r3,r3,r2
    a3b0:	e0bff417 	ldw	r2,-48(fp)
    a3b4:	1886f03a 	xor	r3,r3,r2
    a3b8:	e0bfff17 	ldw	r2,-4(fp)
    a3bc:	10800b04 	addi	r2,r2,44
    a3c0:	10800017 	ldw	r2,0(r2)
    a3c4:	1887883a 	add	r3,r3,r2
    a3c8:	e0bff817 	ldw	r2,-32(fp)
    a3cc:	1887883a 	add	r3,r3,r2
    a3d0:	00aa5534 	movhi	r2,43348
    a3d4:	10bf5384 	addi	r2,r2,-690
    a3d8:	1885883a 	add	r2,r3,r2
    a3dc:	e0bff815 	stw	r2,-32(fp)
    a3e0:	e0bff817 	ldw	r2,-32(fp)
    a3e4:	100612fa 	roli	r3,r2,11
    a3e8:	e0bff717 	ldw	r2,-36(fp)
    a3ec:	1885883a 	add	r2,r3,r2
    a3f0:	e0bff815 	stw	r2,-32(fp)
    a3f4:	e0bff517 	ldw	r2,-44(fp)
    a3f8:	100412ba 	roli	r2,r2,10
    a3fc:	e0bff515 	stw	r2,-44(fp)
    JJ(dd, ee, aa, bb, cc, X[6], 8);
    a400:	e0bff517 	ldw	r2,-44(fp)
    a404:	0086303a 	nor	r3,zero,r2
    a408:	e0bff417 	ldw	r2,-48(fp)
    a40c:	1886b03a 	or	r3,r3,r2
    a410:	e0bff817 	ldw	r2,-32(fp)
    a414:	1886f03a 	xor	r3,r3,r2
    a418:	e0bfff17 	ldw	r2,-4(fp)
    a41c:	10800604 	addi	r2,r2,24
    a420:	10800017 	ldw	r2,0(r2)
    a424:	1887883a 	add	r3,r3,r2
    a428:	e0bff717 	ldw	r2,-36(fp)
    a42c:	1887883a 	add	r3,r3,r2
    a430:	00aa5534 	movhi	r2,43348
    a434:	10bf5384 	addi	r2,r2,-690
    a438:	1885883a 	add	r2,r3,r2
    a43c:	e0bff715 	stw	r2,-36(fp)
    a440:	e0bff717 	ldw	r2,-36(fp)
    a444:	1006123a 	roli	r3,r2,8
    a448:	e0bff617 	ldw	r2,-40(fp)
    a44c:	1885883a 	add	r2,r3,r2
    a450:	e0bff715 	stw	r2,-36(fp)
    a454:	e0bff417 	ldw	r2,-48(fp)
    a458:	100412ba 	roli	r2,r2,10
    a45c:	e0bff415 	stw	r2,-48(fp)
    JJ(cc, dd, ee, aa, bb, X[15], 5);
    a460:	e0bff417 	ldw	r2,-48(fp)
    a464:	0086303a 	nor	r3,zero,r2
    a468:	e0bff817 	ldw	r2,-32(fp)
    a46c:	1886b03a 	or	r3,r3,r2
    a470:	e0bff717 	ldw	r2,-36(fp)
    a474:	1886f03a 	xor	r3,r3,r2
    a478:	e0bfff17 	ldw	r2,-4(fp)
    a47c:	10800f04 	addi	r2,r2,60
    a480:	10800017 	ldw	r2,0(r2)
    a484:	1887883a 	add	r3,r3,r2
    a488:	e0bff617 	ldw	r2,-40(fp)
    a48c:	1887883a 	add	r3,r3,r2
    a490:	00aa5534 	movhi	r2,43348
    a494:	10bf5384 	addi	r2,r2,-690
    a498:	1885883a 	add	r2,r3,r2
    a49c:	e0bff615 	stw	r2,-40(fp)
    a4a0:	e0bff617 	ldw	r2,-40(fp)
    a4a4:	1006117a 	roli	r3,r2,5
    a4a8:	e0bff517 	ldw	r2,-44(fp)
    a4ac:	1885883a 	add	r2,r3,r2
    a4b0:	e0bff615 	stw	r2,-40(fp)
    a4b4:	e0bff817 	ldw	r2,-32(fp)
    a4b8:	100412ba 	roli	r2,r2,10
    a4bc:	e0bff815 	stw	r2,-32(fp)
    JJ(bb, cc, dd, ee, aa, X[13], 6);
    a4c0:	e0bff817 	ldw	r2,-32(fp)
    a4c4:	0086303a 	nor	r3,zero,r2
    a4c8:	e0bff717 	ldw	r2,-36(fp)
    a4cc:	1886b03a 	or	r3,r3,r2
    a4d0:	e0bff617 	ldw	r2,-40(fp)
    a4d4:	1886f03a 	xor	r3,r3,r2
    a4d8:	e0bfff17 	ldw	r2,-4(fp)
    a4dc:	10800d04 	addi	r2,r2,52
    a4e0:	10800017 	ldw	r2,0(r2)
    a4e4:	1887883a 	add	r3,r3,r2
    a4e8:	e0bff517 	ldw	r2,-44(fp)
    a4ec:	1887883a 	add	r3,r3,r2
    a4f0:	00aa5534 	movhi	r2,43348
    a4f4:	10bf5384 	addi	r2,r2,-690
    a4f8:	1885883a 	add	r2,r3,r2
    a4fc:	e0bff515 	stw	r2,-44(fp)
    a500:	e0bff517 	ldw	r2,-44(fp)
    a504:	100611ba 	roli	r3,r2,6
    a508:	e0bff417 	ldw	r2,-48(fp)
    a50c:	1885883a 	add	r2,r3,r2
    a510:	e0bff515 	stw	r2,-44(fp)
    a514:	e0bff717 	ldw	r2,-36(fp)
    a518:	100412ba 	roli	r2,r2,10
    a51c:	e0bff715 	stw	r2,-36(fp)

    /* parallel round 1 */
    JJJ(aaa, bbb, ccc, ddd, eee, X[5], 8);
    a520:	e0bffc17 	ldw	r2,-16(fp)
    a524:	0086303a 	nor	r3,zero,r2
    a528:	e0bffb17 	ldw	r2,-20(fp)
    a52c:	1886b03a 	or	r3,r3,r2
    a530:	e0bffa17 	ldw	r2,-24(fp)
    a534:	1886f03a 	xor	r3,r3,r2
    a538:	e0bfff17 	ldw	r2,-4(fp)
    a53c:	10800504 	addi	r2,r2,20
    a540:	10800017 	ldw	r2,0(r2)
    a544:	1887883a 	add	r3,r3,r2
    a548:	e0bff917 	ldw	r2,-28(fp)
    a54c:	1887883a 	add	r3,r3,r2
    a550:	009428f4 	movhi	r2,20643
    a554:	10a2f984 	addi	r2,r2,-29722
    a558:	1885883a 	add	r2,r3,r2
    a55c:	e0bff915 	stw	r2,-28(fp)
    a560:	e0bff917 	ldw	r2,-28(fp)
    a564:	1006123a 	roli	r3,r2,8
    a568:	e0bffd17 	ldw	r2,-12(fp)
    a56c:	1885883a 	add	r2,r3,r2
    a570:	e0bff915 	stw	r2,-28(fp)
    a574:	e0bffb17 	ldw	r2,-20(fp)
    a578:	100412ba 	roli	r2,r2,10
    a57c:	e0bffb15 	stw	r2,-20(fp)
    JJJ(eee, aaa, bbb, ccc, ddd, X[14], 9);
    a580:	e0bffb17 	ldw	r2,-20(fp)
    a584:	0086303a 	nor	r3,zero,r2
    a588:	e0bffa17 	ldw	r2,-24(fp)
    a58c:	1886b03a 	or	r3,r3,r2
    a590:	e0bff917 	ldw	r2,-28(fp)
    a594:	1886f03a 	xor	r3,r3,r2
    a598:	e0bfff17 	ldw	r2,-4(fp)
    a59c:	10800e04 	addi	r2,r2,56
    a5a0:	10800017 	ldw	r2,0(r2)
    a5a4:	1887883a 	add	r3,r3,r2
    a5a8:	e0bffd17 	ldw	r2,-12(fp)
    a5ac:	1887883a 	add	r3,r3,r2
    a5b0:	009428f4 	movhi	r2,20643
    a5b4:	10a2f984 	addi	r2,r2,-29722
    a5b8:	1885883a 	add	r2,r3,r2
    a5bc:	e0bffd15 	stw	r2,-12(fp)
    a5c0:	e0bffd17 	ldw	r2,-12(fp)
    a5c4:	1006127a 	roli	r3,r2,9
    a5c8:	e0bffc17 	ldw	r2,-16(fp)
    a5cc:	1885883a 	add	r2,r3,r2
    a5d0:	e0bffd15 	stw	r2,-12(fp)
    a5d4:	e0bffa17 	ldw	r2,-24(fp)
    a5d8:	100412ba 	roli	r2,r2,10
    a5dc:	e0bffa15 	stw	r2,-24(fp)
    JJJ(ddd, eee, aaa, bbb, ccc, X[7], 9);
    a5e0:	e0bffa17 	ldw	r2,-24(fp)
    a5e4:	0086303a 	nor	r3,zero,r2
    a5e8:	e0bff917 	ldw	r2,-28(fp)
    a5ec:	1886b03a 	or	r3,r3,r2
    a5f0:	e0bffd17 	ldw	r2,-12(fp)
    a5f4:	1886f03a 	xor	r3,r3,r2
    a5f8:	e0bfff17 	ldw	r2,-4(fp)
    a5fc:	10800704 	addi	r2,r2,28
    a600:	10800017 	ldw	r2,0(r2)
    a604:	1887883a 	add	r3,r3,r2
    a608:	e0bffc17 	ldw	r2,-16(fp)
    a60c:	1887883a 	add	r3,r3,r2
    a610:	009428f4 	movhi	r2,20643
    a614:	10a2f984 	addi	r2,r2,-29722
    a618:	1885883a 	add	r2,r3,r2
    a61c:	e0bffc15 	stw	r2,-16(fp)
    a620:	e0bffc17 	ldw	r2,-16(fp)
    a624:	1006127a 	roli	r3,r2,9
    a628:	e0bffb17 	ldw	r2,-20(fp)
    a62c:	1885883a 	add	r2,r3,r2
    a630:	e0bffc15 	stw	r2,-16(fp)
    a634:	e0bff917 	ldw	r2,-28(fp)
    a638:	100412ba 	roli	r2,r2,10
    a63c:	e0bff915 	stw	r2,-28(fp)
    JJJ(ccc, ddd, eee, aaa, bbb, X[0], 11);
    a640:	e0bff917 	ldw	r2,-28(fp)
    a644:	0086303a 	nor	r3,zero,r2
    a648:	e0bffd17 	ldw	r2,-12(fp)
    a64c:	1886b03a 	or	r3,r3,r2
    a650:	e0bffc17 	ldw	r2,-16(fp)
    a654:	1886f03a 	xor	r3,r3,r2
    a658:	e0bfff17 	ldw	r2,-4(fp)
    a65c:	10800017 	ldw	r2,0(r2)
    a660:	1887883a 	add	r3,r3,r2
    a664:	e0bffb17 	ldw	r2,-20(fp)
    a668:	1887883a 	add	r3,r3,r2
    a66c:	009428f4 	movhi	r2,20643
    a670:	10a2f984 	addi	r2,r2,-29722
    a674:	1885883a 	add	r2,r3,r2
    a678:	e0bffb15 	stw	r2,-20(fp)
    a67c:	e0bffb17 	ldw	r2,-20(fp)
    a680:	100612fa 	roli	r3,r2,11
    a684:	e0bffa17 	ldw	r2,-24(fp)
    a688:	1885883a 	add	r2,r3,r2
    a68c:	e0bffb15 	stw	r2,-20(fp)
    a690:	e0bffd17 	ldw	r2,-12(fp)
    a694:	100412ba 	roli	r2,r2,10
    a698:	e0bffd15 	stw	r2,-12(fp)
    JJJ(bbb, ccc, ddd, eee, aaa, X[9], 13);
    a69c:	e0bffd17 	ldw	r2,-12(fp)
    a6a0:	0086303a 	nor	r3,zero,r2
    a6a4:	e0bffc17 	ldw	r2,-16(fp)
    a6a8:	1886b03a 	or	r3,r3,r2
    a6ac:	e0bffb17 	ldw	r2,-20(fp)
    a6b0:	1886f03a 	xor	r3,r3,r2
    a6b4:	e0bfff17 	ldw	r2,-4(fp)
    a6b8:	10800904 	addi	r2,r2,36
    a6bc:	10800017 	ldw	r2,0(r2)
    a6c0:	1887883a 	add	r3,r3,r2
    a6c4:	e0bffa17 	ldw	r2,-24(fp)
    a6c8:	1887883a 	add	r3,r3,r2
    a6cc:	009428f4 	movhi	r2,20643
    a6d0:	10a2f984 	addi	r2,r2,-29722
    a6d4:	1885883a 	add	r2,r3,r2
    a6d8:	e0bffa15 	stw	r2,-24(fp)
    a6dc:	e0bffa17 	ldw	r2,-24(fp)
    a6e0:	1006137a 	roli	r3,r2,13
    a6e4:	e0bff917 	ldw	r2,-28(fp)
    a6e8:	1885883a 	add	r2,r3,r2
    a6ec:	e0bffa15 	stw	r2,-24(fp)
    a6f0:	e0bffc17 	ldw	r2,-16(fp)
    a6f4:	100412ba 	roli	r2,r2,10
    a6f8:	e0bffc15 	stw	r2,-16(fp)
    JJJ(aaa, bbb, ccc, ddd, eee, X[2], 15);
    a6fc:	e0bffc17 	ldw	r2,-16(fp)
    a700:	0086303a 	nor	r3,zero,r2
    a704:	e0bffb17 	ldw	r2,-20(fp)
    a708:	1886b03a 	or	r3,r3,r2
    a70c:	e0bffa17 	ldw	r2,-24(fp)
    a710:	1886f03a 	xor	r3,r3,r2
    a714:	e0bfff17 	ldw	r2,-4(fp)
    a718:	10800204 	addi	r2,r2,8
    a71c:	10800017 	ldw	r2,0(r2)
    a720:	1887883a 	add	r3,r3,r2
    a724:	e0bff917 	ldw	r2,-28(fp)
    a728:	1887883a 	add	r3,r3,r2
    a72c:	009428f4 	movhi	r2,20643
    a730:	10a2f984 	addi	r2,r2,-29722
    a734:	1885883a 	add	r2,r3,r2
    a738:	e0bff915 	stw	r2,-28(fp)
    a73c:	e0bff917 	ldw	r2,-28(fp)
    a740:	100613fa 	roli	r3,r2,15
    a744:	e0bffd17 	ldw	r2,-12(fp)
    a748:	1885883a 	add	r2,r3,r2
    a74c:	e0bff915 	stw	r2,-28(fp)
    a750:	e0bffb17 	ldw	r2,-20(fp)
    a754:	100412ba 	roli	r2,r2,10
    a758:	e0bffb15 	stw	r2,-20(fp)
    JJJ(eee, aaa, bbb, ccc, ddd, X[11], 15);
    a75c:	e0bffb17 	ldw	r2,-20(fp)
    a760:	0086303a 	nor	r3,zero,r2
    a764:	e0bffa17 	ldw	r2,-24(fp)
    a768:	1886b03a 	or	r3,r3,r2
    a76c:	e0bff917 	ldw	r2,-28(fp)
    a770:	1886f03a 	xor	r3,r3,r2
    a774:	e0bfff17 	ldw	r2,-4(fp)
    a778:	10800b04 	addi	r2,r2,44
    a77c:	10800017 	ldw	r2,0(r2)
    a780:	1887883a 	add	r3,r3,r2
    a784:	e0bffd17 	ldw	r2,-12(fp)
    a788:	1887883a 	add	r3,r3,r2
    a78c:	009428f4 	movhi	r2,20643
    a790:	10a2f984 	addi	r2,r2,-29722
    a794:	1885883a 	add	r2,r3,r2
    a798:	e0bffd15 	stw	r2,-12(fp)
    a79c:	e0bffd17 	ldw	r2,-12(fp)
    a7a0:	100613fa 	roli	r3,r2,15
    a7a4:	e0bffc17 	ldw	r2,-16(fp)
    a7a8:	1885883a 	add	r2,r3,r2
    a7ac:	e0bffd15 	stw	r2,-12(fp)
    a7b0:	e0bffa17 	ldw	r2,-24(fp)
    a7b4:	100412ba 	roli	r2,r2,10
    a7b8:	e0bffa15 	stw	r2,-24(fp)
    JJJ(ddd, eee, aaa, bbb, ccc, X[4], 5);
    a7bc:	e0bffa17 	ldw	r2,-24(fp)
    a7c0:	0086303a 	nor	r3,zero,r2
    a7c4:	e0bff917 	ldw	r2,-28(fp)
    a7c8:	1886b03a 	or	r3,r3,r2
    a7cc:	e0bffd17 	ldw	r2,-12(fp)
    a7d0:	1886f03a 	xor	r3,r3,r2
    a7d4:	e0bfff17 	ldw	r2,-4(fp)
    a7d8:	10800404 	addi	r2,r2,16
    a7dc:	10800017 	ldw	r2,0(r2)
    a7e0:	1887883a 	add	r3,r3,r2
    a7e4:	e0bffc17 	ldw	r2,-16(fp)
    a7e8:	1887883a 	add	r3,r3,r2
    a7ec:	009428f4 	movhi	r2,20643
    a7f0:	10a2f984 	addi	r2,r2,-29722
    a7f4:	1885883a 	add	r2,r3,r2
    a7f8:	e0bffc15 	stw	r2,-16(fp)
    a7fc:	e0bffc17 	ldw	r2,-16(fp)
    a800:	1006117a 	roli	r3,r2,5
    a804:	e0bffb17 	ldw	r2,-20(fp)
    a808:	1885883a 	add	r2,r3,r2
    a80c:	e0bffc15 	stw	r2,-16(fp)
    a810:	e0bff917 	ldw	r2,-28(fp)
    a814:	100412ba 	roli	r2,r2,10
    a818:	e0bff915 	stw	r2,-28(fp)
    JJJ(ccc, ddd, eee, aaa, bbb, X[13], 7);
    a81c:	e0bff917 	ldw	r2,-28(fp)
    a820:	0086303a 	nor	r3,zero,r2
    a824:	e0bffd17 	ldw	r2,-12(fp)
    a828:	1886b03a 	or	r3,r3,r2
    a82c:	e0bffc17 	ldw	r2,-16(fp)
    a830:	1886f03a 	xor	r3,r3,r2
    a834:	e0bfff17 	ldw	r2,-4(fp)
    a838:	10800d04 	addi	r2,r2,52
    a83c:	10800017 	ldw	r2,0(r2)
    a840:	1887883a 	add	r3,r3,r2
    a844:	e0bffb17 	ldw	r2,-20(fp)
    a848:	1887883a 	add	r3,r3,r2
    a84c:	009428f4 	movhi	r2,20643
    a850:	10a2f984 	addi	r2,r2,-29722
    a854:	1885883a 	add	r2,r3,r2
    a858:	e0bffb15 	stw	r2,-20(fp)
    a85c:	e0bffb17 	ldw	r2,-20(fp)
    a860:	100611fa 	roli	r3,r2,7
    a864:	e0bffa17 	ldw	r2,-24(fp)
    a868:	1885883a 	add	r2,r3,r2
    a86c:	e0bffb15 	stw	r2,-20(fp)
    a870:	e0bffd17 	ldw	r2,-12(fp)
    a874:	100412ba 	roli	r2,r2,10
    a878:	e0bffd15 	stw	r2,-12(fp)
    JJJ(bbb, ccc, ddd, eee, aaa, X[6], 7);
    a87c:	e0bffd17 	ldw	r2,-12(fp)
    a880:	0086303a 	nor	r3,zero,r2
    a884:	e0bffc17 	ldw	r2,-16(fp)
    a888:	1886b03a 	or	r3,r3,r2
    a88c:	e0bffb17 	ldw	r2,-20(fp)
    a890:	1886f03a 	xor	r3,r3,r2
    a894:	e0bfff17 	ldw	r2,-4(fp)
    a898:	10800604 	addi	r2,r2,24
    a89c:	10800017 	ldw	r2,0(r2)
    a8a0:	1887883a 	add	r3,r3,r2
    a8a4:	e0bffa17 	ldw	r2,-24(fp)
    a8a8:	1887883a 	add	r3,r3,r2
    a8ac:	009428f4 	movhi	r2,20643
    a8b0:	10a2f984 	addi	r2,r2,-29722
    a8b4:	1885883a 	add	r2,r3,r2
    a8b8:	e0bffa15 	stw	r2,-24(fp)
    a8bc:	e0bffa17 	ldw	r2,-24(fp)
    a8c0:	100611fa 	roli	r3,r2,7
    a8c4:	e0bff917 	ldw	r2,-28(fp)
    a8c8:	1885883a 	add	r2,r3,r2
    a8cc:	e0bffa15 	stw	r2,-24(fp)
    a8d0:	e0bffc17 	ldw	r2,-16(fp)
    a8d4:	100412ba 	roli	r2,r2,10
    a8d8:	e0bffc15 	stw	r2,-16(fp)
    JJJ(aaa, bbb, ccc, ddd, eee, X[15], 8);
    a8dc:	e0bffc17 	ldw	r2,-16(fp)
    a8e0:	0086303a 	nor	r3,zero,r2
    a8e4:	e0bffb17 	ldw	r2,-20(fp)
    a8e8:	1886b03a 	or	r3,r3,r2
    a8ec:	e0bffa17 	ldw	r2,-24(fp)
    a8f0:	1886f03a 	xor	r3,r3,r2
    a8f4:	e0bfff17 	ldw	r2,-4(fp)
    a8f8:	10800f04 	addi	r2,r2,60
    a8fc:	10800017 	ldw	r2,0(r2)
    a900:	1887883a 	add	r3,r3,r2
    a904:	e0bff917 	ldw	r2,-28(fp)
    a908:	1887883a 	add	r3,r3,r2
    a90c:	009428f4 	movhi	r2,20643
    a910:	10a2f984 	addi	r2,r2,-29722
    a914:	1885883a 	add	r2,r3,r2
    a918:	e0bff915 	stw	r2,-28(fp)
    a91c:	e0bff917 	ldw	r2,-28(fp)
    a920:	1006123a 	roli	r3,r2,8
    a924:	e0bffd17 	ldw	r2,-12(fp)
    a928:	1885883a 	add	r2,r3,r2
    a92c:	e0bff915 	stw	r2,-28(fp)
    a930:	e0bffb17 	ldw	r2,-20(fp)
    a934:	100412ba 	roli	r2,r2,10
    a938:	e0bffb15 	stw	r2,-20(fp)
    JJJ(eee, aaa, bbb, ccc, ddd, X[8], 11);
    a93c:	e0bffb17 	ldw	r2,-20(fp)
    a940:	0086303a 	nor	r3,zero,r2
    a944:	e0bffa17 	ldw	r2,-24(fp)
    a948:	1886b03a 	or	r3,r3,r2
    a94c:	e0bff917 	ldw	r2,-28(fp)
    a950:	1886f03a 	xor	r3,r3,r2
    a954:	e0bfff17 	ldw	r2,-4(fp)
    a958:	10800804 	addi	r2,r2,32
    a95c:	10800017 	ldw	r2,0(r2)
    a960:	1887883a 	add	r3,r3,r2
    a964:	e0bffd17 	ldw	r2,-12(fp)
    a968:	1887883a 	add	r3,r3,r2
    a96c:	009428f4 	movhi	r2,20643
    a970:	10a2f984 	addi	r2,r2,-29722
    a974:	1885883a 	add	r2,r3,r2
    a978:	e0bffd15 	stw	r2,-12(fp)
    a97c:	e0bffd17 	ldw	r2,-12(fp)
    a980:	100612fa 	roli	r3,r2,11
    a984:	e0bffc17 	ldw	r2,-16(fp)
    a988:	1885883a 	add	r2,r3,r2
    a98c:	e0bffd15 	stw	r2,-12(fp)
    a990:	e0bffa17 	ldw	r2,-24(fp)
    a994:	100412ba 	roli	r2,r2,10
    a998:	e0bffa15 	stw	r2,-24(fp)
    JJJ(ddd, eee, aaa, bbb, ccc, X[1], 14);
    a99c:	e0bffa17 	ldw	r2,-24(fp)
    a9a0:	0086303a 	nor	r3,zero,r2
    a9a4:	e0bff917 	ldw	r2,-28(fp)
    a9a8:	1886b03a 	or	r3,r3,r2
    a9ac:	e0bffd17 	ldw	r2,-12(fp)
    a9b0:	1886f03a 	xor	r3,r3,r2
    a9b4:	e0bfff17 	ldw	r2,-4(fp)
    a9b8:	10800104 	addi	r2,r2,4
    a9bc:	10800017 	ldw	r2,0(r2)
    a9c0:	1887883a 	add	r3,r3,r2
    a9c4:	e0bffc17 	ldw	r2,-16(fp)
    a9c8:	1887883a 	add	r3,r3,r2
    a9cc:	009428f4 	movhi	r2,20643
    a9d0:	10a2f984 	addi	r2,r2,-29722
    a9d4:	1885883a 	add	r2,r3,r2
    a9d8:	e0bffc15 	stw	r2,-16(fp)
    a9dc:	e0bffc17 	ldw	r2,-16(fp)
    a9e0:	100613ba 	roli	r3,r2,14
    a9e4:	e0bffb17 	ldw	r2,-20(fp)
    a9e8:	1885883a 	add	r2,r3,r2
    a9ec:	e0bffc15 	stw	r2,-16(fp)
    a9f0:	e0bff917 	ldw	r2,-28(fp)
    a9f4:	100412ba 	roli	r2,r2,10
    a9f8:	e0bff915 	stw	r2,-28(fp)
    JJJ(ccc, ddd, eee, aaa, bbb, X[10], 14);
    a9fc:	e0bff917 	ldw	r2,-28(fp)
    aa00:	0086303a 	nor	r3,zero,r2
    aa04:	e0bffd17 	ldw	r2,-12(fp)
    aa08:	1886b03a 	or	r3,r3,r2
    aa0c:	e0bffc17 	ldw	r2,-16(fp)
    aa10:	1886f03a 	xor	r3,r3,r2
    aa14:	e0bfff17 	ldw	r2,-4(fp)
    aa18:	10800a04 	addi	r2,r2,40
    aa1c:	10800017 	ldw	r2,0(r2)
    aa20:	1887883a 	add	r3,r3,r2
    aa24:	e0bffb17 	ldw	r2,-20(fp)
    aa28:	1887883a 	add	r3,r3,r2
    aa2c:	009428f4 	movhi	r2,20643
    aa30:	10a2f984 	addi	r2,r2,-29722
    aa34:	1885883a 	add	r2,r3,r2
    aa38:	e0bffb15 	stw	r2,-20(fp)
    aa3c:	e0bffb17 	ldw	r2,-20(fp)
    aa40:	100613ba 	roli	r3,r2,14
    aa44:	e0bffa17 	ldw	r2,-24(fp)
    aa48:	1885883a 	add	r2,r3,r2
    aa4c:	e0bffb15 	stw	r2,-20(fp)
    aa50:	e0bffd17 	ldw	r2,-12(fp)
    aa54:	100412ba 	roli	r2,r2,10
    aa58:	e0bffd15 	stw	r2,-12(fp)
    JJJ(bbb, ccc, ddd, eee, aaa, X[3], 12);
    aa5c:	e0bffd17 	ldw	r2,-12(fp)
    aa60:	0086303a 	nor	r3,zero,r2
    aa64:	e0bffc17 	ldw	r2,-16(fp)
    aa68:	1886b03a 	or	r3,r3,r2
    aa6c:	e0bffb17 	ldw	r2,-20(fp)
    aa70:	1886f03a 	xor	r3,r3,r2
    aa74:	e0bfff17 	ldw	r2,-4(fp)
    aa78:	10800304 	addi	r2,r2,12
    aa7c:	10800017 	ldw	r2,0(r2)
    aa80:	1887883a 	add	r3,r3,r2
    aa84:	e0bffa17 	ldw	r2,-24(fp)
    aa88:	1887883a 	add	r3,r3,r2
    aa8c:	009428f4 	movhi	r2,20643
    aa90:	10a2f984 	addi	r2,r2,-29722
    aa94:	1885883a 	add	r2,r3,r2
    aa98:	e0bffa15 	stw	r2,-24(fp)
    aa9c:	e0bffa17 	ldw	r2,-24(fp)
    aaa0:	1006133a 	roli	r3,r2,12
    aaa4:	e0bff917 	ldw	r2,-28(fp)
    aaa8:	1885883a 	add	r2,r3,r2
    aaac:	e0bffa15 	stw	r2,-24(fp)
    aab0:	e0bffc17 	ldw	r2,-16(fp)
    aab4:	100412ba 	roli	r2,r2,10
    aab8:	e0bffc15 	stw	r2,-16(fp)
    JJJ(aaa, bbb, ccc, ddd, eee, X[12], 6);
    aabc:	e0bffc17 	ldw	r2,-16(fp)
    aac0:	0086303a 	nor	r3,zero,r2
    aac4:	e0bffb17 	ldw	r2,-20(fp)
    aac8:	1886b03a 	or	r3,r3,r2
    aacc:	e0bffa17 	ldw	r2,-24(fp)
    aad0:	1886f03a 	xor	r3,r3,r2
    aad4:	e0bfff17 	ldw	r2,-4(fp)
    aad8:	10800c04 	addi	r2,r2,48
    aadc:	10800017 	ldw	r2,0(r2)
    aae0:	1887883a 	add	r3,r3,r2
    aae4:	e0bff917 	ldw	r2,-28(fp)
    aae8:	1887883a 	add	r3,r3,r2
    aaec:	009428f4 	movhi	r2,20643
    aaf0:	10a2f984 	addi	r2,r2,-29722
    aaf4:	1885883a 	add	r2,r3,r2
    aaf8:	e0bff915 	stw	r2,-28(fp)
    aafc:	e0bff917 	ldw	r2,-28(fp)
    ab00:	100611ba 	roli	r3,r2,6
    ab04:	e0bffd17 	ldw	r2,-12(fp)
    ab08:	1885883a 	add	r2,r3,r2
    ab0c:	e0bff915 	stw	r2,-28(fp)
    ab10:	e0bffb17 	ldw	r2,-20(fp)
    ab14:	100412ba 	roli	r2,r2,10
    ab18:	e0bffb15 	stw	r2,-20(fp)

    /* parallel round 2 */
    III(eee, aaa, bbb, ccc, ddd, X[6], 9);
    ab1c:	e0fffa17 	ldw	r3,-24(fp)
    ab20:	e0bff917 	ldw	r2,-28(fp)
    ab24:	1886f03a 	xor	r3,r3,r2
    ab28:	e0bffb17 	ldw	r2,-20(fp)
    ab2c:	1886703a 	and	r3,r3,r2
    ab30:	e0bffa17 	ldw	r2,-24(fp)
    ab34:	1886f03a 	xor	r3,r3,r2
    ab38:	e0bfff17 	ldw	r2,-4(fp)
    ab3c:	10800604 	addi	r2,r2,24
    ab40:	10800017 	ldw	r2,0(r2)
    ab44:	1887883a 	add	r3,r3,r2
    ab48:	e0bffd17 	ldw	r2,-12(fp)
    ab4c:	1887883a 	add	r3,r3,r2
    ab50:	009713b4 	movhi	r2,23630
    ab54:	10b44904 	addi	r2,r2,-11996
    ab58:	1885883a 	add	r2,r3,r2
    ab5c:	e0bffd15 	stw	r2,-12(fp)
    ab60:	e0bffd17 	ldw	r2,-12(fp)
    ab64:	1006127a 	roli	r3,r2,9
    ab68:	e0bffc17 	ldw	r2,-16(fp)
    ab6c:	1885883a 	add	r2,r3,r2
    ab70:	e0bffd15 	stw	r2,-12(fp)
    ab74:	e0bffa17 	ldw	r2,-24(fp)
    ab78:	100412ba 	roli	r2,r2,10
    ab7c:	e0bffa15 	stw	r2,-24(fp)
    III(ddd, eee, aaa, bbb, ccc, X[11], 13);
    ab80:	e0fff917 	ldw	r3,-28(fp)
    ab84:	e0bffd17 	ldw	r2,-12(fp)
    ab88:	1886f03a 	xor	r3,r3,r2
    ab8c:	e0bffa17 	ldw	r2,-24(fp)
    ab90:	1886703a 	and	r3,r3,r2
    ab94:	e0bff917 	ldw	r2,-28(fp)
    ab98:	1886f03a 	xor	r3,r3,r2
    ab9c:	e0bfff17 	ldw	r2,-4(fp)
    aba0:	10800b04 	addi	r2,r2,44
    aba4:	10800017 	ldw	r2,0(r2)
    aba8:	1887883a 	add	r3,r3,r2
    abac:	e0bffc17 	ldw	r2,-16(fp)
    abb0:	1887883a 	add	r3,r3,r2
    abb4:	009713b4 	movhi	r2,23630
    abb8:	10b44904 	addi	r2,r2,-11996
    abbc:	1885883a 	add	r2,r3,r2
    abc0:	e0bffc15 	stw	r2,-16(fp)
    abc4:	e0bffc17 	ldw	r2,-16(fp)
    abc8:	1006137a 	roli	r3,r2,13
    abcc:	e0bffb17 	ldw	r2,-20(fp)
    abd0:	1885883a 	add	r2,r3,r2
    abd4:	e0bffc15 	stw	r2,-16(fp)
    abd8:	e0bff917 	ldw	r2,-28(fp)
    abdc:	100412ba 	roli	r2,r2,10
    abe0:	e0bff915 	stw	r2,-28(fp)
    III(ccc, ddd, eee, aaa, bbb, X[3], 15);
    abe4:	e0fffd17 	ldw	r3,-12(fp)
    abe8:	e0bffc17 	ldw	r2,-16(fp)
    abec:	1886f03a 	xor	r3,r3,r2
    abf0:	e0bff917 	ldw	r2,-28(fp)
    abf4:	1886703a 	and	r3,r3,r2
    abf8:	e0bffd17 	ldw	r2,-12(fp)
    abfc:	1886f03a 	xor	r3,r3,r2
    ac00:	e0bfff17 	ldw	r2,-4(fp)
    ac04:	10800304 	addi	r2,r2,12
    ac08:	10800017 	ldw	r2,0(r2)
    ac0c:	1887883a 	add	r3,r3,r2
    ac10:	e0bffb17 	ldw	r2,-20(fp)
    ac14:	1887883a 	add	r3,r3,r2
    ac18:	009713b4 	movhi	r2,23630
    ac1c:	10b44904 	addi	r2,r2,-11996
    ac20:	1885883a 	add	r2,r3,r2
    ac24:	e0bffb15 	stw	r2,-20(fp)
    ac28:	e0bffb17 	ldw	r2,-20(fp)
    ac2c:	100613fa 	roli	r3,r2,15
    ac30:	e0bffa17 	ldw	r2,-24(fp)
    ac34:	1885883a 	add	r2,r3,r2
    ac38:	e0bffb15 	stw	r2,-20(fp)
    ac3c:	e0bffd17 	ldw	r2,-12(fp)
    ac40:	100412ba 	roli	r2,r2,10
    ac44:	e0bffd15 	stw	r2,-12(fp)
    III(bbb, ccc, ddd, eee, aaa, X[7], 7);
    ac48:	e0fffc17 	ldw	r3,-16(fp)
    ac4c:	e0bffb17 	ldw	r2,-20(fp)
    ac50:	1886f03a 	xor	r3,r3,r2
    ac54:	e0bffd17 	ldw	r2,-12(fp)
    ac58:	1886703a 	and	r3,r3,r2
    ac5c:	e0bffc17 	ldw	r2,-16(fp)
    ac60:	1886f03a 	xor	r3,r3,r2
    ac64:	e0bfff17 	ldw	r2,-4(fp)
    ac68:	10800704 	addi	r2,r2,28
    ac6c:	10800017 	ldw	r2,0(r2)
    ac70:	1887883a 	add	r3,r3,r2
    ac74:	e0bffa17 	ldw	r2,-24(fp)
    ac78:	1887883a 	add	r3,r3,r2
    ac7c:	009713b4 	movhi	r2,23630
    ac80:	10b44904 	addi	r2,r2,-11996
    ac84:	1885883a 	add	r2,r3,r2
    ac88:	e0bffa15 	stw	r2,-24(fp)
    ac8c:	e0bffa17 	ldw	r2,-24(fp)
    ac90:	100611fa 	roli	r3,r2,7
    ac94:	e0bff917 	ldw	r2,-28(fp)
    ac98:	1885883a 	add	r2,r3,r2
    ac9c:	e0bffa15 	stw	r2,-24(fp)
    aca0:	e0bffc17 	ldw	r2,-16(fp)
    aca4:	100412ba 	roli	r2,r2,10
    aca8:	e0bffc15 	stw	r2,-16(fp)
    III(aaa, bbb, ccc, ddd, eee, X[0], 12);
    acac:	e0fffb17 	ldw	r3,-20(fp)
    acb0:	e0bffa17 	ldw	r2,-24(fp)
    acb4:	1886f03a 	xor	r3,r3,r2
    acb8:	e0bffc17 	ldw	r2,-16(fp)
    acbc:	1886703a 	and	r3,r3,r2
    acc0:	e0bffb17 	ldw	r2,-20(fp)
    acc4:	1886f03a 	xor	r3,r3,r2
    acc8:	e0bfff17 	ldw	r2,-4(fp)
    accc:	10800017 	ldw	r2,0(r2)
    acd0:	1887883a 	add	r3,r3,r2
    acd4:	e0bff917 	ldw	r2,-28(fp)
    acd8:	1887883a 	add	r3,r3,r2
    acdc:	009713b4 	movhi	r2,23630
    ace0:	10b44904 	addi	r2,r2,-11996
    ace4:	1885883a 	add	r2,r3,r2
    ace8:	e0bff915 	stw	r2,-28(fp)
    acec:	e0bff917 	ldw	r2,-28(fp)
    acf0:	1006133a 	roli	r3,r2,12
    acf4:	e0bffd17 	ldw	r2,-12(fp)
    acf8:	1885883a 	add	r2,r3,r2
    acfc:	e0bff915 	stw	r2,-28(fp)
    ad00:	e0bffb17 	ldw	r2,-20(fp)
    ad04:	100412ba 	roli	r2,r2,10
    ad08:	e0bffb15 	stw	r2,-20(fp)
    III(eee, aaa, bbb, ccc, ddd, X[13], 8);
    ad0c:	e0fffa17 	ldw	r3,-24(fp)
    ad10:	e0bff917 	ldw	r2,-28(fp)
    ad14:	1886f03a 	xor	r3,r3,r2
    ad18:	e0bffb17 	ldw	r2,-20(fp)
    ad1c:	1886703a 	and	r3,r3,r2
    ad20:	e0bffa17 	ldw	r2,-24(fp)
    ad24:	1886f03a 	xor	r3,r3,r2
    ad28:	e0bfff17 	ldw	r2,-4(fp)
    ad2c:	10800d04 	addi	r2,r2,52
    ad30:	10800017 	ldw	r2,0(r2)
    ad34:	1887883a 	add	r3,r3,r2
    ad38:	e0bffd17 	ldw	r2,-12(fp)
    ad3c:	1887883a 	add	r3,r3,r2
    ad40:	009713b4 	movhi	r2,23630
    ad44:	10b44904 	addi	r2,r2,-11996
    ad48:	1885883a 	add	r2,r3,r2
    ad4c:	e0bffd15 	stw	r2,-12(fp)
    ad50:	e0bffd17 	ldw	r2,-12(fp)
    ad54:	1006123a 	roli	r3,r2,8
    ad58:	e0bffc17 	ldw	r2,-16(fp)
    ad5c:	1885883a 	add	r2,r3,r2
    ad60:	e0bffd15 	stw	r2,-12(fp)
    ad64:	e0bffa17 	ldw	r2,-24(fp)
    ad68:	100412ba 	roli	r2,r2,10
    ad6c:	e0bffa15 	stw	r2,-24(fp)
    III(ddd, eee, aaa, bbb, ccc, X[5], 9);
    ad70:	e0fff917 	ldw	r3,-28(fp)
    ad74:	e0bffd17 	ldw	r2,-12(fp)
    ad78:	1886f03a 	xor	r3,r3,r2
    ad7c:	e0bffa17 	ldw	r2,-24(fp)
    ad80:	1886703a 	and	r3,r3,r2
    ad84:	e0bff917 	ldw	r2,-28(fp)
    ad88:	1886f03a 	xor	r3,r3,r2
    ad8c:	e0bfff17 	ldw	r2,-4(fp)
    ad90:	10800504 	addi	r2,r2,20
    ad94:	10800017 	ldw	r2,0(r2)
    ad98:	1887883a 	add	r3,r3,r2
    ad9c:	e0bffc17 	ldw	r2,-16(fp)
    ada0:	1887883a 	add	r3,r3,r2
    ada4:	009713b4 	movhi	r2,23630
    ada8:	10b44904 	addi	r2,r2,-11996
    adac:	1885883a 	add	r2,r3,r2
    adb0:	e0bffc15 	stw	r2,-16(fp)
    adb4:	e0bffc17 	ldw	r2,-16(fp)
    adb8:	1006127a 	roli	r3,r2,9
    adbc:	e0bffb17 	ldw	r2,-20(fp)
    adc0:	1885883a 	add	r2,r3,r2
    adc4:	e0bffc15 	stw	r2,-16(fp)
    adc8:	e0bff917 	ldw	r2,-28(fp)
    adcc:	100412ba 	roli	r2,r2,10
    add0:	e0bff915 	stw	r2,-28(fp)
    III(ccc, ddd, eee, aaa, bbb, X[10], 11);
    add4:	e0fffd17 	ldw	r3,-12(fp)
    add8:	e0bffc17 	ldw	r2,-16(fp)
    addc:	1886f03a 	xor	r3,r3,r2
    ade0:	e0bff917 	ldw	r2,-28(fp)
    ade4:	1886703a 	and	r3,r3,r2
    ade8:	e0bffd17 	ldw	r2,-12(fp)
    adec:	1886f03a 	xor	r3,r3,r2
    adf0:	e0bfff17 	ldw	r2,-4(fp)
    adf4:	10800a04 	addi	r2,r2,40
    adf8:	10800017 	ldw	r2,0(r2)
    adfc:	1887883a 	add	r3,r3,r2
    ae00:	e0bffb17 	ldw	r2,-20(fp)
    ae04:	1887883a 	add	r3,r3,r2
    ae08:	009713b4 	movhi	r2,23630
    ae0c:	10b44904 	addi	r2,r2,-11996
    ae10:	1885883a 	add	r2,r3,r2
    ae14:	e0bffb15 	stw	r2,-20(fp)
    ae18:	e0bffb17 	ldw	r2,-20(fp)
    ae1c:	100612fa 	roli	r3,r2,11
    ae20:	e0bffa17 	ldw	r2,-24(fp)
    ae24:	1885883a 	add	r2,r3,r2
    ae28:	e0bffb15 	stw	r2,-20(fp)
    ae2c:	e0bffd17 	ldw	r2,-12(fp)
    ae30:	100412ba 	roli	r2,r2,10
    ae34:	e0bffd15 	stw	r2,-12(fp)
    III(bbb, ccc, ddd, eee, aaa, X[14], 7);
    ae38:	e0fffc17 	ldw	r3,-16(fp)
    ae3c:	e0bffb17 	ldw	r2,-20(fp)
    ae40:	1886f03a 	xor	r3,r3,r2
    ae44:	e0bffd17 	ldw	r2,-12(fp)
    ae48:	1886703a 	and	r3,r3,r2
    ae4c:	e0bffc17 	ldw	r2,-16(fp)
    ae50:	1886f03a 	xor	r3,r3,r2
    ae54:	e0bfff17 	ldw	r2,-4(fp)
    ae58:	10800e04 	addi	r2,r2,56
    ae5c:	10800017 	ldw	r2,0(r2)
    ae60:	1887883a 	add	r3,r3,r2
    ae64:	e0bffa17 	ldw	r2,-24(fp)
    ae68:	1887883a 	add	r3,r3,r2
    ae6c:	009713b4 	movhi	r2,23630
    ae70:	10b44904 	addi	r2,r2,-11996
    ae74:	1885883a 	add	r2,r3,r2
    ae78:	e0bffa15 	stw	r2,-24(fp)
    ae7c:	e0bffa17 	ldw	r2,-24(fp)
    ae80:	100611fa 	roli	r3,r2,7
    ae84:	e0bff917 	ldw	r2,-28(fp)
    ae88:	1885883a 	add	r2,r3,r2
    ae8c:	e0bffa15 	stw	r2,-24(fp)
    ae90:	e0bffc17 	ldw	r2,-16(fp)
    ae94:	100412ba 	roli	r2,r2,10
    ae98:	e0bffc15 	stw	r2,-16(fp)
    III(aaa, bbb, ccc, ddd, eee, X[15], 7);
    ae9c:	e0fffb17 	ldw	r3,-20(fp)
    aea0:	e0bffa17 	ldw	r2,-24(fp)
    aea4:	1886f03a 	xor	r3,r3,r2
    aea8:	e0bffc17 	ldw	r2,-16(fp)
    aeac:	1886703a 	and	r3,r3,r2
    aeb0:	e0bffb17 	ldw	r2,-20(fp)
    aeb4:	1886f03a 	xor	r3,r3,r2
    aeb8:	e0bfff17 	ldw	r2,-4(fp)
    aebc:	10800f04 	addi	r2,r2,60
    aec0:	10800017 	ldw	r2,0(r2)
    aec4:	1887883a 	add	r3,r3,r2
    aec8:	e0bff917 	ldw	r2,-28(fp)
    aecc:	1887883a 	add	r3,r3,r2
    aed0:	009713b4 	movhi	r2,23630
    aed4:	10b44904 	addi	r2,r2,-11996
    aed8:	1885883a 	add	r2,r3,r2
    aedc:	e0bff915 	stw	r2,-28(fp)
    aee0:	e0bff917 	ldw	r2,-28(fp)
    aee4:	100611fa 	roli	r3,r2,7
    aee8:	e0bffd17 	ldw	r2,-12(fp)
    aeec:	1885883a 	add	r2,r3,r2
    aef0:	e0bff915 	stw	r2,-28(fp)
    aef4:	e0bffb17 	ldw	r2,-20(fp)
    aef8:	100412ba 	roli	r2,r2,10
    aefc:	e0bffb15 	stw	r2,-20(fp)
    III(eee, aaa, bbb, ccc, ddd, X[8], 12);
    af00:	e0fffa17 	ldw	r3,-24(fp)
    af04:	e0bff917 	ldw	r2,-28(fp)
    af08:	1886f03a 	xor	r3,r3,r2
    af0c:	e0bffb17 	ldw	r2,-20(fp)
    af10:	1886703a 	and	r3,r3,r2
    af14:	e0bffa17 	ldw	r2,-24(fp)
    af18:	1886f03a 	xor	r3,r3,r2
    af1c:	e0bfff17 	ldw	r2,-4(fp)
    af20:	10800804 	addi	r2,r2,32
    af24:	10800017 	ldw	r2,0(r2)
    af28:	1887883a 	add	r3,r3,r2
    af2c:	e0bffd17 	ldw	r2,-12(fp)
    af30:	1887883a 	add	r3,r3,r2
    af34:	009713b4 	movhi	r2,23630
    af38:	10b44904 	addi	r2,r2,-11996
    af3c:	1885883a 	add	r2,r3,r2
    af40:	e0bffd15 	stw	r2,-12(fp)
    af44:	e0bffd17 	ldw	r2,-12(fp)
    af48:	1006133a 	roli	r3,r2,12
    af4c:	e0bffc17 	ldw	r2,-16(fp)
    af50:	1885883a 	add	r2,r3,r2
    af54:	e0bffd15 	stw	r2,-12(fp)
    af58:	e0bffa17 	ldw	r2,-24(fp)
    af5c:	100412ba 	roli	r2,r2,10
    af60:	e0bffa15 	stw	r2,-24(fp)
    III(ddd, eee, aaa, bbb, ccc, X[12], 7);
    af64:	e0fff917 	ldw	r3,-28(fp)
    af68:	e0bffd17 	ldw	r2,-12(fp)
    af6c:	1886f03a 	xor	r3,r3,r2
    af70:	e0bffa17 	ldw	r2,-24(fp)
    af74:	1886703a 	and	r3,r3,r2
    af78:	e0bff917 	ldw	r2,-28(fp)
    af7c:	1886f03a 	xor	r3,r3,r2
    af80:	e0bfff17 	ldw	r2,-4(fp)
    af84:	10800c04 	addi	r2,r2,48
    af88:	10800017 	ldw	r2,0(r2)
    af8c:	1887883a 	add	r3,r3,r2
    af90:	e0bffc17 	ldw	r2,-16(fp)
    af94:	1887883a 	add	r3,r3,r2
    af98:	009713b4 	movhi	r2,23630
    af9c:	10b44904 	addi	r2,r2,-11996
    afa0:	1885883a 	add	r2,r3,r2
    afa4:	e0bffc15 	stw	r2,-16(fp)
    afa8:	e0bffc17 	ldw	r2,-16(fp)
    afac:	100611fa 	roli	r3,r2,7
    afb0:	e0bffb17 	ldw	r2,-20(fp)
    afb4:	1885883a 	add	r2,r3,r2
    afb8:	e0bffc15 	stw	r2,-16(fp)
    afbc:	e0bff917 	ldw	r2,-28(fp)
    afc0:	100412ba 	roli	r2,r2,10
    afc4:	e0bff915 	stw	r2,-28(fp)
    III(ccc, ddd, eee, aaa, bbb, X[4], 6);
    afc8:	e0fffd17 	ldw	r3,-12(fp)
    afcc:	e0bffc17 	ldw	r2,-16(fp)
    afd0:	1886f03a 	xor	r3,r3,r2
    afd4:	e0bff917 	ldw	r2,-28(fp)
    afd8:	1886703a 	and	r3,r3,r2
    afdc:	e0bffd17 	ldw	r2,-12(fp)
    afe0:	1886f03a 	xor	r3,r3,r2
    afe4:	e0bfff17 	ldw	r2,-4(fp)
    afe8:	10800404 	addi	r2,r2,16
    afec:	10800017 	ldw	r2,0(r2)
    aff0:	1887883a 	add	r3,r3,r2
    aff4:	e0bffb17 	ldw	r2,-20(fp)
    aff8:	1887883a 	add	r3,r3,r2
    affc:	009713b4 	movhi	r2,23630
    b000:	10b44904 	addi	r2,r2,-11996
    b004:	1885883a 	add	r2,r3,r2
    b008:	e0bffb15 	stw	r2,-20(fp)
    b00c:	e0bffb17 	ldw	r2,-20(fp)
    b010:	100611ba 	roli	r3,r2,6
    b014:	e0bffa17 	ldw	r2,-24(fp)
    b018:	1885883a 	add	r2,r3,r2
    b01c:	e0bffb15 	stw	r2,-20(fp)
    b020:	e0bffd17 	ldw	r2,-12(fp)
    b024:	100412ba 	roli	r2,r2,10
    b028:	e0bffd15 	stw	r2,-12(fp)
    III(bbb, ccc, ddd, eee, aaa, X[9], 15);
    b02c:	e0fffc17 	ldw	r3,-16(fp)
    b030:	e0bffb17 	ldw	r2,-20(fp)
    b034:	1886f03a 	xor	r3,r3,r2
    b038:	e0bffd17 	ldw	r2,-12(fp)
    b03c:	1886703a 	and	r3,r3,r2
    b040:	e0bffc17 	ldw	r2,-16(fp)
    b044:	1886f03a 	xor	r3,r3,r2
    b048:	e0bfff17 	ldw	r2,-4(fp)
    b04c:	10800904 	addi	r2,r2,36
    b050:	10800017 	ldw	r2,0(r2)
    b054:	1887883a 	add	r3,r3,r2
    b058:	e0bffa17 	ldw	r2,-24(fp)
    b05c:	1887883a 	add	r3,r3,r2
    b060:	009713b4 	movhi	r2,23630
    b064:	10b44904 	addi	r2,r2,-11996
    b068:	1885883a 	add	r2,r3,r2
    b06c:	e0bffa15 	stw	r2,-24(fp)
    b070:	e0bffa17 	ldw	r2,-24(fp)
    b074:	100613fa 	roli	r3,r2,15
    b078:	e0bff917 	ldw	r2,-28(fp)
    b07c:	1885883a 	add	r2,r3,r2
    b080:	e0bffa15 	stw	r2,-24(fp)
    b084:	e0bffc17 	ldw	r2,-16(fp)
    b088:	100412ba 	roli	r2,r2,10
    b08c:	e0bffc15 	stw	r2,-16(fp)
    III(aaa, bbb, ccc, ddd, eee, X[1], 13);
    b090:	e0fffb17 	ldw	r3,-20(fp)
    b094:	e0bffa17 	ldw	r2,-24(fp)
    b098:	1886f03a 	xor	r3,r3,r2
    b09c:	e0bffc17 	ldw	r2,-16(fp)
    b0a0:	1886703a 	and	r3,r3,r2
    b0a4:	e0bffb17 	ldw	r2,-20(fp)
    b0a8:	1886f03a 	xor	r3,r3,r2
    b0ac:	e0bfff17 	ldw	r2,-4(fp)
    b0b0:	10800104 	addi	r2,r2,4
    b0b4:	10800017 	ldw	r2,0(r2)
    b0b8:	1887883a 	add	r3,r3,r2
    b0bc:	e0bff917 	ldw	r2,-28(fp)
    b0c0:	1887883a 	add	r3,r3,r2
    b0c4:	009713b4 	movhi	r2,23630
    b0c8:	10b44904 	addi	r2,r2,-11996
    b0cc:	1885883a 	add	r2,r3,r2
    b0d0:	e0bff915 	stw	r2,-28(fp)
    b0d4:	e0bff917 	ldw	r2,-28(fp)
    b0d8:	1006137a 	roli	r3,r2,13
    b0dc:	e0bffd17 	ldw	r2,-12(fp)
    b0e0:	1885883a 	add	r2,r3,r2
    b0e4:	e0bff915 	stw	r2,-28(fp)
    b0e8:	e0bffb17 	ldw	r2,-20(fp)
    b0ec:	100412ba 	roli	r2,r2,10
    b0f0:	e0bffb15 	stw	r2,-20(fp)
    III(eee, aaa, bbb, ccc, ddd, X[2], 11);
    b0f4:	e0fffa17 	ldw	r3,-24(fp)
    b0f8:	e0bff917 	ldw	r2,-28(fp)
    b0fc:	1886f03a 	xor	r3,r3,r2
    b100:	e0bffb17 	ldw	r2,-20(fp)
    b104:	1886703a 	and	r3,r3,r2
    b108:	e0bffa17 	ldw	r2,-24(fp)
    b10c:	1886f03a 	xor	r3,r3,r2
    b110:	e0bfff17 	ldw	r2,-4(fp)
    b114:	10800204 	addi	r2,r2,8
    b118:	10800017 	ldw	r2,0(r2)
    b11c:	1887883a 	add	r3,r3,r2
    b120:	e0bffd17 	ldw	r2,-12(fp)
    b124:	1887883a 	add	r3,r3,r2
    b128:	009713b4 	movhi	r2,23630
    b12c:	10b44904 	addi	r2,r2,-11996
    b130:	1885883a 	add	r2,r3,r2
    b134:	e0bffd15 	stw	r2,-12(fp)
    b138:	e0bffd17 	ldw	r2,-12(fp)
    b13c:	100612fa 	roli	r3,r2,11
    b140:	e0bffc17 	ldw	r2,-16(fp)
    b144:	1885883a 	add	r2,r3,r2
    b148:	e0bffd15 	stw	r2,-12(fp)
    b14c:	e0bffa17 	ldw	r2,-24(fp)
    b150:	100412ba 	roli	r2,r2,10
    b154:	e0bffa15 	stw	r2,-24(fp)

    /* parallel round 3 */
    HHH(ddd, eee, aaa, bbb, ccc, X[15], 9);
    b158:	e0bff917 	ldw	r2,-28(fp)
    b15c:	0086303a 	nor	r3,zero,r2
    b160:	e0bffd17 	ldw	r2,-12(fp)
    b164:	1886b03a 	or	r3,r3,r2
    b168:	e0bffa17 	ldw	r2,-24(fp)
    b16c:	1886f03a 	xor	r3,r3,r2
    b170:	e0bfff17 	ldw	r2,-4(fp)
    b174:	10800f04 	addi	r2,r2,60
    b178:	10800017 	ldw	r2,0(r2)
    b17c:	1887883a 	add	r3,r3,r2
    b180:	e0bffc17 	ldw	r2,-16(fp)
    b184:	1887883a 	add	r3,r3,r2
    b188:	009b5c34 	movhi	r2,28016
    b18c:	108fbcc4 	addi	r2,r2,16115
    b190:	1885883a 	add	r2,r3,r2
    b194:	e0bffc15 	stw	r2,-16(fp)
    b198:	e0bffc17 	ldw	r2,-16(fp)
    b19c:	1006127a 	roli	r3,r2,9
    b1a0:	e0bffb17 	ldw	r2,-20(fp)
    b1a4:	1885883a 	add	r2,r3,r2
    b1a8:	e0bffc15 	stw	r2,-16(fp)
    b1ac:	e0bff917 	ldw	r2,-28(fp)
    b1b0:	100412ba 	roli	r2,r2,10
    b1b4:	e0bff915 	stw	r2,-28(fp)
    HHH(ccc, ddd, eee, aaa, bbb, X[5], 7);
    b1b8:	e0bffd17 	ldw	r2,-12(fp)
    b1bc:	0086303a 	nor	r3,zero,r2
    b1c0:	e0bffc17 	ldw	r2,-16(fp)
    b1c4:	1886b03a 	or	r3,r3,r2
    b1c8:	e0bff917 	ldw	r2,-28(fp)
    b1cc:	1886f03a 	xor	r3,r3,r2
    b1d0:	e0bfff17 	ldw	r2,-4(fp)
    b1d4:	10800504 	addi	r2,r2,20
    b1d8:	10800017 	ldw	r2,0(r2)
    b1dc:	1887883a 	add	r3,r3,r2
    b1e0:	e0bffb17 	ldw	r2,-20(fp)
    b1e4:	1887883a 	add	r3,r3,r2
    b1e8:	009b5c34 	movhi	r2,28016
    b1ec:	108fbcc4 	addi	r2,r2,16115
    b1f0:	1885883a 	add	r2,r3,r2
    b1f4:	e0bffb15 	stw	r2,-20(fp)
    b1f8:	e0bffb17 	ldw	r2,-20(fp)
    b1fc:	100611fa 	roli	r3,r2,7
    b200:	e0bffa17 	ldw	r2,-24(fp)
    b204:	1885883a 	add	r2,r3,r2
    b208:	e0bffb15 	stw	r2,-20(fp)
    b20c:	e0bffd17 	ldw	r2,-12(fp)
    b210:	100412ba 	roli	r2,r2,10
    b214:	e0bffd15 	stw	r2,-12(fp)
    HHH(bbb, ccc, ddd, eee, aaa, X[1], 15);
    b218:	e0bffc17 	ldw	r2,-16(fp)
    b21c:	0086303a 	nor	r3,zero,r2
    b220:	e0bffb17 	ldw	r2,-20(fp)
    b224:	1886b03a 	or	r3,r3,r2
    b228:	e0bffd17 	ldw	r2,-12(fp)
    b22c:	1886f03a 	xor	r3,r3,r2
    b230:	e0bfff17 	ldw	r2,-4(fp)
    b234:	10800104 	addi	r2,r2,4
    b238:	10800017 	ldw	r2,0(r2)
    b23c:	1887883a 	add	r3,r3,r2
    b240:	e0bffa17 	ldw	r2,-24(fp)
    b244:	1887883a 	add	r3,r3,r2
    b248:	009b5c34 	movhi	r2,28016
    b24c:	108fbcc4 	addi	r2,r2,16115
    b250:	1885883a 	add	r2,r3,r2
    b254:	e0bffa15 	stw	r2,-24(fp)
    b258:	e0bffa17 	ldw	r2,-24(fp)
    b25c:	100613fa 	roli	r3,r2,15
    b260:	e0bff917 	ldw	r2,-28(fp)
    b264:	1885883a 	add	r2,r3,r2
    b268:	e0bffa15 	stw	r2,-24(fp)
    b26c:	e0bffc17 	ldw	r2,-16(fp)
    b270:	100412ba 	roli	r2,r2,10
    b274:	e0bffc15 	stw	r2,-16(fp)
    HHH(aaa, bbb, ccc, ddd, eee, X[3], 11);
    b278:	e0bffb17 	ldw	r2,-20(fp)
    b27c:	0086303a 	nor	r3,zero,r2
    b280:	e0bffa17 	ldw	r2,-24(fp)
    b284:	1886b03a 	or	r3,r3,r2
    b288:	e0bffc17 	ldw	r2,-16(fp)
    b28c:	1886f03a 	xor	r3,r3,r2
    b290:	e0bfff17 	ldw	r2,-4(fp)
    b294:	10800304 	addi	r2,r2,12
    b298:	10800017 	ldw	r2,0(r2)
    b29c:	1887883a 	add	r3,r3,r2
    b2a0:	e0bff917 	ldw	r2,-28(fp)
    b2a4:	1887883a 	add	r3,r3,r2
    b2a8:	009b5c34 	movhi	r2,28016
    b2ac:	108fbcc4 	addi	r2,r2,16115
    b2b0:	1885883a 	add	r2,r3,r2
    b2b4:	e0bff915 	stw	r2,-28(fp)
    b2b8:	e0bff917 	ldw	r2,-28(fp)
    b2bc:	100612fa 	roli	r3,r2,11
    b2c0:	e0bffd17 	ldw	r2,-12(fp)
    b2c4:	1885883a 	add	r2,r3,r2
    b2c8:	e0bff915 	stw	r2,-28(fp)
    b2cc:	e0bffb17 	ldw	r2,-20(fp)
    b2d0:	100412ba 	roli	r2,r2,10
    b2d4:	e0bffb15 	stw	r2,-20(fp)
    HHH(eee, aaa, bbb, ccc, ddd, X[7], 8);
    b2d8:	e0bffa17 	ldw	r2,-24(fp)
    b2dc:	0086303a 	nor	r3,zero,r2
    b2e0:	e0bff917 	ldw	r2,-28(fp)
    b2e4:	1886b03a 	or	r3,r3,r2
    b2e8:	e0bffb17 	ldw	r2,-20(fp)
    b2ec:	1886f03a 	xor	r3,r3,r2
    b2f0:	e0bfff17 	ldw	r2,-4(fp)
    b2f4:	10800704 	addi	r2,r2,28
    b2f8:	10800017 	ldw	r2,0(r2)
    b2fc:	1887883a 	add	r3,r3,r2
    b300:	e0bffd17 	ldw	r2,-12(fp)
    b304:	1887883a 	add	r3,r3,r2
    b308:	009b5c34 	movhi	r2,28016
    b30c:	108fbcc4 	addi	r2,r2,16115
    b310:	1885883a 	add	r2,r3,r2
    b314:	e0bffd15 	stw	r2,-12(fp)
    b318:	e0bffd17 	ldw	r2,-12(fp)
    b31c:	1006123a 	roli	r3,r2,8
    b320:	e0bffc17 	ldw	r2,-16(fp)
    b324:	1885883a 	add	r2,r3,r2
    b328:	e0bffd15 	stw	r2,-12(fp)
    b32c:	e0bffa17 	ldw	r2,-24(fp)
    b330:	100412ba 	roli	r2,r2,10
    b334:	e0bffa15 	stw	r2,-24(fp)
    HHH(ddd, eee, aaa, bbb, ccc, X[14], 6);
    b338:	e0bff917 	ldw	r2,-28(fp)
    b33c:	0086303a 	nor	r3,zero,r2
    b340:	e0bffd17 	ldw	r2,-12(fp)
    b344:	1886b03a 	or	r3,r3,r2
    b348:	e0bffa17 	ldw	r2,-24(fp)
    b34c:	1886f03a 	xor	r3,r3,r2
    b350:	e0bfff17 	ldw	r2,-4(fp)
    b354:	10800e04 	addi	r2,r2,56
    b358:	10800017 	ldw	r2,0(r2)
    b35c:	1887883a 	add	r3,r3,r2
    b360:	e0bffc17 	ldw	r2,-16(fp)
    b364:	1887883a 	add	r3,r3,r2
    b368:	009b5c34 	movhi	r2,28016
    b36c:	108fbcc4 	addi	r2,r2,16115
    b370:	1885883a 	add	r2,r3,r2
    b374:	e0bffc15 	stw	r2,-16(fp)
    b378:	e0bffc17 	ldw	r2,-16(fp)
    b37c:	100611ba 	roli	r3,r2,6
    b380:	e0bffb17 	ldw	r2,-20(fp)
    b384:	1885883a 	add	r2,r3,r2
    b388:	e0bffc15 	stw	r2,-16(fp)
    b38c:	e0bff917 	ldw	r2,-28(fp)
    b390:	100412ba 	roli	r2,r2,10
    b394:	e0bff915 	stw	r2,-28(fp)
    HHH(ccc, ddd, eee, aaa, bbb, X[6], 6);
    b398:	e0bffd17 	ldw	r2,-12(fp)
    b39c:	0086303a 	nor	r3,zero,r2
    b3a0:	e0bffc17 	ldw	r2,-16(fp)
    b3a4:	1886b03a 	or	r3,r3,r2
    b3a8:	e0bff917 	ldw	r2,-28(fp)
    b3ac:	1886f03a 	xor	r3,r3,r2
    b3b0:	e0bfff17 	ldw	r2,-4(fp)
    b3b4:	10800604 	addi	r2,r2,24
    b3b8:	10800017 	ldw	r2,0(r2)
    b3bc:	1887883a 	add	r3,r3,r2
    b3c0:	e0bffb17 	ldw	r2,-20(fp)
    b3c4:	1887883a 	add	r3,r3,r2
    b3c8:	009b5c34 	movhi	r2,28016
    b3cc:	108fbcc4 	addi	r2,r2,16115
    b3d0:	1885883a 	add	r2,r3,r2
    b3d4:	e0bffb15 	stw	r2,-20(fp)
    b3d8:	e0bffb17 	ldw	r2,-20(fp)
    b3dc:	100611ba 	roli	r3,r2,6
    b3e0:	e0bffa17 	ldw	r2,-24(fp)
    b3e4:	1885883a 	add	r2,r3,r2
    b3e8:	e0bffb15 	stw	r2,-20(fp)
    b3ec:	e0bffd17 	ldw	r2,-12(fp)
    b3f0:	100412ba 	roli	r2,r2,10
    b3f4:	e0bffd15 	stw	r2,-12(fp)
    HHH(bbb, ccc, ddd, eee, aaa, X[9], 14);
    b3f8:	e0bffc17 	ldw	r2,-16(fp)
    b3fc:	0086303a 	nor	r3,zero,r2
    b400:	e0bffb17 	ldw	r2,-20(fp)
    b404:	1886b03a 	or	r3,r3,r2
    b408:	e0bffd17 	ldw	r2,-12(fp)
    b40c:	1886f03a 	xor	r3,r3,r2
    b410:	e0bfff17 	ldw	r2,-4(fp)
    b414:	10800904 	addi	r2,r2,36
    b418:	10800017 	ldw	r2,0(r2)
    b41c:	1887883a 	add	r3,r3,r2
    b420:	e0bffa17 	ldw	r2,-24(fp)
    b424:	1887883a 	add	r3,r3,r2
    b428:	009b5c34 	movhi	r2,28016
    b42c:	108fbcc4 	addi	r2,r2,16115
    b430:	1885883a 	add	r2,r3,r2
    b434:	e0bffa15 	stw	r2,-24(fp)
    b438:	e0bffa17 	ldw	r2,-24(fp)
    b43c:	100613ba 	roli	r3,r2,14
    b440:	e0bff917 	ldw	r2,-28(fp)
    b444:	1885883a 	add	r2,r3,r2
    b448:	e0bffa15 	stw	r2,-24(fp)
    b44c:	e0bffc17 	ldw	r2,-16(fp)
    b450:	100412ba 	roli	r2,r2,10
    b454:	e0bffc15 	stw	r2,-16(fp)
    HHH(aaa, bbb, ccc, ddd, eee, X[11], 12);
    b458:	e0bffb17 	ldw	r2,-20(fp)
    b45c:	0086303a 	nor	r3,zero,r2
    b460:	e0bffa17 	ldw	r2,-24(fp)
    b464:	1886b03a 	or	r3,r3,r2
    b468:	e0bffc17 	ldw	r2,-16(fp)
    b46c:	1886f03a 	xor	r3,r3,r2
    b470:	e0bfff17 	ldw	r2,-4(fp)
    b474:	10800b04 	addi	r2,r2,44
    b478:	10800017 	ldw	r2,0(r2)
    b47c:	1887883a 	add	r3,r3,r2
    b480:	e0bff917 	ldw	r2,-28(fp)
    b484:	1887883a 	add	r3,r3,r2
    b488:	009b5c34 	movhi	r2,28016
    b48c:	108fbcc4 	addi	r2,r2,16115
    b490:	1885883a 	add	r2,r3,r2
    b494:	e0bff915 	stw	r2,-28(fp)
    b498:	e0bff917 	ldw	r2,-28(fp)
    b49c:	1006133a 	roli	r3,r2,12
    b4a0:	e0bffd17 	ldw	r2,-12(fp)
    b4a4:	1885883a 	add	r2,r3,r2
    b4a8:	e0bff915 	stw	r2,-28(fp)
    b4ac:	e0bffb17 	ldw	r2,-20(fp)
    b4b0:	100412ba 	roli	r2,r2,10
    b4b4:	e0bffb15 	stw	r2,-20(fp)
    HHH(eee, aaa, bbb, ccc, ddd, X[8], 13);
    b4b8:	e0bffa17 	ldw	r2,-24(fp)
    b4bc:	0086303a 	nor	r3,zero,r2
    b4c0:	e0bff917 	ldw	r2,-28(fp)
    b4c4:	1886b03a 	or	r3,r3,r2
    b4c8:	e0bffb17 	ldw	r2,-20(fp)
    b4cc:	1886f03a 	xor	r3,r3,r2
    b4d0:	e0bfff17 	ldw	r2,-4(fp)
    b4d4:	10800804 	addi	r2,r2,32
    b4d8:	10800017 	ldw	r2,0(r2)
    b4dc:	1887883a 	add	r3,r3,r2
    b4e0:	e0bffd17 	ldw	r2,-12(fp)
    b4e4:	1887883a 	add	r3,r3,r2
    b4e8:	009b5c34 	movhi	r2,28016
    b4ec:	108fbcc4 	addi	r2,r2,16115
    b4f0:	1885883a 	add	r2,r3,r2
    b4f4:	e0bffd15 	stw	r2,-12(fp)
    b4f8:	e0bffd17 	ldw	r2,-12(fp)
    b4fc:	1006137a 	roli	r3,r2,13
    b500:	e0bffc17 	ldw	r2,-16(fp)
    b504:	1885883a 	add	r2,r3,r2
    b508:	e0bffd15 	stw	r2,-12(fp)
    b50c:	e0bffa17 	ldw	r2,-24(fp)
    b510:	100412ba 	roli	r2,r2,10
    b514:	e0bffa15 	stw	r2,-24(fp)
    HHH(ddd, eee, aaa, bbb, ccc, X[12], 5);
    b518:	e0bff917 	ldw	r2,-28(fp)
    b51c:	0086303a 	nor	r3,zero,r2
    b520:	e0bffd17 	ldw	r2,-12(fp)
    b524:	1886b03a 	or	r3,r3,r2
    b528:	e0bffa17 	ldw	r2,-24(fp)
    b52c:	1886f03a 	xor	r3,r3,r2
    b530:	e0bfff17 	ldw	r2,-4(fp)
    b534:	10800c04 	addi	r2,r2,48
    b538:	10800017 	ldw	r2,0(r2)
    b53c:	1887883a 	add	r3,r3,r2
    b540:	e0bffc17 	ldw	r2,-16(fp)
    b544:	1887883a 	add	r3,r3,r2
    b548:	009b5c34 	movhi	r2,28016
    b54c:	108fbcc4 	addi	r2,r2,16115
    b550:	1885883a 	add	r2,r3,r2
    b554:	e0bffc15 	stw	r2,-16(fp)
    b558:	e0bffc17 	ldw	r2,-16(fp)
    b55c:	1006117a 	roli	r3,r2,5
    b560:	e0bffb17 	ldw	r2,-20(fp)
    b564:	1885883a 	add	r2,r3,r2
    b568:	e0bffc15 	stw	r2,-16(fp)
    b56c:	e0bff917 	ldw	r2,-28(fp)
    b570:	100412ba 	roli	r2,r2,10
    b574:	e0bff915 	stw	r2,-28(fp)
    HHH(ccc, ddd, eee, aaa, bbb, X[2], 14);
    b578:	e0bffd17 	ldw	r2,-12(fp)
    b57c:	0086303a 	nor	r3,zero,r2
    b580:	e0bffc17 	ldw	r2,-16(fp)
    b584:	1886b03a 	or	r3,r3,r2
    b588:	e0bff917 	ldw	r2,-28(fp)
    b58c:	1886f03a 	xor	r3,r3,r2
    b590:	e0bfff17 	ldw	r2,-4(fp)
    b594:	10800204 	addi	r2,r2,8
    b598:	10800017 	ldw	r2,0(r2)
    b59c:	1887883a 	add	r3,r3,r2
    b5a0:	e0bffb17 	ldw	r2,-20(fp)
    b5a4:	1887883a 	add	r3,r3,r2
    b5a8:	009b5c34 	movhi	r2,28016
    b5ac:	108fbcc4 	addi	r2,r2,16115
    b5b0:	1885883a 	add	r2,r3,r2
    b5b4:	e0bffb15 	stw	r2,-20(fp)
    b5b8:	e0bffb17 	ldw	r2,-20(fp)
    b5bc:	100613ba 	roli	r3,r2,14
    b5c0:	e0bffa17 	ldw	r2,-24(fp)
    b5c4:	1885883a 	add	r2,r3,r2
    b5c8:	e0bffb15 	stw	r2,-20(fp)
    b5cc:	e0bffd17 	ldw	r2,-12(fp)
    b5d0:	100412ba 	roli	r2,r2,10
    b5d4:	e0bffd15 	stw	r2,-12(fp)
    HHH(bbb, ccc, ddd, eee, aaa, X[10], 13);
    b5d8:	e0bffc17 	ldw	r2,-16(fp)
    b5dc:	0086303a 	nor	r3,zero,r2
    b5e0:	e0bffb17 	ldw	r2,-20(fp)
    b5e4:	1886b03a 	or	r3,r3,r2
    b5e8:	e0bffd17 	ldw	r2,-12(fp)
    b5ec:	1886f03a 	xor	r3,r3,r2
    b5f0:	e0bfff17 	ldw	r2,-4(fp)
    b5f4:	10800a04 	addi	r2,r2,40
    b5f8:	10800017 	ldw	r2,0(r2)
    b5fc:	1887883a 	add	r3,r3,r2
    b600:	e0bffa17 	ldw	r2,-24(fp)
    b604:	1887883a 	add	r3,r3,r2
    b608:	009b5c34 	movhi	r2,28016
    b60c:	108fbcc4 	addi	r2,r2,16115
    b610:	1885883a 	add	r2,r3,r2
    b614:	e0bffa15 	stw	r2,-24(fp)
    b618:	e0bffa17 	ldw	r2,-24(fp)
    b61c:	1006137a 	roli	r3,r2,13
    b620:	e0bff917 	ldw	r2,-28(fp)
    b624:	1885883a 	add	r2,r3,r2
    b628:	e0bffa15 	stw	r2,-24(fp)
    b62c:	e0bffc17 	ldw	r2,-16(fp)
    b630:	100412ba 	roli	r2,r2,10
    b634:	e0bffc15 	stw	r2,-16(fp)
    HHH(aaa, bbb, ccc, ddd, eee, X[0], 13);
    b638:	e0bffb17 	ldw	r2,-20(fp)
    b63c:	0086303a 	nor	r3,zero,r2
    b640:	e0bffa17 	ldw	r2,-24(fp)
    b644:	1886b03a 	or	r3,r3,r2
    b648:	e0bffc17 	ldw	r2,-16(fp)
    b64c:	1886f03a 	xor	r3,r3,r2
    b650:	e0bfff17 	ldw	r2,-4(fp)
    b654:	10800017 	ldw	r2,0(r2)
    b658:	1887883a 	add	r3,r3,r2
    b65c:	e0bff917 	ldw	r2,-28(fp)
    b660:	1887883a 	add	r3,r3,r2
    b664:	009b5c34 	movhi	r2,28016
    b668:	108fbcc4 	addi	r2,r2,16115
    b66c:	1885883a 	add	r2,r3,r2
    b670:	e0bff915 	stw	r2,-28(fp)
    b674:	e0bff917 	ldw	r2,-28(fp)
    b678:	1006137a 	roli	r3,r2,13
    b67c:	e0bffd17 	ldw	r2,-12(fp)
    b680:	1885883a 	add	r2,r3,r2
    b684:	e0bff915 	stw	r2,-28(fp)
    b688:	e0bffb17 	ldw	r2,-20(fp)
    b68c:	100412ba 	roli	r2,r2,10
    b690:	e0bffb15 	stw	r2,-20(fp)
    HHH(eee, aaa, bbb, ccc, ddd, X[4], 7);
    b694:	e0bffa17 	ldw	r2,-24(fp)
    b698:	0086303a 	nor	r3,zero,r2
    b69c:	e0bff917 	ldw	r2,-28(fp)
    b6a0:	1886b03a 	or	r3,r3,r2
    b6a4:	e0bffb17 	ldw	r2,-20(fp)
    b6a8:	1886f03a 	xor	r3,r3,r2
    b6ac:	e0bfff17 	ldw	r2,-4(fp)
    b6b0:	10800404 	addi	r2,r2,16
    b6b4:	10800017 	ldw	r2,0(r2)
    b6b8:	1887883a 	add	r3,r3,r2
    b6bc:	e0bffd17 	ldw	r2,-12(fp)
    b6c0:	1887883a 	add	r3,r3,r2
    b6c4:	009b5c34 	movhi	r2,28016
    b6c8:	108fbcc4 	addi	r2,r2,16115
    b6cc:	1885883a 	add	r2,r3,r2
    b6d0:	e0bffd15 	stw	r2,-12(fp)
    b6d4:	e0bffd17 	ldw	r2,-12(fp)
    b6d8:	100611fa 	roli	r3,r2,7
    b6dc:	e0bffc17 	ldw	r2,-16(fp)
    b6e0:	1885883a 	add	r2,r3,r2
    b6e4:	e0bffd15 	stw	r2,-12(fp)
    b6e8:	e0bffa17 	ldw	r2,-24(fp)
    b6ec:	100412ba 	roli	r2,r2,10
    b6f0:	e0bffa15 	stw	r2,-24(fp)
    HHH(ddd, eee, aaa, bbb, ccc, X[13], 5);
    b6f4:	e0bff917 	ldw	r2,-28(fp)
    b6f8:	0086303a 	nor	r3,zero,r2
    b6fc:	e0bffd17 	ldw	r2,-12(fp)
    b700:	1886b03a 	or	r3,r3,r2
    b704:	e0bffa17 	ldw	r2,-24(fp)
    b708:	1886f03a 	xor	r3,r3,r2
    b70c:	e0bfff17 	ldw	r2,-4(fp)
    b710:	10800d04 	addi	r2,r2,52
    b714:	10800017 	ldw	r2,0(r2)
    b718:	1887883a 	add	r3,r3,r2
    b71c:	e0bffc17 	ldw	r2,-16(fp)
    b720:	1887883a 	add	r3,r3,r2
    b724:	009b5c34 	movhi	r2,28016
    b728:	108fbcc4 	addi	r2,r2,16115
    b72c:	1885883a 	add	r2,r3,r2
    b730:	e0bffc15 	stw	r2,-16(fp)
    b734:	e0bffc17 	ldw	r2,-16(fp)
    b738:	1006117a 	roli	r3,r2,5
    b73c:	e0bffb17 	ldw	r2,-20(fp)
    b740:	1885883a 	add	r2,r3,r2
    b744:	e0bffc15 	stw	r2,-16(fp)
    b748:	e0bff917 	ldw	r2,-28(fp)
    b74c:	100412ba 	roli	r2,r2,10
    b750:	e0bff915 	stw	r2,-28(fp)

    /* parallel round 4 */
    GGG(ccc, ddd, eee, aaa, bbb, X[8], 15);
    b754:	e0fff917 	ldw	r3,-28(fp)
    b758:	e0bffd17 	ldw	r2,-12(fp)
    b75c:	1886f03a 	xor	r3,r3,r2
    b760:	e0bffc17 	ldw	r2,-16(fp)
    b764:	1886703a 	and	r3,r3,r2
    b768:	e0bff917 	ldw	r2,-28(fp)
    b76c:	1886f03a 	xor	r3,r3,r2
    b770:	e0bfff17 	ldw	r2,-4(fp)
    b774:	10800804 	addi	r2,r2,32
    b778:	10800017 	ldw	r2,0(r2)
    b77c:	1887883a 	add	r3,r3,r2
    b780:	e0bffb17 	ldw	r2,-20(fp)
    b784:	1887883a 	add	r3,r3,r2
    b788:	009e9b74 	movhi	r2,31341
    b78c:	109dba44 	addi	r2,r2,30441
    b790:	1885883a 	add	r2,r3,r2
    b794:	e0bffb15 	stw	r2,-20(fp)
    b798:	e0bffb17 	ldw	r2,-20(fp)
    b79c:	100613fa 	roli	r3,r2,15
    b7a0:	e0bffa17 	ldw	r2,-24(fp)
    b7a4:	1885883a 	add	r2,r3,r2
    b7a8:	e0bffb15 	stw	r2,-20(fp)
    b7ac:	e0bffd17 	ldw	r2,-12(fp)
    b7b0:	100412ba 	roli	r2,r2,10
    b7b4:	e0bffd15 	stw	r2,-12(fp)
    GGG(bbb, ccc, ddd, eee, aaa, X[6], 5);
    b7b8:	e0fffd17 	ldw	r3,-12(fp)
    b7bc:	e0bffc17 	ldw	r2,-16(fp)
    b7c0:	1886f03a 	xor	r3,r3,r2
    b7c4:	e0bffb17 	ldw	r2,-20(fp)
    b7c8:	1886703a 	and	r3,r3,r2
    b7cc:	e0bffd17 	ldw	r2,-12(fp)
    b7d0:	1886f03a 	xor	r3,r3,r2
    b7d4:	e0bfff17 	ldw	r2,-4(fp)
    b7d8:	10800604 	addi	r2,r2,24
    b7dc:	10800017 	ldw	r2,0(r2)
    b7e0:	1887883a 	add	r3,r3,r2
    b7e4:	e0bffa17 	ldw	r2,-24(fp)
    b7e8:	1887883a 	add	r3,r3,r2
    b7ec:	009e9b74 	movhi	r2,31341
    b7f0:	109dba44 	addi	r2,r2,30441
    b7f4:	1885883a 	add	r2,r3,r2
    b7f8:	e0bffa15 	stw	r2,-24(fp)
    b7fc:	e0bffa17 	ldw	r2,-24(fp)
    b800:	1006117a 	roli	r3,r2,5
    b804:	e0bff917 	ldw	r2,-28(fp)
    b808:	1885883a 	add	r2,r3,r2
    b80c:	e0bffa15 	stw	r2,-24(fp)
    b810:	e0bffc17 	ldw	r2,-16(fp)
    b814:	100412ba 	roli	r2,r2,10
    b818:	e0bffc15 	stw	r2,-16(fp)
    GGG(aaa, bbb, ccc, ddd, eee, X[4], 8);
    b81c:	e0fffc17 	ldw	r3,-16(fp)
    b820:	e0bffb17 	ldw	r2,-20(fp)
    b824:	1886f03a 	xor	r3,r3,r2
    b828:	e0bffa17 	ldw	r2,-24(fp)
    b82c:	1886703a 	and	r3,r3,r2
    b830:	e0bffc17 	ldw	r2,-16(fp)
    b834:	1886f03a 	xor	r3,r3,r2
    b838:	e0bfff17 	ldw	r2,-4(fp)
    b83c:	10800404 	addi	r2,r2,16
    b840:	10800017 	ldw	r2,0(r2)
    b844:	1887883a 	add	r3,r3,r2
    b848:	e0bff917 	ldw	r2,-28(fp)
    b84c:	1887883a 	add	r3,r3,r2
    b850:	009e9b74 	movhi	r2,31341
    b854:	109dba44 	addi	r2,r2,30441
    b858:	1885883a 	add	r2,r3,r2
    b85c:	e0bff915 	stw	r2,-28(fp)
    b860:	e0bff917 	ldw	r2,-28(fp)
    b864:	1006123a 	roli	r3,r2,8
    b868:	e0bffd17 	ldw	r2,-12(fp)
    b86c:	1885883a 	add	r2,r3,r2
    b870:	e0bff915 	stw	r2,-28(fp)
    b874:	e0bffb17 	ldw	r2,-20(fp)
    b878:	100412ba 	roli	r2,r2,10
    b87c:	e0bffb15 	stw	r2,-20(fp)
    GGG(eee, aaa, bbb, ccc, ddd, X[1], 11);
    b880:	e0fffb17 	ldw	r3,-20(fp)
    b884:	e0bffa17 	ldw	r2,-24(fp)
    b888:	1886f03a 	xor	r3,r3,r2
    b88c:	e0bff917 	ldw	r2,-28(fp)
    b890:	1886703a 	and	r3,r3,r2
    b894:	e0bffb17 	ldw	r2,-20(fp)
    b898:	1886f03a 	xor	r3,r3,r2
    b89c:	e0bfff17 	ldw	r2,-4(fp)
    b8a0:	10800104 	addi	r2,r2,4
    b8a4:	10800017 	ldw	r2,0(r2)
    b8a8:	1887883a 	add	r3,r3,r2
    b8ac:	e0bffd17 	ldw	r2,-12(fp)
    b8b0:	1887883a 	add	r3,r3,r2
    b8b4:	009e9b74 	movhi	r2,31341
    b8b8:	109dba44 	addi	r2,r2,30441
    b8bc:	1885883a 	add	r2,r3,r2
    b8c0:	e0bffd15 	stw	r2,-12(fp)
    b8c4:	e0bffd17 	ldw	r2,-12(fp)
    b8c8:	100612fa 	roli	r3,r2,11
    b8cc:	e0bffc17 	ldw	r2,-16(fp)
    b8d0:	1885883a 	add	r2,r3,r2
    b8d4:	e0bffd15 	stw	r2,-12(fp)
    b8d8:	e0bffa17 	ldw	r2,-24(fp)
    b8dc:	100412ba 	roli	r2,r2,10
    b8e0:	e0bffa15 	stw	r2,-24(fp)
    GGG(ddd, eee, aaa, bbb, ccc, X[3], 14);
    b8e4:	e0fffa17 	ldw	r3,-24(fp)
    b8e8:	e0bff917 	ldw	r2,-28(fp)
    b8ec:	1886f03a 	xor	r3,r3,r2
    b8f0:	e0bffd17 	ldw	r2,-12(fp)
    b8f4:	1886703a 	and	r3,r3,r2
    b8f8:	e0bffa17 	ldw	r2,-24(fp)
    b8fc:	1886f03a 	xor	r3,r3,r2
    b900:	e0bfff17 	ldw	r2,-4(fp)
    b904:	10800304 	addi	r2,r2,12
    b908:	10800017 	ldw	r2,0(r2)
    b90c:	1887883a 	add	r3,r3,r2
    b910:	e0bffc17 	ldw	r2,-16(fp)
    b914:	1887883a 	add	r3,r3,r2
    b918:	009e9b74 	movhi	r2,31341
    b91c:	109dba44 	addi	r2,r2,30441
    b920:	1885883a 	add	r2,r3,r2
    b924:	e0bffc15 	stw	r2,-16(fp)
    b928:	e0bffc17 	ldw	r2,-16(fp)
    b92c:	100613ba 	roli	r3,r2,14
    b930:	e0bffb17 	ldw	r2,-20(fp)
    b934:	1885883a 	add	r2,r3,r2
    b938:	e0bffc15 	stw	r2,-16(fp)
    b93c:	e0bff917 	ldw	r2,-28(fp)
    b940:	100412ba 	roli	r2,r2,10
    b944:	e0bff915 	stw	r2,-28(fp)
    GGG(ccc, ddd, eee, aaa, bbb, X[11], 14);
    b948:	e0fff917 	ldw	r3,-28(fp)
    b94c:	e0bffd17 	ldw	r2,-12(fp)
    b950:	1886f03a 	xor	r3,r3,r2
    b954:	e0bffc17 	ldw	r2,-16(fp)
    b958:	1886703a 	and	r3,r3,r2
    b95c:	e0bff917 	ldw	r2,-28(fp)
    b960:	1886f03a 	xor	r3,r3,r2
    b964:	e0bfff17 	ldw	r2,-4(fp)
    b968:	10800b04 	addi	r2,r2,44
    b96c:	10800017 	ldw	r2,0(r2)
    b970:	1887883a 	add	r3,r3,r2
    b974:	e0bffb17 	ldw	r2,-20(fp)
    b978:	1887883a 	add	r3,r3,r2
    b97c:	009e9b74 	movhi	r2,31341
    b980:	109dba44 	addi	r2,r2,30441
    b984:	1885883a 	add	r2,r3,r2
    b988:	e0bffb15 	stw	r2,-20(fp)
    b98c:	e0bffb17 	ldw	r2,-20(fp)
    b990:	100613ba 	roli	r3,r2,14
    b994:	e0bffa17 	ldw	r2,-24(fp)
    b998:	1885883a 	add	r2,r3,r2
    b99c:	e0bffb15 	stw	r2,-20(fp)
    b9a0:	e0bffd17 	ldw	r2,-12(fp)
    b9a4:	100412ba 	roli	r2,r2,10
    b9a8:	e0bffd15 	stw	r2,-12(fp)
    GGG(bbb, ccc, ddd, eee, aaa, X[15], 6);
    b9ac:	e0fffd17 	ldw	r3,-12(fp)
    b9b0:	e0bffc17 	ldw	r2,-16(fp)
    b9b4:	1886f03a 	xor	r3,r3,r2
    b9b8:	e0bffb17 	ldw	r2,-20(fp)
    b9bc:	1886703a 	and	r3,r3,r2
    b9c0:	e0bffd17 	ldw	r2,-12(fp)
    b9c4:	1886f03a 	xor	r3,r3,r2
    b9c8:	e0bfff17 	ldw	r2,-4(fp)
    b9cc:	10800f04 	addi	r2,r2,60
    b9d0:	10800017 	ldw	r2,0(r2)
    b9d4:	1887883a 	add	r3,r3,r2
    b9d8:	e0bffa17 	ldw	r2,-24(fp)
    b9dc:	1887883a 	add	r3,r3,r2
    b9e0:	009e9b74 	movhi	r2,31341
    b9e4:	109dba44 	addi	r2,r2,30441
    b9e8:	1885883a 	add	r2,r3,r2
    b9ec:	e0bffa15 	stw	r2,-24(fp)
    b9f0:	e0bffa17 	ldw	r2,-24(fp)
    b9f4:	100611ba 	roli	r3,r2,6
    b9f8:	e0bff917 	ldw	r2,-28(fp)
    b9fc:	1885883a 	add	r2,r3,r2
    ba00:	e0bffa15 	stw	r2,-24(fp)
    ba04:	e0bffc17 	ldw	r2,-16(fp)
    ba08:	100412ba 	roli	r2,r2,10
    ba0c:	e0bffc15 	stw	r2,-16(fp)
    GGG(aaa, bbb, ccc, ddd, eee, X[0], 14);
    ba10:	e0fffc17 	ldw	r3,-16(fp)
    ba14:	e0bffb17 	ldw	r2,-20(fp)
    ba18:	1886f03a 	xor	r3,r3,r2
    ba1c:	e0bffa17 	ldw	r2,-24(fp)
    ba20:	1886703a 	and	r3,r3,r2
    ba24:	e0bffc17 	ldw	r2,-16(fp)
    ba28:	1886f03a 	xor	r3,r3,r2
    ba2c:	e0bfff17 	ldw	r2,-4(fp)
    ba30:	10800017 	ldw	r2,0(r2)
    ba34:	1887883a 	add	r3,r3,r2
    ba38:	e0bff917 	ldw	r2,-28(fp)
    ba3c:	1887883a 	add	r3,r3,r2
    ba40:	009e9b74 	movhi	r2,31341
    ba44:	109dba44 	addi	r2,r2,30441
    ba48:	1885883a 	add	r2,r3,r2
    ba4c:	e0bff915 	stw	r2,-28(fp)
    ba50:	e0bff917 	ldw	r2,-28(fp)
    ba54:	100613ba 	roli	r3,r2,14
    ba58:	e0bffd17 	ldw	r2,-12(fp)
    ba5c:	1885883a 	add	r2,r3,r2
    ba60:	e0bff915 	stw	r2,-28(fp)
    ba64:	e0bffb17 	ldw	r2,-20(fp)
    ba68:	100412ba 	roli	r2,r2,10
    ba6c:	e0bffb15 	stw	r2,-20(fp)
    GGG(eee, aaa, bbb, ccc, ddd, X[5], 6);
    ba70:	e0fffb17 	ldw	r3,-20(fp)
    ba74:	e0bffa17 	ldw	r2,-24(fp)
    ba78:	1886f03a 	xor	r3,r3,r2
    ba7c:	e0bff917 	ldw	r2,-28(fp)
    ba80:	1886703a 	and	r3,r3,r2
    ba84:	e0bffb17 	ldw	r2,-20(fp)
    ba88:	1886f03a 	xor	r3,r3,r2
    ba8c:	e0bfff17 	ldw	r2,-4(fp)
    ba90:	10800504 	addi	r2,r2,20
    ba94:	10800017 	ldw	r2,0(r2)
    ba98:	1887883a 	add	r3,r3,r2
    ba9c:	e0bffd17 	ldw	r2,-12(fp)
    baa0:	1887883a 	add	r3,r3,r2
    baa4:	009e9b74 	movhi	r2,31341
    baa8:	109dba44 	addi	r2,r2,30441
    baac:	1885883a 	add	r2,r3,r2
    bab0:	e0bffd15 	stw	r2,-12(fp)
    bab4:	e0bffd17 	ldw	r2,-12(fp)
    bab8:	100611ba 	roli	r3,r2,6
    babc:	e0bffc17 	ldw	r2,-16(fp)
    bac0:	1885883a 	add	r2,r3,r2
    bac4:	e0bffd15 	stw	r2,-12(fp)
    bac8:	e0bffa17 	ldw	r2,-24(fp)
    bacc:	100412ba 	roli	r2,r2,10
    bad0:	e0bffa15 	stw	r2,-24(fp)
    GGG(ddd, eee, aaa, bbb, ccc, X[12], 9);
    bad4:	e0fffa17 	ldw	r3,-24(fp)
    bad8:	e0bff917 	ldw	r2,-28(fp)
    badc:	1886f03a 	xor	r3,r3,r2
    bae0:	e0bffd17 	ldw	r2,-12(fp)
    bae4:	1886703a 	and	r3,r3,r2
    bae8:	e0bffa17 	ldw	r2,-24(fp)
    baec:	1886f03a 	xor	r3,r3,r2
    baf0:	e0bfff17 	ldw	r2,-4(fp)
    baf4:	10800c04 	addi	r2,r2,48
    baf8:	10800017 	ldw	r2,0(r2)
    bafc:	1887883a 	add	r3,r3,r2
    bb00:	e0bffc17 	ldw	r2,-16(fp)
    bb04:	1887883a 	add	r3,r3,r2
    bb08:	009e9b74 	movhi	r2,31341
    bb0c:	109dba44 	addi	r2,r2,30441
    bb10:	1885883a 	add	r2,r3,r2
    bb14:	e0bffc15 	stw	r2,-16(fp)
    bb18:	e0bffc17 	ldw	r2,-16(fp)
    bb1c:	1006127a 	roli	r3,r2,9
    bb20:	e0bffb17 	ldw	r2,-20(fp)
    bb24:	1885883a 	add	r2,r3,r2
    bb28:	e0bffc15 	stw	r2,-16(fp)
    bb2c:	e0bff917 	ldw	r2,-28(fp)
    bb30:	100412ba 	roli	r2,r2,10
    bb34:	e0bff915 	stw	r2,-28(fp)
    GGG(ccc, ddd, eee, aaa, bbb, X[2], 12);
    bb38:	e0fff917 	ldw	r3,-28(fp)
    bb3c:	e0bffd17 	ldw	r2,-12(fp)
    bb40:	1886f03a 	xor	r3,r3,r2
    bb44:	e0bffc17 	ldw	r2,-16(fp)
    bb48:	1886703a 	and	r3,r3,r2
    bb4c:	e0bff917 	ldw	r2,-28(fp)
    bb50:	1886f03a 	xor	r3,r3,r2
    bb54:	e0bfff17 	ldw	r2,-4(fp)
    bb58:	10800204 	addi	r2,r2,8
    bb5c:	10800017 	ldw	r2,0(r2)
    bb60:	1887883a 	add	r3,r3,r2
    bb64:	e0bffb17 	ldw	r2,-20(fp)
    bb68:	1887883a 	add	r3,r3,r2
    bb6c:	009e9b74 	movhi	r2,31341
    bb70:	109dba44 	addi	r2,r2,30441
    bb74:	1885883a 	add	r2,r3,r2
    bb78:	e0bffb15 	stw	r2,-20(fp)
    bb7c:	e0bffb17 	ldw	r2,-20(fp)
    bb80:	1006133a 	roli	r3,r2,12
    bb84:	e0bffa17 	ldw	r2,-24(fp)
    bb88:	1885883a 	add	r2,r3,r2
    bb8c:	e0bffb15 	stw	r2,-20(fp)
    bb90:	e0bffd17 	ldw	r2,-12(fp)
    bb94:	100412ba 	roli	r2,r2,10
    bb98:	e0bffd15 	stw	r2,-12(fp)
    GGG(bbb, ccc, ddd, eee, aaa, X[13], 9);
    bb9c:	e0fffd17 	ldw	r3,-12(fp)
    bba0:	e0bffc17 	ldw	r2,-16(fp)
    bba4:	1886f03a 	xor	r3,r3,r2
    bba8:	e0bffb17 	ldw	r2,-20(fp)
    bbac:	1886703a 	and	r3,r3,r2
    bbb0:	e0bffd17 	ldw	r2,-12(fp)
    bbb4:	1886f03a 	xor	r3,r3,r2
    bbb8:	e0bfff17 	ldw	r2,-4(fp)
    bbbc:	10800d04 	addi	r2,r2,52
    bbc0:	10800017 	ldw	r2,0(r2)
    bbc4:	1887883a 	add	r3,r3,r2
    bbc8:	e0bffa17 	ldw	r2,-24(fp)
    bbcc:	1887883a 	add	r3,r3,r2
    bbd0:	009e9b74 	movhi	r2,31341
    bbd4:	109dba44 	addi	r2,r2,30441
    bbd8:	1885883a 	add	r2,r3,r2
    bbdc:	e0bffa15 	stw	r2,-24(fp)
    bbe0:	e0bffa17 	ldw	r2,-24(fp)
    bbe4:	1006127a 	roli	r3,r2,9
    bbe8:	e0bff917 	ldw	r2,-28(fp)
    bbec:	1885883a 	add	r2,r3,r2
    bbf0:	e0bffa15 	stw	r2,-24(fp)
    bbf4:	e0bffc17 	ldw	r2,-16(fp)
    bbf8:	100412ba 	roli	r2,r2,10
    bbfc:	e0bffc15 	stw	r2,-16(fp)
    GGG(aaa, bbb, ccc, ddd, eee, X[9], 12);
    bc00:	e0fffc17 	ldw	r3,-16(fp)
    bc04:	e0bffb17 	ldw	r2,-20(fp)
    bc08:	1886f03a 	xor	r3,r3,r2
    bc0c:	e0bffa17 	ldw	r2,-24(fp)
    bc10:	1886703a 	and	r3,r3,r2
    bc14:	e0bffc17 	ldw	r2,-16(fp)
    bc18:	1886f03a 	xor	r3,r3,r2
    bc1c:	e0bfff17 	ldw	r2,-4(fp)
    bc20:	10800904 	addi	r2,r2,36
    bc24:	10800017 	ldw	r2,0(r2)
    bc28:	1887883a 	add	r3,r3,r2
    bc2c:	e0bff917 	ldw	r2,-28(fp)
    bc30:	1887883a 	add	r3,r3,r2
    bc34:	009e9b74 	movhi	r2,31341
    bc38:	109dba44 	addi	r2,r2,30441
    bc3c:	1885883a 	add	r2,r3,r2
    bc40:	e0bff915 	stw	r2,-28(fp)
    bc44:	e0bff917 	ldw	r2,-28(fp)
    bc48:	1006133a 	roli	r3,r2,12
    bc4c:	e0bffd17 	ldw	r2,-12(fp)
    bc50:	1885883a 	add	r2,r3,r2
    bc54:	e0bff915 	stw	r2,-28(fp)
    bc58:	e0bffb17 	ldw	r2,-20(fp)
    bc5c:	100412ba 	roli	r2,r2,10
    bc60:	e0bffb15 	stw	r2,-20(fp)
    GGG(eee, aaa, bbb, ccc, ddd, X[7], 5);
    bc64:	e0fffb17 	ldw	r3,-20(fp)
    bc68:	e0bffa17 	ldw	r2,-24(fp)
    bc6c:	1886f03a 	xor	r3,r3,r2
    bc70:	e0bff917 	ldw	r2,-28(fp)
    bc74:	1886703a 	and	r3,r3,r2
    bc78:	e0bffb17 	ldw	r2,-20(fp)
    bc7c:	1886f03a 	xor	r3,r3,r2
    bc80:	e0bfff17 	ldw	r2,-4(fp)
    bc84:	10800704 	addi	r2,r2,28
    bc88:	10800017 	ldw	r2,0(r2)
    bc8c:	1887883a 	add	r3,r3,r2
    bc90:	e0bffd17 	ldw	r2,-12(fp)
    bc94:	1887883a 	add	r3,r3,r2
    bc98:	009e9b74 	movhi	r2,31341
    bc9c:	109dba44 	addi	r2,r2,30441
    bca0:	1885883a 	add	r2,r3,r2
    bca4:	e0bffd15 	stw	r2,-12(fp)
    bca8:	e0bffd17 	ldw	r2,-12(fp)
    bcac:	1006117a 	roli	r3,r2,5
    bcb0:	e0bffc17 	ldw	r2,-16(fp)
    bcb4:	1885883a 	add	r2,r3,r2
    bcb8:	e0bffd15 	stw	r2,-12(fp)
    bcbc:	e0bffa17 	ldw	r2,-24(fp)
    bcc0:	100412ba 	roli	r2,r2,10
    bcc4:	e0bffa15 	stw	r2,-24(fp)
    GGG(ddd, eee, aaa, bbb, ccc, X[10], 15);
    bcc8:	e0fffa17 	ldw	r3,-24(fp)
    bccc:	e0bff917 	ldw	r2,-28(fp)
    bcd0:	1886f03a 	xor	r3,r3,r2
    bcd4:	e0bffd17 	ldw	r2,-12(fp)
    bcd8:	1886703a 	and	r3,r3,r2
    bcdc:	e0bffa17 	ldw	r2,-24(fp)
    bce0:	1886f03a 	xor	r3,r3,r2
    bce4:	e0bfff17 	ldw	r2,-4(fp)
    bce8:	10800a04 	addi	r2,r2,40
    bcec:	10800017 	ldw	r2,0(r2)
    bcf0:	1887883a 	add	r3,r3,r2
    bcf4:	e0bffc17 	ldw	r2,-16(fp)
    bcf8:	1887883a 	add	r3,r3,r2
    bcfc:	009e9b74 	movhi	r2,31341
    bd00:	109dba44 	addi	r2,r2,30441
    bd04:	1885883a 	add	r2,r3,r2
    bd08:	e0bffc15 	stw	r2,-16(fp)
    bd0c:	e0bffc17 	ldw	r2,-16(fp)
    bd10:	100613fa 	roli	r3,r2,15
    bd14:	e0bffb17 	ldw	r2,-20(fp)
    bd18:	1885883a 	add	r2,r3,r2
    bd1c:	e0bffc15 	stw	r2,-16(fp)
    bd20:	e0bff917 	ldw	r2,-28(fp)
    bd24:	100412ba 	roli	r2,r2,10
    bd28:	e0bff915 	stw	r2,-28(fp)
    GGG(ccc, ddd, eee, aaa, bbb, X[14], 8);
    bd2c:	e0fff917 	ldw	r3,-28(fp)
    bd30:	e0bffd17 	ldw	r2,-12(fp)
    bd34:	1886f03a 	xor	r3,r3,r2
    bd38:	e0bffc17 	ldw	r2,-16(fp)
    bd3c:	1886703a 	and	r3,r3,r2
    bd40:	e0bff917 	ldw	r2,-28(fp)
    bd44:	1886f03a 	xor	r3,r3,r2
    bd48:	e0bfff17 	ldw	r2,-4(fp)
    bd4c:	10800e04 	addi	r2,r2,56
    bd50:	10800017 	ldw	r2,0(r2)
    bd54:	1887883a 	add	r3,r3,r2
    bd58:	e0bffb17 	ldw	r2,-20(fp)
    bd5c:	1887883a 	add	r3,r3,r2
    bd60:	009e9b74 	movhi	r2,31341
    bd64:	109dba44 	addi	r2,r2,30441
    bd68:	1885883a 	add	r2,r3,r2
    bd6c:	e0bffb15 	stw	r2,-20(fp)
    bd70:	e0bffb17 	ldw	r2,-20(fp)
    bd74:	1006123a 	roli	r3,r2,8
    bd78:	e0bffa17 	ldw	r2,-24(fp)
    bd7c:	1885883a 	add	r2,r3,r2
    bd80:	e0bffb15 	stw	r2,-20(fp)
    bd84:	e0bffd17 	ldw	r2,-12(fp)
    bd88:	100412ba 	roli	r2,r2,10
    bd8c:	e0bffd15 	stw	r2,-12(fp)

    /* parallel round 5 */
    FFF(bbb, ccc, ddd, eee, aaa, X[12], 8);
    bd90:	e0fffb17 	ldw	r3,-20(fp)
    bd94:	e0bffc17 	ldw	r2,-16(fp)
    bd98:	1886f03a 	xor	r3,r3,r2
    bd9c:	e0bffd17 	ldw	r2,-12(fp)
    bda0:	1886f03a 	xor	r3,r3,r2
    bda4:	e0bfff17 	ldw	r2,-4(fp)
    bda8:	10800c04 	addi	r2,r2,48
    bdac:	10800017 	ldw	r2,0(r2)
    bdb0:	1885883a 	add	r2,r3,r2
    bdb4:	e0fffa17 	ldw	r3,-24(fp)
    bdb8:	1885883a 	add	r2,r3,r2
    bdbc:	e0bffa15 	stw	r2,-24(fp)
    bdc0:	e0bffa17 	ldw	r2,-24(fp)
    bdc4:	1006123a 	roli	r3,r2,8
    bdc8:	e0bff917 	ldw	r2,-28(fp)
    bdcc:	1885883a 	add	r2,r3,r2
    bdd0:	e0bffa15 	stw	r2,-24(fp)
    bdd4:	e0bffc17 	ldw	r2,-16(fp)
    bdd8:	100412ba 	roli	r2,r2,10
    bddc:	e0bffc15 	stw	r2,-16(fp)
    FFF(aaa, bbb, ccc, ddd, eee, X[15], 5);
    bde0:	e0fffa17 	ldw	r3,-24(fp)
    bde4:	e0bffb17 	ldw	r2,-20(fp)
    bde8:	1886f03a 	xor	r3,r3,r2
    bdec:	e0bffc17 	ldw	r2,-16(fp)
    bdf0:	1886f03a 	xor	r3,r3,r2
    bdf4:	e0bfff17 	ldw	r2,-4(fp)
    bdf8:	10800f04 	addi	r2,r2,60
    bdfc:	10800017 	ldw	r2,0(r2)
    be00:	1885883a 	add	r2,r3,r2
    be04:	e0fff917 	ldw	r3,-28(fp)
    be08:	1885883a 	add	r2,r3,r2
    be0c:	e0bff915 	stw	r2,-28(fp)
    be10:	e0bff917 	ldw	r2,-28(fp)
    be14:	1006117a 	roli	r3,r2,5
    be18:	e0bffd17 	ldw	r2,-12(fp)
    be1c:	1885883a 	add	r2,r3,r2
    be20:	e0bff915 	stw	r2,-28(fp)
    be24:	e0bffb17 	ldw	r2,-20(fp)
    be28:	100412ba 	roli	r2,r2,10
    be2c:	e0bffb15 	stw	r2,-20(fp)
    FFF(eee, aaa, bbb, ccc, ddd, X[10], 12);
    be30:	e0fff917 	ldw	r3,-28(fp)
    be34:	e0bffa17 	ldw	r2,-24(fp)
    be38:	1886f03a 	xor	r3,r3,r2
    be3c:	e0bffb17 	ldw	r2,-20(fp)
    be40:	1886f03a 	xor	r3,r3,r2
    be44:	e0bfff17 	ldw	r2,-4(fp)
    be48:	10800a04 	addi	r2,r2,40
    be4c:	10800017 	ldw	r2,0(r2)
    be50:	1885883a 	add	r2,r3,r2
    be54:	e0fffd17 	ldw	r3,-12(fp)
    be58:	1885883a 	add	r2,r3,r2
    be5c:	e0bffd15 	stw	r2,-12(fp)
    be60:	e0bffd17 	ldw	r2,-12(fp)
    be64:	1006133a 	roli	r3,r2,12
    be68:	e0bffc17 	ldw	r2,-16(fp)
    be6c:	1885883a 	add	r2,r3,r2
    be70:	e0bffd15 	stw	r2,-12(fp)
    be74:	e0bffa17 	ldw	r2,-24(fp)
    be78:	100412ba 	roli	r2,r2,10
    be7c:	e0bffa15 	stw	r2,-24(fp)
    FFF(ddd, eee, aaa, bbb, ccc, X[4], 9);
    be80:	e0fffd17 	ldw	r3,-12(fp)
    be84:	e0bff917 	ldw	r2,-28(fp)
    be88:	1886f03a 	xor	r3,r3,r2
    be8c:	e0bffa17 	ldw	r2,-24(fp)
    be90:	1886f03a 	xor	r3,r3,r2
    be94:	e0bfff17 	ldw	r2,-4(fp)
    be98:	10800404 	addi	r2,r2,16
    be9c:	10800017 	ldw	r2,0(r2)
    bea0:	1885883a 	add	r2,r3,r2
    bea4:	e0fffc17 	ldw	r3,-16(fp)
    bea8:	1885883a 	add	r2,r3,r2
    beac:	e0bffc15 	stw	r2,-16(fp)
    beb0:	e0bffc17 	ldw	r2,-16(fp)
    beb4:	1006127a 	roli	r3,r2,9
    beb8:	e0bffb17 	ldw	r2,-20(fp)
    bebc:	1885883a 	add	r2,r3,r2
    bec0:	e0bffc15 	stw	r2,-16(fp)
    bec4:	e0bff917 	ldw	r2,-28(fp)
    bec8:	100412ba 	roli	r2,r2,10
    becc:	e0bff915 	stw	r2,-28(fp)
    FFF(ccc, ddd, eee, aaa, bbb, X[1], 12);
    bed0:	e0fffc17 	ldw	r3,-16(fp)
    bed4:	e0bffd17 	ldw	r2,-12(fp)
    bed8:	1886f03a 	xor	r3,r3,r2
    bedc:	e0bff917 	ldw	r2,-28(fp)
    bee0:	1886f03a 	xor	r3,r3,r2
    bee4:	e0bfff17 	ldw	r2,-4(fp)
    bee8:	10800104 	addi	r2,r2,4
    beec:	10800017 	ldw	r2,0(r2)
    bef0:	1885883a 	add	r2,r3,r2
    bef4:	e0fffb17 	ldw	r3,-20(fp)
    bef8:	1885883a 	add	r2,r3,r2
    befc:	e0bffb15 	stw	r2,-20(fp)
    bf00:	e0bffb17 	ldw	r2,-20(fp)
    bf04:	1006133a 	roli	r3,r2,12
    bf08:	e0bffa17 	ldw	r2,-24(fp)
    bf0c:	1885883a 	add	r2,r3,r2
    bf10:	e0bffb15 	stw	r2,-20(fp)
    bf14:	e0bffd17 	ldw	r2,-12(fp)
    bf18:	100412ba 	roli	r2,r2,10
    bf1c:	e0bffd15 	stw	r2,-12(fp)
    FFF(bbb, ccc, ddd, eee, aaa, X[5], 5);
    bf20:	e0fffb17 	ldw	r3,-20(fp)
    bf24:	e0bffc17 	ldw	r2,-16(fp)
    bf28:	1886f03a 	xor	r3,r3,r2
    bf2c:	e0bffd17 	ldw	r2,-12(fp)
    bf30:	1886f03a 	xor	r3,r3,r2
    bf34:	e0bfff17 	ldw	r2,-4(fp)
    bf38:	10800504 	addi	r2,r2,20
    bf3c:	10800017 	ldw	r2,0(r2)
    bf40:	1885883a 	add	r2,r3,r2
    bf44:	e0fffa17 	ldw	r3,-24(fp)
    bf48:	1885883a 	add	r2,r3,r2
    bf4c:	e0bffa15 	stw	r2,-24(fp)
    bf50:	e0bffa17 	ldw	r2,-24(fp)
    bf54:	1006117a 	roli	r3,r2,5
    bf58:	e0bff917 	ldw	r2,-28(fp)
    bf5c:	1885883a 	add	r2,r3,r2
    bf60:	e0bffa15 	stw	r2,-24(fp)
    bf64:	e0bffc17 	ldw	r2,-16(fp)
    bf68:	100412ba 	roli	r2,r2,10
    bf6c:	e0bffc15 	stw	r2,-16(fp)
    FFF(aaa, bbb, ccc, ddd, eee, X[8], 14);
    bf70:	e0fffa17 	ldw	r3,-24(fp)
    bf74:	e0bffb17 	ldw	r2,-20(fp)
    bf78:	1886f03a 	xor	r3,r3,r2
    bf7c:	e0bffc17 	ldw	r2,-16(fp)
    bf80:	1886f03a 	xor	r3,r3,r2
    bf84:	e0bfff17 	ldw	r2,-4(fp)
    bf88:	10800804 	addi	r2,r2,32
    bf8c:	10800017 	ldw	r2,0(r2)
    bf90:	1885883a 	add	r2,r3,r2
    bf94:	e0fff917 	ldw	r3,-28(fp)
    bf98:	1885883a 	add	r2,r3,r2
    bf9c:	e0bff915 	stw	r2,-28(fp)
    bfa0:	e0bff917 	ldw	r2,-28(fp)
    bfa4:	100613ba 	roli	r3,r2,14
    bfa8:	e0bffd17 	ldw	r2,-12(fp)
    bfac:	1885883a 	add	r2,r3,r2
    bfb0:	e0bff915 	stw	r2,-28(fp)
    bfb4:	e0bffb17 	ldw	r2,-20(fp)
    bfb8:	100412ba 	roli	r2,r2,10
    bfbc:	e0bffb15 	stw	r2,-20(fp)
    FFF(eee, aaa, bbb, ccc, ddd, X[7], 6);
    bfc0:	e0fff917 	ldw	r3,-28(fp)
    bfc4:	e0bffa17 	ldw	r2,-24(fp)
    bfc8:	1886f03a 	xor	r3,r3,r2
    bfcc:	e0bffb17 	ldw	r2,-20(fp)
    bfd0:	1886f03a 	xor	r3,r3,r2
    bfd4:	e0bfff17 	ldw	r2,-4(fp)
    bfd8:	10800704 	addi	r2,r2,28
    bfdc:	10800017 	ldw	r2,0(r2)
    bfe0:	1885883a 	add	r2,r3,r2
    bfe4:	e0fffd17 	ldw	r3,-12(fp)
    bfe8:	1885883a 	add	r2,r3,r2
    bfec:	e0bffd15 	stw	r2,-12(fp)
    bff0:	e0bffd17 	ldw	r2,-12(fp)
    bff4:	100611ba 	roli	r3,r2,6
    bff8:	e0bffc17 	ldw	r2,-16(fp)
    bffc:	1885883a 	add	r2,r3,r2
    c000:	e0bffd15 	stw	r2,-12(fp)
    c004:	e0bffa17 	ldw	r2,-24(fp)
    c008:	100412ba 	roli	r2,r2,10
    c00c:	e0bffa15 	stw	r2,-24(fp)
    FFF(ddd, eee, aaa, bbb, ccc, X[6], 8);
    c010:	e0fffd17 	ldw	r3,-12(fp)
    c014:	e0bff917 	ldw	r2,-28(fp)
    c018:	1886f03a 	xor	r3,r3,r2
    c01c:	e0bffa17 	ldw	r2,-24(fp)
    c020:	1886f03a 	xor	r3,r3,r2
    c024:	e0bfff17 	ldw	r2,-4(fp)
    c028:	10800604 	addi	r2,r2,24
    c02c:	10800017 	ldw	r2,0(r2)
    c030:	1885883a 	add	r2,r3,r2
    c034:	e0fffc17 	ldw	r3,-16(fp)
    c038:	1885883a 	add	r2,r3,r2
    c03c:	e0bffc15 	stw	r2,-16(fp)
    c040:	e0bffc17 	ldw	r2,-16(fp)
    c044:	1006123a 	roli	r3,r2,8
    c048:	e0bffb17 	ldw	r2,-20(fp)
    c04c:	1885883a 	add	r2,r3,r2
    c050:	e0bffc15 	stw	r2,-16(fp)
    c054:	e0bff917 	ldw	r2,-28(fp)
    c058:	100412ba 	roli	r2,r2,10
    c05c:	e0bff915 	stw	r2,-28(fp)
    FFF(ccc, ddd, eee, aaa, bbb, X[2], 13);
    c060:	e0fffc17 	ldw	r3,-16(fp)
    c064:	e0bffd17 	ldw	r2,-12(fp)
    c068:	1886f03a 	xor	r3,r3,r2
    c06c:	e0bff917 	ldw	r2,-28(fp)
    c070:	1886f03a 	xor	r3,r3,r2
    c074:	e0bfff17 	ldw	r2,-4(fp)
    c078:	10800204 	addi	r2,r2,8
    c07c:	10800017 	ldw	r2,0(r2)
    c080:	1885883a 	add	r2,r3,r2
    c084:	e0fffb17 	ldw	r3,-20(fp)
    c088:	1885883a 	add	r2,r3,r2
    c08c:	e0bffb15 	stw	r2,-20(fp)
    c090:	e0bffb17 	ldw	r2,-20(fp)
    c094:	1006137a 	roli	r3,r2,13
    c098:	e0bffa17 	ldw	r2,-24(fp)
    c09c:	1885883a 	add	r2,r3,r2
    c0a0:	e0bffb15 	stw	r2,-20(fp)
    c0a4:	e0bffd17 	ldw	r2,-12(fp)
    c0a8:	100412ba 	roli	r2,r2,10
    c0ac:	e0bffd15 	stw	r2,-12(fp)
    FFF(bbb, ccc, ddd, eee, aaa, X[13], 6);
    c0b0:	e0fffb17 	ldw	r3,-20(fp)
    c0b4:	e0bffc17 	ldw	r2,-16(fp)
    c0b8:	1886f03a 	xor	r3,r3,r2
    c0bc:	e0bffd17 	ldw	r2,-12(fp)
    c0c0:	1886f03a 	xor	r3,r3,r2
    c0c4:	e0bfff17 	ldw	r2,-4(fp)
    c0c8:	10800d04 	addi	r2,r2,52
    c0cc:	10800017 	ldw	r2,0(r2)
    c0d0:	1885883a 	add	r2,r3,r2
    c0d4:	e0fffa17 	ldw	r3,-24(fp)
    c0d8:	1885883a 	add	r2,r3,r2
    c0dc:	e0bffa15 	stw	r2,-24(fp)
    c0e0:	e0bffa17 	ldw	r2,-24(fp)
    c0e4:	100611ba 	roli	r3,r2,6
    c0e8:	e0bff917 	ldw	r2,-28(fp)
    c0ec:	1885883a 	add	r2,r3,r2
    c0f0:	e0bffa15 	stw	r2,-24(fp)
    c0f4:	e0bffc17 	ldw	r2,-16(fp)
    c0f8:	100412ba 	roli	r2,r2,10
    c0fc:	e0bffc15 	stw	r2,-16(fp)
    FFF(aaa, bbb, ccc, ddd, eee, X[14], 5);
    c100:	e0fffa17 	ldw	r3,-24(fp)
    c104:	e0bffb17 	ldw	r2,-20(fp)
    c108:	1886f03a 	xor	r3,r3,r2
    c10c:	e0bffc17 	ldw	r2,-16(fp)
    c110:	1886f03a 	xor	r3,r3,r2
    c114:	e0bfff17 	ldw	r2,-4(fp)
    c118:	10800e04 	addi	r2,r2,56
    c11c:	10800017 	ldw	r2,0(r2)
    c120:	1885883a 	add	r2,r3,r2
    c124:	e0fff917 	ldw	r3,-28(fp)
    c128:	1885883a 	add	r2,r3,r2
    c12c:	e0bff915 	stw	r2,-28(fp)
    c130:	e0bff917 	ldw	r2,-28(fp)
    c134:	1006117a 	roli	r3,r2,5
    c138:	e0bffd17 	ldw	r2,-12(fp)
    c13c:	1885883a 	add	r2,r3,r2
    c140:	e0bff915 	stw	r2,-28(fp)
    c144:	e0bffb17 	ldw	r2,-20(fp)
    c148:	100412ba 	roli	r2,r2,10
    c14c:	e0bffb15 	stw	r2,-20(fp)
    FFF(eee, aaa, bbb, ccc, ddd, X[0], 15);
    c150:	e0fff917 	ldw	r3,-28(fp)
    c154:	e0bffa17 	ldw	r2,-24(fp)
    c158:	1886f03a 	xor	r3,r3,r2
    c15c:	e0bffb17 	ldw	r2,-20(fp)
    c160:	1886f03a 	xor	r3,r3,r2
    c164:	e0bfff17 	ldw	r2,-4(fp)
    c168:	10800017 	ldw	r2,0(r2)
    c16c:	1885883a 	add	r2,r3,r2
    c170:	e0fffd17 	ldw	r3,-12(fp)
    c174:	1885883a 	add	r2,r3,r2
    c178:	e0bffd15 	stw	r2,-12(fp)
    c17c:	e0bffd17 	ldw	r2,-12(fp)
    c180:	100613fa 	roli	r3,r2,15
    c184:	e0bffc17 	ldw	r2,-16(fp)
    c188:	1885883a 	add	r2,r3,r2
    c18c:	e0bffd15 	stw	r2,-12(fp)
    c190:	e0bffa17 	ldw	r2,-24(fp)
    c194:	100412ba 	roli	r2,r2,10
    c198:	e0bffa15 	stw	r2,-24(fp)
    FFF(ddd, eee, aaa, bbb, ccc, X[3], 13);
    c19c:	e0fffd17 	ldw	r3,-12(fp)
    c1a0:	e0bff917 	ldw	r2,-28(fp)
    c1a4:	1886f03a 	xor	r3,r3,r2
    c1a8:	e0bffa17 	ldw	r2,-24(fp)
    c1ac:	1886f03a 	xor	r3,r3,r2
    c1b0:	e0bfff17 	ldw	r2,-4(fp)
    c1b4:	10800304 	addi	r2,r2,12
    c1b8:	10800017 	ldw	r2,0(r2)
    c1bc:	1885883a 	add	r2,r3,r2
    c1c0:	e0fffc17 	ldw	r3,-16(fp)
    c1c4:	1885883a 	add	r2,r3,r2
    c1c8:	e0bffc15 	stw	r2,-16(fp)
    c1cc:	e0bffc17 	ldw	r2,-16(fp)
    c1d0:	1006137a 	roli	r3,r2,13
    c1d4:	e0bffb17 	ldw	r2,-20(fp)
    c1d8:	1885883a 	add	r2,r3,r2
    c1dc:	e0bffc15 	stw	r2,-16(fp)
    c1e0:	e0bff917 	ldw	r2,-28(fp)
    c1e4:	100412ba 	roli	r2,r2,10
    c1e8:	e0bff915 	stw	r2,-28(fp)
    FFF(ccc, ddd, eee, aaa, bbb, X[9], 11);
    c1ec:	e0fffc17 	ldw	r3,-16(fp)
    c1f0:	e0bffd17 	ldw	r2,-12(fp)
    c1f4:	1886f03a 	xor	r3,r3,r2
    c1f8:	e0bff917 	ldw	r2,-28(fp)
    c1fc:	1886f03a 	xor	r3,r3,r2
    c200:	e0bfff17 	ldw	r2,-4(fp)
    c204:	10800904 	addi	r2,r2,36
    c208:	10800017 	ldw	r2,0(r2)
    c20c:	1885883a 	add	r2,r3,r2
    c210:	e0fffb17 	ldw	r3,-20(fp)
    c214:	1885883a 	add	r2,r3,r2
    c218:	e0bffb15 	stw	r2,-20(fp)
    c21c:	e0bffb17 	ldw	r2,-20(fp)
    c220:	100612fa 	roli	r3,r2,11
    c224:	e0bffa17 	ldw	r2,-24(fp)
    c228:	1885883a 	add	r2,r3,r2
    c22c:	e0bffb15 	stw	r2,-20(fp)
    c230:	e0bffd17 	ldw	r2,-12(fp)
    c234:	100412ba 	roli	r2,r2,10
    c238:	e0bffd15 	stw	r2,-12(fp)
    FFF(bbb, ccc, ddd, eee, aaa, X[11], 11);
    c23c:	e0fffb17 	ldw	r3,-20(fp)
    c240:	e0bffc17 	ldw	r2,-16(fp)
    c244:	1886f03a 	xor	r3,r3,r2
    c248:	e0bffd17 	ldw	r2,-12(fp)
    c24c:	1886f03a 	xor	r3,r3,r2
    c250:	e0bfff17 	ldw	r2,-4(fp)
    c254:	10800b04 	addi	r2,r2,44
    c258:	10800017 	ldw	r2,0(r2)
    c25c:	1885883a 	add	r2,r3,r2
    c260:	e0fffa17 	ldw	r3,-24(fp)
    c264:	1885883a 	add	r2,r3,r2
    c268:	e0bffa15 	stw	r2,-24(fp)
    c26c:	e0bffa17 	ldw	r2,-24(fp)
    c270:	100612fa 	roli	r3,r2,11
    c274:	e0bff917 	ldw	r2,-28(fp)
    c278:	1885883a 	add	r2,r3,r2
    c27c:	e0bffa15 	stw	r2,-24(fp)
    c280:	e0bffc17 	ldw	r2,-16(fp)
    c284:	100412ba 	roli	r2,r2,10
    c288:	e0bffc15 	stw	r2,-16(fp)

    /* combine results */
    ddd += cc + MDbuf[1];
    c28c:	e0bffe17 	ldw	r2,-8(fp)
    c290:	10800104 	addi	r2,r2,4
    c294:	10c00017 	ldw	r3,0(r2)
    c298:	e0bff617 	ldw	r2,-40(fp)
    c29c:	1885883a 	add	r2,r3,r2
    c2a0:	e0fffc17 	ldw	r3,-16(fp)
    c2a4:	1885883a 	add	r2,r3,r2
    c2a8:	e0bffc15 	stw	r2,-16(fp)
    MDbuf[1] = MDbuf[2] + dd + eee;
    c2ac:	e0bffe17 	ldw	r2,-8(fp)
    c2b0:	10800104 	addi	r2,r2,4
    c2b4:	e0fffe17 	ldw	r3,-8(fp)
    c2b8:	18c00204 	addi	r3,r3,8
    c2bc:	19000017 	ldw	r4,0(r3)
    c2c0:	e0fff717 	ldw	r3,-36(fp)
    c2c4:	20c9883a 	add	r4,r4,r3
    c2c8:	e0fffd17 	ldw	r3,-12(fp)
    c2cc:	20c7883a 	add	r3,r4,r3
    c2d0:	10c00015 	stw	r3,0(r2)
    MDbuf[2] = MDbuf[3] + ee + aaa;
    c2d4:	e0bffe17 	ldw	r2,-8(fp)
    c2d8:	10800204 	addi	r2,r2,8
    c2dc:	e0fffe17 	ldw	r3,-8(fp)
    c2e0:	18c00304 	addi	r3,r3,12
    c2e4:	19000017 	ldw	r4,0(r3)
    c2e8:	e0fff817 	ldw	r3,-32(fp)
    c2ec:	20c9883a 	add	r4,r4,r3
    c2f0:	e0fff917 	ldw	r3,-28(fp)
    c2f4:	20c7883a 	add	r3,r4,r3
    c2f8:	10c00015 	stw	r3,0(r2)
    MDbuf[3] = MDbuf[4] + aa + bbb;
    c2fc:	e0bffe17 	ldw	r2,-8(fp)
    c300:	10800304 	addi	r2,r2,12
    c304:	e0fffe17 	ldw	r3,-8(fp)
    c308:	18c00404 	addi	r3,r3,16
    c30c:	19000017 	ldw	r4,0(r3)
    c310:	e0fff417 	ldw	r3,-48(fp)
    c314:	20c9883a 	add	r4,r4,r3
    c318:	e0fffa17 	ldw	r3,-24(fp)
    c31c:	20c7883a 	add	r3,r4,r3
    c320:	10c00015 	stw	r3,0(r2)
    MDbuf[4] = MDbuf[0] + bb + ccc;
    c324:	e0bffe17 	ldw	r2,-8(fp)
    c328:	10800404 	addi	r2,r2,16
    c32c:	e0fffe17 	ldw	r3,-8(fp)
    c330:	19000017 	ldw	r4,0(r3)
    c334:	e0fff517 	ldw	r3,-44(fp)
    c338:	20c9883a 	add	r4,r4,r3
    c33c:	e0fffb17 	ldw	r3,-20(fp)
    c340:	20c7883a 	add	r3,r4,r3
    c344:	10c00015 	stw	r3,0(r2)
    MDbuf[0] = ddd;
    c348:	e0bffe17 	ldw	r2,-8(fp)
    c34c:	e0fffc17 	ldw	r3,-16(fp)
    c350:	10c00015 	stw	r3,0(r2)
}
    c354:	0001883a 	nop
    c358:	e037883a 	mov	sp,fp
    c35c:	df000017 	ldw	fp,0(sp)
    c360:	dec00104 	addi	sp,sp,4
    c364:	f800283a 	ret

0000c368 <btc_ripemd160>:

void btc_ripemd160(const uint8_t* msg, uint32_t msg_len, uint8_t* hash)
{
    c368:	deffe404 	addi	sp,sp,-112
    c36c:	dfc01b15 	stw	ra,108(sp)
    c370:	df001a15 	stw	fp,104(sp)
    c374:	df001a04 	addi	fp,sp,104
    c378:	e13ffd15 	stw	r4,-12(fp)
    c37c:	e17ffe15 	stw	r5,-8(fp)
    c380:	e1bfff15 	stw	r6,-4(fp)
    uint32_t i;
    int j;
    uint32_t digest[5] = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0UL};
    c384:	0099d174 	movhi	r2,26437
    c388:	1088c044 	addi	r2,r2,8961
    c38c:	e0bfe815 	stw	r2,-96(fp)
    c390:	00bbf3b4 	movhi	r2,61390
    c394:	10aae244 	addi	r2,r2,-21623
    c398:	e0bfe915 	stw	r2,-92(fp)
    c39c:	00a62ef4 	movhi	r2,39099
    c3a0:	10b73f84 	addi	r2,r2,-8962
    c3a4:	e0bfea15 	stw	r2,-88(fp)
    c3a8:	00840cb4 	movhi	r2,4146
    c3ac:	10951d84 	addi	r2,r2,21622
    c3b0:	e0bfeb15 	stw	r2,-84(fp)
    c3b4:	00b0f4f4 	movhi	r2,50131
    c3b8:	10b87c04 	addi	r2,r2,-7696
    c3bc:	e0bfec15 	stw	r2,-80(fp)

    for (i = 0; i < (msg_len >> 6); ++i) {
    c3c0:	e03fe615 	stw	zero,-104(fp)
    c3c4:	00005b06 	br	c534 <btc_ripemd160+0x1cc>
        uint32_t chunk[16];

        for (j = 0; j < 16; ++j) {
    c3c8:	e03fe715 	stw	zero,-100(fp)
    c3cc:	00004e06 	br	c508 <btc_ripemd160+0x1a0>
            chunk[j] = (uint32_t)(*(msg++));
    c3d0:	e0bffd17 	ldw	r2,-12(fp)
    c3d4:	10c00044 	addi	r3,r2,1
    c3d8:	e0fffd15 	stw	r3,-12(fp)
    c3dc:	10800003 	ldbu	r2,0(r2)
    c3e0:	10c03fcc 	andi	r3,r2,255
    c3e4:	e0bfe717 	ldw	r2,-100(fp)
    c3e8:	1085883a 	add	r2,r2,r2
    c3ec:	1085883a 	add	r2,r2,r2
    c3f0:	e13fe604 	addi	r4,fp,-104
    c3f4:	2085883a 	add	r2,r4,r2
    c3f8:	10800704 	addi	r2,r2,28
    c3fc:	10c00015 	stw	r3,0(r2)
            chunk[j] |= (uint32_t)(*(msg++)) << 8;
    c400:	e0bffd17 	ldw	r2,-12(fp)
    c404:	10c00044 	addi	r3,r2,1
    c408:	e0fffd15 	stw	r3,-12(fp)
    c40c:	10800003 	ldbu	r2,0(r2)
    c410:	10803fcc 	andi	r2,r2,255
    c414:	1006923a 	slli	r3,r2,8
    c418:	e0bfe717 	ldw	r2,-100(fp)
    c41c:	1085883a 	add	r2,r2,r2
    c420:	1085883a 	add	r2,r2,r2
    c424:	e17fe604 	addi	r5,fp,-104
    c428:	2885883a 	add	r2,r5,r2
    c42c:	10800704 	addi	r2,r2,28
    c430:	10800017 	ldw	r2,0(r2)
    c434:	10c6b03a 	or	r3,r2,r3
    c438:	e0bfe717 	ldw	r2,-100(fp)
    c43c:	1085883a 	add	r2,r2,r2
    c440:	1085883a 	add	r2,r2,r2
    c444:	e13fe604 	addi	r4,fp,-104
    c448:	2085883a 	add	r2,r4,r2
    c44c:	10800704 	addi	r2,r2,28
    c450:	10c00015 	stw	r3,0(r2)
            chunk[j] |= (uint32_t)(*(msg++)) << 16;
    c454:	e0bffd17 	ldw	r2,-12(fp)
    c458:	10c00044 	addi	r3,r2,1
    c45c:	e0fffd15 	stw	r3,-12(fp)
    c460:	10800003 	ldbu	r2,0(r2)
    c464:	10803fcc 	andi	r2,r2,255
    c468:	1006943a 	slli	r3,r2,16
    c46c:	e0bfe717 	ldw	r2,-100(fp)
    c470:	1085883a 	add	r2,r2,r2
    c474:	1085883a 	add	r2,r2,r2
    c478:	e17fe604 	addi	r5,fp,-104
    c47c:	2885883a 	add	r2,r5,r2
    c480:	10800704 	addi	r2,r2,28
    c484:	10800017 	ldw	r2,0(r2)
    c488:	10c6b03a 	or	r3,r2,r3
    c48c:	e0bfe717 	ldw	r2,-100(fp)
    c490:	1085883a 	add	r2,r2,r2
    c494:	1085883a 	add	r2,r2,r2
    c498:	e13fe604 	addi	r4,fp,-104
    c49c:	2085883a 	add	r2,r4,r2
    c4a0:	10800704 	addi	r2,r2,28
    c4a4:	10c00015 	stw	r3,0(r2)
            chunk[j] |= (uint32_t)(*(msg++)) << 24;
    c4a8:	e0bffd17 	ldw	r2,-12(fp)
    c4ac:	10c00044 	addi	r3,r2,1
    c4b0:	e0fffd15 	stw	r3,-12(fp)
    c4b4:	10800003 	ldbu	r2,0(r2)
    c4b8:	10803fcc 	andi	r2,r2,255
    c4bc:	1006963a 	slli	r3,r2,24
    c4c0:	e0bfe717 	ldw	r2,-100(fp)
    c4c4:	1085883a 	add	r2,r2,r2
    c4c8:	1085883a 	add	r2,r2,r2
    c4cc:	e17fe604 	addi	r5,fp,-104
    c4d0:	2885883a 	add	r2,r5,r2
    c4d4:	10800704 	addi	r2,r2,28
    c4d8:	10800017 	ldw	r2,0(r2)
    c4dc:	10c6b03a 	or	r3,r2,r3
    c4e0:	e0bfe717 	ldw	r2,-100(fp)
    c4e4:	1085883a 	add	r2,r2,r2
    c4e8:	1085883a 	add	r2,r2,r2
    c4ec:	e13fe604 	addi	r4,fp,-104
    c4f0:	2085883a 	add	r2,r4,r2
    c4f4:	10800704 	addi	r2,r2,28
    c4f8:	10c00015 	stw	r3,0(r2)
    uint32_t digest[5] = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0UL};

    for (i = 0; i < (msg_len >> 6); ++i) {
        uint32_t chunk[16];

        for (j = 0; j < 16; ++j) {
    c4fc:	e0bfe717 	ldw	r2,-100(fp)
    c500:	10800044 	addi	r2,r2,1
    c504:	e0bfe715 	stw	r2,-100(fp)
    c508:	e0bfe717 	ldw	r2,-100(fp)
    c50c:	10800410 	cmplti	r2,r2,16
    c510:	103faf1e 	bne	r2,zero,c3d0 <__alt_mem_epcs_flash_controller+0xfe0033d0>
            chunk[j] |= (uint32_t)(*(msg++)) << 8;
            chunk[j] |= (uint32_t)(*(msg++)) << 16;
            chunk[j] |= (uint32_t)(*(msg++)) << 24;
        }

        compress(digest, chunk);
    c514:	e0ffed04 	addi	r3,fp,-76
    c518:	e0bfe804 	addi	r2,fp,-96
    c51c:	180b883a 	mov	r5,r3
    c520:	1009883a 	mov	r4,r2
    c524:	00087280 	call	8728 <compress>
{
    uint32_t i;
    int j;
    uint32_t digest[5] = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0UL};

    for (i = 0; i < (msg_len >> 6); ++i) {
    c528:	e0bfe617 	ldw	r2,-104(fp)
    c52c:	10800044 	addi	r2,r2,1
    c530:	e0bfe615 	stw	r2,-104(fp)
    c534:	e0bffe17 	ldw	r2,-8(fp)
    c538:	1004d1ba 	srli	r2,r2,6
    c53c:	e0ffe617 	ldw	r3,-104(fp)
    c540:	18bfa136 	bltu	r3,r2,c3c8 <__alt_mem_epcs_flash_controller+0xfe0033c8>
        compress(digest, chunk);
    }

    // Last chunk
    {
        uint32_t chunk[16] = {0};
    c544:	e0bfed04 	addi	r2,fp,-76
    c548:	00c01004 	movi	r3,64
    c54c:	180d883a 	mov	r6,r3
    c550:	000b883a 	mov	r5,zero
    c554:	1009883a 	mov	r4,r2
    c558:	00464200 	call	46420 <memset>

        for (i = 0; i < (msg_len & 63); ++i) {
    c55c:	e03fe615 	stw	zero,-104(fp)
    c560:	00001d06 	br	c5d8 <btc_ripemd160+0x270>
            chunk[i >> 2] ^= (uint32_t)*msg++ << ((i & 3) << 3);
    c564:	e0bffd17 	ldw	r2,-12(fp)
    c568:	10c00044 	addi	r3,r2,1
    c56c:	e0fffd15 	stw	r3,-12(fp)
    c570:	10800003 	ldbu	r2,0(r2)
    c574:	10c03fcc 	andi	r3,r2,255
    c578:	e0bfe617 	ldw	r2,-104(fp)
    c57c:	108000cc 	andi	r2,r2,3
    c580:	100490fa 	slli	r2,r2,3
    c584:	1888983a 	sll	r4,r3,r2
    c588:	e0bfe617 	ldw	r2,-104(fp)
    c58c:	1004d0ba 	srli	r2,r2,2
    c590:	e0ffe617 	ldw	r3,-104(fp)
    c594:	1806d0ba 	srli	r3,r3,2
    c598:	18c7883a 	add	r3,r3,r3
    c59c:	18c7883a 	add	r3,r3,r3
    c5a0:	e17fe604 	addi	r5,fp,-104
    c5a4:	28c7883a 	add	r3,r5,r3
    c5a8:	18c00704 	addi	r3,r3,28
    c5ac:	18c00017 	ldw	r3,0(r3)
    c5b0:	1906f03a 	xor	r3,r3,r4
    c5b4:	1085883a 	add	r2,r2,r2
    c5b8:	1085883a 	add	r2,r2,r2
    c5bc:	e13fe604 	addi	r4,fp,-104
    c5c0:	2085883a 	add	r2,r4,r2
    c5c4:	10800704 	addi	r2,r2,28
    c5c8:	10c00015 	stw	r3,0(r2)

    // Last chunk
    {
        uint32_t chunk[16] = {0};

        for (i = 0; i < (msg_len & 63); ++i) {
    c5cc:	e0bfe617 	ldw	r2,-104(fp)
    c5d0:	10800044 	addi	r2,r2,1
    c5d4:	e0bfe615 	stw	r2,-104(fp)
    c5d8:	e0bffe17 	ldw	r2,-8(fp)
    c5dc:	10800fcc 	andi	r2,r2,63
    c5e0:	e0ffe617 	ldw	r3,-104(fp)
    c5e4:	18bfdf36 	bltu	r3,r2,c564 <__alt_mem_epcs_flash_controller+0xfe003564>
            chunk[i >> 2] ^= (uint32_t)*msg++ << ((i & 3) << 3);
        }

        chunk[(msg_len >> 2) & 15] ^= (uint32_t)1 << (8 * (msg_len & 3) + 7);
    c5e8:	e0bffe17 	ldw	r2,-8(fp)
    c5ec:	1004d0ba 	srli	r2,r2,2
    c5f0:	108003cc 	andi	r2,r2,15
    c5f4:	e0fffe17 	ldw	r3,-8(fp)
    c5f8:	1806d0ba 	srli	r3,r3,2
    c5fc:	18c003cc 	andi	r3,r3,15
    c600:	18c7883a 	add	r3,r3,r3
    c604:	18c7883a 	add	r3,r3,r3
    c608:	e17fe604 	addi	r5,fp,-104
    c60c:	28c7883a 	add	r3,r5,r3
    c610:	18c00704 	addi	r3,r3,28
    c614:	19000017 	ldw	r4,0(r3)
    c618:	e0fffe17 	ldw	r3,-8(fp)
    c61c:	18c000cc 	andi	r3,r3,3
    c620:	180690fa 	slli	r3,r3,3
    c624:	18c001c4 	addi	r3,r3,7
    c628:	01400044 	movi	r5,1
    c62c:	28c6983a 	sll	r3,r5,r3
    c630:	20c6f03a 	xor	r3,r4,r3
    c634:	1085883a 	add	r2,r2,r2
    c638:	1085883a 	add	r2,r2,r2
    c63c:	e13fe604 	addi	r4,fp,-104
    c640:	2085883a 	add	r2,r4,r2
    c644:	10800704 	addi	r2,r2,28
    c648:	10c00015 	stw	r3,0(r2)

        if ((msg_len & 63) > 55) {
    c64c:	e0bffe17 	ldw	r2,-8(fp)
    c650:	10800fcc 	andi	r2,r2,63
    c654:	10800e30 	cmpltui	r2,r2,56
    c658:	10000a1e 	bne	r2,zero,c684 <btc_ripemd160+0x31c>
            compress(digest, chunk);
    c65c:	e0ffed04 	addi	r3,fp,-76
    c660:	e0bfe804 	addi	r2,fp,-96
    c664:	180b883a 	mov	r5,r3
    c668:	1009883a 	mov	r4,r2
    c66c:	00087280 	call	8728 <compress>
            memset(chunk, 0, 64);
    c670:	e0bfed04 	addi	r2,fp,-76
    c674:	01801004 	movi	r6,64
    c678:	000b883a 	mov	r5,zero
    c67c:	1009883a 	mov	r4,r2
    c680:	00464200 	call	46420 <memset>
        }

        chunk[14] = msg_len << 3;
    c684:	e0bffe17 	ldw	r2,-8(fp)
    c688:	100490fa 	slli	r2,r2,3
    c68c:	e0bffb15 	stw	r2,-20(fp)
        chunk[15] = (msg_len >> 29);
    c690:	e0bffe17 	ldw	r2,-8(fp)
    c694:	1004d77a 	srli	r2,r2,29
    c698:	e0bffc15 	stw	r2,-16(fp)
        compress(digest, chunk);
    c69c:	e0ffed04 	addi	r3,fp,-76
    c6a0:	e0bfe804 	addi	r2,fp,-96
    c6a4:	180b883a 	mov	r5,r3
    c6a8:	1009883a 	mov	r4,r2
    c6ac:	00087280 	call	8728 <compress>
    }

    for (i = 0; i < 5; ++i) {
    c6b0:	e03fe615 	stw	zero,-104(fp)
    c6b4:	00003206 	br	c780 <btc_ripemd160+0x418>
        *(hash++) = digest[i];
    c6b8:	e0bfff17 	ldw	r2,-4(fp)
    c6bc:	10c00044 	addi	r3,r2,1
    c6c0:	e0ffff15 	stw	r3,-4(fp)
    c6c4:	e0ffe617 	ldw	r3,-104(fp)
    c6c8:	18c7883a 	add	r3,r3,r3
    c6cc:	18c7883a 	add	r3,r3,r3
    c6d0:	e17fe604 	addi	r5,fp,-104
    c6d4:	28c7883a 	add	r3,r5,r3
    c6d8:	18c00204 	addi	r3,r3,8
    c6dc:	18c00017 	ldw	r3,0(r3)
    c6e0:	10c00005 	stb	r3,0(r2)
        *(hash++) = digest[i] >> 8;
    c6e4:	e0bfff17 	ldw	r2,-4(fp)
    c6e8:	10c00044 	addi	r3,r2,1
    c6ec:	e0ffff15 	stw	r3,-4(fp)
    c6f0:	e0ffe617 	ldw	r3,-104(fp)
    c6f4:	18c7883a 	add	r3,r3,r3
    c6f8:	18c7883a 	add	r3,r3,r3
    c6fc:	e13fe604 	addi	r4,fp,-104
    c700:	20c7883a 	add	r3,r4,r3
    c704:	18c00204 	addi	r3,r3,8
    c708:	18c00017 	ldw	r3,0(r3)
    c70c:	1806d23a 	srli	r3,r3,8
    c710:	10c00005 	stb	r3,0(r2)
        *(hash++) = digest[i] >> 16;
    c714:	e0bfff17 	ldw	r2,-4(fp)
    c718:	10c00044 	addi	r3,r2,1
    c71c:	e0ffff15 	stw	r3,-4(fp)
    c720:	e0ffe617 	ldw	r3,-104(fp)
    c724:	18c7883a 	add	r3,r3,r3
    c728:	18c7883a 	add	r3,r3,r3
    c72c:	e17fe604 	addi	r5,fp,-104
    c730:	28c7883a 	add	r3,r5,r3
    c734:	18c00204 	addi	r3,r3,8
    c738:	18c00017 	ldw	r3,0(r3)
    c73c:	1806d43a 	srli	r3,r3,16
    c740:	10c00005 	stb	r3,0(r2)
        *(hash++) = digest[i] >> 24;
    c744:	e0bfff17 	ldw	r2,-4(fp)
    c748:	10c00044 	addi	r3,r2,1
    c74c:	e0ffff15 	stw	r3,-4(fp)
    c750:	e0ffe617 	ldw	r3,-104(fp)
    c754:	18c7883a 	add	r3,r3,r3
    c758:	18c7883a 	add	r3,r3,r3
    c75c:	e13fe604 	addi	r4,fp,-104
    c760:	20c7883a 	add	r3,r4,r3
    c764:	18c00204 	addi	r3,r3,8
    c768:	18c00017 	ldw	r3,0(r3)
    c76c:	1806d63a 	srli	r3,r3,24
    c770:	10c00005 	stb	r3,0(r2)
        chunk[14] = msg_len << 3;
        chunk[15] = (msg_len >> 29);
        compress(digest, chunk);
    }

    for (i = 0; i < 5; ++i) {
    c774:	e0bfe617 	ldw	r2,-104(fp)
    c778:	10800044 	addi	r2,r2,1
    c77c:	e0bfe615 	stw	r2,-104(fp)
    c780:	e0bfe617 	ldw	r2,-104(fp)
    c784:	10800170 	cmpltui	r2,r2,5
    c788:	103fcb1e 	bne	r2,zero,c6b8 <__alt_mem_epcs_flash_controller+0xfe0036b8>
        *(hash++) = digest[i];
        *(hash++) = digest[i] >> 8;
        *(hash++) = digest[i] >> 16;
        *(hash++) = digest[i] >> 24;
    }
}
    c78c:	0001883a 	nop
    c790:	e037883a 	mov	sp,fp
    c794:	dfc00117 	ldw	ra,4(sp)
    c798:	df000017 	ldw	fp,0(sp)
    c79c:	dec00204 	addi	sp,sp,8
    c7a0:	f800283a 	ret

0000c7a4 <btc_hash_sngl_sha256>:
    sha256_Raw(hashout, SHA256_DIGEST_LENGTH, hashout);
}

//single sha256 hash
LIBBTC_API static inline void btc_hash_sngl_sha256(const unsigned char* datain, size_t length, uint256 hashout)
{
    c7a4:	defffb04 	addi	sp,sp,-20
    c7a8:	dfc00415 	stw	ra,16(sp)
    c7ac:	df000315 	stw	fp,12(sp)
    c7b0:	df000304 	addi	fp,sp,12
    c7b4:	e13ffd15 	stw	r4,-12(fp)
    c7b8:	e17ffe15 	stw	r5,-8(fp)
    c7bc:	e1bfff15 	stw	r6,-4(fp)
    sha256_Raw(datain, length, hashout);
    c7c0:	e1bfff17 	ldw	r6,-4(fp)
    c7c4:	e17ffe17 	ldw	r5,-8(fp)
    c7c8:	e13ffd17 	ldw	r4,-12(fp)
    c7cc:	00041c80 	call	41c8 <sha256_Raw>
}
    c7d0:	0001883a 	nop
    c7d4:	e037883a 	mov	sp,fp
    c7d8:	dfc00117 	ldw	ra,4(sp)
    c7dc:	df000017 	ldw	fp,0(sp)
    c7e0:	dec00204 	addi	sp,sp,8
    c7e4:	f800283a 	ret

0000c7e8 <btc_script_copy_without_op_codeseperator>:
#include "..\include\btc\ripemd160.h"
#include "..\include\btc\serialize.h"


btc_bool btc_script_copy_without_op_codeseperator(const cstring* script_in, cstring* script_out)
{
    c7e8:	deffec04 	addi	sp,sp,-80
    c7ec:	dfc01315 	stw	ra,76(sp)
    c7f0:	df001215 	stw	fp,72(sp)
    c7f4:	ddc01115 	stw	r23,68(sp)
    c7f8:	dd801015 	stw	r22,64(sp)
    c7fc:	dd400f15 	stw	r21,60(sp)
    c800:	dd000e15 	stw	r20,56(sp)
    c804:	dcc00d15 	stw	r19,52(sp)
    c808:	dc800c15 	stw	r18,48(sp)
    c80c:	dc400b15 	stw	r17,44(sp)
    c810:	dc000a15 	stw	r16,40(sp)
    c814:	df001204 	addi	fp,sp,72
    c818:	e13ff515 	stw	r4,-44(fp)
    c81c:	e17ff615 	stw	r5,-40(fp)
    if (script_in->len == 0)
    c820:	e0bff517 	ldw	r2,-44(fp)
    c824:	10800117 	ldw	r2,4(r2)
    c828:	1000021e 	bne	r2,zero,c834 <btc_script_copy_without_op_codeseperator+0x4c>
        return false; /* EOF */
    c82c:	0005883a 	mov	r2,zero
    c830:	0000b206 	br	cafc <btc_script_copy_without_op_codeseperator+0x314>

    struct const_buffer buf = {script_in->str, script_in->len};
    c834:	e0bff517 	ldw	r2,-44(fp)
    c838:	10800017 	ldw	r2,0(r2)
    c83c:	e0bff115 	stw	r2,-60(fp)
    c840:	e0bff517 	ldw	r2,-44(fp)
    c844:	10800117 	ldw	r2,4(r2)
    c848:	e0bff215 	stw	r2,-56(fp)
    unsigned char opcode;
    while (buf.len > 0) {
    c84c:	00009f06 	br	cacc <btc_script_copy_without_op_codeseperator+0x2e4>
        if (!deser_bytes(&opcode, &buf, 1))
    c850:	e0fff104 	addi	r3,fp,-60
    c854:	e0bff304 	addi	r2,fp,-52
    c858:	01800044 	movi	r6,1
    c85c:	180b883a 	mov	r5,r3
    c860:	1009883a 	mov	r4,r2
    c864:	003f5ac0 	call	3f5ac <deser_bytes>
    c868:	10009c26 	beq	r2,zero,cadc <btc_script_copy_without_op_codeseperator+0x2f4>
            goto err_out;

        uint32_t data_len = 0;
    c86c:	e03fee15 	stw	zero,-72(fp)

        if (opcode < OP_PUSHDATA1 && opcode > OP_0) {
    c870:	e0bff303 	ldbu	r2,-52(fp)
    c874:	10803fcc 	andi	r2,r2,255
    c878:	10801328 	cmpgeui	r2,r2,76
    c87c:	10000c1e 	bne	r2,zero,c8b0 <btc_script_copy_without_op_codeseperator+0xc8>
    c880:	e0bff303 	ldbu	r2,-52(fp)
    c884:	10803fcc 	andi	r2,r2,255
    c888:	10000926 	beq	r2,zero,c8b0 <btc_script_copy_without_op_codeseperator+0xc8>
            data_len = opcode;
    c88c:	e0bff303 	ldbu	r2,-52(fp)
    c890:	10803fcc 	andi	r2,r2,255
    c894:	e0bfee15 	stw	r2,-72(fp)
            cstr_append_buf(script_out, &opcode, 1);
    c898:	e0bff304 	addi	r2,fp,-52
    c89c:	01800044 	movi	r6,1
    c8a0:	100b883a 	mov	r5,r2
    c8a4:	e13ff617 	ldw	r4,-40(fp)
    c8a8:	00435100 	call	43510 <cstr_append_buf>
    c8ac:	00004d06 	br	c9e4 <btc_script_copy_without_op_codeseperator+0x1fc>
        } else if (opcode == OP_PUSHDATA1) {
    c8b0:	e0bff303 	ldbu	r2,-52(fp)
    c8b4:	10803fcc 	andi	r2,r2,255
    c8b8:	10801318 	cmpnei	r2,r2,76
    c8bc:	1000151e 	bne	r2,zero,c914 <btc_script_copy_without_op_codeseperator+0x12c>
            uint8_t v8;
            if (!deser_bytes(&v8, &buf, 1))
    c8c0:	e0fff104 	addi	r3,fp,-60
    c8c4:	e0bff344 	addi	r2,fp,-51
    c8c8:	01800044 	movi	r6,1
    c8cc:	180b883a 	mov	r5,r3
    c8d0:	1009883a 	mov	r4,r2
    c8d4:	003f5ac0 	call	3f5ac <deser_bytes>
    c8d8:	10008226 	beq	r2,zero,cae4 <btc_script_copy_without_op_codeseperator+0x2fc>
                goto err_out;
            cstr_append_buf(script_out, &opcode, 1);
    c8dc:	e0bff304 	addi	r2,fp,-52
    c8e0:	01800044 	movi	r6,1
    c8e4:	100b883a 	mov	r5,r2
    c8e8:	e13ff617 	ldw	r4,-40(fp)
    c8ec:	00435100 	call	43510 <cstr_append_buf>
            cstr_append_buf(script_out, &v8, 1);
    c8f0:	e0bff344 	addi	r2,fp,-51
    c8f4:	01800044 	movi	r6,1
    c8f8:	100b883a 	mov	r5,r2
    c8fc:	e13ff617 	ldw	r4,-40(fp)
    c900:	00435100 	call	43510 <cstr_append_buf>
            data_len = v8;
    c904:	e0bff343 	ldbu	r2,-51(fp)
    c908:	10803fcc 	andi	r2,r2,255
    c90c:	e0bfee15 	stw	r2,-72(fp)
    c910:	00003406 	br	c9e4 <btc_script_copy_without_op_codeseperator+0x1fc>
        } else if (opcode == OP_PUSHDATA2) {
    c914:	e0bff303 	ldbu	r2,-52(fp)
    c918:	10803fcc 	andi	r2,r2,255
    c91c:	10801358 	cmpnei	r2,r2,77
    c920:	1000141e 	bne	r2,zero,c974 <btc_script_copy_without_op_codeseperator+0x18c>
            uint16_t v16;
            if (!deser_u16(&v16, &buf))
    c924:	e0fff104 	addi	r3,fp,-60
    c928:	e0bff384 	addi	r2,fp,-50
    c92c:	180b883a 	mov	r5,r3
    c930:	1009883a 	mov	r4,r2
    c934:	003f6500 	call	3f650 <deser_u16>
    c938:	10006c26 	beq	r2,zero,caec <btc_script_copy_without_op_codeseperator+0x304>
                goto err_out;
            cstr_append_buf(script_out, &opcode, 1);
    c93c:	e0bff304 	addi	r2,fp,-52
    c940:	01800044 	movi	r6,1
    c944:	100b883a 	mov	r5,r2
    c948:	e13ff617 	ldw	r4,-40(fp)
    c94c:	00435100 	call	43510 <cstr_append_buf>
            cstr_append_buf(script_out, &v16, 2);
    c950:	e0bff384 	addi	r2,fp,-50
    c954:	01800084 	movi	r6,2
    c958:	100b883a 	mov	r5,r2
    c95c:	e13ff617 	ldw	r4,-40(fp)
    c960:	00435100 	call	43510 <cstr_append_buf>
            data_len = v16;
    c964:	e0bff38b 	ldhu	r2,-50(fp)
    c968:	10bfffcc 	andi	r2,r2,65535
    c96c:	e0bfee15 	stw	r2,-72(fp)
    c970:	00001c06 	br	c9e4 <btc_script_copy_without_op_codeseperator+0x1fc>
        } else if (opcode == OP_PUSHDATA4) {
    c974:	e0bff303 	ldbu	r2,-52(fp)
    c978:	10803fcc 	andi	r2,r2,255
    c97c:	10801398 	cmpnei	r2,r2,78
    c980:	1000131e 	bne	r2,zero,c9d0 <btc_script_copy_without_op_codeseperator+0x1e8>
            uint32_t v32;
            if (!deser_u32(&v32, &buf))
    c984:	e0fff104 	addi	r3,fp,-60
    c988:	e0bff404 	addi	r2,fp,-48
    c98c:	180b883a 	mov	r5,r3
    c990:	1009883a 	mov	r4,r2
    c994:	003f7000 	call	3f700 <deser_u32>
    c998:	10005626 	beq	r2,zero,caf4 <btc_script_copy_without_op_codeseperator+0x30c>
                goto err_out;
            cstr_append_buf(script_out, &opcode, 1);
    c99c:	e0bff304 	addi	r2,fp,-52
    c9a0:	01800044 	movi	r6,1
    c9a4:	100b883a 	mov	r5,r2
    c9a8:	e13ff617 	ldw	r4,-40(fp)
    c9ac:	00435100 	call	43510 <cstr_append_buf>
            cstr_append_buf(script_out, &v32, 5);
    c9b0:	e0bff404 	addi	r2,fp,-48
    c9b4:	01800144 	movi	r6,5
    c9b8:	100b883a 	mov	r5,r2
    c9bc:	e13ff617 	ldw	r4,-40(fp)
    c9c0:	00435100 	call	43510 <cstr_append_buf>
            data_len = v32;
    c9c4:	e0bff417 	ldw	r2,-48(fp)
    c9c8:	e0bfee15 	stw	r2,-72(fp)
    c9cc:	00000506 	br	c9e4 <btc_script_copy_without_op_codeseperator+0x1fc>
        } else if (opcode == OP_CODESEPARATOR)
    c9d0:	e0bff303 	ldbu	r2,-52(fp)
    c9d4:	10803fcc 	andi	r2,r2,255
    c9d8:	10802ad8 	cmpnei	r2,r2,171
    c9dc:	1000011e 	bne	r2,zero,c9e4 <btc_script_copy_without_op_codeseperator+0x1fc>
            continue;
    c9e0:	00003a06 	br	cacc <btc_script_copy_without_op_codeseperator+0x2e4>

        if (data_len > 0) {
    c9e4:	e0bfee17 	ldw	r2,-72(fp)
    c9e8:	10003326 	beq	r2,zero,cab8 <btc_script_copy_without_op_codeseperator+0x2d0>
    c9ec:	d805883a 	mov	r2,sp
    c9f0:	e0bff715 	stw	r2,-36(fp)
            assert(data_len < 16777215); //limit max push to 0xFFFFFF
    c9f4:	e0ffee17 	ldw	r3,-72(fp)
    c9f8:	00804034 	movhi	r2,256
    c9fc:	10bfff84 	addi	r2,r2,-2
    ca00:	10c0082e 	bgeu	r2,r3,ca24 <btc_script_copy_without_op_codeseperator+0x23c>
    ca04:	01c00174 	movhi	r7,5
    ca08:	39d19004 	addi	r7,r7,17984
    ca0c:	01800174 	movhi	r6,5
    ca10:	3191be04 	addi	r6,r6,18168
    ca14:	01401404 	movi	r5,80
    ca18:	01000174 	movhi	r4,5
    ca1c:	21119504 	addi	r4,r4,18004
    ca20:	0045fec0 	call	45fec <__assert_func>
            unsigned char bufpush[data_len];
    ca24:	e0bfee17 	ldw	r2,-72(fp)
    ca28:	1007883a 	mov	r3,r2
    ca2c:	18ffffc4 	addi	r3,r3,-1
    ca30:	e0ffef15 	stw	r3,-68(fp)
    ca34:	1029883a 	mov	r20,r2
    ca38:	002b883a 	mov	r21,zero
    ca3c:	a006d77a 	srli	r3,r20,29
    ca40:	a82290fa 	slli	r17,r21,3
    ca44:	1c62b03a 	or	r17,r3,r17
    ca48:	a02090fa 	slli	r16,r20,3
    ca4c:	102d883a 	mov	r22,r2
    ca50:	002f883a 	mov	r23,zero
    ca54:	b006d77a 	srli	r3,r22,29
    ca58:	b82690fa 	slli	r19,r23,3
    ca5c:	1ce6b03a 	or	r19,r3,r19
    ca60:	b02490fa 	slli	r18,r22,3
    ca64:	108000c4 	addi	r2,r2,3
    ca68:	1004d0ba 	srli	r2,r2,2
    ca6c:	1085883a 	add	r2,r2,r2
    ca70:	1085883a 	add	r2,r2,r2
    ca74:	d8b7c83a 	sub	sp,sp,r2
    ca78:	d805883a 	mov	r2,sp
    ca7c:	1005883a 	mov	r2,r2
    ca80:	e0bff015 	stw	r2,-64(fp)
            deser_bytes(&bufpush, &buf, data_len);
    ca84:	e0bff017 	ldw	r2,-64(fp)
    ca88:	e0fff104 	addi	r3,fp,-60
    ca8c:	e1bfee17 	ldw	r6,-72(fp)
    ca90:	180b883a 	mov	r5,r3
    ca94:	1009883a 	mov	r4,r2
    ca98:	003f5ac0 	call	3f5ac <deser_bytes>
            cstr_append_buf(script_out, &bufpush, data_len);
    ca9c:	e0bff017 	ldw	r2,-64(fp)
    caa0:	e1bfee17 	ldw	r6,-72(fp)
    caa4:	100b883a 	mov	r5,r2
    caa8:	e13ff617 	ldw	r4,-40(fp)
    caac:	00435100 	call	43510 <cstr_append_buf>
    cab0:	e6fff717 	ldw	sp,-36(fp)
    cab4:	00000506 	br	cacc <btc_script_copy_without_op_codeseperator+0x2e4>
        } else
            cstr_append_buf(script_out, &opcode, 1);
    cab8:	e0bff304 	addi	r2,fp,-52
    cabc:	01800044 	movi	r6,1
    cac0:	100b883a 	mov	r5,r2
    cac4:	e13ff617 	ldw	r4,-40(fp)
    cac8:	00435100 	call	43510 <cstr_append_buf>
    if (script_in->len == 0)
        return false; /* EOF */

    struct const_buffer buf = {script_in->str, script_in->len};
    unsigned char opcode;
    while (buf.len > 0) {
    cacc:	e0bff217 	ldw	r2,-56(fp)
    cad0:	103f5f1e 	bne	r2,zero,c850 <__alt_mem_epcs_flash_controller+0xfe003850>
            cstr_append_buf(script_out, &bufpush, data_len);
        } else
            cstr_append_buf(script_out, &opcode, 1);
    }

    return true;
    cad4:	00800044 	movi	r2,1
    cad8:	00000806 	br	cafc <btc_script_copy_without_op_codeseperator+0x314>

    struct const_buffer buf = {script_in->str, script_in->len};
    unsigned char opcode;
    while (buf.len > 0) {
        if (!deser_bytes(&opcode, &buf, 1))
            goto err_out;
    cadc:	0001883a 	nop
    cae0:	00000506 	br	caf8 <btc_script_copy_without_op_codeseperator+0x310>
            data_len = opcode;
            cstr_append_buf(script_out, &opcode, 1);
        } else if (opcode == OP_PUSHDATA1) {
            uint8_t v8;
            if (!deser_bytes(&v8, &buf, 1))
                goto err_out;
    cae4:	0001883a 	nop
    cae8:	00000306 	br	caf8 <btc_script_copy_without_op_codeseperator+0x310>
            cstr_append_buf(script_out, &v8, 1);
            data_len = v8;
        } else if (opcode == OP_PUSHDATA2) {
            uint16_t v16;
            if (!deser_u16(&v16, &buf))
                goto err_out;
    caec:	0001883a 	nop
    caf0:	00000106 	br	caf8 <btc_script_copy_without_op_codeseperator+0x310>
            cstr_append_buf(script_out, &v16, 2);
            data_len = v16;
        } else if (opcode == OP_PUSHDATA4) {
            uint32_t v32;
            if (!deser_u32(&v32, &buf))
                goto err_out;
    caf4:	0001883a 	nop
    }

    return true;

err_out:
    return false;
    caf8:	0005883a 	mov	r2,zero
}
    cafc:	e6fff804 	addi	sp,fp,-32
    cb00:	dfc00917 	ldw	ra,36(sp)
    cb04:	df000817 	ldw	fp,32(sp)
    cb08:	ddc00717 	ldw	r23,28(sp)
    cb0c:	dd800617 	ldw	r22,24(sp)
    cb10:	dd400517 	ldw	r21,20(sp)
    cb14:	dd000417 	ldw	r20,16(sp)
    cb18:	dcc00317 	ldw	r19,12(sp)
    cb1c:	dc800217 	ldw	r18,8(sp)
    cb20:	dc400117 	ldw	r17,4(sp)
    cb24:	dc000017 	ldw	r16,0(sp)
    cb28:	dec00a04 	addi	sp,sp,40
    cb2c:	f800283a 	ret

0000cb30 <btc_script_op_new>:

btc_script_op* btc_script_op_new()
{
    cb30:	defffd04 	addi	sp,sp,-12
    cb34:	dfc00215 	stw	ra,8(sp)
    cb38:	df000115 	stw	fp,4(sp)
    cb3c:	df000104 	addi	fp,sp,4
    btc_script_op* script_op;
    script_op = btc_calloc(1, sizeof(*script_op));
    cb40:	01400304 	movi	r5,12
    cb44:	01000044 	movi	r4,1
    cb48:	00083000 	call	8300 <btc_calloc>
    cb4c:	e0bfff15 	stw	r2,-4(fp)

    return script_op;
    cb50:	e0bfff17 	ldw	r2,-4(fp)
}
    cb54:	e037883a 	mov	sp,fp
    cb58:	dfc00117 	ldw	ra,4(sp)
    cb5c:	df000017 	ldw	fp,0(sp)
    cb60:	dec00204 	addi	sp,sp,8
    cb64:	f800283a 	ret

0000cb68 <btc_script_op_free>:


void btc_script_op_free(btc_script_op* script_op)
{
    cb68:	defffd04 	addi	sp,sp,-12
    cb6c:	dfc00215 	stw	ra,8(sp)
    cb70:	df000115 	stw	fp,4(sp)
    cb74:	df000104 	addi	fp,sp,4
    cb78:	e13fff15 	stw	r4,-4(fp)
    if (script_op->data) {
    cb7c:	e0bfff17 	ldw	r2,-4(fp)
    cb80:	10800117 	ldw	r2,4(r2)
    cb84:	10000626 	beq	r2,zero,cba0 <btc_script_op_free+0x38>
        btc_free(script_op->data);
    cb88:	e0bfff17 	ldw	r2,-4(fp)
    cb8c:	10800117 	ldw	r2,4(r2)
    cb90:	1009883a 	mov	r4,r2
    cb94:	00083880 	call	8388 <btc_free>
        script_op->data = NULL;
    cb98:	e0bfff17 	ldw	r2,-4(fp)
    cb9c:	10000115 	stw	zero,4(r2)
    }
    script_op->datalen = 0;
    cba0:	e0bfff17 	ldw	r2,-4(fp)
    cba4:	10000215 	stw	zero,8(r2)
    script_op->op = OP_0;
    cba8:	e0bfff17 	ldw	r2,-4(fp)
    cbac:	10000015 	stw	zero,0(r2)
}
    cbb0:	0001883a 	nop
    cbb4:	e037883a 	mov	sp,fp
    cbb8:	dfc00117 	ldw	ra,4(sp)
    cbbc:	df000017 	ldw	fp,0(sp)
    cbc0:	dec00204 	addi	sp,sp,8
    cbc4:	f800283a 	ret

0000cbc8 <btc_script_op_free_cb>:

void btc_script_op_free_cb(void* data)
{
    cbc8:	defffc04 	addi	sp,sp,-16
    cbcc:	dfc00315 	stw	ra,12(sp)
    cbd0:	df000215 	stw	fp,8(sp)
    cbd4:	df000204 	addi	fp,sp,8
    cbd8:	e13fff15 	stw	r4,-4(fp)
    btc_script_op* script_op = data;
    cbdc:	e0bfff17 	ldw	r2,-4(fp)
    cbe0:	e0bffe15 	stw	r2,-8(fp)
    btc_script_op_free(script_op);
    cbe4:	e13ffe17 	ldw	r4,-8(fp)
    cbe8:	000cb680 	call	cb68 <btc_script_op_free>

    btc_free(script_op);
    cbec:	e13ffe17 	ldw	r4,-8(fp)
    cbf0:	00083880 	call	8388 <btc_free>
}
    cbf4:	0001883a 	nop
    cbf8:	e037883a 	mov	sp,fp
    cbfc:	dfc00117 	ldw	ra,4(sp)
    cc00:	df000017 	ldw	fp,0(sp)
    cc04:	dec00204 	addi	sp,sp,8
    cc08:	f800283a 	ret

0000cc0c <btc_script_get_ops>:

btc_bool btc_script_get_ops(const cstring* script_in, vector* ops_out)
{
    cc0c:	defff604 	addi	sp,sp,-40
    cc10:	dfc00915 	stw	ra,36(sp)
    cc14:	df000815 	stw	fp,32(sp)
    cc18:	df000804 	addi	fp,sp,32
    cc1c:	e13ffe15 	stw	r4,-8(fp)
    cc20:	e17fff15 	stw	r5,-4(fp)
    if (script_in->len == 0)
    cc24:	e0bffe17 	ldw	r2,-8(fp)
    cc28:	10800117 	ldw	r2,4(r2)
    cc2c:	1000021e 	bne	r2,zero,cc38 <btc_script_get_ops+0x2c>
        return false; /* EOF */
    cc30:	0005883a 	mov	r2,zero
    cc34:	00007806 	br	ce18 <btc_script_get_ops+0x20c>

    struct const_buffer buf = {script_in->str, script_in->len};
    cc38:	e0bffe17 	ldw	r2,-8(fp)
    cc3c:	10800017 	ldw	r2,0(r2)
    cc40:	e0bffa15 	stw	r2,-24(fp)
    cc44:	e0bffe17 	ldw	r2,-8(fp)
    cc48:	10800117 	ldw	r2,4(r2)
    cc4c:	e0bffb15 	stw	r2,-20(fp)
    unsigned char opcode;

    btc_script_op* op = NULL;
    cc50:	e03ff915 	stw	zero,-28(fp)
    while (buf.len > 0) {
    cc54:	00006006 	br	cdd8 <btc_script_get_ops+0x1cc>
        op = btc_script_op_new();
    cc58:	000cb300 	call	cb30 <btc_script_op_new>
    cc5c:	e0bff915 	stw	r2,-28(fp)

        if (!deser_bytes(&opcode, &buf, 1))
    cc60:	e0fffa04 	addi	r3,fp,-24
    cc64:	e0bffc04 	addi	r2,fp,-16
    cc68:	01800044 	movi	r6,1
    cc6c:	180b883a 	mov	r5,r3
    cc70:	1009883a 	mov	r4,r2
    cc74:	003f5ac0 	call	3f5ac <deser_bytes>
    cc78:	10005b26 	beq	r2,zero,cde8 <btc_script_get_ops+0x1dc>
            goto err_out;

        op->op = opcode;
    cc7c:	e0bffc03 	ldbu	r2,-16(fp)
    cc80:	10c03fcc 	andi	r3,r2,255
    cc84:	e0bff917 	ldw	r2,-28(fp)
    cc88:	10c00015 	stw	r3,0(r2)

        uint32_t data_len;

        if (opcode < OP_PUSHDATA1) {
    cc8c:	e0bffc03 	ldbu	r2,-16(fp)
    cc90:	10803fcc 	andi	r2,r2,255
    cc94:	10801328 	cmpgeui	r2,r2,76
    cc98:	1000041e 	bne	r2,zero,ccac <btc_script_get_ops+0xa0>
            data_len = opcode;
    cc9c:	e0bffc03 	ldbu	r2,-16(fp)
    cca0:	10803fcc 	andi	r2,r2,255
    cca4:	e0bff815 	stw	r2,-32(fp)
    cca8:	00002e06 	br	cd64 <btc_script_get_ops+0x158>
        } else if (opcode == OP_PUSHDATA1) {
    ccac:	e0bffc03 	ldbu	r2,-16(fp)
    ccb0:	10803fcc 	andi	r2,r2,255
    ccb4:	10801318 	cmpnei	r2,r2,76
    ccb8:	10000b1e 	bne	r2,zero,cce8 <btc_script_get_ops+0xdc>
            uint8_t v8;
            if (!deser_bytes(&v8, &buf, 1))
    ccbc:	e0fffa04 	addi	r3,fp,-24
    ccc0:	e0bffc44 	addi	r2,fp,-15
    ccc4:	01800044 	movi	r6,1
    ccc8:	180b883a 	mov	r5,r3
    cccc:	1009883a 	mov	r4,r2
    ccd0:	003f5ac0 	call	3f5ac <deser_bytes>
    ccd4:	10004626 	beq	r2,zero,cdf0 <btc_script_get_ops+0x1e4>
                goto err_out;
            data_len = v8;
    ccd8:	e0bffc43 	ldbu	r2,-15(fp)
    ccdc:	10803fcc 	andi	r2,r2,255
    cce0:	e0bff815 	stw	r2,-32(fp)
    cce4:	00001f06 	br	cd64 <btc_script_get_ops+0x158>
        } else if (opcode == OP_PUSHDATA2) {
    cce8:	e0bffc03 	ldbu	r2,-16(fp)
    ccec:	10803fcc 	andi	r2,r2,255
    ccf0:	10801358 	cmpnei	r2,r2,77
    ccf4:	10000a1e 	bne	r2,zero,cd20 <btc_script_get_ops+0x114>
            uint16_t v16;
            if (!deser_u16(&v16, &buf))
    ccf8:	e0fffa04 	addi	r3,fp,-24
    ccfc:	e0bffc84 	addi	r2,fp,-14
    cd00:	180b883a 	mov	r5,r3
    cd04:	1009883a 	mov	r4,r2
    cd08:	003f6500 	call	3f650 <deser_u16>
    cd0c:	10003a26 	beq	r2,zero,cdf8 <btc_script_get_ops+0x1ec>
                goto err_out;
            data_len = v16;
    cd10:	e0bffc8b 	ldhu	r2,-14(fp)
    cd14:	10bfffcc 	andi	r2,r2,65535
    cd18:	e0bff815 	stw	r2,-32(fp)
    cd1c:	00001106 	br	cd64 <btc_script_get_ops+0x158>
        } else if (opcode == OP_PUSHDATA4) {
    cd20:	e0bffc03 	ldbu	r2,-16(fp)
    cd24:	10803fcc 	andi	r2,r2,255
    cd28:	10801398 	cmpnei	r2,r2,78
    cd2c:	1000091e 	bne	r2,zero,cd54 <btc_script_get_ops+0x148>
            uint32_t v32;
            if (!deser_u32(&v32, &buf))
    cd30:	e0fffa04 	addi	r3,fp,-24
    cd34:	e0bffd04 	addi	r2,fp,-12
    cd38:	180b883a 	mov	r5,r3
    cd3c:	1009883a 	mov	r4,r2
    cd40:	003f7000 	call	3f700 <deser_u32>
    cd44:	10002e26 	beq	r2,zero,ce00 <btc_script_get_ops+0x1f4>
                goto err_out;
            data_len = v32;
    cd48:	e0bffd17 	ldw	r2,-12(fp)
    cd4c:	e0bff815 	stw	r2,-32(fp)
    cd50:	00000406 	br	cd64 <btc_script_get_ops+0x158>
        } else {
            vector_add(ops_out, op);
    cd54:	e17ff917 	ldw	r5,-28(fp)
    cd58:	e13fff17 	ldw	r4,-4(fp)
    cd5c:	0040d680 	call	40d68 <vector_add>
            continue;
    cd60:	00001d06 	br	cdd8 <btc_script_get_ops+0x1cc>
        }

        // don't alloc a push buffer if there is no more data available
        if (buf.len == 0 || data_len > buf.len) {
    cd64:	e0bffb17 	ldw	r2,-20(fp)
    cd68:	10002826 	beq	r2,zero,ce0c <btc_script_get_ops+0x200>
    cd6c:	e0fffb17 	ldw	r3,-20(fp)
    cd70:	e0bff817 	ldw	r2,-32(fp)
    cd74:	18802536 	bltu	r3,r2,ce0c <btc_script_get_ops+0x200>
            goto err_out;
        }

        op->data = btc_calloc(1, data_len);
    cd78:	e17ff817 	ldw	r5,-32(fp)
    cd7c:	01000044 	movi	r4,1
    cd80:	00083000 	call	8300 <btc_calloc>
    cd84:	1007883a 	mov	r3,r2
    cd88:	e0bff917 	ldw	r2,-28(fp)
    cd8c:	10c00115 	stw	r3,4(r2)
        memcpy(op->data, buf.p, data_len);
    cd90:	e0bff917 	ldw	r2,-28(fp)
    cd94:	10800117 	ldw	r2,4(r2)
    cd98:	e0fffa17 	ldw	r3,-24(fp)
    cd9c:	e1bff817 	ldw	r6,-32(fp)
    cda0:	180b883a 	mov	r5,r3
    cda4:	1009883a 	mov	r4,r2
    cda8:	00463980 	call	46398 <memcpy>
        op->datalen = data_len;
    cdac:	e0bff917 	ldw	r2,-28(fp)
    cdb0:	e0fff817 	ldw	r3,-32(fp)
    cdb4:	10c00215 	stw	r3,8(r2)

        vector_add(ops_out, op);
    cdb8:	e17ff917 	ldw	r5,-28(fp)
    cdbc:	e13fff17 	ldw	r4,-4(fp)
    cdc0:	0040d680 	call	40d68 <vector_add>

        if (!deser_skip(&buf, data_len))
    cdc4:	e0bffa04 	addi	r2,fp,-24
    cdc8:	e17ff817 	ldw	r5,-32(fp)
    cdcc:	1009883a 	mov	r4,r2
    cdd0:	003f52c0 	call	3f52c <deser_skip>
    cdd4:	10000c26 	beq	r2,zero,ce08 <btc_script_get_ops+0x1fc>

    struct const_buffer buf = {script_in->str, script_in->len};
    unsigned char opcode;

    btc_script_op* op = NULL;
    while (buf.len > 0) {
    cdd8:	e0bffb17 	ldw	r2,-20(fp)
    cddc:	103f9e1e 	bne	r2,zero,cc58 <__alt_mem_epcs_flash_controller+0xfe003c58>

        if (!deser_skip(&buf, data_len))
            goto err_out;
    }

    return true;
    cde0:	00800044 	movi	r2,1
    cde4:	00000c06 	br	ce18 <btc_script_get_ops+0x20c>
    btc_script_op* op = NULL;
    while (buf.len > 0) {
        op = btc_script_op_new();

        if (!deser_bytes(&opcode, &buf, 1))
            goto err_out;
    cde8:	0001883a 	nop
    cdec:	00000706 	br	ce0c <btc_script_get_ops+0x200>
        if (opcode < OP_PUSHDATA1) {
            data_len = opcode;
        } else if (opcode == OP_PUSHDATA1) {
            uint8_t v8;
            if (!deser_bytes(&v8, &buf, 1))
                goto err_out;
    cdf0:	0001883a 	nop
    cdf4:	00000506 	br	ce0c <btc_script_get_ops+0x200>
            data_len = v8;
        } else if (opcode == OP_PUSHDATA2) {
            uint16_t v16;
            if (!deser_u16(&v16, &buf))
                goto err_out;
    cdf8:	0001883a 	nop
    cdfc:	00000306 	br	ce0c <btc_script_get_ops+0x200>
            data_len = v16;
        } else if (opcode == OP_PUSHDATA4) {
            uint32_t v32;
            if (!deser_u32(&v32, &buf))
                goto err_out;
    ce00:	0001883a 	nop
    ce04:	00000106 	br	ce0c <btc_script_get_ops+0x200>
        op->datalen = data_len;

        vector_add(ops_out, op);

        if (!deser_skip(&buf, data_len))
            goto err_out;
    ce08:	0001883a 	nop
    }

    return true;
err_out:
    btc_script_op_free(op);
    ce0c:	e13ff917 	ldw	r4,-28(fp)
    ce10:	000cb680 	call	cb68 <btc_script_op_free>
    return false;
    ce14:	0005883a 	mov	r2,zero
}
    ce18:	e037883a 	mov	sp,fp
    ce1c:	dfc00117 	ldw	ra,4(sp)
    ce20:	df000017 	ldw	fp,0(sp)
    ce24:	dec00204 	addi	sp,sp,8
    ce28:	f800283a 	ret

0000ce2c <btc_script_is_pushdata>:

static inline btc_bool btc_script_is_pushdata(const enum opcodetype op)
{
    ce2c:	defffe04 	addi	sp,sp,-8
    ce30:	df000115 	stw	fp,4(sp)
    ce34:	df000104 	addi	fp,sp,4
    ce38:	e13fff15 	stw	r4,-4(fp)
    return (op <= OP_PUSHDATA4);
    ce3c:	e0bfff17 	ldw	r2,-4(fp)
    ce40:	108013f0 	cmpltui	r2,r2,79
}
    ce44:	e037883a 	mov	sp,fp
    ce48:	df000017 	ldw	fp,0(sp)
    ce4c:	dec00104 	addi	sp,sp,4
    ce50:	f800283a 	ret

0000ce54 <btc_script_is_op>:

static btc_bool btc_script_is_op(const btc_script_op* op, enum opcodetype opcode)
{
    ce54:	defffd04 	addi	sp,sp,-12
    ce58:	df000215 	stw	fp,8(sp)
    ce5c:	df000204 	addi	fp,sp,8
    ce60:	e13ffe15 	stw	r4,-8(fp)
    ce64:	e17fff15 	stw	r5,-4(fp)
    return (op->op == opcode);
    ce68:	e0bffe17 	ldw	r2,-8(fp)
    ce6c:	10c00017 	ldw	r3,0(r2)
    ce70:	e0bfff17 	ldw	r2,-4(fp)
    ce74:	1885003a 	cmpeq	r2,r3,r2
}
    ce78:	e037883a 	mov	sp,fp
    ce7c:	df000017 	ldw	fp,0(sp)
    ce80:	dec00104 	addi	sp,sp,4
    ce84:	f800283a 	ret

0000ce88 <btc_script_is_op_pubkey>:

static btc_bool btc_script_is_op_pubkey(const btc_script_op* op)
{
    ce88:	defffd04 	addi	sp,sp,-12
    ce8c:	dfc00215 	stw	ra,8(sp)
    ce90:	df000115 	stw	fp,4(sp)
    ce94:	df000104 	addi	fp,sp,4
    ce98:	e13fff15 	stw	r4,-4(fp)
    if (!btc_script_is_pushdata(op->op))
    ce9c:	e0bfff17 	ldw	r2,-4(fp)
    cea0:	10800017 	ldw	r2,0(r2)
    cea4:	1009883a 	mov	r4,r2
    cea8:	000ce2c0 	call	ce2c <btc_script_is_pushdata>
    ceac:	10803fcc 	andi	r2,r2,255
    ceb0:	1000021e 	bne	r2,zero,cebc <btc_script_is_op_pubkey+0x34>
        return false;
    ceb4:	0005883a 	mov	r2,zero
    ceb8:	00001706 	br	cf18 <btc_script_is_op_pubkey+0x90>
    if (op->datalen != BTC_ECKEY_COMPRESSED_LENGTH && op->datalen != BTC_ECKEY_UNCOMPRESSED_LENGTH)
    cebc:	e0bfff17 	ldw	r2,-4(fp)
    cec0:	10800217 	ldw	r2,8(r2)
    cec4:	10800860 	cmpeqi	r2,r2,33
    cec8:	1000061e 	bne	r2,zero,cee4 <btc_script_is_op_pubkey+0x5c>
    cecc:	e0bfff17 	ldw	r2,-4(fp)
    ced0:	10800217 	ldw	r2,8(r2)
    ced4:	10801060 	cmpeqi	r2,r2,65
    ced8:	1000021e 	bne	r2,zero,cee4 <btc_script_is_op_pubkey+0x5c>
        return false;
    cedc:	0005883a 	mov	r2,zero
    cee0:	00000d06 	br	cf18 <btc_script_is_op_pubkey+0x90>
    if (btc_pubkey_get_length(op->data[0]) != op->datalen) {
    cee4:	e0bfff17 	ldw	r2,-4(fp)
    cee8:	10800117 	ldw	r2,4(r2)
    ceec:	10800003 	ldbu	r2,0(r2)
    cef0:	10803fcc 	andi	r2,r2,255
    cef4:	1009883a 	mov	r4,r2
    cef8:	000726c0 	call	726c <btc_pubkey_get_length>
    cefc:	1007883a 	mov	r3,r2
    cf00:	e0bfff17 	ldw	r2,-4(fp)
    cf04:	10800217 	ldw	r2,8(r2)
    cf08:	18800226 	beq	r3,r2,cf14 <btc_script_is_op_pubkey+0x8c>
        return false;
    cf0c:	0005883a 	mov	r2,zero
    cf10:	00000106 	br	cf18 <btc_script_is_op_pubkey+0x90>
    }
    return true;
    cf14:	00800044 	movi	r2,1
}
    cf18:	e037883a 	mov	sp,fp
    cf1c:	dfc00117 	ldw	ra,4(sp)
    cf20:	df000017 	ldw	fp,0(sp)
    cf24:	dec00204 	addi	sp,sp,8
    cf28:	f800283a 	ret

0000cf2c <btc_script_is_op_pubkeyhash>:

static btc_bool btc_script_is_op_pubkeyhash(const btc_script_op* op)
{
    cf2c:	defffd04 	addi	sp,sp,-12
    cf30:	dfc00215 	stw	ra,8(sp)
    cf34:	df000115 	stw	fp,4(sp)
    cf38:	df000104 	addi	fp,sp,4
    cf3c:	e13fff15 	stw	r4,-4(fp)
    if (!btc_script_is_pushdata(op->op))
    cf40:	e0bfff17 	ldw	r2,-4(fp)
    cf44:	10800017 	ldw	r2,0(r2)
    cf48:	1009883a 	mov	r4,r2
    cf4c:	000ce2c0 	call	ce2c <btc_script_is_pushdata>
    cf50:	10803fcc 	andi	r2,r2,255
    cf54:	1000021e 	bne	r2,zero,cf60 <btc_script_is_op_pubkeyhash+0x34>
        return false;
    cf58:	0005883a 	mov	r2,zero
    cf5c:	00000706 	br	cf7c <btc_script_is_op_pubkeyhash+0x50>
    if (op->datalen != 20)
    cf60:	e0bfff17 	ldw	r2,-4(fp)
    cf64:	10800217 	ldw	r2,8(r2)
    cf68:	10800520 	cmpeqi	r2,r2,20
    cf6c:	1000021e 	bne	r2,zero,cf78 <btc_script_is_op_pubkeyhash+0x4c>
        return false;
    cf70:	0005883a 	mov	r2,zero
    cf74:	00000106 	br	cf7c <btc_script_is_op_pubkeyhash+0x50>
    return true;
    cf78:	00800044 	movi	r2,1
}
    cf7c:	e037883a 	mov	sp,fp
    cf80:	dfc00117 	ldw	ra,4(sp)
    cf84:	df000017 	ldw	fp,0(sp)
    cf88:	dec00204 	addi	sp,sp,8
    cf8c:	f800283a 	ret

0000cf90 <btc_script_is_pubkey>:

// OP_PUBKEY, OP_CHECKSIG
btc_bool btc_script_is_pubkey(const vector* ops, vector* data_out)
{
    cf90:	defffa04 	addi	sp,sp,-24
    cf94:	dfc00515 	stw	ra,20(sp)
    cf98:	df000415 	stw	fp,16(sp)
    cf9c:	df000404 	addi	fp,sp,16
    cfa0:	e13ffe15 	stw	r4,-8(fp)
    cfa4:	e17fff15 	stw	r5,-4(fp)
    if ((ops->len == 2) &&
    cfa8:	e0bffe17 	ldw	r2,-8(fp)
    cfac:	10800117 	ldw	r2,4(r2)
    cfb0:	10800098 	cmpnei	r2,r2,2
    cfb4:	1000291e 	bne	r2,zero,d05c <btc_script_is_pubkey+0xcc>
            btc_script_is_op(vector_idx(ops, 1), OP_CHECKSIG) &&
    cfb8:	e0bffe17 	ldw	r2,-8(fp)
    cfbc:	10800017 	ldw	r2,0(r2)
    cfc0:	10800104 	addi	r2,r2,4
    cfc4:	10800017 	ldw	r2,0(r2)
    cfc8:	01402b04 	movi	r5,172
    cfcc:	1009883a 	mov	r4,r2
    cfd0:	000ce540 	call	ce54 <btc_script_is_op>
}

// OP_PUBKEY, OP_CHECKSIG
btc_bool btc_script_is_pubkey(const vector* ops, vector* data_out)
{
    if ((ops->len == 2) &&
    cfd4:	10803fcc 	andi	r2,r2,255
    cfd8:	10002026 	beq	r2,zero,d05c <btc_script_is_pubkey+0xcc>
            btc_script_is_op(vector_idx(ops, 1), OP_CHECKSIG) &&
            btc_script_is_op_pubkey(vector_idx(ops, 0))) {
    cfdc:	e0bffe17 	ldw	r2,-8(fp)
    cfe0:	10800017 	ldw	r2,0(r2)
    cfe4:	10800017 	ldw	r2,0(r2)
    cfe8:	1009883a 	mov	r4,r2
    cfec:	000ce880 	call	ce88 <btc_script_is_op_pubkey>

// OP_PUBKEY, OP_CHECKSIG
btc_bool btc_script_is_pubkey(const vector* ops, vector* data_out)
{
    if ((ops->len == 2) &&
            btc_script_is_op(vector_idx(ops, 1), OP_CHECKSIG) &&
    cff0:	10803fcc 	andi	r2,r2,255
    cff4:	10001926 	beq	r2,zero,d05c <btc_script_is_pubkey+0xcc>
            btc_script_is_op_pubkey(vector_idx(ops, 0))) {
        if (data_out) {
    cff8:	e0bfff17 	ldw	r2,-4(fp)
    cffc:	10001526 	beq	r2,zero,d054 <btc_script_is_pubkey+0xc4>
            //copy the full pubkey (33 or 65) in case of a non empty vector
            const btc_script_op* op = vector_idx(ops, 0);
    d000:	e0bffe17 	ldw	r2,-8(fp)
    d004:	10800017 	ldw	r2,0(r2)
    d008:	10800017 	ldw	r2,0(r2)
    d00c:	e0bffc15 	stw	r2,-16(fp)
            uint8_t* buffer = btc_calloc(1, op->datalen);
    d010:	e0bffc17 	ldw	r2,-16(fp)
    d014:	10800217 	ldw	r2,8(r2)
    d018:	100b883a 	mov	r5,r2
    d01c:	01000044 	movi	r4,1
    d020:	00083000 	call	8300 <btc_calloc>
    d024:	e0bffd15 	stw	r2,-12(fp)
            memcpy(buffer, op->data, op->datalen);
    d028:	e0bffc17 	ldw	r2,-16(fp)
    d02c:	10c00117 	ldw	r3,4(r2)
    d030:	e0bffc17 	ldw	r2,-16(fp)
    d034:	10800217 	ldw	r2,8(r2)
    d038:	100d883a 	mov	r6,r2
    d03c:	180b883a 	mov	r5,r3
    d040:	e13ffd17 	ldw	r4,-12(fp)
    d044:	00463980 	call	46398 <memcpy>
            vector_add(data_out, buffer);
    d048:	e17ffd17 	ldw	r5,-12(fp)
    d04c:	e13fff17 	ldw	r4,-4(fp)
    d050:	0040d680 	call	40d68 <vector_add>
        }
        return true;
    d054:	00800044 	movi	r2,1
    d058:	00000106 	br	d060 <btc_script_is_pubkey+0xd0>
    }
    return false;
    d05c:	0005883a 	mov	r2,zero
}
    d060:	e037883a 	mov	sp,fp
    d064:	dfc00117 	ldw	ra,4(sp)
    d068:	df000017 	ldw	fp,0(sp)
    d06c:	dec00204 	addi	sp,sp,8
    d070:	f800283a 	ret

0000d074 <btc_script_is_pubkeyhash>:

// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    d074:	defffa04 	addi	sp,sp,-24
    d078:	dfc00515 	stw	ra,20(sp)
    d07c:	df000415 	stw	fp,16(sp)
    d080:	df000404 	addi	fp,sp,16
    d084:	e13ffe15 	stw	r4,-8(fp)
    d088:	e17fff15 	stw	r5,-4(fp)
    if ((ops->len == 5) &&
    d08c:	e0bffe17 	ldw	r2,-8(fp)
    d090:	10800117 	ldw	r2,4(r2)
    d094:	10800158 	cmpnei	r2,r2,5
    d098:	1000401e 	bne	r2,zero,d19c <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
    d09c:	e0bffe17 	ldw	r2,-8(fp)
    d0a0:	10800017 	ldw	r2,0(r2)
    d0a4:	10800017 	ldw	r2,0(r2)
    d0a8:	01401d84 	movi	r5,118
    d0ac:	1009883a 	mov	r4,r2
    d0b0:	000ce540 	call	ce54 <btc_script_is_op>
}

// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    if ((ops->len == 5) &&
    d0b4:	10803fcc 	andi	r2,r2,255
    d0b8:	10003826 	beq	r2,zero,d19c <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
    d0bc:	e0bffe17 	ldw	r2,-8(fp)
    d0c0:	10800017 	ldw	r2,0(r2)
    d0c4:	10800104 	addi	r2,r2,4
    d0c8:	10800017 	ldw	r2,0(r2)
    d0cc:	01402a44 	movi	r5,169
    d0d0:	1009883a 	mov	r4,r2
    d0d4:	000ce540 	call	ce54 <btc_script_is_op>

// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    if ((ops->len == 5) &&
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
    d0d8:	10803fcc 	andi	r2,r2,255
    d0dc:	10002f26 	beq	r2,zero,d19c <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
        btc_script_is_op_pubkeyhash(vector_idx(ops, 2)) &&
    d0e0:	e0bffe17 	ldw	r2,-8(fp)
    d0e4:	10800017 	ldw	r2,0(r2)
    d0e8:	10800204 	addi	r2,r2,8
    d0ec:	10800017 	ldw	r2,0(r2)
    d0f0:	1009883a 	mov	r4,r2
    d0f4:	000cf2c0 	call	cf2c <btc_script_is_op_pubkeyhash>
// OP_DUP, OP_HASH160, OP_PUBKEYHASH, OP_EQUALVERIFY, OP_CHECKSIG,
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    if ((ops->len == 5) &&
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
    d0f8:	10803fcc 	andi	r2,r2,255
    d0fc:	10002726 	beq	r2,zero,d19c <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op_pubkeyhash(vector_idx(ops, 2)) &&
        btc_script_is_op(vector_idx(ops, 3), OP_EQUALVERIFY) &&
    d100:	e0bffe17 	ldw	r2,-8(fp)
    d104:	10800017 	ldw	r2,0(r2)
    d108:	10800304 	addi	r2,r2,12
    d10c:	10800017 	ldw	r2,0(r2)
    d110:	01402204 	movi	r5,136
    d114:	1009883a 	mov	r4,r2
    d118:	000ce540 	call	ce54 <btc_script_is_op>
btc_bool btc_script_is_pubkeyhash(const vector* ops, vector* data_out)
{
    if ((ops->len == 5) &&
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
        btc_script_is_op_pubkeyhash(vector_idx(ops, 2)) &&
    d11c:	10803fcc 	andi	r2,r2,255
    d120:	10001e26 	beq	r2,zero,d19c <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 3), OP_EQUALVERIFY) &&
        btc_script_is_op(vector_idx(ops, 4), OP_CHECKSIG)) {
    d124:	e0bffe17 	ldw	r2,-8(fp)
    d128:	10800017 	ldw	r2,0(r2)
    d12c:	10800404 	addi	r2,r2,16
    d130:	10800017 	ldw	r2,0(r2)
    d134:	01402b04 	movi	r5,172
    d138:	1009883a 	mov	r4,r2
    d13c:	000ce540 	call	ce54 <btc_script_is_op>
{
    if ((ops->len == 5) &&
        btc_script_is_op(vector_idx(ops, 0), OP_DUP) &&
        btc_script_is_op(vector_idx(ops, 1), OP_HASH160) &&
        btc_script_is_op_pubkeyhash(vector_idx(ops, 2)) &&
        btc_script_is_op(vector_idx(ops, 3), OP_EQUALVERIFY) &&
    d140:	10803fcc 	andi	r2,r2,255
    d144:	10001526 	beq	r2,zero,d19c <btc_script_is_pubkeyhash+0x128>
        btc_script_is_op(vector_idx(ops, 4), OP_CHECKSIG)) {
        if (data_out) {
    d148:	e0bfff17 	ldw	r2,-4(fp)
    d14c:	10001126 	beq	r2,zero,d194 <btc_script_is_pubkeyhash+0x120>
            //copy the data (hash160) in case of a non empty vector
            const btc_script_op* op = vector_idx(ops, 2);
    d150:	e0bffe17 	ldw	r2,-8(fp)
    d154:	10800017 	ldw	r2,0(r2)
    d158:	10800217 	ldw	r2,8(r2)
    d15c:	e0bffc15 	stw	r2,-16(fp)
            uint8_t* buffer = btc_calloc(1, sizeof(uint160));
    d160:	01400504 	movi	r5,20
    d164:	01000044 	movi	r4,1
    d168:	00083000 	call	8300 <btc_calloc>
    d16c:	e0bffd15 	stw	r2,-12(fp)
            memcpy(buffer, op->data, sizeof(uint160));
    d170:	e0bffc17 	ldw	r2,-16(fp)
    d174:	10800117 	ldw	r2,4(r2)
    d178:	01800504 	movi	r6,20
    d17c:	100b883a 	mov	r5,r2
    d180:	e13ffd17 	ldw	r4,-12(fp)
    d184:	00463980 	call	46398 <memcpy>
            vector_add(data_out, buffer);
    d188:	e17ffd17 	ldw	r5,-12(fp)
    d18c:	e13fff17 	ldw	r4,-4(fp)
    d190:	0040d680 	call	40d68 <vector_add>
        }
        return true;
    d194:	00800044 	movi	r2,1
    d198:	00000106 	br	d1a0 <btc_script_is_pubkeyhash+0x12c>
    }
    return false;
    d19c:	0005883a 	mov	r2,zero
}
    d1a0:	e037883a 	mov	sp,fp
    d1a4:	dfc00117 	ldw	ra,4(sp)
    d1a8:	df000017 	ldw	fp,0(sp)
    d1ac:	dec00204 	addi	sp,sp,8
    d1b0:	f800283a 	ret

0000d1b4 <btc_script_is_scripthash>:

// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
btc_bool btc_script_is_scripthash(const vector* ops, vector* data_out)
{
    d1b4:	defffa04 	addi	sp,sp,-24
    d1b8:	dfc00515 	stw	ra,20(sp)
    d1bc:	df000415 	stw	fp,16(sp)
    d1c0:	df000404 	addi	fp,sp,16
    d1c4:	e13ffe15 	stw	r4,-8(fp)
    d1c8:	e17fff15 	stw	r5,-4(fp)
    if ((ops->len == 3) &&
    d1cc:	e0bffe17 	ldw	r2,-8(fp)
    d1d0:	10800117 	ldw	r2,4(r2)
    d1d4:	108000d8 	cmpnei	r2,r2,3
    d1d8:	10002e1e 	bne	r2,zero,d294 <btc_script_is_scripthash+0xe0>
            btc_script_is_op(vector_idx(ops, 0), OP_HASH160) &&
    d1dc:	e0bffe17 	ldw	r2,-8(fp)
    d1e0:	10800017 	ldw	r2,0(r2)
    d1e4:	10800017 	ldw	r2,0(r2)
    d1e8:	01402a44 	movi	r5,169
    d1ec:	1009883a 	mov	r4,r2
    d1f0:	000ce540 	call	ce54 <btc_script_is_op>
}

// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
btc_bool btc_script_is_scripthash(const vector* ops, vector* data_out)
{
    if ((ops->len == 3) &&
    d1f4:	10803fcc 	andi	r2,r2,255
    d1f8:	10002626 	beq	r2,zero,d294 <btc_script_is_scripthash+0xe0>
            btc_script_is_op(vector_idx(ops, 0), OP_HASH160) &&
            btc_script_is_op_pubkeyhash(vector_idx(ops, 1)) &&
    d1fc:	e0bffe17 	ldw	r2,-8(fp)
    d200:	10800017 	ldw	r2,0(r2)
    d204:	10800104 	addi	r2,r2,4
    d208:	10800017 	ldw	r2,0(r2)
    d20c:	1009883a 	mov	r4,r2
    d210:	000cf2c0 	call	cf2c <btc_script_is_op_pubkeyhash>

// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
btc_bool btc_script_is_scripthash(const vector* ops, vector* data_out)
{
    if ((ops->len == 3) &&
            btc_script_is_op(vector_idx(ops, 0), OP_HASH160) &&
    d214:	10803fcc 	andi	r2,r2,255
    d218:	10001e26 	beq	r2,zero,d294 <btc_script_is_scripthash+0xe0>
            btc_script_is_op_pubkeyhash(vector_idx(ops, 1)) &&
            btc_script_is_op(vector_idx(ops, 2), OP_EQUAL)) {
    d21c:	e0bffe17 	ldw	r2,-8(fp)
    d220:	10800017 	ldw	r2,0(r2)
    d224:	10800204 	addi	r2,r2,8
    d228:	10800017 	ldw	r2,0(r2)
    d22c:	014021c4 	movi	r5,135
    d230:	1009883a 	mov	r4,r2
    d234:	000ce540 	call	ce54 <btc_script_is_op>
// OP_HASH160, OP_PUBKEYHASH, OP_EQUAL
btc_bool btc_script_is_scripthash(const vector* ops, vector* data_out)
{
    if ((ops->len == 3) &&
            btc_script_is_op(vector_idx(ops, 0), OP_HASH160) &&
            btc_script_is_op_pubkeyhash(vector_idx(ops, 1)) &&
    d238:	10803fcc 	andi	r2,r2,255
    d23c:	10001526 	beq	r2,zero,d294 <btc_script_is_scripthash+0xe0>
            btc_script_is_op(vector_idx(ops, 2), OP_EQUAL)) {

        if (data_out) {
    d240:	e0bfff17 	ldw	r2,-4(fp)
    d244:	10001126 	beq	r2,zero,d28c <btc_script_is_scripthash+0xd8>
            //copy the data (hash160) in case of a non empty vector
            const btc_script_op* op = vector_idx(ops, 1);
    d248:	e0bffe17 	ldw	r2,-8(fp)
    d24c:	10800017 	ldw	r2,0(r2)
    d250:	10800117 	ldw	r2,4(r2)
    d254:	e0bffc15 	stw	r2,-16(fp)
            uint8_t* buffer = btc_calloc(1, sizeof(uint160));
    d258:	01400504 	movi	r5,20
    d25c:	01000044 	movi	r4,1
    d260:	00083000 	call	8300 <btc_calloc>
    d264:	e0bffd15 	stw	r2,-12(fp)
            memcpy(buffer, op->data, sizeof(uint160));
    d268:	e0bffc17 	ldw	r2,-16(fp)
    d26c:	10800117 	ldw	r2,4(r2)
    d270:	01800504 	movi	r6,20
    d274:	100b883a 	mov	r5,r2
    d278:	e13ffd17 	ldw	r4,-12(fp)
    d27c:	00463980 	call	46398 <memcpy>
            vector_add(data_out, buffer);
    d280:	e17ffd17 	ldw	r5,-12(fp)
    d284:	e13fff17 	ldw	r4,-4(fp)
    d288:	0040d680 	call	40d68 <vector_add>
        }

        return true;
    d28c:	00800044 	movi	r2,1
    d290:	00000106 	br	d298 <btc_script_is_scripthash+0xe4>
    }
    return false;
    d294:	0005883a 	mov	r2,zero
}
    d298:	e037883a 	mov	sp,fp
    d29c:	dfc00117 	ldw	ra,4(sp)
    d2a0:	df000017 	ldw	fp,0(sp)
    d2a4:	dec00204 	addi	sp,sp,8
    d2a8:	f800283a 	ret

0000d2ac <btc_script_is_op_smallint>:

static btc_bool btc_script_is_op_smallint(const btc_script_op* op)
{
    d2ac:	defffe04 	addi	sp,sp,-8
    d2b0:	df000115 	stw	fp,4(sp)
    d2b4:	df000104 	addi	fp,sp,4
    d2b8:	e13fff15 	stw	r4,-4(fp)
    return ((op->op == OP_0) ||
    d2bc:	e0bfff17 	ldw	r2,-4(fp)
    d2c0:	10800017 	ldw	r2,0(r2)
    d2c4:	10000826 	beq	r2,zero,d2e8 <btc_script_is_op_smallint+0x3c>
            (op->op >= OP_1 && op->op <= OP_16));
    d2c8:	e0bfff17 	ldw	r2,-4(fp)
    d2cc:	10800017 	ldw	r2,0(r2)
    return false;
}

static btc_bool btc_script_is_op_smallint(const btc_script_op* op)
{
    return ((op->op == OP_0) ||
    d2d0:	10801470 	cmpltui	r2,r2,81
    d2d4:	1000061e 	bne	r2,zero,d2f0 <btc_script_is_op_smallint+0x44>
            (op->op >= OP_1 && op->op <= OP_16));
    d2d8:	e0bfff17 	ldw	r2,-4(fp)
    d2dc:	10800017 	ldw	r2,0(r2)
    d2e0:	10801868 	cmpgeui	r2,r2,97
    d2e4:	1000021e 	bne	r2,zero,d2f0 <btc_script_is_op_smallint+0x44>
    return false;
}

static btc_bool btc_script_is_op_smallint(const btc_script_op* op)
{
    return ((op->op == OP_0) ||
    d2e8:	00800044 	movi	r2,1
    d2ec:	00000106 	br	d2f4 <btc_script_is_op_smallint+0x48>
    d2f0:	0005883a 	mov	r2,zero
            (op->op >= OP_1 && op->op <= OP_16));
}
    d2f4:	e037883a 	mov	sp,fp
    d2f8:	df000017 	ldw	fp,0(sp)
    d2fc:	dec00104 	addi	sp,sp,4
    d300:	f800283a 	ret

0000d304 <btc_script_is_multisig>:

btc_bool btc_script_is_multisig(const vector* ops)
{
    d304:	defffc04 	addi	sp,sp,-16
    d308:	dfc00315 	stw	ra,12(sp)
    d30c:	df000215 	stw	fp,8(sp)
    d310:	df000204 	addi	fp,sp,8
    d314:	e13fff15 	stw	r4,-4(fp)
    if ((ops->len < 3) || (ops->len > (16 + 3)) ||
    d318:	e0bfff17 	ldw	r2,-4(fp)
    d31c:	10800117 	ldw	r2,4(r2)
    d320:	108000f0 	cmpltui	r2,r2,3
    d324:	10002a1e 	bne	r2,zero,d3d0 <btc_script_is_multisig+0xcc>
    d328:	e0bfff17 	ldw	r2,-4(fp)
    d32c:	10800117 	ldw	r2,4(r2)
    d330:	10800528 	cmpgeui	r2,r2,20
    d334:	1000261e 	bne	r2,zero,d3d0 <btc_script_is_multisig+0xcc>
        !btc_script_is_op_smallint(vector_idx(ops, 0)) ||
    d338:	e0bfff17 	ldw	r2,-4(fp)
    d33c:	10800017 	ldw	r2,0(r2)
    d340:	10800017 	ldw	r2,0(r2)
    d344:	1009883a 	mov	r4,r2
    d348:	000d2ac0 	call	d2ac <btc_script_is_op_smallint>
            (op->op >= OP_1 && op->op <= OP_16));
}

btc_bool btc_script_is_multisig(const vector* ops)
{
    if ((ops->len < 3) || (ops->len > (16 + 3)) ||
    d34c:	10803fcc 	andi	r2,r2,255
    d350:	10001f26 	beq	r2,zero,d3d0 <btc_script_is_multisig+0xcc>
        !btc_script_is_op_smallint(vector_idx(ops, 0)) ||
        !btc_script_is_op_smallint(vector_idx(ops, ops->len - 2)) ||
    d354:	e0bfff17 	ldw	r2,-4(fp)
    d358:	10c00017 	ldw	r3,0(r2)
    d35c:	e0bfff17 	ldw	r2,-4(fp)
    d360:	11000117 	ldw	r4,4(r2)
    d364:	00900034 	movhi	r2,16384
    d368:	10bfff84 	addi	r2,r2,-2
    d36c:	2085883a 	add	r2,r4,r2
    d370:	1085883a 	add	r2,r2,r2
    d374:	1085883a 	add	r2,r2,r2
    d378:	1885883a 	add	r2,r3,r2
    d37c:	10800017 	ldw	r2,0(r2)
    d380:	1009883a 	mov	r4,r2
    d384:	000d2ac0 	call	d2ac <btc_script_is_op_smallint>
}

btc_bool btc_script_is_multisig(const vector* ops)
{
    if ((ops->len < 3) || (ops->len > (16 + 3)) ||
        !btc_script_is_op_smallint(vector_idx(ops, 0)) ||
    d388:	10803fcc 	andi	r2,r2,255
    d38c:	10001026 	beq	r2,zero,d3d0 <btc_script_is_multisig+0xcc>
        !btc_script_is_op_smallint(vector_idx(ops, ops->len - 2)) ||
        !btc_script_is_op(vector_idx(ops, ops->len - 1), OP_CHECKMULTISIG))
    d390:	e0bfff17 	ldw	r2,-4(fp)
    d394:	10c00017 	ldw	r3,0(r2)
    d398:	e0bfff17 	ldw	r2,-4(fp)
    d39c:	11000117 	ldw	r4,4(r2)
    d3a0:	00900034 	movhi	r2,16384
    d3a4:	10bfffc4 	addi	r2,r2,-1
    d3a8:	2085883a 	add	r2,r4,r2
    d3ac:	1085883a 	add	r2,r2,r2
    d3b0:	1085883a 	add	r2,r2,r2
    d3b4:	1885883a 	add	r2,r3,r2
    d3b8:	10800017 	ldw	r2,0(r2)
    d3bc:	01402b84 	movi	r5,174
    d3c0:	1009883a 	mov	r4,r2
    d3c4:	000ce540 	call	ce54 <btc_script_is_op>

btc_bool btc_script_is_multisig(const vector* ops)
{
    if ((ops->len < 3) || (ops->len > (16 + 3)) ||
        !btc_script_is_op_smallint(vector_idx(ops, 0)) ||
        !btc_script_is_op_smallint(vector_idx(ops, ops->len - 2)) ||
    d3c8:	10803fcc 	andi	r2,r2,255
    d3cc:	1000021e 	bne	r2,zero,d3d8 <btc_script_is_multisig+0xd4>
        !btc_script_is_op(vector_idx(ops, ops->len - 1), OP_CHECKMULTISIG))
        return false;
    d3d0:	0005883a 	mov	r2,zero
    d3d4:	00001906 	br	d43c <btc_script_is_multisig+0x138>

    unsigned int i;
    for (i = 1; i < (ops->len - 2); i++)
    d3d8:	00800044 	movi	r2,1
    d3dc:	e0bffe15 	stw	r2,-8(fp)
    d3e0:	00001006 	br	d424 <btc_script_is_multisig+0x120>
        if (!btc_script_is_op_pubkey(vector_idx(ops, i)))
    d3e4:	e0bfff17 	ldw	r2,-4(fp)
    d3e8:	10c00017 	ldw	r3,0(r2)
    d3ec:	e0bffe17 	ldw	r2,-8(fp)
    d3f0:	1085883a 	add	r2,r2,r2
    d3f4:	1085883a 	add	r2,r2,r2
    d3f8:	1885883a 	add	r2,r3,r2
    d3fc:	10800017 	ldw	r2,0(r2)
    d400:	1009883a 	mov	r4,r2
    d404:	000ce880 	call	ce88 <btc_script_is_op_pubkey>
    d408:	10803fcc 	andi	r2,r2,255
    d40c:	1000021e 	bne	r2,zero,d418 <btc_script_is_multisig+0x114>
            return false;
    d410:	0005883a 	mov	r2,zero
    d414:	00000906 	br	d43c <btc_script_is_multisig+0x138>
        !btc_script_is_op_smallint(vector_idx(ops, ops->len - 2)) ||
        !btc_script_is_op(vector_idx(ops, ops->len - 1), OP_CHECKMULTISIG))
        return false;

    unsigned int i;
    for (i = 1; i < (ops->len - 2); i++)
    d418:	e0bffe17 	ldw	r2,-8(fp)
    d41c:	10800044 	addi	r2,r2,1
    d420:	e0bffe15 	stw	r2,-8(fp)
    d424:	e0bfff17 	ldw	r2,-4(fp)
    d428:	10800117 	ldw	r2,4(r2)
    d42c:	10bfff84 	addi	r2,r2,-2
    d430:	e0fffe17 	ldw	r3,-8(fp)
    d434:	18bfeb36 	bltu	r3,r2,d3e4 <__alt_mem_epcs_flash_controller+0xfe0043e4>
        if (!btc_script_is_op_pubkey(vector_idx(ops, i)))
            return false;

    return true;
    d438:	00800044 	movi	r2,1
}
    d43c:	e037883a 	mov	sp,fp
    d440:	dfc00117 	ldw	ra,4(sp)
    d444:	df000017 	ldw	fp,0(sp)
    d448:	dec00204 	addi	sp,sp,8
    d44c:	f800283a 	ret

0000d450 <btc_script_classify_ops>:

enum btc_tx_out_type btc_script_classify_ops(const vector* ops)
{
    d450:	defffd04 	addi	sp,sp,-12
    d454:	dfc00215 	stw	ra,8(sp)
    d458:	df000115 	stw	fp,4(sp)
    d45c:	df000104 	addi	fp,sp,4
    d460:	e13fff15 	stw	r4,-4(fp)
    if (btc_script_is_pubkeyhash(ops, NULL))
    d464:	000b883a 	mov	r5,zero
    d468:	e13fff17 	ldw	r4,-4(fp)
    d46c:	000d0740 	call	d074 <btc_script_is_pubkeyhash>
    d470:	10803fcc 	andi	r2,r2,255
    d474:	10000226 	beq	r2,zero,d480 <btc_script_classify_ops+0x30>
        return BTC_TX_PUBKEYHASH;
    d478:	00800084 	movi	r2,2
    d47c:	00001506 	br	d4d4 <btc_script_classify_ops+0x84>
    if (btc_script_is_scripthash(ops, NULL))
    d480:	000b883a 	mov	r5,zero
    d484:	e13fff17 	ldw	r4,-4(fp)
    d488:	000d1b40 	call	d1b4 <btc_script_is_scripthash>
    d48c:	10803fcc 	andi	r2,r2,255
    d490:	10000226 	beq	r2,zero,d49c <btc_script_classify_ops+0x4c>
        return BTC_TX_SCRIPTHASH;
    d494:	008000c4 	movi	r2,3
    d498:	00000e06 	br	d4d4 <btc_script_classify_ops+0x84>
    if (btc_script_is_pubkey(ops, NULL))
    d49c:	000b883a 	mov	r5,zero
    d4a0:	e13fff17 	ldw	r4,-4(fp)
    d4a4:	000cf900 	call	cf90 <btc_script_is_pubkey>
    d4a8:	10803fcc 	andi	r2,r2,255
    d4ac:	10000226 	beq	r2,zero,d4b8 <btc_script_classify_ops+0x68>
        return BTC_TX_PUBKEY;
    d4b0:	00800044 	movi	r2,1
    d4b4:	00000706 	br	d4d4 <btc_script_classify_ops+0x84>
    if (btc_script_is_multisig(ops))
    d4b8:	e13fff17 	ldw	r4,-4(fp)
    d4bc:	000d3040 	call	d304 <btc_script_is_multisig>
    d4c0:	10803fcc 	andi	r2,r2,255
    d4c4:	10000226 	beq	r2,zero,d4d0 <btc_script_classify_ops+0x80>
        return BTC_TX_MULTISIG;
    d4c8:	00800104 	movi	r2,4
    d4cc:	00000106 	br	d4d4 <btc_script_classify_ops+0x84>

    return BTC_TX_NONSTANDARD;
    d4d0:	0005883a 	mov	r2,zero
}
    d4d4:	e037883a 	mov	sp,fp
    d4d8:	dfc00117 	ldw	ra,4(sp)
    d4dc:	df000017 	ldw	fp,0(sp)
    d4e0:	dec00204 	addi	sp,sp,8
    d4e4:	f800283a 	ret

0000d4e8 <btc_script_classify>:

enum btc_tx_out_type btc_script_classify(const cstring* script, vector* data_out)
{
    d4e8:	deffec04 	addi	sp,sp,-80
    d4ec:	dfc01315 	stw	ra,76(sp)
    d4f0:	df001215 	stw	fp,72(sp)
    d4f4:	df001204 	addi	fp,sp,72
    d4f8:	e13ffe15 	stw	r4,-8(fp)
    d4fc:	e17fff15 	stw	r5,-4(fp)
    //INFO: could be speed up by not forming a vector
    //      and directly parse the script cstring

    enum btc_tx_out_type tx_out_type = BTC_TX_NONSTANDARD;
    d500:	e03fee15 	stw	zero,-72(fp)
    vector* ops = vector_new(10, btc_script_op_free_cb);
    d504:	01400074 	movhi	r5,1
    d508:	2972f204 	addi	r5,r5,-13368
    d50c:	01000284 	movi	r4,10
    d510:	00409e80 	call	409e8 <vector_new>
    d514:	e0bfef15 	stw	r2,-68(fp)
    btc_script_get_ops(script, ops);
    d518:	e17fef17 	ldw	r5,-68(fp)
    d51c:	e13ffe17 	ldw	r4,-8(fp)
    d520:	000cc0c0 	call	cc0c <btc_script_get_ops>

    if (btc_script_is_pubkeyhash(ops, data_out))
    d524:	e17fff17 	ldw	r5,-4(fp)
    d528:	e13fef17 	ldw	r4,-68(fp)
    d52c:	000d0740 	call	d074 <btc_script_is_pubkeyhash>
    d530:	10803fcc 	andi	r2,r2,255
    d534:	10000226 	beq	r2,zero,d540 <btc_script_classify+0x58>
        tx_out_type = BTC_TX_PUBKEYHASH;
    d538:	00800084 	movi	r2,2
    d53c:	e0bfee15 	stw	r2,-72(fp)
    if (btc_script_is_scripthash(ops, data_out))
    d540:	e17fff17 	ldw	r5,-4(fp)
    d544:	e13fef17 	ldw	r4,-68(fp)
    d548:	000d1b40 	call	d1b4 <btc_script_is_scripthash>
    d54c:	10803fcc 	andi	r2,r2,255
    d550:	10000226 	beq	r2,zero,d55c <btc_script_classify+0x74>
        tx_out_type = BTC_TX_SCRIPTHASH;
    d554:	008000c4 	movi	r2,3
    d558:	e0bfee15 	stw	r2,-72(fp)
    if (btc_script_is_pubkey(ops, data_out))
    d55c:	e17fff17 	ldw	r5,-4(fp)
    d560:	e13fef17 	ldw	r4,-68(fp)
    d564:	000cf900 	call	cf90 <btc_script_is_pubkey>
    d568:	10803fcc 	andi	r2,r2,255
    d56c:	10000226 	beq	r2,zero,d578 <btc_script_classify+0x90>
        tx_out_type = BTC_TX_PUBKEY;
    d570:	00800044 	movi	r2,1
    d574:	e0bfee15 	stw	r2,-72(fp)
    if (btc_script_is_multisig(ops))
    d578:	e13fef17 	ldw	r4,-68(fp)
    d57c:	000d3040 	call	d304 <btc_script_is_multisig>
    d580:	10803fcc 	andi	r2,r2,255
    d584:	10000226 	beq	r2,zero,d590 <btc_script_classify+0xa8>
        tx_out_type = BTC_TX_MULTISIG;
    d588:	00800104 	movi	r2,4
    d58c:	e0bfee15 	stw	r2,-72(fp)
    uint8_t version = 0;
    d590:	e03ff205 	stb	zero,-56(fp)
    uint8_t witness_program[40] = {0};
    d594:	e0bff244 	addi	r2,fp,-55
    d598:	00c00a04 	movi	r3,40
    d59c:	180d883a 	mov	r6,r3
    d5a0:	000b883a 	mov	r5,zero
    d5a4:	1009883a 	mov	r4,r2
    d5a8:	00464200 	call	46420 <memset>
    int witness_program_len = 0;
    d5ac:	e03ffd15 	stw	zero,-12(fp)
    if (btc_script_is_witnessprogram(script, &version, witness_program, &witness_program_len)) {
    d5b0:	e13ffd04 	addi	r4,fp,-12
    d5b4:	e0fff244 	addi	r3,fp,-55
    d5b8:	e0bff204 	addi	r2,fp,-56
    d5bc:	200f883a 	mov	r7,r4
    d5c0:	180d883a 	mov	r6,r3
    d5c4:	100b883a 	mov	r5,r2
    d5c8:	e13ffe17 	ldw	r4,-8(fp)
    d5cc:	000dc640 	call	dc64 <btc_script_is_witnessprogram>
    d5d0:	10803fcc 	andi	r2,r2,255
    d5d4:	10003226 	beq	r2,zero,d6a0 <btc_script_classify+0x1b8>
        if (version == 0 && witness_program_len == 20) {
    d5d8:	e0bff203 	ldbu	r2,-56(fp)
    d5dc:	10803fcc 	andi	r2,r2,255
    d5e0:	1000161e 	bne	r2,zero,d63c <btc_script_classify+0x154>
    d5e4:	e0bffd17 	ldw	r2,-12(fp)
    d5e8:	10800518 	cmpnei	r2,r2,20
    d5ec:	1000131e 	bne	r2,zero,d63c <btc_script_classify+0x154>
            tx_out_type = BTC_TX_WITNESS_V0_PUBKEYHASH;
    d5f0:	00800144 	movi	r2,5
    d5f4:	e0bfee15 	stw	r2,-72(fp)
            if (data_out) {
    d5f8:	e0bfff17 	ldw	r2,-4(fp)
    d5fc:	10000f26 	beq	r2,zero,d63c <btc_script_classify+0x154>
                uint8_t *witness_program_cpy = btc_calloc(1, witness_program_len);
    d600:	e0bffd17 	ldw	r2,-12(fp)
    d604:	100b883a 	mov	r5,r2
    d608:	01000044 	movi	r4,1
    d60c:	00083000 	call	8300 <btc_calloc>
    d610:	e0bff015 	stw	r2,-64(fp)
                memcpy(witness_program_cpy, witness_program, witness_program_len);
    d614:	e0bffd17 	ldw	r2,-12(fp)
    d618:	1007883a 	mov	r3,r2
    d61c:	e0bff244 	addi	r2,fp,-55
    d620:	180d883a 	mov	r6,r3
    d624:	100b883a 	mov	r5,r2
    d628:	e13ff017 	ldw	r4,-64(fp)
    d62c:	00463980 	call	46398 <memcpy>
                vector_add(data_out, witness_program_cpy);
    d630:	e17ff017 	ldw	r5,-64(fp)
    d634:	e13fff17 	ldw	r4,-4(fp)
    d638:	0040d680 	call	40d68 <vector_add>
            }
        }
        if (version == 0 && witness_program_len == 32) {
    d63c:	e0bff203 	ldbu	r2,-56(fp)
    d640:	10803fcc 	andi	r2,r2,255
    d644:	1000161e 	bne	r2,zero,d6a0 <btc_script_classify+0x1b8>
    d648:	e0bffd17 	ldw	r2,-12(fp)
    d64c:	10800818 	cmpnei	r2,r2,32
    d650:	1000131e 	bne	r2,zero,d6a0 <btc_script_classify+0x1b8>
            tx_out_type = BTC_TX_WITNESS_V0_SCRIPTHASH;
    d654:	00800184 	movi	r2,6
    d658:	e0bfee15 	stw	r2,-72(fp)
            if (data_out) {
    d65c:	e0bfff17 	ldw	r2,-4(fp)
    d660:	10000f26 	beq	r2,zero,d6a0 <btc_script_classify+0x1b8>
                uint8_t *witness_program_cpy = btc_calloc(1, witness_program_len);
    d664:	e0bffd17 	ldw	r2,-12(fp)
    d668:	100b883a 	mov	r5,r2
    d66c:	01000044 	movi	r4,1
    d670:	00083000 	call	8300 <btc_calloc>
    d674:	e0bff115 	stw	r2,-60(fp)
                memcpy(witness_program_cpy, witness_program, witness_program_len);
    d678:	e0bffd17 	ldw	r2,-12(fp)
    d67c:	1007883a 	mov	r3,r2
    d680:	e0bff244 	addi	r2,fp,-55
    d684:	180d883a 	mov	r6,r3
    d688:	100b883a 	mov	r5,r2
    d68c:	e13ff117 	ldw	r4,-60(fp)
    d690:	00463980 	call	46398 <memcpy>
                vector_add(data_out, witness_program_cpy);
    d694:	e17ff117 	ldw	r5,-60(fp)
    d698:	e13fff17 	ldw	r4,-4(fp)
    d69c:	0040d680 	call	40d68 <vector_add>
            }
        }
    }
    vector_free(ops, true);
    d6a0:	01400044 	movi	r5,1
    d6a4:	e13fef17 	ldw	r4,-68(fp)
    d6a8:	0040bb80 	call	40bb8 <vector_free>
    return tx_out_type;
    d6ac:	e0bfee17 	ldw	r2,-72(fp)
}
    d6b0:	e037883a 	mov	sp,fp
    d6b4:	dfc00117 	ldw	ra,4(sp)
    d6b8:	df000017 	ldw	fp,0(sp)
    d6bc:	dec00204 	addi	sp,sp,8
    d6c0:	f800283a 	ret

0000d6c4 <btc_encode_op_n>:


enum opcodetype btc_encode_op_n(const int n)
{
    d6c4:	defffd04 	addi	sp,sp,-12
    d6c8:	dfc00215 	stw	ra,8(sp)
    d6cc:	df000115 	stw	fp,4(sp)
    d6d0:	df000104 	addi	fp,sp,4
    d6d4:	e13fff15 	stw	r4,-4(fp)
    assert(n >= 0 && n <= 16);
    d6d8:	e0bfff17 	ldw	r2,-4(fp)
    d6dc:	10000316 	blt	r2,zero,d6ec <btc_encode_op_n+0x28>
    d6e0:	e0bfff17 	ldw	r2,-4(fp)
    d6e4:	10800450 	cmplti	r2,r2,17
    d6e8:	1000081e 	bne	r2,zero,d70c <btc_encode_op_n+0x48>
    d6ec:	01c00174 	movhi	r7,5
    d6f0:	39d19a04 	addi	r7,r7,18024
    d6f4:	01800174 	movhi	r6,5
    d6f8:	3191c904 	addi	r6,r6,18212
    d6fc:	014058c4 	movi	r5,355
    d700:	01000174 	movhi	r4,5
    d704:	21119504 	addi	r4,r4,18004
    d708:	0045fec0 	call	45fec <__assert_func>
    if (n == 0)
    d70c:	e0bfff17 	ldw	r2,-4(fp)
    d710:	1000021e 	bne	r2,zero,d71c <btc_encode_op_n+0x58>
        return OP_0;
    d714:	0005883a 	mov	r2,zero
    d718:	00000206 	br	d724 <btc_encode_op_n+0x60>
    return (enum opcodetype)(OP_1 + n - 1);
    d71c:	e0bfff17 	ldw	r2,-4(fp)
    d720:	10801404 	addi	r2,r2,80
}
    d724:	e037883a 	mov	sp,fp
    d728:	dfc00117 	ldw	ra,4(sp)
    d72c:	df000017 	ldw	fp,0(sp)
    d730:	dec00204 	addi	sp,sp,8
    d734:	f800283a 	ret

0000d738 <btc_script_append_op>:


void btc_script_append_op(cstring* script_in, enum opcodetype op)
{
    d738:	defffc04 	addi	sp,sp,-16
    d73c:	dfc00315 	stw	ra,12(sp)
    d740:	df000215 	stw	fp,8(sp)
    d744:	df000204 	addi	fp,sp,8
    d748:	e13ffe15 	stw	r4,-8(fp)
    d74c:	e17fff15 	stw	r5,-4(fp)
    cstr_append_buf(script_in, &op, 1);
    d750:	e0bfff04 	addi	r2,fp,-4
    d754:	01800044 	movi	r6,1
    d758:	100b883a 	mov	r5,r2
    d75c:	e13ffe17 	ldw	r4,-8(fp)
    d760:	00435100 	call	43510 <cstr_append_buf>
}
    d764:	0001883a 	nop
    d768:	e037883a 	mov	sp,fp
    d76c:	dfc00117 	ldw	ra,4(sp)
    d770:	df000017 	ldw	fp,0(sp)
    d774:	dec00204 	addi	sp,sp,8
    d778:	f800283a 	ret

0000d77c <btc_script_append_pushdata>:


void btc_script_append_pushdata(cstring* script_in, const unsigned char* data, const size_t datalen)
{
    d77c:	defff904 	addi	sp,sp,-28
    d780:	dfc00615 	stw	ra,24(sp)
    d784:	df000515 	stw	fp,20(sp)
    d788:	df000504 	addi	fp,sp,20
    d78c:	e13ffd15 	stw	r4,-12(fp)
    d790:	e17ffe15 	stw	r5,-8(fp)
    d794:	e1bfff15 	stw	r6,-4(fp)
    if (datalen < OP_PUSHDATA1) {
    d798:	e0bfff17 	ldw	r2,-4(fp)
    d79c:	10801328 	cmpgeui	r2,r2,76
    d7a0:	1000061e 	bne	r2,zero,d7bc <btc_script_append_pushdata+0x40>
        cstr_append_buf(script_in, (unsigned char*)&datalen, 1);
    d7a4:	e0bfff04 	addi	r2,fp,-4
    d7a8:	01800044 	movi	r6,1
    d7ac:	100b883a 	mov	r5,r2
    d7b0:	e13ffd17 	ldw	r4,-12(fp)
    d7b4:	00435100 	call	43510 <cstr_append_buf>
    d7b8:	00002306 	br	d848 <btc_script_append_pushdata+0xcc>
    } else if (datalen <= 0xff) {
    d7bc:	e0bfff17 	ldw	r2,-4(fp)
    d7c0:	10804028 	cmpgeui	r2,r2,256
    d7c4:	1000091e 	bne	r2,zero,d7ec <btc_script_append_pushdata+0x70>
        btc_script_append_op(script_in, OP_PUSHDATA1);
    d7c8:	01401304 	movi	r5,76
    d7cc:	e13ffd17 	ldw	r4,-12(fp)
    d7d0:	000d7380 	call	d738 <btc_script_append_op>
        cstr_append_buf(script_in, (unsigned char*)&datalen, 1);
    d7d4:	e0bfff04 	addi	r2,fp,-4
    d7d8:	01800044 	movi	r6,1
    d7dc:	100b883a 	mov	r5,r2
    d7e0:	e13ffd17 	ldw	r4,-12(fp)
    d7e4:	00435100 	call	43510 <cstr_append_buf>
    d7e8:	00001706 	br	d848 <btc_script_append_pushdata+0xcc>
    } else if (datalen <= 0xffff) {
    d7ec:	e0bfff17 	ldw	r2,-4(fp)
    d7f0:	00ffffd4 	movui	r3,65535
    d7f4:	18800a36 	bltu	r3,r2,d820 <btc_script_append_pushdata+0xa4>
        btc_script_append_op(script_in, OP_PUSHDATA2);
    d7f8:	01401344 	movi	r5,77
    d7fc:	e13ffd17 	ldw	r4,-12(fp)
    d800:	000d7380 	call	d738 <btc_script_append_op>
        uint16_t v = htole16(datalen);
    d804:	e0bfff17 	ldw	r2,-4(fp)
    d808:	e0bffb0d 	sth	r2,-20(fp)
        cstr_append_buf(script_in, &v, sizeof(v));
    d80c:	01800084 	movi	r6,2
    d810:	e17ffb04 	addi	r5,fp,-20
    d814:	e13ffd17 	ldw	r4,-12(fp)
    d818:	00435100 	call	43510 <cstr_append_buf>
    d81c:	00000a06 	br	d848 <btc_script_append_pushdata+0xcc>
    } else {
        btc_script_append_op(script_in, OP_PUSHDATA4);
    d820:	01401384 	movi	r5,78
    d824:	e13ffd17 	ldw	r4,-12(fp)
    d828:	000d7380 	call	d738 <btc_script_append_op>
        uint32_t v = htole32(datalen);
    d82c:	e0bfff17 	ldw	r2,-4(fp)
    d830:	e0bffc15 	stw	r2,-16(fp)
        cstr_append_buf(script_in, &v, sizeof(v));
    d834:	e0bffc04 	addi	r2,fp,-16
    d838:	01800104 	movi	r6,4
    d83c:	100b883a 	mov	r5,r2
    d840:	e13ffd17 	ldw	r4,-12(fp)
    d844:	00435100 	call	43510 <cstr_append_buf>
    }
    cstr_append_buf(script_in, data, datalen);
    d848:	e0bfff17 	ldw	r2,-4(fp)
    d84c:	100d883a 	mov	r6,r2
    d850:	e17ffe17 	ldw	r5,-8(fp)
    d854:	e13ffd17 	ldw	r4,-12(fp)
    d858:	00435100 	call	43510 <cstr_append_buf>
}
    d85c:	0001883a 	nop
    d860:	e037883a 	mov	sp,fp
    d864:	dfc00117 	ldw	ra,4(sp)
    d868:	df000017 	ldw	fp,0(sp)
    d86c:	dec00204 	addi	sp,sp,8
    d870:	f800283a 	ret

0000d874 <btc_script_build_multisig>:

btc_bool btc_script_build_multisig(cstring* script_in, const unsigned int required_signatures, const vector* pubkeys_chars)
{
    d874:	defff604 	addi	sp,sp,-40
    d878:	dfc00915 	stw	ra,36(sp)
    d87c:	df000815 	stw	fp,32(sp)
    d880:	df000804 	addi	fp,sp,32
    d884:	e13ffd15 	stw	r4,-12(fp)
    d888:	e17ffe15 	stw	r5,-8(fp)
    d88c:	e1bfff15 	stw	r6,-4(fp)
    cstr_resize(script_in, 0); //clear script
    d890:	000b883a 	mov	r5,zero
    d894:	e13ffd17 	ldw	r4,-12(fp)
    d898:	00434500 	call	43450 <cstr_resize>

    if (required_signatures > 16 || pubkeys_chars->len > 16)
    d89c:	e0bffe17 	ldw	r2,-8(fp)
    d8a0:	10800468 	cmpgeui	r2,r2,17
    d8a4:	1000041e 	bne	r2,zero,d8b8 <btc_script_build_multisig+0x44>
    d8a8:	e0bfff17 	ldw	r2,-4(fp)
    d8ac:	10800117 	ldw	r2,4(r2)
    d8b0:	10800470 	cmpltui	r2,r2,17
    d8b4:	1000021e 	bne	r2,zero,d8c0 <btc_script_build_multisig+0x4c>
        return false;
    d8b8:	0005883a 	mov	r2,zero
    d8bc:	00003a06 	br	d9a8 <btc_script_build_multisig+0x134>
    enum opcodetype op_req_sig = btc_encode_op_n(required_signatures);
    d8c0:	e0bffe17 	ldw	r2,-8(fp)
    d8c4:	1009883a 	mov	r4,r2
    d8c8:	000d6c40 	call	d6c4 <btc_encode_op_n>
    d8cc:	e0bffa15 	stw	r2,-24(fp)
    cstr_append_buf(script_in, &op_req_sig, 1);
    d8d0:	e0bffa04 	addi	r2,fp,-24
    d8d4:	01800044 	movi	r6,1
    d8d8:	100b883a 	mov	r5,r2
    d8dc:	e13ffd17 	ldw	r4,-12(fp)
    d8e0:	00435100 	call	43510 <cstr_append_buf>

    int i;
    for (i = 0; i < (int)pubkeys_chars->len; i++) {
    d8e4:	e03ff815 	stw	zero,-32(fp)
    d8e8:	00001806 	br	d94c <btc_script_build_multisig+0xd8>
        btc_pubkey* pkey = pubkeys_chars->data[i];
    d8ec:	e0bfff17 	ldw	r2,-4(fp)
    d8f0:	10c00017 	ldw	r3,0(r2)
    d8f4:	e0bff817 	ldw	r2,-32(fp)
    d8f8:	1085883a 	add	r2,r2,r2
    d8fc:	1085883a 	add	r2,r2,r2
    d900:	1885883a 	add	r2,r3,r2
    d904:	10800017 	ldw	r2,0(r2)
    d908:	e0bff915 	stw	r2,-28(fp)
        btc_script_append_pushdata(script_in, pkey->pubkey, (pkey->compressed ? BTC_ECKEY_COMPRESSED_LENGTH : BTC_ECKEY_UNCOMPRESSED_LENGTH));
    d90c:	e0bff917 	ldw	r2,-28(fp)
    d910:	10c00044 	addi	r3,r2,1
    d914:	e0bff917 	ldw	r2,-28(fp)
    d918:	10800003 	ldbu	r2,0(r2)
    d91c:	10803fcc 	andi	r2,r2,255
    d920:	10000226 	beq	r2,zero,d92c <btc_script_build_multisig+0xb8>
    d924:	00800844 	movi	r2,33
    d928:	00000106 	br	d930 <btc_script_build_multisig+0xbc>
    d92c:	00801044 	movi	r2,65
    d930:	100d883a 	mov	r6,r2
    d934:	180b883a 	mov	r5,r3
    d938:	e13ffd17 	ldw	r4,-12(fp)
    d93c:	000d77c0 	call	d77c <btc_script_append_pushdata>
        return false;
    enum opcodetype op_req_sig = btc_encode_op_n(required_signatures);
    cstr_append_buf(script_in, &op_req_sig, 1);

    int i;
    for (i = 0; i < (int)pubkeys_chars->len; i++) {
    d940:	e0bff817 	ldw	r2,-32(fp)
    d944:	10800044 	addi	r2,r2,1
    d948:	e0bff815 	stw	r2,-32(fp)
    d94c:	e0bfff17 	ldw	r2,-4(fp)
    d950:	10800117 	ldw	r2,4(r2)
    d954:	1007883a 	mov	r3,r2
    d958:	e0bff817 	ldw	r2,-32(fp)
    d95c:	10ffe316 	blt	r2,r3,d8ec <__alt_mem_epcs_flash_controller+0xfe0048ec>
        btc_pubkey* pkey = pubkeys_chars->data[i];
        btc_script_append_pushdata(script_in, pkey->pubkey, (pkey->compressed ? BTC_ECKEY_COMPRESSED_LENGTH : BTC_ECKEY_UNCOMPRESSED_LENGTH));
    }

    enum opcodetype op_pub_len = btc_encode_op_n(pubkeys_chars->len);
    d960:	e0bfff17 	ldw	r2,-4(fp)
    d964:	10800117 	ldw	r2,4(r2)
    d968:	1009883a 	mov	r4,r2
    d96c:	000d6c40 	call	d6c4 <btc_encode_op_n>
    d970:	e0bffb15 	stw	r2,-20(fp)
    cstr_append_buf(script_in, &op_pub_len, 1);
    d974:	e0bffb04 	addi	r2,fp,-20
    d978:	01800044 	movi	r6,1
    d97c:	100b883a 	mov	r5,r2
    d980:	e13ffd17 	ldw	r4,-12(fp)
    d984:	00435100 	call	43510 <cstr_append_buf>

    enum opcodetype op_checkmultisig = OP_CHECKMULTISIG;
    d988:	00802b84 	movi	r2,174
    d98c:	e0bffc15 	stw	r2,-16(fp)
    cstr_append_buf(script_in, &op_checkmultisig, 1);
    d990:	e0bffc04 	addi	r2,fp,-16
    d994:	01800044 	movi	r6,1
    d998:	100b883a 	mov	r5,r2
    d99c:	e13ffd17 	ldw	r4,-12(fp)
    d9a0:	00435100 	call	43510 <cstr_append_buf>

    return true;
    d9a4:	00800044 	movi	r2,1
}
    d9a8:	e037883a 	mov	sp,fp
    d9ac:	dfc00117 	ldw	ra,4(sp)
    d9b0:	df000017 	ldw	fp,0(sp)
    d9b4:	dec00204 	addi	sp,sp,8
    d9b8:	f800283a 	ret

0000d9bc <btc_script_build_p2pkh>:

btc_bool btc_script_build_p2pkh(cstring* script_in, const uint160 hash160)
{
    d9bc:	defffc04 	addi	sp,sp,-16
    d9c0:	dfc00315 	stw	ra,12(sp)
    d9c4:	df000215 	stw	fp,8(sp)
    d9c8:	df000204 	addi	fp,sp,8
    d9cc:	e13ffe15 	stw	r4,-8(fp)
    d9d0:	e17fff15 	stw	r5,-4(fp)
    cstr_resize(script_in, 0); //clear script
    d9d4:	000b883a 	mov	r5,zero
    d9d8:	e13ffe17 	ldw	r4,-8(fp)
    d9dc:	00434500 	call	43450 <cstr_resize>

    btc_script_append_op(script_in, OP_DUP);
    d9e0:	01401d84 	movi	r5,118
    d9e4:	e13ffe17 	ldw	r4,-8(fp)
    d9e8:	000d7380 	call	d738 <btc_script_append_op>
    btc_script_append_op(script_in, OP_HASH160);
    d9ec:	01402a44 	movi	r5,169
    d9f0:	e13ffe17 	ldw	r4,-8(fp)
    d9f4:	000d7380 	call	d738 <btc_script_append_op>


    btc_script_append_pushdata(script_in, (unsigned char*)hash160, sizeof(uint160));
    d9f8:	01800504 	movi	r6,20
    d9fc:	e17fff17 	ldw	r5,-4(fp)
    da00:	e13ffe17 	ldw	r4,-8(fp)
    da04:	000d77c0 	call	d77c <btc_script_append_pushdata>
    btc_script_append_op(script_in, OP_EQUALVERIFY);
    da08:	01402204 	movi	r5,136
    da0c:	e13ffe17 	ldw	r4,-8(fp)
    da10:	000d7380 	call	d738 <btc_script_append_op>
    btc_script_append_op(script_in, OP_CHECKSIG);
    da14:	01402b04 	movi	r5,172
    da18:	e13ffe17 	ldw	r4,-8(fp)
    da1c:	000d7380 	call	d738 <btc_script_append_op>

    return true;
    da20:	00800044 	movi	r2,1
}
    da24:	e037883a 	mov	sp,fp
    da28:	dfc00117 	ldw	ra,4(sp)
    da2c:	df000017 	ldw	fp,0(sp)
    da30:	dec00204 	addi	sp,sp,8
    da34:	f800283a 	ret

0000da38 <btc_script_build_p2wpkh>:

btc_bool btc_script_build_p2wpkh(cstring* script_in, const uint160 hash160)
{
    da38:	defffc04 	addi	sp,sp,-16
    da3c:	dfc00315 	stw	ra,12(sp)
    da40:	df000215 	stw	fp,8(sp)
    da44:	df000204 	addi	fp,sp,8
    da48:	e13ffe15 	stw	r4,-8(fp)
    da4c:	e17fff15 	stw	r5,-4(fp)
    cstr_resize(script_in, 0); //clear script
    da50:	000b883a 	mov	r5,zero
    da54:	e13ffe17 	ldw	r4,-8(fp)
    da58:	00434500 	call	43450 <cstr_resize>

    btc_script_append_op(script_in, OP_0);
    da5c:	000b883a 	mov	r5,zero
    da60:	e13ffe17 	ldw	r4,-8(fp)
    da64:	000d7380 	call	d738 <btc_script_append_op>
    btc_script_append_pushdata(script_in, (unsigned char*)hash160, sizeof(uint160));
    da68:	01800504 	movi	r6,20
    da6c:	e17fff17 	ldw	r5,-4(fp)
    da70:	e13ffe17 	ldw	r4,-8(fp)
    da74:	000d77c0 	call	d77c <btc_script_append_pushdata>

    return true;
    da78:	00800044 	movi	r2,1
}
    da7c:	e037883a 	mov	sp,fp
    da80:	dfc00117 	ldw	ra,4(sp)
    da84:	df000017 	ldw	fp,0(sp)
    da88:	dec00204 	addi	sp,sp,8
    da8c:	f800283a 	ret

0000da90 <btc_script_build_p2sh>:

btc_bool btc_script_build_p2sh(cstring* script_in, const uint160 hash160)
{
    da90:	defffc04 	addi	sp,sp,-16
    da94:	dfc00315 	stw	ra,12(sp)
    da98:	df000215 	stw	fp,8(sp)
    da9c:	df000204 	addi	fp,sp,8
    daa0:	e13ffe15 	stw	r4,-8(fp)
    daa4:	e17fff15 	stw	r5,-4(fp)
    cstr_resize(script_in, 0); //clear script
    daa8:	000b883a 	mov	r5,zero
    daac:	e13ffe17 	ldw	r4,-8(fp)
    dab0:	00434500 	call	43450 <cstr_resize>
    btc_script_append_op(script_in, OP_HASH160);
    dab4:	01402a44 	movi	r5,169
    dab8:	e13ffe17 	ldw	r4,-8(fp)
    dabc:	000d7380 	call	d738 <btc_script_append_op>
    btc_script_append_pushdata(script_in, (unsigned char*)hash160, sizeof(uint160));
    dac0:	01800504 	movi	r6,20
    dac4:	e17fff17 	ldw	r5,-4(fp)
    dac8:	e13ffe17 	ldw	r4,-8(fp)
    dacc:	000d77c0 	call	d77c <btc_script_append_pushdata>
    btc_script_append_op(script_in, OP_EQUAL);
    dad0:	014021c4 	movi	r5,135
    dad4:	e13ffe17 	ldw	r4,-8(fp)
    dad8:	000d7380 	call	d738 <btc_script_append_op>

    return true;
    dadc:	00800044 	movi	r2,1
}
    dae0:	e037883a 	mov	sp,fp
    dae4:	dfc00117 	ldw	ra,4(sp)
    dae8:	df000017 	ldw	fp,0(sp)
    daec:	dec00204 	addi	sp,sp,8
    daf0:	f800283a 	ret

0000daf4 <btc_script_get_scripthash>:

btc_bool btc_script_get_scripthash(const cstring* script_in, uint160 scripthash)
{
    daf4:	defff404 	addi	sp,sp,-48
    daf8:	dfc00b15 	stw	ra,44(sp)
    dafc:	df000a15 	stw	fp,40(sp)
    db00:	df000a04 	addi	fp,sp,40
    db04:	e13ffe15 	stw	r4,-8(fp)
    db08:	e17fff15 	stw	r5,-4(fp)
    if (!script_in) {
    db0c:	e0bffe17 	ldw	r2,-8(fp)
    db10:	1000021e 	bne	r2,zero,db1c <btc_script_get_scripthash+0x28>
        return false;
    db14:	0005883a 	mov	r2,zero
    db18:	00000d06 	br	db50 <btc_script_get_scripthash+0x5c>
    }
    uint256 hash;
    btc_hash_sngl_sha256((const unsigned char *)script_in->str, script_in->len, hash);
    db1c:	e0bffe17 	ldw	r2,-8(fp)
    db20:	10c00017 	ldw	r3,0(r2)
    db24:	e0bffe17 	ldw	r2,-8(fp)
    db28:	10800117 	ldw	r2,4(r2)
    db2c:	e1bff604 	addi	r6,fp,-40
    db30:	100b883a 	mov	r5,r2
    db34:	1809883a 	mov	r4,r3
    db38:	000c7a40 	call	c7a4 <btc_hash_sngl_sha256>
    btc_ripemd160(hash, sizeof(hash), scripthash);
    db3c:	e1bfff17 	ldw	r6,-4(fp)
    db40:	01400804 	movi	r5,32
    db44:	e13ff604 	addi	r4,fp,-40
    db48:	000c3680 	call	c368 <btc_ripemd160>

    return true;
    db4c:	00800044 	movi	r2,1
}
    db50:	e037883a 	mov	sp,fp
    db54:	dfc00117 	ldw	ra,4(sp)
    db58:	df000017 	ldw	fp,0(sp)
    db5c:	dec00204 	addi	sp,sp,8
    db60:	f800283a 	ret

0000db64 <btc_tx_out_type_to_str>:

const char * btc_tx_out_type_to_str(const enum btc_tx_out_type type) {
    db64:	defffe04 	addi	sp,sp,-8
    db68:	df000115 	stw	fp,4(sp)
    db6c:	df000104 	addi	fp,sp,4
    db70:	e13fff15 	stw	r4,-4(fp)
    if (type == BTC_TX_PUBKEY) {
    db74:	e0bfff17 	ldw	r2,-4(fp)
    db78:	10800058 	cmpnei	r2,r2,1
    db7c:	1000031e 	bne	r2,zero,db8c <btc_tx_out_type_to_str+0x28>
        return "TX_PUBKEY";
    db80:	00800174 	movhi	r2,5
    db84:	10919f04 	addi	r2,r2,18044
    db88:	00001406 	br	dbdc <btc_tx_out_type_to_str+0x78>
    }
    else if (type == BTC_TX_PUBKEYHASH) {
    db8c:	e0bfff17 	ldw	r2,-4(fp)
    db90:	10800098 	cmpnei	r2,r2,2
    db94:	1000031e 	bne	r2,zero,dba4 <btc_tx_out_type_to_str+0x40>
        return "TX_PUBKEYHASH";
    db98:	00800174 	movhi	r2,5
    db9c:	1091a204 	addi	r2,r2,18056
    dba0:	00000e06 	br	dbdc <btc_tx_out_type_to_str+0x78>
    }
    else if (type == BTC_TX_SCRIPTHASH) {
    dba4:	e0bfff17 	ldw	r2,-4(fp)
    dba8:	108000d8 	cmpnei	r2,r2,3
    dbac:	1000031e 	bne	r2,zero,dbbc <btc_tx_out_type_to_str+0x58>
        return "TX_SCRIPTHASH";
    dbb0:	00800174 	movhi	r2,5
    dbb4:	1091a604 	addi	r2,r2,18072
    dbb8:	00000806 	br	dbdc <btc_tx_out_type_to_str+0x78>
    }
    else if (type == BTC_TX_MULTISIG) {
    dbbc:	e0bfff17 	ldw	r2,-4(fp)
    dbc0:	10800118 	cmpnei	r2,r2,4
    dbc4:	1000031e 	bne	r2,zero,dbd4 <btc_tx_out_type_to_str+0x70>
        return "TX_MULTISIG";
    dbc8:	00800174 	movhi	r2,5
    dbcc:	1091aa04 	addi	r2,r2,18088
    dbd0:	00000206 	br	dbdc <btc_tx_out_type_to_str+0x78>
    }
    else {
        return "TX_NONSTANDARD";
    dbd4:	00800174 	movhi	r2,5
    dbd8:	1091ad04 	addi	r2,r2,18100
    }
}
    dbdc:	e037883a 	mov	sp,fp
    dbe0:	df000017 	ldw	fp,0(sp)
    dbe4:	dec00104 	addi	sp,sp,4
    dbe8:	f800283a 	ret

0000dbec <btc_decode_op_n>:

static uint8_t btc_decode_op_n(enum opcodetype op)
{
    dbec:	defffd04 	addi	sp,sp,-12
    dbf0:	dfc00215 	stw	ra,8(sp)
    dbf4:	df000115 	stw	fp,4(sp)
    dbf8:	df000104 	addi	fp,sp,4
    dbfc:	e13fff15 	stw	r4,-4(fp)
    if (op == OP_0) {
    dc00:	e0bfff17 	ldw	r2,-4(fp)
    dc04:	1000021e 	bne	r2,zero,dc10 <btc_decode_op_n+0x24>
        return 0;
    dc08:	0005883a 	mov	r2,zero
    dc0c:	00001006 	br	dc50 <btc_decode_op_n+0x64>
    }
    assert(op >= OP_1 && op <= OP_16);
    dc10:	e0bfff17 	ldw	r2,-4(fp)
    dc14:	10801470 	cmpltui	r2,r2,81
    dc18:	1000031e 	bne	r2,zero,dc28 <btc_decode_op_n+0x3c>
    dc1c:	e0bfff17 	ldw	r2,-4(fp)
    dc20:	10801870 	cmpltui	r2,r2,97
    dc24:	1000081e 	bne	r2,zero,dc48 <btc_decode_op_n+0x5c>
    dc28:	01c00174 	movhi	r7,5
    dc2c:	39d1b104 	addi	r7,r7,18116
    dc30:	01800174 	movhi	r6,5
    dc34:	3191cd04 	addi	r6,r6,18228
    dc38:	01407844 	movi	r5,481
    dc3c:	01000174 	movhi	r4,5
    dc40:	21119504 	addi	r4,r4,18004
    dc44:	0045fec0 	call	45fec <__assert_func>
    return (uint8_t)op - (uint8_t)(OP_1 - 1);
    dc48:	e0bfff17 	ldw	r2,-4(fp)
    dc4c:	10bfec04 	addi	r2,r2,-80
}
    dc50:	e037883a 	mov	sp,fp
    dc54:	dfc00117 	ldw	ra,4(sp)
    dc58:	df000017 	ldw	fp,0(sp)
    dc5c:	dec00204 	addi	sp,sp,8
    dc60:	f800283a 	ret

0000dc64 <btc_script_is_witnessprogram>:

// A witness program is any valid script that consists of a 1-byte push opcode
// followed by a data push between 2 and 40 bytes.
btc_bool btc_script_is_witnessprogram(const cstring* script, uint8_t* version_out, uint8_t *program_out, int *programm_len_out)
{
    dc64:	defffa04 	addi	sp,sp,-24
    dc68:	dfc00515 	stw	ra,20(sp)
    dc6c:	df000415 	stw	fp,16(sp)
    dc70:	df000404 	addi	fp,sp,16
    dc74:	e13ffc15 	stw	r4,-16(fp)
    dc78:	e17ffd15 	stw	r5,-12(fp)
    dc7c:	e1bffe15 	stw	r6,-8(fp)
    dc80:	e1ffff15 	stw	r7,-4(fp)
    if (!version_out || !program_out) {
    dc84:	e0bffd17 	ldw	r2,-12(fp)
    dc88:	10000226 	beq	r2,zero,dc94 <btc_script_is_witnessprogram+0x30>
    dc8c:	e0bffe17 	ldw	r2,-8(fp)
    dc90:	1000021e 	bne	r2,zero,dc9c <btc_script_is_witnessprogram+0x38>
        return false;
    dc94:	0005883a 	mov	r2,zero
    dc98:	00005c06 	br	de0c <btc_script_is_witnessprogram+0x1a8>
    }
    if (script->len < 4 || script->len > 42) {
    dc9c:	e0bffc17 	ldw	r2,-16(fp)
    dca0:	10800117 	ldw	r2,4(r2)
    dca4:	10800130 	cmpltui	r2,r2,4
    dca8:	1000041e 	bne	r2,zero,dcbc <btc_script_is_witnessprogram+0x58>
    dcac:	e0bffc17 	ldw	r2,-16(fp)
    dcb0:	10800117 	ldw	r2,4(r2)
    dcb4:	10800af0 	cmpltui	r2,r2,43
    dcb8:	1000021e 	bne	r2,zero,dcc4 <btc_script_is_witnessprogram+0x60>
        return false;
    dcbc:	0005883a 	mov	r2,zero
    dcc0:	00005206 	br	de0c <btc_script_is_witnessprogram+0x1a8>
    }
    if (script->str[0] != OP_0 && (script->str[0] < OP_1 || script->str[0] > OP_16)) {
    dcc4:	e0bffc17 	ldw	r2,-16(fp)
    dcc8:	10800017 	ldw	r2,0(r2)
    dccc:	10800003 	ldbu	r2,0(r2)
    dcd0:	10803fcc 	andi	r2,r2,255
    dcd4:	1080201c 	xori	r2,r2,128
    dcd8:	10bfe004 	addi	r2,r2,-128
    dcdc:	10001226 	beq	r2,zero,dd28 <btc_script_is_witnessprogram+0xc4>
    dce0:	e0bffc17 	ldw	r2,-16(fp)
    dce4:	10800017 	ldw	r2,0(r2)
    dce8:	10800003 	ldbu	r2,0(r2)
    dcec:	10803fcc 	andi	r2,r2,255
    dcf0:	1080201c 	xori	r2,r2,128
    dcf4:	10bfe004 	addi	r2,r2,-128
    dcf8:	10801450 	cmplti	r2,r2,81
    dcfc:	1000081e 	bne	r2,zero,dd20 <btc_script_is_witnessprogram+0xbc>
    dd00:	e0bffc17 	ldw	r2,-16(fp)
    dd04:	10800017 	ldw	r2,0(r2)
    dd08:	10800003 	ldbu	r2,0(r2)
    dd0c:	10803fcc 	andi	r2,r2,255
    dd10:	1080201c 	xori	r2,r2,128
    dd14:	10bfe004 	addi	r2,r2,-128
    dd18:	10801850 	cmplti	r2,r2,97
    dd1c:	1000021e 	bne	r2,zero,dd28 <btc_script_is_witnessprogram+0xc4>
        return false;
    dd20:	0005883a 	mov	r2,zero
    dd24:	00003906 	br	de0c <btc_script_is_witnessprogram+0x1a8>
    }
    if ((size_t)(script->str[1] + 2) == script->len) {
    dd28:	e0bffc17 	ldw	r2,-16(fp)
    dd2c:	10800017 	ldw	r2,0(r2)
    dd30:	10800044 	addi	r2,r2,1
    dd34:	10800003 	ldbu	r2,0(r2)
    dd38:	10803fcc 	andi	r2,r2,255
    dd3c:	1080201c 	xori	r2,r2,128
    dd40:	10bfe004 	addi	r2,r2,-128
    dd44:	10800084 	addi	r2,r2,2
    dd48:	1007883a 	mov	r3,r2
    dd4c:	e0bffc17 	ldw	r2,-16(fp)
    dd50:	10800117 	ldw	r2,4(r2)
    dd54:	18802c1e 	bne	r3,r2,de08 <btc_script_is_witnessprogram+0x1a4>
        *version_out = btc_decode_op_n((enum opcodetype)script->str[0]);
    dd58:	e0bffc17 	ldw	r2,-16(fp)
    dd5c:	10800017 	ldw	r2,0(r2)
    dd60:	10800003 	ldbu	r2,0(r2)
    dd64:	10803fcc 	andi	r2,r2,255
    dd68:	1080201c 	xori	r2,r2,128
    dd6c:	10bfe004 	addi	r2,r2,-128
    dd70:	1009883a 	mov	r4,r2
    dd74:	000dbec0 	call	dbec <btc_decode_op_n>
    dd78:	1007883a 	mov	r3,r2
    dd7c:	e0bffd17 	ldw	r2,-12(fp)
    dd80:	10c00005 	stb	r3,0(r2)
        if (program_out) {
    dd84:	e0bffe17 	ldw	r2,-8(fp)
    dd88:	10001d26 	beq	r2,zero,de00 <btc_script_is_witnessprogram+0x19c>
            assert(script->len - 2 <= 40);
    dd8c:	e0bffc17 	ldw	r2,-16(fp)
    dd90:	10800117 	ldw	r2,4(r2)
    dd94:	10bfff84 	addi	r2,r2,-2
    dd98:	10800a70 	cmpltui	r2,r2,41
    dd9c:	1000081e 	bne	r2,zero,ddc0 <btc_script_is_witnessprogram+0x15c>
    dda0:	01c00174 	movhi	r7,5
    dda4:	39d1b804 	addi	r7,r7,18144
    dda8:	01800174 	movhi	r6,5
    ddac:	3191d104 	addi	r6,r6,18244
    ddb0:	01407d44 	movi	r5,501
    ddb4:	01000174 	movhi	r4,5
    ddb8:	21119504 	addi	r4,r4,18004
    ddbc:	0045fec0 	call	45fec <__assert_func>
            memcpy(program_out, script->str + 2, script->len - 2);
    ddc0:	e0bffc17 	ldw	r2,-16(fp)
    ddc4:	10800017 	ldw	r2,0(r2)
    ddc8:	10c00084 	addi	r3,r2,2
    ddcc:	e0bffc17 	ldw	r2,-16(fp)
    ddd0:	10800117 	ldw	r2,4(r2)
    ddd4:	10bfff84 	addi	r2,r2,-2
    ddd8:	100d883a 	mov	r6,r2
    dddc:	180b883a 	mov	r5,r3
    dde0:	e13ffe17 	ldw	r4,-8(fp)
    dde4:	00463980 	call	46398 <memcpy>
            *programm_len_out = script->len - 2;
    dde8:	e0bffc17 	ldw	r2,-16(fp)
    ddec:	10800117 	ldw	r2,4(r2)
    ddf0:	10bfff84 	addi	r2,r2,-2
    ddf4:	1007883a 	mov	r3,r2
    ddf8:	e0bfff17 	ldw	r2,-4(fp)
    ddfc:	10c00015 	stw	r3,0(r2)
        }
        return true;
    de00:	00800044 	movi	r2,1
    de04:	00000106 	br	de0c <btc_script_is_witnessprogram+0x1a8>
    }
    return false;
    de08:	0005883a 	mov	r2,zero
}
    de0c:	e037883a 	mov	sp,fp
    de10:	dfc00117 	ldw	ra,4(sp)
    de14:	df000017 	ldw	fp,0(sp)
    de18:	dec00204 	addi	sp,sp,8
    de1c:	f800283a 	ret

0000de20 <secp256k1_callback_call>:
typedef struct {
    void (*fn)(const char *text, void* data);
    const void* data;
} secp256k1_callback;

static SECP256K1_INLINE void secp256k1_callback_call(const secp256k1_callback * const cb, const char * const text) {
    de20:	defffc04 	addi	sp,sp,-16
    de24:	dfc00315 	stw	ra,12(sp)
    de28:	df000215 	stw	fp,8(sp)
    de2c:	df000204 	addi	fp,sp,8
    de30:	e13ffe15 	stw	r4,-8(fp)
    de34:	e17fff15 	stw	r5,-4(fp)
    cb->fn(text, (void*)cb->data);
    de38:	e0bffe17 	ldw	r2,-8(fp)
    de3c:	10800017 	ldw	r2,0(r2)
    de40:	e0fffe17 	ldw	r3,-8(fp)
    de44:	18c00117 	ldw	r3,4(r3)
    de48:	180b883a 	mov	r5,r3
    de4c:	e13fff17 	ldw	r4,-4(fp)
    de50:	103ee83a 	callr	r2
}
    de54:	0001883a 	nop
    de58:	e037883a 	mov	sp,fp
    de5c:	dfc00117 	ldw	ra,4(sp)
    de60:	df000017 	ldw	fp,0(sp)
    de64:	dec00204 	addi	sp,sp,8
    de68:	f800283a 	ret

0000de6c <checked_malloc>:
#else
#define VERIFY_CHECK(cond) do { (void)(cond); } while(0)
#define VERIFY_SETUP(stmt)
#endif

static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_t size) {
    de6c:	defffb04 	addi	sp,sp,-20
    de70:	dfc00415 	stw	ra,16(sp)
    de74:	df000315 	stw	fp,12(sp)
    de78:	df000304 	addi	fp,sp,12
    de7c:	e13ffe15 	stw	r4,-8(fp)
    de80:	e17fff15 	stw	r5,-4(fp)
    void *ret = malloc(size);
    de84:	e13fff17 	ldw	r4,-4(fp)
    de88:	00463400 	call	46340 <malloc>
    de8c:	e0bffd15 	stw	r2,-12(fp)
    if (ret == NULL) {
    de90:	e0bffd17 	ldw	r2,-12(fp)
    de94:	1000041e 	bne	r2,zero,dea8 <checked_malloc+0x3c>
        secp256k1_callback_call(cb, "Out of memory");
    de98:	01400174 	movhi	r5,5
    de9c:	2951d904 	addi	r5,r5,18276
    dea0:	e13ffe17 	ldw	r4,-8(fp)
    dea4:	000de200 	call	de20 <secp256k1_callback_call>
    }
    return ret;
    dea8:	e0bffd17 	ldw	r2,-12(fp)
}
    deac:	e037883a 	mov	sp,fp
    deb0:	dfc00117 	ldw	ra,4(sp)
    deb4:	df000017 	ldw	fp,0(sp)
    deb8:	dec00204 	addi	sp,sp,8
    debc:	f800283a 	ret

0000dec0 <secp256k1_sha256_initialize>:
#define BE32(x) (x)
#else
#define BE32(p) ((((p) & 0xFF) << 24) | (((p) & 0xFF00) << 8) | (((p) & 0xFF0000) >> 8) | (((p) & 0xFF000000) >> 24))
#endif

static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {
    dec0:	defffe04 	addi	sp,sp,-8
    dec4:	df000115 	stw	fp,4(sp)
    dec8:	df000104 	addi	fp,sp,4
    decc:	e13fff15 	stw	r4,-4(fp)
    hash->s[0] = 0x6a09e667ul;
    ded0:	e0ffff17 	ldw	r3,-4(fp)
    ded4:	009a82b4 	movhi	r2,27146
    ded8:	10b999c4 	addi	r2,r2,-6553
    dedc:	18800015 	stw	r2,0(r3)
    hash->s[1] = 0xbb67ae85ul;
    dee0:	e0ffff17 	ldw	r3,-4(fp)
    dee4:	00aeda34 	movhi	r2,47976
    dee8:	10aba144 	addi	r2,r2,-20859
    deec:	18800115 	stw	r2,4(r3)
    hash->s[2] = 0x3c6ef372ul;
    def0:	e0ffff17 	ldw	r3,-4(fp)
    def4:	008f1bf4 	movhi	r2,15471
    def8:	10bcdc84 	addi	r2,r2,-3214
    defc:	18800215 	stw	r2,8(r3)
    hash->s[3] = 0xa54ff53aul;
    df00:	e0ffff17 	ldw	r3,-4(fp)
    df04:	00a95434 	movhi	r2,42320
    df08:	10bd4e84 	addi	r2,r2,-2758
    df0c:	18800315 	stw	r2,12(r3)
    hash->s[4] = 0x510e527ful;
    df10:	e0ffff17 	ldw	r3,-4(fp)
    df14:	009443b4 	movhi	r2,20750
    df18:	10949fc4 	addi	r2,r2,21119
    df1c:	18800415 	stw	r2,16(r3)
    hash->s[5] = 0x9b05688cul;
    df20:	e0ffff17 	ldw	r3,-4(fp)
    df24:	00a6c174 	movhi	r2,39685
    df28:	109a2304 	addi	r2,r2,26764
    df2c:	18800515 	stw	r2,20(r3)
    hash->s[6] = 0x1f83d9abul;
    df30:	e0ffff17 	ldw	r3,-4(fp)
    df34:	0087e134 	movhi	r2,8068
    df38:	10b66ac4 	addi	r2,r2,-9813
    df3c:	18800615 	stw	r2,24(r3)
    hash->s[7] = 0x5be0cd19ul;
    df40:	e0ffff17 	ldw	r3,-4(fp)
    df44:	0096f874 	movhi	r2,23521
    df48:	10b34644 	addi	r2,r2,-13031
    df4c:	18800715 	stw	r2,28(r3)
    hash->bytes = 0;
    df50:	e0bfff17 	ldw	r2,-4(fp)
    df54:	10001815 	stw	zero,96(r2)
}
    df58:	0001883a 	nop
    df5c:	e037883a 	mov	sp,fp
    df60:	df000017 	ldw	fp,0(sp)
    df64:	dec00104 	addi	sp,sp,4
    df68:	f800283a 	ret

0000df6c <secp256k1_sha256_transform>:

/** Perform one SHA-256 transformation, processing 16 big endian 32-bit words. */
static void secp256k1_sha256_transform(uint32_t* s, const uint32_t* chunk) {
    df6c:	deff6504 	addi	sp,sp,-620
    df70:	df009a15 	stw	fp,616(sp)
    df74:	df009a04 	addi	fp,sp,616
    df78:	e13ffe15 	stw	r4,-8(fp)
    df7c:	e17fff15 	stw	r5,-4(fp)
    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
    df80:	e0bffe17 	ldw	r2,-8(fp)
    df84:	10800017 	ldw	r2,0(r2)
    df88:	e0bf6615 	stw	r2,-616(fp)
    df8c:	e0bffe17 	ldw	r2,-8(fp)
    df90:	10800117 	ldw	r2,4(r2)
    df94:	e0bf6715 	stw	r2,-612(fp)
    df98:	e0bffe17 	ldw	r2,-8(fp)
    df9c:	10800217 	ldw	r2,8(r2)
    dfa0:	e0bf6815 	stw	r2,-608(fp)
    dfa4:	e0bffe17 	ldw	r2,-8(fp)
    dfa8:	10800317 	ldw	r2,12(r2)
    dfac:	e0bf6915 	stw	r2,-604(fp)
    dfb0:	e0bffe17 	ldw	r2,-8(fp)
    dfb4:	10800417 	ldw	r2,16(r2)
    dfb8:	e0bf6a15 	stw	r2,-600(fp)
    dfbc:	e0bffe17 	ldw	r2,-8(fp)
    dfc0:	10800517 	ldw	r2,20(r2)
    dfc4:	e0bf6b15 	stw	r2,-596(fp)
    dfc8:	e0bffe17 	ldw	r2,-8(fp)
    dfcc:	10800617 	ldw	r2,24(r2)
    dfd0:	e0bf6c15 	stw	r2,-592(fp)
    dfd4:	e0bffe17 	ldw	r2,-8(fp)
    dfd8:	10800717 	ldw	r2,28(r2)
    dfdc:	e0bf6d15 	stw	r2,-588(fp)
    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;

    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = BE32(chunk[0]));
    dfe0:	e0ff6a17 	ldw	r3,-600(fp)
    dfe4:	00800184 	movi	r2,6
    dfe8:	1886583a 	ror	r3,r3,r2
    dfec:	e13f6a17 	ldw	r4,-600(fp)
    dff0:	008002c4 	movi	r2,11
    dff4:	2084583a 	ror	r2,r4,r2
    dff8:	1886f03a 	xor	r3,r3,r2
    dffc:	e0bf6a17 	ldw	r2,-600(fp)
    e000:	100411fa 	roli	r2,r2,7
    e004:	1886f03a 	xor	r3,r3,r2
    e008:	e0bf6d17 	ldw	r2,-588(fp)
    e00c:	1887883a 	add	r3,r3,r2
    e010:	e13f6b17 	ldw	r4,-596(fp)
    e014:	e0bf6c17 	ldw	r2,-592(fp)
    e018:	2088f03a 	xor	r4,r4,r2
    e01c:	e0bf6a17 	ldw	r2,-600(fp)
    e020:	2088703a 	and	r4,r4,r2
    e024:	e0bf6c17 	ldw	r2,-592(fp)
    e028:	2084f03a 	xor	r2,r4,r2
    e02c:	1887883a 	add	r3,r3,r2
    e030:	e0bfff17 	ldw	r2,-4(fp)
    e034:	10800017 	ldw	r2,0(r2)
    e038:	1008963a 	slli	r4,r2,24
    e03c:	e0bfff17 	ldw	r2,-4(fp)
    e040:	10800017 	ldw	r2,0(r2)
    e044:	10bfc00c 	andi	r2,r2,65280
    e048:	1004923a 	slli	r2,r2,8
    e04c:	2088b03a 	or	r4,r4,r2
    e050:	e0bfff17 	ldw	r2,-4(fp)
    e054:	10800017 	ldw	r2,0(r2)
    e058:	10803fec 	andhi	r2,r2,255
    e05c:	1004d23a 	srli	r2,r2,8
    e060:	2088b03a 	or	r4,r4,r2
    e064:	e0bfff17 	ldw	r2,-4(fp)
    e068:	10800017 	ldw	r2,0(r2)
    e06c:	1004d63a 	srli	r2,r2,24
    e070:	2084b03a 	or	r2,r4,r2
    e074:	e0bf6e15 	stw	r2,-584(fp)
    e078:	e0bf6e17 	ldw	r2,-584(fp)
    e07c:	1887883a 	add	r3,r3,r2
    e080:	0090a2b4 	movhi	r2,17034
    e084:	108be604 	addi	r2,r2,12184
    e088:	1885883a 	add	r2,r3,r2
    e08c:	e0bf6f15 	stw	r2,-580(fp)
    e090:	e0ff6617 	ldw	r3,-616(fp)
    e094:	00800084 	movi	r2,2
    e098:	1886583a 	ror	r3,r3,r2
    e09c:	e13f6617 	ldw	r4,-616(fp)
    e0a0:	00800344 	movi	r2,13
    e0a4:	2084583a 	ror	r2,r4,r2
    e0a8:	1886f03a 	xor	r3,r3,r2
    e0ac:	e0bf6617 	ldw	r2,-616(fp)
    e0b0:	100412ba 	roli	r2,r2,10
    e0b4:	1886f03a 	xor	r3,r3,r2
    e0b8:	e13f6617 	ldw	r4,-616(fp)
    e0bc:	e0bf6717 	ldw	r2,-612(fp)
    e0c0:	2088703a 	and	r4,r4,r2
    e0c4:	e17f6617 	ldw	r5,-616(fp)
    e0c8:	e0bf6717 	ldw	r2,-612(fp)
    e0cc:	288ab03a 	or	r5,r5,r2
    e0d0:	e0bf6817 	ldw	r2,-608(fp)
    e0d4:	2884703a 	and	r2,r5,r2
    e0d8:	2084b03a 	or	r2,r4,r2
    e0dc:	1885883a 	add	r2,r3,r2
    e0e0:	e0bf7015 	stw	r2,-576(fp)
    e0e4:	e0ff6917 	ldw	r3,-604(fp)
    e0e8:	e0bf6f17 	ldw	r2,-580(fp)
    e0ec:	1885883a 	add	r2,r3,r2
    e0f0:	e0bf6915 	stw	r2,-604(fp)
    e0f4:	e0ff6f17 	ldw	r3,-580(fp)
    e0f8:	e0bf7017 	ldw	r2,-576(fp)
    e0fc:	1885883a 	add	r2,r3,r2
    e100:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = BE32(chunk[1]));
    e104:	e0ff6917 	ldw	r3,-604(fp)
    e108:	00800184 	movi	r2,6
    e10c:	1886583a 	ror	r3,r3,r2
    e110:	e13f6917 	ldw	r4,-604(fp)
    e114:	008002c4 	movi	r2,11
    e118:	2084583a 	ror	r2,r4,r2
    e11c:	1886f03a 	xor	r3,r3,r2
    e120:	e0bf6917 	ldw	r2,-604(fp)
    e124:	100411fa 	roli	r2,r2,7
    e128:	1886f03a 	xor	r3,r3,r2
    e12c:	e0bf6c17 	ldw	r2,-592(fp)
    e130:	1887883a 	add	r3,r3,r2
    e134:	e13f6a17 	ldw	r4,-600(fp)
    e138:	e0bf6b17 	ldw	r2,-596(fp)
    e13c:	2088f03a 	xor	r4,r4,r2
    e140:	e0bf6917 	ldw	r2,-604(fp)
    e144:	2088703a 	and	r4,r4,r2
    e148:	e0bf6b17 	ldw	r2,-596(fp)
    e14c:	2084f03a 	xor	r2,r4,r2
    e150:	1887883a 	add	r3,r3,r2
    e154:	e0bfff17 	ldw	r2,-4(fp)
    e158:	10800104 	addi	r2,r2,4
    e15c:	10800017 	ldw	r2,0(r2)
    e160:	1008963a 	slli	r4,r2,24
    e164:	e0bfff17 	ldw	r2,-4(fp)
    e168:	10800104 	addi	r2,r2,4
    e16c:	10800017 	ldw	r2,0(r2)
    e170:	10bfc00c 	andi	r2,r2,65280
    e174:	1004923a 	slli	r2,r2,8
    e178:	2088b03a 	or	r4,r4,r2
    e17c:	e0bfff17 	ldw	r2,-4(fp)
    e180:	10800104 	addi	r2,r2,4
    e184:	10800017 	ldw	r2,0(r2)
    e188:	10803fec 	andhi	r2,r2,255
    e18c:	1004d23a 	srli	r2,r2,8
    e190:	2088b03a 	or	r4,r4,r2
    e194:	e0bfff17 	ldw	r2,-4(fp)
    e198:	10800104 	addi	r2,r2,4
    e19c:	10800017 	ldw	r2,0(r2)
    e1a0:	1004d63a 	srli	r2,r2,24
    e1a4:	2084b03a 	or	r2,r4,r2
    e1a8:	e0bf7115 	stw	r2,-572(fp)
    e1ac:	e0bf7117 	ldw	r2,-572(fp)
    e1b0:	1887883a 	add	r3,r3,r2
    e1b4:	009c4df4 	movhi	r2,28983
    e1b8:	10912444 	addi	r2,r2,17553
    e1bc:	1885883a 	add	r2,r3,r2
    e1c0:	e0bf7215 	stw	r2,-568(fp)
    e1c4:	e0ff6d17 	ldw	r3,-588(fp)
    e1c8:	00800084 	movi	r2,2
    e1cc:	1886583a 	ror	r3,r3,r2
    e1d0:	e13f6d17 	ldw	r4,-588(fp)
    e1d4:	00800344 	movi	r2,13
    e1d8:	2084583a 	ror	r2,r4,r2
    e1dc:	1886f03a 	xor	r3,r3,r2
    e1e0:	e0bf6d17 	ldw	r2,-588(fp)
    e1e4:	100412ba 	roli	r2,r2,10
    e1e8:	1886f03a 	xor	r3,r3,r2
    e1ec:	e13f6d17 	ldw	r4,-588(fp)
    e1f0:	e0bf6617 	ldw	r2,-616(fp)
    e1f4:	2088703a 	and	r4,r4,r2
    e1f8:	e17f6d17 	ldw	r5,-588(fp)
    e1fc:	e0bf6617 	ldw	r2,-616(fp)
    e200:	288ab03a 	or	r5,r5,r2
    e204:	e0bf6717 	ldw	r2,-612(fp)
    e208:	2884703a 	and	r2,r5,r2
    e20c:	2084b03a 	or	r2,r4,r2
    e210:	1885883a 	add	r2,r3,r2
    e214:	e0bf7315 	stw	r2,-564(fp)
    e218:	e0ff6817 	ldw	r3,-608(fp)
    e21c:	e0bf7217 	ldw	r2,-568(fp)
    e220:	1885883a 	add	r2,r3,r2
    e224:	e0bf6815 	stw	r2,-608(fp)
    e228:	e0ff7217 	ldw	r3,-568(fp)
    e22c:	e0bf7317 	ldw	r2,-564(fp)
    e230:	1885883a 	add	r2,r3,r2
    e234:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = BE32(chunk[2]));
    e238:	e0ff6817 	ldw	r3,-608(fp)
    e23c:	00800184 	movi	r2,6
    e240:	1886583a 	ror	r3,r3,r2
    e244:	e13f6817 	ldw	r4,-608(fp)
    e248:	008002c4 	movi	r2,11
    e24c:	2084583a 	ror	r2,r4,r2
    e250:	1886f03a 	xor	r3,r3,r2
    e254:	e0bf6817 	ldw	r2,-608(fp)
    e258:	100411fa 	roli	r2,r2,7
    e25c:	1886f03a 	xor	r3,r3,r2
    e260:	e0bf6b17 	ldw	r2,-596(fp)
    e264:	1887883a 	add	r3,r3,r2
    e268:	e13f6917 	ldw	r4,-604(fp)
    e26c:	e0bf6a17 	ldw	r2,-600(fp)
    e270:	2088f03a 	xor	r4,r4,r2
    e274:	e0bf6817 	ldw	r2,-608(fp)
    e278:	2088703a 	and	r4,r4,r2
    e27c:	e0bf6a17 	ldw	r2,-600(fp)
    e280:	2084f03a 	xor	r2,r4,r2
    e284:	1887883a 	add	r3,r3,r2
    e288:	e0bfff17 	ldw	r2,-4(fp)
    e28c:	10800204 	addi	r2,r2,8
    e290:	10800017 	ldw	r2,0(r2)
    e294:	1008963a 	slli	r4,r2,24
    e298:	e0bfff17 	ldw	r2,-4(fp)
    e29c:	10800204 	addi	r2,r2,8
    e2a0:	10800017 	ldw	r2,0(r2)
    e2a4:	10bfc00c 	andi	r2,r2,65280
    e2a8:	1004923a 	slli	r2,r2,8
    e2ac:	2088b03a 	or	r4,r4,r2
    e2b0:	e0bfff17 	ldw	r2,-4(fp)
    e2b4:	10800204 	addi	r2,r2,8
    e2b8:	10800017 	ldw	r2,0(r2)
    e2bc:	10803fec 	andhi	r2,r2,255
    e2c0:	1004d23a 	srli	r2,r2,8
    e2c4:	2088b03a 	or	r4,r4,r2
    e2c8:	e0bfff17 	ldw	r2,-4(fp)
    e2cc:	10800204 	addi	r2,r2,8
    e2d0:	10800017 	ldw	r2,0(r2)
    e2d4:	1004d63a 	srli	r2,r2,24
    e2d8:	2084b03a 	or	r2,r4,r2
    e2dc:	e0bf7415 	stw	r2,-560(fp)
    e2e0:	e0bf7417 	ldw	r2,-560(fp)
    e2e4:	1887883a 	add	r3,r3,r2
    e2e8:	00ad7074 	movhi	r2,46529
    e2ec:	10bef3c4 	addi	r2,r2,-1073
    e2f0:	1885883a 	add	r2,r3,r2
    e2f4:	e0bf7515 	stw	r2,-556(fp)
    e2f8:	e0ff6c17 	ldw	r3,-592(fp)
    e2fc:	00800084 	movi	r2,2
    e300:	1886583a 	ror	r3,r3,r2
    e304:	e13f6c17 	ldw	r4,-592(fp)
    e308:	00800344 	movi	r2,13
    e30c:	2084583a 	ror	r2,r4,r2
    e310:	1886f03a 	xor	r3,r3,r2
    e314:	e0bf6c17 	ldw	r2,-592(fp)
    e318:	100412ba 	roli	r2,r2,10
    e31c:	1886f03a 	xor	r3,r3,r2
    e320:	e13f6c17 	ldw	r4,-592(fp)
    e324:	e0bf6d17 	ldw	r2,-588(fp)
    e328:	2088703a 	and	r4,r4,r2
    e32c:	e17f6c17 	ldw	r5,-592(fp)
    e330:	e0bf6d17 	ldw	r2,-588(fp)
    e334:	288ab03a 	or	r5,r5,r2
    e338:	e0bf6617 	ldw	r2,-616(fp)
    e33c:	2884703a 	and	r2,r5,r2
    e340:	2084b03a 	or	r2,r4,r2
    e344:	1885883a 	add	r2,r3,r2
    e348:	e0bf7615 	stw	r2,-552(fp)
    e34c:	e0ff6717 	ldw	r3,-612(fp)
    e350:	e0bf7517 	ldw	r2,-556(fp)
    e354:	1885883a 	add	r2,r3,r2
    e358:	e0bf6715 	stw	r2,-612(fp)
    e35c:	e0ff7517 	ldw	r3,-556(fp)
    e360:	e0bf7617 	ldw	r2,-552(fp)
    e364:	1885883a 	add	r2,r3,r2
    e368:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = BE32(chunk[3]));
    e36c:	e0ff6717 	ldw	r3,-612(fp)
    e370:	00800184 	movi	r2,6
    e374:	1886583a 	ror	r3,r3,r2
    e378:	e13f6717 	ldw	r4,-612(fp)
    e37c:	008002c4 	movi	r2,11
    e380:	2084583a 	ror	r2,r4,r2
    e384:	1886f03a 	xor	r3,r3,r2
    e388:	e0bf6717 	ldw	r2,-612(fp)
    e38c:	100411fa 	roli	r2,r2,7
    e390:	1886f03a 	xor	r3,r3,r2
    e394:	e0bf6a17 	ldw	r2,-600(fp)
    e398:	1887883a 	add	r3,r3,r2
    e39c:	e13f6817 	ldw	r4,-608(fp)
    e3a0:	e0bf6917 	ldw	r2,-604(fp)
    e3a4:	2088f03a 	xor	r4,r4,r2
    e3a8:	e0bf6717 	ldw	r2,-612(fp)
    e3ac:	2088703a 	and	r4,r4,r2
    e3b0:	e0bf6917 	ldw	r2,-604(fp)
    e3b4:	2084f03a 	xor	r2,r4,r2
    e3b8:	1887883a 	add	r3,r3,r2
    e3bc:	e0bfff17 	ldw	r2,-4(fp)
    e3c0:	10800304 	addi	r2,r2,12
    e3c4:	10800017 	ldw	r2,0(r2)
    e3c8:	1008963a 	slli	r4,r2,24
    e3cc:	e0bfff17 	ldw	r2,-4(fp)
    e3d0:	10800304 	addi	r2,r2,12
    e3d4:	10800017 	ldw	r2,0(r2)
    e3d8:	10bfc00c 	andi	r2,r2,65280
    e3dc:	1004923a 	slli	r2,r2,8
    e3e0:	2088b03a 	or	r4,r4,r2
    e3e4:	e0bfff17 	ldw	r2,-4(fp)
    e3e8:	10800304 	addi	r2,r2,12
    e3ec:	10800017 	ldw	r2,0(r2)
    e3f0:	10803fec 	andhi	r2,r2,255
    e3f4:	1004d23a 	srli	r2,r2,8
    e3f8:	2088b03a 	or	r4,r4,r2
    e3fc:	e0bfff17 	ldw	r2,-4(fp)
    e400:	10800304 	addi	r2,r2,12
    e404:	10800017 	ldw	r2,0(r2)
    e408:	1004d63a 	srli	r2,r2,24
    e40c:	2084b03a 	or	r2,r4,r2
    e410:	e0bf7715 	stw	r2,-548(fp)
    e414:	e0bf7717 	ldw	r2,-548(fp)
    e418:	1887883a 	add	r3,r3,r2
    e41c:	00ba6db4 	movhi	r2,59830
    e420:	10b6e944 	addi	r2,r2,-9307
    e424:	1885883a 	add	r2,r3,r2
    e428:	e0bf7815 	stw	r2,-544(fp)
    e42c:	e0ff6b17 	ldw	r3,-596(fp)
    e430:	00800084 	movi	r2,2
    e434:	1886583a 	ror	r3,r3,r2
    e438:	e13f6b17 	ldw	r4,-596(fp)
    e43c:	00800344 	movi	r2,13
    e440:	2084583a 	ror	r2,r4,r2
    e444:	1886f03a 	xor	r3,r3,r2
    e448:	e0bf6b17 	ldw	r2,-596(fp)
    e44c:	100412ba 	roli	r2,r2,10
    e450:	1886f03a 	xor	r3,r3,r2
    e454:	e13f6b17 	ldw	r4,-596(fp)
    e458:	e0bf6c17 	ldw	r2,-592(fp)
    e45c:	2088703a 	and	r4,r4,r2
    e460:	e17f6b17 	ldw	r5,-596(fp)
    e464:	e0bf6c17 	ldw	r2,-592(fp)
    e468:	288ab03a 	or	r5,r5,r2
    e46c:	e0bf6d17 	ldw	r2,-588(fp)
    e470:	2884703a 	and	r2,r5,r2
    e474:	2084b03a 	or	r2,r4,r2
    e478:	1885883a 	add	r2,r3,r2
    e47c:	e0bf7915 	stw	r2,-540(fp)
    e480:	e0ff6617 	ldw	r3,-616(fp)
    e484:	e0bf7817 	ldw	r2,-544(fp)
    e488:	1885883a 	add	r2,r3,r2
    e48c:	e0bf6615 	stw	r2,-616(fp)
    e490:	e0ff7817 	ldw	r3,-544(fp)
    e494:	e0bf7917 	ldw	r2,-540(fp)
    e498:	1885883a 	add	r2,r3,r2
    e49c:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = BE32(chunk[4]));
    e4a0:	e0ff6617 	ldw	r3,-616(fp)
    e4a4:	00800184 	movi	r2,6
    e4a8:	1886583a 	ror	r3,r3,r2
    e4ac:	e13f6617 	ldw	r4,-616(fp)
    e4b0:	008002c4 	movi	r2,11
    e4b4:	2084583a 	ror	r2,r4,r2
    e4b8:	1886f03a 	xor	r3,r3,r2
    e4bc:	e0bf6617 	ldw	r2,-616(fp)
    e4c0:	100411fa 	roli	r2,r2,7
    e4c4:	1886f03a 	xor	r3,r3,r2
    e4c8:	e0bf6917 	ldw	r2,-604(fp)
    e4cc:	1887883a 	add	r3,r3,r2
    e4d0:	e13f6717 	ldw	r4,-612(fp)
    e4d4:	e0bf6817 	ldw	r2,-608(fp)
    e4d8:	2088f03a 	xor	r4,r4,r2
    e4dc:	e0bf6617 	ldw	r2,-616(fp)
    e4e0:	2088703a 	and	r4,r4,r2
    e4e4:	e0bf6817 	ldw	r2,-608(fp)
    e4e8:	2084f03a 	xor	r2,r4,r2
    e4ec:	1887883a 	add	r3,r3,r2
    e4f0:	e0bfff17 	ldw	r2,-4(fp)
    e4f4:	10800404 	addi	r2,r2,16
    e4f8:	10800017 	ldw	r2,0(r2)
    e4fc:	1008963a 	slli	r4,r2,24
    e500:	e0bfff17 	ldw	r2,-4(fp)
    e504:	10800404 	addi	r2,r2,16
    e508:	10800017 	ldw	r2,0(r2)
    e50c:	10bfc00c 	andi	r2,r2,65280
    e510:	1004923a 	slli	r2,r2,8
    e514:	2088b03a 	or	r4,r4,r2
    e518:	e0bfff17 	ldw	r2,-4(fp)
    e51c:	10800404 	addi	r2,r2,16
    e520:	10800017 	ldw	r2,0(r2)
    e524:	10803fec 	andhi	r2,r2,255
    e528:	1004d23a 	srli	r2,r2,8
    e52c:	2088b03a 	or	r4,r4,r2
    e530:	e0bfff17 	ldw	r2,-4(fp)
    e534:	10800404 	addi	r2,r2,16
    e538:	10800017 	ldw	r2,0(r2)
    e53c:	1004d63a 	srli	r2,r2,24
    e540:	2084b03a 	or	r2,r4,r2
    e544:	e0bf7a15 	stw	r2,-536(fp)
    e548:	e0bf7a17 	ldw	r2,-536(fp)
    e54c:	1887883a 	add	r3,r3,r2
    e550:	008e55f4 	movhi	r2,14679
    e554:	10b096c4 	addi	r2,r2,-15781
    e558:	1885883a 	add	r2,r3,r2
    e55c:	e0bf7b15 	stw	r2,-532(fp)
    e560:	e0ff6a17 	ldw	r3,-600(fp)
    e564:	00800084 	movi	r2,2
    e568:	1886583a 	ror	r3,r3,r2
    e56c:	e13f6a17 	ldw	r4,-600(fp)
    e570:	00800344 	movi	r2,13
    e574:	2084583a 	ror	r2,r4,r2
    e578:	1886f03a 	xor	r3,r3,r2
    e57c:	e0bf6a17 	ldw	r2,-600(fp)
    e580:	100412ba 	roli	r2,r2,10
    e584:	1886f03a 	xor	r3,r3,r2
    e588:	e13f6a17 	ldw	r4,-600(fp)
    e58c:	e0bf6b17 	ldw	r2,-596(fp)
    e590:	2088703a 	and	r4,r4,r2
    e594:	e17f6a17 	ldw	r5,-600(fp)
    e598:	e0bf6b17 	ldw	r2,-596(fp)
    e59c:	288ab03a 	or	r5,r5,r2
    e5a0:	e0bf6c17 	ldw	r2,-592(fp)
    e5a4:	2884703a 	and	r2,r5,r2
    e5a8:	2084b03a 	or	r2,r4,r2
    e5ac:	1885883a 	add	r2,r3,r2
    e5b0:	e0bf7c15 	stw	r2,-528(fp)
    e5b4:	e0ff6d17 	ldw	r3,-588(fp)
    e5b8:	e0bf7b17 	ldw	r2,-532(fp)
    e5bc:	1885883a 	add	r2,r3,r2
    e5c0:	e0bf6d15 	stw	r2,-588(fp)
    e5c4:	e0ff7b17 	ldw	r3,-532(fp)
    e5c8:	e0bf7c17 	ldw	r2,-528(fp)
    e5cc:	1885883a 	add	r2,r3,r2
    e5d0:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = BE32(chunk[5]));
    e5d4:	e0ff6d17 	ldw	r3,-588(fp)
    e5d8:	00800184 	movi	r2,6
    e5dc:	1886583a 	ror	r3,r3,r2
    e5e0:	e13f6d17 	ldw	r4,-588(fp)
    e5e4:	008002c4 	movi	r2,11
    e5e8:	2084583a 	ror	r2,r4,r2
    e5ec:	1886f03a 	xor	r3,r3,r2
    e5f0:	e0bf6d17 	ldw	r2,-588(fp)
    e5f4:	100411fa 	roli	r2,r2,7
    e5f8:	1886f03a 	xor	r3,r3,r2
    e5fc:	e0bf6817 	ldw	r2,-608(fp)
    e600:	1887883a 	add	r3,r3,r2
    e604:	e13f6617 	ldw	r4,-616(fp)
    e608:	e0bf6717 	ldw	r2,-612(fp)
    e60c:	2088f03a 	xor	r4,r4,r2
    e610:	e0bf6d17 	ldw	r2,-588(fp)
    e614:	2088703a 	and	r4,r4,r2
    e618:	e0bf6717 	ldw	r2,-612(fp)
    e61c:	2084f03a 	xor	r2,r4,r2
    e620:	1887883a 	add	r3,r3,r2
    e624:	e0bfff17 	ldw	r2,-4(fp)
    e628:	10800504 	addi	r2,r2,20
    e62c:	10800017 	ldw	r2,0(r2)
    e630:	1008963a 	slli	r4,r2,24
    e634:	e0bfff17 	ldw	r2,-4(fp)
    e638:	10800504 	addi	r2,r2,20
    e63c:	10800017 	ldw	r2,0(r2)
    e640:	10bfc00c 	andi	r2,r2,65280
    e644:	1004923a 	slli	r2,r2,8
    e648:	2088b03a 	or	r4,r4,r2
    e64c:	e0bfff17 	ldw	r2,-4(fp)
    e650:	10800504 	addi	r2,r2,20
    e654:	10800017 	ldw	r2,0(r2)
    e658:	10803fec 	andhi	r2,r2,255
    e65c:	1004d23a 	srli	r2,r2,8
    e660:	2088b03a 	or	r4,r4,r2
    e664:	e0bfff17 	ldw	r2,-4(fp)
    e668:	10800504 	addi	r2,r2,20
    e66c:	10800017 	ldw	r2,0(r2)
    e670:	1004d63a 	srli	r2,r2,24
    e674:	2084b03a 	or	r2,r4,r2
    e678:	e0bf7d15 	stw	r2,-524(fp)
    e67c:	e0bf7d17 	ldw	r2,-524(fp)
    e680:	1887883a 	add	r3,r3,r2
    e684:	00967c74 	movhi	r2,23025
    e688:	10847c44 	addi	r2,r2,4593
    e68c:	1885883a 	add	r2,r3,r2
    e690:	e0bf7e15 	stw	r2,-520(fp)
    e694:	e0ff6917 	ldw	r3,-604(fp)
    e698:	00800084 	movi	r2,2
    e69c:	1886583a 	ror	r3,r3,r2
    e6a0:	e13f6917 	ldw	r4,-604(fp)
    e6a4:	00800344 	movi	r2,13
    e6a8:	2084583a 	ror	r2,r4,r2
    e6ac:	1886f03a 	xor	r3,r3,r2
    e6b0:	e0bf6917 	ldw	r2,-604(fp)
    e6b4:	100412ba 	roli	r2,r2,10
    e6b8:	1886f03a 	xor	r3,r3,r2
    e6bc:	e13f6917 	ldw	r4,-604(fp)
    e6c0:	e0bf6a17 	ldw	r2,-600(fp)
    e6c4:	2088703a 	and	r4,r4,r2
    e6c8:	e17f6917 	ldw	r5,-604(fp)
    e6cc:	e0bf6a17 	ldw	r2,-600(fp)
    e6d0:	288ab03a 	or	r5,r5,r2
    e6d4:	e0bf6b17 	ldw	r2,-596(fp)
    e6d8:	2884703a 	and	r2,r5,r2
    e6dc:	2084b03a 	or	r2,r4,r2
    e6e0:	1885883a 	add	r2,r3,r2
    e6e4:	e0bf7f15 	stw	r2,-516(fp)
    e6e8:	e0ff6c17 	ldw	r3,-592(fp)
    e6ec:	e0bf7e17 	ldw	r2,-520(fp)
    e6f0:	1885883a 	add	r2,r3,r2
    e6f4:	e0bf6c15 	stw	r2,-592(fp)
    e6f8:	e0ff7e17 	ldw	r3,-520(fp)
    e6fc:	e0bf7f17 	ldw	r2,-516(fp)
    e700:	1885883a 	add	r2,r3,r2
    e704:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = BE32(chunk[6]));
    e708:	e0ff6c17 	ldw	r3,-592(fp)
    e70c:	00800184 	movi	r2,6
    e710:	1886583a 	ror	r3,r3,r2
    e714:	e13f6c17 	ldw	r4,-592(fp)
    e718:	008002c4 	movi	r2,11
    e71c:	2084583a 	ror	r2,r4,r2
    e720:	1886f03a 	xor	r3,r3,r2
    e724:	e0bf6c17 	ldw	r2,-592(fp)
    e728:	100411fa 	roli	r2,r2,7
    e72c:	1886f03a 	xor	r3,r3,r2
    e730:	e0bf6717 	ldw	r2,-612(fp)
    e734:	1887883a 	add	r3,r3,r2
    e738:	e13f6d17 	ldw	r4,-588(fp)
    e73c:	e0bf6617 	ldw	r2,-616(fp)
    e740:	2088f03a 	xor	r4,r4,r2
    e744:	e0bf6c17 	ldw	r2,-592(fp)
    e748:	2088703a 	and	r4,r4,r2
    e74c:	e0bf6617 	ldw	r2,-616(fp)
    e750:	2084f03a 	xor	r2,r4,r2
    e754:	1887883a 	add	r3,r3,r2
    e758:	e0bfff17 	ldw	r2,-4(fp)
    e75c:	10800604 	addi	r2,r2,24
    e760:	10800017 	ldw	r2,0(r2)
    e764:	1008963a 	slli	r4,r2,24
    e768:	e0bfff17 	ldw	r2,-4(fp)
    e76c:	10800604 	addi	r2,r2,24
    e770:	10800017 	ldw	r2,0(r2)
    e774:	10bfc00c 	andi	r2,r2,65280
    e778:	1004923a 	slli	r2,r2,8
    e77c:	2088b03a 	or	r4,r4,r2
    e780:	e0bfff17 	ldw	r2,-4(fp)
    e784:	10800604 	addi	r2,r2,24
    e788:	10800017 	ldw	r2,0(r2)
    e78c:	10803fec 	andhi	r2,r2,255
    e790:	1004d23a 	srli	r2,r2,8
    e794:	2088b03a 	or	r4,r4,r2
    e798:	e0bfff17 	ldw	r2,-4(fp)
    e79c:	10800604 	addi	r2,r2,24
    e7a0:	10800017 	ldw	r2,0(r2)
    e7a4:	1004d63a 	srli	r2,r2,24
    e7a8:	2084b03a 	or	r2,r4,r2
    e7ac:	e0bf8015 	stw	r2,-512(fp)
    e7b0:	e0bf8017 	ldw	r2,-512(fp)
    e7b4:	1887883a 	add	r3,r3,r2
    e7b8:	00a49034 	movhi	r2,37440
    e7bc:	10a0a904 	addi	r2,r2,-32092
    e7c0:	1885883a 	add	r2,r3,r2
    e7c4:	e0bf8115 	stw	r2,-508(fp)
    e7c8:	e0ff6817 	ldw	r3,-608(fp)
    e7cc:	00800084 	movi	r2,2
    e7d0:	1886583a 	ror	r3,r3,r2
    e7d4:	e13f6817 	ldw	r4,-608(fp)
    e7d8:	00800344 	movi	r2,13
    e7dc:	2084583a 	ror	r2,r4,r2
    e7e0:	1886f03a 	xor	r3,r3,r2
    e7e4:	e0bf6817 	ldw	r2,-608(fp)
    e7e8:	100412ba 	roli	r2,r2,10
    e7ec:	1886f03a 	xor	r3,r3,r2
    e7f0:	e13f6817 	ldw	r4,-608(fp)
    e7f4:	e0bf6917 	ldw	r2,-604(fp)
    e7f8:	2088703a 	and	r4,r4,r2
    e7fc:	e17f6817 	ldw	r5,-608(fp)
    e800:	e0bf6917 	ldw	r2,-604(fp)
    e804:	288ab03a 	or	r5,r5,r2
    e808:	e0bf6a17 	ldw	r2,-600(fp)
    e80c:	2884703a 	and	r2,r5,r2
    e810:	2084b03a 	or	r2,r4,r2
    e814:	1885883a 	add	r2,r3,r2
    e818:	e0bf8215 	stw	r2,-504(fp)
    e81c:	e0ff6b17 	ldw	r3,-596(fp)
    e820:	e0bf8117 	ldw	r2,-508(fp)
    e824:	1885883a 	add	r2,r3,r2
    e828:	e0bf6b15 	stw	r2,-596(fp)
    e82c:	e0ff8117 	ldw	r3,-508(fp)
    e830:	e0bf8217 	ldw	r2,-504(fp)
    e834:	1885883a 	add	r2,r3,r2
    e838:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = BE32(chunk[7]));
    e83c:	e0ff6b17 	ldw	r3,-596(fp)
    e840:	00800184 	movi	r2,6
    e844:	1886583a 	ror	r3,r3,r2
    e848:	e13f6b17 	ldw	r4,-596(fp)
    e84c:	008002c4 	movi	r2,11
    e850:	2084583a 	ror	r2,r4,r2
    e854:	1886f03a 	xor	r3,r3,r2
    e858:	e0bf6b17 	ldw	r2,-596(fp)
    e85c:	100411fa 	roli	r2,r2,7
    e860:	1886f03a 	xor	r3,r3,r2
    e864:	e0bf6617 	ldw	r2,-616(fp)
    e868:	1887883a 	add	r3,r3,r2
    e86c:	e13f6c17 	ldw	r4,-592(fp)
    e870:	e0bf6d17 	ldw	r2,-588(fp)
    e874:	2088f03a 	xor	r4,r4,r2
    e878:	e0bf6b17 	ldw	r2,-596(fp)
    e87c:	2088703a 	and	r4,r4,r2
    e880:	e0bf6d17 	ldw	r2,-588(fp)
    e884:	2084f03a 	xor	r2,r4,r2
    e888:	1887883a 	add	r3,r3,r2
    e88c:	e0bfff17 	ldw	r2,-4(fp)
    e890:	10800704 	addi	r2,r2,28
    e894:	10800017 	ldw	r2,0(r2)
    e898:	1008963a 	slli	r4,r2,24
    e89c:	e0bfff17 	ldw	r2,-4(fp)
    e8a0:	10800704 	addi	r2,r2,28
    e8a4:	10800017 	ldw	r2,0(r2)
    e8a8:	10bfc00c 	andi	r2,r2,65280
    e8ac:	1004923a 	slli	r2,r2,8
    e8b0:	2088b03a 	or	r4,r4,r2
    e8b4:	e0bfff17 	ldw	r2,-4(fp)
    e8b8:	10800704 	addi	r2,r2,28
    e8bc:	10800017 	ldw	r2,0(r2)
    e8c0:	10803fec 	andhi	r2,r2,255
    e8c4:	1004d23a 	srli	r2,r2,8
    e8c8:	2088b03a 	or	r4,r4,r2
    e8cc:	e0bfff17 	ldw	r2,-4(fp)
    e8d0:	10800704 	addi	r2,r2,28
    e8d4:	10800017 	ldw	r2,0(r2)
    e8d8:	1004d63a 	srli	r2,r2,24
    e8dc:	2084b03a 	or	r2,r4,r2
    e8e0:	e0bf8315 	stw	r2,-500(fp)
    e8e4:	e0bf8317 	ldw	r2,-500(fp)
    e8e8:	1887883a 	add	r3,r3,r2
    e8ec:	00aac734 	movhi	r2,43804
    e8f0:	1097b544 	addi	r2,r2,24277
    e8f4:	1885883a 	add	r2,r3,r2
    e8f8:	e0bf8415 	stw	r2,-496(fp)
    e8fc:	e0ff6717 	ldw	r3,-612(fp)
    e900:	00800084 	movi	r2,2
    e904:	1886583a 	ror	r3,r3,r2
    e908:	e13f6717 	ldw	r4,-612(fp)
    e90c:	00800344 	movi	r2,13
    e910:	2084583a 	ror	r2,r4,r2
    e914:	1886f03a 	xor	r3,r3,r2
    e918:	e0bf6717 	ldw	r2,-612(fp)
    e91c:	100412ba 	roli	r2,r2,10
    e920:	1886f03a 	xor	r3,r3,r2
    e924:	e13f6717 	ldw	r4,-612(fp)
    e928:	e0bf6817 	ldw	r2,-608(fp)
    e92c:	2088703a 	and	r4,r4,r2
    e930:	e17f6717 	ldw	r5,-612(fp)
    e934:	e0bf6817 	ldw	r2,-608(fp)
    e938:	288ab03a 	or	r5,r5,r2
    e93c:	e0bf6917 	ldw	r2,-604(fp)
    e940:	2884703a 	and	r2,r5,r2
    e944:	2084b03a 	or	r2,r4,r2
    e948:	1885883a 	add	r2,r3,r2
    e94c:	e0bf8515 	stw	r2,-492(fp)
    e950:	e0ff6a17 	ldw	r3,-600(fp)
    e954:	e0bf8417 	ldw	r2,-496(fp)
    e958:	1885883a 	add	r2,r3,r2
    e95c:	e0bf6a15 	stw	r2,-600(fp)
    e960:	e0ff8417 	ldw	r3,-496(fp)
    e964:	e0bf8517 	ldw	r2,-492(fp)
    e968:	1885883a 	add	r2,r3,r2
    e96c:	e0bf6615 	stw	r2,-616(fp)
    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = BE32(chunk[8]));
    e970:	e0ff6a17 	ldw	r3,-600(fp)
    e974:	00800184 	movi	r2,6
    e978:	1886583a 	ror	r3,r3,r2
    e97c:	e13f6a17 	ldw	r4,-600(fp)
    e980:	008002c4 	movi	r2,11
    e984:	2084583a 	ror	r2,r4,r2
    e988:	1886f03a 	xor	r3,r3,r2
    e98c:	e0bf6a17 	ldw	r2,-600(fp)
    e990:	100411fa 	roli	r2,r2,7
    e994:	1886f03a 	xor	r3,r3,r2
    e998:	e0bf6d17 	ldw	r2,-588(fp)
    e99c:	1887883a 	add	r3,r3,r2
    e9a0:	e13f6b17 	ldw	r4,-596(fp)
    e9a4:	e0bf6c17 	ldw	r2,-592(fp)
    e9a8:	2088f03a 	xor	r4,r4,r2
    e9ac:	e0bf6a17 	ldw	r2,-600(fp)
    e9b0:	2088703a 	and	r4,r4,r2
    e9b4:	e0bf6c17 	ldw	r2,-592(fp)
    e9b8:	2084f03a 	xor	r2,r4,r2
    e9bc:	1887883a 	add	r3,r3,r2
    e9c0:	e0bfff17 	ldw	r2,-4(fp)
    e9c4:	10800804 	addi	r2,r2,32
    e9c8:	10800017 	ldw	r2,0(r2)
    e9cc:	1008963a 	slli	r4,r2,24
    e9d0:	e0bfff17 	ldw	r2,-4(fp)
    e9d4:	10800804 	addi	r2,r2,32
    e9d8:	10800017 	ldw	r2,0(r2)
    e9dc:	10bfc00c 	andi	r2,r2,65280
    e9e0:	1004923a 	slli	r2,r2,8
    e9e4:	2088b03a 	or	r4,r4,r2
    e9e8:	e0bfff17 	ldw	r2,-4(fp)
    e9ec:	10800804 	addi	r2,r2,32
    e9f0:	10800017 	ldw	r2,0(r2)
    e9f4:	10803fec 	andhi	r2,r2,255
    e9f8:	1004d23a 	srli	r2,r2,8
    e9fc:	2088b03a 	or	r4,r4,r2
    ea00:	e0bfff17 	ldw	r2,-4(fp)
    ea04:	10800804 	addi	r2,r2,32
    ea08:	10800017 	ldw	r2,0(r2)
    ea0c:	1004d63a 	srli	r2,r2,24
    ea10:	2084b03a 	or	r2,r4,r2
    ea14:	e0bf8615 	stw	r2,-488(fp)
    ea18:	e0bf8617 	ldw	r2,-488(fp)
    ea1c:	1887883a 	add	r3,r3,r2
    ea20:	00b60234 	movhi	r2,55304
    ea24:	10aaa604 	addi	r2,r2,-21864
    ea28:	1885883a 	add	r2,r3,r2
    ea2c:	e0bf8715 	stw	r2,-484(fp)
    ea30:	e0ff6617 	ldw	r3,-616(fp)
    ea34:	00800084 	movi	r2,2
    ea38:	1886583a 	ror	r3,r3,r2
    ea3c:	e13f6617 	ldw	r4,-616(fp)
    ea40:	00800344 	movi	r2,13
    ea44:	2084583a 	ror	r2,r4,r2
    ea48:	1886f03a 	xor	r3,r3,r2
    ea4c:	e0bf6617 	ldw	r2,-616(fp)
    ea50:	100412ba 	roli	r2,r2,10
    ea54:	1886f03a 	xor	r3,r3,r2
    ea58:	e13f6617 	ldw	r4,-616(fp)
    ea5c:	e0bf6717 	ldw	r2,-612(fp)
    ea60:	2088703a 	and	r4,r4,r2
    ea64:	e17f6617 	ldw	r5,-616(fp)
    ea68:	e0bf6717 	ldw	r2,-612(fp)
    ea6c:	288ab03a 	or	r5,r5,r2
    ea70:	e0bf6817 	ldw	r2,-608(fp)
    ea74:	2884703a 	and	r2,r5,r2
    ea78:	2084b03a 	or	r2,r4,r2
    ea7c:	1885883a 	add	r2,r3,r2
    ea80:	e0bf8815 	stw	r2,-480(fp)
    ea84:	e0ff6917 	ldw	r3,-604(fp)
    ea88:	e0bf8717 	ldw	r2,-484(fp)
    ea8c:	1885883a 	add	r2,r3,r2
    ea90:	e0bf6915 	stw	r2,-604(fp)
    ea94:	e0ff8717 	ldw	r3,-484(fp)
    ea98:	e0bf8817 	ldw	r2,-480(fp)
    ea9c:	1885883a 	add	r2,r3,r2
    eaa0:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = BE32(chunk[9]));
    eaa4:	e0ff6917 	ldw	r3,-604(fp)
    eaa8:	00800184 	movi	r2,6
    eaac:	1886583a 	ror	r3,r3,r2
    eab0:	e13f6917 	ldw	r4,-604(fp)
    eab4:	008002c4 	movi	r2,11
    eab8:	2084583a 	ror	r2,r4,r2
    eabc:	1886f03a 	xor	r3,r3,r2
    eac0:	e0bf6917 	ldw	r2,-604(fp)
    eac4:	100411fa 	roli	r2,r2,7
    eac8:	1886f03a 	xor	r3,r3,r2
    eacc:	e0bf6c17 	ldw	r2,-592(fp)
    ead0:	1887883a 	add	r3,r3,r2
    ead4:	e13f6a17 	ldw	r4,-600(fp)
    ead8:	e0bf6b17 	ldw	r2,-596(fp)
    eadc:	2088f03a 	xor	r4,r4,r2
    eae0:	e0bf6917 	ldw	r2,-604(fp)
    eae4:	2088703a 	and	r4,r4,r2
    eae8:	e0bf6b17 	ldw	r2,-596(fp)
    eaec:	2084f03a 	xor	r2,r4,r2
    eaf0:	1887883a 	add	r3,r3,r2
    eaf4:	e0bfff17 	ldw	r2,-4(fp)
    eaf8:	10800904 	addi	r2,r2,36
    eafc:	10800017 	ldw	r2,0(r2)
    eb00:	1008963a 	slli	r4,r2,24
    eb04:	e0bfff17 	ldw	r2,-4(fp)
    eb08:	10800904 	addi	r2,r2,36
    eb0c:	10800017 	ldw	r2,0(r2)
    eb10:	10bfc00c 	andi	r2,r2,65280
    eb14:	1004923a 	slli	r2,r2,8
    eb18:	2088b03a 	or	r4,r4,r2
    eb1c:	e0bfff17 	ldw	r2,-4(fp)
    eb20:	10800904 	addi	r2,r2,36
    eb24:	10800017 	ldw	r2,0(r2)
    eb28:	10803fec 	andhi	r2,r2,255
    eb2c:	1004d23a 	srli	r2,r2,8
    eb30:	2088b03a 	or	r4,r4,r2
    eb34:	e0bfff17 	ldw	r2,-4(fp)
    eb38:	10800904 	addi	r2,r2,36
    eb3c:	10800017 	ldw	r2,0(r2)
    eb40:	1004d63a 	srli	r2,r2,24
    eb44:	2084b03a 	or	r2,r4,r2
    eb48:	e0bf8915 	stw	r2,-476(fp)
    eb4c:	e0bf8917 	ldw	r2,-476(fp)
    eb50:	1887883a 	add	r3,r3,r2
    eb54:	0084a0f4 	movhi	r2,4739
    eb58:	1096c044 	addi	r2,r2,23297
    eb5c:	1885883a 	add	r2,r3,r2
    eb60:	e0bf8a15 	stw	r2,-472(fp)
    eb64:	e0ff6d17 	ldw	r3,-588(fp)
    eb68:	00800084 	movi	r2,2
    eb6c:	1886583a 	ror	r3,r3,r2
    eb70:	e13f6d17 	ldw	r4,-588(fp)
    eb74:	00800344 	movi	r2,13
    eb78:	2084583a 	ror	r2,r4,r2
    eb7c:	1886f03a 	xor	r3,r3,r2
    eb80:	e0bf6d17 	ldw	r2,-588(fp)
    eb84:	100412ba 	roli	r2,r2,10
    eb88:	1886f03a 	xor	r3,r3,r2
    eb8c:	e13f6d17 	ldw	r4,-588(fp)
    eb90:	e0bf6617 	ldw	r2,-616(fp)
    eb94:	2088703a 	and	r4,r4,r2
    eb98:	e17f6d17 	ldw	r5,-588(fp)
    eb9c:	e0bf6617 	ldw	r2,-616(fp)
    eba0:	288ab03a 	or	r5,r5,r2
    eba4:	e0bf6717 	ldw	r2,-612(fp)
    eba8:	2884703a 	and	r2,r5,r2
    ebac:	2084b03a 	or	r2,r4,r2
    ebb0:	1885883a 	add	r2,r3,r2
    ebb4:	e0bf8b15 	stw	r2,-468(fp)
    ebb8:	e0ff6817 	ldw	r3,-608(fp)
    ebbc:	e0bf8a17 	ldw	r2,-472(fp)
    ebc0:	1885883a 	add	r2,r3,r2
    ebc4:	e0bf6815 	stw	r2,-608(fp)
    ebc8:	e0ff8a17 	ldw	r3,-472(fp)
    ebcc:	e0bf8b17 	ldw	r2,-468(fp)
    ebd0:	1885883a 	add	r2,r3,r2
    ebd4:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = BE32(chunk[10]));
    ebd8:	e0ff6817 	ldw	r3,-608(fp)
    ebdc:	00800184 	movi	r2,6
    ebe0:	1886583a 	ror	r3,r3,r2
    ebe4:	e13f6817 	ldw	r4,-608(fp)
    ebe8:	008002c4 	movi	r2,11
    ebec:	2084583a 	ror	r2,r4,r2
    ebf0:	1886f03a 	xor	r3,r3,r2
    ebf4:	e0bf6817 	ldw	r2,-608(fp)
    ebf8:	100411fa 	roli	r2,r2,7
    ebfc:	1886f03a 	xor	r3,r3,r2
    ec00:	e0bf6b17 	ldw	r2,-596(fp)
    ec04:	1887883a 	add	r3,r3,r2
    ec08:	e13f6917 	ldw	r4,-604(fp)
    ec0c:	e0bf6a17 	ldw	r2,-600(fp)
    ec10:	2088f03a 	xor	r4,r4,r2
    ec14:	e0bf6817 	ldw	r2,-608(fp)
    ec18:	2088703a 	and	r4,r4,r2
    ec1c:	e0bf6a17 	ldw	r2,-600(fp)
    ec20:	2084f03a 	xor	r2,r4,r2
    ec24:	1887883a 	add	r3,r3,r2
    ec28:	e0bfff17 	ldw	r2,-4(fp)
    ec2c:	10800a04 	addi	r2,r2,40
    ec30:	10800017 	ldw	r2,0(r2)
    ec34:	1008963a 	slli	r4,r2,24
    ec38:	e0bfff17 	ldw	r2,-4(fp)
    ec3c:	10800a04 	addi	r2,r2,40
    ec40:	10800017 	ldw	r2,0(r2)
    ec44:	10bfc00c 	andi	r2,r2,65280
    ec48:	1004923a 	slli	r2,r2,8
    ec4c:	2088b03a 	or	r4,r4,r2
    ec50:	e0bfff17 	ldw	r2,-4(fp)
    ec54:	10800a04 	addi	r2,r2,40
    ec58:	10800017 	ldw	r2,0(r2)
    ec5c:	10803fec 	andhi	r2,r2,255
    ec60:	1004d23a 	srli	r2,r2,8
    ec64:	2088b03a 	or	r4,r4,r2
    ec68:	e0bfff17 	ldw	r2,-4(fp)
    ec6c:	10800a04 	addi	r2,r2,40
    ec70:	10800017 	ldw	r2,0(r2)
    ec74:	1004d63a 	srli	r2,r2,24
    ec78:	2084b03a 	or	r2,r4,r2
    ec7c:	e0bf8c15 	stw	r2,-464(fp)
    ec80:	e0bf8c17 	ldw	r2,-464(fp)
    ec84:	1887883a 	add	r3,r3,r2
    ec88:	00890cb4 	movhi	r2,9266
    ec8c:	10a16f84 	addi	r2,r2,-31298
    ec90:	1885883a 	add	r2,r3,r2
    ec94:	e0bf8d15 	stw	r2,-460(fp)
    ec98:	e0ff6c17 	ldw	r3,-592(fp)
    ec9c:	00800084 	movi	r2,2
    eca0:	1886583a 	ror	r3,r3,r2
    eca4:	e13f6c17 	ldw	r4,-592(fp)
    eca8:	00800344 	movi	r2,13
    ecac:	2084583a 	ror	r2,r4,r2
    ecb0:	1886f03a 	xor	r3,r3,r2
    ecb4:	e0bf6c17 	ldw	r2,-592(fp)
    ecb8:	100412ba 	roli	r2,r2,10
    ecbc:	1886f03a 	xor	r3,r3,r2
    ecc0:	e13f6c17 	ldw	r4,-592(fp)
    ecc4:	e0bf6d17 	ldw	r2,-588(fp)
    ecc8:	2088703a 	and	r4,r4,r2
    eccc:	e17f6c17 	ldw	r5,-592(fp)
    ecd0:	e0bf6d17 	ldw	r2,-588(fp)
    ecd4:	288ab03a 	or	r5,r5,r2
    ecd8:	e0bf6617 	ldw	r2,-616(fp)
    ecdc:	2884703a 	and	r2,r5,r2
    ece0:	2084b03a 	or	r2,r4,r2
    ece4:	1885883a 	add	r2,r3,r2
    ece8:	e0bf8e15 	stw	r2,-456(fp)
    ecec:	e0ff6717 	ldw	r3,-612(fp)
    ecf0:	e0bf8d17 	ldw	r2,-460(fp)
    ecf4:	1885883a 	add	r2,r3,r2
    ecf8:	e0bf6715 	stw	r2,-612(fp)
    ecfc:	e0ff8d17 	ldw	r3,-460(fp)
    ed00:	e0bf8e17 	ldw	r2,-456(fp)
    ed04:	1885883a 	add	r2,r3,r2
    ed08:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = BE32(chunk[11]));
    ed0c:	e0ff6717 	ldw	r3,-612(fp)
    ed10:	00800184 	movi	r2,6
    ed14:	1886583a 	ror	r3,r3,r2
    ed18:	e13f6717 	ldw	r4,-612(fp)
    ed1c:	008002c4 	movi	r2,11
    ed20:	2084583a 	ror	r2,r4,r2
    ed24:	1886f03a 	xor	r3,r3,r2
    ed28:	e0bf6717 	ldw	r2,-612(fp)
    ed2c:	100411fa 	roli	r2,r2,7
    ed30:	1886f03a 	xor	r3,r3,r2
    ed34:	e0bf6a17 	ldw	r2,-600(fp)
    ed38:	1887883a 	add	r3,r3,r2
    ed3c:	e13f6817 	ldw	r4,-608(fp)
    ed40:	e0bf6917 	ldw	r2,-604(fp)
    ed44:	2088f03a 	xor	r4,r4,r2
    ed48:	e0bf6717 	ldw	r2,-612(fp)
    ed4c:	2088703a 	and	r4,r4,r2
    ed50:	e0bf6917 	ldw	r2,-604(fp)
    ed54:	2084f03a 	xor	r2,r4,r2
    ed58:	1887883a 	add	r3,r3,r2
    ed5c:	e0bfff17 	ldw	r2,-4(fp)
    ed60:	10800b04 	addi	r2,r2,44
    ed64:	10800017 	ldw	r2,0(r2)
    ed68:	1008963a 	slli	r4,r2,24
    ed6c:	e0bfff17 	ldw	r2,-4(fp)
    ed70:	10800b04 	addi	r2,r2,44
    ed74:	10800017 	ldw	r2,0(r2)
    ed78:	10bfc00c 	andi	r2,r2,65280
    ed7c:	1004923a 	slli	r2,r2,8
    ed80:	2088b03a 	or	r4,r4,r2
    ed84:	e0bfff17 	ldw	r2,-4(fp)
    ed88:	10800b04 	addi	r2,r2,44
    ed8c:	10800017 	ldw	r2,0(r2)
    ed90:	10803fec 	andhi	r2,r2,255
    ed94:	1004d23a 	srli	r2,r2,8
    ed98:	2088b03a 	or	r4,r4,r2
    ed9c:	e0bfff17 	ldw	r2,-4(fp)
    eda0:	10800b04 	addi	r2,r2,44
    eda4:	10800017 	ldw	r2,0(r2)
    eda8:	1004d63a 	srli	r2,r2,24
    edac:	2084b03a 	or	r2,r4,r2
    edb0:	e0bf8f15 	stw	r2,-452(fp)
    edb4:	e0bf8f17 	ldw	r2,-452(fp)
    edb8:	1887883a 	add	r3,r3,r2
    edbc:	00954334 	movhi	r2,21772
    edc0:	109f70c4 	addi	r2,r2,32195
    edc4:	1885883a 	add	r2,r3,r2
    edc8:	e0bf9015 	stw	r2,-448(fp)
    edcc:	e0ff6b17 	ldw	r3,-596(fp)
    edd0:	00800084 	movi	r2,2
    edd4:	1886583a 	ror	r3,r3,r2
    edd8:	e13f6b17 	ldw	r4,-596(fp)
    eddc:	00800344 	movi	r2,13
    ede0:	2084583a 	ror	r2,r4,r2
    ede4:	1886f03a 	xor	r3,r3,r2
    ede8:	e0bf6b17 	ldw	r2,-596(fp)
    edec:	100412ba 	roli	r2,r2,10
    edf0:	1886f03a 	xor	r3,r3,r2
    edf4:	e13f6b17 	ldw	r4,-596(fp)
    edf8:	e0bf6c17 	ldw	r2,-592(fp)
    edfc:	2088703a 	and	r4,r4,r2
    ee00:	e17f6b17 	ldw	r5,-596(fp)
    ee04:	e0bf6c17 	ldw	r2,-592(fp)
    ee08:	288ab03a 	or	r5,r5,r2
    ee0c:	e0bf6d17 	ldw	r2,-588(fp)
    ee10:	2884703a 	and	r2,r5,r2
    ee14:	2084b03a 	or	r2,r4,r2
    ee18:	1885883a 	add	r2,r3,r2
    ee1c:	e0bf9115 	stw	r2,-444(fp)
    ee20:	e0ff6617 	ldw	r3,-616(fp)
    ee24:	e0bf9017 	ldw	r2,-448(fp)
    ee28:	1885883a 	add	r2,r3,r2
    ee2c:	e0bf6615 	stw	r2,-616(fp)
    ee30:	e0ff9017 	ldw	r3,-448(fp)
    ee34:	e0bf9117 	ldw	r2,-444(fp)
    ee38:	1885883a 	add	r2,r3,r2
    ee3c:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = BE32(chunk[12]));
    ee40:	e0ff6617 	ldw	r3,-616(fp)
    ee44:	00800184 	movi	r2,6
    ee48:	1886583a 	ror	r3,r3,r2
    ee4c:	e13f6617 	ldw	r4,-616(fp)
    ee50:	008002c4 	movi	r2,11
    ee54:	2084583a 	ror	r2,r4,r2
    ee58:	1886f03a 	xor	r3,r3,r2
    ee5c:	e0bf6617 	ldw	r2,-616(fp)
    ee60:	100411fa 	roli	r2,r2,7
    ee64:	1886f03a 	xor	r3,r3,r2
    ee68:	e0bf6917 	ldw	r2,-604(fp)
    ee6c:	1887883a 	add	r3,r3,r2
    ee70:	e13f6717 	ldw	r4,-612(fp)
    ee74:	e0bf6817 	ldw	r2,-608(fp)
    ee78:	2088f03a 	xor	r4,r4,r2
    ee7c:	e0bf6617 	ldw	r2,-616(fp)
    ee80:	2088703a 	and	r4,r4,r2
    ee84:	e0bf6817 	ldw	r2,-608(fp)
    ee88:	2084f03a 	xor	r2,r4,r2
    ee8c:	1887883a 	add	r3,r3,r2
    ee90:	e0bfff17 	ldw	r2,-4(fp)
    ee94:	10800c04 	addi	r2,r2,48
    ee98:	10800017 	ldw	r2,0(r2)
    ee9c:	1008963a 	slli	r4,r2,24
    eea0:	e0bfff17 	ldw	r2,-4(fp)
    eea4:	10800c04 	addi	r2,r2,48
    eea8:	10800017 	ldw	r2,0(r2)
    eeac:	10bfc00c 	andi	r2,r2,65280
    eeb0:	1004923a 	slli	r2,r2,8
    eeb4:	2088b03a 	or	r4,r4,r2
    eeb8:	e0bfff17 	ldw	r2,-4(fp)
    eebc:	10800c04 	addi	r2,r2,48
    eec0:	10800017 	ldw	r2,0(r2)
    eec4:	10803fec 	andhi	r2,r2,255
    eec8:	1004d23a 	srli	r2,r2,8
    eecc:	2088b03a 	or	r4,r4,r2
    eed0:	e0bfff17 	ldw	r2,-4(fp)
    eed4:	10800c04 	addi	r2,r2,48
    eed8:	10800017 	ldw	r2,0(r2)
    eedc:	1004d63a 	srli	r2,r2,24
    eee0:	2084b03a 	or	r2,r4,r2
    eee4:	e0bf9215 	stw	r2,-440(fp)
    eee8:	e0bf9217 	ldw	r2,-440(fp)
    eeec:	1887883a 	add	r3,r3,r2
    eef0:	009cafb4 	movhi	r2,29374
    eef4:	10975d04 	addi	r2,r2,23924
    eef8:	1885883a 	add	r2,r3,r2
    eefc:	e0bf9315 	stw	r2,-436(fp)
    ef00:	e0ff6a17 	ldw	r3,-600(fp)
    ef04:	00800084 	movi	r2,2
    ef08:	1886583a 	ror	r3,r3,r2
    ef0c:	e13f6a17 	ldw	r4,-600(fp)
    ef10:	00800344 	movi	r2,13
    ef14:	2084583a 	ror	r2,r4,r2
    ef18:	1886f03a 	xor	r3,r3,r2
    ef1c:	e0bf6a17 	ldw	r2,-600(fp)
    ef20:	100412ba 	roli	r2,r2,10
    ef24:	1886f03a 	xor	r3,r3,r2
    ef28:	e13f6a17 	ldw	r4,-600(fp)
    ef2c:	e0bf6b17 	ldw	r2,-596(fp)
    ef30:	2088703a 	and	r4,r4,r2
    ef34:	e17f6a17 	ldw	r5,-600(fp)
    ef38:	e0bf6b17 	ldw	r2,-596(fp)
    ef3c:	288ab03a 	or	r5,r5,r2
    ef40:	e0bf6c17 	ldw	r2,-592(fp)
    ef44:	2884703a 	and	r2,r5,r2
    ef48:	2084b03a 	or	r2,r4,r2
    ef4c:	1885883a 	add	r2,r3,r2
    ef50:	e0bf9415 	stw	r2,-432(fp)
    ef54:	e0ff6d17 	ldw	r3,-588(fp)
    ef58:	e0bf9317 	ldw	r2,-436(fp)
    ef5c:	1885883a 	add	r2,r3,r2
    ef60:	e0bf6d15 	stw	r2,-588(fp)
    ef64:	e0ff9317 	ldw	r3,-436(fp)
    ef68:	e0bf9417 	ldw	r2,-432(fp)
    ef6c:	1885883a 	add	r2,r3,r2
    ef70:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = BE32(chunk[13]));
    ef74:	e0ff6d17 	ldw	r3,-588(fp)
    ef78:	00800184 	movi	r2,6
    ef7c:	1886583a 	ror	r3,r3,r2
    ef80:	e13f6d17 	ldw	r4,-588(fp)
    ef84:	008002c4 	movi	r2,11
    ef88:	2084583a 	ror	r2,r4,r2
    ef8c:	1886f03a 	xor	r3,r3,r2
    ef90:	e0bf6d17 	ldw	r2,-588(fp)
    ef94:	100411fa 	roli	r2,r2,7
    ef98:	1886f03a 	xor	r3,r3,r2
    ef9c:	e0bf6817 	ldw	r2,-608(fp)
    efa0:	1887883a 	add	r3,r3,r2
    efa4:	e13f6617 	ldw	r4,-616(fp)
    efa8:	e0bf6717 	ldw	r2,-612(fp)
    efac:	2088f03a 	xor	r4,r4,r2
    efb0:	e0bf6d17 	ldw	r2,-588(fp)
    efb4:	2088703a 	and	r4,r4,r2
    efb8:	e0bf6717 	ldw	r2,-612(fp)
    efbc:	2084f03a 	xor	r2,r4,r2
    efc0:	1887883a 	add	r3,r3,r2
    efc4:	e0bfff17 	ldw	r2,-4(fp)
    efc8:	10800d04 	addi	r2,r2,52
    efcc:	10800017 	ldw	r2,0(r2)
    efd0:	1008963a 	slli	r4,r2,24
    efd4:	e0bfff17 	ldw	r2,-4(fp)
    efd8:	10800d04 	addi	r2,r2,52
    efdc:	10800017 	ldw	r2,0(r2)
    efe0:	10bfc00c 	andi	r2,r2,65280
    efe4:	1004923a 	slli	r2,r2,8
    efe8:	2088b03a 	or	r4,r4,r2
    efec:	e0bfff17 	ldw	r2,-4(fp)
    eff0:	10800d04 	addi	r2,r2,52
    eff4:	10800017 	ldw	r2,0(r2)
    eff8:	10803fec 	andhi	r2,r2,255
    effc:	1004d23a 	srli	r2,r2,8
    f000:	2088b03a 	or	r4,r4,r2
    f004:	e0bfff17 	ldw	r2,-4(fp)
    f008:	10800d04 	addi	r2,r2,52
    f00c:	10800017 	ldw	r2,0(r2)
    f010:	1004d63a 	srli	r2,r2,24
    f014:	2084b03a 	or	r2,r4,r2
    f018:	e0bf9515 	stw	r2,-428(fp)
    f01c:	e0bf9517 	ldw	r2,-428(fp)
    f020:	1887883a 	add	r3,r3,r2
    f024:	00a037f4 	movhi	r2,32991
    f028:	10ac7f84 	addi	r2,r2,-19970
    f02c:	1885883a 	add	r2,r3,r2
    f030:	e0bf9615 	stw	r2,-424(fp)
    f034:	e0ff6917 	ldw	r3,-604(fp)
    f038:	00800084 	movi	r2,2
    f03c:	1886583a 	ror	r3,r3,r2
    f040:	e13f6917 	ldw	r4,-604(fp)
    f044:	00800344 	movi	r2,13
    f048:	2084583a 	ror	r2,r4,r2
    f04c:	1886f03a 	xor	r3,r3,r2
    f050:	e0bf6917 	ldw	r2,-604(fp)
    f054:	100412ba 	roli	r2,r2,10
    f058:	1886f03a 	xor	r3,r3,r2
    f05c:	e13f6917 	ldw	r4,-604(fp)
    f060:	e0bf6a17 	ldw	r2,-600(fp)
    f064:	2088703a 	and	r4,r4,r2
    f068:	e17f6917 	ldw	r5,-604(fp)
    f06c:	e0bf6a17 	ldw	r2,-600(fp)
    f070:	288ab03a 	or	r5,r5,r2
    f074:	e0bf6b17 	ldw	r2,-596(fp)
    f078:	2884703a 	and	r2,r5,r2
    f07c:	2084b03a 	or	r2,r4,r2
    f080:	1885883a 	add	r2,r3,r2
    f084:	e0bf9715 	stw	r2,-420(fp)
    f088:	e0ff6c17 	ldw	r3,-592(fp)
    f08c:	e0bf9617 	ldw	r2,-424(fp)
    f090:	1885883a 	add	r2,r3,r2
    f094:	e0bf6c15 	stw	r2,-592(fp)
    f098:	e0ff9617 	ldw	r3,-424(fp)
    f09c:	e0bf9717 	ldw	r2,-420(fp)
    f0a0:	1885883a 	add	r2,r3,r2
    f0a4:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = BE32(chunk[14]));
    f0a8:	e0ff6c17 	ldw	r3,-592(fp)
    f0ac:	00800184 	movi	r2,6
    f0b0:	1886583a 	ror	r3,r3,r2
    f0b4:	e13f6c17 	ldw	r4,-592(fp)
    f0b8:	008002c4 	movi	r2,11
    f0bc:	2084583a 	ror	r2,r4,r2
    f0c0:	1886f03a 	xor	r3,r3,r2
    f0c4:	e0bf6c17 	ldw	r2,-592(fp)
    f0c8:	100411fa 	roli	r2,r2,7
    f0cc:	1886f03a 	xor	r3,r3,r2
    f0d0:	e0bf6717 	ldw	r2,-612(fp)
    f0d4:	1887883a 	add	r3,r3,r2
    f0d8:	e13f6d17 	ldw	r4,-588(fp)
    f0dc:	e0bf6617 	ldw	r2,-616(fp)
    f0e0:	2088f03a 	xor	r4,r4,r2
    f0e4:	e0bf6c17 	ldw	r2,-592(fp)
    f0e8:	2088703a 	and	r4,r4,r2
    f0ec:	e0bf6617 	ldw	r2,-616(fp)
    f0f0:	2084f03a 	xor	r2,r4,r2
    f0f4:	1887883a 	add	r3,r3,r2
    f0f8:	e0bfff17 	ldw	r2,-4(fp)
    f0fc:	10800e04 	addi	r2,r2,56
    f100:	10800017 	ldw	r2,0(r2)
    f104:	1008963a 	slli	r4,r2,24
    f108:	e0bfff17 	ldw	r2,-4(fp)
    f10c:	10800e04 	addi	r2,r2,56
    f110:	10800017 	ldw	r2,0(r2)
    f114:	10bfc00c 	andi	r2,r2,65280
    f118:	1004923a 	slli	r2,r2,8
    f11c:	2088b03a 	or	r4,r4,r2
    f120:	e0bfff17 	ldw	r2,-4(fp)
    f124:	10800e04 	addi	r2,r2,56
    f128:	10800017 	ldw	r2,0(r2)
    f12c:	10803fec 	andhi	r2,r2,255
    f130:	1004d23a 	srli	r2,r2,8
    f134:	2088b03a 	or	r4,r4,r2
    f138:	e0bfff17 	ldw	r2,-4(fp)
    f13c:	10800e04 	addi	r2,r2,56
    f140:	10800017 	ldw	r2,0(r2)
    f144:	1004d63a 	srli	r2,r2,24
    f148:	2084b03a 	or	r2,r4,r2
    f14c:	e0bf9815 	stw	r2,-416(fp)
    f150:	e0bf9817 	ldw	r2,-416(fp)
    f154:	1887883a 	add	r3,r3,r2
    f158:	00a6f734 	movhi	r2,39900
    f15c:	1081a9c4 	addi	r2,r2,1703
    f160:	1885883a 	add	r2,r3,r2
    f164:	e0bf9915 	stw	r2,-412(fp)
    f168:	e0ff6817 	ldw	r3,-608(fp)
    f16c:	00800084 	movi	r2,2
    f170:	1886583a 	ror	r3,r3,r2
    f174:	e13f6817 	ldw	r4,-608(fp)
    f178:	00800344 	movi	r2,13
    f17c:	2084583a 	ror	r2,r4,r2
    f180:	1886f03a 	xor	r3,r3,r2
    f184:	e0bf6817 	ldw	r2,-608(fp)
    f188:	100412ba 	roli	r2,r2,10
    f18c:	1886f03a 	xor	r3,r3,r2
    f190:	e13f6817 	ldw	r4,-608(fp)
    f194:	e0bf6917 	ldw	r2,-604(fp)
    f198:	2088703a 	and	r4,r4,r2
    f19c:	e17f6817 	ldw	r5,-608(fp)
    f1a0:	e0bf6917 	ldw	r2,-604(fp)
    f1a4:	288ab03a 	or	r5,r5,r2
    f1a8:	e0bf6a17 	ldw	r2,-600(fp)
    f1ac:	2884703a 	and	r2,r5,r2
    f1b0:	2084b03a 	or	r2,r4,r2
    f1b4:	1885883a 	add	r2,r3,r2
    f1b8:	e0bf9a15 	stw	r2,-408(fp)
    f1bc:	e0ff6b17 	ldw	r3,-596(fp)
    f1c0:	e0bf9917 	ldw	r2,-412(fp)
    f1c4:	1885883a 	add	r2,r3,r2
    f1c8:	e0bf6b15 	stw	r2,-596(fp)
    f1cc:	e0ff9917 	ldw	r3,-412(fp)
    f1d0:	e0bf9a17 	ldw	r2,-408(fp)
    f1d4:	1885883a 	add	r2,r3,r2
    f1d8:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = BE32(chunk[15]));
    f1dc:	e0ff6b17 	ldw	r3,-596(fp)
    f1e0:	00800184 	movi	r2,6
    f1e4:	1886583a 	ror	r3,r3,r2
    f1e8:	e13f6b17 	ldw	r4,-596(fp)
    f1ec:	008002c4 	movi	r2,11
    f1f0:	2084583a 	ror	r2,r4,r2
    f1f4:	1886f03a 	xor	r3,r3,r2
    f1f8:	e0bf6b17 	ldw	r2,-596(fp)
    f1fc:	100411fa 	roli	r2,r2,7
    f200:	1886f03a 	xor	r3,r3,r2
    f204:	e0bf6617 	ldw	r2,-616(fp)
    f208:	1887883a 	add	r3,r3,r2
    f20c:	e13f6c17 	ldw	r4,-592(fp)
    f210:	e0bf6d17 	ldw	r2,-588(fp)
    f214:	2088f03a 	xor	r4,r4,r2
    f218:	e0bf6b17 	ldw	r2,-596(fp)
    f21c:	2088703a 	and	r4,r4,r2
    f220:	e0bf6d17 	ldw	r2,-588(fp)
    f224:	2084f03a 	xor	r2,r4,r2
    f228:	1887883a 	add	r3,r3,r2
    f22c:	e0bfff17 	ldw	r2,-4(fp)
    f230:	10800f04 	addi	r2,r2,60
    f234:	10800017 	ldw	r2,0(r2)
    f238:	1008963a 	slli	r4,r2,24
    f23c:	e0bfff17 	ldw	r2,-4(fp)
    f240:	10800f04 	addi	r2,r2,60
    f244:	10800017 	ldw	r2,0(r2)
    f248:	10bfc00c 	andi	r2,r2,65280
    f24c:	1004923a 	slli	r2,r2,8
    f250:	2088b03a 	or	r4,r4,r2
    f254:	e0bfff17 	ldw	r2,-4(fp)
    f258:	10800f04 	addi	r2,r2,60
    f25c:	10800017 	ldw	r2,0(r2)
    f260:	10803fec 	andhi	r2,r2,255
    f264:	1004d23a 	srli	r2,r2,8
    f268:	2088b03a 	or	r4,r4,r2
    f26c:	e0bfff17 	ldw	r2,-4(fp)
    f270:	10800f04 	addi	r2,r2,60
    f274:	10800017 	ldw	r2,0(r2)
    f278:	1004d63a 	srli	r2,r2,24
    f27c:	2084b03a 	or	r2,r4,r2
    f280:	e0bf9b15 	stw	r2,-404(fp)
    f284:	e0bf9b17 	ldw	r2,-404(fp)
    f288:	1887883a 	add	r3,r3,r2
    f28c:	00b06734 	movhi	r2,49564
    f290:	10bc5d04 	addi	r2,r2,-3724
    f294:	1885883a 	add	r2,r3,r2
    f298:	e0bf9c15 	stw	r2,-400(fp)
    f29c:	e0ff6717 	ldw	r3,-612(fp)
    f2a0:	00800084 	movi	r2,2
    f2a4:	1886583a 	ror	r3,r3,r2
    f2a8:	e13f6717 	ldw	r4,-612(fp)
    f2ac:	00800344 	movi	r2,13
    f2b0:	2084583a 	ror	r2,r4,r2
    f2b4:	1886f03a 	xor	r3,r3,r2
    f2b8:	e0bf6717 	ldw	r2,-612(fp)
    f2bc:	100412ba 	roli	r2,r2,10
    f2c0:	1886f03a 	xor	r3,r3,r2
    f2c4:	e13f6717 	ldw	r4,-612(fp)
    f2c8:	e0bf6817 	ldw	r2,-608(fp)
    f2cc:	2088703a 	and	r4,r4,r2
    f2d0:	e17f6717 	ldw	r5,-612(fp)
    f2d4:	e0bf6817 	ldw	r2,-608(fp)
    f2d8:	288ab03a 	or	r5,r5,r2
    f2dc:	e0bf6917 	ldw	r2,-604(fp)
    f2e0:	2884703a 	and	r2,r5,r2
    f2e4:	2084b03a 	or	r2,r4,r2
    f2e8:	1885883a 	add	r2,r3,r2
    f2ec:	e0bf9d15 	stw	r2,-396(fp)
    f2f0:	e0ff6a17 	ldw	r3,-600(fp)
    f2f4:	e0bf9c17 	ldw	r2,-400(fp)
    f2f8:	1885883a 	add	r2,r3,r2
    f2fc:	e0bf6a15 	stw	r2,-600(fp)
    f300:	e0ff9c17 	ldw	r3,-400(fp)
    f304:	e0bf9d17 	ldw	r2,-396(fp)
    f308:	1885883a 	add	r2,r3,r2
    f30c:	e0bf6615 	stw	r2,-616(fp)

    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));
    f310:	e0ff6a17 	ldw	r3,-600(fp)
    f314:	00800184 	movi	r2,6
    f318:	1886583a 	ror	r3,r3,r2
    f31c:	e13f6a17 	ldw	r4,-600(fp)
    f320:	008002c4 	movi	r2,11
    f324:	2084583a 	ror	r2,r4,r2
    f328:	1886f03a 	xor	r3,r3,r2
    f32c:	e0bf6a17 	ldw	r2,-600(fp)
    f330:	100411fa 	roli	r2,r2,7
    f334:	1886f03a 	xor	r3,r3,r2
    f338:	e0bf6d17 	ldw	r2,-588(fp)
    f33c:	1887883a 	add	r3,r3,r2
    f340:	e13f6b17 	ldw	r4,-596(fp)
    f344:	e0bf6c17 	ldw	r2,-592(fp)
    f348:	2088f03a 	xor	r4,r4,r2
    f34c:	e0bf6a17 	ldw	r2,-600(fp)
    f350:	2088703a 	and	r4,r4,r2
    f354:	e0bf6c17 	ldw	r2,-592(fp)
    f358:	2084f03a 	xor	r2,r4,r2
    f35c:	1887883a 	add	r3,r3,r2
    f360:	e0bf9817 	ldw	r2,-416(fp)
    f364:	100813fa 	roli	r4,r2,15
    f368:	e0bf9817 	ldw	r2,-416(fp)
    f36c:	1004137a 	roli	r2,r2,13
    f370:	2088f03a 	xor	r4,r4,r2
    f374:	e0bf9817 	ldw	r2,-416(fp)
    f378:	1004d2ba 	srli	r2,r2,10
    f37c:	2088f03a 	xor	r4,r4,r2
    f380:	e0bf8917 	ldw	r2,-476(fp)
    f384:	2089883a 	add	r4,r4,r2
    f388:	e17f7117 	ldw	r5,-572(fp)
    f38c:	008001c4 	movi	r2,7
    f390:	288a583a 	ror	r5,r5,r2
    f394:	e0bf7117 	ldw	r2,-572(fp)
    f398:	100413ba 	roli	r2,r2,14
    f39c:	288af03a 	xor	r5,r5,r2
    f3a0:	e0bf7117 	ldw	r2,-572(fp)
    f3a4:	1004d0fa 	srli	r2,r2,3
    f3a8:	2884f03a 	xor	r2,r5,r2
    f3ac:	2085883a 	add	r2,r4,r2
    f3b0:	e13f6e17 	ldw	r4,-584(fp)
    f3b4:	2085883a 	add	r2,r4,r2
    f3b8:	e0bf6e15 	stw	r2,-584(fp)
    f3bc:	e0bf6e17 	ldw	r2,-584(fp)
    f3c0:	1887883a 	add	r3,r3,r2
    f3c4:	00b926f4 	movhi	r2,58523
    f3c8:	109a7044 	addi	r2,r2,27073
    f3cc:	1885883a 	add	r2,r3,r2
    f3d0:	e0bf9e15 	stw	r2,-392(fp)
    f3d4:	e0ff6617 	ldw	r3,-616(fp)
    f3d8:	00800084 	movi	r2,2
    f3dc:	1886583a 	ror	r3,r3,r2
    f3e0:	e13f6617 	ldw	r4,-616(fp)
    f3e4:	00800344 	movi	r2,13
    f3e8:	2084583a 	ror	r2,r4,r2
    f3ec:	1886f03a 	xor	r3,r3,r2
    f3f0:	e0bf6617 	ldw	r2,-616(fp)
    f3f4:	100412ba 	roli	r2,r2,10
    f3f8:	1886f03a 	xor	r3,r3,r2
    f3fc:	e13f6617 	ldw	r4,-616(fp)
    f400:	e0bf6717 	ldw	r2,-612(fp)
    f404:	2088703a 	and	r4,r4,r2
    f408:	e17f6617 	ldw	r5,-616(fp)
    f40c:	e0bf6717 	ldw	r2,-612(fp)
    f410:	288ab03a 	or	r5,r5,r2
    f414:	e0bf6817 	ldw	r2,-608(fp)
    f418:	2884703a 	and	r2,r5,r2
    f41c:	2084b03a 	or	r2,r4,r2
    f420:	1885883a 	add	r2,r3,r2
    f424:	e0bf9f15 	stw	r2,-388(fp)
    f428:	e0ff6917 	ldw	r3,-604(fp)
    f42c:	e0bf9e17 	ldw	r2,-392(fp)
    f430:	1885883a 	add	r2,r3,r2
    f434:	e0bf6915 	stw	r2,-604(fp)
    f438:	e0ff9e17 	ldw	r3,-392(fp)
    f43c:	e0bf9f17 	ldw	r2,-388(fp)
    f440:	1885883a 	add	r2,r3,r2
    f444:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));
    f448:	e0ff6917 	ldw	r3,-604(fp)
    f44c:	00800184 	movi	r2,6
    f450:	1886583a 	ror	r3,r3,r2
    f454:	e13f6917 	ldw	r4,-604(fp)
    f458:	008002c4 	movi	r2,11
    f45c:	2084583a 	ror	r2,r4,r2
    f460:	1886f03a 	xor	r3,r3,r2
    f464:	e0bf6917 	ldw	r2,-604(fp)
    f468:	100411fa 	roli	r2,r2,7
    f46c:	1886f03a 	xor	r3,r3,r2
    f470:	e0bf6c17 	ldw	r2,-592(fp)
    f474:	1887883a 	add	r3,r3,r2
    f478:	e13f6a17 	ldw	r4,-600(fp)
    f47c:	e0bf6b17 	ldw	r2,-596(fp)
    f480:	2088f03a 	xor	r4,r4,r2
    f484:	e0bf6917 	ldw	r2,-604(fp)
    f488:	2088703a 	and	r4,r4,r2
    f48c:	e0bf6b17 	ldw	r2,-596(fp)
    f490:	2084f03a 	xor	r2,r4,r2
    f494:	1887883a 	add	r3,r3,r2
    f498:	e0bf9b17 	ldw	r2,-404(fp)
    f49c:	100813fa 	roli	r4,r2,15
    f4a0:	e0bf9b17 	ldw	r2,-404(fp)
    f4a4:	1004137a 	roli	r2,r2,13
    f4a8:	2088f03a 	xor	r4,r4,r2
    f4ac:	e0bf9b17 	ldw	r2,-404(fp)
    f4b0:	1004d2ba 	srli	r2,r2,10
    f4b4:	2088f03a 	xor	r4,r4,r2
    f4b8:	e0bf8c17 	ldw	r2,-464(fp)
    f4bc:	2089883a 	add	r4,r4,r2
    f4c0:	e17f7417 	ldw	r5,-560(fp)
    f4c4:	008001c4 	movi	r2,7
    f4c8:	288a583a 	ror	r5,r5,r2
    f4cc:	e0bf7417 	ldw	r2,-560(fp)
    f4d0:	100413ba 	roli	r2,r2,14
    f4d4:	288af03a 	xor	r5,r5,r2
    f4d8:	e0bf7417 	ldw	r2,-560(fp)
    f4dc:	1004d0fa 	srli	r2,r2,3
    f4e0:	2884f03a 	xor	r2,r5,r2
    f4e4:	2085883a 	add	r2,r4,r2
    f4e8:	e13f7117 	ldw	r4,-572(fp)
    f4ec:	2085883a 	add	r2,r4,r2
    f4f0:	e0bf7115 	stw	r2,-572(fp)
    f4f4:	e0bf7117 	ldw	r2,-572(fp)
    f4f8:	1887883a 	add	r3,r3,r2
    f4fc:	00bbefb4 	movhi	r2,61374
    f500:	1091e184 	addi	r2,r2,18310
    f504:	1885883a 	add	r2,r3,r2
    f508:	e0bfa015 	stw	r2,-384(fp)
    f50c:	e0ff6d17 	ldw	r3,-588(fp)
    f510:	00800084 	movi	r2,2
    f514:	1886583a 	ror	r3,r3,r2
    f518:	e13f6d17 	ldw	r4,-588(fp)
    f51c:	00800344 	movi	r2,13
    f520:	2084583a 	ror	r2,r4,r2
    f524:	1886f03a 	xor	r3,r3,r2
    f528:	e0bf6d17 	ldw	r2,-588(fp)
    f52c:	100412ba 	roli	r2,r2,10
    f530:	1886f03a 	xor	r3,r3,r2
    f534:	e13f6d17 	ldw	r4,-588(fp)
    f538:	e0bf6617 	ldw	r2,-616(fp)
    f53c:	2088703a 	and	r4,r4,r2
    f540:	e17f6d17 	ldw	r5,-588(fp)
    f544:	e0bf6617 	ldw	r2,-616(fp)
    f548:	288ab03a 	or	r5,r5,r2
    f54c:	e0bf6717 	ldw	r2,-612(fp)
    f550:	2884703a 	and	r2,r5,r2
    f554:	2084b03a 	or	r2,r4,r2
    f558:	1885883a 	add	r2,r3,r2
    f55c:	e0bfa115 	stw	r2,-380(fp)
    f560:	e0ff6817 	ldw	r3,-608(fp)
    f564:	e0bfa017 	ldw	r2,-384(fp)
    f568:	1885883a 	add	r2,r3,r2
    f56c:	e0bf6815 	stw	r2,-608(fp)
    f570:	e0ffa017 	ldw	r3,-384(fp)
    f574:	e0bfa117 	ldw	r2,-380(fp)
    f578:	1885883a 	add	r2,r3,r2
    f57c:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));
    f580:	e0ff6817 	ldw	r3,-608(fp)
    f584:	00800184 	movi	r2,6
    f588:	1886583a 	ror	r3,r3,r2
    f58c:	e13f6817 	ldw	r4,-608(fp)
    f590:	008002c4 	movi	r2,11
    f594:	2084583a 	ror	r2,r4,r2
    f598:	1886f03a 	xor	r3,r3,r2
    f59c:	e0bf6817 	ldw	r2,-608(fp)
    f5a0:	100411fa 	roli	r2,r2,7
    f5a4:	1886f03a 	xor	r3,r3,r2
    f5a8:	e0bf6b17 	ldw	r2,-596(fp)
    f5ac:	1887883a 	add	r3,r3,r2
    f5b0:	e13f6917 	ldw	r4,-604(fp)
    f5b4:	e0bf6a17 	ldw	r2,-600(fp)
    f5b8:	2088f03a 	xor	r4,r4,r2
    f5bc:	e0bf6817 	ldw	r2,-608(fp)
    f5c0:	2088703a 	and	r4,r4,r2
    f5c4:	e0bf6a17 	ldw	r2,-600(fp)
    f5c8:	2084f03a 	xor	r2,r4,r2
    f5cc:	1887883a 	add	r3,r3,r2
    f5d0:	e0bf6e17 	ldw	r2,-584(fp)
    f5d4:	100813fa 	roli	r4,r2,15
    f5d8:	e0bf6e17 	ldw	r2,-584(fp)
    f5dc:	1004137a 	roli	r2,r2,13
    f5e0:	2088f03a 	xor	r4,r4,r2
    f5e4:	e0bf6e17 	ldw	r2,-584(fp)
    f5e8:	1004d2ba 	srli	r2,r2,10
    f5ec:	2088f03a 	xor	r4,r4,r2
    f5f0:	e0bf8f17 	ldw	r2,-452(fp)
    f5f4:	2089883a 	add	r4,r4,r2
    f5f8:	e17f7717 	ldw	r5,-548(fp)
    f5fc:	008001c4 	movi	r2,7
    f600:	288a583a 	ror	r5,r5,r2
    f604:	e0bf7717 	ldw	r2,-548(fp)
    f608:	100413ba 	roli	r2,r2,14
    f60c:	288af03a 	xor	r5,r5,r2
    f610:	e0bf7717 	ldw	r2,-548(fp)
    f614:	1004d0fa 	srli	r2,r2,3
    f618:	2884f03a 	xor	r2,r5,r2
    f61c:	2085883a 	add	r2,r4,r2
    f620:	e13f7417 	ldw	r4,-560(fp)
    f624:	2085883a 	add	r2,r4,r2
    f628:	e0bf7415 	stw	r2,-560(fp)
    f62c:	e0bf7417 	ldw	r2,-560(fp)
    f630:	1887883a 	add	r3,r3,r2
    f634:	0083f0b4 	movhi	r2,4034
    f638:	10a77184 	addi	r2,r2,-25146
    f63c:	1885883a 	add	r2,r3,r2
    f640:	e0bfa215 	stw	r2,-376(fp)
    f644:	e0ff6c17 	ldw	r3,-592(fp)
    f648:	00800084 	movi	r2,2
    f64c:	1886583a 	ror	r3,r3,r2
    f650:	e13f6c17 	ldw	r4,-592(fp)
    f654:	00800344 	movi	r2,13
    f658:	2084583a 	ror	r2,r4,r2
    f65c:	1886f03a 	xor	r3,r3,r2
    f660:	e0bf6c17 	ldw	r2,-592(fp)
    f664:	100412ba 	roli	r2,r2,10
    f668:	1886f03a 	xor	r3,r3,r2
    f66c:	e13f6c17 	ldw	r4,-592(fp)
    f670:	e0bf6d17 	ldw	r2,-588(fp)
    f674:	2088703a 	and	r4,r4,r2
    f678:	e17f6c17 	ldw	r5,-592(fp)
    f67c:	e0bf6d17 	ldw	r2,-588(fp)
    f680:	288ab03a 	or	r5,r5,r2
    f684:	e0bf6617 	ldw	r2,-616(fp)
    f688:	2884703a 	and	r2,r5,r2
    f68c:	2084b03a 	or	r2,r4,r2
    f690:	1885883a 	add	r2,r3,r2
    f694:	e0bfa315 	stw	r2,-372(fp)
    f698:	e0ff6717 	ldw	r3,-612(fp)
    f69c:	e0bfa217 	ldw	r2,-376(fp)
    f6a0:	1885883a 	add	r2,r3,r2
    f6a4:	e0bf6715 	stw	r2,-612(fp)
    f6a8:	e0ffa217 	ldw	r3,-376(fp)
    f6ac:	e0bfa317 	ldw	r2,-372(fp)
    f6b0:	1885883a 	add	r2,r3,r2
    f6b4:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));
    f6b8:	e0ff6717 	ldw	r3,-612(fp)
    f6bc:	00800184 	movi	r2,6
    f6c0:	1886583a 	ror	r3,r3,r2
    f6c4:	e13f6717 	ldw	r4,-612(fp)
    f6c8:	008002c4 	movi	r2,11
    f6cc:	2084583a 	ror	r2,r4,r2
    f6d0:	1886f03a 	xor	r3,r3,r2
    f6d4:	e0bf6717 	ldw	r2,-612(fp)
    f6d8:	100411fa 	roli	r2,r2,7
    f6dc:	1886f03a 	xor	r3,r3,r2
    f6e0:	e0bf6a17 	ldw	r2,-600(fp)
    f6e4:	1887883a 	add	r3,r3,r2
    f6e8:	e13f6817 	ldw	r4,-608(fp)
    f6ec:	e0bf6917 	ldw	r2,-604(fp)
    f6f0:	2088f03a 	xor	r4,r4,r2
    f6f4:	e0bf6717 	ldw	r2,-612(fp)
    f6f8:	2088703a 	and	r4,r4,r2
    f6fc:	e0bf6917 	ldw	r2,-604(fp)
    f700:	2084f03a 	xor	r2,r4,r2
    f704:	1887883a 	add	r3,r3,r2
    f708:	e0bf7117 	ldw	r2,-572(fp)
    f70c:	100813fa 	roli	r4,r2,15
    f710:	e0bf7117 	ldw	r2,-572(fp)
    f714:	1004137a 	roli	r2,r2,13
    f718:	2088f03a 	xor	r4,r4,r2
    f71c:	e0bf7117 	ldw	r2,-572(fp)
    f720:	1004d2ba 	srli	r2,r2,10
    f724:	2088f03a 	xor	r4,r4,r2
    f728:	e0bf9217 	ldw	r2,-440(fp)
    f72c:	2089883a 	add	r4,r4,r2
    f730:	e17f7a17 	ldw	r5,-536(fp)
    f734:	008001c4 	movi	r2,7
    f738:	288a583a 	ror	r5,r5,r2
    f73c:	e0bf7a17 	ldw	r2,-536(fp)
    f740:	100413ba 	roli	r2,r2,14
    f744:	288af03a 	xor	r5,r5,r2
    f748:	e0bf7a17 	ldw	r2,-536(fp)
    f74c:	1004d0fa 	srli	r2,r2,3
    f750:	2884f03a 	xor	r2,r5,r2
    f754:	2085883a 	add	r2,r4,r2
    f758:	e13f7717 	ldw	r4,-548(fp)
    f75c:	2085883a 	add	r2,r4,r2
    f760:	e0bf7715 	stw	r2,-548(fp)
    f764:	e0bf7717 	ldw	r2,-548(fp)
    f768:	1887883a 	add	r3,r3,r2
    f76c:	00890374 	movhi	r2,9229
    f770:	10a87304 	addi	r2,r2,-24116
    f774:	1885883a 	add	r2,r3,r2
    f778:	e0bfa415 	stw	r2,-368(fp)
    f77c:	e0ff6b17 	ldw	r3,-596(fp)
    f780:	00800084 	movi	r2,2
    f784:	1886583a 	ror	r3,r3,r2
    f788:	e13f6b17 	ldw	r4,-596(fp)
    f78c:	00800344 	movi	r2,13
    f790:	2084583a 	ror	r2,r4,r2
    f794:	1886f03a 	xor	r3,r3,r2
    f798:	e0bf6b17 	ldw	r2,-596(fp)
    f79c:	100412ba 	roli	r2,r2,10
    f7a0:	1886f03a 	xor	r3,r3,r2
    f7a4:	e13f6b17 	ldw	r4,-596(fp)
    f7a8:	e0bf6c17 	ldw	r2,-592(fp)
    f7ac:	2088703a 	and	r4,r4,r2
    f7b0:	e17f6b17 	ldw	r5,-596(fp)
    f7b4:	e0bf6c17 	ldw	r2,-592(fp)
    f7b8:	288ab03a 	or	r5,r5,r2
    f7bc:	e0bf6d17 	ldw	r2,-588(fp)
    f7c0:	2884703a 	and	r2,r5,r2
    f7c4:	2084b03a 	or	r2,r4,r2
    f7c8:	1885883a 	add	r2,r3,r2
    f7cc:	e0bfa515 	stw	r2,-364(fp)
    f7d0:	e0ff6617 	ldw	r3,-616(fp)
    f7d4:	e0bfa417 	ldw	r2,-368(fp)
    f7d8:	1885883a 	add	r2,r3,r2
    f7dc:	e0bf6615 	stw	r2,-616(fp)
    f7e0:	e0ffa417 	ldw	r3,-368(fp)
    f7e4:	e0bfa517 	ldw	r2,-364(fp)
    f7e8:	1885883a 	add	r2,r3,r2
    f7ec:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));
    f7f0:	e0ff6617 	ldw	r3,-616(fp)
    f7f4:	00800184 	movi	r2,6
    f7f8:	1886583a 	ror	r3,r3,r2
    f7fc:	e13f6617 	ldw	r4,-616(fp)
    f800:	008002c4 	movi	r2,11
    f804:	2084583a 	ror	r2,r4,r2
    f808:	1886f03a 	xor	r3,r3,r2
    f80c:	e0bf6617 	ldw	r2,-616(fp)
    f810:	100411fa 	roli	r2,r2,7
    f814:	1886f03a 	xor	r3,r3,r2
    f818:	e0bf6917 	ldw	r2,-604(fp)
    f81c:	1887883a 	add	r3,r3,r2
    f820:	e13f6717 	ldw	r4,-612(fp)
    f824:	e0bf6817 	ldw	r2,-608(fp)
    f828:	2088f03a 	xor	r4,r4,r2
    f82c:	e0bf6617 	ldw	r2,-616(fp)
    f830:	2088703a 	and	r4,r4,r2
    f834:	e0bf6817 	ldw	r2,-608(fp)
    f838:	2084f03a 	xor	r2,r4,r2
    f83c:	1887883a 	add	r3,r3,r2
    f840:	e0bf7417 	ldw	r2,-560(fp)
    f844:	100813fa 	roli	r4,r2,15
    f848:	e0bf7417 	ldw	r2,-560(fp)
    f84c:	1004137a 	roli	r2,r2,13
    f850:	2088f03a 	xor	r4,r4,r2
    f854:	e0bf7417 	ldw	r2,-560(fp)
    f858:	1004d2ba 	srli	r2,r2,10
    f85c:	2088f03a 	xor	r4,r4,r2
    f860:	e0bf9517 	ldw	r2,-428(fp)
    f864:	2089883a 	add	r4,r4,r2
    f868:	e17f7d17 	ldw	r5,-524(fp)
    f86c:	008001c4 	movi	r2,7
    f870:	288a583a 	ror	r5,r5,r2
    f874:	e0bf7d17 	ldw	r2,-524(fp)
    f878:	100413ba 	roli	r2,r2,14
    f87c:	288af03a 	xor	r5,r5,r2
    f880:	e0bf7d17 	ldw	r2,-524(fp)
    f884:	1004d0fa 	srli	r2,r2,3
    f888:	2884f03a 	xor	r2,r5,r2
    f88c:	2085883a 	add	r2,r4,r2
    f890:	e13f7a17 	ldw	r4,-536(fp)
    f894:	2085883a 	add	r2,r4,r2
    f898:	e0bf7a15 	stw	r2,-536(fp)
    f89c:	e0bf7a17 	ldw	r2,-536(fp)
    f8a0:	1887883a 	add	r3,r3,r2
    f8a4:	008b7a74 	movhi	r2,11753
    f8a8:	108b1bc4 	addi	r2,r2,11375
    f8ac:	1885883a 	add	r2,r3,r2
    f8b0:	e0bfa615 	stw	r2,-360(fp)
    f8b4:	e0ff6a17 	ldw	r3,-600(fp)
    f8b8:	00800084 	movi	r2,2
    f8bc:	1886583a 	ror	r3,r3,r2
    f8c0:	e13f6a17 	ldw	r4,-600(fp)
    f8c4:	00800344 	movi	r2,13
    f8c8:	2084583a 	ror	r2,r4,r2
    f8cc:	1886f03a 	xor	r3,r3,r2
    f8d0:	e0bf6a17 	ldw	r2,-600(fp)
    f8d4:	100412ba 	roli	r2,r2,10
    f8d8:	1886f03a 	xor	r3,r3,r2
    f8dc:	e13f6a17 	ldw	r4,-600(fp)
    f8e0:	e0bf6b17 	ldw	r2,-596(fp)
    f8e4:	2088703a 	and	r4,r4,r2
    f8e8:	e17f6a17 	ldw	r5,-600(fp)
    f8ec:	e0bf6b17 	ldw	r2,-596(fp)
    f8f0:	288ab03a 	or	r5,r5,r2
    f8f4:	e0bf6c17 	ldw	r2,-592(fp)
    f8f8:	2884703a 	and	r2,r5,r2
    f8fc:	2084b03a 	or	r2,r4,r2
    f900:	1885883a 	add	r2,r3,r2
    f904:	e0bfa715 	stw	r2,-356(fp)
    f908:	e0ff6d17 	ldw	r3,-588(fp)
    f90c:	e0bfa617 	ldw	r2,-360(fp)
    f910:	1885883a 	add	r2,r3,r2
    f914:	e0bf6d15 	stw	r2,-588(fp)
    f918:	e0ffa617 	ldw	r3,-360(fp)
    f91c:	e0bfa717 	ldw	r2,-356(fp)
    f920:	1885883a 	add	r2,r3,r2
    f924:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));
    f928:	e0ff6d17 	ldw	r3,-588(fp)
    f92c:	00800184 	movi	r2,6
    f930:	1886583a 	ror	r3,r3,r2
    f934:	e13f6d17 	ldw	r4,-588(fp)
    f938:	008002c4 	movi	r2,11
    f93c:	2084583a 	ror	r2,r4,r2
    f940:	1886f03a 	xor	r3,r3,r2
    f944:	e0bf6d17 	ldw	r2,-588(fp)
    f948:	100411fa 	roli	r2,r2,7
    f94c:	1886f03a 	xor	r3,r3,r2
    f950:	e0bf6817 	ldw	r2,-608(fp)
    f954:	1887883a 	add	r3,r3,r2
    f958:	e13f6617 	ldw	r4,-616(fp)
    f95c:	e0bf6717 	ldw	r2,-612(fp)
    f960:	2088f03a 	xor	r4,r4,r2
    f964:	e0bf6d17 	ldw	r2,-588(fp)
    f968:	2088703a 	and	r4,r4,r2
    f96c:	e0bf6717 	ldw	r2,-612(fp)
    f970:	2084f03a 	xor	r2,r4,r2
    f974:	1887883a 	add	r3,r3,r2
    f978:	e0bf7717 	ldw	r2,-548(fp)
    f97c:	100813fa 	roli	r4,r2,15
    f980:	e0bf7717 	ldw	r2,-548(fp)
    f984:	1004137a 	roli	r2,r2,13
    f988:	2088f03a 	xor	r4,r4,r2
    f98c:	e0bf7717 	ldw	r2,-548(fp)
    f990:	1004d2ba 	srli	r2,r2,10
    f994:	2088f03a 	xor	r4,r4,r2
    f998:	e0bf9817 	ldw	r2,-416(fp)
    f99c:	2089883a 	add	r4,r4,r2
    f9a0:	e17f8017 	ldw	r5,-512(fp)
    f9a4:	008001c4 	movi	r2,7
    f9a8:	288a583a 	ror	r5,r5,r2
    f9ac:	e0bf8017 	ldw	r2,-512(fp)
    f9b0:	100413ba 	roli	r2,r2,14
    f9b4:	288af03a 	xor	r5,r5,r2
    f9b8:	e0bf8017 	ldw	r2,-512(fp)
    f9bc:	1004d0fa 	srli	r2,r2,3
    f9c0:	2884f03a 	xor	r2,r5,r2
    f9c4:	2085883a 	add	r2,r4,r2
    f9c8:	e13f7d17 	ldw	r4,-524(fp)
    f9cc:	2085883a 	add	r2,r4,r2
    f9d0:	e0bf7d15 	stw	r2,-524(fp)
    f9d4:	e0bf7d17 	ldw	r2,-524(fp)
    f9d8:	1887883a 	add	r3,r3,r2
    f9dc:	00929d74 	movhi	r2,19061
    f9e0:	10a12a84 	addi	r2,r2,-31574
    f9e4:	1885883a 	add	r2,r3,r2
    f9e8:	e0bfa815 	stw	r2,-352(fp)
    f9ec:	e0ff6917 	ldw	r3,-604(fp)
    f9f0:	00800084 	movi	r2,2
    f9f4:	1886583a 	ror	r3,r3,r2
    f9f8:	e13f6917 	ldw	r4,-604(fp)
    f9fc:	00800344 	movi	r2,13
    fa00:	2084583a 	ror	r2,r4,r2
    fa04:	1886f03a 	xor	r3,r3,r2
    fa08:	e0bf6917 	ldw	r2,-604(fp)
    fa0c:	100412ba 	roli	r2,r2,10
    fa10:	1886f03a 	xor	r3,r3,r2
    fa14:	e13f6917 	ldw	r4,-604(fp)
    fa18:	e0bf6a17 	ldw	r2,-600(fp)
    fa1c:	2088703a 	and	r4,r4,r2
    fa20:	e17f6917 	ldw	r5,-604(fp)
    fa24:	e0bf6a17 	ldw	r2,-600(fp)
    fa28:	288ab03a 	or	r5,r5,r2
    fa2c:	e0bf6b17 	ldw	r2,-596(fp)
    fa30:	2884703a 	and	r2,r5,r2
    fa34:	2084b03a 	or	r2,r4,r2
    fa38:	1885883a 	add	r2,r3,r2
    fa3c:	e0bfa915 	stw	r2,-348(fp)
    fa40:	e0ff6c17 	ldw	r3,-592(fp)
    fa44:	e0bfa817 	ldw	r2,-352(fp)
    fa48:	1885883a 	add	r2,r3,r2
    fa4c:	e0bf6c15 	stw	r2,-592(fp)
    fa50:	e0ffa817 	ldw	r3,-352(fp)
    fa54:	e0bfa917 	ldw	r2,-348(fp)
    fa58:	1885883a 	add	r2,r3,r2
    fa5c:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));
    fa60:	e0ff6c17 	ldw	r3,-592(fp)
    fa64:	00800184 	movi	r2,6
    fa68:	1886583a 	ror	r3,r3,r2
    fa6c:	e13f6c17 	ldw	r4,-592(fp)
    fa70:	008002c4 	movi	r2,11
    fa74:	2084583a 	ror	r2,r4,r2
    fa78:	1886f03a 	xor	r3,r3,r2
    fa7c:	e0bf6c17 	ldw	r2,-592(fp)
    fa80:	100411fa 	roli	r2,r2,7
    fa84:	1886f03a 	xor	r3,r3,r2
    fa88:	e0bf6717 	ldw	r2,-612(fp)
    fa8c:	1887883a 	add	r3,r3,r2
    fa90:	e13f6d17 	ldw	r4,-588(fp)
    fa94:	e0bf6617 	ldw	r2,-616(fp)
    fa98:	2088f03a 	xor	r4,r4,r2
    fa9c:	e0bf6c17 	ldw	r2,-592(fp)
    faa0:	2088703a 	and	r4,r4,r2
    faa4:	e0bf6617 	ldw	r2,-616(fp)
    faa8:	2084f03a 	xor	r2,r4,r2
    faac:	1887883a 	add	r3,r3,r2
    fab0:	e0bf7a17 	ldw	r2,-536(fp)
    fab4:	100813fa 	roli	r4,r2,15
    fab8:	e0bf7a17 	ldw	r2,-536(fp)
    fabc:	1004137a 	roli	r2,r2,13
    fac0:	2088f03a 	xor	r4,r4,r2
    fac4:	e0bf7a17 	ldw	r2,-536(fp)
    fac8:	1004d2ba 	srli	r2,r2,10
    facc:	2088f03a 	xor	r4,r4,r2
    fad0:	e0bf9b17 	ldw	r2,-404(fp)
    fad4:	2089883a 	add	r4,r4,r2
    fad8:	e17f8317 	ldw	r5,-500(fp)
    fadc:	008001c4 	movi	r2,7
    fae0:	288a583a 	ror	r5,r5,r2
    fae4:	e0bf8317 	ldw	r2,-500(fp)
    fae8:	100413ba 	roli	r2,r2,14
    faec:	288af03a 	xor	r5,r5,r2
    faf0:	e0bf8317 	ldw	r2,-500(fp)
    faf4:	1004d0fa 	srli	r2,r2,3
    faf8:	2884f03a 	xor	r2,r5,r2
    fafc:	2085883a 	add	r2,r4,r2
    fb00:	e13f8017 	ldw	r4,-512(fp)
    fb04:	2085883a 	add	r2,r4,r2
    fb08:	e0bf8015 	stw	r2,-512(fp)
    fb0c:	e0bf8017 	ldw	r2,-512(fp)
    fb10:	1887883a 	add	r3,r3,r2
    fb14:	00972c74 	movhi	r2,23729
    fb18:	10aa7704 	addi	r2,r2,-22052
    fb1c:	1885883a 	add	r2,r3,r2
    fb20:	e0bfaa15 	stw	r2,-344(fp)
    fb24:	e0ff6817 	ldw	r3,-608(fp)
    fb28:	00800084 	movi	r2,2
    fb2c:	1886583a 	ror	r3,r3,r2
    fb30:	e13f6817 	ldw	r4,-608(fp)
    fb34:	00800344 	movi	r2,13
    fb38:	2084583a 	ror	r2,r4,r2
    fb3c:	1886f03a 	xor	r3,r3,r2
    fb40:	e0bf6817 	ldw	r2,-608(fp)
    fb44:	100412ba 	roli	r2,r2,10
    fb48:	1886f03a 	xor	r3,r3,r2
    fb4c:	e13f6817 	ldw	r4,-608(fp)
    fb50:	e0bf6917 	ldw	r2,-604(fp)
    fb54:	2088703a 	and	r4,r4,r2
    fb58:	e17f6817 	ldw	r5,-608(fp)
    fb5c:	e0bf6917 	ldw	r2,-604(fp)
    fb60:	288ab03a 	or	r5,r5,r2
    fb64:	e0bf6a17 	ldw	r2,-600(fp)
    fb68:	2884703a 	and	r2,r5,r2
    fb6c:	2084b03a 	or	r2,r4,r2
    fb70:	1885883a 	add	r2,r3,r2
    fb74:	e0bfab15 	stw	r2,-340(fp)
    fb78:	e0ff6b17 	ldw	r3,-596(fp)
    fb7c:	e0bfaa17 	ldw	r2,-344(fp)
    fb80:	1885883a 	add	r2,r3,r2
    fb84:	e0bf6b15 	stw	r2,-596(fp)
    fb88:	e0ffaa17 	ldw	r3,-344(fp)
    fb8c:	e0bfab17 	ldw	r2,-340(fp)
    fb90:	1885883a 	add	r2,r3,r2
    fb94:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));
    fb98:	e0ff6b17 	ldw	r3,-596(fp)
    fb9c:	00800184 	movi	r2,6
    fba0:	1886583a 	ror	r3,r3,r2
    fba4:	e13f6b17 	ldw	r4,-596(fp)
    fba8:	008002c4 	movi	r2,11
    fbac:	2084583a 	ror	r2,r4,r2
    fbb0:	1886f03a 	xor	r3,r3,r2
    fbb4:	e0bf6b17 	ldw	r2,-596(fp)
    fbb8:	100411fa 	roli	r2,r2,7
    fbbc:	1886f03a 	xor	r3,r3,r2
    fbc0:	e0bf6617 	ldw	r2,-616(fp)
    fbc4:	1887883a 	add	r3,r3,r2
    fbc8:	e13f6c17 	ldw	r4,-592(fp)
    fbcc:	e0bf6d17 	ldw	r2,-588(fp)
    fbd0:	2088f03a 	xor	r4,r4,r2
    fbd4:	e0bf6b17 	ldw	r2,-596(fp)
    fbd8:	2088703a 	and	r4,r4,r2
    fbdc:	e0bf6d17 	ldw	r2,-588(fp)
    fbe0:	2084f03a 	xor	r2,r4,r2
    fbe4:	1887883a 	add	r3,r3,r2
    fbe8:	e0bf7d17 	ldw	r2,-524(fp)
    fbec:	100813fa 	roli	r4,r2,15
    fbf0:	e0bf7d17 	ldw	r2,-524(fp)
    fbf4:	1004137a 	roli	r2,r2,13
    fbf8:	2088f03a 	xor	r4,r4,r2
    fbfc:	e0bf7d17 	ldw	r2,-524(fp)
    fc00:	1004d2ba 	srli	r2,r2,10
    fc04:	2088f03a 	xor	r4,r4,r2
    fc08:	e0bf6e17 	ldw	r2,-584(fp)
    fc0c:	2089883a 	add	r4,r4,r2
    fc10:	e17f8617 	ldw	r5,-488(fp)
    fc14:	008001c4 	movi	r2,7
    fc18:	288a583a 	ror	r5,r5,r2
    fc1c:	e0bf8617 	ldw	r2,-488(fp)
    fc20:	100413ba 	roli	r2,r2,14
    fc24:	288af03a 	xor	r5,r5,r2
    fc28:	e0bf8617 	ldw	r2,-488(fp)
    fc2c:	1004d0fa 	srli	r2,r2,3
    fc30:	2884f03a 	xor	r2,r5,r2
    fc34:	2085883a 	add	r2,r4,r2
    fc38:	e13f8317 	ldw	r4,-500(fp)
    fc3c:	2085883a 	add	r2,r4,r2
    fc40:	e0bf8315 	stw	r2,-500(fp)
    fc44:	e0bf8317 	ldw	r2,-500(fp)
    fc48:	1887883a 	add	r3,r3,r2
    fc4c:	009dbeb4 	movhi	r2,30458
    fc50:	10a23684 	addi	r2,r2,-30502
    fc54:	1885883a 	add	r2,r3,r2
    fc58:	e0bfac15 	stw	r2,-336(fp)
    fc5c:	e0ff6717 	ldw	r3,-612(fp)
    fc60:	00800084 	movi	r2,2
    fc64:	1886583a 	ror	r3,r3,r2
    fc68:	e13f6717 	ldw	r4,-612(fp)
    fc6c:	00800344 	movi	r2,13
    fc70:	2084583a 	ror	r2,r4,r2
    fc74:	1886f03a 	xor	r3,r3,r2
    fc78:	e0bf6717 	ldw	r2,-612(fp)
    fc7c:	100412ba 	roli	r2,r2,10
    fc80:	1886f03a 	xor	r3,r3,r2
    fc84:	e13f6717 	ldw	r4,-612(fp)
    fc88:	e0bf6817 	ldw	r2,-608(fp)
    fc8c:	2088703a 	and	r4,r4,r2
    fc90:	e17f6717 	ldw	r5,-612(fp)
    fc94:	e0bf6817 	ldw	r2,-608(fp)
    fc98:	288ab03a 	or	r5,r5,r2
    fc9c:	e0bf6917 	ldw	r2,-604(fp)
    fca0:	2884703a 	and	r2,r5,r2
    fca4:	2084b03a 	or	r2,r4,r2
    fca8:	1885883a 	add	r2,r3,r2
    fcac:	e0bfad15 	stw	r2,-332(fp)
    fcb0:	e0ff6a17 	ldw	r3,-600(fp)
    fcb4:	e0bfac17 	ldw	r2,-336(fp)
    fcb8:	1885883a 	add	r2,r3,r2
    fcbc:	e0bf6a15 	stw	r2,-600(fp)
    fcc0:	e0ffac17 	ldw	r3,-336(fp)
    fcc4:	e0bfad17 	ldw	r2,-332(fp)
    fcc8:	1885883a 	add	r2,r3,r2
    fccc:	e0bf6615 	stw	r2,-616(fp)
    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));
    fcd0:	e0ff6a17 	ldw	r3,-600(fp)
    fcd4:	00800184 	movi	r2,6
    fcd8:	1886583a 	ror	r3,r3,r2
    fcdc:	e13f6a17 	ldw	r4,-600(fp)
    fce0:	008002c4 	movi	r2,11
    fce4:	2084583a 	ror	r2,r4,r2
    fce8:	1886f03a 	xor	r3,r3,r2
    fcec:	e0bf6a17 	ldw	r2,-600(fp)
    fcf0:	100411fa 	roli	r2,r2,7
    fcf4:	1886f03a 	xor	r3,r3,r2
    fcf8:	e0bf6d17 	ldw	r2,-588(fp)
    fcfc:	1887883a 	add	r3,r3,r2
    fd00:	e13f6b17 	ldw	r4,-596(fp)
    fd04:	e0bf6c17 	ldw	r2,-592(fp)
    fd08:	2088f03a 	xor	r4,r4,r2
    fd0c:	e0bf6a17 	ldw	r2,-600(fp)
    fd10:	2088703a 	and	r4,r4,r2
    fd14:	e0bf6c17 	ldw	r2,-592(fp)
    fd18:	2084f03a 	xor	r2,r4,r2
    fd1c:	1887883a 	add	r3,r3,r2
    fd20:	e0bf8017 	ldw	r2,-512(fp)
    fd24:	100813fa 	roli	r4,r2,15
    fd28:	e0bf8017 	ldw	r2,-512(fp)
    fd2c:	1004137a 	roli	r2,r2,13
    fd30:	2088f03a 	xor	r4,r4,r2
    fd34:	e0bf8017 	ldw	r2,-512(fp)
    fd38:	1004d2ba 	srli	r2,r2,10
    fd3c:	2088f03a 	xor	r4,r4,r2
    fd40:	e0bf7117 	ldw	r2,-572(fp)
    fd44:	2089883a 	add	r4,r4,r2
    fd48:	e17f8917 	ldw	r5,-476(fp)
    fd4c:	008001c4 	movi	r2,7
    fd50:	288a583a 	ror	r5,r5,r2
    fd54:	e0bf8917 	ldw	r2,-476(fp)
    fd58:	100413ba 	roli	r2,r2,14
    fd5c:	288af03a 	xor	r5,r5,r2
    fd60:	e0bf8917 	ldw	r2,-476(fp)
    fd64:	1004d0fa 	srli	r2,r2,3
    fd68:	2884f03a 	xor	r2,r5,r2
    fd6c:	2085883a 	add	r2,r4,r2
    fd70:	e13f8617 	ldw	r4,-488(fp)
    fd74:	2085883a 	add	r2,r4,r2
    fd78:	e0bf8615 	stw	r2,-488(fp)
    fd7c:	e0bf8617 	ldw	r2,-488(fp)
    fd80:	1887883a 	add	r3,r3,r2
    fd84:	00a60fb4 	movhi	r2,38974
    fd88:	10945484 	addi	r2,r2,20818
    fd8c:	1885883a 	add	r2,r3,r2
    fd90:	e0bfae15 	stw	r2,-328(fp)
    fd94:	e0ff6617 	ldw	r3,-616(fp)
    fd98:	00800084 	movi	r2,2
    fd9c:	1886583a 	ror	r3,r3,r2
    fda0:	e13f6617 	ldw	r4,-616(fp)
    fda4:	00800344 	movi	r2,13
    fda8:	2084583a 	ror	r2,r4,r2
    fdac:	1886f03a 	xor	r3,r3,r2
    fdb0:	e0bf6617 	ldw	r2,-616(fp)
    fdb4:	100412ba 	roli	r2,r2,10
    fdb8:	1886f03a 	xor	r3,r3,r2
    fdbc:	e13f6617 	ldw	r4,-616(fp)
    fdc0:	e0bf6717 	ldw	r2,-612(fp)
    fdc4:	2088703a 	and	r4,r4,r2
    fdc8:	e17f6617 	ldw	r5,-616(fp)
    fdcc:	e0bf6717 	ldw	r2,-612(fp)
    fdd0:	288ab03a 	or	r5,r5,r2
    fdd4:	e0bf6817 	ldw	r2,-608(fp)
    fdd8:	2884703a 	and	r2,r5,r2
    fddc:	2084b03a 	or	r2,r4,r2
    fde0:	1885883a 	add	r2,r3,r2
    fde4:	e0bfaf15 	stw	r2,-324(fp)
    fde8:	e0ff6917 	ldw	r3,-604(fp)
    fdec:	e0bfae17 	ldw	r2,-328(fp)
    fdf0:	1885883a 	add	r2,r3,r2
    fdf4:	e0bf6915 	stw	r2,-604(fp)
    fdf8:	e0ffae17 	ldw	r3,-328(fp)
    fdfc:	e0bfaf17 	ldw	r2,-324(fp)
    fe00:	1885883a 	add	r2,r3,r2
    fe04:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));
    fe08:	e0ff6917 	ldw	r3,-604(fp)
    fe0c:	00800184 	movi	r2,6
    fe10:	1886583a 	ror	r3,r3,r2
    fe14:	e13f6917 	ldw	r4,-604(fp)
    fe18:	008002c4 	movi	r2,11
    fe1c:	2084583a 	ror	r2,r4,r2
    fe20:	1886f03a 	xor	r3,r3,r2
    fe24:	e0bf6917 	ldw	r2,-604(fp)
    fe28:	100411fa 	roli	r2,r2,7
    fe2c:	1886f03a 	xor	r3,r3,r2
    fe30:	e0bf6c17 	ldw	r2,-592(fp)
    fe34:	1887883a 	add	r3,r3,r2
    fe38:	e13f6a17 	ldw	r4,-600(fp)
    fe3c:	e0bf6b17 	ldw	r2,-596(fp)
    fe40:	2088f03a 	xor	r4,r4,r2
    fe44:	e0bf6917 	ldw	r2,-604(fp)
    fe48:	2088703a 	and	r4,r4,r2
    fe4c:	e0bf6b17 	ldw	r2,-596(fp)
    fe50:	2084f03a 	xor	r2,r4,r2
    fe54:	1887883a 	add	r3,r3,r2
    fe58:	e0bf8317 	ldw	r2,-500(fp)
    fe5c:	100813fa 	roli	r4,r2,15
    fe60:	e0bf8317 	ldw	r2,-500(fp)
    fe64:	1004137a 	roli	r2,r2,13
    fe68:	2088f03a 	xor	r4,r4,r2
    fe6c:	e0bf8317 	ldw	r2,-500(fp)
    fe70:	1004d2ba 	srli	r2,r2,10
    fe74:	2088f03a 	xor	r4,r4,r2
    fe78:	e0bf7417 	ldw	r2,-560(fp)
    fe7c:	2089883a 	add	r4,r4,r2
    fe80:	e17f8c17 	ldw	r5,-464(fp)
    fe84:	008001c4 	movi	r2,7
    fe88:	288a583a 	ror	r5,r5,r2
    fe8c:	e0bf8c17 	ldw	r2,-464(fp)
    fe90:	100413ba 	roli	r2,r2,14
    fe94:	288af03a 	xor	r5,r5,r2
    fe98:	e0bf8c17 	ldw	r2,-464(fp)
    fe9c:	1004d0fa 	srli	r2,r2,3
    fea0:	2884f03a 	xor	r2,r5,r2
    fea4:	2085883a 	add	r2,r4,r2
    fea8:	e13f8917 	ldw	r4,-476(fp)
    feac:	2085883a 	add	r2,r4,r2
    feb0:	e0bf8915 	stw	r2,-476(fp)
    feb4:	e0bf8917 	ldw	r2,-476(fp)
    feb8:	1887883a 	add	r3,r3,r2
    febc:	00aa0cb4 	movhi	r2,43058
    fec0:	10b19b44 	addi	r2,r2,-14739
    fec4:	1885883a 	add	r2,r3,r2
    fec8:	e0bfb015 	stw	r2,-320(fp)
    fecc:	e0ff6d17 	ldw	r3,-588(fp)
    fed0:	00800084 	movi	r2,2
    fed4:	1886583a 	ror	r3,r3,r2
    fed8:	e13f6d17 	ldw	r4,-588(fp)
    fedc:	00800344 	movi	r2,13
    fee0:	2084583a 	ror	r2,r4,r2
    fee4:	1886f03a 	xor	r3,r3,r2
    fee8:	e0bf6d17 	ldw	r2,-588(fp)
    feec:	100412ba 	roli	r2,r2,10
    fef0:	1886f03a 	xor	r3,r3,r2
    fef4:	e13f6d17 	ldw	r4,-588(fp)
    fef8:	e0bf6617 	ldw	r2,-616(fp)
    fefc:	2088703a 	and	r4,r4,r2
    ff00:	e17f6d17 	ldw	r5,-588(fp)
    ff04:	e0bf6617 	ldw	r2,-616(fp)
    ff08:	288ab03a 	or	r5,r5,r2
    ff0c:	e0bf6717 	ldw	r2,-612(fp)
    ff10:	2884703a 	and	r2,r5,r2
    ff14:	2084b03a 	or	r2,r4,r2
    ff18:	1885883a 	add	r2,r3,r2
    ff1c:	e0bfb115 	stw	r2,-316(fp)
    ff20:	e0ff6817 	ldw	r3,-608(fp)
    ff24:	e0bfb017 	ldw	r2,-320(fp)
    ff28:	1885883a 	add	r2,r3,r2
    ff2c:	e0bf6815 	stw	r2,-608(fp)
    ff30:	e0ffb017 	ldw	r3,-320(fp)
    ff34:	e0bfb117 	ldw	r2,-316(fp)
    ff38:	1885883a 	add	r2,r3,r2
    ff3c:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));
    ff40:	e0ff6817 	ldw	r3,-608(fp)
    ff44:	00800184 	movi	r2,6
    ff48:	1886583a 	ror	r3,r3,r2
    ff4c:	e13f6817 	ldw	r4,-608(fp)
    ff50:	008002c4 	movi	r2,11
    ff54:	2084583a 	ror	r2,r4,r2
    ff58:	1886f03a 	xor	r3,r3,r2
    ff5c:	e0bf6817 	ldw	r2,-608(fp)
    ff60:	100411fa 	roli	r2,r2,7
    ff64:	1886f03a 	xor	r3,r3,r2
    ff68:	e0bf6b17 	ldw	r2,-596(fp)
    ff6c:	1887883a 	add	r3,r3,r2
    ff70:	e13f6917 	ldw	r4,-604(fp)
    ff74:	e0bf6a17 	ldw	r2,-600(fp)
    ff78:	2088f03a 	xor	r4,r4,r2
    ff7c:	e0bf6817 	ldw	r2,-608(fp)
    ff80:	2088703a 	and	r4,r4,r2
    ff84:	e0bf6a17 	ldw	r2,-600(fp)
    ff88:	2084f03a 	xor	r2,r4,r2
    ff8c:	1887883a 	add	r3,r3,r2
    ff90:	e0bf8617 	ldw	r2,-488(fp)
    ff94:	100813fa 	roli	r4,r2,15
    ff98:	e0bf8617 	ldw	r2,-488(fp)
    ff9c:	1004137a 	roli	r2,r2,13
    ffa0:	2088f03a 	xor	r4,r4,r2
    ffa4:	e0bf8617 	ldw	r2,-488(fp)
    ffa8:	1004d2ba 	srli	r2,r2,10
    ffac:	2088f03a 	xor	r4,r4,r2
    ffb0:	e0bf7717 	ldw	r2,-548(fp)
    ffb4:	2089883a 	add	r4,r4,r2
    ffb8:	e17f8f17 	ldw	r5,-452(fp)
    ffbc:	008001c4 	movi	r2,7
    ffc0:	288a583a 	ror	r5,r5,r2
    ffc4:	e0bf8f17 	ldw	r2,-452(fp)
    ffc8:	100413ba 	roli	r2,r2,14
    ffcc:	288af03a 	xor	r5,r5,r2
    ffd0:	e0bf8f17 	ldw	r2,-452(fp)
    ffd4:	1004d0fa 	srli	r2,r2,3
    ffd8:	2884f03a 	xor	r2,r5,r2
    ffdc:	2085883a 	add	r2,r4,r2
    ffe0:	e13f8c17 	ldw	r4,-464(fp)
    ffe4:	2085883a 	add	r2,r4,r2
    ffe8:	e0bf8c15 	stw	r2,-464(fp)
    ffec:	e0bf8c17 	ldw	r2,-464(fp)
    fff0:	1887883a 	add	r3,r3,r2
    fff4:	00ac00f4 	movhi	r2,45059
    fff8:	1089f204 	addi	r2,r2,10184
    fffc:	1885883a 	add	r2,r3,r2
   10000:	e0bfb215 	stw	r2,-312(fp)
   10004:	e0ff6c17 	ldw	r3,-592(fp)
   10008:	00800084 	movi	r2,2
   1000c:	1886583a 	ror	r3,r3,r2
   10010:	e13f6c17 	ldw	r4,-592(fp)
   10014:	00800344 	movi	r2,13
   10018:	2084583a 	ror	r2,r4,r2
   1001c:	1886f03a 	xor	r3,r3,r2
   10020:	e0bf6c17 	ldw	r2,-592(fp)
   10024:	100412ba 	roli	r2,r2,10
   10028:	1886f03a 	xor	r3,r3,r2
   1002c:	e13f6c17 	ldw	r4,-592(fp)
   10030:	e0bf6d17 	ldw	r2,-588(fp)
   10034:	2088703a 	and	r4,r4,r2
   10038:	e17f6c17 	ldw	r5,-592(fp)
   1003c:	e0bf6d17 	ldw	r2,-588(fp)
   10040:	288ab03a 	or	r5,r5,r2
   10044:	e0bf6617 	ldw	r2,-616(fp)
   10048:	2884703a 	and	r2,r5,r2
   1004c:	2084b03a 	or	r2,r4,r2
   10050:	1885883a 	add	r2,r3,r2
   10054:	e0bfb315 	stw	r2,-308(fp)
   10058:	e0ff6717 	ldw	r3,-612(fp)
   1005c:	e0bfb217 	ldw	r2,-312(fp)
   10060:	1885883a 	add	r2,r3,r2
   10064:	e0bf6715 	stw	r2,-612(fp)
   10068:	e0ffb217 	ldw	r3,-312(fp)
   1006c:	e0bfb317 	ldw	r2,-308(fp)
   10070:	1885883a 	add	r2,r3,r2
   10074:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));
   10078:	e0ff6717 	ldw	r3,-612(fp)
   1007c:	00800184 	movi	r2,6
   10080:	1886583a 	ror	r3,r3,r2
   10084:	e13f6717 	ldw	r4,-612(fp)
   10088:	008002c4 	movi	r2,11
   1008c:	2084583a 	ror	r2,r4,r2
   10090:	1886f03a 	xor	r3,r3,r2
   10094:	e0bf6717 	ldw	r2,-612(fp)
   10098:	100411fa 	roli	r2,r2,7
   1009c:	1886f03a 	xor	r3,r3,r2
   100a0:	e0bf6a17 	ldw	r2,-600(fp)
   100a4:	1887883a 	add	r3,r3,r2
   100a8:	e13f6817 	ldw	r4,-608(fp)
   100ac:	e0bf6917 	ldw	r2,-604(fp)
   100b0:	2088f03a 	xor	r4,r4,r2
   100b4:	e0bf6717 	ldw	r2,-612(fp)
   100b8:	2088703a 	and	r4,r4,r2
   100bc:	e0bf6917 	ldw	r2,-604(fp)
   100c0:	2084f03a 	xor	r2,r4,r2
   100c4:	1887883a 	add	r3,r3,r2
   100c8:	e0bf8917 	ldw	r2,-476(fp)
   100cc:	100813fa 	roli	r4,r2,15
   100d0:	e0bf8917 	ldw	r2,-476(fp)
   100d4:	1004137a 	roli	r2,r2,13
   100d8:	2088f03a 	xor	r4,r4,r2
   100dc:	e0bf8917 	ldw	r2,-476(fp)
   100e0:	1004d2ba 	srli	r2,r2,10
   100e4:	2088f03a 	xor	r4,r4,r2
   100e8:	e0bf7a17 	ldw	r2,-536(fp)
   100ec:	2089883a 	add	r4,r4,r2
   100f0:	e17f9217 	ldw	r5,-440(fp)
   100f4:	008001c4 	movi	r2,7
   100f8:	288a583a 	ror	r5,r5,r2
   100fc:	e0bf9217 	ldw	r2,-440(fp)
   10100:	100413ba 	roli	r2,r2,14
   10104:	288af03a 	xor	r5,r5,r2
   10108:	e0bf9217 	ldw	r2,-440(fp)
   1010c:	1004d0fa 	srli	r2,r2,3
   10110:	2884f03a 	xor	r2,r5,r2
   10114:	2085883a 	add	r2,r4,r2
   10118:	e13f8f17 	ldw	r4,-452(fp)
   1011c:	2085883a 	add	r2,r4,r2
   10120:	e0bf8f15 	stw	r2,-452(fp)
   10124:	e0bf8f17 	ldw	r2,-452(fp)
   10128:	1887883a 	add	r3,r3,r2
   1012c:	00afd674 	movhi	r2,48985
   10130:	109ff1c4 	addi	r2,r2,32711
   10134:	1885883a 	add	r2,r3,r2
   10138:	e0bfb415 	stw	r2,-304(fp)
   1013c:	e0ff6b17 	ldw	r3,-596(fp)
   10140:	00800084 	movi	r2,2
   10144:	1886583a 	ror	r3,r3,r2
   10148:	e13f6b17 	ldw	r4,-596(fp)
   1014c:	00800344 	movi	r2,13
   10150:	2084583a 	ror	r2,r4,r2
   10154:	1886f03a 	xor	r3,r3,r2
   10158:	e0bf6b17 	ldw	r2,-596(fp)
   1015c:	100412ba 	roli	r2,r2,10
   10160:	1886f03a 	xor	r3,r3,r2
   10164:	e13f6b17 	ldw	r4,-596(fp)
   10168:	e0bf6c17 	ldw	r2,-592(fp)
   1016c:	2088703a 	and	r4,r4,r2
   10170:	e17f6b17 	ldw	r5,-596(fp)
   10174:	e0bf6c17 	ldw	r2,-592(fp)
   10178:	288ab03a 	or	r5,r5,r2
   1017c:	e0bf6d17 	ldw	r2,-588(fp)
   10180:	2884703a 	and	r2,r5,r2
   10184:	2084b03a 	or	r2,r4,r2
   10188:	1885883a 	add	r2,r3,r2
   1018c:	e0bfb515 	stw	r2,-300(fp)
   10190:	e0ff6617 	ldw	r3,-616(fp)
   10194:	e0bfb417 	ldw	r2,-304(fp)
   10198:	1885883a 	add	r2,r3,r2
   1019c:	e0bf6615 	stw	r2,-616(fp)
   101a0:	e0ffb417 	ldw	r3,-304(fp)
   101a4:	e0bfb517 	ldw	r2,-300(fp)
   101a8:	1885883a 	add	r2,r3,r2
   101ac:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));
   101b0:	e0ff6617 	ldw	r3,-616(fp)
   101b4:	00800184 	movi	r2,6
   101b8:	1886583a 	ror	r3,r3,r2
   101bc:	e13f6617 	ldw	r4,-616(fp)
   101c0:	008002c4 	movi	r2,11
   101c4:	2084583a 	ror	r2,r4,r2
   101c8:	1886f03a 	xor	r3,r3,r2
   101cc:	e0bf6617 	ldw	r2,-616(fp)
   101d0:	100411fa 	roli	r2,r2,7
   101d4:	1886f03a 	xor	r3,r3,r2
   101d8:	e0bf6917 	ldw	r2,-604(fp)
   101dc:	1887883a 	add	r3,r3,r2
   101e0:	e13f6717 	ldw	r4,-612(fp)
   101e4:	e0bf6817 	ldw	r2,-608(fp)
   101e8:	2088f03a 	xor	r4,r4,r2
   101ec:	e0bf6617 	ldw	r2,-616(fp)
   101f0:	2088703a 	and	r4,r4,r2
   101f4:	e0bf6817 	ldw	r2,-608(fp)
   101f8:	2084f03a 	xor	r2,r4,r2
   101fc:	1887883a 	add	r3,r3,r2
   10200:	e0bf8c17 	ldw	r2,-464(fp)
   10204:	100813fa 	roli	r4,r2,15
   10208:	e0bf8c17 	ldw	r2,-464(fp)
   1020c:	1004137a 	roli	r2,r2,13
   10210:	2088f03a 	xor	r4,r4,r2
   10214:	e0bf8c17 	ldw	r2,-464(fp)
   10218:	1004d2ba 	srli	r2,r2,10
   1021c:	2088f03a 	xor	r4,r4,r2
   10220:	e0bf7d17 	ldw	r2,-524(fp)
   10224:	2089883a 	add	r4,r4,r2
   10228:	e17f9517 	ldw	r5,-428(fp)
   1022c:	008001c4 	movi	r2,7
   10230:	288a583a 	ror	r5,r5,r2
   10234:	e0bf9517 	ldw	r2,-428(fp)
   10238:	100413ba 	roli	r2,r2,14
   1023c:	288af03a 	xor	r5,r5,r2
   10240:	e0bf9517 	ldw	r2,-428(fp)
   10244:	1004d0fa 	srli	r2,r2,3
   10248:	2884f03a 	xor	r2,r5,r2
   1024c:	2085883a 	add	r2,r4,r2
   10250:	e13f9217 	ldw	r4,-440(fp)
   10254:	2085883a 	add	r2,r4,r2
   10258:	e0bf9215 	stw	r2,-440(fp)
   1025c:	e0bf9217 	ldw	r2,-440(fp)
   10260:	1887883a 	add	r3,r3,r2
   10264:	00b1b834 	movhi	r2,50912
   10268:	1082fcc4 	addi	r2,r2,3059
   1026c:	1885883a 	add	r2,r3,r2
   10270:	e0bfb615 	stw	r2,-296(fp)
   10274:	e0ff6a17 	ldw	r3,-600(fp)
   10278:	00800084 	movi	r2,2
   1027c:	1886583a 	ror	r3,r3,r2
   10280:	e13f6a17 	ldw	r4,-600(fp)
   10284:	00800344 	movi	r2,13
   10288:	2084583a 	ror	r2,r4,r2
   1028c:	1886f03a 	xor	r3,r3,r2
   10290:	e0bf6a17 	ldw	r2,-600(fp)
   10294:	100412ba 	roli	r2,r2,10
   10298:	1886f03a 	xor	r3,r3,r2
   1029c:	e13f6a17 	ldw	r4,-600(fp)
   102a0:	e0bf6b17 	ldw	r2,-596(fp)
   102a4:	2088703a 	and	r4,r4,r2
   102a8:	e17f6a17 	ldw	r5,-600(fp)
   102ac:	e0bf6b17 	ldw	r2,-596(fp)
   102b0:	288ab03a 	or	r5,r5,r2
   102b4:	e0bf6c17 	ldw	r2,-592(fp)
   102b8:	2884703a 	and	r2,r5,r2
   102bc:	2084b03a 	or	r2,r4,r2
   102c0:	1885883a 	add	r2,r3,r2
   102c4:	e0bfb715 	stw	r2,-292(fp)
   102c8:	e0ff6d17 	ldw	r3,-588(fp)
   102cc:	e0bfb617 	ldw	r2,-296(fp)
   102d0:	1885883a 	add	r2,r3,r2
   102d4:	e0bf6d15 	stw	r2,-588(fp)
   102d8:	e0ffb617 	ldw	r3,-296(fp)
   102dc:	e0bfb717 	ldw	r2,-292(fp)
   102e0:	1885883a 	add	r2,r3,r2
   102e4:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));
   102e8:	e0ff6d17 	ldw	r3,-588(fp)
   102ec:	00800184 	movi	r2,6
   102f0:	1886583a 	ror	r3,r3,r2
   102f4:	e13f6d17 	ldw	r4,-588(fp)
   102f8:	008002c4 	movi	r2,11
   102fc:	2084583a 	ror	r2,r4,r2
   10300:	1886f03a 	xor	r3,r3,r2
   10304:	e0bf6d17 	ldw	r2,-588(fp)
   10308:	100411fa 	roli	r2,r2,7
   1030c:	1886f03a 	xor	r3,r3,r2
   10310:	e0bf6817 	ldw	r2,-608(fp)
   10314:	1887883a 	add	r3,r3,r2
   10318:	e13f6617 	ldw	r4,-616(fp)
   1031c:	e0bf6717 	ldw	r2,-612(fp)
   10320:	2088f03a 	xor	r4,r4,r2
   10324:	e0bf6d17 	ldw	r2,-588(fp)
   10328:	2088703a 	and	r4,r4,r2
   1032c:	e0bf6717 	ldw	r2,-612(fp)
   10330:	2084f03a 	xor	r2,r4,r2
   10334:	1887883a 	add	r3,r3,r2
   10338:	e0bf8f17 	ldw	r2,-452(fp)
   1033c:	100813fa 	roli	r4,r2,15
   10340:	e0bf8f17 	ldw	r2,-452(fp)
   10344:	1004137a 	roli	r2,r2,13
   10348:	2088f03a 	xor	r4,r4,r2
   1034c:	e0bf8f17 	ldw	r2,-452(fp)
   10350:	1004d2ba 	srli	r2,r2,10
   10354:	2088f03a 	xor	r4,r4,r2
   10358:	e0bf8017 	ldw	r2,-512(fp)
   1035c:	2089883a 	add	r4,r4,r2
   10360:	e17f9817 	ldw	r5,-416(fp)
   10364:	008001c4 	movi	r2,7
   10368:	288a583a 	ror	r5,r5,r2
   1036c:	e0bf9817 	ldw	r2,-416(fp)
   10370:	100413ba 	roli	r2,r2,14
   10374:	288af03a 	xor	r5,r5,r2
   10378:	e0bf9817 	ldw	r2,-416(fp)
   1037c:	1004d0fa 	srli	r2,r2,3
   10380:	2884f03a 	xor	r2,r5,r2
   10384:	2085883a 	add	r2,r4,r2
   10388:	e13f9517 	ldw	r4,-428(fp)
   1038c:	2085883a 	add	r2,r4,r2
   10390:	e0bf9515 	stw	r2,-428(fp)
   10394:	e0bf9517 	ldw	r2,-428(fp)
   10398:	1887883a 	add	r3,r3,r2
   1039c:	00b56a34 	movhi	r2,54696
   103a0:	10a451c4 	addi	r2,r2,-28345
   103a4:	1885883a 	add	r2,r3,r2
   103a8:	e0bfb815 	stw	r2,-288(fp)
   103ac:	e0ff6917 	ldw	r3,-604(fp)
   103b0:	00800084 	movi	r2,2
   103b4:	1886583a 	ror	r3,r3,r2
   103b8:	e13f6917 	ldw	r4,-604(fp)
   103bc:	00800344 	movi	r2,13
   103c0:	2084583a 	ror	r2,r4,r2
   103c4:	1886f03a 	xor	r3,r3,r2
   103c8:	e0bf6917 	ldw	r2,-604(fp)
   103cc:	100412ba 	roli	r2,r2,10
   103d0:	1886f03a 	xor	r3,r3,r2
   103d4:	e13f6917 	ldw	r4,-604(fp)
   103d8:	e0bf6a17 	ldw	r2,-600(fp)
   103dc:	2088703a 	and	r4,r4,r2
   103e0:	e17f6917 	ldw	r5,-604(fp)
   103e4:	e0bf6a17 	ldw	r2,-600(fp)
   103e8:	288ab03a 	or	r5,r5,r2
   103ec:	e0bf6b17 	ldw	r2,-596(fp)
   103f0:	2884703a 	and	r2,r5,r2
   103f4:	2084b03a 	or	r2,r4,r2
   103f8:	1885883a 	add	r2,r3,r2
   103fc:	e0bfb915 	stw	r2,-284(fp)
   10400:	e0ff6c17 	ldw	r3,-592(fp)
   10404:	e0bfb817 	ldw	r2,-288(fp)
   10408:	1885883a 	add	r2,r3,r2
   1040c:	e0bf6c15 	stw	r2,-592(fp)
   10410:	e0ffb817 	ldw	r3,-288(fp)
   10414:	e0bfb917 	ldw	r2,-284(fp)
   10418:	1885883a 	add	r2,r3,r2
   1041c:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));
   10420:	e0ff6c17 	ldw	r3,-592(fp)
   10424:	00800184 	movi	r2,6
   10428:	1886583a 	ror	r3,r3,r2
   1042c:	e13f6c17 	ldw	r4,-592(fp)
   10430:	008002c4 	movi	r2,11
   10434:	2084583a 	ror	r2,r4,r2
   10438:	1886f03a 	xor	r3,r3,r2
   1043c:	e0bf6c17 	ldw	r2,-592(fp)
   10440:	100411fa 	roli	r2,r2,7
   10444:	1886f03a 	xor	r3,r3,r2
   10448:	e0bf6717 	ldw	r2,-612(fp)
   1044c:	1887883a 	add	r3,r3,r2
   10450:	e13f6d17 	ldw	r4,-588(fp)
   10454:	e0bf6617 	ldw	r2,-616(fp)
   10458:	2088f03a 	xor	r4,r4,r2
   1045c:	e0bf6c17 	ldw	r2,-592(fp)
   10460:	2088703a 	and	r4,r4,r2
   10464:	e0bf6617 	ldw	r2,-616(fp)
   10468:	2084f03a 	xor	r2,r4,r2
   1046c:	1887883a 	add	r3,r3,r2
   10470:	e0bf9217 	ldw	r2,-440(fp)
   10474:	100813fa 	roli	r4,r2,15
   10478:	e0bf9217 	ldw	r2,-440(fp)
   1047c:	1004137a 	roli	r2,r2,13
   10480:	2088f03a 	xor	r4,r4,r2
   10484:	e0bf9217 	ldw	r2,-440(fp)
   10488:	1004d2ba 	srli	r2,r2,10
   1048c:	2088f03a 	xor	r4,r4,r2
   10490:	e0bf8317 	ldw	r2,-500(fp)
   10494:	2089883a 	add	r4,r4,r2
   10498:	e17f9b17 	ldw	r5,-404(fp)
   1049c:	008001c4 	movi	r2,7
   104a0:	288a583a 	ror	r5,r5,r2
   104a4:	e0bf9b17 	ldw	r2,-404(fp)
   104a8:	100413ba 	roli	r2,r2,14
   104ac:	288af03a 	xor	r5,r5,r2
   104b0:	e0bf9b17 	ldw	r2,-404(fp)
   104b4:	1004d0fa 	srli	r2,r2,3
   104b8:	2884f03a 	xor	r2,r5,r2
   104bc:	2085883a 	add	r2,r4,r2
   104c0:	e13f9817 	ldw	r4,-416(fp)
   104c4:	2085883a 	add	r2,r4,r2
   104c8:	e0bf9815 	stw	r2,-416(fp)
   104cc:	e0bf9817 	ldw	r2,-416(fp)
   104d0:	1887883a 	add	r3,r3,r2
   104d4:	0081b2b4 	movhi	r2,1738
   104d8:	1098d444 	addi	r2,r2,25425
   104dc:	1885883a 	add	r2,r3,r2
   104e0:	e0bfba15 	stw	r2,-280(fp)
   104e4:	e0ff6817 	ldw	r3,-608(fp)
   104e8:	00800084 	movi	r2,2
   104ec:	1886583a 	ror	r3,r3,r2
   104f0:	e13f6817 	ldw	r4,-608(fp)
   104f4:	00800344 	movi	r2,13
   104f8:	2084583a 	ror	r2,r4,r2
   104fc:	1886f03a 	xor	r3,r3,r2
   10500:	e0bf6817 	ldw	r2,-608(fp)
   10504:	100412ba 	roli	r2,r2,10
   10508:	1886f03a 	xor	r3,r3,r2
   1050c:	e13f6817 	ldw	r4,-608(fp)
   10510:	e0bf6917 	ldw	r2,-604(fp)
   10514:	2088703a 	and	r4,r4,r2
   10518:	e17f6817 	ldw	r5,-608(fp)
   1051c:	e0bf6917 	ldw	r2,-604(fp)
   10520:	288ab03a 	or	r5,r5,r2
   10524:	e0bf6a17 	ldw	r2,-600(fp)
   10528:	2884703a 	and	r2,r5,r2
   1052c:	2084b03a 	or	r2,r4,r2
   10530:	1885883a 	add	r2,r3,r2
   10534:	e0bfbb15 	stw	r2,-276(fp)
   10538:	e0ff6b17 	ldw	r3,-596(fp)
   1053c:	e0bfba17 	ldw	r2,-280(fp)
   10540:	1885883a 	add	r2,r3,r2
   10544:	e0bf6b15 	stw	r2,-596(fp)
   10548:	e0ffba17 	ldw	r3,-280(fp)
   1054c:	e0bfbb17 	ldw	r2,-276(fp)
   10550:	1885883a 	add	r2,r3,r2
   10554:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));
   10558:	e0ff6b17 	ldw	r3,-596(fp)
   1055c:	00800184 	movi	r2,6
   10560:	1886583a 	ror	r3,r3,r2
   10564:	e13f6b17 	ldw	r4,-596(fp)
   10568:	008002c4 	movi	r2,11
   1056c:	2084583a 	ror	r2,r4,r2
   10570:	1886f03a 	xor	r3,r3,r2
   10574:	e0bf6b17 	ldw	r2,-596(fp)
   10578:	100411fa 	roli	r2,r2,7
   1057c:	1886f03a 	xor	r3,r3,r2
   10580:	e0bf6617 	ldw	r2,-616(fp)
   10584:	1887883a 	add	r3,r3,r2
   10588:	e13f6c17 	ldw	r4,-592(fp)
   1058c:	e0bf6d17 	ldw	r2,-588(fp)
   10590:	2088f03a 	xor	r4,r4,r2
   10594:	e0bf6b17 	ldw	r2,-596(fp)
   10598:	2088703a 	and	r4,r4,r2
   1059c:	e0bf6d17 	ldw	r2,-588(fp)
   105a0:	2084f03a 	xor	r2,r4,r2
   105a4:	1887883a 	add	r3,r3,r2
   105a8:	e0bf9517 	ldw	r2,-428(fp)
   105ac:	100813fa 	roli	r4,r2,15
   105b0:	e0bf9517 	ldw	r2,-428(fp)
   105b4:	1004137a 	roli	r2,r2,13
   105b8:	2088f03a 	xor	r4,r4,r2
   105bc:	e0bf9517 	ldw	r2,-428(fp)
   105c0:	1004d2ba 	srli	r2,r2,10
   105c4:	2088f03a 	xor	r4,r4,r2
   105c8:	e0bf8617 	ldw	r2,-488(fp)
   105cc:	2089883a 	add	r4,r4,r2
   105d0:	e17f6e17 	ldw	r5,-584(fp)
   105d4:	008001c4 	movi	r2,7
   105d8:	288a583a 	ror	r5,r5,r2
   105dc:	e0bf6e17 	ldw	r2,-584(fp)
   105e0:	100413ba 	roli	r2,r2,14
   105e4:	288af03a 	xor	r5,r5,r2
   105e8:	e0bf6e17 	ldw	r2,-584(fp)
   105ec:	1004d0fa 	srli	r2,r2,3
   105f0:	2884f03a 	xor	r2,r5,r2
   105f4:	2085883a 	add	r2,r4,r2
   105f8:	e13f9b17 	ldw	r4,-404(fp)
   105fc:	2085883a 	add	r2,r4,r2
   10600:	e0bf9b15 	stw	r2,-404(fp)
   10604:	e0bf9b17 	ldw	r2,-404(fp)
   10608:	1887883a 	add	r3,r3,r2
   1060c:	00850a74 	movhi	r2,5161
   10610:	108a59c4 	addi	r2,r2,10599
   10614:	1885883a 	add	r2,r3,r2
   10618:	e0bfbc15 	stw	r2,-272(fp)
   1061c:	e0ff6717 	ldw	r3,-612(fp)
   10620:	00800084 	movi	r2,2
   10624:	1886583a 	ror	r3,r3,r2
   10628:	e13f6717 	ldw	r4,-612(fp)
   1062c:	00800344 	movi	r2,13
   10630:	2084583a 	ror	r2,r4,r2
   10634:	1886f03a 	xor	r3,r3,r2
   10638:	e0bf6717 	ldw	r2,-612(fp)
   1063c:	100412ba 	roli	r2,r2,10
   10640:	1886f03a 	xor	r3,r3,r2
   10644:	e13f6717 	ldw	r4,-612(fp)
   10648:	e0bf6817 	ldw	r2,-608(fp)
   1064c:	2088703a 	and	r4,r4,r2
   10650:	e17f6717 	ldw	r5,-612(fp)
   10654:	e0bf6817 	ldw	r2,-608(fp)
   10658:	288ab03a 	or	r5,r5,r2
   1065c:	e0bf6917 	ldw	r2,-604(fp)
   10660:	2884703a 	and	r2,r5,r2
   10664:	2084b03a 	or	r2,r4,r2
   10668:	1885883a 	add	r2,r3,r2
   1066c:	e0bfbd15 	stw	r2,-268(fp)
   10670:	e0ff6a17 	ldw	r3,-600(fp)
   10674:	e0bfbc17 	ldw	r2,-272(fp)
   10678:	1885883a 	add	r2,r3,r2
   1067c:	e0bf6a15 	stw	r2,-600(fp)
   10680:	e0ffbc17 	ldw	r3,-272(fp)
   10684:	e0bfbd17 	ldw	r2,-268(fp)
   10688:	1885883a 	add	r2,r3,r2
   1068c:	e0bf6615 	stw	r2,-616(fp)

    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));
   10690:	e0ff6a17 	ldw	r3,-600(fp)
   10694:	00800184 	movi	r2,6
   10698:	1886583a 	ror	r3,r3,r2
   1069c:	e13f6a17 	ldw	r4,-600(fp)
   106a0:	008002c4 	movi	r2,11
   106a4:	2084583a 	ror	r2,r4,r2
   106a8:	1886f03a 	xor	r3,r3,r2
   106ac:	e0bf6a17 	ldw	r2,-600(fp)
   106b0:	100411fa 	roli	r2,r2,7
   106b4:	1886f03a 	xor	r3,r3,r2
   106b8:	e0bf6d17 	ldw	r2,-588(fp)
   106bc:	1887883a 	add	r3,r3,r2
   106c0:	e13f6b17 	ldw	r4,-596(fp)
   106c4:	e0bf6c17 	ldw	r2,-592(fp)
   106c8:	2088f03a 	xor	r4,r4,r2
   106cc:	e0bf6a17 	ldw	r2,-600(fp)
   106d0:	2088703a 	and	r4,r4,r2
   106d4:	e0bf6c17 	ldw	r2,-592(fp)
   106d8:	2084f03a 	xor	r2,r4,r2
   106dc:	1887883a 	add	r3,r3,r2
   106e0:	e0bf9817 	ldw	r2,-416(fp)
   106e4:	100813fa 	roli	r4,r2,15
   106e8:	e0bf9817 	ldw	r2,-416(fp)
   106ec:	1004137a 	roli	r2,r2,13
   106f0:	2088f03a 	xor	r4,r4,r2
   106f4:	e0bf9817 	ldw	r2,-416(fp)
   106f8:	1004d2ba 	srli	r2,r2,10
   106fc:	2088f03a 	xor	r4,r4,r2
   10700:	e0bf8917 	ldw	r2,-476(fp)
   10704:	2089883a 	add	r4,r4,r2
   10708:	e17f7117 	ldw	r5,-572(fp)
   1070c:	008001c4 	movi	r2,7
   10710:	288a583a 	ror	r5,r5,r2
   10714:	e0bf7117 	ldw	r2,-572(fp)
   10718:	100413ba 	roli	r2,r2,14
   1071c:	288af03a 	xor	r5,r5,r2
   10720:	e0bf7117 	ldw	r2,-572(fp)
   10724:	1004d0fa 	srli	r2,r2,3
   10728:	2884f03a 	xor	r2,r5,r2
   1072c:	2085883a 	add	r2,r4,r2
   10730:	e13f6e17 	ldw	r4,-584(fp)
   10734:	2085883a 	add	r2,r4,r2
   10738:	e0bf6e15 	stw	r2,-584(fp)
   1073c:	e0bf6e17 	ldw	r2,-584(fp)
   10740:	1887883a 	add	r3,r3,r2
   10744:	0089edf4 	movhi	r2,10167
   10748:	1082a144 	addi	r2,r2,2693
   1074c:	1885883a 	add	r2,r3,r2
   10750:	e0bfbe15 	stw	r2,-264(fp)
   10754:	e0ff6617 	ldw	r3,-616(fp)
   10758:	00800084 	movi	r2,2
   1075c:	1886583a 	ror	r3,r3,r2
   10760:	e13f6617 	ldw	r4,-616(fp)
   10764:	00800344 	movi	r2,13
   10768:	2084583a 	ror	r2,r4,r2
   1076c:	1886f03a 	xor	r3,r3,r2
   10770:	e0bf6617 	ldw	r2,-616(fp)
   10774:	100412ba 	roli	r2,r2,10
   10778:	1886f03a 	xor	r3,r3,r2
   1077c:	e13f6617 	ldw	r4,-616(fp)
   10780:	e0bf6717 	ldw	r2,-612(fp)
   10784:	2088703a 	and	r4,r4,r2
   10788:	e17f6617 	ldw	r5,-616(fp)
   1078c:	e0bf6717 	ldw	r2,-612(fp)
   10790:	288ab03a 	or	r5,r5,r2
   10794:	e0bf6817 	ldw	r2,-608(fp)
   10798:	2884703a 	and	r2,r5,r2
   1079c:	2084b03a 	or	r2,r4,r2
   107a0:	1885883a 	add	r2,r3,r2
   107a4:	e0bfbf15 	stw	r2,-260(fp)
   107a8:	e0ff6917 	ldw	r3,-604(fp)
   107ac:	e0bfbe17 	ldw	r2,-264(fp)
   107b0:	1885883a 	add	r2,r3,r2
   107b4:	e0bf6915 	stw	r2,-604(fp)
   107b8:	e0ffbe17 	ldw	r3,-264(fp)
   107bc:	e0bfbf17 	ldw	r2,-260(fp)
   107c0:	1885883a 	add	r2,r3,r2
   107c4:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));
   107c8:	e0ff6917 	ldw	r3,-604(fp)
   107cc:	00800184 	movi	r2,6
   107d0:	1886583a 	ror	r3,r3,r2
   107d4:	e13f6917 	ldw	r4,-604(fp)
   107d8:	008002c4 	movi	r2,11
   107dc:	2084583a 	ror	r2,r4,r2
   107e0:	1886f03a 	xor	r3,r3,r2
   107e4:	e0bf6917 	ldw	r2,-604(fp)
   107e8:	100411fa 	roli	r2,r2,7
   107ec:	1886f03a 	xor	r3,r3,r2
   107f0:	e0bf6c17 	ldw	r2,-592(fp)
   107f4:	1887883a 	add	r3,r3,r2
   107f8:	e13f6a17 	ldw	r4,-600(fp)
   107fc:	e0bf6b17 	ldw	r2,-596(fp)
   10800:	2088f03a 	xor	r4,r4,r2
   10804:	e0bf6917 	ldw	r2,-604(fp)
   10808:	2088703a 	and	r4,r4,r2
   1080c:	e0bf6b17 	ldw	r2,-596(fp)
   10810:	2084f03a 	xor	r2,r4,r2
   10814:	1887883a 	add	r3,r3,r2
   10818:	e0bf9b17 	ldw	r2,-404(fp)
   1081c:	100813fa 	roli	r4,r2,15
   10820:	e0bf9b17 	ldw	r2,-404(fp)
   10824:	1004137a 	roli	r2,r2,13
   10828:	2088f03a 	xor	r4,r4,r2
   1082c:	e0bf9b17 	ldw	r2,-404(fp)
   10830:	1004d2ba 	srli	r2,r2,10
   10834:	2088f03a 	xor	r4,r4,r2
   10838:	e0bf8c17 	ldw	r2,-464(fp)
   1083c:	2089883a 	add	r4,r4,r2
   10840:	e17f7417 	ldw	r5,-560(fp)
   10844:	008001c4 	movi	r2,7
   10848:	288a583a 	ror	r5,r5,r2
   1084c:	e0bf7417 	ldw	r2,-560(fp)
   10850:	100413ba 	roli	r2,r2,14
   10854:	288af03a 	xor	r5,r5,r2
   10858:	e0bf7417 	ldw	r2,-560(fp)
   1085c:	1004d0fa 	srli	r2,r2,3
   10860:	2884f03a 	xor	r2,r5,r2
   10864:	2085883a 	add	r2,r4,r2
   10868:	e13f7117 	ldw	r4,-572(fp)
   1086c:	2085883a 	add	r2,r4,r2
   10870:	e0bf7115 	stw	r2,-572(fp)
   10874:	e0bf7117 	ldw	r2,-572(fp)
   10878:	1887883a 	add	r3,r3,r2
   1087c:	008b86f4 	movhi	r2,11803
   10880:	10884e04 	addi	r2,r2,8504
   10884:	1885883a 	add	r2,r3,r2
   10888:	e0bfc015 	stw	r2,-256(fp)
   1088c:	e0ff6d17 	ldw	r3,-588(fp)
   10890:	00800084 	movi	r2,2
   10894:	1886583a 	ror	r3,r3,r2
   10898:	e13f6d17 	ldw	r4,-588(fp)
   1089c:	00800344 	movi	r2,13
   108a0:	2084583a 	ror	r2,r4,r2
   108a4:	1886f03a 	xor	r3,r3,r2
   108a8:	e0bf6d17 	ldw	r2,-588(fp)
   108ac:	100412ba 	roli	r2,r2,10
   108b0:	1886f03a 	xor	r3,r3,r2
   108b4:	e13f6d17 	ldw	r4,-588(fp)
   108b8:	e0bf6617 	ldw	r2,-616(fp)
   108bc:	2088703a 	and	r4,r4,r2
   108c0:	e17f6d17 	ldw	r5,-588(fp)
   108c4:	e0bf6617 	ldw	r2,-616(fp)
   108c8:	288ab03a 	or	r5,r5,r2
   108cc:	e0bf6717 	ldw	r2,-612(fp)
   108d0:	2884703a 	and	r2,r5,r2
   108d4:	2084b03a 	or	r2,r4,r2
   108d8:	1885883a 	add	r2,r3,r2
   108dc:	e0bfc115 	stw	r2,-252(fp)
   108e0:	e0ff6817 	ldw	r3,-608(fp)
   108e4:	e0bfc017 	ldw	r2,-256(fp)
   108e8:	1885883a 	add	r2,r3,r2
   108ec:	e0bf6815 	stw	r2,-608(fp)
   108f0:	e0ffc017 	ldw	r3,-256(fp)
   108f4:	e0bfc117 	ldw	r2,-252(fp)
   108f8:	1885883a 	add	r2,r3,r2
   108fc:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));
   10900:	e0ff6817 	ldw	r3,-608(fp)
   10904:	00800184 	movi	r2,6
   10908:	1886583a 	ror	r3,r3,r2
   1090c:	e13f6817 	ldw	r4,-608(fp)
   10910:	008002c4 	movi	r2,11
   10914:	2084583a 	ror	r2,r4,r2
   10918:	1886f03a 	xor	r3,r3,r2
   1091c:	e0bf6817 	ldw	r2,-608(fp)
   10920:	100411fa 	roli	r2,r2,7
   10924:	1886f03a 	xor	r3,r3,r2
   10928:	e0bf6b17 	ldw	r2,-596(fp)
   1092c:	1887883a 	add	r3,r3,r2
   10930:	e13f6917 	ldw	r4,-604(fp)
   10934:	e0bf6a17 	ldw	r2,-600(fp)
   10938:	2088f03a 	xor	r4,r4,r2
   1093c:	e0bf6817 	ldw	r2,-608(fp)
   10940:	2088703a 	and	r4,r4,r2
   10944:	e0bf6a17 	ldw	r2,-600(fp)
   10948:	2084f03a 	xor	r2,r4,r2
   1094c:	1887883a 	add	r3,r3,r2
   10950:	e0bf6e17 	ldw	r2,-584(fp)
   10954:	100813fa 	roli	r4,r2,15
   10958:	e0bf6e17 	ldw	r2,-584(fp)
   1095c:	1004137a 	roli	r2,r2,13
   10960:	2088f03a 	xor	r4,r4,r2
   10964:	e0bf6e17 	ldw	r2,-584(fp)
   10968:	1004d2ba 	srli	r2,r2,10
   1096c:	2088f03a 	xor	r4,r4,r2
   10970:	e0bf8f17 	ldw	r2,-452(fp)
   10974:	2089883a 	add	r4,r4,r2
   10978:	e17f7717 	ldw	r5,-548(fp)
   1097c:	008001c4 	movi	r2,7
   10980:	288a583a 	ror	r5,r5,r2
   10984:	e0bf7717 	ldw	r2,-548(fp)
   10988:	100413ba 	roli	r2,r2,14
   1098c:	288af03a 	xor	r5,r5,r2
   10990:	e0bf7717 	ldw	r2,-548(fp)
   10994:	1004d0fa 	srli	r2,r2,3
   10998:	2884f03a 	xor	r2,r5,r2
   1099c:	2085883a 	add	r2,r4,r2
   109a0:	e13f7417 	ldw	r4,-560(fp)
   109a4:	2085883a 	add	r2,r4,r2
   109a8:	e0bf7415 	stw	r2,-560(fp)
   109ac:	e0bf7417 	ldw	r2,-560(fp)
   109b0:	1887883a 	add	r3,r3,r2
   109b4:	00934b34 	movhi	r2,19756
   109b8:	109b7f04 	addi	r2,r2,28156
   109bc:	1885883a 	add	r2,r3,r2
   109c0:	e0bfc215 	stw	r2,-248(fp)
   109c4:	e0ff6c17 	ldw	r3,-592(fp)
   109c8:	00800084 	movi	r2,2
   109cc:	1886583a 	ror	r3,r3,r2
   109d0:	e13f6c17 	ldw	r4,-592(fp)
   109d4:	00800344 	movi	r2,13
   109d8:	2084583a 	ror	r2,r4,r2
   109dc:	1886f03a 	xor	r3,r3,r2
   109e0:	e0bf6c17 	ldw	r2,-592(fp)
   109e4:	100412ba 	roli	r2,r2,10
   109e8:	1886f03a 	xor	r3,r3,r2
   109ec:	e13f6c17 	ldw	r4,-592(fp)
   109f0:	e0bf6d17 	ldw	r2,-588(fp)
   109f4:	2088703a 	and	r4,r4,r2
   109f8:	e17f6c17 	ldw	r5,-592(fp)
   109fc:	e0bf6d17 	ldw	r2,-588(fp)
   10a00:	288ab03a 	or	r5,r5,r2
   10a04:	e0bf6617 	ldw	r2,-616(fp)
   10a08:	2884703a 	and	r2,r5,r2
   10a0c:	2084b03a 	or	r2,r4,r2
   10a10:	1885883a 	add	r2,r3,r2
   10a14:	e0bfc315 	stw	r2,-244(fp)
   10a18:	e0ff6717 	ldw	r3,-612(fp)
   10a1c:	e0bfc217 	ldw	r2,-248(fp)
   10a20:	1885883a 	add	r2,r3,r2
   10a24:	e0bf6715 	stw	r2,-612(fp)
   10a28:	e0ffc217 	ldw	r3,-248(fp)
   10a2c:	e0bfc317 	ldw	r2,-244(fp)
   10a30:	1885883a 	add	r2,r3,r2
   10a34:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));
   10a38:	e0ff6717 	ldw	r3,-612(fp)
   10a3c:	00800184 	movi	r2,6
   10a40:	1886583a 	ror	r3,r3,r2
   10a44:	e13f6717 	ldw	r4,-612(fp)
   10a48:	008002c4 	movi	r2,11
   10a4c:	2084583a 	ror	r2,r4,r2
   10a50:	1886f03a 	xor	r3,r3,r2
   10a54:	e0bf6717 	ldw	r2,-612(fp)
   10a58:	100411fa 	roli	r2,r2,7
   10a5c:	1886f03a 	xor	r3,r3,r2
   10a60:	e0bf6a17 	ldw	r2,-600(fp)
   10a64:	1887883a 	add	r3,r3,r2
   10a68:	e13f6817 	ldw	r4,-608(fp)
   10a6c:	e0bf6917 	ldw	r2,-604(fp)
   10a70:	2088f03a 	xor	r4,r4,r2
   10a74:	e0bf6717 	ldw	r2,-612(fp)
   10a78:	2088703a 	and	r4,r4,r2
   10a7c:	e0bf6917 	ldw	r2,-604(fp)
   10a80:	2084f03a 	xor	r2,r4,r2
   10a84:	1887883a 	add	r3,r3,r2
   10a88:	e0bf7117 	ldw	r2,-572(fp)
   10a8c:	100813fa 	roli	r4,r2,15
   10a90:	e0bf7117 	ldw	r2,-572(fp)
   10a94:	1004137a 	roli	r2,r2,13
   10a98:	2088f03a 	xor	r4,r4,r2
   10a9c:	e0bf7117 	ldw	r2,-572(fp)
   10aa0:	1004d2ba 	srli	r2,r2,10
   10aa4:	2088f03a 	xor	r4,r4,r2
   10aa8:	e0bf9217 	ldw	r2,-440(fp)
   10aac:	2089883a 	add	r4,r4,r2
   10ab0:	e17f7a17 	ldw	r5,-536(fp)
   10ab4:	008001c4 	movi	r2,7
   10ab8:	288a583a 	ror	r5,r5,r2
   10abc:	e0bf7a17 	ldw	r2,-536(fp)
   10ac0:	100413ba 	roli	r2,r2,14
   10ac4:	288af03a 	xor	r5,r5,r2
   10ac8:	e0bf7a17 	ldw	r2,-536(fp)
   10acc:	1004d0fa 	srli	r2,r2,3
   10ad0:	2884f03a 	xor	r2,r5,r2
   10ad4:	2085883a 	add	r2,r4,r2
   10ad8:	e13f7717 	ldw	r4,-548(fp)
   10adc:	2085883a 	add	r2,r4,r2
   10ae0:	e0bf7715 	stw	r2,-548(fp)
   10ae4:	e0bf7717 	ldw	r2,-548(fp)
   10ae8:	1887883a 	add	r3,r3,r2
   10aec:	0094ce34 	movhi	r2,21304
   10af0:	108344c4 	addi	r2,r2,3347
   10af4:	1885883a 	add	r2,r3,r2
   10af8:	e0bfc415 	stw	r2,-240(fp)
   10afc:	e0ff6b17 	ldw	r3,-596(fp)
   10b00:	00800084 	movi	r2,2
   10b04:	1886583a 	ror	r3,r3,r2
   10b08:	e13f6b17 	ldw	r4,-596(fp)
   10b0c:	00800344 	movi	r2,13
   10b10:	2084583a 	ror	r2,r4,r2
   10b14:	1886f03a 	xor	r3,r3,r2
   10b18:	e0bf6b17 	ldw	r2,-596(fp)
   10b1c:	100412ba 	roli	r2,r2,10
   10b20:	1886f03a 	xor	r3,r3,r2
   10b24:	e13f6b17 	ldw	r4,-596(fp)
   10b28:	e0bf6c17 	ldw	r2,-592(fp)
   10b2c:	2088703a 	and	r4,r4,r2
   10b30:	e17f6b17 	ldw	r5,-596(fp)
   10b34:	e0bf6c17 	ldw	r2,-592(fp)
   10b38:	288ab03a 	or	r5,r5,r2
   10b3c:	e0bf6d17 	ldw	r2,-588(fp)
   10b40:	2884703a 	and	r2,r5,r2
   10b44:	2084b03a 	or	r2,r4,r2
   10b48:	1885883a 	add	r2,r3,r2
   10b4c:	e0bfc515 	stw	r2,-236(fp)
   10b50:	e0ff6617 	ldw	r3,-616(fp)
   10b54:	e0bfc417 	ldw	r2,-240(fp)
   10b58:	1885883a 	add	r2,r3,r2
   10b5c:	e0bf6615 	stw	r2,-616(fp)
   10b60:	e0ffc417 	ldw	r3,-240(fp)
   10b64:	e0bfc517 	ldw	r2,-236(fp)
   10b68:	1885883a 	add	r2,r3,r2
   10b6c:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));
   10b70:	e0ff6617 	ldw	r3,-616(fp)
   10b74:	00800184 	movi	r2,6
   10b78:	1886583a 	ror	r3,r3,r2
   10b7c:	e13f6617 	ldw	r4,-616(fp)
   10b80:	008002c4 	movi	r2,11
   10b84:	2084583a 	ror	r2,r4,r2
   10b88:	1886f03a 	xor	r3,r3,r2
   10b8c:	e0bf6617 	ldw	r2,-616(fp)
   10b90:	100411fa 	roli	r2,r2,7
   10b94:	1886f03a 	xor	r3,r3,r2
   10b98:	e0bf6917 	ldw	r2,-604(fp)
   10b9c:	1887883a 	add	r3,r3,r2
   10ba0:	e13f6717 	ldw	r4,-612(fp)
   10ba4:	e0bf6817 	ldw	r2,-608(fp)
   10ba8:	2088f03a 	xor	r4,r4,r2
   10bac:	e0bf6617 	ldw	r2,-616(fp)
   10bb0:	2088703a 	and	r4,r4,r2
   10bb4:	e0bf6817 	ldw	r2,-608(fp)
   10bb8:	2084f03a 	xor	r2,r4,r2
   10bbc:	1887883a 	add	r3,r3,r2
   10bc0:	e0bf7417 	ldw	r2,-560(fp)
   10bc4:	100813fa 	roli	r4,r2,15
   10bc8:	e0bf7417 	ldw	r2,-560(fp)
   10bcc:	1004137a 	roli	r2,r2,13
   10bd0:	2088f03a 	xor	r4,r4,r2
   10bd4:	e0bf7417 	ldw	r2,-560(fp)
   10bd8:	1004d2ba 	srli	r2,r2,10
   10bdc:	2088f03a 	xor	r4,r4,r2
   10be0:	e0bf9517 	ldw	r2,-428(fp)
   10be4:	2089883a 	add	r4,r4,r2
   10be8:	e17f7d17 	ldw	r5,-524(fp)
   10bec:	008001c4 	movi	r2,7
   10bf0:	288a583a 	ror	r5,r5,r2
   10bf4:	e0bf7d17 	ldw	r2,-524(fp)
   10bf8:	100413ba 	roli	r2,r2,14
   10bfc:	288af03a 	xor	r5,r5,r2
   10c00:	e0bf7d17 	ldw	r2,-524(fp)
   10c04:	1004d0fa 	srli	r2,r2,3
   10c08:	2884f03a 	xor	r2,r5,r2
   10c0c:	2085883a 	add	r2,r4,r2
   10c10:	e13f7a17 	ldw	r4,-536(fp)
   10c14:	2085883a 	add	r2,r4,r2
   10c18:	e0bf7a15 	stw	r2,-536(fp)
   10c1c:	e0bf7a17 	ldw	r2,-536(fp)
   10c20:	1887883a 	add	r3,r3,r2
   10c24:	009942b4 	movhi	r2,25866
   10c28:	109cd504 	addi	r2,r2,29524
   10c2c:	1885883a 	add	r2,r3,r2
   10c30:	e0bfc615 	stw	r2,-232(fp)
   10c34:	e0ff6a17 	ldw	r3,-600(fp)
   10c38:	00800084 	movi	r2,2
   10c3c:	1886583a 	ror	r3,r3,r2
   10c40:	e13f6a17 	ldw	r4,-600(fp)
   10c44:	00800344 	movi	r2,13
   10c48:	2084583a 	ror	r2,r4,r2
   10c4c:	1886f03a 	xor	r3,r3,r2
   10c50:	e0bf6a17 	ldw	r2,-600(fp)
   10c54:	100412ba 	roli	r2,r2,10
   10c58:	1886f03a 	xor	r3,r3,r2
   10c5c:	e13f6a17 	ldw	r4,-600(fp)
   10c60:	e0bf6b17 	ldw	r2,-596(fp)
   10c64:	2088703a 	and	r4,r4,r2
   10c68:	e17f6a17 	ldw	r5,-600(fp)
   10c6c:	e0bf6b17 	ldw	r2,-596(fp)
   10c70:	288ab03a 	or	r5,r5,r2
   10c74:	e0bf6c17 	ldw	r2,-592(fp)
   10c78:	2884703a 	and	r2,r5,r2
   10c7c:	2084b03a 	or	r2,r4,r2
   10c80:	1885883a 	add	r2,r3,r2
   10c84:	e0bfc715 	stw	r2,-228(fp)
   10c88:	e0ff6d17 	ldw	r3,-588(fp)
   10c8c:	e0bfc617 	ldw	r2,-232(fp)
   10c90:	1885883a 	add	r2,r3,r2
   10c94:	e0bf6d15 	stw	r2,-588(fp)
   10c98:	e0ffc617 	ldw	r3,-232(fp)
   10c9c:	e0bfc717 	ldw	r2,-228(fp)
   10ca0:	1885883a 	add	r2,r3,r2
   10ca4:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));
   10ca8:	e0ff6d17 	ldw	r3,-588(fp)
   10cac:	00800184 	movi	r2,6
   10cb0:	1886583a 	ror	r3,r3,r2
   10cb4:	e13f6d17 	ldw	r4,-588(fp)
   10cb8:	008002c4 	movi	r2,11
   10cbc:	2084583a 	ror	r2,r4,r2
   10cc0:	1886f03a 	xor	r3,r3,r2
   10cc4:	e0bf6d17 	ldw	r2,-588(fp)
   10cc8:	100411fa 	roli	r2,r2,7
   10ccc:	1886f03a 	xor	r3,r3,r2
   10cd0:	e0bf6817 	ldw	r2,-608(fp)
   10cd4:	1887883a 	add	r3,r3,r2
   10cd8:	e13f6617 	ldw	r4,-616(fp)
   10cdc:	e0bf6717 	ldw	r2,-612(fp)
   10ce0:	2088f03a 	xor	r4,r4,r2
   10ce4:	e0bf6d17 	ldw	r2,-588(fp)
   10ce8:	2088703a 	and	r4,r4,r2
   10cec:	e0bf6717 	ldw	r2,-612(fp)
   10cf0:	2084f03a 	xor	r2,r4,r2
   10cf4:	1887883a 	add	r3,r3,r2
   10cf8:	e0bf7717 	ldw	r2,-548(fp)
   10cfc:	100813fa 	roli	r4,r2,15
   10d00:	e0bf7717 	ldw	r2,-548(fp)
   10d04:	1004137a 	roli	r2,r2,13
   10d08:	2088f03a 	xor	r4,r4,r2
   10d0c:	e0bf7717 	ldw	r2,-548(fp)
   10d10:	1004d2ba 	srli	r2,r2,10
   10d14:	2088f03a 	xor	r4,r4,r2
   10d18:	e0bf9817 	ldw	r2,-416(fp)
   10d1c:	2089883a 	add	r4,r4,r2
   10d20:	e17f8017 	ldw	r5,-512(fp)
   10d24:	008001c4 	movi	r2,7
   10d28:	288a583a 	ror	r5,r5,r2
   10d2c:	e0bf8017 	ldw	r2,-512(fp)
   10d30:	100413ba 	roli	r2,r2,14
   10d34:	288af03a 	xor	r5,r5,r2
   10d38:	e0bf8017 	ldw	r2,-512(fp)
   10d3c:	1004d0fa 	srli	r2,r2,3
   10d40:	2884f03a 	xor	r2,r5,r2
   10d44:	2085883a 	add	r2,r4,r2
   10d48:	e13f7d17 	ldw	r4,-524(fp)
   10d4c:	2085883a 	add	r2,r4,r2
   10d50:	e0bf7d15 	stw	r2,-524(fp)
   10d54:	e0bf7d17 	ldw	r2,-524(fp)
   10d58:	1887883a 	add	r3,r3,r2
   10d5c:	009d9ab4 	movhi	r2,30314
   10d60:	1082aec4 	addi	r2,r2,2747
   10d64:	1885883a 	add	r2,r3,r2
   10d68:	e0bfc815 	stw	r2,-224(fp)
   10d6c:	e0ff6917 	ldw	r3,-604(fp)
   10d70:	00800084 	movi	r2,2
   10d74:	1886583a 	ror	r3,r3,r2
   10d78:	e13f6917 	ldw	r4,-604(fp)
   10d7c:	00800344 	movi	r2,13
   10d80:	2084583a 	ror	r2,r4,r2
   10d84:	1886f03a 	xor	r3,r3,r2
   10d88:	e0bf6917 	ldw	r2,-604(fp)
   10d8c:	100412ba 	roli	r2,r2,10
   10d90:	1886f03a 	xor	r3,r3,r2
   10d94:	e13f6917 	ldw	r4,-604(fp)
   10d98:	e0bf6a17 	ldw	r2,-600(fp)
   10d9c:	2088703a 	and	r4,r4,r2
   10da0:	e17f6917 	ldw	r5,-604(fp)
   10da4:	e0bf6a17 	ldw	r2,-600(fp)
   10da8:	288ab03a 	or	r5,r5,r2
   10dac:	e0bf6b17 	ldw	r2,-596(fp)
   10db0:	2884703a 	and	r2,r5,r2
   10db4:	2084b03a 	or	r2,r4,r2
   10db8:	1885883a 	add	r2,r3,r2
   10dbc:	e0bfc915 	stw	r2,-220(fp)
   10dc0:	e0ff6c17 	ldw	r3,-592(fp)
   10dc4:	e0bfc817 	ldw	r2,-224(fp)
   10dc8:	1885883a 	add	r2,r3,r2
   10dcc:	e0bf6c15 	stw	r2,-592(fp)
   10dd0:	e0ffc817 	ldw	r3,-224(fp)
   10dd4:	e0bfc917 	ldw	r2,-220(fp)
   10dd8:	1885883a 	add	r2,r3,r2
   10ddc:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));
   10de0:	e0ff6c17 	ldw	r3,-592(fp)
   10de4:	00800184 	movi	r2,6
   10de8:	1886583a 	ror	r3,r3,r2
   10dec:	e13f6c17 	ldw	r4,-592(fp)
   10df0:	008002c4 	movi	r2,11
   10df4:	2084583a 	ror	r2,r4,r2
   10df8:	1886f03a 	xor	r3,r3,r2
   10dfc:	e0bf6c17 	ldw	r2,-592(fp)
   10e00:	100411fa 	roli	r2,r2,7
   10e04:	1886f03a 	xor	r3,r3,r2
   10e08:	e0bf6717 	ldw	r2,-612(fp)
   10e0c:	1887883a 	add	r3,r3,r2
   10e10:	e13f6d17 	ldw	r4,-588(fp)
   10e14:	e0bf6617 	ldw	r2,-616(fp)
   10e18:	2088f03a 	xor	r4,r4,r2
   10e1c:	e0bf6c17 	ldw	r2,-592(fp)
   10e20:	2088703a 	and	r4,r4,r2
   10e24:	e0bf6617 	ldw	r2,-616(fp)
   10e28:	2084f03a 	xor	r2,r4,r2
   10e2c:	1887883a 	add	r3,r3,r2
   10e30:	e0bf7a17 	ldw	r2,-536(fp)
   10e34:	100813fa 	roli	r4,r2,15
   10e38:	e0bf7a17 	ldw	r2,-536(fp)
   10e3c:	1004137a 	roli	r2,r2,13
   10e40:	2088f03a 	xor	r4,r4,r2
   10e44:	e0bf7a17 	ldw	r2,-536(fp)
   10e48:	1004d2ba 	srli	r2,r2,10
   10e4c:	2088f03a 	xor	r4,r4,r2
   10e50:	e0bf9b17 	ldw	r2,-404(fp)
   10e54:	2089883a 	add	r4,r4,r2
   10e58:	e17f8317 	ldw	r5,-500(fp)
   10e5c:	008001c4 	movi	r2,7
   10e60:	288a583a 	ror	r5,r5,r2
   10e64:	e0bf8317 	ldw	r2,-500(fp)
   10e68:	100413ba 	roli	r2,r2,14
   10e6c:	288af03a 	xor	r5,r5,r2
   10e70:	e0bf8317 	ldw	r2,-500(fp)
   10e74:	1004d0fa 	srli	r2,r2,3
   10e78:	2884f03a 	xor	r2,r5,r2
   10e7c:	2085883a 	add	r2,r4,r2
   10e80:	e13f8017 	ldw	r4,-512(fp)
   10e84:	2085883a 	add	r2,r4,r2
   10e88:	e0bf8015 	stw	r2,-512(fp)
   10e8c:	e0bf8017 	ldw	r2,-512(fp)
   10e90:	1887883a 	add	r3,r3,r2
   10e94:	00a070f4 	movhi	r2,33219
   10e98:	10b24b84 	addi	r2,r2,-14034
   10e9c:	1885883a 	add	r2,r3,r2
   10ea0:	e0bfca15 	stw	r2,-216(fp)
   10ea4:	e0ff6817 	ldw	r3,-608(fp)
   10ea8:	00800084 	movi	r2,2
   10eac:	1886583a 	ror	r3,r3,r2
   10eb0:	e13f6817 	ldw	r4,-608(fp)
   10eb4:	00800344 	movi	r2,13
   10eb8:	2084583a 	ror	r2,r4,r2
   10ebc:	1886f03a 	xor	r3,r3,r2
   10ec0:	e0bf6817 	ldw	r2,-608(fp)
   10ec4:	100412ba 	roli	r2,r2,10
   10ec8:	1886f03a 	xor	r3,r3,r2
   10ecc:	e13f6817 	ldw	r4,-608(fp)
   10ed0:	e0bf6917 	ldw	r2,-604(fp)
   10ed4:	2088703a 	and	r4,r4,r2
   10ed8:	e17f6817 	ldw	r5,-608(fp)
   10edc:	e0bf6917 	ldw	r2,-604(fp)
   10ee0:	288ab03a 	or	r5,r5,r2
   10ee4:	e0bf6a17 	ldw	r2,-600(fp)
   10ee8:	2884703a 	and	r2,r5,r2
   10eec:	2084b03a 	or	r2,r4,r2
   10ef0:	1885883a 	add	r2,r3,r2
   10ef4:	e0bfcb15 	stw	r2,-212(fp)
   10ef8:	e0ff6b17 	ldw	r3,-596(fp)
   10efc:	e0bfca17 	ldw	r2,-216(fp)
   10f00:	1885883a 	add	r2,r3,r2
   10f04:	e0bf6b15 	stw	r2,-596(fp)
   10f08:	e0ffca17 	ldw	r3,-216(fp)
   10f0c:	e0bfcb17 	ldw	r2,-212(fp)
   10f10:	1885883a 	add	r2,r3,r2
   10f14:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));
   10f18:	e0ff6b17 	ldw	r3,-596(fp)
   10f1c:	00800184 	movi	r2,6
   10f20:	1886583a 	ror	r3,r3,r2
   10f24:	e13f6b17 	ldw	r4,-596(fp)
   10f28:	008002c4 	movi	r2,11
   10f2c:	2084583a 	ror	r2,r4,r2
   10f30:	1886f03a 	xor	r3,r3,r2
   10f34:	e0bf6b17 	ldw	r2,-596(fp)
   10f38:	100411fa 	roli	r2,r2,7
   10f3c:	1886f03a 	xor	r3,r3,r2
   10f40:	e0bf6617 	ldw	r2,-616(fp)
   10f44:	1887883a 	add	r3,r3,r2
   10f48:	e13f6c17 	ldw	r4,-592(fp)
   10f4c:	e0bf6d17 	ldw	r2,-588(fp)
   10f50:	2088f03a 	xor	r4,r4,r2
   10f54:	e0bf6b17 	ldw	r2,-596(fp)
   10f58:	2088703a 	and	r4,r4,r2
   10f5c:	e0bf6d17 	ldw	r2,-588(fp)
   10f60:	2084f03a 	xor	r2,r4,r2
   10f64:	1887883a 	add	r3,r3,r2
   10f68:	e0bf7d17 	ldw	r2,-524(fp)
   10f6c:	100813fa 	roli	r4,r2,15
   10f70:	e0bf7d17 	ldw	r2,-524(fp)
   10f74:	1004137a 	roli	r2,r2,13
   10f78:	2088f03a 	xor	r4,r4,r2
   10f7c:	e0bf7d17 	ldw	r2,-524(fp)
   10f80:	1004d2ba 	srli	r2,r2,10
   10f84:	2088f03a 	xor	r4,r4,r2
   10f88:	e0bf6e17 	ldw	r2,-584(fp)
   10f8c:	2089883a 	add	r4,r4,r2
   10f90:	e17f8617 	ldw	r5,-488(fp)
   10f94:	008001c4 	movi	r2,7
   10f98:	288a583a 	ror	r5,r5,r2
   10f9c:	e0bf8617 	ldw	r2,-488(fp)
   10fa0:	100413ba 	roli	r2,r2,14
   10fa4:	288af03a 	xor	r5,r5,r2
   10fa8:	e0bf8617 	ldw	r2,-488(fp)
   10fac:	1004d0fa 	srli	r2,r2,3
   10fb0:	2884f03a 	xor	r2,r5,r2
   10fb4:	2085883a 	add	r2,r4,r2
   10fb8:	e13f8317 	ldw	r4,-500(fp)
   10fbc:	2085883a 	add	r2,r4,r2
   10fc0:	e0bf8315 	stw	r2,-500(fp)
   10fc4:	e0bf8317 	ldw	r2,-500(fp)
   10fc8:	1887883a 	add	r3,r3,r2
   10fcc:	00a49cb4 	movhi	r2,37490
   10fd0:	108b2144 	addi	r2,r2,11397
   10fd4:	1885883a 	add	r2,r3,r2
   10fd8:	e0bfcc15 	stw	r2,-208(fp)
   10fdc:	e0ff6717 	ldw	r3,-612(fp)
   10fe0:	00800084 	movi	r2,2
   10fe4:	1886583a 	ror	r3,r3,r2
   10fe8:	e13f6717 	ldw	r4,-612(fp)
   10fec:	00800344 	movi	r2,13
   10ff0:	2084583a 	ror	r2,r4,r2
   10ff4:	1886f03a 	xor	r3,r3,r2
   10ff8:	e0bf6717 	ldw	r2,-612(fp)
   10ffc:	100412ba 	roli	r2,r2,10
   11000:	1886f03a 	xor	r3,r3,r2
   11004:	e13f6717 	ldw	r4,-612(fp)
   11008:	e0bf6817 	ldw	r2,-608(fp)
   1100c:	2088703a 	and	r4,r4,r2
   11010:	e17f6717 	ldw	r5,-612(fp)
   11014:	e0bf6817 	ldw	r2,-608(fp)
   11018:	288ab03a 	or	r5,r5,r2
   1101c:	e0bf6917 	ldw	r2,-604(fp)
   11020:	2884703a 	and	r2,r5,r2
   11024:	2084b03a 	or	r2,r4,r2
   11028:	1885883a 	add	r2,r3,r2
   1102c:	e0bfcd15 	stw	r2,-204(fp)
   11030:	e0ff6a17 	ldw	r3,-600(fp)
   11034:	e0bfcc17 	ldw	r2,-208(fp)
   11038:	1885883a 	add	r2,r3,r2
   1103c:	e0bf6a15 	stw	r2,-600(fp)
   11040:	e0ffcc17 	ldw	r3,-208(fp)
   11044:	e0bfcd17 	ldw	r2,-204(fp)
   11048:	1885883a 	add	r2,r3,r2
   1104c:	e0bf6615 	stw	r2,-616(fp)
    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));
   11050:	e0ff6a17 	ldw	r3,-600(fp)
   11054:	00800184 	movi	r2,6
   11058:	1886583a 	ror	r3,r3,r2
   1105c:	e13f6a17 	ldw	r4,-600(fp)
   11060:	008002c4 	movi	r2,11
   11064:	2084583a 	ror	r2,r4,r2
   11068:	1886f03a 	xor	r3,r3,r2
   1106c:	e0bf6a17 	ldw	r2,-600(fp)
   11070:	100411fa 	roli	r2,r2,7
   11074:	1886f03a 	xor	r3,r3,r2
   11078:	e0bf6d17 	ldw	r2,-588(fp)
   1107c:	1887883a 	add	r3,r3,r2
   11080:	e13f6b17 	ldw	r4,-596(fp)
   11084:	e0bf6c17 	ldw	r2,-592(fp)
   11088:	2088f03a 	xor	r4,r4,r2
   1108c:	e0bf6a17 	ldw	r2,-600(fp)
   11090:	2088703a 	and	r4,r4,r2
   11094:	e0bf6c17 	ldw	r2,-592(fp)
   11098:	2084f03a 	xor	r2,r4,r2
   1109c:	1887883a 	add	r3,r3,r2
   110a0:	e0bf8017 	ldw	r2,-512(fp)
   110a4:	100813fa 	roli	r4,r2,15
   110a8:	e0bf8017 	ldw	r2,-512(fp)
   110ac:	1004137a 	roli	r2,r2,13
   110b0:	2088f03a 	xor	r4,r4,r2
   110b4:	e0bf8017 	ldw	r2,-512(fp)
   110b8:	1004d2ba 	srli	r2,r2,10
   110bc:	2088f03a 	xor	r4,r4,r2
   110c0:	e0bf7117 	ldw	r2,-572(fp)
   110c4:	2089883a 	add	r4,r4,r2
   110c8:	e17f8917 	ldw	r5,-476(fp)
   110cc:	008001c4 	movi	r2,7
   110d0:	288a583a 	ror	r5,r5,r2
   110d4:	e0bf8917 	ldw	r2,-476(fp)
   110d8:	100413ba 	roli	r2,r2,14
   110dc:	288af03a 	xor	r5,r5,r2
   110e0:	e0bf8917 	ldw	r2,-476(fp)
   110e4:	1004d0fa 	srli	r2,r2,3
   110e8:	2884f03a 	xor	r2,r5,r2
   110ec:	2085883a 	add	r2,r4,r2
   110f0:	e13f8617 	ldw	r4,-488(fp)
   110f4:	2085883a 	add	r2,r4,r2
   110f8:	e0bf8615 	stw	r2,-488(fp)
   110fc:	e0bf8617 	ldw	r2,-488(fp)
   11100:	1887883a 	add	r3,r3,r2
   11104:	00a8b034 	movhi	r2,41664
   11108:	10ba2844 	addi	r2,r2,-5983
   1110c:	1885883a 	add	r2,r3,r2
   11110:	e0bfce15 	stw	r2,-200(fp)
   11114:	e0ff6617 	ldw	r3,-616(fp)
   11118:	00800084 	movi	r2,2
   1111c:	1886583a 	ror	r3,r3,r2
   11120:	e13f6617 	ldw	r4,-616(fp)
   11124:	00800344 	movi	r2,13
   11128:	2084583a 	ror	r2,r4,r2
   1112c:	1886f03a 	xor	r3,r3,r2
   11130:	e0bf6617 	ldw	r2,-616(fp)
   11134:	100412ba 	roli	r2,r2,10
   11138:	1886f03a 	xor	r3,r3,r2
   1113c:	e13f6617 	ldw	r4,-616(fp)
   11140:	e0bf6717 	ldw	r2,-612(fp)
   11144:	2088703a 	and	r4,r4,r2
   11148:	e17f6617 	ldw	r5,-616(fp)
   1114c:	e0bf6717 	ldw	r2,-612(fp)
   11150:	288ab03a 	or	r5,r5,r2
   11154:	e0bf6817 	ldw	r2,-608(fp)
   11158:	2884703a 	and	r2,r5,r2
   1115c:	2084b03a 	or	r2,r4,r2
   11160:	1885883a 	add	r2,r3,r2
   11164:	e0bfcf15 	stw	r2,-196(fp)
   11168:	e0ff6917 	ldw	r3,-604(fp)
   1116c:	e0bfce17 	ldw	r2,-200(fp)
   11170:	1885883a 	add	r2,r3,r2
   11174:	e0bf6915 	stw	r2,-604(fp)
   11178:	e0ffce17 	ldw	r3,-200(fp)
   1117c:	e0bfcf17 	ldw	r2,-196(fp)
   11180:	1885883a 	add	r2,r3,r2
   11184:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));
   11188:	e0ff6917 	ldw	r3,-604(fp)
   1118c:	00800184 	movi	r2,6
   11190:	1886583a 	ror	r3,r3,r2
   11194:	e13f6917 	ldw	r4,-604(fp)
   11198:	008002c4 	movi	r2,11
   1119c:	2084583a 	ror	r2,r4,r2
   111a0:	1886f03a 	xor	r3,r3,r2
   111a4:	e0bf6917 	ldw	r2,-604(fp)
   111a8:	100411fa 	roli	r2,r2,7
   111ac:	1886f03a 	xor	r3,r3,r2
   111b0:	e0bf6c17 	ldw	r2,-592(fp)
   111b4:	1887883a 	add	r3,r3,r2
   111b8:	e13f6a17 	ldw	r4,-600(fp)
   111bc:	e0bf6b17 	ldw	r2,-596(fp)
   111c0:	2088f03a 	xor	r4,r4,r2
   111c4:	e0bf6917 	ldw	r2,-604(fp)
   111c8:	2088703a 	and	r4,r4,r2
   111cc:	e0bf6b17 	ldw	r2,-596(fp)
   111d0:	2084f03a 	xor	r2,r4,r2
   111d4:	1887883a 	add	r3,r3,r2
   111d8:	e0bf8317 	ldw	r2,-500(fp)
   111dc:	100813fa 	roli	r4,r2,15
   111e0:	e0bf8317 	ldw	r2,-500(fp)
   111e4:	1004137a 	roli	r2,r2,13
   111e8:	2088f03a 	xor	r4,r4,r2
   111ec:	e0bf8317 	ldw	r2,-500(fp)
   111f0:	1004d2ba 	srli	r2,r2,10
   111f4:	2088f03a 	xor	r4,r4,r2
   111f8:	e0bf7417 	ldw	r2,-560(fp)
   111fc:	2089883a 	add	r4,r4,r2
   11200:	e17f8c17 	ldw	r5,-464(fp)
   11204:	008001c4 	movi	r2,7
   11208:	288a583a 	ror	r5,r5,r2
   1120c:	e0bf8c17 	ldw	r2,-464(fp)
   11210:	100413ba 	roli	r2,r2,14
   11214:	288af03a 	xor	r5,r5,r2
   11218:	e0bf8c17 	ldw	r2,-464(fp)
   1121c:	1004d0fa 	srli	r2,r2,3
   11220:	2884f03a 	xor	r2,r5,r2
   11224:	2085883a 	add	r2,r4,r2
   11228:	e13f8917 	ldw	r4,-476(fp)
   1122c:	2085883a 	add	r2,r4,r2
   11230:	e0bf8915 	stw	r2,-476(fp)
   11234:	e0bf8917 	ldw	r2,-476(fp)
   11238:	1887883a 	add	r3,r3,r2
   1123c:	00aa06b4 	movhi	r2,43034
   11240:	109992c4 	addi	r2,r2,26187
   11244:	1885883a 	add	r2,r3,r2
   11248:	e0bfd015 	stw	r2,-192(fp)
   1124c:	e0ff6d17 	ldw	r3,-588(fp)
   11250:	00800084 	movi	r2,2
   11254:	1886583a 	ror	r3,r3,r2
   11258:	e13f6d17 	ldw	r4,-588(fp)
   1125c:	00800344 	movi	r2,13
   11260:	2084583a 	ror	r2,r4,r2
   11264:	1886f03a 	xor	r3,r3,r2
   11268:	e0bf6d17 	ldw	r2,-588(fp)
   1126c:	100412ba 	roli	r2,r2,10
   11270:	1886f03a 	xor	r3,r3,r2
   11274:	e13f6d17 	ldw	r4,-588(fp)
   11278:	e0bf6617 	ldw	r2,-616(fp)
   1127c:	2088703a 	and	r4,r4,r2
   11280:	e17f6d17 	ldw	r5,-588(fp)
   11284:	e0bf6617 	ldw	r2,-616(fp)
   11288:	288ab03a 	or	r5,r5,r2
   1128c:	e0bf6717 	ldw	r2,-612(fp)
   11290:	2884703a 	and	r2,r5,r2
   11294:	2084b03a 	or	r2,r4,r2
   11298:	1885883a 	add	r2,r3,r2
   1129c:	e0bfd115 	stw	r2,-188(fp)
   112a0:	e0ff6817 	ldw	r3,-608(fp)
   112a4:	e0bfd017 	ldw	r2,-192(fp)
   112a8:	1885883a 	add	r2,r3,r2
   112ac:	e0bf6815 	stw	r2,-608(fp)
   112b0:	e0ffd017 	ldw	r3,-192(fp)
   112b4:	e0bfd117 	ldw	r2,-188(fp)
   112b8:	1885883a 	add	r2,r3,r2
   112bc:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));
   112c0:	e0ff6817 	ldw	r3,-608(fp)
   112c4:	00800184 	movi	r2,6
   112c8:	1886583a 	ror	r3,r3,r2
   112cc:	e13f6817 	ldw	r4,-608(fp)
   112d0:	008002c4 	movi	r2,11
   112d4:	2084583a 	ror	r2,r4,r2
   112d8:	1886f03a 	xor	r3,r3,r2
   112dc:	e0bf6817 	ldw	r2,-608(fp)
   112e0:	100411fa 	roli	r2,r2,7
   112e4:	1886f03a 	xor	r3,r3,r2
   112e8:	e0bf6b17 	ldw	r2,-596(fp)
   112ec:	1887883a 	add	r3,r3,r2
   112f0:	e13f6917 	ldw	r4,-604(fp)
   112f4:	e0bf6a17 	ldw	r2,-600(fp)
   112f8:	2088f03a 	xor	r4,r4,r2
   112fc:	e0bf6817 	ldw	r2,-608(fp)
   11300:	2088703a 	and	r4,r4,r2
   11304:	e0bf6a17 	ldw	r2,-600(fp)
   11308:	2084f03a 	xor	r2,r4,r2
   1130c:	1887883a 	add	r3,r3,r2
   11310:	e0bf8617 	ldw	r2,-488(fp)
   11314:	100813fa 	roli	r4,r2,15
   11318:	e0bf8617 	ldw	r2,-488(fp)
   1131c:	1004137a 	roli	r2,r2,13
   11320:	2088f03a 	xor	r4,r4,r2
   11324:	e0bf8617 	ldw	r2,-488(fp)
   11328:	1004d2ba 	srli	r2,r2,10
   1132c:	2088f03a 	xor	r4,r4,r2
   11330:	e0bf7717 	ldw	r2,-548(fp)
   11334:	2089883a 	add	r4,r4,r2
   11338:	e17f8f17 	ldw	r5,-452(fp)
   1133c:	008001c4 	movi	r2,7
   11340:	288a583a 	ror	r5,r5,r2
   11344:	e0bf8f17 	ldw	r2,-452(fp)
   11348:	100413ba 	roli	r2,r2,14
   1134c:	288af03a 	xor	r5,r5,r2
   11350:	e0bf8f17 	ldw	r2,-452(fp)
   11354:	1004d0fa 	srli	r2,r2,3
   11358:	2884f03a 	xor	r2,r5,r2
   1135c:	2085883a 	add	r2,r4,r2
   11360:	e13f8c17 	ldw	r4,-464(fp)
   11364:	2085883a 	add	r2,r4,r2
   11368:	e0bf8c15 	stw	r2,-464(fp)
   1136c:	e0bf8c17 	ldw	r2,-464(fp)
   11370:	1887883a 	add	r3,r3,r2
   11374:	00b09334 	movhi	r2,49740
   11378:	10a2dc04 	addi	r2,r2,-29840
   1137c:	1885883a 	add	r2,r3,r2
   11380:	e0bfd215 	stw	r2,-184(fp)
   11384:	e0ff6c17 	ldw	r3,-592(fp)
   11388:	00800084 	movi	r2,2
   1138c:	1886583a 	ror	r3,r3,r2
   11390:	e13f6c17 	ldw	r4,-592(fp)
   11394:	00800344 	movi	r2,13
   11398:	2084583a 	ror	r2,r4,r2
   1139c:	1886f03a 	xor	r3,r3,r2
   113a0:	e0bf6c17 	ldw	r2,-592(fp)
   113a4:	100412ba 	roli	r2,r2,10
   113a8:	1886f03a 	xor	r3,r3,r2
   113ac:	e13f6c17 	ldw	r4,-592(fp)
   113b0:	e0bf6d17 	ldw	r2,-588(fp)
   113b4:	2088703a 	and	r4,r4,r2
   113b8:	e17f6c17 	ldw	r5,-592(fp)
   113bc:	e0bf6d17 	ldw	r2,-588(fp)
   113c0:	288ab03a 	or	r5,r5,r2
   113c4:	e0bf6617 	ldw	r2,-616(fp)
   113c8:	2884703a 	and	r2,r5,r2
   113cc:	2084b03a 	or	r2,r4,r2
   113d0:	1885883a 	add	r2,r3,r2
   113d4:	e0bfd315 	stw	r2,-180(fp)
   113d8:	e0ff6717 	ldw	r3,-612(fp)
   113dc:	e0bfd217 	ldw	r2,-184(fp)
   113e0:	1885883a 	add	r2,r3,r2
   113e4:	e0bf6715 	stw	r2,-612(fp)
   113e8:	e0ffd217 	ldw	r3,-184(fp)
   113ec:	e0bfd317 	ldw	r2,-180(fp)
   113f0:	1885883a 	add	r2,r3,r2
   113f4:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));
   113f8:	e0ff6717 	ldw	r3,-612(fp)
   113fc:	00800184 	movi	r2,6
   11400:	1886583a 	ror	r3,r3,r2
   11404:	e13f6717 	ldw	r4,-612(fp)
   11408:	008002c4 	movi	r2,11
   1140c:	2084583a 	ror	r2,r4,r2
   11410:	1886f03a 	xor	r3,r3,r2
   11414:	e0bf6717 	ldw	r2,-612(fp)
   11418:	100411fa 	roli	r2,r2,7
   1141c:	1886f03a 	xor	r3,r3,r2
   11420:	e0bf6a17 	ldw	r2,-600(fp)
   11424:	1887883a 	add	r3,r3,r2
   11428:	e13f6817 	ldw	r4,-608(fp)
   1142c:	e0bf6917 	ldw	r2,-604(fp)
   11430:	2088f03a 	xor	r4,r4,r2
   11434:	e0bf6717 	ldw	r2,-612(fp)
   11438:	2088703a 	and	r4,r4,r2
   1143c:	e0bf6917 	ldw	r2,-604(fp)
   11440:	2084f03a 	xor	r2,r4,r2
   11444:	1887883a 	add	r3,r3,r2
   11448:	e0bf8917 	ldw	r2,-476(fp)
   1144c:	100813fa 	roli	r4,r2,15
   11450:	e0bf8917 	ldw	r2,-476(fp)
   11454:	1004137a 	roli	r2,r2,13
   11458:	2088f03a 	xor	r4,r4,r2
   1145c:	e0bf8917 	ldw	r2,-476(fp)
   11460:	1004d2ba 	srli	r2,r2,10
   11464:	2088f03a 	xor	r4,r4,r2
   11468:	e0bf7a17 	ldw	r2,-536(fp)
   1146c:	2089883a 	add	r4,r4,r2
   11470:	e17f9217 	ldw	r5,-440(fp)
   11474:	008001c4 	movi	r2,7
   11478:	288a583a 	ror	r5,r5,r2
   1147c:	e0bf9217 	ldw	r2,-440(fp)
   11480:	100413ba 	roli	r2,r2,14
   11484:	288af03a 	xor	r5,r5,r2
   11488:	e0bf9217 	ldw	r2,-440(fp)
   1148c:	1004d0fa 	srli	r2,r2,3
   11490:	2884f03a 	xor	r2,r5,r2
   11494:	2085883a 	add	r2,r4,r2
   11498:	e13f8f17 	ldw	r4,-452(fp)
   1149c:	2085883a 	add	r2,r4,r2
   114a0:	e0bf8f15 	stw	r2,-452(fp)
   114a4:	e0bf8f17 	ldw	r2,-452(fp)
   114a8:	1887883a 	add	r3,r3,r2
   114ac:	00b1db34 	movhi	r2,51052
   114b0:	109468c4 	addi	r2,r2,20899
   114b4:	1885883a 	add	r2,r3,r2
   114b8:	e0bfd415 	stw	r2,-176(fp)
   114bc:	e0ff6b17 	ldw	r3,-596(fp)
   114c0:	00800084 	movi	r2,2
   114c4:	1886583a 	ror	r3,r3,r2
   114c8:	e13f6b17 	ldw	r4,-596(fp)
   114cc:	00800344 	movi	r2,13
   114d0:	2084583a 	ror	r2,r4,r2
   114d4:	1886f03a 	xor	r3,r3,r2
   114d8:	e0bf6b17 	ldw	r2,-596(fp)
   114dc:	100412ba 	roli	r2,r2,10
   114e0:	1886f03a 	xor	r3,r3,r2
   114e4:	e13f6b17 	ldw	r4,-596(fp)
   114e8:	e0bf6c17 	ldw	r2,-592(fp)
   114ec:	2088703a 	and	r4,r4,r2
   114f0:	e17f6b17 	ldw	r5,-596(fp)
   114f4:	e0bf6c17 	ldw	r2,-592(fp)
   114f8:	288ab03a 	or	r5,r5,r2
   114fc:	e0bf6d17 	ldw	r2,-588(fp)
   11500:	2884703a 	and	r2,r5,r2
   11504:	2084b03a 	or	r2,r4,r2
   11508:	1885883a 	add	r2,r3,r2
   1150c:	e0bfd515 	stw	r2,-172(fp)
   11510:	e0ff6617 	ldw	r3,-616(fp)
   11514:	e0bfd417 	ldw	r2,-176(fp)
   11518:	1885883a 	add	r2,r3,r2
   1151c:	e0bf6615 	stw	r2,-616(fp)
   11520:	e0ffd417 	ldw	r3,-176(fp)
   11524:	e0bfd517 	ldw	r2,-172(fp)
   11528:	1885883a 	add	r2,r3,r2
   1152c:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));
   11530:	e0ff6617 	ldw	r3,-616(fp)
   11534:	00800184 	movi	r2,6
   11538:	1886583a 	ror	r3,r3,r2
   1153c:	e13f6617 	ldw	r4,-616(fp)
   11540:	008002c4 	movi	r2,11
   11544:	2084583a 	ror	r2,r4,r2
   11548:	1886f03a 	xor	r3,r3,r2
   1154c:	e0bf6617 	ldw	r2,-616(fp)
   11550:	100411fa 	roli	r2,r2,7
   11554:	1886f03a 	xor	r3,r3,r2
   11558:	e0bf6917 	ldw	r2,-604(fp)
   1155c:	1887883a 	add	r3,r3,r2
   11560:	e13f6717 	ldw	r4,-612(fp)
   11564:	e0bf6817 	ldw	r2,-608(fp)
   11568:	2088f03a 	xor	r4,r4,r2
   1156c:	e0bf6617 	ldw	r2,-616(fp)
   11570:	2088703a 	and	r4,r4,r2
   11574:	e0bf6817 	ldw	r2,-608(fp)
   11578:	2084f03a 	xor	r2,r4,r2
   1157c:	1887883a 	add	r3,r3,r2
   11580:	e0bf8c17 	ldw	r2,-464(fp)
   11584:	100813fa 	roli	r4,r2,15
   11588:	e0bf8c17 	ldw	r2,-464(fp)
   1158c:	1004137a 	roli	r2,r2,13
   11590:	2088f03a 	xor	r4,r4,r2
   11594:	e0bf8c17 	ldw	r2,-464(fp)
   11598:	1004d2ba 	srli	r2,r2,10
   1159c:	2088f03a 	xor	r4,r4,r2
   115a0:	e0bf7d17 	ldw	r2,-524(fp)
   115a4:	2089883a 	add	r4,r4,r2
   115a8:	e17f9517 	ldw	r5,-428(fp)
   115ac:	008001c4 	movi	r2,7
   115b0:	288a583a 	ror	r5,r5,r2
   115b4:	e0bf9517 	ldw	r2,-428(fp)
   115b8:	100413ba 	roli	r2,r2,14
   115bc:	288af03a 	xor	r5,r5,r2
   115c0:	e0bf9517 	ldw	r2,-428(fp)
   115c4:	1004d0fa 	srli	r2,r2,3
   115c8:	2884f03a 	xor	r2,r5,r2
   115cc:	2085883a 	add	r2,r4,r2
   115d0:	e13f9217 	ldw	r4,-440(fp)
   115d4:	2085883a 	add	r2,r4,r2
   115d8:	e0bf9215 	stw	r2,-440(fp)
   115dc:	e0bf9217 	ldw	r2,-440(fp)
   115e0:	1887883a 	add	r3,r3,r2
   115e4:	00b464f4 	movhi	r2,53651
   115e8:	10ba0644 	addi	r2,r2,-6119
   115ec:	1885883a 	add	r2,r3,r2
   115f0:	e0bfd615 	stw	r2,-168(fp)
   115f4:	e0ff6a17 	ldw	r3,-600(fp)
   115f8:	00800084 	movi	r2,2
   115fc:	1886583a 	ror	r3,r3,r2
   11600:	e13f6a17 	ldw	r4,-600(fp)
   11604:	00800344 	movi	r2,13
   11608:	2084583a 	ror	r2,r4,r2
   1160c:	1886f03a 	xor	r3,r3,r2
   11610:	e0bf6a17 	ldw	r2,-600(fp)
   11614:	100412ba 	roli	r2,r2,10
   11618:	1886f03a 	xor	r3,r3,r2
   1161c:	e13f6a17 	ldw	r4,-600(fp)
   11620:	e0bf6b17 	ldw	r2,-596(fp)
   11624:	2088703a 	and	r4,r4,r2
   11628:	e17f6a17 	ldw	r5,-600(fp)
   1162c:	e0bf6b17 	ldw	r2,-596(fp)
   11630:	288ab03a 	or	r5,r5,r2
   11634:	e0bf6c17 	ldw	r2,-592(fp)
   11638:	2884703a 	and	r2,r5,r2
   1163c:	2084b03a 	or	r2,r4,r2
   11640:	1885883a 	add	r2,r3,r2
   11644:	e0bfd715 	stw	r2,-164(fp)
   11648:	e0ff6d17 	ldw	r3,-588(fp)
   1164c:	e0bfd617 	ldw	r2,-168(fp)
   11650:	1885883a 	add	r2,r3,r2
   11654:	e0bf6d15 	stw	r2,-588(fp)
   11658:	e0ffd617 	ldw	r3,-168(fp)
   1165c:	e0bfd717 	ldw	r2,-164(fp)
   11660:	1885883a 	add	r2,r3,r2
   11664:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));
   11668:	e0ff6d17 	ldw	r3,-588(fp)
   1166c:	00800184 	movi	r2,6
   11670:	1886583a 	ror	r3,r3,r2
   11674:	e13f6d17 	ldw	r4,-588(fp)
   11678:	008002c4 	movi	r2,11
   1167c:	2084583a 	ror	r2,r4,r2
   11680:	1886f03a 	xor	r3,r3,r2
   11684:	e0bf6d17 	ldw	r2,-588(fp)
   11688:	100411fa 	roli	r2,r2,7
   1168c:	1886f03a 	xor	r3,r3,r2
   11690:	e0bf6817 	ldw	r2,-608(fp)
   11694:	1887883a 	add	r3,r3,r2
   11698:	e13f6617 	ldw	r4,-616(fp)
   1169c:	e0bf6717 	ldw	r2,-612(fp)
   116a0:	2088f03a 	xor	r4,r4,r2
   116a4:	e0bf6d17 	ldw	r2,-588(fp)
   116a8:	2088703a 	and	r4,r4,r2
   116ac:	e0bf6717 	ldw	r2,-612(fp)
   116b0:	2084f03a 	xor	r2,r4,r2
   116b4:	1887883a 	add	r3,r3,r2
   116b8:	e0bf8f17 	ldw	r2,-452(fp)
   116bc:	100813fa 	roli	r4,r2,15
   116c0:	e0bf8f17 	ldw	r2,-452(fp)
   116c4:	1004137a 	roli	r2,r2,13
   116c8:	2088f03a 	xor	r4,r4,r2
   116cc:	e0bf8f17 	ldw	r2,-452(fp)
   116d0:	1004d2ba 	srli	r2,r2,10
   116d4:	2088f03a 	xor	r4,r4,r2
   116d8:	e0bf8017 	ldw	r2,-512(fp)
   116dc:	2089883a 	add	r4,r4,r2
   116e0:	e17f9817 	ldw	r5,-416(fp)
   116e4:	008001c4 	movi	r2,7
   116e8:	288a583a 	ror	r5,r5,r2
   116ec:	e0bf9817 	ldw	r2,-416(fp)
   116f0:	100413ba 	roli	r2,r2,14
   116f4:	288af03a 	xor	r5,r5,r2
   116f8:	e0bf9817 	ldw	r2,-416(fp)
   116fc:	1004d0fa 	srli	r2,r2,3
   11700:	2884f03a 	xor	r2,r5,r2
   11704:	2085883a 	add	r2,r4,r2
   11708:	e13f9517 	ldw	r4,-428(fp)
   1170c:	2085883a 	add	r2,r4,r2
   11710:	e0bf9515 	stw	r2,-428(fp)
   11714:	e0bf9517 	ldw	r2,-428(fp)
   11718:	1887883a 	add	r3,r3,r2
   1171c:	00b5a674 	movhi	r2,54937
   11720:	10818904 	addi	r2,r2,1572
   11724:	1885883a 	add	r2,r3,r2
   11728:	e0bfd815 	stw	r2,-160(fp)
   1172c:	e0ff6917 	ldw	r3,-604(fp)
   11730:	00800084 	movi	r2,2
   11734:	1886583a 	ror	r3,r3,r2
   11738:	e13f6917 	ldw	r4,-604(fp)
   1173c:	00800344 	movi	r2,13
   11740:	2084583a 	ror	r2,r4,r2
   11744:	1886f03a 	xor	r3,r3,r2
   11748:	e0bf6917 	ldw	r2,-604(fp)
   1174c:	100412ba 	roli	r2,r2,10
   11750:	1886f03a 	xor	r3,r3,r2
   11754:	e13f6917 	ldw	r4,-604(fp)
   11758:	e0bf6a17 	ldw	r2,-600(fp)
   1175c:	2088703a 	and	r4,r4,r2
   11760:	e17f6917 	ldw	r5,-604(fp)
   11764:	e0bf6a17 	ldw	r2,-600(fp)
   11768:	288ab03a 	or	r5,r5,r2
   1176c:	e0bf6b17 	ldw	r2,-596(fp)
   11770:	2884703a 	and	r2,r5,r2
   11774:	2084b03a 	or	r2,r4,r2
   11778:	1885883a 	add	r2,r3,r2
   1177c:	e0bfd915 	stw	r2,-156(fp)
   11780:	e0ff6c17 	ldw	r3,-592(fp)
   11784:	e0bfd817 	ldw	r2,-160(fp)
   11788:	1885883a 	add	r2,r3,r2
   1178c:	e0bf6c15 	stw	r2,-592(fp)
   11790:	e0ffd817 	ldw	r3,-160(fp)
   11794:	e0bfd917 	ldw	r2,-156(fp)
   11798:	1885883a 	add	r2,r3,r2
   1179c:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));
   117a0:	e0ff6c17 	ldw	r3,-592(fp)
   117a4:	00800184 	movi	r2,6
   117a8:	1886583a 	ror	r3,r3,r2
   117ac:	e13f6c17 	ldw	r4,-592(fp)
   117b0:	008002c4 	movi	r2,11
   117b4:	2084583a 	ror	r2,r4,r2
   117b8:	1886f03a 	xor	r3,r3,r2
   117bc:	e0bf6c17 	ldw	r2,-592(fp)
   117c0:	100411fa 	roli	r2,r2,7
   117c4:	1886f03a 	xor	r3,r3,r2
   117c8:	e0bf6717 	ldw	r2,-612(fp)
   117cc:	1887883a 	add	r3,r3,r2
   117d0:	e13f6d17 	ldw	r4,-588(fp)
   117d4:	e0bf6617 	ldw	r2,-616(fp)
   117d8:	2088f03a 	xor	r4,r4,r2
   117dc:	e0bf6c17 	ldw	r2,-592(fp)
   117e0:	2088703a 	and	r4,r4,r2
   117e4:	e0bf6617 	ldw	r2,-616(fp)
   117e8:	2084f03a 	xor	r2,r4,r2
   117ec:	1887883a 	add	r3,r3,r2
   117f0:	e0bf9217 	ldw	r2,-440(fp)
   117f4:	100813fa 	roli	r4,r2,15
   117f8:	e0bf9217 	ldw	r2,-440(fp)
   117fc:	1004137a 	roli	r2,r2,13
   11800:	2088f03a 	xor	r4,r4,r2
   11804:	e0bf9217 	ldw	r2,-440(fp)
   11808:	1004d2ba 	srli	r2,r2,10
   1180c:	2088f03a 	xor	r4,r4,r2
   11810:	e0bf8317 	ldw	r2,-500(fp)
   11814:	2089883a 	add	r4,r4,r2
   11818:	e17f9b17 	ldw	r5,-404(fp)
   1181c:	008001c4 	movi	r2,7
   11820:	288a583a 	ror	r5,r5,r2
   11824:	e0bf9b17 	ldw	r2,-404(fp)
   11828:	100413ba 	roli	r2,r2,14
   1182c:	288af03a 	xor	r5,r5,r2
   11830:	e0bf9b17 	ldw	r2,-404(fp)
   11834:	1004d0fa 	srli	r2,r2,3
   11838:	2884f03a 	xor	r2,r5,r2
   1183c:	2085883a 	add	r2,r4,r2
   11840:	e13f9817 	ldw	r4,-416(fp)
   11844:	2085883a 	add	r2,r4,r2
   11848:	e0bf9815 	stw	r2,-416(fp)
   1184c:	e0bf9817 	ldw	r2,-416(fp)
   11850:	1887883a 	add	r3,r3,r2
   11854:	00bd03b4 	movhi	r2,62478
   11858:	108d6144 	addi	r2,r2,13701
   1185c:	1885883a 	add	r2,r3,r2
   11860:	e0bfda15 	stw	r2,-152(fp)
   11864:	e0ff6817 	ldw	r3,-608(fp)
   11868:	00800084 	movi	r2,2
   1186c:	1886583a 	ror	r3,r3,r2
   11870:	e13f6817 	ldw	r4,-608(fp)
   11874:	00800344 	movi	r2,13
   11878:	2084583a 	ror	r2,r4,r2
   1187c:	1886f03a 	xor	r3,r3,r2
   11880:	e0bf6817 	ldw	r2,-608(fp)
   11884:	100412ba 	roli	r2,r2,10
   11888:	1886f03a 	xor	r3,r3,r2
   1188c:	e13f6817 	ldw	r4,-608(fp)
   11890:	e0bf6917 	ldw	r2,-604(fp)
   11894:	2088703a 	and	r4,r4,r2
   11898:	e17f6817 	ldw	r5,-608(fp)
   1189c:	e0bf6917 	ldw	r2,-604(fp)
   118a0:	288ab03a 	or	r5,r5,r2
   118a4:	e0bf6a17 	ldw	r2,-600(fp)
   118a8:	2884703a 	and	r2,r5,r2
   118ac:	2084b03a 	or	r2,r4,r2
   118b0:	1885883a 	add	r2,r3,r2
   118b4:	e0bfdb15 	stw	r2,-148(fp)
   118b8:	e0ff6b17 	ldw	r3,-596(fp)
   118bc:	e0bfda17 	ldw	r2,-152(fp)
   118c0:	1885883a 	add	r2,r3,r2
   118c4:	e0bf6b15 	stw	r2,-596(fp)
   118c8:	e0ffda17 	ldw	r3,-152(fp)
   118cc:	e0bfdb17 	ldw	r2,-148(fp)
   118d0:	1885883a 	add	r2,r3,r2
   118d4:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));
   118d8:	e0ff6b17 	ldw	r3,-596(fp)
   118dc:	00800184 	movi	r2,6
   118e0:	1886583a 	ror	r3,r3,r2
   118e4:	e13f6b17 	ldw	r4,-596(fp)
   118e8:	008002c4 	movi	r2,11
   118ec:	2084583a 	ror	r2,r4,r2
   118f0:	1886f03a 	xor	r3,r3,r2
   118f4:	e0bf6b17 	ldw	r2,-596(fp)
   118f8:	100411fa 	roli	r2,r2,7
   118fc:	1886f03a 	xor	r3,r3,r2
   11900:	e0bf6617 	ldw	r2,-616(fp)
   11904:	1887883a 	add	r3,r3,r2
   11908:	e13f6c17 	ldw	r4,-592(fp)
   1190c:	e0bf6d17 	ldw	r2,-588(fp)
   11910:	2088f03a 	xor	r4,r4,r2
   11914:	e0bf6b17 	ldw	r2,-596(fp)
   11918:	2088703a 	and	r4,r4,r2
   1191c:	e0bf6d17 	ldw	r2,-588(fp)
   11920:	2084f03a 	xor	r2,r4,r2
   11924:	1887883a 	add	r3,r3,r2
   11928:	e0bf9517 	ldw	r2,-428(fp)
   1192c:	100813fa 	roli	r4,r2,15
   11930:	e0bf9517 	ldw	r2,-428(fp)
   11934:	1004137a 	roli	r2,r2,13
   11938:	2088f03a 	xor	r4,r4,r2
   1193c:	e0bf9517 	ldw	r2,-428(fp)
   11940:	1004d2ba 	srli	r2,r2,10
   11944:	2088f03a 	xor	r4,r4,r2
   11948:	e0bf8617 	ldw	r2,-488(fp)
   1194c:	2089883a 	add	r4,r4,r2
   11950:	e17f6e17 	ldw	r5,-584(fp)
   11954:	008001c4 	movi	r2,7
   11958:	288a583a 	ror	r5,r5,r2
   1195c:	e0bf6e17 	ldw	r2,-584(fp)
   11960:	100413ba 	roli	r2,r2,14
   11964:	288af03a 	xor	r5,r5,r2
   11968:	e0bf6e17 	ldw	r2,-584(fp)
   1196c:	1004d0fa 	srli	r2,r2,3
   11970:	2884f03a 	xor	r2,r5,r2
   11974:	2085883a 	add	r2,r4,r2
   11978:	e13f9b17 	ldw	r4,-404(fp)
   1197c:	2085883a 	add	r2,r4,r2
   11980:	e0bf9b15 	stw	r2,-404(fp)
   11984:	e0bf9b17 	ldw	r2,-404(fp)
   11988:	1887883a 	add	r3,r3,r2
   1198c:	00841af4 	movhi	r2,4203
   11990:	10a81c04 	addi	r2,r2,-24464
   11994:	1885883a 	add	r2,r3,r2
   11998:	e0bfdc15 	stw	r2,-144(fp)
   1199c:	e0ff6717 	ldw	r3,-612(fp)
   119a0:	00800084 	movi	r2,2
   119a4:	1886583a 	ror	r3,r3,r2
   119a8:	e13f6717 	ldw	r4,-612(fp)
   119ac:	00800344 	movi	r2,13
   119b0:	2084583a 	ror	r2,r4,r2
   119b4:	1886f03a 	xor	r3,r3,r2
   119b8:	e0bf6717 	ldw	r2,-612(fp)
   119bc:	100412ba 	roli	r2,r2,10
   119c0:	1886f03a 	xor	r3,r3,r2
   119c4:	e13f6717 	ldw	r4,-612(fp)
   119c8:	e0bf6817 	ldw	r2,-608(fp)
   119cc:	2088703a 	and	r4,r4,r2
   119d0:	e17f6717 	ldw	r5,-612(fp)
   119d4:	e0bf6817 	ldw	r2,-608(fp)
   119d8:	288ab03a 	or	r5,r5,r2
   119dc:	e0bf6917 	ldw	r2,-604(fp)
   119e0:	2884703a 	and	r2,r5,r2
   119e4:	2084b03a 	or	r2,r4,r2
   119e8:	1885883a 	add	r2,r3,r2
   119ec:	e0bfdd15 	stw	r2,-140(fp)
   119f0:	e0ff6a17 	ldw	r3,-600(fp)
   119f4:	e0bfdc17 	ldw	r2,-144(fp)
   119f8:	1885883a 	add	r2,r3,r2
   119fc:	e0bf6a15 	stw	r2,-600(fp)
   11a00:	e0ffdc17 	ldw	r3,-144(fp)
   11a04:	e0bfdd17 	ldw	r2,-140(fp)
   11a08:	1885883a 	add	r2,r3,r2
   11a0c:	e0bf6615 	stw	r2,-616(fp)

    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));
   11a10:	e0ff6a17 	ldw	r3,-600(fp)
   11a14:	00800184 	movi	r2,6
   11a18:	1886583a 	ror	r3,r3,r2
   11a1c:	e13f6a17 	ldw	r4,-600(fp)
   11a20:	008002c4 	movi	r2,11
   11a24:	2084583a 	ror	r2,r4,r2
   11a28:	1886f03a 	xor	r3,r3,r2
   11a2c:	e0bf6a17 	ldw	r2,-600(fp)
   11a30:	100411fa 	roli	r2,r2,7
   11a34:	1886f03a 	xor	r3,r3,r2
   11a38:	e0bf6d17 	ldw	r2,-588(fp)
   11a3c:	1887883a 	add	r3,r3,r2
   11a40:	e13f6b17 	ldw	r4,-596(fp)
   11a44:	e0bf6c17 	ldw	r2,-592(fp)
   11a48:	2088f03a 	xor	r4,r4,r2
   11a4c:	e0bf6a17 	ldw	r2,-600(fp)
   11a50:	2088703a 	and	r4,r4,r2
   11a54:	e0bf6c17 	ldw	r2,-592(fp)
   11a58:	2084f03a 	xor	r2,r4,r2
   11a5c:	1887883a 	add	r3,r3,r2
   11a60:	e0bf9817 	ldw	r2,-416(fp)
   11a64:	100813fa 	roli	r4,r2,15
   11a68:	e0bf9817 	ldw	r2,-416(fp)
   11a6c:	1004137a 	roli	r2,r2,13
   11a70:	2088f03a 	xor	r4,r4,r2
   11a74:	e0bf9817 	ldw	r2,-416(fp)
   11a78:	1004d2ba 	srli	r2,r2,10
   11a7c:	2088f03a 	xor	r4,r4,r2
   11a80:	e0bf8917 	ldw	r2,-476(fp)
   11a84:	2089883a 	add	r4,r4,r2
   11a88:	e17f7117 	ldw	r5,-572(fp)
   11a8c:	008001c4 	movi	r2,7
   11a90:	288a583a 	ror	r5,r5,r2
   11a94:	e0bf7117 	ldw	r2,-572(fp)
   11a98:	100413ba 	roli	r2,r2,14
   11a9c:	288af03a 	xor	r5,r5,r2
   11aa0:	e0bf7117 	ldw	r2,-572(fp)
   11aa4:	1004d0fa 	srli	r2,r2,3
   11aa8:	2884f03a 	xor	r2,r5,r2
   11aac:	2085883a 	add	r2,r4,r2
   11ab0:	e13f6e17 	ldw	r4,-584(fp)
   11ab4:	2085883a 	add	r2,r4,r2
   11ab8:	e0bf6e15 	stw	r2,-584(fp)
   11abc:	e0bf6e17 	ldw	r2,-584(fp)
   11ac0:	1887883a 	add	r3,r3,r2
   11ac4:	00866974 	movhi	r2,6565
   11ac8:	10b04584 	addi	r2,r2,-16106
   11acc:	1885883a 	add	r2,r3,r2
   11ad0:	e0bfde15 	stw	r2,-136(fp)
   11ad4:	e0ff6617 	ldw	r3,-616(fp)
   11ad8:	00800084 	movi	r2,2
   11adc:	1886583a 	ror	r3,r3,r2
   11ae0:	e13f6617 	ldw	r4,-616(fp)
   11ae4:	00800344 	movi	r2,13
   11ae8:	2084583a 	ror	r2,r4,r2
   11aec:	1886f03a 	xor	r3,r3,r2
   11af0:	e0bf6617 	ldw	r2,-616(fp)
   11af4:	100412ba 	roli	r2,r2,10
   11af8:	1886f03a 	xor	r3,r3,r2
   11afc:	e13f6617 	ldw	r4,-616(fp)
   11b00:	e0bf6717 	ldw	r2,-612(fp)
   11b04:	2088703a 	and	r4,r4,r2
   11b08:	e17f6617 	ldw	r5,-616(fp)
   11b0c:	e0bf6717 	ldw	r2,-612(fp)
   11b10:	288ab03a 	or	r5,r5,r2
   11b14:	e0bf6817 	ldw	r2,-608(fp)
   11b18:	2884703a 	and	r2,r5,r2
   11b1c:	2084b03a 	or	r2,r4,r2
   11b20:	1885883a 	add	r2,r3,r2
   11b24:	e0bfdf15 	stw	r2,-132(fp)
   11b28:	e0ff6917 	ldw	r3,-604(fp)
   11b2c:	e0bfde17 	ldw	r2,-136(fp)
   11b30:	1885883a 	add	r2,r3,r2
   11b34:	e0bf6915 	stw	r2,-604(fp)
   11b38:	e0ffde17 	ldw	r3,-136(fp)
   11b3c:	e0bfdf17 	ldw	r2,-132(fp)
   11b40:	1885883a 	add	r2,r3,r2
   11b44:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));
   11b48:	e0ff6917 	ldw	r3,-604(fp)
   11b4c:	00800184 	movi	r2,6
   11b50:	1886583a 	ror	r3,r3,r2
   11b54:	e13f6917 	ldw	r4,-604(fp)
   11b58:	008002c4 	movi	r2,11
   11b5c:	2084583a 	ror	r2,r4,r2
   11b60:	1886f03a 	xor	r3,r3,r2
   11b64:	e0bf6917 	ldw	r2,-604(fp)
   11b68:	100411fa 	roli	r2,r2,7
   11b6c:	1886f03a 	xor	r3,r3,r2
   11b70:	e0bf6c17 	ldw	r2,-592(fp)
   11b74:	1887883a 	add	r3,r3,r2
   11b78:	e13f6a17 	ldw	r4,-600(fp)
   11b7c:	e0bf6b17 	ldw	r2,-596(fp)
   11b80:	2088f03a 	xor	r4,r4,r2
   11b84:	e0bf6917 	ldw	r2,-604(fp)
   11b88:	2088703a 	and	r4,r4,r2
   11b8c:	e0bf6b17 	ldw	r2,-596(fp)
   11b90:	2084f03a 	xor	r2,r4,r2
   11b94:	1887883a 	add	r3,r3,r2
   11b98:	e0bf9b17 	ldw	r2,-404(fp)
   11b9c:	100813fa 	roli	r4,r2,15
   11ba0:	e0bf9b17 	ldw	r2,-404(fp)
   11ba4:	1004137a 	roli	r2,r2,13
   11ba8:	2088f03a 	xor	r4,r4,r2
   11bac:	e0bf9b17 	ldw	r2,-404(fp)
   11bb0:	1004d2ba 	srli	r2,r2,10
   11bb4:	2088f03a 	xor	r4,r4,r2
   11bb8:	e0bf8c17 	ldw	r2,-464(fp)
   11bbc:	2089883a 	add	r4,r4,r2
   11bc0:	e17f7417 	ldw	r5,-560(fp)
   11bc4:	008001c4 	movi	r2,7
   11bc8:	288a583a 	ror	r5,r5,r2
   11bcc:	e0bf7417 	ldw	r2,-560(fp)
   11bd0:	100413ba 	roli	r2,r2,14
   11bd4:	288af03a 	xor	r5,r5,r2
   11bd8:	e0bf7417 	ldw	r2,-560(fp)
   11bdc:	1004d0fa 	srli	r2,r2,3
   11be0:	2884f03a 	xor	r2,r5,r2
   11be4:	2085883a 	add	r2,r4,r2
   11be8:	e13f7117 	ldw	r4,-572(fp)
   11bec:	2085883a 	add	r2,r4,r2
   11bf0:	e0bf7115 	stw	r2,-572(fp)
   11bf4:	e0bf7117 	ldw	r2,-572(fp)
   11bf8:	1887883a 	add	r3,r3,r2
   11bfc:	00878df4 	movhi	r2,7735
   11c00:	109b0204 	addi	r2,r2,27656
   11c04:	1885883a 	add	r2,r3,r2
   11c08:	e0bfe015 	stw	r2,-128(fp)
   11c0c:	e0ff6d17 	ldw	r3,-588(fp)
   11c10:	00800084 	movi	r2,2
   11c14:	1886583a 	ror	r3,r3,r2
   11c18:	e13f6d17 	ldw	r4,-588(fp)
   11c1c:	00800344 	movi	r2,13
   11c20:	2084583a 	ror	r2,r4,r2
   11c24:	1886f03a 	xor	r3,r3,r2
   11c28:	e0bf6d17 	ldw	r2,-588(fp)
   11c2c:	100412ba 	roli	r2,r2,10
   11c30:	1886f03a 	xor	r3,r3,r2
   11c34:	e13f6d17 	ldw	r4,-588(fp)
   11c38:	e0bf6617 	ldw	r2,-616(fp)
   11c3c:	2088703a 	and	r4,r4,r2
   11c40:	e17f6d17 	ldw	r5,-588(fp)
   11c44:	e0bf6617 	ldw	r2,-616(fp)
   11c48:	288ab03a 	or	r5,r5,r2
   11c4c:	e0bf6717 	ldw	r2,-612(fp)
   11c50:	2884703a 	and	r2,r5,r2
   11c54:	2084b03a 	or	r2,r4,r2
   11c58:	1885883a 	add	r2,r3,r2
   11c5c:	e0bfe115 	stw	r2,-124(fp)
   11c60:	e0ff6817 	ldw	r3,-608(fp)
   11c64:	e0bfe017 	ldw	r2,-128(fp)
   11c68:	1885883a 	add	r2,r3,r2
   11c6c:	e0bf6815 	stw	r2,-608(fp)
   11c70:	e0ffe017 	ldw	r3,-128(fp)
   11c74:	e0bfe117 	ldw	r2,-124(fp)
   11c78:	1885883a 	add	r2,r3,r2
   11c7c:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));
   11c80:	e0ff6817 	ldw	r3,-608(fp)
   11c84:	00800184 	movi	r2,6
   11c88:	1886583a 	ror	r3,r3,r2
   11c8c:	e13f6817 	ldw	r4,-608(fp)
   11c90:	008002c4 	movi	r2,11
   11c94:	2084583a 	ror	r2,r4,r2
   11c98:	1886f03a 	xor	r3,r3,r2
   11c9c:	e0bf6817 	ldw	r2,-608(fp)
   11ca0:	100411fa 	roli	r2,r2,7
   11ca4:	1886f03a 	xor	r3,r3,r2
   11ca8:	e0bf6b17 	ldw	r2,-596(fp)
   11cac:	1887883a 	add	r3,r3,r2
   11cb0:	e13f6917 	ldw	r4,-604(fp)
   11cb4:	e0bf6a17 	ldw	r2,-600(fp)
   11cb8:	2088f03a 	xor	r4,r4,r2
   11cbc:	e0bf6817 	ldw	r2,-608(fp)
   11cc0:	2088703a 	and	r4,r4,r2
   11cc4:	e0bf6a17 	ldw	r2,-600(fp)
   11cc8:	2084f03a 	xor	r2,r4,r2
   11ccc:	1887883a 	add	r3,r3,r2
   11cd0:	e0bf6e17 	ldw	r2,-584(fp)
   11cd4:	100813fa 	roli	r4,r2,15
   11cd8:	e0bf6e17 	ldw	r2,-584(fp)
   11cdc:	1004137a 	roli	r2,r2,13
   11ce0:	2088f03a 	xor	r4,r4,r2
   11ce4:	e0bf6e17 	ldw	r2,-584(fp)
   11ce8:	1004d2ba 	srli	r2,r2,10
   11cec:	2088f03a 	xor	r4,r4,r2
   11cf0:	e0bf8f17 	ldw	r2,-452(fp)
   11cf4:	2089883a 	add	r4,r4,r2
   11cf8:	e17f7717 	ldw	r5,-548(fp)
   11cfc:	008001c4 	movi	r2,7
   11d00:	288a583a 	ror	r5,r5,r2
   11d04:	e0bf7717 	ldw	r2,-548(fp)
   11d08:	100413ba 	roli	r2,r2,14
   11d0c:	288af03a 	xor	r5,r5,r2
   11d10:	e0bf7717 	ldw	r2,-548(fp)
   11d14:	1004d0fa 	srli	r2,r2,3
   11d18:	2884f03a 	xor	r2,r5,r2
   11d1c:	2085883a 	add	r2,r4,r2
   11d20:	e13f7417 	ldw	r4,-560(fp)
   11d24:	2085883a 	add	r2,r4,r2
   11d28:	e0bf7415 	stw	r2,-560(fp)
   11d2c:	e0bf7417 	ldw	r2,-560(fp)
   11d30:	1887883a 	add	r3,r3,r2
   11d34:	0089d234 	movhi	r2,10056
   11d38:	109dd304 	addi	r2,r2,30540
   11d3c:	1885883a 	add	r2,r3,r2
   11d40:	e0bfe215 	stw	r2,-120(fp)
   11d44:	e0ff6c17 	ldw	r3,-592(fp)
   11d48:	00800084 	movi	r2,2
   11d4c:	1886583a 	ror	r3,r3,r2
   11d50:	e13f6c17 	ldw	r4,-592(fp)
   11d54:	00800344 	movi	r2,13
   11d58:	2084583a 	ror	r2,r4,r2
   11d5c:	1886f03a 	xor	r3,r3,r2
   11d60:	e0bf6c17 	ldw	r2,-592(fp)
   11d64:	100412ba 	roli	r2,r2,10
   11d68:	1886f03a 	xor	r3,r3,r2
   11d6c:	e13f6c17 	ldw	r4,-592(fp)
   11d70:	e0bf6d17 	ldw	r2,-588(fp)
   11d74:	2088703a 	and	r4,r4,r2
   11d78:	e17f6c17 	ldw	r5,-592(fp)
   11d7c:	e0bf6d17 	ldw	r2,-588(fp)
   11d80:	288ab03a 	or	r5,r5,r2
   11d84:	e0bf6617 	ldw	r2,-616(fp)
   11d88:	2884703a 	and	r2,r5,r2
   11d8c:	2084b03a 	or	r2,r4,r2
   11d90:	1885883a 	add	r2,r3,r2
   11d94:	e0bfe315 	stw	r2,-116(fp)
   11d98:	e0ff6717 	ldw	r3,-612(fp)
   11d9c:	e0bfe217 	ldw	r2,-120(fp)
   11da0:	1885883a 	add	r2,r3,r2
   11da4:	e0bf6715 	stw	r2,-612(fp)
   11da8:	e0ffe217 	ldw	r3,-120(fp)
   11dac:	e0bfe317 	ldw	r2,-116(fp)
   11db0:	1885883a 	add	r2,r3,r2
   11db4:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));
   11db8:	e0ff6717 	ldw	r3,-612(fp)
   11dbc:	00800184 	movi	r2,6
   11dc0:	1886583a 	ror	r3,r3,r2
   11dc4:	e13f6717 	ldw	r4,-612(fp)
   11dc8:	008002c4 	movi	r2,11
   11dcc:	2084583a 	ror	r2,r4,r2
   11dd0:	1886f03a 	xor	r3,r3,r2
   11dd4:	e0bf6717 	ldw	r2,-612(fp)
   11dd8:	100411fa 	roli	r2,r2,7
   11ddc:	1886f03a 	xor	r3,r3,r2
   11de0:	e0bf6a17 	ldw	r2,-600(fp)
   11de4:	1887883a 	add	r3,r3,r2
   11de8:	e13f6817 	ldw	r4,-608(fp)
   11dec:	e0bf6917 	ldw	r2,-604(fp)
   11df0:	2088f03a 	xor	r4,r4,r2
   11df4:	e0bf6717 	ldw	r2,-612(fp)
   11df8:	2088703a 	and	r4,r4,r2
   11dfc:	e0bf6917 	ldw	r2,-604(fp)
   11e00:	2084f03a 	xor	r2,r4,r2
   11e04:	1887883a 	add	r3,r3,r2
   11e08:	e0bf7117 	ldw	r2,-572(fp)
   11e0c:	100813fa 	roli	r4,r2,15
   11e10:	e0bf7117 	ldw	r2,-572(fp)
   11e14:	1004137a 	roli	r2,r2,13
   11e18:	2088f03a 	xor	r4,r4,r2
   11e1c:	e0bf7117 	ldw	r2,-572(fp)
   11e20:	1004d2ba 	srli	r2,r2,10
   11e24:	2088f03a 	xor	r4,r4,r2
   11e28:	e0bf9217 	ldw	r2,-440(fp)
   11e2c:	2089883a 	add	r4,r4,r2
   11e30:	e17f7a17 	ldw	r5,-536(fp)
   11e34:	008001c4 	movi	r2,7
   11e38:	288a583a 	ror	r5,r5,r2
   11e3c:	e0bf7a17 	ldw	r2,-536(fp)
   11e40:	100413ba 	roli	r2,r2,14
   11e44:	288af03a 	xor	r5,r5,r2
   11e48:	e0bf7a17 	ldw	r2,-536(fp)
   11e4c:	1004d0fa 	srli	r2,r2,3
   11e50:	2884f03a 	xor	r2,r5,r2
   11e54:	2085883a 	add	r2,r4,r2
   11e58:	e13f7717 	ldw	r4,-548(fp)
   11e5c:	2085883a 	add	r2,r4,r2
   11e60:	e0bf7715 	stw	r2,-548(fp)
   11e64:	e0bf7717 	ldw	r2,-548(fp)
   11e68:	1887883a 	add	r3,r3,r2
   11e6c:	008d2c74 	movhi	r2,13489
   11e70:	10af2d44 	addi	r2,r2,-17227
   11e74:	1885883a 	add	r2,r3,r2
   11e78:	e0bfe415 	stw	r2,-112(fp)
   11e7c:	e0ff6b17 	ldw	r3,-596(fp)
   11e80:	00800084 	movi	r2,2
   11e84:	1886583a 	ror	r3,r3,r2
   11e88:	e13f6b17 	ldw	r4,-596(fp)
   11e8c:	00800344 	movi	r2,13
   11e90:	2084583a 	ror	r2,r4,r2
   11e94:	1886f03a 	xor	r3,r3,r2
   11e98:	e0bf6b17 	ldw	r2,-596(fp)
   11e9c:	100412ba 	roli	r2,r2,10
   11ea0:	1886f03a 	xor	r3,r3,r2
   11ea4:	e13f6b17 	ldw	r4,-596(fp)
   11ea8:	e0bf6c17 	ldw	r2,-592(fp)
   11eac:	2088703a 	and	r4,r4,r2
   11eb0:	e17f6b17 	ldw	r5,-596(fp)
   11eb4:	e0bf6c17 	ldw	r2,-592(fp)
   11eb8:	288ab03a 	or	r5,r5,r2
   11ebc:	e0bf6d17 	ldw	r2,-588(fp)
   11ec0:	2884703a 	and	r2,r5,r2
   11ec4:	2084b03a 	or	r2,r4,r2
   11ec8:	1885883a 	add	r2,r3,r2
   11ecc:	e0bfe515 	stw	r2,-108(fp)
   11ed0:	e0ff6617 	ldw	r3,-616(fp)
   11ed4:	e0bfe417 	ldw	r2,-112(fp)
   11ed8:	1885883a 	add	r2,r3,r2
   11edc:	e0bf6615 	stw	r2,-616(fp)
   11ee0:	e0ffe417 	ldw	r3,-112(fp)
   11ee4:	e0bfe517 	ldw	r2,-108(fp)
   11ee8:	1885883a 	add	r2,r3,r2
   11eec:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));
   11ef0:	e0ff6617 	ldw	r3,-616(fp)
   11ef4:	00800184 	movi	r2,6
   11ef8:	1886583a 	ror	r3,r3,r2
   11efc:	e13f6617 	ldw	r4,-616(fp)
   11f00:	008002c4 	movi	r2,11
   11f04:	2084583a 	ror	r2,r4,r2
   11f08:	1886f03a 	xor	r3,r3,r2
   11f0c:	e0bf6617 	ldw	r2,-616(fp)
   11f10:	100411fa 	roli	r2,r2,7
   11f14:	1886f03a 	xor	r3,r3,r2
   11f18:	e0bf6917 	ldw	r2,-604(fp)
   11f1c:	1887883a 	add	r3,r3,r2
   11f20:	e13f6717 	ldw	r4,-612(fp)
   11f24:	e0bf6817 	ldw	r2,-608(fp)
   11f28:	2088f03a 	xor	r4,r4,r2
   11f2c:	e0bf6617 	ldw	r2,-616(fp)
   11f30:	2088703a 	and	r4,r4,r2
   11f34:	e0bf6817 	ldw	r2,-608(fp)
   11f38:	2084f03a 	xor	r2,r4,r2
   11f3c:	1887883a 	add	r3,r3,r2
   11f40:	e0bf7417 	ldw	r2,-560(fp)
   11f44:	100813fa 	roli	r4,r2,15
   11f48:	e0bf7417 	ldw	r2,-560(fp)
   11f4c:	1004137a 	roli	r2,r2,13
   11f50:	2088f03a 	xor	r4,r4,r2
   11f54:	e0bf7417 	ldw	r2,-560(fp)
   11f58:	1004d2ba 	srli	r2,r2,10
   11f5c:	2088f03a 	xor	r4,r4,r2
   11f60:	e0bf9517 	ldw	r2,-428(fp)
   11f64:	2089883a 	add	r4,r4,r2
   11f68:	e17f7d17 	ldw	r5,-524(fp)
   11f6c:	008001c4 	movi	r2,7
   11f70:	288a583a 	ror	r5,r5,r2
   11f74:	e0bf7d17 	ldw	r2,-524(fp)
   11f78:	100413ba 	roli	r2,r2,14
   11f7c:	288af03a 	xor	r5,r5,r2
   11f80:	e0bf7d17 	ldw	r2,-524(fp)
   11f84:	1004d0fa 	srli	r2,r2,3
   11f88:	2884f03a 	xor	r2,r5,r2
   11f8c:	2085883a 	add	r2,r4,r2
   11f90:	e13f7a17 	ldw	r4,-536(fp)
   11f94:	2085883a 	add	r2,r4,r2
   11f98:	e0bf7a15 	stw	r2,-536(fp)
   11f9c:	e0bf7a17 	ldw	r2,-536(fp)
   11fa0:	1887883a 	add	r3,r3,r2
   11fa4:	008e4734 	movhi	r2,14620
   11fa8:	10832cc4 	addi	r2,r2,3251
   11fac:	1885883a 	add	r2,r3,r2
   11fb0:	e0bfe615 	stw	r2,-104(fp)
   11fb4:	e0ff6a17 	ldw	r3,-600(fp)
   11fb8:	00800084 	movi	r2,2
   11fbc:	1886583a 	ror	r3,r3,r2
   11fc0:	e13f6a17 	ldw	r4,-600(fp)
   11fc4:	00800344 	movi	r2,13
   11fc8:	2084583a 	ror	r2,r4,r2
   11fcc:	1886f03a 	xor	r3,r3,r2
   11fd0:	e0bf6a17 	ldw	r2,-600(fp)
   11fd4:	100412ba 	roli	r2,r2,10
   11fd8:	1886f03a 	xor	r3,r3,r2
   11fdc:	e13f6a17 	ldw	r4,-600(fp)
   11fe0:	e0bf6b17 	ldw	r2,-596(fp)
   11fe4:	2088703a 	and	r4,r4,r2
   11fe8:	e17f6a17 	ldw	r5,-600(fp)
   11fec:	e0bf6b17 	ldw	r2,-596(fp)
   11ff0:	288ab03a 	or	r5,r5,r2
   11ff4:	e0bf6c17 	ldw	r2,-592(fp)
   11ff8:	2884703a 	and	r2,r5,r2
   11ffc:	2084b03a 	or	r2,r4,r2
   12000:	1885883a 	add	r2,r3,r2
   12004:	e0bfe715 	stw	r2,-100(fp)
   12008:	e0ff6d17 	ldw	r3,-588(fp)
   1200c:	e0bfe617 	ldw	r2,-104(fp)
   12010:	1885883a 	add	r2,r3,r2
   12014:	e0bf6d15 	stw	r2,-588(fp)
   12018:	e0ffe617 	ldw	r3,-104(fp)
   1201c:	e0bfe717 	ldw	r2,-100(fp)
   12020:	1885883a 	add	r2,r3,r2
   12024:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));
   12028:	e0ff6d17 	ldw	r3,-588(fp)
   1202c:	00800184 	movi	r2,6
   12030:	1886583a 	ror	r3,r3,r2
   12034:	e13f6d17 	ldw	r4,-588(fp)
   12038:	008002c4 	movi	r2,11
   1203c:	2084583a 	ror	r2,r4,r2
   12040:	1886f03a 	xor	r3,r3,r2
   12044:	e0bf6d17 	ldw	r2,-588(fp)
   12048:	100411fa 	roli	r2,r2,7
   1204c:	1886f03a 	xor	r3,r3,r2
   12050:	e0bf6817 	ldw	r2,-608(fp)
   12054:	1887883a 	add	r3,r3,r2
   12058:	e13f6617 	ldw	r4,-616(fp)
   1205c:	e0bf6717 	ldw	r2,-612(fp)
   12060:	2088f03a 	xor	r4,r4,r2
   12064:	e0bf6d17 	ldw	r2,-588(fp)
   12068:	2088703a 	and	r4,r4,r2
   1206c:	e0bf6717 	ldw	r2,-612(fp)
   12070:	2084f03a 	xor	r2,r4,r2
   12074:	1887883a 	add	r3,r3,r2
   12078:	e0bf7717 	ldw	r2,-548(fp)
   1207c:	100813fa 	roli	r4,r2,15
   12080:	e0bf7717 	ldw	r2,-548(fp)
   12084:	1004137a 	roli	r2,r2,13
   12088:	2088f03a 	xor	r4,r4,r2
   1208c:	e0bf7717 	ldw	r2,-548(fp)
   12090:	1004d2ba 	srli	r2,r2,10
   12094:	2088f03a 	xor	r4,r4,r2
   12098:	e0bf9817 	ldw	r2,-416(fp)
   1209c:	2089883a 	add	r4,r4,r2
   120a0:	e17f8017 	ldw	r5,-512(fp)
   120a4:	008001c4 	movi	r2,7
   120a8:	288a583a 	ror	r5,r5,r2
   120ac:	e0bf8017 	ldw	r2,-512(fp)
   120b0:	100413ba 	roli	r2,r2,14
   120b4:	288af03a 	xor	r5,r5,r2
   120b8:	e0bf8017 	ldw	r2,-512(fp)
   120bc:	1004d0fa 	srli	r2,r2,3
   120c0:	2884f03a 	xor	r2,r5,r2
   120c4:	2085883a 	add	r2,r4,r2
   120c8:	e13f7d17 	ldw	r4,-524(fp)
   120cc:	2085883a 	add	r2,r4,r2
   120d0:	e0bf7d15 	stw	r2,-524(fp)
   120d4:	e0bf7d17 	ldw	r2,-524(fp)
   120d8:	1887883a 	add	r3,r3,r2
   120dc:	0093b674 	movhi	r2,20185
   120e0:	10aa9284 	addi	r2,r2,-21942
   120e4:	1885883a 	add	r2,r3,r2
   120e8:	e0bfe815 	stw	r2,-96(fp)
   120ec:	e0ff6917 	ldw	r3,-604(fp)
   120f0:	00800084 	movi	r2,2
   120f4:	1886583a 	ror	r3,r3,r2
   120f8:	e13f6917 	ldw	r4,-604(fp)
   120fc:	00800344 	movi	r2,13
   12100:	2084583a 	ror	r2,r4,r2
   12104:	1886f03a 	xor	r3,r3,r2
   12108:	e0bf6917 	ldw	r2,-604(fp)
   1210c:	100412ba 	roli	r2,r2,10
   12110:	1886f03a 	xor	r3,r3,r2
   12114:	e13f6917 	ldw	r4,-604(fp)
   12118:	e0bf6a17 	ldw	r2,-600(fp)
   1211c:	2088703a 	and	r4,r4,r2
   12120:	e17f6917 	ldw	r5,-604(fp)
   12124:	e0bf6a17 	ldw	r2,-600(fp)
   12128:	288ab03a 	or	r5,r5,r2
   1212c:	e0bf6b17 	ldw	r2,-596(fp)
   12130:	2884703a 	and	r2,r5,r2
   12134:	2084b03a 	or	r2,r4,r2
   12138:	1885883a 	add	r2,r3,r2
   1213c:	e0bfe915 	stw	r2,-92(fp)
   12140:	e0ff6c17 	ldw	r3,-592(fp)
   12144:	e0bfe817 	ldw	r2,-96(fp)
   12148:	1885883a 	add	r2,r3,r2
   1214c:	e0bf6c15 	stw	r2,-592(fp)
   12150:	e0ffe817 	ldw	r3,-96(fp)
   12154:	e0bfe917 	ldw	r2,-92(fp)
   12158:	1885883a 	add	r2,r3,r2
   1215c:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));
   12160:	e0ff6c17 	ldw	r3,-592(fp)
   12164:	00800184 	movi	r2,6
   12168:	1886583a 	ror	r3,r3,r2
   1216c:	e13f6c17 	ldw	r4,-592(fp)
   12170:	008002c4 	movi	r2,11
   12174:	2084583a 	ror	r2,r4,r2
   12178:	1886f03a 	xor	r3,r3,r2
   1217c:	e0bf6c17 	ldw	r2,-592(fp)
   12180:	100411fa 	roli	r2,r2,7
   12184:	1886f03a 	xor	r3,r3,r2
   12188:	e0bf6717 	ldw	r2,-612(fp)
   1218c:	1887883a 	add	r3,r3,r2
   12190:	e13f6d17 	ldw	r4,-588(fp)
   12194:	e0bf6617 	ldw	r2,-616(fp)
   12198:	2088f03a 	xor	r4,r4,r2
   1219c:	e0bf6c17 	ldw	r2,-592(fp)
   121a0:	2088703a 	and	r4,r4,r2
   121a4:	e0bf6617 	ldw	r2,-616(fp)
   121a8:	2084f03a 	xor	r2,r4,r2
   121ac:	1887883a 	add	r3,r3,r2
   121b0:	e0bf7a17 	ldw	r2,-536(fp)
   121b4:	100813fa 	roli	r4,r2,15
   121b8:	e0bf7a17 	ldw	r2,-536(fp)
   121bc:	1004137a 	roli	r2,r2,13
   121c0:	2088f03a 	xor	r4,r4,r2
   121c4:	e0bf7a17 	ldw	r2,-536(fp)
   121c8:	1004d2ba 	srli	r2,r2,10
   121cc:	2088f03a 	xor	r4,r4,r2
   121d0:	e0bf9b17 	ldw	r2,-404(fp)
   121d4:	2089883a 	add	r4,r4,r2
   121d8:	e17f8317 	ldw	r5,-500(fp)
   121dc:	008001c4 	movi	r2,7
   121e0:	288a583a 	ror	r5,r5,r2
   121e4:	e0bf8317 	ldw	r2,-500(fp)
   121e8:	100413ba 	roli	r2,r2,14
   121ec:	288af03a 	xor	r5,r5,r2
   121f0:	e0bf8317 	ldw	r2,-500(fp)
   121f4:	1004d0fa 	srli	r2,r2,3
   121f8:	2884f03a 	xor	r2,r5,r2
   121fc:	2085883a 	add	r2,r4,r2
   12200:	e13f8017 	ldw	r4,-512(fp)
   12204:	2085883a 	add	r2,r4,r2
   12208:	e0bf8015 	stw	r2,-512(fp)
   1220c:	e0bf8017 	ldw	r2,-512(fp)
   12210:	1887883a 	add	r3,r3,r2
   12214:	0096e774 	movhi	r2,23453
   12218:	10b293c4 	addi	r2,r2,-13745
   1221c:	1885883a 	add	r2,r3,r2
   12220:	e0bfea15 	stw	r2,-88(fp)
   12224:	e0ff6817 	ldw	r3,-608(fp)
   12228:	00800084 	movi	r2,2
   1222c:	1886583a 	ror	r3,r3,r2
   12230:	e13f6817 	ldw	r4,-608(fp)
   12234:	00800344 	movi	r2,13
   12238:	2084583a 	ror	r2,r4,r2
   1223c:	1886f03a 	xor	r3,r3,r2
   12240:	e0bf6817 	ldw	r2,-608(fp)
   12244:	100412ba 	roli	r2,r2,10
   12248:	1886f03a 	xor	r3,r3,r2
   1224c:	e13f6817 	ldw	r4,-608(fp)
   12250:	e0bf6917 	ldw	r2,-604(fp)
   12254:	2088703a 	and	r4,r4,r2
   12258:	e17f6817 	ldw	r5,-608(fp)
   1225c:	e0bf6917 	ldw	r2,-604(fp)
   12260:	288ab03a 	or	r5,r5,r2
   12264:	e0bf6a17 	ldw	r2,-600(fp)
   12268:	2884703a 	and	r2,r5,r2
   1226c:	2084b03a 	or	r2,r4,r2
   12270:	1885883a 	add	r2,r3,r2
   12274:	e0bfeb15 	stw	r2,-84(fp)
   12278:	e0ff6b17 	ldw	r3,-596(fp)
   1227c:	e0bfea17 	ldw	r2,-88(fp)
   12280:	1885883a 	add	r2,r3,r2
   12284:	e0bf6b15 	stw	r2,-596(fp)
   12288:	e0ffea17 	ldw	r3,-88(fp)
   1228c:	e0bfeb17 	ldw	r2,-84(fp)
   12290:	1885883a 	add	r2,r3,r2
   12294:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));
   12298:	e0ff6b17 	ldw	r3,-596(fp)
   1229c:	00800184 	movi	r2,6
   122a0:	1886583a 	ror	r3,r3,r2
   122a4:	e13f6b17 	ldw	r4,-596(fp)
   122a8:	008002c4 	movi	r2,11
   122ac:	2084583a 	ror	r2,r4,r2
   122b0:	1886f03a 	xor	r3,r3,r2
   122b4:	e0bf6b17 	ldw	r2,-596(fp)
   122b8:	100411fa 	roli	r2,r2,7
   122bc:	1886f03a 	xor	r3,r3,r2
   122c0:	e0bf6617 	ldw	r2,-616(fp)
   122c4:	1887883a 	add	r3,r3,r2
   122c8:	e13f6c17 	ldw	r4,-592(fp)
   122cc:	e0bf6d17 	ldw	r2,-588(fp)
   122d0:	2088f03a 	xor	r4,r4,r2
   122d4:	e0bf6b17 	ldw	r2,-596(fp)
   122d8:	2088703a 	and	r4,r4,r2
   122dc:	e0bf6d17 	ldw	r2,-588(fp)
   122e0:	2084f03a 	xor	r2,r4,r2
   122e4:	1887883a 	add	r3,r3,r2
   122e8:	e0bf7d17 	ldw	r2,-524(fp)
   122ec:	100813fa 	roli	r4,r2,15
   122f0:	e0bf7d17 	ldw	r2,-524(fp)
   122f4:	1004137a 	roli	r2,r2,13
   122f8:	2088f03a 	xor	r4,r4,r2
   122fc:	e0bf7d17 	ldw	r2,-524(fp)
   12300:	1004d2ba 	srli	r2,r2,10
   12304:	2088f03a 	xor	r4,r4,r2
   12308:	e0bf6e17 	ldw	r2,-584(fp)
   1230c:	2089883a 	add	r4,r4,r2
   12310:	e17f8617 	ldw	r5,-488(fp)
   12314:	008001c4 	movi	r2,7
   12318:	288a583a 	ror	r5,r5,r2
   1231c:	e0bf8617 	ldw	r2,-488(fp)
   12320:	100413ba 	roli	r2,r2,14
   12324:	288af03a 	xor	r5,r5,r2
   12328:	e0bf8617 	ldw	r2,-488(fp)
   1232c:	1004d0fa 	srli	r2,r2,3
   12330:	2884f03a 	xor	r2,r5,r2
   12334:	2085883a 	add	r2,r4,r2
   12338:	e13f8317 	ldw	r4,-500(fp)
   1233c:	2085883a 	add	r2,r4,r2
   12340:	e0bf8315 	stw	r2,-500(fp)
   12344:	e0bf8317 	ldw	r2,-500(fp)
   12348:	1887883a 	add	r3,r3,r2
   1234c:	009a0bb4 	movhi	r2,26670
   12350:	109bfcc4 	addi	r2,r2,28659
   12354:	1885883a 	add	r2,r3,r2
   12358:	e0bfec15 	stw	r2,-80(fp)
   1235c:	e0ff6717 	ldw	r3,-612(fp)
   12360:	00800084 	movi	r2,2
   12364:	1886583a 	ror	r3,r3,r2
   12368:	e13f6717 	ldw	r4,-612(fp)
   1236c:	00800344 	movi	r2,13
   12370:	2084583a 	ror	r2,r4,r2
   12374:	1886f03a 	xor	r3,r3,r2
   12378:	e0bf6717 	ldw	r2,-612(fp)
   1237c:	100412ba 	roli	r2,r2,10
   12380:	1886f03a 	xor	r3,r3,r2
   12384:	e13f6717 	ldw	r4,-612(fp)
   12388:	e0bf6817 	ldw	r2,-608(fp)
   1238c:	2088703a 	and	r4,r4,r2
   12390:	e17f6717 	ldw	r5,-612(fp)
   12394:	e0bf6817 	ldw	r2,-608(fp)
   12398:	288ab03a 	or	r5,r5,r2
   1239c:	e0bf6917 	ldw	r2,-604(fp)
   123a0:	2884703a 	and	r2,r5,r2
   123a4:	2084b03a 	or	r2,r4,r2
   123a8:	1885883a 	add	r2,r3,r2
   123ac:	e0bfed15 	stw	r2,-76(fp)
   123b0:	e0ff6a17 	ldw	r3,-600(fp)
   123b4:	e0bfec17 	ldw	r2,-80(fp)
   123b8:	1885883a 	add	r2,r3,r2
   123bc:	e0bf6a15 	stw	r2,-600(fp)
   123c0:	e0ffec17 	ldw	r3,-80(fp)
   123c4:	e0bfed17 	ldw	r2,-76(fp)
   123c8:	1885883a 	add	r2,r3,r2
   123cc:	e0bf6615 	stw	r2,-616(fp)
    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));
   123d0:	e0ff6a17 	ldw	r3,-600(fp)
   123d4:	00800184 	movi	r2,6
   123d8:	1886583a 	ror	r3,r3,r2
   123dc:	e13f6a17 	ldw	r4,-600(fp)
   123e0:	008002c4 	movi	r2,11
   123e4:	2084583a 	ror	r2,r4,r2
   123e8:	1886f03a 	xor	r3,r3,r2
   123ec:	e0bf6a17 	ldw	r2,-600(fp)
   123f0:	100411fa 	roli	r2,r2,7
   123f4:	1886f03a 	xor	r3,r3,r2
   123f8:	e0bf6d17 	ldw	r2,-588(fp)
   123fc:	1887883a 	add	r3,r3,r2
   12400:	e13f6b17 	ldw	r4,-596(fp)
   12404:	e0bf6c17 	ldw	r2,-592(fp)
   12408:	2088f03a 	xor	r4,r4,r2
   1240c:	e0bf6a17 	ldw	r2,-600(fp)
   12410:	2088703a 	and	r4,r4,r2
   12414:	e0bf6c17 	ldw	r2,-592(fp)
   12418:	2084f03a 	xor	r2,r4,r2
   1241c:	1887883a 	add	r3,r3,r2
   12420:	e0bf8017 	ldw	r2,-512(fp)
   12424:	100813fa 	roli	r4,r2,15
   12428:	e0bf8017 	ldw	r2,-512(fp)
   1242c:	1004137a 	roli	r2,r2,13
   12430:	2088f03a 	xor	r4,r4,r2
   12434:	e0bf8017 	ldw	r2,-512(fp)
   12438:	1004d2ba 	srli	r2,r2,10
   1243c:	2088f03a 	xor	r4,r4,r2
   12440:	e0bf7117 	ldw	r2,-572(fp)
   12444:	2089883a 	add	r4,r4,r2
   12448:	e17f8917 	ldw	r5,-476(fp)
   1244c:	008001c4 	movi	r2,7
   12450:	288a583a 	ror	r5,r5,r2
   12454:	e0bf8917 	ldw	r2,-476(fp)
   12458:	100413ba 	roli	r2,r2,14
   1245c:	288af03a 	xor	r5,r5,r2
   12460:	e0bf8917 	ldw	r2,-476(fp)
   12464:	1004d0fa 	srli	r2,r2,3
   12468:	2884f03a 	xor	r2,r5,r2
   1246c:	2085883a 	add	r2,r4,r2
   12470:	e13f8617 	ldw	r4,-488(fp)
   12474:	2085883a 	add	r2,r4,r2
   12478:	e0bf8615 	stw	r2,-488(fp)
   1247c:	e0bf8617 	ldw	r2,-488(fp)
   12480:	1887883a 	add	r3,r3,r2
   12484:	009d2434 	movhi	r2,29840
   12488:	10a0bb84 	addi	r2,r2,-32018
   1248c:	1885883a 	add	r2,r3,r2
   12490:	e0bfee15 	stw	r2,-72(fp)
   12494:	e0ff6617 	ldw	r3,-616(fp)
   12498:	00800084 	movi	r2,2
   1249c:	1886583a 	ror	r3,r3,r2
   124a0:	e13f6617 	ldw	r4,-616(fp)
   124a4:	00800344 	movi	r2,13
   124a8:	2084583a 	ror	r2,r4,r2
   124ac:	1886f03a 	xor	r3,r3,r2
   124b0:	e0bf6617 	ldw	r2,-616(fp)
   124b4:	100412ba 	roli	r2,r2,10
   124b8:	1886f03a 	xor	r3,r3,r2
   124bc:	e13f6617 	ldw	r4,-616(fp)
   124c0:	e0bf6717 	ldw	r2,-612(fp)
   124c4:	2088703a 	and	r4,r4,r2
   124c8:	e17f6617 	ldw	r5,-616(fp)
   124cc:	e0bf6717 	ldw	r2,-612(fp)
   124d0:	288ab03a 	or	r5,r5,r2
   124d4:	e0bf6817 	ldw	r2,-608(fp)
   124d8:	2884703a 	and	r2,r5,r2
   124dc:	2084b03a 	or	r2,r4,r2
   124e0:	1885883a 	add	r2,r3,r2
   124e4:	e0bfef15 	stw	r2,-68(fp)
   124e8:	e0ff6917 	ldw	r3,-604(fp)
   124ec:	e0bfee17 	ldw	r2,-72(fp)
   124f0:	1885883a 	add	r2,r3,r2
   124f4:	e0bf6915 	stw	r2,-604(fp)
   124f8:	e0ffee17 	ldw	r3,-72(fp)
   124fc:	e0bfef17 	ldw	r2,-68(fp)
   12500:	1885883a 	add	r2,r3,r2
   12504:	e0bf6d15 	stw	r2,-588(fp)
    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));
   12508:	e0ff6917 	ldw	r3,-604(fp)
   1250c:	00800184 	movi	r2,6
   12510:	1886583a 	ror	r3,r3,r2
   12514:	e13f6917 	ldw	r4,-604(fp)
   12518:	008002c4 	movi	r2,11
   1251c:	2084583a 	ror	r2,r4,r2
   12520:	1886f03a 	xor	r3,r3,r2
   12524:	e0bf6917 	ldw	r2,-604(fp)
   12528:	100411fa 	roli	r2,r2,7
   1252c:	1886f03a 	xor	r3,r3,r2
   12530:	e0bf6c17 	ldw	r2,-592(fp)
   12534:	1887883a 	add	r3,r3,r2
   12538:	e13f6a17 	ldw	r4,-600(fp)
   1253c:	e0bf6b17 	ldw	r2,-596(fp)
   12540:	2088f03a 	xor	r4,r4,r2
   12544:	e0bf6917 	ldw	r2,-604(fp)
   12548:	2088703a 	and	r4,r4,r2
   1254c:	e0bf6b17 	ldw	r2,-596(fp)
   12550:	2084f03a 	xor	r2,r4,r2
   12554:	1887883a 	add	r3,r3,r2
   12558:	e0bf8317 	ldw	r2,-500(fp)
   1255c:	100813fa 	roli	r4,r2,15
   12560:	e0bf8317 	ldw	r2,-500(fp)
   12564:	1004137a 	roli	r2,r2,13
   12568:	2088f03a 	xor	r4,r4,r2
   1256c:	e0bf8317 	ldw	r2,-500(fp)
   12570:	1004d2ba 	srli	r2,r2,10
   12574:	2088f03a 	xor	r4,r4,r2
   12578:	e0bf7417 	ldw	r2,-560(fp)
   1257c:	2089883a 	add	r4,r4,r2
   12580:	e17f8c17 	ldw	r5,-464(fp)
   12584:	008001c4 	movi	r2,7
   12588:	288a583a 	ror	r5,r5,r2
   1258c:	e0bf8c17 	ldw	r2,-464(fp)
   12590:	100413ba 	roli	r2,r2,14
   12594:	288af03a 	xor	r5,r5,r2
   12598:	e0bf8c17 	ldw	r2,-464(fp)
   1259c:	1004d0fa 	srli	r2,r2,3
   125a0:	2884f03a 	xor	r2,r5,r2
   125a4:	2085883a 	add	r2,r4,r2
   125a8:	e13f8917 	ldw	r4,-476(fp)
   125ac:	2085883a 	add	r2,r4,r2
   125b0:	e0bf8915 	stw	r2,-476(fp)
   125b4:	e0bf8917 	ldw	r2,-476(fp)
   125b8:	1887883a 	add	r3,r3,r2
   125bc:	009e2974 	movhi	r2,30885
   125c0:	1098dbc4 	addi	r2,r2,25455
   125c4:	1885883a 	add	r2,r3,r2
   125c8:	e0bff015 	stw	r2,-64(fp)
   125cc:	e0ff6d17 	ldw	r3,-588(fp)
   125d0:	00800084 	movi	r2,2
   125d4:	1886583a 	ror	r3,r3,r2
   125d8:	e13f6d17 	ldw	r4,-588(fp)
   125dc:	00800344 	movi	r2,13
   125e0:	2084583a 	ror	r2,r4,r2
   125e4:	1886f03a 	xor	r3,r3,r2
   125e8:	e0bf6d17 	ldw	r2,-588(fp)
   125ec:	100412ba 	roli	r2,r2,10
   125f0:	1886f03a 	xor	r3,r3,r2
   125f4:	e13f6d17 	ldw	r4,-588(fp)
   125f8:	e0bf6617 	ldw	r2,-616(fp)
   125fc:	2088703a 	and	r4,r4,r2
   12600:	e17f6d17 	ldw	r5,-588(fp)
   12604:	e0bf6617 	ldw	r2,-616(fp)
   12608:	288ab03a 	or	r5,r5,r2
   1260c:	e0bf6717 	ldw	r2,-612(fp)
   12610:	2884703a 	and	r2,r5,r2
   12614:	2084b03a 	or	r2,r4,r2
   12618:	1885883a 	add	r2,r3,r2
   1261c:	e0bff115 	stw	r2,-60(fp)
   12620:	e0ff6817 	ldw	r3,-608(fp)
   12624:	e0bff017 	ldw	r2,-64(fp)
   12628:	1885883a 	add	r2,r3,r2
   1262c:	e0bf6815 	stw	r2,-608(fp)
   12630:	e0fff017 	ldw	r3,-64(fp)
   12634:	e0bff117 	ldw	r2,-60(fp)
   12638:	1885883a 	add	r2,r3,r2
   1263c:	e0bf6c15 	stw	r2,-592(fp)
    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));
   12640:	e0ff6817 	ldw	r3,-608(fp)
   12644:	00800184 	movi	r2,6
   12648:	1886583a 	ror	r3,r3,r2
   1264c:	e13f6817 	ldw	r4,-608(fp)
   12650:	008002c4 	movi	r2,11
   12654:	2084583a 	ror	r2,r4,r2
   12658:	1886f03a 	xor	r3,r3,r2
   1265c:	e0bf6817 	ldw	r2,-608(fp)
   12660:	100411fa 	roli	r2,r2,7
   12664:	1886f03a 	xor	r3,r3,r2
   12668:	e0bf6b17 	ldw	r2,-596(fp)
   1266c:	1887883a 	add	r3,r3,r2
   12670:	e13f6917 	ldw	r4,-604(fp)
   12674:	e0bf6a17 	ldw	r2,-600(fp)
   12678:	2088f03a 	xor	r4,r4,r2
   1267c:	e0bf6817 	ldw	r2,-608(fp)
   12680:	2088703a 	and	r4,r4,r2
   12684:	e0bf6a17 	ldw	r2,-600(fp)
   12688:	2084f03a 	xor	r2,r4,r2
   1268c:	1887883a 	add	r3,r3,r2
   12690:	e0bf8617 	ldw	r2,-488(fp)
   12694:	100813fa 	roli	r4,r2,15
   12698:	e0bf8617 	ldw	r2,-488(fp)
   1269c:	1004137a 	roli	r2,r2,13
   126a0:	2088f03a 	xor	r4,r4,r2
   126a4:	e0bf8617 	ldw	r2,-488(fp)
   126a8:	1004d2ba 	srli	r2,r2,10
   126ac:	2088f03a 	xor	r4,r4,r2
   126b0:	e0bf7717 	ldw	r2,-548(fp)
   126b4:	2089883a 	add	r4,r4,r2
   126b8:	e17f8f17 	ldw	r5,-452(fp)
   126bc:	008001c4 	movi	r2,7
   126c0:	288a583a 	ror	r5,r5,r2
   126c4:	e0bf8f17 	ldw	r2,-452(fp)
   126c8:	100413ba 	roli	r2,r2,14
   126cc:	288af03a 	xor	r5,r5,r2
   126d0:	e0bf8f17 	ldw	r2,-452(fp)
   126d4:	1004d0fa 	srli	r2,r2,3
   126d8:	2884f03a 	xor	r2,r5,r2
   126dc:	2085883a 	add	r2,r4,r2
   126e0:	e13f8c17 	ldw	r4,-464(fp)
   126e4:	2085883a 	add	r2,r4,r2
   126e8:	e0bf8c15 	stw	r2,-464(fp)
   126ec:	e0bf8c17 	ldw	r2,-464(fp)
   126f0:	1887883a 	add	r3,r3,r2
   126f4:	00a13234 	movhi	r2,33992
   126f8:	109e0504 	addi	r2,r2,30740
   126fc:	1885883a 	add	r2,r3,r2
   12700:	e0bff215 	stw	r2,-56(fp)
   12704:	e0ff6c17 	ldw	r3,-592(fp)
   12708:	00800084 	movi	r2,2
   1270c:	1886583a 	ror	r3,r3,r2
   12710:	e13f6c17 	ldw	r4,-592(fp)
   12714:	00800344 	movi	r2,13
   12718:	2084583a 	ror	r2,r4,r2
   1271c:	1886f03a 	xor	r3,r3,r2
   12720:	e0bf6c17 	ldw	r2,-592(fp)
   12724:	100412ba 	roli	r2,r2,10
   12728:	1886f03a 	xor	r3,r3,r2
   1272c:	e13f6c17 	ldw	r4,-592(fp)
   12730:	e0bf6d17 	ldw	r2,-588(fp)
   12734:	2088703a 	and	r4,r4,r2
   12738:	e17f6c17 	ldw	r5,-592(fp)
   1273c:	e0bf6d17 	ldw	r2,-588(fp)
   12740:	288ab03a 	or	r5,r5,r2
   12744:	e0bf6617 	ldw	r2,-616(fp)
   12748:	2884703a 	and	r2,r5,r2
   1274c:	2084b03a 	or	r2,r4,r2
   12750:	1885883a 	add	r2,r3,r2
   12754:	e0bff315 	stw	r2,-52(fp)
   12758:	e0ff6717 	ldw	r3,-612(fp)
   1275c:	e0bff217 	ldw	r2,-56(fp)
   12760:	1885883a 	add	r2,r3,r2
   12764:	e0bf6715 	stw	r2,-612(fp)
   12768:	e0fff217 	ldw	r3,-56(fp)
   1276c:	e0bff317 	ldw	r2,-52(fp)
   12770:	1885883a 	add	r2,r3,r2
   12774:	e0bf6b15 	stw	r2,-596(fp)
    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));
   12778:	e0ff6717 	ldw	r3,-612(fp)
   1277c:	00800184 	movi	r2,6
   12780:	1886583a 	ror	r3,r3,r2
   12784:	e13f6717 	ldw	r4,-612(fp)
   12788:	008002c4 	movi	r2,11
   1278c:	2084583a 	ror	r2,r4,r2
   12790:	1886f03a 	xor	r3,r3,r2
   12794:	e0bf6717 	ldw	r2,-612(fp)
   12798:	100411fa 	roli	r2,r2,7
   1279c:	1886f03a 	xor	r3,r3,r2
   127a0:	e0bf6a17 	ldw	r2,-600(fp)
   127a4:	1887883a 	add	r3,r3,r2
   127a8:	e13f6817 	ldw	r4,-608(fp)
   127ac:	e0bf6917 	ldw	r2,-604(fp)
   127b0:	2088f03a 	xor	r4,r4,r2
   127b4:	e0bf6717 	ldw	r2,-612(fp)
   127b8:	2088703a 	and	r4,r4,r2
   127bc:	e0bf6917 	ldw	r2,-604(fp)
   127c0:	2084f03a 	xor	r2,r4,r2
   127c4:	1887883a 	add	r3,r3,r2
   127c8:	e0bf8917 	ldw	r2,-476(fp)
   127cc:	100813fa 	roli	r4,r2,15
   127d0:	e0bf8917 	ldw	r2,-476(fp)
   127d4:	1004137a 	roli	r2,r2,13
   127d8:	2088f03a 	xor	r4,r4,r2
   127dc:	e0bf8917 	ldw	r2,-476(fp)
   127e0:	1004d2ba 	srli	r2,r2,10
   127e4:	2088f03a 	xor	r4,r4,r2
   127e8:	e0bf7a17 	ldw	r2,-536(fp)
   127ec:	2089883a 	add	r4,r4,r2
   127f0:	e17f9217 	ldw	r5,-440(fp)
   127f4:	008001c4 	movi	r2,7
   127f8:	288a583a 	ror	r5,r5,r2
   127fc:	e0bf9217 	ldw	r2,-440(fp)
   12800:	100413ba 	roli	r2,r2,14
   12804:	288af03a 	xor	r5,r5,r2
   12808:	e0bf9217 	ldw	r2,-440(fp)
   1280c:	1004d0fa 	srli	r2,r2,3
   12810:	2884f03a 	xor	r2,r5,r2
   12814:	2085883a 	add	r2,r4,r2
   12818:	e13f8f17 	ldw	r4,-452(fp)
   1281c:	2085883a 	add	r2,r4,r2
   12820:	e0bf8f15 	stw	r2,-452(fp)
   12824:	e0bf8f17 	ldw	r2,-452(fp)
   12828:	1887883a 	add	r3,r3,r2
   1282c:	00a331f4 	movhi	r2,36039
   12830:	10808204 	addi	r2,r2,520
   12834:	1885883a 	add	r2,r3,r2
   12838:	e0bff415 	stw	r2,-48(fp)
   1283c:	e0ff6b17 	ldw	r3,-596(fp)
   12840:	00800084 	movi	r2,2
   12844:	1886583a 	ror	r3,r3,r2
   12848:	e13f6b17 	ldw	r4,-596(fp)
   1284c:	00800344 	movi	r2,13
   12850:	2084583a 	ror	r2,r4,r2
   12854:	1886f03a 	xor	r3,r3,r2
   12858:	e0bf6b17 	ldw	r2,-596(fp)
   1285c:	100412ba 	roli	r2,r2,10
   12860:	1886f03a 	xor	r3,r3,r2
   12864:	e13f6b17 	ldw	r4,-596(fp)
   12868:	e0bf6c17 	ldw	r2,-592(fp)
   1286c:	2088703a 	and	r4,r4,r2
   12870:	e17f6b17 	ldw	r5,-596(fp)
   12874:	e0bf6c17 	ldw	r2,-592(fp)
   12878:	288ab03a 	or	r5,r5,r2
   1287c:	e0bf6d17 	ldw	r2,-588(fp)
   12880:	2884703a 	and	r2,r5,r2
   12884:	2084b03a 	or	r2,r4,r2
   12888:	1885883a 	add	r2,r3,r2
   1288c:	e0bff515 	stw	r2,-44(fp)
   12890:	e0ff6617 	ldw	r3,-616(fp)
   12894:	e0bff417 	ldw	r2,-48(fp)
   12898:	1885883a 	add	r2,r3,r2
   1289c:	e0bf6615 	stw	r2,-616(fp)
   128a0:	e0fff417 	ldw	r3,-48(fp)
   128a4:	e0bff517 	ldw	r2,-44(fp)
   128a8:	1885883a 	add	r2,r3,r2
   128ac:	e0bf6a15 	stw	r2,-600(fp)
    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));
   128b0:	e0ff6617 	ldw	r3,-616(fp)
   128b4:	00800184 	movi	r2,6
   128b8:	1886583a 	ror	r3,r3,r2
   128bc:	e13f6617 	ldw	r4,-616(fp)
   128c0:	008002c4 	movi	r2,11
   128c4:	2084583a 	ror	r2,r4,r2
   128c8:	1886f03a 	xor	r3,r3,r2
   128cc:	e0bf6617 	ldw	r2,-616(fp)
   128d0:	100411fa 	roli	r2,r2,7
   128d4:	1886f03a 	xor	r3,r3,r2
   128d8:	e0bf6917 	ldw	r2,-604(fp)
   128dc:	1887883a 	add	r3,r3,r2
   128e0:	e13f6717 	ldw	r4,-612(fp)
   128e4:	e0bf6817 	ldw	r2,-608(fp)
   128e8:	2088f03a 	xor	r4,r4,r2
   128ec:	e0bf6617 	ldw	r2,-616(fp)
   128f0:	2088703a 	and	r4,r4,r2
   128f4:	e0bf6817 	ldw	r2,-608(fp)
   128f8:	2084f03a 	xor	r2,r4,r2
   128fc:	1887883a 	add	r3,r3,r2
   12900:	e0bf8c17 	ldw	r2,-464(fp)
   12904:	100813fa 	roli	r4,r2,15
   12908:	e0bf8c17 	ldw	r2,-464(fp)
   1290c:	1004137a 	roli	r2,r2,13
   12910:	2088f03a 	xor	r4,r4,r2
   12914:	e0bf8c17 	ldw	r2,-464(fp)
   12918:	1004d2ba 	srli	r2,r2,10
   1291c:	2088f03a 	xor	r4,r4,r2
   12920:	e0bf7d17 	ldw	r2,-524(fp)
   12924:	2089883a 	add	r4,r4,r2
   12928:	e17f9517 	ldw	r5,-428(fp)
   1292c:	008001c4 	movi	r2,7
   12930:	288a583a 	ror	r5,r5,r2
   12934:	e0bf9517 	ldw	r2,-428(fp)
   12938:	100413ba 	roli	r2,r2,14
   1293c:	288af03a 	xor	r5,r5,r2
   12940:	e0bf9517 	ldw	r2,-428(fp)
   12944:	1004d0fa 	srli	r2,r2,3
   12948:	2884f03a 	xor	r2,r5,r2
   1294c:	2085883a 	add	r2,r4,r2
   12950:	e13f9217 	ldw	r4,-440(fp)
   12954:	2085883a 	add	r2,r4,r2
   12958:	e0bf9215 	stw	r2,-440(fp)
   1295c:	e0bf9217 	ldw	r2,-440(fp)
   12960:	1887883a 	add	r3,r3,r2
   12964:	00a42ff4 	movhi	r2,37055
   12968:	10bffe84 	addi	r2,r2,-6
   1296c:	1885883a 	add	r2,r3,r2
   12970:	e0bff615 	stw	r2,-40(fp)
   12974:	e0ff6a17 	ldw	r3,-600(fp)
   12978:	00800084 	movi	r2,2
   1297c:	1886583a 	ror	r3,r3,r2
   12980:	e13f6a17 	ldw	r4,-600(fp)
   12984:	00800344 	movi	r2,13
   12988:	2084583a 	ror	r2,r4,r2
   1298c:	1886f03a 	xor	r3,r3,r2
   12990:	e0bf6a17 	ldw	r2,-600(fp)
   12994:	100412ba 	roli	r2,r2,10
   12998:	1886f03a 	xor	r3,r3,r2
   1299c:	e13f6a17 	ldw	r4,-600(fp)
   129a0:	e0bf6b17 	ldw	r2,-596(fp)
   129a4:	2088703a 	and	r4,r4,r2
   129a8:	e17f6a17 	ldw	r5,-600(fp)
   129ac:	e0bf6b17 	ldw	r2,-596(fp)
   129b0:	288ab03a 	or	r5,r5,r2
   129b4:	e0bf6c17 	ldw	r2,-592(fp)
   129b8:	2884703a 	and	r2,r5,r2
   129bc:	2084b03a 	or	r2,r4,r2
   129c0:	1885883a 	add	r2,r3,r2
   129c4:	e0bff715 	stw	r2,-36(fp)
   129c8:	e0ff6d17 	ldw	r3,-588(fp)
   129cc:	e0bff617 	ldw	r2,-40(fp)
   129d0:	1885883a 	add	r2,r3,r2
   129d4:	e0bf6d15 	stw	r2,-588(fp)
   129d8:	e0fff617 	ldw	r3,-40(fp)
   129dc:	e0bff717 	ldw	r2,-36(fp)
   129e0:	1885883a 	add	r2,r3,r2
   129e4:	e0bf6915 	stw	r2,-604(fp)
    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));
   129e8:	e0ff6d17 	ldw	r3,-588(fp)
   129ec:	00800184 	movi	r2,6
   129f0:	1886583a 	ror	r3,r3,r2
   129f4:	e13f6d17 	ldw	r4,-588(fp)
   129f8:	008002c4 	movi	r2,11
   129fc:	2084583a 	ror	r2,r4,r2
   12a00:	1886f03a 	xor	r3,r3,r2
   12a04:	e0bf6d17 	ldw	r2,-588(fp)
   12a08:	100411fa 	roli	r2,r2,7
   12a0c:	1886f03a 	xor	r3,r3,r2
   12a10:	e0bf6817 	ldw	r2,-608(fp)
   12a14:	1887883a 	add	r3,r3,r2
   12a18:	e13f6617 	ldw	r4,-616(fp)
   12a1c:	e0bf6717 	ldw	r2,-612(fp)
   12a20:	2088f03a 	xor	r4,r4,r2
   12a24:	e0bf6d17 	ldw	r2,-588(fp)
   12a28:	2088703a 	and	r4,r4,r2
   12a2c:	e0bf6717 	ldw	r2,-612(fp)
   12a30:	2084f03a 	xor	r2,r4,r2
   12a34:	1887883a 	add	r3,r3,r2
   12a38:	e0bf8f17 	ldw	r2,-452(fp)
   12a3c:	100813fa 	roli	r4,r2,15
   12a40:	e0bf8f17 	ldw	r2,-452(fp)
   12a44:	1004137a 	roli	r2,r2,13
   12a48:	2088f03a 	xor	r4,r4,r2
   12a4c:	e0bf8f17 	ldw	r2,-452(fp)
   12a50:	1004d2ba 	srli	r2,r2,10
   12a54:	2088f03a 	xor	r4,r4,r2
   12a58:	e0bf8017 	ldw	r2,-512(fp)
   12a5c:	2089883a 	add	r4,r4,r2
   12a60:	e17f9817 	ldw	r5,-416(fp)
   12a64:	008001c4 	movi	r2,7
   12a68:	288a583a 	ror	r5,r5,r2
   12a6c:	e0bf9817 	ldw	r2,-416(fp)
   12a70:	100413ba 	roli	r2,r2,14
   12a74:	288af03a 	xor	r5,r5,r2
   12a78:	e0bf9817 	ldw	r2,-416(fp)
   12a7c:	1004d0fa 	srli	r2,r2,3
   12a80:	2884f03a 	xor	r2,r5,r2
   12a84:	2085883a 	add	r2,r4,r2
   12a88:	e13f9517 	ldw	r4,-428(fp)
   12a8c:	2085883a 	add	r2,r4,r2
   12a90:	e0bf9515 	stw	r2,-428(fp)
   12a94:	e0bf9517 	ldw	r2,-428(fp)
   12a98:	1887883a 	add	r3,r3,r2
   12a9c:	00a91434 	movhi	r2,42064
   12aa0:	109b3ac4 	addi	r2,r2,27883
   12aa4:	1885883a 	add	r2,r3,r2
   12aa8:	e0bff815 	stw	r2,-32(fp)
   12aac:	e0ff6917 	ldw	r3,-604(fp)
   12ab0:	00800084 	movi	r2,2
   12ab4:	1886583a 	ror	r3,r3,r2
   12ab8:	e13f6917 	ldw	r4,-604(fp)
   12abc:	00800344 	movi	r2,13
   12ac0:	2084583a 	ror	r2,r4,r2
   12ac4:	1886f03a 	xor	r3,r3,r2
   12ac8:	e0bf6917 	ldw	r2,-604(fp)
   12acc:	100412ba 	roli	r2,r2,10
   12ad0:	1886f03a 	xor	r3,r3,r2
   12ad4:	e13f6917 	ldw	r4,-604(fp)
   12ad8:	e0bf6a17 	ldw	r2,-600(fp)
   12adc:	2088703a 	and	r4,r4,r2
   12ae0:	e17f6917 	ldw	r5,-604(fp)
   12ae4:	e0bf6a17 	ldw	r2,-600(fp)
   12ae8:	288ab03a 	or	r5,r5,r2
   12aec:	e0bf6b17 	ldw	r2,-596(fp)
   12af0:	2884703a 	and	r2,r5,r2
   12af4:	2084b03a 	or	r2,r4,r2
   12af8:	1885883a 	add	r2,r3,r2
   12afc:	e0bff915 	stw	r2,-28(fp)
   12b00:	e0ff6c17 	ldw	r3,-592(fp)
   12b04:	e0bff817 	ldw	r2,-32(fp)
   12b08:	1885883a 	add	r2,r3,r2
   12b0c:	e0bf6c15 	stw	r2,-592(fp)
   12b10:	e0fff817 	ldw	r3,-32(fp)
   12b14:	e0bff917 	ldw	r2,-28(fp)
   12b18:	1885883a 	add	r2,r3,r2
   12b1c:	e0bf6815 	stw	r2,-608(fp)
    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));
   12b20:	e0ff6c17 	ldw	r3,-592(fp)
   12b24:	00800184 	movi	r2,6
   12b28:	1886583a 	ror	r3,r3,r2
   12b2c:	e13f6c17 	ldw	r4,-592(fp)
   12b30:	008002c4 	movi	r2,11
   12b34:	2084583a 	ror	r2,r4,r2
   12b38:	1886f03a 	xor	r3,r3,r2
   12b3c:	e0bf6c17 	ldw	r2,-592(fp)
   12b40:	100411fa 	roli	r2,r2,7
   12b44:	1886f03a 	xor	r3,r3,r2
   12b48:	e0bf6717 	ldw	r2,-612(fp)
   12b4c:	1887883a 	add	r3,r3,r2
   12b50:	e13f6d17 	ldw	r4,-588(fp)
   12b54:	e0bf6617 	ldw	r2,-616(fp)
   12b58:	2088f03a 	xor	r4,r4,r2
   12b5c:	e0bf6c17 	ldw	r2,-592(fp)
   12b60:	2088703a 	and	r4,r4,r2
   12b64:	e0bf6617 	ldw	r2,-616(fp)
   12b68:	2084f03a 	xor	r2,r4,r2
   12b6c:	1887883a 	add	r3,r3,r2
   12b70:	e0bf9217 	ldw	r2,-440(fp)
   12b74:	100813fa 	roli	r4,r2,15
   12b78:	e0bf9217 	ldw	r2,-440(fp)
   12b7c:	1004137a 	roli	r2,r2,13
   12b80:	2088f03a 	xor	r4,r4,r2
   12b84:	e0bf9217 	ldw	r2,-440(fp)
   12b88:	1004d2ba 	srli	r2,r2,10
   12b8c:	2088f03a 	xor	r4,r4,r2
   12b90:	e0bf9817 	ldw	r2,-416(fp)
   12b94:	2089883a 	add	r4,r4,r2
   12b98:	e0bf8317 	ldw	r2,-500(fp)
   12b9c:	2089883a 	add	r4,r4,r2
   12ba0:	e17f9b17 	ldw	r5,-404(fp)
   12ba4:	008001c4 	movi	r2,7
   12ba8:	288a583a 	ror	r5,r5,r2
   12bac:	e0bf9b17 	ldw	r2,-404(fp)
   12bb0:	100413ba 	roli	r2,r2,14
   12bb4:	288af03a 	xor	r5,r5,r2
   12bb8:	e0bf9b17 	ldw	r2,-404(fp)
   12bbc:	1004d0fa 	srli	r2,r2,3
   12bc0:	2884f03a 	xor	r2,r5,r2
   12bc4:	2085883a 	add	r2,r4,r2
   12bc8:	1887883a 	add	r3,r3,r2
   12bcc:	00afbeb4 	movhi	r2,48890
   12bd0:	10a8fdc4 	addi	r2,r2,-23561
   12bd4:	1885883a 	add	r2,r3,r2
   12bd8:	e0bffa15 	stw	r2,-24(fp)
   12bdc:	e0ff6817 	ldw	r3,-608(fp)
   12be0:	00800084 	movi	r2,2
   12be4:	1886583a 	ror	r3,r3,r2
   12be8:	e13f6817 	ldw	r4,-608(fp)
   12bec:	00800344 	movi	r2,13
   12bf0:	2084583a 	ror	r2,r4,r2
   12bf4:	1886f03a 	xor	r3,r3,r2
   12bf8:	e0bf6817 	ldw	r2,-608(fp)
   12bfc:	100412ba 	roli	r2,r2,10
   12c00:	1886f03a 	xor	r3,r3,r2
   12c04:	e13f6817 	ldw	r4,-608(fp)
   12c08:	e0bf6917 	ldw	r2,-604(fp)
   12c0c:	2088703a 	and	r4,r4,r2
   12c10:	e17f6817 	ldw	r5,-608(fp)
   12c14:	e0bf6917 	ldw	r2,-604(fp)
   12c18:	288ab03a 	or	r5,r5,r2
   12c1c:	e0bf6a17 	ldw	r2,-600(fp)
   12c20:	2884703a 	and	r2,r5,r2
   12c24:	2084b03a 	or	r2,r4,r2
   12c28:	1885883a 	add	r2,r3,r2
   12c2c:	e0bffb15 	stw	r2,-20(fp)
   12c30:	e0ff6b17 	ldw	r3,-596(fp)
   12c34:	e0bffa17 	ldw	r2,-24(fp)
   12c38:	1885883a 	add	r2,r3,r2
   12c3c:	e0bf6b15 	stw	r2,-596(fp)
   12c40:	e0fffa17 	ldw	r3,-24(fp)
   12c44:	e0bffb17 	ldw	r2,-20(fp)
   12c48:	1885883a 	add	r2,r3,r2
   12c4c:	e0bf6715 	stw	r2,-612(fp)
    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));
   12c50:	e0ff6b17 	ldw	r3,-596(fp)
   12c54:	00800184 	movi	r2,6
   12c58:	1886583a 	ror	r3,r3,r2
   12c5c:	e13f6b17 	ldw	r4,-596(fp)
   12c60:	008002c4 	movi	r2,11
   12c64:	2084583a 	ror	r2,r4,r2
   12c68:	1886f03a 	xor	r3,r3,r2
   12c6c:	e0bf6b17 	ldw	r2,-596(fp)
   12c70:	100411fa 	roli	r2,r2,7
   12c74:	1886f03a 	xor	r3,r3,r2
   12c78:	e0bf6617 	ldw	r2,-616(fp)
   12c7c:	1887883a 	add	r3,r3,r2
   12c80:	e13f6c17 	ldw	r4,-592(fp)
   12c84:	e0bf6d17 	ldw	r2,-588(fp)
   12c88:	2088f03a 	xor	r4,r4,r2
   12c8c:	e0bf6b17 	ldw	r2,-596(fp)
   12c90:	2088703a 	and	r4,r4,r2
   12c94:	e0bf6d17 	ldw	r2,-588(fp)
   12c98:	2084f03a 	xor	r2,r4,r2
   12c9c:	1887883a 	add	r3,r3,r2
   12ca0:	e0bf9517 	ldw	r2,-428(fp)
   12ca4:	100813fa 	roli	r4,r2,15
   12ca8:	e0bf9517 	ldw	r2,-428(fp)
   12cac:	1004137a 	roli	r2,r2,13
   12cb0:	2088f03a 	xor	r4,r4,r2
   12cb4:	e0bf9517 	ldw	r2,-428(fp)
   12cb8:	1004d2ba 	srli	r2,r2,10
   12cbc:	2088f03a 	xor	r4,r4,r2
   12cc0:	e0bf9b17 	ldw	r2,-404(fp)
   12cc4:	2089883a 	add	r4,r4,r2
   12cc8:	e0bf8617 	ldw	r2,-488(fp)
   12ccc:	2089883a 	add	r4,r4,r2
   12cd0:	e17f6e17 	ldw	r5,-584(fp)
   12cd4:	008001c4 	movi	r2,7
   12cd8:	288a583a 	ror	r5,r5,r2
   12cdc:	e0bf6e17 	ldw	r2,-584(fp)
   12ce0:	100413ba 	roli	r2,r2,14
   12ce4:	288af03a 	xor	r5,r5,r2
   12ce8:	e0bf6e17 	ldw	r2,-584(fp)
   12cec:	1004d0fa 	srli	r2,r2,3
   12cf0:	2884f03a 	xor	r2,r5,r2
   12cf4:	2085883a 	add	r2,r4,r2
   12cf8:	1887883a 	add	r3,r3,r2
   12cfc:	00b19c74 	movhi	r2,50801
   12d00:	109e3c84 	addi	r2,r2,30962
   12d04:	1885883a 	add	r2,r3,r2
   12d08:	e0bffc15 	stw	r2,-16(fp)
   12d0c:	e0ff6717 	ldw	r3,-612(fp)
   12d10:	00800084 	movi	r2,2
   12d14:	1886583a 	ror	r3,r3,r2
   12d18:	e13f6717 	ldw	r4,-612(fp)
   12d1c:	00800344 	movi	r2,13
   12d20:	2084583a 	ror	r2,r4,r2
   12d24:	1886f03a 	xor	r3,r3,r2
   12d28:	e0bf6717 	ldw	r2,-612(fp)
   12d2c:	100412ba 	roli	r2,r2,10
   12d30:	1886f03a 	xor	r3,r3,r2
   12d34:	e13f6717 	ldw	r4,-612(fp)
   12d38:	e0bf6817 	ldw	r2,-608(fp)
   12d3c:	2088703a 	and	r4,r4,r2
   12d40:	e17f6717 	ldw	r5,-612(fp)
   12d44:	e0bf6817 	ldw	r2,-608(fp)
   12d48:	288ab03a 	or	r5,r5,r2
   12d4c:	e0bf6917 	ldw	r2,-604(fp)
   12d50:	2884703a 	and	r2,r5,r2
   12d54:	2084b03a 	or	r2,r4,r2
   12d58:	1885883a 	add	r2,r3,r2
   12d5c:	e0bffd15 	stw	r2,-12(fp)
   12d60:	e0ff6a17 	ldw	r3,-600(fp)
   12d64:	e0bffc17 	ldw	r2,-16(fp)
   12d68:	1885883a 	add	r2,r3,r2
   12d6c:	e0bf6a15 	stw	r2,-600(fp)
   12d70:	e0fffc17 	ldw	r3,-16(fp)
   12d74:	e0bffd17 	ldw	r2,-12(fp)
   12d78:	1885883a 	add	r2,r3,r2
   12d7c:	e0bf6615 	stw	r2,-616(fp)

    s[0] += a;
   12d80:	e0bffe17 	ldw	r2,-8(fp)
   12d84:	10c00017 	ldw	r3,0(r2)
   12d88:	e0bf6617 	ldw	r2,-616(fp)
   12d8c:	1887883a 	add	r3,r3,r2
   12d90:	e0bffe17 	ldw	r2,-8(fp)
   12d94:	10c00015 	stw	r3,0(r2)
    s[1] += b;
   12d98:	e0bffe17 	ldw	r2,-8(fp)
   12d9c:	10800104 	addi	r2,r2,4
   12da0:	e0fffe17 	ldw	r3,-8(fp)
   12da4:	18c00104 	addi	r3,r3,4
   12da8:	19000017 	ldw	r4,0(r3)
   12dac:	e0ff6717 	ldw	r3,-612(fp)
   12db0:	20c7883a 	add	r3,r4,r3
   12db4:	10c00015 	stw	r3,0(r2)
    s[2] += c;
   12db8:	e0bffe17 	ldw	r2,-8(fp)
   12dbc:	10800204 	addi	r2,r2,8
   12dc0:	e0fffe17 	ldw	r3,-8(fp)
   12dc4:	18c00204 	addi	r3,r3,8
   12dc8:	19000017 	ldw	r4,0(r3)
   12dcc:	e0ff6817 	ldw	r3,-608(fp)
   12dd0:	20c7883a 	add	r3,r4,r3
   12dd4:	10c00015 	stw	r3,0(r2)
    s[3] += d;
   12dd8:	e0bffe17 	ldw	r2,-8(fp)
   12ddc:	10800304 	addi	r2,r2,12
   12de0:	e0fffe17 	ldw	r3,-8(fp)
   12de4:	18c00304 	addi	r3,r3,12
   12de8:	19000017 	ldw	r4,0(r3)
   12dec:	e0ff6917 	ldw	r3,-604(fp)
   12df0:	20c7883a 	add	r3,r4,r3
   12df4:	10c00015 	stw	r3,0(r2)
    s[4] += e;
   12df8:	e0bffe17 	ldw	r2,-8(fp)
   12dfc:	10800404 	addi	r2,r2,16
   12e00:	e0fffe17 	ldw	r3,-8(fp)
   12e04:	18c00404 	addi	r3,r3,16
   12e08:	19000017 	ldw	r4,0(r3)
   12e0c:	e0ff6a17 	ldw	r3,-600(fp)
   12e10:	20c7883a 	add	r3,r4,r3
   12e14:	10c00015 	stw	r3,0(r2)
    s[5] += f;
   12e18:	e0bffe17 	ldw	r2,-8(fp)
   12e1c:	10800504 	addi	r2,r2,20
   12e20:	e0fffe17 	ldw	r3,-8(fp)
   12e24:	18c00504 	addi	r3,r3,20
   12e28:	19000017 	ldw	r4,0(r3)
   12e2c:	e0ff6b17 	ldw	r3,-596(fp)
   12e30:	20c7883a 	add	r3,r4,r3
   12e34:	10c00015 	stw	r3,0(r2)
    s[6] += g;
   12e38:	e0bffe17 	ldw	r2,-8(fp)
   12e3c:	10800604 	addi	r2,r2,24
   12e40:	e0fffe17 	ldw	r3,-8(fp)
   12e44:	18c00604 	addi	r3,r3,24
   12e48:	19000017 	ldw	r4,0(r3)
   12e4c:	e0ff6c17 	ldw	r3,-592(fp)
   12e50:	20c7883a 	add	r3,r4,r3
   12e54:	10c00015 	stw	r3,0(r2)
    s[7] += h;
   12e58:	e0bffe17 	ldw	r2,-8(fp)
   12e5c:	10800704 	addi	r2,r2,28
   12e60:	e0fffe17 	ldw	r3,-8(fp)
   12e64:	18c00704 	addi	r3,r3,28
   12e68:	19000017 	ldw	r4,0(r3)
   12e6c:	e0ff6d17 	ldw	r3,-588(fp)
   12e70:	20c7883a 	add	r3,r4,r3
   12e74:	10c00015 	stw	r3,0(r2)
}
   12e78:	0001883a 	nop
   12e7c:	e037883a 	mov	sp,fp
   12e80:	df000017 	ldw	fp,0(sp)
   12e84:	dec00104 	addi	sp,sp,4
   12e88:	f800283a 	ret

00012e8c <secp256k1_sha256_write>:

static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {
   12e8c:	defffa04 	addi	sp,sp,-24
   12e90:	dfc00515 	stw	ra,20(sp)
   12e94:	df000415 	stw	fp,16(sp)
   12e98:	df000404 	addi	fp,sp,16
   12e9c:	e13ffd15 	stw	r4,-12(fp)
   12ea0:	e17ffe15 	stw	r5,-8(fp)
   12ea4:	e1bfff15 	stw	r6,-4(fp)
    size_t bufsize = hash->bytes & 0x3F;
   12ea8:	e0bffd17 	ldw	r2,-12(fp)
   12eac:	10801817 	ldw	r2,96(r2)
   12eb0:	10800fcc 	andi	r2,r2,63
   12eb4:	e0bffc15 	stw	r2,-16(fp)
    hash->bytes += len;
   12eb8:	e0bffd17 	ldw	r2,-12(fp)
   12ebc:	10c01817 	ldw	r3,96(r2)
   12ec0:	e0bfff17 	ldw	r2,-4(fp)
   12ec4:	1887883a 	add	r3,r3,r2
   12ec8:	e0bffd17 	ldw	r2,-12(fp)
   12ecc:	10c01815 	stw	r3,96(r2)
    while (bufsize + len >= 64) {
   12ed0:	00001c06 	br	12f44 <secp256k1_sha256_write+0xb8>
        /* Fill the buffer, and process it. */
        memcpy(((unsigned char*)hash->buf) + bufsize, data, 64 - bufsize);
   12ed4:	e0bffd17 	ldw	r2,-12(fp)
   12ed8:	10c00804 	addi	r3,r2,32
   12edc:	e0bffc17 	ldw	r2,-16(fp)
   12ee0:	1889883a 	add	r4,r3,r2
   12ee4:	00c01004 	movi	r3,64
   12ee8:	e0bffc17 	ldw	r2,-16(fp)
   12eec:	1885c83a 	sub	r2,r3,r2
   12ef0:	100d883a 	mov	r6,r2
   12ef4:	e17ffe17 	ldw	r5,-8(fp)
   12ef8:	00463980 	call	46398 <memcpy>
        data += 64 - bufsize;
   12efc:	00c01004 	movi	r3,64
   12f00:	e0bffc17 	ldw	r2,-16(fp)
   12f04:	1885c83a 	sub	r2,r3,r2
   12f08:	e0fffe17 	ldw	r3,-8(fp)
   12f0c:	1885883a 	add	r2,r3,r2
   12f10:	e0bffe15 	stw	r2,-8(fp)
        len -= 64 - bufsize;
   12f14:	e0fffc17 	ldw	r3,-16(fp)
   12f18:	e0bfff17 	ldw	r2,-4(fp)
   12f1c:	1885883a 	add	r2,r3,r2
   12f20:	10bff004 	addi	r2,r2,-64
   12f24:	e0bfff15 	stw	r2,-4(fp)
        secp256k1_sha256_transform(hash->s, hash->buf);
   12f28:	e0fffd17 	ldw	r3,-12(fp)
   12f2c:	e0bffd17 	ldw	r2,-12(fp)
   12f30:	10800804 	addi	r2,r2,32
   12f34:	100b883a 	mov	r5,r2
   12f38:	1809883a 	mov	r4,r3
   12f3c:	000df6c0 	call	df6c <secp256k1_sha256_transform>
        bufsize = 0;
   12f40:	e03ffc15 	stw	zero,-16(fp)
}

static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {
    size_t bufsize = hash->bytes & 0x3F;
    hash->bytes += len;
    while (bufsize + len >= 64) {
   12f44:	e0fffc17 	ldw	r3,-16(fp)
   12f48:	e0bfff17 	ldw	r2,-4(fp)
   12f4c:	1885883a 	add	r2,r3,r2
   12f50:	10801028 	cmpgeui	r2,r2,64
   12f54:	103fdf1e 	bne	r2,zero,12ed4 <__alt_mem_epcs_flash_controller+0xfe009ed4>
        data += 64 - bufsize;
        len -= 64 - bufsize;
        secp256k1_sha256_transform(hash->s, hash->buf);
        bufsize = 0;
    }
    if (len) {
   12f58:	e0bfff17 	ldw	r2,-4(fp)
   12f5c:	10000826 	beq	r2,zero,12f80 <secp256k1_sha256_write+0xf4>
        /* Fill the buffer with what remains. */
        memcpy(((unsigned char*)hash->buf) + bufsize, data, len);
   12f60:	e0bffd17 	ldw	r2,-12(fp)
   12f64:	10c00804 	addi	r3,r2,32
   12f68:	e0bffc17 	ldw	r2,-16(fp)
   12f6c:	1885883a 	add	r2,r3,r2
   12f70:	e1bfff17 	ldw	r6,-4(fp)
   12f74:	e17ffe17 	ldw	r5,-8(fp)
   12f78:	1009883a 	mov	r4,r2
   12f7c:	00463980 	call	46398 <memcpy>
    }
}
   12f80:	0001883a 	nop
   12f84:	e037883a 	mov	sp,fp
   12f88:	dfc00117 	ldw	ra,4(sp)
   12f8c:	df000017 	ldw	fp,0(sp)
   12f90:	dec00204 	addi	sp,sp,8
   12f94:	f800283a 	ret

00012f98 <secp256k1_sha256_finalize>:

static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {
   12f98:	defff104 	addi	sp,sp,-60
   12f9c:	dfc00e15 	stw	ra,56(sp)
   12fa0:	df000d15 	stw	fp,52(sp)
   12fa4:	df000d04 	addi	fp,sp,52
   12fa8:	e13ffe15 	stw	r4,-8(fp)
   12fac:	e17fff15 	stw	r5,-4(fp)
    static const unsigned char pad[64] = {0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t sizedesc[2];
    uint32_t out[8];
    int i = 0;
   12fb0:	e03ff315 	stw	zero,-52(fp)
    sizedesc[0] = BE32(hash->bytes >> 29);
   12fb4:	e0bffe17 	ldw	r2,-8(fp)
   12fb8:	10801817 	ldw	r2,96(r2)
   12fbc:	1004d77a 	srli	r2,r2,29
   12fc0:	1004963a 	slli	r2,r2,24
   12fc4:	e0bff415 	stw	r2,-48(fp)
    sizedesc[1] = BE32(hash->bytes << 3);
   12fc8:	e0bffe17 	ldw	r2,-8(fp)
   12fcc:	10801817 	ldw	r2,96(r2)
   12fd0:	100696fa 	slli	r3,r2,27
   12fd4:	e0bffe17 	ldw	r2,-8(fp)
   12fd8:	10801817 	ldw	r2,96(r2)
   12fdc:	100490fa 	slli	r2,r2,3
   12fe0:	10bfc00c 	andi	r2,r2,65280
   12fe4:	1004923a 	slli	r2,r2,8
   12fe8:	1886b03a 	or	r3,r3,r2
   12fec:	e0bffe17 	ldw	r2,-8(fp)
   12ff0:	10801817 	ldw	r2,96(r2)
   12ff4:	100490fa 	slli	r2,r2,3
   12ff8:	10803fec 	andhi	r2,r2,255
   12ffc:	1004d23a 	srli	r2,r2,8
   13000:	1886b03a 	or	r3,r3,r2
   13004:	e0bffe17 	ldw	r2,-8(fp)
   13008:	10801817 	ldw	r2,96(r2)
   1300c:	100490fa 	slli	r2,r2,3
   13010:	1004d63a 	srli	r2,r2,24
   13014:	1884b03a 	or	r2,r3,r2
   13018:	e0bff515 	stw	r2,-44(fp)
    secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));
   1301c:	e0bffe17 	ldw	r2,-8(fp)
   13020:	10801817 	ldw	r2,96(r2)
   13024:	00c01dc4 	movi	r3,119
   13028:	1885c83a 	sub	r2,r3,r2
   1302c:	10800fcc 	andi	r2,r2,63
   13030:	10800044 	addi	r2,r2,1
   13034:	100d883a 	mov	r6,r2
   13038:	01400174 	movhi	r5,5
   1303c:	29597b04 	addi	r5,r5,26092
   13040:	e13ffe17 	ldw	r4,-8(fp)
   13044:	0012e8c0 	call	12e8c <secp256k1_sha256_write>
    secp256k1_sha256_write(hash, (const unsigned char*)sizedesc, 8);
   13048:	e0bff404 	addi	r2,fp,-48
   1304c:	01800204 	movi	r6,8
   13050:	100b883a 	mov	r5,r2
   13054:	e13ffe17 	ldw	r4,-8(fp)
   13058:	0012e8c0 	call	12e8c <secp256k1_sha256_write>
    for (i = 0; i < 8; i++) {
   1305c:	e03ff315 	stw	zero,-52(fp)
   13060:	00003106 	br	13128 <secp256k1_sha256_finalize+0x190>
        out[i] = BE32(hash->s[i]);
   13064:	e0fffe17 	ldw	r3,-8(fp)
   13068:	e0bff317 	ldw	r2,-52(fp)
   1306c:	1085883a 	add	r2,r2,r2
   13070:	1085883a 	add	r2,r2,r2
   13074:	1885883a 	add	r2,r3,r2
   13078:	10800017 	ldw	r2,0(r2)
   1307c:	1006963a 	slli	r3,r2,24
   13080:	e13ffe17 	ldw	r4,-8(fp)
   13084:	e0bff317 	ldw	r2,-52(fp)
   13088:	1085883a 	add	r2,r2,r2
   1308c:	1085883a 	add	r2,r2,r2
   13090:	2085883a 	add	r2,r4,r2
   13094:	10800017 	ldw	r2,0(r2)
   13098:	10bfc00c 	andi	r2,r2,65280
   1309c:	1004923a 	slli	r2,r2,8
   130a0:	1886b03a 	or	r3,r3,r2
   130a4:	e13ffe17 	ldw	r4,-8(fp)
   130a8:	e0bff317 	ldw	r2,-52(fp)
   130ac:	1085883a 	add	r2,r2,r2
   130b0:	1085883a 	add	r2,r2,r2
   130b4:	2085883a 	add	r2,r4,r2
   130b8:	10800017 	ldw	r2,0(r2)
   130bc:	10803fec 	andhi	r2,r2,255
   130c0:	1004d23a 	srli	r2,r2,8
   130c4:	1886b03a 	or	r3,r3,r2
   130c8:	e13ffe17 	ldw	r4,-8(fp)
   130cc:	e0bff317 	ldw	r2,-52(fp)
   130d0:	1085883a 	add	r2,r2,r2
   130d4:	1085883a 	add	r2,r2,r2
   130d8:	2085883a 	add	r2,r4,r2
   130dc:	10800017 	ldw	r2,0(r2)
   130e0:	1004d63a 	srli	r2,r2,24
   130e4:	1886b03a 	or	r3,r3,r2
   130e8:	e0bff317 	ldw	r2,-52(fp)
   130ec:	1085883a 	add	r2,r2,r2
   130f0:	1085883a 	add	r2,r2,r2
   130f4:	e13ff304 	addi	r4,fp,-52
   130f8:	2085883a 	add	r2,r4,r2
   130fc:	10800304 	addi	r2,r2,12
   13100:	10c00015 	stw	r3,0(r2)
        hash->s[i] = 0;
   13104:	e0fffe17 	ldw	r3,-8(fp)
   13108:	e0bff317 	ldw	r2,-52(fp)
   1310c:	1085883a 	add	r2,r2,r2
   13110:	1085883a 	add	r2,r2,r2
   13114:	1885883a 	add	r2,r3,r2
   13118:	10000015 	stw	zero,0(r2)
    int i = 0;
    sizedesc[0] = BE32(hash->bytes >> 29);
    sizedesc[1] = BE32(hash->bytes << 3);
    secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));
    secp256k1_sha256_write(hash, (const unsigned char*)sizedesc, 8);
    for (i = 0; i < 8; i++) {
   1311c:	e0bff317 	ldw	r2,-52(fp)
   13120:	10800044 	addi	r2,r2,1
   13124:	e0bff315 	stw	r2,-52(fp)
   13128:	e0bff317 	ldw	r2,-52(fp)
   1312c:	10800210 	cmplti	r2,r2,8
   13130:	103fcc1e 	bne	r2,zero,13064 <__alt_mem_epcs_flash_controller+0xfe00a064>
        out[i] = BE32(hash->s[i]);
        hash->s[i] = 0;
    }
    memcpy(out32, (const unsigned char*)out, 32);
   13134:	e0bff604 	addi	r2,fp,-40
   13138:	01800804 	movi	r6,32
   1313c:	100b883a 	mov	r5,r2
   13140:	e13fff17 	ldw	r4,-4(fp)
   13144:	00463980 	call	46398 <memcpy>
}
   13148:	0001883a 	nop
   1314c:	e037883a 	mov	sp,fp
   13150:	dfc00117 	ldw	ra,4(sp)
   13154:	df000017 	ldw	fp,0(sp)
   13158:	dec00204 	addi	sp,sp,8
   1315c:	f800283a 	ret

00013160 <secp256k1_hmac_sha256_initialize>:

static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {
   13160:	deffd104 	addi	sp,sp,-188
   13164:	dfc02e15 	stw	ra,184(sp)
   13168:	df002d15 	stw	fp,180(sp)
   1316c:	df002d04 	addi	fp,sp,180
   13170:	e13ffd15 	stw	r4,-12(fp)
   13174:	e17ffe15 	stw	r5,-8(fp)
   13178:	e1bfff15 	stw	r6,-4(fp)
    int n;
    unsigned char rkey[64];
    if (keylen <= 64) {
   1317c:	e0bfff17 	ldw	r2,-4(fp)
   13180:	10801068 	cmpgeui	r2,r2,65
   13184:	10000f1e 	bne	r2,zero,131c4 <secp256k1_hmac_sha256_initialize+0x64>
        memcpy(rkey, key, keylen);
   13188:	e0bfd404 	addi	r2,fp,-176
   1318c:	e1bfff17 	ldw	r6,-4(fp)
   13190:	e17ffe17 	ldw	r5,-8(fp)
   13194:	1009883a 	mov	r4,r2
   13198:	00463980 	call	46398 <memcpy>
        memset(rkey + keylen, 0, 64 - keylen);
   1319c:	e0ffd404 	addi	r3,fp,-176
   131a0:	e0bfff17 	ldw	r2,-4(fp)
   131a4:	1889883a 	add	r4,r3,r2
   131a8:	00c01004 	movi	r3,64
   131ac:	e0bfff17 	ldw	r2,-4(fp)
   131b0:	1885c83a 	sub	r2,r3,r2
   131b4:	100d883a 	mov	r6,r2
   131b8:	000b883a 	mov	r5,zero
   131bc:	00464200 	call	46420 <memset>
   131c0:	00001306 	br	13210 <secp256k1_hmac_sha256_initialize+0xb0>
    } else {
        secp256k1_sha256_t sha256;
        secp256k1_sha256_initialize(&sha256);
   131c4:	e0bfe404 	addi	r2,fp,-112
   131c8:	1009883a 	mov	r4,r2
   131cc:	000dec00 	call	dec0 <secp256k1_sha256_initialize>
        secp256k1_sha256_write(&sha256, key, keylen);
   131d0:	e0bfe404 	addi	r2,fp,-112
   131d4:	e1bfff17 	ldw	r6,-4(fp)
   131d8:	e17ffe17 	ldw	r5,-8(fp)
   131dc:	1009883a 	mov	r4,r2
   131e0:	0012e8c0 	call	12e8c <secp256k1_sha256_write>
        secp256k1_sha256_finalize(&sha256, rkey);
   131e4:	e0ffd404 	addi	r3,fp,-176
   131e8:	e0bfe404 	addi	r2,fp,-112
   131ec:	180b883a 	mov	r5,r3
   131f0:	1009883a 	mov	r4,r2
   131f4:	0012f980 	call	12f98 <secp256k1_sha256_finalize>
        memset(rkey + 32, 0, 32);
   131f8:	e0bfd404 	addi	r2,fp,-176
   131fc:	10800804 	addi	r2,r2,32
   13200:	01800804 	movi	r6,32
   13204:	000b883a 	mov	r5,zero
   13208:	1009883a 	mov	r4,r2
   1320c:	00464200 	call	46420 <memset>
    }

    secp256k1_sha256_initialize(&hash->outer);
   13210:	e0bffd17 	ldw	r2,-12(fp)
   13214:	10801904 	addi	r2,r2,100
   13218:	1009883a 	mov	r4,r2
   1321c:	000dec00 	call	dec0 <secp256k1_sha256_initialize>
    for (n = 0; n < 64; n++) {
   13220:	e03fd315 	stw	zero,-180(fp)
   13224:	00000d06 	br	1325c <secp256k1_hmac_sha256_initialize+0xfc>
        rkey[n] ^= 0x5c;
   13228:	e0ffd404 	addi	r3,fp,-176
   1322c:	e0bfd317 	ldw	r2,-180(fp)
   13230:	1885883a 	add	r2,r3,r2
   13234:	10800003 	ldbu	r2,0(r2)
   13238:	1080171c 	xori	r2,r2,92
   1323c:	1009883a 	mov	r4,r2
   13240:	e0ffd404 	addi	r3,fp,-176
   13244:	e0bfd317 	ldw	r2,-180(fp)
   13248:	1885883a 	add	r2,r3,r2
   1324c:	11000005 	stb	r4,0(r2)
        secp256k1_sha256_finalize(&sha256, rkey);
        memset(rkey + 32, 0, 32);
    }

    secp256k1_sha256_initialize(&hash->outer);
    for (n = 0; n < 64; n++) {
   13250:	e0bfd317 	ldw	r2,-180(fp)
   13254:	10800044 	addi	r2,r2,1
   13258:	e0bfd315 	stw	r2,-180(fp)
   1325c:	e0bfd317 	ldw	r2,-180(fp)
   13260:	10801010 	cmplti	r2,r2,64
   13264:	103ff01e 	bne	r2,zero,13228 <__alt_mem_epcs_flash_controller+0xfe00a228>
        rkey[n] ^= 0x5c;
    }
    secp256k1_sha256_write(&hash->outer, rkey, 64);
   13268:	e0bffd17 	ldw	r2,-12(fp)
   1326c:	10801904 	addi	r2,r2,100
   13270:	e0ffd404 	addi	r3,fp,-176
   13274:	01801004 	movi	r6,64
   13278:	180b883a 	mov	r5,r3
   1327c:	1009883a 	mov	r4,r2
   13280:	0012e8c0 	call	12e8c <secp256k1_sha256_write>

    secp256k1_sha256_initialize(&hash->inner);
   13284:	e0bffd17 	ldw	r2,-12(fp)
   13288:	1009883a 	mov	r4,r2
   1328c:	000dec00 	call	dec0 <secp256k1_sha256_initialize>
    for (n = 0; n < 64; n++) {
   13290:	e03fd315 	stw	zero,-180(fp)
   13294:	00000d06 	br	132cc <secp256k1_hmac_sha256_initialize+0x16c>
        rkey[n] ^= 0x5c ^ 0x36;
   13298:	e0ffd404 	addi	r3,fp,-176
   1329c:	e0bfd317 	ldw	r2,-180(fp)
   132a0:	1885883a 	add	r2,r3,r2
   132a4:	10800003 	ldbu	r2,0(r2)
   132a8:	10801a9c 	xori	r2,r2,106
   132ac:	1009883a 	mov	r4,r2
   132b0:	e0ffd404 	addi	r3,fp,-176
   132b4:	e0bfd317 	ldw	r2,-180(fp)
   132b8:	1885883a 	add	r2,r3,r2
   132bc:	11000005 	stb	r4,0(r2)
        rkey[n] ^= 0x5c;
    }
    secp256k1_sha256_write(&hash->outer, rkey, 64);

    secp256k1_sha256_initialize(&hash->inner);
    for (n = 0; n < 64; n++) {
   132c0:	e0bfd317 	ldw	r2,-180(fp)
   132c4:	10800044 	addi	r2,r2,1
   132c8:	e0bfd315 	stw	r2,-180(fp)
   132cc:	e0bfd317 	ldw	r2,-180(fp)
   132d0:	10801010 	cmplti	r2,r2,64
   132d4:	103ff01e 	bne	r2,zero,13298 <__alt_mem_epcs_flash_controller+0xfe00a298>
        rkey[n] ^= 0x5c ^ 0x36;
    }
    secp256k1_sha256_write(&hash->inner, rkey, 64);
   132d8:	e0bffd17 	ldw	r2,-12(fp)
   132dc:	e0ffd404 	addi	r3,fp,-176
   132e0:	01801004 	movi	r6,64
   132e4:	180b883a 	mov	r5,r3
   132e8:	1009883a 	mov	r4,r2
   132ec:	0012e8c0 	call	12e8c <secp256k1_sha256_write>
    memset(rkey, 0, 64);
   132f0:	e0bfd404 	addi	r2,fp,-176
   132f4:	01801004 	movi	r6,64
   132f8:	000b883a 	mov	r5,zero
   132fc:	1009883a 	mov	r4,r2
   13300:	00464200 	call	46420 <memset>
}
   13304:	0001883a 	nop
   13308:	e037883a 	mov	sp,fp
   1330c:	dfc00117 	ldw	ra,4(sp)
   13310:	df000017 	ldw	fp,0(sp)
   13314:	dec00204 	addi	sp,sp,8
   13318:	f800283a 	ret

0001331c <secp256k1_hmac_sha256_write>:

static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {
   1331c:	defffb04 	addi	sp,sp,-20
   13320:	dfc00415 	stw	ra,16(sp)
   13324:	df000315 	stw	fp,12(sp)
   13328:	df000304 	addi	fp,sp,12
   1332c:	e13ffd15 	stw	r4,-12(fp)
   13330:	e17ffe15 	stw	r5,-8(fp)
   13334:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_sha256_write(&hash->inner, data, size);
   13338:	e0bffd17 	ldw	r2,-12(fp)
   1333c:	e1bfff17 	ldw	r6,-4(fp)
   13340:	e17ffe17 	ldw	r5,-8(fp)
   13344:	1009883a 	mov	r4,r2
   13348:	0012e8c0 	call	12e8c <secp256k1_sha256_write>
}
   1334c:	0001883a 	nop
   13350:	e037883a 	mov	sp,fp
   13354:	dfc00117 	ldw	ra,4(sp)
   13358:	df000017 	ldw	fp,0(sp)
   1335c:	dec00204 	addi	sp,sp,8
   13360:	f800283a 	ret

00013364 <secp256k1_hmac_sha256_finalize>:

static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {
   13364:	defff404 	addi	sp,sp,-48
   13368:	dfc00b15 	stw	ra,44(sp)
   1336c:	df000a15 	stw	fp,40(sp)
   13370:	df000a04 	addi	fp,sp,40
   13374:	e13ffe15 	stw	r4,-8(fp)
   13378:	e17fff15 	stw	r5,-4(fp)
    unsigned char temp[32];
    secp256k1_sha256_finalize(&hash->inner, temp);
   1337c:	e0bffe17 	ldw	r2,-8(fp)
   13380:	e17ff604 	addi	r5,fp,-40
   13384:	1009883a 	mov	r4,r2
   13388:	0012f980 	call	12f98 <secp256k1_sha256_finalize>
    secp256k1_sha256_write(&hash->outer, temp, 32);
   1338c:	e0bffe17 	ldw	r2,-8(fp)
   13390:	10801904 	addi	r2,r2,100
   13394:	01800804 	movi	r6,32
   13398:	e17ff604 	addi	r5,fp,-40
   1339c:	1009883a 	mov	r4,r2
   133a0:	0012e8c0 	call	12e8c <secp256k1_sha256_write>
    memset(temp, 0, 32);
   133a4:	01800804 	movi	r6,32
   133a8:	000b883a 	mov	r5,zero
   133ac:	e13ff604 	addi	r4,fp,-40
   133b0:	00464200 	call	46420 <memset>
    secp256k1_sha256_finalize(&hash->outer, out32);
   133b4:	e0bffe17 	ldw	r2,-8(fp)
   133b8:	10801904 	addi	r2,r2,100
   133bc:	e17fff17 	ldw	r5,-4(fp)
   133c0:	1009883a 	mov	r4,r2
   133c4:	0012f980 	call	12f98 <secp256k1_sha256_finalize>
}
   133c8:	0001883a 	nop
   133cc:	e037883a 	mov	sp,fp
   133d0:	dfc00117 	ldw	ra,4(sp)
   133d4:	df000017 	ldw	fp,0(sp)
   133d8:	dec00204 	addi	sp,sp,8
   133dc:	f800283a 	ret

000133e0 <secp256k1_rfc6979_hmac_sha256_initialize>:


static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen) {
   133e0:	deffc904 	addi	sp,sp,-220
   133e4:	dfc03615 	stw	ra,216(sp)
   133e8:	df003515 	stw	fp,212(sp)
   133ec:	df003504 	addi	fp,sp,212
   133f0:	e13ffd15 	stw	r4,-12(fp)
   133f4:	e17ffe15 	stw	r5,-8(fp)
   133f8:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_hmac_sha256_t hmac;
    static const unsigned char zero[1] = {0x00};
    static const unsigned char one[1] = {0x01};

    memset(rng->v, 0x01, 32); /* RFC6979 3.2.b. */
   133fc:	e0bffd17 	ldw	r2,-12(fp)
   13400:	01800804 	movi	r6,32
   13404:	01400044 	movi	r5,1
   13408:	1009883a 	mov	r4,r2
   1340c:	00464200 	call	46420 <memset>
    memset(rng->k, 0x00, 32); /* RFC6979 3.2.c. */
   13410:	e0bffd17 	ldw	r2,-12(fp)
   13414:	10800804 	addi	r2,r2,32
   13418:	01800804 	movi	r6,32
   1341c:	000b883a 	mov	r5,zero
   13420:	1009883a 	mov	r4,r2
   13424:	00464200 	call	46420 <memset>

    /* RFC6979 3.2.d. */
    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   13428:	e0bffd17 	ldw	r2,-12(fp)
   1342c:	10800804 	addi	r2,r2,32
   13430:	01800804 	movi	r6,32
   13434:	100b883a 	mov	r5,r2
   13438:	e13fcb04 	addi	r4,fp,-212
   1343c:	00131600 	call	13160 <secp256k1_hmac_sha256_initialize>
    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   13440:	e0bffd17 	ldw	r2,-12(fp)
   13444:	01800804 	movi	r6,32
   13448:	100b883a 	mov	r5,r2
   1344c:	e13fcb04 	addi	r4,fp,-212
   13450:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_write(&hmac, zero, 1);
   13454:	01800044 	movi	r6,1
   13458:	d1600f04 	addi	r5,gp,-32708
   1345c:	e13fcb04 	addi	r4,fp,-212
   13460:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_write(&hmac, key, keylen);
   13464:	e1bfff17 	ldw	r6,-4(fp)
   13468:	e17ffe17 	ldw	r5,-8(fp)
   1346c:	e13fcb04 	addi	r4,fp,-212
   13470:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_finalize(&hmac, rng->k);
   13474:	e0bffd17 	ldw	r2,-12(fp)
   13478:	10800804 	addi	r2,r2,32
   1347c:	100b883a 	mov	r5,r2
   13480:	e13fcb04 	addi	r4,fp,-212
   13484:	00133640 	call	13364 <secp256k1_hmac_sha256_finalize>
    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   13488:	e0bffd17 	ldw	r2,-12(fp)
   1348c:	10800804 	addi	r2,r2,32
   13490:	01800804 	movi	r6,32
   13494:	100b883a 	mov	r5,r2
   13498:	e13fcb04 	addi	r4,fp,-212
   1349c:	00131600 	call	13160 <secp256k1_hmac_sha256_initialize>
    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   134a0:	e0bffd17 	ldw	r2,-12(fp)
   134a4:	01800804 	movi	r6,32
   134a8:	100b883a 	mov	r5,r2
   134ac:	e13fcb04 	addi	r4,fp,-212
   134b0:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_finalize(&hmac, rng->v);
   134b4:	e0bffd17 	ldw	r2,-12(fp)
   134b8:	100b883a 	mov	r5,r2
   134bc:	e13fcb04 	addi	r4,fp,-212
   134c0:	00133640 	call	13364 <secp256k1_hmac_sha256_finalize>

    /* RFC6979 3.2.f. */
    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   134c4:	e0bffd17 	ldw	r2,-12(fp)
   134c8:	10800804 	addi	r2,r2,32
   134cc:	01800804 	movi	r6,32
   134d0:	100b883a 	mov	r5,r2
   134d4:	e13fcb04 	addi	r4,fp,-212
   134d8:	00131600 	call	13160 <secp256k1_hmac_sha256_initialize>
    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   134dc:	e0bffd17 	ldw	r2,-12(fp)
   134e0:	01800804 	movi	r6,32
   134e4:	100b883a 	mov	r5,r2
   134e8:	e13fcb04 	addi	r4,fp,-212
   134ec:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_write(&hmac, one, 1);
   134f0:	01800044 	movi	r6,1
   134f4:	d1600f44 	addi	r5,gp,-32707
   134f8:	e13fcb04 	addi	r4,fp,-212
   134fc:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_write(&hmac, key, keylen);
   13500:	e1bfff17 	ldw	r6,-4(fp)
   13504:	e17ffe17 	ldw	r5,-8(fp)
   13508:	e13fcb04 	addi	r4,fp,-212
   1350c:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_finalize(&hmac, rng->k);
   13510:	e0bffd17 	ldw	r2,-12(fp)
   13514:	10800804 	addi	r2,r2,32
   13518:	100b883a 	mov	r5,r2
   1351c:	e13fcb04 	addi	r4,fp,-212
   13520:	00133640 	call	13364 <secp256k1_hmac_sha256_finalize>
    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   13524:	e0bffd17 	ldw	r2,-12(fp)
   13528:	10800804 	addi	r2,r2,32
   1352c:	01800804 	movi	r6,32
   13530:	100b883a 	mov	r5,r2
   13534:	e13fcb04 	addi	r4,fp,-212
   13538:	00131600 	call	13160 <secp256k1_hmac_sha256_initialize>
    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   1353c:	e0bffd17 	ldw	r2,-12(fp)
   13540:	01800804 	movi	r6,32
   13544:	100b883a 	mov	r5,r2
   13548:	e13fcb04 	addi	r4,fp,-212
   1354c:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
    secp256k1_hmac_sha256_finalize(&hmac, rng->v);
   13550:	e0bffd17 	ldw	r2,-12(fp)
   13554:	100b883a 	mov	r5,r2
   13558:	e13fcb04 	addi	r4,fp,-212
   1355c:	00133640 	call	13364 <secp256k1_hmac_sha256_finalize>
    rng->retry = 0;
   13560:	e0bffd17 	ldw	r2,-12(fp)
   13564:	10001015 	stw	zero,64(r2)
}
   13568:	0001883a 	nop
   1356c:	e037883a 	mov	sp,fp
   13570:	dfc00117 	ldw	ra,4(sp)
   13574:	df000017 	ldw	fp,0(sp)
   13578:	dec00204 	addi	sp,sp,8
   1357c:	f800283a 	ret

00013580 <secp256k1_rfc6979_hmac_sha256_generate>:

static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {
   13580:	deffc804 	addi	sp,sp,-224
   13584:	dfc03715 	stw	ra,220(sp)
   13588:	df003615 	stw	fp,216(sp)
   1358c:	df003604 	addi	fp,sp,216
   13590:	e13ffd15 	stw	r4,-12(fp)
   13594:	e17ffe15 	stw	r5,-8(fp)
   13598:	e1bfff15 	stw	r6,-4(fp)
    /* RFC6979 3.2.h. */
    static const unsigned char zero[1] = {0x00};
    if (rng->retry) {
   1359c:	e0bffd17 	ldw	r2,-12(fp)
   135a0:	10801017 	ldw	r2,64(r2)
   135a4:	10005226 	beq	r2,zero,136f0 <secp256k1_rfc6979_hmac_sha256_generate+0x170>
        secp256k1_hmac_sha256_t hmac;
        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   135a8:	e0bffd17 	ldw	r2,-12(fp)
   135ac:	10c00804 	addi	r3,r2,32
   135b0:	e0bfcb04 	addi	r2,fp,-212
   135b4:	01800804 	movi	r6,32
   135b8:	180b883a 	mov	r5,r3
   135bc:	1009883a 	mov	r4,r2
   135c0:	00131600 	call	13160 <secp256k1_hmac_sha256_initialize>
        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   135c4:	e0fffd17 	ldw	r3,-12(fp)
   135c8:	e0bfcb04 	addi	r2,fp,-212
   135cc:	01800804 	movi	r6,32
   135d0:	180b883a 	mov	r5,r3
   135d4:	1009883a 	mov	r4,r2
   135d8:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_write(&hmac, zero, 1);
   135dc:	e0bfcb04 	addi	r2,fp,-212
   135e0:	01800044 	movi	r6,1
   135e4:	d1600f84 	addi	r5,gp,-32706
   135e8:	1009883a 	mov	r4,r2
   135ec:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_finalize(&hmac, rng->k);
   135f0:	e0bffd17 	ldw	r2,-12(fp)
   135f4:	10c00804 	addi	r3,r2,32
   135f8:	e0bfcb04 	addi	r2,fp,-212
   135fc:	180b883a 	mov	r5,r3
   13600:	1009883a 	mov	r4,r2
   13604:	00133640 	call	13364 <secp256k1_hmac_sha256_finalize>
        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   13608:	e0bffd17 	ldw	r2,-12(fp)
   1360c:	10c00804 	addi	r3,r2,32
   13610:	e0bfcb04 	addi	r2,fp,-212
   13614:	01800804 	movi	r6,32
   13618:	180b883a 	mov	r5,r3
   1361c:	1009883a 	mov	r4,r2
   13620:	00131600 	call	13160 <secp256k1_hmac_sha256_initialize>
        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   13624:	e0fffd17 	ldw	r3,-12(fp)
   13628:	e0bfcb04 	addi	r2,fp,-212
   1362c:	01800804 	movi	r6,32
   13630:	180b883a 	mov	r5,r3
   13634:	1009883a 	mov	r4,r2
   13638:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_finalize(&hmac, rng->v);
   1363c:	e0fffd17 	ldw	r3,-12(fp)
   13640:	e0bfcb04 	addi	r2,fp,-212
   13644:	180b883a 	mov	r5,r3
   13648:	1009883a 	mov	r4,r2
   1364c:	00133640 	call	13364 <secp256k1_hmac_sha256_finalize>
    }

    while (outlen > 0) {
   13650:	00002706 	br	136f0 <secp256k1_rfc6979_hmac_sha256_generate+0x170>
        secp256k1_hmac_sha256_t hmac;
        int now = outlen;
   13654:	e0bfff17 	ldw	r2,-4(fp)
   13658:	e0bfca15 	stw	r2,-216(fp)
        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
   1365c:	e0bffd17 	ldw	r2,-12(fp)
   13660:	10c00804 	addi	r3,r2,32
   13664:	e0bfcb04 	addi	r2,fp,-212
   13668:	01800804 	movi	r6,32
   1366c:	180b883a 	mov	r5,r3
   13670:	1009883a 	mov	r4,r2
   13674:	00131600 	call	13160 <secp256k1_hmac_sha256_initialize>
        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
   13678:	e0fffd17 	ldw	r3,-12(fp)
   1367c:	e0bfcb04 	addi	r2,fp,-212
   13680:	01800804 	movi	r6,32
   13684:	180b883a 	mov	r5,r3
   13688:	1009883a 	mov	r4,r2
   1368c:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_finalize(&hmac, rng->v);
   13690:	e0fffd17 	ldw	r3,-12(fp)
   13694:	e0bfcb04 	addi	r2,fp,-212
   13698:	180b883a 	mov	r5,r3
   1369c:	1009883a 	mov	r4,r2
   136a0:	00133640 	call	13364 <secp256k1_hmac_sha256_finalize>
        if (now > 32) {
   136a4:	e0bfca17 	ldw	r2,-216(fp)
   136a8:	10800850 	cmplti	r2,r2,33
   136ac:	1000021e 	bne	r2,zero,136b8 <secp256k1_rfc6979_hmac_sha256_generate+0x138>
            now = 32;
   136b0:	00800804 	movi	r2,32
   136b4:	e0bfca15 	stw	r2,-216(fp)
        }
        memcpy(out, rng->v, now);
   136b8:	e0bffd17 	ldw	r2,-12(fp)
   136bc:	e0ffca17 	ldw	r3,-216(fp)
   136c0:	180d883a 	mov	r6,r3
   136c4:	100b883a 	mov	r5,r2
   136c8:	e13ffe17 	ldw	r4,-8(fp)
   136cc:	00463980 	call	46398 <memcpy>
        out += now;
   136d0:	e0bfca17 	ldw	r2,-216(fp)
   136d4:	e0fffe17 	ldw	r3,-8(fp)
   136d8:	1885883a 	add	r2,r3,r2
   136dc:	e0bffe15 	stw	r2,-8(fp)
        outlen -= now;
   136e0:	e0bfca17 	ldw	r2,-216(fp)
   136e4:	e0ffff17 	ldw	r3,-4(fp)
   136e8:	1885c83a 	sub	r2,r3,r2
   136ec:	e0bfff15 	stw	r2,-4(fp)
        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);
        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);
        secp256k1_hmac_sha256_finalize(&hmac, rng->v);
    }

    while (outlen > 0) {
   136f0:	e0bfff17 	ldw	r2,-4(fp)
   136f4:	103fd71e 	bne	r2,zero,13654 <__alt_mem_epcs_flash_controller+0xfe00a654>
        memcpy(out, rng->v, now);
        out += now;
        outlen -= now;
    }

    rng->retry = 1;
   136f8:	e0bffd17 	ldw	r2,-12(fp)
   136fc:	00c00044 	movi	r3,1
   13700:	10c01015 	stw	r3,64(r2)
}
   13704:	0001883a 	nop
   13708:	e037883a 	mov	sp,fp
   1370c:	dfc00117 	ldw	ra,4(sp)
   13710:	df000017 	ldw	fp,0(sp)
   13714:	dec00204 	addi	sp,sp,8
   13718:	f800283a 	ret

0001371c <secp256k1_rfc6979_hmac_sha256_finalize>:

static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {
   1371c:	defffd04 	addi	sp,sp,-12
   13720:	dfc00215 	stw	ra,8(sp)
   13724:	df000115 	stw	fp,4(sp)
   13728:	df000104 	addi	fp,sp,4
   1372c:	e13fff15 	stw	r4,-4(fp)
    memset(rng->k, 0, 32);
   13730:	e0bfff17 	ldw	r2,-4(fp)
   13734:	10800804 	addi	r2,r2,32
   13738:	01800804 	movi	r6,32
   1373c:	000b883a 	mov	r5,zero
   13740:	1009883a 	mov	r4,r2
   13744:	00464200 	call	46420 <memset>
    memset(rng->v, 0, 32);
   13748:	e0bfff17 	ldw	r2,-4(fp)
   1374c:	01800804 	movi	r6,32
   13750:	000b883a 	mov	r5,zero
   13754:	1009883a 	mov	r4,r2
   13758:	00464200 	call	46420 <memset>
    rng->retry = 0;
   1375c:	e0bfff17 	ldw	r2,-4(fp)
   13760:	10001015 	stw	zero,64(r2)
}
   13764:	0001883a 	nop
   13768:	e037883a 	mov	sp,fp
   1376c:	dfc00117 	ldw	ra,4(sp)
   13770:	df000017 	ldw	fp,0(sp)
   13774:	dec00204 	addi	sp,sp,8
   13778:	f800283a 	ret

0001377c <secp256k1_fe_verify>:
#include "util.h"
#include "num.h"
#include "field.h"

#ifdef VERIFY
static void secp256k1_fe_verify(const secp256k1_fe *a) {
   1377c:	defff804 	addi	sp,sp,-32
   13780:	dfc00715 	stw	ra,28(sp)
   13784:	df000615 	stw	fp,24(sp)
   13788:	df000604 	addi	fp,sp,24
   1378c:	e13fff15 	stw	r4,-4(fp)
    const uint32_t *d = a->n;
   13790:	e0bfff17 	ldw	r2,-4(fp)
   13794:	e0bffc15 	stw	r2,-16(fp)
    int m = a->normalized ? 1 : 2 * a->magnitude, r = 1;
   13798:	e0bfff17 	ldw	r2,-4(fp)
   1379c:	10800b17 	ldw	r2,44(r2)
   137a0:	1000041e 	bne	r2,zero,137b4 <secp256k1_fe_verify+0x38>
   137a4:	e0bfff17 	ldw	r2,-4(fp)
   137a8:	10800a17 	ldw	r2,40(r2)
   137ac:	1085883a 	add	r2,r2,r2
   137b0:	00000106 	br	137b8 <secp256k1_fe_verify+0x3c>
   137b4:	00800044 	movi	r2,1
   137b8:	e0bffd15 	stw	r2,-12(fp)
   137bc:	00800044 	movi	r2,1
   137c0:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[0] <= 0x3FFFFFFUL * m);
   137c4:	e0bffc17 	ldw	r2,-16(fp)
   137c8:	11000017 	ldw	r4,0(r2)
   137cc:	e0fffd17 	ldw	r3,-12(fp)
   137d0:	1805883a 	mov	r2,r3
   137d4:	100496ba 	slli	r2,r2,26
   137d8:	10c5c83a 	sub	r2,r2,r3
   137dc:	1105403a 	cmpgeu	r2,r2,r4
   137e0:	10803fcc 	andi	r2,r2,255
   137e4:	e0fffb17 	ldw	r3,-20(fp)
   137e8:	1884703a 	and	r2,r3,r2
   137ec:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[1] <= 0x3FFFFFFUL * m);
   137f0:	e0bffc17 	ldw	r2,-16(fp)
   137f4:	10800104 	addi	r2,r2,4
   137f8:	11000017 	ldw	r4,0(r2)
   137fc:	e0fffd17 	ldw	r3,-12(fp)
   13800:	1805883a 	mov	r2,r3
   13804:	100496ba 	slli	r2,r2,26
   13808:	10c5c83a 	sub	r2,r2,r3
   1380c:	1105403a 	cmpgeu	r2,r2,r4
   13810:	10803fcc 	andi	r2,r2,255
   13814:	e0fffb17 	ldw	r3,-20(fp)
   13818:	1884703a 	and	r2,r3,r2
   1381c:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[2] <= 0x3FFFFFFUL * m);
   13820:	e0bffc17 	ldw	r2,-16(fp)
   13824:	10800204 	addi	r2,r2,8
   13828:	11000017 	ldw	r4,0(r2)
   1382c:	e0fffd17 	ldw	r3,-12(fp)
   13830:	1805883a 	mov	r2,r3
   13834:	100496ba 	slli	r2,r2,26
   13838:	10c5c83a 	sub	r2,r2,r3
   1383c:	1105403a 	cmpgeu	r2,r2,r4
   13840:	10803fcc 	andi	r2,r2,255
   13844:	e0fffb17 	ldw	r3,-20(fp)
   13848:	1884703a 	and	r2,r3,r2
   1384c:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[3] <= 0x3FFFFFFUL * m);
   13850:	e0bffc17 	ldw	r2,-16(fp)
   13854:	10800304 	addi	r2,r2,12
   13858:	11000017 	ldw	r4,0(r2)
   1385c:	e0fffd17 	ldw	r3,-12(fp)
   13860:	1805883a 	mov	r2,r3
   13864:	100496ba 	slli	r2,r2,26
   13868:	10c5c83a 	sub	r2,r2,r3
   1386c:	1105403a 	cmpgeu	r2,r2,r4
   13870:	10803fcc 	andi	r2,r2,255
   13874:	e0fffb17 	ldw	r3,-20(fp)
   13878:	1884703a 	and	r2,r3,r2
   1387c:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[4] <= 0x3FFFFFFUL * m);
   13880:	e0bffc17 	ldw	r2,-16(fp)
   13884:	10800404 	addi	r2,r2,16
   13888:	11000017 	ldw	r4,0(r2)
   1388c:	e0fffd17 	ldw	r3,-12(fp)
   13890:	1805883a 	mov	r2,r3
   13894:	100496ba 	slli	r2,r2,26
   13898:	10c5c83a 	sub	r2,r2,r3
   1389c:	1105403a 	cmpgeu	r2,r2,r4
   138a0:	10803fcc 	andi	r2,r2,255
   138a4:	e0fffb17 	ldw	r3,-20(fp)
   138a8:	1884703a 	and	r2,r3,r2
   138ac:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[5] <= 0x3FFFFFFUL * m);
   138b0:	e0bffc17 	ldw	r2,-16(fp)
   138b4:	10800504 	addi	r2,r2,20
   138b8:	11000017 	ldw	r4,0(r2)
   138bc:	e0fffd17 	ldw	r3,-12(fp)
   138c0:	1805883a 	mov	r2,r3
   138c4:	100496ba 	slli	r2,r2,26
   138c8:	10c5c83a 	sub	r2,r2,r3
   138cc:	1105403a 	cmpgeu	r2,r2,r4
   138d0:	10803fcc 	andi	r2,r2,255
   138d4:	e0fffb17 	ldw	r3,-20(fp)
   138d8:	1884703a 	and	r2,r3,r2
   138dc:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[6] <= 0x3FFFFFFUL * m);
   138e0:	e0bffc17 	ldw	r2,-16(fp)
   138e4:	10800604 	addi	r2,r2,24
   138e8:	11000017 	ldw	r4,0(r2)
   138ec:	e0fffd17 	ldw	r3,-12(fp)
   138f0:	1805883a 	mov	r2,r3
   138f4:	100496ba 	slli	r2,r2,26
   138f8:	10c5c83a 	sub	r2,r2,r3
   138fc:	1105403a 	cmpgeu	r2,r2,r4
   13900:	10803fcc 	andi	r2,r2,255
   13904:	e0fffb17 	ldw	r3,-20(fp)
   13908:	1884703a 	and	r2,r3,r2
   1390c:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[7] <= 0x3FFFFFFUL * m);
   13910:	e0bffc17 	ldw	r2,-16(fp)
   13914:	10800704 	addi	r2,r2,28
   13918:	11000017 	ldw	r4,0(r2)
   1391c:	e0fffd17 	ldw	r3,-12(fp)
   13920:	1805883a 	mov	r2,r3
   13924:	100496ba 	slli	r2,r2,26
   13928:	10c5c83a 	sub	r2,r2,r3
   1392c:	1105403a 	cmpgeu	r2,r2,r4
   13930:	10803fcc 	andi	r2,r2,255
   13934:	e0fffb17 	ldw	r3,-20(fp)
   13938:	1884703a 	and	r2,r3,r2
   1393c:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[8] <= 0x3FFFFFFUL * m);
   13940:	e0bffc17 	ldw	r2,-16(fp)
   13944:	10800804 	addi	r2,r2,32
   13948:	11000017 	ldw	r4,0(r2)
   1394c:	e0fffd17 	ldw	r3,-12(fp)
   13950:	1805883a 	mov	r2,r3
   13954:	100496ba 	slli	r2,r2,26
   13958:	10c5c83a 	sub	r2,r2,r3
   1395c:	1105403a 	cmpgeu	r2,r2,r4
   13960:	10803fcc 	andi	r2,r2,255
   13964:	e0fffb17 	ldw	r3,-20(fp)
   13968:	1884703a 	and	r2,r3,r2
   1396c:	e0bffb15 	stw	r2,-20(fp)
    r &= (d[9] <= 0x03FFFFFUL * m);
   13970:	e0bffc17 	ldw	r2,-16(fp)
   13974:	10800904 	addi	r2,r2,36
   13978:	11000017 	ldw	r4,0(r2)
   1397c:	e0fffd17 	ldw	r3,-12(fp)
   13980:	1805883a 	mov	r2,r3
   13984:	100495ba 	slli	r2,r2,22
   13988:	10c5c83a 	sub	r2,r2,r3
   1398c:	1105403a 	cmpgeu	r2,r2,r4
   13990:	10803fcc 	andi	r2,r2,255
   13994:	e0fffb17 	ldw	r3,-20(fp)
   13998:	1884703a 	and	r2,r3,r2
   1399c:	e0bffb15 	stw	r2,-20(fp)
    r &= (a->magnitude >= 0);
   139a0:	e0bfff17 	ldw	r2,-4(fp)
   139a4:	10800a17 	ldw	r2,40(r2)
   139a8:	0084303a 	nor	r2,zero,r2
   139ac:	1004d7fa 	srli	r2,r2,31
   139b0:	10803fcc 	andi	r2,r2,255
   139b4:	e0fffb17 	ldw	r3,-20(fp)
   139b8:	1884703a 	and	r2,r3,r2
   139bc:	e0bffb15 	stw	r2,-20(fp)
    r &= (a->magnitude <= 32);
   139c0:	e0bfff17 	ldw	r2,-4(fp)
   139c4:	10800a17 	ldw	r2,40(r2)
   139c8:	10800850 	cmplti	r2,r2,33
   139cc:	10803fcc 	andi	r2,r2,255
   139d0:	e0fffb17 	ldw	r3,-20(fp)
   139d4:	1884703a 	and	r2,r3,r2
   139d8:	e0bffb15 	stw	r2,-20(fp)
    if (a->normalized) {
   139dc:	e0bfff17 	ldw	r2,-4(fp)
   139e0:	10800b17 	ldw	r2,44(r2)
   139e4:	10003e26 	beq	r2,zero,13ae0 <secp256k1_fe_verify+0x364>
        r &= (a->magnitude <= 1);
   139e8:	e0bfff17 	ldw	r2,-4(fp)
   139ec:	10800a17 	ldw	r2,40(r2)
   139f0:	10800090 	cmplti	r2,r2,2
   139f4:	10803fcc 	andi	r2,r2,255
   139f8:	e0fffb17 	ldw	r3,-20(fp)
   139fc:	1884703a 	and	r2,r3,r2
   13a00:	e0bffb15 	stw	r2,-20(fp)
        if (r && (d[9] == 0x03FFFFFUL)) {
   13a04:	e0bffb17 	ldw	r2,-20(fp)
   13a08:	10003526 	beq	r2,zero,13ae0 <secp256k1_fe_verify+0x364>
   13a0c:	e0bffc17 	ldw	r2,-16(fp)
   13a10:	10800904 	addi	r2,r2,36
   13a14:	10c00017 	ldw	r3,0(r2)
   13a18:	00801034 	movhi	r2,64
   13a1c:	10bfffc4 	addi	r2,r2,-1
   13a20:	18802f1e 	bne	r3,r2,13ae0 <secp256k1_fe_verify+0x364>
            uint32_t mid = d[8] & d[7] & d[6] & d[5] & d[4] & d[3] & d[2];
   13a24:	e0bffc17 	ldw	r2,-16(fp)
   13a28:	10800804 	addi	r2,r2,32
   13a2c:	10c00017 	ldw	r3,0(r2)
   13a30:	e0bffc17 	ldw	r2,-16(fp)
   13a34:	10800704 	addi	r2,r2,28
   13a38:	10800017 	ldw	r2,0(r2)
   13a3c:	1886703a 	and	r3,r3,r2
   13a40:	e0bffc17 	ldw	r2,-16(fp)
   13a44:	10800604 	addi	r2,r2,24
   13a48:	10800017 	ldw	r2,0(r2)
   13a4c:	1886703a 	and	r3,r3,r2
   13a50:	e0bffc17 	ldw	r2,-16(fp)
   13a54:	10800504 	addi	r2,r2,20
   13a58:	10800017 	ldw	r2,0(r2)
   13a5c:	1886703a 	and	r3,r3,r2
   13a60:	e0bffc17 	ldw	r2,-16(fp)
   13a64:	10800404 	addi	r2,r2,16
   13a68:	10800017 	ldw	r2,0(r2)
   13a6c:	1886703a 	and	r3,r3,r2
   13a70:	e0bffc17 	ldw	r2,-16(fp)
   13a74:	10800304 	addi	r2,r2,12
   13a78:	10800017 	ldw	r2,0(r2)
   13a7c:	1886703a 	and	r3,r3,r2
   13a80:	e0bffc17 	ldw	r2,-16(fp)
   13a84:	10800204 	addi	r2,r2,8
   13a88:	10800017 	ldw	r2,0(r2)
   13a8c:	1884703a 	and	r2,r3,r2
   13a90:	e0bffe15 	stw	r2,-8(fp)
            if (mid == 0x3FFFFFFUL) {
   13a94:	e0fffe17 	ldw	r3,-8(fp)
   13a98:	00810034 	movhi	r2,1024
   13a9c:	10bfffc4 	addi	r2,r2,-1
   13aa0:	18800f1e 	bne	r3,r2,13ae0 <secp256k1_fe_verify+0x364>
                r &= ((d[1] + 0x40UL + ((d[0] + 0x3D1UL) >> 26)) <= 0x3FFFFFFUL);
   13aa4:	e0bffc17 	ldw	r2,-16(fp)
   13aa8:	10800104 	addi	r2,r2,4
   13aac:	10c00017 	ldw	r3,0(r2)
   13ab0:	e0bffc17 	ldw	r2,-16(fp)
   13ab4:	10800017 	ldw	r2,0(r2)
   13ab8:	1080f444 	addi	r2,r2,977
   13abc:	1004d6ba 	srli	r2,r2,26
   13ac0:	1885883a 	add	r2,r3,r2
   13ac4:	10c01004 	addi	r3,r2,64
   13ac8:	00810034 	movhi	r2,1024
   13acc:	1885803a 	cmpltu	r2,r3,r2
   13ad0:	10803fcc 	andi	r2,r2,255
   13ad4:	e0fffb17 	ldw	r3,-20(fp)
   13ad8:	1884703a 	and	r2,r3,r2
   13adc:	e0bffb15 	stw	r2,-20(fp)
            }
        }
    }
    VERIFY_CHECK(r == 1);
   13ae0:	e0bffb17 	ldw	r2,-20(fp)
   13ae4:	10800058 	cmpnei	r2,r2,1
   13ae8:	10803fcc 	andi	r2,r2,255
   13aec:	10000d26 	beq	r2,zero,13b24 <secp256k1_fe_verify+0x3a8>
   13af0:	d0a01617 	ldw	r2,-32680(gp)
   13af4:	10c00317 	ldw	r3,12(r2)
   13af8:	00800174 	movhi	r2,5
   13afc:	1091eb04 	addi	r2,r2,18348
   13b00:	d8800015 	stw	r2,0(sp)
   13b04:	01c009c4 	movi	r7,39
   13b08:	01800174 	movhi	r6,5
   13b0c:	3191dd04 	addi	r6,r6,18292
   13b10:	01400174 	movhi	r5,5
   13b14:	2951e804 	addi	r5,r5,18336
   13b18:	1809883a 	mov	r4,r3
   13b1c:	00461000 	call	46100 <fprintf>
   13b20:	0045fd40 	call	45fd4 <abort>
}
   13b24:	0001883a 	nop
   13b28:	e037883a 	mov	sp,fp
   13b2c:	dfc00117 	ldw	ra,4(sp)
   13b30:	df000017 	ldw	fp,0(sp)
   13b34:	dec00204 	addi	sp,sp,8
   13b38:	f800283a 	ret

00013b3c <secp256k1_fe_normalize>:
static void secp256k1_fe_verify(const secp256k1_fe *a) {
    (void)a;
}
#endif

static void secp256k1_fe_normalize(secp256k1_fe *r) {
   13b3c:	defff004 	addi	sp,sp,-64
   13b40:	dfc00f15 	stw	ra,60(sp)
   13b44:	df000e15 	stw	fp,56(sp)
   13b48:	df000e04 	addi	fp,sp,56
   13b4c:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],
   13b50:	e0bfff17 	ldw	r2,-4(fp)
   13b54:	10800017 	ldw	r2,0(r2)
   13b58:	e0bff315 	stw	r2,-52(fp)
   13b5c:	e0bfff17 	ldw	r2,-4(fp)
   13b60:	10800117 	ldw	r2,4(r2)
   13b64:	e0bff415 	stw	r2,-48(fp)
   13b68:	e0bfff17 	ldw	r2,-4(fp)
   13b6c:	10800217 	ldw	r2,8(r2)
   13b70:	e0bff515 	stw	r2,-44(fp)
   13b74:	e0bfff17 	ldw	r2,-4(fp)
   13b78:	10800317 	ldw	r2,12(r2)
   13b7c:	e0bff615 	stw	r2,-40(fp)
   13b80:	e0bfff17 	ldw	r2,-4(fp)
   13b84:	10800417 	ldw	r2,16(r2)
   13b88:	e0bff715 	stw	r2,-36(fp)
             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];
   13b8c:	e0bfff17 	ldw	r2,-4(fp)
   13b90:	10800517 	ldw	r2,20(r2)
   13b94:	e0bff815 	stw	r2,-32(fp)
   13b98:	e0bfff17 	ldw	r2,-4(fp)
   13b9c:	10800617 	ldw	r2,24(r2)
   13ba0:	e0bff915 	stw	r2,-28(fp)
   13ba4:	e0bfff17 	ldw	r2,-4(fp)
   13ba8:	10800717 	ldw	r2,28(r2)
   13bac:	e0bffa15 	stw	r2,-24(fp)
   13bb0:	e0bfff17 	ldw	r2,-4(fp)
   13bb4:	10800817 	ldw	r2,32(r2)
   13bb8:	e0bffb15 	stw	r2,-20(fp)
   13bbc:	e0bfff17 	ldw	r2,-4(fp)
   13bc0:	10800917 	ldw	r2,36(r2)
   13bc4:	e0bffc15 	stw	r2,-16(fp)

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    uint32_t m;
    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;
   13bc8:	e0bffc17 	ldw	r2,-16(fp)
   13bcc:	1004d5ba 	srli	r2,r2,22
   13bd0:	e0bffd15 	stw	r2,-12(fp)
   13bd4:	e0fffc17 	ldw	r3,-16(fp)
   13bd8:	00801034 	movhi	r2,64
   13bdc:	10bfffc4 	addi	r2,r2,-1
   13be0:	1884703a 	and	r2,r3,r2
   13be4:	e0bffc15 	stw	r2,-16(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   13be8:	0140f444 	movi	r5,977
   13bec:	e13ffd17 	ldw	r4,-12(fp)
   13bf0:	0043af40 	call	43af4 <__mulsi3>
   13bf4:	1007883a 	mov	r3,r2
   13bf8:	e0bff317 	ldw	r2,-52(fp)
   13bfc:	10c5883a 	add	r2,r2,r3
   13c00:	e0bff315 	stw	r2,-52(fp)
   13c04:	e0bffd17 	ldw	r2,-12(fp)
   13c08:	100491ba 	slli	r2,r2,6
   13c0c:	e0fff417 	ldw	r3,-48(fp)
   13c10:	1885883a 	add	r2,r3,r2
   13c14:	e0bff415 	stw	r2,-48(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   13c18:	e0bff317 	ldw	r2,-52(fp)
   13c1c:	1004d6ba 	srli	r2,r2,26
   13c20:	e0fff417 	ldw	r3,-48(fp)
   13c24:	1885883a 	add	r2,r3,r2
   13c28:	e0bff415 	stw	r2,-48(fp)
   13c2c:	e0fff317 	ldw	r3,-52(fp)
   13c30:	00810034 	movhi	r2,1024
   13c34:	10bfffc4 	addi	r2,r2,-1
   13c38:	1884703a 	and	r2,r3,r2
   13c3c:	e0bff315 	stw	r2,-52(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   13c40:	e0bff417 	ldw	r2,-48(fp)
   13c44:	1004d6ba 	srli	r2,r2,26
   13c48:	e0fff517 	ldw	r3,-44(fp)
   13c4c:	1885883a 	add	r2,r3,r2
   13c50:	e0bff515 	stw	r2,-44(fp)
   13c54:	e0fff417 	ldw	r3,-48(fp)
   13c58:	00810034 	movhi	r2,1024
   13c5c:	10bfffc4 	addi	r2,r2,-1
   13c60:	1884703a 	and	r2,r3,r2
   13c64:	e0bff415 	stw	r2,-48(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; m = t2;
   13c68:	e0bff517 	ldw	r2,-44(fp)
   13c6c:	1004d6ba 	srli	r2,r2,26
   13c70:	e0fff617 	ldw	r3,-40(fp)
   13c74:	1885883a 	add	r2,r3,r2
   13c78:	e0bff615 	stw	r2,-40(fp)
   13c7c:	e0fff517 	ldw	r3,-44(fp)
   13c80:	00810034 	movhi	r2,1024
   13c84:	10bfffc4 	addi	r2,r2,-1
   13c88:	1884703a 	and	r2,r3,r2
   13c8c:	e0bff515 	stw	r2,-44(fp)
   13c90:	e0bff517 	ldw	r2,-44(fp)
   13c94:	e0bffe15 	stw	r2,-8(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; m &= t3;
   13c98:	e0bff617 	ldw	r2,-40(fp)
   13c9c:	1004d6ba 	srli	r2,r2,26
   13ca0:	e0fff717 	ldw	r3,-36(fp)
   13ca4:	1885883a 	add	r2,r3,r2
   13ca8:	e0bff715 	stw	r2,-36(fp)
   13cac:	e0fff617 	ldw	r3,-40(fp)
   13cb0:	00810034 	movhi	r2,1024
   13cb4:	10bfffc4 	addi	r2,r2,-1
   13cb8:	1884703a 	and	r2,r3,r2
   13cbc:	e0bff615 	stw	r2,-40(fp)
   13cc0:	e0fffe17 	ldw	r3,-8(fp)
   13cc4:	e0bff617 	ldw	r2,-40(fp)
   13cc8:	1884703a 	and	r2,r3,r2
   13ccc:	e0bffe15 	stw	r2,-8(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; m &= t4;
   13cd0:	e0bff717 	ldw	r2,-36(fp)
   13cd4:	1004d6ba 	srli	r2,r2,26
   13cd8:	e0fff817 	ldw	r3,-32(fp)
   13cdc:	1885883a 	add	r2,r3,r2
   13ce0:	e0bff815 	stw	r2,-32(fp)
   13ce4:	e0fff717 	ldw	r3,-36(fp)
   13ce8:	00810034 	movhi	r2,1024
   13cec:	10bfffc4 	addi	r2,r2,-1
   13cf0:	1884703a 	and	r2,r3,r2
   13cf4:	e0bff715 	stw	r2,-36(fp)
   13cf8:	e0fffe17 	ldw	r3,-8(fp)
   13cfc:	e0bff717 	ldw	r2,-36(fp)
   13d00:	1884703a 	and	r2,r3,r2
   13d04:	e0bffe15 	stw	r2,-8(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; m &= t5;
   13d08:	e0bff817 	ldw	r2,-32(fp)
   13d0c:	1004d6ba 	srli	r2,r2,26
   13d10:	e0fff917 	ldw	r3,-28(fp)
   13d14:	1885883a 	add	r2,r3,r2
   13d18:	e0bff915 	stw	r2,-28(fp)
   13d1c:	e0fff817 	ldw	r3,-32(fp)
   13d20:	00810034 	movhi	r2,1024
   13d24:	10bfffc4 	addi	r2,r2,-1
   13d28:	1884703a 	and	r2,r3,r2
   13d2c:	e0bff815 	stw	r2,-32(fp)
   13d30:	e0fffe17 	ldw	r3,-8(fp)
   13d34:	e0bff817 	ldw	r2,-32(fp)
   13d38:	1884703a 	and	r2,r3,r2
   13d3c:	e0bffe15 	stw	r2,-8(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; m &= t6;
   13d40:	e0bff917 	ldw	r2,-28(fp)
   13d44:	1004d6ba 	srli	r2,r2,26
   13d48:	e0fffa17 	ldw	r3,-24(fp)
   13d4c:	1885883a 	add	r2,r3,r2
   13d50:	e0bffa15 	stw	r2,-24(fp)
   13d54:	e0fff917 	ldw	r3,-28(fp)
   13d58:	00810034 	movhi	r2,1024
   13d5c:	10bfffc4 	addi	r2,r2,-1
   13d60:	1884703a 	and	r2,r3,r2
   13d64:	e0bff915 	stw	r2,-28(fp)
   13d68:	e0fffe17 	ldw	r3,-8(fp)
   13d6c:	e0bff917 	ldw	r2,-28(fp)
   13d70:	1884703a 	and	r2,r3,r2
   13d74:	e0bffe15 	stw	r2,-8(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; m &= t7;
   13d78:	e0bffa17 	ldw	r2,-24(fp)
   13d7c:	1004d6ba 	srli	r2,r2,26
   13d80:	e0fffb17 	ldw	r3,-20(fp)
   13d84:	1885883a 	add	r2,r3,r2
   13d88:	e0bffb15 	stw	r2,-20(fp)
   13d8c:	e0fffa17 	ldw	r3,-24(fp)
   13d90:	00810034 	movhi	r2,1024
   13d94:	10bfffc4 	addi	r2,r2,-1
   13d98:	1884703a 	and	r2,r3,r2
   13d9c:	e0bffa15 	stw	r2,-24(fp)
   13da0:	e0fffe17 	ldw	r3,-8(fp)
   13da4:	e0bffa17 	ldw	r2,-24(fp)
   13da8:	1884703a 	and	r2,r3,r2
   13dac:	e0bffe15 	stw	r2,-8(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; m &= t8;
   13db0:	e0bffb17 	ldw	r2,-20(fp)
   13db4:	1004d6ba 	srli	r2,r2,26
   13db8:	e0fffc17 	ldw	r3,-16(fp)
   13dbc:	1885883a 	add	r2,r3,r2
   13dc0:	e0bffc15 	stw	r2,-16(fp)
   13dc4:	e0fffb17 	ldw	r3,-20(fp)
   13dc8:	00810034 	movhi	r2,1024
   13dcc:	10bfffc4 	addi	r2,r2,-1
   13dd0:	1884703a 	and	r2,r3,r2
   13dd4:	e0bffb15 	stw	r2,-20(fp)
   13dd8:	e0fffe17 	ldw	r3,-8(fp)
   13ddc:	e0bffb17 	ldw	r2,-20(fp)
   13de0:	1884703a 	and	r2,r3,r2
   13de4:	e0bffe15 	stw	r2,-8(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   13de8:	e0bffc17 	ldw	r2,-16(fp)
   13dec:	1004d5fa 	srli	r2,r2,23
   13df0:	1004c03a 	cmpne	r2,r2,zero
   13df4:	10803fcc 	andi	r2,r2,255
   13df8:	10000d26 	beq	r2,zero,13e30 <secp256k1_fe_normalize+0x2f4>
   13dfc:	d0a01617 	ldw	r2,-32680(gp)
   13e00:	10c00317 	ldw	r3,12(r2)
   13e04:	00800174 	movhi	r2,5
   13e08:	1091f304 	addi	r2,r2,18380
   13e0c:	d8800015 	stw	r2,0(sp)
   13e10:	01c01104 	movi	r7,68
   13e14:	01800174 	movhi	r6,5
   13e18:	3191dd04 	addi	r6,r6,18292
   13e1c:	01400174 	movhi	r5,5
   13e20:	2951e804 	addi	r5,r5,18336
   13e24:	1809883a 	mov	r4,r3
   13e28:	00461000 	call	46100 <fprintf>
   13e2c:	0045fd40 	call	45fd4 <abort>

    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
    x = (t9 >> 22) | ((t9 == 0x03FFFFFUL) & (m == 0x3FFFFFFUL)
   13e30:	e0bffc17 	ldw	r2,-16(fp)
   13e34:	1006d5ba 	srli	r3,r2,22
   13e38:	e13ffc17 	ldw	r4,-16(fp)
   13e3c:	00801034 	movhi	r2,64
   13e40:	10bfffc4 	addi	r2,r2,-1
   13e44:	2085003a 	cmpeq	r2,r4,r2
   13e48:	100b883a 	mov	r5,r2
   13e4c:	e13ffe17 	ldw	r4,-8(fp)
   13e50:	00810034 	movhi	r2,1024
   13e54:	10bfffc4 	addi	r2,r2,-1
   13e58:	2085003a 	cmpeq	r2,r4,r2
   13e5c:	2884703a 	and	r2,r5,r2
   13e60:	11003fcc 	andi	r4,r2,255
        & ((t1 + 0x40UL + ((t0 + 0x3D1UL) >> 26)) > 0x3FFFFFFUL));
   13e64:	e0bff317 	ldw	r2,-52(fp)
   13e68:	1080f444 	addi	r2,r2,977
   13e6c:	100ad6ba 	srli	r5,r2,26
   13e70:	e0bff417 	ldw	r2,-48(fp)
   13e74:	2885883a 	add	r2,r5,r2
   13e78:	11401004 	addi	r5,r2,64
   13e7c:	00810034 	movhi	r2,1024
   13e80:	2885403a 	cmpgeu	r2,r5,r2
   13e84:	10803fcc 	andi	r2,r2,255
   13e88:	2084703a 	and	r2,r4,r2

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);

    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
    x = (t9 >> 22) | ((t9 == 0x03FFFFFUL) & (m == 0x3FFFFFFUL)
   13e8c:	1884b03a 	or	r2,r3,r2
   13e90:	e0bffd15 	stw	r2,-12(fp)
        & ((t1 + 0x40UL + ((t0 + 0x3D1UL) >> 26)) > 0x3FFFFFFUL));

    /* Apply the final reduction (for constant-time behaviour, we do it always) */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   13e94:	0140f444 	movi	r5,977
   13e98:	e13ffd17 	ldw	r4,-12(fp)
   13e9c:	0043af40 	call	43af4 <__mulsi3>
   13ea0:	1007883a 	mov	r3,r2
   13ea4:	e0bff317 	ldw	r2,-52(fp)
   13ea8:	10c5883a 	add	r2,r2,r3
   13eac:	e0bff315 	stw	r2,-52(fp)
   13eb0:	e0bffd17 	ldw	r2,-12(fp)
   13eb4:	100491ba 	slli	r2,r2,6
   13eb8:	e0fff417 	ldw	r3,-48(fp)
   13ebc:	1885883a 	add	r2,r3,r2
   13ec0:	e0bff415 	stw	r2,-48(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   13ec4:	e0bff317 	ldw	r2,-52(fp)
   13ec8:	1004d6ba 	srli	r2,r2,26
   13ecc:	e0fff417 	ldw	r3,-48(fp)
   13ed0:	1885883a 	add	r2,r3,r2
   13ed4:	e0bff415 	stw	r2,-48(fp)
   13ed8:	e0fff317 	ldw	r3,-52(fp)
   13edc:	00810034 	movhi	r2,1024
   13ee0:	10bfffc4 	addi	r2,r2,-1
   13ee4:	1884703a 	and	r2,r3,r2
   13ee8:	e0bff315 	stw	r2,-52(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   13eec:	e0bff417 	ldw	r2,-48(fp)
   13ef0:	1004d6ba 	srli	r2,r2,26
   13ef4:	e0fff517 	ldw	r3,-44(fp)
   13ef8:	1885883a 	add	r2,r3,r2
   13efc:	e0bff515 	stw	r2,-44(fp)
   13f00:	e0fff417 	ldw	r3,-48(fp)
   13f04:	00810034 	movhi	r2,1024
   13f08:	10bfffc4 	addi	r2,r2,-1
   13f0c:	1884703a 	and	r2,r3,r2
   13f10:	e0bff415 	stw	r2,-48(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;
   13f14:	e0bff517 	ldw	r2,-44(fp)
   13f18:	1004d6ba 	srli	r2,r2,26
   13f1c:	e0fff617 	ldw	r3,-40(fp)
   13f20:	1885883a 	add	r2,r3,r2
   13f24:	e0bff615 	stw	r2,-40(fp)
   13f28:	e0fff517 	ldw	r3,-44(fp)
   13f2c:	00810034 	movhi	r2,1024
   13f30:	10bfffc4 	addi	r2,r2,-1
   13f34:	1884703a 	and	r2,r3,r2
   13f38:	e0bff515 	stw	r2,-44(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;
   13f3c:	e0bff617 	ldw	r2,-40(fp)
   13f40:	1004d6ba 	srli	r2,r2,26
   13f44:	e0fff717 	ldw	r3,-36(fp)
   13f48:	1885883a 	add	r2,r3,r2
   13f4c:	e0bff715 	stw	r2,-36(fp)
   13f50:	e0fff617 	ldw	r3,-40(fp)
   13f54:	00810034 	movhi	r2,1024
   13f58:	10bfffc4 	addi	r2,r2,-1
   13f5c:	1884703a 	and	r2,r3,r2
   13f60:	e0bff615 	stw	r2,-40(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;
   13f64:	e0bff717 	ldw	r2,-36(fp)
   13f68:	1004d6ba 	srli	r2,r2,26
   13f6c:	e0fff817 	ldw	r3,-32(fp)
   13f70:	1885883a 	add	r2,r3,r2
   13f74:	e0bff815 	stw	r2,-32(fp)
   13f78:	e0fff717 	ldw	r3,-36(fp)
   13f7c:	00810034 	movhi	r2,1024
   13f80:	10bfffc4 	addi	r2,r2,-1
   13f84:	1884703a 	and	r2,r3,r2
   13f88:	e0bff715 	stw	r2,-36(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;
   13f8c:	e0bff817 	ldw	r2,-32(fp)
   13f90:	1004d6ba 	srli	r2,r2,26
   13f94:	e0fff917 	ldw	r3,-28(fp)
   13f98:	1885883a 	add	r2,r3,r2
   13f9c:	e0bff915 	stw	r2,-28(fp)
   13fa0:	e0fff817 	ldw	r3,-32(fp)
   13fa4:	00810034 	movhi	r2,1024
   13fa8:	10bfffc4 	addi	r2,r2,-1
   13fac:	1884703a 	and	r2,r3,r2
   13fb0:	e0bff815 	stw	r2,-32(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;
   13fb4:	e0bff917 	ldw	r2,-28(fp)
   13fb8:	1004d6ba 	srli	r2,r2,26
   13fbc:	e0fffa17 	ldw	r3,-24(fp)
   13fc0:	1885883a 	add	r2,r3,r2
   13fc4:	e0bffa15 	stw	r2,-24(fp)
   13fc8:	e0fff917 	ldw	r3,-28(fp)
   13fcc:	00810034 	movhi	r2,1024
   13fd0:	10bfffc4 	addi	r2,r2,-1
   13fd4:	1884703a 	and	r2,r3,r2
   13fd8:	e0bff915 	stw	r2,-28(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;
   13fdc:	e0bffa17 	ldw	r2,-24(fp)
   13fe0:	1004d6ba 	srli	r2,r2,26
   13fe4:	e0fffb17 	ldw	r3,-20(fp)
   13fe8:	1885883a 	add	r2,r3,r2
   13fec:	e0bffb15 	stw	r2,-20(fp)
   13ff0:	e0fffa17 	ldw	r3,-24(fp)
   13ff4:	00810034 	movhi	r2,1024
   13ff8:	10bfffc4 	addi	r2,r2,-1
   13ffc:	1884703a 	and	r2,r3,r2
   14000:	e0bffa15 	stw	r2,-24(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;
   14004:	e0bffb17 	ldw	r2,-20(fp)
   14008:	1004d6ba 	srli	r2,r2,26
   1400c:	e0fffc17 	ldw	r3,-16(fp)
   14010:	1885883a 	add	r2,r3,r2
   14014:	e0bffc15 	stw	r2,-16(fp)
   14018:	e0fffb17 	ldw	r3,-20(fp)
   1401c:	00810034 	movhi	r2,1024
   14020:	10bfffc4 	addi	r2,r2,-1
   14024:	1884703a 	and	r2,r3,r2
   14028:	e0bffb15 	stw	r2,-20(fp)

    /* If t9 didn't carry to bit 22 already, then it should have after any final reduction */
    VERIFY_CHECK(t9 >> 22 == x);
   1402c:	e0bffc17 	ldw	r2,-16(fp)
   14030:	1006d5ba 	srli	r3,r2,22
   14034:	e0bffd17 	ldw	r2,-12(fp)
   14038:	1884c03a 	cmpne	r2,r3,r2
   1403c:	10803fcc 	andi	r2,r2,255
   14040:	10000d26 	beq	r2,zero,14078 <secp256k1_fe_normalize+0x53c>
   14044:	d0a01617 	ldw	r2,-32680(gp)
   14048:	10c00317 	ldw	r3,12(r2)
   1404c:	00800174 	movhi	r2,5
   14050:	1091fd04 	addi	r2,r2,18420
   14054:	d8800015 	stw	r2,0(sp)
   14058:	01c015c4 	movi	r7,87
   1405c:	01800174 	movhi	r6,5
   14060:	3191dd04 	addi	r6,r6,18292
   14064:	01400174 	movhi	r5,5
   14068:	2951e804 	addi	r5,r5,18336
   1406c:	1809883a 	mov	r4,r3
   14070:	00461000 	call	46100 <fprintf>
   14074:	0045fd40 	call	45fd4 <abort>

    /* Mask off the possible multiple of 2^256 from the final reduction */
    t9 &= 0x03FFFFFUL;
   14078:	e0fffc17 	ldw	r3,-16(fp)
   1407c:	00801034 	movhi	r2,64
   14080:	10bfffc4 	addi	r2,r2,-1
   14084:	1884703a 	and	r2,r3,r2
   14088:	e0bffc15 	stw	r2,-16(fp)

    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;
   1408c:	e0bfff17 	ldw	r2,-4(fp)
   14090:	e0fff317 	ldw	r3,-52(fp)
   14094:	10c00015 	stw	r3,0(r2)
   14098:	e0bfff17 	ldw	r2,-4(fp)
   1409c:	e0fff417 	ldw	r3,-48(fp)
   140a0:	10c00115 	stw	r3,4(r2)
   140a4:	e0bfff17 	ldw	r2,-4(fp)
   140a8:	e0fff517 	ldw	r3,-44(fp)
   140ac:	10c00215 	stw	r3,8(r2)
   140b0:	e0bfff17 	ldw	r2,-4(fp)
   140b4:	e0fff617 	ldw	r3,-40(fp)
   140b8:	10c00315 	stw	r3,12(r2)
   140bc:	e0bfff17 	ldw	r2,-4(fp)
   140c0:	e0fff717 	ldw	r3,-36(fp)
   140c4:	10c00415 	stw	r3,16(r2)
    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;
   140c8:	e0bfff17 	ldw	r2,-4(fp)
   140cc:	e0fff817 	ldw	r3,-32(fp)
   140d0:	10c00515 	stw	r3,20(r2)
   140d4:	e0bfff17 	ldw	r2,-4(fp)
   140d8:	e0fff917 	ldw	r3,-28(fp)
   140dc:	10c00615 	stw	r3,24(r2)
   140e0:	e0bfff17 	ldw	r2,-4(fp)
   140e4:	e0fffa17 	ldw	r3,-24(fp)
   140e8:	10c00715 	stw	r3,28(r2)
   140ec:	e0bfff17 	ldw	r2,-4(fp)
   140f0:	e0fffb17 	ldw	r3,-20(fp)
   140f4:	10c00815 	stw	r3,32(r2)
   140f8:	e0bfff17 	ldw	r2,-4(fp)
   140fc:	e0fffc17 	ldw	r3,-16(fp)
   14100:	10c00915 	stw	r3,36(r2)

#ifdef VERIFY
    r->magnitude = 1;
   14104:	e0bfff17 	ldw	r2,-4(fp)
   14108:	00c00044 	movi	r3,1
   1410c:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   14110:	e0bfff17 	ldw	r2,-4(fp)
   14114:	00c00044 	movi	r3,1
   14118:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_verify(r);
   1411c:	e13fff17 	ldw	r4,-4(fp)
   14120:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
}
   14124:	0001883a 	nop
   14128:	e037883a 	mov	sp,fp
   1412c:	dfc00117 	ldw	ra,4(sp)
   14130:	df000017 	ldw	fp,0(sp)
   14134:	dec00204 	addi	sp,sp,8
   14138:	f800283a 	ret

0001413c <secp256k1_fe_normalize_weak>:

static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {
   1413c:	defff104 	addi	sp,sp,-60
   14140:	dfc00e15 	stw	ra,56(sp)
   14144:	df000d15 	stw	fp,52(sp)
   14148:	df000d04 	addi	fp,sp,52
   1414c:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],
   14150:	e0bfff17 	ldw	r2,-4(fp)
   14154:	10800017 	ldw	r2,0(r2)
   14158:	e0bff415 	stw	r2,-48(fp)
   1415c:	e0bfff17 	ldw	r2,-4(fp)
   14160:	10800117 	ldw	r2,4(r2)
   14164:	e0bff515 	stw	r2,-44(fp)
   14168:	e0bfff17 	ldw	r2,-4(fp)
   1416c:	10800217 	ldw	r2,8(r2)
   14170:	e0bff615 	stw	r2,-40(fp)
   14174:	e0bfff17 	ldw	r2,-4(fp)
   14178:	10800317 	ldw	r2,12(r2)
   1417c:	e0bff715 	stw	r2,-36(fp)
   14180:	e0bfff17 	ldw	r2,-4(fp)
   14184:	10800417 	ldw	r2,16(r2)
   14188:	e0bff815 	stw	r2,-32(fp)
             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];
   1418c:	e0bfff17 	ldw	r2,-4(fp)
   14190:	10800517 	ldw	r2,20(r2)
   14194:	e0bff915 	stw	r2,-28(fp)
   14198:	e0bfff17 	ldw	r2,-4(fp)
   1419c:	10800617 	ldw	r2,24(r2)
   141a0:	e0bffa15 	stw	r2,-24(fp)
   141a4:	e0bfff17 	ldw	r2,-4(fp)
   141a8:	10800717 	ldw	r2,28(r2)
   141ac:	e0bffb15 	stw	r2,-20(fp)
   141b0:	e0bfff17 	ldw	r2,-4(fp)
   141b4:	10800817 	ldw	r2,32(r2)
   141b8:	e0bffc15 	stw	r2,-16(fp)
   141bc:	e0bfff17 	ldw	r2,-4(fp)
   141c0:	10800917 	ldw	r2,36(r2)
   141c4:	e0bffd15 	stw	r2,-12(fp)

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;
   141c8:	e0bffd17 	ldw	r2,-12(fp)
   141cc:	1004d5ba 	srli	r2,r2,22
   141d0:	e0bffe15 	stw	r2,-8(fp)
   141d4:	e0fffd17 	ldw	r3,-12(fp)
   141d8:	00801034 	movhi	r2,64
   141dc:	10bfffc4 	addi	r2,r2,-1
   141e0:	1884703a 	and	r2,r3,r2
   141e4:	e0bffd15 	stw	r2,-12(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   141e8:	0140f444 	movi	r5,977
   141ec:	e13ffe17 	ldw	r4,-8(fp)
   141f0:	0043af40 	call	43af4 <__mulsi3>
   141f4:	1007883a 	mov	r3,r2
   141f8:	e0bff417 	ldw	r2,-48(fp)
   141fc:	10c5883a 	add	r2,r2,r3
   14200:	e0bff415 	stw	r2,-48(fp)
   14204:	e0bffe17 	ldw	r2,-8(fp)
   14208:	100491ba 	slli	r2,r2,6
   1420c:	e0fff517 	ldw	r3,-44(fp)
   14210:	1885883a 	add	r2,r3,r2
   14214:	e0bff515 	stw	r2,-44(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   14218:	e0bff417 	ldw	r2,-48(fp)
   1421c:	1004d6ba 	srli	r2,r2,26
   14220:	e0fff517 	ldw	r3,-44(fp)
   14224:	1885883a 	add	r2,r3,r2
   14228:	e0bff515 	stw	r2,-44(fp)
   1422c:	e0fff417 	ldw	r3,-48(fp)
   14230:	00810034 	movhi	r2,1024
   14234:	10bfffc4 	addi	r2,r2,-1
   14238:	1884703a 	and	r2,r3,r2
   1423c:	e0bff415 	stw	r2,-48(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   14240:	e0bff517 	ldw	r2,-44(fp)
   14244:	1004d6ba 	srli	r2,r2,26
   14248:	e0fff617 	ldw	r3,-40(fp)
   1424c:	1885883a 	add	r2,r3,r2
   14250:	e0bff615 	stw	r2,-40(fp)
   14254:	e0fff517 	ldw	r3,-44(fp)
   14258:	00810034 	movhi	r2,1024
   1425c:	10bfffc4 	addi	r2,r2,-1
   14260:	1884703a 	and	r2,r3,r2
   14264:	e0bff515 	stw	r2,-44(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;
   14268:	e0bff617 	ldw	r2,-40(fp)
   1426c:	1004d6ba 	srli	r2,r2,26
   14270:	e0fff717 	ldw	r3,-36(fp)
   14274:	1885883a 	add	r2,r3,r2
   14278:	e0bff715 	stw	r2,-36(fp)
   1427c:	e0fff617 	ldw	r3,-40(fp)
   14280:	00810034 	movhi	r2,1024
   14284:	10bfffc4 	addi	r2,r2,-1
   14288:	1884703a 	and	r2,r3,r2
   1428c:	e0bff615 	stw	r2,-40(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;
   14290:	e0bff717 	ldw	r2,-36(fp)
   14294:	1004d6ba 	srli	r2,r2,26
   14298:	e0fff817 	ldw	r3,-32(fp)
   1429c:	1885883a 	add	r2,r3,r2
   142a0:	e0bff815 	stw	r2,-32(fp)
   142a4:	e0fff717 	ldw	r3,-36(fp)
   142a8:	00810034 	movhi	r2,1024
   142ac:	10bfffc4 	addi	r2,r2,-1
   142b0:	1884703a 	and	r2,r3,r2
   142b4:	e0bff715 	stw	r2,-36(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;
   142b8:	e0bff817 	ldw	r2,-32(fp)
   142bc:	1004d6ba 	srli	r2,r2,26
   142c0:	e0fff917 	ldw	r3,-28(fp)
   142c4:	1885883a 	add	r2,r3,r2
   142c8:	e0bff915 	stw	r2,-28(fp)
   142cc:	e0fff817 	ldw	r3,-32(fp)
   142d0:	00810034 	movhi	r2,1024
   142d4:	10bfffc4 	addi	r2,r2,-1
   142d8:	1884703a 	and	r2,r3,r2
   142dc:	e0bff815 	stw	r2,-32(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;
   142e0:	e0bff917 	ldw	r2,-28(fp)
   142e4:	1004d6ba 	srli	r2,r2,26
   142e8:	e0fffa17 	ldw	r3,-24(fp)
   142ec:	1885883a 	add	r2,r3,r2
   142f0:	e0bffa15 	stw	r2,-24(fp)
   142f4:	e0fff917 	ldw	r3,-28(fp)
   142f8:	00810034 	movhi	r2,1024
   142fc:	10bfffc4 	addi	r2,r2,-1
   14300:	1884703a 	and	r2,r3,r2
   14304:	e0bff915 	stw	r2,-28(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;
   14308:	e0bffa17 	ldw	r2,-24(fp)
   1430c:	1004d6ba 	srli	r2,r2,26
   14310:	e0fffb17 	ldw	r3,-20(fp)
   14314:	1885883a 	add	r2,r3,r2
   14318:	e0bffb15 	stw	r2,-20(fp)
   1431c:	e0fffa17 	ldw	r3,-24(fp)
   14320:	00810034 	movhi	r2,1024
   14324:	10bfffc4 	addi	r2,r2,-1
   14328:	1884703a 	and	r2,r3,r2
   1432c:	e0bffa15 	stw	r2,-24(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;
   14330:	e0bffb17 	ldw	r2,-20(fp)
   14334:	1004d6ba 	srli	r2,r2,26
   14338:	e0fffc17 	ldw	r3,-16(fp)
   1433c:	1885883a 	add	r2,r3,r2
   14340:	e0bffc15 	stw	r2,-16(fp)
   14344:	e0fffb17 	ldw	r3,-20(fp)
   14348:	00810034 	movhi	r2,1024
   1434c:	10bfffc4 	addi	r2,r2,-1
   14350:	1884703a 	and	r2,r3,r2
   14354:	e0bffb15 	stw	r2,-20(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;
   14358:	e0bffc17 	ldw	r2,-16(fp)
   1435c:	1004d6ba 	srli	r2,r2,26
   14360:	e0fffd17 	ldw	r3,-12(fp)
   14364:	1885883a 	add	r2,r3,r2
   14368:	e0bffd15 	stw	r2,-12(fp)
   1436c:	e0fffc17 	ldw	r3,-16(fp)
   14370:	00810034 	movhi	r2,1024
   14374:	10bfffc4 	addi	r2,r2,-1
   14378:	1884703a 	and	r2,r3,r2
   1437c:	e0bffc15 	stw	r2,-16(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   14380:	e0bffd17 	ldw	r2,-12(fp)
   14384:	1004d5fa 	srli	r2,r2,23
   14388:	1004c03a 	cmpne	r2,r2,zero
   1438c:	10803fcc 	andi	r2,r2,255
   14390:	10000d26 	beq	r2,zero,143c8 <secp256k1_fe_normalize_weak+0x28c>
   14394:	d0a01617 	ldw	r2,-32680(gp)
   14398:	10c00317 	ldw	r3,12(r2)
   1439c:	00800174 	movhi	r2,5
   143a0:	1091f304 	addi	r2,r2,18380
   143a4:	d8800015 	stw	r2,0(sp)
   143a8:	01c01e84 	movi	r7,122
   143ac:	01800174 	movhi	r6,5
   143b0:	3191dd04 	addi	r6,r6,18292
   143b4:	01400174 	movhi	r5,5
   143b8:	2951e804 	addi	r5,r5,18336
   143bc:	1809883a 	mov	r4,r3
   143c0:	00461000 	call	46100 <fprintf>
   143c4:	0045fd40 	call	45fd4 <abort>

    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;
   143c8:	e0bfff17 	ldw	r2,-4(fp)
   143cc:	e0fff417 	ldw	r3,-48(fp)
   143d0:	10c00015 	stw	r3,0(r2)
   143d4:	e0bfff17 	ldw	r2,-4(fp)
   143d8:	e0fff517 	ldw	r3,-44(fp)
   143dc:	10c00115 	stw	r3,4(r2)
   143e0:	e0bfff17 	ldw	r2,-4(fp)
   143e4:	e0fff617 	ldw	r3,-40(fp)
   143e8:	10c00215 	stw	r3,8(r2)
   143ec:	e0bfff17 	ldw	r2,-4(fp)
   143f0:	e0fff717 	ldw	r3,-36(fp)
   143f4:	10c00315 	stw	r3,12(r2)
   143f8:	e0bfff17 	ldw	r2,-4(fp)
   143fc:	e0fff817 	ldw	r3,-32(fp)
   14400:	10c00415 	stw	r3,16(r2)
    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;
   14404:	e0bfff17 	ldw	r2,-4(fp)
   14408:	e0fff917 	ldw	r3,-28(fp)
   1440c:	10c00515 	stw	r3,20(r2)
   14410:	e0bfff17 	ldw	r2,-4(fp)
   14414:	e0fffa17 	ldw	r3,-24(fp)
   14418:	10c00615 	stw	r3,24(r2)
   1441c:	e0bfff17 	ldw	r2,-4(fp)
   14420:	e0fffb17 	ldw	r3,-20(fp)
   14424:	10c00715 	stw	r3,28(r2)
   14428:	e0bfff17 	ldw	r2,-4(fp)
   1442c:	e0fffc17 	ldw	r3,-16(fp)
   14430:	10c00815 	stw	r3,32(r2)
   14434:	e0bfff17 	ldw	r2,-4(fp)
   14438:	e0fffd17 	ldw	r3,-12(fp)
   1443c:	10c00915 	stw	r3,36(r2)

#ifdef VERIFY
    r->magnitude = 1;
   14440:	e0bfff17 	ldw	r2,-4(fp)
   14444:	00c00044 	movi	r3,1
   14448:	10c00a15 	stw	r3,40(r2)
    secp256k1_fe_verify(r);
   1444c:	e13fff17 	ldw	r4,-4(fp)
   14450:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
}
   14454:	0001883a 	nop
   14458:	e037883a 	mov	sp,fp
   1445c:	dfc00117 	ldw	ra,4(sp)
   14460:	df000017 	ldw	fp,0(sp)
   14464:	dec00204 	addi	sp,sp,8
   14468:	f800283a 	ret

0001446c <secp256k1_fe_normalize_var>:

static void secp256k1_fe_normalize_var(secp256k1_fe *r) {
   1446c:	defff004 	addi	sp,sp,-64
   14470:	dfc00f15 	stw	ra,60(sp)
   14474:	df000e15 	stw	fp,56(sp)
   14478:	df000e04 	addi	fp,sp,56
   1447c:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],
   14480:	e0bfff17 	ldw	r2,-4(fp)
   14484:	10800017 	ldw	r2,0(r2)
   14488:	e0bff315 	stw	r2,-52(fp)
   1448c:	e0bfff17 	ldw	r2,-4(fp)
   14490:	10800117 	ldw	r2,4(r2)
   14494:	e0bff415 	stw	r2,-48(fp)
   14498:	e0bfff17 	ldw	r2,-4(fp)
   1449c:	10800217 	ldw	r2,8(r2)
   144a0:	e0bff515 	stw	r2,-44(fp)
   144a4:	e0bfff17 	ldw	r2,-4(fp)
   144a8:	10800317 	ldw	r2,12(r2)
   144ac:	e0bff615 	stw	r2,-40(fp)
   144b0:	e0bfff17 	ldw	r2,-4(fp)
   144b4:	10800417 	ldw	r2,16(r2)
   144b8:	e0bff715 	stw	r2,-36(fp)
             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];
   144bc:	e0bfff17 	ldw	r2,-4(fp)
   144c0:	10800517 	ldw	r2,20(r2)
   144c4:	e0bff815 	stw	r2,-32(fp)
   144c8:	e0bfff17 	ldw	r2,-4(fp)
   144cc:	10800617 	ldw	r2,24(r2)
   144d0:	e0bff915 	stw	r2,-28(fp)
   144d4:	e0bfff17 	ldw	r2,-4(fp)
   144d8:	10800717 	ldw	r2,28(r2)
   144dc:	e0bffa15 	stw	r2,-24(fp)
   144e0:	e0bfff17 	ldw	r2,-4(fp)
   144e4:	10800817 	ldw	r2,32(r2)
   144e8:	e0bffb15 	stw	r2,-20(fp)
   144ec:	e0bfff17 	ldw	r2,-4(fp)
   144f0:	10800917 	ldw	r2,36(r2)
   144f4:	e0bffc15 	stw	r2,-16(fp)

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    uint32_t m;
    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;
   144f8:	e0bffc17 	ldw	r2,-16(fp)
   144fc:	1004d5ba 	srli	r2,r2,22
   14500:	e0bffd15 	stw	r2,-12(fp)
   14504:	e0fffc17 	ldw	r3,-16(fp)
   14508:	00801034 	movhi	r2,64
   1450c:	10bfffc4 	addi	r2,r2,-1
   14510:	1884703a 	and	r2,r3,r2
   14514:	e0bffc15 	stw	r2,-16(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   14518:	0140f444 	movi	r5,977
   1451c:	e13ffd17 	ldw	r4,-12(fp)
   14520:	0043af40 	call	43af4 <__mulsi3>
   14524:	1007883a 	mov	r3,r2
   14528:	e0bff317 	ldw	r2,-52(fp)
   1452c:	10c5883a 	add	r2,r2,r3
   14530:	e0bff315 	stw	r2,-52(fp)
   14534:	e0bffd17 	ldw	r2,-12(fp)
   14538:	100491ba 	slli	r2,r2,6
   1453c:	e0fff417 	ldw	r3,-48(fp)
   14540:	1885883a 	add	r2,r3,r2
   14544:	e0bff415 	stw	r2,-48(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   14548:	e0bff317 	ldw	r2,-52(fp)
   1454c:	1004d6ba 	srli	r2,r2,26
   14550:	e0fff417 	ldw	r3,-48(fp)
   14554:	1885883a 	add	r2,r3,r2
   14558:	e0bff415 	stw	r2,-48(fp)
   1455c:	e0fff317 	ldw	r3,-52(fp)
   14560:	00810034 	movhi	r2,1024
   14564:	10bfffc4 	addi	r2,r2,-1
   14568:	1884703a 	and	r2,r3,r2
   1456c:	e0bff315 	stw	r2,-52(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   14570:	e0bff417 	ldw	r2,-48(fp)
   14574:	1004d6ba 	srli	r2,r2,26
   14578:	e0fff517 	ldw	r3,-44(fp)
   1457c:	1885883a 	add	r2,r3,r2
   14580:	e0bff515 	stw	r2,-44(fp)
   14584:	e0fff417 	ldw	r3,-48(fp)
   14588:	00810034 	movhi	r2,1024
   1458c:	10bfffc4 	addi	r2,r2,-1
   14590:	1884703a 	and	r2,r3,r2
   14594:	e0bff415 	stw	r2,-48(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; m = t2;
   14598:	e0bff517 	ldw	r2,-44(fp)
   1459c:	1004d6ba 	srli	r2,r2,26
   145a0:	e0fff617 	ldw	r3,-40(fp)
   145a4:	1885883a 	add	r2,r3,r2
   145a8:	e0bff615 	stw	r2,-40(fp)
   145ac:	e0fff517 	ldw	r3,-44(fp)
   145b0:	00810034 	movhi	r2,1024
   145b4:	10bfffc4 	addi	r2,r2,-1
   145b8:	1884703a 	and	r2,r3,r2
   145bc:	e0bff515 	stw	r2,-44(fp)
   145c0:	e0bff517 	ldw	r2,-44(fp)
   145c4:	e0bffe15 	stw	r2,-8(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; m &= t3;
   145c8:	e0bff617 	ldw	r2,-40(fp)
   145cc:	1004d6ba 	srli	r2,r2,26
   145d0:	e0fff717 	ldw	r3,-36(fp)
   145d4:	1885883a 	add	r2,r3,r2
   145d8:	e0bff715 	stw	r2,-36(fp)
   145dc:	e0fff617 	ldw	r3,-40(fp)
   145e0:	00810034 	movhi	r2,1024
   145e4:	10bfffc4 	addi	r2,r2,-1
   145e8:	1884703a 	and	r2,r3,r2
   145ec:	e0bff615 	stw	r2,-40(fp)
   145f0:	e0fffe17 	ldw	r3,-8(fp)
   145f4:	e0bff617 	ldw	r2,-40(fp)
   145f8:	1884703a 	and	r2,r3,r2
   145fc:	e0bffe15 	stw	r2,-8(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; m &= t4;
   14600:	e0bff717 	ldw	r2,-36(fp)
   14604:	1004d6ba 	srli	r2,r2,26
   14608:	e0fff817 	ldw	r3,-32(fp)
   1460c:	1885883a 	add	r2,r3,r2
   14610:	e0bff815 	stw	r2,-32(fp)
   14614:	e0fff717 	ldw	r3,-36(fp)
   14618:	00810034 	movhi	r2,1024
   1461c:	10bfffc4 	addi	r2,r2,-1
   14620:	1884703a 	and	r2,r3,r2
   14624:	e0bff715 	stw	r2,-36(fp)
   14628:	e0fffe17 	ldw	r3,-8(fp)
   1462c:	e0bff717 	ldw	r2,-36(fp)
   14630:	1884703a 	and	r2,r3,r2
   14634:	e0bffe15 	stw	r2,-8(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; m &= t5;
   14638:	e0bff817 	ldw	r2,-32(fp)
   1463c:	1004d6ba 	srli	r2,r2,26
   14640:	e0fff917 	ldw	r3,-28(fp)
   14644:	1885883a 	add	r2,r3,r2
   14648:	e0bff915 	stw	r2,-28(fp)
   1464c:	e0fff817 	ldw	r3,-32(fp)
   14650:	00810034 	movhi	r2,1024
   14654:	10bfffc4 	addi	r2,r2,-1
   14658:	1884703a 	and	r2,r3,r2
   1465c:	e0bff815 	stw	r2,-32(fp)
   14660:	e0fffe17 	ldw	r3,-8(fp)
   14664:	e0bff817 	ldw	r2,-32(fp)
   14668:	1884703a 	and	r2,r3,r2
   1466c:	e0bffe15 	stw	r2,-8(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; m &= t6;
   14670:	e0bff917 	ldw	r2,-28(fp)
   14674:	1004d6ba 	srli	r2,r2,26
   14678:	e0fffa17 	ldw	r3,-24(fp)
   1467c:	1885883a 	add	r2,r3,r2
   14680:	e0bffa15 	stw	r2,-24(fp)
   14684:	e0fff917 	ldw	r3,-28(fp)
   14688:	00810034 	movhi	r2,1024
   1468c:	10bfffc4 	addi	r2,r2,-1
   14690:	1884703a 	and	r2,r3,r2
   14694:	e0bff915 	stw	r2,-28(fp)
   14698:	e0fffe17 	ldw	r3,-8(fp)
   1469c:	e0bff917 	ldw	r2,-28(fp)
   146a0:	1884703a 	and	r2,r3,r2
   146a4:	e0bffe15 	stw	r2,-8(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; m &= t7;
   146a8:	e0bffa17 	ldw	r2,-24(fp)
   146ac:	1004d6ba 	srli	r2,r2,26
   146b0:	e0fffb17 	ldw	r3,-20(fp)
   146b4:	1885883a 	add	r2,r3,r2
   146b8:	e0bffb15 	stw	r2,-20(fp)
   146bc:	e0fffa17 	ldw	r3,-24(fp)
   146c0:	00810034 	movhi	r2,1024
   146c4:	10bfffc4 	addi	r2,r2,-1
   146c8:	1884703a 	and	r2,r3,r2
   146cc:	e0bffa15 	stw	r2,-24(fp)
   146d0:	e0fffe17 	ldw	r3,-8(fp)
   146d4:	e0bffa17 	ldw	r2,-24(fp)
   146d8:	1884703a 	and	r2,r3,r2
   146dc:	e0bffe15 	stw	r2,-8(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; m &= t8;
   146e0:	e0bffb17 	ldw	r2,-20(fp)
   146e4:	1004d6ba 	srli	r2,r2,26
   146e8:	e0fffc17 	ldw	r3,-16(fp)
   146ec:	1885883a 	add	r2,r3,r2
   146f0:	e0bffc15 	stw	r2,-16(fp)
   146f4:	e0fffb17 	ldw	r3,-20(fp)
   146f8:	00810034 	movhi	r2,1024
   146fc:	10bfffc4 	addi	r2,r2,-1
   14700:	1884703a 	and	r2,r3,r2
   14704:	e0bffb15 	stw	r2,-20(fp)
   14708:	e0fffe17 	ldw	r3,-8(fp)
   1470c:	e0bffb17 	ldw	r2,-20(fp)
   14710:	1884703a 	and	r2,r3,r2
   14714:	e0bffe15 	stw	r2,-8(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   14718:	e0bffc17 	ldw	r2,-16(fp)
   1471c:	1004d5fa 	srli	r2,r2,23
   14720:	1004c03a 	cmpne	r2,r2,zero
   14724:	10803fcc 	andi	r2,r2,255
   14728:	10000d26 	beq	r2,zero,14760 <secp256k1_fe_normalize_var+0x2f4>
   1472c:	d0a01617 	ldw	r2,-32680(gp)
   14730:	10c00317 	ldw	r3,12(r2)
   14734:	00800174 	movhi	r2,5
   14738:	1091f304 	addi	r2,r2,18380
   1473c:	d8800015 	stw	r2,0(sp)
   14740:	01c02684 	movi	r7,154
   14744:	01800174 	movhi	r6,5
   14748:	3191dd04 	addi	r6,r6,18292
   1474c:	01400174 	movhi	r5,5
   14750:	2951e804 	addi	r5,r5,18336
   14754:	1809883a 	mov	r4,r3
   14758:	00461000 	call	46100 <fprintf>
   1475c:	0045fd40 	call	45fd4 <abort>

    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
    x = (t9 >> 22) | ((t9 == 0x03FFFFFUL) & (m == 0x3FFFFFFUL)
   14760:	e0bffc17 	ldw	r2,-16(fp)
   14764:	1006d5ba 	srli	r3,r2,22
   14768:	e13ffc17 	ldw	r4,-16(fp)
   1476c:	00801034 	movhi	r2,64
   14770:	10bfffc4 	addi	r2,r2,-1
   14774:	2085003a 	cmpeq	r2,r4,r2
   14778:	100b883a 	mov	r5,r2
   1477c:	e13ffe17 	ldw	r4,-8(fp)
   14780:	00810034 	movhi	r2,1024
   14784:	10bfffc4 	addi	r2,r2,-1
   14788:	2085003a 	cmpeq	r2,r4,r2
   1478c:	2884703a 	and	r2,r5,r2
   14790:	11003fcc 	andi	r4,r2,255
        & ((t1 + 0x40UL + ((t0 + 0x3D1UL) >> 26)) > 0x3FFFFFFUL));
   14794:	e0bff317 	ldw	r2,-52(fp)
   14798:	1080f444 	addi	r2,r2,977
   1479c:	100ad6ba 	srli	r5,r2,26
   147a0:	e0bff417 	ldw	r2,-48(fp)
   147a4:	2885883a 	add	r2,r5,r2
   147a8:	11401004 	addi	r5,r2,64
   147ac:	00810034 	movhi	r2,1024
   147b0:	2885403a 	cmpgeu	r2,r5,r2
   147b4:	10803fcc 	andi	r2,r2,255
   147b8:	2084703a 	and	r2,r4,r2

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);

    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
    x = (t9 >> 22) | ((t9 == 0x03FFFFFUL) & (m == 0x3FFFFFFUL)
   147bc:	1884b03a 	or	r2,r3,r2
   147c0:	e0bffd15 	stw	r2,-12(fp)
        & ((t1 + 0x40UL + ((t0 + 0x3D1UL) >> 26)) > 0x3FFFFFFUL));

    if (x) {
   147c4:	e0bffd17 	ldw	r2,-12(fp)
   147c8:	10007a26 	beq	r2,zero,149b4 <secp256k1_fe_normalize_var+0x548>
        t0 += 0x3D1UL; t1 += (x << 6);
   147cc:	e0bff317 	ldw	r2,-52(fp)
   147d0:	1080f444 	addi	r2,r2,977
   147d4:	e0bff315 	stw	r2,-52(fp)
   147d8:	e0bffd17 	ldw	r2,-12(fp)
   147dc:	100491ba 	slli	r2,r2,6
   147e0:	e0fff417 	ldw	r3,-48(fp)
   147e4:	1885883a 	add	r2,r3,r2
   147e8:	e0bff415 	stw	r2,-48(fp)
        t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;
   147ec:	e0bff317 	ldw	r2,-52(fp)
   147f0:	1004d6ba 	srli	r2,r2,26
   147f4:	e0fff417 	ldw	r3,-48(fp)
   147f8:	1885883a 	add	r2,r3,r2
   147fc:	e0bff415 	stw	r2,-48(fp)
   14800:	e0fff317 	ldw	r3,-52(fp)
   14804:	00810034 	movhi	r2,1024
   14808:	10bfffc4 	addi	r2,r2,-1
   1480c:	1884703a 	and	r2,r3,r2
   14810:	e0bff315 	stw	r2,-52(fp)
        t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;
   14814:	e0bff417 	ldw	r2,-48(fp)
   14818:	1004d6ba 	srli	r2,r2,26
   1481c:	e0fff517 	ldw	r3,-44(fp)
   14820:	1885883a 	add	r2,r3,r2
   14824:	e0bff515 	stw	r2,-44(fp)
   14828:	e0fff417 	ldw	r3,-48(fp)
   1482c:	00810034 	movhi	r2,1024
   14830:	10bfffc4 	addi	r2,r2,-1
   14834:	1884703a 	and	r2,r3,r2
   14838:	e0bff415 	stw	r2,-48(fp)
        t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;
   1483c:	e0bff517 	ldw	r2,-44(fp)
   14840:	1004d6ba 	srli	r2,r2,26
   14844:	e0fff617 	ldw	r3,-40(fp)
   14848:	1885883a 	add	r2,r3,r2
   1484c:	e0bff615 	stw	r2,-40(fp)
   14850:	e0fff517 	ldw	r3,-44(fp)
   14854:	00810034 	movhi	r2,1024
   14858:	10bfffc4 	addi	r2,r2,-1
   1485c:	1884703a 	and	r2,r3,r2
   14860:	e0bff515 	stw	r2,-44(fp)
        t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;
   14864:	e0bff617 	ldw	r2,-40(fp)
   14868:	1004d6ba 	srli	r2,r2,26
   1486c:	e0fff717 	ldw	r3,-36(fp)
   14870:	1885883a 	add	r2,r3,r2
   14874:	e0bff715 	stw	r2,-36(fp)
   14878:	e0fff617 	ldw	r3,-40(fp)
   1487c:	00810034 	movhi	r2,1024
   14880:	10bfffc4 	addi	r2,r2,-1
   14884:	1884703a 	and	r2,r3,r2
   14888:	e0bff615 	stw	r2,-40(fp)
        t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;
   1488c:	e0bff717 	ldw	r2,-36(fp)
   14890:	1004d6ba 	srli	r2,r2,26
   14894:	e0fff817 	ldw	r3,-32(fp)
   14898:	1885883a 	add	r2,r3,r2
   1489c:	e0bff815 	stw	r2,-32(fp)
   148a0:	e0fff717 	ldw	r3,-36(fp)
   148a4:	00810034 	movhi	r2,1024
   148a8:	10bfffc4 	addi	r2,r2,-1
   148ac:	1884703a 	and	r2,r3,r2
   148b0:	e0bff715 	stw	r2,-36(fp)
        t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;
   148b4:	e0bff817 	ldw	r2,-32(fp)
   148b8:	1004d6ba 	srli	r2,r2,26
   148bc:	e0fff917 	ldw	r3,-28(fp)
   148c0:	1885883a 	add	r2,r3,r2
   148c4:	e0bff915 	stw	r2,-28(fp)
   148c8:	e0fff817 	ldw	r3,-32(fp)
   148cc:	00810034 	movhi	r2,1024
   148d0:	10bfffc4 	addi	r2,r2,-1
   148d4:	1884703a 	and	r2,r3,r2
   148d8:	e0bff815 	stw	r2,-32(fp)
        t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;
   148dc:	e0bff917 	ldw	r2,-28(fp)
   148e0:	1004d6ba 	srli	r2,r2,26
   148e4:	e0fffa17 	ldw	r3,-24(fp)
   148e8:	1885883a 	add	r2,r3,r2
   148ec:	e0bffa15 	stw	r2,-24(fp)
   148f0:	e0fff917 	ldw	r3,-28(fp)
   148f4:	00810034 	movhi	r2,1024
   148f8:	10bfffc4 	addi	r2,r2,-1
   148fc:	1884703a 	and	r2,r3,r2
   14900:	e0bff915 	stw	r2,-28(fp)
        t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;
   14904:	e0bffa17 	ldw	r2,-24(fp)
   14908:	1004d6ba 	srli	r2,r2,26
   1490c:	e0fffb17 	ldw	r3,-20(fp)
   14910:	1885883a 	add	r2,r3,r2
   14914:	e0bffb15 	stw	r2,-20(fp)
   14918:	e0fffa17 	ldw	r3,-24(fp)
   1491c:	00810034 	movhi	r2,1024
   14920:	10bfffc4 	addi	r2,r2,-1
   14924:	1884703a 	and	r2,r3,r2
   14928:	e0bffa15 	stw	r2,-24(fp)
        t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;
   1492c:	e0bffb17 	ldw	r2,-20(fp)
   14930:	1004d6ba 	srli	r2,r2,26
   14934:	e0fffc17 	ldw	r3,-16(fp)
   14938:	1885883a 	add	r2,r3,r2
   1493c:	e0bffc15 	stw	r2,-16(fp)
   14940:	e0fffb17 	ldw	r3,-20(fp)
   14944:	00810034 	movhi	r2,1024
   14948:	10bfffc4 	addi	r2,r2,-1
   1494c:	1884703a 	and	r2,r3,r2
   14950:	e0bffb15 	stw	r2,-20(fp)

        /* If t9 didn't carry to bit 22 already, then it should have after any final reduction */
        VERIFY_CHECK(t9 >> 22 == x);
   14954:	e0bffc17 	ldw	r2,-16(fp)
   14958:	1006d5ba 	srli	r3,r2,22
   1495c:	e0bffd17 	ldw	r2,-12(fp)
   14960:	1884c03a 	cmpne	r2,r3,r2
   14964:	10803fcc 	andi	r2,r2,255
   14968:	10000d26 	beq	r2,zero,149a0 <secp256k1_fe_normalize_var+0x534>
   1496c:	d0a01617 	ldw	r2,-32680(gp)
   14970:	10c00317 	ldw	r3,12(r2)
   14974:	00800174 	movhi	r2,5
   14978:	1091fd04 	addi	r2,r2,18420
   1497c:	d8800015 	stw	r2,0(sp)
   14980:	01c02b44 	movi	r7,173
   14984:	01800174 	movhi	r6,5
   14988:	3191dd04 	addi	r6,r6,18292
   1498c:	01400174 	movhi	r5,5
   14990:	2951e804 	addi	r5,r5,18336
   14994:	1809883a 	mov	r4,r3
   14998:	00461000 	call	46100 <fprintf>
   1499c:	0045fd40 	call	45fd4 <abort>

        /* Mask off the possible multiple of 2^256 from the final reduction */
        t9 &= 0x03FFFFFUL;
   149a0:	e0fffc17 	ldw	r3,-16(fp)
   149a4:	00801034 	movhi	r2,64
   149a8:	10bfffc4 	addi	r2,r2,-1
   149ac:	1884703a 	and	r2,r3,r2
   149b0:	e0bffc15 	stw	r2,-16(fp)
    }

    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;
   149b4:	e0bfff17 	ldw	r2,-4(fp)
   149b8:	e0fff317 	ldw	r3,-52(fp)
   149bc:	10c00015 	stw	r3,0(r2)
   149c0:	e0bfff17 	ldw	r2,-4(fp)
   149c4:	e0fff417 	ldw	r3,-48(fp)
   149c8:	10c00115 	stw	r3,4(r2)
   149cc:	e0bfff17 	ldw	r2,-4(fp)
   149d0:	e0fff517 	ldw	r3,-44(fp)
   149d4:	10c00215 	stw	r3,8(r2)
   149d8:	e0bfff17 	ldw	r2,-4(fp)
   149dc:	e0fff617 	ldw	r3,-40(fp)
   149e0:	10c00315 	stw	r3,12(r2)
   149e4:	e0bfff17 	ldw	r2,-4(fp)
   149e8:	e0fff717 	ldw	r3,-36(fp)
   149ec:	10c00415 	stw	r3,16(r2)
    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;
   149f0:	e0bfff17 	ldw	r2,-4(fp)
   149f4:	e0fff817 	ldw	r3,-32(fp)
   149f8:	10c00515 	stw	r3,20(r2)
   149fc:	e0bfff17 	ldw	r2,-4(fp)
   14a00:	e0fff917 	ldw	r3,-28(fp)
   14a04:	10c00615 	stw	r3,24(r2)
   14a08:	e0bfff17 	ldw	r2,-4(fp)
   14a0c:	e0fffa17 	ldw	r3,-24(fp)
   14a10:	10c00715 	stw	r3,28(r2)
   14a14:	e0bfff17 	ldw	r2,-4(fp)
   14a18:	e0fffb17 	ldw	r3,-20(fp)
   14a1c:	10c00815 	stw	r3,32(r2)
   14a20:	e0bfff17 	ldw	r2,-4(fp)
   14a24:	e0fffc17 	ldw	r3,-16(fp)
   14a28:	10c00915 	stw	r3,36(r2)

#ifdef VERIFY
    r->magnitude = 1;
   14a2c:	e0bfff17 	ldw	r2,-4(fp)
   14a30:	00c00044 	movi	r3,1
   14a34:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   14a38:	e0bfff17 	ldw	r2,-4(fp)
   14a3c:	00c00044 	movi	r3,1
   14a40:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_verify(r);
   14a44:	e13fff17 	ldw	r4,-4(fp)
   14a48:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
}
   14a4c:	0001883a 	nop
   14a50:	e037883a 	mov	sp,fp
   14a54:	dfc00117 	ldw	ra,4(sp)
   14a58:	df000017 	ldw	fp,0(sp)
   14a5c:	dec00204 	addi	sp,sp,8
   14a60:	f800283a 	ret

00014a64 <secp256k1_fe_normalizes_to_zero>:

static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {
   14a64:	deffef04 	addi	sp,sp,-68
   14a68:	dfc01015 	stw	ra,64(sp)
   14a6c:	df000f15 	stw	fp,60(sp)
   14a70:	df000f04 	addi	fp,sp,60
   14a74:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],
   14a78:	e0bfff17 	ldw	r2,-4(fp)
   14a7c:	10800017 	ldw	r2,0(r2)
   14a80:	e0bff215 	stw	r2,-56(fp)
   14a84:	e0bfff17 	ldw	r2,-4(fp)
   14a88:	10800117 	ldw	r2,4(r2)
   14a8c:	e0bff315 	stw	r2,-52(fp)
   14a90:	e0bfff17 	ldw	r2,-4(fp)
   14a94:	10800217 	ldw	r2,8(r2)
   14a98:	e0bff415 	stw	r2,-48(fp)
   14a9c:	e0bfff17 	ldw	r2,-4(fp)
   14aa0:	10800317 	ldw	r2,12(r2)
   14aa4:	e0bff515 	stw	r2,-44(fp)
   14aa8:	e0bfff17 	ldw	r2,-4(fp)
   14aac:	10800417 	ldw	r2,16(r2)
   14ab0:	e0bff615 	stw	r2,-40(fp)
             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];
   14ab4:	e0bfff17 	ldw	r2,-4(fp)
   14ab8:	10800517 	ldw	r2,20(r2)
   14abc:	e0bff715 	stw	r2,-36(fp)
   14ac0:	e0bfff17 	ldw	r2,-4(fp)
   14ac4:	10800617 	ldw	r2,24(r2)
   14ac8:	e0bff815 	stw	r2,-32(fp)
   14acc:	e0bfff17 	ldw	r2,-4(fp)
   14ad0:	10800717 	ldw	r2,28(r2)
   14ad4:	e0bff915 	stw	r2,-28(fp)
   14ad8:	e0bfff17 	ldw	r2,-4(fp)
   14adc:	10800817 	ldw	r2,32(r2)
   14ae0:	e0bffa15 	stw	r2,-24(fp)
   14ae4:	e0bfff17 	ldw	r2,-4(fp)
   14ae8:	10800917 	ldw	r2,36(r2)
   14aec:	e0bffb15 	stw	r2,-20(fp)

    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */
    uint32_t z0, z1;

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;
   14af0:	e0bffb17 	ldw	r2,-20(fp)
   14af4:	1004d5ba 	srli	r2,r2,22
   14af8:	e0bffc15 	stw	r2,-16(fp)
   14afc:	e0fffb17 	ldw	r3,-20(fp)
   14b00:	00801034 	movhi	r2,64
   14b04:	10bfffc4 	addi	r2,r2,-1
   14b08:	1884703a 	and	r2,r3,r2
   14b0c:	e0bffb15 	stw	r2,-20(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL; t1 += (x << 6);
   14b10:	0140f444 	movi	r5,977
   14b14:	e13ffc17 	ldw	r4,-16(fp)
   14b18:	0043af40 	call	43af4 <__mulsi3>
   14b1c:	1007883a 	mov	r3,r2
   14b20:	e0bff217 	ldw	r2,-56(fp)
   14b24:	10c5883a 	add	r2,r2,r3
   14b28:	e0bff215 	stw	r2,-56(fp)
   14b2c:	e0bffc17 	ldw	r2,-16(fp)
   14b30:	100491ba 	slli	r2,r2,6
   14b34:	e0fff317 	ldw	r3,-52(fp)
   14b38:	1885883a 	add	r2,r3,r2
   14b3c:	e0bff315 	stw	r2,-52(fp)
    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL; z0  = t0; z1  = t0 ^ 0x3D0UL;
   14b40:	e0bff217 	ldw	r2,-56(fp)
   14b44:	1004d6ba 	srli	r2,r2,26
   14b48:	e0fff317 	ldw	r3,-52(fp)
   14b4c:	1885883a 	add	r2,r3,r2
   14b50:	e0bff315 	stw	r2,-52(fp)
   14b54:	e0fff217 	ldw	r3,-56(fp)
   14b58:	00810034 	movhi	r2,1024
   14b5c:	10bfffc4 	addi	r2,r2,-1
   14b60:	1884703a 	and	r2,r3,r2
   14b64:	e0bff215 	stw	r2,-56(fp)
   14b68:	e0bff217 	ldw	r2,-56(fp)
   14b6c:	e0bffd15 	stw	r2,-12(fp)
   14b70:	e0bff217 	ldw	r2,-56(fp)
   14b74:	1080f41c 	xori	r2,r2,976
   14b78:	e0bffe15 	stw	r2,-8(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;
   14b7c:	e0bff317 	ldw	r2,-52(fp)
   14b80:	1004d6ba 	srli	r2,r2,26
   14b84:	e0fff417 	ldw	r3,-48(fp)
   14b88:	1885883a 	add	r2,r3,r2
   14b8c:	e0bff415 	stw	r2,-48(fp)
   14b90:	e0fff317 	ldw	r3,-52(fp)
   14b94:	00810034 	movhi	r2,1024
   14b98:	10bfffc4 	addi	r2,r2,-1
   14b9c:	1884703a 	and	r2,r3,r2
   14ba0:	e0bff315 	stw	r2,-52(fp)
   14ba4:	e0fffd17 	ldw	r3,-12(fp)
   14ba8:	e0bff317 	ldw	r2,-52(fp)
   14bac:	1884b03a 	or	r2,r3,r2
   14bb0:	e0bffd15 	stw	r2,-12(fp)
   14bb4:	e0bff317 	ldw	r2,-52(fp)
   14bb8:	1080101c 	xori	r2,r2,64
   14bbc:	e0fffe17 	ldw	r3,-8(fp)
   14bc0:	1884703a 	and	r2,r3,r2
   14bc4:	e0bffe15 	stw	r2,-8(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;
   14bc8:	e0bff417 	ldw	r2,-48(fp)
   14bcc:	1004d6ba 	srli	r2,r2,26
   14bd0:	e0fff517 	ldw	r3,-44(fp)
   14bd4:	1885883a 	add	r2,r3,r2
   14bd8:	e0bff515 	stw	r2,-44(fp)
   14bdc:	e0fff417 	ldw	r3,-48(fp)
   14be0:	00810034 	movhi	r2,1024
   14be4:	10bfffc4 	addi	r2,r2,-1
   14be8:	1884703a 	and	r2,r3,r2
   14bec:	e0bff415 	stw	r2,-48(fp)
   14bf0:	e0fffd17 	ldw	r3,-12(fp)
   14bf4:	e0bff417 	ldw	r2,-48(fp)
   14bf8:	1884b03a 	or	r2,r3,r2
   14bfc:	e0bffd15 	stw	r2,-12(fp)
   14c00:	e0fffe17 	ldw	r3,-8(fp)
   14c04:	e0bff417 	ldw	r2,-48(fp)
   14c08:	1884703a 	and	r2,r3,r2
   14c0c:	e0bffe15 	stw	r2,-8(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;
   14c10:	e0bff517 	ldw	r2,-44(fp)
   14c14:	1004d6ba 	srli	r2,r2,26
   14c18:	e0fff617 	ldw	r3,-40(fp)
   14c1c:	1885883a 	add	r2,r3,r2
   14c20:	e0bff615 	stw	r2,-40(fp)
   14c24:	e0fff517 	ldw	r3,-44(fp)
   14c28:	00810034 	movhi	r2,1024
   14c2c:	10bfffc4 	addi	r2,r2,-1
   14c30:	1884703a 	and	r2,r3,r2
   14c34:	e0bff515 	stw	r2,-44(fp)
   14c38:	e0fffd17 	ldw	r3,-12(fp)
   14c3c:	e0bff517 	ldw	r2,-44(fp)
   14c40:	1884b03a 	or	r2,r3,r2
   14c44:	e0bffd15 	stw	r2,-12(fp)
   14c48:	e0fffe17 	ldw	r3,-8(fp)
   14c4c:	e0bff517 	ldw	r2,-44(fp)
   14c50:	1884703a 	and	r2,r3,r2
   14c54:	e0bffe15 	stw	r2,-8(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;
   14c58:	e0bff617 	ldw	r2,-40(fp)
   14c5c:	1004d6ba 	srli	r2,r2,26
   14c60:	e0fff717 	ldw	r3,-36(fp)
   14c64:	1885883a 	add	r2,r3,r2
   14c68:	e0bff715 	stw	r2,-36(fp)
   14c6c:	e0fff617 	ldw	r3,-40(fp)
   14c70:	00810034 	movhi	r2,1024
   14c74:	10bfffc4 	addi	r2,r2,-1
   14c78:	1884703a 	and	r2,r3,r2
   14c7c:	e0bff615 	stw	r2,-40(fp)
   14c80:	e0fffd17 	ldw	r3,-12(fp)
   14c84:	e0bff617 	ldw	r2,-40(fp)
   14c88:	1884b03a 	or	r2,r3,r2
   14c8c:	e0bffd15 	stw	r2,-12(fp)
   14c90:	e0fffe17 	ldw	r3,-8(fp)
   14c94:	e0bff617 	ldw	r2,-40(fp)
   14c98:	1884703a 	and	r2,r3,r2
   14c9c:	e0bffe15 	stw	r2,-8(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;
   14ca0:	e0bff717 	ldw	r2,-36(fp)
   14ca4:	1004d6ba 	srli	r2,r2,26
   14ca8:	e0fff817 	ldw	r3,-32(fp)
   14cac:	1885883a 	add	r2,r3,r2
   14cb0:	e0bff815 	stw	r2,-32(fp)
   14cb4:	e0fff717 	ldw	r3,-36(fp)
   14cb8:	00810034 	movhi	r2,1024
   14cbc:	10bfffc4 	addi	r2,r2,-1
   14cc0:	1884703a 	and	r2,r3,r2
   14cc4:	e0bff715 	stw	r2,-36(fp)
   14cc8:	e0fffd17 	ldw	r3,-12(fp)
   14ccc:	e0bff717 	ldw	r2,-36(fp)
   14cd0:	1884b03a 	or	r2,r3,r2
   14cd4:	e0bffd15 	stw	r2,-12(fp)
   14cd8:	e0fffe17 	ldw	r3,-8(fp)
   14cdc:	e0bff717 	ldw	r2,-36(fp)
   14ce0:	1884703a 	and	r2,r3,r2
   14ce4:	e0bffe15 	stw	r2,-8(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;
   14ce8:	e0bff817 	ldw	r2,-32(fp)
   14cec:	1004d6ba 	srli	r2,r2,26
   14cf0:	e0fff917 	ldw	r3,-28(fp)
   14cf4:	1885883a 	add	r2,r3,r2
   14cf8:	e0bff915 	stw	r2,-28(fp)
   14cfc:	e0fff817 	ldw	r3,-32(fp)
   14d00:	00810034 	movhi	r2,1024
   14d04:	10bfffc4 	addi	r2,r2,-1
   14d08:	1884703a 	and	r2,r3,r2
   14d0c:	e0bff815 	stw	r2,-32(fp)
   14d10:	e0fffd17 	ldw	r3,-12(fp)
   14d14:	e0bff817 	ldw	r2,-32(fp)
   14d18:	1884b03a 	or	r2,r3,r2
   14d1c:	e0bffd15 	stw	r2,-12(fp)
   14d20:	e0fffe17 	ldw	r3,-8(fp)
   14d24:	e0bff817 	ldw	r2,-32(fp)
   14d28:	1884703a 	and	r2,r3,r2
   14d2c:	e0bffe15 	stw	r2,-8(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;
   14d30:	e0bff917 	ldw	r2,-28(fp)
   14d34:	1004d6ba 	srli	r2,r2,26
   14d38:	e0fffa17 	ldw	r3,-24(fp)
   14d3c:	1885883a 	add	r2,r3,r2
   14d40:	e0bffa15 	stw	r2,-24(fp)
   14d44:	e0fff917 	ldw	r3,-28(fp)
   14d48:	00810034 	movhi	r2,1024
   14d4c:	10bfffc4 	addi	r2,r2,-1
   14d50:	1884703a 	and	r2,r3,r2
   14d54:	e0bff915 	stw	r2,-28(fp)
   14d58:	e0fffd17 	ldw	r3,-12(fp)
   14d5c:	e0bff917 	ldw	r2,-28(fp)
   14d60:	1884b03a 	or	r2,r3,r2
   14d64:	e0bffd15 	stw	r2,-12(fp)
   14d68:	e0fffe17 	ldw	r3,-8(fp)
   14d6c:	e0bff917 	ldw	r2,-28(fp)
   14d70:	1884703a 	and	r2,r3,r2
   14d74:	e0bffe15 	stw	r2,-8(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;
   14d78:	e0bffa17 	ldw	r2,-24(fp)
   14d7c:	1004d6ba 	srli	r2,r2,26
   14d80:	e0fffb17 	ldw	r3,-20(fp)
   14d84:	1885883a 	add	r2,r3,r2
   14d88:	e0bffb15 	stw	r2,-20(fp)
   14d8c:	e0fffa17 	ldw	r3,-24(fp)
   14d90:	00810034 	movhi	r2,1024
   14d94:	10bfffc4 	addi	r2,r2,-1
   14d98:	1884703a 	and	r2,r3,r2
   14d9c:	e0bffa15 	stw	r2,-24(fp)
   14da0:	e0fffd17 	ldw	r3,-12(fp)
   14da4:	e0bffa17 	ldw	r2,-24(fp)
   14da8:	1884b03a 	or	r2,r3,r2
   14dac:	e0bffd15 	stw	r2,-12(fp)
   14db0:	e0fffe17 	ldw	r3,-8(fp)
   14db4:	e0bffa17 	ldw	r2,-24(fp)
   14db8:	1884703a 	and	r2,r3,r2
   14dbc:	e0bffe15 	stw	r2,-8(fp)
                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;
   14dc0:	e0fffd17 	ldw	r3,-12(fp)
   14dc4:	e0bffb17 	ldw	r2,-20(fp)
   14dc8:	1884b03a 	or	r2,r3,r2
   14dcc:	e0bffd15 	stw	r2,-12(fp)
   14dd0:	e0bffb17 	ldw	r2,-20(fp)
   14dd4:	1080f03c 	xorhi	r2,r2,960
   14dd8:	e0fffe17 	ldw	r3,-8(fp)
   14ddc:	1884703a 	and	r2,r3,r2
   14de0:	e0bffe15 	stw	r2,-8(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   14de4:	e0bffb17 	ldw	r2,-20(fp)
   14de8:	1004d5fa 	srli	r2,r2,23
   14dec:	1004c03a 	cmpne	r2,r2,zero
   14df0:	10803fcc 	andi	r2,r2,255
   14df4:	10000d26 	beq	r2,zero,14e2c <secp256k1_fe_normalizes_to_zero+0x3c8>
   14df8:	d0a01617 	ldw	r2,-32680(gp)
   14dfc:	10c00317 	ldw	r3,12(r2)
   14e00:	00800174 	movhi	r2,5
   14e04:	1091f304 	addi	r2,r2,18380
   14e08:	d8800015 	stw	r2,0(sp)
   14e0c:	01c03544 	movi	r7,213
   14e10:	01800174 	movhi	r6,5
   14e14:	3191dd04 	addi	r6,r6,18292
   14e18:	01400174 	movhi	r5,5
   14e1c:	2951e804 	addi	r5,r5,18336
   14e20:	1809883a 	mov	r4,r3
   14e24:	00461000 	call	46100 <fprintf>
   14e28:	0045fd40 	call	45fd4 <abort>

    return (z0 == 0) | (z1 == 0x3FFFFFFUL);
   14e2c:	e0bffd17 	ldw	r2,-12(fp)
   14e30:	1005003a 	cmpeq	r2,r2,zero
   14e34:	1009883a 	mov	r4,r2
   14e38:	e0fffe17 	ldw	r3,-8(fp)
   14e3c:	00810034 	movhi	r2,1024
   14e40:	10bfffc4 	addi	r2,r2,-1
   14e44:	1885003a 	cmpeq	r2,r3,r2
   14e48:	2084b03a 	or	r2,r4,r2
   14e4c:	10803fcc 	andi	r2,r2,255
}
   14e50:	e037883a 	mov	sp,fp
   14e54:	dfc00117 	ldw	ra,4(sp)
   14e58:	df000017 	ldw	fp,0(sp)
   14e5c:	dec00204 	addi	sp,sp,8
   14e60:	f800283a 	ret

00014e64 <secp256k1_fe_normalizes_to_zero_var>:

static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {
   14e64:	deffef04 	addi	sp,sp,-68
   14e68:	dfc01015 	stw	ra,64(sp)
   14e6c:	df000f15 	stw	fp,60(sp)
   14e70:	df000f04 	addi	fp,sp,60
   14e74:	e13fff15 	stw	r4,-4(fp)
    uint32_t t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
    uint32_t z0, z1;
    uint32_t x;

    t0 = r->n[0];
   14e78:	e0bfff17 	ldw	r2,-4(fp)
   14e7c:	10800017 	ldw	r2,0(r2)
   14e80:	e0bff215 	stw	r2,-56(fp)
    t9 = r->n[9];
   14e84:	e0bfff17 	ldw	r2,-4(fp)
   14e88:	10800917 	ldw	r2,36(r2)
   14e8c:	e0bff315 	stw	r2,-52(fp)

    /* Reduce t9 at the start so there will be at most a single carry from the first pass */
    x = t9 >> 22;
   14e90:	e0bff317 	ldw	r2,-52(fp)
   14e94:	1004d5ba 	srli	r2,r2,22
   14e98:	e0bff415 	stw	r2,-48(fp)

    /* The first pass ensures the magnitude is 1, ... */
    t0 += x * 0x3D1UL;
   14e9c:	0140f444 	movi	r5,977
   14ea0:	e13ff417 	ldw	r4,-48(fp)
   14ea4:	0043af40 	call	43af4 <__mulsi3>
   14ea8:	1007883a 	mov	r3,r2
   14eac:	e0bff217 	ldw	r2,-56(fp)
   14eb0:	10c5883a 	add	r2,r2,r3
   14eb4:	e0bff215 	stw	r2,-56(fp)

    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */
    z0 = t0 & 0x3FFFFFFUL;
   14eb8:	e0fff217 	ldw	r3,-56(fp)
   14ebc:	00810034 	movhi	r2,1024
   14ec0:	10bfffc4 	addi	r2,r2,-1
   14ec4:	1884703a 	and	r2,r3,r2
   14ec8:	e0bff515 	stw	r2,-44(fp)
    z1 = z0 ^ 0x3D0UL;
   14ecc:	e0bff517 	ldw	r2,-44(fp)
   14ed0:	1080f41c 	xori	r2,r2,976
   14ed4:	e0bff615 	stw	r2,-40(fp)

    /* Fast return path should catch the majority of cases */
    if ((z0 != 0UL) & (z1 != 0x3FFFFFFUL)) {
   14ed8:	e0bff517 	ldw	r2,-44(fp)
   14edc:	1004c03a 	cmpne	r2,r2,zero
   14ee0:	1009883a 	mov	r4,r2
   14ee4:	e0fff617 	ldw	r3,-40(fp)
   14ee8:	00810034 	movhi	r2,1024
   14eec:	10bfffc4 	addi	r2,r2,-1
   14ef0:	1884c03a 	cmpne	r2,r3,r2
   14ef4:	2084703a 	and	r2,r4,r2
   14ef8:	10803fcc 	andi	r2,r2,255
   14efc:	10000226 	beq	r2,zero,14f08 <secp256k1_fe_normalizes_to_zero_var+0xa4>
        return 0;
   14f00:	0005883a 	mov	r2,zero
   14f04:	0000dc06 	br	15278 <secp256k1_fe_normalizes_to_zero_var+0x414>
    }

    t1 = r->n[1];
   14f08:	e0bfff17 	ldw	r2,-4(fp)
   14f0c:	10800117 	ldw	r2,4(r2)
   14f10:	e0bff715 	stw	r2,-36(fp)
    t2 = r->n[2];
   14f14:	e0bfff17 	ldw	r2,-4(fp)
   14f18:	10800217 	ldw	r2,8(r2)
   14f1c:	e0bff815 	stw	r2,-32(fp)
    t3 = r->n[3];
   14f20:	e0bfff17 	ldw	r2,-4(fp)
   14f24:	10800317 	ldw	r2,12(r2)
   14f28:	e0bff915 	stw	r2,-28(fp)
    t4 = r->n[4];
   14f2c:	e0bfff17 	ldw	r2,-4(fp)
   14f30:	10800417 	ldw	r2,16(r2)
   14f34:	e0bffa15 	stw	r2,-24(fp)
    t5 = r->n[5];
   14f38:	e0bfff17 	ldw	r2,-4(fp)
   14f3c:	10800517 	ldw	r2,20(r2)
   14f40:	e0bffb15 	stw	r2,-20(fp)
    t6 = r->n[6];
   14f44:	e0bfff17 	ldw	r2,-4(fp)
   14f48:	10800617 	ldw	r2,24(r2)
   14f4c:	e0bffc15 	stw	r2,-16(fp)
    t7 = r->n[7];
   14f50:	e0bfff17 	ldw	r2,-4(fp)
   14f54:	10800717 	ldw	r2,28(r2)
   14f58:	e0bffd15 	stw	r2,-12(fp)
    t8 = r->n[8];
   14f5c:	e0bfff17 	ldw	r2,-4(fp)
   14f60:	10800817 	ldw	r2,32(r2)
   14f64:	e0bffe15 	stw	r2,-8(fp)

    t9 &= 0x03FFFFFUL;
   14f68:	e0fff317 	ldw	r3,-52(fp)
   14f6c:	00801034 	movhi	r2,64
   14f70:	10bfffc4 	addi	r2,r2,-1
   14f74:	1884703a 	and	r2,r3,r2
   14f78:	e0bff315 	stw	r2,-52(fp)
    t1 += (x << 6);
   14f7c:	e0bff417 	ldw	r2,-48(fp)
   14f80:	100491ba 	slli	r2,r2,6
   14f84:	e0fff717 	ldw	r3,-36(fp)
   14f88:	1885883a 	add	r2,r3,r2
   14f8c:	e0bff715 	stw	r2,-36(fp)

    t1 += (t0 >> 26);
   14f90:	e0bff217 	ldw	r2,-56(fp)
   14f94:	1004d6ba 	srli	r2,r2,26
   14f98:	e0fff717 	ldw	r3,-36(fp)
   14f9c:	1885883a 	add	r2,r3,r2
   14fa0:	e0bff715 	stw	r2,-36(fp)
    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;
   14fa4:	e0bff717 	ldw	r2,-36(fp)
   14fa8:	1004d6ba 	srli	r2,r2,26
   14fac:	e0fff817 	ldw	r3,-32(fp)
   14fb0:	1885883a 	add	r2,r3,r2
   14fb4:	e0bff815 	stw	r2,-32(fp)
   14fb8:	e0fff717 	ldw	r3,-36(fp)
   14fbc:	00810034 	movhi	r2,1024
   14fc0:	10bfffc4 	addi	r2,r2,-1
   14fc4:	1884703a 	and	r2,r3,r2
   14fc8:	e0bff715 	stw	r2,-36(fp)
   14fcc:	e0fff517 	ldw	r3,-44(fp)
   14fd0:	e0bff717 	ldw	r2,-36(fp)
   14fd4:	1884b03a 	or	r2,r3,r2
   14fd8:	e0bff515 	stw	r2,-44(fp)
   14fdc:	e0bff717 	ldw	r2,-36(fp)
   14fe0:	1080101c 	xori	r2,r2,64
   14fe4:	e0fff617 	ldw	r3,-40(fp)
   14fe8:	1884703a 	and	r2,r3,r2
   14fec:	e0bff615 	stw	r2,-40(fp)
    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;
   14ff0:	e0bff817 	ldw	r2,-32(fp)
   14ff4:	1004d6ba 	srli	r2,r2,26
   14ff8:	e0fff917 	ldw	r3,-28(fp)
   14ffc:	1885883a 	add	r2,r3,r2
   15000:	e0bff915 	stw	r2,-28(fp)
   15004:	e0fff817 	ldw	r3,-32(fp)
   15008:	00810034 	movhi	r2,1024
   1500c:	10bfffc4 	addi	r2,r2,-1
   15010:	1884703a 	and	r2,r3,r2
   15014:	e0bff815 	stw	r2,-32(fp)
   15018:	e0fff517 	ldw	r3,-44(fp)
   1501c:	e0bff817 	ldw	r2,-32(fp)
   15020:	1884b03a 	or	r2,r3,r2
   15024:	e0bff515 	stw	r2,-44(fp)
   15028:	e0fff617 	ldw	r3,-40(fp)
   1502c:	e0bff817 	ldw	r2,-32(fp)
   15030:	1884703a 	and	r2,r3,r2
   15034:	e0bff615 	stw	r2,-40(fp)
    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;
   15038:	e0bff917 	ldw	r2,-28(fp)
   1503c:	1004d6ba 	srli	r2,r2,26
   15040:	e0fffa17 	ldw	r3,-24(fp)
   15044:	1885883a 	add	r2,r3,r2
   15048:	e0bffa15 	stw	r2,-24(fp)
   1504c:	e0fff917 	ldw	r3,-28(fp)
   15050:	00810034 	movhi	r2,1024
   15054:	10bfffc4 	addi	r2,r2,-1
   15058:	1884703a 	and	r2,r3,r2
   1505c:	e0bff915 	stw	r2,-28(fp)
   15060:	e0fff517 	ldw	r3,-44(fp)
   15064:	e0bff917 	ldw	r2,-28(fp)
   15068:	1884b03a 	or	r2,r3,r2
   1506c:	e0bff515 	stw	r2,-44(fp)
   15070:	e0fff617 	ldw	r3,-40(fp)
   15074:	e0bff917 	ldw	r2,-28(fp)
   15078:	1884703a 	and	r2,r3,r2
   1507c:	e0bff615 	stw	r2,-40(fp)
    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;
   15080:	e0bffa17 	ldw	r2,-24(fp)
   15084:	1004d6ba 	srli	r2,r2,26
   15088:	e0fffb17 	ldw	r3,-20(fp)
   1508c:	1885883a 	add	r2,r3,r2
   15090:	e0bffb15 	stw	r2,-20(fp)
   15094:	e0fffa17 	ldw	r3,-24(fp)
   15098:	00810034 	movhi	r2,1024
   1509c:	10bfffc4 	addi	r2,r2,-1
   150a0:	1884703a 	and	r2,r3,r2
   150a4:	e0bffa15 	stw	r2,-24(fp)
   150a8:	e0fff517 	ldw	r3,-44(fp)
   150ac:	e0bffa17 	ldw	r2,-24(fp)
   150b0:	1884b03a 	or	r2,r3,r2
   150b4:	e0bff515 	stw	r2,-44(fp)
   150b8:	e0fff617 	ldw	r3,-40(fp)
   150bc:	e0bffa17 	ldw	r2,-24(fp)
   150c0:	1884703a 	and	r2,r3,r2
   150c4:	e0bff615 	stw	r2,-40(fp)
    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;
   150c8:	e0bffb17 	ldw	r2,-20(fp)
   150cc:	1004d6ba 	srli	r2,r2,26
   150d0:	e0fffc17 	ldw	r3,-16(fp)
   150d4:	1885883a 	add	r2,r3,r2
   150d8:	e0bffc15 	stw	r2,-16(fp)
   150dc:	e0fffb17 	ldw	r3,-20(fp)
   150e0:	00810034 	movhi	r2,1024
   150e4:	10bfffc4 	addi	r2,r2,-1
   150e8:	1884703a 	and	r2,r3,r2
   150ec:	e0bffb15 	stw	r2,-20(fp)
   150f0:	e0fff517 	ldw	r3,-44(fp)
   150f4:	e0bffb17 	ldw	r2,-20(fp)
   150f8:	1884b03a 	or	r2,r3,r2
   150fc:	e0bff515 	stw	r2,-44(fp)
   15100:	e0fff617 	ldw	r3,-40(fp)
   15104:	e0bffb17 	ldw	r2,-20(fp)
   15108:	1884703a 	and	r2,r3,r2
   1510c:	e0bff615 	stw	r2,-40(fp)
    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;
   15110:	e0bffc17 	ldw	r2,-16(fp)
   15114:	1004d6ba 	srli	r2,r2,26
   15118:	e0fffd17 	ldw	r3,-12(fp)
   1511c:	1885883a 	add	r2,r3,r2
   15120:	e0bffd15 	stw	r2,-12(fp)
   15124:	e0fffc17 	ldw	r3,-16(fp)
   15128:	00810034 	movhi	r2,1024
   1512c:	10bfffc4 	addi	r2,r2,-1
   15130:	1884703a 	and	r2,r3,r2
   15134:	e0bffc15 	stw	r2,-16(fp)
   15138:	e0fff517 	ldw	r3,-44(fp)
   1513c:	e0bffc17 	ldw	r2,-16(fp)
   15140:	1884b03a 	or	r2,r3,r2
   15144:	e0bff515 	stw	r2,-44(fp)
   15148:	e0fff617 	ldw	r3,-40(fp)
   1514c:	e0bffc17 	ldw	r2,-16(fp)
   15150:	1884703a 	and	r2,r3,r2
   15154:	e0bff615 	stw	r2,-40(fp)
    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;
   15158:	e0bffd17 	ldw	r2,-12(fp)
   1515c:	1004d6ba 	srli	r2,r2,26
   15160:	e0fffe17 	ldw	r3,-8(fp)
   15164:	1885883a 	add	r2,r3,r2
   15168:	e0bffe15 	stw	r2,-8(fp)
   1516c:	e0fffd17 	ldw	r3,-12(fp)
   15170:	00810034 	movhi	r2,1024
   15174:	10bfffc4 	addi	r2,r2,-1
   15178:	1884703a 	and	r2,r3,r2
   1517c:	e0bffd15 	stw	r2,-12(fp)
   15180:	e0fff517 	ldw	r3,-44(fp)
   15184:	e0bffd17 	ldw	r2,-12(fp)
   15188:	1884b03a 	or	r2,r3,r2
   1518c:	e0bff515 	stw	r2,-44(fp)
   15190:	e0fff617 	ldw	r3,-40(fp)
   15194:	e0bffd17 	ldw	r2,-12(fp)
   15198:	1884703a 	and	r2,r3,r2
   1519c:	e0bff615 	stw	r2,-40(fp)
    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;
   151a0:	e0bffe17 	ldw	r2,-8(fp)
   151a4:	1004d6ba 	srli	r2,r2,26
   151a8:	e0fff317 	ldw	r3,-52(fp)
   151ac:	1885883a 	add	r2,r3,r2
   151b0:	e0bff315 	stw	r2,-52(fp)
   151b4:	e0fffe17 	ldw	r3,-8(fp)
   151b8:	00810034 	movhi	r2,1024
   151bc:	10bfffc4 	addi	r2,r2,-1
   151c0:	1884703a 	and	r2,r3,r2
   151c4:	e0bffe15 	stw	r2,-8(fp)
   151c8:	e0fff517 	ldw	r3,-44(fp)
   151cc:	e0bffe17 	ldw	r2,-8(fp)
   151d0:	1884b03a 	or	r2,r3,r2
   151d4:	e0bff515 	stw	r2,-44(fp)
   151d8:	e0fff617 	ldw	r3,-40(fp)
   151dc:	e0bffe17 	ldw	r2,-8(fp)
   151e0:	1884703a 	and	r2,r3,r2
   151e4:	e0bff615 	stw	r2,-40(fp)
                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;
   151e8:	e0fff517 	ldw	r3,-44(fp)
   151ec:	e0bff317 	ldw	r2,-52(fp)
   151f0:	1884b03a 	or	r2,r3,r2
   151f4:	e0bff515 	stw	r2,-44(fp)
   151f8:	e0bff317 	ldw	r2,-52(fp)
   151fc:	1080f03c 	xorhi	r2,r2,960
   15200:	e0fff617 	ldw	r3,-40(fp)
   15204:	1884703a 	and	r2,r3,r2
   15208:	e0bff615 	stw	r2,-40(fp)

    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */
    VERIFY_CHECK(t9 >> 23 == 0);
   1520c:	e0bff317 	ldw	r2,-52(fp)
   15210:	1004d5fa 	srli	r2,r2,23
   15214:	1004c03a 	cmpne	r2,r2,zero
   15218:	10803fcc 	andi	r2,r2,255
   1521c:	10000d26 	beq	r2,zero,15254 <secp256k1_fe_normalizes_to_zero_var+0x3f0>
   15220:	d0a01617 	ldw	r2,-32680(gp)
   15224:	10c00317 	ldw	r3,12(r2)
   15228:	00800174 	movhi	r2,5
   1522c:	1091f304 	addi	r2,r2,18380
   15230:	d8800015 	stw	r2,0(sp)
   15234:	01c04244 	movi	r7,265
   15238:	01800174 	movhi	r6,5
   1523c:	3191dd04 	addi	r6,r6,18292
   15240:	01400174 	movhi	r5,5
   15244:	2951e804 	addi	r5,r5,18336
   15248:	1809883a 	mov	r4,r3
   1524c:	00461000 	call	46100 <fprintf>
   15250:	0045fd40 	call	45fd4 <abort>

    return (z0 == 0) | (z1 == 0x3FFFFFFUL);
   15254:	e0bff517 	ldw	r2,-44(fp)
   15258:	1005003a 	cmpeq	r2,r2,zero
   1525c:	1009883a 	mov	r4,r2
   15260:	e0fff617 	ldw	r3,-40(fp)
   15264:	00810034 	movhi	r2,1024
   15268:	10bfffc4 	addi	r2,r2,-1
   1526c:	1885003a 	cmpeq	r2,r3,r2
   15270:	2084b03a 	or	r2,r4,r2
   15274:	10803fcc 	andi	r2,r2,255
}
   15278:	e037883a 	mov	sp,fp
   1527c:	dfc00117 	ldw	ra,4(sp)
   15280:	df000017 	ldw	fp,0(sp)
   15284:	dec00204 	addi	sp,sp,8
   15288:	f800283a 	ret

0001528c <secp256k1_fe_set_int>:

SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {
   1528c:	defffc04 	addi	sp,sp,-16
   15290:	dfc00315 	stw	ra,12(sp)
   15294:	df000215 	stw	fp,8(sp)
   15298:	df000204 	addi	fp,sp,8
   1529c:	e13ffe15 	stw	r4,-8(fp)
   152a0:	e17fff15 	stw	r5,-4(fp)
    r->n[0] = a;
   152a4:	e0ffff17 	ldw	r3,-4(fp)
   152a8:	e0bffe17 	ldw	r2,-8(fp)
   152ac:	10c00015 	stw	r3,0(r2)
    r->n[1] = r->n[2] = r->n[3] = r->n[4] = r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;
   152b0:	e0bffe17 	ldw	r2,-8(fp)
   152b4:	10000915 	stw	zero,36(r2)
   152b8:	e0bffe17 	ldw	r2,-8(fp)
   152bc:	10c00917 	ldw	r3,36(r2)
   152c0:	e0bffe17 	ldw	r2,-8(fp)
   152c4:	10c00815 	stw	r3,32(r2)
   152c8:	e0bffe17 	ldw	r2,-8(fp)
   152cc:	10c00817 	ldw	r3,32(r2)
   152d0:	e0bffe17 	ldw	r2,-8(fp)
   152d4:	10c00715 	stw	r3,28(r2)
   152d8:	e0bffe17 	ldw	r2,-8(fp)
   152dc:	10c00717 	ldw	r3,28(r2)
   152e0:	e0bffe17 	ldw	r2,-8(fp)
   152e4:	10c00615 	stw	r3,24(r2)
   152e8:	e0bffe17 	ldw	r2,-8(fp)
   152ec:	10c00617 	ldw	r3,24(r2)
   152f0:	e0bffe17 	ldw	r2,-8(fp)
   152f4:	10c00515 	stw	r3,20(r2)
   152f8:	e0bffe17 	ldw	r2,-8(fp)
   152fc:	10c00517 	ldw	r3,20(r2)
   15300:	e0bffe17 	ldw	r2,-8(fp)
   15304:	10c00415 	stw	r3,16(r2)
   15308:	e0bffe17 	ldw	r2,-8(fp)
   1530c:	10c00417 	ldw	r3,16(r2)
   15310:	e0bffe17 	ldw	r2,-8(fp)
   15314:	10c00315 	stw	r3,12(r2)
   15318:	e0bffe17 	ldw	r2,-8(fp)
   1531c:	10c00317 	ldw	r3,12(r2)
   15320:	e0bffe17 	ldw	r2,-8(fp)
   15324:	10c00215 	stw	r3,8(r2)
   15328:	e0bffe17 	ldw	r2,-8(fp)
   1532c:	10c00217 	ldw	r3,8(r2)
   15330:	e0bffe17 	ldw	r2,-8(fp)
   15334:	10c00115 	stw	r3,4(r2)
#ifdef VERIFY
    r->magnitude = 1;
   15338:	e0bffe17 	ldw	r2,-8(fp)
   1533c:	00c00044 	movi	r3,1
   15340:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   15344:	e0bffe17 	ldw	r2,-8(fp)
   15348:	00c00044 	movi	r3,1
   1534c:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_verify(r);
   15350:	e13ffe17 	ldw	r4,-8(fp)
   15354:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
}
   15358:	0001883a 	nop
   1535c:	e037883a 	mov	sp,fp
   15360:	dfc00117 	ldw	ra,4(sp)
   15364:	df000017 	ldw	fp,0(sp)
   15368:	dec00204 	addi	sp,sp,8
   1536c:	f800283a 	ret

00015370 <secp256k1_fe_is_zero>:

SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {
   15370:	defffb04 	addi	sp,sp,-20
   15374:	dfc00415 	stw	ra,16(sp)
   15378:	df000315 	stw	fp,12(sp)
   1537c:	df000304 	addi	fp,sp,12
   15380:	e13fff15 	stw	r4,-4(fp)
    const uint32_t *t = a->n;
   15384:	e0bfff17 	ldw	r2,-4(fp)
   15388:	e0bffe15 	stw	r2,-8(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   1538c:	e0bfff17 	ldw	r2,-4(fp)
   15390:	10800b17 	ldw	r2,44(r2)
   15394:	1005003a 	cmpeq	r2,r2,zero
   15398:	10803fcc 	andi	r2,r2,255
   1539c:	10000d26 	beq	r2,zero,153d4 <secp256k1_fe_is_zero+0x64>
   153a0:	d0a01617 	ldw	r2,-32680(gp)
   153a4:	10c00317 	ldw	r3,12(r2)
   153a8:	00800174 	movhi	r2,5
   153ac:	10920704 	addi	r2,r2,18460
   153b0:	d8800015 	stw	r2,0(sp)
   153b4:	01c046c4 	movi	r7,283
   153b8:	01800174 	movhi	r6,5
   153bc:	3191dd04 	addi	r6,r6,18292
   153c0:	01400174 	movhi	r5,5
   153c4:	2951e804 	addi	r5,r5,18336
   153c8:	1809883a 	mov	r4,r3
   153cc:	00461000 	call	46100 <fprintf>
   153d0:	0045fd40 	call	45fd4 <abort>
    secp256k1_fe_verify(a);
   153d4:	e13fff17 	ldw	r4,-4(fp)
   153d8:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
    return (t[0] | t[1] | t[2] | t[3] | t[4] | t[5] | t[6] | t[7] | t[8] | t[9]) == 0;
   153dc:	e0bffe17 	ldw	r2,-8(fp)
   153e0:	10c00017 	ldw	r3,0(r2)
   153e4:	e0bffe17 	ldw	r2,-8(fp)
   153e8:	10800104 	addi	r2,r2,4
   153ec:	10800017 	ldw	r2,0(r2)
   153f0:	1886b03a 	or	r3,r3,r2
   153f4:	e0bffe17 	ldw	r2,-8(fp)
   153f8:	10800204 	addi	r2,r2,8
   153fc:	10800017 	ldw	r2,0(r2)
   15400:	1886b03a 	or	r3,r3,r2
   15404:	e0bffe17 	ldw	r2,-8(fp)
   15408:	10800304 	addi	r2,r2,12
   1540c:	10800017 	ldw	r2,0(r2)
   15410:	1886b03a 	or	r3,r3,r2
   15414:	e0bffe17 	ldw	r2,-8(fp)
   15418:	10800404 	addi	r2,r2,16
   1541c:	10800017 	ldw	r2,0(r2)
   15420:	1886b03a 	or	r3,r3,r2
   15424:	e0bffe17 	ldw	r2,-8(fp)
   15428:	10800504 	addi	r2,r2,20
   1542c:	10800017 	ldw	r2,0(r2)
   15430:	1886b03a 	or	r3,r3,r2
   15434:	e0bffe17 	ldw	r2,-8(fp)
   15438:	10800604 	addi	r2,r2,24
   1543c:	10800017 	ldw	r2,0(r2)
   15440:	1886b03a 	or	r3,r3,r2
   15444:	e0bffe17 	ldw	r2,-8(fp)
   15448:	10800704 	addi	r2,r2,28
   1544c:	10800017 	ldw	r2,0(r2)
   15450:	1886b03a 	or	r3,r3,r2
   15454:	e0bffe17 	ldw	r2,-8(fp)
   15458:	10800804 	addi	r2,r2,32
   1545c:	10800017 	ldw	r2,0(r2)
   15460:	1886b03a 	or	r3,r3,r2
   15464:	e0bffe17 	ldw	r2,-8(fp)
   15468:	10800904 	addi	r2,r2,36
   1546c:	10800017 	ldw	r2,0(r2)
   15470:	1884b03a 	or	r2,r3,r2
   15474:	1005003a 	cmpeq	r2,r2,zero
   15478:	10803fcc 	andi	r2,r2,255
}
   1547c:	e037883a 	mov	sp,fp
   15480:	dfc00117 	ldw	ra,4(sp)
   15484:	df000017 	ldw	fp,0(sp)
   15488:	dec00204 	addi	sp,sp,8
   1548c:	f800283a 	ret

00015490 <secp256k1_fe_is_odd>:

SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {
   15490:	defffc04 	addi	sp,sp,-16
   15494:	dfc00315 	stw	ra,12(sp)
   15498:	df000215 	stw	fp,8(sp)
   1549c:	df000204 	addi	fp,sp,8
   154a0:	e13fff15 	stw	r4,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   154a4:	e0bfff17 	ldw	r2,-4(fp)
   154a8:	10800b17 	ldw	r2,44(r2)
   154ac:	1005003a 	cmpeq	r2,r2,zero
   154b0:	10803fcc 	andi	r2,r2,255
   154b4:	10000d26 	beq	r2,zero,154ec <secp256k1_fe_is_odd+0x5c>
   154b8:	d0a01617 	ldw	r2,-32680(gp)
   154bc:	10c00317 	ldw	r3,12(r2)
   154c0:	00800174 	movhi	r2,5
   154c4:	10920704 	addi	r2,r2,18460
   154c8:	d8800015 	stw	r2,0(sp)
   154cc:	01c048c4 	movi	r7,291
   154d0:	01800174 	movhi	r6,5
   154d4:	3191dd04 	addi	r6,r6,18292
   154d8:	01400174 	movhi	r5,5
   154dc:	2951e804 	addi	r5,r5,18336
   154e0:	1809883a 	mov	r4,r3
   154e4:	00461000 	call	46100 <fprintf>
   154e8:	0045fd40 	call	45fd4 <abort>
    secp256k1_fe_verify(a);
   154ec:	e13fff17 	ldw	r4,-4(fp)
   154f0:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
    return a->n[0] & 1;
   154f4:	e0bfff17 	ldw	r2,-4(fp)
   154f8:	10800017 	ldw	r2,0(r2)
   154fc:	1080004c 	andi	r2,r2,1
}
   15500:	e037883a 	mov	sp,fp
   15504:	dfc00117 	ldw	ra,4(sp)
   15508:	df000017 	ldw	fp,0(sp)
   1550c:	dec00204 	addi	sp,sp,8
   15510:	f800283a 	ret

00015514 <secp256k1_fe_clear>:

SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {
   15514:	defffd04 	addi	sp,sp,-12
   15518:	df000215 	stw	fp,8(sp)
   1551c:	df000204 	addi	fp,sp,8
   15520:	e13fff15 	stw	r4,-4(fp)
    int i;
#ifdef VERIFY
    a->magnitude = 0;
   15524:	e0bfff17 	ldw	r2,-4(fp)
   15528:	10000a15 	stw	zero,40(r2)
    a->normalized = 1;
   1552c:	e0bfff17 	ldw	r2,-4(fp)
   15530:	00c00044 	movi	r3,1
   15534:	10c00b15 	stw	r3,44(r2)
#endif
    for (i=0; i<10; i++) {
   15538:	e03ffe15 	stw	zero,-8(fp)
   1553c:	00000906 	br	15564 <secp256k1_fe_clear+0x50>
        a->n[i] = 0;
   15540:	e0ffff17 	ldw	r3,-4(fp)
   15544:	e0bffe17 	ldw	r2,-8(fp)
   15548:	1085883a 	add	r2,r2,r2
   1554c:	1085883a 	add	r2,r2,r2
   15550:	1885883a 	add	r2,r3,r2
   15554:	10000015 	stw	zero,0(r2)
    int i;
#ifdef VERIFY
    a->magnitude = 0;
    a->normalized = 1;
#endif
    for (i=0; i<10; i++) {
   15558:	e0bffe17 	ldw	r2,-8(fp)
   1555c:	10800044 	addi	r2,r2,1
   15560:	e0bffe15 	stw	r2,-8(fp)
   15564:	e0bffe17 	ldw	r2,-8(fp)
   15568:	10800290 	cmplti	r2,r2,10
   1556c:	103ff41e 	bne	r2,zero,15540 <__alt_mem_epcs_flash_controller+0xfe00c540>
        a->n[i] = 0;
    }
}
   15570:	0001883a 	nop
   15574:	e037883a 	mov	sp,fp
   15578:	df000017 	ldw	fp,0(sp)
   1557c:	dec00104 	addi	sp,sp,4
   15580:	f800283a 	ret

00015584 <secp256k1_fe_cmp_var>:

static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {
   15584:	defffa04 	addi	sp,sp,-24
   15588:	dfc00515 	stw	ra,20(sp)
   1558c:	df000415 	stw	fp,16(sp)
   15590:	df000404 	addi	fp,sp,16
   15594:	e13ffe15 	stw	r4,-8(fp)
   15598:	e17fff15 	stw	r5,-4(fp)
    int i;
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   1559c:	e0bffe17 	ldw	r2,-8(fp)
   155a0:	10800b17 	ldw	r2,44(r2)
   155a4:	1005003a 	cmpeq	r2,r2,zero
   155a8:	10803fcc 	andi	r2,r2,255
   155ac:	10000d26 	beq	r2,zero,155e4 <secp256k1_fe_cmp_var+0x60>
   155b0:	d0a01617 	ldw	r2,-32680(gp)
   155b4:	10c00317 	ldw	r3,12(r2)
   155b8:	00800174 	movhi	r2,5
   155bc:	10920704 	addi	r2,r2,18460
   155c0:	d8800015 	stw	r2,0(sp)
   155c4:	01c04dc4 	movi	r7,311
   155c8:	01800174 	movhi	r6,5
   155cc:	3191dd04 	addi	r6,r6,18292
   155d0:	01400174 	movhi	r5,5
   155d4:	2951e804 	addi	r5,r5,18336
   155d8:	1809883a 	mov	r4,r3
   155dc:	00461000 	call	46100 <fprintf>
   155e0:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(b->normalized);
   155e4:	e0bfff17 	ldw	r2,-4(fp)
   155e8:	10800b17 	ldw	r2,44(r2)
   155ec:	1005003a 	cmpeq	r2,r2,zero
   155f0:	10803fcc 	andi	r2,r2,255
   155f4:	10000d26 	beq	r2,zero,1562c <secp256k1_fe_cmp_var+0xa8>
   155f8:	d0a01617 	ldw	r2,-32680(gp)
   155fc:	10c00317 	ldw	r3,12(r2)
   15600:	00800174 	movhi	r2,5
   15604:	10921104 	addi	r2,r2,18500
   15608:	d8800015 	stw	r2,0(sp)
   1560c:	01c04e04 	movi	r7,312
   15610:	01800174 	movhi	r6,5
   15614:	3191dd04 	addi	r6,r6,18292
   15618:	01400174 	movhi	r5,5
   1561c:	2951e804 	addi	r5,r5,18336
   15620:	1809883a 	mov	r4,r3
   15624:	00461000 	call	46100 <fprintf>
   15628:	0045fd40 	call	45fd4 <abort>
    secp256k1_fe_verify(a);
   1562c:	e13ffe17 	ldw	r4,-8(fp)
   15630:	001377c0 	call	1377c <secp256k1_fe_verify>
    secp256k1_fe_verify(b);
   15634:	e13fff17 	ldw	r4,-4(fp)
   15638:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
    for (i = 9; i >= 0; i--) {
   1563c:	00800244 	movi	r2,9
   15640:	e0bffd15 	stw	r2,-12(fp)
   15644:	00002106 	br	156cc <secp256k1_fe_cmp_var+0x148>
        if (a->n[i] > b->n[i]) {
   15648:	e0fffe17 	ldw	r3,-8(fp)
   1564c:	e0bffd17 	ldw	r2,-12(fp)
   15650:	1085883a 	add	r2,r2,r2
   15654:	1085883a 	add	r2,r2,r2
   15658:	1885883a 	add	r2,r3,r2
   1565c:	10c00017 	ldw	r3,0(r2)
   15660:	e13fff17 	ldw	r4,-4(fp)
   15664:	e0bffd17 	ldw	r2,-12(fp)
   15668:	1085883a 	add	r2,r2,r2
   1566c:	1085883a 	add	r2,r2,r2
   15670:	2085883a 	add	r2,r4,r2
   15674:	10800017 	ldw	r2,0(r2)
   15678:	10c0022e 	bgeu	r2,r3,15684 <secp256k1_fe_cmp_var+0x100>
            return 1;
   1567c:	00800044 	movi	r2,1
   15680:	00001506 	br	156d8 <secp256k1_fe_cmp_var+0x154>
        }
        if (a->n[i] < b->n[i]) {
   15684:	e0fffe17 	ldw	r3,-8(fp)
   15688:	e0bffd17 	ldw	r2,-12(fp)
   1568c:	1085883a 	add	r2,r2,r2
   15690:	1085883a 	add	r2,r2,r2
   15694:	1885883a 	add	r2,r3,r2
   15698:	10c00017 	ldw	r3,0(r2)
   1569c:	e13fff17 	ldw	r4,-4(fp)
   156a0:	e0bffd17 	ldw	r2,-12(fp)
   156a4:	1085883a 	add	r2,r2,r2
   156a8:	1085883a 	add	r2,r2,r2
   156ac:	2085883a 	add	r2,r4,r2
   156b0:	10800017 	ldw	r2,0(r2)
   156b4:	1880022e 	bgeu	r3,r2,156c0 <secp256k1_fe_cmp_var+0x13c>
            return -1;
   156b8:	00bfffc4 	movi	r2,-1
   156bc:	00000606 	br	156d8 <secp256k1_fe_cmp_var+0x154>
    VERIFY_CHECK(a->normalized);
    VERIFY_CHECK(b->normalized);
    secp256k1_fe_verify(a);
    secp256k1_fe_verify(b);
#endif
    for (i = 9; i >= 0; i--) {
   156c0:	e0bffd17 	ldw	r2,-12(fp)
   156c4:	10bfffc4 	addi	r2,r2,-1
   156c8:	e0bffd15 	stw	r2,-12(fp)
   156cc:	e0bffd17 	ldw	r2,-12(fp)
   156d0:	103fdd0e 	bge	r2,zero,15648 <__alt_mem_epcs_flash_controller+0xfe00c648>
        }
        if (a->n[i] < b->n[i]) {
            return -1;
        }
    }
    return 0;
   156d4:	0005883a 	mov	r2,zero
}
   156d8:	e037883a 	mov	sp,fp
   156dc:	dfc00117 	ldw	ra,4(sp)
   156e0:	df000017 	ldw	fp,0(sp)
   156e4:	dec00204 	addi	sp,sp,8
   156e8:	f800283a 	ret

000156ec <secp256k1_fe_set_b32>:

static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {
   156ec:	defff804 	addi	sp,sp,-32
   156f0:	dfc00715 	stw	ra,28(sp)
   156f4:	df000615 	stw	fp,24(sp)
   156f8:	df000604 	addi	fp,sp,24
   156fc:	e13ffe15 	stw	r4,-8(fp)
   15700:	e17fff15 	stw	r5,-4(fp)
    int i;
    r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;
   15704:	e0bffe17 	ldw	r2,-8(fp)
   15708:	10000415 	stw	zero,16(r2)
   1570c:	e0bffe17 	ldw	r2,-8(fp)
   15710:	10c00417 	ldw	r3,16(r2)
   15714:	e0bffe17 	ldw	r2,-8(fp)
   15718:	10c00315 	stw	r3,12(r2)
   1571c:	e0bffe17 	ldw	r2,-8(fp)
   15720:	10c00317 	ldw	r3,12(r2)
   15724:	e0bffe17 	ldw	r2,-8(fp)
   15728:	10c00215 	stw	r3,8(r2)
   1572c:	e0bffe17 	ldw	r2,-8(fp)
   15730:	10c00217 	ldw	r3,8(r2)
   15734:	e0bffe17 	ldw	r2,-8(fp)
   15738:	10c00115 	stw	r3,4(r2)
   1573c:	e0bffe17 	ldw	r2,-8(fp)
   15740:	10c00117 	ldw	r3,4(r2)
   15744:	e0bffe17 	ldw	r2,-8(fp)
   15748:	10c00015 	stw	r3,0(r2)
    r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;
   1574c:	e0bffe17 	ldw	r2,-8(fp)
   15750:	10000915 	stw	zero,36(r2)
   15754:	e0bffe17 	ldw	r2,-8(fp)
   15758:	10c00917 	ldw	r3,36(r2)
   1575c:	e0bffe17 	ldw	r2,-8(fp)
   15760:	10c00815 	stw	r3,32(r2)
   15764:	e0bffe17 	ldw	r2,-8(fp)
   15768:	10c00817 	ldw	r3,32(r2)
   1576c:	e0bffe17 	ldw	r2,-8(fp)
   15770:	10c00715 	stw	r3,28(r2)
   15774:	e0bffe17 	ldw	r2,-8(fp)
   15778:	10c00717 	ldw	r3,28(r2)
   1577c:	e0bffe17 	ldw	r2,-8(fp)
   15780:	10c00615 	stw	r3,24(r2)
   15784:	e0bffe17 	ldw	r2,-8(fp)
   15788:	10c00617 	ldw	r3,24(r2)
   1578c:	e0bffe17 	ldw	r2,-8(fp)
   15790:	10c00515 	stw	r3,20(r2)
    for (i=0; i<32; i++) {
   15794:	e03ffa15 	stw	zero,-24(fp)
   15798:	00003c06 	br	1588c <secp256k1_fe_set_b32+0x1a0>
        int j;
        for (j=0; j<4; j++) {
   1579c:	e03ffb15 	stw	zero,-20(fp)
   157a0:	00003406 	br	15874 <secp256k1_fe_set_b32+0x188>
            int limb = (8*i+2*j)/26;
   157a4:	e0bffa17 	ldw	r2,-24(fp)
   157a8:	1085883a 	add	r2,r2,r2
   157ac:	1085883a 	add	r2,r2,r2
   157b0:	1007883a 	mov	r3,r2
   157b4:	e0bffb17 	ldw	r2,-20(fp)
   157b8:	1885883a 	add	r2,r3,r2
   157bc:	1085883a 	add	r2,r2,r2
   157c0:	01400684 	movi	r5,26
   157c4:	1009883a 	mov	r4,r2
   157c8:	00439400 	call	43940 <__divsi3>
   157cc:	e0bffc15 	stw	r2,-16(fp)
            int shift = (8*i+2*j)%26;
   157d0:	e0bffa17 	ldw	r2,-24(fp)
   157d4:	1085883a 	add	r2,r2,r2
   157d8:	1085883a 	add	r2,r2,r2
   157dc:	1007883a 	mov	r3,r2
   157e0:	e0bffb17 	ldw	r2,-20(fp)
   157e4:	1885883a 	add	r2,r3,r2
   157e8:	1085883a 	add	r2,r2,r2
   157ec:	01400684 	movi	r5,26
   157f0:	1009883a 	mov	r4,r2
   157f4:	00439c40 	call	439c4 <__modsi3>
   157f8:	e0bffd15 	stw	r2,-12(fp)
            r->n[limb] |= (uint32_t)((a[31-i] >> (2*j)) & 0x3) << shift;
   157fc:	e0fffe17 	ldw	r3,-8(fp)
   15800:	e0bffc17 	ldw	r2,-16(fp)
   15804:	1085883a 	add	r2,r2,r2
   15808:	1085883a 	add	r2,r2,r2
   1580c:	1885883a 	add	r2,r3,r2
   15810:	10c00017 	ldw	r3,0(r2)
   15814:	010007c4 	movi	r4,31
   15818:	e0bffa17 	ldw	r2,-24(fp)
   1581c:	2085c83a 	sub	r2,r4,r2
   15820:	1009883a 	mov	r4,r2
   15824:	e0bfff17 	ldw	r2,-4(fp)
   15828:	1105883a 	add	r2,r2,r4
   1582c:	10800003 	ldbu	r2,0(r2)
   15830:	11003fcc 	andi	r4,r2,255
   15834:	e0bffb17 	ldw	r2,-20(fp)
   15838:	1085883a 	add	r2,r2,r2
   1583c:	2085d83a 	sra	r2,r4,r2
   15840:	110000cc 	andi	r4,r2,3
   15844:	e0bffd17 	ldw	r2,-12(fp)
   15848:	2084983a 	sll	r2,r4,r2
   1584c:	1886b03a 	or	r3,r3,r2
   15850:	e13ffe17 	ldw	r4,-8(fp)
   15854:	e0bffc17 	ldw	r2,-16(fp)
   15858:	1085883a 	add	r2,r2,r2
   1585c:	1085883a 	add	r2,r2,r2
   15860:	2085883a 	add	r2,r4,r2
   15864:	10c00015 	stw	r3,0(r2)
    int i;
    r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;
    r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;
    for (i=0; i<32; i++) {
        int j;
        for (j=0; j<4; j++) {
   15868:	e0bffb17 	ldw	r2,-20(fp)
   1586c:	10800044 	addi	r2,r2,1
   15870:	e0bffb15 	stw	r2,-20(fp)
   15874:	e0bffb17 	ldw	r2,-20(fp)
   15878:	10800110 	cmplti	r2,r2,4
   1587c:	103fc91e 	bne	r2,zero,157a4 <__alt_mem_epcs_flash_controller+0xfe00c7a4>

static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {
    int i;
    r->n[0] = r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;
    r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;
    for (i=0; i<32; i++) {
   15880:	e0bffa17 	ldw	r2,-24(fp)
   15884:	10800044 	addi	r2,r2,1
   15888:	e0bffa15 	stw	r2,-24(fp)
   1588c:	e0bffa17 	ldw	r2,-24(fp)
   15890:	10800810 	cmplti	r2,r2,32
   15894:	103fc11e 	bne	r2,zero,1579c <__alt_mem_epcs_flash_controller+0xfe00c79c>
            int limb = (8*i+2*j)/26;
            int shift = (8*i+2*j)%26;
            r->n[limb] |= (uint32_t)((a[31-i] >> (2*j)) & 0x3) << shift;
        }
    }
    if (r->n[9] == 0x3FFFFFUL && (r->n[8] & r->n[7] & r->n[6] & r->n[5] & r->n[4] & r->n[3] & r->n[2]) == 0x3FFFFFFUL && (r->n[1] + 0x40UL + ((r->n[0] + 0x3D1UL) >> 26)) > 0x3FFFFFFUL) {
   15898:	e0bffe17 	ldw	r2,-8(fp)
   1589c:	10c00917 	ldw	r3,36(r2)
   158a0:	00801034 	movhi	r2,64
   158a4:	10bfffc4 	addi	r2,r2,-1
   158a8:	1880231e 	bne	r3,r2,15938 <secp256k1_fe_set_b32+0x24c>
   158ac:	e0bffe17 	ldw	r2,-8(fp)
   158b0:	10c00817 	ldw	r3,32(r2)
   158b4:	e0bffe17 	ldw	r2,-8(fp)
   158b8:	10800717 	ldw	r2,28(r2)
   158bc:	1886703a 	and	r3,r3,r2
   158c0:	e0bffe17 	ldw	r2,-8(fp)
   158c4:	10800617 	ldw	r2,24(r2)
   158c8:	1886703a 	and	r3,r3,r2
   158cc:	e0bffe17 	ldw	r2,-8(fp)
   158d0:	10800517 	ldw	r2,20(r2)
   158d4:	1886703a 	and	r3,r3,r2
   158d8:	e0bffe17 	ldw	r2,-8(fp)
   158dc:	10800417 	ldw	r2,16(r2)
   158e0:	1886703a 	and	r3,r3,r2
   158e4:	e0bffe17 	ldw	r2,-8(fp)
   158e8:	10800317 	ldw	r2,12(r2)
   158ec:	1886703a 	and	r3,r3,r2
   158f0:	e0bffe17 	ldw	r2,-8(fp)
   158f4:	10800217 	ldw	r2,8(r2)
   158f8:	1886703a 	and	r3,r3,r2
   158fc:	00810034 	movhi	r2,1024
   15900:	10bfffc4 	addi	r2,r2,-1
   15904:	18800c1e 	bne	r3,r2,15938 <secp256k1_fe_set_b32+0x24c>
   15908:	e0bffe17 	ldw	r2,-8(fp)
   1590c:	10c00117 	ldw	r3,4(r2)
   15910:	e0bffe17 	ldw	r2,-8(fp)
   15914:	10800017 	ldw	r2,0(r2)
   15918:	1080f444 	addi	r2,r2,977
   1591c:	1004d6ba 	srli	r2,r2,26
   15920:	1885883a 	add	r2,r3,r2
   15924:	10c01004 	addi	r3,r2,64
   15928:	00810034 	movhi	r2,1024
   1592c:	18800236 	bltu	r3,r2,15938 <secp256k1_fe_set_b32+0x24c>
        return 0;
   15930:	0005883a 	mov	r2,zero
   15934:	00000906 	br	1595c <secp256k1_fe_set_b32+0x270>
    }
#ifdef VERIFY
    r->magnitude = 1;
   15938:	e0bffe17 	ldw	r2,-8(fp)
   1593c:	00c00044 	movi	r3,1
   15940:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   15944:	e0bffe17 	ldw	r2,-8(fp)
   15948:	00c00044 	movi	r3,1
   1594c:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_verify(r);
   15950:	e13ffe17 	ldw	r4,-8(fp)
   15954:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
    return 1;
   15958:	00800044 	movi	r2,1
}
   1595c:	e037883a 	mov	sp,fp
   15960:	dfc00117 	ldw	ra,4(sp)
   15964:	df000017 	ldw	fp,0(sp)
   15968:	dec00204 	addi	sp,sp,8
   1596c:	f800283a 	ret

00015970 <secp256k1_fe_get_b32>:

/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */
static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {
   15970:	defff604 	addi	sp,sp,-40
   15974:	dfc00915 	stw	ra,36(sp)
   15978:	df000815 	stw	fp,32(sp)
   1597c:	df000804 	addi	fp,sp,32
   15980:	e13ffe15 	stw	r4,-8(fp)
   15984:	e17fff15 	stw	r5,-4(fp)
    int i;
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   15988:	e0bfff17 	ldw	r2,-4(fp)
   1598c:	10800b17 	ldw	r2,44(r2)
   15990:	1005003a 	cmpeq	r2,r2,zero
   15994:	10803fcc 	andi	r2,r2,255
   15998:	10000d26 	beq	r2,zero,159d0 <secp256k1_fe_get_b32+0x60>
   1599c:	d0a01617 	ldw	r2,-32680(gp)
   159a0:	10c00317 	ldw	r3,12(r2)
   159a4:	00800174 	movhi	r2,5
   159a8:	10920704 	addi	r2,r2,18460
   159ac:	d8800015 	stw	r2,0(sp)
   159b0:	01c05884 	movi	r7,354
   159b4:	01800174 	movhi	r6,5
   159b8:	3191dd04 	addi	r6,r6,18292
   159bc:	01400174 	movhi	r5,5
   159c0:	2951e804 	addi	r5,r5,18336
   159c4:	1809883a 	mov	r4,r3
   159c8:	00461000 	call	46100 <fprintf>
   159cc:	0045fd40 	call	45fd4 <abort>
    secp256k1_fe_verify(a);
   159d0:	e13fff17 	ldw	r4,-4(fp)
   159d4:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
    for (i=0; i<32; i++) {
   159d8:	e03ff915 	stw	zero,-28(fp)
   159dc:	00003906 	br	15ac4 <secp256k1_fe_get_b32+0x154>
        int j;
        int c = 0;
   159e0:	e03ffb15 	stw	zero,-20(fp)
        for (j=0; j<4; j++) {
   159e4:	e03ffa15 	stw	zero,-24(fp)
   159e8:	00002806 	br	15a8c <secp256k1_fe_get_b32+0x11c>
            int limb = (8*i+2*j)/26;
   159ec:	e0bff917 	ldw	r2,-28(fp)
   159f0:	1085883a 	add	r2,r2,r2
   159f4:	1085883a 	add	r2,r2,r2
   159f8:	1007883a 	mov	r3,r2
   159fc:	e0bffa17 	ldw	r2,-24(fp)
   15a00:	1885883a 	add	r2,r3,r2
   15a04:	1085883a 	add	r2,r2,r2
   15a08:	01400684 	movi	r5,26
   15a0c:	1009883a 	mov	r4,r2
   15a10:	00439400 	call	43940 <__divsi3>
   15a14:	e0bffc15 	stw	r2,-16(fp)
            int shift = (8*i+2*j)%26;
   15a18:	e0bff917 	ldw	r2,-28(fp)
   15a1c:	1085883a 	add	r2,r2,r2
   15a20:	1085883a 	add	r2,r2,r2
   15a24:	1007883a 	mov	r3,r2
   15a28:	e0bffa17 	ldw	r2,-24(fp)
   15a2c:	1885883a 	add	r2,r3,r2
   15a30:	1085883a 	add	r2,r2,r2
   15a34:	01400684 	movi	r5,26
   15a38:	1009883a 	mov	r4,r2
   15a3c:	00439c40 	call	439c4 <__modsi3>
   15a40:	e0bffd15 	stw	r2,-12(fp)
            c |= ((a->n[limb] >> shift) & 0x3) << (2 * j);
   15a44:	e0ffff17 	ldw	r3,-4(fp)
   15a48:	e0bffc17 	ldw	r2,-16(fp)
   15a4c:	1085883a 	add	r2,r2,r2
   15a50:	1085883a 	add	r2,r2,r2
   15a54:	1885883a 	add	r2,r3,r2
   15a58:	10c00017 	ldw	r3,0(r2)
   15a5c:	e0bffd17 	ldw	r2,-12(fp)
   15a60:	1884d83a 	srl	r2,r3,r2
   15a64:	10c000cc 	andi	r3,r2,3
   15a68:	e0bffa17 	ldw	r2,-24(fp)
   15a6c:	1085883a 	add	r2,r2,r2
   15a70:	1886983a 	sll	r3,r3,r2
   15a74:	e0bffb17 	ldw	r2,-20(fp)
   15a78:	1884b03a 	or	r2,r3,r2
   15a7c:	e0bffb15 	stw	r2,-20(fp)
    secp256k1_fe_verify(a);
#endif
    for (i=0; i<32; i++) {
        int j;
        int c = 0;
        for (j=0; j<4; j++) {
   15a80:	e0bffa17 	ldw	r2,-24(fp)
   15a84:	10800044 	addi	r2,r2,1
   15a88:	e0bffa15 	stw	r2,-24(fp)
   15a8c:	e0bffa17 	ldw	r2,-24(fp)
   15a90:	10800110 	cmplti	r2,r2,4
   15a94:	103fd51e 	bne	r2,zero,159ec <__alt_mem_epcs_flash_controller+0xfe00c9ec>
            int limb = (8*i+2*j)/26;
            int shift = (8*i+2*j)%26;
            c |= ((a->n[limb] >> shift) & 0x3) << (2 * j);
        }
        r[31-i] = c;
   15a98:	00c007c4 	movi	r3,31
   15a9c:	e0bff917 	ldw	r2,-28(fp)
   15aa0:	1885c83a 	sub	r2,r3,r2
   15aa4:	1007883a 	mov	r3,r2
   15aa8:	e0bffe17 	ldw	r2,-8(fp)
   15aac:	10c5883a 	add	r2,r2,r3
   15ab0:	e0fffb17 	ldw	r3,-20(fp)
   15ab4:	10c00005 	stb	r3,0(r2)
    int i;
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
    secp256k1_fe_verify(a);
#endif
    for (i=0; i<32; i++) {
   15ab8:	e0bff917 	ldw	r2,-28(fp)
   15abc:	10800044 	addi	r2,r2,1
   15ac0:	e0bff915 	stw	r2,-28(fp)
   15ac4:	e0bff917 	ldw	r2,-28(fp)
   15ac8:	10800810 	cmplti	r2,r2,32
   15acc:	103fc41e 	bne	r2,zero,159e0 <__alt_mem_epcs_flash_controller+0xfe00c9e0>
            int shift = (8*i+2*j)%26;
            c |= ((a->n[limb] >> shift) & 0x3) << (2 * j);
        }
        r[31-i] = c;
    }
}
   15ad0:	0001883a 	nop
   15ad4:	e037883a 	mov	sp,fp
   15ad8:	dfc00117 	ldw	ra,4(sp)
   15adc:	df000017 	ldw	fp,0(sp)
   15ae0:	dec00204 	addi	sp,sp,8
   15ae4:	f800283a 	ret

00015ae8 <secp256k1_fe_negate>:

SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {
   15ae8:	defffa04 	addi	sp,sp,-24
   15aec:	dfc00515 	stw	ra,20(sp)
   15af0:	df000415 	stw	fp,16(sp)
   15af4:	df000404 	addi	fp,sp,16
   15af8:	e13ffd15 	stw	r4,-12(fp)
   15afc:	e17ffe15 	stw	r5,-8(fp)
   15b00:	e1bfff15 	stw	r6,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->magnitude <= m);
   15b04:	e0bffe17 	ldw	r2,-8(fp)
   15b08:	10800a17 	ldw	r2,40(r2)
   15b0c:	e0ffff17 	ldw	r3,-4(fp)
   15b10:	1884803a 	cmplt	r2,r3,r2
   15b14:	10803fcc 	andi	r2,r2,255
   15b18:	10000d26 	beq	r2,zero,15b50 <secp256k1_fe_negate+0x68>
   15b1c:	d0a01617 	ldw	r2,-32680(gp)
   15b20:	10c00317 	ldw	r3,12(r2)
   15b24:	00800174 	movhi	r2,5
   15b28:	10921b04 	addi	r2,r2,18540
   15b2c:	d8800015 	stw	r2,0(sp)
   15b30:	01c05cc4 	movi	r7,371
   15b34:	01800174 	movhi	r6,5
   15b38:	3191dd04 	addi	r6,r6,18292
   15b3c:	01400174 	movhi	r5,5
   15b40:	2951e804 	addi	r5,r5,18336
   15b44:	1809883a 	mov	r4,r3
   15b48:	00461000 	call	46100 <fprintf>
   15b4c:	0045fd40 	call	45fd4 <abort>
    secp256k1_fe_verify(a);
   15b50:	e13ffe17 	ldw	r4,-8(fp)
   15b54:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
    r->n[0] = 0x3FFFC2FUL * 2 * (m + 1) - a->n[0];
   15b58:	e0bfff17 	ldw	r2,-4(fp)
   15b5c:	10800044 	addi	r2,r2,1
   15b60:	01420034 	movhi	r5,2048
   15b64:	297e1784 	addi	r5,r5,-1954
   15b68:	1009883a 	mov	r4,r2
   15b6c:	0043af40 	call	43af4 <__mulsi3>
   15b70:	1007883a 	mov	r3,r2
   15b74:	e0bffe17 	ldw	r2,-8(fp)
   15b78:	10800017 	ldw	r2,0(r2)
   15b7c:	1887c83a 	sub	r3,r3,r2
   15b80:	e0bffd17 	ldw	r2,-12(fp)
   15b84:	10c00015 	stw	r3,0(r2)
    r->n[1] = 0x3FFFFBFUL * 2 * (m + 1) - a->n[1];
   15b88:	e0bfff17 	ldw	r2,-4(fp)
   15b8c:	10800044 	addi	r2,r2,1
   15b90:	01420034 	movhi	r5,2048
   15b94:	297fdf84 	addi	r5,r5,-130
   15b98:	1009883a 	mov	r4,r2
   15b9c:	0043af40 	call	43af4 <__mulsi3>
   15ba0:	1007883a 	mov	r3,r2
   15ba4:	e0bffe17 	ldw	r2,-8(fp)
   15ba8:	10800117 	ldw	r2,4(r2)
   15bac:	1887c83a 	sub	r3,r3,r2
   15bb0:	e0bffd17 	ldw	r2,-12(fp)
   15bb4:	10c00115 	stw	r3,4(r2)
    r->n[2] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[2];
   15bb8:	e0bfff17 	ldw	r2,-4(fp)
   15bbc:	10800044 	addi	r2,r2,1
   15bc0:	1085883a 	add	r2,r2,r2
   15bc4:	100696ba 	slli	r3,r2,26
   15bc8:	1887c83a 	sub	r3,r3,r2
   15bcc:	e0bffe17 	ldw	r2,-8(fp)
   15bd0:	10800217 	ldw	r2,8(r2)
   15bd4:	1887c83a 	sub	r3,r3,r2
   15bd8:	e0bffd17 	ldw	r2,-12(fp)
   15bdc:	10c00215 	stw	r3,8(r2)
    r->n[3] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[3];
   15be0:	e0bfff17 	ldw	r2,-4(fp)
   15be4:	10800044 	addi	r2,r2,1
   15be8:	1085883a 	add	r2,r2,r2
   15bec:	100696ba 	slli	r3,r2,26
   15bf0:	1887c83a 	sub	r3,r3,r2
   15bf4:	e0bffe17 	ldw	r2,-8(fp)
   15bf8:	10800317 	ldw	r2,12(r2)
   15bfc:	1887c83a 	sub	r3,r3,r2
   15c00:	e0bffd17 	ldw	r2,-12(fp)
   15c04:	10c00315 	stw	r3,12(r2)
    r->n[4] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[4];
   15c08:	e0bfff17 	ldw	r2,-4(fp)
   15c0c:	10800044 	addi	r2,r2,1
   15c10:	1085883a 	add	r2,r2,r2
   15c14:	100696ba 	slli	r3,r2,26
   15c18:	1887c83a 	sub	r3,r3,r2
   15c1c:	e0bffe17 	ldw	r2,-8(fp)
   15c20:	10800417 	ldw	r2,16(r2)
   15c24:	1887c83a 	sub	r3,r3,r2
   15c28:	e0bffd17 	ldw	r2,-12(fp)
   15c2c:	10c00415 	stw	r3,16(r2)
    r->n[5] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[5];
   15c30:	e0bfff17 	ldw	r2,-4(fp)
   15c34:	10800044 	addi	r2,r2,1
   15c38:	1085883a 	add	r2,r2,r2
   15c3c:	100696ba 	slli	r3,r2,26
   15c40:	1887c83a 	sub	r3,r3,r2
   15c44:	e0bffe17 	ldw	r2,-8(fp)
   15c48:	10800517 	ldw	r2,20(r2)
   15c4c:	1887c83a 	sub	r3,r3,r2
   15c50:	e0bffd17 	ldw	r2,-12(fp)
   15c54:	10c00515 	stw	r3,20(r2)
    r->n[6] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[6];
   15c58:	e0bfff17 	ldw	r2,-4(fp)
   15c5c:	10800044 	addi	r2,r2,1
   15c60:	1085883a 	add	r2,r2,r2
   15c64:	100696ba 	slli	r3,r2,26
   15c68:	1887c83a 	sub	r3,r3,r2
   15c6c:	e0bffe17 	ldw	r2,-8(fp)
   15c70:	10800617 	ldw	r2,24(r2)
   15c74:	1887c83a 	sub	r3,r3,r2
   15c78:	e0bffd17 	ldw	r2,-12(fp)
   15c7c:	10c00615 	stw	r3,24(r2)
    r->n[7] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[7];
   15c80:	e0bfff17 	ldw	r2,-4(fp)
   15c84:	10800044 	addi	r2,r2,1
   15c88:	1085883a 	add	r2,r2,r2
   15c8c:	100696ba 	slli	r3,r2,26
   15c90:	1887c83a 	sub	r3,r3,r2
   15c94:	e0bffe17 	ldw	r2,-8(fp)
   15c98:	10800717 	ldw	r2,28(r2)
   15c9c:	1887c83a 	sub	r3,r3,r2
   15ca0:	e0bffd17 	ldw	r2,-12(fp)
   15ca4:	10c00715 	stw	r3,28(r2)
    r->n[8] = 0x3FFFFFFUL * 2 * (m + 1) - a->n[8];
   15ca8:	e0bfff17 	ldw	r2,-4(fp)
   15cac:	10800044 	addi	r2,r2,1
   15cb0:	1085883a 	add	r2,r2,r2
   15cb4:	100696ba 	slli	r3,r2,26
   15cb8:	1887c83a 	sub	r3,r3,r2
   15cbc:	e0bffe17 	ldw	r2,-8(fp)
   15cc0:	10800817 	ldw	r2,32(r2)
   15cc4:	1887c83a 	sub	r3,r3,r2
   15cc8:	e0bffd17 	ldw	r2,-12(fp)
   15ccc:	10c00815 	stw	r3,32(r2)
    r->n[9] = 0x03FFFFFUL * 2 * (m + 1) - a->n[9];
   15cd0:	e0bfff17 	ldw	r2,-4(fp)
   15cd4:	10800044 	addi	r2,r2,1
   15cd8:	1085883a 	add	r2,r2,r2
   15cdc:	100695ba 	slli	r3,r2,22
   15ce0:	1887c83a 	sub	r3,r3,r2
   15ce4:	e0bffe17 	ldw	r2,-8(fp)
   15ce8:	10800917 	ldw	r2,36(r2)
   15cec:	1887c83a 	sub	r3,r3,r2
   15cf0:	e0bffd17 	ldw	r2,-12(fp)
   15cf4:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    r->magnitude = m + 1;
   15cf8:	e0bfff17 	ldw	r2,-4(fp)
   15cfc:	10c00044 	addi	r3,r2,1
   15d00:	e0bffd17 	ldw	r2,-12(fp)
   15d04:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   15d08:	e0bffd17 	ldw	r2,-12(fp)
   15d0c:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   15d10:	e13ffd17 	ldw	r4,-12(fp)
   15d14:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
}
   15d18:	0001883a 	nop
   15d1c:	e037883a 	mov	sp,fp
   15d20:	dfc00117 	ldw	ra,4(sp)
   15d24:	df000017 	ldw	fp,0(sp)
   15d28:	dec00204 	addi	sp,sp,8
   15d2c:	f800283a 	ret

00015d30 <secp256k1_fe_mul_int>:

SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {
   15d30:	defffc04 	addi	sp,sp,-16
   15d34:	dfc00315 	stw	ra,12(sp)
   15d38:	df000215 	stw	fp,8(sp)
   15d3c:	df000204 	addi	fp,sp,8
   15d40:	e13ffe15 	stw	r4,-8(fp)
   15d44:	e17fff15 	stw	r5,-4(fp)
    r->n[0] *= a;
   15d48:	e0bffe17 	ldw	r2,-8(fp)
   15d4c:	10800017 	ldw	r2,0(r2)
   15d50:	e0ffff17 	ldw	r3,-4(fp)
   15d54:	180b883a 	mov	r5,r3
   15d58:	1009883a 	mov	r4,r2
   15d5c:	0043af40 	call	43af4 <__mulsi3>
   15d60:	1007883a 	mov	r3,r2
   15d64:	e0bffe17 	ldw	r2,-8(fp)
   15d68:	10c00015 	stw	r3,0(r2)
    r->n[1] *= a;
   15d6c:	e0bffe17 	ldw	r2,-8(fp)
   15d70:	10800117 	ldw	r2,4(r2)
   15d74:	e0ffff17 	ldw	r3,-4(fp)
   15d78:	180b883a 	mov	r5,r3
   15d7c:	1009883a 	mov	r4,r2
   15d80:	0043af40 	call	43af4 <__mulsi3>
   15d84:	1007883a 	mov	r3,r2
   15d88:	e0bffe17 	ldw	r2,-8(fp)
   15d8c:	10c00115 	stw	r3,4(r2)
    r->n[2] *= a;
   15d90:	e0bffe17 	ldw	r2,-8(fp)
   15d94:	10800217 	ldw	r2,8(r2)
   15d98:	e0ffff17 	ldw	r3,-4(fp)
   15d9c:	180b883a 	mov	r5,r3
   15da0:	1009883a 	mov	r4,r2
   15da4:	0043af40 	call	43af4 <__mulsi3>
   15da8:	1007883a 	mov	r3,r2
   15dac:	e0bffe17 	ldw	r2,-8(fp)
   15db0:	10c00215 	stw	r3,8(r2)
    r->n[3] *= a;
   15db4:	e0bffe17 	ldw	r2,-8(fp)
   15db8:	10800317 	ldw	r2,12(r2)
   15dbc:	e0ffff17 	ldw	r3,-4(fp)
   15dc0:	180b883a 	mov	r5,r3
   15dc4:	1009883a 	mov	r4,r2
   15dc8:	0043af40 	call	43af4 <__mulsi3>
   15dcc:	1007883a 	mov	r3,r2
   15dd0:	e0bffe17 	ldw	r2,-8(fp)
   15dd4:	10c00315 	stw	r3,12(r2)
    r->n[4] *= a;
   15dd8:	e0bffe17 	ldw	r2,-8(fp)
   15ddc:	10800417 	ldw	r2,16(r2)
   15de0:	e0ffff17 	ldw	r3,-4(fp)
   15de4:	180b883a 	mov	r5,r3
   15de8:	1009883a 	mov	r4,r2
   15dec:	0043af40 	call	43af4 <__mulsi3>
   15df0:	1007883a 	mov	r3,r2
   15df4:	e0bffe17 	ldw	r2,-8(fp)
   15df8:	10c00415 	stw	r3,16(r2)
    r->n[5] *= a;
   15dfc:	e0bffe17 	ldw	r2,-8(fp)
   15e00:	10800517 	ldw	r2,20(r2)
   15e04:	e0ffff17 	ldw	r3,-4(fp)
   15e08:	180b883a 	mov	r5,r3
   15e0c:	1009883a 	mov	r4,r2
   15e10:	0043af40 	call	43af4 <__mulsi3>
   15e14:	1007883a 	mov	r3,r2
   15e18:	e0bffe17 	ldw	r2,-8(fp)
   15e1c:	10c00515 	stw	r3,20(r2)
    r->n[6] *= a;
   15e20:	e0bffe17 	ldw	r2,-8(fp)
   15e24:	10800617 	ldw	r2,24(r2)
   15e28:	e0ffff17 	ldw	r3,-4(fp)
   15e2c:	180b883a 	mov	r5,r3
   15e30:	1009883a 	mov	r4,r2
   15e34:	0043af40 	call	43af4 <__mulsi3>
   15e38:	1007883a 	mov	r3,r2
   15e3c:	e0bffe17 	ldw	r2,-8(fp)
   15e40:	10c00615 	stw	r3,24(r2)
    r->n[7] *= a;
   15e44:	e0bffe17 	ldw	r2,-8(fp)
   15e48:	10800717 	ldw	r2,28(r2)
   15e4c:	e0ffff17 	ldw	r3,-4(fp)
   15e50:	180b883a 	mov	r5,r3
   15e54:	1009883a 	mov	r4,r2
   15e58:	0043af40 	call	43af4 <__mulsi3>
   15e5c:	1007883a 	mov	r3,r2
   15e60:	e0bffe17 	ldw	r2,-8(fp)
   15e64:	10c00715 	stw	r3,28(r2)
    r->n[8] *= a;
   15e68:	e0bffe17 	ldw	r2,-8(fp)
   15e6c:	10800817 	ldw	r2,32(r2)
   15e70:	e0ffff17 	ldw	r3,-4(fp)
   15e74:	180b883a 	mov	r5,r3
   15e78:	1009883a 	mov	r4,r2
   15e7c:	0043af40 	call	43af4 <__mulsi3>
   15e80:	1007883a 	mov	r3,r2
   15e84:	e0bffe17 	ldw	r2,-8(fp)
   15e88:	10c00815 	stw	r3,32(r2)
    r->n[9] *= a;
   15e8c:	e0bffe17 	ldw	r2,-8(fp)
   15e90:	10800917 	ldw	r2,36(r2)
   15e94:	e0ffff17 	ldw	r3,-4(fp)
   15e98:	180b883a 	mov	r5,r3
   15e9c:	1009883a 	mov	r4,r2
   15ea0:	0043af40 	call	43af4 <__mulsi3>
   15ea4:	1007883a 	mov	r3,r2
   15ea8:	e0bffe17 	ldw	r2,-8(fp)
   15eac:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    r->magnitude *= a;
   15eb0:	e0bffe17 	ldw	r2,-8(fp)
   15eb4:	10800a17 	ldw	r2,40(r2)
   15eb8:	e17fff17 	ldw	r5,-4(fp)
   15ebc:	1009883a 	mov	r4,r2
   15ec0:	0043af40 	call	43af4 <__mulsi3>
   15ec4:	1007883a 	mov	r3,r2
   15ec8:	e0bffe17 	ldw	r2,-8(fp)
   15ecc:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   15ed0:	e0bffe17 	ldw	r2,-8(fp)
   15ed4:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   15ed8:	e13ffe17 	ldw	r4,-8(fp)
   15edc:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
}
   15ee0:	0001883a 	nop
   15ee4:	e037883a 	mov	sp,fp
   15ee8:	dfc00117 	ldw	ra,4(sp)
   15eec:	df000017 	ldw	fp,0(sp)
   15ef0:	dec00204 	addi	sp,sp,8
   15ef4:	f800283a 	ret

00015ef8 <secp256k1_fe_add>:

SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {
   15ef8:	defffc04 	addi	sp,sp,-16
   15efc:	dfc00315 	stw	ra,12(sp)
   15f00:	df000215 	stw	fp,8(sp)
   15f04:	df000204 	addi	fp,sp,8
   15f08:	e13ffe15 	stw	r4,-8(fp)
   15f0c:	e17fff15 	stw	r5,-4(fp)
#ifdef VERIFY
    secp256k1_fe_verify(a);
   15f10:	e13fff17 	ldw	r4,-4(fp)
   15f14:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
    r->n[0] += a->n[0];
   15f18:	e0bffe17 	ldw	r2,-8(fp)
   15f1c:	10c00017 	ldw	r3,0(r2)
   15f20:	e0bfff17 	ldw	r2,-4(fp)
   15f24:	10800017 	ldw	r2,0(r2)
   15f28:	1887883a 	add	r3,r3,r2
   15f2c:	e0bffe17 	ldw	r2,-8(fp)
   15f30:	10c00015 	stw	r3,0(r2)
    r->n[1] += a->n[1];
   15f34:	e0bffe17 	ldw	r2,-8(fp)
   15f38:	10c00117 	ldw	r3,4(r2)
   15f3c:	e0bfff17 	ldw	r2,-4(fp)
   15f40:	10800117 	ldw	r2,4(r2)
   15f44:	1887883a 	add	r3,r3,r2
   15f48:	e0bffe17 	ldw	r2,-8(fp)
   15f4c:	10c00115 	stw	r3,4(r2)
    r->n[2] += a->n[2];
   15f50:	e0bffe17 	ldw	r2,-8(fp)
   15f54:	10c00217 	ldw	r3,8(r2)
   15f58:	e0bfff17 	ldw	r2,-4(fp)
   15f5c:	10800217 	ldw	r2,8(r2)
   15f60:	1887883a 	add	r3,r3,r2
   15f64:	e0bffe17 	ldw	r2,-8(fp)
   15f68:	10c00215 	stw	r3,8(r2)
    r->n[3] += a->n[3];
   15f6c:	e0bffe17 	ldw	r2,-8(fp)
   15f70:	10c00317 	ldw	r3,12(r2)
   15f74:	e0bfff17 	ldw	r2,-4(fp)
   15f78:	10800317 	ldw	r2,12(r2)
   15f7c:	1887883a 	add	r3,r3,r2
   15f80:	e0bffe17 	ldw	r2,-8(fp)
   15f84:	10c00315 	stw	r3,12(r2)
    r->n[4] += a->n[4];
   15f88:	e0bffe17 	ldw	r2,-8(fp)
   15f8c:	10c00417 	ldw	r3,16(r2)
   15f90:	e0bfff17 	ldw	r2,-4(fp)
   15f94:	10800417 	ldw	r2,16(r2)
   15f98:	1887883a 	add	r3,r3,r2
   15f9c:	e0bffe17 	ldw	r2,-8(fp)
   15fa0:	10c00415 	stw	r3,16(r2)
    r->n[5] += a->n[5];
   15fa4:	e0bffe17 	ldw	r2,-8(fp)
   15fa8:	10c00517 	ldw	r3,20(r2)
   15fac:	e0bfff17 	ldw	r2,-4(fp)
   15fb0:	10800517 	ldw	r2,20(r2)
   15fb4:	1887883a 	add	r3,r3,r2
   15fb8:	e0bffe17 	ldw	r2,-8(fp)
   15fbc:	10c00515 	stw	r3,20(r2)
    r->n[6] += a->n[6];
   15fc0:	e0bffe17 	ldw	r2,-8(fp)
   15fc4:	10c00617 	ldw	r3,24(r2)
   15fc8:	e0bfff17 	ldw	r2,-4(fp)
   15fcc:	10800617 	ldw	r2,24(r2)
   15fd0:	1887883a 	add	r3,r3,r2
   15fd4:	e0bffe17 	ldw	r2,-8(fp)
   15fd8:	10c00615 	stw	r3,24(r2)
    r->n[7] += a->n[7];
   15fdc:	e0bffe17 	ldw	r2,-8(fp)
   15fe0:	10c00717 	ldw	r3,28(r2)
   15fe4:	e0bfff17 	ldw	r2,-4(fp)
   15fe8:	10800717 	ldw	r2,28(r2)
   15fec:	1887883a 	add	r3,r3,r2
   15ff0:	e0bffe17 	ldw	r2,-8(fp)
   15ff4:	10c00715 	stw	r3,28(r2)
    r->n[8] += a->n[8];
   15ff8:	e0bffe17 	ldw	r2,-8(fp)
   15ffc:	10c00817 	ldw	r3,32(r2)
   16000:	e0bfff17 	ldw	r2,-4(fp)
   16004:	10800817 	ldw	r2,32(r2)
   16008:	1887883a 	add	r3,r3,r2
   1600c:	e0bffe17 	ldw	r2,-8(fp)
   16010:	10c00815 	stw	r3,32(r2)
    r->n[9] += a->n[9];
   16014:	e0bffe17 	ldw	r2,-8(fp)
   16018:	10c00917 	ldw	r3,36(r2)
   1601c:	e0bfff17 	ldw	r2,-4(fp)
   16020:	10800917 	ldw	r2,36(r2)
   16024:	1887883a 	add	r3,r3,r2
   16028:	e0bffe17 	ldw	r2,-8(fp)
   1602c:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    r->magnitude += a->magnitude;
   16030:	e0bffe17 	ldw	r2,-8(fp)
   16034:	10c00a17 	ldw	r3,40(r2)
   16038:	e0bfff17 	ldw	r2,-4(fp)
   1603c:	10800a17 	ldw	r2,40(r2)
   16040:	1887883a 	add	r3,r3,r2
   16044:	e0bffe17 	ldw	r2,-8(fp)
   16048:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   1604c:	e0bffe17 	ldw	r2,-8(fp)
   16050:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   16054:	e13ffe17 	ldw	r4,-8(fp)
   16058:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
}
   1605c:	0001883a 	nop
   16060:	e037883a 	mov	sp,fp
   16064:	dfc00117 	ldw	ra,4(sp)
   16068:	df000017 	ldw	fp,0(sp)
   1606c:	dec00204 	addi	sp,sp,8
   16070:	f800283a 	ret

00016074 <secp256k1_fe_mul_inner>:
#define VERIFY_BITS(x, n) VERIFY_CHECK(((x) >> (n)) == 0)
#else
#define VERIFY_BITS(x, n) do { } while(0)
#endif

SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t *a, const uint32_t * SECP256K1_RESTRICT b) {
   16074:	defdac04 	addi	sp,sp,-2384
   16078:	dfc25315 	stw	ra,2380(sp)
   1607c:	df025215 	stw	fp,2376(sp)
   16080:	ddc25115 	stw	r23,2372(sp)
   16084:	dd825015 	stw	r22,2368(sp)
   16088:	dd424f15 	stw	r21,2364(sp)
   1608c:	dd024e15 	stw	r20,2360(sp)
   16090:	dcc24d15 	stw	r19,2356(sp)
   16094:	dc824c15 	stw	r18,2352(sp)
   16098:	dc424b15 	stw	r17,2348(sp)
   1609c:	dc024a15 	stw	r16,2344(sp)
   160a0:	df025204 	addi	fp,sp,2376
   160a4:	e13dd115 	stw	r4,-2236(fp)
   160a8:	e17dd215 	stw	r5,-2232(fp)
   160ac:	e1bdd315 	stw	r6,-2228(fp)
    uint64_t c, d;
    uint64_t u0, u1, u2, u3, u4, u5, u6, u7, u8;
    uint32_t t9, t1, t0, t2, t3, t4, t5, t6, t7;
    const uint32_t M = 0x3FFFFFFUL, R0 = 0x3D10UL, R1 = 0x400UL;
   160b0:	00810034 	movhi	r2,1024
   160b4:	10bfffc4 	addi	r2,r2,-1
   160b8:	e0bdaf15 	stw	r2,-2372(fp)
   160bc:	008f4404 	movi	r2,15632
   160c0:	e0bdb015 	stw	r2,-2368(fp)
   160c4:	00810004 	movi	r2,1024
   160c8:	e0bdb115 	stw	r2,-2364(fp)

    VERIFY_BITS(a[0], 30);
   160cc:	e0bdd217 	ldw	r2,-2232(fp)
   160d0:	10800017 	ldw	r2,0(r2)
   160d4:	1004d7ba 	srli	r2,r2,30
   160d8:	1004c03a 	cmpne	r2,r2,zero
   160dc:	10803fcc 	andi	r2,r2,255
   160e0:	10000d26 	beq	r2,zero,16118 <secp256k1_fe_mul_inner+0xa4>
   160e4:	d0a01617 	ldw	r2,-32680(gp)
   160e8:	10c00317 	ldw	r3,12(r2)
   160ec:	00800174 	movhi	r2,5
   160f0:	10922604 	addi	r2,r2,18584
   160f4:	d8800015 	stw	r2,0(sp)
   160f8:	01c07084 	movi	r7,450
   160fc:	01800174 	movhi	r6,5
   16100:	3191dd04 	addi	r6,r6,18292
   16104:	01400174 	movhi	r5,5
   16108:	2951e804 	addi	r5,r5,18336
   1610c:	1809883a 	mov	r4,r3
   16110:	00461000 	call	46100 <fprintf>
   16114:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[1], 30);
   16118:	e0bdd217 	ldw	r2,-2232(fp)
   1611c:	10800104 	addi	r2,r2,4
   16120:	10800017 	ldw	r2,0(r2)
   16124:	1004d7ba 	srli	r2,r2,30
   16128:	1004c03a 	cmpne	r2,r2,zero
   1612c:	10803fcc 	andi	r2,r2,255
   16130:	10000d26 	beq	r2,zero,16168 <secp256k1_fe_mul_inner+0xf4>
   16134:	d0a01617 	ldw	r2,-32680(gp)
   16138:	10c00317 	ldw	r3,12(r2)
   1613c:	00800174 	movhi	r2,5
   16140:	10923204 	addi	r2,r2,18632
   16144:	d8800015 	stw	r2,0(sp)
   16148:	01c070c4 	movi	r7,451
   1614c:	01800174 	movhi	r6,5
   16150:	3191dd04 	addi	r6,r6,18292
   16154:	01400174 	movhi	r5,5
   16158:	2951e804 	addi	r5,r5,18336
   1615c:	1809883a 	mov	r4,r3
   16160:	00461000 	call	46100 <fprintf>
   16164:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[2], 30);
   16168:	e0bdd217 	ldw	r2,-2232(fp)
   1616c:	10800204 	addi	r2,r2,8
   16170:	10800017 	ldw	r2,0(r2)
   16174:	1004d7ba 	srli	r2,r2,30
   16178:	1004c03a 	cmpne	r2,r2,zero
   1617c:	10803fcc 	andi	r2,r2,255
   16180:	10000d26 	beq	r2,zero,161b8 <secp256k1_fe_mul_inner+0x144>
   16184:	d0a01617 	ldw	r2,-32680(gp)
   16188:	10c00317 	ldw	r3,12(r2)
   1618c:	00800174 	movhi	r2,5
   16190:	10923e04 	addi	r2,r2,18680
   16194:	d8800015 	stw	r2,0(sp)
   16198:	01c07104 	movi	r7,452
   1619c:	01800174 	movhi	r6,5
   161a0:	3191dd04 	addi	r6,r6,18292
   161a4:	01400174 	movhi	r5,5
   161a8:	2951e804 	addi	r5,r5,18336
   161ac:	1809883a 	mov	r4,r3
   161b0:	00461000 	call	46100 <fprintf>
   161b4:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[3], 30);
   161b8:	e0bdd217 	ldw	r2,-2232(fp)
   161bc:	10800304 	addi	r2,r2,12
   161c0:	10800017 	ldw	r2,0(r2)
   161c4:	1004d7ba 	srli	r2,r2,30
   161c8:	1004c03a 	cmpne	r2,r2,zero
   161cc:	10803fcc 	andi	r2,r2,255
   161d0:	10000d26 	beq	r2,zero,16208 <secp256k1_fe_mul_inner+0x194>
   161d4:	d0a01617 	ldw	r2,-32680(gp)
   161d8:	10c00317 	ldw	r3,12(r2)
   161dc:	00800174 	movhi	r2,5
   161e0:	10924a04 	addi	r2,r2,18728
   161e4:	d8800015 	stw	r2,0(sp)
   161e8:	01c07144 	movi	r7,453
   161ec:	01800174 	movhi	r6,5
   161f0:	3191dd04 	addi	r6,r6,18292
   161f4:	01400174 	movhi	r5,5
   161f8:	2951e804 	addi	r5,r5,18336
   161fc:	1809883a 	mov	r4,r3
   16200:	00461000 	call	46100 <fprintf>
   16204:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[4], 30);
   16208:	e0bdd217 	ldw	r2,-2232(fp)
   1620c:	10800404 	addi	r2,r2,16
   16210:	10800017 	ldw	r2,0(r2)
   16214:	1004d7ba 	srli	r2,r2,30
   16218:	1004c03a 	cmpne	r2,r2,zero
   1621c:	10803fcc 	andi	r2,r2,255
   16220:	10000d26 	beq	r2,zero,16258 <secp256k1_fe_mul_inner+0x1e4>
   16224:	d0a01617 	ldw	r2,-32680(gp)
   16228:	10c00317 	ldw	r3,12(r2)
   1622c:	00800174 	movhi	r2,5
   16230:	10925604 	addi	r2,r2,18776
   16234:	d8800015 	stw	r2,0(sp)
   16238:	01c07184 	movi	r7,454
   1623c:	01800174 	movhi	r6,5
   16240:	3191dd04 	addi	r6,r6,18292
   16244:	01400174 	movhi	r5,5
   16248:	2951e804 	addi	r5,r5,18336
   1624c:	1809883a 	mov	r4,r3
   16250:	00461000 	call	46100 <fprintf>
   16254:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[5], 30);
   16258:	e0bdd217 	ldw	r2,-2232(fp)
   1625c:	10800504 	addi	r2,r2,20
   16260:	10800017 	ldw	r2,0(r2)
   16264:	1004d7ba 	srli	r2,r2,30
   16268:	1004c03a 	cmpne	r2,r2,zero
   1626c:	10803fcc 	andi	r2,r2,255
   16270:	10000d26 	beq	r2,zero,162a8 <secp256k1_fe_mul_inner+0x234>
   16274:	d0a01617 	ldw	r2,-32680(gp)
   16278:	10c00317 	ldw	r3,12(r2)
   1627c:	00800174 	movhi	r2,5
   16280:	10926204 	addi	r2,r2,18824
   16284:	d8800015 	stw	r2,0(sp)
   16288:	01c071c4 	movi	r7,455
   1628c:	01800174 	movhi	r6,5
   16290:	3191dd04 	addi	r6,r6,18292
   16294:	01400174 	movhi	r5,5
   16298:	2951e804 	addi	r5,r5,18336
   1629c:	1809883a 	mov	r4,r3
   162a0:	00461000 	call	46100 <fprintf>
   162a4:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[6], 30);
   162a8:	e0bdd217 	ldw	r2,-2232(fp)
   162ac:	10800604 	addi	r2,r2,24
   162b0:	10800017 	ldw	r2,0(r2)
   162b4:	1004d7ba 	srli	r2,r2,30
   162b8:	1004c03a 	cmpne	r2,r2,zero
   162bc:	10803fcc 	andi	r2,r2,255
   162c0:	10000d26 	beq	r2,zero,162f8 <secp256k1_fe_mul_inner+0x284>
   162c4:	d0a01617 	ldw	r2,-32680(gp)
   162c8:	10c00317 	ldw	r3,12(r2)
   162cc:	00800174 	movhi	r2,5
   162d0:	10926e04 	addi	r2,r2,18872
   162d4:	d8800015 	stw	r2,0(sp)
   162d8:	01c07204 	movi	r7,456
   162dc:	01800174 	movhi	r6,5
   162e0:	3191dd04 	addi	r6,r6,18292
   162e4:	01400174 	movhi	r5,5
   162e8:	2951e804 	addi	r5,r5,18336
   162ec:	1809883a 	mov	r4,r3
   162f0:	00461000 	call	46100 <fprintf>
   162f4:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[7], 30);
   162f8:	e0bdd217 	ldw	r2,-2232(fp)
   162fc:	10800704 	addi	r2,r2,28
   16300:	10800017 	ldw	r2,0(r2)
   16304:	1004d7ba 	srli	r2,r2,30
   16308:	1004c03a 	cmpne	r2,r2,zero
   1630c:	10803fcc 	andi	r2,r2,255
   16310:	10000d26 	beq	r2,zero,16348 <secp256k1_fe_mul_inner+0x2d4>
   16314:	d0a01617 	ldw	r2,-32680(gp)
   16318:	10c00317 	ldw	r3,12(r2)
   1631c:	00800174 	movhi	r2,5
   16320:	10927a04 	addi	r2,r2,18920
   16324:	d8800015 	stw	r2,0(sp)
   16328:	01c07244 	movi	r7,457
   1632c:	01800174 	movhi	r6,5
   16330:	3191dd04 	addi	r6,r6,18292
   16334:	01400174 	movhi	r5,5
   16338:	2951e804 	addi	r5,r5,18336
   1633c:	1809883a 	mov	r4,r3
   16340:	00461000 	call	46100 <fprintf>
   16344:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[8], 30);
   16348:	e0bdd217 	ldw	r2,-2232(fp)
   1634c:	10800804 	addi	r2,r2,32
   16350:	10800017 	ldw	r2,0(r2)
   16354:	1004d7ba 	srli	r2,r2,30
   16358:	1004c03a 	cmpne	r2,r2,zero
   1635c:	10803fcc 	andi	r2,r2,255
   16360:	10000d26 	beq	r2,zero,16398 <secp256k1_fe_mul_inner+0x324>
   16364:	d0a01617 	ldw	r2,-32680(gp)
   16368:	10c00317 	ldw	r3,12(r2)
   1636c:	00800174 	movhi	r2,5
   16370:	10928604 	addi	r2,r2,18968
   16374:	d8800015 	stw	r2,0(sp)
   16378:	01c07284 	movi	r7,458
   1637c:	01800174 	movhi	r6,5
   16380:	3191dd04 	addi	r6,r6,18292
   16384:	01400174 	movhi	r5,5
   16388:	2951e804 	addi	r5,r5,18336
   1638c:	1809883a 	mov	r4,r3
   16390:	00461000 	call	46100 <fprintf>
   16394:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[9], 26);
   16398:	e0bdd217 	ldw	r2,-2232(fp)
   1639c:	10800904 	addi	r2,r2,36
   163a0:	10800017 	ldw	r2,0(r2)
   163a4:	1004d6ba 	srli	r2,r2,26
   163a8:	1004c03a 	cmpne	r2,r2,zero
   163ac:	10803fcc 	andi	r2,r2,255
   163b0:	10000d26 	beq	r2,zero,163e8 <secp256k1_fe_mul_inner+0x374>
   163b4:	d0a01617 	ldw	r2,-32680(gp)
   163b8:	10c00317 	ldw	r3,12(r2)
   163bc:	00800174 	movhi	r2,5
   163c0:	10929204 	addi	r2,r2,19016
   163c4:	d8800015 	stw	r2,0(sp)
   163c8:	01c072c4 	movi	r7,459
   163cc:	01800174 	movhi	r6,5
   163d0:	3191dd04 	addi	r6,r6,18292
   163d4:	01400174 	movhi	r5,5
   163d8:	2951e804 	addi	r5,r5,18336
   163dc:	1809883a 	mov	r4,r3
   163e0:	00461000 	call	46100 <fprintf>
   163e4:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[0], 30);
   163e8:	e0bdd317 	ldw	r2,-2228(fp)
   163ec:	10800017 	ldw	r2,0(r2)
   163f0:	1004d7ba 	srli	r2,r2,30
   163f4:	1004c03a 	cmpne	r2,r2,zero
   163f8:	10803fcc 	andi	r2,r2,255
   163fc:	10000d26 	beq	r2,zero,16434 <secp256k1_fe_mul_inner+0x3c0>
   16400:	d0a01617 	ldw	r2,-32680(gp)
   16404:	10c00317 	ldw	r3,12(r2)
   16408:	00800174 	movhi	r2,5
   1640c:	10929e04 	addi	r2,r2,19064
   16410:	d8800015 	stw	r2,0(sp)
   16414:	01c07304 	movi	r7,460
   16418:	01800174 	movhi	r6,5
   1641c:	3191dd04 	addi	r6,r6,18292
   16420:	01400174 	movhi	r5,5
   16424:	2951e804 	addi	r5,r5,18336
   16428:	1809883a 	mov	r4,r3
   1642c:	00461000 	call	46100 <fprintf>
   16430:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[1], 30);
   16434:	e0bdd317 	ldw	r2,-2228(fp)
   16438:	10800104 	addi	r2,r2,4
   1643c:	10800017 	ldw	r2,0(r2)
   16440:	1004d7ba 	srli	r2,r2,30
   16444:	1004c03a 	cmpne	r2,r2,zero
   16448:	10803fcc 	andi	r2,r2,255
   1644c:	10000d26 	beq	r2,zero,16484 <secp256k1_fe_mul_inner+0x410>
   16450:	d0a01617 	ldw	r2,-32680(gp)
   16454:	10c00317 	ldw	r3,12(r2)
   16458:	00800174 	movhi	r2,5
   1645c:	1092aa04 	addi	r2,r2,19112
   16460:	d8800015 	stw	r2,0(sp)
   16464:	01c07344 	movi	r7,461
   16468:	01800174 	movhi	r6,5
   1646c:	3191dd04 	addi	r6,r6,18292
   16470:	01400174 	movhi	r5,5
   16474:	2951e804 	addi	r5,r5,18336
   16478:	1809883a 	mov	r4,r3
   1647c:	00461000 	call	46100 <fprintf>
   16480:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[2], 30);
   16484:	e0bdd317 	ldw	r2,-2228(fp)
   16488:	10800204 	addi	r2,r2,8
   1648c:	10800017 	ldw	r2,0(r2)
   16490:	1004d7ba 	srli	r2,r2,30
   16494:	1004c03a 	cmpne	r2,r2,zero
   16498:	10803fcc 	andi	r2,r2,255
   1649c:	10000d26 	beq	r2,zero,164d4 <secp256k1_fe_mul_inner+0x460>
   164a0:	d0a01617 	ldw	r2,-32680(gp)
   164a4:	10c00317 	ldw	r3,12(r2)
   164a8:	00800174 	movhi	r2,5
   164ac:	1092b604 	addi	r2,r2,19160
   164b0:	d8800015 	stw	r2,0(sp)
   164b4:	01c07384 	movi	r7,462
   164b8:	01800174 	movhi	r6,5
   164bc:	3191dd04 	addi	r6,r6,18292
   164c0:	01400174 	movhi	r5,5
   164c4:	2951e804 	addi	r5,r5,18336
   164c8:	1809883a 	mov	r4,r3
   164cc:	00461000 	call	46100 <fprintf>
   164d0:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[3], 30);
   164d4:	e0bdd317 	ldw	r2,-2228(fp)
   164d8:	10800304 	addi	r2,r2,12
   164dc:	10800017 	ldw	r2,0(r2)
   164e0:	1004d7ba 	srli	r2,r2,30
   164e4:	1004c03a 	cmpne	r2,r2,zero
   164e8:	10803fcc 	andi	r2,r2,255
   164ec:	10000d26 	beq	r2,zero,16524 <secp256k1_fe_mul_inner+0x4b0>
   164f0:	d0a01617 	ldw	r2,-32680(gp)
   164f4:	10c00317 	ldw	r3,12(r2)
   164f8:	00800174 	movhi	r2,5
   164fc:	1092c204 	addi	r2,r2,19208
   16500:	d8800015 	stw	r2,0(sp)
   16504:	01c073c4 	movi	r7,463
   16508:	01800174 	movhi	r6,5
   1650c:	3191dd04 	addi	r6,r6,18292
   16510:	01400174 	movhi	r5,5
   16514:	2951e804 	addi	r5,r5,18336
   16518:	1809883a 	mov	r4,r3
   1651c:	00461000 	call	46100 <fprintf>
   16520:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[4], 30);
   16524:	e0bdd317 	ldw	r2,-2228(fp)
   16528:	10800404 	addi	r2,r2,16
   1652c:	10800017 	ldw	r2,0(r2)
   16530:	1004d7ba 	srli	r2,r2,30
   16534:	1004c03a 	cmpne	r2,r2,zero
   16538:	10803fcc 	andi	r2,r2,255
   1653c:	10000d26 	beq	r2,zero,16574 <secp256k1_fe_mul_inner+0x500>
   16540:	d0a01617 	ldw	r2,-32680(gp)
   16544:	10c00317 	ldw	r3,12(r2)
   16548:	00800174 	movhi	r2,5
   1654c:	1092ce04 	addi	r2,r2,19256
   16550:	d8800015 	stw	r2,0(sp)
   16554:	01c07404 	movi	r7,464
   16558:	01800174 	movhi	r6,5
   1655c:	3191dd04 	addi	r6,r6,18292
   16560:	01400174 	movhi	r5,5
   16564:	2951e804 	addi	r5,r5,18336
   16568:	1809883a 	mov	r4,r3
   1656c:	00461000 	call	46100 <fprintf>
   16570:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[5], 30);
   16574:	e0bdd317 	ldw	r2,-2228(fp)
   16578:	10800504 	addi	r2,r2,20
   1657c:	10800017 	ldw	r2,0(r2)
   16580:	1004d7ba 	srli	r2,r2,30
   16584:	1004c03a 	cmpne	r2,r2,zero
   16588:	10803fcc 	andi	r2,r2,255
   1658c:	10000d26 	beq	r2,zero,165c4 <secp256k1_fe_mul_inner+0x550>
   16590:	d0a01617 	ldw	r2,-32680(gp)
   16594:	10c00317 	ldw	r3,12(r2)
   16598:	00800174 	movhi	r2,5
   1659c:	1092da04 	addi	r2,r2,19304
   165a0:	d8800015 	stw	r2,0(sp)
   165a4:	01c07444 	movi	r7,465
   165a8:	01800174 	movhi	r6,5
   165ac:	3191dd04 	addi	r6,r6,18292
   165b0:	01400174 	movhi	r5,5
   165b4:	2951e804 	addi	r5,r5,18336
   165b8:	1809883a 	mov	r4,r3
   165bc:	00461000 	call	46100 <fprintf>
   165c0:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[6], 30);
   165c4:	e0bdd317 	ldw	r2,-2228(fp)
   165c8:	10800604 	addi	r2,r2,24
   165cc:	10800017 	ldw	r2,0(r2)
   165d0:	1004d7ba 	srli	r2,r2,30
   165d4:	1004c03a 	cmpne	r2,r2,zero
   165d8:	10803fcc 	andi	r2,r2,255
   165dc:	10000d26 	beq	r2,zero,16614 <secp256k1_fe_mul_inner+0x5a0>
   165e0:	d0a01617 	ldw	r2,-32680(gp)
   165e4:	10c00317 	ldw	r3,12(r2)
   165e8:	00800174 	movhi	r2,5
   165ec:	1092e604 	addi	r2,r2,19352
   165f0:	d8800015 	stw	r2,0(sp)
   165f4:	01c07484 	movi	r7,466
   165f8:	01800174 	movhi	r6,5
   165fc:	3191dd04 	addi	r6,r6,18292
   16600:	01400174 	movhi	r5,5
   16604:	2951e804 	addi	r5,r5,18336
   16608:	1809883a 	mov	r4,r3
   1660c:	00461000 	call	46100 <fprintf>
   16610:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[7], 30);
   16614:	e0bdd317 	ldw	r2,-2228(fp)
   16618:	10800704 	addi	r2,r2,28
   1661c:	10800017 	ldw	r2,0(r2)
   16620:	1004d7ba 	srli	r2,r2,30
   16624:	1004c03a 	cmpne	r2,r2,zero
   16628:	10803fcc 	andi	r2,r2,255
   1662c:	10000d26 	beq	r2,zero,16664 <secp256k1_fe_mul_inner+0x5f0>
   16630:	d0a01617 	ldw	r2,-32680(gp)
   16634:	10c00317 	ldw	r3,12(r2)
   16638:	00800174 	movhi	r2,5
   1663c:	1092f204 	addi	r2,r2,19400
   16640:	d8800015 	stw	r2,0(sp)
   16644:	01c074c4 	movi	r7,467
   16648:	01800174 	movhi	r6,5
   1664c:	3191dd04 	addi	r6,r6,18292
   16650:	01400174 	movhi	r5,5
   16654:	2951e804 	addi	r5,r5,18336
   16658:	1809883a 	mov	r4,r3
   1665c:	00461000 	call	46100 <fprintf>
   16660:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[8], 30);
   16664:	e0bdd317 	ldw	r2,-2228(fp)
   16668:	10800804 	addi	r2,r2,32
   1666c:	10800017 	ldw	r2,0(r2)
   16670:	1004d7ba 	srli	r2,r2,30
   16674:	1004c03a 	cmpne	r2,r2,zero
   16678:	10803fcc 	andi	r2,r2,255
   1667c:	10000d26 	beq	r2,zero,166b4 <secp256k1_fe_mul_inner+0x640>
   16680:	d0a01617 	ldw	r2,-32680(gp)
   16684:	10c00317 	ldw	r3,12(r2)
   16688:	00800174 	movhi	r2,5
   1668c:	1092fe04 	addi	r2,r2,19448
   16690:	d8800015 	stw	r2,0(sp)
   16694:	01c07504 	movi	r7,468
   16698:	01800174 	movhi	r6,5
   1669c:	3191dd04 	addi	r6,r6,18292
   166a0:	01400174 	movhi	r5,5
   166a4:	2951e804 	addi	r5,r5,18336
   166a8:	1809883a 	mov	r4,r3
   166ac:	00461000 	call	46100 <fprintf>
   166b0:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(b[9], 26);
   166b4:	e0bdd317 	ldw	r2,-2228(fp)
   166b8:	10800904 	addi	r2,r2,36
   166bc:	10800017 	ldw	r2,0(r2)
   166c0:	1004d6ba 	srli	r2,r2,26
   166c4:	1004c03a 	cmpne	r2,r2,zero
   166c8:	10803fcc 	andi	r2,r2,255
   166cc:	10000d26 	beq	r2,zero,16704 <secp256k1_fe_mul_inner+0x690>
   166d0:	d0a01617 	ldw	r2,-32680(gp)
   166d4:	10c00317 	ldw	r3,12(r2)
   166d8:	00800174 	movhi	r2,5
   166dc:	10930a04 	addi	r2,r2,19496
   166e0:	d8800015 	stw	r2,0(sp)
   166e4:	01c07544 	movi	r7,469
   166e8:	01800174 	movhi	r6,5
   166ec:	3191dd04 	addi	r6,r6,18292
   166f0:	01400174 	movhi	r5,5
   166f4:	2951e804 	addi	r5,r5,18336
   166f8:	1809883a 	mov	r4,r3
   166fc:	00461000 	call	46100 <fprintf>
   16700:	0045fd40 	call	45fd4 <abort>
    /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.
     *  px is a shorthand for sum(a[i]*b[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)a[0] * b[9]
   16704:	e0bdd217 	ldw	r2,-2232(fp)
   16708:	10800017 	ldw	r2,0(r2)
   1670c:	1013883a 	mov	r9,r2
   16710:	0015883a 	mov	r10,zero
   16714:	e0bdd317 	ldw	r2,-2228(fp)
   16718:	10800904 	addi	r2,r2,36
   1671c:	10800017 	ldw	r2,0(r2)
   16720:	100f883a 	mov	r7,r2
   16724:	0011883a 	mov	r8,zero
   16728:	380d883a 	mov	r6,r7
   1672c:	400f883a 	mov	r7,r8
   16730:	4809883a 	mov	r4,r9
   16734:	500b883a 	mov	r5,r10
   16738:	00438e00 	call	438e0 <__muldi3>
   1673c:	1009883a 	mov	r4,r2
   16740:	180b883a 	mov	r5,r3
   16744:	2021883a 	mov	r16,r4
   16748:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[8]
   1674c:	e0bdd217 	ldw	r2,-2232(fp)
   16750:	10800104 	addi	r2,r2,4
   16754:	10800017 	ldw	r2,0(r2)
   16758:	e0bdd415 	stw	r2,-2224(fp)
   1675c:	e03dd515 	stw	zero,-2220(fp)
   16760:	e0bdd317 	ldw	r2,-2228(fp)
   16764:	10800804 	addi	r2,r2,32
   16768:	10800017 	ldw	r2,0(r2)
   1676c:	1025883a 	mov	r18,r2
   16770:	0027883a 	mov	r19,zero
   16774:	900d883a 	mov	r6,r18
   16778:	980f883a 	mov	r7,r19
   1677c:	e13dd417 	ldw	r4,-2224(fp)
   16780:	e17dd517 	ldw	r5,-2220(fp)
   16784:	00438e00 	call	438e0 <__muldi3>
   16788:	100f883a 	mov	r7,r2
   1678c:	1811883a 	mov	r8,r3
   16790:	380b883a 	mov	r5,r7
   16794:	400d883a 	mov	r6,r8
   16798:	8145883a 	add	r2,r16,r5
   1679c:	1409803a 	cmpltu	r4,r2,r16
   167a0:	8987883a 	add	r3,r17,r6
   167a4:	20c9883a 	add	r4,r4,r3
   167a8:	2007883a 	mov	r3,r4
   167ac:	1025883a 	mov	r18,r2
   167b0:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[7]
       + (uint64_t)a[3] * b[6]
   167b4:	e0bdd217 	ldw	r2,-2232(fp)
   167b8:	10800304 	addi	r2,r2,12
   167bc:	10800017 	ldw	r2,0(r2)
   167c0:	e0bdd615 	stw	r2,-2216(fp)
   167c4:	e03dd715 	stw	zero,-2212(fp)
   167c8:	e0bdd317 	ldw	r2,-2228(fp)
   167cc:	10800604 	addi	r2,r2,24
   167d0:	10800017 	ldw	r2,0(r2)
   167d4:	e0bdd815 	stw	r2,-2208(fp)
   167d8:	e03dd915 	stw	zero,-2204(fp)
   167dc:	e1bdd817 	ldw	r6,-2208(fp)
   167e0:	e1fdd917 	ldw	r7,-2204(fp)
   167e4:	e13dd617 	ldw	r4,-2216(fp)
   167e8:	e17dd717 	ldw	r5,-2212(fp)
   167ec:	00438e00 	call	438e0 <__muldi3>
   167f0:	1009883a 	mov	r4,r2
   167f4:	180b883a 	mov	r5,r3
   167f8:	2021883a 	mov	r16,r4
   167fc:	2823883a 	mov	r17,r5
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)a[0] * b[9]
       + (uint64_t)a[1] * b[8]
       + (uint64_t)a[2] * b[7]
   16800:	e0bdd217 	ldw	r2,-2232(fp)
   16804:	10800204 	addi	r2,r2,8
   16808:	10800017 	ldw	r2,0(r2)
   1680c:	e0bdda15 	stw	r2,-2200(fp)
   16810:	e03ddb15 	stw	zero,-2196(fp)
   16814:	e0bdd317 	ldw	r2,-2228(fp)
   16818:	10800704 	addi	r2,r2,28
   1681c:	10800017 	ldw	r2,0(r2)
   16820:	e0bddc15 	stw	r2,-2192(fp)
   16824:	e03ddd15 	stw	zero,-2188(fp)
   16828:	e1bddc17 	ldw	r6,-2192(fp)
   1682c:	e1fddd17 	ldw	r7,-2188(fp)
   16830:	e13dda17 	ldw	r4,-2200(fp)
   16834:	e17ddb17 	ldw	r5,-2196(fp)
   16838:	00438e00 	call	438e0 <__muldi3>
   1683c:	100f883a 	mov	r7,r2
   16840:	1811883a 	mov	r8,r3
   16844:	380b883a 	mov	r5,r7
   16848:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[6]
   1684c:	8145883a 	add	r2,r16,r5
   16850:	1409803a 	cmpltu	r4,r2,r16
   16854:	8987883a 	add	r3,r17,r6
   16858:	20c9883a 	add	r4,r4,r3
   1685c:	2007883a 	mov	r3,r4
   16860:	100b883a 	mov	r5,r2
   16864:	180d883a 	mov	r6,r3
   16868:	9145883a 	add	r2,r18,r5
   1686c:	1489803a 	cmpltu	r4,r2,r18
   16870:	9987883a 	add	r3,r19,r6
   16874:	20c9883a 	add	r4,r4,r3
   16878:	2007883a 	mov	r3,r4
   1687c:	1025883a 	mov	r18,r2
   16880:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[5]
       + (uint64_t)a[5] * b[4]
   16884:	e0bdd217 	ldw	r2,-2232(fp)
   16888:	10800504 	addi	r2,r2,20
   1688c:	10800017 	ldw	r2,0(r2)
   16890:	e0bdde15 	stw	r2,-2184(fp)
   16894:	e03ddf15 	stw	zero,-2180(fp)
   16898:	e0bdd317 	ldw	r2,-2228(fp)
   1689c:	10800404 	addi	r2,r2,16
   168a0:	10800017 	ldw	r2,0(r2)
   168a4:	e0bde015 	stw	r2,-2176(fp)
   168a8:	e03de115 	stw	zero,-2172(fp)
   168ac:	e1bde017 	ldw	r6,-2176(fp)
   168b0:	e1fde117 	ldw	r7,-2172(fp)
   168b4:	e13dde17 	ldw	r4,-2184(fp)
   168b8:	e17ddf17 	ldw	r5,-2180(fp)
   168bc:	00438e00 	call	438e0 <__muldi3>
   168c0:	1009883a 	mov	r4,r2
   168c4:	180b883a 	mov	r5,r3
   168c8:	2021883a 	mov	r16,r4
   168cc:	2823883a 	mov	r17,r5

    d  = (uint64_t)a[0] * b[9]
       + (uint64_t)a[1] * b[8]
       + (uint64_t)a[2] * b[7]
       + (uint64_t)a[3] * b[6]
       + (uint64_t)a[4] * b[5]
   168d0:	e0bdd217 	ldw	r2,-2232(fp)
   168d4:	10800404 	addi	r2,r2,16
   168d8:	10800017 	ldw	r2,0(r2)
   168dc:	e0bde215 	stw	r2,-2168(fp)
   168e0:	e03de315 	stw	zero,-2164(fp)
   168e4:	e0bdd317 	ldw	r2,-2228(fp)
   168e8:	10800504 	addi	r2,r2,20
   168ec:	10800017 	ldw	r2,0(r2)
   168f0:	e0bde415 	stw	r2,-2160(fp)
   168f4:	e03de515 	stw	zero,-2156(fp)
   168f8:	e1bde417 	ldw	r6,-2160(fp)
   168fc:	e1fde517 	ldw	r7,-2156(fp)
   16900:	e13de217 	ldw	r4,-2168(fp)
   16904:	e17de317 	ldw	r5,-2164(fp)
   16908:	00438e00 	call	438e0 <__muldi3>
   1690c:	100f883a 	mov	r7,r2
   16910:	1811883a 	mov	r8,r3
   16914:	380b883a 	mov	r5,r7
   16918:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[4]
   1691c:	8145883a 	add	r2,r16,r5
   16920:	1409803a 	cmpltu	r4,r2,r16
   16924:	8987883a 	add	r3,r17,r6
   16928:	20c9883a 	add	r4,r4,r3
   1692c:	2007883a 	mov	r3,r4
   16930:	100b883a 	mov	r5,r2
   16934:	180d883a 	mov	r6,r3
   16938:	9145883a 	add	r2,r18,r5
   1693c:	1489803a 	cmpltu	r4,r2,r18
   16940:	9987883a 	add	r3,r19,r6
   16944:	20c9883a 	add	r4,r4,r3
   16948:	2007883a 	mov	r3,r4
   1694c:	1025883a 	mov	r18,r2
   16950:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[3]
       + (uint64_t)a[7] * b[2]
   16954:	e0bdd217 	ldw	r2,-2232(fp)
   16958:	10800704 	addi	r2,r2,28
   1695c:	10800017 	ldw	r2,0(r2)
   16960:	e0bde615 	stw	r2,-2152(fp)
   16964:	e03de715 	stw	zero,-2148(fp)
   16968:	e0bdd317 	ldw	r2,-2228(fp)
   1696c:	10800204 	addi	r2,r2,8
   16970:	10800017 	ldw	r2,0(r2)
   16974:	e0bde815 	stw	r2,-2144(fp)
   16978:	e03de915 	stw	zero,-2140(fp)
   1697c:	e1bde817 	ldw	r6,-2144(fp)
   16980:	e1fde917 	ldw	r7,-2140(fp)
   16984:	e13de617 	ldw	r4,-2152(fp)
   16988:	e17de717 	ldw	r5,-2148(fp)
   1698c:	00438e00 	call	438e0 <__muldi3>
   16990:	1009883a 	mov	r4,r2
   16994:	180b883a 	mov	r5,r3
   16998:	2021883a 	mov	r16,r4
   1699c:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[8]
       + (uint64_t)a[2] * b[7]
       + (uint64_t)a[3] * b[6]
       + (uint64_t)a[4] * b[5]
       + (uint64_t)a[5] * b[4]
       + (uint64_t)a[6] * b[3]
   169a0:	e0bdd217 	ldw	r2,-2232(fp)
   169a4:	10800604 	addi	r2,r2,24
   169a8:	10800017 	ldw	r2,0(r2)
   169ac:	e0bdea15 	stw	r2,-2136(fp)
   169b0:	e03deb15 	stw	zero,-2132(fp)
   169b4:	e0bdd317 	ldw	r2,-2228(fp)
   169b8:	10800304 	addi	r2,r2,12
   169bc:	10800017 	ldw	r2,0(r2)
   169c0:	e0bdec15 	stw	r2,-2128(fp)
   169c4:	e03ded15 	stw	zero,-2124(fp)
   169c8:	e1bdec17 	ldw	r6,-2128(fp)
   169cc:	e1fded17 	ldw	r7,-2124(fp)
   169d0:	e13dea17 	ldw	r4,-2136(fp)
   169d4:	e17deb17 	ldw	r5,-2132(fp)
   169d8:	00438e00 	call	438e0 <__muldi3>
   169dc:	100f883a 	mov	r7,r2
   169e0:	1811883a 	mov	r8,r3
   169e4:	380b883a 	mov	r5,r7
   169e8:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[2]
   169ec:	8145883a 	add	r2,r16,r5
   169f0:	1409803a 	cmpltu	r4,r2,r16
   169f4:	8987883a 	add	r3,r17,r6
   169f8:	20c9883a 	add	r4,r4,r3
   169fc:	2007883a 	mov	r3,r4
   16a00:	100b883a 	mov	r5,r2
   16a04:	180d883a 	mov	r6,r3
   16a08:	9145883a 	add	r2,r18,r5
   16a0c:	1489803a 	cmpltu	r4,r2,r18
   16a10:	9987883a 	add	r3,r19,r6
   16a14:	20c9883a 	add	r4,r4,r3
   16a18:	2007883a 	mov	r3,r4
   16a1c:	1025883a 	mov	r18,r2
   16a20:	1827883a 	mov	r19,r3
       + (uint64_t)a[8] * b[1]
       + (uint64_t)a[9] * b[0];
   16a24:	e0bdd217 	ldw	r2,-2232(fp)
   16a28:	10800904 	addi	r2,r2,36
   16a2c:	10800017 	ldw	r2,0(r2)
   16a30:	e0bdee15 	stw	r2,-2120(fp)
   16a34:	e03def15 	stw	zero,-2116(fp)
   16a38:	e0bdd317 	ldw	r2,-2228(fp)
   16a3c:	10800017 	ldw	r2,0(r2)
   16a40:	e0bdf015 	stw	r2,-2112(fp)
   16a44:	e03df115 	stw	zero,-2108(fp)
   16a48:	e1bdf017 	ldw	r6,-2112(fp)
   16a4c:	e1fdf117 	ldw	r7,-2108(fp)
   16a50:	e13dee17 	ldw	r4,-2120(fp)
   16a54:	e17def17 	ldw	r5,-2116(fp)
   16a58:	00438e00 	call	438e0 <__muldi3>
   16a5c:	1009883a 	mov	r4,r2
   16a60:	180b883a 	mov	r5,r3
   16a64:	2021883a 	mov	r16,r4
   16a68:	2823883a 	mov	r17,r5
       + (uint64_t)a[3] * b[6]
       + (uint64_t)a[4] * b[5]
       + (uint64_t)a[5] * b[4]
       + (uint64_t)a[6] * b[3]
       + (uint64_t)a[7] * b[2]
       + (uint64_t)a[8] * b[1]
   16a6c:	e0bdd217 	ldw	r2,-2232(fp)
   16a70:	10800804 	addi	r2,r2,32
   16a74:	10800017 	ldw	r2,0(r2)
   16a78:	e0bdf215 	stw	r2,-2104(fp)
   16a7c:	e03df315 	stw	zero,-2100(fp)
   16a80:	e0bdd317 	ldw	r2,-2228(fp)
   16a84:	10800104 	addi	r2,r2,4
   16a88:	10800017 	ldw	r2,0(r2)
   16a8c:	e0bdf415 	stw	r2,-2096(fp)
   16a90:	e03df515 	stw	zero,-2092(fp)
   16a94:	e1bdf417 	ldw	r6,-2096(fp)
   16a98:	e1fdf517 	ldw	r7,-2092(fp)
   16a9c:	e13df217 	ldw	r4,-2104(fp)
   16aa0:	e17df317 	ldw	r5,-2100(fp)
   16aa4:	00438e00 	call	438e0 <__muldi3>
   16aa8:	100f883a 	mov	r7,r2
   16aac:	1811883a 	mov	r8,r3
   16ab0:	380b883a 	mov	r5,r7
   16ab4:	400d883a 	mov	r6,r8
       + (uint64_t)a[9] * b[0];
   16ab8:	8145883a 	add	r2,r16,r5
   16abc:	1409803a 	cmpltu	r4,r2,r16
   16ac0:	8987883a 	add	r3,r17,r6
   16ac4:	20c9883a 	add	r4,r4,r3
   16ac8:	2007883a 	mov	r3,r4
   16acc:	100b883a 	mov	r5,r2
   16ad0:	180d883a 	mov	r6,r3
    /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.
     *  px is a shorthand for sum(a[i]*b[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)a[0] * b[9]
   16ad4:	9145883a 	add	r2,r18,r5
   16ad8:	1489803a 	cmpltu	r4,r2,r18
   16adc:	9987883a 	add	r3,r19,r6
   16ae0:	20c9883a 	add	r4,r4,r3
   16ae4:	2007883a 	mov	r3,r4
   16ae8:	e0bdb215 	stw	r2,-2360(fp)
   16aec:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[7] * b[2]
       + (uint64_t)a[8] * b[1]
       + (uint64_t)a[9] * b[0];
    /* VERIFY_BITS(d, 64); */
    /* [d 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */
    t9 = d & M; d >>= 26;
   16af0:	e0fdb217 	ldw	r3,-2360(fp)
   16af4:	e0bdaf17 	ldw	r2,-2372(fp)
   16af8:	1884703a 	and	r2,r3,r2
   16afc:	e0bdb415 	stw	r2,-2352(fp)
   16b00:	e0bdb317 	ldw	r2,-2356(fp)
   16b04:	100691ba 	slli	r3,r2,6
   16b08:	e0bdb217 	ldw	r2,-2360(fp)
   16b0c:	1004d6ba 	srli	r2,r2,26
   16b10:	10c4b03a 	or	r2,r2,r3
   16b14:	e0bdb215 	stw	r2,-2360(fp)
   16b18:	e0bdb317 	ldw	r2,-2356(fp)
   16b1c:	1004d6ba 	srli	r2,r2,26
   16b20:	e0bdb315 	stw	r2,-2356(fp)
    VERIFY_BITS(t9, 26);
   16b24:	e0bdb417 	ldw	r2,-2352(fp)
   16b28:	1004d6ba 	srli	r2,r2,26
   16b2c:	1004c03a 	cmpne	r2,r2,zero
   16b30:	10803fcc 	andi	r2,r2,255
   16b34:	10000d26 	beq	r2,zero,16b6c <secp256k1_fe_mul_inner+0xaf8>
   16b38:	d0a01617 	ldw	r2,-32680(gp)
   16b3c:	10c00317 	ldw	r3,12(r2)
   16b40:	00800174 	movhi	r2,5
   16b44:	10931604 	addi	r2,r2,19544
   16b48:	d8800015 	stw	r2,0(sp)
   16b4c:	01c07a44 	movi	r7,489
   16b50:	01800174 	movhi	r6,5
   16b54:	3191dd04 	addi	r6,r6,18292
   16b58:	01400174 	movhi	r5,5
   16b5c:	2951e804 	addi	r5,r5,18336
   16b60:	1809883a 	mov	r4,r3
   16b64:	00461000 	call	46100 <fprintf>
   16b68:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 38);
   16b6c:	e0bdb317 	ldw	r2,-2356(fp)
   16b70:	102cd1ba 	srli	r22,r2,6
   16b74:	002f883a 	mov	r23,zero
   16b78:	b5c4b03a 	or	r2,r22,r23
   16b7c:	1004c03a 	cmpne	r2,r2,zero
   16b80:	10803fcc 	andi	r2,r2,255
   16b84:	10000d26 	beq	r2,zero,16bbc <secp256k1_fe_mul_inner+0xb48>
   16b88:	d0a01617 	ldw	r2,-32680(gp)
   16b8c:	10c00317 	ldw	r3,12(r2)
   16b90:	00800174 	movhi	r2,5
   16b94:	10932104 	addi	r2,r2,19588
   16b98:	d8800015 	stw	r2,0(sp)
   16b9c:	01c07a84 	movi	r7,490
   16ba0:	01800174 	movhi	r6,5
   16ba4:	3191dd04 	addi	r6,r6,18292
   16ba8:	01400174 	movhi	r5,5
   16bac:	2951e804 	addi	r5,r5,18336
   16bb0:	1809883a 	mov	r4,r3
   16bb4:	00461000 	call	46100 <fprintf>
   16bb8:	0045fd40 	call	45fd4 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */

    c  = (uint64_t)a[0] * b[0];
   16bbc:	e0bdd217 	ldw	r2,-2232(fp)
   16bc0:	10800017 	ldw	r2,0(r2)
   16bc4:	e0bdf615 	stw	r2,-2088(fp)
   16bc8:	e03df715 	stw	zero,-2084(fp)
   16bcc:	e0bdd317 	ldw	r2,-2228(fp)
   16bd0:	10800017 	ldw	r2,0(r2)
   16bd4:	e0bdf815 	stw	r2,-2080(fp)
   16bd8:	e03df915 	stw	zero,-2076(fp)
   16bdc:	e1bdf817 	ldw	r6,-2080(fp)
   16be0:	e1fdf917 	ldw	r7,-2076(fp)
   16be4:	e13df617 	ldw	r4,-2088(fp)
   16be8:	e17df717 	ldw	r5,-2084(fp)
   16bec:	00438e00 	call	438e0 <__muldi3>
   16bf0:	1009883a 	mov	r4,r2
   16bf4:	180b883a 	mov	r5,r3
   16bf8:	e13db515 	stw	r4,-2348(fp)
   16bfc:	e17db615 	stw	r5,-2344(fp)
    VERIFY_BITS(c, 60);
   16c00:	e0bdb617 	ldw	r2,-2344(fp)
   16c04:	1004d73a 	srli	r2,r2,28
   16c08:	e0bdfa15 	stw	r2,-2072(fp)
   16c0c:	e03dfb15 	stw	zero,-2068(fp)
   16c10:	e0fdfa17 	ldw	r3,-2072(fp)
   16c14:	e13dfb17 	ldw	r4,-2068(fp)
   16c18:	1904b03a 	or	r2,r3,r4
   16c1c:	1004c03a 	cmpne	r2,r2,zero
   16c20:	10803fcc 	andi	r2,r2,255
   16c24:	10000d26 	beq	r2,zero,16c5c <secp256k1_fe_mul_inner+0xbe8>
   16c28:	d0a01617 	ldw	r2,-32680(gp)
   16c2c:	10c00317 	ldw	r3,12(r2)
   16c30:	00800174 	movhi	r2,5
   16c34:	10932c04 	addi	r2,r2,19632
   16c38:	d8800015 	stw	r2,0(sp)
   16c3c:	01c07b84 	movi	r7,494
   16c40:	01800174 	movhi	r6,5
   16c44:	3191dd04 	addi	r6,r6,18292
   16c48:	01400174 	movhi	r5,5
   16c4c:	2951e804 	addi	r5,r5,18336
   16c50:	1809883a 	mov	r4,r3
   16c54:	00461000 	call	46100 <fprintf>
   16c58:	0045fd40 	call	45fd4 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)a[1] * b[9]
   16c5c:	e0bdd217 	ldw	r2,-2232(fp)
   16c60:	10800104 	addi	r2,r2,4
   16c64:	10800017 	ldw	r2,0(r2)
   16c68:	e0bdfc15 	stw	r2,-2064(fp)
   16c6c:	e03dfd15 	stw	zero,-2060(fp)
   16c70:	e0bdd317 	ldw	r2,-2228(fp)
   16c74:	10800904 	addi	r2,r2,36
   16c78:	10800017 	ldw	r2,0(r2)
   16c7c:	e0bdfe15 	stw	r2,-2056(fp)
   16c80:	e03dff15 	stw	zero,-2052(fp)
   16c84:	e1bdfe17 	ldw	r6,-2056(fp)
   16c88:	e1fdff17 	ldw	r7,-2052(fp)
   16c8c:	e13dfc17 	ldw	r4,-2064(fp)
   16c90:	e17dfd17 	ldw	r5,-2060(fp)
   16c94:	00438e00 	call	438e0 <__muldi3>
   16c98:	1009883a 	mov	r4,r2
   16c9c:	180b883a 	mov	r5,r3
   16ca0:	2021883a 	mov	r16,r4
   16ca4:	2823883a 	mov	r17,r5
       + (uint64_t)a[2] * b[8]
   16ca8:	e0bdd217 	ldw	r2,-2232(fp)
   16cac:	10800204 	addi	r2,r2,8
   16cb0:	10800017 	ldw	r2,0(r2)
   16cb4:	e0be0015 	stw	r2,-2048(fp)
   16cb8:	e03e0115 	stw	zero,-2044(fp)
   16cbc:	e0bdd317 	ldw	r2,-2228(fp)
   16cc0:	10800804 	addi	r2,r2,32
   16cc4:	10800017 	ldw	r2,0(r2)
   16cc8:	e0be0215 	stw	r2,-2040(fp)
   16ccc:	e03e0315 	stw	zero,-2036(fp)
   16cd0:	e1be0217 	ldw	r6,-2040(fp)
   16cd4:	e1fe0317 	ldw	r7,-2036(fp)
   16cd8:	e13e0017 	ldw	r4,-2048(fp)
   16cdc:	e17e0117 	ldw	r5,-2044(fp)
   16ce0:	00438e00 	call	438e0 <__muldi3>
   16ce4:	100f883a 	mov	r7,r2
   16ce8:	1811883a 	mov	r8,r3
   16cec:	380b883a 	mov	r5,r7
   16cf0:	400d883a 	mov	r6,r8
   16cf4:	8145883a 	add	r2,r16,r5
   16cf8:	1409803a 	cmpltu	r4,r2,r16
   16cfc:	8987883a 	add	r3,r17,r6
   16d00:	20c9883a 	add	r4,r4,r3
   16d04:	2007883a 	mov	r3,r4
   16d08:	1025883a 	mov	r18,r2
   16d0c:	1827883a 	mov	r19,r3
       + (uint64_t)a[3] * b[7]
       + (uint64_t)a[4] * b[6]
   16d10:	e0bdd217 	ldw	r2,-2232(fp)
   16d14:	10800404 	addi	r2,r2,16
   16d18:	10800017 	ldw	r2,0(r2)
   16d1c:	e0be0415 	stw	r2,-2032(fp)
   16d20:	e03e0515 	stw	zero,-2028(fp)
   16d24:	e0bdd317 	ldw	r2,-2228(fp)
   16d28:	10800604 	addi	r2,r2,24
   16d2c:	10800017 	ldw	r2,0(r2)
   16d30:	e0be0615 	stw	r2,-2024(fp)
   16d34:	e03e0715 	stw	zero,-2020(fp)
   16d38:	e1be0617 	ldw	r6,-2024(fp)
   16d3c:	e1fe0717 	ldw	r7,-2020(fp)
   16d40:	e13e0417 	ldw	r4,-2032(fp)
   16d44:	e17e0517 	ldw	r5,-2028(fp)
   16d48:	00438e00 	call	438e0 <__muldi3>
   16d4c:	1009883a 	mov	r4,r2
   16d50:	180b883a 	mov	r5,r3
   16d54:	2021883a 	mov	r16,r4
   16d58:	2823883a 	mov	r17,r5
    c  = (uint64_t)a[0] * b[0];
    VERIFY_BITS(c, 60);
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)a[1] * b[9]
       + (uint64_t)a[2] * b[8]
       + (uint64_t)a[3] * b[7]
   16d5c:	e0bdd217 	ldw	r2,-2232(fp)
   16d60:	10800304 	addi	r2,r2,12
   16d64:	10800017 	ldw	r2,0(r2)
   16d68:	e0be0815 	stw	r2,-2016(fp)
   16d6c:	e03e0915 	stw	zero,-2012(fp)
   16d70:	e0bdd317 	ldw	r2,-2228(fp)
   16d74:	10800704 	addi	r2,r2,28
   16d78:	10800017 	ldw	r2,0(r2)
   16d7c:	e0be0a15 	stw	r2,-2008(fp)
   16d80:	e03e0b15 	stw	zero,-2004(fp)
   16d84:	e1be0a17 	ldw	r6,-2008(fp)
   16d88:	e1fe0b17 	ldw	r7,-2004(fp)
   16d8c:	e13e0817 	ldw	r4,-2016(fp)
   16d90:	e17e0917 	ldw	r5,-2012(fp)
   16d94:	00438e00 	call	438e0 <__muldi3>
   16d98:	100f883a 	mov	r7,r2
   16d9c:	1811883a 	mov	r8,r3
   16da0:	380b883a 	mov	r5,r7
   16da4:	400d883a 	mov	r6,r8
       + (uint64_t)a[4] * b[6]
   16da8:	8145883a 	add	r2,r16,r5
   16dac:	1409803a 	cmpltu	r4,r2,r16
   16db0:	8987883a 	add	r3,r17,r6
   16db4:	20c9883a 	add	r4,r4,r3
   16db8:	2007883a 	mov	r3,r4
   16dbc:	100b883a 	mov	r5,r2
   16dc0:	180d883a 	mov	r6,r3
   16dc4:	9145883a 	add	r2,r18,r5
   16dc8:	1489803a 	cmpltu	r4,r2,r18
   16dcc:	9987883a 	add	r3,r19,r6
   16dd0:	20c9883a 	add	r4,r4,r3
   16dd4:	2007883a 	mov	r3,r4
   16dd8:	1025883a 	mov	r18,r2
   16ddc:	1827883a 	mov	r19,r3
       + (uint64_t)a[5] * b[5]
       + (uint64_t)a[6] * b[4]
   16de0:	e0bdd217 	ldw	r2,-2232(fp)
   16de4:	10800604 	addi	r2,r2,24
   16de8:	10800017 	ldw	r2,0(r2)
   16dec:	e0be0c15 	stw	r2,-2000(fp)
   16df0:	e03e0d15 	stw	zero,-1996(fp)
   16df4:	e0bdd317 	ldw	r2,-2228(fp)
   16df8:	10800404 	addi	r2,r2,16
   16dfc:	10800017 	ldw	r2,0(r2)
   16e00:	e0be0e15 	stw	r2,-1992(fp)
   16e04:	e03e0f15 	stw	zero,-1988(fp)
   16e08:	e1be0e17 	ldw	r6,-1992(fp)
   16e0c:	e1fe0f17 	ldw	r7,-1988(fp)
   16e10:	e13e0c17 	ldw	r4,-2000(fp)
   16e14:	e17e0d17 	ldw	r5,-1996(fp)
   16e18:	00438e00 	call	438e0 <__muldi3>
   16e1c:	1009883a 	mov	r4,r2
   16e20:	180b883a 	mov	r5,r3
   16e24:	2021883a 	mov	r16,r4
   16e28:	2823883a 	mov	r17,r5
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)a[1] * b[9]
       + (uint64_t)a[2] * b[8]
       + (uint64_t)a[3] * b[7]
       + (uint64_t)a[4] * b[6]
       + (uint64_t)a[5] * b[5]
   16e2c:	e0bdd217 	ldw	r2,-2232(fp)
   16e30:	10800504 	addi	r2,r2,20
   16e34:	10800017 	ldw	r2,0(r2)
   16e38:	e0be1015 	stw	r2,-1984(fp)
   16e3c:	e03e1115 	stw	zero,-1980(fp)
   16e40:	e0bdd317 	ldw	r2,-2228(fp)
   16e44:	10800504 	addi	r2,r2,20
   16e48:	10800017 	ldw	r2,0(r2)
   16e4c:	e0be1215 	stw	r2,-1976(fp)
   16e50:	e03e1315 	stw	zero,-1972(fp)
   16e54:	e1be1217 	ldw	r6,-1976(fp)
   16e58:	e1fe1317 	ldw	r7,-1972(fp)
   16e5c:	e13e1017 	ldw	r4,-1984(fp)
   16e60:	e17e1117 	ldw	r5,-1980(fp)
   16e64:	00438e00 	call	438e0 <__muldi3>
   16e68:	100f883a 	mov	r7,r2
   16e6c:	1811883a 	mov	r8,r3
   16e70:	380b883a 	mov	r5,r7
   16e74:	400d883a 	mov	r6,r8
       + (uint64_t)a[6] * b[4]
   16e78:	8145883a 	add	r2,r16,r5
   16e7c:	1409803a 	cmpltu	r4,r2,r16
   16e80:	8987883a 	add	r3,r17,r6
   16e84:	20c9883a 	add	r4,r4,r3
   16e88:	2007883a 	mov	r3,r4
   16e8c:	100b883a 	mov	r5,r2
   16e90:	180d883a 	mov	r6,r3
   16e94:	9145883a 	add	r2,r18,r5
   16e98:	1489803a 	cmpltu	r4,r2,r18
   16e9c:	9987883a 	add	r3,r19,r6
   16ea0:	20c9883a 	add	r4,r4,r3
   16ea4:	2007883a 	mov	r3,r4
   16ea8:	1025883a 	mov	r18,r2
   16eac:	1827883a 	mov	r19,r3
       + (uint64_t)a[7] * b[3]
       + (uint64_t)a[8] * b[2]
   16eb0:	e0bdd217 	ldw	r2,-2232(fp)
   16eb4:	10800804 	addi	r2,r2,32
   16eb8:	10800017 	ldw	r2,0(r2)
   16ebc:	e0be1415 	stw	r2,-1968(fp)
   16ec0:	e03e1515 	stw	zero,-1964(fp)
   16ec4:	e0bdd317 	ldw	r2,-2228(fp)
   16ec8:	10800204 	addi	r2,r2,8
   16ecc:	10800017 	ldw	r2,0(r2)
   16ed0:	e0be1615 	stw	r2,-1960(fp)
   16ed4:	e03e1715 	stw	zero,-1956(fp)
   16ed8:	e1be1617 	ldw	r6,-1960(fp)
   16edc:	e1fe1717 	ldw	r7,-1956(fp)
   16ee0:	e13e1417 	ldw	r4,-1968(fp)
   16ee4:	e17e1517 	ldw	r5,-1964(fp)
   16ee8:	00438e00 	call	438e0 <__muldi3>
   16eec:	1009883a 	mov	r4,r2
   16ef0:	180b883a 	mov	r5,r3
   16ef4:	2021883a 	mov	r16,r4
   16ef8:	2823883a 	mov	r17,r5
       + (uint64_t)a[2] * b[8]
       + (uint64_t)a[3] * b[7]
       + (uint64_t)a[4] * b[6]
       + (uint64_t)a[5] * b[5]
       + (uint64_t)a[6] * b[4]
       + (uint64_t)a[7] * b[3]
   16efc:	e0bdd217 	ldw	r2,-2232(fp)
   16f00:	10800704 	addi	r2,r2,28
   16f04:	10800017 	ldw	r2,0(r2)
   16f08:	e0be1815 	stw	r2,-1952(fp)
   16f0c:	e03e1915 	stw	zero,-1948(fp)
   16f10:	e0bdd317 	ldw	r2,-2228(fp)
   16f14:	10800304 	addi	r2,r2,12
   16f18:	10800017 	ldw	r2,0(r2)
   16f1c:	e0be1a15 	stw	r2,-1944(fp)
   16f20:	e03e1b15 	stw	zero,-1940(fp)
   16f24:	e1be1a17 	ldw	r6,-1944(fp)
   16f28:	e1fe1b17 	ldw	r7,-1940(fp)
   16f2c:	e13e1817 	ldw	r4,-1952(fp)
   16f30:	e17e1917 	ldw	r5,-1948(fp)
   16f34:	00438e00 	call	438e0 <__muldi3>
   16f38:	100f883a 	mov	r7,r2
   16f3c:	1811883a 	mov	r8,r3
   16f40:	380b883a 	mov	r5,r7
   16f44:	400d883a 	mov	r6,r8
       + (uint64_t)a[8] * b[2]
   16f48:	8145883a 	add	r2,r16,r5
   16f4c:	1409803a 	cmpltu	r4,r2,r16
   16f50:	8987883a 	add	r3,r17,r6
   16f54:	20c9883a 	add	r4,r4,r3
   16f58:	2007883a 	mov	r3,r4
   16f5c:	100b883a 	mov	r5,r2
   16f60:	180d883a 	mov	r6,r3
   16f64:	9145883a 	add	r2,r18,r5
   16f68:	1489803a 	cmpltu	r4,r2,r18
   16f6c:	9987883a 	add	r3,r19,r6
   16f70:	20c9883a 	add	r4,r4,r3
   16f74:	2007883a 	mov	r3,r4
   16f78:	1021883a 	mov	r16,r2
   16f7c:	1823883a 	mov	r17,r3
       + (uint64_t)a[9] * b[1];
   16f80:	e0bdd217 	ldw	r2,-2232(fp)
   16f84:	10800904 	addi	r2,r2,36
   16f88:	10800017 	ldw	r2,0(r2)
   16f8c:	e0be1c15 	stw	r2,-1936(fp)
   16f90:	e03e1d15 	stw	zero,-1932(fp)
   16f94:	e0bdd317 	ldw	r2,-2228(fp)
   16f98:	10800104 	addi	r2,r2,4
   16f9c:	10800017 	ldw	r2,0(r2)
   16fa0:	e0be1e15 	stw	r2,-1928(fp)
   16fa4:	e03e1f15 	stw	zero,-1924(fp)
   16fa8:	e1be1e17 	ldw	r6,-1928(fp)
   16fac:	e1fe1f17 	ldw	r7,-1924(fp)
   16fb0:	e13e1c17 	ldw	r4,-1936(fp)
   16fb4:	e17e1d17 	ldw	r5,-1932(fp)
   16fb8:	00438e00 	call	438e0 <__muldi3>
   16fbc:	100f883a 	mov	r7,r2
   16fc0:	1811883a 	mov	r8,r3
   16fc4:	380b883a 	mov	r5,r7
   16fc8:	400d883a 	mov	r6,r8
   16fcc:	8145883a 	add	r2,r16,r5
   16fd0:	1409803a 	cmpltu	r4,r2,r16
   16fd4:	8987883a 	add	r3,r17,r6
   16fd8:	20c9883a 	add	r4,r4,r3
   16fdc:	2007883a 	mov	r3,r4
   16fe0:	100f883a 	mov	r7,r2
   16fe4:	1811883a 	mov	r8,r3
    /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */

    c  = (uint64_t)a[0] * b[0];
    VERIFY_BITS(c, 60);
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)a[1] * b[9]
   16fe8:	e13db217 	ldw	r4,-2360(fp)
   16fec:	e17db317 	ldw	r5,-2356(fp)
   16ff0:	21c5883a 	add	r2,r4,r7
   16ff4:	110d803a 	cmpltu	r6,r2,r4
   16ff8:	2a07883a 	add	r3,r5,r8
   16ffc:	30c9883a 	add	r4,r6,r3
   17000:	2007883a 	mov	r3,r4
   17004:	e0bdb215 	stw	r2,-2360(fp)
   17008:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[5] * b[5]
       + (uint64_t)a[6] * b[4]
       + (uint64_t)a[7] * b[3]
       + (uint64_t)a[8] * b[2]
       + (uint64_t)a[9] * b[1];
    VERIFY_BITS(d, 63);
   1700c:	e0bdb217 	ldw	r2,-2360(fp)
   17010:	e0fdb317 	ldw	r3,-2356(fp)
   17014:	1804d7fa 	srli	r2,r3,31
   17018:	10803fcc 	andi	r2,r2,255
   1701c:	10000d26 	beq	r2,zero,17054 <secp256k1_fe_mul_inner+0xfe0>
   17020:	d0a01617 	ldw	r2,-32680(gp)
   17024:	10c00317 	ldw	r3,12(r2)
   17028:	00800174 	movhi	r2,5
   1702c:	10933704 	addi	r2,r2,19676
   17030:	d8800015 	stw	r2,0(sp)
   17034:	01c07e44 	movi	r7,505
   17038:	01800174 	movhi	r6,5
   1703c:	3191dd04 	addi	r6,r6,18292
   17040:	01400174 	movhi	r5,5
   17044:	2951e804 	addi	r5,r5,18336
   17048:	1809883a 	mov	r4,r3
   1704c:	00461000 	call	46100 <fprintf>
   17050:	0045fd40 	call	45fd4 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    u0 = d & M; d >>= 26; c += u0 * R0;
   17054:	e0bdaf17 	ldw	r2,-2372(fp)
   17058:	e0be2015 	stw	r2,-1920(fp)
   1705c:	e03e2115 	stw	zero,-1916(fp)
   17060:	e0bdb217 	ldw	r2,-2360(fp)
   17064:	e1be2017 	ldw	r6,-1920(fp)
   17068:	1184703a 	and	r2,r2,r6
   1706c:	e0bdb715 	stw	r2,-2340(fp)
   17070:	e0bdb317 	ldw	r2,-2356(fp)
   17074:	e1fe2117 	ldw	r7,-1916(fp)
   17078:	11c4703a 	and	r2,r2,r7
   1707c:	e0bdb815 	stw	r2,-2336(fp)
   17080:	e0bdb317 	ldw	r2,-2356(fp)
   17084:	100691ba 	slli	r3,r2,6
   17088:	e0bdb217 	ldw	r2,-2360(fp)
   1708c:	1004d6ba 	srli	r2,r2,26
   17090:	10c4b03a 	or	r2,r2,r3
   17094:	e0bdb215 	stw	r2,-2360(fp)
   17098:	e0bdb317 	ldw	r2,-2356(fp)
   1709c:	1004d6ba 	srli	r2,r2,26
   170a0:	e0bdb315 	stw	r2,-2356(fp)
   170a4:	e0bdb017 	ldw	r2,-2368(fp)
   170a8:	e0be2215 	stw	r2,-1912(fp)
   170ac:	e03e2315 	stw	zero,-1908(fp)
   170b0:	e1bdb717 	ldw	r6,-2340(fp)
   170b4:	e1fdb817 	ldw	r7,-2336(fp)
   170b8:	e13e2217 	ldw	r4,-1912(fp)
   170bc:	e17e2317 	ldw	r5,-1908(fp)
   170c0:	00438e00 	call	438e0 <__muldi3>
   170c4:	1009883a 	mov	r4,r2
   170c8:	180b883a 	mov	r5,r3
   170cc:	200f883a 	mov	r7,r4
   170d0:	2811883a 	mov	r8,r5
   170d4:	e13db517 	ldw	r4,-2348(fp)
   170d8:	e17db617 	ldw	r5,-2344(fp)
   170dc:	21c5883a 	add	r2,r4,r7
   170e0:	110d803a 	cmpltu	r6,r2,r4
   170e4:	2a07883a 	add	r3,r5,r8
   170e8:	30c9883a 	add	r4,r6,r3
   170ec:	2007883a 	mov	r3,r4
   170f0:	e0bdb515 	stw	r2,-2348(fp)
   170f4:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u0, 26);
   170f8:	e0bdb817 	ldw	r2,-2336(fp)
   170fc:	100691ba 	slli	r3,r2,6
   17100:	e0bdb717 	ldw	r2,-2340(fp)
   17104:	1028d6ba 	srli	r20,r2,26
   17108:	1d28b03a 	or	r20,r3,r20
   1710c:	e0bdb817 	ldw	r2,-2336(fp)
   17110:	102ad6ba 	srli	r21,r2,26
   17114:	a544b03a 	or	r2,r20,r21
   17118:	1004c03a 	cmpne	r2,r2,zero
   1711c:	10803fcc 	andi	r2,r2,255
   17120:	10000d26 	beq	r2,zero,17158 <secp256k1_fe_mul_inner+0x10e4>
   17124:	d0a01617 	ldw	r2,-32680(gp)
   17128:	10c00317 	ldw	r3,12(r2)
   1712c:	00800174 	movhi	r2,5
   17130:	10934204 	addi	r2,r2,19720
   17134:	d8800015 	stw	r2,0(sp)
   17138:	01c07f04 	movi	r7,508
   1713c:	01800174 	movhi	r6,5
   17140:	3191dd04 	addi	r6,r6,18292
   17144:	01400174 	movhi	r5,5
   17148:	2951e804 	addi	r5,r5,18336
   1714c:	1809883a 	mov	r4,r3
   17150:	00461000 	call	46100 <fprintf>
   17154:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 37);
   17158:	e0bdb317 	ldw	r2,-2356(fp)
   1715c:	1004d17a 	srli	r2,r2,5
   17160:	e0be2415 	stw	r2,-1904(fp)
   17164:	e03e2515 	stw	zero,-1900(fp)
   17168:	e0fe2417 	ldw	r3,-1904(fp)
   1716c:	e13e2517 	ldw	r4,-1900(fp)
   17170:	1904b03a 	or	r2,r3,r4
   17174:	1004c03a 	cmpne	r2,r2,zero
   17178:	10803fcc 	andi	r2,r2,255
   1717c:	10000d26 	beq	r2,zero,171b4 <secp256k1_fe_mul_inner+0x1140>
   17180:	d0a01617 	ldw	r2,-32680(gp)
   17184:	10c00317 	ldw	r3,12(r2)
   17188:	00800174 	movhi	r2,5
   1718c:	10934d04 	addi	r2,r2,19764
   17190:	d8800015 	stw	r2,0(sp)
   17194:	01c07f44 	movi	r7,509
   17198:	01800174 	movhi	r6,5
   1719c:	3191dd04 	addi	r6,r6,18292
   171a0:	01400174 	movhi	r5,5
   171a4:	2951e804 	addi	r5,r5,18336
   171a8:	1809883a 	mov	r4,r3
   171ac:	00461000 	call	46100 <fprintf>
   171b0:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 61);
   171b4:	e0bdb617 	ldw	r2,-2344(fp)
   171b8:	1004d77a 	srli	r2,r2,29
   171bc:	e0be2615 	stw	r2,-1896(fp)
   171c0:	e03e2715 	stw	zero,-1892(fp)
   171c4:	e1be2617 	ldw	r6,-1896(fp)
   171c8:	e1fe2717 	ldw	r7,-1892(fp)
   171cc:	31c4b03a 	or	r2,r6,r7
   171d0:	1004c03a 	cmpne	r2,r2,zero
   171d4:	10803fcc 	andi	r2,r2,255
   171d8:	10000d26 	beq	r2,zero,17210 <secp256k1_fe_mul_inner+0x119c>
   171dc:	d0a01617 	ldw	r2,-32680(gp)
   171e0:	10c00317 	ldw	r3,12(r2)
   171e4:	00800174 	movhi	r2,5
   171e8:	10935804 	addi	r2,r2,19808
   171ec:	d8800015 	stw	r2,0(sp)
   171f0:	01c07f84 	movi	r7,510
   171f4:	01800174 	movhi	r6,5
   171f8:	3191dd04 	addi	r6,r6,18292
   171fc:	01400174 	movhi	r5,5
   17200:	2951e804 	addi	r5,r5,18336
   17204:	1809883a 	mov	r4,r3
   17208:	00461000 	call	46100 <fprintf>
   1720c:	0045fd40 	call	45fd4 <abort>
    /* [d u0 t9 0 0 0 0 0 0 0 0 c-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    t0 = c & M; c >>= 26; c += u0 * R1;
   17210:	e0fdb517 	ldw	r3,-2348(fp)
   17214:	e0bdaf17 	ldw	r2,-2372(fp)
   17218:	1884703a 	and	r2,r3,r2
   1721c:	e0bdb915 	stw	r2,-2332(fp)
   17220:	e0bdb617 	ldw	r2,-2344(fp)
   17224:	100691ba 	slli	r3,r2,6
   17228:	e0bdb517 	ldw	r2,-2348(fp)
   1722c:	1004d6ba 	srli	r2,r2,26
   17230:	10c4b03a 	or	r2,r2,r3
   17234:	e0bdb515 	stw	r2,-2348(fp)
   17238:	e0bdb617 	ldw	r2,-2344(fp)
   1723c:	1004d6ba 	srli	r2,r2,26
   17240:	e0bdb615 	stw	r2,-2344(fp)
   17244:	e0bdb117 	ldw	r2,-2364(fp)
   17248:	e0be2815 	stw	r2,-1888(fp)
   1724c:	e03e2915 	stw	zero,-1884(fp)
   17250:	e1bdb717 	ldw	r6,-2340(fp)
   17254:	e1fdb817 	ldw	r7,-2336(fp)
   17258:	e13e2817 	ldw	r4,-1888(fp)
   1725c:	e17e2917 	ldw	r5,-1884(fp)
   17260:	00438e00 	call	438e0 <__muldi3>
   17264:	1009883a 	mov	r4,r2
   17268:	180b883a 	mov	r5,r3
   1726c:	200f883a 	mov	r7,r4
   17270:	2811883a 	mov	r8,r5
   17274:	e13db517 	ldw	r4,-2348(fp)
   17278:	e17db617 	ldw	r5,-2344(fp)
   1727c:	21c5883a 	add	r2,r4,r7
   17280:	110d803a 	cmpltu	r6,r2,r4
   17284:	2a07883a 	add	r3,r5,r8
   17288:	30c9883a 	add	r4,r6,r3
   1728c:	2007883a 	mov	r3,r4
   17290:	e0bdb515 	stw	r2,-2348(fp)
   17294:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t0, 26);
   17298:	e0bdb917 	ldw	r2,-2332(fp)
   1729c:	1004d6ba 	srli	r2,r2,26
   172a0:	1004c03a 	cmpne	r2,r2,zero
   172a4:	10803fcc 	andi	r2,r2,255
   172a8:	10000d26 	beq	r2,zero,172e0 <secp256k1_fe_mul_inner+0x126c>
   172ac:	d0a01617 	ldw	r2,-32680(gp)
   172b0:	10c00317 	ldw	r3,12(r2)
   172b4:	00800174 	movhi	r2,5
   172b8:	10936304 	addi	r2,r2,19852
   172bc:	d8800015 	stw	r2,0(sp)
   172c0:	01c08044 	movi	r7,513
   172c4:	01800174 	movhi	r6,5
   172c8:	3191dd04 	addi	r6,r6,18292
   172cc:	01400174 	movhi	r5,5
   172d0:	2951e804 	addi	r5,r5,18336
   172d4:	1809883a 	mov	r4,r3
   172d8:	00461000 	call	46100 <fprintf>
   172dc:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 37);
   172e0:	e0bdb617 	ldw	r2,-2344(fp)
   172e4:	1004d17a 	srli	r2,r2,5
   172e8:	e0be2a15 	stw	r2,-1880(fp)
   172ec:	e03e2b15 	stw	zero,-1876(fp)
   172f0:	e0fe2a17 	ldw	r3,-1880(fp)
   172f4:	e13e2b17 	ldw	r4,-1876(fp)
   172f8:	1904b03a 	or	r2,r3,r4
   172fc:	1004c03a 	cmpne	r2,r2,zero
   17300:	10803fcc 	andi	r2,r2,255
   17304:	10000d26 	beq	r2,zero,1733c <secp256k1_fe_mul_inner+0x12c8>
   17308:	d0a01617 	ldw	r2,-32680(gp)
   1730c:	10c00317 	ldw	r3,12(r2)
   17310:	00800174 	movhi	r2,5
   17314:	10936e04 	addi	r2,r2,19896
   17318:	d8800015 	stw	r2,0(sp)
   1731c:	01c08084 	movi	r7,514
   17320:	01800174 	movhi	r6,5
   17324:	3191dd04 	addi	r6,r6,18292
   17328:	01400174 	movhi	r5,5
   1732c:	2951e804 	addi	r5,r5,18336
   17330:	1809883a 	mov	r4,r3
   17334:	00461000 	call	46100 <fprintf>
   17338:	0045fd40 	call	45fd4 <abort>
    /* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */

    c += (uint64_t)a[0] * b[1]
   1733c:	e0bdd217 	ldw	r2,-2232(fp)
   17340:	10800017 	ldw	r2,0(r2)
   17344:	e0be2c15 	stw	r2,-1872(fp)
   17348:	e03e2d15 	stw	zero,-1868(fp)
   1734c:	e0bdd317 	ldw	r2,-2228(fp)
   17350:	10800104 	addi	r2,r2,4
   17354:	10800017 	ldw	r2,0(r2)
   17358:	e0be2e15 	stw	r2,-1864(fp)
   1735c:	e03e2f15 	stw	zero,-1860(fp)
   17360:	e1be2e17 	ldw	r6,-1864(fp)
   17364:	e1fe2f17 	ldw	r7,-1860(fp)
   17368:	e13e2c17 	ldw	r4,-1872(fp)
   1736c:	e17e2d17 	ldw	r5,-1868(fp)
   17370:	00438e00 	call	438e0 <__muldi3>
   17374:	1009883a 	mov	r4,r2
   17378:	180b883a 	mov	r5,r3
   1737c:	2021883a 	mov	r16,r4
   17380:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[0];
   17384:	e0bdd217 	ldw	r2,-2232(fp)
   17388:	10800104 	addi	r2,r2,4
   1738c:	10800017 	ldw	r2,0(r2)
   17390:	e0be3015 	stw	r2,-1856(fp)
   17394:	e03e3115 	stw	zero,-1852(fp)
   17398:	e0bdd317 	ldw	r2,-2228(fp)
   1739c:	10800017 	ldw	r2,0(r2)
   173a0:	e0be3215 	stw	r2,-1848(fp)
   173a4:	e03e3315 	stw	zero,-1844(fp)
   173a8:	e1be3217 	ldw	r6,-1848(fp)
   173ac:	e1fe3317 	ldw	r7,-1844(fp)
   173b0:	e13e3017 	ldw	r4,-1856(fp)
   173b4:	e17e3117 	ldw	r5,-1852(fp)
   173b8:	00438e00 	call	438e0 <__muldi3>
   173bc:	100f883a 	mov	r7,r2
   173c0:	1811883a 	mov	r8,r3
   173c4:	380b883a 	mov	r5,r7
   173c8:	400d883a 	mov	r6,r8
   173cc:	8145883a 	add	r2,r16,r5
   173d0:	1409803a 	cmpltu	r4,r2,r16
   173d4:	8987883a 	add	r3,r17,r6
   173d8:	20c9883a 	add	r4,r4,r3
   173dc:	2007883a 	mov	r3,r4
   173e0:	100f883a 	mov	r7,r2
   173e4:	1811883a 	mov	r8,r3
    VERIFY_BITS(t0, 26);
    VERIFY_BITS(c, 37);
    /* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */

    c += (uint64_t)a[0] * b[1]
   173e8:	e13db517 	ldw	r4,-2348(fp)
   173ec:	e17db617 	ldw	r5,-2344(fp)
   173f0:	21c5883a 	add	r2,r4,r7
   173f4:	110d803a 	cmpltu	r6,r2,r4
   173f8:	2a07883a 	add	r3,r5,r8
   173fc:	30c9883a 	add	r4,r6,r3
   17400:	2007883a 	mov	r3,r4
   17404:	e0bdb515 	stw	r2,-2348(fp)
   17408:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[0];
    VERIFY_BITS(c, 62);
   1740c:	e0bdb617 	ldw	r2,-2344(fp)
   17410:	1004d7ba 	srli	r2,r2,30
   17414:	e0be3415 	stw	r2,-1840(fp)
   17418:	e03e3515 	stw	zero,-1836(fp)
   1741c:	e1be3417 	ldw	r6,-1840(fp)
   17420:	e1fe3517 	ldw	r7,-1836(fp)
   17424:	31c4b03a 	or	r2,r6,r7
   17428:	1004c03a 	cmpne	r2,r2,zero
   1742c:	10803fcc 	andi	r2,r2,255
   17430:	10000d26 	beq	r2,zero,17468 <secp256k1_fe_mul_inner+0x13f4>
   17434:	d0a01617 	ldw	r2,-32680(gp)
   17438:	10c00317 	ldw	r3,12(r2)
   1743c:	00800174 	movhi	r2,5
   17440:	10937904 	addi	r2,r2,19940
   17444:	d8800015 	stw	r2,0(sp)
   17448:	01c08204 	movi	r7,520
   1744c:	01800174 	movhi	r6,5
   17450:	3191dd04 	addi	r6,r6,18292
   17454:	01400174 	movhi	r5,5
   17458:	2951e804 	addi	r5,r5,18336
   1745c:	1809883a 	mov	r4,r3
   17460:	00461000 	call	46100 <fprintf>
   17464:	0045fd40 	call	45fd4 <abort>
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)a[2] * b[9]
   17468:	e0bdd217 	ldw	r2,-2232(fp)
   1746c:	10800204 	addi	r2,r2,8
   17470:	10800017 	ldw	r2,0(r2)
   17474:	e0be3615 	stw	r2,-1832(fp)
   17478:	e03e3715 	stw	zero,-1828(fp)
   1747c:	e0bdd317 	ldw	r2,-2228(fp)
   17480:	10800904 	addi	r2,r2,36
   17484:	10800017 	ldw	r2,0(r2)
   17488:	e0be3815 	stw	r2,-1824(fp)
   1748c:	e03e3915 	stw	zero,-1820(fp)
   17490:	e1be3817 	ldw	r6,-1824(fp)
   17494:	e1fe3917 	ldw	r7,-1820(fp)
   17498:	e13e3617 	ldw	r4,-1832(fp)
   1749c:	e17e3717 	ldw	r5,-1828(fp)
   174a0:	00438e00 	call	438e0 <__muldi3>
   174a4:	1009883a 	mov	r4,r2
   174a8:	180b883a 	mov	r5,r3
   174ac:	2021883a 	mov	r16,r4
   174b0:	2823883a 	mov	r17,r5
       + (uint64_t)a[3] * b[8]
   174b4:	e0bdd217 	ldw	r2,-2232(fp)
   174b8:	10800304 	addi	r2,r2,12
   174bc:	10800017 	ldw	r2,0(r2)
   174c0:	e0be3a15 	stw	r2,-1816(fp)
   174c4:	e03e3b15 	stw	zero,-1812(fp)
   174c8:	e0bdd317 	ldw	r2,-2228(fp)
   174cc:	10800804 	addi	r2,r2,32
   174d0:	10800017 	ldw	r2,0(r2)
   174d4:	e0be3c15 	stw	r2,-1808(fp)
   174d8:	e03e3d15 	stw	zero,-1804(fp)
   174dc:	e1be3c17 	ldw	r6,-1808(fp)
   174e0:	e1fe3d17 	ldw	r7,-1804(fp)
   174e4:	e13e3a17 	ldw	r4,-1816(fp)
   174e8:	e17e3b17 	ldw	r5,-1812(fp)
   174ec:	00438e00 	call	438e0 <__muldi3>
   174f0:	100f883a 	mov	r7,r2
   174f4:	1811883a 	mov	r8,r3
   174f8:	380b883a 	mov	r5,r7
   174fc:	400d883a 	mov	r6,r8
   17500:	8145883a 	add	r2,r16,r5
   17504:	1409803a 	cmpltu	r4,r2,r16
   17508:	8987883a 	add	r3,r17,r6
   1750c:	20c9883a 	add	r4,r4,r3
   17510:	2007883a 	mov	r3,r4
   17514:	1025883a 	mov	r18,r2
   17518:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[7]
       + (uint64_t)a[5] * b[6]
   1751c:	e0bdd217 	ldw	r2,-2232(fp)
   17520:	10800504 	addi	r2,r2,20
   17524:	10800017 	ldw	r2,0(r2)
   17528:	e0be3e15 	stw	r2,-1800(fp)
   1752c:	e03e3f15 	stw	zero,-1796(fp)
   17530:	e0bdd317 	ldw	r2,-2228(fp)
   17534:	10800604 	addi	r2,r2,24
   17538:	10800017 	ldw	r2,0(r2)
   1753c:	e0be4015 	stw	r2,-1792(fp)
   17540:	e03e4115 	stw	zero,-1788(fp)
   17544:	e1be4017 	ldw	r6,-1792(fp)
   17548:	e1fe4117 	ldw	r7,-1788(fp)
   1754c:	e13e3e17 	ldw	r4,-1800(fp)
   17550:	e17e3f17 	ldw	r5,-1796(fp)
   17554:	00438e00 	call	438e0 <__muldi3>
   17558:	1009883a 	mov	r4,r2
   1755c:	180b883a 	mov	r5,r3
   17560:	2021883a 	mov	r16,r4
   17564:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[0];
    VERIFY_BITS(c, 62);
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)a[2] * b[9]
       + (uint64_t)a[3] * b[8]
       + (uint64_t)a[4] * b[7]
   17568:	e0bdd217 	ldw	r2,-2232(fp)
   1756c:	10800404 	addi	r2,r2,16
   17570:	10800017 	ldw	r2,0(r2)
   17574:	e0be4215 	stw	r2,-1784(fp)
   17578:	e03e4315 	stw	zero,-1780(fp)
   1757c:	e0bdd317 	ldw	r2,-2228(fp)
   17580:	10800704 	addi	r2,r2,28
   17584:	10800017 	ldw	r2,0(r2)
   17588:	e0be4415 	stw	r2,-1776(fp)
   1758c:	e03e4515 	stw	zero,-1772(fp)
   17590:	e1be4417 	ldw	r6,-1776(fp)
   17594:	e1fe4517 	ldw	r7,-1772(fp)
   17598:	e13e4217 	ldw	r4,-1784(fp)
   1759c:	e17e4317 	ldw	r5,-1780(fp)
   175a0:	00438e00 	call	438e0 <__muldi3>
   175a4:	100f883a 	mov	r7,r2
   175a8:	1811883a 	mov	r8,r3
   175ac:	380b883a 	mov	r5,r7
   175b0:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[6]
   175b4:	8145883a 	add	r2,r16,r5
   175b8:	1409803a 	cmpltu	r4,r2,r16
   175bc:	8987883a 	add	r3,r17,r6
   175c0:	20c9883a 	add	r4,r4,r3
   175c4:	2007883a 	mov	r3,r4
   175c8:	100b883a 	mov	r5,r2
   175cc:	180d883a 	mov	r6,r3
   175d0:	9145883a 	add	r2,r18,r5
   175d4:	1489803a 	cmpltu	r4,r2,r18
   175d8:	9987883a 	add	r3,r19,r6
   175dc:	20c9883a 	add	r4,r4,r3
   175e0:	2007883a 	mov	r3,r4
   175e4:	1025883a 	mov	r18,r2
   175e8:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[5]
       + (uint64_t)a[7] * b[4]
   175ec:	e0bdd217 	ldw	r2,-2232(fp)
   175f0:	10800704 	addi	r2,r2,28
   175f4:	10800017 	ldw	r2,0(r2)
   175f8:	e0be4615 	stw	r2,-1768(fp)
   175fc:	e03e4715 	stw	zero,-1764(fp)
   17600:	e0bdd317 	ldw	r2,-2228(fp)
   17604:	10800404 	addi	r2,r2,16
   17608:	10800017 	ldw	r2,0(r2)
   1760c:	e0be4815 	stw	r2,-1760(fp)
   17610:	e03e4915 	stw	zero,-1756(fp)
   17614:	e1be4817 	ldw	r6,-1760(fp)
   17618:	e1fe4917 	ldw	r7,-1756(fp)
   1761c:	e13e4617 	ldw	r4,-1768(fp)
   17620:	e17e4717 	ldw	r5,-1764(fp)
   17624:	00438e00 	call	438e0 <__muldi3>
   17628:	1009883a 	mov	r4,r2
   1762c:	180b883a 	mov	r5,r3
   17630:	2021883a 	mov	r16,r4
   17634:	2823883a 	mov	r17,r5
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)a[2] * b[9]
       + (uint64_t)a[3] * b[8]
       + (uint64_t)a[4] * b[7]
       + (uint64_t)a[5] * b[6]
       + (uint64_t)a[6] * b[5]
   17638:	e0bdd217 	ldw	r2,-2232(fp)
   1763c:	10800604 	addi	r2,r2,24
   17640:	10800017 	ldw	r2,0(r2)
   17644:	e0be4a15 	stw	r2,-1752(fp)
   17648:	e03e4b15 	stw	zero,-1748(fp)
   1764c:	e0bdd317 	ldw	r2,-2228(fp)
   17650:	10800504 	addi	r2,r2,20
   17654:	10800017 	ldw	r2,0(r2)
   17658:	e0be4c15 	stw	r2,-1744(fp)
   1765c:	e03e4d15 	stw	zero,-1740(fp)
   17660:	e1be4c17 	ldw	r6,-1744(fp)
   17664:	e1fe4d17 	ldw	r7,-1740(fp)
   17668:	e13e4a17 	ldw	r4,-1752(fp)
   1766c:	e17e4b17 	ldw	r5,-1748(fp)
   17670:	00438e00 	call	438e0 <__muldi3>
   17674:	100f883a 	mov	r7,r2
   17678:	1811883a 	mov	r8,r3
   1767c:	380b883a 	mov	r5,r7
   17680:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[4]
   17684:	8145883a 	add	r2,r16,r5
   17688:	1409803a 	cmpltu	r4,r2,r16
   1768c:	8987883a 	add	r3,r17,r6
   17690:	20c9883a 	add	r4,r4,r3
   17694:	2007883a 	mov	r3,r4
   17698:	100b883a 	mov	r5,r2
   1769c:	180d883a 	mov	r6,r3
   176a0:	9145883a 	add	r2,r18,r5
   176a4:	1489803a 	cmpltu	r4,r2,r18
   176a8:	9987883a 	add	r3,r19,r6
   176ac:	20c9883a 	add	r4,r4,r3
   176b0:	2007883a 	mov	r3,r4
   176b4:	1025883a 	mov	r18,r2
   176b8:	1827883a 	mov	r19,r3
       + (uint64_t)a[8] * b[3]
       + (uint64_t)a[9] * b[2];
   176bc:	e0bdd217 	ldw	r2,-2232(fp)
   176c0:	10800904 	addi	r2,r2,36
   176c4:	10800017 	ldw	r2,0(r2)
   176c8:	e0be4e15 	stw	r2,-1736(fp)
   176cc:	e03e4f15 	stw	zero,-1732(fp)
   176d0:	e0bdd317 	ldw	r2,-2228(fp)
   176d4:	10800204 	addi	r2,r2,8
   176d8:	10800017 	ldw	r2,0(r2)
   176dc:	e0be5015 	stw	r2,-1728(fp)
   176e0:	e03e5115 	stw	zero,-1724(fp)
   176e4:	e1be5017 	ldw	r6,-1728(fp)
   176e8:	e1fe5117 	ldw	r7,-1724(fp)
   176ec:	e13e4e17 	ldw	r4,-1736(fp)
   176f0:	e17e4f17 	ldw	r5,-1732(fp)
   176f4:	00438e00 	call	438e0 <__muldi3>
   176f8:	1009883a 	mov	r4,r2
   176fc:	180b883a 	mov	r5,r3
   17700:	2021883a 	mov	r16,r4
   17704:	2823883a 	mov	r17,r5
       + (uint64_t)a[3] * b[8]
       + (uint64_t)a[4] * b[7]
       + (uint64_t)a[5] * b[6]
       + (uint64_t)a[6] * b[5]
       + (uint64_t)a[7] * b[4]
       + (uint64_t)a[8] * b[3]
   17708:	e0bdd217 	ldw	r2,-2232(fp)
   1770c:	10800804 	addi	r2,r2,32
   17710:	10800017 	ldw	r2,0(r2)
   17714:	e0be5215 	stw	r2,-1720(fp)
   17718:	e03e5315 	stw	zero,-1716(fp)
   1771c:	e0bdd317 	ldw	r2,-2228(fp)
   17720:	10800304 	addi	r2,r2,12
   17724:	10800017 	ldw	r2,0(r2)
   17728:	e0be5415 	stw	r2,-1712(fp)
   1772c:	e03e5515 	stw	zero,-1708(fp)
   17730:	e1be5417 	ldw	r6,-1712(fp)
   17734:	e1fe5517 	ldw	r7,-1708(fp)
   17738:	e13e5217 	ldw	r4,-1720(fp)
   1773c:	e17e5317 	ldw	r5,-1716(fp)
   17740:	00438e00 	call	438e0 <__muldi3>
   17744:	100f883a 	mov	r7,r2
   17748:	1811883a 	mov	r8,r3
   1774c:	380b883a 	mov	r5,r7
   17750:	400d883a 	mov	r6,r8
       + (uint64_t)a[9] * b[2];
   17754:	8145883a 	add	r2,r16,r5
   17758:	1409803a 	cmpltu	r4,r2,r16
   1775c:	8987883a 	add	r3,r17,r6
   17760:	20c9883a 	add	r4,r4,r3
   17764:	2007883a 	mov	r3,r4
   17768:	100b883a 	mov	r5,r2
   1776c:	180d883a 	mov	r6,r3
   17770:	9145883a 	add	r2,r18,r5
   17774:	1489803a 	cmpltu	r4,r2,r18
   17778:	9987883a 	add	r3,r19,r6
   1777c:	20c9883a 	add	r4,r4,r3
   17780:	2007883a 	mov	r3,r4
   17784:	100f883a 	mov	r7,r2
   17788:	1811883a 	mov	r8,r3

    c += (uint64_t)a[0] * b[1]
       + (uint64_t)a[1] * b[0];
    VERIFY_BITS(c, 62);
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)a[2] * b[9]
   1778c:	e13db217 	ldw	r4,-2360(fp)
   17790:	e17db317 	ldw	r5,-2356(fp)
   17794:	21c5883a 	add	r2,r4,r7
   17798:	110d803a 	cmpltu	r6,r2,r4
   1779c:	2a07883a 	add	r3,r5,r8
   177a0:	30c9883a 	add	r4,r6,r3
   177a4:	2007883a 	mov	r3,r4
   177a8:	e0bdb215 	stw	r2,-2360(fp)
   177ac:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[5] * b[6]
       + (uint64_t)a[6] * b[5]
       + (uint64_t)a[7] * b[4]
       + (uint64_t)a[8] * b[3]
       + (uint64_t)a[9] * b[2];
    VERIFY_BITS(d, 63);
   177b0:	e0bdb217 	ldw	r2,-2360(fp)
   177b4:	e0fdb317 	ldw	r3,-2356(fp)
   177b8:	1804d7fa 	srli	r2,r3,31
   177bc:	10803fcc 	andi	r2,r2,255
   177c0:	10000d26 	beq	r2,zero,177f8 <secp256k1_fe_mul_inner+0x1784>
   177c4:	d0a01617 	ldw	r2,-32680(gp)
   177c8:	10c00317 	ldw	r3,12(r2)
   177cc:	00800174 	movhi	r2,5
   177d0:	10933704 	addi	r2,r2,19676
   177d4:	d8800015 	stw	r2,0(sp)
   177d8:	01c08484 	movi	r7,530
   177dc:	01800174 	movhi	r6,5
   177e0:	3191dd04 	addi	r6,r6,18292
   177e4:	01400174 	movhi	r5,5
   177e8:	2951e804 	addi	r5,r5,18336
   177ec:	1809883a 	mov	r4,r3
   177f0:	00461000 	call	46100 <fprintf>
   177f4:	0045fd40 	call	45fd4 <abort>
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    u1 = d & M; d >>= 26; c += u1 * R0;
   177f8:	e0bdaf17 	ldw	r2,-2372(fp)
   177fc:	e0be5615 	stw	r2,-1704(fp)
   17800:	e03e5715 	stw	zero,-1700(fp)
   17804:	e0bdb217 	ldw	r2,-2360(fp)
   17808:	e0fe5617 	ldw	r3,-1704(fp)
   1780c:	10c4703a 	and	r2,r2,r3
   17810:	e0bdba15 	stw	r2,-2328(fp)
   17814:	e0bdb317 	ldw	r2,-2356(fp)
   17818:	e13e5717 	ldw	r4,-1700(fp)
   1781c:	1104703a 	and	r2,r2,r4
   17820:	e0bdbb15 	stw	r2,-2324(fp)
   17824:	e0bdb317 	ldw	r2,-2356(fp)
   17828:	100691ba 	slli	r3,r2,6
   1782c:	e0bdb217 	ldw	r2,-2360(fp)
   17830:	1004d6ba 	srli	r2,r2,26
   17834:	10c4b03a 	or	r2,r2,r3
   17838:	e0bdb215 	stw	r2,-2360(fp)
   1783c:	e0bdb317 	ldw	r2,-2356(fp)
   17840:	1004d6ba 	srli	r2,r2,26
   17844:	e0bdb315 	stw	r2,-2356(fp)
   17848:	e0bdb017 	ldw	r2,-2368(fp)
   1784c:	e0be5815 	stw	r2,-1696(fp)
   17850:	e03e5915 	stw	zero,-1692(fp)
   17854:	e1bdba17 	ldw	r6,-2328(fp)
   17858:	e1fdbb17 	ldw	r7,-2324(fp)
   1785c:	e13e5817 	ldw	r4,-1696(fp)
   17860:	e17e5917 	ldw	r5,-1692(fp)
   17864:	00438e00 	call	438e0 <__muldi3>
   17868:	1009883a 	mov	r4,r2
   1786c:	180b883a 	mov	r5,r3
   17870:	200f883a 	mov	r7,r4
   17874:	2811883a 	mov	r8,r5
   17878:	e13db517 	ldw	r4,-2348(fp)
   1787c:	e17db617 	ldw	r5,-2344(fp)
   17880:	21c5883a 	add	r2,r4,r7
   17884:	110d803a 	cmpltu	r6,r2,r4
   17888:	2a07883a 	add	r3,r5,r8
   1788c:	30c9883a 	add	r4,r6,r3
   17890:	2007883a 	mov	r3,r4
   17894:	e0bdb515 	stw	r2,-2348(fp)
   17898:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u1, 26);
   1789c:	e0bdbb17 	ldw	r2,-2324(fp)
   178a0:	100691ba 	slli	r3,r2,6
   178a4:	e0bdba17 	ldw	r2,-2328(fp)
   178a8:	1004d6ba 	srli	r2,r2,26
   178ac:	e0be5a15 	stw	r2,-1688(fp)
   178b0:	e1be5a17 	ldw	r6,-1688(fp)
   178b4:	1986b03a 	or	r3,r3,r6
   178b8:	e0fe5a15 	stw	r3,-1688(fp)
   178bc:	e0bdbb17 	ldw	r2,-2324(fp)
   178c0:	1004d6ba 	srli	r2,r2,26
   178c4:	e0be5b15 	stw	r2,-1684(fp)
   178c8:	e1fe5a17 	ldw	r7,-1688(fp)
   178cc:	e0fe5b17 	ldw	r3,-1684(fp)
   178d0:	38c4b03a 	or	r2,r7,r3
   178d4:	1004c03a 	cmpne	r2,r2,zero
   178d8:	10803fcc 	andi	r2,r2,255
   178dc:	10000d26 	beq	r2,zero,17914 <secp256k1_fe_mul_inner+0x18a0>
   178e0:	d0a01617 	ldw	r2,-32680(gp)
   178e4:	10c00317 	ldw	r3,12(r2)
   178e8:	00800174 	movhi	r2,5
   178ec:	10938404 	addi	r2,r2,19984
   178f0:	d8800015 	stw	r2,0(sp)
   178f4:	01c08544 	movi	r7,533
   178f8:	01800174 	movhi	r6,5
   178fc:	3191dd04 	addi	r6,r6,18292
   17900:	01400174 	movhi	r5,5
   17904:	2951e804 	addi	r5,r5,18336
   17908:	1809883a 	mov	r4,r3
   1790c:	00461000 	call	46100 <fprintf>
   17910:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 37);
   17914:	e0bdb317 	ldw	r2,-2356(fp)
   17918:	1004d17a 	srli	r2,r2,5
   1791c:	e0be5c15 	stw	r2,-1680(fp)
   17920:	e03e5d15 	stw	zero,-1676(fp)
   17924:	e13e5c17 	ldw	r4,-1680(fp)
   17928:	e1be5d17 	ldw	r6,-1676(fp)
   1792c:	2184b03a 	or	r2,r4,r6
   17930:	1004c03a 	cmpne	r2,r2,zero
   17934:	10803fcc 	andi	r2,r2,255
   17938:	10000d26 	beq	r2,zero,17970 <secp256k1_fe_mul_inner+0x18fc>
   1793c:	d0a01617 	ldw	r2,-32680(gp)
   17940:	10c00317 	ldw	r3,12(r2)
   17944:	00800174 	movhi	r2,5
   17948:	10934d04 	addi	r2,r2,19764
   1794c:	d8800015 	stw	r2,0(sp)
   17950:	01c08584 	movi	r7,534
   17954:	01800174 	movhi	r6,5
   17958:	3191dd04 	addi	r6,r6,18292
   1795c:	01400174 	movhi	r5,5
   17960:	2951e804 	addi	r5,r5,18336
   17964:	1809883a 	mov	r4,r3
   17968:	00461000 	call	46100 <fprintf>
   1796c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 63);
   17970:	e0bdb517 	ldw	r2,-2348(fp)
   17974:	e0fdb617 	ldw	r3,-2344(fp)
   17978:	1804d7fa 	srli	r2,r3,31
   1797c:	10803fcc 	andi	r2,r2,255
   17980:	10000d26 	beq	r2,zero,179b8 <secp256k1_fe_mul_inner+0x1944>
   17984:	d0a01617 	ldw	r2,-32680(gp)
   17988:	10c00317 	ldw	r3,12(r2)
   1798c:	00800174 	movhi	r2,5
   17990:	10938f04 	addi	r2,r2,20028
   17994:	d8800015 	stw	r2,0(sp)
   17998:	01c085c4 	movi	r7,535
   1799c:	01800174 	movhi	r6,5
   179a0:	3191dd04 	addi	r6,r6,18292
   179a4:	01400174 	movhi	r5,5
   179a8:	2951e804 	addi	r5,r5,18336
   179ac:	1809883a 	mov	r4,r3
   179b0:	00461000 	call	46100 <fprintf>
   179b4:	0045fd40 	call	45fd4 <abort>
    /* [d u1 0 t9 0 0 0 0 0 0 0 c-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    t1 = c & M; c >>= 26; c += u1 * R1;
   179b8:	e0fdb517 	ldw	r3,-2348(fp)
   179bc:	e0bdaf17 	ldw	r2,-2372(fp)
   179c0:	1884703a 	and	r2,r3,r2
   179c4:	e0bdbc15 	stw	r2,-2320(fp)
   179c8:	e0bdb617 	ldw	r2,-2344(fp)
   179cc:	100691ba 	slli	r3,r2,6
   179d0:	e0bdb517 	ldw	r2,-2348(fp)
   179d4:	1004d6ba 	srli	r2,r2,26
   179d8:	10c4b03a 	or	r2,r2,r3
   179dc:	e0bdb515 	stw	r2,-2348(fp)
   179e0:	e0bdb617 	ldw	r2,-2344(fp)
   179e4:	1004d6ba 	srli	r2,r2,26
   179e8:	e0bdb615 	stw	r2,-2344(fp)
   179ec:	e0bdb117 	ldw	r2,-2364(fp)
   179f0:	e0be5e15 	stw	r2,-1672(fp)
   179f4:	e03e5f15 	stw	zero,-1668(fp)
   179f8:	e1bdba17 	ldw	r6,-2328(fp)
   179fc:	e1fdbb17 	ldw	r7,-2324(fp)
   17a00:	e13e5e17 	ldw	r4,-1672(fp)
   17a04:	e17e5f17 	ldw	r5,-1668(fp)
   17a08:	00438e00 	call	438e0 <__muldi3>
   17a0c:	1009883a 	mov	r4,r2
   17a10:	180b883a 	mov	r5,r3
   17a14:	200f883a 	mov	r7,r4
   17a18:	2811883a 	mov	r8,r5
   17a1c:	e13db517 	ldw	r4,-2348(fp)
   17a20:	e17db617 	ldw	r5,-2344(fp)
   17a24:	21c5883a 	add	r2,r4,r7
   17a28:	110d803a 	cmpltu	r6,r2,r4
   17a2c:	2a07883a 	add	r3,r5,r8
   17a30:	30c9883a 	add	r4,r6,r3
   17a34:	2007883a 	mov	r3,r4
   17a38:	e0bdb515 	stw	r2,-2348(fp)
   17a3c:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t1, 26);
   17a40:	e0bdbc17 	ldw	r2,-2320(fp)
   17a44:	1004d6ba 	srli	r2,r2,26
   17a48:	1004c03a 	cmpne	r2,r2,zero
   17a4c:	10803fcc 	andi	r2,r2,255
   17a50:	10000d26 	beq	r2,zero,17a88 <secp256k1_fe_mul_inner+0x1a14>
   17a54:	d0a01617 	ldw	r2,-32680(gp)
   17a58:	10c00317 	ldw	r3,12(r2)
   17a5c:	00800174 	movhi	r2,5
   17a60:	10939a04 	addi	r2,r2,20072
   17a64:	d8800015 	stw	r2,0(sp)
   17a68:	01c08684 	movi	r7,538
   17a6c:	01800174 	movhi	r6,5
   17a70:	3191dd04 	addi	r6,r6,18292
   17a74:	01400174 	movhi	r5,5
   17a78:	2951e804 	addi	r5,r5,18336
   17a7c:	1809883a 	mov	r4,r3
   17a80:	00461000 	call	46100 <fprintf>
   17a84:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 38);
   17a88:	e0bdb617 	ldw	r2,-2344(fp)
   17a8c:	1004d1ba 	srli	r2,r2,6
   17a90:	e0be6015 	stw	r2,-1664(fp)
   17a94:	e03e6115 	stw	zero,-1660(fp)
   17a98:	e1fe6017 	ldw	r7,-1664(fp)
   17a9c:	e0fe6117 	ldw	r3,-1660(fp)
   17aa0:	38c4b03a 	or	r2,r7,r3
   17aa4:	1004c03a 	cmpne	r2,r2,zero
   17aa8:	10803fcc 	andi	r2,r2,255
   17aac:	10000d26 	beq	r2,zero,17ae4 <secp256k1_fe_mul_inner+0x1a70>
   17ab0:	d0a01617 	ldw	r2,-32680(gp)
   17ab4:	10c00317 	ldw	r3,12(r2)
   17ab8:	00800174 	movhi	r2,5
   17abc:	1093a504 	addi	r2,r2,20116
   17ac0:	d8800015 	stw	r2,0(sp)
   17ac4:	01c086c4 	movi	r7,539
   17ac8:	01800174 	movhi	r6,5
   17acc:	3191dd04 	addi	r6,r6,18292
   17ad0:	01400174 	movhi	r5,5
   17ad4:	2951e804 	addi	r5,r5,18336
   17ad8:	1809883a 	mov	r4,r3
   17adc:	00461000 	call	46100 <fprintf>
   17ae0:	0045fd40 	call	45fd4 <abort>
    /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */

    c += (uint64_t)a[0] * b[2]
   17ae4:	e0bdd217 	ldw	r2,-2232(fp)
   17ae8:	10800017 	ldw	r2,0(r2)
   17aec:	e0be6215 	stw	r2,-1656(fp)
   17af0:	e03e6315 	stw	zero,-1652(fp)
   17af4:	e0bdd317 	ldw	r2,-2228(fp)
   17af8:	10800204 	addi	r2,r2,8
   17afc:	10800017 	ldw	r2,0(r2)
   17b00:	e0be6415 	stw	r2,-1648(fp)
   17b04:	e03e6515 	stw	zero,-1644(fp)
   17b08:	e1be6417 	ldw	r6,-1648(fp)
   17b0c:	e1fe6517 	ldw	r7,-1644(fp)
   17b10:	e13e6217 	ldw	r4,-1656(fp)
   17b14:	e17e6317 	ldw	r5,-1652(fp)
   17b18:	00438e00 	call	438e0 <__muldi3>
   17b1c:	1009883a 	mov	r4,r2
   17b20:	180b883a 	mov	r5,r3
   17b24:	2021883a 	mov	r16,r4
   17b28:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[1]
   17b2c:	e0bdd217 	ldw	r2,-2232(fp)
   17b30:	10800104 	addi	r2,r2,4
   17b34:	10800017 	ldw	r2,0(r2)
   17b38:	e0be6615 	stw	r2,-1640(fp)
   17b3c:	e03e6715 	stw	zero,-1636(fp)
   17b40:	e0bdd317 	ldw	r2,-2228(fp)
   17b44:	10800104 	addi	r2,r2,4
   17b48:	10800017 	ldw	r2,0(r2)
   17b4c:	e0be6815 	stw	r2,-1632(fp)
   17b50:	e03e6915 	stw	zero,-1628(fp)
   17b54:	e1be6817 	ldw	r6,-1632(fp)
   17b58:	e1fe6917 	ldw	r7,-1628(fp)
   17b5c:	e13e6617 	ldw	r4,-1640(fp)
   17b60:	e17e6717 	ldw	r5,-1636(fp)
   17b64:	00438e00 	call	438e0 <__muldi3>
   17b68:	100f883a 	mov	r7,r2
   17b6c:	1811883a 	mov	r8,r3
   17b70:	380b883a 	mov	r5,r7
   17b74:	400d883a 	mov	r6,r8
   17b78:	8145883a 	add	r2,r16,r5
   17b7c:	1409803a 	cmpltu	r4,r2,r16
   17b80:	8987883a 	add	r3,r17,r6
   17b84:	20c9883a 	add	r4,r4,r3
   17b88:	2007883a 	mov	r3,r4
   17b8c:	1021883a 	mov	r16,r2
   17b90:	1823883a 	mov	r17,r3
       + (uint64_t)a[2] * b[0];
   17b94:	e0bdd217 	ldw	r2,-2232(fp)
   17b98:	10800204 	addi	r2,r2,8
   17b9c:	10800017 	ldw	r2,0(r2)
   17ba0:	e0be6a15 	stw	r2,-1624(fp)
   17ba4:	e03e6b15 	stw	zero,-1620(fp)
   17ba8:	e0bdd317 	ldw	r2,-2228(fp)
   17bac:	10800017 	ldw	r2,0(r2)
   17bb0:	e0be6c15 	stw	r2,-1616(fp)
   17bb4:	e03e6d15 	stw	zero,-1612(fp)
   17bb8:	e1be6c17 	ldw	r6,-1616(fp)
   17bbc:	e1fe6d17 	ldw	r7,-1612(fp)
   17bc0:	e13e6a17 	ldw	r4,-1624(fp)
   17bc4:	e17e6b17 	ldw	r5,-1620(fp)
   17bc8:	00438e00 	call	438e0 <__muldi3>
   17bcc:	100f883a 	mov	r7,r2
   17bd0:	1811883a 	mov	r8,r3
   17bd4:	380b883a 	mov	r5,r7
   17bd8:	400d883a 	mov	r6,r8
   17bdc:	8145883a 	add	r2,r16,r5
   17be0:	1409803a 	cmpltu	r4,r2,r16
   17be4:	8987883a 	add	r3,r17,r6
   17be8:	20c9883a 	add	r4,r4,r3
   17bec:	2007883a 	mov	r3,r4
   17bf0:	100f883a 	mov	r7,r2
   17bf4:	1811883a 	mov	r8,r3
    VERIFY_BITS(t1, 26);
    VERIFY_BITS(c, 38);
    /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */

    c += (uint64_t)a[0] * b[2]
   17bf8:	e13db517 	ldw	r4,-2348(fp)
   17bfc:	e17db617 	ldw	r5,-2344(fp)
   17c00:	21c5883a 	add	r2,r4,r7
   17c04:	110d803a 	cmpltu	r6,r2,r4
   17c08:	2a07883a 	add	r3,r5,r8
   17c0c:	30c9883a 	add	r4,r6,r3
   17c10:	2007883a 	mov	r3,r4
   17c14:	e0bdb515 	stw	r2,-2348(fp)
   17c18:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[1]
       + (uint64_t)a[2] * b[0];
    VERIFY_BITS(c, 62);
   17c1c:	e0bdb617 	ldw	r2,-2344(fp)
   17c20:	1004d7ba 	srli	r2,r2,30
   17c24:	e0be6e15 	stw	r2,-1608(fp)
   17c28:	e03e6f15 	stw	zero,-1604(fp)
   17c2c:	e13e6e17 	ldw	r4,-1608(fp)
   17c30:	e1be6f17 	ldw	r6,-1604(fp)
   17c34:	2184b03a 	or	r2,r4,r6
   17c38:	1004c03a 	cmpne	r2,r2,zero
   17c3c:	10803fcc 	andi	r2,r2,255
   17c40:	10000d26 	beq	r2,zero,17c78 <secp256k1_fe_mul_inner+0x1c04>
   17c44:	d0a01617 	ldw	r2,-32680(gp)
   17c48:	10c00317 	ldw	r3,12(r2)
   17c4c:	00800174 	movhi	r2,5
   17c50:	10937904 	addi	r2,r2,19940
   17c54:	d8800015 	stw	r2,0(sp)
   17c58:	01c08884 	movi	r7,546
   17c5c:	01800174 	movhi	r6,5
   17c60:	3191dd04 	addi	r6,r6,18292
   17c64:	01400174 	movhi	r5,5
   17c68:	2951e804 	addi	r5,r5,18336
   17c6c:	1809883a 	mov	r4,r3
   17c70:	00461000 	call	46100 <fprintf>
   17c74:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)a[3] * b[9]
   17c78:	e0bdd217 	ldw	r2,-2232(fp)
   17c7c:	10800304 	addi	r2,r2,12
   17c80:	10800017 	ldw	r2,0(r2)
   17c84:	e0be7015 	stw	r2,-1600(fp)
   17c88:	e03e7115 	stw	zero,-1596(fp)
   17c8c:	e0bdd317 	ldw	r2,-2228(fp)
   17c90:	10800904 	addi	r2,r2,36
   17c94:	10800017 	ldw	r2,0(r2)
   17c98:	e0be7215 	stw	r2,-1592(fp)
   17c9c:	e03e7315 	stw	zero,-1588(fp)
   17ca0:	e1be7217 	ldw	r6,-1592(fp)
   17ca4:	e1fe7317 	ldw	r7,-1588(fp)
   17ca8:	e13e7017 	ldw	r4,-1600(fp)
   17cac:	e17e7117 	ldw	r5,-1596(fp)
   17cb0:	00438e00 	call	438e0 <__muldi3>
   17cb4:	1009883a 	mov	r4,r2
   17cb8:	180b883a 	mov	r5,r3
   17cbc:	2021883a 	mov	r16,r4
   17cc0:	2823883a 	mov	r17,r5
       + (uint64_t)a[4] * b[8]
   17cc4:	e0bdd217 	ldw	r2,-2232(fp)
   17cc8:	10800404 	addi	r2,r2,16
   17ccc:	10800017 	ldw	r2,0(r2)
   17cd0:	e0be7415 	stw	r2,-1584(fp)
   17cd4:	e03e7515 	stw	zero,-1580(fp)
   17cd8:	e0bdd317 	ldw	r2,-2228(fp)
   17cdc:	10800804 	addi	r2,r2,32
   17ce0:	10800017 	ldw	r2,0(r2)
   17ce4:	e0be7615 	stw	r2,-1576(fp)
   17ce8:	e03e7715 	stw	zero,-1572(fp)
   17cec:	e1be7617 	ldw	r6,-1576(fp)
   17cf0:	e1fe7717 	ldw	r7,-1572(fp)
   17cf4:	e13e7417 	ldw	r4,-1584(fp)
   17cf8:	e17e7517 	ldw	r5,-1580(fp)
   17cfc:	00438e00 	call	438e0 <__muldi3>
   17d00:	100f883a 	mov	r7,r2
   17d04:	1811883a 	mov	r8,r3
   17d08:	380b883a 	mov	r5,r7
   17d0c:	400d883a 	mov	r6,r8
   17d10:	8145883a 	add	r2,r16,r5
   17d14:	1409803a 	cmpltu	r4,r2,r16
   17d18:	8987883a 	add	r3,r17,r6
   17d1c:	20c9883a 	add	r4,r4,r3
   17d20:	2007883a 	mov	r3,r4
   17d24:	1025883a 	mov	r18,r2
   17d28:	1827883a 	mov	r19,r3
       + (uint64_t)a[5] * b[7]
       + (uint64_t)a[6] * b[6]
   17d2c:	e0bdd217 	ldw	r2,-2232(fp)
   17d30:	10800604 	addi	r2,r2,24
   17d34:	10800017 	ldw	r2,0(r2)
   17d38:	e0be7815 	stw	r2,-1568(fp)
   17d3c:	e03e7915 	stw	zero,-1564(fp)
   17d40:	e0bdd317 	ldw	r2,-2228(fp)
   17d44:	10800604 	addi	r2,r2,24
   17d48:	10800017 	ldw	r2,0(r2)
   17d4c:	e0be7a15 	stw	r2,-1560(fp)
   17d50:	e03e7b15 	stw	zero,-1556(fp)
   17d54:	e1be7a17 	ldw	r6,-1560(fp)
   17d58:	e1fe7b17 	ldw	r7,-1556(fp)
   17d5c:	e13e7817 	ldw	r4,-1568(fp)
   17d60:	e17e7917 	ldw	r5,-1564(fp)
   17d64:	00438e00 	call	438e0 <__muldi3>
   17d68:	1009883a 	mov	r4,r2
   17d6c:	180b883a 	mov	r5,r3
   17d70:	2021883a 	mov	r16,r4
   17d74:	2823883a 	mov	r17,r5
       + (uint64_t)a[2] * b[0];
    VERIFY_BITS(c, 62);
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)a[3] * b[9]
       + (uint64_t)a[4] * b[8]
       + (uint64_t)a[5] * b[7]
   17d78:	e0bdd217 	ldw	r2,-2232(fp)
   17d7c:	10800504 	addi	r2,r2,20
   17d80:	10800017 	ldw	r2,0(r2)
   17d84:	e0be7c15 	stw	r2,-1552(fp)
   17d88:	e03e7d15 	stw	zero,-1548(fp)
   17d8c:	e0bdd317 	ldw	r2,-2228(fp)
   17d90:	10800704 	addi	r2,r2,28
   17d94:	10800017 	ldw	r2,0(r2)
   17d98:	e0be7e15 	stw	r2,-1544(fp)
   17d9c:	e03e7f15 	stw	zero,-1540(fp)
   17da0:	e1be7e17 	ldw	r6,-1544(fp)
   17da4:	e1fe7f17 	ldw	r7,-1540(fp)
   17da8:	e13e7c17 	ldw	r4,-1552(fp)
   17dac:	e17e7d17 	ldw	r5,-1548(fp)
   17db0:	00438e00 	call	438e0 <__muldi3>
   17db4:	100f883a 	mov	r7,r2
   17db8:	1811883a 	mov	r8,r3
   17dbc:	380b883a 	mov	r5,r7
   17dc0:	400d883a 	mov	r6,r8
       + (uint64_t)a[6] * b[6]
   17dc4:	8145883a 	add	r2,r16,r5
   17dc8:	1409803a 	cmpltu	r4,r2,r16
   17dcc:	8987883a 	add	r3,r17,r6
   17dd0:	20c9883a 	add	r4,r4,r3
   17dd4:	2007883a 	mov	r3,r4
   17dd8:	100b883a 	mov	r5,r2
   17ddc:	180d883a 	mov	r6,r3
   17de0:	9145883a 	add	r2,r18,r5
   17de4:	1489803a 	cmpltu	r4,r2,r18
   17de8:	9987883a 	add	r3,r19,r6
   17dec:	20c9883a 	add	r4,r4,r3
   17df0:	2007883a 	mov	r3,r4
   17df4:	1025883a 	mov	r18,r2
   17df8:	1827883a 	mov	r19,r3
       + (uint64_t)a[7] * b[5]
       + (uint64_t)a[8] * b[4]
   17dfc:	e0bdd217 	ldw	r2,-2232(fp)
   17e00:	10800804 	addi	r2,r2,32
   17e04:	10800017 	ldw	r2,0(r2)
   17e08:	e0be8015 	stw	r2,-1536(fp)
   17e0c:	e03e8115 	stw	zero,-1532(fp)
   17e10:	e0bdd317 	ldw	r2,-2228(fp)
   17e14:	10800404 	addi	r2,r2,16
   17e18:	10800017 	ldw	r2,0(r2)
   17e1c:	e0be8215 	stw	r2,-1528(fp)
   17e20:	e03e8315 	stw	zero,-1524(fp)
   17e24:	e1be8217 	ldw	r6,-1528(fp)
   17e28:	e1fe8317 	ldw	r7,-1524(fp)
   17e2c:	e13e8017 	ldw	r4,-1536(fp)
   17e30:	e17e8117 	ldw	r5,-1532(fp)
   17e34:	00438e00 	call	438e0 <__muldi3>
   17e38:	1009883a 	mov	r4,r2
   17e3c:	180b883a 	mov	r5,r3
   17e40:	2021883a 	mov	r16,r4
   17e44:	2823883a 	mov	r17,r5
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)a[3] * b[9]
       + (uint64_t)a[4] * b[8]
       + (uint64_t)a[5] * b[7]
       + (uint64_t)a[6] * b[6]
       + (uint64_t)a[7] * b[5]
   17e48:	e0bdd217 	ldw	r2,-2232(fp)
   17e4c:	10800704 	addi	r2,r2,28
   17e50:	10800017 	ldw	r2,0(r2)
   17e54:	e0be8415 	stw	r2,-1520(fp)
   17e58:	e03e8515 	stw	zero,-1516(fp)
   17e5c:	e0bdd317 	ldw	r2,-2228(fp)
   17e60:	10800504 	addi	r2,r2,20
   17e64:	10800017 	ldw	r2,0(r2)
   17e68:	e0be8615 	stw	r2,-1512(fp)
   17e6c:	e03e8715 	stw	zero,-1508(fp)
   17e70:	e1be8617 	ldw	r6,-1512(fp)
   17e74:	e1fe8717 	ldw	r7,-1508(fp)
   17e78:	e13e8417 	ldw	r4,-1520(fp)
   17e7c:	e17e8517 	ldw	r5,-1516(fp)
   17e80:	00438e00 	call	438e0 <__muldi3>
   17e84:	100f883a 	mov	r7,r2
   17e88:	1811883a 	mov	r8,r3
   17e8c:	380b883a 	mov	r5,r7
   17e90:	400d883a 	mov	r6,r8
       + (uint64_t)a[8] * b[4]
   17e94:	8145883a 	add	r2,r16,r5
   17e98:	1409803a 	cmpltu	r4,r2,r16
   17e9c:	8987883a 	add	r3,r17,r6
   17ea0:	20c9883a 	add	r4,r4,r3
   17ea4:	2007883a 	mov	r3,r4
   17ea8:	100b883a 	mov	r5,r2
   17eac:	180d883a 	mov	r6,r3
   17eb0:	9145883a 	add	r2,r18,r5
   17eb4:	1489803a 	cmpltu	r4,r2,r18
   17eb8:	9987883a 	add	r3,r19,r6
   17ebc:	20c9883a 	add	r4,r4,r3
   17ec0:	2007883a 	mov	r3,r4
   17ec4:	1021883a 	mov	r16,r2
   17ec8:	1823883a 	mov	r17,r3
       + (uint64_t)a[9] * b[3];
   17ecc:	e0bdd217 	ldw	r2,-2232(fp)
   17ed0:	10800904 	addi	r2,r2,36
   17ed4:	10800017 	ldw	r2,0(r2)
   17ed8:	e0be8815 	stw	r2,-1504(fp)
   17edc:	e03e8915 	stw	zero,-1500(fp)
   17ee0:	e0bdd317 	ldw	r2,-2228(fp)
   17ee4:	10800304 	addi	r2,r2,12
   17ee8:	10800017 	ldw	r2,0(r2)
   17eec:	e0be8a15 	stw	r2,-1496(fp)
   17ef0:	e03e8b15 	stw	zero,-1492(fp)
   17ef4:	e1be8a17 	ldw	r6,-1496(fp)
   17ef8:	e1fe8b17 	ldw	r7,-1492(fp)
   17efc:	e13e8817 	ldw	r4,-1504(fp)
   17f00:	e17e8917 	ldw	r5,-1500(fp)
   17f04:	00438e00 	call	438e0 <__muldi3>
   17f08:	100f883a 	mov	r7,r2
   17f0c:	1811883a 	mov	r8,r3
   17f10:	380b883a 	mov	r5,r7
   17f14:	400d883a 	mov	r6,r8
   17f18:	8145883a 	add	r2,r16,r5
   17f1c:	1409803a 	cmpltu	r4,r2,r16
   17f20:	8987883a 	add	r3,r17,r6
   17f24:	20c9883a 	add	r4,r4,r3
   17f28:	2007883a 	mov	r3,r4
   17f2c:	100f883a 	mov	r7,r2
   17f30:	1811883a 	mov	r8,r3
    c += (uint64_t)a[0] * b[2]
       + (uint64_t)a[1] * b[1]
       + (uint64_t)a[2] * b[0];
    VERIFY_BITS(c, 62);
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)a[3] * b[9]
   17f34:	e13db217 	ldw	r4,-2360(fp)
   17f38:	e17db317 	ldw	r5,-2356(fp)
   17f3c:	21c5883a 	add	r2,r4,r7
   17f40:	110d803a 	cmpltu	r6,r2,r4
   17f44:	2a07883a 	add	r3,r5,r8
   17f48:	30c9883a 	add	r4,r6,r3
   17f4c:	2007883a 	mov	r3,r4
   17f50:	e0bdb215 	stw	r2,-2360(fp)
   17f54:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[5] * b[7]
       + (uint64_t)a[6] * b[6]
       + (uint64_t)a[7] * b[5]
       + (uint64_t)a[8] * b[4]
       + (uint64_t)a[9] * b[3];
    VERIFY_BITS(d, 63);
   17f58:	e0bdb217 	ldw	r2,-2360(fp)
   17f5c:	e0fdb317 	ldw	r3,-2356(fp)
   17f60:	1804d7fa 	srli	r2,r3,31
   17f64:	10803fcc 	andi	r2,r2,255
   17f68:	10000d26 	beq	r2,zero,17fa0 <secp256k1_fe_mul_inner+0x1f2c>
   17f6c:	d0a01617 	ldw	r2,-32680(gp)
   17f70:	10c00317 	ldw	r3,12(r2)
   17f74:	00800174 	movhi	r2,5
   17f78:	10933704 	addi	r2,r2,19676
   17f7c:	d8800015 	stw	r2,0(sp)
   17f80:	01c08ac4 	movi	r7,555
   17f84:	01800174 	movhi	r6,5
   17f88:	3191dd04 	addi	r6,r6,18292
   17f8c:	01400174 	movhi	r5,5
   17f90:	2951e804 	addi	r5,r5,18336
   17f94:	1809883a 	mov	r4,r3
   17f98:	00461000 	call	46100 <fprintf>
   17f9c:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    u2 = d & M; d >>= 26; c += u2 * R0;
   17fa0:	e0bdaf17 	ldw	r2,-2372(fp)
   17fa4:	e0be8c15 	stw	r2,-1488(fp)
   17fa8:	e03e8d15 	stw	zero,-1484(fp)
   17fac:	e0bdb217 	ldw	r2,-2360(fp)
   17fb0:	e1fe8c17 	ldw	r7,-1488(fp)
   17fb4:	11c4703a 	and	r2,r2,r7
   17fb8:	e0bdbd15 	stw	r2,-2316(fp)
   17fbc:	e0bdb317 	ldw	r2,-2356(fp)
   17fc0:	e0fe8d17 	ldw	r3,-1484(fp)
   17fc4:	10c4703a 	and	r2,r2,r3
   17fc8:	e0bdbe15 	stw	r2,-2312(fp)
   17fcc:	e0bdb317 	ldw	r2,-2356(fp)
   17fd0:	100691ba 	slli	r3,r2,6
   17fd4:	e0bdb217 	ldw	r2,-2360(fp)
   17fd8:	1004d6ba 	srli	r2,r2,26
   17fdc:	10c4b03a 	or	r2,r2,r3
   17fe0:	e0bdb215 	stw	r2,-2360(fp)
   17fe4:	e0bdb317 	ldw	r2,-2356(fp)
   17fe8:	1004d6ba 	srli	r2,r2,26
   17fec:	e0bdb315 	stw	r2,-2356(fp)
   17ff0:	e0bdb017 	ldw	r2,-2368(fp)
   17ff4:	e0be8e15 	stw	r2,-1480(fp)
   17ff8:	e03e8f15 	stw	zero,-1476(fp)
   17ffc:	e1bdbd17 	ldw	r6,-2316(fp)
   18000:	e1fdbe17 	ldw	r7,-2312(fp)
   18004:	e13e8e17 	ldw	r4,-1480(fp)
   18008:	e17e8f17 	ldw	r5,-1476(fp)
   1800c:	00438e00 	call	438e0 <__muldi3>
   18010:	1009883a 	mov	r4,r2
   18014:	180b883a 	mov	r5,r3
   18018:	200f883a 	mov	r7,r4
   1801c:	2811883a 	mov	r8,r5
   18020:	e13db517 	ldw	r4,-2348(fp)
   18024:	e17db617 	ldw	r5,-2344(fp)
   18028:	21c5883a 	add	r2,r4,r7
   1802c:	110d803a 	cmpltu	r6,r2,r4
   18030:	2a07883a 	add	r3,r5,r8
   18034:	30c9883a 	add	r4,r6,r3
   18038:	2007883a 	mov	r3,r4
   1803c:	e0bdb515 	stw	r2,-2348(fp)
   18040:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u2, 26);
   18044:	e0bdbe17 	ldw	r2,-2312(fp)
   18048:	100691ba 	slli	r3,r2,6
   1804c:	e0bdbd17 	ldw	r2,-2316(fp)
   18050:	1004d6ba 	srli	r2,r2,26
   18054:	e0be9015 	stw	r2,-1472(fp)
   18058:	e13e9017 	ldw	r4,-1472(fp)
   1805c:	1906b03a 	or	r3,r3,r4
   18060:	e0fe9015 	stw	r3,-1472(fp)
   18064:	e0bdbe17 	ldw	r2,-2312(fp)
   18068:	1004d6ba 	srli	r2,r2,26
   1806c:	e0be9115 	stw	r2,-1468(fp)
   18070:	e1be9017 	ldw	r6,-1472(fp)
   18074:	e1fe9117 	ldw	r7,-1468(fp)
   18078:	31c4b03a 	or	r2,r6,r7
   1807c:	1004c03a 	cmpne	r2,r2,zero
   18080:	10803fcc 	andi	r2,r2,255
   18084:	10000d26 	beq	r2,zero,180bc <secp256k1_fe_mul_inner+0x2048>
   18088:	d0a01617 	ldw	r2,-32680(gp)
   1808c:	10c00317 	ldw	r3,12(r2)
   18090:	00800174 	movhi	r2,5
   18094:	1093b004 	addi	r2,r2,20160
   18098:	d8800015 	stw	r2,0(sp)
   1809c:	01c08b84 	movi	r7,558
   180a0:	01800174 	movhi	r6,5
   180a4:	3191dd04 	addi	r6,r6,18292
   180a8:	01400174 	movhi	r5,5
   180ac:	2951e804 	addi	r5,r5,18336
   180b0:	1809883a 	mov	r4,r3
   180b4:	00461000 	call	46100 <fprintf>
   180b8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 37);
   180bc:	e0bdb317 	ldw	r2,-2356(fp)
   180c0:	1004d17a 	srli	r2,r2,5
   180c4:	e0be9215 	stw	r2,-1464(fp)
   180c8:	e03e9315 	stw	zero,-1460(fp)
   180cc:	e0fe9217 	ldw	r3,-1464(fp)
   180d0:	e13e9317 	ldw	r4,-1460(fp)
   180d4:	1904b03a 	or	r2,r3,r4
   180d8:	1004c03a 	cmpne	r2,r2,zero
   180dc:	10803fcc 	andi	r2,r2,255
   180e0:	10000d26 	beq	r2,zero,18118 <secp256k1_fe_mul_inner+0x20a4>
   180e4:	d0a01617 	ldw	r2,-32680(gp)
   180e8:	10c00317 	ldw	r3,12(r2)
   180ec:	00800174 	movhi	r2,5
   180f0:	10934d04 	addi	r2,r2,19764
   180f4:	d8800015 	stw	r2,0(sp)
   180f8:	01c08bc4 	movi	r7,559
   180fc:	01800174 	movhi	r6,5
   18100:	3191dd04 	addi	r6,r6,18292
   18104:	01400174 	movhi	r5,5
   18108:	2951e804 	addi	r5,r5,18336
   1810c:	1809883a 	mov	r4,r3
   18110:	00461000 	call	46100 <fprintf>
   18114:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 63);
   18118:	e0bdb517 	ldw	r2,-2348(fp)
   1811c:	e0fdb617 	ldw	r3,-2344(fp)
   18120:	1804d7fa 	srli	r2,r3,31
   18124:	10803fcc 	andi	r2,r2,255
   18128:	10000d26 	beq	r2,zero,18160 <secp256k1_fe_mul_inner+0x20ec>
   1812c:	d0a01617 	ldw	r2,-32680(gp)
   18130:	10c00317 	ldw	r3,12(r2)
   18134:	00800174 	movhi	r2,5
   18138:	10938f04 	addi	r2,r2,20028
   1813c:	d8800015 	stw	r2,0(sp)
   18140:	01c08c04 	movi	r7,560
   18144:	01800174 	movhi	r6,5
   18148:	3191dd04 	addi	r6,r6,18292
   1814c:	01400174 	movhi	r5,5
   18150:	2951e804 	addi	r5,r5,18336
   18154:	1809883a 	mov	r4,r3
   18158:	00461000 	call	46100 <fprintf>
   1815c:	0045fd40 	call	45fd4 <abort>
    /* [d u2 0 0 t9 0 0 0 0 0 0 c-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    t2 = c & M; c >>= 26; c += u2 * R1;
   18160:	e0fdb517 	ldw	r3,-2348(fp)
   18164:	e0bdaf17 	ldw	r2,-2372(fp)
   18168:	1884703a 	and	r2,r3,r2
   1816c:	e0bdbf15 	stw	r2,-2308(fp)
   18170:	e0bdb617 	ldw	r2,-2344(fp)
   18174:	100691ba 	slli	r3,r2,6
   18178:	e0bdb517 	ldw	r2,-2348(fp)
   1817c:	1004d6ba 	srli	r2,r2,26
   18180:	10c4b03a 	or	r2,r2,r3
   18184:	e0bdb515 	stw	r2,-2348(fp)
   18188:	e0bdb617 	ldw	r2,-2344(fp)
   1818c:	1004d6ba 	srli	r2,r2,26
   18190:	e0bdb615 	stw	r2,-2344(fp)
   18194:	e0bdb117 	ldw	r2,-2364(fp)
   18198:	e0be9415 	stw	r2,-1456(fp)
   1819c:	e03e9515 	stw	zero,-1452(fp)
   181a0:	e1bdbd17 	ldw	r6,-2316(fp)
   181a4:	e1fdbe17 	ldw	r7,-2312(fp)
   181a8:	e13e9417 	ldw	r4,-1456(fp)
   181ac:	e17e9517 	ldw	r5,-1452(fp)
   181b0:	00438e00 	call	438e0 <__muldi3>
   181b4:	1009883a 	mov	r4,r2
   181b8:	180b883a 	mov	r5,r3
   181bc:	200f883a 	mov	r7,r4
   181c0:	2811883a 	mov	r8,r5
   181c4:	e13db517 	ldw	r4,-2348(fp)
   181c8:	e17db617 	ldw	r5,-2344(fp)
   181cc:	21c5883a 	add	r2,r4,r7
   181d0:	110d803a 	cmpltu	r6,r2,r4
   181d4:	2a07883a 	add	r3,r5,r8
   181d8:	30c9883a 	add	r4,r6,r3
   181dc:	2007883a 	mov	r3,r4
   181e0:	e0bdb515 	stw	r2,-2348(fp)
   181e4:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t2, 26);
   181e8:	e0bdbf17 	ldw	r2,-2308(fp)
   181ec:	1004d6ba 	srli	r2,r2,26
   181f0:	1004c03a 	cmpne	r2,r2,zero
   181f4:	10803fcc 	andi	r2,r2,255
   181f8:	10000d26 	beq	r2,zero,18230 <secp256k1_fe_mul_inner+0x21bc>
   181fc:	d0a01617 	ldw	r2,-32680(gp)
   18200:	10c00317 	ldw	r3,12(r2)
   18204:	00800174 	movhi	r2,5
   18208:	1093bb04 	addi	r2,r2,20204
   1820c:	d8800015 	stw	r2,0(sp)
   18210:	01c08cc4 	movi	r7,563
   18214:	01800174 	movhi	r6,5
   18218:	3191dd04 	addi	r6,r6,18292
   1821c:	01400174 	movhi	r5,5
   18220:	2951e804 	addi	r5,r5,18336
   18224:	1809883a 	mov	r4,r3
   18228:	00461000 	call	46100 <fprintf>
   1822c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 38);
   18230:	e0bdb617 	ldw	r2,-2344(fp)
   18234:	1004d1ba 	srli	r2,r2,6
   18238:	e0be9615 	stw	r2,-1448(fp)
   1823c:	e03e9715 	stw	zero,-1444(fp)
   18240:	e1be9617 	ldw	r6,-1448(fp)
   18244:	e1fe9717 	ldw	r7,-1444(fp)
   18248:	31c4b03a 	or	r2,r6,r7
   1824c:	1004c03a 	cmpne	r2,r2,zero
   18250:	10803fcc 	andi	r2,r2,255
   18254:	10000d26 	beq	r2,zero,1828c <secp256k1_fe_mul_inner+0x2218>
   18258:	d0a01617 	ldw	r2,-32680(gp)
   1825c:	10c00317 	ldw	r3,12(r2)
   18260:	00800174 	movhi	r2,5
   18264:	1093a504 	addi	r2,r2,20116
   18268:	d8800015 	stw	r2,0(sp)
   1826c:	01c08d04 	movi	r7,564
   18270:	01800174 	movhi	r6,5
   18274:	3191dd04 	addi	r6,r6,18292
   18278:	01400174 	movhi	r5,5
   1827c:	2951e804 	addi	r5,r5,18336
   18280:	1809883a 	mov	r4,r3
   18284:	00461000 	call	46100 <fprintf>
   18288:	0045fd40 	call	45fd4 <abort>
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)a[0] * b[3]
   1828c:	e0bdd217 	ldw	r2,-2232(fp)
   18290:	10800017 	ldw	r2,0(r2)
   18294:	e0be9815 	stw	r2,-1440(fp)
   18298:	e03e9915 	stw	zero,-1436(fp)
   1829c:	e0bdd317 	ldw	r2,-2228(fp)
   182a0:	10800304 	addi	r2,r2,12
   182a4:	10800017 	ldw	r2,0(r2)
   182a8:	e0be9a15 	stw	r2,-1432(fp)
   182ac:	e03e9b15 	stw	zero,-1428(fp)
   182b0:	e1be9a17 	ldw	r6,-1432(fp)
   182b4:	e1fe9b17 	ldw	r7,-1428(fp)
   182b8:	e13e9817 	ldw	r4,-1440(fp)
   182bc:	e17e9917 	ldw	r5,-1436(fp)
   182c0:	00438e00 	call	438e0 <__muldi3>
   182c4:	1009883a 	mov	r4,r2
   182c8:	180b883a 	mov	r5,r3
   182cc:	2021883a 	mov	r16,r4
   182d0:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[2]
   182d4:	e0bdd217 	ldw	r2,-2232(fp)
   182d8:	10800104 	addi	r2,r2,4
   182dc:	10800017 	ldw	r2,0(r2)
   182e0:	e0be9c15 	stw	r2,-1424(fp)
   182e4:	e03e9d15 	stw	zero,-1420(fp)
   182e8:	e0bdd317 	ldw	r2,-2228(fp)
   182ec:	10800204 	addi	r2,r2,8
   182f0:	10800017 	ldw	r2,0(r2)
   182f4:	e0be9e15 	stw	r2,-1416(fp)
   182f8:	e03e9f15 	stw	zero,-1412(fp)
   182fc:	e1be9e17 	ldw	r6,-1416(fp)
   18300:	e1fe9f17 	ldw	r7,-1412(fp)
   18304:	e13e9c17 	ldw	r4,-1424(fp)
   18308:	e17e9d17 	ldw	r5,-1420(fp)
   1830c:	00438e00 	call	438e0 <__muldi3>
   18310:	100f883a 	mov	r7,r2
   18314:	1811883a 	mov	r8,r3
   18318:	380b883a 	mov	r5,r7
   1831c:	400d883a 	mov	r6,r8
   18320:	8145883a 	add	r2,r16,r5
   18324:	1409803a 	cmpltu	r4,r2,r16
   18328:	8987883a 	add	r3,r17,r6
   1832c:	20c9883a 	add	r4,r4,r3
   18330:	2007883a 	mov	r3,r4
   18334:	1025883a 	mov	r18,r2
   18338:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[1]
       + (uint64_t)a[3] * b[0];
   1833c:	e0bdd217 	ldw	r2,-2232(fp)
   18340:	10800304 	addi	r2,r2,12
   18344:	10800017 	ldw	r2,0(r2)
   18348:	e0bea015 	stw	r2,-1408(fp)
   1834c:	e03ea115 	stw	zero,-1404(fp)
   18350:	e0bdd317 	ldw	r2,-2228(fp)
   18354:	10800017 	ldw	r2,0(r2)
   18358:	e0bea215 	stw	r2,-1400(fp)
   1835c:	e03ea315 	stw	zero,-1396(fp)
   18360:	e1bea217 	ldw	r6,-1400(fp)
   18364:	e1fea317 	ldw	r7,-1396(fp)
   18368:	e13ea017 	ldw	r4,-1408(fp)
   1836c:	e17ea117 	ldw	r5,-1404(fp)
   18370:	00438e00 	call	438e0 <__muldi3>
   18374:	1009883a 	mov	r4,r2
   18378:	180b883a 	mov	r5,r3
   1837c:	2021883a 	mov	r16,r4
   18380:	2823883a 	mov	r17,r5
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)a[0] * b[3]
       + (uint64_t)a[1] * b[2]
       + (uint64_t)a[2] * b[1]
   18384:	e0bdd217 	ldw	r2,-2232(fp)
   18388:	10800204 	addi	r2,r2,8
   1838c:	10800017 	ldw	r2,0(r2)
   18390:	e0bea415 	stw	r2,-1392(fp)
   18394:	e03ea515 	stw	zero,-1388(fp)
   18398:	e0bdd317 	ldw	r2,-2228(fp)
   1839c:	10800104 	addi	r2,r2,4
   183a0:	10800017 	ldw	r2,0(r2)
   183a4:	e0bea615 	stw	r2,-1384(fp)
   183a8:	e03ea715 	stw	zero,-1380(fp)
   183ac:	e1bea617 	ldw	r6,-1384(fp)
   183b0:	e1fea717 	ldw	r7,-1380(fp)
   183b4:	e13ea417 	ldw	r4,-1392(fp)
   183b8:	e17ea517 	ldw	r5,-1388(fp)
   183bc:	00438e00 	call	438e0 <__muldi3>
   183c0:	100f883a 	mov	r7,r2
   183c4:	1811883a 	mov	r8,r3
   183c8:	380b883a 	mov	r5,r7
   183cc:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[0];
   183d0:	8145883a 	add	r2,r16,r5
   183d4:	1409803a 	cmpltu	r4,r2,r16
   183d8:	8987883a 	add	r3,r17,r6
   183dc:	20c9883a 	add	r4,r4,r3
   183e0:	2007883a 	mov	r3,r4
   183e4:	100b883a 	mov	r5,r2
   183e8:	180d883a 	mov	r6,r3
   183ec:	9145883a 	add	r2,r18,r5
   183f0:	1489803a 	cmpltu	r4,r2,r18
   183f4:	9987883a 	add	r3,r19,r6
   183f8:	20c9883a 	add	r4,r4,r3
   183fc:	2007883a 	mov	r3,r4
   18400:	100f883a 	mov	r7,r2
   18404:	1811883a 	mov	r8,r3
    VERIFY_BITS(t2, 26);
    VERIFY_BITS(c, 38);
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)a[0] * b[3]
   18408:	e13db517 	ldw	r4,-2348(fp)
   1840c:	e17db617 	ldw	r5,-2344(fp)
   18410:	21c5883a 	add	r2,r4,r7
   18414:	110d803a 	cmpltu	r6,r2,r4
   18418:	2a07883a 	add	r3,r5,r8
   1841c:	30c9883a 	add	r4,r6,r3
   18420:	2007883a 	mov	r3,r4
   18424:	e0bdb515 	stw	r2,-2348(fp)
   18428:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[2]
       + (uint64_t)a[2] * b[1]
       + (uint64_t)a[3] * b[0];
    VERIFY_BITS(c, 63);
   1842c:	e0bdb517 	ldw	r2,-2348(fp)
   18430:	e0fdb617 	ldw	r3,-2344(fp)
   18434:	1804d7fa 	srli	r2,r3,31
   18438:	10803fcc 	andi	r2,r2,255
   1843c:	10000d26 	beq	r2,zero,18474 <secp256k1_fe_mul_inner+0x2400>
   18440:	d0a01617 	ldw	r2,-32680(gp)
   18444:	10c00317 	ldw	r3,12(r2)
   18448:	00800174 	movhi	r2,5
   1844c:	10938f04 	addi	r2,r2,20028
   18450:	d8800015 	stw	r2,0(sp)
   18454:	01c08f04 	movi	r7,572
   18458:	01800174 	movhi	r6,5
   1845c:	3191dd04 	addi	r6,r6,18292
   18460:	01400174 	movhi	r5,5
   18464:	2951e804 	addi	r5,r5,18336
   18468:	1809883a 	mov	r4,r3
   1846c:	00461000 	call	46100 <fprintf>
   18470:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)a[4] * b[9]
   18474:	e0bdd217 	ldw	r2,-2232(fp)
   18478:	10800404 	addi	r2,r2,16
   1847c:	10800017 	ldw	r2,0(r2)
   18480:	e0bea815 	stw	r2,-1376(fp)
   18484:	e03ea915 	stw	zero,-1372(fp)
   18488:	e0bdd317 	ldw	r2,-2228(fp)
   1848c:	10800904 	addi	r2,r2,36
   18490:	10800017 	ldw	r2,0(r2)
   18494:	e0beaa15 	stw	r2,-1368(fp)
   18498:	e03eab15 	stw	zero,-1364(fp)
   1849c:	e1beaa17 	ldw	r6,-1368(fp)
   184a0:	e1feab17 	ldw	r7,-1364(fp)
   184a4:	e13ea817 	ldw	r4,-1376(fp)
   184a8:	e17ea917 	ldw	r5,-1372(fp)
   184ac:	00438e00 	call	438e0 <__muldi3>
   184b0:	1009883a 	mov	r4,r2
   184b4:	180b883a 	mov	r5,r3
   184b8:	2021883a 	mov	r16,r4
   184bc:	2823883a 	mov	r17,r5
       + (uint64_t)a[5] * b[8]
   184c0:	e0bdd217 	ldw	r2,-2232(fp)
   184c4:	10800504 	addi	r2,r2,20
   184c8:	10800017 	ldw	r2,0(r2)
   184cc:	e0beac15 	stw	r2,-1360(fp)
   184d0:	e03ead15 	stw	zero,-1356(fp)
   184d4:	e0bdd317 	ldw	r2,-2228(fp)
   184d8:	10800804 	addi	r2,r2,32
   184dc:	10800017 	ldw	r2,0(r2)
   184e0:	e0beae15 	stw	r2,-1352(fp)
   184e4:	e03eaf15 	stw	zero,-1348(fp)
   184e8:	e1beae17 	ldw	r6,-1352(fp)
   184ec:	e1feaf17 	ldw	r7,-1348(fp)
   184f0:	e13eac17 	ldw	r4,-1360(fp)
   184f4:	e17ead17 	ldw	r5,-1356(fp)
   184f8:	00438e00 	call	438e0 <__muldi3>
   184fc:	100f883a 	mov	r7,r2
   18500:	1811883a 	mov	r8,r3
   18504:	380b883a 	mov	r5,r7
   18508:	400d883a 	mov	r6,r8
   1850c:	8145883a 	add	r2,r16,r5
   18510:	1409803a 	cmpltu	r4,r2,r16
   18514:	8987883a 	add	r3,r17,r6
   18518:	20c9883a 	add	r4,r4,r3
   1851c:	2007883a 	mov	r3,r4
   18520:	1025883a 	mov	r18,r2
   18524:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[7]
       + (uint64_t)a[7] * b[6]
   18528:	e0bdd217 	ldw	r2,-2232(fp)
   1852c:	10800704 	addi	r2,r2,28
   18530:	10800017 	ldw	r2,0(r2)
   18534:	e0beb015 	stw	r2,-1344(fp)
   18538:	e03eb115 	stw	zero,-1340(fp)
   1853c:	e0bdd317 	ldw	r2,-2228(fp)
   18540:	10800604 	addi	r2,r2,24
   18544:	10800017 	ldw	r2,0(r2)
   18548:	e0beb215 	stw	r2,-1336(fp)
   1854c:	e03eb315 	stw	zero,-1332(fp)
   18550:	e1beb217 	ldw	r6,-1336(fp)
   18554:	e1feb317 	ldw	r7,-1332(fp)
   18558:	e13eb017 	ldw	r4,-1344(fp)
   1855c:	e17eb117 	ldw	r5,-1340(fp)
   18560:	00438e00 	call	438e0 <__muldi3>
   18564:	1009883a 	mov	r4,r2
   18568:	180b883a 	mov	r5,r3
   1856c:	2021883a 	mov	r16,r4
   18570:	2823883a 	mov	r17,r5
       + (uint64_t)a[3] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)a[4] * b[9]
       + (uint64_t)a[5] * b[8]
       + (uint64_t)a[6] * b[7]
   18574:	e0bdd217 	ldw	r2,-2232(fp)
   18578:	10800604 	addi	r2,r2,24
   1857c:	10800017 	ldw	r2,0(r2)
   18580:	e0beb415 	stw	r2,-1328(fp)
   18584:	e03eb515 	stw	zero,-1324(fp)
   18588:	e0bdd317 	ldw	r2,-2228(fp)
   1858c:	10800704 	addi	r2,r2,28
   18590:	10800017 	ldw	r2,0(r2)
   18594:	e0beb615 	stw	r2,-1320(fp)
   18598:	e03eb715 	stw	zero,-1316(fp)
   1859c:	e1beb617 	ldw	r6,-1320(fp)
   185a0:	e1feb717 	ldw	r7,-1316(fp)
   185a4:	e13eb417 	ldw	r4,-1328(fp)
   185a8:	e17eb517 	ldw	r5,-1324(fp)
   185ac:	00438e00 	call	438e0 <__muldi3>
   185b0:	100f883a 	mov	r7,r2
   185b4:	1811883a 	mov	r8,r3
   185b8:	380b883a 	mov	r5,r7
   185bc:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[6]
   185c0:	8145883a 	add	r2,r16,r5
   185c4:	1409803a 	cmpltu	r4,r2,r16
   185c8:	8987883a 	add	r3,r17,r6
   185cc:	20c9883a 	add	r4,r4,r3
   185d0:	2007883a 	mov	r3,r4
   185d4:	100b883a 	mov	r5,r2
   185d8:	180d883a 	mov	r6,r3
   185dc:	9145883a 	add	r2,r18,r5
   185e0:	1489803a 	cmpltu	r4,r2,r18
   185e4:	9987883a 	add	r3,r19,r6
   185e8:	20c9883a 	add	r4,r4,r3
   185ec:	2007883a 	mov	r3,r4
   185f0:	1025883a 	mov	r18,r2
   185f4:	1827883a 	mov	r19,r3
       + (uint64_t)a[8] * b[5]
       + (uint64_t)a[9] * b[4];
   185f8:	e0bdd217 	ldw	r2,-2232(fp)
   185fc:	10800904 	addi	r2,r2,36
   18600:	10800017 	ldw	r2,0(r2)
   18604:	e0beb815 	stw	r2,-1312(fp)
   18608:	e03eb915 	stw	zero,-1308(fp)
   1860c:	e0bdd317 	ldw	r2,-2228(fp)
   18610:	10800404 	addi	r2,r2,16
   18614:	10800017 	ldw	r2,0(r2)
   18618:	e0beba15 	stw	r2,-1304(fp)
   1861c:	e03ebb15 	stw	zero,-1300(fp)
   18620:	e1beba17 	ldw	r6,-1304(fp)
   18624:	e1febb17 	ldw	r7,-1300(fp)
   18628:	e13eb817 	ldw	r4,-1312(fp)
   1862c:	e17eb917 	ldw	r5,-1308(fp)
   18630:	00438e00 	call	438e0 <__muldi3>
   18634:	1009883a 	mov	r4,r2
   18638:	180b883a 	mov	r5,r3
   1863c:	2021883a 	mov	r16,r4
   18640:	2823883a 	mov	r17,r5
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)a[4] * b[9]
       + (uint64_t)a[5] * b[8]
       + (uint64_t)a[6] * b[7]
       + (uint64_t)a[7] * b[6]
       + (uint64_t)a[8] * b[5]
   18644:	e0bdd217 	ldw	r2,-2232(fp)
   18648:	10800804 	addi	r2,r2,32
   1864c:	10800017 	ldw	r2,0(r2)
   18650:	e0bebc15 	stw	r2,-1296(fp)
   18654:	e03ebd15 	stw	zero,-1292(fp)
   18658:	e0bdd317 	ldw	r2,-2228(fp)
   1865c:	10800504 	addi	r2,r2,20
   18660:	10800017 	ldw	r2,0(r2)
   18664:	e0bebe15 	stw	r2,-1288(fp)
   18668:	e03ebf15 	stw	zero,-1284(fp)
   1866c:	e1bebe17 	ldw	r6,-1288(fp)
   18670:	e1febf17 	ldw	r7,-1284(fp)
   18674:	e13ebc17 	ldw	r4,-1296(fp)
   18678:	e17ebd17 	ldw	r5,-1292(fp)
   1867c:	00438e00 	call	438e0 <__muldi3>
   18680:	100f883a 	mov	r7,r2
   18684:	1811883a 	mov	r8,r3
   18688:	380b883a 	mov	r5,r7
   1868c:	400d883a 	mov	r6,r8
       + (uint64_t)a[9] * b[4];
   18690:	8145883a 	add	r2,r16,r5
   18694:	1409803a 	cmpltu	r4,r2,r16
   18698:	8987883a 	add	r3,r17,r6
   1869c:	20c9883a 	add	r4,r4,r3
   186a0:	2007883a 	mov	r3,r4
   186a4:	100b883a 	mov	r5,r2
   186a8:	180d883a 	mov	r6,r3
   186ac:	9145883a 	add	r2,r18,r5
   186b0:	1489803a 	cmpltu	r4,r2,r18
   186b4:	9987883a 	add	r3,r19,r6
   186b8:	20c9883a 	add	r4,r4,r3
   186bc:	2007883a 	mov	r3,r4
   186c0:	100f883a 	mov	r7,r2
   186c4:	1811883a 	mov	r8,r3
       + (uint64_t)a[1] * b[2]
       + (uint64_t)a[2] * b[1]
       + (uint64_t)a[3] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)a[4] * b[9]
   186c8:	e13db217 	ldw	r4,-2360(fp)
   186cc:	e17db317 	ldw	r5,-2356(fp)
   186d0:	21c5883a 	add	r2,r4,r7
   186d4:	110d803a 	cmpltu	r6,r2,r4
   186d8:	2a07883a 	add	r3,r5,r8
   186dc:	30c9883a 	add	r4,r6,r3
   186e0:	2007883a 	mov	r3,r4
   186e4:	e0bdb215 	stw	r2,-2360(fp)
   186e8:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[5] * b[8]
       + (uint64_t)a[6] * b[7]
       + (uint64_t)a[7] * b[6]
       + (uint64_t)a[8] * b[5]
       + (uint64_t)a[9] * b[4];
    VERIFY_BITS(d, 63);
   186ec:	e0bdb217 	ldw	r2,-2360(fp)
   186f0:	e0fdb317 	ldw	r3,-2356(fp)
   186f4:	1804d7fa 	srli	r2,r3,31
   186f8:	10803fcc 	andi	r2,r2,255
   186fc:	10000d26 	beq	r2,zero,18734 <secp256k1_fe_mul_inner+0x26c0>
   18700:	d0a01617 	ldw	r2,-32680(gp)
   18704:	10c00317 	ldw	r3,12(r2)
   18708:	00800174 	movhi	r2,5
   1870c:	10933704 	addi	r2,r2,19676
   18710:	d8800015 	stw	r2,0(sp)
   18714:	01c09104 	movi	r7,580
   18718:	01800174 	movhi	r6,5
   1871c:	3191dd04 	addi	r6,r6,18292
   18720:	01400174 	movhi	r5,5
   18724:	2951e804 	addi	r5,r5,18336
   18728:	1809883a 	mov	r4,r3
   1872c:	00461000 	call	46100 <fprintf>
   18730:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    u3 = d & M; d >>= 26; c += u3 * R0;
   18734:	e0bdaf17 	ldw	r2,-2372(fp)
   18738:	e0bec015 	stw	r2,-1280(fp)
   1873c:	e03ec115 	stw	zero,-1276(fp)
   18740:	e0bdb217 	ldw	r2,-2360(fp)
   18744:	e0fec017 	ldw	r3,-1280(fp)
   18748:	10c4703a 	and	r2,r2,r3
   1874c:	e0bdc015 	stw	r2,-2304(fp)
   18750:	e0bdb317 	ldw	r2,-2356(fp)
   18754:	e13ec117 	ldw	r4,-1276(fp)
   18758:	1104703a 	and	r2,r2,r4
   1875c:	e0bdc115 	stw	r2,-2300(fp)
   18760:	e0bdb317 	ldw	r2,-2356(fp)
   18764:	100691ba 	slli	r3,r2,6
   18768:	e0bdb217 	ldw	r2,-2360(fp)
   1876c:	1004d6ba 	srli	r2,r2,26
   18770:	10c4b03a 	or	r2,r2,r3
   18774:	e0bdb215 	stw	r2,-2360(fp)
   18778:	e0bdb317 	ldw	r2,-2356(fp)
   1877c:	1004d6ba 	srli	r2,r2,26
   18780:	e0bdb315 	stw	r2,-2356(fp)
   18784:	e0bdb017 	ldw	r2,-2368(fp)
   18788:	e0bec215 	stw	r2,-1272(fp)
   1878c:	e03ec315 	stw	zero,-1268(fp)
   18790:	e1bdc017 	ldw	r6,-2304(fp)
   18794:	e1fdc117 	ldw	r7,-2300(fp)
   18798:	e13ec217 	ldw	r4,-1272(fp)
   1879c:	e17ec317 	ldw	r5,-1268(fp)
   187a0:	00438e00 	call	438e0 <__muldi3>
   187a4:	1009883a 	mov	r4,r2
   187a8:	180b883a 	mov	r5,r3
   187ac:	200f883a 	mov	r7,r4
   187b0:	2811883a 	mov	r8,r5
   187b4:	e13db517 	ldw	r4,-2348(fp)
   187b8:	e17db617 	ldw	r5,-2344(fp)
   187bc:	21c5883a 	add	r2,r4,r7
   187c0:	110d803a 	cmpltu	r6,r2,r4
   187c4:	2a07883a 	add	r3,r5,r8
   187c8:	30c9883a 	add	r4,r6,r3
   187cc:	2007883a 	mov	r3,r4
   187d0:	e0bdb515 	stw	r2,-2348(fp)
   187d4:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u3, 26);
   187d8:	e0bdc117 	ldw	r2,-2300(fp)
   187dc:	100691ba 	slli	r3,r2,6
   187e0:	e0bdc017 	ldw	r2,-2304(fp)
   187e4:	1004d6ba 	srli	r2,r2,26
   187e8:	e0bec415 	stw	r2,-1264(fp)
   187ec:	e1bec417 	ldw	r6,-1264(fp)
   187f0:	1986b03a 	or	r3,r3,r6
   187f4:	e0fec415 	stw	r3,-1264(fp)
   187f8:	e0bdc117 	ldw	r2,-2300(fp)
   187fc:	1004d6ba 	srli	r2,r2,26
   18800:	e0bec515 	stw	r2,-1260(fp)
   18804:	e1fec417 	ldw	r7,-1264(fp)
   18808:	e0fec517 	ldw	r3,-1260(fp)
   1880c:	38c4b03a 	or	r2,r7,r3
   18810:	1004c03a 	cmpne	r2,r2,zero
   18814:	10803fcc 	andi	r2,r2,255
   18818:	10000d26 	beq	r2,zero,18850 <secp256k1_fe_mul_inner+0x27dc>
   1881c:	d0a01617 	ldw	r2,-32680(gp)
   18820:	10c00317 	ldw	r3,12(r2)
   18824:	00800174 	movhi	r2,5
   18828:	1093c604 	addi	r2,r2,20248
   1882c:	d8800015 	stw	r2,0(sp)
   18830:	01c091c4 	movi	r7,583
   18834:	01800174 	movhi	r6,5
   18838:	3191dd04 	addi	r6,r6,18292
   1883c:	01400174 	movhi	r5,5
   18840:	2951e804 	addi	r5,r5,18336
   18844:	1809883a 	mov	r4,r3
   18848:	00461000 	call	46100 <fprintf>
   1884c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 37);
   18850:	e0bdb317 	ldw	r2,-2356(fp)
   18854:	1004d17a 	srli	r2,r2,5
   18858:	e0bec615 	stw	r2,-1256(fp)
   1885c:	e03ec715 	stw	zero,-1252(fp)
   18860:	e13ec617 	ldw	r4,-1256(fp)
   18864:	e1bec717 	ldw	r6,-1252(fp)
   18868:	2184b03a 	or	r2,r4,r6
   1886c:	1004c03a 	cmpne	r2,r2,zero
   18870:	10803fcc 	andi	r2,r2,255
   18874:	10000d26 	beq	r2,zero,188ac <secp256k1_fe_mul_inner+0x2838>
   18878:	d0a01617 	ldw	r2,-32680(gp)
   1887c:	10c00317 	ldw	r3,12(r2)
   18880:	00800174 	movhi	r2,5
   18884:	10934d04 	addi	r2,r2,19764
   18888:	d8800015 	stw	r2,0(sp)
   1888c:	01c09204 	movi	r7,584
   18890:	01800174 	movhi	r6,5
   18894:	3191dd04 	addi	r6,r6,18292
   18898:	01400174 	movhi	r5,5
   1889c:	2951e804 	addi	r5,r5,18336
   188a0:	1809883a 	mov	r4,r3
   188a4:	00461000 	call	46100 <fprintf>
   188a8:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u3 0 0 0 t9 0 0 0 0 0 c-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    t3 = c & M; c >>= 26; c += u3 * R1;
   188ac:	e0fdb517 	ldw	r3,-2348(fp)
   188b0:	e0bdaf17 	ldw	r2,-2372(fp)
   188b4:	1884703a 	and	r2,r3,r2
   188b8:	e0bdc215 	stw	r2,-2296(fp)
   188bc:	e0bdb617 	ldw	r2,-2344(fp)
   188c0:	100691ba 	slli	r3,r2,6
   188c4:	e0bdb517 	ldw	r2,-2348(fp)
   188c8:	1004d6ba 	srli	r2,r2,26
   188cc:	10c4b03a 	or	r2,r2,r3
   188d0:	e0bdb515 	stw	r2,-2348(fp)
   188d4:	e0bdb617 	ldw	r2,-2344(fp)
   188d8:	1004d6ba 	srli	r2,r2,26
   188dc:	e0bdb615 	stw	r2,-2344(fp)
   188e0:	e0bdb117 	ldw	r2,-2364(fp)
   188e4:	e0bec815 	stw	r2,-1248(fp)
   188e8:	e03ec915 	stw	zero,-1244(fp)
   188ec:	e1bdc017 	ldw	r6,-2304(fp)
   188f0:	e1fdc117 	ldw	r7,-2300(fp)
   188f4:	e13ec817 	ldw	r4,-1248(fp)
   188f8:	e17ec917 	ldw	r5,-1244(fp)
   188fc:	00438e00 	call	438e0 <__muldi3>
   18900:	1009883a 	mov	r4,r2
   18904:	180b883a 	mov	r5,r3
   18908:	200f883a 	mov	r7,r4
   1890c:	2811883a 	mov	r8,r5
   18910:	e13db517 	ldw	r4,-2348(fp)
   18914:	e17db617 	ldw	r5,-2344(fp)
   18918:	21c5883a 	add	r2,r4,r7
   1891c:	110d803a 	cmpltu	r6,r2,r4
   18920:	2a07883a 	add	r3,r5,r8
   18924:	30c9883a 	add	r4,r6,r3
   18928:	2007883a 	mov	r3,r4
   1892c:	e0bdb515 	stw	r2,-2348(fp)
   18930:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t3, 26);
   18934:	e0bdc217 	ldw	r2,-2296(fp)
   18938:	1004d6ba 	srli	r2,r2,26
   1893c:	1004c03a 	cmpne	r2,r2,zero
   18940:	10803fcc 	andi	r2,r2,255
   18944:	10000d26 	beq	r2,zero,1897c <secp256k1_fe_mul_inner+0x2908>
   18948:	d0a01617 	ldw	r2,-32680(gp)
   1894c:	10c00317 	ldw	r3,12(r2)
   18950:	00800174 	movhi	r2,5
   18954:	1093d104 	addi	r2,r2,20292
   18958:	d8800015 	stw	r2,0(sp)
   1895c:	01c09304 	movi	r7,588
   18960:	01800174 	movhi	r6,5
   18964:	3191dd04 	addi	r6,r6,18292
   18968:	01400174 	movhi	r5,5
   1896c:	2951e804 	addi	r5,r5,18336
   18970:	1809883a 	mov	r4,r3
   18974:	00461000 	call	46100 <fprintf>
   18978:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   1897c:	e0bdb617 	ldw	r2,-2344(fp)
   18980:	1004d1fa 	srli	r2,r2,7
   18984:	e0beca15 	stw	r2,-1240(fp)
   18988:	e03ecb15 	stw	zero,-1236(fp)
   1898c:	e1feca17 	ldw	r7,-1240(fp)
   18990:	e0fecb17 	ldw	r3,-1236(fp)
   18994:	38c4b03a 	or	r2,r7,r3
   18998:	1004c03a 	cmpne	r2,r2,zero
   1899c:	10803fcc 	andi	r2,r2,255
   189a0:	10000d26 	beq	r2,zero,189d8 <secp256k1_fe_mul_inner+0x2964>
   189a4:	d0a01617 	ldw	r2,-32680(gp)
   189a8:	10c00317 	ldw	r3,12(r2)
   189ac:	00800174 	movhi	r2,5
   189b0:	1093dc04 	addi	r2,r2,20336
   189b4:	d8800015 	stw	r2,0(sp)
   189b8:	01c09344 	movi	r7,589
   189bc:	01800174 	movhi	r6,5
   189c0:	3191dd04 	addi	r6,r6,18292
   189c4:	01400174 	movhi	r5,5
   189c8:	2951e804 	addi	r5,r5,18336
   189cc:	1809883a 	mov	r4,r3
   189d0:	00461000 	call	46100 <fprintf>
   189d4:	0045fd40 	call	45fd4 <abort>
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[4]
   189d8:	e0bdd217 	ldw	r2,-2232(fp)
   189dc:	10800017 	ldw	r2,0(r2)
   189e0:	e0becc15 	stw	r2,-1232(fp)
   189e4:	e03ecd15 	stw	zero,-1228(fp)
   189e8:	e0bdd317 	ldw	r2,-2228(fp)
   189ec:	10800404 	addi	r2,r2,16
   189f0:	10800017 	ldw	r2,0(r2)
   189f4:	e0bece15 	stw	r2,-1224(fp)
   189f8:	e03ecf15 	stw	zero,-1220(fp)
   189fc:	e1bece17 	ldw	r6,-1224(fp)
   18a00:	e1fecf17 	ldw	r7,-1220(fp)
   18a04:	e13ecc17 	ldw	r4,-1232(fp)
   18a08:	e17ecd17 	ldw	r5,-1228(fp)
   18a0c:	00438e00 	call	438e0 <__muldi3>
   18a10:	1009883a 	mov	r4,r2
   18a14:	180b883a 	mov	r5,r3
   18a18:	2021883a 	mov	r16,r4
   18a1c:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[3]
   18a20:	e0bdd217 	ldw	r2,-2232(fp)
   18a24:	10800104 	addi	r2,r2,4
   18a28:	10800017 	ldw	r2,0(r2)
   18a2c:	e0bed015 	stw	r2,-1216(fp)
   18a30:	e03ed115 	stw	zero,-1212(fp)
   18a34:	e0bdd317 	ldw	r2,-2228(fp)
   18a38:	10800304 	addi	r2,r2,12
   18a3c:	10800017 	ldw	r2,0(r2)
   18a40:	e0bed215 	stw	r2,-1208(fp)
   18a44:	e03ed315 	stw	zero,-1204(fp)
   18a48:	e1bed217 	ldw	r6,-1208(fp)
   18a4c:	e1fed317 	ldw	r7,-1204(fp)
   18a50:	e13ed017 	ldw	r4,-1216(fp)
   18a54:	e17ed117 	ldw	r5,-1212(fp)
   18a58:	00438e00 	call	438e0 <__muldi3>
   18a5c:	100f883a 	mov	r7,r2
   18a60:	1811883a 	mov	r8,r3
   18a64:	380b883a 	mov	r5,r7
   18a68:	400d883a 	mov	r6,r8
   18a6c:	8145883a 	add	r2,r16,r5
   18a70:	1409803a 	cmpltu	r4,r2,r16
   18a74:	8987883a 	add	r3,r17,r6
   18a78:	20c9883a 	add	r4,r4,r3
   18a7c:	2007883a 	mov	r3,r4
   18a80:	1025883a 	mov	r18,r2
   18a84:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[2]
       + (uint64_t)a[3] * b[1]
   18a88:	e0bdd217 	ldw	r2,-2232(fp)
   18a8c:	10800304 	addi	r2,r2,12
   18a90:	10800017 	ldw	r2,0(r2)
   18a94:	e0bed415 	stw	r2,-1200(fp)
   18a98:	e03ed515 	stw	zero,-1196(fp)
   18a9c:	e0bdd317 	ldw	r2,-2228(fp)
   18aa0:	10800104 	addi	r2,r2,4
   18aa4:	10800017 	ldw	r2,0(r2)
   18aa8:	e0bed615 	stw	r2,-1192(fp)
   18aac:	e03ed715 	stw	zero,-1188(fp)
   18ab0:	e1bed617 	ldw	r6,-1192(fp)
   18ab4:	e1fed717 	ldw	r7,-1188(fp)
   18ab8:	e13ed417 	ldw	r4,-1200(fp)
   18abc:	e17ed517 	ldw	r5,-1196(fp)
   18ac0:	00438e00 	call	438e0 <__muldi3>
   18ac4:	1009883a 	mov	r4,r2
   18ac8:	180b883a 	mov	r5,r3
   18acc:	2021883a 	mov	r16,r4
   18ad0:	2823883a 	mov	r17,r5
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[4]
       + (uint64_t)a[1] * b[3]
       + (uint64_t)a[2] * b[2]
   18ad4:	e0bdd217 	ldw	r2,-2232(fp)
   18ad8:	10800204 	addi	r2,r2,8
   18adc:	10800017 	ldw	r2,0(r2)
   18ae0:	e0bed815 	stw	r2,-1184(fp)
   18ae4:	e03ed915 	stw	zero,-1180(fp)
   18ae8:	e0bdd317 	ldw	r2,-2228(fp)
   18aec:	10800204 	addi	r2,r2,8
   18af0:	10800017 	ldw	r2,0(r2)
   18af4:	e0beda15 	stw	r2,-1176(fp)
   18af8:	e03edb15 	stw	zero,-1172(fp)
   18afc:	e1beda17 	ldw	r6,-1176(fp)
   18b00:	e1fedb17 	ldw	r7,-1172(fp)
   18b04:	e13ed817 	ldw	r4,-1184(fp)
   18b08:	e17ed917 	ldw	r5,-1180(fp)
   18b0c:	00438e00 	call	438e0 <__muldi3>
   18b10:	100f883a 	mov	r7,r2
   18b14:	1811883a 	mov	r8,r3
   18b18:	380b883a 	mov	r5,r7
   18b1c:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[1]
   18b20:	8145883a 	add	r2,r16,r5
   18b24:	1409803a 	cmpltu	r4,r2,r16
   18b28:	8987883a 	add	r3,r17,r6
   18b2c:	20c9883a 	add	r4,r4,r3
   18b30:	2007883a 	mov	r3,r4
   18b34:	100b883a 	mov	r5,r2
   18b38:	180d883a 	mov	r6,r3
   18b3c:	9145883a 	add	r2,r18,r5
   18b40:	1489803a 	cmpltu	r4,r2,r18
   18b44:	9987883a 	add	r3,r19,r6
   18b48:	20c9883a 	add	r4,r4,r3
   18b4c:	2007883a 	mov	r3,r4
   18b50:	1021883a 	mov	r16,r2
   18b54:	1823883a 	mov	r17,r3
       + (uint64_t)a[4] * b[0];
   18b58:	e0bdd217 	ldw	r2,-2232(fp)
   18b5c:	10800404 	addi	r2,r2,16
   18b60:	10800017 	ldw	r2,0(r2)
   18b64:	e0bedc15 	stw	r2,-1168(fp)
   18b68:	e03edd15 	stw	zero,-1164(fp)
   18b6c:	e0bdd317 	ldw	r2,-2228(fp)
   18b70:	10800017 	ldw	r2,0(r2)
   18b74:	e0bede15 	stw	r2,-1160(fp)
   18b78:	e03edf15 	stw	zero,-1156(fp)
   18b7c:	e1bede17 	ldw	r6,-1160(fp)
   18b80:	e1fedf17 	ldw	r7,-1156(fp)
   18b84:	e13edc17 	ldw	r4,-1168(fp)
   18b88:	e17edd17 	ldw	r5,-1164(fp)
   18b8c:	00438e00 	call	438e0 <__muldi3>
   18b90:	100f883a 	mov	r7,r2
   18b94:	1811883a 	mov	r8,r3
   18b98:	380b883a 	mov	r5,r7
   18b9c:	400d883a 	mov	r6,r8
   18ba0:	8145883a 	add	r2,r16,r5
   18ba4:	1409803a 	cmpltu	r4,r2,r16
   18ba8:	8987883a 	add	r3,r17,r6
   18bac:	20c9883a 	add	r4,r4,r3
   18bb0:	2007883a 	mov	r3,r4
   18bb4:	100f883a 	mov	r7,r2
   18bb8:	1811883a 	mov	r8,r3
    VERIFY_BITS(t3, 26);
    VERIFY_BITS(c, 39);
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[4]
   18bbc:	e13db517 	ldw	r4,-2348(fp)
   18bc0:	e17db617 	ldw	r5,-2344(fp)
   18bc4:	21c5883a 	add	r2,r4,r7
   18bc8:	110d803a 	cmpltu	r6,r2,r4
   18bcc:	2a07883a 	add	r3,r5,r8
   18bd0:	30c9883a 	add	r4,r6,r3
   18bd4:	2007883a 	mov	r3,r4
   18bd8:	e0bdb515 	stw	r2,-2348(fp)
   18bdc:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[3]
       + (uint64_t)a[2] * b[2]
       + (uint64_t)a[3] * b[1]
       + (uint64_t)a[4] * b[0];
    VERIFY_BITS(c, 63);
   18be0:	e0bdb517 	ldw	r2,-2348(fp)
   18be4:	e0fdb617 	ldw	r3,-2344(fp)
   18be8:	1804d7fa 	srli	r2,r3,31
   18bec:	10803fcc 	andi	r2,r2,255
   18bf0:	10000d26 	beq	r2,zero,18c28 <secp256k1_fe_mul_inner+0x2bb4>
   18bf4:	d0a01617 	ldw	r2,-32680(gp)
   18bf8:	10c00317 	ldw	r3,12(r2)
   18bfc:	00800174 	movhi	r2,5
   18c00:	10938f04 	addi	r2,r2,20028
   18c04:	d8800015 	stw	r2,0(sp)
   18c08:	01c09584 	movi	r7,598
   18c0c:	01800174 	movhi	r6,5
   18c10:	3191dd04 	addi	r6,r6,18292
   18c14:	01400174 	movhi	r5,5
   18c18:	2951e804 	addi	r5,r5,18336
   18c1c:	1809883a 	mov	r4,r3
   18c20:	00461000 	call	46100 <fprintf>
   18c24:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[5] * b[9]
   18c28:	e0bdd217 	ldw	r2,-2232(fp)
   18c2c:	10800504 	addi	r2,r2,20
   18c30:	10800017 	ldw	r2,0(r2)
   18c34:	e0bee015 	stw	r2,-1152(fp)
   18c38:	e03ee115 	stw	zero,-1148(fp)
   18c3c:	e0bdd317 	ldw	r2,-2228(fp)
   18c40:	10800904 	addi	r2,r2,36
   18c44:	10800017 	ldw	r2,0(r2)
   18c48:	e0bee215 	stw	r2,-1144(fp)
   18c4c:	e03ee315 	stw	zero,-1140(fp)
   18c50:	e1bee217 	ldw	r6,-1144(fp)
   18c54:	e1fee317 	ldw	r7,-1140(fp)
   18c58:	e13ee017 	ldw	r4,-1152(fp)
   18c5c:	e17ee117 	ldw	r5,-1148(fp)
   18c60:	00438e00 	call	438e0 <__muldi3>
   18c64:	1009883a 	mov	r4,r2
   18c68:	180b883a 	mov	r5,r3
   18c6c:	2021883a 	mov	r16,r4
   18c70:	2823883a 	mov	r17,r5
       + (uint64_t)a[6] * b[8]
   18c74:	e0bdd217 	ldw	r2,-2232(fp)
   18c78:	10800604 	addi	r2,r2,24
   18c7c:	10800017 	ldw	r2,0(r2)
   18c80:	e0bee415 	stw	r2,-1136(fp)
   18c84:	e03ee515 	stw	zero,-1132(fp)
   18c88:	e0bdd317 	ldw	r2,-2228(fp)
   18c8c:	10800804 	addi	r2,r2,32
   18c90:	10800017 	ldw	r2,0(r2)
   18c94:	e0bee615 	stw	r2,-1128(fp)
   18c98:	e03ee715 	stw	zero,-1124(fp)
   18c9c:	e1bee617 	ldw	r6,-1128(fp)
   18ca0:	e1fee717 	ldw	r7,-1124(fp)
   18ca4:	e13ee417 	ldw	r4,-1136(fp)
   18ca8:	e17ee517 	ldw	r5,-1132(fp)
   18cac:	00438e00 	call	438e0 <__muldi3>
   18cb0:	100f883a 	mov	r7,r2
   18cb4:	1811883a 	mov	r8,r3
   18cb8:	380b883a 	mov	r5,r7
   18cbc:	400d883a 	mov	r6,r8
   18cc0:	8145883a 	add	r2,r16,r5
   18cc4:	1409803a 	cmpltu	r4,r2,r16
   18cc8:	8987883a 	add	r3,r17,r6
   18ccc:	20c9883a 	add	r4,r4,r3
   18cd0:	2007883a 	mov	r3,r4
   18cd4:	1025883a 	mov	r18,r2
   18cd8:	1827883a 	mov	r19,r3
       + (uint64_t)a[7] * b[7]
       + (uint64_t)a[8] * b[6]
   18cdc:	e0bdd217 	ldw	r2,-2232(fp)
   18ce0:	10800804 	addi	r2,r2,32
   18ce4:	10800017 	ldw	r2,0(r2)
   18ce8:	e0bee815 	stw	r2,-1120(fp)
   18cec:	e03ee915 	stw	zero,-1116(fp)
   18cf0:	e0bdd317 	ldw	r2,-2228(fp)
   18cf4:	10800604 	addi	r2,r2,24
   18cf8:	10800017 	ldw	r2,0(r2)
   18cfc:	e0beea15 	stw	r2,-1112(fp)
   18d00:	e03eeb15 	stw	zero,-1108(fp)
   18d04:	e1beea17 	ldw	r6,-1112(fp)
   18d08:	e1feeb17 	ldw	r7,-1108(fp)
   18d0c:	e13ee817 	ldw	r4,-1120(fp)
   18d10:	e17ee917 	ldw	r5,-1116(fp)
   18d14:	00438e00 	call	438e0 <__muldi3>
   18d18:	1009883a 	mov	r4,r2
   18d1c:	180b883a 	mov	r5,r3
   18d20:	2021883a 	mov	r16,r4
   18d24:	2823883a 	mov	r17,r5
       + (uint64_t)a[4] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[5] * b[9]
       + (uint64_t)a[6] * b[8]
       + (uint64_t)a[7] * b[7]
   18d28:	e0bdd217 	ldw	r2,-2232(fp)
   18d2c:	10800704 	addi	r2,r2,28
   18d30:	10800017 	ldw	r2,0(r2)
   18d34:	e0beec15 	stw	r2,-1104(fp)
   18d38:	e03eed15 	stw	zero,-1100(fp)
   18d3c:	e0bdd317 	ldw	r2,-2228(fp)
   18d40:	10800704 	addi	r2,r2,28
   18d44:	10800017 	ldw	r2,0(r2)
   18d48:	e0beee15 	stw	r2,-1096(fp)
   18d4c:	e03eef15 	stw	zero,-1092(fp)
   18d50:	e1beee17 	ldw	r6,-1096(fp)
   18d54:	e1feef17 	ldw	r7,-1092(fp)
   18d58:	e13eec17 	ldw	r4,-1104(fp)
   18d5c:	e17eed17 	ldw	r5,-1100(fp)
   18d60:	00438e00 	call	438e0 <__muldi3>
   18d64:	100f883a 	mov	r7,r2
   18d68:	1811883a 	mov	r8,r3
   18d6c:	380b883a 	mov	r5,r7
   18d70:	400d883a 	mov	r6,r8
       + (uint64_t)a[8] * b[6]
   18d74:	8145883a 	add	r2,r16,r5
   18d78:	1409803a 	cmpltu	r4,r2,r16
   18d7c:	8987883a 	add	r3,r17,r6
   18d80:	20c9883a 	add	r4,r4,r3
   18d84:	2007883a 	mov	r3,r4
   18d88:	100b883a 	mov	r5,r2
   18d8c:	180d883a 	mov	r6,r3
   18d90:	9145883a 	add	r2,r18,r5
   18d94:	1489803a 	cmpltu	r4,r2,r18
   18d98:	9987883a 	add	r3,r19,r6
   18d9c:	20c9883a 	add	r4,r4,r3
   18da0:	2007883a 	mov	r3,r4
   18da4:	1021883a 	mov	r16,r2
   18da8:	1823883a 	mov	r17,r3
       + (uint64_t)a[9] * b[5];
   18dac:	e0bdd217 	ldw	r2,-2232(fp)
   18db0:	10800904 	addi	r2,r2,36
   18db4:	10800017 	ldw	r2,0(r2)
   18db8:	e0bef015 	stw	r2,-1088(fp)
   18dbc:	e03ef115 	stw	zero,-1084(fp)
   18dc0:	e0bdd317 	ldw	r2,-2228(fp)
   18dc4:	10800504 	addi	r2,r2,20
   18dc8:	10800017 	ldw	r2,0(r2)
   18dcc:	e0bef215 	stw	r2,-1080(fp)
   18dd0:	e03ef315 	stw	zero,-1076(fp)
   18dd4:	e1bef217 	ldw	r6,-1080(fp)
   18dd8:	e1fef317 	ldw	r7,-1076(fp)
   18ddc:	e13ef017 	ldw	r4,-1088(fp)
   18de0:	e17ef117 	ldw	r5,-1084(fp)
   18de4:	00438e00 	call	438e0 <__muldi3>
   18de8:	100f883a 	mov	r7,r2
   18dec:	1811883a 	mov	r8,r3
   18df0:	380b883a 	mov	r5,r7
   18df4:	400d883a 	mov	r6,r8
   18df8:	8145883a 	add	r2,r16,r5
   18dfc:	1409803a 	cmpltu	r4,r2,r16
   18e00:	8987883a 	add	r3,r17,r6
   18e04:	20c9883a 	add	r4,r4,r3
   18e08:	2007883a 	mov	r3,r4
   18e0c:	100f883a 	mov	r7,r2
   18e10:	1811883a 	mov	r8,r3
       + (uint64_t)a[2] * b[2]
       + (uint64_t)a[3] * b[1]
       + (uint64_t)a[4] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[5] * b[9]
   18e14:	e13db217 	ldw	r4,-2360(fp)
   18e18:	e17db317 	ldw	r5,-2356(fp)
   18e1c:	21c5883a 	add	r2,r4,r7
   18e20:	110d803a 	cmpltu	r6,r2,r4
   18e24:	2a07883a 	add	r3,r5,r8
   18e28:	30c9883a 	add	r4,r6,r3
   18e2c:	2007883a 	mov	r3,r4
   18e30:	e0bdb215 	stw	r2,-2360(fp)
   18e34:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[6] * b[8]
       + (uint64_t)a[7] * b[7]
       + (uint64_t)a[8] * b[6]
       + (uint64_t)a[9] * b[5];
    VERIFY_BITS(d, 62);
   18e38:	e0bdb317 	ldw	r2,-2356(fp)
   18e3c:	1004d7ba 	srli	r2,r2,30
   18e40:	e0bef415 	stw	r2,-1072(fp)
   18e44:	e03ef515 	stw	zero,-1068(fp)
   18e48:	e13ef417 	ldw	r4,-1072(fp)
   18e4c:	e1bef517 	ldw	r6,-1068(fp)
   18e50:	2184b03a 	or	r2,r4,r6
   18e54:	1004c03a 	cmpne	r2,r2,zero
   18e58:	10803fcc 	andi	r2,r2,255
   18e5c:	10000d26 	beq	r2,zero,18e94 <secp256k1_fe_mul_inner+0x2e20>
   18e60:	d0a01617 	ldw	r2,-32680(gp)
   18e64:	10c00317 	ldw	r3,12(r2)
   18e68:	00800174 	movhi	r2,5
   18e6c:	1093e704 	addi	r2,r2,20380
   18e70:	d8800015 	stw	r2,0(sp)
   18e74:	01c09744 	movi	r7,605
   18e78:	01800174 	movhi	r6,5
   18e7c:	3191dd04 	addi	r6,r6,18292
   18e80:	01400174 	movhi	r5,5
   18e84:	2951e804 	addi	r5,r5,18336
   18e88:	1809883a 	mov	r4,r3
   18e8c:	00461000 	call	46100 <fprintf>
   18e90:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    u4 = d & M; d >>= 26; c += u4 * R0;
   18e94:	e0bdaf17 	ldw	r2,-2372(fp)
   18e98:	e0bef615 	stw	r2,-1064(fp)
   18e9c:	e03ef715 	stw	zero,-1060(fp)
   18ea0:	e0bdb217 	ldw	r2,-2360(fp)
   18ea4:	e1fef617 	ldw	r7,-1064(fp)
   18ea8:	11c4703a 	and	r2,r2,r7
   18eac:	e0bdc315 	stw	r2,-2292(fp)
   18eb0:	e0bdb317 	ldw	r2,-2356(fp)
   18eb4:	e0fef717 	ldw	r3,-1060(fp)
   18eb8:	10c4703a 	and	r2,r2,r3
   18ebc:	e0bdc415 	stw	r2,-2288(fp)
   18ec0:	e0bdb317 	ldw	r2,-2356(fp)
   18ec4:	100691ba 	slli	r3,r2,6
   18ec8:	e0bdb217 	ldw	r2,-2360(fp)
   18ecc:	1004d6ba 	srli	r2,r2,26
   18ed0:	10c4b03a 	or	r2,r2,r3
   18ed4:	e0bdb215 	stw	r2,-2360(fp)
   18ed8:	e0bdb317 	ldw	r2,-2356(fp)
   18edc:	1004d6ba 	srli	r2,r2,26
   18ee0:	e0bdb315 	stw	r2,-2356(fp)
   18ee4:	e0bdb017 	ldw	r2,-2368(fp)
   18ee8:	e0bef815 	stw	r2,-1056(fp)
   18eec:	e03ef915 	stw	zero,-1052(fp)
   18ef0:	e1bdc317 	ldw	r6,-2292(fp)
   18ef4:	e1fdc417 	ldw	r7,-2288(fp)
   18ef8:	e13ef817 	ldw	r4,-1056(fp)
   18efc:	e17ef917 	ldw	r5,-1052(fp)
   18f00:	00438e00 	call	438e0 <__muldi3>
   18f04:	1009883a 	mov	r4,r2
   18f08:	180b883a 	mov	r5,r3
   18f0c:	200f883a 	mov	r7,r4
   18f10:	2811883a 	mov	r8,r5
   18f14:	e13db517 	ldw	r4,-2348(fp)
   18f18:	e17db617 	ldw	r5,-2344(fp)
   18f1c:	21c5883a 	add	r2,r4,r7
   18f20:	110d803a 	cmpltu	r6,r2,r4
   18f24:	2a07883a 	add	r3,r5,r8
   18f28:	30c9883a 	add	r4,r6,r3
   18f2c:	2007883a 	mov	r3,r4
   18f30:	e0bdb515 	stw	r2,-2348(fp)
   18f34:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u4, 26);
   18f38:	e0bdc417 	ldw	r2,-2288(fp)
   18f3c:	100691ba 	slli	r3,r2,6
   18f40:	e0bdc317 	ldw	r2,-2292(fp)
   18f44:	1004d6ba 	srli	r2,r2,26
   18f48:	e0befa15 	stw	r2,-1048(fp)
   18f4c:	e13efa17 	ldw	r4,-1048(fp)
   18f50:	1906b03a 	or	r3,r3,r4
   18f54:	e0fefa15 	stw	r3,-1048(fp)
   18f58:	e0bdc417 	ldw	r2,-2288(fp)
   18f5c:	1004d6ba 	srli	r2,r2,26
   18f60:	e0befb15 	stw	r2,-1044(fp)
   18f64:	e1befa17 	ldw	r6,-1048(fp)
   18f68:	e1fefb17 	ldw	r7,-1044(fp)
   18f6c:	31c4b03a 	or	r2,r6,r7
   18f70:	1004c03a 	cmpne	r2,r2,zero
   18f74:	10803fcc 	andi	r2,r2,255
   18f78:	10000d26 	beq	r2,zero,18fb0 <secp256k1_fe_mul_inner+0x2f3c>
   18f7c:	d0a01617 	ldw	r2,-32680(gp)
   18f80:	10c00317 	ldw	r3,12(r2)
   18f84:	00800174 	movhi	r2,5
   18f88:	1093f204 	addi	r2,r2,20424
   18f8c:	d8800015 	stw	r2,0(sp)
   18f90:	01c09804 	movi	r7,608
   18f94:	01800174 	movhi	r6,5
   18f98:	3191dd04 	addi	r6,r6,18292
   18f9c:	01400174 	movhi	r5,5
   18fa0:	2951e804 	addi	r5,r5,18336
   18fa4:	1809883a 	mov	r4,r3
   18fa8:	00461000 	call	46100 <fprintf>
   18fac:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 36);
   18fb0:	e0bdb317 	ldw	r2,-2356(fp)
   18fb4:	1004d13a 	srli	r2,r2,4
   18fb8:	e0befc15 	stw	r2,-1040(fp)
   18fbc:	e03efd15 	stw	zero,-1036(fp)
   18fc0:	e0fefc17 	ldw	r3,-1040(fp)
   18fc4:	e13efd17 	ldw	r4,-1036(fp)
   18fc8:	1904b03a 	or	r2,r3,r4
   18fcc:	1004c03a 	cmpne	r2,r2,zero
   18fd0:	10803fcc 	andi	r2,r2,255
   18fd4:	10000d26 	beq	r2,zero,1900c <secp256k1_fe_mul_inner+0x2f98>
   18fd8:	d0a01617 	ldw	r2,-32680(gp)
   18fdc:	10c00317 	ldw	r3,12(r2)
   18fe0:	00800174 	movhi	r2,5
   18fe4:	1093fd04 	addi	r2,r2,20468
   18fe8:	d8800015 	stw	r2,0(sp)
   18fec:	01c09844 	movi	r7,609
   18ff0:	01800174 	movhi	r6,5
   18ff4:	3191dd04 	addi	r6,r6,18292
   18ff8:	01400174 	movhi	r5,5
   18ffc:	2951e804 	addi	r5,r5,18336
   19000:	1809883a 	mov	r4,r3
   19004:	00461000 	call	46100 <fprintf>
   19008:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u4 0 0 0 0 t9 0 0 0 0 c-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    t4 = c & M; c >>= 26; c += u4 * R1;
   1900c:	e0fdb517 	ldw	r3,-2348(fp)
   19010:	e0bdaf17 	ldw	r2,-2372(fp)
   19014:	1884703a 	and	r2,r3,r2
   19018:	e0bdc515 	stw	r2,-2284(fp)
   1901c:	e0bdb617 	ldw	r2,-2344(fp)
   19020:	100691ba 	slli	r3,r2,6
   19024:	e0bdb517 	ldw	r2,-2348(fp)
   19028:	1004d6ba 	srli	r2,r2,26
   1902c:	10c4b03a 	or	r2,r2,r3
   19030:	e0bdb515 	stw	r2,-2348(fp)
   19034:	e0bdb617 	ldw	r2,-2344(fp)
   19038:	1004d6ba 	srli	r2,r2,26
   1903c:	e0bdb615 	stw	r2,-2344(fp)
   19040:	e0bdb117 	ldw	r2,-2364(fp)
   19044:	e0befe15 	stw	r2,-1032(fp)
   19048:	e03eff15 	stw	zero,-1028(fp)
   1904c:	e1bdc317 	ldw	r6,-2292(fp)
   19050:	e1fdc417 	ldw	r7,-2288(fp)
   19054:	e13efe17 	ldw	r4,-1032(fp)
   19058:	e17eff17 	ldw	r5,-1028(fp)
   1905c:	00438e00 	call	438e0 <__muldi3>
   19060:	1009883a 	mov	r4,r2
   19064:	180b883a 	mov	r5,r3
   19068:	200f883a 	mov	r7,r4
   1906c:	2811883a 	mov	r8,r5
   19070:	e13db517 	ldw	r4,-2348(fp)
   19074:	e17db617 	ldw	r5,-2344(fp)
   19078:	21c5883a 	add	r2,r4,r7
   1907c:	110d803a 	cmpltu	r6,r2,r4
   19080:	2a07883a 	add	r3,r5,r8
   19084:	30c9883a 	add	r4,r6,r3
   19088:	2007883a 	mov	r3,r4
   1908c:	e0bdb515 	stw	r2,-2348(fp)
   19090:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t4, 26);
   19094:	e0bdc517 	ldw	r2,-2284(fp)
   19098:	1004d6ba 	srli	r2,r2,26
   1909c:	1004c03a 	cmpne	r2,r2,zero
   190a0:	10803fcc 	andi	r2,r2,255
   190a4:	10000d26 	beq	r2,zero,190dc <secp256k1_fe_mul_inner+0x3068>
   190a8:	d0a01617 	ldw	r2,-32680(gp)
   190ac:	10c00317 	ldw	r3,12(r2)
   190b0:	00800174 	movhi	r2,5
   190b4:	10940804 	addi	r2,r2,20512
   190b8:	d8800015 	stw	r2,0(sp)
   190bc:	01c09944 	movi	r7,613
   190c0:	01800174 	movhi	r6,5
   190c4:	3191dd04 	addi	r6,r6,18292
   190c8:	01400174 	movhi	r5,5
   190cc:	2951e804 	addi	r5,r5,18336
   190d0:	1809883a 	mov	r4,r3
   190d4:	00461000 	call	46100 <fprintf>
   190d8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   190dc:	e0bdb617 	ldw	r2,-2344(fp)
   190e0:	1004d1fa 	srli	r2,r2,7
   190e4:	e0bf0015 	stw	r2,-1024(fp)
   190e8:	e03f0115 	stw	zero,-1020(fp)
   190ec:	e1bf0017 	ldw	r6,-1024(fp)
   190f0:	e1ff0117 	ldw	r7,-1020(fp)
   190f4:	31c4b03a 	or	r2,r6,r7
   190f8:	1004c03a 	cmpne	r2,r2,zero
   190fc:	10803fcc 	andi	r2,r2,255
   19100:	10000d26 	beq	r2,zero,19138 <secp256k1_fe_mul_inner+0x30c4>
   19104:	d0a01617 	ldw	r2,-32680(gp)
   19108:	10c00317 	ldw	r3,12(r2)
   1910c:	00800174 	movhi	r2,5
   19110:	1093dc04 	addi	r2,r2,20336
   19114:	d8800015 	stw	r2,0(sp)
   19118:	01c09984 	movi	r7,614
   1911c:	01800174 	movhi	r6,5
   19120:	3191dd04 	addi	r6,r6,18292
   19124:	01400174 	movhi	r5,5
   19128:	2951e804 	addi	r5,r5,18336
   1912c:	1809883a 	mov	r4,r3
   19130:	00461000 	call	46100 <fprintf>
   19134:	0045fd40 	call	45fd4 <abort>
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[5]
   19138:	e0bdd217 	ldw	r2,-2232(fp)
   1913c:	10800017 	ldw	r2,0(r2)
   19140:	e0bf0215 	stw	r2,-1016(fp)
   19144:	e03f0315 	stw	zero,-1012(fp)
   19148:	e0bdd317 	ldw	r2,-2228(fp)
   1914c:	10800504 	addi	r2,r2,20
   19150:	10800017 	ldw	r2,0(r2)
   19154:	e0bf0415 	stw	r2,-1008(fp)
   19158:	e03f0515 	stw	zero,-1004(fp)
   1915c:	e1bf0417 	ldw	r6,-1008(fp)
   19160:	e1ff0517 	ldw	r7,-1004(fp)
   19164:	e13f0217 	ldw	r4,-1016(fp)
   19168:	e17f0317 	ldw	r5,-1012(fp)
   1916c:	00438e00 	call	438e0 <__muldi3>
   19170:	1009883a 	mov	r4,r2
   19174:	180b883a 	mov	r5,r3
   19178:	2021883a 	mov	r16,r4
   1917c:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[4]
   19180:	e0bdd217 	ldw	r2,-2232(fp)
   19184:	10800104 	addi	r2,r2,4
   19188:	10800017 	ldw	r2,0(r2)
   1918c:	e0bf0615 	stw	r2,-1000(fp)
   19190:	e03f0715 	stw	zero,-996(fp)
   19194:	e0bdd317 	ldw	r2,-2228(fp)
   19198:	10800404 	addi	r2,r2,16
   1919c:	10800017 	ldw	r2,0(r2)
   191a0:	e0bf0815 	stw	r2,-992(fp)
   191a4:	e03f0915 	stw	zero,-988(fp)
   191a8:	e1bf0817 	ldw	r6,-992(fp)
   191ac:	e1ff0917 	ldw	r7,-988(fp)
   191b0:	e13f0617 	ldw	r4,-1000(fp)
   191b4:	e17f0717 	ldw	r5,-996(fp)
   191b8:	00438e00 	call	438e0 <__muldi3>
   191bc:	100f883a 	mov	r7,r2
   191c0:	1811883a 	mov	r8,r3
   191c4:	380b883a 	mov	r5,r7
   191c8:	400d883a 	mov	r6,r8
   191cc:	8145883a 	add	r2,r16,r5
   191d0:	1409803a 	cmpltu	r4,r2,r16
   191d4:	8987883a 	add	r3,r17,r6
   191d8:	20c9883a 	add	r4,r4,r3
   191dc:	2007883a 	mov	r3,r4
   191e0:	1025883a 	mov	r18,r2
   191e4:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[3]
       + (uint64_t)a[3] * b[2]
   191e8:	e0bdd217 	ldw	r2,-2232(fp)
   191ec:	10800304 	addi	r2,r2,12
   191f0:	10800017 	ldw	r2,0(r2)
   191f4:	e0bf0a15 	stw	r2,-984(fp)
   191f8:	e03f0b15 	stw	zero,-980(fp)
   191fc:	e0bdd317 	ldw	r2,-2228(fp)
   19200:	10800204 	addi	r2,r2,8
   19204:	10800017 	ldw	r2,0(r2)
   19208:	e0bf0c15 	stw	r2,-976(fp)
   1920c:	e03f0d15 	stw	zero,-972(fp)
   19210:	e1bf0c17 	ldw	r6,-976(fp)
   19214:	e1ff0d17 	ldw	r7,-972(fp)
   19218:	e13f0a17 	ldw	r4,-984(fp)
   1921c:	e17f0b17 	ldw	r5,-980(fp)
   19220:	00438e00 	call	438e0 <__muldi3>
   19224:	1009883a 	mov	r4,r2
   19228:	180b883a 	mov	r5,r3
   1922c:	2021883a 	mov	r16,r4
   19230:	2823883a 	mov	r17,r5
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[5]
       + (uint64_t)a[1] * b[4]
       + (uint64_t)a[2] * b[3]
   19234:	e0bdd217 	ldw	r2,-2232(fp)
   19238:	10800204 	addi	r2,r2,8
   1923c:	10800017 	ldw	r2,0(r2)
   19240:	e0bf0e15 	stw	r2,-968(fp)
   19244:	e03f0f15 	stw	zero,-964(fp)
   19248:	e0bdd317 	ldw	r2,-2228(fp)
   1924c:	10800304 	addi	r2,r2,12
   19250:	10800017 	ldw	r2,0(r2)
   19254:	e0bf1015 	stw	r2,-960(fp)
   19258:	e03f1115 	stw	zero,-956(fp)
   1925c:	e1bf1017 	ldw	r6,-960(fp)
   19260:	e1ff1117 	ldw	r7,-956(fp)
   19264:	e13f0e17 	ldw	r4,-968(fp)
   19268:	e17f0f17 	ldw	r5,-964(fp)
   1926c:	00438e00 	call	438e0 <__muldi3>
   19270:	100f883a 	mov	r7,r2
   19274:	1811883a 	mov	r8,r3
   19278:	380b883a 	mov	r5,r7
   1927c:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[2]
   19280:	8145883a 	add	r2,r16,r5
   19284:	1409803a 	cmpltu	r4,r2,r16
   19288:	8987883a 	add	r3,r17,r6
   1928c:	20c9883a 	add	r4,r4,r3
   19290:	2007883a 	mov	r3,r4
   19294:	100b883a 	mov	r5,r2
   19298:	180d883a 	mov	r6,r3
   1929c:	9145883a 	add	r2,r18,r5
   192a0:	1489803a 	cmpltu	r4,r2,r18
   192a4:	9987883a 	add	r3,r19,r6
   192a8:	20c9883a 	add	r4,r4,r3
   192ac:	2007883a 	mov	r3,r4
   192b0:	1025883a 	mov	r18,r2
   192b4:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[1]
       + (uint64_t)a[5] * b[0];
   192b8:	e0bdd217 	ldw	r2,-2232(fp)
   192bc:	10800504 	addi	r2,r2,20
   192c0:	10800017 	ldw	r2,0(r2)
   192c4:	e0bf1215 	stw	r2,-952(fp)
   192c8:	e03f1315 	stw	zero,-948(fp)
   192cc:	e0bdd317 	ldw	r2,-2228(fp)
   192d0:	10800017 	ldw	r2,0(r2)
   192d4:	e0bf1415 	stw	r2,-944(fp)
   192d8:	e03f1515 	stw	zero,-940(fp)
   192dc:	e1bf1417 	ldw	r6,-944(fp)
   192e0:	e1ff1517 	ldw	r7,-940(fp)
   192e4:	e13f1217 	ldw	r4,-952(fp)
   192e8:	e17f1317 	ldw	r5,-948(fp)
   192ec:	00438e00 	call	438e0 <__muldi3>
   192f0:	1009883a 	mov	r4,r2
   192f4:	180b883a 	mov	r5,r3
   192f8:	2021883a 	mov	r16,r4
   192fc:	2823883a 	mov	r17,r5

    c += (uint64_t)a[0] * b[5]
       + (uint64_t)a[1] * b[4]
       + (uint64_t)a[2] * b[3]
       + (uint64_t)a[3] * b[2]
       + (uint64_t)a[4] * b[1]
   19300:	e0bdd217 	ldw	r2,-2232(fp)
   19304:	10800404 	addi	r2,r2,16
   19308:	10800017 	ldw	r2,0(r2)
   1930c:	e0bf1615 	stw	r2,-936(fp)
   19310:	e03f1715 	stw	zero,-932(fp)
   19314:	e0bdd317 	ldw	r2,-2228(fp)
   19318:	10800104 	addi	r2,r2,4
   1931c:	10800017 	ldw	r2,0(r2)
   19320:	e0bf1815 	stw	r2,-928(fp)
   19324:	e03f1915 	stw	zero,-924(fp)
   19328:	e1bf1817 	ldw	r6,-928(fp)
   1932c:	e1ff1917 	ldw	r7,-924(fp)
   19330:	e13f1617 	ldw	r4,-936(fp)
   19334:	e17f1717 	ldw	r5,-932(fp)
   19338:	00438e00 	call	438e0 <__muldi3>
   1933c:	100f883a 	mov	r7,r2
   19340:	1811883a 	mov	r8,r3
   19344:	380b883a 	mov	r5,r7
   19348:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[0];
   1934c:	8145883a 	add	r2,r16,r5
   19350:	1409803a 	cmpltu	r4,r2,r16
   19354:	8987883a 	add	r3,r17,r6
   19358:	20c9883a 	add	r4,r4,r3
   1935c:	2007883a 	mov	r3,r4
   19360:	100b883a 	mov	r5,r2
   19364:	180d883a 	mov	r6,r3
   19368:	9145883a 	add	r2,r18,r5
   1936c:	1489803a 	cmpltu	r4,r2,r18
   19370:	9987883a 	add	r3,r19,r6
   19374:	20c9883a 	add	r4,r4,r3
   19378:	2007883a 	mov	r3,r4
   1937c:	100f883a 	mov	r7,r2
   19380:	1811883a 	mov	r8,r3
    VERIFY_BITS(t4, 26);
    VERIFY_BITS(c, 39);
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[5]
   19384:	e13db517 	ldw	r4,-2348(fp)
   19388:	e17db617 	ldw	r5,-2344(fp)
   1938c:	21c5883a 	add	r2,r4,r7
   19390:	110d803a 	cmpltu	r6,r2,r4
   19394:	2a07883a 	add	r3,r5,r8
   19398:	30c9883a 	add	r4,r6,r3
   1939c:	2007883a 	mov	r3,r4
   193a0:	e0bdb515 	stw	r2,-2348(fp)
   193a4:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[1] * b[4]
       + (uint64_t)a[2] * b[3]
       + (uint64_t)a[3] * b[2]
       + (uint64_t)a[4] * b[1]
       + (uint64_t)a[5] * b[0];
    VERIFY_BITS(c, 63);
   193a8:	e0bdb517 	ldw	r2,-2348(fp)
   193ac:	e0fdb617 	ldw	r3,-2344(fp)
   193b0:	1804d7fa 	srli	r2,r3,31
   193b4:	10803fcc 	andi	r2,r2,255
   193b8:	10000d26 	beq	r2,zero,193f0 <secp256k1_fe_mul_inner+0x337c>
   193bc:	d0a01617 	ldw	r2,-32680(gp)
   193c0:	10c00317 	ldw	r3,12(r2)
   193c4:	00800174 	movhi	r2,5
   193c8:	10938f04 	addi	r2,r2,20028
   193cc:	d8800015 	stw	r2,0(sp)
   193d0:	01c09c04 	movi	r7,624
   193d4:	01800174 	movhi	r6,5
   193d8:	3191dd04 	addi	r6,r6,18292
   193dc:	01400174 	movhi	r5,5
   193e0:	2951e804 	addi	r5,r5,18336
   193e4:	1809883a 	mov	r4,r3
   193e8:	00461000 	call	46100 <fprintf>
   193ec:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[6] * b[9]
   193f0:	e0bdd217 	ldw	r2,-2232(fp)
   193f4:	10800604 	addi	r2,r2,24
   193f8:	10800017 	ldw	r2,0(r2)
   193fc:	e0bf1a15 	stw	r2,-920(fp)
   19400:	e03f1b15 	stw	zero,-916(fp)
   19404:	e0bdd317 	ldw	r2,-2228(fp)
   19408:	10800904 	addi	r2,r2,36
   1940c:	10800017 	ldw	r2,0(r2)
   19410:	e0bf1c15 	stw	r2,-912(fp)
   19414:	e03f1d15 	stw	zero,-908(fp)
   19418:	e1bf1c17 	ldw	r6,-912(fp)
   1941c:	e1ff1d17 	ldw	r7,-908(fp)
   19420:	e13f1a17 	ldw	r4,-920(fp)
   19424:	e17f1b17 	ldw	r5,-916(fp)
   19428:	00438e00 	call	438e0 <__muldi3>
   1942c:	1009883a 	mov	r4,r2
   19430:	180b883a 	mov	r5,r3
   19434:	2021883a 	mov	r16,r4
   19438:	2823883a 	mov	r17,r5
       + (uint64_t)a[7] * b[8]
   1943c:	e0bdd217 	ldw	r2,-2232(fp)
   19440:	10800704 	addi	r2,r2,28
   19444:	10800017 	ldw	r2,0(r2)
   19448:	e0bf1e15 	stw	r2,-904(fp)
   1944c:	e03f1f15 	stw	zero,-900(fp)
   19450:	e0bdd317 	ldw	r2,-2228(fp)
   19454:	10800804 	addi	r2,r2,32
   19458:	10800017 	ldw	r2,0(r2)
   1945c:	e0bf2015 	stw	r2,-896(fp)
   19460:	e03f2115 	stw	zero,-892(fp)
   19464:	e1bf2017 	ldw	r6,-896(fp)
   19468:	e1ff2117 	ldw	r7,-892(fp)
   1946c:	e13f1e17 	ldw	r4,-904(fp)
   19470:	e17f1f17 	ldw	r5,-900(fp)
   19474:	00438e00 	call	438e0 <__muldi3>
   19478:	100f883a 	mov	r7,r2
   1947c:	1811883a 	mov	r8,r3
   19480:	380b883a 	mov	r5,r7
   19484:	400d883a 	mov	r6,r8
   19488:	8145883a 	add	r2,r16,r5
   1948c:	1409803a 	cmpltu	r4,r2,r16
   19490:	8987883a 	add	r3,r17,r6
   19494:	20c9883a 	add	r4,r4,r3
   19498:	2007883a 	mov	r3,r4
   1949c:	1025883a 	mov	r18,r2
   194a0:	1827883a 	mov	r19,r3
       + (uint64_t)a[8] * b[7]
       + (uint64_t)a[9] * b[6];
   194a4:	e0bdd217 	ldw	r2,-2232(fp)
   194a8:	10800904 	addi	r2,r2,36
   194ac:	10800017 	ldw	r2,0(r2)
   194b0:	e0bf2215 	stw	r2,-888(fp)
   194b4:	e03f2315 	stw	zero,-884(fp)
   194b8:	e0bdd317 	ldw	r2,-2228(fp)
   194bc:	10800604 	addi	r2,r2,24
   194c0:	10800017 	ldw	r2,0(r2)
   194c4:	e0bf2415 	stw	r2,-880(fp)
   194c8:	e03f2515 	stw	zero,-876(fp)
   194cc:	e1bf2417 	ldw	r6,-880(fp)
   194d0:	e1ff2517 	ldw	r7,-876(fp)
   194d4:	e13f2217 	ldw	r4,-888(fp)
   194d8:	e17f2317 	ldw	r5,-884(fp)
   194dc:	00438e00 	call	438e0 <__muldi3>
   194e0:	1009883a 	mov	r4,r2
   194e4:	180b883a 	mov	r5,r3
   194e8:	2021883a 	mov	r16,r4
   194ec:	2823883a 	mov	r17,r5
       + (uint64_t)a[5] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[6] * b[9]
       + (uint64_t)a[7] * b[8]
       + (uint64_t)a[8] * b[7]
   194f0:	e0bdd217 	ldw	r2,-2232(fp)
   194f4:	10800804 	addi	r2,r2,32
   194f8:	10800017 	ldw	r2,0(r2)
   194fc:	e0bf2615 	stw	r2,-872(fp)
   19500:	e03f2715 	stw	zero,-868(fp)
   19504:	e0bdd317 	ldw	r2,-2228(fp)
   19508:	10800704 	addi	r2,r2,28
   1950c:	10800017 	ldw	r2,0(r2)
   19510:	e0bf2815 	stw	r2,-864(fp)
   19514:	e03f2915 	stw	zero,-860(fp)
   19518:	e1bf2817 	ldw	r6,-864(fp)
   1951c:	e1ff2917 	ldw	r7,-860(fp)
   19520:	e13f2617 	ldw	r4,-872(fp)
   19524:	e17f2717 	ldw	r5,-868(fp)
   19528:	00438e00 	call	438e0 <__muldi3>
   1952c:	100f883a 	mov	r7,r2
   19530:	1811883a 	mov	r8,r3
   19534:	380b883a 	mov	r5,r7
   19538:	400d883a 	mov	r6,r8
       + (uint64_t)a[9] * b[6];
   1953c:	8145883a 	add	r2,r16,r5
   19540:	1409803a 	cmpltu	r4,r2,r16
   19544:	8987883a 	add	r3,r17,r6
   19548:	20c9883a 	add	r4,r4,r3
   1954c:	2007883a 	mov	r3,r4
   19550:	100b883a 	mov	r5,r2
   19554:	180d883a 	mov	r6,r3
   19558:	9145883a 	add	r2,r18,r5
   1955c:	1489803a 	cmpltu	r4,r2,r18
   19560:	9987883a 	add	r3,r19,r6
   19564:	20c9883a 	add	r4,r4,r3
   19568:	2007883a 	mov	r3,r4
   1956c:	100f883a 	mov	r7,r2
   19570:	1811883a 	mov	r8,r3
       + (uint64_t)a[3] * b[2]
       + (uint64_t)a[4] * b[1]
       + (uint64_t)a[5] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[6] * b[9]
   19574:	e13db217 	ldw	r4,-2360(fp)
   19578:	e17db317 	ldw	r5,-2356(fp)
   1957c:	21c5883a 	add	r2,r4,r7
   19580:	110d803a 	cmpltu	r6,r2,r4
   19584:	2a07883a 	add	r3,r5,r8
   19588:	30c9883a 	add	r4,r6,r3
   1958c:	2007883a 	mov	r3,r4
   19590:	e0bdb215 	stw	r2,-2360(fp)
   19594:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[7] * b[8]
       + (uint64_t)a[8] * b[7]
       + (uint64_t)a[9] * b[6];
    VERIFY_BITS(d, 62);
   19598:	e0bdb317 	ldw	r2,-2356(fp)
   1959c:	1004d7ba 	srli	r2,r2,30
   195a0:	e0bf2a15 	stw	r2,-856(fp)
   195a4:	e03f2b15 	stw	zero,-852(fp)
   195a8:	e0ff2a17 	ldw	r3,-856(fp)
   195ac:	e13f2b17 	ldw	r4,-852(fp)
   195b0:	1904b03a 	or	r2,r3,r4
   195b4:	1004c03a 	cmpne	r2,r2,zero
   195b8:	10803fcc 	andi	r2,r2,255
   195bc:	10000d26 	beq	r2,zero,195f4 <secp256k1_fe_mul_inner+0x3580>
   195c0:	d0a01617 	ldw	r2,-32680(gp)
   195c4:	10c00317 	ldw	r3,12(r2)
   195c8:	00800174 	movhi	r2,5
   195cc:	1093e704 	addi	r2,r2,20380
   195d0:	d8800015 	stw	r2,0(sp)
   195d4:	01c09d84 	movi	r7,630
   195d8:	01800174 	movhi	r6,5
   195dc:	3191dd04 	addi	r6,r6,18292
   195e0:	01400174 	movhi	r5,5
   195e4:	2951e804 	addi	r5,r5,18336
   195e8:	1809883a 	mov	r4,r3
   195ec:	00461000 	call	46100 <fprintf>
   195f0:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    u5 = d & M; d >>= 26; c += u5 * R0;
   195f4:	e0bdaf17 	ldw	r2,-2372(fp)
   195f8:	e0bf2c15 	stw	r2,-848(fp)
   195fc:	e03f2d15 	stw	zero,-844(fp)
   19600:	e0bdb217 	ldw	r2,-2360(fp)
   19604:	e1bf2c17 	ldw	r6,-848(fp)
   19608:	1184703a 	and	r2,r2,r6
   1960c:	e0bdc615 	stw	r2,-2280(fp)
   19610:	e0bdb317 	ldw	r2,-2356(fp)
   19614:	e1ff2d17 	ldw	r7,-844(fp)
   19618:	11c4703a 	and	r2,r2,r7
   1961c:	e0bdc715 	stw	r2,-2276(fp)
   19620:	e0bdb317 	ldw	r2,-2356(fp)
   19624:	100691ba 	slli	r3,r2,6
   19628:	e0bdb217 	ldw	r2,-2360(fp)
   1962c:	1004d6ba 	srli	r2,r2,26
   19630:	10c4b03a 	or	r2,r2,r3
   19634:	e0bdb215 	stw	r2,-2360(fp)
   19638:	e0bdb317 	ldw	r2,-2356(fp)
   1963c:	1004d6ba 	srli	r2,r2,26
   19640:	e0bdb315 	stw	r2,-2356(fp)
   19644:	e0bdb017 	ldw	r2,-2368(fp)
   19648:	e0bf2e15 	stw	r2,-840(fp)
   1964c:	e03f2f15 	stw	zero,-836(fp)
   19650:	e1bdc617 	ldw	r6,-2280(fp)
   19654:	e1fdc717 	ldw	r7,-2276(fp)
   19658:	e13f2e17 	ldw	r4,-840(fp)
   1965c:	e17f2f17 	ldw	r5,-836(fp)
   19660:	00438e00 	call	438e0 <__muldi3>
   19664:	1009883a 	mov	r4,r2
   19668:	180b883a 	mov	r5,r3
   1966c:	200f883a 	mov	r7,r4
   19670:	2811883a 	mov	r8,r5
   19674:	e13db517 	ldw	r4,-2348(fp)
   19678:	e17db617 	ldw	r5,-2344(fp)
   1967c:	21c5883a 	add	r2,r4,r7
   19680:	110d803a 	cmpltu	r6,r2,r4
   19684:	2a07883a 	add	r3,r5,r8
   19688:	30c9883a 	add	r4,r6,r3
   1968c:	2007883a 	mov	r3,r4
   19690:	e0bdb515 	stw	r2,-2348(fp)
   19694:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u5, 26);
   19698:	e0bdc717 	ldw	r2,-2276(fp)
   1969c:	100691ba 	slli	r3,r2,6
   196a0:	e0bdc617 	ldw	r2,-2280(fp)
   196a4:	1004d6ba 	srli	r2,r2,26
   196a8:	e0bf3015 	stw	r2,-832(fp)
   196ac:	e0bf3017 	ldw	r2,-832(fp)
   196b0:	1886b03a 	or	r3,r3,r2
   196b4:	e0ff3015 	stw	r3,-832(fp)
   196b8:	e0bdc717 	ldw	r2,-2276(fp)
   196bc:	1004d6ba 	srli	r2,r2,26
   196c0:	e0bf3115 	stw	r2,-828(fp)
   196c4:	e0ff3017 	ldw	r3,-832(fp)
   196c8:	e13f3117 	ldw	r4,-828(fp)
   196cc:	1904b03a 	or	r2,r3,r4
   196d0:	1004c03a 	cmpne	r2,r2,zero
   196d4:	10803fcc 	andi	r2,r2,255
   196d8:	10000d26 	beq	r2,zero,19710 <secp256k1_fe_mul_inner+0x369c>
   196dc:	d0a01617 	ldw	r2,-32680(gp)
   196e0:	10c00317 	ldw	r3,12(r2)
   196e4:	00800174 	movhi	r2,5
   196e8:	10941304 	addi	r2,r2,20556
   196ec:	d8800015 	stw	r2,0(sp)
   196f0:	01c09e44 	movi	r7,633
   196f4:	01800174 	movhi	r6,5
   196f8:	3191dd04 	addi	r6,r6,18292
   196fc:	01400174 	movhi	r5,5
   19700:	2951e804 	addi	r5,r5,18336
   19704:	1809883a 	mov	r4,r3
   19708:	00461000 	call	46100 <fprintf>
   1970c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 36);
   19710:	e0bdb317 	ldw	r2,-2356(fp)
   19714:	1004d13a 	srli	r2,r2,4
   19718:	e0bf3215 	stw	r2,-824(fp)
   1971c:	e03f3315 	stw	zero,-820(fp)
   19720:	e1bf3217 	ldw	r6,-824(fp)
   19724:	e1ff3317 	ldw	r7,-820(fp)
   19728:	31c4b03a 	or	r2,r6,r7
   1972c:	1004c03a 	cmpne	r2,r2,zero
   19730:	10803fcc 	andi	r2,r2,255
   19734:	10000d26 	beq	r2,zero,1976c <secp256k1_fe_mul_inner+0x36f8>
   19738:	d0a01617 	ldw	r2,-32680(gp)
   1973c:	10c00317 	ldw	r3,12(r2)
   19740:	00800174 	movhi	r2,5
   19744:	1093fd04 	addi	r2,r2,20468
   19748:	d8800015 	stw	r2,0(sp)
   1974c:	01c09e84 	movi	r7,634
   19750:	01800174 	movhi	r6,5
   19754:	3191dd04 	addi	r6,r6,18292
   19758:	01400174 	movhi	r5,5
   1975c:	2951e804 	addi	r5,r5,18336
   19760:	1809883a 	mov	r4,r3
   19764:	00461000 	call	46100 <fprintf>
   19768:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u5 0 0 0 0 0 t9 0 0 0 c-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    t5 = c & M; c >>= 26; c += u5 * R1;
   1976c:	e0fdb517 	ldw	r3,-2348(fp)
   19770:	e0bdaf17 	ldw	r2,-2372(fp)
   19774:	1884703a 	and	r2,r3,r2
   19778:	e0bdc815 	stw	r2,-2272(fp)
   1977c:	e0bdb617 	ldw	r2,-2344(fp)
   19780:	100691ba 	slli	r3,r2,6
   19784:	e0bdb517 	ldw	r2,-2348(fp)
   19788:	1004d6ba 	srli	r2,r2,26
   1978c:	10c4b03a 	or	r2,r2,r3
   19790:	e0bdb515 	stw	r2,-2348(fp)
   19794:	e0bdb617 	ldw	r2,-2344(fp)
   19798:	1004d6ba 	srli	r2,r2,26
   1979c:	e0bdb615 	stw	r2,-2344(fp)
   197a0:	e0bdb117 	ldw	r2,-2364(fp)
   197a4:	e0bf3415 	stw	r2,-816(fp)
   197a8:	e03f3515 	stw	zero,-812(fp)
   197ac:	e1bdc617 	ldw	r6,-2280(fp)
   197b0:	e1fdc717 	ldw	r7,-2276(fp)
   197b4:	e13f3417 	ldw	r4,-816(fp)
   197b8:	e17f3517 	ldw	r5,-812(fp)
   197bc:	00438e00 	call	438e0 <__muldi3>
   197c0:	1009883a 	mov	r4,r2
   197c4:	180b883a 	mov	r5,r3
   197c8:	200f883a 	mov	r7,r4
   197cc:	2811883a 	mov	r8,r5
   197d0:	e13db517 	ldw	r4,-2348(fp)
   197d4:	e17db617 	ldw	r5,-2344(fp)
   197d8:	21c5883a 	add	r2,r4,r7
   197dc:	110d803a 	cmpltu	r6,r2,r4
   197e0:	2a07883a 	add	r3,r5,r8
   197e4:	30c9883a 	add	r4,r6,r3
   197e8:	2007883a 	mov	r3,r4
   197ec:	e0bdb515 	stw	r2,-2348(fp)
   197f0:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t5, 26);
   197f4:	e0bdc817 	ldw	r2,-2272(fp)
   197f8:	1004d6ba 	srli	r2,r2,26
   197fc:	1004c03a 	cmpne	r2,r2,zero
   19800:	10803fcc 	andi	r2,r2,255
   19804:	10000d26 	beq	r2,zero,1983c <secp256k1_fe_mul_inner+0x37c8>
   19808:	d0a01617 	ldw	r2,-32680(gp)
   1980c:	10c00317 	ldw	r3,12(r2)
   19810:	00800174 	movhi	r2,5
   19814:	10941e04 	addi	r2,r2,20600
   19818:	d8800015 	stw	r2,0(sp)
   1981c:	01c09f84 	movi	r7,638
   19820:	01800174 	movhi	r6,5
   19824:	3191dd04 	addi	r6,r6,18292
   19828:	01400174 	movhi	r5,5
   1982c:	2951e804 	addi	r5,r5,18336
   19830:	1809883a 	mov	r4,r3
   19834:	00461000 	call	46100 <fprintf>
   19838:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   1983c:	e0bdb617 	ldw	r2,-2344(fp)
   19840:	1004d1fa 	srli	r2,r2,7
   19844:	e0bf3615 	stw	r2,-808(fp)
   19848:	e03f3715 	stw	zero,-804(fp)
   1984c:	e0ff3617 	ldw	r3,-808(fp)
   19850:	e13f3717 	ldw	r4,-804(fp)
   19854:	1904b03a 	or	r2,r3,r4
   19858:	1004c03a 	cmpne	r2,r2,zero
   1985c:	10803fcc 	andi	r2,r2,255
   19860:	10000d26 	beq	r2,zero,19898 <secp256k1_fe_mul_inner+0x3824>
   19864:	d0a01617 	ldw	r2,-32680(gp)
   19868:	10c00317 	ldw	r3,12(r2)
   1986c:	00800174 	movhi	r2,5
   19870:	1093dc04 	addi	r2,r2,20336
   19874:	d8800015 	stw	r2,0(sp)
   19878:	01c09fc4 	movi	r7,639
   1987c:	01800174 	movhi	r6,5
   19880:	3191dd04 	addi	r6,r6,18292
   19884:	01400174 	movhi	r5,5
   19888:	2951e804 	addi	r5,r5,18336
   1988c:	1809883a 	mov	r4,r3
   19890:	00461000 	call	46100 <fprintf>
   19894:	0045fd40 	call	45fd4 <abort>
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[6]
   19898:	e0bdd217 	ldw	r2,-2232(fp)
   1989c:	10800017 	ldw	r2,0(r2)
   198a0:	e0bf3815 	stw	r2,-800(fp)
   198a4:	e03f3915 	stw	zero,-796(fp)
   198a8:	e0bdd317 	ldw	r2,-2228(fp)
   198ac:	10800604 	addi	r2,r2,24
   198b0:	10800017 	ldw	r2,0(r2)
   198b4:	e0bf3a15 	stw	r2,-792(fp)
   198b8:	e03f3b15 	stw	zero,-788(fp)
   198bc:	e1bf3a17 	ldw	r6,-792(fp)
   198c0:	e1ff3b17 	ldw	r7,-788(fp)
   198c4:	e13f3817 	ldw	r4,-800(fp)
   198c8:	e17f3917 	ldw	r5,-796(fp)
   198cc:	00438e00 	call	438e0 <__muldi3>
   198d0:	1009883a 	mov	r4,r2
   198d4:	180b883a 	mov	r5,r3
   198d8:	2021883a 	mov	r16,r4
   198dc:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[5]
   198e0:	e0bdd217 	ldw	r2,-2232(fp)
   198e4:	10800104 	addi	r2,r2,4
   198e8:	10800017 	ldw	r2,0(r2)
   198ec:	e0bf3c15 	stw	r2,-784(fp)
   198f0:	e03f3d15 	stw	zero,-780(fp)
   198f4:	e0bdd317 	ldw	r2,-2228(fp)
   198f8:	10800504 	addi	r2,r2,20
   198fc:	10800017 	ldw	r2,0(r2)
   19900:	e0bf3e15 	stw	r2,-776(fp)
   19904:	e03f3f15 	stw	zero,-772(fp)
   19908:	e1bf3e17 	ldw	r6,-776(fp)
   1990c:	e1ff3f17 	ldw	r7,-772(fp)
   19910:	e13f3c17 	ldw	r4,-784(fp)
   19914:	e17f3d17 	ldw	r5,-780(fp)
   19918:	00438e00 	call	438e0 <__muldi3>
   1991c:	100f883a 	mov	r7,r2
   19920:	1811883a 	mov	r8,r3
   19924:	380b883a 	mov	r5,r7
   19928:	400d883a 	mov	r6,r8
   1992c:	8145883a 	add	r2,r16,r5
   19930:	1409803a 	cmpltu	r4,r2,r16
   19934:	8987883a 	add	r3,r17,r6
   19938:	20c9883a 	add	r4,r4,r3
   1993c:	2007883a 	mov	r3,r4
   19940:	1025883a 	mov	r18,r2
   19944:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[4]
       + (uint64_t)a[3] * b[3]
   19948:	e0bdd217 	ldw	r2,-2232(fp)
   1994c:	10800304 	addi	r2,r2,12
   19950:	10800017 	ldw	r2,0(r2)
   19954:	e0bf4015 	stw	r2,-768(fp)
   19958:	e03f4115 	stw	zero,-764(fp)
   1995c:	e0bdd317 	ldw	r2,-2228(fp)
   19960:	10800304 	addi	r2,r2,12
   19964:	10800017 	ldw	r2,0(r2)
   19968:	e0bf4215 	stw	r2,-760(fp)
   1996c:	e03f4315 	stw	zero,-756(fp)
   19970:	e1bf4217 	ldw	r6,-760(fp)
   19974:	e1ff4317 	ldw	r7,-756(fp)
   19978:	e13f4017 	ldw	r4,-768(fp)
   1997c:	e17f4117 	ldw	r5,-764(fp)
   19980:	00438e00 	call	438e0 <__muldi3>
   19984:	1009883a 	mov	r4,r2
   19988:	180b883a 	mov	r5,r3
   1998c:	2021883a 	mov	r16,r4
   19990:	2823883a 	mov	r17,r5
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[6]
       + (uint64_t)a[1] * b[5]
       + (uint64_t)a[2] * b[4]
   19994:	e0bdd217 	ldw	r2,-2232(fp)
   19998:	10800204 	addi	r2,r2,8
   1999c:	10800017 	ldw	r2,0(r2)
   199a0:	e0bf4415 	stw	r2,-752(fp)
   199a4:	e03f4515 	stw	zero,-748(fp)
   199a8:	e0bdd317 	ldw	r2,-2228(fp)
   199ac:	10800404 	addi	r2,r2,16
   199b0:	10800017 	ldw	r2,0(r2)
   199b4:	e0bf4615 	stw	r2,-744(fp)
   199b8:	e03f4715 	stw	zero,-740(fp)
   199bc:	e1bf4617 	ldw	r6,-744(fp)
   199c0:	e1ff4717 	ldw	r7,-740(fp)
   199c4:	e13f4417 	ldw	r4,-752(fp)
   199c8:	e17f4517 	ldw	r5,-748(fp)
   199cc:	00438e00 	call	438e0 <__muldi3>
   199d0:	100f883a 	mov	r7,r2
   199d4:	1811883a 	mov	r8,r3
   199d8:	380b883a 	mov	r5,r7
   199dc:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[3]
   199e0:	8145883a 	add	r2,r16,r5
   199e4:	1409803a 	cmpltu	r4,r2,r16
   199e8:	8987883a 	add	r3,r17,r6
   199ec:	20c9883a 	add	r4,r4,r3
   199f0:	2007883a 	mov	r3,r4
   199f4:	100b883a 	mov	r5,r2
   199f8:	180d883a 	mov	r6,r3
   199fc:	9145883a 	add	r2,r18,r5
   19a00:	1489803a 	cmpltu	r4,r2,r18
   19a04:	9987883a 	add	r3,r19,r6
   19a08:	20c9883a 	add	r4,r4,r3
   19a0c:	2007883a 	mov	r3,r4
   19a10:	1025883a 	mov	r18,r2
   19a14:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[2]
       + (uint64_t)a[5] * b[1]
   19a18:	e0bdd217 	ldw	r2,-2232(fp)
   19a1c:	10800504 	addi	r2,r2,20
   19a20:	10800017 	ldw	r2,0(r2)
   19a24:	e0bf4815 	stw	r2,-736(fp)
   19a28:	e03f4915 	stw	zero,-732(fp)
   19a2c:	e0bdd317 	ldw	r2,-2228(fp)
   19a30:	10800104 	addi	r2,r2,4
   19a34:	10800017 	ldw	r2,0(r2)
   19a38:	e0bf4a15 	stw	r2,-728(fp)
   19a3c:	e03f4b15 	stw	zero,-724(fp)
   19a40:	e1bf4a17 	ldw	r6,-728(fp)
   19a44:	e1ff4b17 	ldw	r7,-724(fp)
   19a48:	e13f4817 	ldw	r4,-736(fp)
   19a4c:	e17f4917 	ldw	r5,-732(fp)
   19a50:	00438e00 	call	438e0 <__muldi3>
   19a54:	1009883a 	mov	r4,r2
   19a58:	180b883a 	mov	r5,r3
   19a5c:	2021883a 	mov	r16,r4
   19a60:	2823883a 	mov	r17,r5

    c += (uint64_t)a[0] * b[6]
       + (uint64_t)a[1] * b[5]
       + (uint64_t)a[2] * b[4]
       + (uint64_t)a[3] * b[3]
       + (uint64_t)a[4] * b[2]
   19a64:	e0bdd217 	ldw	r2,-2232(fp)
   19a68:	10800404 	addi	r2,r2,16
   19a6c:	10800017 	ldw	r2,0(r2)
   19a70:	e0bf4c15 	stw	r2,-720(fp)
   19a74:	e03f4d15 	stw	zero,-716(fp)
   19a78:	e0bdd317 	ldw	r2,-2228(fp)
   19a7c:	10800204 	addi	r2,r2,8
   19a80:	10800017 	ldw	r2,0(r2)
   19a84:	e0bf4e15 	stw	r2,-712(fp)
   19a88:	e03f4f15 	stw	zero,-708(fp)
   19a8c:	e1bf4e17 	ldw	r6,-712(fp)
   19a90:	e1ff4f17 	ldw	r7,-708(fp)
   19a94:	e13f4c17 	ldw	r4,-720(fp)
   19a98:	e17f4d17 	ldw	r5,-716(fp)
   19a9c:	00438e00 	call	438e0 <__muldi3>
   19aa0:	100f883a 	mov	r7,r2
   19aa4:	1811883a 	mov	r8,r3
   19aa8:	380b883a 	mov	r5,r7
   19aac:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[1]
   19ab0:	8145883a 	add	r2,r16,r5
   19ab4:	1409803a 	cmpltu	r4,r2,r16
   19ab8:	8987883a 	add	r3,r17,r6
   19abc:	20c9883a 	add	r4,r4,r3
   19ac0:	2007883a 	mov	r3,r4
   19ac4:	100b883a 	mov	r5,r2
   19ac8:	180d883a 	mov	r6,r3
   19acc:	9145883a 	add	r2,r18,r5
   19ad0:	1489803a 	cmpltu	r4,r2,r18
   19ad4:	9987883a 	add	r3,r19,r6
   19ad8:	20c9883a 	add	r4,r4,r3
   19adc:	2007883a 	mov	r3,r4
   19ae0:	1021883a 	mov	r16,r2
   19ae4:	1823883a 	mov	r17,r3
       + (uint64_t)a[6] * b[0];
   19ae8:	e0bdd217 	ldw	r2,-2232(fp)
   19aec:	10800604 	addi	r2,r2,24
   19af0:	10800017 	ldw	r2,0(r2)
   19af4:	e0bf5015 	stw	r2,-704(fp)
   19af8:	e03f5115 	stw	zero,-700(fp)
   19afc:	e0bdd317 	ldw	r2,-2228(fp)
   19b00:	10800017 	ldw	r2,0(r2)
   19b04:	e0bf5215 	stw	r2,-696(fp)
   19b08:	e03f5315 	stw	zero,-692(fp)
   19b0c:	e1bf5217 	ldw	r6,-696(fp)
   19b10:	e1ff5317 	ldw	r7,-692(fp)
   19b14:	e13f5017 	ldw	r4,-704(fp)
   19b18:	e17f5117 	ldw	r5,-700(fp)
   19b1c:	00438e00 	call	438e0 <__muldi3>
   19b20:	100f883a 	mov	r7,r2
   19b24:	1811883a 	mov	r8,r3
   19b28:	380b883a 	mov	r5,r7
   19b2c:	400d883a 	mov	r6,r8
   19b30:	8145883a 	add	r2,r16,r5
   19b34:	1409803a 	cmpltu	r4,r2,r16
   19b38:	8987883a 	add	r3,r17,r6
   19b3c:	20c9883a 	add	r4,r4,r3
   19b40:	2007883a 	mov	r3,r4
   19b44:	100f883a 	mov	r7,r2
   19b48:	1811883a 	mov	r8,r3
    VERIFY_BITS(t5, 26);
    VERIFY_BITS(c, 39);
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[6]
   19b4c:	e13db517 	ldw	r4,-2348(fp)
   19b50:	e17db617 	ldw	r5,-2344(fp)
   19b54:	21c5883a 	add	r2,r4,r7
   19b58:	110d803a 	cmpltu	r6,r2,r4
   19b5c:	2a07883a 	add	r3,r5,r8
   19b60:	30c9883a 	add	r4,r6,r3
   19b64:	2007883a 	mov	r3,r4
   19b68:	e0bdb515 	stw	r2,-2348(fp)
   19b6c:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[2] * b[4]
       + (uint64_t)a[3] * b[3]
       + (uint64_t)a[4] * b[2]
       + (uint64_t)a[5] * b[1]
       + (uint64_t)a[6] * b[0];
    VERIFY_BITS(c, 63);
   19b70:	e0bdb517 	ldw	r2,-2348(fp)
   19b74:	e0fdb617 	ldw	r3,-2344(fp)
   19b78:	1804d7fa 	srli	r2,r3,31
   19b7c:	10803fcc 	andi	r2,r2,255
   19b80:	10000d26 	beq	r2,zero,19bb8 <secp256k1_fe_mul_inner+0x3b44>
   19b84:	d0a01617 	ldw	r2,-32680(gp)
   19b88:	10c00317 	ldw	r3,12(r2)
   19b8c:	00800174 	movhi	r2,5
   19b90:	10938f04 	addi	r2,r2,20028
   19b94:	d8800015 	stw	r2,0(sp)
   19b98:	01c0a284 	movi	r7,650
   19b9c:	01800174 	movhi	r6,5
   19ba0:	3191dd04 	addi	r6,r6,18292
   19ba4:	01400174 	movhi	r5,5
   19ba8:	2951e804 	addi	r5,r5,18336
   19bac:	1809883a 	mov	r4,r3
   19bb0:	00461000 	call	46100 <fprintf>
   19bb4:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[7] * b[9]
   19bb8:	e0bdd217 	ldw	r2,-2232(fp)
   19bbc:	10800704 	addi	r2,r2,28
   19bc0:	10800017 	ldw	r2,0(r2)
   19bc4:	e0bf5415 	stw	r2,-688(fp)
   19bc8:	e03f5515 	stw	zero,-684(fp)
   19bcc:	e0bdd317 	ldw	r2,-2228(fp)
   19bd0:	10800904 	addi	r2,r2,36
   19bd4:	10800017 	ldw	r2,0(r2)
   19bd8:	e0bf5615 	stw	r2,-680(fp)
   19bdc:	e03f5715 	stw	zero,-676(fp)
   19be0:	e1bf5617 	ldw	r6,-680(fp)
   19be4:	e1ff5717 	ldw	r7,-676(fp)
   19be8:	e13f5417 	ldw	r4,-688(fp)
   19bec:	e17f5517 	ldw	r5,-684(fp)
   19bf0:	00438e00 	call	438e0 <__muldi3>
   19bf4:	1009883a 	mov	r4,r2
   19bf8:	180b883a 	mov	r5,r3
   19bfc:	2021883a 	mov	r16,r4
   19c00:	2823883a 	mov	r17,r5
       + (uint64_t)a[8] * b[8]
   19c04:	e0bdd217 	ldw	r2,-2232(fp)
   19c08:	10800804 	addi	r2,r2,32
   19c0c:	10800017 	ldw	r2,0(r2)
   19c10:	e0bf5815 	stw	r2,-672(fp)
   19c14:	e03f5915 	stw	zero,-668(fp)
   19c18:	e0bdd317 	ldw	r2,-2228(fp)
   19c1c:	10800804 	addi	r2,r2,32
   19c20:	10800017 	ldw	r2,0(r2)
   19c24:	e0bf5a15 	stw	r2,-664(fp)
   19c28:	e03f5b15 	stw	zero,-660(fp)
   19c2c:	e1bf5a17 	ldw	r6,-664(fp)
   19c30:	e1ff5b17 	ldw	r7,-660(fp)
   19c34:	e13f5817 	ldw	r4,-672(fp)
   19c38:	e17f5917 	ldw	r5,-668(fp)
   19c3c:	00438e00 	call	438e0 <__muldi3>
   19c40:	100f883a 	mov	r7,r2
   19c44:	1811883a 	mov	r8,r3
   19c48:	380b883a 	mov	r5,r7
   19c4c:	400d883a 	mov	r6,r8
   19c50:	8145883a 	add	r2,r16,r5
   19c54:	1409803a 	cmpltu	r4,r2,r16
   19c58:	8987883a 	add	r3,r17,r6
   19c5c:	20c9883a 	add	r4,r4,r3
   19c60:	2007883a 	mov	r3,r4
   19c64:	1021883a 	mov	r16,r2
   19c68:	1823883a 	mov	r17,r3
       + (uint64_t)a[9] * b[7];
   19c6c:	e0bdd217 	ldw	r2,-2232(fp)
   19c70:	10800904 	addi	r2,r2,36
   19c74:	10800017 	ldw	r2,0(r2)
   19c78:	e0bf5c15 	stw	r2,-656(fp)
   19c7c:	e03f5d15 	stw	zero,-652(fp)
   19c80:	e0bdd317 	ldw	r2,-2228(fp)
   19c84:	10800704 	addi	r2,r2,28
   19c88:	10800017 	ldw	r2,0(r2)
   19c8c:	e0bf5e15 	stw	r2,-648(fp)
   19c90:	e03f5f15 	stw	zero,-644(fp)
   19c94:	e1bf5e17 	ldw	r6,-648(fp)
   19c98:	e1ff5f17 	ldw	r7,-644(fp)
   19c9c:	e13f5c17 	ldw	r4,-656(fp)
   19ca0:	e17f5d17 	ldw	r5,-652(fp)
   19ca4:	00438e00 	call	438e0 <__muldi3>
   19ca8:	100f883a 	mov	r7,r2
   19cac:	1811883a 	mov	r8,r3
   19cb0:	380b883a 	mov	r5,r7
   19cb4:	400d883a 	mov	r6,r8
   19cb8:	8145883a 	add	r2,r16,r5
   19cbc:	1409803a 	cmpltu	r4,r2,r16
   19cc0:	8987883a 	add	r3,r17,r6
   19cc4:	20c9883a 	add	r4,r4,r3
   19cc8:	2007883a 	mov	r3,r4
   19ccc:	100f883a 	mov	r7,r2
   19cd0:	1811883a 	mov	r8,r3
       + (uint64_t)a[4] * b[2]
       + (uint64_t)a[5] * b[1]
       + (uint64_t)a[6] * b[0];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[7] * b[9]
   19cd4:	e13db217 	ldw	r4,-2360(fp)
   19cd8:	e17db317 	ldw	r5,-2356(fp)
   19cdc:	21c5883a 	add	r2,r4,r7
   19ce0:	110d803a 	cmpltu	r6,r2,r4
   19ce4:	2a07883a 	add	r3,r5,r8
   19ce8:	30c9883a 	add	r4,r6,r3
   19cec:	2007883a 	mov	r3,r4
   19cf0:	e0bdb215 	stw	r2,-2360(fp)
   19cf4:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[8] * b[8]
       + (uint64_t)a[9] * b[7];
    VERIFY_BITS(d, 61);
   19cf8:	e0bdb317 	ldw	r2,-2356(fp)
   19cfc:	1004d77a 	srli	r2,r2,29
   19d00:	e0bf6015 	stw	r2,-640(fp)
   19d04:	e03f6115 	stw	zero,-636(fp)
   19d08:	e1bf6017 	ldw	r6,-640(fp)
   19d0c:	e1ff6117 	ldw	r7,-636(fp)
   19d10:	31c4b03a 	or	r2,r6,r7
   19d14:	1004c03a 	cmpne	r2,r2,zero
   19d18:	10803fcc 	andi	r2,r2,255
   19d1c:	10000d26 	beq	r2,zero,19d54 <secp256k1_fe_mul_inner+0x3ce0>
   19d20:	d0a01617 	ldw	r2,-32680(gp)
   19d24:	10c00317 	ldw	r3,12(r2)
   19d28:	00800174 	movhi	r2,5
   19d2c:	10942904 	addi	r2,r2,20644
   19d30:	d8800015 	stw	r2,0(sp)
   19d34:	01c0a3c4 	movi	r7,655
   19d38:	01800174 	movhi	r6,5
   19d3c:	3191dd04 	addi	r6,r6,18292
   19d40:	01400174 	movhi	r5,5
   19d44:	2951e804 	addi	r5,r5,18336
   19d48:	1809883a 	mov	r4,r3
   19d4c:	00461000 	call	46100 <fprintf>
   19d50:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    u6 = d & M; d >>= 26; c += u6 * R0;
   19d54:	e0bdaf17 	ldw	r2,-2372(fp)
   19d58:	e0bf6215 	stw	r2,-632(fp)
   19d5c:	e03f6315 	stw	zero,-628(fp)
   19d60:	e0bdb217 	ldw	r2,-2360(fp)
   19d64:	e0ff6217 	ldw	r3,-632(fp)
   19d68:	10c4703a 	and	r2,r2,r3
   19d6c:	e0bdc915 	stw	r2,-2268(fp)
   19d70:	e0bdb317 	ldw	r2,-2356(fp)
   19d74:	e13f6317 	ldw	r4,-628(fp)
   19d78:	1104703a 	and	r2,r2,r4
   19d7c:	e0bdca15 	stw	r2,-2264(fp)
   19d80:	e0bdb317 	ldw	r2,-2356(fp)
   19d84:	100691ba 	slli	r3,r2,6
   19d88:	e0bdb217 	ldw	r2,-2360(fp)
   19d8c:	1004d6ba 	srli	r2,r2,26
   19d90:	10c4b03a 	or	r2,r2,r3
   19d94:	e0bdb215 	stw	r2,-2360(fp)
   19d98:	e0bdb317 	ldw	r2,-2356(fp)
   19d9c:	1004d6ba 	srli	r2,r2,26
   19da0:	e0bdb315 	stw	r2,-2356(fp)
   19da4:	e0bdb017 	ldw	r2,-2368(fp)
   19da8:	e0bf6415 	stw	r2,-624(fp)
   19dac:	e03f6515 	stw	zero,-620(fp)
   19db0:	e1bdc917 	ldw	r6,-2268(fp)
   19db4:	e1fdca17 	ldw	r7,-2264(fp)
   19db8:	e13f6417 	ldw	r4,-624(fp)
   19dbc:	e17f6517 	ldw	r5,-620(fp)
   19dc0:	00438e00 	call	438e0 <__muldi3>
   19dc4:	1009883a 	mov	r4,r2
   19dc8:	180b883a 	mov	r5,r3
   19dcc:	200f883a 	mov	r7,r4
   19dd0:	2811883a 	mov	r8,r5
   19dd4:	e13db517 	ldw	r4,-2348(fp)
   19dd8:	e17db617 	ldw	r5,-2344(fp)
   19ddc:	21c5883a 	add	r2,r4,r7
   19de0:	110d803a 	cmpltu	r6,r2,r4
   19de4:	2a07883a 	add	r3,r5,r8
   19de8:	30c9883a 	add	r4,r6,r3
   19dec:	2007883a 	mov	r3,r4
   19df0:	e0bdb515 	stw	r2,-2348(fp)
   19df4:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u6, 26);
   19df8:	e0bdca17 	ldw	r2,-2264(fp)
   19dfc:	100691ba 	slli	r3,r2,6
   19e00:	e0bdc917 	ldw	r2,-2268(fp)
   19e04:	1004d6ba 	srli	r2,r2,26
   19e08:	e0bf6615 	stw	r2,-616(fp)
   19e0c:	e1bf6617 	ldw	r6,-616(fp)
   19e10:	1986b03a 	or	r3,r3,r6
   19e14:	e0ff6615 	stw	r3,-616(fp)
   19e18:	e0bdca17 	ldw	r2,-2264(fp)
   19e1c:	1004d6ba 	srli	r2,r2,26
   19e20:	e0bf6715 	stw	r2,-612(fp)
   19e24:	e1ff6617 	ldw	r7,-616(fp)
   19e28:	e0ff6717 	ldw	r3,-612(fp)
   19e2c:	38c4b03a 	or	r2,r7,r3
   19e30:	1004c03a 	cmpne	r2,r2,zero
   19e34:	10803fcc 	andi	r2,r2,255
   19e38:	10000d26 	beq	r2,zero,19e70 <secp256k1_fe_mul_inner+0x3dfc>
   19e3c:	d0a01617 	ldw	r2,-32680(gp)
   19e40:	10c00317 	ldw	r3,12(r2)
   19e44:	00800174 	movhi	r2,5
   19e48:	10943404 	addi	r2,r2,20688
   19e4c:	d8800015 	stw	r2,0(sp)
   19e50:	01c0a484 	movi	r7,658
   19e54:	01800174 	movhi	r6,5
   19e58:	3191dd04 	addi	r6,r6,18292
   19e5c:	01400174 	movhi	r5,5
   19e60:	2951e804 	addi	r5,r5,18336
   19e64:	1809883a 	mov	r4,r3
   19e68:	00461000 	call	46100 <fprintf>
   19e6c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 35);
   19e70:	e0bdb317 	ldw	r2,-2356(fp)
   19e74:	1004d0fa 	srli	r2,r2,3
   19e78:	e0bf6815 	stw	r2,-608(fp)
   19e7c:	e03f6915 	stw	zero,-604(fp)
   19e80:	e13f6817 	ldw	r4,-608(fp)
   19e84:	e1bf6917 	ldw	r6,-604(fp)
   19e88:	2184b03a 	or	r2,r4,r6
   19e8c:	1004c03a 	cmpne	r2,r2,zero
   19e90:	10803fcc 	andi	r2,r2,255
   19e94:	10000d26 	beq	r2,zero,19ecc <secp256k1_fe_mul_inner+0x3e58>
   19e98:	d0a01617 	ldw	r2,-32680(gp)
   19e9c:	10c00317 	ldw	r3,12(r2)
   19ea0:	00800174 	movhi	r2,5
   19ea4:	10943f04 	addi	r2,r2,20732
   19ea8:	d8800015 	stw	r2,0(sp)
   19eac:	01c0a4c4 	movi	r7,659
   19eb0:	01800174 	movhi	r6,5
   19eb4:	3191dd04 	addi	r6,r6,18292
   19eb8:	01400174 	movhi	r5,5
   19ebc:	2951e804 	addi	r5,r5,18336
   19ec0:	1809883a 	mov	r4,r3
   19ec4:	00461000 	call	46100 <fprintf>
   19ec8:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u6 0 0 0 0 0 0 t9 0 0 c-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    t6 = c & M; c >>= 26; c += u6 * R1;
   19ecc:	e0fdb517 	ldw	r3,-2348(fp)
   19ed0:	e0bdaf17 	ldw	r2,-2372(fp)
   19ed4:	1884703a 	and	r2,r3,r2
   19ed8:	e0bdcb15 	stw	r2,-2260(fp)
   19edc:	e0bdb617 	ldw	r2,-2344(fp)
   19ee0:	100691ba 	slli	r3,r2,6
   19ee4:	e0bdb517 	ldw	r2,-2348(fp)
   19ee8:	1004d6ba 	srli	r2,r2,26
   19eec:	10c4b03a 	or	r2,r2,r3
   19ef0:	e0bdb515 	stw	r2,-2348(fp)
   19ef4:	e0bdb617 	ldw	r2,-2344(fp)
   19ef8:	1004d6ba 	srli	r2,r2,26
   19efc:	e0bdb615 	stw	r2,-2344(fp)
   19f00:	e0bdb117 	ldw	r2,-2364(fp)
   19f04:	e0bf6a15 	stw	r2,-600(fp)
   19f08:	e03f6b15 	stw	zero,-596(fp)
   19f0c:	e1bdc917 	ldw	r6,-2268(fp)
   19f10:	e1fdca17 	ldw	r7,-2264(fp)
   19f14:	e13f6a17 	ldw	r4,-600(fp)
   19f18:	e17f6b17 	ldw	r5,-596(fp)
   19f1c:	00438e00 	call	438e0 <__muldi3>
   19f20:	1009883a 	mov	r4,r2
   19f24:	180b883a 	mov	r5,r3
   19f28:	200f883a 	mov	r7,r4
   19f2c:	2811883a 	mov	r8,r5
   19f30:	e13db517 	ldw	r4,-2348(fp)
   19f34:	e17db617 	ldw	r5,-2344(fp)
   19f38:	21c5883a 	add	r2,r4,r7
   19f3c:	110d803a 	cmpltu	r6,r2,r4
   19f40:	2a07883a 	add	r3,r5,r8
   19f44:	30c9883a 	add	r4,r6,r3
   19f48:	2007883a 	mov	r3,r4
   19f4c:	e0bdb515 	stw	r2,-2348(fp)
   19f50:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t6, 26);
   19f54:	e0bdcb17 	ldw	r2,-2260(fp)
   19f58:	1004d6ba 	srli	r2,r2,26
   19f5c:	1004c03a 	cmpne	r2,r2,zero
   19f60:	10803fcc 	andi	r2,r2,255
   19f64:	10000d26 	beq	r2,zero,19f9c <secp256k1_fe_mul_inner+0x3f28>
   19f68:	d0a01617 	ldw	r2,-32680(gp)
   19f6c:	10c00317 	ldw	r3,12(r2)
   19f70:	00800174 	movhi	r2,5
   19f74:	10944a04 	addi	r2,r2,20776
   19f78:	d8800015 	stw	r2,0(sp)
   19f7c:	01c0a5c4 	movi	r7,663
   19f80:	01800174 	movhi	r6,5
   19f84:	3191dd04 	addi	r6,r6,18292
   19f88:	01400174 	movhi	r5,5
   19f8c:	2951e804 	addi	r5,r5,18336
   19f90:	1809883a 	mov	r4,r3
   19f94:	00461000 	call	46100 <fprintf>
   19f98:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   19f9c:	e0bdb617 	ldw	r2,-2344(fp)
   19fa0:	1004d1fa 	srli	r2,r2,7
   19fa4:	e0bf6c15 	stw	r2,-592(fp)
   19fa8:	e03f6d15 	stw	zero,-588(fp)
   19fac:	e1ff6c17 	ldw	r7,-592(fp)
   19fb0:	e0ff6d17 	ldw	r3,-588(fp)
   19fb4:	38c4b03a 	or	r2,r7,r3
   19fb8:	1004c03a 	cmpne	r2,r2,zero
   19fbc:	10803fcc 	andi	r2,r2,255
   19fc0:	10000d26 	beq	r2,zero,19ff8 <secp256k1_fe_mul_inner+0x3f84>
   19fc4:	d0a01617 	ldw	r2,-32680(gp)
   19fc8:	10c00317 	ldw	r3,12(r2)
   19fcc:	00800174 	movhi	r2,5
   19fd0:	1093dc04 	addi	r2,r2,20336
   19fd4:	d8800015 	stw	r2,0(sp)
   19fd8:	01c0a604 	movi	r7,664
   19fdc:	01800174 	movhi	r6,5
   19fe0:	3191dd04 	addi	r6,r6,18292
   19fe4:	01400174 	movhi	r5,5
   19fe8:	2951e804 	addi	r5,r5,18336
   19fec:	1809883a 	mov	r4,r3
   19ff0:	00461000 	call	46100 <fprintf>
   19ff4:	0045fd40 	call	45fd4 <abort>
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[7]
   19ff8:	e0bdd217 	ldw	r2,-2232(fp)
   19ffc:	10800017 	ldw	r2,0(r2)
   1a000:	e0bf6e15 	stw	r2,-584(fp)
   1a004:	e03f6f15 	stw	zero,-580(fp)
   1a008:	e0bdd317 	ldw	r2,-2228(fp)
   1a00c:	10800704 	addi	r2,r2,28
   1a010:	10800017 	ldw	r2,0(r2)
   1a014:	e0bf7015 	stw	r2,-576(fp)
   1a018:	e03f7115 	stw	zero,-572(fp)
   1a01c:	e1bf7017 	ldw	r6,-576(fp)
   1a020:	e1ff7117 	ldw	r7,-572(fp)
   1a024:	e13f6e17 	ldw	r4,-584(fp)
   1a028:	e17f6f17 	ldw	r5,-580(fp)
   1a02c:	00438e00 	call	438e0 <__muldi3>
   1a030:	1009883a 	mov	r4,r2
   1a034:	180b883a 	mov	r5,r3
   1a038:	2021883a 	mov	r16,r4
   1a03c:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[6]
   1a040:	e0bdd217 	ldw	r2,-2232(fp)
   1a044:	10800104 	addi	r2,r2,4
   1a048:	10800017 	ldw	r2,0(r2)
   1a04c:	e0bf7215 	stw	r2,-568(fp)
   1a050:	e03f7315 	stw	zero,-564(fp)
   1a054:	e0bdd317 	ldw	r2,-2228(fp)
   1a058:	10800604 	addi	r2,r2,24
   1a05c:	10800017 	ldw	r2,0(r2)
   1a060:	e0bf7415 	stw	r2,-560(fp)
   1a064:	e03f7515 	stw	zero,-556(fp)
   1a068:	e1bf7417 	ldw	r6,-560(fp)
   1a06c:	e1ff7517 	ldw	r7,-556(fp)
   1a070:	e13f7217 	ldw	r4,-568(fp)
   1a074:	e17f7317 	ldw	r5,-564(fp)
   1a078:	00438e00 	call	438e0 <__muldi3>
   1a07c:	100f883a 	mov	r7,r2
   1a080:	1811883a 	mov	r8,r3
   1a084:	380b883a 	mov	r5,r7
   1a088:	400d883a 	mov	r6,r8
   1a08c:	8145883a 	add	r2,r16,r5
   1a090:	1409803a 	cmpltu	r4,r2,r16
   1a094:	8987883a 	add	r3,r17,r6
   1a098:	20c9883a 	add	r4,r4,r3
   1a09c:	2007883a 	mov	r3,r4
   1a0a0:	1025883a 	mov	r18,r2
   1a0a4:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[5]
       + (uint64_t)a[3] * b[4]
   1a0a8:	e0bdd217 	ldw	r2,-2232(fp)
   1a0ac:	10800304 	addi	r2,r2,12
   1a0b0:	10800017 	ldw	r2,0(r2)
   1a0b4:	e0bf7615 	stw	r2,-552(fp)
   1a0b8:	e03f7715 	stw	zero,-548(fp)
   1a0bc:	e0bdd317 	ldw	r2,-2228(fp)
   1a0c0:	10800404 	addi	r2,r2,16
   1a0c4:	10800017 	ldw	r2,0(r2)
   1a0c8:	e0bf7815 	stw	r2,-544(fp)
   1a0cc:	e03f7915 	stw	zero,-540(fp)
   1a0d0:	e1bf7817 	ldw	r6,-544(fp)
   1a0d4:	e1ff7917 	ldw	r7,-540(fp)
   1a0d8:	e13f7617 	ldw	r4,-552(fp)
   1a0dc:	e17f7717 	ldw	r5,-548(fp)
   1a0e0:	00438e00 	call	438e0 <__muldi3>
   1a0e4:	1009883a 	mov	r4,r2
   1a0e8:	180b883a 	mov	r5,r3
   1a0ec:	2021883a 	mov	r16,r4
   1a0f0:	2823883a 	mov	r17,r5
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[7]
       + (uint64_t)a[1] * b[6]
       + (uint64_t)a[2] * b[5]
   1a0f4:	e0bdd217 	ldw	r2,-2232(fp)
   1a0f8:	10800204 	addi	r2,r2,8
   1a0fc:	10800017 	ldw	r2,0(r2)
   1a100:	e0bf7a15 	stw	r2,-536(fp)
   1a104:	e03f7b15 	stw	zero,-532(fp)
   1a108:	e0bdd317 	ldw	r2,-2228(fp)
   1a10c:	10800504 	addi	r2,r2,20
   1a110:	10800017 	ldw	r2,0(r2)
   1a114:	e0bf7c15 	stw	r2,-528(fp)
   1a118:	e03f7d15 	stw	zero,-524(fp)
   1a11c:	e1bf7c17 	ldw	r6,-528(fp)
   1a120:	e1ff7d17 	ldw	r7,-524(fp)
   1a124:	e13f7a17 	ldw	r4,-536(fp)
   1a128:	e17f7b17 	ldw	r5,-532(fp)
   1a12c:	00438e00 	call	438e0 <__muldi3>
   1a130:	100f883a 	mov	r7,r2
   1a134:	1811883a 	mov	r8,r3
   1a138:	380b883a 	mov	r5,r7
   1a13c:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[4]
   1a140:	8145883a 	add	r2,r16,r5
   1a144:	1409803a 	cmpltu	r4,r2,r16
   1a148:	8987883a 	add	r3,r17,r6
   1a14c:	20c9883a 	add	r4,r4,r3
   1a150:	2007883a 	mov	r3,r4
   1a154:	100b883a 	mov	r5,r2
   1a158:	180d883a 	mov	r6,r3
   1a15c:	9145883a 	add	r2,r18,r5
   1a160:	1489803a 	cmpltu	r4,r2,r18
   1a164:	9987883a 	add	r3,r19,r6
   1a168:	20c9883a 	add	r4,r4,r3
   1a16c:	2007883a 	mov	r3,r4
   1a170:	1025883a 	mov	r18,r2
   1a174:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[3]
       + (uint64_t)a[5] * b[2]
   1a178:	e0bdd217 	ldw	r2,-2232(fp)
   1a17c:	10800504 	addi	r2,r2,20
   1a180:	10800017 	ldw	r2,0(r2)
   1a184:	e0bf7e15 	stw	r2,-520(fp)
   1a188:	e03f7f15 	stw	zero,-516(fp)
   1a18c:	e0bdd317 	ldw	r2,-2228(fp)
   1a190:	10800204 	addi	r2,r2,8
   1a194:	10800017 	ldw	r2,0(r2)
   1a198:	e0bf8015 	stw	r2,-512(fp)
   1a19c:	e03f8115 	stw	zero,-508(fp)
   1a1a0:	e1bf8017 	ldw	r6,-512(fp)
   1a1a4:	e1ff8117 	ldw	r7,-508(fp)
   1a1a8:	e13f7e17 	ldw	r4,-520(fp)
   1a1ac:	e17f7f17 	ldw	r5,-516(fp)
   1a1b0:	00438e00 	call	438e0 <__muldi3>
   1a1b4:	1009883a 	mov	r4,r2
   1a1b8:	180b883a 	mov	r5,r3
   1a1bc:	2021883a 	mov	r16,r4
   1a1c0:	2823883a 	mov	r17,r5

    c += (uint64_t)a[0] * b[7]
       + (uint64_t)a[1] * b[6]
       + (uint64_t)a[2] * b[5]
       + (uint64_t)a[3] * b[4]
       + (uint64_t)a[4] * b[3]
   1a1c4:	e0bdd217 	ldw	r2,-2232(fp)
   1a1c8:	10800404 	addi	r2,r2,16
   1a1cc:	10800017 	ldw	r2,0(r2)
   1a1d0:	e0bf8215 	stw	r2,-504(fp)
   1a1d4:	e03f8315 	stw	zero,-500(fp)
   1a1d8:	e0bdd317 	ldw	r2,-2228(fp)
   1a1dc:	10800304 	addi	r2,r2,12
   1a1e0:	10800017 	ldw	r2,0(r2)
   1a1e4:	e0bf8415 	stw	r2,-496(fp)
   1a1e8:	e03f8515 	stw	zero,-492(fp)
   1a1ec:	e1bf8417 	ldw	r6,-496(fp)
   1a1f0:	e1ff8517 	ldw	r7,-492(fp)
   1a1f4:	e13f8217 	ldw	r4,-504(fp)
   1a1f8:	e17f8317 	ldw	r5,-500(fp)
   1a1fc:	00438e00 	call	438e0 <__muldi3>
   1a200:	100f883a 	mov	r7,r2
   1a204:	1811883a 	mov	r8,r3
   1a208:	380b883a 	mov	r5,r7
   1a20c:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[2]
   1a210:	8145883a 	add	r2,r16,r5
   1a214:	1409803a 	cmpltu	r4,r2,r16
   1a218:	8987883a 	add	r3,r17,r6
   1a21c:	20c9883a 	add	r4,r4,r3
   1a220:	2007883a 	mov	r3,r4
   1a224:	100b883a 	mov	r5,r2
   1a228:	180d883a 	mov	r6,r3
   1a22c:	9145883a 	add	r2,r18,r5
   1a230:	1489803a 	cmpltu	r4,r2,r18
   1a234:	9987883a 	add	r3,r19,r6
   1a238:	20c9883a 	add	r4,r4,r3
   1a23c:	2007883a 	mov	r3,r4
   1a240:	1025883a 	mov	r18,r2
   1a244:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[1]
       + (uint64_t)a[7] * b[0];
   1a248:	e0bdd217 	ldw	r2,-2232(fp)
   1a24c:	10800704 	addi	r2,r2,28
   1a250:	10800017 	ldw	r2,0(r2)
   1a254:	e0bf8615 	stw	r2,-488(fp)
   1a258:	e03f8715 	stw	zero,-484(fp)
   1a25c:	e0bdd317 	ldw	r2,-2228(fp)
   1a260:	10800017 	ldw	r2,0(r2)
   1a264:	e0bf8815 	stw	r2,-480(fp)
   1a268:	e03f8915 	stw	zero,-476(fp)
   1a26c:	e1bf8817 	ldw	r6,-480(fp)
   1a270:	e1ff8917 	ldw	r7,-476(fp)
   1a274:	e13f8617 	ldw	r4,-488(fp)
   1a278:	e17f8717 	ldw	r5,-484(fp)
   1a27c:	00438e00 	call	438e0 <__muldi3>
   1a280:	1009883a 	mov	r4,r2
   1a284:	180b883a 	mov	r5,r3
   1a288:	2021883a 	mov	r16,r4
   1a28c:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[6]
       + (uint64_t)a[2] * b[5]
       + (uint64_t)a[3] * b[4]
       + (uint64_t)a[4] * b[3]
       + (uint64_t)a[5] * b[2]
       + (uint64_t)a[6] * b[1]
   1a290:	e0bdd217 	ldw	r2,-2232(fp)
   1a294:	10800604 	addi	r2,r2,24
   1a298:	10800017 	ldw	r2,0(r2)
   1a29c:	e0bf8a15 	stw	r2,-472(fp)
   1a2a0:	e03f8b15 	stw	zero,-468(fp)
   1a2a4:	e0bdd317 	ldw	r2,-2228(fp)
   1a2a8:	10800104 	addi	r2,r2,4
   1a2ac:	10800017 	ldw	r2,0(r2)
   1a2b0:	e0bf8c15 	stw	r2,-464(fp)
   1a2b4:	e03f8d15 	stw	zero,-460(fp)
   1a2b8:	e1bf8c17 	ldw	r6,-464(fp)
   1a2bc:	e1ff8d17 	ldw	r7,-460(fp)
   1a2c0:	e13f8a17 	ldw	r4,-472(fp)
   1a2c4:	e17f8b17 	ldw	r5,-468(fp)
   1a2c8:	00438e00 	call	438e0 <__muldi3>
   1a2cc:	100f883a 	mov	r7,r2
   1a2d0:	1811883a 	mov	r8,r3
   1a2d4:	380b883a 	mov	r5,r7
   1a2d8:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[0];
   1a2dc:	8145883a 	add	r2,r16,r5
   1a2e0:	1409803a 	cmpltu	r4,r2,r16
   1a2e4:	8987883a 	add	r3,r17,r6
   1a2e8:	20c9883a 	add	r4,r4,r3
   1a2ec:	2007883a 	mov	r3,r4
   1a2f0:	100b883a 	mov	r5,r2
   1a2f4:	180d883a 	mov	r6,r3
   1a2f8:	9145883a 	add	r2,r18,r5
   1a2fc:	1489803a 	cmpltu	r4,r2,r18
   1a300:	9987883a 	add	r3,r19,r6
   1a304:	20c9883a 	add	r4,r4,r3
   1a308:	2007883a 	mov	r3,r4
   1a30c:	100f883a 	mov	r7,r2
   1a310:	1811883a 	mov	r8,r3
    VERIFY_BITS(t6, 26);
    VERIFY_BITS(c, 39);
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[7]
   1a314:	e13db517 	ldw	r4,-2348(fp)
   1a318:	e17db617 	ldw	r5,-2344(fp)
   1a31c:	21c5883a 	add	r2,r4,r7
   1a320:	110d803a 	cmpltu	r6,r2,r4
   1a324:	2a07883a 	add	r3,r5,r8
   1a328:	30c9883a 	add	r4,r6,r3
   1a32c:	2007883a 	mov	r3,r4
   1a330:	e0bdb515 	stw	r2,-2348(fp)
   1a334:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[4] * b[3]
       + (uint64_t)a[5] * b[2]
       + (uint64_t)a[6] * b[1]
       + (uint64_t)a[7] * b[0];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x8000007C00000007ULL);
   1a338:	01000044 	movi	r4,1
   1a33c:	e0fdb617 	ldw	r3,-2344(fp)
   1a340:	00a00034 	movhi	r2,32768
   1a344:	10801f04 	addi	r2,r2,124
   1a348:	10c00836 	bltu	r2,r3,1a36c <secp256k1_fe_mul_inner+0x42f8>
   1a34c:	e0fdb617 	ldw	r3,-2344(fp)
   1a350:	00a00034 	movhi	r2,32768
   1a354:	10801f04 	addi	r2,r2,124
   1a358:	1880031e 	bne	r3,r2,1a368 <secp256k1_fe_mul_inner+0x42f4>
   1a35c:	e0bdb517 	ldw	r2,-2348(fp)
   1a360:	10800228 	cmpgeui	r2,r2,8
   1a364:	1000011e 	bne	r2,zero,1a36c <secp256k1_fe_mul_inner+0x42f8>
   1a368:	0009883a 	mov	r4,zero
   1a36c:	20803fcc 	andi	r2,r4,255
   1a370:	10000d26 	beq	r2,zero,1a3a8 <secp256k1_fe_mul_inner+0x4334>
   1a374:	d0a01617 	ldw	r2,-32680(gp)
   1a378:	10c00317 	ldw	r3,12(r2)
   1a37c:	00800174 	movhi	r2,5
   1a380:	10945504 	addi	r2,r2,20820
   1a384:	d8800015 	stw	r2,0(sp)
   1a388:	01c0a944 	movi	r7,677
   1a38c:	01800174 	movhi	r6,5
   1a390:	3191dd04 	addi	r6,r6,18292
   1a394:	01400174 	movhi	r5,5
   1a398:	2951e804 	addi	r5,r5,18336
   1a39c:	1809883a 	mov	r4,r3
   1a3a0:	00461000 	call	46100 <fprintf>
   1a3a4:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[8] * b[9]
   1a3a8:	e0bdd217 	ldw	r2,-2232(fp)
   1a3ac:	10800804 	addi	r2,r2,32
   1a3b0:	10800017 	ldw	r2,0(r2)
   1a3b4:	e0bf8e15 	stw	r2,-456(fp)
   1a3b8:	e03f8f15 	stw	zero,-452(fp)
   1a3bc:	e0bdd317 	ldw	r2,-2228(fp)
   1a3c0:	10800904 	addi	r2,r2,36
   1a3c4:	10800017 	ldw	r2,0(r2)
   1a3c8:	e0bf9015 	stw	r2,-448(fp)
   1a3cc:	e03f9115 	stw	zero,-444(fp)
   1a3d0:	e1bf9017 	ldw	r6,-448(fp)
   1a3d4:	e1ff9117 	ldw	r7,-444(fp)
   1a3d8:	e13f8e17 	ldw	r4,-456(fp)
   1a3dc:	e17f8f17 	ldw	r5,-452(fp)
   1a3e0:	00438e00 	call	438e0 <__muldi3>
   1a3e4:	1009883a 	mov	r4,r2
   1a3e8:	180b883a 	mov	r5,r3
   1a3ec:	2021883a 	mov	r16,r4
   1a3f0:	2823883a 	mov	r17,r5
       + (uint64_t)a[9] * b[8];
   1a3f4:	e0bdd217 	ldw	r2,-2232(fp)
   1a3f8:	10800904 	addi	r2,r2,36
   1a3fc:	10800017 	ldw	r2,0(r2)
   1a400:	e0bf9215 	stw	r2,-440(fp)
   1a404:	e03f9315 	stw	zero,-436(fp)
   1a408:	e0bdd317 	ldw	r2,-2228(fp)
   1a40c:	10800804 	addi	r2,r2,32
   1a410:	10800017 	ldw	r2,0(r2)
   1a414:	e0bf9415 	stw	r2,-432(fp)
   1a418:	e03f9515 	stw	zero,-428(fp)
   1a41c:	e1bf9417 	ldw	r6,-432(fp)
   1a420:	e1ff9517 	ldw	r7,-428(fp)
   1a424:	e13f9217 	ldw	r4,-440(fp)
   1a428:	e17f9317 	ldw	r5,-436(fp)
   1a42c:	00438e00 	call	438e0 <__muldi3>
   1a430:	100f883a 	mov	r7,r2
   1a434:	1811883a 	mov	r8,r3
   1a438:	380b883a 	mov	r5,r7
   1a43c:	400d883a 	mov	r6,r8
   1a440:	8145883a 	add	r2,r16,r5
   1a444:	1409803a 	cmpltu	r4,r2,r16
   1a448:	8987883a 	add	r3,r17,r6
   1a44c:	20c9883a 	add	r4,r4,r3
   1a450:	2007883a 	mov	r3,r4
   1a454:	100f883a 	mov	r7,r2
   1a458:	1811883a 	mov	r8,r3
       + (uint64_t)a[6] * b[1]
       + (uint64_t)a[7] * b[0];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x8000007C00000007ULL);
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[8] * b[9]
   1a45c:	e13db217 	ldw	r4,-2360(fp)
   1a460:	e17db317 	ldw	r5,-2356(fp)
   1a464:	21c5883a 	add	r2,r4,r7
   1a468:	110d803a 	cmpltu	r6,r2,r4
   1a46c:	2a07883a 	add	r3,r5,r8
   1a470:	30c9883a 	add	r4,r6,r3
   1a474:	2007883a 	mov	r3,r4
   1a478:	e0bdb215 	stw	r2,-2360(fp)
   1a47c:	e0fdb315 	stw	r3,-2356(fp)
       + (uint64_t)a[9] * b[8];
    VERIFY_BITS(d, 58);
   1a480:	e0bdb317 	ldw	r2,-2356(fp)
   1a484:	1004d6ba 	srli	r2,r2,26
   1a488:	e0bf9615 	stw	r2,-424(fp)
   1a48c:	e03f9715 	stw	zero,-420(fp)
   1a490:	e13f9617 	ldw	r4,-424(fp)
   1a494:	e1bf9717 	ldw	r6,-420(fp)
   1a498:	2184b03a 	or	r2,r4,r6
   1a49c:	1004c03a 	cmpne	r2,r2,zero
   1a4a0:	10803fcc 	andi	r2,r2,255
   1a4a4:	10000d26 	beq	r2,zero,1a4dc <secp256k1_fe_mul_inner+0x4468>
   1a4a8:	d0a01617 	ldw	r2,-32680(gp)
   1a4ac:	10c00317 	ldw	r3,12(r2)
   1a4b0:	00800174 	movhi	r2,5
   1a4b4:	10946204 	addi	r2,r2,20872
   1a4b8:	d8800015 	stw	r2,0(sp)
   1a4bc:	01c0aa44 	movi	r7,681
   1a4c0:	01800174 	movhi	r6,5
   1a4c4:	3191dd04 	addi	r6,r6,18292
   1a4c8:	01400174 	movhi	r5,5
   1a4cc:	2951e804 	addi	r5,r5,18336
   1a4d0:	1809883a 	mov	r4,r3
   1a4d4:	00461000 	call	46100 <fprintf>
   1a4d8:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    u7 = d & M; d >>= 26; c += u7 * R0;
   1a4dc:	e0bdaf17 	ldw	r2,-2372(fp)
   1a4e0:	e0bf9815 	stw	r2,-416(fp)
   1a4e4:	e03f9915 	stw	zero,-412(fp)
   1a4e8:	e0bdb217 	ldw	r2,-2360(fp)
   1a4ec:	e1ff9817 	ldw	r7,-416(fp)
   1a4f0:	11c4703a 	and	r2,r2,r7
   1a4f4:	e0bdcc15 	stw	r2,-2256(fp)
   1a4f8:	e0bdb317 	ldw	r2,-2356(fp)
   1a4fc:	e0ff9917 	ldw	r3,-412(fp)
   1a500:	10c4703a 	and	r2,r2,r3
   1a504:	e0bdcd15 	stw	r2,-2252(fp)
   1a508:	e0bdb317 	ldw	r2,-2356(fp)
   1a50c:	100691ba 	slli	r3,r2,6
   1a510:	e0bdb217 	ldw	r2,-2360(fp)
   1a514:	1004d6ba 	srli	r2,r2,26
   1a518:	10c4b03a 	or	r2,r2,r3
   1a51c:	e0bdb215 	stw	r2,-2360(fp)
   1a520:	e0bdb317 	ldw	r2,-2356(fp)
   1a524:	1004d6ba 	srli	r2,r2,26
   1a528:	e0bdb315 	stw	r2,-2356(fp)
   1a52c:	e0bdb017 	ldw	r2,-2368(fp)
   1a530:	e0bf9a15 	stw	r2,-408(fp)
   1a534:	e03f9b15 	stw	zero,-404(fp)
   1a538:	e1bdcc17 	ldw	r6,-2256(fp)
   1a53c:	e1fdcd17 	ldw	r7,-2252(fp)
   1a540:	e13f9a17 	ldw	r4,-408(fp)
   1a544:	e17f9b17 	ldw	r5,-404(fp)
   1a548:	00438e00 	call	438e0 <__muldi3>
   1a54c:	1009883a 	mov	r4,r2
   1a550:	180b883a 	mov	r5,r3
   1a554:	200f883a 	mov	r7,r4
   1a558:	2811883a 	mov	r8,r5
   1a55c:	e13db517 	ldw	r4,-2348(fp)
   1a560:	e17db617 	ldw	r5,-2344(fp)
   1a564:	21c5883a 	add	r2,r4,r7
   1a568:	110d803a 	cmpltu	r6,r2,r4
   1a56c:	2a07883a 	add	r3,r5,r8
   1a570:	30c9883a 	add	r4,r6,r3
   1a574:	2007883a 	mov	r3,r4
   1a578:	e0bdb515 	stw	r2,-2348(fp)
   1a57c:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u7, 26);
   1a580:	e0bdcd17 	ldw	r2,-2252(fp)
   1a584:	100691ba 	slli	r3,r2,6
   1a588:	e0bdcc17 	ldw	r2,-2256(fp)
   1a58c:	1004d6ba 	srli	r2,r2,26
   1a590:	e0bf9c15 	stw	r2,-400(fp)
   1a594:	e13f9c17 	ldw	r4,-400(fp)
   1a598:	1906b03a 	or	r3,r3,r4
   1a59c:	e0ff9c15 	stw	r3,-400(fp)
   1a5a0:	e0bdcd17 	ldw	r2,-2252(fp)
   1a5a4:	1004d6ba 	srli	r2,r2,26
   1a5a8:	e0bf9d15 	stw	r2,-396(fp)
   1a5ac:	e1bf9c17 	ldw	r6,-400(fp)
   1a5b0:	e1ff9d17 	ldw	r7,-396(fp)
   1a5b4:	31c4b03a 	or	r2,r6,r7
   1a5b8:	1004c03a 	cmpne	r2,r2,zero
   1a5bc:	10803fcc 	andi	r2,r2,255
   1a5c0:	10000d26 	beq	r2,zero,1a5f8 <secp256k1_fe_mul_inner+0x4584>
   1a5c4:	d0a01617 	ldw	r2,-32680(gp)
   1a5c8:	10c00317 	ldw	r3,12(r2)
   1a5cc:	00800174 	movhi	r2,5
   1a5d0:	10946d04 	addi	r2,r2,20916
   1a5d4:	d8800015 	stw	r2,0(sp)
   1a5d8:	01c0ab04 	movi	r7,684
   1a5dc:	01800174 	movhi	r6,5
   1a5e0:	3191dd04 	addi	r6,r6,18292
   1a5e4:	01400174 	movhi	r5,5
   1a5e8:	2951e804 	addi	r5,r5,18336
   1a5ec:	1809883a 	mov	r4,r3
   1a5f0:	00461000 	call	46100 <fprintf>
   1a5f4:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 32);
   1a5f8:	e0bdb317 	ldw	r2,-2356(fp)
   1a5fc:	1004d83a 	srl	r2,r2,zero
   1a600:	e0bf9e15 	stw	r2,-392(fp)
   1a604:	e03f9f15 	stw	zero,-388(fp)
   1a608:	e0ff9e17 	ldw	r3,-392(fp)
   1a60c:	e13f9f17 	ldw	r4,-388(fp)
   1a610:	1904b03a 	or	r2,r3,r4
   1a614:	1004c03a 	cmpne	r2,r2,zero
   1a618:	10803fcc 	andi	r2,r2,255
   1a61c:	10000d26 	beq	r2,zero,1a654 <secp256k1_fe_mul_inner+0x45e0>
   1a620:	d0a01617 	ldw	r2,-32680(gp)
   1a624:	10c00317 	ldw	r3,12(r2)
   1a628:	00800174 	movhi	r2,5
   1a62c:	10947804 	addi	r2,r2,20960
   1a630:	d8800015 	stw	r2,0(sp)
   1a634:	01c0ab44 	movi	r7,685
   1a638:	01800174 	movhi	r6,5
   1a63c:	3191dd04 	addi	r6,r6,18292
   1a640:	01400174 	movhi	r5,5
   1a644:	2951e804 	addi	r5,r5,18336
   1a648:	1809883a 	mov	r4,r3
   1a64c:	00461000 	call	46100 <fprintf>
   1a650:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x800001703FFFC2F7ULL);
   1a654:	01000044 	movi	r4,1
   1a658:	e0fdb617 	ldw	r3,-2344(fp)
   1a65c:	00a00034 	movhi	r2,32768
   1a660:	10805c04 	addi	r2,r2,368
   1a664:	10c00936 	bltu	r2,r3,1a68c <secp256k1_fe_mul_inner+0x4618>
   1a668:	e0fdb617 	ldw	r3,-2344(fp)
   1a66c:	00a00034 	movhi	r2,32768
   1a670:	10805c04 	addi	r2,r2,368
   1a674:	1880041e 	bne	r3,r2,1a688 <secp256k1_fe_mul_inner+0x4614>
   1a678:	e0fdb517 	ldw	r3,-2348(fp)
   1a67c:	00900034 	movhi	r2,16384
   1a680:	10b0bdc4 	addi	r2,r2,-15625
   1a684:	10c00136 	bltu	r2,r3,1a68c <secp256k1_fe_mul_inner+0x4618>
   1a688:	0009883a 	mov	r4,zero
   1a68c:	20803fcc 	andi	r2,r4,255
   1a690:	10000d26 	beq	r2,zero,1a6c8 <secp256k1_fe_mul_inner+0x4654>
   1a694:	d0a01617 	ldw	r2,-32680(gp)
   1a698:	10c00317 	ldw	r3,12(r2)
   1a69c:	00800174 	movhi	r2,5
   1a6a0:	10948304 	addi	r2,r2,21004
   1a6a4:	d8800015 	stw	r2,0(sp)
   1a6a8:	01c0abc4 	movi	r7,687
   1a6ac:	01800174 	movhi	r6,5
   1a6b0:	3191dd04 	addi	r6,r6,18292
   1a6b4:	01400174 	movhi	r5,5
   1a6b8:	2951e804 	addi	r5,r5,18336
   1a6bc:	1809883a 	mov	r4,r3
   1a6c0:	00461000 	call	46100 <fprintf>
   1a6c4:	0045fd40 	call	45fd4 <abort>
    /* [d u7 0 0 0 0 0 0 0 t9 0 c-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    t7 = c & M; c >>= 26; c += u7 * R1;
   1a6c8:	e0fdb517 	ldw	r3,-2348(fp)
   1a6cc:	e0bdaf17 	ldw	r2,-2372(fp)
   1a6d0:	1884703a 	and	r2,r3,r2
   1a6d4:	e0bdce15 	stw	r2,-2248(fp)
   1a6d8:	e0bdb617 	ldw	r2,-2344(fp)
   1a6dc:	100691ba 	slli	r3,r2,6
   1a6e0:	e0bdb517 	ldw	r2,-2348(fp)
   1a6e4:	1004d6ba 	srli	r2,r2,26
   1a6e8:	10c4b03a 	or	r2,r2,r3
   1a6ec:	e0bdb515 	stw	r2,-2348(fp)
   1a6f0:	e0bdb617 	ldw	r2,-2344(fp)
   1a6f4:	1004d6ba 	srli	r2,r2,26
   1a6f8:	e0bdb615 	stw	r2,-2344(fp)
   1a6fc:	e0bdb117 	ldw	r2,-2364(fp)
   1a700:	e0bfa015 	stw	r2,-384(fp)
   1a704:	e03fa115 	stw	zero,-380(fp)
   1a708:	e1bdcc17 	ldw	r6,-2256(fp)
   1a70c:	e1fdcd17 	ldw	r7,-2252(fp)
   1a710:	e13fa017 	ldw	r4,-384(fp)
   1a714:	e17fa117 	ldw	r5,-380(fp)
   1a718:	00438e00 	call	438e0 <__muldi3>
   1a71c:	1009883a 	mov	r4,r2
   1a720:	180b883a 	mov	r5,r3
   1a724:	200f883a 	mov	r7,r4
   1a728:	2811883a 	mov	r8,r5
   1a72c:	e13db517 	ldw	r4,-2348(fp)
   1a730:	e17db617 	ldw	r5,-2344(fp)
   1a734:	21c5883a 	add	r2,r4,r7
   1a738:	110d803a 	cmpltu	r6,r2,r4
   1a73c:	2a07883a 	add	r3,r5,r8
   1a740:	30c9883a 	add	r4,r6,r3
   1a744:	2007883a 	mov	r3,r4
   1a748:	e0bdb515 	stw	r2,-2348(fp)
   1a74c:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(t7, 26);
   1a750:	e0bdce17 	ldw	r2,-2248(fp)
   1a754:	1004d6ba 	srli	r2,r2,26
   1a758:	1004c03a 	cmpne	r2,r2,zero
   1a75c:	10803fcc 	andi	r2,r2,255
   1a760:	10000d26 	beq	r2,zero,1a798 <secp256k1_fe_mul_inner+0x4724>
   1a764:	d0a01617 	ldw	r2,-32680(gp)
   1a768:	10c00317 	ldw	r3,12(r2)
   1a76c:	00800174 	movhi	r2,5
   1a770:	10949004 	addi	r2,r2,21056
   1a774:	d8800015 	stw	r2,0(sp)
   1a778:	01c0ac84 	movi	r7,690
   1a77c:	01800174 	movhi	r6,5
   1a780:	3191dd04 	addi	r6,r6,18292
   1a784:	01400174 	movhi	r5,5
   1a788:	2951e804 	addi	r5,r5,18336
   1a78c:	1809883a 	mov	r4,r3
   1a790:	00461000 	call	46100 <fprintf>
   1a794:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 38);
   1a798:	e0bdb617 	ldw	r2,-2344(fp)
   1a79c:	1004d1ba 	srli	r2,r2,6
   1a7a0:	e0bfa215 	stw	r2,-376(fp)
   1a7a4:	e03fa315 	stw	zero,-372(fp)
   1a7a8:	e1bfa217 	ldw	r6,-376(fp)
   1a7ac:	e1ffa317 	ldw	r7,-372(fp)
   1a7b0:	31c4b03a 	or	r2,r6,r7
   1a7b4:	1004c03a 	cmpne	r2,r2,zero
   1a7b8:	10803fcc 	andi	r2,r2,255
   1a7bc:	10000d26 	beq	r2,zero,1a7f4 <secp256k1_fe_mul_inner+0x4780>
   1a7c0:	d0a01617 	ldw	r2,-32680(gp)
   1a7c4:	10c00317 	ldw	r3,12(r2)
   1a7c8:	00800174 	movhi	r2,5
   1a7cc:	1093a504 	addi	r2,r2,20116
   1a7d0:	d8800015 	stw	r2,0(sp)
   1a7d4:	01c0acc4 	movi	r7,691
   1a7d8:	01800174 	movhi	r6,5
   1a7dc:	3191dd04 	addi	r6,r6,18292
   1a7e0:	01400174 	movhi	r5,5
   1a7e4:	2951e804 	addi	r5,r5,18336
   1a7e8:	1809883a 	mov	r4,r3
   1a7ec:	00461000 	call	46100 <fprintf>
   1a7f0:	0045fd40 	call	45fd4 <abort>
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[8]
   1a7f4:	e0bdd217 	ldw	r2,-2232(fp)
   1a7f8:	10800017 	ldw	r2,0(r2)
   1a7fc:	e0bfa415 	stw	r2,-368(fp)
   1a800:	e03fa515 	stw	zero,-364(fp)
   1a804:	e0bdd317 	ldw	r2,-2228(fp)
   1a808:	10800804 	addi	r2,r2,32
   1a80c:	10800017 	ldw	r2,0(r2)
   1a810:	e0bfa615 	stw	r2,-360(fp)
   1a814:	e03fa715 	stw	zero,-356(fp)
   1a818:	e1bfa617 	ldw	r6,-360(fp)
   1a81c:	e1ffa717 	ldw	r7,-356(fp)
   1a820:	e13fa417 	ldw	r4,-368(fp)
   1a824:	e17fa517 	ldw	r5,-364(fp)
   1a828:	00438e00 	call	438e0 <__muldi3>
   1a82c:	1009883a 	mov	r4,r2
   1a830:	180b883a 	mov	r5,r3
   1a834:	2021883a 	mov	r16,r4
   1a838:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[7]
   1a83c:	e0bdd217 	ldw	r2,-2232(fp)
   1a840:	10800104 	addi	r2,r2,4
   1a844:	10800017 	ldw	r2,0(r2)
   1a848:	e0bfa815 	stw	r2,-352(fp)
   1a84c:	e03fa915 	stw	zero,-348(fp)
   1a850:	e0bdd317 	ldw	r2,-2228(fp)
   1a854:	10800704 	addi	r2,r2,28
   1a858:	10800017 	ldw	r2,0(r2)
   1a85c:	e0bfaa15 	stw	r2,-344(fp)
   1a860:	e03fab15 	stw	zero,-340(fp)
   1a864:	e1bfaa17 	ldw	r6,-344(fp)
   1a868:	e1ffab17 	ldw	r7,-340(fp)
   1a86c:	e13fa817 	ldw	r4,-352(fp)
   1a870:	e17fa917 	ldw	r5,-348(fp)
   1a874:	00438e00 	call	438e0 <__muldi3>
   1a878:	100f883a 	mov	r7,r2
   1a87c:	1811883a 	mov	r8,r3
   1a880:	380b883a 	mov	r5,r7
   1a884:	400d883a 	mov	r6,r8
   1a888:	8145883a 	add	r2,r16,r5
   1a88c:	1409803a 	cmpltu	r4,r2,r16
   1a890:	8987883a 	add	r3,r17,r6
   1a894:	20c9883a 	add	r4,r4,r3
   1a898:	2007883a 	mov	r3,r4
   1a89c:	1025883a 	mov	r18,r2
   1a8a0:	1827883a 	mov	r19,r3
       + (uint64_t)a[2] * b[6]
       + (uint64_t)a[3] * b[5]
   1a8a4:	e0bdd217 	ldw	r2,-2232(fp)
   1a8a8:	10800304 	addi	r2,r2,12
   1a8ac:	10800017 	ldw	r2,0(r2)
   1a8b0:	e0bfac15 	stw	r2,-336(fp)
   1a8b4:	e03fad15 	stw	zero,-332(fp)
   1a8b8:	e0bdd317 	ldw	r2,-2228(fp)
   1a8bc:	10800504 	addi	r2,r2,20
   1a8c0:	10800017 	ldw	r2,0(r2)
   1a8c4:	e0bfae15 	stw	r2,-328(fp)
   1a8c8:	e03faf15 	stw	zero,-324(fp)
   1a8cc:	e1bfae17 	ldw	r6,-328(fp)
   1a8d0:	e1ffaf17 	ldw	r7,-324(fp)
   1a8d4:	e13fac17 	ldw	r4,-336(fp)
   1a8d8:	e17fad17 	ldw	r5,-332(fp)
   1a8dc:	00438e00 	call	438e0 <__muldi3>
   1a8e0:	1009883a 	mov	r4,r2
   1a8e4:	180b883a 	mov	r5,r3
   1a8e8:	2021883a 	mov	r16,r4
   1a8ec:	2823883a 	mov	r17,r5
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[8]
       + (uint64_t)a[1] * b[7]
       + (uint64_t)a[2] * b[6]
   1a8f0:	e0bdd217 	ldw	r2,-2232(fp)
   1a8f4:	10800204 	addi	r2,r2,8
   1a8f8:	10800017 	ldw	r2,0(r2)
   1a8fc:	e0bfb015 	stw	r2,-320(fp)
   1a900:	e03fb115 	stw	zero,-316(fp)
   1a904:	e0bdd317 	ldw	r2,-2228(fp)
   1a908:	10800604 	addi	r2,r2,24
   1a90c:	10800017 	ldw	r2,0(r2)
   1a910:	e0bfb215 	stw	r2,-312(fp)
   1a914:	e03fb315 	stw	zero,-308(fp)
   1a918:	e1bfb217 	ldw	r6,-312(fp)
   1a91c:	e1ffb317 	ldw	r7,-308(fp)
   1a920:	e13fb017 	ldw	r4,-320(fp)
   1a924:	e17fb117 	ldw	r5,-316(fp)
   1a928:	00438e00 	call	438e0 <__muldi3>
   1a92c:	100f883a 	mov	r7,r2
   1a930:	1811883a 	mov	r8,r3
   1a934:	380b883a 	mov	r5,r7
   1a938:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * b[5]
   1a93c:	8145883a 	add	r2,r16,r5
   1a940:	1409803a 	cmpltu	r4,r2,r16
   1a944:	8987883a 	add	r3,r17,r6
   1a948:	20c9883a 	add	r4,r4,r3
   1a94c:	2007883a 	mov	r3,r4
   1a950:	100b883a 	mov	r5,r2
   1a954:	180d883a 	mov	r6,r3
   1a958:	9145883a 	add	r2,r18,r5
   1a95c:	1489803a 	cmpltu	r4,r2,r18
   1a960:	9987883a 	add	r3,r19,r6
   1a964:	20c9883a 	add	r4,r4,r3
   1a968:	2007883a 	mov	r3,r4
   1a96c:	1025883a 	mov	r18,r2
   1a970:	1827883a 	mov	r19,r3
       + (uint64_t)a[4] * b[4]
       + (uint64_t)a[5] * b[3]
   1a974:	e0bdd217 	ldw	r2,-2232(fp)
   1a978:	10800504 	addi	r2,r2,20
   1a97c:	10800017 	ldw	r2,0(r2)
   1a980:	e0bfb415 	stw	r2,-304(fp)
   1a984:	e03fb515 	stw	zero,-300(fp)
   1a988:	e0bdd317 	ldw	r2,-2228(fp)
   1a98c:	10800304 	addi	r2,r2,12
   1a990:	10800017 	ldw	r2,0(r2)
   1a994:	e0bfb615 	stw	r2,-296(fp)
   1a998:	e03fb715 	stw	zero,-292(fp)
   1a99c:	e1bfb617 	ldw	r6,-296(fp)
   1a9a0:	e1ffb717 	ldw	r7,-292(fp)
   1a9a4:	e13fb417 	ldw	r4,-304(fp)
   1a9a8:	e17fb517 	ldw	r5,-300(fp)
   1a9ac:	00438e00 	call	438e0 <__muldi3>
   1a9b0:	1009883a 	mov	r4,r2
   1a9b4:	180b883a 	mov	r5,r3
   1a9b8:	2021883a 	mov	r16,r4
   1a9bc:	2823883a 	mov	r17,r5

    c += (uint64_t)a[0] * b[8]
       + (uint64_t)a[1] * b[7]
       + (uint64_t)a[2] * b[6]
       + (uint64_t)a[3] * b[5]
       + (uint64_t)a[4] * b[4]
   1a9c0:	e0bdd217 	ldw	r2,-2232(fp)
   1a9c4:	10800404 	addi	r2,r2,16
   1a9c8:	10800017 	ldw	r2,0(r2)
   1a9cc:	e0bfb815 	stw	r2,-288(fp)
   1a9d0:	e03fb915 	stw	zero,-284(fp)
   1a9d4:	e0bdd317 	ldw	r2,-2228(fp)
   1a9d8:	10800404 	addi	r2,r2,16
   1a9dc:	10800017 	ldw	r2,0(r2)
   1a9e0:	e0bfba15 	stw	r2,-280(fp)
   1a9e4:	e03fbb15 	stw	zero,-276(fp)
   1a9e8:	e1bfba17 	ldw	r6,-280(fp)
   1a9ec:	e1ffbb17 	ldw	r7,-276(fp)
   1a9f0:	e13fb817 	ldw	r4,-288(fp)
   1a9f4:	e17fb917 	ldw	r5,-284(fp)
   1a9f8:	00438e00 	call	438e0 <__muldi3>
   1a9fc:	100f883a 	mov	r7,r2
   1aa00:	1811883a 	mov	r8,r3
   1aa04:	380b883a 	mov	r5,r7
   1aa08:	400d883a 	mov	r6,r8
       + (uint64_t)a[5] * b[3]
   1aa0c:	8145883a 	add	r2,r16,r5
   1aa10:	1409803a 	cmpltu	r4,r2,r16
   1aa14:	8987883a 	add	r3,r17,r6
   1aa18:	20c9883a 	add	r4,r4,r3
   1aa1c:	2007883a 	mov	r3,r4
   1aa20:	100b883a 	mov	r5,r2
   1aa24:	180d883a 	mov	r6,r3
   1aa28:	9145883a 	add	r2,r18,r5
   1aa2c:	1489803a 	cmpltu	r4,r2,r18
   1aa30:	9987883a 	add	r3,r19,r6
   1aa34:	20c9883a 	add	r4,r4,r3
   1aa38:	2007883a 	mov	r3,r4
   1aa3c:	1025883a 	mov	r18,r2
   1aa40:	1827883a 	mov	r19,r3
       + (uint64_t)a[6] * b[2]
       + (uint64_t)a[7] * b[1]
   1aa44:	e0bdd217 	ldw	r2,-2232(fp)
   1aa48:	10800704 	addi	r2,r2,28
   1aa4c:	10800017 	ldw	r2,0(r2)
   1aa50:	e0bfbc15 	stw	r2,-272(fp)
   1aa54:	e03fbd15 	stw	zero,-268(fp)
   1aa58:	e0bdd317 	ldw	r2,-2228(fp)
   1aa5c:	10800104 	addi	r2,r2,4
   1aa60:	10800017 	ldw	r2,0(r2)
   1aa64:	e0bfbe15 	stw	r2,-264(fp)
   1aa68:	e03fbf15 	stw	zero,-260(fp)
   1aa6c:	e1bfbe17 	ldw	r6,-264(fp)
   1aa70:	e1ffbf17 	ldw	r7,-260(fp)
   1aa74:	e13fbc17 	ldw	r4,-272(fp)
   1aa78:	e17fbd17 	ldw	r5,-268(fp)
   1aa7c:	00438e00 	call	438e0 <__muldi3>
   1aa80:	1009883a 	mov	r4,r2
   1aa84:	180b883a 	mov	r5,r3
   1aa88:	2021883a 	mov	r16,r4
   1aa8c:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * b[7]
       + (uint64_t)a[2] * b[6]
       + (uint64_t)a[3] * b[5]
       + (uint64_t)a[4] * b[4]
       + (uint64_t)a[5] * b[3]
       + (uint64_t)a[6] * b[2]
   1aa90:	e0bdd217 	ldw	r2,-2232(fp)
   1aa94:	10800604 	addi	r2,r2,24
   1aa98:	10800017 	ldw	r2,0(r2)
   1aa9c:	e0bfc015 	stw	r2,-256(fp)
   1aaa0:	e03fc115 	stw	zero,-252(fp)
   1aaa4:	e0bdd317 	ldw	r2,-2228(fp)
   1aaa8:	10800204 	addi	r2,r2,8
   1aaac:	10800017 	ldw	r2,0(r2)
   1aab0:	e0bfc215 	stw	r2,-248(fp)
   1aab4:	e03fc315 	stw	zero,-244(fp)
   1aab8:	e1bfc217 	ldw	r6,-248(fp)
   1aabc:	e1ffc317 	ldw	r7,-244(fp)
   1aac0:	e13fc017 	ldw	r4,-256(fp)
   1aac4:	e17fc117 	ldw	r5,-252(fp)
   1aac8:	00438e00 	call	438e0 <__muldi3>
   1aacc:	100f883a 	mov	r7,r2
   1aad0:	1811883a 	mov	r8,r3
   1aad4:	380b883a 	mov	r5,r7
   1aad8:	400d883a 	mov	r6,r8
       + (uint64_t)a[7] * b[1]
   1aadc:	8145883a 	add	r2,r16,r5
   1aae0:	1409803a 	cmpltu	r4,r2,r16
   1aae4:	8987883a 	add	r3,r17,r6
   1aae8:	20c9883a 	add	r4,r4,r3
   1aaec:	2007883a 	mov	r3,r4
   1aaf0:	100b883a 	mov	r5,r2
   1aaf4:	180d883a 	mov	r6,r3
   1aaf8:	9145883a 	add	r2,r18,r5
   1aafc:	1489803a 	cmpltu	r4,r2,r18
   1ab00:	9987883a 	add	r3,r19,r6
   1ab04:	20c9883a 	add	r4,r4,r3
   1ab08:	2007883a 	mov	r3,r4
   1ab0c:	1021883a 	mov	r16,r2
   1ab10:	1823883a 	mov	r17,r3
       + (uint64_t)a[8] * b[0];
   1ab14:	e0bdd217 	ldw	r2,-2232(fp)
   1ab18:	10800804 	addi	r2,r2,32
   1ab1c:	10800017 	ldw	r2,0(r2)
   1ab20:	e0bfc415 	stw	r2,-240(fp)
   1ab24:	e03fc515 	stw	zero,-236(fp)
   1ab28:	e0bdd317 	ldw	r2,-2228(fp)
   1ab2c:	10800017 	ldw	r2,0(r2)
   1ab30:	e0bfc615 	stw	r2,-232(fp)
   1ab34:	e03fc715 	stw	zero,-228(fp)
   1ab38:	e1bfc617 	ldw	r6,-232(fp)
   1ab3c:	e1ffc717 	ldw	r7,-228(fp)
   1ab40:	e13fc417 	ldw	r4,-240(fp)
   1ab44:	e17fc517 	ldw	r5,-236(fp)
   1ab48:	00438e00 	call	438e0 <__muldi3>
   1ab4c:	100f883a 	mov	r7,r2
   1ab50:	1811883a 	mov	r8,r3
   1ab54:	380b883a 	mov	r5,r7
   1ab58:	400d883a 	mov	r6,r8
   1ab5c:	8145883a 	add	r2,r16,r5
   1ab60:	1409803a 	cmpltu	r4,r2,r16
   1ab64:	8987883a 	add	r3,r17,r6
   1ab68:	20c9883a 	add	r4,r4,r3
   1ab6c:	2007883a 	mov	r3,r4
   1ab70:	100f883a 	mov	r7,r2
   1ab74:	1811883a 	mov	r8,r3
    VERIFY_BITS(t7, 26);
    VERIFY_BITS(c, 38);
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)a[0] * b[8]
   1ab78:	e13db517 	ldw	r4,-2348(fp)
   1ab7c:	e17db617 	ldw	r5,-2344(fp)
   1ab80:	21c5883a 	add	r2,r4,r7
   1ab84:	110d803a 	cmpltu	r6,r2,r4
   1ab88:	2a07883a 	add	r3,r5,r8
   1ab8c:	30c9883a 	add	r4,r6,r3
   1ab90:	2007883a 	mov	r3,r4
   1ab94:	e0bdb515 	stw	r2,-2348(fp)
   1ab98:	e0fdb615 	stw	r3,-2344(fp)
       + (uint64_t)a[5] * b[3]
       + (uint64_t)a[6] * b[2]
       + (uint64_t)a[7] * b[1]
       + (uint64_t)a[8] * b[0];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x9000007B80000008ULL);
   1ab9c:	01000044 	movi	r4,1
   1aba0:	e0fdb617 	ldw	r3,-2344(fp)
   1aba4:	00a40034 	movhi	r2,36864
   1aba8:	10801ec4 	addi	r2,r2,123
   1abac:	10c00936 	bltu	r2,r3,1abd4 <secp256k1_fe_mul_inner+0x4b60>
   1abb0:	e0fdb617 	ldw	r3,-2344(fp)
   1abb4:	00a40034 	movhi	r2,36864
   1abb8:	10801ec4 	addi	r2,r2,123
   1abbc:	1880041e 	bne	r3,r2,1abd0 <secp256k1_fe_mul_inner+0x4b5c>
   1abc0:	e0fdb517 	ldw	r3,-2348(fp)
   1abc4:	00a00034 	movhi	r2,32768
   1abc8:	10800204 	addi	r2,r2,8
   1abcc:	10c00136 	bltu	r2,r3,1abd4 <secp256k1_fe_mul_inner+0x4b60>
   1abd0:	0009883a 	mov	r4,zero
   1abd4:	20803fcc 	andi	r2,r4,255
   1abd8:	10000d26 	beq	r2,zero,1ac10 <secp256k1_fe_mul_inner+0x4b9c>
   1abdc:	d0a01617 	ldw	r2,-32680(gp)
   1abe0:	10c00317 	ldw	r3,12(r2)
   1abe4:	00800174 	movhi	r2,5
   1abe8:	10949b04 	addi	r2,r2,21100
   1abec:	d8800015 	stw	r2,0(sp)
   1abf0:	01c0b044 	movi	r7,705
   1abf4:	01800174 	movhi	r6,5
   1abf8:	3191dd04 	addi	r6,r6,18292
   1abfc:	01400174 	movhi	r5,5
   1ac00:	2951e804 	addi	r5,r5,18336
   1ac04:	1809883a 	mov	r4,r3
   1ac08:	00461000 	call	46100 <fprintf>
   1ac0c:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[9] * b[9];
   1ac10:	e0bdd217 	ldw	r2,-2232(fp)
   1ac14:	10800904 	addi	r2,r2,36
   1ac18:	10800017 	ldw	r2,0(r2)
   1ac1c:	e0bfc815 	stw	r2,-224(fp)
   1ac20:	e03fc915 	stw	zero,-220(fp)
   1ac24:	e0bdd317 	ldw	r2,-2228(fp)
   1ac28:	10800904 	addi	r2,r2,36
   1ac2c:	10800017 	ldw	r2,0(r2)
   1ac30:	e0bfca15 	stw	r2,-216(fp)
   1ac34:	e03fcb15 	stw	zero,-212(fp)
   1ac38:	e1bfca17 	ldw	r6,-216(fp)
   1ac3c:	e1ffcb17 	ldw	r7,-212(fp)
   1ac40:	e13fc817 	ldw	r4,-224(fp)
   1ac44:	e17fc917 	ldw	r5,-220(fp)
   1ac48:	00438e00 	call	438e0 <__muldi3>
   1ac4c:	1009883a 	mov	r4,r2
   1ac50:	180b883a 	mov	r5,r3
   1ac54:	200f883a 	mov	r7,r4
   1ac58:	2811883a 	mov	r8,r5
   1ac5c:	e13db217 	ldw	r4,-2360(fp)
   1ac60:	e17db317 	ldw	r5,-2356(fp)
   1ac64:	21c5883a 	add	r2,r4,r7
   1ac68:	110d803a 	cmpltu	r6,r2,r4
   1ac6c:	2a07883a 	add	r3,r5,r8
   1ac70:	30c9883a 	add	r4,r6,r3
   1ac74:	2007883a 	mov	r3,r4
   1ac78:	e0bdb215 	stw	r2,-2360(fp)
   1ac7c:	e0fdb315 	stw	r3,-2356(fp)
    VERIFY_BITS(d, 57);
   1ac80:	e0bdb317 	ldw	r2,-2356(fp)
   1ac84:	1004d67a 	srli	r2,r2,25
   1ac88:	e0bfcc15 	stw	r2,-208(fp)
   1ac8c:	e03fcd15 	stw	zero,-204(fp)
   1ac90:	e0ffcc17 	ldw	r3,-208(fp)
   1ac94:	e13fcd17 	ldw	r4,-204(fp)
   1ac98:	1904b03a 	or	r2,r3,r4
   1ac9c:	1004c03a 	cmpne	r2,r2,zero
   1aca0:	10803fcc 	andi	r2,r2,255
   1aca4:	10000d26 	beq	r2,zero,1acdc <secp256k1_fe_mul_inner+0x4c68>
   1aca8:	d0a01617 	ldw	r2,-32680(gp)
   1acac:	10c00317 	ldw	r3,12(r2)
   1acb0:	00800174 	movhi	r2,5
   1acb4:	1094a804 	addi	r2,r2,21152
   1acb8:	d8800015 	stw	r2,0(sp)
   1acbc:	01c0b104 	movi	r7,708
   1acc0:	01800174 	movhi	r6,5
   1acc4:	3191dd04 	addi	r6,r6,18292
   1acc8:	01400174 	movhi	r5,5
   1accc:	2951e804 	addi	r5,r5,18336
   1acd0:	1809883a 	mov	r4,r3
   1acd4:	00461000 	call	46100 <fprintf>
   1acd8:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    u8 = d & M; d >>= 26; c += u8 * R0;
   1acdc:	e0bdaf17 	ldw	r2,-2372(fp)
   1ace0:	e0bfce15 	stw	r2,-200(fp)
   1ace4:	e03fcf15 	stw	zero,-196(fp)
   1ace8:	e0bdb217 	ldw	r2,-2360(fp)
   1acec:	e1bfce17 	ldw	r6,-200(fp)
   1acf0:	1184703a 	and	r2,r2,r6
   1acf4:	e0bdcf15 	stw	r2,-2244(fp)
   1acf8:	e0bdb317 	ldw	r2,-2356(fp)
   1acfc:	e1ffcf17 	ldw	r7,-196(fp)
   1ad00:	11c4703a 	and	r2,r2,r7
   1ad04:	e0bdd015 	stw	r2,-2240(fp)
   1ad08:	e0bdb317 	ldw	r2,-2356(fp)
   1ad0c:	100691ba 	slli	r3,r2,6
   1ad10:	e0bdb217 	ldw	r2,-2360(fp)
   1ad14:	1004d6ba 	srli	r2,r2,26
   1ad18:	10c4b03a 	or	r2,r2,r3
   1ad1c:	e0bdb215 	stw	r2,-2360(fp)
   1ad20:	e0bdb317 	ldw	r2,-2356(fp)
   1ad24:	1004d6ba 	srli	r2,r2,26
   1ad28:	e0bdb315 	stw	r2,-2356(fp)
   1ad2c:	e0bdb017 	ldw	r2,-2368(fp)
   1ad30:	e0bfd015 	stw	r2,-192(fp)
   1ad34:	e03fd115 	stw	zero,-188(fp)
   1ad38:	e1bdcf17 	ldw	r6,-2244(fp)
   1ad3c:	e1fdd017 	ldw	r7,-2240(fp)
   1ad40:	e13fd017 	ldw	r4,-192(fp)
   1ad44:	e17fd117 	ldw	r5,-188(fp)
   1ad48:	00438e00 	call	438e0 <__muldi3>
   1ad4c:	1009883a 	mov	r4,r2
   1ad50:	180b883a 	mov	r5,r3
   1ad54:	200f883a 	mov	r7,r4
   1ad58:	2811883a 	mov	r8,r5
   1ad5c:	e13db517 	ldw	r4,-2348(fp)
   1ad60:	e17db617 	ldw	r5,-2344(fp)
   1ad64:	21c5883a 	add	r2,r4,r7
   1ad68:	110d803a 	cmpltu	r6,r2,r4
   1ad6c:	2a07883a 	add	r3,r5,r8
   1ad70:	30c9883a 	add	r4,r6,r3
   1ad74:	2007883a 	mov	r3,r4
   1ad78:	e0bdb515 	stw	r2,-2348(fp)
   1ad7c:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(u8, 26);
   1ad80:	e0bdd017 	ldw	r2,-2240(fp)
   1ad84:	100691ba 	slli	r3,r2,6
   1ad88:	e0bdcf17 	ldw	r2,-2244(fp)
   1ad8c:	1004d6ba 	srli	r2,r2,26
   1ad90:	e0bfd215 	stw	r2,-184(fp)
   1ad94:	e0bfd217 	ldw	r2,-184(fp)
   1ad98:	1886b03a 	or	r3,r3,r2
   1ad9c:	e0ffd215 	stw	r3,-184(fp)
   1ada0:	e0bdd017 	ldw	r2,-2240(fp)
   1ada4:	1004d6ba 	srli	r2,r2,26
   1ada8:	e0bfd315 	stw	r2,-180(fp)
   1adac:	e0ffd217 	ldw	r3,-184(fp)
   1adb0:	e13fd317 	ldw	r4,-180(fp)
   1adb4:	1904b03a 	or	r2,r3,r4
   1adb8:	1004c03a 	cmpne	r2,r2,zero
   1adbc:	10803fcc 	andi	r2,r2,255
   1adc0:	10000d26 	beq	r2,zero,1adf8 <secp256k1_fe_mul_inner+0x4d84>
   1adc4:	d0a01617 	ldw	r2,-32680(gp)
   1adc8:	10c00317 	ldw	r3,12(r2)
   1adcc:	00800174 	movhi	r2,5
   1add0:	1094b304 	addi	r2,r2,21196
   1add4:	d8800015 	stw	r2,0(sp)
   1add8:	01c0b1c4 	movi	r7,711
   1addc:	01800174 	movhi	r6,5
   1ade0:	3191dd04 	addi	r6,r6,18292
   1ade4:	01400174 	movhi	r5,5
   1ade8:	2951e804 	addi	r5,r5,18336
   1adec:	1809883a 	mov	r4,r3
   1adf0:	00461000 	call	46100 <fprintf>
   1adf4:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 31);
   1adf8:	e0bdb317 	ldw	r2,-2356(fp)
   1adfc:	1006907a 	slli	r3,r2,1
   1ae00:	e0bdb217 	ldw	r2,-2360(fp)
   1ae04:	1004d7fa 	srli	r2,r2,31
   1ae08:	e0bfd415 	stw	r2,-176(fp)
   1ae0c:	e1bfd417 	ldw	r6,-176(fp)
   1ae10:	1986b03a 	or	r3,r3,r6
   1ae14:	e0ffd415 	stw	r3,-176(fp)
   1ae18:	e0bdb317 	ldw	r2,-2356(fp)
   1ae1c:	1004d7fa 	srli	r2,r2,31
   1ae20:	e0bfd515 	stw	r2,-172(fp)
   1ae24:	e1ffd417 	ldw	r7,-176(fp)
   1ae28:	e0ffd517 	ldw	r3,-172(fp)
   1ae2c:	38c4b03a 	or	r2,r7,r3
   1ae30:	1004c03a 	cmpne	r2,r2,zero
   1ae34:	10803fcc 	andi	r2,r2,255
   1ae38:	10000d26 	beq	r2,zero,1ae70 <secp256k1_fe_mul_inner+0x4dfc>
   1ae3c:	d0a01617 	ldw	r2,-32680(gp)
   1ae40:	10c00317 	ldw	r3,12(r2)
   1ae44:	00800174 	movhi	r2,5
   1ae48:	1094be04 	addi	r2,r2,21240
   1ae4c:	d8800015 	stw	r2,0(sp)
   1ae50:	01c0b204 	movi	r7,712
   1ae54:	01800174 	movhi	r6,5
   1ae58:	3191dd04 	addi	r6,r6,18292
   1ae5c:	01400174 	movhi	r5,5
   1ae60:	2951e804 	addi	r5,r5,18336
   1ae64:	1809883a 	mov	r4,r3
   1ae68:	00461000 	call	46100 <fprintf>
   1ae6c:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x9000016FBFFFC2F8ULL);
   1ae70:	01000044 	movi	r4,1
   1ae74:	e0fdb617 	ldw	r3,-2344(fp)
   1ae78:	00a40034 	movhi	r2,36864
   1ae7c:	10805bc4 	addi	r2,r2,367
   1ae80:	10c00936 	bltu	r2,r3,1aea8 <secp256k1_fe_mul_inner+0x4e34>
   1ae84:	e0fdb617 	ldw	r3,-2344(fp)
   1ae88:	00a40034 	movhi	r2,36864
   1ae8c:	10805bc4 	addi	r2,r2,367
   1ae90:	1880041e 	bne	r3,r2,1aea4 <secp256k1_fe_mul_inner+0x4e30>
   1ae94:	e0fdb517 	ldw	r3,-2348(fp)
   1ae98:	00b00034 	movhi	r2,49152
   1ae9c:	10b0be04 	addi	r2,r2,-15624
   1aea0:	10c00136 	bltu	r2,r3,1aea8 <secp256k1_fe_mul_inner+0x4e34>
   1aea4:	0009883a 	mov	r4,zero
   1aea8:	20803fcc 	andi	r2,r4,255
   1aeac:	10000d26 	beq	r2,zero,1aee4 <secp256k1_fe_mul_inner+0x4e70>
   1aeb0:	d0a01617 	ldw	r2,-32680(gp)
   1aeb4:	10c00317 	ldw	r3,12(r2)
   1aeb8:	00800174 	movhi	r2,5
   1aebc:	1094c904 	addi	r2,r2,21284
   1aec0:	d8800015 	stw	r2,0(sp)
   1aec4:	01c0b284 	movi	r7,714
   1aec8:	01800174 	movhi	r6,5
   1aecc:	3191dd04 	addi	r6,r6,18292
   1aed0:	01400174 	movhi	r5,5
   1aed4:	2951e804 	addi	r5,r5,18336
   1aed8:	1809883a 	mov	r4,r3
   1aedc:	00461000 	call	46100 <fprintf>
   1aee0:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    r[3] = t3;
   1aee4:	e0bdd117 	ldw	r2,-2236(fp)
   1aee8:	10c00304 	addi	r3,r2,12
   1aeec:	e0bdc217 	ldw	r2,-2296(fp)
   1aef0:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[3], 26);
   1aef4:	e0bdd117 	ldw	r2,-2236(fp)
   1aef8:	10800304 	addi	r2,r2,12
   1aefc:	10800017 	ldw	r2,0(r2)
   1af00:	1004d6ba 	srli	r2,r2,26
   1af04:	1004c03a 	cmpne	r2,r2,zero
   1af08:	10803fcc 	andi	r2,r2,255
   1af0c:	10000d26 	beq	r2,zero,1af44 <secp256k1_fe_mul_inner+0x4ed0>
   1af10:	d0a01617 	ldw	r2,-32680(gp)
   1af14:	10c00317 	ldw	r3,12(r2)
   1af18:	00800174 	movhi	r2,5
   1af1c:	1094d604 	addi	r2,r2,21336
   1af20:	d8800015 	stw	r2,0(sp)
   1af24:	01c0b384 	movi	r7,718
   1af28:	01800174 	movhi	r6,5
   1af2c:	3191dd04 	addi	r6,r6,18292
   1af30:	01400174 	movhi	r5,5
   1af34:	2951e804 	addi	r5,r5,18336
   1af38:	1809883a 	mov	r4,r3
   1af3c:	00461000 	call	46100 <fprintf>
   1af40:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[4] = t4;
   1af44:	e0bdd117 	ldw	r2,-2236(fp)
   1af48:	10c00404 	addi	r3,r2,16
   1af4c:	e0bdc517 	ldw	r2,-2284(fp)
   1af50:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[4], 26);
   1af54:	e0bdd117 	ldw	r2,-2236(fp)
   1af58:	10800404 	addi	r2,r2,16
   1af5c:	10800017 	ldw	r2,0(r2)
   1af60:	1004d6ba 	srli	r2,r2,26
   1af64:	1004c03a 	cmpne	r2,r2,zero
   1af68:	10803fcc 	andi	r2,r2,255
   1af6c:	10000d26 	beq	r2,zero,1afa4 <secp256k1_fe_mul_inner+0x4f30>
   1af70:	d0a01617 	ldw	r2,-32680(gp)
   1af74:	10c00317 	ldw	r3,12(r2)
   1af78:	00800174 	movhi	r2,5
   1af7c:	1094e204 	addi	r2,r2,21384
   1af80:	d8800015 	stw	r2,0(sp)
   1af84:	01c0b444 	movi	r7,721
   1af88:	01800174 	movhi	r6,5
   1af8c:	3191dd04 	addi	r6,r6,18292
   1af90:	01400174 	movhi	r5,5
   1af94:	2951e804 	addi	r5,r5,18336
   1af98:	1809883a 	mov	r4,r3
   1af9c:	00461000 	call	46100 <fprintf>
   1afa0:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[5] = t5;
   1afa4:	e0bdd117 	ldw	r2,-2236(fp)
   1afa8:	10c00504 	addi	r3,r2,20
   1afac:	e0bdc817 	ldw	r2,-2272(fp)
   1afb0:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[5], 26);
   1afb4:	e0bdd117 	ldw	r2,-2236(fp)
   1afb8:	10800504 	addi	r2,r2,20
   1afbc:	10800017 	ldw	r2,0(r2)
   1afc0:	1004d6ba 	srli	r2,r2,26
   1afc4:	1004c03a 	cmpne	r2,r2,zero
   1afc8:	10803fcc 	andi	r2,r2,255
   1afcc:	10000d26 	beq	r2,zero,1b004 <secp256k1_fe_mul_inner+0x4f90>
   1afd0:	d0a01617 	ldw	r2,-32680(gp)
   1afd4:	10c00317 	ldw	r3,12(r2)
   1afd8:	00800174 	movhi	r2,5
   1afdc:	1094ee04 	addi	r2,r2,21432
   1afe0:	d8800015 	stw	r2,0(sp)
   1afe4:	01c0b504 	movi	r7,724
   1afe8:	01800174 	movhi	r6,5
   1afec:	3191dd04 	addi	r6,r6,18292
   1aff0:	01400174 	movhi	r5,5
   1aff4:	2951e804 	addi	r5,r5,18336
   1aff8:	1809883a 	mov	r4,r3
   1affc:	00461000 	call	46100 <fprintf>
   1b000:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[6] = t6;
   1b004:	e0bdd117 	ldw	r2,-2236(fp)
   1b008:	10c00604 	addi	r3,r2,24
   1b00c:	e0bdcb17 	ldw	r2,-2260(fp)
   1b010:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[6], 26);
   1b014:	e0bdd117 	ldw	r2,-2236(fp)
   1b018:	10800604 	addi	r2,r2,24
   1b01c:	10800017 	ldw	r2,0(r2)
   1b020:	1004d6ba 	srli	r2,r2,26
   1b024:	1004c03a 	cmpne	r2,r2,zero
   1b028:	10803fcc 	andi	r2,r2,255
   1b02c:	10000d26 	beq	r2,zero,1b064 <secp256k1_fe_mul_inner+0x4ff0>
   1b030:	d0a01617 	ldw	r2,-32680(gp)
   1b034:	10c00317 	ldw	r3,12(r2)
   1b038:	00800174 	movhi	r2,5
   1b03c:	1094fa04 	addi	r2,r2,21480
   1b040:	d8800015 	stw	r2,0(sp)
   1b044:	01c0b5c4 	movi	r7,727
   1b048:	01800174 	movhi	r6,5
   1b04c:	3191dd04 	addi	r6,r6,18292
   1b050:	01400174 	movhi	r5,5
   1b054:	2951e804 	addi	r5,r5,18336
   1b058:	1809883a 	mov	r4,r3
   1b05c:	00461000 	call	46100 <fprintf>
   1b060:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[7] = t7;
   1b064:	e0bdd117 	ldw	r2,-2236(fp)
   1b068:	10c00704 	addi	r3,r2,28
   1b06c:	e0bdce17 	ldw	r2,-2248(fp)
   1b070:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[7], 26);
   1b074:	e0bdd117 	ldw	r2,-2236(fp)
   1b078:	10800704 	addi	r2,r2,28
   1b07c:	10800017 	ldw	r2,0(r2)
   1b080:	1004d6ba 	srli	r2,r2,26
   1b084:	1004c03a 	cmpne	r2,r2,zero
   1b088:	10803fcc 	andi	r2,r2,255
   1b08c:	10000d26 	beq	r2,zero,1b0c4 <secp256k1_fe_mul_inner+0x5050>
   1b090:	d0a01617 	ldw	r2,-32680(gp)
   1b094:	10c00317 	ldw	r3,12(r2)
   1b098:	00800174 	movhi	r2,5
   1b09c:	10950604 	addi	r2,r2,21528
   1b0a0:	d8800015 	stw	r2,0(sp)
   1b0a4:	01c0b684 	movi	r7,730
   1b0a8:	01800174 	movhi	r6,5
   1b0ac:	3191dd04 	addi	r6,r6,18292
   1b0b0:	01400174 	movhi	r5,5
   1b0b4:	2951e804 	addi	r5,r5,18336
   1b0b8:	1809883a 	mov	r4,r3
   1b0bc:	00461000 	call	46100 <fprintf>
   1b0c0:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    r[8] = c & M; c >>= 26; c += u8 * R1;
   1b0c4:	e0bdd117 	ldw	r2,-2236(fp)
   1b0c8:	11000804 	addi	r4,r2,32
   1b0cc:	e0fdb517 	ldw	r3,-2348(fp)
   1b0d0:	e0bdaf17 	ldw	r2,-2372(fp)
   1b0d4:	1884703a 	and	r2,r3,r2
   1b0d8:	20800015 	stw	r2,0(r4)
   1b0dc:	e0bdb617 	ldw	r2,-2344(fp)
   1b0e0:	100691ba 	slli	r3,r2,6
   1b0e4:	e0bdb517 	ldw	r2,-2348(fp)
   1b0e8:	1004d6ba 	srli	r2,r2,26
   1b0ec:	10c4b03a 	or	r2,r2,r3
   1b0f0:	e0bdb515 	stw	r2,-2348(fp)
   1b0f4:	e0bdb617 	ldw	r2,-2344(fp)
   1b0f8:	1004d6ba 	srli	r2,r2,26
   1b0fc:	e0bdb615 	stw	r2,-2344(fp)
   1b100:	e0bdb117 	ldw	r2,-2364(fp)
   1b104:	e0bfd615 	stw	r2,-168(fp)
   1b108:	e03fd715 	stw	zero,-164(fp)
   1b10c:	e1bdcf17 	ldw	r6,-2244(fp)
   1b110:	e1fdd017 	ldw	r7,-2240(fp)
   1b114:	e13fd617 	ldw	r4,-168(fp)
   1b118:	e17fd717 	ldw	r5,-164(fp)
   1b11c:	00438e00 	call	438e0 <__muldi3>
   1b120:	1009883a 	mov	r4,r2
   1b124:	180b883a 	mov	r5,r3
   1b128:	200f883a 	mov	r7,r4
   1b12c:	2811883a 	mov	r8,r5
   1b130:	e13db517 	ldw	r4,-2348(fp)
   1b134:	e17db617 	ldw	r5,-2344(fp)
   1b138:	21c5883a 	add	r2,r4,r7
   1b13c:	110d803a 	cmpltu	r6,r2,r4
   1b140:	2a07883a 	add	r3,r5,r8
   1b144:	30c9883a 	add	r4,r6,r3
   1b148:	2007883a 	mov	r3,r4
   1b14c:	e0bdb515 	stw	r2,-2348(fp)
   1b150:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(r[8], 26);
   1b154:	e0bdd117 	ldw	r2,-2236(fp)
   1b158:	10800804 	addi	r2,r2,32
   1b15c:	10800017 	ldw	r2,0(r2)
   1b160:	1004d6ba 	srli	r2,r2,26
   1b164:	1004c03a 	cmpne	r2,r2,zero
   1b168:	10803fcc 	andi	r2,r2,255
   1b16c:	10000d26 	beq	r2,zero,1b1a4 <secp256k1_fe_mul_inner+0x5130>
   1b170:	d0a01617 	ldw	r2,-32680(gp)
   1b174:	10c00317 	ldw	r3,12(r2)
   1b178:	00800174 	movhi	r2,5
   1b17c:	10951204 	addi	r2,r2,21576
   1b180:	d8800015 	stw	r2,0(sp)
   1b184:	01c0b784 	movi	r7,734
   1b188:	01800174 	movhi	r6,5
   1b18c:	3191dd04 	addi	r6,r6,18292
   1b190:	01400174 	movhi	r5,5
   1b194:	2951e804 	addi	r5,r5,18336
   1b198:	1809883a 	mov	r4,r3
   1b19c:	00461000 	call	46100 <fprintf>
   1b1a0:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   1b1a4:	e0bdb617 	ldw	r2,-2344(fp)
   1b1a8:	1004d1fa 	srli	r2,r2,7
   1b1ac:	e0bfd815 	stw	r2,-160(fp)
   1b1b0:	e03fd915 	stw	zero,-156(fp)
   1b1b4:	e13fd817 	ldw	r4,-160(fp)
   1b1b8:	e1bfd917 	ldw	r6,-156(fp)
   1b1bc:	2184b03a 	or	r2,r4,r6
   1b1c0:	1004c03a 	cmpne	r2,r2,zero
   1b1c4:	10803fcc 	andi	r2,r2,255
   1b1c8:	10000d26 	beq	r2,zero,1b200 <secp256k1_fe_mul_inner+0x518c>
   1b1cc:	d0a01617 	ldw	r2,-32680(gp)
   1b1d0:	10c00317 	ldw	r3,12(r2)
   1b1d4:	00800174 	movhi	r2,5
   1b1d8:	1093dc04 	addi	r2,r2,20336
   1b1dc:	d8800015 	stw	r2,0(sp)
   1b1e0:	01c0b7c4 	movi	r7,735
   1b1e4:	01800174 	movhi	r6,5
   1b1e8:	3191dd04 	addi	r6,r6,18292
   1b1ec:	01400174 	movhi	r5,5
   1b1f0:	2951e804 	addi	r5,r5,18336
   1b1f4:	1809883a 	mov	r4,r3
   1b1f8:	00461000 	call	46100 <fprintf>
   1b1fc:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9+c-u8*R1 r8-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 0 t9+c r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    c   += d * R0 + t9;
   1b200:	e0bdb017 	ldw	r2,-2368(fp)
   1b204:	e0bfda15 	stw	r2,-152(fp)
   1b208:	e03fdb15 	stw	zero,-148(fp)
   1b20c:	e1bdb217 	ldw	r6,-2360(fp)
   1b210:	e1fdb317 	ldw	r7,-2356(fp)
   1b214:	e13fda17 	ldw	r4,-152(fp)
   1b218:	e17fdb17 	ldw	r5,-148(fp)
   1b21c:	00438e00 	call	438e0 <__muldi3>
   1b220:	100f883a 	mov	r7,r2
   1b224:	1811883a 	mov	r8,r3
   1b228:	380b883a 	mov	r5,r7
   1b22c:	400d883a 	mov	r6,r8
   1b230:	e0bdb417 	ldw	r2,-2352(fp)
   1b234:	e0bfdc15 	stw	r2,-144(fp)
   1b238:	e03fdd15 	stw	zero,-140(fp)
   1b23c:	e1ffdc17 	ldw	r7,-144(fp)
   1b240:	29c5883a 	add	r2,r5,r7
   1b244:	1149803a 	cmpltu	r4,r2,r5
   1b248:	e1ffdd17 	ldw	r7,-140(fp)
   1b24c:	31c7883a 	add	r3,r6,r7
   1b250:	20c9883a 	add	r4,r4,r3
   1b254:	2007883a 	mov	r3,r4
   1b258:	100f883a 	mov	r7,r2
   1b25c:	1811883a 	mov	r8,r3
   1b260:	e13db517 	ldw	r4,-2348(fp)
   1b264:	e17db617 	ldw	r5,-2344(fp)
   1b268:	21c5883a 	add	r2,r4,r7
   1b26c:	110d803a 	cmpltu	r6,r2,r4
   1b270:	2a07883a 	add	r3,r5,r8
   1b274:	30c9883a 	add	r4,r6,r3
   1b278:	2007883a 	mov	r3,r4
   1b27c:	e0bdb515 	stw	r2,-2348(fp)
   1b280:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(c, 45);
   1b284:	e0bdb617 	ldw	r2,-2344(fp)
   1b288:	1004d37a 	srli	r2,r2,13
   1b28c:	e0bfde15 	stw	r2,-136(fp)
   1b290:	e03fdf15 	stw	zero,-132(fp)
   1b294:	e0ffde17 	ldw	r3,-136(fp)
   1b298:	e13fdf17 	ldw	r4,-132(fp)
   1b29c:	1904b03a 	or	r2,r3,r4
   1b2a0:	1004c03a 	cmpne	r2,r2,zero
   1b2a4:	10803fcc 	andi	r2,r2,255
   1b2a8:	10000d26 	beq	r2,zero,1b2e0 <secp256k1_fe_mul_inner+0x526c>
   1b2ac:	d0a01617 	ldw	r2,-32680(gp)
   1b2b0:	10c00317 	ldw	r3,12(r2)
   1b2b4:	00800174 	movhi	r2,5
   1b2b8:	10951e04 	addi	r2,r2,21624
   1b2bc:	d8800015 	stw	r2,0(sp)
   1b2c0:	01c0b8c4 	movi	r7,739
   1b2c4:	01800174 	movhi	r6,5
   1b2c8:	3191dd04 	addi	r6,r6,18292
   1b2cc:	01400174 	movhi	r5,5
   1b2d0:	2951e804 	addi	r5,r5,18336
   1b2d4:	1809883a 	mov	r4,r3
   1b2d8:	00461000 	call	46100 <fprintf>
   1b2dc:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 0 0 c-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[9] = c & (M >> 4); c >>= 22; c += d * (R1 << 4);
   1b2e0:	e0bdd117 	ldw	r2,-2236(fp)
   1b2e4:	11000904 	addi	r4,r2,36
   1b2e8:	e0bdaf17 	ldw	r2,-2372(fp)
   1b2ec:	1006d13a 	srli	r3,r2,4
   1b2f0:	e0bdb517 	ldw	r2,-2348(fp)
   1b2f4:	1884703a 	and	r2,r3,r2
   1b2f8:	20800015 	stw	r2,0(r4)
   1b2fc:	e0bdb617 	ldw	r2,-2344(fp)
   1b300:	100692ba 	slli	r3,r2,10
   1b304:	e0bdb517 	ldw	r2,-2348(fp)
   1b308:	1004d5ba 	srli	r2,r2,22
   1b30c:	10c4b03a 	or	r2,r2,r3
   1b310:	e0bdb515 	stw	r2,-2348(fp)
   1b314:	e0bdb617 	ldw	r2,-2344(fp)
   1b318:	1004d5ba 	srli	r2,r2,22
   1b31c:	e0bdb615 	stw	r2,-2344(fp)
   1b320:	e0bdb117 	ldw	r2,-2364(fp)
   1b324:	1004913a 	slli	r2,r2,4
   1b328:	e0bfe015 	stw	r2,-128(fp)
   1b32c:	e03fe115 	stw	zero,-124(fp)
   1b330:	e1bdb217 	ldw	r6,-2360(fp)
   1b334:	e1fdb317 	ldw	r7,-2356(fp)
   1b338:	e13fe017 	ldw	r4,-128(fp)
   1b33c:	e17fe117 	ldw	r5,-124(fp)
   1b340:	00438e00 	call	438e0 <__muldi3>
   1b344:	1009883a 	mov	r4,r2
   1b348:	180b883a 	mov	r5,r3
   1b34c:	200f883a 	mov	r7,r4
   1b350:	2811883a 	mov	r8,r5
   1b354:	e13db517 	ldw	r4,-2348(fp)
   1b358:	e17db617 	ldw	r5,-2344(fp)
   1b35c:	21c5883a 	add	r2,r4,r7
   1b360:	110d803a 	cmpltu	r6,r2,r4
   1b364:	2a07883a 	add	r3,r5,r8
   1b368:	30c9883a 	add	r4,r6,r3
   1b36c:	2007883a 	mov	r3,r4
   1b370:	e0bdb515 	stw	r2,-2348(fp)
   1b374:	e0fdb615 	stw	r3,-2344(fp)
    VERIFY_BITS(r[9], 22);
   1b378:	e0bdd117 	ldw	r2,-2236(fp)
   1b37c:	10800904 	addi	r2,r2,36
   1b380:	10800017 	ldw	r2,0(r2)
   1b384:	1004d5ba 	srli	r2,r2,22
   1b388:	1004c03a 	cmpne	r2,r2,zero
   1b38c:	10803fcc 	andi	r2,r2,255
   1b390:	10000d26 	beq	r2,zero,1b3c8 <secp256k1_fe_mul_inner+0x5354>
   1b394:	d0a01617 	ldw	r2,-32680(gp)
   1b398:	10c00317 	ldw	r3,12(r2)
   1b39c:	00800174 	movhi	r2,5
   1b3a0:	10952904 	addi	r2,r2,21668
   1b3a4:	d8800015 	stw	r2,0(sp)
   1b3a8:	01c0b984 	movi	r7,742
   1b3ac:	01800174 	movhi	r6,5
   1b3b0:	3191dd04 	addi	r6,r6,18292
   1b3b4:	01400174 	movhi	r5,5
   1b3b8:	2951e804 	addi	r5,r5,18336
   1b3bc:	1809883a 	mov	r4,r3
   1b3c0:	00461000 	call	46100 <fprintf>
   1b3c4:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 46);
   1b3c8:	e0bdb617 	ldw	r2,-2344(fp)
   1b3cc:	1004d3ba 	srli	r2,r2,14
   1b3d0:	e0bfe215 	stw	r2,-120(fp)
   1b3d4:	e03fe315 	stw	zero,-116(fp)
   1b3d8:	e1bfe217 	ldw	r6,-120(fp)
   1b3dc:	e1ffe317 	ldw	r7,-116(fp)
   1b3e0:	31c4b03a 	or	r2,r6,r7
   1b3e4:	1004c03a 	cmpne	r2,r2,zero
   1b3e8:	10803fcc 	andi	r2,r2,255
   1b3ec:	10000d26 	beq	r2,zero,1b424 <secp256k1_fe_mul_inner+0x53b0>
   1b3f0:	d0a01617 	ldw	r2,-32680(gp)
   1b3f4:	10c00317 	ldw	r3,12(r2)
   1b3f8:	00800174 	movhi	r2,5
   1b3fc:	10953504 	addi	r2,r2,21716
   1b400:	d8800015 	stw	r2,0(sp)
   1b404:	01c0b9c4 	movi	r7,743
   1b408:	01800174 	movhi	r6,5
   1b40c:	3191dd04 	addi	r6,r6,18292
   1b410:	01400174 	movhi	r5,5
   1b414:	2951e804 	addi	r5,r5,18336
   1b418:	1809883a 	mov	r4,r3
   1b41c:	00461000 	call	46100 <fprintf>
   1b420:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 0 r9+((c-d*R1<<4)<<22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 -d*R1 r9+(c<<22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    d    = c * (R0 >> 4) + t0;
   1b424:	e0bdb017 	ldw	r2,-2368(fp)
   1b428:	1004d13a 	srli	r2,r2,4
   1b42c:	e0bfe415 	stw	r2,-112(fp)
   1b430:	e03fe515 	stw	zero,-108(fp)
   1b434:	e1bdb517 	ldw	r6,-2348(fp)
   1b438:	e1fdb617 	ldw	r7,-2344(fp)
   1b43c:	e13fe417 	ldw	r4,-112(fp)
   1b440:	e17fe517 	ldw	r5,-108(fp)
   1b444:	00438e00 	call	438e0 <__muldi3>
   1b448:	100d883a 	mov	r6,r2
   1b44c:	180f883a 	mov	r7,r3
   1b450:	3009883a 	mov	r4,r6
   1b454:	380b883a 	mov	r5,r7
   1b458:	e0bdb917 	ldw	r2,-2332(fp)
   1b45c:	e0bfe615 	stw	r2,-104(fp)
   1b460:	e03fe715 	stw	zero,-100(fp)
   1b464:	e1bfe617 	ldw	r6,-104(fp)
   1b468:	2185883a 	add	r2,r4,r6
   1b46c:	110d803a 	cmpltu	r6,r2,r4
   1b470:	e1ffe717 	ldw	r7,-100(fp)
   1b474:	29c7883a 	add	r3,r5,r7
   1b478:	30c9883a 	add	r4,r6,r3
   1b47c:	2007883a 	mov	r3,r4
   1b480:	e0bdb215 	stw	r2,-2360(fp)
   1b484:	e0fdb315 	stw	r3,-2356(fp)
    VERIFY_BITS(d, 56);
   1b488:	e0bdb317 	ldw	r2,-2356(fp)
   1b48c:	1004d63a 	srli	r2,r2,24
   1b490:	e0bfe815 	stw	r2,-96(fp)
   1b494:	e03fe915 	stw	zero,-92(fp)
   1b498:	e0ffe817 	ldw	r3,-96(fp)
   1b49c:	e13fe917 	ldw	r4,-92(fp)
   1b4a0:	1904b03a 	or	r2,r3,r4
   1b4a4:	1004c03a 	cmpne	r2,r2,zero
   1b4a8:	10803fcc 	andi	r2,r2,255
   1b4ac:	10000d26 	beq	r2,zero,1b4e4 <secp256k1_fe_mul_inner+0x5470>
   1b4b0:	d0a01617 	ldw	r2,-32680(gp)
   1b4b4:	10c00317 	ldw	r3,12(r2)
   1b4b8:	00800174 	movhi	r2,5
   1b4bc:	10954004 	addi	r2,r2,21760
   1b4c0:	d8800015 	stw	r2,0(sp)
   1b4c4:	01c0bb44 	movi	r7,749
   1b4c8:	01800174 	movhi	r6,5
   1b4cc:	3191dd04 	addi	r6,r6,18292
   1b4d0:	01400174 	movhi	r5,5
   1b4d4:	2951e804 	addi	r5,r5,18336
   1b4d8:	1809883a 	mov	r4,r3
   1b4dc:	00461000 	call	46100 <fprintf>
   1b4e0:	0045fd40 	call	45fd4 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1 d-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[0] = d & M; d >>= 26;
   1b4e4:	e0fdb217 	ldw	r3,-2360(fp)
   1b4e8:	e0bdaf17 	ldw	r2,-2372(fp)
   1b4ec:	1886703a 	and	r3,r3,r2
   1b4f0:	e0bdd117 	ldw	r2,-2236(fp)
   1b4f4:	10c00015 	stw	r3,0(r2)
   1b4f8:	e0bdb317 	ldw	r2,-2356(fp)
   1b4fc:	100491ba 	slli	r2,r2,6
   1b500:	e0fdb217 	ldw	r3,-2360(fp)
   1b504:	1806d6ba 	srli	r3,r3,26
   1b508:	1884b03a 	or	r2,r3,r2
   1b50c:	e0bdb215 	stw	r2,-2360(fp)
   1b510:	e0bdb317 	ldw	r2,-2356(fp)
   1b514:	1004d6ba 	srli	r2,r2,26
   1b518:	e0bdb315 	stw	r2,-2356(fp)
    VERIFY_BITS(r[0], 26);
   1b51c:	e0bdd117 	ldw	r2,-2236(fp)
   1b520:	10800017 	ldw	r2,0(r2)
   1b524:	1004d6ba 	srli	r2,r2,26
   1b528:	1004c03a 	cmpne	r2,r2,zero
   1b52c:	10803fcc 	andi	r2,r2,255
   1b530:	10000d26 	beq	r2,zero,1b568 <secp256k1_fe_mul_inner+0x54f4>
   1b534:	d0a01617 	ldw	r2,-32680(gp)
   1b538:	10c00317 	ldw	r3,12(r2)
   1b53c:	00800174 	movhi	r2,5
   1b540:	10954b04 	addi	r2,r2,21804
   1b544:	d8800015 	stw	r2,0(sp)
   1b548:	01c0bc04 	movi	r7,752
   1b54c:	01800174 	movhi	r6,5
   1b550:	3191dd04 	addi	r6,r6,18292
   1b554:	01400174 	movhi	r5,5
   1b558:	2951e804 	addi	r5,r5,18336
   1b55c:	1809883a 	mov	r4,r3
   1b560:	00461000 	call	46100 <fprintf>
   1b564:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 30);
   1b568:	e0bdb317 	ldw	r2,-2356(fp)
   1b56c:	100490ba 	slli	r2,r2,2
   1b570:	e0fdb217 	ldw	r3,-2360(fp)
   1b574:	1806d7ba 	srli	r3,r3,30
   1b578:	e0ffea15 	stw	r3,-88(fp)
   1b57c:	e1bfea17 	ldw	r6,-88(fp)
   1b580:	1184b03a 	or	r2,r2,r6
   1b584:	e0bfea15 	stw	r2,-88(fp)
   1b588:	e0bdb317 	ldw	r2,-2356(fp)
   1b58c:	1004d7ba 	srli	r2,r2,30
   1b590:	e0bfeb15 	stw	r2,-84(fp)
   1b594:	e1ffea17 	ldw	r7,-88(fp)
   1b598:	e0ffeb17 	ldw	r3,-84(fp)
   1b59c:	38c4b03a 	or	r2,r7,r3
   1b5a0:	1004c03a 	cmpne	r2,r2,zero
   1b5a4:	10803fcc 	andi	r2,r2,255
   1b5a8:	10000d26 	beq	r2,zero,1b5e0 <secp256k1_fe_mul_inner+0x556c>
   1b5ac:	d0a01617 	ldw	r2,-32680(gp)
   1b5b0:	10c00317 	ldw	r3,12(r2)
   1b5b4:	00800174 	movhi	r2,5
   1b5b8:	10955704 	addi	r2,r2,21852
   1b5bc:	d8800015 	stw	r2,0(sp)
   1b5c0:	01c0bc44 	movi	r7,753
   1b5c4:	01800174 	movhi	r6,5
   1b5c8:	3191dd04 	addi	r6,r6,18292
   1b5cc:	01400174 	movhi	r5,5
   1b5d0:	2951e804 	addi	r5,r5,18336
   1b5d4:	1809883a 	mov	r4,r3
   1b5d8:	00461000 	call	46100 <fprintf>
   1b5dc:	0045fd40 	call	45fd4 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1+d r0-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d   += c * (R1 >> 4) + t1;
   1b5e0:	e0bdb117 	ldw	r2,-2364(fp)
   1b5e4:	1004d13a 	srli	r2,r2,4
   1b5e8:	e0bfec15 	stw	r2,-80(fp)
   1b5ec:	e03fed15 	stw	zero,-76(fp)
   1b5f0:	e1bdb517 	ldw	r6,-2348(fp)
   1b5f4:	e1fdb617 	ldw	r7,-2344(fp)
   1b5f8:	e13fec17 	ldw	r4,-80(fp)
   1b5fc:	e17fed17 	ldw	r5,-76(fp)
   1b600:	00438e00 	call	438e0 <__muldi3>
   1b604:	100d883a 	mov	r6,r2
   1b608:	180f883a 	mov	r7,r3
   1b60c:	3009883a 	mov	r4,r6
   1b610:	380b883a 	mov	r5,r7
   1b614:	e0bdbc17 	ldw	r2,-2320(fp)
   1b618:	e0bfee15 	stw	r2,-72(fp)
   1b61c:	e03fef15 	stw	zero,-68(fp)
   1b620:	e1bfee17 	ldw	r6,-72(fp)
   1b624:	2185883a 	add	r2,r4,r6
   1b628:	110d803a 	cmpltu	r6,r2,r4
   1b62c:	e1ffef17 	ldw	r7,-68(fp)
   1b630:	29c7883a 	add	r3,r5,r7
   1b634:	30c9883a 	add	r4,r6,r3
   1b638:	2007883a 	mov	r3,r4
   1b63c:	100d883a 	mov	r6,r2
   1b640:	180f883a 	mov	r7,r3
   1b644:	e13db217 	ldw	r4,-2360(fp)
   1b648:	e17db317 	ldw	r5,-2356(fp)
   1b64c:	2185883a 	add	r2,r4,r6
   1b650:	1111803a 	cmpltu	r8,r2,r4
   1b654:	29c7883a 	add	r3,r5,r7
   1b658:	40c9883a 	add	r4,r8,r3
   1b65c:	2007883a 	mov	r3,r4
   1b660:	e0bdb215 	stw	r2,-2360(fp)
   1b664:	e0fdb315 	stw	r3,-2356(fp)
    VERIFY_BITS(d, 53);
   1b668:	e0bdb317 	ldw	r2,-2356(fp)
   1b66c:	1004d57a 	srli	r2,r2,21
   1b670:	e0bff015 	stw	r2,-64(fp)
   1b674:	e03ff115 	stw	zero,-60(fp)
   1b678:	e0fff017 	ldw	r3,-64(fp)
   1b67c:	e13ff117 	ldw	r4,-60(fp)
   1b680:	1904b03a 	or	r2,r3,r4
   1b684:	1004c03a 	cmpne	r2,r2,zero
   1b688:	10803fcc 	andi	r2,r2,255
   1b68c:	10000d26 	beq	r2,zero,1b6c4 <secp256k1_fe_mul_inner+0x5650>
   1b690:	d0a01617 	ldw	r2,-32680(gp)
   1b694:	10c00317 	ldw	r3,12(r2)
   1b698:	00800174 	movhi	r2,5
   1b69c:	10956204 	addi	r2,r2,21896
   1b6a0:	d8800015 	stw	r2,0(sp)
   1b6a4:	01c0bd04 	movi	r7,756
   1b6a8:	01800174 	movhi	r6,5
   1b6ac:	3191dd04 	addi	r6,r6,18292
   1b6b0:	01400174 	movhi	r5,5
   1b6b4:	2951e804 	addi	r5,r5,18336
   1b6b8:	1809883a 	mov	r4,r3
   1b6bc:	00461000 	call	46100 <fprintf>
   1b6c0:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(d <= 0x10000003FFFFBFULL);
   1b6c4:	01000044 	movi	r4,1
   1b6c8:	e0bdb317 	ldw	r2,-2356(fp)
   1b6cc:	00c00434 	movhi	r3,16
   1b6d0:	18800836 	bltu	r3,r2,1b6f4 <secp256k1_fe_mul_inner+0x5680>
   1b6d4:	e0fdb317 	ldw	r3,-2356(fp)
   1b6d8:	00800434 	movhi	r2,16
   1b6dc:	1880041e 	bne	r3,r2,1b6f0 <secp256k1_fe_mul_inner+0x567c>
   1b6e0:	e0fdb217 	ldw	r3,-2360(fp)
   1b6e4:	00810034 	movhi	r2,1024
   1b6e8:	10bfefc4 	addi	r2,r2,-65
   1b6ec:	10c00136 	bltu	r2,r3,1b6f4 <secp256k1_fe_mul_inner+0x5680>
   1b6f0:	0009883a 	mov	r4,zero
   1b6f4:	20803fcc 	andi	r2,r4,255
   1b6f8:	10000d26 	beq	r2,zero,1b730 <secp256k1_fe_mul_inner+0x56bc>
   1b6fc:	d0a01617 	ldw	r2,-32680(gp)
   1b700:	10c00317 	ldw	r3,12(r2)
   1b704:	00800174 	movhi	r2,5
   1b708:	10956d04 	addi	r2,r2,21940
   1b70c:	d8800015 	stw	r2,0(sp)
   1b710:	01c0bd44 	movi	r7,757
   1b714:	01800174 	movhi	r6,5
   1b718:	3191dd04 	addi	r6,r6,18292
   1b71c:	01400174 	movhi	r5,5
   1b720:	2951e804 	addi	r5,r5,18336
   1b724:	1809883a 	mov	r4,r3
   1b728:	00461000 	call	46100 <fprintf>
   1b72c:	0045fd40 	call	45fd4 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 d-c*R1>>4 r0-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [r9 r8 r7 r6 r5 r4 r3 t2 d r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[1] = d & M; d >>= 26;
   1b730:	e0bdd117 	ldw	r2,-2236(fp)
   1b734:	10800104 	addi	r2,r2,4
   1b738:	e13db217 	ldw	r4,-2360(fp)
   1b73c:	e0fdaf17 	ldw	r3,-2372(fp)
   1b740:	20c6703a 	and	r3,r4,r3
   1b744:	10c00015 	stw	r3,0(r2)
   1b748:	e0bdb317 	ldw	r2,-2356(fp)
   1b74c:	100491ba 	slli	r2,r2,6
   1b750:	e0fdb217 	ldw	r3,-2360(fp)
   1b754:	1806d6ba 	srli	r3,r3,26
   1b758:	1884b03a 	or	r2,r3,r2
   1b75c:	e0bdb215 	stw	r2,-2360(fp)
   1b760:	e0bdb317 	ldw	r2,-2356(fp)
   1b764:	1004d6ba 	srli	r2,r2,26
   1b768:	e0bdb315 	stw	r2,-2356(fp)
    VERIFY_BITS(r[1], 26);
   1b76c:	e0bdd117 	ldw	r2,-2236(fp)
   1b770:	10800104 	addi	r2,r2,4
   1b774:	10800017 	ldw	r2,0(r2)
   1b778:	1004d6ba 	srli	r2,r2,26
   1b77c:	1004c03a 	cmpne	r2,r2,zero
   1b780:	10803fcc 	andi	r2,r2,255
   1b784:	10000d26 	beq	r2,zero,1b7bc <secp256k1_fe_mul_inner+0x5748>
   1b788:	d0a01617 	ldw	r2,-32680(gp)
   1b78c:	10c00317 	ldw	r3,12(r2)
   1b790:	00800174 	movhi	r2,5
   1b794:	10957904 	addi	r2,r2,21988
   1b798:	d8800015 	stw	r2,0(sp)
   1b79c:	01c0be44 	movi	r7,761
   1b7a0:	01800174 	movhi	r6,5
   1b7a4:	3191dd04 	addi	r6,r6,18292
   1b7a8:	01400174 	movhi	r5,5
   1b7ac:	2951e804 	addi	r5,r5,18336
   1b7b0:	1809883a 	mov	r4,r3
   1b7b4:	00461000 	call	46100 <fprintf>
   1b7b8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 27);
   1b7bc:	e0bdb317 	ldw	r2,-2356(fp)
   1b7c0:	1004917a 	slli	r2,r2,5
   1b7c4:	e0fdb217 	ldw	r3,-2360(fp)
   1b7c8:	1806d6fa 	srli	r3,r3,27
   1b7cc:	e0fff215 	stw	r3,-56(fp)
   1b7d0:	e1bff217 	ldw	r6,-56(fp)
   1b7d4:	1184b03a 	or	r2,r2,r6
   1b7d8:	e0bff215 	stw	r2,-56(fp)
   1b7dc:	e0bdb317 	ldw	r2,-2356(fp)
   1b7e0:	1004d6fa 	srli	r2,r2,27
   1b7e4:	e0bff315 	stw	r2,-52(fp)
   1b7e8:	e1fff217 	ldw	r7,-56(fp)
   1b7ec:	e0fff317 	ldw	r3,-52(fp)
   1b7f0:	38c4b03a 	or	r2,r7,r3
   1b7f4:	1004c03a 	cmpne	r2,r2,zero
   1b7f8:	10803fcc 	andi	r2,r2,255
   1b7fc:	10000d26 	beq	r2,zero,1b834 <secp256k1_fe_mul_inner+0x57c0>
   1b800:	d0a01617 	ldw	r2,-32680(gp)
   1b804:	10c00317 	ldw	r3,12(r2)
   1b808:	00800174 	movhi	r2,5
   1b80c:	10958504 	addi	r2,r2,22036
   1b810:	d8800015 	stw	r2,0(sp)
   1b814:	01c0be84 	movi	r7,762
   1b818:	01800174 	movhi	r6,5
   1b81c:	3191dd04 	addi	r6,r6,18292
   1b820:	01400174 	movhi	r5,5
   1b824:	2951e804 	addi	r5,r5,18336
   1b828:	1809883a 	mov	r4,r3
   1b82c:	00461000 	call	46100 <fprintf>
   1b830:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(d <= 0x4000000ULL);
   1b834:	01000044 	movi	r4,1
   1b838:	e0bdb317 	ldw	r2,-2356(fp)
   1b83c:	1000061e 	bne	r2,zero,1b858 <secp256k1_fe_mul_inner+0x57e4>
   1b840:	e0bdb317 	ldw	r2,-2356(fp)
   1b844:	1000031e 	bne	r2,zero,1b854 <secp256k1_fe_mul_inner+0x57e0>
   1b848:	e0bdb217 	ldw	r2,-2360(fp)
   1b84c:	00c10034 	movhi	r3,1024
   1b850:	18800136 	bltu	r3,r2,1b858 <secp256k1_fe_mul_inner+0x57e4>
   1b854:	0009883a 	mov	r4,zero
   1b858:	20803fcc 	andi	r2,r4,255
   1b85c:	10000d26 	beq	r2,zero,1b894 <secp256k1_fe_mul_inner+0x5820>
   1b860:	d0a01617 	ldw	r2,-32680(gp)
   1b864:	10c00317 	ldw	r3,12(r2)
   1b868:	00800174 	movhi	r2,5
   1b86c:	10959004 	addi	r2,r2,22080
   1b870:	d8800015 	stw	r2,0(sp)
   1b874:	01c0bec4 	movi	r7,763
   1b878:	01800174 	movhi	r6,5
   1b87c:	3191dd04 	addi	r6,r6,18292
   1b880:	01400174 	movhi	r5,5
   1b884:	2951e804 	addi	r5,r5,18336
   1b888:	1809883a 	mov	r4,r3
   1b88c:	00461000 	call	46100 <fprintf>
   1b890:	0045fd40 	call	45fd4 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 t2+d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d   += t2;
   1b894:	e0bdbf17 	ldw	r2,-2308(fp)
   1b898:	e0bff415 	stw	r2,-48(fp)
   1b89c:	e03ff515 	stw	zero,-44(fp)
   1b8a0:	e13db217 	ldw	r4,-2360(fp)
   1b8a4:	e17db317 	ldw	r5,-2356(fp)
   1b8a8:	e1bff417 	ldw	r6,-48(fp)
   1b8ac:	2185883a 	add	r2,r4,r6
   1b8b0:	110d803a 	cmpltu	r6,r2,r4
   1b8b4:	e1fff517 	ldw	r7,-44(fp)
   1b8b8:	29c7883a 	add	r3,r5,r7
   1b8bc:	30c9883a 	add	r4,r6,r3
   1b8c0:	2007883a 	mov	r3,r4
   1b8c4:	e0bdb215 	stw	r2,-2360(fp)
   1b8c8:	e0fdb315 	stw	r3,-2356(fp)
    VERIFY_BITS(d, 27);
   1b8cc:	e0bdb317 	ldw	r2,-2356(fp)
   1b8d0:	1004917a 	slli	r2,r2,5
   1b8d4:	e0fdb217 	ldw	r3,-2360(fp)
   1b8d8:	1806d6fa 	srli	r3,r3,27
   1b8dc:	e0fff615 	stw	r3,-40(fp)
   1b8e0:	e0fff617 	ldw	r3,-40(fp)
   1b8e4:	10c4b03a 	or	r2,r2,r3
   1b8e8:	e0bff615 	stw	r2,-40(fp)
   1b8ec:	e0bdb317 	ldw	r2,-2356(fp)
   1b8f0:	1004d6fa 	srli	r2,r2,27
   1b8f4:	e0bff715 	stw	r2,-36(fp)
   1b8f8:	e13ff617 	ldw	r4,-40(fp)
   1b8fc:	e1bff717 	ldw	r6,-36(fp)
   1b900:	2184b03a 	or	r2,r4,r6
   1b904:	1004c03a 	cmpne	r2,r2,zero
   1b908:	10803fcc 	andi	r2,r2,255
   1b90c:	10000d26 	beq	r2,zero,1b944 <secp256k1_fe_mul_inner+0x58d0>
   1b910:	d0a01617 	ldw	r2,-32680(gp)
   1b914:	10c00317 	ldw	r3,12(r2)
   1b918:	00800174 	movhi	r2,5
   1b91c:	10958504 	addi	r2,r2,22036
   1b920:	d8800015 	stw	r2,0(sp)
   1b924:	01c0bf84 	movi	r7,766
   1b928:	01800174 	movhi	r6,5
   1b92c:	3191dd04 	addi	r6,r6,18292
   1b930:	01400174 	movhi	r5,5
   1b934:	2951e804 	addi	r5,r5,18336
   1b938:	1809883a 	mov	r4,r3
   1b93c:	00461000 	call	46100 <fprintf>
   1b940:	0045fd40 	call	45fd4 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[2] = d;
   1b944:	e0bdd117 	ldw	r2,-2236(fp)
   1b948:	10800204 	addi	r2,r2,8
   1b94c:	e0fdb217 	ldw	r3,-2360(fp)
   1b950:	10c00015 	stw	r3,0(r2)
    VERIFY_BITS(r[2], 27);
   1b954:	e0bdd117 	ldw	r2,-2236(fp)
   1b958:	10800204 	addi	r2,r2,8
   1b95c:	10800017 	ldw	r2,0(r2)
   1b960:	1004d6fa 	srli	r2,r2,27
   1b964:	1004c03a 	cmpne	r2,r2,zero
   1b968:	10803fcc 	andi	r2,r2,255
   1b96c:	10000d26 	beq	r2,zero,1b9a4 <secp256k1_fe_mul_inner+0x5930>
   1b970:	d0a01617 	ldw	r2,-32680(gp)
   1b974:	10c00317 	ldw	r3,12(r2)
   1b978:	00800174 	movhi	r2,5
   1b97c:	10959b04 	addi	r2,r2,22124
   1b980:	d8800015 	stw	r2,0(sp)
   1b984:	01c0c044 	movi	r7,769
   1b988:	01800174 	movhi	r6,5
   1b98c:	3191dd04 	addi	r6,r6,18292
   1b990:	01400174 	movhi	r5,5
   1b994:	2951e804 	addi	r5,r5,18336
   1b998:	1809883a 	mov	r4,r3
   1b99c:	00461000 	call	46100 <fprintf>
   1b9a0:	0045fd40 	call	45fd4 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 r2 r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
}
   1b9a4:	0001883a 	nop
   1b9a8:	e6fff804 	addi	sp,fp,-32
   1b9ac:	dfc00917 	ldw	ra,36(sp)
   1b9b0:	df000817 	ldw	fp,32(sp)
   1b9b4:	ddc00717 	ldw	r23,28(sp)
   1b9b8:	dd800617 	ldw	r22,24(sp)
   1b9bc:	dd400517 	ldw	r21,20(sp)
   1b9c0:	dd000417 	ldw	r20,16(sp)
   1b9c4:	dcc00317 	ldw	r19,12(sp)
   1b9c8:	dc800217 	ldw	r18,8(sp)
   1b9cc:	dc400117 	ldw	r17,4(sp)
   1b9d0:	dc000017 	ldw	r16,0(sp)
   1b9d4:	dec00a04 	addi	sp,sp,40
   1b9d8:	f800283a 	ret

0001b9dc <secp256k1_fe_sqr_inner>:

SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t *a) {
   1b9dc:	defe6104 	addi	sp,sp,-1660
   1b9e0:	dfc19e15 	stw	ra,1656(sp)
   1b9e4:	df019d15 	stw	fp,1652(sp)
   1b9e8:	ddc19c15 	stw	r23,1648(sp)
   1b9ec:	dd819b15 	stw	r22,1644(sp)
   1b9f0:	dd419a15 	stw	r21,1640(sp)
   1b9f4:	dd019915 	stw	r20,1636(sp)
   1b9f8:	dcc19815 	stw	r19,1632(sp)
   1b9fc:	dc819715 	stw	r18,1628(sp)
   1ba00:	dc419615 	stw	r17,1624(sp)
   1ba04:	dc019515 	stw	r16,1620(sp)
   1ba08:	df019d04 	addi	fp,sp,1652
   1ba0c:	e13e8615 	stw	r4,-1512(fp)
   1ba10:	e17e8715 	stw	r5,-1508(fp)
    uint64_t c, d;
    uint64_t u0, u1, u2, u3, u4, u5, u6, u7, u8;
    uint32_t t9, t0, t1, t2, t3, t4, t5, t6, t7;
    const uint32_t M = 0x3FFFFFFUL, R0 = 0x3D10UL, R1 = 0x400UL;
   1ba14:	00810034 	movhi	r2,1024
   1ba18:	10bfffc4 	addi	r2,r2,-1
   1ba1c:	e0be6415 	stw	r2,-1648(fp)
   1ba20:	008f4404 	movi	r2,15632
   1ba24:	e0be6515 	stw	r2,-1644(fp)
   1ba28:	00810004 	movi	r2,1024
   1ba2c:	e0be6615 	stw	r2,-1640(fp)

    VERIFY_BITS(a[0], 30);
   1ba30:	e0be8717 	ldw	r2,-1508(fp)
   1ba34:	10800017 	ldw	r2,0(r2)
   1ba38:	1004d7ba 	srli	r2,r2,30
   1ba3c:	1004c03a 	cmpne	r2,r2,zero
   1ba40:	10803fcc 	andi	r2,r2,255
   1ba44:	10000d26 	beq	r2,zero,1ba7c <secp256k1_fe_sqr_inner+0xa0>
   1ba48:	d0a01617 	ldw	r2,-32680(gp)
   1ba4c:	10c00317 	ldw	r3,12(r2)
   1ba50:	00800174 	movhi	r2,5
   1ba54:	10922604 	addi	r2,r2,18584
   1ba58:	d8800015 	stw	r2,0(sp)
   1ba5c:	01c0c2c4 	movi	r7,779
   1ba60:	01800174 	movhi	r6,5
   1ba64:	3191dd04 	addi	r6,r6,18292
   1ba68:	01400174 	movhi	r5,5
   1ba6c:	2951e804 	addi	r5,r5,18336
   1ba70:	1809883a 	mov	r4,r3
   1ba74:	00461000 	call	46100 <fprintf>
   1ba78:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[1], 30);
   1ba7c:	e0be8717 	ldw	r2,-1508(fp)
   1ba80:	10800104 	addi	r2,r2,4
   1ba84:	10800017 	ldw	r2,0(r2)
   1ba88:	1004d7ba 	srli	r2,r2,30
   1ba8c:	1004c03a 	cmpne	r2,r2,zero
   1ba90:	10803fcc 	andi	r2,r2,255
   1ba94:	10000d26 	beq	r2,zero,1bacc <secp256k1_fe_sqr_inner+0xf0>
   1ba98:	d0a01617 	ldw	r2,-32680(gp)
   1ba9c:	10c00317 	ldw	r3,12(r2)
   1baa0:	00800174 	movhi	r2,5
   1baa4:	10923204 	addi	r2,r2,18632
   1baa8:	d8800015 	stw	r2,0(sp)
   1baac:	01c0c304 	movi	r7,780
   1bab0:	01800174 	movhi	r6,5
   1bab4:	3191dd04 	addi	r6,r6,18292
   1bab8:	01400174 	movhi	r5,5
   1babc:	2951e804 	addi	r5,r5,18336
   1bac0:	1809883a 	mov	r4,r3
   1bac4:	00461000 	call	46100 <fprintf>
   1bac8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[2], 30);
   1bacc:	e0be8717 	ldw	r2,-1508(fp)
   1bad0:	10800204 	addi	r2,r2,8
   1bad4:	10800017 	ldw	r2,0(r2)
   1bad8:	1004d7ba 	srli	r2,r2,30
   1badc:	1004c03a 	cmpne	r2,r2,zero
   1bae0:	10803fcc 	andi	r2,r2,255
   1bae4:	10000d26 	beq	r2,zero,1bb1c <secp256k1_fe_sqr_inner+0x140>
   1bae8:	d0a01617 	ldw	r2,-32680(gp)
   1baec:	10c00317 	ldw	r3,12(r2)
   1baf0:	00800174 	movhi	r2,5
   1baf4:	10923e04 	addi	r2,r2,18680
   1baf8:	d8800015 	stw	r2,0(sp)
   1bafc:	01c0c344 	movi	r7,781
   1bb00:	01800174 	movhi	r6,5
   1bb04:	3191dd04 	addi	r6,r6,18292
   1bb08:	01400174 	movhi	r5,5
   1bb0c:	2951e804 	addi	r5,r5,18336
   1bb10:	1809883a 	mov	r4,r3
   1bb14:	00461000 	call	46100 <fprintf>
   1bb18:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[3], 30);
   1bb1c:	e0be8717 	ldw	r2,-1508(fp)
   1bb20:	10800304 	addi	r2,r2,12
   1bb24:	10800017 	ldw	r2,0(r2)
   1bb28:	1004d7ba 	srli	r2,r2,30
   1bb2c:	1004c03a 	cmpne	r2,r2,zero
   1bb30:	10803fcc 	andi	r2,r2,255
   1bb34:	10000d26 	beq	r2,zero,1bb6c <secp256k1_fe_sqr_inner+0x190>
   1bb38:	d0a01617 	ldw	r2,-32680(gp)
   1bb3c:	10c00317 	ldw	r3,12(r2)
   1bb40:	00800174 	movhi	r2,5
   1bb44:	10924a04 	addi	r2,r2,18728
   1bb48:	d8800015 	stw	r2,0(sp)
   1bb4c:	01c0c384 	movi	r7,782
   1bb50:	01800174 	movhi	r6,5
   1bb54:	3191dd04 	addi	r6,r6,18292
   1bb58:	01400174 	movhi	r5,5
   1bb5c:	2951e804 	addi	r5,r5,18336
   1bb60:	1809883a 	mov	r4,r3
   1bb64:	00461000 	call	46100 <fprintf>
   1bb68:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[4], 30);
   1bb6c:	e0be8717 	ldw	r2,-1508(fp)
   1bb70:	10800404 	addi	r2,r2,16
   1bb74:	10800017 	ldw	r2,0(r2)
   1bb78:	1004d7ba 	srli	r2,r2,30
   1bb7c:	1004c03a 	cmpne	r2,r2,zero
   1bb80:	10803fcc 	andi	r2,r2,255
   1bb84:	10000d26 	beq	r2,zero,1bbbc <secp256k1_fe_sqr_inner+0x1e0>
   1bb88:	d0a01617 	ldw	r2,-32680(gp)
   1bb8c:	10c00317 	ldw	r3,12(r2)
   1bb90:	00800174 	movhi	r2,5
   1bb94:	10925604 	addi	r2,r2,18776
   1bb98:	d8800015 	stw	r2,0(sp)
   1bb9c:	01c0c3c4 	movi	r7,783
   1bba0:	01800174 	movhi	r6,5
   1bba4:	3191dd04 	addi	r6,r6,18292
   1bba8:	01400174 	movhi	r5,5
   1bbac:	2951e804 	addi	r5,r5,18336
   1bbb0:	1809883a 	mov	r4,r3
   1bbb4:	00461000 	call	46100 <fprintf>
   1bbb8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[5], 30);
   1bbbc:	e0be8717 	ldw	r2,-1508(fp)
   1bbc0:	10800504 	addi	r2,r2,20
   1bbc4:	10800017 	ldw	r2,0(r2)
   1bbc8:	1004d7ba 	srli	r2,r2,30
   1bbcc:	1004c03a 	cmpne	r2,r2,zero
   1bbd0:	10803fcc 	andi	r2,r2,255
   1bbd4:	10000d26 	beq	r2,zero,1bc0c <secp256k1_fe_sqr_inner+0x230>
   1bbd8:	d0a01617 	ldw	r2,-32680(gp)
   1bbdc:	10c00317 	ldw	r3,12(r2)
   1bbe0:	00800174 	movhi	r2,5
   1bbe4:	10926204 	addi	r2,r2,18824
   1bbe8:	d8800015 	stw	r2,0(sp)
   1bbec:	01c0c404 	movi	r7,784
   1bbf0:	01800174 	movhi	r6,5
   1bbf4:	3191dd04 	addi	r6,r6,18292
   1bbf8:	01400174 	movhi	r5,5
   1bbfc:	2951e804 	addi	r5,r5,18336
   1bc00:	1809883a 	mov	r4,r3
   1bc04:	00461000 	call	46100 <fprintf>
   1bc08:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[6], 30);
   1bc0c:	e0be8717 	ldw	r2,-1508(fp)
   1bc10:	10800604 	addi	r2,r2,24
   1bc14:	10800017 	ldw	r2,0(r2)
   1bc18:	1004d7ba 	srli	r2,r2,30
   1bc1c:	1004c03a 	cmpne	r2,r2,zero
   1bc20:	10803fcc 	andi	r2,r2,255
   1bc24:	10000d26 	beq	r2,zero,1bc5c <secp256k1_fe_sqr_inner+0x280>
   1bc28:	d0a01617 	ldw	r2,-32680(gp)
   1bc2c:	10c00317 	ldw	r3,12(r2)
   1bc30:	00800174 	movhi	r2,5
   1bc34:	10926e04 	addi	r2,r2,18872
   1bc38:	d8800015 	stw	r2,0(sp)
   1bc3c:	01c0c444 	movi	r7,785
   1bc40:	01800174 	movhi	r6,5
   1bc44:	3191dd04 	addi	r6,r6,18292
   1bc48:	01400174 	movhi	r5,5
   1bc4c:	2951e804 	addi	r5,r5,18336
   1bc50:	1809883a 	mov	r4,r3
   1bc54:	00461000 	call	46100 <fprintf>
   1bc58:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[7], 30);
   1bc5c:	e0be8717 	ldw	r2,-1508(fp)
   1bc60:	10800704 	addi	r2,r2,28
   1bc64:	10800017 	ldw	r2,0(r2)
   1bc68:	1004d7ba 	srli	r2,r2,30
   1bc6c:	1004c03a 	cmpne	r2,r2,zero
   1bc70:	10803fcc 	andi	r2,r2,255
   1bc74:	10000d26 	beq	r2,zero,1bcac <secp256k1_fe_sqr_inner+0x2d0>
   1bc78:	d0a01617 	ldw	r2,-32680(gp)
   1bc7c:	10c00317 	ldw	r3,12(r2)
   1bc80:	00800174 	movhi	r2,5
   1bc84:	10927a04 	addi	r2,r2,18920
   1bc88:	d8800015 	stw	r2,0(sp)
   1bc8c:	01c0c484 	movi	r7,786
   1bc90:	01800174 	movhi	r6,5
   1bc94:	3191dd04 	addi	r6,r6,18292
   1bc98:	01400174 	movhi	r5,5
   1bc9c:	2951e804 	addi	r5,r5,18336
   1bca0:	1809883a 	mov	r4,r3
   1bca4:	00461000 	call	46100 <fprintf>
   1bca8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[8], 30);
   1bcac:	e0be8717 	ldw	r2,-1508(fp)
   1bcb0:	10800804 	addi	r2,r2,32
   1bcb4:	10800017 	ldw	r2,0(r2)
   1bcb8:	1004d7ba 	srli	r2,r2,30
   1bcbc:	1004c03a 	cmpne	r2,r2,zero
   1bcc0:	10803fcc 	andi	r2,r2,255
   1bcc4:	10000d26 	beq	r2,zero,1bcfc <secp256k1_fe_sqr_inner+0x320>
   1bcc8:	d0a01617 	ldw	r2,-32680(gp)
   1bccc:	10c00317 	ldw	r3,12(r2)
   1bcd0:	00800174 	movhi	r2,5
   1bcd4:	10928604 	addi	r2,r2,18968
   1bcd8:	d8800015 	stw	r2,0(sp)
   1bcdc:	01c0c4c4 	movi	r7,787
   1bce0:	01800174 	movhi	r6,5
   1bce4:	3191dd04 	addi	r6,r6,18292
   1bce8:	01400174 	movhi	r5,5
   1bcec:	2951e804 	addi	r5,r5,18336
   1bcf0:	1809883a 	mov	r4,r3
   1bcf4:	00461000 	call	46100 <fprintf>
   1bcf8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(a[9], 26);
   1bcfc:	e0be8717 	ldw	r2,-1508(fp)
   1bd00:	10800904 	addi	r2,r2,36
   1bd04:	10800017 	ldw	r2,0(r2)
   1bd08:	1004d6ba 	srli	r2,r2,26
   1bd0c:	1004c03a 	cmpne	r2,r2,zero
   1bd10:	10803fcc 	andi	r2,r2,255
   1bd14:	10000d26 	beq	r2,zero,1bd4c <secp256k1_fe_sqr_inner+0x370>
   1bd18:	d0a01617 	ldw	r2,-32680(gp)
   1bd1c:	10c00317 	ldw	r3,12(r2)
   1bd20:	00800174 	movhi	r2,5
   1bd24:	10929204 	addi	r2,r2,19016
   1bd28:	d8800015 	stw	r2,0(sp)
   1bd2c:	01c0c504 	movi	r7,788
   1bd30:	01800174 	movhi	r6,5
   1bd34:	3191dd04 	addi	r6,r6,18292
   1bd38:	01400174 	movhi	r5,5
   1bd3c:	2951e804 	addi	r5,r5,18336
   1bd40:	1809883a 	mov	r4,r3
   1bd44:	00461000 	call	46100 <fprintf>
   1bd48:	0045fd40 	call	45fd4 <abort>
    /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.
     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)(a[0]*2) * a[9]
   1bd4c:	e0be8717 	ldw	r2,-1508(fp)
   1bd50:	10800017 	ldw	r2,0(r2)
   1bd54:	1085883a 	add	r2,r2,r2
   1bd58:	1013883a 	mov	r9,r2
   1bd5c:	0015883a 	mov	r10,zero
   1bd60:	e0be8717 	ldw	r2,-1508(fp)
   1bd64:	10800904 	addi	r2,r2,36
   1bd68:	10800017 	ldw	r2,0(r2)
   1bd6c:	100f883a 	mov	r7,r2
   1bd70:	0011883a 	mov	r8,zero
   1bd74:	380d883a 	mov	r6,r7
   1bd78:	400f883a 	mov	r7,r8
   1bd7c:	4809883a 	mov	r4,r9
   1bd80:	500b883a 	mov	r5,r10
   1bd84:	00438e00 	call	438e0 <__muldi3>
   1bd88:	1009883a 	mov	r4,r2
   1bd8c:	180b883a 	mov	r5,r3
   1bd90:	2021883a 	mov	r16,r4
   1bd94:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[8]
   1bd98:	e0be8717 	ldw	r2,-1508(fp)
   1bd9c:	10800104 	addi	r2,r2,4
   1bda0:	10800017 	ldw	r2,0(r2)
   1bda4:	1085883a 	add	r2,r2,r2
   1bda8:	e0be8815 	stw	r2,-1504(fp)
   1bdac:	e03e8915 	stw	zero,-1500(fp)
   1bdb0:	e0be8717 	ldw	r2,-1508(fp)
   1bdb4:	10800804 	addi	r2,r2,32
   1bdb8:	10800017 	ldw	r2,0(r2)
   1bdbc:	1025883a 	mov	r18,r2
   1bdc0:	0027883a 	mov	r19,zero
   1bdc4:	900d883a 	mov	r6,r18
   1bdc8:	980f883a 	mov	r7,r19
   1bdcc:	e13e8817 	ldw	r4,-1504(fp)
   1bdd0:	e17e8917 	ldw	r5,-1500(fp)
   1bdd4:	00438e00 	call	438e0 <__muldi3>
   1bdd8:	100f883a 	mov	r7,r2
   1bddc:	1811883a 	mov	r8,r3
   1bde0:	380b883a 	mov	r5,r7
   1bde4:	400d883a 	mov	r6,r8
   1bde8:	8145883a 	add	r2,r16,r5
   1bdec:	1409803a 	cmpltu	r4,r2,r16
   1bdf0:	8987883a 	add	r3,r17,r6
   1bdf4:	20c9883a 	add	r4,r4,r3
   1bdf8:	2007883a 	mov	r3,r4
   1bdfc:	1025883a 	mov	r18,r2
   1be00:	1827883a 	mov	r19,r3
       + (uint64_t)(a[2]*2) * a[7]
       + (uint64_t)(a[3]*2) * a[6]
   1be04:	e0be8717 	ldw	r2,-1508(fp)
   1be08:	10800304 	addi	r2,r2,12
   1be0c:	10800017 	ldw	r2,0(r2)
   1be10:	1085883a 	add	r2,r2,r2
   1be14:	e0be8a15 	stw	r2,-1496(fp)
   1be18:	e03e8b15 	stw	zero,-1492(fp)
   1be1c:	e0be8717 	ldw	r2,-1508(fp)
   1be20:	10800604 	addi	r2,r2,24
   1be24:	10800017 	ldw	r2,0(r2)
   1be28:	e0be8c15 	stw	r2,-1488(fp)
   1be2c:	e03e8d15 	stw	zero,-1484(fp)
   1be30:	e1be8c17 	ldw	r6,-1488(fp)
   1be34:	e1fe8d17 	ldw	r7,-1484(fp)
   1be38:	e13e8a17 	ldw	r4,-1496(fp)
   1be3c:	e17e8b17 	ldw	r5,-1492(fp)
   1be40:	00438e00 	call	438e0 <__muldi3>
   1be44:	1009883a 	mov	r4,r2
   1be48:	180b883a 	mov	r5,r3
   1be4c:	2021883a 	mov	r16,r4
   1be50:	2823883a 	mov	r17,r5
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)(a[0]*2) * a[9]
       + (uint64_t)(a[1]*2) * a[8]
       + (uint64_t)(a[2]*2) * a[7]
   1be54:	e0be8717 	ldw	r2,-1508(fp)
   1be58:	10800204 	addi	r2,r2,8
   1be5c:	10800017 	ldw	r2,0(r2)
   1be60:	1085883a 	add	r2,r2,r2
   1be64:	e0be8e15 	stw	r2,-1480(fp)
   1be68:	e03e8f15 	stw	zero,-1476(fp)
   1be6c:	e0be8717 	ldw	r2,-1508(fp)
   1be70:	10800704 	addi	r2,r2,28
   1be74:	10800017 	ldw	r2,0(r2)
   1be78:	e0be9015 	stw	r2,-1472(fp)
   1be7c:	e03e9115 	stw	zero,-1468(fp)
   1be80:	e1be9017 	ldw	r6,-1472(fp)
   1be84:	e1fe9117 	ldw	r7,-1468(fp)
   1be88:	e13e8e17 	ldw	r4,-1480(fp)
   1be8c:	e17e8f17 	ldw	r5,-1476(fp)
   1be90:	00438e00 	call	438e0 <__muldi3>
   1be94:	100f883a 	mov	r7,r2
   1be98:	1811883a 	mov	r8,r3
   1be9c:	380b883a 	mov	r5,r7
   1bea0:	400d883a 	mov	r6,r8
       + (uint64_t)(a[3]*2) * a[6]
   1bea4:	8145883a 	add	r2,r16,r5
   1bea8:	1409803a 	cmpltu	r4,r2,r16
   1beac:	8987883a 	add	r3,r17,r6
   1beb0:	20c9883a 	add	r4,r4,r3
   1beb4:	2007883a 	mov	r3,r4
   1beb8:	100b883a 	mov	r5,r2
   1bebc:	180d883a 	mov	r6,r3
   1bec0:	9145883a 	add	r2,r18,r5
   1bec4:	1489803a 	cmpltu	r4,r2,r18
   1bec8:	9987883a 	add	r3,r19,r6
   1becc:	20c9883a 	add	r4,r4,r3
   1bed0:	2007883a 	mov	r3,r4
   1bed4:	1021883a 	mov	r16,r2
   1bed8:	1823883a 	mov	r17,r3
       + (uint64_t)(a[4]*2) * a[5];
   1bedc:	e0be8717 	ldw	r2,-1508(fp)
   1bee0:	10800404 	addi	r2,r2,16
   1bee4:	10800017 	ldw	r2,0(r2)
   1bee8:	1085883a 	add	r2,r2,r2
   1beec:	e0be9215 	stw	r2,-1464(fp)
   1bef0:	e03e9315 	stw	zero,-1460(fp)
   1bef4:	e0be8717 	ldw	r2,-1508(fp)
   1bef8:	10800504 	addi	r2,r2,20
   1befc:	10800017 	ldw	r2,0(r2)
   1bf00:	e0be9415 	stw	r2,-1456(fp)
   1bf04:	e03e9515 	stw	zero,-1452(fp)
   1bf08:	e1be9417 	ldw	r6,-1456(fp)
   1bf0c:	e1fe9517 	ldw	r7,-1452(fp)
   1bf10:	e13e9217 	ldw	r4,-1464(fp)
   1bf14:	e17e9317 	ldw	r5,-1460(fp)
   1bf18:	00438e00 	call	438e0 <__muldi3>
   1bf1c:	100f883a 	mov	r7,r2
   1bf20:	1811883a 	mov	r8,r3
   1bf24:	380b883a 	mov	r5,r7
   1bf28:	400d883a 	mov	r6,r8
    /** [... a b c] is a shorthand for ... + a<<52 + b<<26 + c<<0 mod n.
     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */

    d  = (uint64_t)(a[0]*2) * a[9]
   1bf2c:	8145883a 	add	r2,r16,r5
   1bf30:	1409803a 	cmpltu	r4,r2,r16
   1bf34:	8987883a 	add	r3,r17,r6
   1bf38:	20c9883a 	add	r4,r4,r3
   1bf3c:	2007883a 	mov	r3,r4
   1bf40:	e0be6715 	stw	r2,-1636(fp)
   1bf44:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[2]*2) * a[7]
       + (uint64_t)(a[3]*2) * a[6]
       + (uint64_t)(a[4]*2) * a[5];
    /* VERIFY_BITS(d, 64); */
    /* [d 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */
    t9 = d & M; d >>= 26;
   1bf48:	e0fe6717 	ldw	r3,-1636(fp)
   1bf4c:	e0be6417 	ldw	r2,-1648(fp)
   1bf50:	1884703a 	and	r2,r3,r2
   1bf54:	e0be6915 	stw	r2,-1628(fp)
   1bf58:	e0be6817 	ldw	r2,-1632(fp)
   1bf5c:	100691ba 	slli	r3,r2,6
   1bf60:	e0be6717 	ldw	r2,-1636(fp)
   1bf64:	1004d6ba 	srli	r2,r2,26
   1bf68:	10c4b03a 	or	r2,r2,r3
   1bf6c:	e0be6715 	stw	r2,-1636(fp)
   1bf70:	e0be6817 	ldw	r2,-1632(fp)
   1bf74:	1004d6ba 	srli	r2,r2,26
   1bf78:	e0be6815 	stw	r2,-1632(fp)
    VERIFY_BITS(t9, 26);
   1bf7c:	e0be6917 	ldw	r2,-1628(fp)
   1bf80:	1004d6ba 	srli	r2,r2,26
   1bf84:	1004c03a 	cmpne	r2,r2,zero
   1bf88:	10803fcc 	andi	r2,r2,255
   1bf8c:	10000d26 	beq	r2,zero,1bfc4 <secp256k1_fe_sqr_inner+0x5e8>
   1bf90:	d0a01617 	ldw	r2,-32680(gp)
   1bf94:	10c00317 	ldw	r3,12(r2)
   1bf98:	00800174 	movhi	r2,5
   1bf9c:	10931604 	addi	r2,r2,19544
   1bfa0:	d8800015 	stw	r2,0(sp)
   1bfa4:	01c0c8c4 	movi	r7,803
   1bfa8:	01800174 	movhi	r6,5
   1bfac:	3191dd04 	addi	r6,r6,18292
   1bfb0:	01400174 	movhi	r5,5
   1bfb4:	2951e804 	addi	r5,r5,18336
   1bfb8:	1809883a 	mov	r4,r3
   1bfbc:	00461000 	call	46100 <fprintf>
   1bfc0:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 38);
   1bfc4:	e0be6817 	ldw	r2,-1632(fp)
   1bfc8:	1028d1ba 	srli	r20,r2,6
   1bfcc:	002b883a 	mov	r21,zero
   1bfd0:	a544b03a 	or	r2,r20,r21
   1bfd4:	1004c03a 	cmpne	r2,r2,zero
   1bfd8:	10803fcc 	andi	r2,r2,255
   1bfdc:	10000d26 	beq	r2,zero,1c014 <secp256k1_fe_sqr_inner+0x638>
   1bfe0:	d0a01617 	ldw	r2,-32680(gp)
   1bfe4:	10c00317 	ldw	r3,12(r2)
   1bfe8:	00800174 	movhi	r2,5
   1bfec:	10932104 	addi	r2,r2,19588
   1bff0:	d8800015 	stw	r2,0(sp)
   1bff4:	01c0c904 	movi	r7,804
   1bff8:	01800174 	movhi	r6,5
   1bffc:	3191dd04 	addi	r6,r6,18292
   1c000:	01400174 	movhi	r5,5
   1c004:	2951e804 	addi	r5,r5,18336
   1c008:	1809883a 	mov	r4,r3
   1c00c:	00461000 	call	46100 <fprintf>
   1c010:	0045fd40 	call	45fd4 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */

    c  = (uint64_t)a[0] * a[0];
   1c014:	e0be8717 	ldw	r2,-1508(fp)
   1c018:	10800017 	ldw	r2,0(r2)
   1c01c:	e0be9615 	stw	r2,-1448(fp)
   1c020:	e03e9715 	stw	zero,-1444(fp)
   1c024:	e0be8717 	ldw	r2,-1508(fp)
   1c028:	10800017 	ldw	r2,0(r2)
   1c02c:	e0be9815 	stw	r2,-1440(fp)
   1c030:	e03e9915 	stw	zero,-1436(fp)
   1c034:	e1be9817 	ldw	r6,-1440(fp)
   1c038:	e1fe9917 	ldw	r7,-1436(fp)
   1c03c:	e13e9617 	ldw	r4,-1448(fp)
   1c040:	e17e9717 	ldw	r5,-1444(fp)
   1c044:	00438e00 	call	438e0 <__muldi3>
   1c048:	1009883a 	mov	r4,r2
   1c04c:	180b883a 	mov	r5,r3
   1c050:	e13e6a15 	stw	r4,-1624(fp)
   1c054:	e17e6b15 	stw	r5,-1620(fp)
    VERIFY_BITS(c, 60);
   1c058:	e0be6b17 	ldw	r2,-1620(fp)
   1c05c:	1004d73a 	srli	r2,r2,28
   1c060:	e0be9a15 	stw	r2,-1432(fp)
   1c064:	e03e9b15 	stw	zero,-1428(fp)
   1c068:	e0fe9a17 	ldw	r3,-1432(fp)
   1c06c:	e13e9b17 	ldw	r4,-1428(fp)
   1c070:	1904b03a 	or	r2,r3,r4
   1c074:	1004c03a 	cmpne	r2,r2,zero
   1c078:	10803fcc 	andi	r2,r2,255
   1c07c:	10000d26 	beq	r2,zero,1c0b4 <secp256k1_fe_sqr_inner+0x6d8>
   1c080:	d0a01617 	ldw	r2,-32680(gp)
   1c084:	10c00317 	ldw	r3,12(r2)
   1c088:	00800174 	movhi	r2,5
   1c08c:	10932c04 	addi	r2,r2,19632
   1c090:	d8800015 	stw	r2,0(sp)
   1c094:	01c0ca04 	movi	r7,808
   1c098:	01800174 	movhi	r6,5
   1c09c:	3191dd04 	addi	r6,r6,18292
   1c0a0:	01400174 	movhi	r5,5
   1c0a4:	2951e804 	addi	r5,r5,18336
   1c0a8:	1809883a 	mov	r4,r3
   1c0ac:	00461000 	call	46100 <fprintf>
   1c0b0:	0045fd40 	call	45fd4 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)(a[1]*2) * a[9]
   1c0b4:	e0be8717 	ldw	r2,-1508(fp)
   1c0b8:	10800104 	addi	r2,r2,4
   1c0bc:	10800017 	ldw	r2,0(r2)
   1c0c0:	1085883a 	add	r2,r2,r2
   1c0c4:	e0be9c15 	stw	r2,-1424(fp)
   1c0c8:	e03e9d15 	stw	zero,-1420(fp)
   1c0cc:	e0be8717 	ldw	r2,-1508(fp)
   1c0d0:	10800904 	addi	r2,r2,36
   1c0d4:	10800017 	ldw	r2,0(r2)
   1c0d8:	e0be9e15 	stw	r2,-1416(fp)
   1c0dc:	e03e9f15 	stw	zero,-1412(fp)
   1c0e0:	e1be9e17 	ldw	r6,-1416(fp)
   1c0e4:	e1fe9f17 	ldw	r7,-1412(fp)
   1c0e8:	e13e9c17 	ldw	r4,-1424(fp)
   1c0ec:	e17e9d17 	ldw	r5,-1420(fp)
   1c0f0:	00438e00 	call	438e0 <__muldi3>
   1c0f4:	1009883a 	mov	r4,r2
   1c0f8:	180b883a 	mov	r5,r3
   1c0fc:	2021883a 	mov	r16,r4
   1c100:	2823883a 	mov	r17,r5
       + (uint64_t)(a[2]*2) * a[8]
   1c104:	e0be8717 	ldw	r2,-1508(fp)
   1c108:	10800204 	addi	r2,r2,8
   1c10c:	10800017 	ldw	r2,0(r2)
   1c110:	1085883a 	add	r2,r2,r2
   1c114:	e0bea015 	stw	r2,-1408(fp)
   1c118:	e03ea115 	stw	zero,-1404(fp)
   1c11c:	e0be8717 	ldw	r2,-1508(fp)
   1c120:	10800804 	addi	r2,r2,32
   1c124:	10800017 	ldw	r2,0(r2)
   1c128:	e0bea215 	stw	r2,-1400(fp)
   1c12c:	e03ea315 	stw	zero,-1396(fp)
   1c130:	e1bea217 	ldw	r6,-1400(fp)
   1c134:	e1fea317 	ldw	r7,-1396(fp)
   1c138:	e13ea017 	ldw	r4,-1408(fp)
   1c13c:	e17ea117 	ldw	r5,-1404(fp)
   1c140:	00438e00 	call	438e0 <__muldi3>
   1c144:	100f883a 	mov	r7,r2
   1c148:	1811883a 	mov	r8,r3
   1c14c:	380b883a 	mov	r5,r7
   1c150:	400d883a 	mov	r6,r8
   1c154:	8145883a 	add	r2,r16,r5
   1c158:	1409803a 	cmpltu	r4,r2,r16
   1c15c:	8987883a 	add	r3,r17,r6
   1c160:	20c9883a 	add	r4,r4,r3
   1c164:	2007883a 	mov	r3,r4
   1c168:	1025883a 	mov	r18,r2
   1c16c:	1827883a 	mov	r19,r3
       + (uint64_t)(a[3]*2) * a[7]
       + (uint64_t)(a[4]*2) * a[6]
   1c170:	e0be8717 	ldw	r2,-1508(fp)
   1c174:	10800404 	addi	r2,r2,16
   1c178:	10800017 	ldw	r2,0(r2)
   1c17c:	1085883a 	add	r2,r2,r2
   1c180:	e0bea415 	stw	r2,-1392(fp)
   1c184:	e03ea515 	stw	zero,-1388(fp)
   1c188:	e0be8717 	ldw	r2,-1508(fp)
   1c18c:	10800604 	addi	r2,r2,24
   1c190:	10800017 	ldw	r2,0(r2)
   1c194:	e0bea615 	stw	r2,-1384(fp)
   1c198:	e03ea715 	stw	zero,-1380(fp)
   1c19c:	e1bea617 	ldw	r6,-1384(fp)
   1c1a0:	e1fea717 	ldw	r7,-1380(fp)
   1c1a4:	e13ea417 	ldw	r4,-1392(fp)
   1c1a8:	e17ea517 	ldw	r5,-1388(fp)
   1c1ac:	00438e00 	call	438e0 <__muldi3>
   1c1b0:	1009883a 	mov	r4,r2
   1c1b4:	180b883a 	mov	r5,r3
   1c1b8:	2021883a 	mov	r16,r4
   1c1bc:	2823883a 	mov	r17,r5
    c  = (uint64_t)a[0] * a[0];
    VERIFY_BITS(c, 60);
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)(a[1]*2) * a[9]
       + (uint64_t)(a[2]*2) * a[8]
       + (uint64_t)(a[3]*2) * a[7]
   1c1c0:	e0be8717 	ldw	r2,-1508(fp)
   1c1c4:	10800304 	addi	r2,r2,12
   1c1c8:	10800017 	ldw	r2,0(r2)
   1c1cc:	1085883a 	add	r2,r2,r2
   1c1d0:	e0bea815 	stw	r2,-1376(fp)
   1c1d4:	e03ea915 	stw	zero,-1372(fp)
   1c1d8:	e0be8717 	ldw	r2,-1508(fp)
   1c1dc:	10800704 	addi	r2,r2,28
   1c1e0:	10800017 	ldw	r2,0(r2)
   1c1e4:	e0beaa15 	stw	r2,-1368(fp)
   1c1e8:	e03eab15 	stw	zero,-1364(fp)
   1c1ec:	e1beaa17 	ldw	r6,-1368(fp)
   1c1f0:	e1feab17 	ldw	r7,-1364(fp)
   1c1f4:	e13ea817 	ldw	r4,-1376(fp)
   1c1f8:	e17ea917 	ldw	r5,-1372(fp)
   1c1fc:	00438e00 	call	438e0 <__muldi3>
   1c200:	100f883a 	mov	r7,r2
   1c204:	1811883a 	mov	r8,r3
   1c208:	380b883a 	mov	r5,r7
   1c20c:	400d883a 	mov	r6,r8
       + (uint64_t)(a[4]*2) * a[6]
   1c210:	8145883a 	add	r2,r16,r5
   1c214:	1409803a 	cmpltu	r4,r2,r16
   1c218:	8987883a 	add	r3,r17,r6
   1c21c:	20c9883a 	add	r4,r4,r3
   1c220:	2007883a 	mov	r3,r4
   1c224:	100b883a 	mov	r5,r2
   1c228:	180d883a 	mov	r6,r3
   1c22c:	9145883a 	add	r2,r18,r5
   1c230:	1489803a 	cmpltu	r4,r2,r18
   1c234:	9987883a 	add	r3,r19,r6
   1c238:	20c9883a 	add	r4,r4,r3
   1c23c:	2007883a 	mov	r3,r4
   1c240:	1021883a 	mov	r16,r2
   1c244:	1823883a 	mov	r17,r3
       + (uint64_t)a[5] * a[5];
   1c248:	e0be8717 	ldw	r2,-1508(fp)
   1c24c:	10800504 	addi	r2,r2,20
   1c250:	10800017 	ldw	r2,0(r2)
   1c254:	e0beac15 	stw	r2,-1360(fp)
   1c258:	e03ead15 	stw	zero,-1356(fp)
   1c25c:	e0be8717 	ldw	r2,-1508(fp)
   1c260:	10800504 	addi	r2,r2,20
   1c264:	10800017 	ldw	r2,0(r2)
   1c268:	e0beae15 	stw	r2,-1352(fp)
   1c26c:	e03eaf15 	stw	zero,-1348(fp)
   1c270:	e1beae17 	ldw	r6,-1352(fp)
   1c274:	e1feaf17 	ldw	r7,-1348(fp)
   1c278:	e13eac17 	ldw	r4,-1360(fp)
   1c27c:	e17ead17 	ldw	r5,-1356(fp)
   1c280:	00438e00 	call	438e0 <__muldi3>
   1c284:	100f883a 	mov	r7,r2
   1c288:	1811883a 	mov	r8,r3
   1c28c:	380b883a 	mov	r5,r7
   1c290:	400d883a 	mov	r6,r8
   1c294:	8145883a 	add	r2,r16,r5
   1c298:	1409803a 	cmpltu	r4,r2,r16
   1c29c:	8987883a 	add	r3,r17,r6
   1c2a0:	20c9883a 	add	r4,r4,r3
   1c2a4:	2007883a 	mov	r3,r4
   1c2a8:	100f883a 	mov	r7,r2
   1c2ac:	1811883a 	mov	r8,r3
    /* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */

    c  = (uint64_t)a[0] * a[0];
    VERIFY_BITS(c, 60);
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */
    d += (uint64_t)(a[1]*2) * a[9]
   1c2b0:	e13e6717 	ldw	r4,-1636(fp)
   1c2b4:	e17e6817 	ldw	r5,-1632(fp)
   1c2b8:	21c5883a 	add	r2,r4,r7
   1c2bc:	110d803a 	cmpltu	r6,r2,r4
   1c2c0:	2a07883a 	add	r3,r5,r8
   1c2c4:	30c9883a 	add	r4,r6,r3
   1c2c8:	2007883a 	mov	r3,r4
   1c2cc:	e0be6715 	stw	r2,-1636(fp)
   1c2d0:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[2]*2) * a[8]
       + (uint64_t)(a[3]*2) * a[7]
       + (uint64_t)(a[4]*2) * a[6]
       + (uint64_t)a[5] * a[5];
    VERIFY_BITS(d, 63);
   1c2d4:	e0be6717 	ldw	r2,-1636(fp)
   1c2d8:	e0fe6817 	ldw	r3,-1632(fp)
   1c2dc:	1804d7fa 	srli	r2,r3,31
   1c2e0:	10803fcc 	andi	r2,r2,255
   1c2e4:	10000d26 	beq	r2,zero,1c31c <secp256k1_fe_sqr_inner+0x940>
   1c2e8:	d0a01617 	ldw	r2,-32680(gp)
   1c2ec:	10c00317 	ldw	r3,12(r2)
   1c2f0:	00800174 	movhi	r2,5
   1c2f4:	10933704 	addi	r2,r2,19676
   1c2f8:	d8800015 	stw	r2,0(sp)
   1c2fc:	01c0cbc4 	movi	r7,815
   1c300:	01800174 	movhi	r6,5
   1c304:	3191dd04 	addi	r6,r6,18292
   1c308:	01400174 	movhi	r5,5
   1c30c:	2951e804 	addi	r5,r5,18336
   1c310:	1809883a 	mov	r4,r3
   1c314:	00461000 	call	46100 <fprintf>
   1c318:	0045fd40 	call	45fd4 <abort>
    /* [d t9 0 0 0 0 0 0 0 0 c] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    u0 = d & M; d >>= 26; c += u0 * R0;
   1c31c:	e0be6417 	ldw	r2,-1648(fp)
   1c320:	e0beb015 	stw	r2,-1344(fp)
   1c324:	e03eb115 	stw	zero,-1340(fp)
   1c328:	e0be6717 	ldw	r2,-1636(fp)
   1c32c:	e1beb017 	ldw	r6,-1344(fp)
   1c330:	1184703a 	and	r2,r2,r6
   1c334:	e0be6c15 	stw	r2,-1616(fp)
   1c338:	e0be6817 	ldw	r2,-1632(fp)
   1c33c:	e1feb117 	ldw	r7,-1340(fp)
   1c340:	11c4703a 	and	r2,r2,r7
   1c344:	e0be6d15 	stw	r2,-1612(fp)
   1c348:	e0be6817 	ldw	r2,-1632(fp)
   1c34c:	100691ba 	slli	r3,r2,6
   1c350:	e0be6717 	ldw	r2,-1636(fp)
   1c354:	1004d6ba 	srli	r2,r2,26
   1c358:	10c4b03a 	or	r2,r2,r3
   1c35c:	e0be6715 	stw	r2,-1636(fp)
   1c360:	e0be6817 	ldw	r2,-1632(fp)
   1c364:	1004d6ba 	srli	r2,r2,26
   1c368:	e0be6815 	stw	r2,-1632(fp)
   1c36c:	e0be6517 	ldw	r2,-1644(fp)
   1c370:	e0beb215 	stw	r2,-1336(fp)
   1c374:	e03eb315 	stw	zero,-1332(fp)
   1c378:	e1be6c17 	ldw	r6,-1616(fp)
   1c37c:	e1fe6d17 	ldw	r7,-1612(fp)
   1c380:	e13eb217 	ldw	r4,-1336(fp)
   1c384:	e17eb317 	ldw	r5,-1332(fp)
   1c388:	00438e00 	call	438e0 <__muldi3>
   1c38c:	1009883a 	mov	r4,r2
   1c390:	180b883a 	mov	r5,r3
   1c394:	200f883a 	mov	r7,r4
   1c398:	2811883a 	mov	r8,r5
   1c39c:	e13e6a17 	ldw	r4,-1624(fp)
   1c3a0:	e17e6b17 	ldw	r5,-1620(fp)
   1c3a4:	21c5883a 	add	r2,r4,r7
   1c3a8:	110d803a 	cmpltu	r6,r2,r4
   1c3ac:	2a07883a 	add	r3,r5,r8
   1c3b0:	30c9883a 	add	r4,r6,r3
   1c3b4:	2007883a 	mov	r3,r4
   1c3b8:	e0be6a15 	stw	r2,-1624(fp)
   1c3bc:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u0, 26);
   1c3c0:	e0be6d17 	ldw	r2,-1612(fp)
   1c3c4:	100691ba 	slli	r3,r2,6
   1c3c8:	e0be6c17 	ldw	r2,-1616(fp)
   1c3cc:	102cd6ba 	srli	r22,r2,26
   1c3d0:	1dacb03a 	or	r22,r3,r22
   1c3d4:	e0be6d17 	ldw	r2,-1612(fp)
   1c3d8:	102ed6ba 	srli	r23,r2,26
   1c3dc:	b5c4b03a 	or	r2,r22,r23
   1c3e0:	1004c03a 	cmpne	r2,r2,zero
   1c3e4:	10803fcc 	andi	r2,r2,255
   1c3e8:	10000d26 	beq	r2,zero,1c420 <secp256k1_fe_sqr_inner+0xa44>
   1c3ec:	d0a01617 	ldw	r2,-32680(gp)
   1c3f0:	10c00317 	ldw	r3,12(r2)
   1c3f4:	00800174 	movhi	r2,5
   1c3f8:	10934204 	addi	r2,r2,19720
   1c3fc:	d8800015 	stw	r2,0(sp)
   1c400:	01c0cc84 	movi	r7,818
   1c404:	01800174 	movhi	r6,5
   1c408:	3191dd04 	addi	r6,r6,18292
   1c40c:	01400174 	movhi	r5,5
   1c410:	2951e804 	addi	r5,r5,18336
   1c414:	1809883a 	mov	r4,r3
   1c418:	00461000 	call	46100 <fprintf>
   1c41c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 37);
   1c420:	e0be6817 	ldw	r2,-1632(fp)
   1c424:	1004d17a 	srli	r2,r2,5
   1c428:	e0beb415 	stw	r2,-1328(fp)
   1c42c:	e03eb515 	stw	zero,-1324(fp)
   1c430:	e0feb417 	ldw	r3,-1328(fp)
   1c434:	e13eb517 	ldw	r4,-1324(fp)
   1c438:	1904b03a 	or	r2,r3,r4
   1c43c:	1004c03a 	cmpne	r2,r2,zero
   1c440:	10803fcc 	andi	r2,r2,255
   1c444:	10000d26 	beq	r2,zero,1c47c <secp256k1_fe_sqr_inner+0xaa0>
   1c448:	d0a01617 	ldw	r2,-32680(gp)
   1c44c:	10c00317 	ldw	r3,12(r2)
   1c450:	00800174 	movhi	r2,5
   1c454:	10934d04 	addi	r2,r2,19764
   1c458:	d8800015 	stw	r2,0(sp)
   1c45c:	01c0ccc4 	movi	r7,819
   1c460:	01800174 	movhi	r6,5
   1c464:	3191dd04 	addi	r6,r6,18292
   1c468:	01400174 	movhi	r5,5
   1c46c:	2951e804 	addi	r5,r5,18336
   1c470:	1809883a 	mov	r4,r3
   1c474:	00461000 	call	46100 <fprintf>
   1c478:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 61);
   1c47c:	e0be6b17 	ldw	r2,-1620(fp)
   1c480:	1004d77a 	srli	r2,r2,29
   1c484:	e0beb615 	stw	r2,-1320(fp)
   1c488:	e03eb715 	stw	zero,-1316(fp)
   1c48c:	e1beb617 	ldw	r6,-1320(fp)
   1c490:	e1feb717 	ldw	r7,-1316(fp)
   1c494:	31c4b03a 	or	r2,r6,r7
   1c498:	1004c03a 	cmpne	r2,r2,zero
   1c49c:	10803fcc 	andi	r2,r2,255
   1c4a0:	10000d26 	beq	r2,zero,1c4d8 <secp256k1_fe_sqr_inner+0xafc>
   1c4a4:	d0a01617 	ldw	r2,-32680(gp)
   1c4a8:	10c00317 	ldw	r3,12(r2)
   1c4ac:	00800174 	movhi	r2,5
   1c4b0:	10935804 	addi	r2,r2,19808
   1c4b4:	d8800015 	stw	r2,0(sp)
   1c4b8:	01c0cd04 	movi	r7,820
   1c4bc:	01800174 	movhi	r6,5
   1c4c0:	3191dd04 	addi	r6,r6,18292
   1c4c4:	01400174 	movhi	r5,5
   1c4c8:	2951e804 	addi	r5,r5,18336
   1c4cc:	1809883a 	mov	r4,r3
   1c4d0:	00461000 	call	46100 <fprintf>
   1c4d4:	0045fd40 	call	45fd4 <abort>
    /* [d u0 t9 0 0 0 0 0 0 0 0 c-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    t0 = c & M; c >>= 26; c += u0 * R1;
   1c4d8:	e0fe6a17 	ldw	r3,-1624(fp)
   1c4dc:	e0be6417 	ldw	r2,-1648(fp)
   1c4e0:	1884703a 	and	r2,r3,r2
   1c4e4:	e0be6e15 	stw	r2,-1608(fp)
   1c4e8:	e0be6b17 	ldw	r2,-1620(fp)
   1c4ec:	100691ba 	slli	r3,r2,6
   1c4f0:	e0be6a17 	ldw	r2,-1624(fp)
   1c4f4:	1004d6ba 	srli	r2,r2,26
   1c4f8:	10c4b03a 	or	r2,r2,r3
   1c4fc:	e0be6a15 	stw	r2,-1624(fp)
   1c500:	e0be6b17 	ldw	r2,-1620(fp)
   1c504:	1004d6ba 	srli	r2,r2,26
   1c508:	e0be6b15 	stw	r2,-1620(fp)
   1c50c:	e0be6617 	ldw	r2,-1640(fp)
   1c510:	e0beb815 	stw	r2,-1312(fp)
   1c514:	e03eb915 	stw	zero,-1308(fp)
   1c518:	e1be6c17 	ldw	r6,-1616(fp)
   1c51c:	e1fe6d17 	ldw	r7,-1612(fp)
   1c520:	e13eb817 	ldw	r4,-1312(fp)
   1c524:	e17eb917 	ldw	r5,-1308(fp)
   1c528:	00438e00 	call	438e0 <__muldi3>
   1c52c:	1009883a 	mov	r4,r2
   1c530:	180b883a 	mov	r5,r3
   1c534:	200f883a 	mov	r7,r4
   1c538:	2811883a 	mov	r8,r5
   1c53c:	e13e6a17 	ldw	r4,-1624(fp)
   1c540:	e17e6b17 	ldw	r5,-1620(fp)
   1c544:	21c5883a 	add	r2,r4,r7
   1c548:	110d803a 	cmpltu	r6,r2,r4
   1c54c:	2a07883a 	add	r3,r5,r8
   1c550:	30c9883a 	add	r4,r6,r3
   1c554:	2007883a 	mov	r3,r4
   1c558:	e0be6a15 	stw	r2,-1624(fp)
   1c55c:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t0, 26);
   1c560:	e0be6e17 	ldw	r2,-1608(fp)
   1c564:	1004d6ba 	srli	r2,r2,26
   1c568:	1004c03a 	cmpne	r2,r2,zero
   1c56c:	10803fcc 	andi	r2,r2,255
   1c570:	10000d26 	beq	r2,zero,1c5a8 <secp256k1_fe_sqr_inner+0xbcc>
   1c574:	d0a01617 	ldw	r2,-32680(gp)
   1c578:	10c00317 	ldw	r3,12(r2)
   1c57c:	00800174 	movhi	r2,5
   1c580:	10936304 	addi	r2,r2,19852
   1c584:	d8800015 	stw	r2,0(sp)
   1c588:	01c0cdc4 	movi	r7,823
   1c58c:	01800174 	movhi	r6,5
   1c590:	3191dd04 	addi	r6,r6,18292
   1c594:	01400174 	movhi	r5,5
   1c598:	2951e804 	addi	r5,r5,18336
   1c59c:	1809883a 	mov	r4,r3
   1c5a0:	00461000 	call	46100 <fprintf>
   1c5a4:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 37);
   1c5a8:	e0be6b17 	ldw	r2,-1620(fp)
   1c5ac:	1004d17a 	srli	r2,r2,5
   1c5b0:	e0beba15 	stw	r2,-1304(fp)
   1c5b4:	e03ebb15 	stw	zero,-1300(fp)
   1c5b8:	e0feba17 	ldw	r3,-1304(fp)
   1c5bc:	e13ebb17 	ldw	r4,-1300(fp)
   1c5c0:	1904b03a 	or	r2,r3,r4
   1c5c4:	1004c03a 	cmpne	r2,r2,zero
   1c5c8:	10803fcc 	andi	r2,r2,255
   1c5cc:	10000d26 	beq	r2,zero,1c604 <secp256k1_fe_sqr_inner+0xc28>
   1c5d0:	d0a01617 	ldw	r2,-32680(gp)
   1c5d4:	10c00317 	ldw	r3,12(r2)
   1c5d8:	00800174 	movhi	r2,5
   1c5dc:	10936e04 	addi	r2,r2,19896
   1c5e0:	d8800015 	stw	r2,0(sp)
   1c5e4:	01c0ce04 	movi	r7,824
   1c5e8:	01800174 	movhi	r6,5
   1c5ec:	3191dd04 	addi	r6,r6,18292
   1c5f0:	01400174 	movhi	r5,5
   1c5f4:	2951e804 	addi	r5,r5,18336
   1c5f8:	1809883a 	mov	r4,r3
   1c5fc:	00461000 	call	46100 <fprintf>
   1c600:	0045fd40 	call	45fd4 <abort>
    /* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */

    c += (uint64_t)(a[0]*2) * a[1];
   1c604:	e0be8717 	ldw	r2,-1508(fp)
   1c608:	10800017 	ldw	r2,0(r2)
   1c60c:	1085883a 	add	r2,r2,r2
   1c610:	e0bebc15 	stw	r2,-1296(fp)
   1c614:	e03ebd15 	stw	zero,-1292(fp)
   1c618:	e0be8717 	ldw	r2,-1508(fp)
   1c61c:	10800104 	addi	r2,r2,4
   1c620:	10800017 	ldw	r2,0(r2)
   1c624:	e0bebe15 	stw	r2,-1288(fp)
   1c628:	e03ebf15 	stw	zero,-1284(fp)
   1c62c:	e1bebe17 	ldw	r6,-1288(fp)
   1c630:	e1febf17 	ldw	r7,-1284(fp)
   1c634:	e13ebc17 	ldw	r4,-1296(fp)
   1c638:	e17ebd17 	ldw	r5,-1292(fp)
   1c63c:	00438e00 	call	438e0 <__muldi3>
   1c640:	1009883a 	mov	r4,r2
   1c644:	180b883a 	mov	r5,r3
   1c648:	200f883a 	mov	r7,r4
   1c64c:	2811883a 	mov	r8,r5
   1c650:	e13e6a17 	ldw	r4,-1624(fp)
   1c654:	e17e6b17 	ldw	r5,-1620(fp)
   1c658:	21c5883a 	add	r2,r4,r7
   1c65c:	110d803a 	cmpltu	r6,r2,r4
   1c660:	2a07883a 	add	r3,r5,r8
   1c664:	30c9883a 	add	r4,r6,r3
   1c668:	2007883a 	mov	r3,r4
   1c66c:	e0be6a15 	stw	r2,-1624(fp)
   1c670:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(c, 62);
   1c674:	e0be6b17 	ldw	r2,-1620(fp)
   1c678:	1004d7ba 	srli	r2,r2,30
   1c67c:	e0bec015 	stw	r2,-1280(fp)
   1c680:	e03ec115 	stw	zero,-1276(fp)
   1c684:	e1bec017 	ldw	r6,-1280(fp)
   1c688:	e1fec117 	ldw	r7,-1276(fp)
   1c68c:	31c4b03a 	or	r2,r6,r7
   1c690:	1004c03a 	cmpne	r2,r2,zero
   1c694:	10803fcc 	andi	r2,r2,255
   1c698:	10000d26 	beq	r2,zero,1c6d0 <secp256k1_fe_sqr_inner+0xcf4>
   1c69c:	d0a01617 	ldw	r2,-32680(gp)
   1c6a0:	10c00317 	ldw	r3,12(r2)
   1c6a4:	00800174 	movhi	r2,5
   1c6a8:	10937904 	addi	r2,r2,19940
   1c6ac:	d8800015 	stw	r2,0(sp)
   1c6b0:	01c0cf44 	movi	r7,829
   1c6b4:	01800174 	movhi	r6,5
   1c6b8:	3191dd04 	addi	r6,r6,18292
   1c6bc:	01400174 	movhi	r5,5
   1c6c0:	2951e804 	addi	r5,r5,18336
   1c6c4:	1809883a 	mov	r4,r3
   1c6c8:	00461000 	call	46100 <fprintf>
   1c6cc:	0045fd40 	call	45fd4 <abort>
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)(a[2]*2) * a[9]
   1c6d0:	e0be8717 	ldw	r2,-1508(fp)
   1c6d4:	10800204 	addi	r2,r2,8
   1c6d8:	10800017 	ldw	r2,0(r2)
   1c6dc:	1085883a 	add	r2,r2,r2
   1c6e0:	e0bec215 	stw	r2,-1272(fp)
   1c6e4:	e03ec315 	stw	zero,-1268(fp)
   1c6e8:	e0be8717 	ldw	r2,-1508(fp)
   1c6ec:	10800904 	addi	r2,r2,36
   1c6f0:	10800017 	ldw	r2,0(r2)
   1c6f4:	e0bec415 	stw	r2,-1264(fp)
   1c6f8:	e03ec515 	stw	zero,-1260(fp)
   1c6fc:	e1bec417 	ldw	r6,-1264(fp)
   1c700:	e1fec517 	ldw	r7,-1260(fp)
   1c704:	e13ec217 	ldw	r4,-1272(fp)
   1c708:	e17ec317 	ldw	r5,-1268(fp)
   1c70c:	00438e00 	call	438e0 <__muldi3>
   1c710:	1009883a 	mov	r4,r2
   1c714:	180b883a 	mov	r5,r3
   1c718:	2021883a 	mov	r16,r4
   1c71c:	2823883a 	mov	r17,r5
       + (uint64_t)(a[3]*2) * a[8]
   1c720:	e0be8717 	ldw	r2,-1508(fp)
   1c724:	10800304 	addi	r2,r2,12
   1c728:	10800017 	ldw	r2,0(r2)
   1c72c:	1085883a 	add	r2,r2,r2
   1c730:	e0bec615 	stw	r2,-1256(fp)
   1c734:	e03ec715 	stw	zero,-1252(fp)
   1c738:	e0be8717 	ldw	r2,-1508(fp)
   1c73c:	10800804 	addi	r2,r2,32
   1c740:	10800017 	ldw	r2,0(r2)
   1c744:	e0bec815 	stw	r2,-1248(fp)
   1c748:	e03ec915 	stw	zero,-1244(fp)
   1c74c:	e1bec817 	ldw	r6,-1248(fp)
   1c750:	e1fec917 	ldw	r7,-1244(fp)
   1c754:	e13ec617 	ldw	r4,-1256(fp)
   1c758:	e17ec717 	ldw	r5,-1252(fp)
   1c75c:	00438e00 	call	438e0 <__muldi3>
   1c760:	100f883a 	mov	r7,r2
   1c764:	1811883a 	mov	r8,r3
   1c768:	380b883a 	mov	r5,r7
   1c76c:	400d883a 	mov	r6,r8
   1c770:	8145883a 	add	r2,r16,r5
   1c774:	1409803a 	cmpltu	r4,r2,r16
   1c778:	8987883a 	add	r3,r17,r6
   1c77c:	20c9883a 	add	r4,r4,r3
   1c780:	2007883a 	mov	r3,r4
   1c784:	1025883a 	mov	r18,r2
   1c788:	1827883a 	mov	r19,r3
       + (uint64_t)(a[4]*2) * a[7]
       + (uint64_t)(a[5]*2) * a[6];
   1c78c:	e0be8717 	ldw	r2,-1508(fp)
   1c790:	10800504 	addi	r2,r2,20
   1c794:	10800017 	ldw	r2,0(r2)
   1c798:	1085883a 	add	r2,r2,r2
   1c79c:	e0beca15 	stw	r2,-1240(fp)
   1c7a0:	e03ecb15 	stw	zero,-1236(fp)
   1c7a4:	e0be8717 	ldw	r2,-1508(fp)
   1c7a8:	10800604 	addi	r2,r2,24
   1c7ac:	10800017 	ldw	r2,0(r2)
   1c7b0:	e0becc15 	stw	r2,-1232(fp)
   1c7b4:	e03ecd15 	stw	zero,-1228(fp)
   1c7b8:	e1becc17 	ldw	r6,-1232(fp)
   1c7bc:	e1fecd17 	ldw	r7,-1228(fp)
   1c7c0:	e13eca17 	ldw	r4,-1240(fp)
   1c7c4:	e17ecb17 	ldw	r5,-1236(fp)
   1c7c8:	00438e00 	call	438e0 <__muldi3>
   1c7cc:	1009883a 	mov	r4,r2
   1c7d0:	180b883a 	mov	r5,r3
   1c7d4:	2021883a 	mov	r16,r4
   1c7d8:	2823883a 	mov	r17,r5
    c += (uint64_t)(a[0]*2) * a[1];
    VERIFY_BITS(c, 62);
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)(a[2]*2) * a[9]
       + (uint64_t)(a[3]*2) * a[8]
       + (uint64_t)(a[4]*2) * a[7]
   1c7dc:	e0be8717 	ldw	r2,-1508(fp)
   1c7e0:	10800404 	addi	r2,r2,16
   1c7e4:	10800017 	ldw	r2,0(r2)
   1c7e8:	1085883a 	add	r2,r2,r2
   1c7ec:	e0bece15 	stw	r2,-1224(fp)
   1c7f0:	e03ecf15 	stw	zero,-1220(fp)
   1c7f4:	e0be8717 	ldw	r2,-1508(fp)
   1c7f8:	10800704 	addi	r2,r2,28
   1c7fc:	10800017 	ldw	r2,0(r2)
   1c800:	e0bed015 	stw	r2,-1216(fp)
   1c804:	e03ed115 	stw	zero,-1212(fp)
   1c808:	e1bed017 	ldw	r6,-1216(fp)
   1c80c:	e1fed117 	ldw	r7,-1212(fp)
   1c810:	e13ece17 	ldw	r4,-1224(fp)
   1c814:	e17ecf17 	ldw	r5,-1220(fp)
   1c818:	00438e00 	call	438e0 <__muldi3>
   1c81c:	100f883a 	mov	r7,r2
   1c820:	1811883a 	mov	r8,r3
   1c824:	380b883a 	mov	r5,r7
   1c828:	400d883a 	mov	r6,r8
       + (uint64_t)(a[5]*2) * a[6];
   1c82c:	8145883a 	add	r2,r16,r5
   1c830:	1409803a 	cmpltu	r4,r2,r16
   1c834:	8987883a 	add	r3,r17,r6
   1c838:	20c9883a 	add	r4,r4,r3
   1c83c:	2007883a 	mov	r3,r4
   1c840:	100b883a 	mov	r5,r2
   1c844:	180d883a 	mov	r6,r3
   1c848:	9145883a 	add	r2,r18,r5
   1c84c:	1489803a 	cmpltu	r4,r2,r18
   1c850:	9987883a 	add	r3,r19,r6
   1c854:	20c9883a 	add	r4,r4,r3
   1c858:	2007883a 	mov	r3,r4
   1c85c:	100f883a 	mov	r7,r2
   1c860:	1811883a 	mov	r8,r3
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */

    c += (uint64_t)(a[0]*2) * a[1];
    VERIFY_BITS(c, 62);
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */
    d += (uint64_t)(a[2]*2) * a[9]
   1c864:	e13e6717 	ldw	r4,-1636(fp)
   1c868:	e17e6817 	ldw	r5,-1632(fp)
   1c86c:	21c5883a 	add	r2,r4,r7
   1c870:	110d803a 	cmpltu	r6,r2,r4
   1c874:	2a07883a 	add	r3,r5,r8
   1c878:	30c9883a 	add	r4,r6,r3
   1c87c:	2007883a 	mov	r3,r4
   1c880:	e0be6715 	stw	r2,-1636(fp)
   1c884:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[3]*2) * a[8]
       + (uint64_t)(a[4]*2) * a[7]
       + (uint64_t)(a[5]*2) * a[6];
    VERIFY_BITS(d, 63);
   1c888:	e0be6717 	ldw	r2,-1636(fp)
   1c88c:	e0fe6817 	ldw	r3,-1632(fp)
   1c890:	1804d7fa 	srli	r2,r3,31
   1c894:	10803fcc 	andi	r2,r2,255
   1c898:	10000d26 	beq	r2,zero,1c8d0 <secp256k1_fe_sqr_inner+0xef4>
   1c89c:	d0a01617 	ldw	r2,-32680(gp)
   1c8a0:	10c00317 	ldw	r3,12(r2)
   1c8a4:	00800174 	movhi	r2,5
   1c8a8:	10933704 	addi	r2,r2,19676
   1c8ac:	d8800015 	stw	r2,0(sp)
   1c8b0:	01c0d0c4 	movi	r7,835
   1c8b4:	01800174 	movhi	r6,5
   1c8b8:	3191dd04 	addi	r6,r6,18292
   1c8bc:	01400174 	movhi	r5,5
   1c8c0:	2951e804 	addi	r5,r5,18336
   1c8c4:	1809883a 	mov	r4,r3
   1c8c8:	00461000 	call	46100 <fprintf>
   1c8cc:	0045fd40 	call	45fd4 <abort>
    /* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    u1 = d & M; d >>= 26; c += u1 * R0;
   1c8d0:	e0be6417 	ldw	r2,-1648(fp)
   1c8d4:	e0bed215 	stw	r2,-1208(fp)
   1c8d8:	e03ed315 	stw	zero,-1204(fp)
   1c8dc:	e0be6717 	ldw	r2,-1636(fp)
   1c8e0:	e0fed217 	ldw	r3,-1208(fp)
   1c8e4:	10c4703a 	and	r2,r2,r3
   1c8e8:	e0be6f15 	stw	r2,-1604(fp)
   1c8ec:	e0be6817 	ldw	r2,-1632(fp)
   1c8f0:	e13ed317 	ldw	r4,-1204(fp)
   1c8f4:	1104703a 	and	r2,r2,r4
   1c8f8:	e0be7015 	stw	r2,-1600(fp)
   1c8fc:	e0be6817 	ldw	r2,-1632(fp)
   1c900:	100691ba 	slli	r3,r2,6
   1c904:	e0be6717 	ldw	r2,-1636(fp)
   1c908:	1004d6ba 	srli	r2,r2,26
   1c90c:	10c4b03a 	or	r2,r2,r3
   1c910:	e0be6715 	stw	r2,-1636(fp)
   1c914:	e0be6817 	ldw	r2,-1632(fp)
   1c918:	1004d6ba 	srli	r2,r2,26
   1c91c:	e0be6815 	stw	r2,-1632(fp)
   1c920:	e0be6517 	ldw	r2,-1644(fp)
   1c924:	e0bed415 	stw	r2,-1200(fp)
   1c928:	e03ed515 	stw	zero,-1196(fp)
   1c92c:	e1be6f17 	ldw	r6,-1604(fp)
   1c930:	e1fe7017 	ldw	r7,-1600(fp)
   1c934:	e13ed417 	ldw	r4,-1200(fp)
   1c938:	e17ed517 	ldw	r5,-1196(fp)
   1c93c:	00438e00 	call	438e0 <__muldi3>
   1c940:	1009883a 	mov	r4,r2
   1c944:	180b883a 	mov	r5,r3
   1c948:	200f883a 	mov	r7,r4
   1c94c:	2811883a 	mov	r8,r5
   1c950:	e13e6a17 	ldw	r4,-1624(fp)
   1c954:	e17e6b17 	ldw	r5,-1620(fp)
   1c958:	21c5883a 	add	r2,r4,r7
   1c95c:	110d803a 	cmpltu	r6,r2,r4
   1c960:	2a07883a 	add	r3,r5,r8
   1c964:	30c9883a 	add	r4,r6,r3
   1c968:	2007883a 	mov	r3,r4
   1c96c:	e0be6a15 	stw	r2,-1624(fp)
   1c970:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u1, 26);
   1c974:	e0be7017 	ldw	r2,-1600(fp)
   1c978:	100691ba 	slli	r3,r2,6
   1c97c:	e0be6f17 	ldw	r2,-1604(fp)
   1c980:	1004d6ba 	srli	r2,r2,26
   1c984:	e0bed615 	stw	r2,-1192(fp)
   1c988:	e1bed617 	ldw	r6,-1192(fp)
   1c98c:	1986b03a 	or	r3,r3,r6
   1c990:	e0fed615 	stw	r3,-1192(fp)
   1c994:	e0be7017 	ldw	r2,-1600(fp)
   1c998:	1004d6ba 	srli	r2,r2,26
   1c99c:	e0bed715 	stw	r2,-1188(fp)
   1c9a0:	e1fed617 	ldw	r7,-1192(fp)
   1c9a4:	e0fed717 	ldw	r3,-1188(fp)
   1c9a8:	38c4b03a 	or	r2,r7,r3
   1c9ac:	1004c03a 	cmpne	r2,r2,zero
   1c9b0:	10803fcc 	andi	r2,r2,255
   1c9b4:	10000d26 	beq	r2,zero,1c9ec <secp256k1_fe_sqr_inner+0x1010>
   1c9b8:	d0a01617 	ldw	r2,-32680(gp)
   1c9bc:	10c00317 	ldw	r3,12(r2)
   1c9c0:	00800174 	movhi	r2,5
   1c9c4:	10938404 	addi	r2,r2,19984
   1c9c8:	d8800015 	stw	r2,0(sp)
   1c9cc:	01c0d184 	movi	r7,838
   1c9d0:	01800174 	movhi	r6,5
   1c9d4:	3191dd04 	addi	r6,r6,18292
   1c9d8:	01400174 	movhi	r5,5
   1c9dc:	2951e804 	addi	r5,r5,18336
   1c9e0:	1809883a 	mov	r4,r3
   1c9e4:	00461000 	call	46100 <fprintf>
   1c9e8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 37);
   1c9ec:	e0be6817 	ldw	r2,-1632(fp)
   1c9f0:	1004d17a 	srli	r2,r2,5
   1c9f4:	e0bed815 	stw	r2,-1184(fp)
   1c9f8:	e03ed915 	stw	zero,-1180(fp)
   1c9fc:	e13ed817 	ldw	r4,-1184(fp)
   1ca00:	e1bed917 	ldw	r6,-1180(fp)
   1ca04:	2184b03a 	or	r2,r4,r6
   1ca08:	1004c03a 	cmpne	r2,r2,zero
   1ca0c:	10803fcc 	andi	r2,r2,255
   1ca10:	10000d26 	beq	r2,zero,1ca48 <secp256k1_fe_sqr_inner+0x106c>
   1ca14:	d0a01617 	ldw	r2,-32680(gp)
   1ca18:	10c00317 	ldw	r3,12(r2)
   1ca1c:	00800174 	movhi	r2,5
   1ca20:	10934d04 	addi	r2,r2,19764
   1ca24:	d8800015 	stw	r2,0(sp)
   1ca28:	01c0d1c4 	movi	r7,839
   1ca2c:	01800174 	movhi	r6,5
   1ca30:	3191dd04 	addi	r6,r6,18292
   1ca34:	01400174 	movhi	r5,5
   1ca38:	2951e804 	addi	r5,r5,18336
   1ca3c:	1809883a 	mov	r4,r3
   1ca40:	00461000 	call	46100 <fprintf>
   1ca44:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 63);
   1ca48:	e0be6a17 	ldw	r2,-1624(fp)
   1ca4c:	e0fe6b17 	ldw	r3,-1620(fp)
   1ca50:	1804d7fa 	srli	r2,r3,31
   1ca54:	10803fcc 	andi	r2,r2,255
   1ca58:	10000d26 	beq	r2,zero,1ca90 <secp256k1_fe_sqr_inner+0x10b4>
   1ca5c:	d0a01617 	ldw	r2,-32680(gp)
   1ca60:	10c00317 	ldw	r3,12(r2)
   1ca64:	00800174 	movhi	r2,5
   1ca68:	10938f04 	addi	r2,r2,20028
   1ca6c:	d8800015 	stw	r2,0(sp)
   1ca70:	01c0d204 	movi	r7,840
   1ca74:	01800174 	movhi	r6,5
   1ca78:	3191dd04 	addi	r6,r6,18292
   1ca7c:	01400174 	movhi	r5,5
   1ca80:	2951e804 	addi	r5,r5,18336
   1ca84:	1809883a 	mov	r4,r3
   1ca88:	00461000 	call	46100 <fprintf>
   1ca8c:	0045fd40 	call	45fd4 <abort>
    /* [d u1 0 t9 0 0 0 0 0 0 0 c-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    t1 = c & M; c >>= 26; c += u1 * R1;
   1ca90:	e0fe6a17 	ldw	r3,-1624(fp)
   1ca94:	e0be6417 	ldw	r2,-1648(fp)
   1ca98:	1884703a 	and	r2,r3,r2
   1ca9c:	e0be7115 	stw	r2,-1596(fp)
   1caa0:	e0be6b17 	ldw	r2,-1620(fp)
   1caa4:	100691ba 	slli	r3,r2,6
   1caa8:	e0be6a17 	ldw	r2,-1624(fp)
   1caac:	1004d6ba 	srli	r2,r2,26
   1cab0:	10c4b03a 	or	r2,r2,r3
   1cab4:	e0be6a15 	stw	r2,-1624(fp)
   1cab8:	e0be6b17 	ldw	r2,-1620(fp)
   1cabc:	1004d6ba 	srli	r2,r2,26
   1cac0:	e0be6b15 	stw	r2,-1620(fp)
   1cac4:	e0be6617 	ldw	r2,-1640(fp)
   1cac8:	e0beda15 	stw	r2,-1176(fp)
   1cacc:	e03edb15 	stw	zero,-1172(fp)
   1cad0:	e1be6f17 	ldw	r6,-1604(fp)
   1cad4:	e1fe7017 	ldw	r7,-1600(fp)
   1cad8:	e13eda17 	ldw	r4,-1176(fp)
   1cadc:	e17edb17 	ldw	r5,-1172(fp)
   1cae0:	00438e00 	call	438e0 <__muldi3>
   1cae4:	1009883a 	mov	r4,r2
   1cae8:	180b883a 	mov	r5,r3
   1caec:	200f883a 	mov	r7,r4
   1caf0:	2811883a 	mov	r8,r5
   1caf4:	e13e6a17 	ldw	r4,-1624(fp)
   1caf8:	e17e6b17 	ldw	r5,-1620(fp)
   1cafc:	21c5883a 	add	r2,r4,r7
   1cb00:	110d803a 	cmpltu	r6,r2,r4
   1cb04:	2a07883a 	add	r3,r5,r8
   1cb08:	30c9883a 	add	r4,r6,r3
   1cb0c:	2007883a 	mov	r3,r4
   1cb10:	e0be6a15 	stw	r2,-1624(fp)
   1cb14:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t1, 26);
   1cb18:	e0be7117 	ldw	r2,-1596(fp)
   1cb1c:	1004d6ba 	srli	r2,r2,26
   1cb20:	1004c03a 	cmpne	r2,r2,zero
   1cb24:	10803fcc 	andi	r2,r2,255
   1cb28:	10000d26 	beq	r2,zero,1cb60 <secp256k1_fe_sqr_inner+0x1184>
   1cb2c:	d0a01617 	ldw	r2,-32680(gp)
   1cb30:	10c00317 	ldw	r3,12(r2)
   1cb34:	00800174 	movhi	r2,5
   1cb38:	10939a04 	addi	r2,r2,20072
   1cb3c:	d8800015 	stw	r2,0(sp)
   1cb40:	01c0d2c4 	movi	r7,843
   1cb44:	01800174 	movhi	r6,5
   1cb48:	3191dd04 	addi	r6,r6,18292
   1cb4c:	01400174 	movhi	r5,5
   1cb50:	2951e804 	addi	r5,r5,18336
   1cb54:	1809883a 	mov	r4,r3
   1cb58:	00461000 	call	46100 <fprintf>
   1cb5c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 38);
   1cb60:	e0be6b17 	ldw	r2,-1620(fp)
   1cb64:	1004d1ba 	srli	r2,r2,6
   1cb68:	e0bedc15 	stw	r2,-1168(fp)
   1cb6c:	e03edd15 	stw	zero,-1164(fp)
   1cb70:	e1fedc17 	ldw	r7,-1168(fp)
   1cb74:	e0fedd17 	ldw	r3,-1164(fp)
   1cb78:	38c4b03a 	or	r2,r7,r3
   1cb7c:	1004c03a 	cmpne	r2,r2,zero
   1cb80:	10803fcc 	andi	r2,r2,255
   1cb84:	10000d26 	beq	r2,zero,1cbbc <secp256k1_fe_sqr_inner+0x11e0>
   1cb88:	d0a01617 	ldw	r2,-32680(gp)
   1cb8c:	10c00317 	ldw	r3,12(r2)
   1cb90:	00800174 	movhi	r2,5
   1cb94:	1093a504 	addi	r2,r2,20116
   1cb98:	d8800015 	stw	r2,0(sp)
   1cb9c:	01c0d304 	movi	r7,844
   1cba0:	01800174 	movhi	r6,5
   1cba4:	3191dd04 	addi	r6,r6,18292
   1cba8:	01400174 	movhi	r5,5
   1cbac:	2951e804 	addi	r5,r5,18336
   1cbb0:	1809883a 	mov	r4,r3
   1cbb4:	00461000 	call	46100 <fprintf>
   1cbb8:	0045fd40 	call	45fd4 <abort>
    /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[2]
   1cbbc:	e0be8717 	ldw	r2,-1508(fp)
   1cbc0:	10800017 	ldw	r2,0(r2)
   1cbc4:	1085883a 	add	r2,r2,r2
   1cbc8:	e0bede15 	stw	r2,-1160(fp)
   1cbcc:	e03edf15 	stw	zero,-1156(fp)
   1cbd0:	e0be8717 	ldw	r2,-1508(fp)
   1cbd4:	10800204 	addi	r2,r2,8
   1cbd8:	10800017 	ldw	r2,0(r2)
   1cbdc:	e0bee015 	stw	r2,-1152(fp)
   1cbe0:	e03ee115 	stw	zero,-1148(fp)
   1cbe4:	e1bee017 	ldw	r6,-1152(fp)
   1cbe8:	e1fee117 	ldw	r7,-1148(fp)
   1cbec:	e13ede17 	ldw	r4,-1160(fp)
   1cbf0:	e17edf17 	ldw	r5,-1156(fp)
   1cbf4:	00438e00 	call	438e0 <__muldi3>
   1cbf8:	1009883a 	mov	r4,r2
   1cbfc:	180b883a 	mov	r5,r3
   1cc00:	2021883a 	mov	r16,r4
   1cc04:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * a[1];
   1cc08:	e0be8717 	ldw	r2,-1508(fp)
   1cc0c:	10800104 	addi	r2,r2,4
   1cc10:	10800017 	ldw	r2,0(r2)
   1cc14:	e0bee215 	stw	r2,-1144(fp)
   1cc18:	e03ee315 	stw	zero,-1140(fp)
   1cc1c:	e0be8717 	ldw	r2,-1508(fp)
   1cc20:	10800104 	addi	r2,r2,4
   1cc24:	10800017 	ldw	r2,0(r2)
   1cc28:	e0bee415 	stw	r2,-1136(fp)
   1cc2c:	e03ee515 	stw	zero,-1132(fp)
   1cc30:	e1bee417 	ldw	r6,-1136(fp)
   1cc34:	e1fee517 	ldw	r7,-1132(fp)
   1cc38:	e13ee217 	ldw	r4,-1144(fp)
   1cc3c:	e17ee317 	ldw	r5,-1140(fp)
   1cc40:	00438e00 	call	438e0 <__muldi3>
   1cc44:	100f883a 	mov	r7,r2
   1cc48:	1811883a 	mov	r8,r3
   1cc4c:	380b883a 	mov	r5,r7
   1cc50:	400d883a 	mov	r6,r8
   1cc54:	8145883a 	add	r2,r16,r5
   1cc58:	1409803a 	cmpltu	r4,r2,r16
   1cc5c:	8987883a 	add	r3,r17,r6
   1cc60:	20c9883a 	add	r4,r4,r3
   1cc64:	2007883a 	mov	r3,r4
   1cc68:	100f883a 	mov	r7,r2
   1cc6c:	1811883a 	mov	r8,r3
    VERIFY_BITS(t1, 26);
    VERIFY_BITS(c, 38);
    /* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[2]
   1cc70:	e13e6a17 	ldw	r4,-1624(fp)
   1cc74:	e17e6b17 	ldw	r5,-1620(fp)
   1cc78:	21c5883a 	add	r2,r4,r7
   1cc7c:	110d803a 	cmpltu	r6,r2,r4
   1cc80:	2a07883a 	add	r3,r5,r8
   1cc84:	30c9883a 	add	r4,r6,r3
   1cc88:	2007883a 	mov	r3,r4
   1cc8c:	e0be6a15 	stw	r2,-1624(fp)
   1cc90:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)a[1] * a[1];
    VERIFY_BITS(c, 62);
   1cc94:	e0be6b17 	ldw	r2,-1620(fp)
   1cc98:	1004d7ba 	srli	r2,r2,30
   1cc9c:	e0bee615 	stw	r2,-1128(fp)
   1cca0:	e03ee715 	stw	zero,-1124(fp)
   1cca4:	e13ee617 	ldw	r4,-1128(fp)
   1cca8:	e1bee717 	ldw	r6,-1124(fp)
   1ccac:	2184b03a 	or	r2,r4,r6
   1ccb0:	1004c03a 	cmpne	r2,r2,zero
   1ccb4:	10803fcc 	andi	r2,r2,255
   1ccb8:	10000d26 	beq	r2,zero,1ccf0 <secp256k1_fe_sqr_inner+0x1314>
   1ccbc:	d0a01617 	ldw	r2,-32680(gp)
   1ccc0:	10c00317 	ldw	r3,12(r2)
   1ccc4:	00800174 	movhi	r2,5
   1ccc8:	10937904 	addi	r2,r2,19940
   1cccc:	d8800015 	stw	r2,0(sp)
   1ccd0:	01c0d484 	movi	r7,850
   1ccd4:	01800174 	movhi	r6,5
   1ccd8:	3191dd04 	addi	r6,r6,18292
   1ccdc:	01400174 	movhi	r5,5
   1cce0:	2951e804 	addi	r5,r5,18336
   1cce4:	1809883a 	mov	r4,r3
   1cce8:	00461000 	call	46100 <fprintf>
   1ccec:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)(a[3]*2) * a[9]
   1ccf0:	e0be8717 	ldw	r2,-1508(fp)
   1ccf4:	10800304 	addi	r2,r2,12
   1ccf8:	10800017 	ldw	r2,0(r2)
   1ccfc:	1085883a 	add	r2,r2,r2
   1cd00:	e0bee815 	stw	r2,-1120(fp)
   1cd04:	e03ee915 	stw	zero,-1116(fp)
   1cd08:	e0be8717 	ldw	r2,-1508(fp)
   1cd0c:	10800904 	addi	r2,r2,36
   1cd10:	10800017 	ldw	r2,0(r2)
   1cd14:	e0beea15 	stw	r2,-1112(fp)
   1cd18:	e03eeb15 	stw	zero,-1108(fp)
   1cd1c:	e1beea17 	ldw	r6,-1112(fp)
   1cd20:	e1feeb17 	ldw	r7,-1108(fp)
   1cd24:	e13ee817 	ldw	r4,-1120(fp)
   1cd28:	e17ee917 	ldw	r5,-1116(fp)
   1cd2c:	00438e00 	call	438e0 <__muldi3>
   1cd30:	1009883a 	mov	r4,r2
   1cd34:	180b883a 	mov	r5,r3
   1cd38:	2021883a 	mov	r16,r4
   1cd3c:	2823883a 	mov	r17,r5
       + (uint64_t)(a[4]*2) * a[8]
   1cd40:	e0be8717 	ldw	r2,-1508(fp)
   1cd44:	10800404 	addi	r2,r2,16
   1cd48:	10800017 	ldw	r2,0(r2)
   1cd4c:	1085883a 	add	r2,r2,r2
   1cd50:	e0beec15 	stw	r2,-1104(fp)
   1cd54:	e03eed15 	stw	zero,-1100(fp)
   1cd58:	e0be8717 	ldw	r2,-1508(fp)
   1cd5c:	10800804 	addi	r2,r2,32
   1cd60:	10800017 	ldw	r2,0(r2)
   1cd64:	e0beee15 	stw	r2,-1096(fp)
   1cd68:	e03eef15 	stw	zero,-1092(fp)
   1cd6c:	e1beee17 	ldw	r6,-1096(fp)
   1cd70:	e1feef17 	ldw	r7,-1092(fp)
   1cd74:	e13eec17 	ldw	r4,-1104(fp)
   1cd78:	e17eed17 	ldw	r5,-1100(fp)
   1cd7c:	00438e00 	call	438e0 <__muldi3>
   1cd80:	100f883a 	mov	r7,r2
   1cd84:	1811883a 	mov	r8,r3
   1cd88:	380b883a 	mov	r5,r7
   1cd8c:	400d883a 	mov	r6,r8
   1cd90:	8145883a 	add	r2,r16,r5
   1cd94:	1409803a 	cmpltu	r4,r2,r16
   1cd98:	8987883a 	add	r3,r17,r6
   1cd9c:	20c9883a 	add	r4,r4,r3
   1cda0:	2007883a 	mov	r3,r4
   1cda4:	1025883a 	mov	r18,r2
   1cda8:	1827883a 	mov	r19,r3
       + (uint64_t)(a[5]*2) * a[7]
       + (uint64_t)a[6] * a[6];
   1cdac:	e0be8717 	ldw	r2,-1508(fp)
   1cdb0:	10800604 	addi	r2,r2,24
   1cdb4:	10800017 	ldw	r2,0(r2)
   1cdb8:	e0bef015 	stw	r2,-1088(fp)
   1cdbc:	e03ef115 	stw	zero,-1084(fp)
   1cdc0:	e0be8717 	ldw	r2,-1508(fp)
   1cdc4:	10800604 	addi	r2,r2,24
   1cdc8:	10800017 	ldw	r2,0(r2)
   1cdcc:	e0bef215 	stw	r2,-1080(fp)
   1cdd0:	e03ef315 	stw	zero,-1076(fp)
   1cdd4:	e1bef217 	ldw	r6,-1080(fp)
   1cdd8:	e1fef317 	ldw	r7,-1076(fp)
   1cddc:	e13ef017 	ldw	r4,-1088(fp)
   1cde0:	e17ef117 	ldw	r5,-1084(fp)
   1cde4:	00438e00 	call	438e0 <__muldi3>
   1cde8:	1009883a 	mov	r4,r2
   1cdec:	180b883a 	mov	r5,r3
   1cdf0:	2021883a 	mov	r16,r4
   1cdf4:	2823883a 	mov	r17,r5
       + (uint64_t)a[1] * a[1];
    VERIFY_BITS(c, 62);
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)(a[3]*2) * a[9]
       + (uint64_t)(a[4]*2) * a[8]
       + (uint64_t)(a[5]*2) * a[7]
   1cdf8:	e0be8717 	ldw	r2,-1508(fp)
   1cdfc:	10800504 	addi	r2,r2,20
   1ce00:	10800017 	ldw	r2,0(r2)
   1ce04:	1085883a 	add	r2,r2,r2
   1ce08:	e0bef415 	stw	r2,-1072(fp)
   1ce0c:	e03ef515 	stw	zero,-1068(fp)
   1ce10:	e0be8717 	ldw	r2,-1508(fp)
   1ce14:	10800704 	addi	r2,r2,28
   1ce18:	10800017 	ldw	r2,0(r2)
   1ce1c:	e0bef615 	stw	r2,-1064(fp)
   1ce20:	e03ef715 	stw	zero,-1060(fp)
   1ce24:	e1bef617 	ldw	r6,-1064(fp)
   1ce28:	e1fef717 	ldw	r7,-1060(fp)
   1ce2c:	e13ef417 	ldw	r4,-1072(fp)
   1ce30:	e17ef517 	ldw	r5,-1068(fp)
   1ce34:	00438e00 	call	438e0 <__muldi3>
   1ce38:	100f883a 	mov	r7,r2
   1ce3c:	1811883a 	mov	r8,r3
   1ce40:	380b883a 	mov	r5,r7
   1ce44:	400d883a 	mov	r6,r8
       + (uint64_t)a[6] * a[6];
   1ce48:	8145883a 	add	r2,r16,r5
   1ce4c:	1409803a 	cmpltu	r4,r2,r16
   1ce50:	8987883a 	add	r3,r17,r6
   1ce54:	20c9883a 	add	r4,r4,r3
   1ce58:	2007883a 	mov	r3,r4
   1ce5c:	100b883a 	mov	r5,r2
   1ce60:	180d883a 	mov	r6,r3
   1ce64:	9145883a 	add	r2,r18,r5
   1ce68:	1489803a 	cmpltu	r4,r2,r18
   1ce6c:	9987883a 	add	r3,r19,r6
   1ce70:	20c9883a 	add	r4,r4,r3
   1ce74:	2007883a 	mov	r3,r4
   1ce78:	100f883a 	mov	r7,r2
   1ce7c:	1811883a 	mov	r8,r3

    c += (uint64_t)(a[0]*2) * a[2]
       + (uint64_t)a[1] * a[1];
    VERIFY_BITS(c, 62);
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    d += (uint64_t)(a[3]*2) * a[9]
   1ce80:	e13e6717 	ldw	r4,-1636(fp)
   1ce84:	e17e6817 	ldw	r5,-1632(fp)
   1ce88:	21c5883a 	add	r2,r4,r7
   1ce8c:	110d803a 	cmpltu	r6,r2,r4
   1ce90:	2a07883a 	add	r3,r5,r8
   1ce94:	30c9883a 	add	r4,r6,r3
   1ce98:	2007883a 	mov	r3,r4
   1ce9c:	e0be6715 	stw	r2,-1636(fp)
   1cea0:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[4]*2) * a[8]
       + (uint64_t)(a[5]*2) * a[7]
       + (uint64_t)a[6] * a[6];
    VERIFY_BITS(d, 63);
   1cea4:	e0be6717 	ldw	r2,-1636(fp)
   1cea8:	e0fe6817 	ldw	r3,-1632(fp)
   1ceac:	1804d7fa 	srli	r2,r3,31
   1ceb0:	10803fcc 	andi	r2,r2,255
   1ceb4:	10000d26 	beq	r2,zero,1ceec <secp256k1_fe_sqr_inner+0x1510>
   1ceb8:	d0a01617 	ldw	r2,-32680(gp)
   1cebc:	10c00317 	ldw	r3,12(r2)
   1cec0:	00800174 	movhi	r2,5
   1cec4:	10933704 	addi	r2,r2,19676
   1cec8:	d8800015 	stw	r2,0(sp)
   1cecc:	01c0d604 	movi	r7,856
   1ced0:	01800174 	movhi	r6,5
   1ced4:	3191dd04 	addi	r6,r6,18292
   1ced8:	01400174 	movhi	r5,5
   1cedc:	2951e804 	addi	r5,r5,18336
   1cee0:	1809883a 	mov	r4,r3
   1cee4:	00461000 	call	46100 <fprintf>
   1cee8:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    u2 = d & M; d >>= 26; c += u2 * R0;
   1ceec:	e0be6417 	ldw	r2,-1648(fp)
   1cef0:	e0bef815 	stw	r2,-1056(fp)
   1cef4:	e03ef915 	stw	zero,-1052(fp)
   1cef8:	e0be6717 	ldw	r2,-1636(fp)
   1cefc:	e1fef817 	ldw	r7,-1056(fp)
   1cf00:	11c4703a 	and	r2,r2,r7
   1cf04:	e0be7215 	stw	r2,-1592(fp)
   1cf08:	e0be6817 	ldw	r2,-1632(fp)
   1cf0c:	e0fef917 	ldw	r3,-1052(fp)
   1cf10:	10c4703a 	and	r2,r2,r3
   1cf14:	e0be7315 	stw	r2,-1588(fp)
   1cf18:	e0be6817 	ldw	r2,-1632(fp)
   1cf1c:	100691ba 	slli	r3,r2,6
   1cf20:	e0be6717 	ldw	r2,-1636(fp)
   1cf24:	1004d6ba 	srli	r2,r2,26
   1cf28:	10c4b03a 	or	r2,r2,r3
   1cf2c:	e0be6715 	stw	r2,-1636(fp)
   1cf30:	e0be6817 	ldw	r2,-1632(fp)
   1cf34:	1004d6ba 	srli	r2,r2,26
   1cf38:	e0be6815 	stw	r2,-1632(fp)
   1cf3c:	e0be6517 	ldw	r2,-1644(fp)
   1cf40:	e0befa15 	stw	r2,-1048(fp)
   1cf44:	e03efb15 	stw	zero,-1044(fp)
   1cf48:	e1be7217 	ldw	r6,-1592(fp)
   1cf4c:	e1fe7317 	ldw	r7,-1588(fp)
   1cf50:	e13efa17 	ldw	r4,-1048(fp)
   1cf54:	e17efb17 	ldw	r5,-1044(fp)
   1cf58:	00438e00 	call	438e0 <__muldi3>
   1cf5c:	1009883a 	mov	r4,r2
   1cf60:	180b883a 	mov	r5,r3
   1cf64:	200f883a 	mov	r7,r4
   1cf68:	2811883a 	mov	r8,r5
   1cf6c:	e13e6a17 	ldw	r4,-1624(fp)
   1cf70:	e17e6b17 	ldw	r5,-1620(fp)
   1cf74:	21c5883a 	add	r2,r4,r7
   1cf78:	110d803a 	cmpltu	r6,r2,r4
   1cf7c:	2a07883a 	add	r3,r5,r8
   1cf80:	30c9883a 	add	r4,r6,r3
   1cf84:	2007883a 	mov	r3,r4
   1cf88:	e0be6a15 	stw	r2,-1624(fp)
   1cf8c:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u2, 26);
   1cf90:	e0be7317 	ldw	r2,-1588(fp)
   1cf94:	100691ba 	slli	r3,r2,6
   1cf98:	e0be7217 	ldw	r2,-1592(fp)
   1cf9c:	1004d6ba 	srli	r2,r2,26
   1cfa0:	e0befc15 	stw	r2,-1040(fp)
   1cfa4:	e13efc17 	ldw	r4,-1040(fp)
   1cfa8:	1906b03a 	or	r3,r3,r4
   1cfac:	e0fefc15 	stw	r3,-1040(fp)
   1cfb0:	e0be7317 	ldw	r2,-1588(fp)
   1cfb4:	1004d6ba 	srli	r2,r2,26
   1cfb8:	e0befd15 	stw	r2,-1036(fp)
   1cfbc:	e1befc17 	ldw	r6,-1040(fp)
   1cfc0:	e1fefd17 	ldw	r7,-1036(fp)
   1cfc4:	31c4b03a 	or	r2,r6,r7
   1cfc8:	1004c03a 	cmpne	r2,r2,zero
   1cfcc:	10803fcc 	andi	r2,r2,255
   1cfd0:	10000d26 	beq	r2,zero,1d008 <secp256k1_fe_sqr_inner+0x162c>
   1cfd4:	d0a01617 	ldw	r2,-32680(gp)
   1cfd8:	10c00317 	ldw	r3,12(r2)
   1cfdc:	00800174 	movhi	r2,5
   1cfe0:	1093b004 	addi	r2,r2,20160
   1cfe4:	d8800015 	stw	r2,0(sp)
   1cfe8:	01c0d6c4 	movi	r7,859
   1cfec:	01800174 	movhi	r6,5
   1cff0:	3191dd04 	addi	r6,r6,18292
   1cff4:	01400174 	movhi	r5,5
   1cff8:	2951e804 	addi	r5,r5,18336
   1cffc:	1809883a 	mov	r4,r3
   1d000:	00461000 	call	46100 <fprintf>
   1d004:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 37);
   1d008:	e0be6817 	ldw	r2,-1632(fp)
   1d00c:	1004d17a 	srli	r2,r2,5
   1d010:	e0befe15 	stw	r2,-1032(fp)
   1d014:	e03eff15 	stw	zero,-1028(fp)
   1d018:	e0fefe17 	ldw	r3,-1032(fp)
   1d01c:	e13eff17 	ldw	r4,-1028(fp)
   1d020:	1904b03a 	or	r2,r3,r4
   1d024:	1004c03a 	cmpne	r2,r2,zero
   1d028:	10803fcc 	andi	r2,r2,255
   1d02c:	10000d26 	beq	r2,zero,1d064 <secp256k1_fe_sqr_inner+0x1688>
   1d030:	d0a01617 	ldw	r2,-32680(gp)
   1d034:	10c00317 	ldw	r3,12(r2)
   1d038:	00800174 	movhi	r2,5
   1d03c:	10934d04 	addi	r2,r2,19764
   1d040:	d8800015 	stw	r2,0(sp)
   1d044:	01c0d704 	movi	r7,860
   1d048:	01800174 	movhi	r6,5
   1d04c:	3191dd04 	addi	r6,r6,18292
   1d050:	01400174 	movhi	r5,5
   1d054:	2951e804 	addi	r5,r5,18336
   1d058:	1809883a 	mov	r4,r3
   1d05c:	00461000 	call	46100 <fprintf>
   1d060:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 63);
   1d064:	e0be6a17 	ldw	r2,-1624(fp)
   1d068:	e0fe6b17 	ldw	r3,-1620(fp)
   1d06c:	1804d7fa 	srli	r2,r3,31
   1d070:	10803fcc 	andi	r2,r2,255
   1d074:	10000d26 	beq	r2,zero,1d0ac <secp256k1_fe_sqr_inner+0x16d0>
   1d078:	d0a01617 	ldw	r2,-32680(gp)
   1d07c:	10c00317 	ldw	r3,12(r2)
   1d080:	00800174 	movhi	r2,5
   1d084:	10938f04 	addi	r2,r2,20028
   1d088:	d8800015 	stw	r2,0(sp)
   1d08c:	01c0d744 	movi	r7,861
   1d090:	01800174 	movhi	r6,5
   1d094:	3191dd04 	addi	r6,r6,18292
   1d098:	01400174 	movhi	r5,5
   1d09c:	2951e804 	addi	r5,r5,18336
   1d0a0:	1809883a 	mov	r4,r3
   1d0a4:	00461000 	call	46100 <fprintf>
   1d0a8:	0045fd40 	call	45fd4 <abort>
    /* [d u2 0 0 t9 0 0 0 0 0 0 c-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    t2 = c & M; c >>= 26; c += u2 * R1;
   1d0ac:	e0fe6a17 	ldw	r3,-1624(fp)
   1d0b0:	e0be6417 	ldw	r2,-1648(fp)
   1d0b4:	1884703a 	and	r2,r3,r2
   1d0b8:	e0be7415 	stw	r2,-1584(fp)
   1d0bc:	e0be6b17 	ldw	r2,-1620(fp)
   1d0c0:	100691ba 	slli	r3,r2,6
   1d0c4:	e0be6a17 	ldw	r2,-1624(fp)
   1d0c8:	1004d6ba 	srli	r2,r2,26
   1d0cc:	10c4b03a 	or	r2,r2,r3
   1d0d0:	e0be6a15 	stw	r2,-1624(fp)
   1d0d4:	e0be6b17 	ldw	r2,-1620(fp)
   1d0d8:	1004d6ba 	srli	r2,r2,26
   1d0dc:	e0be6b15 	stw	r2,-1620(fp)
   1d0e0:	e0be6617 	ldw	r2,-1640(fp)
   1d0e4:	e0bf0015 	stw	r2,-1024(fp)
   1d0e8:	e03f0115 	stw	zero,-1020(fp)
   1d0ec:	e1be7217 	ldw	r6,-1592(fp)
   1d0f0:	e1fe7317 	ldw	r7,-1588(fp)
   1d0f4:	e13f0017 	ldw	r4,-1024(fp)
   1d0f8:	e17f0117 	ldw	r5,-1020(fp)
   1d0fc:	00438e00 	call	438e0 <__muldi3>
   1d100:	1009883a 	mov	r4,r2
   1d104:	180b883a 	mov	r5,r3
   1d108:	200f883a 	mov	r7,r4
   1d10c:	2811883a 	mov	r8,r5
   1d110:	e13e6a17 	ldw	r4,-1624(fp)
   1d114:	e17e6b17 	ldw	r5,-1620(fp)
   1d118:	21c5883a 	add	r2,r4,r7
   1d11c:	110d803a 	cmpltu	r6,r2,r4
   1d120:	2a07883a 	add	r3,r5,r8
   1d124:	30c9883a 	add	r4,r6,r3
   1d128:	2007883a 	mov	r3,r4
   1d12c:	e0be6a15 	stw	r2,-1624(fp)
   1d130:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t2, 26);
   1d134:	e0be7417 	ldw	r2,-1584(fp)
   1d138:	1004d6ba 	srli	r2,r2,26
   1d13c:	1004c03a 	cmpne	r2,r2,zero
   1d140:	10803fcc 	andi	r2,r2,255
   1d144:	10000d26 	beq	r2,zero,1d17c <secp256k1_fe_sqr_inner+0x17a0>
   1d148:	d0a01617 	ldw	r2,-32680(gp)
   1d14c:	10c00317 	ldw	r3,12(r2)
   1d150:	00800174 	movhi	r2,5
   1d154:	1093bb04 	addi	r2,r2,20204
   1d158:	d8800015 	stw	r2,0(sp)
   1d15c:	01c0d804 	movi	r7,864
   1d160:	01800174 	movhi	r6,5
   1d164:	3191dd04 	addi	r6,r6,18292
   1d168:	01400174 	movhi	r5,5
   1d16c:	2951e804 	addi	r5,r5,18336
   1d170:	1809883a 	mov	r4,r3
   1d174:	00461000 	call	46100 <fprintf>
   1d178:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 38);
   1d17c:	e0be6b17 	ldw	r2,-1620(fp)
   1d180:	1004d1ba 	srli	r2,r2,6
   1d184:	e0bf0215 	stw	r2,-1016(fp)
   1d188:	e03f0315 	stw	zero,-1012(fp)
   1d18c:	e1bf0217 	ldw	r6,-1016(fp)
   1d190:	e1ff0317 	ldw	r7,-1012(fp)
   1d194:	31c4b03a 	or	r2,r6,r7
   1d198:	1004c03a 	cmpne	r2,r2,zero
   1d19c:	10803fcc 	andi	r2,r2,255
   1d1a0:	10000d26 	beq	r2,zero,1d1d8 <secp256k1_fe_sqr_inner+0x17fc>
   1d1a4:	d0a01617 	ldw	r2,-32680(gp)
   1d1a8:	10c00317 	ldw	r3,12(r2)
   1d1ac:	00800174 	movhi	r2,5
   1d1b0:	1093a504 	addi	r2,r2,20116
   1d1b4:	d8800015 	stw	r2,0(sp)
   1d1b8:	01c0d844 	movi	r7,865
   1d1bc:	01800174 	movhi	r6,5
   1d1c0:	3191dd04 	addi	r6,r6,18292
   1d1c4:	01400174 	movhi	r5,5
   1d1c8:	2951e804 	addi	r5,r5,18336
   1d1cc:	1809883a 	mov	r4,r3
   1d1d0:	00461000 	call	46100 <fprintf>
   1d1d4:	0045fd40 	call	45fd4 <abort>
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[3]
   1d1d8:	e0be8717 	ldw	r2,-1508(fp)
   1d1dc:	10800017 	ldw	r2,0(r2)
   1d1e0:	1085883a 	add	r2,r2,r2
   1d1e4:	e0bf0415 	stw	r2,-1008(fp)
   1d1e8:	e03f0515 	stw	zero,-1004(fp)
   1d1ec:	e0be8717 	ldw	r2,-1508(fp)
   1d1f0:	10800304 	addi	r2,r2,12
   1d1f4:	10800017 	ldw	r2,0(r2)
   1d1f8:	e0bf0615 	stw	r2,-1000(fp)
   1d1fc:	e03f0715 	stw	zero,-996(fp)
   1d200:	e1bf0617 	ldw	r6,-1000(fp)
   1d204:	e1ff0717 	ldw	r7,-996(fp)
   1d208:	e13f0417 	ldw	r4,-1008(fp)
   1d20c:	e17f0517 	ldw	r5,-1004(fp)
   1d210:	00438e00 	call	438e0 <__muldi3>
   1d214:	1009883a 	mov	r4,r2
   1d218:	180b883a 	mov	r5,r3
   1d21c:	2021883a 	mov	r16,r4
   1d220:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[2];
   1d224:	e0be8717 	ldw	r2,-1508(fp)
   1d228:	10800104 	addi	r2,r2,4
   1d22c:	10800017 	ldw	r2,0(r2)
   1d230:	1085883a 	add	r2,r2,r2
   1d234:	e0bf0815 	stw	r2,-992(fp)
   1d238:	e03f0915 	stw	zero,-988(fp)
   1d23c:	e0be8717 	ldw	r2,-1508(fp)
   1d240:	10800204 	addi	r2,r2,8
   1d244:	10800017 	ldw	r2,0(r2)
   1d248:	e0bf0a15 	stw	r2,-984(fp)
   1d24c:	e03f0b15 	stw	zero,-980(fp)
   1d250:	e1bf0a17 	ldw	r6,-984(fp)
   1d254:	e1ff0b17 	ldw	r7,-980(fp)
   1d258:	e13f0817 	ldw	r4,-992(fp)
   1d25c:	e17f0917 	ldw	r5,-988(fp)
   1d260:	00438e00 	call	438e0 <__muldi3>
   1d264:	100f883a 	mov	r7,r2
   1d268:	1811883a 	mov	r8,r3
   1d26c:	380b883a 	mov	r5,r7
   1d270:	400d883a 	mov	r6,r8
   1d274:	8145883a 	add	r2,r16,r5
   1d278:	1409803a 	cmpltu	r4,r2,r16
   1d27c:	8987883a 	add	r3,r17,r6
   1d280:	20c9883a 	add	r4,r4,r3
   1d284:	2007883a 	mov	r3,r4
   1d288:	100f883a 	mov	r7,r2
   1d28c:	1811883a 	mov	r8,r3
    VERIFY_BITS(t2, 26);
    VERIFY_BITS(c, 38);
    /* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[3]
   1d290:	e13e6a17 	ldw	r4,-1624(fp)
   1d294:	e17e6b17 	ldw	r5,-1620(fp)
   1d298:	21c5883a 	add	r2,r4,r7
   1d29c:	110d803a 	cmpltu	r6,r2,r4
   1d2a0:	2a07883a 	add	r3,r5,r8
   1d2a4:	30c9883a 	add	r4,r6,r3
   1d2a8:	2007883a 	mov	r3,r4
   1d2ac:	e0be6a15 	stw	r2,-1624(fp)
   1d2b0:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[2];
    VERIFY_BITS(c, 63);
   1d2b4:	e0be6a17 	ldw	r2,-1624(fp)
   1d2b8:	e0fe6b17 	ldw	r3,-1620(fp)
   1d2bc:	1804d7fa 	srli	r2,r3,31
   1d2c0:	10803fcc 	andi	r2,r2,255
   1d2c4:	10000d26 	beq	r2,zero,1d2fc <secp256k1_fe_sqr_inner+0x1920>
   1d2c8:	d0a01617 	ldw	r2,-32680(gp)
   1d2cc:	10c00317 	ldw	r3,12(r2)
   1d2d0:	00800174 	movhi	r2,5
   1d2d4:	10938f04 	addi	r2,r2,20028
   1d2d8:	d8800015 	stw	r2,0(sp)
   1d2dc:	01c0d9c4 	movi	r7,871
   1d2e0:	01800174 	movhi	r6,5
   1d2e4:	3191dd04 	addi	r6,r6,18292
   1d2e8:	01400174 	movhi	r5,5
   1d2ec:	2951e804 	addi	r5,r5,18336
   1d2f0:	1809883a 	mov	r4,r3
   1d2f4:	00461000 	call	46100 <fprintf>
   1d2f8:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)(a[4]*2) * a[9]
   1d2fc:	e0be8717 	ldw	r2,-1508(fp)
   1d300:	10800404 	addi	r2,r2,16
   1d304:	10800017 	ldw	r2,0(r2)
   1d308:	1085883a 	add	r2,r2,r2
   1d30c:	e0bf0c15 	stw	r2,-976(fp)
   1d310:	e03f0d15 	stw	zero,-972(fp)
   1d314:	e0be8717 	ldw	r2,-1508(fp)
   1d318:	10800904 	addi	r2,r2,36
   1d31c:	10800017 	ldw	r2,0(r2)
   1d320:	e0bf0e15 	stw	r2,-968(fp)
   1d324:	e03f0f15 	stw	zero,-964(fp)
   1d328:	e1bf0e17 	ldw	r6,-968(fp)
   1d32c:	e1ff0f17 	ldw	r7,-964(fp)
   1d330:	e13f0c17 	ldw	r4,-976(fp)
   1d334:	e17f0d17 	ldw	r5,-972(fp)
   1d338:	00438e00 	call	438e0 <__muldi3>
   1d33c:	1009883a 	mov	r4,r2
   1d340:	180b883a 	mov	r5,r3
   1d344:	2021883a 	mov	r16,r4
   1d348:	2823883a 	mov	r17,r5
       + (uint64_t)(a[5]*2) * a[8]
   1d34c:	e0be8717 	ldw	r2,-1508(fp)
   1d350:	10800504 	addi	r2,r2,20
   1d354:	10800017 	ldw	r2,0(r2)
   1d358:	1085883a 	add	r2,r2,r2
   1d35c:	e0bf1015 	stw	r2,-960(fp)
   1d360:	e03f1115 	stw	zero,-956(fp)
   1d364:	e0be8717 	ldw	r2,-1508(fp)
   1d368:	10800804 	addi	r2,r2,32
   1d36c:	10800017 	ldw	r2,0(r2)
   1d370:	e0bf1215 	stw	r2,-952(fp)
   1d374:	e03f1315 	stw	zero,-948(fp)
   1d378:	e1bf1217 	ldw	r6,-952(fp)
   1d37c:	e1ff1317 	ldw	r7,-948(fp)
   1d380:	e13f1017 	ldw	r4,-960(fp)
   1d384:	e17f1117 	ldw	r5,-956(fp)
   1d388:	00438e00 	call	438e0 <__muldi3>
   1d38c:	100f883a 	mov	r7,r2
   1d390:	1811883a 	mov	r8,r3
   1d394:	380b883a 	mov	r5,r7
   1d398:	400d883a 	mov	r6,r8
   1d39c:	8145883a 	add	r2,r16,r5
   1d3a0:	1409803a 	cmpltu	r4,r2,r16
   1d3a4:	8987883a 	add	r3,r17,r6
   1d3a8:	20c9883a 	add	r4,r4,r3
   1d3ac:	2007883a 	mov	r3,r4
   1d3b0:	1021883a 	mov	r16,r2
   1d3b4:	1823883a 	mov	r17,r3
       + (uint64_t)(a[6]*2) * a[7];
   1d3b8:	e0be8717 	ldw	r2,-1508(fp)
   1d3bc:	10800604 	addi	r2,r2,24
   1d3c0:	10800017 	ldw	r2,0(r2)
   1d3c4:	1085883a 	add	r2,r2,r2
   1d3c8:	e0bf1415 	stw	r2,-944(fp)
   1d3cc:	e03f1515 	stw	zero,-940(fp)
   1d3d0:	e0be8717 	ldw	r2,-1508(fp)
   1d3d4:	10800704 	addi	r2,r2,28
   1d3d8:	10800017 	ldw	r2,0(r2)
   1d3dc:	e0bf1615 	stw	r2,-936(fp)
   1d3e0:	e03f1715 	stw	zero,-932(fp)
   1d3e4:	e1bf1617 	ldw	r6,-936(fp)
   1d3e8:	e1ff1717 	ldw	r7,-932(fp)
   1d3ec:	e13f1417 	ldw	r4,-944(fp)
   1d3f0:	e17f1517 	ldw	r5,-940(fp)
   1d3f4:	00438e00 	call	438e0 <__muldi3>
   1d3f8:	100f883a 	mov	r7,r2
   1d3fc:	1811883a 	mov	r8,r3
   1d400:	380b883a 	mov	r5,r7
   1d404:	400d883a 	mov	r6,r8
   1d408:	8145883a 	add	r2,r16,r5
   1d40c:	1409803a 	cmpltu	r4,r2,r16
   1d410:	8987883a 	add	r3,r17,r6
   1d414:	20c9883a 	add	r4,r4,r3
   1d418:	2007883a 	mov	r3,r4
   1d41c:	100f883a 	mov	r7,r2
   1d420:	1811883a 	mov	r8,r3

    c += (uint64_t)(a[0]*2) * a[3]
       + (uint64_t)(a[1]*2) * a[2];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    d += (uint64_t)(a[4]*2) * a[9]
   1d424:	e13e6717 	ldw	r4,-1636(fp)
   1d428:	e17e6817 	ldw	r5,-1632(fp)
   1d42c:	21c5883a 	add	r2,r4,r7
   1d430:	110d803a 	cmpltu	r6,r2,r4
   1d434:	2a07883a 	add	r3,r5,r8
   1d438:	30c9883a 	add	r4,r6,r3
   1d43c:	2007883a 	mov	r3,r4
   1d440:	e0be6715 	stw	r2,-1636(fp)
   1d444:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[5]*2) * a[8]
       + (uint64_t)(a[6]*2) * a[7];
    VERIFY_BITS(d, 63);
   1d448:	e0be6717 	ldw	r2,-1636(fp)
   1d44c:	e0fe6817 	ldw	r3,-1632(fp)
   1d450:	1804d7fa 	srli	r2,r3,31
   1d454:	10803fcc 	andi	r2,r2,255
   1d458:	10000d26 	beq	r2,zero,1d490 <secp256k1_fe_sqr_inner+0x1ab4>
   1d45c:	d0a01617 	ldw	r2,-32680(gp)
   1d460:	10c00317 	ldw	r3,12(r2)
   1d464:	00800174 	movhi	r2,5
   1d468:	10933704 	addi	r2,r2,19676
   1d46c:	d8800015 	stw	r2,0(sp)
   1d470:	01c0db04 	movi	r7,876
   1d474:	01800174 	movhi	r6,5
   1d478:	3191dd04 	addi	r6,r6,18292
   1d47c:	01400174 	movhi	r5,5
   1d480:	2951e804 	addi	r5,r5,18336
   1d484:	1809883a 	mov	r4,r3
   1d488:	00461000 	call	46100 <fprintf>
   1d48c:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    u3 = d & M; d >>= 26; c += u3 * R0;
   1d490:	e0be6417 	ldw	r2,-1648(fp)
   1d494:	e0bf1815 	stw	r2,-928(fp)
   1d498:	e03f1915 	stw	zero,-924(fp)
   1d49c:	e0be6717 	ldw	r2,-1636(fp)
   1d4a0:	e0ff1817 	ldw	r3,-928(fp)
   1d4a4:	10c4703a 	and	r2,r2,r3
   1d4a8:	e0be7515 	stw	r2,-1580(fp)
   1d4ac:	e0be6817 	ldw	r2,-1632(fp)
   1d4b0:	e13f1917 	ldw	r4,-924(fp)
   1d4b4:	1104703a 	and	r2,r2,r4
   1d4b8:	e0be7615 	stw	r2,-1576(fp)
   1d4bc:	e0be6817 	ldw	r2,-1632(fp)
   1d4c0:	100691ba 	slli	r3,r2,6
   1d4c4:	e0be6717 	ldw	r2,-1636(fp)
   1d4c8:	1004d6ba 	srli	r2,r2,26
   1d4cc:	10c4b03a 	or	r2,r2,r3
   1d4d0:	e0be6715 	stw	r2,-1636(fp)
   1d4d4:	e0be6817 	ldw	r2,-1632(fp)
   1d4d8:	1004d6ba 	srli	r2,r2,26
   1d4dc:	e0be6815 	stw	r2,-1632(fp)
   1d4e0:	e0be6517 	ldw	r2,-1644(fp)
   1d4e4:	e0bf1a15 	stw	r2,-920(fp)
   1d4e8:	e03f1b15 	stw	zero,-916(fp)
   1d4ec:	e1be7517 	ldw	r6,-1580(fp)
   1d4f0:	e1fe7617 	ldw	r7,-1576(fp)
   1d4f4:	e13f1a17 	ldw	r4,-920(fp)
   1d4f8:	e17f1b17 	ldw	r5,-916(fp)
   1d4fc:	00438e00 	call	438e0 <__muldi3>
   1d500:	1009883a 	mov	r4,r2
   1d504:	180b883a 	mov	r5,r3
   1d508:	200f883a 	mov	r7,r4
   1d50c:	2811883a 	mov	r8,r5
   1d510:	e13e6a17 	ldw	r4,-1624(fp)
   1d514:	e17e6b17 	ldw	r5,-1620(fp)
   1d518:	21c5883a 	add	r2,r4,r7
   1d51c:	110d803a 	cmpltu	r6,r2,r4
   1d520:	2a07883a 	add	r3,r5,r8
   1d524:	30c9883a 	add	r4,r6,r3
   1d528:	2007883a 	mov	r3,r4
   1d52c:	e0be6a15 	stw	r2,-1624(fp)
   1d530:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u3, 26);
   1d534:	e0be7617 	ldw	r2,-1576(fp)
   1d538:	100691ba 	slli	r3,r2,6
   1d53c:	e0be7517 	ldw	r2,-1580(fp)
   1d540:	1004d6ba 	srli	r2,r2,26
   1d544:	e0bf1c15 	stw	r2,-912(fp)
   1d548:	e1bf1c17 	ldw	r6,-912(fp)
   1d54c:	1986b03a 	or	r3,r3,r6
   1d550:	e0ff1c15 	stw	r3,-912(fp)
   1d554:	e0be7617 	ldw	r2,-1576(fp)
   1d558:	1004d6ba 	srli	r2,r2,26
   1d55c:	e0bf1d15 	stw	r2,-908(fp)
   1d560:	e1ff1c17 	ldw	r7,-912(fp)
   1d564:	e0ff1d17 	ldw	r3,-908(fp)
   1d568:	38c4b03a 	or	r2,r7,r3
   1d56c:	1004c03a 	cmpne	r2,r2,zero
   1d570:	10803fcc 	andi	r2,r2,255
   1d574:	10000d26 	beq	r2,zero,1d5ac <secp256k1_fe_sqr_inner+0x1bd0>
   1d578:	d0a01617 	ldw	r2,-32680(gp)
   1d57c:	10c00317 	ldw	r3,12(r2)
   1d580:	00800174 	movhi	r2,5
   1d584:	1093c604 	addi	r2,r2,20248
   1d588:	d8800015 	stw	r2,0(sp)
   1d58c:	01c0dbc4 	movi	r7,879
   1d590:	01800174 	movhi	r6,5
   1d594:	3191dd04 	addi	r6,r6,18292
   1d598:	01400174 	movhi	r5,5
   1d59c:	2951e804 	addi	r5,r5,18336
   1d5a0:	1809883a 	mov	r4,r3
   1d5a4:	00461000 	call	46100 <fprintf>
   1d5a8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 37);
   1d5ac:	e0be6817 	ldw	r2,-1632(fp)
   1d5b0:	1004d17a 	srli	r2,r2,5
   1d5b4:	e0bf1e15 	stw	r2,-904(fp)
   1d5b8:	e03f1f15 	stw	zero,-900(fp)
   1d5bc:	e13f1e17 	ldw	r4,-904(fp)
   1d5c0:	e1bf1f17 	ldw	r6,-900(fp)
   1d5c4:	2184b03a 	or	r2,r4,r6
   1d5c8:	1004c03a 	cmpne	r2,r2,zero
   1d5cc:	10803fcc 	andi	r2,r2,255
   1d5d0:	10000d26 	beq	r2,zero,1d608 <secp256k1_fe_sqr_inner+0x1c2c>
   1d5d4:	d0a01617 	ldw	r2,-32680(gp)
   1d5d8:	10c00317 	ldw	r3,12(r2)
   1d5dc:	00800174 	movhi	r2,5
   1d5e0:	10934d04 	addi	r2,r2,19764
   1d5e4:	d8800015 	stw	r2,0(sp)
   1d5e8:	01c0dc04 	movi	r7,880
   1d5ec:	01800174 	movhi	r6,5
   1d5f0:	3191dd04 	addi	r6,r6,18292
   1d5f4:	01400174 	movhi	r5,5
   1d5f8:	2951e804 	addi	r5,r5,18336
   1d5fc:	1809883a 	mov	r4,r3
   1d600:	00461000 	call	46100 <fprintf>
   1d604:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u3 0 0 0 t9 0 0 0 0 0 c-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    t3 = c & M; c >>= 26; c += u3 * R1;
   1d608:	e0fe6a17 	ldw	r3,-1624(fp)
   1d60c:	e0be6417 	ldw	r2,-1648(fp)
   1d610:	1884703a 	and	r2,r3,r2
   1d614:	e0be7715 	stw	r2,-1572(fp)
   1d618:	e0be6b17 	ldw	r2,-1620(fp)
   1d61c:	100691ba 	slli	r3,r2,6
   1d620:	e0be6a17 	ldw	r2,-1624(fp)
   1d624:	1004d6ba 	srli	r2,r2,26
   1d628:	10c4b03a 	or	r2,r2,r3
   1d62c:	e0be6a15 	stw	r2,-1624(fp)
   1d630:	e0be6b17 	ldw	r2,-1620(fp)
   1d634:	1004d6ba 	srli	r2,r2,26
   1d638:	e0be6b15 	stw	r2,-1620(fp)
   1d63c:	e0be6617 	ldw	r2,-1640(fp)
   1d640:	e0bf2015 	stw	r2,-896(fp)
   1d644:	e03f2115 	stw	zero,-892(fp)
   1d648:	e1be7517 	ldw	r6,-1580(fp)
   1d64c:	e1fe7617 	ldw	r7,-1576(fp)
   1d650:	e13f2017 	ldw	r4,-896(fp)
   1d654:	e17f2117 	ldw	r5,-892(fp)
   1d658:	00438e00 	call	438e0 <__muldi3>
   1d65c:	1009883a 	mov	r4,r2
   1d660:	180b883a 	mov	r5,r3
   1d664:	200f883a 	mov	r7,r4
   1d668:	2811883a 	mov	r8,r5
   1d66c:	e13e6a17 	ldw	r4,-1624(fp)
   1d670:	e17e6b17 	ldw	r5,-1620(fp)
   1d674:	21c5883a 	add	r2,r4,r7
   1d678:	110d803a 	cmpltu	r6,r2,r4
   1d67c:	2a07883a 	add	r3,r5,r8
   1d680:	30c9883a 	add	r4,r6,r3
   1d684:	2007883a 	mov	r3,r4
   1d688:	e0be6a15 	stw	r2,-1624(fp)
   1d68c:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t3, 26);
   1d690:	e0be7717 	ldw	r2,-1572(fp)
   1d694:	1004d6ba 	srli	r2,r2,26
   1d698:	1004c03a 	cmpne	r2,r2,zero
   1d69c:	10803fcc 	andi	r2,r2,255
   1d6a0:	10000d26 	beq	r2,zero,1d6d8 <secp256k1_fe_sqr_inner+0x1cfc>
   1d6a4:	d0a01617 	ldw	r2,-32680(gp)
   1d6a8:	10c00317 	ldw	r3,12(r2)
   1d6ac:	00800174 	movhi	r2,5
   1d6b0:	1093d104 	addi	r2,r2,20292
   1d6b4:	d8800015 	stw	r2,0(sp)
   1d6b8:	01c0dd04 	movi	r7,884
   1d6bc:	01800174 	movhi	r6,5
   1d6c0:	3191dd04 	addi	r6,r6,18292
   1d6c4:	01400174 	movhi	r5,5
   1d6c8:	2951e804 	addi	r5,r5,18336
   1d6cc:	1809883a 	mov	r4,r3
   1d6d0:	00461000 	call	46100 <fprintf>
   1d6d4:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   1d6d8:	e0be6b17 	ldw	r2,-1620(fp)
   1d6dc:	1004d1fa 	srli	r2,r2,7
   1d6e0:	e0bf2215 	stw	r2,-888(fp)
   1d6e4:	e03f2315 	stw	zero,-884(fp)
   1d6e8:	e1ff2217 	ldw	r7,-888(fp)
   1d6ec:	e0ff2317 	ldw	r3,-884(fp)
   1d6f0:	38c4b03a 	or	r2,r7,r3
   1d6f4:	1004c03a 	cmpne	r2,r2,zero
   1d6f8:	10803fcc 	andi	r2,r2,255
   1d6fc:	10000d26 	beq	r2,zero,1d734 <secp256k1_fe_sqr_inner+0x1d58>
   1d700:	d0a01617 	ldw	r2,-32680(gp)
   1d704:	10c00317 	ldw	r3,12(r2)
   1d708:	00800174 	movhi	r2,5
   1d70c:	1093dc04 	addi	r2,r2,20336
   1d710:	d8800015 	stw	r2,0(sp)
   1d714:	01c0dd44 	movi	r7,885
   1d718:	01800174 	movhi	r6,5
   1d71c:	3191dd04 	addi	r6,r6,18292
   1d720:	01400174 	movhi	r5,5
   1d724:	2951e804 	addi	r5,r5,18336
   1d728:	1809883a 	mov	r4,r3
   1d72c:	00461000 	call	46100 <fprintf>
   1d730:	0045fd40 	call	45fd4 <abort>
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[4]
   1d734:	e0be8717 	ldw	r2,-1508(fp)
   1d738:	10800017 	ldw	r2,0(r2)
   1d73c:	1085883a 	add	r2,r2,r2
   1d740:	e0bf2415 	stw	r2,-880(fp)
   1d744:	e03f2515 	stw	zero,-876(fp)
   1d748:	e0be8717 	ldw	r2,-1508(fp)
   1d74c:	10800404 	addi	r2,r2,16
   1d750:	10800017 	ldw	r2,0(r2)
   1d754:	e0bf2615 	stw	r2,-872(fp)
   1d758:	e03f2715 	stw	zero,-868(fp)
   1d75c:	e1bf2617 	ldw	r6,-872(fp)
   1d760:	e1ff2717 	ldw	r7,-868(fp)
   1d764:	e13f2417 	ldw	r4,-880(fp)
   1d768:	e17f2517 	ldw	r5,-876(fp)
   1d76c:	00438e00 	call	438e0 <__muldi3>
   1d770:	1009883a 	mov	r4,r2
   1d774:	180b883a 	mov	r5,r3
   1d778:	2021883a 	mov	r16,r4
   1d77c:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[3]
   1d780:	e0be8717 	ldw	r2,-1508(fp)
   1d784:	10800104 	addi	r2,r2,4
   1d788:	10800017 	ldw	r2,0(r2)
   1d78c:	1085883a 	add	r2,r2,r2
   1d790:	e0bf2815 	stw	r2,-864(fp)
   1d794:	e03f2915 	stw	zero,-860(fp)
   1d798:	e0be8717 	ldw	r2,-1508(fp)
   1d79c:	10800304 	addi	r2,r2,12
   1d7a0:	10800017 	ldw	r2,0(r2)
   1d7a4:	e0bf2a15 	stw	r2,-856(fp)
   1d7a8:	e03f2b15 	stw	zero,-852(fp)
   1d7ac:	e1bf2a17 	ldw	r6,-856(fp)
   1d7b0:	e1ff2b17 	ldw	r7,-852(fp)
   1d7b4:	e13f2817 	ldw	r4,-864(fp)
   1d7b8:	e17f2917 	ldw	r5,-860(fp)
   1d7bc:	00438e00 	call	438e0 <__muldi3>
   1d7c0:	100f883a 	mov	r7,r2
   1d7c4:	1811883a 	mov	r8,r3
   1d7c8:	380b883a 	mov	r5,r7
   1d7cc:	400d883a 	mov	r6,r8
   1d7d0:	8145883a 	add	r2,r16,r5
   1d7d4:	1409803a 	cmpltu	r4,r2,r16
   1d7d8:	8987883a 	add	r3,r17,r6
   1d7dc:	20c9883a 	add	r4,r4,r3
   1d7e0:	2007883a 	mov	r3,r4
   1d7e4:	1021883a 	mov	r16,r2
   1d7e8:	1823883a 	mov	r17,r3
       + (uint64_t)a[2] * a[2];
   1d7ec:	e0be8717 	ldw	r2,-1508(fp)
   1d7f0:	10800204 	addi	r2,r2,8
   1d7f4:	10800017 	ldw	r2,0(r2)
   1d7f8:	e0bf2c15 	stw	r2,-848(fp)
   1d7fc:	e03f2d15 	stw	zero,-844(fp)
   1d800:	e0be8717 	ldw	r2,-1508(fp)
   1d804:	10800204 	addi	r2,r2,8
   1d808:	10800017 	ldw	r2,0(r2)
   1d80c:	e0bf2e15 	stw	r2,-840(fp)
   1d810:	e03f2f15 	stw	zero,-836(fp)
   1d814:	e1bf2e17 	ldw	r6,-840(fp)
   1d818:	e1ff2f17 	ldw	r7,-836(fp)
   1d81c:	e13f2c17 	ldw	r4,-848(fp)
   1d820:	e17f2d17 	ldw	r5,-844(fp)
   1d824:	00438e00 	call	438e0 <__muldi3>
   1d828:	100f883a 	mov	r7,r2
   1d82c:	1811883a 	mov	r8,r3
   1d830:	380b883a 	mov	r5,r7
   1d834:	400d883a 	mov	r6,r8
   1d838:	8145883a 	add	r2,r16,r5
   1d83c:	1409803a 	cmpltu	r4,r2,r16
   1d840:	8987883a 	add	r3,r17,r6
   1d844:	20c9883a 	add	r4,r4,r3
   1d848:	2007883a 	mov	r3,r4
   1d84c:	100f883a 	mov	r7,r2
   1d850:	1811883a 	mov	r8,r3
    VERIFY_BITS(t3, 26);
    VERIFY_BITS(c, 39);
    /* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[4]
   1d854:	e13e6a17 	ldw	r4,-1624(fp)
   1d858:	e17e6b17 	ldw	r5,-1620(fp)
   1d85c:	21c5883a 	add	r2,r4,r7
   1d860:	110d803a 	cmpltu	r6,r2,r4
   1d864:	2a07883a 	add	r3,r5,r8
   1d868:	30c9883a 	add	r4,r6,r3
   1d86c:	2007883a 	mov	r3,r4
   1d870:	e0be6a15 	stw	r2,-1624(fp)
   1d874:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[3]
       + (uint64_t)a[2] * a[2];
    VERIFY_BITS(c, 63);
   1d878:	e0be6a17 	ldw	r2,-1624(fp)
   1d87c:	e0fe6b17 	ldw	r3,-1620(fp)
   1d880:	1804d7fa 	srli	r2,r3,31
   1d884:	10803fcc 	andi	r2,r2,255
   1d888:	10000d26 	beq	r2,zero,1d8c0 <secp256k1_fe_sqr_inner+0x1ee4>
   1d88c:	d0a01617 	ldw	r2,-32680(gp)
   1d890:	10c00317 	ldw	r3,12(r2)
   1d894:	00800174 	movhi	r2,5
   1d898:	10938f04 	addi	r2,r2,20028
   1d89c:	d8800015 	stw	r2,0(sp)
   1d8a0:	01c0df04 	movi	r7,892
   1d8a4:	01800174 	movhi	r6,5
   1d8a8:	3191dd04 	addi	r6,r6,18292
   1d8ac:	01400174 	movhi	r5,5
   1d8b0:	2951e804 	addi	r5,r5,18336
   1d8b4:	1809883a 	mov	r4,r3
   1d8b8:	00461000 	call	46100 <fprintf>
   1d8bc:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[5]*2) * a[9]
   1d8c0:	e0be8717 	ldw	r2,-1508(fp)
   1d8c4:	10800504 	addi	r2,r2,20
   1d8c8:	10800017 	ldw	r2,0(r2)
   1d8cc:	1085883a 	add	r2,r2,r2
   1d8d0:	e0bf3015 	stw	r2,-832(fp)
   1d8d4:	e03f3115 	stw	zero,-828(fp)
   1d8d8:	e0be8717 	ldw	r2,-1508(fp)
   1d8dc:	10800904 	addi	r2,r2,36
   1d8e0:	10800017 	ldw	r2,0(r2)
   1d8e4:	e0bf3215 	stw	r2,-824(fp)
   1d8e8:	e03f3315 	stw	zero,-820(fp)
   1d8ec:	e1bf3217 	ldw	r6,-824(fp)
   1d8f0:	e1ff3317 	ldw	r7,-820(fp)
   1d8f4:	e13f3017 	ldw	r4,-832(fp)
   1d8f8:	e17f3117 	ldw	r5,-828(fp)
   1d8fc:	00438e00 	call	438e0 <__muldi3>
   1d900:	1009883a 	mov	r4,r2
   1d904:	180b883a 	mov	r5,r3
   1d908:	2021883a 	mov	r16,r4
   1d90c:	2823883a 	mov	r17,r5
       + (uint64_t)(a[6]*2) * a[8]
   1d910:	e0be8717 	ldw	r2,-1508(fp)
   1d914:	10800604 	addi	r2,r2,24
   1d918:	10800017 	ldw	r2,0(r2)
   1d91c:	1085883a 	add	r2,r2,r2
   1d920:	e0bf3415 	stw	r2,-816(fp)
   1d924:	e03f3515 	stw	zero,-812(fp)
   1d928:	e0be8717 	ldw	r2,-1508(fp)
   1d92c:	10800804 	addi	r2,r2,32
   1d930:	10800017 	ldw	r2,0(r2)
   1d934:	e0bf3615 	stw	r2,-808(fp)
   1d938:	e03f3715 	stw	zero,-804(fp)
   1d93c:	e1bf3617 	ldw	r6,-808(fp)
   1d940:	e1ff3717 	ldw	r7,-804(fp)
   1d944:	e13f3417 	ldw	r4,-816(fp)
   1d948:	e17f3517 	ldw	r5,-812(fp)
   1d94c:	00438e00 	call	438e0 <__muldi3>
   1d950:	100f883a 	mov	r7,r2
   1d954:	1811883a 	mov	r8,r3
   1d958:	380b883a 	mov	r5,r7
   1d95c:	400d883a 	mov	r6,r8
   1d960:	8145883a 	add	r2,r16,r5
   1d964:	1409803a 	cmpltu	r4,r2,r16
   1d968:	8987883a 	add	r3,r17,r6
   1d96c:	20c9883a 	add	r4,r4,r3
   1d970:	2007883a 	mov	r3,r4
   1d974:	1021883a 	mov	r16,r2
   1d978:	1823883a 	mov	r17,r3
       + (uint64_t)a[7] * a[7];
   1d97c:	e0be8717 	ldw	r2,-1508(fp)
   1d980:	10800704 	addi	r2,r2,28
   1d984:	10800017 	ldw	r2,0(r2)
   1d988:	e0bf3815 	stw	r2,-800(fp)
   1d98c:	e03f3915 	stw	zero,-796(fp)
   1d990:	e0be8717 	ldw	r2,-1508(fp)
   1d994:	10800704 	addi	r2,r2,28
   1d998:	10800017 	ldw	r2,0(r2)
   1d99c:	e0bf3a15 	stw	r2,-792(fp)
   1d9a0:	e03f3b15 	stw	zero,-788(fp)
   1d9a4:	e1bf3a17 	ldw	r6,-792(fp)
   1d9a8:	e1ff3b17 	ldw	r7,-788(fp)
   1d9ac:	e13f3817 	ldw	r4,-800(fp)
   1d9b0:	e17f3917 	ldw	r5,-796(fp)
   1d9b4:	00438e00 	call	438e0 <__muldi3>
   1d9b8:	100f883a 	mov	r7,r2
   1d9bc:	1811883a 	mov	r8,r3
   1d9c0:	380b883a 	mov	r5,r7
   1d9c4:	400d883a 	mov	r6,r8
   1d9c8:	8145883a 	add	r2,r16,r5
   1d9cc:	1409803a 	cmpltu	r4,r2,r16
   1d9d0:	8987883a 	add	r3,r17,r6
   1d9d4:	20c9883a 	add	r4,r4,r3
   1d9d8:	2007883a 	mov	r3,r4
   1d9dc:	100f883a 	mov	r7,r2
   1d9e0:	1811883a 	mov	r8,r3
    c += (uint64_t)(a[0]*2) * a[4]
       + (uint64_t)(a[1]*2) * a[3]
       + (uint64_t)a[2] * a[2];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[5]*2) * a[9]
   1d9e4:	e13e6717 	ldw	r4,-1636(fp)
   1d9e8:	e17e6817 	ldw	r5,-1632(fp)
   1d9ec:	21c5883a 	add	r2,r4,r7
   1d9f0:	110d803a 	cmpltu	r6,r2,r4
   1d9f4:	2a07883a 	add	r3,r5,r8
   1d9f8:	30c9883a 	add	r4,r6,r3
   1d9fc:	2007883a 	mov	r3,r4
   1da00:	e0be6715 	stw	r2,-1636(fp)
   1da04:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[6]*2) * a[8]
       + (uint64_t)a[7] * a[7];
    VERIFY_BITS(d, 62);
   1da08:	e0be6817 	ldw	r2,-1632(fp)
   1da0c:	1004d7ba 	srli	r2,r2,30
   1da10:	e0bf3c15 	stw	r2,-784(fp)
   1da14:	e03f3d15 	stw	zero,-780(fp)
   1da18:	e13f3c17 	ldw	r4,-784(fp)
   1da1c:	e1bf3d17 	ldw	r6,-780(fp)
   1da20:	2184b03a 	or	r2,r4,r6
   1da24:	1004c03a 	cmpne	r2,r2,zero
   1da28:	10803fcc 	andi	r2,r2,255
   1da2c:	10000d26 	beq	r2,zero,1da64 <secp256k1_fe_sqr_inner+0x2088>
   1da30:	d0a01617 	ldw	r2,-32680(gp)
   1da34:	10c00317 	ldw	r3,12(r2)
   1da38:	00800174 	movhi	r2,5
   1da3c:	1093e704 	addi	r2,r2,20380
   1da40:	d8800015 	stw	r2,0(sp)
   1da44:	01c0e044 	movi	r7,897
   1da48:	01800174 	movhi	r6,5
   1da4c:	3191dd04 	addi	r6,r6,18292
   1da50:	01400174 	movhi	r5,5
   1da54:	2951e804 	addi	r5,r5,18336
   1da58:	1809883a 	mov	r4,r3
   1da5c:	00461000 	call	46100 <fprintf>
   1da60:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    u4 = d & M; d >>= 26; c += u4 * R0;
   1da64:	e0be6417 	ldw	r2,-1648(fp)
   1da68:	e0bf3e15 	stw	r2,-776(fp)
   1da6c:	e03f3f15 	stw	zero,-772(fp)
   1da70:	e0be6717 	ldw	r2,-1636(fp)
   1da74:	e1ff3e17 	ldw	r7,-776(fp)
   1da78:	11c4703a 	and	r2,r2,r7
   1da7c:	e0be7815 	stw	r2,-1568(fp)
   1da80:	e0be6817 	ldw	r2,-1632(fp)
   1da84:	e0ff3f17 	ldw	r3,-772(fp)
   1da88:	10c4703a 	and	r2,r2,r3
   1da8c:	e0be7915 	stw	r2,-1564(fp)
   1da90:	e0be6817 	ldw	r2,-1632(fp)
   1da94:	100691ba 	slli	r3,r2,6
   1da98:	e0be6717 	ldw	r2,-1636(fp)
   1da9c:	1004d6ba 	srli	r2,r2,26
   1daa0:	10c4b03a 	or	r2,r2,r3
   1daa4:	e0be6715 	stw	r2,-1636(fp)
   1daa8:	e0be6817 	ldw	r2,-1632(fp)
   1daac:	1004d6ba 	srli	r2,r2,26
   1dab0:	e0be6815 	stw	r2,-1632(fp)
   1dab4:	e0be6517 	ldw	r2,-1644(fp)
   1dab8:	e0bf4015 	stw	r2,-768(fp)
   1dabc:	e03f4115 	stw	zero,-764(fp)
   1dac0:	e1be7817 	ldw	r6,-1568(fp)
   1dac4:	e1fe7917 	ldw	r7,-1564(fp)
   1dac8:	e13f4017 	ldw	r4,-768(fp)
   1dacc:	e17f4117 	ldw	r5,-764(fp)
   1dad0:	00438e00 	call	438e0 <__muldi3>
   1dad4:	1009883a 	mov	r4,r2
   1dad8:	180b883a 	mov	r5,r3
   1dadc:	200f883a 	mov	r7,r4
   1dae0:	2811883a 	mov	r8,r5
   1dae4:	e13e6a17 	ldw	r4,-1624(fp)
   1dae8:	e17e6b17 	ldw	r5,-1620(fp)
   1daec:	21c5883a 	add	r2,r4,r7
   1daf0:	110d803a 	cmpltu	r6,r2,r4
   1daf4:	2a07883a 	add	r3,r5,r8
   1daf8:	30c9883a 	add	r4,r6,r3
   1dafc:	2007883a 	mov	r3,r4
   1db00:	e0be6a15 	stw	r2,-1624(fp)
   1db04:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u4, 26);
   1db08:	e0be7917 	ldw	r2,-1564(fp)
   1db0c:	100691ba 	slli	r3,r2,6
   1db10:	e0be7817 	ldw	r2,-1568(fp)
   1db14:	1004d6ba 	srli	r2,r2,26
   1db18:	e0bf4215 	stw	r2,-760(fp)
   1db1c:	e13f4217 	ldw	r4,-760(fp)
   1db20:	1906b03a 	or	r3,r3,r4
   1db24:	e0ff4215 	stw	r3,-760(fp)
   1db28:	e0be7917 	ldw	r2,-1564(fp)
   1db2c:	1004d6ba 	srli	r2,r2,26
   1db30:	e0bf4315 	stw	r2,-756(fp)
   1db34:	e1bf4217 	ldw	r6,-760(fp)
   1db38:	e1ff4317 	ldw	r7,-756(fp)
   1db3c:	31c4b03a 	or	r2,r6,r7
   1db40:	1004c03a 	cmpne	r2,r2,zero
   1db44:	10803fcc 	andi	r2,r2,255
   1db48:	10000d26 	beq	r2,zero,1db80 <secp256k1_fe_sqr_inner+0x21a4>
   1db4c:	d0a01617 	ldw	r2,-32680(gp)
   1db50:	10c00317 	ldw	r3,12(r2)
   1db54:	00800174 	movhi	r2,5
   1db58:	1093f204 	addi	r2,r2,20424
   1db5c:	d8800015 	stw	r2,0(sp)
   1db60:	01c0e104 	movi	r7,900
   1db64:	01800174 	movhi	r6,5
   1db68:	3191dd04 	addi	r6,r6,18292
   1db6c:	01400174 	movhi	r5,5
   1db70:	2951e804 	addi	r5,r5,18336
   1db74:	1809883a 	mov	r4,r3
   1db78:	00461000 	call	46100 <fprintf>
   1db7c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 36);
   1db80:	e0be6817 	ldw	r2,-1632(fp)
   1db84:	1004d13a 	srli	r2,r2,4
   1db88:	e0bf4415 	stw	r2,-752(fp)
   1db8c:	e03f4515 	stw	zero,-748(fp)
   1db90:	e0ff4417 	ldw	r3,-752(fp)
   1db94:	e13f4517 	ldw	r4,-748(fp)
   1db98:	1904b03a 	or	r2,r3,r4
   1db9c:	1004c03a 	cmpne	r2,r2,zero
   1dba0:	10803fcc 	andi	r2,r2,255
   1dba4:	10000d26 	beq	r2,zero,1dbdc <secp256k1_fe_sqr_inner+0x2200>
   1dba8:	d0a01617 	ldw	r2,-32680(gp)
   1dbac:	10c00317 	ldw	r3,12(r2)
   1dbb0:	00800174 	movhi	r2,5
   1dbb4:	1093fd04 	addi	r2,r2,20468
   1dbb8:	d8800015 	stw	r2,0(sp)
   1dbbc:	01c0e144 	movi	r7,901
   1dbc0:	01800174 	movhi	r6,5
   1dbc4:	3191dd04 	addi	r6,r6,18292
   1dbc8:	01400174 	movhi	r5,5
   1dbcc:	2951e804 	addi	r5,r5,18336
   1dbd0:	1809883a 	mov	r4,r3
   1dbd4:	00461000 	call	46100 <fprintf>
   1dbd8:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u4 0 0 0 0 t9 0 0 0 0 c-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    t4 = c & M; c >>= 26; c += u4 * R1;
   1dbdc:	e0fe6a17 	ldw	r3,-1624(fp)
   1dbe0:	e0be6417 	ldw	r2,-1648(fp)
   1dbe4:	1884703a 	and	r2,r3,r2
   1dbe8:	e0be7a15 	stw	r2,-1560(fp)
   1dbec:	e0be6b17 	ldw	r2,-1620(fp)
   1dbf0:	100691ba 	slli	r3,r2,6
   1dbf4:	e0be6a17 	ldw	r2,-1624(fp)
   1dbf8:	1004d6ba 	srli	r2,r2,26
   1dbfc:	10c4b03a 	or	r2,r2,r3
   1dc00:	e0be6a15 	stw	r2,-1624(fp)
   1dc04:	e0be6b17 	ldw	r2,-1620(fp)
   1dc08:	1004d6ba 	srli	r2,r2,26
   1dc0c:	e0be6b15 	stw	r2,-1620(fp)
   1dc10:	e0be6617 	ldw	r2,-1640(fp)
   1dc14:	e0bf4615 	stw	r2,-744(fp)
   1dc18:	e03f4715 	stw	zero,-740(fp)
   1dc1c:	e1be7817 	ldw	r6,-1568(fp)
   1dc20:	e1fe7917 	ldw	r7,-1564(fp)
   1dc24:	e13f4617 	ldw	r4,-744(fp)
   1dc28:	e17f4717 	ldw	r5,-740(fp)
   1dc2c:	00438e00 	call	438e0 <__muldi3>
   1dc30:	1009883a 	mov	r4,r2
   1dc34:	180b883a 	mov	r5,r3
   1dc38:	200f883a 	mov	r7,r4
   1dc3c:	2811883a 	mov	r8,r5
   1dc40:	e13e6a17 	ldw	r4,-1624(fp)
   1dc44:	e17e6b17 	ldw	r5,-1620(fp)
   1dc48:	21c5883a 	add	r2,r4,r7
   1dc4c:	110d803a 	cmpltu	r6,r2,r4
   1dc50:	2a07883a 	add	r3,r5,r8
   1dc54:	30c9883a 	add	r4,r6,r3
   1dc58:	2007883a 	mov	r3,r4
   1dc5c:	e0be6a15 	stw	r2,-1624(fp)
   1dc60:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t4, 26);
   1dc64:	e0be7a17 	ldw	r2,-1560(fp)
   1dc68:	1004d6ba 	srli	r2,r2,26
   1dc6c:	1004c03a 	cmpne	r2,r2,zero
   1dc70:	10803fcc 	andi	r2,r2,255
   1dc74:	10000d26 	beq	r2,zero,1dcac <secp256k1_fe_sqr_inner+0x22d0>
   1dc78:	d0a01617 	ldw	r2,-32680(gp)
   1dc7c:	10c00317 	ldw	r3,12(r2)
   1dc80:	00800174 	movhi	r2,5
   1dc84:	10940804 	addi	r2,r2,20512
   1dc88:	d8800015 	stw	r2,0(sp)
   1dc8c:	01c0e244 	movi	r7,905
   1dc90:	01800174 	movhi	r6,5
   1dc94:	3191dd04 	addi	r6,r6,18292
   1dc98:	01400174 	movhi	r5,5
   1dc9c:	2951e804 	addi	r5,r5,18336
   1dca0:	1809883a 	mov	r4,r3
   1dca4:	00461000 	call	46100 <fprintf>
   1dca8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   1dcac:	e0be6b17 	ldw	r2,-1620(fp)
   1dcb0:	1004d1fa 	srli	r2,r2,7
   1dcb4:	e0bf4815 	stw	r2,-736(fp)
   1dcb8:	e03f4915 	stw	zero,-732(fp)
   1dcbc:	e1bf4817 	ldw	r6,-736(fp)
   1dcc0:	e1ff4917 	ldw	r7,-732(fp)
   1dcc4:	31c4b03a 	or	r2,r6,r7
   1dcc8:	1004c03a 	cmpne	r2,r2,zero
   1dccc:	10803fcc 	andi	r2,r2,255
   1dcd0:	10000d26 	beq	r2,zero,1dd08 <secp256k1_fe_sqr_inner+0x232c>
   1dcd4:	d0a01617 	ldw	r2,-32680(gp)
   1dcd8:	10c00317 	ldw	r3,12(r2)
   1dcdc:	00800174 	movhi	r2,5
   1dce0:	1093dc04 	addi	r2,r2,20336
   1dce4:	d8800015 	stw	r2,0(sp)
   1dce8:	01c0e284 	movi	r7,906
   1dcec:	01800174 	movhi	r6,5
   1dcf0:	3191dd04 	addi	r6,r6,18292
   1dcf4:	01400174 	movhi	r5,5
   1dcf8:	2951e804 	addi	r5,r5,18336
   1dcfc:	1809883a 	mov	r4,r3
   1dd00:	00461000 	call	46100 <fprintf>
   1dd04:	0045fd40 	call	45fd4 <abort>
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[5]
   1dd08:	e0be8717 	ldw	r2,-1508(fp)
   1dd0c:	10800017 	ldw	r2,0(r2)
   1dd10:	1085883a 	add	r2,r2,r2
   1dd14:	e0bf4a15 	stw	r2,-728(fp)
   1dd18:	e03f4b15 	stw	zero,-724(fp)
   1dd1c:	e0be8717 	ldw	r2,-1508(fp)
   1dd20:	10800504 	addi	r2,r2,20
   1dd24:	10800017 	ldw	r2,0(r2)
   1dd28:	e0bf4c15 	stw	r2,-720(fp)
   1dd2c:	e03f4d15 	stw	zero,-716(fp)
   1dd30:	e1bf4c17 	ldw	r6,-720(fp)
   1dd34:	e1ff4d17 	ldw	r7,-716(fp)
   1dd38:	e13f4a17 	ldw	r4,-728(fp)
   1dd3c:	e17f4b17 	ldw	r5,-724(fp)
   1dd40:	00438e00 	call	438e0 <__muldi3>
   1dd44:	1009883a 	mov	r4,r2
   1dd48:	180b883a 	mov	r5,r3
   1dd4c:	2021883a 	mov	r16,r4
   1dd50:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[4]
   1dd54:	e0be8717 	ldw	r2,-1508(fp)
   1dd58:	10800104 	addi	r2,r2,4
   1dd5c:	10800017 	ldw	r2,0(r2)
   1dd60:	1085883a 	add	r2,r2,r2
   1dd64:	e0bf4e15 	stw	r2,-712(fp)
   1dd68:	e03f4f15 	stw	zero,-708(fp)
   1dd6c:	e0be8717 	ldw	r2,-1508(fp)
   1dd70:	10800404 	addi	r2,r2,16
   1dd74:	10800017 	ldw	r2,0(r2)
   1dd78:	e0bf5015 	stw	r2,-704(fp)
   1dd7c:	e03f5115 	stw	zero,-700(fp)
   1dd80:	e1bf5017 	ldw	r6,-704(fp)
   1dd84:	e1ff5117 	ldw	r7,-700(fp)
   1dd88:	e13f4e17 	ldw	r4,-712(fp)
   1dd8c:	e17f4f17 	ldw	r5,-708(fp)
   1dd90:	00438e00 	call	438e0 <__muldi3>
   1dd94:	100f883a 	mov	r7,r2
   1dd98:	1811883a 	mov	r8,r3
   1dd9c:	380b883a 	mov	r5,r7
   1dda0:	400d883a 	mov	r6,r8
   1dda4:	8145883a 	add	r2,r16,r5
   1dda8:	1409803a 	cmpltu	r4,r2,r16
   1ddac:	8987883a 	add	r3,r17,r6
   1ddb0:	20c9883a 	add	r4,r4,r3
   1ddb4:	2007883a 	mov	r3,r4
   1ddb8:	1021883a 	mov	r16,r2
   1ddbc:	1823883a 	mov	r17,r3
       + (uint64_t)(a[2]*2) * a[3];
   1ddc0:	e0be8717 	ldw	r2,-1508(fp)
   1ddc4:	10800204 	addi	r2,r2,8
   1ddc8:	10800017 	ldw	r2,0(r2)
   1ddcc:	1085883a 	add	r2,r2,r2
   1ddd0:	e0bf5215 	stw	r2,-696(fp)
   1ddd4:	e03f5315 	stw	zero,-692(fp)
   1ddd8:	e0be8717 	ldw	r2,-1508(fp)
   1dddc:	10800304 	addi	r2,r2,12
   1dde0:	10800017 	ldw	r2,0(r2)
   1dde4:	e0bf5415 	stw	r2,-688(fp)
   1dde8:	e03f5515 	stw	zero,-684(fp)
   1ddec:	e1bf5417 	ldw	r6,-688(fp)
   1ddf0:	e1ff5517 	ldw	r7,-684(fp)
   1ddf4:	e13f5217 	ldw	r4,-696(fp)
   1ddf8:	e17f5317 	ldw	r5,-692(fp)
   1ddfc:	00438e00 	call	438e0 <__muldi3>
   1de00:	100f883a 	mov	r7,r2
   1de04:	1811883a 	mov	r8,r3
   1de08:	380b883a 	mov	r5,r7
   1de0c:	400d883a 	mov	r6,r8
   1de10:	8145883a 	add	r2,r16,r5
   1de14:	1409803a 	cmpltu	r4,r2,r16
   1de18:	8987883a 	add	r3,r17,r6
   1de1c:	20c9883a 	add	r4,r4,r3
   1de20:	2007883a 	mov	r3,r4
   1de24:	100f883a 	mov	r7,r2
   1de28:	1811883a 	mov	r8,r3
    VERIFY_BITS(t4, 26);
    VERIFY_BITS(c, 39);
    /* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[5]
   1de2c:	e13e6a17 	ldw	r4,-1624(fp)
   1de30:	e17e6b17 	ldw	r5,-1620(fp)
   1de34:	21c5883a 	add	r2,r4,r7
   1de38:	110d803a 	cmpltu	r6,r2,r4
   1de3c:	2a07883a 	add	r3,r5,r8
   1de40:	30c9883a 	add	r4,r6,r3
   1de44:	2007883a 	mov	r3,r4
   1de48:	e0be6a15 	stw	r2,-1624(fp)
   1de4c:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[4]
       + (uint64_t)(a[2]*2) * a[3];
    VERIFY_BITS(c, 63);
   1de50:	e0be6a17 	ldw	r2,-1624(fp)
   1de54:	e0fe6b17 	ldw	r3,-1620(fp)
   1de58:	1804d7fa 	srli	r2,r3,31
   1de5c:	10803fcc 	andi	r2,r2,255
   1de60:	10000d26 	beq	r2,zero,1de98 <secp256k1_fe_sqr_inner+0x24bc>
   1de64:	d0a01617 	ldw	r2,-32680(gp)
   1de68:	10c00317 	ldw	r3,12(r2)
   1de6c:	00800174 	movhi	r2,5
   1de70:	10938f04 	addi	r2,r2,20028
   1de74:	d8800015 	stw	r2,0(sp)
   1de78:	01c0e444 	movi	r7,913
   1de7c:	01800174 	movhi	r6,5
   1de80:	3191dd04 	addi	r6,r6,18292
   1de84:	01400174 	movhi	r5,5
   1de88:	2951e804 	addi	r5,r5,18336
   1de8c:	1809883a 	mov	r4,r3
   1de90:	00461000 	call	46100 <fprintf>
   1de94:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[6]*2) * a[9]
   1de98:	e0be8717 	ldw	r2,-1508(fp)
   1de9c:	10800604 	addi	r2,r2,24
   1dea0:	10800017 	ldw	r2,0(r2)
   1dea4:	1085883a 	add	r2,r2,r2
   1dea8:	e0bf5615 	stw	r2,-680(fp)
   1deac:	e03f5715 	stw	zero,-676(fp)
   1deb0:	e0be8717 	ldw	r2,-1508(fp)
   1deb4:	10800904 	addi	r2,r2,36
   1deb8:	10800017 	ldw	r2,0(r2)
   1debc:	e0bf5815 	stw	r2,-672(fp)
   1dec0:	e03f5915 	stw	zero,-668(fp)
   1dec4:	e1bf5817 	ldw	r6,-672(fp)
   1dec8:	e1ff5917 	ldw	r7,-668(fp)
   1decc:	e13f5617 	ldw	r4,-680(fp)
   1ded0:	e17f5717 	ldw	r5,-676(fp)
   1ded4:	00438e00 	call	438e0 <__muldi3>
   1ded8:	1009883a 	mov	r4,r2
   1dedc:	180b883a 	mov	r5,r3
   1dee0:	2021883a 	mov	r16,r4
   1dee4:	2823883a 	mov	r17,r5
       + (uint64_t)(a[7]*2) * a[8];
   1dee8:	e0be8717 	ldw	r2,-1508(fp)
   1deec:	10800704 	addi	r2,r2,28
   1def0:	10800017 	ldw	r2,0(r2)
   1def4:	1085883a 	add	r2,r2,r2
   1def8:	e0bf5a15 	stw	r2,-664(fp)
   1defc:	e03f5b15 	stw	zero,-660(fp)
   1df00:	e0be8717 	ldw	r2,-1508(fp)
   1df04:	10800804 	addi	r2,r2,32
   1df08:	10800017 	ldw	r2,0(r2)
   1df0c:	e0bf5c15 	stw	r2,-656(fp)
   1df10:	e03f5d15 	stw	zero,-652(fp)
   1df14:	e1bf5c17 	ldw	r6,-656(fp)
   1df18:	e1ff5d17 	ldw	r7,-652(fp)
   1df1c:	e13f5a17 	ldw	r4,-664(fp)
   1df20:	e17f5b17 	ldw	r5,-660(fp)
   1df24:	00438e00 	call	438e0 <__muldi3>
   1df28:	100f883a 	mov	r7,r2
   1df2c:	1811883a 	mov	r8,r3
   1df30:	380b883a 	mov	r5,r7
   1df34:	400d883a 	mov	r6,r8
   1df38:	8145883a 	add	r2,r16,r5
   1df3c:	1409803a 	cmpltu	r4,r2,r16
   1df40:	8987883a 	add	r3,r17,r6
   1df44:	20c9883a 	add	r4,r4,r3
   1df48:	2007883a 	mov	r3,r4
   1df4c:	100f883a 	mov	r7,r2
   1df50:	1811883a 	mov	r8,r3
    c += (uint64_t)(a[0]*2) * a[5]
       + (uint64_t)(a[1]*2) * a[4]
       + (uint64_t)(a[2]*2) * a[3];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[6]*2) * a[9]
   1df54:	e13e6717 	ldw	r4,-1636(fp)
   1df58:	e17e6817 	ldw	r5,-1632(fp)
   1df5c:	21c5883a 	add	r2,r4,r7
   1df60:	110d803a 	cmpltu	r6,r2,r4
   1df64:	2a07883a 	add	r3,r5,r8
   1df68:	30c9883a 	add	r4,r6,r3
   1df6c:	2007883a 	mov	r3,r4
   1df70:	e0be6715 	stw	r2,-1636(fp)
   1df74:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)(a[7]*2) * a[8];
    VERIFY_BITS(d, 62);
   1df78:	e0be6817 	ldw	r2,-1632(fp)
   1df7c:	1004d7ba 	srli	r2,r2,30
   1df80:	e0bf5e15 	stw	r2,-648(fp)
   1df84:	e03f5f15 	stw	zero,-644(fp)
   1df88:	e0ff5e17 	ldw	r3,-648(fp)
   1df8c:	e13f5f17 	ldw	r4,-644(fp)
   1df90:	1904b03a 	or	r2,r3,r4
   1df94:	1004c03a 	cmpne	r2,r2,zero
   1df98:	10803fcc 	andi	r2,r2,255
   1df9c:	10000d26 	beq	r2,zero,1dfd4 <secp256k1_fe_sqr_inner+0x25f8>
   1dfa0:	d0a01617 	ldw	r2,-32680(gp)
   1dfa4:	10c00317 	ldw	r3,12(r2)
   1dfa8:	00800174 	movhi	r2,5
   1dfac:	1093e704 	addi	r2,r2,20380
   1dfb0:	d8800015 	stw	r2,0(sp)
   1dfb4:	01c0e544 	movi	r7,917
   1dfb8:	01800174 	movhi	r6,5
   1dfbc:	3191dd04 	addi	r6,r6,18292
   1dfc0:	01400174 	movhi	r5,5
   1dfc4:	2951e804 	addi	r5,r5,18336
   1dfc8:	1809883a 	mov	r4,r3
   1dfcc:	00461000 	call	46100 <fprintf>
   1dfd0:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    u5 = d & M; d >>= 26; c += u5 * R0;
   1dfd4:	e0be6417 	ldw	r2,-1648(fp)
   1dfd8:	e0bf6015 	stw	r2,-640(fp)
   1dfdc:	e03f6115 	stw	zero,-636(fp)
   1dfe0:	e0be6717 	ldw	r2,-1636(fp)
   1dfe4:	e1bf6017 	ldw	r6,-640(fp)
   1dfe8:	1184703a 	and	r2,r2,r6
   1dfec:	e0be7b15 	stw	r2,-1556(fp)
   1dff0:	e0be6817 	ldw	r2,-1632(fp)
   1dff4:	e1ff6117 	ldw	r7,-636(fp)
   1dff8:	11c4703a 	and	r2,r2,r7
   1dffc:	e0be7c15 	stw	r2,-1552(fp)
   1e000:	e0be6817 	ldw	r2,-1632(fp)
   1e004:	100691ba 	slli	r3,r2,6
   1e008:	e0be6717 	ldw	r2,-1636(fp)
   1e00c:	1004d6ba 	srli	r2,r2,26
   1e010:	10c4b03a 	or	r2,r2,r3
   1e014:	e0be6715 	stw	r2,-1636(fp)
   1e018:	e0be6817 	ldw	r2,-1632(fp)
   1e01c:	1004d6ba 	srli	r2,r2,26
   1e020:	e0be6815 	stw	r2,-1632(fp)
   1e024:	e0be6517 	ldw	r2,-1644(fp)
   1e028:	e0bf6215 	stw	r2,-632(fp)
   1e02c:	e03f6315 	stw	zero,-628(fp)
   1e030:	e1be7b17 	ldw	r6,-1556(fp)
   1e034:	e1fe7c17 	ldw	r7,-1552(fp)
   1e038:	e13f6217 	ldw	r4,-632(fp)
   1e03c:	e17f6317 	ldw	r5,-628(fp)
   1e040:	00438e00 	call	438e0 <__muldi3>
   1e044:	1009883a 	mov	r4,r2
   1e048:	180b883a 	mov	r5,r3
   1e04c:	200f883a 	mov	r7,r4
   1e050:	2811883a 	mov	r8,r5
   1e054:	e13e6a17 	ldw	r4,-1624(fp)
   1e058:	e17e6b17 	ldw	r5,-1620(fp)
   1e05c:	21c5883a 	add	r2,r4,r7
   1e060:	110d803a 	cmpltu	r6,r2,r4
   1e064:	2a07883a 	add	r3,r5,r8
   1e068:	30c9883a 	add	r4,r6,r3
   1e06c:	2007883a 	mov	r3,r4
   1e070:	e0be6a15 	stw	r2,-1624(fp)
   1e074:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u5, 26);
   1e078:	e0be7c17 	ldw	r2,-1552(fp)
   1e07c:	100691ba 	slli	r3,r2,6
   1e080:	e0be7b17 	ldw	r2,-1556(fp)
   1e084:	1004d6ba 	srli	r2,r2,26
   1e088:	e0bf6415 	stw	r2,-624(fp)
   1e08c:	e0bf6417 	ldw	r2,-624(fp)
   1e090:	1886b03a 	or	r3,r3,r2
   1e094:	e0ff6415 	stw	r3,-624(fp)
   1e098:	e0be7c17 	ldw	r2,-1552(fp)
   1e09c:	1004d6ba 	srli	r2,r2,26
   1e0a0:	e0bf6515 	stw	r2,-620(fp)
   1e0a4:	e0ff6417 	ldw	r3,-624(fp)
   1e0a8:	e13f6517 	ldw	r4,-620(fp)
   1e0ac:	1904b03a 	or	r2,r3,r4
   1e0b0:	1004c03a 	cmpne	r2,r2,zero
   1e0b4:	10803fcc 	andi	r2,r2,255
   1e0b8:	10000d26 	beq	r2,zero,1e0f0 <secp256k1_fe_sqr_inner+0x2714>
   1e0bc:	d0a01617 	ldw	r2,-32680(gp)
   1e0c0:	10c00317 	ldw	r3,12(r2)
   1e0c4:	00800174 	movhi	r2,5
   1e0c8:	10941304 	addi	r2,r2,20556
   1e0cc:	d8800015 	stw	r2,0(sp)
   1e0d0:	01c0e604 	movi	r7,920
   1e0d4:	01800174 	movhi	r6,5
   1e0d8:	3191dd04 	addi	r6,r6,18292
   1e0dc:	01400174 	movhi	r5,5
   1e0e0:	2951e804 	addi	r5,r5,18336
   1e0e4:	1809883a 	mov	r4,r3
   1e0e8:	00461000 	call	46100 <fprintf>
   1e0ec:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 36);
   1e0f0:	e0be6817 	ldw	r2,-1632(fp)
   1e0f4:	1004d13a 	srli	r2,r2,4
   1e0f8:	e0bf6615 	stw	r2,-616(fp)
   1e0fc:	e03f6715 	stw	zero,-612(fp)
   1e100:	e1bf6617 	ldw	r6,-616(fp)
   1e104:	e1ff6717 	ldw	r7,-612(fp)
   1e108:	31c4b03a 	or	r2,r6,r7
   1e10c:	1004c03a 	cmpne	r2,r2,zero
   1e110:	10803fcc 	andi	r2,r2,255
   1e114:	10000d26 	beq	r2,zero,1e14c <secp256k1_fe_sqr_inner+0x2770>
   1e118:	d0a01617 	ldw	r2,-32680(gp)
   1e11c:	10c00317 	ldw	r3,12(r2)
   1e120:	00800174 	movhi	r2,5
   1e124:	1093fd04 	addi	r2,r2,20468
   1e128:	d8800015 	stw	r2,0(sp)
   1e12c:	01c0e644 	movi	r7,921
   1e130:	01800174 	movhi	r6,5
   1e134:	3191dd04 	addi	r6,r6,18292
   1e138:	01400174 	movhi	r5,5
   1e13c:	2951e804 	addi	r5,r5,18336
   1e140:	1809883a 	mov	r4,r3
   1e144:	00461000 	call	46100 <fprintf>
   1e148:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u5 0 0 0 0 0 t9 0 0 0 c-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    t5 = c & M; c >>= 26; c += u5 * R1;
   1e14c:	e0fe6a17 	ldw	r3,-1624(fp)
   1e150:	e0be6417 	ldw	r2,-1648(fp)
   1e154:	1884703a 	and	r2,r3,r2
   1e158:	e0be7d15 	stw	r2,-1548(fp)
   1e15c:	e0be6b17 	ldw	r2,-1620(fp)
   1e160:	100691ba 	slli	r3,r2,6
   1e164:	e0be6a17 	ldw	r2,-1624(fp)
   1e168:	1004d6ba 	srli	r2,r2,26
   1e16c:	10c4b03a 	or	r2,r2,r3
   1e170:	e0be6a15 	stw	r2,-1624(fp)
   1e174:	e0be6b17 	ldw	r2,-1620(fp)
   1e178:	1004d6ba 	srli	r2,r2,26
   1e17c:	e0be6b15 	stw	r2,-1620(fp)
   1e180:	e0be6617 	ldw	r2,-1640(fp)
   1e184:	e0bf6815 	stw	r2,-608(fp)
   1e188:	e03f6915 	stw	zero,-604(fp)
   1e18c:	e1be7b17 	ldw	r6,-1556(fp)
   1e190:	e1fe7c17 	ldw	r7,-1552(fp)
   1e194:	e13f6817 	ldw	r4,-608(fp)
   1e198:	e17f6917 	ldw	r5,-604(fp)
   1e19c:	00438e00 	call	438e0 <__muldi3>
   1e1a0:	1009883a 	mov	r4,r2
   1e1a4:	180b883a 	mov	r5,r3
   1e1a8:	200f883a 	mov	r7,r4
   1e1ac:	2811883a 	mov	r8,r5
   1e1b0:	e13e6a17 	ldw	r4,-1624(fp)
   1e1b4:	e17e6b17 	ldw	r5,-1620(fp)
   1e1b8:	21c5883a 	add	r2,r4,r7
   1e1bc:	110d803a 	cmpltu	r6,r2,r4
   1e1c0:	2a07883a 	add	r3,r5,r8
   1e1c4:	30c9883a 	add	r4,r6,r3
   1e1c8:	2007883a 	mov	r3,r4
   1e1cc:	e0be6a15 	stw	r2,-1624(fp)
   1e1d0:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t5, 26);
   1e1d4:	e0be7d17 	ldw	r2,-1548(fp)
   1e1d8:	1004d6ba 	srli	r2,r2,26
   1e1dc:	1004c03a 	cmpne	r2,r2,zero
   1e1e0:	10803fcc 	andi	r2,r2,255
   1e1e4:	10000d26 	beq	r2,zero,1e21c <secp256k1_fe_sqr_inner+0x2840>
   1e1e8:	d0a01617 	ldw	r2,-32680(gp)
   1e1ec:	10c00317 	ldw	r3,12(r2)
   1e1f0:	00800174 	movhi	r2,5
   1e1f4:	10941e04 	addi	r2,r2,20600
   1e1f8:	d8800015 	stw	r2,0(sp)
   1e1fc:	01c0e744 	movi	r7,925
   1e200:	01800174 	movhi	r6,5
   1e204:	3191dd04 	addi	r6,r6,18292
   1e208:	01400174 	movhi	r5,5
   1e20c:	2951e804 	addi	r5,r5,18336
   1e210:	1809883a 	mov	r4,r3
   1e214:	00461000 	call	46100 <fprintf>
   1e218:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   1e21c:	e0be6b17 	ldw	r2,-1620(fp)
   1e220:	1004d1fa 	srli	r2,r2,7
   1e224:	e0bf6a15 	stw	r2,-600(fp)
   1e228:	e03f6b15 	stw	zero,-596(fp)
   1e22c:	e0ff6a17 	ldw	r3,-600(fp)
   1e230:	e13f6b17 	ldw	r4,-596(fp)
   1e234:	1904b03a 	or	r2,r3,r4
   1e238:	1004c03a 	cmpne	r2,r2,zero
   1e23c:	10803fcc 	andi	r2,r2,255
   1e240:	10000d26 	beq	r2,zero,1e278 <secp256k1_fe_sqr_inner+0x289c>
   1e244:	d0a01617 	ldw	r2,-32680(gp)
   1e248:	10c00317 	ldw	r3,12(r2)
   1e24c:	00800174 	movhi	r2,5
   1e250:	1093dc04 	addi	r2,r2,20336
   1e254:	d8800015 	stw	r2,0(sp)
   1e258:	01c0e784 	movi	r7,926
   1e25c:	01800174 	movhi	r6,5
   1e260:	3191dd04 	addi	r6,r6,18292
   1e264:	01400174 	movhi	r5,5
   1e268:	2951e804 	addi	r5,r5,18336
   1e26c:	1809883a 	mov	r4,r3
   1e270:	00461000 	call	46100 <fprintf>
   1e274:	0045fd40 	call	45fd4 <abort>
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[6]
   1e278:	e0be8717 	ldw	r2,-1508(fp)
   1e27c:	10800017 	ldw	r2,0(r2)
   1e280:	1085883a 	add	r2,r2,r2
   1e284:	e0bf6c15 	stw	r2,-592(fp)
   1e288:	e03f6d15 	stw	zero,-588(fp)
   1e28c:	e0be8717 	ldw	r2,-1508(fp)
   1e290:	10800604 	addi	r2,r2,24
   1e294:	10800017 	ldw	r2,0(r2)
   1e298:	e0bf6e15 	stw	r2,-584(fp)
   1e29c:	e03f6f15 	stw	zero,-580(fp)
   1e2a0:	e1bf6e17 	ldw	r6,-584(fp)
   1e2a4:	e1ff6f17 	ldw	r7,-580(fp)
   1e2a8:	e13f6c17 	ldw	r4,-592(fp)
   1e2ac:	e17f6d17 	ldw	r5,-588(fp)
   1e2b0:	00438e00 	call	438e0 <__muldi3>
   1e2b4:	1009883a 	mov	r4,r2
   1e2b8:	180b883a 	mov	r5,r3
   1e2bc:	2021883a 	mov	r16,r4
   1e2c0:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[5]
   1e2c4:	e0be8717 	ldw	r2,-1508(fp)
   1e2c8:	10800104 	addi	r2,r2,4
   1e2cc:	10800017 	ldw	r2,0(r2)
   1e2d0:	1085883a 	add	r2,r2,r2
   1e2d4:	e0bf7015 	stw	r2,-576(fp)
   1e2d8:	e03f7115 	stw	zero,-572(fp)
   1e2dc:	e0be8717 	ldw	r2,-1508(fp)
   1e2e0:	10800504 	addi	r2,r2,20
   1e2e4:	10800017 	ldw	r2,0(r2)
   1e2e8:	e0bf7215 	stw	r2,-568(fp)
   1e2ec:	e03f7315 	stw	zero,-564(fp)
   1e2f0:	e1bf7217 	ldw	r6,-568(fp)
   1e2f4:	e1ff7317 	ldw	r7,-564(fp)
   1e2f8:	e13f7017 	ldw	r4,-576(fp)
   1e2fc:	e17f7117 	ldw	r5,-572(fp)
   1e300:	00438e00 	call	438e0 <__muldi3>
   1e304:	100f883a 	mov	r7,r2
   1e308:	1811883a 	mov	r8,r3
   1e30c:	380b883a 	mov	r5,r7
   1e310:	400d883a 	mov	r6,r8
   1e314:	8145883a 	add	r2,r16,r5
   1e318:	1409803a 	cmpltu	r4,r2,r16
   1e31c:	8987883a 	add	r3,r17,r6
   1e320:	20c9883a 	add	r4,r4,r3
   1e324:	2007883a 	mov	r3,r4
   1e328:	1025883a 	mov	r18,r2
   1e32c:	1827883a 	mov	r19,r3
       + (uint64_t)(a[2]*2) * a[4]
       + (uint64_t)a[3] * a[3];
   1e330:	e0be8717 	ldw	r2,-1508(fp)
   1e334:	10800304 	addi	r2,r2,12
   1e338:	10800017 	ldw	r2,0(r2)
   1e33c:	e0bf7415 	stw	r2,-560(fp)
   1e340:	e03f7515 	stw	zero,-556(fp)
   1e344:	e0be8717 	ldw	r2,-1508(fp)
   1e348:	10800304 	addi	r2,r2,12
   1e34c:	10800017 	ldw	r2,0(r2)
   1e350:	e0bf7615 	stw	r2,-552(fp)
   1e354:	e03f7715 	stw	zero,-548(fp)
   1e358:	e1bf7617 	ldw	r6,-552(fp)
   1e35c:	e1ff7717 	ldw	r7,-548(fp)
   1e360:	e13f7417 	ldw	r4,-560(fp)
   1e364:	e17f7517 	ldw	r5,-556(fp)
   1e368:	00438e00 	call	438e0 <__muldi3>
   1e36c:	1009883a 	mov	r4,r2
   1e370:	180b883a 	mov	r5,r3
   1e374:	2021883a 	mov	r16,r4
   1e378:	2823883a 	mov	r17,r5
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[6]
       + (uint64_t)(a[1]*2) * a[5]
       + (uint64_t)(a[2]*2) * a[4]
   1e37c:	e0be8717 	ldw	r2,-1508(fp)
   1e380:	10800204 	addi	r2,r2,8
   1e384:	10800017 	ldw	r2,0(r2)
   1e388:	1085883a 	add	r2,r2,r2
   1e38c:	e0bf7815 	stw	r2,-544(fp)
   1e390:	e03f7915 	stw	zero,-540(fp)
   1e394:	e0be8717 	ldw	r2,-1508(fp)
   1e398:	10800404 	addi	r2,r2,16
   1e39c:	10800017 	ldw	r2,0(r2)
   1e3a0:	e0bf7a15 	stw	r2,-536(fp)
   1e3a4:	e03f7b15 	stw	zero,-532(fp)
   1e3a8:	e1bf7a17 	ldw	r6,-536(fp)
   1e3ac:	e1ff7b17 	ldw	r7,-532(fp)
   1e3b0:	e13f7817 	ldw	r4,-544(fp)
   1e3b4:	e17f7917 	ldw	r5,-540(fp)
   1e3b8:	00438e00 	call	438e0 <__muldi3>
   1e3bc:	100f883a 	mov	r7,r2
   1e3c0:	1811883a 	mov	r8,r3
   1e3c4:	380b883a 	mov	r5,r7
   1e3c8:	400d883a 	mov	r6,r8
       + (uint64_t)a[3] * a[3];
   1e3cc:	8145883a 	add	r2,r16,r5
   1e3d0:	1409803a 	cmpltu	r4,r2,r16
   1e3d4:	8987883a 	add	r3,r17,r6
   1e3d8:	20c9883a 	add	r4,r4,r3
   1e3dc:	2007883a 	mov	r3,r4
   1e3e0:	100b883a 	mov	r5,r2
   1e3e4:	180d883a 	mov	r6,r3
   1e3e8:	9145883a 	add	r2,r18,r5
   1e3ec:	1489803a 	cmpltu	r4,r2,r18
   1e3f0:	9987883a 	add	r3,r19,r6
   1e3f4:	20c9883a 	add	r4,r4,r3
   1e3f8:	2007883a 	mov	r3,r4
   1e3fc:	100f883a 	mov	r7,r2
   1e400:	1811883a 	mov	r8,r3
    VERIFY_BITS(t5, 26);
    VERIFY_BITS(c, 39);
    /* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[6]
   1e404:	e13e6a17 	ldw	r4,-1624(fp)
   1e408:	e17e6b17 	ldw	r5,-1620(fp)
   1e40c:	21c5883a 	add	r2,r4,r7
   1e410:	110d803a 	cmpltu	r6,r2,r4
   1e414:	2a07883a 	add	r3,r5,r8
   1e418:	30c9883a 	add	r4,r6,r3
   1e41c:	2007883a 	mov	r3,r4
   1e420:	e0be6a15 	stw	r2,-1624(fp)
   1e424:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[5]
       + (uint64_t)(a[2]*2) * a[4]
       + (uint64_t)a[3] * a[3];
    VERIFY_BITS(c, 63);
   1e428:	e0be6a17 	ldw	r2,-1624(fp)
   1e42c:	e0fe6b17 	ldw	r3,-1620(fp)
   1e430:	1804d7fa 	srli	r2,r3,31
   1e434:	10803fcc 	andi	r2,r2,255
   1e438:	10000d26 	beq	r2,zero,1e470 <secp256k1_fe_sqr_inner+0x2a94>
   1e43c:	d0a01617 	ldw	r2,-32680(gp)
   1e440:	10c00317 	ldw	r3,12(r2)
   1e444:	00800174 	movhi	r2,5
   1e448:	10938f04 	addi	r2,r2,20028
   1e44c:	d8800015 	stw	r2,0(sp)
   1e450:	01c0e984 	movi	r7,934
   1e454:	01800174 	movhi	r6,5
   1e458:	3191dd04 	addi	r6,r6,18292
   1e45c:	01400174 	movhi	r5,5
   1e460:	2951e804 	addi	r5,r5,18336
   1e464:	1809883a 	mov	r4,r3
   1e468:	00461000 	call	46100 <fprintf>
   1e46c:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[7]*2) * a[9]
   1e470:	e0be8717 	ldw	r2,-1508(fp)
   1e474:	10800704 	addi	r2,r2,28
   1e478:	10800017 	ldw	r2,0(r2)
   1e47c:	1085883a 	add	r2,r2,r2
   1e480:	e0bf7c15 	stw	r2,-528(fp)
   1e484:	e03f7d15 	stw	zero,-524(fp)
   1e488:	e0be8717 	ldw	r2,-1508(fp)
   1e48c:	10800904 	addi	r2,r2,36
   1e490:	10800017 	ldw	r2,0(r2)
   1e494:	e0bf7e15 	stw	r2,-520(fp)
   1e498:	e03f7f15 	stw	zero,-516(fp)
   1e49c:	e1bf7e17 	ldw	r6,-520(fp)
   1e4a0:	e1ff7f17 	ldw	r7,-516(fp)
   1e4a4:	e13f7c17 	ldw	r4,-528(fp)
   1e4a8:	e17f7d17 	ldw	r5,-524(fp)
   1e4ac:	00438e00 	call	438e0 <__muldi3>
   1e4b0:	1009883a 	mov	r4,r2
   1e4b4:	180b883a 	mov	r5,r3
   1e4b8:	2021883a 	mov	r16,r4
   1e4bc:	2823883a 	mov	r17,r5
       + (uint64_t)a[8] * a[8];
   1e4c0:	e0be8717 	ldw	r2,-1508(fp)
   1e4c4:	10800804 	addi	r2,r2,32
   1e4c8:	10800017 	ldw	r2,0(r2)
   1e4cc:	e0bf8015 	stw	r2,-512(fp)
   1e4d0:	e03f8115 	stw	zero,-508(fp)
   1e4d4:	e0be8717 	ldw	r2,-1508(fp)
   1e4d8:	10800804 	addi	r2,r2,32
   1e4dc:	10800017 	ldw	r2,0(r2)
   1e4e0:	e0bf8215 	stw	r2,-504(fp)
   1e4e4:	e03f8315 	stw	zero,-500(fp)
   1e4e8:	e1bf8217 	ldw	r6,-504(fp)
   1e4ec:	e1ff8317 	ldw	r7,-500(fp)
   1e4f0:	e13f8017 	ldw	r4,-512(fp)
   1e4f4:	e17f8117 	ldw	r5,-508(fp)
   1e4f8:	00438e00 	call	438e0 <__muldi3>
   1e4fc:	100f883a 	mov	r7,r2
   1e500:	1811883a 	mov	r8,r3
   1e504:	380b883a 	mov	r5,r7
   1e508:	400d883a 	mov	r6,r8
   1e50c:	8145883a 	add	r2,r16,r5
   1e510:	1409803a 	cmpltu	r4,r2,r16
   1e514:	8987883a 	add	r3,r17,r6
   1e518:	20c9883a 	add	r4,r4,r3
   1e51c:	2007883a 	mov	r3,r4
   1e520:	100f883a 	mov	r7,r2
   1e524:	1811883a 	mov	r8,r3
       + (uint64_t)(a[1]*2) * a[5]
       + (uint64_t)(a[2]*2) * a[4]
       + (uint64_t)a[3] * a[3];
    VERIFY_BITS(c, 63);
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[7]*2) * a[9]
   1e528:	e13e6717 	ldw	r4,-1636(fp)
   1e52c:	e17e6817 	ldw	r5,-1632(fp)
   1e530:	21c5883a 	add	r2,r4,r7
   1e534:	110d803a 	cmpltu	r6,r2,r4
   1e538:	2a07883a 	add	r3,r5,r8
   1e53c:	30c9883a 	add	r4,r6,r3
   1e540:	2007883a 	mov	r3,r4
   1e544:	e0be6715 	stw	r2,-1636(fp)
   1e548:	e0fe6815 	stw	r3,-1632(fp)
       + (uint64_t)a[8] * a[8];
    VERIFY_BITS(d, 61);
   1e54c:	e0be6817 	ldw	r2,-1632(fp)
   1e550:	1004d77a 	srli	r2,r2,29
   1e554:	e0bf8415 	stw	r2,-496(fp)
   1e558:	e03f8515 	stw	zero,-492(fp)
   1e55c:	e1bf8417 	ldw	r6,-496(fp)
   1e560:	e1ff8517 	ldw	r7,-492(fp)
   1e564:	31c4b03a 	or	r2,r6,r7
   1e568:	1004c03a 	cmpne	r2,r2,zero
   1e56c:	10803fcc 	andi	r2,r2,255
   1e570:	10000d26 	beq	r2,zero,1e5a8 <secp256k1_fe_sqr_inner+0x2bcc>
   1e574:	d0a01617 	ldw	r2,-32680(gp)
   1e578:	10c00317 	ldw	r3,12(r2)
   1e57c:	00800174 	movhi	r2,5
   1e580:	10942904 	addi	r2,r2,20644
   1e584:	d8800015 	stw	r2,0(sp)
   1e588:	01c0ea84 	movi	r7,938
   1e58c:	01800174 	movhi	r6,5
   1e590:	3191dd04 	addi	r6,r6,18292
   1e594:	01400174 	movhi	r5,5
   1e598:	2951e804 	addi	r5,r5,18336
   1e59c:	1809883a 	mov	r4,r3
   1e5a0:	00461000 	call	46100 <fprintf>
   1e5a4:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    u6 = d & M; d >>= 26; c += u6 * R0;
   1e5a8:	e0be6417 	ldw	r2,-1648(fp)
   1e5ac:	e0bf8615 	stw	r2,-488(fp)
   1e5b0:	e03f8715 	stw	zero,-484(fp)
   1e5b4:	e0be6717 	ldw	r2,-1636(fp)
   1e5b8:	e0ff8617 	ldw	r3,-488(fp)
   1e5bc:	10c4703a 	and	r2,r2,r3
   1e5c0:	e0be7e15 	stw	r2,-1544(fp)
   1e5c4:	e0be6817 	ldw	r2,-1632(fp)
   1e5c8:	e13f8717 	ldw	r4,-484(fp)
   1e5cc:	1104703a 	and	r2,r2,r4
   1e5d0:	e0be7f15 	stw	r2,-1540(fp)
   1e5d4:	e0be6817 	ldw	r2,-1632(fp)
   1e5d8:	100691ba 	slli	r3,r2,6
   1e5dc:	e0be6717 	ldw	r2,-1636(fp)
   1e5e0:	1004d6ba 	srli	r2,r2,26
   1e5e4:	10c4b03a 	or	r2,r2,r3
   1e5e8:	e0be6715 	stw	r2,-1636(fp)
   1e5ec:	e0be6817 	ldw	r2,-1632(fp)
   1e5f0:	1004d6ba 	srli	r2,r2,26
   1e5f4:	e0be6815 	stw	r2,-1632(fp)
   1e5f8:	e0be6517 	ldw	r2,-1644(fp)
   1e5fc:	e0bf8815 	stw	r2,-480(fp)
   1e600:	e03f8915 	stw	zero,-476(fp)
   1e604:	e1be7e17 	ldw	r6,-1544(fp)
   1e608:	e1fe7f17 	ldw	r7,-1540(fp)
   1e60c:	e13f8817 	ldw	r4,-480(fp)
   1e610:	e17f8917 	ldw	r5,-476(fp)
   1e614:	00438e00 	call	438e0 <__muldi3>
   1e618:	1009883a 	mov	r4,r2
   1e61c:	180b883a 	mov	r5,r3
   1e620:	200f883a 	mov	r7,r4
   1e624:	2811883a 	mov	r8,r5
   1e628:	e13e6a17 	ldw	r4,-1624(fp)
   1e62c:	e17e6b17 	ldw	r5,-1620(fp)
   1e630:	21c5883a 	add	r2,r4,r7
   1e634:	110d803a 	cmpltu	r6,r2,r4
   1e638:	2a07883a 	add	r3,r5,r8
   1e63c:	30c9883a 	add	r4,r6,r3
   1e640:	2007883a 	mov	r3,r4
   1e644:	e0be6a15 	stw	r2,-1624(fp)
   1e648:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u6, 26);
   1e64c:	e0be7f17 	ldw	r2,-1540(fp)
   1e650:	100691ba 	slli	r3,r2,6
   1e654:	e0be7e17 	ldw	r2,-1544(fp)
   1e658:	1004d6ba 	srli	r2,r2,26
   1e65c:	e0bf8a15 	stw	r2,-472(fp)
   1e660:	e1bf8a17 	ldw	r6,-472(fp)
   1e664:	1986b03a 	or	r3,r3,r6
   1e668:	e0ff8a15 	stw	r3,-472(fp)
   1e66c:	e0be7f17 	ldw	r2,-1540(fp)
   1e670:	1004d6ba 	srli	r2,r2,26
   1e674:	e0bf8b15 	stw	r2,-468(fp)
   1e678:	e1ff8a17 	ldw	r7,-472(fp)
   1e67c:	e0ff8b17 	ldw	r3,-468(fp)
   1e680:	38c4b03a 	or	r2,r7,r3
   1e684:	1004c03a 	cmpne	r2,r2,zero
   1e688:	10803fcc 	andi	r2,r2,255
   1e68c:	10000d26 	beq	r2,zero,1e6c4 <secp256k1_fe_sqr_inner+0x2ce8>
   1e690:	d0a01617 	ldw	r2,-32680(gp)
   1e694:	10c00317 	ldw	r3,12(r2)
   1e698:	00800174 	movhi	r2,5
   1e69c:	10943404 	addi	r2,r2,20688
   1e6a0:	d8800015 	stw	r2,0(sp)
   1e6a4:	01c0eb44 	movi	r7,941
   1e6a8:	01800174 	movhi	r6,5
   1e6ac:	3191dd04 	addi	r6,r6,18292
   1e6b0:	01400174 	movhi	r5,5
   1e6b4:	2951e804 	addi	r5,r5,18336
   1e6b8:	1809883a 	mov	r4,r3
   1e6bc:	00461000 	call	46100 <fprintf>
   1e6c0:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 35);
   1e6c4:	e0be6817 	ldw	r2,-1632(fp)
   1e6c8:	1004d0fa 	srli	r2,r2,3
   1e6cc:	e0bf8c15 	stw	r2,-464(fp)
   1e6d0:	e03f8d15 	stw	zero,-460(fp)
   1e6d4:	e13f8c17 	ldw	r4,-464(fp)
   1e6d8:	e1bf8d17 	ldw	r6,-460(fp)
   1e6dc:	2184b03a 	or	r2,r4,r6
   1e6e0:	1004c03a 	cmpne	r2,r2,zero
   1e6e4:	10803fcc 	andi	r2,r2,255
   1e6e8:	10000d26 	beq	r2,zero,1e720 <secp256k1_fe_sqr_inner+0x2d44>
   1e6ec:	d0a01617 	ldw	r2,-32680(gp)
   1e6f0:	10c00317 	ldw	r3,12(r2)
   1e6f4:	00800174 	movhi	r2,5
   1e6f8:	10943f04 	addi	r2,r2,20732
   1e6fc:	d8800015 	stw	r2,0(sp)
   1e700:	01c0eb84 	movi	r7,942
   1e704:	01800174 	movhi	r6,5
   1e708:	3191dd04 	addi	r6,r6,18292
   1e70c:	01400174 	movhi	r5,5
   1e710:	2951e804 	addi	r5,r5,18336
   1e714:	1809883a 	mov	r4,r3
   1e718:	00461000 	call	46100 <fprintf>
   1e71c:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    /* [d u6 0 0 0 0 0 0 t9 0 0 c-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    t6 = c & M; c >>= 26; c += u6 * R1;
   1e720:	e0fe6a17 	ldw	r3,-1624(fp)
   1e724:	e0be6417 	ldw	r2,-1648(fp)
   1e728:	1884703a 	and	r2,r3,r2
   1e72c:	e0be8015 	stw	r2,-1536(fp)
   1e730:	e0be6b17 	ldw	r2,-1620(fp)
   1e734:	100691ba 	slli	r3,r2,6
   1e738:	e0be6a17 	ldw	r2,-1624(fp)
   1e73c:	1004d6ba 	srli	r2,r2,26
   1e740:	10c4b03a 	or	r2,r2,r3
   1e744:	e0be6a15 	stw	r2,-1624(fp)
   1e748:	e0be6b17 	ldw	r2,-1620(fp)
   1e74c:	1004d6ba 	srli	r2,r2,26
   1e750:	e0be6b15 	stw	r2,-1620(fp)
   1e754:	e0be6617 	ldw	r2,-1640(fp)
   1e758:	e0bf8e15 	stw	r2,-456(fp)
   1e75c:	e03f8f15 	stw	zero,-452(fp)
   1e760:	e1be7e17 	ldw	r6,-1544(fp)
   1e764:	e1fe7f17 	ldw	r7,-1540(fp)
   1e768:	e13f8e17 	ldw	r4,-456(fp)
   1e76c:	e17f8f17 	ldw	r5,-452(fp)
   1e770:	00438e00 	call	438e0 <__muldi3>
   1e774:	1009883a 	mov	r4,r2
   1e778:	180b883a 	mov	r5,r3
   1e77c:	200f883a 	mov	r7,r4
   1e780:	2811883a 	mov	r8,r5
   1e784:	e13e6a17 	ldw	r4,-1624(fp)
   1e788:	e17e6b17 	ldw	r5,-1620(fp)
   1e78c:	21c5883a 	add	r2,r4,r7
   1e790:	110d803a 	cmpltu	r6,r2,r4
   1e794:	2a07883a 	add	r3,r5,r8
   1e798:	30c9883a 	add	r4,r6,r3
   1e79c:	2007883a 	mov	r3,r4
   1e7a0:	e0be6a15 	stw	r2,-1624(fp)
   1e7a4:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t6, 26);
   1e7a8:	e0be8017 	ldw	r2,-1536(fp)
   1e7ac:	1004d6ba 	srli	r2,r2,26
   1e7b0:	1004c03a 	cmpne	r2,r2,zero
   1e7b4:	10803fcc 	andi	r2,r2,255
   1e7b8:	10000d26 	beq	r2,zero,1e7f0 <secp256k1_fe_sqr_inner+0x2e14>
   1e7bc:	d0a01617 	ldw	r2,-32680(gp)
   1e7c0:	10c00317 	ldw	r3,12(r2)
   1e7c4:	00800174 	movhi	r2,5
   1e7c8:	10944a04 	addi	r2,r2,20776
   1e7cc:	d8800015 	stw	r2,0(sp)
   1e7d0:	01c0ec84 	movi	r7,946
   1e7d4:	01800174 	movhi	r6,5
   1e7d8:	3191dd04 	addi	r6,r6,18292
   1e7dc:	01400174 	movhi	r5,5
   1e7e0:	2951e804 	addi	r5,r5,18336
   1e7e4:	1809883a 	mov	r4,r3
   1e7e8:	00461000 	call	46100 <fprintf>
   1e7ec:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   1e7f0:	e0be6b17 	ldw	r2,-1620(fp)
   1e7f4:	1004d1fa 	srli	r2,r2,7
   1e7f8:	e0bf9015 	stw	r2,-448(fp)
   1e7fc:	e03f9115 	stw	zero,-444(fp)
   1e800:	e1ff9017 	ldw	r7,-448(fp)
   1e804:	e0ff9117 	ldw	r3,-444(fp)
   1e808:	38c4b03a 	or	r2,r7,r3
   1e80c:	1004c03a 	cmpne	r2,r2,zero
   1e810:	10803fcc 	andi	r2,r2,255
   1e814:	10000d26 	beq	r2,zero,1e84c <secp256k1_fe_sqr_inner+0x2e70>
   1e818:	d0a01617 	ldw	r2,-32680(gp)
   1e81c:	10c00317 	ldw	r3,12(r2)
   1e820:	00800174 	movhi	r2,5
   1e824:	1093dc04 	addi	r2,r2,20336
   1e828:	d8800015 	stw	r2,0(sp)
   1e82c:	01c0ecc4 	movi	r7,947
   1e830:	01800174 	movhi	r6,5
   1e834:	3191dd04 	addi	r6,r6,18292
   1e838:	01400174 	movhi	r5,5
   1e83c:	2951e804 	addi	r5,r5,18336
   1e840:	1809883a 	mov	r4,r3
   1e844:	00461000 	call	46100 <fprintf>
   1e848:	0045fd40 	call	45fd4 <abort>
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[7]
   1e84c:	e0be8717 	ldw	r2,-1508(fp)
   1e850:	10800017 	ldw	r2,0(r2)
   1e854:	1085883a 	add	r2,r2,r2
   1e858:	e0bf9215 	stw	r2,-440(fp)
   1e85c:	e03f9315 	stw	zero,-436(fp)
   1e860:	e0be8717 	ldw	r2,-1508(fp)
   1e864:	10800704 	addi	r2,r2,28
   1e868:	10800017 	ldw	r2,0(r2)
   1e86c:	e0bf9415 	stw	r2,-432(fp)
   1e870:	e03f9515 	stw	zero,-428(fp)
   1e874:	e1bf9417 	ldw	r6,-432(fp)
   1e878:	e1ff9517 	ldw	r7,-428(fp)
   1e87c:	e13f9217 	ldw	r4,-440(fp)
   1e880:	e17f9317 	ldw	r5,-436(fp)
   1e884:	00438e00 	call	438e0 <__muldi3>
   1e888:	1009883a 	mov	r4,r2
   1e88c:	180b883a 	mov	r5,r3
   1e890:	2021883a 	mov	r16,r4
   1e894:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[6]
   1e898:	e0be8717 	ldw	r2,-1508(fp)
   1e89c:	10800104 	addi	r2,r2,4
   1e8a0:	10800017 	ldw	r2,0(r2)
   1e8a4:	1085883a 	add	r2,r2,r2
   1e8a8:	e0bf9615 	stw	r2,-424(fp)
   1e8ac:	e03f9715 	stw	zero,-420(fp)
   1e8b0:	e0be8717 	ldw	r2,-1508(fp)
   1e8b4:	10800604 	addi	r2,r2,24
   1e8b8:	10800017 	ldw	r2,0(r2)
   1e8bc:	e0bf9815 	stw	r2,-416(fp)
   1e8c0:	e03f9915 	stw	zero,-412(fp)
   1e8c4:	e1bf9817 	ldw	r6,-416(fp)
   1e8c8:	e1ff9917 	ldw	r7,-412(fp)
   1e8cc:	e13f9617 	ldw	r4,-424(fp)
   1e8d0:	e17f9717 	ldw	r5,-420(fp)
   1e8d4:	00438e00 	call	438e0 <__muldi3>
   1e8d8:	100f883a 	mov	r7,r2
   1e8dc:	1811883a 	mov	r8,r3
   1e8e0:	380b883a 	mov	r5,r7
   1e8e4:	400d883a 	mov	r6,r8
   1e8e8:	8145883a 	add	r2,r16,r5
   1e8ec:	1409803a 	cmpltu	r4,r2,r16
   1e8f0:	8987883a 	add	r3,r17,r6
   1e8f4:	20c9883a 	add	r4,r4,r3
   1e8f8:	2007883a 	mov	r3,r4
   1e8fc:	1025883a 	mov	r18,r2
   1e900:	1827883a 	mov	r19,r3
       + (uint64_t)(a[2]*2) * a[5]
       + (uint64_t)(a[3]*2) * a[4];
   1e904:	e0be8717 	ldw	r2,-1508(fp)
   1e908:	10800304 	addi	r2,r2,12
   1e90c:	10800017 	ldw	r2,0(r2)
   1e910:	1085883a 	add	r2,r2,r2
   1e914:	e0bf9a15 	stw	r2,-408(fp)
   1e918:	e03f9b15 	stw	zero,-404(fp)
   1e91c:	e0be8717 	ldw	r2,-1508(fp)
   1e920:	10800404 	addi	r2,r2,16
   1e924:	10800017 	ldw	r2,0(r2)
   1e928:	e0bf9c15 	stw	r2,-400(fp)
   1e92c:	e03f9d15 	stw	zero,-396(fp)
   1e930:	e1bf9c17 	ldw	r6,-400(fp)
   1e934:	e1ff9d17 	ldw	r7,-396(fp)
   1e938:	e13f9a17 	ldw	r4,-408(fp)
   1e93c:	e17f9b17 	ldw	r5,-404(fp)
   1e940:	00438e00 	call	438e0 <__muldi3>
   1e944:	1009883a 	mov	r4,r2
   1e948:	180b883a 	mov	r5,r3
   1e94c:	2021883a 	mov	r16,r4
   1e950:	2823883a 	mov	r17,r5
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[7]
       + (uint64_t)(a[1]*2) * a[6]
       + (uint64_t)(a[2]*2) * a[5]
   1e954:	e0be8717 	ldw	r2,-1508(fp)
   1e958:	10800204 	addi	r2,r2,8
   1e95c:	10800017 	ldw	r2,0(r2)
   1e960:	1085883a 	add	r2,r2,r2
   1e964:	e0bf9e15 	stw	r2,-392(fp)
   1e968:	e03f9f15 	stw	zero,-388(fp)
   1e96c:	e0be8717 	ldw	r2,-1508(fp)
   1e970:	10800504 	addi	r2,r2,20
   1e974:	10800017 	ldw	r2,0(r2)
   1e978:	e0bfa015 	stw	r2,-384(fp)
   1e97c:	e03fa115 	stw	zero,-380(fp)
   1e980:	e1bfa017 	ldw	r6,-384(fp)
   1e984:	e1ffa117 	ldw	r7,-380(fp)
   1e988:	e13f9e17 	ldw	r4,-392(fp)
   1e98c:	e17f9f17 	ldw	r5,-388(fp)
   1e990:	00438e00 	call	438e0 <__muldi3>
   1e994:	100f883a 	mov	r7,r2
   1e998:	1811883a 	mov	r8,r3
   1e99c:	380b883a 	mov	r5,r7
   1e9a0:	400d883a 	mov	r6,r8
       + (uint64_t)(a[3]*2) * a[4];
   1e9a4:	8145883a 	add	r2,r16,r5
   1e9a8:	1409803a 	cmpltu	r4,r2,r16
   1e9ac:	8987883a 	add	r3,r17,r6
   1e9b0:	20c9883a 	add	r4,r4,r3
   1e9b4:	2007883a 	mov	r3,r4
   1e9b8:	100b883a 	mov	r5,r2
   1e9bc:	180d883a 	mov	r6,r3
   1e9c0:	9145883a 	add	r2,r18,r5
   1e9c4:	1489803a 	cmpltu	r4,r2,r18
   1e9c8:	9987883a 	add	r3,r19,r6
   1e9cc:	20c9883a 	add	r4,r4,r3
   1e9d0:	2007883a 	mov	r3,r4
   1e9d4:	100f883a 	mov	r7,r2
   1e9d8:	1811883a 	mov	r8,r3
    VERIFY_BITS(t6, 26);
    VERIFY_BITS(c, 39);
    /* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[7]
   1e9dc:	e13e6a17 	ldw	r4,-1624(fp)
   1e9e0:	e17e6b17 	ldw	r5,-1620(fp)
   1e9e4:	21c5883a 	add	r2,r4,r7
   1e9e8:	110d803a 	cmpltu	r6,r2,r4
   1e9ec:	2a07883a 	add	r3,r5,r8
   1e9f0:	30c9883a 	add	r4,r6,r3
   1e9f4:	2007883a 	mov	r3,r4
   1e9f8:	e0be6a15 	stw	r2,-1624(fp)
   1e9fc:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[6]
       + (uint64_t)(a[2]*2) * a[5]
       + (uint64_t)(a[3]*2) * a[4];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x8000007C00000007ULL);
   1ea00:	01000044 	movi	r4,1
   1ea04:	e0fe6b17 	ldw	r3,-1620(fp)
   1ea08:	00a00034 	movhi	r2,32768
   1ea0c:	10801f04 	addi	r2,r2,124
   1ea10:	10c00836 	bltu	r2,r3,1ea34 <secp256k1_fe_sqr_inner+0x3058>
   1ea14:	e0fe6b17 	ldw	r3,-1620(fp)
   1ea18:	00a00034 	movhi	r2,32768
   1ea1c:	10801f04 	addi	r2,r2,124
   1ea20:	1880031e 	bne	r3,r2,1ea30 <secp256k1_fe_sqr_inner+0x3054>
   1ea24:	e0be6a17 	ldw	r2,-1624(fp)
   1ea28:	10800228 	cmpgeui	r2,r2,8
   1ea2c:	1000011e 	bne	r2,zero,1ea34 <secp256k1_fe_sqr_inner+0x3058>
   1ea30:	0009883a 	mov	r4,zero
   1ea34:	20803fcc 	andi	r2,r4,255
   1ea38:	10000d26 	beq	r2,zero,1ea70 <secp256k1_fe_sqr_inner+0x3094>
   1ea3c:	d0a01617 	ldw	r2,-32680(gp)
   1ea40:	10c00317 	ldw	r3,12(r2)
   1ea44:	00800174 	movhi	r2,5
   1ea48:	10945504 	addi	r2,r2,20820
   1ea4c:	d8800015 	stw	r2,0(sp)
   1ea50:	01c0ef04 	movi	r7,956
   1ea54:	01800174 	movhi	r6,5
   1ea58:	3191dd04 	addi	r6,r6,18292
   1ea5c:	01400174 	movhi	r5,5
   1ea60:	2951e804 	addi	r5,r5,18336
   1ea64:	1809883a 	mov	r4,r3
   1ea68:	00461000 	call	46100 <fprintf>
   1ea6c:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)(a[8]*2) * a[9];
   1ea70:	e0be8717 	ldw	r2,-1508(fp)
   1ea74:	10800804 	addi	r2,r2,32
   1ea78:	10800017 	ldw	r2,0(r2)
   1ea7c:	1085883a 	add	r2,r2,r2
   1ea80:	e0bfa215 	stw	r2,-376(fp)
   1ea84:	e03fa315 	stw	zero,-372(fp)
   1ea88:	e0be8717 	ldw	r2,-1508(fp)
   1ea8c:	10800904 	addi	r2,r2,36
   1ea90:	10800017 	ldw	r2,0(r2)
   1ea94:	e0bfa415 	stw	r2,-368(fp)
   1ea98:	e03fa515 	stw	zero,-364(fp)
   1ea9c:	e1bfa417 	ldw	r6,-368(fp)
   1eaa0:	e1ffa517 	ldw	r7,-364(fp)
   1eaa4:	e13fa217 	ldw	r4,-376(fp)
   1eaa8:	e17fa317 	ldw	r5,-372(fp)
   1eaac:	00438e00 	call	438e0 <__muldi3>
   1eab0:	1009883a 	mov	r4,r2
   1eab4:	180b883a 	mov	r5,r3
   1eab8:	200f883a 	mov	r7,r4
   1eabc:	2811883a 	mov	r8,r5
   1eac0:	e13e6717 	ldw	r4,-1636(fp)
   1eac4:	e17e6817 	ldw	r5,-1632(fp)
   1eac8:	21c5883a 	add	r2,r4,r7
   1eacc:	110d803a 	cmpltu	r6,r2,r4
   1ead0:	2a07883a 	add	r3,r5,r8
   1ead4:	30c9883a 	add	r4,r6,r3
   1ead8:	2007883a 	mov	r3,r4
   1eadc:	e0be6715 	stw	r2,-1636(fp)
   1eae0:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 58);
   1eae4:	e0be6817 	ldw	r2,-1632(fp)
   1eae8:	1004d6ba 	srli	r2,r2,26
   1eaec:	e0bfa615 	stw	r2,-360(fp)
   1eaf0:	e03fa715 	stw	zero,-356(fp)
   1eaf4:	e13fa617 	ldw	r4,-360(fp)
   1eaf8:	e1bfa717 	ldw	r6,-356(fp)
   1eafc:	2184b03a 	or	r2,r4,r6
   1eb00:	1004c03a 	cmpne	r2,r2,zero
   1eb04:	10803fcc 	andi	r2,r2,255
   1eb08:	10000d26 	beq	r2,zero,1eb40 <secp256k1_fe_sqr_inner+0x3164>
   1eb0c:	d0a01617 	ldw	r2,-32680(gp)
   1eb10:	10c00317 	ldw	r3,12(r2)
   1eb14:	00800174 	movhi	r2,5
   1eb18:	10946204 	addi	r2,r2,20872
   1eb1c:	d8800015 	stw	r2,0(sp)
   1eb20:	01c0efc4 	movi	r7,959
   1eb24:	01800174 	movhi	r6,5
   1eb28:	3191dd04 	addi	r6,r6,18292
   1eb2c:	01400174 	movhi	r5,5
   1eb30:	2951e804 	addi	r5,r5,18336
   1eb34:	1809883a 	mov	r4,r3
   1eb38:	00461000 	call	46100 <fprintf>
   1eb3c:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    u7 = d & M; d >>= 26; c += u7 * R0;
   1eb40:	e0be6417 	ldw	r2,-1648(fp)
   1eb44:	e0bfa815 	stw	r2,-352(fp)
   1eb48:	e03fa915 	stw	zero,-348(fp)
   1eb4c:	e0be6717 	ldw	r2,-1636(fp)
   1eb50:	e1ffa817 	ldw	r7,-352(fp)
   1eb54:	11c4703a 	and	r2,r2,r7
   1eb58:	e0be8115 	stw	r2,-1532(fp)
   1eb5c:	e0be6817 	ldw	r2,-1632(fp)
   1eb60:	e0ffa917 	ldw	r3,-348(fp)
   1eb64:	10c4703a 	and	r2,r2,r3
   1eb68:	e0be8215 	stw	r2,-1528(fp)
   1eb6c:	e0be6817 	ldw	r2,-1632(fp)
   1eb70:	100691ba 	slli	r3,r2,6
   1eb74:	e0be6717 	ldw	r2,-1636(fp)
   1eb78:	1004d6ba 	srli	r2,r2,26
   1eb7c:	10c4b03a 	or	r2,r2,r3
   1eb80:	e0be6715 	stw	r2,-1636(fp)
   1eb84:	e0be6817 	ldw	r2,-1632(fp)
   1eb88:	1004d6ba 	srli	r2,r2,26
   1eb8c:	e0be6815 	stw	r2,-1632(fp)
   1eb90:	e0be6517 	ldw	r2,-1644(fp)
   1eb94:	e0bfaa15 	stw	r2,-344(fp)
   1eb98:	e03fab15 	stw	zero,-340(fp)
   1eb9c:	e1be8117 	ldw	r6,-1532(fp)
   1eba0:	e1fe8217 	ldw	r7,-1528(fp)
   1eba4:	e13faa17 	ldw	r4,-344(fp)
   1eba8:	e17fab17 	ldw	r5,-340(fp)
   1ebac:	00438e00 	call	438e0 <__muldi3>
   1ebb0:	1009883a 	mov	r4,r2
   1ebb4:	180b883a 	mov	r5,r3
   1ebb8:	200f883a 	mov	r7,r4
   1ebbc:	2811883a 	mov	r8,r5
   1ebc0:	e13e6a17 	ldw	r4,-1624(fp)
   1ebc4:	e17e6b17 	ldw	r5,-1620(fp)
   1ebc8:	21c5883a 	add	r2,r4,r7
   1ebcc:	110d803a 	cmpltu	r6,r2,r4
   1ebd0:	2a07883a 	add	r3,r5,r8
   1ebd4:	30c9883a 	add	r4,r6,r3
   1ebd8:	2007883a 	mov	r3,r4
   1ebdc:	e0be6a15 	stw	r2,-1624(fp)
   1ebe0:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u7, 26);
   1ebe4:	e0be8217 	ldw	r2,-1528(fp)
   1ebe8:	100691ba 	slli	r3,r2,6
   1ebec:	e0be8117 	ldw	r2,-1532(fp)
   1ebf0:	1004d6ba 	srli	r2,r2,26
   1ebf4:	e0bfac15 	stw	r2,-336(fp)
   1ebf8:	e13fac17 	ldw	r4,-336(fp)
   1ebfc:	1906b03a 	or	r3,r3,r4
   1ec00:	e0ffac15 	stw	r3,-336(fp)
   1ec04:	e0be8217 	ldw	r2,-1528(fp)
   1ec08:	1004d6ba 	srli	r2,r2,26
   1ec0c:	e0bfad15 	stw	r2,-332(fp)
   1ec10:	e1bfac17 	ldw	r6,-336(fp)
   1ec14:	e1ffad17 	ldw	r7,-332(fp)
   1ec18:	31c4b03a 	or	r2,r6,r7
   1ec1c:	1004c03a 	cmpne	r2,r2,zero
   1ec20:	10803fcc 	andi	r2,r2,255
   1ec24:	10000d26 	beq	r2,zero,1ec5c <secp256k1_fe_sqr_inner+0x3280>
   1ec28:	d0a01617 	ldw	r2,-32680(gp)
   1ec2c:	10c00317 	ldw	r3,12(r2)
   1ec30:	00800174 	movhi	r2,5
   1ec34:	10946d04 	addi	r2,r2,20916
   1ec38:	d8800015 	stw	r2,0(sp)
   1ec3c:	01c0f084 	movi	r7,962
   1ec40:	01800174 	movhi	r6,5
   1ec44:	3191dd04 	addi	r6,r6,18292
   1ec48:	01400174 	movhi	r5,5
   1ec4c:	2951e804 	addi	r5,r5,18336
   1ec50:	1809883a 	mov	r4,r3
   1ec54:	00461000 	call	46100 <fprintf>
   1ec58:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 32);
   1ec5c:	e0be6817 	ldw	r2,-1632(fp)
   1ec60:	1004d83a 	srl	r2,r2,zero
   1ec64:	e0bfae15 	stw	r2,-328(fp)
   1ec68:	e03faf15 	stw	zero,-324(fp)
   1ec6c:	e0ffae17 	ldw	r3,-328(fp)
   1ec70:	e13faf17 	ldw	r4,-324(fp)
   1ec74:	1904b03a 	or	r2,r3,r4
   1ec78:	1004c03a 	cmpne	r2,r2,zero
   1ec7c:	10803fcc 	andi	r2,r2,255
   1ec80:	10000d26 	beq	r2,zero,1ecb8 <secp256k1_fe_sqr_inner+0x32dc>
   1ec84:	d0a01617 	ldw	r2,-32680(gp)
   1ec88:	10c00317 	ldw	r3,12(r2)
   1ec8c:	00800174 	movhi	r2,5
   1ec90:	10947804 	addi	r2,r2,20960
   1ec94:	d8800015 	stw	r2,0(sp)
   1ec98:	01c0f0c4 	movi	r7,963
   1ec9c:	01800174 	movhi	r6,5
   1eca0:	3191dd04 	addi	r6,r6,18292
   1eca4:	01400174 	movhi	r5,5
   1eca8:	2951e804 	addi	r5,r5,18336
   1ecac:	1809883a 	mov	r4,r3
   1ecb0:	00461000 	call	46100 <fprintf>
   1ecb4:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x800001703FFFC2F7ULL);
   1ecb8:	01000044 	movi	r4,1
   1ecbc:	e0fe6b17 	ldw	r3,-1620(fp)
   1ecc0:	00a00034 	movhi	r2,32768
   1ecc4:	10805c04 	addi	r2,r2,368
   1ecc8:	10c00936 	bltu	r2,r3,1ecf0 <secp256k1_fe_sqr_inner+0x3314>
   1eccc:	e0fe6b17 	ldw	r3,-1620(fp)
   1ecd0:	00a00034 	movhi	r2,32768
   1ecd4:	10805c04 	addi	r2,r2,368
   1ecd8:	1880041e 	bne	r3,r2,1ecec <secp256k1_fe_sqr_inner+0x3310>
   1ecdc:	e0fe6a17 	ldw	r3,-1624(fp)
   1ece0:	00900034 	movhi	r2,16384
   1ece4:	10b0bdc4 	addi	r2,r2,-15625
   1ece8:	10c00136 	bltu	r2,r3,1ecf0 <secp256k1_fe_sqr_inner+0x3314>
   1ecec:	0009883a 	mov	r4,zero
   1ecf0:	20803fcc 	andi	r2,r4,255
   1ecf4:	10000d26 	beq	r2,zero,1ed2c <secp256k1_fe_sqr_inner+0x3350>
   1ecf8:	d0a01617 	ldw	r2,-32680(gp)
   1ecfc:	10c00317 	ldw	r3,12(r2)
   1ed00:	00800174 	movhi	r2,5
   1ed04:	10948304 	addi	r2,r2,21004
   1ed08:	d8800015 	stw	r2,0(sp)
   1ed0c:	01c0f144 	movi	r7,965
   1ed10:	01800174 	movhi	r6,5
   1ed14:	3191dd04 	addi	r6,r6,18292
   1ed18:	01400174 	movhi	r5,5
   1ed1c:	2951e804 	addi	r5,r5,18336
   1ed20:	1809883a 	mov	r4,r3
   1ed24:	00461000 	call	46100 <fprintf>
   1ed28:	0045fd40 	call	45fd4 <abort>
    /* [d u7 0 0 0 0 0 0 0 t9 0 c-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    t7 = c & M; c >>= 26; c += u7 * R1;
   1ed2c:	e0fe6a17 	ldw	r3,-1624(fp)
   1ed30:	e0be6417 	ldw	r2,-1648(fp)
   1ed34:	1884703a 	and	r2,r3,r2
   1ed38:	e0be8315 	stw	r2,-1524(fp)
   1ed3c:	e0be6b17 	ldw	r2,-1620(fp)
   1ed40:	100691ba 	slli	r3,r2,6
   1ed44:	e0be6a17 	ldw	r2,-1624(fp)
   1ed48:	1004d6ba 	srli	r2,r2,26
   1ed4c:	10c4b03a 	or	r2,r2,r3
   1ed50:	e0be6a15 	stw	r2,-1624(fp)
   1ed54:	e0be6b17 	ldw	r2,-1620(fp)
   1ed58:	1004d6ba 	srli	r2,r2,26
   1ed5c:	e0be6b15 	stw	r2,-1620(fp)
   1ed60:	e0be6617 	ldw	r2,-1640(fp)
   1ed64:	e0bfb015 	stw	r2,-320(fp)
   1ed68:	e03fb115 	stw	zero,-316(fp)
   1ed6c:	e1be8117 	ldw	r6,-1532(fp)
   1ed70:	e1fe8217 	ldw	r7,-1528(fp)
   1ed74:	e13fb017 	ldw	r4,-320(fp)
   1ed78:	e17fb117 	ldw	r5,-316(fp)
   1ed7c:	00438e00 	call	438e0 <__muldi3>
   1ed80:	1009883a 	mov	r4,r2
   1ed84:	180b883a 	mov	r5,r3
   1ed88:	200f883a 	mov	r7,r4
   1ed8c:	2811883a 	mov	r8,r5
   1ed90:	e13e6a17 	ldw	r4,-1624(fp)
   1ed94:	e17e6b17 	ldw	r5,-1620(fp)
   1ed98:	21c5883a 	add	r2,r4,r7
   1ed9c:	110d803a 	cmpltu	r6,r2,r4
   1eda0:	2a07883a 	add	r3,r5,r8
   1eda4:	30c9883a 	add	r4,r6,r3
   1eda8:	2007883a 	mov	r3,r4
   1edac:	e0be6a15 	stw	r2,-1624(fp)
   1edb0:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(t7, 26);
   1edb4:	e0be8317 	ldw	r2,-1524(fp)
   1edb8:	1004d6ba 	srli	r2,r2,26
   1edbc:	1004c03a 	cmpne	r2,r2,zero
   1edc0:	10803fcc 	andi	r2,r2,255
   1edc4:	10000d26 	beq	r2,zero,1edfc <secp256k1_fe_sqr_inner+0x3420>
   1edc8:	d0a01617 	ldw	r2,-32680(gp)
   1edcc:	10c00317 	ldw	r3,12(r2)
   1edd0:	00800174 	movhi	r2,5
   1edd4:	10949004 	addi	r2,r2,21056
   1edd8:	d8800015 	stw	r2,0(sp)
   1eddc:	01c0f204 	movi	r7,968
   1ede0:	01800174 	movhi	r6,5
   1ede4:	3191dd04 	addi	r6,r6,18292
   1ede8:	01400174 	movhi	r5,5
   1edec:	2951e804 	addi	r5,r5,18336
   1edf0:	1809883a 	mov	r4,r3
   1edf4:	00461000 	call	46100 <fprintf>
   1edf8:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 38);
   1edfc:	e0be6b17 	ldw	r2,-1620(fp)
   1ee00:	1004d1ba 	srli	r2,r2,6
   1ee04:	e0bfb215 	stw	r2,-312(fp)
   1ee08:	e03fb315 	stw	zero,-308(fp)
   1ee0c:	e1bfb217 	ldw	r6,-312(fp)
   1ee10:	e1ffb317 	ldw	r7,-308(fp)
   1ee14:	31c4b03a 	or	r2,r6,r7
   1ee18:	1004c03a 	cmpne	r2,r2,zero
   1ee1c:	10803fcc 	andi	r2,r2,255
   1ee20:	10000d26 	beq	r2,zero,1ee58 <secp256k1_fe_sqr_inner+0x347c>
   1ee24:	d0a01617 	ldw	r2,-32680(gp)
   1ee28:	10c00317 	ldw	r3,12(r2)
   1ee2c:	00800174 	movhi	r2,5
   1ee30:	1093a504 	addi	r2,r2,20116
   1ee34:	d8800015 	stw	r2,0(sp)
   1ee38:	01c0f244 	movi	r7,969
   1ee3c:	01800174 	movhi	r6,5
   1ee40:	3191dd04 	addi	r6,r6,18292
   1ee44:	01400174 	movhi	r5,5
   1ee48:	2951e804 	addi	r5,r5,18336
   1ee4c:	1809883a 	mov	r4,r3
   1ee50:	00461000 	call	46100 <fprintf>
   1ee54:	0045fd40 	call	45fd4 <abort>
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[8]
   1ee58:	e0be8717 	ldw	r2,-1508(fp)
   1ee5c:	10800017 	ldw	r2,0(r2)
   1ee60:	1085883a 	add	r2,r2,r2
   1ee64:	e0bfb415 	stw	r2,-304(fp)
   1ee68:	e03fb515 	stw	zero,-300(fp)
   1ee6c:	e0be8717 	ldw	r2,-1508(fp)
   1ee70:	10800804 	addi	r2,r2,32
   1ee74:	10800017 	ldw	r2,0(r2)
   1ee78:	e0bfb615 	stw	r2,-296(fp)
   1ee7c:	e03fb715 	stw	zero,-292(fp)
   1ee80:	e1bfb617 	ldw	r6,-296(fp)
   1ee84:	e1ffb717 	ldw	r7,-292(fp)
   1ee88:	e13fb417 	ldw	r4,-304(fp)
   1ee8c:	e17fb517 	ldw	r5,-300(fp)
   1ee90:	00438e00 	call	438e0 <__muldi3>
   1ee94:	1009883a 	mov	r4,r2
   1ee98:	180b883a 	mov	r5,r3
   1ee9c:	2021883a 	mov	r16,r4
   1eea0:	2823883a 	mov	r17,r5
       + (uint64_t)(a[1]*2) * a[7]
   1eea4:	e0be8717 	ldw	r2,-1508(fp)
   1eea8:	10800104 	addi	r2,r2,4
   1eeac:	10800017 	ldw	r2,0(r2)
   1eeb0:	1085883a 	add	r2,r2,r2
   1eeb4:	e0bfb815 	stw	r2,-288(fp)
   1eeb8:	e03fb915 	stw	zero,-284(fp)
   1eebc:	e0be8717 	ldw	r2,-1508(fp)
   1eec0:	10800704 	addi	r2,r2,28
   1eec4:	10800017 	ldw	r2,0(r2)
   1eec8:	e0bfba15 	stw	r2,-280(fp)
   1eecc:	e03fbb15 	stw	zero,-276(fp)
   1eed0:	e1bfba17 	ldw	r6,-280(fp)
   1eed4:	e1ffbb17 	ldw	r7,-276(fp)
   1eed8:	e13fb817 	ldw	r4,-288(fp)
   1eedc:	e17fb917 	ldw	r5,-284(fp)
   1eee0:	00438e00 	call	438e0 <__muldi3>
   1eee4:	100f883a 	mov	r7,r2
   1eee8:	1811883a 	mov	r8,r3
   1eeec:	380b883a 	mov	r5,r7
   1eef0:	400d883a 	mov	r6,r8
   1eef4:	8145883a 	add	r2,r16,r5
   1eef8:	1409803a 	cmpltu	r4,r2,r16
   1eefc:	8987883a 	add	r3,r17,r6
   1ef00:	20c9883a 	add	r4,r4,r3
   1ef04:	2007883a 	mov	r3,r4
   1ef08:	1025883a 	mov	r18,r2
   1ef0c:	1827883a 	mov	r19,r3
       + (uint64_t)(a[2]*2) * a[6]
       + (uint64_t)(a[3]*2) * a[5]
   1ef10:	e0be8717 	ldw	r2,-1508(fp)
   1ef14:	10800304 	addi	r2,r2,12
   1ef18:	10800017 	ldw	r2,0(r2)
   1ef1c:	1085883a 	add	r2,r2,r2
   1ef20:	e0bfbc15 	stw	r2,-272(fp)
   1ef24:	e03fbd15 	stw	zero,-268(fp)
   1ef28:	e0be8717 	ldw	r2,-1508(fp)
   1ef2c:	10800504 	addi	r2,r2,20
   1ef30:	10800017 	ldw	r2,0(r2)
   1ef34:	e0bfbe15 	stw	r2,-264(fp)
   1ef38:	e03fbf15 	stw	zero,-260(fp)
   1ef3c:	e1bfbe17 	ldw	r6,-264(fp)
   1ef40:	e1ffbf17 	ldw	r7,-260(fp)
   1ef44:	e13fbc17 	ldw	r4,-272(fp)
   1ef48:	e17fbd17 	ldw	r5,-268(fp)
   1ef4c:	00438e00 	call	438e0 <__muldi3>
   1ef50:	1009883a 	mov	r4,r2
   1ef54:	180b883a 	mov	r5,r3
   1ef58:	2021883a 	mov	r16,r4
   1ef5c:	2823883a 	mov	r17,r5
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[8]
       + (uint64_t)(a[1]*2) * a[7]
       + (uint64_t)(a[2]*2) * a[6]
   1ef60:	e0be8717 	ldw	r2,-1508(fp)
   1ef64:	10800204 	addi	r2,r2,8
   1ef68:	10800017 	ldw	r2,0(r2)
   1ef6c:	1085883a 	add	r2,r2,r2
   1ef70:	e0bfc015 	stw	r2,-256(fp)
   1ef74:	e03fc115 	stw	zero,-252(fp)
   1ef78:	e0be8717 	ldw	r2,-1508(fp)
   1ef7c:	10800604 	addi	r2,r2,24
   1ef80:	10800017 	ldw	r2,0(r2)
   1ef84:	e0bfc215 	stw	r2,-248(fp)
   1ef88:	e03fc315 	stw	zero,-244(fp)
   1ef8c:	e1bfc217 	ldw	r6,-248(fp)
   1ef90:	e1ffc317 	ldw	r7,-244(fp)
   1ef94:	e13fc017 	ldw	r4,-256(fp)
   1ef98:	e17fc117 	ldw	r5,-252(fp)
   1ef9c:	00438e00 	call	438e0 <__muldi3>
   1efa0:	100f883a 	mov	r7,r2
   1efa4:	1811883a 	mov	r8,r3
   1efa8:	380b883a 	mov	r5,r7
   1efac:	400d883a 	mov	r6,r8
       + (uint64_t)(a[3]*2) * a[5]
   1efb0:	8145883a 	add	r2,r16,r5
   1efb4:	1409803a 	cmpltu	r4,r2,r16
   1efb8:	8987883a 	add	r3,r17,r6
   1efbc:	20c9883a 	add	r4,r4,r3
   1efc0:	2007883a 	mov	r3,r4
   1efc4:	100b883a 	mov	r5,r2
   1efc8:	180d883a 	mov	r6,r3
   1efcc:	9145883a 	add	r2,r18,r5
   1efd0:	1489803a 	cmpltu	r4,r2,r18
   1efd4:	9987883a 	add	r3,r19,r6
   1efd8:	20c9883a 	add	r4,r4,r3
   1efdc:	2007883a 	mov	r3,r4
   1efe0:	1021883a 	mov	r16,r2
   1efe4:	1823883a 	mov	r17,r3
       + (uint64_t)a[4] * a[4];
   1efe8:	e0be8717 	ldw	r2,-1508(fp)
   1efec:	10800404 	addi	r2,r2,16
   1eff0:	10800017 	ldw	r2,0(r2)
   1eff4:	e0bfc415 	stw	r2,-240(fp)
   1eff8:	e03fc515 	stw	zero,-236(fp)
   1effc:	e0be8717 	ldw	r2,-1508(fp)
   1f000:	10800404 	addi	r2,r2,16
   1f004:	10800017 	ldw	r2,0(r2)
   1f008:	e0bfc615 	stw	r2,-232(fp)
   1f00c:	e03fc715 	stw	zero,-228(fp)
   1f010:	e1bfc617 	ldw	r6,-232(fp)
   1f014:	e1ffc717 	ldw	r7,-228(fp)
   1f018:	e13fc417 	ldw	r4,-240(fp)
   1f01c:	e17fc517 	ldw	r5,-236(fp)
   1f020:	00438e00 	call	438e0 <__muldi3>
   1f024:	100f883a 	mov	r7,r2
   1f028:	1811883a 	mov	r8,r3
   1f02c:	380b883a 	mov	r5,r7
   1f030:	400d883a 	mov	r6,r8
   1f034:	8145883a 	add	r2,r16,r5
   1f038:	1409803a 	cmpltu	r4,r2,r16
   1f03c:	8987883a 	add	r3,r17,r6
   1f040:	20c9883a 	add	r4,r4,r3
   1f044:	2007883a 	mov	r3,r4
   1f048:	100f883a 	mov	r7,r2
   1f04c:	1811883a 	mov	r8,r3
    VERIFY_BITS(t7, 26);
    VERIFY_BITS(c, 38);
    /* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */

    c += (uint64_t)(a[0]*2) * a[8]
   1f050:	e13e6a17 	ldw	r4,-1624(fp)
   1f054:	e17e6b17 	ldw	r5,-1620(fp)
   1f058:	21c5883a 	add	r2,r4,r7
   1f05c:	110d803a 	cmpltu	r6,r2,r4
   1f060:	2a07883a 	add	r3,r5,r8
   1f064:	30c9883a 	add	r4,r6,r3
   1f068:	2007883a 	mov	r3,r4
   1f06c:	e0be6a15 	stw	r2,-1624(fp)
   1f070:	e0fe6b15 	stw	r3,-1620(fp)
       + (uint64_t)(a[1]*2) * a[7]
       + (uint64_t)(a[2]*2) * a[6]
       + (uint64_t)(a[3]*2) * a[5]
       + (uint64_t)a[4] * a[4];
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x9000007B80000008ULL);
   1f074:	01000044 	movi	r4,1
   1f078:	e0fe6b17 	ldw	r3,-1620(fp)
   1f07c:	00a40034 	movhi	r2,36864
   1f080:	10801ec4 	addi	r2,r2,123
   1f084:	10c00936 	bltu	r2,r3,1f0ac <secp256k1_fe_sqr_inner+0x36d0>
   1f088:	e0fe6b17 	ldw	r3,-1620(fp)
   1f08c:	00a40034 	movhi	r2,36864
   1f090:	10801ec4 	addi	r2,r2,123
   1f094:	1880041e 	bne	r3,r2,1f0a8 <secp256k1_fe_sqr_inner+0x36cc>
   1f098:	e0fe6a17 	ldw	r3,-1624(fp)
   1f09c:	00a00034 	movhi	r2,32768
   1f0a0:	10800204 	addi	r2,r2,8
   1f0a4:	10c00136 	bltu	r2,r3,1f0ac <secp256k1_fe_sqr_inner+0x36d0>
   1f0a8:	0009883a 	mov	r4,zero
   1f0ac:	20803fcc 	andi	r2,r4,255
   1f0b0:	10000d26 	beq	r2,zero,1f0e8 <secp256k1_fe_sqr_inner+0x370c>
   1f0b4:	d0a01617 	ldw	r2,-32680(gp)
   1f0b8:	10c00317 	ldw	r3,12(r2)
   1f0bc:	00800174 	movhi	r2,5
   1f0c0:	10949b04 	addi	r2,r2,21100
   1f0c4:	d8800015 	stw	r2,0(sp)
   1f0c8:	01c0f4c4 	movi	r7,979
   1f0cc:	01800174 	movhi	r6,5
   1f0d0:	3191dd04 	addi	r6,r6,18292
   1f0d4:	01400174 	movhi	r5,5
   1f0d8:	2951e804 	addi	r5,r5,18336
   1f0dc:	1809883a 	mov	r4,r3
   1f0e0:	00461000 	call	46100 <fprintf>
   1f0e4:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d += (uint64_t)a[9] * a[9];
   1f0e8:	e0be8717 	ldw	r2,-1508(fp)
   1f0ec:	10800904 	addi	r2,r2,36
   1f0f0:	10800017 	ldw	r2,0(r2)
   1f0f4:	e0bfc815 	stw	r2,-224(fp)
   1f0f8:	e03fc915 	stw	zero,-220(fp)
   1f0fc:	e0be8717 	ldw	r2,-1508(fp)
   1f100:	10800904 	addi	r2,r2,36
   1f104:	10800017 	ldw	r2,0(r2)
   1f108:	e0bfca15 	stw	r2,-216(fp)
   1f10c:	e03fcb15 	stw	zero,-212(fp)
   1f110:	e1bfca17 	ldw	r6,-216(fp)
   1f114:	e1ffcb17 	ldw	r7,-212(fp)
   1f118:	e13fc817 	ldw	r4,-224(fp)
   1f11c:	e17fc917 	ldw	r5,-220(fp)
   1f120:	00438e00 	call	438e0 <__muldi3>
   1f124:	1009883a 	mov	r4,r2
   1f128:	180b883a 	mov	r5,r3
   1f12c:	200f883a 	mov	r7,r4
   1f130:	2811883a 	mov	r8,r5
   1f134:	e13e6717 	ldw	r4,-1636(fp)
   1f138:	e17e6817 	ldw	r5,-1632(fp)
   1f13c:	21c5883a 	add	r2,r4,r7
   1f140:	110d803a 	cmpltu	r6,r2,r4
   1f144:	2a07883a 	add	r3,r5,r8
   1f148:	30c9883a 	add	r4,r6,r3
   1f14c:	2007883a 	mov	r3,r4
   1f150:	e0be6715 	stw	r2,-1636(fp)
   1f154:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 57);
   1f158:	e0be6817 	ldw	r2,-1632(fp)
   1f15c:	1004d67a 	srli	r2,r2,25
   1f160:	e0bfcc15 	stw	r2,-208(fp)
   1f164:	e03fcd15 	stw	zero,-204(fp)
   1f168:	e0ffcc17 	ldw	r3,-208(fp)
   1f16c:	e13fcd17 	ldw	r4,-204(fp)
   1f170:	1904b03a 	or	r2,r3,r4
   1f174:	1004c03a 	cmpne	r2,r2,zero
   1f178:	10803fcc 	andi	r2,r2,255
   1f17c:	10000d26 	beq	r2,zero,1f1b4 <secp256k1_fe_sqr_inner+0x37d8>
   1f180:	d0a01617 	ldw	r2,-32680(gp)
   1f184:	10c00317 	ldw	r3,12(r2)
   1f188:	00800174 	movhi	r2,5
   1f18c:	1094a804 	addi	r2,r2,21152
   1f190:	d8800015 	stw	r2,0(sp)
   1f194:	01c0f584 	movi	r7,982
   1f198:	01800174 	movhi	r6,5
   1f19c:	3191dd04 	addi	r6,r6,18292
   1f1a0:	01400174 	movhi	r5,5
   1f1a4:	2951e804 	addi	r5,r5,18336
   1f1a8:	1809883a 	mov	r4,r3
   1f1ac:	00461000 	call	46100 <fprintf>
   1f1b0:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    u8 = d & M; d >>= 26; c += u8 * R0;
   1f1b4:	e0be6417 	ldw	r2,-1648(fp)
   1f1b8:	e0bfce15 	stw	r2,-200(fp)
   1f1bc:	e03fcf15 	stw	zero,-196(fp)
   1f1c0:	e0be6717 	ldw	r2,-1636(fp)
   1f1c4:	e1bfce17 	ldw	r6,-200(fp)
   1f1c8:	1184703a 	and	r2,r2,r6
   1f1cc:	e0be8415 	stw	r2,-1520(fp)
   1f1d0:	e0be6817 	ldw	r2,-1632(fp)
   1f1d4:	e1ffcf17 	ldw	r7,-196(fp)
   1f1d8:	11c4703a 	and	r2,r2,r7
   1f1dc:	e0be8515 	stw	r2,-1516(fp)
   1f1e0:	e0be6817 	ldw	r2,-1632(fp)
   1f1e4:	100691ba 	slli	r3,r2,6
   1f1e8:	e0be6717 	ldw	r2,-1636(fp)
   1f1ec:	1004d6ba 	srli	r2,r2,26
   1f1f0:	10c4b03a 	or	r2,r2,r3
   1f1f4:	e0be6715 	stw	r2,-1636(fp)
   1f1f8:	e0be6817 	ldw	r2,-1632(fp)
   1f1fc:	1004d6ba 	srli	r2,r2,26
   1f200:	e0be6815 	stw	r2,-1632(fp)
   1f204:	e0be6517 	ldw	r2,-1644(fp)
   1f208:	e0bfd015 	stw	r2,-192(fp)
   1f20c:	e03fd115 	stw	zero,-188(fp)
   1f210:	e1be8417 	ldw	r6,-1520(fp)
   1f214:	e1fe8517 	ldw	r7,-1516(fp)
   1f218:	e13fd017 	ldw	r4,-192(fp)
   1f21c:	e17fd117 	ldw	r5,-188(fp)
   1f220:	00438e00 	call	438e0 <__muldi3>
   1f224:	1009883a 	mov	r4,r2
   1f228:	180b883a 	mov	r5,r3
   1f22c:	200f883a 	mov	r7,r4
   1f230:	2811883a 	mov	r8,r5
   1f234:	e13e6a17 	ldw	r4,-1624(fp)
   1f238:	e17e6b17 	ldw	r5,-1620(fp)
   1f23c:	21c5883a 	add	r2,r4,r7
   1f240:	110d803a 	cmpltu	r6,r2,r4
   1f244:	2a07883a 	add	r3,r5,r8
   1f248:	30c9883a 	add	r4,r6,r3
   1f24c:	2007883a 	mov	r3,r4
   1f250:	e0be6a15 	stw	r2,-1624(fp)
   1f254:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(u8, 26);
   1f258:	e0be8517 	ldw	r2,-1516(fp)
   1f25c:	100691ba 	slli	r3,r2,6
   1f260:	e0be8417 	ldw	r2,-1520(fp)
   1f264:	1004d6ba 	srli	r2,r2,26
   1f268:	e0bfd215 	stw	r2,-184(fp)
   1f26c:	e0bfd217 	ldw	r2,-184(fp)
   1f270:	1886b03a 	or	r3,r3,r2
   1f274:	e0ffd215 	stw	r3,-184(fp)
   1f278:	e0be8517 	ldw	r2,-1516(fp)
   1f27c:	1004d6ba 	srli	r2,r2,26
   1f280:	e0bfd315 	stw	r2,-180(fp)
   1f284:	e0ffd217 	ldw	r3,-184(fp)
   1f288:	e13fd317 	ldw	r4,-180(fp)
   1f28c:	1904b03a 	or	r2,r3,r4
   1f290:	1004c03a 	cmpne	r2,r2,zero
   1f294:	10803fcc 	andi	r2,r2,255
   1f298:	10000d26 	beq	r2,zero,1f2d0 <secp256k1_fe_sqr_inner+0x38f4>
   1f29c:	d0a01617 	ldw	r2,-32680(gp)
   1f2a0:	10c00317 	ldw	r3,12(r2)
   1f2a4:	00800174 	movhi	r2,5
   1f2a8:	1094b304 	addi	r2,r2,21196
   1f2ac:	d8800015 	stw	r2,0(sp)
   1f2b0:	01c0f644 	movi	r7,985
   1f2b4:	01800174 	movhi	r6,5
   1f2b8:	3191dd04 	addi	r6,r6,18292
   1f2bc:	01400174 	movhi	r5,5
   1f2c0:	2951e804 	addi	r5,r5,18336
   1f2c4:	1809883a 	mov	r4,r3
   1f2c8:	00461000 	call	46100 <fprintf>
   1f2cc:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 31);
   1f2d0:	e0be6817 	ldw	r2,-1632(fp)
   1f2d4:	1006907a 	slli	r3,r2,1
   1f2d8:	e0be6717 	ldw	r2,-1636(fp)
   1f2dc:	1004d7fa 	srli	r2,r2,31
   1f2e0:	e0bfd415 	stw	r2,-176(fp)
   1f2e4:	e1bfd417 	ldw	r6,-176(fp)
   1f2e8:	1986b03a 	or	r3,r3,r6
   1f2ec:	e0ffd415 	stw	r3,-176(fp)
   1f2f0:	e0be6817 	ldw	r2,-1632(fp)
   1f2f4:	1004d7fa 	srli	r2,r2,31
   1f2f8:	e0bfd515 	stw	r2,-172(fp)
   1f2fc:	e1ffd417 	ldw	r7,-176(fp)
   1f300:	e0ffd517 	ldw	r3,-172(fp)
   1f304:	38c4b03a 	or	r2,r7,r3
   1f308:	1004c03a 	cmpne	r2,r2,zero
   1f30c:	10803fcc 	andi	r2,r2,255
   1f310:	10000d26 	beq	r2,zero,1f348 <secp256k1_fe_sqr_inner+0x396c>
   1f314:	d0a01617 	ldw	r2,-32680(gp)
   1f318:	10c00317 	ldw	r3,12(r2)
   1f31c:	00800174 	movhi	r2,5
   1f320:	1094be04 	addi	r2,r2,21240
   1f324:	d8800015 	stw	r2,0(sp)
   1f328:	01c0f684 	movi	r7,986
   1f32c:	01800174 	movhi	r6,5
   1f330:	3191dd04 	addi	r6,r6,18292
   1f334:	01400174 	movhi	r5,5
   1f338:	2951e804 	addi	r5,r5,18336
   1f33c:	1809883a 	mov	r4,r3
   1f340:	00461000 	call	46100 <fprintf>
   1f344:	0045fd40 	call	45fd4 <abort>
    /* VERIFY_BITS(c, 64); */
    VERIFY_CHECK(c <= 0x9000016FBFFFC2F8ULL);
   1f348:	01000044 	movi	r4,1
   1f34c:	e0fe6b17 	ldw	r3,-1620(fp)
   1f350:	00a40034 	movhi	r2,36864
   1f354:	10805bc4 	addi	r2,r2,367
   1f358:	10c00936 	bltu	r2,r3,1f380 <secp256k1_fe_sqr_inner+0x39a4>
   1f35c:	e0fe6b17 	ldw	r3,-1620(fp)
   1f360:	00a40034 	movhi	r2,36864
   1f364:	10805bc4 	addi	r2,r2,367
   1f368:	1880041e 	bne	r3,r2,1f37c <secp256k1_fe_sqr_inner+0x39a0>
   1f36c:	e0fe6a17 	ldw	r3,-1624(fp)
   1f370:	00b00034 	movhi	r2,49152
   1f374:	10b0be04 	addi	r2,r2,-15624
   1f378:	10c00136 	bltu	r2,r3,1f380 <secp256k1_fe_sqr_inner+0x39a4>
   1f37c:	0009883a 	mov	r4,zero
   1f380:	20803fcc 	andi	r2,r4,255
   1f384:	10000d26 	beq	r2,zero,1f3bc <secp256k1_fe_sqr_inner+0x39e0>
   1f388:	d0a01617 	ldw	r2,-32680(gp)
   1f38c:	10c00317 	ldw	r3,12(r2)
   1f390:	00800174 	movhi	r2,5
   1f394:	1094c904 	addi	r2,r2,21284
   1f398:	d8800015 	stw	r2,0(sp)
   1f39c:	01c0f704 	movi	r7,988
   1f3a0:	01800174 	movhi	r6,5
   1f3a4:	3191dd04 	addi	r6,r6,18292
   1f3a8:	01400174 	movhi	r5,5
   1f3ac:	2951e804 	addi	r5,r5,18336
   1f3b0:	1809883a 	mov	r4,r3
   1f3b4:	00461000 	call	46100 <fprintf>
   1f3b8:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    r[3] = t3;
   1f3bc:	e0be8617 	ldw	r2,-1512(fp)
   1f3c0:	10c00304 	addi	r3,r2,12
   1f3c4:	e0be7717 	ldw	r2,-1572(fp)
   1f3c8:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[3], 26);
   1f3cc:	e0be8617 	ldw	r2,-1512(fp)
   1f3d0:	10800304 	addi	r2,r2,12
   1f3d4:	10800017 	ldw	r2,0(r2)
   1f3d8:	1004d6ba 	srli	r2,r2,26
   1f3dc:	1004c03a 	cmpne	r2,r2,zero
   1f3e0:	10803fcc 	andi	r2,r2,255
   1f3e4:	10000d26 	beq	r2,zero,1f41c <secp256k1_fe_sqr_inner+0x3a40>
   1f3e8:	d0a01617 	ldw	r2,-32680(gp)
   1f3ec:	10c00317 	ldw	r3,12(r2)
   1f3f0:	00800174 	movhi	r2,5
   1f3f4:	1094d604 	addi	r2,r2,21336
   1f3f8:	d8800015 	stw	r2,0(sp)
   1f3fc:	01c0f804 	movi	r7,992
   1f400:	01800174 	movhi	r6,5
   1f404:	3191dd04 	addi	r6,r6,18292
   1f408:	01400174 	movhi	r5,5
   1f40c:	2951e804 	addi	r5,r5,18336
   1f410:	1809883a 	mov	r4,r3
   1f414:	00461000 	call	46100 <fprintf>
   1f418:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[4] = t4;
   1f41c:	e0be8617 	ldw	r2,-1512(fp)
   1f420:	10c00404 	addi	r3,r2,16
   1f424:	e0be7a17 	ldw	r2,-1560(fp)
   1f428:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[4], 26);
   1f42c:	e0be8617 	ldw	r2,-1512(fp)
   1f430:	10800404 	addi	r2,r2,16
   1f434:	10800017 	ldw	r2,0(r2)
   1f438:	1004d6ba 	srli	r2,r2,26
   1f43c:	1004c03a 	cmpne	r2,r2,zero
   1f440:	10803fcc 	andi	r2,r2,255
   1f444:	10000d26 	beq	r2,zero,1f47c <secp256k1_fe_sqr_inner+0x3aa0>
   1f448:	d0a01617 	ldw	r2,-32680(gp)
   1f44c:	10c00317 	ldw	r3,12(r2)
   1f450:	00800174 	movhi	r2,5
   1f454:	1094e204 	addi	r2,r2,21384
   1f458:	d8800015 	stw	r2,0(sp)
   1f45c:	01c0f8c4 	movi	r7,995
   1f460:	01800174 	movhi	r6,5
   1f464:	3191dd04 	addi	r6,r6,18292
   1f468:	01400174 	movhi	r5,5
   1f46c:	2951e804 	addi	r5,r5,18336
   1f470:	1809883a 	mov	r4,r3
   1f474:	00461000 	call	46100 <fprintf>
   1f478:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[5] = t5;
   1f47c:	e0be8617 	ldw	r2,-1512(fp)
   1f480:	10c00504 	addi	r3,r2,20
   1f484:	e0be7d17 	ldw	r2,-1548(fp)
   1f488:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[5], 26);
   1f48c:	e0be8617 	ldw	r2,-1512(fp)
   1f490:	10800504 	addi	r2,r2,20
   1f494:	10800017 	ldw	r2,0(r2)
   1f498:	1004d6ba 	srli	r2,r2,26
   1f49c:	1004c03a 	cmpne	r2,r2,zero
   1f4a0:	10803fcc 	andi	r2,r2,255
   1f4a4:	10000d26 	beq	r2,zero,1f4dc <secp256k1_fe_sqr_inner+0x3b00>
   1f4a8:	d0a01617 	ldw	r2,-32680(gp)
   1f4ac:	10c00317 	ldw	r3,12(r2)
   1f4b0:	00800174 	movhi	r2,5
   1f4b4:	1094ee04 	addi	r2,r2,21432
   1f4b8:	d8800015 	stw	r2,0(sp)
   1f4bc:	01c0f984 	movi	r7,998
   1f4c0:	01800174 	movhi	r6,5
   1f4c4:	3191dd04 	addi	r6,r6,18292
   1f4c8:	01400174 	movhi	r5,5
   1f4cc:	2951e804 	addi	r5,r5,18336
   1f4d0:	1809883a 	mov	r4,r3
   1f4d4:	00461000 	call	46100 <fprintf>
   1f4d8:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[6] = t6;
   1f4dc:	e0be8617 	ldw	r2,-1512(fp)
   1f4e0:	10c00604 	addi	r3,r2,24
   1f4e4:	e0be8017 	ldw	r2,-1536(fp)
   1f4e8:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[6], 26);
   1f4ec:	e0be8617 	ldw	r2,-1512(fp)
   1f4f0:	10800604 	addi	r2,r2,24
   1f4f4:	10800017 	ldw	r2,0(r2)
   1f4f8:	1004d6ba 	srli	r2,r2,26
   1f4fc:	1004c03a 	cmpne	r2,r2,zero
   1f500:	10803fcc 	andi	r2,r2,255
   1f504:	10000d26 	beq	r2,zero,1f53c <secp256k1_fe_sqr_inner+0x3b60>
   1f508:	d0a01617 	ldw	r2,-32680(gp)
   1f50c:	10c00317 	ldw	r3,12(r2)
   1f510:	00800174 	movhi	r2,5
   1f514:	1094fa04 	addi	r2,r2,21480
   1f518:	d8800015 	stw	r2,0(sp)
   1f51c:	01c0fa44 	movi	r7,1001
   1f520:	01800174 	movhi	r6,5
   1f524:	3191dd04 	addi	r6,r6,18292
   1f528:	01400174 	movhi	r5,5
   1f52c:	2951e804 	addi	r5,r5,18336
   1f530:	1809883a 	mov	r4,r3
   1f534:	00461000 	call	46100 <fprintf>
   1f538:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[7] = t7;
   1f53c:	e0be8617 	ldw	r2,-1512(fp)
   1f540:	10c00704 	addi	r3,r2,28
   1f544:	e0be8317 	ldw	r2,-1524(fp)
   1f548:	18800015 	stw	r2,0(r3)
    VERIFY_BITS(r[7], 26);
   1f54c:	e0be8617 	ldw	r2,-1512(fp)
   1f550:	10800704 	addi	r2,r2,28
   1f554:	10800017 	ldw	r2,0(r2)
   1f558:	1004d6ba 	srli	r2,r2,26
   1f55c:	1004c03a 	cmpne	r2,r2,zero
   1f560:	10803fcc 	andi	r2,r2,255
   1f564:	10000d26 	beq	r2,zero,1f59c <secp256k1_fe_sqr_inner+0x3bc0>
   1f568:	d0a01617 	ldw	r2,-32680(gp)
   1f56c:	10c00317 	ldw	r3,12(r2)
   1f570:	00800174 	movhi	r2,5
   1f574:	10950604 	addi	r2,r2,21528
   1f578:	d8800015 	stw	r2,0(sp)
   1f57c:	01c0fb04 	movi	r7,1004
   1f580:	01800174 	movhi	r6,5
   1f584:	3191dd04 	addi	r6,r6,18292
   1f588:	01400174 	movhi	r5,5
   1f58c:	2951e804 	addi	r5,r5,18336
   1f590:	1809883a 	mov	r4,r3
   1f594:	00461000 	call	46100 <fprintf>
   1f598:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    r[8] = c & M; c >>= 26; c += u8 * R1;
   1f59c:	e0be8617 	ldw	r2,-1512(fp)
   1f5a0:	11000804 	addi	r4,r2,32
   1f5a4:	e0fe6a17 	ldw	r3,-1624(fp)
   1f5a8:	e0be6417 	ldw	r2,-1648(fp)
   1f5ac:	1884703a 	and	r2,r3,r2
   1f5b0:	20800015 	stw	r2,0(r4)
   1f5b4:	e0be6b17 	ldw	r2,-1620(fp)
   1f5b8:	100691ba 	slli	r3,r2,6
   1f5bc:	e0be6a17 	ldw	r2,-1624(fp)
   1f5c0:	1004d6ba 	srli	r2,r2,26
   1f5c4:	10c4b03a 	or	r2,r2,r3
   1f5c8:	e0be6a15 	stw	r2,-1624(fp)
   1f5cc:	e0be6b17 	ldw	r2,-1620(fp)
   1f5d0:	1004d6ba 	srli	r2,r2,26
   1f5d4:	e0be6b15 	stw	r2,-1620(fp)
   1f5d8:	e0be6617 	ldw	r2,-1640(fp)
   1f5dc:	e0bfd615 	stw	r2,-168(fp)
   1f5e0:	e03fd715 	stw	zero,-164(fp)
   1f5e4:	e1be8417 	ldw	r6,-1520(fp)
   1f5e8:	e1fe8517 	ldw	r7,-1516(fp)
   1f5ec:	e13fd617 	ldw	r4,-168(fp)
   1f5f0:	e17fd717 	ldw	r5,-164(fp)
   1f5f4:	00438e00 	call	438e0 <__muldi3>
   1f5f8:	1009883a 	mov	r4,r2
   1f5fc:	180b883a 	mov	r5,r3
   1f600:	200f883a 	mov	r7,r4
   1f604:	2811883a 	mov	r8,r5
   1f608:	e13e6a17 	ldw	r4,-1624(fp)
   1f60c:	e17e6b17 	ldw	r5,-1620(fp)
   1f610:	21c5883a 	add	r2,r4,r7
   1f614:	110d803a 	cmpltu	r6,r2,r4
   1f618:	2a07883a 	add	r3,r5,r8
   1f61c:	30c9883a 	add	r4,r6,r3
   1f620:	2007883a 	mov	r3,r4
   1f624:	e0be6a15 	stw	r2,-1624(fp)
   1f628:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(r[8], 26);
   1f62c:	e0be8617 	ldw	r2,-1512(fp)
   1f630:	10800804 	addi	r2,r2,32
   1f634:	10800017 	ldw	r2,0(r2)
   1f638:	1004d6ba 	srli	r2,r2,26
   1f63c:	1004c03a 	cmpne	r2,r2,zero
   1f640:	10803fcc 	andi	r2,r2,255
   1f644:	10000d26 	beq	r2,zero,1f67c <secp256k1_fe_sqr_inner+0x3ca0>
   1f648:	d0a01617 	ldw	r2,-32680(gp)
   1f64c:	10c00317 	ldw	r3,12(r2)
   1f650:	00800174 	movhi	r2,5
   1f654:	10951204 	addi	r2,r2,21576
   1f658:	d8800015 	stw	r2,0(sp)
   1f65c:	01c0fc04 	movi	r7,1008
   1f660:	01800174 	movhi	r6,5
   1f664:	3191dd04 	addi	r6,r6,18292
   1f668:	01400174 	movhi	r5,5
   1f66c:	2951e804 	addi	r5,r5,18336
   1f670:	1809883a 	mov	r4,r3
   1f674:	00461000 	call	46100 <fprintf>
   1f678:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 39);
   1f67c:	e0be6b17 	ldw	r2,-1620(fp)
   1f680:	1004d1fa 	srli	r2,r2,7
   1f684:	e0bfd815 	stw	r2,-160(fp)
   1f688:	e03fd915 	stw	zero,-156(fp)
   1f68c:	e13fd817 	ldw	r4,-160(fp)
   1f690:	e1bfd917 	ldw	r6,-156(fp)
   1f694:	2184b03a 	or	r2,r4,r6
   1f698:	1004c03a 	cmpne	r2,r2,zero
   1f69c:	10803fcc 	andi	r2,r2,255
   1f6a0:	10000d26 	beq	r2,zero,1f6d8 <secp256k1_fe_sqr_inner+0x3cfc>
   1f6a4:	d0a01617 	ldw	r2,-32680(gp)
   1f6a8:	10c00317 	ldw	r3,12(r2)
   1f6ac:	00800174 	movhi	r2,5
   1f6b0:	1093dc04 	addi	r2,r2,20336
   1f6b4:	d8800015 	stw	r2,0(sp)
   1f6b8:	01c0fc44 	movi	r7,1009
   1f6bc:	01800174 	movhi	r6,5
   1f6c0:	3191dd04 	addi	r6,r6,18292
   1f6c4:	01400174 	movhi	r5,5
   1f6c8:	2951e804 	addi	r5,r5,18336
   1f6cc:	1809883a 	mov	r4,r3
   1f6d0:	00461000 	call	46100 <fprintf>
   1f6d4:	0045fd40 	call	45fd4 <abort>
    /* [d u8 0 0 0 0 0 0 0 0 t9+c-u8*R1 r8-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 0 0 t9+c r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    c   += d * R0 + t9;
   1f6d8:	e0be6517 	ldw	r2,-1644(fp)
   1f6dc:	e0bfda15 	stw	r2,-152(fp)
   1f6e0:	e03fdb15 	stw	zero,-148(fp)
   1f6e4:	e1be6717 	ldw	r6,-1636(fp)
   1f6e8:	e1fe6817 	ldw	r7,-1632(fp)
   1f6ec:	e13fda17 	ldw	r4,-152(fp)
   1f6f0:	e17fdb17 	ldw	r5,-148(fp)
   1f6f4:	00438e00 	call	438e0 <__muldi3>
   1f6f8:	100f883a 	mov	r7,r2
   1f6fc:	1811883a 	mov	r8,r3
   1f700:	380b883a 	mov	r5,r7
   1f704:	400d883a 	mov	r6,r8
   1f708:	e0be6917 	ldw	r2,-1628(fp)
   1f70c:	e0bfdc15 	stw	r2,-144(fp)
   1f710:	e03fdd15 	stw	zero,-140(fp)
   1f714:	e1ffdc17 	ldw	r7,-144(fp)
   1f718:	29c5883a 	add	r2,r5,r7
   1f71c:	1149803a 	cmpltu	r4,r2,r5
   1f720:	e1ffdd17 	ldw	r7,-140(fp)
   1f724:	31c7883a 	add	r3,r6,r7
   1f728:	20c9883a 	add	r4,r4,r3
   1f72c:	2007883a 	mov	r3,r4
   1f730:	100f883a 	mov	r7,r2
   1f734:	1811883a 	mov	r8,r3
   1f738:	e13e6a17 	ldw	r4,-1624(fp)
   1f73c:	e17e6b17 	ldw	r5,-1620(fp)
   1f740:	21c5883a 	add	r2,r4,r7
   1f744:	110d803a 	cmpltu	r6,r2,r4
   1f748:	2a07883a 	add	r3,r5,r8
   1f74c:	30c9883a 	add	r4,r6,r3
   1f750:	2007883a 	mov	r3,r4
   1f754:	e0be6a15 	stw	r2,-1624(fp)
   1f758:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(c, 45);
   1f75c:	e0be6b17 	ldw	r2,-1620(fp)
   1f760:	1004d37a 	srli	r2,r2,13
   1f764:	e0bfde15 	stw	r2,-136(fp)
   1f768:	e03fdf15 	stw	zero,-132(fp)
   1f76c:	e0ffde17 	ldw	r3,-136(fp)
   1f770:	e13fdf17 	ldw	r4,-132(fp)
   1f774:	1904b03a 	or	r2,r3,r4
   1f778:	1004c03a 	cmpne	r2,r2,zero
   1f77c:	10803fcc 	andi	r2,r2,255
   1f780:	10000d26 	beq	r2,zero,1f7b8 <secp256k1_fe_sqr_inner+0x3ddc>
   1f784:	d0a01617 	ldw	r2,-32680(gp)
   1f788:	10c00317 	ldw	r3,12(r2)
   1f78c:	00800174 	movhi	r2,5
   1f790:	10951e04 	addi	r2,r2,21624
   1f794:	d8800015 	stw	r2,0(sp)
   1f798:	01c0fd44 	movi	r7,1013
   1f79c:	01800174 	movhi	r6,5
   1f7a0:	3191dd04 	addi	r6,r6,18292
   1f7a4:	01400174 	movhi	r5,5
   1f7a8:	2951e804 	addi	r5,r5,18336
   1f7ac:	1809883a 	mov	r4,r3
   1f7b0:	00461000 	call	46100 <fprintf>
   1f7b4:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 0 0 c-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[9] = c & (M >> 4); c >>= 22; c += d * (R1 << 4);
   1f7b8:	e0be8617 	ldw	r2,-1512(fp)
   1f7bc:	11000904 	addi	r4,r2,36
   1f7c0:	e0be6417 	ldw	r2,-1648(fp)
   1f7c4:	1006d13a 	srli	r3,r2,4
   1f7c8:	e0be6a17 	ldw	r2,-1624(fp)
   1f7cc:	1884703a 	and	r2,r3,r2
   1f7d0:	20800015 	stw	r2,0(r4)
   1f7d4:	e0be6b17 	ldw	r2,-1620(fp)
   1f7d8:	100692ba 	slli	r3,r2,10
   1f7dc:	e0be6a17 	ldw	r2,-1624(fp)
   1f7e0:	1004d5ba 	srli	r2,r2,22
   1f7e4:	10c4b03a 	or	r2,r2,r3
   1f7e8:	e0be6a15 	stw	r2,-1624(fp)
   1f7ec:	e0be6b17 	ldw	r2,-1620(fp)
   1f7f0:	1004d5ba 	srli	r2,r2,22
   1f7f4:	e0be6b15 	stw	r2,-1620(fp)
   1f7f8:	e0be6617 	ldw	r2,-1640(fp)
   1f7fc:	1004913a 	slli	r2,r2,4
   1f800:	e0bfe015 	stw	r2,-128(fp)
   1f804:	e03fe115 	stw	zero,-124(fp)
   1f808:	e1be6717 	ldw	r6,-1636(fp)
   1f80c:	e1fe6817 	ldw	r7,-1632(fp)
   1f810:	e13fe017 	ldw	r4,-128(fp)
   1f814:	e17fe117 	ldw	r5,-124(fp)
   1f818:	00438e00 	call	438e0 <__muldi3>
   1f81c:	1009883a 	mov	r4,r2
   1f820:	180b883a 	mov	r5,r3
   1f824:	200f883a 	mov	r7,r4
   1f828:	2811883a 	mov	r8,r5
   1f82c:	e13e6a17 	ldw	r4,-1624(fp)
   1f830:	e17e6b17 	ldw	r5,-1620(fp)
   1f834:	21c5883a 	add	r2,r4,r7
   1f838:	110d803a 	cmpltu	r6,r2,r4
   1f83c:	2a07883a 	add	r3,r5,r8
   1f840:	30c9883a 	add	r4,r6,r3
   1f844:	2007883a 	mov	r3,r4
   1f848:	e0be6a15 	stw	r2,-1624(fp)
   1f84c:	e0fe6b15 	stw	r3,-1620(fp)
    VERIFY_BITS(r[9], 22);
   1f850:	e0be8617 	ldw	r2,-1512(fp)
   1f854:	10800904 	addi	r2,r2,36
   1f858:	10800017 	ldw	r2,0(r2)
   1f85c:	1004d5ba 	srli	r2,r2,22
   1f860:	1004c03a 	cmpne	r2,r2,zero
   1f864:	10803fcc 	andi	r2,r2,255
   1f868:	10000d26 	beq	r2,zero,1f8a0 <secp256k1_fe_sqr_inner+0x3ec4>
   1f86c:	d0a01617 	ldw	r2,-32680(gp)
   1f870:	10c00317 	ldw	r3,12(r2)
   1f874:	00800174 	movhi	r2,5
   1f878:	10952904 	addi	r2,r2,21668
   1f87c:	d8800015 	stw	r2,0(sp)
   1f880:	01c0fe04 	movi	r7,1016
   1f884:	01800174 	movhi	r6,5
   1f888:	3191dd04 	addi	r6,r6,18292
   1f88c:	01400174 	movhi	r5,5
   1f890:	2951e804 	addi	r5,r5,18336
   1f894:	1809883a 	mov	r4,r3
   1f898:	00461000 	call	46100 <fprintf>
   1f89c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(c, 46);
   1f8a0:	e0be6b17 	ldw	r2,-1620(fp)
   1f8a4:	1004d3ba 	srli	r2,r2,14
   1f8a8:	e0bfe215 	stw	r2,-120(fp)
   1f8ac:	e03fe315 	stw	zero,-116(fp)
   1f8b0:	e1bfe217 	ldw	r6,-120(fp)
   1f8b4:	e1ffe317 	ldw	r7,-116(fp)
   1f8b8:	31c4b03a 	or	r2,r6,r7
   1f8bc:	1004c03a 	cmpne	r2,r2,zero
   1f8c0:	10803fcc 	andi	r2,r2,255
   1f8c4:	10000d26 	beq	r2,zero,1f8fc <secp256k1_fe_sqr_inner+0x3f20>
   1f8c8:	d0a01617 	ldw	r2,-32680(gp)
   1f8cc:	10c00317 	ldw	r3,12(r2)
   1f8d0:	00800174 	movhi	r2,5
   1f8d4:	10953504 	addi	r2,r2,21716
   1f8d8:	d8800015 	stw	r2,0(sp)
   1f8dc:	01c0fe44 	movi	r7,1017
   1f8e0:	01800174 	movhi	r6,5
   1f8e4:	3191dd04 	addi	r6,r6,18292
   1f8e8:	01400174 	movhi	r5,5
   1f8ec:	2951e804 	addi	r5,r5,18336
   1f8f0:	1809883a 	mov	r4,r3
   1f8f4:	00461000 	call	46100 <fprintf>
   1f8f8:	0045fd40 	call	45fd4 <abort>
    /* [d 0 0 0 0 0 0 0 0 r9+((c-d*R1<<4)<<22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [d 0 0 0 0 0 0 0 -d*R1 r9+(c<<22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */

    d    = c * (R0 >> 4) + t0;
   1f8fc:	e0be6517 	ldw	r2,-1644(fp)
   1f900:	1004d13a 	srli	r2,r2,4
   1f904:	e0bfe415 	stw	r2,-112(fp)
   1f908:	e03fe515 	stw	zero,-108(fp)
   1f90c:	e1be6a17 	ldw	r6,-1624(fp)
   1f910:	e1fe6b17 	ldw	r7,-1620(fp)
   1f914:	e13fe417 	ldw	r4,-112(fp)
   1f918:	e17fe517 	ldw	r5,-108(fp)
   1f91c:	00438e00 	call	438e0 <__muldi3>
   1f920:	100d883a 	mov	r6,r2
   1f924:	180f883a 	mov	r7,r3
   1f928:	3009883a 	mov	r4,r6
   1f92c:	380b883a 	mov	r5,r7
   1f930:	e0be6e17 	ldw	r2,-1608(fp)
   1f934:	e0bfe615 	stw	r2,-104(fp)
   1f938:	e03fe715 	stw	zero,-100(fp)
   1f93c:	e1bfe617 	ldw	r6,-104(fp)
   1f940:	2185883a 	add	r2,r4,r6
   1f944:	110d803a 	cmpltu	r6,r2,r4
   1f948:	e1ffe717 	ldw	r7,-100(fp)
   1f94c:	29c7883a 	add	r3,r5,r7
   1f950:	30c9883a 	add	r4,r6,r3
   1f954:	2007883a 	mov	r3,r4
   1f958:	e0be6715 	stw	r2,-1636(fp)
   1f95c:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 56);
   1f960:	e0be6817 	ldw	r2,-1632(fp)
   1f964:	1004d63a 	srli	r2,r2,24
   1f968:	e0bfe815 	stw	r2,-96(fp)
   1f96c:	e03fe915 	stw	zero,-92(fp)
   1f970:	e0ffe817 	ldw	r3,-96(fp)
   1f974:	e13fe917 	ldw	r4,-92(fp)
   1f978:	1904b03a 	or	r2,r3,r4
   1f97c:	1004c03a 	cmpne	r2,r2,zero
   1f980:	10803fcc 	andi	r2,r2,255
   1f984:	10000d26 	beq	r2,zero,1f9bc <secp256k1_fe_sqr_inner+0x3fe0>
   1f988:	d0a01617 	ldw	r2,-32680(gp)
   1f98c:	10c00317 	ldw	r3,12(r2)
   1f990:	00800174 	movhi	r2,5
   1f994:	10954004 	addi	r2,r2,21760
   1f998:	d8800015 	stw	r2,0(sp)
   1f99c:	01c0ffc4 	movi	r7,1023
   1f9a0:	01800174 	movhi	r6,5
   1f9a4:	3191dd04 	addi	r6,r6,18292
   1f9a8:	01400174 	movhi	r5,5
   1f9ac:	2951e804 	addi	r5,r5,18336
   1f9b0:	1809883a 	mov	r4,r3
   1f9b4:	00461000 	call	46100 <fprintf>
   1f9b8:	0045fd40 	call	45fd4 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1 d-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[0] = d & M; d >>= 26;
   1f9bc:	e0fe6717 	ldw	r3,-1636(fp)
   1f9c0:	e0be6417 	ldw	r2,-1648(fp)
   1f9c4:	1886703a 	and	r3,r3,r2
   1f9c8:	e0be8617 	ldw	r2,-1512(fp)
   1f9cc:	10c00015 	stw	r3,0(r2)
   1f9d0:	e0be6817 	ldw	r2,-1632(fp)
   1f9d4:	100491ba 	slli	r2,r2,6
   1f9d8:	e0fe6717 	ldw	r3,-1636(fp)
   1f9dc:	1806d6ba 	srli	r3,r3,26
   1f9e0:	1884b03a 	or	r2,r3,r2
   1f9e4:	e0be6715 	stw	r2,-1636(fp)
   1f9e8:	e0be6817 	ldw	r2,-1632(fp)
   1f9ec:	1004d6ba 	srli	r2,r2,26
   1f9f0:	e0be6815 	stw	r2,-1632(fp)
    VERIFY_BITS(r[0], 26);
   1f9f4:	e0be8617 	ldw	r2,-1512(fp)
   1f9f8:	10800017 	ldw	r2,0(r2)
   1f9fc:	1004d6ba 	srli	r2,r2,26
   1fa00:	1004c03a 	cmpne	r2,r2,zero
   1fa04:	10803fcc 	andi	r2,r2,255
   1fa08:	10000d26 	beq	r2,zero,1fa40 <secp256k1_fe_sqr_inner+0x4064>
   1fa0c:	d0a01617 	ldw	r2,-32680(gp)
   1fa10:	10c00317 	ldw	r3,12(r2)
   1fa14:	00800174 	movhi	r2,5
   1fa18:	10954b04 	addi	r2,r2,21804
   1fa1c:	d8800015 	stw	r2,0(sp)
   1fa20:	01c10084 	movi	r7,1026
   1fa24:	01800174 	movhi	r6,5
   1fa28:	3191dd04 	addi	r6,r6,18292
   1fa2c:	01400174 	movhi	r5,5
   1fa30:	2951e804 	addi	r5,r5,18336
   1fa34:	1809883a 	mov	r4,r3
   1fa38:	00461000 	call	46100 <fprintf>
   1fa3c:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 30);
   1fa40:	e0be6817 	ldw	r2,-1632(fp)
   1fa44:	100490ba 	slli	r2,r2,2
   1fa48:	e0fe6717 	ldw	r3,-1636(fp)
   1fa4c:	1806d7ba 	srli	r3,r3,30
   1fa50:	e0ffea15 	stw	r3,-88(fp)
   1fa54:	e1bfea17 	ldw	r6,-88(fp)
   1fa58:	1184b03a 	or	r2,r2,r6
   1fa5c:	e0bfea15 	stw	r2,-88(fp)
   1fa60:	e0be6817 	ldw	r2,-1632(fp)
   1fa64:	1004d7ba 	srli	r2,r2,30
   1fa68:	e0bfeb15 	stw	r2,-84(fp)
   1fa6c:	e1ffea17 	ldw	r7,-88(fp)
   1fa70:	e0ffeb17 	ldw	r3,-84(fp)
   1fa74:	38c4b03a 	or	r2,r7,r3
   1fa78:	1004c03a 	cmpne	r2,r2,zero
   1fa7c:	10803fcc 	andi	r2,r2,255
   1fa80:	10000d26 	beq	r2,zero,1fab8 <secp256k1_fe_sqr_inner+0x40dc>
   1fa84:	d0a01617 	ldw	r2,-32680(gp)
   1fa88:	10c00317 	ldw	r3,12(r2)
   1fa8c:	00800174 	movhi	r2,5
   1fa90:	10955704 	addi	r2,r2,21852
   1fa94:	d8800015 	stw	r2,0(sp)
   1fa98:	01c100c4 	movi	r7,1027
   1fa9c:	01800174 	movhi	r6,5
   1faa0:	3191dd04 	addi	r6,r6,18292
   1faa4:	01400174 	movhi	r5,5
   1faa8:	2951e804 	addi	r5,r5,18336
   1faac:	1809883a 	mov	r4,r3
   1fab0:	00461000 	call	46100 <fprintf>
   1fab4:	0045fd40 	call	45fd4 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 t1+d r0-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d   += c * (R1 >> 4) + t1;
   1fab8:	e0be6617 	ldw	r2,-1640(fp)
   1fabc:	1004d13a 	srli	r2,r2,4
   1fac0:	e0bfec15 	stw	r2,-80(fp)
   1fac4:	e03fed15 	stw	zero,-76(fp)
   1fac8:	e1be6a17 	ldw	r6,-1624(fp)
   1facc:	e1fe6b17 	ldw	r7,-1620(fp)
   1fad0:	e13fec17 	ldw	r4,-80(fp)
   1fad4:	e17fed17 	ldw	r5,-76(fp)
   1fad8:	00438e00 	call	438e0 <__muldi3>
   1fadc:	100d883a 	mov	r6,r2
   1fae0:	180f883a 	mov	r7,r3
   1fae4:	3009883a 	mov	r4,r6
   1fae8:	380b883a 	mov	r5,r7
   1faec:	e0be7117 	ldw	r2,-1596(fp)
   1faf0:	e0bfee15 	stw	r2,-72(fp)
   1faf4:	e03fef15 	stw	zero,-68(fp)
   1faf8:	e1bfee17 	ldw	r6,-72(fp)
   1fafc:	2185883a 	add	r2,r4,r6
   1fb00:	110d803a 	cmpltu	r6,r2,r4
   1fb04:	e1ffef17 	ldw	r7,-68(fp)
   1fb08:	29c7883a 	add	r3,r5,r7
   1fb0c:	30c9883a 	add	r4,r6,r3
   1fb10:	2007883a 	mov	r3,r4
   1fb14:	100d883a 	mov	r6,r2
   1fb18:	180f883a 	mov	r7,r3
   1fb1c:	e13e6717 	ldw	r4,-1636(fp)
   1fb20:	e17e6817 	ldw	r5,-1632(fp)
   1fb24:	2185883a 	add	r2,r4,r6
   1fb28:	1111803a 	cmpltu	r8,r2,r4
   1fb2c:	29c7883a 	add	r3,r5,r7
   1fb30:	40c9883a 	add	r4,r8,r3
   1fb34:	2007883a 	mov	r3,r4
   1fb38:	e0be6715 	stw	r2,-1636(fp)
   1fb3c:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 53);
   1fb40:	e0be6817 	ldw	r2,-1632(fp)
   1fb44:	1004d57a 	srli	r2,r2,21
   1fb48:	e0bff015 	stw	r2,-64(fp)
   1fb4c:	e03ff115 	stw	zero,-60(fp)
   1fb50:	e0fff017 	ldw	r3,-64(fp)
   1fb54:	e13ff117 	ldw	r4,-60(fp)
   1fb58:	1904b03a 	or	r2,r3,r4
   1fb5c:	1004c03a 	cmpne	r2,r2,zero
   1fb60:	10803fcc 	andi	r2,r2,255
   1fb64:	10000d26 	beq	r2,zero,1fb9c <secp256k1_fe_sqr_inner+0x41c0>
   1fb68:	d0a01617 	ldw	r2,-32680(gp)
   1fb6c:	10c00317 	ldw	r3,12(r2)
   1fb70:	00800174 	movhi	r2,5
   1fb74:	10956204 	addi	r2,r2,21896
   1fb78:	d8800015 	stw	r2,0(sp)
   1fb7c:	01c10184 	movi	r7,1030
   1fb80:	01800174 	movhi	r6,5
   1fb84:	3191dd04 	addi	r6,r6,18292
   1fb88:	01400174 	movhi	r5,5
   1fb8c:	2951e804 	addi	r5,r5,18336
   1fb90:	1809883a 	mov	r4,r3
   1fb94:	00461000 	call	46100 <fprintf>
   1fb98:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(d <= 0x10000003FFFFBFULL);
   1fb9c:	01000044 	movi	r4,1
   1fba0:	e0be6817 	ldw	r2,-1632(fp)
   1fba4:	00c00434 	movhi	r3,16
   1fba8:	18800836 	bltu	r3,r2,1fbcc <secp256k1_fe_sqr_inner+0x41f0>
   1fbac:	e0fe6817 	ldw	r3,-1632(fp)
   1fbb0:	00800434 	movhi	r2,16
   1fbb4:	1880041e 	bne	r3,r2,1fbc8 <secp256k1_fe_sqr_inner+0x41ec>
   1fbb8:	e0fe6717 	ldw	r3,-1636(fp)
   1fbbc:	00810034 	movhi	r2,1024
   1fbc0:	10bfefc4 	addi	r2,r2,-65
   1fbc4:	10c00136 	bltu	r2,r3,1fbcc <secp256k1_fe_sqr_inner+0x41f0>
   1fbc8:	0009883a 	mov	r4,zero
   1fbcc:	20803fcc 	andi	r2,r4,255
   1fbd0:	10000d26 	beq	r2,zero,1fc08 <secp256k1_fe_sqr_inner+0x422c>
   1fbd4:	d0a01617 	ldw	r2,-32680(gp)
   1fbd8:	10c00317 	ldw	r3,12(r2)
   1fbdc:	00800174 	movhi	r2,5
   1fbe0:	10956d04 	addi	r2,r2,21940
   1fbe4:	d8800015 	stw	r2,0(sp)
   1fbe8:	01c101c4 	movi	r7,1031
   1fbec:	01800174 	movhi	r6,5
   1fbf0:	3191dd04 	addi	r6,r6,18292
   1fbf4:	01400174 	movhi	r5,5
   1fbf8:	2951e804 	addi	r5,r5,18336
   1fbfc:	1809883a 	mov	r4,r3
   1fc00:	00461000 	call	46100 <fprintf>
   1fc04:	0045fd40 	call	45fd4 <abort>
    /* [r9+(c<<22) r8 r7 r6 r5 r4 r3 t2 d-c*R1>>4 r0-c*R0>>4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    /* [r9 r8 r7 r6 r5 r4 r3 t2 d r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[1] = d & M; d >>= 26;
   1fc08:	e0be8617 	ldw	r2,-1512(fp)
   1fc0c:	10800104 	addi	r2,r2,4
   1fc10:	e13e6717 	ldw	r4,-1636(fp)
   1fc14:	e0fe6417 	ldw	r3,-1648(fp)
   1fc18:	20c6703a 	and	r3,r4,r3
   1fc1c:	10c00015 	stw	r3,0(r2)
   1fc20:	e0be6817 	ldw	r2,-1632(fp)
   1fc24:	100491ba 	slli	r2,r2,6
   1fc28:	e0fe6717 	ldw	r3,-1636(fp)
   1fc2c:	1806d6ba 	srli	r3,r3,26
   1fc30:	1884b03a 	or	r2,r3,r2
   1fc34:	e0be6715 	stw	r2,-1636(fp)
   1fc38:	e0be6817 	ldw	r2,-1632(fp)
   1fc3c:	1004d6ba 	srli	r2,r2,26
   1fc40:	e0be6815 	stw	r2,-1632(fp)
    VERIFY_BITS(r[1], 26);
   1fc44:	e0be8617 	ldw	r2,-1512(fp)
   1fc48:	10800104 	addi	r2,r2,4
   1fc4c:	10800017 	ldw	r2,0(r2)
   1fc50:	1004d6ba 	srli	r2,r2,26
   1fc54:	1004c03a 	cmpne	r2,r2,zero
   1fc58:	10803fcc 	andi	r2,r2,255
   1fc5c:	10000d26 	beq	r2,zero,1fc94 <secp256k1_fe_sqr_inner+0x42b8>
   1fc60:	d0a01617 	ldw	r2,-32680(gp)
   1fc64:	10c00317 	ldw	r3,12(r2)
   1fc68:	00800174 	movhi	r2,5
   1fc6c:	10957904 	addi	r2,r2,21988
   1fc70:	d8800015 	stw	r2,0(sp)
   1fc74:	01c102c4 	movi	r7,1035
   1fc78:	01800174 	movhi	r6,5
   1fc7c:	3191dd04 	addi	r6,r6,18292
   1fc80:	01400174 	movhi	r5,5
   1fc84:	2951e804 	addi	r5,r5,18336
   1fc88:	1809883a 	mov	r4,r3
   1fc8c:	00461000 	call	46100 <fprintf>
   1fc90:	0045fd40 	call	45fd4 <abort>
    VERIFY_BITS(d, 27);
   1fc94:	e0be6817 	ldw	r2,-1632(fp)
   1fc98:	1004917a 	slli	r2,r2,5
   1fc9c:	e0fe6717 	ldw	r3,-1636(fp)
   1fca0:	1806d6fa 	srli	r3,r3,27
   1fca4:	e0fff215 	stw	r3,-56(fp)
   1fca8:	e1bff217 	ldw	r6,-56(fp)
   1fcac:	1184b03a 	or	r2,r2,r6
   1fcb0:	e0bff215 	stw	r2,-56(fp)
   1fcb4:	e0be6817 	ldw	r2,-1632(fp)
   1fcb8:	1004d6fa 	srli	r2,r2,27
   1fcbc:	e0bff315 	stw	r2,-52(fp)
   1fcc0:	e1fff217 	ldw	r7,-56(fp)
   1fcc4:	e0fff317 	ldw	r3,-52(fp)
   1fcc8:	38c4b03a 	or	r2,r7,r3
   1fccc:	1004c03a 	cmpne	r2,r2,zero
   1fcd0:	10803fcc 	andi	r2,r2,255
   1fcd4:	10000d26 	beq	r2,zero,1fd0c <secp256k1_fe_sqr_inner+0x4330>
   1fcd8:	d0a01617 	ldw	r2,-32680(gp)
   1fcdc:	10c00317 	ldw	r3,12(r2)
   1fce0:	00800174 	movhi	r2,5
   1fce4:	10958504 	addi	r2,r2,22036
   1fce8:	d8800015 	stw	r2,0(sp)
   1fcec:	01c10304 	movi	r7,1036
   1fcf0:	01800174 	movhi	r6,5
   1fcf4:	3191dd04 	addi	r6,r6,18292
   1fcf8:	01400174 	movhi	r5,5
   1fcfc:	2951e804 	addi	r5,r5,18336
   1fd00:	1809883a 	mov	r4,r3
   1fd04:	00461000 	call	46100 <fprintf>
   1fd08:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(d <= 0x4000000ULL);
   1fd0c:	01000044 	movi	r4,1
   1fd10:	e0be6817 	ldw	r2,-1632(fp)
   1fd14:	1000061e 	bne	r2,zero,1fd30 <secp256k1_fe_sqr_inner+0x4354>
   1fd18:	e0be6817 	ldw	r2,-1632(fp)
   1fd1c:	1000031e 	bne	r2,zero,1fd2c <secp256k1_fe_sqr_inner+0x4350>
   1fd20:	e0be6717 	ldw	r2,-1636(fp)
   1fd24:	00c10034 	movhi	r3,1024
   1fd28:	18800136 	bltu	r3,r2,1fd30 <secp256k1_fe_sqr_inner+0x4354>
   1fd2c:	0009883a 	mov	r4,zero
   1fd30:	20803fcc 	andi	r2,r4,255
   1fd34:	10000d26 	beq	r2,zero,1fd6c <secp256k1_fe_sqr_inner+0x4390>
   1fd38:	d0a01617 	ldw	r2,-32680(gp)
   1fd3c:	10c00317 	ldw	r3,12(r2)
   1fd40:	00800174 	movhi	r2,5
   1fd44:	10959004 	addi	r2,r2,22080
   1fd48:	d8800015 	stw	r2,0(sp)
   1fd4c:	01c10344 	movi	r7,1037
   1fd50:	01800174 	movhi	r6,5
   1fd54:	3191dd04 	addi	r6,r6,18292
   1fd58:	01400174 	movhi	r5,5
   1fd5c:	2951e804 	addi	r5,r5,18336
   1fd60:	1809883a 	mov	r4,r3
   1fd64:	00461000 	call	46100 <fprintf>
   1fd68:	0045fd40 	call	45fd4 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 t2+d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    d   += t2;
   1fd6c:	e0be7417 	ldw	r2,-1584(fp)
   1fd70:	e0bff415 	stw	r2,-48(fp)
   1fd74:	e03ff515 	stw	zero,-44(fp)
   1fd78:	e13e6717 	ldw	r4,-1636(fp)
   1fd7c:	e17e6817 	ldw	r5,-1632(fp)
   1fd80:	e1bff417 	ldw	r6,-48(fp)
   1fd84:	2185883a 	add	r2,r4,r6
   1fd88:	110d803a 	cmpltu	r6,r2,r4
   1fd8c:	e1fff517 	ldw	r7,-44(fp)
   1fd90:	29c7883a 	add	r3,r5,r7
   1fd94:	30c9883a 	add	r4,r6,r3
   1fd98:	2007883a 	mov	r3,r4
   1fd9c:	e0be6715 	stw	r2,-1636(fp)
   1fda0:	e0fe6815 	stw	r3,-1632(fp)
    VERIFY_BITS(d, 27);
   1fda4:	e0be6817 	ldw	r2,-1632(fp)
   1fda8:	1004917a 	slli	r2,r2,5
   1fdac:	e0fe6717 	ldw	r3,-1636(fp)
   1fdb0:	1806d6fa 	srli	r3,r3,27
   1fdb4:	e0fff615 	stw	r3,-40(fp)
   1fdb8:	e0fff617 	ldw	r3,-40(fp)
   1fdbc:	10c4b03a 	or	r2,r2,r3
   1fdc0:	e0bff615 	stw	r2,-40(fp)
   1fdc4:	e0be6817 	ldw	r2,-1632(fp)
   1fdc8:	1004d6fa 	srli	r2,r2,27
   1fdcc:	e0bff715 	stw	r2,-36(fp)
   1fdd0:	e13ff617 	ldw	r4,-40(fp)
   1fdd4:	e1bff717 	ldw	r6,-36(fp)
   1fdd8:	2184b03a 	or	r2,r4,r6
   1fddc:	1004c03a 	cmpne	r2,r2,zero
   1fde0:	10803fcc 	andi	r2,r2,255
   1fde4:	10000d26 	beq	r2,zero,1fe1c <secp256k1_fe_sqr_inner+0x4440>
   1fde8:	d0a01617 	ldw	r2,-32680(gp)
   1fdec:	10c00317 	ldw	r3,12(r2)
   1fdf0:	00800174 	movhi	r2,5
   1fdf4:	10958504 	addi	r2,r2,22036
   1fdf8:	d8800015 	stw	r2,0(sp)
   1fdfc:	01c10404 	movi	r7,1040
   1fe00:	01800174 	movhi	r6,5
   1fe04:	3191dd04 	addi	r6,r6,18292
   1fe08:	01400174 	movhi	r5,5
   1fe0c:	2951e804 	addi	r5,r5,18336
   1fe10:	1809883a 	mov	r4,r3
   1fe14:	00461000 	call	46100 <fprintf>
   1fe18:	0045fd40 	call	45fd4 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
    r[2] = d;
   1fe1c:	e0be8617 	ldw	r2,-1512(fp)
   1fe20:	10800204 	addi	r2,r2,8
   1fe24:	e0fe6717 	ldw	r3,-1636(fp)
   1fe28:	10c00015 	stw	r3,0(r2)
    VERIFY_BITS(r[2], 27);
   1fe2c:	e0be8617 	ldw	r2,-1512(fp)
   1fe30:	10800204 	addi	r2,r2,8
   1fe34:	10800017 	ldw	r2,0(r2)
   1fe38:	1004d6fa 	srli	r2,r2,27
   1fe3c:	1004c03a 	cmpne	r2,r2,zero
   1fe40:	10803fcc 	andi	r2,r2,255
   1fe44:	10000d26 	beq	r2,zero,1fe7c <secp256k1_fe_sqr_inner+0x44a0>
   1fe48:	d0a01617 	ldw	r2,-32680(gp)
   1fe4c:	10c00317 	ldw	r3,12(r2)
   1fe50:	00800174 	movhi	r2,5
   1fe54:	10959b04 	addi	r2,r2,22124
   1fe58:	d8800015 	stw	r2,0(sp)
   1fe5c:	01c104c4 	movi	r7,1043
   1fe60:	01800174 	movhi	r6,5
   1fe64:	3191dd04 	addi	r6,r6,18292
   1fe68:	01400174 	movhi	r5,5
   1fe6c:	2951e804 	addi	r5,r5,18336
   1fe70:	1809883a 	mov	r4,r3
   1fe74:	00461000 	call	46100 <fprintf>
   1fe78:	0045fd40 	call	45fd4 <abort>
    /* [r9 r8 r7 r6 r5 r4 r3 r2 r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */
}
   1fe7c:	0001883a 	nop
   1fe80:	e6fff804 	addi	sp,fp,-32
   1fe84:	dfc00917 	ldw	ra,36(sp)
   1fe88:	df000817 	ldw	fp,32(sp)
   1fe8c:	ddc00717 	ldw	r23,28(sp)
   1fe90:	dd800617 	ldw	r22,24(sp)
   1fe94:	dd400517 	ldw	r21,20(sp)
   1fe98:	dd000417 	ldw	r20,16(sp)
   1fe9c:	dcc00317 	ldw	r19,12(sp)
   1fea0:	dc800217 	ldw	r18,8(sp)
   1fea4:	dc400117 	ldw	r17,4(sp)
   1fea8:	dc000017 	ldw	r16,0(sp)
   1feac:	dec00a04 	addi	sp,sp,40
   1feb0:	f800283a 	ret

0001feb4 <secp256k1_fe_mul>:
#endif

static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {
   1feb4:	defffa04 	addi	sp,sp,-24
   1feb8:	dfc00515 	stw	ra,20(sp)
   1febc:	df000415 	stw	fp,16(sp)
   1fec0:	df000404 	addi	fp,sp,16
   1fec4:	e13ffd15 	stw	r4,-12(fp)
   1fec8:	e17ffe15 	stw	r5,-8(fp)
   1fecc:	e1bfff15 	stw	r6,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->magnitude <= 8);
   1fed0:	e0bffe17 	ldw	r2,-8(fp)
   1fed4:	10800a17 	ldw	r2,40(r2)
   1fed8:	10800248 	cmpgei	r2,r2,9
   1fedc:	10803fcc 	andi	r2,r2,255
   1fee0:	10000d26 	beq	r2,zero,1ff18 <secp256k1_fe_mul+0x64>
   1fee4:	d0a01617 	ldw	r2,-32680(gp)
   1fee8:	10c00317 	ldw	r3,12(r2)
   1feec:	00800174 	movhi	r2,5
   1fef0:	1095a704 	addi	r2,r2,22172
   1fef4:	d8800015 	stw	r2,0(sp)
   1fef8:	01c10684 	movi	r7,1050
   1fefc:	01800174 	movhi	r6,5
   1ff00:	3191dd04 	addi	r6,r6,18292
   1ff04:	01400174 	movhi	r5,5
   1ff08:	2951e804 	addi	r5,r5,18336
   1ff0c:	1809883a 	mov	r4,r3
   1ff10:	00461000 	call	46100 <fprintf>
   1ff14:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(b->magnitude <= 8);
   1ff18:	e0bfff17 	ldw	r2,-4(fp)
   1ff1c:	10800a17 	ldw	r2,40(r2)
   1ff20:	10800248 	cmpgei	r2,r2,9
   1ff24:	10803fcc 	andi	r2,r2,255
   1ff28:	10000d26 	beq	r2,zero,1ff60 <secp256k1_fe_mul+0xac>
   1ff2c:	d0a01617 	ldw	r2,-32680(gp)
   1ff30:	10c00317 	ldw	r3,12(r2)
   1ff34:	00800174 	movhi	r2,5
   1ff38:	1095b204 	addi	r2,r2,22216
   1ff3c:	d8800015 	stw	r2,0(sp)
   1ff40:	01c106c4 	movi	r7,1051
   1ff44:	01800174 	movhi	r6,5
   1ff48:	3191dd04 	addi	r6,r6,18292
   1ff4c:	01400174 	movhi	r5,5
   1ff50:	2951e804 	addi	r5,r5,18336
   1ff54:	1809883a 	mov	r4,r3
   1ff58:	00461000 	call	46100 <fprintf>
   1ff5c:	0045fd40 	call	45fd4 <abort>
    secp256k1_fe_verify(a);
   1ff60:	e13ffe17 	ldw	r4,-8(fp)
   1ff64:	001377c0 	call	1377c <secp256k1_fe_verify>
    secp256k1_fe_verify(b);
   1ff68:	e13fff17 	ldw	r4,-4(fp)
   1ff6c:	001377c0 	call	1377c <secp256k1_fe_verify>
    VERIFY_CHECK(r != b);
   1ff70:	e0fffd17 	ldw	r3,-12(fp)
   1ff74:	e0bfff17 	ldw	r2,-4(fp)
   1ff78:	1885003a 	cmpeq	r2,r3,r2
   1ff7c:	10803fcc 	andi	r2,r2,255
   1ff80:	10000d26 	beq	r2,zero,1ffb8 <secp256k1_fe_mul+0x104>
   1ff84:	d0a01617 	ldw	r2,-32680(gp)
   1ff88:	10c00317 	ldw	r3,12(r2)
   1ff8c:	00800174 	movhi	r2,5
   1ff90:	1095bd04 	addi	r2,r2,22260
   1ff94:	d8800015 	stw	r2,0(sp)
   1ff98:	01c10784 	movi	r7,1054
   1ff9c:	01800174 	movhi	r6,5
   1ffa0:	3191dd04 	addi	r6,r6,18292
   1ffa4:	01400174 	movhi	r5,5
   1ffa8:	2951e804 	addi	r5,r5,18336
   1ffac:	1809883a 	mov	r4,r3
   1ffb0:	00461000 	call	46100 <fprintf>
   1ffb4:	0045fd40 	call	45fd4 <abort>
#endif
    secp256k1_fe_mul_inner(r->n, a->n, b->n);
   1ffb8:	e0bffd17 	ldw	r2,-12(fp)
   1ffbc:	e0fffe17 	ldw	r3,-8(fp)
   1ffc0:	e13fff17 	ldw	r4,-4(fp)
   1ffc4:	200d883a 	mov	r6,r4
   1ffc8:	180b883a 	mov	r5,r3
   1ffcc:	1009883a 	mov	r4,r2
   1ffd0:	00160740 	call	16074 <secp256k1_fe_mul_inner>
#ifdef VERIFY
    r->magnitude = 1;
   1ffd4:	e0bffd17 	ldw	r2,-12(fp)
   1ffd8:	00c00044 	movi	r3,1
   1ffdc:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   1ffe0:	e0bffd17 	ldw	r2,-12(fp)
   1ffe4:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   1ffe8:	e13ffd17 	ldw	r4,-12(fp)
   1ffec:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
}
   1fff0:	0001883a 	nop
   1fff4:	e037883a 	mov	sp,fp
   1fff8:	dfc00117 	ldw	ra,4(sp)
   1fffc:	df000017 	ldw	fp,0(sp)
   20000:	dec00204 	addi	sp,sp,8
   20004:	f800283a 	ret

00020008 <secp256k1_fe_sqr>:

static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {
   20008:	defffb04 	addi	sp,sp,-20
   2000c:	dfc00415 	stw	ra,16(sp)
   20010:	df000315 	stw	fp,12(sp)
   20014:	df000304 	addi	fp,sp,12
   20018:	e13ffe15 	stw	r4,-8(fp)
   2001c:	e17fff15 	stw	r5,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->magnitude <= 8);
   20020:	e0bfff17 	ldw	r2,-4(fp)
   20024:	10800a17 	ldw	r2,40(r2)
   20028:	10800248 	cmpgei	r2,r2,9
   2002c:	10803fcc 	andi	r2,r2,255
   20030:	10000d26 	beq	r2,zero,20068 <secp256k1_fe_sqr+0x60>
   20034:	d0a01617 	ldw	r2,-32680(gp)
   20038:	10c00317 	ldw	r3,12(r2)
   2003c:	00800174 	movhi	r2,5
   20040:	1095a704 	addi	r2,r2,22172
   20044:	d8800015 	stw	r2,0(sp)
   20048:	01c10a84 	movi	r7,1066
   2004c:	01800174 	movhi	r6,5
   20050:	3191dd04 	addi	r6,r6,18292
   20054:	01400174 	movhi	r5,5
   20058:	2951e804 	addi	r5,r5,18336
   2005c:	1809883a 	mov	r4,r3
   20060:	00461000 	call	46100 <fprintf>
   20064:	0045fd40 	call	45fd4 <abort>
    secp256k1_fe_verify(a);
   20068:	e13fff17 	ldw	r4,-4(fp)
   2006c:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
    secp256k1_fe_sqr_inner(r->n, a->n);
   20070:	e0bffe17 	ldw	r2,-8(fp)
   20074:	e0ffff17 	ldw	r3,-4(fp)
   20078:	180b883a 	mov	r5,r3
   2007c:	1009883a 	mov	r4,r2
   20080:	001b9dc0 	call	1b9dc <secp256k1_fe_sqr_inner>
#ifdef VERIFY
    r->magnitude = 1;
   20084:	e0bffe17 	ldw	r2,-8(fp)
   20088:	00c00044 	movi	r3,1
   2008c:	10c00a15 	stw	r3,40(r2)
    r->normalized = 0;
   20090:	e0bffe17 	ldw	r2,-8(fp)
   20094:	10000b15 	stw	zero,44(r2)
    secp256k1_fe_verify(r);
   20098:	e13ffe17 	ldw	r4,-8(fp)
   2009c:	001377c0 	call	1377c <secp256k1_fe_verify>
#endif
}
   200a0:	0001883a 	nop
   200a4:	e037883a 	mov	sp,fp
   200a8:	dfc00117 	ldw	ra,4(sp)
   200ac:	df000017 	ldw	fp,0(sp)
   200b0:	dec00204 	addi	sp,sp,8
   200b4:	f800283a 	ret

000200b8 <secp256k1_fe_cmov>:

static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {
   200b8:	defffa04 	addi	sp,sp,-24
   200bc:	df000515 	stw	fp,20(sp)
   200c0:	df000504 	addi	fp,sp,20
   200c4:	e13ffd15 	stw	r4,-12(fp)
   200c8:	e17ffe15 	stw	r5,-8(fp)
   200cc:	e1bfff15 	stw	r6,-4(fp)
    uint32_t mask0, mask1;
    mask0 = flag + ~((uint32_t)0);
   200d0:	e0bfff17 	ldw	r2,-4(fp)
   200d4:	10bfffc4 	addi	r2,r2,-1
   200d8:	e0bffb15 	stw	r2,-20(fp)
    mask1 = ~mask0;
   200dc:	e0bffb17 	ldw	r2,-20(fp)
   200e0:	0084303a 	nor	r2,zero,r2
   200e4:	e0bffc15 	stw	r2,-16(fp)
    r->n[0] = (r->n[0] & mask0) | (a->n[0] & mask1);
   200e8:	e0bffd17 	ldw	r2,-12(fp)
   200ec:	10c00017 	ldw	r3,0(r2)
   200f0:	e0bffb17 	ldw	r2,-20(fp)
   200f4:	1886703a 	and	r3,r3,r2
   200f8:	e0bffe17 	ldw	r2,-8(fp)
   200fc:	11000017 	ldw	r4,0(r2)
   20100:	e0bffc17 	ldw	r2,-16(fp)
   20104:	2084703a 	and	r2,r4,r2
   20108:	1886b03a 	or	r3,r3,r2
   2010c:	e0bffd17 	ldw	r2,-12(fp)
   20110:	10c00015 	stw	r3,0(r2)
    r->n[1] = (r->n[1] & mask0) | (a->n[1] & mask1);
   20114:	e0bffd17 	ldw	r2,-12(fp)
   20118:	10c00117 	ldw	r3,4(r2)
   2011c:	e0bffb17 	ldw	r2,-20(fp)
   20120:	1886703a 	and	r3,r3,r2
   20124:	e0bffe17 	ldw	r2,-8(fp)
   20128:	11000117 	ldw	r4,4(r2)
   2012c:	e0bffc17 	ldw	r2,-16(fp)
   20130:	2084703a 	and	r2,r4,r2
   20134:	1886b03a 	or	r3,r3,r2
   20138:	e0bffd17 	ldw	r2,-12(fp)
   2013c:	10c00115 	stw	r3,4(r2)
    r->n[2] = (r->n[2] & mask0) | (a->n[2] & mask1);
   20140:	e0bffd17 	ldw	r2,-12(fp)
   20144:	10c00217 	ldw	r3,8(r2)
   20148:	e0bffb17 	ldw	r2,-20(fp)
   2014c:	1886703a 	and	r3,r3,r2
   20150:	e0bffe17 	ldw	r2,-8(fp)
   20154:	11000217 	ldw	r4,8(r2)
   20158:	e0bffc17 	ldw	r2,-16(fp)
   2015c:	2084703a 	and	r2,r4,r2
   20160:	1886b03a 	or	r3,r3,r2
   20164:	e0bffd17 	ldw	r2,-12(fp)
   20168:	10c00215 	stw	r3,8(r2)
    r->n[3] = (r->n[3] & mask0) | (a->n[3] & mask1);
   2016c:	e0bffd17 	ldw	r2,-12(fp)
   20170:	10c00317 	ldw	r3,12(r2)
   20174:	e0bffb17 	ldw	r2,-20(fp)
   20178:	1886703a 	and	r3,r3,r2
   2017c:	e0bffe17 	ldw	r2,-8(fp)
   20180:	11000317 	ldw	r4,12(r2)
   20184:	e0bffc17 	ldw	r2,-16(fp)
   20188:	2084703a 	and	r2,r4,r2
   2018c:	1886b03a 	or	r3,r3,r2
   20190:	e0bffd17 	ldw	r2,-12(fp)
   20194:	10c00315 	stw	r3,12(r2)
    r->n[4] = (r->n[4] & mask0) | (a->n[4] & mask1);
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10c00417 	ldw	r3,16(r2)
   201a0:	e0bffb17 	ldw	r2,-20(fp)
   201a4:	1886703a 	and	r3,r3,r2
   201a8:	e0bffe17 	ldw	r2,-8(fp)
   201ac:	11000417 	ldw	r4,16(r2)
   201b0:	e0bffc17 	ldw	r2,-16(fp)
   201b4:	2084703a 	and	r2,r4,r2
   201b8:	1886b03a 	or	r3,r3,r2
   201bc:	e0bffd17 	ldw	r2,-12(fp)
   201c0:	10c00415 	stw	r3,16(r2)
    r->n[5] = (r->n[5] & mask0) | (a->n[5] & mask1);
   201c4:	e0bffd17 	ldw	r2,-12(fp)
   201c8:	10c00517 	ldw	r3,20(r2)
   201cc:	e0bffb17 	ldw	r2,-20(fp)
   201d0:	1886703a 	and	r3,r3,r2
   201d4:	e0bffe17 	ldw	r2,-8(fp)
   201d8:	11000517 	ldw	r4,20(r2)
   201dc:	e0bffc17 	ldw	r2,-16(fp)
   201e0:	2084703a 	and	r2,r4,r2
   201e4:	1886b03a 	or	r3,r3,r2
   201e8:	e0bffd17 	ldw	r2,-12(fp)
   201ec:	10c00515 	stw	r3,20(r2)
    r->n[6] = (r->n[6] & mask0) | (a->n[6] & mask1);
   201f0:	e0bffd17 	ldw	r2,-12(fp)
   201f4:	10c00617 	ldw	r3,24(r2)
   201f8:	e0bffb17 	ldw	r2,-20(fp)
   201fc:	1886703a 	and	r3,r3,r2
   20200:	e0bffe17 	ldw	r2,-8(fp)
   20204:	11000617 	ldw	r4,24(r2)
   20208:	e0bffc17 	ldw	r2,-16(fp)
   2020c:	2084703a 	and	r2,r4,r2
   20210:	1886b03a 	or	r3,r3,r2
   20214:	e0bffd17 	ldw	r2,-12(fp)
   20218:	10c00615 	stw	r3,24(r2)
    r->n[7] = (r->n[7] & mask0) | (a->n[7] & mask1);
   2021c:	e0bffd17 	ldw	r2,-12(fp)
   20220:	10c00717 	ldw	r3,28(r2)
   20224:	e0bffb17 	ldw	r2,-20(fp)
   20228:	1886703a 	and	r3,r3,r2
   2022c:	e0bffe17 	ldw	r2,-8(fp)
   20230:	11000717 	ldw	r4,28(r2)
   20234:	e0bffc17 	ldw	r2,-16(fp)
   20238:	2084703a 	and	r2,r4,r2
   2023c:	1886b03a 	or	r3,r3,r2
   20240:	e0bffd17 	ldw	r2,-12(fp)
   20244:	10c00715 	stw	r3,28(r2)
    r->n[8] = (r->n[8] & mask0) | (a->n[8] & mask1);
   20248:	e0bffd17 	ldw	r2,-12(fp)
   2024c:	10c00817 	ldw	r3,32(r2)
   20250:	e0bffb17 	ldw	r2,-20(fp)
   20254:	1886703a 	and	r3,r3,r2
   20258:	e0bffe17 	ldw	r2,-8(fp)
   2025c:	11000817 	ldw	r4,32(r2)
   20260:	e0bffc17 	ldw	r2,-16(fp)
   20264:	2084703a 	and	r2,r4,r2
   20268:	1886b03a 	or	r3,r3,r2
   2026c:	e0bffd17 	ldw	r2,-12(fp)
   20270:	10c00815 	stw	r3,32(r2)
    r->n[9] = (r->n[9] & mask0) | (a->n[9] & mask1);
   20274:	e0bffd17 	ldw	r2,-12(fp)
   20278:	10c00917 	ldw	r3,36(r2)
   2027c:	e0bffb17 	ldw	r2,-20(fp)
   20280:	1886703a 	and	r3,r3,r2
   20284:	e0bffe17 	ldw	r2,-8(fp)
   20288:	11000917 	ldw	r4,36(r2)
   2028c:	e0bffc17 	ldw	r2,-16(fp)
   20290:	2084703a 	and	r2,r4,r2
   20294:	1886b03a 	or	r3,r3,r2
   20298:	e0bffd17 	ldw	r2,-12(fp)
   2029c:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    if (a->magnitude > r->magnitude) {
   202a0:	e0bffe17 	ldw	r2,-8(fp)
   202a4:	10800a17 	ldw	r2,40(r2)
   202a8:	e0fffd17 	ldw	r3,-12(fp)
   202ac:	18c00a17 	ldw	r3,40(r3)
   202b0:	1880040e 	bge	r3,r2,202c4 <secp256k1_fe_cmov+0x20c>
        r->magnitude = a->magnitude;
   202b4:	e0bffe17 	ldw	r2,-8(fp)
   202b8:	10c00a17 	ldw	r3,40(r2)
   202bc:	e0bffd17 	ldw	r2,-12(fp)
   202c0:	10c00a15 	stw	r3,40(r2)
    }
    r->normalized &= a->normalized;
   202c4:	e0bffd17 	ldw	r2,-12(fp)
   202c8:	10c00b17 	ldw	r3,44(r2)
   202cc:	e0bffe17 	ldw	r2,-8(fp)
   202d0:	10800b17 	ldw	r2,44(r2)
   202d4:	1886703a 	and	r3,r3,r2
   202d8:	e0bffd17 	ldw	r2,-12(fp)
   202dc:	10c00b15 	stw	r3,44(r2)
#endif
}
   202e0:	0001883a 	nop
   202e4:	e037883a 	mov	sp,fp
   202e8:	df000017 	ldw	fp,0(sp)
   202ec:	dec00104 	addi	sp,sp,4
   202f0:	f800283a 	ret

000202f4 <secp256k1_fe_storage_cmov>:

static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {
   202f4:	defffa04 	addi	sp,sp,-24
   202f8:	df000515 	stw	fp,20(sp)
   202fc:	df000504 	addi	fp,sp,20
   20300:	e13ffd15 	stw	r4,-12(fp)
   20304:	e17ffe15 	stw	r5,-8(fp)
   20308:	e1bfff15 	stw	r6,-4(fp)
    uint32_t mask0, mask1;
    mask0 = flag + ~((uint32_t)0);
   2030c:	e0bfff17 	ldw	r2,-4(fp)
   20310:	10bfffc4 	addi	r2,r2,-1
   20314:	e0bffb15 	stw	r2,-20(fp)
    mask1 = ~mask0;
   20318:	e0bffb17 	ldw	r2,-20(fp)
   2031c:	0084303a 	nor	r2,zero,r2
   20320:	e0bffc15 	stw	r2,-16(fp)
    r->n[0] = (r->n[0] & mask0) | (a->n[0] & mask1);
   20324:	e0bffd17 	ldw	r2,-12(fp)
   20328:	10c00017 	ldw	r3,0(r2)
   2032c:	e0bffb17 	ldw	r2,-20(fp)
   20330:	1886703a 	and	r3,r3,r2
   20334:	e0bffe17 	ldw	r2,-8(fp)
   20338:	11000017 	ldw	r4,0(r2)
   2033c:	e0bffc17 	ldw	r2,-16(fp)
   20340:	2084703a 	and	r2,r4,r2
   20344:	1886b03a 	or	r3,r3,r2
   20348:	e0bffd17 	ldw	r2,-12(fp)
   2034c:	10c00015 	stw	r3,0(r2)
    r->n[1] = (r->n[1] & mask0) | (a->n[1] & mask1);
   20350:	e0bffd17 	ldw	r2,-12(fp)
   20354:	10c00117 	ldw	r3,4(r2)
   20358:	e0bffb17 	ldw	r2,-20(fp)
   2035c:	1886703a 	and	r3,r3,r2
   20360:	e0bffe17 	ldw	r2,-8(fp)
   20364:	11000117 	ldw	r4,4(r2)
   20368:	e0bffc17 	ldw	r2,-16(fp)
   2036c:	2084703a 	and	r2,r4,r2
   20370:	1886b03a 	or	r3,r3,r2
   20374:	e0bffd17 	ldw	r2,-12(fp)
   20378:	10c00115 	stw	r3,4(r2)
    r->n[2] = (r->n[2] & mask0) | (a->n[2] & mask1);
   2037c:	e0bffd17 	ldw	r2,-12(fp)
   20380:	10c00217 	ldw	r3,8(r2)
   20384:	e0bffb17 	ldw	r2,-20(fp)
   20388:	1886703a 	and	r3,r3,r2
   2038c:	e0bffe17 	ldw	r2,-8(fp)
   20390:	11000217 	ldw	r4,8(r2)
   20394:	e0bffc17 	ldw	r2,-16(fp)
   20398:	2084703a 	and	r2,r4,r2
   2039c:	1886b03a 	or	r3,r3,r2
   203a0:	e0bffd17 	ldw	r2,-12(fp)
   203a4:	10c00215 	stw	r3,8(r2)
    r->n[3] = (r->n[3] & mask0) | (a->n[3] & mask1);
   203a8:	e0bffd17 	ldw	r2,-12(fp)
   203ac:	10c00317 	ldw	r3,12(r2)
   203b0:	e0bffb17 	ldw	r2,-20(fp)
   203b4:	1886703a 	and	r3,r3,r2
   203b8:	e0bffe17 	ldw	r2,-8(fp)
   203bc:	11000317 	ldw	r4,12(r2)
   203c0:	e0bffc17 	ldw	r2,-16(fp)
   203c4:	2084703a 	and	r2,r4,r2
   203c8:	1886b03a 	or	r3,r3,r2
   203cc:	e0bffd17 	ldw	r2,-12(fp)
   203d0:	10c00315 	stw	r3,12(r2)
    r->n[4] = (r->n[4] & mask0) | (a->n[4] & mask1);
   203d4:	e0bffd17 	ldw	r2,-12(fp)
   203d8:	10c00417 	ldw	r3,16(r2)
   203dc:	e0bffb17 	ldw	r2,-20(fp)
   203e0:	1886703a 	and	r3,r3,r2
   203e4:	e0bffe17 	ldw	r2,-8(fp)
   203e8:	11000417 	ldw	r4,16(r2)
   203ec:	e0bffc17 	ldw	r2,-16(fp)
   203f0:	2084703a 	and	r2,r4,r2
   203f4:	1886b03a 	or	r3,r3,r2
   203f8:	e0bffd17 	ldw	r2,-12(fp)
   203fc:	10c00415 	stw	r3,16(r2)
    r->n[5] = (r->n[5] & mask0) | (a->n[5] & mask1);
   20400:	e0bffd17 	ldw	r2,-12(fp)
   20404:	10c00517 	ldw	r3,20(r2)
   20408:	e0bffb17 	ldw	r2,-20(fp)
   2040c:	1886703a 	and	r3,r3,r2
   20410:	e0bffe17 	ldw	r2,-8(fp)
   20414:	11000517 	ldw	r4,20(r2)
   20418:	e0bffc17 	ldw	r2,-16(fp)
   2041c:	2084703a 	and	r2,r4,r2
   20420:	1886b03a 	or	r3,r3,r2
   20424:	e0bffd17 	ldw	r2,-12(fp)
   20428:	10c00515 	stw	r3,20(r2)
    r->n[6] = (r->n[6] & mask0) | (a->n[6] & mask1);
   2042c:	e0bffd17 	ldw	r2,-12(fp)
   20430:	10c00617 	ldw	r3,24(r2)
   20434:	e0bffb17 	ldw	r2,-20(fp)
   20438:	1886703a 	and	r3,r3,r2
   2043c:	e0bffe17 	ldw	r2,-8(fp)
   20440:	11000617 	ldw	r4,24(r2)
   20444:	e0bffc17 	ldw	r2,-16(fp)
   20448:	2084703a 	and	r2,r4,r2
   2044c:	1886b03a 	or	r3,r3,r2
   20450:	e0bffd17 	ldw	r2,-12(fp)
   20454:	10c00615 	stw	r3,24(r2)
    r->n[7] = (r->n[7] & mask0) | (a->n[7] & mask1);
   20458:	e0bffd17 	ldw	r2,-12(fp)
   2045c:	10c00717 	ldw	r3,28(r2)
   20460:	e0bffb17 	ldw	r2,-20(fp)
   20464:	1886703a 	and	r3,r3,r2
   20468:	e0bffe17 	ldw	r2,-8(fp)
   2046c:	11000717 	ldw	r4,28(r2)
   20470:	e0bffc17 	ldw	r2,-16(fp)
   20474:	2084703a 	and	r2,r4,r2
   20478:	1886b03a 	or	r3,r3,r2
   2047c:	e0bffd17 	ldw	r2,-12(fp)
   20480:	10c00715 	stw	r3,28(r2)
}
   20484:	0001883a 	nop
   20488:	e037883a 	mov	sp,fp
   2048c:	df000017 	ldw	fp,0(sp)
   20490:	dec00104 	addi	sp,sp,4
   20494:	f800283a 	ret

00020498 <secp256k1_fe_to_storage>:

static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {
   20498:	defffb04 	addi	sp,sp,-20
   2049c:	dfc00415 	stw	ra,16(sp)
   204a0:	df000315 	stw	fp,12(sp)
   204a4:	df000304 	addi	fp,sp,12
   204a8:	e13ffe15 	stw	r4,-8(fp)
   204ac:	e17fff15 	stw	r5,-4(fp)
#ifdef VERIFY
    VERIFY_CHECK(a->normalized);
   204b0:	e0bfff17 	ldw	r2,-4(fp)
   204b4:	10800b17 	ldw	r2,44(r2)
   204b8:	1005003a 	cmpeq	r2,r2,zero
   204bc:	10803fcc 	andi	r2,r2,255
   204c0:	10000d26 	beq	r2,zero,204f8 <secp256k1_fe_to_storage+0x60>
   204c4:	d0a01617 	ldw	r2,-32680(gp)
   204c8:	10c00317 	ldw	r3,12(r2)
   204cc:	00800174 	movhi	r2,5
   204d0:	10920704 	addi	r2,r2,18460
   204d4:	d8800015 	stw	r2,0(sp)
   204d8:	01c116c4 	movi	r7,1115
   204dc:	01800174 	movhi	r6,5
   204e0:	3191dd04 	addi	r6,r6,18292
   204e4:	01400174 	movhi	r5,5
   204e8:	2951e804 	addi	r5,r5,18336
   204ec:	1809883a 	mov	r4,r3
   204f0:	00461000 	call	46100 <fprintf>
   204f4:	0045fd40 	call	45fd4 <abort>
#endif
    r->n[0] = a->n[0] | a->n[1] << 26;
   204f8:	e0bfff17 	ldw	r2,-4(fp)
   204fc:	10c00017 	ldw	r3,0(r2)
   20500:	e0bfff17 	ldw	r2,-4(fp)
   20504:	10800117 	ldw	r2,4(r2)
   20508:	100496ba 	slli	r2,r2,26
   2050c:	1886b03a 	or	r3,r3,r2
   20510:	e0bffe17 	ldw	r2,-8(fp)
   20514:	10c00015 	stw	r3,0(r2)
    r->n[1] = a->n[1] >> 6 | a->n[2] << 20;
   20518:	e0bfff17 	ldw	r2,-4(fp)
   2051c:	10800117 	ldw	r2,4(r2)
   20520:	1006d1ba 	srli	r3,r2,6
   20524:	e0bfff17 	ldw	r2,-4(fp)
   20528:	10800217 	ldw	r2,8(r2)
   2052c:	1004953a 	slli	r2,r2,20
   20530:	1886b03a 	or	r3,r3,r2
   20534:	e0bffe17 	ldw	r2,-8(fp)
   20538:	10c00115 	stw	r3,4(r2)
    r->n[2] = a->n[2] >> 12 | a->n[3] << 14;
   2053c:	e0bfff17 	ldw	r2,-4(fp)
   20540:	10800217 	ldw	r2,8(r2)
   20544:	1006d33a 	srli	r3,r2,12
   20548:	e0bfff17 	ldw	r2,-4(fp)
   2054c:	10800317 	ldw	r2,12(r2)
   20550:	100493ba 	slli	r2,r2,14
   20554:	1886b03a 	or	r3,r3,r2
   20558:	e0bffe17 	ldw	r2,-8(fp)
   2055c:	10c00215 	stw	r3,8(r2)
    r->n[3] = a->n[3] >> 18 | a->n[4] << 8;
   20560:	e0bfff17 	ldw	r2,-4(fp)
   20564:	10800317 	ldw	r2,12(r2)
   20568:	1006d4ba 	srli	r3,r2,18
   2056c:	e0bfff17 	ldw	r2,-4(fp)
   20570:	10800417 	ldw	r2,16(r2)
   20574:	1004923a 	slli	r2,r2,8
   20578:	1886b03a 	or	r3,r3,r2
   2057c:	e0bffe17 	ldw	r2,-8(fp)
   20580:	10c00315 	stw	r3,12(r2)
    r->n[4] = a->n[4] >> 24 | a->n[5] << 2 | a->n[6] << 28;
   20584:	e0bfff17 	ldw	r2,-4(fp)
   20588:	10800417 	ldw	r2,16(r2)
   2058c:	1006d63a 	srli	r3,r2,24
   20590:	e0bfff17 	ldw	r2,-4(fp)
   20594:	10800517 	ldw	r2,20(r2)
   20598:	1085883a 	add	r2,r2,r2
   2059c:	1085883a 	add	r2,r2,r2
   205a0:	1886b03a 	or	r3,r3,r2
   205a4:	e0bfff17 	ldw	r2,-4(fp)
   205a8:	10800617 	ldw	r2,24(r2)
   205ac:	1004973a 	slli	r2,r2,28
   205b0:	1886b03a 	or	r3,r3,r2
   205b4:	e0bffe17 	ldw	r2,-8(fp)
   205b8:	10c00415 	stw	r3,16(r2)
    r->n[5] = a->n[6] >> 4 | a->n[7] << 22;
   205bc:	e0bfff17 	ldw	r2,-4(fp)
   205c0:	10800617 	ldw	r2,24(r2)
   205c4:	1006d13a 	srli	r3,r2,4
   205c8:	e0bfff17 	ldw	r2,-4(fp)
   205cc:	10800717 	ldw	r2,28(r2)
   205d0:	100495ba 	slli	r2,r2,22
   205d4:	1886b03a 	or	r3,r3,r2
   205d8:	e0bffe17 	ldw	r2,-8(fp)
   205dc:	10c00515 	stw	r3,20(r2)
    r->n[6] = a->n[7] >> 10 | a->n[8] << 16;
   205e0:	e0bfff17 	ldw	r2,-4(fp)
   205e4:	10800717 	ldw	r2,28(r2)
   205e8:	1006d2ba 	srli	r3,r2,10
   205ec:	e0bfff17 	ldw	r2,-4(fp)
   205f0:	10800817 	ldw	r2,32(r2)
   205f4:	1004943a 	slli	r2,r2,16
   205f8:	1886b03a 	or	r3,r3,r2
   205fc:	e0bffe17 	ldw	r2,-8(fp)
   20600:	10c00615 	stw	r3,24(r2)
    r->n[7] = a->n[8] >> 16 | a->n[9] << 10;
   20604:	e0bfff17 	ldw	r2,-4(fp)
   20608:	10800817 	ldw	r2,32(r2)
   2060c:	1006d43a 	srli	r3,r2,16
   20610:	e0bfff17 	ldw	r2,-4(fp)
   20614:	10800917 	ldw	r2,36(r2)
   20618:	100492ba 	slli	r2,r2,10
   2061c:	1886b03a 	or	r3,r3,r2
   20620:	e0bffe17 	ldw	r2,-8(fp)
   20624:	10c00715 	stw	r3,28(r2)
}
   20628:	0001883a 	nop
   2062c:	e037883a 	mov	sp,fp
   20630:	dfc00117 	ldw	ra,4(sp)
   20634:	df000017 	ldw	fp,0(sp)
   20638:	dec00204 	addi	sp,sp,8
   2063c:	f800283a 	ret

00020640 <secp256k1_fe_from_storage>:

static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {
   20640:	defffd04 	addi	sp,sp,-12
   20644:	df000215 	stw	fp,8(sp)
   20648:	df000204 	addi	fp,sp,8
   2064c:	e13ffe15 	stw	r4,-8(fp)
   20650:	e17fff15 	stw	r5,-4(fp)
    r->n[0] = a->n[0] & 0x3FFFFFFUL;
   20654:	e0bfff17 	ldw	r2,-4(fp)
   20658:	10c00017 	ldw	r3,0(r2)
   2065c:	00810034 	movhi	r2,1024
   20660:	10bfffc4 	addi	r2,r2,-1
   20664:	1886703a 	and	r3,r3,r2
   20668:	e0bffe17 	ldw	r2,-8(fp)
   2066c:	10c00015 	stw	r3,0(r2)
    r->n[1] = a->n[0] >> 26 | ((a->n[1] << 6) & 0x3FFFFFFUL);
   20670:	e0bfff17 	ldw	r2,-4(fp)
   20674:	10800017 	ldw	r2,0(r2)
   20678:	1006d6ba 	srli	r3,r2,26
   2067c:	e0bfff17 	ldw	r2,-4(fp)
   20680:	10800117 	ldw	r2,4(r2)
   20684:	100891ba 	slli	r4,r2,6
   20688:	00810034 	movhi	r2,1024
   2068c:	10bfffc4 	addi	r2,r2,-1
   20690:	2084703a 	and	r2,r4,r2
   20694:	1886b03a 	or	r3,r3,r2
   20698:	e0bffe17 	ldw	r2,-8(fp)
   2069c:	10c00115 	stw	r3,4(r2)
    r->n[2] = a->n[1] >> 20 | ((a->n[2] << 12) & 0x3FFFFFFUL);
   206a0:	e0bfff17 	ldw	r2,-4(fp)
   206a4:	10800117 	ldw	r2,4(r2)
   206a8:	1006d53a 	srli	r3,r2,20
   206ac:	e0bfff17 	ldw	r2,-4(fp)
   206b0:	10800217 	ldw	r2,8(r2)
   206b4:	1008933a 	slli	r4,r2,12
   206b8:	00810034 	movhi	r2,1024
   206bc:	10bfffc4 	addi	r2,r2,-1
   206c0:	2084703a 	and	r2,r4,r2
   206c4:	1886b03a 	or	r3,r3,r2
   206c8:	e0bffe17 	ldw	r2,-8(fp)
   206cc:	10c00215 	stw	r3,8(r2)
    r->n[3] = a->n[2] >> 14 | ((a->n[3] << 18) & 0x3FFFFFFUL);
   206d0:	e0bfff17 	ldw	r2,-4(fp)
   206d4:	10800217 	ldw	r2,8(r2)
   206d8:	1006d3ba 	srli	r3,r2,14
   206dc:	e0bfff17 	ldw	r2,-4(fp)
   206e0:	10800317 	ldw	r2,12(r2)
   206e4:	100894ba 	slli	r4,r2,18
   206e8:	00810034 	movhi	r2,1024
   206ec:	10bfffc4 	addi	r2,r2,-1
   206f0:	2084703a 	and	r2,r4,r2
   206f4:	1886b03a 	or	r3,r3,r2
   206f8:	e0bffe17 	ldw	r2,-8(fp)
   206fc:	10c00315 	stw	r3,12(r2)
    r->n[4] = a->n[3] >> 8 | ((a->n[4] << 24) & 0x3FFFFFFUL);
   20700:	e0bfff17 	ldw	r2,-4(fp)
   20704:	10800317 	ldw	r2,12(r2)
   20708:	1006d23a 	srli	r3,r2,8
   2070c:	e0bfff17 	ldw	r2,-4(fp)
   20710:	10800417 	ldw	r2,16(r2)
   20714:	1008963a 	slli	r4,r2,24
   20718:	00810034 	movhi	r2,1024
   2071c:	10bfffc4 	addi	r2,r2,-1
   20720:	2084703a 	and	r2,r4,r2
   20724:	1886b03a 	or	r3,r3,r2
   20728:	e0bffe17 	ldw	r2,-8(fp)
   2072c:	10c00415 	stw	r3,16(r2)
    r->n[5] = (a->n[4] >> 2) & 0x3FFFFFFUL;
   20730:	e0bfff17 	ldw	r2,-4(fp)
   20734:	10800417 	ldw	r2,16(r2)
   20738:	1006d0ba 	srli	r3,r2,2
   2073c:	00810034 	movhi	r2,1024
   20740:	10bfffc4 	addi	r2,r2,-1
   20744:	1886703a 	and	r3,r3,r2
   20748:	e0bffe17 	ldw	r2,-8(fp)
   2074c:	10c00515 	stw	r3,20(r2)
    r->n[6] = a->n[4] >> 28 | ((a->n[5] << 4) & 0x3FFFFFFUL);
   20750:	e0bfff17 	ldw	r2,-4(fp)
   20754:	10800417 	ldw	r2,16(r2)
   20758:	1006d73a 	srli	r3,r2,28
   2075c:	e0bfff17 	ldw	r2,-4(fp)
   20760:	10800517 	ldw	r2,20(r2)
   20764:	1008913a 	slli	r4,r2,4
   20768:	00810034 	movhi	r2,1024
   2076c:	10bfffc4 	addi	r2,r2,-1
   20770:	2084703a 	and	r2,r4,r2
   20774:	1886b03a 	or	r3,r3,r2
   20778:	e0bffe17 	ldw	r2,-8(fp)
   2077c:	10c00615 	stw	r3,24(r2)
    r->n[7] = a->n[5] >> 22 | ((a->n[6] << 10) & 0x3FFFFFFUL);
   20780:	e0bfff17 	ldw	r2,-4(fp)
   20784:	10800517 	ldw	r2,20(r2)
   20788:	1006d5ba 	srli	r3,r2,22
   2078c:	e0bfff17 	ldw	r2,-4(fp)
   20790:	10800617 	ldw	r2,24(r2)
   20794:	100892ba 	slli	r4,r2,10
   20798:	00810034 	movhi	r2,1024
   2079c:	10bfffc4 	addi	r2,r2,-1
   207a0:	2084703a 	and	r2,r4,r2
   207a4:	1886b03a 	or	r3,r3,r2
   207a8:	e0bffe17 	ldw	r2,-8(fp)
   207ac:	10c00715 	stw	r3,28(r2)
    r->n[8] = a->n[6] >> 16 | ((a->n[7] << 16) & 0x3FFFFFFUL);
   207b0:	e0bfff17 	ldw	r2,-4(fp)
   207b4:	10800617 	ldw	r2,24(r2)
   207b8:	1006d43a 	srli	r3,r2,16
   207bc:	e0bfff17 	ldw	r2,-4(fp)
   207c0:	10800717 	ldw	r2,28(r2)
   207c4:	1008943a 	slli	r4,r2,16
   207c8:	00810034 	movhi	r2,1024
   207cc:	10bfffc4 	addi	r2,r2,-1
   207d0:	2084703a 	and	r2,r4,r2
   207d4:	1886b03a 	or	r3,r3,r2
   207d8:	e0bffe17 	ldw	r2,-8(fp)
   207dc:	10c00815 	stw	r3,32(r2)
    r->n[9] = a->n[7] >> 10;
   207e0:	e0bfff17 	ldw	r2,-4(fp)
   207e4:	10800717 	ldw	r2,28(r2)
   207e8:	1006d2ba 	srli	r3,r2,10
   207ec:	e0bffe17 	ldw	r2,-8(fp)
   207f0:	10c00915 	stw	r3,36(r2)
#ifdef VERIFY
    r->magnitude = 1;
   207f4:	e0bffe17 	ldw	r2,-8(fp)
   207f8:	00c00044 	movi	r3,1
   207fc:	10c00a15 	stw	r3,40(r2)
    r->normalized = 1;
   20800:	e0bffe17 	ldw	r2,-8(fp)
   20804:	00c00044 	movi	r3,1
   20808:	10c00b15 	stw	r3,44(r2)
#endif
}
   2080c:	0001883a 	nop
   20810:	e037883a 	mov	sp,fp
   20814:	df000017 	ldw	fp,0(sp)
   20818:	dec00104 	addi	sp,sp,4
   2081c:	f800283a 	ret

00020820 <secp256k1_fe_equal>:
#include "field_5x52_impl.h"
#else
#error "Please select field implementation"
#endif

SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {
   20820:	defff004 	addi	sp,sp,-64
   20824:	dfc00f15 	stw	ra,60(sp)
   20828:	df000e15 	stw	fp,56(sp)
   2082c:	df000e04 	addi	fp,sp,56
   20830:	e13ffe15 	stw	r4,-8(fp)
   20834:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe na;
    secp256k1_fe_negate(&na, a, 1);
   20838:	01800044 	movi	r6,1
   2083c:	e17ffe17 	ldw	r5,-8(fp)
   20840:	e13ff204 	addi	r4,fp,-56
   20844:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_add(&na, b);
   20848:	e17fff17 	ldw	r5,-4(fp)
   2084c:	e13ff204 	addi	r4,fp,-56
   20850:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    return secp256k1_fe_normalizes_to_zero(&na);
   20854:	e13ff204 	addi	r4,fp,-56
   20858:	0014a640 	call	14a64 <secp256k1_fe_normalizes_to_zero>
}
   2085c:	e037883a 	mov	sp,fp
   20860:	dfc00117 	ldw	ra,4(sp)
   20864:	df000017 	ldw	fp,0(sp)
   20868:	dec00204 	addi	sp,sp,8
   2086c:	f800283a 	ret

00020870 <secp256k1_fe_equal_var>:

SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b) {
   20870:	defff004 	addi	sp,sp,-64
   20874:	dfc00f15 	stw	ra,60(sp)
   20878:	df000e15 	stw	fp,56(sp)
   2087c:	df000e04 	addi	fp,sp,56
   20880:	e13ffe15 	stw	r4,-8(fp)
   20884:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe na;
    secp256k1_fe_negate(&na, a, 1);
   20888:	01800044 	movi	r6,1
   2088c:	e17ffe17 	ldw	r5,-8(fp)
   20890:	e13ff204 	addi	r4,fp,-56
   20894:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_add(&na, b);
   20898:	e17fff17 	ldw	r5,-4(fp)
   2089c:	e13ff204 	addi	r4,fp,-56
   208a0:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    return secp256k1_fe_normalizes_to_zero_var(&na);
   208a4:	e13ff204 	addi	r4,fp,-56
   208a8:	0014e640 	call	14e64 <secp256k1_fe_normalizes_to_zero_var>
}
   208ac:	e037883a 	mov	sp,fp
   208b0:	dfc00117 	ldw	ra,4(sp)
   208b4:	df000017 	ldw	fp,0(sp)
   208b8:	dec00204 	addi	sp,sp,8
   208bc:	f800283a 	ret

000208c0 <secp256k1_fe_sqrt>:

static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {
   208c0:	deff6b04 	addi	sp,sp,-596
   208c4:	dfc09415 	stw	ra,592(sp)
   208c8:	df009315 	stw	fp,588(sp)
   208cc:	df009304 	addi	fp,sp,588
   208d0:	e13ffe15 	stw	r4,-8(fp)
   208d4:	e17fff15 	stw	r5,-4(fp)
    /** The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in
     *  { 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block:
     *  1, [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]
     */

    secp256k1_fe_sqr(&x2, a);
   208d8:	e0bf6e04 	addi	r2,fp,-584
   208dc:	e17fff17 	ldw	r5,-4(fp)
   208e0:	1009883a 	mov	r4,r2
   208e4:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x2, &x2, a);
   208e8:	e0ff6e04 	addi	r3,fp,-584
   208ec:	e0bf6e04 	addi	r2,fp,-584
   208f0:	e1bfff17 	ldw	r6,-4(fp)
   208f4:	180b883a 	mov	r5,r3
   208f8:	1009883a 	mov	r4,r2
   208fc:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    secp256k1_fe_sqr(&x3, &x2);
   20900:	e0ff6e04 	addi	r3,fp,-584
   20904:	e0bf7a04 	addi	r2,fp,-536
   20908:	180b883a 	mov	r5,r3
   2090c:	1009883a 	mov	r4,r2
   20910:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x3, &x3, a);
   20914:	e0ff7a04 	addi	r3,fp,-536
   20918:	e0bf7a04 	addi	r2,fp,-536
   2091c:	e1bfff17 	ldw	r6,-4(fp)
   20920:	180b883a 	mov	r5,r3
   20924:	1009883a 	mov	r4,r2
   20928:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x6 = x3;
   2092c:	e0bf7a17 	ldw	r2,-536(fp)
   20930:	e0bf8615 	stw	r2,-488(fp)
   20934:	e0bf7b17 	ldw	r2,-532(fp)
   20938:	e0bf8715 	stw	r2,-484(fp)
   2093c:	e0bf7c17 	ldw	r2,-528(fp)
   20940:	e0bf8815 	stw	r2,-480(fp)
   20944:	e0bf7d17 	ldw	r2,-524(fp)
   20948:	e0bf8915 	stw	r2,-476(fp)
   2094c:	e0bf7e17 	ldw	r2,-520(fp)
   20950:	e0bf8a15 	stw	r2,-472(fp)
   20954:	e0bf7f17 	ldw	r2,-516(fp)
   20958:	e0bf8b15 	stw	r2,-468(fp)
   2095c:	e0bf8017 	ldw	r2,-512(fp)
   20960:	e0bf8c15 	stw	r2,-464(fp)
   20964:	e0bf8117 	ldw	r2,-508(fp)
   20968:	e0bf8d15 	stw	r2,-460(fp)
   2096c:	e0bf8217 	ldw	r2,-504(fp)
   20970:	e0bf8e15 	stw	r2,-456(fp)
   20974:	e0bf8317 	ldw	r2,-500(fp)
   20978:	e0bf8f15 	stw	r2,-452(fp)
   2097c:	e0bf8417 	ldw	r2,-496(fp)
   20980:	e0bf9015 	stw	r2,-448(fp)
   20984:	e0bf8517 	ldw	r2,-492(fp)
   20988:	e0bf9115 	stw	r2,-444(fp)
    for (j=0; j<3; j++) {
   2098c:	e03f6d15 	stw	zero,-588(fp)
   20990:	00000806 	br	209b4 <secp256k1_fe_sqrt+0xf4>
        secp256k1_fe_sqr(&x6, &x6);
   20994:	e0ff8604 	addi	r3,fp,-488
   20998:	e0bf8604 	addi	r2,fp,-488
   2099c:	180b883a 	mov	r5,r3
   209a0:	1009883a 	mov	r4,r2
   209a4:	00200080 	call	20008 <secp256k1_fe_sqr>

    secp256k1_fe_sqr(&x3, &x2);
    secp256k1_fe_mul(&x3, &x3, a);

    x6 = x3;
    for (j=0; j<3; j++) {
   209a8:	e0bf6d17 	ldw	r2,-588(fp)
   209ac:	10800044 	addi	r2,r2,1
   209b0:	e0bf6d15 	stw	r2,-588(fp)
   209b4:	e0bf6d17 	ldw	r2,-588(fp)
   209b8:	108000d0 	cmplti	r2,r2,3
   209bc:	103ff51e 	bne	r2,zero,20994 <__alt_mem_epcs_flash_controller+0xfe017994>
        secp256k1_fe_sqr(&x6, &x6);
    }
    secp256k1_fe_mul(&x6, &x6, &x3);
   209c0:	e13f7a04 	addi	r4,fp,-536
   209c4:	e0ff8604 	addi	r3,fp,-488
   209c8:	e0bf8604 	addi	r2,fp,-488
   209cc:	200d883a 	mov	r6,r4
   209d0:	180b883a 	mov	r5,r3
   209d4:	1009883a 	mov	r4,r2
   209d8:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x9 = x6;
   209dc:	e0bf8617 	ldw	r2,-488(fp)
   209e0:	e0bf9215 	stw	r2,-440(fp)
   209e4:	e0bf8717 	ldw	r2,-484(fp)
   209e8:	e0bf9315 	stw	r2,-436(fp)
   209ec:	e0bf8817 	ldw	r2,-480(fp)
   209f0:	e0bf9415 	stw	r2,-432(fp)
   209f4:	e0bf8917 	ldw	r2,-476(fp)
   209f8:	e0bf9515 	stw	r2,-428(fp)
   209fc:	e0bf8a17 	ldw	r2,-472(fp)
   20a00:	e0bf9615 	stw	r2,-424(fp)
   20a04:	e0bf8b17 	ldw	r2,-468(fp)
   20a08:	e0bf9715 	stw	r2,-420(fp)
   20a0c:	e0bf8c17 	ldw	r2,-464(fp)
   20a10:	e0bf9815 	stw	r2,-416(fp)
   20a14:	e0bf8d17 	ldw	r2,-460(fp)
   20a18:	e0bf9915 	stw	r2,-412(fp)
   20a1c:	e0bf8e17 	ldw	r2,-456(fp)
   20a20:	e0bf9a15 	stw	r2,-408(fp)
   20a24:	e0bf8f17 	ldw	r2,-452(fp)
   20a28:	e0bf9b15 	stw	r2,-404(fp)
   20a2c:	e0bf9017 	ldw	r2,-448(fp)
   20a30:	e0bf9c15 	stw	r2,-400(fp)
   20a34:	e0bf9117 	ldw	r2,-444(fp)
   20a38:	e0bf9d15 	stw	r2,-396(fp)
    for (j=0; j<3; j++) {
   20a3c:	e03f6d15 	stw	zero,-588(fp)
   20a40:	00000806 	br	20a64 <secp256k1_fe_sqrt+0x1a4>
        secp256k1_fe_sqr(&x9, &x9);
   20a44:	e0ff9204 	addi	r3,fp,-440
   20a48:	e0bf9204 	addi	r2,fp,-440
   20a4c:	180b883a 	mov	r5,r3
   20a50:	1009883a 	mov	r4,r2
   20a54:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x6, &x6);
    }
    secp256k1_fe_mul(&x6, &x6, &x3);

    x9 = x6;
    for (j=0; j<3; j++) {
   20a58:	e0bf6d17 	ldw	r2,-588(fp)
   20a5c:	10800044 	addi	r2,r2,1
   20a60:	e0bf6d15 	stw	r2,-588(fp)
   20a64:	e0bf6d17 	ldw	r2,-588(fp)
   20a68:	108000d0 	cmplti	r2,r2,3
   20a6c:	103ff51e 	bne	r2,zero,20a44 <__alt_mem_epcs_flash_controller+0xfe017a44>
        secp256k1_fe_sqr(&x9, &x9);
    }
    secp256k1_fe_mul(&x9, &x9, &x3);
   20a70:	e13f7a04 	addi	r4,fp,-536
   20a74:	e0ff9204 	addi	r3,fp,-440
   20a78:	e0bf9204 	addi	r2,fp,-440
   20a7c:	200d883a 	mov	r6,r4
   20a80:	180b883a 	mov	r5,r3
   20a84:	1009883a 	mov	r4,r2
   20a88:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x11 = x9;
   20a8c:	e0bf9217 	ldw	r2,-440(fp)
   20a90:	e0bf9e15 	stw	r2,-392(fp)
   20a94:	e0bf9317 	ldw	r2,-436(fp)
   20a98:	e0bf9f15 	stw	r2,-388(fp)
   20a9c:	e0bf9417 	ldw	r2,-432(fp)
   20aa0:	e0bfa015 	stw	r2,-384(fp)
   20aa4:	e0bf9517 	ldw	r2,-428(fp)
   20aa8:	e0bfa115 	stw	r2,-380(fp)
   20aac:	e0bf9617 	ldw	r2,-424(fp)
   20ab0:	e0bfa215 	stw	r2,-376(fp)
   20ab4:	e0bf9717 	ldw	r2,-420(fp)
   20ab8:	e0bfa315 	stw	r2,-372(fp)
   20abc:	e0bf9817 	ldw	r2,-416(fp)
   20ac0:	e0bfa415 	stw	r2,-368(fp)
   20ac4:	e0bf9917 	ldw	r2,-412(fp)
   20ac8:	e0bfa515 	stw	r2,-364(fp)
   20acc:	e0bf9a17 	ldw	r2,-408(fp)
   20ad0:	e0bfa615 	stw	r2,-360(fp)
   20ad4:	e0bf9b17 	ldw	r2,-404(fp)
   20ad8:	e0bfa715 	stw	r2,-356(fp)
   20adc:	e0bf9c17 	ldw	r2,-400(fp)
   20ae0:	e0bfa815 	stw	r2,-352(fp)
   20ae4:	e0bf9d17 	ldw	r2,-396(fp)
   20ae8:	e0bfa915 	stw	r2,-348(fp)
    for (j=0; j<2; j++) {
   20aec:	e03f6d15 	stw	zero,-588(fp)
   20af0:	00000806 	br	20b14 <secp256k1_fe_sqrt+0x254>
        secp256k1_fe_sqr(&x11, &x11);
   20af4:	e0ff9e04 	addi	r3,fp,-392
   20af8:	e0bf9e04 	addi	r2,fp,-392
   20afc:	180b883a 	mov	r5,r3
   20b00:	1009883a 	mov	r4,r2
   20b04:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x9, &x9);
    }
    secp256k1_fe_mul(&x9, &x9, &x3);

    x11 = x9;
    for (j=0; j<2; j++) {
   20b08:	e0bf6d17 	ldw	r2,-588(fp)
   20b0c:	10800044 	addi	r2,r2,1
   20b10:	e0bf6d15 	stw	r2,-588(fp)
   20b14:	e0bf6d17 	ldw	r2,-588(fp)
   20b18:	10800090 	cmplti	r2,r2,2
   20b1c:	103ff51e 	bne	r2,zero,20af4 <__alt_mem_epcs_flash_controller+0xfe017af4>
        secp256k1_fe_sqr(&x11, &x11);
    }
    secp256k1_fe_mul(&x11, &x11, &x2);
   20b20:	e13f6e04 	addi	r4,fp,-584
   20b24:	e0ff9e04 	addi	r3,fp,-392
   20b28:	e0bf9e04 	addi	r2,fp,-392
   20b2c:	200d883a 	mov	r6,r4
   20b30:	180b883a 	mov	r5,r3
   20b34:	1009883a 	mov	r4,r2
   20b38:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x22 = x11;
   20b3c:	e0bf9e17 	ldw	r2,-392(fp)
   20b40:	e0bfaa15 	stw	r2,-344(fp)
   20b44:	e0bf9f17 	ldw	r2,-388(fp)
   20b48:	e0bfab15 	stw	r2,-340(fp)
   20b4c:	e0bfa017 	ldw	r2,-384(fp)
   20b50:	e0bfac15 	stw	r2,-336(fp)
   20b54:	e0bfa117 	ldw	r2,-380(fp)
   20b58:	e0bfad15 	stw	r2,-332(fp)
   20b5c:	e0bfa217 	ldw	r2,-376(fp)
   20b60:	e0bfae15 	stw	r2,-328(fp)
   20b64:	e0bfa317 	ldw	r2,-372(fp)
   20b68:	e0bfaf15 	stw	r2,-324(fp)
   20b6c:	e0bfa417 	ldw	r2,-368(fp)
   20b70:	e0bfb015 	stw	r2,-320(fp)
   20b74:	e0bfa517 	ldw	r2,-364(fp)
   20b78:	e0bfb115 	stw	r2,-316(fp)
   20b7c:	e0bfa617 	ldw	r2,-360(fp)
   20b80:	e0bfb215 	stw	r2,-312(fp)
   20b84:	e0bfa717 	ldw	r2,-356(fp)
   20b88:	e0bfb315 	stw	r2,-308(fp)
   20b8c:	e0bfa817 	ldw	r2,-352(fp)
   20b90:	e0bfb415 	stw	r2,-304(fp)
   20b94:	e0bfa917 	ldw	r2,-348(fp)
   20b98:	e0bfb515 	stw	r2,-300(fp)
    for (j=0; j<11; j++) {
   20b9c:	e03f6d15 	stw	zero,-588(fp)
   20ba0:	00000806 	br	20bc4 <secp256k1_fe_sqrt+0x304>
        secp256k1_fe_sqr(&x22, &x22);
   20ba4:	e0ffaa04 	addi	r3,fp,-344
   20ba8:	e0bfaa04 	addi	r2,fp,-344
   20bac:	180b883a 	mov	r5,r3
   20bb0:	1009883a 	mov	r4,r2
   20bb4:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x11, &x11);
    }
    secp256k1_fe_mul(&x11, &x11, &x2);

    x22 = x11;
    for (j=0; j<11; j++) {
   20bb8:	e0bf6d17 	ldw	r2,-588(fp)
   20bbc:	10800044 	addi	r2,r2,1
   20bc0:	e0bf6d15 	stw	r2,-588(fp)
   20bc4:	e0bf6d17 	ldw	r2,-588(fp)
   20bc8:	108002d0 	cmplti	r2,r2,11
   20bcc:	103ff51e 	bne	r2,zero,20ba4 <__alt_mem_epcs_flash_controller+0xfe017ba4>
        secp256k1_fe_sqr(&x22, &x22);
    }
    secp256k1_fe_mul(&x22, &x22, &x11);
   20bd0:	e13f9e04 	addi	r4,fp,-392
   20bd4:	e0ffaa04 	addi	r3,fp,-344
   20bd8:	e0bfaa04 	addi	r2,fp,-344
   20bdc:	200d883a 	mov	r6,r4
   20be0:	180b883a 	mov	r5,r3
   20be4:	1009883a 	mov	r4,r2
   20be8:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x44 = x22;
   20bec:	e0bfaa17 	ldw	r2,-344(fp)
   20bf0:	e0bfb615 	stw	r2,-296(fp)
   20bf4:	e0bfab17 	ldw	r2,-340(fp)
   20bf8:	e0bfb715 	stw	r2,-292(fp)
   20bfc:	e0bfac17 	ldw	r2,-336(fp)
   20c00:	e0bfb815 	stw	r2,-288(fp)
   20c04:	e0bfad17 	ldw	r2,-332(fp)
   20c08:	e0bfb915 	stw	r2,-284(fp)
   20c0c:	e0bfae17 	ldw	r2,-328(fp)
   20c10:	e0bfba15 	stw	r2,-280(fp)
   20c14:	e0bfaf17 	ldw	r2,-324(fp)
   20c18:	e0bfbb15 	stw	r2,-276(fp)
   20c1c:	e0bfb017 	ldw	r2,-320(fp)
   20c20:	e0bfbc15 	stw	r2,-272(fp)
   20c24:	e0bfb117 	ldw	r2,-316(fp)
   20c28:	e0bfbd15 	stw	r2,-268(fp)
   20c2c:	e0bfb217 	ldw	r2,-312(fp)
   20c30:	e0bfbe15 	stw	r2,-264(fp)
   20c34:	e0bfb317 	ldw	r2,-308(fp)
   20c38:	e0bfbf15 	stw	r2,-260(fp)
   20c3c:	e0bfb417 	ldw	r2,-304(fp)
   20c40:	e0bfc015 	stw	r2,-256(fp)
   20c44:	e0bfb517 	ldw	r2,-300(fp)
   20c48:	e0bfc115 	stw	r2,-252(fp)
    for (j=0; j<22; j++) {
   20c4c:	e03f6d15 	stw	zero,-588(fp)
   20c50:	00000806 	br	20c74 <secp256k1_fe_sqrt+0x3b4>
        secp256k1_fe_sqr(&x44, &x44);
   20c54:	e0ffb604 	addi	r3,fp,-296
   20c58:	e0bfb604 	addi	r2,fp,-296
   20c5c:	180b883a 	mov	r5,r3
   20c60:	1009883a 	mov	r4,r2
   20c64:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x22, &x22);
    }
    secp256k1_fe_mul(&x22, &x22, &x11);

    x44 = x22;
    for (j=0; j<22; j++) {
   20c68:	e0bf6d17 	ldw	r2,-588(fp)
   20c6c:	10800044 	addi	r2,r2,1
   20c70:	e0bf6d15 	stw	r2,-588(fp)
   20c74:	e0bf6d17 	ldw	r2,-588(fp)
   20c78:	10800590 	cmplti	r2,r2,22
   20c7c:	103ff51e 	bne	r2,zero,20c54 <__alt_mem_epcs_flash_controller+0xfe017c54>
        secp256k1_fe_sqr(&x44, &x44);
    }
    secp256k1_fe_mul(&x44, &x44, &x22);
   20c80:	e13faa04 	addi	r4,fp,-344
   20c84:	e0ffb604 	addi	r3,fp,-296
   20c88:	e0bfb604 	addi	r2,fp,-296
   20c8c:	200d883a 	mov	r6,r4
   20c90:	180b883a 	mov	r5,r3
   20c94:	1009883a 	mov	r4,r2
   20c98:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x88 = x44;
   20c9c:	e0bfb617 	ldw	r2,-296(fp)
   20ca0:	e0bfc215 	stw	r2,-248(fp)
   20ca4:	e0bfb717 	ldw	r2,-292(fp)
   20ca8:	e0bfc315 	stw	r2,-244(fp)
   20cac:	e0bfb817 	ldw	r2,-288(fp)
   20cb0:	e0bfc415 	stw	r2,-240(fp)
   20cb4:	e0bfb917 	ldw	r2,-284(fp)
   20cb8:	e0bfc515 	stw	r2,-236(fp)
   20cbc:	e0bfba17 	ldw	r2,-280(fp)
   20cc0:	e0bfc615 	stw	r2,-232(fp)
   20cc4:	e0bfbb17 	ldw	r2,-276(fp)
   20cc8:	e0bfc715 	stw	r2,-228(fp)
   20ccc:	e0bfbc17 	ldw	r2,-272(fp)
   20cd0:	e0bfc815 	stw	r2,-224(fp)
   20cd4:	e0bfbd17 	ldw	r2,-268(fp)
   20cd8:	e0bfc915 	stw	r2,-220(fp)
   20cdc:	e0bfbe17 	ldw	r2,-264(fp)
   20ce0:	e0bfca15 	stw	r2,-216(fp)
   20ce4:	e0bfbf17 	ldw	r2,-260(fp)
   20ce8:	e0bfcb15 	stw	r2,-212(fp)
   20cec:	e0bfc017 	ldw	r2,-256(fp)
   20cf0:	e0bfcc15 	stw	r2,-208(fp)
   20cf4:	e0bfc117 	ldw	r2,-252(fp)
   20cf8:	e0bfcd15 	stw	r2,-204(fp)
    for (j=0; j<44; j++) {
   20cfc:	e03f6d15 	stw	zero,-588(fp)
   20d00:	00000806 	br	20d24 <secp256k1_fe_sqrt+0x464>
        secp256k1_fe_sqr(&x88, &x88);
   20d04:	e0ffc204 	addi	r3,fp,-248
   20d08:	e0bfc204 	addi	r2,fp,-248
   20d0c:	180b883a 	mov	r5,r3
   20d10:	1009883a 	mov	r4,r2
   20d14:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x44, &x44);
    }
    secp256k1_fe_mul(&x44, &x44, &x22);

    x88 = x44;
    for (j=0; j<44; j++) {
   20d18:	e0bf6d17 	ldw	r2,-588(fp)
   20d1c:	10800044 	addi	r2,r2,1
   20d20:	e0bf6d15 	stw	r2,-588(fp)
   20d24:	e0bf6d17 	ldw	r2,-588(fp)
   20d28:	10800b10 	cmplti	r2,r2,44
   20d2c:	103ff51e 	bne	r2,zero,20d04 <__alt_mem_epcs_flash_controller+0xfe017d04>
        secp256k1_fe_sqr(&x88, &x88);
    }
    secp256k1_fe_mul(&x88, &x88, &x44);
   20d30:	e13fb604 	addi	r4,fp,-296
   20d34:	e0ffc204 	addi	r3,fp,-248
   20d38:	e0bfc204 	addi	r2,fp,-248
   20d3c:	200d883a 	mov	r6,r4
   20d40:	180b883a 	mov	r5,r3
   20d44:	1009883a 	mov	r4,r2
   20d48:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x176 = x88;
   20d4c:	e0bfc217 	ldw	r2,-248(fp)
   20d50:	e0bfce15 	stw	r2,-200(fp)
   20d54:	e0bfc317 	ldw	r2,-244(fp)
   20d58:	e0bfcf15 	stw	r2,-196(fp)
   20d5c:	e0bfc417 	ldw	r2,-240(fp)
   20d60:	e0bfd015 	stw	r2,-192(fp)
   20d64:	e0bfc517 	ldw	r2,-236(fp)
   20d68:	e0bfd115 	stw	r2,-188(fp)
   20d6c:	e0bfc617 	ldw	r2,-232(fp)
   20d70:	e0bfd215 	stw	r2,-184(fp)
   20d74:	e0bfc717 	ldw	r2,-228(fp)
   20d78:	e0bfd315 	stw	r2,-180(fp)
   20d7c:	e0bfc817 	ldw	r2,-224(fp)
   20d80:	e0bfd415 	stw	r2,-176(fp)
   20d84:	e0bfc917 	ldw	r2,-220(fp)
   20d88:	e0bfd515 	stw	r2,-172(fp)
   20d8c:	e0bfca17 	ldw	r2,-216(fp)
   20d90:	e0bfd615 	stw	r2,-168(fp)
   20d94:	e0bfcb17 	ldw	r2,-212(fp)
   20d98:	e0bfd715 	stw	r2,-164(fp)
   20d9c:	e0bfcc17 	ldw	r2,-208(fp)
   20da0:	e0bfd815 	stw	r2,-160(fp)
   20da4:	e0bfcd17 	ldw	r2,-204(fp)
   20da8:	e0bfd915 	stw	r2,-156(fp)
    for (j=0; j<88; j++) {
   20dac:	e03f6d15 	stw	zero,-588(fp)
   20db0:	00000806 	br	20dd4 <secp256k1_fe_sqrt+0x514>
        secp256k1_fe_sqr(&x176, &x176);
   20db4:	e0ffce04 	addi	r3,fp,-200
   20db8:	e0bfce04 	addi	r2,fp,-200
   20dbc:	180b883a 	mov	r5,r3
   20dc0:	1009883a 	mov	r4,r2
   20dc4:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x88, &x88);
    }
    secp256k1_fe_mul(&x88, &x88, &x44);

    x176 = x88;
    for (j=0; j<88; j++) {
   20dc8:	e0bf6d17 	ldw	r2,-588(fp)
   20dcc:	10800044 	addi	r2,r2,1
   20dd0:	e0bf6d15 	stw	r2,-588(fp)
   20dd4:	e0bf6d17 	ldw	r2,-588(fp)
   20dd8:	10801610 	cmplti	r2,r2,88
   20ddc:	103ff51e 	bne	r2,zero,20db4 <__alt_mem_epcs_flash_controller+0xfe017db4>
        secp256k1_fe_sqr(&x176, &x176);
    }
    secp256k1_fe_mul(&x176, &x176, &x88);
   20de0:	e13fc204 	addi	r4,fp,-248
   20de4:	e0ffce04 	addi	r3,fp,-200
   20de8:	e0bfce04 	addi	r2,fp,-200
   20dec:	200d883a 	mov	r6,r4
   20df0:	180b883a 	mov	r5,r3
   20df4:	1009883a 	mov	r4,r2
   20df8:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x220 = x176;
   20dfc:	e0bfce17 	ldw	r2,-200(fp)
   20e00:	e0bfda15 	stw	r2,-152(fp)
   20e04:	e0bfcf17 	ldw	r2,-196(fp)
   20e08:	e0bfdb15 	stw	r2,-148(fp)
   20e0c:	e0bfd017 	ldw	r2,-192(fp)
   20e10:	e0bfdc15 	stw	r2,-144(fp)
   20e14:	e0bfd117 	ldw	r2,-188(fp)
   20e18:	e0bfdd15 	stw	r2,-140(fp)
   20e1c:	e0bfd217 	ldw	r2,-184(fp)
   20e20:	e0bfde15 	stw	r2,-136(fp)
   20e24:	e0bfd317 	ldw	r2,-180(fp)
   20e28:	e0bfdf15 	stw	r2,-132(fp)
   20e2c:	e0bfd417 	ldw	r2,-176(fp)
   20e30:	e0bfe015 	stw	r2,-128(fp)
   20e34:	e0bfd517 	ldw	r2,-172(fp)
   20e38:	e0bfe115 	stw	r2,-124(fp)
   20e3c:	e0bfd617 	ldw	r2,-168(fp)
   20e40:	e0bfe215 	stw	r2,-120(fp)
   20e44:	e0bfd717 	ldw	r2,-164(fp)
   20e48:	e0bfe315 	stw	r2,-116(fp)
   20e4c:	e0bfd817 	ldw	r2,-160(fp)
   20e50:	e0bfe415 	stw	r2,-112(fp)
   20e54:	e0bfd917 	ldw	r2,-156(fp)
   20e58:	e0bfe515 	stw	r2,-108(fp)
    for (j=0; j<44; j++) {
   20e5c:	e03f6d15 	stw	zero,-588(fp)
   20e60:	00000806 	br	20e84 <secp256k1_fe_sqrt+0x5c4>
        secp256k1_fe_sqr(&x220, &x220);
   20e64:	e0ffda04 	addi	r3,fp,-152
   20e68:	e0bfda04 	addi	r2,fp,-152
   20e6c:	180b883a 	mov	r5,r3
   20e70:	1009883a 	mov	r4,r2
   20e74:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x176, &x176);
    }
    secp256k1_fe_mul(&x176, &x176, &x88);

    x220 = x176;
    for (j=0; j<44; j++) {
   20e78:	e0bf6d17 	ldw	r2,-588(fp)
   20e7c:	10800044 	addi	r2,r2,1
   20e80:	e0bf6d15 	stw	r2,-588(fp)
   20e84:	e0bf6d17 	ldw	r2,-588(fp)
   20e88:	10800b10 	cmplti	r2,r2,44
   20e8c:	103ff51e 	bne	r2,zero,20e64 <__alt_mem_epcs_flash_controller+0xfe017e64>
        secp256k1_fe_sqr(&x220, &x220);
    }
    secp256k1_fe_mul(&x220, &x220, &x44);
   20e90:	e13fb604 	addi	r4,fp,-296
   20e94:	e0ffda04 	addi	r3,fp,-152
   20e98:	e0bfda04 	addi	r2,fp,-152
   20e9c:	200d883a 	mov	r6,r4
   20ea0:	180b883a 	mov	r5,r3
   20ea4:	1009883a 	mov	r4,r2
   20ea8:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x223 = x220;
   20eac:	e0bfda17 	ldw	r2,-152(fp)
   20eb0:	e0bfe615 	stw	r2,-104(fp)
   20eb4:	e0bfdb17 	ldw	r2,-148(fp)
   20eb8:	e0bfe715 	stw	r2,-100(fp)
   20ebc:	e0bfdc17 	ldw	r2,-144(fp)
   20ec0:	e0bfe815 	stw	r2,-96(fp)
   20ec4:	e0bfdd17 	ldw	r2,-140(fp)
   20ec8:	e0bfe915 	stw	r2,-92(fp)
   20ecc:	e0bfde17 	ldw	r2,-136(fp)
   20ed0:	e0bfea15 	stw	r2,-88(fp)
   20ed4:	e0bfdf17 	ldw	r2,-132(fp)
   20ed8:	e0bfeb15 	stw	r2,-84(fp)
   20edc:	e0bfe017 	ldw	r2,-128(fp)
   20ee0:	e0bfec15 	stw	r2,-80(fp)
   20ee4:	e0bfe117 	ldw	r2,-124(fp)
   20ee8:	e0bfed15 	stw	r2,-76(fp)
   20eec:	e0bfe217 	ldw	r2,-120(fp)
   20ef0:	e0bfee15 	stw	r2,-72(fp)
   20ef4:	e0bfe317 	ldw	r2,-116(fp)
   20ef8:	e0bfef15 	stw	r2,-68(fp)
   20efc:	e0bfe417 	ldw	r2,-112(fp)
   20f00:	e0bff015 	stw	r2,-64(fp)
   20f04:	e0bfe517 	ldw	r2,-108(fp)
   20f08:	e0bff115 	stw	r2,-60(fp)
    for (j=0; j<3; j++) {
   20f0c:	e03f6d15 	stw	zero,-588(fp)
   20f10:	00000806 	br	20f34 <secp256k1_fe_sqrt+0x674>
        secp256k1_fe_sqr(&x223, &x223);
   20f14:	e0ffe604 	addi	r3,fp,-104
   20f18:	e0bfe604 	addi	r2,fp,-104
   20f1c:	180b883a 	mov	r5,r3
   20f20:	1009883a 	mov	r4,r2
   20f24:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x220, &x220);
    }
    secp256k1_fe_mul(&x220, &x220, &x44);

    x223 = x220;
    for (j=0; j<3; j++) {
   20f28:	e0bf6d17 	ldw	r2,-588(fp)
   20f2c:	10800044 	addi	r2,r2,1
   20f30:	e0bf6d15 	stw	r2,-588(fp)
   20f34:	e0bf6d17 	ldw	r2,-588(fp)
   20f38:	108000d0 	cmplti	r2,r2,3
   20f3c:	103ff51e 	bne	r2,zero,20f14 <__alt_mem_epcs_flash_controller+0xfe017f14>
        secp256k1_fe_sqr(&x223, &x223);
    }
    secp256k1_fe_mul(&x223, &x223, &x3);
   20f40:	e13f7a04 	addi	r4,fp,-536
   20f44:	e0ffe604 	addi	r3,fp,-104
   20f48:	e0bfe604 	addi	r2,fp,-104
   20f4c:	200d883a 	mov	r6,r4
   20f50:	180b883a 	mov	r5,r3
   20f54:	1009883a 	mov	r4,r2
   20f58:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    /* The final result is then assembled using a sliding window over the blocks. */

    t1 = x223;
   20f5c:	e0bfe617 	ldw	r2,-104(fp)
   20f60:	e0bff215 	stw	r2,-56(fp)
   20f64:	e0bfe717 	ldw	r2,-100(fp)
   20f68:	e0bff315 	stw	r2,-52(fp)
   20f6c:	e0bfe817 	ldw	r2,-96(fp)
   20f70:	e0bff415 	stw	r2,-48(fp)
   20f74:	e0bfe917 	ldw	r2,-92(fp)
   20f78:	e0bff515 	stw	r2,-44(fp)
   20f7c:	e0bfea17 	ldw	r2,-88(fp)
   20f80:	e0bff615 	stw	r2,-40(fp)
   20f84:	e0bfeb17 	ldw	r2,-84(fp)
   20f88:	e0bff715 	stw	r2,-36(fp)
   20f8c:	e0bfec17 	ldw	r2,-80(fp)
   20f90:	e0bff815 	stw	r2,-32(fp)
   20f94:	e0bfed17 	ldw	r2,-76(fp)
   20f98:	e0bff915 	stw	r2,-28(fp)
   20f9c:	e0bfee17 	ldw	r2,-72(fp)
   20fa0:	e0bffa15 	stw	r2,-24(fp)
   20fa4:	e0bfef17 	ldw	r2,-68(fp)
   20fa8:	e0bffb15 	stw	r2,-20(fp)
   20fac:	e0bff017 	ldw	r2,-64(fp)
   20fb0:	e0bffc15 	stw	r2,-16(fp)
   20fb4:	e0bff117 	ldw	r2,-60(fp)
   20fb8:	e0bffd15 	stw	r2,-12(fp)
    for (j=0; j<23; j++) {
   20fbc:	e03f6d15 	stw	zero,-588(fp)
   20fc0:	00000806 	br	20fe4 <secp256k1_fe_sqrt+0x724>
        secp256k1_fe_sqr(&t1, &t1);
   20fc4:	e0fff204 	addi	r3,fp,-56
   20fc8:	e0bff204 	addi	r2,fp,-56
   20fcc:	180b883a 	mov	r5,r3
   20fd0:	1009883a 	mov	r4,r2
   20fd4:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x223, &x223, &x3);

    /* The final result is then assembled using a sliding window over the blocks. */

    t1 = x223;
    for (j=0; j<23; j++) {
   20fd8:	e0bf6d17 	ldw	r2,-588(fp)
   20fdc:	10800044 	addi	r2,r2,1
   20fe0:	e0bf6d15 	stw	r2,-588(fp)
   20fe4:	e0bf6d17 	ldw	r2,-588(fp)
   20fe8:	108005d0 	cmplti	r2,r2,23
   20fec:	103ff51e 	bne	r2,zero,20fc4 <__alt_mem_epcs_flash_controller+0xfe017fc4>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x22);
   20ff0:	e13faa04 	addi	r4,fp,-344
   20ff4:	e0fff204 	addi	r3,fp,-56
   20ff8:	e0bff204 	addi	r2,fp,-56
   20ffc:	200d883a 	mov	r6,r4
   21000:	180b883a 	mov	r5,r3
   21004:	1009883a 	mov	r4,r2
   21008:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    for (j=0; j<6; j++) {
   2100c:	e03f6d15 	stw	zero,-588(fp)
   21010:	00000806 	br	21034 <secp256k1_fe_sqrt+0x774>
        secp256k1_fe_sqr(&t1, &t1);
   21014:	e0fff204 	addi	r3,fp,-56
   21018:	e0bff204 	addi	r2,fp,-56
   2101c:	180b883a 	mov	r5,r3
   21020:	1009883a 	mov	r4,r2
   21024:	00200080 	call	20008 <secp256k1_fe_sqr>
    t1 = x223;
    for (j=0; j<23; j++) {
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x22);
    for (j=0; j<6; j++) {
   21028:	e0bf6d17 	ldw	r2,-588(fp)
   2102c:	10800044 	addi	r2,r2,1
   21030:	e0bf6d15 	stw	r2,-588(fp)
   21034:	e0bf6d17 	ldw	r2,-588(fp)
   21038:	10800190 	cmplti	r2,r2,6
   2103c:	103ff51e 	bne	r2,zero,21014 <__alt_mem_epcs_flash_controller+0xfe018014>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x2);
   21040:	e13f6e04 	addi	r4,fp,-584
   21044:	e0fff204 	addi	r3,fp,-56
   21048:	e0bff204 	addi	r2,fp,-56
   2104c:	200d883a 	mov	r6,r4
   21050:	180b883a 	mov	r5,r3
   21054:	1009883a 	mov	r4,r2
   21058:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_sqr(&t1, &t1);
   2105c:	e0fff204 	addi	r3,fp,-56
   21060:	e0bff204 	addi	r2,fp,-56
   21064:	180b883a 	mov	r5,r3
   21068:	1009883a 	mov	r4,r2
   2106c:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(r, &t1);
   21070:	e0bff204 	addi	r2,fp,-56
   21074:	100b883a 	mov	r5,r2
   21078:	e13ffe17 	ldw	r4,-8(fp)
   2107c:	00200080 	call	20008 <secp256k1_fe_sqr>

    /* Check that a square root was actually calculated */

    secp256k1_fe_sqr(&t1, r);
   21080:	e0bff204 	addi	r2,fp,-56
   21084:	e17ffe17 	ldw	r5,-8(fp)
   21088:	1009883a 	mov	r4,r2
   2108c:	00200080 	call	20008 <secp256k1_fe_sqr>
    return secp256k1_fe_equal(&t1, a);
   21090:	e0bff204 	addi	r2,fp,-56
   21094:	e17fff17 	ldw	r5,-4(fp)
   21098:	1009883a 	mov	r4,r2
   2109c:	00208200 	call	20820 <secp256k1_fe_equal>
}
   210a0:	e037883a 	mov	sp,fp
   210a4:	dfc00117 	ldw	ra,4(sp)
   210a8:	df000017 	ldw	fp,0(sp)
   210ac:	dec00204 	addi	sp,sp,8
   210b0:	f800283a 	ret

000210b4 <secp256k1_fe_inv>:

static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {
   210b4:	deff6b04 	addi	sp,sp,-596
   210b8:	dfc09415 	stw	ra,592(sp)
   210bc:	df009315 	stw	fp,588(sp)
   210c0:	df009304 	addi	fp,sp,588
   210c4:	e13ffe15 	stw	r4,-8(fp)
   210c8:	e17fff15 	stw	r5,-4(fp)
    /** The binary representation of (p - 2) has 5 blocks of 1s, with lengths in
     *  { 1, 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block:
     *  [1], [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]
     */

    secp256k1_fe_sqr(&x2, a);
   210cc:	e0bf6e04 	addi	r2,fp,-584
   210d0:	e17fff17 	ldw	r5,-4(fp)
   210d4:	1009883a 	mov	r4,r2
   210d8:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x2, &x2, a);
   210dc:	e0ff6e04 	addi	r3,fp,-584
   210e0:	e0bf6e04 	addi	r2,fp,-584
   210e4:	e1bfff17 	ldw	r6,-4(fp)
   210e8:	180b883a 	mov	r5,r3
   210ec:	1009883a 	mov	r4,r2
   210f0:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    secp256k1_fe_sqr(&x3, &x2);
   210f4:	e0ff6e04 	addi	r3,fp,-584
   210f8:	e0bf7a04 	addi	r2,fp,-536
   210fc:	180b883a 	mov	r5,r3
   21100:	1009883a 	mov	r4,r2
   21104:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x3, &x3, a);
   21108:	e0ff7a04 	addi	r3,fp,-536
   2110c:	e0bf7a04 	addi	r2,fp,-536
   21110:	e1bfff17 	ldw	r6,-4(fp)
   21114:	180b883a 	mov	r5,r3
   21118:	1009883a 	mov	r4,r2
   2111c:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x6 = x3;
   21120:	e0bf7a17 	ldw	r2,-536(fp)
   21124:	e0bf8615 	stw	r2,-488(fp)
   21128:	e0bf7b17 	ldw	r2,-532(fp)
   2112c:	e0bf8715 	stw	r2,-484(fp)
   21130:	e0bf7c17 	ldw	r2,-528(fp)
   21134:	e0bf8815 	stw	r2,-480(fp)
   21138:	e0bf7d17 	ldw	r2,-524(fp)
   2113c:	e0bf8915 	stw	r2,-476(fp)
   21140:	e0bf7e17 	ldw	r2,-520(fp)
   21144:	e0bf8a15 	stw	r2,-472(fp)
   21148:	e0bf7f17 	ldw	r2,-516(fp)
   2114c:	e0bf8b15 	stw	r2,-468(fp)
   21150:	e0bf8017 	ldw	r2,-512(fp)
   21154:	e0bf8c15 	stw	r2,-464(fp)
   21158:	e0bf8117 	ldw	r2,-508(fp)
   2115c:	e0bf8d15 	stw	r2,-460(fp)
   21160:	e0bf8217 	ldw	r2,-504(fp)
   21164:	e0bf8e15 	stw	r2,-456(fp)
   21168:	e0bf8317 	ldw	r2,-500(fp)
   2116c:	e0bf8f15 	stw	r2,-452(fp)
   21170:	e0bf8417 	ldw	r2,-496(fp)
   21174:	e0bf9015 	stw	r2,-448(fp)
   21178:	e0bf8517 	ldw	r2,-492(fp)
   2117c:	e0bf9115 	stw	r2,-444(fp)
    for (j=0; j<3; j++) {
   21180:	e03f6d15 	stw	zero,-588(fp)
   21184:	00000806 	br	211a8 <secp256k1_fe_inv+0xf4>
        secp256k1_fe_sqr(&x6, &x6);
   21188:	e0ff8604 	addi	r3,fp,-488
   2118c:	e0bf8604 	addi	r2,fp,-488
   21190:	180b883a 	mov	r5,r3
   21194:	1009883a 	mov	r4,r2
   21198:	00200080 	call	20008 <secp256k1_fe_sqr>

    secp256k1_fe_sqr(&x3, &x2);
    secp256k1_fe_mul(&x3, &x3, a);

    x6 = x3;
    for (j=0; j<3; j++) {
   2119c:	e0bf6d17 	ldw	r2,-588(fp)
   211a0:	10800044 	addi	r2,r2,1
   211a4:	e0bf6d15 	stw	r2,-588(fp)
   211a8:	e0bf6d17 	ldw	r2,-588(fp)
   211ac:	108000d0 	cmplti	r2,r2,3
   211b0:	103ff51e 	bne	r2,zero,21188 <__alt_mem_epcs_flash_controller+0xfe018188>
        secp256k1_fe_sqr(&x6, &x6);
    }
    secp256k1_fe_mul(&x6, &x6, &x3);
   211b4:	e13f7a04 	addi	r4,fp,-536
   211b8:	e0ff8604 	addi	r3,fp,-488
   211bc:	e0bf8604 	addi	r2,fp,-488
   211c0:	200d883a 	mov	r6,r4
   211c4:	180b883a 	mov	r5,r3
   211c8:	1009883a 	mov	r4,r2
   211cc:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x9 = x6;
   211d0:	e0bf8617 	ldw	r2,-488(fp)
   211d4:	e0bf9215 	stw	r2,-440(fp)
   211d8:	e0bf8717 	ldw	r2,-484(fp)
   211dc:	e0bf9315 	stw	r2,-436(fp)
   211e0:	e0bf8817 	ldw	r2,-480(fp)
   211e4:	e0bf9415 	stw	r2,-432(fp)
   211e8:	e0bf8917 	ldw	r2,-476(fp)
   211ec:	e0bf9515 	stw	r2,-428(fp)
   211f0:	e0bf8a17 	ldw	r2,-472(fp)
   211f4:	e0bf9615 	stw	r2,-424(fp)
   211f8:	e0bf8b17 	ldw	r2,-468(fp)
   211fc:	e0bf9715 	stw	r2,-420(fp)
   21200:	e0bf8c17 	ldw	r2,-464(fp)
   21204:	e0bf9815 	stw	r2,-416(fp)
   21208:	e0bf8d17 	ldw	r2,-460(fp)
   2120c:	e0bf9915 	stw	r2,-412(fp)
   21210:	e0bf8e17 	ldw	r2,-456(fp)
   21214:	e0bf9a15 	stw	r2,-408(fp)
   21218:	e0bf8f17 	ldw	r2,-452(fp)
   2121c:	e0bf9b15 	stw	r2,-404(fp)
   21220:	e0bf9017 	ldw	r2,-448(fp)
   21224:	e0bf9c15 	stw	r2,-400(fp)
   21228:	e0bf9117 	ldw	r2,-444(fp)
   2122c:	e0bf9d15 	stw	r2,-396(fp)
    for (j=0; j<3; j++) {
   21230:	e03f6d15 	stw	zero,-588(fp)
   21234:	00000806 	br	21258 <secp256k1_fe_inv+0x1a4>
        secp256k1_fe_sqr(&x9, &x9);
   21238:	e0ff9204 	addi	r3,fp,-440
   2123c:	e0bf9204 	addi	r2,fp,-440
   21240:	180b883a 	mov	r5,r3
   21244:	1009883a 	mov	r4,r2
   21248:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x6, &x6);
    }
    secp256k1_fe_mul(&x6, &x6, &x3);

    x9 = x6;
    for (j=0; j<3; j++) {
   2124c:	e0bf6d17 	ldw	r2,-588(fp)
   21250:	10800044 	addi	r2,r2,1
   21254:	e0bf6d15 	stw	r2,-588(fp)
   21258:	e0bf6d17 	ldw	r2,-588(fp)
   2125c:	108000d0 	cmplti	r2,r2,3
   21260:	103ff51e 	bne	r2,zero,21238 <__alt_mem_epcs_flash_controller+0xfe018238>
        secp256k1_fe_sqr(&x9, &x9);
    }
    secp256k1_fe_mul(&x9, &x9, &x3);
   21264:	e13f7a04 	addi	r4,fp,-536
   21268:	e0ff9204 	addi	r3,fp,-440
   2126c:	e0bf9204 	addi	r2,fp,-440
   21270:	200d883a 	mov	r6,r4
   21274:	180b883a 	mov	r5,r3
   21278:	1009883a 	mov	r4,r2
   2127c:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x11 = x9;
   21280:	e0bf9217 	ldw	r2,-440(fp)
   21284:	e0bf9e15 	stw	r2,-392(fp)
   21288:	e0bf9317 	ldw	r2,-436(fp)
   2128c:	e0bf9f15 	stw	r2,-388(fp)
   21290:	e0bf9417 	ldw	r2,-432(fp)
   21294:	e0bfa015 	stw	r2,-384(fp)
   21298:	e0bf9517 	ldw	r2,-428(fp)
   2129c:	e0bfa115 	stw	r2,-380(fp)
   212a0:	e0bf9617 	ldw	r2,-424(fp)
   212a4:	e0bfa215 	stw	r2,-376(fp)
   212a8:	e0bf9717 	ldw	r2,-420(fp)
   212ac:	e0bfa315 	stw	r2,-372(fp)
   212b0:	e0bf9817 	ldw	r2,-416(fp)
   212b4:	e0bfa415 	stw	r2,-368(fp)
   212b8:	e0bf9917 	ldw	r2,-412(fp)
   212bc:	e0bfa515 	stw	r2,-364(fp)
   212c0:	e0bf9a17 	ldw	r2,-408(fp)
   212c4:	e0bfa615 	stw	r2,-360(fp)
   212c8:	e0bf9b17 	ldw	r2,-404(fp)
   212cc:	e0bfa715 	stw	r2,-356(fp)
   212d0:	e0bf9c17 	ldw	r2,-400(fp)
   212d4:	e0bfa815 	stw	r2,-352(fp)
   212d8:	e0bf9d17 	ldw	r2,-396(fp)
   212dc:	e0bfa915 	stw	r2,-348(fp)
    for (j=0; j<2; j++) {
   212e0:	e03f6d15 	stw	zero,-588(fp)
   212e4:	00000806 	br	21308 <secp256k1_fe_inv+0x254>
        secp256k1_fe_sqr(&x11, &x11);
   212e8:	e0ff9e04 	addi	r3,fp,-392
   212ec:	e0bf9e04 	addi	r2,fp,-392
   212f0:	180b883a 	mov	r5,r3
   212f4:	1009883a 	mov	r4,r2
   212f8:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x9, &x9);
    }
    secp256k1_fe_mul(&x9, &x9, &x3);

    x11 = x9;
    for (j=0; j<2; j++) {
   212fc:	e0bf6d17 	ldw	r2,-588(fp)
   21300:	10800044 	addi	r2,r2,1
   21304:	e0bf6d15 	stw	r2,-588(fp)
   21308:	e0bf6d17 	ldw	r2,-588(fp)
   2130c:	10800090 	cmplti	r2,r2,2
   21310:	103ff51e 	bne	r2,zero,212e8 <__alt_mem_epcs_flash_controller+0xfe0182e8>
        secp256k1_fe_sqr(&x11, &x11);
    }
    secp256k1_fe_mul(&x11, &x11, &x2);
   21314:	e13f6e04 	addi	r4,fp,-584
   21318:	e0ff9e04 	addi	r3,fp,-392
   2131c:	e0bf9e04 	addi	r2,fp,-392
   21320:	200d883a 	mov	r6,r4
   21324:	180b883a 	mov	r5,r3
   21328:	1009883a 	mov	r4,r2
   2132c:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x22 = x11;
   21330:	e0bf9e17 	ldw	r2,-392(fp)
   21334:	e0bfaa15 	stw	r2,-344(fp)
   21338:	e0bf9f17 	ldw	r2,-388(fp)
   2133c:	e0bfab15 	stw	r2,-340(fp)
   21340:	e0bfa017 	ldw	r2,-384(fp)
   21344:	e0bfac15 	stw	r2,-336(fp)
   21348:	e0bfa117 	ldw	r2,-380(fp)
   2134c:	e0bfad15 	stw	r2,-332(fp)
   21350:	e0bfa217 	ldw	r2,-376(fp)
   21354:	e0bfae15 	stw	r2,-328(fp)
   21358:	e0bfa317 	ldw	r2,-372(fp)
   2135c:	e0bfaf15 	stw	r2,-324(fp)
   21360:	e0bfa417 	ldw	r2,-368(fp)
   21364:	e0bfb015 	stw	r2,-320(fp)
   21368:	e0bfa517 	ldw	r2,-364(fp)
   2136c:	e0bfb115 	stw	r2,-316(fp)
   21370:	e0bfa617 	ldw	r2,-360(fp)
   21374:	e0bfb215 	stw	r2,-312(fp)
   21378:	e0bfa717 	ldw	r2,-356(fp)
   2137c:	e0bfb315 	stw	r2,-308(fp)
   21380:	e0bfa817 	ldw	r2,-352(fp)
   21384:	e0bfb415 	stw	r2,-304(fp)
   21388:	e0bfa917 	ldw	r2,-348(fp)
   2138c:	e0bfb515 	stw	r2,-300(fp)
    for (j=0; j<11; j++) {
   21390:	e03f6d15 	stw	zero,-588(fp)
   21394:	00000806 	br	213b8 <secp256k1_fe_inv+0x304>
        secp256k1_fe_sqr(&x22, &x22);
   21398:	e0ffaa04 	addi	r3,fp,-344
   2139c:	e0bfaa04 	addi	r2,fp,-344
   213a0:	180b883a 	mov	r5,r3
   213a4:	1009883a 	mov	r4,r2
   213a8:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x11, &x11);
    }
    secp256k1_fe_mul(&x11, &x11, &x2);

    x22 = x11;
    for (j=0; j<11; j++) {
   213ac:	e0bf6d17 	ldw	r2,-588(fp)
   213b0:	10800044 	addi	r2,r2,1
   213b4:	e0bf6d15 	stw	r2,-588(fp)
   213b8:	e0bf6d17 	ldw	r2,-588(fp)
   213bc:	108002d0 	cmplti	r2,r2,11
   213c0:	103ff51e 	bne	r2,zero,21398 <__alt_mem_epcs_flash_controller+0xfe018398>
        secp256k1_fe_sqr(&x22, &x22);
    }
    secp256k1_fe_mul(&x22, &x22, &x11);
   213c4:	e13f9e04 	addi	r4,fp,-392
   213c8:	e0ffaa04 	addi	r3,fp,-344
   213cc:	e0bfaa04 	addi	r2,fp,-344
   213d0:	200d883a 	mov	r6,r4
   213d4:	180b883a 	mov	r5,r3
   213d8:	1009883a 	mov	r4,r2
   213dc:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x44 = x22;
   213e0:	e0bfaa17 	ldw	r2,-344(fp)
   213e4:	e0bfb615 	stw	r2,-296(fp)
   213e8:	e0bfab17 	ldw	r2,-340(fp)
   213ec:	e0bfb715 	stw	r2,-292(fp)
   213f0:	e0bfac17 	ldw	r2,-336(fp)
   213f4:	e0bfb815 	stw	r2,-288(fp)
   213f8:	e0bfad17 	ldw	r2,-332(fp)
   213fc:	e0bfb915 	stw	r2,-284(fp)
   21400:	e0bfae17 	ldw	r2,-328(fp)
   21404:	e0bfba15 	stw	r2,-280(fp)
   21408:	e0bfaf17 	ldw	r2,-324(fp)
   2140c:	e0bfbb15 	stw	r2,-276(fp)
   21410:	e0bfb017 	ldw	r2,-320(fp)
   21414:	e0bfbc15 	stw	r2,-272(fp)
   21418:	e0bfb117 	ldw	r2,-316(fp)
   2141c:	e0bfbd15 	stw	r2,-268(fp)
   21420:	e0bfb217 	ldw	r2,-312(fp)
   21424:	e0bfbe15 	stw	r2,-264(fp)
   21428:	e0bfb317 	ldw	r2,-308(fp)
   2142c:	e0bfbf15 	stw	r2,-260(fp)
   21430:	e0bfb417 	ldw	r2,-304(fp)
   21434:	e0bfc015 	stw	r2,-256(fp)
   21438:	e0bfb517 	ldw	r2,-300(fp)
   2143c:	e0bfc115 	stw	r2,-252(fp)
    for (j=0; j<22; j++) {
   21440:	e03f6d15 	stw	zero,-588(fp)
   21444:	00000806 	br	21468 <secp256k1_fe_inv+0x3b4>
        secp256k1_fe_sqr(&x44, &x44);
   21448:	e0ffb604 	addi	r3,fp,-296
   2144c:	e0bfb604 	addi	r2,fp,-296
   21450:	180b883a 	mov	r5,r3
   21454:	1009883a 	mov	r4,r2
   21458:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x22, &x22);
    }
    secp256k1_fe_mul(&x22, &x22, &x11);

    x44 = x22;
    for (j=0; j<22; j++) {
   2145c:	e0bf6d17 	ldw	r2,-588(fp)
   21460:	10800044 	addi	r2,r2,1
   21464:	e0bf6d15 	stw	r2,-588(fp)
   21468:	e0bf6d17 	ldw	r2,-588(fp)
   2146c:	10800590 	cmplti	r2,r2,22
   21470:	103ff51e 	bne	r2,zero,21448 <__alt_mem_epcs_flash_controller+0xfe018448>
        secp256k1_fe_sqr(&x44, &x44);
    }
    secp256k1_fe_mul(&x44, &x44, &x22);
   21474:	e13faa04 	addi	r4,fp,-344
   21478:	e0ffb604 	addi	r3,fp,-296
   2147c:	e0bfb604 	addi	r2,fp,-296
   21480:	200d883a 	mov	r6,r4
   21484:	180b883a 	mov	r5,r3
   21488:	1009883a 	mov	r4,r2
   2148c:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x88 = x44;
   21490:	e0bfb617 	ldw	r2,-296(fp)
   21494:	e0bfc215 	stw	r2,-248(fp)
   21498:	e0bfb717 	ldw	r2,-292(fp)
   2149c:	e0bfc315 	stw	r2,-244(fp)
   214a0:	e0bfb817 	ldw	r2,-288(fp)
   214a4:	e0bfc415 	stw	r2,-240(fp)
   214a8:	e0bfb917 	ldw	r2,-284(fp)
   214ac:	e0bfc515 	stw	r2,-236(fp)
   214b0:	e0bfba17 	ldw	r2,-280(fp)
   214b4:	e0bfc615 	stw	r2,-232(fp)
   214b8:	e0bfbb17 	ldw	r2,-276(fp)
   214bc:	e0bfc715 	stw	r2,-228(fp)
   214c0:	e0bfbc17 	ldw	r2,-272(fp)
   214c4:	e0bfc815 	stw	r2,-224(fp)
   214c8:	e0bfbd17 	ldw	r2,-268(fp)
   214cc:	e0bfc915 	stw	r2,-220(fp)
   214d0:	e0bfbe17 	ldw	r2,-264(fp)
   214d4:	e0bfca15 	stw	r2,-216(fp)
   214d8:	e0bfbf17 	ldw	r2,-260(fp)
   214dc:	e0bfcb15 	stw	r2,-212(fp)
   214e0:	e0bfc017 	ldw	r2,-256(fp)
   214e4:	e0bfcc15 	stw	r2,-208(fp)
   214e8:	e0bfc117 	ldw	r2,-252(fp)
   214ec:	e0bfcd15 	stw	r2,-204(fp)
    for (j=0; j<44; j++) {
   214f0:	e03f6d15 	stw	zero,-588(fp)
   214f4:	00000806 	br	21518 <secp256k1_fe_inv+0x464>
        secp256k1_fe_sqr(&x88, &x88);
   214f8:	e0ffc204 	addi	r3,fp,-248
   214fc:	e0bfc204 	addi	r2,fp,-248
   21500:	180b883a 	mov	r5,r3
   21504:	1009883a 	mov	r4,r2
   21508:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x44, &x44);
    }
    secp256k1_fe_mul(&x44, &x44, &x22);

    x88 = x44;
    for (j=0; j<44; j++) {
   2150c:	e0bf6d17 	ldw	r2,-588(fp)
   21510:	10800044 	addi	r2,r2,1
   21514:	e0bf6d15 	stw	r2,-588(fp)
   21518:	e0bf6d17 	ldw	r2,-588(fp)
   2151c:	10800b10 	cmplti	r2,r2,44
   21520:	103ff51e 	bne	r2,zero,214f8 <__alt_mem_epcs_flash_controller+0xfe0184f8>
        secp256k1_fe_sqr(&x88, &x88);
    }
    secp256k1_fe_mul(&x88, &x88, &x44);
   21524:	e13fb604 	addi	r4,fp,-296
   21528:	e0ffc204 	addi	r3,fp,-248
   2152c:	e0bfc204 	addi	r2,fp,-248
   21530:	200d883a 	mov	r6,r4
   21534:	180b883a 	mov	r5,r3
   21538:	1009883a 	mov	r4,r2
   2153c:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x176 = x88;
   21540:	e0bfc217 	ldw	r2,-248(fp)
   21544:	e0bfce15 	stw	r2,-200(fp)
   21548:	e0bfc317 	ldw	r2,-244(fp)
   2154c:	e0bfcf15 	stw	r2,-196(fp)
   21550:	e0bfc417 	ldw	r2,-240(fp)
   21554:	e0bfd015 	stw	r2,-192(fp)
   21558:	e0bfc517 	ldw	r2,-236(fp)
   2155c:	e0bfd115 	stw	r2,-188(fp)
   21560:	e0bfc617 	ldw	r2,-232(fp)
   21564:	e0bfd215 	stw	r2,-184(fp)
   21568:	e0bfc717 	ldw	r2,-228(fp)
   2156c:	e0bfd315 	stw	r2,-180(fp)
   21570:	e0bfc817 	ldw	r2,-224(fp)
   21574:	e0bfd415 	stw	r2,-176(fp)
   21578:	e0bfc917 	ldw	r2,-220(fp)
   2157c:	e0bfd515 	stw	r2,-172(fp)
   21580:	e0bfca17 	ldw	r2,-216(fp)
   21584:	e0bfd615 	stw	r2,-168(fp)
   21588:	e0bfcb17 	ldw	r2,-212(fp)
   2158c:	e0bfd715 	stw	r2,-164(fp)
   21590:	e0bfcc17 	ldw	r2,-208(fp)
   21594:	e0bfd815 	stw	r2,-160(fp)
   21598:	e0bfcd17 	ldw	r2,-204(fp)
   2159c:	e0bfd915 	stw	r2,-156(fp)
    for (j=0; j<88; j++) {
   215a0:	e03f6d15 	stw	zero,-588(fp)
   215a4:	00000806 	br	215c8 <secp256k1_fe_inv+0x514>
        secp256k1_fe_sqr(&x176, &x176);
   215a8:	e0ffce04 	addi	r3,fp,-200
   215ac:	e0bfce04 	addi	r2,fp,-200
   215b0:	180b883a 	mov	r5,r3
   215b4:	1009883a 	mov	r4,r2
   215b8:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x88, &x88);
    }
    secp256k1_fe_mul(&x88, &x88, &x44);

    x176 = x88;
    for (j=0; j<88; j++) {
   215bc:	e0bf6d17 	ldw	r2,-588(fp)
   215c0:	10800044 	addi	r2,r2,1
   215c4:	e0bf6d15 	stw	r2,-588(fp)
   215c8:	e0bf6d17 	ldw	r2,-588(fp)
   215cc:	10801610 	cmplti	r2,r2,88
   215d0:	103ff51e 	bne	r2,zero,215a8 <__alt_mem_epcs_flash_controller+0xfe0185a8>
        secp256k1_fe_sqr(&x176, &x176);
    }
    secp256k1_fe_mul(&x176, &x176, &x88);
   215d4:	e13fc204 	addi	r4,fp,-248
   215d8:	e0ffce04 	addi	r3,fp,-200
   215dc:	e0bfce04 	addi	r2,fp,-200
   215e0:	200d883a 	mov	r6,r4
   215e4:	180b883a 	mov	r5,r3
   215e8:	1009883a 	mov	r4,r2
   215ec:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x220 = x176;
   215f0:	e0bfce17 	ldw	r2,-200(fp)
   215f4:	e0bfda15 	stw	r2,-152(fp)
   215f8:	e0bfcf17 	ldw	r2,-196(fp)
   215fc:	e0bfdb15 	stw	r2,-148(fp)
   21600:	e0bfd017 	ldw	r2,-192(fp)
   21604:	e0bfdc15 	stw	r2,-144(fp)
   21608:	e0bfd117 	ldw	r2,-188(fp)
   2160c:	e0bfdd15 	stw	r2,-140(fp)
   21610:	e0bfd217 	ldw	r2,-184(fp)
   21614:	e0bfde15 	stw	r2,-136(fp)
   21618:	e0bfd317 	ldw	r2,-180(fp)
   2161c:	e0bfdf15 	stw	r2,-132(fp)
   21620:	e0bfd417 	ldw	r2,-176(fp)
   21624:	e0bfe015 	stw	r2,-128(fp)
   21628:	e0bfd517 	ldw	r2,-172(fp)
   2162c:	e0bfe115 	stw	r2,-124(fp)
   21630:	e0bfd617 	ldw	r2,-168(fp)
   21634:	e0bfe215 	stw	r2,-120(fp)
   21638:	e0bfd717 	ldw	r2,-164(fp)
   2163c:	e0bfe315 	stw	r2,-116(fp)
   21640:	e0bfd817 	ldw	r2,-160(fp)
   21644:	e0bfe415 	stw	r2,-112(fp)
   21648:	e0bfd917 	ldw	r2,-156(fp)
   2164c:	e0bfe515 	stw	r2,-108(fp)
    for (j=0; j<44; j++) {
   21650:	e03f6d15 	stw	zero,-588(fp)
   21654:	00000806 	br	21678 <secp256k1_fe_inv+0x5c4>
        secp256k1_fe_sqr(&x220, &x220);
   21658:	e0ffda04 	addi	r3,fp,-152
   2165c:	e0bfda04 	addi	r2,fp,-152
   21660:	180b883a 	mov	r5,r3
   21664:	1009883a 	mov	r4,r2
   21668:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x176, &x176);
    }
    secp256k1_fe_mul(&x176, &x176, &x88);

    x220 = x176;
    for (j=0; j<44; j++) {
   2166c:	e0bf6d17 	ldw	r2,-588(fp)
   21670:	10800044 	addi	r2,r2,1
   21674:	e0bf6d15 	stw	r2,-588(fp)
   21678:	e0bf6d17 	ldw	r2,-588(fp)
   2167c:	10800b10 	cmplti	r2,r2,44
   21680:	103ff51e 	bne	r2,zero,21658 <__alt_mem_epcs_flash_controller+0xfe018658>
        secp256k1_fe_sqr(&x220, &x220);
    }
    secp256k1_fe_mul(&x220, &x220, &x44);
   21684:	e13fb604 	addi	r4,fp,-296
   21688:	e0ffda04 	addi	r3,fp,-152
   2168c:	e0bfda04 	addi	r2,fp,-152
   21690:	200d883a 	mov	r6,r4
   21694:	180b883a 	mov	r5,r3
   21698:	1009883a 	mov	r4,r2
   2169c:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    x223 = x220;
   216a0:	e0bfda17 	ldw	r2,-152(fp)
   216a4:	e0bfe615 	stw	r2,-104(fp)
   216a8:	e0bfdb17 	ldw	r2,-148(fp)
   216ac:	e0bfe715 	stw	r2,-100(fp)
   216b0:	e0bfdc17 	ldw	r2,-144(fp)
   216b4:	e0bfe815 	stw	r2,-96(fp)
   216b8:	e0bfdd17 	ldw	r2,-140(fp)
   216bc:	e0bfe915 	stw	r2,-92(fp)
   216c0:	e0bfde17 	ldw	r2,-136(fp)
   216c4:	e0bfea15 	stw	r2,-88(fp)
   216c8:	e0bfdf17 	ldw	r2,-132(fp)
   216cc:	e0bfeb15 	stw	r2,-84(fp)
   216d0:	e0bfe017 	ldw	r2,-128(fp)
   216d4:	e0bfec15 	stw	r2,-80(fp)
   216d8:	e0bfe117 	ldw	r2,-124(fp)
   216dc:	e0bfed15 	stw	r2,-76(fp)
   216e0:	e0bfe217 	ldw	r2,-120(fp)
   216e4:	e0bfee15 	stw	r2,-72(fp)
   216e8:	e0bfe317 	ldw	r2,-116(fp)
   216ec:	e0bfef15 	stw	r2,-68(fp)
   216f0:	e0bfe417 	ldw	r2,-112(fp)
   216f4:	e0bff015 	stw	r2,-64(fp)
   216f8:	e0bfe517 	ldw	r2,-108(fp)
   216fc:	e0bff115 	stw	r2,-60(fp)
    for (j=0; j<3; j++) {
   21700:	e03f6d15 	stw	zero,-588(fp)
   21704:	00000806 	br	21728 <secp256k1_fe_inv+0x674>
        secp256k1_fe_sqr(&x223, &x223);
   21708:	e0ffe604 	addi	r3,fp,-104
   2170c:	e0bfe604 	addi	r2,fp,-104
   21710:	180b883a 	mov	r5,r3
   21714:	1009883a 	mov	r4,r2
   21718:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_sqr(&x220, &x220);
    }
    secp256k1_fe_mul(&x220, &x220, &x44);

    x223 = x220;
    for (j=0; j<3; j++) {
   2171c:	e0bf6d17 	ldw	r2,-588(fp)
   21720:	10800044 	addi	r2,r2,1
   21724:	e0bf6d15 	stw	r2,-588(fp)
   21728:	e0bf6d17 	ldw	r2,-588(fp)
   2172c:	108000d0 	cmplti	r2,r2,3
   21730:	103ff51e 	bne	r2,zero,21708 <__alt_mem_epcs_flash_controller+0xfe018708>
        secp256k1_fe_sqr(&x223, &x223);
    }
    secp256k1_fe_mul(&x223, &x223, &x3);
   21734:	e13f7a04 	addi	r4,fp,-536
   21738:	e0ffe604 	addi	r3,fp,-104
   2173c:	e0bfe604 	addi	r2,fp,-104
   21740:	200d883a 	mov	r6,r4
   21744:	180b883a 	mov	r5,r3
   21748:	1009883a 	mov	r4,r2
   2174c:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    /* The final result is then assembled using a sliding window over the blocks. */

    t1 = x223;
   21750:	e0bfe617 	ldw	r2,-104(fp)
   21754:	e0bff215 	stw	r2,-56(fp)
   21758:	e0bfe717 	ldw	r2,-100(fp)
   2175c:	e0bff315 	stw	r2,-52(fp)
   21760:	e0bfe817 	ldw	r2,-96(fp)
   21764:	e0bff415 	stw	r2,-48(fp)
   21768:	e0bfe917 	ldw	r2,-92(fp)
   2176c:	e0bff515 	stw	r2,-44(fp)
   21770:	e0bfea17 	ldw	r2,-88(fp)
   21774:	e0bff615 	stw	r2,-40(fp)
   21778:	e0bfeb17 	ldw	r2,-84(fp)
   2177c:	e0bff715 	stw	r2,-36(fp)
   21780:	e0bfec17 	ldw	r2,-80(fp)
   21784:	e0bff815 	stw	r2,-32(fp)
   21788:	e0bfed17 	ldw	r2,-76(fp)
   2178c:	e0bff915 	stw	r2,-28(fp)
   21790:	e0bfee17 	ldw	r2,-72(fp)
   21794:	e0bffa15 	stw	r2,-24(fp)
   21798:	e0bfef17 	ldw	r2,-68(fp)
   2179c:	e0bffb15 	stw	r2,-20(fp)
   217a0:	e0bff017 	ldw	r2,-64(fp)
   217a4:	e0bffc15 	stw	r2,-16(fp)
   217a8:	e0bff117 	ldw	r2,-60(fp)
   217ac:	e0bffd15 	stw	r2,-12(fp)
    for (j=0; j<23; j++) {
   217b0:	e03f6d15 	stw	zero,-588(fp)
   217b4:	00000806 	br	217d8 <secp256k1_fe_inv+0x724>
        secp256k1_fe_sqr(&t1, &t1);
   217b8:	e0fff204 	addi	r3,fp,-56
   217bc:	e0bff204 	addi	r2,fp,-56
   217c0:	180b883a 	mov	r5,r3
   217c4:	1009883a 	mov	r4,r2
   217c8:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x223, &x223, &x3);

    /* The final result is then assembled using a sliding window over the blocks. */

    t1 = x223;
    for (j=0; j<23; j++) {
   217cc:	e0bf6d17 	ldw	r2,-588(fp)
   217d0:	10800044 	addi	r2,r2,1
   217d4:	e0bf6d15 	stw	r2,-588(fp)
   217d8:	e0bf6d17 	ldw	r2,-588(fp)
   217dc:	108005d0 	cmplti	r2,r2,23
   217e0:	103ff51e 	bne	r2,zero,217b8 <__alt_mem_epcs_flash_controller+0xfe0187b8>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x22);
   217e4:	e13faa04 	addi	r4,fp,-344
   217e8:	e0fff204 	addi	r3,fp,-56
   217ec:	e0bff204 	addi	r2,fp,-56
   217f0:	200d883a 	mov	r6,r4
   217f4:	180b883a 	mov	r5,r3
   217f8:	1009883a 	mov	r4,r2
   217fc:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    for (j=0; j<5; j++) {
   21800:	e03f6d15 	stw	zero,-588(fp)
   21804:	00000806 	br	21828 <secp256k1_fe_inv+0x774>
        secp256k1_fe_sqr(&t1, &t1);
   21808:	e0fff204 	addi	r3,fp,-56
   2180c:	e0bff204 	addi	r2,fp,-56
   21810:	180b883a 	mov	r5,r3
   21814:	1009883a 	mov	r4,r2
   21818:	00200080 	call	20008 <secp256k1_fe_sqr>
    t1 = x223;
    for (j=0; j<23; j++) {
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x22);
    for (j=0; j<5; j++) {
   2181c:	e0bf6d17 	ldw	r2,-588(fp)
   21820:	10800044 	addi	r2,r2,1
   21824:	e0bf6d15 	stw	r2,-588(fp)
   21828:	e0bf6d17 	ldw	r2,-588(fp)
   2182c:	10800150 	cmplti	r2,r2,5
   21830:	103ff51e 	bne	r2,zero,21808 <__alt_mem_epcs_flash_controller+0xfe018808>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, a);
   21834:	e0fff204 	addi	r3,fp,-56
   21838:	e0bff204 	addi	r2,fp,-56
   2183c:	e1bfff17 	ldw	r6,-4(fp)
   21840:	180b883a 	mov	r5,r3
   21844:	1009883a 	mov	r4,r2
   21848:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    for (j=0; j<3; j++) {
   2184c:	e03f6d15 	stw	zero,-588(fp)
   21850:	00000806 	br	21874 <secp256k1_fe_inv+0x7c0>
        secp256k1_fe_sqr(&t1, &t1);
   21854:	e0fff204 	addi	r3,fp,-56
   21858:	e0bff204 	addi	r2,fp,-56
   2185c:	180b883a 	mov	r5,r3
   21860:	1009883a 	mov	r4,r2
   21864:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&t1, &t1, &x22);
    for (j=0; j<5; j++) {
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, a);
    for (j=0; j<3; j++) {
   21868:	e0bf6d17 	ldw	r2,-588(fp)
   2186c:	10800044 	addi	r2,r2,1
   21870:	e0bf6d15 	stw	r2,-588(fp)
   21874:	e0bf6d17 	ldw	r2,-588(fp)
   21878:	108000d0 	cmplti	r2,r2,3
   2187c:	103ff51e 	bne	r2,zero,21854 <__alt_mem_epcs_flash_controller+0xfe018854>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x2);
   21880:	e13f6e04 	addi	r4,fp,-584
   21884:	e0fff204 	addi	r3,fp,-56
   21888:	e0bff204 	addi	r2,fp,-56
   2188c:	200d883a 	mov	r6,r4
   21890:	180b883a 	mov	r5,r3
   21894:	1009883a 	mov	r4,r2
   21898:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    for (j=0; j<2; j++) {
   2189c:	e03f6d15 	stw	zero,-588(fp)
   218a0:	00000806 	br	218c4 <secp256k1_fe_inv+0x810>
        secp256k1_fe_sqr(&t1, &t1);
   218a4:	e0fff204 	addi	r3,fp,-56
   218a8:	e0bff204 	addi	r2,fp,-56
   218ac:	180b883a 	mov	r5,r3
   218b0:	1009883a 	mov	r4,r2
   218b4:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&t1, &t1, a);
    for (j=0; j<3; j++) {
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(&t1, &t1, &x2);
    for (j=0; j<2; j++) {
   218b8:	e0bf6d17 	ldw	r2,-588(fp)
   218bc:	10800044 	addi	r2,r2,1
   218c0:	e0bf6d15 	stw	r2,-588(fp)
   218c4:	e0bf6d17 	ldw	r2,-588(fp)
   218c8:	10800090 	cmplti	r2,r2,2
   218cc:	103ff51e 	bne	r2,zero,218a4 <__alt_mem_epcs_flash_controller+0xfe0188a4>
        secp256k1_fe_sqr(&t1, &t1);
    }
    secp256k1_fe_mul(r, a, &t1);
   218d0:	e0bff204 	addi	r2,fp,-56
   218d4:	100d883a 	mov	r6,r2
   218d8:	e17fff17 	ldw	r5,-4(fp)
   218dc:	e13ffe17 	ldw	r4,-8(fp)
   218e0:	001feb40 	call	1feb4 <secp256k1_fe_mul>
}
   218e4:	0001883a 	nop
   218e8:	e037883a 	mov	sp,fp
   218ec:	dfc00117 	ldw	ra,4(sp)
   218f0:	df000017 	ldw	fp,0(sp)
   218f4:	dec00204 	addi	sp,sp,8
   218f8:	f800283a 	ret

000218fc <secp256k1_fe_inv_var>:

static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {
   218fc:	defffc04 	addi	sp,sp,-16
   21900:	dfc00315 	stw	ra,12(sp)
   21904:	df000215 	stw	fp,8(sp)
   21908:	df000204 	addi	fp,sp,8
   2190c:	e13ffe15 	stw	r4,-8(fp)
   21910:	e17fff15 	stw	r5,-4(fp)
#if defined(USE_FIELD_INV_BUILTIN)
    secp256k1_fe_inv(r, a);
   21914:	e17fff17 	ldw	r5,-4(fp)
   21918:	e13ffe17 	ldw	r4,-8(fp)
   2191c:	00210b40 	call	210b4 <secp256k1_fe_inv>
    secp256k1_fe_add(&c, &negone);
    CHECK(secp256k1_fe_normalizes_to_zero_var(&c));
#else
#error "Please select field inverse implementation"
#endif
}
   21920:	0001883a 	nop
   21924:	e037883a 	mov	sp,fp
   21928:	dfc00117 	ldw	ra,4(sp)
   2192c:	df000017 	ldw	fp,0(sp)
   21930:	dec00204 	addi	sp,sp,8
   21934:	f800283a 	ret

00021938 <secp256k1_fe_inv_all_var>:

static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe *r, const secp256k1_fe *a) {
   21938:	deffea04 	addi	sp,sp,-88
   2193c:	dfc01515 	stw	ra,84(sp)
   21940:	df001415 	stw	fp,80(sp)
   21944:	dc401315 	stw	r17,76(sp)
   21948:	dc001215 	stw	r16,72(sp)
   2194c:	df001404 	addi	fp,sp,80
   21950:	e13ffb15 	stw	r4,-20(fp)
   21954:	e17ffc15 	stw	r5,-16(fp)
   21958:	e1bffd15 	stw	r6,-12(fp)
    secp256k1_fe u;
    size_t i;
    if (len < 1) {
   2195c:	e0bffb17 	ldw	r2,-20(fp)
   21960:	1000a426 	beq	r2,zero,21bf4 <secp256k1_fe_inv_all_var+0x2bc>
        return;
    }

    VERIFY_CHECK((r + len <= a) || (a + len <= r));
   21964:	01400c04 	movi	r5,48
   21968:	e13ffb17 	ldw	r4,-20(fp)
   2196c:	0043af40 	call	43af4 <__mulsi3>
   21970:	1007883a 	mov	r3,r2
   21974:	e0bffc17 	ldw	r2,-16(fp)
   21978:	10c5883a 	add	r2,r2,r3
   2197c:	e0fffd17 	ldw	r3,-12(fp)
   21980:	1885803a 	cmpltu	r2,r3,r2
   21984:	10803fcc 	andi	r2,r2,255
   21988:	10001726 	beq	r2,zero,219e8 <secp256k1_fe_inv_all_var+0xb0>
   2198c:	01400c04 	movi	r5,48
   21990:	e13ffb17 	ldw	r4,-20(fp)
   21994:	0043af40 	call	43af4 <__mulsi3>
   21998:	1007883a 	mov	r3,r2
   2199c:	e0bffd17 	ldw	r2,-12(fp)
   219a0:	10c5883a 	add	r2,r2,r3
   219a4:	e0fffc17 	ldw	r3,-16(fp)
   219a8:	1885803a 	cmpltu	r2,r3,r2
   219ac:	10803fcc 	andi	r2,r2,255
   219b0:	10000d26 	beq	r2,zero,219e8 <secp256k1_fe_inv_all_var+0xb0>
   219b4:	d0a01617 	ldw	r2,-32680(gp)
   219b8:	10c00317 	ldw	r3,12(r2)
   219bc:	00800174 	movhi	r2,5
   219c0:	1095ce04 	addi	r2,r2,22328
   219c4:	d8800015 	stw	r2,0(sp)
   219c8:	01c044c4 	movi	r7,275
   219cc:	01800174 	movhi	r6,5
   219d0:	3195c504 	addi	r6,r6,22292
   219d4:	01400174 	movhi	r5,5
   219d8:	2951e804 	addi	r5,r5,18336
   219dc:	1809883a 	mov	r4,r3
   219e0:	00461000 	call	46100 <fprintf>
   219e4:	0045fd40 	call	45fd4 <abort>

    r[0] = a[0];
   219e8:	e0bffc17 	ldw	r2,-16(fp)
   219ec:	e0fffd17 	ldw	r3,-12(fp)
   219f0:	19000017 	ldw	r4,0(r3)
   219f4:	11000015 	stw	r4,0(r2)
   219f8:	19000117 	ldw	r4,4(r3)
   219fc:	11000115 	stw	r4,4(r2)
   21a00:	19000217 	ldw	r4,8(r3)
   21a04:	11000215 	stw	r4,8(r2)
   21a08:	19000317 	ldw	r4,12(r3)
   21a0c:	11000315 	stw	r4,12(r2)
   21a10:	19000417 	ldw	r4,16(r3)
   21a14:	11000415 	stw	r4,16(r2)
   21a18:	19000517 	ldw	r4,20(r3)
   21a1c:	11000515 	stw	r4,20(r2)
   21a20:	19000617 	ldw	r4,24(r3)
   21a24:	11000615 	stw	r4,24(r2)
   21a28:	19000717 	ldw	r4,28(r3)
   21a2c:	11000715 	stw	r4,28(r2)
   21a30:	19000817 	ldw	r4,32(r3)
   21a34:	11000815 	stw	r4,32(r2)
   21a38:	19000917 	ldw	r4,36(r3)
   21a3c:	11000915 	stw	r4,36(r2)
   21a40:	19000a17 	ldw	r4,40(r3)
   21a44:	11000a15 	stw	r4,40(r2)
   21a48:	18c00b17 	ldw	r3,44(r3)
   21a4c:	10c00b15 	stw	r3,44(r2)

    i = 0;
   21a50:	e03fed15 	stw	zero,-76(fp)
    while (++i < len) {
   21a54:	00001606 	br	21ab0 <secp256k1_fe_inv_all_var+0x178>
        secp256k1_fe_mul(&r[i], &r[i - 1], &a[i]);
   21a58:	01400c04 	movi	r5,48
   21a5c:	e13fed17 	ldw	r4,-76(fp)
   21a60:	0043af40 	call	43af4 <__mulsi3>
   21a64:	1007883a 	mov	r3,r2
   21a68:	e0bffc17 	ldw	r2,-16(fp)
   21a6c:	10e1883a 	add	r16,r2,r3
   21a70:	01400c04 	movi	r5,48
   21a74:	e13fed17 	ldw	r4,-76(fp)
   21a78:	0043af40 	call	43af4 <__mulsi3>
   21a7c:	10bff404 	addi	r2,r2,-48
   21a80:	e0fffc17 	ldw	r3,-16(fp)
   21a84:	18a3883a 	add	r17,r3,r2
   21a88:	01400c04 	movi	r5,48
   21a8c:	e13fed17 	ldw	r4,-76(fp)
   21a90:	0043af40 	call	43af4 <__mulsi3>
   21a94:	1007883a 	mov	r3,r2
   21a98:	e0bffd17 	ldw	r2,-12(fp)
   21a9c:	10c5883a 	add	r2,r2,r3
   21aa0:	100d883a 	mov	r6,r2
   21aa4:	880b883a 	mov	r5,r17
   21aa8:	8009883a 	mov	r4,r16
   21aac:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    VERIFY_CHECK((r + len <= a) || (a + len <= r));

    r[0] = a[0];

    i = 0;
    while (++i < len) {
   21ab0:	e0bfed17 	ldw	r2,-76(fp)
   21ab4:	10800044 	addi	r2,r2,1
   21ab8:	e0bfed15 	stw	r2,-76(fp)
   21abc:	e0ffed17 	ldw	r3,-76(fp)
   21ac0:	e0bffb17 	ldw	r2,-20(fp)
   21ac4:	18bfe436 	bltu	r3,r2,21a58 <__alt_mem_epcs_flash_controller+0xfe018a58>
        secp256k1_fe_mul(&r[i], &r[i - 1], &a[i]);
    }

    secp256k1_fe_inv_var(&u, &r[--i]);
   21ac8:	e0bfed17 	ldw	r2,-76(fp)
   21acc:	10bfffc4 	addi	r2,r2,-1
   21ad0:	e0bfed15 	stw	r2,-76(fp)
   21ad4:	01400c04 	movi	r5,48
   21ad8:	e13fed17 	ldw	r4,-76(fp)
   21adc:	0043af40 	call	43af4 <__mulsi3>
   21ae0:	1007883a 	mov	r3,r2
   21ae4:	e0bffc17 	ldw	r2,-16(fp)
   21ae8:	10c7883a 	add	r3,r2,r3
   21aec:	e0bfef04 	addi	r2,fp,-68
   21af0:	180b883a 	mov	r5,r3
   21af4:	1009883a 	mov	r4,r2
   21af8:	00218fc0 	call	218fc <secp256k1_fe_inv_var>

    while (i > 0) {
   21afc:	00002106 	br	21b84 <secp256k1_fe_inv_all_var+0x24c>
        size_t j = i--;
   21b00:	e0bfed17 	ldw	r2,-76(fp)
   21b04:	10ffffc4 	addi	r3,r2,-1
   21b08:	e0ffed15 	stw	r3,-76(fp)
   21b0c:	e0bfee15 	stw	r2,-72(fp)
        secp256k1_fe_mul(&r[j], &r[i], &u);
   21b10:	01400c04 	movi	r5,48
   21b14:	e13fee17 	ldw	r4,-72(fp)
   21b18:	0043af40 	call	43af4 <__mulsi3>
   21b1c:	1007883a 	mov	r3,r2
   21b20:	e0bffc17 	ldw	r2,-16(fp)
   21b24:	10e1883a 	add	r16,r2,r3
   21b28:	01400c04 	movi	r5,48
   21b2c:	e13fed17 	ldw	r4,-76(fp)
   21b30:	0043af40 	call	43af4 <__mulsi3>
   21b34:	1007883a 	mov	r3,r2
   21b38:	e0bffc17 	ldw	r2,-16(fp)
   21b3c:	10c5883a 	add	r2,r2,r3
   21b40:	e0ffef04 	addi	r3,fp,-68
   21b44:	180d883a 	mov	r6,r3
   21b48:	100b883a 	mov	r5,r2
   21b4c:	8009883a 	mov	r4,r16
   21b50:	001feb40 	call	1feb4 <secp256k1_fe_mul>
        secp256k1_fe_mul(&u, &u, &a[j]);
   21b54:	01400c04 	movi	r5,48
   21b58:	e13fee17 	ldw	r4,-72(fp)
   21b5c:	0043af40 	call	43af4 <__mulsi3>
   21b60:	1007883a 	mov	r3,r2
   21b64:	e0bffd17 	ldw	r2,-12(fp)
   21b68:	10c9883a 	add	r4,r2,r3
   21b6c:	e0ffef04 	addi	r3,fp,-68
   21b70:	e0bfef04 	addi	r2,fp,-68
   21b74:	200d883a 	mov	r6,r4
   21b78:	180b883a 	mov	r5,r3
   21b7c:	1009883a 	mov	r4,r2
   21b80:	001feb40 	call	1feb4 <secp256k1_fe_mul>
        secp256k1_fe_mul(&r[i], &r[i - 1], &a[i]);
    }

    secp256k1_fe_inv_var(&u, &r[--i]);

    while (i > 0) {
   21b84:	e0bfed17 	ldw	r2,-76(fp)
   21b88:	103fdd1e 	bne	r2,zero,21b00 <__alt_mem_epcs_flash_controller+0xfe018b00>
        size_t j = i--;
        secp256k1_fe_mul(&r[j], &r[i], &u);
        secp256k1_fe_mul(&u, &u, &a[j]);
    }

    r[0] = u;
   21b8c:	e0bffc17 	ldw	r2,-16(fp)
   21b90:	e0ffef17 	ldw	r3,-68(fp)
   21b94:	10c00015 	stw	r3,0(r2)
   21b98:	e0fff017 	ldw	r3,-64(fp)
   21b9c:	10c00115 	stw	r3,4(r2)
   21ba0:	e0fff117 	ldw	r3,-60(fp)
   21ba4:	10c00215 	stw	r3,8(r2)
   21ba8:	e0fff217 	ldw	r3,-56(fp)
   21bac:	10c00315 	stw	r3,12(r2)
   21bb0:	e0fff317 	ldw	r3,-52(fp)
   21bb4:	10c00415 	stw	r3,16(r2)
   21bb8:	e0fff417 	ldw	r3,-48(fp)
   21bbc:	10c00515 	stw	r3,20(r2)
   21bc0:	e0fff517 	ldw	r3,-44(fp)
   21bc4:	10c00615 	stw	r3,24(r2)
   21bc8:	e0fff617 	ldw	r3,-40(fp)
   21bcc:	10c00715 	stw	r3,28(r2)
   21bd0:	e0fff717 	ldw	r3,-36(fp)
   21bd4:	10c00815 	stw	r3,32(r2)
   21bd8:	e0fff817 	ldw	r3,-32(fp)
   21bdc:	10c00915 	stw	r3,36(r2)
   21be0:	e0fff917 	ldw	r3,-28(fp)
   21be4:	10c00a15 	stw	r3,40(r2)
   21be8:	e0fffa17 	ldw	r3,-24(fp)
   21bec:	10c00b15 	stw	r3,44(r2)
   21bf0:	00000106 	br	21bf8 <secp256k1_fe_inv_all_var+0x2c0>

static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe *r, const secp256k1_fe *a) {
    secp256k1_fe u;
    size_t i;
    if (len < 1) {
        return;
   21bf4:	0001883a 	nop
        secp256k1_fe_mul(&r[j], &r[i], &u);
        secp256k1_fe_mul(&u, &u, &a[j]);
    }

    r[0] = u;
}
   21bf8:	e6fffe04 	addi	sp,fp,-8
   21bfc:	dfc00317 	ldw	ra,12(sp)
   21c00:	df000217 	ldw	fp,8(sp)
   21c04:	dc400117 	ldw	r17,4(sp)
   21c08:	dc000017 	ldw	r16,0(sp)
   21c0c:	dec00404 	addi	sp,sp,16
   21c10:	f800283a 	ret

00021c14 <secp256k1_fe_is_quad_var>:

static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {
   21c14:	defff104 	addi	sp,sp,-60
   21c18:	dfc00e15 	stw	ra,56(sp)
   21c1c:	df000d15 	stw	fp,52(sp)
   21c20:	df000d04 	addi	fp,sp,52
   21c24:	e13fff15 	stw	r4,-4(fp)
    secp256k1_num_set_bin(&n, b, 32);
    secp256k1_num_set_bin(&m, prime, 32);
    return secp256k1_num_jacobi(&n, &m) >= 0;
#else
    secp256k1_fe r;
    return secp256k1_fe_sqrt(&r, a);
   21c28:	e17fff17 	ldw	r5,-4(fp)
   21c2c:	e13ff304 	addi	r4,fp,-52
   21c30:	00208c00 	call	208c0 <secp256k1_fe_sqrt>
#endif
}
   21c34:	e037883a 	mov	sp,fp
   21c38:	dfc00117 	ldw	ra,4(sp)
   21c3c:	df000017 	ldw	fp,0(sp)
   21c40:	dec00204 	addi	sp,sp,8
   21c44:	f800283a 	ret

00021c48 <secp256k1_ge_set_gej_zinv>:
    0x029BFCDBUL, 0x2DCE28D9UL, 0x59F2815BUL, 0x16F81798UL,
    0x483ADA77UL, 0x26A3C465UL, 0x5DA4FBFCUL, 0x0E1108A8UL,
    0xFD17B448UL, 0xA6855419UL, 0x9C47D08FUL, 0xFB10D4B8UL
);

static void secp256k1_ge_set_gej_zinv(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zi) {
   21c48:	deffe304 	addi	sp,sp,-116
   21c4c:	dfc01c15 	stw	ra,112(sp)
   21c50:	df001b15 	stw	fp,108(sp)
   21c54:	df001b04 	addi	fp,sp,108
   21c58:	e13ffd15 	stw	r4,-12(fp)
   21c5c:	e17ffe15 	stw	r5,-8(fp)
   21c60:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_fe zi2; 
    secp256k1_fe zi3;
    secp256k1_fe_sqr(&zi2, zi);
   21c64:	e17fff17 	ldw	r5,-4(fp)
   21c68:	e13fe504 	addi	r4,fp,-108
   21c6c:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&zi3, &zi2, zi);
   21c70:	e0bff104 	addi	r2,fp,-60
   21c74:	e1bfff17 	ldw	r6,-4(fp)
   21c78:	e17fe504 	addi	r5,fp,-108
   21c7c:	1009883a 	mov	r4,r2
   21c80:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->x, &a->x, &zi2);
   21c84:	e0bffd17 	ldw	r2,-12(fp)
   21c88:	e0fffe17 	ldw	r3,-8(fp)
   21c8c:	e1bfe504 	addi	r6,fp,-108
   21c90:	180b883a 	mov	r5,r3
   21c94:	1009883a 	mov	r4,r2
   21c98:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->y, &a->y, &zi3);
   21c9c:	e0bffd17 	ldw	r2,-12(fp)
   21ca0:	10c00c04 	addi	r3,r2,48
   21ca4:	e0bffe17 	ldw	r2,-8(fp)
   21ca8:	10800c04 	addi	r2,r2,48
   21cac:	e13ff104 	addi	r4,fp,-60
   21cb0:	200d883a 	mov	r6,r4
   21cb4:	100b883a 	mov	r5,r2
   21cb8:	1809883a 	mov	r4,r3
   21cbc:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    r->infinity = a->infinity;
   21cc0:	e0bffe17 	ldw	r2,-8(fp)
   21cc4:	10c02417 	ldw	r3,144(r2)
   21cc8:	e0bffd17 	ldw	r2,-12(fp)
   21ccc:	10c01815 	stw	r3,96(r2)
}
   21cd0:	0001883a 	nop
   21cd4:	e037883a 	mov	sp,fp
   21cd8:	dfc00117 	ldw	ra,4(sp)
   21cdc:	df000017 	ldw	fp,0(sp)
   21ce0:	dec00204 	addi	sp,sp,8
   21ce4:	f800283a 	ret

00021ce8 <secp256k1_ge_set_xy>:

static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y) {
   21ce8:	defffc04 	addi	sp,sp,-16
   21cec:	df000315 	stw	fp,12(sp)
   21cf0:	df000304 	addi	fp,sp,12
   21cf4:	e13ffd15 	stw	r4,-12(fp)
   21cf8:	e17ffe15 	stw	r5,-8(fp)
   21cfc:	e1bfff15 	stw	r6,-4(fp)
    r->infinity = 0;
   21d00:	e0bffd17 	ldw	r2,-12(fp)
   21d04:	10001815 	stw	zero,96(r2)
    r->x = *x;
   21d08:	e0bffd17 	ldw	r2,-12(fp)
   21d0c:	e0fffe17 	ldw	r3,-8(fp)
   21d10:	19000017 	ldw	r4,0(r3)
   21d14:	11000015 	stw	r4,0(r2)
   21d18:	19000117 	ldw	r4,4(r3)
   21d1c:	11000115 	stw	r4,4(r2)
   21d20:	19000217 	ldw	r4,8(r3)
   21d24:	11000215 	stw	r4,8(r2)
   21d28:	19000317 	ldw	r4,12(r3)
   21d2c:	11000315 	stw	r4,12(r2)
   21d30:	19000417 	ldw	r4,16(r3)
   21d34:	11000415 	stw	r4,16(r2)
   21d38:	19000517 	ldw	r4,20(r3)
   21d3c:	11000515 	stw	r4,20(r2)
   21d40:	19000617 	ldw	r4,24(r3)
   21d44:	11000615 	stw	r4,24(r2)
   21d48:	19000717 	ldw	r4,28(r3)
   21d4c:	11000715 	stw	r4,28(r2)
   21d50:	19000817 	ldw	r4,32(r3)
   21d54:	11000815 	stw	r4,32(r2)
   21d58:	19000917 	ldw	r4,36(r3)
   21d5c:	11000915 	stw	r4,36(r2)
   21d60:	19000a17 	ldw	r4,40(r3)
   21d64:	11000a15 	stw	r4,40(r2)
   21d68:	18c00b17 	ldw	r3,44(r3)
   21d6c:	10c00b15 	stw	r3,44(r2)
    r->y = *y;
   21d70:	e0bffd17 	ldw	r2,-12(fp)
   21d74:	e0ffff17 	ldw	r3,-4(fp)
   21d78:	19000017 	ldw	r4,0(r3)
   21d7c:	11000c15 	stw	r4,48(r2)
   21d80:	19000117 	ldw	r4,4(r3)
   21d84:	11000d15 	stw	r4,52(r2)
   21d88:	19000217 	ldw	r4,8(r3)
   21d8c:	11000e15 	stw	r4,56(r2)
   21d90:	19000317 	ldw	r4,12(r3)
   21d94:	11000f15 	stw	r4,60(r2)
   21d98:	19000417 	ldw	r4,16(r3)
   21d9c:	11001015 	stw	r4,64(r2)
   21da0:	19000517 	ldw	r4,20(r3)
   21da4:	11001115 	stw	r4,68(r2)
   21da8:	19000617 	ldw	r4,24(r3)
   21dac:	11001215 	stw	r4,72(r2)
   21db0:	19000717 	ldw	r4,28(r3)
   21db4:	11001315 	stw	r4,76(r2)
   21db8:	19000817 	ldw	r4,32(r3)
   21dbc:	11001415 	stw	r4,80(r2)
   21dc0:	19000917 	ldw	r4,36(r3)
   21dc4:	11001515 	stw	r4,84(r2)
   21dc8:	19000a17 	ldw	r4,40(r3)
   21dcc:	11001615 	stw	r4,88(r2)
   21dd0:	18c00b17 	ldw	r3,44(r3)
   21dd4:	10c01715 	stw	r3,92(r2)
}
   21dd8:	0001883a 	nop
   21ddc:	e037883a 	mov	sp,fp
   21de0:	df000017 	ldw	fp,0(sp)
   21de4:	dec00104 	addi	sp,sp,4
   21de8:	f800283a 	ret

00021dec <secp256k1_ge_is_infinity>:

static int secp256k1_ge_is_infinity(const secp256k1_ge *a) {
   21dec:	defffe04 	addi	sp,sp,-8
   21df0:	df000115 	stw	fp,4(sp)
   21df4:	df000104 	addi	fp,sp,4
   21df8:	e13fff15 	stw	r4,-4(fp)
    return a->infinity;
   21dfc:	e0bfff17 	ldw	r2,-4(fp)
   21e00:	10801817 	ldw	r2,96(r2)
}
   21e04:	e037883a 	mov	sp,fp
   21e08:	df000017 	ldw	fp,0(sp)
   21e0c:	dec00104 	addi	sp,sp,4
   21e10:	f800283a 	ret

00021e14 <secp256k1_ge_neg>:

static void secp256k1_ge_neg(secp256k1_ge *r, const secp256k1_ge *a) {
   21e14:	defffc04 	addi	sp,sp,-16
   21e18:	dfc00315 	stw	ra,12(sp)
   21e1c:	df000215 	stw	fp,8(sp)
   21e20:	df000204 	addi	fp,sp,8
   21e24:	e13ffe15 	stw	r4,-8(fp)
   21e28:	e17fff15 	stw	r5,-4(fp)
    *r = *a;
   21e2c:	e0fffe17 	ldw	r3,-8(fp)
   21e30:	e0bfff17 	ldw	r2,-4(fp)
   21e34:	1009883a 	mov	r4,r2
   21e38:	00801904 	movi	r2,100
   21e3c:	100d883a 	mov	r6,r2
   21e40:	200b883a 	mov	r5,r4
   21e44:	1809883a 	mov	r4,r3
   21e48:	00463980 	call	46398 <memcpy>
    secp256k1_fe_normalize_weak(&r->y);
   21e4c:	e0bffe17 	ldw	r2,-8(fp)
   21e50:	10800c04 	addi	r2,r2,48
   21e54:	1009883a 	mov	r4,r2
   21e58:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    secp256k1_fe_negate(&r->y, &r->y, 1);
   21e5c:	e0bffe17 	ldw	r2,-8(fp)
   21e60:	10c00c04 	addi	r3,r2,48
   21e64:	e0bffe17 	ldw	r2,-8(fp)
   21e68:	10800c04 	addi	r2,r2,48
   21e6c:	01800044 	movi	r6,1
   21e70:	100b883a 	mov	r5,r2
   21e74:	1809883a 	mov	r4,r3
   21e78:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
}
   21e7c:	0001883a 	nop
   21e80:	e037883a 	mov	sp,fp
   21e84:	dfc00117 	ldw	ra,4(sp)
   21e88:	df000017 	ldw	fp,0(sp)
   21e8c:	dec00204 	addi	sp,sp,8
   21e90:	f800283a 	ret

00021e94 <secp256k1_ge_set_gej>:

static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a) {
   21e94:	deffe404 	addi	sp,sp,-112
   21e98:	dfc01b15 	stw	ra,108(sp)
   21e9c:	df001a15 	stw	fp,104(sp)
   21ea0:	df001a04 	addi	fp,sp,104
   21ea4:	e13ffe15 	stw	r4,-8(fp)
   21ea8:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe z2, z3;
    r->infinity = a->infinity;
   21eac:	e0bfff17 	ldw	r2,-4(fp)
   21eb0:	10c02417 	ldw	r3,144(r2)
   21eb4:	e0bffe17 	ldw	r2,-8(fp)
   21eb8:	10c01815 	stw	r3,96(r2)
    secp256k1_fe_inv(&a->z, &a->z);
   21ebc:	e0bfff17 	ldw	r2,-4(fp)
   21ec0:	10c01804 	addi	r3,r2,96
   21ec4:	e0bfff17 	ldw	r2,-4(fp)
   21ec8:	10801804 	addi	r2,r2,96
   21ecc:	100b883a 	mov	r5,r2
   21ed0:	1809883a 	mov	r4,r3
   21ed4:	00210b40 	call	210b4 <secp256k1_fe_inv>
    secp256k1_fe_sqr(&z2, &a->z);
   21ed8:	e0bfff17 	ldw	r2,-4(fp)
   21edc:	10801804 	addi	r2,r2,96
   21ee0:	100b883a 	mov	r5,r2
   21ee4:	e13fe604 	addi	r4,fp,-104
   21ee8:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&z3, &a->z, &z2);
   21eec:	e0bfff17 	ldw	r2,-4(fp)
   21ef0:	10c01804 	addi	r3,r2,96
   21ef4:	e0bff204 	addi	r2,fp,-56
   21ef8:	e1bfe604 	addi	r6,fp,-104
   21efc:	180b883a 	mov	r5,r3
   21f00:	1009883a 	mov	r4,r2
   21f04:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&a->x, &a->x, &z2);
   21f08:	e0bfff17 	ldw	r2,-4(fp)
   21f0c:	e0ffff17 	ldw	r3,-4(fp)
   21f10:	e1bfe604 	addi	r6,fp,-104
   21f14:	180b883a 	mov	r5,r3
   21f18:	1009883a 	mov	r4,r2
   21f1c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&a->y, &a->y, &z3);
   21f20:	e0bfff17 	ldw	r2,-4(fp)
   21f24:	10c00c04 	addi	r3,r2,48
   21f28:	e0bfff17 	ldw	r2,-4(fp)
   21f2c:	10800c04 	addi	r2,r2,48
   21f30:	e13ff204 	addi	r4,fp,-56
   21f34:	200d883a 	mov	r6,r4
   21f38:	100b883a 	mov	r5,r2
   21f3c:	1809883a 	mov	r4,r3
   21f40:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_set_int(&a->z, 1);
   21f44:	e0bfff17 	ldw	r2,-4(fp)
   21f48:	10801804 	addi	r2,r2,96
   21f4c:	01400044 	movi	r5,1
   21f50:	1009883a 	mov	r4,r2
   21f54:	001528c0 	call	1528c <secp256k1_fe_set_int>
    r->x = a->x;
   21f58:	e0bffe17 	ldw	r2,-8(fp)
   21f5c:	e0ffff17 	ldw	r3,-4(fp)
   21f60:	19000017 	ldw	r4,0(r3)
   21f64:	11000015 	stw	r4,0(r2)
   21f68:	19000117 	ldw	r4,4(r3)
   21f6c:	11000115 	stw	r4,4(r2)
   21f70:	19000217 	ldw	r4,8(r3)
   21f74:	11000215 	stw	r4,8(r2)
   21f78:	19000317 	ldw	r4,12(r3)
   21f7c:	11000315 	stw	r4,12(r2)
   21f80:	19000417 	ldw	r4,16(r3)
   21f84:	11000415 	stw	r4,16(r2)
   21f88:	19000517 	ldw	r4,20(r3)
   21f8c:	11000515 	stw	r4,20(r2)
   21f90:	19000617 	ldw	r4,24(r3)
   21f94:	11000615 	stw	r4,24(r2)
   21f98:	19000717 	ldw	r4,28(r3)
   21f9c:	11000715 	stw	r4,28(r2)
   21fa0:	19000817 	ldw	r4,32(r3)
   21fa4:	11000815 	stw	r4,32(r2)
   21fa8:	19000917 	ldw	r4,36(r3)
   21fac:	11000915 	stw	r4,36(r2)
   21fb0:	19000a17 	ldw	r4,40(r3)
   21fb4:	11000a15 	stw	r4,40(r2)
   21fb8:	18c00b17 	ldw	r3,44(r3)
   21fbc:	10c00b15 	stw	r3,44(r2)
    r->y = a->y;
   21fc0:	e0bffe17 	ldw	r2,-8(fp)
   21fc4:	e0ffff17 	ldw	r3,-4(fp)
   21fc8:	19000c17 	ldw	r4,48(r3)
   21fcc:	11000c15 	stw	r4,48(r2)
   21fd0:	19000d17 	ldw	r4,52(r3)
   21fd4:	11000d15 	stw	r4,52(r2)
   21fd8:	19000e17 	ldw	r4,56(r3)
   21fdc:	11000e15 	stw	r4,56(r2)
   21fe0:	19000f17 	ldw	r4,60(r3)
   21fe4:	11000f15 	stw	r4,60(r2)
   21fe8:	19001017 	ldw	r4,64(r3)
   21fec:	11001015 	stw	r4,64(r2)
   21ff0:	19001117 	ldw	r4,68(r3)
   21ff4:	11001115 	stw	r4,68(r2)
   21ff8:	19001217 	ldw	r4,72(r3)
   21ffc:	11001215 	stw	r4,72(r2)
   22000:	19001317 	ldw	r4,76(r3)
   22004:	11001315 	stw	r4,76(r2)
   22008:	19001417 	ldw	r4,80(r3)
   2200c:	11001415 	stw	r4,80(r2)
   22010:	19001517 	ldw	r4,84(r3)
   22014:	11001515 	stw	r4,84(r2)
   22018:	19001617 	ldw	r4,88(r3)
   2201c:	11001615 	stw	r4,88(r2)
   22020:	18c01717 	ldw	r3,92(r3)
   22024:	10c01715 	stw	r3,92(r2)
}
   22028:	0001883a 	nop
   2202c:	e037883a 	mov	sp,fp
   22030:	dfc00117 	ldw	ra,4(sp)
   22034:	df000017 	ldw	fp,0(sp)
   22038:	dec00204 	addi	sp,sp,8
   2203c:	f800283a 	ret

00022040 <secp256k1_ge_set_gej_var>:

static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {
   22040:	deffe404 	addi	sp,sp,-112
   22044:	dfc01b15 	stw	ra,108(sp)
   22048:	df001a15 	stw	fp,104(sp)
   2204c:	df001a04 	addi	fp,sp,104
   22050:	e13ffe15 	stw	r4,-8(fp)
   22054:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe z2, z3;
    r->infinity = a->infinity;
   22058:	e0bfff17 	ldw	r2,-4(fp)
   2205c:	10c02417 	ldw	r3,144(r2)
   22060:	e0bffe17 	ldw	r2,-8(fp)
   22064:	10c01815 	stw	r3,96(r2)
    if (a->infinity) {
   22068:	e0bfff17 	ldw	r2,-4(fp)
   2206c:	10802417 	ldw	r2,144(r2)
   22070:	10005c1e 	bne	r2,zero,221e4 <secp256k1_ge_set_gej_var+0x1a4>
        return;
    }
    secp256k1_fe_inv_var(&a->z, &a->z);
   22074:	e0bfff17 	ldw	r2,-4(fp)
   22078:	10c01804 	addi	r3,r2,96
   2207c:	e0bfff17 	ldw	r2,-4(fp)
   22080:	10801804 	addi	r2,r2,96
   22084:	100b883a 	mov	r5,r2
   22088:	1809883a 	mov	r4,r3
   2208c:	00218fc0 	call	218fc <secp256k1_fe_inv_var>
    secp256k1_fe_sqr(&z2, &a->z);
   22090:	e0bfff17 	ldw	r2,-4(fp)
   22094:	10801804 	addi	r2,r2,96
   22098:	100b883a 	mov	r5,r2
   2209c:	e13fe604 	addi	r4,fp,-104
   220a0:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&z3, &a->z, &z2);
   220a4:	e0bfff17 	ldw	r2,-4(fp)
   220a8:	10c01804 	addi	r3,r2,96
   220ac:	e0bff204 	addi	r2,fp,-56
   220b0:	e1bfe604 	addi	r6,fp,-104
   220b4:	180b883a 	mov	r5,r3
   220b8:	1009883a 	mov	r4,r2
   220bc:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&a->x, &a->x, &z2);
   220c0:	e0bfff17 	ldw	r2,-4(fp)
   220c4:	e0ffff17 	ldw	r3,-4(fp)
   220c8:	e1bfe604 	addi	r6,fp,-104
   220cc:	180b883a 	mov	r5,r3
   220d0:	1009883a 	mov	r4,r2
   220d4:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&a->y, &a->y, &z3);
   220d8:	e0bfff17 	ldw	r2,-4(fp)
   220dc:	10c00c04 	addi	r3,r2,48
   220e0:	e0bfff17 	ldw	r2,-4(fp)
   220e4:	10800c04 	addi	r2,r2,48
   220e8:	e13ff204 	addi	r4,fp,-56
   220ec:	200d883a 	mov	r6,r4
   220f0:	100b883a 	mov	r5,r2
   220f4:	1809883a 	mov	r4,r3
   220f8:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_set_int(&a->z, 1);
   220fc:	e0bfff17 	ldw	r2,-4(fp)
   22100:	10801804 	addi	r2,r2,96
   22104:	01400044 	movi	r5,1
   22108:	1009883a 	mov	r4,r2
   2210c:	001528c0 	call	1528c <secp256k1_fe_set_int>
    r->x = a->x;
   22110:	e0bffe17 	ldw	r2,-8(fp)
   22114:	e0ffff17 	ldw	r3,-4(fp)
   22118:	19000017 	ldw	r4,0(r3)
   2211c:	11000015 	stw	r4,0(r2)
   22120:	19000117 	ldw	r4,4(r3)
   22124:	11000115 	stw	r4,4(r2)
   22128:	19000217 	ldw	r4,8(r3)
   2212c:	11000215 	stw	r4,8(r2)
   22130:	19000317 	ldw	r4,12(r3)
   22134:	11000315 	stw	r4,12(r2)
   22138:	19000417 	ldw	r4,16(r3)
   2213c:	11000415 	stw	r4,16(r2)
   22140:	19000517 	ldw	r4,20(r3)
   22144:	11000515 	stw	r4,20(r2)
   22148:	19000617 	ldw	r4,24(r3)
   2214c:	11000615 	stw	r4,24(r2)
   22150:	19000717 	ldw	r4,28(r3)
   22154:	11000715 	stw	r4,28(r2)
   22158:	19000817 	ldw	r4,32(r3)
   2215c:	11000815 	stw	r4,32(r2)
   22160:	19000917 	ldw	r4,36(r3)
   22164:	11000915 	stw	r4,36(r2)
   22168:	19000a17 	ldw	r4,40(r3)
   2216c:	11000a15 	stw	r4,40(r2)
   22170:	18c00b17 	ldw	r3,44(r3)
   22174:	10c00b15 	stw	r3,44(r2)
    r->y = a->y;
   22178:	e0bffe17 	ldw	r2,-8(fp)
   2217c:	e0ffff17 	ldw	r3,-4(fp)
   22180:	19000c17 	ldw	r4,48(r3)
   22184:	11000c15 	stw	r4,48(r2)
   22188:	19000d17 	ldw	r4,52(r3)
   2218c:	11000d15 	stw	r4,52(r2)
   22190:	19000e17 	ldw	r4,56(r3)
   22194:	11000e15 	stw	r4,56(r2)
   22198:	19000f17 	ldw	r4,60(r3)
   2219c:	11000f15 	stw	r4,60(r2)
   221a0:	19001017 	ldw	r4,64(r3)
   221a4:	11001015 	stw	r4,64(r2)
   221a8:	19001117 	ldw	r4,68(r3)
   221ac:	11001115 	stw	r4,68(r2)
   221b0:	19001217 	ldw	r4,72(r3)
   221b4:	11001215 	stw	r4,72(r2)
   221b8:	19001317 	ldw	r4,76(r3)
   221bc:	11001315 	stw	r4,76(r2)
   221c0:	19001417 	ldw	r4,80(r3)
   221c4:	11001415 	stw	r4,80(r2)
   221c8:	19001517 	ldw	r4,84(r3)
   221cc:	11001515 	stw	r4,84(r2)
   221d0:	19001617 	ldw	r4,88(r3)
   221d4:	11001615 	stw	r4,88(r2)
   221d8:	18c01717 	ldw	r3,92(r3)
   221dc:	10c01715 	stw	r3,92(r2)
   221e0:	00000106 	br	221e8 <secp256k1_ge_set_gej_var+0x1a8>

static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {
    secp256k1_fe z2, z3;
    r->infinity = a->infinity;
    if (a->infinity) {
        return;
   221e4:	0001883a 	nop
    secp256k1_fe_mul(&a->x, &a->x, &z2);
    secp256k1_fe_mul(&a->y, &a->y, &z3);
    secp256k1_fe_set_int(&a->z, 1);
    r->x = a->x;
    r->y = a->y;
}
   221e8:	e037883a 	mov	sp,fp
   221ec:	dfc00117 	ldw	ra,4(sp)
   221f0:	df000017 	ldw	fp,0(sp)
   221f4:	dec00204 	addi	sp,sp,8
   221f8:	f800283a 	ret

000221fc <secp256k1_ge_set_all_gej_var>:

static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_callback *cb) {
   221fc:	defff404 	addi	sp,sp,-48
   22200:	dfc00b15 	stw	ra,44(sp)
   22204:	df000a15 	stw	fp,40(sp)
   22208:	dc400915 	stw	r17,36(sp)
   2220c:	dc000815 	stw	r16,32(sp)
   22210:	df000a04 	addi	fp,sp,40
   22214:	e13ffa15 	stw	r4,-24(fp)
   22218:	e17ffb15 	stw	r5,-20(fp)
   2221c:	e1bffc15 	stw	r6,-16(fp)
   22220:	e1fffd15 	stw	r7,-12(fp)
    secp256k1_fe *az;
    secp256k1_fe *azi;
    size_t i;
    size_t count = 0;
   22224:	e03ff715 	stw	zero,-36(fp)
    az = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * len);
   22228:	01400c04 	movi	r5,48
   2222c:	e13ffa17 	ldw	r4,-24(fp)
   22230:	0043af40 	call	43af4 <__mulsi3>
   22234:	100b883a 	mov	r5,r2
   22238:	e13ffd17 	ldw	r4,-12(fp)
   2223c:	000de6c0 	call	de6c <checked_malloc>
   22240:	e0bff815 	stw	r2,-32(fp)
    for (i = 0; i < len; i++) {
   22244:	e03ff615 	stw	zero,-40(fp)
   22248:	00003206 	br	22314 <secp256k1_ge_set_all_gej_var+0x118>
        if (!a[i].infinity) {
   2224c:	01402504 	movi	r5,148
   22250:	e13ff617 	ldw	r4,-40(fp)
   22254:	0043af40 	call	43af4 <__mulsi3>
   22258:	1007883a 	mov	r3,r2
   2225c:	e0bffc17 	ldw	r2,-16(fp)
   22260:	10c5883a 	add	r2,r2,r3
   22264:	10802417 	ldw	r2,144(r2)
   22268:	1000271e 	bne	r2,zero,22308 <secp256k1_ge_set_all_gej_var+0x10c>
            az[count++] = a[i].z;
   2226c:	e0bff717 	ldw	r2,-36(fp)
   22270:	10c00044 	addi	r3,r2,1
   22274:	e0fff715 	stw	r3,-36(fp)
   22278:	01400c04 	movi	r5,48
   2227c:	1009883a 	mov	r4,r2
   22280:	0043af40 	call	43af4 <__mulsi3>
   22284:	1007883a 	mov	r3,r2
   22288:	e0bff817 	ldw	r2,-32(fp)
   2228c:	10e1883a 	add	r16,r2,r3
   22290:	01402504 	movi	r5,148
   22294:	e13ff617 	ldw	r4,-40(fp)
   22298:	0043af40 	call	43af4 <__mulsi3>
   2229c:	1007883a 	mov	r3,r2
   222a0:	e0bffc17 	ldw	r2,-16(fp)
   222a4:	10c5883a 	add	r2,r2,r3
   222a8:	10c01817 	ldw	r3,96(r2)
   222ac:	80c00015 	stw	r3,0(r16)
   222b0:	10c01917 	ldw	r3,100(r2)
   222b4:	80c00115 	stw	r3,4(r16)
   222b8:	10c01a17 	ldw	r3,104(r2)
   222bc:	80c00215 	stw	r3,8(r16)
   222c0:	10c01b17 	ldw	r3,108(r2)
   222c4:	80c00315 	stw	r3,12(r16)
   222c8:	10c01c17 	ldw	r3,112(r2)
   222cc:	80c00415 	stw	r3,16(r16)
   222d0:	10c01d17 	ldw	r3,116(r2)
   222d4:	80c00515 	stw	r3,20(r16)
   222d8:	10c01e17 	ldw	r3,120(r2)
   222dc:	80c00615 	stw	r3,24(r16)
   222e0:	10c01f17 	ldw	r3,124(r2)
   222e4:	80c00715 	stw	r3,28(r16)
   222e8:	10c02017 	ldw	r3,128(r2)
   222ec:	80c00815 	stw	r3,32(r16)
   222f0:	10c02117 	ldw	r3,132(r2)
   222f4:	80c00915 	stw	r3,36(r16)
   222f8:	10c02217 	ldw	r3,136(r2)
   222fc:	80c00a15 	stw	r3,40(r16)
   22300:	10802317 	ldw	r2,140(r2)
   22304:	80800b15 	stw	r2,44(r16)
    secp256k1_fe *az;
    secp256k1_fe *azi;
    size_t i;
    size_t count = 0;
    az = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * len);
    for (i = 0; i < len; i++) {
   22308:	e0bff617 	ldw	r2,-40(fp)
   2230c:	10800044 	addi	r2,r2,1
   22310:	e0bff615 	stw	r2,-40(fp)
   22314:	e0fff617 	ldw	r3,-40(fp)
   22318:	e0bffa17 	ldw	r2,-24(fp)
   2231c:	18bfcb36 	bltu	r3,r2,2224c <__alt_mem_epcs_flash_controller+0xfe01924c>
        if (!a[i].infinity) {
            az[count++] = a[i].z;
        }
    }

    azi = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * count);
   22320:	01400c04 	movi	r5,48
   22324:	e13ff717 	ldw	r4,-36(fp)
   22328:	0043af40 	call	43af4 <__mulsi3>
   2232c:	100b883a 	mov	r5,r2
   22330:	e13ffd17 	ldw	r4,-12(fp)
   22334:	000de6c0 	call	de6c <checked_malloc>
   22338:	e0bff915 	stw	r2,-28(fp)
    secp256k1_fe_inv_all_var(count, azi, az);
   2233c:	e1bff817 	ldw	r6,-32(fp)
   22340:	e17ff917 	ldw	r5,-28(fp)
   22344:	e13ff717 	ldw	r4,-36(fp)
   22348:	00219380 	call	21938 <secp256k1_fe_inv_all_var>
    free(az);
   2234c:	e13ff817 	ldw	r4,-32(fp)
   22350:	00463540 	call	46354 <free>

    count = 0;
   22354:	e03ff715 	stw	zero,-36(fp)
    for (i = 0; i < len; i++) {
   22358:	e03ff615 	stw	zero,-40(fp)
   2235c:	00003206 	br	22428 <secp256k1_ge_set_all_gej_var+0x22c>
        r[i].infinity = a[i].infinity;
   22360:	01401904 	movi	r5,100
   22364:	e13ff617 	ldw	r4,-40(fp)
   22368:	0043af40 	call	43af4 <__mulsi3>
   2236c:	1007883a 	mov	r3,r2
   22370:	e0bffb17 	ldw	r2,-20(fp)
   22374:	10e1883a 	add	r16,r2,r3
   22378:	01402504 	movi	r5,148
   2237c:	e13ff617 	ldw	r4,-40(fp)
   22380:	0043af40 	call	43af4 <__mulsi3>
   22384:	1007883a 	mov	r3,r2
   22388:	e0bffc17 	ldw	r2,-16(fp)
   2238c:	10c5883a 	add	r2,r2,r3
   22390:	10802417 	ldw	r2,144(r2)
   22394:	80801815 	stw	r2,96(r16)
        if (!a[i].infinity) {
   22398:	01402504 	movi	r5,148
   2239c:	e13ff617 	ldw	r4,-40(fp)
   223a0:	0043af40 	call	43af4 <__mulsi3>
   223a4:	1007883a 	mov	r3,r2
   223a8:	e0bffc17 	ldw	r2,-16(fp)
   223ac:	10c5883a 	add	r2,r2,r3
   223b0:	10802417 	ldw	r2,144(r2)
   223b4:	1000191e 	bne	r2,zero,2241c <secp256k1_ge_set_all_gej_var+0x220>
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &azi[count++]);
   223b8:	01401904 	movi	r5,100
   223bc:	e13ff617 	ldw	r4,-40(fp)
   223c0:	0043af40 	call	43af4 <__mulsi3>
   223c4:	1007883a 	mov	r3,r2
   223c8:	e0bffb17 	ldw	r2,-20(fp)
   223cc:	10e1883a 	add	r16,r2,r3
   223d0:	01402504 	movi	r5,148
   223d4:	e13ff617 	ldw	r4,-40(fp)
   223d8:	0043af40 	call	43af4 <__mulsi3>
   223dc:	1007883a 	mov	r3,r2
   223e0:	e0bffc17 	ldw	r2,-16(fp)
   223e4:	10e3883a 	add	r17,r2,r3
   223e8:	e0bff717 	ldw	r2,-36(fp)
   223ec:	10c00044 	addi	r3,r2,1
   223f0:	e0fff715 	stw	r3,-36(fp)
   223f4:	01400c04 	movi	r5,48
   223f8:	1009883a 	mov	r4,r2
   223fc:	0043af40 	call	43af4 <__mulsi3>
   22400:	1007883a 	mov	r3,r2
   22404:	e0bff917 	ldw	r2,-28(fp)
   22408:	10c5883a 	add	r2,r2,r3
   2240c:	100d883a 	mov	r6,r2
   22410:	880b883a 	mov	r5,r17
   22414:	8009883a 	mov	r4,r16
   22418:	0021c480 	call	21c48 <secp256k1_ge_set_gej_zinv>
    azi = (secp256k1_fe *)checked_malloc(cb, sizeof(secp256k1_fe) * count);
    secp256k1_fe_inv_all_var(count, azi, az);
    free(az);

    count = 0;
    for (i = 0; i < len; i++) {
   2241c:	e0bff617 	ldw	r2,-40(fp)
   22420:	10800044 	addi	r2,r2,1
   22424:	e0bff615 	stw	r2,-40(fp)
   22428:	e0fff617 	ldw	r3,-40(fp)
   2242c:	e0bffa17 	ldw	r2,-24(fp)
   22430:	18bfcb36 	bltu	r3,r2,22360 <__alt_mem_epcs_flash_controller+0xfe019360>
        r[i].infinity = a[i].infinity;
        if (!a[i].infinity) {
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &azi[count++]);
        }
    }
    free(azi);
   22434:	e13ff917 	ldw	r4,-28(fp)
   22438:	00463540 	call	46354 <free>
}
   2243c:	0001883a 	nop
   22440:	e6fffe04 	addi	sp,fp,-8
   22444:	dfc00317 	ldw	ra,12(sp)
   22448:	df000217 	ldw	fp,8(sp)
   2244c:	dc400117 	ldw	r17,4(sp)
   22450:	dc000017 	ldw	r16,0(sp)
   22454:	dec00404 	addi	sp,sp,16
   22458:	f800283a 	ret

0002245c <secp256k1_ge_set_table_gej_var>:

static void secp256k1_ge_set_table_gej_var(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr) {
   2245c:	deffec04 	addi	sp,sp,-80
   22460:	dfc01315 	stw	ra,76(sp)
   22464:	df001215 	stw	fp,72(sp)
   22468:	dc001115 	stw	r16,68(sp)
   2246c:	df001204 	addi	fp,sp,72
   22470:	e13ffb15 	stw	r4,-20(fp)
   22474:	e17ffc15 	stw	r5,-16(fp)
   22478:	e1bffd15 	stw	r6,-12(fp)
   2247c:	e1fffe15 	stw	r7,-8(fp)
    size_t i = len - 1;
   22480:	e0bffb17 	ldw	r2,-20(fp)
   22484:	10bfffc4 	addi	r2,r2,-1
   22488:	e0bfee15 	stw	r2,-72(fp)
    secp256k1_fe zi;

    if (len > 0) {
   2248c:	e0bffb17 	ldw	r2,-20(fp)
   22490:	10003f26 	beq	r2,zero,22590 <secp256k1_ge_set_table_gej_var+0x134>
        /* Compute the inverse of the last z coordinate, and use it to compute the last affine output. */
        secp256k1_fe_inv(&zi, &a[i].z);
   22494:	01402504 	movi	r5,148
   22498:	e13fee17 	ldw	r4,-72(fp)
   2249c:	0043af40 	call	43af4 <__mulsi3>
   224a0:	1007883a 	mov	r3,r2
   224a4:	e0bffd17 	ldw	r2,-12(fp)
   224a8:	10c5883a 	add	r2,r2,r3
   224ac:	10c01804 	addi	r3,r2,96
   224b0:	e0bfef04 	addi	r2,fp,-68
   224b4:	180b883a 	mov	r5,r3
   224b8:	1009883a 	mov	r4,r2
   224bc:	00210b40 	call	210b4 <secp256k1_fe_inv>
        secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);
   224c0:	01401904 	movi	r5,100
   224c4:	e13fee17 	ldw	r4,-72(fp)
   224c8:	0043af40 	call	43af4 <__mulsi3>
   224cc:	1007883a 	mov	r3,r2
   224d0:	e0bffc17 	ldw	r2,-16(fp)
   224d4:	10e1883a 	add	r16,r2,r3
   224d8:	01402504 	movi	r5,148
   224dc:	e13fee17 	ldw	r4,-72(fp)
   224e0:	0043af40 	call	43af4 <__mulsi3>
   224e4:	1007883a 	mov	r3,r2
   224e8:	e0bffd17 	ldw	r2,-12(fp)
   224ec:	10c5883a 	add	r2,r2,r3
   224f0:	e0ffef04 	addi	r3,fp,-68
   224f4:	180d883a 	mov	r6,r3
   224f8:	100b883a 	mov	r5,r2
   224fc:	8009883a 	mov	r4,r16
   22500:	0021c480 	call	21c48 <secp256k1_ge_set_gej_zinv>

        /* Work out way backwards, using the z-ratios to scale the x/y values. */
        while (i > 0) {
   22504:	00002006 	br	22588 <secp256k1_ge_set_table_gej_var+0x12c>
            secp256k1_fe_mul(&zi, &zi, &zr[i]);
   22508:	01400c04 	movi	r5,48
   2250c:	e13fee17 	ldw	r4,-72(fp)
   22510:	0043af40 	call	43af4 <__mulsi3>
   22514:	1007883a 	mov	r3,r2
   22518:	e0bffe17 	ldw	r2,-8(fp)
   2251c:	10c9883a 	add	r4,r2,r3
   22520:	e0ffef04 	addi	r3,fp,-68
   22524:	e0bfef04 	addi	r2,fp,-68
   22528:	200d883a 	mov	r6,r4
   2252c:	180b883a 	mov	r5,r3
   22530:	1009883a 	mov	r4,r2
   22534:	001feb40 	call	1feb4 <secp256k1_fe_mul>
            i--;
   22538:	e0bfee17 	ldw	r2,-72(fp)
   2253c:	10bfffc4 	addi	r2,r2,-1
   22540:	e0bfee15 	stw	r2,-72(fp)
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);
   22544:	01401904 	movi	r5,100
   22548:	e13fee17 	ldw	r4,-72(fp)
   2254c:	0043af40 	call	43af4 <__mulsi3>
   22550:	1007883a 	mov	r3,r2
   22554:	e0bffc17 	ldw	r2,-16(fp)
   22558:	10e1883a 	add	r16,r2,r3
   2255c:	01402504 	movi	r5,148
   22560:	e13fee17 	ldw	r4,-72(fp)
   22564:	0043af40 	call	43af4 <__mulsi3>
   22568:	1007883a 	mov	r3,r2
   2256c:	e0bffd17 	ldw	r2,-12(fp)
   22570:	10c5883a 	add	r2,r2,r3
   22574:	e0ffef04 	addi	r3,fp,-68
   22578:	180d883a 	mov	r6,r3
   2257c:	100b883a 	mov	r5,r2
   22580:	8009883a 	mov	r4,r16
   22584:	0021c480 	call	21c48 <secp256k1_ge_set_gej_zinv>
        /* Compute the inverse of the last z coordinate, and use it to compute the last affine output. */
        secp256k1_fe_inv(&zi, &a[i].z);
        secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);

        /* Work out way backwards, using the z-ratios to scale the x/y values. */
        while (i > 0) {
   22588:	e0bfee17 	ldw	r2,-72(fp)
   2258c:	103fde1e 	bne	r2,zero,22508 <__alt_mem_epcs_flash_controller+0xfe019508>
            secp256k1_fe_mul(&zi, &zi, &zr[i]);
            i--;
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zi);
        }
    }
}
   22590:	0001883a 	nop
   22594:	e6ffff04 	addi	sp,fp,-4
   22598:	dfc00217 	ldw	ra,8(sp)
   2259c:	df000117 	ldw	fp,4(sp)
   225a0:	dc000017 	ldw	r16,0(sp)
   225a4:	dec00304 	addi	sp,sp,12
   225a8:	f800283a 	ret

000225ac <secp256k1_ge_globalz_set_table_gej>:

static void secp256k1_ge_globalz_set_table_gej(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr) {
   225ac:	deffec04 	addi	sp,sp,-80
   225b0:	dfc01315 	stw	ra,76(sp)
   225b4:	df001215 	stw	fp,72(sp)
   225b8:	dc001115 	stw	r16,68(sp)
   225bc:	df001204 	addi	fp,sp,72
   225c0:	e13ffb15 	stw	r4,-20(fp)
   225c4:	e17ffc15 	stw	r5,-16(fp)
   225c8:	e1bffd15 	stw	r6,-12(fp)
   225cc:	e1fffe15 	stw	r7,-8(fp)
    size_t i = len - 1;
   225d0:	e0bffb17 	ldw	r2,-20(fp)
   225d4:	10bfffc4 	addi	r2,r2,-1
   225d8:	e0bfee15 	stw	r2,-72(fp)
    secp256k1_fe zs;

    if (len > 0) {
   225dc:	e0bffb17 	ldw	r2,-20(fp)
   225e0:	1000b326 	beq	r2,zero,228b0 <secp256k1_ge_globalz_set_table_gej+0x304>
        /* The z of the final point gives us the "global Z" for the table. */
        r[i].x = a[i].x;
   225e4:	01401904 	movi	r5,100
   225e8:	e13fee17 	ldw	r4,-72(fp)
   225ec:	0043af40 	call	43af4 <__mulsi3>
   225f0:	1007883a 	mov	r3,r2
   225f4:	e0bffc17 	ldw	r2,-16(fp)
   225f8:	10e1883a 	add	r16,r2,r3
   225fc:	01402504 	movi	r5,148
   22600:	e13fee17 	ldw	r4,-72(fp)
   22604:	0043af40 	call	43af4 <__mulsi3>
   22608:	1007883a 	mov	r3,r2
   2260c:	e0bffe17 	ldw	r2,-8(fp)
   22610:	10c5883a 	add	r2,r2,r3
   22614:	10c00017 	ldw	r3,0(r2)
   22618:	80c00015 	stw	r3,0(r16)
   2261c:	10c00117 	ldw	r3,4(r2)
   22620:	80c00115 	stw	r3,4(r16)
   22624:	10c00217 	ldw	r3,8(r2)
   22628:	80c00215 	stw	r3,8(r16)
   2262c:	10c00317 	ldw	r3,12(r2)
   22630:	80c00315 	stw	r3,12(r16)
   22634:	10c00417 	ldw	r3,16(r2)
   22638:	80c00415 	stw	r3,16(r16)
   2263c:	10c00517 	ldw	r3,20(r2)
   22640:	80c00515 	stw	r3,20(r16)
   22644:	10c00617 	ldw	r3,24(r2)
   22648:	80c00615 	stw	r3,24(r16)
   2264c:	10c00717 	ldw	r3,28(r2)
   22650:	80c00715 	stw	r3,28(r16)
   22654:	10c00817 	ldw	r3,32(r2)
   22658:	80c00815 	stw	r3,32(r16)
   2265c:	10c00917 	ldw	r3,36(r2)
   22660:	80c00915 	stw	r3,36(r16)
   22664:	10c00a17 	ldw	r3,40(r2)
   22668:	80c00a15 	stw	r3,40(r16)
   2266c:	10800b17 	ldw	r2,44(r2)
   22670:	80800b15 	stw	r2,44(r16)
        r[i].y = a[i].y;
   22674:	01401904 	movi	r5,100
   22678:	e13fee17 	ldw	r4,-72(fp)
   2267c:	0043af40 	call	43af4 <__mulsi3>
   22680:	1007883a 	mov	r3,r2
   22684:	e0bffc17 	ldw	r2,-16(fp)
   22688:	10e1883a 	add	r16,r2,r3
   2268c:	01402504 	movi	r5,148
   22690:	e13fee17 	ldw	r4,-72(fp)
   22694:	0043af40 	call	43af4 <__mulsi3>
   22698:	1007883a 	mov	r3,r2
   2269c:	e0bffe17 	ldw	r2,-8(fp)
   226a0:	10c5883a 	add	r2,r2,r3
   226a4:	10c00c17 	ldw	r3,48(r2)
   226a8:	80c00c15 	stw	r3,48(r16)
   226ac:	10c00d17 	ldw	r3,52(r2)
   226b0:	80c00d15 	stw	r3,52(r16)
   226b4:	10c00e17 	ldw	r3,56(r2)
   226b8:	80c00e15 	stw	r3,56(r16)
   226bc:	10c00f17 	ldw	r3,60(r2)
   226c0:	80c00f15 	stw	r3,60(r16)
   226c4:	10c01017 	ldw	r3,64(r2)
   226c8:	80c01015 	stw	r3,64(r16)
   226cc:	10c01117 	ldw	r3,68(r2)
   226d0:	80c01115 	stw	r3,68(r16)
   226d4:	10c01217 	ldw	r3,72(r2)
   226d8:	80c01215 	stw	r3,72(r16)
   226dc:	10c01317 	ldw	r3,76(r2)
   226e0:	80c01315 	stw	r3,76(r16)
   226e4:	10c01417 	ldw	r3,80(r2)
   226e8:	80c01415 	stw	r3,80(r16)
   226ec:	10c01517 	ldw	r3,84(r2)
   226f0:	80c01515 	stw	r3,84(r16)
   226f4:	10c01617 	ldw	r3,88(r2)
   226f8:	80c01615 	stw	r3,88(r16)
   226fc:	10801717 	ldw	r2,92(r2)
   22700:	80801715 	stw	r2,92(r16)
        *globalz = a[i].z;
   22704:	01402504 	movi	r5,148
   22708:	e13fee17 	ldw	r4,-72(fp)
   2270c:	0043af40 	call	43af4 <__mulsi3>
   22710:	1007883a 	mov	r3,r2
   22714:	e0bffe17 	ldw	r2,-8(fp)
   22718:	10c7883a 	add	r3,r2,r3
   2271c:	e0bffd17 	ldw	r2,-12(fp)
   22720:	19001817 	ldw	r4,96(r3)
   22724:	11000015 	stw	r4,0(r2)
   22728:	19001917 	ldw	r4,100(r3)
   2272c:	11000115 	stw	r4,4(r2)
   22730:	19001a17 	ldw	r4,104(r3)
   22734:	11000215 	stw	r4,8(r2)
   22738:	19001b17 	ldw	r4,108(r3)
   2273c:	11000315 	stw	r4,12(r2)
   22740:	19001c17 	ldw	r4,112(r3)
   22744:	11000415 	stw	r4,16(r2)
   22748:	19001d17 	ldw	r4,116(r3)
   2274c:	11000515 	stw	r4,20(r2)
   22750:	19001e17 	ldw	r4,120(r3)
   22754:	11000615 	stw	r4,24(r2)
   22758:	19001f17 	ldw	r4,124(r3)
   2275c:	11000715 	stw	r4,28(r2)
   22760:	19002017 	ldw	r4,128(r3)
   22764:	11000815 	stw	r4,32(r2)
   22768:	19002117 	ldw	r4,132(r3)
   2276c:	11000915 	stw	r4,36(r2)
   22770:	19002217 	ldw	r4,136(r3)
   22774:	11000a15 	stw	r4,40(r2)
   22778:	18c02317 	ldw	r3,140(r3)
   2277c:	10c00b15 	stw	r3,44(r2)
        r[i].infinity = 0;
   22780:	01401904 	movi	r5,100
   22784:	e13fee17 	ldw	r4,-72(fp)
   22788:	0043af40 	call	43af4 <__mulsi3>
   2278c:	1007883a 	mov	r3,r2
   22790:	e0bffc17 	ldw	r2,-16(fp)
   22794:	10c5883a 	add	r2,r2,r3
   22798:	10001815 	stw	zero,96(r2)
        zs = zr[i];
   2279c:	01400c04 	movi	r5,48
   227a0:	e13fee17 	ldw	r4,-72(fp)
   227a4:	0043af40 	call	43af4 <__mulsi3>
   227a8:	1007883a 	mov	r3,r2
   227ac:	e0800217 	ldw	r2,8(fp)
   227b0:	10c5883a 	add	r2,r2,r3
   227b4:	10c00017 	ldw	r3,0(r2)
   227b8:	e0ffef15 	stw	r3,-68(fp)
   227bc:	10c00117 	ldw	r3,4(r2)
   227c0:	e0fff015 	stw	r3,-64(fp)
   227c4:	10c00217 	ldw	r3,8(r2)
   227c8:	e0fff115 	stw	r3,-60(fp)
   227cc:	10c00317 	ldw	r3,12(r2)
   227d0:	e0fff215 	stw	r3,-56(fp)
   227d4:	10c00417 	ldw	r3,16(r2)
   227d8:	e0fff315 	stw	r3,-52(fp)
   227dc:	10c00517 	ldw	r3,20(r2)
   227e0:	e0fff415 	stw	r3,-48(fp)
   227e4:	10c00617 	ldw	r3,24(r2)
   227e8:	e0fff515 	stw	r3,-44(fp)
   227ec:	10c00717 	ldw	r3,28(r2)
   227f0:	e0fff615 	stw	r3,-40(fp)
   227f4:	10c00817 	ldw	r3,32(r2)
   227f8:	e0fff715 	stw	r3,-36(fp)
   227fc:	10c00917 	ldw	r3,36(r2)
   22800:	e0fff815 	stw	r3,-32(fp)
   22804:	10c00a17 	ldw	r3,40(r2)
   22808:	e0fff915 	stw	r3,-28(fp)
   2280c:	10800b17 	ldw	r2,44(r2)
   22810:	e0bffa15 	stw	r2,-24(fp)

        /* Work our way backwards, using the z-ratios to scale the x/y values. */
        while (i > 0) {
   22814:	00002406 	br	228a8 <secp256k1_ge_globalz_set_table_gej+0x2fc>
            if (i != len - 1) {
   22818:	e0bffb17 	ldw	r2,-20(fp)
   2281c:	10ffffc4 	addi	r3,r2,-1
   22820:	e0bfee17 	ldw	r2,-72(fp)
   22824:	18800c26 	beq	r3,r2,22858 <secp256k1_ge_globalz_set_table_gej+0x2ac>
                secp256k1_fe_mul(&zs, &zs, &zr[i]);
   22828:	01400c04 	movi	r5,48
   2282c:	e13fee17 	ldw	r4,-72(fp)
   22830:	0043af40 	call	43af4 <__mulsi3>
   22834:	1007883a 	mov	r3,r2
   22838:	e0800217 	ldw	r2,8(fp)
   2283c:	10c9883a 	add	r4,r2,r3
   22840:	e0ffef04 	addi	r3,fp,-68
   22844:	e0bfef04 	addi	r2,fp,-68
   22848:	200d883a 	mov	r6,r4
   2284c:	180b883a 	mov	r5,r3
   22850:	1009883a 	mov	r4,r2
   22854:	001feb40 	call	1feb4 <secp256k1_fe_mul>
            }
            i--;
   22858:	e0bfee17 	ldw	r2,-72(fp)
   2285c:	10bfffc4 	addi	r2,r2,-1
   22860:	e0bfee15 	stw	r2,-72(fp)
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zs);
   22864:	01401904 	movi	r5,100
   22868:	e13fee17 	ldw	r4,-72(fp)
   2286c:	0043af40 	call	43af4 <__mulsi3>
   22870:	1007883a 	mov	r3,r2
   22874:	e0bffc17 	ldw	r2,-16(fp)
   22878:	10e1883a 	add	r16,r2,r3
   2287c:	01402504 	movi	r5,148
   22880:	e13fee17 	ldw	r4,-72(fp)
   22884:	0043af40 	call	43af4 <__mulsi3>
   22888:	1007883a 	mov	r3,r2
   2288c:	e0bffe17 	ldw	r2,-8(fp)
   22890:	10c5883a 	add	r2,r2,r3
   22894:	e0ffef04 	addi	r3,fp,-68
   22898:	180d883a 	mov	r6,r3
   2289c:	100b883a 	mov	r5,r2
   228a0:	8009883a 	mov	r4,r16
   228a4:	0021c480 	call	21c48 <secp256k1_ge_set_gej_zinv>
        *globalz = a[i].z;
        r[i].infinity = 0;
        zs = zr[i];

        /* Work our way backwards, using the z-ratios to scale the x/y values. */
        while (i > 0) {
   228a8:	e0bfee17 	ldw	r2,-72(fp)
   228ac:	103fda1e 	bne	r2,zero,22818 <__alt_mem_epcs_flash_controller+0xfe019818>
            }
            i--;
            secp256k1_ge_set_gej_zinv(&r[i], &a[i], &zs);
        }
    }
}
   228b0:	0001883a 	nop
   228b4:	e6ffff04 	addi	sp,fp,-4
   228b8:	dfc00217 	ldw	ra,8(sp)
   228bc:	df000117 	ldw	fp,4(sp)
   228c0:	dc000017 	ldw	r16,0(sp)
   228c4:	dec00304 	addi	sp,sp,12
   228c8:	f800283a 	ret

000228cc <secp256k1_gej_set_infinity>:

static void secp256k1_gej_set_infinity(secp256k1_gej *r) {
   228cc:	defffd04 	addi	sp,sp,-12
   228d0:	dfc00215 	stw	ra,8(sp)
   228d4:	df000115 	stw	fp,4(sp)
   228d8:	df000104 	addi	fp,sp,4
   228dc:	e13fff15 	stw	r4,-4(fp)
    r->infinity = 1;
   228e0:	e0bfff17 	ldw	r2,-4(fp)
   228e4:	00c00044 	movi	r3,1
   228e8:	10c02415 	stw	r3,144(r2)
    secp256k1_fe_set_int(&r->x, 0);
   228ec:	e0bfff17 	ldw	r2,-4(fp)
   228f0:	000b883a 	mov	r5,zero
   228f4:	1009883a 	mov	r4,r2
   228f8:	001528c0 	call	1528c <secp256k1_fe_set_int>
    secp256k1_fe_set_int(&r->y, 0);
   228fc:	e0bfff17 	ldw	r2,-4(fp)
   22900:	10800c04 	addi	r2,r2,48
   22904:	000b883a 	mov	r5,zero
   22908:	1009883a 	mov	r4,r2
   2290c:	001528c0 	call	1528c <secp256k1_fe_set_int>
    secp256k1_fe_set_int(&r->z, 0);
   22910:	e0bfff17 	ldw	r2,-4(fp)
   22914:	10801804 	addi	r2,r2,96
   22918:	000b883a 	mov	r5,zero
   2291c:	1009883a 	mov	r4,r2
   22920:	001528c0 	call	1528c <secp256k1_fe_set_int>
}
   22924:	0001883a 	nop
   22928:	e037883a 	mov	sp,fp
   2292c:	dfc00117 	ldw	ra,4(sp)
   22930:	df000017 	ldw	fp,0(sp)
   22934:	dec00204 	addi	sp,sp,8
   22938:	f800283a 	ret

0002293c <secp256k1_gej_clear>:

static void secp256k1_gej_clear(secp256k1_gej *r) {
   2293c:	defffd04 	addi	sp,sp,-12
   22940:	dfc00215 	stw	ra,8(sp)
   22944:	df000115 	stw	fp,4(sp)
   22948:	df000104 	addi	fp,sp,4
   2294c:	e13fff15 	stw	r4,-4(fp)
    r->infinity = 0;
   22950:	e0bfff17 	ldw	r2,-4(fp)
   22954:	10002415 	stw	zero,144(r2)
    secp256k1_fe_clear(&r->x);
   22958:	e0bfff17 	ldw	r2,-4(fp)
   2295c:	1009883a 	mov	r4,r2
   22960:	00155140 	call	15514 <secp256k1_fe_clear>
    secp256k1_fe_clear(&r->y);
   22964:	e0bfff17 	ldw	r2,-4(fp)
   22968:	10800c04 	addi	r2,r2,48
   2296c:	1009883a 	mov	r4,r2
   22970:	00155140 	call	15514 <secp256k1_fe_clear>
    secp256k1_fe_clear(&r->z);
   22974:	e0bfff17 	ldw	r2,-4(fp)
   22978:	10801804 	addi	r2,r2,96
   2297c:	1009883a 	mov	r4,r2
   22980:	00155140 	call	15514 <secp256k1_fe_clear>
}
   22984:	0001883a 	nop
   22988:	e037883a 	mov	sp,fp
   2298c:	dfc00117 	ldw	ra,4(sp)
   22990:	df000017 	ldw	fp,0(sp)
   22994:	dec00204 	addi	sp,sp,8
   22998:	f800283a 	ret

0002299c <secp256k1_ge_clear>:

static void secp256k1_ge_clear(secp256k1_ge *r) {
   2299c:	defffd04 	addi	sp,sp,-12
   229a0:	dfc00215 	stw	ra,8(sp)
   229a4:	df000115 	stw	fp,4(sp)
   229a8:	df000104 	addi	fp,sp,4
   229ac:	e13fff15 	stw	r4,-4(fp)
    r->infinity = 0;
   229b0:	e0bfff17 	ldw	r2,-4(fp)
   229b4:	10001815 	stw	zero,96(r2)
    secp256k1_fe_clear(&r->x);
   229b8:	e0bfff17 	ldw	r2,-4(fp)
   229bc:	1009883a 	mov	r4,r2
   229c0:	00155140 	call	15514 <secp256k1_fe_clear>
    secp256k1_fe_clear(&r->y);
   229c4:	e0bfff17 	ldw	r2,-4(fp)
   229c8:	10800c04 	addi	r2,r2,48
   229cc:	1009883a 	mov	r4,r2
   229d0:	00155140 	call	15514 <secp256k1_fe_clear>
}
   229d4:	0001883a 	nop
   229d8:	e037883a 	mov	sp,fp
   229dc:	dfc00117 	ldw	ra,4(sp)
   229e0:	df000017 	ldw	fp,0(sp)
   229e4:	dec00204 	addi	sp,sp,8
   229e8:	f800283a 	ret

000229ec <secp256k1_ge_set_xquad>:

static int secp256k1_ge_set_xquad(secp256k1_ge *r, const secp256k1_fe *x) {
   229ec:	deffd804 	addi	sp,sp,-160
   229f0:	dfc02715 	stw	ra,156(sp)
   229f4:	df002615 	stw	fp,152(sp)
   229f8:	df002604 	addi	fp,sp,152
   229fc:	e13ffe15 	stw	r4,-8(fp)
   22a00:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe x2, x3, c;
    r->x = *x;
   22a04:	e0bffe17 	ldw	r2,-8(fp)
   22a08:	e0ffff17 	ldw	r3,-4(fp)
   22a0c:	19000017 	ldw	r4,0(r3)
   22a10:	11000015 	stw	r4,0(r2)
   22a14:	19000117 	ldw	r4,4(r3)
   22a18:	11000115 	stw	r4,4(r2)
   22a1c:	19000217 	ldw	r4,8(r3)
   22a20:	11000215 	stw	r4,8(r2)
   22a24:	19000317 	ldw	r4,12(r3)
   22a28:	11000315 	stw	r4,12(r2)
   22a2c:	19000417 	ldw	r4,16(r3)
   22a30:	11000415 	stw	r4,16(r2)
   22a34:	19000517 	ldw	r4,20(r3)
   22a38:	11000515 	stw	r4,20(r2)
   22a3c:	19000617 	ldw	r4,24(r3)
   22a40:	11000615 	stw	r4,24(r2)
   22a44:	19000717 	ldw	r4,28(r3)
   22a48:	11000715 	stw	r4,28(r2)
   22a4c:	19000817 	ldw	r4,32(r3)
   22a50:	11000815 	stw	r4,32(r2)
   22a54:	19000917 	ldw	r4,36(r3)
   22a58:	11000915 	stw	r4,36(r2)
   22a5c:	19000a17 	ldw	r4,40(r3)
   22a60:	11000a15 	stw	r4,40(r2)
   22a64:	18c00b17 	ldw	r3,44(r3)
   22a68:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_sqr(&x2, x);
   22a6c:	e17fff17 	ldw	r5,-4(fp)
   22a70:	e13fda04 	addi	r4,fp,-152
   22a74:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&x3, x, &x2);
   22a78:	e0bfe604 	addi	r2,fp,-104
   22a7c:	e1bfda04 	addi	r6,fp,-152
   22a80:	e17fff17 	ldw	r5,-4(fp)
   22a84:	1009883a 	mov	r4,r2
   22a88:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    r->infinity = 0;
   22a8c:	e0bffe17 	ldw	r2,-8(fp)
   22a90:	10001815 	stw	zero,96(r2)
    secp256k1_fe_set_int(&c, 7);
   22a94:	e0bff204 	addi	r2,fp,-56
   22a98:	014001c4 	movi	r5,7
   22a9c:	1009883a 	mov	r4,r2
   22aa0:	001528c0 	call	1528c <secp256k1_fe_set_int>
    secp256k1_fe_add(&c, &x3);
   22aa4:	e0ffe604 	addi	r3,fp,-104
   22aa8:	e0bff204 	addi	r2,fp,-56
   22aac:	180b883a 	mov	r5,r3
   22ab0:	1009883a 	mov	r4,r2
   22ab4:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    return secp256k1_fe_sqrt(&r->y, &c);
   22ab8:	e0bffe17 	ldw	r2,-8(fp)
   22abc:	10800c04 	addi	r2,r2,48
   22ac0:	e0fff204 	addi	r3,fp,-56
   22ac4:	180b883a 	mov	r5,r3
   22ac8:	1009883a 	mov	r4,r2
   22acc:	00208c00 	call	208c0 <secp256k1_fe_sqrt>
}
   22ad0:	e037883a 	mov	sp,fp
   22ad4:	dfc00117 	ldw	ra,4(sp)
   22ad8:	df000017 	ldw	fp,0(sp)
   22adc:	dec00204 	addi	sp,sp,8
   22ae0:	f800283a 	ret

00022ae4 <secp256k1_ge_set_xo_var>:

static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {
   22ae4:	defffb04 	addi	sp,sp,-20
   22ae8:	dfc00415 	stw	ra,16(sp)
   22aec:	df000315 	stw	fp,12(sp)
   22af0:	df000304 	addi	fp,sp,12
   22af4:	e13ffd15 	stw	r4,-12(fp)
   22af8:	e17ffe15 	stw	r5,-8(fp)
   22afc:	e1bfff15 	stw	r6,-4(fp)
    if (!secp256k1_ge_set_xquad(r, x)) {
   22b00:	e17ffe17 	ldw	r5,-8(fp)
   22b04:	e13ffd17 	ldw	r4,-12(fp)
   22b08:	00229ec0 	call	229ec <secp256k1_ge_set_xquad>
   22b0c:	1000021e 	bne	r2,zero,22b18 <secp256k1_ge_set_xo_var+0x34>
        return 0;
   22b10:	0005883a 	mov	r2,zero
   22b14:	00001406 	br	22b68 <secp256k1_ge_set_xo_var+0x84>
    }
    secp256k1_fe_normalize_var(&r->y);
   22b18:	e0bffd17 	ldw	r2,-12(fp)
   22b1c:	10800c04 	addi	r2,r2,48
   22b20:	1009883a 	mov	r4,r2
   22b24:	001446c0 	call	1446c <secp256k1_fe_normalize_var>
    if (secp256k1_fe_is_odd(&r->y) != odd) {
   22b28:	e0bffd17 	ldw	r2,-12(fp)
   22b2c:	10800c04 	addi	r2,r2,48
   22b30:	1009883a 	mov	r4,r2
   22b34:	00154900 	call	15490 <secp256k1_fe_is_odd>
   22b38:	1007883a 	mov	r3,r2
   22b3c:	e0bfff17 	ldw	r2,-4(fp)
   22b40:	18800826 	beq	r3,r2,22b64 <secp256k1_ge_set_xo_var+0x80>
        secp256k1_fe_negate(&r->y, &r->y, 1);
   22b44:	e0bffd17 	ldw	r2,-12(fp)
   22b48:	10c00c04 	addi	r3,r2,48
   22b4c:	e0bffd17 	ldw	r2,-12(fp)
   22b50:	10800c04 	addi	r2,r2,48
   22b54:	01800044 	movi	r6,1
   22b58:	100b883a 	mov	r5,r2
   22b5c:	1809883a 	mov	r4,r3
   22b60:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    }
    return 1;
   22b64:	00800044 	movi	r2,1

}
   22b68:	e037883a 	mov	sp,fp
   22b6c:	dfc00117 	ldw	ra,4(sp)
   22b70:	df000017 	ldw	fp,0(sp)
   22b74:	dec00204 	addi	sp,sp,8
   22b78:	f800283a 	ret

00022b7c <secp256k1_gej_set_ge>:

static void secp256k1_gej_set_ge(secp256k1_gej *r, const secp256k1_ge *a) {
   22b7c:	defffc04 	addi	sp,sp,-16
   22b80:	dfc00315 	stw	ra,12(sp)
   22b84:	df000215 	stw	fp,8(sp)
   22b88:	df000204 	addi	fp,sp,8
   22b8c:	e13ffe15 	stw	r4,-8(fp)
   22b90:	e17fff15 	stw	r5,-4(fp)
   r->infinity = a->infinity;
   22b94:	e0bfff17 	ldw	r2,-4(fp)
   22b98:	10c01817 	ldw	r3,96(r2)
   22b9c:	e0bffe17 	ldw	r2,-8(fp)
   22ba0:	10c02415 	stw	r3,144(r2)
   r->x = a->x;
   22ba4:	e0bffe17 	ldw	r2,-8(fp)
   22ba8:	e0ffff17 	ldw	r3,-4(fp)
   22bac:	19000017 	ldw	r4,0(r3)
   22bb0:	11000015 	stw	r4,0(r2)
   22bb4:	19000117 	ldw	r4,4(r3)
   22bb8:	11000115 	stw	r4,4(r2)
   22bbc:	19000217 	ldw	r4,8(r3)
   22bc0:	11000215 	stw	r4,8(r2)
   22bc4:	19000317 	ldw	r4,12(r3)
   22bc8:	11000315 	stw	r4,12(r2)
   22bcc:	19000417 	ldw	r4,16(r3)
   22bd0:	11000415 	stw	r4,16(r2)
   22bd4:	19000517 	ldw	r4,20(r3)
   22bd8:	11000515 	stw	r4,20(r2)
   22bdc:	19000617 	ldw	r4,24(r3)
   22be0:	11000615 	stw	r4,24(r2)
   22be4:	19000717 	ldw	r4,28(r3)
   22be8:	11000715 	stw	r4,28(r2)
   22bec:	19000817 	ldw	r4,32(r3)
   22bf0:	11000815 	stw	r4,32(r2)
   22bf4:	19000917 	ldw	r4,36(r3)
   22bf8:	11000915 	stw	r4,36(r2)
   22bfc:	19000a17 	ldw	r4,40(r3)
   22c00:	11000a15 	stw	r4,40(r2)
   22c04:	18c00b17 	ldw	r3,44(r3)
   22c08:	10c00b15 	stw	r3,44(r2)
   r->y = a->y;
   22c0c:	e0bffe17 	ldw	r2,-8(fp)
   22c10:	e0ffff17 	ldw	r3,-4(fp)
   22c14:	19000c17 	ldw	r4,48(r3)
   22c18:	11000c15 	stw	r4,48(r2)
   22c1c:	19000d17 	ldw	r4,52(r3)
   22c20:	11000d15 	stw	r4,52(r2)
   22c24:	19000e17 	ldw	r4,56(r3)
   22c28:	11000e15 	stw	r4,56(r2)
   22c2c:	19000f17 	ldw	r4,60(r3)
   22c30:	11000f15 	stw	r4,60(r2)
   22c34:	19001017 	ldw	r4,64(r3)
   22c38:	11001015 	stw	r4,64(r2)
   22c3c:	19001117 	ldw	r4,68(r3)
   22c40:	11001115 	stw	r4,68(r2)
   22c44:	19001217 	ldw	r4,72(r3)
   22c48:	11001215 	stw	r4,72(r2)
   22c4c:	19001317 	ldw	r4,76(r3)
   22c50:	11001315 	stw	r4,76(r2)
   22c54:	19001417 	ldw	r4,80(r3)
   22c58:	11001415 	stw	r4,80(r2)
   22c5c:	19001517 	ldw	r4,84(r3)
   22c60:	11001515 	stw	r4,84(r2)
   22c64:	19001617 	ldw	r4,88(r3)
   22c68:	11001615 	stw	r4,88(r2)
   22c6c:	18c01717 	ldw	r3,92(r3)
   22c70:	10c01715 	stw	r3,92(r2)
   secp256k1_fe_set_int(&r->z, 1);
   22c74:	e0bffe17 	ldw	r2,-8(fp)
   22c78:	10801804 	addi	r2,r2,96
   22c7c:	01400044 	movi	r5,1
   22c80:	1009883a 	mov	r4,r2
   22c84:	001528c0 	call	1528c <secp256k1_fe_set_int>
}
   22c88:	0001883a 	nop
   22c8c:	e037883a 	mov	sp,fp
   22c90:	dfc00117 	ldw	ra,4(sp)
   22c94:	df000017 	ldw	fp,0(sp)
   22c98:	dec00204 	addi	sp,sp,8
   22c9c:	f800283a 	ret

00022ca0 <secp256k1_gej_eq_x_var>:

static int secp256k1_gej_eq_x_var(const secp256k1_fe *x, const secp256k1_gej *a) {
   22ca0:	deffe304 	addi	sp,sp,-116
   22ca4:	dfc01c15 	stw	ra,112(sp)
   22ca8:	df001b15 	stw	fp,108(sp)
   22cac:	df001b04 	addi	fp,sp,108
   22cb0:	e13ffe15 	stw	r4,-8(fp)
   22cb4:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe r, r2;
    VERIFY_CHECK(!a->infinity);
   22cb8:	e0bfff17 	ldw	r2,-4(fp)
   22cbc:	10802417 	ldw	r2,144(r2)
   22cc0:	1004c03a 	cmpne	r2,r2,zero
   22cc4:	10803fcc 	andi	r2,r2,255
   22cc8:	10000d26 	beq	r2,zero,22d00 <secp256k1_gej_eq_x_var+0x60>
   22ccc:	d0a01617 	ldw	r2,-32680(gp)
   22cd0:	10c00317 	ldw	r3,12(r2)
   22cd4:	00800174 	movhi	r2,5
   22cd8:	1095fe04 	addi	r2,r2,22520
   22cdc:	d8800015 	stw	r2,0(sp)
   22ce0:	01c03184 	movi	r7,198
   22ce4:	01800174 	movhi	r6,5
   22ce8:	3195f504 	addi	r6,r6,22484
   22cec:	01400174 	movhi	r5,5
   22cf0:	2951e804 	addi	r5,r5,18336
   22cf4:	1809883a 	mov	r4,r3
   22cf8:	00461000 	call	46100 <fprintf>
   22cfc:	0045fd40 	call	45fd4 <abort>
    secp256k1_fe_sqr(&r, &a->z); secp256k1_fe_mul(&r, &r, x);
   22d00:	e0bfff17 	ldw	r2,-4(fp)
   22d04:	10801804 	addi	r2,r2,96
   22d08:	100b883a 	mov	r5,r2
   22d0c:	e13fe604 	addi	r4,fp,-104
   22d10:	00200080 	call	20008 <secp256k1_fe_sqr>
   22d14:	e1bffe17 	ldw	r6,-8(fp)
   22d18:	e17fe604 	addi	r5,fp,-104
   22d1c:	e13fe604 	addi	r4,fp,-104
   22d20:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    r2 = a->x; secp256k1_fe_normalize_weak(&r2);
   22d24:	e0bfff17 	ldw	r2,-4(fp)
   22d28:	10c00017 	ldw	r3,0(r2)
   22d2c:	e0fff215 	stw	r3,-56(fp)
   22d30:	10c00117 	ldw	r3,4(r2)
   22d34:	e0fff315 	stw	r3,-52(fp)
   22d38:	10c00217 	ldw	r3,8(r2)
   22d3c:	e0fff415 	stw	r3,-48(fp)
   22d40:	10c00317 	ldw	r3,12(r2)
   22d44:	e0fff515 	stw	r3,-44(fp)
   22d48:	10c00417 	ldw	r3,16(r2)
   22d4c:	e0fff615 	stw	r3,-40(fp)
   22d50:	10c00517 	ldw	r3,20(r2)
   22d54:	e0fff715 	stw	r3,-36(fp)
   22d58:	10c00617 	ldw	r3,24(r2)
   22d5c:	e0fff815 	stw	r3,-32(fp)
   22d60:	10c00717 	ldw	r3,28(r2)
   22d64:	e0fff915 	stw	r3,-28(fp)
   22d68:	10c00817 	ldw	r3,32(r2)
   22d6c:	e0fffa15 	stw	r3,-24(fp)
   22d70:	10c00917 	ldw	r3,36(r2)
   22d74:	e0fffb15 	stw	r3,-20(fp)
   22d78:	10c00a17 	ldw	r3,40(r2)
   22d7c:	e0fffc15 	stw	r3,-16(fp)
   22d80:	10800b17 	ldw	r2,44(r2)
   22d84:	e0bffd15 	stw	r2,-12(fp)
   22d88:	e0bff204 	addi	r2,fp,-56
   22d8c:	1009883a 	mov	r4,r2
   22d90:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    return secp256k1_fe_equal_var(&r, &r2);
   22d94:	e0bff204 	addi	r2,fp,-56
   22d98:	100b883a 	mov	r5,r2
   22d9c:	e13fe604 	addi	r4,fp,-104
   22da0:	00208700 	call	20870 <secp256k1_fe_equal_var>
}
   22da4:	e037883a 	mov	sp,fp
   22da8:	dfc00117 	ldw	ra,4(sp)
   22dac:	df000017 	ldw	fp,0(sp)
   22db0:	dec00204 	addi	sp,sp,8
   22db4:	f800283a 	ret

00022db8 <secp256k1_gej_neg>:

static void secp256k1_gej_neg(secp256k1_gej *r, const secp256k1_gej *a) {
   22db8:	defffc04 	addi	sp,sp,-16
   22dbc:	dfc00315 	stw	ra,12(sp)
   22dc0:	df000215 	stw	fp,8(sp)
   22dc4:	df000204 	addi	fp,sp,8
   22dc8:	e13ffe15 	stw	r4,-8(fp)
   22dcc:	e17fff15 	stw	r5,-4(fp)
    r->infinity = a->infinity;
   22dd0:	e0bfff17 	ldw	r2,-4(fp)
   22dd4:	10c02417 	ldw	r3,144(r2)
   22dd8:	e0bffe17 	ldw	r2,-8(fp)
   22ddc:	10c02415 	stw	r3,144(r2)
    r->x = a->x;
   22de0:	e0bffe17 	ldw	r2,-8(fp)
   22de4:	e0ffff17 	ldw	r3,-4(fp)
   22de8:	19000017 	ldw	r4,0(r3)
   22dec:	11000015 	stw	r4,0(r2)
   22df0:	19000117 	ldw	r4,4(r3)
   22df4:	11000115 	stw	r4,4(r2)
   22df8:	19000217 	ldw	r4,8(r3)
   22dfc:	11000215 	stw	r4,8(r2)
   22e00:	19000317 	ldw	r4,12(r3)
   22e04:	11000315 	stw	r4,12(r2)
   22e08:	19000417 	ldw	r4,16(r3)
   22e0c:	11000415 	stw	r4,16(r2)
   22e10:	19000517 	ldw	r4,20(r3)
   22e14:	11000515 	stw	r4,20(r2)
   22e18:	19000617 	ldw	r4,24(r3)
   22e1c:	11000615 	stw	r4,24(r2)
   22e20:	19000717 	ldw	r4,28(r3)
   22e24:	11000715 	stw	r4,28(r2)
   22e28:	19000817 	ldw	r4,32(r3)
   22e2c:	11000815 	stw	r4,32(r2)
   22e30:	19000917 	ldw	r4,36(r3)
   22e34:	11000915 	stw	r4,36(r2)
   22e38:	19000a17 	ldw	r4,40(r3)
   22e3c:	11000a15 	stw	r4,40(r2)
   22e40:	18c00b17 	ldw	r3,44(r3)
   22e44:	10c00b15 	stw	r3,44(r2)
    r->y = a->y;
   22e48:	e0bffe17 	ldw	r2,-8(fp)
   22e4c:	e0ffff17 	ldw	r3,-4(fp)
   22e50:	19000c17 	ldw	r4,48(r3)
   22e54:	11000c15 	stw	r4,48(r2)
   22e58:	19000d17 	ldw	r4,52(r3)
   22e5c:	11000d15 	stw	r4,52(r2)
   22e60:	19000e17 	ldw	r4,56(r3)
   22e64:	11000e15 	stw	r4,56(r2)
   22e68:	19000f17 	ldw	r4,60(r3)
   22e6c:	11000f15 	stw	r4,60(r2)
   22e70:	19001017 	ldw	r4,64(r3)
   22e74:	11001015 	stw	r4,64(r2)
   22e78:	19001117 	ldw	r4,68(r3)
   22e7c:	11001115 	stw	r4,68(r2)
   22e80:	19001217 	ldw	r4,72(r3)
   22e84:	11001215 	stw	r4,72(r2)
   22e88:	19001317 	ldw	r4,76(r3)
   22e8c:	11001315 	stw	r4,76(r2)
   22e90:	19001417 	ldw	r4,80(r3)
   22e94:	11001415 	stw	r4,80(r2)
   22e98:	19001517 	ldw	r4,84(r3)
   22e9c:	11001515 	stw	r4,84(r2)
   22ea0:	19001617 	ldw	r4,88(r3)
   22ea4:	11001615 	stw	r4,88(r2)
   22ea8:	18c01717 	ldw	r3,92(r3)
   22eac:	10c01715 	stw	r3,92(r2)
    r->z = a->z;
   22eb0:	e0bffe17 	ldw	r2,-8(fp)
   22eb4:	e0ffff17 	ldw	r3,-4(fp)
   22eb8:	19001817 	ldw	r4,96(r3)
   22ebc:	11001815 	stw	r4,96(r2)
   22ec0:	19001917 	ldw	r4,100(r3)
   22ec4:	11001915 	stw	r4,100(r2)
   22ec8:	19001a17 	ldw	r4,104(r3)
   22ecc:	11001a15 	stw	r4,104(r2)
   22ed0:	19001b17 	ldw	r4,108(r3)
   22ed4:	11001b15 	stw	r4,108(r2)
   22ed8:	19001c17 	ldw	r4,112(r3)
   22edc:	11001c15 	stw	r4,112(r2)
   22ee0:	19001d17 	ldw	r4,116(r3)
   22ee4:	11001d15 	stw	r4,116(r2)
   22ee8:	19001e17 	ldw	r4,120(r3)
   22eec:	11001e15 	stw	r4,120(r2)
   22ef0:	19001f17 	ldw	r4,124(r3)
   22ef4:	11001f15 	stw	r4,124(r2)
   22ef8:	19002017 	ldw	r4,128(r3)
   22efc:	11002015 	stw	r4,128(r2)
   22f00:	19002117 	ldw	r4,132(r3)
   22f04:	11002115 	stw	r4,132(r2)
   22f08:	19002217 	ldw	r4,136(r3)
   22f0c:	11002215 	stw	r4,136(r2)
   22f10:	18c02317 	ldw	r3,140(r3)
   22f14:	10c02315 	stw	r3,140(r2)
    secp256k1_fe_normalize_weak(&r->y);
   22f18:	e0bffe17 	ldw	r2,-8(fp)
   22f1c:	10800c04 	addi	r2,r2,48
   22f20:	1009883a 	mov	r4,r2
   22f24:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    secp256k1_fe_negate(&r->y, &r->y, 1);
   22f28:	e0bffe17 	ldw	r2,-8(fp)
   22f2c:	10c00c04 	addi	r3,r2,48
   22f30:	e0bffe17 	ldw	r2,-8(fp)
   22f34:	10800c04 	addi	r2,r2,48
   22f38:	01800044 	movi	r6,1
   22f3c:	100b883a 	mov	r5,r2
   22f40:	1809883a 	mov	r4,r3
   22f44:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
}
   22f48:	0001883a 	nop
   22f4c:	e037883a 	mov	sp,fp
   22f50:	dfc00117 	ldw	ra,4(sp)
   22f54:	df000017 	ldw	fp,0(sp)
   22f58:	dec00204 	addi	sp,sp,8
   22f5c:	f800283a 	ret

00022f60 <secp256k1_gej_is_infinity>:

static int secp256k1_gej_is_infinity(const secp256k1_gej *a) {
   22f60:	defffe04 	addi	sp,sp,-8
   22f64:	df000115 	stw	fp,4(sp)
   22f68:	df000104 	addi	fp,sp,4
   22f6c:	e13fff15 	stw	r4,-4(fp)
    return a->infinity;
   22f70:	e0bfff17 	ldw	r2,-4(fp)
   22f74:	10802417 	ldw	r2,144(r2)
}
   22f78:	e037883a 	mov	sp,fp
   22f7c:	df000017 	ldw	fp,0(sp)
   22f80:	dec00104 	addi	sp,sp,4
   22f84:	f800283a 	ret

00022f88 <secp256k1_gej_is_valid_var>:

static int secp256k1_gej_is_valid_var(const secp256k1_gej *a) {
   22f88:	deffcd04 	addi	sp,sp,-204
   22f8c:	dfc03215 	stw	ra,200(sp)
   22f90:	df003115 	stw	fp,196(sp)
   22f94:	df003104 	addi	fp,sp,196
   22f98:	e13fff15 	stw	r4,-4(fp)
    secp256k1_fe y2, x3, z2, z6;
    if (a->infinity) {
   22f9c:	e0bfff17 	ldw	r2,-4(fp)
   22fa0:	10802417 	ldw	r2,144(r2)
   22fa4:	10000226 	beq	r2,zero,22fb0 <secp256k1_gej_is_valid_var+0x28>
        return 0;
   22fa8:	0005883a 	mov	r2,zero
   22fac:	00003306 	br	2307c <secp256k1_gej_is_valid_var+0xf4>
    /** y^2 = x^3 + 7
     *  (Y/Z^3)^2 = (X/Z^2)^3 + 7
     *  Y^2 / Z^6 = X^3 / Z^6 + 7
     *  Y^2 = X^3 + 7*Z^6
     */
    secp256k1_fe_sqr(&y2, &a->y);
   22fb0:	e0bfff17 	ldw	r2,-4(fp)
   22fb4:	10800c04 	addi	r2,r2,48
   22fb8:	100b883a 	mov	r5,r2
   22fbc:	e13fcf04 	addi	r4,fp,-196
   22fc0:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);
   22fc4:	e0ffff17 	ldw	r3,-4(fp)
   22fc8:	e0bfdb04 	addi	r2,fp,-148
   22fcc:	180b883a 	mov	r5,r3
   22fd0:	1009883a 	mov	r4,r2
   22fd4:	00200080 	call	20008 <secp256k1_fe_sqr>
   22fd8:	e13fff17 	ldw	r4,-4(fp)
   22fdc:	e0ffdb04 	addi	r3,fp,-148
   22fe0:	e0bfdb04 	addi	r2,fp,-148
   22fe4:	200d883a 	mov	r6,r4
   22fe8:	180b883a 	mov	r5,r3
   22fec:	1009883a 	mov	r4,r2
   22ff0:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_sqr(&z2, &a->z);
   22ff4:	e0bfff17 	ldw	r2,-4(fp)
   22ff8:	10c01804 	addi	r3,r2,96
   22ffc:	e0bfe704 	addi	r2,fp,-100
   23000:	180b883a 	mov	r5,r3
   23004:	1009883a 	mov	r4,r2
   23008:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&z6, &z2); secp256k1_fe_mul(&z6, &z6, &z2);
   2300c:	e0ffe704 	addi	r3,fp,-100
   23010:	e0bff304 	addi	r2,fp,-52
   23014:	180b883a 	mov	r5,r3
   23018:	1009883a 	mov	r4,r2
   2301c:	00200080 	call	20008 <secp256k1_fe_sqr>
   23020:	e13fe704 	addi	r4,fp,-100
   23024:	e0fff304 	addi	r3,fp,-52
   23028:	e0bff304 	addi	r2,fp,-52
   2302c:	200d883a 	mov	r6,r4
   23030:	180b883a 	mov	r5,r3
   23034:	1009883a 	mov	r4,r2
   23038:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul_int(&z6, 7);
   2303c:	e0bff304 	addi	r2,fp,-52
   23040:	014001c4 	movi	r5,7
   23044:	1009883a 	mov	r4,r2
   23048:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_add(&x3, &z6);
   2304c:	e0fff304 	addi	r3,fp,-52
   23050:	e0bfdb04 	addi	r2,fp,-148
   23054:	180b883a 	mov	r5,r3
   23058:	1009883a 	mov	r4,r2
   2305c:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_normalize_weak(&x3);
   23060:	e0bfdb04 	addi	r2,fp,-148
   23064:	1009883a 	mov	r4,r2
   23068:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    return secp256k1_fe_equal_var(&y2, &x3);
   2306c:	e0bfdb04 	addi	r2,fp,-148
   23070:	100b883a 	mov	r5,r2
   23074:	e13fcf04 	addi	r4,fp,-196
   23078:	00208700 	call	20870 <secp256k1_fe_equal_var>
}
   2307c:	e037883a 	mov	sp,fp
   23080:	dfc00117 	ldw	ra,4(sp)
   23084:	df000017 	ldw	fp,0(sp)
   23088:	dec00204 	addi	sp,sp,8
   2308c:	f800283a 	ret

00023090 <secp256k1_ge_is_valid_var>:

static int secp256k1_ge_is_valid_var(const secp256k1_ge *a) {
   23090:	deffd904 	addi	sp,sp,-156
   23094:	dfc02615 	stw	ra,152(sp)
   23098:	df002515 	stw	fp,148(sp)
   2309c:	df002504 	addi	fp,sp,148
   230a0:	e13fff15 	stw	r4,-4(fp)
    secp256k1_fe y2, x3, c;
    if (a->infinity) {
   230a4:	e0bfff17 	ldw	r2,-4(fp)
   230a8:	10801817 	ldw	r2,96(r2)
   230ac:	10000226 	beq	r2,zero,230b8 <secp256k1_ge_is_valid_var+0x28>
        return 0;
   230b0:	0005883a 	mov	r2,zero
   230b4:	00002106 	br	2313c <secp256k1_ge_is_valid_var+0xac>
    }
    /* y^2 = x^3 + 7 */
    secp256k1_fe_sqr(&y2, &a->y);
   230b8:	e0bfff17 	ldw	r2,-4(fp)
   230bc:	10800c04 	addi	r2,r2,48
   230c0:	100b883a 	mov	r5,r2
   230c4:	e13fdb04 	addi	r4,fp,-148
   230c8:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);
   230cc:	e0ffff17 	ldw	r3,-4(fp)
   230d0:	e0bfe704 	addi	r2,fp,-100
   230d4:	180b883a 	mov	r5,r3
   230d8:	1009883a 	mov	r4,r2
   230dc:	00200080 	call	20008 <secp256k1_fe_sqr>
   230e0:	e13fff17 	ldw	r4,-4(fp)
   230e4:	e0ffe704 	addi	r3,fp,-100
   230e8:	e0bfe704 	addi	r2,fp,-100
   230ec:	200d883a 	mov	r6,r4
   230f0:	180b883a 	mov	r5,r3
   230f4:	1009883a 	mov	r4,r2
   230f8:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_set_int(&c, 7);
   230fc:	e0bff304 	addi	r2,fp,-52
   23100:	014001c4 	movi	r5,7
   23104:	1009883a 	mov	r4,r2
   23108:	001528c0 	call	1528c <secp256k1_fe_set_int>
    secp256k1_fe_add(&x3, &c);
   2310c:	e0fff304 	addi	r3,fp,-52
   23110:	e0bfe704 	addi	r2,fp,-100
   23114:	180b883a 	mov	r5,r3
   23118:	1009883a 	mov	r4,r2
   2311c:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_normalize_weak(&x3);
   23120:	e0bfe704 	addi	r2,fp,-100
   23124:	1009883a 	mov	r4,r2
   23128:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    return secp256k1_fe_equal_var(&y2, &x3);
   2312c:	e0bfe704 	addi	r2,fp,-100
   23130:	100b883a 	mov	r5,r2
   23134:	e13fdb04 	addi	r4,fp,-148
   23138:	00208700 	call	20870 <secp256k1_fe_equal_var>
}
   2313c:	e037883a 	mov	sp,fp
   23140:	dfc00117 	ldw	ra,4(sp)
   23144:	df000017 	ldw	fp,0(sp)
   23148:	dec00204 	addi	sp,sp,8
   2314c:	f800283a 	ret

00023150 <secp256k1_gej_double_var>:

static void secp256k1_gej_double_var(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {
   23150:	deffcb04 	addi	sp,sp,-212
   23154:	dfc03415 	stw	ra,208(sp)
   23158:	df003315 	stw	fp,204(sp)
   2315c:	df003304 	addi	fp,sp,204
   23160:	e13ffd15 	stw	r4,-12(fp)
   23164:	e17ffe15 	stw	r5,-8(fp)
   23168:	e1bfff15 	stw	r6,-4(fp)
     *  a fault attack, it is possible for y to be 0. This happens for y^2 = x^3 + 6,
     *  since -6 does have a cube root mod p. For this point, this function will not set
     *  the infinity flag even though the point doubles to infinity, and the result
     *  point will be gibberish (z = 0 but infinity = 0).
     */
    r->infinity = a->infinity;
   2316c:	e0bffe17 	ldw	r2,-8(fp)
   23170:	10c02417 	ldw	r3,144(r2)
   23174:	e0bffd17 	ldw	r2,-12(fp)
   23178:	10c02415 	stw	r3,144(r2)
    if (r->infinity) {
   2317c:	e0bffd17 	ldw	r2,-12(fp)
   23180:	10802417 	ldw	r2,144(r2)
   23184:	10000626 	beq	r2,zero,231a0 <secp256k1_gej_double_var+0x50>
        if (rzr != NULL) {
   23188:	e0bfff17 	ldw	r2,-4(fp)
   2318c:	1000a426 	beq	r2,zero,23420 <secp256k1_gej_double_var+0x2d0>
            secp256k1_fe_set_int(rzr, 1);
   23190:	01400044 	movi	r5,1
   23194:	e13fff17 	ldw	r4,-4(fp)
   23198:	001528c0 	call	1528c <secp256k1_fe_set_int>
   2319c:	0000a106 	br	23424 <secp256k1_gej_double_var+0x2d4>
        }
        return;
    }

    if (rzr != NULL) {
   231a0:	e0bfff17 	ldw	r2,-4(fp)
   231a4:	10001f26 	beq	r2,zero,23224 <secp256k1_gej_double_var+0xd4>
        *rzr = a->y;
   231a8:	e0bfff17 	ldw	r2,-4(fp)
   231ac:	e0fffe17 	ldw	r3,-8(fp)
   231b0:	19000c17 	ldw	r4,48(r3)
   231b4:	11000015 	stw	r4,0(r2)
   231b8:	19000d17 	ldw	r4,52(r3)
   231bc:	11000115 	stw	r4,4(r2)
   231c0:	19000e17 	ldw	r4,56(r3)
   231c4:	11000215 	stw	r4,8(r2)
   231c8:	19000f17 	ldw	r4,60(r3)
   231cc:	11000315 	stw	r4,12(r2)
   231d0:	19001017 	ldw	r4,64(r3)
   231d4:	11000415 	stw	r4,16(r2)
   231d8:	19001117 	ldw	r4,68(r3)
   231dc:	11000515 	stw	r4,20(r2)
   231e0:	19001217 	ldw	r4,72(r3)
   231e4:	11000615 	stw	r4,24(r2)
   231e8:	19001317 	ldw	r4,76(r3)
   231ec:	11000715 	stw	r4,28(r2)
   231f0:	19001417 	ldw	r4,80(r3)
   231f4:	11000815 	stw	r4,32(r2)
   231f8:	19001517 	ldw	r4,84(r3)
   231fc:	11000915 	stw	r4,36(r2)
   23200:	19001617 	ldw	r4,88(r3)
   23204:	11000a15 	stw	r4,40(r2)
   23208:	18c01717 	ldw	r3,92(r3)
   2320c:	10c00b15 	stw	r3,44(r2)
        secp256k1_fe_normalize_weak(rzr);
   23210:	e13fff17 	ldw	r4,-4(fp)
   23214:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
        secp256k1_fe_mul_int(rzr, 2);
   23218:	01400084 	movi	r5,2
   2321c:	e13fff17 	ldw	r4,-4(fp)
   23220:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    }

    secp256k1_fe_mul(&r->z, &a->z, &a->y);
   23224:	e0bffd17 	ldw	r2,-12(fp)
   23228:	10c01804 	addi	r3,r2,96
   2322c:	e0bffe17 	ldw	r2,-8(fp)
   23230:	11001804 	addi	r4,r2,96
   23234:	e0bffe17 	ldw	r2,-8(fp)
   23238:	10800c04 	addi	r2,r2,48
   2323c:	100d883a 	mov	r6,r2
   23240:	200b883a 	mov	r5,r4
   23244:	1809883a 	mov	r4,r3
   23248:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul_int(&r->z, 2);       /* Z' = 2*Y*Z (2) */
   2324c:	e0bffd17 	ldw	r2,-12(fp)
   23250:	10801804 	addi	r2,r2,96
   23254:	01400084 	movi	r5,2
   23258:	1009883a 	mov	r4,r2
   2325c:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_sqr(&t1, &a->x);
   23260:	e0bffe17 	ldw	r2,-8(fp)
   23264:	100b883a 	mov	r5,r2
   23268:	e13fcd04 	addi	r4,fp,-204
   2326c:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul_int(&t1, 3);         /* T1 = 3*X^2 (3) */
   23270:	014000c4 	movi	r5,3
   23274:	e13fcd04 	addi	r4,fp,-204
   23278:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_sqr(&t2, &t1);           /* T2 = 9*X^4 (1) */
   2327c:	e0bfd904 	addi	r2,fp,-156
   23280:	e17fcd04 	addi	r5,fp,-204
   23284:	1009883a 	mov	r4,r2
   23288:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&t3, &a->y);
   2328c:	e0bffe17 	ldw	r2,-8(fp)
   23290:	10c00c04 	addi	r3,r2,48
   23294:	e0bfe504 	addi	r2,fp,-108
   23298:	180b883a 	mov	r5,r3
   2329c:	1009883a 	mov	r4,r2
   232a0:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul_int(&t3, 2);         /* T3 = 2*Y^2 (2) */
   232a4:	e0bfe504 	addi	r2,fp,-108
   232a8:	01400084 	movi	r5,2
   232ac:	1009883a 	mov	r4,r2
   232b0:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_sqr(&t4, &t3);
   232b4:	e0ffe504 	addi	r3,fp,-108
   232b8:	e0bff104 	addi	r2,fp,-60
   232bc:	180b883a 	mov	r5,r3
   232c0:	1009883a 	mov	r4,r2
   232c4:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul_int(&t4, 2);         /* T4 = 8*Y^4 (2) */
   232c8:	e0bff104 	addi	r2,fp,-60
   232cc:	01400084 	movi	r5,2
   232d0:	1009883a 	mov	r4,r2
   232d4:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_mul(&t3, &t3, &a->x);    /* T3 = 2*X*Y^2 (1) */
   232d8:	e13ffe17 	ldw	r4,-8(fp)
   232dc:	e0ffe504 	addi	r3,fp,-108
   232e0:	e0bfe504 	addi	r2,fp,-108
   232e4:	200d883a 	mov	r6,r4
   232e8:	180b883a 	mov	r5,r3
   232ec:	1009883a 	mov	r4,r2
   232f0:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    r->x = t3;
   232f4:	e0bffd17 	ldw	r2,-12(fp)
   232f8:	e0ffe517 	ldw	r3,-108(fp)
   232fc:	10c00015 	stw	r3,0(r2)
   23300:	e0ffe617 	ldw	r3,-104(fp)
   23304:	10c00115 	stw	r3,4(r2)
   23308:	e0ffe717 	ldw	r3,-100(fp)
   2330c:	10c00215 	stw	r3,8(r2)
   23310:	e0ffe817 	ldw	r3,-96(fp)
   23314:	10c00315 	stw	r3,12(r2)
   23318:	e0ffe917 	ldw	r3,-92(fp)
   2331c:	10c00415 	stw	r3,16(r2)
   23320:	e0ffea17 	ldw	r3,-88(fp)
   23324:	10c00515 	stw	r3,20(r2)
   23328:	e0ffeb17 	ldw	r3,-84(fp)
   2332c:	10c00615 	stw	r3,24(r2)
   23330:	e0ffec17 	ldw	r3,-80(fp)
   23334:	10c00715 	stw	r3,28(r2)
   23338:	e0ffed17 	ldw	r3,-76(fp)
   2333c:	10c00815 	stw	r3,32(r2)
   23340:	e0ffee17 	ldw	r3,-72(fp)
   23344:	10c00915 	stw	r3,36(r2)
   23348:	e0ffef17 	ldw	r3,-68(fp)
   2334c:	10c00a15 	stw	r3,40(r2)
   23350:	e0fff017 	ldw	r3,-64(fp)
   23354:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_mul_int(&r->x, 4);       /* X' = 8*X*Y^2 (4) */
   23358:	e0bffd17 	ldw	r2,-12(fp)
   2335c:	01400104 	movi	r5,4
   23360:	1009883a 	mov	r4,r2
   23364:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_negate(&r->x, &r->x, 4); /* X' = -8*X*Y^2 (5) */
   23368:	e0bffd17 	ldw	r2,-12(fp)
   2336c:	e0fffd17 	ldw	r3,-12(fp)
   23370:	01800104 	movi	r6,4
   23374:	180b883a 	mov	r5,r3
   23378:	1009883a 	mov	r4,r2
   2337c:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->x, &t2);         /* X' = 9*X^4 - 8*X*Y^2 (6) */
   23380:	e0bffd17 	ldw	r2,-12(fp)
   23384:	e0ffd904 	addi	r3,fp,-156
   23388:	180b883a 	mov	r5,r3
   2338c:	1009883a 	mov	r4,r2
   23390:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_negate(&t2, &t2, 1);     /* T2 = -9*X^4 (2) */
   23394:	e0ffd904 	addi	r3,fp,-156
   23398:	e0bfd904 	addi	r2,fp,-156
   2339c:	01800044 	movi	r6,1
   233a0:	180b883a 	mov	r5,r3
   233a4:	1009883a 	mov	r4,r2
   233a8:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_mul_int(&t3, 6);         /* T3 = 12*X*Y^2 (6) */
   233ac:	e0bfe504 	addi	r2,fp,-108
   233b0:	01400184 	movi	r5,6
   233b4:	1009883a 	mov	r4,r2
   233b8:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_add(&t3, &t2);           /* T3 = 12*X*Y^2 - 9*X^4 (8) */
   233bc:	e0ffd904 	addi	r3,fp,-156
   233c0:	e0bfe504 	addi	r2,fp,-108
   233c4:	180b883a 	mov	r5,r3
   233c8:	1009883a 	mov	r4,r2
   233cc:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_mul(&r->y, &t1, &t3);    /* Y' = 36*X^3*Y^2 - 27*X^6 (1) */
   233d0:	e0bffd17 	ldw	r2,-12(fp)
   233d4:	10800c04 	addi	r2,r2,48
   233d8:	e0ffe504 	addi	r3,fp,-108
   233dc:	180d883a 	mov	r6,r3
   233e0:	e17fcd04 	addi	r5,fp,-204
   233e4:	1009883a 	mov	r4,r2
   233e8:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_negate(&t2, &t4, 2);     /* T2 = -8*Y^4 (3) */
   233ec:	e0fff104 	addi	r3,fp,-60
   233f0:	e0bfd904 	addi	r2,fp,-156
   233f4:	01800084 	movi	r6,2
   233f8:	180b883a 	mov	r5,r3
   233fc:	1009883a 	mov	r4,r2
   23400:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->y, &t2);         /* Y' = 36*X^3*Y^2 - 27*X^6 - 8*Y^4 (4) */
   23404:	e0bffd17 	ldw	r2,-12(fp)
   23408:	10800c04 	addi	r2,r2,48
   2340c:	e0ffd904 	addi	r3,fp,-156
   23410:	180b883a 	mov	r5,r3
   23414:	1009883a 	mov	r4,r2
   23418:	0015ef80 	call	15ef8 <secp256k1_fe_add>
   2341c:	00000106 	br	23424 <secp256k1_gej_double_var+0x2d4>
    r->infinity = a->infinity;
    if (r->infinity) {
        if (rzr != NULL) {
            secp256k1_fe_set_int(rzr, 1);
        }
        return;
   23420:	0001883a 	nop
    secp256k1_fe_mul_int(&t3, 6);         /* T3 = 12*X*Y^2 (6) */
    secp256k1_fe_add(&t3, &t2);           /* T3 = 12*X*Y^2 - 9*X^4 (8) */
    secp256k1_fe_mul(&r->y, &t1, &t3);    /* Y' = 36*X^3*Y^2 - 27*X^6 (1) */
    secp256k1_fe_negate(&t2, &t4, 2);     /* T2 = -8*Y^4 (3) */
    secp256k1_fe_add(&r->y, &t2);         /* Y' = 36*X^3*Y^2 - 27*X^6 - 8*Y^4 (4) */
}
   23424:	e037883a 	mov	sp,fp
   23428:	dfc00117 	ldw	ra,4(sp)
   2342c:	df000017 	ldw	fp,0(sp)
   23430:	dec00204 	addi	sp,sp,8
   23434:	f800283a 	ret

00023438 <secp256k1_gej_double_nonzero>:

static SECP256K1_INLINE void secp256k1_gej_double_nonzero(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {
   23438:	defffa04 	addi	sp,sp,-24
   2343c:	dfc00515 	stw	ra,20(sp)
   23440:	df000415 	stw	fp,16(sp)
   23444:	df000404 	addi	fp,sp,16
   23448:	e13ffd15 	stw	r4,-12(fp)
   2344c:	e17ffe15 	stw	r5,-8(fp)
   23450:	e1bfff15 	stw	r6,-4(fp)
    VERIFY_CHECK(!secp256k1_gej_is_infinity(a));
   23454:	e13ffe17 	ldw	r4,-8(fp)
   23458:	0022f600 	call	22f60 <secp256k1_gej_is_infinity>
   2345c:	1004c03a 	cmpne	r2,r2,zero
   23460:	10803fcc 	andi	r2,r2,255
   23464:	10000d26 	beq	r2,zero,2349c <secp256k1_gej_double_nonzero+0x64>
   23468:	d0a01617 	ldw	r2,-32680(gp)
   2346c:	10c00317 	ldw	r3,12(r2)
   23470:	00800174 	movhi	r2,5
   23474:	10960704 	addi	r2,r2,22556
   23478:	d8800015 	stw	r2,0(sp)
   2347c:	01c04cc4 	movi	r7,307
   23480:	01800174 	movhi	r6,5
   23484:	3195f504 	addi	r6,r6,22484
   23488:	01400174 	movhi	r5,5
   2348c:	2951e804 	addi	r5,r5,18336
   23490:	1809883a 	mov	r4,r3
   23494:	00461000 	call	46100 <fprintf>
   23498:	0045fd40 	call	45fd4 <abort>
    secp256k1_gej_double_var(r, a, rzr);
   2349c:	e1bfff17 	ldw	r6,-4(fp)
   234a0:	e17ffe17 	ldw	r5,-8(fp)
   234a4:	e13ffd17 	ldw	r4,-12(fp)
   234a8:	00231500 	call	23150 <secp256k1_gej_double_var>
}
   234ac:	0001883a 	nop
   234b0:	e037883a 	mov	sp,fp
   234b4:	dfc00117 	ldw	ra,4(sp)
   234b8:	df000017 	ldw	fp,0(sp)
   234bc:	dec00204 	addi	sp,sp,8
   234c0:	f800283a 	ret

000234c4 <secp256k1_gej_add_var>:

static void secp256k1_gej_add_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr) {
   234c4:	deff6904 	addi	sp,sp,-604
   234c8:	dfc09615 	stw	ra,600(sp)
   234cc:	df009515 	stw	fp,596(sp)
   234d0:	df009504 	addi	fp,sp,596
   234d4:	e13ffc15 	stw	r4,-16(fp)
   234d8:	e17ffd15 	stw	r5,-12(fp)
   234dc:	e1bffe15 	stw	r6,-8(fp)
   234e0:	e1ffff15 	stw	r7,-4(fp)
    /* Operations: 12 mul, 4 sqr, 2 normalize, 12 mul_int/add/negate */
    secp256k1_fe z22, z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;

    if (a->infinity) {
   234e4:	e0bffd17 	ldw	r2,-12(fp)
   234e8:	10802417 	ldw	r2,144(r2)
   234ec:	10001a26 	beq	r2,zero,23558 <secp256k1_gej_add_var+0x94>
        VERIFY_CHECK(rzr == NULL);
   234f0:	e0bfff17 	ldw	r2,-4(fp)
   234f4:	1004c03a 	cmpne	r2,r2,zero
   234f8:	10803fcc 	andi	r2,r2,255
   234fc:	10000d26 	beq	r2,zero,23534 <secp256k1_gej_add_var+0x70>
   23500:	d0a01617 	ldw	r2,-32680(gp)
   23504:	10c00317 	ldw	r3,12(r2)
   23508:	00800174 	movhi	r2,5
   2350c:	10961504 	addi	r2,r2,22612
   23510:	d8800015 	stw	r2,0(sp)
   23514:	01c04f04 	movi	r7,316
   23518:	01800174 	movhi	r6,5
   2351c:	3195f504 	addi	r6,r6,22484
   23520:	01400174 	movhi	r5,5
   23524:	2951e804 	addi	r5,r5,18336
   23528:	1809883a 	mov	r4,r3
   2352c:	00461000 	call	46100 <fprintf>
   23530:	0045fd40 	call	45fd4 <abort>
        *r = *b;
   23534:	e0fffc17 	ldw	r3,-16(fp)
   23538:	e0bffe17 	ldw	r2,-8(fp)
   2353c:	1009883a 	mov	r4,r2
   23540:	00802504 	movi	r2,148
   23544:	100d883a 	mov	r6,r2
   23548:	200b883a 	mov	r5,r4
   2354c:	1809883a 	mov	r4,r3
   23550:	00463980 	call	46398 <memcpy>
        return;
   23554:	00011006 	br	23998 <secp256k1_gej_add_var+0x4d4>
    }

    if (b->infinity) {
   23558:	e0bffe17 	ldw	r2,-8(fp)
   2355c:	10802417 	ldw	r2,144(r2)
   23560:	10000e26 	beq	r2,zero,2359c <secp256k1_gej_add_var+0xd8>
        if (rzr != NULL) {
   23564:	e0bfff17 	ldw	r2,-4(fp)
   23568:	10000326 	beq	r2,zero,23578 <secp256k1_gej_add_var+0xb4>
            secp256k1_fe_set_int(rzr, 1);
   2356c:	01400044 	movi	r5,1
   23570:	e13fff17 	ldw	r4,-4(fp)
   23574:	001528c0 	call	1528c <secp256k1_fe_set_int>
        }
        *r = *a;
   23578:	e0fffc17 	ldw	r3,-16(fp)
   2357c:	e0bffd17 	ldw	r2,-12(fp)
   23580:	1009883a 	mov	r4,r2
   23584:	00802504 	movi	r2,148
   23588:	100d883a 	mov	r6,r2
   2358c:	200b883a 	mov	r5,r4
   23590:	1809883a 	mov	r4,r3
   23594:	00463980 	call	46398 <memcpy>
        return;
   23598:	0000ff06 	br	23998 <secp256k1_gej_add_var+0x4d4>
    }

    r->infinity = 0;
   2359c:	e0bffc17 	ldw	r2,-16(fp)
   235a0:	10002415 	stw	zero,144(r2)
    secp256k1_fe_sqr(&z22, &b->z);
   235a4:	e0bffe17 	ldw	r2,-8(fp)
   235a8:	10801804 	addi	r2,r2,96
   235ac:	100b883a 	mov	r5,r2
   235b0:	e13f6c04 	addi	r4,fp,-592
   235b4:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&z12, &a->z);
   235b8:	e0bffd17 	ldw	r2,-12(fp)
   235bc:	10c01804 	addi	r3,r2,96
   235c0:	e0bf7804 	addi	r2,fp,-544
   235c4:	180b883a 	mov	r5,r3
   235c8:	1009883a 	mov	r4,r2
   235cc:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&u1, &a->x, &z22);
   235d0:	e0fffd17 	ldw	r3,-12(fp)
   235d4:	e0bf8404 	addi	r2,fp,-496
   235d8:	e1bf6c04 	addi	r6,fp,-592
   235dc:	180b883a 	mov	r5,r3
   235e0:	1009883a 	mov	r4,r2
   235e4:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&u2, &b->x, &z12);
   235e8:	e0fffe17 	ldw	r3,-8(fp)
   235ec:	e13f7804 	addi	r4,fp,-544
   235f0:	e0bf9004 	addi	r2,fp,-448
   235f4:	200d883a 	mov	r6,r4
   235f8:	180b883a 	mov	r5,r3
   235fc:	1009883a 	mov	r4,r2
   23600:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&s1, &a->y, &z22); secp256k1_fe_mul(&s1, &s1, &b->z);
   23604:	e0bffd17 	ldw	r2,-12(fp)
   23608:	10c00c04 	addi	r3,r2,48
   2360c:	e0bf9c04 	addi	r2,fp,-400
   23610:	e1bf6c04 	addi	r6,fp,-592
   23614:	180b883a 	mov	r5,r3
   23618:	1009883a 	mov	r4,r2
   2361c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
   23620:	e0bffe17 	ldw	r2,-8(fp)
   23624:	11001804 	addi	r4,r2,96
   23628:	e0ff9c04 	addi	r3,fp,-400
   2362c:	e0bf9c04 	addi	r2,fp,-400
   23630:	200d883a 	mov	r6,r4
   23634:	180b883a 	mov	r5,r3
   23638:	1009883a 	mov	r4,r2
   2363c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);
   23640:	e0bffe17 	ldw	r2,-8(fp)
   23644:	10c00c04 	addi	r3,r2,48
   23648:	e13f7804 	addi	r4,fp,-544
   2364c:	e0bfa804 	addi	r2,fp,-352
   23650:	200d883a 	mov	r6,r4
   23654:	180b883a 	mov	r5,r3
   23658:	1009883a 	mov	r4,r2
   2365c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
   23660:	e0bffd17 	ldw	r2,-12(fp)
   23664:	11001804 	addi	r4,r2,96
   23668:	e0ffa804 	addi	r3,fp,-352
   2366c:	e0bfa804 	addi	r2,fp,-352
   23670:	200d883a 	mov	r6,r4
   23674:	180b883a 	mov	r5,r3
   23678:	1009883a 	mov	r4,r2
   2367c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);
   23680:	e0ff8404 	addi	r3,fp,-496
   23684:	e0bfb404 	addi	r2,fp,-304
   23688:	01800044 	movi	r6,1
   2368c:	180b883a 	mov	r5,r3
   23690:	1009883a 	mov	r4,r2
   23694:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   23698:	e0ff9004 	addi	r3,fp,-448
   2369c:	e0bfb404 	addi	r2,fp,-304
   236a0:	180b883a 	mov	r5,r3
   236a4:	1009883a 	mov	r4,r2
   236a8:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
   236ac:	e0ff9c04 	addi	r3,fp,-400
   236b0:	e0bfc004 	addi	r2,fp,-256
   236b4:	01800044 	movi	r6,1
   236b8:	180b883a 	mov	r5,r3
   236bc:	1009883a 	mov	r4,r2
   236c0:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   236c4:	e0ffa804 	addi	r3,fp,-352
   236c8:	e0bfc004 	addi	r2,fp,-256
   236cc:	180b883a 	mov	r5,r3
   236d0:	1009883a 	mov	r4,r2
   236d4:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
   236d8:	e0bfb404 	addi	r2,fp,-304
   236dc:	1009883a 	mov	r4,r2
   236e0:	0014e640 	call	14e64 <secp256k1_fe_normalizes_to_zero_var>
   236e4:	10001226 	beq	r2,zero,23730 <secp256k1_gej_add_var+0x26c>
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
   236e8:	e0bfc004 	addi	r2,fp,-256
   236ec:	1009883a 	mov	r4,r2
   236f0:	0014e640 	call	14e64 <secp256k1_fe_normalizes_to_zero_var>
   236f4:	10000526 	beq	r2,zero,2370c <secp256k1_gej_add_var+0x248>
            secp256k1_gej_double_var(r, a, rzr);
   236f8:	e1bfff17 	ldw	r6,-4(fp)
   236fc:	e17ffd17 	ldw	r5,-12(fp)
   23700:	e13ffc17 	ldw	r4,-16(fp)
   23704:	00231500 	call	23150 <secp256k1_gej_double_var>
            if (rzr != NULL) {
                secp256k1_fe_set_int(rzr, 0);
            }
            r->infinity = 1;
        }
        return;
   23708:	0000a306 	br	23998 <secp256k1_gej_add_var+0x4d4>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
            secp256k1_gej_double_var(r, a, rzr);
        } else {
            if (rzr != NULL) {
   2370c:	e0bfff17 	ldw	r2,-4(fp)
   23710:	10000326 	beq	r2,zero,23720 <secp256k1_gej_add_var+0x25c>
                secp256k1_fe_set_int(rzr, 0);
   23714:	000b883a 	mov	r5,zero
   23718:	e13fff17 	ldw	r4,-4(fp)
   2371c:	001528c0 	call	1528c <secp256k1_fe_set_int>
            }
            r->infinity = 1;
   23720:	e0bffc17 	ldw	r2,-16(fp)
   23724:	00c00044 	movi	r3,1
   23728:	10c02415 	stw	r3,144(r2)
        }
        return;
   2372c:	00009a06 	br	23998 <secp256k1_gej_add_var+0x4d4>
    }
    secp256k1_fe_sqr(&i2, &i);
   23730:	e0ffc004 	addi	r3,fp,-256
   23734:	e0bfcc04 	addi	r2,fp,-208
   23738:	180b883a 	mov	r5,r3
   2373c:	1009883a 	mov	r4,r2
   23740:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&h2, &h);
   23744:	e0ffb404 	addi	r3,fp,-304
   23748:	e0bfd804 	addi	r2,fp,-160
   2374c:	180b883a 	mov	r5,r3
   23750:	1009883a 	mov	r4,r2
   23754:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&h3, &h, &h2);
   23758:	e13fd804 	addi	r4,fp,-160
   2375c:	e0ffb404 	addi	r3,fp,-304
   23760:	e0bfe404 	addi	r2,fp,-112
   23764:	200d883a 	mov	r6,r4
   23768:	180b883a 	mov	r5,r3
   2376c:	1009883a 	mov	r4,r2
   23770:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&h, &h, &b->z);
   23774:	e0bffe17 	ldw	r2,-8(fp)
   23778:	11001804 	addi	r4,r2,96
   2377c:	e0ffb404 	addi	r3,fp,-304
   23780:	e0bfb404 	addi	r2,fp,-304
   23784:	200d883a 	mov	r6,r4
   23788:	180b883a 	mov	r5,r3
   2378c:	1009883a 	mov	r4,r2
   23790:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    if (rzr != NULL) {
   23794:	e0bfff17 	ldw	r2,-4(fp)
   23798:	10001926 	beq	r2,zero,23800 <secp256k1_gej_add_var+0x33c>
        *rzr = h;
   2379c:	e0bfff17 	ldw	r2,-4(fp)
   237a0:	e0ffb417 	ldw	r3,-304(fp)
   237a4:	10c00015 	stw	r3,0(r2)
   237a8:	e0ffb517 	ldw	r3,-300(fp)
   237ac:	10c00115 	stw	r3,4(r2)
   237b0:	e0ffb617 	ldw	r3,-296(fp)
   237b4:	10c00215 	stw	r3,8(r2)
   237b8:	e0ffb717 	ldw	r3,-292(fp)
   237bc:	10c00315 	stw	r3,12(r2)
   237c0:	e0ffb817 	ldw	r3,-288(fp)
   237c4:	10c00415 	stw	r3,16(r2)
   237c8:	e0ffb917 	ldw	r3,-284(fp)
   237cc:	10c00515 	stw	r3,20(r2)
   237d0:	e0ffba17 	ldw	r3,-280(fp)
   237d4:	10c00615 	stw	r3,24(r2)
   237d8:	e0ffbb17 	ldw	r3,-276(fp)
   237dc:	10c00715 	stw	r3,28(r2)
   237e0:	e0ffbc17 	ldw	r3,-272(fp)
   237e4:	10c00815 	stw	r3,32(r2)
   237e8:	e0ffbd17 	ldw	r3,-268(fp)
   237ec:	10c00915 	stw	r3,36(r2)
   237f0:	e0ffbe17 	ldw	r3,-264(fp)
   237f4:	10c00a15 	stw	r3,40(r2)
   237f8:	e0ffbf17 	ldw	r3,-260(fp)
   237fc:	10c00b15 	stw	r3,44(r2)
    }
    secp256k1_fe_mul(&r->z, &a->z, &h);
   23800:	e0bffc17 	ldw	r2,-16(fp)
   23804:	10c01804 	addi	r3,r2,96
   23808:	e0bffd17 	ldw	r2,-12(fp)
   2380c:	10801804 	addi	r2,r2,96
   23810:	e13fb404 	addi	r4,fp,-304
   23814:	200d883a 	mov	r6,r4
   23818:	100b883a 	mov	r5,r2
   2381c:	1809883a 	mov	r4,r3
   23820:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&t, &u1, &h2);
   23824:	e13fd804 	addi	r4,fp,-160
   23828:	e0ff8404 	addi	r3,fp,-496
   2382c:	e0bff004 	addi	r2,fp,-64
   23830:	200d883a 	mov	r6,r4
   23834:	180b883a 	mov	r5,r3
   23838:	1009883a 	mov	r4,r2
   2383c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);
   23840:	e0bffc17 	ldw	r2,-16(fp)
   23844:	e0fff017 	ldw	r3,-64(fp)
   23848:	10c00015 	stw	r3,0(r2)
   2384c:	e0fff117 	ldw	r3,-60(fp)
   23850:	10c00115 	stw	r3,4(r2)
   23854:	e0fff217 	ldw	r3,-56(fp)
   23858:	10c00215 	stw	r3,8(r2)
   2385c:	e0fff317 	ldw	r3,-52(fp)
   23860:	10c00315 	stw	r3,12(r2)
   23864:	e0fff417 	ldw	r3,-48(fp)
   23868:	10c00415 	stw	r3,16(r2)
   2386c:	e0fff517 	ldw	r3,-44(fp)
   23870:	10c00515 	stw	r3,20(r2)
   23874:	e0fff617 	ldw	r3,-40(fp)
   23878:	10c00615 	stw	r3,24(r2)
   2387c:	e0fff717 	ldw	r3,-36(fp)
   23880:	10c00715 	stw	r3,28(r2)
   23884:	e0fff817 	ldw	r3,-32(fp)
   23888:	10c00815 	stw	r3,32(r2)
   2388c:	e0fff917 	ldw	r3,-28(fp)
   23890:	10c00915 	stw	r3,36(r2)
   23894:	e0fffa17 	ldw	r3,-24(fp)
   23898:	10c00a15 	stw	r3,40(r2)
   2389c:	e0fffb17 	ldw	r3,-20(fp)
   238a0:	10c00b15 	stw	r3,44(r2)
   238a4:	e0bffc17 	ldw	r2,-16(fp)
   238a8:	01400084 	movi	r5,2
   238ac:	1009883a 	mov	r4,r2
   238b0:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
   238b4:	e0bffc17 	ldw	r2,-16(fp)
   238b8:	e0ffe404 	addi	r3,fp,-112
   238bc:	180b883a 	mov	r5,r3
   238c0:	1009883a 	mov	r4,r2
   238c4:	0015ef80 	call	15ef8 <secp256k1_fe_add>
   238c8:	e0bffc17 	ldw	r2,-16(fp)
   238cc:	e0fffc17 	ldw	r3,-16(fp)
   238d0:	018000c4 	movi	r6,3
   238d4:	180b883a 	mov	r5,r3
   238d8:	1009883a 	mov	r4,r2
   238dc:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   238e0:	e0bffc17 	ldw	r2,-16(fp)
   238e4:	e0ffcc04 	addi	r3,fp,-208
   238e8:	180b883a 	mov	r5,r3
   238ec:	1009883a 	mov	r4,r2
   238f0:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);
   238f4:	e0bffc17 	ldw	r2,-16(fp)
   238f8:	10800c04 	addi	r2,r2,48
   238fc:	e0fffc17 	ldw	r3,-16(fp)
   23900:	01800144 	movi	r6,5
   23904:	180b883a 	mov	r5,r3
   23908:	1009883a 	mov	r4,r2
   2390c:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   23910:	e0bffc17 	ldw	r2,-16(fp)
   23914:	10800c04 	addi	r2,r2,48
   23918:	e0fff004 	addi	r3,fp,-64
   2391c:	180b883a 	mov	r5,r3
   23920:	1009883a 	mov	r4,r2
   23924:	0015ef80 	call	15ef8 <secp256k1_fe_add>
   23928:	e0bffc17 	ldw	r2,-16(fp)
   2392c:	10c00c04 	addi	r3,r2,48
   23930:	e0bffc17 	ldw	r2,-16(fp)
   23934:	10800c04 	addi	r2,r2,48
   23938:	e13fc004 	addi	r4,fp,-256
   2393c:	200d883a 	mov	r6,r4
   23940:	100b883a 	mov	r5,r2
   23944:	1809883a 	mov	r4,r3
   23948:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);
   2394c:	e13f9c04 	addi	r4,fp,-400
   23950:	e0ffe404 	addi	r3,fp,-112
   23954:	e0bfe404 	addi	r2,fp,-112
   23958:	200d883a 	mov	r6,r4
   2395c:	180b883a 	mov	r5,r3
   23960:	1009883a 	mov	r4,r2
   23964:	001feb40 	call	1feb4 <secp256k1_fe_mul>
   23968:	e0ffe404 	addi	r3,fp,-112
   2396c:	e0bfe404 	addi	r2,fp,-112
   23970:	01800044 	movi	r6,1
   23974:	180b883a 	mov	r5,r3
   23978:	1009883a 	mov	r4,r2
   2397c:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->y, &h3);
   23980:	e0bffc17 	ldw	r2,-16(fp)
   23984:	10800c04 	addi	r2,r2,48
   23988:	e0ffe404 	addi	r3,fp,-112
   2398c:	180b883a 	mov	r5,r3
   23990:	1009883a 	mov	r4,r2
   23994:	0015ef80 	call	15ef8 <secp256k1_fe_add>
}
   23998:	e037883a 	mov	sp,fp
   2399c:	dfc00117 	ldw	ra,4(sp)
   239a0:	df000017 	ldw	fp,0(sp)
   239a4:	dec00204 	addi	sp,sp,8
   239a8:	f800283a 	ret

000239ac <secp256k1_gej_add_ge_var>:

static void secp256k1_gej_add_ge_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr) {
   239ac:	deff7504 	addi	sp,sp,-556
   239b0:	dfc08a15 	stw	ra,552(sp)
   239b4:	df008915 	stw	fp,548(sp)
   239b8:	df008904 	addi	fp,sp,548
   239bc:	e13ffc15 	stw	r4,-16(fp)
   239c0:	e17ffd15 	stw	r5,-12(fp)
   239c4:	e1bffe15 	stw	r6,-8(fp)
   239c8:	e1ffff15 	stw	r7,-4(fp)
    /* 8 mul, 3 sqr, 4 normalize, 12 mul_int/add/negate */
    secp256k1_fe z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;
    if (a->infinity) {
   239cc:	e0bffd17 	ldw	r2,-12(fp)
   239d0:	10802417 	ldw	r2,144(r2)
   239d4:	10001526 	beq	r2,zero,23a2c <secp256k1_gej_add_ge_var+0x80>
        VERIFY_CHECK(rzr == NULL);
   239d8:	e0bfff17 	ldw	r2,-4(fp)
   239dc:	1004c03a 	cmpne	r2,r2,zero
   239e0:	10803fcc 	andi	r2,r2,255
   239e4:	10000d26 	beq	r2,zero,23a1c <secp256k1_gej_add_ge_var+0x70>
   239e8:	d0a01617 	ldw	r2,-32680(gp)
   239ec:	10c00317 	ldw	r3,12(r2)
   239f0:	00800174 	movhi	r2,5
   239f4:	10961504 	addi	r2,r2,22612
   239f8:	d8800015 	stw	r2,0(sp)
   239fc:	01c05c04 	movi	r7,368
   23a00:	01800174 	movhi	r6,5
   23a04:	3195f504 	addi	r6,r6,22484
   23a08:	01400174 	movhi	r5,5
   23a0c:	2951e804 	addi	r5,r5,18336
   23a10:	1809883a 	mov	r4,r3
   23a14:	00461000 	call	46100 <fprintf>
   23a18:	0045fd40 	call	45fd4 <abort>
        secp256k1_gej_set_ge(r, b);
   23a1c:	e17ffe17 	ldw	r5,-8(fp)
   23a20:	e13ffc17 	ldw	r4,-16(fp)
   23a24:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
        return;
   23a28:	00012306 	br	23eb8 <secp256k1_gej_add_ge_var+0x50c>
    }
    if (b->infinity) {
   23a2c:	e0bffe17 	ldw	r2,-8(fp)
   23a30:	10801817 	ldw	r2,96(r2)
   23a34:	10000e26 	beq	r2,zero,23a70 <secp256k1_gej_add_ge_var+0xc4>
        if (rzr != NULL) {
   23a38:	e0bfff17 	ldw	r2,-4(fp)
   23a3c:	10000326 	beq	r2,zero,23a4c <secp256k1_gej_add_ge_var+0xa0>
            secp256k1_fe_set_int(rzr, 1);
   23a40:	01400044 	movi	r5,1
   23a44:	e13fff17 	ldw	r4,-4(fp)
   23a48:	001528c0 	call	1528c <secp256k1_fe_set_int>
        }
        *r = *a;
   23a4c:	e0fffc17 	ldw	r3,-16(fp)
   23a50:	e0bffd17 	ldw	r2,-12(fp)
   23a54:	1009883a 	mov	r4,r2
   23a58:	00802504 	movi	r2,148
   23a5c:	100d883a 	mov	r6,r2
   23a60:	200b883a 	mov	r5,r4
   23a64:	1809883a 	mov	r4,r3
   23a68:	00463980 	call	46398 <memcpy>
        return;
   23a6c:	00011206 	br	23eb8 <secp256k1_gej_add_ge_var+0x50c>
    }
    r->infinity = 0;
   23a70:	e0bffc17 	ldw	r2,-16(fp)
   23a74:	10002415 	stw	zero,144(r2)

    secp256k1_fe_sqr(&z12, &a->z);
   23a78:	e0bffd17 	ldw	r2,-12(fp)
   23a7c:	10801804 	addi	r2,r2,96
   23a80:	100b883a 	mov	r5,r2
   23a84:	e13f7804 	addi	r4,fp,-544
   23a88:	00200080 	call	20008 <secp256k1_fe_sqr>
    u1 = a->x; secp256k1_fe_normalize_weak(&u1);
   23a8c:	e0bffd17 	ldw	r2,-12(fp)
   23a90:	10c00017 	ldw	r3,0(r2)
   23a94:	e0ff8415 	stw	r3,-496(fp)
   23a98:	10c00117 	ldw	r3,4(r2)
   23a9c:	e0ff8515 	stw	r3,-492(fp)
   23aa0:	10c00217 	ldw	r3,8(r2)
   23aa4:	e0ff8615 	stw	r3,-488(fp)
   23aa8:	10c00317 	ldw	r3,12(r2)
   23aac:	e0ff8715 	stw	r3,-484(fp)
   23ab0:	10c00417 	ldw	r3,16(r2)
   23ab4:	e0ff8815 	stw	r3,-480(fp)
   23ab8:	10c00517 	ldw	r3,20(r2)
   23abc:	e0ff8915 	stw	r3,-476(fp)
   23ac0:	10c00617 	ldw	r3,24(r2)
   23ac4:	e0ff8a15 	stw	r3,-472(fp)
   23ac8:	10c00717 	ldw	r3,28(r2)
   23acc:	e0ff8b15 	stw	r3,-468(fp)
   23ad0:	10c00817 	ldw	r3,32(r2)
   23ad4:	e0ff8c15 	stw	r3,-464(fp)
   23ad8:	10c00917 	ldw	r3,36(r2)
   23adc:	e0ff8d15 	stw	r3,-460(fp)
   23ae0:	10c00a17 	ldw	r3,40(r2)
   23ae4:	e0ff8e15 	stw	r3,-456(fp)
   23ae8:	10800b17 	ldw	r2,44(r2)
   23aec:	e0bf8f15 	stw	r2,-452(fp)
   23af0:	e0bf8404 	addi	r2,fp,-496
   23af4:	1009883a 	mov	r4,r2
   23af8:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&u2, &b->x, &z12);
   23afc:	e0fffe17 	ldw	r3,-8(fp)
   23b00:	e0bf9004 	addi	r2,fp,-448
   23b04:	e1bf7804 	addi	r6,fp,-544
   23b08:	180b883a 	mov	r5,r3
   23b0c:	1009883a 	mov	r4,r2
   23b10:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    s1 = a->y; secp256k1_fe_normalize_weak(&s1);
   23b14:	e0bffd17 	ldw	r2,-12(fp)
   23b18:	10c00c17 	ldw	r3,48(r2)
   23b1c:	e0ff9c15 	stw	r3,-400(fp)
   23b20:	10c00d17 	ldw	r3,52(r2)
   23b24:	e0ff9d15 	stw	r3,-396(fp)
   23b28:	10c00e17 	ldw	r3,56(r2)
   23b2c:	e0ff9e15 	stw	r3,-392(fp)
   23b30:	10c00f17 	ldw	r3,60(r2)
   23b34:	e0ff9f15 	stw	r3,-388(fp)
   23b38:	10c01017 	ldw	r3,64(r2)
   23b3c:	e0ffa015 	stw	r3,-384(fp)
   23b40:	10c01117 	ldw	r3,68(r2)
   23b44:	e0ffa115 	stw	r3,-380(fp)
   23b48:	10c01217 	ldw	r3,72(r2)
   23b4c:	e0ffa215 	stw	r3,-376(fp)
   23b50:	10c01317 	ldw	r3,76(r2)
   23b54:	e0ffa315 	stw	r3,-372(fp)
   23b58:	10c01417 	ldw	r3,80(r2)
   23b5c:	e0ffa415 	stw	r3,-368(fp)
   23b60:	10c01517 	ldw	r3,84(r2)
   23b64:	e0ffa515 	stw	r3,-364(fp)
   23b68:	10c01617 	ldw	r3,88(r2)
   23b6c:	e0ffa615 	stw	r3,-360(fp)
   23b70:	10801717 	ldw	r2,92(r2)
   23b74:	e0bfa715 	stw	r2,-356(fp)
   23b78:	e0bf9c04 	addi	r2,fp,-400
   23b7c:	1009883a 	mov	r4,r2
   23b80:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);
   23b84:	e0bffe17 	ldw	r2,-8(fp)
   23b88:	10c00c04 	addi	r3,r2,48
   23b8c:	e0bfa804 	addi	r2,fp,-352
   23b90:	e1bf7804 	addi	r6,fp,-544
   23b94:	180b883a 	mov	r5,r3
   23b98:	1009883a 	mov	r4,r2
   23b9c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
   23ba0:	e0bffd17 	ldw	r2,-12(fp)
   23ba4:	11001804 	addi	r4,r2,96
   23ba8:	e0ffa804 	addi	r3,fp,-352
   23bac:	e0bfa804 	addi	r2,fp,-352
   23bb0:	200d883a 	mov	r6,r4
   23bb4:	180b883a 	mov	r5,r3
   23bb8:	1009883a 	mov	r4,r2
   23bbc:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);
   23bc0:	e0ff8404 	addi	r3,fp,-496
   23bc4:	e0bfb404 	addi	r2,fp,-304
   23bc8:	01800044 	movi	r6,1
   23bcc:	180b883a 	mov	r5,r3
   23bd0:	1009883a 	mov	r4,r2
   23bd4:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   23bd8:	e0ff9004 	addi	r3,fp,-448
   23bdc:	e0bfb404 	addi	r2,fp,-304
   23be0:	180b883a 	mov	r5,r3
   23be4:	1009883a 	mov	r4,r2
   23be8:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
   23bec:	e0ff9c04 	addi	r3,fp,-400
   23bf0:	e0bfc004 	addi	r2,fp,-256
   23bf4:	01800044 	movi	r6,1
   23bf8:	180b883a 	mov	r5,r3
   23bfc:	1009883a 	mov	r4,r2
   23c00:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   23c04:	e0ffa804 	addi	r3,fp,-352
   23c08:	e0bfc004 	addi	r2,fp,-256
   23c0c:	180b883a 	mov	r5,r3
   23c10:	1009883a 	mov	r4,r2
   23c14:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
   23c18:	e0bfb404 	addi	r2,fp,-304
   23c1c:	1009883a 	mov	r4,r2
   23c20:	0014e640 	call	14e64 <secp256k1_fe_normalizes_to_zero_var>
   23c24:	10001226 	beq	r2,zero,23c70 <secp256k1_gej_add_ge_var+0x2c4>
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
   23c28:	e0bfc004 	addi	r2,fp,-256
   23c2c:	1009883a 	mov	r4,r2
   23c30:	0014e640 	call	14e64 <secp256k1_fe_normalizes_to_zero_var>
   23c34:	10000526 	beq	r2,zero,23c4c <secp256k1_gej_add_ge_var+0x2a0>
            secp256k1_gej_double_var(r, a, rzr);
   23c38:	e1bfff17 	ldw	r6,-4(fp)
   23c3c:	e17ffd17 	ldw	r5,-12(fp)
   23c40:	e13ffc17 	ldw	r4,-16(fp)
   23c44:	00231500 	call	23150 <secp256k1_gej_double_var>
            if (rzr != NULL) {
                secp256k1_fe_set_int(rzr, 0);
            }
            r->infinity = 1;
        }
        return;
   23c48:	00009b06 	br	23eb8 <secp256k1_gej_add_ge_var+0x50c>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
            secp256k1_gej_double_var(r, a, rzr);
        } else {
            if (rzr != NULL) {
   23c4c:	e0bfff17 	ldw	r2,-4(fp)
   23c50:	10000326 	beq	r2,zero,23c60 <secp256k1_gej_add_ge_var+0x2b4>
                secp256k1_fe_set_int(rzr, 0);
   23c54:	000b883a 	mov	r5,zero
   23c58:	e13fff17 	ldw	r4,-4(fp)
   23c5c:	001528c0 	call	1528c <secp256k1_fe_set_int>
            }
            r->infinity = 1;
   23c60:	e0bffc17 	ldw	r2,-16(fp)
   23c64:	00c00044 	movi	r3,1
   23c68:	10c02415 	stw	r3,144(r2)
        }
        return;
   23c6c:	00009206 	br	23eb8 <secp256k1_gej_add_ge_var+0x50c>
    }
    secp256k1_fe_sqr(&i2, &i);
   23c70:	e0ffc004 	addi	r3,fp,-256
   23c74:	e0bfcc04 	addi	r2,fp,-208
   23c78:	180b883a 	mov	r5,r3
   23c7c:	1009883a 	mov	r4,r2
   23c80:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&h2, &h);
   23c84:	e0ffb404 	addi	r3,fp,-304
   23c88:	e0bfd804 	addi	r2,fp,-160
   23c8c:	180b883a 	mov	r5,r3
   23c90:	1009883a 	mov	r4,r2
   23c94:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&h3, &h, &h2);
   23c98:	e13fd804 	addi	r4,fp,-160
   23c9c:	e0ffb404 	addi	r3,fp,-304
   23ca0:	e0bfe404 	addi	r2,fp,-112
   23ca4:	200d883a 	mov	r6,r4
   23ca8:	180b883a 	mov	r5,r3
   23cac:	1009883a 	mov	r4,r2
   23cb0:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    if (rzr != NULL) {
   23cb4:	e0bfff17 	ldw	r2,-4(fp)
   23cb8:	10001926 	beq	r2,zero,23d20 <secp256k1_gej_add_ge_var+0x374>
        *rzr = h;
   23cbc:	e0bfff17 	ldw	r2,-4(fp)
   23cc0:	e0ffb417 	ldw	r3,-304(fp)
   23cc4:	10c00015 	stw	r3,0(r2)
   23cc8:	e0ffb517 	ldw	r3,-300(fp)
   23ccc:	10c00115 	stw	r3,4(r2)
   23cd0:	e0ffb617 	ldw	r3,-296(fp)
   23cd4:	10c00215 	stw	r3,8(r2)
   23cd8:	e0ffb717 	ldw	r3,-292(fp)
   23cdc:	10c00315 	stw	r3,12(r2)
   23ce0:	e0ffb817 	ldw	r3,-288(fp)
   23ce4:	10c00415 	stw	r3,16(r2)
   23ce8:	e0ffb917 	ldw	r3,-284(fp)
   23cec:	10c00515 	stw	r3,20(r2)
   23cf0:	e0ffba17 	ldw	r3,-280(fp)
   23cf4:	10c00615 	stw	r3,24(r2)
   23cf8:	e0ffbb17 	ldw	r3,-276(fp)
   23cfc:	10c00715 	stw	r3,28(r2)
   23d00:	e0ffbc17 	ldw	r3,-272(fp)
   23d04:	10c00815 	stw	r3,32(r2)
   23d08:	e0ffbd17 	ldw	r3,-268(fp)
   23d0c:	10c00915 	stw	r3,36(r2)
   23d10:	e0ffbe17 	ldw	r3,-264(fp)
   23d14:	10c00a15 	stw	r3,40(r2)
   23d18:	e0ffbf17 	ldw	r3,-260(fp)
   23d1c:	10c00b15 	stw	r3,44(r2)
    }
    secp256k1_fe_mul(&r->z, &a->z, &h);
   23d20:	e0bffc17 	ldw	r2,-16(fp)
   23d24:	10c01804 	addi	r3,r2,96
   23d28:	e0bffd17 	ldw	r2,-12(fp)
   23d2c:	10801804 	addi	r2,r2,96
   23d30:	e13fb404 	addi	r4,fp,-304
   23d34:	200d883a 	mov	r6,r4
   23d38:	100b883a 	mov	r5,r2
   23d3c:	1809883a 	mov	r4,r3
   23d40:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&t, &u1, &h2);
   23d44:	e13fd804 	addi	r4,fp,-160
   23d48:	e0ff8404 	addi	r3,fp,-496
   23d4c:	e0bff004 	addi	r2,fp,-64
   23d50:	200d883a 	mov	r6,r4
   23d54:	180b883a 	mov	r5,r3
   23d58:	1009883a 	mov	r4,r2
   23d5c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);
   23d60:	e0bffc17 	ldw	r2,-16(fp)
   23d64:	e0fff017 	ldw	r3,-64(fp)
   23d68:	10c00015 	stw	r3,0(r2)
   23d6c:	e0fff117 	ldw	r3,-60(fp)
   23d70:	10c00115 	stw	r3,4(r2)
   23d74:	e0fff217 	ldw	r3,-56(fp)
   23d78:	10c00215 	stw	r3,8(r2)
   23d7c:	e0fff317 	ldw	r3,-52(fp)
   23d80:	10c00315 	stw	r3,12(r2)
   23d84:	e0fff417 	ldw	r3,-48(fp)
   23d88:	10c00415 	stw	r3,16(r2)
   23d8c:	e0fff517 	ldw	r3,-44(fp)
   23d90:	10c00515 	stw	r3,20(r2)
   23d94:	e0fff617 	ldw	r3,-40(fp)
   23d98:	10c00615 	stw	r3,24(r2)
   23d9c:	e0fff717 	ldw	r3,-36(fp)
   23da0:	10c00715 	stw	r3,28(r2)
   23da4:	e0fff817 	ldw	r3,-32(fp)
   23da8:	10c00815 	stw	r3,32(r2)
   23dac:	e0fff917 	ldw	r3,-28(fp)
   23db0:	10c00915 	stw	r3,36(r2)
   23db4:	e0fffa17 	ldw	r3,-24(fp)
   23db8:	10c00a15 	stw	r3,40(r2)
   23dbc:	e0fffb17 	ldw	r3,-20(fp)
   23dc0:	10c00b15 	stw	r3,44(r2)
   23dc4:	e0bffc17 	ldw	r2,-16(fp)
   23dc8:	01400084 	movi	r5,2
   23dcc:	1009883a 	mov	r4,r2
   23dd0:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
   23dd4:	e0bffc17 	ldw	r2,-16(fp)
   23dd8:	e0ffe404 	addi	r3,fp,-112
   23ddc:	180b883a 	mov	r5,r3
   23de0:	1009883a 	mov	r4,r2
   23de4:	0015ef80 	call	15ef8 <secp256k1_fe_add>
   23de8:	e0bffc17 	ldw	r2,-16(fp)
   23dec:	e0fffc17 	ldw	r3,-16(fp)
   23df0:	018000c4 	movi	r6,3
   23df4:	180b883a 	mov	r5,r3
   23df8:	1009883a 	mov	r4,r2
   23dfc:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   23e00:	e0bffc17 	ldw	r2,-16(fp)
   23e04:	e0ffcc04 	addi	r3,fp,-208
   23e08:	180b883a 	mov	r5,r3
   23e0c:	1009883a 	mov	r4,r2
   23e10:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);
   23e14:	e0bffc17 	ldw	r2,-16(fp)
   23e18:	10800c04 	addi	r2,r2,48
   23e1c:	e0fffc17 	ldw	r3,-16(fp)
   23e20:	01800144 	movi	r6,5
   23e24:	180b883a 	mov	r5,r3
   23e28:	1009883a 	mov	r4,r2
   23e2c:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   23e30:	e0bffc17 	ldw	r2,-16(fp)
   23e34:	10800c04 	addi	r2,r2,48
   23e38:	e0fff004 	addi	r3,fp,-64
   23e3c:	180b883a 	mov	r5,r3
   23e40:	1009883a 	mov	r4,r2
   23e44:	0015ef80 	call	15ef8 <secp256k1_fe_add>
   23e48:	e0bffc17 	ldw	r2,-16(fp)
   23e4c:	10c00c04 	addi	r3,r2,48
   23e50:	e0bffc17 	ldw	r2,-16(fp)
   23e54:	10800c04 	addi	r2,r2,48
   23e58:	e13fc004 	addi	r4,fp,-256
   23e5c:	200d883a 	mov	r6,r4
   23e60:	100b883a 	mov	r5,r2
   23e64:	1809883a 	mov	r4,r3
   23e68:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);
   23e6c:	e13f9c04 	addi	r4,fp,-400
   23e70:	e0ffe404 	addi	r3,fp,-112
   23e74:	e0bfe404 	addi	r2,fp,-112
   23e78:	200d883a 	mov	r6,r4
   23e7c:	180b883a 	mov	r5,r3
   23e80:	1009883a 	mov	r4,r2
   23e84:	001feb40 	call	1feb4 <secp256k1_fe_mul>
   23e88:	e0ffe404 	addi	r3,fp,-112
   23e8c:	e0bfe404 	addi	r2,fp,-112
   23e90:	01800044 	movi	r6,1
   23e94:	180b883a 	mov	r5,r3
   23e98:	1009883a 	mov	r4,r2
   23e9c:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->y, &h3);
   23ea0:	e0bffc17 	ldw	r2,-16(fp)
   23ea4:	10800c04 	addi	r2,r2,48
   23ea8:	e0ffe404 	addi	r3,fp,-112
   23eac:	180b883a 	mov	r5,r3
   23eb0:	1009883a 	mov	r4,r2
   23eb4:	0015ef80 	call	15ef8 <secp256k1_fe_add>
}
   23eb8:	e037883a 	mov	sp,fp
   23ebc:	dfc00117 	ldw	ra,4(sp)
   23ec0:	df000017 	ldw	fp,0(sp)
   23ec4:	dec00204 	addi	sp,sp,8
   23ec8:	f800283a 	ret

00023ecc <secp256k1_gej_add_zinv_var>:

static void secp256k1_gej_add_zinv_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv) {
   23ecc:	deff5204 	addi	sp,sp,-696
   23ed0:	dfc0ad15 	stw	ra,692(sp)
   23ed4:	df00ac15 	stw	fp,688(sp)
   23ed8:	df00ac04 	addi	fp,sp,688
   23edc:	e13ffc15 	stw	r4,-16(fp)
   23ee0:	e17ffd15 	stw	r5,-12(fp)
   23ee4:	e1bffe15 	stw	r6,-8(fp)
   23ee8:	e1ffff15 	stw	r7,-4(fp)
    /* 9 mul, 3 sqr, 4 normalize, 12 mul_int/add/negate */
    secp256k1_fe az, z12, u1, u2, s1, s2, h, i, i2, h2, h3, t;

    if (b->infinity) {
   23eec:	e0bffe17 	ldw	r2,-8(fp)
   23ef0:	10801817 	ldw	r2,96(r2)
   23ef4:	10000926 	beq	r2,zero,23f1c <secp256k1_gej_add_zinv_var+0x50>
        *r = *a;
   23ef8:	e0fffc17 	ldw	r3,-16(fp)
   23efc:	e0bffd17 	ldw	r2,-12(fp)
   23f00:	1009883a 	mov	r4,r2
   23f04:	00802504 	movi	r2,148
   23f08:	100d883a 	mov	r6,r2
   23f0c:	200b883a 	mov	r5,r4
   23f10:	1809883a 	mov	r4,r3
   23f14:	00463980 	call	46398 <memcpy>
        return;
   23f18:	00013906 	br	24400 <secp256k1_gej_add_zinv_var+0x534>
    }
    if (a->infinity) {
   23f1c:	e0bffd17 	ldw	r2,-12(fp)
   23f20:	10802417 	ldw	r2,144(r2)
   23f24:	10002526 	beq	r2,zero,23fbc <secp256k1_gej_add_zinv_var+0xf0>
        secp256k1_fe bzinv2, bzinv3;
        r->infinity = b->infinity;
   23f28:	e0bffe17 	ldw	r2,-8(fp)
   23f2c:	10c01817 	ldw	r3,96(r2)
   23f30:	e0bffc17 	ldw	r2,-16(fp)
   23f34:	10c02415 	stw	r3,144(r2)
        secp256k1_fe_sqr(&bzinv2, bzinv);
   23f38:	e0bff004 	addi	r2,fp,-64
   23f3c:	e17fff17 	ldw	r5,-4(fp)
   23f40:	1009883a 	mov	r4,r2
   23f44:	00200080 	call	20008 <secp256k1_fe_sqr>
        secp256k1_fe_mul(&bzinv3, &bzinv2, bzinv);
   23f48:	e0fff004 	addi	r3,fp,-64
   23f4c:	e0bfe404 	addi	r2,fp,-112
   23f50:	e1bfff17 	ldw	r6,-4(fp)
   23f54:	180b883a 	mov	r5,r3
   23f58:	1009883a 	mov	r4,r2
   23f5c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
        secp256k1_fe_mul(&r->x, &b->x, &bzinv2);
   23f60:	e0bffc17 	ldw	r2,-16(fp)
   23f64:	e0fffe17 	ldw	r3,-8(fp)
   23f68:	e13ff004 	addi	r4,fp,-64
   23f6c:	200d883a 	mov	r6,r4
   23f70:	180b883a 	mov	r5,r3
   23f74:	1009883a 	mov	r4,r2
   23f78:	001feb40 	call	1feb4 <secp256k1_fe_mul>
        secp256k1_fe_mul(&r->y, &b->y, &bzinv3);
   23f7c:	e0bffc17 	ldw	r2,-16(fp)
   23f80:	10c00c04 	addi	r3,r2,48
   23f84:	e0bffe17 	ldw	r2,-8(fp)
   23f88:	10800c04 	addi	r2,r2,48
   23f8c:	e13fe404 	addi	r4,fp,-112
   23f90:	200d883a 	mov	r6,r4
   23f94:	100b883a 	mov	r5,r2
   23f98:	1809883a 	mov	r4,r3
   23f9c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
        secp256k1_fe_set_int(&r->z, 1);
   23fa0:	e0bffc17 	ldw	r2,-16(fp)
   23fa4:	10801804 	addi	r2,r2,96
   23fa8:	01400044 	movi	r5,1
   23fac:	1009883a 	mov	r4,r2
   23fb0:	001528c0 	call	1528c <secp256k1_fe_set_int>
        return;
   23fb4:	0001883a 	nop
   23fb8:	00011106 	br	24400 <secp256k1_gej_add_zinv_var+0x534>
    }
    r->infinity = 0;
   23fbc:	e0bffc17 	ldw	r2,-16(fp)
   23fc0:	10002415 	stw	zero,144(r2)
     *  This means that (rx,ry,rz) can be calculated as
     *  (ax,ay,az*bzinv) + (bx,by,1), when not applying the bzinv factor to rz.
     *  The variable az below holds the modified Z coordinate for a, which is used
     *  for the computation of rx and ry, but not for rz.
     */
    secp256k1_fe_mul(&az, &a->z, bzinv);
   23fc4:	e0bffd17 	ldw	r2,-12(fp)
   23fc8:	10801804 	addi	r2,r2,96
   23fcc:	e1bfff17 	ldw	r6,-4(fp)
   23fd0:	100b883a 	mov	r5,r2
   23fd4:	e13f5404 	addi	r4,fp,-688
   23fd8:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    secp256k1_fe_sqr(&z12, &az);
   23fdc:	e0bf6004 	addi	r2,fp,-640
   23fe0:	e17f5404 	addi	r5,fp,-688
   23fe4:	1009883a 	mov	r4,r2
   23fe8:	00200080 	call	20008 <secp256k1_fe_sqr>
    u1 = a->x; secp256k1_fe_normalize_weak(&u1);
   23fec:	e0bffd17 	ldw	r2,-12(fp)
   23ff0:	10c00017 	ldw	r3,0(r2)
   23ff4:	e0ff6c15 	stw	r3,-592(fp)
   23ff8:	10c00117 	ldw	r3,4(r2)
   23ffc:	e0ff6d15 	stw	r3,-588(fp)
   24000:	10c00217 	ldw	r3,8(r2)
   24004:	e0ff6e15 	stw	r3,-584(fp)
   24008:	10c00317 	ldw	r3,12(r2)
   2400c:	e0ff6f15 	stw	r3,-580(fp)
   24010:	10c00417 	ldw	r3,16(r2)
   24014:	e0ff7015 	stw	r3,-576(fp)
   24018:	10c00517 	ldw	r3,20(r2)
   2401c:	e0ff7115 	stw	r3,-572(fp)
   24020:	10c00617 	ldw	r3,24(r2)
   24024:	e0ff7215 	stw	r3,-568(fp)
   24028:	10c00717 	ldw	r3,28(r2)
   2402c:	e0ff7315 	stw	r3,-564(fp)
   24030:	10c00817 	ldw	r3,32(r2)
   24034:	e0ff7415 	stw	r3,-560(fp)
   24038:	10c00917 	ldw	r3,36(r2)
   2403c:	e0ff7515 	stw	r3,-556(fp)
   24040:	10c00a17 	ldw	r3,40(r2)
   24044:	e0ff7615 	stw	r3,-552(fp)
   24048:	10800b17 	ldw	r2,44(r2)
   2404c:	e0bf7715 	stw	r2,-548(fp)
   24050:	e0bf6c04 	addi	r2,fp,-592
   24054:	1009883a 	mov	r4,r2
   24058:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&u2, &b->x, &z12);
   2405c:	e0fffe17 	ldw	r3,-8(fp)
   24060:	e13f6004 	addi	r4,fp,-640
   24064:	e0bf7804 	addi	r2,fp,-544
   24068:	200d883a 	mov	r6,r4
   2406c:	180b883a 	mov	r5,r3
   24070:	1009883a 	mov	r4,r2
   24074:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    s1 = a->y; secp256k1_fe_normalize_weak(&s1);
   24078:	e0bffd17 	ldw	r2,-12(fp)
   2407c:	10c00c17 	ldw	r3,48(r2)
   24080:	e0ff8415 	stw	r3,-496(fp)
   24084:	10c00d17 	ldw	r3,52(r2)
   24088:	e0ff8515 	stw	r3,-492(fp)
   2408c:	10c00e17 	ldw	r3,56(r2)
   24090:	e0ff8615 	stw	r3,-488(fp)
   24094:	10c00f17 	ldw	r3,60(r2)
   24098:	e0ff8715 	stw	r3,-484(fp)
   2409c:	10c01017 	ldw	r3,64(r2)
   240a0:	e0ff8815 	stw	r3,-480(fp)
   240a4:	10c01117 	ldw	r3,68(r2)
   240a8:	e0ff8915 	stw	r3,-476(fp)
   240ac:	10c01217 	ldw	r3,72(r2)
   240b0:	e0ff8a15 	stw	r3,-472(fp)
   240b4:	10c01317 	ldw	r3,76(r2)
   240b8:	e0ff8b15 	stw	r3,-468(fp)
   240bc:	10c01417 	ldw	r3,80(r2)
   240c0:	e0ff8c15 	stw	r3,-464(fp)
   240c4:	10c01517 	ldw	r3,84(r2)
   240c8:	e0ff8d15 	stw	r3,-460(fp)
   240cc:	10c01617 	ldw	r3,88(r2)
   240d0:	e0ff8e15 	stw	r3,-456(fp)
   240d4:	10801717 	ldw	r2,92(r2)
   240d8:	e0bf8f15 	stw	r2,-452(fp)
   240dc:	e0bf8404 	addi	r2,fp,-496
   240e0:	1009883a 	mov	r4,r2
   240e4:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &az);
   240e8:	e0bffe17 	ldw	r2,-8(fp)
   240ec:	10c00c04 	addi	r3,r2,48
   240f0:	e13f6004 	addi	r4,fp,-640
   240f4:	e0bf9004 	addi	r2,fp,-448
   240f8:	200d883a 	mov	r6,r4
   240fc:	180b883a 	mov	r5,r3
   24100:	1009883a 	mov	r4,r2
   24104:	001feb40 	call	1feb4 <secp256k1_fe_mul>
   24108:	e0ff9004 	addi	r3,fp,-448
   2410c:	e0bf9004 	addi	r2,fp,-448
   24110:	e1bf5404 	addi	r6,fp,-688
   24114:	180b883a 	mov	r5,r3
   24118:	1009883a 	mov	r4,r2
   2411c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);
   24120:	e0ff6c04 	addi	r3,fp,-592
   24124:	e0bf9c04 	addi	r2,fp,-400
   24128:	01800044 	movi	r6,1
   2412c:	180b883a 	mov	r5,r3
   24130:	1009883a 	mov	r4,r2
   24134:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   24138:	e0ff7804 	addi	r3,fp,-544
   2413c:	e0bf9c04 	addi	r2,fp,-400
   24140:	180b883a 	mov	r5,r3
   24144:	1009883a 	mov	r4,r2
   24148:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
   2414c:	e0ff8404 	addi	r3,fp,-496
   24150:	e0bfa804 	addi	r2,fp,-352
   24154:	01800044 	movi	r6,1
   24158:	180b883a 	mov	r5,r3
   2415c:	1009883a 	mov	r4,r2
   24160:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   24164:	e0ff9004 	addi	r3,fp,-448
   24168:	e0bfa804 	addi	r2,fp,-352
   2416c:	180b883a 	mov	r5,r3
   24170:	1009883a 	mov	r4,r2
   24174:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
   24178:	e0bf9c04 	addi	r2,fp,-400
   2417c:	1009883a 	mov	r4,r2
   24180:	0014e640 	call	14e64 <secp256k1_fe_normalizes_to_zero_var>
   24184:	10000d26 	beq	r2,zero,241bc <secp256k1_gej_add_zinv_var+0x2f0>
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
   24188:	e0bfa804 	addi	r2,fp,-352
   2418c:	1009883a 	mov	r4,r2
   24190:	0014e640 	call	14e64 <secp256k1_fe_normalizes_to_zero_var>
   24194:	10000526 	beq	r2,zero,241ac <secp256k1_gej_add_zinv_var+0x2e0>
            secp256k1_gej_double_var(r, a, NULL);
   24198:	000d883a 	mov	r6,zero
   2419c:	e17ffd17 	ldw	r5,-12(fp)
   241a0:	e13ffc17 	ldw	r4,-16(fp)
   241a4:	00231500 	call	23150 <secp256k1_gej_double_var>
        } else {
            r->infinity = 1;
        }
        return;
   241a8:	00009506 	br	24400 <secp256k1_gej_add_zinv_var+0x534>
    secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);
    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
            secp256k1_gej_double_var(r, a, NULL);
        } else {
            r->infinity = 1;
   241ac:	e0bffc17 	ldw	r2,-16(fp)
   241b0:	00c00044 	movi	r3,1
   241b4:	10c02415 	stw	r3,144(r2)
        }
        return;
   241b8:	00009106 	br	24400 <secp256k1_gej_add_zinv_var+0x534>
    }
    secp256k1_fe_sqr(&i2, &i);
   241bc:	e0ffa804 	addi	r3,fp,-352
   241c0:	e0bfb404 	addi	r2,fp,-304
   241c4:	180b883a 	mov	r5,r3
   241c8:	1009883a 	mov	r4,r2
   241cc:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_sqr(&h2, &h);
   241d0:	e0ff9c04 	addi	r3,fp,-400
   241d4:	e0bfc004 	addi	r2,fp,-256
   241d8:	180b883a 	mov	r5,r3
   241dc:	1009883a 	mov	r4,r2
   241e0:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&h3, &h, &h2);
   241e4:	e13fc004 	addi	r4,fp,-256
   241e8:	e0ff9c04 	addi	r3,fp,-400
   241ec:	e0bfcc04 	addi	r2,fp,-208
   241f0:	200d883a 	mov	r6,r4
   241f4:	180b883a 	mov	r5,r3
   241f8:	1009883a 	mov	r4,r2
   241fc:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    r->z = a->z; secp256k1_fe_mul(&r->z, &r->z, &h);
   24200:	e0bffc17 	ldw	r2,-16(fp)
   24204:	e0fffd17 	ldw	r3,-12(fp)
   24208:	19001817 	ldw	r4,96(r3)
   2420c:	11001815 	stw	r4,96(r2)
   24210:	19001917 	ldw	r4,100(r3)
   24214:	11001915 	stw	r4,100(r2)
   24218:	19001a17 	ldw	r4,104(r3)
   2421c:	11001a15 	stw	r4,104(r2)
   24220:	19001b17 	ldw	r4,108(r3)
   24224:	11001b15 	stw	r4,108(r2)
   24228:	19001c17 	ldw	r4,112(r3)
   2422c:	11001c15 	stw	r4,112(r2)
   24230:	19001d17 	ldw	r4,116(r3)
   24234:	11001d15 	stw	r4,116(r2)
   24238:	19001e17 	ldw	r4,120(r3)
   2423c:	11001e15 	stw	r4,120(r2)
   24240:	19001f17 	ldw	r4,124(r3)
   24244:	11001f15 	stw	r4,124(r2)
   24248:	19002017 	ldw	r4,128(r3)
   2424c:	11002015 	stw	r4,128(r2)
   24250:	19002117 	ldw	r4,132(r3)
   24254:	11002115 	stw	r4,132(r2)
   24258:	19002217 	ldw	r4,136(r3)
   2425c:	11002215 	stw	r4,136(r2)
   24260:	18c02317 	ldw	r3,140(r3)
   24264:	10c02315 	stw	r3,140(r2)
   24268:	e0bffc17 	ldw	r2,-16(fp)
   2426c:	10c01804 	addi	r3,r2,96
   24270:	e0bffc17 	ldw	r2,-16(fp)
   24274:	10801804 	addi	r2,r2,96
   24278:	e13f9c04 	addi	r4,fp,-400
   2427c:	200d883a 	mov	r6,r4
   24280:	100b883a 	mov	r5,r2
   24284:	1809883a 	mov	r4,r3
   24288:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&t, &u1, &h2);
   2428c:	e13fc004 	addi	r4,fp,-256
   24290:	e0ff6c04 	addi	r3,fp,-592
   24294:	e0bfd804 	addi	r2,fp,-160
   24298:	200d883a 	mov	r6,r4
   2429c:	180b883a 	mov	r5,r3
   242a0:	1009883a 	mov	r4,r2
   242a4:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    r->x = t; secp256k1_fe_mul_int(&r->x, 2); secp256k1_fe_add(&r->x, &h3); secp256k1_fe_negate(&r->x, &r->x, 3); secp256k1_fe_add(&r->x, &i2);
   242a8:	e0bffc17 	ldw	r2,-16(fp)
   242ac:	e0ffd817 	ldw	r3,-160(fp)
   242b0:	10c00015 	stw	r3,0(r2)
   242b4:	e0ffd917 	ldw	r3,-156(fp)
   242b8:	10c00115 	stw	r3,4(r2)
   242bc:	e0ffda17 	ldw	r3,-152(fp)
   242c0:	10c00215 	stw	r3,8(r2)
   242c4:	e0ffdb17 	ldw	r3,-148(fp)
   242c8:	10c00315 	stw	r3,12(r2)
   242cc:	e0ffdc17 	ldw	r3,-144(fp)
   242d0:	10c00415 	stw	r3,16(r2)
   242d4:	e0ffdd17 	ldw	r3,-140(fp)
   242d8:	10c00515 	stw	r3,20(r2)
   242dc:	e0ffde17 	ldw	r3,-136(fp)
   242e0:	10c00615 	stw	r3,24(r2)
   242e4:	e0ffdf17 	ldw	r3,-132(fp)
   242e8:	10c00715 	stw	r3,28(r2)
   242ec:	e0ffe017 	ldw	r3,-128(fp)
   242f0:	10c00815 	stw	r3,32(r2)
   242f4:	e0ffe117 	ldw	r3,-124(fp)
   242f8:	10c00915 	stw	r3,36(r2)
   242fc:	e0ffe217 	ldw	r3,-120(fp)
   24300:	10c00a15 	stw	r3,40(r2)
   24304:	e0ffe317 	ldw	r3,-116(fp)
   24308:	10c00b15 	stw	r3,44(r2)
   2430c:	e0bffc17 	ldw	r2,-16(fp)
   24310:	01400084 	movi	r5,2
   24314:	1009883a 	mov	r4,r2
   24318:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
   2431c:	e0bffc17 	ldw	r2,-16(fp)
   24320:	e0ffcc04 	addi	r3,fp,-208
   24324:	180b883a 	mov	r5,r3
   24328:	1009883a 	mov	r4,r2
   2432c:	0015ef80 	call	15ef8 <secp256k1_fe_add>
   24330:	e0bffc17 	ldw	r2,-16(fp)
   24334:	e0fffc17 	ldw	r3,-16(fp)
   24338:	018000c4 	movi	r6,3
   2433c:	180b883a 	mov	r5,r3
   24340:	1009883a 	mov	r4,r2
   24344:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   24348:	e0bffc17 	ldw	r2,-16(fp)
   2434c:	e0ffb404 	addi	r3,fp,-304
   24350:	180b883a 	mov	r5,r3
   24354:	1009883a 	mov	r4,r2
   24358:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_negate(&r->y, &r->x, 5); secp256k1_fe_add(&r->y, &t); secp256k1_fe_mul(&r->y, &r->y, &i);
   2435c:	e0bffc17 	ldw	r2,-16(fp)
   24360:	10800c04 	addi	r2,r2,48
   24364:	e0fffc17 	ldw	r3,-16(fp)
   24368:	01800144 	movi	r6,5
   2436c:	180b883a 	mov	r5,r3
   24370:	1009883a 	mov	r4,r2
   24374:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   24378:	e0bffc17 	ldw	r2,-16(fp)
   2437c:	10800c04 	addi	r2,r2,48
   24380:	e0ffd804 	addi	r3,fp,-160
   24384:	180b883a 	mov	r5,r3
   24388:	1009883a 	mov	r4,r2
   2438c:	0015ef80 	call	15ef8 <secp256k1_fe_add>
   24390:	e0bffc17 	ldw	r2,-16(fp)
   24394:	10c00c04 	addi	r3,r2,48
   24398:	e0bffc17 	ldw	r2,-16(fp)
   2439c:	10800c04 	addi	r2,r2,48
   243a0:	e13fa804 	addi	r4,fp,-352
   243a4:	200d883a 	mov	r6,r4
   243a8:	100b883a 	mov	r5,r2
   243ac:	1809883a 	mov	r4,r3
   243b0:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&h3, &h3, &s1); secp256k1_fe_negate(&h3, &h3, 1);
   243b4:	e13f8404 	addi	r4,fp,-496
   243b8:	e0ffcc04 	addi	r3,fp,-208
   243bc:	e0bfcc04 	addi	r2,fp,-208
   243c0:	200d883a 	mov	r6,r4
   243c4:	180b883a 	mov	r5,r3
   243c8:	1009883a 	mov	r4,r2
   243cc:	001feb40 	call	1feb4 <secp256k1_fe_mul>
   243d0:	e0ffcc04 	addi	r3,fp,-208
   243d4:	e0bfcc04 	addi	r2,fp,-208
   243d8:	01800044 	movi	r6,1
   243dc:	180b883a 	mov	r5,r3
   243e0:	1009883a 	mov	r4,r2
   243e4:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_add(&r->y, &h3);
   243e8:	e0bffc17 	ldw	r2,-16(fp)
   243ec:	10800c04 	addi	r2,r2,48
   243f0:	e0ffcc04 	addi	r3,fp,-208
   243f4:	180b883a 	mov	r5,r3
   243f8:	1009883a 	mov	r4,r2
   243fc:	0015ef80 	call	15ef8 <secp256k1_fe_add>
}
   24400:	e037883a 	mov	sp,fp
   24404:	dfc00117 	ldw	ra,4(sp)
   24408:	df000017 	ldw	fp,0(sp)
   2440c:	dec00204 	addi	sp,sp,8
   24410:	f800283a 	ret

00024414 <secp256k1_gej_add_ge>:


static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b) {
   24414:	deff5b04 	addi	sp,sp,-660
   24418:	dfc0a415 	stw	ra,656(sp)
   2441c:	df00a315 	stw	fp,652(sp)
   24420:	dc00a215 	stw	r16,648(sp)
   24424:	df00a304 	addi	fp,sp,652
   24428:	e13ffc15 	stw	r4,-16(fp)
   2442c:	e17ffd15 	stw	r5,-12(fp)
   24430:	e1bffe15 	stw	r6,-8(fp)
    /* Operations: 7 mul, 5 sqr, 4 normalize, 21 mul_int/add/negate/cmov */
    static const secp256k1_fe fe_1 = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);
    secp256k1_fe zz, u1, u2, s1, s2, t, tt, m, n, q, rr;
    secp256k1_fe m_alt, rr_alt;
    int infinity, degenerate;
    VERIFY_CHECK(!b->infinity);
   24434:	e0bffe17 	ldw	r2,-8(fp)
   24438:	10801817 	ldw	r2,96(r2)
   2443c:	1004c03a 	cmpne	r2,r2,zero
   24440:	10803fcc 	andi	r2,r2,255
   24444:	10000d26 	beq	r2,zero,2447c <secp256k1_gej_add_ge+0x68>
   24448:	d0a01617 	ldw	r2,-32680(gp)
   2444c:	10c00317 	ldw	r3,12(r2)
   24450:	00800174 	movhi	r2,5
   24454:	10961e04 	addi	r2,r2,22648
   24458:	d8800015 	stw	r2,0(sp)
   2445c:	01c07704 	movi	r7,476
   24460:	01800174 	movhi	r6,5
   24464:	3195f504 	addi	r6,r6,22484
   24468:	01400174 	movhi	r5,5
   2446c:	2951e804 	addi	r5,r5,18336
   24470:	1809883a 	mov	r4,r3
   24474:	00461000 	call	46100 <fprintf>
   24478:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(a->infinity == 0 || a->infinity == 1);
   2447c:	e0bffd17 	ldw	r2,-12(fp)
   24480:	10802417 	ldw	r2,144(r2)
   24484:	1004c03a 	cmpne	r2,r2,zero
   24488:	10803fcc 	andi	r2,r2,255
   2448c:	10001226 	beq	r2,zero,244d8 <secp256k1_gej_add_ge+0xc4>
   24490:	e0bffd17 	ldw	r2,-12(fp)
   24494:	10802417 	ldw	r2,144(r2)
   24498:	10800058 	cmpnei	r2,r2,1
   2449c:	10803fcc 	andi	r2,r2,255
   244a0:	10000d26 	beq	r2,zero,244d8 <secp256k1_gej_add_ge+0xc4>
   244a4:	d0a01617 	ldw	r2,-32680(gp)
   244a8:	10c00317 	ldw	r3,12(r2)
   244ac:	00800174 	movhi	r2,5
   244b0:	10962704 	addi	r2,r2,22684
   244b4:	d8800015 	stw	r2,0(sp)
   244b8:	01c07744 	movi	r7,477
   244bc:	01800174 	movhi	r6,5
   244c0:	3195f504 	addi	r6,r6,22484
   244c4:	01400174 	movhi	r5,5
   244c8:	2951e804 	addi	r5,r5,18336
   244cc:	1809883a 	mov	r4,r3
   244d0:	00461000 	call	46100 <fprintf>
   244d4:	0045fd40 	call	45fd4 <abort>
     *      then substitution of x^3 + 7 for y^2 (using the curve equation).
     *      For all pairs of nonzero points (a, b) at least one is defined,
     *      so this covers everything.
     */

    secp256k1_fe_sqr(&zz, &a->z);                       /* z = Z1^2 */
   244d8:	e0bffd17 	ldw	r2,-12(fp)
   244dc:	10c01804 	addi	r3,r2,96
   244e0:	e0bf6004 	addi	r2,fp,-640
   244e4:	180b883a 	mov	r5,r3
   244e8:	1009883a 	mov	r4,r2
   244ec:	00200080 	call	20008 <secp256k1_fe_sqr>
    u1 = a->x; secp256k1_fe_normalize_weak(&u1);        /* u1 = U1 = X1*Z2^2 (1) */
   244f0:	e0bffd17 	ldw	r2,-12(fp)
   244f4:	10c00017 	ldw	r3,0(r2)
   244f8:	e0ff6c15 	stw	r3,-592(fp)
   244fc:	10c00117 	ldw	r3,4(r2)
   24500:	e0ff6d15 	stw	r3,-588(fp)
   24504:	10c00217 	ldw	r3,8(r2)
   24508:	e0ff6e15 	stw	r3,-584(fp)
   2450c:	10c00317 	ldw	r3,12(r2)
   24510:	e0ff6f15 	stw	r3,-580(fp)
   24514:	10c00417 	ldw	r3,16(r2)
   24518:	e0ff7015 	stw	r3,-576(fp)
   2451c:	10c00517 	ldw	r3,20(r2)
   24520:	e0ff7115 	stw	r3,-572(fp)
   24524:	10c00617 	ldw	r3,24(r2)
   24528:	e0ff7215 	stw	r3,-568(fp)
   2452c:	10c00717 	ldw	r3,28(r2)
   24530:	e0ff7315 	stw	r3,-564(fp)
   24534:	10c00817 	ldw	r3,32(r2)
   24538:	e0ff7415 	stw	r3,-560(fp)
   2453c:	10c00917 	ldw	r3,36(r2)
   24540:	e0ff7515 	stw	r3,-556(fp)
   24544:	10c00a17 	ldw	r3,40(r2)
   24548:	e0ff7615 	stw	r3,-552(fp)
   2454c:	10800b17 	ldw	r2,44(r2)
   24550:	e0bf7715 	stw	r2,-548(fp)
   24554:	e0bf6c04 	addi	r2,fp,-592
   24558:	1009883a 	mov	r4,r2
   2455c:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&u2, &b->x, &zz);                  /* u2 = U2 = X2*Z1^2 (1) */
   24560:	e0fffe17 	ldw	r3,-8(fp)
   24564:	e13f6004 	addi	r4,fp,-640
   24568:	e0bf7804 	addi	r2,fp,-544
   2456c:	200d883a 	mov	r6,r4
   24570:	180b883a 	mov	r5,r3
   24574:	1009883a 	mov	r4,r2
   24578:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    s1 = a->y; secp256k1_fe_normalize_weak(&s1);        /* s1 = S1 = Y1*Z2^3 (1) */
   2457c:	e0bffd17 	ldw	r2,-12(fp)
   24580:	10c00c17 	ldw	r3,48(r2)
   24584:	e0ff8415 	stw	r3,-496(fp)
   24588:	10c00d17 	ldw	r3,52(r2)
   2458c:	e0ff8515 	stw	r3,-492(fp)
   24590:	10c00e17 	ldw	r3,56(r2)
   24594:	e0ff8615 	stw	r3,-488(fp)
   24598:	10c00f17 	ldw	r3,60(r2)
   2459c:	e0ff8715 	stw	r3,-484(fp)
   245a0:	10c01017 	ldw	r3,64(r2)
   245a4:	e0ff8815 	stw	r3,-480(fp)
   245a8:	10c01117 	ldw	r3,68(r2)
   245ac:	e0ff8915 	stw	r3,-476(fp)
   245b0:	10c01217 	ldw	r3,72(r2)
   245b4:	e0ff8a15 	stw	r3,-472(fp)
   245b8:	10c01317 	ldw	r3,76(r2)
   245bc:	e0ff8b15 	stw	r3,-468(fp)
   245c0:	10c01417 	ldw	r3,80(r2)
   245c4:	e0ff8c15 	stw	r3,-464(fp)
   245c8:	10c01517 	ldw	r3,84(r2)
   245cc:	e0ff8d15 	stw	r3,-460(fp)
   245d0:	10c01617 	ldw	r3,88(r2)
   245d4:	e0ff8e15 	stw	r3,-456(fp)
   245d8:	10801717 	ldw	r2,92(r2)
   245dc:	e0bf8f15 	stw	r2,-452(fp)
   245e0:	e0bf8404 	addi	r2,fp,-496
   245e4:	1009883a 	mov	r4,r2
   245e8:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul(&s2, &b->y, &zz);                  /* s2 = Y2*Z1^2 (1) */
   245ec:	e0bffe17 	ldw	r2,-8(fp)
   245f0:	10c00c04 	addi	r3,r2,48
   245f4:	e13f6004 	addi	r4,fp,-640
   245f8:	e0bf9004 	addi	r2,fp,-448
   245fc:	200d883a 	mov	r6,r4
   24600:	180b883a 	mov	r5,r3
   24604:	1009883a 	mov	r4,r2
   24608:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&s2, &s2, &a->z);                  /* s2 = S2 = Y2*Z1^3 (1) */
   2460c:	e0bffd17 	ldw	r2,-12(fp)
   24610:	11001804 	addi	r4,r2,96
   24614:	e0ff9004 	addi	r3,fp,-448
   24618:	e0bf9004 	addi	r2,fp,-448
   2461c:	200d883a 	mov	r6,r4
   24620:	180b883a 	mov	r5,r3
   24624:	1009883a 	mov	r4,r2
   24628:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (2) */
   2462c:	e0bf6c17 	ldw	r2,-592(fp)
   24630:	e0bf9c15 	stw	r2,-400(fp)
   24634:	e0bf6d17 	ldw	r2,-588(fp)
   24638:	e0bf9d15 	stw	r2,-396(fp)
   2463c:	e0bf6e17 	ldw	r2,-584(fp)
   24640:	e0bf9e15 	stw	r2,-392(fp)
   24644:	e0bf6f17 	ldw	r2,-580(fp)
   24648:	e0bf9f15 	stw	r2,-388(fp)
   2464c:	e0bf7017 	ldw	r2,-576(fp)
   24650:	e0bfa015 	stw	r2,-384(fp)
   24654:	e0bf7117 	ldw	r2,-572(fp)
   24658:	e0bfa115 	stw	r2,-380(fp)
   2465c:	e0bf7217 	ldw	r2,-568(fp)
   24660:	e0bfa215 	stw	r2,-376(fp)
   24664:	e0bf7317 	ldw	r2,-564(fp)
   24668:	e0bfa315 	stw	r2,-372(fp)
   2466c:	e0bf7417 	ldw	r2,-560(fp)
   24670:	e0bfa415 	stw	r2,-368(fp)
   24674:	e0bf7517 	ldw	r2,-556(fp)
   24678:	e0bfa515 	stw	r2,-364(fp)
   2467c:	e0bf7617 	ldw	r2,-552(fp)
   24680:	e0bfa615 	stw	r2,-360(fp)
   24684:	e0bf7717 	ldw	r2,-548(fp)
   24688:	e0bfa715 	stw	r2,-356(fp)
   2468c:	e0ff7804 	addi	r3,fp,-544
   24690:	e0bf9c04 	addi	r2,fp,-400
   24694:	180b883a 	mov	r5,r3
   24698:	1009883a 	mov	r4,r2
   2469c:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (2) */
   246a0:	e0bf8417 	ldw	r2,-496(fp)
   246a4:	e0bfb415 	stw	r2,-304(fp)
   246a8:	e0bf8517 	ldw	r2,-492(fp)
   246ac:	e0bfb515 	stw	r2,-300(fp)
   246b0:	e0bf8617 	ldw	r2,-488(fp)
   246b4:	e0bfb615 	stw	r2,-296(fp)
   246b8:	e0bf8717 	ldw	r2,-484(fp)
   246bc:	e0bfb715 	stw	r2,-292(fp)
   246c0:	e0bf8817 	ldw	r2,-480(fp)
   246c4:	e0bfb815 	stw	r2,-288(fp)
   246c8:	e0bf8917 	ldw	r2,-476(fp)
   246cc:	e0bfb915 	stw	r2,-284(fp)
   246d0:	e0bf8a17 	ldw	r2,-472(fp)
   246d4:	e0bfba15 	stw	r2,-280(fp)
   246d8:	e0bf8b17 	ldw	r2,-468(fp)
   246dc:	e0bfbb15 	stw	r2,-276(fp)
   246e0:	e0bf8c17 	ldw	r2,-464(fp)
   246e4:	e0bfbc15 	stw	r2,-272(fp)
   246e8:	e0bf8d17 	ldw	r2,-460(fp)
   246ec:	e0bfbd15 	stw	r2,-268(fp)
   246f0:	e0bf8e17 	ldw	r2,-456(fp)
   246f4:	e0bfbe15 	stw	r2,-264(fp)
   246f8:	e0bf8f17 	ldw	r2,-452(fp)
   246fc:	e0bfbf15 	stw	r2,-260(fp)
   24700:	e0ff9004 	addi	r3,fp,-448
   24704:	e0bfb404 	addi	r2,fp,-304
   24708:	180b883a 	mov	r5,r3
   2470c:	1009883a 	mov	r4,r2
   24710:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */
   24714:	e0ff9c04 	addi	r3,fp,-400
   24718:	e0bfd804 	addi	r2,fp,-160
   2471c:	180b883a 	mov	r5,r3
   24720:	1009883a 	mov	r4,r2
   24724:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_negate(&m_alt, &u2, 1);                /* Malt = -X2*Z1^2 */
   24728:	e0ff7804 	addi	r3,fp,-544
   2472c:	e0bfe404 	addi	r2,fp,-112
   24730:	01800044 	movi	r6,1
   24734:	180b883a 	mov	r5,r3
   24738:	1009883a 	mov	r4,r2
   2473c:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_mul(&tt, &u1, &m_alt);                 /* tt = -U1*U2 (2) */
   24740:	e13fe404 	addi	r4,fp,-112
   24744:	e0ff6c04 	addi	r3,fp,-592
   24748:	e0bfa804 	addi	r2,fp,-352
   2474c:	200d883a 	mov	r6,r4
   24750:	180b883a 	mov	r5,r3
   24754:	1009883a 	mov	r4,r2
   24758:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_add(&rr, &tt);                         /* rr = R = T^2-U1*U2 (3) */
   2475c:	e0ffa804 	addi	r3,fp,-352
   24760:	e0bfd804 	addi	r2,fp,-160
   24764:	180b883a 	mov	r5,r3
   24768:	1009883a 	mov	r4,r2
   2476c:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    /** If lambda = R/M = 0/0 we have a problem (except in the "trivial"
     *  case that Z = z1z2 = 0, and this is special-cased later on). */
    degenerate = secp256k1_fe_normalizes_to_zero(&m) &
   24770:	e0bfb404 	addi	r2,fp,-304
   24774:	1009883a 	mov	r4,r2
   24778:	0014a640 	call	14a64 <secp256k1_fe_normalizes_to_zero>
   2477c:	1021883a 	mov	r16,r2
                 secp256k1_fe_normalizes_to_zero(&rr);
   24780:	e0bfd804 	addi	r2,fp,-160
   24784:	1009883a 	mov	r4,r2
   24788:	0014a640 	call	14a64 <secp256k1_fe_normalizes_to_zero>
    secp256k1_fe_negate(&m_alt, &u2, 1);                /* Malt = -X2*Z1^2 */
    secp256k1_fe_mul(&tt, &u1, &m_alt);                 /* tt = -U1*U2 (2) */
    secp256k1_fe_add(&rr, &tt);                         /* rr = R = T^2-U1*U2 (3) */
    /** If lambda = R/M = 0/0 we have a problem (except in the "trivial"
     *  case that Z = z1z2 = 0, and this is special-cased later on). */
    degenerate = secp256k1_fe_normalizes_to_zero(&m) &
   2478c:	8084703a 	and	r2,r16,r2
   24790:	e0bf5e15 	stw	r2,-648(fp)
    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.
     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is
     * a nontrivial cube root of one. In either case, an alternate
     * non-indeterminate expression for lambda is (y1 - y2)/(x1 - x2),
     * so we set R/M equal to this. */
    rr_alt = s1;
   24794:	e0bf8417 	ldw	r2,-496(fp)
   24798:	e0bff015 	stw	r2,-64(fp)
   2479c:	e0bf8517 	ldw	r2,-492(fp)
   247a0:	e0bff115 	stw	r2,-60(fp)
   247a4:	e0bf8617 	ldw	r2,-488(fp)
   247a8:	e0bff215 	stw	r2,-56(fp)
   247ac:	e0bf8717 	ldw	r2,-484(fp)
   247b0:	e0bff315 	stw	r2,-52(fp)
   247b4:	e0bf8817 	ldw	r2,-480(fp)
   247b8:	e0bff415 	stw	r2,-48(fp)
   247bc:	e0bf8917 	ldw	r2,-476(fp)
   247c0:	e0bff515 	stw	r2,-44(fp)
   247c4:	e0bf8a17 	ldw	r2,-472(fp)
   247c8:	e0bff615 	stw	r2,-40(fp)
   247cc:	e0bf8b17 	ldw	r2,-468(fp)
   247d0:	e0bff715 	stw	r2,-36(fp)
   247d4:	e0bf8c17 	ldw	r2,-464(fp)
   247d8:	e0bff815 	stw	r2,-32(fp)
   247dc:	e0bf8d17 	ldw	r2,-460(fp)
   247e0:	e0bff915 	stw	r2,-28(fp)
   247e4:	e0bf8e17 	ldw	r2,-456(fp)
   247e8:	e0bffa15 	stw	r2,-24(fp)
   247ec:	e0bf8f17 	ldw	r2,-452(fp)
   247f0:	e0bffb15 	stw	r2,-20(fp)
    secp256k1_fe_mul_int(&rr_alt, 2);       /* rr = Y1*Z2^3 - Y2*Z1^3 (2) */
   247f4:	e0bff004 	addi	r2,fp,-64
   247f8:	01400084 	movi	r5,2
   247fc:	1009883a 	mov	r4,r2
   24800:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_add(&m_alt, &u1);          /* Malt = X1*Z2^2 - X2*Z1^2 */
   24804:	e0ff6c04 	addi	r3,fp,-592
   24808:	e0bfe404 	addi	r2,fp,-112
   2480c:	180b883a 	mov	r5,r3
   24810:	1009883a 	mov	r4,r2
   24814:	0015ef80 	call	15ef8 <secp256k1_fe_add>

    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);
   24818:	e0bf5e17 	ldw	r2,-648(fp)
   2481c:	1005003a 	cmpeq	r2,r2,zero
   24820:	11003fcc 	andi	r4,r2,255
   24824:	e0ffd804 	addi	r3,fp,-160
   24828:	e0bff004 	addi	r2,fp,-64
   2482c:	200d883a 	mov	r6,r4
   24830:	180b883a 	mov	r5,r3
   24834:	1009883a 	mov	r4,r2
   24838:	00200b80 	call	200b8 <secp256k1_fe_cmov>
    secp256k1_fe_cmov(&m_alt, &m, !degenerate);
   2483c:	e0bf5e17 	ldw	r2,-648(fp)
   24840:	1005003a 	cmpeq	r2,r2,zero
   24844:	11003fcc 	andi	r4,r2,255
   24848:	e0ffb404 	addi	r3,fp,-304
   2484c:	e0bfe404 	addi	r2,fp,-112
   24850:	200d883a 	mov	r6,r4
   24854:	180b883a 	mov	r5,r3
   24858:	1009883a 	mov	r4,r2
   2485c:	00200b80 	call	200b8 <secp256k1_fe_cmov>
    /* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.
     * From here on out Ralt and Malt represent the numerator
     * and denominator of lambda; R and M represent the explicit
     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */
    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */
   24860:	e0ffe404 	addi	r3,fp,-112
   24864:	e0bfc004 	addi	r2,fp,-256
   24868:	180b883a 	mov	r5,r3
   2486c:	1009883a 	mov	r4,r2
   24870:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&q, &n, &t);                       /* q = Q = T*Malt^2 (1) */
   24874:	e13f9c04 	addi	r4,fp,-400
   24878:	e0ffc004 	addi	r3,fp,-256
   2487c:	e0bfcc04 	addi	r2,fp,-208
   24880:	200d883a 	mov	r6,r4
   24884:	180b883a 	mov	r5,r3
   24888:	1009883a 	mov	r4,r2
   2488c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    /* These two lines use the observation that either M == Malt or M == 0,
     * so M^3 * Malt is either Malt^4 (which is computed by squaring), or
     * zero (which is "computed" by cmov). So the cost is one squaring
     * versus two multiplications. */
    secp256k1_fe_sqr(&n, &n);
   24890:	e0ffc004 	addi	r3,fp,-256
   24894:	e0bfc004 	addi	r2,fp,-256
   24898:	180b883a 	mov	r5,r3
   2489c:	1009883a 	mov	r4,r2
   248a0:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_cmov(&n, &m, degenerate);              /* n = M^3 * Malt (2) */
   248a4:	e0ffb404 	addi	r3,fp,-304
   248a8:	e0bfc004 	addi	r2,fp,-256
   248ac:	e1bf5e17 	ldw	r6,-648(fp)
   248b0:	180b883a 	mov	r5,r3
   248b4:	1009883a 	mov	r4,r2
   248b8:	00200b80 	call	200b8 <secp256k1_fe_cmov>
    secp256k1_fe_sqr(&t, &rr_alt);                      /* t = Ralt^2 (1) */
   248bc:	e0fff004 	addi	r3,fp,-64
   248c0:	e0bf9c04 	addi	r2,fp,-400
   248c4:	180b883a 	mov	r5,r3
   248c8:	1009883a 	mov	r4,r2
   248cc:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&r->z, &a->z, &m_alt);             /* r->z = Malt*Z (1) */
   248d0:	e0bffc17 	ldw	r2,-16(fp)
   248d4:	10c01804 	addi	r3,r2,96
   248d8:	e0bffd17 	ldw	r2,-12(fp)
   248dc:	10801804 	addi	r2,r2,96
   248e0:	e13fe404 	addi	r4,fp,-112
   248e4:	200d883a 	mov	r6,r4
   248e8:	100b883a 	mov	r5,r2
   248ec:	1809883a 	mov	r4,r3
   248f0:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);
   248f4:	e0bffc17 	ldw	r2,-16(fp)
   248f8:	10801804 	addi	r2,r2,96
   248fc:	1009883a 	mov	r4,r2
   24900:	0014a640 	call	14a64 <secp256k1_fe_normalizes_to_zero>
   24904:	1009883a 	mov	r4,r2
   24908:	e0bffd17 	ldw	r2,-12(fp)
   2490c:	10802417 	ldw	r2,144(r2)
   24910:	00c00044 	movi	r3,1
   24914:	1885c83a 	sub	r2,r3,r2
   24918:	100b883a 	mov	r5,r2
   2491c:	0043af40 	call	43af4 <__mulsi3>
   24920:	e0bf5f15 	stw	r2,-644(fp)
    secp256k1_fe_mul_int(&r->z, 2);                     /* r->z = Z3 = 2*Malt*Z (2) */
   24924:	e0bffc17 	ldw	r2,-16(fp)
   24928:	10801804 	addi	r2,r2,96
   2492c:	01400084 	movi	r5,2
   24930:	1009883a 	mov	r4,r2
   24934:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_negate(&q, &q, 1);                     /* q = -Q (2) */
   24938:	e0ffcc04 	addi	r3,fp,-208
   2493c:	e0bfcc04 	addi	r2,fp,-208
   24940:	01800044 	movi	r6,1
   24944:	180b883a 	mov	r5,r3
   24948:	1009883a 	mov	r4,r2
   2494c:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_add(&t, &q);                           /* t = Ralt^2-Q (3) */
   24950:	e0ffcc04 	addi	r3,fp,-208
   24954:	e0bf9c04 	addi	r2,fp,-400
   24958:	180b883a 	mov	r5,r3
   2495c:	1009883a 	mov	r4,r2
   24960:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_normalize_weak(&t);
   24964:	e0bf9c04 	addi	r2,fp,-400
   24968:	1009883a 	mov	r4,r2
   2496c:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    r->x = t;                                           /* r->x = Ralt^2-Q (1) */
   24970:	e0bffc17 	ldw	r2,-16(fp)
   24974:	e0ff9c17 	ldw	r3,-400(fp)
   24978:	10c00015 	stw	r3,0(r2)
   2497c:	e0ff9d17 	ldw	r3,-396(fp)
   24980:	10c00115 	stw	r3,4(r2)
   24984:	e0ff9e17 	ldw	r3,-392(fp)
   24988:	10c00215 	stw	r3,8(r2)
   2498c:	e0ff9f17 	ldw	r3,-388(fp)
   24990:	10c00315 	stw	r3,12(r2)
   24994:	e0ffa017 	ldw	r3,-384(fp)
   24998:	10c00415 	stw	r3,16(r2)
   2499c:	e0ffa117 	ldw	r3,-380(fp)
   249a0:	10c00515 	stw	r3,20(r2)
   249a4:	e0ffa217 	ldw	r3,-376(fp)
   249a8:	10c00615 	stw	r3,24(r2)
   249ac:	e0ffa317 	ldw	r3,-372(fp)
   249b0:	10c00715 	stw	r3,28(r2)
   249b4:	e0ffa417 	ldw	r3,-368(fp)
   249b8:	10c00815 	stw	r3,32(r2)
   249bc:	e0ffa517 	ldw	r3,-364(fp)
   249c0:	10c00915 	stw	r3,36(r2)
   249c4:	e0ffa617 	ldw	r3,-360(fp)
   249c8:	10c00a15 	stw	r3,40(r2)
   249cc:	e0ffa717 	ldw	r3,-356(fp)
   249d0:	10c00b15 	stw	r3,44(r2)
    secp256k1_fe_mul_int(&t, 2);                        /* t = 2*x3 (2) */
   249d4:	e0bf9c04 	addi	r2,fp,-400
   249d8:	01400084 	movi	r5,2
   249dc:	1009883a 	mov	r4,r2
   249e0:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_add(&t, &q);                           /* t = 2*x3 - Q: (4) */
   249e4:	e0ffcc04 	addi	r3,fp,-208
   249e8:	e0bf9c04 	addi	r2,fp,-400
   249ec:	180b883a 	mov	r5,r3
   249f0:	1009883a 	mov	r4,r2
   249f4:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_mul(&t, &t, &rr_alt);                  /* t = Ralt*(2*x3 - Q) (1) */
   249f8:	e13ff004 	addi	r4,fp,-64
   249fc:	e0ff9c04 	addi	r3,fp,-400
   24a00:	e0bf9c04 	addi	r2,fp,-400
   24a04:	200d883a 	mov	r6,r4
   24a08:	180b883a 	mov	r5,r3
   24a0c:	1009883a 	mov	r4,r2
   24a10:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_add(&t, &n);                           /* t = Ralt*(2*x3 - Q) + M^3*Malt (3) */
   24a14:	e0ffc004 	addi	r3,fp,-256
   24a18:	e0bf9c04 	addi	r2,fp,-400
   24a1c:	180b883a 	mov	r5,r3
   24a20:	1009883a 	mov	r4,r2
   24a24:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    secp256k1_fe_negate(&r->y, &t, 3);                  /* r->y = Ralt*(Q - 2x3) - M^3*Malt (4) */
   24a28:	e0bffc17 	ldw	r2,-16(fp)
   24a2c:	10800c04 	addi	r2,r2,48
   24a30:	e0ff9c04 	addi	r3,fp,-400
   24a34:	018000c4 	movi	r6,3
   24a38:	180b883a 	mov	r5,r3
   24a3c:	1009883a 	mov	r4,r2
   24a40:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
    secp256k1_fe_normalize_weak(&r->y);
   24a44:	e0bffc17 	ldw	r2,-16(fp)
   24a48:	10800c04 	addi	r2,r2,48
   24a4c:	1009883a 	mov	r4,r2
   24a50:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
    secp256k1_fe_mul_int(&r->x, 4);                     /* r->x = X3 = 4*(Ralt^2-Q) */
   24a54:	e0bffc17 	ldw	r2,-16(fp)
   24a58:	01400104 	movi	r5,4
   24a5c:	1009883a 	mov	r4,r2
   24a60:	0015d300 	call	15d30 <secp256k1_fe_mul_int>
    secp256k1_fe_mul_int(&r->y, 4);                     /* r->y = Y3 = 4*Ralt*(Q - 2x3) - 4*M^3*Malt (4) */
   24a64:	e0bffc17 	ldw	r2,-16(fp)
   24a68:	10800c04 	addi	r2,r2,48
   24a6c:	01400104 	movi	r5,4
   24a70:	1009883a 	mov	r4,r2
   24a74:	0015d300 	call	15d30 <secp256k1_fe_mul_int>

    /** In case a->infinity == 1, replace r with (b->x, b->y, 1). */
    secp256k1_fe_cmov(&r->x, &b->x, a->infinity);
   24a78:	e0fffc17 	ldw	r3,-16(fp)
   24a7c:	e13ffe17 	ldw	r4,-8(fp)
   24a80:	e0bffd17 	ldw	r2,-12(fp)
   24a84:	10802417 	ldw	r2,144(r2)
   24a88:	100d883a 	mov	r6,r2
   24a8c:	200b883a 	mov	r5,r4
   24a90:	1809883a 	mov	r4,r3
   24a94:	00200b80 	call	200b8 <secp256k1_fe_cmov>
    secp256k1_fe_cmov(&r->y, &b->y, a->infinity);
   24a98:	e0bffc17 	ldw	r2,-16(fp)
   24a9c:	10c00c04 	addi	r3,r2,48
   24aa0:	e0bffe17 	ldw	r2,-8(fp)
   24aa4:	11000c04 	addi	r4,r2,48
   24aa8:	e0bffd17 	ldw	r2,-12(fp)
   24aac:	10802417 	ldw	r2,144(r2)
   24ab0:	100d883a 	mov	r6,r2
   24ab4:	200b883a 	mov	r5,r4
   24ab8:	1809883a 	mov	r4,r3
   24abc:	00200b80 	call	200b8 <secp256k1_fe_cmov>
    secp256k1_fe_cmov(&r->z, &fe_1, a->infinity);
   24ac0:	e0bffc17 	ldw	r2,-16(fp)
   24ac4:	10c01804 	addi	r3,r2,96
   24ac8:	e0bffd17 	ldw	r2,-12(fp)
   24acc:	10802417 	ldw	r2,144(r2)
   24ad0:	100d883a 	mov	r6,r2
   24ad4:	01400174 	movhi	r5,5
   24ad8:	29598b04 	addi	r5,r5,26156
   24adc:	1809883a 	mov	r4,r3
   24ae0:	00200b80 	call	200b8 <secp256k1_fe_cmov>
    r->infinity = infinity;
   24ae4:	e0bffc17 	ldw	r2,-16(fp)
   24ae8:	e0ff5f17 	ldw	r3,-644(fp)
   24aec:	10c02415 	stw	r3,144(r2)
}
   24af0:	0001883a 	nop
   24af4:	e6ffff04 	addi	sp,fp,-4
   24af8:	dfc00217 	ldw	ra,8(sp)
   24afc:	df000117 	ldw	fp,4(sp)
   24b00:	dc000017 	ldw	r16,0(sp)
   24b04:	dec00304 	addi	sp,sp,12
   24b08:	f800283a 	ret

00024b0c <secp256k1_gej_rescale>:

static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *s) {
   24b0c:	deffef04 	addi	sp,sp,-68
   24b10:	dfc01015 	stw	ra,64(sp)
   24b14:	df000f15 	stw	fp,60(sp)
   24b18:	df000f04 	addi	fp,sp,60
   24b1c:	e13ffe15 	stw	r4,-8(fp)
   24b20:	e17fff15 	stw	r5,-4(fp)
    /* Operations: 4 mul, 1 sqr */
    secp256k1_fe zz;
    VERIFY_CHECK(!secp256k1_fe_is_zero(s));
   24b24:	e13fff17 	ldw	r4,-4(fp)
   24b28:	00153700 	call	15370 <secp256k1_fe_is_zero>
   24b2c:	1004c03a 	cmpne	r2,r2,zero
   24b30:	10803fcc 	andi	r2,r2,255
   24b34:	10000d26 	beq	r2,zero,24b6c <secp256k1_gej_rescale+0x60>
   24b38:	d0a01617 	ldw	r2,-32680(gp)
   24b3c:	10c00317 	ldw	r3,12(r2)
   24b40:	00800174 	movhi	r2,5
   24b44:	10963604 	addi	r2,r2,22744
   24b48:	d8800015 	stw	r2,0(sp)
   24b4c:	01c094c4 	movi	r7,595
   24b50:	01800174 	movhi	r6,5
   24b54:	3195f504 	addi	r6,r6,22484
   24b58:	01400174 	movhi	r5,5
   24b5c:	2951e804 	addi	r5,r5,18336
   24b60:	1809883a 	mov	r4,r3
   24b64:	00461000 	call	46100 <fprintf>
   24b68:	0045fd40 	call	45fd4 <abort>
    secp256k1_fe_sqr(&zz, s);
   24b6c:	e17fff17 	ldw	r5,-4(fp)
   24b70:	e13ff204 	addi	r4,fp,-56
   24b74:	00200080 	call	20008 <secp256k1_fe_sqr>
    secp256k1_fe_mul(&r->x, &r->x, &zz);                /* r->x *= s^2 */
   24b78:	e0bffe17 	ldw	r2,-8(fp)
   24b7c:	e0fffe17 	ldw	r3,-8(fp)
   24b80:	e1bff204 	addi	r6,fp,-56
   24b84:	180b883a 	mov	r5,r3
   24b88:	1009883a 	mov	r4,r2
   24b8c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->y, &r->y, &zz);
   24b90:	e0bffe17 	ldw	r2,-8(fp)
   24b94:	10c00c04 	addi	r3,r2,48
   24b98:	e0bffe17 	ldw	r2,-8(fp)
   24b9c:	10800c04 	addi	r2,r2,48
   24ba0:	e1bff204 	addi	r6,fp,-56
   24ba4:	100b883a 	mov	r5,r2
   24ba8:	1809883a 	mov	r4,r3
   24bac:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->y, &r->y, s);                  /* r->y *= s^3 */
   24bb0:	e0bffe17 	ldw	r2,-8(fp)
   24bb4:	10c00c04 	addi	r3,r2,48
   24bb8:	e0bffe17 	ldw	r2,-8(fp)
   24bbc:	10800c04 	addi	r2,r2,48
   24bc0:	e1bfff17 	ldw	r6,-4(fp)
   24bc4:	100b883a 	mov	r5,r2
   24bc8:	1809883a 	mov	r4,r3
   24bcc:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    secp256k1_fe_mul(&r->z, &r->z, s);                  /* r->z *= s   */
   24bd0:	e0bffe17 	ldw	r2,-8(fp)
   24bd4:	10c01804 	addi	r3,r2,96
   24bd8:	e0bffe17 	ldw	r2,-8(fp)
   24bdc:	10801804 	addi	r2,r2,96
   24be0:	e1bfff17 	ldw	r6,-4(fp)
   24be4:	100b883a 	mov	r5,r2
   24be8:	1809883a 	mov	r4,r3
   24bec:	001feb40 	call	1feb4 <secp256k1_fe_mul>
}
   24bf0:	0001883a 	nop
   24bf4:	e037883a 	mov	sp,fp
   24bf8:	dfc00117 	ldw	ra,4(sp)
   24bfc:	df000017 	ldw	fp,0(sp)
   24c00:	dec00204 	addi	sp,sp,8
   24c04:	f800283a 	ret

00024c08 <secp256k1_ge_to_storage>:

static void secp256k1_ge_to_storage(secp256k1_ge_storage *r, const secp256k1_ge *a) {
   24c08:	deffe304 	addi	sp,sp,-116
   24c0c:	dfc01c15 	stw	ra,112(sp)
   24c10:	df001b15 	stw	fp,108(sp)
   24c14:	df001b04 	addi	fp,sp,108
   24c18:	e13ffe15 	stw	r4,-8(fp)
   24c1c:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe x, y;
    VERIFY_CHECK(!a->infinity);
   24c20:	e0bfff17 	ldw	r2,-4(fp)
   24c24:	10801817 	ldw	r2,96(r2)
   24c28:	1004c03a 	cmpne	r2,r2,zero
   24c2c:	10803fcc 	andi	r2,r2,255
   24c30:	10000d26 	beq	r2,zero,24c68 <secp256k1_ge_to_storage+0x60>
   24c34:	d0a01617 	ldw	r2,-32680(gp)
   24c38:	10c00317 	ldw	r3,12(r2)
   24c3c:	00800174 	movhi	r2,5
   24c40:	1095fe04 	addi	r2,r2,22520
   24c44:	d8800015 	stw	r2,0(sp)
   24c48:	01c09744 	movi	r7,605
   24c4c:	01800174 	movhi	r6,5
   24c50:	3195f504 	addi	r6,r6,22484
   24c54:	01400174 	movhi	r5,5
   24c58:	2951e804 	addi	r5,r5,18336
   24c5c:	1809883a 	mov	r4,r3
   24c60:	00461000 	call	46100 <fprintf>
   24c64:	0045fd40 	call	45fd4 <abort>
    x = a->x;
   24c68:	e0bfff17 	ldw	r2,-4(fp)
   24c6c:	10c00017 	ldw	r3,0(r2)
   24c70:	e0ffe615 	stw	r3,-104(fp)
   24c74:	10c00117 	ldw	r3,4(r2)
   24c78:	e0ffe715 	stw	r3,-100(fp)
   24c7c:	10c00217 	ldw	r3,8(r2)
   24c80:	e0ffe815 	stw	r3,-96(fp)
   24c84:	10c00317 	ldw	r3,12(r2)
   24c88:	e0ffe915 	stw	r3,-92(fp)
   24c8c:	10c00417 	ldw	r3,16(r2)
   24c90:	e0ffea15 	stw	r3,-88(fp)
   24c94:	10c00517 	ldw	r3,20(r2)
   24c98:	e0ffeb15 	stw	r3,-84(fp)
   24c9c:	10c00617 	ldw	r3,24(r2)
   24ca0:	e0ffec15 	stw	r3,-80(fp)
   24ca4:	10c00717 	ldw	r3,28(r2)
   24ca8:	e0ffed15 	stw	r3,-76(fp)
   24cac:	10c00817 	ldw	r3,32(r2)
   24cb0:	e0ffee15 	stw	r3,-72(fp)
   24cb4:	10c00917 	ldw	r3,36(r2)
   24cb8:	e0ffef15 	stw	r3,-68(fp)
   24cbc:	10c00a17 	ldw	r3,40(r2)
   24cc0:	e0fff015 	stw	r3,-64(fp)
   24cc4:	10800b17 	ldw	r2,44(r2)
   24cc8:	e0bff115 	stw	r2,-60(fp)
    secp256k1_fe_normalize(&x);
   24ccc:	e13fe604 	addi	r4,fp,-104
   24cd0:	0013b3c0 	call	13b3c <secp256k1_fe_normalize>
    y = a->y;
   24cd4:	e0bfff17 	ldw	r2,-4(fp)
   24cd8:	10c00c17 	ldw	r3,48(r2)
   24cdc:	e0fff215 	stw	r3,-56(fp)
   24ce0:	10c00d17 	ldw	r3,52(r2)
   24ce4:	e0fff315 	stw	r3,-52(fp)
   24ce8:	10c00e17 	ldw	r3,56(r2)
   24cec:	e0fff415 	stw	r3,-48(fp)
   24cf0:	10c00f17 	ldw	r3,60(r2)
   24cf4:	e0fff515 	stw	r3,-44(fp)
   24cf8:	10c01017 	ldw	r3,64(r2)
   24cfc:	e0fff615 	stw	r3,-40(fp)
   24d00:	10c01117 	ldw	r3,68(r2)
   24d04:	e0fff715 	stw	r3,-36(fp)
   24d08:	10c01217 	ldw	r3,72(r2)
   24d0c:	e0fff815 	stw	r3,-32(fp)
   24d10:	10c01317 	ldw	r3,76(r2)
   24d14:	e0fff915 	stw	r3,-28(fp)
   24d18:	10c01417 	ldw	r3,80(r2)
   24d1c:	e0fffa15 	stw	r3,-24(fp)
   24d20:	10c01517 	ldw	r3,84(r2)
   24d24:	e0fffb15 	stw	r3,-20(fp)
   24d28:	10c01617 	ldw	r3,88(r2)
   24d2c:	e0fffc15 	stw	r3,-16(fp)
   24d30:	10801717 	ldw	r2,92(r2)
   24d34:	e0bffd15 	stw	r2,-12(fp)
    secp256k1_fe_normalize(&y);
   24d38:	e0bff204 	addi	r2,fp,-56
   24d3c:	1009883a 	mov	r4,r2
   24d40:	0013b3c0 	call	13b3c <secp256k1_fe_normalize>
    secp256k1_fe_to_storage(&r->x, &x);
   24d44:	e0bffe17 	ldw	r2,-8(fp)
   24d48:	e17fe604 	addi	r5,fp,-104
   24d4c:	1009883a 	mov	r4,r2
   24d50:	00204980 	call	20498 <secp256k1_fe_to_storage>
    secp256k1_fe_to_storage(&r->y, &y);
   24d54:	e0bffe17 	ldw	r2,-8(fp)
   24d58:	10800804 	addi	r2,r2,32
   24d5c:	e0fff204 	addi	r3,fp,-56
   24d60:	180b883a 	mov	r5,r3
   24d64:	1009883a 	mov	r4,r2
   24d68:	00204980 	call	20498 <secp256k1_fe_to_storage>
}
   24d6c:	0001883a 	nop
   24d70:	e037883a 	mov	sp,fp
   24d74:	dfc00117 	ldw	ra,4(sp)
   24d78:	df000017 	ldw	fp,0(sp)
   24d7c:	dec00204 	addi	sp,sp,8
   24d80:	f800283a 	ret

00024d84 <secp256k1_ge_from_storage>:

static void secp256k1_ge_from_storage(secp256k1_ge *r, const secp256k1_ge_storage *a) {
   24d84:	defffc04 	addi	sp,sp,-16
   24d88:	dfc00315 	stw	ra,12(sp)
   24d8c:	df000215 	stw	fp,8(sp)
   24d90:	df000204 	addi	fp,sp,8
   24d94:	e13ffe15 	stw	r4,-8(fp)
   24d98:	e17fff15 	stw	r5,-4(fp)
    secp256k1_fe_from_storage(&r->x, &a->x);
   24d9c:	e0bffe17 	ldw	r2,-8(fp)
   24da0:	e0ffff17 	ldw	r3,-4(fp)
   24da4:	180b883a 	mov	r5,r3
   24da8:	1009883a 	mov	r4,r2
   24dac:	00206400 	call	20640 <secp256k1_fe_from_storage>
    secp256k1_fe_from_storage(&r->y, &a->y);
   24db0:	e0bffe17 	ldw	r2,-8(fp)
   24db4:	10c00c04 	addi	r3,r2,48
   24db8:	e0bfff17 	ldw	r2,-4(fp)
   24dbc:	10800804 	addi	r2,r2,32
   24dc0:	100b883a 	mov	r5,r2
   24dc4:	1809883a 	mov	r4,r3
   24dc8:	00206400 	call	20640 <secp256k1_fe_from_storage>
    r->infinity = 0;
   24dcc:	e0bffe17 	ldw	r2,-8(fp)
   24dd0:	10001815 	stw	zero,96(r2)
}
   24dd4:	0001883a 	nop
   24dd8:	e037883a 	mov	sp,fp
   24ddc:	dfc00117 	ldw	ra,4(sp)
   24de0:	df000017 	ldw	fp,0(sp)
   24de4:	dec00204 	addi	sp,sp,8
   24de8:	f800283a 	ret

00024dec <secp256k1_ge_storage_cmov>:

static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag) {
   24dec:	defffb04 	addi	sp,sp,-20
   24df0:	dfc00415 	stw	ra,16(sp)
   24df4:	df000315 	stw	fp,12(sp)
   24df8:	df000304 	addi	fp,sp,12
   24dfc:	e13ffd15 	stw	r4,-12(fp)
   24e00:	e17ffe15 	stw	r5,-8(fp)
   24e04:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_fe_storage_cmov(&r->x, &a->x, flag);
   24e08:	e0bffd17 	ldw	r2,-12(fp)
   24e0c:	e0fffe17 	ldw	r3,-8(fp)
   24e10:	e1bfff17 	ldw	r6,-4(fp)
   24e14:	180b883a 	mov	r5,r3
   24e18:	1009883a 	mov	r4,r2
   24e1c:	00202f40 	call	202f4 <secp256k1_fe_storage_cmov>
    secp256k1_fe_storage_cmov(&r->y, &a->y, flag);
   24e20:	e0bffd17 	ldw	r2,-12(fp)
   24e24:	10c00804 	addi	r3,r2,32
   24e28:	e0bffe17 	ldw	r2,-8(fp)
   24e2c:	10800804 	addi	r2,r2,32
   24e30:	e1bfff17 	ldw	r6,-4(fp)
   24e34:	100b883a 	mov	r5,r2
   24e38:	1809883a 	mov	r4,r3
   24e3c:	00202f40 	call	202f4 <secp256k1_fe_storage_cmov>
}
   24e40:	0001883a 	nop
   24e44:	e037883a 	mov	sp,fp
   24e48:	dfc00117 	ldw	ra,4(sp)
   24e4c:	df000017 	ldw	fp,0(sp)
   24e50:	dec00204 	addi	sp,sp,8
   24e54:	f800283a 	ret

00024e58 <secp256k1_gej_has_quad_y_var>:
    *r = *a;
    secp256k1_fe_mul(&r->x, &r->x, &beta);
}
#endif

static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {
   24e58:	defff104 	addi	sp,sp,-60
   24e5c:	dfc00e15 	stw	ra,56(sp)
   24e60:	df000d15 	stw	fp,52(sp)
   24e64:	df000d04 	addi	fp,sp,52
   24e68:	e13fff15 	stw	r4,-4(fp)
    secp256k1_fe yz;

    if (a->infinity) {
   24e6c:	e0bfff17 	ldw	r2,-4(fp)
   24e70:	10802417 	ldw	r2,144(r2)
   24e74:	10000226 	beq	r2,zero,24e80 <secp256k1_gej_has_quad_y_var+0x28>
        return 0;
   24e78:	0005883a 	mov	r2,zero
   24e7c:	00000a06 	br	24ea8 <secp256k1_gej_has_quad_y_var+0x50>
    }

    /* We rely on the fact that the Jacobi symbol of 1 / a->z^3 is the same as
     * that of a->z. Thus a->y / a->z^3 is a quadratic residue iff a->y * a->z
       is */
    secp256k1_fe_mul(&yz, &a->y, &a->z);
   24e80:	e0bfff17 	ldw	r2,-4(fp)
   24e84:	10c00c04 	addi	r3,r2,48
   24e88:	e0bfff17 	ldw	r2,-4(fp)
   24e8c:	10801804 	addi	r2,r2,96
   24e90:	100d883a 	mov	r6,r2
   24e94:	180b883a 	mov	r5,r3
   24e98:	e13ff304 	addi	r4,fp,-52
   24e9c:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    return secp256k1_fe_is_quad_var(&yz);
   24ea0:	e13ff304 	addi	r4,fp,-52
   24ea4:	0021c140 	call	21c14 <secp256k1_fe_is_quad_var>
}
   24ea8:	e037883a 	mov	sp,fp
   24eac:	dfc00117 	ldw	ra,4(sp)
   24eb0:	df000017 	ldw	fp,0(sp)
   24eb4:	dec00204 	addi	sp,sp,8
   24eb8:	f800283a 	ret

00024ebc <secp256k1_scalar_clear>:
#define SECP256K1_N_H_4 ((uint32_t)0xFFFFFFFFUL)
#define SECP256K1_N_H_5 ((uint32_t)0xFFFFFFFFUL)
#define SECP256K1_N_H_6 ((uint32_t)0xFFFFFFFFUL)
#define SECP256K1_N_H_7 ((uint32_t)0x7FFFFFFFUL)

SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {
   24ebc:	defffe04 	addi	sp,sp,-8
   24ec0:	df000115 	stw	fp,4(sp)
   24ec4:	df000104 	addi	fp,sp,4
   24ec8:	e13fff15 	stw	r4,-4(fp)
    r->d[0] = 0;
   24ecc:	e0bfff17 	ldw	r2,-4(fp)
   24ed0:	10000015 	stw	zero,0(r2)
    r->d[1] = 0;
   24ed4:	e0bfff17 	ldw	r2,-4(fp)
   24ed8:	10000115 	stw	zero,4(r2)
    r->d[2] = 0;
   24edc:	e0bfff17 	ldw	r2,-4(fp)
   24ee0:	10000215 	stw	zero,8(r2)
    r->d[3] = 0;
   24ee4:	e0bfff17 	ldw	r2,-4(fp)
   24ee8:	10000315 	stw	zero,12(r2)
    r->d[4] = 0;
   24eec:	e0bfff17 	ldw	r2,-4(fp)
   24ef0:	10000415 	stw	zero,16(r2)
    r->d[5] = 0;
   24ef4:	e0bfff17 	ldw	r2,-4(fp)
   24ef8:	10000515 	stw	zero,20(r2)
    r->d[6] = 0;
   24efc:	e0bfff17 	ldw	r2,-4(fp)
   24f00:	10000615 	stw	zero,24(r2)
    r->d[7] = 0;
   24f04:	e0bfff17 	ldw	r2,-4(fp)
   24f08:	10000715 	stw	zero,28(r2)
}
   24f0c:	0001883a 	nop
   24f10:	e037883a 	mov	sp,fp
   24f14:	df000017 	ldw	fp,0(sp)
   24f18:	dec00104 	addi	sp,sp,4
   24f1c:	f800283a 	ret

00024f20 <secp256k1_scalar_set_int>:

SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {
   24f20:	defffd04 	addi	sp,sp,-12
   24f24:	df000215 	stw	fp,8(sp)
   24f28:	df000204 	addi	fp,sp,8
   24f2c:	e13ffe15 	stw	r4,-8(fp)
   24f30:	e17fff15 	stw	r5,-4(fp)
    r->d[0] = v;
   24f34:	e0bffe17 	ldw	r2,-8(fp)
   24f38:	e0ffff17 	ldw	r3,-4(fp)
   24f3c:	10c00015 	stw	r3,0(r2)
    r->d[1] = 0;
   24f40:	e0bffe17 	ldw	r2,-8(fp)
   24f44:	10000115 	stw	zero,4(r2)
    r->d[2] = 0;
   24f48:	e0bffe17 	ldw	r2,-8(fp)
   24f4c:	10000215 	stw	zero,8(r2)
    r->d[3] = 0;
   24f50:	e0bffe17 	ldw	r2,-8(fp)
   24f54:	10000315 	stw	zero,12(r2)
    r->d[4] = 0;
   24f58:	e0bffe17 	ldw	r2,-8(fp)
   24f5c:	10000415 	stw	zero,16(r2)
    r->d[5] = 0;
   24f60:	e0bffe17 	ldw	r2,-8(fp)
   24f64:	10000515 	stw	zero,20(r2)
    r->d[6] = 0;
   24f68:	e0bffe17 	ldw	r2,-8(fp)
   24f6c:	10000615 	stw	zero,24(r2)
    r->d[7] = 0;
   24f70:	e0bffe17 	ldw	r2,-8(fp)
   24f74:	10000715 	stw	zero,28(r2)
}
   24f78:	0001883a 	nop
   24f7c:	e037883a 	mov	sp,fp
   24f80:	df000017 	ldw	fp,0(sp)
   24f84:	dec00104 	addi	sp,sp,4
   24f88:	f800283a 	ret

00024f8c <secp256k1_scalar_get_bits>:

SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {
   24f8c:	defffa04 	addi	sp,sp,-24
   24f90:	dfc00515 	stw	ra,20(sp)
   24f94:	df000415 	stw	fp,16(sp)
   24f98:	df000404 	addi	fp,sp,16
   24f9c:	e13ffd15 	stw	r4,-12(fp)
   24fa0:	e17ffe15 	stw	r5,-8(fp)
   24fa4:	e1bfff15 	stw	r6,-4(fp)
    VERIFY_CHECK((offset + count - 1) >> 5 == offset >> 5);
   24fa8:	e0fffe17 	ldw	r3,-8(fp)
   24fac:	e0bfff17 	ldw	r2,-4(fp)
   24fb0:	1885883a 	add	r2,r3,r2
   24fb4:	10bfffc4 	addi	r2,r2,-1
   24fb8:	1006d17a 	srli	r3,r2,5
   24fbc:	e0bffe17 	ldw	r2,-8(fp)
   24fc0:	1004d17a 	srli	r2,r2,5
   24fc4:	1884c03a 	cmpne	r2,r3,r2
   24fc8:	10803fcc 	andi	r2,r2,255
   24fcc:	10000d26 	beq	r2,zero,25004 <secp256k1_scalar_get_bits+0x78>
   24fd0:	d0a01617 	ldw	r2,-32680(gp)
   24fd4:	10c00317 	ldw	r3,12(r2)
   24fd8:	00800174 	movhi	r2,5
   24fdc:	10964d04 	addi	r2,r2,22836
   24fe0:	d8800015 	stw	r2,0(sp)
   24fe4:	01c00f04 	movi	r7,60
   24fe8:	01800174 	movhi	r6,5
   24fec:	31964204 	addi	r6,r6,22792
   24ff0:	01400174 	movhi	r5,5
   24ff4:	2951e804 	addi	r5,r5,18336
   24ff8:	1809883a 	mov	r4,r3
   24ffc:	00461000 	call	46100 <fprintf>
   25000:	0045fd40 	call	45fd4 <abort>
    return (a->d[offset >> 5] >> (offset & 0x1F)) & ((1 << count) - 1);
   25004:	e0bffe17 	ldw	r2,-8(fp)
   25008:	1004d17a 	srli	r2,r2,5
   2500c:	e0fffd17 	ldw	r3,-12(fp)
   25010:	1085883a 	add	r2,r2,r2
   25014:	1085883a 	add	r2,r2,r2
   25018:	1885883a 	add	r2,r3,r2
   2501c:	10c00017 	ldw	r3,0(r2)
   25020:	e0bffe17 	ldw	r2,-8(fp)
   25024:	108007cc 	andi	r2,r2,31
   25028:	1884d83a 	srl	r2,r3,r2
   2502c:	01000044 	movi	r4,1
   25030:	e0ffff17 	ldw	r3,-4(fp)
   25034:	20c6983a 	sll	r3,r4,r3
   25038:	18ffffc4 	addi	r3,r3,-1
   2503c:	10c4703a 	and	r2,r2,r3
}
   25040:	e037883a 	mov	sp,fp
   25044:	dfc00117 	ldw	ra,4(sp)
   25048:	df000017 	ldw	fp,0(sp)
   2504c:	dec00204 	addi	sp,sp,8
   25050:	f800283a 	ret

00025054 <secp256k1_scalar_get_bits_var>:

SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {
   25054:	defffa04 	addi	sp,sp,-24
   25058:	dfc00515 	stw	ra,20(sp)
   2505c:	df000415 	stw	fp,16(sp)
   25060:	df000404 	addi	fp,sp,16
   25064:	e13ffd15 	stw	r4,-12(fp)
   25068:	e17ffe15 	stw	r5,-8(fp)
   2506c:	e1bfff15 	stw	r6,-4(fp)
    VERIFY_CHECK(count < 32);
   25070:	e0bfff17 	ldw	r2,-4(fp)
   25074:	10800828 	cmpgeui	r2,r2,32
   25078:	10803fcc 	andi	r2,r2,255
   2507c:	10000d26 	beq	r2,zero,250b4 <secp256k1_scalar_get_bits_var+0x60>
   25080:	d0a01617 	ldw	r2,-32680(gp)
   25084:	10c00317 	ldw	r3,12(r2)
   25088:	00800174 	movhi	r2,5
   2508c:	10965d04 	addi	r2,r2,22900
   25090:	d8800015 	stw	r2,0(sp)
   25094:	01c01044 	movi	r7,65
   25098:	01800174 	movhi	r6,5
   2509c:	31964204 	addi	r6,r6,22792
   250a0:	01400174 	movhi	r5,5
   250a4:	2951e804 	addi	r5,r5,18336
   250a8:	1809883a 	mov	r4,r3
   250ac:	00461000 	call	46100 <fprintf>
   250b0:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(offset + count <= 256);
   250b4:	e0fffe17 	ldw	r3,-8(fp)
   250b8:	e0bfff17 	ldw	r2,-4(fp)
   250bc:	1885883a 	add	r2,r3,r2
   250c0:	10804068 	cmpgeui	r2,r2,257
   250c4:	10803fcc 	andi	r2,r2,255
   250c8:	10000d26 	beq	r2,zero,25100 <secp256k1_scalar_get_bits_var+0xac>
   250cc:	d0a01617 	ldw	r2,-32680(gp)
   250d0:	10c00317 	ldw	r3,12(r2)
   250d4:	00800174 	movhi	r2,5
   250d8:	10966604 	addi	r2,r2,22936
   250dc:	d8800015 	stw	r2,0(sp)
   250e0:	01c01084 	movi	r7,66
   250e4:	01800174 	movhi	r6,5
   250e8:	31964204 	addi	r6,r6,22792
   250ec:	01400174 	movhi	r5,5
   250f0:	2951e804 	addi	r5,r5,18336
   250f4:	1809883a 	mov	r4,r3
   250f8:	00461000 	call	46100 <fprintf>
   250fc:	0045fd40 	call	45fd4 <abort>
    if ((offset + count - 1) >> 5 == offset >> 5) {
   25100:	e0fffe17 	ldw	r3,-8(fp)
   25104:	e0bfff17 	ldw	r2,-4(fp)
   25108:	1885883a 	add	r2,r3,r2
   2510c:	10bfffc4 	addi	r2,r2,-1
   25110:	1006d17a 	srli	r3,r2,5
   25114:	e0bffe17 	ldw	r2,-8(fp)
   25118:	1004d17a 	srli	r2,r2,5
   2511c:	1880051e 	bne	r3,r2,25134 <secp256k1_scalar_get_bits_var+0xe0>
        return secp256k1_scalar_get_bits(a, offset, count);
   25120:	e1bfff17 	ldw	r6,-4(fp)
   25124:	e17ffe17 	ldw	r5,-8(fp)
   25128:	e13ffd17 	ldw	r4,-12(fp)
   2512c:	0024f8c0 	call	24f8c <secp256k1_scalar_get_bits>
   25130:	00003006 	br	251f4 <secp256k1_scalar_get_bits_var+0x1a0>
    } else {
        VERIFY_CHECK((offset >> 5) + 1 < 8);
   25134:	e0bffe17 	ldw	r2,-8(fp)
   25138:	1004d17a 	srli	r2,r2,5
   2513c:	10800044 	addi	r2,r2,1
   25140:	10800228 	cmpgeui	r2,r2,8
   25144:	10803fcc 	andi	r2,r2,255
   25148:	10000d26 	beq	r2,zero,25180 <secp256k1_scalar_get_bits_var+0x12c>
   2514c:	d0a01617 	ldw	r2,-32680(gp)
   25150:	10c00317 	ldw	r3,12(r2)
   25154:	00800174 	movhi	r2,5
   25158:	10967204 	addi	r2,r2,22984
   2515c:	d8800015 	stw	r2,0(sp)
   25160:	01c01184 	movi	r7,70
   25164:	01800174 	movhi	r6,5
   25168:	31964204 	addi	r6,r6,22792
   2516c:	01400174 	movhi	r5,5
   25170:	2951e804 	addi	r5,r5,18336
   25174:	1809883a 	mov	r4,r3
   25178:	00461000 	call	46100 <fprintf>
   2517c:	0045fd40 	call	45fd4 <abort>
        return ((a->d[offset >> 5] >> (offset & 0x1F)) | (a->d[(offset >> 5) + 1] << (32 - (offset & 0x1F)))) & ((((uint32_t)1) << count) - 1);
   25180:	e0bffe17 	ldw	r2,-8(fp)
   25184:	1004d17a 	srli	r2,r2,5
   25188:	e0fffd17 	ldw	r3,-12(fp)
   2518c:	1085883a 	add	r2,r2,r2
   25190:	1085883a 	add	r2,r2,r2
   25194:	1885883a 	add	r2,r3,r2
   25198:	10c00017 	ldw	r3,0(r2)
   2519c:	e0bffe17 	ldw	r2,-8(fp)
   251a0:	108007cc 	andi	r2,r2,31
   251a4:	1886d83a 	srl	r3,r3,r2
   251a8:	e0bffe17 	ldw	r2,-8(fp)
   251ac:	1004d17a 	srli	r2,r2,5
   251b0:	10800044 	addi	r2,r2,1
   251b4:	e13ffd17 	ldw	r4,-12(fp)
   251b8:	1085883a 	add	r2,r2,r2
   251bc:	1085883a 	add	r2,r2,r2
   251c0:	2085883a 	add	r2,r4,r2
   251c4:	11000017 	ldw	r4,0(r2)
   251c8:	e0bffe17 	ldw	r2,-8(fp)
   251cc:	108007cc 	andi	r2,r2,31
   251d0:	01400804 	movi	r5,32
   251d4:	2885c83a 	sub	r2,r5,r2
   251d8:	2084983a 	sll	r2,r4,r2
   251dc:	1886b03a 	or	r3,r3,r2
   251e0:	01000044 	movi	r4,1
   251e4:	e0bfff17 	ldw	r2,-4(fp)
   251e8:	2084983a 	sll	r2,r4,r2
   251ec:	10bfffc4 	addi	r2,r2,-1
   251f0:	1884703a 	and	r2,r3,r2
    }
}
   251f4:	e037883a 	mov	sp,fp
   251f8:	dfc00117 	ldw	ra,4(sp)
   251fc:	df000017 	ldw	fp,0(sp)
   25200:	dec00204 	addi	sp,sp,8
   25204:	f800283a 	ret

00025208 <secp256k1_scalar_check_overflow>:

SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {
   25208:	defffc04 	addi	sp,sp,-16
   2520c:	df000315 	stw	fp,12(sp)
   25210:	df000304 	addi	fp,sp,12
   25214:	e13fff15 	stw	r4,-4(fp)
    int yes = 0;
   25218:	e03ffd15 	stw	zero,-12(fp)
    int no = 0;
   2521c:	e03ffe15 	stw	zero,-8(fp)
    no |= (a->d[7] < SECP256K1_N_7); /* No need for a > check. */
   25220:	e0bfff17 	ldw	r2,-4(fp)
   25224:	10800717 	ldw	r2,28(r2)
   25228:	10bfffd8 	cmpnei	r2,r2,-1
   2522c:	10803fcc 	andi	r2,r2,255
   25230:	e0fffe17 	ldw	r3,-8(fp)
   25234:	1884b03a 	or	r2,r3,r2
   25238:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[6] < SECP256K1_N_6); /* No need for a > check. */
   2523c:	e0bfff17 	ldw	r2,-4(fp)
   25240:	10800617 	ldw	r2,24(r2)
   25244:	10bfffd8 	cmpnei	r2,r2,-1
   25248:	10803fcc 	andi	r2,r2,255
   2524c:	e0fffe17 	ldw	r3,-8(fp)
   25250:	1884b03a 	or	r2,r3,r2
   25254:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[5] < SECP256K1_N_5); /* No need for a > check. */
   25258:	e0bfff17 	ldw	r2,-4(fp)
   2525c:	10800517 	ldw	r2,20(r2)
   25260:	10bfffd8 	cmpnei	r2,r2,-1
   25264:	10803fcc 	andi	r2,r2,255
   25268:	e0fffe17 	ldw	r3,-8(fp)
   2526c:	1884b03a 	or	r2,r3,r2
   25270:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[4] < SECP256K1_N_4);
   25274:	e0bfff17 	ldw	r2,-4(fp)
   25278:	10800417 	ldw	r2,16(r2)
   2527c:	00ffff44 	movi	r3,-3
   25280:	1885403a 	cmpgeu	r2,r3,r2
   25284:	10803fcc 	andi	r2,r2,255
   25288:	e0fffe17 	ldw	r3,-8(fp)
   2528c:	1884b03a 	or	r2,r3,r2
   25290:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[4] > SECP256K1_N_4) & ~no;
   25294:	e0bfff17 	ldw	r2,-4(fp)
   25298:	10800417 	ldw	r2,16(r2)
   2529c:	10bfffe0 	cmpeqi	r2,r2,-1
   252a0:	10c03fcc 	andi	r3,r2,255
   252a4:	e0bffe17 	ldw	r2,-8(fp)
   252a8:	0084303a 	nor	r2,zero,r2
   252ac:	1884703a 	and	r2,r3,r2
   252b0:	e0fffd17 	ldw	r3,-12(fp)
   252b4:	1884b03a 	or	r2,r3,r2
   252b8:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[3] < SECP256K1_N_3) & ~yes;
   252bc:	e0bfff17 	ldw	r2,-4(fp)
   252c0:	10c00317 	ldw	r3,12(r2)
   252c4:	00aeabf4 	movhi	r2,47791
   252c8:	10b73944 	addi	r2,r2,-8987
   252cc:	10c5403a 	cmpgeu	r2,r2,r3
   252d0:	10c03fcc 	andi	r3,r2,255
   252d4:	e0bffd17 	ldw	r2,-12(fp)
   252d8:	0084303a 	nor	r2,zero,r2
   252dc:	1884703a 	and	r2,r3,r2
   252e0:	e0fffe17 	ldw	r3,-8(fp)
   252e4:	1884b03a 	or	r2,r3,r2
   252e8:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[3] > SECP256K1_N_3) & ~no;
   252ec:	e0bfff17 	ldw	r2,-4(fp)
   252f0:	10c00317 	ldw	r3,12(r2)
   252f4:	00aeabf4 	movhi	r2,47791
   252f8:	10b73984 	addi	r2,r2,-8986
   252fc:	10c5803a 	cmpltu	r2,r2,r3
   25300:	10c03fcc 	andi	r3,r2,255
   25304:	e0bffe17 	ldw	r2,-8(fp)
   25308:	0084303a 	nor	r2,zero,r2
   2530c:	1884703a 	and	r2,r3,r2
   25310:	e0fffd17 	ldw	r3,-12(fp)
   25314:	1884b03a 	or	r2,r3,r2
   25318:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[2] < SECP256K1_N_2) & ~yes;
   2531c:	e0bfff17 	ldw	r2,-4(fp)
   25320:	10c00217 	ldw	r3,8(r2)
   25324:	00abd274 	movhi	r2,44873
   25328:	10a80e84 	addi	r2,r2,-24518
   2532c:	10c5403a 	cmpgeu	r2,r2,r3
   25330:	10c03fcc 	andi	r3,r2,255
   25334:	e0bffd17 	ldw	r2,-12(fp)
   25338:	0084303a 	nor	r2,zero,r2
   2533c:	1884703a 	and	r2,r3,r2
   25340:	e0fffe17 	ldw	r3,-8(fp)
   25344:	1884b03a 	or	r2,r3,r2
   25348:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[2] > SECP256K1_N_2) & ~no;
   2534c:	e0bfff17 	ldw	r2,-4(fp)
   25350:	10c00217 	ldw	r3,8(r2)
   25354:	00abd274 	movhi	r2,44873
   25358:	10a80ec4 	addi	r2,r2,-24517
   2535c:	10c5803a 	cmpltu	r2,r2,r3
   25360:	10c03fcc 	andi	r3,r2,255
   25364:	e0bffe17 	ldw	r2,-8(fp)
   25368:	0084303a 	nor	r2,zero,r2
   2536c:	1884703a 	and	r2,r3,r2
   25370:	e0fffd17 	ldw	r3,-12(fp)
   25374:	1884b03a 	or	r2,r3,r2
   25378:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[1] < SECP256K1_N_1) & ~yes;
   2537c:	e0bfff17 	ldw	r2,-4(fp)
   25380:	10c00117 	ldw	r3,4(r2)
   25384:	00aff4b4 	movhi	r2,49106
   25388:	1097a2c4 	addi	r2,r2,24203
   2538c:	10c5403a 	cmpgeu	r2,r2,r3
   25390:	10c03fcc 	andi	r3,r2,255
   25394:	e0bffd17 	ldw	r2,-12(fp)
   25398:	0084303a 	nor	r2,zero,r2
   2539c:	1884703a 	and	r2,r3,r2
   253a0:	e0fffe17 	ldw	r3,-8(fp)
   253a4:	1884b03a 	or	r2,r3,r2
   253a8:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[1] > SECP256K1_N_1) & ~no;
   253ac:	e0bfff17 	ldw	r2,-4(fp)
   253b0:	10c00117 	ldw	r3,4(r2)
   253b4:	00aff4b4 	movhi	r2,49106
   253b8:	1097a304 	addi	r2,r2,24204
   253bc:	10c5803a 	cmpltu	r2,r2,r3
   253c0:	10c03fcc 	andi	r3,r2,255
   253c4:	e0bffe17 	ldw	r2,-8(fp)
   253c8:	0084303a 	nor	r2,zero,r2
   253cc:	1884703a 	and	r2,r3,r2
   253d0:	e0fffd17 	ldw	r3,-12(fp)
   253d4:	1884b03a 	or	r2,r3,r2
   253d8:	e0bffd15 	stw	r2,-12(fp)
    yes |= (a->d[0] >= SECP256K1_N_0) & ~no;
   253dc:	e0bfff17 	ldw	r2,-4(fp)
   253e0:	10c00017 	ldw	r3,0(r2)
   253e4:	00b40db4 	movhi	r2,53302
   253e8:	10905004 	addi	r2,r2,16704
   253ec:	10c5803a 	cmpltu	r2,r2,r3
   253f0:	10c03fcc 	andi	r3,r2,255
   253f4:	e0bffe17 	ldw	r2,-8(fp)
   253f8:	0084303a 	nor	r2,zero,r2
   253fc:	1884703a 	and	r2,r3,r2
   25400:	e0fffd17 	ldw	r3,-12(fp)
   25404:	1884b03a 	or	r2,r3,r2
   25408:	e0bffd15 	stw	r2,-12(fp)
    return yes;
   2540c:	e0bffd17 	ldw	r2,-12(fp)
}
   25410:	e037883a 	mov	sp,fp
   25414:	df000017 	ldw	fp,0(sp)
   25418:	dec00104 	addi	sp,sp,4
   2541c:	f800283a 	ret

00025420 <secp256k1_scalar_reduce>:

SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, uint32_t overflow) {
   25420:	deffdf04 	addi	sp,sp,-132
   25424:	dfc02015 	stw	ra,128(sp)
   25428:	df001f15 	stw	fp,124(sp)
   2542c:	ddc01e15 	stw	r23,120(sp)
   25430:	dd801d15 	stw	r22,116(sp)
   25434:	dd401c15 	stw	r21,112(sp)
   25438:	dd001b15 	stw	r20,108(sp)
   2543c:	dcc01a15 	stw	r19,104(sp)
   25440:	dc801915 	stw	r18,100(sp)
   25444:	dc401815 	stw	r17,96(sp)
   25448:	dc001715 	stw	r16,92(sp)
   2544c:	df001f04 	addi	fp,sp,124
   25450:	e13fe415 	stw	r4,-112(fp)
   25454:	e17fe515 	stw	r5,-108(fp)
    uint64_t t;
    VERIFY_CHECK(overflow <= 1);
   25458:	e0bfe517 	ldw	r2,-108(fp)
   2545c:	108000a8 	cmpgeui	r2,r2,2
   25460:	10803fcc 	andi	r2,r2,255
   25464:	10000d26 	beq	r2,zero,2549c <secp256k1_scalar_reduce+0x7c>
   25468:	d0a01617 	ldw	r2,-32680(gp)
   2546c:	10c00317 	ldw	r3,12(r2)
   25470:	00800174 	movhi	r2,5
   25474:	10967e04 	addi	r2,r2,23032
   25478:	d8800015 	stw	r2,0(sp)
   2547c:	01c017c4 	movi	r7,95
   25480:	01800174 	movhi	r6,5
   25484:	31964204 	addi	r6,r6,22792
   25488:	01400174 	movhi	r5,5
   2548c:	2951e804 	addi	r5,r5,18336
   25490:	1809883a 	mov	r4,r3
   25494:	00461000 	call	46100 <fprintf>
   25498:	0045fd40 	call	45fd4 <abort>
    t = (uint64_t)r->d[0] + overflow * SECP256K1_N_C_0;
   2549c:	e0bfe417 	ldw	r2,-112(fp)
   254a0:	10800017 	ldw	r2,0(r2)
   254a4:	e0bfe615 	stw	r2,-104(fp)
   254a8:	e03fe715 	stw	zero,-100(fp)
   254ac:	014bf2b4 	movhi	r5,12234
   254b0:	296fafc4 	addi	r5,r5,-16705
   254b4:	e13fe517 	ldw	r4,-108(fp)
   254b8:	0043af40 	call	43af4 <__mulsi3>
   254bc:	e0bfe815 	stw	r2,-96(fp)
   254c0:	e03fe915 	stw	zero,-92(fp)
   254c4:	e13fe617 	ldw	r4,-104(fp)
   254c8:	e17fe817 	ldw	r5,-96(fp)
   254cc:	2145883a 	add	r2,r4,r5
   254d0:	e1bfe617 	ldw	r6,-104(fp)
   254d4:	1189803a 	cmpltu	r4,r2,r6
   254d8:	e1ffe717 	ldw	r7,-100(fp)
   254dc:	e17fe917 	ldw	r5,-92(fp)
   254e0:	3947883a 	add	r3,r7,r5
   254e4:	20c9883a 	add	r4,r4,r3
   254e8:	2007883a 	mov	r3,r4
   254ec:	e0bfe215 	stw	r2,-120(fp)
   254f0:	e0ffe315 	stw	r3,-116(fp)
    r->d[0] = t & 0xFFFFFFFFUL; t >>= 32;
   254f4:	e0ffe217 	ldw	r3,-120(fp)
   254f8:	e0bfe417 	ldw	r2,-112(fp)
   254fc:	10c00015 	stw	r3,0(r2)
   25500:	e0bfe317 	ldw	r2,-116(fp)
   25504:	1004d83a 	srl	r2,r2,zero
   25508:	e0bfe215 	stw	r2,-120(fp)
   2550c:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[1] + overflow * SECP256K1_N_C_1;
   25510:	e0bfe417 	ldw	r2,-112(fp)
   25514:	10800117 	ldw	r2,4(r2)
   25518:	1021883a 	mov	r16,r2
   2551c:	0023883a 	mov	r17,zero
   25520:	01500bb4 	movhi	r5,16430
   25524:	29685cc4 	addi	r5,r5,-24205
   25528:	e13fe517 	ldw	r4,-108(fp)
   2552c:	0043af40 	call	43af4 <__mulsi3>
   25530:	e0bfea15 	stw	r2,-88(fp)
   25534:	e03feb15 	stw	zero,-84(fp)
   25538:	e1bfea17 	ldw	r6,-88(fp)
   2553c:	8185883a 	add	r2,r16,r6
   25540:	1409803a 	cmpltu	r4,r2,r16
   25544:	e1ffeb17 	ldw	r7,-84(fp)
   25548:	89c7883a 	add	r3,r17,r7
   2554c:	20c9883a 	add	r4,r4,r3
   25550:	2007883a 	mov	r3,r4
   25554:	100d883a 	mov	r6,r2
   25558:	180f883a 	mov	r7,r3
   2555c:	e13fe217 	ldw	r4,-120(fp)
   25560:	e17fe317 	ldw	r5,-116(fp)
   25564:	2185883a 	add	r2,r4,r6
   25568:	1111803a 	cmpltu	r8,r2,r4
   2556c:	29c7883a 	add	r3,r5,r7
   25570:	40c9883a 	add	r4,r8,r3
   25574:	2007883a 	mov	r3,r4
   25578:	e0bfe215 	stw	r2,-120(fp)
   2557c:	e0ffe315 	stw	r3,-116(fp)
    r->d[1] = t & 0xFFFFFFFFUL; t >>= 32;
   25580:	e0ffe217 	ldw	r3,-120(fp)
   25584:	e0bfe417 	ldw	r2,-112(fp)
   25588:	10c00115 	stw	r3,4(r2)
   2558c:	e0bfe317 	ldw	r2,-116(fp)
   25590:	1004d83a 	srl	r2,r2,zero
   25594:	e0bfe215 	stw	r2,-120(fp)
   25598:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[2] + overflow * SECP256K1_N_C_2;
   2559c:	e0bfe417 	ldw	r2,-112(fp)
   255a0:	10800217 	ldw	r2,8(r2)
   255a4:	102d883a 	mov	r22,r2
   255a8:	002f883a 	mov	r23,zero
   255ac:	01542df4 	movhi	r5,20663
   255b0:	2957f104 	addi	r5,r5,24516
   255b4:	e13fe517 	ldw	r4,-108(fp)
   255b8:	0043af40 	call	43af4 <__mulsi3>
   255bc:	e0bfec15 	stw	r2,-80(fp)
   255c0:	e03fed15 	stw	zero,-76(fp)
   255c4:	e13fec17 	ldw	r4,-80(fp)
   255c8:	b105883a 	add	r2,r22,r4
   255cc:	1589803a 	cmpltu	r4,r2,r22
   255d0:	e17fed17 	ldw	r5,-76(fp)
   255d4:	b947883a 	add	r3,r23,r5
   255d8:	20c9883a 	add	r4,r4,r3
   255dc:	2007883a 	mov	r3,r4
   255e0:	100d883a 	mov	r6,r2
   255e4:	180f883a 	mov	r7,r3
   255e8:	e13fe217 	ldw	r4,-120(fp)
   255ec:	e17fe317 	ldw	r5,-116(fp)
   255f0:	2185883a 	add	r2,r4,r6
   255f4:	1111803a 	cmpltu	r8,r2,r4
   255f8:	29c7883a 	add	r3,r5,r7
   255fc:	40c9883a 	add	r4,r8,r3
   25600:	2007883a 	mov	r3,r4
   25604:	e0bfe215 	stw	r2,-120(fp)
   25608:	e0ffe315 	stw	r3,-116(fp)
    r->d[2] = t & 0xFFFFFFFFUL; t >>= 32;
   2560c:	e0ffe217 	ldw	r3,-120(fp)
   25610:	e0bfe417 	ldw	r2,-112(fp)
   25614:	10c00215 	stw	r3,8(r2)
   25618:	e0bfe317 	ldw	r2,-116(fp)
   2561c:	1004d83a 	srl	r2,r2,zero
   25620:	e0bfe215 	stw	r2,-120(fp)
   25624:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[3] + overflow * SECP256K1_N_C_3;
   25628:	e0bfe417 	ldw	r2,-112(fp)
   2562c:	10800317 	ldw	r2,12(r2)
   25630:	1029883a 	mov	r20,r2
   25634:	002b883a 	mov	r21,zero
   25638:	01515474 	movhi	r5,17745
   2563c:	2948c644 	addi	r5,r5,8985
   25640:	e13fe517 	ldw	r4,-108(fp)
   25644:	0043af40 	call	43af4 <__mulsi3>
   25648:	e0bfee15 	stw	r2,-72(fp)
   2564c:	e03fef15 	stw	zero,-68(fp)
   25650:	e1bfee17 	ldw	r6,-72(fp)
   25654:	a185883a 	add	r2,r20,r6
   25658:	1509803a 	cmpltu	r4,r2,r20
   2565c:	e1ffef17 	ldw	r7,-68(fp)
   25660:	a9c7883a 	add	r3,r21,r7
   25664:	20c9883a 	add	r4,r4,r3
   25668:	2007883a 	mov	r3,r4
   2566c:	100d883a 	mov	r6,r2
   25670:	180f883a 	mov	r7,r3
   25674:	e13fe217 	ldw	r4,-120(fp)
   25678:	e17fe317 	ldw	r5,-116(fp)
   2567c:	2185883a 	add	r2,r4,r6
   25680:	1111803a 	cmpltu	r8,r2,r4
   25684:	29c7883a 	add	r3,r5,r7
   25688:	40c9883a 	add	r4,r8,r3
   2568c:	2007883a 	mov	r3,r4
   25690:	e0bfe215 	stw	r2,-120(fp)
   25694:	e0ffe315 	stw	r3,-116(fp)
    r->d[3] = t & 0xFFFFFFFFUL; t >>= 32;
   25698:	e0ffe217 	ldw	r3,-120(fp)
   2569c:	e0bfe417 	ldw	r2,-112(fp)
   256a0:	10c00315 	stw	r3,12(r2)
   256a4:	e0bfe317 	ldw	r2,-116(fp)
   256a8:	1004d83a 	srl	r2,r2,zero
   256ac:	e0bfe215 	stw	r2,-120(fp)
   256b0:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[4] + overflow * SECP256K1_N_C_4;
   256b4:	e0bfe417 	ldw	r2,-112(fp)
   256b8:	10800417 	ldw	r2,16(r2)
   256bc:	1025883a 	mov	r18,r2
   256c0:	0027883a 	mov	r19,zero
   256c4:	e0bfe517 	ldw	r2,-108(fp)
   256c8:	e0bff015 	stw	r2,-64(fp)
   256cc:	e03ff115 	stw	zero,-60(fp)
   256d0:	e13ff017 	ldw	r4,-64(fp)
   256d4:	9105883a 	add	r2,r18,r4
   256d8:	1489803a 	cmpltu	r4,r2,r18
   256dc:	e17ff117 	ldw	r5,-60(fp)
   256e0:	9947883a 	add	r3,r19,r5
   256e4:	20c9883a 	add	r4,r4,r3
   256e8:	2007883a 	mov	r3,r4
   256ec:	100d883a 	mov	r6,r2
   256f0:	180f883a 	mov	r7,r3
   256f4:	e13fe217 	ldw	r4,-120(fp)
   256f8:	e17fe317 	ldw	r5,-116(fp)
   256fc:	2185883a 	add	r2,r4,r6
   25700:	1111803a 	cmpltu	r8,r2,r4
   25704:	29c7883a 	add	r3,r5,r7
   25708:	40c9883a 	add	r4,r8,r3
   2570c:	2007883a 	mov	r3,r4
   25710:	e0bfe215 	stw	r2,-120(fp)
   25714:	e0ffe315 	stw	r3,-116(fp)
    r->d[4] = t & 0xFFFFFFFFUL; t >>= 32;
   25718:	e0ffe217 	ldw	r3,-120(fp)
   2571c:	e0bfe417 	ldw	r2,-112(fp)
   25720:	10c00415 	stw	r3,16(r2)
   25724:	e0bfe317 	ldw	r2,-116(fp)
   25728:	1004d83a 	srl	r2,r2,zero
   2572c:	e0bfe215 	stw	r2,-120(fp)
   25730:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[5];
   25734:	e0bfe417 	ldw	r2,-112(fp)
   25738:	10800517 	ldw	r2,20(r2)
   2573c:	e0bff215 	stw	r2,-56(fp)
   25740:	e03ff315 	stw	zero,-52(fp)
   25744:	e13fe217 	ldw	r4,-120(fp)
   25748:	e17fe317 	ldw	r5,-116(fp)
   2574c:	e1bff217 	ldw	r6,-56(fp)
   25750:	2185883a 	add	r2,r4,r6
   25754:	110d803a 	cmpltu	r6,r2,r4
   25758:	e1fff317 	ldw	r7,-52(fp)
   2575c:	29c7883a 	add	r3,r5,r7
   25760:	30c9883a 	add	r4,r6,r3
   25764:	2007883a 	mov	r3,r4
   25768:	e0bfe215 	stw	r2,-120(fp)
   2576c:	e0ffe315 	stw	r3,-116(fp)
    r->d[5] = t & 0xFFFFFFFFUL; t >>= 32;
   25770:	e0ffe217 	ldw	r3,-120(fp)
   25774:	e0bfe417 	ldw	r2,-112(fp)
   25778:	10c00515 	stw	r3,20(r2)
   2577c:	e0bfe317 	ldw	r2,-116(fp)
   25780:	1004d83a 	srl	r2,r2,zero
   25784:	e0bfe215 	stw	r2,-120(fp)
   25788:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[6];
   2578c:	e0bfe417 	ldw	r2,-112(fp)
   25790:	10800617 	ldw	r2,24(r2)
   25794:	e0bff415 	stw	r2,-48(fp)
   25798:	e03ff515 	stw	zero,-44(fp)
   2579c:	e13fe217 	ldw	r4,-120(fp)
   257a0:	e17fe317 	ldw	r5,-116(fp)
   257a4:	e1bff417 	ldw	r6,-48(fp)
   257a8:	2185883a 	add	r2,r4,r6
   257ac:	110d803a 	cmpltu	r6,r2,r4
   257b0:	e1fff517 	ldw	r7,-44(fp)
   257b4:	29c7883a 	add	r3,r5,r7
   257b8:	30c9883a 	add	r4,r6,r3
   257bc:	2007883a 	mov	r3,r4
   257c0:	e0bfe215 	stw	r2,-120(fp)
   257c4:	e0ffe315 	stw	r3,-116(fp)
    r->d[6] = t & 0xFFFFFFFFUL; t >>= 32;
   257c8:	e0ffe217 	ldw	r3,-120(fp)
   257cc:	e0bfe417 	ldw	r2,-112(fp)
   257d0:	10c00615 	stw	r3,24(r2)
   257d4:	e0bfe317 	ldw	r2,-116(fp)
   257d8:	1004d83a 	srl	r2,r2,zero
   257dc:	e0bfe215 	stw	r2,-120(fp)
   257e0:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[7];
   257e4:	e0bfe417 	ldw	r2,-112(fp)
   257e8:	10800717 	ldw	r2,28(r2)
   257ec:	e0bff615 	stw	r2,-40(fp)
   257f0:	e03ff715 	stw	zero,-36(fp)
   257f4:	e13fe217 	ldw	r4,-120(fp)
   257f8:	e17fe317 	ldw	r5,-116(fp)
   257fc:	e1bff617 	ldw	r6,-40(fp)
   25800:	2185883a 	add	r2,r4,r6
   25804:	110d803a 	cmpltu	r6,r2,r4
   25808:	e1fff717 	ldw	r7,-36(fp)
   2580c:	29c7883a 	add	r3,r5,r7
   25810:	30c9883a 	add	r4,r6,r3
   25814:	2007883a 	mov	r3,r4
   25818:	e0bfe215 	stw	r2,-120(fp)
   2581c:	e0ffe315 	stw	r3,-116(fp)
    r->d[7] = t & 0xFFFFFFFFUL;
   25820:	e0ffe217 	ldw	r3,-120(fp)
   25824:	e0bfe417 	ldw	r2,-112(fp)
   25828:	10c00715 	stw	r3,28(r2)
    return overflow;
   2582c:	e0bfe517 	ldw	r2,-108(fp)
}
   25830:	e6fff804 	addi	sp,fp,-32
   25834:	dfc00917 	ldw	ra,36(sp)
   25838:	df000817 	ldw	fp,32(sp)
   2583c:	ddc00717 	ldw	r23,28(sp)
   25840:	dd800617 	ldw	r22,24(sp)
   25844:	dd400517 	ldw	r21,20(sp)
   25848:	dd000417 	ldw	r20,16(sp)
   2584c:	dcc00317 	ldw	r19,12(sp)
   25850:	dc800217 	ldw	r18,8(sp)
   25854:	dc400117 	ldw	r17,4(sp)
   25858:	dc000017 	ldw	r16,0(sp)
   2585c:	dec00a04 	addi	sp,sp,40
   25860:	f800283a 	ret

00025864 <secp256k1_scalar_add>:

static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {
   25864:	deffe004 	addi	sp,sp,-128
   25868:	dfc01f15 	stw	ra,124(sp)
   2586c:	df001e15 	stw	fp,120(sp)
   25870:	dd801d15 	stw	r22,116(sp)
   25874:	dd401c15 	stw	r21,112(sp)
   25878:	dd001b15 	stw	r20,108(sp)
   2587c:	dcc01a15 	stw	r19,104(sp)
   25880:	dc801915 	stw	r18,100(sp)
   25884:	dc401815 	stw	r17,96(sp)
   25888:	dc001715 	stw	r16,92(sp)
   2588c:	df001e04 	addi	fp,sp,120
   25890:	e13fe615 	stw	r4,-104(fp)
   25894:	e17fe715 	stw	r5,-100(fp)
   25898:	e1bfe815 	stw	r6,-96(fp)
    int overflow;
    uint64_t t = (uint64_t)a->d[0] + b->d[0];
   2589c:	e0bfe717 	ldw	r2,-100(fp)
   258a0:	10800017 	ldw	r2,0(r2)
   258a4:	100f883a 	mov	r7,r2
   258a8:	0011883a 	mov	r8,zero
   258ac:	e0bfe817 	ldw	r2,-96(fp)
   258b0:	10800017 	ldw	r2,0(r2)
   258b4:	1013883a 	mov	r9,r2
   258b8:	0015883a 	mov	r10,zero
   258bc:	3a45883a 	add	r2,r7,r9
   258c0:	11c9803a 	cmpltu	r4,r2,r7
   258c4:	4287883a 	add	r3,r8,r10
   258c8:	20c9883a 	add	r4,r4,r3
   258cc:	2007883a 	mov	r3,r4
   258d0:	e0bfe315 	stw	r2,-116(fp)
   258d4:	e0ffe415 	stw	r3,-112(fp)
    r->d[0] = t & 0xFFFFFFFFULL; t >>= 32;
   258d8:	e0ffe317 	ldw	r3,-116(fp)
   258dc:	e0bfe617 	ldw	r2,-104(fp)
   258e0:	10c00015 	stw	r3,0(r2)
   258e4:	e0bfe417 	ldw	r2,-112(fp)
   258e8:	1004d83a 	srl	r2,r2,zero
   258ec:	e0bfe315 	stw	r2,-116(fp)
   258f0:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[1] + b->d[1];
   258f4:	e0bfe717 	ldw	r2,-100(fp)
   258f8:	10800117 	ldw	r2,4(r2)
   258fc:	1017883a 	mov	r11,r2
   25900:	0019883a 	mov	r12,zero
   25904:	e0bfe817 	ldw	r2,-96(fp)
   25908:	10800117 	ldw	r2,4(r2)
   2590c:	101b883a 	mov	r13,r2
   25910:	001d883a 	mov	r14,zero
   25914:	5b45883a 	add	r2,r11,r13
   25918:	12c9803a 	cmpltu	r4,r2,r11
   2591c:	6387883a 	add	r3,r12,r14
   25920:	20c9883a 	add	r4,r4,r3
   25924:	2007883a 	mov	r3,r4
   25928:	100f883a 	mov	r7,r2
   2592c:	1811883a 	mov	r8,r3
   25930:	e13fe317 	ldw	r4,-116(fp)
   25934:	e17fe417 	ldw	r5,-112(fp)
   25938:	21c5883a 	add	r2,r4,r7
   2593c:	110d803a 	cmpltu	r6,r2,r4
   25940:	2a07883a 	add	r3,r5,r8
   25944:	30c9883a 	add	r4,r6,r3
   25948:	2007883a 	mov	r3,r4
   2594c:	e0bfe315 	stw	r2,-116(fp)
   25950:	e0ffe415 	stw	r3,-112(fp)
    r->d[1] = t & 0xFFFFFFFFULL; t >>= 32;
   25954:	e0ffe317 	ldw	r3,-116(fp)
   25958:	e0bfe617 	ldw	r2,-104(fp)
   2595c:	10c00115 	stw	r3,4(r2)
   25960:	e0bfe417 	ldw	r2,-112(fp)
   25964:	1004d83a 	srl	r2,r2,zero
   25968:	e0bfe315 	stw	r2,-116(fp)
   2596c:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[2] + b->d[2];
   25970:	e0bfe717 	ldw	r2,-100(fp)
   25974:	10800217 	ldw	r2,8(r2)
   25978:	101f883a 	mov	r15,r2
   2597c:	0021883a 	mov	r16,zero
   25980:	e0bfe817 	ldw	r2,-96(fp)
   25984:	10800217 	ldw	r2,8(r2)
   25988:	e0bfe915 	stw	r2,-92(fp)
   2598c:	e03fea15 	stw	zero,-88(fp)
   25990:	e13fe917 	ldw	r4,-92(fp)
   25994:	7905883a 	add	r2,r15,r4
   25998:	13c9803a 	cmpltu	r4,r2,r15
   2599c:	e17fea17 	ldw	r5,-88(fp)
   259a0:	8147883a 	add	r3,r16,r5
   259a4:	20c9883a 	add	r4,r4,r3
   259a8:	2007883a 	mov	r3,r4
   259ac:	100f883a 	mov	r7,r2
   259b0:	1811883a 	mov	r8,r3
   259b4:	e13fe317 	ldw	r4,-116(fp)
   259b8:	e17fe417 	ldw	r5,-112(fp)
   259bc:	21c5883a 	add	r2,r4,r7
   259c0:	110d803a 	cmpltu	r6,r2,r4
   259c4:	2a07883a 	add	r3,r5,r8
   259c8:	30c9883a 	add	r4,r6,r3
   259cc:	2007883a 	mov	r3,r4
   259d0:	e0bfe315 	stw	r2,-116(fp)
   259d4:	e0ffe415 	stw	r3,-112(fp)
    r->d[2] = t & 0xFFFFFFFFULL; t >>= 32;
   259d8:	e0ffe317 	ldw	r3,-116(fp)
   259dc:	e0bfe617 	ldw	r2,-104(fp)
   259e0:	10c00215 	stw	r3,8(r2)
   259e4:	e0bfe417 	ldw	r2,-112(fp)
   259e8:	1004d83a 	srl	r2,r2,zero
   259ec:	e0bfe315 	stw	r2,-116(fp)
   259f0:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[3] + b->d[3];
   259f4:	e0bfe717 	ldw	r2,-100(fp)
   259f8:	10800317 	ldw	r2,12(r2)
   259fc:	e0bfeb15 	stw	r2,-84(fp)
   25a00:	e03fec15 	stw	zero,-80(fp)
   25a04:	e0bfe817 	ldw	r2,-96(fp)
   25a08:	10800317 	ldw	r2,12(r2)
   25a0c:	e0bfed15 	stw	r2,-76(fp)
   25a10:	e03fee15 	stw	zero,-72(fp)
   25a14:	e1bfeb17 	ldw	r6,-84(fp)
   25a18:	e13fed17 	ldw	r4,-76(fp)
   25a1c:	3105883a 	add	r2,r6,r4
   25a20:	e17feb17 	ldw	r5,-84(fp)
   25a24:	1149803a 	cmpltu	r4,r2,r5
   25a28:	e1bfec17 	ldw	r6,-80(fp)
   25a2c:	e17fee17 	ldw	r5,-72(fp)
   25a30:	3147883a 	add	r3,r6,r5
   25a34:	20c9883a 	add	r4,r4,r3
   25a38:	2007883a 	mov	r3,r4
   25a3c:	100d883a 	mov	r6,r2
   25a40:	180f883a 	mov	r7,r3
   25a44:	e13fe317 	ldw	r4,-116(fp)
   25a48:	e17fe417 	ldw	r5,-112(fp)
   25a4c:	2185883a 	add	r2,r4,r6
   25a50:	1111803a 	cmpltu	r8,r2,r4
   25a54:	29c7883a 	add	r3,r5,r7
   25a58:	40c9883a 	add	r4,r8,r3
   25a5c:	2007883a 	mov	r3,r4
   25a60:	e0bfe315 	stw	r2,-116(fp)
   25a64:	e0ffe415 	stw	r3,-112(fp)
    r->d[3] = t & 0xFFFFFFFFULL; t >>= 32;
   25a68:	e0ffe317 	ldw	r3,-116(fp)
   25a6c:	e0bfe617 	ldw	r2,-104(fp)
   25a70:	10c00315 	stw	r3,12(r2)
   25a74:	e0bfe417 	ldw	r2,-112(fp)
   25a78:	1004d83a 	srl	r2,r2,zero
   25a7c:	e0bfe315 	stw	r2,-116(fp)
   25a80:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[4] + b->d[4];
   25a84:	e0bfe717 	ldw	r2,-100(fp)
   25a88:	10800417 	ldw	r2,16(r2)
   25a8c:	e0bfef15 	stw	r2,-68(fp)
   25a90:	e03ff015 	stw	zero,-64(fp)
   25a94:	e0bfe817 	ldw	r2,-96(fp)
   25a98:	10800417 	ldw	r2,16(r2)
   25a9c:	e0bff115 	stw	r2,-60(fp)
   25aa0:	e03ff215 	stw	zero,-56(fp)
   25aa4:	e1bfef17 	ldw	r6,-68(fp)
   25aa8:	e13ff117 	ldw	r4,-60(fp)
   25aac:	3105883a 	add	r2,r6,r4
   25ab0:	e17fef17 	ldw	r5,-68(fp)
   25ab4:	1149803a 	cmpltu	r4,r2,r5
   25ab8:	e1bff017 	ldw	r6,-64(fp)
   25abc:	e17ff217 	ldw	r5,-56(fp)
   25ac0:	3147883a 	add	r3,r6,r5
   25ac4:	20c9883a 	add	r4,r4,r3
   25ac8:	2007883a 	mov	r3,r4
   25acc:	100d883a 	mov	r6,r2
   25ad0:	180f883a 	mov	r7,r3
   25ad4:	e13fe317 	ldw	r4,-116(fp)
   25ad8:	e17fe417 	ldw	r5,-112(fp)
   25adc:	2185883a 	add	r2,r4,r6
   25ae0:	1111803a 	cmpltu	r8,r2,r4
   25ae4:	29c7883a 	add	r3,r5,r7
   25ae8:	40c9883a 	add	r4,r8,r3
   25aec:	2007883a 	mov	r3,r4
   25af0:	e0bfe315 	stw	r2,-116(fp)
   25af4:	e0ffe415 	stw	r3,-112(fp)
    r->d[4] = t & 0xFFFFFFFFULL; t >>= 32;
   25af8:	e0ffe317 	ldw	r3,-116(fp)
   25afc:	e0bfe617 	ldw	r2,-104(fp)
   25b00:	10c00415 	stw	r3,16(r2)
   25b04:	e0bfe417 	ldw	r2,-112(fp)
   25b08:	1004d83a 	srl	r2,r2,zero
   25b0c:	e0bfe315 	stw	r2,-116(fp)
   25b10:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[5] + b->d[5];
   25b14:	e0bfe717 	ldw	r2,-100(fp)
   25b18:	10800517 	ldw	r2,20(r2)
   25b1c:	102b883a 	mov	r21,r2
   25b20:	002d883a 	mov	r22,zero
   25b24:	e0bfe817 	ldw	r2,-96(fp)
   25b28:	10800517 	ldw	r2,20(r2)
   25b2c:	e0bff315 	stw	r2,-52(fp)
   25b30:	e03ff415 	stw	zero,-48(fp)
   25b34:	e1bff317 	ldw	r6,-52(fp)
   25b38:	a985883a 	add	r2,r21,r6
   25b3c:	1549803a 	cmpltu	r4,r2,r21
   25b40:	e17ff417 	ldw	r5,-48(fp)
   25b44:	b147883a 	add	r3,r22,r5
   25b48:	20c9883a 	add	r4,r4,r3
   25b4c:	2007883a 	mov	r3,r4
   25b50:	100d883a 	mov	r6,r2
   25b54:	180f883a 	mov	r7,r3
   25b58:	e13fe317 	ldw	r4,-116(fp)
   25b5c:	e17fe417 	ldw	r5,-112(fp)
   25b60:	2185883a 	add	r2,r4,r6
   25b64:	1111803a 	cmpltu	r8,r2,r4
   25b68:	29c7883a 	add	r3,r5,r7
   25b6c:	40c9883a 	add	r4,r8,r3
   25b70:	2007883a 	mov	r3,r4
   25b74:	e0bfe315 	stw	r2,-116(fp)
   25b78:	e0ffe415 	stw	r3,-112(fp)
    r->d[5] = t & 0xFFFFFFFFULL; t >>= 32;
   25b7c:	e0ffe317 	ldw	r3,-116(fp)
   25b80:	e0bfe617 	ldw	r2,-104(fp)
   25b84:	10c00515 	stw	r3,20(r2)
   25b88:	e0bfe417 	ldw	r2,-112(fp)
   25b8c:	1004d83a 	srl	r2,r2,zero
   25b90:	e0bfe315 	stw	r2,-116(fp)
   25b94:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[6] + b->d[6];
   25b98:	e0bfe717 	ldw	r2,-100(fp)
   25b9c:	10800617 	ldw	r2,24(r2)
   25ba0:	1027883a 	mov	r19,r2
   25ba4:	0029883a 	mov	r20,zero
   25ba8:	e0bfe817 	ldw	r2,-96(fp)
   25bac:	10800617 	ldw	r2,24(r2)
   25bb0:	e0bff515 	stw	r2,-44(fp)
   25bb4:	e03ff615 	stw	zero,-40(fp)
   25bb8:	e1bff517 	ldw	r6,-44(fp)
   25bbc:	9985883a 	add	r2,r19,r6
   25bc0:	14c9803a 	cmpltu	r4,r2,r19
   25bc4:	e17ff617 	ldw	r5,-40(fp)
   25bc8:	a147883a 	add	r3,r20,r5
   25bcc:	20c9883a 	add	r4,r4,r3
   25bd0:	2007883a 	mov	r3,r4
   25bd4:	100d883a 	mov	r6,r2
   25bd8:	180f883a 	mov	r7,r3
   25bdc:	e13fe317 	ldw	r4,-116(fp)
   25be0:	e17fe417 	ldw	r5,-112(fp)
   25be4:	2185883a 	add	r2,r4,r6
   25be8:	1111803a 	cmpltu	r8,r2,r4
   25bec:	29c7883a 	add	r3,r5,r7
   25bf0:	40c9883a 	add	r4,r8,r3
   25bf4:	2007883a 	mov	r3,r4
   25bf8:	e0bfe315 	stw	r2,-116(fp)
   25bfc:	e0ffe415 	stw	r3,-112(fp)
    r->d[6] = t & 0xFFFFFFFFULL; t >>= 32;
   25c00:	e0ffe317 	ldw	r3,-116(fp)
   25c04:	e0bfe617 	ldw	r2,-104(fp)
   25c08:	10c00615 	stw	r3,24(r2)
   25c0c:	e0bfe417 	ldw	r2,-112(fp)
   25c10:	1004d83a 	srl	r2,r2,zero
   25c14:	e0bfe315 	stw	r2,-116(fp)
   25c18:	e03fe415 	stw	zero,-112(fp)
    t += (uint64_t)a->d[7] + b->d[7];
   25c1c:	e0bfe717 	ldw	r2,-100(fp)
   25c20:	10800717 	ldw	r2,28(r2)
   25c24:	1023883a 	mov	r17,r2
   25c28:	0025883a 	mov	r18,zero
   25c2c:	e0bfe817 	ldw	r2,-96(fp)
   25c30:	10800717 	ldw	r2,28(r2)
   25c34:	e0bff715 	stw	r2,-36(fp)
   25c38:	e03ff815 	stw	zero,-32(fp)
   25c3c:	e1bff717 	ldw	r6,-36(fp)
   25c40:	8985883a 	add	r2,r17,r6
   25c44:	1449803a 	cmpltu	r4,r2,r17
   25c48:	e17ff817 	ldw	r5,-32(fp)
   25c4c:	9147883a 	add	r3,r18,r5
   25c50:	20c9883a 	add	r4,r4,r3
   25c54:	2007883a 	mov	r3,r4
   25c58:	100d883a 	mov	r6,r2
   25c5c:	180f883a 	mov	r7,r3
   25c60:	e13fe317 	ldw	r4,-116(fp)
   25c64:	e17fe417 	ldw	r5,-112(fp)
   25c68:	2185883a 	add	r2,r4,r6
   25c6c:	1111803a 	cmpltu	r8,r2,r4
   25c70:	29c7883a 	add	r3,r5,r7
   25c74:	40c9883a 	add	r4,r8,r3
   25c78:	2007883a 	mov	r3,r4
   25c7c:	e0bfe315 	stw	r2,-116(fp)
   25c80:	e0ffe415 	stw	r3,-112(fp)
    r->d[7] = t & 0xFFFFFFFFULL; t >>= 32;
   25c84:	e0ffe317 	ldw	r3,-116(fp)
   25c88:	e0bfe617 	ldw	r2,-104(fp)
   25c8c:	10c00715 	stw	r3,28(r2)
   25c90:	e0bfe417 	ldw	r2,-112(fp)
   25c94:	1004d83a 	srl	r2,r2,zero
   25c98:	e0bfe315 	stw	r2,-116(fp)
   25c9c:	e03fe415 	stw	zero,-112(fp)
    overflow = t + secp256k1_scalar_check_overflow(r);
   25ca0:	e13fe617 	ldw	r4,-104(fp)
   25ca4:	00252080 	call	25208 <secp256k1_scalar_check_overflow>
   25ca8:	1007883a 	mov	r3,r2
   25cac:	e0bfe317 	ldw	r2,-116(fp)
   25cb0:	1885883a 	add	r2,r3,r2
   25cb4:	e0bfe515 	stw	r2,-108(fp)
    VERIFY_CHECK(overflow == 0 || overflow == 1);
   25cb8:	e0bfe517 	ldw	r2,-108(fp)
   25cbc:	1004c03a 	cmpne	r2,r2,zero
   25cc0:	10803fcc 	andi	r2,r2,255
   25cc4:	10001126 	beq	r2,zero,25d0c <secp256k1_scalar_add+0x4a8>
   25cc8:	e0bfe517 	ldw	r2,-108(fp)
   25ccc:	10800058 	cmpnei	r2,r2,1
   25cd0:	10803fcc 	andi	r2,r2,255
   25cd4:	10000d26 	beq	r2,zero,25d0c <secp256k1_scalar_add+0x4a8>
   25cd8:	d0a01617 	ldw	r2,-32680(gp)
   25cdc:	10c00317 	ldw	r3,12(r2)
   25ce0:	00800174 	movhi	r2,5
   25ce4:	10968804 	addi	r2,r2,23072
   25ce8:	d8800015 	stw	r2,0(sp)
   25cec:	01c02184 	movi	r7,134
   25cf0:	01800174 	movhi	r6,5
   25cf4:	31964204 	addi	r6,r6,22792
   25cf8:	01400174 	movhi	r5,5
   25cfc:	2951e804 	addi	r5,r5,18336
   25d00:	1809883a 	mov	r4,r3
   25d04:	00461000 	call	46100 <fprintf>
   25d08:	0045fd40 	call	45fd4 <abort>
    secp256k1_scalar_reduce(r, overflow);
   25d0c:	e0bfe517 	ldw	r2,-108(fp)
   25d10:	100b883a 	mov	r5,r2
   25d14:	e13fe617 	ldw	r4,-104(fp)
   25d18:	00254200 	call	25420 <secp256k1_scalar_reduce>
    return overflow;
   25d1c:	e0bfe517 	ldw	r2,-108(fp)
}
   25d20:	e6fff904 	addi	sp,fp,-28
   25d24:	dfc00817 	ldw	ra,32(sp)
   25d28:	df000717 	ldw	fp,28(sp)
   25d2c:	dd800617 	ldw	r22,24(sp)
   25d30:	dd400517 	ldw	r21,20(sp)
   25d34:	dd000417 	ldw	r20,16(sp)
   25d38:	dcc00317 	ldw	r19,12(sp)
   25d3c:	dc800217 	ldw	r18,8(sp)
   25d40:	dc400117 	ldw	r17,4(sp)
   25d44:	dc000017 	ldw	r16,0(sp)
   25d48:	dec00904 	addi	sp,sp,36
   25d4c:	f800283a 	ret

00025d50 <secp256k1_scalar_cadd_bit>:

static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {
   25d50:	deffdf04 	addi	sp,sp,-132
   25d54:	dfc02015 	stw	ra,128(sp)
   25d58:	df001f15 	stw	fp,124(sp)
   25d5c:	dd801e15 	stw	r22,120(sp)
   25d60:	dd401d15 	stw	r21,116(sp)
   25d64:	dd001c15 	stw	r20,112(sp)
   25d68:	dcc01b15 	stw	r19,108(sp)
   25d6c:	dc801a15 	stw	r18,104(sp)
   25d70:	dc401915 	stw	r17,100(sp)
   25d74:	dc001815 	stw	r16,96(sp)
   25d78:	df001f04 	addi	fp,sp,124
   25d7c:	e13fe415 	stw	r4,-112(fp)
   25d80:	e17fe515 	stw	r5,-108(fp)
   25d84:	e1bfe615 	stw	r6,-104(fp)
    uint64_t t;
    VERIFY_CHECK(bit < 256);
   25d88:	e0bfe517 	ldw	r2,-108(fp)
   25d8c:	10804028 	cmpgeui	r2,r2,256
   25d90:	10803fcc 	andi	r2,r2,255
   25d94:	10000d26 	beq	r2,zero,25dcc <secp256k1_scalar_cadd_bit+0x7c>
   25d98:	d0a01617 	ldw	r2,-32680(gp)
   25d9c:	10c00317 	ldw	r3,12(r2)
   25da0:	00800174 	movhi	r2,5
   25da4:	10969604 	addi	r2,r2,23128
   25da8:	d8800015 	stw	r2,0(sp)
   25dac:	01c02344 	movi	r7,141
   25db0:	01800174 	movhi	r6,5
   25db4:	31964204 	addi	r6,r6,22792
   25db8:	01400174 	movhi	r5,5
   25dbc:	2951e804 	addi	r5,r5,18336
   25dc0:	1809883a 	mov	r4,r3
   25dc4:	00461000 	call	46100 <fprintf>
   25dc8:	0045fd40 	call	45fd4 <abort>
    bit += ((uint32_t) flag - 1) & 0x100;  /* forcing (bit >> 5) > 7 makes this a noop */
   25dcc:	e0bfe617 	ldw	r2,-104(fp)
   25dd0:	10bfffc4 	addi	r2,r2,-1
   25dd4:	10c0400c 	andi	r3,r2,256
   25dd8:	e0bfe517 	ldw	r2,-108(fp)
   25ddc:	10c5883a 	add	r2,r2,r3
   25de0:	e0bfe515 	stw	r2,-108(fp)
    t = (uint64_t)r->d[0] + (((uint32_t)((bit >> 5) == 0)) << (bit & 0x1F));
   25de4:	e0bfe417 	ldw	r2,-112(fp)
   25de8:	10800017 	ldw	r2,0(r2)
   25dec:	100f883a 	mov	r7,r2
   25df0:	0011883a 	mov	r8,zero
   25df4:	e0bfe517 	ldw	r2,-108(fp)
   25df8:	1004d17a 	srli	r2,r2,5
   25dfc:	1005003a 	cmpeq	r2,r2,zero
   25e00:	10c03fcc 	andi	r3,r2,255
   25e04:	e0bfe517 	ldw	r2,-108(fp)
   25e08:	108007cc 	andi	r2,r2,31
   25e0c:	1884983a 	sll	r2,r3,r2
   25e10:	1013883a 	mov	r9,r2
   25e14:	0015883a 	mov	r10,zero
   25e18:	3a45883a 	add	r2,r7,r9
   25e1c:	11c9803a 	cmpltu	r4,r2,r7
   25e20:	4287883a 	add	r3,r8,r10
   25e24:	20c9883a 	add	r4,r4,r3
   25e28:	2007883a 	mov	r3,r4
   25e2c:	e0bfe215 	stw	r2,-120(fp)
   25e30:	e0ffe315 	stw	r3,-116(fp)
    r->d[0] = t & 0xFFFFFFFFULL; t >>= 32;
   25e34:	e0ffe217 	ldw	r3,-120(fp)
   25e38:	e0bfe417 	ldw	r2,-112(fp)
   25e3c:	10c00015 	stw	r3,0(r2)
   25e40:	e0bfe317 	ldw	r2,-116(fp)
   25e44:	1004d83a 	srl	r2,r2,zero
   25e48:	e0bfe215 	stw	r2,-120(fp)
   25e4c:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[1] + (((uint32_t)((bit >> 5) == 1)) << (bit & 0x1F));
   25e50:	e0bfe417 	ldw	r2,-112(fp)
   25e54:	10800117 	ldw	r2,4(r2)
   25e58:	1017883a 	mov	r11,r2
   25e5c:	0019883a 	mov	r12,zero
   25e60:	e0bfe517 	ldw	r2,-108(fp)
   25e64:	1004d17a 	srli	r2,r2,5
   25e68:	10800060 	cmpeqi	r2,r2,1
   25e6c:	10c03fcc 	andi	r3,r2,255
   25e70:	e0bfe517 	ldw	r2,-108(fp)
   25e74:	108007cc 	andi	r2,r2,31
   25e78:	1884983a 	sll	r2,r3,r2
   25e7c:	101b883a 	mov	r13,r2
   25e80:	001d883a 	mov	r14,zero
   25e84:	5b45883a 	add	r2,r11,r13
   25e88:	12c9803a 	cmpltu	r4,r2,r11
   25e8c:	6387883a 	add	r3,r12,r14
   25e90:	20c9883a 	add	r4,r4,r3
   25e94:	2007883a 	mov	r3,r4
   25e98:	100f883a 	mov	r7,r2
   25e9c:	1811883a 	mov	r8,r3
   25ea0:	e13fe217 	ldw	r4,-120(fp)
   25ea4:	e17fe317 	ldw	r5,-116(fp)
   25ea8:	21c5883a 	add	r2,r4,r7
   25eac:	110d803a 	cmpltu	r6,r2,r4
   25eb0:	2a07883a 	add	r3,r5,r8
   25eb4:	30c9883a 	add	r4,r6,r3
   25eb8:	2007883a 	mov	r3,r4
   25ebc:	e0bfe215 	stw	r2,-120(fp)
   25ec0:	e0ffe315 	stw	r3,-116(fp)
    r->d[1] = t & 0xFFFFFFFFULL; t >>= 32;
   25ec4:	e0ffe217 	ldw	r3,-120(fp)
   25ec8:	e0bfe417 	ldw	r2,-112(fp)
   25ecc:	10c00115 	stw	r3,4(r2)
   25ed0:	e0bfe317 	ldw	r2,-116(fp)
   25ed4:	1004d83a 	srl	r2,r2,zero
   25ed8:	e0bfe215 	stw	r2,-120(fp)
   25edc:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[2] + (((uint32_t)((bit >> 5) == 2)) << (bit & 0x1F));
   25ee0:	e0bfe417 	ldw	r2,-112(fp)
   25ee4:	10800217 	ldw	r2,8(r2)
   25ee8:	101f883a 	mov	r15,r2
   25eec:	0021883a 	mov	r16,zero
   25ef0:	e0bfe517 	ldw	r2,-108(fp)
   25ef4:	1004d17a 	srli	r2,r2,5
   25ef8:	108000a0 	cmpeqi	r2,r2,2
   25efc:	10c03fcc 	andi	r3,r2,255
   25f00:	e0bfe517 	ldw	r2,-108(fp)
   25f04:	108007cc 	andi	r2,r2,31
   25f08:	1884983a 	sll	r2,r3,r2
   25f0c:	e0bfe715 	stw	r2,-100(fp)
   25f10:	e03fe815 	stw	zero,-96(fp)
   25f14:	e13fe717 	ldw	r4,-100(fp)
   25f18:	7905883a 	add	r2,r15,r4
   25f1c:	13c9803a 	cmpltu	r4,r2,r15
   25f20:	e17fe817 	ldw	r5,-96(fp)
   25f24:	8147883a 	add	r3,r16,r5
   25f28:	20c9883a 	add	r4,r4,r3
   25f2c:	2007883a 	mov	r3,r4
   25f30:	100f883a 	mov	r7,r2
   25f34:	1811883a 	mov	r8,r3
   25f38:	e13fe217 	ldw	r4,-120(fp)
   25f3c:	e17fe317 	ldw	r5,-116(fp)
   25f40:	21c5883a 	add	r2,r4,r7
   25f44:	110d803a 	cmpltu	r6,r2,r4
   25f48:	2a07883a 	add	r3,r5,r8
   25f4c:	30c9883a 	add	r4,r6,r3
   25f50:	2007883a 	mov	r3,r4
   25f54:	e0bfe215 	stw	r2,-120(fp)
   25f58:	e0ffe315 	stw	r3,-116(fp)
    r->d[2] = t & 0xFFFFFFFFULL; t >>= 32;
   25f5c:	e0ffe217 	ldw	r3,-120(fp)
   25f60:	e0bfe417 	ldw	r2,-112(fp)
   25f64:	10c00215 	stw	r3,8(r2)
   25f68:	e0bfe317 	ldw	r2,-116(fp)
   25f6c:	1004d83a 	srl	r2,r2,zero
   25f70:	e0bfe215 	stw	r2,-120(fp)
   25f74:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[3] + (((uint32_t)((bit >> 5) == 3)) << (bit & 0x1F));
   25f78:	e0bfe417 	ldw	r2,-112(fp)
   25f7c:	10800317 	ldw	r2,12(r2)
   25f80:	1023883a 	mov	r17,r2
   25f84:	0025883a 	mov	r18,zero
   25f88:	e0bfe517 	ldw	r2,-108(fp)
   25f8c:	1004d17a 	srli	r2,r2,5
   25f90:	108000e0 	cmpeqi	r2,r2,3
   25f94:	10c03fcc 	andi	r3,r2,255
   25f98:	e0bfe517 	ldw	r2,-108(fp)
   25f9c:	108007cc 	andi	r2,r2,31
   25fa0:	1884983a 	sll	r2,r3,r2
   25fa4:	e0bfe915 	stw	r2,-92(fp)
   25fa8:	e03fea15 	stw	zero,-88(fp)
   25fac:	e1bfe917 	ldw	r6,-92(fp)
   25fb0:	8985883a 	add	r2,r17,r6
   25fb4:	1449803a 	cmpltu	r4,r2,r17
   25fb8:	e17fea17 	ldw	r5,-88(fp)
   25fbc:	9147883a 	add	r3,r18,r5
   25fc0:	20c9883a 	add	r4,r4,r3
   25fc4:	2007883a 	mov	r3,r4
   25fc8:	100d883a 	mov	r6,r2
   25fcc:	180f883a 	mov	r7,r3
   25fd0:	e13fe217 	ldw	r4,-120(fp)
   25fd4:	e17fe317 	ldw	r5,-116(fp)
   25fd8:	2185883a 	add	r2,r4,r6
   25fdc:	1111803a 	cmpltu	r8,r2,r4
   25fe0:	29c7883a 	add	r3,r5,r7
   25fe4:	40c9883a 	add	r4,r8,r3
   25fe8:	2007883a 	mov	r3,r4
   25fec:	e0bfe215 	stw	r2,-120(fp)
   25ff0:	e0ffe315 	stw	r3,-116(fp)
    r->d[3] = t & 0xFFFFFFFFULL; t >>= 32;
   25ff4:	e0ffe217 	ldw	r3,-120(fp)
   25ff8:	e0bfe417 	ldw	r2,-112(fp)
   25ffc:	10c00315 	stw	r3,12(r2)
   26000:	e0bfe317 	ldw	r2,-116(fp)
   26004:	1004d83a 	srl	r2,r2,zero
   26008:	e0bfe215 	stw	r2,-120(fp)
   2600c:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[4] + (((uint32_t)((bit >> 5) == 4)) << (bit & 0x1F));
   26010:	e0bfe417 	ldw	r2,-112(fp)
   26014:	10800417 	ldw	r2,16(r2)
   26018:	e0bfeb15 	stw	r2,-84(fp)
   2601c:	e03fec15 	stw	zero,-80(fp)
   26020:	e0bfe517 	ldw	r2,-108(fp)
   26024:	1004d17a 	srli	r2,r2,5
   26028:	10800120 	cmpeqi	r2,r2,4
   2602c:	10c03fcc 	andi	r3,r2,255
   26030:	e0bfe517 	ldw	r2,-108(fp)
   26034:	108007cc 	andi	r2,r2,31
   26038:	1884983a 	sll	r2,r3,r2
   2603c:	e0bfed15 	stw	r2,-76(fp)
   26040:	e03fee15 	stw	zero,-72(fp)
   26044:	e1bfeb17 	ldw	r6,-84(fp)
   26048:	e13fed17 	ldw	r4,-76(fp)
   2604c:	3105883a 	add	r2,r6,r4
   26050:	e17feb17 	ldw	r5,-84(fp)
   26054:	1149803a 	cmpltu	r4,r2,r5
   26058:	e1bfec17 	ldw	r6,-80(fp)
   2605c:	e17fee17 	ldw	r5,-72(fp)
   26060:	3147883a 	add	r3,r6,r5
   26064:	20c9883a 	add	r4,r4,r3
   26068:	2007883a 	mov	r3,r4
   2606c:	100d883a 	mov	r6,r2
   26070:	180f883a 	mov	r7,r3
   26074:	e13fe217 	ldw	r4,-120(fp)
   26078:	e17fe317 	ldw	r5,-116(fp)
   2607c:	2185883a 	add	r2,r4,r6
   26080:	1111803a 	cmpltu	r8,r2,r4
   26084:	29c7883a 	add	r3,r5,r7
   26088:	40c9883a 	add	r4,r8,r3
   2608c:	2007883a 	mov	r3,r4
   26090:	e0bfe215 	stw	r2,-120(fp)
   26094:	e0ffe315 	stw	r3,-116(fp)
    r->d[4] = t & 0xFFFFFFFFULL; t >>= 32;
   26098:	e0ffe217 	ldw	r3,-120(fp)
   2609c:	e0bfe417 	ldw	r2,-112(fp)
   260a0:	10c00415 	stw	r3,16(r2)
   260a4:	e0bfe317 	ldw	r2,-116(fp)
   260a8:	1004d83a 	srl	r2,r2,zero
   260ac:	e0bfe215 	stw	r2,-120(fp)
   260b0:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[5] + (((uint32_t)((bit >> 5) == 5)) << (bit & 0x1F));
   260b4:	e0bfe417 	ldw	r2,-112(fp)
   260b8:	10800517 	ldw	r2,20(r2)
   260bc:	e0bfef15 	stw	r2,-68(fp)
   260c0:	e03ff015 	stw	zero,-64(fp)
   260c4:	e0bfe517 	ldw	r2,-108(fp)
   260c8:	1004d17a 	srli	r2,r2,5
   260cc:	10800160 	cmpeqi	r2,r2,5
   260d0:	10c03fcc 	andi	r3,r2,255
   260d4:	e0bfe517 	ldw	r2,-108(fp)
   260d8:	108007cc 	andi	r2,r2,31
   260dc:	1884983a 	sll	r2,r3,r2
   260e0:	e0bff115 	stw	r2,-60(fp)
   260e4:	e03ff215 	stw	zero,-56(fp)
   260e8:	e1bfef17 	ldw	r6,-68(fp)
   260ec:	e13ff117 	ldw	r4,-60(fp)
   260f0:	3105883a 	add	r2,r6,r4
   260f4:	e17fef17 	ldw	r5,-68(fp)
   260f8:	1149803a 	cmpltu	r4,r2,r5
   260fc:	e1bff017 	ldw	r6,-64(fp)
   26100:	e17ff217 	ldw	r5,-56(fp)
   26104:	3147883a 	add	r3,r6,r5
   26108:	20c9883a 	add	r4,r4,r3
   2610c:	2007883a 	mov	r3,r4
   26110:	100d883a 	mov	r6,r2
   26114:	180f883a 	mov	r7,r3
   26118:	e13fe217 	ldw	r4,-120(fp)
   2611c:	e17fe317 	ldw	r5,-116(fp)
   26120:	2185883a 	add	r2,r4,r6
   26124:	1111803a 	cmpltu	r8,r2,r4
   26128:	29c7883a 	add	r3,r5,r7
   2612c:	40c9883a 	add	r4,r8,r3
   26130:	2007883a 	mov	r3,r4
   26134:	e0bfe215 	stw	r2,-120(fp)
   26138:	e0ffe315 	stw	r3,-116(fp)
    r->d[5] = t & 0xFFFFFFFFULL; t >>= 32;
   2613c:	e0ffe217 	ldw	r3,-120(fp)
   26140:	e0bfe417 	ldw	r2,-112(fp)
   26144:	10c00515 	stw	r3,20(r2)
   26148:	e0bfe317 	ldw	r2,-116(fp)
   2614c:	1004d83a 	srl	r2,r2,zero
   26150:	e0bfe215 	stw	r2,-120(fp)
   26154:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[6] + (((uint32_t)((bit >> 5) == 6)) << (bit & 0x1F));
   26158:	e0bfe417 	ldw	r2,-112(fp)
   2615c:	10800617 	ldw	r2,24(r2)
   26160:	102b883a 	mov	r21,r2
   26164:	002d883a 	mov	r22,zero
   26168:	e0bfe517 	ldw	r2,-108(fp)
   2616c:	1004d17a 	srli	r2,r2,5
   26170:	108001a0 	cmpeqi	r2,r2,6
   26174:	10c03fcc 	andi	r3,r2,255
   26178:	e0bfe517 	ldw	r2,-108(fp)
   2617c:	108007cc 	andi	r2,r2,31
   26180:	1884983a 	sll	r2,r3,r2
   26184:	e0bff315 	stw	r2,-52(fp)
   26188:	e03ff415 	stw	zero,-48(fp)
   2618c:	e1bff317 	ldw	r6,-52(fp)
   26190:	a985883a 	add	r2,r21,r6
   26194:	1549803a 	cmpltu	r4,r2,r21
   26198:	e17ff417 	ldw	r5,-48(fp)
   2619c:	b147883a 	add	r3,r22,r5
   261a0:	20c9883a 	add	r4,r4,r3
   261a4:	2007883a 	mov	r3,r4
   261a8:	100d883a 	mov	r6,r2
   261ac:	180f883a 	mov	r7,r3
   261b0:	e13fe217 	ldw	r4,-120(fp)
   261b4:	e17fe317 	ldw	r5,-116(fp)
   261b8:	2185883a 	add	r2,r4,r6
   261bc:	1111803a 	cmpltu	r8,r2,r4
   261c0:	29c7883a 	add	r3,r5,r7
   261c4:	40c9883a 	add	r4,r8,r3
   261c8:	2007883a 	mov	r3,r4
   261cc:	e0bfe215 	stw	r2,-120(fp)
   261d0:	e0ffe315 	stw	r3,-116(fp)
    r->d[6] = t & 0xFFFFFFFFULL; t >>= 32;
   261d4:	e0ffe217 	ldw	r3,-120(fp)
   261d8:	e0bfe417 	ldw	r2,-112(fp)
   261dc:	10c00615 	stw	r3,24(r2)
   261e0:	e0bfe317 	ldw	r2,-116(fp)
   261e4:	1004d83a 	srl	r2,r2,zero
   261e8:	e0bfe215 	stw	r2,-120(fp)
   261ec:	e03fe315 	stw	zero,-116(fp)
    t += (uint64_t)r->d[7] + (((uint32_t)((bit >> 5) == 7)) << (bit & 0x1F));
   261f0:	e0bfe417 	ldw	r2,-112(fp)
   261f4:	10800717 	ldw	r2,28(r2)
   261f8:	1027883a 	mov	r19,r2
   261fc:	0029883a 	mov	r20,zero
   26200:	e0bfe517 	ldw	r2,-108(fp)
   26204:	1004d17a 	srli	r2,r2,5
   26208:	108001e0 	cmpeqi	r2,r2,7
   2620c:	10c03fcc 	andi	r3,r2,255
   26210:	e0bfe517 	ldw	r2,-108(fp)
   26214:	108007cc 	andi	r2,r2,31
   26218:	1884983a 	sll	r2,r3,r2
   2621c:	e0bff515 	stw	r2,-44(fp)
   26220:	e03ff615 	stw	zero,-40(fp)
   26224:	e1bff517 	ldw	r6,-44(fp)
   26228:	9985883a 	add	r2,r19,r6
   2622c:	14c9803a 	cmpltu	r4,r2,r19
   26230:	e17ff617 	ldw	r5,-40(fp)
   26234:	a147883a 	add	r3,r20,r5
   26238:	20c9883a 	add	r4,r4,r3
   2623c:	2007883a 	mov	r3,r4
   26240:	100d883a 	mov	r6,r2
   26244:	180f883a 	mov	r7,r3
   26248:	e13fe217 	ldw	r4,-120(fp)
   2624c:	e17fe317 	ldw	r5,-116(fp)
   26250:	2185883a 	add	r2,r4,r6
   26254:	1111803a 	cmpltu	r8,r2,r4
   26258:	29c7883a 	add	r3,r5,r7
   2625c:	40c9883a 	add	r4,r8,r3
   26260:	2007883a 	mov	r3,r4
   26264:	e0bfe215 	stw	r2,-120(fp)
   26268:	e0ffe315 	stw	r3,-116(fp)
    r->d[7] = t & 0xFFFFFFFFULL;
   2626c:	e0ffe217 	ldw	r3,-120(fp)
   26270:	e0bfe417 	ldw	r2,-112(fp)
   26274:	10c00715 	stw	r3,28(r2)
#ifdef VERIFY
    VERIFY_CHECK((t >> 32) == 0);
   26278:	e0bfe317 	ldw	r2,-116(fp)
   2627c:	1004d83a 	srl	r2,r2,zero
   26280:	e0bff715 	stw	r2,-36(fp)
   26284:	e03ff815 	stw	zero,-32(fp)
   26288:	e1bff717 	ldw	r6,-36(fp)
   2628c:	e0fff817 	ldw	r3,-32(fp)
   26290:	30c4b03a 	or	r2,r6,r3
   26294:	1004c03a 	cmpne	r2,r2,zero
   26298:	10803fcc 	andi	r2,r2,255
   2629c:	10000d26 	beq	r2,zero,262d4 <secp256k1_scalar_cadd_bit+0x584>
   262a0:	d0a01617 	ldw	r2,-32680(gp)
   262a4:	10c00317 	ldw	r3,12(r2)
   262a8:	00800174 	movhi	r2,5
   262ac:	10969f04 	addi	r2,r2,23164
   262b0:	d8800015 	stw	r2,0(sp)
   262b4:	01c02804 	movi	r7,160
   262b8:	01800174 	movhi	r6,5
   262bc:	31964204 	addi	r6,r6,22792
   262c0:	01400174 	movhi	r5,5
   262c4:	2951e804 	addi	r5,r5,18336
   262c8:	1809883a 	mov	r4,r3
   262cc:	00461000 	call	46100 <fprintf>
   262d0:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(secp256k1_scalar_check_overflow(r) == 0);
   262d4:	e13fe417 	ldw	r4,-112(fp)
   262d8:	00252080 	call	25208 <secp256k1_scalar_check_overflow>
   262dc:	1004c03a 	cmpne	r2,r2,zero
   262e0:	10803fcc 	andi	r2,r2,255
   262e4:	10000d26 	beq	r2,zero,2631c <secp256k1_scalar_cadd_bit+0x5cc>
   262e8:	d0a01617 	ldw	r2,-32680(gp)
   262ec:	10c00317 	ldw	r3,12(r2)
   262f0:	00800174 	movhi	r2,5
   262f4:	1096a904 	addi	r2,r2,23204
   262f8:	d8800015 	stw	r2,0(sp)
   262fc:	01c02844 	movi	r7,161
   26300:	01800174 	movhi	r6,5
   26304:	31964204 	addi	r6,r6,22792
   26308:	01400174 	movhi	r5,5
   2630c:	2951e804 	addi	r5,r5,18336
   26310:	1809883a 	mov	r4,r3
   26314:	00461000 	call	46100 <fprintf>
   26318:	0045fd40 	call	45fd4 <abort>
#endif
}
   2631c:	0001883a 	nop
   26320:	e6fff904 	addi	sp,fp,-28
   26324:	dfc00817 	ldw	ra,32(sp)
   26328:	df000717 	ldw	fp,28(sp)
   2632c:	dd800617 	ldw	r22,24(sp)
   26330:	dd400517 	ldw	r21,20(sp)
   26334:	dd000417 	ldw	r20,16(sp)
   26338:	dcc00317 	ldw	r19,12(sp)
   2633c:	dc800217 	ldw	r18,8(sp)
   26340:	dc400117 	ldw	r17,4(sp)
   26344:	dc000017 	ldw	r16,0(sp)
   26348:	dec00904 	addi	sp,sp,36
   2634c:	f800283a 	ret

00026350 <secp256k1_scalar_set_b32>:

static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {
   26350:	defffa04 	addi	sp,sp,-24
   26354:	dfc00515 	stw	ra,20(sp)
   26358:	df000415 	stw	fp,16(sp)
   2635c:	df000404 	addi	fp,sp,16
   26360:	e13ffd15 	stw	r4,-12(fp)
   26364:	e17ffe15 	stw	r5,-8(fp)
   26368:	e1bfff15 	stw	r6,-4(fp)
    int over;
    r->d[0] = (uint32_t)b32[31] | (uint32_t)b32[30] << 8 | (uint32_t)b32[29] << 16 | (uint32_t)b32[28] << 24;
   2636c:	e0bffe17 	ldw	r2,-8(fp)
   26370:	108007c4 	addi	r2,r2,31
   26374:	10800003 	ldbu	r2,0(r2)
   26378:	10c03fcc 	andi	r3,r2,255
   2637c:	e0bffe17 	ldw	r2,-8(fp)
   26380:	10800784 	addi	r2,r2,30
   26384:	10800003 	ldbu	r2,0(r2)
   26388:	10803fcc 	andi	r2,r2,255
   2638c:	1004923a 	slli	r2,r2,8
   26390:	1886b03a 	or	r3,r3,r2
   26394:	e0bffe17 	ldw	r2,-8(fp)
   26398:	10800744 	addi	r2,r2,29
   2639c:	10800003 	ldbu	r2,0(r2)
   263a0:	10803fcc 	andi	r2,r2,255
   263a4:	1004943a 	slli	r2,r2,16
   263a8:	1886b03a 	or	r3,r3,r2
   263ac:	e0bffe17 	ldw	r2,-8(fp)
   263b0:	10800704 	addi	r2,r2,28
   263b4:	10800003 	ldbu	r2,0(r2)
   263b8:	10803fcc 	andi	r2,r2,255
   263bc:	1004963a 	slli	r2,r2,24
   263c0:	1886b03a 	or	r3,r3,r2
   263c4:	e0bffd17 	ldw	r2,-12(fp)
   263c8:	10c00015 	stw	r3,0(r2)
    r->d[1] = (uint32_t)b32[27] | (uint32_t)b32[26] << 8 | (uint32_t)b32[25] << 16 | (uint32_t)b32[24] << 24;
   263cc:	e0bffe17 	ldw	r2,-8(fp)
   263d0:	108006c4 	addi	r2,r2,27
   263d4:	10800003 	ldbu	r2,0(r2)
   263d8:	10c03fcc 	andi	r3,r2,255
   263dc:	e0bffe17 	ldw	r2,-8(fp)
   263e0:	10800684 	addi	r2,r2,26
   263e4:	10800003 	ldbu	r2,0(r2)
   263e8:	10803fcc 	andi	r2,r2,255
   263ec:	1004923a 	slli	r2,r2,8
   263f0:	1886b03a 	or	r3,r3,r2
   263f4:	e0bffe17 	ldw	r2,-8(fp)
   263f8:	10800644 	addi	r2,r2,25
   263fc:	10800003 	ldbu	r2,0(r2)
   26400:	10803fcc 	andi	r2,r2,255
   26404:	1004943a 	slli	r2,r2,16
   26408:	1886b03a 	or	r3,r3,r2
   2640c:	e0bffe17 	ldw	r2,-8(fp)
   26410:	10800604 	addi	r2,r2,24
   26414:	10800003 	ldbu	r2,0(r2)
   26418:	10803fcc 	andi	r2,r2,255
   2641c:	1004963a 	slli	r2,r2,24
   26420:	1886b03a 	or	r3,r3,r2
   26424:	e0bffd17 	ldw	r2,-12(fp)
   26428:	10c00115 	stw	r3,4(r2)
    r->d[2] = (uint32_t)b32[23] | (uint32_t)b32[22] << 8 | (uint32_t)b32[21] << 16 | (uint32_t)b32[20] << 24;
   2642c:	e0bffe17 	ldw	r2,-8(fp)
   26430:	108005c4 	addi	r2,r2,23
   26434:	10800003 	ldbu	r2,0(r2)
   26438:	10c03fcc 	andi	r3,r2,255
   2643c:	e0bffe17 	ldw	r2,-8(fp)
   26440:	10800584 	addi	r2,r2,22
   26444:	10800003 	ldbu	r2,0(r2)
   26448:	10803fcc 	andi	r2,r2,255
   2644c:	1004923a 	slli	r2,r2,8
   26450:	1886b03a 	or	r3,r3,r2
   26454:	e0bffe17 	ldw	r2,-8(fp)
   26458:	10800544 	addi	r2,r2,21
   2645c:	10800003 	ldbu	r2,0(r2)
   26460:	10803fcc 	andi	r2,r2,255
   26464:	1004943a 	slli	r2,r2,16
   26468:	1886b03a 	or	r3,r3,r2
   2646c:	e0bffe17 	ldw	r2,-8(fp)
   26470:	10800504 	addi	r2,r2,20
   26474:	10800003 	ldbu	r2,0(r2)
   26478:	10803fcc 	andi	r2,r2,255
   2647c:	1004963a 	slli	r2,r2,24
   26480:	1886b03a 	or	r3,r3,r2
   26484:	e0bffd17 	ldw	r2,-12(fp)
   26488:	10c00215 	stw	r3,8(r2)
    r->d[3] = (uint32_t)b32[19] | (uint32_t)b32[18] << 8 | (uint32_t)b32[17] << 16 | (uint32_t)b32[16] << 24;
   2648c:	e0bffe17 	ldw	r2,-8(fp)
   26490:	108004c4 	addi	r2,r2,19
   26494:	10800003 	ldbu	r2,0(r2)
   26498:	10c03fcc 	andi	r3,r2,255
   2649c:	e0bffe17 	ldw	r2,-8(fp)
   264a0:	10800484 	addi	r2,r2,18
   264a4:	10800003 	ldbu	r2,0(r2)
   264a8:	10803fcc 	andi	r2,r2,255
   264ac:	1004923a 	slli	r2,r2,8
   264b0:	1886b03a 	or	r3,r3,r2
   264b4:	e0bffe17 	ldw	r2,-8(fp)
   264b8:	10800444 	addi	r2,r2,17
   264bc:	10800003 	ldbu	r2,0(r2)
   264c0:	10803fcc 	andi	r2,r2,255
   264c4:	1004943a 	slli	r2,r2,16
   264c8:	1886b03a 	or	r3,r3,r2
   264cc:	e0bffe17 	ldw	r2,-8(fp)
   264d0:	10800404 	addi	r2,r2,16
   264d4:	10800003 	ldbu	r2,0(r2)
   264d8:	10803fcc 	andi	r2,r2,255
   264dc:	1004963a 	slli	r2,r2,24
   264e0:	1886b03a 	or	r3,r3,r2
   264e4:	e0bffd17 	ldw	r2,-12(fp)
   264e8:	10c00315 	stw	r3,12(r2)
    r->d[4] = (uint32_t)b32[15] | (uint32_t)b32[14] << 8 | (uint32_t)b32[13] << 16 | (uint32_t)b32[12] << 24;
   264ec:	e0bffe17 	ldw	r2,-8(fp)
   264f0:	108003c4 	addi	r2,r2,15
   264f4:	10800003 	ldbu	r2,0(r2)
   264f8:	10c03fcc 	andi	r3,r2,255
   264fc:	e0bffe17 	ldw	r2,-8(fp)
   26500:	10800384 	addi	r2,r2,14
   26504:	10800003 	ldbu	r2,0(r2)
   26508:	10803fcc 	andi	r2,r2,255
   2650c:	1004923a 	slli	r2,r2,8
   26510:	1886b03a 	or	r3,r3,r2
   26514:	e0bffe17 	ldw	r2,-8(fp)
   26518:	10800344 	addi	r2,r2,13
   2651c:	10800003 	ldbu	r2,0(r2)
   26520:	10803fcc 	andi	r2,r2,255
   26524:	1004943a 	slli	r2,r2,16
   26528:	1886b03a 	or	r3,r3,r2
   2652c:	e0bffe17 	ldw	r2,-8(fp)
   26530:	10800304 	addi	r2,r2,12
   26534:	10800003 	ldbu	r2,0(r2)
   26538:	10803fcc 	andi	r2,r2,255
   2653c:	1004963a 	slli	r2,r2,24
   26540:	1886b03a 	or	r3,r3,r2
   26544:	e0bffd17 	ldw	r2,-12(fp)
   26548:	10c00415 	stw	r3,16(r2)
    r->d[5] = (uint32_t)b32[11] | (uint32_t)b32[10] << 8 | (uint32_t)b32[9] << 16 | (uint32_t)b32[8] << 24;
   2654c:	e0bffe17 	ldw	r2,-8(fp)
   26550:	108002c4 	addi	r2,r2,11
   26554:	10800003 	ldbu	r2,0(r2)
   26558:	10c03fcc 	andi	r3,r2,255
   2655c:	e0bffe17 	ldw	r2,-8(fp)
   26560:	10800284 	addi	r2,r2,10
   26564:	10800003 	ldbu	r2,0(r2)
   26568:	10803fcc 	andi	r2,r2,255
   2656c:	1004923a 	slli	r2,r2,8
   26570:	1886b03a 	or	r3,r3,r2
   26574:	e0bffe17 	ldw	r2,-8(fp)
   26578:	10800244 	addi	r2,r2,9
   2657c:	10800003 	ldbu	r2,0(r2)
   26580:	10803fcc 	andi	r2,r2,255
   26584:	1004943a 	slli	r2,r2,16
   26588:	1886b03a 	or	r3,r3,r2
   2658c:	e0bffe17 	ldw	r2,-8(fp)
   26590:	10800204 	addi	r2,r2,8
   26594:	10800003 	ldbu	r2,0(r2)
   26598:	10803fcc 	andi	r2,r2,255
   2659c:	1004963a 	slli	r2,r2,24
   265a0:	1886b03a 	or	r3,r3,r2
   265a4:	e0bffd17 	ldw	r2,-12(fp)
   265a8:	10c00515 	stw	r3,20(r2)
    r->d[6] = (uint32_t)b32[7] | (uint32_t)b32[6] << 8 | (uint32_t)b32[5] << 16 | (uint32_t)b32[4] << 24;
   265ac:	e0bffe17 	ldw	r2,-8(fp)
   265b0:	108001c4 	addi	r2,r2,7
   265b4:	10800003 	ldbu	r2,0(r2)
   265b8:	10c03fcc 	andi	r3,r2,255
   265bc:	e0bffe17 	ldw	r2,-8(fp)
   265c0:	10800184 	addi	r2,r2,6
   265c4:	10800003 	ldbu	r2,0(r2)
   265c8:	10803fcc 	andi	r2,r2,255
   265cc:	1004923a 	slli	r2,r2,8
   265d0:	1886b03a 	or	r3,r3,r2
   265d4:	e0bffe17 	ldw	r2,-8(fp)
   265d8:	10800144 	addi	r2,r2,5
   265dc:	10800003 	ldbu	r2,0(r2)
   265e0:	10803fcc 	andi	r2,r2,255
   265e4:	1004943a 	slli	r2,r2,16
   265e8:	1886b03a 	or	r3,r3,r2
   265ec:	e0bffe17 	ldw	r2,-8(fp)
   265f0:	10800104 	addi	r2,r2,4
   265f4:	10800003 	ldbu	r2,0(r2)
   265f8:	10803fcc 	andi	r2,r2,255
   265fc:	1004963a 	slli	r2,r2,24
   26600:	1886b03a 	or	r3,r3,r2
   26604:	e0bffd17 	ldw	r2,-12(fp)
   26608:	10c00615 	stw	r3,24(r2)
    r->d[7] = (uint32_t)b32[3] | (uint32_t)b32[2] << 8 | (uint32_t)b32[1] << 16 | (uint32_t)b32[0] << 24;
   2660c:	e0bffe17 	ldw	r2,-8(fp)
   26610:	108000c4 	addi	r2,r2,3
   26614:	10800003 	ldbu	r2,0(r2)
   26618:	10c03fcc 	andi	r3,r2,255
   2661c:	e0bffe17 	ldw	r2,-8(fp)
   26620:	10800084 	addi	r2,r2,2
   26624:	10800003 	ldbu	r2,0(r2)
   26628:	10803fcc 	andi	r2,r2,255
   2662c:	1004923a 	slli	r2,r2,8
   26630:	1886b03a 	or	r3,r3,r2
   26634:	e0bffe17 	ldw	r2,-8(fp)
   26638:	10800044 	addi	r2,r2,1
   2663c:	10800003 	ldbu	r2,0(r2)
   26640:	10803fcc 	andi	r2,r2,255
   26644:	1004943a 	slli	r2,r2,16
   26648:	1886b03a 	or	r3,r3,r2
   2664c:	e0bffe17 	ldw	r2,-8(fp)
   26650:	10800003 	ldbu	r2,0(r2)
   26654:	10803fcc 	andi	r2,r2,255
   26658:	1004963a 	slli	r2,r2,24
   2665c:	1886b03a 	or	r3,r3,r2
   26660:	e0bffd17 	ldw	r2,-12(fp)
   26664:	10c00715 	stw	r3,28(r2)
    over = secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));
   26668:	e13ffd17 	ldw	r4,-12(fp)
   2666c:	00252080 	call	25208 <secp256k1_scalar_check_overflow>
   26670:	100b883a 	mov	r5,r2
   26674:	e13ffd17 	ldw	r4,-12(fp)
   26678:	00254200 	call	25420 <secp256k1_scalar_reduce>
   2667c:	e0bffc15 	stw	r2,-16(fp)
    if (overflow) {
   26680:	e0bfff17 	ldw	r2,-4(fp)
   26684:	10000326 	beq	r2,zero,26694 <secp256k1_scalar_set_b32+0x344>
        *overflow = over;
   26688:	e0bfff17 	ldw	r2,-4(fp)
   2668c:	e0fffc17 	ldw	r3,-16(fp)
   26690:	10c00015 	stw	r3,0(r2)
    }
}
   26694:	0001883a 	nop
   26698:	e037883a 	mov	sp,fp
   2669c:	dfc00117 	ldw	ra,4(sp)
   266a0:	df000017 	ldw	fp,0(sp)
   266a4:	dec00204 	addi	sp,sp,8
   266a8:	f800283a 	ret

000266ac <secp256k1_scalar_get_b32>:

static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {
   266ac:	defffd04 	addi	sp,sp,-12
   266b0:	df000215 	stw	fp,8(sp)
   266b4:	df000204 	addi	fp,sp,8
   266b8:	e13ffe15 	stw	r4,-8(fp)
   266bc:	e17fff15 	stw	r5,-4(fp)
    bin[0] = a->d[7] >> 24; bin[1] = a->d[7] >> 16; bin[2] = a->d[7] >> 8; bin[3] = a->d[7];
   266c0:	e0bfff17 	ldw	r2,-4(fp)
   266c4:	10800717 	ldw	r2,28(r2)
   266c8:	1004d63a 	srli	r2,r2,24
   266cc:	1007883a 	mov	r3,r2
   266d0:	e0bffe17 	ldw	r2,-8(fp)
   266d4:	10c00005 	stb	r3,0(r2)
   266d8:	e0bffe17 	ldw	r2,-8(fp)
   266dc:	10800044 	addi	r2,r2,1
   266e0:	e0ffff17 	ldw	r3,-4(fp)
   266e4:	18c00717 	ldw	r3,28(r3)
   266e8:	1806d43a 	srli	r3,r3,16
   266ec:	10c00005 	stb	r3,0(r2)
   266f0:	e0bffe17 	ldw	r2,-8(fp)
   266f4:	10800084 	addi	r2,r2,2
   266f8:	e0ffff17 	ldw	r3,-4(fp)
   266fc:	18c00717 	ldw	r3,28(r3)
   26700:	1806d23a 	srli	r3,r3,8
   26704:	10c00005 	stb	r3,0(r2)
   26708:	e0bffe17 	ldw	r2,-8(fp)
   2670c:	108000c4 	addi	r2,r2,3
   26710:	e0ffff17 	ldw	r3,-4(fp)
   26714:	18c00717 	ldw	r3,28(r3)
   26718:	10c00005 	stb	r3,0(r2)
    bin[4] = a->d[6] >> 24; bin[5] = a->d[6] >> 16; bin[6] = a->d[6] >> 8; bin[7] = a->d[6];
   2671c:	e0bffe17 	ldw	r2,-8(fp)
   26720:	10800104 	addi	r2,r2,4
   26724:	e0ffff17 	ldw	r3,-4(fp)
   26728:	18c00617 	ldw	r3,24(r3)
   2672c:	1806d63a 	srli	r3,r3,24
   26730:	10c00005 	stb	r3,0(r2)
   26734:	e0bffe17 	ldw	r2,-8(fp)
   26738:	10800144 	addi	r2,r2,5
   2673c:	e0ffff17 	ldw	r3,-4(fp)
   26740:	18c00617 	ldw	r3,24(r3)
   26744:	1806d43a 	srli	r3,r3,16
   26748:	10c00005 	stb	r3,0(r2)
   2674c:	e0bffe17 	ldw	r2,-8(fp)
   26750:	10800184 	addi	r2,r2,6
   26754:	e0ffff17 	ldw	r3,-4(fp)
   26758:	18c00617 	ldw	r3,24(r3)
   2675c:	1806d23a 	srli	r3,r3,8
   26760:	10c00005 	stb	r3,0(r2)
   26764:	e0bffe17 	ldw	r2,-8(fp)
   26768:	108001c4 	addi	r2,r2,7
   2676c:	e0ffff17 	ldw	r3,-4(fp)
   26770:	18c00617 	ldw	r3,24(r3)
   26774:	10c00005 	stb	r3,0(r2)
    bin[8] = a->d[5] >> 24; bin[9] = a->d[5] >> 16; bin[10] = a->d[5] >> 8; bin[11] = a->d[5];
   26778:	e0bffe17 	ldw	r2,-8(fp)
   2677c:	10800204 	addi	r2,r2,8
   26780:	e0ffff17 	ldw	r3,-4(fp)
   26784:	18c00517 	ldw	r3,20(r3)
   26788:	1806d63a 	srli	r3,r3,24
   2678c:	10c00005 	stb	r3,0(r2)
   26790:	e0bffe17 	ldw	r2,-8(fp)
   26794:	10800244 	addi	r2,r2,9
   26798:	e0ffff17 	ldw	r3,-4(fp)
   2679c:	18c00517 	ldw	r3,20(r3)
   267a0:	1806d43a 	srli	r3,r3,16
   267a4:	10c00005 	stb	r3,0(r2)
   267a8:	e0bffe17 	ldw	r2,-8(fp)
   267ac:	10800284 	addi	r2,r2,10
   267b0:	e0ffff17 	ldw	r3,-4(fp)
   267b4:	18c00517 	ldw	r3,20(r3)
   267b8:	1806d23a 	srli	r3,r3,8
   267bc:	10c00005 	stb	r3,0(r2)
   267c0:	e0bffe17 	ldw	r2,-8(fp)
   267c4:	108002c4 	addi	r2,r2,11
   267c8:	e0ffff17 	ldw	r3,-4(fp)
   267cc:	18c00517 	ldw	r3,20(r3)
   267d0:	10c00005 	stb	r3,0(r2)
    bin[12] = a->d[4] >> 24; bin[13] = a->d[4] >> 16; bin[14] = a->d[4] >> 8; bin[15] = a->d[4];
   267d4:	e0bffe17 	ldw	r2,-8(fp)
   267d8:	10800304 	addi	r2,r2,12
   267dc:	e0ffff17 	ldw	r3,-4(fp)
   267e0:	18c00417 	ldw	r3,16(r3)
   267e4:	1806d63a 	srli	r3,r3,24
   267e8:	10c00005 	stb	r3,0(r2)
   267ec:	e0bffe17 	ldw	r2,-8(fp)
   267f0:	10800344 	addi	r2,r2,13
   267f4:	e0ffff17 	ldw	r3,-4(fp)
   267f8:	18c00417 	ldw	r3,16(r3)
   267fc:	1806d43a 	srli	r3,r3,16
   26800:	10c00005 	stb	r3,0(r2)
   26804:	e0bffe17 	ldw	r2,-8(fp)
   26808:	10800384 	addi	r2,r2,14
   2680c:	e0ffff17 	ldw	r3,-4(fp)
   26810:	18c00417 	ldw	r3,16(r3)
   26814:	1806d23a 	srli	r3,r3,8
   26818:	10c00005 	stb	r3,0(r2)
   2681c:	e0bffe17 	ldw	r2,-8(fp)
   26820:	108003c4 	addi	r2,r2,15
   26824:	e0ffff17 	ldw	r3,-4(fp)
   26828:	18c00417 	ldw	r3,16(r3)
   2682c:	10c00005 	stb	r3,0(r2)
    bin[16] = a->d[3] >> 24; bin[17] = a->d[3] >> 16; bin[18] = a->d[3] >> 8; bin[19] = a->d[3];
   26830:	e0bffe17 	ldw	r2,-8(fp)
   26834:	10800404 	addi	r2,r2,16
   26838:	e0ffff17 	ldw	r3,-4(fp)
   2683c:	18c00317 	ldw	r3,12(r3)
   26840:	1806d63a 	srli	r3,r3,24
   26844:	10c00005 	stb	r3,0(r2)
   26848:	e0bffe17 	ldw	r2,-8(fp)
   2684c:	10800444 	addi	r2,r2,17
   26850:	e0ffff17 	ldw	r3,-4(fp)
   26854:	18c00317 	ldw	r3,12(r3)
   26858:	1806d43a 	srli	r3,r3,16
   2685c:	10c00005 	stb	r3,0(r2)
   26860:	e0bffe17 	ldw	r2,-8(fp)
   26864:	10800484 	addi	r2,r2,18
   26868:	e0ffff17 	ldw	r3,-4(fp)
   2686c:	18c00317 	ldw	r3,12(r3)
   26870:	1806d23a 	srli	r3,r3,8
   26874:	10c00005 	stb	r3,0(r2)
   26878:	e0bffe17 	ldw	r2,-8(fp)
   2687c:	108004c4 	addi	r2,r2,19
   26880:	e0ffff17 	ldw	r3,-4(fp)
   26884:	18c00317 	ldw	r3,12(r3)
   26888:	10c00005 	stb	r3,0(r2)
    bin[20] = a->d[2] >> 24; bin[21] = a->d[2] >> 16; bin[22] = a->d[2] >> 8; bin[23] = a->d[2];
   2688c:	e0bffe17 	ldw	r2,-8(fp)
   26890:	10800504 	addi	r2,r2,20
   26894:	e0ffff17 	ldw	r3,-4(fp)
   26898:	18c00217 	ldw	r3,8(r3)
   2689c:	1806d63a 	srli	r3,r3,24
   268a0:	10c00005 	stb	r3,0(r2)
   268a4:	e0bffe17 	ldw	r2,-8(fp)
   268a8:	10800544 	addi	r2,r2,21
   268ac:	e0ffff17 	ldw	r3,-4(fp)
   268b0:	18c00217 	ldw	r3,8(r3)
   268b4:	1806d43a 	srli	r3,r3,16
   268b8:	10c00005 	stb	r3,0(r2)
   268bc:	e0bffe17 	ldw	r2,-8(fp)
   268c0:	10800584 	addi	r2,r2,22
   268c4:	e0ffff17 	ldw	r3,-4(fp)
   268c8:	18c00217 	ldw	r3,8(r3)
   268cc:	1806d23a 	srli	r3,r3,8
   268d0:	10c00005 	stb	r3,0(r2)
   268d4:	e0bffe17 	ldw	r2,-8(fp)
   268d8:	108005c4 	addi	r2,r2,23
   268dc:	e0ffff17 	ldw	r3,-4(fp)
   268e0:	18c00217 	ldw	r3,8(r3)
   268e4:	10c00005 	stb	r3,0(r2)
    bin[24] = a->d[1] >> 24; bin[25] = a->d[1] >> 16; bin[26] = a->d[1] >> 8; bin[27] = a->d[1];
   268e8:	e0bffe17 	ldw	r2,-8(fp)
   268ec:	10800604 	addi	r2,r2,24
   268f0:	e0ffff17 	ldw	r3,-4(fp)
   268f4:	18c00117 	ldw	r3,4(r3)
   268f8:	1806d63a 	srli	r3,r3,24
   268fc:	10c00005 	stb	r3,0(r2)
   26900:	e0bffe17 	ldw	r2,-8(fp)
   26904:	10800644 	addi	r2,r2,25
   26908:	e0ffff17 	ldw	r3,-4(fp)
   2690c:	18c00117 	ldw	r3,4(r3)
   26910:	1806d43a 	srli	r3,r3,16
   26914:	10c00005 	stb	r3,0(r2)
   26918:	e0bffe17 	ldw	r2,-8(fp)
   2691c:	10800684 	addi	r2,r2,26
   26920:	e0ffff17 	ldw	r3,-4(fp)
   26924:	18c00117 	ldw	r3,4(r3)
   26928:	1806d23a 	srli	r3,r3,8
   2692c:	10c00005 	stb	r3,0(r2)
   26930:	e0bffe17 	ldw	r2,-8(fp)
   26934:	108006c4 	addi	r2,r2,27
   26938:	e0ffff17 	ldw	r3,-4(fp)
   2693c:	18c00117 	ldw	r3,4(r3)
   26940:	10c00005 	stb	r3,0(r2)
    bin[28] = a->d[0] >> 24; bin[29] = a->d[0] >> 16; bin[30] = a->d[0] >> 8; bin[31] = a->d[0];
   26944:	e0bffe17 	ldw	r2,-8(fp)
   26948:	10800704 	addi	r2,r2,28
   2694c:	e0ffff17 	ldw	r3,-4(fp)
   26950:	18c00017 	ldw	r3,0(r3)
   26954:	1806d63a 	srli	r3,r3,24
   26958:	10c00005 	stb	r3,0(r2)
   2695c:	e0bffe17 	ldw	r2,-8(fp)
   26960:	10800744 	addi	r2,r2,29
   26964:	e0ffff17 	ldw	r3,-4(fp)
   26968:	18c00017 	ldw	r3,0(r3)
   2696c:	1806d43a 	srli	r3,r3,16
   26970:	10c00005 	stb	r3,0(r2)
   26974:	e0bffe17 	ldw	r2,-8(fp)
   26978:	10800784 	addi	r2,r2,30
   2697c:	e0ffff17 	ldw	r3,-4(fp)
   26980:	18c00017 	ldw	r3,0(r3)
   26984:	1806d23a 	srli	r3,r3,8
   26988:	10c00005 	stb	r3,0(r2)
   2698c:	e0bffe17 	ldw	r2,-8(fp)
   26990:	108007c4 	addi	r2,r2,31
   26994:	e0ffff17 	ldw	r3,-4(fp)
   26998:	18c00017 	ldw	r3,0(r3)
   2699c:	10c00005 	stb	r3,0(r2)
}
   269a0:	0001883a 	nop
   269a4:	e037883a 	mov	sp,fp
   269a8:	df000017 	ldw	fp,0(sp)
   269ac:	dec00104 	addi	sp,sp,4
   269b0:	f800283a 	ret

000269b4 <secp256k1_scalar_is_zero>:

SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {
   269b4:	defffe04 	addi	sp,sp,-8
   269b8:	df000115 	stw	fp,4(sp)
   269bc:	df000104 	addi	fp,sp,4
   269c0:	e13fff15 	stw	r4,-4(fp)
    return (a->d[0] | a->d[1] | a->d[2] | a->d[3] | a->d[4] | a->d[5] | a->d[6] | a->d[7]) == 0;
   269c4:	e0bfff17 	ldw	r2,-4(fp)
   269c8:	10c00017 	ldw	r3,0(r2)
   269cc:	e0bfff17 	ldw	r2,-4(fp)
   269d0:	10800117 	ldw	r2,4(r2)
   269d4:	1886b03a 	or	r3,r3,r2
   269d8:	e0bfff17 	ldw	r2,-4(fp)
   269dc:	10800217 	ldw	r2,8(r2)
   269e0:	1886b03a 	or	r3,r3,r2
   269e4:	e0bfff17 	ldw	r2,-4(fp)
   269e8:	10800317 	ldw	r2,12(r2)
   269ec:	1886b03a 	or	r3,r3,r2
   269f0:	e0bfff17 	ldw	r2,-4(fp)
   269f4:	10800417 	ldw	r2,16(r2)
   269f8:	1886b03a 	or	r3,r3,r2
   269fc:	e0bfff17 	ldw	r2,-4(fp)
   26a00:	10800517 	ldw	r2,20(r2)
   26a04:	1886b03a 	or	r3,r3,r2
   26a08:	e0bfff17 	ldw	r2,-4(fp)
   26a0c:	10800617 	ldw	r2,24(r2)
   26a10:	1886b03a 	or	r3,r3,r2
   26a14:	e0bfff17 	ldw	r2,-4(fp)
   26a18:	10800717 	ldw	r2,28(r2)
   26a1c:	1884b03a 	or	r2,r3,r2
   26a20:	1005003a 	cmpeq	r2,r2,zero
   26a24:	10803fcc 	andi	r2,r2,255
}
   26a28:	e037883a 	mov	sp,fp
   26a2c:	df000017 	ldw	fp,0(sp)
   26a30:	dec00104 	addi	sp,sp,4
   26a34:	f800283a 	ret

00026a38 <secp256k1_scalar_negate>:

static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {
   26a38:	deffe904 	addi	sp,sp,-92
   26a3c:	dfc01615 	stw	ra,88(sp)
   26a40:	df001515 	stw	fp,84(sp)
   26a44:	ddc01415 	stw	r23,80(sp)
   26a48:	dd801315 	stw	r22,76(sp)
   26a4c:	dd401215 	stw	r21,72(sp)
   26a50:	dd001115 	stw	r20,68(sp)
   26a54:	dcc01015 	stw	r19,64(sp)
   26a58:	dc800f15 	stw	r18,60(sp)
   26a5c:	dc400e15 	stw	r17,56(sp)
   26a60:	dc000d15 	stw	r16,52(sp)
   26a64:	df001504 	addi	fp,sp,84
   26a68:	e13fee15 	stw	r4,-72(fp)
   26a6c:	e17fef15 	stw	r5,-68(fp)
    uint32_t nonzero = 0xFFFFFFFFUL * (secp256k1_scalar_is_zero(a) == 0);
   26a70:	e13fef17 	ldw	r4,-68(fp)
   26a74:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   26a78:	1005003a 	cmpeq	r2,r2,zero
   26a7c:	10803fcc 	andi	r2,r2,255
   26a80:	0085c83a 	sub	r2,zero,r2
   26a84:	e0bfeb15 	stw	r2,-84(fp)
    uint64_t t = (uint64_t)(~a->d[0]) + SECP256K1_N_0 + 1;
   26a88:	e0bfef17 	ldw	r2,-68(fp)
   26a8c:	10800017 	ldw	r2,0(r2)
   26a90:	0084303a 	nor	r2,zero,r2
   26a94:	e0bff015 	stw	r2,-64(fp)
   26a98:	e03ff115 	stw	zero,-60(fp)
   26a9c:	01340db4 	movhi	r4,53302
   26aa0:	21105084 	addi	r4,r4,16706
   26aa4:	000b883a 	mov	r5,zero
   26aa8:	e1bff017 	ldw	r6,-64(fp)
   26aac:	3105883a 	add	r2,r6,r4
   26ab0:	e1fff017 	ldw	r7,-64(fp)
   26ab4:	11cd803a 	cmpltu	r6,r2,r7
   26ab8:	e1fff117 	ldw	r7,-60(fp)
   26abc:	3947883a 	add	r3,r7,r5
   26ac0:	30c9883a 	add	r4,r6,r3
   26ac4:	2007883a 	mov	r3,r4
   26ac8:	e0bfec15 	stw	r2,-80(fp)
   26acc:	e0ffed15 	stw	r3,-76(fp)
    r->d[0] = t & nonzero; t >>= 32;
   26ad0:	e0ffec17 	ldw	r3,-80(fp)
   26ad4:	e0bfeb17 	ldw	r2,-84(fp)
   26ad8:	1886703a 	and	r3,r3,r2
   26adc:	e0bfee17 	ldw	r2,-72(fp)
   26ae0:	10c00015 	stw	r3,0(r2)
   26ae4:	e0bfed17 	ldw	r2,-76(fp)
   26ae8:	1004d83a 	srl	r2,r2,zero
   26aec:	e0bfec15 	stw	r2,-80(fp)
   26af0:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[1]) + SECP256K1_N_1;
   26af4:	e0bfef17 	ldw	r2,-68(fp)
   26af8:	10800117 	ldw	r2,4(r2)
   26afc:	0084303a 	nor	r2,zero,r2
   26b00:	e0bff215 	stw	r2,-56(fp)
   26b04:	e03ff315 	stw	zero,-52(fp)
   26b08:	e13fec17 	ldw	r4,-80(fp)
   26b0c:	e17fed17 	ldw	r5,-76(fp)
   26b10:	e1bff217 	ldw	r6,-56(fp)
   26b14:	3105883a 	add	r2,r6,r4
   26b18:	e1fff217 	ldw	r7,-56(fp)
   26b1c:	11cd803a 	cmpltu	r6,r2,r7
   26b20:	e1fff317 	ldw	r7,-52(fp)
   26b24:	3947883a 	add	r3,r7,r5
   26b28:	30c9883a 	add	r4,r6,r3
   26b2c:	2007883a 	mov	r3,r4
   26b30:	100d883a 	mov	r6,r2
   26b34:	180f883a 	mov	r7,r3
   26b38:	012ff4b4 	movhi	r4,49106
   26b3c:	2117a304 	addi	r4,r4,24204
   26b40:	000b883a 	mov	r5,zero
   26b44:	3105883a 	add	r2,r6,r4
   26b48:	1191803a 	cmpltu	r8,r2,r6
   26b4c:	3947883a 	add	r3,r7,r5
   26b50:	40c9883a 	add	r4,r8,r3
   26b54:	2007883a 	mov	r3,r4
   26b58:	e0bfec15 	stw	r2,-80(fp)
   26b5c:	e0ffed15 	stw	r3,-76(fp)
    r->d[1] = t & nonzero; t >>= 32;
   26b60:	e0ffec17 	ldw	r3,-80(fp)
   26b64:	e0bfeb17 	ldw	r2,-84(fp)
   26b68:	1886703a 	and	r3,r3,r2
   26b6c:	e0bfee17 	ldw	r2,-72(fp)
   26b70:	10c00115 	stw	r3,4(r2)
   26b74:	e0bfed17 	ldw	r2,-76(fp)
   26b78:	1004d83a 	srl	r2,r2,zero
   26b7c:	e0bfec15 	stw	r2,-80(fp)
   26b80:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[2]) + SECP256K1_N_2;
   26b84:	e0bfef17 	ldw	r2,-68(fp)
   26b88:	10800217 	ldw	r2,8(r2)
   26b8c:	0084303a 	nor	r2,zero,r2
   26b90:	e0bff415 	stw	r2,-48(fp)
   26b94:	e03ff515 	stw	zero,-44(fp)
   26b98:	e13fec17 	ldw	r4,-80(fp)
   26b9c:	e17fed17 	ldw	r5,-76(fp)
   26ba0:	e1bff417 	ldw	r6,-48(fp)
   26ba4:	3105883a 	add	r2,r6,r4
   26ba8:	e1fff417 	ldw	r7,-48(fp)
   26bac:	11cd803a 	cmpltu	r6,r2,r7
   26bb0:	e1fff517 	ldw	r7,-44(fp)
   26bb4:	3947883a 	add	r3,r7,r5
   26bb8:	30c9883a 	add	r4,r6,r3
   26bbc:	2007883a 	mov	r3,r4
   26bc0:	100d883a 	mov	r6,r2
   26bc4:	180f883a 	mov	r7,r3
   26bc8:	012bd274 	movhi	r4,44873
   26bcc:	21280ec4 	addi	r4,r4,-24517
   26bd0:	000b883a 	mov	r5,zero
   26bd4:	3105883a 	add	r2,r6,r4
   26bd8:	1191803a 	cmpltu	r8,r2,r6
   26bdc:	3947883a 	add	r3,r7,r5
   26be0:	40c9883a 	add	r4,r8,r3
   26be4:	2007883a 	mov	r3,r4
   26be8:	e0bfec15 	stw	r2,-80(fp)
   26bec:	e0ffed15 	stw	r3,-76(fp)
    r->d[2] = t & nonzero; t >>= 32;
   26bf0:	e0ffec17 	ldw	r3,-80(fp)
   26bf4:	e0bfeb17 	ldw	r2,-84(fp)
   26bf8:	1886703a 	and	r3,r3,r2
   26bfc:	e0bfee17 	ldw	r2,-72(fp)
   26c00:	10c00215 	stw	r3,8(r2)
   26c04:	e0bfed17 	ldw	r2,-76(fp)
   26c08:	1004d83a 	srl	r2,r2,zero
   26c0c:	e0bfec15 	stw	r2,-80(fp)
   26c10:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[3]) + SECP256K1_N_3;
   26c14:	e0bfef17 	ldw	r2,-68(fp)
   26c18:	10800317 	ldw	r2,12(r2)
   26c1c:	0084303a 	nor	r2,zero,r2
   26c20:	e0bff615 	stw	r2,-40(fp)
   26c24:	e03ff715 	stw	zero,-36(fp)
   26c28:	e13fec17 	ldw	r4,-80(fp)
   26c2c:	e17fed17 	ldw	r5,-76(fp)
   26c30:	e1bff617 	ldw	r6,-40(fp)
   26c34:	3105883a 	add	r2,r6,r4
   26c38:	e1fff617 	ldw	r7,-40(fp)
   26c3c:	11cd803a 	cmpltu	r6,r2,r7
   26c40:	e1fff717 	ldw	r7,-36(fp)
   26c44:	3947883a 	add	r3,r7,r5
   26c48:	30c9883a 	add	r4,r6,r3
   26c4c:	2007883a 	mov	r3,r4
   26c50:	100d883a 	mov	r6,r2
   26c54:	180f883a 	mov	r7,r3
   26c58:	012eabf4 	movhi	r4,47791
   26c5c:	21373984 	addi	r4,r4,-8986
   26c60:	000b883a 	mov	r5,zero
   26c64:	3105883a 	add	r2,r6,r4
   26c68:	1191803a 	cmpltu	r8,r2,r6
   26c6c:	3947883a 	add	r3,r7,r5
   26c70:	40c9883a 	add	r4,r8,r3
   26c74:	2007883a 	mov	r3,r4
   26c78:	e0bfec15 	stw	r2,-80(fp)
   26c7c:	e0ffed15 	stw	r3,-76(fp)
    r->d[3] = t & nonzero; t >>= 32;
   26c80:	e0ffec17 	ldw	r3,-80(fp)
   26c84:	e0bfeb17 	ldw	r2,-84(fp)
   26c88:	1886703a 	and	r3,r3,r2
   26c8c:	e0bfee17 	ldw	r2,-72(fp)
   26c90:	10c00315 	stw	r3,12(r2)
   26c94:	e0bfed17 	ldw	r2,-76(fp)
   26c98:	1004d83a 	srl	r2,r2,zero
   26c9c:	e0bfec15 	stw	r2,-80(fp)
   26ca0:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[4]) + SECP256K1_N_4;
   26ca4:	e0bfef17 	ldw	r2,-68(fp)
   26ca8:	10800417 	ldw	r2,16(r2)
   26cac:	0084303a 	nor	r2,zero,r2
   26cb0:	102d883a 	mov	r22,r2
   26cb4:	002f883a 	mov	r23,zero
   26cb8:	e13fec17 	ldw	r4,-80(fp)
   26cbc:	e17fed17 	ldw	r5,-76(fp)
   26cc0:	b105883a 	add	r2,r22,r4
   26cc4:	158d803a 	cmpltu	r6,r2,r22
   26cc8:	b947883a 	add	r3,r23,r5
   26ccc:	30c9883a 	add	r4,r6,r3
   26cd0:	2007883a 	mov	r3,r4
   26cd4:	1009883a 	mov	r4,r2
   26cd8:	180b883a 	mov	r5,r3
   26cdc:	01bfff84 	movi	r6,-2
   26ce0:	000f883a 	mov	r7,zero
   26ce4:	2185883a 	add	r2,r4,r6
   26ce8:	1111803a 	cmpltu	r8,r2,r4
   26cec:	29c7883a 	add	r3,r5,r7
   26cf0:	40c9883a 	add	r4,r8,r3
   26cf4:	2007883a 	mov	r3,r4
   26cf8:	e0bfec15 	stw	r2,-80(fp)
   26cfc:	e0ffed15 	stw	r3,-76(fp)
    r->d[4] = t & nonzero; t >>= 32;
   26d00:	e0ffec17 	ldw	r3,-80(fp)
   26d04:	e0bfeb17 	ldw	r2,-84(fp)
   26d08:	1886703a 	and	r3,r3,r2
   26d0c:	e0bfee17 	ldw	r2,-72(fp)
   26d10:	10c00415 	stw	r3,16(r2)
   26d14:	e0bfed17 	ldw	r2,-76(fp)
   26d18:	1004d83a 	srl	r2,r2,zero
   26d1c:	e0bfec15 	stw	r2,-80(fp)
   26d20:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[5]) + SECP256K1_N_5;
   26d24:	e0bfef17 	ldw	r2,-68(fp)
   26d28:	10800517 	ldw	r2,20(r2)
   26d2c:	0084303a 	nor	r2,zero,r2
   26d30:	1029883a 	mov	r20,r2
   26d34:	002b883a 	mov	r21,zero
   26d38:	e13fec17 	ldw	r4,-80(fp)
   26d3c:	e17fed17 	ldw	r5,-76(fp)
   26d40:	a105883a 	add	r2,r20,r4
   26d44:	150d803a 	cmpltu	r6,r2,r20
   26d48:	a947883a 	add	r3,r21,r5
   26d4c:	30c9883a 	add	r4,r6,r3
   26d50:	2007883a 	mov	r3,r4
   26d54:	1009883a 	mov	r4,r2
   26d58:	180b883a 	mov	r5,r3
   26d5c:	01bfffc4 	movi	r6,-1
   26d60:	000f883a 	mov	r7,zero
   26d64:	2185883a 	add	r2,r4,r6
   26d68:	1111803a 	cmpltu	r8,r2,r4
   26d6c:	29c7883a 	add	r3,r5,r7
   26d70:	40c9883a 	add	r4,r8,r3
   26d74:	2007883a 	mov	r3,r4
   26d78:	e0bfec15 	stw	r2,-80(fp)
   26d7c:	e0ffed15 	stw	r3,-76(fp)
    r->d[5] = t & nonzero; t >>= 32;
   26d80:	e0ffec17 	ldw	r3,-80(fp)
   26d84:	e0bfeb17 	ldw	r2,-84(fp)
   26d88:	1886703a 	and	r3,r3,r2
   26d8c:	e0bfee17 	ldw	r2,-72(fp)
   26d90:	10c00515 	stw	r3,20(r2)
   26d94:	e0bfed17 	ldw	r2,-76(fp)
   26d98:	1004d83a 	srl	r2,r2,zero
   26d9c:	e0bfec15 	stw	r2,-80(fp)
   26da0:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[6]) + SECP256K1_N_6;
   26da4:	e0bfef17 	ldw	r2,-68(fp)
   26da8:	10800617 	ldw	r2,24(r2)
   26dac:	0084303a 	nor	r2,zero,r2
   26db0:	1025883a 	mov	r18,r2
   26db4:	0027883a 	mov	r19,zero
   26db8:	e13fec17 	ldw	r4,-80(fp)
   26dbc:	e17fed17 	ldw	r5,-76(fp)
   26dc0:	9105883a 	add	r2,r18,r4
   26dc4:	148d803a 	cmpltu	r6,r2,r18
   26dc8:	9947883a 	add	r3,r19,r5
   26dcc:	30c9883a 	add	r4,r6,r3
   26dd0:	2007883a 	mov	r3,r4
   26dd4:	1009883a 	mov	r4,r2
   26dd8:	180b883a 	mov	r5,r3
   26ddc:	01bfffc4 	movi	r6,-1
   26de0:	000f883a 	mov	r7,zero
   26de4:	2185883a 	add	r2,r4,r6
   26de8:	1111803a 	cmpltu	r8,r2,r4
   26dec:	29c7883a 	add	r3,r5,r7
   26df0:	40c9883a 	add	r4,r8,r3
   26df4:	2007883a 	mov	r3,r4
   26df8:	e0bfec15 	stw	r2,-80(fp)
   26dfc:	e0ffed15 	stw	r3,-76(fp)
    r->d[6] = t & nonzero; t >>= 32;
   26e00:	e0ffec17 	ldw	r3,-80(fp)
   26e04:	e0bfeb17 	ldw	r2,-84(fp)
   26e08:	1886703a 	and	r3,r3,r2
   26e0c:	e0bfee17 	ldw	r2,-72(fp)
   26e10:	10c00615 	stw	r3,24(r2)
   26e14:	e0bfed17 	ldw	r2,-76(fp)
   26e18:	1004d83a 	srl	r2,r2,zero
   26e1c:	e0bfec15 	stw	r2,-80(fp)
   26e20:	e03fed15 	stw	zero,-76(fp)
    t += (uint64_t)(~a->d[7]) + SECP256K1_N_7;
   26e24:	e0bfef17 	ldw	r2,-68(fp)
   26e28:	10800717 	ldw	r2,28(r2)
   26e2c:	0084303a 	nor	r2,zero,r2
   26e30:	1021883a 	mov	r16,r2
   26e34:	0023883a 	mov	r17,zero
   26e38:	e13fec17 	ldw	r4,-80(fp)
   26e3c:	e17fed17 	ldw	r5,-76(fp)
   26e40:	8105883a 	add	r2,r16,r4
   26e44:	140d803a 	cmpltu	r6,r2,r16
   26e48:	8947883a 	add	r3,r17,r5
   26e4c:	30c9883a 	add	r4,r6,r3
   26e50:	2007883a 	mov	r3,r4
   26e54:	1009883a 	mov	r4,r2
   26e58:	180b883a 	mov	r5,r3
   26e5c:	01bfffc4 	movi	r6,-1
   26e60:	000f883a 	mov	r7,zero
   26e64:	2185883a 	add	r2,r4,r6
   26e68:	1111803a 	cmpltu	r8,r2,r4
   26e6c:	29c7883a 	add	r3,r5,r7
   26e70:	40c9883a 	add	r4,r8,r3
   26e74:	2007883a 	mov	r3,r4
   26e78:	e0bfec15 	stw	r2,-80(fp)
   26e7c:	e0ffed15 	stw	r3,-76(fp)
    r->d[7] = t & nonzero;
   26e80:	e0ffec17 	ldw	r3,-80(fp)
   26e84:	e0bfeb17 	ldw	r2,-84(fp)
   26e88:	1886703a 	and	r3,r3,r2
   26e8c:	e0bfee17 	ldw	r2,-72(fp)
   26e90:	10c00715 	stw	r3,28(r2)
}
   26e94:	0001883a 	nop
   26e98:	e6fff804 	addi	sp,fp,-32
   26e9c:	dfc00917 	ldw	ra,36(sp)
   26ea0:	df000817 	ldw	fp,32(sp)
   26ea4:	ddc00717 	ldw	r23,28(sp)
   26ea8:	dd800617 	ldw	r22,24(sp)
   26eac:	dd400517 	ldw	r21,20(sp)
   26eb0:	dd000417 	ldw	r20,16(sp)
   26eb4:	dcc00317 	ldw	r19,12(sp)
   26eb8:	dc800217 	ldw	r18,8(sp)
   26ebc:	dc400117 	ldw	r17,4(sp)
   26ec0:	dc000017 	ldw	r16,0(sp)
   26ec4:	dec00a04 	addi	sp,sp,40
   26ec8:	f800283a 	ret

00026ecc <secp256k1_scalar_is_one>:

SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {
   26ecc:	defffe04 	addi	sp,sp,-8
   26ed0:	df000115 	stw	fp,4(sp)
   26ed4:	df000104 	addi	fp,sp,4
   26ed8:	e13fff15 	stw	r4,-4(fp)
    return ((a->d[0] ^ 1) | a->d[1] | a->d[2] | a->d[3] | a->d[4] | a->d[5] | a->d[6] | a->d[7]) == 0;
   26edc:	e0bfff17 	ldw	r2,-4(fp)
   26ee0:	10800017 	ldw	r2,0(r2)
   26ee4:	10c0005c 	xori	r3,r2,1
   26ee8:	e0bfff17 	ldw	r2,-4(fp)
   26eec:	10800117 	ldw	r2,4(r2)
   26ef0:	1886b03a 	or	r3,r3,r2
   26ef4:	e0bfff17 	ldw	r2,-4(fp)
   26ef8:	10800217 	ldw	r2,8(r2)
   26efc:	1886b03a 	or	r3,r3,r2
   26f00:	e0bfff17 	ldw	r2,-4(fp)
   26f04:	10800317 	ldw	r2,12(r2)
   26f08:	1886b03a 	or	r3,r3,r2
   26f0c:	e0bfff17 	ldw	r2,-4(fp)
   26f10:	10800417 	ldw	r2,16(r2)
   26f14:	1886b03a 	or	r3,r3,r2
   26f18:	e0bfff17 	ldw	r2,-4(fp)
   26f1c:	10800517 	ldw	r2,20(r2)
   26f20:	1886b03a 	or	r3,r3,r2
   26f24:	e0bfff17 	ldw	r2,-4(fp)
   26f28:	10800617 	ldw	r2,24(r2)
   26f2c:	1886b03a 	or	r3,r3,r2
   26f30:	e0bfff17 	ldw	r2,-4(fp)
   26f34:	10800717 	ldw	r2,28(r2)
   26f38:	1884b03a 	or	r2,r3,r2
   26f3c:	1005003a 	cmpeq	r2,r2,zero
   26f40:	10803fcc 	andi	r2,r2,255
}
   26f44:	e037883a 	mov	sp,fp
   26f48:	df000017 	ldw	fp,0(sp)
   26f4c:	dec00104 	addi	sp,sp,4
   26f50:	f800283a 	ret

00026f54 <secp256k1_scalar_is_high>:

static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {
   26f54:	defffc04 	addi	sp,sp,-16
   26f58:	df000315 	stw	fp,12(sp)
   26f5c:	df000304 	addi	fp,sp,12
   26f60:	e13fff15 	stw	r4,-4(fp)
    int yes = 0;
   26f64:	e03ffd15 	stw	zero,-12(fp)
    int no = 0;
   26f68:	e03ffe15 	stw	zero,-8(fp)
    no |= (a->d[7] < SECP256K1_N_H_7);
   26f6c:	e0bfff17 	ldw	r2,-4(fp)
   26f70:	10c00717 	ldw	r3,28(r2)
   26f74:	00a00034 	movhi	r2,32768
   26f78:	10bfff84 	addi	r2,r2,-2
   26f7c:	10c5403a 	cmpgeu	r2,r2,r3
   26f80:	10803fcc 	andi	r2,r2,255
   26f84:	e0fffe17 	ldw	r3,-8(fp)
   26f88:	1884b03a 	or	r2,r3,r2
   26f8c:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[7] > SECP256K1_N_H_7) & ~no;
   26f90:	e0bfff17 	ldw	r2,-4(fp)
   26f94:	10800717 	ldw	r2,28(r2)
   26f98:	1004d7fa 	srli	r2,r2,31
   26f9c:	10c03fcc 	andi	r3,r2,255
   26fa0:	e0bffe17 	ldw	r2,-8(fp)
   26fa4:	0084303a 	nor	r2,zero,r2
   26fa8:	1884703a 	and	r2,r3,r2
   26fac:	e0fffd17 	ldw	r3,-12(fp)
   26fb0:	1884b03a 	or	r2,r3,r2
   26fb4:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[6] < SECP256K1_N_H_6) & ~yes; /* No need for a > check. */
   26fb8:	e0bfff17 	ldw	r2,-4(fp)
   26fbc:	10800617 	ldw	r2,24(r2)
   26fc0:	10bfffd8 	cmpnei	r2,r2,-1
   26fc4:	10c03fcc 	andi	r3,r2,255
   26fc8:	e0bffd17 	ldw	r2,-12(fp)
   26fcc:	0084303a 	nor	r2,zero,r2
   26fd0:	1884703a 	and	r2,r3,r2
   26fd4:	e0fffe17 	ldw	r3,-8(fp)
   26fd8:	1884b03a 	or	r2,r3,r2
   26fdc:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[5] < SECP256K1_N_H_5) & ~yes; /* No need for a > check. */
   26fe0:	e0bfff17 	ldw	r2,-4(fp)
   26fe4:	10800517 	ldw	r2,20(r2)
   26fe8:	10bfffd8 	cmpnei	r2,r2,-1
   26fec:	10c03fcc 	andi	r3,r2,255
   26ff0:	e0bffd17 	ldw	r2,-12(fp)
   26ff4:	0084303a 	nor	r2,zero,r2
   26ff8:	1884703a 	and	r2,r3,r2
   26ffc:	e0fffe17 	ldw	r3,-8(fp)
   27000:	1884b03a 	or	r2,r3,r2
   27004:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[4] < SECP256K1_N_H_4) & ~yes; /* No need for a > check. */
   27008:	e0bfff17 	ldw	r2,-4(fp)
   2700c:	10800417 	ldw	r2,16(r2)
   27010:	10bfffd8 	cmpnei	r2,r2,-1
   27014:	10c03fcc 	andi	r3,r2,255
   27018:	e0bffd17 	ldw	r2,-12(fp)
   2701c:	0084303a 	nor	r2,zero,r2
   27020:	1884703a 	and	r2,r3,r2
   27024:	e0fffe17 	ldw	r3,-8(fp)
   27028:	1884b03a 	or	r2,r3,r2
   2702c:	e0bffe15 	stw	r2,-8(fp)
    no |= (a->d[3] < SECP256K1_N_H_3) & ~yes;
   27030:	e0bfff17 	ldw	r2,-4(fp)
   27034:	10c00317 	ldw	r3,12(r2)
   27038:	009755f4 	movhi	r2,23895
   2703c:	109b9c84 	addi	r2,r2,28274
   27040:	10c5403a 	cmpgeu	r2,r2,r3
   27044:	10c03fcc 	andi	r3,r2,255
   27048:	e0bffd17 	ldw	r2,-12(fp)
   2704c:	0084303a 	nor	r2,zero,r2
   27050:	1884703a 	and	r2,r3,r2
   27054:	e0fffe17 	ldw	r3,-8(fp)
   27058:	1884b03a 	or	r2,r3,r2
   2705c:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[3] > SECP256K1_N_H_3) & ~no;
   27060:	e0bfff17 	ldw	r2,-4(fp)
   27064:	10c00317 	ldw	r3,12(r2)
   27068:	009755f4 	movhi	r2,23895
   2706c:	109b9cc4 	addi	r2,r2,28275
   27070:	10c5803a 	cmpltu	r2,r2,r3
   27074:	10c03fcc 	andi	r3,r2,255
   27078:	e0bffe17 	ldw	r2,-8(fp)
   2707c:	0084303a 	nor	r2,zero,r2
   27080:	1884703a 	and	r2,r3,r2
   27084:	e0fffd17 	ldw	r3,-12(fp)
   27088:	1884b03a 	or	r2,r3,r2
   2708c:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[2] < SECP256K1_N_H_2) & ~yes;
   27090:	e0bfff17 	ldw	r2,-4(fp)
   27094:	10c00217 	ldw	r3,8(r2)
   27098:	0095e934 	movhi	r2,22436
   2709c:	10940704 	addi	r2,r2,20508
   270a0:	10c5403a 	cmpgeu	r2,r2,r3
   270a4:	10c03fcc 	andi	r3,r2,255
   270a8:	e0bffd17 	ldw	r2,-12(fp)
   270ac:	0084303a 	nor	r2,zero,r2
   270b0:	1884703a 	and	r2,r3,r2
   270b4:	e0fffe17 	ldw	r3,-8(fp)
   270b8:	1884b03a 	or	r2,r3,r2
   270bc:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[2] > SECP256K1_N_H_2) & ~no;
   270c0:	e0bfff17 	ldw	r2,-4(fp)
   270c4:	10c00217 	ldw	r3,8(r2)
   270c8:	0095e934 	movhi	r2,22436
   270cc:	10940744 	addi	r2,r2,20509
   270d0:	10c5803a 	cmpltu	r2,r2,r3
   270d4:	10c03fcc 	andi	r3,r2,255
   270d8:	e0bffe17 	ldw	r2,-8(fp)
   270dc:	0084303a 	nor	r2,zero,r2
   270e0:	1884703a 	and	r2,r3,r2
   270e4:	e0fffd17 	ldw	r3,-12(fp)
   270e8:	1884b03a 	or	r2,r3,r2
   270ec:	e0bffd15 	stw	r2,-12(fp)
    no |= (a->d[1] < SECP256K1_N_H_1) & ~yes;
   270f0:	e0bfff17 	ldw	r2,-4(fp)
   270f4:	10c00117 	ldw	r3,4(r2)
   270f8:	00b7fa74 	movhi	r2,57321
   270fc:	108bd144 	addi	r2,r2,12101
   27100:	10c5403a 	cmpgeu	r2,r2,r3
   27104:	10c03fcc 	andi	r3,r2,255
   27108:	e0bffd17 	ldw	r2,-12(fp)
   2710c:	0084303a 	nor	r2,zero,r2
   27110:	1884703a 	and	r2,r3,r2
   27114:	e0fffe17 	ldw	r3,-8(fp)
   27118:	1884b03a 	or	r2,r3,r2
   2711c:	e0bffe15 	stw	r2,-8(fp)
    yes |= (a->d[1] > SECP256K1_N_H_1) & ~no;
   27120:	e0bfff17 	ldw	r2,-4(fp)
   27124:	10c00117 	ldw	r3,4(r2)
   27128:	00b7fa74 	movhi	r2,57321
   2712c:	108bd184 	addi	r2,r2,12102
   27130:	10c5803a 	cmpltu	r2,r2,r3
   27134:	10c03fcc 	andi	r3,r2,255
   27138:	e0bffe17 	ldw	r2,-8(fp)
   2713c:	0084303a 	nor	r2,zero,r2
   27140:	1884703a 	and	r2,r3,r2
   27144:	e0fffd17 	ldw	r3,-12(fp)
   27148:	1884b03a 	or	r2,r3,r2
   2714c:	e0bffd15 	stw	r2,-12(fp)
    yes |= (a->d[0] > SECP256K1_N_H_0) & ~no;
   27150:	e0bfff17 	ldw	r2,-4(fp)
   27154:	10c00017 	ldw	r3,0(r2)
   27158:	009a06f4 	movhi	r2,26651
   2715c:	10882804 	addi	r2,r2,8352
   27160:	10c5803a 	cmpltu	r2,r2,r3
   27164:	10c03fcc 	andi	r3,r2,255
   27168:	e0bffe17 	ldw	r2,-8(fp)
   2716c:	0084303a 	nor	r2,zero,r2
   27170:	1884703a 	and	r2,r3,r2
   27174:	e0fffd17 	ldw	r3,-12(fp)
   27178:	1884b03a 	or	r2,r3,r2
   2717c:	e0bffd15 	stw	r2,-12(fp)
    return yes;
   27180:	e0bffd17 	ldw	r2,-12(fp)
}
   27184:	e037883a 	mov	sp,fp
   27188:	df000017 	ldw	fp,0(sp)
   2718c:	dec00104 	addi	sp,sp,4
   27190:	f800283a 	ret

00027194 <secp256k1_scalar_cond_negate>:

static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {
   27194:	deffce04 	addi	sp,sp,-200
   27198:	dfc03115 	stw	ra,196(sp)
   2719c:	df003015 	stw	fp,192(sp)
   271a0:	ddc02f15 	stw	r23,188(sp)
   271a4:	dd802e15 	stw	r22,184(sp)
   271a8:	dd402d15 	stw	r21,180(sp)
   271ac:	dd002c15 	stw	r20,176(sp)
   271b0:	dcc02b15 	stw	r19,172(sp)
   271b4:	dc802a15 	stw	r18,168(sp)
   271b8:	dc402915 	stw	r17,164(sp)
   271bc:	dc002815 	stw	r16,160(sp)
   271c0:	df003004 	addi	fp,sp,192
   271c4:	e13fd415 	stw	r4,-176(fp)
   271c8:	e17fd515 	stw	r5,-172(fp)
    /* If we are flag = 0, mask = 00...00 and this is a no-op;
     * if we are flag = 1, mask = 11...11 and this is identical to secp256k1_scalar_negate */
    uint32_t mask = !flag - 1;
   271cc:	e0bfd517 	ldw	r2,-172(fp)
   271d0:	1000021e 	bne	r2,zero,271dc <secp256k1_scalar_cond_negate+0x48>
   271d4:	0005883a 	mov	r2,zero
   271d8:	00000106 	br	271e0 <secp256k1_scalar_cond_negate+0x4c>
   271dc:	00bfffc4 	movi	r2,-1
   271e0:	e0bfd015 	stw	r2,-192(fp)
    uint32_t nonzero = 0xFFFFFFFFUL * (secp256k1_scalar_is_zero(r) == 0);
   271e4:	e13fd417 	ldw	r4,-176(fp)
   271e8:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   271ec:	1005003a 	cmpeq	r2,r2,zero
   271f0:	10803fcc 	andi	r2,r2,255
   271f4:	0085c83a 	sub	r2,zero,r2
   271f8:	e0bfd115 	stw	r2,-188(fp)
    uint64_t t = (uint64_t)(r->d[0] ^ mask) + ((SECP256K1_N_0 + 1) & mask);
   271fc:	e0bfd417 	ldw	r2,-176(fp)
   27200:	10c00017 	ldw	r3,0(r2)
   27204:	e0bfd017 	ldw	r2,-192(fp)
   27208:	1884f03a 	xor	r2,r3,r2
   2720c:	1025883a 	mov	r18,r2
   27210:	0027883a 	mov	r19,zero
   27214:	e0bfd017 	ldw	r2,-192(fp)
   27218:	1029883a 	mov	r20,r2
   2721c:	002b883a 	mov	r21,zero
   27220:	00b40db4 	movhi	r2,53302
   27224:	10905084 	addi	r2,r2,16706
   27228:	a0a0703a 	and	r16,r20,r2
   2722c:	a822703a 	and	r17,r21,zero
   27230:	9405883a 	add	r2,r18,r16
   27234:	1489803a 	cmpltu	r4,r2,r18
   27238:	9c47883a 	add	r3,r19,r17
   2723c:	20c9883a 	add	r4,r4,r3
   27240:	2007883a 	mov	r3,r4
   27244:	e0bfd215 	stw	r2,-184(fp)
   27248:	e0ffd315 	stw	r3,-180(fp)
    r->d[0] = t & nonzero; t >>= 32;
   2724c:	e0ffd217 	ldw	r3,-184(fp)
   27250:	e0bfd117 	ldw	r2,-188(fp)
   27254:	1886703a 	and	r3,r3,r2
   27258:	e0bfd417 	ldw	r2,-176(fp)
   2725c:	10c00015 	stw	r3,0(r2)
   27260:	e0bfd317 	ldw	r2,-180(fp)
   27264:	1004d83a 	srl	r2,r2,zero
   27268:	e0bfd215 	stw	r2,-184(fp)
   2726c:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[1] ^ mask) + (SECP256K1_N_1 & mask);
   27270:	e0bfd417 	ldw	r2,-176(fp)
   27274:	10c00117 	ldw	r3,4(r2)
   27278:	e0bfd017 	ldw	r2,-192(fp)
   2727c:	1884f03a 	xor	r2,r3,r2
   27280:	e0bfd615 	stw	r2,-168(fp)
   27284:	e03fd715 	stw	zero,-164(fp)
   27288:	e0bfd017 	ldw	r2,-192(fp)
   2728c:	e0bfd815 	stw	r2,-160(fp)
   27290:	e03fd915 	stw	zero,-156(fp)
   27294:	00aff4b4 	movhi	r2,49106
   27298:	1097a304 	addi	r2,r2,24204
   2729c:	e0ffd817 	ldw	r3,-160(fp)
   272a0:	18ac703a 	and	r22,r3,r2
   272a4:	e13fd917 	ldw	r4,-156(fp)
   272a8:	202e703a 	and	r23,r4,zero
   272ac:	e17fd617 	ldw	r5,-168(fp)
   272b0:	2d85883a 	add	r2,r5,r22
   272b4:	e1bfd617 	ldw	r6,-168(fp)
   272b8:	1189803a 	cmpltu	r4,r2,r6
   272bc:	e17fd717 	ldw	r5,-164(fp)
   272c0:	2dc7883a 	add	r3,r5,r23
   272c4:	20c9883a 	add	r4,r4,r3
   272c8:	2007883a 	mov	r3,r4
   272cc:	100f883a 	mov	r7,r2
   272d0:	1811883a 	mov	r8,r3
   272d4:	e13fd217 	ldw	r4,-184(fp)
   272d8:	e17fd317 	ldw	r5,-180(fp)
   272dc:	21c5883a 	add	r2,r4,r7
   272e0:	110d803a 	cmpltu	r6,r2,r4
   272e4:	2a07883a 	add	r3,r5,r8
   272e8:	30c9883a 	add	r4,r6,r3
   272ec:	2007883a 	mov	r3,r4
   272f0:	e0bfd215 	stw	r2,-184(fp)
   272f4:	e0ffd315 	stw	r3,-180(fp)
    r->d[1] = t & nonzero; t >>= 32;
   272f8:	e0ffd217 	ldw	r3,-184(fp)
   272fc:	e0bfd117 	ldw	r2,-188(fp)
   27300:	1886703a 	and	r3,r3,r2
   27304:	e0bfd417 	ldw	r2,-176(fp)
   27308:	10c00115 	stw	r3,4(r2)
   2730c:	e0bfd317 	ldw	r2,-180(fp)
   27310:	1004d83a 	srl	r2,r2,zero
   27314:	e0bfd215 	stw	r2,-184(fp)
   27318:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[2] ^ mask) + (SECP256K1_N_2 & mask);
   2731c:	e0bfd417 	ldw	r2,-176(fp)
   27320:	10c00217 	ldw	r3,8(r2)
   27324:	e0bfd017 	ldw	r2,-192(fp)
   27328:	1884f03a 	xor	r2,r3,r2
   2732c:	e0bfda15 	stw	r2,-152(fp)
   27330:	e03fdb15 	stw	zero,-148(fp)
   27334:	e0bfd017 	ldw	r2,-192(fp)
   27338:	e0bfdc15 	stw	r2,-144(fp)
   2733c:	e03fdd15 	stw	zero,-140(fp)
   27340:	00abd274 	movhi	r2,44873
   27344:	10a80ec4 	addi	r2,r2,-24517
   27348:	e1bfdc17 	ldw	r6,-144(fp)
   2734c:	3084703a 	and	r2,r6,r2
   27350:	e0bfde15 	stw	r2,-136(fp)
   27354:	e0bfdd17 	ldw	r2,-140(fp)
   27358:	1004703a 	and	r2,r2,zero
   2735c:	e0bfdf15 	stw	r2,-132(fp)
   27360:	e13fda17 	ldw	r4,-152(fp)
   27364:	e17fde17 	ldw	r5,-136(fp)
   27368:	2145883a 	add	r2,r4,r5
   2736c:	e1bfda17 	ldw	r6,-152(fp)
   27370:	1189803a 	cmpltu	r4,r2,r6
   27374:	e17fdb17 	ldw	r5,-148(fp)
   27378:	e1bfdf17 	ldw	r6,-132(fp)
   2737c:	2987883a 	add	r3,r5,r6
   27380:	20c9883a 	add	r4,r4,r3
   27384:	2007883a 	mov	r3,r4
   27388:	100f883a 	mov	r7,r2
   2738c:	1811883a 	mov	r8,r3
   27390:	e13fd217 	ldw	r4,-184(fp)
   27394:	e17fd317 	ldw	r5,-180(fp)
   27398:	21c5883a 	add	r2,r4,r7
   2739c:	110d803a 	cmpltu	r6,r2,r4
   273a0:	2a07883a 	add	r3,r5,r8
   273a4:	30c9883a 	add	r4,r6,r3
   273a8:	2007883a 	mov	r3,r4
   273ac:	e0bfd215 	stw	r2,-184(fp)
   273b0:	e0ffd315 	stw	r3,-180(fp)
    r->d[2] = t & nonzero; t >>= 32;
   273b4:	e0ffd217 	ldw	r3,-184(fp)
   273b8:	e0bfd117 	ldw	r2,-188(fp)
   273bc:	1886703a 	and	r3,r3,r2
   273c0:	e0bfd417 	ldw	r2,-176(fp)
   273c4:	10c00215 	stw	r3,8(r2)
   273c8:	e0bfd317 	ldw	r2,-180(fp)
   273cc:	1004d83a 	srl	r2,r2,zero
   273d0:	e0bfd215 	stw	r2,-184(fp)
   273d4:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[3] ^ mask) + (SECP256K1_N_3 & mask);
   273d8:	e0bfd417 	ldw	r2,-176(fp)
   273dc:	10c00317 	ldw	r3,12(r2)
   273e0:	e0bfd017 	ldw	r2,-192(fp)
   273e4:	1884f03a 	xor	r2,r3,r2
   273e8:	e0bfe015 	stw	r2,-128(fp)
   273ec:	e03fe115 	stw	zero,-124(fp)
   273f0:	e0bfd017 	ldw	r2,-192(fp)
   273f4:	e0bfe215 	stw	r2,-120(fp)
   273f8:	e03fe315 	stw	zero,-116(fp)
   273fc:	00aeabf4 	movhi	r2,47791
   27400:	10b73984 	addi	r2,r2,-8986
   27404:	e0ffe217 	ldw	r3,-120(fp)
   27408:	1884703a 	and	r2,r3,r2
   2740c:	e0bfe415 	stw	r2,-112(fp)
   27410:	e13fe317 	ldw	r4,-116(fp)
   27414:	2008703a 	and	r4,r4,zero
   27418:	e13fe515 	stw	r4,-108(fp)
   2741c:	e17fe017 	ldw	r5,-128(fp)
   27420:	e1bfe417 	ldw	r6,-112(fp)
   27424:	2985883a 	add	r2,r5,r6
   27428:	e17fe017 	ldw	r5,-128(fp)
   2742c:	1149803a 	cmpltu	r4,r2,r5
   27430:	e1bfe117 	ldw	r6,-124(fp)
   27434:	e17fe517 	ldw	r5,-108(fp)
   27438:	3147883a 	add	r3,r6,r5
   2743c:	20c9883a 	add	r4,r4,r3
   27440:	2007883a 	mov	r3,r4
   27444:	100d883a 	mov	r6,r2
   27448:	180f883a 	mov	r7,r3
   2744c:	e13fd217 	ldw	r4,-184(fp)
   27450:	e17fd317 	ldw	r5,-180(fp)
   27454:	2185883a 	add	r2,r4,r6
   27458:	1111803a 	cmpltu	r8,r2,r4
   2745c:	29c7883a 	add	r3,r5,r7
   27460:	40c9883a 	add	r4,r8,r3
   27464:	2007883a 	mov	r3,r4
   27468:	e0bfd215 	stw	r2,-184(fp)
   2746c:	e0ffd315 	stw	r3,-180(fp)
    r->d[3] = t & nonzero; t >>= 32;
   27470:	e0ffd217 	ldw	r3,-184(fp)
   27474:	e0bfd117 	ldw	r2,-188(fp)
   27478:	1886703a 	and	r3,r3,r2
   2747c:	e0bfd417 	ldw	r2,-176(fp)
   27480:	10c00315 	stw	r3,12(r2)
   27484:	e0bfd317 	ldw	r2,-180(fp)
   27488:	1004d83a 	srl	r2,r2,zero
   2748c:	e0bfd215 	stw	r2,-184(fp)
   27490:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[4] ^ mask) + (SECP256K1_N_4 & mask);
   27494:	e0bfd417 	ldw	r2,-176(fp)
   27498:	10c00417 	ldw	r3,16(r2)
   2749c:	e0bfd017 	ldw	r2,-192(fp)
   274a0:	1884f03a 	xor	r2,r3,r2
   274a4:	e0bfe615 	stw	r2,-104(fp)
   274a8:	e03fe715 	stw	zero,-100(fp)
   274ac:	e0bfd017 	ldw	r2,-192(fp)
   274b0:	e0bfe815 	stw	r2,-96(fp)
   274b4:	e03fe915 	stw	zero,-92(fp)
   274b8:	00bfff84 	movi	r2,-2
   274bc:	e1bfe817 	ldw	r6,-96(fp)
   274c0:	3084703a 	and	r2,r6,r2
   274c4:	e0bfea15 	stw	r2,-88(fp)
   274c8:	e0bfe917 	ldw	r2,-92(fp)
   274cc:	1004703a 	and	r2,r2,zero
   274d0:	e0bfeb15 	stw	r2,-84(fp)
   274d4:	e13fe617 	ldw	r4,-104(fp)
   274d8:	e17fea17 	ldw	r5,-88(fp)
   274dc:	2145883a 	add	r2,r4,r5
   274e0:	e1bfe617 	ldw	r6,-104(fp)
   274e4:	1189803a 	cmpltu	r4,r2,r6
   274e8:	e17fe717 	ldw	r5,-100(fp)
   274ec:	e1bfeb17 	ldw	r6,-84(fp)
   274f0:	2987883a 	add	r3,r5,r6
   274f4:	20c9883a 	add	r4,r4,r3
   274f8:	2007883a 	mov	r3,r4
   274fc:	100d883a 	mov	r6,r2
   27500:	180f883a 	mov	r7,r3
   27504:	e13fd217 	ldw	r4,-184(fp)
   27508:	e17fd317 	ldw	r5,-180(fp)
   2750c:	2185883a 	add	r2,r4,r6
   27510:	1111803a 	cmpltu	r8,r2,r4
   27514:	29c7883a 	add	r3,r5,r7
   27518:	40c9883a 	add	r4,r8,r3
   2751c:	2007883a 	mov	r3,r4
   27520:	e0bfd215 	stw	r2,-184(fp)
   27524:	e0ffd315 	stw	r3,-180(fp)
    r->d[4] = t & nonzero; t >>= 32;
   27528:	e0ffd217 	ldw	r3,-184(fp)
   2752c:	e0bfd117 	ldw	r2,-188(fp)
   27530:	1886703a 	and	r3,r3,r2
   27534:	e0bfd417 	ldw	r2,-176(fp)
   27538:	10c00415 	stw	r3,16(r2)
   2753c:	e0bfd317 	ldw	r2,-180(fp)
   27540:	1004d83a 	srl	r2,r2,zero
   27544:	e0bfd215 	stw	r2,-184(fp)
   27548:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[5] ^ mask) + (SECP256K1_N_5 & mask);
   2754c:	e0bfd417 	ldw	r2,-176(fp)
   27550:	10c00517 	ldw	r3,20(r2)
   27554:	e0bfd017 	ldw	r2,-192(fp)
   27558:	1884f03a 	xor	r2,r3,r2
   2755c:	e0bfec15 	stw	r2,-80(fp)
   27560:	e03fed15 	stw	zero,-76(fp)
   27564:	e0bfd017 	ldw	r2,-192(fp)
   27568:	e0bfee15 	stw	r2,-72(fp)
   2756c:	e03fef15 	stw	zero,-68(fp)
   27570:	e13fec17 	ldw	r4,-80(fp)
   27574:	e17fee17 	ldw	r5,-72(fp)
   27578:	2145883a 	add	r2,r4,r5
   2757c:	e1bfec17 	ldw	r6,-80(fp)
   27580:	1189803a 	cmpltu	r4,r2,r6
   27584:	e17fed17 	ldw	r5,-76(fp)
   27588:	e1bfef17 	ldw	r6,-68(fp)
   2758c:	2987883a 	add	r3,r5,r6
   27590:	20c9883a 	add	r4,r4,r3
   27594:	2007883a 	mov	r3,r4
   27598:	100d883a 	mov	r6,r2
   2759c:	180f883a 	mov	r7,r3
   275a0:	e13fd217 	ldw	r4,-184(fp)
   275a4:	e17fd317 	ldw	r5,-180(fp)
   275a8:	2185883a 	add	r2,r4,r6
   275ac:	1111803a 	cmpltu	r8,r2,r4
   275b0:	29c7883a 	add	r3,r5,r7
   275b4:	40c9883a 	add	r4,r8,r3
   275b8:	2007883a 	mov	r3,r4
   275bc:	e0bfd215 	stw	r2,-184(fp)
   275c0:	e0ffd315 	stw	r3,-180(fp)
    r->d[5] = t & nonzero; t >>= 32;
   275c4:	e0ffd217 	ldw	r3,-184(fp)
   275c8:	e0bfd117 	ldw	r2,-188(fp)
   275cc:	1886703a 	and	r3,r3,r2
   275d0:	e0bfd417 	ldw	r2,-176(fp)
   275d4:	10c00515 	stw	r3,20(r2)
   275d8:	e0bfd317 	ldw	r2,-180(fp)
   275dc:	1004d83a 	srl	r2,r2,zero
   275e0:	e0bfd215 	stw	r2,-184(fp)
   275e4:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[6] ^ mask) + (SECP256K1_N_6 & mask);
   275e8:	e0bfd417 	ldw	r2,-176(fp)
   275ec:	10c00617 	ldw	r3,24(r2)
   275f0:	e0bfd017 	ldw	r2,-192(fp)
   275f4:	1884f03a 	xor	r2,r3,r2
   275f8:	e0bff015 	stw	r2,-64(fp)
   275fc:	e03ff115 	stw	zero,-60(fp)
   27600:	e0bfd017 	ldw	r2,-192(fp)
   27604:	e0bff215 	stw	r2,-56(fp)
   27608:	e03ff315 	stw	zero,-52(fp)
   2760c:	e13ff017 	ldw	r4,-64(fp)
   27610:	e17ff217 	ldw	r5,-56(fp)
   27614:	2145883a 	add	r2,r4,r5
   27618:	e1bff017 	ldw	r6,-64(fp)
   2761c:	1189803a 	cmpltu	r4,r2,r6
   27620:	e17ff117 	ldw	r5,-60(fp)
   27624:	e1bff317 	ldw	r6,-52(fp)
   27628:	2987883a 	add	r3,r5,r6
   2762c:	20c9883a 	add	r4,r4,r3
   27630:	2007883a 	mov	r3,r4
   27634:	100d883a 	mov	r6,r2
   27638:	180f883a 	mov	r7,r3
   2763c:	e13fd217 	ldw	r4,-184(fp)
   27640:	e17fd317 	ldw	r5,-180(fp)
   27644:	2185883a 	add	r2,r4,r6
   27648:	1111803a 	cmpltu	r8,r2,r4
   2764c:	29c7883a 	add	r3,r5,r7
   27650:	40c9883a 	add	r4,r8,r3
   27654:	2007883a 	mov	r3,r4
   27658:	e0bfd215 	stw	r2,-184(fp)
   2765c:	e0ffd315 	stw	r3,-180(fp)
    r->d[6] = t & nonzero; t >>= 32;
   27660:	e0ffd217 	ldw	r3,-184(fp)
   27664:	e0bfd117 	ldw	r2,-188(fp)
   27668:	1886703a 	and	r3,r3,r2
   2766c:	e0bfd417 	ldw	r2,-176(fp)
   27670:	10c00615 	stw	r3,24(r2)
   27674:	e0bfd317 	ldw	r2,-180(fp)
   27678:	1004d83a 	srl	r2,r2,zero
   2767c:	e0bfd215 	stw	r2,-184(fp)
   27680:	e03fd315 	stw	zero,-180(fp)
    t += (uint64_t)(r->d[7] ^ mask) + (SECP256K1_N_7 & mask);
   27684:	e0bfd417 	ldw	r2,-176(fp)
   27688:	10c00717 	ldw	r3,28(r2)
   2768c:	e0bfd017 	ldw	r2,-192(fp)
   27690:	1884f03a 	xor	r2,r3,r2
   27694:	e0bff415 	stw	r2,-48(fp)
   27698:	e03ff515 	stw	zero,-44(fp)
   2769c:	e0bfd017 	ldw	r2,-192(fp)
   276a0:	e0bff615 	stw	r2,-40(fp)
   276a4:	e03ff715 	stw	zero,-36(fp)
   276a8:	e13ff417 	ldw	r4,-48(fp)
   276ac:	e17ff617 	ldw	r5,-40(fp)
   276b0:	2145883a 	add	r2,r4,r5
   276b4:	e1bff417 	ldw	r6,-48(fp)
   276b8:	1189803a 	cmpltu	r4,r2,r6
   276bc:	e17ff517 	ldw	r5,-44(fp)
   276c0:	e1bff717 	ldw	r6,-36(fp)
   276c4:	2987883a 	add	r3,r5,r6
   276c8:	20c9883a 	add	r4,r4,r3
   276cc:	2007883a 	mov	r3,r4
   276d0:	100d883a 	mov	r6,r2
   276d4:	180f883a 	mov	r7,r3
   276d8:	e13fd217 	ldw	r4,-184(fp)
   276dc:	e17fd317 	ldw	r5,-180(fp)
   276e0:	2185883a 	add	r2,r4,r6
   276e4:	1111803a 	cmpltu	r8,r2,r4
   276e8:	29c7883a 	add	r3,r5,r7
   276ec:	40c9883a 	add	r4,r8,r3
   276f0:	2007883a 	mov	r3,r4
   276f4:	e0bfd215 	stw	r2,-184(fp)
   276f8:	e0ffd315 	stw	r3,-180(fp)
    r->d[7] = t & nonzero;
   276fc:	e0ffd217 	ldw	r3,-184(fp)
   27700:	e0bfd117 	ldw	r2,-188(fp)
   27704:	1886703a 	and	r3,r3,r2
   27708:	e0bfd417 	ldw	r2,-176(fp)
   2770c:	10c00715 	stw	r3,28(r2)
    return 2 * (mask == 0) - 1;
   27710:	e0bfd017 	ldw	r2,-192(fp)
   27714:	1000021e 	bne	r2,zero,27720 <secp256k1_scalar_cond_negate+0x58c>
   27718:	00800044 	movi	r2,1
   2771c:	00000106 	br	27724 <secp256k1_scalar_cond_negate+0x590>
   27720:	00bfffc4 	movi	r2,-1
}
   27724:	e6fff804 	addi	sp,fp,-32
   27728:	dfc00917 	ldw	ra,36(sp)
   2772c:	df000817 	ldw	fp,32(sp)
   27730:	ddc00717 	ldw	r23,28(sp)
   27734:	dd800617 	ldw	r22,24(sp)
   27738:	dd400517 	ldw	r21,20(sp)
   2773c:	dd000417 	ldw	r20,16(sp)
   27740:	dcc00317 	ldw	r19,12(sp)
   27744:	dc800217 	ldw	r18,8(sp)
   27748:	dc400117 	ldw	r17,4(sp)
   2774c:	dc000017 	ldw	r16,0(sp)
   27750:	dec00a04 	addi	sp,sp,40
   27754:	f800283a 	ret

00027758 <secp256k1_scalar_reduce_512>:
    c0 = c1; \
    c1 = 0; \
    VERIFY_CHECK(c2 == 0); \
}

static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint32_t *l) {
   27758:	defe0b04 	addi	sp,sp,-2004
   2775c:	dfc1f415 	stw	ra,2000(sp)
   27760:	df01f315 	stw	fp,1996(sp)
   27764:	ddc1f215 	stw	r23,1992(sp)
   27768:	dd81f115 	stw	r22,1988(sp)
   2776c:	dd41f015 	stw	r21,1984(sp)
   27770:	dd01ef15 	stw	r20,1980(sp)
   27774:	dcc1ee15 	stw	r19,1976(sp)
   27778:	dc81ed15 	stw	r18,1972(sp)
   2777c:	dc41ec15 	stw	r17,1968(sp)
   27780:	dc01eb15 	stw	r16,1964(sp)
   27784:	df01f304 	addi	fp,sp,1996
   27788:	e13f1615 	stw	r4,-936(fp)
   2778c:	e17f1715 	stw	r5,-932(fp)
    uint64_t c;
    uint32_t n0 = l[8], n1 = l[9], n2 = l[10], n3 = l[11], n4 = l[12], n5 = l[13], n6 = l[14], n7 = l[15];
   27790:	e0bf1717 	ldw	r2,-932(fp)
   27794:	10800817 	ldw	r2,32(r2)
   27798:	e0be0e15 	stw	r2,-1992(fp)
   2779c:	e0bf1717 	ldw	r2,-932(fp)
   277a0:	10800917 	ldw	r2,36(r2)
   277a4:	e0be0f15 	stw	r2,-1988(fp)
   277a8:	e0bf1717 	ldw	r2,-932(fp)
   277ac:	10800a17 	ldw	r2,40(r2)
   277b0:	e0be1015 	stw	r2,-1984(fp)
   277b4:	e0bf1717 	ldw	r2,-932(fp)
   277b8:	10800b17 	ldw	r2,44(r2)
   277bc:	e0be1115 	stw	r2,-1980(fp)
   277c0:	e0bf1717 	ldw	r2,-932(fp)
   277c4:	10800c17 	ldw	r2,48(r2)
   277c8:	e0be1215 	stw	r2,-1976(fp)
   277cc:	e0bf1717 	ldw	r2,-932(fp)
   277d0:	10800d17 	ldw	r2,52(r2)
   277d4:	e0be1315 	stw	r2,-1972(fp)
   277d8:	e0bf1717 	ldw	r2,-932(fp)
   277dc:	10800e17 	ldw	r2,56(r2)
   277e0:	e0be1415 	stw	r2,-1968(fp)
   277e4:	e0bf1717 	ldw	r2,-932(fp)
   277e8:	10800f17 	ldw	r2,60(r2)
   277ec:	e0be1515 	stw	r2,-1964(fp)
    /* 96 bit accumulator. */
    uint32_t c0, c1, c2;

    /* Reduce 512 bits into 385. */
    /* m[0..12] = l[0..7] + n[0..7] * SECP256K1_N_C. */
    c0 = l[0]; c1 = 0; c2 = 0;
   277f0:	e0bf1717 	ldw	r2,-932(fp)
   277f4:	10800017 	ldw	r2,0(r2)
   277f8:	e0be1615 	stw	r2,-1960(fp)
   277fc:	e03e1715 	stw	zero,-1956(fp)
   27800:	e03e1815 	stw	zero,-1952(fp)
    muladd_fast(n0, SECP256K1_N_C_0);
   27804:	e0be0e17 	ldw	r2,-1992(fp)
   27808:	1011883a 	mov	r8,r2
   2780c:	0013883a 	mov	r9,zero
   27810:	018bf2b4 	movhi	r6,12234
   27814:	31afafc4 	addi	r6,r6,-16705
   27818:	000f883a 	mov	r7,zero
   2781c:	4009883a 	mov	r4,r8
   27820:	480b883a 	mov	r5,r9
   27824:	00438e00 	call	438e0 <__muldi3>
   27828:	1009883a 	mov	r4,r2
   2782c:	180b883a 	mov	r5,r3
   27830:	e13e1915 	stw	r4,-1948(fp)
   27834:	e17e1a15 	stw	r5,-1944(fp)
   27838:	e0be1a17 	ldw	r2,-1944(fp)
   2783c:	1020d83a 	srl	r16,r2,zero
   27840:	0023883a 	mov	r17,zero
   27844:	e43e1b15 	stw	r16,-1940(fp)
   27848:	e0be1917 	ldw	r2,-1948(fp)
   2784c:	e0be1c15 	stw	r2,-1936(fp)
   27850:	e0fe1617 	ldw	r3,-1960(fp)
   27854:	e0be1c17 	ldw	r2,-1936(fp)
   27858:	1885883a 	add	r2,r3,r2
   2785c:	e0be1615 	stw	r2,-1960(fp)
   27860:	e0fe1617 	ldw	r3,-1960(fp)
   27864:	e0be1c17 	ldw	r2,-1936(fp)
   27868:	1880022e 	bgeu	r3,r2,27874 <secp256k1_scalar_reduce_512+0x11c>
   2786c:	00c00044 	movi	r3,1
   27870:	00000106 	br	27878 <secp256k1_scalar_reduce_512+0x120>
   27874:	0007883a 	mov	r3,zero
   27878:	e0be1b17 	ldw	r2,-1940(fp)
   2787c:	10c5883a 	add	r2,r2,r3
   27880:	e0be1b15 	stw	r2,-1940(fp)
   27884:	e0fe1717 	ldw	r3,-1956(fp)
   27888:	e0be1b17 	ldw	r2,-1940(fp)
   2788c:	1885883a 	add	r2,r3,r2
   27890:	e0be1715 	stw	r2,-1956(fp)
   27894:	e0fe1717 	ldw	r3,-1956(fp)
   27898:	e0be1b17 	ldw	r2,-1940(fp)
   2789c:	1885803a 	cmpltu	r2,r3,r2
   278a0:	10803fcc 	andi	r2,r2,255
   278a4:	10000d26 	beq	r2,zero,278dc <secp256k1_scalar_reduce_512+0x184>
   278a8:	d0a01617 	ldw	r2,-32680(gp)
   278ac:	10c00317 	ldw	r3,12(r2)
   278b0:	00800174 	movhi	r2,5
   278b4:	1096b904 	addi	r2,r2,23268
   278b8:	d8800015 	stw	r2,0(sp)
   278bc:	01c05a44 	movi	r7,361
   278c0:	01800174 	movhi	r6,5
   278c4:	31964204 	addi	r6,r6,22792
   278c8:	01400174 	movhi	r5,5
   278cc:	2951e804 	addi	r5,r5,18336
   278d0:	1809883a 	mov	r4,r3
   278d4:	00461000 	call	46100 <fprintf>
   278d8:	0045fd40 	call	45fd4 <abort>
    extract_fast(m0);
   278dc:	e0be1617 	ldw	r2,-1960(fp)
   278e0:	e0be1d15 	stw	r2,-1932(fp)
   278e4:	e0be1717 	ldw	r2,-1956(fp)
   278e8:	e0be1615 	stw	r2,-1960(fp)
   278ec:	e03e1715 	stw	zero,-1956(fp)
   278f0:	e0be1817 	ldw	r2,-1952(fp)
   278f4:	1004c03a 	cmpne	r2,r2,zero
   278f8:	10803fcc 	andi	r2,r2,255
   278fc:	10000d26 	beq	r2,zero,27934 <secp256k1_scalar_reduce_512+0x1dc>
   27900:	d0a01617 	ldw	r2,-32680(gp)
   27904:	10c00317 	ldw	r3,12(r2)
   27908:	00800174 	movhi	r2,5
   2790c:	1096c104 	addi	r2,r2,23300
   27910:	d8800015 	stw	r2,0(sp)
   27914:	01c05a84 	movi	r7,362
   27918:	01800174 	movhi	r6,5
   2791c:	31964204 	addi	r6,r6,22792
   27920:	01400174 	movhi	r5,5
   27924:	2951e804 	addi	r5,r5,18336
   27928:	1809883a 	mov	r4,r3
   2792c:	00461000 	call	46100 <fprintf>
   27930:	0045fd40 	call	45fd4 <abort>
    sumadd_fast(l[1]);
   27934:	e0bf1717 	ldw	r2,-932(fp)
   27938:	10800104 	addi	r2,r2,4
   2793c:	10c00017 	ldw	r3,0(r2)
   27940:	e0be1617 	ldw	r2,-1960(fp)
   27944:	10c5883a 	add	r2,r2,r3
   27948:	e0be1615 	stw	r2,-1960(fp)
   2794c:	e0bf1717 	ldw	r2,-932(fp)
   27950:	10800104 	addi	r2,r2,4
   27954:	10c00017 	ldw	r3,0(r2)
   27958:	e0be1617 	ldw	r2,-1960(fp)
   2795c:	10c0022e 	bgeu	r2,r3,27968 <secp256k1_scalar_reduce_512+0x210>
   27960:	00c00044 	movi	r3,1
   27964:	00000106 	br	2796c <secp256k1_scalar_reduce_512+0x214>
   27968:	0007883a 	mov	r3,zero
   2796c:	e0be1717 	ldw	r2,-1956(fp)
   27970:	10c5883a 	add	r2,r2,r3
   27974:	e0be1715 	stw	r2,-1956(fp)
   27978:	e0be1717 	ldw	r2,-1956(fp)
   2797c:	1005003a 	cmpeq	r2,r2,zero
   27980:	1009883a 	mov	r4,r2
   27984:	e0bf1717 	ldw	r2,-932(fp)
   27988:	10800104 	addi	r2,r2,4
   2798c:	10c00017 	ldw	r3,0(r2)
   27990:	e0be1617 	ldw	r2,-1960(fp)
   27994:	10c5803a 	cmpltu	r2,r2,r3
   27998:	2084703a 	and	r2,r4,r2
   2799c:	10803fcc 	andi	r2,r2,255
   279a0:	10000d26 	beq	r2,zero,279d8 <secp256k1_scalar_reduce_512+0x280>
   279a4:	d0a01617 	ldw	r2,-32680(gp)
   279a8:	10c00317 	ldw	r3,12(r2)
   279ac:	00800174 	movhi	r2,5
   279b0:	1096c904 	addi	r2,r2,23332
   279b4:	d8800015 	stw	r2,0(sp)
   279b8:	01c05ac4 	movi	r7,363
   279bc:	01800174 	movhi	r6,5
   279c0:	31964204 	addi	r6,r6,22792
   279c4:	01400174 	movhi	r5,5
   279c8:	2951e804 	addi	r5,r5,18336
   279cc:	1809883a 	mov	r4,r3
   279d0:	00461000 	call	46100 <fprintf>
   279d4:	0045fd40 	call	45fd4 <abort>
   279d8:	e0be1817 	ldw	r2,-1952(fp)
   279dc:	1004c03a 	cmpne	r2,r2,zero
   279e0:	10803fcc 	andi	r2,r2,255
   279e4:	10000d26 	beq	r2,zero,27a1c <secp256k1_scalar_reduce_512+0x2c4>
   279e8:	d0a01617 	ldw	r2,-32680(gp)
   279ec:	10c00317 	ldw	r3,12(r2)
   279f0:	00800174 	movhi	r2,5
   279f4:	1096c104 	addi	r2,r2,23300
   279f8:	d8800015 	stw	r2,0(sp)
   279fc:	01c05ac4 	movi	r7,363
   27a00:	01800174 	movhi	r6,5
   27a04:	31964204 	addi	r6,r6,22792
   27a08:	01400174 	movhi	r5,5
   27a0c:	2951e804 	addi	r5,r5,18336
   27a10:	1809883a 	mov	r4,r3
   27a14:	00461000 	call	46100 <fprintf>
   27a18:	0045fd40 	call	45fd4 <abort>
    muladd(n1, SECP256K1_N_C_0);
   27a1c:	e0be0f17 	ldw	r2,-1988(fp)
   27a20:	102d883a 	mov	r22,r2
   27a24:	002f883a 	mov	r23,zero
   27a28:	018bf2b4 	movhi	r6,12234
   27a2c:	31afafc4 	addi	r6,r6,-16705
   27a30:	000f883a 	mov	r7,zero
   27a34:	b009883a 	mov	r4,r22
   27a38:	b80b883a 	mov	r5,r23
   27a3c:	00438e00 	call	438e0 <__muldi3>
   27a40:	1009883a 	mov	r4,r2
   27a44:	180b883a 	mov	r5,r3
   27a48:	e13e1e15 	stw	r4,-1928(fp)
   27a4c:	e17e1f15 	stw	r5,-1924(fp)
   27a50:	e0be1f17 	ldw	r2,-1924(fp)
   27a54:	1024d83a 	srl	r18,r2,zero
   27a58:	0027883a 	mov	r19,zero
   27a5c:	e4be2015 	stw	r18,-1920(fp)
   27a60:	e0be1e17 	ldw	r2,-1928(fp)
   27a64:	e0be2115 	stw	r2,-1916(fp)
   27a68:	e0fe1617 	ldw	r3,-1960(fp)
   27a6c:	e0be2117 	ldw	r2,-1916(fp)
   27a70:	1885883a 	add	r2,r3,r2
   27a74:	e0be1615 	stw	r2,-1960(fp)
   27a78:	e0fe1617 	ldw	r3,-1960(fp)
   27a7c:	e0be2117 	ldw	r2,-1916(fp)
   27a80:	1880022e 	bgeu	r3,r2,27a8c <secp256k1_scalar_reduce_512+0x334>
   27a84:	00c00044 	movi	r3,1
   27a88:	00000106 	br	27a90 <secp256k1_scalar_reduce_512+0x338>
   27a8c:	0007883a 	mov	r3,zero
   27a90:	e0be2017 	ldw	r2,-1920(fp)
   27a94:	10c5883a 	add	r2,r2,r3
   27a98:	e0be2015 	stw	r2,-1920(fp)
   27a9c:	e0fe1717 	ldw	r3,-1956(fp)
   27aa0:	e0be2017 	ldw	r2,-1920(fp)
   27aa4:	1885883a 	add	r2,r3,r2
   27aa8:	e0be1715 	stw	r2,-1956(fp)
   27aac:	e0fe1717 	ldw	r3,-1956(fp)
   27ab0:	e0be2017 	ldw	r2,-1920(fp)
   27ab4:	1880022e 	bgeu	r3,r2,27ac0 <secp256k1_scalar_reduce_512+0x368>
   27ab8:	00c00044 	movi	r3,1
   27abc:	00000106 	br	27ac4 <secp256k1_scalar_reduce_512+0x36c>
   27ac0:	0007883a 	mov	r3,zero
   27ac4:	e0be1817 	ldw	r2,-1952(fp)
   27ac8:	10c5883a 	add	r2,r2,r3
   27acc:	e0be1815 	stw	r2,-1952(fp)
   27ad0:	e0fe1717 	ldw	r3,-1956(fp)
   27ad4:	e0be2017 	ldw	r2,-1920(fp)
   27ad8:	1885803a 	cmpltu	r2,r3,r2
   27adc:	10803fcc 	andi	r2,r2,255
   27ae0:	10001126 	beq	r2,zero,27b28 <secp256k1_scalar_reduce_512+0x3d0>
   27ae4:	e0be1817 	ldw	r2,-1952(fp)
   27ae8:	1005003a 	cmpeq	r2,r2,zero
   27aec:	10803fcc 	andi	r2,r2,255
   27af0:	10000d26 	beq	r2,zero,27b28 <secp256k1_scalar_reduce_512+0x3d0>
   27af4:	d0a01617 	ldw	r2,-32680(gp)
   27af8:	10c00317 	ldw	r3,12(r2)
   27afc:	00800174 	movhi	r2,5
   27b00:	1096d604 	addi	r2,r2,23384
   27b04:	d8800015 	stw	r2,0(sp)
   27b08:	01c05b04 	movi	r7,364
   27b0c:	01800174 	movhi	r6,5
   27b10:	31964204 	addi	r6,r6,22792
   27b14:	01400174 	movhi	r5,5
   27b18:	2951e804 	addi	r5,r5,18336
   27b1c:	1809883a 	mov	r4,r3
   27b20:	00461000 	call	46100 <fprintf>
   27b24:	0045fd40 	call	45fd4 <abort>
    muladd(n0, SECP256K1_N_C_1);
   27b28:	e0be0e17 	ldw	r2,-1992(fp)
   27b2c:	e0bf1815 	stw	r2,-928(fp)
   27b30:	e03f1915 	stw	zero,-924(fp)
   27b34:	01900bb4 	movhi	r6,16430
   27b38:	31a85cc4 	addi	r6,r6,-24205
   27b3c:	000f883a 	mov	r7,zero
   27b40:	e13f1817 	ldw	r4,-928(fp)
   27b44:	e17f1917 	ldw	r5,-924(fp)
   27b48:	00438e00 	call	438e0 <__muldi3>
   27b4c:	1009883a 	mov	r4,r2
   27b50:	180b883a 	mov	r5,r3
   27b54:	e13e2215 	stw	r4,-1912(fp)
   27b58:	e17e2315 	stw	r5,-1908(fp)
   27b5c:	e0be2317 	ldw	r2,-1908(fp)
   27b60:	1028d83a 	srl	r20,r2,zero
   27b64:	002b883a 	mov	r21,zero
   27b68:	e53e2415 	stw	r20,-1904(fp)
   27b6c:	e0be2217 	ldw	r2,-1912(fp)
   27b70:	e0be2515 	stw	r2,-1900(fp)
   27b74:	e0fe1617 	ldw	r3,-1960(fp)
   27b78:	e0be2517 	ldw	r2,-1900(fp)
   27b7c:	1885883a 	add	r2,r3,r2
   27b80:	e0be1615 	stw	r2,-1960(fp)
   27b84:	e0fe1617 	ldw	r3,-1960(fp)
   27b88:	e0be2517 	ldw	r2,-1900(fp)
   27b8c:	1880022e 	bgeu	r3,r2,27b98 <secp256k1_scalar_reduce_512+0x440>
   27b90:	00c00044 	movi	r3,1
   27b94:	00000106 	br	27b9c <secp256k1_scalar_reduce_512+0x444>
   27b98:	0007883a 	mov	r3,zero
   27b9c:	e0be2417 	ldw	r2,-1904(fp)
   27ba0:	10c5883a 	add	r2,r2,r3
   27ba4:	e0be2415 	stw	r2,-1904(fp)
   27ba8:	e0fe1717 	ldw	r3,-1956(fp)
   27bac:	e0be2417 	ldw	r2,-1904(fp)
   27bb0:	1885883a 	add	r2,r3,r2
   27bb4:	e0be1715 	stw	r2,-1956(fp)
   27bb8:	e0fe1717 	ldw	r3,-1956(fp)
   27bbc:	e0be2417 	ldw	r2,-1904(fp)
   27bc0:	1880022e 	bgeu	r3,r2,27bcc <secp256k1_scalar_reduce_512+0x474>
   27bc4:	00c00044 	movi	r3,1
   27bc8:	00000106 	br	27bd0 <secp256k1_scalar_reduce_512+0x478>
   27bcc:	0007883a 	mov	r3,zero
   27bd0:	e0be1817 	ldw	r2,-1952(fp)
   27bd4:	10c5883a 	add	r2,r2,r3
   27bd8:	e0be1815 	stw	r2,-1952(fp)
   27bdc:	e0fe1717 	ldw	r3,-1956(fp)
   27be0:	e0be2417 	ldw	r2,-1904(fp)
   27be4:	1885803a 	cmpltu	r2,r3,r2
   27be8:	10803fcc 	andi	r2,r2,255
   27bec:	10001126 	beq	r2,zero,27c34 <secp256k1_scalar_reduce_512+0x4dc>
   27bf0:	e0be1817 	ldw	r2,-1952(fp)
   27bf4:	1005003a 	cmpeq	r2,r2,zero
   27bf8:	10803fcc 	andi	r2,r2,255
   27bfc:	10000d26 	beq	r2,zero,27c34 <secp256k1_scalar_reduce_512+0x4dc>
   27c00:	d0a01617 	ldw	r2,-32680(gp)
   27c04:	10c00317 	ldw	r3,12(r2)
   27c08:	00800174 	movhi	r2,5
   27c0c:	1096d604 	addi	r2,r2,23384
   27c10:	d8800015 	stw	r2,0(sp)
   27c14:	01c05b44 	movi	r7,365
   27c18:	01800174 	movhi	r6,5
   27c1c:	31964204 	addi	r6,r6,22792
   27c20:	01400174 	movhi	r5,5
   27c24:	2951e804 	addi	r5,r5,18336
   27c28:	1809883a 	mov	r4,r3
   27c2c:	00461000 	call	46100 <fprintf>
   27c30:	0045fd40 	call	45fd4 <abort>
    extract(m1);
   27c34:	e0be1617 	ldw	r2,-1960(fp)
   27c38:	e0be2615 	stw	r2,-1896(fp)
   27c3c:	e0be1717 	ldw	r2,-1956(fp)
   27c40:	e0be1615 	stw	r2,-1960(fp)
   27c44:	e0be1817 	ldw	r2,-1952(fp)
   27c48:	e0be1715 	stw	r2,-1956(fp)
   27c4c:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[2]);
   27c50:	e0bf1717 	ldw	r2,-932(fp)
   27c54:	10800204 	addi	r2,r2,8
   27c58:	10c00017 	ldw	r3,0(r2)
   27c5c:	e0be1617 	ldw	r2,-1960(fp)
   27c60:	10c5883a 	add	r2,r2,r3
   27c64:	e0be1615 	stw	r2,-1960(fp)
   27c68:	e0bf1717 	ldw	r2,-932(fp)
   27c6c:	10800204 	addi	r2,r2,8
   27c70:	10c00017 	ldw	r3,0(r2)
   27c74:	e0be1617 	ldw	r2,-1960(fp)
   27c78:	10c5803a 	cmpltu	r2,r2,r3
   27c7c:	10803fcc 	andi	r2,r2,255
   27c80:	e0be2715 	stw	r2,-1892(fp)
   27c84:	e0fe1717 	ldw	r3,-1956(fp)
   27c88:	e0be2717 	ldw	r2,-1892(fp)
   27c8c:	1885883a 	add	r2,r3,r2
   27c90:	e0be1715 	stw	r2,-1956(fp)
   27c94:	e0fe1717 	ldw	r3,-1956(fp)
   27c98:	e0be2717 	ldw	r2,-1892(fp)
   27c9c:	1880022e 	bgeu	r3,r2,27ca8 <secp256k1_scalar_reduce_512+0x550>
   27ca0:	00c00044 	movi	r3,1
   27ca4:	00000106 	br	27cac <secp256k1_scalar_reduce_512+0x554>
   27ca8:	0007883a 	mov	r3,zero
   27cac:	e0be1817 	ldw	r2,-1952(fp)
   27cb0:	10c5883a 	add	r2,r2,r3
   27cb4:	e0be1815 	stw	r2,-1952(fp)
    muladd(n2, SECP256K1_N_C_0);
   27cb8:	e0be1017 	ldw	r2,-1984(fp)
   27cbc:	e0bf1a15 	stw	r2,-920(fp)
   27cc0:	e03f1b15 	stw	zero,-916(fp)
   27cc4:	018bf2b4 	movhi	r6,12234
   27cc8:	31afafc4 	addi	r6,r6,-16705
   27ccc:	000f883a 	mov	r7,zero
   27cd0:	e13f1a17 	ldw	r4,-920(fp)
   27cd4:	e17f1b17 	ldw	r5,-916(fp)
   27cd8:	00438e00 	call	438e0 <__muldi3>
   27cdc:	1009883a 	mov	r4,r2
   27ce0:	180b883a 	mov	r5,r3
   27ce4:	e13e2815 	stw	r4,-1888(fp)
   27ce8:	e17e2915 	stw	r5,-1884(fp)
   27cec:	e0be2917 	ldw	r2,-1884(fp)
   27cf0:	1004d83a 	srl	r2,r2,zero
   27cf4:	e0bf1c15 	stw	r2,-912(fp)
   27cf8:	e03f1d15 	stw	zero,-908(fp)
   27cfc:	e0bf1c17 	ldw	r2,-912(fp)
   27d00:	e0be2a15 	stw	r2,-1880(fp)
   27d04:	e0be2817 	ldw	r2,-1888(fp)
   27d08:	e0be2b15 	stw	r2,-1876(fp)
   27d0c:	e0fe1617 	ldw	r3,-1960(fp)
   27d10:	e0be2b17 	ldw	r2,-1876(fp)
   27d14:	1885883a 	add	r2,r3,r2
   27d18:	e0be1615 	stw	r2,-1960(fp)
   27d1c:	e0fe1617 	ldw	r3,-1960(fp)
   27d20:	e0be2b17 	ldw	r2,-1876(fp)
   27d24:	1880022e 	bgeu	r3,r2,27d30 <secp256k1_scalar_reduce_512+0x5d8>
   27d28:	00c00044 	movi	r3,1
   27d2c:	00000106 	br	27d34 <secp256k1_scalar_reduce_512+0x5dc>
   27d30:	0007883a 	mov	r3,zero
   27d34:	e0be2a17 	ldw	r2,-1880(fp)
   27d38:	10c5883a 	add	r2,r2,r3
   27d3c:	e0be2a15 	stw	r2,-1880(fp)
   27d40:	e0fe1717 	ldw	r3,-1956(fp)
   27d44:	e0be2a17 	ldw	r2,-1880(fp)
   27d48:	1885883a 	add	r2,r3,r2
   27d4c:	e0be1715 	stw	r2,-1956(fp)
   27d50:	e0fe1717 	ldw	r3,-1956(fp)
   27d54:	e0be2a17 	ldw	r2,-1880(fp)
   27d58:	1880022e 	bgeu	r3,r2,27d64 <secp256k1_scalar_reduce_512+0x60c>
   27d5c:	00c00044 	movi	r3,1
   27d60:	00000106 	br	27d68 <secp256k1_scalar_reduce_512+0x610>
   27d64:	0007883a 	mov	r3,zero
   27d68:	e0be1817 	ldw	r2,-1952(fp)
   27d6c:	10c5883a 	add	r2,r2,r3
   27d70:	e0be1815 	stw	r2,-1952(fp)
   27d74:	e0fe1717 	ldw	r3,-1956(fp)
   27d78:	e0be2a17 	ldw	r2,-1880(fp)
   27d7c:	1885803a 	cmpltu	r2,r3,r2
   27d80:	10803fcc 	andi	r2,r2,255
   27d84:	10001126 	beq	r2,zero,27dcc <secp256k1_scalar_reduce_512+0x674>
   27d88:	e0be1817 	ldw	r2,-1952(fp)
   27d8c:	1005003a 	cmpeq	r2,r2,zero
   27d90:	10803fcc 	andi	r2,r2,255
   27d94:	10000d26 	beq	r2,zero,27dcc <secp256k1_scalar_reduce_512+0x674>
   27d98:	d0a01617 	ldw	r2,-32680(gp)
   27d9c:	10c00317 	ldw	r3,12(r2)
   27da0:	00800174 	movhi	r2,5
   27da4:	1096d604 	addi	r2,r2,23384
   27da8:	d8800015 	stw	r2,0(sp)
   27dac:	01c05c04 	movi	r7,368
   27db0:	01800174 	movhi	r6,5
   27db4:	31964204 	addi	r6,r6,22792
   27db8:	01400174 	movhi	r5,5
   27dbc:	2951e804 	addi	r5,r5,18336
   27dc0:	1809883a 	mov	r4,r3
   27dc4:	00461000 	call	46100 <fprintf>
   27dc8:	0045fd40 	call	45fd4 <abort>
    muladd(n1, SECP256K1_N_C_1);
   27dcc:	e0be0f17 	ldw	r2,-1988(fp)
   27dd0:	e0bf1e15 	stw	r2,-904(fp)
   27dd4:	e03f1f15 	stw	zero,-900(fp)
   27dd8:	01900bb4 	movhi	r6,16430
   27ddc:	31a85cc4 	addi	r6,r6,-24205
   27de0:	000f883a 	mov	r7,zero
   27de4:	e13f1e17 	ldw	r4,-904(fp)
   27de8:	e17f1f17 	ldw	r5,-900(fp)
   27dec:	00438e00 	call	438e0 <__muldi3>
   27df0:	1009883a 	mov	r4,r2
   27df4:	180b883a 	mov	r5,r3
   27df8:	e13e2c15 	stw	r4,-1872(fp)
   27dfc:	e17e2d15 	stw	r5,-1868(fp)
   27e00:	e0be2d17 	ldw	r2,-1868(fp)
   27e04:	1004d83a 	srl	r2,r2,zero
   27e08:	e0bf2015 	stw	r2,-896(fp)
   27e0c:	e03f2115 	stw	zero,-892(fp)
   27e10:	e13f2017 	ldw	r4,-896(fp)
   27e14:	e13e2e15 	stw	r4,-1864(fp)
   27e18:	e0be2c17 	ldw	r2,-1872(fp)
   27e1c:	e0be2f15 	stw	r2,-1860(fp)
   27e20:	e0fe1617 	ldw	r3,-1960(fp)
   27e24:	e0be2f17 	ldw	r2,-1860(fp)
   27e28:	1885883a 	add	r2,r3,r2
   27e2c:	e0be1615 	stw	r2,-1960(fp)
   27e30:	e0fe1617 	ldw	r3,-1960(fp)
   27e34:	e0be2f17 	ldw	r2,-1860(fp)
   27e38:	1880022e 	bgeu	r3,r2,27e44 <secp256k1_scalar_reduce_512+0x6ec>
   27e3c:	00c00044 	movi	r3,1
   27e40:	00000106 	br	27e48 <secp256k1_scalar_reduce_512+0x6f0>
   27e44:	0007883a 	mov	r3,zero
   27e48:	e0be2e17 	ldw	r2,-1864(fp)
   27e4c:	10c5883a 	add	r2,r2,r3
   27e50:	e0be2e15 	stw	r2,-1864(fp)
   27e54:	e0fe1717 	ldw	r3,-1956(fp)
   27e58:	e0be2e17 	ldw	r2,-1864(fp)
   27e5c:	1885883a 	add	r2,r3,r2
   27e60:	e0be1715 	stw	r2,-1956(fp)
   27e64:	e0fe1717 	ldw	r3,-1956(fp)
   27e68:	e0be2e17 	ldw	r2,-1864(fp)
   27e6c:	1880022e 	bgeu	r3,r2,27e78 <secp256k1_scalar_reduce_512+0x720>
   27e70:	00c00044 	movi	r3,1
   27e74:	00000106 	br	27e7c <secp256k1_scalar_reduce_512+0x724>
   27e78:	0007883a 	mov	r3,zero
   27e7c:	e0be1817 	ldw	r2,-1952(fp)
   27e80:	10c5883a 	add	r2,r2,r3
   27e84:	e0be1815 	stw	r2,-1952(fp)
   27e88:	e0fe1717 	ldw	r3,-1956(fp)
   27e8c:	e0be2e17 	ldw	r2,-1864(fp)
   27e90:	1885803a 	cmpltu	r2,r3,r2
   27e94:	10803fcc 	andi	r2,r2,255
   27e98:	10001126 	beq	r2,zero,27ee0 <secp256k1_scalar_reduce_512+0x788>
   27e9c:	e0be1817 	ldw	r2,-1952(fp)
   27ea0:	1005003a 	cmpeq	r2,r2,zero
   27ea4:	10803fcc 	andi	r2,r2,255
   27ea8:	10000d26 	beq	r2,zero,27ee0 <secp256k1_scalar_reduce_512+0x788>
   27eac:	d0a01617 	ldw	r2,-32680(gp)
   27eb0:	10c00317 	ldw	r3,12(r2)
   27eb4:	00800174 	movhi	r2,5
   27eb8:	1096d604 	addi	r2,r2,23384
   27ebc:	d8800015 	stw	r2,0(sp)
   27ec0:	01c05c44 	movi	r7,369
   27ec4:	01800174 	movhi	r6,5
   27ec8:	31964204 	addi	r6,r6,22792
   27ecc:	01400174 	movhi	r5,5
   27ed0:	2951e804 	addi	r5,r5,18336
   27ed4:	1809883a 	mov	r4,r3
   27ed8:	00461000 	call	46100 <fprintf>
   27edc:	0045fd40 	call	45fd4 <abort>
    muladd(n0, SECP256K1_N_C_2);
   27ee0:	e0be0e17 	ldw	r2,-1992(fp)
   27ee4:	e0bf2215 	stw	r2,-888(fp)
   27ee8:	e03f2315 	stw	zero,-884(fp)
   27eec:	01942df4 	movhi	r6,20663
   27ef0:	3197f104 	addi	r6,r6,24516
   27ef4:	000f883a 	mov	r7,zero
   27ef8:	e13f2217 	ldw	r4,-888(fp)
   27efc:	e17f2317 	ldw	r5,-884(fp)
   27f00:	00438e00 	call	438e0 <__muldi3>
   27f04:	1009883a 	mov	r4,r2
   27f08:	180b883a 	mov	r5,r3
   27f0c:	e13e3015 	stw	r4,-1856(fp)
   27f10:	e17e3115 	stw	r5,-1852(fp)
   27f14:	e0be3117 	ldw	r2,-1852(fp)
   27f18:	1004d83a 	srl	r2,r2,zero
   27f1c:	e0bf2415 	stw	r2,-880(fp)
   27f20:	e03f2515 	stw	zero,-876(fp)
   27f24:	e17f2417 	ldw	r5,-880(fp)
   27f28:	e17e3215 	stw	r5,-1848(fp)
   27f2c:	e0be3017 	ldw	r2,-1856(fp)
   27f30:	e0be3315 	stw	r2,-1844(fp)
   27f34:	e0fe1617 	ldw	r3,-1960(fp)
   27f38:	e0be3317 	ldw	r2,-1844(fp)
   27f3c:	1885883a 	add	r2,r3,r2
   27f40:	e0be1615 	stw	r2,-1960(fp)
   27f44:	e0fe1617 	ldw	r3,-1960(fp)
   27f48:	e0be3317 	ldw	r2,-1844(fp)
   27f4c:	1880022e 	bgeu	r3,r2,27f58 <secp256k1_scalar_reduce_512+0x800>
   27f50:	00c00044 	movi	r3,1
   27f54:	00000106 	br	27f5c <secp256k1_scalar_reduce_512+0x804>
   27f58:	0007883a 	mov	r3,zero
   27f5c:	e0be3217 	ldw	r2,-1848(fp)
   27f60:	10c5883a 	add	r2,r2,r3
   27f64:	e0be3215 	stw	r2,-1848(fp)
   27f68:	e0fe1717 	ldw	r3,-1956(fp)
   27f6c:	e0be3217 	ldw	r2,-1848(fp)
   27f70:	1885883a 	add	r2,r3,r2
   27f74:	e0be1715 	stw	r2,-1956(fp)
   27f78:	e0fe1717 	ldw	r3,-1956(fp)
   27f7c:	e0be3217 	ldw	r2,-1848(fp)
   27f80:	1880022e 	bgeu	r3,r2,27f8c <secp256k1_scalar_reduce_512+0x834>
   27f84:	00c00044 	movi	r3,1
   27f88:	00000106 	br	27f90 <secp256k1_scalar_reduce_512+0x838>
   27f8c:	0007883a 	mov	r3,zero
   27f90:	e0be1817 	ldw	r2,-1952(fp)
   27f94:	10c5883a 	add	r2,r2,r3
   27f98:	e0be1815 	stw	r2,-1952(fp)
   27f9c:	e0fe1717 	ldw	r3,-1956(fp)
   27fa0:	e0be3217 	ldw	r2,-1848(fp)
   27fa4:	1885803a 	cmpltu	r2,r3,r2
   27fa8:	10803fcc 	andi	r2,r2,255
   27fac:	10001126 	beq	r2,zero,27ff4 <secp256k1_scalar_reduce_512+0x89c>
   27fb0:	e0be1817 	ldw	r2,-1952(fp)
   27fb4:	1005003a 	cmpeq	r2,r2,zero
   27fb8:	10803fcc 	andi	r2,r2,255
   27fbc:	10000d26 	beq	r2,zero,27ff4 <secp256k1_scalar_reduce_512+0x89c>
   27fc0:	d0a01617 	ldw	r2,-32680(gp)
   27fc4:	10c00317 	ldw	r3,12(r2)
   27fc8:	00800174 	movhi	r2,5
   27fcc:	1096d604 	addi	r2,r2,23384
   27fd0:	d8800015 	stw	r2,0(sp)
   27fd4:	01c05c84 	movi	r7,370
   27fd8:	01800174 	movhi	r6,5
   27fdc:	31964204 	addi	r6,r6,22792
   27fe0:	01400174 	movhi	r5,5
   27fe4:	2951e804 	addi	r5,r5,18336
   27fe8:	1809883a 	mov	r4,r3
   27fec:	00461000 	call	46100 <fprintf>
   27ff0:	0045fd40 	call	45fd4 <abort>
    extract(m2);
   27ff4:	e0be1617 	ldw	r2,-1960(fp)
   27ff8:	e0be3415 	stw	r2,-1840(fp)
   27ffc:	e0be1717 	ldw	r2,-1956(fp)
   28000:	e0be1615 	stw	r2,-1960(fp)
   28004:	e0be1817 	ldw	r2,-1952(fp)
   28008:	e0be1715 	stw	r2,-1956(fp)
   2800c:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[3]);
   28010:	e0bf1717 	ldw	r2,-932(fp)
   28014:	10800304 	addi	r2,r2,12
   28018:	10c00017 	ldw	r3,0(r2)
   2801c:	e0be1617 	ldw	r2,-1960(fp)
   28020:	10c5883a 	add	r2,r2,r3
   28024:	e0be1615 	stw	r2,-1960(fp)
   28028:	e0bf1717 	ldw	r2,-932(fp)
   2802c:	10800304 	addi	r2,r2,12
   28030:	10c00017 	ldw	r3,0(r2)
   28034:	e0be1617 	ldw	r2,-1960(fp)
   28038:	10c5803a 	cmpltu	r2,r2,r3
   2803c:	10803fcc 	andi	r2,r2,255
   28040:	e0be3515 	stw	r2,-1836(fp)
   28044:	e0fe1717 	ldw	r3,-1956(fp)
   28048:	e0be3517 	ldw	r2,-1836(fp)
   2804c:	1885883a 	add	r2,r3,r2
   28050:	e0be1715 	stw	r2,-1956(fp)
   28054:	e0fe1717 	ldw	r3,-1956(fp)
   28058:	e0be3517 	ldw	r2,-1836(fp)
   2805c:	1880022e 	bgeu	r3,r2,28068 <secp256k1_scalar_reduce_512+0x910>
   28060:	00c00044 	movi	r3,1
   28064:	00000106 	br	2806c <secp256k1_scalar_reduce_512+0x914>
   28068:	0007883a 	mov	r3,zero
   2806c:	e0be1817 	ldw	r2,-1952(fp)
   28070:	10c5883a 	add	r2,r2,r3
   28074:	e0be1815 	stw	r2,-1952(fp)
    muladd(n3, SECP256K1_N_C_0);
   28078:	e0be1117 	ldw	r2,-1980(fp)
   2807c:	e0bf2615 	stw	r2,-872(fp)
   28080:	e03f2715 	stw	zero,-868(fp)
   28084:	018bf2b4 	movhi	r6,12234
   28088:	31afafc4 	addi	r6,r6,-16705
   2808c:	000f883a 	mov	r7,zero
   28090:	e13f2617 	ldw	r4,-872(fp)
   28094:	e17f2717 	ldw	r5,-868(fp)
   28098:	00438e00 	call	438e0 <__muldi3>
   2809c:	1009883a 	mov	r4,r2
   280a0:	180b883a 	mov	r5,r3
   280a4:	e13e3615 	stw	r4,-1832(fp)
   280a8:	e17e3715 	stw	r5,-1828(fp)
   280ac:	e0be3717 	ldw	r2,-1828(fp)
   280b0:	1004d83a 	srl	r2,r2,zero
   280b4:	e0bf2815 	stw	r2,-864(fp)
   280b8:	e03f2915 	stw	zero,-860(fp)
   280bc:	e1bf2817 	ldw	r6,-864(fp)
   280c0:	e1be3815 	stw	r6,-1824(fp)
   280c4:	e0be3617 	ldw	r2,-1832(fp)
   280c8:	e0be3915 	stw	r2,-1820(fp)
   280cc:	e0fe1617 	ldw	r3,-1960(fp)
   280d0:	e0be3917 	ldw	r2,-1820(fp)
   280d4:	1885883a 	add	r2,r3,r2
   280d8:	e0be1615 	stw	r2,-1960(fp)
   280dc:	e0fe1617 	ldw	r3,-1960(fp)
   280e0:	e0be3917 	ldw	r2,-1820(fp)
   280e4:	1880022e 	bgeu	r3,r2,280f0 <secp256k1_scalar_reduce_512+0x998>
   280e8:	00c00044 	movi	r3,1
   280ec:	00000106 	br	280f4 <secp256k1_scalar_reduce_512+0x99c>
   280f0:	0007883a 	mov	r3,zero
   280f4:	e0be3817 	ldw	r2,-1824(fp)
   280f8:	10c5883a 	add	r2,r2,r3
   280fc:	e0be3815 	stw	r2,-1824(fp)
   28100:	e0fe1717 	ldw	r3,-1956(fp)
   28104:	e0be3817 	ldw	r2,-1824(fp)
   28108:	1885883a 	add	r2,r3,r2
   2810c:	e0be1715 	stw	r2,-1956(fp)
   28110:	e0fe1717 	ldw	r3,-1956(fp)
   28114:	e0be3817 	ldw	r2,-1824(fp)
   28118:	1880022e 	bgeu	r3,r2,28124 <secp256k1_scalar_reduce_512+0x9cc>
   2811c:	00c00044 	movi	r3,1
   28120:	00000106 	br	28128 <secp256k1_scalar_reduce_512+0x9d0>
   28124:	0007883a 	mov	r3,zero
   28128:	e0be1817 	ldw	r2,-1952(fp)
   2812c:	10c5883a 	add	r2,r2,r3
   28130:	e0be1815 	stw	r2,-1952(fp)
   28134:	e0fe1717 	ldw	r3,-1956(fp)
   28138:	e0be3817 	ldw	r2,-1824(fp)
   2813c:	1885803a 	cmpltu	r2,r3,r2
   28140:	10803fcc 	andi	r2,r2,255
   28144:	10001126 	beq	r2,zero,2818c <secp256k1_scalar_reduce_512+0xa34>
   28148:	e0be1817 	ldw	r2,-1952(fp)
   2814c:	1005003a 	cmpeq	r2,r2,zero
   28150:	10803fcc 	andi	r2,r2,255
   28154:	10000d26 	beq	r2,zero,2818c <secp256k1_scalar_reduce_512+0xa34>
   28158:	d0a01617 	ldw	r2,-32680(gp)
   2815c:	10c00317 	ldw	r3,12(r2)
   28160:	00800174 	movhi	r2,5
   28164:	1096d604 	addi	r2,r2,23384
   28168:	d8800015 	stw	r2,0(sp)
   2816c:	01c05d44 	movi	r7,373
   28170:	01800174 	movhi	r6,5
   28174:	31964204 	addi	r6,r6,22792
   28178:	01400174 	movhi	r5,5
   2817c:	2951e804 	addi	r5,r5,18336
   28180:	1809883a 	mov	r4,r3
   28184:	00461000 	call	46100 <fprintf>
   28188:	0045fd40 	call	45fd4 <abort>
    muladd(n2, SECP256K1_N_C_1);
   2818c:	e0be1017 	ldw	r2,-1984(fp)
   28190:	e0bf2a15 	stw	r2,-856(fp)
   28194:	e03f2b15 	stw	zero,-852(fp)
   28198:	01900bb4 	movhi	r6,16430
   2819c:	31a85cc4 	addi	r6,r6,-24205
   281a0:	000f883a 	mov	r7,zero
   281a4:	e13f2a17 	ldw	r4,-856(fp)
   281a8:	e17f2b17 	ldw	r5,-852(fp)
   281ac:	00438e00 	call	438e0 <__muldi3>
   281b0:	1009883a 	mov	r4,r2
   281b4:	180b883a 	mov	r5,r3
   281b8:	e13e3a15 	stw	r4,-1816(fp)
   281bc:	e17e3b15 	stw	r5,-1812(fp)
   281c0:	e0be3b17 	ldw	r2,-1812(fp)
   281c4:	1004d83a 	srl	r2,r2,zero
   281c8:	e0bf2c15 	stw	r2,-848(fp)
   281cc:	e03f2d15 	stw	zero,-844(fp)
   281d0:	e1ff2c17 	ldw	r7,-848(fp)
   281d4:	e1fe3c15 	stw	r7,-1808(fp)
   281d8:	e0be3a17 	ldw	r2,-1816(fp)
   281dc:	e0be3d15 	stw	r2,-1804(fp)
   281e0:	e0fe1617 	ldw	r3,-1960(fp)
   281e4:	e0be3d17 	ldw	r2,-1804(fp)
   281e8:	1885883a 	add	r2,r3,r2
   281ec:	e0be1615 	stw	r2,-1960(fp)
   281f0:	e0fe1617 	ldw	r3,-1960(fp)
   281f4:	e0be3d17 	ldw	r2,-1804(fp)
   281f8:	1880022e 	bgeu	r3,r2,28204 <secp256k1_scalar_reduce_512+0xaac>
   281fc:	00c00044 	movi	r3,1
   28200:	00000106 	br	28208 <secp256k1_scalar_reduce_512+0xab0>
   28204:	0007883a 	mov	r3,zero
   28208:	e0be3c17 	ldw	r2,-1808(fp)
   2820c:	10c5883a 	add	r2,r2,r3
   28210:	e0be3c15 	stw	r2,-1808(fp)
   28214:	e0fe1717 	ldw	r3,-1956(fp)
   28218:	e0be3c17 	ldw	r2,-1808(fp)
   2821c:	1885883a 	add	r2,r3,r2
   28220:	e0be1715 	stw	r2,-1956(fp)
   28224:	e0fe1717 	ldw	r3,-1956(fp)
   28228:	e0be3c17 	ldw	r2,-1808(fp)
   2822c:	1880022e 	bgeu	r3,r2,28238 <secp256k1_scalar_reduce_512+0xae0>
   28230:	00c00044 	movi	r3,1
   28234:	00000106 	br	2823c <secp256k1_scalar_reduce_512+0xae4>
   28238:	0007883a 	mov	r3,zero
   2823c:	e0be1817 	ldw	r2,-1952(fp)
   28240:	10c5883a 	add	r2,r2,r3
   28244:	e0be1815 	stw	r2,-1952(fp)
   28248:	e0fe1717 	ldw	r3,-1956(fp)
   2824c:	e0be3c17 	ldw	r2,-1808(fp)
   28250:	1885803a 	cmpltu	r2,r3,r2
   28254:	10803fcc 	andi	r2,r2,255
   28258:	10001126 	beq	r2,zero,282a0 <secp256k1_scalar_reduce_512+0xb48>
   2825c:	e0be1817 	ldw	r2,-1952(fp)
   28260:	1005003a 	cmpeq	r2,r2,zero
   28264:	10803fcc 	andi	r2,r2,255
   28268:	10000d26 	beq	r2,zero,282a0 <secp256k1_scalar_reduce_512+0xb48>
   2826c:	d0a01617 	ldw	r2,-32680(gp)
   28270:	10c00317 	ldw	r3,12(r2)
   28274:	00800174 	movhi	r2,5
   28278:	1096d604 	addi	r2,r2,23384
   2827c:	d8800015 	stw	r2,0(sp)
   28280:	01c05d84 	movi	r7,374
   28284:	01800174 	movhi	r6,5
   28288:	31964204 	addi	r6,r6,22792
   2828c:	01400174 	movhi	r5,5
   28290:	2951e804 	addi	r5,r5,18336
   28294:	1809883a 	mov	r4,r3
   28298:	00461000 	call	46100 <fprintf>
   2829c:	0045fd40 	call	45fd4 <abort>
    muladd(n1, SECP256K1_N_C_2);
   282a0:	e0be0f17 	ldw	r2,-1988(fp)
   282a4:	e0bf2e15 	stw	r2,-840(fp)
   282a8:	e03f2f15 	stw	zero,-836(fp)
   282ac:	01942df4 	movhi	r6,20663
   282b0:	3197f104 	addi	r6,r6,24516
   282b4:	000f883a 	mov	r7,zero
   282b8:	e13f2e17 	ldw	r4,-840(fp)
   282bc:	e17f2f17 	ldw	r5,-836(fp)
   282c0:	00438e00 	call	438e0 <__muldi3>
   282c4:	1009883a 	mov	r4,r2
   282c8:	180b883a 	mov	r5,r3
   282cc:	e13e3e15 	stw	r4,-1800(fp)
   282d0:	e17e3f15 	stw	r5,-1796(fp)
   282d4:	e0be3f17 	ldw	r2,-1796(fp)
   282d8:	1004d83a 	srl	r2,r2,zero
   282dc:	e0bf3015 	stw	r2,-832(fp)
   282e0:	e03f3115 	stw	zero,-828(fp)
   282e4:	e0bf3017 	ldw	r2,-832(fp)
   282e8:	e0be4015 	stw	r2,-1792(fp)
   282ec:	e0be3e17 	ldw	r2,-1800(fp)
   282f0:	e0be4115 	stw	r2,-1788(fp)
   282f4:	e0fe1617 	ldw	r3,-1960(fp)
   282f8:	e0be4117 	ldw	r2,-1788(fp)
   282fc:	1885883a 	add	r2,r3,r2
   28300:	e0be1615 	stw	r2,-1960(fp)
   28304:	e0fe1617 	ldw	r3,-1960(fp)
   28308:	e0be4117 	ldw	r2,-1788(fp)
   2830c:	1880022e 	bgeu	r3,r2,28318 <secp256k1_scalar_reduce_512+0xbc0>
   28310:	00c00044 	movi	r3,1
   28314:	00000106 	br	2831c <secp256k1_scalar_reduce_512+0xbc4>
   28318:	0007883a 	mov	r3,zero
   2831c:	e0be4017 	ldw	r2,-1792(fp)
   28320:	10c5883a 	add	r2,r2,r3
   28324:	e0be4015 	stw	r2,-1792(fp)
   28328:	e0fe1717 	ldw	r3,-1956(fp)
   2832c:	e0be4017 	ldw	r2,-1792(fp)
   28330:	1885883a 	add	r2,r3,r2
   28334:	e0be1715 	stw	r2,-1956(fp)
   28338:	e0fe1717 	ldw	r3,-1956(fp)
   2833c:	e0be4017 	ldw	r2,-1792(fp)
   28340:	1880022e 	bgeu	r3,r2,2834c <secp256k1_scalar_reduce_512+0xbf4>
   28344:	00c00044 	movi	r3,1
   28348:	00000106 	br	28350 <secp256k1_scalar_reduce_512+0xbf8>
   2834c:	0007883a 	mov	r3,zero
   28350:	e0be1817 	ldw	r2,-1952(fp)
   28354:	10c5883a 	add	r2,r2,r3
   28358:	e0be1815 	stw	r2,-1952(fp)
   2835c:	e0fe1717 	ldw	r3,-1956(fp)
   28360:	e0be4017 	ldw	r2,-1792(fp)
   28364:	1885803a 	cmpltu	r2,r3,r2
   28368:	10803fcc 	andi	r2,r2,255
   2836c:	10001126 	beq	r2,zero,283b4 <secp256k1_scalar_reduce_512+0xc5c>
   28370:	e0be1817 	ldw	r2,-1952(fp)
   28374:	1005003a 	cmpeq	r2,r2,zero
   28378:	10803fcc 	andi	r2,r2,255
   2837c:	10000d26 	beq	r2,zero,283b4 <secp256k1_scalar_reduce_512+0xc5c>
   28380:	d0a01617 	ldw	r2,-32680(gp)
   28384:	10c00317 	ldw	r3,12(r2)
   28388:	00800174 	movhi	r2,5
   2838c:	1096d604 	addi	r2,r2,23384
   28390:	d8800015 	stw	r2,0(sp)
   28394:	01c05dc4 	movi	r7,375
   28398:	01800174 	movhi	r6,5
   2839c:	31964204 	addi	r6,r6,22792
   283a0:	01400174 	movhi	r5,5
   283a4:	2951e804 	addi	r5,r5,18336
   283a8:	1809883a 	mov	r4,r3
   283ac:	00461000 	call	46100 <fprintf>
   283b0:	0045fd40 	call	45fd4 <abort>
    muladd(n0, SECP256K1_N_C_3);
   283b4:	e0be0e17 	ldw	r2,-1992(fp)
   283b8:	e0bf3215 	stw	r2,-824(fp)
   283bc:	e03f3315 	stw	zero,-820(fp)
   283c0:	01915474 	movhi	r6,17745
   283c4:	3188c644 	addi	r6,r6,8985
   283c8:	000f883a 	mov	r7,zero
   283cc:	e13f3217 	ldw	r4,-824(fp)
   283d0:	e17f3317 	ldw	r5,-820(fp)
   283d4:	00438e00 	call	438e0 <__muldi3>
   283d8:	1009883a 	mov	r4,r2
   283dc:	180b883a 	mov	r5,r3
   283e0:	e13e4215 	stw	r4,-1784(fp)
   283e4:	e17e4315 	stw	r5,-1780(fp)
   283e8:	e0be4317 	ldw	r2,-1780(fp)
   283ec:	1004d83a 	srl	r2,r2,zero
   283f0:	e0bf3415 	stw	r2,-816(fp)
   283f4:	e03f3515 	stw	zero,-812(fp)
   283f8:	e13f3417 	ldw	r4,-816(fp)
   283fc:	e13e4415 	stw	r4,-1776(fp)
   28400:	e0be4217 	ldw	r2,-1784(fp)
   28404:	e0be4515 	stw	r2,-1772(fp)
   28408:	e0fe1617 	ldw	r3,-1960(fp)
   2840c:	e0be4517 	ldw	r2,-1772(fp)
   28410:	1885883a 	add	r2,r3,r2
   28414:	e0be1615 	stw	r2,-1960(fp)
   28418:	e0fe1617 	ldw	r3,-1960(fp)
   2841c:	e0be4517 	ldw	r2,-1772(fp)
   28420:	1880022e 	bgeu	r3,r2,2842c <secp256k1_scalar_reduce_512+0xcd4>
   28424:	00c00044 	movi	r3,1
   28428:	00000106 	br	28430 <secp256k1_scalar_reduce_512+0xcd8>
   2842c:	0007883a 	mov	r3,zero
   28430:	e0be4417 	ldw	r2,-1776(fp)
   28434:	10c5883a 	add	r2,r2,r3
   28438:	e0be4415 	stw	r2,-1776(fp)
   2843c:	e0fe1717 	ldw	r3,-1956(fp)
   28440:	e0be4417 	ldw	r2,-1776(fp)
   28444:	1885883a 	add	r2,r3,r2
   28448:	e0be1715 	stw	r2,-1956(fp)
   2844c:	e0fe1717 	ldw	r3,-1956(fp)
   28450:	e0be4417 	ldw	r2,-1776(fp)
   28454:	1880022e 	bgeu	r3,r2,28460 <secp256k1_scalar_reduce_512+0xd08>
   28458:	00c00044 	movi	r3,1
   2845c:	00000106 	br	28464 <secp256k1_scalar_reduce_512+0xd0c>
   28460:	0007883a 	mov	r3,zero
   28464:	e0be1817 	ldw	r2,-1952(fp)
   28468:	10c5883a 	add	r2,r2,r3
   2846c:	e0be1815 	stw	r2,-1952(fp)
   28470:	e0fe1717 	ldw	r3,-1956(fp)
   28474:	e0be4417 	ldw	r2,-1776(fp)
   28478:	1885803a 	cmpltu	r2,r3,r2
   2847c:	10803fcc 	andi	r2,r2,255
   28480:	10001126 	beq	r2,zero,284c8 <secp256k1_scalar_reduce_512+0xd70>
   28484:	e0be1817 	ldw	r2,-1952(fp)
   28488:	1005003a 	cmpeq	r2,r2,zero
   2848c:	10803fcc 	andi	r2,r2,255
   28490:	10000d26 	beq	r2,zero,284c8 <secp256k1_scalar_reduce_512+0xd70>
   28494:	d0a01617 	ldw	r2,-32680(gp)
   28498:	10c00317 	ldw	r3,12(r2)
   2849c:	00800174 	movhi	r2,5
   284a0:	1096d604 	addi	r2,r2,23384
   284a4:	d8800015 	stw	r2,0(sp)
   284a8:	01c05e04 	movi	r7,376
   284ac:	01800174 	movhi	r6,5
   284b0:	31964204 	addi	r6,r6,22792
   284b4:	01400174 	movhi	r5,5
   284b8:	2951e804 	addi	r5,r5,18336
   284bc:	1809883a 	mov	r4,r3
   284c0:	00461000 	call	46100 <fprintf>
   284c4:	0045fd40 	call	45fd4 <abort>
    extract(m3);
   284c8:	e0be1617 	ldw	r2,-1960(fp)
   284cc:	e0be4615 	stw	r2,-1768(fp)
   284d0:	e0be1717 	ldw	r2,-1956(fp)
   284d4:	e0be1615 	stw	r2,-1960(fp)
   284d8:	e0be1817 	ldw	r2,-1952(fp)
   284dc:	e0be1715 	stw	r2,-1956(fp)
   284e0:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[4]);
   284e4:	e0bf1717 	ldw	r2,-932(fp)
   284e8:	10800404 	addi	r2,r2,16
   284ec:	10c00017 	ldw	r3,0(r2)
   284f0:	e0be1617 	ldw	r2,-1960(fp)
   284f4:	10c5883a 	add	r2,r2,r3
   284f8:	e0be1615 	stw	r2,-1960(fp)
   284fc:	e0bf1717 	ldw	r2,-932(fp)
   28500:	10800404 	addi	r2,r2,16
   28504:	10c00017 	ldw	r3,0(r2)
   28508:	e0be1617 	ldw	r2,-1960(fp)
   2850c:	10c5803a 	cmpltu	r2,r2,r3
   28510:	10803fcc 	andi	r2,r2,255
   28514:	e0be4715 	stw	r2,-1764(fp)
   28518:	e0fe1717 	ldw	r3,-1956(fp)
   2851c:	e0be4717 	ldw	r2,-1764(fp)
   28520:	1885883a 	add	r2,r3,r2
   28524:	e0be1715 	stw	r2,-1956(fp)
   28528:	e0fe1717 	ldw	r3,-1956(fp)
   2852c:	e0be4717 	ldw	r2,-1764(fp)
   28530:	1880022e 	bgeu	r3,r2,2853c <secp256k1_scalar_reduce_512+0xde4>
   28534:	00c00044 	movi	r3,1
   28538:	00000106 	br	28540 <secp256k1_scalar_reduce_512+0xde8>
   2853c:	0007883a 	mov	r3,zero
   28540:	e0be1817 	ldw	r2,-1952(fp)
   28544:	10c5883a 	add	r2,r2,r3
   28548:	e0be1815 	stw	r2,-1952(fp)
    muladd(n4, SECP256K1_N_C_0);
   2854c:	e0be1217 	ldw	r2,-1976(fp)
   28550:	e0bf3615 	stw	r2,-808(fp)
   28554:	e03f3715 	stw	zero,-804(fp)
   28558:	018bf2b4 	movhi	r6,12234
   2855c:	31afafc4 	addi	r6,r6,-16705
   28560:	000f883a 	mov	r7,zero
   28564:	e13f3617 	ldw	r4,-808(fp)
   28568:	e17f3717 	ldw	r5,-804(fp)
   2856c:	00438e00 	call	438e0 <__muldi3>
   28570:	1009883a 	mov	r4,r2
   28574:	180b883a 	mov	r5,r3
   28578:	e13e4815 	stw	r4,-1760(fp)
   2857c:	e17e4915 	stw	r5,-1756(fp)
   28580:	e0be4917 	ldw	r2,-1756(fp)
   28584:	1004d83a 	srl	r2,r2,zero
   28588:	e0bf3815 	stw	r2,-800(fp)
   2858c:	e03f3915 	stw	zero,-796(fp)
   28590:	e17f3817 	ldw	r5,-800(fp)
   28594:	e17e4a15 	stw	r5,-1752(fp)
   28598:	e0be4817 	ldw	r2,-1760(fp)
   2859c:	e0be4b15 	stw	r2,-1748(fp)
   285a0:	e0fe1617 	ldw	r3,-1960(fp)
   285a4:	e0be4b17 	ldw	r2,-1748(fp)
   285a8:	1885883a 	add	r2,r3,r2
   285ac:	e0be1615 	stw	r2,-1960(fp)
   285b0:	e0fe1617 	ldw	r3,-1960(fp)
   285b4:	e0be4b17 	ldw	r2,-1748(fp)
   285b8:	1880022e 	bgeu	r3,r2,285c4 <secp256k1_scalar_reduce_512+0xe6c>
   285bc:	00c00044 	movi	r3,1
   285c0:	00000106 	br	285c8 <secp256k1_scalar_reduce_512+0xe70>
   285c4:	0007883a 	mov	r3,zero
   285c8:	e0be4a17 	ldw	r2,-1752(fp)
   285cc:	10c5883a 	add	r2,r2,r3
   285d0:	e0be4a15 	stw	r2,-1752(fp)
   285d4:	e0fe1717 	ldw	r3,-1956(fp)
   285d8:	e0be4a17 	ldw	r2,-1752(fp)
   285dc:	1885883a 	add	r2,r3,r2
   285e0:	e0be1715 	stw	r2,-1956(fp)
   285e4:	e0fe1717 	ldw	r3,-1956(fp)
   285e8:	e0be4a17 	ldw	r2,-1752(fp)
   285ec:	1880022e 	bgeu	r3,r2,285f8 <secp256k1_scalar_reduce_512+0xea0>
   285f0:	00c00044 	movi	r3,1
   285f4:	00000106 	br	285fc <secp256k1_scalar_reduce_512+0xea4>
   285f8:	0007883a 	mov	r3,zero
   285fc:	e0be1817 	ldw	r2,-1952(fp)
   28600:	10c5883a 	add	r2,r2,r3
   28604:	e0be1815 	stw	r2,-1952(fp)
   28608:	e0fe1717 	ldw	r3,-1956(fp)
   2860c:	e0be4a17 	ldw	r2,-1752(fp)
   28610:	1885803a 	cmpltu	r2,r3,r2
   28614:	10803fcc 	andi	r2,r2,255
   28618:	10001126 	beq	r2,zero,28660 <secp256k1_scalar_reduce_512+0xf08>
   2861c:	e0be1817 	ldw	r2,-1952(fp)
   28620:	1005003a 	cmpeq	r2,r2,zero
   28624:	10803fcc 	andi	r2,r2,255
   28628:	10000d26 	beq	r2,zero,28660 <secp256k1_scalar_reduce_512+0xf08>
   2862c:	d0a01617 	ldw	r2,-32680(gp)
   28630:	10c00317 	ldw	r3,12(r2)
   28634:	00800174 	movhi	r2,5
   28638:	1096d604 	addi	r2,r2,23384
   2863c:	d8800015 	stw	r2,0(sp)
   28640:	01c05ec4 	movi	r7,379
   28644:	01800174 	movhi	r6,5
   28648:	31964204 	addi	r6,r6,22792
   2864c:	01400174 	movhi	r5,5
   28650:	2951e804 	addi	r5,r5,18336
   28654:	1809883a 	mov	r4,r3
   28658:	00461000 	call	46100 <fprintf>
   2865c:	0045fd40 	call	45fd4 <abort>
    muladd(n3, SECP256K1_N_C_1);
   28660:	e0be1117 	ldw	r2,-1980(fp)
   28664:	e0bf3a15 	stw	r2,-792(fp)
   28668:	e03f3b15 	stw	zero,-788(fp)
   2866c:	01900bb4 	movhi	r6,16430
   28670:	31a85cc4 	addi	r6,r6,-24205
   28674:	000f883a 	mov	r7,zero
   28678:	e13f3a17 	ldw	r4,-792(fp)
   2867c:	e17f3b17 	ldw	r5,-788(fp)
   28680:	00438e00 	call	438e0 <__muldi3>
   28684:	1009883a 	mov	r4,r2
   28688:	180b883a 	mov	r5,r3
   2868c:	e13e4c15 	stw	r4,-1744(fp)
   28690:	e17e4d15 	stw	r5,-1740(fp)
   28694:	e0be4d17 	ldw	r2,-1740(fp)
   28698:	1004d83a 	srl	r2,r2,zero
   2869c:	e0bf3c15 	stw	r2,-784(fp)
   286a0:	e03f3d15 	stw	zero,-780(fp)
   286a4:	e1bf3c17 	ldw	r6,-784(fp)
   286a8:	e1be4e15 	stw	r6,-1736(fp)
   286ac:	e0be4c17 	ldw	r2,-1744(fp)
   286b0:	e0be4f15 	stw	r2,-1732(fp)
   286b4:	e0fe1617 	ldw	r3,-1960(fp)
   286b8:	e0be4f17 	ldw	r2,-1732(fp)
   286bc:	1885883a 	add	r2,r3,r2
   286c0:	e0be1615 	stw	r2,-1960(fp)
   286c4:	e0fe1617 	ldw	r3,-1960(fp)
   286c8:	e0be4f17 	ldw	r2,-1732(fp)
   286cc:	1880022e 	bgeu	r3,r2,286d8 <secp256k1_scalar_reduce_512+0xf80>
   286d0:	00c00044 	movi	r3,1
   286d4:	00000106 	br	286dc <secp256k1_scalar_reduce_512+0xf84>
   286d8:	0007883a 	mov	r3,zero
   286dc:	e0be4e17 	ldw	r2,-1736(fp)
   286e0:	10c5883a 	add	r2,r2,r3
   286e4:	e0be4e15 	stw	r2,-1736(fp)
   286e8:	e0fe1717 	ldw	r3,-1956(fp)
   286ec:	e0be4e17 	ldw	r2,-1736(fp)
   286f0:	1885883a 	add	r2,r3,r2
   286f4:	e0be1715 	stw	r2,-1956(fp)
   286f8:	e0fe1717 	ldw	r3,-1956(fp)
   286fc:	e0be4e17 	ldw	r2,-1736(fp)
   28700:	1880022e 	bgeu	r3,r2,2870c <secp256k1_scalar_reduce_512+0xfb4>
   28704:	00c00044 	movi	r3,1
   28708:	00000106 	br	28710 <secp256k1_scalar_reduce_512+0xfb8>
   2870c:	0007883a 	mov	r3,zero
   28710:	e0be1817 	ldw	r2,-1952(fp)
   28714:	10c5883a 	add	r2,r2,r3
   28718:	e0be1815 	stw	r2,-1952(fp)
   2871c:	e0fe1717 	ldw	r3,-1956(fp)
   28720:	e0be4e17 	ldw	r2,-1736(fp)
   28724:	1885803a 	cmpltu	r2,r3,r2
   28728:	10803fcc 	andi	r2,r2,255
   2872c:	10001126 	beq	r2,zero,28774 <secp256k1_scalar_reduce_512+0x101c>
   28730:	e0be1817 	ldw	r2,-1952(fp)
   28734:	1005003a 	cmpeq	r2,r2,zero
   28738:	10803fcc 	andi	r2,r2,255
   2873c:	10000d26 	beq	r2,zero,28774 <secp256k1_scalar_reduce_512+0x101c>
   28740:	d0a01617 	ldw	r2,-32680(gp)
   28744:	10c00317 	ldw	r3,12(r2)
   28748:	00800174 	movhi	r2,5
   2874c:	1096d604 	addi	r2,r2,23384
   28750:	d8800015 	stw	r2,0(sp)
   28754:	01c05f04 	movi	r7,380
   28758:	01800174 	movhi	r6,5
   2875c:	31964204 	addi	r6,r6,22792
   28760:	01400174 	movhi	r5,5
   28764:	2951e804 	addi	r5,r5,18336
   28768:	1809883a 	mov	r4,r3
   2876c:	00461000 	call	46100 <fprintf>
   28770:	0045fd40 	call	45fd4 <abort>
    muladd(n2, SECP256K1_N_C_2);
   28774:	e0be1017 	ldw	r2,-1984(fp)
   28778:	e0bf3e15 	stw	r2,-776(fp)
   2877c:	e03f3f15 	stw	zero,-772(fp)
   28780:	01942df4 	movhi	r6,20663
   28784:	3197f104 	addi	r6,r6,24516
   28788:	000f883a 	mov	r7,zero
   2878c:	e13f3e17 	ldw	r4,-776(fp)
   28790:	e17f3f17 	ldw	r5,-772(fp)
   28794:	00438e00 	call	438e0 <__muldi3>
   28798:	1009883a 	mov	r4,r2
   2879c:	180b883a 	mov	r5,r3
   287a0:	e13e5015 	stw	r4,-1728(fp)
   287a4:	e17e5115 	stw	r5,-1724(fp)
   287a8:	e0be5117 	ldw	r2,-1724(fp)
   287ac:	1004d83a 	srl	r2,r2,zero
   287b0:	e0bf4015 	stw	r2,-768(fp)
   287b4:	e03f4115 	stw	zero,-764(fp)
   287b8:	e1ff4017 	ldw	r7,-768(fp)
   287bc:	e1fe5215 	stw	r7,-1720(fp)
   287c0:	e0be5017 	ldw	r2,-1728(fp)
   287c4:	e0be5315 	stw	r2,-1716(fp)
   287c8:	e0fe1617 	ldw	r3,-1960(fp)
   287cc:	e0be5317 	ldw	r2,-1716(fp)
   287d0:	1885883a 	add	r2,r3,r2
   287d4:	e0be1615 	stw	r2,-1960(fp)
   287d8:	e0fe1617 	ldw	r3,-1960(fp)
   287dc:	e0be5317 	ldw	r2,-1716(fp)
   287e0:	1880022e 	bgeu	r3,r2,287ec <secp256k1_scalar_reduce_512+0x1094>
   287e4:	00c00044 	movi	r3,1
   287e8:	00000106 	br	287f0 <secp256k1_scalar_reduce_512+0x1098>
   287ec:	0007883a 	mov	r3,zero
   287f0:	e0be5217 	ldw	r2,-1720(fp)
   287f4:	10c5883a 	add	r2,r2,r3
   287f8:	e0be5215 	stw	r2,-1720(fp)
   287fc:	e0fe1717 	ldw	r3,-1956(fp)
   28800:	e0be5217 	ldw	r2,-1720(fp)
   28804:	1885883a 	add	r2,r3,r2
   28808:	e0be1715 	stw	r2,-1956(fp)
   2880c:	e0fe1717 	ldw	r3,-1956(fp)
   28810:	e0be5217 	ldw	r2,-1720(fp)
   28814:	1880022e 	bgeu	r3,r2,28820 <secp256k1_scalar_reduce_512+0x10c8>
   28818:	00c00044 	movi	r3,1
   2881c:	00000106 	br	28824 <secp256k1_scalar_reduce_512+0x10cc>
   28820:	0007883a 	mov	r3,zero
   28824:	e0be1817 	ldw	r2,-1952(fp)
   28828:	10c5883a 	add	r2,r2,r3
   2882c:	e0be1815 	stw	r2,-1952(fp)
   28830:	e0fe1717 	ldw	r3,-1956(fp)
   28834:	e0be5217 	ldw	r2,-1720(fp)
   28838:	1885803a 	cmpltu	r2,r3,r2
   2883c:	10803fcc 	andi	r2,r2,255
   28840:	10001126 	beq	r2,zero,28888 <secp256k1_scalar_reduce_512+0x1130>
   28844:	e0be1817 	ldw	r2,-1952(fp)
   28848:	1005003a 	cmpeq	r2,r2,zero
   2884c:	10803fcc 	andi	r2,r2,255
   28850:	10000d26 	beq	r2,zero,28888 <secp256k1_scalar_reduce_512+0x1130>
   28854:	d0a01617 	ldw	r2,-32680(gp)
   28858:	10c00317 	ldw	r3,12(r2)
   2885c:	00800174 	movhi	r2,5
   28860:	1096d604 	addi	r2,r2,23384
   28864:	d8800015 	stw	r2,0(sp)
   28868:	01c05f44 	movi	r7,381
   2886c:	01800174 	movhi	r6,5
   28870:	31964204 	addi	r6,r6,22792
   28874:	01400174 	movhi	r5,5
   28878:	2951e804 	addi	r5,r5,18336
   2887c:	1809883a 	mov	r4,r3
   28880:	00461000 	call	46100 <fprintf>
   28884:	0045fd40 	call	45fd4 <abort>
    muladd(n1, SECP256K1_N_C_3);
   28888:	e0be0f17 	ldw	r2,-1988(fp)
   2888c:	e0bf4215 	stw	r2,-760(fp)
   28890:	e03f4315 	stw	zero,-756(fp)
   28894:	01915474 	movhi	r6,17745
   28898:	3188c644 	addi	r6,r6,8985
   2889c:	000f883a 	mov	r7,zero
   288a0:	e13f4217 	ldw	r4,-760(fp)
   288a4:	e17f4317 	ldw	r5,-756(fp)
   288a8:	00438e00 	call	438e0 <__muldi3>
   288ac:	1009883a 	mov	r4,r2
   288b0:	180b883a 	mov	r5,r3
   288b4:	e13e5415 	stw	r4,-1712(fp)
   288b8:	e17e5515 	stw	r5,-1708(fp)
   288bc:	e0be5517 	ldw	r2,-1708(fp)
   288c0:	1004d83a 	srl	r2,r2,zero
   288c4:	e0bf4415 	stw	r2,-752(fp)
   288c8:	e03f4515 	stw	zero,-748(fp)
   288cc:	e0bf4417 	ldw	r2,-752(fp)
   288d0:	e0be5615 	stw	r2,-1704(fp)
   288d4:	e0be5417 	ldw	r2,-1712(fp)
   288d8:	e0be5715 	stw	r2,-1700(fp)
   288dc:	e0fe1617 	ldw	r3,-1960(fp)
   288e0:	e0be5717 	ldw	r2,-1700(fp)
   288e4:	1885883a 	add	r2,r3,r2
   288e8:	e0be1615 	stw	r2,-1960(fp)
   288ec:	e0fe1617 	ldw	r3,-1960(fp)
   288f0:	e0be5717 	ldw	r2,-1700(fp)
   288f4:	1880022e 	bgeu	r3,r2,28900 <secp256k1_scalar_reduce_512+0x11a8>
   288f8:	00c00044 	movi	r3,1
   288fc:	00000106 	br	28904 <secp256k1_scalar_reduce_512+0x11ac>
   28900:	0007883a 	mov	r3,zero
   28904:	e0be5617 	ldw	r2,-1704(fp)
   28908:	10c5883a 	add	r2,r2,r3
   2890c:	e0be5615 	stw	r2,-1704(fp)
   28910:	e0fe1717 	ldw	r3,-1956(fp)
   28914:	e0be5617 	ldw	r2,-1704(fp)
   28918:	1885883a 	add	r2,r3,r2
   2891c:	e0be1715 	stw	r2,-1956(fp)
   28920:	e0fe1717 	ldw	r3,-1956(fp)
   28924:	e0be5617 	ldw	r2,-1704(fp)
   28928:	1880022e 	bgeu	r3,r2,28934 <secp256k1_scalar_reduce_512+0x11dc>
   2892c:	00c00044 	movi	r3,1
   28930:	00000106 	br	28938 <secp256k1_scalar_reduce_512+0x11e0>
   28934:	0007883a 	mov	r3,zero
   28938:	e0be1817 	ldw	r2,-1952(fp)
   2893c:	10c5883a 	add	r2,r2,r3
   28940:	e0be1815 	stw	r2,-1952(fp)
   28944:	e0fe1717 	ldw	r3,-1956(fp)
   28948:	e0be5617 	ldw	r2,-1704(fp)
   2894c:	1885803a 	cmpltu	r2,r3,r2
   28950:	10803fcc 	andi	r2,r2,255
   28954:	10001126 	beq	r2,zero,2899c <secp256k1_scalar_reduce_512+0x1244>
   28958:	e0be1817 	ldw	r2,-1952(fp)
   2895c:	1005003a 	cmpeq	r2,r2,zero
   28960:	10803fcc 	andi	r2,r2,255
   28964:	10000d26 	beq	r2,zero,2899c <secp256k1_scalar_reduce_512+0x1244>
   28968:	d0a01617 	ldw	r2,-32680(gp)
   2896c:	10c00317 	ldw	r3,12(r2)
   28970:	00800174 	movhi	r2,5
   28974:	1096d604 	addi	r2,r2,23384
   28978:	d8800015 	stw	r2,0(sp)
   2897c:	01c05f84 	movi	r7,382
   28980:	01800174 	movhi	r6,5
   28984:	31964204 	addi	r6,r6,22792
   28988:	01400174 	movhi	r5,5
   2898c:	2951e804 	addi	r5,r5,18336
   28990:	1809883a 	mov	r4,r3
   28994:	00461000 	call	46100 <fprintf>
   28998:	0045fd40 	call	45fd4 <abort>
    sumadd(n0);
   2899c:	e0fe1617 	ldw	r3,-1960(fp)
   289a0:	e0be0e17 	ldw	r2,-1992(fp)
   289a4:	1885883a 	add	r2,r3,r2
   289a8:	e0be1615 	stw	r2,-1960(fp)
   289ac:	e0fe1617 	ldw	r3,-1960(fp)
   289b0:	e0be0e17 	ldw	r2,-1992(fp)
   289b4:	1885803a 	cmpltu	r2,r3,r2
   289b8:	10803fcc 	andi	r2,r2,255
   289bc:	e0be5815 	stw	r2,-1696(fp)
   289c0:	e0fe1717 	ldw	r3,-1956(fp)
   289c4:	e0be5817 	ldw	r2,-1696(fp)
   289c8:	1885883a 	add	r2,r3,r2
   289cc:	e0be1715 	stw	r2,-1956(fp)
   289d0:	e0fe1717 	ldw	r3,-1956(fp)
   289d4:	e0be5817 	ldw	r2,-1696(fp)
   289d8:	1880022e 	bgeu	r3,r2,289e4 <secp256k1_scalar_reduce_512+0x128c>
   289dc:	00c00044 	movi	r3,1
   289e0:	00000106 	br	289e8 <secp256k1_scalar_reduce_512+0x1290>
   289e4:	0007883a 	mov	r3,zero
   289e8:	e0be1817 	ldw	r2,-1952(fp)
   289ec:	10c5883a 	add	r2,r2,r3
   289f0:	e0be1815 	stw	r2,-1952(fp)
    extract(m4);
   289f4:	e0be1617 	ldw	r2,-1960(fp)
   289f8:	e0be5915 	stw	r2,-1692(fp)
   289fc:	e0be1717 	ldw	r2,-1956(fp)
   28a00:	e0be1615 	stw	r2,-1960(fp)
   28a04:	e0be1817 	ldw	r2,-1952(fp)
   28a08:	e0be1715 	stw	r2,-1956(fp)
   28a0c:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[5]);
   28a10:	e0bf1717 	ldw	r2,-932(fp)
   28a14:	10800504 	addi	r2,r2,20
   28a18:	10c00017 	ldw	r3,0(r2)
   28a1c:	e0be1617 	ldw	r2,-1960(fp)
   28a20:	10c5883a 	add	r2,r2,r3
   28a24:	e0be1615 	stw	r2,-1960(fp)
   28a28:	e0bf1717 	ldw	r2,-932(fp)
   28a2c:	10800504 	addi	r2,r2,20
   28a30:	10c00017 	ldw	r3,0(r2)
   28a34:	e0be1617 	ldw	r2,-1960(fp)
   28a38:	10c5803a 	cmpltu	r2,r2,r3
   28a3c:	10803fcc 	andi	r2,r2,255
   28a40:	e0be5a15 	stw	r2,-1688(fp)
   28a44:	e0fe1717 	ldw	r3,-1956(fp)
   28a48:	e0be5a17 	ldw	r2,-1688(fp)
   28a4c:	1885883a 	add	r2,r3,r2
   28a50:	e0be1715 	stw	r2,-1956(fp)
   28a54:	e0fe1717 	ldw	r3,-1956(fp)
   28a58:	e0be5a17 	ldw	r2,-1688(fp)
   28a5c:	1880022e 	bgeu	r3,r2,28a68 <secp256k1_scalar_reduce_512+0x1310>
   28a60:	00c00044 	movi	r3,1
   28a64:	00000106 	br	28a6c <secp256k1_scalar_reduce_512+0x1314>
   28a68:	0007883a 	mov	r3,zero
   28a6c:	e0be1817 	ldw	r2,-1952(fp)
   28a70:	10c5883a 	add	r2,r2,r3
   28a74:	e0be1815 	stw	r2,-1952(fp)
    muladd(n5, SECP256K1_N_C_0);
   28a78:	e0be1317 	ldw	r2,-1972(fp)
   28a7c:	e0bf4615 	stw	r2,-744(fp)
   28a80:	e03f4715 	stw	zero,-740(fp)
   28a84:	018bf2b4 	movhi	r6,12234
   28a88:	31afafc4 	addi	r6,r6,-16705
   28a8c:	000f883a 	mov	r7,zero
   28a90:	e13f4617 	ldw	r4,-744(fp)
   28a94:	e17f4717 	ldw	r5,-740(fp)
   28a98:	00438e00 	call	438e0 <__muldi3>
   28a9c:	1009883a 	mov	r4,r2
   28aa0:	180b883a 	mov	r5,r3
   28aa4:	e13e5b15 	stw	r4,-1684(fp)
   28aa8:	e17e5c15 	stw	r5,-1680(fp)
   28aac:	e0be5c17 	ldw	r2,-1680(fp)
   28ab0:	1004d83a 	srl	r2,r2,zero
   28ab4:	e0bf4815 	stw	r2,-736(fp)
   28ab8:	e03f4915 	stw	zero,-732(fp)
   28abc:	e13f4817 	ldw	r4,-736(fp)
   28ac0:	e13e5d15 	stw	r4,-1676(fp)
   28ac4:	e0be5b17 	ldw	r2,-1684(fp)
   28ac8:	e0be5e15 	stw	r2,-1672(fp)
   28acc:	e0fe1617 	ldw	r3,-1960(fp)
   28ad0:	e0be5e17 	ldw	r2,-1672(fp)
   28ad4:	1885883a 	add	r2,r3,r2
   28ad8:	e0be1615 	stw	r2,-1960(fp)
   28adc:	e0fe1617 	ldw	r3,-1960(fp)
   28ae0:	e0be5e17 	ldw	r2,-1672(fp)
   28ae4:	1880022e 	bgeu	r3,r2,28af0 <secp256k1_scalar_reduce_512+0x1398>
   28ae8:	00c00044 	movi	r3,1
   28aec:	00000106 	br	28af4 <secp256k1_scalar_reduce_512+0x139c>
   28af0:	0007883a 	mov	r3,zero
   28af4:	e0be5d17 	ldw	r2,-1676(fp)
   28af8:	10c5883a 	add	r2,r2,r3
   28afc:	e0be5d15 	stw	r2,-1676(fp)
   28b00:	e0fe1717 	ldw	r3,-1956(fp)
   28b04:	e0be5d17 	ldw	r2,-1676(fp)
   28b08:	1885883a 	add	r2,r3,r2
   28b0c:	e0be1715 	stw	r2,-1956(fp)
   28b10:	e0fe1717 	ldw	r3,-1956(fp)
   28b14:	e0be5d17 	ldw	r2,-1676(fp)
   28b18:	1880022e 	bgeu	r3,r2,28b24 <secp256k1_scalar_reduce_512+0x13cc>
   28b1c:	00c00044 	movi	r3,1
   28b20:	00000106 	br	28b28 <secp256k1_scalar_reduce_512+0x13d0>
   28b24:	0007883a 	mov	r3,zero
   28b28:	e0be1817 	ldw	r2,-1952(fp)
   28b2c:	10c5883a 	add	r2,r2,r3
   28b30:	e0be1815 	stw	r2,-1952(fp)
   28b34:	e0fe1717 	ldw	r3,-1956(fp)
   28b38:	e0be5d17 	ldw	r2,-1676(fp)
   28b3c:	1885803a 	cmpltu	r2,r3,r2
   28b40:	10803fcc 	andi	r2,r2,255
   28b44:	10001126 	beq	r2,zero,28b8c <secp256k1_scalar_reduce_512+0x1434>
   28b48:	e0be1817 	ldw	r2,-1952(fp)
   28b4c:	1005003a 	cmpeq	r2,r2,zero
   28b50:	10803fcc 	andi	r2,r2,255
   28b54:	10000d26 	beq	r2,zero,28b8c <secp256k1_scalar_reduce_512+0x1434>
   28b58:	d0a01617 	ldw	r2,-32680(gp)
   28b5c:	10c00317 	ldw	r3,12(r2)
   28b60:	00800174 	movhi	r2,5
   28b64:	1096d604 	addi	r2,r2,23384
   28b68:	d8800015 	stw	r2,0(sp)
   28b6c:	01c06084 	movi	r7,386
   28b70:	01800174 	movhi	r6,5
   28b74:	31964204 	addi	r6,r6,22792
   28b78:	01400174 	movhi	r5,5
   28b7c:	2951e804 	addi	r5,r5,18336
   28b80:	1809883a 	mov	r4,r3
   28b84:	00461000 	call	46100 <fprintf>
   28b88:	0045fd40 	call	45fd4 <abort>
    muladd(n4, SECP256K1_N_C_1);
   28b8c:	e0be1217 	ldw	r2,-1976(fp)
   28b90:	e0bf4a15 	stw	r2,-728(fp)
   28b94:	e03f4b15 	stw	zero,-724(fp)
   28b98:	01900bb4 	movhi	r6,16430
   28b9c:	31a85cc4 	addi	r6,r6,-24205
   28ba0:	000f883a 	mov	r7,zero
   28ba4:	e13f4a17 	ldw	r4,-728(fp)
   28ba8:	e17f4b17 	ldw	r5,-724(fp)
   28bac:	00438e00 	call	438e0 <__muldi3>
   28bb0:	1009883a 	mov	r4,r2
   28bb4:	180b883a 	mov	r5,r3
   28bb8:	e13e5f15 	stw	r4,-1668(fp)
   28bbc:	e17e6015 	stw	r5,-1664(fp)
   28bc0:	e0be6017 	ldw	r2,-1664(fp)
   28bc4:	1004d83a 	srl	r2,r2,zero
   28bc8:	e0bf4c15 	stw	r2,-720(fp)
   28bcc:	e03f4d15 	stw	zero,-716(fp)
   28bd0:	e17f4c17 	ldw	r5,-720(fp)
   28bd4:	e17e6115 	stw	r5,-1660(fp)
   28bd8:	e0be5f17 	ldw	r2,-1668(fp)
   28bdc:	e0be6215 	stw	r2,-1656(fp)
   28be0:	e0fe1617 	ldw	r3,-1960(fp)
   28be4:	e0be6217 	ldw	r2,-1656(fp)
   28be8:	1885883a 	add	r2,r3,r2
   28bec:	e0be1615 	stw	r2,-1960(fp)
   28bf0:	e0fe1617 	ldw	r3,-1960(fp)
   28bf4:	e0be6217 	ldw	r2,-1656(fp)
   28bf8:	1880022e 	bgeu	r3,r2,28c04 <secp256k1_scalar_reduce_512+0x14ac>
   28bfc:	00c00044 	movi	r3,1
   28c00:	00000106 	br	28c08 <secp256k1_scalar_reduce_512+0x14b0>
   28c04:	0007883a 	mov	r3,zero
   28c08:	e0be6117 	ldw	r2,-1660(fp)
   28c0c:	10c5883a 	add	r2,r2,r3
   28c10:	e0be6115 	stw	r2,-1660(fp)
   28c14:	e0fe1717 	ldw	r3,-1956(fp)
   28c18:	e0be6117 	ldw	r2,-1660(fp)
   28c1c:	1885883a 	add	r2,r3,r2
   28c20:	e0be1715 	stw	r2,-1956(fp)
   28c24:	e0fe1717 	ldw	r3,-1956(fp)
   28c28:	e0be6117 	ldw	r2,-1660(fp)
   28c2c:	1880022e 	bgeu	r3,r2,28c38 <secp256k1_scalar_reduce_512+0x14e0>
   28c30:	00c00044 	movi	r3,1
   28c34:	00000106 	br	28c3c <secp256k1_scalar_reduce_512+0x14e4>
   28c38:	0007883a 	mov	r3,zero
   28c3c:	e0be1817 	ldw	r2,-1952(fp)
   28c40:	10c5883a 	add	r2,r2,r3
   28c44:	e0be1815 	stw	r2,-1952(fp)
   28c48:	e0fe1717 	ldw	r3,-1956(fp)
   28c4c:	e0be6117 	ldw	r2,-1660(fp)
   28c50:	1885803a 	cmpltu	r2,r3,r2
   28c54:	10803fcc 	andi	r2,r2,255
   28c58:	10001126 	beq	r2,zero,28ca0 <secp256k1_scalar_reduce_512+0x1548>
   28c5c:	e0be1817 	ldw	r2,-1952(fp)
   28c60:	1005003a 	cmpeq	r2,r2,zero
   28c64:	10803fcc 	andi	r2,r2,255
   28c68:	10000d26 	beq	r2,zero,28ca0 <secp256k1_scalar_reduce_512+0x1548>
   28c6c:	d0a01617 	ldw	r2,-32680(gp)
   28c70:	10c00317 	ldw	r3,12(r2)
   28c74:	00800174 	movhi	r2,5
   28c78:	1096d604 	addi	r2,r2,23384
   28c7c:	d8800015 	stw	r2,0(sp)
   28c80:	01c060c4 	movi	r7,387
   28c84:	01800174 	movhi	r6,5
   28c88:	31964204 	addi	r6,r6,22792
   28c8c:	01400174 	movhi	r5,5
   28c90:	2951e804 	addi	r5,r5,18336
   28c94:	1809883a 	mov	r4,r3
   28c98:	00461000 	call	46100 <fprintf>
   28c9c:	0045fd40 	call	45fd4 <abort>
    muladd(n3, SECP256K1_N_C_2);
   28ca0:	e0be1117 	ldw	r2,-1980(fp)
   28ca4:	e0bf4e15 	stw	r2,-712(fp)
   28ca8:	e03f4f15 	stw	zero,-708(fp)
   28cac:	01942df4 	movhi	r6,20663
   28cb0:	3197f104 	addi	r6,r6,24516
   28cb4:	000f883a 	mov	r7,zero
   28cb8:	e13f4e17 	ldw	r4,-712(fp)
   28cbc:	e17f4f17 	ldw	r5,-708(fp)
   28cc0:	00438e00 	call	438e0 <__muldi3>
   28cc4:	1009883a 	mov	r4,r2
   28cc8:	180b883a 	mov	r5,r3
   28ccc:	e13e6315 	stw	r4,-1652(fp)
   28cd0:	e17e6415 	stw	r5,-1648(fp)
   28cd4:	e0be6417 	ldw	r2,-1648(fp)
   28cd8:	1004d83a 	srl	r2,r2,zero
   28cdc:	e0bf5015 	stw	r2,-704(fp)
   28ce0:	e03f5115 	stw	zero,-700(fp)
   28ce4:	e1bf5017 	ldw	r6,-704(fp)
   28ce8:	e1be6515 	stw	r6,-1644(fp)
   28cec:	e0be6317 	ldw	r2,-1652(fp)
   28cf0:	e0be6615 	stw	r2,-1640(fp)
   28cf4:	e0fe1617 	ldw	r3,-1960(fp)
   28cf8:	e0be6617 	ldw	r2,-1640(fp)
   28cfc:	1885883a 	add	r2,r3,r2
   28d00:	e0be1615 	stw	r2,-1960(fp)
   28d04:	e0fe1617 	ldw	r3,-1960(fp)
   28d08:	e0be6617 	ldw	r2,-1640(fp)
   28d0c:	1880022e 	bgeu	r3,r2,28d18 <secp256k1_scalar_reduce_512+0x15c0>
   28d10:	00c00044 	movi	r3,1
   28d14:	00000106 	br	28d1c <secp256k1_scalar_reduce_512+0x15c4>
   28d18:	0007883a 	mov	r3,zero
   28d1c:	e0be6517 	ldw	r2,-1644(fp)
   28d20:	10c5883a 	add	r2,r2,r3
   28d24:	e0be6515 	stw	r2,-1644(fp)
   28d28:	e0fe1717 	ldw	r3,-1956(fp)
   28d2c:	e0be6517 	ldw	r2,-1644(fp)
   28d30:	1885883a 	add	r2,r3,r2
   28d34:	e0be1715 	stw	r2,-1956(fp)
   28d38:	e0fe1717 	ldw	r3,-1956(fp)
   28d3c:	e0be6517 	ldw	r2,-1644(fp)
   28d40:	1880022e 	bgeu	r3,r2,28d4c <secp256k1_scalar_reduce_512+0x15f4>
   28d44:	00c00044 	movi	r3,1
   28d48:	00000106 	br	28d50 <secp256k1_scalar_reduce_512+0x15f8>
   28d4c:	0007883a 	mov	r3,zero
   28d50:	e0be1817 	ldw	r2,-1952(fp)
   28d54:	10c5883a 	add	r2,r2,r3
   28d58:	e0be1815 	stw	r2,-1952(fp)
   28d5c:	e0fe1717 	ldw	r3,-1956(fp)
   28d60:	e0be6517 	ldw	r2,-1644(fp)
   28d64:	1885803a 	cmpltu	r2,r3,r2
   28d68:	10803fcc 	andi	r2,r2,255
   28d6c:	10001126 	beq	r2,zero,28db4 <secp256k1_scalar_reduce_512+0x165c>
   28d70:	e0be1817 	ldw	r2,-1952(fp)
   28d74:	1005003a 	cmpeq	r2,r2,zero
   28d78:	10803fcc 	andi	r2,r2,255
   28d7c:	10000d26 	beq	r2,zero,28db4 <secp256k1_scalar_reduce_512+0x165c>
   28d80:	d0a01617 	ldw	r2,-32680(gp)
   28d84:	10c00317 	ldw	r3,12(r2)
   28d88:	00800174 	movhi	r2,5
   28d8c:	1096d604 	addi	r2,r2,23384
   28d90:	d8800015 	stw	r2,0(sp)
   28d94:	01c06104 	movi	r7,388
   28d98:	01800174 	movhi	r6,5
   28d9c:	31964204 	addi	r6,r6,22792
   28da0:	01400174 	movhi	r5,5
   28da4:	2951e804 	addi	r5,r5,18336
   28da8:	1809883a 	mov	r4,r3
   28dac:	00461000 	call	46100 <fprintf>
   28db0:	0045fd40 	call	45fd4 <abort>
    muladd(n2, SECP256K1_N_C_3);
   28db4:	e0be1017 	ldw	r2,-1984(fp)
   28db8:	e0bf5215 	stw	r2,-696(fp)
   28dbc:	e03f5315 	stw	zero,-692(fp)
   28dc0:	01915474 	movhi	r6,17745
   28dc4:	3188c644 	addi	r6,r6,8985
   28dc8:	000f883a 	mov	r7,zero
   28dcc:	e13f5217 	ldw	r4,-696(fp)
   28dd0:	e17f5317 	ldw	r5,-692(fp)
   28dd4:	00438e00 	call	438e0 <__muldi3>
   28dd8:	1009883a 	mov	r4,r2
   28ddc:	180b883a 	mov	r5,r3
   28de0:	e13e6715 	stw	r4,-1636(fp)
   28de4:	e17e6815 	stw	r5,-1632(fp)
   28de8:	e0be6817 	ldw	r2,-1632(fp)
   28dec:	1004d83a 	srl	r2,r2,zero
   28df0:	e0bf5415 	stw	r2,-688(fp)
   28df4:	e03f5515 	stw	zero,-684(fp)
   28df8:	e1ff5417 	ldw	r7,-688(fp)
   28dfc:	e1fe6915 	stw	r7,-1628(fp)
   28e00:	e0be6717 	ldw	r2,-1636(fp)
   28e04:	e0be6a15 	stw	r2,-1624(fp)
   28e08:	e0fe1617 	ldw	r3,-1960(fp)
   28e0c:	e0be6a17 	ldw	r2,-1624(fp)
   28e10:	1885883a 	add	r2,r3,r2
   28e14:	e0be1615 	stw	r2,-1960(fp)
   28e18:	e0fe1617 	ldw	r3,-1960(fp)
   28e1c:	e0be6a17 	ldw	r2,-1624(fp)
   28e20:	1880022e 	bgeu	r3,r2,28e2c <secp256k1_scalar_reduce_512+0x16d4>
   28e24:	00c00044 	movi	r3,1
   28e28:	00000106 	br	28e30 <secp256k1_scalar_reduce_512+0x16d8>
   28e2c:	0007883a 	mov	r3,zero
   28e30:	e0be6917 	ldw	r2,-1628(fp)
   28e34:	10c5883a 	add	r2,r2,r3
   28e38:	e0be6915 	stw	r2,-1628(fp)
   28e3c:	e0fe1717 	ldw	r3,-1956(fp)
   28e40:	e0be6917 	ldw	r2,-1628(fp)
   28e44:	1885883a 	add	r2,r3,r2
   28e48:	e0be1715 	stw	r2,-1956(fp)
   28e4c:	e0fe1717 	ldw	r3,-1956(fp)
   28e50:	e0be6917 	ldw	r2,-1628(fp)
   28e54:	1880022e 	bgeu	r3,r2,28e60 <secp256k1_scalar_reduce_512+0x1708>
   28e58:	00c00044 	movi	r3,1
   28e5c:	00000106 	br	28e64 <secp256k1_scalar_reduce_512+0x170c>
   28e60:	0007883a 	mov	r3,zero
   28e64:	e0be1817 	ldw	r2,-1952(fp)
   28e68:	10c5883a 	add	r2,r2,r3
   28e6c:	e0be1815 	stw	r2,-1952(fp)
   28e70:	e0fe1717 	ldw	r3,-1956(fp)
   28e74:	e0be6917 	ldw	r2,-1628(fp)
   28e78:	1885803a 	cmpltu	r2,r3,r2
   28e7c:	10803fcc 	andi	r2,r2,255
   28e80:	10001126 	beq	r2,zero,28ec8 <secp256k1_scalar_reduce_512+0x1770>
   28e84:	e0be1817 	ldw	r2,-1952(fp)
   28e88:	1005003a 	cmpeq	r2,r2,zero
   28e8c:	10803fcc 	andi	r2,r2,255
   28e90:	10000d26 	beq	r2,zero,28ec8 <secp256k1_scalar_reduce_512+0x1770>
   28e94:	d0a01617 	ldw	r2,-32680(gp)
   28e98:	10c00317 	ldw	r3,12(r2)
   28e9c:	00800174 	movhi	r2,5
   28ea0:	1096d604 	addi	r2,r2,23384
   28ea4:	d8800015 	stw	r2,0(sp)
   28ea8:	01c06144 	movi	r7,389
   28eac:	01800174 	movhi	r6,5
   28eb0:	31964204 	addi	r6,r6,22792
   28eb4:	01400174 	movhi	r5,5
   28eb8:	2951e804 	addi	r5,r5,18336
   28ebc:	1809883a 	mov	r4,r3
   28ec0:	00461000 	call	46100 <fprintf>
   28ec4:	0045fd40 	call	45fd4 <abort>
    sumadd(n1);
   28ec8:	e0fe1617 	ldw	r3,-1960(fp)
   28ecc:	e0be0f17 	ldw	r2,-1988(fp)
   28ed0:	1885883a 	add	r2,r3,r2
   28ed4:	e0be1615 	stw	r2,-1960(fp)
   28ed8:	e0fe1617 	ldw	r3,-1960(fp)
   28edc:	e0be0f17 	ldw	r2,-1988(fp)
   28ee0:	1885803a 	cmpltu	r2,r3,r2
   28ee4:	10803fcc 	andi	r2,r2,255
   28ee8:	e0be6b15 	stw	r2,-1620(fp)
   28eec:	e0fe1717 	ldw	r3,-1956(fp)
   28ef0:	e0be6b17 	ldw	r2,-1620(fp)
   28ef4:	1885883a 	add	r2,r3,r2
   28ef8:	e0be1715 	stw	r2,-1956(fp)
   28efc:	e0fe1717 	ldw	r3,-1956(fp)
   28f00:	e0be6b17 	ldw	r2,-1620(fp)
   28f04:	1880022e 	bgeu	r3,r2,28f10 <secp256k1_scalar_reduce_512+0x17b8>
   28f08:	00c00044 	movi	r3,1
   28f0c:	00000106 	br	28f14 <secp256k1_scalar_reduce_512+0x17bc>
   28f10:	0007883a 	mov	r3,zero
   28f14:	e0be1817 	ldw	r2,-1952(fp)
   28f18:	10c5883a 	add	r2,r2,r3
   28f1c:	e0be1815 	stw	r2,-1952(fp)
    extract(m5);
   28f20:	e0be1617 	ldw	r2,-1960(fp)
   28f24:	e0be6c15 	stw	r2,-1616(fp)
   28f28:	e0be1717 	ldw	r2,-1956(fp)
   28f2c:	e0be1615 	stw	r2,-1960(fp)
   28f30:	e0be1817 	ldw	r2,-1952(fp)
   28f34:	e0be1715 	stw	r2,-1956(fp)
   28f38:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[6]);
   28f3c:	e0bf1717 	ldw	r2,-932(fp)
   28f40:	10800604 	addi	r2,r2,24
   28f44:	10c00017 	ldw	r3,0(r2)
   28f48:	e0be1617 	ldw	r2,-1960(fp)
   28f4c:	10c5883a 	add	r2,r2,r3
   28f50:	e0be1615 	stw	r2,-1960(fp)
   28f54:	e0bf1717 	ldw	r2,-932(fp)
   28f58:	10800604 	addi	r2,r2,24
   28f5c:	10c00017 	ldw	r3,0(r2)
   28f60:	e0be1617 	ldw	r2,-1960(fp)
   28f64:	10c5803a 	cmpltu	r2,r2,r3
   28f68:	10803fcc 	andi	r2,r2,255
   28f6c:	e0be6d15 	stw	r2,-1612(fp)
   28f70:	e0fe1717 	ldw	r3,-1956(fp)
   28f74:	e0be6d17 	ldw	r2,-1612(fp)
   28f78:	1885883a 	add	r2,r3,r2
   28f7c:	e0be1715 	stw	r2,-1956(fp)
   28f80:	e0fe1717 	ldw	r3,-1956(fp)
   28f84:	e0be6d17 	ldw	r2,-1612(fp)
   28f88:	1880022e 	bgeu	r3,r2,28f94 <secp256k1_scalar_reduce_512+0x183c>
   28f8c:	00c00044 	movi	r3,1
   28f90:	00000106 	br	28f98 <secp256k1_scalar_reduce_512+0x1840>
   28f94:	0007883a 	mov	r3,zero
   28f98:	e0be1817 	ldw	r2,-1952(fp)
   28f9c:	10c5883a 	add	r2,r2,r3
   28fa0:	e0be1815 	stw	r2,-1952(fp)
    muladd(n6, SECP256K1_N_C_0);
   28fa4:	e0be1417 	ldw	r2,-1968(fp)
   28fa8:	e0bf5615 	stw	r2,-680(fp)
   28fac:	e03f5715 	stw	zero,-676(fp)
   28fb0:	018bf2b4 	movhi	r6,12234
   28fb4:	31afafc4 	addi	r6,r6,-16705
   28fb8:	000f883a 	mov	r7,zero
   28fbc:	e13f5617 	ldw	r4,-680(fp)
   28fc0:	e17f5717 	ldw	r5,-676(fp)
   28fc4:	00438e00 	call	438e0 <__muldi3>
   28fc8:	1009883a 	mov	r4,r2
   28fcc:	180b883a 	mov	r5,r3
   28fd0:	e13e6e15 	stw	r4,-1608(fp)
   28fd4:	e17e6f15 	stw	r5,-1604(fp)
   28fd8:	e0be6f17 	ldw	r2,-1604(fp)
   28fdc:	1004d83a 	srl	r2,r2,zero
   28fe0:	e0bf5815 	stw	r2,-672(fp)
   28fe4:	e03f5915 	stw	zero,-668(fp)
   28fe8:	e0bf5817 	ldw	r2,-672(fp)
   28fec:	e0be7015 	stw	r2,-1600(fp)
   28ff0:	e0be6e17 	ldw	r2,-1608(fp)
   28ff4:	e0be7115 	stw	r2,-1596(fp)
   28ff8:	e0fe1617 	ldw	r3,-1960(fp)
   28ffc:	e0be7117 	ldw	r2,-1596(fp)
   29000:	1885883a 	add	r2,r3,r2
   29004:	e0be1615 	stw	r2,-1960(fp)
   29008:	e0fe1617 	ldw	r3,-1960(fp)
   2900c:	e0be7117 	ldw	r2,-1596(fp)
   29010:	1880022e 	bgeu	r3,r2,2901c <secp256k1_scalar_reduce_512+0x18c4>
   29014:	00c00044 	movi	r3,1
   29018:	00000106 	br	29020 <secp256k1_scalar_reduce_512+0x18c8>
   2901c:	0007883a 	mov	r3,zero
   29020:	e0be7017 	ldw	r2,-1600(fp)
   29024:	10c5883a 	add	r2,r2,r3
   29028:	e0be7015 	stw	r2,-1600(fp)
   2902c:	e0fe1717 	ldw	r3,-1956(fp)
   29030:	e0be7017 	ldw	r2,-1600(fp)
   29034:	1885883a 	add	r2,r3,r2
   29038:	e0be1715 	stw	r2,-1956(fp)
   2903c:	e0fe1717 	ldw	r3,-1956(fp)
   29040:	e0be7017 	ldw	r2,-1600(fp)
   29044:	1880022e 	bgeu	r3,r2,29050 <secp256k1_scalar_reduce_512+0x18f8>
   29048:	00c00044 	movi	r3,1
   2904c:	00000106 	br	29054 <secp256k1_scalar_reduce_512+0x18fc>
   29050:	0007883a 	mov	r3,zero
   29054:	e0be1817 	ldw	r2,-1952(fp)
   29058:	10c5883a 	add	r2,r2,r3
   2905c:	e0be1815 	stw	r2,-1952(fp)
   29060:	e0fe1717 	ldw	r3,-1956(fp)
   29064:	e0be7017 	ldw	r2,-1600(fp)
   29068:	1885803a 	cmpltu	r2,r3,r2
   2906c:	10803fcc 	andi	r2,r2,255
   29070:	10001126 	beq	r2,zero,290b8 <secp256k1_scalar_reduce_512+0x1960>
   29074:	e0be1817 	ldw	r2,-1952(fp)
   29078:	1005003a 	cmpeq	r2,r2,zero
   2907c:	10803fcc 	andi	r2,r2,255
   29080:	10000d26 	beq	r2,zero,290b8 <secp256k1_scalar_reduce_512+0x1960>
   29084:	d0a01617 	ldw	r2,-32680(gp)
   29088:	10c00317 	ldw	r3,12(r2)
   2908c:	00800174 	movhi	r2,5
   29090:	1096d604 	addi	r2,r2,23384
   29094:	d8800015 	stw	r2,0(sp)
   29098:	01c06244 	movi	r7,393
   2909c:	01800174 	movhi	r6,5
   290a0:	31964204 	addi	r6,r6,22792
   290a4:	01400174 	movhi	r5,5
   290a8:	2951e804 	addi	r5,r5,18336
   290ac:	1809883a 	mov	r4,r3
   290b0:	00461000 	call	46100 <fprintf>
   290b4:	0045fd40 	call	45fd4 <abort>
    muladd(n5, SECP256K1_N_C_1);
   290b8:	e0be1317 	ldw	r2,-1972(fp)
   290bc:	e0bf5a15 	stw	r2,-664(fp)
   290c0:	e03f5b15 	stw	zero,-660(fp)
   290c4:	01900bb4 	movhi	r6,16430
   290c8:	31a85cc4 	addi	r6,r6,-24205
   290cc:	000f883a 	mov	r7,zero
   290d0:	e13f5a17 	ldw	r4,-664(fp)
   290d4:	e17f5b17 	ldw	r5,-660(fp)
   290d8:	00438e00 	call	438e0 <__muldi3>
   290dc:	1009883a 	mov	r4,r2
   290e0:	180b883a 	mov	r5,r3
   290e4:	e13e7215 	stw	r4,-1592(fp)
   290e8:	e17e7315 	stw	r5,-1588(fp)
   290ec:	e0be7317 	ldw	r2,-1588(fp)
   290f0:	1004d83a 	srl	r2,r2,zero
   290f4:	e0bf5c15 	stw	r2,-656(fp)
   290f8:	e03f5d15 	stw	zero,-652(fp)
   290fc:	e13f5c17 	ldw	r4,-656(fp)
   29100:	e13e7415 	stw	r4,-1584(fp)
   29104:	e0be7217 	ldw	r2,-1592(fp)
   29108:	e0be7515 	stw	r2,-1580(fp)
   2910c:	e0fe1617 	ldw	r3,-1960(fp)
   29110:	e0be7517 	ldw	r2,-1580(fp)
   29114:	1885883a 	add	r2,r3,r2
   29118:	e0be1615 	stw	r2,-1960(fp)
   2911c:	e0fe1617 	ldw	r3,-1960(fp)
   29120:	e0be7517 	ldw	r2,-1580(fp)
   29124:	1880022e 	bgeu	r3,r2,29130 <secp256k1_scalar_reduce_512+0x19d8>
   29128:	00c00044 	movi	r3,1
   2912c:	00000106 	br	29134 <secp256k1_scalar_reduce_512+0x19dc>
   29130:	0007883a 	mov	r3,zero
   29134:	e0be7417 	ldw	r2,-1584(fp)
   29138:	10c5883a 	add	r2,r2,r3
   2913c:	e0be7415 	stw	r2,-1584(fp)
   29140:	e0fe1717 	ldw	r3,-1956(fp)
   29144:	e0be7417 	ldw	r2,-1584(fp)
   29148:	1885883a 	add	r2,r3,r2
   2914c:	e0be1715 	stw	r2,-1956(fp)
   29150:	e0fe1717 	ldw	r3,-1956(fp)
   29154:	e0be7417 	ldw	r2,-1584(fp)
   29158:	1880022e 	bgeu	r3,r2,29164 <secp256k1_scalar_reduce_512+0x1a0c>
   2915c:	00c00044 	movi	r3,1
   29160:	00000106 	br	29168 <secp256k1_scalar_reduce_512+0x1a10>
   29164:	0007883a 	mov	r3,zero
   29168:	e0be1817 	ldw	r2,-1952(fp)
   2916c:	10c5883a 	add	r2,r2,r3
   29170:	e0be1815 	stw	r2,-1952(fp)
   29174:	e0fe1717 	ldw	r3,-1956(fp)
   29178:	e0be7417 	ldw	r2,-1584(fp)
   2917c:	1885803a 	cmpltu	r2,r3,r2
   29180:	10803fcc 	andi	r2,r2,255
   29184:	10001126 	beq	r2,zero,291cc <secp256k1_scalar_reduce_512+0x1a74>
   29188:	e0be1817 	ldw	r2,-1952(fp)
   2918c:	1005003a 	cmpeq	r2,r2,zero
   29190:	10803fcc 	andi	r2,r2,255
   29194:	10000d26 	beq	r2,zero,291cc <secp256k1_scalar_reduce_512+0x1a74>
   29198:	d0a01617 	ldw	r2,-32680(gp)
   2919c:	10c00317 	ldw	r3,12(r2)
   291a0:	00800174 	movhi	r2,5
   291a4:	1096d604 	addi	r2,r2,23384
   291a8:	d8800015 	stw	r2,0(sp)
   291ac:	01c06284 	movi	r7,394
   291b0:	01800174 	movhi	r6,5
   291b4:	31964204 	addi	r6,r6,22792
   291b8:	01400174 	movhi	r5,5
   291bc:	2951e804 	addi	r5,r5,18336
   291c0:	1809883a 	mov	r4,r3
   291c4:	00461000 	call	46100 <fprintf>
   291c8:	0045fd40 	call	45fd4 <abort>
    muladd(n4, SECP256K1_N_C_2);
   291cc:	e0be1217 	ldw	r2,-1976(fp)
   291d0:	e0bf5e15 	stw	r2,-648(fp)
   291d4:	e03f5f15 	stw	zero,-644(fp)
   291d8:	01942df4 	movhi	r6,20663
   291dc:	3197f104 	addi	r6,r6,24516
   291e0:	000f883a 	mov	r7,zero
   291e4:	e13f5e17 	ldw	r4,-648(fp)
   291e8:	e17f5f17 	ldw	r5,-644(fp)
   291ec:	00438e00 	call	438e0 <__muldi3>
   291f0:	1009883a 	mov	r4,r2
   291f4:	180b883a 	mov	r5,r3
   291f8:	e13e7615 	stw	r4,-1576(fp)
   291fc:	e17e7715 	stw	r5,-1572(fp)
   29200:	e0be7717 	ldw	r2,-1572(fp)
   29204:	1004d83a 	srl	r2,r2,zero
   29208:	e0bf6015 	stw	r2,-640(fp)
   2920c:	e03f6115 	stw	zero,-636(fp)
   29210:	e17f6017 	ldw	r5,-640(fp)
   29214:	e17e7815 	stw	r5,-1568(fp)
   29218:	e0be7617 	ldw	r2,-1576(fp)
   2921c:	e0be7915 	stw	r2,-1564(fp)
   29220:	e0fe1617 	ldw	r3,-1960(fp)
   29224:	e0be7917 	ldw	r2,-1564(fp)
   29228:	1885883a 	add	r2,r3,r2
   2922c:	e0be1615 	stw	r2,-1960(fp)
   29230:	e0fe1617 	ldw	r3,-1960(fp)
   29234:	e0be7917 	ldw	r2,-1564(fp)
   29238:	1880022e 	bgeu	r3,r2,29244 <secp256k1_scalar_reduce_512+0x1aec>
   2923c:	00c00044 	movi	r3,1
   29240:	00000106 	br	29248 <secp256k1_scalar_reduce_512+0x1af0>
   29244:	0007883a 	mov	r3,zero
   29248:	e0be7817 	ldw	r2,-1568(fp)
   2924c:	10c5883a 	add	r2,r2,r3
   29250:	e0be7815 	stw	r2,-1568(fp)
   29254:	e0fe1717 	ldw	r3,-1956(fp)
   29258:	e0be7817 	ldw	r2,-1568(fp)
   2925c:	1885883a 	add	r2,r3,r2
   29260:	e0be1715 	stw	r2,-1956(fp)
   29264:	e0fe1717 	ldw	r3,-1956(fp)
   29268:	e0be7817 	ldw	r2,-1568(fp)
   2926c:	1880022e 	bgeu	r3,r2,29278 <secp256k1_scalar_reduce_512+0x1b20>
   29270:	00c00044 	movi	r3,1
   29274:	00000106 	br	2927c <secp256k1_scalar_reduce_512+0x1b24>
   29278:	0007883a 	mov	r3,zero
   2927c:	e0be1817 	ldw	r2,-1952(fp)
   29280:	10c5883a 	add	r2,r2,r3
   29284:	e0be1815 	stw	r2,-1952(fp)
   29288:	e0fe1717 	ldw	r3,-1956(fp)
   2928c:	e0be7817 	ldw	r2,-1568(fp)
   29290:	1885803a 	cmpltu	r2,r3,r2
   29294:	10803fcc 	andi	r2,r2,255
   29298:	10001126 	beq	r2,zero,292e0 <secp256k1_scalar_reduce_512+0x1b88>
   2929c:	e0be1817 	ldw	r2,-1952(fp)
   292a0:	1005003a 	cmpeq	r2,r2,zero
   292a4:	10803fcc 	andi	r2,r2,255
   292a8:	10000d26 	beq	r2,zero,292e0 <secp256k1_scalar_reduce_512+0x1b88>
   292ac:	d0a01617 	ldw	r2,-32680(gp)
   292b0:	10c00317 	ldw	r3,12(r2)
   292b4:	00800174 	movhi	r2,5
   292b8:	1096d604 	addi	r2,r2,23384
   292bc:	d8800015 	stw	r2,0(sp)
   292c0:	01c062c4 	movi	r7,395
   292c4:	01800174 	movhi	r6,5
   292c8:	31964204 	addi	r6,r6,22792
   292cc:	01400174 	movhi	r5,5
   292d0:	2951e804 	addi	r5,r5,18336
   292d4:	1809883a 	mov	r4,r3
   292d8:	00461000 	call	46100 <fprintf>
   292dc:	0045fd40 	call	45fd4 <abort>
    muladd(n3, SECP256K1_N_C_3);
   292e0:	e0be1117 	ldw	r2,-1980(fp)
   292e4:	e0bf6215 	stw	r2,-632(fp)
   292e8:	e03f6315 	stw	zero,-628(fp)
   292ec:	01915474 	movhi	r6,17745
   292f0:	3188c644 	addi	r6,r6,8985
   292f4:	000f883a 	mov	r7,zero
   292f8:	e13f6217 	ldw	r4,-632(fp)
   292fc:	e17f6317 	ldw	r5,-628(fp)
   29300:	00438e00 	call	438e0 <__muldi3>
   29304:	1009883a 	mov	r4,r2
   29308:	180b883a 	mov	r5,r3
   2930c:	e13e7a15 	stw	r4,-1560(fp)
   29310:	e17e7b15 	stw	r5,-1556(fp)
   29314:	e0be7b17 	ldw	r2,-1556(fp)
   29318:	1004d83a 	srl	r2,r2,zero
   2931c:	e0bf6415 	stw	r2,-624(fp)
   29320:	e03f6515 	stw	zero,-620(fp)
   29324:	e1bf6417 	ldw	r6,-624(fp)
   29328:	e1be7c15 	stw	r6,-1552(fp)
   2932c:	e0be7a17 	ldw	r2,-1560(fp)
   29330:	e0be7d15 	stw	r2,-1548(fp)
   29334:	e0fe1617 	ldw	r3,-1960(fp)
   29338:	e0be7d17 	ldw	r2,-1548(fp)
   2933c:	1885883a 	add	r2,r3,r2
   29340:	e0be1615 	stw	r2,-1960(fp)
   29344:	e0fe1617 	ldw	r3,-1960(fp)
   29348:	e0be7d17 	ldw	r2,-1548(fp)
   2934c:	1880022e 	bgeu	r3,r2,29358 <secp256k1_scalar_reduce_512+0x1c00>
   29350:	00c00044 	movi	r3,1
   29354:	00000106 	br	2935c <secp256k1_scalar_reduce_512+0x1c04>
   29358:	0007883a 	mov	r3,zero
   2935c:	e0be7c17 	ldw	r2,-1552(fp)
   29360:	10c5883a 	add	r2,r2,r3
   29364:	e0be7c15 	stw	r2,-1552(fp)
   29368:	e0fe1717 	ldw	r3,-1956(fp)
   2936c:	e0be7c17 	ldw	r2,-1552(fp)
   29370:	1885883a 	add	r2,r3,r2
   29374:	e0be1715 	stw	r2,-1956(fp)
   29378:	e0fe1717 	ldw	r3,-1956(fp)
   2937c:	e0be7c17 	ldw	r2,-1552(fp)
   29380:	1880022e 	bgeu	r3,r2,2938c <secp256k1_scalar_reduce_512+0x1c34>
   29384:	00c00044 	movi	r3,1
   29388:	00000106 	br	29390 <secp256k1_scalar_reduce_512+0x1c38>
   2938c:	0007883a 	mov	r3,zero
   29390:	e0be1817 	ldw	r2,-1952(fp)
   29394:	10c5883a 	add	r2,r2,r3
   29398:	e0be1815 	stw	r2,-1952(fp)
   2939c:	e0fe1717 	ldw	r3,-1956(fp)
   293a0:	e0be7c17 	ldw	r2,-1552(fp)
   293a4:	1885803a 	cmpltu	r2,r3,r2
   293a8:	10803fcc 	andi	r2,r2,255
   293ac:	10001126 	beq	r2,zero,293f4 <secp256k1_scalar_reduce_512+0x1c9c>
   293b0:	e0be1817 	ldw	r2,-1952(fp)
   293b4:	1005003a 	cmpeq	r2,r2,zero
   293b8:	10803fcc 	andi	r2,r2,255
   293bc:	10000d26 	beq	r2,zero,293f4 <secp256k1_scalar_reduce_512+0x1c9c>
   293c0:	d0a01617 	ldw	r2,-32680(gp)
   293c4:	10c00317 	ldw	r3,12(r2)
   293c8:	00800174 	movhi	r2,5
   293cc:	1096d604 	addi	r2,r2,23384
   293d0:	d8800015 	stw	r2,0(sp)
   293d4:	01c06304 	movi	r7,396
   293d8:	01800174 	movhi	r6,5
   293dc:	31964204 	addi	r6,r6,22792
   293e0:	01400174 	movhi	r5,5
   293e4:	2951e804 	addi	r5,r5,18336
   293e8:	1809883a 	mov	r4,r3
   293ec:	00461000 	call	46100 <fprintf>
   293f0:	0045fd40 	call	45fd4 <abort>
    sumadd(n2);
   293f4:	e0fe1617 	ldw	r3,-1960(fp)
   293f8:	e0be1017 	ldw	r2,-1984(fp)
   293fc:	1885883a 	add	r2,r3,r2
   29400:	e0be1615 	stw	r2,-1960(fp)
   29404:	e0fe1617 	ldw	r3,-1960(fp)
   29408:	e0be1017 	ldw	r2,-1984(fp)
   2940c:	1885803a 	cmpltu	r2,r3,r2
   29410:	10803fcc 	andi	r2,r2,255
   29414:	e0be7e15 	stw	r2,-1544(fp)
   29418:	e0fe1717 	ldw	r3,-1956(fp)
   2941c:	e0be7e17 	ldw	r2,-1544(fp)
   29420:	1885883a 	add	r2,r3,r2
   29424:	e0be1715 	stw	r2,-1956(fp)
   29428:	e0fe1717 	ldw	r3,-1956(fp)
   2942c:	e0be7e17 	ldw	r2,-1544(fp)
   29430:	1880022e 	bgeu	r3,r2,2943c <secp256k1_scalar_reduce_512+0x1ce4>
   29434:	00c00044 	movi	r3,1
   29438:	00000106 	br	29440 <secp256k1_scalar_reduce_512+0x1ce8>
   2943c:	0007883a 	mov	r3,zero
   29440:	e0be1817 	ldw	r2,-1952(fp)
   29444:	10c5883a 	add	r2,r2,r3
   29448:	e0be1815 	stw	r2,-1952(fp)
    extract(m6);
   2944c:	e0be1617 	ldw	r2,-1960(fp)
   29450:	e0be7f15 	stw	r2,-1540(fp)
   29454:	e0be1717 	ldw	r2,-1956(fp)
   29458:	e0be1615 	stw	r2,-1960(fp)
   2945c:	e0be1817 	ldw	r2,-1952(fp)
   29460:	e0be1715 	stw	r2,-1956(fp)
   29464:	e03e1815 	stw	zero,-1952(fp)
    sumadd(l[7]);
   29468:	e0bf1717 	ldw	r2,-932(fp)
   2946c:	10800704 	addi	r2,r2,28
   29470:	10c00017 	ldw	r3,0(r2)
   29474:	e0be1617 	ldw	r2,-1960(fp)
   29478:	10c5883a 	add	r2,r2,r3
   2947c:	e0be1615 	stw	r2,-1960(fp)
   29480:	e0bf1717 	ldw	r2,-932(fp)
   29484:	10800704 	addi	r2,r2,28
   29488:	10c00017 	ldw	r3,0(r2)
   2948c:	e0be1617 	ldw	r2,-1960(fp)
   29490:	10c5803a 	cmpltu	r2,r2,r3
   29494:	10803fcc 	andi	r2,r2,255
   29498:	e0be8015 	stw	r2,-1536(fp)
   2949c:	e0fe1717 	ldw	r3,-1956(fp)
   294a0:	e0be8017 	ldw	r2,-1536(fp)
   294a4:	1885883a 	add	r2,r3,r2
   294a8:	e0be1715 	stw	r2,-1956(fp)
   294ac:	e0fe1717 	ldw	r3,-1956(fp)
   294b0:	e0be8017 	ldw	r2,-1536(fp)
   294b4:	1880022e 	bgeu	r3,r2,294c0 <secp256k1_scalar_reduce_512+0x1d68>
   294b8:	00c00044 	movi	r3,1
   294bc:	00000106 	br	294c4 <secp256k1_scalar_reduce_512+0x1d6c>
   294c0:	0007883a 	mov	r3,zero
   294c4:	e0be1817 	ldw	r2,-1952(fp)
   294c8:	10c5883a 	add	r2,r2,r3
   294cc:	e0be1815 	stw	r2,-1952(fp)
    muladd(n7, SECP256K1_N_C_0);
   294d0:	e0be1517 	ldw	r2,-1964(fp)
   294d4:	e0bf6615 	stw	r2,-616(fp)
   294d8:	e03f6715 	stw	zero,-612(fp)
   294dc:	018bf2b4 	movhi	r6,12234
   294e0:	31afafc4 	addi	r6,r6,-16705
   294e4:	000f883a 	mov	r7,zero
   294e8:	e13f6617 	ldw	r4,-616(fp)
   294ec:	e17f6717 	ldw	r5,-612(fp)
   294f0:	00438e00 	call	438e0 <__muldi3>
   294f4:	1009883a 	mov	r4,r2
   294f8:	180b883a 	mov	r5,r3
   294fc:	e13e8115 	stw	r4,-1532(fp)
   29500:	e17e8215 	stw	r5,-1528(fp)
   29504:	e0be8217 	ldw	r2,-1528(fp)
   29508:	1004d83a 	srl	r2,r2,zero
   2950c:	e0bf6815 	stw	r2,-608(fp)
   29510:	e03f6915 	stw	zero,-604(fp)
   29514:	e1ff6817 	ldw	r7,-608(fp)
   29518:	e1fe8315 	stw	r7,-1524(fp)
   2951c:	e0be8117 	ldw	r2,-1532(fp)
   29520:	e0be8415 	stw	r2,-1520(fp)
   29524:	e0fe1617 	ldw	r3,-1960(fp)
   29528:	e0be8417 	ldw	r2,-1520(fp)
   2952c:	1885883a 	add	r2,r3,r2
   29530:	e0be1615 	stw	r2,-1960(fp)
   29534:	e0fe1617 	ldw	r3,-1960(fp)
   29538:	e0be8417 	ldw	r2,-1520(fp)
   2953c:	1880022e 	bgeu	r3,r2,29548 <secp256k1_scalar_reduce_512+0x1df0>
   29540:	00c00044 	movi	r3,1
   29544:	00000106 	br	2954c <secp256k1_scalar_reduce_512+0x1df4>
   29548:	0007883a 	mov	r3,zero
   2954c:	e0be8317 	ldw	r2,-1524(fp)
   29550:	10c5883a 	add	r2,r2,r3
   29554:	e0be8315 	stw	r2,-1524(fp)
   29558:	e0fe1717 	ldw	r3,-1956(fp)
   2955c:	e0be8317 	ldw	r2,-1524(fp)
   29560:	1885883a 	add	r2,r3,r2
   29564:	e0be1715 	stw	r2,-1956(fp)
   29568:	e0fe1717 	ldw	r3,-1956(fp)
   2956c:	e0be8317 	ldw	r2,-1524(fp)
   29570:	1880022e 	bgeu	r3,r2,2957c <secp256k1_scalar_reduce_512+0x1e24>
   29574:	00c00044 	movi	r3,1
   29578:	00000106 	br	29580 <secp256k1_scalar_reduce_512+0x1e28>
   2957c:	0007883a 	mov	r3,zero
   29580:	e0be1817 	ldw	r2,-1952(fp)
   29584:	10c5883a 	add	r2,r2,r3
   29588:	e0be1815 	stw	r2,-1952(fp)
   2958c:	e0fe1717 	ldw	r3,-1956(fp)
   29590:	e0be8317 	ldw	r2,-1524(fp)
   29594:	1885803a 	cmpltu	r2,r3,r2
   29598:	10803fcc 	andi	r2,r2,255
   2959c:	10001126 	beq	r2,zero,295e4 <secp256k1_scalar_reduce_512+0x1e8c>
   295a0:	e0be1817 	ldw	r2,-1952(fp)
   295a4:	1005003a 	cmpeq	r2,r2,zero
   295a8:	10803fcc 	andi	r2,r2,255
   295ac:	10000d26 	beq	r2,zero,295e4 <secp256k1_scalar_reduce_512+0x1e8c>
   295b0:	d0a01617 	ldw	r2,-32680(gp)
   295b4:	10c00317 	ldw	r3,12(r2)
   295b8:	00800174 	movhi	r2,5
   295bc:	1096d604 	addi	r2,r2,23384
   295c0:	d8800015 	stw	r2,0(sp)
   295c4:	01c06404 	movi	r7,400
   295c8:	01800174 	movhi	r6,5
   295cc:	31964204 	addi	r6,r6,22792
   295d0:	01400174 	movhi	r5,5
   295d4:	2951e804 	addi	r5,r5,18336
   295d8:	1809883a 	mov	r4,r3
   295dc:	00461000 	call	46100 <fprintf>
   295e0:	0045fd40 	call	45fd4 <abort>
    muladd(n6, SECP256K1_N_C_1);
   295e4:	e0be1417 	ldw	r2,-1968(fp)
   295e8:	e0bf6a15 	stw	r2,-600(fp)
   295ec:	e03f6b15 	stw	zero,-596(fp)
   295f0:	01900bb4 	movhi	r6,16430
   295f4:	31a85cc4 	addi	r6,r6,-24205
   295f8:	000f883a 	mov	r7,zero
   295fc:	e13f6a17 	ldw	r4,-600(fp)
   29600:	e17f6b17 	ldw	r5,-596(fp)
   29604:	00438e00 	call	438e0 <__muldi3>
   29608:	1009883a 	mov	r4,r2
   2960c:	180b883a 	mov	r5,r3
   29610:	e13e8515 	stw	r4,-1516(fp)
   29614:	e17e8615 	stw	r5,-1512(fp)
   29618:	e0be8617 	ldw	r2,-1512(fp)
   2961c:	1004d83a 	srl	r2,r2,zero
   29620:	e0bf6c15 	stw	r2,-592(fp)
   29624:	e03f6d15 	stw	zero,-588(fp)
   29628:	e0bf6c17 	ldw	r2,-592(fp)
   2962c:	e0be8715 	stw	r2,-1508(fp)
   29630:	e0be8517 	ldw	r2,-1516(fp)
   29634:	e0be8815 	stw	r2,-1504(fp)
   29638:	e0fe1617 	ldw	r3,-1960(fp)
   2963c:	e0be8817 	ldw	r2,-1504(fp)
   29640:	1885883a 	add	r2,r3,r2
   29644:	e0be1615 	stw	r2,-1960(fp)
   29648:	e0fe1617 	ldw	r3,-1960(fp)
   2964c:	e0be8817 	ldw	r2,-1504(fp)
   29650:	1880022e 	bgeu	r3,r2,2965c <secp256k1_scalar_reduce_512+0x1f04>
   29654:	00c00044 	movi	r3,1
   29658:	00000106 	br	29660 <secp256k1_scalar_reduce_512+0x1f08>
   2965c:	0007883a 	mov	r3,zero
   29660:	e0be8717 	ldw	r2,-1508(fp)
   29664:	10c5883a 	add	r2,r2,r3
   29668:	e0be8715 	stw	r2,-1508(fp)
   2966c:	e0fe1717 	ldw	r3,-1956(fp)
   29670:	e0be8717 	ldw	r2,-1508(fp)
   29674:	1885883a 	add	r2,r3,r2
   29678:	e0be1715 	stw	r2,-1956(fp)
   2967c:	e0fe1717 	ldw	r3,-1956(fp)
   29680:	e0be8717 	ldw	r2,-1508(fp)
   29684:	1880022e 	bgeu	r3,r2,29690 <secp256k1_scalar_reduce_512+0x1f38>
   29688:	00c00044 	movi	r3,1
   2968c:	00000106 	br	29694 <secp256k1_scalar_reduce_512+0x1f3c>
   29690:	0007883a 	mov	r3,zero
   29694:	e0be1817 	ldw	r2,-1952(fp)
   29698:	10c5883a 	add	r2,r2,r3
   2969c:	e0be1815 	stw	r2,-1952(fp)
   296a0:	e0fe1717 	ldw	r3,-1956(fp)
   296a4:	e0be8717 	ldw	r2,-1508(fp)
   296a8:	1885803a 	cmpltu	r2,r3,r2
   296ac:	10803fcc 	andi	r2,r2,255
   296b0:	10001126 	beq	r2,zero,296f8 <secp256k1_scalar_reduce_512+0x1fa0>
   296b4:	e0be1817 	ldw	r2,-1952(fp)
   296b8:	1005003a 	cmpeq	r2,r2,zero
   296bc:	10803fcc 	andi	r2,r2,255
   296c0:	10000d26 	beq	r2,zero,296f8 <secp256k1_scalar_reduce_512+0x1fa0>
   296c4:	d0a01617 	ldw	r2,-32680(gp)
   296c8:	10c00317 	ldw	r3,12(r2)
   296cc:	00800174 	movhi	r2,5
   296d0:	1096d604 	addi	r2,r2,23384
   296d4:	d8800015 	stw	r2,0(sp)
   296d8:	01c06444 	movi	r7,401
   296dc:	01800174 	movhi	r6,5
   296e0:	31964204 	addi	r6,r6,22792
   296e4:	01400174 	movhi	r5,5
   296e8:	2951e804 	addi	r5,r5,18336
   296ec:	1809883a 	mov	r4,r3
   296f0:	00461000 	call	46100 <fprintf>
   296f4:	0045fd40 	call	45fd4 <abort>
    muladd(n5, SECP256K1_N_C_2);
   296f8:	e0be1317 	ldw	r2,-1972(fp)
   296fc:	e0bf6e15 	stw	r2,-584(fp)
   29700:	e03f6f15 	stw	zero,-580(fp)
   29704:	01942df4 	movhi	r6,20663
   29708:	3197f104 	addi	r6,r6,24516
   2970c:	000f883a 	mov	r7,zero
   29710:	e13f6e17 	ldw	r4,-584(fp)
   29714:	e17f6f17 	ldw	r5,-580(fp)
   29718:	00438e00 	call	438e0 <__muldi3>
   2971c:	1009883a 	mov	r4,r2
   29720:	180b883a 	mov	r5,r3
   29724:	e13e8915 	stw	r4,-1500(fp)
   29728:	e17e8a15 	stw	r5,-1496(fp)
   2972c:	e0be8a17 	ldw	r2,-1496(fp)
   29730:	1004d83a 	srl	r2,r2,zero
   29734:	e0bf7015 	stw	r2,-576(fp)
   29738:	e03f7115 	stw	zero,-572(fp)
   2973c:	e13f7017 	ldw	r4,-576(fp)
   29740:	e13e8b15 	stw	r4,-1492(fp)
   29744:	e0be8917 	ldw	r2,-1500(fp)
   29748:	e0be8c15 	stw	r2,-1488(fp)
   2974c:	e0fe1617 	ldw	r3,-1960(fp)
   29750:	e0be8c17 	ldw	r2,-1488(fp)
   29754:	1885883a 	add	r2,r3,r2
   29758:	e0be1615 	stw	r2,-1960(fp)
   2975c:	e0fe1617 	ldw	r3,-1960(fp)
   29760:	e0be8c17 	ldw	r2,-1488(fp)
   29764:	1880022e 	bgeu	r3,r2,29770 <secp256k1_scalar_reduce_512+0x2018>
   29768:	00c00044 	movi	r3,1
   2976c:	00000106 	br	29774 <secp256k1_scalar_reduce_512+0x201c>
   29770:	0007883a 	mov	r3,zero
   29774:	e0be8b17 	ldw	r2,-1492(fp)
   29778:	10c5883a 	add	r2,r2,r3
   2977c:	e0be8b15 	stw	r2,-1492(fp)
   29780:	e0fe1717 	ldw	r3,-1956(fp)
   29784:	e0be8b17 	ldw	r2,-1492(fp)
   29788:	1885883a 	add	r2,r3,r2
   2978c:	e0be1715 	stw	r2,-1956(fp)
   29790:	e0fe1717 	ldw	r3,-1956(fp)
   29794:	e0be8b17 	ldw	r2,-1492(fp)
   29798:	1880022e 	bgeu	r3,r2,297a4 <secp256k1_scalar_reduce_512+0x204c>
   2979c:	00c00044 	movi	r3,1
   297a0:	00000106 	br	297a8 <secp256k1_scalar_reduce_512+0x2050>
   297a4:	0007883a 	mov	r3,zero
   297a8:	e0be1817 	ldw	r2,-1952(fp)
   297ac:	10c5883a 	add	r2,r2,r3
   297b0:	e0be1815 	stw	r2,-1952(fp)
   297b4:	e0fe1717 	ldw	r3,-1956(fp)
   297b8:	e0be8b17 	ldw	r2,-1492(fp)
   297bc:	1885803a 	cmpltu	r2,r3,r2
   297c0:	10803fcc 	andi	r2,r2,255
   297c4:	10001126 	beq	r2,zero,2980c <secp256k1_scalar_reduce_512+0x20b4>
   297c8:	e0be1817 	ldw	r2,-1952(fp)
   297cc:	1005003a 	cmpeq	r2,r2,zero
   297d0:	10803fcc 	andi	r2,r2,255
   297d4:	10000d26 	beq	r2,zero,2980c <secp256k1_scalar_reduce_512+0x20b4>
   297d8:	d0a01617 	ldw	r2,-32680(gp)
   297dc:	10c00317 	ldw	r3,12(r2)
   297e0:	00800174 	movhi	r2,5
   297e4:	1096d604 	addi	r2,r2,23384
   297e8:	d8800015 	stw	r2,0(sp)
   297ec:	01c06484 	movi	r7,402
   297f0:	01800174 	movhi	r6,5
   297f4:	31964204 	addi	r6,r6,22792
   297f8:	01400174 	movhi	r5,5
   297fc:	2951e804 	addi	r5,r5,18336
   29800:	1809883a 	mov	r4,r3
   29804:	00461000 	call	46100 <fprintf>
   29808:	0045fd40 	call	45fd4 <abort>
    muladd(n4, SECP256K1_N_C_3);
   2980c:	e0be1217 	ldw	r2,-1976(fp)
   29810:	e0bf7215 	stw	r2,-568(fp)
   29814:	e03f7315 	stw	zero,-564(fp)
   29818:	01915474 	movhi	r6,17745
   2981c:	3188c644 	addi	r6,r6,8985
   29820:	000f883a 	mov	r7,zero
   29824:	e13f7217 	ldw	r4,-568(fp)
   29828:	e17f7317 	ldw	r5,-564(fp)
   2982c:	00438e00 	call	438e0 <__muldi3>
   29830:	1009883a 	mov	r4,r2
   29834:	180b883a 	mov	r5,r3
   29838:	e13e8d15 	stw	r4,-1484(fp)
   2983c:	e17e8e15 	stw	r5,-1480(fp)
   29840:	e0be8e17 	ldw	r2,-1480(fp)
   29844:	1004d83a 	srl	r2,r2,zero
   29848:	e0bf7415 	stw	r2,-560(fp)
   2984c:	e03f7515 	stw	zero,-556(fp)
   29850:	e17f7417 	ldw	r5,-560(fp)
   29854:	e17e8f15 	stw	r5,-1476(fp)
   29858:	e0be8d17 	ldw	r2,-1484(fp)
   2985c:	e0be9015 	stw	r2,-1472(fp)
   29860:	e0fe1617 	ldw	r3,-1960(fp)
   29864:	e0be9017 	ldw	r2,-1472(fp)
   29868:	1885883a 	add	r2,r3,r2
   2986c:	e0be1615 	stw	r2,-1960(fp)
   29870:	e0fe1617 	ldw	r3,-1960(fp)
   29874:	e0be9017 	ldw	r2,-1472(fp)
   29878:	1880022e 	bgeu	r3,r2,29884 <secp256k1_scalar_reduce_512+0x212c>
   2987c:	00c00044 	movi	r3,1
   29880:	00000106 	br	29888 <secp256k1_scalar_reduce_512+0x2130>
   29884:	0007883a 	mov	r3,zero
   29888:	e0be8f17 	ldw	r2,-1476(fp)
   2988c:	10c5883a 	add	r2,r2,r3
   29890:	e0be8f15 	stw	r2,-1476(fp)
   29894:	e0fe1717 	ldw	r3,-1956(fp)
   29898:	e0be8f17 	ldw	r2,-1476(fp)
   2989c:	1885883a 	add	r2,r3,r2
   298a0:	e0be1715 	stw	r2,-1956(fp)
   298a4:	e0fe1717 	ldw	r3,-1956(fp)
   298a8:	e0be8f17 	ldw	r2,-1476(fp)
   298ac:	1880022e 	bgeu	r3,r2,298b8 <secp256k1_scalar_reduce_512+0x2160>
   298b0:	00c00044 	movi	r3,1
   298b4:	00000106 	br	298bc <secp256k1_scalar_reduce_512+0x2164>
   298b8:	0007883a 	mov	r3,zero
   298bc:	e0be1817 	ldw	r2,-1952(fp)
   298c0:	10c5883a 	add	r2,r2,r3
   298c4:	e0be1815 	stw	r2,-1952(fp)
   298c8:	e0fe1717 	ldw	r3,-1956(fp)
   298cc:	e0be8f17 	ldw	r2,-1476(fp)
   298d0:	1885803a 	cmpltu	r2,r3,r2
   298d4:	10803fcc 	andi	r2,r2,255
   298d8:	10001126 	beq	r2,zero,29920 <secp256k1_scalar_reduce_512+0x21c8>
   298dc:	e0be1817 	ldw	r2,-1952(fp)
   298e0:	1005003a 	cmpeq	r2,r2,zero
   298e4:	10803fcc 	andi	r2,r2,255
   298e8:	10000d26 	beq	r2,zero,29920 <secp256k1_scalar_reduce_512+0x21c8>
   298ec:	d0a01617 	ldw	r2,-32680(gp)
   298f0:	10c00317 	ldw	r3,12(r2)
   298f4:	00800174 	movhi	r2,5
   298f8:	1096d604 	addi	r2,r2,23384
   298fc:	d8800015 	stw	r2,0(sp)
   29900:	01c064c4 	movi	r7,403
   29904:	01800174 	movhi	r6,5
   29908:	31964204 	addi	r6,r6,22792
   2990c:	01400174 	movhi	r5,5
   29910:	2951e804 	addi	r5,r5,18336
   29914:	1809883a 	mov	r4,r3
   29918:	00461000 	call	46100 <fprintf>
   2991c:	0045fd40 	call	45fd4 <abort>
    sumadd(n3);
   29920:	e0fe1617 	ldw	r3,-1960(fp)
   29924:	e0be1117 	ldw	r2,-1980(fp)
   29928:	1885883a 	add	r2,r3,r2
   2992c:	e0be1615 	stw	r2,-1960(fp)
   29930:	e0fe1617 	ldw	r3,-1960(fp)
   29934:	e0be1117 	ldw	r2,-1980(fp)
   29938:	1885803a 	cmpltu	r2,r3,r2
   2993c:	10803fcc 	andi	r2,r2,255
   29940:	e0be9115 	stw	r2,-1468(fp)
   29944:	e0fe1717 	ldw	r3,-1956(fp)
   29948:	e0be9117 	ldw	r2,-1468(fp)
   2994c:	1885883a 	add	r2,r3,r2
   29950:	e0be1715 	stw	r2,-1956(fp)
   29954:	e0fe1717 	ldw	r3,-1956(fp)
   29958:	e0be9117 	ldw	r2,-1468(fp)
   2995c:	1880022e 	bgeu	r3,r2,29968 <secp256k1_scalar_reduce_512+0x2210>
   29960:	00c00044 	movi	r3,1
   29964:	00000106 	br	2996c <secp256k1_scalar_reduce_512+0x2214>
   29968:	0007883a 	mov	r3,zero
   2996c:	e0be1817 	ldw	r2,-1952(fp)
   29970:	10c5883a 	add	r2,r2,r3
   29974:	e0be1815 	stw	r2,-1952(fp)
    extract(m7);
   29978:	e0be1617 	ldw	r2,-1960(fp)
   2997c:	e0be9215 	stw	r2,-1464(fp)
   29980:	e0be1717 	ldw	r2,-1956(fp)
   29984:	e0be1615 	stw	r2,-1960(fp)
   29988:	e0be1817 	ldw	r2,-1952(fp)
   2998c:	e0be1715 	stw	r2,-1956(fp)
   29990:	e03e1815 	stw	zero,-1952(fp)
    muladd(n7, SECP256K1_N_C_1);
   29994:	e0be1517 	ldw	r2,-1964(fp)
   29998:	e0bf7615 	stw	r2,-552(fp)
   2999c:	e03f7715 	stw	zero,-548(fp)
   299a0:	01900bb4 	movhi	r6,16430
   299a4:	31a85cc4 	addi	r6,r6,-24205
   299a8:	000f883a 	mov	r7,zero
   299ac:	e13f7617 	ldw	r4,-552(fp)
   299b0:	e17f7717 	ldw	r5,-548(fp)
   299b4:	00438e00 	call	438e0 <__muldi3>
   299b8:	1009883a 	mov	r4,r2
   299bc:	180b883a 	mov	r5,r3
   299c0:	e13e9315 	stw	r4,-1460(fp)
   299c4:	e17e9415 	stw	r5,-1456(fp)
   299c8:	e0be9417 	ldw	r2,-1456(fp)
   299cc:	1004d83a 	srl	r2,r2,zero
   299d0:	e0bf7815 	stw	r2,-544(fp)
   299d4:	e03f7915 	stw	zero,-540(fp)
   299d8:	e1bf7817 	ldw	r6,-544(fp)
   299dc:	e1be9515 	stw	r6,-1452(fp)
   299e0:	e0be9317 	ldw	r2,-1460(fp)
   299e4:	e0be9615 	stw	r2,-1448(fp)
   299e8:	e0fe1617 	ldw	r3,-1960(fp)
   299ec:	e0be9617 	ldw	r2,-1448(fp)
   299f0:	1885883a 	add	r2,r3,r2
   299f4:	e0be1615 	stw	r2,-1960(fp)
   299f8:	e0fe1617 	ldw	r3,-1960(fp)
   299fc:	e0be9617 	ldw	r2,-1448(fp)
   29a00:	1880022e 	bgeu	r3,r2,29a0c <secp256k1_scalar_reduce_512+0x22b4>
   29a04:	00c00044 	movi	r3,1
   29a08:	00000106 	br	29a10 <secp256k1_scalar_reduce_512+0x22b8>
   29a0c:	0007883a 	mov	r3,zero
   29a10:	e0be9517 	ldw	r2,-1452(fp)
   29a14:	10c5883a 	add	r2,r2,r3
   29a18:	e0be9515 	stw	r2,-1452(fp)
   29a1c:	e0fe1717 	ldw	r3,-1956(fp)
   29a20:	e0be9517 	ldw	r2,-1452(fp)
   29a24:	1885883a 	add	r2,r3,r2
   29a28:	e0be1715 	stw	r2,-1956(fp)
   29a2c:	e0fe1717 	ldw	r3,-1956(fp)
   29a30:	e0be9517 	ldw	r2,-1452(fp)
   29a34:	1880022e 	bgeu	r3,r2,29a40 <secp256k1_scalar_reduce_512+0x22e8>
   29a38:	00c00044 	movi	r3,1
   29a3c:	00000106 	br	29a44 <secp256k1_scalar_reduce_512+0x22ec>
   29a40:	0007883a 	mov	r3,zero
   29a44:	e0be1817 	ldw	r2,-1952(fp)
   29a48:	10c5883a 	add	r2,r2,r3
   29a4c:	e0be1815 	stw	r2,-1952(fp)
   29a50:	e0fe1717 	ldw	r3,-1956(fp)
   29a54:	e0be9517 	ldw	r2,-1452(fp)
   29a58:	1885803a 	cmpltu	r2,r3,r2
   29a5c:	10803fcc 	andi	r2,r2,255
   29a60:	10001126 	beq	r2,zero,29aa8 <secp256k1_scalar_reduce_512+0x2350>
   29a64:	e0be1817 	ldw	r2,-1952(fp)
   29a68:	1005003a 	cmpeq	r2,r2,zero
   29a6c:	10803fcc 	andi	r2,r2,255
   29a70:	10000d26 	beq	r2,zero,29aa8 <secp256k1_scalar_reduce_512+0x2350>
   29a74:	d0a01617 	ldw	r2,-32680(gp)
   29a78:	10c00317 	ldw	r3,12(r2)
   29a7c:	00800174 	movhi	r2,5
   29a80:	1096d604 	addi	r2,r2,23384
   29a84:	d8800015 	stw	r2,0(sp)
   29a88:	01c06584 	movi	r7,406
   29a8c:	01800174 	movhi	r6,5
   29a90:	31964204 	addi	r6,r6,22792
   29a94:	01400174 	movhi	r5,5
   29a98:	2951e804 	addi	r5,r5,18336
   29a9c:	1809883a 	mov	r4,r3
   29aa0:	00461000 	call	46100 <fprintf>
   29aa4:	0045fd40 	call	45fd4 <abort>
    muladd(n6, SECP256K1_N_C_2);
   29aa8:	e0be1417 	ldw	r2,-1968(fp)
   29aac:	e0bf7a15 	stw	r2,-536(fp)
   29ab0:	e03f7b15 	stw	zero,-532(fp)
   29ab4:	01942df4 	movhi	r6,20663
   29ab8:	3197f104 	addi	r6,r6,24516
   29abc:	000f883a 	mov	r7,zero
   29ac0:	e13f7a17 	ldw	r4,-536(fp)
   29ac4:	e17f7b17 	ldw	r5,-532(fp)
   29ac8:	00438e00 	call	438e0 <__muldi3>
   29acc:	1009883a 	mov	r4,r2
   29ad0:	180b883a 	mov	r5,r3
   29ad4:	e13e9715 	stw	r4,-1444(fp)
   29ad8:	e17e9815 	stw	r5,-1440(fp)
   29adc:	e0be9817 	ldw	r2,-1440(fp)
   29ae0:	1004d83a 	srl	r2,r2,zero
   29ae4:	e0bf7c15 	stw	r2,-528(fp)
   29ae8:	e03f7d15 	stw	zero,-524(fp)
   29aec:	e1ff7c17 	ldw	r7,-528(fp)
   29af0:	e1fe9915 	stw	r7,-1436(fp)
   29af4:	e0be9717 	ldw	r2,-1444(fp)
   29af8:	e0be9a15 	stw	r2,-1432(fp)
   29afc:	e0fe1617 	ldw	r3,-1960(fp)
   29b00:	e0be9a17 	ldw	r2,-1432(fp)
   29b04:	1885883a 	add	r2,r3,r2
   29b08:	e0be1615 	stw	r2,-1960(fp)
   29b0c:	e0fe1617 	ldw	r3,-1960(fp)
   29b10:	e0be9a17 	ldw	r2,-1432(fp)
   29b14:	1880022e 	bgeu	r3,r2,29b20 <secp256k1_scalar_reduce_512+0x23c8>
   29b18:	00c00044 	movi	r3,1
   29b1c:	00000106 	br	29b24 <secp256k1_scalar_reduce_512+0x23cc>
   29b20:	0007883a 	mov	r3,zero
   29b24:	e0be9917 	ldw	r2,-1436(fp)
   29b28:	10c5883a 	add	r2,r2,r3
   29b2c:	e0be9915 	stw	r2,-1436(fp)
   29b30:	e0fe1717 	ldw	r3,-1956(fp)
   29b34:	e0be9917 	ldw	r2,-1436(fp)
   29b38:	1885883a 	add	r2,r3,r2
   29b3c:	e0be1715 	stw	r2,-1956(fp)
   29b40:	e0fe1717 	ldw	r3,-1956(fp)
   29b44:	e0be9917 	ldw	r2,-1436(fp)
   29b48:	1880022e 	bgeu	r3,r2,29b54 <secp256k1_scalar_reduce_512+0x23fc>
   29b4c:	00c00044 	movi	r3,1
   29b50:	00000106 	br	29b58 <secp256k1_scalar_reduce_512+0x2400>
   29b54:	0007883a 	mov	r3,zero
   29b58:	e0be1817 	ldw	r2,-1952(fp)
   29b5c:	10c5883a 	add	r2,r2,r3
   29b60:	e0be1815 	stw	r2,-1952(fp)
   29b64:	e0fe1717 	ldw	r3,-1956(fp)
   29b68:	e0be9917 	ldw	r2,-1436(fp)
   29b6c:	1885803a 	cmpltu	r2,r3,r2
   29b70:	10803fcc 	andi	r2,r2,255
   29b74:	10001126 	beq	r2,zero,29bbc <secp256k1_scalar_reduce_512+0x2464>
   29b78:	e0be1817 	ldw	r2,-1952(fp)
   29b7c:	1005003a 	cmpeq	r2,r2,zero
   29b80:	10803fcc 	andi	r2,r2,255
   29b84:	10000d26 	beq	r2,zero,29bbc <secp256k1_scalar_reduce_512+0x2464>
   29b88:	d0a01617 	ldw	r2,-32680(gp)
   29b8c:	10c00317 	ldw	r3,12(r2)
   29b90:	00800174 	movhi	r2,5
   29b94:	1096d604 	addi	r2,r2,23384
   29b98:	d8800015 	stw	r2,0(sp)
   29b9c:	01c065c4 	movi	r7,407
   29ba0:	01800174 	movhi	r6,5
   29ba4:	31964204 	addi	r6,r6,22792
   29ba8:	01400174 	movhi	r5,5
   29bac:	2951e804 	addi	r5,r5,18336
   29bb0:	1809883a 	mov	r4,r3
   29bb4:	00461000 	call	46100 <fprintf>
   29bb8:	0045fd40 	call	45fd4 <abort>
    muladd(n5, SECP256K1_N_C_3);
   29bbc:	e0be1317 	ldw	r2,-1972(fp)
   29bc0:	e0bf7e15 	stw	r2,-520(fp)
   29bc4:	e03f7f15 	stw	zero,-516(fp)
   29bc8:	01915474 	movhi	r6,17745
   29bcc:	3188c644 	addi	r6,r6,8985
   29bd0:	000f883a 	mov	r7,zero
   29bd4:	e13f7e17 	ldw	r4,-520(fp)
   29bd8:	e17f7f17 	ldw	r5,-516(fp)
   29bdc:	00438e00 	call	438e0 <__muldi3>
   29be0:	1009883a 	mov	r4,r2
   29be4:	180b883a 	mov	r5,r3
   29be8:	e13e9b15 	stw	r4,-1428(fp)
   29bec:	e17e9c15 	stw	r5,-1424(fp)
   29bf0:	e0be9c17 	ldw	r2,-1424(fp)
   29bf4:	1004d83a 	srl	r2,r2,zero
   29bf8:	e0bf8015 	stw	r2,-512(fp)
   29bfc:	e03f8115 	stw	zero,-508(fp)
   29c00:	e0bf8017 	ldw	r2,-512(fp)
   29c04:	e0be9d15 	stw	r2,-1420(fp)
   29c08:	e0be9b17 	ldw	r2,-1428(fp)
   29c0c:	e0be9e15 	stw	r2,-1416(fp)
   29c10:	e0fe1617 	ldw	r3,-1960(fp)
   29c14:	e0be9e17 	ldw	r2,-1416(fp)
   29c18:	1885883a 	add	r2,r3,r2
   29c1c:	e0be1615 	stw	r2,-1960(fp)
   29c20:	e0fe1617 	ldw	r3,-1960(fp)
   29c24:	e0be9e17 	ldw	r2,-1416(fp)
   29c28:	1880022e 	bgeu	r3,r2,29c34 <secp256k1_scalar_reduce_512+0x24dc>
   29c2c:	00c00044 	movi	r3,1
   29c30:	00000106 	br	29c38 <secp256k1_scalar_reduce_512+0x24e0>
   29c34:	0007883a 	mov	r3,zero
   29c38:	e0be9d17 	ldw	r2,-1420(fp)
   29c3c:	10c5883a 	add	r2,r2,r3
   29c40:	e0be9d15 	stw	r2,-1420(fp)
   29c44:	e0fe1717 	ldw	r3,-1956(fp)
   29c48:	e0be9d17 	ldw	r2,-1420(fp)
   29c4c:	1885883a 	add	r2,r3,r2
   29c50:	e0be1715 	stw	r2,-1956(fp)
   29c54:	e0fe1717 	ldw	r3,-1956(fp)
   29c58:	e0be9d17 	ldw	r2,-1420(fp)
   29c5c:	1880022e 	bgeu	r3,r2,29c68 <secp256k1_scalar_reduce_512+0x2510>
   29c60:	00c00044 	movi	r3,1
   29c64:	00000106 	br	29c6c <secp256k1_scalar_reduce_512+0x2514>
   29c68:	0007883a 	mov	r3,zero
   29c6c:	e0be1817 	ldw	r2,-1952(fp)
   29c70:	10c5883a 	add	r2,r2,r3
   29c74:	e0be1815 	stw	r2,-1952(fp)
   29c78:	e0fe1717 	ldw	r3,-1956(fp)
   29c7c:	e0be9d17 	ldw	r2,-1420(fp)
   29c80:	1885803a 	cmpltu	r2,r3,r2
   29c84:	10803fcc 	andi	r2,r2,255
   29c88:	10001126 	beq	r2,zero,29cd0 <secp256k1_scalar_reduce_512+0x2578>
   29c8c:	e0be1817 	ldw	r2,-1952(fp)
   29c90:	1005003a 	cmpeq	r2,r2,zero
   29c94:	10803fcc 	andi	r2,r2,255
   29c98:	10000d26 	beq	r2,zero,29cd0 <secp256k1_scalar_reduce_512+0x2578>
   29c9c:	d0a01617 	ldw	r2,-32680(gp)
   29ca0:	10c00317 	ldw	r3,12(r2)
   29ca4:	00800174 	movhi	r2,5
   29ca8:	1096d604 	addi	r2,r2,23384
   29cac:	d8800015 	stw	r2,0(sp)
   29cb0:	01c06604 	movi	r7,408
   29cb4:	01800174 	movhi	r6,5
   29cb8:	31964204 	addi	r6,r6,22792
   29cbc:	01400174 	movhi	r5,5
   29cc0:	2951e804 	addi	r5,r5,18336
   29cc4:	1809883a 	mov	r4,r3
   29cc8:	00461000 	call	46100 <fprintf>
   29ccc:	0045fd40 	call	45fd4 <abort>
    sumadd(n4);
   29cd0:	e0fe1617 	ldw	r3,-1960(fp)
   29cd4:	e0be1217 	ldw	r2,-1976(fp)
   29cd8:	1885883a 	add	r2,r3,r2
   29cdc:	e0be1615 	stw	r2,-1960(fp)
   29ce0:	e0fe1617 	ldw	r3,-1960(fp)
   29ce4:	e0be1217 	ldw	r2,-1976(fp)
   29ce8:	1885803a 	cmpltu	r2,r3,r2
   29cec:	10803fcc 	andi	r2,r2,255
   29cf0:	e0be9f15 	stw	r2,-1412(fp)
   29cf4:	e0fe1717 	ldw	r3,-1956(fp)
   29cf8:	e0be9f17 	ldw	r2,-1412(fp)
   29cfc:	1885883a 	add	r2,r3,r2
   29d00:	e0be1715 	stw	r2,-1956(fp)
   29d04:	e0fe1717 	ldw	r3,-1956(fp)
   29d08:	e0be9f17 	ldw	r2,-1412(fp)
   29d0c:	1880022e 	bgeu	r3,r2,29d18 <secp256k1_scalar_reduce_512+0x25c0>
   29d10:	00c00044 	movi	r3,1
   29d14:	00000106 	br	29d1c <secp256k1_scalar_reduce_512+0x25c4>
   29d18:	0007883a 	mov	r3,zero
   29d1c:	e0be1817 	ldw	r2,-1952(fp)
   29d20:	10c5883a 	add	r2,r2,r3
   29d24:	e0be1815 	stw	r2,-1952(fp)
    extract(m8);
   29d28:	e0be1617 	ldw	r2,-1960(fp)
   29d2c:	e0bea015 	stw	r2,-1408(fp)
   29d30:	e0be1717 	ldw	r2,-1956(fp)
   29d34:	e0be1615 	stw	r2,-1960(fp)
   29d38:	e0be1817 	ldw	r2,-1952(fp)
   29d3c:	e0be1715 	stw	r2,-1956(fp)
   29d40:	e03e1815 	stw	zero,-1952(fp)
    muladd(n7, SECP256K1_N_C_2);
   29d44:	e0be1517 	ldw	r2,-1964(fp)
   29d48:	e0bf8215 	stw	r2,-504(fp)
   29d4c:	e03f8315 	stw	zero,-500(fp)
   29d50:	01942df4 	movhi	r6,20663
   29d54:	3197f104 	addi	r6,r6,24516
   29d58:	000f883a 	mov	r7,zero
   29d5c:	e13f8217 	ldw	r4,-504(fp)
   29d60:	e17f8317 	ldw	r5,-500(fp)
   29d64:	00438e00 	call	438e0 <__muldi3>
   29d68:	1009883a 	mov	r4,r2
   29d6c:	180b883a 	mov	r5,r3
   29d70:	e13ea115 	stw	r4,-1404(fp)
   29d74:	e17ea215 	stw	r5,-1400(fp)
   29d78:	e0bea217 	ldw	r2,-1400(fp)
   29d7c:	1004d83a 	srl	r2,r2,zero
   29d80:	e0bf8415 	stw	r2,-496(fp)
   29d84:	e03f8515 	stw	zero,-492(fp)
   29d88:	e13f8417 	ldw	r4,-496(fp)
   29d8c:	e13ea315 	stw	r4,-1396(fp)
   29d90:	e0bea117 	ldw	r2,-1404(fp)
   29d94:	e0bea415 	stw	r2,-1392(fp)
   29d98:	e0fe1617 	ldw	r3,-1960(fp)
   29d9c:	e0bea417 	ldw	r2,-1392(fp)
   29da0:	1885883a 	add	r2,r3,r2
   29da4:	e0be1615 	stw	r2,-1960(fp)
   29da8:	e0fe1617 	ldw	r3,-1960(fp)
   29dac:	e0bea417 	ldw	r2,-1392(fp)
   29db0:	1880022e 	bgeu	r3,r2,29dbc <secp256k1_scalar_reduce_512+0x2664>
   29db4:	00c00044 	movi	r3,1
   29db8:	00000106 	br	29dc0 <secp256k1_scalar_reduce_512+0x2668>
   29dbc:	0007883a 	mov	r3,zero
   29dc0:	e0bea317 	ldw	r2,-1396(fp)
   29dc4:	10c5883a 	add	r2,r2,r3
   29dc8:	e0bea315 	stw	r2,-1396(fp)
   29dcc:	e0fe1717 	ldw	r3,-1956(fp)
   29dd0:	e0bea317 	ldw	r2,-1396(fp)
   29dd4:	1885883a 	add	r2,r3,r2
   29dd8:	e0be1715 	stw	r2,-1956(fp)
   29ddc:	e0fe1717 	ldw	r3,-1956(fp)
   29de0:	e0bea317 	ldw	r2,-1396(fp)
   29de4:	1880022e 	bgeu	r3,r2,29df0 <secp256k1_scalar_reduce_512+0x2698>
   29de8:	00c00044 	movi	r3,1
   29dec:	00000106 	br	29df4 <secp256k1_scalar_reduce_512+0x269c>
   29df0:	0007883a 	mov	r3,zero
   29df4:	e0be1817 	ldw	r2,-1952(fp)
   29df8:	10c5883a 	add	r2,r2,r3
   29dfc:	e0be1815 	stw	r2,-1952(fp)
   29e00:	e0fe1717 	ldw	r3,-1956(fp)
   29e04:	e0bea317 	ldw	r2,-1396(fp)
   29e08:	1885803a 	cmpltu	r2,r3,r2
   29e0c:	10803fcc 	andi	r2,r2,255
   29e10:	10001126 	beq	r2,zero,29e58 <secp256k1_scalar_reduce_512+0x2700>
   29e14:	e0be1817 	ldw	r2,-1952(fp)
   29e18:	1005003a 	cmpeq	r2,r2,zero
   29e1c:	10803fcc 	andi	r2,r2,255
   29e20:	10000d26 	beq	r2,zero,29e58 <secp256k1_scalar_reduce_512+0x2700>
   29e24:	d0a01617 	ldw	r2,-32680(gp)
   29e28:	10c00317 	ldw	r3,12(r2)
   29e2c:	00800174 	movhi	r2,5
   29e30:	1096d604 	addi	r2,r2,23384
   29e34:	d8800015 	stw	r2,0(sp)
   29e38:	01c066c4 	movi	r7,411
   29e3c:	01800174 	movhi	r6,5
   29e40:	31964204 	addi	r6,r6,22792
   29e44:	01400174 	movhi	r5,5
   29e48:	2951e804 	addi	r5,r5,18336
   29e4c:	1809883a 	mov	r4,r3
   29e50:	00461000 	call	46100 <fprintf>
   29e54:	0045fd40 	call	45fd4 <abort>
    muladd(n6, SECP256K1_N_C_3);
   29e58:	e0be1417 	ldw	r2,-1968(fp)
   29e5c:	e0bf8615 	stw	r2,-488(fp)
   29e60:	e03f8715 	stw	zero,-484(fp)
   29e64:	01915474 	movhi	r6,17745
   29e68:	3188c644 	addi	r6,r6,8985
   29e6c:	000f883a 	mov	r7,zero
   29e70:	e13f8617 	ldw	r4,-488(fp)
   29e74:	e17f8717 	ldw	r5,-484(fp)
   29e78:	00438e00 	call	438e0 <__muldi3>
   29e7c:	1009883a 	mov	r4,r2
   29e80:	180b883a 	mov	r5,r3
   29e84:	e13ea515 	stw	r4,-1388(fp)
   29e88:	e17ea615 	stw	r5,-1384(fp)
   29e8c:	e0bea617 	ldw	r2,-1384(fp)
   29e90:	1004d83a 	srl	r2,r2,zero
   29e94:	e0bf8815 	stw	r2,-480(fp)
   29e98:	e03f8915 	stw	zero,-476(fp)
   29e9c:	e17f8817 	ldw	r5,-480(fp)
   29ea0:	e17ea715 	stw	r5,-1380(fp)
   29ea4:	e0bea517 	ldw	r2,-1388(fp)
   29ea8:	e0bea815 	stw	r2,-1376(fp)
   29eac:	e0fe1617 	ldw	r3,-1960(fp)
   29eb0:	e0bea817 	ldw	r2,-1376(fp)
   29eb4:	1885883a 	add	r2,r3,r2
   29eb8:	e0be1615 	stw	r2,-1960(fp)
   29ebc:	e0fe1617 	ldw	r3,-1960(fp)
   29ec0:	e0bea817 	ldw	r2,-1376(fp)
   29ec4:	1880022e 	bgeu	r3,r2,29ed0 <secp256k1_scalar_reduce_512+0x2778>
   29ec8:	00c00044 	movi	r3,1
   29ecc:	00000106 	br	29ed4 <secp256k1_scalar_reduce_512+0x277c>
   29ed0:	0007883a 	mov	r3,zero
   29ed4:	e0bea717 	ldw	r2,-1380(fp)
   29ed8:	10c5883a 	add	r2,r2,r3
   29edc:	e0bea715 	stw	r2,-1380(fp)
   29ee0:	e0fe1717 	ldw	r3,-1956(fp)
   29ee4:	e0bea717 	ldw	r2,-1380(fp)
   29ee8:	1885883a 	add	r2,r3,r2
   29eec:	e0be1715 	stw	r2,-1956(fp)
   29ef0:	e0fe1717 	ldw	r3,-1956(fp)
   29ef4:	e0bea717 	ldw	r2,-1380(fp)
   29ef8:	1880022e 	bgeu	r3,r2,29f04 <secp256k1_scalar_reduce_512+0x27ac>
   29efc:	00c00044 	movi	r3,1
   29f00:	00000106 	br	29f08 <secp256k1_scalar_reduce_512+0x27b0>
   29f04:	0007883a 	mov	r3,zero
   29f08:	e0be1817 	ldw	r2,-1952(fp)
   29f0c:	10c5883a 	add	r2,r2,r3
   29f10:	e0be1815 	stw	r2,-1952(fp)
   29f14:	e0fe1717 	ldw	r3,-1956(fp)
   29f18:	e0bea717 	ldw	r2,-1380(fp)
   29f1c:	1885803a 	cmpltu	r2,r3,r2
   29f20:	10803fcc 	andi	r2,r2,255
   29f24:	10001126 	beq	r2,zero,29f6c <secp256k1_scalar_reduce_512+0x2814>
   29f28:	e0be1817 	ldw	r2,-1952(fp)
   29f2c:	1005003a 	cmpeq	r2,r2,zero
   29f30:	10803fcc 	andi	r2,r2,255
   29f34:	10000d26 	beq	r2,zero,29f6c <secp256k1_scalar_reduce_512+0x2814>
   29f38:	d0a01617 	ldw	r2,-32680(gp)
   29f3c:	10c00317 	ldw	r3,12(r2)
   29f40:	00800174 	movhi	r2,5
   29f44:	1096d604 	addi	r2,r2,23384
   29f48:	d8800015 	stw	r2,0(sp)
   29f4c:	01c06704 	movi	r7,412
   29f50:	01800174 	movhi	r6,5
   29f54:	31964204 	addi	r6,r6,22792
   29f58:	01400174 	movhi	r5,5
   29f5c:	2951e804 	addi	r5,r5,18336
   29f60:	1809883a 	mov	r4,r3
   29f64:	00461000 	call	46100 <fprintf>
   29f68:	0045fd40 	call	45fd4 <abort>
    sumadd(n5);
   29f6c:	e0fe1617 	ldw	r3,-1960(fp)
   29f70:	e0be1317 	ldw	r2,-1972(fp)
   29f74:	1885883a 	add	r2,r3,r2
   29f78:	e0be1615 	stw	r2,-1960(fp)
   29f7c:	e0fe1617 	ldw	r3,-1960(fp)
   29f80:	e0be1317 	ldw	r2,-1972(fp)
   29f84:	1885803a 	cmpltu	r2,r3,r2
   29f88:	10803fcc 	andi	r2,r2,255
   29f8c:	e0bea915 	stw	r2,-1372(fp)
   29f90:	e0fe1717 	ldw	r3,-1956(fp)
   29f94:	e0bea917 	ldw	r2,-1372(fp)
   29f98:	1885883a 	add	r2,r3,r2
   29f9c:	e0be1715 	stw	r2,-1956(fp)
   29fa0:	e0fe1717 	ldw	r3,-1956(fp)
   29fa4:	e0bea917 	ldw	r2,-1372(fp)
   29fa8:	1880022e 	bgeu	r3,r2,29fb4 <secp256k1_scalar_reduce_512+0x285c>
   29fac:	00c00044 	movi	r3,1
   29fb0:	00000106 	br	29fb8 <secp256k1_scalar_reduce_512+0x2860>
   29fb4:	0007883a 	mov	r3,zero
   29fb8:	e0be1817 	ldw	r2,-1952(fp)
   29fbc:	10c5883a 	add	r2,r2,r3
   29fc0:	e0be1815 	stw	r2,-1952(fp)
    extract(m9);
   29fc4:	e0be1617 	ldw	r2,-1960(fp)
   29fc8:	e0beaa15 	stw	r2,-1368(fp)
   29fcc:	e0be1717 	ldw	r2,-1956(fp)
   29fd0:	e0be1615 	stw	r2,-1960(fp)
   29fd4:	e0be1817 	ldw	r2,-1952(fp)
   29fd8:	e0be1715 	stw	r2,-1956(fp)
   29fdc:	e03e1815 	stw	zero,-1952(fp)
    muladd(n7, SECP256K1_N_C_3);
   29fe0:	e0be1517 	ldw	r2,-1964(fp)
   29fe4:	e0bf8a15 	stw	r2,-472(fp)
   29fe8:	e03f8b15 	stw	zero,-468(fp)
   29fec:	01915474 	movhi	r6,17745
   29ff0:	3188c644 	addi	r6,r6,8985
   29ff4:	000f883a 	mov	r7,zero
   29ff8:	e13f8a17 	ldw	r4,-472(fp)
   29ffc:	e17f8b17 	ldw	r5,-468(fp)
   2a000:	00438e00 	call	438e0 <__muldi3>
   2a004:	1009883a 	mov	r4,r2
   2a008:	180b883a 	mov	r5,r3
   2a00c:	e13eab15 	stw	r4,-1364(fp)
   2a010:	e17eac15 	stw	r5,-1360(fp)
   2a014:	e0beac17 	ldw	r2,-1360(fp)
   2a018:	1004d83a 	srl	r2,r2,zero
   2a01c:	e0bf8c15 	stw	r2,-464(fp)
   2a020:	e03f8d15 	stw	zero,-460(fp)
   2a024:	e1bf8c17 	ldw	r6,-464(fp)
   2a028:	e1bead15 	stw	r6,-1356(fp)
   2a02c:	e0beab17 	ldw	r2,-1364(fp)
   2a030:	e0beae15 	stw	r2,-1352(fp)
   2a034:	e0fe1617 	ldw	r3,-1960(fp)
   2a038:	e0beae17 	ldw	r2,-1352(fp)
   2a03c:	1885883a 	add	r2,r3,r2
   2a040:	e0be1615 	stw	r2,-1960(fp)
   2a044:	e0fe1617 	ldw	r3,-1960(fp)
   2a048:	e0beae17 	ldw	r2,-1352(fp)
   2a04c:	1880022e 	bgeu	r3,r2,2a058 <secp256k1_scalar_reduce_512+0x2900>
   2a050:	00c00044 	movi	r3,1
   2a054:	00000106 	br	2a05c <secp256k1_scalar_reduce_512+0x2904>
   2a058:	0007883a 	mov	r3,zero
   2a05c:	e0bead17 	ldw	r2,-1356(fp)
   2a060:	10c5883a 	add	r2,r2,r3
   2a064:	e0bead15 	stw	r2,-1356(fp)
   2a068:	e0fe1717 	ldw	r3,-1956(fp)
   2a06c:	e0bead17 	ldw	r2,-1356(fp)
   2a070:	1885883a 	add	r2,r3,r2
   2a074:	e0be1715 	stw	r2,-1956(fp)
   2a078:	e0fe1717 	ldw	r3,-1956(fp)
   2a07c:	e0bead17 	ldw	r2,-1356(fp)
   2a080:	1880022e 	bgeu	r3,r2,2a08c <secp256k1_scalar_reduce_512+0x2934>
   2a084:	00c00044 	movi	r3,1
   2a088:	00000106 	br	2a090 <secp256k1_scalar_reduce_512+0x2938>
   2a08c:	0007883a 	mov	r3,zero
   2a090:	e0be1817 	ldw	r2,-1952(fp)
   2a094:	10c5883a 	add	r2,r2,r3
   2a098:	e0be1815 	stw	r2,-1952(fp)
   2a09c:	e0fe1717 	ldw	r3,-1956(fp)
   2a0a0:	e0bead17 	ldw	r2,-1356(fp)
   2a0a4:	1885803a 	cmpltu	r2,r3,r2
   2a0a8:	10803fcc 	andi	r2,r2,255
   2a0ac:	10001126 	beq	r2,zero,2a0f4 <secp256k1_scalar_reduce_512+0x299c>
   2a0b0:	e0be1817 	ldw	r2,-1952(fp)
   2a0b4:	1005003a 	cmpeq	r2,r2,zero
   2a0b8:	10803fcc 	andi	r2,r2,255
   2a0bc:	10000d26 	beq	r2,zero,2a0f4 <secp256k1_scalar_reduce_512+0x299c>
   2a0c0:	d0a01617 	ldw	r2,-32680(gp)
   2a0c4:	10c00317 	ldw	r3,12(r2)
   2a0c8:	00800174 	movhi	r2,5
   2a0cc:	1096d604 	addi	r2,r2,23384
   2a0d0:	d8800015 	stw	r2,0(sp)
   2a0d4:	01c067c4 	movi	r7,415
   2a0d8:	01800174 	movhi	r6,5
   2a0dc:	31964204 	addi	r6,r6,22792
   2a0e0:	01400174 	movhi	r5,5
   2a0e4:	2951e804 	addi	r5,r5,18336
   2a0e8:	1809883a 	mov	r4,r3
   2a0ec:	00461000 	call	46100 <fprintf>
   2a0f0:	0045fd40 	call	45fd4 <abort>
    sumadd(n6);
   2a0f4:	e0fe1617 	ldw	r3,-1960(fp)
   2a0f8:	e0be1417 	ldw	r2,-1968(fp)
   2a0fc:	1885883a 	add	r2,r3,r2
   2a100:	e0be1615 	stw	r2,-1960(fp)
   2a104:	e0fe1617 	ldw	r3,-1960(fp)
   2a108:	e0be1417 	ldw	r2,-1968(fp)
   2a10c:	1885803a 	cmpltu	r2,r3,r2
   2a110:	10803fcc 	andi	r2,r2,255
   2a114:	e0beaf15 	stw	r2,-1348(fp)
   2a118:	e0fe1717 	ldw	r3,-1956(fp)
   2a11c:	e0beaf17 	ldw	r2,-1348(fp)
   2a120:	1885883a 	add	r2,r3,r2
   2a124:	e0be1715 	stw	r2,-1956(fp)
   2a128:	e0fe1717 	ldw	r3,-1956(fp)
   2a12c:	e0beaf17 	ldw	r2,-1348(fp)
   2a130:	1880022e 	bgeu	r3,r2,2a13c <secp256k1_scalar_reduce_512+0x29e4>
   2a134:	00c00044 	movi	r3,1
   2a138:	00000106 	br	2a140 <secp256k1_scalar_reduce_512+0x29e8>
   2a13c:	0007883a 	mov	r3,zero
   2a140:	e0be1817 	ldw	r2,-1952(fp)
   2a144:	10c5883a 	add	r2,r2,r3
   2a148:	e0be1815 	stw	r2,-1952(fp)
    extract(m10);
   2a14c:	e0be1617 	ldw	r2,-1960(fp)
   2a150:	e0beb015 	stw	r2,-1344(fp)
   2a154:	e0be1717 	ldw	r2,-1956(fp)
   2a158:	e0be1615 	stw	r2,-1960(fp)
   2a15c:	e0be1817 	ldw	r2,-1952(fp)
   2a160:	e0be1715 	stw	r2,-1956(fp)
   2a164:	e03e1815 	stw	zero,-1952(fp)
    sumadd_fast(n7);
   2a168:	e0fe1617 	ldw	r3,-1960(fp)
   2a16c:	e0be1517 	ldw	r2,-1964(fp)
   2a170:	1885883a 	add	r2,r3,r2
   2a174:	e0be1615 	stw	r2,-1960(fp)
   2a178:	e0fe1617 	ldw	r3,-1960(fp)
   2a17c:	e0be1517 	ldw	r2,-1964(fp)
   2a180:	1880022e 	bgeu	r3,r2,2a18c <secp256k1_scalar_reduce_512+0x2a34>
   2a184:	00c00044 	movi	r3,1
   2a188:	00000106 	br	2a190 <secp256k1_scalar_reduce_512+0x2a38>
   2a18c:	0007883a 	mov	r3,zero
   2a190:	e0be1717 	ldw	r2,-1956(fp)
   2a194:	10c5883a 	add	r2,r2,r3
   2a198:	e0be1715 	stw	r2,-1956(fp)
   2a19c:	e0be1717 	ldw	r2,-1956(fp)
   2a1a0:	1005003a 	cmpeq	r2,r2,zero
   2a1a4:	1009883a 	mov	r4,r2
   2a1a8:	e0fe1617 	ldw	r3,-1960(fp)
   2a1ac:	e0be1517 	ldw	r2,-1964(fp)
   2a1b0:	1885803a 	cmpltu	r2,r3,r2
   2a1b4:	2084703a 	and	r2,r4,r2
   2a1b8:	10803fcc 	andi	r2,r2,255
   2a1bc:	10000d26 	beq	r2,zero,2a1f4 <secp256k1_scalar_reduce_512+0x2a9c>
   2a1c0:	d0a01617 	ldw	r2,-32680(gp)
   2a1c4:	10c00317 	ldw	r3,12(r2)
   2a1c8:	00800174 	movhi	r2,5
   2a1cc:	1096e204 	addi	r2,r2,23432
   2a1d0:	d8800015 	stw	r2,0(sp)
   2a1d4:	01c06884 	movi	r7,418
   2a1d8:	01800174 	movhi	r6,5
   2a1dc:	31964204 	addi	r6,r6,22792
   2a1e0:	01400174 	movhi	r5,5
   2a1e4:	2951e804 	addi	r5,r5,18336
   2a1e8:	1809883a 	mov	r4,r3
   2a1ec:	00461000 	call	46100 <fprintf>
   2a1f0:	0045fd40 	call	45fd4 <abort>
   2a1f4:	e0be1817 	ldw	r2,-1952(fp)
   2a1f8:	1004c03a 	cmpne	r2,r2,zero
   2a1fc:	10803fcc 	andi	r2,r2,255
   2a200:	10000d26 	beq	r2,zero,2a238 <secp256k1_scalar_reduce_512+0x2ae0>
   2a204:	d0a01617 	ldw	r2,-32680(gp)
   2a208:	10c00317 	ldw	r3,12(r2)
   2a20c:	00800174 	movhi	r2,5
   2a210:	1096c104 	addi	r2,r2,23300
   2a214:	d8800015 	stw	r2,0(sp)
   2a218:	01c06884 	movi	r7,418
   2a21c:	01800174 	movhi	r6,5
   2a220:	31964204 	addi	r6,r6,22792
   2a224:	01400174 	movhi	r5,5
   2a228:	2951e804 	addi	r5,r5,18336
   2a22c:	1809883a 	mov	r4,r3
   2a230:	00461000 	call	46100 <fprintf>
   2a234:	0045fd40 	call	45fd4 <abort>
    extract_fast(m11);
   2a238:	e0be1617 	ldw	r2,-1960(fp)
   2a23c:	e0beb115 	stw	r2,-1340(fp)
   2a240:	e0be1717 	ldw	r2,-1956(fp)
   2a244:	e0be1615 	stw	r2,-1960(fp)
   2a248:	e03e1715 	stw	zero,-1956(fp)
   2a24c:	e0be1817 	ldw	r2,-1952(fp)
   2a250:	1004c03a 	cmpne	r2,r2,zero
   2a254:	10803fcc 	andi	r2,r2,255
   2a258:	10000d26 	beq	r2,zero,2a290 <secp256k1_scalar_reduce_512+0x2b38>
   2a25c:	d0a01617 	ldw	r2,-32680(gp)
   2a260:	10c00317 	ldw	r3,12(r2)
   2a264:	00800174 	movhi	r2,5
   2a268:	1096c104 	addi	r2,r2,23300
   2a26c:	d8800015 	stw	r2,0(sp)
   2a270:	01c068c4 	movi	r7,419
   2a274:	01800174 	movhi	r6,5
   2a278:	31964204 	addi	r6,r6,22792
   2a27c:	01400174 	movhi	r5,5
   2a280:	2951e804 	addi	r5,r5,18336
   2a284:	1809883a 	mov	r4,r3
   2a288:	00461000 	call	46100 <fprintf>
   2a28c:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(c0 <= 1);
   2a290:	e0be1617 	ldw	r2,-1960(fp)
   2a294:	108000a8 	cmpgeui	r2,r2,2
   2a298:	10803fcc 	andi	r2,r2,255
   2a29c:	10000d26 	beq	r2,zero,2a2d4 <secp256k1_scalar_reduce_512+0x2b7c>
   2a2a0:	d0a01617 	ldw	r2,-32680(gp)
   2a2a4:	10c00317 	ldw	r3,12(r2)
   2a2a8:	00800174 	movhi	r2,5
   2a2ac:	1096ee04 	addi	r2,r2,23480
   2a2b0:	d8800015 	stw	r2,0(sp)
   2a2b4:	01c06904 	movi	r7,420
   2a2b8:	01800174 	movhi	r6,5
   2a2bc:	31964204 	addi	r6,r6,22792
   2a2c0:	01400174 	movhi	r5,5
   2a2c4:	2951e804 	addi	r5,r5,18336
   2a2c8:	1809883a 	mov	r4,r3
   2a2cc:	00461000 	call	46100 <fprintf>
   2a2d0:	0045fd40 	call	45fd4 <abort>
    m12 = c0;
   2a2d4:	e0be1617 	ldw	r2,-1960(fp)
   2a2d8:	e0beb215 	stw	r2,-1336(fp)

    /* Reduce 385 bits into 258. */
    /* p[0..8] = m[0..7] + m[8..12] * SECP256K1_N_C. */
    c0 = m0; c1 = 0; c2 = 0;
   2a2dc:	e0be1d17 	ldw	r2,-1932(fp)
   2a2e0:	e0be1615 	stw	r2,-1960(fp)
   2a2e4:	e03e1715 	stw	zero,-1956(fp)
   2a2e8:	e03e1815 	stw	zero,-1952(fp)
    muladd_fast(m8, SECP256K1_N_C_0);
   2a2ec:	e0bea017 	ldw	r2,-1408(fp)
   2a2f0:	e0bf8e15 	stw	r2,-456(fp)
   2a2f4:	e03f8f15 	stw	zero,-452(fp)
   2a2f8:	018bf2b4 	movhi	r6,12234
   2a2fc:	31afafc4 	addi	r6,r6,-16705
   2a300:	000f883a 	mov	r7,zero
   2a304:	e13f8e17 	ldw	r4,-456(fp)
   2a308:	e17f8f17 	ldw	r5,-452(fp)
   2a30c:	00438e00 	call	438e0 <__muldi3>
   2a310:	1009883a 	mov	r4,r2
   2a314:	180b883a 	mov	r5,r3
   2a318:	e13eb315 	stw	r4,-1332(fp)
   2a31c:	e17eb415 	stw	r5,-1328(fp)
   2a320:	e0beb417 	ldw	r2,-1328(fp)
   2a324:	1004d83a 	srl	r2,r2,zero
   2a328:	e0bf9015 	stw	r2,-448(fp)
   2a32c:	e03f9115 	stw	zero,-444(fp)
   2a330:	e1ff9017 	ldw	r7,-448(fp)
   2a334:	e1feb515 	stw	r7,-1324(fp)
   2a338:	e0beb317 	ldw	r2,-1332(fp)
   2a33c:	e0beb615 	stw	r2,-1320(fp)
   2a340:	e0fe1617 	ldw	r3,-1960(fp)
   2a344:	e0beb617 	ldw	r2,-1320(fp)
   2a348:	1885883a 	add	r2,r3,r2
   2a34c:	e0be1615 	stw	r2,-1960(fp)
   2a350:	e0fe1617 	ldw	r3,-1960(fp)
   2a354:	e0beb617 	ldw	r2,-1320(fp)
   2a358:	1880022e 	bgeu	r3,r2,2a364 <secp256k1_scalar_reduce_512+0x2c0c>
   2a35c:	00c00044 	movi	r3,1
   2a360:	00000106 	br	2a368 <secp256k1_scalar_reduce_512+0x2c10>
   2a364:	0007883a 	mov	r3,zero
   2a368:	e0beb517 	ldw	r2,-1324(fp)
   2a36c:	10c5883a 	add	r2,r2,r3
   2a370:	e0beb515 	stw	r2,-1324(fp)
   2a374:	e0fe1717 	ldw	r3,-1956(fp)
   2a378:	e0beb517 	ldw	r2,-1324(fp)
   2a37c:	1885883a 	add	r2,r3,r2
   2a380:	e0be1715 	stw	r2,-1956(fp)
   2a384:	e0fe1717 	ldw	r3,-1956(fp)
   2a388:	e0beb517 	ldw	r2,-1324(fp)
   2a38c:	1885803a 	cmpltu	r2,r3,r2
   2a390:	10803fcc 	andi	r2,r2,255
   2a394:	10000d26 	beq	r2,zero,2a3cc <secp256k1_scalar_reduce_512+0x2c74>
   2a398:	d0a01617 	ldw	r2,-32680(gp)
   2a39c:	10c00317 	ldw	r3,12(r2)
   2a3a0:	00800174 	movhi	r2,5
   2a3a4:	1096b904 	addi	r2,r2,23268
   2a3a8:	d8800015 	stw	r2,0(sp)
   2a3ac:	01c06a84 	movi	r7,426
   2a3b0:	01800174 	movhi	r6,5
   2a3b4:	31964204 	addi	r6,r6,22792
   2a3b8:	01400174 	movhi	r5,5
   2a3bc:	2951e804 	addi	r5,r5,18336
   2a3c0:	1809883a 	mov	r4,r3
   2a3c4:	00461000 	call	46100 <fprintf>
   2a3c8:	0045fd40 	call	45fd4 <abort>
    extract_fast(p0);
   2a3cc:	e0be1617 	ldw	r2,-1960(fp)
   2a3d0:	e0beb715 	stw	r2,-1316(fp)
   2a3d4:	e0be1717 	ldw	r2,-1956(fp)
   2a3d8:	e0be1615 	stw	r2,-1960(fp)
   2a3dc:	e03e1715 	stw	zero,-1956(fp)
   2a3e0:	e0be1817 	ldw	r2,-1952(fp)
   2a3e4:	1004c03a 	cmpne	r2,r2,zero
   2a3e8:	10803fcc 	andi	r2,r2,255
   2a3ec:	10000d26 	beq	r2,zero,2a424 <secp256k1_scalar_reduce_512+0x2ccc>
   2a3f0:	d0a01617 	ldw	r2,-32680(gp)
   2a3f4:	10c00317 	ldw	r3,12(r2)
   2a3f8:	00800174 	movhi	r2,5
   2a3fc:	1096c104 	addi	r2,r2,23300
   2a400:	d8800015 	stw	r2,0(sp)
   2a404:	01c06ac4 	movi	r7,427
   2a408:	01800174 	movhi	r6,5
   2a40c:	31964204 	addi	r6,r6,22792
   2a410:	01400174 	movhi	r5,5
   2a414:	2951e804 	addi	r5,r5,18336
   2a418:	1809883a 	mov	r4,r3
   2a41c:	00461000 	call	46100 <fprintf>
   2a420:	0045fd40 	call	45fd4 <abort>
    sumadd_fast(m1);
   2a424:	e0fe1617 	ldw	r3,-1960(fp)
   2a428:	e0be2617 	ldw	r2,-1896(fp)
   2a42c:	1885883a 	add	r2,r3,r2
   2a430:	e0be1615 	stw	r2,-1960(fp)
   2a434:	e0fe1617 	ldw	r3,-1960(fp)
   2a438:	e0be2617 	ldw	r2,-1896(fp)
   2a43c:	1880022e 	bgeu	r3,r2,2a448 <secp256k1_scalar_reduce_512+0x2cf0>
   2a440:	00c00044 	movi	r3,1
   2a444:	00000106 	br	2a44c <secp256k1_scalar_reduce_512+0x2cf4>
   2a448:	0007883a 	mov	r3,zero
   2a44c:	e0be1717 	ldw	r2,-1956(fp)
   2a450:	10c5883a 	add	r2,r2,r3
   2a454:	e0be1715 	stw	r2,-1956(fp)
   2a458:	e0be1717 	ldw	r2,-1956(fp)
   2a45c:	1005003a 	cmpeq	r2,r2,zero
   2a460:	1009883a 	mov	r4,r2
   2a464:	e0fe1617 	ldw	r3,-1960(fp)
   2a468:	e0be2617 	ldw	r2,-1896(fp)
   2a46c:	1885803a 	cmpltu	r2,r3,r2
   2a470:	2084703a 	and	r2,r4,r2
   2a474:	10803fcc 	andi	r2,r2,255
   2a478:	10000d26 	beq	r2,zero,2a4b0 <secp256k1_scalar_reduce_512+0x2d58>
   2a47c:	d0a01617 	ldw	r2,-32680(gp)
   2a480:	10c00317 	ldw	r3,12(r2)
   2a484:	00800174 	movhi	r2,5
   2a488:	1096f604 	addi	r2,r2,23512
   2a48c:	d8800015 	stw	r2,0(sp)
   2a490:	01c06b04 	movi	r7,428
   2a494:	01800174 	movhi	r6,5
   2a498:	31964204 	addi	r6,r6,22792
   2a49c:	01400174 	movhi	r5,5
   2a4a0:	2951e804 	addi	r5,r5,18336
   2a4a4:	1809883a 	mov	r4,r3
   2a4a8:	00461000 	call	46100 <fprintf>
   2a4ac:	0045fd40 	call	45fd4 <abort>
   2a4b0:	e0be1817 	ldw	r2,-1952(fp)
   2a4b4:	1004c03a 	cmpne	r2,r2,zero
   2a4b8:	10803fcc 	andi	r2,r2,255
   2a4bc:	10000d26 	beq	r2,zero,2a4f4 <secp256k1_scalar_reduce_512+0x2d9c>
   2a4c0:	d0a01617 	ldw	r2,-32680(gp)
   2a4c4:	10c00317 	ldw	r3,12(r2)
   2a4c8:	00800174 	movhi	r2,5
   2a4cc:	1096c104 	addi	r2,r2,23300
   2a4d0:	d8800015 	stw	r2,0(sp)
   2a4d4:	01c06b04 	movi	r7,428
   2a4d8:	01800174 	movhi	r6,5
   2a4dc:	31964204 	addi	r6,r6,22792
   2a4e0:	01400174 	movhi	r5,5
   2a4e4:	2951e804 	addi	r5,r5,18336
   2a4e8:	1809883a 	mov	r4,r3
   2a4ec:	00461000 	call	46100 <fprintf>
   2a4f0:	0045fd40 	call	45fd4 <abort>
    muladd(m9, SECP256K1_N_C_0);
   2a4f4:	e0beaa17 	ldw	r2,-1368(fp)
   2a4f8:	e0bf9215 	stw	r2,-440(fp)
   2a4fc:	e03f9315 	stw	zero,-436(fp)
   2a500:	018bf2b4 	movhi	r6,12234
   2a504:	31afafc4 	addi	r6,r6,-16705
   2a508:	000f883a 	mov	r7,zero
   2a50c:	e13f9217 	ldw	r4,-440(fp)
   2a510:	e17f9317 	ldw	r5,-436(fp)
   2a514:	00438e00 	call	438e0 <__muldi3>
   2a518:	1009883a 	mov	r4,r2
   2a51c:	180b883a 	mov	r5,r3
   2a520:	e13eb815 	stw	r4,-1312(fp)
   2a524:	e17eb915 	stw	r5,-1308(fp)
   2a528:	e0beb917 	ldw	r2,-1308(fp)
   2a52c:	1004d83a 	srl	r2,r2,zero
   2a530:	e0bf9415 	stw	r2,-432(fp)
   2a534:	e03f9515 	stw	zero,-428(fp)
   2a538:	e0bf9417 	ldw	r2,-432(fp)
   2a53c:	e0beba15 	stw	r2,-1304(fp)
   2a540:	e0beb817 	ldw	r2,-1312(fp)
   2a544:	e0bebb15 	stw	r2,-1300(fp)
   2a548:	e0fe1617 	ldw	r3,-1960(fp)
   2a54c:	e0bebb17 	ldw	r2,-1300(fp)
   2a550:	1885883a 	add	r2,r3,r2
   2a554:	e0be1615 	stw	r2,-1960(fp)
   2a558:	e0fe1617 	ldw	r3,-1960(fp)
   2a55c:	e0bebb17 	ldw	r2,-1300(fp)
   2a560:	1880022e 	bgeu	r3,r2,2a56c <secp256k1_scalar_reduce_512+0x2e14>
   2a564:	00c00044 	movi	r3,1
   2a568:	00000106 	br	2a570 <secp256k1_scalar_reduce_512+0x2e18>
   2a56c:	0007883a 	mov	r3,zero
   2a570:	e0beba17 	ldw	r2,-1304(fp)
   2a574:	10c5883a 	add	r2,r2,r3
   2a578:	e0beba15 	stw	r2,-1304(fp)
   2a57c:	e0fe1717 	ldw	r3,-1956(fp)
   2a580:	e0beba17 	ldw	r2,-1304(fp)
   2a584:	1885883a 	add	r2,r3,r2
   2a588:	e0be1715 	stw	r2,-1956(fp)
   2a58c:	e0fe1717 	ldw	r3,-1956(fp)
   2a590:	e0beba17 	ldw	r2,-1304(fp)
   2a594:	1880022e 	bgeu	r3,r2,2a5a0 <secp256k1_scalar_reduce_512+0x2e48>
   2a598:	00c00044 	movi	r3,1
   2a59c:	00000106 	br	2a5a4 <secp256k1_scalar_reduce_512+0x2e4c>
   2a5a0:	0007883a 	mov	r3,zero
   2a5a4:	e0be1817 	ldw	r2,-1952(fp)
   2a5a8:	10c5883a 	add	r2,r2,r3
   2a5ac:	e0be1815 	stw	r2,-1952(fp)
   2a5b0:	e0fe1717 	ldw	r3,-1956(fp)
   2a5b4:	e0beba17 	ldw	r2,-1304(fp)
   2a5b8:	1885803a 	cmpltu	r2,r3,r2
   2a5bc:	10803fcc 	andi	r2,r2,255
   2a5c0:	10001126 	beq	r2,zero,2a608 <secp256k1_scalar_reduce_512+0x2eb0>
   2a5c4:	e0be1817 	ldw	r2,-1952(fp)
   2a5c8:	1005003a 	cmpeq	r2,r2,zero
   2a5cc:	10803fcc 	andi	r2,r2,255
   2a5d0:	10000d26 	beq	r2,zero,2a608 <secp256k1_scalar_reduce_512+0x2eb0>
   2a5d4:	d0a01617 	ldw	r2,-32680(gp)
   2a5d8:	10c00317 	ldw	r3,12(r2)
   2a5dc:	00800174 	movhi	r2,5
   2a5e0:	1096d604 	addi	r2,r2,23384
   2a5e4:	d8800015 	stw	r2,0(sp)
   2a5e8:	01c06b44 	movi	r7,429
   2a5ec:	01800174 	movhi	r6,5
   2a5f0:	31964204 	addi	r6,r6,22792
   2a5f4:	01400174 	movhi	r5,5
   2a5f8:	2951e804 	addi	r5,r5,18336
   2a5fc:	1809883a 	mov	r4,r3
   2a600:	00461000 	call	46100 <fprintf>
   2a604:	0045fd40 	call	45fd4 <abort>
    muladd(m8, SECP256K1_N_C_1);
   2a608:	e0bea017 	ldw	r2,-1408(fp)
   2a60c:	e0bf9615 	stw	r2,-424(fp)
   2a610:	e03f9715 	stw	zero,-420(fp)
   2a614:	01900bb4 	movhi	r6,16430
   2a618:	31a85cc4 	addi	r6,r6,-24205
   2a61c:	000f883a 	mov	r7,zero
   2a620:	e13f9617 	ldw	r4,-424(fp)
   2a624:	e17f9717 	ldw	r5,-420(fp)
   2a628:	00438e00 	call	438e0 <__muldi3>
   2a62c:	1009883a 	mov	r4,r2
   2a630:	180b883a 	mov	r5,r3
   2a634:	e13ebc15 	stw	r4,-1296(fp)
   2a638:	e17ebd15 	stw	r5,-1292(fp)
   2a63c:	e0bebd17 	ldw	r2,-1292(fp)
   2a640:	1004d83a 	srl	r2,r2,zero
   2a644:	e0bf9815 	stw	r2,-416(fp)
   2a648:	e03f9915 	stw	zero,-412(fp)
   2a64c:	e13f9817 	ldw	r4,-416(fp)
   2a650:	e13ebe15 	stw	r4,-1288(fp)
   2a654:	e0bebc17 	ldw	r2,-1296(fp)
   2a658:	e0bebf15 	stw	r2,-1284(fp)
   2a65c:	e0fe1617 	ldw	r3,-1960(fp)
   2a660:	e0bebf17 	ldw	r2,-1284(fp)
   2a664:	1885883a 	add	r2,r3,r2
   2a668:	e0be1615 	stw	r2,-1960(fp)
   2a66c:	e0fe1617 	ldw	r3,-1960(fp)
   2a670:	e0bebf17 	ldw	r2,-1284(fp)
   2a674:	1880022e 	bgeu	r3,r2,2a680 <secp256k1_scalar_reduce_512+0x2f28>
   2a678:	00c00044 	movi	r3,1
   2a67c:	00000106 	br	2a684 <secp256k1_scalar_reduce_512+0x2f2c>
   2a680:	0007883a 	mov	r3,zero
   2a684:	e0bebe17 	ldw	r2,-1288(fp)
   2a688:	10c5883a 	add	r2,r2,r3
   2a68c:	e0bebe15 	stw	r2,-1288(fp)
   2a690:	e0fe1717 	ldw	r3,-1956(fp)
   2a694:	e0bebe17 	ldw	r2,-1288(fp)
   2a698:	1885883a 	add	r2,r3,r2
   2a69c:	e0be1715 	stw	r2,-1956(fp)
   2a6a0:	e0fe1717 	ldw	r3,-1956(fp)
   2a6a4:	e0bebe17 	ldw	r2,-1288(fp)
   2a6a8:	1880022e 	bgeu	r3,r2,2a6b4 <secp256k1_scalar_reduce_512+0x2f5c>
   2a6ac:	00c00044 	movi	r3,1
   2a6b0:	00000106 	br	2a6b8 <secp256k1_scalar_reduce_512+0x2f60>
   2a6b4:	0007883a 	mov	r3,zero
   2a6b8:	e0be1817 	ldw	r2,-1952(fp)
   2a6bc:	10c5883a 	add	r2,r2,r3
   2a6c0:	e0be1815 	stw	r2,-1952(fp)
   2a6c4:	e0fe1717 	ldw	r3,-1956(fp)
   2a6c8:	e0bebe17 	ldw	r2,-1288(fp)
   2a6cc:	1885803a 	cmpltu	r2,r3,r2
   2a6d0:	10803fcc 	andi	r2,r2,255
   2a6d4:	10001126 	beq	r2,zero,2a71c <secp256k1_scalar_reduce_512+0x2fc4>
   2a6d8:	e0be1817 	ldw	r2,-1952(fp)
   2a6dc:	1005003a 	cmpeq	r2,r2,zero
   2a6e0:	10803fcc 	andi	r2,r2,255
   2a6e4:	10000d26 	beq	r2,zero,2a71c <secp256k1_scalar_reduce_512+0x2fc4>
   2a6e8:	d0a01617 	ldw	r2,-32680(gp)
   2a6ec:	10c00317 	ldw	r3,12(r2)
   2a6f0:	00800174 	movhi	r2,5
   2a6f4:	1096d604 	addi	r2,r2,23384
   2a6f8:	d8800015 	stw	r2,0(sp)
   2a6fc:	01c06b84 	movi	r7,430
   2a700:	01800174 	movhi	r6,5
   2a704:	31964204 	addi	r6,r6,22792
   2a708:	01400174 	movhi	r5,5
   2a70c:	2951e804 	addi	r5,r5,18336
   2a710:	1809883a 	mov	r4,r3
   2a714:	00461000 	call	46100 <fprintf>
   2a718:	0045fd40 	call	45fd4 <abort>
    extract(p1);
   2a71c:	e0be1617 	ldw	r2,-1960(fp)
   2a720:	e0bec015 	stw	r2,-1280(fp)
   2a724:	e0be1717 	ldw	r2,-1956(fp)
   2a728:	e0be1615 	stw	r2,-1960(fp)
   2a72c:	e0be1817 	ldw	r2,-1952(fp)
   2a730:	e0be1715 	stw	r2,-1956(fp)
   2a734:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m2);
   2a738:	e0fe1617 	ldw	r3,-1960(fp)
   2a73c:	e0be3417 	ldw	r2,-1840(fp)
   2a740:	1885883a 	add	r2,r3,r2
   2a744:	e0be1615 	stw	r2,-1960(fp)
   2a748:	e0fe1617 	ldw	r3,-1960(fp)
   2a74c:	e0be3417 	ldw	r2,-1840(fp)
   2a750:	1885803a 	cmpltu	r2,r3,r2
   2a754:	10803fcc 	andi	r2,r2,255
   2a758:	e0bec115 	stw	r2,-1276(fp)
   2a75c:	e0fe1717 	ldw	r3,-1956(fp)
   2a760:	e0bec117 	ldw	r2,-1276(fp)
   2a764:	1885883a 	add	r2,r3,r2
   2a768:	e0be1715 	stw	r2,-1956(fp)
   2a76c:	e0fe1717 	ldw	r3,-1956(fp)
   2a770:	e0bec117 	ldw	r2,-1276(fp)
   2a774:	1880022e 	bgeu	r3,r2,2a780 <secp256k1_scalar_reduce_512+0x3028>
   2a778:	00c00044 	movi	r3,1
   2a77c:	00000106 	br	2a784 <secp256k1_scalar_reduce_512+0x302c>
   2a780:	0007883a 	mov	r3,zero
   2a784:	e0be1817 	ldw	r2,-1952(fp)
   2a788:	10c5883a 	add	r2,r2,r3
   2a78c:	e0be1815 	stw	r2,-1952(fp)
    muladd(m10, SECP256K1_N_C_0);
   2a790:	e0beb017 	ldw	r2,-1344(fp)
   2a794:	e0bf9a15 	stw	r2,-408(fp)
   2a798:	e03f9b15 	stw	zero,-404(fp)
   2a79c:	018bf2b4 	movhi	r6,12234
   2a7a0:	31afafc4 	addi	r6,r6,-16705
   2a7a4:	000f883a 	mov	r7,zero
   2a7a8:	e13f9a17 	ldw	r4,-408(fp)
   2a7ac:	e17f9b17 	ldw	r5,-404(fp)
   2a7b0:	00438e00 	call	438e0 <__muldi3>
   2a7b4:	1009883a 	mov	r4,r2
   2a7b8:	180b883a 	mov	r5,r3
   2a7bc:	e13ec215 	stw	r4,-1272(fp)
   2a7c0:	e17ec315 	stw	r5,-1268(fp)
   2a7c4:	e0bec317 	ldw	r2,-1268(fp)
   2a7c8:	1004d83a 	srl	r2,r2,zero
   2a7cc:	e0bf9c15 	stw	r2,-400(fp)
   2a7d0:	e03f9d15 	stw	zero,-396(fp)
   2a7d4:	e17f9c17 	ldw	r5,-400(fp)
   2a7d8:	e17ec415 	stw	r5,-1264(fp)
   2a7dc:	e0bec217 	ldw	r2,-1272(fp)
   2a7e0:	e0bec515 	stw	r2,-1260(fp)
   2a7e4:	e0fe1617 	ldw	r3,-1960(fp)
   2a7e8:	e0bec517 	ldw	r2,-1260(fp)
   2a7ec:	1885883a 	add	r2,r3,r2
   2a7f0:	e0be1615 	stw	r2,-1960(fp)
   2a7f4:	e0fe1617 	ldw	r3,-1960(fp)
   2a7f8:	e0bec517 	ldw	r2,-1260(fp)
   2a7fc:	1880022e 	bgeu	r3,r2,2a808 <secp256k1_scalar_reduce_512+0x30b0>
   2a800:	00c00044 	movi	r3,1
   2a804:	00000106 	br	2a80c <secp256k1_scalar_reduce_512+0x30b4>
   2a808:	0007883a 	mov	r3,zero
   2a80c:	e0bec417 	ldw	r2,-1264(fp)
   2a810:	10c5883a 	add	r2,r2,r3
   2a814:	e0bec415 	stw	r2,-1264(fp)
   2a818:	e0fe1717 	ldw	r3,-1956(fp)
   2a81c:	e0bec417 	ldw	r2,-1264(fp)
   2a820:	1885883a 	add	r2,r3,r2
   2a824:	e0be1715 	stw	r2,-1956(fp)
   2a828:	e0fe1717 	ldw	r3,-1956(fp)
   2a82c:	e0bec417 	ldw	r2,-1264(fp)
   2a830:	1880022e 	bgeu	r3,r2,2a83c <secp256k1_scalar_reduce_512+0x30e4>
   2a834:	00c00044 	movi	r3,1
   2a838:	00000106 	br	2a840 <secp256k1_scalar_reduce_512+0x30e8>
   2a83c:	0007883a 	mov	r3,zero
   2a840:	e0be1817 	ldw	r2,-1952(fp)
   2a844:	10c5883a 	add	r2,r2,r3
   2a848:	e0be1815 	stw	r2,-1952(fp)
   2a84c:	e0fe1717 	ldw	r3,-1956(fp)
   2a850:	e0bec417 	ldw	r2,-1264(fp)
   2a854:	1885803a 	cmpltu	r2,r3,r2
   2a858:	10803fcc 	andi	r2,r2,255
   2a85c:	10001126 	beq	r2,zero,2a8a4 <secp256k1_scalar_reduce_512+0x314c>
   2a860:	e0be1817 	ldw	r2,-1952(fp)
   2a864:	1005003a 	cmpeq	r2,r2,zero
   2a868:	10803fcc 	andi	r2,r2,255
   2a86c:	10000d26 	beq	r2,zero,2a8a4 <secp256k1_scalar_reduce_512+0x314c>
   2a870:	d0a01617 	ldw	r2,-32680(gp)
   2a874:	10c00317 	ldw	r3,12(r2)
   2a878:	00800174 	movhi	r2,5
   2a87c:	1096d604 	addi	r2,r2,23384
   2a880:	d8800015 	stw	r2,0(sp)
   2a884:	01c06c44 	movi	r7,433
   2a888:	01800174 	movhi	r6,5
   2a88c:	31964204 	addi	r6,r6,22792
   2a890:	01400174 	movhi	r5,5
   2a894:	2951e804 	addi	r5,r5,18336
   2a898:	1809883a 	mov	r4,r3
   2a89c:	00461000 	call	46100 <fprintf>
   2a8a0:	0045fd40 	call	45fd4 <abort>
    muladd(m9, SECP256K1_N_C_1);
   2a8a4:	e0beaa17 	ldw	r2,-1368(fp)
   2a8a8:	e0bf9e15 	stw	r2,-392(fp)
   2a8ac:	e03f9f15 	stw	zero,-388(fp)
   2a8b0:	01900bb4 	movhi	r6,16430
   2a8b4:	31a85cc4 	addi	r6,r6,-24205
   2a8b8:	000f883a 	mov	r7,zero
   2a8bc:	e13f9e17 	ldw	r4,-392(fp)
   2a8c0:	e17f9f17 	ldw	r5,-388(fp)
   2a8c4:	00438e00 	call	438e0 <__muldi3>
   2a8c8:	1009883a 	mov	r4,r2
   2a8cc:	180b883a 	mov	r5,r3
   2a8d0:	e13ec615 	stw	r4,-1256(fp)
   2a8d4:	e17ec715 	stw	r5,-1252(fp)
   2a8d8:	e0bec717 	ldw	r2,-1252(fp)
   2a8dc:	1004d83a 	srl	r2,r2,zero
   2a8e0:	e0bfa015 	stw	r2,-384(fp)
   2a8e4:	e03fa115 	stw	zero,-380(fp)
   2a8e8:	e1bfa017 	ldw	r6,-384(fp)
   2a8ec:	e1bec815 	stw	r6,-1248(fp)
   2a8f0:	e0bec617 	ldw	r2,-1256(fp)
   2a8f4:	e0bec915 	stw	r2,-1244(fp)
   2a8f8:	e0fe1617 	ldw	r3,-1960(fp)
   2a8fc:	e0bec917 	ldw	r2,-1244(fp)
   2a900:	1885883a 	add	r2,r3,r2
   2a904:	e0be1615 	stw	r2,-1960(fp)
   2a908:	e0fe1617 	ldw	r3,-1960(fp)
   2a90c:	e0bec917 	ldw	r2,-1244(fp)
   2a910:	1880022e 	bgeu	r3,r2,2a91c <secp256k1_scalar_reduce_512+0x31c4>
   2a914:	00c00044 	movi	r3,1
   2a918:	00000106 	br	2a920 <secp256k1_scalar_reduce_512+0x31c8>
   2a91c:	0007883a 	mov	r3,zero
   2a920:	e0bec817 	ldw	r2,-1248(fp)
   2a924:	10c5883a 	add	r2,r2,r3
   2a928:	e0bec815 	stw	r2,-1248(fp)
   2a92c:	e0fe1717 	ldw	r3,-1956(fp)
   2a930:	e0bec817 	ldw	r2,-1248(fp)
   2a934:	1885883a 	add	r2,r3,r2
   2a938:	e0be1715 	stw	r2,-1956(fp)
   2a93c:	e0fe1717 	ldw	r3,-1956(fp)
   2a940:	e0bec817 	ldw	r2,-1248(fp)
   2a944:	1880022e 	bgeu	r3,r2,2a950 <secp256k1_scalar_reduce_512+0x31f8>
   2a948:	00c00044 	movi	r3,1
   2a94c:	00000106 	br	2a954 <secp256k1_scalar_reduce_512+0x31fc>
   2a950:	0007883a 	mov	r3,zero
   2a954:	e0be1817 	ldw	r2,-1952(fp)
   2a958:	10c5883a 	add	r2,r2,r3
   2a95c:	e0be1815 	stw	r2,-1952(fp)
   2a960:	e0fe1717 	ldw	r3,-1956(fp)
   2a964:	e0bec817 	ldw	r2,-1248(fp)
   2a968:	1885803a 	cmpltu	r2,r3,r2
   2a96c:	10803fcc 	andi	r2,r2,255
   2a970:	10001126 	beq	r2,zero,2a9b8 <secp256k1_scalar_reduce_512+0x3260>
   2a974:	e0be1817 	ldw	r2,-1952(fp)
   2a978:	1005003a 	cmpeq	r2,r2,zero
   2a97c:	10803fcc 	andi	r2,r2,255
   2a980:	10000d26 	beq	r2,zero,2a9b8 <secp256k1_scalar_reduce_512+0x3260>
   2a984:	d0a01617 	ldw	r2,-32680(gp)
   2a988:	10c00317 	ldw	r3,12(r2)
   2a98c:	00800174 	movhi	r2,5
   2a990:	1096d604 	addi	r2,r2,23384
   2a994:	d8800015 	stw	r2,0(sp)
   2a998:	01c06c84 	movi	r7,434
   2a99c:	01800174 	movhi	r6,5
   2a9a0:	31964204 	addi	r6,r6,22792
   2a9a4:	01400174 	movhi	r5,5
   2a9a8:	2951e804 	addi	r5,r5,18336
   2a9ac:	1809883a 	mov	r4,r3
   2a9b0:	00461000 	call	46100 <fprintf>
   2a9b4:	0045fd40 	call	45fd4 <abort>
    muladd(m8, SECP256K1_N_C_2);
   2a9b8:	e0bea017 	ldw	r2,-1408(fp)
   2a9bc:	e0bfa215 	stw	r2,-376(fp)
   2a9c0:	e03fa315 	stw	zero,-372(fp)
   2a9c4:	01942df4 	movhi	r6,20663
   2a9c8:	3197f104 	addi	r6,r6,24516
   2a9cc:	000f883a 	mov	r7,zero
   2a9d0:	e13fa217 	ldw	r4,-376(fp)
   2a9d4:	e17fa317 	ldw	r5,-372(fp)
   2a9d8:	00438e00 	call	438e0 <__muldi3>
   2a9dc:	1009883a 	mov	r4,r2
   2a9e0:	180b883a 	mov	r5,r3
   2a9e4:	e13eca15 	stw	r4,-1240(fp)
   2a9e8:	e17ecb15 	stw	r5,-1236(fp)
   2a9ec:	e0becb17 	ldw	r2,-1236(fp)
   2a9f0:	1004d83a 	srl	r2,r2,zero
   2a9f4:	e0bfa415 	stw	r2,-368(fp)
   2a9f8:	e03fa515 	stw	zero,-364(fp)
   2a9fc:	e1ffa417 	ldw	r7,-368(fp)
   2aa00:	e1fecc15 	stw	r7,-1232(fp)
   2aa04:	e0beca17 	ldw	r2,-1240(fp)
   2aa08:	e0becd15 	stw	r2,-1228(fp)
   2aa0c:	e0fe1617 	ldw	r3,-1960(fp)
   2aa10:	e0becd17 	ldw	r2,-1228(fp)
   2aa14:	1885883a 	add	r2,r3,r2
   2aa18:	e0be1615 	stw	r2,-1960(fp)
   2aa1c:	e0fe1617 	ldw	r3,-1960(fp)
   2aa20:	e0becd17 	ldw	r2,-1228(fp)
   2aa24:	1880022e 	bgeu	r3,r2,2aa30 <secp256k1_scalar_reduce_512+0x32d8>
   2aa28:	00c00044 	movi	r3,1
   2aa2c:	00000106 	br	2aa34 <secp256k1_scalar_reduce_512+0x32dc>
   2aa30:	0007883a 	mov	r3,zero
   2aa34:	e0becc17 	ldw	r2,-1232(fp)
   2aa38:	10c5883a 	add	r2,r2,r3
   2aa3c:	e0becc15 	stw	r2,-1232(fp)
   2aa40:	e0fe1717 	ldw	r3,-1956(fp)
   2aa44:	e0becc17 	ldw	r2,-1232(fp)
   2aa48:	1885883a 	add	r2,r3,r2
   2aa4c:	e0be1715 	stw	r2,-1956(fp)
   2aa50:	e0fe1717 	ldw	r3,-1956(fp)
   2aa54:	e0becc17 	ldw	r2,-1232(fp)
   2aa58:	1880022e 	bgeu	r3,r2,2aa64 <secp256k1_scalar_reduce_512+0x330c>
   2aa5c:	00c00044 	movi	r3,1
   2aa60:	00000106 	br	2aa68 <secp256k1_scalar_reduce_512+0x3310>
   2aa64:	0007883a 	mov	r3,zero
   2aa68:	e0be1817 	ldw	r2,-1952(fp)
   2aa6c:	10c5883a 	add	r2,r2,r3
   2aa70:	e0be1815 	stw	r2,-1952(fp)
   2aa74:	e0fe1717 	ldw	r3,-1956(fp)
   2aa78:	e0becc17 	ldw	r2,-1232(fp)
   2aa7c:	1885803a 	cmpltu	r2,r3,r2
   2aa80:	10803fcc 	andi	r2,r2,255
   2aa84:	10001126 	beq	r2,zero,2aacc <secp256k1_scalar_reduce_512+0x3374>
   2aa88:	e0be1817 	ldw	r2,-1952(fp)
   2aa8c:	1005003a 	cmpeq	r2,r2,zero
   2aa90:	10803fcc 	andi	r2,r2,255
   2aa94:	10000d26 	beq	r2,zero,2aacc <secp256k1_scalar_reduce_512+0x3374>
   2aa98:	d0a01617 	ldw	r2,-32680(gp)
   2aa9c:	10c00317 	ldw	r3,12(r2)
   2aaa0:	00800174 	movhi	r2,5
   2aaa4:	1096d604 	addi	r2,r2,23384
   2aaa8:	d8800015 	stw	r2,0(sp)
   2aaac:	01c06cc4 	movi	r7,435
   2aab0:	01800174 	movhi	r6,5
   2aab4:	31964204 	addi	r6,r6,22792
   2aab8:	01400174 	movhi	r5,5
   2aabc:	2951e804 	addi	r5,r5,18336
   2aac0:	1809883a 	mov	r4,r3
   2aac4:	00461000 	call	46100 <fprintf>
   2aac8:	0045fd40 	call	45fd4 <abort>
    extract(p2);
   2aacc:	e0be1617 	ldw	r2,-1960(fp)
   2aad0:	e0bece15 	stw	r2,-1224(fp)
   2aad4:	e0be1717 	ldw	r2,-1956(fp)
   2aad8:	e0be1615 	stw	r2,-1960(fp)
   2aadc:	e0be1817 	ldw	r2,-1952(fp)
   2aae0:	e0be1715 	stw	r2,-1956(fp)
   2aae4:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m3);
   2aae8:	e0fe1617 	ldw	r3,-1960(fp)
   2aaec:	e0be4617 	ldw	r2,-1768(fp)
   2aaf0:	1885883a 	add	r2,r3,r2
   2aaf4:	e0be1615 	stw	r2,-1960(fp)
   2aaf8:	e0fe1617 	ldw	r3,-1960(fp)
   2aafc:	e0be4617 	ldw	r2,-1768(fp)
   2ab00:	1885803a 	cmpltu	r2,r3,r2
   2ab04:	10803fcc 	andi	r2,r2,255
   2ab08:	e0becf15 	stw	r2,-1220(fp)
   2ab0c:	e0fe1717 	ldw	r3,-1956(fp)
   2ab10:	e0becf17 	ldw	r2,-1220(fp)
   2ab14:	1885883a 	add	r2,r3,r2
   2ab18:	e0be1715 	stw	r2,-1956(fp)
   2ab1c:	e0fe1717 	ldw	r3,-1956(fp)
   2ab20:	e0becf17 	ldw	r2,-1220(fp)
   2ab24:	1880022e 	bgeu	r3,r2,2ab30 <secp256k1_scalar_reduce_512+0x33d8>
   2ab28:	00c00044 	movi	r3,1
   2ab2c:	00000106 	br	2ab34 <secp256k1_scalar_reduce_512+0x33dc>
   2ab30:	0007883a 	mov	r3,zero
   2ab34:	e0be1817 	ldw	r2,-1952(fp)
   2ab38:	10c5883a 	add	r2,r2,r3
   2ab3c:	e0be1815 	stw	r2,-1952(fp)
    muladd(m11, SECP256K1_N_C_0);
   2ab40:	e0beb117 	ldw	r2,-1340(fp)
   2ab44:	e0bfa615 	stw	r2,-360(fp)
   2ab48:	e03fa715 	stw	zero,-356(fp)
   2ab4c:	018bf2b4 	movhi	r6,12234
   2ab50:	31afafc4 	addi	r6,r6,-16705
   2ab54:	000f883a 	mov	r7,zero
   2ab58:	e13fa617 	ldw	r4,-360(fp)
   2ab5c:	e17fa717 	ldw	r5,-356(fp)
   2ab60:	00438e00 	call	438e0 <__muldi3>
   2ab64:	1009883a 	mov	r4,r2
   2ab68:	180b883a 	mov	r5,r3
   2ab6c:	e13ed015 	stw	r4,-1216(fp)
   2ab70:	e17ed115 	stw	r5,-1212(fp)
   2ab74:	e0bed117 	ldw	r2,-1212(fp)
   2ab78:	1004d83a 	srl	r2,r2,zero
   2ab7c:	e0bfa815 	stw	r2,-352(fp)
   2ab80:	e03fa915 	stw	zero,-348(fp)
   2ab84:	e0bfa817 	ldw	r2,-352(fp)
   2ab88:	e0bed215 	stw	r2,-1208(fp)
   2ab8c:	e0bed017 	ldw	r2,-1216(fp)
   2ab90:	e0bed315 	stw	r2,-1204(fp)
   2ab94:	e0fe1617 	ldw	r3,-1960(fp)
   2ab98:	e0bed317 	ldw	r2,-1204(fp)
   2ab9c:	1885883a 	add	r2,r3,r2
   2aba0:	e0be1615 	stw	r2,-1960(fp)
   2aba4:	e0fe1617 	ldw	r3,-1960(fp)
   2aba8:	e0bed317 	ldw	r2,-1204(fp)
   2abac:	1880022e 	bgeu	r3,r2,2abb8 <secp256k1_scalar_reduce_512+0x3460>
   2abb0:	00c00044 	movi	r3,1
   2abb4:	00000106 	br	2abbc <secp256k1_scalar_reduce_512+0x3464>
   2abb8:	0007883a 	mov	r3,zero
   2abbc:	e0bed217 	ldw	r2,-1208(fp)
   2abc0:	10c5883a 	add	r2,r2,r3
   2abc4:	e0bed215 	stw	r2,-1208(fp)
   2abc8:	e0fe1717 	ldw	r3,-1956(fp)
   2abcc:	e0bed217 	ldw	r2,-1208(fp)
   2abd0:	1885883a 	add	r2,r3,r2
   2abd4:	e0be1715 	stw	r2,-1956(fp)
   2abd8:	e0fe1717 	ldw	r3,-1956(fp)
   2abdc:	e0bed217 	ldw	r2,-1208(fp)
   2abe0:	1880022e 	bgeu	r3,r2,2abec <secp256k1_scalar_reduce_512+0x3494>
   2abe4:	00c00044 	movi	r3,1
   2abe8:	00000106 	br	2abf0 <secp256k1_scalar_reduce_512+0x3498>
   2abec:	0007883a 	mov	r3,zero
   2abf0:	e0be1817 	ldw	r2,-1952(fp)
   2abf4:	10c5883a 	add	r2,r2,r3
   2abf8:	e0be1815 	stw	r2,-1952(fp)
   2abfc:	e0fe1717 	ldw	r3,-1956(fp)
   2ac00:	e0bed217 	ldw	r2,-1208(fp)
   2ac04:	1885803a 	cmpltu	r2,r3,r2
   2ac08:	10803fcc 	andi	r2,r2,255
   2ac0c:	10001126 	beq	r2,zero,2ac54 <secp256k1_scalar_reduce_512+0x34fc>
   2ac10:	e0be1817 	ldw	r2,-1952(fp)
   2ac14:	1005003a 	cmpeq	r2,r2,zero
   2ac18:	10803fcc 	andi	r2,r2,255
   2ac1c:	10000d26 	beq	r2,zero,2ac54 <secp256k1_scalar_reduce_512+0x34fc>
   2ac20:	d0a01617 	ldw	r2,-32680(gp)
   2ac24:	10c00317 	ldw	r3,12(r2)
   2ac28:	00800174 	movhi	r2,5
   2ac2c:	1096d604 	addi	r2,r2,23384
   2ac30:	d8800015 	stw	r2,0(sp)
   2ac34:	01c06d84 	movi	r7,438
   2ac38:	01800174 	movhi	r6,5
   2ac3c:	31964204 	addi	r6,r6,22792
   2ac40:	01400174 	movhi	r5,5
   2ac44:	2951e804 	addi	r5,r5,18336
   2ac48:	1809883a 	mov	r4,r3
   2ac4c:	00461000 	call	46100 <fprintf>
   2ac50:	0045fd40 	call	45fd4 <abort>
    muladd(m10, SECP256K1_N_C_1);
   2ac54:	e0beb017 	ldw	r2,-1344(fp)
   2ac58:	e0bfaa15 	stw	r2,-344(fp)
   2ac5c:	e03fab15 	stw	zero,-340(fp)
   2ac60:	01900bb4 	movhi	r6,16430
   2ac64:	31a85cc4 	addi	r6,r6,-24205
   2ac68:	000f883a 	mov	r7,zero
   2ac6c:	e13faa17 	ldw	r4,-344(fp)
   2ac70:	e17fab17 	ldw	r5,-340(fp)
   2ac74:	00438e00 	call	438e0 <__muldi3>
   2ac78:	1009883a 	mov	r4,r2
   2ac7c:	180b883a 	mov	r5,r3
   2ac80:	e13ed415 	stw	r4,-1200(fp)
   2ac84:	e17ed515 	stw	r5,-1196(fp)
   2ac88:	e0bed517 	ldw	r2,-1196(fp)
   2ac8c:	1004d83a 	srl	r2,r2,zero
   2ac90:	e0bfac15 	stw	r2,-336(fp)
   2ac94:	e03fad15 	stw	zero,-332(fp)
   2ac98:	e13fac17 	ldw	r4,-336(fp)
   2ac9c:	e13ed615 	stw	r4,-1192(fp)
   2aca0:	e0bed417 	ldw	r2,-1200(fp)
   2aca4:	e0bed715 	stw	r2,-1188(fp)
   2aca8:	e0fe1617 	ldw	r3,-1960(fp)
   2acac:	e0bed717 	ldw	r2,-1188(fp)
   2acb0:	1885883a 	add	r2,r3,r2
   2acb4:	e0be1615 	stw	r2,-1960(fp)
   2acb8:	e0fe1617 	ldw	r3,-1960(fp)
   2acbc:	e0bed717 	ldw	r2,-1188(fp)
   2acc0:	1880022e 	bgeu	r3,r2,2accc <secp256k1_scalar_reduce_512+0x3574>
   2acc4:	00c00044 	movi	r3,1
   2acc8:	00000106 	br	2acd0 <secp256k1_scalar_reduce_512+0x3578>
   2accc:	0007883a 	mov	r3,zero
   2acd0:	e0bed617 	ldw	r2,-1192(fp)
   2acd4:	10c5883a 	add	r2,r2,r3
   2acd8:	e0bed615 	stw	r2,-1192(fp)
   2acdc:	e0fe1717 	ldw	r3,-1956(fp)
   2ace0:	e0bed617 	ldw	r2,-1192(fp)
   2ace4:	1885883a 	add	r2,r3,r2
   2ace8:	e0be1715 	stw	r2,-1956(fp)
   2acec:	e0fe1717 	ldw	r3,-1956(fp)
   2acf0:	e0bed617 	ldw	r2,-1192(fp)
   2acf4:	1880022e 	bgeu	r3,r2,2ad00 <secp256k1_scalar_reduce_512+0x35a8>
   2acf8:	00c00044 	movi	r3,1
   2acfc:	00000106 	br	2ad04 <secp256k1_scalar_reduce_512+0x35ac>
   2ad00:	0007883a 	mov	r3,zero
   2ad04:	e0be1817 	ldw	r2,-1952(fp)
   2ad08:	10c5883a 	add	r2,r2,r3
   2ad0c:	e0be1815 	stw	r2,-1952(fp)
   2ad10:	e0fe1717 	ldw	r3,-1956(fp)
   2ad14:	e0bed617 	ldw	r2,-1192(fp)
   2ad18:	1885803a 	cmpltu	r2,r3,r2
   2ad1c:	10803fcc 	andi	r2,r2,255
   2ad20:	10001126 	beq	r2,zero,2ad68 <secp256k1_scalar_reduce_512+0x3610>
   2ad24:	e0be1817 	ldw	r2,-1952(fp)
   2ad28:	1005003a 	cmpeq	r2,r2,zero
   2ad2c:	10803fcc 	andi	r2,r2,255
   2ad30:	10000d26 	beq	r2,zero,2ad68 <secp256k1_scalar_reduce_512+0x3610>
   2ad34:	d0a01617 	ldw	r2,-32680(gp)
   2ad38:	10c00317 	ldw	r3,12(r2)
   2ad3c:	00800174 	movhi	r2,5
   2ad40:	1096d604 	addi	r2,r2,23384
   2ad44:	d8800015 	stw	r2,0(sp)
   2ad48:	01c06dc4 	movi	r7,439
   2ad4c:	01800174 	movhi	r6,5
   2ad50:	31964204 	addi	r6,r6,22792
   2ad54:	01400174 	movhi	r5,5
   2ad58:	2951e804 	addi	r5,r5,18336
   2ad5c:	1809883a 	mov	r4,r3
   2ad60:	00461000 	call	46100 <fprintf>
   2ad64:	0045fd40 	call	45fd4 <abort>
    muladd(m9, SECP256K1_N_C_2);
   2ad68:	e0beaa17 	ldw	r2,-1368(fp)
   2ad6c:	e0bfae15 	stw	r2,-328(fp)
   2ad70:	e03faf15 	stw	zero,-324(fp)
   2ad74:	01942df4 	movhi	r6,20663
   2ad78:	3197f104 	addi	r6,r6,24516
   2ad7c:	000f883a 	mov	r7,zero
   2ad80:	e13fae17 	ldw	r4,-328(fp)
   2ad84:	e17faf17 	ldw	r5,-324(fp)
   2ad88:	00438e00 	call	438e0 <__muldi3>
   2ad8c:	1009883a 	mov	r4,r2
   2ad90:	180b883a 	mov	r5,r3
   2ad94:	e13ed815 	stw	r4,-1184(fp)
   2ad98:	e17ed915 	stw	r5,-1180(fp)
   2ad9c:	e0bed917 	ldw	r2,-1180(fp)
   2ada0:	1004d83a 	srl	r2,r2,zero
   2ada4:	e0bfb015 	stw	r2,-320(fp)
   2ada8:	e03fb115 	stw	zero,-316(fp)
   2adac:	e17fb017 	ldw	r5,-320(fp)
   2adb0:	e17eda15 	stw	r5,-1176(fp)
   2adb4:	e0bed817 	ldw	r2,-1184(fp)
   2adb8:	e0bedb15 	stw	r2,-1172(fp)
   2adbc:	e0fe1617 	ldw	r3,-1960(fp)
   2adc0:	e0bedb17 	ldw	r2,-1172(fp)
   2adc4:	1885883a 	add	r2,r3,r2
   2adc8:	e0be1615 	stw	r2,-1960(fp)
   2adcc:	e0fe1617 	ldw	r3,-1960(fp)
   2add0:	e0bedb17 	ldw	r2,-1172(fp)
   2add4:	1880022e 	bgeu	r3,r2,2ade0 <secp256k1_scalar_reduce_512+0x3688>
   2add8:	00c00044 	movi	r3,1
   2addc:	00000106 	br	2ade4 <secp256k1_scalar_reduce_512+0x368c>
   2ade0:	0007883a 	mov	r3,zero
   2ade4:	e0beda17 	ldw	r2,-1176(fp)
   2ade8:	10c5883a 	add	r2,r2,r3
   2adec:	e0beda15 	stw	r2,-1176(fp)
   2adf0:	e0fe1717 	ldw	r3,-1956(fp)
   2adf4:	e0beda17 	ldw	r2,-1176(fp)
   2adf8:	1885883a 	add	r2,r3,r2
   2adfc:	e0be1715 	stw	r2,-1956(fp)
   2ae00:	e0fe1717 	ldw	r3,-1956(fp)
   2ae04:	e0beda17 	ldw	r2,-1176(fp)
   2ae08:	1880022e 	bgeu	r3,r2,2ae14 <secp256k1_scalar_reduce_512+0x36bc>
   2ae0c:	00c00044 	movi	r3,1
   2ae10:	00000106 	br	2ae18 <secp256k1_scalar_reduce_512+0x36c0>
   2ae14:	0007883a 	mov	r3,zero
   2ae18:	e0be1817 	ldw	r2,-1952(fp)
   2ae1c:	10c5883a 	add	r2,r2,r3
   2ae20:	e0be1815 	stw	r2,-1952(fp)
   2ae24:	e0fe1717 	ldw	r3,-1956(fp)
   2ae28:	e0beda17 	ldw	r2,-1176(fp)
   2ae2c:	1885803a 	cmpltu	r2,r3,r2
   2ae30:	10803fcc 	andi	r2,r2,255
   2ae34:	10001126 	beq	r2,zero,2ae7c <secp256k1_scalar_reduce_512+0x3724>
   2ae38:	e0be1817 	ldw	r2,-1952(fp)
   2ae3c:	1005003a 	cmpeq	r2,r2,zero
   2ae40:	10803fcc 	andi	r2,r2,255
   2ae44:	10000d26 	beq	r2,zero,2ae7c <secp256k1_scalar_reduce_512+0x3724>
   2ae48:	d0a01617 	ldw	r2,-32680(gp)
   2ae4c:	10c00317 	ldw	r3,12(r2)
   2ae50:	00800174 	movhi	r2,5
   2ae54:	1096d604 	addi	r2,r2,23384
   2ae58:	d8800015 	stw	r2,0(sp)
   2ae5c:	01c06e04 	movi	r7,440
   2ae60:	01800174 	movhi	r6,5
   2ae64:	31964204 	addi	r6,r6,22792
   2ae68:	01400174 	movhi	r5,5
   2ae6c:	2951e804 	addi	r5,r5,18336
   2ae70:	1809883a 	mov	r4,r3
   2ae74:	00461000 	call	46100 <fprintf>
   2ae78:	0045fd40 	call	45fd4 <abort>
    muladd(m8, SECP256K1_N_C_3);
   2ae7c:	e0bea017 	ldw	r2,-1408(fp)
   2ae80:	e0bfb215 	stw	r2,-312(fp)
   2ae84:	e03fb315 	stw	zero,-308(fp)
   2ae88:	01915474 	movhi	r6,17745
   2ae8c:	3188c644 	addi	r6,r6,8985
   2ae90:	000f883a 	mov	r7,zero
   2ae94:	e13fb217 	ldw	r4,-312(fp)
   2ae98:	e17fb317 	ldw	r5,-308(fp)
   2ae9c:	00438e00 	call	438e0 <__muldi3>
   2aea0:	1009883a 	mov	r4,r2
   2aea4:	180b883a 	mov	r5,r3
   2aea8:	e13edc15 	stw	r4,-1168(fp)
   2aeac:	e17edd15 	stw	r5,-1164(fp)
   2aeb0:	e0bedd17 	ldw	r2,-1164(fp)
   2aeb4:	1004d83a 	srl	r2,r2,zero
   2aeb8:	e0bfb415 	stw	r2,-304(fp)
   2aebc:	e03fb515 	stw	zero,-300(fp)
   2aec0:	e1bfb417 	ldw	r6,-304(fp)
   2aec4:	e1bede15 	stw	r6,-1160(fp)
   2aec8:	e0bedc17 	ldw	r2,-1168(fp)
   2aecc:	e0bedf15 	stw	r2,-1156(fp)
   2aed0:	e0fe1617 	ldw	r3,-1960(fp)
   2aed4:	e0bedf17 	ldw	r2,-1156(fp)
   2aed8:	1885883a 	add	r2,r3,r2
   2aedc:	e0be1615 	stw	r2,-1960(fp)
   2aee0:	e0fe1617 	ldw	r3,-1960(fp)
   2aee4:	e0bedf17 	ldw	r2,-1156(fp)
   2aee8:	1880022e 	bgeu	r3,r2,2aef4 <secp256k1_scalar_reduce_512+0x379c>
   2aeec:	00c00044 	movi	r3,1
   2aef0:	00000106 	br	2aef8 <secp256k1_scalar_reduce_512+0x37a0>
   2aef4:	0007883a 	mov	r3,zero
   2aef8:	e0bede17 	ldw	r2,-1160(fp)
   2aefc:	10c5883a 	add	r2,r2,r3
   2af00:	e0bede15 	stw	r2,-1160(fp)
   2af04:	e0fe1717 	ldw	r3,-1956(fp)
   2af08:	e0bede17 	ldw	r2,-1160(fp)
   2af0c:	1885883a 	add	r2,r3,r2
   2af10:	e0be1715 	stw	r2,-1956(fp)
   2af14:	e0fe1717 	ldw	r3,-1956(fp)
   2af18:	e0bede17 	ldw	r2,-1160(fp)
   2af1c:	1880022e 	bgeu	r3,r2,2af28 <secp256k1_scalar_reduce_512+0x37d0>
   2af20:	00c00044 	movi	r3,1
   2af24:	00000106 	br	2af2c <secp256k1_scalar_reduce_512+0x37d4>
   2af28:	0007883a 	mov	r3,zero
   2af2c:	e0be1817 	ldw	r2,-1952(fp)
   2af30:	10c5883a 	add	r2,r2,r3
   2af34:	e0be1815 	stw	r2,-1952(fp)
   2af38:	e0fe1717 	ldw	r3,-1956(fp)
   2af3c:	e0bede17 	ldw	r2,-1160(fp)
   2af40:	1885803a 	cmpltu	r2,r3,r2
   2af44:	10803fcc 	andi	r2,r2,255
   2af48:	10001126 	beq	r2,zero,2af90 <secp256k1_scalar_reduce_512+0x3838>
   2af4c:	e0be1817 	ldw	r2,-1952(fp)
   2af50:	1005003a 	cmpeq	r2,r2,zero
   2af54:	10803fcc 	andi	r2,r2,255
   2af58:	10000d26 	beq	r2,zero,2af90 <secp256k1_scalar_reduce_512+0x3838>
   2af5c:	d0a01617 	ldw	r2,-32680(gp)
   2af60:	10c00317 	ldw	r3,12(r2)
   2af64:	00800174 	movhi	r2,5
   2af68:	1096d604 	addi	r2,r2,23384
   2af6c:	d8800015 	stw	r2,0(sp)
   2af70:	01c06e44 	movi	r7,441
   2af74:	01800174 	movhi	r6,5
   2af78:	31964204 	addi	r6,r6,22792
   2af7c:	01400174 	movhi	r5,5
   2af80:	2951e804 	addi	r5,r5,18336
   2af84:	1809883a 	mov	r4,r3
   2af88:	00461000 	call	46100 <fprintf>
   2af8c:	0045fd40 	call	45fd4 <abort>
    extract(p3);
   2af90:	e0be1617 	ldw	r2,-1960(fp)
   2af94:	e0bee015 	stw	r2,-1152(fp)
   2af98:	e0be1717 	ldw	r2,-1956(fp)
   2af9c:	e0be1615 	stw	r2,-1960(fp)
   2afa0:	e0be1817 	ldw	r2,-1952(fp)
   2afa4:	e0be1715 	stw	r2,-1956(fp)
   2afa8:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m4);
   2afac:	e0fe1617 	ldw	r3,-1960(fp)
   2afb0:	e0be5917 	ldw	r2,-1692(fp)
   2afb4:	1885883a 	add	r2,r3,r2
   2afb8:	e0be1615 	stw	r2,-1960(fp)
   2afbc:	e0fe1617 	ldw	r3,-1960(fp)
   2afc0:	e0be5917 	ldw	r2,-1692(fp)
   2afc4:	1885803a 	cmpltu	r2,r3,r2
   2afc8:	10803fcc 	andi	r2,r2,255
   2afcc:	e0bee115 	stw	r2,-1148(fp)
   2afd0:	e0fe1717 	ldw	r3,-1956(fp)
   2afd4:	e0bee117 	ldw	r2,-1148(fp)
   2afd8:	1885883a 	add	r2,r3,r2
   2afdc:	e0be1715 	stw	r2,-1956(fp)
   2afe0:	e0fe1717 	ldw	r3,-1956(fp)
   2afe4:	e0bee117 	ldw	r2,-1148(fp)
   2afe8:	1880022e 	bgeu	r3,r2,2aff4 <secp256k1_scalar_reduce_512+0x389c>
   2afec:	00c00044 	movi	r3,1
   2aff0:	00000106 	br	2aff8 <secp256k1_scalar_reduce_512+0x38a0>
   2aff4:	0007883a 	mov	r3,zero
   2aff8:	e0be1817 	ldw	r2,-1952(fp)
   2affc:	10c5883a 	add	r2,r2,r3
   2b000:	e0be1815 	stw	r2,-1952(fp)
    muladd(m12, SECP256K1_N_C_0);
   2b004:	e0beb217 	ldw	r2,-1336(fp)
   2b008:	e0bfb615 	stw	r2,-296(fp)
   2b00c:	e03fb715 	stw	zero,-292(fp)
   2b010:	018bf2b4 	movhi	r6,12234
   2b014:	31afafc4 	addi	r6,r6,-16705
   2b018:	000f883a 	mov	r7,zero
   2b01c:	e13fb617 	ldw	r4,-296(fp)
   2b020:	e17fb717 	ldw	r5,-292(fp)
   2b024:	00438e00 	call	438e0 <__muldi3>
   2b028:	1009883a 	mov	r4,r2
   2b02c:	180b883a 	mov	r5,r3
   2b030:	e13ee215 	stw	r4,-1144(fp)
   2b034:	e17ee315 	stw	r5,-1140(fp)
   2b038:	e0bee317 	ldw	r2,-1140(fp)
   2b03c:	1004d83a 	srl	r2,r2,zero
   2b040:	e0bfb815 	stw	r2,-288(fp)
   2b044:	e03fb915 	stw	zero,-284(fp)
   2b048:	e1ffb817 	ldw	r7,-288(fp)
   2b04c:	e1fee415 	stw	r7,-1136(fp)
   2b050:	e0bee217 	ldw	r2,-1144(fp)
   2b054:	e0bee515 	stw	r2,-1132(fp)
   2b058:	e0fe1617 	ldw	r3,-1960(fp)
   2b05c:	e0bee517 	ldw	r2,-1132(fp)
   2b060:	1885883a 	add	r2,r3,r2
   2b064:	e0be1615 	stw	r2,-1960(fp)
   2b068:	e0fe1617 	ldw	r3,-1960(fp)
   2b06c:	e0bee517 	ldw	r2,-1132(fp)
   2b070:	1880022e 	bgeu	r3,r2,2b07c <secp256k1_scalar_reduce_512+0x3924>
   2b074:	00c00044 	movi	r3,1
   2b078:	00000106 	br	2b080 <secp256k1_scalar_reduce_512+0x3928>
   2b07c:	0007883a 	mov	r3,zero
   2b080:	e0bee417 	ldw	r2,-1136(fp)
   2b084:	10c5883a 	add	r2,r2,r3
   2b088:	e0bee415 	stw	r2,-1136(fp)
   2b08c:	e0fe1717 	ldw	r3,-1956(fp)
   2b090:	e0bee417 	ldw	r2,-1136(fp)
   2b094:	1885883a 	add	r2,r3,r2
   2b098:	e0be1715 	stw	r2,-1956(fp)
   2b09c:	e0fe1717 	ldw	r3,-1956(fp)
   2b0a0:	e0bee417 	ldw	r2,-1136(fp)
   2b0a4:	1880022e 	bgeu	r3,r2,2b0b0 <secp256k1_scalar_reduce_512+0x3958>
   2b0a8:	00c00044 	movi	r3,1
   2b0ac:	00000106 	br	2b0b4 <secp256k1_scalar_reduce_512+0x395c>
   2b0b0:	0007883a 	mov	r3,zero
   2b0b4:	e0be1817 	ldw	r2,-1952(fp)
   2b0b8:	10c5883a 	add	r2,r2,r3
   2b0bc:	e0be1815 	stw	r2,-1952(fp)
   2b0c0:	e0fe1717 	ldw	r3,-1956(fp)
   2b0c4:	e0bee417 	ldw	r2,-1136(fp)
   2b0c8:	1885803a 	cmpltu	r2,r3,r2
   2b0cc:	10803fcc 	andi	r2,r2,255
   2b0d0:	10001126 	beq	r2,zero,2b118 <secp256k1_scalar_reduce_512+0x39c0>
   2b0d4:	e0be1817 	ldw	r2,-1952(fp)
   2b0d8:	1005003a 	cmpeq	r2,r2,zero
   2b0dc:	10803fcc 	andi	r2,r2,255
   2b0e0:	10000d26 	beq	r2,zero,2b118 <secp256k1_scalar_reduce_512+0x39c0>
   2b0e4:	d0a01617 	ldw	r2,-32680(gp)
   2b0e8:	10c00317 	ldw	r3,12(r2)
   2b0ec:	00800174 	movhi	r2,5
   2b0f0:	1096d604 	addi	r2,r2,23384
   2b0f4:	d8800015 	stw	r2,0(sp)
   2b0f8:	01c06f04 	movi	r7,444
   2b0fc:	01800174 	movhi	r6,5
   2b100:	31964204 	addi	r6,r6,22792
   2b104:	01400174 	movhi	r5,5
   2b108:	2951e804 	addi	r5,r5,18336
   2b10c:	1809883a 	mov	r4,r3
   2b110:	00461000 	call	46100 <fprintf>
   2b114:	0045fd40 	call	45fd4 <abort>
    muladd(m11, SECP256K1_N_C_1);
   2b118:	e0beb117 	ldw	r2,-1340(fp)
   2b11c:	e0bfba15 	stw	r2,-280(fp)
   2b120:	e03fbb15 	stw	zero,-276(fp)
   2b124:	01900bb4 	movhi	r6,16430
   2b128:	31a85cc4 	addi	r6,r6,-24205
   2b12c:	000f883a 	mov	r7,zero
   2b130:	e13fba17 	ldw	r4,-280(fp)
   2b134:	e17fbb17 	ldw	r5,-276(fp)
   2b138:	00438e00 	call	438e0 <__muldi3>
   2b13c:	1009883a 	mov	r4,r2
   2b140:	180b883a 	mov	r5,r3
   2b144:	e13ee615 	stw	r4,-1128(fp)
   2b148:	e17ee715 	stw	r5,-1124(fp)
   2b14c:	e0bee717 	ldw	r2,-1124(fp)
   2b150:	1004d83a 	srl	r2,r2,zero
   2b154:	e0bfbc15 	stw	r2,-272(fp)
   2b158:	e03fbd15 	stw	zero,-268(fp)
   2b15c:	e0bfbc17 	ldw	r2,-272(fp)
   2b160:	e0bee815 	stw	r2,-1120(fp)
   2b164:	e0bee617 	ldw	r2,-1128(fp)
   2b168:	e0bee915 	stw	r2,-1116(fp)
   2b16c:	e0fe1617 	ldw	r3,-1960(fp)
   2b170:	e0bee917 	ldw	r2,-1116(fp)
   2b174:	1885883a 	add	r2,r3,r2
   2b178:	e0be1615 	stw	r2,-1960(fp)
   2b17c:	e0fe1617 	ldw	r3,-1960(fp)
   2b180:	e0bee917 	ldw	r2,-1116(fp)
   2b184:	1880022e 	bgeu	r3,r2,2b190 <secp256k1_scalar_reduce_512+0x3a38>
   2b188:	00c00044 	movi	r3,1
   2b18c:	00000106 	br	2b194 <secp256k1_scalar_reduce_512+0x3a3c>
   2b190:	0007883a 	mov	r3,zero
   2b194:	e0bee817 	ldw	r2,-1120(fp)
   2b198:	10c5883a 	add	r2,r2,r3
   2b19c:	e0bee815 	stw	r2,-1120(fp)
   2b1a0:	e0fe1717 	ldw	r3,-1956(fp)
   2b1a4:	e0bee817 	ldw	r2,-1120(fp)
   2b1a8:	1885883a 	add	r2,r3,r2
   2b1ac:	e0be1715 	stw	r2,-1956(fp)
   2b1b0:	e0fe1717 	ldw	r3,-1956(fp)
   2b1b4:	e0bee817 	ldw	r2,-1120(fp)
   2b1b8:	1880022e 	bgeu	r3,r2,2b1c4 <secp256k1_scalar_reduce_512+0x3a6c>
   2b1bc:	00c00044 	movi	r3,1
   2b1c0:	00000106 	br	2b1c8 <secp256k1_scalar_reduce_512+0x3a70>
   2b1c4:	0007883a 	mov	r3,zero
   2b1c8:	e0be1817 	ldw	r2,-1952(fp)
   2b1cc:	10c5883a 	add	r2,r2,r3
   2b1d0:	e0be1815 	stw	r2,-1952(fp)
   2b1d4:	e0fe1717 	ldw	r3,-1956(fp)
   2b1d8:	e0bee817 	ldw	r2,-1120(fp)
   2b1dc:	1885803a 	cmpltu	r2,r3,r2
   2b1e0:	10803fcc 	andi	r2,r2,255
   2b1e4:	10001126 	beq	r2,zero,2b22c <secp256k1_scalar_reduce_512+0x3ad4>
   2b1e8:	e0be1817 	ldw	r2,-1952(fp)
   2b1ec:	1005003a 	cmpeq	r2,r2,zero
   2b1f0:	10803fcc 	andi	r2,r2,255
   2b1f4:	10000d26 	beq	r2,zero,2b22c <secp256k1_scalar_reduce_512+0x3ad4>
   2b1f8:	d0a01617 	ldw	r2,-32680(gp)
   2b1fc:	10c00317 	ldw	r3,12(r2)
   2b200:	00800174 	movhi	r2,5
   2b204:	1096d604 	addi	r2,r2,23384
   2b208:	d8800015 	stw	r2,0(sp)
   2b20c:	01c06f44 	movi	r7,445
   2b210:	01800174 	movhi	r6,5
   2b214:	31964204 	addi	r6,r6,22792
   2b218:	01400174 	movhi	r5,5
   2b21c:	2951e804 	addi	r5,r5,18336
   2b220:	1809883a 	mov	r4,r3
   2b224:	00461000 	call	46100 <fprintf>
   2b228:	0045fd40 	call	45fd4 <abort>
    muladd(m10, SECP256K1_N_C_2);
   2b22c:	e0beb017 	ldw	r2,-1344(fp)
   2b230:	e0bfbe15 	stw	r2,-264(fp)
   2b234:	e03fbf15 	stw	zero,-260(fp)
   2b238:	01942df4 	movhi	r6,20663
   2b23c:	3197f104 	addi	r6,r6,24516
   2b240:	000f883a 	mov	r7,zero
   2b244:	e13fbe17 	ldw	r4,-264(fp)
   2b248:	e17fbf17 	ldw	r5,-260(fp)
   2b24c:	00438e00 	call	438e0 <__muldi3>
   2b250:	1009883a 	mov	r4,r2
   2b254:	180b883a 	mov	r5,r3
   2b258:	e13eea15 	stw	r4,-1112(fp)
   2b25c:	e17eeb15 	stw	r5,-1108(fp)
   2b260:	e0beeb17 	ldw	r2,-1108(fp)
   2b264:	1004d83a 	srl	r2,r2,zero
   2b268:	e0bfc015 	stw	r2,-256(fp)
   2b26c:	e03fc115 	stw	zero,-252(fp)
   2b270:	e13fc017 	ldw	r4,-256(fp)
   2b274:	e13eec15 	stw	r4,-1104(fp)
   2b278:	e0beea17 	ldw	r2,-1112(fp)
   2b27c:	e0beed15 	stw	r2,-1100(fp)
   2b280:	e0fe1617 	ldw	r3,-1960(fp)
   2b284:	e0beed17 	ldw	r2,-1100(fp)
   2b288:	1885883a 	add	r2,r3,r2
   2b28c:	e0be1615 	stw	r2,-1960(fp)
   2b290:	e0fe1617 	ldw	r3,-1960(fp)
   2b294:	e0beed17 	ldw	r2,-1100(fp)
   2b298:	1880022e 	bgeu	r3,r2,2b2a4 <secp256k1_scalar_reduce_512+0x3b4c>
   2b29c:	00c00044 	movi	r3,1
   2b2a0:	00000106 	br	2b2a8 <secp256k1_scalar_reduce_512+0x3b50>
   2b2a4:	0007883a 	mov	r3,zero
   2b2a8:	e0beec17 	ldw	r2,-1104(fp)
   2b2ac:	10c5883a 	add	r2,r2,r3
   2b2b0:	e0beec15 	stw	r2,-1104(fp)
   2b2b4:	e0fe1717 	ldw	r3,-1956(fp)
   2b2b8:	e0beec17 	ldw	r2,-1104(fp)
   2b2bc:	1885883a 	add	r2,r3,r2
   2b2c0:	e0be1715 	stw	r2,-1956(fp)
   2b2c4:	e0fe1717 	ldw	r3,-1956(fp)
   2b2c8:	e0beec17 	ldw	r2,-1104(fp)
   2b2cc:	1880022e 	bgeu	r3,r2,2b2d8 <secp256k1_scalar_reduce_512+0x3b80>
   2b2d0:	00c00044 	movi	r3,1
   2b2d4:	00000106 	br	2b2dc <secp256k1_scalar_reduce_512+0x3b84>
   2b2d8:	0007883a 	mov	r3,zero
   2b2dc:	e0be1817 	ldw	r2,-1952(fp)
   2b2e0:	10c5883a 	add	r2,r2,r3
   2b2e4:	e0be1815 	stw	r2,-1952(fp)
   2b2e8:	e0fe1717 	ldw	r3,-1956(fp)
   2b2ec:	e0beec17 	ldw	r2,-1104(fp)
   2b2f0:	1885803a 	cmpltu	r2,r3,r2
   2b2f4:	10803fcc 	andi	r2,r2,255
   2b2f8:	10001126 	beq	r2,zero,2b340 <secp256k1_scalar_reduce_512+0x3be8>
   2b2fc:	e0be1817 	ldw	r2,-1952(fp)
   2b300:	1005003a 	cmpeq	r2,r2,zero
   2b304:	10803fcc 	andi	r2,r2,255
   2b308:	10000d26 	beq	r2,zero,2b340 <secp256k1_scalar_reduce_512+0x3be8>
   2b30c:	d0a01617 	ldw	r2,-32680(gp)
   2b310:	10c00317 	ldw	r3,12(r2)
   2b314:	00800174 	movhi	r2,5
   2b318:	1096d604 	addi	r2,r2,23384
   2b31c:	d8800015 	stw	r2,0(sp)
   2b320:	01c06f84 	movi	r7,446
   2b324:	01800174 	movhi	r6,5
   2b328:	31964204 	addi	r6,r6,22792
   2b32c:	01400174 	movhi	r5,5
   2b330:	2951e804 	addi	r5,r5,18336
   2b334:	1809883a 	mov	r4,r3
   2b338:	00461000 	call	46100 <fprintf>
   2b33c:	0045fd40 	call	45fd4 <abort>
    muladd(m9, SECP256K1_N_C_3);
   2b340:	e0beaa17 	ldw	r2,-1368(fp)
   2b344:	e0bfc215 	stw	r2,-248(fp)
   2b348:	e03fc315 	stw	zero,-244(fp)
   2b34c:	01915474 	movhi	r6,17745
   2b350:	3188c644 	addi	r6,r6,8985
   2b354:	000f883a 	mov	r7,zero
   2b358:	e13fc217 	ldw	r4,-248(fp)
   2b35c:	e17fc317 	ldw	r5,-244(fp)
   2b360:	00438e00 	call	438e0 <__muldi3>
   2b364:	1009883a 	mov	r4,r2
   2b368:	180b883a 	mov	r5,r3
   2b36c:	e13eee15 	stw	r4,-1096(fp)
   2b370:	e17eef15 	stw	r5,-1092(fp)
   2b374:	e0beef17 	ldw	r2,-1092(fp)
   2b378:	1004d83a 	srl	r2,r2,zero
   2b37c:	e0bfc415 	stw	r2,-240(fp)
   2b380:	e03fc515 	stw	zero,-236(fp)
   2b384:	e17fc417 	ldw	r5,-240(fp)
   2b388:	e17ef015 	stw	r5,-1088(fp)
   2b38c:	e0beee17 	ldw	r2,-1096(fp)
   2b390:	e0bef115 	stw	r2,-1084(fp)
   2b394:	e0fe1617 	ldw	r3,-1960(fp)
   2b398:	e0bef117 	ldw	r2,-1084(fp)
   2b39c:	1885883a 	add	r2,r3,r2
   2b3a0:	e0be1615 	stw	r2,-1960(fp)
   2b3a4:	e0fe1617 	ldw	r3,-1960(fp)
   2b3a8:	e0bef117 	ldw	r2,-1084(fp)
   2b3ac:	1880022e 	bgeu	r3,r2,2b3b8 <secp256k1_scalar_reduce_512+0x3c60>
   2b3b0:	00c00044 	movi	r3,1
   2b3b4:	00000106 	br	2b3bc <secp256k1_scalar_reduce_512+0x3c64>
   2b3b8:	0007883a 	mov	r3,zero
   2b3bc:	e0bef017 	ldw	r2,-1088(fp)
   2b3c0:	10c5883a 	add	r2,r2,r3
   2b3c4:	e0bef015 	stw	r2,-1088(fp)
   2b3c8:	e0fe1717 	ldw	r3,-1956(fp)
   2b3cc:	e0bef017 	ldw	r2,-1088(fp)
   2b3d0:	1885883a 	add	r2,r3,r2
   2b3d4:	e0be1715 	stw	r2,-1956(fp)
   2b3d8:	e0fe1717 	ldw	r3,-1956(fp)
   2b3dc:	e0bef017 	ldw	r2,-1088(fp)
   2b3e0:	1880022e 	bgeu	r3,r2,2b3ec <secp256k1_scalar_reduce_512+0x3c94>
   2b3e4:	00c00044 	movi	r3,1
   2b3e8:	00000106 	br	2b3f0 <secp256k1_scalar_reduce_512+0x3c98>
   2b3ec:	0007883a 	mov	r3,zero
   2b3f0:	e0be1817 	ldw	r2,-1952(fp)
   2b3f4:	10c5883a 	add	r2,r2,r3
   2b3f8:	e0be1815 	stw	r2,-1952(fp)
   2b3fc:	e0fe1717 	ldw	r3,-1956(fp)
   2b400:	e0bef017 	ldw	r2,-1088(fp)
   2b404:	1885803a 	cmpltu	r2,r3,r2
   2b408:	10803fcc 	andi	r2,r2,255
   2b40c:	10001126 	beq	r2,zero,2b454 <secp256k1_scalar_reduce_512+0x3cfc>
   2b410:	e0be1817 	ldw	r2,-1952(fp)
   2b414:	1005003a 	cmpeq	r2,r2,zero
   2b418:	10803fcc 	andi	r2,r2,255
   2b41c:	10000d26 	beq	r2,zero,2b454 <secp256k1_scalar_reduce_512+0x3cfc>
   2b420:	d0a01617 	ldw	r2,-32680(gp)
   2b424:	10c00317 	ldw	r3,12(r2)
   2b428:	00800174 	movhi	r2,5
   2b42c:	1096d604 	addi	r2,r2,23384
   2b430:	d8800015 	stw	r2,0(sp)
   2b434:	01c06fc4 	movi	r7,447
   2b438:	01800174 	movhi	r6,5
   2b43c:	31964204 	addi	r6,r6,22792
   2b440:	01400174 	movhi	r5,5
   2b444:	2951e804 	addi	r5,r5,18336
   2b448:	1809883a 	mov	r4,r3
   2b44c:	00461000 	call	46100 <fprintf>
   2b450:	0045fd40 	call	45fd4 <abort>
    sumadd(m8);
   2b454:	e0fe1617 	ldw	r3,-1960(fp)
   2b458:	e0bea017 	ldw	r2,-1408(fp)
   2b45c:	1885883a 	add	r2,r3,r2
   2b460:	e0be1615 	stw	r2,-1960(fp)
   2b464:	e0fe1617 	ldw	r3,-1960(fp)
   2b468:	e0bea017 	ldw	r2,-1408(fp)
   2b46c:	1885803a 	cmpltu	r2,r3,r2
   2b470:	10803fcc 	andi	r2,r2,255
   2b474:	e0bef215 	stw	r2,-1080(fp)
   2b478:	e0fe1717 	ldw	r3,-1956(fp)
   2b47c:	e0bef217 	ldw	r2,-1080(fp)
   2b480:	1885883a 	add	r2,r3,r2
   2b484:	e0be1715 	stw	r2,-1956(fp)
   2b488:	e0fe1717 	ldw	r3,-1956(fp)
   2b48c:	e0bef217 	ldw	r2,-1080(fp)
   2b490:	1880022e 	bgeu	r3,r2,2b49c <secp256k1_scalar_reduce_512+0x3d44>
   2b494:	00c00044 	movi	r3,1
   2b498:	00000106 	br	2b4a0 <secp256k1_scalar_reduce_512+0x3d48>
   2b49c:	0007883a 	mov	r3,zero
   2b4a0:	e0be1817 	ldw	r2,-1952(fp)
   2b4a4:	10c5883a 	add	r2,r2,r3
   2b4a8:	e0be1815 	stw	r2,-1952(fp)
    extract(p4);
   2b4ac:	e0be1617 	ldw	r2,-1960(fp)
   2b4b0:	e0bef315 	stw	r2,-1076(fp)
   2b4b4:	e0be1717 	ldw	r2,-1956(fp)
   2b4b8:	e0be1615 	stw	r2,-1960(fp)
   2b4bc:	e0be1817 	ldw	r2,-1952(fp)
   2b4c0:	e0be1715 	stw	r2,-1956(fp)
   2b4c4:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m5);
   2b4c8:	e0fe1617 	ldw	r3,-1960(fp)
   2b4cc:	e0be6c17 	ldw	r2,-1616(fp)
   2b4d0:	1885883a 	add	r2,r3,r2
   2b4d4:	e0be1615 	stw	r2,-1960(fp)
   2b4d8:	e0fe1617 	ldw	r3,-1960(fp)
   2b4dc:	e0be6c17 	ldw	r2,-1616(fp)
   2b4e0:	1885803a 	cmpltu	r2,r3,r2
   2b4e4:	10803fcc 	andi	r2,r2,255
   2b4e8:	e0bef415 	stw	r2,-1072(fp)
   2b4ec:	e0fe1717 	ldw	r3,-1956(fp)
   2b4f0:	e0bef417 	ldw	r2,-1072(fp)
   2b4f4:	1885883a 	add	r2,r3,r2
   2b4f8:	e0be1715 	stw	r2,-1956(fp)
   2b4fc:	e0fe1717 	ldw	r3,-1956(fp)
   2b500:	e0bef417 	ldw	r2,-1072(fp)
   2b504:	1880022e 	bgeu	r3,r2,2b510 <secp256k1_scalar_reduce_512+0x3db8>
   2b508:	00c00044 	movi	r3,1
   2b50c:	00000106 	br	2b514 <secp256k1_scalar_reduce_512+0x3dbc>
   2b510:	0007883a 	mov	r3,zero
   2b514:	e0be1817 	ldw	r2,-1952(fp)
   2b518:	10c5883a 	add	r2,r2,r3
   2b51c:	e0be1815 	stw	r2,-1952(fp)
    muladd(m12, SECP256K1_N_C_1);
   2b520:	e0beb217 	ldw	r2,-1336(fp)
   2b524:	e0bfc615 	stw	r2,-232(fp)
   2b528:	e03fc715 	stw	zero,-228(fp)
   2b52c:	01900bb4 	movhi	r6,16430
   2b530:	31a85cc4 	addi	r6,r6,-24205
   2b534:	000f883a 	mov	r7,zero
   2b538:	e13fc617 	ldw	r4,-232(fp)
   2b53c:	e17fc717 	ldw	r5,-228(fp)
   2b540:	00438e00 	call	438e0 <__muldi3>
   2b544:	1009883a 	mov	r4,r2
   2b548:	180b883a 	mov	r5,r3
   2b54c:	e13ef515 	stw	r4,-1068(fp)
   2b550:	e17ef615 	stw	r5,-1064(fp)
   2b554:	e0bef617 	ldw	r2,-1064(fp)
   2b558:	1004d83a 	srl	r2,r2,zero
   2b55c:	e0bfc815 	stw	r2,-224(fp)
   2b560:	e03fc915 	stw	zero,-220(fp)
   2b564:	e1bfc817 	ldw	r6,-224(fp)
   2b568:	e1bef715 	stw	r6,-1060(fp)
   2b56c:	e0bef517 	ldw	r2,-1068(fp)
   2b570:	e0bef815 	stw	r2,-1056(fp)
   2b574:	e0fe1617 	ldw	r3,-1960(fp)
   2b578:	e0bef817 	ldw	r2,-1056(fp)
   2b57c:	1885883a 	add	r2,r3,r2
   2b580:	e0be1615 	stw	r2,-1960(fp)
   2b584:	e0fe1617 	ldw	r3,-1960(fp)
   2b588:	e0bef817 	ldw	r2,-1056(fp)
   2b58c:	1880022e 	bgeu	r3,r2,2b598 <secp256k1_scalar_reduce_512+0x3e40>
   2b590:	00c00044 	movi	r3,1
   2b594:	00000106 	br	2b59c <secp256k1_scalar_reduce_512+0x3e44>
   2b598:	0007883a 	mov	r3,zero
   2b59c:	e0bef717 	ldw	r2,-1060(fp)
   2b5a0:	10c5883a 	add	r2,r2,r3
   2b5a4:	e0bef715 	stw	r2,-1060(fp)
   2b5a8:	e0fe1717 	ldw	r3,-1956(fp)
   2b5ac:	e0bef717 	ldw	r2,-1060(fp)
   2b5b0:	1885883a 	add	r2,r3,r2
   2b5b4:	e0be1715 	stw	r2,-1956(fp)
   2b5b8:	e0fe1717 	ldw	r3,-1956(fp)
   2b5bc:	e0bef717 	ldw	r2,-1060(fp)
   2b5c0:	1880022e 	bgeu	r3,r2,2b5cc <secp256k1_scalar_reduce_512+0x3e74>
   2b5c4:	00c00044 	movi	r3,1
   2b5c8:	00000106 	br	2b5d0 <secp256k1_scalar_reduce_512+0x3e78>
   2b5cc:	0007883a 	mov	r3,zero
   2b5d0:	e0be1817 	ldw	r2,-1952(fp)
   2b5d4:	10c5883a 	add	r2,r2,r3
   2b5d8:	e0be1815 	stw	r2,-1952(fp)
   2b5dc:	e0fe1717 	ldw	r3,-1956(fp)
   2b5e0:	e0bef717 	ldw	r2,-1060(fp)
   2b5e4:	1885803a 	cmpltu	r2,r3,r2
   2b5e8:	10803fcc 	andi	r2,r2,255
   2b5ec:	10001126 	beq	r2,zero,2b634 <secp256k1_scalar_reduce_512+0x3edc>
   2b5f0:	e0be1817 	ldw	r2,-1952(fp)
   2b5f4:	1005003a 	cmpeq	r2,r2,zero
   2b5f8:	10803fcc 	andi	r2,r2,255
   2b5fc:	10000d26 	beq	r2,zero,2b634 <secp256k1_scalar_reduce_512+0x3edc>
   2b600:	d0a01617 	ldw	r2,-32680(gp)
   2b604:	10c00317 	ldw	r3,12(r2)
   2b608:	00800174 	movhi	r2,5
   2b60c:	1096d604 	addi	r2,r2,23384
   2b610:	d8800015 	stw	r2,0(sp)
   2b614:	01c070c4 	movi	r7,451
   2b618:	01800174 	movhi	r6,5
   2b61c:	31964204 	addi	r6,r6,22792
   2b620:	01400174 	movhi	r5,5
   2b624:	2951e804 	addi	r5,r5,18336
   2b628:	1809883a 	mov	r4,r3
   2b62c:	00461000 	call	46100 <fprintf>
   2b630:	0045fd40 	call	45fd4 <abort>
    muladd(m11, SECP256K1_N_C_2);
   2b634:	e0beb117 	ldw	r2,-1340(fp)
   2b638:	e0bfca15 	stw	r2,-216(fp)
   2b63c:	e03fcb15 	stw	zero,-212(fp)
   2b640:	01942df4 	movhi	r6,20663
   2b644:	3197f104 	addi	r6,r6,24516
   2b648:	000f883a 	mov	r7,zero
   2b64c:	e13fca17 	ldw	r4,-216(fp)
   2b650:	e17fcb17 	ldw	r5,-212(fp)
   2b654:	00438e00 	call	438e0 <__muldi3>
   2b658:	1009883a 	mov	r4,r2
   2b65c:	180b883a 	mov	r5,r3
   2b660:	e13ef915 	stw	r4,-1052(fp)
   2b664:	e17efa15 	stw	r5,-1048(fp)
   2b668:	e0befa17 	ldw	r2,-1048(fp)
   2b66c:	1004d83a 	srl	r2,r2,zero
   2b670:	e0bfcc15 	stw	r2,-208(fp)
   2b674:	e03fcd15 	stw	zero,-204(fp)
   2b678:	e1ffcc17 	ldw	r7,-208(fp)
   2b67c:	e1fefb15 	stw	r7,-1044(fp)
   2b680:	e0bef917 	ldw	r2,-1052(fp)
   2b684:	e0befc15 	stw	r2,-1040(fp)
   2b688:	e0fe1617 	ldw	r3,-1960(fp)
   2b68c:	e0befc17 	ldw	r2,-1040(fp)
   2b690:	1885883a 	add	r2,r3,r2
   2b694:	e0be1615 	stw	r2,-1960(fp)
   2b698:	e0fe1617 	ldw	r3,-1960(fp)
   2b69c:	e0befc17 	ldw	r2,-1040(fp)
   2b6a0:	1880022e 	bgeu	r3,r2,2b6ac <secp256k1_scalar_reduce_512+0x3f54>
   2b6a4:	00c00044 	movi	r3,1
   2b6a8:	00000106 	br	2b6b0 <secp256k1_scalar_reduce_512+0x3f58>
   2b6ac:	0007883a 	mov	r3,zero
   2b6b0:	e0befb17 	ldw	r2,-1044(fp)
   2b6b4:	10c5883a 	add	r2,r2,r3
   2b6b8:	e0befb15 	stw	r2,-1044(fp)
   2b6bc:	e0fe1717 	ldw	r3,-1956(fp)
   2b6c0:	e0befb17 	ldw	r2,-1044(fp)
   2b6c4:	1885883a 	add	r2,r3,r2
   2b6c8:	e0be1715 	stw	r2,-1956(fp)
   2b6cc:	e0fe1717 	ldw	r3,-1956(fp)
   2b6d0:	e0befb17 	ldw	r2,-1044(fp)
   2b6d4:	1880022e 	bgeu	r3,r2,2b6e0 <secp256k1_scalar_reduce_512+0x3f88>
   2b6d8:	00c00044 	movi	r3,1
   2b6dc:	00000106 	br	2b6e4 <secp256k1_scalar_reduce_512+0x3f8c>
   2b6e0:	0007883a 	mov	r3,zero
   2b6e4:	e0be1817 	ldw	r2,-1952(fp)
   2b6e8:	10c5883a 	add	r2,r2,r3
   2b6ec:	e0be1815 	stw	r2,-1952(fp)
   2b6f0:	e0fe1717 	ldw	r3,-1956(fp)
   2b6f4:	e0befb17 	ldw	r2,-1044(fp)
   2b6f8:	1885803a 	cmpltu	r2,r3,r2
   2b6fc:	10803fcc 	andi	r2,r2,255
   2b700:	10001126 	beq	r2,zero,2b748 <secp256k1_scalar_reduce_512+0x3ff0>
   2b704:	e0be1817 	ldw	r2,-1952(fp)
   2b708:	1005003a 	cmpeq	r2,r2,zero
   2b70c:	10803fcc 	andi	r2,r2,255
   2b710:	10000d26 	beq	r2,zero,2b748 <secp256k1_scalar_reduce_512+0x3ff0>
   2b714:	d0a01617 	ldw	r2,-32680(gp)
   2b718:	10c00317 	ldw	r3,12(r2)
   2b71c:	00800174 	movhi	r2,5
   2b720:	1096d604 	addi	r2,r2,23384
   2b724:	d8800015 	stw	r2,0(sp)
   2b728:	01c07104 	movi	r7,452
   2b72c:	01800174 	movhi	r6,5
   2b730:	31964204 	addi	r6,r6,22792
   2b734:	01400174 	movhi	r5,5
   2b738:	2951e804 	addi	r5,r5,18336
   2b73c:	1809883a 	mov	r4,r3
   2b740:	00461000 	call	46100 <fprintf>
   2b744:	0045fd40 	call	45fd4 <abort>
    muladd(m10, SECP256K1_N_C_3);
   2b748:	e0beb017 	ldw	r2,-1344(fp)
   2b74c:	e0bfce15 	stw	r2,-200(fp)
   2b750:	e03fcf15 	stw	zero,-196(fp)
   2b754:	01915474 	movhi	r6,17745
   2b758:	3188c644 	addi	r6,r6,8985
   2b75c:	000f883a 	mov	r7,zero
   2b760:	e13fce17 	ldw	r4,-200(fp)
   2b764:	e17fcf17 	ldw	r5,-196(fp)
   2b768:	00438e00 	call	438e0 <__muldi3>
   2b76c:	1009883a 	mov	r4,r2
   2b770:	180b883a 	mov	r5,r3
   2b774:	e13efd15 	stw	r4,-1036(fp)
   2b778:	e17efe15 	stw	r5,-1032(fp)
   2b77c:	e0befe17 	ldw	r2,-1032(fp)
   2b780:	1004d83a 	srl	r2,r2,zero
   2b784:	e0bfd015 	stw	r2,-192(fp)
   2b788:	e03fd115 	stw	zero,-188(fp)
   2b78c:	e0bfd017 	ldw	r2,-192(fp)
   2b790:	e0beff15 	stw	r2,-1028(fp)
   2b794:	e0befd17 	ldw	r2,-1036(fp)
   2b798:	e0bf0015 	stw	r2,-1024(fp)
   2b79c:	e0fe1617 	ldw	r3,-1960(fp)
   2b7a0:	e0bf0017 	ldw	r2,-1024(fp)
   2b7a4:	1885883a 	add	r2,r3,r2
   2b7a8:	e0be1615 	stw	r2,-1960(fp)
   2b7ac:	e0fe1617 	ldw	r3,-1960(fp)
   2b7b0:	e0bf0017 	ldw	r2,-1024(fp)
   2b7b4:	1880022e 	bgeu	r3,r2,2b7c0 <secp256k1_scalar_reduce_512+0x4068>
   2b7b8:	00c00044 	movi	r3,1
   2b7bc:	00000106 	br	2b7c4 <secp256k1_scalar_reduce_512+0x406c>
   2b7c0:	0007883a 	mov	r3,zero
   2b7c4:	e0beff17 	ldw	r2,-1028(fp)
   2b7c8:	10c5883a 	add	r2,r2,r3
   2b7cc:	e0beff15 	stw	r2,-1028(fp)
   2b7d0:	e0fe1717 	ldw	r3,-1956(fp)
   2b7d4:	e0beff17 	ldw	r2,-1028(fp)
   2b7d8:	1885883a 	add	r2,r3,r2
   2b7dc:	e0be1715 	stw	r2,-1956(fp)
   2b7e0:	e0fe1717 	ldw	r3,-1956(fp)
   2b7e4:	e0beff17 	ldw	r2,-1028(fp)
   2b7e8:	1880022e 	bgeu	r3,r2,2b7f4 <secp256k1_scalar_reduce_512+0x409c>
   2b7ec:	00c00044 	movi	r3,1
   2b7f0:	00000106 	br	2b7f8 <secp256k1_scalar_reduce_512+0x40a0>
   2b7f4:	0007883a 	mov	r3,zero
   2b7f8:	e0be1817 	ldw	r2,-1952(fp)
   2b7fc:	10c5883a 	add	r2,r2,r3
   2b800:	e0be1815 	stw	r2,-1952(fp)
   2b804:	e0fe1717 	ldw	r3,-1956(fp)
   2b808:	e0beff17 	ldw	r2,-1028(fp)
   2b80c:	1885803a 	cmpltu	r2,r3,r2
   2b810:	10803fcc 	andi	r2,r2,255
   2b814:	10001126 	beq	r2,zero,2b85c <secp256k1_scalar_reduce_512+0x4104>
   2b818:	e0be1817 	ldw	r2,-1952(fp)
   2b81c:	1005003a 	cmpeq	r2,r2,zero
   2b820:	10803fcc 	andi	r2,r2,255
   2b824:	10000d26 	beq	r2,zero,2b85c <secp256k1_scalar_reduce_512+0x4104>
   2b828:	d0a01617 	ldw	r2,-32680(gp)
   2b82c:	10c00317 	ldw	r3,12(r2)
   2b830:	00800174 	movhi	r2,5
   2b834:	1096d604 	addi	r2,r2,23384
   2b838:	d8800015 	stw	r2,0(sp)
   2b83c:	01c07144 	movi	r7,453
   2b840:	01800174 	movhi	r6,5
   2b844:	31964204 	addi	r6,r6,22792
   2b848:	01400174 	movhi	r5,5
   2b84c:	2951e804 	addi	r5,r5,18336
   2b850:	1809883a 	mov	r4,r3
   2b854:	00461000 	call	46100 <fprintf>
   2b858:	0045fd40 	call	45fd4 <abort>
    sumadd(m9);
   2b85c:	e0fe1617 	ldw	r3,-1960(fp)
   2b860:	e0beaa17 	ldw	r2,-1368(fp)
   2b864:	1885883a 	add	r2,r3,r2
   2b868:	e0be1615 	stw	r2,-1960(fp)
   2b86c:	e0fe1617 	ldw	r3,-1960(fp)
   2b870:	e0beaa17 	ldw	r2,-1368(fp)
   2b874:	1885803a 	cmpltu	r2,r3,r2
   2b878:	10803fcc 	andi	r2,r2,255
   2b87c:	e0bf0115 	stw	r2,-1020(fp)
   2b880:	e0fe1717 	ldw	r3,-1956(fp)
   2b884:	e0bf0117 	ldw	r2,-1020(fp)
   2b888:	1885883a 	add	r2,r3,r2
   2b88c:	e0be1715 	stw	r2,-1956(fp)
   2b890:	e0fe1717 	ldw	r3,-1956(fp)
   2b894:	e0bf0117 	ldw	r2,-1020(fp)
   2b898:	1880022e 	bgeu	r3,r2,2b8a4 <secp256k1_scalar_reduce_512+0x414c>
   2b89c:	00c00044 	movi	r3,1
   2b8a0:	00000106 	br	2b8a8 <secp256k1_scalar_reduce_512+0x4150>
   2b8a4:	0007883a 	mov	r3,zero
   2b8a8:	e0be1817 	ldw	r2,-1952(fp)
   2b8ac:	10c5883a 	add	r2,r2,r3
   2b8b0:	e0be1815 	stw	r2,-1952(fp)
    extract(p5);
   2b8b4:	e0be1617 	ldw	r2,-1960(fp)
   2b8b8:	e0bf0215 	stw	r2,-1016(fp)
   2b8bc:	e0be1717 	ldw	r2,-1956(fp)
   2b8c0:	e0be1615 	stw	r2,-1960(fp)
   2b8c4:	e0be1817 	ldw	r2,-1952(fp)
   2b8c8:	e0be1715 	stw	r2,-1956(fp)
   2b8cc:	e03e1815 	stw	zero,-1952(fp)
    sumadd(m6);
   2b8d0:	e0fe1617 	ldw	r3,-1960(fp)
   2b8d4:	e0be7f17 	ldw	r2,-1540(fp)
   2b8d8:	1885883a 	add	r2,r3,r2
   2b8dc:	e0be1615 	stw	r2,-1960(fp)
   2b8e0:	e0fe1617 	ldw	r3,-1960(fp)
   2b8e4:	e0be7f17 	ldw	r2,-1540(fp)
   2b8e8:	1885803a 	cmpltu	r2,r3,r2
   2b8ec:	10803fcc 	andi	r2,r2,255
   2b8f0:	e0bf0315 	stw	r2,-1012(fp)
   2b8f4:	e0fe1717 	ldw	r3,-1956(fp)
   2b8f8:	e0bf0317 	ldw	r2,-1012(fp)
   2b8fc:	1885883a 	add	r2,r3,r2
   2b900:	e0be1715 	stw	r2,-1956(fp)
   2b904:	e0fe1717 	ldw	r3,-1956(fp)
   2b908:	e0bf0317 	ldw	r2,-1012(fp)
   2b90c:	1880022e 	bgeu	r3,r2,2b918 <secp256k1_scalar_reduce_512+0x41c0>
   2b910:	00c00044 	movi	r3,1
   2b914:	00000106 	br	2b91c <secp256k1_scalar_reduce_512+0x41c4>
   2b918:	0007883a 	mov	r3,zero
   2b91c:	e0be1817 	ldw	r2,-1952(fp)
   2b920:	10c5883a 	add	r2,r2,r3
   2b924:	e0be1815 	stw	r2,-1952(fp)
    muladd(m12, SECP256K1_N_C_2);
   2b928:	e0beb217 	ldw	r2,-1336(fp)
   2b92c:	e0bfd215 	stw	r2,-184(fp)
   2b930:	e03fd315 	stw	zero,-180(fp)
   2b934:	01942df4 	movhi	r6,20663
   2b938:	3197f104 	addi	r6,r6,24516
   2b93c:	000f883a 	mov	r7,zero
   2b940:	e13fd217 	ldw	r4,-184(fp)
   2b944:	e17fd317 	ldw	r5,-180(fp)
   2b948:	00438e00 	call	438e0 <__muldi3>
   2b94c:	1009883a 	mov	r4,r2
   2b950:	180b883a 	mov	r5,r3
   2b954:	e13f0415 	stw	r4,-1008(fp)
   2b958:	e17f0515 	stw	r5,-1004(fp)
   2b95c:	e0bf0517 	ldw	r2,-1004(fp)
   2b960:	1004d83a 	srl	r2,r2,zero
   2b964:	e0bfd415 	stw	r2,-176(fp)
   2b968:	e03fd515 	stw	zero,-172(fp)
   2b96c:	e13fd417 	ldw	r4,-176(fp)
   2b970:	e13f0615 	stw	r4,-1000(fp)
   2b974:	e0bf0417 	ldw	r2,-1008(fp)
   2b978:	e0bf0715 	stw	r2,-996(fp)
   2b97c:	e0fe1617 	ldw	r3,-1960(fp)
   2b980:	e0bf0717 	ldw	r2,-996(fp)
   2b984:	1885883a 	add	r2,r3,r2
   2b988:	e0be1615 	stw	r2,-1960(fp)
   2b98c:	e0fe1617 	ldw	r3,-1960(fp)
   2b990:	e0bf0717 	ldw	r2,-996(fp)
   2b994:	1880022e 	bgeu	r3,r2,2b9a0 <secp256k1_scalar_reduce_512+0x4248>
   2b998:	00c00044 	movi	r3,1
   2b99c:	00000106 	br	2b9a4 <secp256k1_scalar_reduce_512+0x424c>
   2b9a0:	0007883a 	mov	r3,zero
   2b9a4:	e0bf0617 	ldw	r2,-1000(fp)
   2b9a8:	10c5883a 	add	r2,r2,r3
   2b9ac:	e0bf0615 	stw	r2,-1000(fp)
   2b9b0:	e0fe1717 	ldw	r3,-1956(fp)
   2b9b4:	e0bf0617 	ldw	r2,-1000(fp)
   2b9b8:	1885883a 	add	r2,r3,r2
   2b9bc:	e0be1715 	stw	r2,-1956(fp)
   2b9c0:	e0fe1717 	ldw	r3,-1956(fp)
   2b9c4:	e0bf0617 	ldw	r2,-1000(fp)
   2b9c8:	1880022e 	bgeu	r3,r2,2b9d4 <secp256k1_scalar_reduce_512+0x427c>
   2b9cc:	00c00044 	movi	r3,1
   2b9d0:	00000106 	br	2b9d8 <secp256k1_scalar_reduce_512+0x4280>
   2b9d4:	0007883a 	mov	r3,zero
   2b9d8:	e0be1817 	ldw	r2,-1952(fp)
   2b9dc:	10c5883a 	add	r2,r2,r3
   2b9e0:	e0be1815 	stw	r2,-1952(fp)
   2b9e4:	e0fe1717 	ldw	r3,-1956(fp)
   2b9e8:	e0bf0617 	ldw	r2,-1000(fp)
   2b9ec:	1885803a 	cmpltu	r2,r3,r2
   2b9f0:	10803fcc 	andi	r2,r2,255
   2b9f4:	10001126 	beq	r2,zero,2ba3c <secp256k1_scalar_reduce_512+0x42e4>
   2b9f8:	e0be1817 	ldw	r2,-1952(fp)
   2b9fc:	1005003a 	cmpeq	r2,r2,zero
   2ba00:	10803fcc 	andi	r2,r2,255
   2ba04:	10000d26 	beq	r2,zero,2ba3c <secp256k1_scalar_reduce_512+0x42e4>
   2ba08:	d0a01617 	ldw	r2,-32680(gp)
   2ba0c:	10c00317 	ldw	r3,12(r2)
   2ba10:	00800174 	movhi	r2,5
   2ba14:	1096d604 	addi	r2,r2,23384
   2ba18:	d8800015 	stw	r2,0(sp)
   2ba1c:	01c07244 	movi	r7,457
   2ba20:	01800174 	movhi	r6,5
   2ba24:	31964204 	addi	r6,r6,22792
   2ba28:	01400174 	movhi	r5,5
   2ba2c:	2951e804 	addi	r5,r5,18336
   2ba30:	1809883a 	mov	r4,r3
   2ba34:	00461000 	call	46100 <fprintf>
   2ba38:	0045fd40 	call	45fd4 <abort>
    muladd(m11, SECP256K1_N_C_3);
   2ba3c:	e0beb117 	ldw	r2,-1340(fp)
   2ba40:	e0bfd615 	stw	r2,-168(fp)
   2ba44:	e03fd715 	stw	zero,-164(fp)
   2ba48:	01915474 	movhi	r6,17745
   2ba4c:	3188c644 	addi	r6,r6,8985
   2ba50:	000f883a 	mov	r7,zero
   2ba54:	e13fd617 	ldw	r4,-168(fp)
   2ba58:	e17fd717 	ldw	r5,-164(fp)
   2ba5c:	00438e00 	call	438e0 <__muldi3>
   2ba60:	1009883a 	mov	r4,r2
   2ba64:	180b883a 	mov	r5,r3
   2ba68:	e13f0815 	stw	r4,-992(fp)
   2ba6c:	e17f0915 	stw	r5,-988(fp)
   2ba70:	e0bf0917 	ldw	r2,-988(fp)
   2ba74:	1004d83a 	srl	r2,r2,zero
   2ba78:	e0bfd815 	stw	r2,-160(fp)
   2ba7c:	e03fd915 	stw	zero,-156(fp)
   2ba80:	e17fd817 	ldw	r5,-160(fp)
   2ba84:	e17f0a15 	stw	r5,-984(fp)
   2ba88:	e0bf0817 	ldw	r2,-992(fp)
   2ba8c:	e0bf0b15 	stw	r2,-980(fp)
   2ba90:	e0fe1617 	ldw	r3,-1960(fp)
   2ba94:	e0bf0b17 	ldw	r2,-980(fp)
   2ba98:	1885883a 	add	r2,r3,r2
   2ba9c:	e0be1615 	stw	r2,-1960(fp)
   2baa0:	e0fe1617 	ldw	r3,-1960(fp)
   2baa4:	e0bf0b17 	ldw	r2,-980(fp)
   2baa8:	1880022e 	bgeu	r3,r2,2bab4 <secp256k1_scalar_reduce_512+0x435c>
   2baac:	00c00044 	movi	r3,1
   2bab0:	00000106 	br	2bab8 <secp256k1_scalar_reduce_512+0x4360>
   2bab4:	0007883a 	mov	r3,zero
   2bab8:	e0bf0a17 	ldw	r2,-984(fp)
   2babc:	10c5883a 	add	r2,r2,r3
   2bac0:	e0bf0a15 	stw	r2,-984(fp)
   2bac4:	e0fe1717 	ldw	r3,-1956(fp)
   2bac8:	e0bf0a17 	ldw	r2,-984(fp)
   2bacc:	1885883a 	add	r2,r3,r2
   2bad0:	e0be1715 	stw	r2,-1956(fp)
   2bad4:	e0fe1717 	ldw	r3,-1956(fp)
   2bad8:	e0bf0a17 	ldw	r2,-984(fp)
   2badc:	1880022e 	bgeu	r3,r2,2bae8 <secp256k1_scalar_reduce_512+0x4390>
   2bae0:	00c00044 	movi	r3,1
   2bae4:	00000106 	br	2baec <secp256k1_scalar_reduce_512+0x4394>
   2bae8:	0007883a 	mov	r3,zero
   2baec:	e0be1817 	ldw	r2,-1952(fp)
   2baf0:	10c5883a 	add	r2,r2,r3
   2baf4:	e0be1815 	stw	r2,-1952(fp)
   2baf8:	e0fe1717 	ldw	r3,-1956(fp)
   2bafc:	e0bf0a17 	ldw	r2,-984(fp)
   2bb00:	1885803a 	cmpltu	r2,r3,r2
   2bb04:	10803fcc 	andi	r2,r2,255
   2bb08:	10001126 	beq	r2,zero,2bb50 <secp256k1_scalar_reduce_512+0x43f8>
   2bb0c:	e0be1817 	ldw	r2,-1952(fp)
   2bb10:	1005003a 	cmpeq	r2,r2,zero
   2bb14:	10803fcc 	andi	r2,r2,255
   2bb18:	10000d26 	beq	r2,zero,2bb50 <secp256k1_scalar_reduce_512+0x43f8>
   2bb1c:	d0a01617 	ldw	r2,-32680(gp)
   2bb20:	10c00317 	ldw	r3,12(r2)
   2bb24:	00800174 	movhi	r2,5
   2bb28:	1096d604 	addi	r2,r2,23384
   2bb2c:	d8800015 	stw	r2,0(sp)
   2bb30:	01c07284 	movi	r7,458
   2bb34:	01800174 	movhi	r6,5
   2bb38:	31964204 	addi	r6,r6,22792
   2bb3c:	01400174 	movhi	r5,5
   2bb40:	2951e804 	addi	r5,r5,18336
   2bb44:	1809883a 	mov	r4,r3
   2bb48:	00461000 	call	46100 <fprintf>
   2bb4c:	0045fd40 	call	45fd4 <abort>
    sumadd(m10);
   2bb50:	e0fe1617 	ldw	r3,-1960(fp)
   2bb54:	e0beb017 	ldw	r2,-1344(fp)
   2bb58:	1885883a 	add	r2,r3,r2
   2bb5c:	e0be1615 	stw	r2,-1960(fp)
   2bb60:	e0fe1617 	ldw	r3,-1960(fp)
   2bb64:	e0beb017 	ldw	r2,-1344(fp)
   2bb68:	1885803a 	cmpltu	r2,r3,r2
   2bb6c:	10803fcc 	andi	r2,r2,255
   2bb70:	e0bf0c15 	stw	r2,-976(fp)
   2bb74:	e0fe1717 	ldw	r3,-1956(fp)
   2bb78:	e0bf0c17 	ldw	r2,-976(fp)
   2bb7c:	1885883a 	add	r2,r3,r2
   2bb80:	e0be1715 	stw	r2,-1956(fp)
   2bb84:	e0fe1717 	ldw	r3,-1956(fp)
   2bb88:	e0bf0c17 	ldw	r2,-976(fp)
   2bb8c:	1880022e 	bgeu	r3,r2,2bb98 <secp256k1_scalar_reduce_512+0x4440>
   2bb90:	00c00044 	movi	r3,1
   2bb94:	00000106 	br	2bb9c <secp256k1_scalar_reduce_512+0x4444>
   2bb98:	0007883a 	mov	r3,zero
   2bb9c:	e0be1817 	ldw	r2,-1952(fp)
   2bba0:	10c5883a 	add	r2,r2,r3
   2bba4:	e0be1815 	stw	r2,-1952(fp)
    extract(p6);
   2bba8:	e0be1617 	ldw	r2,-1960(fp)
   2bbac:	e0bf0d15 	stw	r2,-972(fp)
   2bbb0:	e0be1717 	ldw	r2,-1956(fp)
   2bbb4:	e0be1615 	stw	r2,-1960(fp)
   2bbb8:	e0be1817 	ldw	r2,-1952(fp)
   2bbbc:	e0be1715 	stw	r2,-1956(fp)
   2bbc0:	e03e1815 	stw	zero,-1952(fp)
    sumadd_fast(m7);
   2bbc4:	e0fe1617 	ldw	r3,-1960(fp)
   2bbc8:	e0be9217 	ldw	r2,-1464(fp)
   2bbcc:	1885883a 	add	r2,r3,r2
   2bbd0:	e0be1615 	stw	r2,-1960(fp)
   2bbd4:	e0fe1617 	ldw	r3,-1960(fp)
   2bbd8:	e0be9217 	ldw	r2,-1464(fp)
   2bbdc:	1880022e 	bgeu	r3,r2,2bbe8 <secp256k1_scalar_reduce_512+0x4490>
   2bbe0:	00c00044 	movi	r3,1
   2bbe4:	00000106 	br	2bbec <secp256k1_scalar_reduce_512+0x4494>
   2bbe8:	0007883a 	mov	r3,zero
   2bbec:	e0be1717 	ldw	r2,-1956(fp)
   2bbf0:	10c5883a 	add	r2,r2,r3
   2bbf4:	e0be1715 	stw	r2,-1956(fp)
   2bbf8:	e0be1717 	ldw	r2,-1956(fp)
   2bbfc:	1005003a 	cmpeq	r2,r2,zero
   2bc00:	1009883a 	mov	r4,r2
   2bc04:	e0fe1617 	ldw	r3,-1960(fp)
   2bc08:	e0be9217 	ldw	r2,-1464(fp)
   2bc0c:	1885803a 	cmpltu	r2,r3,r2
   2bc10:	2084703a 	and	r2,r4,r2
   2bc14:	10803fcc 	andi	r2,r2,255
   2bc18:	10000d26 	beq	r2,zero,2bc50 <secp256k1_scalar_reduce_512+0x44f8>
   2bc1c:	d0a01617 	ldw	r2,-32680(gp)
   2bc20:	10c00317 	ldw	r3,12(r2)
   2bc24:	00800174 	movhi	r2,5
   2bc28:	10970204 	addi	r2,r2,23560
   2bc2c:	d8800015 	stw	r2,0(sp)
   2bc30:	01c07344 	movi	r7,461
   2bc34:	01800174 	movhi	r6,5
   2bc38:	31964204 	addi	r6,r6,22792
   2bc3c:	01400174 	movhi	r5,5
   2bc40:	2951e804 	addi	r5,r5,18336
   2bc44:	1809883a 	mov	r4,r3
   2bc48:	00461000 	call	46100 <fprintf>
   2bc4c:	0045fd40 	call	45fd4 <abort>
   2bc50:	e0be1817 	ldw	r2,-1952(fp)
   2bc54:	1004c03a 	cmpne	r2,r2,zero
   2bc58:	10803fcc 	andi	r2,r2,255
   2bc5c:	10000d26 	beq	r2,zero,2bc94 <secp256k1_scalar_reduce_512+0x453c>
   2bc60:	d0a01617 	ldw	r2,-32680(gp)
   2bc64:	10c00317 	ldw	r3,12(r2)
   2bc68:	00800174 	movhi	r2,5
   2bc6c:	1096c104 	addi	r2,r2,23300
   2bc70:	d8800015 	stw	r2,0(sp)
   2bc74:	01c07344 	movi	r7,461
   2bc78:	01800174 	movhi	r6,5
   2bc7c:	31964204 	addi	r6,r6,22792
   2bc80:	01400174 	movhi	r5,5
   2bc84:	2951e804 	addi	r5,r5,18336
   2bc88:	1809883a 	mov	r4,r3
   2bc8c:	00461000 	call	46100 <fprintf>
   2bc90:	0045fd40 	call	45fd4 <abort>
    muladd_fast(m12, SECP256K1_N_C_3);
   2bc94:	e0beb217 	ldw	r2,-1336(fp)
   2bc98:	e0bfda15 	stw	r2,-152(fp)
   2bc9c:	e03fdb15 	stw	zero,-148(fp)
   2bca0:	01915474 	movhi	r6,17745
   2bca4:	3188c644 	addi	r6,r6,8985
   2bca8:	000f883a 	mov	r7,zero
   2bcac:	e13fda17 	ldw	r4,-152(fp)
   2bcb0:	e17fdb17 	ldw	r5,-148(fp)
   2bcb4:	00438e00 	call	438e0 <__muldi3>
   2bcb8:	1009883a 	mov	r4,r2
   2bcbc:	180b883a 	mov	r5,r3
   2bcc0:	e13f0e15 	stw	r4,-968(fp)
   2bcc4:	e17f0f15 	stw	r5,-964(fp)
   2bcc8:	e0bf0f17 	ldw	r2,-964(fp)
   2bccc:	1004d83a 	srl	r2,r2,zero
   2bcd0:	e0bfdc15 	stw	r2,-144(fp)
   2bcd4:	e03fdd15 	stw	zero,-140(fp)
   2bcd8:	e1bfdc17 	ldw	r6,-144(fp)
   2bcdc:	e1bf1015 	stw	r6,-960(fp)
   2bce0:	e0bf0e17 	ldw	r2,-968(fp)
   2bce4:	e0bf1115 	stw	r2,-956(fp)
   2bce8:	e0fe1617 	ldw	r3,-1960(fp)
   2bcec:	e0bf1117 	ldw	r2,-956(fp)
   2bcf0:	1885883a 	add	r2,r3,r2
   2bcf4:	e0be1615 	stw	r2,-1960(fp)
   2bcf8:	e0fe1617 	ldw	r3,-1960(fp)
   2bcfc:	e0bf1117 	ldw	r2,-956(fp)
   2bd00:	1880022e 	bgeu	r3,r2,2bd0c <secp256k1_scalar_reduce_512+0x45b4>
   2bd04:	00c00044 	movi	r3,1
   2bd08:	00000106 	br	2bd10 <secp256k1_scalar_reduce_512+0x45b8>
   2bd0c:	0007883a 	mov	r3,zero
   2bd10:	e0bf1017 	ldw	r2,-960(fp)
   2bd14:	10c5883a 	add	r2,r2,r3
   2bd18:	e0bf1015 	stw	r2,-960(fp)
   2bd1c:	e0fe1717 	ldw	r3,-1956(fp)
   2bd20:	e0bf1017 	ldw	r2,-960(fp)
   2bd24:	1885883a 	add	r2,r3,r2
   2bd28:	e0be1715 	stw	r2,-1956(fp)
   2bd2c:	e0fe1717 	ldw	r3,-1956(fp)
   2bd30:	e0bf1017 	ldw	r2,-960(fp)
   2bd34:	1885803a 	cmpltu	r2,r3,r2
   2bd38:	10803fcc 	andi	r2,r2,255
   2bd3c:	10000d26 	beq	r2,zero,2bd74 <secp256k1_scalar_reduce_512+0x461c>
   2bd40:	d0a01617 	ldw	r2,-32680(gp)
   2bd44:	10c00317 	ldw	r3,12(r2)
   2bd48:	00800174 	movhi	r2,5
   2bd4c:	1096b904 	addi	r2,r2,23268
   2bd50:	d8800015 	stw	r2,0(sp)
   2bd54:	01c07384 	movi	r7,462
   2bd58:	01800174 	movhi	r6,5
   2bd5c:	31964204 	addi	r6,r6,22792
   2bd60:	01400174 	movhi	r5,5
   2bd64:	2951e804 	addi	r5,r5,18336
   2bd68:	1809883a 	mov	r4,r3
   2bd6c:	00461000 	call	46100 <fprintf>
   2bd70:	0045fd40 	call	45fd4 <abort>
    sumadd_fast(m11);
   2bd74:	e0fe1617 	ldw	r3,-1960(fp)
   2bd78:	e0beb117 	ldw	r2,-1340(fp)
   2bd7c:	1885883a 	add	r2,r3,r2
   2bd80:	e0be1615 	stw	r2,-1960(fp)
   2bd84:	e0fe1617 	ldw	r3,-1960(fp)
   2bd88:	e0beb117 	ldw	r2,-1340(fp)
   2bd8c:	1880022e 	bgeu	r3,r2,2bd98 <secp256k1_scalar_reduce_512+0x4640>
   2bd90:	00c00044 	movi	r3,1
   2bd94:	00000106 	br	2bd9c <secp256k1_scalar_reduce_512+0x4644>
   2bd98:	0007883a 	mov	r3,zero
   2bd9c:	e0be1717 	ldw	r2,-1956(fp)
   2bda0:	10c5883a 	add	r2,r2,r3
   2bda4:	e0be1715 	stw	r2,-1956(fp)
   2bda8:	e0be1717 	ldw	r2,-1956(fp)
   2bdac:	1005003a 	cmpeq	r2,r2,zero
   2bdb0:	1009883a 	mov	r4,r2
   2bdb4:	e0fe1617 	ldw	r3,-1960(fp)
   2bdb8:	e0beb117 	ldw	r2,-1340(fp)
   2bdbc:	1885803a 	cmpltu	r2,r3,r2
   2bdc0:	2084703a 	and	r2,r4,r2
   2bdc4:	10803fcc 	andi	r2,r2,255
   2bdc8:	10000d26 	beq	r2,zero,2be00 <secp256k1_scalar_reduce_512+0x46a8>
   2bdcc:	d0a01617 	ldw	r2,-32680(gp)
   2bdd0:	10c00317 	ldw	r3,12(r2)
   2bdd4:	00800174 	movhi	r2,5
   2bdd8:	10970e04 	addi	r2,r2,23608
   2bddc:	d8800015 	stw	r2,0(sp)
   2bde0:	01c073c4 	movi	r7,463
   2bde4:	01800174 	movhi	r6,5
   2bde8:	31964204 	addi	r6,r6,22792
   2bdec:	01400174 	movhi	r5,5
   2bdf0:	2951e804 	addi	r5,r5,18336
   2bdf4:	1809883a 	mov	r4,r3
   2bdf8:	00461000 	call	46100 <fprintf>
   2bdfc:	0045fd40 	call	45fd4 <abort>
   2be00:	e0be1817 	ldw	r2,-1952(fp)
   2be04:	1004c03a 	cmpne	r2,r2,zero
   2be08:	10803fcc 	andi	r2,r2,255
   2be0c:	10000d26 	beq	r2,zero,2be44 <secp256k1_scalar_reduce_512+0x46ec>
   2be10:	d0a01617 	ldw	r2,-32680(gp)
   2be14:	10c00317 	ldw	r3,12(r2)
   2be18:	00800174 	movhi	r2,5
   2be1c:	1096c104 	addi	r2,r2,23300
   2be20:	d8800015 	stw	r2,0(sp)
   2be24:	01c073c4 	movi	r7,463
   2be28:	01800174 	movhi	r6,5
   2be2c:	31964204 	addi	r6,r6,22792
   2be30:	01400174 	movhi	r5,5
   2be34:	2951e804 	addi	r5,r5,18336
   2be38:	1809883a 	mov	r4,r3
   2be3c:	00461000 	call	46100 <fprintf>
   2be40:	0045fd40 	call	45fd4 <abort>
    extract_fast(p7);
   2be44:	e0be1617 	ldw	r2,-1960(fp)
   2be48:	e0bf1215 	stw	r2,-952(fp)
   2be4c:	e0be1717 	ldw	r2,-1956(fp)
   2be50:	e0be1615 	stw	r2,-1960(fp)
   2be54:	e03e1715 	stw	zero,-1956(fp)
   2be58:	e0be1817 	ldw	r2,-1952(fp)
   2be5c:	1004c03a 	cmpne	r2,r2,zero
   2be60:	10803fcc 	andi	r2,r2,255
   2be64:	10000d26 	beq	r2,zero,2be9c <secp256k1_scalar_reduce_512+0x4744>
   2be68:	d0a01617 	ldw	r2,-32680(gp)
   2be6c:	10c00317 	ldw	r3,12(r2)
   2be70:	00800174 	movhi	r2,5
   2be74:	1096c104 	addi	r2,r2,23300
   2be78:	d8800015 	stw	r2,0(sp)
   2be7c:	01c07404 	movi	r7,464
   2be80:	01800174 	movhi	r6,5
   2be84:	31964204 	addi	r6,r6,22792
   2be88:	01400174 	movhi	r5,5
   2be8c:	2951e804 	addi	r5,r5,18336
   2be90:	1809883a 	mov	r4,r3
   2be94:	00461000 	call	46100 <fprintf>
   2be98:	0045fd40 	call	45fd4 <abort>
    p8 = c0 + m12;
   2be9c:	e0fe1617 	ldw	r3,-1960(fp)
   2bea0:	e0beb217 	ldw	r2,-1336(fp)
   2bea4:	1885883a 	add	r2,r3,r2
   2bea8:	e0bf1315 	stw	r2,-948(fp)
    VERIFY_CHECK(p8 <= 2);
   2beac:	e0bf1317 	ldw	r2,-948(fp)
   2beb0:	108000e8 	cmpgeui	r2,r2,3
   2beb4:	10803fcc 	andi	r2,r2,255
   2beb8:	10000d26 	beq	r2,zero,2bef0 <secp256k1_scalar_reduce_512+0x4798>
   2bebc:	d0a01617 	ldw	r2,-32680(gp)
   2bec0:	10c00317 	ldw	r3,12(r2)
   2bec4:	00800174 	movhi	r2,5
   2bec8:	10971b04 	addi	r2,r2,23660
   2becc:	d8800015 	stw	r2,0(sp)
   2bed0:	01c07484 	movi	r7,466
   2bed4:	01800174 	movhi	r6,5
   2bed8:	31964204 	addi	r6,r6,22792
   2bedc:	01400174 	movhi	r5,5
   2bee0:	2951e804 	addi	r5,r5,18336
   2bee4:	1809883a 	mov	r4,r3
   2bee8:	00461000 	call	46100 <fprintf>
   2beec:	0045fd40 	call	45fd4 <abort>

    /* Reduce 258 bits into 256. */
    /* r[0..7] = p[0..7] + p[8] * SECP256K1_N_C. */
    c = p0 + (uint64_t)SECP256K1_N_C_0 * p8;
   2bef0:	e0beb717 	ldw	r2,-1316(fp)
   2bef4:	e0bfde15 	stw	r2,-136(fp)
   2bef8:	e03fdf15 	stw	zero,-132(fp)
   2befc:	e0bf1317 	ldw	r2,-948(fp)
   2bf00:	e0bfe015 	stw	r2,-128(fp)
   2bf04:	e03fe115 	stw	zero,-124(fp)
   2bf08:	018bf2b4 	movhi	r6,12234
   2bf0c:	31afafc4 	addi	r6,r6,-16705
   2bf10:	000f883a 	mov	r7,zero
   2bf14:	e13fe017 	ldw	r4,-128(fp)
   2bf18:	e17fe117 	ldw	r5,-124(fp)
   2bf1c:	00438e00 	call	438e0 <__muldi3>
   2bf20:	100f883a 	mov	r7,r2
   2bf24:	1811883a 	mov	r8,r3
   2bf28:	380b883a 	mov	r5,r7
   2bf2c:	400d883a 	mov	r6,r8
   2bf30:	e1ffde17 	ldw	r7,-136(fp)
   2bf34:	3945883a 	add	r2,r7,r5
   2bf38:	e1ffde17 	ldw	r7,-136(fp)
   2bf3c:	11c9803a 	cmpltu	r4,r2,r7
   2bf40:	e1ffdf17 	ldw	r7,-132(fp)
   2bf44:	3987883a 	add	r3,r7,r6
   2bf48:	20c9883a 	add	r4,r4,r3
   2bf4c:	2007883a 	mov	r3,r4
   2bf50:	e0bf1415 	stw	r2,-944(fp)
   2bf54:	e0ff1515 	stw	r3,-940(fp)
    r->d[0] = c & 0xFFFFFFFFUL; c >>= 32;
   2bf58:	e0ff1417 	ldw	r3,-944(fp)
   2bf5c:	e0bf1617 	ldw	r2,-936(fp)
   2bf60:	10c00015 	stw	r3,0(r2)
   2bf64:	e0bf1517 	ldw	r2,-940(fp)
   2bf68:	1004d83a 	srl	r2,r2,zero
   2bf6c:	e0bf1415 	stw	r2,-944(fp)
   2bf70:	e03f1515 	stw	zero,-940(fp)
    c += p1 + (uint64_t)SECP256K1_N_C_1 * p8;
   2bf74:	e0bec017 	ldw	r2,-1280(fp)
   2bf78:	e0bfe215 	stw	r2,-120(fp)
   2bf7c:	e03fe315 	stw	zero,-116(fp)
   2bf80:	e0bf1317 	ldw	r2,-948(fp)
   2bf84:	e0bfe415 	stw	r2,-112(fp)
   2bf88:	e03fe515 	stw	zero,-108(fp)
   2bf8c:	01900bb4 	movhi	r6,16430
   2bf90:	31a85cc4 	addi	r6,r6,-24205
   2bf94:	000f883a 	mov	r7,zero
   2bf98:	e13fe417 	ldw	r4,-112(fp)
   2bf9c:	e17fe517 	ldw	r5,-108(fp)
   2bfa0:	00438e00 	call	438e0 <__muldi3>
   2bfa4:	100f883a 	mov	r7,r2
   2bfa8:	1811883a 	mov	r8,r3
   2bfac:	380b883a 	mov	r5,r7
   2bfb0:	400d883a 	mov	r6,r8
   2bfb4:	e13fe217 	ldw	r4,-120(fp)
   2bfb8:	2145883a 	add	r2,r4,r5
   2bfbc:	e1ffe217 	ldw	r7,-120(fp)
   2bfc0:	11c9803a 	cmpltu	r4,r2,r7
   2bfc4:	e1ffe317 	ldw	r7,-116(fp)
   2bfc8:	3987883a 	add	r3,r7,r6
   2bfcc:	20c9883a 	add	r4,r4,r3
   2bfd0:	2007883a 	mov	r3,r4
   2bfd4:	100d883a 	mov	r6,r2
   2bfd8:	180f883a 	mov	r7,r3
   2bfdc:	e13f1417 	ldw	r4,-944(fp)
   2bfe0:	e17f1517 	ldw	r5,-940(fp)
   2bfe4:	2185883a 	add	r2,r4,r6
   2bfe8:	1111803a 	cmpltu	r8,r2,r4
   2bfec:	29c7883a 	add	r3,r5,r7
   2bff0:	40c9883a 	add	r4,r8,r3
   2bff4:	2007883a 	mov	r3,r4
   2bff8:	e0bf1415 	stw	r2,-944(fp)
   2bffc:	e0ff1515 	stw	r3,-940(fp)
    r->d[1] = c & 0xFFFFFFFFUL; c >>= 32;
   2c000:	e0ff1417 	ldw	r3,-944(fp)
   2c004:	e0bf1617 	ldw	r2,-936(fp)
   2c008:	10c00115 	stw	r3,4(r2)
   2c00c:	e0bf1517 	ldw	r2,-940(fp)
   2c010:	1004d83a 	srl	r2,r2,zero
   2c014:	e0bf1415 	stw	r2,-944(fp)
   2c018:	e03f1515 	stw	zero,-940(fp)
    c += p2 + (uint64_t)SECP256K1_N_C_2 * p8;
   2c01c:	e0bece17 	ldw	r2,-1224(fp)
   2c020:	e0bfe615 	stw	r2,-104(fp)
   2c024:	e03fe715 	stw	zero,-100(fp)
   2c028:	e0bf1317 	ldw	r2,-948(fp)
   2c02c:	e0bfe815 	stw	r2,-96(fp)
   2c030:	e03fe915 	stw	zero,-92(fp)
   2c034:	01942df4 	movhi	r6,20663
   2c038:	3197f104 	addi	r6,r6,24516
   2c03c:	000f883a 	mov	r7,zero
   2c040:	e13fe817 	ldw	r4,-96(fp)
   2c044:	e17fe917 	ldw	r5,-92(fp)
   2c048:	00438e00 	call	438e0 <__muldi3>
   2c04c:	100d883a 	mov	r6,r2
   2c050:	180f883a 	mov	r7,r3
   2c054:	3009883a 	mov	r4,r6
   2c058:	380b883a 	mov	r5,r7
   2c05c:	e1bfe617 	ldw	r6,-104(fp)
   2c060:	3105883a 	add	r2,r6,r4
   2c064:	e1ffe617 	ldw	r7,-104(fp)
   2c068:	11cd803a 	cmpltu	r6,r2,r7
   2c06c:	e1ffe717 	ldw	r7,-100(fp)
   2c070:	3947883a 	add	r3,r7,r5
   2c074:	30c9883a 	add	r4,r6,r3
   2c078:	2007883a 	mov	r3,r4
   2c07c:	100d883a 	mov	r6,r2
   2c080:	180f883a 	mov	r7,r3
   2c084:	e13f1417 	ldw	r4,-944(fp)
   2c088:	e17f1517 	ldw	r5,-940(fp)
   2c08c:	2185883a 	add	r2,r4,r6
   2c090:	1111803a 	cmpltu	r8,r2,r4
   2c094:	29c7883a 	add	r3,r5,r7
   2c098:	40c9883a 	add	r4,r8,r3
   2c09c:	2007883a 	mov	r3,r4
   2c0a0:	e0bf1415 	stw	r2,-944(fp)
   2c0a4:	e0ff1515 	stw	r3,-940(fp)
    r->d[2] = c & 0xFFFFFFFFUL; c >>= 32;
   2c0a8:	e0ff1417 	ldw	r3,-944(fp)
   2c0ac:	e0bf1617 	ldw	r2,-936(fp)
   2c0b0:	10c00215 	stw	r3,8(r2)
   2c0b4:	e0bf1517 	ldw	r2,-940(fp)
   2c0b8:	1004d83a 	srl	r2,r2,zero
   2c0bc:	e0bf1415 	stw	r2,-944(fp)
   2c0c0:	e03f1515 	stw	zero,-940(fp)
    c += p3 + (uint64_t)SECP256K1_N_C_3 * p8;
   2c0c4:	e0bee017 	ldw	r2,-1152(fp)
   2c0c8:	e0bfea15 	stw	r2,-88(fp)
   2c0cc:	e03feb15 	stw	zero,-84(fp)
   2c0d0:	e0bf1317 	ldw	r2,-948(fp)
   2c0d4:	e0bfec15 	stw	r2,-80(fp)
   2c0d8:	e03fed15 	stw	zero,-76(fp)
   2c0dc:	01915474 	movhi	r6,17745
   2c0e0:	3188c644 	addi	r6,r6,8985
   2c0e4:	000f883a 	mov	r7,zero
   2c0e8:	e13fec17 	ldw	r4,-80(fp)
   2c0ec:	e17fed17 	ldw	r5,-76(fp)
   2c0f0:	00438e00 	call	438e0 <__muldi3>
   2c0f4:	100d883a 	mov	r6,r2
   2c0f8:	180f883a 	mov	r7,r3
   2c0fc:	3009883a 	mov	r4,r6
   2c100:	380b883a 	mov	r5,r7
   2c104:	e1bfea17 	ldw	r6,-88(fp)
   2c108:	3105883a 	add	r2,r6,r4
   2c10c:	e1ffea17 	ldw	r7,-88(fp)
   2c110:	11cd803a 	cmpltu	r6,r2,r7
   2c114:	e1ffeb17 	ldw	r7,-84(fp)
   2c118:	3947883a 	add	r3,r7,r5
   2c11c:	30c9883a 	add	r4,r6,r3
   2c120:	2007883a 	mov	r3,r4
   2c124:	100d883a 	mov	r6,r2
   2c128:	180f883a 	mov	r7,r3
   2c12c:	e13f1417 	ldw	r4,-944(fp)
   2c130:	e17f1517 	ldw	r5,-940(fp)
   2c134:	2185883a 	add	r2,r4,r6
   2c138:	1111803a 	cmpltu	r8,r2,r4
   2c13c:	29c7883a 	add	r3,r5,r7
   2c140:	40c9883a 	add	r4,r8,r3
   2c144:	2007883a 	mov	r3,r4
   2c148:	e0bf1415 	stw	r2,-944(fp)
   2c14c:	e0ff1515 	stw	r3,-940(fp)
    r->d[3] = c & 0xFFFFFFFFUL; c >>= 32;
   2c150:	e0ff1417 	ldw	r3,-944(fp)
   2c154:	e0bf1617 	ldw	r2,-936(fp)
   2c158:	10c00315 	stw	r3,12(r2)
   2c15c:	e0bf1517 	ldw	r2,-940(fp)
   2c160:	1004d83a 	srl	r2,r2,zero
   2c164:	e0bf1415 	stw	r2,-944(fp)
   2c168:	e03f1515 	stw	zero,-940(fp)
    c += p4 + (uint64_t)p8;
   2c16c:	e0bef317 	ldw	r2,-1076(fp)
   2c170:	e0bfee15 	stw	r2,-72(fp)
   2c174:	e03fef15 	stw	zero,-68(fp)
   2c178:	e0bf1317 	ldw	r2,-948(fp)
   2c17c:	e0bff015 	stw	r2,-64(fp)
   2c180:	e03ff115 	stw	zero,-60(fp)
   2c184:	e13fee17 	ldw	r4,-72(fp)
   2c188:	e17ff017 	ldw	r5,-64(fp)
   2c18c:	2145883a 	add	r2,r4,r5
   2c190:	e1bfee17 	ldw	r6,-72(fp)
   2c194:	1189803a 	cmpltu	r4,r2,r6
   2c198:	e1ffef17 	ldw	r7,-68(fp)
   2c19c:	e17ff117 	ldw	r5,-60(fp)
   2c1a0:	3947883a 	add	r3,r7,r5
   2c1a4:	20c9883a 	add	r4,r4,r3
   2c1a8:	2007883a 	mov	r3,r4
   2c1ac:	100d883a 	mov	r6,r2
   2c1b0:	180f883a 	mov	r7,r3
   2c1b4:	e13f1417 	ldw	r4,-944(fp)
   2c1b8:	e17f1517 	ldw	r5,-940(fp)
   2c1bc:	2185883a 	add	r2,r4,r6
   2c1c0:	1111803a 	cmpltu	r8,r2,r4
   2c1c4:	29c7883a 	add	r3,r5,r7
   2c1c8:	40c9883a 	add	r4,r8,r3
   2c1cc:	2007883a 	mov	r3,r4
   2c1d0:	e0bf1415 	stw	r2,-944(fp)
   2c1d4:	e0ff1515 	stw	r3,-940(fp)
    r->d[4] = c & 0xFFFFFFFFUL; c >>= 32;
   2c1d8:	e0ff1417 	ldw	r3,-944(fp)
   2c1dc:	e0bf1617 	ldw	r2,-936(fp)
   2c1e0:	10c00415 	stw	r3,16(r2)
   2c1e4:	e0bf1517 	ldw	r2,-940(fp)
   2c1e8:	1004d83a 	srl	r2,r2,zero
   2c1ec:	e0bf1415 	stw	r2,-944(fp)
   2c1f0:	e03f1515 	stw	zero,-940(fp)
    c += p5;
   2c1f4:	e0bf0217 	ldw	r2,-1016(fp)
   2c1f8:	e0bff215 	stw	r2,-56(fp)
   2c1fc:	e03ff315 	stw	zero,-52(fp)
   2c200:	e13f1417 	ldw	r4,-944(fp)
   2c204:	e17f1517 	ldw	r5,-940(fp)
   2c208:	e1bff217 	ldw	r6,-56(fp)
   2c20c:	2185883a 	add	r2,r4,r6
   2c210:	110d803a 	cmpltu	r6,r2,r4
   2c214:	e1fff317 	ldw	r7,-52(fp)
   2c218:	29c7883a 	add	r3,r5,r7
   2c21c:	30c9883a 	add	r4,r6,r3
   2c220:	2007883a 	mov	r3,r4
   2c224:	e0bf1415 	stw	r2,-944(fp)
   2c228:	e0ff1515 	stw	r3,-940(fp)
    r->d[5] = c & 0xFFFFFFFFUL; c >>= 32;
   2c22c:	e0ff1417 	ldw	r3,-944(fp)
   2c230:	e0bf1617 	ldw	r2,-936(fp)
   2c234:	10c00515 	stw	r3,20(r2)
   2c238:	e0bf1517 	ldw	r2,-940(fp)
   2c23c:	1004d83a 	srl	r2,r2,zero
   2c240:	e0bf1415 	stw	r2,-944(fp)
   2c244:	e03f1515 	stw	zero,-940(fp)
    c += p6;
   2c248:	e0bf0d17 	ldw	r2,-972(fp)
   2c24c:	e0bff415 	stw	r2,-48(fp)
   2c250:	e03ff515 	stw	zero,-44(fp)
   2c254:	e13f1417 	ldw	r4,-944(fp)
   2c258:	e17f1517 	ldw	r5,-940(fp)
   2c25c:	e1bff417 	ldw	r6,-48(fp)
   2c260:	2185883a 	add	r2,r4,r6
   2c264:	110d803a 	cmpltu	r6,r2,r4
   2c268:	e1fff517 	ldw	r7,-44(fp)
   2c26c:	29c7883a 	add	r3,r5,r7
   2c270:	30c9883a 	add	r4,r6,r3
   2c274:	2007883a 	mov	r3,r4
   2c278:	e0bf1415 	stw	r2,-944(fp)
   2c27c:	e0ff1515 	stw	r3,-940(fp)
    r->d[6] = c & 0xFFFFFFFFUL; c >>= 32;
   2c280:	e0ff1417 	ldw	r3,-944(fp)
   2c284:	e0bf1617 	ldw	r2,-936(fp)
   2c288:	10c00615 	stw	r3,24(r2)
   2c28c:	e0bf1517 	ldw	r2,-940(fp)
   2c290:	1004d83a 	srl	r2,r2,zero
   2c294:	e0bf1415 	stw	r2,-944(fp)
   2c298:	e03f1515 	stw	zero,-940(fp)
    c += p7;
   2c29c:	e0bf1217 	ldw	r2,-952(fp)
   2c2a0:	e0bff615 	stw	r2,-40(fp)
   2c2a4:	e03ff715 	stw	zero,-36(fp)
   2c2a8:	e13f1417 	ldw	r4,-944(fp)
   2c2ac:	e17f1517 	ldw	r5,-940(fp)
   2c2b0:	e1bff617 	ldw	r6,-40(fp)
   2c2b4:	2185883a 	add	r2,r4,r6
   2c2b8:	110d803a 	cmpltu	r6,r2,r4
   2c2bc:	e1fff717 	ldw	r7,-36(fp)
   2c2c0:	29c7883a 	add	r3,r5,r7
   2c2c4:	30c9883a 	add	r4,r6,r3
   2c2c8:	2007883a 	mov	r3,r4
   2c2cc:	e0bf1415 	stw	r2,-944(fp)
   2c2d0:	e0ff1515 	stw	r3,-940(fp)
    r->d[7] = c & 0xFFFFFFFFUL; c >>= 32;
   2c2d4:	e0ff1417 	ldw	r3,-944(fp)
   2c2d8:	e0bf1617 	ldw	r2,-936(fp)
   2c2dc:	10c00715 	stw	r3,28(r2)
   2c2e0:	e0bf1517 	ldw	r2,-940(fp)
   2c2e4:	1004d83a 	srl	r2,r2,zero
   2c2e8:	e0bf1415 	stw	r2,-944(fp)
   2c2ec:	e03f1515 	stw	zero,-940(fp)

    /* Final reduction of r. */
    secp256k1_scalar_reduce(r, c + secp256k1_scalar_check_overflow(r));
   2c2f0:	e13f1617 	ldw	r4,-936(fp)
   2c2f4:	00252080 	call	25208 <secp256k1_scalar_check_overflow>
   2c2f8:	1007883a 	mov	r3,r2
   2c2fc:	e0bf1417 	ldw	r2,-944(fp)
   2c300:	1885883a 	add	r2,r3,r2
   2c304:	100b883a 	mov	r5,r2
   2c308:	e13f1617 	ldw	r4,-936(fp)
   2c30c:	00254200 	call	25420 <secp256k1_scalar_reduce>
}
   2c310:	0001883a 	nop
   2c314:	e6fff804 	addi	sp,fp,-32
   2c318:	dfc00917 	ldw	ra,36(sp)
   2c31c:	df000817 	ldw	fp,32(sp)
   2c320:	ddc00717 	ldw	r23,28(sp)
   2c324:	dd800617 	ldw	r22,24(sp)
   2c328:	dd400517 	ldw	r21,20(sp)
   2c32c:	dd000417 	ldw	r20,16(sp)
   2c330:	dcc00317 	ldw	r19,12(sp)
   2c334:	dc800217 	ldw	r18,8(sp)
   2c338:	dc400117 	ldw	r17,4(sp)
   2c33c:	dc000017 	ldw	r16,0(sp)
   2c340:	dec00a04 	addi	sp,sp,40
   2c344:	f800283a 	ret

0002c348 <secp256k1_scalar_mul_512>:

static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar *a, const secp256k1_scalar *b) {
   2c348:	defd7b04 	addi	sp,sp,-2580
   2c34c:	dfc28415 	stw	ra,2576(sp)
   2c350:	df028315 	stw	fp,2572(sp)
   2c354:	ddc28215 	stw	r23,2568(sp)
   2c358:	dd828115 	stw	r22,2564(sp)
   2c35c:	dd428015 	stw	r21,2560(sp)
   2c360:	dd027f15 	stw	r20,2556(sp)
   2c364:	dcc27e15 	stw	r19,2552(sp)
   2c368:	dc827d15 	stw	r18,2548(sp)
   2c36c:	dc427c15 	stw	r17,2544(sp)
   2c370:	dc027b15 	stw	r16,2540(sp)
   2c374:	df028304 	addi	fp,sp,2572
   2c378:	e13e8115 	stw	r4,-1532(fp)
   2c37c:	e17e8215 	stw	r5,-1528(fp)
   2c380:	e1be8315 	stw	r6,-1524(fp)
    /* 96 bit accumulator. */
    uint32_t c0 = 0, c1 = 0, c2 = 0;
   2c384:	e03d7e15 	stw	zero,-2568(fp)
   2c388:	e03d7f15 	stw	zero,-2564(fp)
   2c38c:	e03d8015 	stw	zero,-2560(fp)

    /* l[0..15] = a[0..7] * b[0..7]. */
    muladd_fast(a->d[0], b->d[0]);
   2c390:	e0be8217 	ldw	r2,-1528(fp)
   2c394:	10800017 	ldw	r2,0(r2)
   2c398:	1013883a 	mov	r9,r2
   2c39c:	0015883a 	mov	r10,zero
   2c3a0:	e0be8317 	ldw	r2,-1524(fp)
   2c3a4:	10800017 	ldw	r2,0(r2)
   2c3a8:	100f883a 	mov	r7,r2
   2c3ac:	0011883a 	mov	r8,zero
   2c3b0:	380d883a 	mov	r6,r7
   2c3b4:	400f883a 	mov	r7,r8
   2c3b8:	4809883a 	mov	r4,r9
   2c3bc:	500b883a 	mov	r5,r10
   2c3c0:	00438e00 	call	438e0 <__muldi3>
   2c3c4:	1009883a 	mov	r4,r2
   2c3c8:	180b883a 	mov	r5,r3
   2c3cc:	e13d8115 	stw	r4,-2556(fp)
   2c3d0:	e17d8215 	stw	r5,-2552(fp)
   2c3d4:	e0bd8217 	ldw	r2,-2552(fp)
   2c3d8:	1020d83a 	srl	r16,r2,zero
   2c3dc:	0023883a 	mov	r17,zero
   2c3e0:	e43d8315 	stw	r16,-2548(fp)
   2c3e4:	e0bd8117 	ldw	r2,-2556(fp)
   2c3e8:	e0bd8415 	stw	r2,-2544(fp)
   2c3ec:	e0fd7e17 	ldw	r3,-2568(fp)
   2c3f0:	e0bd8417 	ldw	r2,-2544(fp)
   2c3f4:	1885883a 	add	r2,r3,r2
   2c3f8:	e0bd7e15 	stw	r2,-2568(fp)
   2c3fc:	e0fd7e17 	ldw	r3,-2568(fp)
   2c400:	e0bd8417 	ldw	r2,-2544(fp)
   2c404:	1880022e 	bgeu	r3,r2,2c410 <secp256k1_scalar_mul_512+0xc8>
   2c408:	00c00044 	movi	r3,1
   2c40c:	00000106 	br	2c414 <secp256k1_scalar_mul_512+0xcc>
   2c410:	0007883a 	mov	r3,zero
   2c414:	e0bd8317 	ldw	r2,-2548(fp)
   2c418:	10c5883a 	add	r2,r2,r3
   2c41c:	e0bd8315 	stw	r2,-2548(fp)
   2c420:	e0fd7f17 	ldw	r3,-2564(fp)
   2c424:	e0bd8317 	ldw	r2,-2548(fp)
   2c428:	1885883a 	add	r2,r3,r2
   2c42c:	e0bd7f15 	stw	r2,-2564(fp)
   2c430:	e0fd7f17 	ldw	r3,-2564(fp)
   2c434:	e0bd8317 	ldw	r2,-2548(fp)
   2c438:	1885803a 	cmpltu	r2,r3,r2
   2c43c:	10803fcc 	andi	r2,r2,255
   2c440:	10000d26 	beq	r2,zero,2c478 <secp256k1_scalar_mul_512+0x130>
   2c444:	d0a01617 	ldw	r2,-32680(gp)
   2c448:	10c00317 	ldw	r3,12(r2)
   2c44c:	00800174 	movhi	r2,5
   2c450:	1096b904 	addi	r2,r2,23268
   2c454:	d8800015 	stw	r2,0(sp)
   2c458:	01c07c04 	movi	r7,496
   2c45c:	01800174 	movhi	r6,5
   2c460:	31964204 	addi	r6,r6,22792
   2c464:	01400174 	movhi	r5,5
   2c468:	2951e804 	addi	r5,r5,18336
   2c46c:	1809883a 	mov	r4,r3
   2c470:	00461000 	call	46100 <fprintf>
   2c474:	0045fd40 	call	45fd4 <abort>
    extract_fast(l[0]);
   2c478:	e0fe8117 	ldw	r3,-1532(fp)
   2c47c:	e0bd7e17 	ldw	r2,-2568(fp)
   2c480:	18800015 	stw	r2,0(r3)
   2c484:	e0bd7f17 	ldw	r2,-2564(fp)
   2c488:	e0bd7e15 	stw	r2,-2568(fp)
   2c48c:	e03d7f15 	stw	zero,-2564(fp)
   2c490:	e0bd8017 	ldw	r2,-2560(fp)
   2c494:	1004c03a 	cmpne	r2,r2,zero
   2c498:	10803fcc 	andi	r2,r2,255
   2c49c:	10000d26 	beq	r2,zero,2c4d4 <secp256k1_scalar_mul_512+0x18c>
   2c4a0:	d0a01617 	ldw	r2,-32680(gp)
   2c4a4:	10c00317 	ldw	r3,12(r2)
   2c4a8:	00800174 	movhi	r2,5
   2c4ac:	1096c104 	addi	r2,r2,23300
   2c4b0:	d8800015 	stw	r2,0(sp)
   2c4b4:	01c07c44 	movi	r7,497
   2c4b8:	01800174 	movhi	r6,5
   2c4bc:	31964204 	addi	r6,r6,22792
   2c4c0:	01400174 	movhi	r5,5
   2c4c4:	2951e804 	addi	r5,r5,18336
   2c4c8:	1809883a 	mov	r4,r3
   2c4cc:	00461000 	call	46100 <fprintf>
   2c4d0:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[0], b->d[1]);
   2c4d4:	e0be8217 	ldw	r2,-1528(fp)
   2c4d8:	10800017 	ldw	r2,0(r2)
   2c4dc:	102d883a 	mov	r22,r2
   2c4e0:	002f883a 	mov	r23,zero
   2c4e4:	e0be8317 	ldw	r2,-1524(fp)
   2c4e8:	10800117 	ldw	r2,4(r2)
   2c4ec:	1029883a 	mov	r20,r2
   2c4f0:	002b883a 	mov	r21,zero
   2c4f4:	a00d883a 	mov	r6,r20
   2c4f8:	a80f883a 	mov	r7,r21
   2c4fc:	b009883a 	mov	r4,r22
   2c500:	b80b883a 	mov	r5,r23
   2c504:	00438e00 	call	438e0 <__muldi3>
   2c508:	1009883a 	mov	r4,r2
   2c50c:	180b883a 	mov	r5,r3
   2c510:	e13d8515 	stw	r4,-2540(fp)
   2c514:	e17d8615 	stw	r5,-2536(fp)
   2c518:	e0bd8617 	ldw	r2,-2536(fp)
   2c51c:	1024d83a 	srl	r18,r2,zero
   2c520:	0027883a 	mov	r19,zero
   2c524:	e4bd8715 	stw	r18,-2532(fp)
   2c528:	e0bd8517 	ldw	r2,-2540(fp)
   2c52c:	e0bd8815 	stw	r2,-2528(fp)
   2c530:	e0fd7e17 	ldw	r3,-2568(fp)
   2c534:	e0bd8817 	ldw	r2,-2528(fp)
   2c538:	1885883a 	add	r2,r3,r2
   2c53c:	e0bd7e15 	stw	r2,-2568(fp)
   2c540:	e0fd7e17 	ldw	r3,-2568(fp)
   2c544:	e0bd8817 	ldw	r2,-2528(fp)
   2c548:	1880022e 	bgeu	r3,r2,2c554 <secp256k1_scalar_mul_512+0x20c>
   2c54c:	00c00044 	movi	r3,1
   2c550:	00000106 	br	2c558 <secp256k1_scalar_mul_512+0x210>
   2c554:	0007883a 	mov	r3,zero
   2c558:	e0bd8717 	ldw	r2,-2532(fp)
   2c55c:	10c5883a 	add	r2,r2,r3
   2c560:	e0bd8715 	stw	r2,-2532(fp)
   2c564:	e0fd7f17 	ldw	r3,-2564(fp)
   2c568:	e0bd8717 	ldw	r2,-2532(fp)
   2c56c:	1885883a 	add	r2,r3,r2
   2c570:	e0bd7f15 	stw	r2,-2564(fp)
   2c574:	e0fd7f17 	ldw	r3,-2564(fp)
   2c578:	e0bd8717 	ldw	r2,-2532(fp)
   2c57c:	1880022e 	bgeu	r3,r2,2c588 <secp256k1_scalar_mul_512+0x240>
   2c580:	00c00044 	movi	r3,1
   2c584:	00000106 	br	2c58c <secp256k1_scalar_mul_512+0x244>
   2c588:	0007883a 	mov	r3,zero
   2c58c:	e0bd8017 	ldw	r2,-2560(fp)
   2c590:	10c5883a 	add	r2,r2,r3
   2c594:	e0bd8015 	stw	r2,-2560(fp)
   2c598:	e0fd7f17 	ldw	r3,-2564(fp)
   2c59c:	e0bd8717 	ldw	r2,-2532(fp)
   2c5a0:	1885803a 	cmpltu	r2,r3,r2
   2c5a4:	10803fcc 	andi	r2,r2,255
   2c5a8:	10001126 	beq	r2,zero,2c5f0 <secp256k1_scalar_mul_512+0x2a8>
   2c5ac:	e0bd8017 	ldw	r2,-2560(fp)
   2c5b0:	1005003a 	cmpeq	r2,r2,zero
   2c5b4:	10803fcc 	andi	r2,r2,255
   2c5b8:	10000d26 	beq	r2,zero,2c5f0 <secp256k1_scalar_mul_512+0x2a8>
   2c5bc:	d0a01617 	ldw	r2,-32680(gp)
   2c5c0:	10c00317 	ldw	r3,12(r2)
   2c5c4:	00800174 	movhi	r2,5
   2c5c8:	1096d604 	addi	r2,r2,23384
   2c5cc:	d8800015 	stw	r2,0(sp)
   2c5d0:	01c07c84 	movi	r7,498
   2c5d4:	01800174 	movhi	r6,5
   2c5d8:	31964204 	addi	r6,r6,22792
   2c5dc:	01400174 	movhi	r5,5
   2c5e0:	2951e804 	addi	r5,r5,18336
   2c5e4:	1809883a 	mov	r4,r3
   2c5e8:	00461000 	call	46100 <fprintf>
   2c5ec:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[1], b->d[0]);
   2c5f0:	e0be8217 	ldw	r2,-1528(fp)
   2c5f4:	10800117 	ldw	r2,4(r2)
   2c5f8:	e0be8415 	stw	r2,-1520(fp)
   2c5fc:	e03e8515 	stw	zero,-1516(fp)
   2c600:	e0be8317 	ldw	r2,-1524(fp)
   2c604:	10800017 	ldw	r2,0(r2)
   2c608:	e0be8615 	stw	r2,-1512(fp)
   2c60c:	e03e8715 	stw	zero,-1508(fp)
   2c610:	e1be8617 	ldw	r6,-1512(fp)
   2c614:	e1fe8717 	ldw	r7,-1508(fp)
   2c618:	e13e8417 	ldw	r4,-1520(fp)
   2c61c:	e17e8517 	ldw	r5,-1516(fp)
   2c620:	00438e00 	call	438e0 <__muldi3>
   2c624:	1009883a 	mov	r4,r2
   2c628:	180b883a 	mov	r5,r3
   2c62c:	e13d8915 	stw	r4,-2524(fp)
   2c630:	e17d8a15 	stw	r5,-2520(fp)
   2c634:	e0bd8a17 	ldw	r2,-2520(fp)
   2c638:	1004d83a 	srl	r2,r2,zero
   2c63c:	e0be8815 	stw	r2,-1504(fp)
   2c640:	e03e8915 	stw	zero,-1500(fp)
   2c644:	e0be8817 	ldw	r2,-1504(fp)
   2c648:	e0bd8b15 	stw	r2,-2516(fp)
   2c64c:	e0bd8917 	ldw	r2,-2524(fp)
   2c650:	e0bd8c15 	stw	r2,-2512(fp)
   2c654:	e0fd7e17 	ldw	r3,-2568(fp)
   2c658:	e0bd8c17 	ldw	r2,-2512(fp)
   2c65c:	1885883a 	add	r2,r3,r2
   2c660:	e0bd7e15 	stw	r2,-2568(fp)
   2c664:	e0fd7e17 	ldw	r3,-2568(fp)
   2c668:	e0bd8c17 	ldw	r2,-2512(fp)
   2c66c:	1880022e 	bgeu	r3,r2,2c678 <secp256k1_scalar_mul_512+0x330>
   2c670:	00c00044 	movi	r3,1
   2c674:	00000106 	br	2c67c <secp256k1_scalar_mul_512+0x334>
   2c678:	0007883a 	mov	r3,zero
   2c67c:	e0bd8b17 	ldw	r2,-2516(fp)
   2c680:	10c5883a 	add	r2,r2,r3
   2c684:	e0bd8b15 	stw	r2,-2516(fp)
   2c688:	e0fd7f17 	ldw	r3,-2564(fp)
   2c68c:	e0bd8b17 	ldw	r2,-2516(fp)
   2c690:	1885883a 	add	r2,r3,r2
   2c694:	e0bd7f15 	stw	r2,-2564(fp)
   2c698:	e0fd7f17 	ldw	r3,-2564(fp)
   2c69c:	e0bd8b17 	ldw	r2,-2516(fp)
   2c6a0:	1880022e 	bgeu	r3,r2,2c6ac <secp256k1_scalar_mul_512+0x364>
   2c6a4:	00c00044 	movi	r3,1
   2c6a8:	00000106 	br	2c6b0 <secp256k1_scalar_mul_512+0x368>
   2c6ac:	0007883a 	mov	r3,zero
   2c6b0:	e0bd8017 	ldw	r2,-2560(fp)
   2c6b4:	10c5883a 	add	r2,r2,r3
   2c6b8:	e0bd8015 	stw	r2,-2560(fp)
   2c6bc:	e0fd7f17 	ldw	r3,-2564(fp)
   2c6c0:	e0bd8b17 	ldw	r2,-2516(fp)
   2c6c4:	1885803a 	cmpltu	r2,r3,r2
   2c6c8:	10803fcc 	andi	r2,r2,255
   2c6cc:	10001126 	beq	r2,zero,2c714 <secp256k1_scalar_mul_512+0x3cc>
   2c6d0:	e0bd8017 	ldw	r2,-2560(fp)
   2c6d4:	1005003a 	cmpeq	r2,r2,zero
   2c6d8:	10803fcc 	andi	r2,r2,255
   2c6dc:	10000d26 	beq	r2,zero,2c714 <secp256k1_scalar_mul_512+0x3cc>
   2c6e0:	d0a01617 	ldw	r2,-32680(gp)
   2c6e4:	10c00317 	ldw	r3,12(r2)
   2c6e8:	00800174 	movhi	r2,5
   2c6ec:	1096d604 	addi	r2,r2,23384
   2c6f0:	d8800015 	stw	r2,0(sp)
   2c6f4:	01c07cc4 	movi	r7,499
   2c6f8:	01800174 	movhi	r6,5
   2c6fc:	31964204 	addi	r6,r6,22792
   2c700:	01400174 	movhi	r5,5
   2c704:	2951e804 	addi	r5,r5,18336
   2c708:	1809883a 	mov	r4,r3
   2c70c:	00461000 	call	46100 <fprintf>
   2c710:	0045fd40 	call	45fd4 <abort>
    extract(l[1]);
   2c714:	e0be8117 	ldw	r2,-1532(fp)
   2c718:	10c00104 	addi	r3,r2,4
   2c71c:	e0bd7e17 	ldw	r2,-2568(fp)
   2c720:	18800015 	stw	r2,0(r3)
   2c724:	e0bd7f17 	ldw	r2,-2564(fp)
   2c728:	e0bd7e15 	stw	r2,-2568(fp)
   2c72c:	e0bd8017 	ldw	r2,-2560(fp)
   2c730:	e0bd7f15 	stw	r2,-2564(fp)
   2c734:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[2]);
   2c738:	e0be8217 	ldw	r2,-1528(fp)
   2c73c:	10800017 	ldw	r2,0(r2)
   2c740:	e0be8a15 	stw	r2,-1496(fp)
   2c744:	e03e8b15 	stw	zero,-1492(fp)
   2c748:	e0be8317 	ldw	r2,-1524(fp)
   2c74c:	10800217 	ldw	r2,8(r2)
   2c750:	e0be8c15 	stw	r2,-1488(fp)
   2c754:	e03e8d15 	stw	zero,-1484(fp)
   2c758:	e1be8c17 	ldw	r6,-1488(fp)
   2c75c:	e1fe8d17 	ldw	r7,-1484(fp)
   2c760:	e13e8a17 	ldw	r4,-1496(fp)
   2c764:	e17e8b17 	ldw	r5,-1492(fp)
   2c768:	00438e00 	call	438e0 <__muldi3>
   2c76c:	1009883a 	mov	r4,r2
   2c770:	180b883a 	mov	r5,r3
   2c774:	e13d8d15 	stw	r4,-2508(fp)
   2c778:	e17d8e15 	stw	r5,-2504(fp)
   2c77c:	e0bd8e17 	ldw	r2,-2504(fp)
   2c780:	1004d83a 	srl	r2,r2,zero
   2c784:	e0be8e15 	stw	r2,-1480(fp)
   2c788:	e03e8f15 	stw	zero,-1476(fp)
   2c78c:	e0be8e17 	ldw	r2,-1480(fp)
   2c790:	e0bd8f15 	stw	r2,-2500(fp)
   2c794:	e0bd8d17 	ldw	r2,-2508(fp)
   2c798:	e0bd9015 	stw	r2,-2496(fp)
   2c79c:	e0fd7e17 	ldw	r3,-2568(fp)
   2c7a0:	e0bd9017 	ldw	r2,-2496(fp)
   2c7a4:	1885883a 	add	r2,r3,r2
   2c7a8:	e0bd7e15 	stw	r2,-2568(fp)
   2c7ac:	e0fd7e17 	ldw	r3,-2568(fp)
   2c7b0:	e0bd9017 	ldw	r2,-2496(fp)
   2c7b4:	1880022e 	bgeu	r3,r2,2c7c0 <secp256k1_scalar_mul_512+0x478>
   2c7b8:	00c00044 	movi	r3,1
   2c7bc:	00000106 	br	2c7c4 <secp256k1_scalar_mul_512+0x47c>
   2c7c0:	0007883a 	mov	r3,zero
   2c7c4:	e0bd8f17 	ldw	r2,-2500(fp)
   2c7c8:	10c5883a 	add	r2,r2,r3
   2c7cc:	e0bd8f15 	stw	r2,-2500(fp)
   2c7d0:	e0fd7f17 	ldw	r3,-2564(fp)
   2c7d4:	e0bd8f17 	ldw	r2,-2500(fp)
   2c7d8:	1885883a 	add	r2,r3,r2
   2c7dc:	e0bd7f15 	stw	r2,-2564(fp)
   2c7e0:	e0fd7f17 	ldw	r3,-2564(fp)
   2c7e4:	e0bd8f17 	ldw	r2,-2500(fp)
   2c7e8:	1880022e 	bgeu	r3,r2,2c7f4 <secp256k1_scalar_mul_512+0x4ac>
   2c7ec:	00c00044 	movi	r3,1
   2c7f0:	00000106 	br	2c7f8 <secp256k1_scalar_mul_512+0x4b0>
   2c7f4:	0007883a 	mov	r3,zero
   2c7f8:	e0bd8017 	ldw	r2,-2560(fp)
   2c7fc:	10c5883a 	add	r2,r2,r3
   2c800:	e0bd8015 	stw	r2,-2560(fp)
   2c804:	e0fd7f17 	ldw	r3,-2564(fp)
   2c808:	e0bd8f17 	ldw	r2,-2500(fp)
   2c80c:	1885803a 	cmpltu	r2,r3,r2
   2c810:	10803fcc 	andi	r2,r2,255
   2c814:	10001126 	beq	r2,zero,2c85c <secp256k1_scalar_mul_512+0x514>
   2c818:	e0bd8017 	ldw	r2,-2560(fp)
   2c81c:	1005003a 	cmpeq	r2,r2,zero
   2c820:	10803fcc 	andi	r2,r2,255
   2c824:	10000d26 	beq	r2,zero,2c85c <secp256k1_scalar_mul_512+0x514>
   2c828:	d0a01617 	ldw	r2,-32680(gp)
   2c82c:	10c00317 	ldw	r3,12(r2)
   2c830:	00800174 	movhi	r2,5
   2c834:	1096d604 	addi	r2,r2,23384
   2c838:	d8800015 	stw	r2,0(sp)
   2c83c:	01c07d44 	movi	r7,501
   2c840:	01800174 	movhi	r6,5
   2c844:	31964204 	addi	r6,r6,22792
   2c848:	01400174 	movhi	r5,5
   2c84c:	2951e804 	addi	r5,r5,18336
   2c850:	1809883a 	mov	r4,r3
   2c854:	00461000 	call	46100 <fprintf>
   2c858:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[1], b->d[1]);
   2c85c:	e0be8217 	ldw	r2,-1528(fp)
   2c860:	10800117 	ldw	r2,4(r2)
   2c864:	e0be9015 	stw	r2,-1472(fp)
   2c868:	e03e9115 	stw	zero,-1468(fp)
   2c86c:	e0be8317 	ldw	r2,-1524(fp)
   2c870:	10800117 	ldw	r2,4(r2)
   2c874:	e0be9215 	stw	r2,-1464(fp)
   2c878:	e03e9315 	stw	zero,-1460(fp)
   2c87c:	e1be9217 	ldw	r6,-1464(fp)
   2c880:	e1fe9317 	ldw	r7,-1460(fp)
   2c884:	e13e9017 	ldw	r4,-1472(fp)
   2c888:	e17e9117 	ldw	r5,-1468(fp)
   2c88c:	00438e00 	call	438e0 <__muldi3>
   2c890:	1009883a 	mov	r4,r2
   2c894:	180b883a 	mov	r5,r3
   2c898:	e13d9115 	stw	r4,-2492(fp)
   2c89c:	e17d9215 	stw	r5,-2488(fp)
   2c8a0:	e0bd9217 	ldw	r2,-2488(fp)
   2c8a4:	1004d83a 	srl	r2,r2,zero
   2c8a8:	e0be9415 	stw	r2,-1456(fp)
   2c8ac:	e03e9515 	stw	zero,-1452(fp)
   2c8b0:	e0be9417 	ldw	r2,-1456(fp)
   2c8b4:	e0bd9315 	stw	r2,-2484(fp)
   2c8b8:	e0bd9117 	ldw	r2,-2492(fp)
   2c8bc:	e0bd9415 	stw	r2,-2480(fp)
   2c8c0:	e0fd7e17 	ldw	r3,-2568(fp)
   2c8c4:	e0bd9417 	ldw	r2,-2480(fp)
   2c8c8:	1885883a 	add	r2,r3,r2
   2c8cc:	e0bd7e15 	stw	r2,-2568(fp)
   2c8d0:	e0fd7e17 	ldw	r3,-2568(fp)
   2c8d4:	e0bd9417 	ldw	r2,-2480(fp)
   2c8d8:	1880022e 	bgeu	r3,r2,2c8e4 <secp256k1_scalar_mul_512+0x59c>
   2c8dc:	00c00044 	movi	r3,1
   2c8e0:	00000106 	br	2c8e8 <secp256k1_scalar_mul_512+0x5a0>
   2c8e4:	0007883a 	mov	r3,zero
   2c8e8:	e0bd9317 	ldw	r2,-2484(fp)
   2c8ec:	10c5883a 	add	r2,r2,r3
   2c8f0:	e0bd9315 	stw	r2,-2484(fp)
   2c8f4:	e0fd7f17 	ldw	r3,-2564(fp)
   2c8f8:	e0bd9317 	ldw	r2,-2484(fp)
   2c8fc:	1885883a 	add	r2,r3,r2
   2c900:	e0bd7f15 	stw	r2,-2564(fp)
   2c904:	e0fd7f17 	ldw	r3,-2564(fp)
   2c908:	e0bd9317 	ldw	r2,-2484(fp)
   2c90c:	1880022e 	bgeu	r3,r2,2c918 <secp256k1_scalar_mul_512+0x5d0>
   2c910:	00c00044 	movi	r3,1
   2c914:	00000106 	br	2c91c <secp256k1_scalar_mul_512+0x5d4>
   2c918:	0007883a 	mov	r3,zero
   2c91c:	e0bd8017 	ldw	r2,-2560(fp)
   2c920:	10c5883a 	add	r2,r2,r3
   2c924:	e0bd8015 	stw	r2,-2560(fp)
   2c928:	e0fd7f17 	ldw	r3,-2564(fp)
   2c92c:	e0bd9317 	ldw	r2,-2484(fp)
   2c930:	1885803a 	cmpltu	r2,r3,r2
   2c934:	10803fcc 	andi	r2,r2,255
   2c938:	10001126 	beq	r2,zero,2c980 <secp256k1_scalar_mul_512+0x638>
   2c93c:	e0bd8017 	ldw	r2,-2560(fp)
   2c940:	1005003a 	cmpeq	r2,r2,zero
   2c944:	10803fcc 	andi	r2,r2,255
   2c948:	10000d26 	beq	r2,zero,2c980 <secp256k1_scalar_mul_512+0x638>
   2c94c:	d0a01617 	ldw	r2,-32680(gp)
   2c950:	10c00317 	ldw	r3,12(r2)
   2c954:	00800174 	movhi	r2,5
   2c958:	1096d604 	addi	r2,r2,23384
   2c95c:	d8800015 	stw	r2,0(sp)
   2c960:	01c07d84 	movi	r7,502
   2c964:	01800174 	movhi	r6,5
   2c968:	31964204 	addi	r6,r6,22792
   2c96c:	01400174 	movhi	r5,5
   2c970:	2951e804 	addi	r5,r5,18336
   2c974:	1809883a 	mov	r4,r3
   2c978:	00461000 	call	46100 <fprintf>
   2c97c:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[2], b->d[0]);
   2c980:	e0be8217 	ldw	r2,-1528(fp)
   2c984:	10800217 	ldw	r2,8(r2)
   2c988:	e0be9615 	stw	r2,-1448(fp)
   2c98c:	e03e9715 	stw	zero,-1444(fp)
   2c990:	e0be8317 	ldw	r2,-1524(fp)
   2c994:	10800017 	ldw	r2,0(r2)
   2c998:	e0be9815 	stw	r2,-1440(fp)
   2c99c:	e03e9915 	stw	zero,-1436(fp)
   2c9a0:	e1be9817 	ldw	r6,-1440(fp)
   2c9a4:	e1fe9917 	ldw	r7,-1436(fp)
   2c9a8:	e13e9617 	ldw	r4,-1448(fp)
   2c9ac:	e17e9717 	ldw	r5,-1444(fp)
   2c9b0:	00438e00 	call	438e0 <__muldi3>
   2c9b4:	1009883a 	mov	r4,r2
   2c9b8:	180b883a 	mov	r5,r3
   2c9bc:	e13d9515 	stw	r4,-2476(fp)
   2c9c0:	e17d9615 	stw	r5,-2472(fp)
   2c9c4:	e0bd9617 	ldw	r2,-2472(fp)
   2c9c8:	1004d83a 	srl	r2,r2,zero
   2c9cc:	e0be9a15 	stw	r2,-1432(fp)
   2c9d0:	e03e9b15 	stw	zero,-1428(fp)
   2c9d4:	e0be9a17 	ldw	r2,-1432(fp)
   2c9d8:	e0bd9715 	stw	r2,-2468(fp)
   2c9dc:	e0bd9517 	ldw	r2,-2476(fp)
   2c9e0:	e0bd9815 	stw	r2,-2464(fp)
   2c9e4:	e0fd7e17 	ldw	r3,-2568(fp)
   2c9e8:	e0bd9817 	ldw	r2,-2464(fp)
   2c9ec:	1885883a 	add	r2,r3,r2
   2c9f0:	e0bd7e15 	stw	r2,-2568(fp)
   2c9f4:	e0fd7e17 	ldw	r3,-2568(fp)
   2c9f8:	e0bd9817 	ldw	r2,-2464(fp)
   2c9fc:	1880022e 	bgeu	r3,r2,2ca08 <secp256k1_scalar_mul_512+0x6c0>
   2ca00:	00c00044 	movi	r3,1
   2ca04:	00000106 	br	2ca0c <secp256k1_scalar_mul_512+0x6c4>
   2ca08:	0007883a 	mov	r3,zero
   2ca0c:	e0bd9717 	ldw	r2,-2468(fp)
   2ca10:	10c5883a 	add	r2,r2,r3
   2ca14:	e0bd9715 	stw	r2,-2468(fp)
   2ca18:	e0fd7f17 	ldw	r3,-2564(fp)
   2ca1c:	e0bd9717 	ldw	r2,-2468(fp)
   2ca20:	1885883a 	add	r2,r3,r2
   2ca24:	e0bd7f15 	stw	r2,-2564(fp)
   2ca28:	e0fd7f17 	ldw	r3,-2564(fp)
   2ca2c:	e0bd9717 	ldw	r2,-2468(fp)
   2ca30:	1880022e 	bgeu	r3,r2,2ca3c <secp256k1_scalar_mul_512+0x6f4>
   2ca34:	00c00044 	movi	r3,1
   2ca38:	00000106 	br	2ca40 <secp256k1_scalar_mul_512+0x6f8>
   2ca3c:	0007883a 	mov	r3,zero
   2ca40:	e0bd8017 	ldw	r2,-2560(fp)
   2ca44:	10c5883a 	add	r2,r2,r3
   2ca48:	e0bd8015 	stw	r2,-2560(fp)
   2ca4c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ca50:	e0bd9717 	ldw	r2,-2468(fp)
   2ca54:	1885803a 	cmpltu	r2,r3,r2
   2ca58:	10803fcc 	andi	r2,r2,255
   2ca5c:	10001126 	beq	r2,zero,2caa4 <secp256k1_scalar_mul_512+0x75c>
   2ca60:	e0bd8017 	ldw	r2,-2560(fp)
   2ca64:	1005003a 	cmpeq	r2,r2,zero
   2ca68:	10803fcc 	andi	r2,r2,255
   2ca6c:	10000d26 	beq	r2,zero,2caa4 <secp256k1_scalar_mul_512+0x75c>
   2ca70:	d0a01617 	ldw	r2,-32680(gp)
   2ca74:	10c00317 	ldw	r3,12(r2)
   2ca78:	00800174 	movhi	r2,5
   2ca7c:	1096d604 	addi	r2,r2,23384
   2ca80:	d8800015 	stw	r2,0(sp)
   2ca84:	01c07dc4 	movi	r7,503
   2ca88:	01800174 	movhi	r6,5
   2ca8c:	31964204 	addi	r6,r6,22792
   2ca90:	01400174 	movhi	r5,5
   2ca94:	2951e804 	addi	r5,r5,18336
   2ca98:	1809883a 	mov	r4,r3
   2ca9c:	00461000 	call	46100 <fprintf>
   2caa0:	0045fd40 	call	45fd4 <abort>
    extract(l[2]);
   2caa4:	e0be8117 	ldw	r2,-1532(fp)
   2caa8:	10c00204 	addi	r3,r2,8
   2caac:	e0bd7e17 	ldw	r2,-2568(fp)
   2cab0:	18800015 	stw	r2,0(r3)
   2cab4:	e0bd7f17 	ldw	r2,-2564(fp)
   2cab8:	e0bd7e15 	stw	r2,-2568(fp)
   2cabc:	e0bd8017 	ldw	r2,-2560(fp)
   2cac0:	e0bd7f15 	stw	r2,-2564(fp)
   2cac4:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[3]);
   2cac8:	e0be8217 	ldw	r2,-1528(fp)
   2cacc:	10800017 	ldw	r2,0(r2)
   2cad0:	e0be9c15 	stw	r2,-1424(fp)
   2cad4:	e03e9d15 	stw	zero,-1420(fp)
   2cad8:	e0be8317 	ldw	r2,-1524(fp)
   2cadc:	10800317 	ldw	r2,12(r2)
   2cae0:	e0be9e15 	stw	r2,-1416(fp)
   2cae4:	e03e9f15 	stw	zero,-1412(fp)
   2cae8:	e1be9e17 	ldw	r6,-1416(fp)
   2caec:	e1fe9f17 	ldw	r7,-1412(fp)
   2caf0:	e13e9c17 	ldw	r4,-1424(fp)
   2caf4:	e17e9d17 	ldw	r5,-1420(fp)
   2caf8:	00438e00 	call	438e0 <__muldi3>
   2cafc:	1009883a 	mov	r4,r2
   2cb00:	180b883a 	mov	r5,r3
   2cb04:	e13d9915 	stw	r4,-2460(fp)
   2cb08:	e17d9a15 	stw	r5,-2456(fp)
   2cb0c:	e0bd9a17 	ldw	r2,-2456(fp)
   2cb10:	1004d83a 	srl	r2,r2,zero
   2cb14:	e0bea015 	stw	r2,-1408(fp)
   2cb18:	e03ea115 	stw	zero,-1404(fp)
   2cb1c:	e0bea017 	ldw	r2,-1408(fp)
   2cb20:	e0bd9b15 	stw	r2,-2452(fp)
   2cb24:	e0bd9917 	ldw	r2,-2460(fp)
   2cb28:	e0bd9c15 	stw	r2,-2448(fp)
   2cb2c:	e0fd7e17 	ldw	r3,-2568(fp)
   2cb30:	e0bd9c17 	ldw	r2,-2448(fp)
   2cb34:	1885883a 	add	r2,r3,r2
   2cb38:	e0bd7e15 	stw	r2,-2568(fp)
   2cb3c:	e0fd7e17 	ldw	r3,-2568(fp)
   2cb40:	e0bd9c17 	ldw	r2,-2448(fp)
   2cb44:	1880022e 	bgeu	r3,r2,2cb50 <secp256k1_scalar_mul_512+0x808>
   2cb48:	00c00044 	movi	r3,1
   2cb4c:	00000106 	br	2cb54 <secp256k1_scalar_mul_512+0x80c>
   2cb50:	0007883a 	mov	r3,zero
   2cb54:	e0bd9b17 	ldw	r2,-2452(fp)
   2cb58:	10c5883a 	add	r2,r2,r3
   2cb5c:	e0bd9b15 	stw	r2,-2452(fp)
   2cb60:	e0fd7f17 	ldw	r3,-2564(fp)
   2cb64:	e0bd9b17 	ldw	r2,-2452(fp)
   2cb68:	1885883a 	add	r2,r3,r2
   2cb6c:	e0bd7f15 	stw	r2,-2564(fp)
   2cb70:	e0fd7f17 	ldw	r3,-2564(fp)
   2cb74:	e0bd9b17 	ldw	r2,-2452(fp)
   2cb78:	1880022e 	bgeu	r3,r2,2cb84 <secp256k1_scalar_mul_512+0x83c>
   2cb7c:	00c00044 	movi	r3,1
   2cb80:	00000106 	br	2cb88 <secp256k1_scalar_mul_512+0x840>
   2cb84:	0007883a 	mov	r3,zero
   2cb88:	e0bd8017 	ldw	r2,-2560(fp)
   2cb8c:	10c5883a 	add	r2,r2,r3
   2cb90:	e0bd8015 	stw	r2,-2560(fp)
   2cb94:	e0fd7f17 	ldw	r3,-2564(fp)
   2cb98:	e0bd9b17 	ldw	r2,-2452(fp)
   2cb9c:	1885803a 	cmpltu	r2,r3,r2
   2cba0:	10803fcc 	andi	r2,r2,255
   2cba4:	10001126 	beq	r2,zero,2cbec <secp256k1_scalar_mul_512+0x8a4>
   2cba8:	e0bd8017 	ldw	r2,-2560(fp)
   2cbac:	1005003a 	cmpeq	r2,r2,zero
   2cbb0:	10803fcc 	andi	r2,r2,255
   2cbb4:	10000d26 	beq	r2,zero,2cbec <secp256k1_scalar_mul_512+0x8a4>
   2cbb8:	d0a01617 	ldw	r2,-32680(gp)
   2cbbc:	10c00317 	ldw	r3,12(r2)
   2cbc0:	00800174 	movhi	r2,5
   2cbc4:	1096d604 	addi	r2,r2,23384
   2cbc8:	d8800015 	stw	r2,0(sp)
   2cbcc:	01c07e44 	movi	r7,505
   2cbd0:	01800174 	movhi	r6,5
   2cbd4:	31964204 	addi	r6,r6,22792
   2cbd8:	01400174 	movhi	r5,5
   2cbdc:	2951e804 	addi	r5,r5,18336
   2cbe0:	1809883a 	mov	r4,r3
   2cbe4:	00461000 	call	46100 <fprintf>
   2cbe8:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[1], b->d[2]);
   2cbec:	e0be8217 	ldw	r2,-1528(fp)
   2cbf0:	10800117 	ldw	r2,4(r2)
   2cbf4:	e0bea215 	stw	r2,-1400(fp)
   2cbf8:	e03ea315 	stw	zero,-1396(fp)
   2cbfc:	e0be8317 	ldw	r2,-1524(fp)
   2cc00:	10800217 	ldw	r2,8(r2)
   2cc04:	e0bea415 	stw	r2,-1392(fp)
   2cc08:	e03ea515 	stw	zero,-1388(fp)
   2cc0c:	e1bea417 	ldw	r6,-1392(fp)
   2cc10:	e1fea517 	ldw	r7,-1388(fp)
   2cc14:	e13ea217 	ldw	r4,-1400(fp)
   2cc18:	e17ea317 	ldw	r5,-1396(fp)
   2cc1c:	00438e00 	call	438e0 <__muldi3>
   2cc20:	1009883a 	mov	r4,r2
   2cc24:	180b883a 	mov	r5,r3
   2cc28:	e13d9d15 	stw	r4,-2444(fp)
   2cc2c:	e17d9e15 	stw	r5,-2440(fp)
   2cc30:	e0bd9e17 	ldw	r2,-2440(fp)
   2cc34:	1004d83a 	srl	r2,r2,zero
   2cc38:	e0bea615 	stw	r2,-1384(fp)
   2cc3c:	e03ea715 	stw	zero,-1380(fp)
   2cc40:	e0bea617 	ldw	r2,-1384(fp)
   2cc44:	e0bd9f15 	stw	r2,-2436(fp)
   2cc48:	e0bd9d17 	ldw	r2,-2444(fp)
   2cc4c:	e0bda015 	stw	r2,-2432(fp)
   2cc50:	e0fd7e17 	ldw	r3,-2568(fp)
   2cc54:	e0bda017 	ldw	r2,-2432(fp)
   2cc58:	1885883a 	add	r2,r3,r2
   2cc5c:	e0bd7e15 	stw	r2,-2568(fp)
   2cc60:	e0fd7e17 	ldw	r3,-2568(fp)
   2cc64:	e0bda017 	ldw	r2,-2432(fp)
   2cc68:	1880022e 	bgeu	r3,r2,2cc74 <secp256k1_scalar_mul_512+0x92c>
   2cc6c:	00c00044 	movi	r3,1
   2cc70:	00000106 	br	2cc78 <secp256k1_scalar_mul_512+0x930>
   2cc74:	0007883a 	mov	r3,zero
   2cc78:	e0bd9f17 	ldw	r2,-2436(fp)
   2cc7c:	10c5883a 	add	r2,r2,r3
   2cc80:	e0bd9f15 	stw	r2,-2436(fp)
   2cc84:	e0fd7f17 	ldw	r3,-2564(fp)
   2cc88:	e0bd9f17 	ldw	r2,-2436(fp)
   2cc8c:	1885883a 	add	r2,r3,r2
   2cc90:	e0bd7f15 	stw	r2,-2564(fp)
   2cc94:	e0fd7f17 	ldw	r3,-2564(fp)
   2cc98:	e0bd9f17 	ldw	r2,-2436(fp)
   2cc9c:	1880022e 	bgeu	r3,r2,2cca8 <secp256k1_scalar_mul_512+0x960>
   2cca0:	00c00044 	movi	r3,1
   2cca4:	00000106 	br	2ccac <secp256k1_scalar_mul_512+0x964>
   2cca8:	0007883a 	mov	r3,zero
   2ccac:	e0bd8017 	ldw	r2,-2560(fp)
   2ccb0:	10c5883a 	add	r2,r2,r3
   2ccb4:	e0bd8015 	stw	r2,-2560(fp)
   2ccb8:	e0fd7f17 	ldw	r3,-2564(fp)
   2ccbc:	e0bd9f17 	ldw	r2,-2436(fp)
   2ccc0:	1885803a 	cmpltu	r2,r3,r2
   2ccc4:	10803fcc 	andi	r2,r2,255
   2ccc8:	10001126 	beq	r2,zero,2cd10 <secp256k1_scalar_mul_512+0x9c8>
   2cccc:	e0bd8017 	ldw	r2,-2560(fp)
   2ccd0:	1005003a 	cmpeq	r2,r2,zero
   2ccd4:	10803fcc 	andi	r2,r2,255
   2ccd8:	10000d26 	beq	r2,zero,2cd10 <secp256k1_scalar_mul_512+0x9c8>
   2ccdc:	d0a01617 	ldw	r2,-32680(gp)
   2cce0:	10c00317 	ldw	r3,12(r2)
   2cce4:	00800174 	movhi	r2,5
   2cce8:	1096d604 	addi	r2,r2,23384
   2ccec:	d8800015 	stw	r2,0(sp)
   2ccf0:	01c07e84 	movi	r7,506
   2ccf4:	01800174 	movhi	r6,5
   2ccf8:	31964204 	addi	r6,r6,22792
   2ccfc:	01400174 	movhi	r5,5
   2cd00:	2951e804 	addi	r5,r5,18336
   2cd04:	1809883a 	mov	r4,r3
   2cd08:	00461000 	call	46100 <fprintf>
   2cd0c:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[2], b->d[1]);
   2cd10:	e0be8217 	ldw	r2,-1528(fp)
   2cd14:	10800217 	ldw	r2,8(r2)
   2cd18:	e0bea815 	stw	r2,-1376(fp)
   2cd1c:	e03ea915 	stw	zero,-1372(fp)
   2cd20:	e0be8317 	ldw	r2,-1524(fp)
   2cd24:	10800117 	ldw	r2,4(r2)
   2cd28:	e0beaa15 	stw	r2,-1368(fp)
   2cd2c:	e03eab15 	stw	zero,-1364(fp)
   2cd30:	e1beaa17 	ldw	r6,-1368(fp)
   2cd34:	e1feab17 	ldw	r7,-1364(fp)
   2cd38:	e13ea817 	ldw	r4,-1376(fp)
   2cd3c:	e17ea917 	ldw	r5,-1372(fp)
   2cd40:	00438e00 	call	438e0 <__muldi3>
   2cd44:	1009883a 	mov	r4,r2
   2cd48:	180b883a 	mov	r5,r3
   2cd4c:	e13da115 	stw	r4,-2428(fp)
   2cd50:	e17da215 	stw	r5,-2424(fp)
   2cd54:	e0bda217 	ldw	r2,-2424(fp)
   2cd58:	1004d83a 	srl	r2,r2,zero
   2cd5c:	e0beac15 	stw	r2,-1360(fp)
   2cd60:	e03ead15 	stw	zero,-1356(fp)
   2cd64:	e0beac17 	ldw	r2,-1360(fp)
   2cd68:	e0bda315 	stw	r2,-2420(fp)
   2cd6c:	e0bda117 	ldw	r2,-2428(fp)
   2cd70:	e0bda415 	stw	r2,-2416(fp)
   2cd74:	e0fd7e17 	ldw	r3,-2568(fp)
   2cd78:	e0bda417 	ldw	r2,-2416(fp)
   2cd7c:	1885883a 	add	r2,r3,r2
   2cd80:	e0bd7e15 	stw	r2,-2568(fp)
   2cd84:	e0fd7e17 	ldw	r3,-2568(fp)
   2cd88:	e0bda417 	ldw	r2,-2416(fp)
   2cd8c:	1880022e 	bgeu	r3,r2,2cd98 <secp256k1_scalar_mul_512+0xa50>
   2cd90:	00c00044 	movi	r3,1
   2cd94:	00000106 	br	2cd9c <secp256k1_scalar_mul_512+0xa54>
   2cd98:	0007883a 	mov	r3,zero
   2cd9c:	e0bda317 	ldw	r2,-2420(fp)
   2cda0:	10c5883a 	add	r2,r2,r3
   2cda4:	e0bda315 	stw	r2,-2420(fp)
   2cda8:	e0fd7f17 	ldw	r3,-2564(fp)
   2cdac:	e0bda317 	ldw	r2,-2420(fp)
   2cdb0:	1885883a 	add	r2,r3,r2
   2cdb4:	e0bd7f15 	stw	r2,-2564(fp)
   2cdb8:	e0fd7f17 	ldw	r3,-2564(fp)
   2cdbc:	e0bda317 	ldw	r2,-2420(fp)
   2cdc0:	1880022e 	bgeu	r3,r2,2cdcc <secp256k1_scalar_mul_512+0xa84>
   2cdc4:	00c00044 	movi	r3,1
   2cdc8:	00000106 	br	2cdd0 <secp256k1_scalar_mul_512+0xa88>
   2cdcc:	0007883a 	mov	r3,zero
   2cdd0:	e0bd8017 	ldw	r2,-2560(fp)
   2cdd4:	10c5883a 	add	r2,r2,r3
   2cdd8:	e0bd8015 	stw	r2,-2560(fp)
   2cddc:	e0fd7f17 	ldw	r3,-2564(fp)
   2cde0:	e0bda317 	ldw	r2,-2420(fp)
   2cde4:	1885803a 	cmpltu	r2,r3,r2
   2cde8:	10803fcc 	andi	r2,r2,255
   2cdec:	10001126 	beq	r2,zero,2ce34 <secp256k1_scalar_mul_512+0xaec>
   2cdf0:	e0bd8017 	ldw	r2,-2560(fp)
   2cdf4:	1005003a 	cmpeq	r2,r2,zero
   2cdf8:	10803fcc 	andi	r2,r2,255
   2cdfc:	10000d26 	beq	r2,zero,2ce34 <secp256k1_scalar_mul_512+0xaec>
   2ce00:	d0a01617 	ldw	r2,-32680(gp)
   2ce04:	10c00317 	ldw	r3,12(r2)
   2ce08:	00800174 	movhi	r2,5
   2ce0c:	1096d604 	addi	r2,r2,23384
   2ce10:	d8800015 	stw	r2,0(sp)
   2ce14:	01c07ec4 	movi	r7,507
   2ce18:	01800174 	movhi	r6,5
   2ce1c:	31964204 	addi	r6,r6,22792
   2ce20:	01400174 	movhi	r5,5
   2ce24:	2951e804 	addi	r5,r5,18336
   2ce28:	1809883a 	mov	r4,r3
   2ce2c:	00461000 	call	46100 <fprintf>
   2ce30:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[3], b->d[0]);
   2ce34:	e0be8217 	ldw	r2,-1528(fp)
   2ce38:	10800317 	ldw	r2,12(r2)
   2ce3c:	e0beae15 	stw	r2,-1352(fp)
   2ce40:	e03eaf15 	stw	zero,-1348(fp)
   2ce44:	e0be8317 	ldw	r2,-1524(fp)
   2ce48:	10800017 	ldw	r2,0(r2)
   2ce4c:	e0beb015 	stw	r2,-1344(fp)
   2ce50:	e03eb115 	stw	zero,-1340(fp)
   2ce54:	e1beb017 	ldw	r6,-1344(fp)
   2ce58:	e1feb117 	ldw	r7,-1340(fp)
   2ce5c:	e13eae17 	ldw	r4,-1352(fp)
   2ce60:	e17eaf17 	ldw	r5,-1348(fp)
   2ce64:	00438e00 	call	438e0 <__muldi3>
   2ce68:	1009883a 	mov	r4,r2
   2ce6c:	180b883a 	mov	r5,r3
   2ce70:	e13da515 	stw	r4,-2412(fp)
   2ce74:	e17da615 	stw	r5,-2408(fp)
   2ce78:	e0bda617 	ldw	r2,-2408(fp)
   2ce7c:	1004d83a 	srl	r2,r2,zero
   2ce80:	e0beb215 	stw	r2,-1336(fp)
   2ce84:	e03eb315 	stw	zero,-1332(fp)
   2ce88:	e0beb217 	ldw	r2,-1336(fp)
   2ce8c:	e0bda715 	stw	r2,-2404(fp)
   2ce90:	e0bda517 	ldw	r2,-2412(fp)
   2ce94:	e0bda815 	stw	r2,-2400(fp)
   2ce98:	e0fd7e17 	ldw	r3,-2568(fp)
   2ce9c:	e0bda817 	ldw	r2,-2400(fp)
   2cea0:	1885883a 	add	r2,r3,r2
   2cea4:	e0bd7e15 	stw	r2,-2568(fp)
   2cea8:	e0fd7e17 	ldw	r3,-2568(fp)
   2ceac:	e0bda817 	ldw	r2,-2400(fp)
   2ceb0:	1880022e 	bgeu	r3,r2,2cebc <secp256k1_scalar_mul_512+0xb74>
   2ceb4:	00c00044 	movi	r3,1
   2ceb8:	00000106 	br	2cec0 <secp256k1_scalar_mul_512+0xb78>
   2cebc:	0007883a 	mov	r3,zero
   2cec0:	e0bda717 	ldw	r2,-2404(fp)
   2cec4:	10c5883a 	add	r2,r2,r3
   2cec8:	e0bda715 	stw	r2,-2404(fp)
   2cecc:	e0fd7f17 	ldw	r3,-2564(fp)
   2ced0:	e0bda717 	ldw	r2,-2404(fp)
   2ced4:	1885883a 	add	r2,r3,r2
   2ced8:	e0bd7f15 	stw	r2,-2564(fp)
   2cedc:	e0fd7f17 	ldw	r3,-2564(fp)
   2cee0:	e0bda717 	ldw	r2,-2404(fp)
   2cee4:	1880022e 	bgeu	r3,r2,2cef0 <secp256k1_scalar_mul_512+0xba8>
   2cee8:	00c00044 	movi	r3,1
   2ceec:	00000106 	br	2cef4 <secp256k1_scalar_mul_512+0xbac>
   2cef0:	0007883a 	mov	r3,zero
   2cef4:	e0bd8017 	ldw	r2,-2560(fp)
   2cef8:	10c5883a 	add	r2,r2,r3
   2cefc:	e0bd8015 	stw	r2,-2560(fp)
   2cf00:	e0fd7f17 	ldw	r3,-2564(fp)
   2cf04:	e0bda717 	ldw	r2,-2404(fp)
   2cf08:	1885803a 	cmpltu	r2,r3,r2
   2cf0c:	10803fcc 	andi	r2,r2,255
   2cf10:	10001126 	beq	r2,zero,2cf58 <secp256k1_scalar_mul_512+0xc10>
   2cf14:	e0bd8017 	ldw	r2,-2560(fp)
   2cf18:	1005003a 	cmpeq	r2,r2,zero
   2cf1c:	10803fcc 	andi	r2,r2,255
   2cf20:	10000d26 	beq	r2,zero,2cf58 <secp256k1_scalar_mul_512+0xc10>
   2cf24:	d0a01617 	ldw	r2,-32680(gp)
   2cf28:	10c00317 	ldw	r3,12(r2)
   2cf2c:	00800174 	movhi	r2,5
   2cf30:	1096d604 	addi	r2,r2,23384
   2cf34:	d8800015 	stw	r2,0(sp)
   2cf38:	01c07f04 	movi	r7,508
   2cf3c:	01800174 	movhi	r6,5
   2cf40:	31964204 	addi	r6,r6,22792
   2cf44:	01400174 	movhi	r5,5
   2cf48:	2951e804 	addi	r5,r5,18336
   2cf4c:	1809883a 	mov	r4,r3
   2cf50:	00461000 	call	46100 <fprintf>
   2cf54:	0045fd40 	call	45fd4 <abort>
    extract(l[3]);
   2cf58:	e0be8117 	ldw	r2,-1532(fp)
   2cf5c:	10c00304 	addi	r3,r2,12
   2cf60:	e0bd7e17 	ldw	r2,-2568(fp)
   2cf64:	18800015 	stw	r2,0(r3)
   2cf68:	e0bd7f17 	ldw	r2,-2564(fp)
   2cf6c:	e0bd7e15 	stw	r2,-2568(fp)
   2cf70:	e0bd8017 	ldw	r2,-2560(fp)
   2cf74:	e0bd7f15 	stw	r2,-2564(fp)
   2cf78:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[4]);
   2cf7c:	e0be8217 	ldw	r2,-1528(fp)
   2cf80:	10800017 	ldw	r2,0(r2)
   2cf84:	e0beb415 	stw	r2,-1328(fp)
   2cf88:	e03eb515 	stw	zero,-1324(fp)
   2cf8c:	e0be8317 	ldw	r2,-1524(fp)
   2cf90:	10800417 	ldw	r2,16(r2)
   2cf94:	e0beb615 	stw	r2,-1320(fp)
   2cf98:	e03eb715 	stw	zero,-1316(fp)
   2cf9c:	e1beb617 	ldw	r6,-1320(fp)
   2cfa0:	e1feb717 	ldw	r7,-1316(fp)
   2cfa4:	e13eb417 	ldw	r4,-1328(fp)
   2cfa8:	e17eb517 	ldw	r5,-1324(fp)
   2cfac:	00438e00 	call	438e0 <__muldi3>
   2cfb0:	1009883a 	mov	r4,r2
   2cfb4:	180b883a 	mov	r5,r3
   2cfb8:	e13da915 	stw	r4,-2396(fp)
   2cfbc:	e17daa15 	stw	r5,-2392(fp)
   2cfc0:	e0bdaa17 	ldw	r2,-2392(fp)
   2cfc4:	1004d83a 	srl	r2,r2,zero
   2cfc8:	e0beb815 	stw	r2,-1312(fp)
   2cfcc:	e03eb915 	stw	zero,-1308(fp)
   2cfd0:	e0beb817 	ldw	r2,-1312(fp)
   2cfd4:	e0bdab15 	stw	r2,-2388(fp)
   2cfd8:	e0bda917 	ldw	r2,-2396(fp)
   2cfdc:	e0bdac15 	stw	r2,-2384(fp)
   2cfe0:	e0fd7e17 	ldw	r3,-2568(fp)
   2cfe4:	e0bdac17 	ldw	r2,-2384(fp)
   2cfe8:	1885883a 	add	r2,r3,r2
   2cfec:	e0bd7e15 	stw	r2,-2568(fp)
   2cff0:	e0fd7e17 	ldw	r3,-2568(fp)
   2cff4:	e0bdac17 	ldw	r2,-2384(fp)
   2cff8:	1880022e 	bgeu	r3,r2,2d004 <secp256k1_scalar_mul_512+0xcbc>
   2cffc:	00c00044 	movi	r3,1
   2d000:	00000106 	br	2d008 <secp256k1_scalar_mul_512+0xcc0>
   2d004:	0007883a 	mov	r3,zero
   2d008:	e0bdab17 	ldw	r2,-2388(fp)
   2d00c:	10c5883a 	add	r2,r2,r3
   2d010:	e0bdab15 	stw	r2,-2388(fp)
   2d014:	e0fd7f17 	ldw	r3,-2564(fp)
   2d018:	e0bdab17 	ldw	r2,-2388(fp)
   2d01c:	1885883a 	add	r2,r3,r2
   2d020:	e0bd7f15 	stw	r2,-2564(fp)
   2d024:	e0fd7f17 	ldw	r3,-2564(fp)
   2d028:	e0bdab17 	ldw	r2,-2388(fp)
   2d02c:	1880022e 	bgeu	r3,r2,2d038 <secp256k1_scalar_mul_512+0xcf0>
   2d030:	00c00044 	movi	r3,1
   2d034:	00000106 	br	2d03c <secp256k1_scalar_mul_512+0xcf4>
   2d038:	0007883a 	mov	r3,zero
   2d03c:	e0bd8017 	ldw	r2,-2560(fp)
   2d040:	10c5883a 	add	r2,r2,r3
   2d044:	e0bd8015 	stw	r2,-2560(fp)
   2d048:	e0fd7f17 	ldw	r3,-2564(fp)
   2d04c:	e0bdab17 	ldw	r2,-2388(fp)
   2d050:	1885803a 	cmpltu	r2,r3,r2
   2d054:	10803fcc 	andi	r2,r2,255
   2d058:	10001126 	beq	r2,zero,2d0a0 <secp256k1_scalar_mul_512+0xd58>
   2d05c:	e0bd8017 	ldw	r2,-2560(fp)
   2d060:	1005003a 	cmpeq	r2,r2,zero
   2d064:	10803fcc 	andi	r2,r2,255
   2d068:	10000d26 	beq	r2,zero,2d0a0 <secp256k1_scalar_mul_512+0xd58>
   2d06c:	d0a01617 	ldw	r2,-32680(gp)
   2d070:	10c00317 	ldw	r3,12(r2)
   2d074:	00800174 	movhi	r2,5
   2d078:	1096d604 	addi	r2,r2,23384
   2d07c:	d8800015 	stw	r2,0(sp)
   2d080:	01c07f84 	movi	r7,510
   2d084:	01800174 	movhi	r6,5
   2d088:	31964204 	addi	r6,r6,22792
   2d08c:	01400174 	movhi	r5,5
   2d090:	2951e804 	addi	r5,r5,18336
   2d094:	1809883a 	mov	r4,r3
   2d098:	00461000 	call	46100 <fprintf>
   2d09c:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[1], b->d[3]);
   2d0a0:	e0be8217 	ldw	r2,-1528(fp)
   2d0a4:	10800117 	ldw	r2,4(r2)
   2d0a8:	e0beba15 	stw	r2,-1304(fp)
   2d0ac:	e03ebb15 	stw	zero,-1300(fp)
   2d0b0:	e0be8317 	ldw	r2,-1524(fp)
   2d0b4:	10800317 	ldw	r2,12(r2)
   2d0b8:	e0bebc15 	stw	r2,-1296(fp)
   2d0bc:	e03ebd15 	stw	zero,-1292(fp)
   2d0c0:	e1bebc17 	ldw	r6,-1296(fp)
   2d0c4:	e1febd17 	ldw	r7,-1292(fp)
   2d0c8:	e13eba17 	ldw	r4,-1304(fp)
   2d0cc:	e17ebb17 	ldw	r5,-1300(fp)
   2d0d0:	00438e00 	call	438e0 <__muldi3>
   2d0d4:	1009883a 	mov	r4,r2
   2d0d8:	180b883a 	mov	r5,r3
   2d0dc:	e13dad15 	stw	r4,-2380(fp)
   2d0e0:	e17dae15 	stw	r5,-2376(fp)
   2d0e4:	e0bdae17 	ldw	r2,-2376(fp)
   2d0e8:	1004d83a 	srl	r2,r2,zero
   2d0ec:	e0bebe15 	stw	r2,-1288(fp)
   2d0f0:	e03ebf15 	stw	zero,-1284(fp)
   2d0f4:	e0bebe17 	ldw	r2,-1288(fp)
   2d0f8:	e0bdaf15 	stw	r2,-2372(fp)
   2d0fc:	e0bdad17 	ldw	r2,-2380(fp)
   2d100:	e0bdb015 	stw	r2,-2368(fp)
   2d104:	e0fd7e17 	ldw	r3,-2568(fp)
   2d108:	e0bdb017 	ldw	r2,-2368(fp)
   2d10c:	1885883a 	add	r2,r3,r2
   2d110:	e0bd7e15 	stw	r2,-2568(fp)
   2d114:	e0fd7e17 	ldw	r3,-2568(fp)
   2d118:	e0bdb017 	ldw	r2,-2368(fp)
   2d11c:	1880022e 	bgeu	r3,r2,2d128 <secp256k1_scalar_mul_512+0xde0>
   2d120:	00c00044 	movi	r3,1
   2d124:	00000106 	br	2d12c <secp256k1_scalar_mul_512+0xde4>
   2d128:	0007883a 	mov	r3,zero
   2d12c:	e0bdaf17 	ldw	r2,-2372(fp)
   2d130:	10c5883a 	add	r2,r2,r3
   2d134:	e0bdaf15 	stw	r2,-2372(fp)
   2d138:	e0fd7f17 	ldw	r3,-2564(fp)
   2d13c:	e0bdaf17 	ldw	r2,-2372(fp)
   2d140:	1885883a 	add	r2,r3,r2
   2d144:	e0bd7f15 	stw	r2,-2564(fp)
   2d148:	e0fd7f17 	ldw	r3,-2564(fp)
   2d14c:	e0bdaf17 	ldw	r2,-2372(fp)
   2d150:	1880022e 	bgeu	r3,r2,2d15c <secp256k1_scalar_mul_512+0xe14>
   2d154:	00c00044 	movi	r3,1
   2d158:	00000106 	br	2d160 <secp256k1_scalar_mul_512+0xe18>
   2d15c:	0007883a 	mov	r3,zero
   2d160:	e0bd8017 	ldw	r2,-2560(fp)
   2d164:	10c5883a 	add	r2,r2,r3
   2d168:	e0bd8015 	stw	r2,-2560(fp)
   2d16c:	e0fd7f17 	ldw	r3,-2564(fp)
   2d170:	e0bdaf17 	ldw	r2,-2372(fp)
   2d174:	1885803a 	cmpltu	r2,r3,r2
   2d178:	10803fcc 	andi	r2,r2,255
   2d17c:	10001126 	beq	r2,zero,2d1c4 <secp256k1_scalar_mul_512+0xe7c>
   2d180:	e0bd8017 	ldw	r2,-2560(fp)
   2d184:	1005003a 	cmpeq	r2,r2,zero
   2d188:	10803fcc 	andi	r2,r2,255
   2d18c:	10000d26 	beq	r2,zero,2d1c4 <secp256k1_scalar_mul_512+0xe7c>
   2d190:	d0a01617 	ldw	r2,-32680(gp)
   2d194:	10c00317 	ldw	r3,12(r2)
   2d198:	00800174 	movhi	r2,5
   2d19c:	1096d604 	addi	r2,r2,23384
   2d1a0:	d8800015 	stw	r2,0(sp)
   2d1a4:	01c07fc4 	movi	r7,511
   2d1a8:	01800174 	movhi	r6,5
   2d1ac:	31964204 	addi	r6,r6,22792
   2d1b0:	01400174 	movhi	r5,5
   2d1b4:	2951e804 	addi	r5,r5,18336
   2d1b8:	1809883a 	mov	r4,r3
   2d1bc:	00461000 	call	46100 <fprintf>
   2d1c0:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[2], b->d[2]);
   2d1c4:	e0be8217 	ldw	r2,-1528(fp)
   2d1c8:	10800217 	ldw	r2,8(r2)
   2d1cc:	e0bec015 	stw	r2,-1280(fp)
   2d1d0:	e03ec115 	stw	zero,-1276(fp)
   2d1d4:	e0be8317 	ldw	r2,-1524(fp)
   2d1d8:	10800217 	ldw	r2,8(r2)
   2d1dc:	e0bec215 	stw	r2,-1272(fp)
   2d1e0:	e03ec315 	stw	zero,-1268(fp)
   2d1e4:	e1bec217 	ldw	r6,-1272(fp)
   2d1e8:	e1fec317 	ldw	r7,-1268(fp)
   2d1ec:	e13ec017 	ldw	r4,-1280(fp)
   2d1f0:	e17ec117 	ldw	r5,-1276(fp)
   2d1f4:	00438e00 	call	438e0 <__muldi3>
   2d1f8:	1009883a 	mov	r4,r2
   2d1fc:	180b883a 	mov	r5,r3
   2d200:	e13db115 	stw	r4,-2364(fp)
   2d204:	e17db215 	stw	r5,-2360(fp)
   2d208:	e0bdb217 	ldw	r2,-2360(fp)
   2d20c:	1004d83a 	srl	r2,r2,zero
   2d210:	e0bec415 	stw	r2,-1264(fp)
   2d214:	e03ec515 	stw	zero,-1260(fp)
   2d218:	e0bec417 	ldw	r2,-1264(fp)
   2d21c:	e0bdb315 	stw	r2,-2356(fp)
   2d220:	e0bdb117 	ldw	r2,-2364(fp)
   2d224:	e0bdb415 	stw	r2,-2352(fp)
   2d228:	e0fd7e17 	ldw	r3,-2568(fp)
   2d22c:	e0bdb417 	ldw	r2,-2352(fp)
   2d230:	1885883a 	add	r2,r3,r2
   2d234:	e0bd7e15 	stw	r2,-2568(fp)
   2d238:	e0fd7e17 	ldw	r3,-2568(fp)
   2d23c:	e0bdb417 	ldw	r2,-2352(fp)
   2d240:	1880022e 	bgeu	r3,r2,2d24c <secp256k1_scalar_mul_512+0xf04>
   2d244:	00c00044 	movi	r3,1
   2d248:	00000106 	br	2d250 <secp256k1_scalar_mul_512+0xf08>
   2d24c:	0007883a 	mov	r3,zero
   2d250:	e0bdb317 	ldw	r2,-2356(fp)
   2d254:	10c5883a 	add	r2,r2,r3
   2d258:	e0bdb315 	stw	r2,-2356(fp)
   2d25c:	e0fd7f17 	ldw	r3,-2564(fp)
   2d260:	e0bdb317 	ldw	r2,-2356(fp)
   2d264:	1885883a 	add	r2,r3,r2
   2d268:	e0bd7f15 	stw	r2,-2564(fp)
   2d26c:	e0fd7f17 	ldw	r3,-2564(fp)
   2d270:	e0bdb317 	ldw	r2,-2356(fp)
   2d274:	1880022e 	bgeu	r3,r2,2d280 <secp256k1_scalar_mul_512+0xf38>
   2d278:	00c00044 	movi	r3,1
   2d27c:	00000106 	br	2d284 <secp256k1_scalar_mul_512+0xf3c>
   2d280:	0007883a 	mov	r3,zero
   2d284:	e0bd8017 	ldw	r2,-2560(fp)
   2d288:	10c5883a 	add	r2,r2,r3
   2d28c:	e0bd8015 	stw	r2,-2560(fp)
   2d290:	e0fd7f17 	ldw	r3,-2564(fp)
   2d294:	e0bdb317 	ldw	r2,-2356(fp)
   2d298:	1885803a 	cmpltu	r2,r3,r2
   2d29c:	10803fcc 	andi	r2,r2,255
   2d2a0:	10001126 	beq	r2,zero,2d2e8 <secp256k1_scalar_mul_512+0xfa0>
   2d2a4:	e0bd8017 	ldw	r2,-2560(fp)
   2d2a8:	1005003a 	cmpeq	r2,r2,zero
   2d2ac:	10803fcc 	andi	r2,r2,255
   2d2b0:	10000d26 	beq	r2,zero,2d2e8 <secp256k1_scalar_mul_512+0xfa0>
   2d2b4:	d0a01617 	ldw	r2,-32680(gp)
   2d2b8:	10c00317 	ldw	r3,12(r2)
   2d2bc:	00800174 	movhi	r2,5
   2d2c0:	1096d604 	addi	r2,r2,23384
   2d2c4:	d8800015 	stw	r2,0(sp)
   2d2c8:	01c08004 	movi	r7,512
   2d2cc:	01800174 	movhi	r6,5
   2d2d0:	31964204 	addi	r6,r6,22792
   2d2d4:	01400174 	movhi	r5,5
   2d2d8:	2951e804 	addi	r5,r5,18336
   2d2dc:	1809883a 	mov	r4,r3
   2d2e0:	00461000 	call	46100 <fprintf>
   2d2e4:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[3], b->d[1]);
   2d2e8:	e0be8217 	ldw	r2,-1528(fp)
   2d2ec:	10800317 	ldw	r2,12(r2)
   2d2f0:	e0bec615 	stw	r2,-1256(fp)
   2d2f4:	e03ec715 	stw	zero,-1252(fp)
   2d2f8:	e0be8317 	ldw	r2,-1524(fp)
   2d2fc:	10800117 	ldw	r2,4(r2)
   2d300:	e0bec815 	stw	r2,-1248(fp)
   2d304:	e03ec915 	stw	zero,-1244(fp)
   2d308:	e1bec817 	ldw	r6,-1248(fp)
   2d30c:	e1fec917 	ldw	r7,-1244(fp)
   2d310:	e13ec617 	ldw	r4,-1256(fp)
   2d314:	e17ec717 	ldw	r5,-1252(fp)
   2d318:	00438e00 	call	438e0 <__muldi3>
   2d31c:	1009883a 	mov	r4,r2
   2d320:	180b883a 	mov	r5,r3
   2d324:	e13db515 	stw	r4,-2348(fp)
   2d328:	e17db615 	stw	r5,-2344(fp)
   2d32c:	e0bdb617 	ldw	r2,-2344(fp)
   2d330:	1004d83a 	srl	r2,r2,zero
   2d334:	e0beca15 	stw	r2,-1240(fp)
   2d338:	e03ecb15 	stw	zero,-1236(fp)
   2d33c:	e0beca17 	ldw	r2,-1240(fp)
   2d340:	e0bdb715 	stw	r2,-2340(fp)
   2d344:	e0bdb517 	ldw	r2,-2348(fp)
   2d348:	e0bdb815 	stw	r2,-2336(fp)
   2d34c:	e0fd7e17 	ldw	r3,-2568(fp)
   2d350:	e0bdb817 	ldw	r2,-2336(fp)
   2d354:	1885883a 	add	r2,r3,r2
   2d358:	e0bd7e15 	stw	r2,-2568(fp)
   2d35c:	e0fd7e17 	ldw	r3,-2568(fp)
   2d360:	e0bdb817 	ldw	r2,-2336(fp)
   2d364:	1880022e 	bgeu	r3,r2,2d370 <secp256k1_scalar_mul_512+0x1028>
   2d368:	00c00044 	movi	r3,1
   2d36c:	00000106 	br	2d374 <secp256k1_scalar_mul_512+0x102c>
   2d370:	0007883a 	mov	r3,zero
   2d374:	e0bdb717 	ldw	r2,-2340(fp)
   2d378:	10c5883a 	add	r2,r2,r3
   2d37c:	e0bdb715 	stw	r2,-2340(fp)
   2d380:	e0fd7f17 	ldw	r3,-2564(fp)
   2d384:	e0bdb717 	ldw	r2,-2340(fp)
   2d388:	1885883a 	add	r2,r3,r2
   2d38c:	e0bd7f15 	stw	r2,-2564(fp)
   2d390:	e0fd7f17 	ldw	r3,-2564(fp)
   2d394:	e0bdb717 	ldw	r2,-2340(fp)
   2d398:	1880022e 	bgeu	r3,r2,2d3a4 <secp256k1_scalar_mul_512+0x105c>
   2d39c:	00c00044 	movi	r3,1
   2d3a0:	00000106 	br	2d3a8 <secp256k1_scalar_mul_512+0x1060>
   2d3a4:	0007883a 	mov	r3,zero
   2d3a8:	e0bd8017 	ldw	r2,-2560(fp)
   2d3ac:	10c5883a 	add	r2,r2,r3
   2d3b0:	e0bd8015 	stw	r2,-2560(fp)
   2d3b4:	e0fd7f17 	ldw	r3,-2564(fp)
   2d3b8:	e0bdb717 	ldw	r2,-2340(fp)
   2d3bc:	1885803a 	cmpltu	r2,r3,r2
   2d3c0:	10803fcc 	andi	r2,r2,255
   2d3c4:	10001126 	beq	r2,zero,2d40c <secp256k1_scalar_mul_512+0x10c4>
   2d3c8:	e0bd8017 	ldw	r2,-2560(fp)
   2d3cc:	1005003a 	cmpeq	r2,r2,zero
   2d3d0:	10803fcc 	andi	r2,r2,255
   2d3d4:	10000d26 	beq	r2,zero,2d40c <secp256k1_scalar_mul_512+0x10c4>
   2d3d8:	d0a01617 	ldw	r2,-32680(gp)
   2d3dc:	10c00317 	ldw	r3,12(r2)
   2d3e0:	00800174 	movhi	r2,5
   2d3e4:	1096d604 	addi	r2,r2,23384
   2d3e8:	d8800015 	stw	r2,0(sp)
   2d3ec:	01c08044 	movi	r7,513
   2d3f0:	01800174 	movhi	r6,5
   2d3f4:	31964204 	addi	r6,r6,22792
   2d3f8:	01400174 	movhi	r5,5
   2d3fc:	2951e804 	addi	r5,r5,18336
   2d400:	1809883a 	mov	r4,r3
   2d404:	00461000 	call	46100 <fprintf>
   2d408:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[4], b->d[0]);
   2d40c:	e0be8217 	ldw	r2,-1528(fp)
   2d410:	10800417 	ldw	r2,16(r2)
   2d414:	e0becc15 	stw	r2,-1232(fp)
   2d418:	e03ecd15 	stw	zero,-1228(fp)
   2d41c:	e0be8317 	ldw	r2,-1524(fp)
   2d420:	10800017 	ldw	r2,0(r2)
   2d424:	e0bece15 	stw	r2,-1224(fp)
   2d428:	e03ecf15 	stw	zero,-1220(fp)
   2d42c:	e1bece17 	ldw	r6,-1224(fp)
   2d430:	e1fecf17 	ldw	r7,-1220(fp)
   2d434:	e13ecc17 	ldw	r4,-1232(fp)
   2d438:	e17ecd17 	ldw	r5,-1228(fp)
   2d43c:	00438e00 	call	438e0 <__muldi3>
   2d440:	1009883a 	mov	r4,r2
   2d444:	180b883a 	mov	r5,r3
   2d448:	e13db915 	stw	r4,-2332(fp)
   2d44c:	e17dba15 	stw	r5,-2328(fp)
   2d450:	e0bdba17 	ldw	r2,-2328(fp)
   2d454:	1004d83a 	srl	r2,r2,zero
   2d458:	e0bed015 	stw	r2,-1216(fp)
   2d45c:	e03ed115 	stw	zero,-1212(fp)
   2d460:	e0bed017 	ldw	r2,-1216(fp)
   2d464:	e0bdbb15 	stw	r2,-2324(fp)
   2d468:	e0bdb917 	ldw	r2,-2332(fp)
   2d46c:	e0bdbc15 	stw	r2,-2320(fp)
   2d470:	e0fd7e17 	ldw	r3,-2568(fp)
   2d474:	e0bdbc17 	ldw	r2,-2320(fp)
   2d478:	1885883a 	add	r2,r3,r2
   2d47c:	e0bd7e15 	stw	r2,-2568(fp)
   2d480:	e0fd7e17 	ldw	r3,-2568(fp)
   2d484:	e0bdbc17 	ldw	r2,-2320(fp)
   2d488:	1880022e 	bgeu	r3,r2,2d494 <secp256k1_scalar_mul_512+0x114c>
   2d48c:	00c00044 	movi	r3,1
   2d490:	00000106 	br	2d498 <secp256k1_scalar_mul_512+0x1150>
   2d494:	0007883a 	mov	r3,zero
   2d498:	e0bdbb17 	ldw	r2,-2324(fp)
   2d49c:	10c5883a 	add	r2,r2,r3
   2d4a0:	e0bdbb15 	stw	r2,-2324(fp)
   2d4a4:	e0fd7f17 	ldw	r3,-2564(fp)
   2d4a8:	e0bdbb17 	ldw	r2,-2324(fp)
   2d4ac:	1885883a 	add	r2,r3,r2
   2d4b0:	e0bd7f15 	stw	r2,-2564(fp)
   2d4b4:	e0fd7f17 	ldw	r3,-2564(fp)
   2d4b8:	e0bdbb17 	ldw	r2,-2324(fp)
   2d4bc:	1880022e 	bgeu	r3,r2,2d4c8 <secp256k1_scalar_mul_512+0x1180>
   2d4c0:	00c00044 	movi	r3,1
   2d4c4:	00000106 	br	2d4cc <secp256k1_scalar_mul_512+0x1184>
   2d4c8:	0007883a 	mov	r3,zero
   2d4cc:	e0bd8017 	ldw	r2,-2560(fp)
   2d4d0:	10c5883a 	add	r2,r2,r3
   2d4d4:	e0bd8015 	stw	r2,-2560(fp)
   2d4d8:	e0fd7f17 	ldw	r3,-2564(fp)
   2d4dc:	e0bdbb17 	ldw	r2,-2324(fp)
   2d4e0:	1885803a 	cmpltu	r2,r3,r2
   2d4e4:	10803fcc 	andi	r2,r2,255
   2d4e8:	10001126 	beq	r2,zero,2d530 <secp256k1_scalar_mul_512+0x11e8>
   2d4ec:	e0bd8017 	ldw	r2,-2560(fp)
   2d4f0:	1005003a 	cmpeq	r2,r2,zero
   2d4f4:	10803fcc 	andi	r2,r2,255
   2d4f8:	10000d26 	beq	r2,zero,2d530 <secp256k1_scalar_mul_512+0x11e8>
   2d4fc:	d0a01617 	ldw	r2,-32680(gp)
   2d500:	10c00317 	ldw	r3,12(r2)
   2d504:	00800174 	movhi	r2,5
   2d508:	1096d604 	addi	r2,r2,23384
   2d50c:	d8800015 	stw	r2,0(sp)
   2d510:	01c08084 	movi	r7,514
   2d514:	01800174 	movhi	r6,5
   2d518:	31964204 	addi	r6,r6,22792
   2d51c:	01400174 	movhi	r5,5
   2d520:	2951e804 	addi	r5,r5,18336
   2d524:	1809883a 	mov	r4,r3
   2d528:	00461000 	call	46100 <fprintf>
   2d52c:	0045fd40 	call	45fd4 <abort>
    extract(l[4]);
   2d530:	e0be8117 	ldw	r2,-1532(fp)
   2d534:	10c00404 	addi	r3,r2,16
   2d538:	e0bd7e17 	ldw	r2,-2568(fp)
   2d53c:	18800015 	stw	r2,0(r3)
   2d540:	e0bd7f17 	ldw	r2,-2564(fp)
   2d544:	e0bd7e15 	stw	r2,-2568(fp)
   2d548:	e0bd8017 	ldw	r2,-2560(fp)
   2d54c:	e0bd7f15 	stw	r2,-2564(fp)
   2d550:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[5]);
   2d554:	e0be8217 	ldw	r2,-1528(fp)
   2d558:	10800017 	ldw	r2,0(r2)
   2d55c:	e0bed215 	stw	r2,-1208(fp)
   2d560:	e03ed315 	stw	zero,-1204(fp)
   2d564:	e0be8317 	ldw	r2,-1524(fp)
   2d568:	10800517 	ldw	r2,20(r2)
   2d56c:	e0bed415 	stw	r2,-1200(fp)
   2d570:	e03ed515 	stw	zero,-1196(fp)
   2d574:	e1bed417 	ldw	r6,-1200(fp)
   2d578:	e1fed517 	ldw	r7,-1196(fp)
   2d57c:	e13ed217 	ldw	r4,-1208(fp)
   2d580:	e17ed317 	ldw	r5,-1204(fp)
   2d584:	00438e00 	call	438e0 <__muldi3>
   2d588:	1009883a 	mov	r4,r2
   2d58c:	180b883a 	mov	r5,r3
   2d590:	e13dbd15 	stw	r4,-2316(fp)
   2d594:	e17dbe15 	stw	r5,-2312(fp)
   2d598:	e0bdbe17 	ldw	r2,-2312(fp)
   2d59c:	1004d83a 	srl	r2,r2,zero
   2d5a0:	e0bed615 	stw	r2,-1192(fp)
   2d5a4:	e03ed715 	stw	zero,-1188(fp)
   2d5a8:	e0bed617 	ldw	r2,-1192(fp)
   2d5ac:	e0bdbf15 	stw	r2,-2308(fp)
   2d5b0:	e0bdbd17 	ldw	r2,-2316(fp)
   2d5b4:	e0bdc015 	stw	r2,-2304(fp)
   2d5b8:	e0fd7e17 	ldw	r3,-2568(fp)
   2d5bc:	e0bdc017 	ldw	r2,-2304(fp)
   2d5c0:	1885883a 	add	r2,r3,r2
   2d5c4:	e0bd7e15 	stw	r2,-2568(fp)
   2d5c8:	e0fd7e17 	ldw	r3,-2568(fp)
   2d5cc:	e0bdc017 	ldw	r2,-2304(fp)
   2d5d0:	1880022e 	bgeu	r3,r2,2d5dc <secp256k1_scalar_mul_512+0x1294>
   2d5d4:	00c00044 	movi	r3,1
   2d5d8:	00000106 	br	2d5e0 <secp256k1_scalar_mul_512+0x1298>
   2d5dc:	0007883a 	mov	r3,zero
   2d5e0:	e0bdbf17 	ldw	r2,-2308(fp)
   2d5e4:	10c5883a 	add	r2,r2,r3
   2d5e8:	e0bdbf15 	stw	r2,-2308(fp)
   2d5ec:	e0fd7f17 	ldw	r3,-2564(fp)
   2d5f0:	e0bdbf17 	ldw	r2,-2308(fp)
   2d5f4:	1885883a 	add	r2,r3,r2
   2d5f8:	e0bd7f15 	stw	r2,-2564(fp)
   2d5fc:	e0fd7f17 	ldw	r3,-2564(fp)
   2d600:	e0bdbf17 	ldw	r2,-2308(fp)
   2d604:	1880022e 	bgeu	r3,r2,2d610 <secp256k1_scalar_mul_512+0x12c8>
   2d608:	00c00044 	movi	r3,1
   2d60c:	00000106 	br	2d614 <secp256k1_scalar_mul_512+0x12cc>
   2d610:	0007883a 	mov	r3,zero
   2d614:	e0bd8017 	ldw	r2,-2560(fp)
   2d618:	10c5883a 	add	r2,r2,r3
   2d61c:	e0bd8015 	stw	r2,-2560(fp)
   2d620:	e0fd7f17 	ldw	r3,-2564(fp)
   2d624:	e0bdbf17 	ldw	r2,-2308(fp)
   2d628:	1885803a 	cmpltu	r2,r3,r2
   2d62c:	10803fcc 	andi	r2,r2,255
   2d630:	10001126 	beq	r2,zero,2d678 <secp256k1_scalar_mul_512+0x1330>
   2d634:	e0bd8017 	ldw	r2,-2560(fp)
   2d638:	1005003a 	cmpeq	r2,r2,zero
   2d63c:	10803fcc 	andi	r2,r2,255
   2d640:	10000d26 	beq	r2,zero,2d678 <secp256k1_scalar_mul_512+0x1330>
   2d644:	d0a01617 	ldw	r2,-32680(gp)
   2d648:	10c00317 	ldw	r3,12(r2)
   2d64c:	00800174 	movhi	r2,5
   2d650:	1096d604 	addi	r2,r2,23384
   2d654:	d8800015 	stw	r2,0(sp)
   2d658:	01c08104 	movi	r7,516
   2d65c:	01800174 	movhi	r6,5
   2d660:	31964204 	addi	r6,r6,22792
   2d664:	01400174 	movhi	r5,5
   2d668:	2951e804 	addi	r5,r5,18336
   2d66c:	1809883a 	mov	r4,r3
   2d670:	00461000 	call	46100 <fprintf>
   2d674:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[1], b->d[4]);
   2d678:	e0be8217 	ldw	r2,-1528(fp)
   2d67c:	10800117 	ldw	r2,4(r2)
   2d680:	e0bed815 	stw	r2,-1184(fp)
   2d684:	e03ed915 	stw	zero,-1180(fp)
   2d688:	e0be8317 	ldw	r2,-1524(fp)
   2d68c:	10800417 	ldw	r2,16(r2)
   2d690:	e0beda15 	stw	r2,-1176(fp)
   2d694:	e03edb15 	stw	zero,-1172(fp)
   2d698:	e1beda17 	ldw	r6,-1176(fp)
   2d69c:	e1fedb17 	ldw	r7,-1172(fp)
   2d6a0:	e13ed817 	ldw	r4,-1184(fp)
   2d6a4:	e17ed917 	ldw	r5,-1180(fp)
   2d6a8:	00438e00 	call	438e0 <__muldi3>
   2d6ac:	1009883a 	mov	r4,r2
   2d6b0:	180b883a 	mov	r5,r3
   2d6b4:	e13dc115 	stw	r4,-2300(fp)
   2d6b8:	e17dc215 	stw	r5,-2296(fp)
   2d6bc:	e0bdc217 	ldw	r2,-2296(fp)
   2d6c0:	1004d83a 	srl	r2,r2,zero
   2d6c4:	e0bedc15 	stw	r2,-1168(fp)
   2d6c8:	e03edd15 	stw	zero,-1164(fp)
   2d6cc:	e0bedc17 	ldw	r2,-1168(fp)
   2d6d0:	e0bdc315 	stw	r2,-2292(fp)
   2d6d4:	e0bdc117 	ldw	r2,-2300(fp)
   2d6d8:	e0bdc415 	stw	r2,-2288(fp)
   2d6dc:	e0fd7e17 	ldw	r3,-2568(fp)
   2d6e0:	e0bdc417 	ldw	r2,-2288(fp)
   2d6e4:	1885883a 	add	r2,r3,r2
   2d6e8:	e0bd7e15 	stw	r2,-2568(fp)
   2d6ec:	e0fd7e17 	ldw	r3,-2568(fp)
   2d6f0:	e0bdc417 	ldw	r2,-2288(fp)
   2d6f4:	1880022e 	bgeu	r3,r2,2d700 <secp256k1_scalar_mul_512+0x13b8>
   2d6f8:	00c00044 	movi	r3,1
   2d6fc:	00000106 	br	2d704 <secp256k1_scalar_mul_512+0x13bc>
   2d700:	0007883a 	mov	r3,zero
   2d704:	e0bdc317 	ldw	r2,-2292(fp)
   2d708:	10c5883a 	add	r2,r2,r3
   2d70c:	e0bdc315 	stw	r2,-2292(fp)
   2d710:	e0fd7f17 	ldw	r3,-2564(fp)
   2d714:	e0bdc317 	ldw	r2,-2292(fp)
   2d718:	1885883a 	add	r2,r3,r2
   2d71c:	e0bd7f15 	stw	r2,-2564(fp)
   2d720:	e0fd7f17 	ldw	r3,-2564(fp)
   2d724:	e0bdc317 	ldw	r2,-2292(fp)
   2d728:	1880022e 	bgeu	r3,r2,2d734 <secp256k1_scalar_mul_512+0x13ec>
   2d72c:	00c00044 	movi	r3,1
   2d730:	00000106 	br	2d738 <secp256k1_scalar_mul_512+0x13f0>
   2d734:	0007883a 	mov	r3,zero
   2d738:	e0bd8017 	ldw	r2,-2560(fp)
   2d73c:	10c5883a 	add	r2,r2,r3
   2d740:	e0bd8015 	stw	r2,-2560(fp)
   2d744:	e0fd7f17 	ldw	r3,-2564(fp)
   2d748:	e0bdc317 	ldw	r2,-2292(fp)
   2d74c:	1885803a 	cmpltu	r2,r3,r2
   2d750:	10803fcc 	andi	r2,r2,255
   2d754:	10001126 	beq	r2,zero,2d79c <secp256k1_scalar_mul_512+0x1454>
   2d758:	e0bd8017 	ldw	r2,-2560(fp)
   2d75c:	1005003a 	cmpeq	r2,r2,zero
   2d760:	10803fcc 	andi	r2,r2,255
   2d764:	10000d26 	beq	r2,zero,2d79c <secp256k1_scalar_mul_512+0x1454>
   2d768:	d0a01617 	ldw	r2,-32680(gp)
   2d76c:	10c00317 	ldw	r3,12(r2)
   2d770:	00800174 	movhi	r2,5
   2d774:	1096d604 	addi	r2,r2,23384
   2d778:	d8800015 	stw	r2,0(sp)
   2d77c:	01c08144 	movi	r7,517
   2d780:	01800174 	movhi	r6,5
   2d784:	31964204 	addi	r6,r6,22792
   2d788:	01400174 	movhi	r5,5
   2d78c:	2951e804 	addi	r5,r5,18336
   2d790:	1809883a 	mov	r4,r3
   2d794:	00461000 	call	46100 <fprintf>
   2d798:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[2], b->d[3]);
   2d79c:	e0be8217 	ldw	r2,-1528(fp)
   2d7a0:	10800217 	ldw	r2,8(r2)
   2d7a4:	e0bede15 	stw	r2,-1160(fp)
   2d7a8:	e03edf15 	stw	zero,-1156(fp)
   2d7ac:	e0be8317 	ldw	r2,-1524(fp)
   2d7b0:	10800317 	ldw	r2,12(r2)
   2d7b4:	e0bee015 	stw	r2,-1152(fp)
   2d7b8:	e03ee115 	stw	zero,-1148(fp)
   2d7bc:	e1bee017 	ldw	r6,-1152(fp)
   2d7c0:	e1fee117 	ldw	r7,-1148(fp)
   2d7c4:	e13ede17 	ldw	r4,-1160(fp)
   2d7c8:	e17edf17 	ldw	r5,-1156(fp)
   2d7cc:	00438e00 	call	438e0 <__muldi3>
   2d7d0:	1009883a 	mov	r4,r2
   2d7d4:	180b883a 	mov	r5,r3
   2d7d8:	e13dc515 	stw	r4,-2284(fp)
   2d7dc:	e17dc615 	stw	r5,-2280(fp)
   2d7e0:	e0bdc617 	ldw	r2,-2280(fp)
   2d7e4:	1004d83a 	srl	r2,r2,zero
   2d7e8:	e0bee215 	stw	r2,-1144(fp)
   2d7ec:	e03ee315 	stw	zero,-1140(fp)
   2d7f0:	e0bee217 	ldw	r2,-1144(fp)
   2d7f4:	e0bdc715 	stw	r2,-2276(fp)
   2d7f8:	e0bdc517 	ldw	r2,-2284(fp)
   2d7fc:	e0bdc815 	stw	r2,-2272(fp)
   2d800:	e0fd7e17 	ldw	r3,-2568(fp)
   2d804:	e0bdc817 	ldw	r2,-2272(fp)
   2d808:	1885883a 	add	r2,r3,r2
   2d80c:	e0bd7e15 	stw	r2,-2568(fp)
   2d810:	e0fd7e17 	ldw	r3,-2568(fp)
   2d814:	e0bdc817 	ldw	r2,-2272(fp)
   2d818:	1880022e 	bgeu	r3,r2,2d824 <secp256k1_scalar_mul_512+0x14dc>
   2d81c:	00c00044 	movi	r3,1
   2d820:	00000106 	br	2d828 <secp256k1_scalar_mul_512+0x14e0>
   2d824:	0007883a 	mov	r3,zero
   2d828:	e0bdc717 	ldw	r2,-2276(fp)
   2d82c:	10c5883a 	add	r2,r2,r3
   2d830:	e0bdc715 	stw	r2,-2276(fp)
   2d834:	e0fd7f17 	ldw	r3,-2564(fp)
   2d838:	e0bdc717 	ldw	r2,-2276(fp)
   2d83c:	1885883a 	add	r2,r3,r2
   2d840:	e0bd7f15 	stw	r2,-2564(fp)
   2d844:	e0fd7f17 	ldw	r3,-2564(fp)
   2d848:	e0bdc717 	ldw	r2,-2276(fp)
   2d84c:	1880022e 	bgeu	r3,r2,2d858 <secp256k1_scalar_mul_512+0x1510>
   2d850:	00c00044 	movi	r3,1
   2d854:	00000106 	br	2d85c <secp256k1_scalar_mul_512+0x1514>
   2d858:	0007883a 	mov	r3,zero
   2d85c:	e0bd8017 	ldw	r2,-2560(fp)
   2d860:	10c5883a 	add	r2,r2,r3
   2d864:	e0bd8015 	stw	r2,-2560(fp)
   2d868:	e0fd7f17 	ldw	r3,-2564(fp)
   2d86c:	e0bdc717 	ldw	r2,-2276(fp)
   2d870:	1885803a 	cmpltu	r2,r3,r2
   2d874:	10803fcc 	andi	r2,r2,255
   2d878:	10001126 	beq	r2,zero,2d8c0 <secp256k1_scalar_mul_512+0x1578>
   2d87c:	e0bd8017 	ldw	r2,-2560(fp)
   2d880:	1005003a 	cmpeq	r2,r2,zero
   2d884:	10803fcc 	andi	r2,r2,255
   2d888:	10000d26 	beq	r2,zero,2d8c0 <secp256k1_scalar_mul_512+0x1578>
   2d88c:	d0a01617 	ldw	r2,-32680(gp)
   2d890:	10c00317 	ldw	r3,12(r2)
   2d894:	00800174 	movhi	r2,5
   2d898:	1096d604 	addi	r2,r2,23384
   2d89c:	d8800015 	stw	r2,0(sp)
   2d8a0:	01c08184 	movi	r7,518
   2d8a4:	01800174 	movhi	r6,5
   2d8a8:	31964204 	addi	r6,r6,22792
   2d8ac:	01400174 	movhi	r5,5
   2d8b0:	2951e804 	addi	r5,r5,18336
   2d8b4:	1809883a 	mov	r4,r3
   2d8b8:	00461000 	call	46100 <fprintf>
   2d8bc:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[3], b->d[2]);
   2d8c0:	e0be8217 	ldw	r2,-1528(fp)
   2d8c4:	10800317 	ldw	r2,12(r2)
   2d8c8:	e0bee415 	stw	r2,-1136(fp)
   2d8cc:	e03ee515 	stw	zero,-1132(fp)
   2d8d0:	e0be8317 	ldw	r2,-1524(fp)
   2d8d4:	10800217 	ldw	r2,8(r2)
   2d8d8:	e0bee615 	stw	r2,-1128(fp)
   2d8dc:	e03ee715 	stw	zero,-1124(fp)
   2d8e0:	e1bee617 	ldw	r6,-1128(fp)
   2d8e4:	e1fee717 	ldw	r7,-1124(fp)
   2d8e8:	e13ee417 	ldw	r4,-1136(fp)
   2d8ec:	e17ee517 	ldw	r5,-1132(fp)
   2d8f0:	00438e00 	call	438e0 <__muldi3>
   2d8f4:	1009883a 	mov	r4,r2
   2d8f8:	180b883a 	mov	r5,r3
   2d8fc:	e13dc915 	stw	r4,-2268(fp)
   2d900:	e17dca15 	stw	r5,-2264(fp)
   2d904:	e0bdca17 	ldw	r2,-2264(fp)
   2d908:	1004d83a 	srl	r2,r2,zero
   2d90c:	e0bee815 	stw	r2,-1120(fp)
   2d910:	e03ee915 	stw	zero,-1116(fp)
   2d914:	e0bee817 	ldw	r2,-1120(fp)
   2d918:	e0bdcb15 	stw	r2,-2260(fp)
   2d91c:	e0bdc917 	ldw	r2,-2268(fp)
   2d920:	e0bdcc15 	stw	r2,-2256(fp)
   2d924:	e0fd7e17 	ldw	r3,-2568(fp)
   2d928:	e0bdcc17 	ldw	r2,-2256(fp)
   2d92c:	1885883a 	add	r2,r3,r2
   2d930:	e0bd7e15 	stw	r2,-2568(fp)
   2d934:	e0fd7e17 	ldw	r3,-2568(fp)
   2d938:	e0bdcc17 	ldw	r2,-2256(fp)
   2d93c:	1880022e 	bgeu	r3,r2,2d948 <secp256k1_scalar_mul_512+0x1600>
   2d940:	00c00044 	movi	r3,1
   2d944:	00000106 	br	2d94c <secp256k1_scalar_mul_512+0x1604>
   2d948:	0007883a 	mov	r3,zero
   2d94c:	e0bdcb17 	ldw	r2,-2260(fp)
   2d950:	10c5883a 	add	r2,r2,r3
   2d954:	e0bdcb15 	stw	r2,-2260(fp)
   2d958:	e0fd7f17 	ldw	r3,-2564(fp)
   2d95c:	e0bdcb17 	ldw	r2,-2260(fp)
   2d960:	1885883a 	add	r2,r3,r2
   2d964:	e0bd7f15 	stw	r2,-2564(fp)
   2d968:	e0fd7f17 	ldw	r3,-2564(fp)
   2d96c:	e0bdcb17 	ldw	r2,-2260(fp)
   2d970:	1880022e 	bgeu	r3,r2,2d97c <secp256k1_scalar_mul_512+0x1634>
   2d974:	00c00044 	movi	r3,1
   2d978:	00000106 	br	2d980 <secp256k1_scalar_mul_512+0x1638>
   2d97c:	0007883a 	mov	r3,zero
   2d980:	e0bd8017 	ldw	r2,-2560(fp)
   2d984:	10c5883a 	add	r2,r2,r3
   2d988:	e0bd8015 	stw	r2,-2560(fp)
   2d98c:	e0fd7f17 	ldw	r3,-2564(fp)
   2d990:	e0bdcb17 	ldw	r2,-2260(fp)
   2d994:	1885803a 	cmpltu	r2,r3,r2
   2d998:	10803fcc 	andi	r2,r2,255
   2d99c:	10001126 	beq	r2,zero,2d9e4 <secp256k1_scalar_mul_512+0x169c>
   2d9a0:	e0bd8017 	ldw	r2,-2560(fp)
   2d9a4:	1005003a 	cmpeq	r2,r2,zero
   2d9a8:	10803fcc 	andi	r2,r2,255
   2d9ac:	10000d26 	beq	r2,zero,2d9e4 <secp256k1_scalar_mul_512+0x169c>
   2d9b0:	d0a01617 	ldw	r2,-32680(gp)
   2d9b4:	10c00317 	ldw	r3,12(r2)
   2d9b8:	00800174 	movhi	r2,5
   2d9bc:	1096d604 	addi	r2,r2,23384
   2d9c0:	d8800015 	stw	r2,0(sp)
   2d9c4:	01c081c4 	movi	r7,519
   2d9c8:	01800174 	movhi	r6,5
   2d9cc:	31964204 	addi	r6,r6,22792
   2d9d0:	01400174 	movhi	r5,5
   2d9d4:	2951e804 	addi	r5,r5,18336
   2d9d8:	1809883a 	mov	r4,r3
   2d9dc:	00461000 	call	46100 <fprintf>
   2d9e0:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[4], b->d[1]);
   2d9e4:	e0be8217 	ldw	r2,-1528(fp)
   2d9e8:	10800417 	ldw	r2,16(r2)
   2d9ec:	e0beea15 	stw	r2,-1112(fp)
   2d9f0:	e03eeb15 	stw	zero,-1108(fp)
   2d9f4:	e0be8317 	ldw	r2,-1524(fp)
   2d9f8:	10800117 	ldw	r2,4(r2)
   2d9fc:	e0beec15 	stw	r2,-1104(fp)
   2da00:	e03eed15 	stw	zero,-1100(fp)
   2da04:	e1beec17 	ldw	r6,-1104(fp)
   2da08:	e1feed17 	ldw	r7,-1100(fp)
   2da0c:	e13eea17 	ldw	r4,-1112(fp)
   2da10:	e17eeb17 	ldw	r5,-1108(fp)
   2da14:	00438e00 	call	438e0 <__muldi3>
   2da18:	1009883a 	mov	r4,r2
   2da1c:	180b883a 	mov	r5,r3
   2da20:	e13dcd15 	stw	r4,-2252(fp)
   2da24:	e17dce15 	stw	r5,-2248(fp)
   2da28:	e0bdce17 	ldw	r2,-2248(fp)
   2da2c:	1004d83a 	srl	r2,r2,zero
   2da30:	e0beee15 	stw	r2,-1096(fp)
   2da34:	e03eef15 	stw	zero,-1092(fp)
   2da38:	e0beee17 	ldw	r2,-1096(fp)
   2da3c:	e0bdcf15 	stw	r2,-2244(fp)
   2da40:	e0bdcd17 	ldw	r2,-2252(fp)
   2da44:	e0bdd015 	stw	r2,-2240(fp)
   2da48:	e0fd7e17 	ldw	r3,-2568(fp)
   2da4c:	e0bdd017 	ldw	r2,-2240(fp)
   2da50:	1885883a 	add	r2,r3,r2
   2da54:	e0bd7e15 	stw	r2,-2568(fp)
   2da58:	e0fd7e17 	ldw	r3,-2568(fp)
   2da5c:	e0bdd017 	ldw	r2,-2240(fp)
   2da60:	1880022e 	bgeu	r3,r2,2da6c <secp256k1_scalar_mul_512+0x1724>
   2da64:	00c00044 	movi	r3,1
   2da68:	00000106 	br	2da70 <secp256k1_scalar_mul_512+0x1728>
   2da6c:	0007883a 	mov	r3,zero
   2da70:	e0bdcf17 	ldw	r2,-2244(fp)
   2da74:	10c5883a 	add	r2,r2,r3
   2da78:	e0bdcf15 	stw	r2,-2244(fp)
   2da7c:	e0fd7f17 	ldw	r3,-2564(fp)
   2da80:	e0bdcf17 	ldw	r2,-2244(fp)
   2da84:	1885883a 	add	r2,r3,r2
   2da88:	e0bd7f15 	stw	r2,-2564(fp)
   2da8c:	e0fd7f17 	ldw	r3,-2564(fp)
   2da90:	e0bdcf17 	ldw	r2,-2244(fp)
   2da94:	1880022e 	bgeu	r3,r2,2daa0 <secp256k1_scalar_mul_512+0x1758>
   2da98:	00c00044 	movi	r3,1
   2da9c:	00000106 	br	2daa4 <secp256k1_scalar_mul_512+0x175c>
   2daa0:	0007883a 	mov	r3,zero
   2daa4:	e0bd8017 	ldw	r2,-2560(fp)
   2daa8:	10c5883a 	add	r2,r2,r3
   2daac:	e0bd8015 	stw	r2,-2560(fp)
   2dab0:	e0fd7f17 	ldw	r3,-2564(fp)
   2dab4:	e0bdcf17 	ldw	r2,-2244(fp)
   2dab8:	1885803a 	cmpltu	r2,r3,r2
   2dabc:	10803fcc 	andi	r2,r2,255
   2dac0:	10001126 	beq	r2,zero,2db08 <secp256k1_scalar_mul_512+0x17c0>
   2dac4:	e0bd8017 	ldw	r2,-2560(fp)
   2dac8:	1005003a 	cmpeq	r2,r2,zero
   2dacc:	10803fcc 	andi	r2,r2,255
   2dad0:	10000d26 	beq	r2,zero,2db08 <secp256k1_scalar_mul_512+0x17c0>
   2dad4:	d0a01617 	ldw	r2,-32680(gp)
   2dad8:	10c00317 	ldw	r3,12(r2)
   2dadc:	00800174 	movhi	r2,5
   2dae0:	1096d604 	addi	r2,r2,23384
   2dae4:	d8800015 	stw	r2,0(sp)
   2dae8:	01c08204 	movi	r7,520
   2daec:	01800174 	movhi	r6,5
   2daf0:	31964204 	addi	r6,r6,22792
   2daf4:	01400174 	movhi	r5,5
   2daf8:	2951e804 	addi	r5,r5,18336
   2dafc:	1809883a 	mov	r4,r3
   2db00:	00461000 	call	46100 <fprintf>
   2db04:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[5], b->d[0]);
   2db08:	e0be8217 	ldw	r2,-1528(fp)
   2db0c:	10800517 	ldw	r2,20(r2)
   2db10:	e0bef015 	stw	r2,-1088(fp)
   2db14:	e03ef115 	stw	zero,-1084(fp)
   2db18:	e0be8317 	ldw	r2,-1524(fp)
   2db1c:	10800017 	ldw	r2,0(r2)
   2db20:	e0bef215 	stw	r2,-1080(fp)
   2db24:	e03ef315 	stw	zero,-1076(fp)
   2db28:	e1bef217 	ldw	r6,-1080(fp)
   2db2c:	e1fef317 	ldw	r7,-1076(fp)
   2db30:	e13ef017 	ldw	r4,-1088(fp)
   2db34:	e17ef117 	ldw	r5,-1084(fp)
   2db38:	00438e00 	call	438e0 <__muldi3>
   2db3c:	1009883a 	mov	r4,r2
   2db40:	180b883a 	mov	r5,r3
   2db44:	e13dd115 	stw	r4,-2236(fp)
   2db48:	e17dd215 	stw	r5,-2232(fp)
   2db4c:	e0bdd217 	ldw	r2,-2232(fp)
   2db50:	1004d83a 	srl	r2,r2,zero
   2db54:	e0bef415 	stw	r2,-1072(fp)
   2db58:	e03ef515 	stw	zero,-1068(fp)
   2db5c:	e0bef417 	ldw	r2,-1072(fp)
   2db60:	e0bdd315 	stw	r2,-2228(fp)
   2db64:	e0bdd117 	ldw	r2,-2236(fp)
   2db68:	e0bdd415 	stw	r2,-2224(fp)
   2db6c:	e0fd7e17 	ldw	r3,-2568(fp)
   2db70:	e0bdd417 	ldw	r2,-2224(fp)
   2db74:	1885883a 	add	r2,r3,r2
   2db78:	e0bd7e15 	stw	r2,-2568(fp)
   2db7c:	e0fd7e17 	ldw	r3,-2568(fp)
   2db80:	e0bdd417 	ldw	r2,-2224(fp)
   2db84:	1880022e 	bgeu	r3,r2,2db90 <secp256k1_scalar_mul_512+0x1848>
   2db88:	00c00044 	movi	r3,1
   2db8c:	00000106 	br	2db94 <secp256k1_scalar_mul_512+0x184c>
   2db90:	0007883a 	mov	r3,zero
   2db94:	e0bdd317 	ldw	r2,-2228(fp)
   2db98:	10c5883a 	add	r2,r2,r3
   2db9c:	e0bdd315 	stw	r2,-2228(fp)
   2dba0:	e0fd7f17 	ldw	r3,-2564(fp)
   2dba4:	e0bdd317 	ldw	r2,-2228(fp)
   2dba8:	1885883a 	add	r2,r3,r2
   2dbac:	e0bd7f15 	stw	r2,-2564(fp)
   2dbb0:	e0fd7f17 	ldw	r3,-2564(fp)
   2dbb4:	e0bdd317 	ldw	r2,-2228(fp)
   2dbb8:	1880022e 	bgeu	r3,r2,2dbc4 <secp256k1_scalar_mul_512+0x187c>
   2dbbc:	00c00044 	movi	r3,1
   2dbc0:	00000106 	br	2dbc8 <secp256k1_scalar_mul_512+0x1880>
   2dbc4:	0007883a 	mov	r3,zero
   2dbc8:	e0bd8017 	ldw	r2,-2560(fp)
   2dbcc:	10c5883a 	add	r2,r2,r3
   2dbd0:	e0bd8015 	stw	r2,-2560(fp)
   2dbd4:	e0fd7f17 	ldw	r3,-2564(fp)
   2dbd8:	e0bdd317 	ldw	r2,-2228(fp)
   2dbdc:	1885803a 	cmpltu	r2,r3,r2
   2dbe0:	10803fcc 	andi	r2,r2,255
   2dbe4:	10001126 	beq	r2,zero,2dc2c <secp256k1_scalar_mul_512+0x18e4>
   2dbe8:	e0bd8017 	ldw	r2,-2560(fp)
   2dbec:	1005003a 	cmpeq	r2,r2,zero
   2dbf0:	10803fcc 	andi	r2,r2,255
   2dbf4:	10000d26 	beq	r2,zero,2dc2c <secp256k1_scalar_mul_512+0x18e4>
   2dbf8:	d0a01617 	ldw	r2,-32680(gp)
   2dbfc:	10c00317 	ldw	r3,12(r2)
   2dc00:	00800174 	movhi	r2,5
   2dc04:	1096d604 	addi	r2,r2,23384
   2dc08:	d8800015 	stw	r2,0(sp)
   2dc0c:	01c08244 	movi	r7,521
   2dc10:	01800174 	movhi	r6,5
   2dc14:	31964204 	addi	r6,r6,22792
   2dc18:	01400174 	movhi	r5,5
   2dc1c:	2951e804 	addi	r5,r5,18336
   2dc20:	1809883a 	mov	r4,r3
   2dc24:	00461000 	call	46100 <fprintf>
   2dc28:	0045fd40 	call	45fd4 <abort>
    extract(l[5]);
   2dc2c:	e0be8117 	ldw	r2,-1532(fp)
   2dc30:	10c00504 	addi	r3,r2,20
   2dc34:	e0bd7e17 	ldw	r2,-2568(fp)
   2dc38:	18800015 	stw	r2,0(r3)
   2dc3c:	e0bd7f17 	ldw	r2,-2564(fp)
   2dc40:	e0bd7e15 	stw	r2,-2568(fp)
   2dc44:	e0bd8017 	ldw	r2,-2560(fp)
   2dc48:	e0bd7f15 	stw	r2,-2564(fp)
   2dc4c:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[6]);
   2dc50:	e0be8217 	ldw	r2,-1528(fp)
   2dc54:	10800017 	ldw	r2,0(r2)
   2dc58:	e0bef615 	stw	r2,-1064(fp)
   2dc5c:	e03ef715 	stw	zero,-1060(fp)
   2dc60:	e0be8317 	ldw	r2,-1524(fp)
   2dc64:	10800617 	ldw	r2,24(r2)
   2dc68:	e0bef815 	stw	r2,-1056(fp)
   2dc6c:	e03ef915 	stw	zero,-1052(fp)
   2dc70:	e1bef817 	ldw	r6,-1056(fp)
   2dc74:	e1fef917 	ldw	r7,-1052(fp)
   2dc78:	e13ef617 	ldw	r4,-1064(fp)
   2dc7c:	e17ef717 	ldw	r5,-1060(fp)
   2dc80:	00438e00 	call	438e0 <__muldi3>
   2dc84:	1009883a 	mov	r4,r2
   2dc88:	180b883a 	mov	r5,r3
   2dc8c:	e13dd515 	stw	r4,-2220(fp)
   2dc90:	e17dd615 	stw	r5,-2216(fp)
   2dc94:	e0bdd617 	ldw	r2,-2216(fp)
   2dc98:	1004d83a 	srl	r2,r2,zero
   2dc9c:	e0befa15 	stw	r2,-1048(fp)
   2dca0:	e03efb15 	stw	zero,-1044(fp)
   2dca4:	e0befa17 	ldw	r2,-1048(fp)
   2dca8:	e0bdd715 	stw	r2,-2212(fp)
   2dcac:	e0bdd517 	ldw	r2,-2220(fp)
   2dcb0:	e0bdd815 	stw	r2,-2208(fp)
   2dcb4:	e0fd7e17 	ldw	r3,-2568(fp)
   2dcb8:	e0bdd817 	ldw	r2,-2208(fp)
   2dcbc:	1885883a 	add	r2,r3,r2
   2dcc0:	e0bd7e15 	stw	r2,-2568(fp)
   2dcc4:	e0fd7e17 	ldw	r3,-2568(fp)
   2dcc8:	e0bdd817 	ldw	r2,-2208(fp)
   2dccc:	1880022e 	bgeu	r3,r2,2dcd8 <secp256k1_scalar_mul_512+0x1990>
   2dcd0:	00c00044 	movi	r3,1
   2dcd4:	00000106 	br	2dcdc <secp256k1_scalar_mul_512+0x1994>
   2dcd8:	0007883a 	mov	r3,zero
   2dcdc:	e0bdd717 	ldw	r2,-2212(fp)
   2dce0:	10c5883a 	add	r2,r2,r3
   2dce4:	e0bdd715 	stw	r2,-2212(fp)
   2dce8:	e0fd7f17 	ldw	r3,-2564(fp)
   2dcec:	e0bdd717 	ldw	r2,-2212(fp)
   2dcf0:	1885883a 	add	r2,r3,r2
   2dcf4:	e0bd7f15 	stw	r2,-2564(fp)
   2dcf8:	e0fd7f17 	ldw	r3,-2564(fp)
   2dcfc:	e0bdd717 	ldw	r2,-2212(fp)
   2dd00:	1880022e 	bgeu	r3,r2,2dd0c <secp256k1_scalar_mul_512+0x19c4>
   2dd04:	00c00044 	movi	r3,1
   2dd08:	00000106 	br	2dd10 <secp256k1_scalar_mul_512+0x19c8>
   2dd0c:	0007883a 	mov	r3,zero
   2dd10:	e0bd8017 	ldw	r2,-2560(fp)
   2dd14:	10c5883a 	add	r2,r2,r3
   2dd18:	e0bd8015 	stw	r2,-2560(fp)
   2dd1c:	e0fd7f17 	ldw	r3,-2564(fp)
   2dd20:	e0bdd717 	ldw	r2,-2212(fp)
   2dd24:	1885803a 	cmpltu	r2,r3,r2
   2dd28:	10803fcc 	andi	r2,r2,255
   2dd2c:	10001126 	beq	r2,zero,2dd74 <secp256k1_scalar_mul_512+0x1a2c>
   2dd30:	e0bd8017 	ldw	r2,-2560(fp)
   2dd34:	1005003a 	cmpeq	r2,r2,zero
   2dd38:	10803fcc 	andi	r2,r2,255
   2dd3c:	10000d26 	beq	r2,zero,2dd74 <secp256k1_scalar_mul_512+0x1a2c>
   2dd40:	d0a01617 	ldw	r2,-32680(gp)
   2dd44:	10c00317 	ldw	r3,12(r2)
   2dd48:	00800174 	movhi	r2,5
   2dd4c:	1096d604 	addi	r2,r2,23384
   2dd50:	d8800015 	stw	r2,0(sp)
   2dd54:	01c082c4 	movi	r7,523
   2dd58:	01800174 	movhi	r6,5
   2dd5c:	31964204 	addi	r6,r6,22792
   2dd60:	01400174 	movhi	r5,5
   2dd64:	2951e804 	addi	r5,r5,18336
   2dd68:	1809883a 	mov	r4,r3
   2dd6c:	00461000 	call	46100 <fprintf>
   2dd70:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[1], b->d[5]);
   2dd74:	e0be8217 	ldw	r2,-1528(fp)
   2dd78:	10800117 	ldw	r2,4(r2)
   2dd7c:	e0befc15 	stw	r2,-1040(fp)
   2dd80:	e03efd15 	stw	zero,-1036(fp)
   2dd84:	e0be8317 	ldw	r2,-1524(fp)
   2dd88:	10800517 	ldw	r2,20(r2)
   2dd8c:	e0befe15 	stw	r2,-1032(fp)
   2dd90:	e03eff15 	stw	zero,-1028(fp)
   2dd94:	e1befe17 	ldw	r6,-1032(fp)
   2dd98:	e1feff17 	ldw	r7,-1028(fp)
   2dd9c:	e13efc17 	ldw	r4,-1040(fp)
   2dda0:	e17efd17 	ldw	r5,-1036(fp)
   2dda4:	00438e00 	call	438e0 <__muldi3>
   2dda8:	1009883a 	mov	r4,r2
   2ddac:	180b883a 	mov	r5,r3
   2ddb0:	e13dd915 	stw	r4,-2204(fp)
   2ddb4:	e17dda15 	stw	r5,-2200(fp)
   2ddb8:	e0bdda17 	ldw	r2,-2200(fp)
   2ddbc:	1004d83a 	srl	r2,r2,zero
   2ddc0:	e0bf0015 	stw	r2,-1024(fp)
   2ddc4:	e03f0115 	stw	zero,-1020(fp)
   2ddc8:	e0bf0017 	ldw	r2,-1024(fp)
   2ddcc:	e0bddb15 	stw	r2,-2196(fp)
   2ddd0:	e0bdd917 	ldw	r2,-2204(fp)
   2ddd4:	e0bddc15 	stw	r2,-2192(fp)
   2ddd8:	e0fd7e17 	ldw	r3,-2568(fp)
   2dddc:	e0bddc17 	ldw	r2,-2192(fp)
   2dde0:	1885883a 	add	r2,r3,r2
   2dde4:	e0bd7e15 	stw	r2,-2568(fp)
   2dde8:	e0fd7e17 	ldw	r3,-2568(fp)
   2ddec:	e0bddc17 	ldw	r2,-2192(fp)
   2ddf0:	1880022e 	bgeu	r3,r2,2ddfc <secp256k1_scalar_mul_512+0x1ab4>
   2ddf4:	00c00044 	movi	r3,1
   2ddf8:	00000106 	br	2de00 <secp256k1_scalar_mul_512+0x1ab8>
   2ddfc:	0007883a 	mov	r3,zero
   2de00:	e0bddb17 	ldw	r2,-2196(fp)
   2de04:	10c5883a 	add	r2,r2,r3
   2de08:	e0bddb15 	stw	r2,-2196(fp)
   2de0c:	e0fd7f17 	ldw	r3,-2564(fp)
   2de10:	e0bddb17 	ldw	r2,-2196(fp)
   2de14:	1885883a 	add	r2,r3,r2
   2de18:	e0bd7f15 	stw	r2,-2564(fp)
   2de1c:	e0fd7f17 	ldw	r3,-2564(fp)
   2de20:	e0bddb17 	ldw	r2,-2196(fp)
   2de24:	1880022e 	bgeu	r3,r2,2de30 <secp256k1_scalar_mul_512+0x1ae8>
   2de28:	00c00044 	movi	r3,1
   2de2c:	00000106 	br	2de34 <secp256k1_scalar_mul_512+0x1aec>
   2de30:	0007883a 	mov	r3,zero
   2de34:	e0bd8017 	ldw	r2,-2560(fp)
   2de38:	10c5883a 	add	r2,r2,r3
   2de3c:	e0bd8015 	stw	r2,-2560(fp)
   2de40:	e0fd7f17 	ldw	r3,-2564(fp)
   2de44:	e0bddb17 	ldw	r2,-2196(fp)
   2de48:	1885803a 	cmpltu	r2,r3,r2
   2de4c:	10803fcc 	andi	r2,r2,255
   2de50:	10001126 	beq	r2,zero,2de98 <secp256k1_scalar_mul_512+0x1b50>
   2de54:	e0bd8017 	ldw	r2,-2560(fp)
   2de58:	1005003a 	cmpeq	r2,r2,zero
   2de5c:	10803fcc 	andi	r2,r2,255
   2de60:	10000d26 	beq	r2,zero,2de98 <secp256k1_scalar_mul_512+0x1b50>
   2de64:	d0a01617 	ldw	r2,-32680(gp)
   2de68:	10c00317 	ldw	r3,12(r2)
   2de6c:	00800174 	movhi	r2,5
   2de70:	1096d604 	addi	r2,r2,23384
   2de74:	d8800015 	stw	r2,0(sp)
   2de78:	01c08304 	movi	r7,524
   2de7c:	01800174 	movhi	r6,5
   2de80:	31964204 	addi	r6,r6,22792
   2de84:	01400174 	movhi	r5,5
   2de88:	2951e804 	addi	r5,r5,18336
   2de8c:	1809883a 	mov	r4,r3
   2de90:	00461000 	call	46100 <fprintf>
   2de94:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[2], b->d[4]);
   2de98:	e0be8217 	ldw	r2,-1528(fp)
   2de9c:	10800217 	ldw	r2,8(r2)
   2dea0:	e0bf0215 	stw	r2,-1016(fp)
   2dea4:	e03f0315 	stw	zero,-1012(fp)
   2dea8:	e0be8317 	ldw	r2,-1524(fp)
   2deac:	10800417 	ldw	r2,16(r2)
   2deb0:	e0bf0415 	stw	r2,-1008(fp)
   2deb4:	e03f0515 	stw	zero,-1004(fp)
   2deb8:	e1bf0417 	ldw	r6,-1008(fp)
   2debc:	e1ff0517 	ldw	r7,-1004(fp)
   2dec0:	e13f0217 	ldw	r4,-1016(fp)
   2dec4:	e17f0317 	ldw	r5,-1012(fp)
   2dec8:	00438e00 	call	438e0 <__muldi3>
   2decc:	1009883a 	mov	r4,r2
   2ded0:	180b883a 	mov	r5,r3
   2ded4:	e13ddd15 	stw	r4,-2188(fp)
   2ded8:	e17dde15 	stw	r5,-2184(fp)
   2dedc:	e0bdde17 	ldw	r2,-2184(fp)
   2dee0:	1004d83a 	srl	r2,r2,zero
   2dee4:	e0bf0615 	stw	r2,-1000(fp)
   2dee8:	e03f0715 	stw	zero,-996(fp)
   2deec:	e0bf0617 	ldw	r2,-1000(fp)
   2def0:	e0bddf15 	stw	r2,-2180(fp)
   2def4:	e0bddd17 	ldw	r2,-2188(fp)
   2def8:	e0bde015 	stw	r2,-2176(fp)
   2defc:	e0fd7e17 	ldw	r3,-2568(fp)
   2df00:	e0bde017 	ldw	r2,-2176(fp)
   2df04:	1885883a 	add	r2,r3,r2
   2df08:	e0bd7e15 	stw	r2,-2568(fp)
   2df0c:	e0fd7e17 	ldw	r3,-2568(fp)
   2df10:	e0bde017 	ldw	r2,-2176(fp)
   2df14:	1880022e 	bgeu	r3,r2,2df20 <secp256k1_scalar_mul_512+0x1bd8>
   2df18:	00c00044 	movi	r3,1
   2df1c:	00000106 	br	2df24 <secp256k1_scalar_mul_512+0x1bdc>
   2df20:	0007883a 	mov	r3,zero
   2df24:	e0bddf17 	ldw	r2,-2180(fp)
   2df28:	10c5883a 	add	r2,r2,r3
   2df2c:	e0bddf15 	stw	r2,-2180(fp)
   2df30:	e0fd7f17 	ldw	r3,-2564(fp)
   2df34:	e0bddf17 	ldw	r2,-2180(fp)
   2df38:	1885883a 	add	r2,r3,r2
   2df3c:	e0bd7f15 	stw	r2,-2564(fp)
   2df40:	e0fd7f17 	ldw	r3,-2564(fp)
   2df44:	e0bddf17 	ldw	r2,-2180(fp)
   2df48:	1880022e 	bgeu	r3,r2,2df54 <secp256k1_scalar_mul_512+0x1c0c>
   2df4c:	00c00044 	movi	r3,1
   2df50:	00000106 	br	2df58 <secp256k1_scalar_mul_512+0x1c10>
   2df54:	0007883a 	mov	r3,zero
   2df58:	e0bd8017 	ldw	r2,-2560(fp)
   2df5c:	10c5883a 	add	r2,r2,r3
   2df60:	e0bd8015 	stw	r2,-2560(fp)
   2df64:	e0fd7f17 	ldw	r3,-2564(fp)
   2df68:	e0bddf17 	ldw	r2,-2180(fp)
   2df6c:	1885803a 	cmpltu	r2,r3,r2
   2df70:	10803fcc 	andi	r2,r2,255
   2df74:	10001126 	beq	r2,zero,2dfbc <secp256k1_scalar_mul_512+0x1c74>
   2df78:	e0bd8017 	ldw	r2,-2560(fp)
   2df7c:	1005003a 	cmpeq	r2,r2,zero
   2df80:	10803fcc 	andi	r2,r2,255
   2df84:	10000d26 	beq	r2,zero,2dfbc <secp256k1_scalar_mul_512+0x1c74>
   2df88:	d0a01617 	ldw	r2,-32680(gp)
   2df8c:	10c00317 	ldw	r3,12(r2)
   2df90:	00800174 	movhi	r2,5
   2df94:	1096d604 	addi	r2,r2,23384
   2df98:	d8800015 	stw	r2,0(sp)
   2df9c:	01c08344 	movi	r7,525
   2dfa0:	01800174 	movhi	r6,5
   2dfa4:	31964204 	addi	r6,r6,22792
   2dfa8:	01400174 	movhi	r5,5
   2dfac:	2951e804 	addi	r5,r5,18336
   2dfb0:	1809883a 	mov	r4,r3
   2dfb4:	00461000 	call	46100 <fprintf>
   2dfb8:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[3], b->d[3]);
   2dfbc:	e0be8217 	ldw	r2,-1528(fp)
   2dfc0:	10800317 	ldw	r2,12(r2)
   2dfc4:	e0bf0815 	stw	r2,-992(fp)
   2dfc8:	e03f0915 	stw	zero,-988(fp)
   2dfcc:	e0be8317 	ldw	r2,-1524(fp)
   2dfd0:	10800317 	ldw	r2,12(r2)
   2dfd4:	e0bf0a15 	stw	r2,-984(fp)
   2dfd8:	e03f0b15 	stw	zero,-980(fp)
   2dfdc:	e1bf0a17 	ldw	r6,-984(fp)
   2dfe0:	e1ff0b17 	ldw	r7,-980(fp)
   2dfe4:	e13f0817 	ldw	r4,-992(fp)
   2dfe8:	e17f0917 	ldw	r5,-988(fp)
   2dfec:	00438e00 	call	438e0 <__muldi3>
   2dff0:	1009883a 	mov	r4,r2
   2dff4:	180b883a 	mov	r5,r3
   2dff8:	e13de115 	stw	r4,-2172(fp)
   2dffc:	e17de215 	stw	r5,-2168(fp)
   2e000:	e0bde217 	ldw	r2,-2168(fp)
   2e004:	1004d83a 	srl	r2,r2,zero
   2e008:	e0bf0c15 	stw	r2,-976(fp)
   2e00c:	e03f0d15 	stw	zero,-972(fp)
   2e010:	e0bf0c17 	ldw	r2,-976(fp)
   2e014:	e0bde315 	stw	r2,-2164(fp)
   2e018:	e0bde117 	ldw	r2,-2172(fp)
   2e01c:	e0bde415 	stw	r2,-2160(fp)
   2e020:	e0fd7e17 	ldw	r3,-2568(fp)
   2e024:	e0bde417 	ldw	r2,-2160(fp)
   2e028:	1885883a 	add	r2,r3,r2
   2e02c:	e0bd7e15 	stw	r2,-2568(fp)
   2e030:	e0fd7e17 	ldw	r3,-2568(fp)
   2e034:	e0bde417 	ldw	r2,-2160(fp)
   2e038:	1880022e 	bgeu	r3,r2,2e044 <secp256k1_scalar_mul_512+0x1cfc>
   2e03c:	00c00044 	movi	r3,1
   2e040:	00000106 	br	2e048 <secp256k1_scalar_mul_512+0x1d00>
   2e044:	0007883a 	mov	r3,zero
   2e048:	e0bde317 	ldw	r2,-2164(fp)
   2e04c:	10c5883a 	add	r2,r2,r3
   2e050:	e0bde315 	stw	r2,-2164(fp)
   2e054:	e0fd7f17 	ldw	r3,-2564(fp)
   2e058:	e0bde317 	ldw	r2,-2164(fp)
   2e05c:	1885883a 	add	r2,r3,r2
   2e060:	e0bd7f15 	stw	r2,-2564(fp)
   2e064:	e0fd7f17 	ldw	r3,-2564(fp)
   2e068:	e0bde317 	ldw	r2,-2164(fp)
   2e06c:	1880022e 	bgeu	r3,r2,2e078 <secp256k1_scalar_mul_512+0x1d30>
   2e070:	00c00044 	movi	r3,1
   2e074:	00000106 	br	2e07c <secp256k1_scalar_mul_512+0x1d34>
   2e078:	0007883a 	mov	r3,zero
   2e07c:	e0bd8017 	ldw	r2,-2560(fp)
   2e080:	10c5883a 	add	r2,r2,r3
   2e084:	e0bd8015 	stw	r2,-2560(fp)
   2e088:	e0fd7f17 	ldw	r3,-2564(fp)
   2e08c:	e0bde317 	ldw	r2,-2164(fp)
   2e090:	1885803a 	cmpltu	r2,r3,r2
   2e094:	10803fcc 	andi	r2,r2,255
   2e098:	10001126 	beq	r2,zero,2e0e0 <secp256k1_scalar_mul_512+0x1d98>
   2e09c:	e0bd8017 	ldw	r2,-2560(fp)
   2e0a0:	1005003a 	cmpeq	r2,r2,zero
   2e0a4:	10803fcc 	andi	r2,r2,255
   2e0a8:	10000d26 	beq	r2,zero,2e0e0 <secp256k1_scalar_mul_512+0x1d98>
   2e0ac:	d0a01617 	ldw	r2,-32680(gp)
   2e0b0:	10c00317 	ldw	r3,12(r2)
   2e0b4:	00800174 	movhi	r2,5
   2e0b8:	1096d604 	addi	r2,r2,23384
   2e0bc:	d8800015 	stw	r2,0(sp)
   2e0c0:	01c08384 	movi	r7,526
   2e0c4:	01800174 	movhi	r6,5
   2e0c8:	31964204 	addi	r6,r6,22792
   2e0cc:	01400174 	movhi	r5,5
   2e0d0:	2951e804 	addi	r5,r5,18336
   2e0d4:	1809883a 	mov	r4,r3
   2e0d8:	00461000 	call	46100 <fprintf>
   2e0dc:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[4], b->d[2]);
   2e0e0:	e0be8217 	ldw	r2,-1528(fp)
   2e0e4:	10800417 	ldw	r2,16(r2)
   2e0e8:	e0bf0e15 	stw	r2,-968(fp)
   2e0ec:	e03f0f15 	stw	zero,-964(fp)
   2e0f0:	e0be8317 	ldw	r2,-1524(fp)
   2e0f4:	10800217 	ldw	r2,8(r2)
   2e0f8:	e0bf1015 	stw	r2,-960(fp)
   2e0fc:	e03f1115 	stw	zero,-956(fp)
   2e100:	e1bf1017 	ldw	r6,-960(fp)
   2e104:	e1ff1117 	ldw	r7,-956(fp)
   2e108:	e13f0e17 	ldw	r4,-968(fp)
   2e10c:	e17f0f17 	ldw	r5,-964(fp)
   2e110:	00438e00 	call	438e0 <__muldi3>
   2e114:	1009883a 	mov	r4,r2
   2e118:	180b883a 	mov	r5,r3
   2e11c:	e13de515 	stw	r4,-2156(fp)
   2e120:	e17de615 	stw	r5,-2152(fp)
   2e124:	e0bde617 	ldw	r2,-2152(fp)
   2e128:	1004d83a 	srl	r2,r2,zero
   2e12c:	e0bf1215 	stw	r2,-952(fp)
   2e130:	e03f1315 	stw	zero,-948(fp)
   2e134:	e0bf1217 	ldw	r2,-952(fp)
   2e138:	e0bde715 	stw	r2,-2148(fp)
   2e13c:	e0bde517 	ldw	r2,-2156(fp)
   2e140:	e0bde815 	stw	r2,-2144(fp)
   2e144:	e0fd7e17 	ldw	r3,-2568(fp)
   2e148:	e0bde817 	ldw	r2,-2144(fp)
   2e14c:	1885883a 	add	r2,r3,r2
   2e150:	e0bd7e15 	stw	r2,-2568(fp)
   2e154:	e0fd7e17 	ldw	r3,-2568(fp)
   2e158:	e0bde817 	ldw	r2,-2144(fp)
   2e15c:	1880022e 	bgeu	r3,r2,2e168 <secp256k1_scalar_mul_512+0x1e20>
   2e160:	00c00044 	movi	r3,1
   2e164:	00000106 	br	2e16c <secp256k1_scalar_mul_512+0x1e24>
   2e168:	0007883a 	mov	r3,zero
   2e16c:	e0bde717 	ldw	r2,-2148(fp)
   2e170:	10c5883a 	add	r2,r2,r3
   2e174:	e0bde715 	stw	r2,-2148(fp)
   2e178:	e0fd7f17 	ldw	r3,-2564(fp)
   2e17c:	e0bde717 	ldw	r2,-2148(fp)
   2e180:	1885883a 	add	r2,r3,r2
   2e184:	e0bd7f15 	stw	r2,-2564(fp)
   2e188:	e0fd7f17 	ldw	r3,-2564(fp)
   2e18c:	e0bde717 	ldw	r2,-2148(fp)
   2e190:	1880022e 	bgeu	r3,r2,2e19c <secp256k1_scalar_mul_512+0x1e54>
   2e194:	00c00044 	movi	r3,1
   2e198:	00000106 	br	2e1a0 <secp256k1_scalar_mul_512+0x1e58>
   2e19c:	0007883a 	mov	r3,zero
   2e1a0:	e0bd8017 	ldw	r2,-2560(fp)
   2e1a4:	10c5883a 	add	r2,r2,r3
   2e1a8:	e0bd8015 	stw	r2,-2560(fp)
   2e1ac:	e0fd7f17 	ldw	r3,-2564(fp)
   2e1b0:	e0bde717 	ldw	r2,-2148(fp)
   2e1b4:	1885803a 	cmpltu	r2,r3,r2
   2e1b8:	10803fcc 	andi	r2,r2,255
   2e1bc:	10001126 	beq	r2,zero,2e204 <secp256k1_scalar_mul_512+0x1ebc>
   2e1c0:	e0bd8017 	ldw	r2,-2560(fp)
   2e1c4:	1005003a 	cmpeq	r2,r2,zero
   2e1c8:	10803fcc 	andi	r2,r2,255
   2e1cc:	10000d26 	beq	r2,zero,2e204 <secp256k1_scalar_mul_512+0x1ebc>
   2e1d0:	d0a01617 	ldw	r2,-32680(gp)
   2e1d4:	10c00317 	ldw	r3,12(r2)
   2e1d8:	00800174 	movhi	r2,5
   2e1dc:	1096d604 	addi	r2,r2,23384
   2e1e0:	d8800015 	stw	r2,0(sp)
   2e1e4:	01c083c4 	movi	r7,527
   2e1e8:	01800174 	movhi	r6,5
   2e1ec:	31964204 	addi	r6,r6,22792
   2e1f0:	01400174 	movhi	r5,5
   2e1f4:	2951e804 	addi	r5,r5,18336
   2e1f8:	1809883a 	mov	r4,r3
   2e1fc:	00461000 	call	46100 <fprintf>
   2e200:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[5], b->d[1]);
   2e204:	e0be8217 	ldw	r2,-1528(fp)
   2e208:	10800517 	ldw	r2,20(r2)
   2e20c:	e0bf1415 	stw	r2,-944(fp)
   2e210:	e03f1515 	stw	zero,-940(fp)
   2e214:	e0be8317 	ldw	r2,-1524(fp)
   2e218:	10800117 	ldw	r2,4(r2)
   2e21c:	e0bf1615 	stw	r2,-936(fp)
   2e220:	e03f1715 	stw	zero,-932(fp)
   2e224:	e1bf1617 	ldw	r6,-936(fp)
   2e228:	e1ff1717 	ldw	r7,-932(fp)
   2e22c:	e13f1417 	ldw	r4,-944(fp)
   2e230:	e17f1517 	ldw	r5,-940(fp)
   2e234:	00438e00 	call	438e0 <__muldi3>
   2e238:	1009883a 	mov	r4,r2
   2e23c:	180b883a 	mov	r5,r3
   2e240:	e13de915 	stw	r4,-2140(fp)
   2e244:	e17dea15 	stw	r5,-2136(fp)
   2e248:	e0bdea17 	ldw	r2,-2136(fp)
   2e24c:	1004d83a 	srl	r2,r2,zero
   2e250:	e0bf1815 	stw	r2,-928(fp)
   2e254:	e03f1915 	stw	zero,-924(fp)
   2e258:	e0bf1817 	ldw	r2,-928(fp)
   2e25c:	e0bdeb15 	stw	r2,-2132(fp)
   2e260:	e0bde917 	ldw	r2,-2140(fp)
   2e264:	e0bdec15 	stw	r2,-2128(fp)
   2e268:	e0fd7e17 	ldw	r3,-2568(fp)
   2e26c:	e0bdec17 	ldw	r2,-2128(fp)
   2e270:	1885883a 	add	r2,r3,r2
   2e274:	e0bd7e15 	stw	r2,-2568(fp)
   2e278:	e0fd7e17 	ldw	r3,-2568(fp)
   2e27c:	e0bdec17 	ldw	r2,-2128(fp)
   2e280:	1880022e 	bgeu	r3,r2,2e28c <secp256k1_scalar_mul_512+0x1f44>
   2e284:	00c00044 	movi	r3,1
   2e288:	00000106 	br	2e290 <secp256k1_scalar_mul_512+0x1f48>
   2e28c:	0007883a 	mov	r3,zero
   2e290:	e0bdeb17 	ldw	r2,-2132(fp)
   2e294:	10c5883a 	add	r2,r2,r3
   2e298:	e0bdeb15 	stw	r2,-2132(fp)
   2e29c:	e0fd7f17 	ldw	r3,-2564(fp)
   2e2a0:	e0bdeb17 	ldw	r2,-2132(fp)
   2e2a4:	1885883a 	add	r2,r3,r2
   2e2a8:	e0bd7f15 	stw	r2,-2564(fp)
   2e2ac:	e0fd7f17 	ldw	r3,-2564(fp)
   2e2b0:	e0bdeb17 	ldw	r2,-2132(fp)
   2e2b4:	1880022e 	bgeu	r3,r2,2e2c0 <secp256k1_scalar_mul_512+0x1f78>
   2e2b8:	00c00044 	movi	r3,1
   2e2bc:	00000106 	br	2e2c4 <secp256k1_scalar_mul_512+0x1f7c>
   2e2c0:	0007883a 	mov	r3,zero
   2e2c4:	e0bd8017 	ldw	r2,-2560(fp)
   2e2c8:	10c5883a 	add	r2,r2,r3
   2e2cc:	e0bd8015 	stw	r2,-2560(fp)
   2e2d0:	e0fd7f17 	ldw	r3,-2564(fp)
   2e2d4:	e0bdeb17 	ldw	r2,-2132(fp)
   2e2d8:	1885803a 	cmpltu	r2,r3,r2
   2e2dc:	10803fcc 	andi	r2,r2,255
   2e2e0:	10001126 	beq	r2,zero,2e328 <secp256k1_scalar_mul_512+0x1fe0>
   2e2e4:	e0bd8017 	ldw	r2,-2560(fp)
   2e2e8:	1005003a 	cmpeq	r2,r2,zero
   2e2ec:	10803fcc 	andi	r2,r2,255
   2e2f0:	10000d26 	beq	r2,zero,2e328 <secp256k1_scalar_mul_512+0x1fe0>
   2e2f4:	d0a01617 	ldw	r2,-32680(gp)
   2e2f8:	10c00317 	ldw	r3,12(r2)
   2e2fc:	00800174 	movhi	r2,5
   2e300:	1096d604 	addi	r2,r2,23384
   2e304:	d8800015 	stw	r2,0(sp)
   2e308:	01c08404 	movi	r7,528
   2e30c:	01800174 	movhi	r6,5
   2e310:	31964204 	addi	r6,r6,22792
   2e314:	01400174 	movhi	r5,5
   2e318:	2951e804 	addi	r5,r5,18336
   2e31c:	1809883a 	mov	r4,r3
   2e320:	00461000 	call	46100 <fprintf>
   2e324:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[6], b->d[0]);
   2e328:	e0be8217 	ldw	r2,-1528(fp)
   2e32c:	10800617 	ldw	r2,24(r2)
   2e330:	e0bf1a15 	stw	r2,-920(fp)
   2e334:	e03f1b15 	stw	zero,-916(fp)
   2e338:	e0be8317 	ldw	r2,-1524(fp)
   2e33c:	10800017 	ldw	r2,0(r2)
   2e340:	e0bf1c15 	stw	r2,-912(fp)
   2e344:	e03f1d15 	stw	zero,-908(fp)
   2e348:	e1bf1c17 	ldw	r6,-912(fp)
   2e34c:	e1ff1d17 	ldw	r7,-908(fp)
   2e350:	e13f1a17 	ldw	r4,-920(fp)
   2e354:	e17f1b17 	ldw	r5,-916(fp)
   2e358:	00438e00 	call	438e0 <__muldi3>
   2e35c:	1009883a 	mov	r4,r2
   2e360:	180b883a 	mov	r5,r3
   2e364:	e13ded15 	stw	r4,-2124(fp)
   2e368:	e17dee15 	stw	r5,-2120(fp)
   2e36c:	e0bdee17 	ldw	r2,-2120(fp)
   2e370:	1004d83a 	srl	r2,r2,zero
   2e374:	e0bf1e15 	stw	r2,-904(fp)
   2e378:	e03f1f15 	stw	zero,-900(fp)
   2e37c:	e0bf1e17 	ldw	r2,-904(fp)
   2e380:	e0bdef15 	stw	r2,-2116(fp)
   2e384:	e0bded17 	ldw	r2,-2124(fp)
   2e388:	e0bdf015 	stw	r2,-2112(fp)
   2e38c:	e0fd7e17 	ldw	r3,-2568(fp)
   2e390:	e0bdf017 	ldw	r2,-2112(fp)
   2e394:	1885883a 	add	r2,r3,r2
   2e398:	e0bd7e15 	stw	r2,-2568(fp)
   2e39c:	e0fd7e17 	ldw	r3,-2568(fp)
   2e3a0:	e0bdf017 	ldw	r2,-2112(fp)
   2e3a4:	1880022e 	bgeu	r3,r2,2e3b0 <secp256k1_scalar_mul_512+0x2068>
   2e3a8:	00c00044 	movi	r3,1
   2e3ac:	00000106 	br	2e3b4 <secp256k1_scalar_mul_512+0x206c>
   2e3b0:	0007883a 	mov	r3,zero
   2e3b4:	e0bdef17 	ldw	r2,-2116(fp)
   2e3b8:	10c5883a 	add	r2,r2,r3
   2e3bc:	e0bdef15 	stw	r2,-2116(fp)
   2e3c0:	e0fd7f17 	ldw	r3,-2564(fp)
   2e3c4:	e0bdef17 	ldw	r2,-2116(fp)
   2e3c8:	1885883a 	add	r2,r3,r2
   2e3cc:	e0bd7f15 	stw	r2,-2564(fp)
   2e3d0:	e0fd7f17 	ldw	r3,-2564(fp)
   2e3d4:	e0bdef17 	ldw	r2,-2116(fp)
   2e3d8:	1880022e 	bgeu	r3,r2,2e3e4 <secp256k1_scalar_mul_512+0x209c>
   2e3dc:	00c00044 	movi	r3,1
   2e3e0:	00000106 	br	2e3e8 <secp256k1_scalar_mul_512+0x20a0>
   2e3e4:	0007883a 	mov	r3,zero
   2e3e8:	e0bd8017 	ldw	r2,-2560(fp)
   2e3ec:	10c5883a 	add	r2,r2,r3
   2e3f0:	e0bd8015 	stw	r2,-2560(fp)
   2e3f4:	e0fd7f17 	ldw	r3,-2564(fp)
   2e3f8:	e0bdef17 	ldw	r2,-2116(fp)
   2e3fc:	1885803a 	cmpltu	r2,r3,r2
   2e400:	10803fcc 	andi	r2,r2,255
   2e404:	10001126 	beq	r2,zero,2e44c <secp256k1_scalar_mul_512+0x2104>
   2e408:	e0bd8017 	ldw	r2,-2560(fp)
   2e40c:	1005003a 	cmpeq	r2,r2,zero
   2e410:	10803fcc 	andi	r2,r2,255
   2e414:	10000d26 	beq	r2,zero,2e44c <secp256k1_scalar_mul_512+0x2104>
   2e418:	d0a01617 	ldw	r2,-32680(gp)
   2e41c:	10c00317 	ldw	r3,12(r2)
   2e420:	00800174 	movhi	r2,5
   2e424:	1096d604 	addi	r2,r2,23384
   2e428:	d8800015 	stw	r2,0(sp)
   2e42c:	01c08444 	movi	r7,529
   2e430:	01800174 	movhi	r6,5
   2e434:	31964204 	addi	r6,r6,22792
   2e438:	01400174 	movhi	r5,5
   2e43c:	2951e804 	addi	r5,r5,18336
   2e440:	1809883a 	mov	r4,r3
   2e444:	00461000 	call	46100 <fprintf>
   2e448:	0045fd40 	call	45fd4 <abort>
    extract(l[6]);
   2e44c:	e0be8117 	ldw	r2,-1532(fp)
   2e450:	10c00604 	addi	r3,r2,24
   2e454:	e0bd7e17 	ldw	r2,-2568(fp)
   2e458:	18800015 	stw	r2,0(r3)
   2e45c:	e0bd7f17 	ldw	r2,-2564(fp)
   2e460:	e0bd7e15 	stw	r2,-2568(fp)
   2e464:	e0bd8017 	ldw	r2,-2560(fp)
   2e468:	e0bd7f15 	stw	r2,-2564(fp)
   2e46c:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[0], b->d[7]);
   2e470:	e0be8217 	ldw	r2,-1528(fp)
   2e474:	10800017 	ldw	r2,0(r2)
   2e478:	e0bf2015 	stw	r2,-896(fp)
   2e47c:	e03f2115 	stw	zero,-892(fp)
   2e480:	e0be8317 	ldw	r2,-1524(fp)
   2e484:	10800717 	ldw	r2,28(r2)
   2e488:	e0bf2215 	stw	r2,-888(fp)
   2e48c:	e03f2315 	stw	zero,-884(fp)
   2e490:	e1bf2217 	ldw	r6,-888(fp)
   2e494:	e1ff2317 	ldw	r7,-884(fp)
   2e498:	e13f2017 	ldw	r4,-896(fp)
   2e49c:	e17f2117 	ldw	r5,-892(fp)
   2e4a0:	00438e00 	call	438e0 <__muldi3>
   2e4a4:	1009883a 	mov	r4,r2
   2e4a8:	180b883a 	mov	r5,r3
   2e4ac:	e13df115 	stw	r4,-2108(fp)
   2e4b0:	e17df215 	stw	r5,-2104(fp)
   2e4b4:	e0bdf217 	ldw	r2,-2104(fp)
   2e4b8:	1004d83a 	srl	r2,r2,zero
   2e4bc:	e0bf2415 	stw	r2,-880(fp)
   2e4c0:	e03f2515 	stw	zero,-876(fp)
   2e4c4:	e0bf2417 	ldw	r2,-880(fp)
   2e4c8:	e0bdf315 	stw	r2,-2100(fp)
   2e4cc:	e0bdf117 	ldw	r2,-2108(fp)
   2e4d0:	e0bdf415 	stw	r2,-2096(fp)
   2e4d4:	e0fd7e17 	ldw	r3,-2568(fp)
   2e4d8:	e0bdf417 	ldw	r2,-2096(fp)
   2e4dc:	1885883a 	add	r2,r3,r2
   2e4e0:	e0bd7e15 	stw	r2,-2568(fp)
   2e4e4:	e0fd7e17 	ldw	r3,-2568(fp)
   2e4e8:	e0bdf417 	ldw	r2,-2096(fp)
   2e4ec:	1880022e 	bgeu	r3,r2,2e4f8 <secp256k1_scalar_mul_512+0x21b0>
   2e4f0:	00c00044 	movi	r3,1
   2e4f4:	00000106 	br	2e4fc <secp256k1_scalar_mul_512+0x21b4>
   2e4f8:	0007883a 	mov	r3,zero
   2e4fc:	e0bdf317 	ldw	r2,-2100(fp)
   2e500:	10c5883a 	add	r2,r2,r3
   2e504:	e0bdf315 	stw	r2,-2100(fp)
   2e508:	e0fd7f17 	ldw	r3,-2564(fp)
   2e50c:	e0bdf317 	ldw	r2,-2100(fp)
   2e510:	1885883a 	add	r2,r3,r2
   2e514:	e0bd7f15 	stw	r2,-2564(fp)
   2e518:	e0fd7f17 	ldw	r3,-2564(fp)
   2e51c:	e0bdf317 	ldw	r2,-2100(fp)
   2e520:	1880022e 	bgeu	r3,r2,2e52c <secp256k1_scalar_mul_512+0x21e4>
   2e524:	00c00044 	movi	r3,1
   2e528:	00000106 	br	2e530 <secp256k1_scalar_mul_512+0x21e8>
   2e52c:	0007883a 	mov	r3,zero
   2e530:	e0bd8017 	ldw	r2,-2560(fp)
   2e534:	10c5883a 	add	r2,r2,r3
   2e538:	e0bd8015 	stw	r2,-2560(fp)
   2e53c:	e0fd7f17 	ldw	r3,-2564(fp)
   2e540:	e0bdf317 	ldw	r2,-2100(fp)
   2e544:	1885803a 	cmpltu	r2,r3,r2
   2e548:	10803fcc 	andi	r2,r2,255
   2e54c:	10001126 	beq	r2,zero,2e594 <secp256k1_scalar_mul_512+0x224c>
   2e550:	e0bd8017 	ldw	r2,-2560(fp)
   2e554:	1005003a 	cmpeq	r2,r2,zero
   2e558:	10803fcc 	andi	r2,r2,255
   2e55c:	10000d26 	beq	r2,zero,2e594 <secp256k1_scalar_mul_512+0x224c>
   2e560:	d0a01617 	ldw	r2,-32680(gp)
   2e564:	10c00317 	ldw	r3,12(r2)
   2e568:	00800174 	movhi	r2,5
   2e56c:	1096d604 	addi	r2,r2,23384
   2e570:	d8800015 	stw	r2,0(sp)
   2e574:	01c084c4 	movi	r7,531
   2e578:	01800174 	movhi	r6,5
   2e57c:	31964204 	addi	r6,r6,22792
   2e580:	01400174 	movhi	r5,5
   2e584:	2951e804 	addi	r5,r5,18336
   2e588:	1809883a 	mov	r4,r3
   2e58c:	00461000 	call	46100 <fprintf>
   2e590:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[1], b->d[6]);
   2e594:	e0be8217 	ldw	r2,-1528(fp)
   2e598:	10800117 	ldw	r2,4(r2)
   2e59c:	e0bf2615 	stw	r2,-872(fp)
   2e5a0:	e03f2715 	stw	zero,-868(fp)
   2e5a4:	e0be8317 	ldw	r2,-1524(fp)
   2e5a8:	10800617 	ldw	r2,24(r2)
   2e5ac:	e0bf2815 	stw	r2,-864(fp)
   2e5b0:	e03f2915 	stw	zero,-860(fp)
   2e5b4:	e1bf2817 	ldw	r6,-864(fp)
   2e5b8:	e1ff2917 	ldw	r7,-860(fp)
   2e5bc:	e13f2617 	ldw	r4,-872(fp)
   2e5c0:	e17f2717 	ldw	r5,-868(fp)
   2e5c4:	00438e00 	call	438e0 <__muldi3>
   2e5c8:	1009883a 	mov	r4,r2
   2e5cc:	180b883a 	mov	r5,r3
   2e5d0:	e13df515 	stw	r4,-2092(fp)
   2e5d4:	e17df615 	stw	r5,-2088(fp)
   2e5d8:	e0bdf617 	ldw	r2,-2088(fp)
   2e5dc:	1004d83a 	srl	r2,r2,zero
   2e5e0:	e0bf2a15 	stw	r2,-856(fp)
   2e5e4:	e03f2b15 	stw	zero,-852(fp)
   2e5e8:	e0bf2a17 	ldw	r2,-856(fp)
   2e5ec:	e0bdf715 	stw	r2,-2084(fp)
   2e5f0:	e0bdf517 	ldw	r2,-2092(fp)
   2e5f4:	e0bdf815 	stw	r2,-2080(fp)
   2e5f8:	e0fd7e17 	ldw	r3,-2568(fp)
   2e5fc:	e0bdf817 	ldw	r2,-2080(fp)
   2e600:	1885883a 	add	r2,r3,r2
   2e604:	e0bd7e15 	stw	r2,-2568(fp)
   2e608:	e0fd7e17 	ldw	r3,-2568(fp)
   2e60c:	e0bdf817 	ldw	r2,-2080(fp)
   2e610:	1880022e 	bgeu	r3,r2,2e61c <secp256k1_scalar_mul_512+0x22d4>
   2e614:	00c00044 	movi	r3,1
   2e618:	00000106 	br	2e620 <secp256k1_scalar_mul_512+0x22d8>
   2e61c:	0007883a 	mov	r3,zero
   2e620:	e0bdf717 	ldw	r2,-2084(fp)
   2e624:	10c5883a 	add	r2,r2,r3
   2e628:	e0bdf715 	stw	r2,-2084(fp)
   2e62c:	e0fd7f17 	ldw	r3,-2564(fp)
   2e630:	e0bdf717 	ldw	r2,-2084(fp)
   2e634:	1885883a 	add	r2,r3,r2
   2e638:	e0bd7f15 	stw	r2,-2564(fp)
   2e63c:	e0fd7f17 	ldw	r3,-2564(fp)
   2e640:	e0bdf717 	ldw	r2,-2084(fp)
   2e644:	1880022e 	bgeu	r3,r2,2e650 <secp256k1_scalar_mul_512+0x2308>
   2e648:	00c00044 	movi	r3,1
   2e64c:	00000106 	br	2e654 <secp256k1_scalar_mul_512+0x230c>
   2e650:	0007883a 	mov	r3,zero
   2e654:	e0bd8017 	ldw	r2,-2560(fp)
   2e658:	10c5883a 	add	r2,r2,r3
   2e65c:	e0bd8015 	stw	r2,-2560(fp)
   2e660:	e0fd7f17 	ldw	r3,-2564(fp)
   2e664:	e0bdf717 	ldw	r2,-2084(fp)
   2e668:	1885803a 	cmpltu	r2,r3,r2
   2e66c:	10803fcc 	andi	r2,r2,255
   2e670:	10001126 	beq	r2,zero,2e6b8 <secp256k1_scalar_mul_512+0x2370>
   2e674:	e0bd8017 	ldw	r2,-2560(fp)
   2e678:	1005003a 	cmpeq	r2,r2,zero
   2e67c:	10803fcc 	andi	r2,r2,255
   2e680:	10000d26 	beq	r2,zero,2e6b8 <secp256k1_scalar_mul_512+0x2370>
   2e684:	d0a01617 	ldw	r2,-32680(gp)
   2e688:	10c00317 	ldw	r3,12(r2)
   2e68c:	00800174 	movhi	r2,5
   2e690:	1096d604 	addi	r2,r2,23384
   2e694:	d8800015 	stw	r2,0(sp)
   2e698:	01c08504 	movi	r7,532
   2e69c:	01800174 	movhi	r6,5
   2e6a0:	31964204 	addi	r6,r6,22792
   2e6a4:	01400174 	movhi	r5,5
   2e6a8:	2951e804 	addi	r5,r5,18336
   2e6ac:	1809883a 	mov	r4,r3
   2e6b0:	00461000 	call	46100 <fprintf>
   2e6b4:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[2], b->d[5]);
   2e6b8:	e0be8217 	ldw	r2,-1528(fp)
   2e6bc:	10800217 	ldw	r2,8(r2)
   2e6c0:	e0bf2c15 	stw	r2,-848(fp)
   2e6c4:	e03f2d15 	stw	zero,-844(fp)
   2e6c8:	e0be8317 	ldw	r2,-1524(fp)
   2e6cc:	10800517 	ldw	r2,20(r2)
   2e6d0:	e0bf2e15 	stw	r2,-840(fp)
   2e6d4:	e03f2f15 	stw	zero,-836(fp)
   2e6d8:	e1bf2e17 	ldw	r6,-840(fp)
   2e6dc:	e1ff2f17 	ldw	r7,-836(fp)
   2e6e0:	e13f2c17 	ldw	r4,-848(fp)
   2e6e4:	e17f2d17 	ldw	r5,-844(fp)
   2e6e8:	00438e00 	call	438e0 <__muldi3>
   2e6ec:	1009883a 	mov	r4,r2
   2e6f0:	180b883a 	mov	r5,r3
   2e6f4:	e13df915 	stw	r4,-2076(fp)
   2e6f8:	e17dfa15 	stw	r5,-2072(fp)
   2e6fc:	e0bdfa17 	ldw	r2,-2072(fp)
   2e700:	1004d83a 	srl	r2,r2,zero
   2e704:	e0bf3015 	stw	r2,-832(fp)
   2e708:	e03f3115 	stw	zero,-828(fp)
   2e70c:	e0bf3017 	ldw	r2,-832(fp)
   2e710:	e0bdfb15 	stw	r2,-2068(fp)
   2e714:	e0bdf917 	ldw	r2,-2076(fp)
   2e718:	e0bdfc15 	stw	r2,-2064(fp)
   2e71c:	e0fd7e17 	ldw	r3,-2568(fp)
   2e720:	e0bdfc17 	ldw	r2,-2064(fp)
   2e724:	1885883a 	add	r2,r3,r2
   2e728:	e0bd7e15 	stw	r2,-2568(fp)
   2e72c:	e0fd7e17 	ldw	r3,-2568(fp)
   2e730:	e0bdfc17 	ldw	r2,-2064(fp)
   2e734:	1880022e 	bgeu	r3,r2,2e740 <secp256k1_scalar_mul_512+0x23f8>
   2e738:	00c00044 	movi	r3,1
   2e73c:	00000106 	br	2e744 <secp256k1_scalar_mul_512+0x23fc>
   2e740:	0007883a 	mov	r3,zero
   2e744:	e0bdfb17 	ldw	r2,-2068(fp)
   2e748:	10c5883a 	add	r2,r2,r3
   2e74c:	e0bdfb15 	stw	r2,-2068(fp)
   2e750:	e0fd7f17 	ldw	r3,-2564(fp)
   2e754:	e0bdfb17 	ldw	r2,-2068(fp)
   2e758:	1885883a 	add	r2,r3,r2
   2e75c:	e0bd7f15 	stw	r2,-2564(fp)
   2e760:	e0fd7f17 	ldw	r3,-2564(fp)
   2e764:	e0bdfb17 	ldw	r2,-2068(fp)
   2e768:	1880022e 	bgeu	r3,r2,2e774 <secp256k1_scalar_mul_512+0x242c>
   2e76c:	00c00044 	movi	r3,1
   2e770:	00000106 	br	2e778 <secp256k1_scalar_mul_512+0x2430>
   2e774:	0007883a 	mov	r3,zero
   2e778:	e0bd8017 	ldw	r2,-2560(fp)
   2e77c:	10c5883a 	add	r2,r2,r3
   2e780:	e0bd8015 	stw	r2,-2560(fp)
   2e784:	e0fd7f17 	ldw	r3,-2564(fp)
   2e788:	e0bdfb17 	ldw	r2,-2068(fp)
   2e78c:	1885803a 	cmpltu	r2,r3,r2
   2e790:	10803fcc 	andi	r2,r2,255
   2e794:	10001126 	beq	r2,zero,2e7dc <secp256k1_scalar_mul_512+0x2494>
   2e798:	e0bd8017 	ldw	r2,-2560(fp)
   2e79c:	1005003a 	cmpeq	r2,r2,zero
   2e7a0:	10803fcc 	andi	r2,r2,255
   2e7a4:	10000d26 	beq	r2,zero,2e7dc <secp256k1_scalar_mul_512+0x2494>
   2e7a8:	d0a01617 	ldw	r2,-32680(gp)
   2e7ac:	10c00317 	ldw	r3,12(r2)
   2e7b0:	00800174 	movhi	r2,5
   2e7b4:	1096d604 	addi	r2,r2,23384
   2e7b8:	d8800015 	stw	r2,0(sp)
   2e7bc:	01c08544 	movi	r7,533
   2e7c0:	01800174 	movhi	r6,5
   2e7c4:	31964204 	addi	r6,r6,22792
   2e7c8:	01400174 	movhi	r5,5
   2e7cc:	2951e804 	addi	r5,r5,18336
   2e7d0:	1809883a 	mov	r4,r3
   2e7d4:	00461000 	call	46100 <fprintf>
   2e7d8:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[3], b->d[4]);
   2e7dc:	e0be8217 	ldw	r2,-1528(fp)
   2e7e0:	10800317 	ldw	r2,12(r2)
   2e7e4:	e0bf3215 	stw	r2,-824(fp)
   2e7e8:	e03f3315 	stw	zero,-820(fp)
   2e7ec:	e0be8317 	ldw	r2,-1524(fp)
   2e7f0:	10800417 	ldw	r2,16(r2)
   2e7f4:	e0bf3415 	stw	r2,-816(fp)
   2e7f8:	e03f3515 	stw	zero,-812(fp)
   2e7fc:	e1bf3417 	ldw	r6,-816(fp)
   2e800:	e1ff3517 	ldw	r7,-812(fp)
   2e804:	e13f3217 	ldw	r4,-824(fp)
   2e808:	e17f3317 	ldw	r5,-820(fp)
   2e80c:	00438e00 	call	438e0 <__muldi3>
   2e810:	1009883a 	mov	r4,r2
   2e814:	180b883a 	mov	r5,r3
   2e818:	e13dfd15 	stw	r4,-2060(fp)
   2e81c:	e17dfe15 	stw	r5,-2056(fp)
   2e820:	e0bdfe17 	ldw	r2,-2056(fp)
   2e824:	1004d83a 	srl	r2,r2,zero
   2e828:	e0bf3615 	stw	r2,-808(fp)
   2e82c:	e03f3715 	stw	zero,-804(fp)
   2e830:	e0bf3617 	ldw	r2,-808(fp)
   2e834:	e0bdff15 	stw	r2,-2052(fp)
   2e838:	e0bdfd17 	ldw	r2,-2060(fp)
   2e83c:	e0be0015 	stw	r2,-2048(fp)
   2e840:	e0fd7e17 	ldw	r3,-2568(fp)
   2e844:	e0be0017 	ldw	r2,-2048(fp)
   2e848:	1885883a 	add	r2,r3,r2
   2e84c:	e0bd7e15 	stw	r2,-2568(fp)
   2e850:	e0fd7e17 	ldw	r3,-2568(fp)
   2e854:	e0be0017 	ldw	r2,-2048(fp)
   2e858:	1880022e 	bgeu	r3,r2,2e864 <secp256k1_scalar_mul_512+0x251c>
   2e85c:	00c00044 	movi	r3,1
   2e860:	00000106 	br	2e868 <secp256k1_scalar_mul_512+0x2520>
   2e864:	0007883a 	mov	r3,zero
   2e868:	e0bdff17 	ldw	r2,-2052(fp)
   2e86c:	10c5883a 	add	r2,r2,r3
   2e870:	e0bdff15 	stw	r2,-2052(fp)
   2e874:	e0fd7f17 	ldw	r3,-2564(fp)
   2e878:	e0bdff17 	ldw	r2,-2052(fp)
   2e87c:	1885883a 	add	r2,r3,r2
   2e880:	e0bd7f15 	stw	r2,-2564(fp)
   2e884:	e0fd7f17 	ldw	r3,-2564(fp)
   2e888:	e0bdff17 	ldw	r2,-2052(fp)
   2e88c:	1880022e 	bgeu	r3,r2,2e898 <secp256k1_scalar_mul_512+0x2550>
   2e890:	00c00044 	movi	r3,1
   2e894:	00000106 	br	2e89c <secp256k1_scalar_mul_512+0x2554>
   2e898:	0007883a 	mov	r3,zero
   2e89c:	e0bd8017 	ldw	r2,-2560(fp)
   2e8a0:	10c5883a 	add	r2,r2,r3
   2e8a4:	e0bd8015 	stw	r2,-2560(fp)
   2e8a8:	e0fd7f17 	ldw	r3,-2564(fp)
   2e8ac:	e0bdff17 	ldw	r2,-2052(fp)
   2e8b0:	1885803a 	cmpltu	r2,r3,r2
   2e8b4:	10803fcc 	andi	r2,r2,255
   2e8b8:	10001126 	beq	r2,zero,2e900 <secp256k1_scalar_mul_512+0x25b8>
   2e8bc:	e0bd8017 	ldw	r2,-2560(fp)
   2e8c0:	1005003a 	cmpeq	r2,r2,zero
   2e8c4:	10803fcc 	andi	r2,r2,255
   2e8c8:	10000d26 	beq	r2,zero,2e900 <secp256k1_scalar_mul_512+0x25b8>
   2e8cc:	d0a01617 	ldw	r2,-32680(gp)
   2e8d0:	10c00317 	ldw	r3,12(r2)
   2e8d4:	00800174 	movhi	r2,5
   2e8d8:	1096d604 	addi	r2,r2,23384
   2e8dc:	d8800015 	stw	r2,0(sp)
   2e8e0:	01c08584 	movi	r7,534
   2e8e4:	01800174 	movhi	r6,5
   2e8e8:	31964204 	addi	r6,r6,22792
   2e8ec:	01400174 	movhi	r5,5
   2e8f0:	2951e804 	addi	r5,r5,18336
   2e8f4:	1809883a 	mov	r4,r3
   2e8f8:	00461000 	call	46100 <fprintf>
   2e8fc:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[4], b->d[3]);
   2e900:	e0be8217 	ldw	r2,-1528(fp)
   2e904:	10800417 	ldw	r2,16(r2)
   2e908:	e0bf3815 	stw	r2,-800(fp)
   2e90c:	e03f3915 	stw	zero,-796(fp)
   2e910:	e0be8317 	ldw	r2,-1524(fp)
   2e914:	10800317 	ldw	r2,12(r2)
   2e918:	e0bf3a15 	stw	r2,-792(fp)
   2e91c:	e03f3b15 	stw	zero,-788(fp)
   2e920:	e1bf3a17 	ldw	r6,-792(fp)
   2e924:	e1ff3b17 	ldw	r7,-788(fp)
   2e928:	e13f3817 	ldw	r4,-800(fp)
   2e92c:	e17f3917 	ldw	r5,-796(fp)
   2e930:	00438e00 	call	438e0 <__muldi3>
   2e934:	1009883a 	mov	r4,r2
   2e938:	180b883a 	mov	r5,r3
   2e93c:	e13e0115 	stw	r4,-2044(fp)
   2e940:	e17e0215 	stw	r5,-2040(fp)
   2e944:	e0be0217 	ldw	r2,-2040(fp)
   2e948:	1004d83a 	srl	r2,r2,zero
   2e94c:	e0bf3c15 	stw	r2,-784(fp)
   2e950:	e03f3d15 	stw	zero,-780(fp)
   2e954:	e0bf3c17 	ldw	r2,-784(fp)
   2e958:	e0be0315 	stw	r2,-2036(fp)
   2e95c:	e0be0117 	ldw	r2,-2044(fp)
   2e960:	e0be0415 	stw	r2,-2032(fp)
   2e964:	e0fd7e17 	ldw	r3,-2568(fp)
   2e968:	e0be0417 	ldw	r2,-2032(fp)
   2e96c:	1885883a 	add	r2,r3,r2
   2e970:	e0bd7e15 	stw	r2,-2568(fp)
   2e974:	e0fd7e17 	ldw	r3,-2568(fp)
   2e978:	e0be0417 	ldw	r2,-2032(fp)
   2e97c:	1880022e 	bgeu	r3,r2,2e988 <secp256k1_scalar_mul_512+0x2640>
   2e980:	00c00044 	movi	r3,1
   2e984:	00000106 	br	2e98c <secp256k1_scalar_mul_512+0x2644>
   2e988:	0007883a 	mov	r3,zero
   2e98c:	e0be0317 	ldw	r2,-2036(fp)
   2e990:	10c5883a 	add	r2,r2,r3
   2e994:	e0be0315 	stw	r2,-2036(fp)
   2e998:	e0fd7f17 	ldw	r3,-2564(fp)
   2e99c:	e0be0317 	ldw	r2,-2036(fp)
   2e9a0:	1885883a 	add	r2,r3,r2
   2e9a4:	e0bd7f15 	stw	r2,-2564(fp)
   2e9a8:	e0fd7f17 	ldw	r3,-2564(fp)
   2e9ac:	e0be0317 	ldw	r2,-2036(fp)
   2e9b0:	1880022e 	bgeu	r3,r2,2e9bc <secp256k1_scalar_mul_512+0x2674>
   2e9b4:	00c00044 	movi	r3,1
   2e9b8:	00000106 	br	2e9c0 <secp256k1_scalar_mul_512+0x2678>
   2e9bc:	0007883a 	mov	r3,zero
   2e9c0:	e0bd8017 	ldw	r2,-2560(fp)
   2e9c4:	10c5883a 	add	r2,r2,r3
   2e9c8:	e0bd8015 	stw	r2,-2560(fp)
   2e9cc:	e0fd7f17 	ldw	r3,-2564(fp)
   2e9d0:	e0be0317 	ldw	r2,-2036(fp)
   2e9d4:	1885803a 	cmpltu	r2,r3,r2
   2e9d8:	10803fcc 	andi	r2,r2,255
   2e9dc:	10001126 	beq	r2,zero,2ea24 <secp256k1_scalar_mul_512+0x26dc>
   2e9e0:	e0bd8017 	ldw	r2,-2560(fp)
   2e9e4:	1005003a 	cmpeq	r2,r2,zero
   2e9e8:	10803fcc 	andi	r2,r2,255
   2e9ec:	10000d26 	beq	r2,zero,2ea24 <secp256k1_scalar_mul_512+0x26dc>
   2e9f0:	d0a01617 	ldw	r2,-32680(gp)
   2e9f4:	10c00317 	ldw	r3,12(r2)
   2e9f8:	00800174 	movhi	r2,5
   2e9fc:	1096d604 	addi	r2,r2,23384
   2ea00:	d8800015 	stw	r2,0(sp)
   2ea04:	01c085c4 	movi	r7,535
   2ea08:	01800174 	movhi	r6,5
   2ea0c:	31964204 	addi	r6,r6,22792
   2ea10:	01400174 	movhi	r5,5
   2ea14:	2951e804 	addi	r5,r5,18336
   2ea18:	1809883a 	mov	r4,r3
   2ea1c:	00461000 	call	46100 <fprintf>
   2ea20:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[5], b->d[2]);
   2ea24:	e0be8217 	ldw	r2,-1528(fp)
   2ea28:	10800517 	ldw	r2,20(r2)
   2ea2c:	e0bf3e15 	stw	r2,-776(fp)
   2ea30:	e03f3f15 	stw	zero,-772(fp)
   2ea34:	e0be8317 	ldw	r2,-1524(fp)
   2ea38:	10800217 	ldw	r2,8(r2)
   2ea3c:	e0bf4015 	stw	r2,-768(fp)
   2ea40:	e03f4115 	stw	zero,-764(fp)
   2ea44:	e1bf4017 	ldw	r6,-768(fp)
   2ea48:	e1ff4117 	ldw	r7,-764(fp)
   2ea4c:	e13f3e17 	ldw	r4,-776(fp)
   2ea50:	e17f3f17 	ldw	r5,-772(fp)
   2ea54:	00438e00 	call	438e0 <__muldi3>
   2ea58:	1009883a 	mov	r4,r2
   2ea5c:	180b883a 	mov	r5,r3
   2ea60:	e13e0515 	stw	r4,-2028(fp)
   2ea64:	e17e0615 	stw	r5,-2024(fp)
   2ea68:	e0be0617 	ldw	r2,-2024(fp)
   2ea6c:	1004d83a 	srl	r2,r2,zero
   2ea70:	e0bf4215 	stw	r2,-760(fp)
   2ea74:	e03f4315 	stw	zero,-756(fp)
   2ea78:	e0bf4217 	ldw	r2,-760(fp)
   2ea7c:	e0be0715 	stw	r2,-2020(fp)
   2ea80:	e0be0517 	ldw	r2,-2028(fp)
   2ea84:	e0be0815 	stw	r2,-2016(fp)
   2ea88:	e0fd7e17 	ldw	r3,-2568(fp)
   2ea8c:	e0be0817 	ldw	r2,-2016(fp)
   2ea90:	1885883a 	add	r2,r3,r2
   2ea94:	e0bd7e15 	stw	r2,-2568(fp)
   2ea98:	e0fd7e17 	ldw	r3,-2568(fp)
   2ea9c:	e0be0817 	ldw	r2,-2016(fp)
   2eaa0:	1880022e 	bgeu	r3,r2,2eaac <secp256k1_scalar_mul_512+0x2764>
   2eaa4:	00c00044 	movi	r3,1
   2eaa8:	00000106 	br	2eab0 <secp256k1_scalar_mul_512+0x2768>
   2eaac:	0007883a 	mov	r3,zero
   2eab0:	e0be0717 	ldw	r2,-2020(fp)
   2eab4:	10c5883a 	add	r2,r2,r3
   2eab8:	e0be0715 	stw	r2,-2020(fp)
   2eabc:	e0fd7f17 	ldw	r3,-2564(fp)
   2eac0:	e0be0717 	ldw	r2,-2020(fp)
   2eac4:	1885883a 	add	r2,r3,r2
   2eac8:	e0bd7f15 	stw	r2,-2564(fp)
   2eacc:	e0fd7f17 	ldw	r3,-2564(fp)
   2ead0:	e0be0717 	ldw	r2,-2020(fp)
   2ead4:	1880022e 	bgeu	r3,r2,2eae0 <secp256k1_scalar_mul_512+0x2798>
   2ead8:	00c00044 	movi	r3,1
   2eadc:	00000106 	br	2eae4 <secp256k1_scalar_mul_512+0x279c>
   2eae0:	0007883a 	mov	r3,zero
   2eae4:	e0bd8017 	ldw	r2,-2560(fp)
   2eae8:	10c5883a 	add	r2,r2,r3
   2eaec:	e0bd8015 	stw	r2,-2560(fp)
   2eaf0:	e0fd7f17 	ldw	r3,-2564(fp)
   2eaf4:	e0be0717 	ldw	r2,-2020(fp)
   2eaf8:	1885803a 	cmpltu	r2,r3,r2
   2eafc:	10803fcc 	andi	r2,r2,255
   2eb00:	10001126 	beq	r2,zero,2eb48 <secp256k1_scalar_mul_512+0x2800>
   2eb04:	e0bd8017 	ldw	r2,-2560(fp)
   2eb08:	1005003a 	cmpeq	r2,r2,zero
   2eb0c:	10803fcc 	andi	r2,r2,255
   2eb10:	10000d26 	beq	r2,zero,2eb48 <secp256k1_scalar_mul_512+0x2800>
   2eb14:	d0a01617 	ldw	r2,-32680(gp)
   2eb18:	10c00317 	ldw	r3,12(r2)
   2eb1c:	00800174 	movhi	r2,5
   2eb20:	1096d604 	addi	r2,r2,23384
   2eb24:	d8800015 	stw	r2,0(sp)
   2eb28:	01c08604 	movi	r7,536
   2eb2c:	01800174 	movhi	r6,5
   2eb30:	31964204 	addi	r6,r6,22792
   2eb34:	01400174 	movhi	r5,5
   2eb38:	2951e804 	addi	r5,r5,18336
   2eb3c:	1809883a 	mov	r4,r3
   2eb40:	00461000 	call	46100 <fprintf>
   2eb44:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[6], b->d[1]);
   2eb48:	e0be8217 	ldw	r2,-1528(fp)
   2eb4c:	10800617 	ldw	r2,24(r2)
   2eb50:	e0bf4415 	stw	r2,-752(fp)
   2eb54:	e03f4515 	stw	zero,-748(fp)
   2eb58:	e0be8317 	ldw	r2,-1524(fp)
   2eb5c:	10800117 	ldw	r2,4(r2)
   2eb60:	e0bf4615 	stw	r2,-744(fp)
   2eb64:	e03f4715 	stw	zero,-740(fp)
   2eb68:	e1bf4617 	ldw	r6,-744(fp)
   2eb6c:	e1ff4717 	ldw	r7,-740(fp)
   2eb70:	e13f4417 	ldw	r4,-752(fp)
   2eb74:	e17f4517 	ldw	r5,-748(fp)
   2eb78:	00438e00 	call	438e0 <__muldi3>
   2eb7c:	1009883a 	mov	r4,r2
   2eb80:	180b883a 	mov	r5,r3
   2eb84:	e13e0915 	stw	r4,-2012(fp)
   2eb88:	e17e0a15 	stw	r5,-2008(fp)
   2eb8c:	e0be0a17 	ldw	r2,-2008(fp)
   2eb90:	1004d83a 	srl	r2,r2,zero
   2eb94:	e0bf4815 	stw	r2,-736(fp)
   2eb98:	e03f4915 	stw	zero,-732(fp)
   2eb9c:	e0bf4817 	ldw	r2,-736(fp)
   2eba0:	e0be0b15 	stw	r2,-2004(fp)
   2eba4:	e0be0917 	ldw	r2,-2012(fp)
   2eba8:	e0be0c15 	stw	r2,-2000(fp)
   2ebac:	e0fd7e17 	ldw	r3,-2568(fp)
   2ebb0:	e0be0c17 	ldw	r2,-2000(fp)
   2ebb4:	1885883a 	add	r2,r3,r2
   2ebb8:	e0bd7e15 	stw	r2,-2568(fp)
   2ebbc:	e0fd7e17 	ldw	r3,-2568(fp)
   2ebc0:	e0be0c17 	ldw	r2,-2000(fp)
   2ebc4:	1880022e 	bgeu	r3,r2,2ebd0 <secp256k1_scalar_mul_512+0x2888>
   2ebc8:	00c00044 	movi	r3,1
   2ebcc:	00000106 	br	2ebd4 <secp256k1_scalar_mul_512+0x288c>
   2ebd0:	0007883a 	mov	r3,zero
   2ebd4:	e0be0b17 	ldw	r2,-2004(fp)
   2ebd8:	10c5883a 	add	r2,r2,r3
   2ebdc:	e0be0b15 	stw	r2,-2004(fp)
   2ebe0:	e0fd7f17 	ldw	r3,-2564(fp)
   2ebe4:	e0be0b17 	ldw	r2,-2004(fp)
   2ebe8:	1885883a 	add	r2,r3,r2
   2ebec:	e0bd7f15 	stw	r2,-2564(fp)
   2ebf0:	e0fd7f17 	ldw	r3,-2564(fp)
   2ebf4:	e0be0b17 	ldw	r2,-2004(fp)
   2ebf8:	1880022e 	bgeu	r3,r2,2ec04 <secp256k1_scalar_mul_512+0x28bc>
   2ebfc:	00c00044 	movi	r3,1
   2ec00:	00000106 	br	2ec08 <secp256k1_scalar_mul_512+0x28c0>
   2ec04:	0007883a 	mov	r3,zero
   2ec08:	e0bd8017 	ldw	r2,-2560(fp)
   2ec0c:	10c5883a 	add	r2,r2,r3
   2ec10:	e0bd8015 	stw	r2,-2560(fp)
   2ec14:	e0fd7f17 	ldw	r3,-2564(fp)
   2ec18:	e0be0b17 	ldw	r2,-2004(fp)
   2ec1c:	1885803a 	cmpltu	r2,r3,r2
   2ec20:	10803fcc 	andi	r2,r2,255
   2ec24:	10001126 	beq	r2,zero,2ec6c <secp256k1_scalar_mul_512+0x2924>
   2ec28:	e0bd8017 	ldw	r2,-2560(fp)
   2ec2c:	1005003a 	cmpeq	r2,r2,zero
   2ec30:	10803fcc 	andi	r2,r2,255
   2ec34:	10000d26 	beq	r2,zero,2ec6c <secp256k1_scalar_mul_512+0x2924>
   2ec38:	d0a01617 	ldw	r2,-32680(gp)
   2ec3c:	10c00317 	ldw	r3,12(r2)
   2ec40:	00800174 	movhi	r2,5
   2ec44:	1096d604 	addi	r2,r2,23384
   2ec48:	d8800015 	stw	r2,0(sp)
   2ec4c:	01c08644 	movi	r7,537
   2ec50:	01800174 	movhi	r6,5
   2ec54:	31964204 	addi	r6,r6,22792
   2ec58:	01400174 	movhi	r5,5
   2ec5c:	2951e804 	addi	r5,r5,18336
   2ec60:	1809883a 	mov	r4,r3
   2ec64:	00461000 	call	46100 <fprintf>
   2ec68:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[7], b->d[0]);
   2ec6c:	e0be8217 	ldw	r2,-1528(fp)
   2ec70:	10800717 	ldw	r2,28(r2)
   2ec74:	e0bf4a15 	stw	r2,-728(fp)
   2ec78:	e03f4b15 	stw	zero,-724(fp)
   2ec7c:	e0be8317 	ldw	r2,-1524(fp)
   2ec80:	10800017 	ldw	r2,0(r2)
   2ec84:	e0bf4c15 	stw	r2,-720(fp)
   2ec88:	e03f4d15 	stw	zero,-716(fp)
   2ec8c:	e1bf4c17 	ldw	r6,-720(fp)
   2ec90:	e1ff4d17 	ldw	r7,-716(fp)
   2ec94:	e13f4a17 	ldw	r4,-728(fp)
   2ec98:	e17f4b17 	ldw	r5,-724(fp)
   2ec9c:	00438e00 	call	438e0 <__muldi3>
   2eca0:	1009883a 	mov	r4,r2
   2eca4:	180b883a 	mov	r5,r3
   2eca8:	e13e0d15 	stw	r4,-1996(fp)
   2ecac:	e17e0e15 	stw	r5,-1992(fp)
   2ecb0:	e0be0e17 	ldw	r2,-1992(fp)
   2ecb4:	1004d83a 	srl	r2,r2,zero
   2ecb8:	e0bf4e15 	stw	r2,-712(fp)
   2ecbc:	e03f4f15 	stw	zero,-708(fp)
   2ecc0:	e0bf4e17 	ldw	r2,-712(fp)
   2ecc4:	e0be0f15 	stw	r2,-1988(fp)
   2ecc8:	e0be0d17 	ldw	r2,-1996(fp)
   2eccc:	e0be1015 	stw	r2,-1984(fp)
   2ecd0:	e0fd7e17 	ldw	r3,-2568(fp)
   2ecd4:	e0be1017 	ldw	r2,-1984(fp)
   2ecd8:	1885883a 	add	r2,r3,r2
   2ecdc:	e0bd7e15 	stw	r2,-2568(fp)
   2ece0:	e0fd7e17 	ldw	r3,-2568(fp)
   2ece4:	e0be1017 	ldw	r2,-1984(fp)
   2ece8:	1880022e 	bgeu	r3,r2,2ecf4 <secp256k1_scalar_mul_512+0x29ac>
   2ecec:	00c00044 	movi	r3,1
   2ecf0:	00000106 	br	2ecf8 <secp256k1_scalar_mul_512+0x29b0>
   2ecf4:	0007883a 	mov	r3,zero
   2ecf8:	e0be0f17 	ldw	r2,-1988(fp)
   2ecfc:	10c5883a 	add	r2,r2,r3
   2ed00:	e0be0f15 	stw	r2,-1988(fp)
   2ed04:	e0fd7f17 	ldw	r3,-2564(fp)
   2ed08:	e0be0f17 	ldw	r2,-1988(fp)
   2ed0c:	1885883a 	add	r2,r3,r2
   2ed10:	e0bd7f15 	stw	r2,-2564(fp)
   2ed14:	e0fd7f17 	ldw	r3,-2564(fp)
   2ed18:	e0be0f17 	ldw	r2,-1988(fp)
   2ed1c:	1880022e 	bgeu	r3,r2,2ed28 <secp256k1_scalar_mul_512+0x29e0>
   2ed20:	00c00044 	movi	r3,1
   2ed24:	00000106 	br	2ed2c <secp256k1_scalar_mul_512+0x29e4>
   2ed28:	0007883a 	mov	r3,zero
   2ed2c:	e0bd8017 	ldw	r2,-2560(fp)
   2ed30:	10c5883a 	add	r2,r2,r3
   2ed34:	e0bd8015 	stw	r2,-2560(fp)
   2ed38:	e0fd7f17 	ldw	r3,-2564(fp)
   2ed3c:	e0be0f17 	ldw	r2,-1988(fp)
   2ed40:	1885803a 	cmpltu	r2,r3,r2
   2ed44:	10803fcc 	andi	r2,r2,255
   2ed48:	10001126 	beq	r2,zero,2ed90 <secp256k1_scalar_mul_512+0x2a48>
   2ed4c:	e0bd8017 	ldw	r2,-2560(fp)
   2ed50:	1005003a 	cmpeq	r2,r2,zero
   2ed54:	10803fcc 	andi	r2,r2,255
   2ed58:	10000d26 	beq	r2,zero,2ed90 <secp256k1_scalar_mul_512+0x2a48>
   2ed5c:	d0a01617 	ldw	r2,-32680(gp)
   2ed60:	10c00317 	ldw	r3,12(r2)
   2ed64:	00800174 	movhi	r2,5
   2ed68:	1096d604 	addi	r2,r2,23384
   2ed6c:	d8800015 	stw	r2,0(sp)
   2ed70:	01c08684 	movi	r7,538
   2ed74:	01800174 	movhi	r6,5
   2ed78:	31964204 	addi	r6,r6,22792
   2ed7c:	01400174 	movhi	r5,5
   2ed80:	2951e804 	addi	r5,r5,18336
   2ed84:	1809883a 	mov	r4,r3
   2ed88:	00461000 	call	46100 <fprintf>
   2ed8c:	0045fd40 	call	45fd4 <abort>
    extract(l[7]);
   2ed90:	e0be8117 	ldw	r2,-1532(fp)
   2ed94:	10c00704 	addi	r3,r2,28
   2ed98:	e0bd7e17 	ldw	r2,-2568(fp)
   2ed9c:	18800015 	stw	r2,0(r3)
   2eda0:	e0bd7f17 	ldw	r2,-2564(fp)
   2eda4:	e0bd7e15 	stw	r2,-2568(fp)
   2eda8:	e0bd8017 	ldw	r2,-2560(fp)
   2edac:	e0bd7f15 	stw	r2,-2564(fp)
   2edb0:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[1], b->d[7]);
   2edb4:	e0be8217 	ldw	r2,-1528(fp)
   2edb8:	10800117 	ldw	r2,4(r2)
   2edbc:	e0bf5015 	stw	r2,-704(fp)
   2edc0:	e03f5115 	stw	zero,-700(fp)
   2edc4:	e0be8317 	ldw	r2,-1524(fp)
   2edc8:	10800717 	ldw	r2,28(r2)
   2edcc:	e0bf5215 	stw	r2,-696(fp)
   2edd0:	e03f5315 	stw	zero,-692(fp)
   2edd4:	e1bf5217 	ldw	r6,-696(fp)
   2edd8:	e1ff5317 	ldw	r7,-692(fp)
   2eddc:	e13f5017 	ldw	r4,-704(fp)
   2ede0:	e17f5117 	ldw	r5,-700(fp)
   2ede4:	00438e00 	call	438e0 <__muldi3>
   2ede8:	1009883a 	mov	r4,r2
   2edec:	180b883a 	mov	r5,r3
   2edf0:	e13e1115 	stw	r4,-1980(fp)
   2edf4:	e17e1215 	stw	r5,-1976(fp)
   2edf8:	e0be1217 	ldw	r2,-1976(fp)
   2edfc:	1004d83a 	srl	r2,r2,zero
   2ee00:	e0bf5415 	stw	r2,-688(fp)
   2ee04:	e03f5515 	stw	zero,-684(fp)
   2ee08:	e0bf5417 	ldw	r2,-688(fp)
   2ee0c:	e0be1315 	stw	r2,-1972(fp)
   2ee10:	e0be1117 	ldw	r2,-1980(fp)
   2ee14:	e0be1415 	stw	r2,-1968(fp)
   2ee18:	e0fd7e17 	ldw	r3,-2568(fp)
   2ee1c:	e0be1417 	ldw	r2,-1968(fp)
   2ee20:	1885883a 	add	r2,r3,r2
   2ee24:	e0bd7e15 	stw	r2,-2568(fp)
   2ee28:	e0fd7e17 	ldw	r3,-2568(fp)
   2ee2c:	e0be1417 	ldw	r2,-1968(fp)
   2ee30:	1880022e 	bgeu	r3,r2,2ee3c <secp256k1_scalar_mul_512+0x2af4>
   2ee34:	00c00044 	movi	r3,1
   2ee38:	00000106 	br	2ee40 <secp256k1_scalar_mul_512+0x2af8>
   2ee3c:	0007883a 	mov	r3,zero
   2ee40:	e0be1317 	ldw	r2,-1972(fp)
   2ee44:	10c5883a 	add	r2,r2,r3
   2ee48:	e0be1315 	stw	r2,-1972(fp)
   2ee4c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ee50:	e0be1317 	ldw	r2,-1972(fp)
   2ee54:	1885883a 	add	r2,r3,r2
   2ee58:	e0bd7f15 	stw	r2,-2564(fp)
   2ee5c:	e0fd7f17 	ldw	r3,-2564(fp)
   2ee60:	e0be1317 	ldw	r2,-1972(fp)
   2ee64:	1880022e 	bgeu	r3,r2,2ee70 <secp256k1_scalar_mul_512+0x2b28>
   2ee68:	00c00044 	movi	r3,1
   2ee6c:	00000106 	br	2ee74 <secp256k1_scalar_mul_512+0x2b2c>
   2ee70:	0007883a 	mov	r3,zero
   2ee74:	e0bd8017 	ldw	r2,-2560(fp)
   2ee78:	10c5883a 	add	r2,r2,r3
   2ee7c:	e0bd8015 	stw	r2,-2560(fp)
   2ee80:	e0fd7f17 	ldw	r3,-2564(fp)
   2ee84:	e0be1317 	ldw	r2,-1972(fp)
   2ee88:	1885803a 	cmpltu	r2,r3,r2
   2ee8c:	10803fcc 	andi	r2,r2,255
   2ee90:	10001126 	beq	r2,zero,2eed8 <secp256k1_scalar_mul_512+0x2b90>
   2ee94:	e0bd8017 	ldw	r2,-2560(fp)
   2ee98:	1005003a 	cmpeq	r2,r2,zero
   2ee9c:	10803fcc 	andi	r2,r2,255
   2eea0:	10000d26 	beq	r2,zero,2eed8 <secp256k1_scalar_mul_512+0x2b90>
   2eea4:	d0a01617 	ldw	r2,-32680(gp)
   2eea8:	10c00317 	ldw	r3,12(r2)
   2eeac:	00800174 	movhi	r2,5
   2eeb0:	1096d604 	addi	r2,r2,23384
   2eeb4:	d8800015 	stw	r2,0(sp)
   2eeb8:	01c08704 	movi	r7,540
   2eebc:	01800174 	movhi	r6,5
   2eec0:	31964204 	addi	r6,r6,22792
   2eec4:	01400174 	movhi	r5,5
   2eec8:	2951e804 	addi	r5,r5,18336
   2eecc:	1809883a 	mov	r4,r3
   2eed0:	00461000 	call	46100 <fprintf>
   2eed4:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[2], b->d[6]);
   2eed8:	e0be8217 	ldw	r2,-1528(fp)
   2eedc:	10800217 	ldw	r2,8(r2)
   2eee0:	e0bf5615 	stw	r2,-680(fp)
   2eee4:	e03f5715 	stw	zero,-676(fp)
   2eee8:	e0be8317 	ldw	r2,-1524(fp)
   2eeec:	10800617 	ldw	r2,24(r2)
   2eef0:	e0bf5815 	stw	r2,-672(fp)
   2eef4:	e03f5915 	stw	zero,-668(fp)
   2eef8:	e1bf5817 	ldw	r6,-672(fp)
   2eefc:	e1ff5917 	ldw	r7,-668(fp)
   2ef00:	e13f5617 	ldw	r4,-680(fp)
   2ef04:	e17f5717 	ldw	r5,-676(fp)
   2ef08:	00438e00 	call	438e0 <__muldi3>
   2ef0c:	1009883a 	mov	r4,r2
   2ef10:	180b883a 	mov	r5,r3
   2ef14:	e13e1515 	stw	r4,-1964(fp)
   2ef18:	e17e1615 	stw	r5,-1960(fp)
   2ef1c:	e0be1617 	ldw	r2,-1960(fp)
   2ef20:	1004d83a 	srl	r2,r2,zero
   2ef24:	e0bf5a15 	stw	r2,-664(fp)
   2ef28:	e03f5b15 	stw	zero,-660(fp)
   2ef2c:	e0bf5a17 	ldw	r2,-664(fp)
   2ef30:	e0be1715 	stw	r2,-1956(fp)
   2ef34:	e0be1517 	ldw	r2,-1964(fp)
   2ef38:	e0be1815 	stw	r2,-1952(fp)
   2ef3c:	e0fd7e17 	ldw	r3,-2568(fp)
   2ef40:	e0be1817 	ldw	r2,-1952(fp)
   2ef44:	1885883a 	add	r2,r3,r2
   2ef48:	e0bd7e15 	stw	r2,-2568(fp)
   2ef4c:	e0fd7e17 	ldw	r3,-2568(fp)
   2ef50:	e0be1817 	ldw	r2,-1952(fp)
   2ef54:	1880022e 	bgeu	r3,r2,2ef60 <secp256k1_scalar_mul_512+0x2c18>
   2ef58:	00c00044 	movi	r3,1
   2ef5c:	00000106 	br	2ef64 <secp256k1_scalar_mul_512+0x2c1c>
   2ef60:	0007883a 	mov	r3,zero
   2ef64:	e0be1717 	ldw	r2,-1956(fp)
   2ef68:	10c5883a 	add	r2,r2,r3
   2ef6c:	e0be1715 	stw	r2,-1956(fp)
   2ef70:	e0fd7f17 	ldw	r3,-2564(fp)
   2ef74:	e0be1717 	ldw	r2,-1956(fp)
   2ef78:	1885883a 	add	r2,r3,r2
   2ef7c:	e0bd7f15 	stw	r2,-2564(fp)
   2ef80:	e0fd7f17 	ldw	r3,-2564(fp)
   2ef84:	e0be1717 	ldw	r2,-1956(fp)
   2ef88:	1880022e 	bgeu	r3,r2,2ef94 <secp256k1_scalar_mul_512+0x2c4c>
   2ef8c:	00c00044 	movi	r3,1
   2ef90:	00000106 	br	2ef98 <secp256k1_scalar_mul_512+0x2c50>
   2ef94:	0007883a 	mov	r3,zero
   2ef98:	e0bd8017 	ldw	r2,-2560(fp)
   2ef9c:	10c5883a 	add	r2,r2,r3
   2efa0:	e0bd8015 	stw	r2,-2560(fp)
   2efa4:	e0fd7f17 	ldw	r3,-2564(fp)
   2efa8:	e0be1717 	ldw	r2,-1956(fp)
   2efac:	1885803a 	cmpltu	r2,r3,r2
   2efb0:	10803fcc 	andi	r2,r2,255
   2efb4:	10001126 	beq	r2,zero,2effc <secp256k1_scalar_mul_512+0x2cb4>
   2efb8:	e0bd8017 	ldw	r2,-2560(fp)
   2efbc:	1005003a 	cmpeq	r2,r2,zero
   2efc0:	10803fcc 	andi	r2,r2,255
   2efc4:	10000d26 	beq	r2,zero,2effc <secp256k1_scalar_mul_512+0x2cb4>
   2efc8:	d0a01617 	ldw	r2,-32680(gp)
   2efcc:	10c00317 	ldw	r3,12(r2)
   2efd0:	00800174 	movhi	r2,5
   2efd4:	1096d604 	addi	r2,r2,23384
   2efd8:	d8800015 	stw	r2,0(sp)
   2efdc:	01c08744 	movi	r7,541
   2efe0:	01800174 	movhi	r6,5
   2efe4:	31964204 	addi	r6,r6,22792
   2efe8:	01400174 	movhi	r5,5
   2efec:	2951e804 	addi	r5,r5,18336
   2eff0:	1809883a 	mov	r4,r3
   2eff4:	00461000 	call	46100 <fprintf>
   2eff8:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[3], b->d[5]);
   2effc:	e0be8217 	ldw	r2,-1528(fp)
   2f000:	10800317 	ldw	r2,12(r2)
   2f004:	e0bf5c15 	stw	r2,-656(fp)
   2f008:	e03f5d15 	stw	zero,-652(fp)
   2f00c:	e0be8317 	ldw	r2,-1524(fp)
   2f010:	10800517 	ldw	r2,20(r2)
   2f014:	e0bf5e15 	stw	r2,-648(fp)
   2f018:	e03f5f15 	stw	zero,-644(fp)
   2f01c:	e1bf5e17 	ldw	r6,-648(fp)
   2f020:	e1ff5f17 	ldw	r7,-644(fp)
   2f024:	e13f5c17 	ldw	r4,-656(fp)
   2f028:	e17f5d17 	ldw	r5,-652(fp)
   2f02c:	00438e00 	call	438e0 <__muldi3>
   2f030:	1009883a 	mov	r4,r2
   2f034:	180b883a 	mov	r5,r3
   2f038:	e13e1915 	stw	r4,-1948(fp)
   2f03c:	e17e1a15 	stw	r5,-1944(fp)
   2f040:	e0be1a17 	ldw	r2,-1944(fp)
   2f044:	1004d83a 	srl	r2,r2,zero
   2f048:	e0bf6015 	stw	r2,-640(fp)
   2f04c:	e03f6115 	stw	zero,-636(fp)
   2f050:	e0bf6017 	ldw	r2,-640(fp)
   2f054:	e0be1b15 	stw	r2,-1940(fp)
   2f058:	e0be1917 	ldw	r2,-1948(fp)
   2f05c:	e0be1c15 	stw	r2,-1936(fp)
   2f060:	e0fd7e17 	ldw	r3,-2568(fp)
   2f064:	e0be1c17 	ldw	r2,-1936(fp)
   2f068:	1885883a 	add	r2,r3,r2
   2f06c:	e0bd7e15 	stw	r2,-2568(fp)
   2f070:	e0fd7e17 	ldw	r3,-2568(fp)
   2f074:	e0be1c17 	ldw	r2,-1936(fp)
   2f078:	1880022e 	bgeu	r3,r2,2f084 <secp256k1_scalar_mul_512+0x2d3c>
   2f07c:	00c00044 	movi	r3,1
   2f080:	00000106 	br	2f088 <secp256k1_scalar_mul_512+0x2d40>
   2f084:	0007883a 	mov	r3,zero
   2f088:	e0be1b17 	ldw	r2,-1940(fp)
   2f08c:	10c5883a 	add	r2,r2,r3
   2f090:	e0be1b15 	stw	r2,-1940(fp)
   2f094:	e0fd7f17 	ldw	r3,-2564(fp)
   2f098:	e0be1b17 	ldw	r2,-1940(fp)
   2f09c:	1885883a 	add	r2,r3,r2
   2f0a0:	e0bd7f15 	stw	r2,-2564(fp)
   2f0a4:	e0fd7f17 	ldw	r3,-2564(fp)
   2f0a8:	e0be1b17 	ldw	r2,-1940(fp)
   2f0ac:	1880022e 	bgeu	r3,r2,2f0b8 <secp256k1_scalar_mul_512+0x2d70>
   2f0b0:	00c00044 	movi	r3,1
   2f0b4:	00000106 	br	2f0bc <secp256k1_scalar_mul_512+0x2d74>
   2f0b8:	0007883a 	mov	r3,zero
   2f0bc:	e0bd8017 	ldw	r2,-2560(fp)
   2f0c0:	10c5883a 	add	r2,r2,r3
   2f0c4:	e0bd8015 	stw	r2,-2560(fp)
   2f0c8:	e0fd7f17 	ldw	r3,-2564(fp)
   2f0cc:	e0be1b17 	ldw	r2,-1940(fp)
   2f0d0:	1885803a 	cmpltu	r2,r3,r2
   2f0d4:	10803fcc 	andi	r2,r2,255
   2f0d8:	10001126 	beq	r2,zero,2f120 <secp256k1_scalar_mul_512+0x2dd8>
   2f0dc:	e0bd8017 	ldw	r2,-2560(fp)
   2f0e0:	1005003a 	cmpeq	r2,r2,zero
   2f0e4:	10803fcc 	andi	r2,r2,255
   2f0e8:	10000d26 	beq	r2,zero,2f120 <secp256k1_scalar_mul_512+0x2dd8>
   2f0ec:	d0a01617 	ldw	r2,-32680(gp)
   2f0f0:	10c00317 	ldw	r3,12(r2)
   2f0f4:	00800174 	movhi	r2,5
   2f0f8:	1096d604 	addi	r2,r2,23384
   2f0fc:	d8800015 	stw	r2,0(sp)
   2f100:	01c08784 	movi	r7,542
   2f104:	01800174 	movhi	r6,5
   2f108:	31964204 	addi	r6,r6,22792
   2f10c:	01400174 	movhi	r5,5
   2f110:	2951e804 	addi	r5,r5,18336
   2f114:	1809883a 	mov	r4,r3
   2f118:	00461000 	call	46100 <fprintf>
   2f11c:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[4], b->d[4]);
   2f120:	e0be8217 	ldw	r2,-1528(fp)
   2f124:	10800417 	ldw	r2,16(r2)
   2f128:	e0bf6215 	stw	r2,-632(fp)
   2f12c:	e03f6315 	stw	zero,-628(fp)
   2f130:	e0be8317 	ldw	r2,-1524(fp)
   2f134:	10800417 	ldw	r2,16(r2)
   2f138:	e0bf6415 	stw	r2,-624(fp)
   2f13c:	e03f6515 	stw	zero,-620(fp)
   2f140:	e1bf6417 	ldw	r6,-624(fp)
   2f144:	e1ff6517 	ldw	r7,-620(fp)
   2f148:	e13f6217 	ldw	r4,-632(fp)
   2f14c:	e17f6317 	ldw	r5,-628(fp)
   2f150:	00438e00 	call	438e0 <__muldi3>
   2f154:	1009883a 	mov	r4,r2
   2f158:	180b883a 	mov	r5,r3
   2f15c:	e13e1d15 	stw	r4,-1932(fp)
   2f160:	e17e1e15 	stw	r5,-1928(fp)
   2f164:	e0be1e17 	ldw	r2,-1928(fp)
   2f168:	1004d83a 	srl	r2,r2,zero
   2f16c:	e0bf6615 	stw	r2,-616(fp)
   2f170:	e03f6715 	stw	zero,-612(fp)
   2f174:	e0bf6617 	ldw	r2,-616(fp)
   2f178:	e0be1f15 	stw	r2,-1924(fp)
   2f17c:	e0be1d17 	ldw	r2,-1932(fp)
   2f180:	e0be2015 	stw	r2,-1920(fp)
   2f184:	e0fd7e17 	ldw	r3,-2568(fp)
   2f188:	e0be2017 	ldw	r2,-1920(fp)
   2f18c:	1885883a 	add	r2,r3,r2
   2f190:	e0bd7e15 	stw	r2,-2568(fp)
   2f194:	e0fd7e17 	ldw	r3,-2568(fp)
   2f198:	e0be2017 	ldw	r2,-1920(fp)
   2f19c:	1880022e 	bgeu	r3,r2,2f1a8 <secp256k1_scalar_mul_512+0x2e60>
   2f1a0:	00c00044 	movi	r3,1
   2f1a4:	00000106 	br	2f1ac <secp256k1_scalar_mul_512+0x2e64>
   2f1a8:	0007883a 	mov	r3,zero
   2f1ac:	e0be1f17 	ldw	r2,-1924(fp)
   2f1b0:	10c5883a 	add	r2,r2,r3
   2f1b4:	e0be1f15 	stw	r2,-1924(fp)
   2f1b8:	e0fd7f17 	ldw	r3,-2564(fp)
   2f1bc:	e0be1f17 	ldw	r2,-1924(fp)
   2f1c0:	1885883a 	add	r2,r3,r2
   2f1c4:	e0bd7f15 	stw	r2,-2564(fp)
   2f1c8:	e0fd7f17 	ldw	r3,-2564(fp)
   2f1cc:	e0be1f17 	ldw	r2,-1924(fp)
   2f1d0:	1880022e 	bgeu	r3,r2,2f1dc <secp256k1_scalar_mul_512+0x2e94>
   2f1d4:	00c00044 	movi	r3,1
   2f1d8:	00000106 	br	2f1e0 <secp256k1_scalar_mul_512+0x2e98>
   2f1dc:	0007883a 	mov	r3,zero
   2f1e0:	e0bd8017 	ldw	r2,-2560(fp)
   2f1e4:	10c5883a 	add	r2,r2,r3
   2f1e8:	e0bd8015 	stw	r2,-2560(fp)
   2f1ec:	e0fd7f17 	ldw	r3,-2564(fp)
   2f1f0:	e0be1f17 	ldw	r2,-1924(fp)
   2f1f4:	1885803a 	cmpltu	r2,r3,r2
   2f1f8:	10803fcc 	andi	r2,r2,255
   2f1fc:	10001126 	beq	r2,zero,2f244 <secp256k1_scalar_mul_512+0x2efc>
   2f200:	e0bd8017 	ldw	r2,-2560(fp)
   2f204:	1005003a 	cmpeq	r2,r2,zero
   2f208:	10803fcc 	andi	r2,r2,255
   2f20c:	10000d26 	beq	r2,zero,2f244 <secp256k1_scalar_mul_512+0x2efc>
   2f210:	d0a01617 	ldw	r2,-32680(gp)
   2f214:	10c00317 	ldw	r3,12(r2)
   2f218:	00800174 	movhi	r2,5
   2f21c:	1096d604 	addi	r2,r2,23384
   2f220:	d8800015 	stw	r2,0(sp)
   2f224:	01c087c4 	movi	r7,543
   2f228:	01800174 	movhi	r6,5
   2f22c:	31964204 	addi	r6,r6,22792
   2f230:	01400174 	movhi	r5,5
   2f234:	2951e804 	addi	r5,r5,18336
   2f238:	1809883a 	mov	r4,r3
   2f23c:	00461000 	call	46100 <fprintf>
   2f240:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[5], b->d[3]);
   2f244:	e0be8217 	ldw	r2,-1528(fp)
   2f248:	10800517 	ldw	r2,20(r2)
   2f24c:	e0bf6815 	stw	r2,-608(fp)
   2f250:	e03f6915 	stw	zero,-604(fp)
   2f254:	e0be8317 	ldw	r2,-1524(fp)
   2f258:	10800317 	ldw	r2,12(r2)
   2f25c:	e0bf6a15 	stw	r2,-600(fp)
   2f260:	e03f6b15 	stw	zero,-596(fp)
   2f264:	e1bf6a17 	ldw	r6,-600(fp)
   2f268:	e1ff6b17 	ldw	r7,-596(fp)
   2f26c:	e13f6817 	ldw	r4,-608(fp)
   2f270:	e17f6917 	ldw	r5,-604(fp)
   2f274:	00438e00 	call	438e0 <__muldi3>
   2f278:	1009883a 	mov	r4,r2
   2f27c:	180b883a 	mov	r5,r3
   2f280:	e13e2115 	stw	r4,-1916(fp)
   2f284:	e17e2215 	stw	r5,-1912(fp)
   2f288:	e0be2217 	ldw	r2,-1912(fp)
   2f28c:	1004d83a 	srl	r2,r2,zero
   2f290:	e0bf6c15 	stw	r2,-592(fp)
   2f294:	e03f6d15 	stw	zero,-588(fp)
   2f298:	e0bf6c17 	ldw	r2,-592(fp)
   2f29c:	e0be2315 	stw	r2,-1908(fp)
   2f2a0:	e0be2117 	ldw	r2,-1916(fp)
   2f2a4:	e0be2415 	stw	r2,-1904(fp)
   2f2a8:	e0fd7e17 	ldw	r3,-2568(fp)
   2f2ac:	e0be2417 	ldw	r2,-1904(fp)
   2f2b0:	1885883a 	add	r2,r3,r2
   2f2b4:	e0bd7e15 	stw	r2,-2568(fp)
   2f2b8:	e0fd7e17 	ldw	r3,-2568(fp)
   2f2bc:	e0be2417 	ldw	r2,-1904(fp)
   2f2c0:	1880022e 	bgeu	r3,r2,2f2cc <secp256k1_scalar_mul_512+0x2f84>
   2f2c4:	00c00044 	movi	r3,1
   2f2c8:	00000106 	br	2f2d0 <secp256k1_scalar_mul_512+0x2f88>
   2f2cc:	0007883a 	mov	r3,zero
   2f2d0:	e0be2317 	ldw	r2,-1908(fp)
   2f2d4:	10c5883a 	add	r2,r2,r3
   2f2d8:	e0be2315 	stw	r2,-1908(fp)
   2f2dc:	e0fd7f17 	ldw	r3,-2564(fp)
   2f2e0:	e0be2317 	ldw	r2,-1908(fp)
   2f2e4:	1885883a 	add	r2,r3,r2
   2f2e8:	e0bd7f15 	stw	r2,-2564(fp)
   2f2ec:	e0fd7f17 	ldw	r3,-2564(fp)
   2f2f0:	e0be2317 	ldw	r2,-1908(fp)
   2f2f4:	1880022e 	bgeu	r3,r2,2f300 <secp256k1_scalar_mul_512+0x2fb8>
   2f2f8:	00c00044 	movi	r3,1
   2f2fc:	00000106 	br	2f304 <secp256k1_scalar_mul_512+0x2fbc>
   2f300:	0007883a 	mov	r3,zero
   2f304:	e0bd8017 	ldw	r2,-2560(fp)
   2f308:	10c5883a 	add	r2,r2,r3
   2f30c:	e0bd8015 	stw	r2,-2560(fp)
   2f310:	e0fd7f17 	ldw	r3,-2564(fp)
   2f314:	e0be2317 	ldw	r2,-1908(fp)
   2f318:	1885803a 	cmpltu	r2,r3,r2
   2f31c:	10803fcc 	andi	r2,r2,255
   2f320:	10001126 	beq	r2,zero,2f368 <secp256k1_scalar_mul_512+0x3020>
   2f324:	e0bd8017 	ldw	r2,-2560(fp)
   2f328:	1005003a 	cmpeq	r2,r2,zero
   2f32c:	10803fcc 	andi	r2,r2,255
   2f330:	10000d26 	beq	r2,zero,2f368 <secp256k1_scalar_mul_512+0x3020>
   2f334:	d0a01617 	ldw	r2,-32680(gp)
   2f338:	10c00317 	ldw	r3,12(r2)
   2f33c:	00800174 	movhi	r2,5
   2f340:	1096d604 	addi	r2,r2,23384
   2f344:	d8800015 	stw	r2,0(sp)
   2f348:	01c08804 	movi	r7,544
   2f34c:	01800174 	movhi	r6,5
   2f350:	31964204 	addi	r6,r6,22792
   2f354:	01400174 	movhi	r5,5
   2f358:	2951e804 	addi	r5,r5,18336
   2f35c:	1809883a 	mov	r4,r3
   2f360:	00461000 	call	46100 <fprintf>
   2f364:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[6], b->d[2]);
   2f368:	e0be8217 	ldw	r2,-1528(fp)
   2f36c:	10800617 	ldw	r2,24(r2)
   2f370:	e0bf6e15 	stw	r2,-584(fp)
   2f374:	e03f6f15 	stw	zero,-580(fp)
   2f378:	e0be8317 	ldw	r2,-1524(fp)
   2f37c:	10800217 	ldw	r2,8(r2)
   2f380:	e0bf7015 	stw	r2,-576(fp)
   2f384:	e03f7115 	stw	zero,-572(fp)
   2f388:	e1bf7017 	ldw	r6,-576(fp)
   2f38c:	e1ff7117 	ldw	r7,-572(fp)
   2f390:	e13f6e17 	ldw	r4,-584(fp)
   2f394:	e17f6f17 	ldw	r5,-580(fp)
   2f398:	00438e00 	call	438e0 <__muldi3>
   2f39c:	1009883a 	mov	r4,r2
   2f3a0:	180b883a 	mov	r5,r3
   2f3a4:	e13e2515 	stw	r4,-1900(fp)
   2f3a8:	e17e2615 	stw	r5,-1896(fp)
   2f3ac:	e0be2617 	ldw	r2,-1896(fp)
   2f3b0:	1004d83a 	srl	r2,r2,zero
   2f3b4:	e0bf7215 	stw	r2,-568(fp)
   2f3b8:	e03f7315 	stw	zero,-564(fp)
   2f3bc:	e0bf7217 	ldw	r2,-568(fp)
   2f3c0:	e0be2715 	stw	r2,-1892(fp)
   2f3c4:	e0be2517 	ldw	r2,-1900(fp)
   2f3c8:	e0be2815 	stw	r2,-1888(fp)
   2f3cc:	e0fd7e17 	ldw	r3,-2568(fp)
   2f3d0:	e0be2817 	ldw	r2,-1888(fp)
   2f3d4:	1885883a 	add	r2,r3,r2
   2f3d8:	e0bd7e15 	stw	r2,-2568(fp)
   2f3dc:	e0fd7e17 	ldw	r3,-2568(fp)
   2f3e0:	e0be2817 	ldw	r2,-1888(fp)
   2f3e4:	1880022e 	bgeu	r3,r2,2f3f0 <secp256k1_scalar_mul_512+0x30a8>
   2f3e8:	00c00044 	movi	r3,1
   2f3ec:	00000106 	br	2f3f4 <secp256k1_scalar_mul_512+0x30ac>
   2f3f0:	0007883a 	mov	r3,zero
   2f3f4:	e0be2717 	ldw	r2,-1892(fp)
   2f3f8:	10c5883a 	add	r2,r2,r3
   2f3fc:	e0be2715 	stw	r2,-1892(fp)
   2f400:	e0fd7f17 	ldw	r3,-2564(fp)
   2f404:	e0be2717 	ldw	r2,-1892(fp)
   2f408:	1885883a 	add	r2,r3,r2
   2f40c:	e0bd7f15 	stw	r2,-2564(fp)
   2f410:	e0fd7f17 	ldw	r3,-2564(fp)
   2f414:	e0be2717 	ldw	r2,-1892(fp)
   2f418:	1880022e 	bgeu	r3,r2,2f424 <secp256k1_scalar_mul_512+0x30dc>
   2f41c:	00c00044 	movi	r3,1
   2f420:	00000106 	br	2f428 <secp256k1_scalar_mul_512+0x30e0>
   2f424:	0007883a 	mov	r3,zero
   2f428:	e0bd8017 	ldw	r2,-2560(fp)
   2f42c:	10c5883a 	add	r2,r2,r3
   2f430:	e0bd8015 	stw	r2,-2560(fp)
   2f434:	e0fd7f17 	ldw	r3,-2564(fp)
   2f438:	e0be2717 	ldw	r2,-1892(fp)
   2f43c:	1885803a 	cmpltu	r2,r3,r2
   2f440:	10803fcc 	andi	r2,r2,255
   2f444:	10001126 	beq	r2,zero,2f48c <secp256k1_scalar_mul_512+0x3144>
   2f448:	e0bd8017 	ldw	r2,-2560(fp)
   2f44c:	1005003a 	cmpeq	r2,r2,zero
   2f450:	10803fcc 	andi	r2,r2,255
   2f454:	10000d26 	beq	r2,zero,2f48c <secp256k1_scalar_mul_512+0x3144>
   2f458:	d0a01617 	ldw	r2,-32680(gp)
   2f45c:	10c00317 	ldw	r3,12(r2)
   2f460:	00800174 	movhi	r2,5
   2f464:	1096d604 	addi	r2,r2,23384
   2f468:	d8800015 	stw	r2,0(sp)
   2f46c:	01c08844 	movi	r7,545
   2f470:	01800174 	movhi	r6,5
   2f474:	31964204 	addi	r6,r6,22792
   2f478:	01400174 	movhi	r5,5
   2f47c:	2951e804 	addi	r5,r5,18336
   2f480:	1809883a 	mov	r4,r3
   2f484:	00461000 	call	46100 <fprintf>
   2f488:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[7], b->d[1]);
   2f48c:	e0be8217 	ldw	r2,-1528(fp)
   2f490:	10800717 	ldw	r2,28(r2)
   2f494:	e0bf7415 	stw	r2,-560(fp)
   2f498:	e03f7515 	stw	zero,-556(fp)
   2f49c:	e0be8317 	ldw	r2,-1524(fp)
   2f4a0:	10800117 	ldw	r2,4(r2)
   2f4a4:	e0bf7615 	stw	r2,-552(fp)
   2f4a8:	e03f7715 	stw	zero,-548(fp)
   2f4ac:	e1bf7617 	ldw	r6,-552(fp)
   2f4b0:	e1ff7717 	ldw	r7,-548(fp)
   2f4b4:	e13f7417 	ldw	r4,-560(fp)
   2f4b8:	e17f7517 	ldw	r5,-556(fp)
   2f4bc:	00438e00 	call	438e0 <__muldi3>
   2f4c0:	1009883a 	mov	r4,r2
   2f4c4:	180b883a 	mov	r5,r3
   2f4c8:	e13e2915 	stw	r4,-1884(fp)
   2f4cc:	e17e2a15 	stw	r5,-1880(fp)
   2f4d0:	e0be2a17 	ldw	r2,-1880(fp)
   2f4d4:	1004d83a 	srl	r2,r2,zero
   2f4d8:	e0bf7815 	stw	r2,-544(fp)
   2f4dc:	e03f7915 	stw	zero,-540(fp)
   2f4e0:	e0bf7817 	ldw	r2,-544(fp)
   2f4e4:	e0be2b15 	stw	r2,-1876(fp)
   2f4e8:	e0be2917 	ldw	r2,-1884(fp)
   2f4ec:	e0be2c15 	stw	r2,-1872(fp)
   2f4f0:	e0fd7e17 	ldw	r3,-2568(fp)
   2f4f4:	e0be2c17 	ldw	r2,-1872(fp)
   2f4f8:	1885883a 	add	r2,r3,r2
   2f4fc:	e0bd7e15 	stw	r2,-2568(fp)
   2f500:	e0fd7e17 	ldw	r3,-2568(fp)
   2f504:	e0be2c17 	ldw	r2,-1872(fp)
   2f508:	1880022e 	bgeu	r3,r2,2f514 <secp256k1_scalar_mul_512+0x31cc>
   2f50c:	00c00044 	movi	r3,1
   2f510:	00000106 	br	2f518 <secp256k1_scalar_mul_512+0x31d0>
   2f514:	0007883a 	mov	r3,zero
   2f518:	e0be2b17 	ldw	r2,-1876(fp)
   2f51c:	10c5883a 	add	r2,r2,r3
   2f520:	e0be2b15 	stw	r2,-1876(fp)
   2f524:	e0fd7f17 	ldw	r3,-2564(fp)
   2f528:	e0be2b17 	ldw	r2,-1876(fp)
   2f52c:	1885883a 	add	r2,r3,r2
   2f530:	e0bd7f15 	stw	r2,-2564(fp)
   2f534:	e0fd7f17 	ldw	r3,-2564(fp)
   2f538:	e0be2b17 	ldw	r2,-1876(fp)
   2f53c:	1880022e 	bgeu	r3,r2,2f548 <secp256k1_scalar_mul_512+0x3200>
   2f540:	00c00044 	movi	r3,1
   2f544:	00000106 	br	2f54c <secp256k1_scalar_mul_512+0x3204>
   2f548:	0007883a 	mov	r3,zero
   2f54c:	e0bd8017 	ldw	r2,-2560(fp)
   2f550:	10c5883a 	add	r2,r2,r3
   2f554:	e0bd8015 	stw	r2,-2560(fp)
   2f558:	e0fd7f17 	ldw	r3,-2564(fp)
   2f55c:	e0be2b17 	ldw	r2,-1876(fp)
   2f560:	1885803a 	cmpltu	r2,r3,r2
   2f564:	10803fcc 	andi	r2,r2,255
   2f568:	10001126 	beq	r2,zero,2f5b0 <secp256k1_scalar_mul_512+0x3268>
   2f56c:	e0bd8017 	ldw	r2,-2560(fp)
   2f570:	1005003a 	cmpeq	r2,r2,zero
   2f574:	10803fcc 	andi	r2,r2,255
   2f578:	10000d26 	beq	r2,zero,2f5b0 <secp256k1_scalar_mul_512+0x3268>
   2f57c:	d0a01617 	ldw	r2,-32680(gp)
   2f580:	10c00317 	ldw	r3,12(r2)
   2f584:	00800174 	movhi	r2,5
   2f588:	1096d604 	addi	r2,r2,23384
   2f58c:	d8800015 	stw	r2,0(sp)
   2f590:	01c08884 	movi	r7,546
   2f594:	01800174 	movhi	r6,5
   2f598:	31964204 	addi	r6,r6,22792
   2f59c:	01400174 	movhi	r5,5
   2f5a0:	2951e804 	addi	r5,r5,18336
   2f5a4:	1809883a 	mov	r4,r3
   2f5a8:	00461000 	call	46100 <fprintf>
   2f5ac:	0045fd40 	call	45fd4 <abort>
    extract(l[8]);
   2f5b0:	e0be8117 	ldw	r2,-1532(fp)
   2f5b4:	10c00804 	addi	r3,r2,32
   2f5b8:	e0bd7e17 	ldw	r2,-2568(fp)
   2f5bc:	18800015 	stw	r2,0(r3)
   2f5c0:	e0bd7f17 	ldw	r2,-2564(fp)
   2f5c4:	e0bd7e15 	stw	r2,-2568(fp)
   2f5c8:	e0bd8017 	ldw	r2,-2560(fp)
   2f5cc:	e0bd7f15 	stw	r2,-2564(fp)
   2f5d0:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[2], b->d[7]);
   2f5d4:	e0be8217 	ldw	r2,-1528(fp)
   2f5d8:	10800217 	ldw	r2,8(r2)
   2f5dc:	e0bf7a15 	stw	r2,-536(fp)
   2f5e0:	e03f7b15 	stw	zero,-532(fp)
   2f5e4:	e0be8317 	ldw	r2,-1524(fp)
   2f5e8:	10800717 	ldw	r2,28(r2)
   2f5ec:	e0bf7c15 	stw	r2,-528(fp)
   2f5f0:	e03f7d15 	stw	zero,-524(fp)
   2f5f4:	e1bf7c17 	ldw	r6,-528(fp)
   2f5f8:	e1ff7d17 	ldw	r7,-524(fp)
   2f5fc:	e13f7a17 	ldw	r4,-536(fp)
   2f600:	e17f7b17 	ldw	r5,-532(fp)
   2f604:	00438e00 	call	438e0 <__muldi3>
   2f608:	1009883a 	mov	r4,r2
   2f60c:	180b883a 	mov	r5,r3
   2f610:	e13e2d15 	stw	r4,-1868(fp)
   2f614:	e17e2e15 	stw	r5,-1864(fp)
   2f618:	e0be2e17 	ldw	r2,-1864(fp)
   2f61c:	1004d83a 	srl	r2,r2,zero
   2f620:	e0bf7e15 	stw	r2,-520(fp)
   2f624:	e03f7f15 	stw	zero,-516(fp)
   2f628:	e0bf7e17 	ldw	r2,-520(fp)
   2f62c:	e0be2f15 	stw	r2,-1860(fp)
   2f630:	e0be2d17 	ldw	r2,-1868(fp)
   2f634:	e0be3015 	stw	r2,-1856(fp)
   2f638:	e0fd7e17 	ldw	r3,-2568(fp)
   2f63c:	e0be3017 	ldw	r2,-1856(fp)
   2f640:	1885883a 	add	r2,r3,r2
   2f644:	e0bd7e15 	stw	r2,-2568(fp)
   2f648:	e0fd7e17 	ldw	r3,-2568(fp)
   2f64c:	e0be3017 	ldw	r2,-1856(fp)
   2f650:	1880022e 	bgeu	r3,r2,2f65c <secp256k1_scalar_mul_512+0x3314>
   2f654:	00c00044 	movi	r3,1
   2f658:	00000106 	br	2f660 <secp256k1_scalar_mul_512+0x3318>
   2f65c:	0007883a 	mov	r3,zero
   2f660:	e0be2f17 	ldw	r2,-1860(fp)
   2f664:	10c5883a 	add	r2,r2,r3
   2f668:	e0be2f15 	stw	r2,-1860(fp)
   2f66c:	e0fd7f17 	ldw	r3,-2564(fp)
   2f670:	e0be2f17 	ldw	r2,-1860(fp)
   2f674:	1885883a 	add	r2,r3,r2
   2f678:	e0bd7f15 	stw	r2,-2564(fp)
   2f67c:	e0fd7f17 	ldw	r3,-2564(fp)
   2f680:	e0be2f17 	ldw	r2,-1860(fp)
   2f684:	1880022e 	bgeu	r3,r2,2f690 <secp256k1_scalar_mul_512+0x3348>
   2f688:	00c00044 	movi	r3,1
   2f68c:	00000106 	br	2f694 <secp256k1_scalar_mul_512+0x334c>
   2f690:	0007883a 	mov	r3,zero
   2f694:	e0bd8017 	ldw	r2,-2560(fp)
   2f698:	10c5883a 	add	r2,r2,r3
   2f69c:	e0bd8015 	stw	r2,-2560(fp)
   2f6a0:	e0fd7f17 	ldw	r3,-2564(fp)
   2f6a4:	e0be2f17 	ldw	r2,-1860(fp)
   2f6a8:	1885803a 	cmpltu	r2,r3,r2
   2f6ac:	10803fcc 	andi	r2,r2,255
   2f6b0:	10001126 	beq	r2,zero,2f6f8 <secp256k1_scalar_mul_512+0x33b0>
   2f6b4:	e0bd8017 	ldw	r2,-2560(fp)
   2f6b8:	1005003a 	cmpeq	r2,r2,zero
   2f6bc:	10803fcc 	andi	r2,r2,255
   2f6c0:	10000d26 	beq	r2,zero,2f6f8 <secp256k1_scalar_mul_512+0x33b0>
   2f6c4:	d0a01617 	ldw	r2,-32680(gp)
   2f6c8:	10c00317 	ldw	r3,12(r2)
   2f6cc:	00800174 	movhi	r2,5
   2f6d0:	1096d604 	addi	r2,r2,23384
   2f6d4:	d8800015 	stw	r2,0(sp)
   2f6d8:	01c08904 	movi	r7,548
   2f6dc:	01800174 	movhi	r6,5
   2f6e0:	31964204 	addi	r6,r6,22792
   2f6e4:	01400174 	movhi	r5,5
   2f6e8:	2951e804 	addi	r5,r5,18336
   2f6ec:	1809883a 	mov	r4,r3
   2f6f0:	00461000 	call	46100 <fprintf>
   2f6f4:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[3], b->d[6]);
   2f6f8:	e0be8217 	ldw	r2,-1528(fp)
   2f6fc:	10800317 	ldw	r2,12(r2)
   2f700:	e0bf8015 	stw	r2,-512(fp)
   2f704:	e03f8115 	stw	zero,-508(fp)
   2f708:	e0be8317 	ldw	r2,-1524(fp)
   2f70c:	10800617 	ldw	r2,24(r2)
   2f710:	e0bf8215 	stw	r2,-504(fp)
   2f714:	e03f8315 	stw	zero,-500(fp)
   2f718:	e1bf8217 	ldw	r6,-504(fp)
   2f71c:	e1ff8317 	ldw	r7,-500(fp)
   2f720:	e13f8017 	ldw	r4,-512(fp)
   2f724:	e17f8117 	ldw	r5,-508(fp)
   2f728:	00438e00 	call	438e0 <__muldi3>
   2f72c:	1009883a 	mov	r4,r2
   2f730:	180b883a 	mov	r5,r3
   2f734:	e13e3115 	stw	r4,-1852(fp)
   2f738:	e17e3215 	stw	r5,-1848(fp)
   2f73c:	e0be3217 	ldw	r2,-1848(fp)
   2f740:	1004d83a 	srl	r2,r2,zero
   2f744:	e0bf8415 	stw	r2,-496(fp)
   2f748:	e03f8515 	stw	zero,-492(fp)
   2f74c:	e0bf8417 	ldw	r2,-496(fp)
   2f750:	e0be3315 	stw	r2,-1844(fp)
   2f754:	e0be3117 	ldw	r2,-1852(fp)
   2f758:	e0be3415 	stw	r2,-1840(fp)
   2f75c:	e0fd7e17 	ldw	r3,-2568(fp)
   2f760:	e0be3417 	ldw	r2,-1840(fp)
   2f764:	1885883a 	add	r2,r3,r2
   2f768:	e0bd7e15 	stw	r2,-2568(fp)
   2f76c:	e0fd7e17 	ldw	r3,-2568(fp)
   2f770:	e0be3417 	ldw	r2,-1840(fp)
   2f774:	1880022e 	bgeu	r3,r2,2f780 <secp256k1_scalar_mul_512+0x3438>
   2f778:	00c00044 	movi	r3,1
   2f77c:	00000106 	br	2f784 <secp256k1_scalar_mul_512+0x343c>
   2f780:	0007883a 	mov	r3,zero
   2f784:	e0be3317 	ldw	r2,-1844(fp)
   2f788:	10c5883a 	add	r2,r2,r3
   2f78c:	e0be3315 	stw	r2,-1844(fp)
   2f790:	e0fd7f17 	ldw	r3,-2564(fp)
   2f794:	e0be3317 	ldw	r2,-1844(fp)
   2f798:	1885883a 	add	r2,r3,r2
   2f79c:	e0bd7f15 	stw	r2,-2564(fp)
   2f7a0:	e0fd7f17 	ldw	r3,-2564(fp)
   2f7a4:	e0be3317 	ldw	r2,-1844(fp)
   2f7a8:	1880022e 	bgeu	r3,r2,2f7b4 <secp256k1_scalar_mul_512+0x346c>
   2f7ac:	00c00044 	movi	r3,1
   2f7b0:	00000106 	br	2f7b8 <secp256k1_scalar_mul_512+0x3470>
   2f7b4:	0007883a 	mov	r3,zero
   2f7b8:	e0bd8017 	ldw	r2,-2560(fp)
   2f7bc:	10c5883a 	add	r2,r2,r3
   2f7c0:	e0bd8015 	stw	r2,-2560(fp)
   2f7c4:	e0fd7f17 	ldw	r3,-2564(fp)
   2f7c8:	e0be3317 	ldw	r2,-1844(fp)
   2f7cc:	1885803a 	cmpltu	r2,r3,r2
   2f7d0:	10803fcc 	andi	r2,r2,255
   2f7d4:	10001126 	beq	r2,zero,2f81c <secp256k1_scalar_mul_512+0x34d4>
   2f7d8:	e0bd8017 	ldw	r2,-2560(fp)
   2f7dc:	1005003a 	cmpeq	r2,r2,zero
   2f7e0:	10803fcc 	andi	r2,r2,255
   2f7e4:	10000d26 	beq	r2,zero,2f81c <secp256k1_scalar_mul_512+0x34d4>
   2f7e8:	d0a01617 	ldw	r2,-32680(gp)
   2f7ec:	10c00317 	ldw	r3,12(r2)
   2f7f0:	00800174 	movhi	r2,5
   2f7f4:	1096d604 	addi	r2,r2,23384
   2f7f8:	d8800015 	stw	r2,0(sp)
   2f7fc:	01c08944 	movi	r7,549
   2f800:	01800174 	movhi	r6,5
   2f804:	31964204 	addi	r6,r6,22792
   2f808:	01400174 	movhi	r5,5
   2f80c:	2951e804 	addi	r5,r5,18336
   2f810:	1809883a 	mov	r4,r3
   2f814:	00461000 	call	46100 <fprintf>
   2f818:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[4], b->d[5]);
   2f81c:	e0be8217 	ldw	r2,-1528(fp)
   2f820:	10800417 	ldw	r2,16(r2)
   2f824:	e0bf8615 	stw	r2,-488(fp)
   2f828:	e03f8715 	stw	zero,-484(fp)
   2f82c:	e0be8317 	ldw	r2,-1524(fp)
   2f830:	10800517 	ldw	r2,20(r2)
   2f834:	e0bf8815 	stw	r2,-480(fp)
   2f838:	e03f8915 	stw	zero,-476(fp)
   2f83c:	e1bf8817 	ldw	r6,-480(fp)
   2f840:	e1ff8917 	ldw	r7,-476(fp)
   2f844:	e13f8617 	ldw	r4,-488(fp)
   2f848:	e17f8717 	ldw	r5,-484(fp)
   2f84c:	00438e00 	call	438e0 <__muldi3>
   2f850:	1009883a 	mov	r4,r2
   2f854:	180b883a 	mov	r5,r3
   2f858:	e13e3515 	stw	r4,-1836(fp)
   2f85c:	e17e3615 	stw	r5,-1832(fp)
   2f860:	e0be3617 	ldw	r2,-1832(fp)
   2f864:	1004d83a 	srl	r2,r2,zero
   2f868:	e0bf8a15 	stw	r2,-472(fp)
   2f86c:	e03f8b15 	stw	zero,-468(fp)
   2f870:	e0bf8a17 	ldw	r2,-472(fp)
   2f874:	e0be3715 	stw	r2,-1828(fp)
   2f878:	e0be3517 	ldw	r2,-1836(fp)
   2f87c:	e0be3815 	stw	r2,-1824(fp)
   2f880:	e0fd7e17 	ldw	r3,-2568(fp)
   2f884:	e0be3817 	ldw	r2,-1824(fp)
   2f888:	1885883a 	add	r2,r3,r2
   2f88c:	e0bd7e15 	stw	r2,-2568(fp)
   2f890:	e0fd7e17 	ldw	r3,-2568(fp)
   2f894:	e0be3817 	ldw	r2,-1824(fp)
   2f898:	1880022e 	bgeu	r3,r2,2f8a4 <secp256k1_scalar_mul_512+0x355c>
   2f89c:	00c00044 	movi	r3,1
   2f8a0:	00000106 	br	2f8a8 <secp256k1_scalar_mul_512+0x3560>
   2f8a4:	0007883a 	mov	r3,zero
   2f8a8:	e0be3717 	ldw	r2,-1828(fp)
   2f8ac:	10c5883a 	add	r2,r2,r3
   2f8b0:	e0be3715 	stw	r2,-1828(fp)
   2f8b4:	e0fd7f17 	ldw	r3,-2564(fp)
   2f8b8:	e0be3717 	ldw	r2,-1828(fp)
   2f8bc:	1885883a 	add	r2,r3,r2
   2f8c0:	e0bd7f15 	stw	r2,-2564(fp)
   2f8c4:	e0fd7f17 	ldw	r3,-2564(fp)
   2f8c8:	e0be3717 	ldw	r2,-1828(fp)
   2f8cc:	1880022e 	bgeu	r3,r2,2f8d8 <secp256k1_scalar_mul_512+0x3590>
   2f8d0:	00c00044 	movi	r3,1
   2f8d4:	00000106 	br	2f8dc <secp256k1_scalar_mul_512+0x3594>
   2f8d8:	0007883a 	mov	r3,zero
   2f8dc:	e0bd8017 	ldw	r2,-2560(fp)
   2f8e0:	10c5883a 	add	r2,r2,r3
   2f8e4:	e0bd8015 	stw	r2,-2560(fp)
   2f8e8:	e0fd7f17 	ldw	r3,-2564(fp)
   2f8ec:	e0be3717 	ldw	r2,-1828(fp)
   2f8f0:	1885803a 	cmpltu	r2,r3,r2
   2f8f4:	10803fcc 	andi	r2,r2,255
   2f8f8:	10001126 	beq	r2,zero,2f940 <secp256k1_scalar_mul_512+0x35f8>
   2f8fc:	e0bd8017 	ldw	r2,-2560(fp)
   2f900:	1005003a 	cmpeq	r2,r2,zero
   2f904:	10803fcc 	andi	r2,r2,255
   2f908:	10000d26 	beq	r2,zero,2f940 <secp256k1_scalar_mul_512+0x35f8>
   2f90c:	d0a01617 	ldw	r2,-32680(gp)
   2f910:	10c00317 	ldw	r3,12(r2)
   2f914:	00800174 	movhi	r2,5
   2f918:	1096d604 	addi	r2,r2,23384
   2f91c:	d8800015 	stw	r2,0(sp)
   2f920:	01c08984 	movi	r7,550
   2f924:	01800174 	movhi	r6,5
   2f928:	31964204 	addi	r6,r6,22792
   2f92c:	01400174 	movhi	r5,5
   2f930:	2951e804 	addi	r5,r5,18336
   2f934:	1809883a 	mov	r4,r3
   2f938:	00461000 	call	46100 <fprintf>
   2f93c:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[5], b->d[4]);
   2f940:	e0be8217 	ldw	r2,-1528(fp)
   2f944:	10800517 	ldw	r2,20(r2)
   2f948:	e0bf8c15 	stw	r2,-464(fp)
   2f94c:	e03f8d15 	stw	zero,-460(fp)
   2f950:	e0be8317 	ldw	r2,-1524(fp)
   2f954:	10800417 	ldw	r2,16(r2)
   2f958:	e0bf8e15 	stw	r2,-456(fp)
   2f95c:	e03f8f15 	stw	zero,-452(fp)
   2f960:	e1bf8e17 	ldw	r6,-456(fp)
   2f964:	e1ff8f17 	ldw	r7,-452(fp)
   2f968:	e13f8c17 	ldw	r4,-464(fp)
   2f96c:	e17f8d17 	ldw	r5,-460(fp)
   2f970:	00438e00 	call	438e0 <__muldi3>
   2f974:	1009883a 	mov	r4,r2
   2f978:	180b883a 	mov	r5,r3
   2f97c:	e13e3915 	stw	r4,-1820(fp)
   2f980:	e17e3a15 	stw	r5,-1816(fp)
   2f984:	e0be3a17 	ldw	r2,-1816(fp)
   2f988:	1004d83a 	srl	r2,r2,zero
   2f98c:	e0bf9015 	stw	r2,-448(fp)
   2f990:	e03f9115 	stw	zero,-444(fp)
   2f994:	e0bf9017 	ldw	r2,-448(fp)
   2f998:	e0be3b15 	stw	r2,-1812(fp)
   2f99c:	e0be3917 	ldw	r2,-1820(fp)
   2f9a0:	e0be3c15 	stw	r2,-1808(fp)
   2f9a4:	e0fd7e17 	ldw	r3,-2568(fp)
   2f9a8:	e0be3c17 	ldw	r2,-1808(fp)
   2f9ac:	1885883a 	add	r2,r3,r2
   2f9b0:	e0bd7e15 	stw	r2,-2568(fp)
   2f9b4:	e0fd7e17 	ldw	r3,-2568(fp)
   2f9b8:	e0be3c17 	ldw	r2,-1808(fp)
   2f9bc:	1880022e 	bgeu	r3,r2,2f9c8 <secp256k1_scalar_mul_512+0x3680>
   2f9c0:	00c00044 	movi	r3,1
   2f9c4:	00000106 	br	2f9cc <secp256k1_scalar_mul_512+0x3684>
   2f9c8:	0007883a 	mov	r3,zero
   2f9cc:	e0be3b17 	ldw	r2,-1812(fp)
   2f9d0:	10c5883a 	add	r2,r2,r3
   2f9d4:	e0be3b15 	stw	r2,-1812(fp)
   2f9d8:	e0fd7f17 	ldw	r3,-2564(fp)
   2f9dc:	e0be3b17 	ldw	r2,-1812(fp)
   2f9e0:	1885883a 	add	r2,r3,r2
   2f9e4:	e0bd7f15 	stw	r2,-2564(fp)
   2f9e8:	e0fd7f17 	ldw	r3,-2564(fp)
   2f9ec:	e0be3b17 	ldw	r2,-1812(fp)
   2f9f0:	1880022e 	bgeu	r3,r2,2f9fc <secp256k1_scalar_mul_512+0x36b4>
   2f9f4:	00c00044 	movi	r3,1
   2f9f8:	00000106 	br	2fa00 <secp256k1_scalar_mul_512+0x36b8>
   2f9fc:	0007883a 	mov	r3,zero
   2fa00:	e0bd8017 	ldw	r2,-2560(fp)
   2fa04:	10c5883a 	add	r2,r2,r3
   2fa08:	e0bd8015 	stw	r2,-2560(fp)
   2fa0c:	e0fd7f17 	ldw	r3,-2564(fp)
   2fa10:	e0be3b17 	ldw	r2,-1812(fp)
   2fa14:	1885803a 	cmpltu	r2,r3,r2
   2fa18:	10803fcc 	andi	r2,r2,255
   2fa1c:	10001126 	beq	r2,zero,2fa64 <secp256k1_scalar_mul_512+0x371c>
   2fa20:	e0bd8017 	ldw	r2,-2560(fp)
   2fa24:	1005003a 	cmpeq	r2,r2,zero
   2fa28:	10803fcc 	andi	r2,r2,255
   2fa2c:	10000d26 	beq	r2,zero,2fa64 <secp256k1_scalar_mul_512+0x371c>
   2fa30:	d0a01617 	ldw	r2,-32680(gp)
   2fa34:	10c00317 	ldw	r3,12(r2)
   2fa38:	00800174 	movhi	r2,5
   2fa3c:	1096d604 	addi	r2,r2,23384
   2fa40:	d8800015 	stw	r2,0(sp)
   2fa44:	01c089c4 	movi	r7,551
   2fa48:	01800174 	movhi	r6,5
   2fa4c:	31964204 	addi	r6,r6,22792
   2fa50:	01400174 	movhi	r5,5
   2fa54:	2951e804 	addi	r5,r5,18336
   2fa58:	1809883a 	mov	r4,r3
   2fa5c:	00461000 	call	46100 <fprintf>
   2fa60:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[6], b->d[3]);
   2fa64:	e0be8217 	ldw	r2,-1528(fp)
   2fa68:	10800617 	ldw	r2,24(r2)
   2fa6c:	e0bf9215 	stw	r2,-440(fp)
   2fa70:	e03f9315 	stw	zero,-436(fp)
   2fa74:	e0be8317 	ldw	r2,-1524(fp)
   2fa78:	10800317 	ldw	r2,12(r2)
   2fa7c:	e0bf9415 	stw	r2,-432(fp)
   2fa80:	e03f9515 	stw	zero,-428(fp)
   2fa84:	e1bf9417 	ldw	r6,-432(fp)
   2fa88:	e1ff9517 	ldw	r7,-428(fp)
   2fa8c:	e13f9217 	ldw	r4,-440(fp)
   2fa90:	e17f9317 	ldw	r5,-436(fp)
   2fa94:	00438e00 	call	438e0 <__muldi3>
   2fa98:	1009883a 	mov	r4,r2
   2fa9c:	180b883a 	mov	r5,r3
   2faa0:	e13e3d15 	stw	r4,-1804(fp)
   2faa4:	e17e3e15 	stw	r5,-1800(fp)
   2faa8:	e0be3e17 	ldw	r2,-1800(fp)
   2faac:	1004d83a 	srl	r2,r2,zero
   2fab0:	e0bf9615 	stw	r2,-424(fp)
   2fab4:	e03f9715 	stw	zero,-420(fp)
   2fab8:	e0bf9617 	ldw	r2,-424(fp)
   2fabc:	e0be3f15 	stw	r2,-1796(fp)
   2fac0:	e0be3d17 	ldw	r2,-1804(fp)
   2fac4:	e0be4015 	stw	r2,-1792(fp)
   2fac8:	e0fd7e17 	ldw	r3,-2568(fp)
   2facc:	e0be4017 	ldw	r2,-1792(fp)
   2fad0:	1885883a 	add	r2,r3,r2
   2fad4:	e0bd7e15 	stw	r2,-2568(fp)
   2fad8:	e0fd7e17 	ldw	r3,-2568(fp)
   2fadc:	e0be4017 	ldw	r2,-1792(fp)
   2fae0:	1880022e 	bgeu	r3,r2,2faec <secp256k1_scalar_mul_512+0x37a4>
   2fae4:	00c00044 	movi	r3,1
   2fae8:	00000106 	br	2faf0 <secp256k1_scalar_mul_512+0x37a8>
   2faec:	0007883a 	mov	r3,zero
   2faf0:	e0be3f17 	ldw	r2,-1796(fp)
   2faf4:	10c5883a 	add	r2,r2,r3
   2faf8:	e0be3f15 	stw	r2,-1796(fp)
   2fafc:	e0fd7f17 	ldw	r3,-2564(fp)
   2fb00:	e0be3f17 	ldw	r2,-1796(fp)
   2fb04:	1885883a 	add	r2,r3,r2
   2fb08:	e0bd7f15 	stw	r2,-2564(fp)
   2fb0c:	e0fd7f17 	ldw	r3,-2564(fp)
   2fb10:	e0be3f17 	ldw	r2,-1796(fp)
   2fb14:	1880022e 	bgeu	r3,r2,2fb20 <secp256k1_scalar_mul_512+0x37d8>
   2fb18:	00c00044 	movi	r3,1
   2fb1c:	00000106 	br	2fb24 <secp256k1_scalar_mul_512+0x37dc>
   2fb20:	0007883a 	mov	r3,zero
   2fb24:	e0bd8017 	ldw	r2,-2560(fp)
   2fb28:	10c5883a 	add	r2,r2,r3
   2fb2c:	e0bd8015 	stw	r2,-2560(fp)
   2fb30:	e0fd7f17 	ldw	r3,-2564(fp)
   2fb34:	e0be3f17 	ldw	r2,-1796(fp)
   2fb38:	1885803a 	cmpltu	r2,r3,r2
   2fb3c:	10803fcc 	andi	r2,r2,255
   2fb40:	10001126 	beq	r2,zero,2fb88 <secp256k1_scalar_mul_512+0x3840>
   2fb44:	e0bd8017 	ldw	r2,-2560(fp)
   2fb48:	1005003a 	cmpeq	r2,r2,zero
   2fb4c:	10803fcc 	andi	r2,r2,255
   2fb50:	10000d26 	beq	r2,zero,2fb88 <secp256k1_scalar_mul_512+0x3840>
   2fb54:	d0a01617 	ldw	r2,-32680(gp)
   2fb58:	10c00317 	ldw	r3,12(r2)
   2fb5c:	00800174 	movhi	r2,5
   2fb60:	1096d604 	addi	r2,r2,23384
   2fb64:	d8800015 	stw	r2,0(sp)
   2fb68:	01c08a04 	movi	r7,552
   2fb6c:	01800174 	movhi	r6,5
   2fb70:	31964204 	addi	r6,r6,22792
   2fb74:	01400174 	movhi	r5,5
   2fb78:	2951e804 	addi	r5,r5,18336
   2fb7c:	1809883a 	mov	r4,r3
   2fb80:	00461000 	call	46100 <fprintf>
   2fb84:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[7], b->d[2]);
   2fb88:	e0be8217 	ldw	r2,-1528(fp)
   2fb8c:	10800717 	ldw	r2,28(r2)
   2fb90:	e0bf9815 	stw	r2,-416(fp)
   2fb94:	e03f9915 	stw	zero,-412(fp)
   2fb98:	e0be8317 	ldw	r2,-1524(fp)
   2fb9c:	10800217 	ldw	r2,8(r2)
   2fba0:	e0bf9a15 	stw	r2,-408(fp)
   2fba4:	e03f9b15 	stw	zero,-404(fp)
   2fba8:	e1bf9a17 	ldw	r6,-408(fp)
   2fbac:	e1ff9b17 	ldw	r7,-404(fp)
   2fbb0:	e13f9817 	ldw	r4,-416(fp)
   2fbb4:	e17f9917 	ldw	r5,-412(fp)
   2fbb8:	00438e00 	call	438e0 <__muldi3>
   2fbbc:	1009883a 	mov	r4,r2
   2fbc0:	180b883a 	mov	r5,r3
   2fbc4:	e13e4115 	stw	r4,-1788(fp)
   2fbc8:	e17e4215 	stw	r5,-1784(fp)
   2fbcc:	e0be4217 	ldw	r2,-1784(fp)
   2fbd0:	1004d83a 	srl	r2,r2,zero
   2fbd4:	e0bf9c15 	stw	r2,-400(fp)
   2fbd8:	e03f9d15 	stw	zero,-396(fp)
   2fbdc:	e0bf9c17 	ldw	r2,-400(fp)
   2fbe0:	e0be4315 	stw	r2,-1780(fp)
   2fbe4:	e0be4117 	ldw	r2,-1788(fp)
   2fbe8:	e0be4415 	stw	r2,-1776(fp)
   2fbec:	e0fd7e17 	ldw	r3,-2568(fp)
   2fbf0:	e0be4417 	ldw	r2,-1776(fp)
   2fbf4:	1885883a 	add	r2,r3,r2
   2fbf8:	e0bd7e15 	stw	r2,-2568(fp)
   2fbfc:	e0fd7e17 	ldw	r3,-2568(fp)
   2fc00:	e0be4417 	ldw	r2,-1776(fp)
   2fc04:	1880022e 	bgeu	r3,r2,2fc10 <secp256k1_scalar_mul_512+0x38c8>
   2fc08:	00c00044 	movi	r3,1
   2fc0c:	00000106 	br	2fc14 <secp256k1_scalar_mul_512+0x38cc>
   2fc10:	0007883a 	mov	r3,zero
   2fc14:	e0be4317 	ldw	r2,-1780(fp)
   2fc18:	10c5883a 	add	r2,r2,r3
   2fc1c:	e0be4315 	stw	r2,-1780(fp)
   2fc20:	e0fd7f17 	ldw	r3,-2564(fp)
   2fc24:	e0be4317 	ldw	r2,-1780(fp)
   2fc28:	1885883a 	add	r2,r3,r2
   2fc2c:	e0bd7f15 	stw	r2,-2564(fp)
   2fc30:	e0fd7f17 	ldw	r3,-2564(fp)
   2fc34:	e0be4317 	ldw	r2,-1780(fp)
   2fc38:	1880022e 	bgeu	r3,r2,2fc44 <secp256k1_scalar_mul_512+0x38fc>
   2fc3c:	00c00044 	movi	r3,1
   2fc40:	00000106 	br	2fc48 <secp256k1_scalar_mul_512+0x3900>
   2fc44:	0007883a 	mov	r3,zero
   2fc48:	e0bd8017 	ldw	r2,-2560(fp)
   2fc4c:	10c5883a 	add	r2,r2,r3
   2fc50:	e0bd8015 	stw	r2,-2560(fp)
   2fc54:	e0fd7f17 	ldw	r3,-2564(fp)
   2fc58:	e0be4317 	ldw	r2,-1780(fp)
   2fc5c:	1885803a 	cmpltu	r2,r3,r2
   2fc60:	10803fcc 	andi	r2,r2,255
   2fc64:	10001126 	beq	r2,zero,2fcac <secp256k1_scalar_mul_512+0x3964>
   2fc68:	e0bd8017 	ldw	r2,-2560(fp)
   2fc6c:	1005003a 	cmpeq	r2,r2,zero
   2fc70:	10803fcc 	andi	r2,r2,255
   2fc74:	10000d26 	beq	r2,zero,2fcac <secp256k1_scalar_mul_512+0x3964>
   2fc78:	d0a01617 	ldw	r2,-32680(gp)
   2fc7c:	10c00317 	ldw	r3,12(r2)
   2fc80:	00800174 	movhi	r2,5
   2fc84:	1096d604 	addi	r2,r2,23384
   2fc88:	d8800015 	stw	r2,0(sp)
   2fc8c:	01c08a44 	movi	r7,553
   2fc90:	01800174 	movhi	r6,5
   2fc94:	31964204 	addi	r6,r6,22792
   2fc98:	01400174 	movhi	r5,5
   2fc9c:	2951e804 	addi	r5,r5,18336
   2fca0:	1809883a 	mov	r4,r3
   2fca4:	00461000 	call	46100 <fprintf>
   2fca8:	0045fd40 	call	45fd4 <abort>
    extract(l[9]);
   2fcac:	e0be8117 	ldw	r2,-1532(fp)
   2fcb0:	10c00904 	addi	r3,r2,36
   2fcb4:	e0bd7e17 	ldw	r2,-2568(fp)
   2fcb8:	18800015 	stw	r2,0(r3)
   2fcbc:	e0bd7f17 	ldw	r2,-2564(fp)
   2fcc0:	e0bd7e15 	stw	r2,-2568(fp)
   2fcc4:	e0bd8017 	ldw	r2,-2560(fp)
   2fcc8:	e0bd7f15 	stw	r2,-2564(fp)
   2fccc:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[3], b->d[7]);
   2fcd0:	e0be8217 	ldw	r2,-1528(fp)
   2fcd4:	10800317 	ldw	r2,12(r2)
   2fcd8:	e0bf9e15 	stw	r2,-392(fp)
   2fcdc:	e03f9f15 	stw	zero,-388(fp)
   2fce0:	e0be8317 	ldw	r2,-1524(fp)
   2fce4:	10800717 	ldw	r2,28(r2)
   2fce8:	e0bfa015 	stw	r2,-384(fp)
   2fcec:	e03fa115 	stw	zero,-380(fp)
   2fcf0:	e1bfa017 	ldw	r6,-384(fp)
   2fcf4:	e1ffa117 	ldw	r7,-380(fp)
   2fcf8:	e13f9e17 	ldw	r4,-392(fp)
   2fcfc:	e17f9f17 	ldw	r5,-388(fp)
   2fd00:	00438e00 	call	438e0 <__muldi3>
   2fd04:	1009883a 	mov	r4,r2
   2fd08:	180b883a 	mov	r5,r3
   2fd0c:	e13e4515 	stw	r4,-1772(fp)
   2fd10:	e17e4615 	stw	r5,-1768(fp)
   2fd14:	e0be4617 	ldw	r2,-1768(fp)
   2fd18:	1004d83a 	srl	r2,r2,zero
   2fd1c:	e0bfa215 	stw	r2,-376(fp)
   2fd20:	e03fa315 	stw	zero,-372(fp)
   2fd24:	e0bfa217 	ldw	r2,-376(fp)
   2fd28:	e0be4715 	stw	r2,-1764(fp)
   2fd2c:	e0be4517 	ldw	r2,-1772(fp)
   2fd30:	e0be4815 	stw	r2,-1760(fp)
   2fd34:	e0fd7e17 	ldw	r3,-2568(fp)
   2fd38:	e0be4817 	ldw	r2,-1760(fp)
   2fd3c:	1885883a 	add	r2,r3,r2
   2fd40:	e0bd7e15 	stw	r2,-2568(fp)
   2fd44:	e0fd7e17 	ldw	r3,-2568(fp)
   2fd48:	e0be4817 	ldw	r2,-1760(fp)
   2fd4c:	1880022e 	bgeu	r3,r2,2fd58 <secp256k1_scalar_mul_512+0x3a10>
   2fd50:	00c00044 	movi	r3,1
   2fd54:	00000106 	br	2fd5c <secp256k1_scalar_mul_512+0x3a14>
   2fd58:	0007883a 	mov	r3,zero
   2fd5c:	e0be4717 	ldw	r2,-1764(fp)
   2fd60:	10c5883a 	add	r2,r2,r3
   2fd64:	e0be4715 	stw	r2,-1764(fp)
   2fd68:	e0fd7f17 	ldw	r3,-2564(fp)
   2fd6c:	e0be4717 	ldw	r2,-1764(fp)
   2fd70:	1885883a 	add	r2,r3,r2
   2fd74:	e0bd7f15 	stw	r2,-2564(fp)
   2fd78:	e0fd7f17 	ldw	r3,-2564(fp)
   2fd7c:	e0be4717 	ldw	r2,-1764(fp)
   2fd80:	1880022e 	bgeu	r3,r2,2fd8c <secp256k1_scalar_mul_512+0x3a44>
   2fd84:	00c00044 	movi	r3,1
   2fd88:	00000106 	br	2fd90 <secp256k1_scalar_mul_512+0x3a48>
   2fd8c:	0007883a 	mov	r3,zero
   2fd90:	e0bd8017 	ldw	r2,-2560(fp)
   2fd94:	10c5883a 	add	r2,r2,r3
   2fd98:	e0bd8015 	stw	r2,-2560(fp)
   2fd9c:	e0fd7f17 	ldw	r3,-2564(fp)
   2fda0:	e0be4717 	ldw	r2,-1764(fp)
   2fda4:	1885803a 	cmpltu	r2,r3,r2
   2fda8:	10803fcc 	andi	r2,r2,255
   2fdac:	10001126 	beq	r2,zero,2fdf4 <secp256k1_scalar_mul_512+0x3aac>
   2fdb0:	e0bd8017 	ldw	r2,-2560(fp)
   2fdb4:	1005003a 	cmpeq	r2,r2,zero
   2fdb8:	10803fcc 	andi	r2,r2,255
   2fdbc:	10000d26 	beq	r2,zero,2fdf4 <secp256k1_scalar_mul_512+0x3aac>
   2fdc0:	d0a01617 	ldw	r2,-32680(gp)
   2fdc4:	10c00317 	ldw	r3,12(r2)
   2fdc8:	00800174 	movhi	r2,5
   2fdcc:	1096d604 	addi	r2,r2,23384
   2fdd0:	d8800015 	stw	r2,0(sp)
   2fdd4:	01c08ac4 	movi	r7,555
   2fdd8:	01800174 	movhi	r6,5
   2fddc:	31964204 	addi	r6,r6,22792
   2fde0:	01400174 	movhi	r5,5
   2fde4:	2951e804 	addi	r5,r5,18336
   2fde8:	1809883a 	mov	r4,r3
   2fdec:	00461000 	call	46100 <fprintf>
   2fdf0:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[4], b->d[6]);
   2fdf4:	e0be8217 	ldw	r2,-1528(fp)
   2fdf8:	10800417 	ldw	r2,16(r2)
   2fdfc:	e0bfa415 	stw	r2,-368(fp)
   2fe00:	e03fa515 	stw	zero,-364(fp)
   2fe04:	e0be8317 	ldw	r2,-1524(fp)
   2fe08:	10800617 	ldw	r2,24(r2)
   2fe0c:	e0bfa615 	stw	r2,-360(fp)
   2fe10:	e03fa715 	stw	zero,-356(fp)
   2fe14:	e1bfa617 	ldw	r6,-360(fp)
   2fe18:	e1ffa717 	ldw	r7,-356(fp)
   2fe1c:	e13fa417 	ldw	r4,-368(fp)
   2fe20:	e17fa517 	ldw	r5,-364(fp)
   2fe24:	00438e00 	call	438e0 <__muldi3>
   2fe28:	1009883a 	mov	r4,r2
   2fe2c:	180b883a 	mov	r5,r3
   2fe30:	e13e4915 	stw	r4,-1756(fp)
   2fe34:	e17e4a15 	stw	r5,-1752(fp)
   2fe38:	e0be4a17 	ldw	r2,-1752(fp)
   2fe3c:	1004d83a 	srl	r2,r2,zero
   2fe40:	e0bfa815 	stw	r2,-352(fp)
   2fe44:	e03fa915 	stw	zero,-348(fp)
   2fe48:	e0bfa817 	ldw	r2,-352(fp)
   2fe4c:	e0be4b15 	stw	r2,-1748(fp)
   2fe50:	e0be4917 	ldw	r2,-1756(fp)
   2fe54:	e0be4c15 	stw	r2,-1744(fp)
   2fe58:	e0fd7e17 	ldw	r3,-2568(fp)
   2fe5c:	e0be4c17 	ldw	r2,-1744(fp)
   2fe60:	1885883a 	add	r2,r3,r2
   2fe64:	e0bd7e15 	stw	r2,-2568(fp)
   2fe68:	e0fd7e17 	ldw	r3,-2568(fp)
   2fe6c:	e0be4c17 	ldw	r2,-1744(fp)
   2fe70:	1880022e 	bgeu	r3,r2,2fe7c <secp256k1_scalar_mul_512+0x3b34>
   2fe74:	00c00044 	movi	r3,1
   2fe78:	00000106 	br	2fe80 <secp256k1_scalar_mul_512+0x3b38>
   2fe7c:	0007883a 	mov	r3,zero
   2fe80:	e0be4b17 	ldw	r2,-1748(fp)
   2fe84:	10c5883a 	add	r2,r2,r3
   2fe88:	e0be4b15 	stw	r2,-1748(fp)
   2fe8c:	e0fd7f17 	ldw	r3,-2564(fp)
   2fe90:	e0be4b17 	ldw	r2,-1748(fp)
   2fe94:	1885883a 	add	r2,r3,r2
   2fe98:	e0bd7f15 	stw	r2,-2564(fp)
   2fe9c:	e0fd7f17 	ldw	r3,-2564(fp)
   2fea0:	e0be4b17 	ldw	r2,-1748(fp)
   2fea4:	1880022e 	bgeu	r3,r2,2feb0 <secp256k1_scalar_mul_512+0x3b68>
   2fea8:	00c00044 	movi	r3,1
   2feac:	00000106 	br	2feb4 <secp256k1_scalar_mul_512+0x3b6c>
   2feb0:	0007883a 	mov	r3,zero
   2feb4:	e0bd8017 	ldw	r2,-2560(fp)
   2feb8:	10c5883a 	add	r2,r2,r3
   2febc:	e0bd8015 	stw	r2,-2560(fp)
   2fec0:	e0fd7f17 	ldw	r3,-2564(fp)
   2fec4:	e0be4b17 	ldw	r2,-1748(fp)
   2fec8:	1885803a 	cmpltu	r2,r3,r2
   2fecc:	10803fcc 	andi	r2,r2,255
   2fed0:	10001126 	beq	r2,zero,2ff18 <secp256k1_scalar_mul_512+0x3bd0>
   2fed4:	e0bd8017 	ldw	r2,-2560(fp)
   2fed8:	1005003a 	cmpeq	r2,r2,zero
   2fedc:	10803fcc 	andi	r2,r2,255
   2fee0:	10000d26 	beq	r2,zero,2ff18 <secp256k1_scalar_mul_512+0x3bd0>
   2fee4:	d0a01617 	ldw	r2,-32680(gp)
   2fee8:	10c00317 	ldw	r3,12(r2)
   2feec:	00800174 	movhi	r2,5
   2fef0:	1096d604 	addi	r2,r2,23384
   2fef4:	d8800015 	stw	r2,0(sp)
   2fef8:	01c08b04 	movi	r7,556
   2fefc:	01800174 	movhi	r6,5
   2ff00:	31964204 	addi	r6,r6,22792
   2ff04:	01400174 	movhi	r5,5
   2ff08:	2951e804 	addi	r5,r5,18336
   2ff0c:	1809883a 	mov	r4,r3
   2ff10:	00461000 	call	46100 <fprintf>
   2ff14:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[5], b->d[5]);
   2ff18:	e0be8217 	ldw	r2,-1528(fp)
   2ff1c:	10800517 	ldw	r2,20(r2)
   2ff20:	e0bfaa15 	stw	r2,-344(fp)
   2ff24:	e03fab15 	stw	zero,-340(fp)
   2ff28:	e0be8317 	ldw	r2,-1524(fp)
   2ff2c:	10800517 	ldw	r2,20(r2)
   2ff30:	e0bfac15 	stw	r2,-336(fp)
   2ff34:	e03fad15 	stw	zero,-332(fp)
   2ff38:	e1bfac17 	ldw	r6,-336(fp)
   2ff3c:	e1ffad17 	ldw	r7,-332(fp)
   2ff40:	e13faa17 	ldw	r4,-344(fp)
   2ff44:	e17fab17 	ldw	r5,-340(fp)
   2ff48:	00438e00 	call	438e0 <__muldi3>
   2ff4c:	1009883a 	mov	r4,r2
   2ff50:	180b883a 	mov	r5,r3
   2ff54:	e13e4d15 	stw	r4,-1740(fp)
   2ff58:	e17e4e15 	stw	r5,-1736(fp)
   2ff5c:	e0be4e17 	ldw	r2,-1736(fp)
   2ff60:	1004d83a 	srl	r2,r2,zero
   2ff64:	e0bfae15 	stw	r2,-328(fp)
   2ff68:	e03faf15 	stw	zero,-324(fp)
   2ff6c:	e0bfae17 	ldw	r2,-328(fp)
   2ff70:	e0be4f15 	stw	r2,-1732(fp)
   2ff74:	e0be4d17 	ldw	r2,-1740(fp)
   2ff78:	e0be5015 	stw	r2,-1728(fp)
   2ff7c:	e0fd7e17 	ldw	r3,-2568(fp)
   2ff80:	e0be5017 	ldw	r2,-1728(fp)
   2ff84:	1885883a 	add	r2,r3,r2
   2ff88:	e0bd7e15 	stw	r2,-2568(fp)
   2ff8c:	e0fd7e17 	ldw	r3,-2568(fp)
   2ff90:	e0be5017 	ldw	r2,-1728(fp)
   2ff94:	1880022e 	bgeu	r3,r2,2ffa0 <secp256k1_scalar_mul_512+0x3c58>
   2ff98:	00c00044 	movi	r3,1
   2ff9c:	00000106 	br	2ffa4 <secp256k1_scalar_mul_512+0x3c5c>
   2ffa0:	0007883a 	mov	r3,zero
   2ffa4:	e0be4f17 	ldw	r2,-1732(fp)
   2ffa8:	10c5883a 	add	r2,r2,r3
   2ffac:	e0be4f15 	stw	r2,-1732(fp)
   2ffb0:	e0fd7f17 	ldw	r3,-2564(fp)
   2ffb4:	e0be4f17 	ldw	r2,-1732(fp)
   2ffb8:	1885883a 	add	r2,r3,r2
   2ffbc:	e0bd7f15 	stw	r2,-2564(fp)
   2ffc0:	e0fd7f17 	ldw	r3,-2564(fp)
   2ffc4:	e0be4f17 	ldw	r2,-1732(fp)
   2ffc8:	1880022e 	bgeu	r3,r2,2ffd4 <secp256k1_scalar_mul_512+0x3c8c>
   2ffcc:	00c00044 	movi	r3,1
   2ffd0:	00000106 	br	2ffd8 <secp256k1_scalar_mul_512+0x3c90>
   2ffd4:	0007883a 	mov	r3,zero
   2ffd8:	e0bd8017 	ldw	r2,-2560(fp)
   2ffdc:	10c5883a 	add	r2,r2,r3
   2ffe0:	e0bd8015 	stw	r2,-2560(fp)
   2ffe4:	e0fd7f17 	ldw	r3,-2564(fp)
   2ffe8:	e0be4f17 	ldw	r2,-1732(fp)
   2ffec:	1885803a 	cmpltu	r2,r3,r2
   2fff0:	10803fcc 	andi	r2,r2,255
   2fff4:	10001126 	beq	r2,zero,3003c <secp256k1_scalar_mul_512+0x3cf4>
   2fff8:	e0bd8017 	ldw	r2,-2560(fp)
   2fffc:	1005003a 	cmpeq	r2,r2,zero
   30000:	10803fcc 	andi	r2,r2,255
   30004:	10000d26 	beq	r2,zero,3003c <secp256k1_scalar_mul_512+0x3cf4>
   30008:	d0a01617 	ldw	r2,-32680(gp)
   3000c:	10c00317 	ldw	r3,12(r2)
   30010:	00800174 	movhi	r2,5
   30014:	1096d604 	addi	r2,r2,23384
   30018:	d8800015 	stw	r2,0(sp)
   3001c:	01c08b44 	movi	r7,557
   30020:	01800174 	movhi	r6,5
   30024:	31964204 	addi	r6,r6,22792
   30028:	01400174 	movhi	r5,5
   3002c:	2951e804 	addi	r5,r5,18336
   30030:	1809883a 	mov	r4,r3
   30034:	00461000 	call	46100 <fprintf>
   30038:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[6], b->d[4]);
   3003c:	e0be8217 	ldw	r2,-1528(fp)
   30040:	10800617 	ldw	r2,24(r2)
   30044:	e0bfb015 	stw	r2,-320(fp)
   30048:	e03fb115 	stw	zero,-316(fp)
   3004c:	e0be8317 	ldw	r2,-1524(fp)
   30050:	10800417 	ldw	r2,16(r2)
   30054:	e0bfb215 	stw	r2,-312(fp)
   30058:	e03fb315 	stw	zero,-308(fp)
   3005c:	e1bfb217 	ldw	r6,-312(fp)
   30060:	e1ffb317 	ldw	r7,-308(fp)
   30064:	e13fb017 	ldw	r4,-320(fp)
   30068:	e17fb117 	ldw	r5,-316(fp)
   3006c:	00438e00 	call	438e0 <__muldi3>
   30070:	1009883a 	mov	r4,r2
   30074:	180b883a 	mov	r5,r3
   30078:	e13e5115 	stw	r4,-1724(fp)
   3007c:	e17e5215 	stw	r5,-1720(fp)
   30080:	e0be5217 	ldw	r2,-1720(fp)
   30084:	1004d83a 	srl	r2,r2,zero
   30088:	e0bfb415 	stw	r2,-304(fp)
   3008c:	e03fb515 	stw	zero,-300(fp)
   30090:	e0bfb417 	ldw	r2,-304(fp)
   30094:	e0be5315 	stw	r2,-1716(fp)
   30098:	e0be5117 	ldw	r2,-1724(fp)
   3009c:	e0be5415 	stw	r2,-1712(fp)
   300a0:	e0fd7e17 	ldw	r3,-2568(fp)
   300a4:	e0be5417 	ldw	r2,-1712(fp)
   300a8:	1885883a 	add	r2,r3,r2
   300ac:	e0bd7e15 	stw	r2,-2568(fp)
   300b0:	e0fd7e17 	ldw	r3,-2568(fp)
   300b4:	e0be5417 	ldw	r2,-1712(fp)
   300b8:	1880022e 	bgeu	r3,r2,300c4 <secp256k1_scalar_mul_512+0x3d7c>
   300bc:	00c00044 	movi	r3,1
   300c0:	00000106 	br	300c8 <secp256k1_scalar_mul_512+0x3d80>
   300c4:	0007883a 	mov	r3,zero
   300c8:	e0be5317 	ldw	r2,-1716(fp)
   300cc:	10c5883a 	add	r2,r2,r3
   300d0:	e0be5315 	stw	r2,-1716(fp)
   300d4:	e0fd7f17 	ldw	r3,-2564(fp)
   300d8:	e0be5317 	ldw	r2,-1716(fp)
   300dc:	1885883a 	add	r2,r3,r2
   300e0:	e0bd7f15 	stw	r2,-2564(fp)
   300e4:	e0fd7f17 	ldw	r3,-2564(fp)
   300e8:	e0be5317 	ldw	r2,-1716(fp)
   300ec:	1880022e 	bgeu	r3,r2,300f8 <secp256k1_scalar_mul_512+0x3db0>
   300f0:	00c00044 	movi	r3,1
   300f4:	00000106 	br	300fc <secp256k1_scalar_mul_512+0x3db4>
   300f8:	0007883a 	mov	r3,zero
   300fc:	e0bd8017 	ldw	r2,-2560(fp)
   30100:	10c5883a 	add	r2,r2,r3
   30104:	e0bd8015 	stw	r2,-2560(fp)
   30108:	e0fd7f17 	ldw	r3,-2564(fp)
   3010c:	e0be5317 	ldw	r2,-1716(fp)
   30110:	1885803a 	cmpltu	r2,r3,r2
   30114:	10803fcc 	andi	r2,r2,255
   30118:	10001126 	beq	r2,zero,30160 <secp256k1_scalar_mul_512+0x3e18>
   3011c:	e0bd8017 	ldw	r2,-2560(fp)
   30120:	1005003a 	cmpeq	r2,r2,zero
   30124:	10803fcc 	andi	r2,r2,255
   30128:	10000d26 	beq	r2,zero,30160 <secp256k1_scalar_mul_512+0x3e18>
   3012c:	d0a01617 	ldw	r2,-32680(gp)
   30130:	10c00317 	ldw	r3,12(r2)
   30134:	00800174 	movhi	r2,5
   30138:	1096d604 	addi	r2,r2,23384
   3013c:	d8800015 	stw	r2,0(sp)
   30140:	01c08b84 	movi	r7,558
   30144:	01800174 	movhi	r6,5
   30148:	31964204 	addi	r6,r6,22792
   3014c:	01400174 	movhi	r5,5
   30150:	2951e804 	addi	r5,r5,18336
   30154:	1809883a 	mov	r4,r3
   30158:	00461000 	call	46100 <fprintf>
   3015c:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[7], b->d[3]);
   30160:	e0be8217 	ldw	r2,-1528(fp)
   30164:	10800717 	ldw	r2,28(r2)
   30168:	e0bfb615 	stw	r2,-296(fp)
   3016c:	e03fb715 	stw	zero,-292(fp)
   30170:	e0be8317 	ldw	r2,-1524(fp)
   30174:	10800317 	ldw	r2,12(r2)
   30178:	e0bfb815 	stw	r2,-288(fp)
   3017c:	e03fb915 	stw	zero,-284(fp)
   30180:	e1bfb817 	ldw	r6,-288(fp)
   30184:	e1ffb917 	ldw	r7,-284(fp)
   30188:	e13fb617 	ldw	r4,-296(fp)
   3018c:	e17fb717 	ldw	r5,-292(fp)
   30190:	00438e00 	call	438e0 <__muldi3>
   30194:	1009883a 	mov	r4,r2
   30198:	180b883a 	mov	r5,r3
   3019c:	e13e5515 	stw	r4,-1708(fp)
   301a0:	e17e5615 	stw	r5,-1704(fp)
   301a4:	e0be5617 	ldw	r2,-1704(fp)
   301a8:	1004d83a 	srl	r2,r2,zero
   301ac:	e0bfba15 	stw	r2,-280(fp)
   301b0:	e03fbb15 	stw	zero,-276(fp)
   301b4:	e0bfba17 	ldw	r2,-280(fp)
   301b8:	e0be5715 	stw	r2,-1700(fp)
   301bc:	e0be5517 	ldw	r2,-1708(fp)
   301c0:	e0be5815 	stw	r2,-1696(fp)
   301c4:	e0fd7e17 	ldw	r3,-2568(fp)
   301c8:	e0be5817 	ldw	r2,-1696(fp)
   301cc:	1885883a 	add	r2,r3,r2
   301d0:	e0bd7e15 	stw	r2,-2568(fp)
   301d4:	e0fd7e17 	ldw	r3,-2568(fp)
   301d8:	e0be5817 	ldw	r2,-1696(fp)
   301dc:	1880022e 	bgeu	r3,r2,301e8 <secp256k1_scalar_mul_512+0x3ea0>
   301e0:	00c00044 	movi	r3,1
   301e4:	00000106 	br	301ec <secp256k1_scalar_mul_512+0x3ea4>
   301e8:	0007883a 	mov	r3,zero
   301ec:	e0be5717 	ldw	r2,-1700(fp)
   301f0:	10c5883a 	add	r2,r2,r3
   301f4:	e0be5715 	stw	r2,-1700(fp)
   301f8:	e0fd7f17 	ldw	r3,-2564(fp)
   301fc:	e0be5717 	ldw	r2,-1700(fp)
   30200:	1885883a 	add	r2,r3,r2
   30204:	e0bd7f15 	stw	r2,-2564(fp)
   30208:	e0fd7f17 	ldw	r3,-2564(fp)
   3020c:	e0be5717 	ldw	r2,-1700(fp)
   30210:	1880022e 	bgeu	r3,r2,3021c <secp256k1_scalar_mul_512+0x3ed4>
   30214:	00c00044 	movi	r3,1
   30218:	00000106 	br	30220 <secp256k1_scalar_mul_512+0x3ed8>
   3021c:	0007883a 	mov	r3,zero
   30220:	e0bd8017 	ldw	r2,-2560(fp)
   30224:	10c5883a 	add	r2,r2,r3
   30228:	e0bd8015 	stw	r2,-2560(fp)
   3022c:	e0fd7f17 	ldw	r3,-2564(fp)
   30230:	e0be5717 	ldw	r2,-1700(fp)
   30234:	1885803a 	cmpltu	r2,r3,r2
   30238:	10803fcc 	andi	r2,r2,255
   3023c:	10001126 	beq	r2,zero,30284 <secp256k1_scalar_mul_512+0x3f3c>
   30240:	e0bd8017 	ldw	r2,-2560(fp)
   30244:	1005003a 	cmpeq	r2,r2,zero
   30248:	10803fcc 	andi	r2,r2,255
   3024c:	10000d26 	beq	r2,zero,30284 <secp256k1_scalar_mul_512+0x3f3c>
   30250:	d0a01617 	ldw	r2,-32680(gp)
   30254:	10c00317 	ldw	r3,12(r2)
   30258:	00800174 	movhi	r2,5
   3025c:	1096d604 	addi	r2,r2,23384
   30260:	d8800015 	stw	r2,0(sp)
   30264:	01c08bc4 	movi	r7,559
   30268:	01800174 	movhi	r6,5
   3026c:	31964204 	addi	r6,r6,22792
   30270:	01400174 	movhi	r5,5
   30274:	2951e804 	addi	r5,r5,18336
   30278:	1809883a 	mov	r4,r3
   3027c:	00461000 	call	46100 <fprintf>
   30280:	0045fd40 	call	45fd4 <abort>
    extract(l[10]);
   30284:	e0be8117 	ldw	r2,-1532(fp)
   30288:	10c00a04 	addi	r3,r2,40
   3028c:	e0bd7e17 	ldw	r2,-2568(fp)
   30290:	18800015 	stw	r2,0(r3)
   30294:	e0bd7f17 	ldw	r2,-2564(fp)
   30298:	e0bd7e15 	stw	r2,-2568(fp)
   3029c:	e0bd8017 	ldw	r2,-2560(fp)
   302a0:	e0bd7f15 	stw	r2,-2564(fp)
   302a4:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[4], b->d[7]);
   302a8:	e0be8217 	ldw	r2,-1528(fp)
   302ac:	10800417 	ldw	r2,16(r2)
   302b0:	e0bfbc15 	stw	r2,-272(fp)
   302b4:	e03fbd15 	stw	zero,-268(fp)
   302b8:	e0be8317 	ldw	r2,-1524(fp)
   302bc:	10800717 	ldw	r2,28(r2)
   302c0:	e0bfbe15 	stw	r2,-264(fp)
   302c4:	e03fbf15 	stw	zero,-260(fp)
   302c8:	e1bfbe17 	ldw	r6,-264(fp)
   302cc:	e1ffbf17 	ldw	r7,-260(fp)
   302d0:	e13fbc17 	ldw	r4,-272(fp)
   302d4:	e17fbd17 	ldw	r5,-268(fp)
   302d8:	00438e00 	call	438e0 <__muldi3>
   302dc:	1009883a 	mov	r4,r2
   302e0:	180b883a 	mov	r5,r3
   302e4:	e13e5915 	stw	r4,-1692(fp)
   302e8:	e17e5a15 	stw	r5,-1688(fp)
   302ec:	e0be5a17 	ldw	r2,-1688(fp)
   302f0:	1004d83a 	srl	r2,r2,zero
   302f4:	e0bfc015 	stw	r2,-256(fp)
   302f8:	e03fc115 	stw	zero,-252(fp)
   302fc:	e0bfc017 	ldw	r2,-256(fp)
   30300:	e0be5b15 	stw	r2,-1684(fp)
   30304:	e0be5917 	ldw	r2,-1692(fp)
   30308:	e0be5c15 	stw	r2,-1680(fp)
   3030c:	e0fd7e17 	ldw	r3,-2568(fp)
   30310:	e0be5c17 	ldw	r2,-1680(fp)
   30314:	1885883a 	add	r2,r3,r2
   30318:	e0bd7e15 	stw	r2,-2568(fp)
   3031c:	e0fd7e17 	ldw	r3,-2568(fp)
   30320:	e0be5c17 	ldw	r2,-1680(fp)
   30324:	1880022e 	bgeu	r3,r2,30330 <secp256k1_scalar_mul_512+0x3fe8>
   30328:	00c00044 	movi	r3,1
   3032c:	00000106 	br	30334 <secp256k1_scalar_mul_512+0x3fec>
   30330:	0007883a 	mov	r3,zero
   30334:	e0be5b17 	ldw	r2,-1684(fp)
   30338:	10c5883a 	add	r2,r2,r3
   3033c:	e0be5b15 	stw	r2,-1684(fp)
   30340:	e0fd7f17 	ldw	r3,-2564(fp)
   30344:	e0be5b17 	ldw	r2,-1684(fp)
   30348:	1885883a 	add	r2,r3,r2
   3034c:	e0bd7f15 	stw	r2,-2564(fp)
   30350:	e0fd7f17 	ldw	r3,-2564(fp)
   30354:	e0be5b17 	ldw	r2,-1684(fp)
   30358:	1880022e 	bgeu	r3,r2,30364 <secp256k1_scalar_mul_512+0x401c>
   3035c:	00c00044 	movi	r3,1
   30360:	00000106 	br	30368 <secp256k1_scalar_mul_512+0x4020>
   30364:	0007883a 	mov	r3,zero
   30368:	e0bd8017 	ldw	r2,-2560(fp)
   3036c:	10c5883a 	add	r2,r2,r3
   30370:	e0bd8015 	stw	r2,-2560(fp)
   30374:	e0fd7f17 	ldw	r3,-2564(fp)
   30378:	e0be5b17 	ldw	r2,-1684(fp)
   3037c:	1885803a 	cmpltu	r2,r3,r2
   30380:	10803fcc 	andi	r2,r2,255
   30384:	10001126 	beq	r2,zero,303cc <secp256k1_scalar_mul_512+0x4084>
   30388:	e0bd8017 	ldw	r2,-2560(fp)
   3038c:	1005003a 	cmpeq	r2,r2,zero
   30390:	10803fcc 	andi	r2,r2,255
   30394:	10000d26 	beq	r2,zero,303cc <secp256k1_scalar_mul_512+0x4084>
   30398:	d0a01617 	ldw	r2,-32680(gp)
   3039c:	10c00317 	ldw	r3,12(r2)
   303a0:	00800174 	movhi	r2,5
   303a4:	1096d604 	addi	r2,r2,23384
   303a8:	d8800015 	stw	r2,0(sp)
   303ac:	01c08c44 	movi	r7,561
   303b0:	01800174 	movhi	r6,5
   303b4:	31964204 	addi	r6,r6,22792
   303b8:	01400174 	movhi	r5,5
   303bc:	2951e804 	addi	r5,r5,18336
   303c0:	1809883a 	mov	r4,r3
   303c4:	00461000 	call	46100 <fprintf>
   303c8:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[5], b->d[6]);
   303cc:	e0be8217 	ldw	r2,-1528(fp)
   303d0:	10800517 	ldw	r2,20(r2)
   303d4:	e0bfc215 	stw	r2,-248(fp)
   303d8:	e03fc315 	stw	zero,-244(fp)
   303dc:	e0be8317 	ldw	r2,-1524(fp)
   303e0:	10800617 	ldw	r2,24(r2)
   303e4:	e0bfc415 	stw	r2,-240(fp)
   303e8:	e03fc515 	stw	zero,-236(fp)
   303ec:	e1bfc417 	ldw	r6,-240(fp)
   303f0:	e1ffc517 	ldw	r7,-236(fp)
   303f4:	e13fc217 	ldw	r4,-248(fp)
   303f8:	e17fc317 	ldw	r5,-244(fp)
   303fc:	00438e00 	call	438e0 <__muldi3>
   30400:	1009883a 	mov	r4,r2
   30404:	180b883a 	mov	r5,r3
   30408:	e13e5d15 	stw	r4,-1676(fp)
   3040c:	e17e5e15 	stw	r5,-1672(fp)
   30410:	e0be5e17 	ldw	r2,-1672(fp)
   30414:	1004d83a 	srl	r2,r2,zero
   30418:	e0bfc615 	stw	r2,-232(fp)
   3041c:	e03fc715 	stw	zero,-228(fp)
   30420:	e0bfc617 	ldw	r2,-232(fp)
   30424:	e0be5f15 	stw	r2,-1668(fp)
   30428:	e0be5d17 	ldw	r2,-1676(fp)
   3042c:	e0be6015 	stw	r2,-1664(fp)
   30430:	e0fd7e17 	ldw	r3,-2568(fp)
   30434:	e0be6017 	ldw	r2,-1664(fp)
   30438:	1885883a 	add	r2,r3,r2
   3043c:	e0bd7e15 	stw	r2,-2568(fp)
   30440:	e0fd7e17 	ldw	r3,-2568(fp)
   30444:	e0be6017 	ldw	r2,-1664(fp)
   30448:	1880022e 	bgeu	r3,r2,30454 <secp256k1_scalar_mul_512+0x410c>
   3044c:	00c00044 	movi	r3,1
   30450:	00000106 	br	30458 <secp256k1_scalar_mul_512+0x4110>
   30454:	0007883a 	mov	r3,zero
   30458:	e0be5f17 	ldw	r2,-1668(fp)
   3045c:	10c5883a 	add	r2,r2,r3
   30460:	e0be5f15 	stw	r2,-1668(fp)
   30464:	e0fd7f17 	ldw	r3,-2564(fp)
   30468:	e0be5f17 	ldw	r2,-1668(fp)
   3046c:	1885883a 	add	r2,r3,r2
   30470:	e0bd7f15 	stw	r2,-2564(fp)
   30474:	e0fd7f17 	ldw	r3,-2564(fp)
   30478:	e0be5f17 	ldw	r2,-1668(fp)
   3047c:	1880022e 	bgeu	r3,r2,30488 <secp256k1_scalar_mul_512+0x4140>
   30480:	00c00044 	movi	r3,1
   30484:	00000106 	br	3048c <secp256k1_scalar_mul_512+0x4144>
   30488:	0007883a 	mov	r3,zero
   3048c:	e0bd8017 	ldw	r2,-2560(fp)
   30490:	10c5883a 	add	r2,r2,r3
   30494:	e0bd8015 	stw	r2,-2560(fp)
   30498:	e0fd7f17 	ldw	r3,-2564(fp)
   3049c:	e0be5f17 	ldw	r2,-1668(fp)
   304a0:	1885803a 	cmpltu	r2,r3,r2
   304a4:	10803fcc 	andi	r2,r2,255
   304a8:	10001126 	beq	r2,zero,304f0 <secp256k1_scalar_mul_512+0x41a8>
   304ac:	e0bd8017 	ldw	r2,-2560(fp)
   304b0:	1005003a 	cmpeq	r2,r2,zero
   304b4:	10803fcc 	andi	r2,r2,255
   304b8:	10000d26 	beq	r2,zero,304f0 <secp256k1_scalar_mul_512+0x41a8>
   304bc:	d0a01617 	ldw	r2,-32680(gp)
   304c0:	10c00317 	ldw	r3,12(r2)
   304c4:	00800174 	movhi	r2,5
   304c8:	1096d604 	addi	r2,r2,23384
   304cc:	d8800015 	stw	r2,0(sp)
   304d0:	01c08c84 	movi	r7,562
   304d4:	01800174 	movhi	r6,5
   304d8:	31964204 	addi	r6,r6,22792
   304dc:	01400174 	movhi	r5,5
   304e0:	2951e804 	addi	r5,r5,18336
   304e4:	1809883a 	mov	r4,r3
   304e8:	00461000 	call	46100 <fprintf>
   304ec:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[6], b->d[5]);
   304f0:	e0be8217 	ldw	r2,-1528(fp)
   304f4:	10800617 	ldw	r2,24(r2)
   304f8:	e0bfc815 	stw	r2,-224(fp)
   304fc:	e03fc915 	stw	zero,-220(fp)
   30500:	e0be8317 	ldw	r2,-1524(fp)
   30504:	10800517 	ldw	r2,20(r2)
   30508:	e0bfca15 	stw	r2,-216(fp)
   3050c:	e03fcb15 	stw	zero,-212(fp)
   30510:	e1bfca17 	ldw	r6,-216(fp)
   30514:	e1ffcb17 	ldw	r7,-212(fp)
   30518:	e13fc817 	ldw	r4,-224(fp)
   3051c:	e17fc917 	ldw	r5,-220(fp)
   30520:	00438e00 	call	438e0 <__muldi3>
   30524:	1009883a 	mov	r4,r2
   30528:	180b883a 	mov	r5,r3
   3052c:	e13e6115 	stw	r4,-1660(fp)
   30530:	e17e6215 	stw	r5,-1656(fp)
   30534:	e0be6217 	ldw	r2,-1656(fp)
   30538:	1004d83a 	srl	r2,r2,zero
   3053c:	e0bfcc15 	stw	r2,-208(fp)
   30540:	e03fcd15 	stw	zero,-204(fp)
   30544:	e0bfcc17 	ldw	r2,-208(fp)
   30548:	e0be6315 	stw	r2,-1652(fp)
   3054c:	e0be6117 	ldw	r2,-1660(fp)
   30550:	e0be6415 	stw	r2,-1648(fp)
   30554:	e0fd7e17 	ldw	r3,-2568(fp)
   30558:	e0be6417 	ldw	r2,-1648(fp)
   3055c:	1885883a 	add	r2,r3,r2
   30560:	e0bd7e15 	stw	r2,-2568(fp)
   30564:	e0fd7e17 	ldw	r3,-2568(fp)
   30568:	e0be6417 	ldw	r2,-1648(fp)
   3056c:	1880022e 	bgeu	r3,r2,30578 <secp256k1_scalar_mul_512+0x4230>
   30570:	00c00044 	movi	r3,1
   30574:	00000106 	br	3057c <secp256k1_scalar_mul_512+0x4234>
   30578:	0007883a 	mov	r3,zero
   3057c:	e0be6317 	ldw	r2,-1652(fp)
   30580:	10c5883a 	add	r2,r2,r3
   30584:	e0be6315 	stw	r2,-1652(fp)
   30588:	e0fd7f17 	ldw	r3,-2564(fp)
   3058c:	e0be6317 	ldw	r2,-1652(fp)
   30590:	1885883a 	add	r2,r3,r2
   30594:	e0bd7f15 	stw	r2,-2564(fp)
   30598:	e0fd7f17 	ldw	r3,-2564(fp)
   3059c:	e0be6317 	ldw	r2,-1652(fp)
   305a0:	1880022e 	bgeu	r3,r2,305ac <secp256k1_scalar_mul_512+0x4264>
   305a4:	00c00044 	movi	r3,1
   305a8:	00000106 	br	305b0 <secp256k1_scalar_mul_512+0x4268>
   305ac:	0007883a 	mov	r3,zero
   305b0:	e0bd8017 	ldw	r2,-2560(fp)
   305b4:	10c5883a 	add	r2,r2,r3
   305b8:	e0bd8015 	stw	r2,-2560(fp)
   305bc:	e0fd7f17 	ldw	r3,-2564(fp)
   305c0:	e0be6317 	ldw	r2,-1652(fp)
   305c4:	1885803a 	cmpltu	r2,r3,r2
   305c8:	10803fcc 	andi	r2,r2,255
   305cc:	10001126 	beq	r2,zero,30614 <secp256k1_scalar_mul_512+0x42cc>
   305d0:	e0bd8017 	ldw	r2,-2560(fp)
   305d4:	1005003a 	cmpeq	r2,r2,zero
   305d8:	10803fcc 	andi	r2,r2,255
   305dc:	10000d26 	beq	r2,zero,30614 <secp256k1_scalar_mul_512+0x42cc>
   305e0:	d0a01617 	ldw	r2,-32680(gp)
   305e4:	10c00317 	ldw	r3,12(r2)
   305e8:	00800174 	movhi	r2,5
   305ec:	1096d604 	addi	r2,r2,23384
   305f0:	d8800015 	stw	r2,0(sp)
   305f4:	01c08cc4 	movi	r7,563
   305f8:	01800174 	movhi	r6,5
   305fc:	31964204 	addi	r6,r6,22792
   30600:	01400174 	movhi	r5,5
   30604:	2951e804 	addi	r5,r5,18336
   30608:	1809883a 	mov	r4,r3
   3060c:	00461000 	call	46100 <fprintf>
   30610:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[7], b->d[4]);
   30614:	e0be8217 	ldw	r2,-1528(fp)
   30618:	10800717 	ldw	r2,28(r2)
   3061c:	e0bfce15 	stw	r2,-200(fp)
   30620:	e03fcf15 	stw	zero,-196(fp)
   30624:	e0be8317 	ldw	r2,-1524(fp)
   30628:	10800417 	ldw	r2,16(r2)
   3062c:	e0bfd015 	stw	r2,-192(fp)
   30630:	e03fd115 	stw	zero,-188(fp)
   30634:	e1bfd017 	ldw	r6,-192(fp)
   30638:	e1ffd117 	ldw	r7,-188(fp)
   3063c:	e13fce17 	ldw	r4,-200(fp)
   30640:	e17fcf17 	ldw	r5,-196(fp)
   30644:	00438e00 	call	438e0 <__muldi3>
   30648:	1009883a 	mov	r4,r2
   3064c:	180b883a 	mov	r5,r3
   30650:	e13e6515 	stw	r4,-1644(fp)
   30654:	e17e6615 	stw	r5,-1640(fp)
   30658:	e0be6617 	ldw	r2,-1640(fp)
   3065c:	1004d83a 	srl	r2,r2,zero
   30660:	e0bfd215 	stw	r2,-184(fp)
   30664:	e03fd315 	stw	zero,-180(fp)
   30668:	e0bfd217 	ldw	r2,-184(fp)
   3066c:	e0be6715 	stw	r2,-1636(fp)
   30670:	e0be6517 	ldw	r2,-1644(fp)
   30674:	e0be6815 	stw	r2,-1632(fp)
   30678:	e0fd7e17 	ldw	r3,-2568(fp)
   3067c:	e0be6817 	ldw	r2,-1632(fp)
   30680:	1885883a 	add	r2,r3,r2
   30684:	e0bd7e15 	stw	r2,-2568(fp)
   30688:	e0fd7e17 	ldw	r3,-2568(fp)
   3068c:	e0be6817 	ldw	r2,-1632(fp)
   30690:	1880022e 	bgeu	r3,r2,3069c <secp256k1_scalar_mul_512+0x4354>
   30694:	00c00044 	movi	r3,1
   30698:	00000106 	br	306a0 <secp256k1_scalar_mul_512+0x4358>
   3069c:	0007883a 	mov	r3,zero
   306a0:	e0be6717 	ldw	r2,-1636(fp)
   306a4:	10c5883a 	add	r2,r2,r3
   306a8:	e0be6715 	stw	r2,-1636(fp)
   306ac:	e0fd7f17 	ldw	r3,-2564(fp)
   306b0:	e0be6717 	ldw	r2,-1636(fp)
   306b4:	1885883a 	add	r2,r3,r2
   306b8:	e0bd7f15 	stw	r2,-2564(fp)
   306bc:	e0fd7f17 	ldw	r3,-2564(fp)
   306c0:	e0be6717 	ldw	r2,-1636(fp)
   306c4:	1880022e 	bgeu	r3,r2,306d0 <secp256k1_scalar_mul_512+0x4388>
   306c8:	00c00044 	movi	r3,1
   306cc:	00000106 	br	306d4 <secp256k1_scalar_mul_512+0x438c>
   306d0:	0007883a 	mov	r3,zero
   306d4:	e0bd8017 	ldw	r2,-2560(fp)
   306d8:	10c5883a 	add	r2,r2,r3
   306dc:	e0bd8015 	stw	r2,-2560(fp)
   306e0:	e0fd7f17 	ldw	r3,-2564(fp)
   306e4:	e0be6717 	ldw	r2,-1636(fp)
   306e8:	1885803a 	cmpltu	r2,r3,r2
   306ec:	10803fcc 	andi	r2,r2,255
   306f0:	10001126 	beq	r2,zero,30738 <secp256k1_scalar_mul_512+0x43f0>
   306f4:	e0bd8017 	ldw	r2,-2560(fp)
   306f8:	1005003a 	cmpeq	r2,r2,zero
   306fc:	10803fcc 	andi	r2,r2,255
   30700:	10000d26 	beq	r2,zero,30738 <secp256k1_scalar_mul_512+0x43f0>
   30704:	d0a01617 	ldw	r2,-32680(gp)
   30708:	10c00317 	ldw	r3,12(r2)
   3070c:	00800174 	movhi	r2,5
   30710:	1096d604 	addi	r2,r2,23384
   30714:	d8800015 	stw	r2,0(sp)
   30718:	01c08d04 	movi	r7,564
   3071c:	01800174 	movhi	r6,5
   30720:	31964204 	addi	r6,r6,22792
   30724:	01400174 	movhi	r5,5
   30728:	2951e804 	addi	r5,r5,18336
   3072c:	1809883a 	mov	r4,r3
   30730:	00461000 	call	46100 <fprintf>
   30734:	0045fd40 	call	45fd4 <abort>
    extract(l[11]);
   30738:	e0be8117 	ldw	r2,-1532(fp)
   3073c:	10c00b04 	addi	r3,r2,44
   30740:	e0bd7e17 	ldw	r2,-2568(fp)
   30744:	18800015 	stw	r2,0(r3)
   30748:	e0bd7f17 	ldw	r2,-2564(fp)
   3074c:	e0bd7e15 	stw	r2,-2568(fp)
   30750:	e0bd8017 	ldw	r2,-2560(fp)
   30754:	e0bd7f15 	stw	r2,-2564(fp)
   30758:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[5], b->d[7]);
   3075c:	e0be8217 	ldw	r2,-1528(fp)
   30760:	10800517 	ldw	r2,20(r2)
   30764:	e0bfd415 	stw	r2,-176(fp)
   30768:	e03fd515 	stw	zero,-172(fp)
   3076c:	e0be8317 	ldw	r2,-1524(fp)
   30770:	10800717 	ldw	r2,28(r2)
   30774:	e0bfd615 	stw	r2,-168(fp)
   30778:	e03fd715 	stw	zero,-164(fp)
   3077c:	e1bfd617 	ldw	r6,-168(fp)
   30780:	e1ffd717 	ldw	r7,-164(fp)
   30784:	e13fd417 	ldw	r4,-176(fp)
   30788:	e17fd517 	ldw	r5,-172(fp)
   3078c:	00438e00 	call	438e0 <__muldi3>
   30790:	1009883a 	mov	r4,r2
   30794:	180b883a 	mov	r5,r3
   30798:	e13e6915 	stw	r4,-1628(fp)
   3079c:	e17e6a15 	stw	r5,-1624(fp)
   307a0:	e0be6a17 	ldw	r2,-1624(fp)
   307a4:	1004d83a 	srl	r2,r2,zero
   307a8:	e0bfd815 	stw	r2,-160(fp)
   307ac:	e03fd915 	stw	zero,-156(fp)
   307b0:	e0bfd817 	ldw	r2,-160(fp)
   307b4:	e0be6b15 	stw	r2,-1620(fp)
   307b8:	e0be6917 	ldw	r2,-1628(fp)
   307bc:	e0be6c15 	stw	r2,-1616(fp)
   307c0:	e0fd7e17 	ldw	r3,-2568(fp)
   307c4:	e0be6c17 	ldw	r2,-1616(fp)
   307c8:	1885883a 	add	r2,r3,r2
   307cc:	e0bd7e15 	stw	r2,-2568(fp)
   307d0:	e0fd7e17 	ldw	r3,-2568(fp)
   307d4:	e0be6c17 	ldw	r2,-1616(fp)
   307d8:	1880022e 	bgeu	r3,r2,307e4 <secp256k1_scalar_mul_512+0x449c>
   307dc:	00c00044 	movi	r3,1
   307e0:	00000106 	br	307e8 <secp256k1_scalar_mul_512+0x44a0>
   307e4:	0007883a 	mov	r3,zero
   307e8:	e0be6b17 	ldw	r2,-1620(fp)
   307ec:	10c5883a 	add	r2,r2,r3
   307f0:	e0be6b15 	stw	r2,-1620(fp)
   307f4:	e0fd7f17 	ldw	r3,-2564(fp)
   307f8:	e0be6b17 	ldw	r2,-1620(fp)
   307fc:	1885883a 	add	r2,r3,r2
   30800:	e0bd7f15 	stw	r2,-2564(fp)
   30804:	e0fd7f17 	ldw	r3,-2564(fp)
   30808:	e0be6b17 	ldw	r2,-1620(fp)
   3080c:	1880022e 	bgeu	r3,r2,30818 <secp256k1_scalar_mul_512+0x44d0>
   30810:	00c00044 	movi	r3,1
   30814:	00000106 	br	3081c <secp256k1_scalar_mul_512+0x44d4>
   30818:	0007883a 	mov	r3,zero
   3081c:	e0bd8017 	ldw	r2,-2560(fp)
   30820:	10c5883a 	add	r2,r2,r3
   30824:	e0bd8015 	stw	r2,-2560(fp)
   30828:	e0fd7f17 	ldw	r3,-2564(fp)
   3082c:	e0be6b17 	ldw	r2,-1620(fp)
   30830:	1885803a 	cmpltu	r2,r3,r2
   30834:	10803fcc 	andi	r2,r2,255
   30838:	10001126 	beq	r2,zero,30880 <secp256k1_scalar_mul_512+0x4538>
   3083c:	e0bd8017 	ldw	r2,-2560(fp)
   30840:	1005003a 	cmpeq	r2,r2,zero
   30844:	10803fcc 	andi	r2,r2,255
   30848:	10000d26 	beq	r2,zero,30880 <secp256k1_scalar_mul_512+0x4538>
   3084c:	d0a01617 	ldw	r2,-32680(gp)
   30850:	10c00317 	ldw	r3,12(r2)
   30854:	00800174 	movhi	r2,5
   30858:	1096d604 	addi	r2,r2,23384
   3085c:	d8800015 	stw	r2,0(sp)
   30860:	01c08d84 	movi	r7,566
   30864:	01800174 	movhi	r6,5
   30868:	31964204 	addi	r6,r6,22792
   3086c:	01400174 	movhi	r5,5
   30870:	2951e804 	addi	r5,r5,18336
   30874:	1809883a 	mov	r4,r3
   30878:	00461000 	call	46100 <fprintf>
   3087c:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[6], b->d[6]);
   30880:	e0be8217 	ldw	r2,-1528(fp)
   30884:	10800617 	ldw	r2,24(r2)
   30888:	e0bfda15 	stw	r2,-152(fp)
   3088c:	e03fdb15 	stw	zero,-148(fp)
   30890:	e0be8317 	ldw	r2,-1524(fp)
   30894:	10800617 	ldw	r2,24(r2)
   30898:	e0bfdc15 	stw	r2,-144(fp)
   3089c:	e03fdd15 	stw	zero,-140(fp)
   308a0:	e1bfdc17 	ldw	r6,-144(fp)
   308a4:	e1ffdd17 	ldw	r7,-140(fp)
   308a8:	e13fda17 	ldw	r4,-152(fp)
   308ac:	e17fdb17 	ldw	r5,-148(fp)
   308b0:	00438e00 	call	438e0 <__muldi3>
   308b4:	1009883a 	mov	r4,r2
   308b8:	180b883a 	mov	r5,r3
   308bc:	e13e6d15 	stw	r4,-1612(fp)
   308c0:	e17e6e15 	stw	r5,-1608(fp)
   308c4:	e0be6e17 	ldw	r2,-1608(fp)
   308c8:	1004d83a 	srl	r2,r2,zero
   308cc:	e0bfde15 	stw	r2,-136(fp)
   308d0:	e03fdf15 	stw	zero,-132(fp)
   308d4:	e0bfde17 	ldw	r2,-136(fp)
   308d8:	e0be6f15 	stw	r2,-1604(fp)
   308dc:	e0be6d17 	ldw	r2,-1612(fp)
   308e0:	e0be7015 	stw	r2,-1600(fp)
   308e4:	e0fd7e17 	ldw	r3,-2568(fp)
   308e8:	e0be7017 	ldw	r2,-1600(fp)
   308ec:	1885883a 	add	r2,r3,r2
   308f0:	e0bd7e15 	stw	r2,-2568(fp)
   308f4:	e0fd7e17 	ldw	r3,-2568(fp)
   308f8:	e0be7017 	ldw	r2,-1600(fp)
   308fc:	1880022e 	bgeu	r3,r2,30908 <secp256k1_scalar_mul_512+0x45c0>
   30900:	00c00044 	movi	r3,1
   30904:	00000106 	br	3090c <secp256k1_scalar_mul_512+0x45c4>
   30908:	0007883a 	mov	r3,zero
   3090c:	e0be6f17 	ldw	r2,-1604(fp)
   30910:	10c5883a 	add	r2,r2,r3
   30914:	e0be6f15 	stw	r2,-1604(fp)
   30918:	e0fd7f17 	ldw	r3,-2564(fp)
   3091c:	e0be6f17 	ldw	r2,-1604(fp)
   30920:	1885883a 	add	r2,r3,r2
   30924:	e0bd7f15 	stw	r2,-2564(fp)
   30928:	e0fd7f17 	ldw	r3,-2564(fp)
   3092c:	e0be6f17 	ldw	r2,-1604(fp)
   30930:	1880022e 	bgeu	r3,r2,3093c <secp256k1_scalar_mul_512+0x45f4>
   30934:	00c00044 	movi	r3,1
   30938:	00000106 	br	30940 <secp256k1_scalar_mul_512+0x45f8>
   3093c:	0007883a 	mov	r3,zero
   30940:	e0bd8017 	ldw	r2,-2560(fp)
   30944:	10c5883a 	add	r2,r2,r3
   30948:	e0bd8015 	stw	r2,-2560(fp)
   3094c:	e0fd7f17 	ldw	r3,-2564(fp)
   30950:	e0be6f17 	ldw	r2,-1604(fp)
   30954:	1885803a 	cmpltu	r2,r3,r2
   30958:	10803fcc 	andi	r2,r2,255
   3095c:	10001126 	beq	r2,zero,309a4 <secp256k1_scalar_mul_512+0x465c>
   30960:	e0bd8017 	ldw	r2,-2560(fp)
   30964:	1005003a 	cmpeq	r2,r2,zero
   30968:	10803fcc 	andi	r2,r2,255
   3096c:	10000d26 	beq	r2,zero,309a4 <secp256k1_scalar_mul_512+0x465c>
   30970:	d0a01617 	ldw	r2,-32680(gp)
   30974:	10c00317 	ldw	r3,12(r2)
   30978:	00800174 	movhi	r2,5
   3097c:	1096d604 	addi	r2,r2,23384
   30980:	d8800015 	stw	r2,0(sp)
   30984:	01c08dc4 	movi	r7,567
   30988:	01800174 	movhi	r6,5
   3098c:	31964204 	addi	r6,r6,22792
   30990:	01400174 	movhi	r5,5
   30994:	2951e804 	addi	r5,r5,18336
   30998:	1809883a 	mov	r4,r3
   3099c:	00461000 	call	46100 <fprintf>
   309a0:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[7], b->d[5]);
   309a4:	e0be8217 	ldw	r2,-1528(fp)
   309a8:	10800717 	ldw	r2,28(r2)
   309ac:	e0bfe015 	stw	r2,-128(fp)
   309b0:	e03fe115 	stw	zero,-124(fp)
   309b4:	e0be8317 	ldw	r2,-1524(fp)
   309b8:	10800517 	ldw	r2,20(r2)
   309bc:	e0bfe215 	stw	r2,-120(fp)
   309c0:	e03fe315 	stw	zero,-116(fp)
   309c4:	e1bfe217 	ldw	r6,-120(fp)
   309c8:	e1ffe317 	ldw	r7,-116(fp)
   309cc:	e13fe017 	ldw	r4,-128(fp)
   309d0:	e17fe117 	ldw	r5,-124(fp)
   309d4:	00438e00 	call	438e0 <__muldi3>
   309d8:	1009883a 	mov	r4,r2
   309dc:	180b883a 	mov	r5,r3
   309e0:	e13e7115 	stw	r4,-1596(fp)
   309e4:	e17e7215 	stw	r5,-1592(fp)
   309e8:	e0be7217 	ldw	r2,-1592(fp)
   309ec:	1004d83a 	srl	r2,r2,zero
   309f0:	e0bfe415 	stw	r2,-112(fp)
   309f4:	e03fe515 	stw	zero,-108(fp)
   309f8:	e0bfe417 	ldw	r2,-112(fp)
   309fc:	e0be7315 	stw	r2,-1588(fp)
   30a00:	e0be7117 	ldw	r2,-1596(fp)
   30a04:	e0be7415 	stw	r2,-1584(fp)
   30a08:	e0fd7e17 	ldw	r3,-2568(fp)
   30a0c:	e0be7417 	ldw	r2,-1584(fp)
   30a10:	1885883a 	add	r2,r3,r2
   30a14:	e0bd7e15 	stw	r2,-2568(fp)
   30a18:	e0fd7e17 	ldw	r3,-2568(fp)
   30a1c:	e0be7417 	ldw	r2,-1584(fp)
   30a20:	1880022e 	bgeu	r3,r2,30a2c <secp256k1_scalar_mul_512+0x46e4>
   30a24:	00800044 	movi	r2,1
   30a28:	00000106 	br	30a30 <secp256k1_scalar_mul_512+0x46e8>
   30a2c:	0005883a 	mov	r2,zero
   30a30:	e0fe7317 	ldw	r3,-1588(fp)
   30a34:	1885883a 	add	r2,r3,r2
   30a38:	e0be7315 	stw	r2,-1588(fp)
   30a3c:	e0fd7f17 	ldw	r3,-2564(fp)
   30a40:	e0be7317 	ldw	r2,-1588(fp)
   30a44:	1885883a 	add	r2,r3,r2
   30a48:	e0bd7f15 	stw	r2,-2564(fp)
   30a4c:	e0fd7f17 	ldw	r3,-2564(fp)
   30a50:	e0be7317 	ldw	r2,-1588(fp)
   30a54:	1880022e 	bgeu	r3,r2,30a60 <secp256k1_scalar_mul_512+0x4718>
   30a58:	00800044 	movi	r2,1
   30a5c:	00000106 	br	30a64 <secp256k1_scalar_mul_512+0x471c>
   30a60:	0005883a 	mov	r2,zero
   30a64:	e0fd8017 	ldw	r3,-2560(fp)
   30a68:	1885883a 	add	r2,r3,r2
   30a6c:	e0bd8015 	stw	r2,-2560(fp)
   30a70:	e0fd7f17 	ldw	r3,-2564(fp)
   30a74:	e0be7317 	ldw	r2,-1588(fp)
   30a78:	1885803a 	cmpltu	r2,r3,r2
   30a7c:	10803fcc 	andi	r2,r2,255
   30a80:	10001126 	beq	r2,zero,30ac8 <secp256k1_scalar_mul_512+0x4780>
   30a84:	e0bd8017 	ldw	r2,-2560(fp)
   30a88:	1005003a 	cmpeq	r2,r2,zero
   30a8c:	10803fcc 	andi	r2,r2,255
   30a90:	10000d26 	beq	r2,zero,30ac8 <secp256k1_scalar_mul_512+0x4780>
   30a94:	d0a01617 	ldw	r2,-32680(gp)
   30a98:	10c00317 	ldw	r3,12(r2)
   30a9c:	00800174 	movhi	r2,5
   30aa0:	1096d604 	addi	r2,r2,23384
   30aa4:	d8800015 	stw	r2,0(sp)
   30aa8:	01c08e04 	movi	r7,568
   30aac:	01800174 	movhi	r6,5
   30ab0:	31964204 	addi	r6,r6,22792
   30ab4:	01400174 	movhi	r5,5
   30ab8:	2951e804 	addi	r5,r5,18336
   30abc:	1809883a 	mov	r4,r3
   30ac0:	00461000 	call	46100 <fprintf>
   30ac4:	0045fd40 	call	45fd4 <abort>
    extract(l[12]);
   30ac8:	e0be8117 	ldw	r2,-1532(fp)
   30acc:	10800c04 	addi	r2,r2,48
   30ad0:	e0fd7e17 	ldw	r3,-2568(fp)
   30ad4:	10c00015 	stw	r3,0(r2)
   30ad8:	e0bd7f17 	ldw	r2,-2564(fp)
   30adc:	e0bd7e15 	stw	r2,-2568(fp)
   30ae0:	e0bd8017 	ldw	r2,-2560(fp)
   30ae4:	e0bd7f15 	stw	r2,-2564(fp)
   30ae8:	e03d8015 	stw	zero,-2560(fp)
    muladd(a->d[6], b->d[7]);
   30aec:	e0be8217 	ldw	r2,-1528(fp)
   30af0:	10800617 	ldw	r2,24(r2)
   30af4:	e0bfe615 	stw	r2,-104(fp)
   30af8:	e03fe715 	stw	zero,-100(fp)
   30afc:	e0be8317 	ldw	r2,-1524(fp)
   30b00:	10800717 	ldw	r2,28(r2)
   30b04:	e0bfe815 	stw	r2,-96(fp)
   30b08:	e03fe915 	stw	zero,-92(fp)
   30b0c:	e1bfe817 	ldw	r6,-96(fp)
   30b10:	e1ffe917 	ldw	r7,-92(fp)
   30b14:	e13fe617 	ldw	r4,-104(fp)
   30b18:	e17fe717 	ldw	r5,-100(fp)
   30b1c:	00438e00 	call	438e0 <__muldi3>
   30b20:	1009883a 	mov	r4,r2
   30b24:	180b883a 	mov	r5,r3
   30b28:	e13e7515 	stw	r4,-1580(fp)
   30b2c:	e17e7615 	stw	r5,-1576(fp)
   30b30:	e0be7617 	ldw	r2,-1576(fp)
   30b34:	1004d83a 	srl	r2,r2,zero
   30b38:	e0bfea15 	stw	r2,-88(fp)
   30b3c:	e03feb15 	stw	zero,-84(fp)
   30b40:	e0bfea17 	ldw	r2,-88(fp)
   30b44:	e0be7715 	stw	r2,-1572(fp)
   30b48:	e0be7517 	ldw	r2,-1580(fp)
   30b4c:	e0be7815 	stw	r2,-1568(fp)
   30b50:	e0fd7e17 	ldw	r3,-2568(fp)
   30b54:	e0be7817 	ldw	r2,-1568(fp)
   30b58:	1885883a 	add	r2,r3,r2
   30b5c:	e0bd7e15 	stw	r2,-2568(fp)
   30b60:	e0fd7e17 	ldw	r3,-2568(fp)
   30b64:	e0be7817 	ldw	r2,-1568(fp)
   30b68:	1880022e 	bgeu	r3,r2,30b74 <secp256k1_scalar_mul_512+0x482c>
   30b6c:	00800044 	movi	r2,1
   30b70:	00000106 	br	30b78 <secp256k1_scalar_mul_512+0x4830>
   30b74:	0005883a 	mov	r2,zero
   30b78:	e0fe7717 	ldw	r3,-1572(fp)
   30b7c:	1885883a 	add	r2,r3,r2
   30b80:	e0be7715 	stw	r2,-1572(fp)
   30b84:	e0fd7f17 	ldw	r3,-2564(fp)
   30b88:	e0be7717 	ldw	r2,-1572(fp)
   30b8c:	1885883a 	add	r2,r3,r2
   30b90:	e0bd7f15 	stw	r2,-2564(fp)
   30b94:	e0fd7f17 	ldw	r3,-2564(fp)
   30b98:	e0be7717 	ldw	r2,-1572(fp)
   30b9c:	1880022e 	bgeu	r3,r2,30ba8 <secp256k1_scalar_mul_512+0x4860>
   30ba0:	00800044 	movi	r2,1
   30ba4:	00000106 	br	30bac <secp256k1_scalar_mul_512+0x4864>
   30ba8:	0005883a 	mov	r2,zero
   30bac:	e0fd8017 	ldw	r3,-2560(fp)
   30bb0:	1885883a 	add	r2,r3,r2
   30bb4:	e0bd8015 	stw	r2,-2560(fp)
   30bb8:	e0fd7f17 	ldw	r3,-2564(fp)
   30bbc:	e0be7717 	ldw	r2,-1572(fp)
   30bc0:	1885803a 	cmpltu	r2,r3,r2
   30bc4:	10803fcc 	andi	r2,r2,255
   30bc8:	10001126 	beq	r2,zero,30c10 <secp256k1_scalar_mul_512+0x48c8>
   30bcc:	e0bd8017 	ldw	r2,-2560(fp)
   30bd0:	1005003a 	cmpeq	r2,r2,zero
   30bd4:	10803fcc 	andi	r2,r2,255
   30bd8:	10000d26 	beq	r2,zero,30c10 <secp256k1_scalar_mul_512+0x48c8>
   30bdc:	d0a01617 	ldw	r2,-32680(gp)
   30be0:	10c00317 	ldw	r3,12(r2)
   30be4:	00800174 	movhi	r2,5
   30be8:	1096d604 	addi	r2,r2,23384
   30bec:	d8800015 	stw	r2,0(sp)
   30bf0:	01c08e84 	movi	r7,570
   30bf4:	01800174 	movhi	r6,5
   30bf8:	31964204 	addi	r6,r6,22792
   30bfc:	01400174 	movhi	r5,5
   30c00:	2951e804 	addi	r5,r5,18336
   30c04:	1809883a 	mov	r4,r3
   30c08:	00461000 	call	46100 <fprintf>
   30c0c:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[7], b->d[6]);
   30c10:	e0be8217 	ldw	r2,-1528(fp)
   30c14:	10800717 	ldw	r2,28(r2)
   30c18:	e0bfec15 	stw	r2,-80(fp)
   30c1c:	e03fed15 	stw	zero,-76(fp)
   30c20:	e0be8317 	ldw	r2,-1524(fp)
   30c24:	10800617 	ldw	r2,24(r2)
   30c28:	e0bfee15 	stw	r2,-72(fp)
   30c2c:	e03fef15 	stw	zero,-68(fp)
   30c30:	e1bfee17 	ldw	r6,-72(fp)
   30c34:	e1ffef17 	ldw	r7,-68(fp)
   30c38:	e13fec17 	ldw	r4,-80(fp)
   30c3c:	e17fed17 	ldw	r5,-76(fp)
   30c40:	00438e00 	call	438e0 <__muldi3>
   30c44:	1009883a 	mov	r4,r2
   30c48:	180b883a 	mov	r5,r3
   30c4c:	e13e7915 	stw	r4,-1564(fp)
   30c50:	e17e7a15 	stw	r5,-1560(fp)
   30c54:	e0be7a17 	ldw	r2,-1560(fp)
   30c58:	1004d83a 	srl	r2,r2,zero
   30c5c:	e0bff015 	stw	r2,-64(fp)
   30c60:	e03ff115 	stw	zero,-60(fp)
   30c64:	e0bff017 	ldw	r2,-64(fp)
   30c68:	e0be7b15 	stw	r2,-1556(fp)
   30c6c:	e0be7917 	ldw	r2,-1564(fp)
   30c70:	e0be7c15 	stw	r2,-1552(fp)
   30c74:	e0fd7e17 	ldw	r3,-2568(fp)
   30c78:	e0be7c17 	ldw	r2,-1552(fp)
   30c7c:	1885883a 	add	r2,r3,r2
   30c80:	e0bd7e15 	stw	r2,-2568(fp)
   30c84:	e0fd7e17 	ldw	r3,-2568(fp)
   30c88:	e0be7c17 	ldw	r2,-1552(fp)
   30c8c:	1880022e 	bgeu	r3,r2,30c98 <secp256k1_scalar_mul_512+0x4950>
   30c90:	00800044 	movi	r2,1
   30c94:	00000106 	br	30c9c <secp256k1_scalar_mul_512+0x4954>
   30c98:	0005883a 	mov	r2,zero
   30c9c:	e0fe7b17 	ldw	r3,-1556(fp)
   30ca0:	1885883a 	add	r2,r3,r2
   30ca4:	e0be7b15 	stw	r2,-1556(fp)
   30ca8:	e0fd7f17 	ldw	r3,-2564(fp)
   30cac:	e0be7b17 	ldw	r2,-1556(fp)
   30cb0:	1885883a 	add	r2,r3,r2
   30cb4:	e0bd7f15 	stw	r2,-2564(fp)
   30cb8:	e0fd7f17 	ldw	r3,-2564(fp)
   30cbc:	e0be7b17 	ldw	r2,-1556(fp)
   30cc0:	1880022e 	bgeu	r3,r2,30ccc <secp256k1_scalar_mul_512+0x4984>
   30cc4:	00800044 	movi	r2,1
   30cc8:	00000106 	br	30cd0 <secp256k1_scalar_mul_512+0x4988>
   30ccc:	0005883a 	mov	r2,zero
   30cd0:	e0fd8017 	ldw	r3,-2560(fp)
   30cd4:	1885883a 	add	r2,r3,r2
   30cd8:	e0bd8015 	stw	r2,-2560(fp)
   30cdc:	e0fd7f17 	ldw	r3,-2564(fp)
   30ce0:	e0be7b17 	ldw	r2,-1556(fp)
   30ce4:	1885803a 	cmpltu	r2,r3,r2
   30ce8:	10803fcc 	andi	r2,r2,255
   30cec:	10001126 	beq	r2,zero,30d34 <secp256k1_scalar_mul_512+0x49ec>
   30cf0:	e0bd8017 	ldw	r2,-2560(fp)
   30cf4:	1005003a 	cmpeq	r2,r2,zero
   30cf8:	10803fcc 	andi	r2,r2,255
   30cfc:	10000d26 	beq	r2,zero,30d34 <secp256k1_scalar_mul_512+0x49ec>
   30d00:	d0a01617 	ldw	r2,-32680(gp)
   30d04:	10c00317 	ldw	r3,12(r2)
   30d08:	00800174 	movhi	r2,5
   30d0c:	1096d604 	addi	r2,r2,23384
   30d10:	d8800015 	stw	r2,0(sp)
   30d14:	01c08ec4 	movi	r7,571
   30d18:	01800174 	movhi	r6,5
   30d1c:	31964204 	addi	r6,r6,22792
   30d20:	01400174 	movhi	r5,5
   30d24:	2951e804 	addi	r5,r5,18336
   30d28:	1809883a 	mov	r4,r3
   30d2c:	00461000 	call	46100 <fprintf>
   30d30:	0045fd40 	call	45fd4 <abort>
    extract(l[13]);
   30d34:	e0be8117 	ldw	r2,-1532(fp)
   30d38:	10800d04 	addi	r2,r2,52
   30d3c:	e0fd7e17 	ldw	r3,-2568(fp)
   30d40:	10c00015 	stw	r3,0(r2)
   30d44:	e0bd7f17 	ldw	r2,-2564(fp)
   30d48:	e0bd7e15 	stw	r2,-2568(fp)
   30d4c:	e0bd8017 	ldw	r2,-2560(fp)
   30d50:	e0bd7f15 	stw	r2,-2564(fp)
   30d54:	e03d8015 	stw	zero,-2560(fp)
    muladd_fast(a->d[7], b->d[7]);
   30d58:	e0be8217 	ldw	r2,-1528(fp)
   30d5c:	10800717 	ldw	r2,28(r2)
   30d60:	e0bff215 	stw	r2,-56(fp)
   30d64:	e03ff315 	stw	zero,-52(fp)
   30d68:	e0be8317 	ldw	r2,-1524(fp)
   30d6c:	10800717 	ldw	r2,28(r2)
   30d70:	e0bff415 	stw	r2,-48(fp)
   30d74:	e03ff515 	stw	zero,-44(fp)
   30d78:	e1bff417 	ldw	r6,-48(fp)
   30d7c:	e1fff517 	ldw	r7,-44(fp)
   30d80:	e13ff217 	ldw	r4,-56(fp)
   30d84:	e17ff317 	ldw	r5,-52(fp)
   30d88:	00438e00 	call	438e0 <__muldi3>
   30d8c:	1009883a 	mov	r4,r2
   30d90:	180b883a 	mov	r5,r3
   30d94:	e13e7d15 	stw	r4,-1548(fp)
   30d98:	e17e7e15 	stw	r5,-1544(fp)
   30d9c:	e0be7e17 	ldw	r2,-1544(fp)
   30da0:	1004d83a 	srl	r2,r2,zero
   30da4:	e0bff615 	stw	r2,-40(fp)
   30da8:	e03ff715 	stw	zero,-36(fp)
   30dac:	e0bff617 	ldw	r2,-40(fp)
   30db0:	e0be7f15 	stw	r2,-1540(fp)
   30db4:	e0be7d17 	ldw	r2,-1548(fp)
   30db8:	e0be8015 	stw	r2,-1536(fp)
   30dbc:	e0fd7e17 	ldw	r3,-2568(fp)
   30dc0:	e0be8017 	ldw	r2,-1536(fp)
   30dc4:	1885883a 	add	r2,r3,r2
   30dc8:	e0bd7e15 	stw	r2,-2568(fp)
   30dcc:	e0fd7e17 	ldw	r3,-2568(fp)
   30dd0:	e0be8017 	ldw	r2,-1536(fp)
   30dd4:	1880022e 	bgeu	r3,r2,30de0 <secp256k1_scalar_mul_512+0x4a98>
   30dd8:	00800044 	movi	r2,1
   30ddc:	00000106 	br	30de4 <secp256k1_scalar_mul_512+0x4a9c>
   30de0:	0005883a 	mov	r2,zero
   30de4:	e0fe7f17 	ldw	r3,-1540(fp)
   30de8:	1885883a 	add	r2,r3,r2
   30dec:	e0be7f15 	stw	r2,-1540(fp)
   30df0:	e0fd7f17 	ldw	r3,-2564(fp)
   30df4:	e0be7f17 	ldw	r2,-1540(fp)
   30df8:	1885883a 	add	r2,r3,r2
   30dfc:	e0bd7f15 	stw	r2,-2564(fp)
   30e00:	e0fd7f17 	ldw	r3,-2564(fp)
   30e04:	e0be7f17 	ldw	r2,-1540(fp)
   30e08:	1885803a 	cmpltu	r2,r3,r2
   30e0c:	10803fcc 	andi	r2,r2,255
   30e10:	10000d26 	beq	r2,zero,30e48 <secp256k1_scalar_mul_512+0x4b00>
   30e14:	d0a01617 	ldw	r2,-32680(gp)
   30e18:	10c00317 	ldw	r3,12(r2)
   30e1c:	00800174 	movhi	r2,5
   30e20:	1096b904 	addi	r2,r2,23268
   30e24:	d8800015 	stw	r2,0(sp)
   30e28:	01c08f44 	movi	r7,573
   30e2c:	01800174 	movhi	r6,5
   30e30:	31964204 	addi	r6,r6,22792
   30e34:	01400174 	movhi	r5,5
   30e38:	2951e804 	addi	r5,r5,18336
   30e3c:	1809883a 	mov	r4,r3
   30e40:	00461000 	call	46100 <fprintf>
   30e44:	0045fd40 	call	45fd4 <abort>
    extract_fast(l[14]);
   30e48:	e0be8117 	ldw	r2,-1532(fp)
   30e4c:	10800e04 	addi	r2,r2,56
   30e50:	e0fd7e17 	ldw	r3,-2568(fp)
   30e54:	10c00015 	stw	r3,0(r2)
   30e58:	e0bd7f17 	ldw	r2,-2564(fp)
   30e5c:	e0bd7e15 	stw	r2,-2568(fp)
   30e60:	e03d7f15 	stw	zero,-2564(fp)
   30e64:	e0bd8017 	ldw	r2,-2560(fp)
   30e68:	1004c03a 	cmpne	r2,r2,zero
   30e6c:	10803fcc 	andi	r2,r2,255
   30e70:	10000d26 	beq	r2,zero,30ea8 <secp256k1_scalar_mul_512+0x4b60>
   30e74:	d0a01617 	ldw	r2,-32680(gp)
   30e78:	10c00317 	ldw	r3,12(r2)
   30e7c:	00800174 	movhi	r2,5
   30e80:	1096c104 	addi	r2,r2,23300
   30e84:	d8800015 	stw	r2,0(sp)
   30e88:	01c08f84 	movi	r7,574
   30e8c:	01800174 	movhi	r6,5
   30e90:	31964204 	addi	r6,r6,22792
   30e94:	01400174 	movhi	r5,5
   30e98:	2951e804 	addi	r5,r5,18336
   30e9c:	1809883a 	mov	r4,r3
   30ea0:	00461000 	call	46100 <fprintf>
   30ea4:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(c1 == 0);
   30ea8:	e0bd7f17 	ldw	r2,-2564(fp)
   30eac:	1004c03a 	cmpne	r2,r2,zero
   30eb0:	10803fcc 	andi	r2,r2,255
   30eb4:	10000d26 	beq	r2,zero,30eec <secp256k1_scalar_mul_512+0x4ba4>
   30eb8:	d0a01617 	ldw	r2,-32680(gp)
   30ebc:	10c00317 	ldw	r3,12(r2)
   30ec0:	00800174 	movhi	r2,5
   30ec4:	10972304 	addi	r2,r2,23692
   30ec8:	d8800015 	stw	r2,0(sp)
   30ecc:	01c08fc4 	movi	r7,575
   30ed0:	01800174 	movhi	r6,5
   30ed4:	31964204 	addi	r6,r6,22792
   30ed8:	01400174 	movhi	r5,5
   30edc:	2951e804 	addi	r5,r5,18336
   30ee0:	1809883a 	mov	r4,r3
   30ee4:	00461000 	call	46100 <fprintf>
   30ee8:	0045fd40 	call	45fd4 <abort>
    l[15] = c0;
   30eec:	e0be8117 	ldw	r2,-1532(fp)
   30ef0:	10800f04 	addi	r2,r2,60
   30ef4:	e0fd7e17 	ldw	r3,-2568(fp)
   30ef8:	10c00015 	stw	r3,0(r2)
}
   30efc:	0001883a 	nop
   30f00:	e6fff804 	addi	sp,fp,-32
   30f04:	dfc00917 	ldw	ra,36(sp)
   30f08:	df000817 	ldw	fp,32(sp)
   30f0c:	ddc00717 	ldw	r23,28(sp)
   30f10:	dd800617 	ldw	r22,24(sp)
   30f14:	dd400517 	ldw	r21,20(sp)
   30f18:	dd000417 	ldw	r20,16(sp)
   30f1c:	dcc00317 	ldw	r19,12(sp)
   30f20:	dc800217 	ldw	r18,8(sp)
   30f24:	dc400117 	ldw	r17,4(sp)
   30f28:	dc000017 	ldw	r16,0(sp)
   30f2c:	dec00a04 	addi	sp,sp,40
   30f30:	f800283a 	ret

00030f34 <secp256k1_scalar_sqr_512>:

static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar *a) {
   30f34:	defe5c04 	addi	sp,sp,-1680
   30f38:	dfc1a315 	stw	ra,1676(sp)
   30f3c:	df01a215 	stw	fp,1672(sp)
   30f40:	ddc1a115 	stw	r23,1668(sp)
   30f44:	dd81a015 	stw	r22,1664(sp)
   30f48:	dd419f15 	stw	r21,1660(sp)
   30f4c:	dd019e15 	stw	r20,1656(sp)
   30f50:	dcc19d15 	stw	r19,1652(sp)
   30f54:	dc819c15 	stw	r18,1648(sp)
   30f58:	dc419b15 	stw	r17,1644(sp)
   30f5c:	dc019a15 	stw	r16,1640(sp)
   30f60:	df01a204 	addi	fp,sp,1672
   30f64:	e13f2a15 	stw	r4,-856(fp)
   30f68:	e17f2b15 	stw	r5,-852(fp)
    /* 96 bit accumulator. */
    uint32_t c0 = 0, c1 = 0, c2 = 0;
   30f6c:	e03e5f15 	stw	zero,-1668(fp)
   30f70:	e03e6015 	stw	zero,-1664(fp)
   30f74:	e03e6115 	stw	zero,-1660(fp)

    /* l[0..15] = a[0..7]^2. */
    muladd_fast(a->d[0], a->d[0]);
   30f78:	e0bf2b17 	ldw	r2,-852(fp)
   30f7c:	10800017 	ldw	r2,0(r2)
   30f80:	1013883a 	mov	r9,r2
   30f84:	0015883a 	mov	r10,zero
   30f88:	e0bf2b17 	ldw	r2,-852(fp)
   30f8c:	10800017 	ldw	r2,0(r2)
   30f90:	100f883a 	mov	r7,r2
   30f94:	0011883a 	mov	r8,zero
   30f98:	380d883a 	mov	r6,r7
   30f9c:	400f883a 	mov	r7,r8
   30fa0:	4809883a 	mov	r4,r9
   30fa4:	500b883a 	mov	r5,r10
   30fa8:	00438e00 	call	438e0 <__muldi3>
   30fac:	1009883a 	mov	r4,r2
   30fb0:	180b883a 	mov	r5,r3
   30fb4:	e13e6215 	stw	r4,-1656(fp)
   30fb8:	e17e6315 	stw	r5,-1652(fp)
   30fbc:	e0be6317 	ldw	r2,-1652(fp)
   30fc0:	1020d83a 	srl	r16,r2,zero
   30fc4:	0023883a 	mov	r17,zero
   30fc8:	e43e6415 	stw	r16,-1648(fp)
   30fcc:	e0be6217 	ldw	r2,-1656(fp)
   30fd0:	e0be6515 	stw	r2,-1644(fp)
   30fd4:	e0fe5f17 	ldw	r3,-1668(fp)
   30fd8:	e0be6517 	ldw	r2,-1644(fp)
   30fdc:	1885883a 	add	r2,r3,r2
   30fe0:	e0be5f15 	stw	r2,-1668(fp)
   30fe4:	e0fe5f17 	ldw	r3,-1668(fp)
   30fe8:	e0be6517 	ldw	r2,-1644(fp)
   30fec:	1880022e 	bgeu	r3,r2,30ff8 <secp256k1_scalar_sqr_512+0xc4>
   30ff0:	00c00044 	movi	r3,1
   30ff4:	00000106 	br	30ffc <secp256k1_scalar_sqr_512+0xc8>
   30ff8:	0007883a 	mov	r3,zero
   30ffc:	e0be6417 	ldw	r2,-1648(fp)
   31000:	10c5883a 	add	r2,r2,r3
   31004:	e0be6415 	stw	r2,-1648(fp)
   31008:	e0fe6017 	ldw	r3,-1664(fp)
   3100c:	e0be6417 	ldw	r2,-1648(fp)
   31010:	1885883a 	add	r2,r3,r2
   31014:	e0be6015 	stw	r2,-1664(fp)
   31018:	e0fe6017 	ldw	r3,-1664(fp)
   3101c:	e0be6417 	ldw	r2,-1648(fp)
   31020:	1885803a 	cmpltu	r2,r3,r2
   31024:	10803fcc 	andi	r2,r2,255
   31028:	10000d26 	beq	r2,zero,31060 <secp256k1_scalar_sqr_512+0x12c>
   3102c:	d0a01617 	ldw	r2,-32680(gp)
   31030:	10c00317 	ldw	r3,12(r2)
   31034:	00800174 	movhi	r2,5
   31038:	1096b904 	addi	r2,r2,23268
   3103c:	d8800015 	stw	r2,0(sp)
   31040:	01c09204 	movi	r7,584
   31044:	01800174 	movhi	r6,5
   31048:	31964204 	addi	r6,r6,22792
   3104c:	01400174 	movhi	r5,5
   31050:	2951e804 	addi	r5,r5,18336
   31054:	1809883a 	mov	r4,r3
   31058:	00461000 	call	46100 <fprintf>
   3105c:	0045fd40 	call	45fd4 <abort>
    extract_fast(l[0]);
   31060:	e0ff2a17 	ldw	r3,-856(fp)
   31064:	e0be5f17 	ldw	r2,-1668(fp)
   31068:	18800015 	stw	r2,0(r3)
   3106c:	e0be6017 	ldw	r2,-1664(fp)
   31070:	e0be5f15 	stw	r2,-1668(fp)
   31074:	e03e6015 	stw	zero,-1664(fp)
   31078:	e0be6117 	ldw	r2,-1660(fp)
   3107c:	1004c03a 	cmpne	r2,r2,zero
   31080:	10803fcc 	andi	r2,r2,255
   31084:	10000d26 	beq	r2,zero,310bc <secp256k1_scalar_sqr_512+0x188>
   31088:	d0a01617 	ldw	r2,-32680(gp)
   3108c:	10c00317 	ldw	r3,12(r2)
   31090:	00800174 	movhi	r2,5
   31094:	1096c104 	addi	r2,r2,23300
   31098:	d8800015 	stw	r2,0(sp)
   3109c:	01c09244 	movi	r7,585
   310a0:	01800174 	movhi	r6,5
   310a4:	31964204 	addi	r6,r6,22792
   310a8:	01400174 	movhi	r5,5
   310ac:	2951e804 	addi	r5,r5,18336
   310b0:	1809883a 	mov	r4,r3
   310b4:	00461000 	call	46100 <fprintf>
   310b8:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[0], a->d[1]);
   310bc:	e0bf2b17 	ldw	r2,-852(fp)
   310c0:	10800017 	ldw	r2,0(r2)
   310c4:	102d883a 	mov	r22,r2
   310c8:	002f883a 	mov	r23,zero
   310cc:	e0bf2b17 	ldw	r2,-852(fp)
   310d0:	10800117 	ldw	r2,4(r2)
   310d4:	1029883a 	mov	r20,r2
   310d8:	002b883a 	mov	r21,zero
   310dc:	a00d883a 	mov	r6,r20
   310e0:	a80f883a 	mov	r7,r21
   310e4:	b009883a 	mov	r4,r22
   310e8:	b80b883a 	mov	r5,r23
   310ec:	00438e00 	call	438e0 <__muldi3>
   310f0:	1009883a 	mov	r4,r2
   310f4:	180b883a 	mov	r5,r3
   310f8:	e13e6615 	stw	r4,-1640(fp)
   310fc:	e17e6715 	stw	r5,-1636(fp)
   31100:	e0be6717 	ldw	r2,-1636(fp)
   31104:	1024d83a 	srl	r18,r2,zero
   31108:	0027883a 	mov	r19,zero
   3110c:	e4be6815 	stw	r18,-1632(fp)
   31110:	e0be6617 	ldw	r2,-1640(fp)
   31114:	e0be6915 	stw	r2,-1628(fp)
   31118:	e0fe6817 	ldw	r3,-1632(fp)
   3111c:	e0be6817 	ldw	r2,-1632(fp)
   31120:	1885883a 	add	r2,r3,r2
   31124:	e0be6a15 	stw	r2,-1624(fp)
   31128:	e0fe6a17 	ldw	r3,-1624(fp)
   3112c:	e0be6817 	ldw	r2,-1632(fp)
   31130:	1880022e 	bgeu	r3,r2,3113c <secp256k1_scalar_sqr_512+0x208>
   31134:	00c00044 	movi	r3,1
   31138:	00000106 	br	31140 <secp256k1_scalar_sqr_512+0x20c>
   3113c:	0007883a 	mov	r3,zero
   31140:	e0be6117 	ldw	r2,-1660(fp)
   31144:	10c5883a 	add	r2,r2,r3
   31148:	e0be6115 	stw	r2,-1660(fp)
   3114c:	e0fe6a17 	ldw	r3,-1624(fp)
   31150:	e0be6817 	ldw	r2,-1632(fp)
   31154:	1885803a 	cmpltu	r2,r3,r2
   31158:	10803fcc 	andi	r2,r2,255
   3115c:	10001126 	beq	r2,zero,311a4 <secp256k1_scalar_sqr_512+0x270>
   31160:	e0be6117 	ldw	r2,-1660(fp)
   31164:	1005003a 	cmpeq	r2,r2,zero
   31168:	10803fcc 	andi	r2,r2,255
   3116c:	10000d26 	beq	r2,zero,311a4 <secp256k1_scalar_sqr_512+0x270>
   31170:	d0a01617 	ldw	r2,-32680(gp)
   31174:	10c00317 	ldw	r3,12(r2)
   31178:	00800174 	movhi	r2,5
   3117c:	10972b04 	addi	r2,r2,23724
   31180:	d8800015 	stw	r2,0(sp)
   31184:	01c09284 	movi	r7,586
   31188:	01800174 	movhi	r6,5
   3118c:	31964204 	addi	r6,r6,22792
   31190:	01400174 	movhi	r5,5
   31194:	2951e804 	addi	r5,r5,18336
   31198:	1809883a 	mov	r4,r3
   3119c:	00461000 	call	46100 <fprintf>
   311a0:	0045fd40 	call	45fd4 <abort>
   311a4:	e0fe6917 	ldw	r3,-1628(fp)
   311a8:	e0be6917 	ldw	r2,-1628(fp)
   311ac:	1885883a 	add	r2,r3,r2
   311b0:	e0be6b15 	stw	r2,-1620(fp)
   311b4:	e0fe6b17 	ldw	r3,-1620(fp)
   311b8:	e0be6917 	ldw	r2,-1628(fp)
   311bc:	1880022e 	bgeu	r3,r2,311c8 <secp256k1_scalar_sqr_512+0x294>
   311c0:	00c00044 	movi	r3,1
   311c4:	00000106 	br	311cc <secp256k1_scalar_sqr_512+0x298>
   311c8:	0007883a 	mov	r3,zero
   311cc:	e0be6a17 	ldw	r2,-1624(fp)
   311d0:	10c5883a 	add	r2,r2,r3
   311d4:	e0be6a15 	stw	r2,-1624(fp)
   311d8:	e0fe5f17 	ldw	r3,-1668(fp)
   311dc:	e0be6b17 	ldw	r2,-1620(fp)
   311e0:	1885883a 	add	r2,r3,r2
   311e4:	e0be5f15 	stw	r2,-1668(fp)
   311e8:	e0fe5f17 	ldw	r3,-1668(fp)
   311ec:	e0be6b17 	ldw	r2,-1620(fp)
   311f0:	1880022e 	bgeu	r3,r2,311fc <secp256k1_scalar_sqr_512+0x2c8>
   311f4:	00c00044 	movi	r3,1
   311f8:	00000106 	br	31200 <secp256k1_scalar_sqr_512+0x2cc>
   311fc:	0007883a 	mov	r3,zero
   31200:	e0be6a17 	ldw	r2,-1624(fp)
   31204:	10c5883a 	add	r2,r2,r3
   31208:	e0be6a15 	stw	r2,-1624(fp)
   3120c:	e0fe5f17 	ldw	r3,-1668(fp)
   31210:	e0be6b17 	ldw	r2,-1620(fp)
   31214:	1885803a 	cmpltu	r2,r3,r2
   31218:	1007883a 	mov	r3,r2
   3121c:	e0be6a17 	ldw	r2,-1624(fp)
   31220:	1005003a 	cmpeq	r2,r2,zero
   31224:	1884703a 	and	r2,r3,r2
   31228:	10c03fcc 	andi	r3,r2,255
   3122c:	e0be6117 	ldw	r2,-1660(fp)
   31230:	10c5883a 	add	r2,r2,r3
   31234:	e0be6115 	stw	r2,-1660(fp)
   31238:	e0fe5f17 	ldw	r3,-1668(fp)
   3123c:	e0be6b17 	ldw	r2,-1620(fp)
   31240:	1885803a 	cmpltu	r2,r3,r2
   31244:	10803fcc 	andi	r2,r2,255
   31248:	10000626 	beq	r2,zero,31264 <secp256k1_scalar_sqr_512+0x330>
   3124c:	e0be6a17 	ldw	r2,-1624(fp)
   31250:	1005003a 	cmpeq	r2,r2,zero
   31254:	10803fcc 	andi	r2,r2,255
   31258:	10000226 	beq	r2,zero,31264 <secp256k1_scalar_sqr_512+0x330>
   3125c:	00800044 	movi	r2,1
   31260:	00000106 	br	31268 <secp256k1_scalar_sqr_512+0x334>
   31264:	0005883a 	mov	r2,zero
   31268:	10001126 	beq	r2,zero,312b0 <secp256k1_scalar_sqr_512+0x37c>
   3126c:	e0be6117 	ldw	r2,-1660(fp)
   31270:	1005003a 	cmpeq	r2,r2,zero
   31274:	10803fcc 	andi	r2,r2,255
   31278:	10000d26 	beq	r2,zero,312b0 <secp256k1_scalar_sqr_512+0x37c>
   3127c:	d0a01617 	ldw	r2,-32680(gp)
   31280:	10c00317 	ldw	r3,12(r2)
   31284:	00800174 	movhi	r2,5
   31288:	10973704 	addi	r2,r2,23772
   3128c:	d8800015 	stw	r2,0(sp)
   31290:	01c09284 	movi	r7,586
   31294:	01800174 	movhi	r6,5
   31298:	31964204 	addi	r6,r6,22792
   3129c:	01400174 	movhi	r5,5
   312a0:	2951e804 	addi	r5,r5,18336
   312a4:	1809883a 	mov	r4,r3
   312a8:	00461000 	call	46100 <fprintf>
   312ac:	0045fd40 	call	45fd4 <abort>
   312b0:	e0fe6017 	ldw	r3,-1664(fp)
   312b4:	e0be6a17 	ldw	r2,-1624(fp)
   312b8:	1885883a 	add	r2,r3,r2
   312bc:	e0be6015 	stw	r2,-1664(fp)
   312c0:	e0fe6017 	ldw	r3,-1664(fp)
   312c4:	e0be6a17 	ldw	r2,-1624(fp)
   312c8:	1880022e 	bgeu	r3,r2,312d4 <secp256k1_scalar_sqr_512+0x3a0>
   312cc:	00c00044 	movi	r3,1
   312d0:	00000106 	br	312d8 <secp256k1_scalar_sqr_512+0x3a4>
   312d4:	0007883a 	mov	r3,zero
   312d8:	e0be6117 	ldw	r2,-1660(fp)
   312dc:	10c5883a 	add	r2,r2,r3
   312e0:	e0be6115 	stw	r2,-1660(fp)
   312e4:	e0fe6017 	ldw	r3,-1664(fp)
   312e8:	e0be6a17 	ldw	r2,-1624(fp)
   312ec:	1885803a 	cmpltu	r2,r3,r2
   312f0:	10803fcc 	andi	r2,r2,255
   312f4:	10001126 	beq	r2,zero,3133c <secp256k1_scalar_sqr_512+0x408>
   312f8:	e0be6117 	ldw	r2,-1660(fp)
   312fc:	1005003a 	cmpeq	r2,r2,zero
   31300:	10803fcc 	andi	r2,r2,255
   31304:	10000d26 	beq	r2,zero,3133c <secp256k1_scalar_sqr_512+0x408>
   31308:	d0a01617 	ldw	r2,-32680(gp)
   3130c:	10c00317 	ldw	r3,12(r2)
   31310:	00800174 	movhi	r2,5
   31314:	10974704 	addi	r2,r2,23836
   31318:	d8800015 	stw	r2,0(sp)
   3131c:	01c09284 	movi	r7,586
   31320:	01800174 	movhi	r6,5
   31324:	31964204 	addi	r6,r6,22792
   31328:	01400174 	movhi	r5,5
   3132c:	2951e804 	addi	r5,r5,18336
   31330:	1809883a 	mov	r4,r3
   31334:	00461000 	call	46100 <fprintf>
   31338:	0045fd40 	call	45fd4 <abort>
    extract(l[1]);
   3133c:	e0bf2a17 	ldw	r2,-856(fp)
   31340:	10c00104 	addi	r3,r2,4
   31344:	e0be5f17 	ldw	r2,-1668(fp)
   31348:	18800015 	stw	r2,0(r3)
   3134c:	e0be6017 	ldw	r2,-1664(fp)
   31350:	e0be5f15 	stw	r2,-1668(fp)
   31354:	e0be6117 	ldw	r2,-1660(fp)
   31358:	e0be6015 	stw	r2,-1664(fp)
   3135c:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[2]);
   31360:	e0bf2b17 	ldw	r2,-852(fp)
   31364:	10800017 	ldw	r2,0(r2)
   31368:	e0bf2c15 	stw	r2,-848(fp)
   3136c:	e03f2d15 	stw	zero,-844(fp)
   31370:	e0bf2b17 	ldw	r2,-852(fp)
   31374:	10800217 	ldw	r2,8(r2)
   31378:	e0bf2e15 	stw	r2,-840(fp)
   3137c:	e03f2f15 	stw	zero,-836(fp)
   31380:	e1bf2e17 	ldw	r6,-840(fp)
   31384:	e1ff2f17 	ldw	r7,-836(fp)
   31388:	e13f2c17 	ldw	r4,-848(fp)
   3138c:	e17f2d17 	ldw	r5,-844(fp)
   31390:	00438e00 	call	438e0 <__muldi3>
   31394:	1009883a 	mov	r4,r2
   31398:	180b883a 	mov	r5,r3
   3139c:	e13e6c15 	stw	r4,-1616(fp)
   313a0:	e17e6d15 	stw	r5,-1612(fp)
   313a4:	e0be6d17 	ldw	r2,-1612(fp)
   313a8:	1004d83a 	srl	r2,r2,zero
   313ac:	e0bf3015 	stw	r2,-832(fp)
   313b0:	e03f3115 	stw	zero,-828(fp)
   313b4:	e0bf3017 	ldw	r2,-832(fp)
   313b8:	e0be6e15 	stw	r2,-1608(fp)
   313bc:	e0be6c17 	ldw	r2,-1616(fp)
   313c0:	e0be6f15 	stw	r2,-1604(fp)
   313c4:	e0fe6e17 	ldw	r3,-1608(fp)
   313c8:	e0be6e17 	ldw	r2,-1608(fp)
   313cc:	1885883a 	add	r2,r3,r2
   313d0:	e0be7015 	stw	r2,-1600(fp)
   313d4:	e0fe7017 	ldw	r3,-1600(fp)
   313d8:	e0be6e17 	ldw	r2,-1608(fp)
   313dc:	1880022e 	bgeu	r3,r2,313e8 <secp256k1_scalar_sqr_512+0x4b4>
   313e0:	00c00044 	movi	r3,1
   313e4:	00000106 	br	313ec <secp256k1_scalar_sqr_512+0x4b8>
   313e8:	0007883a 	mov	r3,zero
   313ec:	e0be6117 	ldw	r2,-1660(fp)
   313f0:	10c5883a 	add	r2,r2,r3
   313f4:	e0be6115 	stw	r2,-1660(fp)
   313f8:	e0fe7017 	ldw	r3,-1600(fp)
   313fc:	e0be6e17 	ldw	r2,-1608(fp)
   31400:	1885803a 	cmpltu	r2,r3,r2
   31404:	10803fcc 	andi	r2,r2,255
   31408:	10001126 	beq	r2,zero,31450 <secp256k1_scalar_sqr_512+0x51c>
   3140c:	e0be6117 	ldw	r2,-1660(fp)
   31410:	1005003a 	cmpeq	r2,r2,zero
   31414:	10803fcc 	andi	r2,r2,255
   31418:	10000d26 	beq	r2,zero,31450 <secp256k1_scalar_sqr_512+0x51c>
   3141c:	d0a01617 	ldw	r2,-32680(gp)
   31420:	10c00317 	ldw	r3,12(r2)
   31424:	00800174 	movhi	r2,5
   31428:	10972b04 	addi	r2,r2,23724
   3142c:	d8800015 	stw	r2,0(sp)
   31430:	01c09304 	movi	r7,588
   31434:	01800174 	movhi	r6,5
   31438:	31964204 	addi	r6,r6,22792
   3143c:	01400174 	movhi	r5,5
   31440:	2951e804 	addi	r5,r5,18336
   31444:	1809883a 	mov	r4,r3
   31448:	00461000 	call	46100 <fprintf>
   3144c:	0045fd40 	call	45fd4 <abort>
   31450:	e0fe6f17 	ldw	r3,-1604(fp)
   31454:	e0be6f17 	ldw	r2,-1604(fp)
   31458:	1885883a 	add	r2,r3,r2
   3145c:	e0be7115 	stw	r2,-1596(fp)
   31460:	e0fe7117 	ldw	r3,-1596(fp)
   31464:	e0be6f17 	ldw	r2,-1604(fp)
   31468:	1880022e 	bgeu	r3,r2,31474 <secp256k1_scalar_sqr_512+0x540>
   3146c:	00c00044 	movi	r3,1
   31470:	00000106 	br	31478 <secp256k1_scalar_sqr_512+0x544>
   31474:	0007883a 	mov	r3,zero
   31478:	e0be7017 	ldw	r2,-1600(fp)
   3147c:	10c5883a 	add	r2,r2,r3
   31480:	e0be7015 	stw	r2,-1600(fp)
   31484:	e0fe5f17 	ldw	r3,-1668(fp)
   31488:	e0be7117 	ldw	r2,-1596(fp)
   3148c:	1885883a 	add	r2,r3,r2
   31490:	e0be5f15 	stw	r2,-1668(fp)
   31494:	e0fe5f17 	ldw	r3,-1668(fp)
   31498:	e0be7117 	ldw	r2,-1596(fp)
   3149c:	1880022e 	bgeu	r3,r2,314a8 <secp256k1_scalar_sqr_512+0x574>
   314a0:	00c00044 	movi	r3,1
   314a4:	00000106 	br	314ac <secp256k1_scalar_sqr_512+0x578>
   314a8:	0007883a 	mov	r3,zero
   314ac:	e0be7017 	ldw	r2,-1600(fp)
   314b0:	10c5883a 	add	r2,r2,r3
   314b4:	e0be7015 	stw	r2,-1600(fp)
   314b8:	e0fe5f17 	ldw	r3,-1668(fp)
   314bc:	e0be7117 	ldw	r2,-1596(fp)
   314c0:	1885803a 	cmpltu	r2,r3,r2
   314c4:	1007883a 	mov	r3,r2
   314c8:	e0be7017 	ldw	r2,-1600(fp)
   314cc:	1005003a 	cmpeq	r2,r2,zero
   314d0:	1884703a 	and	r2,r3,r2
   314d4:	10c03fcc 	andi	r3,r2,255
   314d8:	e0be6117 	ldw	r2,-1660(fp)
   314dc:	10c5883a 	add	r2,r2,r3
   314e0:	e0be6115 	stw	r2,-1660(fp)
   314e4:	e0fe5f17 	ldw	r3,-1668(fp)
   314e8:	e0be7117 	ldw	r2,-1596(fp)
   314ec:	1885803a 	cmpltu	r2,r3,r2
   314f0:	10803fcc 	andi	r2,r2,255
   314f4:	10000626 	beq	r2,zero,31510 <secp256k1_scalar_sqr_512+0x5dc>
   314f8:	e0be7017 	ldw	r2,-1600(fp)
   314fc:	1005003a 	cmpeq	r2,r2,zero
   31500:	10803fcc 	andi	r2,r2,255
   31504:	10000226 	beq	r2,zero,31510 <secp256k1_scalar_sqr_512+0x5dc>
   31508:	00800044 	movi	r2,1
   3150c:	00000106 	br	31514 <secp256k1_scalar_sqr_512+0x5e0>
   31510:	0005883a 	mov	r2,zero
   31514:	10001126 	beq	r2,zero,3155c <secp256k1_scalar_sqr_512+0x628>
   31518:	e0be6117 	ldw	r2,-1660(fp)
   3151c:	1005003a 	cmpeq	r2,r2,zero
   31520:	10803fcc 	andi	r2,r2,255
   31524:	10000d26 	beq	r2,zero,3155c <secp256k1_scalar_sqr_512+0x628>
   31528:	d0a01617 	ldw	r2,-32680(gp)
   3152c:	10c00317 	ldw	r3,12(r2)
   31530:	00800174 	movhi	r2,5
   31534:	10973704 	addi	r2,r2,23772
   31538:	d8800015 	stw	r2,0(sp)
   3153c:	01c09304 	movi	r7,588
   31540:	01800174 	movhi	r6,5
   31544:	31964204 	addi	r6,r6,22792
   31548:	01400174 	movhi	r5,5
   3154c:	2951e804 	addi	r5,r5,18336
   31550:	1809883a 	mov	r4,r3
   31554:	00461000 	call	46100 <fprintf>
   31558:	0045fd40 	call	45fd4 <abort>
   3155c:	e0fe6017 	ldw	r3,-1664(fp)
   31560:	e0be7017 	ldw	r2,-1600(fp)
   31564:	1885883a 	add	r2,r3,r2
   31568:	e0be6015 	stw	r2,-1664(fp)
   3156c:	e0fe6017 	ldw	r3,-1664(fp)
   31570:	e0be7017 	ldw	r2,-1600(fp)
   31574:	1880022e 	bgeu	r3,r2,31580 <secp256k1_scalar_sqr_512+0x64c>
   31578:	00c00044 	movi	r3,1
   3157c:	00000106 	br	31584 <secp256k1_scalar_sqr_512+0x650>
   31580:	0007883a 	mov	r3,zero
   31584:	e0be6117 	ldw	r2,-1660(fp)
   31588:	10c5883a 	add	r2,r2,r3
   3158c:	e0be6115 	stw	r2,-1660(fp)
   31590:	e0fe6017 	ldw	r3,-1664(fp)
   31594:	e0be7017 	ldw	r2,-1600(fp)
   31598:	1885803a 	cmpltu	r2,r3,r2
   3159c:	10803fcc 	andi	r2,r2,255
   315a0:	10001126 	beq	r2,zero,315e8 <secp256k1_scalar_sqr_512+0x6b4>
   315a4:	e0be6117 	ldw	r2,-1660(fp)
   315a8:	1005003a 	cmpeq	r2,r2,zero
   315ac:	10803fcc 	andi	r2,r2,255
   315b0:	10000d26 	beq	r2,zero,315e8 <secp256k1_scalar_sqr_512+0x6b4>
   315b4:	d0a01617 	ldw	r2,-32680(gp)
   315b8:	10c00317 	ldw	r3,12(r2)
   315bc:	00800174 	movhi	r2,5
   315c0:	10974704 	addi	r2,r2,23836
   315c4:	d8800015 	stw	r2,0(sp)
   315c8:	01c09304 	movi	r7,588
   315cc:	01800174 	movhi	r6,5
   315d0:	31964204 	addi	r6,r6,22792
   315d4:	01400174 	movhi	r5,5
   315d8:	2951e804 	addi	r5,r5,18336
   315dc:	1809883a 	mov	r4,r3
   315e0:	00461000 	call	46100 <fprintf>
   315e4:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[1], a->d[1]);
   315e8:	e0bf2b17 	ldw	r2,-852(fp)
   315ec:	10800117 	ldw	r2,4(r2)
   315f0:	e0bf3215 	stw	r2,-824(fp)
   315f4:	e03f3315 	stw	zero,-820(fp)
   315f8:	e0bf2b17 	ldw	r2,-852(fp)
   315fc:	10800117 	ldw	r2,4(r2)
   31600:	e0bf3415 	stw	r2,-816(fp)
   31604:	e03f3515 	stw	zero,-812(fp)
   31608:	e1bf3417 	ldw	r6,-816(fp)
   3160c:	e1ff3517 	ldw	r7,-812(fp)
   31610:	e13f3217 	ldw	r4,-824(fp)
   31614:	e17f3317 	ldw	r5,-820(fp)
   31618:	00438e00 	call	438e0 <__muldi3>
   3161c:	1009883a 	mov	r4,r2
   31620:	180b883a 	mov	r5,r3
   31624:	e13e7215 	stw	r4,-1592(fp)
   31628:	e17e7315 	stw	r5,-1588(fp)
   3162c:	e0be7317 	ldw	r2,-1588(fp)
   31630:	1004d83a 	srl	r2,r2,zero
   31634:	e0bf3615 	stw	r2,-808(fp)
   31638:	e03f3715 	stw	zero,-804(fp)
   3163c:	e0bf3617 	ldw	r2,-808(fp)
   31640:	e0be7415 	stw	r2,-1584(fp)
   31644:	e0be7217 	ldw	r2,-1592(fp)
   31648:	e0be7515 	stw	r2,-1580(fp)
   3164c:	e0fe5f17 	ldw	r3,-1668(fp)
   31650:	e0be7517 	ldw	r2,-1580(fp)
   31654:	1885883a 	add	r2,r3,r2
   31658:	e0be5f15 	stw	r2,-1668(fp)
   3165c:	e0fe5f17 	ldw	r3,-1668(fp)
   31660:	e0be7517 	ldw	r2,-1580(fp)
   31664:	1880022e 	bgeu	r3,r2,31670 <secp256k1_scalar_sqr_512+0x73c>
   31668:	00c00044 	movi	r3,1
   3166c:	00000106 	br	31674 <secp256k1_scalar_sqr_512+0x740>
   31670:	0007883a 	mov	r3,zero
   31674:	e0be7417 	ldw	r2,-1584(fp)
   31678:	10c5883a 	add	r2,r2,r3
   3167c:	e0be7415 	stw	r2,-1584(fp)
   31680:	e0fe6017 	ldw	r3,-1664(fp)
   31684:	e0be7417 	ldw	r2,-1584(fp)
   31688:	1885883a 	add	r2,r3,r2
   3168c:	e0be6015 	stw	r2,-1664(fp)
   31690:	e0fe6017 	ldw	r3,-1664(fp)
   31694:	e0be7417 	ldw	r2,-1584(fp)
   31698:	1880022e 	bgeu	r3,r2,316a4 <secp256k1_scalar_sqr_512+0x770>
   3169c:	00c00044 	movi	r3,1
   316a0:	00000106 	br	316a8 <secp256k1_scalar_sqr_512+0x774>
   316a4:	0007883a 	mov	r3,zero
   316a8:	e0be6117 	ldw	r2,-1660(fp)
   316ac:	10c5883a 	add	r2,r2,r3
   316b0:	e0be6115 	stw	r2,-1660(fp)
   316b4:	e0fe6017 	ldw	r3,-1664(fp)
   316b8:	e0be7417 	ldw	r2,-1584(fp)
   316bc:	1885803a 	cmpltu	r2,r3,r2
   316c0:	10803fcc 	andi	r2,r2,255
   316c4:	10001126 	beq	r2,zero,3170c <secp256k1_scalar_sqr_512+0x7d8>
   316c8:	e0be6117 	ldw	r2,-1660(fp)
   316cc:	1005003a 	cmpeq	r2,r2,zero
   316d0:	10803fcc 	andi	r2,r2,255
   316d4:	10000d26 	beq	r2,zero,3170c <secp256k1_scalar_sqr_512+0x7d8>
   316d8:	d0a01617 	ldw	r2,-32680(gp)
   316dc:	10c00317 	ldw	r3,12(r2)
   316e0:	00800174 	movhi	r2,5
   316e4:	1096d604 	addi	r2,r2,23384
   316e8:	d8800015 	stw	r2,0(sp)
   316ec:	01c09344 	movi	r7,589
   316f0:	01800174 	movhi	r6,5
   316f4:	31964204 	addi	r6,r6,22792
   316f8:	01400174 	movhi	r5,5
   316fc:	2951e804 	addi	r5,r5,18336
   31700:	1809883a 	mov	r4,r3
   31704:	00461000 	call	46100 <fprintf>
   31708:	0045fd40 	call	45fd4 <abort>
    extract(l[2]);
   3170c:	e0bf2a17 	ldw	r2,-856(fp)
   31710:	10c00204 	addi	r3,r2,8
   31714:	e0be5f17 	ldw	r2,-1668(fp)
   31718:	18800015 	stw	r2,0(r3)
   3171c:	e0be6017 	ldw	r2,-1664(fp)
   31720:	e0be5f15 	stw	r2,-1668(fp)
   31724:	e0be6117 	ldw	r2,-1660(fp)
   31728:	e0be6015 	stw	r2,-1664(fp)
   3172c:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[3]);
   31730:	e0bf2b17 	ldw	r2,-852(fp)
   31734:	10800017 	ldw	r2,0(r2)
   31738:	e0bf3815 	stw	r2,-800(fp)
   3173c:	e03f3915 	stw	zero,-796(fp)
   31740:	e0bf2b17 	ldw	r2,-852(fp)
   31744:	10800317 	ldw	r2,12(r2)
   31748:	e0bf3a15 	stw	r2,-792(fp)
   3174c:	e03f3b15 	stw	zero,-788(fp)
   31750:	e1bf3a17 	ldw	r6,-792(fp)
   31754:	e1ff3b17 	ldw	r7,-788(fp)
   31758:	e13f3817 	ldw	r4,-800(fp)
   3175c:	e17f3917 	ldw	r5,-796(fp)
   31760:	00438e00 	call	438e0 <__muldi3>
   31764:	1009883a 	mov	r4,r2
   31768:	180b883a 	mov	r5,r3
   3176c:	e13e7615 	stw	r4,-1576(fp)
   31770:	e17e7715 	stw	r5,-1572(fp)
   31774:	e0be7717 	ldw	r2,-1572(fp)
   31778:	1004d83a 	srl	r2,r2,zero
   3177c:	e0bf3c15 	stw	r2,-784(fp)
   31780:	e03f3d15 	stw	zero,-780(fp)
   31784:	e0bf3c17 	ldw	r2,-784(fp)
   31788:	e0be7815 	stw	r2,-1568(fp)
   3178c:	e0be7617 	ldw	r2,-1576(fp)
   31790:	e0be7915 	stw	r2,-1564(fp)
   31794:	e0fe7817 	ldw	r3,-1568(fp)
   31798:	e0be7817 	ldw	r2,-1568(fp)
   3179c:	1885883a 	add	r2,r3,r2
   317a0:	e0be7a15 	stw	r2,-1560(fp)
   317a4:	e0fe7a17 	ldw	r3,-1560(fp)
   317a8:	e0be7817 	ldw	r2,-1568(fp)
   317ac:	1880022e 	bgeu	r3,r2,317b8 <secp256k1_scalar_sqr_512+0x884>
   317b0:	00c00044 	movi	r3,1
   317b4:	00000106 	br	317bc <secp256k1_scalar_sqr_512+0x888>
   317b8:	0007883a 	mov	r3,zero
   317bc:	e0be6117 	ldw	r2,-1660(fp)
   317c0:	10c5883a 	add	r2,r2,r3
   317c4:	e0be6115 	stw	r2,-1660(fp)
   317c8:	e0fe7a17 	ldw	r3,-1560(fp)
   317cc:	e0be7817 	ldw	r2,-1568(fp)
   317d0:	1885803a 	cmpltu	r2,r3,r2
   317d4:	10803fcc 	andi	r2,r2,255
   317d8:	10001126 	beq	r2,zero,31820 <secp256k1_scalar_sqr_512+0x8ec>
   317dc:	e0be6117 	ldw	r2,-1660(fp)
   317e0:	1005003a 	cmpeq	r2,r2,zero
   317e4:	10803fcc 	andi	r2,r2,255
   317e8:	10000d26 	beq	r2,zero,31820 <secp256k1_scalar_sqr_512+0x8ec>
   317ec:	d0a01617 	ldw	r2,-32680(gp)
   317f0:	10c00317 	ldw	r3,12(r2)
   317f4:	00800174 	movhi	r2,5
   317f8:	10972b04 	addi	r2,r2,23724
   317fc:	d8800015 	stw	r2,0(sp)
   31800:	01c093c4 	movi	r7,591
   31804:	01800174 	movhi	r6,5
   31808:	31964204 	addi	r6,r6,22792
   3180c:	01400174 	movhi	r5,5
   31810:	2951e804 	addi	r5,r5,18336
   31814:	1809883a 	mov	r4,r3
   31818:	00461000 	call	46100 <fprintf>
   3181c:	0045fd40 	call	45fd4 <abort>
   31820:	e0fe7917 	ldw	r3,-1564(fp)
   31824:	e0be7917 	ldw	r2,-1564(fp)
   31828:	1885883a 	add	r2,r3,r2
   3182c:	e0be7b15 	stw	r2,-1556(fp)
   31830:	e0fe7b17 	ldw	r3,-1556(fp)
   31834:	e0be7917 	ldw	r2,-1564(fp)
   31838:	1880022e 	bgeu	r3,r2,31844 <secp256k1_scalar_sqr_512+0x910>
   3183c:	00c00044 	movi	r3,1
   31840:	00000106 	br	31848 <secp256k1_scalar_sqr_512+0x914>
   31844:	0007883a 	mov	r3,zero
   31848:	e0be7a17 	ldw	r2,-1560(fp)
   3184c:	10c5883a 	add	r2,r2,r3
   31850:	e0be7a15 	stw	r2,-1560(fp)
   31854:	e0fe5f17 	ldw	r3,-1668(fp)
   31858:	e0be7b17 	ldw	r2,-1556(fp)
   3185c:	1885883a 	add	r2,r3,r2
   31860:	e0be5f15 	stw	r2,-1668(fp)
   31864:	e0fe5f17 	ldw	r3,-1668(fp)
   31868:	e0be7b17 	ldw	r2,-1556(fp)
   3186c:	1880022e 	bgeu	r3,r2,31878 <secp256k1_scalar_sqr_512+0x944>
   31870:	00c00044 	movi	r3,1
   31874:	00000106 	br	3187c <secp256k1_scalar_sqr_512+0x948>
   31878:	0007883a 	mov	r3,zero
   3187c:	e0be7a17 	ldw	r2,-1560(fp)
   31880:	10c5883a 	add	r2,r2,r3
   31884:	e0be7a15 	stw	r2,-1560(fp)
   31888:	e0fe5f17 	ldw	r3,-1668(fp)
   3188c:	e0be7b17 	ldw	r2,-1556(fp)
   31890:	1885803a 	cmpltu	r2,r3,r2
   31894:	1007883a 	mov	r3,r2
   31898:	e0be7a17 	ldw	r2,-1560(fp)
   3189c:	1005003a 	cmpeq	r2,r2,zero
   318a0:	1884703a 	and	r2,r3,r2
   318a4:	10c03fcc 	andi	r3,r2,255
   318a8:	e0be6117 	ldw	r2,-1660(fp)
   318ac:	10c5883a 	add	r2,r2,r3
   318b0:	e0be6115 	stw	r2,-1660(fp)
   318b4:	e0fe5f17 	ldw	r3,-1668(fp)
   318b8:	e0be7b17 	ldw	r2,-1556(fp)
   318bc:	1885803a 	cmpltu	r2,r3,r2
   318c0:	10803fcc 	andi	r2,r2,255
   318c4:	10000626 	beq	r2,zero,318e0 <secp256k1_scalar_sqr_512+0x9ac>
   318c8:	e0be7a17 	ldw	r2,-1560(fp)
   318cc:	1005003a 	cmpeq	r2,r2,zero
   318d0:	10803fcc 	andi	r2,r2,255
   318d4:	10000226 	beq	r2,zero,318e0 <secp256k1_scalar_sqr_512+0x9ac>
   318d8:	00800044 	movi	r2,1
   318dc:	00000106 	br	318e4 <secp256k1_scalar_sqr_512+0x9b0>
   318e0:	0005883a 	mov	r2,zero
   318e4:	10001126 	beq	r2,zero,3192c <secp256k1_scalar_sqr_512+0x9f8>
   318e8:	e0be6117 	ldw	r2,-1660(fp)
   318ec:	1005003a 	cmpeq	r2,r2,zero
   318f0:	10803fcc 	andi	r2,r2,255
   318f4:	10000d26 	beq	r2,zero,3192c <secp256k1_scalar_sqr_512+0x9f8>
   318f8:	d0a01617 	ldw	r2,-32680(gp)
   318fc:	10c00317 	ldw	r3,12(r2)
   31900:	00800174 	movhi	r2,5
   31904:	10973704 	addi	r2,r2,23772
   31908:	d8800015 	stw	r2,0(sp)
   3190c:	01c093c4 	movi	r7,591
   31910:	01800174 	movhi	r6,5
   31914:	31964204 	addi	r6,r6,22792
   31918:	01400174 	movhi	r5,5
   3191c:	2951e804 	addi	r5,r5,18336
   31920:	1809883a 	mov	r4,r3
   31924:	00461000 	call	46100 <fprintf>
   31928:	0045fd40 	call	45fd4 <abort>
   3192c:	e0fe6017 	ldw	r3,-1664(fp)
   31930:	e0be7a17 	ldw	r2,-1560(fp)
   31934:	1885883a 	add	r2,r3,r2
   31938:	e0be6015 	stw	r2,-1664(fp)
   3193c:	e0fe6017 	ldw	r3,-1664(fp)
   31940:	e0be7a17 	ldw	r2,-1560(fp)
   31944:	1880022e 	bgeu	r3,r2,31950 <secp256k1_scalar_sqr_512+0xa1c>
   31948:	00c00044 	movi	r3,1
   3194c:	00000106 	br	31954 <secp256k1_scalar_sqr_512+0xa20>
   31950:	0007883a 	mov	r3,zero
   31954:	e0be6117 	ldw	r2,-1660(fp)
   31958:	10c5883a 	add	r2,r2,r3
   3195c:	e0be6115 	stw	r2,-1660(fp)
   31960:	e0fe6017 	ldw	r3,-1664(fp)
   31964:	e0be7a17 	ldw	r2,-1560(fp)
   31968:	1885803a 	cmpltu	r2,r3,r2
   3196c:	10803fcc 	andi	r2,r2,255
   31970:	10001126 	beq	r2,zero,319b8 <secp256k1_scalar_sqr_512+0xa84>
   31974:	e0be6117 	ldw	r2,-1660(fp)
   31978:	1005003a 	cmpeq	r2,r2,zero
   3197c:	10803fcc 	andi	r2,r2,255
   31980:	10000d26 	beq	r2,zero,319b8 <secp256k1_scalar_sqr_512+0xa84>
   31984:	d0a01617 	ldw	r2,-32680(gp)
   31988:	10c00317 	ldw	r3,12(r2)
   3198c:	00800174 	movhi	r2,5
   31990:	10974704 	addi	r2,r2,23836
   31994:	d8800015 	stw	r2,0(sp)
   31998:	01c093c4 	movi	r7,591
   3199c:	01800174 	movhi	r6,5
   319a0:	31964204 	addi	r6,r6,22792
   319a4:	01400174 	movhi	r5,5
   319a8:	2951e804 	addi	r5,r5,18336
   319ac:	1809883a 	mov	r4,r3
   319b0:	00461000 	call	46100 <fprintf>
   319b4:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[1], a->d[2]);
   319b8:	e0bf2b17 	ldw	r2,-852(fp)
   319bc:	10800117 	ldw	r2,4(r2)
   319c0:	e0bf3e15 	stw	r2,-776(fp)
   319c4:	e03f3f15 	stw	zero,-772(fp)
   319c8:	e0bf2b17 	ldw	r2,-852(fp)
   319cc:	10800217 	ldw	r2,8(r2)
   319d0:	e0bf4015 	stw	r2,-768(fp)
   319d4:	e03f4115 	stw	zero,-764(fp)
   319d8:	e1bf4017 	ldw	r6,-768(fp)
   319dc:	e1ff4117 	ldw	r7,-764(fp)
   319e0:	e13f3e17 	ldw	r4,-776(fp)
   319e4:	e17f3f17 	ldw	r5,-772(fp)
   319e8:	00438e00 	call	438e0 <__muldi3>
   319ec:	1009883a 	mov	r4,r2
   319f0:	180b883a 	mov	r5,r3
   319f4:	e13e7c15 	stw	r4,-1552(fp)
   319f8:	e17e7d15 	stw	r5,-1548(fp)
   319fc:	e0be7d17 	ldw	r2,-1548(fp)
   31a00:	1004d83a 	srl	r2,r2,zero
   31a04:	e0bf4215 	stw	r2,-760(fp)
   31a08:	e03f4315 	stw	zero,-756(fp)
   31a0c:	e0bf4217 	ldw	r2,-760(fp)
   31a10:	e0be7e15 	stw	r2,-1544(fp)
   31a14:	e0be7c17 	ldw	r2,-1552(fp)
   31a18:	e0be7f15 	stw	r2,-1540(fp)
   31a1c:	e0fe7e17 	ldw	r3,-1544(fp)
   31a20:	e0be7e17 	ldw	r2,-1544(fp)
   31a24:	1885883a 	add	r2,r3,r2
   31a28:	e0be8015 	stw	r2,-1536(fp)
   31a2c:	e0fe8017 	ldw	r3,-1536(fp)
   31a30:	e0be7e17 	ldw	r2,-1544(fp)
   31a34:	1880022e 	bgeu	r3,r2,31a40 <secp256k1_scalar_sqr_512+0xb0c>
   31a38:	00c00044 	movi	r3,1
   31a3c:	00000106 	br	31a44 <secp256k1_scalar_sqr_512+0xb10>
   31a40:	0007883a 	mov	r3,zero
   31a44:	e0be6117 	ldw	r2,-1660(fp)
   31a48:	10c5883a 	add	r2,r2,r3
   31a4c:	e0be6115 	stw	r2,-1660(fp)
   31a50:	e0fe8017 	ldw	r3,-1536(fp)
   31a54:	e0be7e17 	ldw	r2,-1544(fp)
   31a58:	1885803a 	cmpltu	r2,r3,r2
   31a5c:	10803fcc 	andi	r2,r2,255
   31a60:	10001126 	beq	r2,zero,31aa8 <secp256k1_scalar_sqr_512+0xb74>
   31a64:	e0be6117 	ldw	r2,-1660(fp)
   31a68:	1005003a 	cmpeq	r2,r2,zero
   31a6c:	10803fcc 	andi	r2,r2,255
   31a70:	10000d26 	beq	r2,zero,31aa8 <secp256k1_scalar_sqr_512+0xb74>
   31a74:	d0a01617 	ldw	r2,-32680(gp)
   31a78:	10c00317 	ldw	r3,12(r2)
   31a7c:	00800174 	movhi	r2,5
   31a80:	10972b04 	addi	r2,r2,23724
   31a84:	d8800015 	stw	r2,0(sp)
   31a88:	01c09404 	movi	r7,592
   31a8c:	01800174 	movhi	r6,5
   31a90:	31964204 	addi	r6,r6,22792
   31a94:	01400174 	movhi	r5,5
   31a98:	2951e804 	addi	r5,r5,18336
   31a9c:	1809883a 	mov	r4,r3
   31aa0:	00461000 	call	46100 <fprintf>
   31aa4:	0045fd40 	call	45fd4 <abort>
   31aa8:	e0fe7f17 	ldw	r3,-1540(fp)
   31aac:	e0be7f17 	ldw	r2,-1540(fp)
   31ab0:	1885883a 	add	r2,r3,r2
   31ab4:	e0be8115 	stw	r2,-1532(fp)
   31ab8:	e0fe8117 	ldw	r3,-1532(fp)
   31abc:	e0be7f17 	ldw	r2,-1540(fp)
   31ac0:	1880022e 	bgeu	r3,r2,31acc <secp256k1_scalar_sqr_512+0xb98>
   31ac4:	00c00044 	movi	r3,1
   31ac8:	00000106 	br	31ad0 <secp256k1_scalar_sqr_512+0xb9c>
   31acc:	0007883a 	mov	r3,zero
   31ad0:	e0be8017 	ldw	r2,-1536(fp)
   31ad4:	10c5883a 	add	r2,r2,r3
   31ad8:	e0be8015 	stw	r2,-1536(fp)
   31adc:	e0fe5f17 	ldw	r3,-1668(fp)
   31ae0:	e0be8117 	ldw	r2,-1532(fp)
   31ae4:	1885883a 	add	r2,r3,r2
   31ae8:	e0be5f15 	stw	r2,-1668(fp)
   31aec:	e0fe5f17 	ldw	r3,-1668(fp)
   31af0:	e0be8117 	ldw	r2,-1532(fp)
   31af4:	1880022e 	bgeu	r3,r2,31b00 <secp256k1_scalar_sqr_512+0xbcc>
   31af8:	00c00044 	movi	r3,1
   31afc:	00000106 	br	31b04 <secp256k1_scalar_sqr_512+0xbd0>
   31b00:	0007883a 	mov	r3,zero
   31b04:	e0be8017 	ldw	r2,-1536(fp)
   31b08:	10c5883a 	add	r2,r2,r3
   31b0c:	e0be8015 	stw	r2,-1536(fp)
   31b10:	e0fe5f17 	ldw	r3,-1668(fp)
   31b14:	e0be8117 	ldw	r2,-1532(fp)
   31b18:	1885803a 	cmpltu	r2,r3,r2
   31b1c:	1007883a 	mov	r3,r2
   31b20:	e0be8017 	ldw	r2,-1536(fp)
   31b24:	1005003a 	cmpeq	r2,r2,zero
   31b28:	1884703a 	and	r2,r3,r2
   31b2c:	10c03fcc 	andi	r3,r2,255
   31b30:	e0be6117 	ldw	r2,-1660(fp)
   31b34:	10c5883a 	add	r2,r2,r3
   31b38:	e0be6115 	stw	r2,-1660(fp)
   31b3c:	e0fe5f17 	ldw	r3,-1668(fp)
   31b40:	e0be8117 	ldw	r2,-1532(fp)
   31b44:	1885803a 	cmpltu	r2,r3,r2
   31b48:	10803fcc 	andi	r2,r2,255
   31b4c:	10000626 	beq	r2,zero,31b68 <secp256k1_scalar_sqr_512+0xc34>
   31b50:	e0be8017 	ldw	r2,-1536(fp)
   31b54:	1005003a 	cmpeq	r2,r2,zero
   31b58:	10803fcc 	andi	r2,r2,255
   31b5c:	10000226 	beq	r2,zero,31b68 <secp256k1_scalar_sqr_512+0xc34>
   31b60:	00800044 	movi	r2,1
   31b64:	00000106 	br	31b6c <secp256k1_scalar_sqr_512+0xc38>
   31b68:	0005883a 	mov	r2,zero
   31b6c:	10001126 	beq	r2,zero,31bb4 <secp256k1_scalar_sqr_512+0xc80>
   31b70:	e0be6117 	ldw	r2,-1660(fp)
   31b74:	1005003a 	cmpeq	r2,r2,zero
   31b78:	10803fcc 	andi	r2,r2,255
   31b7c:	10000d26 	beq	r2,zero,31bb4 <secp256k1_scalar_sqr_512+0xc80>
   31b80:	d0a01617 	ldw	r2,-32680(gp)
   31b84:	10c00317 	ldw	r3,12(r2)
   31b88:	00800174 	movhi	r2,5
   31b8c:	10973704 	addi	r2,r2,23772
   31b90:	d8800015 	stw	r2,0(sp)
   31b94:	01c09404 	movi	r7,592
   31b98:	01800174 	movhi	r6,5
   31b9c:	31964204 	addi	r6,r6,22792
   31ba0:	01400174 	movhi	r5,5
   31ba4:	2951e804 	addi	r5,r5,18336
   31ba8:	1809883a 	mov	r4,r3
   31bac:	00461000 	call	46100 <fprintf>
   31bb0:	0045fd40 	call	45fd4 <abort>
   31bb4:	e0fe6017 	ldw	r3,-1664(fp)
   31bb8:	e0be8017 	ldw	r2,-1536(fp)
   31bbc:	1885883a 	add	r2,r3,r2
   31bc0:	e0be6015 	stw	r2,-1664(fp)
   31bc4:	e0fe6017 	ldw	r3,-1664(fp)
   31bc8:	e0be8017 	ldw	r2,-1536(fp)
   31bcc:	1880022e 	bgeu	r3,r2,31bd8 <secp256k1_scalar_sqr_512+0xca4>
   31bd0:	00c00044 	movi	r3,1
   31bd4:	00000106 	br	31bdc <secp256k1_scalar_sqr_512+0xca8>
   31bd8:	0007883a 	mov	r3,zero
   31bdc:	e0be6117 	ldw	r2,-1660(fp)
   31be0:	10c5883a 	add	r2,r2,r3
   31be4:	e0be6115 	stw	r2,-1660(fp)
   31be8:	e0fe6017 	ldw	r3,-1664(fp)
   31bec:	e0be8017 	ldw	r2,-1536(fp)
   31bf0:	1885803a 	cmpltu	r2,r3,r2
   31bf4:	10803fcc 	andi	r2,r2,255
   31bf8:	10001126 	beq	r2,zero,31c40 <secp256k1_scalar_sqr_512+0xd0c>
   31bfc:	e0be6117 	ldw	r2,-1660(fp)
   31c00:	1005003a 	cmpeq	r2,r2,zero
   31c04:	10803fcc 	andi	r2,r2,255
   31c08:	10000d26 	beq	r2,zero,31c40 <secp256k1_scalar_sqr_512+0xd0c>
   31c0c:	d0a01617 	ldw	r2,-32680(gp)
   31c10:	10c00317 	ldw	r3,12(r2)
   31c14:	00800174 	movhi	r2,5
   31c18:	10974704 	addi	r2,r2,23836
   31c1c:	d8800015 	stw	r2,0(sp)
   31c20:	01c09404 	movi	r7,592
   31c24:	01800174 	movhi	r6,5
   31c28:	31964204 	addi	r6,r6,22792
   31c2c:	01400174 	movhi	r5,5
   31c30:	2951e804 	addi	r5,r5,18336
   31c34:	1809883a 	mov	r4,r3
   31c38:	00461000 	call	46100 <fprintf>
   31c3c:	0045fd40 	call	45fd4 <abort>
    extract(l[3]);
   31c40:	e0bf2a17 	ldw	r2,-856(fp)
   31c44:	10c00304 	addi	r3,r2,12
   31c48:	e0be5f17 	ldw	r2,-1668(fp)
   31c4c:	18800015 	stw	r2,0(r3)
   31c50:	e0be6017 	ldw	r2,-1664(fp)
   31c54:	e0be5f15 	stw	r2,-1668(fp)
   31c58:	e0be6117 	ldw	r2,-1660(fp)
   31c5c:	e0be6015 	stw	r2,-1664(fp)
   31c60:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[4]);
   31c64:	e0bf2b17 	ldw	r2,-852(fp)
   31c68:	10800017 	ldw	r2,0(r2)
   31c6c:	e0bf4415 	stw	r2,-752(fp)
   31c70:	e03f4515 	stw	zero,-748(fp)
   31c74:	e0bf2b17 	ldw	r2,-852(fp)
   31c78:	10800417 	ldw	r2,16(r2)
   31c7c:	e0bf4615 	stw	r2,-744(fp)
   31c80:	e03f4715 	stw	zero,-740(fp)
   31c84:	e1bf4617 	ldw	r6,-744(fp)
   31c88:	e1ff4717 	ldw	r7,-740(fp)
   31c8c:	e13f4417 	ldw	r4,-752(fp)
   31c90:	e17f4517 	ldw	r5,-748(fp)
   31c94:	00438e00 	call	438e0 <__muldi3>
   31c98:	1009883a 	mov	r4,r2
   31c9c:	180b883a 	mov	r5,r3
   31ca0:	e13e8215 	stw	r4,-1528(fp)
   31ca4:	e17e8315 	stw	r5,-1524(fp)
   31ca8:	e0be8317 	ldw	r2,-1524(fp)
   31cac:	1004d83a 	srl	r2,r2,zero
   31cb0:	e0bf4815 	stw	r2,-736(fp)
   31cb4:	e03f4915 	stw	zero,-732(fp)
   31cb8:	e0bf4817 	ldw	r2,-736(fp)
   31cbc:	e0be8415 	stw	r2,-1520(fp)
   31cc0:	e0be8217 	ldw	r2,-1528(fp)
   31cc4:	e0be8515 	stw	r2,-1516(fp)
   31cc8:	e0fe8417 	ldw	r3,-1520(fp)
   31ccc:	e0be8417 	ldw	r2,-1520(fp)
   31cd0:	1885883a 	add	r2,r3,r2
   31cd4:	e0be8615 	stw	r2,-1512(fp)
   31cd8:	e0fe8617 	ldw	r3,-1512(fp)
   31cdc:	e0be8417 	ldw	r2,-1520(fp)
   31ce0:	1880022e 	bgeu	r3,r2,31cec <secp256k1_scalar_sqr_512+0xdb8>
   31ce4:	00c00044 	movi	r3,1
   31ce8:	00000106 	br	31cf0 <secp256k1_scalar_sqr_512+0xdbc>
   31cec:	0007883a 	mov	r3,zero
   31cf0:	e0be6117 	ldw	r2,-1660(fp)
   31cf4:	10c5883a 	add	r2,r2,r3
   31cf8:	e0be6115 	stw	r2,-1660(fp)
   31cfc:	e0fe8617 	ldw	r3,-1512(fp)
   31d00:	e0be8417 	ldw	r2,-1520(fp)
   31d04:	1885803a 	cmpltu	r2,r3,r2
   31d08:	10803fcc 	andi	r2,r2,255
   31d0c:	10001126 	beq	r2,zero,31d54 <secp256k1_scalar_sqr_512+0xe20>
   31d10:	e0be6117 	ldw	r2,-1660(fp)
   31d14:	1005003a 	cmpeq	r2,r2,zero
   31d18:	10803fcc 	andi	r2,r2,255
   31d1c:	10000d26 	beq	r2,zero,31d54 <secp256k1_scalar_sqr_512+0xe20>
   31d20:	d0a01617 	ldw	r2,-32680(gp)
   31d24:	10c00317 	ldw	r3,12(r2)
   31d28:	00800174 	movhi	r2,5
   31d2c:	10972b04 	addi	r2,r2,23724
   31d30:	d8800015 	stw	r2,0(sp)
   31d34:	01c09484 	movi	r7,594
   31d38:	01800174 	movhi	r6,5
   31d3c:	31964204 	addi	r6,r6,22792
   31d40:	01400174 	movhi	r5,5
   31d44:	2951e804 	addi	r5,r5,18336
   31d48:	1809883a 	mov	r4,r3
   31d4c:	00461000 	call	46100 <fprintf>
   31d50:	0045fd40 	call	45fd4 <abort>
   31d54:	e0fe8517 	ldw	r3,-1516(fp)
   31d58:	e0be8517 	ldw	r2,-1516(fp)
   31d5c:	1885883a 	add	r2,r3,r2
   31d60:	e0be8715 	stw	r2,-1508(fp)
   31d64:	e0fe8717 	ldw	r3,-1508(fp)
   31d68:	e0be8517 	ldw	r2,-1516(fp)
   31d6c:	1880022e 	bgeu	r3,r2,31d78 <secp256k1_scalar_sqr_512+0xe44>
   31d70:	00c00044 	movi	r3,1
   31d74:	00000106 	br	31d7c <secp256k1_scalar_sqr_512+0xe48>
   31d78:	0007883a 	mov	r3,zero
   31d7c:	e0be8617 	ldw	r2,-1512(fp)
   31d80:	10c5883a 	add	r2,r2,r3
   31d84:	e0be8615 	stw	r2,-1512(fp)
   31d88:	e0fe5f17 	ldw	r3,-1668(fp)
   31d8c:	e0be8717 	ldw	r2,-1508(fp)
   31d90:	1885883a 	add	r2,r3,r2
   31d94:	e0be5f15 	stw	r2,-1668(fp)
   31d98:	e0fe5f17 	ldw	r3,-1668(fp)
   31d9c:	e0be8717 	ldw	r2,-1508(fp)
   31da0:	1880022e 	bgeu	r3,r2,31dac <secp256k1_scalar_sqr_512+0xe78>
   31da4:	00c00044 	movi	r3,1
   31da8:	00000106 	br	31db0 <secp256k1_scalar_sqr_512+0xe7c>
   31dac:	0007883a 	mov	r3,zero
   31db0:	e0be8617 	ldw	r2,-1512(fp)
   31db4:	10c5883a 	add	r2,r2,r3
   31db8:	e0be8615 	stw	r2,-1512(fp)
   31dbc:	e0fe5f17 	ldw	r3,-1668(fp)
   31dc0:	e0be8717 	ldw	r2,-1508(fp)
   31dc4:	1885803a 	cmpltu	r2,r3,r2
   31dc8:	1007883a 	mov	r3,r2
   31dcc:	e0be8617 	ldw	r2,-1512(fp)
   31dd0:	1005003a 	cmpeq	r2,r2,zero
   31dd4:	1884703a 	and	r2,r3,r2
   31dd8:	10c03fcc 	andi	r3,r2,255
   31ddc:	e0be6117 	ldw	r2,-1660(fp)
   31de0:	10c5883a 	add	r2,r2,r3
   31de4:	e0be6115 	stw	r2,-1660(fp)
   31de8:	e0fe5f17 	ldw	r3,-1668(fp)
   31dec:	e0be8717 	ldw	r2,-1508(fp)
   31df0:	1885803a 	cmpltu	r2,r3,r2
   31df4:	10803fcc 	andi	r2,r2,255
   31df8:	10000626 	beq	r2,zero,31e14 <secp256k1_scalar_sqr_512+0xee0>
   31dfc:	e0be8617 	ldw	r2,-1512(fp)
   31e00:	1005003a 	cmpeq	r2,r2,zero
   31e04:	10803fcc 	andi	r2,r2,255
   31e08:	10000226 	beq	r2,zero,31e14 <secp256k1_scalar_sqr_512+0xee0>
   31e0c:	00800044 	movi	r2,1
   31e10:	00000106 	br	31e18 <secp256k1_scalar_sqr_512+0xee4>
   31e14:	0005883a 	mov	r2,zero
   31e18:	10001126 	beq	r2,zero,31e60 <secp256k1_scalar_sqr_512+0xf2c>
   31e1c:	e0be6117 	ldw	r2,-1660(fp)
   31e20:	1005003a 	cmpeq	r2,r2,zero
   31e24:	10803fcc 	andi	r2,r2,255
   31e28:	10000d26 	beq	r2,zero,31e60 <secp256k1_scalar_sqr_512+0xf2c>
   31e2c:	d0a01617 	ldw	r2,-32680(gp)
   31e30:	10c00317 	ldw	r3,12(r2)
   31e34:	00800174 	movhi	r2,5
   31e38:	10973704 	addi	r2,r2,23772
   31e3c:	d8800015 	stw	r2,0(sp)
   31e40:	01c09484 	movi	r7,594
   31e44:	01800174 	movhi	r6,5
   31e48:	31964204 	addi	r6,r6,22792
   31e4c:	01400174 	movhi	r5,5
   31e50:	2951e804 	addi	r5,r5,18336
   31e54:	1809883a 	mov	r4,r3
   31e58:	00461000 	call	46100 <fprintf>
   31e5c:	0045fd40 	call	45fd4 <abort>
   31e60:	e0fe6017 	ldw	r3,-1664(fp)
   31e64:	e0be8617 	ldw	r2,-1512(fp)
   31e68:	1885883a 	add	r2,r3,r2
   31e6c:	e0be6015 	stw	r2,-1664(fp)
   31e70:	e0fe6017 	ldw	r3,-1664(fp)
   31e74:	e0be8617 	ldw	r2,-1512(fp)
   31e78:	1880022e 	bgeu	r3,r2,31e84 <secp256k1_scalar_sqr_512+0xf50>
   31e7c:	00c00044 	movi	r3,1
   31e80:	00000106 	br	31e88 <secp256k1_scalar_sqr_512+0xf54>
   31e84:	0007883a 	mov	r3,zero
   31e88:	e0be6117 	ldw	r2,-1660(fp)
   31e8c:	10c5883a 	add	r2,r2,r3
   31e90:	e0be6115 	stw	r2,-1660(fp)
   31e94:	e0fe6017 	ldw	r3,-1664(fp)
   31e98:	e0be8617 	ldw	r2,-1512(fp)
   31e9c:	1885803a 	cmpltu	r2,r3,r2
   31ea0:	10803fcc 	andi	r2,r2,255
   31ea4:	10001126 	beq	r2,zero,31eec <secp256k1_scalar_sqr_512+0xfb8>
   31ea8:	e0be6117 	ldw	r2,-1660(fp)
   31eac:	1005003a 	cmpeq	r2,r2,zero
   31eb0:	10803fcc 	andi	r2,r2,255
   31eb4:	10000d26 	beq	r2,zero,31eec <secp256k1_scalar_sqr_512+0xfb8>
   31eb8:	d0a01617 	ldw	r2,-32680(gp)
   31ebc:	10c00317 	ldw	r3,12(r2)
   31ec0:	00800174 	movhi	r2,5
   31ec4:	10974704 	addi	r2,r2,23836
   31ec8:	d8800015 	stw	r2,0(sp)
   31ecc:	01c09484 	movi	r7,594
   31ed0:	01800174 	movhi	r6,5
   31ed4:	31964204 	addi	r6,r6,22792
   31ed8:	01400174 	movhi	r5,5
   31edc:	2951e804 	addi	r5,r5,18336
   31ee0:	1809883a 	mov	r4,r3
   31ee4:	00461000 	call	46100 <fprintf>
   31ee8:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[1], a->d[3]);
   31eec:	e0bf2b17 	ldw	r2,-852(fp)
   31ef0:	10800117 	ldw	r2,4(r2)
   31ef4:	e0bf4a15 	stw	r2,-728(fp)
   31ef8:	e03f4b15 	stw	zero,-724(fp)
   31efc:	e0bf2b17 	ldw	r2,-852(fp)
   31f00:	10800317 	ldw	r2,12(r2)
   31f04:	e0bf4c15 	stw	r2,-720(fp)
   31f08:	e03f4d15 	stw	zero,-716(fp)
   31f0c:	e1bf4c17 	ldw	r6,-720(fp)
   31f10:	e1ff4d17 	ldw	r7,-716(fp)
   31f14:	e13f4a17 	ldw	r4,-728(fp)
   31f18:	e17f4b17 	ldw	r5,-724(fp)
   31f1c:	00438e00 	call	438e0 <__muldi3>
   31f20:	1009883a 	mov	r4,r2
   31f24:	180b883a 	mov	r5,r3
   31f28:	e13e8815 	stw	r4,-1504(fp)
   31f2c:	e17e8915 	stw	r5,-1500(fp)
   31f30:	e0be8917 	ldw	r2,-1500(fp)
   31f34:	1004d83a 	srl	r2,r2,zero
   31f38:	e0bf4e15 	stw	r2,-712(fp)
   31f3c:	e03f4f15 	stw	zero,-708(fp)
   31f40:	e0bf4e17 	ldw	r2,-712(fp)
   31f44:	e0be8a15 	stw	r2,-1496(fp)
   31f48:	e0be8817 	ldw	r2,-1504(fp)
   31f4c:	e0be8b15 	stw	r2,-1492(fp)
   31f50:	e0fe8a17 	ldw	r3,-1496(fp)
   31f54:	e0be8a17 	ldw	r2,-1496(fp)
   31f58:	1885883a 	add	r2,r3,r2
   31f5c:	e0be8c15 	stw	r2,-1488(fp)
   31f60:	e0fe8c17 	ldw	r3,-1488(fp)
   31f64:	e0be8a17 	ldw	r2,-1496(fp)
   31f68:	1880022e 	bgeu	r3,r2,31f74 <secp256k1_scalar_sqr_512+0x1040>
   31f6c:	00c00044 	movi	r3,1
   31f70:	00000106 	br	31f78 <secp256k1_scalar_sqr_512+0x1044>
   31f74:	0007883a 	mov	r3,zero
   31f78:	e0be6117 	ldw	r2,-1660(fp)
   31f7c:	10c5883a 	add	r2,r2,r3
   31f80:	e0be6115 	stw	r2,-1660(fp)
   31f84:	e0fe8c17 	ldw	r3,-1488(fp)
   31f88:	e0be8a17 	ldw	r2,-1496(fp)
   31f8c:	1885803a 	cmpltu	r2,r3,r2
   31f90:	10803fcc 	andi	r2,r2,255
   31f94:	10001126 	beq	r2,zero,31fdc <secp256k1_scalar_sqr_512+0x10a8>
   31f98:	e0be6117 	ldw	r2,-1660(fp)
   31f9c:	1005003a 	cmpeq	r2,r2,zero
   31fa0:	10803fcc 	andi	r2,r2,255
   31fa4:	10000d26 	beq	r2,zero,31fdc <secp256k1_scalar_sqr_512+0x10a8>
   31fa8:	d0a01617 	ldw	r2,-32680(gp)
   31fac:	10c00317 	ldw	r3,12(r2)
   31fb0:	00800174 	movhi	r2,5
   31fb4:	10972b04 	addi	r2,r2,23724
   31fb8:	d8800015 	stw	r2,0(sp)
   31fbc:	01c094c4 	movi	r7,595
   31fc0:	01800174 	movhi	r6,5
   31fc4:	31964204 	addi	r6,r6,22792
   31fc8:	01400174 	movhi	r5,5
   31fcc:	2951e804 	addi	r5,r5,18336
   31fd0:	1809883a 	mov	r4,r3
   31fd4:	00461000 	call	46100 <fprintf>
   31fd8:	0045fd40 	call	45fd4 <abort>
   31fdc:	e0fe8b17 	ldw	r3,-1492(fp)
   31fe0:	e0be8b17 	ldw	r2,-1492(fp)
   31fe4:	1885883a 	add	r2,r3,r2
   31fe8:	e0be8d15 	stw	r2,-1484(fp)
   31fec:	e0fe8d17 	ldw	r3,-1484(fp)
   31ff0:	e0be8b17 	ldw	r2,-1492(fp)
   31ff4:	1880022e 	bgeu	r3,r2,32000 <secp256k1_scalar_sqr_512+0x10cc>
   31ff8:	00c00044 	movi	r3,1
   31ffc:	00000106 	br	32004 <secp256k1_scalar_sqr_512+0x10d0>
   32000:	0007883a 	mov	r3,zero
   32004:	e0be8c17 	ldw	r2,-1488(fp)
   32008:	10c5883a 	add	r2,r2,r3
   3200c:	e0be8c15 	stw	r2,-1488(fp)
   32010:	e0fe5f17 	ldw	r3,-1668(fp)
   32014:	e0be8d17 	ldw	r2,-1484(fp)
   32018:	1885883a 	add	r2,r3,r2
   3201c:	e0be5f15 	stw	r2,-1668(fp)
   32020:	e0fe5f17 	ldw	r3,-1668(fp)
   32024:	e0be8d17 	ldw	r2,-1484(fp)
   32028:	1880022e 	bgeu	r3,r2,32034 <secp256k1_scalar_sqr_512+0x1100>
   3202c:	00c00044 	movi	r3,1
   32030:	00000106 	br	32038 <secp256k1_scalar_sqr_512+0x1104>
   32034:	0007883a 	mov	r3,zero
   32038:	e0be8c17 	ldw	r2,-1488(fp)
   3203c:	10c5883a 	add	r2,r2,r3
   32040:	e0be8c15 	stw	r2,-1488(fp)
   32044:	e0fe5f17 	ldw	r3,-1668(fp)
   32048:	e0be8d17 	ldw	r2,-1484(fp)
   3204c:	1885803a 	cmpltu	r2,r3,r2
   32050:	1007883a 	mov	r3,r2
   32054:	e0be8c17 	ldw	r2,-1488(fp)
   32058:	1005003a 	cmpeq	r2,r2,zero
   3205c:	1884703a 	and	r2,r3,r2
   32060:	10c03fcc 	andi	r3,r2,255
   32064:	e0be6117 	ldw	r2,-1660(fp)
   32068:	10c5883a 	add	r2,r2,r3
   3206c:	e0be6115 	stw	r2,-1660(fp)
   32070:	e0fe5f17 	ldw	r3,-1668(fp)
   32074:	e0be8d17 	ldw	r2,-1484(fp)
   32078:	1885803a 	cmpltu	r2,r3,r2
   3207c:	10803fcc 	andi	r2,r2,255
   32080:	10000626 	beq	r2,zero,3209c <secp256k1_scalar_sqr_512+0x1168>
   32084:	e0be8c17 	ldw	r2,-1488(fp)
   32088:	1005003a 	cmpeq	r2,r2,zero
   3208c:	10803fcc 	andi	r2,r2,255
   32090:	10000226 	beq	r2,zero,3209c <secp256k1_scalar_sqr_512+0x1168>
   32094:	00800044 	movi	r2,1
   32098:	00000106 	br	320a0 <secp256k1_scalar_sqr_512+0x116c>
   3209c:	0005883a 	mov	r2,zero
   320a0:	10001126 	beq	r2,zero,320e8 <secp256k1_scalar_sqr_512+0x11b4>
   320a4:	e0be6117 	ldw	r2,-1660(fp)
   320a8:	1005003a 	cmpeq	r2,r2,zero
   320ac:	10803fcc 	andi	r2,r2,255
   320b0:	10000d26 	beq	r2,zero,320e8 <secp256k1_scalar_sqr_512+0x11b4>
   320b4:	d0a01617 	ldw	r2,-32680(gp)
   320b8:	10c00317 	ldw	r3,12(r2)
   320bc:	00800174 	movhi	r2,5
   320c0:	10973704 	addi	r2,r2,23772
   320c4:	d8800015 	stw	r2,0(sp)
   320c8:	01c094c4 	movi	r7,595
   320cc:	01800174 	movhi	r6,5
   320d0:	31964204 	addi	r6,r6,22792
   320d4:	01400174 	movhi	r5,5
   320d8:	2951e804 	addi	r5,r5,18336
   320dc:	1809883a 	mov	r4,r3
   320e0:	00461000 	call	46100 <fprintf>
   320e4:	0045fd40 	call	45fd4 <abort>
   320e8:	e0fe6017 	ldw	r3,-1664(fp)
   320ec:	e0be8c17 	ldw	r2,-1488(fp)
   320f0:	1885883a 	add	r2,r3,r2
   320f4:	e0be6015 	stw	r2,-1664(fp)
   320f8:	e0fe6017 	ldw	r3,-1664(fp)
   320fc:	e0be8c17 	ldw	r2,-1488(fp)
   32100:	1880022e 	bgeu	r3,r2,3210c <secp256k1_scalar_sqr_512+0x11d8>
   32104:	00c00044 	movi	r3,1
   32108:	00000106 	br	32110 <secp256k1_scalar_sqr_512+0x11dc>
   3210c:	0007883a 	mov	r3,zero
   32110:	e0be6117 	ldw	r2,-1660(fp)
   32114:	10c5883a 	add	r2,r2,r3
   32118:	e0be6115 	stw	r2,-1660(fp)
   3211c:	e0fe6017 	ldw	r3,-1664(fp)
   32120:	e0be8c17 	ldw	r2,-1488(fp)
   32124:	1885803a 	cmpltu	r2,r3,r2
   32128:	10803fcc 	andi	r2,r2,255
   3212c:	10001126 	beq	r2,zero,32174 <secp256k1_scalar_sqr_512+0x1240>
   32130:	e0be6117 	ldw	r2,-1660(fp)
   32134:	1005003a 	cmpeq	r2,r2,zero
   32138:	10803fcc 	andi	r2,r2,255
   3213c:	10000d26 	beq	r2,zero,32174 <secp256k1_scalar_sqr_512+0x1240>
   32140:	d0a01617 	ldw	r2,-32680(gp)
   32144:	10c00317 	ldw	r3,12(r2)
   32148:	00800174 	movhi	r2,5
   3214c:	10974704 	addi	r2,r2,23836
   32150:	d8800015 	stw	r2,0(sp)
   32154:	01c094c4 	movi	r7,595
   32158:	01800174 	movhi	r6,5
   3215c:	31964204 	addi	r6,r6,22792
   32160:	01400174 	movhi	r5,5
   32164:	2951e804 	addi	r5,r5,18336
   32168:	1809883a 	mov	r4,r3
   3216c:	00461000 	call	46100 <fprintf>
   32170:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[2], a->d[2]);
   32174:	e0bf2b17 	ldw	r2,-852(fp)
   32178:	10800217 	ldw	r2,8(r2)
   3217c:	e0bf5015 	stw	r2,-704(fp)
   32180:	e03f5115 	stw	zero,-700(fp)
   32184:	e0bf2b17 	ldw	r2,-852(fp)
   32188:	10800217 	ldw	r2,8(r2)
   3218c:	e0bf5215 	stw	r2,-696(fp)
   32190:	e03f5315 	stw	zero,-692(fp)
   32194:	e1bf5217 	ldw	r6,-696(fp)
   32198:	e1ff5317 	ldw	r7,-692(fp)
   3219c:	e13f5017 	ldw	r4,-704(fp)
   321a0:	e17f5117 	ldw	r5,-700(fp)
   321a4:	00438e00 	call	438e0 <__muldi3>
   321a8:	1009883a 	mov	r4,r2
   321ac:	180b883a 	mov	r5,r3
   321b0:	e13e8e15 	stw	r4,-1480(fp)
   321b4:	e17e8f15 	stw	r5,-1476(fp)
   321b8:	e0be8f17 	ldw	r2,-1476(fp)
   321bc:	1004d83a 	srl	r2,r2,zero
   321c0:	e0bf5415 	stw	r2,-688(fp)
   321c4:	e03f5515 	stw	zero,-684(fp)
   321c8:	e0bf5417 	ldw	r2,-688(fp)
   321cc:	e0be9015 	stw	r2,-1472(fp)
   321d0:	e0be8e17 	ldw	r2,-1480(fp)
   321d4:	e0be9115 	stw	r2,-1468(fp)
   321d8:	e0fe5f17 	ldw	r3,-1668(fp)
   321dc:	e0be9117 	ldw	r2,-1468(fp)
   321e0:	1885883a 	add	r2,r3,r2
   321e4:	e0be5f15 	stw	r2,-1668(fp)
   321e8:	e0fe5f17 	ldw	r3,-1668(fp)
   321ec:	e0be9117 	ldw	r2,-1468(fp)
   321f0:	1880022e 	bgeu	r3,r2,321fc <secp256k1_scalar_sqr_512+0x12c8>
   321f4:	00c00044 	movi	r3,1
   321f8:	00000106 	br	32200 <secp256k1_scalar_sqr_512+0x12cc>
   321fc:	0007883a 	mov	r3,zero
   32200:	e0be9017 	ldw	r2,-1472(fp)
   32204:	10c5883a 	add	r2,r2,r3
   32208:	e0be9015 	stw	r2,-1472(fp)
   3220c:	e0fe6017 	ldw	r3,-1664(fp)
   32210:	e0be9017 	ldw	r2,-1472(fp)
   32214:	1885883a 	add	r2,r3,r2
   32218:	e0be6015 	stw	r2,-1664(fp)
   3221c:	e0fe6017 	ldw	r3,-1664(fp)
   32220:	e0be9017 	ldw	r2,-1472(fp)
   32224:	1880022e 	bgeu	r3,r2,32230 <secp256k1_scalar_sqr_512+0x12fc>
   32228:	00c00044 	movi	r3,1
   3222c:	00000106 	br	32234 <secp256k1_scalar_sqr_512+0x1300>
   32230:	0007883a 	mov	r3,zero
   32234:	e0be6117 	ldw	r2,-1660(fp)
   32238:	10c5883a 	add	r2,r2,r3
   3223c:	e0be6115 	stw	r2,-1660(fp)
   32240:	e0fe6017 	ldw	r3,-1664(fp)
   32244:	e0be9017 	ldw	r2,-1472(fp)
   32248:	1885803a 	cmpltu	r2,r3,r2
   3224c:	10803fcc 	andi	r2,r2,255
   32250:	10001126 	beq	r2,zero,32298 <secp256k1_scalar_sqr_512+0x1364>
   32254:	e0be6117 	ldw	r2,-1660(fp)
   32258:	1005003a 	cmpeq	r2,r2,zero
   3225c:	10803fcc 	andi	r2,r2,255
   32260:	10000d26 	beq	r2,zero,32298 <secp256k1_scalar_sqr_512+0x1364>
   32264:	d0a01617 	ldw	r2,-32680(gp)
   32268:	10c00317 	ldw	r3,12(r2)
   3226c:	00800174 	movhi	r2,5
   32270:	1096d604 	addi	r2,r2,23384
   32274:	d8800015 	stw	r2,0(sp)
   32278:	01c09504 	movi	r7,596
   3227c:	01800174 	movhi	r6,5
   32280:	31964204 	addi	r6,r6,22792
   32284:	01400174 	movhi	r5,5
   32288:	2951e804 	addi	r5,r5,18336
   3228c:	1809883a 	mov	r4,r3
   32290:	00461000 	call	46100 <fprintf>
   32294:	0045fd40 	call	45fd4 <abort>
    extract(l[4]);
   32298:	e0bf2a17 	ldw	r2,-856(fp)
   3229c:	10c00404 	addi	r3,r2,16
   322a0:	e0be5f17 	ldw	r2,-1668(fp)
   322a4:	18800015 	stw	r2,0(r3)
   322a8:	e0be6017 	ldw	r2,-1664(fp)
   322ac:	e0be5f15 	stw	r2,-1668(fp)
   322b0:	e0be6117 	ldw	r2,-1660(fp)
   322b4:	e0be6015 	stw	r2,-1664(fp)
   322b8:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[5]);
   322bc:	e0bf2b17 	ldw	r2,-852(fp)
   322c0:	10800017 	ldw	r2,0(r2)
   322c4:	e0bf5615 	stw	r2,-680(fp)
   322c8:	e03f5715 	stw	zero,-676(fp)
   322cc:	e0bf2b17 	ldw	r2,-852(fp)
   322d0:	10800517 	ldw	r2,20(r2)
   322d4:	e0bf5815 	stw	r2,-672(fp)
   322d8:	e03f5915 	stw	zero,-668(fp)
   322dc:	e1bf5817 	ldw	r6,-672(fp)
   322e0:	e1ff5917 	ldw	r7,-668(fp)
   322e4:	e13f5617 	ldw	r4,-680(fp)
   322e8:	e17f5717 	ldw	r5,-676(fp)
   322ec:	00438e00 	call	438e0 <__muldi3>
   322f0:	1009883a 	mov	r4,r2
   322f4:	180b883a 	mov	r5,r3
   322f8:	e13e9215 	stw	r4,-1464(fp)
   322fc:	e17e9315 	stw	r5,-1460(fp)
   32300:	e0be9317 	ldw	r2,-1460(fp)
   32304:	1004d83a 	srl	r2,r2,zero
   32308:	e0bf5a15 	stw	r2,-664(fp)
   3230c:	e03f5b15 	stw	zero,-660(fp)
   32310:	e0bf5a17 	ldw	r2,-664(fp)
   32314:	e0be9415 	stw	r2,-1456(fp)
   32318:	e0be9217 	ldw	r2,-1464(fp)
   3231c:	e0be9515 	stw	r2,-1452(fp)
   32320:	e0fe9417 	ldw	r3,-1456(fp)
   32324:	e0be9417 	ldw	r2,-1456(fp)
   32328:	1885883a 	add	r2,r3,r2
   3232c:	e0be9615 	stw	r2,-1448(fp)
   32330:	e0fe9617 	ldw	r3,-1448(fp)
   32334:	e0be9417 	ldw	r2,-1456(fp)
   32338:	1880022e 	bgeu	r3,r2,32344 <secp256k1_scalar_sqr_512+0x1410>
   3233c:	00c00044 	movi	r3,1
   32340:	00000106 	br	32348 <secp256k1_scalar_sqr_512+0x1414>
   32344:	0007883a 	mov	r3,zero
   32348:	e0be6117 	ldw	r2,-1660(fp)
   3234c:	10c5883a 	add	r2,r2,r3
   32350:	e0be6115 	stw	r2,-1660(fp)
   32354:	e0fe9617 	ldw	r3,-1448(fp)
   32358:	e0be9417 	ldw	r2,-1456(fp)
   3235c:	1885803a 	cmpltu	r2,r3,r2
   32360:	10803fcc 	andi	r2,r2,255
   32364:	10001126 	beq	r2,zero,323ac <secp256k1_scalar_sqr_512+0x1478>
   32368:	e0be6117 	ldw	r2,-1660(fp)
   3236c:	1005003a 	cmpeq	r2,r2,zero
   32370:	10803fcc 	andi	r2,r2,255
   32374:	10000d26 	beq	r2,zero,323ac <secp256k1_scalar_sqr_512+0x1478>
   32378:	d0a01617 	ldw	r2,-32680(gp)
   3237c:	10c00317 	ldw	r3,12(r2)
   32380:	00800174 	movhi	r2,5
   32384:	10972b04 	addi	r2,r2,23724
   32388:	d8800015 	stw	r2,0(sp)
   3238c:	01c09584 	movi	r7,598
   32390:	01800174 	movhi	r6,5
   32394:	31964204 	addi	r6,r6,22792
   32398:	01400174 	movhi	r5,5
   3239c:	2951e804 	addi	r5,r5,18336
   323a0:	1809883a 	mov	r4,r3
   323a4:	00461000 	call	46100 <fprintf>
   323a8:	0045fd40 	call	45fd4 <abort>
   323ac:	e0fe9517 	ldw	r3,-1452(fp)
   323b0:	e0be9517 	ldw	r2,-1452(fp)
   323b4:	1885883a 	add	r2,r3,r2
   323b8:	e0be9715 	stw	r2,-1444(fp)
   323bc:	e0fe9717 	ldw	r3,-1444(fp)
   323c0:	e0be9517 	ldw	r2,-1452(fp)
   323c4:	1880022e 	bgeu	r3,r2,323d0 <secp256k1_scalar_sqr_512+0x149c>
   323c8:	00c00044 	movi	r3,1
   323cc:	00000106 	br	323d4 <secp256k1_scalar_sqr_512+0x14a0>
   323d0:	0007883a 	mov	r3,zero
   323d4:	e0be9617 	ldw	r2,-1448(fp)
   323d8:	10c5883a 	add	r2,r2,r3
   323dc:	e0be9615 	stw	r2,-1448(fp)
   323e0:	e0fe5f17 	ldw	r3,-1668(fp)
   323e4:	e0be9717 	ldw	r2,-1444(fp)
   323e8:	1885883a 	add	r2,r3,r2
   323ec:	e0be5f15 	stw	r2,-1668(fp)
   323f0:	e0fe5f17 	ldw	r3,-1668(fp)
   323f4:	e0be9717 	ldw	r2,-1444(fp)
   323f8:	1880022e 	bgeu	r3,r2,32404 <secp256k1_scalar_sqr_512+0x14d0>
   323fc:	00c00044 	movi	r3,1
   32400:	00000106 	br	32408 <secp256k1_scalar_sqr_512+0x14d4>
   32404:	0007883a 	mov	r3,zero
   32408:	e0be9617 	ldw	r2,-1448(fp)
   3240c:	10c5883a 	add	r2,r2,r3
   32410:	e0be9615 	stw	r2,-1448(fp)
   32414:	e0fe5f17 	ldw	r3,-1668(fp)
   32418:	e0be9717 	ldw	r2,-1444(fp)
   3241c:	1885803a 	cmpltu	r2,r3,r2
   32420:	1007883a 	mov	r3,r2
   32424:	e0be9617 	ldw	r2,-1448(fp)
   32428:	1005003a 	cmpeq	r2,r2,zero
   3242c:	1884703a 	and	r2,r3,r2
   32430:	10c03fcc 	andi	r3,r2,255
   32434:	e0be6117 	ldw	r2,-1660(fp)
   32438:	10c5883a 	add	r2,r2,r3
   3243c:	e0be6115 	stw	r2,-1660(fp)
   32440:	e0fe5f17 	ldw	r3,-1668(fp)
   32444:	e0be9717 	ldw	r2,-1444(fp)
   32448:	1885803a 	cmpltu	r2,r3,r2
   3244c:	10803fcc 	andi	r2,r2,255
   32450:	10000626 	beq	r2,zero,3246c <secp256k1_scalar_sqr_512+0x1538>
   32454:	e0be9617 	ldw	r2,-1448(fp)
   32458:	1005003a 	cmpeq	r2,r2,zero
   3245c:	10803fcc 	andi	r2,r2,255
   32460:	10000226 	beq	r2,zero,3246c <secp256k1_scalar_sqr_512+0x1538>
   32464:	00800044 	movi	r2,1
   32468:	00000106 	br	32470 <secp256k1_scalar_sqr_512+0x153c>
   3246c:	0005883a 	mov	r2,zero
   32470:	10001126 	beq	r2,zero,324b8 <secp256k1_scalar_sqr_512+0x1584>
   32474:	e0be6117 	ldw	r2,-1660(fp)
   32478:	1005003a 	cmpeq	r2,r2,zero
   3247c:	10803fcc 	andi	r2,r2,255
   32480:	10000d26 	beq	r2,zero,324b8 <secp256k1_scalar_sqr_512+0x1584>
   32484:	d0a01617 	ldw	r2,-32680(gp)
   32488:	10c00317 	ldw	r3,12(r2)
   3248c:	00800174 	movhi	r2,5
   32490:	10973704 	addi	r2,r2,23772
   32494:	d8800015 	stw	r2,0(sp)
   32498:	01c09584 	movi	r7,598
   3249c:	01800174 	movhi	r6,5
   324a0:	31964204 	addi	r6,r6,22792
   324a4:	01400174 	movhi	r5,5
   324a8:	2951e804 	addi	r5,r5,18336
   324ac:	1809883a 	mov	r4,r3
   324b0:	00461000 	call	46100 <fprintf>
   324b4:	0045fd40 	call	45fd4 <abort>
   324b8:	e0fe6017 	ldw	r3,-1664(fp)
   324bc:	e0be9617 	ldw	r2,-1448(fp)
   324c0:	1885883a 	add	r2,r3,r2
   324c4:	e0be6015 	stw	r2,-1664(fp)
   324c8:	e0fe6017 	ldw	r3,-1664(fp)
   324cc:	e0be9617 	ldw	r2,-1448(fp)
   324d0:	1880022e 	bgeu	r3,r2,324dc <secp256k1_scalar_sqr_512+0x15a8>
   324d4:	00c00044 	movi	r3,1
   324d8:	00000106 	br	324e0 <secp256k1_scalar_sqr_512+0x15ac>
   324dc:	0007883a 	mov	r3,zero
   324e0:	e0be6117 	ldw	r2,-1660(fp)
   324e4:	10c5883a 	add	r2,r2,r3
   324e8:	e0be6115 	stw	r2,-1660(fp)
   324ec:	e0fe6017 	ldw	r3,-1664(fp)
   324f0:	e0be9617 	ldw	r2,-1448(fp)
   324f4:	1885803a 	cmpltu	r2,r3,r2
   324f8:	10803fcc 	andi	r2,r2,255
   324fc:	10001126 	beq	r2,zero,32544 <secp256k1_scalar_sqr_512+0x1610>
   32500:	e0be6117 	ldw	r2,-1660(fp)
   32504:	1005003a 	cmpeq	r2,r2,zero
   32508:	10803fcc 	andi	r2,r2,255
   3250c:	10000d26 	beq	r2,zero,32544 <secp256k1_scalar_sqr_512+0x1610>
   32510:	d0a01617 	ldw	r2,-32680(gp)
   32514:	10c00317 	ldw	r3,12(r2)
   32518:	00800174 	movhi	r2,5
   3251c:	10974704 	addi	r2,r2,23836
   32520:	d8800015 	stw	r2,0(sp)
   32524:	01c09584 	movi	r7,598
   32528:	01800174 	movhi	r6,5
   3252c:	31964204 	addi	r6,r6,22792
   32530:	01400174 	movhi	r5,5
   32534:	2951e804 	addi	r5,r5,18336
   32538:	1809883a 	mov	r4,r3
   3253c:	00461000 	call	46100 <fprintf>
   32540:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[1], a->d[4]);
   32544:	e0bf2b17 	ldw	r2,-852(fp)
   32548:	10800117 	ldw	r2,4(r2)
   3254c:	e0bf5c15 	stw	r2,-656(fp)
   32550:	e03f5d15 	stw	zero,-652(fp)
   32554:	e0bf2b17 	ldw	r2,-852(fp)
   32558:	10800417 	ldw	r2,16(r2)
   3255c:	e0bf5e15 	stw	r2,-648(fp)
   32560:	e03f5f15 	stw	zero,-644(fp)
   32564:	e1bf5e17 	ldw	r6,-648(fp)
   32568:	e1ff5f17 	ldw	r7,-644(fp)
   3256c:	e13f5c17 	ldw	r4,-656(fp)
   32570:	e17f5d17 	ldw	r5,-652(fp)
   32574:	00438e00 	call	438e0 <__muldi3>
   32578:	1009883a 	mov	r4,r2
   3257c:	180b883a 	mov	r5,r3
   32580:	e13e9815 	stw	r4,-1440(fp)
   32584:	e17e9915 	stw	r5,-1436(fp)
   32588:	e0be9917 	ldw	r2,-1436(fp)
   3258c:	1004d83a 	srl	r2,r2,zero
   32590:	e0bf6015 	stw	r2,-640(fp)
   32594:	e03f6115 	stw	zero,-636(fp)
   32598:	e0bf6017 	ldw	r2,-640(fp)
   3259c:	e0be9a15 	stw	r2,-1432(fp)
   325a0:	e0be9817 	ldw	r2,-1440(fp)
   325a4:	e0be9b15 	stw	r2,-1428(fp)
   325a8:	e0fe9a17 	ldw	r3,-1432(fp)
   325ac:	e0be9a17 	ldw	r2,-1432(fp)
   325b0:	1885883a 	add	r2,r3,r2
   325b4:	e0be9c15 	stw	r2,-1424(fp)
   325b8:	e0fe9c17 	ldw	r3,-1424(fp)
   325bc:	e0be9a17 	ldw	r2,-1432(fp)
   325c0:	1880022e 	bgeu	r3,r2,325cc <secp256k1_scalar_sqr_512+0x1698>
   325c4:	00c00044 	movi	r3,1
   325c8:	00000106 	br	325d0 <secp256k1_scalar_sqr_512+0x169c>
   325cc:	0007883a 	mov	r3,zero
   325d0:	e0be6117 	ldw	r2,-1660(fp)
   325d4:	10c5883a 	add	r2,r2,r3
   325d8:	e0be6115 	stw	r2,-1660(fp)
   325dc:	e0fe9c17 	ldw	r3,-1424(fp)
   325e0:	e0be9a17 	ldw	r2,-1432(fp)
   325e4:	1885803a 	cmpltu	r2,r3,r2
   325e8:	10803fcc 	andi	r2,r2,255
   325ec:	10001126 	beq	r2,zero,32634 <secp256k1_scalar_sqr_512+0x1700>
   325f0:	e0be6117 	ldw	r2,-1660(fp)
   325f4:	1005003a 	cmpeq	r2,r2,zero
   325f8:	10803fcc 	andi	r2,r2,255
   325fc:	10000d26 	beq	r2,zero,32634 <secp256k1_scalar_sqr_512+0x1700>
   32600:	d0a01617 	ldw	r2,-32680(gp)
   32604:	10c00317 	ldw	r3,12(r2)
   32608:	00800174 	movhi	r2,5
   3260c:	10972b04 	addi	r2,r2,23724
   32610:	d8800015 	stw	r2,0(sp)
   32614:	01c095c4 	movi	r7,599
   32618:	01800174 	movhi	r6,5
   3261c:	31964204 	addi	r6,r6,22792
   32620:	01400174 	movhi	r5,5
   32624:	2951e804 	addi	r5,r5,18336
   32628:	1809883a 	mov	r4,r3
   3262c:	00461000 	call	46100 <fprintf>
   32630:	0045fd40 	call	45fd4 <abort>
   32634:	e0fe9b17 	ldw	r3,-1428(fp)
   32638:	e0be9b17 	ldw	r2,-1428(fp)
   3263c:	1885883a 	add	r2,r3,r2
   32640:	e0be9d15 	stw	r2,-1420(fp)
   32644:	e0fe9d17 	ldw	r3,-1420(fp)
   32648:	e0be9b17 	ldw	r2,-1428(fp)
   3264c:	1880022e 	bgeu	r3,r2,32658 <secp256k1_scalar_sqr_512+0x1724>
   32650:	00c00044 	movi	r3,1
   32654:	00000106 	br	3265c <secp256k1_scalar_sqr_512+0x1728>
   32658:	0007883a 	mov	r3,zero
   3265c:	e0be9c17 	ldw	r2,-1424(fp)
   32660:	10c5883a 	add	r2,r2,r3
   32664:	e0be9c15 	stw	r2,-1424(fp)
   32668:	e0fe5f17 	ldw	r3,-1668(fp)
   3266c:	e0be9d17 	ldw	r2,-1420(fp)
   32670:	1885883a 	add	r2,r3,r2
   32674:	e0be5f15 	stw	r2,-1668(fp)
   32678:	e0fe5f17 	ldw	r3,-1668(fp)
   3267c:	e0be9d17 	ldw	r2,-1420(fp)
   32680:	1880022e 	bgeu	r3,r2,3268c <secp256k1_scalar_sqr_512+0x1758>
   32684:	00c00044 	movi	r3,1
   32688:	00000106 	br	32690 <secp256k1_scalar_sqr_512+0x175c>
   3268c:	0007883a 	mov	r3,zero
   32690:	e0be9c17 	ldw	r2,-1424(fp)
   32694:	10c5883a 	add	r2,r2,r3
   32698:	e0be9c15 	stw	r2,-1424(fp)
   3269c:	e0fe5f17 	ldw	r3,-1668(fp)
   326a0:	e0be9d17 	ldw	r2,-1420(fp)
   326a4:	1885803a 	cmpltu	r2,r3,r2
   326a8:	1007883a 	mov	r3,r2
   326ac:	e0be9c17 	ldw	r2,-1424(fp)
   326b0:	1005003a 	cmpeq	r2,r2,zero
   326b4:	1884703a 	and	r2,r3,r2
   326b8:	10c03fcc 	andi	r3,r2,255
   326bc:	e0be6117 	ldw	r2,-1660(fp)
   326c0:	10c5883a 	add	r2,r2,r3
   326c4:	e0be6115 	stw	r2,-1660(fp)
   326c8:	e0fe5f17 	ldw	r3,-1668(fp)
   326cc:	e0be9d17 	ldw	r2,-1420(fp)
   326d0:	1885803a 	cmpltu	r2,r3,r2
   326d4:	10803fcc 	andi	r2,r2,255
   326d8:	10000626 	beq	r2,zero,326f4 <secp256k1_scalar_sqr_512+0x17c0>
   326dc:	e0be9c17 	ldw	r2,-1424(fp)
   326e0:	1005003a 	cmpeq	r2,r2,zero
   326e4:	10803fcc 	andi	r2,r2,255
   326e8:	10000226 	beq	r2,zero,326f4 <secp256k1_scalar_sqr_512+0x17c0>
   326ec:	00800044 	movi	r2,1
   326f0:	00000106 	br	326f8 <secp256k1_scalar_sqr_512+0x17c4>
   326f4:	0005883a 	mov	r2,zero
   326f8:	10001126 	beq	r2,zero,32740 <secp256k1_scalar_sqr_512+0x180c>
   326fc:	e0be6117 	ldw	r2,-1660(fp)
   32700:	1005003a 	cmpeq	r2,r2,zero
   32704:	10803fcc 	andi	r2,r2,255
   32708:	10000d26 	beq	r2,zero,32740 <secp256k1_scalar_sqr_512+0x180c>
   3270c:	d0a01617 	ldw	r2,-32680(gp)
   32710:	10c00317 	ldw	r3,12(r2)
   32714:	00800174 	movhi	r2,5
   32718:	10973704 	addi	r2,r2,23772
   3271c:	d8800015 	stw	r2,0(sp)
   32720:	01c095c4 	movi	r7,599
   32724:	01800174 	movhi	r6,5
   32728:	31964204 	addi	r6,r6,22792
   3272c:	01400174 	movhi	r5,5
   32730:	2951e804 	addi	r5,r5,18336
   32734:	1809883a 	mov	r4,r3
   32738:	00461000 	call	46100 <fprintf>
   3273c:	0045fd40 	call	45fd4 <abort>
   32740:	e0fe6017 	ldw	r3,-1664(fp)
   32744:	e0be9c17 	ldw	r2,-1424(fp)
   32748:	1885883a 	add	r2,r3,r2
   3274c:	e0be6015 	stw	r2,-1664(fp)
   32750:	e0fe6017 	ldw	r3,-1664(fp)
   32754:	e0be9c17 	ldw	r2,-1424(fp)
   32758:	1880022e 	bgeu	r3,r2,32764 <secp256k1_scalar_sqr_512+0x1830>
   3275c:	00c00044 	movi	r3,1
   32760:	00000106 	br	32768 <secp256k1_scalar_sqr_512+0x1834>
   32764:	0007883a 	mov	r3,zero
   32768:	e0be6117 	ldw	r2,-1660(fp)
   3276c:	10c5883a 	add	r2,r2,r3
   32770:	e0be6115 	stw	r2,-1660(fp)
   32774:	e0fe6017 	ldw	r3,-1664(fp)
   32778:	e0be9c17 	ldw	r2,-1424(fp)
   3277c:	1885803a 	cmpltu	r2,r3,r2
   32780:	10803fcc 	andi	r2,r2,255
   32784:	10001126 	beq	r2,zero,327cc <secp256k1_scalar_sqr_512+0x1898>
   32788:	e0be6117 	ldw	r2,-1660(fp)
   3278c:	1005003a 	cmpeq	r2,r2,zero
   32790:	10803fcc 	andi	r2,r2,255
   32794:	10000d26 	beq	r2,zero,327cc <secp256k1_scalar_sqr_512+0x1898>
   32798:	d0a01617 	ldw	r2,-32680(gp)
   3279c:	10c00317 	ldw	r3,12(r2)
   327a0:	00800174 	movhi	r2,5
   327a4:	10974704 	addi	r2,r2,23836
   327a8:	d8800015 	stw	r2,0(sp)
   327ac:	01c095c4 	movi	r7,599
   327b0:	01800174 	movhi	r6,5
   327b4:	31964204 	addi	r6,r6,22792
   327b8:	01400174 	movhi	r5,5
   327bc:	2951e804 	addi	r5,r5,18336
   327c0:	1809883a 	mov	r4,r3
   327c4:	00461000 	call	46100 <fprintf>
   327c8:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[2], a->d[3]);
   327cc:	e0bf2b17 	ldw	r2,-852(fp)
   327d0:	10800217 	ldw	r2,8(r2)
   327d4:	e0bf6215 	stw	r2,-632(fp)
   327d8:	e03f6315 	stw	zero,-628(fp)
   327dc:	e0bf2b17 	ldw	r2,-852(fp)
   327e0:	10800317 	ldw	r2,12(r2)
   327e4:	e0bf6415 	stw	r2,-624(fp)
   327e8:	e03f6515 	stw	zero,-620(fp)
   327ec:	e1bf6417 	ldw	r6,-624(fp)
   327f0:	e1ff6517 	ldw	r7,-620(fp)
   327f4:	e13f6217 	ldw	r4,-632(fp)
   327f8:	e17f6317 	ldw	r5,-628(fp)
   327fc:	00438e00 	call	438e0 <__muldi3>
   32800:	1009883a 	mov	r4,r2
   32804:	180b883a 	mov	r5,r3
   32808:	e13e9e15 	stw	r4,-1416(fp)
   3280c:	e17e9f15 	stw	r5,-1412(fp)
   32810:	e0be9f17 	ldw	r2,-1412(fp)
   32814:	1004d83a 	srl	r2,r2,zero
   32818:	e0bf6615 	stw	r2,-616(fp)
   3281c:	e03f6715 	stw	zero,-612(fp)
   32820:	e0bf6617 	ldw	r2,-616(fp)
   32824:	e0bea015 	stw	r2,-1408(fp)
   32828:	e0be9e17 	ldw	r2,-1416(fp)
   3282c:	e0bea115 	stw	r2,-1404(fp)
   32830:	e0fea017 	ldw	r3,-1408(fp)
   32834:	e0bea017 	ldw	r2,-1408(fp)
   32838:	1885883a 	add	r2,r3,r2
   3283c:	e0bea215 	stw	r2,-1400(fp)
   32840:	e0fea217 	ldw	r3,-1400(fp)
   32844:	e0bea017 	ldw	r2,-1408(fp)
   32848:	1880022e 	bgeu	r3,r2,32854 <secp256k1_scalar_sqr_512+0x1920>
   3284c:	00c00044 	movi	r3,1
   32850:	00000106 	br	32858 <secp256k1_scalar_sqr_512+0x1924>
   32854:	0007883a 	mov	r3,zero
   32858:	e0be6117 	ldw	r2,-1660(fp)
   3285c:	10c5883a 	add	r2,r2,r3
   32860:	e0be6115 	stw	r2,-1660(fp)
   32864:	e0fea217 	ldw	r3,-1400(fp)
   32868:	e0bea017 	ldw	r2,-1408(fp)
   3286c:	1885803a 	cmpltu	r2,r3,r2
   32870:	10803fcc 	andi	r2,r2,255
   32874:	10001126 	beq	r2,zero,328bc <secp256k1_scalar_sqr_512+0x1988>
   32878:	e0be6117 	ldw	r2,-1660(fp)
   3287c:	1005003a 	cmpeq	r2,r2,zero
   32880:	10803fcc 	andi	r2,r2,255
   32884:	10000d26 	beq	r2,zero,328bc <secp256k1_scalar_sqr_512+0x1988>
   32888:	d0a01617 	ldw	r2,-32680(gp)
   3288c:	10c00317 	ldw	r3,12(r2)
   32890:	00800174 	movhi	r2,5
   32894:	10972b04 	addi	r2,r2,23724
   32898:	d8800015 	stw	r2,0(sp)
   3289c:	01c09604 	movi	r7,600
   328a0:	01800174 	movhi	r6,5
   328a4:	31964204 	addi	r6,r6,22792
   328a8:	01400174 	movhi	r5,5
   328ac:	2951e804 	addi	r5,r5,18336
   328b0:	1809883a 	mov	r4,r3
   328b4:	00461000 	call	46100 <fprintf>
   328b8:	0045fd40 	call	45fd4 <abort>
   328bc:	e0fea117 	ldw	r3,-1404(fp)
   328c0:	e0bea117 	ldw	r2,-1404(fp)
   328c4:	1885883a 	add	r2,r3,r2
   328c8:	e0bea315 	stw	r2,-1396(fp)
   328cc:	e0fea317 	ldw	r3,-1396(fp)
   328d0:	e0bea117 	ldw	r2,-1404(fp)
   328d4:	1880022e 	bgeu	r3,r2,328e0 <secp256k1_scalar_sqr_512+0x19ac>
   328d8:	00c00044 	movi	r3,1
   328dc:	00000106 	br	328e4 <secp256k1_scalar_sqr_512+0x19b0>
   328e0:	0007883a 	mov	r3,zero
   328e4:	e0bea217 	ldw	r2,-1400(fp)
   328e8:	10c5883a 	add	r2,r2,r3
   328ec:	e0bea215 	stw	r2,-1400(fp)
   328f0:	e0fe5f17 	ldw	r3,-1668(fp)
   328f4:	e0bea317 	ldw	r2,-1396(fp)
   328f8:	1885883a 	add	r2,r3,r2
   328fc:	e0be5f15 	stw	r2,-1668(fp)
   32900:	e0fe5f17 	ldw	r3,-1668(fp)
   32904:	e0bea317 	ldw	r2,-1396(fp)
   32908:	1880022e 	bgeu	r3,r2,32914 <secp256k1_scalar_sqr_512+0x19e0>
   3290c:	00c00044 	movi	r3,1
   32910:	00000106 	br	32918 <secp256k1_scalar_sqr_512+0x19e4>
   32914:	0007883a 	mov	r3,zero
   32918:	e0bea217 	ldw	r2,-1400(fp)
   3291c:	10c5883a 	add	r2,r2,r3
   32920:	e0bea215 	stw	r2,-1400(fp)
   32924:	e0fe5f17 	ldw	r3,-1668(fp)
   32928:	e0bea317 	ldw	r2,-1396(fp)
   3292c:	1885803a 	cmpltu	r2,r3,r2
   32930:	1007883a 	mov	r3,r2
   32934:	e0bea217 	ldw	r2,-1400(fp)
   32938:	1005003a 	cmpeq	r2,r2,zero
   3293c:	1884703a 	and	r2,r3,r2
   32940:	10c03fcc 	andi	r3,r2,255
   32944:	e0be6117 	ldw	r2,-1660(fp)
   32948:	10c5883a 	add	r2,r2,r3
   3294c:	e0be6115 	stw	r2,-1660(fp)
   32950:	e0fe5f17 	ldw	r3,-1668(fp)
   32954:	e0bea317 	ldw	r2,-1396(fp)
   32958:	1885803a 	cmpltu	r2,r3,r2
   3295c:	10803fcc 	andi	r2,r2,255
   32960:	10000626 	beq	r2,zero,3297c <secp256k1_scalar_sqr_512+0x1a48>
   32964:	e0bea217 	ldw	r2,-1400(fp)
   32968:	1005003a 	cmpeq	r2,r2,zero
   3296c:	10803fcc 	andi	r2,r2,255
   32970:	10000226 	beq	r2,zero,3297c <secp256k1_scalar_sqr_512+0x1a48>
   32974:	00800044 	movi	r2,1
   32978:	00000106 	br	32980 <secp256k1_scalar_sqr_512+0x1a4c>
   3297c:	0005883a 	mov	r2,zero
   32980:	10001126 	beq	r2,zero,329c8 <secp256k1_scalar_sqr_512+0x1a94>
   32984:	e0be6117 	ldw	r2,-1660(fp)
   32988:	1005003a 	cmpeq	r2,r2,zero
   3298c:	10803fcc 	andi	r2,r2,255
   32990:	10000d26 	beq	r2,zero,329c8 <secp256k1_scalar_sqr_512+0x1a94>
   32994:	d0a01617 	ldw	r2,-32680(gp)
   32998:	10c00317 	ldw	r3,12(r2)
   3299c:	00800174 	movhi	r2,5
   329a0:	10973704 	addi	r2,r2,23772
   329a4:	d8800015 	stw	r2,0(sp)
   329a8:	01c09604 	movi	r7,600
   329ac:	01800174 	movhi	r6,5
   329b0:	31964204 	addi	r6,r6,22792
   329b4:	01400174 	movhi	r5,5
   329b8:	2951e804 	addi	r5,r5,18336
   329bc:	1809883a 	mov	r4,r3
   329c0:	00461000 	call	46100 <fprintf>
   329c4:	0045fd40 	call	45fd4 <abort>
   329c8:	e0fe6017 	ldw	r3,-1664(fp)
   329cc:	e0bea217 	ldw	r2,-1400(fp)
   329d0:	1885883a 	add	r2,r3,r2
   329d4:	e0be6015 	stw	r2,-1664(fp)
   329d8:	e0fe6017 	ldw	r3,-1664(fp)
   329dc:	e0bea217 	ldw	r2,-1400(fp)
   329e0:	1880022e 	bgeu	r3,r2,329ec <secp256k1_scalar_sqr_512+0x1ab8>
   329e4:	00c00044 	movi	r3,1
   329e8:	00000106 	br	329f0 <secp256k1_scalar_sqr_512+0x1abc>
   329ec:	0007883a 	mov	r3,zero
   329f0:	e0be6117 	ldw	r2,-1660(fp)
   329f4:	10c5883a 	add	r2,r2,r3
   329f8:	e0be6115 	stw	r2,-1660(fp)
   329fc:	e0fe6017 	ldw	r3,-1664(fp)
   32a00:	e0bea217 	ldw	r2,-1400(fp)
   32a04:	1885803a 	cmpltu	r2,r3,r2
   32a08:	10803fcc 	andi	r2,r2,255
   32a0c:	10001126 	beq	r2,zero,32a54 <secp256k1_scalar_sqr_512+0x1b20>
   32a10:	e0be6117 	ldw	r2,-1660(fp)
   32a14:	1005003a 	cmpeq	r2,r2,zero
   32a18:	10803fcc 	andi	r2,r2,255
   32a1c:	10000d26 	beq	r2,zero,32a54 <secp256k1_scalar_sqr_512+0x1b20>
   32a20:	d0a01617 	ldw	r2,-32680(gp)
   32a24:	10c00317 	ldw	r3,12(r2)
   32a28:	00800174 	movhi	r2,5
   32a2c:	10974704 	addi	r2,r2,23836
   32a30:	d8800015 	stw	r2,0(sp)
   32a34:	01c09604 	movi	r7,600
   32a38:	01800174 	movhi	r6,5
   32a3c:	31964204 	addi	r6,r6,22792
   32a40:	01400174 	movhi	r5,5
   32a44:	2951e804 	addi	r5,r5,18336
   32a48:	1809883a 	mov	r4,r3
   32a4c:	00461000 	call	46100 <fprintf>
   32a50:	0045fd40 	call	45fd4 <abort>
    extract(l[5]);
   32a54:	e0bf2a17 	ldw	r2,-856(fp)
   32a58:	10c00504 	addi	r3,r2,20
   32a5c:	e0be5f17 	ldw	r2,-1668(fp)
   32a60:	18800015 	stw	r2,0(r3)
   32a64:	e0be6017 	ldw	r2,-1664(fp)
   32a68:	e0be5f15 	stw	r2,-1668(fp)
   32a6c:	e0be6117 	ldw	r2,-1660(fp)
   32a70:	e0be6015 	stw	r2,-1664(fp)
   32a74:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[6]);
   32a78:	e0bf2b17 	ldw	r2,-852(fp)
   32a7c:	10800017 	ldw	r2,0(r2)
   32a80:	e0bf6815 	stw	r2,-608(fp)
   32a84:	e03f6915 	stw	zero,-604(fp)
   32a88:	e0bf2b17 	ldw	r2,-852(fp)
   32a8c:	10800617 	ldw	r2,24(r2)
   32a90:	e0bf6a15 	stw	r2,-600(fp)
   32a94:	e03f6b15 	stw	zero,-596(fp)
   32a98:	e1bf6a17 	ldw	r6,-600(fp)
   32a9c:	e1ff6b17 	ldw	r7,-596(fp)
   32aa0:	e13f6817 	ldw	r4,-608(fp)
   32aa4:	e17f6917 	ldw	r5,-604(fp)
   32aa8:	00438e00 	call	438e0 <__muldi3>
   32aac:	1009883a 	mov	r4,r2
   32ab0:	180b883a 	mov	r5,r3
   32ab4:	e13ea415 	stw	r4,-1392(fp)
   32ab8:	e17ea515 	stw	r5,-1388(fp)
   32abc:	e0bea517 	ldw	r2,-1388(fp)
   32ac0:	1004d83a 	srl	r2,r2,zero
   32ac4:	e0bf6c15 	stw	r2,-592(fp)
   32ac8:	e03f6d15 	stw	zero,-588(fp)
   32acc:	e0bf6c17 	ldw	r2,-592(fp)
   32ad0:	e0bea615 	stw	r2,-1384(fp)
   32ad4:	e0bea417 	ldw	r2,-1392(fp)
   32ad8:	e0bea715 	stw	r2,-1380(fp)
   32adc:	e0fea617 	ldw	r3,-1384(fp)
   32ae0:	e0bea617 	ldw	r2,-1384(fp)
   32ae4:	1885883a 	add	r2,r3,r2
   32ae8:	e0bea815 	stw	r2,-1376(fp)
   32aec:	e0fea817 	ldw	r3,-1376(fp)
   32af0:	e0bea617 	ldw	r2,-1384(fp)
   32af4:	1880022e 	bgeu	r3,r2,32b00 <secp256k1_scalar_sqr_512+0x1bcc>
   32af8:	00c00044 	movi	r3,1
   32afc:	00000106 	br	32b04 <secp256k1_scalar_sqr_512+0x1bd0>
   32b00:	0007883a 	mov	r3,zero
   32b04:	e0be6117 	ldw	r2,-1660(fp)
   32b08:	10c5883a 	add	r2,r2,r3
   32b0c:	e0be6115 	stw	r2,-1660(fp)
   32b10:	e0fea817 	ldw	r3,-1376(fp)
   32b14:	e0bea617 	ldw	r2,-1384(fp)
   32b18:	1885803a 	cmpltu	r2,r3,r2
   32b1c:	10803fcc 	andi	r2,r2,255
   32b20:	10001126 	beq	r2,zero,32b68 <secp256k1_scalar_sqr_512+0x1c34>
   32b24:	e0be6117 	ldw	r2,-1660(fp)
   32b28:	1005003a 	cmpeq	r2,r2,zero
   32b2c:	10803fcc 	andi	r2,r2,255
   32b30:	10000d26 	beq	r2,zero,32b68 <secp256k1_scalar_sqr_512+0x1c34>
   32b34:	d0a01617 	ldw	r2,-32680(gp)
   32b38:	10c00317 	ldw	r3,12(r2)
   32b3c:	00800174 	movhi	r2,5
   32b40:	10972b04 	addi	r2,r2,23724
   32b44:	d8800015 	stw	r2,0(sp)
   32b48:	01c09684 	movi	r7,602
   32b4c:	01800174 	movhi	r6,5
   32b50:	31964204 	addi	r6,r6,22792
   32b54:	01400174 	movhi	r5,5
   32b58:	2951e804 	addi	r5,r5,18336
   32b5c:	1809883a 	mov	r4,r3
   32b60:	00461000 	call	46100 <fprintf>
   32b64:	0045fd40 	call	45fd4 <abort>
   32b68:	e0fea717 	ldw	r3,-1380(fp)
   32b6c:	e0bea717 	ldw	r2,-1380(fp)
   32b70:	1885883a 	add	r2,r3,r2
   32b74:	e0bea915 	stw	r2,-1372(fp)
   32b78:	e0fea917 	ldw	r3,-1372(fp)
   32b7c:	e0bea717 	ldw	r2,-1380(fp)
   32b80:	1880022e 	bgeu	r3,r2,32b8c <secp256k1_scalar_sqr_512+0x1c58>
   32b84:	00c00044 	movi	r3,1
   32b88:	00000106 	br	32b90 <secp256k1_scalar_sqr_512+0x1c5c>
   32b8c:	0007883a 	mov	r3,zero
   32b90:	e0bea817 	ldw	r2,-1376(fp)
   32b94:	10c5883a 	add	r2,r2,r3
   32b98:	e0bea815 	stw	r2,-1376(fp)
   32b9c:	e0fe5f17 	ldw	r3,-1668(fp)
   32ba0:	e0bea917 	ldw	r2,-1372(fp)
   32ba4:	1885883a 	add	r2,r3,r2
   32ba8:	e0be5f15 	stw	r2,-1668(fp)
   32bac:	e0fe5f17 	ldw	r3,-1668(fp)
   32bb0:	e0bea917 	ldw	r2,-1372(fp)
   32bb4:	1880022e 	bgeu	r3,r2,32bc0 <secp256k1_scalar_sqr_512+0x1c8c>
   32bb8:	00c00044 	movi	r3,1
   32bbc:	00000106 	br	32bc4 <secp256k1_scalar_sqr_512+0x1c90>
   32bc0:	0007883a 	mov	r3,zero
   32bc4:	e0bea817 	ldw	r2,-1376(fp)
   32bc8:	10c5883a 	add	r2,r2,r3
   32bcc:	e0bea815 	stw	r2,-1376(fp)
   32bd0:	e0fe5f17 	ldw	r3,-1668(fp)
   32bd4:	e0bea917 	ldw	r2,-1372(fp)
   32bd8:	1885803a 	cmpltu	r2,r3,r2
   32bdc:	1007883a 	mov	r3,r2
   32be0:	e0bea817 	ldw	r2,-1376(fp)
   32be4:	1005003a 	cmpeq	r2,r2,zero
   32be8:	1884703a 	and	r2,r3,r2
   32bec:	10c03fcc 	andi	r3,r2,255
   32bf0:	e0be6117 	ldw	r2,-1660(fp)
   32bf4:	10c5883a 	add	r2,r2,r3
   32bf8:	e0be6115 	stw	r2,-1660(fp)
   32bfc:	e0fe5f17 	ldw	r3,-1668(fp)
   32c00:	e0bea917 	ldw	r2,-1372(fp)
   32c04:	1885803a 	cmpltu	r2,r3,r2
   32c08:	10803fcc 	andi	r2,r2,255
   32c0c:	10000626 	beq	r2,zero,32c28 <secp256k1_scalar_sqr_512+0x1cf4>
   32c10:	e0bea817 	ldw	r2,-1376(fp)
   32c14:	1005003a 	cmpeq	r2,r2,zero
   32c18:	10803fcc 	andi	r2,r2,255
   32c1c:	10000226 	beq	r2,zero,32c28 <secp256k1_scalar_sqr_512+0x1cf4>
   32c20:	00800044 	movi	r2,1
   32c24:	00000106 	br	32c2c <secp256k1_scalar_sqr_512+0x1cf8>
   32c28:	0005883a 	mov	r2,zero
   32c2c:	10001126 	beq	r2,zero,32c74 <secp256k1_scalar_sqr_512+0x1d40>
   32c30:	e0be6117 	ldw	r2,-1660(fp)
   32c34:	1005003a 	cmpeq	r2,r2,zero
   32c38:	10803fcc 	andi	r2,r2,255
   32c3c:	10000d26 	beq	r2,zero,32c74 <secp256k1_scalar_sqr_512+0x1d40>
   32c40:	d0a01617 	ldw	r2,-32680(gp)
   32c44:	10c00317 	ldw	r3,12(r2)
   32c48:	00800174 	movhi	r2,5
   32c4c:	10973704 	addi	r2,r2,23772
   32c50:	d8800015 	stw	r2,0(sp)
   32c54:	01c09684 	movi	r7,602
   32c58:	01800174 	movhi	r6,5
   32c5c:	31964204 	addi	r6,r6,22792
   32c60:	01400174 	movhi	r5,5
   32c64:	2951e804 	addi	r5,r5,18336
   32c68:	1809883a 	mov	r4,r3
   32c6c:	00461000 	call	46100 <fprintf>
   32c70:	0045fd40 	call	45fd4 <abort>
   32c74:	e0fe6017 	ldw	r3,-1664(fp)
   32c78:	e0bea817 	ldw	r2,-1376(fp)
   32c7c:	1885883a 	add	r2,r3,r2
   32c80:	e0be6015 	stw	r2,-1664(fp)
   32c84:	e0fe6017 	ldw	r3,-1664(fp)
   32c88:	e0bea817 	ldw	r2,-1376(fp)
   32c8c:	1880022e 	bgeu	r3,r2,32c98 <secp256k1_scalar_sqr_512+0x1d64>
   32c90:	00c00044 	movi	r3,1
   32c94:	00000106 	br	32c9c <secp256k1_scalar_sqr_512+0x1d68>
   32c98:	0007883a 	mov	r3,zero
   32c9c:	e0be6117 	ldw	r2,-1660(fp)
   32ca0:	10c5883a 	add	r2,r2,r3
   32ca4:	e0be6115 	stw	r2,-1660(fp)
   32ca8:	e0fe6017 	ldw	r3,-1664(fp)
   32cac:	e0bea817 	ldw	r2,-1376(fp)
   32cb0:	1885803a 	cmpltu	r2,r3,r2
   32cb4:	10803fcc 	andi	r2,r2,255
   32cb8:	10001126 	beq	r2,zero,32d00 <secp256k1_scalar_sqr_512+0x1dcc>
   32cbc:	e0be6117 	ldw	r2,-1660(fp)
   32cc0:	1005003a 	cmpeq	r2,r2,zero
   32cc4:	10803fcc 	andi	r2,r2,255
   32cc8:	10000d26 	beq	r2,zero,32d00 <secp256k1_scalar_sqr_512+0x1dcc>
   32ccc:	d0a01617 	ldw	r2,-32680(gp)
   32cd0:	10c00317 	ldw	r3,12(r2)
   32cd4:	00800174 	movhi	r2,5
   32cd8:	10974704 	addi	r2,r2,23836
   32cdc:	d8800015 	stw	r2,0(sp)
   32ce0:	01c09684 	movi	r7,602
   32ce4:	01800174 	movhi	r6,5
   32ce8:	31964204 	addi	r6,r6,22792
   32cec:	01400174 	movhi	r5,5
   32cf0:	2951e804 	addi	r5,r5,18336
   32cf4:	1809883a 	mov	r4,r3
   32cf8:	00461000 	call	46100 <fprintf>
   32cfc:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[1], a->d[5]);
   32d00:	e0bf2b17 	ldw	r2,-852(fp)
   32d04:	10800117 	ldw	r2,4(r2)
   32d08:	e0bf6e15 	stw	r2,-584(fp)
   32d0c:	e03f6f15 	stw	zero,-580(fp)
   32d10:	e0bf2b17 	ldw	r2,-852(fp)
   32d14:	10800517 	ldw	r2,20(r2)
   32d18:	e0bf7015 	stw	r2,-576(fp)
   32d1c:	e03f7115 	stw	zero,-572(fp)
   32d20:	e1bf7017 	ldw	r6,-576(fp)
   32d24:	e1ff7117 	ldw	r7,-572(fp)
   32d28:	e13f6e17 	ldw	r4,-584(fp)
   32d2c:	e17f6f17 	ldw	r5,-580(fp)
   32d30:	00438e00 	call	438e0 <__muldi3>
   32d34:	1009883a 	mov	r4,r2
   32d38:	180b883a 	mov	r5,r3
   32d3c:	e13eaa15 	stw	r4,-1368(fp)
   32d40:	e17eab15 	stw	r5,-1364(fp)
   32d44:	e0beab17 	ldw	r2,-1364(fp)
   32d48:	1004d83a 	srl	r2,r2,zero
   32d4c:	e0bf7215 	stw	r2,-568(fp)
   32d50:	e03f7315 	stw	zero,-564(fp)
   32d54:	e0bf7217 	ldw	r2,-568(fp)
   32d58:	e0beac15 	stw	r2,-1360(fp)
   32d5c:	e0beaa17 	ldw	r2,-1368(fp)
   32d60:	e0bead15 	stw	r2,-1356(fp)
   32d64:	e0feac17 	ldw	r3,-1360(fp)
   32d68:	e0beac17 	ldw	r2,-1360(fp)
   32d6c:	1885883a 	add	r2,r3,r2
   32d70:	e0beae15 	stw	r2,-1352(fp)
   32d74:	e0feae17 	ldw	r3,-1352(fp)
   32d78:	e0beac17 	ldw	r2,-1360(fp)
   32d7c:	1880022e 	bgeu	r3,r2,32d88 <secp256k1_scalar_sqr_512+0x1e54>
   32d80:	00c00044 	movi	r3,1
   32d84:	00000106 	br	32d8c <secp256k1_scalar_sqr_512+0x1e58>
   32d88:	0007883a 	mov	r3,zero
   32d8c:	e0be6117 	ldw	r2,-1660(fp)
   32d90:	10c5883a 	add	r2,r2,r3
   32d94:	e0be6115 	stw	r2,-1660(fp)
   32d98:	e0feae17 	ldw	r3,-1352(fp)
   32d9c:	e0beac17 	ldw	r2,-1360(fp)
   32da0:	1885803a 	cmpltu	r2,r3,r2
   32da4:	10803fcc 	andi	r2,r2,255
   32da8:	10001126 	beq	r2,zero,32df0 <secp256k1_scalar_sqr_512+0x1ebc>
   32dac:	e0be6117 	ldw	r2,-1660(fp)
   32db0:	1005003a 	cmpeq	r2,r2,zero
   32db4:	10803fcc 	andi	r2,r2,255
   32db8:	10000d26 	beq	r2,zero,32df0 <secp256k1_scalar_sqr_512+0x1ebc>
   32dbc:	d0a01617 	ldw	r2,-32680(gp)
   32dc0:	10c00317 	ldw	r3,12(r2)
   32dc4:	00800174 	movhi	r2,5
   32dc8:	10972b04 	addi	r2,r2,23724
   32dcc:	d8800015 	stw	r2,0(sp)
   32dd0:	01c096c4 	movi	r7,603
   32dd4:	01800174 	movhi	r6,5
   32dd8:	31964204 	addi	r6,r6,22792
   32ddc:	01400174 	movhi	r5,5
   32de0:	2951e804 	addi	r5,r5,18336
   32de4:	1809883a 	mov	r4,r3
   32de8:	00461000 	call	46100 <fprintf>
   32dec:	0045fd40 	call	45fd4 <abort>
   32df0:	e0fead17 	ldw	r3,-1356(fp)
   32df4:	e0bead17 	ldw	r2,-1356(fp)
   32df8:	1885883a 	add	r2,r3,r2
   32dfc:	e0beaf15 	stw	r2,-1348(fp)
   32e00:	e0feaf17 	ldw	r3,-1348(fp)
   32e04:	e0bead17 	ldw	r2,-1356(fp)
   32e08:	1880022e 	bgeu	r3,r2,32e14 <secp256k1_scalar_sqr_512+0x1ee0>
   32e0c:	00c00044 	movi	r3,1
   32e10:	00000106 	br	32e18 <secp256k1_scalar_sqr_512+0x1ee4>
   32e14:	0007883a 	mov	r3,zero
   32e18:	e0beae17 	ldw	r2,-1352(fp)
   32e1c:	10c5883a 	add	r2,r2,r3
   32e20:	e0beae15 	stw	r2,-1352(fp)
   32e24:	e0fe5f17 	ldw	r3,-1668(fp)
   32e28:	e0beaf17 	ldw	r2,-1348(fp)
   32e2c:	1885883a 	add	r2,r3,r2
   32e30:	e0be5f15 	stw	r2,-1668(fp)
   32e34:	e0fe5f17 	ldw	r3,-1668(fp)
   32e38:	e0beaf17 	ldw	r2,-1348(fp)
   32e3c:	1880022e 	bgeu	r3,r2,32e48 <secp256k1_scalar_sqr_512+0x1f14>
   32e40:	00c00044 	movi	r3,1
   32e44:	00000106 	br	32e4c <secp256k1_scalar_sqr_512+0x1f18>
   32e48:	0007883a 	mov	r3,zero
   32e4c:	e0beae17 	ldw	r2,-1352(fp)
   32e50:	10c5883a 	add	r2,r2,r3
   32e54:	e0beae15 	stw	r2,-1352(fp)
   32e58:	e0fe5f17 	ldw	r3,-1668(fp)
   32e5c:	e0beaf17 	ldw	r2,-1348(fp)
   32e60:	1885803a 	cmpltu	r2,r3,r2
   32e64:	1007883a 	mov	r3,r2
   32e68:	e0beae17 	ldw	r2,-1352(fp)
   32e6c:	1005003a 	cmpeq	r2,r2,zero
   32e70:	1884703a 	and	r2,r3,r2
   32e74:	10c03fcc 	andi	r3,r2,255
   32e78:	e0be6117 	ldw	r2,-1660(fp)
   32e7c:	10c5883a 	add	r2,r2,r3
   32e80:	e0be6115 	stw	r2,-1660(fp)
   32e84:	e0fe5f17 	ldw	r3,-1668(fp)
   32e88:	e0beaf17 	ldw	r2,-1348(fp)
   32e8c:	1885803a 	cmpltu	r2,r3,r2
   32e90:	10803fcc 	andi	r2,r2,255
   32e94:	10000626 	beq	r2,zero,32eb0 <secp256k1_scalar_sqr_512+0x1f7c>
   32e98:	e0beae17 	ldw	r2,-1352(fp)
   32e9c:	1005003a 	cmpeq	r2,r2,zero
   32ea0:	10803fcc 	andi	r2,r2,255
   32ea4:	10000226 	beq	r2,zero,32eb0 <secp256k1_scalar_sqr_512+0x1f7c>
   32ea8:	00800044 	movi	r2,1
   32eac:	00000106 	br	32eb4 <secp256k1_scalar_sqr_512+0x1f80>
   32eb0:	0005883a 	mov	r2,zero
   32eb4:	10001126 	beq	r2,zero,32efc <secp256k1_scalar_sqr_512+0x1fc8>
   32eb8:	e0be6117 	ldw	r2,-1660(fp)
   32ebc:	1005003a 	cmpeq	r2,r2,zero
   32ec0:	10803fcc 	andi	r2,r2,255
   32ec4:	10000d26 	beq	r2,zero,32efc <secp256k1_scalar_sqr_512+0x1fc8>
   32ec8:	d0a01617 	ldw	r2,-32680(gp)
   32ecc:	10c00317 	ldw	r3,12(r2)
   32ed0:	00800174 	movhi	r2,5
   32ed4:	10973704 	addi	r2,r2,23772
   32ed8:	d8800015 	stw	r2,0(sp)
   32edc:	01c096c4 	movi	r7,603
   32ee0:	01800174 	movhi	r6,5
   32ee4:	31964204 	addi	r6,r6,22792
   32ee8:	01400174 	movhi	r5,5
   32eec:	2951e804 	addi	r5,r5,18336
   32ef0:	1809883a 	mov	r4,r3
   32ef4:	00461000 	call	46100 <fprintf>
   32ef8:	0045fd40 	call	45fd4 <abort>
   32efc:	e0fe6017 	ldw	r3,-1664(fp)
   32f00:	e0beae17 	ldw	r2,-1352(fp)
   32f04:	1885883a 	add	r2,r3,r2
   32f08:	e0be6015 	stw	r2,-1664(fp)
   32f0c:	e0fe6017 	ldw	r3,-1664(fp)
   32f10:	e0beae17 	ldw	r2,-1352(fp)
   32f14:	1880022e 	bgeu	r3,r2,32f20 <secp256k1_scalar_sqr_512+0x1fec>
   32f18:	00c00044 	movi	r3,1
   32f1c:	00000106 	br	32f24 <secp256k1_scalar_sqr_512+0x1ff0>
   32f20:	0007883a 	mov	r3,zero
   32f24:	e0be6117 	ldw	r2,-1660(fp)
   32f28:	10c5883a 	add	r2,r2,r3
   32f2c:	e0be6115 	stw	r2,-1660(fp)
   32f30:	e0fe6017 	ldw	r3,-1664(fp)
   32f34:	e0beae17 	ldw	r2,-1352(fp)
   32f38:	1885803a 	cmpltu	r2,r3,r2
   32f3c:	10803fcc 	andi	r2,r2,255
   32f40:	10001126 	beq	r2,zero,32f88 <secp256k1_scalar_sqr_512+0x2054>
   32f44:	e0be6117 	ldw	r2,-1660(fp)
   32f48:	1005003a 	cmpeq	r2,r2,zero
   32f4c:	10803fcc 	andi	r2,r2,255
   32f50:	10000d26 	beq	r2,zero,32f88 <secp256k1_scalar_sqr_512+0x2054>
   32f54:	d0a01617 	ldw	r2,-32680(gp)
   32f58:	10c00317 	ldw	r3,12(r2)
   32f5c:	00800174 	movhi	r2,5
   32f60:	10974704 	addi	r2,r2,23836
   32f64:	d8800015 	stw	r2,0(sp)
   32f68:	01c096c4 	movi	r7,603
   32f6c:	01800174 	movhi	r6,5
   32f70:	31964204 	addi	r6,r6,22792
   32f74:	01400174 	movhi	r5,5
   32f78:	2951e804 	addi	r5,r5,18336
   32f7c:	1809883a 	mov	r4,r3
   32f80:	00461000 	call	46100 <fprintf>
   32f84:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[2], a->d[4]);
   32f88:	e0bf2b17 	ldw	r2,-852(fp)
   32f8c:	10800217 	ldw	r2,8(r2)
   32f90:	e0bf7415 	stw	r2,-560(fp)
   32f94:	e03f7515 	stw	zero,-556(fp)
   32f98:	e0bf2b17 	ldw	r2,-852(fp)
   32f9c:	10800417 	ldw	r2,16(r2)
   32fa0:	e0bf7615 	stw	r2,-552(fp)
   32fa4:	e03f7715 	stw	zero,-548(fp)
   32fa8:	e1bf7617 	ldw	r6,-552(fp)
   32fac:	e1ff7717 	ldw	r7,-548(fp)
   32fb0:	e13f7417 	ldw	r4,-560(fp)
   32fb4:	e17f7517 	ldw	r5,-556(fp)
   32fb8:	00438e00 	call	438e0 <__muldi3>
   32fbc:	1009883a 	mov	r4,r2
   32fc0:	180b883a 	mov	r5,r3
   32fc4:	e13eb015 	stw	r4,-1344(fp)
   32fc8:	e17eb115 	stw	r5,-1340(fp)
   32fcc:	e0beb117 	ldw	r2,-1340(fp)
   32fd0:	1004d83a 	srl	r2,r2,zero
   32fd4:	e0bf7815 	stw	r2,-544(fp)
   32fd8:	e03f7915 	stw	zero,-540(fp)
   32fdc:	e0bf7817 	ldw	r2,-544(fp)
   32fe0:	e0beb215 	stw	r2,-1336(fp)
   32fe4:	e0beb017 	ldw	r2,-1344(fp)
   32fe8:	e0beb315 	stw	r2,-1332(fp)
   32fec:	e0feb217 	ldw	r3,-1336(fp)
   32ff0:	e0beb217 	ldw	r2,-1336(fp)
   32ff4:	1885883a 	add	r2,r3,r2
   32ff8:	e0beb415 	stw	r2,-1328(fp)
   32ffc:	e0feb417 	ldw	r3,-1328(fp)
   33000:	e0beb217 	ldw	r2,-1336(fp)
   33004:	1880022e 	bgeu	r3,r2,33010 <secp256k1_scalar_sqr_512+0x20dc>
   33008:	00c00044 	movi	r3,1
   3300c:	00000106 	br	33014 <secp256k1_scalar_sqr_512+0x20e0>
   33010:	0007883a 	mov	r3,zero
   33014:	e0be6117 	ldw	r2,-1660(fp)
   33018:	10c5883a 	add	r2,r2,r3
   3301c:	e0be6115 	stw	r2,-1660(fp)
   33020:	e0feb417 	ldw	r3,-1328(fp)
   33024:	e0beb217 	ldw	r2,-1336(fp)
   33028:	1885803a 	cmpltu	r2,r3,r2
   3302c:	10803fcc 	andi	r2,r2,255
   33030:	10001126 	beq	r2,zero,33078 <secp256k1_scalar_sqr_512+0x2144>
   33034:	e0be6117 	ldw	r2,-1660(fp)
   33038:	1005003a 	cmpeq	r2,r2,zero
   3303c:	10803fcc 	andi	r2,r2,255
   33040:	10000d26 	beq	r2,zero,33078 <secp256k1_scalar_sqr_512+0x2144>
   33044:	d0a01617 	ldw	r2,-32680(gp)
   33048:	10c00317 	ldw	r3,12(r2)
   3304c:	00800174 	movhi	r2,5
   33050:	10972b04 	addi	r2,r2,23724
   33054:	d8800015 	stw	r2,0(sp)
   33058:	01c09704 	movi	r7,604
   3305c:	01800174 	movhi	r6,5
   33060:	31964204 	addi	r6,r6,22792
   33064:	01400174 	movhi	r5,5
   33068:	2951e804 	addi	r5,r5,18336
   3306c:	1809883a 	mov	r4,r3
   33070:	00461000 	call	46100 <fprintf>
   33074:	0045fd40 	call	45fd4 <abort>
   33078:	e0feb317 	ldw	r3,-1332(fp)
   3307c:	e0beb317 	ldw	r2,-1332(fp)
   33080:	1885883a 	add	r2,r3,r2
   33084:	e0beb515 	stw	r2,-1324(fp)
   33088:	e0feb517 	ldw	r3,-1324(fp)
   3308c:	e0beb317 	ldw	r2,-1332(fp)
   33090:	1880022e 	bgeu	r3,r2,3309c <secp256k1_scalar_sqr_512+0x2168>
   33094:	00c00044 	movi	r3,1
   33098:	00000106 	br	330a0 <secp256k1_scalar_sqr_512+0x216c>
   3309c:	0007883a 	mov	r3,zero
   330a0:	e0beb417 	ldw	r2,-1328(fp)
   330a4:	10c5883a 	add	r2,r2,r3
   330a8:	e0beb415 	stw	r2,-1328(fp)
   330ac:	e0fe5f17 	ldw	r3,-1668(fp)
   330b0:	e0beb517 	ldw	r2,-1324(fp)
   330b4:	1885883a 	add	r2,r3,r2
   330b8:	e0be5f15 	stw	r2,-1668(fp)
   330bc:	e0fe5f17 	ldw	r3,-1668(fp)
   330c0:	e0beb517 	ldw	r2,-1324(fp)
   330c4:	1880022e 	bgeu	r3,r2,330d0 <secp256k1_scalar_sqr_512+0x219c>
   330c8:	00c00044 	movi	r3,1
   330cc:	00000106 	br	330d4 <secp256k1_scalar_sqr_512+0x21a0>
   330d0:	0007883a 	mov	r3,zero
   330d4:	e0beb417 	ldw	r2,-1328(fp)
   330d8:	10c5883a 	add	r2,r2,r3
   330dc:	e0beb415 	stw	r2,-1328(fp)
   330e0:	e0fe5f17 	ldw	r3,-1668(fp)
   330e4:	e0beb517 	ldw	r2,-1324(fp)
   330e8:	1885803a 	cmpltu	r2,r3,r2
   330ec:	1007883a 	mov	r3,r2
   330f0:	e0beb417 	ldw	r2,-1328(fp)
   330f4:	1005003a 	cmpeq	r2,r2,zero
   330f8:	1884703a 	and	r2,r3,r2
   330fc:	10c03fcc 	andi	r3,r2,255
   33100:	e0be6117 	ldw	r2,-1660(fp)
   33104:	10c5883a 	add	r2,r2,r3
   33108:	e0be6115 	stw	r2,-1660(fp)
   3310c:	e0fe5f17 	ldw	r3,-1668(fp)
   33110:	e0beb517 	ldw	r2,-1324(fp)
   33114:	1885803a 	cmpltu	r2,r3,r2
   33118:	10803fcc 	andi	r2,r2,255
   3311c:	10000626 	beq	r2,zero,33138 <secp256k1_scalar_sqr_512+0x2204>
   33120:	e0beb417 	ldw	r2,-1328(fp)
   33124:	1005003a 	cmpeq	r2,r2,zero
   33128:	10803fcc 	andi	r2,r2,255
   3312c:	10000226 	beq	r2,zero,33138 <secp256k1_scalar_sqr_512+0x2204>
   33130:	00800044 	movi	r2,1
   33134:	00000106 	br	3313c <secp256k1_scalar_sqr_512+0x2208>
   33138:	0005883a 	mov	r2,zero
   3313c:	10001126 	beq	r2,zero,33184 <secp256k1_scalar_sqr_512+0x2250>
   33140:	e0be6117 	ldw	r2,-1660(fp)
   33144:	1005003a 	cmpeq	r2,r2,zero
   33148:	10803fcc 	andi	r2,r2,255
   3314c:	10000d26 	beq	r2,zero,33184 <secp256k1_scalar_sqr_512+0x2250>
   33150:	d0a01617 	ldw	r2,-32680(gp)
   33154:	10c00317 	ldw	r3,12(r2)
   33158:	00800174 	movhi	r2,5
   3315c:	10973704 	addi	r2,r2,23772
   33160:	d8800015 	stw	r2,0(sp)
   33164:	01c09704 	movi	r7,604
   33168:	01800174 	movhi	r6,5
   3316c:	31964204 	addi	r6,r6,22792
   33170:	01400174 	movhi	r5,5
   33174:	2951e804 	addi	r5,r5,18336
   33178:	1809883a 	mov	r4,r3
   3317c:	00461000 	call	46100 <fprintf>
   33180:	0045fd40 	call	45fd4 <abort>
   33184:	e0fe6017 	ldw	r3,-1664(fp)
   33188:	e0beb417 	ldw	r2,-1328(fp)
   3318c:	1885883a 	add	r2,r3,r2
   33190:	e0be6015 	stw	r2,-1664(fp)
   33194:	e0fe6017 	ldw	r3,-1664(fp)
   33198:	e0beb417 	ldw	r2,-1328(fp)
   3319c:	1880022e 	bgeu	r3,r2,331a8 <secp256k1_scalar_sqr_512+0x2274>
   331a0:	00c00044 	movi	r3,1
   331a4:	00000106 	br	331ac <secp256k1_scalar_sqr_512+0x2278>
   331a8:	0007883a 	mov	r3,zero
   331ac:	e0be6117 	ldw	r2,-1660(fp)
   331b0:	10c5883a 	add	r2,r2,r3
   331b4:	e0be6115 	stw	r2,-1660(fp)
   331b8:	e0fe6017 	ldw	r3,-1664(fp)
   331bc:	e0beb417 	ldw	r2,-1328(fp)
   331c0:	1885803a 	cmpltu	r2,r3,r2
   331c4:	10803fcc 	andi	r2,r2,255
   331c8:	10001126 	beq	r2,zero,33210 <secp256k1_scalar_sqr_512+0x22dc>
   331cc:	e0be6117 	ldw	r2,-1660(fp)
   331d0:	1005003a 	cmpeq	r2,r2,zero
   331d4:	10803fcc 	andi	r2,r2,255
   331d8:	10000d26 	beq	r2,zero,33210 <secp256k1_scalar_sqr_512+0x22dc>
   331dc:	d0a01617 	ldw	r2,-32680(gp)
   331e0:	10c00317 	ldw	r3,12(r2)
   331e4:	00800174 	movhi	r2,5
   331e8:	10974704 	addi	r2,r2,23836
   331ec:	d8800015 	stw	r2,0(sp)
   331f0:	01c09704 	movi	r7,604
   331f4:	01800174 	movhi	r6,5
   331f8:	31964204 	addi	r6,r6,22792
   331fc:	01400174 	movhi	r5,5
   33200:	2951e804 	addi	r5,r5,18336
   33204:	1809883a 	mov	r4,r3
   33208:	00461000 	call	46100 <fprintf>
   3320c:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[3], a->d[3]);
   33210:	e0bf2b17 	ldw	r2,-852(fp)
   33214:	10800317 	ldw	r2,12(r2)
   33218:	e0bf7a15 	stw	r2,-536(fp)
   3321c:	e03f7b15 	stw	zero,-532(fp)
   33220:	e0bf2b17 	ldw	r2,-852(fp)
   33224:	10800317 	ldw	r2,12(r2)
   33228:	e0bf7c15 	stw	r2,-528(fp)
   3322c:	e03f7d15 	stw	zero,-524(fp)
   33230:	e1bf7c17 	ldw	r6,-528(fp)
   33234:	e1ff7d17 	ldw	r7,-524(fp)
   33238:	e13f7a17 	ldw	r4,-536(fp)
   3323c:	e17f7b17 	ldw	r5,-532(fp)
   33240:	00438e00 	call	438e0 <__muldi3>
   33244:	1009883a 	mov	r4,r2
   33248:	180b883a 	mov	r5,r3
   3324c:	e13eb615 	stw	r4,-1320(fp)
   33250:	e17eb715 	stw	r5,-1316(fp)
   33254:	e0beb717 	ldw	r2,-1316(fp)
   33258:	1004d83a 	srl	r2,r2,zero
   3325c:	e0bf7e15 	stw	r2,-520(fp)
   33260:	e03f7f15 	stw	zero,-516(fp)
   33264:	e0bf7e17 	ldw	r2,-520(fp)
   33268:	e0beb815 	stw	r2,-1312(fp)
   3326c:	e0beb617 	ldw	r2,-1320(fp)
   33270:	e0beb915 	stw	r2,-1308(fp)
   33274:	e0fe5f17 	ldw	r3,-1668(fp)
   33278:	e0beb917 	ldw	r2,-1308(fp)
   3327c:	1885883a 	add	r2,r3,r2
   33280:	e0be5f15 	stw	r2,-1668(fp)
   33284:	e0fe5f17 	ldw	r3,-1668(fp)
   33288:	e0beb917 	ldw	r2,-1308(fp)
   3328c:	1880022e 	bgeu	r3,r2,33298 <secp256k1_scalar_sqr_512+0x2364>
   33290:	00c00044 	movi	r3,1
   33294:	00000106 	br	3329c <secp256k1_scalar_sqr_512+0x2368>
   33298:	0007883a 	mov	r3,zero
   3329c:	e0beb817 	ldw	r2,-1312(fp)
   332a0:	10c5883a 	add	r2,r2,r3
   332a4:	e0beb815 	stw	r2,-1312(fp)
   332a8:	e0fe6017 	ldw	r3,-1664(fp)
   332ac:	e0beb817 	ldw	r2,-1312(fp)
   332b0:	1885883a 	add	r2,r3,r2
   332b4:	e0be6015 	stw	r2,-1664(fp)
   332b8:	e0fe6017 	ldw	r3,-1664(fp)
   332bc:	e0beb817 	ldw	r2,-1312(fp)
   332c0:	1880022e 	bgeu	r3,r2,332cc <secp256k1_scalar_sqr_512+0x2398>
   332c4:	00c00044 	movi	r3,1
   332c8:	00000106 	br	332d0 <secp256k1_scalar_sqr_512+0x239c>
   332cc:	0007883a 	mov	r3,zero
   332d0:	e0be6117 	ldw	r2,-1660(fp)
   332d4:	10c5883a 	add	r2,r2,r3
   332d8:	e0be6115 	stw	r2,-1660(fp)
   332dc:	e0fe6017 	ldw	r3,-1664(fp)
   332e0:	e0beb817 	ldw	r2,-1312(fp)
   332e4:	1885803a 	cmpltu	r2,r3,r2
   332e8:	10803fcc 	andi	r2,r2,255
   332ec:	10001126 	beq	r2,zero,33334 <secp256k1_scalar_sqr_512+0x2400>
   332f0:	e0be6117 	ldw	r2,-1660(fp)
   332f4:	1005003a 	cmpeq	r2,r2,zero
   332f8:	10803fcc 	andi	r2,r2,255
   332fc:	10000d26 	beq	r2,zero,33334 <secp256k1_scalar_sqr_512+0x2400>
   33300:	d0a01617 	ldw	r2,-32680(gp)
   33304:	10c00317 	ldw	r3,12(r2)
   33308:	00800174 	movhi	r2,5
   3330c:	1096d604 	addi	r2,r2,23384
   33310:	d8800015 	stw	r2,0(sp)
   33314:	01c09744 	movi	r7,605
   33318:	01800174 	movhi	r6,5
   3331c:	31964204 	addi	r6,r6,22792
   33320:	01400174 	movhi	r5,5
   33324:	2951e804 	addi	r5,r5,18336
   33328:	1809883a 	mov	r4,r3
   3332c:	00461000 	call	46100 <fprintf>
   33330:	0045fd40 	call	45fd4 <abort>
    extract(l[6]);
   33334:	e0bf2a17 	ldw	r2,-856(fp)
   33338:	10c00604 	addi	r3,r2,24
   3333c:	e0be5f17 	ldw	r2,-1668(fp)
   33340:	18800015 	stw	r2,0(r3)
   33344:	e0be6017 	ldw	r2,-1664(fp)
   33348:	e0be5f15 	stw	r2,-1668(fp)
   3334c:	e0be6117 	ldw	r2,-1660(fp)
   33350:	e0be6015 	stw	r2,-1664(fp)
   33354:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[0], a->d[7]);
   33358:	e0bf2b17 	ldw	r2,-852(fp)
   3335c:	10800017 	ldw	r2,0(r2)
   33360:	e0bf8015 	stw	r2,-512(fp)
   33364:	e03f8115 	stw	zero,-508(fp)
   33368:	e0bf2b17 	ldw	r2,-852(fp)
   3336c:	10800717 	ldw	r2,28(r2)
   33370:	e0bf8215 	stw	r2,-504(fp)
   33374:	e03f8315 	stw	zero,-500(fp)
   33378:	e1bf8217 	ldw	r6,-504(fp)
   3337c:	e1ff8317 	ldw	r7,-500(fp)
   33380:	e13f8017 	ldw	r4,-512(fp)
   33384:	e17f8117 	ldw	r5,-508(fp)
   33388:	00438e00 	call	438e0 <__muldi3>
   3338c:	1009883a 	mov	r4,r2
   33390:	180b883a 	mov	r5,r3
   33394:	e13eba15 	stw	r4,-1304(fp)
   33398:	e17ebb15 	stw	r5,-1300(fp)
   3339c:	e0bebb17 	ldw	r2,-1300(fp)
   333a0:	1004d83a 	srl	r2,r2,zero
   333a4:	e0bf8415 	stw	r2,-496(fp)
   333a8:	e03f8515 	stw	zero,-492(fp)
   333ac:	e0bf8417 	ldw	r2,-496(fp)
   333b0:	e0bebc15 	stw	r2,-1296(fp)
   333b4:	e0beba17 	ldw	r2,-1304(fp)
   333b8:	e0bebd15 	stw	r2,-1292(fp)
   333bc:	e0febc17 	ldw	r3,-1296(fp)
   333c0:	e0bebc17 	ldw	r2,-1296(fp)
   333c4:	1885883a 	add	r2,r3,r2
   333c8:	e0bebe15 	stw	r2,-1288(fp)
   333cc:	e0febe17 	ldw	r3,-1288(fp)
   333d0:	e0bebc17 	ldw	r2,-1296(fp)
   333d4:	1880022e 	bgeu	r3,r2,333e0 <secp256k1_scalar_sqr_512+0x24ac>
   333d8:	00c00044 	movi	r3,1
   333dc:	00000106 	br	333e4 <secp256k1_scalar_sqr_512+0x24b0>
   333e0:	0007883a 	mov	r3,zero
   333e4:	e0be6117 	ldw	r2,-1660(fp)
   333e8:	10c5883a 	add	r2,r2,r3
   333ec:	e0be6115 	stw	r2,-1660(fp)
   333f0:	e0febe17 	ldw	r3,-1288(fp)
   333f4:	e0bebc17 	ldw	r2,-1296(fp)
   333f8:	1885803a 	cmpltu	r2,r3,r2
   333fc:	10803fcc 	andi	r2,r2,255
   33400:	10001126 	beq	r2,zero,33448 <secp256k1_scalar_sqr_512+0x2514>
   33404:	e0be6117 	ldw	r2,-1660(fp)
   33408:	1005003a 	cmpeq	r2,r2,zero
   3340c:	10803fcc 	andi	r2,r2,255
   33410:	10000d26 	beq	r2,zero,33448 <secp256k1_scalar_sqr_512+0x2514>
   33414:	d0a01617 	ldw	r2,-32680(gp)
   33418:	10c00317 	ldw	r3,12(r2)
   3341c:	00800174 	movhi	r2,5
   33420:	10972b04 	addi	r2,r2,23724
   33424:	d8800015 	stw	r2,0(sp)
   33428:	01c097c4 	movi	r7,607
   3342c:	01800174 	movhi	r6,5
   33430:	31964204 	addi	r6,r6,22792
   33434:	01400174 	movhi	r5,5
   33438:	2951e804 	addi	r5,r5,18336
   3343c:	1809883a 	mov	r4,r3
   33440:	00461000 	call	46100 <fprintf>
   33444:	0045fd40 	call	45fd4 <abort>
   33448:	e0febd17 	ldw	r3,-1292(fp)
   3344c:	e0bebd17 	ldw	r2,-1292(fp)
   33450:	1885883a 	add	r2,r3,r2
   33454:	e0bebf15 	stw	r2,-1284(fp)
   33458:	e0febf17 	ldw	r3,-1284(fp)
   3345c:	e0bebd17 	ldw	r2,-1292(fp)
   33460:	1880022e 	bgeu	r3,r2,3346c <secp256k1_scalar_sqr_512+0x2538>
   33464:	00c00044 	movi	r3,1
   33468:	00000106 	br	33470 <secp256k1_scalar_sqr_512+0x253c>
   3346c:	0007883a 	mov	r3,zero
   33470:	e0bebe17 	ldw	r2,-1288(fp)
   33474:	10c5883a 	add	r2,r2,r3
   33478:	e0bebe15 	stw	r2,-1288(fp)
   3347c:	e0fe5f17 	ldw	r3,-1668(fp)
   33480:	e0bebf17 	ldw	r2,-1284(fp)
   33484:	1885883a 	add	r2,r3,r2
   33488:	e0be5f15 	stw	r2,-1668(fp)
   3348c:	e0fe5f17 	ldw	r3,-1668(fp)
   33490:	e0bebf17 	ldw	r2,-1284(fp)
   33494:	1880022e 	bgeu	r3,r2,334a0 <secp256k1_scalar_sqr_512+0x256c>
   33498:	00c00044 	movi	r3,1
   3349c:	00000106 	br	334a4 <secp256k1_scalar_sqr_512+0x2570>
   334a0:	0007883a 	mov	r3,zero
   334a4:	e0bebe17 	ldw	r2,-1288(fp)
   334a8:	10c5883a 	add	r2,r2,r3
   334ac:	e0bebe15 	stw	r2,-1288(fp)
   334b0:	e0fe5f17 	ldw	r3,-1668(fp)
   334b4:	e0bebf17 	ldw	r2,-1284(fp)
   334b8:	1885803a 	cmpltu	r2,r3,r2
   334bc:	1007883a 	mov	r3,r2
   334c0:	e0bebe17 	ldw	r2,-1288(fp)
   334c4:	1005003a 	cmpeq	r2,r2,zero
   334c8:	1884703a 	and	r2,r3,r2
   334cc:	10c03fcc 	andi	r3,r2,255
   334d0:	e0be6117 	ldw	r2,-1660(fp)
   334d4:	10c5883a 	add	r2,r2,r3
   334d8:	e0be6115 	stw	r2,-1660(fp)
   334dc:	e0fe5f17 	ldw	r3,-1668(fp)
   334e0:	e0bebf17 	ldw	r2,-1284(fp)
   334e4:	1885803a 	cmpltu	r2,r3,r2
   334e8:	10803fcc 	andi	r2,r2,255
   334ec:	10000626 	beq	r2,zero,33508 <secp256k1_scalar_sqr_512+0x25d4>
   334f0:	e0bebe17 	ldw	r2,-1288(fp)
   334f4:	1005003a 	cmpeq	r2,r2,zero
   334f8:	10803fcc 	andi	r2,r2,255
   334fc:	10000226 	beq	r2,zero,33508 <secp256k1_scalar_sqr_512+0x25d4>
   33500:	00800044 	movi	r2,1
   33504:	00000106 	br	3350c <secp256k1_scalar_sqr_512+0x25d8>
   33508:	0005883a 	mov	r2,zero
   3350c:	10001126 	beq	r2,zero,33554 <secp256k1_scalar_sqr_512+0x2620>
   33510:	e0be6117 	ldw	r2,-1660(fp)
   33514:	1005003a 	cmpeq	r2,r2,zero
   33518:	10803fcc 	andi	r2,r2,255
   3351c:	10000d26 	beq	r2,zero,33554 <secp256k1_scalar_sqr_512+0x2620>
   33520:	d0a01617 	ldw	r2,-32680(gp)
   33524:	10c00317 	ldw	r3,12(r2)
   33528:	00800174 	movhi	r2,5
   3352c:	10973704 	addi	r2,r2,23772
   33530:	d8800015 	stw	r2,0(sp)
   33534:	01c097c4 	movi	r7,607
   33538:	01800174 	movhi	r6,5
   3353c:	31964204 	addi	r6,r6,22792
   33540:	01400174 	movhi	r5,5
   33544:	2951e804 	addi	r5,r5,18336
   33548:	1809883a 	mov	r4,r3
   3354c:	00461000 	call	46100 <fprintf>
   33550:	0045fd40 	call	45fd4 <abort>
   33554:	e0fe6017 	ldw	r3,-1664(fp)
   33558:	e0bebe17 	ldw	r2,-1288(fp)
   3355c:	1885883a 	add	r2,r3,r2
   33560:	e0be6015 	stw	r2,-1664(fp)
   33564:	e0fe6017 	ldw	r3,-1664(fp)
   33568:	e0bebe17 	ldw	r2,-1288(fp)
   3356c:	1880022e 	bgeu	r3,r2,33578 <secp256k1_scalar_sqr_512+0x2644>
   33570:	00c00044 	movi	r3,1
   33574:	00000106 	br	3357c <secp256k1_scalar_sqr_512+0x2648>
   33578:	0007883a 	mov	r3,zero
   3357c:	e0be6117 	ldw	r2,-1660(fp)
   33580:	10c5883a 	add	r2,r2,r3
   33584:	e0be6115 	stw	r2,-1660(fp)
   33588:	e0fe6017 	ldw	r3,-1664(fp)
   3358c:	e0bebe17 	ldw	r2,-1288(fp)
   33590:	1885803a 	cmpltu	r2,r3,r2
   33594:	10803fcc 	andi	r2,r2,255
   33598:	10001126 	beq	r2,zero,335e0 <secp256k1_scalar_sqr_512+0x26ac>
   3359c:	e0be6117 	ldw	r2,-1660(fp)
   335a0:	1005003a 	cmpeq	r2,r2,zero
   335a4:	10803fcc 	andi	r2,r2,255
   335a8:	10000d26 	beq	r2,zero,335e0 <secp256k1_scalar_sqr_512+0x26ac>
   335ac:	d0a01617 	ldw	r2,-32680(gp)
   335b0:	10c00317 	ldw	r3,12(r2)
   335b4:	00800174 	movhi	r2,5
   335b8:	10974704 	addi	r2,r2,23836
   335bc:	d8800015 	stw	r2,0(sp)
   335c0:	01c097c4 	movi	r7,607
   335c4:	01800174 	movhi	r6,5
   335c8:	31964204 	addi	r6,r6,22792
   335cc:	01400174 	movhi	r5,5
   335d0:	2951e804 	addi	r5,r5,18336
   335d4:	1809883a 	mov	r4,r3
   335d8:	00461000 	call	46100 <fprintf>
   335dc:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[1], a->d[6]);
   335e0:	e0bf2b17 	ldw	r2,-852(fp)
   335e4:	10800117 	ldw	r2,4(r2)
   335e8:	e0bf8615 	stw	r2,-488(fp)
   335ec:	e03f8715 	stw	zero,-484(fp)
   335f0:	e0bf2b17 	ldw	r2,-852(fp)
   335f4:	10800617 	ldw	r2,24(r2)
   335f8:	e0bf8815 	stw	r2,-480(fp)
   335fc:	e03f8915 	stw	zero,-476(fp)
   33600:	e1bf8817 	ldw	r6,-480(fp)
   33604:	e1ff8917 	ldw	r7,-476(fp)
   33608:	e13f8617 	ldw	r4,-488(fp)
   3360c:	e17f8717 	ldw	r5,-484(fp)
   33610:	00438e00 	call	438e0 <__muldi3>
   33614:	1009883a 	mov	r4,r2
   33618:	180b883a 	mov	r5,r3
   3361c:	e13ec015 	stw	r4,-1280(fp)
   33620:	e17ec115 	stw	r5,-1276(fp)
   33624:	e0bec117 	ldw	r2,-1276(fp)
   33628:	1004d83a 	srl	r2,r2,zero
   3362c:	e0bf8a15 	stw	r2,-472(fp)
   33630:	e03f8b15 	stw	zero,-468(fp)
   33634:	e0bf8a17 	ldw	r2,-472(fp)
   33638:	e0bec215 	stw	r2,-1272(fp)
   3363c:	e0bec017 	ldw	r2,-1280(fp)
   33640:	e0bec315 	stw	r2,-1268(fp)
   33644:	e0fec217 	ldw	r3,-1272(fp)
   33648:	e0bec217 	ldw	r2,-1272(fp)
   3364c:	1885883a 	add	r2,r3,r2
   33650:	e0bec415 	stw	r2,-1264(fp)
   33654:	e0fec417 	ldw	r3,-1264(fp)
   33658:	e0bec217 	ldw	r2,-1272(fp)
   3365c:	1880022e 	bgeu	r3,r2,33668 <secp256k1_scalar_sqr_512+0x2734>
   33660:	00c00044 	movi	r3,1
   33664:	00000106 	br	3366c <secp256k1_scalar_sqr_512+0x2738>
   33668:	0007883a 	mov	r3,zero
   3366c:	e0be6117 	ldw	r2,-1660(fp)
   33670:	10c5883a 	add	r2,r2,r3
   33674:	e0be6115 	stw	r2,-1660(fp)
   33678:	e0fec417 	ldw	r3,-1264(fp)
   3367c:	e0bec217 	ldw	r2,-1272(fp)
   33680:	1885803a 	cmpltu	r2,r3,r2
   33684:	10803fcc 	andi	r2,r2,255
   33688:	10001126 	beq	r2,zero,336d0 <secp256k1_scalar_sqr_512+0x279c>
   3368c:	e0be6117 	ldw	r2,-1660(fp)
   33690:	1005003a 	cmpeq	r2,r2,zero
   33694:	10803fcc 	andi	r2,r2,255
   33698:	10000d26 	beq	r2,zero,336d0 <secp256k1_scalar_sqr_512+0x279c>
   3369c:	d0a01617 	ldw	r2,-32680(gp)
   336a0:	10c00317 	ldw	r3,12(r2)
   336a4:	00800174 	movhi	r2,5
   336a8:	10972b04 	addi	r2,r2,23724
   336ac:	d8800015 	stw	r2,0(sp)
   336b0:	01c09804 	movi	r7,608
   336b4:	01800174 	movhi	r6,5
   336b8:	31964204 	addi	r6,r6,22792
   336bc:	01400174 	movhi	r5,5
   336c0:	2951e804 	addi	r5,r5,18336
   336c4:	1809883a 	mov	r4,r3
   336c8:	00461000 	call	46100 <fprintf>
   336cc:	0045fd40 	call	45fd4 <abort>
   336d0:	e0fec317 	ldw	r3,-1268(fp)
   336d4:	e0bec317 	ldw	r2,-1268(fp)
   336d8:	1885883a 	add	r2,r3,r2
   336dc:	e0bec515 	stw	r2,-1260(fp)
   336e0:	e0fec517 	ldw	r3,-1260(fp)
   336e4:	e0bec317 	ldw	r2,-1268(fp)
   336e8:	1880022e 	bgeu	r3,r2,336f4 <secp256k1_scalar_sqr_512+0x27c0>
   336ec:	00c00044 	movi	r3,1
   336f0:	00000106 	br	336f8 <secp256k1_scalar_sqr_512+0x27c4>
   336f4:	0007883a 	mov	r3,zero
   336f8:	e0bec417 	ldw	r2,-1264(fp)
   336fc:	10c5883a 	add	r2,r2,r3
   33700:	e0bec415 	stw	r2,-1264(fp)
   33704:	e0fe5f17 	ldw	r3,-1668(fp)
   33708:	e0bec517 	ldw	r2,-1260(fp)
   3370c:	1885883a 	add	r2,r3,r2
   33710:	e0be5f15 	stw	r2,-1668(fp)
   33714:	e0fe5f17 	ldw	r3,-1668(fp)
   33718:	e0bec517 	ldw	r2,-1260(fp)
   3371c:	1880022e 	bgeu	r3,r2,33728 <secp256k1_scalar_sqr_512+0x27f4>
   33720:	00c00044 	movi	r3,1
   33724:	00000106 	br	3372c <secp256k1_scalar_sqr_512+0x27f8>
   33728:	0007883a 	mov	r3,zero
   3372c:	e0bec417 	ldw	r2,-1264(fp)
   33730:	10c5883a 	add	r2,r2,r3
   33734:	e0bec415 	stw	r2,-1264(fp)
   33738:	e0fe5f17 	ldw	r3,-1668(fp)
   3373c:	e0bec517 	ldw	r2,-1260(fp)
   33740:	1885803a 	cmpltu	r2,r3,r2
   33744:	1007883a 	mov	r3,r2
   33748:	e0bec417 	ldw	r2,-1264(fp)
   3374c:	1005003a 	cmpeq	r2,r2,zero
   33750:	1884703a 	and	r2,r3,r2
   33754:	10c03fcc 	andi	r3,r2,255
   33758:	e0be6117 	ldw	r2,-1660(fp)
   3375c:	10c5883a 	add	r2,r2,r3
   33760:	e0be6115 	stw	r2,-1660(fp)
   33764:	e0fe5f17 	ldw	r3,-1668(fp)
   33768:	e0bec517 	ldw	r2,-1260(fp)
   3376c:	1885803a 	cmpltu	r2,r3,r2
   33770:	10803fcc 	andi	r2,r2,255
   33774:	10000626 	beq	r2,zero,33790 <secp256k1_scalar_sqr_512+0x285c>
   33778:	e0bec417 	ldw	r2,-1264(fp)
   3377c:	1005003a 	cmpeq	r2,r2,zero
   33780:	10803fcc 	andi	r2,r2,255
   33784:	10000226 	beq	r2,zero,33790 <secp256k1_scalar_sqr_512+0x285c>
   33788:	00800044 	movi	r2,1
   3378c:	00000106 	br	33794 <secp256k1_scalar_sqr_512+0x2860>
   33790:	0005883a 	mov	r2,zero
   33794:	10001126 	beq	r2,zero,337dc <secp256k1_scalar_sqr_512+0x28a8>
   33798:	e0be6117 	ldw	r2,-1660(fp)
   3379c:	1005003a 	cmpeq	r2,r2,zero
   337a0:	10803fcc 	andi	r2,r2,255
   337a4:	10000d26 	beq	r2,zero,337dc <secp256k1_scalar_sqr_512+0x28a8>
   337a8:	d0a01617 	ldw	r2,-32680(gp)
   337ac:	10c00317 	ldw	r3,12(r2)
   337b0:	00800174 	movhi	r2,5
   337b4:	10973704 	addi	r2,r2,23772
   337b8:	d8800015 	stw	r2,0(sp)
   337bc:	01c09804 	movi	r7,608
   337c0:	01800174 	movhi	r6,5
   337c4:	31964204 	addi	r6,r6,22792
   337c8:	01400174 	movhi	r5,5
   337cc:	2951e804 	addi	r5,r5,18336
   337d0:	1809883a 	mov	r4,r3
   337d4:	00461000 	call	46100 <fprintf>
   337d8:	0045fd40 	call	45fd4 <abort>
   337dc:	e0fe6017 	ldw	r3,-1664(fp)
   337e0:	e0bec417 	ldw	r2,-1264(fp)
   337e4:	1885883a 	add	r2,r3,r2
   337e8:	e0be6015 	stw	r2,-1664(fp)
   337ec:	e0fe6017 	ldw	r3,-1664(fp)
   337f0:	e0bec417 	ldw	r2,-1264(fp)
   337f4:	1880022e 	bgeu	r3,r2,33800 <secp256k1_scalar_sqr_512+0x28cc>
   337f8:	00c00044 	movi	r3,1
   337fc:	00000106 	br	33804 <secp256k1_scalar_sqr_512+0x28d0>
   33800:	0007883a 	mov	r3,zero
   33804:	e0be6117 	ldw	r2,-1660(fp)
   33808:	10c5883a 	add	r2,r2,r3
   3380c:	e0be6115 	stw	r2,-1660(fp)
   33810:	e0fe6017 	ldw	r3,-1664(fp)
   33814:	e0bec417 	ldw	r2,-1264(fp)
   33818:	1885803a 	cmpltu	r2,r3,r2
   3381c:	10803fcc 	andi	r2,r2,255
   33820:	10001126 	beq	r2,zero,33868 <secp256k1_scalar_sqr_512+0x2934>
   33824:	e0be6117 	ldw	r2,-1660(fp)
   33828:	1005003a 	cmpeq	r2,r2,zero
   3382c:	10803fcc 	andi	r2,r2,255
   33830:	10000d26 	beq	r2,zero,33868 <secp256k1_scalar_sqr_512+0x2934>
   33834:	d0a01617 	ldw	r2,-32680(gp)
   33838:	10c00317 	ldw	r3,12(r2)
   3383c:	00800174 	movhi	r2,5
   33840:	10974704 	addi	r2,r2,23836
   33844:	d8800015 	stw	r2,0(sp)
   33848:	01c09804 	movi	r7,608
   3384c:	01800174 	movhi	r6,5
   33850:	31964204 	addi	r6,r6,22792
   33854:	01400174 	movhi	r5,5
   33858:	2951e804 	addi	r5,r5,18336
   3385c:	1809883a 	mov	r4,r3
   33860:	00461000 	call	46100 <fprintf>
   33864:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[2], a->d[5]);
   33868:	e0bf2b17 	ldw	r2,-852(fp)
   3386c:	10800217 	ldw	r2,8(r2)
   33870:	e0bf8c15 	stw	r2,-464(fp)
   33874:	e03f8d15 	stw	zero,-460(fp)
   33878:	e0bf2b17 	ldw	r2,-852(fp)
   3387c:	10800517 	ldw	r2,20(r2)
   33880:	e0bf8e15 	stw	r2,-456(fp)
   33884:	e03f8f15 	stw	zero,-452(fp)
   33888:	e1bf8e17 	ldw	r6,-456(fp)
   3388c:	e1ff8f17 	ldw	r7,-452(fp)
   33890:	e13f8c17 	ldw	r4,-464(fp)
   33894:	e17f8d17 	ldw	r5,-460(fp)
   33898:	00438e00 	call	438e0 <__muldi3>
   3389c:	1009883a 	mov	r4,r2
   338a0:	180b883a 	mov	r5,r3
   338a4:	e13ec615 	stw	r4,-1256(fp)
   338a8:	e17ec715 	stw	r5,-1252(fp)
   338ac:	e0bec717 	ldw	r2,-1252(fp)
   338b0:	1004d83a 	srl	r2,r2,zero
   338b4:	e0bf9015 	stw	r2,-448(fp)
   338b8:	e03f9115 	stw	zero,-444(fp)
   338bc:	e0bf9017 	ldw	r2,-448(fp)
   338c0:	e0bec815 	stw	r2,-1248(fp)
   338c4:	e0bec617 	ldw	r2,-1256(fp)
   338c8:	e0bec915 	stw	r2,-1244(fp)
   338cc:	e0fec817 	ldw	r3,-1248(fp)
   338d0:	e0bec817 	ldw	r2,-1248(fp)
   338d4:	1885883a 	add	r2,r3,r2
   338d8:	e0beca15 	stw	r2,-1240(fp)
   338dc:	e0feca17 	ldw	r3,-1240(fp)
   338e0:	e0bec817 	ldw	r2,-1248(fp)
   338e4:	1880022e 	bgeu	r3,r2,338f0 <secp256k1_scalar_sqr_512+0x29bc>
   338e8:	00c00044 	movi	r3,1
   338ec:	00000106 	br	338f4 <secp256k1_scalar_sqr_512+0x29c0>
   338f0:	0007883a 	mov	r3,zero
   338f4:	e0be6117 	ldw	r2,-1660(fp)
   338f8:	10c5883a 	add	r2,r2,r3
   338fc:	e0be6115 	stw	r2,-1660(fp)
   33900:	e0feca17 	ldw	r3,-1240(fp)
   33904:	e0bec817 	ldw	r2,-1248(fp)
   33908:	1885803a 	cmpltu	r2,r3,r2
   3390c:	10803fcc 	andi	r2,r2,255
   33910:	10001126 	beq	r2,zero,33958 <secp256k1_scalar_sqr_512+0x2a24>
   33914:	e0be6117 	ldw	r2,-1660(fp)
   33918:	1005003a 	cmpeq	r2,r2,zero
   3391c:	10803fcc 	andi	r2,r2,255
   33920:	10000d26 	beq	r2,zero,33958 <secp256k1_scalar_sqr_512+0x2a24>
   33924:	d0a01617 	ldw	r2,-32680(gp)
   33928:	10c00317 	ldw	r3,12(r2)
   3392c:	00800174 	movhi	r2,5
   33930:	10972b04 	addi	r2,r2,23724
   33934:	d8800015 	stw	r2,0(sp)
   33938:	01c09844 	movi	r7,609
   3393c:	01800174 	movhi	r6,5
   33940:	31964204 	addi	r6,r6,22792
   33944:	01400174 	movhi	r5,5
   33948:	2951e804 	addi	r5,r5,18336
   3394c:	1809883a 	mov	r4,r3
   33950:	00461000 	call	46100 <fprintf>
   33954:	0045fd40 	call	45fd4 <abort>
   33958:	e0fec917 	ldw	r3,-1244(fp)
   3395c:	e0bec917 	ldw	r2,-1244(fp)
   33960:	1885883a 	add	r2,r3,r2
   33964:	e0becb15 	stw	r2,-1236(fp)
   33968:	e0fecb17 	ldw	r3,-1236(fp)
   3396c:	e0bec917 	ldw	r2,-1244(fp)
   33970:	1880022e 	bgeu	r3,r2,3397c <secp256k1_scalar_sqr_512+0x2a48>
   33974:	00c00044 	movi	r3,1
   33978:	00000106 	br	33980 <secp256k1_scalar_sqr_512+0x2a4c>
   3397c:	0007883a 	mov	r3,zero
   33980:	e0beca17 	ldw	r2,-1240(fp)
   33984:	10c5883a 	add	r2,r2,r3
   33988:	e0beca15 	stw	r2,-1240(fp)
   3398c:	e0fe5f17 	ldw	r3,-1668(fp)
   33990:	e0becb17 	ldw	r2,-1236(fp)
   33994:	1885883a 	add	r2,r3,r2
   33998:	e0be5f15 	stw	r2,-1668(fp)
   3399c:	e0fe5f17 	ldw	r3,-1668(fp)
   339a0:	e0becb17 	ldw	r2,-1236(fp)
   339a4:	1880022e 	bgeu	r3,r2,339b0 <secp256k1_scalar_sqr_512+0x2a7c>
   339a8:	00c00044 	movi	r3,1
   339ac:	00000106 	br	339b4 <secp256k1_scalar_sqr_512+0x2a80>
   339b0:	0007883a 	mov	r3,zero
   339b4:	e0beca17 	ldw	r2,-1240(fp)
   339b8:	10c5883a 	add	r2,r2,r3
   339bc:	e0beca15 	stw	r2,-1240(fp)
   339c0:	e0fe5f17 	ldw	r3,-1668(fp)
   339c4:	e0becb17 	ldw	r2,-1236(fp)
   339c8:	1885803a 	cmpltu	r2,r3,r2
   339cc:	1007883a 	mov	r3,r2
   339d0:	e0beca17 	ldw	r2,-1240(fp)
   339d4:	1005003a 	cmpeq	r2,r2,zero
   339d8:	1884703a 	and	r2,r3,r2
   339dc:	10c03fcc 	andi	r3,r2,255
   339e0:	e0be6117 	ldw	r2,-1660(fp)
   339e4:	10c5883a 	add	r2,r2,r3
   339e8:	e0be6115 	stw	r2,-1660(fp)
   339ec:	e0fe5f17 	ldw	r3,-1668(fp)
   339f0:	e0becb17 	ldw	r2,-1236(fp)
   339f4:	1885803a 	cmpltu	r2,r3,r2
   339f8:	10803fcc 	andi	r2,r2,255
   339fc:	10000626 	beq	r2,zero,33a18 <secp256k1_scalar_sqr_512+0x2ae4>
   33a00:	e0beca17 	ldw	r2,-1240(fp)
   33a04:	1005003a 	cmpeq	r2,r2,zero
   33a08:	10803fcc 	andi	r2,r2,255
   33a0c:	10000226 	beq	r2,zero,33a18 <secp256k1_scalar_sqr_512+0x2ae4>
   33a10:	00800044 	movi	r2,1
   33a14:	00000106 	br	33a1c <secp256k1_scalar_sqr_512+0x2ae8>
   33a18:	0005883a 	mov	r2,zero
   33a1c:	10001126 	beq	r2,zero,33a64 <secp256k1_scalar_sqr_512+0x2b30>
   33a20:	e0be6117 	ldw	r2,-1660(fp)
   33a24:	1005003a 	cmpeq	r2,r2,zero
   33a28:	10803fcc 	andi	r2,r2,255
   33a2c:	10000d26 	beq	r2,zero,33a64 <secp256k1_scalar_sqr_512+0x2b30>
   33a30:	d0a01617 	ldw	r2,-32680(gp)
   33a34:	10c00317 	ldw	r3,12(r2)
   33a38:	00800174 	movhi	r2,5
   33a3c:	10973704 	addi	r2,r2,23772
   33a40:	d8800015 	stw	r2,0(sp)
   33a44:	01c09844 	movi	r7,609
   33a48:	01800174 	movhi	r6,5
   33a4c:	31964204 	addi	r6,r6,22792
   33a50:	01400174 	movhi	r5,5
   33a54:	2951e804 	addi	r5,r5,18336
   33a58:	1809883a 	mov	r4,r3
   33a5c:	00461000 	call	46100 <fprintf>
   33a60:	0045fd40 	call	45fd4 <abort>
   33a64:	e0fe6017 	ldw	r3,-1664(fp)
   33a68:	e0beca17 	ldw	r2,-1240(fp)
   33a6c:	1885883a 	add	r2,r3,r2
   33a70:	e0be6015 	stw	r2,-1664(fp)
   33a74:	e0fe6017 	ldw	r3,-1664(fp)
   33a78:	e0beca17 	ldw	r2,-1240(fp)
   33a7c:	1880022e 	bgeu	r3,r2,33a88 <secp256k1_scalar_sqr_512+0x2b54>
   33a80:	00c00044 	movi	r3,1
   33a84:	00000106 	br	33a8c <secp256k1_scalar_sqr_512+0x2b58>
   33a88:	0007883a 	mov	r3,zero
   33a8c:	e0be6117 	ldw	r2,-1660(fp)
   33a90:	10c5883a 	add	r2,r2,r3
   33a94:	e0be6115 	stw	r2,-1660(fp)
   33a98:	e0fe6017 	ldw	r3,-1664(fp)
   33a9c:	e0beca17 	ldw	r2,-1240(fp)
   33aa0:	1885803a 	cmpltu	r2,r3,r2
   33aa4:	10803fcc 	andi	r2,r2,255
   33aa8:	10001126 	beq	r2,zero,33af0 <secp256k1_scalar_sqr_512+0x2bbc>
   33aac:	e0be6117 	ldw	r2,-1660(fp)
   33ab0:	1005003a 	cmpeq	r2,r2,zero
   33ab4:	10803fcc 	andi	r2,r2,255
   33ab8:	10000d26 	beq	r2,zero,33af0 <secp256k1_scalar_sqr_512+0x2bbc>
   33abc:	d0a01617 	ldw	r2,-32680(gp)
   33ac0:	10c00317 	ldw	r3,12(r2)
   33ac4:	00800174 	movhi	r2,5
   33ac8:	10974704 	addi	r2,r2,23836
   33acc:	d8800015 	stw	r2,0(sp)
   33ad0:	01c09844 	movi	r7,609
   33ad4:	01800174 	movhi	r6,5
   33ad8:	31964204 	addi	r6,r6,22792
   33adc:	01400174 	movhi	r5,5
   33ae0:	2951e804 	addi	r5,r5,18336
   33ae4:	1809883a 	mov	r4,r3
   33ae8:	00461000 	call	46100 <fprintf>
   33aec:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[3], a->d[4]);
   33af0:	e0bf2b17 	ldw	r2,-852(fp)
   33af4:	10800317 	ldw	r2,12(r2)
   33af8:	e0bf9215 	stw	r2,-440(fp)
   33afc:	e03f9315 	stw	zero,-436(fp)
   33b00:	e0bf2b17 	ldw	r2,-852(fp)
   33b04:	10800417 	ldw	r2,16(r2)
   33b08:	e0bf9415 	stw	r2,-432(fp)
   33b0c:	e03f9515 	stw	zero,-428(fp)
   33b10:	e1bf9417 	ldw	r6,-432(fp)
   33b14:	e1ff9517 	ldw	r7,-428(fp)
   33b18:	e13f9217 	ldw	r4,-440(fp)
   33b1c:	e17f9317 	ldw	r5,-436(fp)
   33b20:	00438e00 	call	438e0 <__muldi3>
   33b24:	1009883a 	mov	r4,r2
   33b28:	180b883a 	mov	r5,r3
   33b2c:	e13ecc15 	stw	r4,-1232(fp)
   33b30:	e17ecd15 	stw	r5,-1228(fp)
   33b34:	e0becd17 	ldw	r2,-1228(fp)
   33b38:	1004d83a 	srl	r2,r2,zero
   33b3c:	e0bf9615 	stw	r2,-424(fp)
   33b40:	e03f9715 	stw	zero,-420(fp)
   33b44:	e0bf9617 	ldw	r2,-424(fp)
   33b48:	e0bece15 	stw	r2,-1224(fp)
   33b4c:	e0becc17 	ldw	r2,-1232(fp)
   33b50:	e0becf15 	stw	r2,-1220(fp)
   33b54:	e0fece17 	ldw	r3,-1224(fp)
   33b58:	e0bece17 	ldw	r2,-1224(fp)
   33b5c:	1885883a 	add	r2,r3,r2
   33b60:	e0bed015 	stw	r2,-1216(fp)
   33b64:	e0fed017 	ldw	r3,-1216(fp)
   33b68:	e0bece17 	ldw	r2,-1224(fp)
   33b6c:	1880022e 	bgeu	r3,r2,33b78 <secp256k1_scalar_sqr_512+0x2c44>
   33b70:	00c00044 	movi	r3,1
   33b74:	00000106 	br	33b7c <secp256k1_scalar_sqr_512+0x2c48>
   33b78:	0007883a 	mov	r3,zero
   33b7c:	e0be6117 	ldw	r2,-1660(fp)
   33b80:	10c5883a 	add	r2,r2,r3
   33b84:	e0be6115 	stw	r2,-1660(fp)
   33b88:	e0fed017 	ldw	r3,-1216(fp)
   33b8c:	e0bece17 	ldw	r2,-1224(fp)
   33b90:	1885803a 	cmpltu	r2,r3,r2
   33b94:	10803fcc 	andi	r2,r2,255
   33b98:	10001126 	beq	r2,zero,33be0 <secp256k1_scalar_sqr_512+0x2cac>
   33b9c:	e0be6117 	ldw	r2,-1660(fp)
   33ba0:	1005003a 	cmpeq	r2,r2,zero
   33ba4:	10803fcc 	andi	r2,r2,255
   33ba8:	10000d26 	beq	r2,zero,33be0 <secp256k1_scalar_sqr_512+0x2cac>
   33bac:	d0a01617 	ldw	r2,-32680(gp)
   33bb0:	10c00317 	ldw	r3,12(r2)
   33bb4:	00800174 	movhi	r2,5
   33bb8:	10972b04 	addi	r2,r2,23724
   33bbc:	d8800015 	stw	r2,0(sp)
   33bc0:	01c09884 	movi	r7,610
   33bc4:	01800174 	movhi	r6,5
   33bc8:	31964204 	addi	r6,r6,22792
   33bcc:	01400174 	movhi	r5,5
   33bd0:	2951e804 	addi	r5,r5,18336
   33bd4:	1809883a 	mov	r4,r3
   33bd8:	00461000 	call	46100 <fprintf>
   33bdc:	0045fd40 	call	45fd4 <abort>
   33be0:	e0fecf17 	ldw	r3,-1220(fp)
   33be4:	e0becf17 	ldw	r2,-1220(fp)
   33be8:	1885883a 	add	r2,r3,r2
   33bec:	e0bed115 	stw	r2,-1212(fp)
   33bf0:	e0fed117 	ldw	r3,-1212(fp)
   33bf4:	e0becf17 	ldw	r2,-1220(fp)
   33bf8:	1880022e 	bgeu	r3,r2,33c04 <secp256k1_scalar_sqr_512+0x2cd0>
   33bfc:	00c00044 	movi	r3,1
   33c00:	00000106 	br	33c08 <secp256k1_scalar_sqr_512+0x2cd4>
   33c04:	0007883a 	mov	r3,zero
   33c08:	e0bed017 	ldw	r2,-1216(fp)
   33c0c:	10c5883a 	add	r2,r2,r3
   33c10:	e0bed015 	stw	r2,-1216(fp)
   33c14:	e0fe5f17 	ldw	r3,-1668(fp)
   33c18:	e0bed117 	ldw	r2,-1212(fp)
   33c1c:	1885883a 	add	r2,r3,r2
   33c20:	e0be5f15 	stw	r2,-1668(fp)
   33c24:	e0fe5f17 	ldw	r3,-1668(fp)
   33c28:	e0bed117 	ldw	r2,-1212(fp)
   33c2c:	1880022e 	bgeu	r3,r2,33c38 <secp256k1_scalar_sqr_512+0x2d04>
   33c30:	00c00044 	movi	r3,1
   33c34:	00000106 	br	33c3c <secp256k1_scalar_sqr_512+0x2d08>
   33c38:	0007883a 	mov	r3,zero
   33c3c:	e0bed017 	ldw	r2,-1216(fp)
   33c40:	10c5883a 	add	r2,r2,r3
   33c44:	e0bed015 	stw	r2,-1216(fp)
   33c48:	e0fe5f17 	ldw	r3,-1668(fp)
   33c4c:	e0bed117 	ldw	r2,-1212(fp)
   33c50:	1885803a 	cmpltu	r2,r3,r2
   33c54:	1007883a 	mov	r3,r2
   33c58:	e0bed017 	ldw	r2,-1216(fp)
   33c5c:	1005003a 	cmpeq	r2,r2,zero
   33c60:	1884703a 	and	r2,r3,r2
   33c64:	10c03fcc 	andi	r3,r2,255
   33c68:	e0be6117 	ldw	r2,-1660(fp)
   33c6c:	10c5883a 	add	r2,r2,r3
   33c70:	e0be6115 	stw	r2,-1660(fp)
   33c74:	e0fe5f17 	ldw	r3,-1668(fp)
   33c78:	e0bed117 	ldw	r2,-1212(fp)
   33c7c:	1885803a 	cmpltu	r2,r3,r2
   33c80:	10803fcc 	andi	r2,r2,255
   33c84:	10000626 	beq	r2,zero,33ca0 <secp256k1_scalar_sqr_512+0x2d6c>
   33c88:	e0bed017 	ldw	r2,-1216(fp)
   33c8c:	1005003a 	cmpeq	r2,r2,zero
   33c90:	10803fcc 	andi	r2,r2,255
   33c94:	10000226 	beq	r2,zero,33ca0 <secp256k1_scalar_sqr_512+0x2d6c>
   33c98:	00800044 	movi	r2,1
   33c9c:	00000106 	br	33ca4 <secp256k1_scalar_sqr_512+0x2d70>
   33ca0:	0005883a 	mov	r2,zero
   33ca4:	10001126 	beq	r2,zero,33cec <secp256k1_scalar_sqr_512+0x2db8>
   33ca8:	e0be6117 	ldw	r2,-1660(fp)
   33cac:	1005003a 	cmpeq	r2,r2,zero
   33cb0:	10803fcc 	andi	r2,r2,255
   33cb4:	10000d26 	beq	r2,zero,33cec <secp256k1_scalar_sqr_512+0x2db8>
   33cb8:	d0a01617 	ldw	r2,-32680(gp)
   33cbc:	10c00317 	ldw	r3,12(r2)
   33cc0:	00800174 	movhi	r2,5
   33cc4:	10973704 	addi	r2,r2,23772
   33cc8:	d8800015 	stw	r2,0(sp)
   33ccc:	01c09884 	movi	r7,610
   33cd0:	01800174 	movhi	r6,5
   33cd4:	31964204 	addi	r6,r6,22792
   33cd8:	01400174 	movhi	r5,5
   33cdc:	2951e804 	addi	r5,r5,18336
   33ce0:	1809883a 	mov	r4,r3
   33ce4:	00461000 	call	46100 <fprintf>
   33ce8:	0045fd40 	call	45fd4 <abort>
   33cec:	e0fe6017 	ldw	r3,-1664(fp)
   33cf0:	e0bed017 	ldw	r2,-1216(fp)
   33cf4:	1885883a 	add	r2,r3,r2
   33cf8:	e0be6015 	stw	r2,-1664(fp)
   33cfc:	e0fe6017 	ldw	r3,-1664(fp)
   33d00:	e0bed017 	ldw	r2,-1216(fp)
   33d04:	1880022e 	bgeu	r3,r2,33d10 <secp256k1_scalar_sqr_512+0x2ddc>
   33d08:	00c00044 	movi	r3,1
   33d0c:	00000106 	br	33d14 <secp256k1_scalar_sqr_512+0x2de0>
   33d10:	0007883a 	mov	r3,zero
   33d14:	e0be6117 	ldw	r2,-1660(fp)
   33d18:	10c5883a 	add	r2,r2,r3
   33d1c:	e0be6115 	stw	r2,-1660(fp)
   33d20:	e0fe6017 	ldw	r3,-1664(fp)
   33d24:	e0bed017 	ldw	r2,-1216(fp)
   33d28:	1885803a 	cmpltu	r2,r3,r2
   33d2c:	10803fcc 	andi	r2,r2,255
   33d30:	10001126 	beq	r2,zero,33d78 <secp256k1_scalar_sqr_512+0x2e44>
   33d34:	e0be6117 	ldw	r2,-1660(fp)
   33d38:	1005003a 	cmpeq	r2,r2,zero
   33d3c:	10803fcc 	andi	r2,r2,255
   33d40:	10000d26 	beq	r2,zero,33d78 <secp256k1_scalar_sqr_512+0x2e44>
   33d44:	d0a01617 	ldw	r2,-32680(gp)
   33d48:	10c00317 	ldw	r3,12(r2)
   33d4c:	00800174 	movhi	r2,5
   33d50:	10974704 	addi	r2,r2,23836
   33d54:	d8800015 	stw	r2,0(sp)
   33d58:	01c09884 	movi	r7,610
   33d5c:	01800174 	movhi	r6,5
   33d60:	31964204 	addi	r6,r6,22792
   33d64:	01400174 	movhi	r5,5
   33d68:	2951e804 	addi	r5,r5,18336
   33d6c:	1809883a 	mov	r4,r3
   33d70:	00461000 	call	46100 <fprintf>
   33d74:	0045fd40 	call	45fd4 <abort>
    extract(l[7]);
   33d78:	e0bf2a17 	ldw	r2,-856(fp)
   33d7c:	10c00704 	addi	r3,r2,28
   33d80:	e0be5f17 	ldw	r2,-1668(fp)
   33d84:	18800015 	stw	r2,0(r3)
   33d88:	e0be6017 	ldw	r2,-1664(fp)
   33d8c:	e0be5f15 	stw	r2,-1668(fp)
   33d90:	e0be6117 	ldw	r2,-1660(fp)
   33d94:	e0be6015 	stw	r2,-1664(fp)
   33d98:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[1], a->d[7]);
   33d9c:	e0bf2b17 	ldw	r2,-852(fp)
   33da0:	10800117 	ldw	r2,4(r2)
   33da4:	e0bf9815 	stw	r2,-416(fp)
   33da8:	e03f9915 	stw	zero,-412(fp)
   33dac:	e0bf2b17 	ldw	r2,-852(fp)
   33db0:	10800717 	ldw	r2,28(r2)
   33db4:	e0bf9a15 	stw	r2,-408(fp)
   33db8:	e03f9b15 	stw	zero,-404(fp)
   33dbc:	e1bf9a17 	ldw	r6,-408(fp)
   33dc0:	e1ff9b17 	ldw	r7,-404(fp)
   33dc4:	e13f9817 	ldw	r4,-416(fp)
   33dc8:	e17f9917 	ldw	r5,-412(fp)
   33dcc:	00438e00 	call	438e0 <__muldi3>
   33dd0:	1009883a 	mov	r4,r2
   33dd4:	180b883a 	mov	r5,r3
   33dd8:	e13ed215 	stw	r4,-1208(fp)
   33ddc:	e17ed315 	stw	r5,-1204(fp)
   33de0:	e0bed317 	ldw	r2,-1204(fp)
   33de4:	1004d83a 	srl	r2,r2,zero
   33de8:	e0bf9c15 	stw	r2,-400(fp)
   33dec:	e03f9d15 	stw	zero,-396(fp)
   33df0:	e0bf9c17 	ldw	r2,-400(fp)
   33df4:	e0bed415 	stw	r2,-1200(fp)
   33df8:	e0bed217 	ldw	r2,-1208(fp)
   33dfc:	e0bed515 	stw	r2,-1196(fp)
   33e00:	e0fed417 	ldw	r3,-1200(fp)
   33e04:	e0bed417 	ldw	r2,-1200(fp)
   33e08:	1885883a 	add	r2,r3,r2
   33e0c:	e0bed615 	stw	r2,-1192(fp)
   33e10:	e0fed617 	ldw	r3,-1192(fp)
   33e14:	e0bed417 	ldw	r2,-1200(fp)
   33e18:	1880022e 	bgeu	r3,r2,33e24 <secp256k1_scalar_sqr_512+0x2ef0>
   33e1c:	00c00044 	movi	r3,1
   33e20:	00000106 	br	33e28 <secp256k1_scalar_sqr_512+0x2ef4>
   33e24:	0007883a 	mov	r3,zero
   33e28:	e0be6117 	ldw	r2,-1660(fp)
   33e2c:	10c5883a 	add	r2,r2,r3
   33e30:	e0be6115 	stw	r2,-1660(fp)
   33e34:	e0fed617 	ldw	r3,-1192(fp)
   33e38:	e0bed417 	ldw	r2,-1200(fp)
   33e3c:	1885803a 	cmpltu	r2,r3,r2
   33e40:	10803fcc 	andi	r2,r2,255
   33e44:	10001126 	beq	r2,zero,33e8c <secp256k1_scalar_sqr_512+0x2f58>
   33e48:	e0be6117 	ldw	r2,-1660(fp)
   33e4c:	1005003a 	cmpeq	r2,r2,zero
   33e50:	10803fcc 	andi	r2,r2,255
   33e54:	10000d26 	beq	r2,zero,33e8c <secp256k1_scalar_sqr_512+0x2f58>
   33e58:	d0a01617 	ldw	r2,-32680(gp)
   33e5c:	10c00317 	ldw	r3,12(r2)
   33e60:	00800174 	movhi	r2,5
   33e64:	10972b04 	addi	r2,r2,23724
   33e68:	d8800015 	stw	r2,0(sp)
   33e6c:	01c09904 	movi	r7,612
   33e70:	01800174 	movhi	r6,5
   33e74:	31964204 	addi	r6,r6,22792
   33e78:	01400174 	movhi	r5,5
   33e7c:	2951e804 	addi	r5,r5,18336
   33e80:	1809883a 	mov	r4,r3
   33e84:	00461000 	call	46100 <fprintf>
   33e88:	0045fd40 	call	45fd4 <abort>
   33e8c:	e0fed517 	ldw	r3,-1196(fp)
   33e90:	e0bed517 	ldw	r2,-1196(fp)
   33e94:	1885883a 	add	r2,r3,r2
   33e98:	e0bed715 	stw	r2,-1188(fp)
   33e9c:	e0fed717 	ldw	r3,-1188(fp)
   33ea0:	e0bed517 	ldw	r2,-1196(fp)
   33ea4:	1880022e 	bgeu	r3,r2,33eb0 <secp256k1_scalar_sqr_512+0x2f7c>
   33ea8:	00c00044 	movi	r3,1
   33eac:	00000106 	br	33eb4 <secp256k1_scalar_sqr_512+0x2f80>
   33eb0:	0007883a 	mov	r3,zero
   33eb4:	e0bed617 	ldw	r2,-1192(fp)
   33eb8:	10c5883a 	add	r2,r2,r3
   33ebc:	e0bed615 	stw	r2,-1192(fp)
   33ec0:	e0fe5f17 	ldw	r3,-1668(fp)
   33ec4:	e0bed717 	ldw	r2,-1188(fp)
   33ec8:	1885883a 	add	r2,r3,r2
   33ecc:	e0be5f15 	stw	r2,-1668(fp)
   33ed0:	e0fe5f17 	ldw	r3,-1668(fp)
   33ed4:	e0bed717 	ldw	r2,-1188(fp)
   33ed8:	1880022e 	bgeu	r3,r2,33ee4 <secp256k1_scalar_sqr_512+0x2fb0>
   33edc:	00c00044 	movi	r3,1
   33ee0:	00000106 	br	33ee8 <secp256k1_scalar_sqr_512+0x2fb4>
   33ee4:	0007883a 	mov	r3,zero
   33ee8:	e0bed617 	ldw	r2,-1192(fp)
   33eec:	10c5883a 	add	r2,r2,r3
   33ef0:	e0bed615 	stw	r2,-1192(fp)
   33ef4:	e0fe5f17 	ldw	r3,-1668(fp)
   33ef8:	e0bed717 	ldw	r2,-1188(fp)
   33efc:	1885803a 	cmpltu	r2,r3,r2
   33f00:	1007883a 	mov	r3,r2
   33f04:	e0bed617 	ldw	r2,-1192(fp)
   33f08:	1005003a 	cmpeq	r2,r2,zero
   33f0c:	1884703a 	and	r2,r3,r2
   33f10:	10c03fcc 	andi	r3,r2,255
   33f14:	e0be6117 	ldw	r2,-1660(fp)
   33f18:	10c5883a 	add	r2,r2,r3
   33f1c:	e0be6115 	stw	r2,-1660(fp)
   33f20:	e0fe5f17 	ldw	r3,-1668(fp)
   33f24:	e0bed717 	ldw	r2,-1188(fp)
   33f28:	1885803a 	cmpltu	r2,r3,r2
   33f2c:	10803fcc 	andi	r2,r2,255
   33f30:	10000626 	beq	r2,zero,33f4c <secp256k1_scalar_sqr_512+0x3018>
   33f34:	e0bed617 	ldw	r2,-1192(fp)
   33f38:	1005003a 	cmpeq	r2,r2,zero
   33f3c:	10803fcc 	andi	r2,r2,255
   33f40:	10000226 	beq	r2,zero,33f4c <secp256k1_scalar_sqr_512+0x3018>
   33f44:	00800044 	movi	r2,1
   33f48:	00000106 	br	33f50 <secp256k1_scalar_sqr_512+0x301c>
   33f4c:	0005883a 	mov	r2,zero
   33f50:	10001126 	beq	r2,zero,33f98 <secp256k1_scalar_sqr_512+0x3064>
   33f54:	e0be6117 	ldw	r2,-1660(fp)
   33f58:	1005003a 	cmpeq	r2,r2,zero
   33f5c:	10803fcc 	andi	r2,r2,255
   33f60:	10000d26 	beq	r2,zero,33f98 <secp256k1_scalar_sqr_512+0x3064>
   33f64:	d0a01617 	ldw	r2,-32680(gp)
   33f68:	10c00317 	ldw	r3,12(r2)
   33f6c:	00800174 	movhi	r2,5
   33f70:	10973704 	addi	r2,r2,23772
   33f74:	d8800015 	stw	r2,0(sp)
   33f78:	01c09904 	movi	r7,612
   33f7c:	01800174 	movhi	r6,5
   33f80:	31964204 	addi	r6,r6,22792
   33f84:	01400174 	movhi	r5,5
   33f88:	2951e804 	addi	r5,r5,18336
   33f8c:	1809883a 	mov	r4,r3
   33f90:	00461000 	call	46100 <fprintf>
   33f94:	0045fd40 	call	45fd4 <abort>
   33f98:	e0fe6017 	ldw	r3,-1664(fp)
   33f9c:	e0bed617 	ldw	r2,-1192(fp)
   33fa0:	1885883a 	add	r2,r3,r2
   33fa4:	e0be6015 	stw	r2,-1664(fp)
   33fa8:	e0fe6017 	ldw	r3,-1664(fp)
   33fac:	e0bed617 	ldw	r2,-1192(fp)
   33fb0:	1880022e 	bgeu	r3,r2,33fbc <secp256k1_scalar_sqr_512+0x3088>
   33fb4:	00c00044 	movi	r3,1
   33fb8:	00000106 	br	33fc0 <secp256k1_scalar_sqr_512+0x308c>
   33fbc:	0007883a 	mov	r3,zero
   33fc0:	e0be6117 	ldw	r2,-1660(fp)
   33fc4:	10c5883a 	add	r2,r2,r3
   33fc8:	e0be6115 	stw	r2,-1660(fp)
   33fcc:	e0fe6017 	ldw	r3,-1664(fp)
   33fd0:	e0bed617 	ldw	r2,-1192(fp)
   33fd4:	1885803a 	cmpltu	r2,r3,r2
   33fd8:	10803fcc 	andi	r2,r2,255
   33fdc:	10001126 	beq	r2,zero,34024 <secp256k1_scalar_sqr_512+0x30f0>
   33fe0:	e0be6117 	ldw	r2,-1660(fp)
   33fe4:	1005003a 	cmpeq	r2,r2,zero
   33fe8:	10803fcc 	andi	r2,r2,255
   33fec:	10000d26 	beq	r2,zero,34024 <secp256k1_scalar_sqr_512+0x30f0>
   33ff0:	d0a01617 	ldw	r2,-32680(gp)
   33ff4:	10c00317 	ldw	r3,12(r2)
   33ff8:	00800174 	movhi	r2,5
   33ffc:	10974704 	addi	r2,r2,23836
   34000:	d8800015 	stw	r2,0(sp)
   34004:	01c09904 	movi	r7,612
   34008:	01800174 	movhi	r6,5
   3400c:	31964204 	addi	r6,r6,22792
   34010:	01400174 	movhi	r5,5
   34014:	2951e804 	addi	r5,r5,18336
   34018:	1809883a 	mov	r4,r3
   3401c:	00461000 	call	46100 <fprintf>
   34020:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[2], a->d[6]);
   34024:	e0bf2b17 	ldw	r2,-852(fp)
   34028:	10800217 	ldw	r2,8(r2)
   3402c:	e0bf9e15 	stw	r2,-392(fp)
   34030:	e03f9f15 	stw	zero,-388(fp)
   34034:	e0bf2b17 	ldw	r2,-852(fp)
   34038:	10800617 	ldw	r2,24(r2)
   3403c:	e0bfa015 	stw	r2,-384(fp)
   34040:	e03fa115 	stw	zero,-380(fp)
   34044:	e1bfa017 	ldw	r6,-384(fp)
   34048:	e1ffa117 	ldw	r7,-380(fp)
   3404c:	e13f9e17 	ldw	r4,-392(fp)
   34050:	e17f9f17 	ldw	r5,-388(fp)
   34054:	00438e00 	call	438e0 <__muldi3>
   34058:	1009883a 	mov	r4,r2
   3405c:	180b883a 	mov	r5,r3
   34060:	e13ed815 	stw	r4,-1184(fp)
   34064:	e17ed915 	stw	r5,-1180(fp)
   34068:	e0bed917 	ldw	r2,-1180(fp)
   3406c:	1004d83a 	srl	r2,r2,zero
   34070:	e0bfa215 	stw	r2,-376(fp)
   34074:	e03fa315 	stw	zero,-372(fp)
   34078:	e0bfa217 	ldw	r2,-376(fp)
   3407c:	e0beda15 	stw	r2,-1176(fp)
   34080:	e0bed817 	ldw	r2,-1184(fp)
   34084:	e0bedb15 	stw	r2,-1172(fp)
   34088:	e0feda17 	ldw	r3,-1176(fp)
   3408c:	e0beda17 	ldw	r2,-1176(fp)
   34090:	1885883a 	add	r2,r3,r2
   34094:	e0bedc15 	stw	r2,-1168(fp)
   34098:	e0fedc17 	ldw	r3,-1168(fp)
   3409c:	e0beda17 	ldw	r2,-1176(fp)
   340a0:	1880022e 	bgeu	r3,r2,340ac <secp256k1_scalar_sqr_512+0x3178>
   340a4:	00c00044 	movi	r3,1
   340a8:	00000106 	br	340b0 <secp256k1_scalar_sqr_512+0x317c>
   340ac:	0007883a 	mov	r3,zero
   340b0:	e0be6117 	ldw	r2,-1660(fp)
   340b4:	10c5883a 	add	r2,r2,r3
   340b8:	e0be6115 	stw	r2,-1660(fp)
   340bc:	e0fedc17 	ldw	r3,-1168(fp)
   340c0:	e0beda17 	ldw	r2,-1176(fp)
   340c4:	1885803a 	cmpltu	r2,r3,r2
   340c8:	10803fcc 	andi	r2,r2,255
   340cc:	10001126 	beq	r2,zero,34114 <secp256k1_scalar_sqr_512+0x31e0>
   340d0:	e0be6117 	ldw	r2,-1660(fp)
   340d4:	1005003a 	cmpeq	r2,r2,zero
   340d8:	10803fcc 	andi	r2,r2,255
   340dc:	10000d26 	beq	r2,zero,34114 <secp256k1_scalar_sqr_512+0x31e0>
   340e0:	d0a01617 	ldw	r2,-32680(gp)
   340e4:	10c00317 	ldw	r3,12(r2)
   340e8:	00800174 	movhi	r2,5
   340ec:	10972b04 	addi	r2,r2,23724
   340f0:	d8800015 	stw	r2,0(sp)
   340f4:	01c09944 	movi	r7,613
   340f8:	01800174 	movhi	r6,5
   340fc:	31964204 	addi	r6,r6,22792
   34100:	01400174 	movhi	r5,5
   34104:	2951e804 	addi	r5,r5,18336
   34108:	1809883a 	mov	r4,r3
   3410c:	00461000 	call	46100 <fprintf>
   34110:	0045fd40 	call	45fd4 <abort>
   34114:	e0fedb17 	ldw	r3,-1172(fp)
   34118:	e0bedb17 	ldw	r2,-1172(fp)
   3411c:	1885883a 	add	r2,r3,r2
   34120:	e0bedd15 	stw	r2,-1164(fp)
   34124:	e0fedd17 	ldw	r3,-1164(fp)
   34128:	e0bedb17 	ldw	r2,-1172(fp)
   3412c:	1880022e 	bgeu	r3,r2,34138 <secp256k1_scalar_sqr_512+0x3204>
   34130:	00c00044 	movi	r3,1
   34134:	00000106 	br	3413c <secp256k1_scalar_sqr_512+0x3208>
   34138:	0007883a 	mov	r3,zero
   3413c:	e0bedc17 	ldw	r2,-1168(fp)
   34140:	10c5883a 	add	r2,r2,r3
   34144:	e0bedc15 	stw	r2,-1168(fp)
   34148:	e0fe5f17 	ldw	r3,-1668(fp)
   3414c:	e0bedd17 	ldw	r2,-1164(fp)
   34150:	1885883a 	add	r2,r3,r2
   34154:	e0be5f15 	stw	r2,-1668(fp)
   34158:	e0fe5f17 	ldw	r3,-1668(fp)
   3415c:	e0bedd17 	ldw	r2,-1164(fp)
   34160:	1880022e 	bgeu	r3,r2,3416c <secp256k1_scalar_sqr_512+0x3238>
   34164:	00c00044 	movi	r3,1
   34168:	00000106 	br	34170 <secp256k1_scalar_sqr_512+0x323c>
   3416c:	0007883a 	mov	r3,zero
   34170:	e0bedc17 	ldw	r2,-1168(fp)
   34174:	10c5883a 	add	r2,r2,r3
   34178:	e0bedc15 	stw	r2,-1168(fp)
   3417c:	e0fe5f17 	ldw	r3,-1668(fp)
   34180:	e0bedd17 	ldw	r2,-1164(fp)
   34184:	1885803a 	cmpltu	r2,r3,r2
   34188:	1007883a 	mov	r3,r2
   3418c:	e0bedc17 	ldw	r2,-1168(fp)
   34190:	1005003a 	cmpeq	r2,r2,zero
   34194:	1884703a 	and	r2,r3,r2
   34198:	10c03fcc 	andi	r3,r2,255
   3419c:	e0be6117 	ldw	r2,-1660(fp)
   341a0:	10c5883a 	add	r2,r2,r3
   341a4:	e0be6115 	stw	r2,-1660(fp)
   341a8:	e0fe5f17 	ldw	r3,-1668(fp)
   341ac:	e0bedd17 	ldw	r2,-1164(fp)
   341b0:	1885803a 	cmpltu	r2,r3,r2
   341b4:	10803fcc 	andi	r2,r2,255
   341b8:	10000626 	beq	r2,zero,341d4 <secp256k1_scalar_sqr_512+0x32a0>
   341bc:	e0bedc17 	ldw	r2,-1168(fp)
   341c0:	1005003a 	cmpeq	r2,r2,zero
   341c4:	10803fcc 	andi	r2,r2,255
   341c8:	10000226 	beq	r2,zero,341d4 <secp256k1_scalar_sqr_512+0x32a0>
   341cc:	00800044 	movi	r2,1
   341d0:	00000106 	br	341d8 <secp256k1_scalar_sqr_512+0x32a4>
   341d4:	0005883a 	mov	r2,zero
   341d8:	10001126 	beq	r2,zero,34220 <secp256k1_scalar_sqr_512+0x32ec>
   341dc:	e0be6117 	ldw	r2,-1660(fp)
   341e0:	1005003a 	cmpeq	r2,r2,zero
   341e4:	10803fcc 	andi	r2,r2,255
   341e8:	10000d26 	beq	r2,zero,34220 <secp256k1_scalar_sqr_512+0x32ec>
   341ec:	d0a01617 	ldw	r2,-32680(gp)
   341f0:	10c00317 	ldw	r3,12(r2)
   341f4:	00800174 	movhi	r2,5
   341f8:	10973704 	addi	r2,r2,23772
   341fc:	d8800015 	stw	r2,0(sp)
   34200:	01c09944 	movi	r7,613
   34204:	01800174 	movhi	r6,5
   34208:	31964204 	addi	r6,r6,22792
   3420c:	01400174 	movhi	r5,5
   34210:	2951e804 	addi	r5,r5,18336
   34214:	1809883a 	mov	r4,r3
   34218:	00461000 	call	46100 <fprintf>
   3421c:	0045fd40 	call	45fd4 <abort>
   34220:	e0fe6017 	ldw	r3,-1664(fp)
   34224:	e0bedc17 	ldw	r2,-1168(fp)
   34228:	1885883a 	add	r2,r3,r2
   3422c:	e0be6015 	stw	r2,-1664(fp)
   34230:	e0fe6017 	ldw	r3,-1664(fp)
   34234:	e0bedc17 	ldw	r2,-1168(fp)
   34238:	1880022e 	bgeu	r3,r2,34244 <secp256k1_scalar_sqr_512+0x3310>
   3423c:	00c00044 	movi	r3,1
   34240:	00000106 	br	34248 <secp256k1_scalar_sqr_512+0x3314>
   34244:	0007883a 	mov	r3,zero
   34248:	e0be6117 	ldw	r2,-1660(fp)
   3424c:	10c5883a 	add	r2,r2,r3
   34250:	e0be6115 	stw	r2,-1660(fp)
   34254:	e0fe6017 	ldw	r3,-1664(fp)
   34258:	e0bedc17 	ldw	r2,-1168(fp)
   3425c:	1885803a 	cmpltu	r2,r3,r2
   34260:	10803fcc 	andi	r2,r2,255
   34264:	10001126 	beq	r2,zero,342ac <secp256k1_scalar_sqr_512+0x3378>
   34268:	e0be6117 	ldw	r2,-1660(fp)
   3426c:	1005003a 	cmpeq	r2,r2,zero
   34270:	10803fcc 	andi	r2,r2,255
   34274:	10000d26 	beq	r2,zero,342ac <secp256k1_scalar_sqr_512+0x3378>
   34278:	d0a01617 	ldw	r2,-32680(gp)
   3427c:	10c00317 	ldw	r3,12(r2)
   34280:	00800174 	movhi	r2,5
   34284:	10974704 	addi	r2,r2,23836
   34288:	d8800015 	stw	r2,0(sp)
   3428c:	01c09944 	movi	r7,613
   34290:	01800174 	movhi	r6,5
   34294:	31964204 	addi	r6,r6,22792
   34298:	01400174 	movhi	r5,5
   3429c:	2951e804 	addi	r5,r5,18336
   342a0:	1809883a 	mov	r4,r3
   342a4:	00461000 	call	46100 <fprintf>
   342a8:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[3], a->d[5]);
   342ac:	e0bf2b17 	ldw	r2,-852(fp)
   342b0:	10800317 	ldw	r2,12(r2)
   342b4:	e0bfa415 	stw	r2,-368(fp)
   342b8:	e03fa515 	stw	zero,-364(fp)
   342bc:	e0bf2b17 	ldw	r2,-852(fp)
   342c0:	10800517 	ldw	r2,20(r2)
   342c4:	e0bfa615 	stw	r2,-360(fp)
   342c8:	e03fa715 	stw	zero,-356(fp)
   342cc:	e1bfa617 	ldw	r6,-360(fp)
   342d0:	e1ffa717 	ldw	r7,-356(fp)
   342d4:	e13fa417 	ldw	r4,-368(fp)
   342d8:	e17fa517 	ldw	r5,-364(fp)
   342dc:	00438e00 	call	438e0 <__muldi3>
   342e0:	1009883a 	mov	r4,r2
   342e4:	180b883a 	mov	r5,r3
   342e8:	e13ede15 	stw	r4,-1160(fp)
   342ec:	e17edf15 	stw	r5,-1156(fp)
   342f0:	e0bedf17 	ldw	r2,-1156(fp)
   342f4:	1004d83a 	srl	r2,r2,zero
   342f8:	e0bfa815 	stw	r2,-352(fp)
   342fc:	e03fa915 	stw	zero,-348(fp)
   34300:	e0bfa817 	ldw	r2,-352(fp)
   34304:	e0bee015 	stw	r2,-1152(fp)
   34308:	e0bede17 	ldw	r2,-1160(fp)
   3430c:	e0bee115 	stw	r2,-1148(fp)
   34310:	e0fee017 	ldw	r3,-1152(fp)
   34314:	e0bee017 	ldw	r2,-1152(fp)
   34318:	1885883a 	add	r2,r3,r2
   3431c:	e0bee215 	stw	r2,-1144(fp)
   34320:	e0fee217 	ldw	r3,-1144(fp)
   34324:	e0bee017 	ldw	r2,-1152(fp)
   34328:	1880022e 	bgeu	r3,r2,34334 <secp256k1_scalar_sqr_512+0x3400>
   3432c:	00c00044 	movi	r3,1
   34330:	00000106 	br	34338 <secp256k1_scalar_sqr_512+0x3404>
   34334:	0007883a 	mov	r3,zero
   34338:	e0be6117 	ldw	r2,-1660(fp)
   3433c:	10c5883a 	add	r2,r2,r3
   34340:	e0be6115 	stw	r2,-1660(fp)
   34344:	e0fee217 	ldw	r3,-1144(fp)
   34348:	e0bee017 	ldw	r2,-1152(fp)
   3434c:	1885803a 	cmpltu	r2,r3,r2
   34350:	10803fcc 	andi	r2,r2,255
   34354:	10001126 	beq	r2,zero,3439c <secp256k1_scalar_sqr_512+0x3468>
   34358:	e0be6117 	ldw	r2,-1660(fp)
   3435c:	1005003a 	cmpeq	r2,r2,zero
   34360:	10803fcc 	andi	r2,r2,255
   34364:	10000d26 	beq	r2,zero,3439c <secp256k1_scalar_sqr_512+0x3468>
   34368:	d0a01617 	ldw	r2,-32680(gp)
   3436c:	10c00317 	ldw	r3,12(r2)
   34370:	00800174 	movhi	r2,5
   34374:	10972b04 	addi	r2,r2,23724
   34378:	d8800015 	stw	r2,0(sp)
   3437c:	01c09984 	movi	r7,614
   34380:	01800174 	movhi	r6,5
   34384:	31964204 	addi	r6,r6,22792
   34388:	01400174 	movhi	r5,5
   3438c:	2951e804 	addi	r5,r5,18336
   34390:	1809883a 	mov	r4,r3
   34394:	00461000 	call	46100 <fprintf>
   34398:	0045fd40 	call	45fd4 <abort>
   3439c:	e0fee117 	ldw	r3,-1148(fp)
   343a0:	e0bee117 	ldw	r2,-1148(fp)
   343a4:	1885883a 	add	r2,r3,r2
   343a8:	e0bee315 	stw	r2,-1140(fp)
   343ac:	e0fee317 	ldw	r3,-1140(fp)
   343b0:	e0bee117 	ldw	r2,-1148(fp)
   343b4:	1880022e 	bgeu	r3,r2,343c0 <secp256k1_scalar_sqr_512+0x348c>
   343b8:	00c00044 	movi	r3,1
   343bc:	00000106 	br	343c4 <secp256k1_scalar_sqr_512+0x3490>
   343c0:	0007883a 	mov	r3,zero
   343c4:	e0bee217 	ldw	r2,-1144(fp)
   343c8:	10c5883a 	add	r2,r2,r3
   343cc:	e0bee215 	stw	r2,-1144(fp)
   343d0:	e0fe5f17 	ldw	r3,-1668(fp)
   343d4:	e0bee317 	ldw	r2,-1140(fp)
   343d8:	1885883a 	add	r2,r3,r2
   343dc:	e0be5f15 	stw	r2,-1668(fp)
   343e0:	e0fe5f17 	ldw	r3,-1668(fp)
   343e4:	e0bee317 	ldw	r2,-1140(fp)
   343e8:	1880022e 	bgeu	r3,r2,343f4 <secp256k1_scalar_sqr_512+0x34c0>
   343ec:	00c00044 	movi	r3,1
   343f0:	00000106 	br	343f8 <secp256k1_scalar_sqr_512+0x34c4>
   343f4:	0007883a 	mov	r3,zero
   343f8:	e0bee217 	ldw	r2,-1144(fp)
   343fc:	10c5883a 	add	r2,r2,r3
   34400:	e0bee215 	stw	r2,-1144(fp)
   34404:	e0fe5f17 	ldw	r3,-1668(fp)
   34408:	e0bee317 	ldw	r2,-1140(fp)
   3440c:	1885803a 	cmpltu	r2,r3,r2
   34410:	1007883a 	mov	r3,r2
   34414:	e0bee217 	ldw	r2,-1144(fp)
   34418:	1005003a 	cmpeq	r2,r2,zero
   3441c:	1884703a 	and	r2,r3,r2
   34420:	10c03fcc 	andi	r3,r2,255
   34424:	e0be6117 	ldw	r2,-1660(fp)
   34428:	10c5883a 	add	r2,r2,r3
   3442c:	e0be6115 	stw	r2,-1660(fp)
   34430:	e0fe5f17 	ldw	r3,-1668(fp)
   34434:	e0bee317 	ldw	r2,-1140(fp)
   34438:	1885803a 	cmpltu	r2,r3,r2
   3443c:	10803fcc 	andi	r2,r2,255
   34440:	10000626 	beq	r2,zero,3445c <secp256k1_scalar_sqr_512+0x3528>
   34444:	e0bee217 	ldw	r2,-1144(fp)
   34448:	1005003a 	cmpeq	r2,r2,zero
   3444c:	10803fcc 	andi	r2,r2,255
   34450:	10000226 	beq	r2,zero,3445c <secp256k1_scalar_sqr_512+0x3528>
   34454:	00800044 	movi	r2,1
   34458:	00000106 	br	34460 <secp256k1_scalar_sqr_512+0x352c>
   3445c:	0005883a 	mov	r2,zero
   34460:	10001126 	beq	r2,zero,344a8 <secp256k1_scalar_sqr_512+0x3574>
   34464:	e0be6117 	ldw	r2,-1660(fp)
   34468:	1005003a 	cmpeq	r2,r2,zero
   3446c:	10803fcc 	andi	r2,r2,255
   34470:	10000d26 	beq	r2,zero,344a8 <secp256k1_scalar_sqr_512+0x3574>
   34474:	d0a01617 	ldw	r2,-32680(gp)
   34478:	10c00317 	ldw	r3,12(r2)
   3447c:	00800174 	movhi	r2,5
   34480:	10973704 	addi	r2,r2,23772
   34484:	d8800015 	stw	r2,0(sp)
   34488:	01c09984 	movi	r7,614
   3448c:	01800174 	movhi	r6,5
   34490:	31964204 	addi	r6,r6,22792
   34494:	01400174 	movhi	r5,5
   34498:	2951e804 	addi	r5,r5,18336
   3449c:	1809883a 	mov	r4,r3
   344a0:	00461000 	call	46100 <fprintf>
   344a4:	0045fd40 	call	45fd4 <abort>
   344a8:	e0fe6017 	ldw	r3,-1664(fp)
   344ac:	e0bee217 	ldw	r2,-1144(fp)
   344b0:	1885883a 	add	r2,r3,r2
   344b4:	e0be6015 	stw	r2,-1664(fp)
   344b8:	e0fe6017 	ldw	r3,-1664(fp)
   344bc:	e0bee217 	ldw	r2,-1144(fp)
   344c0:	1880022e 	bgeu	r3,r2,344cc <secp256k1_scalar_sqr_512+0x3598>
   344c4:	00c00044 	movi	r3,1
   344c8:	00000106 	br	344d0 <secp256k1_scalar_sqr_512+0x359c>
   344cc:	0007883a 	mov	r3,zero
   344d0:	e0be6117 	ldw	r2,-1660(fp)
   344d4:	10c5883a 	add	r2,r2,r3
   344d8:	e0be6115 	stw	r2,-1660(fp)
   344dc:	e0fe6017 	ldw	r3,-1664(fp)
   344e0:	e0bee217 	ldw	r2,-1144(fp)
   344e4:	1885803a 	cmpltu	r2,r3,r2
   344e8:	10803fcc 	andi	r2,r2,255
   344ec:	10001126 	beq	r2,zero,34534 <secp256k1_scalar_sqr_512+0x3600>
   344f0:	e0be6117 	ldw	r2,-1660(fp)
   344f4:	1005003a 	cmpeq	r2,r2,zero
   344f8:	10803fcc 	andi	r2,r2,255
   344fc:	10000d26 	beq	r2,zero,34534 <secp256k1_scalar_sqr_512+0x3600>
   34500:	d0a01617 	ldw	r2,-32680(gp)
   34504:	10c00317 	ldw	r3,12(r2)
   34508:	00800174 	movhi	r2,5
   3450c:	10974704 	addi	r2,r2,23836
   34510:	d8800015 	stw	r2,0(sp)
   34514:	01c09984 	movi	r7,614
   34518:	01800174 	movhi	r6,5
   3451c:	31964204 	addi	r6,r6,22792
   34520:	01400174 	movhi	r5,5
   34524:	2951e804 	addi	r5,r5,18336
   34528:	1809883a 	mov	r4,r3
   3452c:	00461000 	call	46100 <fprintf>
   34530:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[4], a->d[4]);
   34534:	e0bf2b17 	ldw	r2,-852(fp)
   34538:	10800417 	ldw	r2,16(r2)
   3453c:	e0bfaa15 	stw	r2,-344(fp)
   34540:	e03fab15 	stw	zero,-340(fp)
   34544:	e0bf2b17 	ldw	r2,-852(fp)
   34548:	10800417 	ldw	r2,16(r2)
   3454c:	e0bfac15 	stw	r2,-336(fp)
   34550:	e03fad15 	stw	zero,-332(fp)
   34554:	e1bfac17 	ldw	r6,-336(fp)
   34558:	e1ffad17 	ldw	r7,-332(fp)
   3455c:	e13faa17 	ldw	r4,-344(fp)
   34560:	e17fab17 	ldw	r5,-340(fp)
   34564:	00438e00 	call	438e0 <__muldi3>
   34568:	1009883a 	mov	r4,r2
   3456c:	180b883a 	mov	r5,r3
   34570:	e13ee415 	stw	r4,-1136(fp)
   34574:	e17ee515 	stw	r5,-1132(fp)
   34578:	e0bee517 	ldw	r2,-1132(fp)
   3457c:	1004d83a 	srl	r2,r2,zero
   34580:	e0bfae15 	stw	r2,-328(fp)
   34584:	e03faf15 	stw	zero,-324(fp)
   34588:	e0bfae17 	ldw	r2,-328(fp)
   3458c:	e0bee615 	stw	r2,-1128(fp)
   34590:	e0bee417 	ldw	r2,-1136(fp)
   34594:	e0bee715 	stw	r2,-1124(fp)
   34598:	e0fe5f17 	ldw	r3,-1668(fp)
   3459c:	e0bee717 	ldw	r2,-1124(fp)
   345a0:	1885883a 	add	r2,r3,r2
   345a4:	e0be5f15 	stw	r2,-1668(fp)
   345a8:	e0fe5f17 	ldw	r3,-1668(fp)
   345ac:	e0bee717 	ldw	r2,-1124(fp)
   345b0:	1880022e 	bgeu	r3,r2,345bc <secp256k1_scalar_sqr_512+0x3688>
   345b4:	00c00044 	movi	r3,1
   345b8:	00000106 	br	345c0 <secp256k1_scalar_sqr_512+0x368c>
   345bc:	0007883a 	mov	r3,zero
   345c0:	e0bee617 	ldw	r2,-1128(fp)
   345c4:	10c5883a 	add	r2,r2,r3
   345c8:	e0bee615 	stw	r2,-1128(fp)
   345cc:	e0fe6017 	ldw	r3,-1664(fp)
   345d0:	e0bee617 	ldw	r2,-1128(fp)
   345d4:	1885883a 	add	r2,r3,r2
   345d8:	e0be6015 	stw	r2,-1664(fp)
   345dc:	e0fe6017 	ldw	r3,-1664(fp)
   345e0:	e0bee617 	ldw	r2,-1128(fp)
   345e4:	1880022e 	bgeu	r3,r2,345f0 <secp256k1_scalar_sqr_512+0x36bc>
   345e8:	00c00044 	movi	r3,1
   345ec:	00000106 	br	345f4 <secp256k1_scalar_sqr_512+0x36c0>
   345f0:	0007883a 	mov	r3,zero
   345f4:	e0be6117 	ldw	r2,-1660(fp)
   345f8:	10c5883a 	add	r2,r2,r3
   345fc:	e0be6115 	stw	r2,-1660(fp)
   34600:	e0fe6017 	ldw	r3,-1664(fp)
   34604:	e0bee617 	ldw	r2,-1128(fp)
   34608:	1885803a 	cmpltu	r2,r3,r2
   3460c:	10803fcc 	andi	r2,r2,255
   34610:	10001126 	beq	r2,zero,34658 <secp256k1_scalar_sqr_512+0x3724>
   34614:	e0be6117 	ldw	r2,-1660(fp)
   34618:	1005003a 	cmpeq	r2,r2,zero
   3461c:	10803fcc 	andi	r2,r2,255
   34620:	10000d26 	beq	r2,zero,34658 <secp256k1_scalar_sqr_512+0x3724>
   34624:	d0a01617 	ldw	r2,-32680(gp)
   34628:	10c00317 	ldw	r3,12(r2)
   3462c:	00800174 	movhi	r2,5
   34630:	1096d604 	addi	r2,r2,23384
   34634:	d8800015 	stw	r2,0(sp)
   34638:	01c099c4 	movi	r7,615
   3463c:	01800174 	movhi	r6,5
   34640:	31964204 	addi	r6,r6,22792
   34644:	01400174 	movhi	r5,5
   34648:	2951e804 	addi	r5,r5,18336
   3464c:	1809883a 	mov	r4,r3
   34650:	00461000 	call	46100 <fprintf>
   34654:	0045fd40 	call	45fd4 <abort>
    extract(l[8]);
   34658:	e0bf2a17 	ldw	r2,-856(fp)
   3465c:	10c00804 	addi	r3,r2,32
   34660:	e0be5f17 	ldw	r2,-1668(fp)
   34664:	18800015 	stw	r2,0(r3)
   34668:	e0be6017 	ldw	r2,-1664(fp)
   3466c:	e0be5f15 	stw	r2,-1668(fp)
   34670:	e0be6117 	ldw	r2,-1660(fp)
   34674:	e0be6015 	stw	r2,-1664(fp)
   34678:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[2], a->d[7]);
   3467c:	e0bf2b17 	ldw	r2,-852(fp)
   34680:	10800217 	ldw	r2,8(r2)
   34684:	e0bfb015 	stw	r2,-320(fp)
   34688:	e03fb115 	stw	zero,-316(fp)
   3468c:	e0bf2b17 	ldw	r2,-852(fp)
   34690:	10800717 	ldw	r2,28(r2)
   34694:	e0bfb215 	stw	r2,-312(fp)
   34698:	e03fb315 	stw	zero,-308(fp)
   3469c:	e1bfb217 	ldw	r6,-312(fp)
   346a0:	e1ffb317 	ldw	r7,-308(fp)
   346a4:	e13fb017 	ldw	r4,-320(fp)
   346a8:	e17fb117 	ldw	r5,-316(fp)
   346ac:	00438e00 	call	438e0 <__muldi3>
   346b0:	1009883a 	mov	r4,r2
   346b4:	180b883a 	mov	r5,r3
   346b8:	e13ee815 	stw	r4,-1120(fp)
   346bc:	e17ee915 	stw	r5,-1116(fp)
   346c0:	e0bee917 	ldw	r2,-1116(fp)
   346c4:	1004d83a 	srl	r2,r2,zero
   346c8:	e0bfb415 	stw	r2,-304(fp)
   346cc:	e03fb515 	stw	zero,-300(fp)
   346d0:	e0bfb417 	ldw	r2,-304(fp)
   346d4:	e0beea15 	stw	r2,-1112(fp)
   346d8:	e0bee817 	ldw	r2,-1120(fp)
   346dc:	e0beeb15 	stw	r2,-1108(fp)
   346e0:	e0feea17 	ldw	r3,-1112(fp)
   346e4:	e0beea17 	ldw	r2,-1112(fp)
   346e8:	1885883a 	add	r2,r3,r2
   346ec:	e0beec15 	stw	r2,-1104(fp)
   346f0:	e0feec17 	ldw	r3,-1104(fp)
   346f4:	e0beea17 	ldw	r2,-1112(fp)
   346f8:	1880022e 	bgeu	r3,r2,34704 <secp256k1_scalar_sqr_512+0x37d0>
   346fc:	00c00044 	movi	r3,1
   34700:	00000106 	br	34708 <secp256k1_scalar_sqr_512+0x37d4>
   34704:	0007883a 	mov	r3,zero
   34708:	e0be6117 	ldw	r2,-1660(fp)
   3470c:	10c5883a 	add	r2,r2,r3
   34710:	e0be6115 	stw	r2,-1660(fp)
   34714:	e0feec17 	ldw	r3,-1104(fp)
   34718:	e0beea17 	ldw	r2,-1112(fp)
   3471c:	1885803a 	cmpltu	r2,r3,r2
   34720:	10803fcc 	andi	r2,r2,255
   34724:	10001126 	beq	r2,zero,3476c <secp256k1_scalar_sqr_512+0x3838>
   34728:	e0be6117 	ldw	r2,-1660(fp)
   3472c:	1005003a 	cmpeq	r2,r2,zero
   34730:	10803fcc 	andi	r2,r2,255
   34734:	10000d26 	beq	r2,zero,3476c <secp256k1_scalar_sqr_512+0x3838>
   34738:	d0a01617 	ldw	r2,-32680(gp)
   3473c:	10c00317 	ldw	r3,12(r2)
   34740:	00800174 	movhi	r2,5
   34744:	10972b04 	addi	r2,r2,23724
   34748:	d8800015 	stw	r2,0(sp)
   3474c:	01c09a44 	movi	r7,617
   34750:	01800174 	movhi	r6,5
   34754:	31964204 	addi	r6,r6,22792
   34758:	01400174 	movhi	r5,5
   3475c:	2951e804 	addi	r5,r5,18336
   34760:	1809883a 	mov	r4,r3
   34764:	00461000 	call	46100 <fprintf>
   34768:	0045fd40 	call	45fd4 <abort>
   3476c:	e0feeb17 	ldw	r3,-1108(fp)
   34770:	e0beeb17 	ldw	r2,-1108(fp)
   34774:	1885883a 	add	r2,r3,r2
   34778:	e0beed15 	stw	r2,-1100(fp)
   3477c:	e0feed17 	ldw	r3,-1100(fp)
   34780:	e0beeb17 	ldw	r2,-1108(fp)
   34784:	1880022e 	bgeu	r3,r2,34790 <secp256k1_scalar_sqr_512+0x385c>
   34788:	00c00044 	movi	r3,1
   3478c:	00000106 	br	34794 <secp256k1_scalar_sqr_512+0x3860>
   34790:	0007883a 	mov	r3,zero
   34794:	e0beec17 	ldw	r2,-1104(fp)
   34798:	10c5883a 	add	r2,r2,r3
   3479c:	e0beec15 	stw	r2,-1104(fp)
   347a0:	e0fe5f17 	ldw	r3,-1668(fp)
   347a4:	e0beed17 	ldw	r2,-1100(fp)
   347a8:	1885883a 	add	r2,r3,r2
   347ac:	e0be5f15 	stw	r2,-1668(fp)
   347b0:	e0fe5f17 	ldw	r3,-1668(fp)
   347b4:	e0beed17 	ldw	r2,-1100(fp)
   347b8:	1880022e 	bgeu	r3,r2,347c4 <secp256k1_scalar_sqr_512+0x3890>
   347bc:	00c00044 	movi	r3,1
   347c0:	00000106 	br	347c8 <secp256k1_scalar_sqr_512+0x3894>
   347c4:	0007883a 	mov	r3,zero
   347c8:	e0beec17 	ldw	r2,-1104(fp)
   347cc:	10c5883a 	add	r2,r2,r3
   347d0:	e0beec15 	stw	r2,-1104(fp)
   347d4:	e0fe5f17 	ldw	r3,-1668(fp)
   347d8:	e0beed17 	ldw	r2,-1100(fp)
   347dc:	1885803a 	cmpltu	r2,r3,r2
   347e0:	1007883a 	mov	r3,r2
   347e4:	e0beec17 	ldw	r2,-1104(fp)
   347e8:	1005003a 	cmpeq	r2,r2,zero
   347ec:	1884703a 	and	r2,r3,r2
   347f0:	10c03fcc 	andi	r3,r2,255
   347f4:	e0be6117 	ldw	r2,-1660(fp)
   347f8:	10c5883a 	add	r2,r2,r3
   347fc:	e0be6115 	stw	r2,-1660(fp)
   34800:	e0fe5f17 	ldw	r3,-1668(fp)
   34804:	e0beed17 	ldw	r2,-1100(fp)
   34808:	1885803a 	cmpltu	r2,r3,r2
   3480c:	10803fcc 	andi	r2,r2,255
   34810:	10000626 	beq	r2,zero,3482c <secp256k1_scalar_sqr_512+0x38f8>
   34814:	e0beec17 	ldw	r2,-1104(fp)
   34818:	1005003a 	cmpeq	r2,r2,zero
   3481c:	10803fcc 	andi	r2,r2,255
   34820:	10000226 	beq	r2,zero,3482c <secp256k1_scalar_sqr_512+0x38f8>
   34824:	00800044 	movi	r2,1
   34828:	00000106 	br	34830 <secp256k1_scalar_sqr_512+0x38fc>
   3482c:	0005883a 	mov	r2,zero
   34830:	10001126 	beq	r2,zero,34878 <secp256k1_scalar_sqr_512+0x3944>
   34834:	e0be6117 	ldw	r2,-1660(fp)
   34838:	1005003a 	cmpeq	r2,r2,zero
   3483c:	10803fcc 	andi	r2,r2,255
   34840:	10000d26 	beq	r2,zero,34878 <secp256k1_scalar_sqr_512+0x3944>
   34844:	d0a01617 	ldw	r2,-32680(gp)
   34848:	10c00317 	ldw	r3,12(r2)
   3484c:	00800174 	movhi	r2,5
   34850:	10973704 	addi	r2,r2,23772
   34854:	d8800015 	stw	r2,0(sp)
   34858:	01c09a44 	movi	r7,617
   3485c:	01800174 	movhi	r6,5
   34860:	31964204 	addi	r6,r6,22792
   34864:	01400174 	movhi	r5,5
   34868:	2951e804 	addi	r5,r5,18336
   3486c:	1809883a 	mov	r4,r3
   34870:	00461000 	call	46100 <fprintf>
   34874:	0045fd40 	call	45fd4 <abort>
   34878:	e0fe6017 	ldw	r3,-1664(fp)
   3487c:	e0beec17 	ldw	r2,-1104(fp)
   34880:	1885883a 	add	r2,r3,r2
   34884:	e0be6015 	stw	r2,-1664(fp)
   34888:	e0fe6017 	ldw	r3,-1664(fp)
   3488c:	e0beec17 	ldw	r2,-1104(fp)
   34890:	1880022e 	bgeu	r3,r2,3489c <secp256k1_scalar_sqr_512+0x3968>
   34894:	00c00044 	movi	r3,1
   34898:	00000106 	br	348a0 <secp256k1_scalar_sqr_512+0x396c>
   3489c:	0007883a 	mov	r3,zero
   348a0:	e0be6117 	ldw	r2,-1660(fp)
   348a4:	10c5883a 	add	r2,r2,r3
   348a8:	e0be6115 	stw	r2,-1660(fp)
   348ac:	e0fe6017 	ldw	r3,-1664(fp)
   348b0:	e0beec17 	ldw	r2,-1104(fp)
   348b4:	1885803a 	cmpltu	r2,r3,r2
   348b8:	10803fcc 	andi	r2,r2,255
   348bc:	10001126 	beq	r2,zero,34904 <secp256k1_scalar_sqr_512+0x39d0>
   348c0:	e0be6117 	ldw	r2,-1660(fp)
   348c4:	1005003a 	cmpeq	r2,r2,zero
   348c8:	10803fcc 	andi	r2,r2,255
   348cc:	10000d26 	beq	r2,zero,34904 <secp256k1_scalar_sqr_512+0x39d0>
   348d0:	d0a01617 	ldw	r2,-32680(gp)
   348d4:	10c00317 	ldw	r3,12(r2)
   348d8:	00800174 	movhi	r2,5
   348dc:	10974704 	addi	r2,r2,23836
   348e0:	d8800015 	stw	r2,0(sp)
   348e4:	01c09a44 	movi	r7,617
   348e8:	01800174 	movhi	r6,5
   348ec:	31964204 	addi	r6,r6,22792
   348f0:	01400174 	movhi	r5,5
   348f4:	2951e804 	addi	r5,r5,18336
   348f8:	1809883a 	mov	r4,r3
   348fc:	00461000 	call	46100 <fprintf>
   34900:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[3], a->d[6]);
   34904:	e0bf2b17 	ldw	r2,-852(fp)
   34908:	10800317 	ldw	r2,12(r2)
   3490c:	e0bfb615 	stw	r2,-296(fp)
   34910:	e03fb715 	stw	zero,-292(fp)
   34914:	e0bf2b17 	ldw	r2,-852(fp)
   34918:	10800617 	ldw	r2,24(r2)
   3491c:	e0bfb815 	stw	r2,-288(fp)
   34920:	e03fb915 	stw	zero,-284(fp)
   34924:	e1bfb817 	ldw	r6,-288(fp)
   34928:	e1ffb917 	ldw	r7,-284(fp)
   3492c:	e13fb617 	ldw	r4,-296(fp)
   34930:	e17fb717 	ldw	r5,-292(fp)
   34934:	00438e00 	call	438e0 <__muldi3>
   34938:	1009883a 	mov	r4,r2
   3493c:	180b883a 	mov	r5,r3
   34940:	e13eee15 	stw	r4,-1096(fp)
   34944:	e17eef15 	stw	r5,-1092(fp)
   34948:	e0beef17 	ldw	r2,-1092(fp)
   3494c:	1004d83a 	srl	r2,r2,zero
   34950:	e0bfba15 	stw	r2,-280(fp)
   34954:	e03fbb15 	stw	zero,-276(fp)
   34958:	e0bfba17 	ldw	r2,-280(fp)
   3495c:	e0bef015 	stw	r2,-1088(fp)
   34960:	e0beee17 	ldw	r2,-1096(fp)
   34964:	e0bef115 	stw	r2,-1084(fp)
   34968:	e0fef017 	ldw	r3,-1088(fp)
   3496c:	e0bef017 	ldw	r2,-1088(fp)
   34970:	1885883a 	add	r2,r3,r2
   34974:	e0bef215 	stw	r2,-1080(fp)
   34978:	e0fef217 	ldw	r3,-1080(fp)
   3497c:	e0bef017 	ldw	r2,-1088(fp)
   34980:	1880022e 	bgeu	r3,r2,3498c <secp256k1_scalar_sqr_512+0x3a58>
   34984:	00c00044 	movi	r3,1
   34988:	00000106 	br	34990 <secp256k1_scalar_sqr_512+0x3a5c>
   3498c:	0007883a 	mov	r3,zero
   34990:	e0be6117 	ldw	r2,-1660(fp)
   34994:	10c5883a 	add	r2,r2,r3
   34998:	e0be6115 	stw	r2,-1660(fp)
   3499c:	e0fef217 	ldw	r3,-1080(fp)
   349a0:	e0bef017 	ldw	r2,-1088(fp)
   349a4:	1885803a 	cmpltu	r2,r3,r2
   349a8:	10803fcc 	andi	r2,r2,255
   349ac:	10001126 	beq	r2,zero,349f4 <secp256k1_scalar_sqr_512+0x3ac0>
   349b0:	e0be6117 	ldw	r2,-1660(fp)
   349b4:	1005003a 	cmpeq	r2,r2,zero
   349b8:	10803fcc 	andi	r2,r2,255
   349bc:	10000d26 	beq	r2,zero,349f4 <secp256k1_scalar_sqr_512+0x3ac0>
   349c0:	d0a01617 	ldw	r2,-32680(gp)
   349c4:	10c00317 	ldw	r3,12(r2)
   349c8:	00800174 	movhi	r2,5
   349cc:	10972b04 	addi	r2,r2,23724
   349d0:	d8800015 	stw	r2,0(sp)
   349d4:	01c09a84 	movi	r7,618
   349d8:	01800174 	movhi	r6,5
   349dc:	31964204 	addi	r6,r6,22792
   349e0:	01400174 	movhi	r5,5
   349e4:	2951e804 	addi	r5,r5,18336
   349e8:	1809883a 	mov	r4,r3
   349ec:	00461000 	call	46100 <fprintf>
   349f0:	0045fd40 	call	45fd4 <abort>
   349f4:	e0fef117 	ldw	r3,-1084(fp)
   349f8:	e0bef117 	ldw	r2,-1084(fp)
   349fc:	1885883a 	add	r2,r3,r2
   34a00:	e0bef315 	stw	r2,-1076(fp)
   34a04:	e0fef317 	ldw	r3,-1076(fp)
   34a08:	e0bef117 	ldw	r2,-1084(fp)
   34a0c:	1880022e 	bgeu	r3,r2,34a18 <secp256k1_scalar_sqr_512+0x3ae4>
   34a10:	00c00044 	movi	r3,1
   34a14:	00000106 	br	34a1c <secp256k1_scalar_sqr_512+0x3ae8>
   34a18:	0007883a 	mov	r3,zero
   34a1c:	e0bef217 	ldw	r2,-1080(fp)
   34a20:	10c5883a 	add	r2,r2,r3
   34a24:	e0bef215 	stw	r2,-1080(fp)
   34a28:	e0fe5f17 	ldw	r3,-1668(fp)
   34a2c:	e0bef317 	ldw	r2,-1076(fp)
   34a30:	1885883a 	add	r2,r3,r2
   34a34:	e0be5f15 	stw	r2,-1668(fp)
   34a38:	e0fe5f17 	ldw	r3,-1668(fp)
   34a3c:	e0bef317 	ldw	r2,-1076(fp)
   34a40:	1880022e 	bgeu	r3,r2,34a4c <secp256k1_scalar_sqr_512+0x3b18>
   34a44:	00c00044 	movi	r3,1
   34a48:	00000106 	br	34a50 <secp256k1_scalar_sqr_512+0x3b1c>
   34a4c:	0007883a 	mov	r3,zero
   34a50:	e0bef217 	ldw	r2,-1080(fp)
   34a54:	10c5883a 	add	r2,r2,r3
   34a58:	e0bef215 	stw	r2,-1080(fp)
   34a5c:	e0fe5f17 	ldw	r3,-1668(fp)
   34a60:	e0bef317 	ldw	r2,-1076(fp)
   34a64:	1885803a 	cmpltu	r2,r3,r2
   34a68:	1007883a 	mov	r3,r2
   34a6c:	e0bef217 	ldw	r2,-1080(fp)
   34a70:	1005003a 	cmpeq	r2,r2,zero
   34a74:	1884703a 	and	r2,r3,r2
   34a78:	10c03fcc 	andi	r3,r2,255
   34a7c:	e0be6117 	ldw	r2,-1660(fp)
   34a80:	10c5883a 	add	r2,r2,r3
   34a84:	e0be6115 	stw	r2,-1660(fp)
   34a88:	e0fe5f17 	ldw	r3,-1668(fp)
   34a8c:	e0bef317 	ldw	r2,-1076(fp)
   34a90:	1885803a 	cmpltu	r2,r3,r2
   34a94:	10803fcc 	andi	r2,r2,255
   34a98:	10000626 	beq	r2,zero,34ab4 <secp256k1_scalar_sqr_512+0x3b80>
   34a9c:	e0bef217 	ldw	r2,-1080(fp)
   34aa0:	1005003a 	cmpeq	r2,r2,zero
   34aa4:	10803fcc 	andi	r2,r2,255
   34aa8:	10000226 	beq	r2,zero,34ab4 <secp256k1_scalar_sqr_512+0x3b80>
   34aac:	00800044 	movi	r2,1
   34ab0:	00000106 	br	34ab8 <secp256k1_scalar_sqr_512+0x3b84>
   34ab4:	0005883a 	mov	r2,zero
   34ab8:	10001126 	beq	r2,zero,34b00 <secp256k1_scalar_sqr_512+0x3bcc>
   34abc:	e0be6117 	ldw	r2,-1660(fp)
   34ac0:	1005003a 	cmpeq	r2,r2,zero
   34ac4:	10803fcc 	andi	r2,r2,255
   34ac8:	10000d26 	beq	r2,zero,34b00 <secp256k1_scalar_sqr_512+0x3bcc>
   34acc:	d0a01617 	ldw	r2,-32680(gp)
   34ad0:	10c00317 	ldw	r3,12(r2)
   34ad4:	00800174 	movhi	r2,5
   34ad8:	10973704 	addi	r2,r2,23772
   34adc:	d8800015 	stw	r2,0(sp)
   34ae0:	01c09a84 	movi	r7,618
   34ae4:	01800174 	movhi	r6,5
   34ae8:	31964204 	addi	r6,r6,22792
   34aec:	01400174 	movhi	r5,5
   34af0:	2951e804 	addi	r5,r5,18336
   34af4:	1809883a 	mov	r4,r3
   34af8:	00461000 	call	46100 <fprintf>
   34afc:	0045fd40 	call	45fd4 <abort>
   34b00:	e0fe6017 	ldw	r3,-1664(fp)
   34b04:	e0bef217 	ldw	r2,-1080(fp)
   34b08:	1885883a 	add	r2,r3,r2
   34b0c:	e0be6015 	stw	r2,-1664(fp)
   34b10:	e0fe6017 	ldw	r3,-1664(fp)
   34b14:	e0bef217 	ldw	r2,-1080(fp)
   34b18:	1880022e 	bgeu	r3,r2,34b24 <secp256k1_scalar_sqr_512+0x3bf0>
   34b1c:	00c00044 	movi	r3,1
   34b20:	00000106 	br	34b28 <secp256k1_scalar_sqr_512+0x3bf4>
   34b24:	0007883a 	mov	r3,zero
   34b28:	e0be6117 	ldw	r2,-1660(fp)
   34b2c:	10c5883a 	add	r2,r2,r3
   34b30:	e0be6115 	stw	r2,-1660(fp)
   34b34:	e0fe6017 	ldw	r3,-1664(fp)
   34b38:	e0bef217 	ldw	r2,-1080(fp)
   34b3c:	1885803a 	cmpltu	r2,r3,r2
   34b40:	10803fcc 	andi	r2,r2,255
   34b44:	10001126 	beq	r2,zero,34b8c <secp256k1_scalar_sqr_512+0x3c58>
   34b48:	e0be6117 	ldw	r2,-1660(fp)
   34b4c:	1005003a 	cmpeq	r2,r2,zero
   34b50:	10803fcc 	andi	r2,r2,255
   34b54:	10000d26 	beq	r2,zero,34b8c <secp256k1_scalar_sqr_512+0x3c58>
   34b58:	d0a01617 	ldw	r2,-32680(gp)
   34b5c:	10c00317 	ldw	r3,12(r2)
   34b60:	00800174 	movhi	r2,5
   34b64:	10974704 	addi	r2,r2,23836
   34b68:	d8800015 	stw	r2,0(sp)
   34b6c:	01c09a84 	movi	r7,618
   34b70:	01800174 	movhi	r6,5
   34b74:	31964204 	addi	r6,r6,22792
   34b78:	01400174 	movhi	r5,5
   34b7c:	2951e804 	addi	r5,r5,18336
   34b80:	1809883a 	mov	r4,r3
   34b84:	00461000 	call	46100 <fprintf>
   34b88:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[4], a->d[5]);
   34b8c:	e0bf2b17 	ldw	r2,-852(fp)
   34b90:	10800417 	ldw	r2,16(r2)
   34b94:	e0bfbc15 	stw	r2,-272(fp)
   34b98:	e03fbd15 	stw	zero,-268(fp)
   34b9c:	e0bf2b17 	ldw	r2,-852(fp)
   34ba0:	10800517 	ldw	r2,20(r2)
   34ba4:	e0bfbe15 	stw	r2,-264(fp)
   34ba8:	e03fbf15 	stw	zero,-260(fp)
   34bac:	e1bfbe17 	ldw	r6,-264(fp)
   34bb0:	e1ffbf17 	ldw	r7,-260(fp)
   34bb4:	e13fbc17 	ldw	r4,-272(fp)
   34bb8:	e17fbd17 	ldw	r5,-268(fp)
   34bbc:	00438e00 	call	438e0 <__muldi3>
   34bc0:	1009883a 	mov	r4,r2
   34bc4:	180b883a 	mov	r5,r3
   34bc8:	e13ef415 	stw	r4,-1072(fp)
   34bcc:	e17ef515 	stw	r5,-1068(fp)
   34bd0:	e0bef517 	ldw	r2,-1068(fp)
   34bd4:	1004d83a 	srl	r2,r2,zero
   34bd8:	e0bfc015 	stw	r2,-256(fp)
   34bdc:	e03fc115 	stw	zero,-252(fp)
   34be0:	e0bfc017 	ldw	r2,-256(fp)
   34be4:	e0bef615 	stw	r2,-1064(fp)
   34be8:	e0bef417 	ldw	r2,-1072(fp)
   34bec:	e0bef715 	stw	r2,-1060(fp)
   34bf0:	e0fef617 	ldw	r3,-1064(fp)
   34bf4:	e0bef617 	ldw	r2,-1064(fp)
   34bf8:	1885883a 	add	r2,r3,r2
   34bfc:	e0bef815 	stw	r2,-1056(fp)
   34c00:	e0fef817 	ldw	r3,-1056(fp)
   34c04:	e0bef617 	ldw	r2,-1064(fp)
   34c08:	1880022e 	bgeu	r3,r2,34c14 <secp256k1_scalar_sqr_512+0x3ce0>
   34c0c:	00c00044 	movi	r3,1
   34c10:	00000106 	br	34c18 <secp256k1_scalar_sqr_512+0x3ce4>
   34c14:	0007883a 	mov	r3,zero
   34c18:	e0be6117 	ldw	r2,-1660(fp)
   34c1c:	10c5883a 	add	r2,r2,r3
   34c20:	e0be6115 	stw	r2,-1660(fp)
   34c24:	e0fef817 	ldw	r3,-1056(fp)
   34c28:	e0bef617 	ldw	r2,-1064(fp)
   34c2c:	1885803a 	cmpltu	r2,r3,r2
   34c30:	10803fcc 	andi	r2,r2,255
   34c34:	10001126 	beq	r2,zero,34c7c <secp256k1_scalar_sqr_512+0x3d48>
   34c38:	e0be6117 	ldw	r2,-1660(fp)
   34c3c:	1005003a 	cmpeq	r2,r2,zero
   34c40:	10803fcc 	andi	r2,r2,255
   34c44:	10000d26 	beq	r2,zero,34c7c <secp256k1_scalar_sqr_512+0x3d48>
   34c48:	d0a01617 	ldw	r2,-32680(gp)
   34c4c:	10c00317 	ldw	r3,12(r2)
   34c50:	00800174 	movhi	r2,5
   34c54:	10972b04 	addi	r2,r2,23724
   34c58:	d8800015 	stw	r2,0(sp)
   34c5c:	01c09ac4 	movi	r7,619
   34c60:	01800174 	movhi	r6,5
   34c64:	31964204 	addi	r6,r6,22792
   34c68:	01400174 	movhi	r5,5
   34c6c:	2951e804 	addi	r5,r5,18336
   34c70:	1809883a 	mov	r4,r3
   34c74:	00461000 	call	46100 <fprintf>
   34c78:	0045fd40 	call	45fd4 <abort>
   34c7c:	e0fef717 	ldw	r3,-1060(fp)
   34c80:	e0bef717 	ldw	r2,-1060(fp)
   34c84:	1885883a 	add	r2,r3,r2
   34c88:	e0bef915 	stw	r2,-1052(fp)
   34c8c:	e0fef917 	ldw	r3,-1052(fp)
   34c90:	e0bef717 	ldw	r2,-1060(fp)
   34c94:	1880022e 	bgeu	r3,r2,34ca0 <secp256k1_scalar_sqr_512+0x3d6c>
   34c98:	00c00044 	movi	r3,1
   34c9c:	00000106 	br	34ca4 <secp256k1_scalar_sqr_512+0x3d70>
   34ca0:	0007883a 	mov	r3,zero
   34ca4:	e0bef817 	ldw	r2,-1056(fp)
   34ca8:	10c5883a 	add	r2,r2,r3
   34cac:	e0bef815 	stw	r2,-1056(fp)
   34cb0:	e0fe5f17 	ldw	r3,-1668(fp)
   34cb4:	e0bef917 	ldw	r2,-1052(fp)
   34cb8:	1885883a 	add	r2,r3,r2
   34cbc:	e0be5f15 	stw	r2,-1668(fp)
   34cc0:	e0fe5f17 	ldw	r3,-1668(fp)
   34cc4:	e0bef917 	ldw	r2,-1052(fp)
   34cc8:	1880022e 	bgeu	r3,r2,34cd4 <secp256k1_scalar_sqr_512+0x3da0>
   34ccc:	00c00044 	movi	r3,1
   34cd0:	00000106 	br	34cd8 <secp256k1_scalar_sqr_512+0x3da4>
   34cd4:	0007883a 	mov	r3,zero
   34cd8:	e0bef817 	ldw	r2,-1056(fp)
   34cdc:	10c5883a 	add	r2,r2,r3
   34ce0:	e0bef815 	stw	r2,-1056(fp)
   34ce4:	e0fe5f17 	ldw	r3,-1668(fp)
   34ce8:	e0bef917 	ldw	r2,-1052(fp)
   34cec:	1885803a 	cmpltu	r2,r3,r2
   34cf0:	1007883a 	mov	r3,r2
   34cf4:	e0bef817 	ldw	r2,-1056(fp)
   34cf8:	1005003a 	cmpeq	r2,r2,zero
   34cfc:	1884703a 	and	r2,r3,r2
   34d00:	10c03fcc 	andi	r3,r2,255
   34d04:	e0be6117 	ldw	r2,-1660(fp)
   34d08:	10c5883a 	add	r2,r2,r3
   34d0c:	e0be6115 	stw	r2,-1660(fp)
   34d10:	e0fe5f17 	ldw	r3,-1668(fp)
   34d14:	e0bef917 	ldw	r2,-1052(fp)
   34d18:	1885803a 	cmpltu	r2,r3,r2
   34d1c:	10803fcc 	andi	r2,r2,255
   34d20:	10000626 	beq	r2,zero,34d3c <secp256k1_scalar_sqr_512+0x3e08>
   34d24:	e0bef817 	ldw	r2,-1056(fp)
   34d28:	1005003a 	cmpeq	r2,r2,zero
   34d2c:	10803fcc 	andi	r2,r2,255
   34d30:	10000226 	beq	r2,zero,34d3c <secp256k1_scalar_sqr_512+0x3e08>
   34d34:	00800044 	movi	r2,1
   34d38:	00000106 	br	34d40 <secp256k1_scalar_sqr_512+0x3e0c>
   34d3c:	0005883a 	mov	r2,zero
   34d40:	10001126 	beq	r2,zero,34d88 <secp256k1_scalar_sqr_512+0x3e54>
   34d44:	e0be6117 	ldw	r2,-1660(fp)
   34d48:	1005003a 	cmpeq	r2,r2,zero
   34d4c:	10803fcc 	andi	r2,r2,255
   34d50:	10000d26 	beq	r2,zero,34d88 <secp256k1_scalar_sqr_512+0x3e54>
   34d54:	d0a01617 	ldw	r2,-32680(gp)
   34d58:	10c00317 	ldw	r3,12(r2)
   34d5c:	00800174 	movhi	r2,5
   34d60:	10973704 	addi	r2,r2,23772
   34d64:	d8800015 	stw	r2,0(sp)
   34d68:	01c09ac4 	movi	r7,619
   34d6c:	01800174 	movhi	r6,5
   34d70:	31964204 	addi	r6,r6,22792
   34d74:	01400174 	movhi	r5,5
   34d78:	2951e804 	addi	r5,r5,18336
   34d7c:	1809883a 	mov	r4,r3
   34d80:	00461000 	call	46100 <fprintf>
   34d84:	0045fd40 	call	45fd4 <abort>
   34d88:	e0fe6017 	ldw	r3,-1664(fp)
   34d8c:	e0bef817 	ldw	r2,-1056(fp)
   34d90:	1885883a 	add	r2,r3,r2
   34d94:	e0be6015 	stw	r2,-1664(fp)
   34d98:	e0fe6017 	ldw	r3,-1664(fp)
   34d9c:	e0bef817 	ldw	r2,-1056(fp)
   34da0:	1880022e 	bgeu	r3,r2,34dac <secp256k1_scalar_sqr_512+0x3e78>
   34da4:	00c00044 	movi	r3,1
   34da8:	00000106 	br	34db0 <secp256k1_scalar_sqr_512+0x3e7c>
   34dac:	0007883a 	mov	r3,zero
   34db0:	e0be6117 	ldw	r2,-1660(fp)
   34db4:	10c5883a 	add	r2,r2,r3
   34db8:	e0be6115 	stw	r2,-1660(fp)
   34dbc:	e0fe6017 	ldw	r3,-1664(fp)
   34dc0:	e0bef817 	ldw	r2,-1056(fp)
   34dc4:	1885803a 	cmpltu	r2,r3,r2
   34dc8:	10803fcc 	andi	r2,r2,255
   34dcc:	10001126 	beq	r2,zero,34e14 <secp256k1_scalar_sqr_512+0x3ee0>
   34dd0:	e0be6117 	ldw	r2,-1660(fp)
   34dd4:	1005003a 	cmpeq	r2,r2,zero
   34dd8:	10803fcc 	andi	r2,r2,255
   34ddc:	10000d26 	beq	r2,zero,34e14 <secp256k1_scalar_sqr_512+0x3ee0>
   34de0:	d0a01617 	ldw	r2,-32680(gp)
   34de4:	10c00317 	ldw	r3,12(r2)
   34de8:	00800174 	movhi	r2,5
   34dec:	10974704 	addi	r2,r2,23836
   34df0:	d8800015 	stw	r2,0(sp)
   34df4:	01c09ac4 	movi	r7,619
   34df8:	01800174 	movhi	r6,5
   34dfc:	31964204 	addi	r6,r6,22792
   34e00:	01400174 	movhi	r5,5
   34e04:	2951e804 	addi	r5,r5,18336
   34e08:	1809883a 	mov	r4,r3
   34e0c:	00461000 	call	46100 <fprintf>
   34e10:	0045fd40 	call	45fd4 <abort>
    extract(l[9]);
   34e14:	e0bf2a17 	ldw	r2,-856(fp)
   34e18:	10c00904 	addi	r3,r2,36
   34e1c:	e0be5f17 	ldw	r2,-1668(fp)
   34e20:	18800015 	stw	r2,0(r3)
   34e24:	e0be6017 	ldw	r2,-1664(fp)
   34e28:	e0be5f15 	stw	r2,-1668(fp)
   34e2c:	e0be6117 	ldw	r2,-1660(fp)
   34e30:	e0be6015 	stw	r2,-1664(fp)
   34e34:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[3], a->d[7]);
   34e38:	e0bf2b17 	ldw	r2,-852(fp)
   34e3c:	10800317 	ldw	r2,12(r2)
   34e40:	e0bfc215 	stw	r2,-248(fp)
   34e44:	e03fc315 	stw	zero,-244(fp)
   34e48:	e0bf2b17 	ldw	r2,-852(fp)
   34e4c:	10800717 	ldw	r2,28(r2)
   34e50:	e0bfc415 	stw	r2,-240(fp)
   34e54:	e03fc515 	stw	zero,-236(fp)
   34e58:	e1bfc417 	ldw	r6,-240(fp)
   34e5c:	e1ffc517 	ldw	r7,-236(fp)
   34e60:	e13fc217 	ldw	r4,-248(fp)
   34e64:	e17fc317 	ldw	r5,-244(fp)
   34e68:	00438e00 	call	438e0 <__muldi3>
   34e6c:	1009883a 	mov	r4,r2
   34e70:	180b883a 	mov	r5,r3
   34e74:	e13efa15 	stw	r4,-1048(fp)
   34e78:	e17efb15 	stw	r5,-1044(fp)
   34e7c:	e0befb17 	ldw	r2,-1044(fp)
   34e80:	1004d83a 	srl	r2,r2,zero
   34e84:	e0bfc615 	stw	r2,-232(fp)
   34e88:	e03fc715 	stw	zero,-228(fp)
   34e8c:	e0bfc617 	ldw	r2,-232(fp)
   34e90:	e0befc15 	stw	r2,-1040(fp)
   34e94:	e0befa17 	ldw	r2,-1048(fp)
   34e98:	e0befd15 	stw	r2,-1036(fp)
   34e9c:	e0fefc17 	ldw	r3,-1040(fp)
   34ea0:	e0befc17 	ldw	r2,-1040(fp)
   34ea4:	1885883a 	add	r2,r3,r2
   34ea8:	e0befe15 	stw	r2,-1032(fp)
   34eac:	e0fefe17 	ldw	r3,-1032(fp)
   34eb0:	e0befc17 	ldw	r2,-1040(fp)
   34eb4:	1880022e 	bgeu	r3,r2,34ec0 <secp256k1_scalar_sqr_512+0x3f8c>
   34eb8:	00c00044 	movi	r3,1
   34ebc:	00000106 	br	34ec4 <secp256k1_scalar_sqr_512+0x3f90>
   34ec0:	0007883a 	mov	r3,zero
   34ec4:	e0be6117 	ldw	r2,-1660(fp)
   34ec8:	10c5883a 	add	r2,r2,r3
   34ecc:	e0be6115 	stw	r2,-1660(fp)
   34ed0:	e0fefe17 	ldw	r3,-1032(fp)
   34ed4:	e0befc17 	ldw	r2,-1040(fp)
   34ed8:	1885803a 	cmpltu	r2,r3,r2
   34edc:	10803fcc 	andi	r2,r2,255
   34ee0:	10001126 	beq	r2,zero,34f28 <secp256k1_scalar_sqr_512+0x3ff4>
   34ee4:	e0be6117 	ldw	r2,-1660(fp)
   34ee8:	1005003a 	cmpeq	r2,r2,zero
   34eec:	10803fcc 	andi	r2,r2,255
   34ef0:	10000d26 	beq	r2,zero,34f28 <secp256k1_scalar_sqr_512+0x3ff4>
   34ef4:	d0a01617 	ldw	r2,-32680(gp)
   34ef8:	10c00317 	ldw	r3,12(r2)
   34efc:	00800174 	movhi	r2,5
   34f00:	10972b04 	addi	r2,r2,23724
   34f04:	d8800015 	stw	r2,0(sp)
   34f08:	01c09b44 	movi	r7,621
   34f0c:	01800174 	movhi	r6,5
   34f10:	31964204 	addi	r6,r6,22792
   34f14:	01400174 	movhi	r5,5
   34f18:	2951e804 	addi	r5,r5,18336
   34f1c:	1809883a 	mov	r4,r3
   34f20:	00461000 	call	46100 <fprintf>
   34f24:	0045fd40 	call	45fd4 <abort>
   34f28:	e0fefd17 	ldw	r3,-1036(fp)
   34f2c:	e0befd17 	ldw	r2,-1036(fp)
   34f30:	1885883a 	add	r2,r3,r2
   34f34:	e0beff15 	stw	r2,-1028(fp)
   34f38:	e0feff17 	ldw	r3,-1028(fp)
   34f3c:	e0befd17 	ldw	r2,-1036(fp)
   34f40:	1880022e 	bgeu	r3,r2,34f4c <secp256k1_scalar_sqr_512+0x4018>
   34f44:	00c00044 	movi	r3,1
   34f48:	00000106 	br	34f50 <secp256k1_scalar_sqr_512+0x401c>
   34f4c:	0007883a 	mov	r3,zero
   34f50:	e0befe17 	ldw	r2,-1032(fp)
   34f54:	10c5883a 	add	r2,r2,r3
   34f58:	e0befe15 	stw	r2,-1032(fp)
   34f5c:	e0fe5f17 	ldw	r3,-1668(fp)
   34f60:	e0beff17 	ldw	r2,-1028(fp)
   34f64:	1885883a 	add	r2,r3,r2
   34f68:	e0be5f15 	stw	r2,-1668(fp)
   34f6c:	e0fe5f17 	ldw	r3,-1668(fp)
   34f70:	e0beff17 	ldw	r2,-1028(fp)
   34f74:	1880022e 	bgeu	r3,r2,34f80 <secp256k1_scalar_sqr_512+0x404c>
   34f78:	00c00044 	movi	r3,1
   34f7c:	00000106 	br	34f84 <secp256k1_scalar_sqr_512+0x4050>
   34f80:	0007883a 	mov	r3,zero
   34f84:	e0befe17 	ldw	r2,-1032(fp)
   34f88:	10c5883a 	add	r2,r2,r3
   34f8c:	e0befe15 	stw	r2,-1032(fp)
   34f90:	e0fe5f17 	ldw	r3,-1668(fp)
   34f94:	e0beff17 	ldw	r2,-1028(fp)
   34f98:	1885803a 	cmpltu	r2,r3,r2
   34f9c:	1007883a 	mov	r3,r2
   34fa0:	e0befe17 	ldw	r2,-1032(fp)
   34fa4:	1005003a 	cmpeq	r2,r2,zero
   34fa8:	1884703a 	and	r2,r3,r2
   34fac:	10c03fcc 	andi	r3,r2,255
   34fb0:	e0be6117 	ldw	r2,-1660(fp)
   34fb4:	10c5883a 	add	r2,r2,r3
   34fb8:	e0be6115 	stw	r2,-1660(fp)
   34fbc:	e0fe5f17 	ldw	r3,-1668(fp)
   34fc0:	e0beff17 	ldw	r2,-1028(fp)
   34fc4:	1885803a 	cmpltu	r2,r3,r2
   34fc8:	10803fcc 	andi	r2,r2,255
   34fcc:	10000626 	beq	r2,zero,34fe8 <secp256k1_scalar_sqr_512+0x40b4>
   34fd0:	e0befe17 	ldw	r2,-1032(fp)
   34fd4:	1005003a 	cmpeq	r2,r2,zero
   34fd8:	10803fcc 	andi	r2,r2,255
   34fdc:	10000226 	beq	r2,zero,34fe8 <secp256k1_scalar_sqr_512+0x40b4>
   34fe0:	00800044 	movi	r2,1
   34fe4:	00000106 	br	34fec <secp256k1_scalar_sqr_512+0x40b8>
   34fe8:	0005883a 	mov	r2,zero
   34fec:	10001126 	beq	r2,zero,35034 <secp256k1_scalar_sqr_512+0x4100>
   34ff0:	e0be6117 	ldw	r2,-1660(fp)
   34ff4:	1005003a 	cmpeq	r2,r2,zero
   34ff8:	10803fcc 	andi	r2,r2,255
   34ffc:	10000d26 	beq	r2,zero,35034 <secp256k1_scalar_sqr_512+0x4100>
   35000:	d0a01617 	ldw	r2,-32680(gp)
   35004:	10c00317 	ldw	r3,12(r2)
   35008:	00800174 	movhi	r2,5
   3500c:	10973704 	addi	r2,r2,23772
   35010:	d8800015 	stw	r2,0(sp)
   35014:	01c09b44 	movi	r7,621
   35018:	01800174 	movhi	r6,5
   3501c:	31964204 	addi	r6,r6,22792
   35020:	01400174 	movhi	r5,5
   35024:	2951e804 	addi	r5,r5,18336
   35028:	1809883a 	mov	r4,r3
   3502c:	00461000 	call	46100 <fprintf>
   35030:	0045fd40 	call	45fd4 <abort>
   35034:	e0fe6017 	ldw	r3,-1664(fp)
   35038:	e0befe17 	ldw	r2,-1032(fp)
   3503c:	1885883a 	add	r2,r3,r2
   35040:	e0be6015 	stw	r2,-1664(fp)
   35044:	e0fe6017 	ldw	r3,-1664(fp)
   35048:	e0befe17 	ldw	r2,-1032(fp)
   3504c:	1880022e 	bgeu	r3,r2,35058 <secp256k1_scalar_sqr_512+0x4124>
   35050:	00c00044 	movi	r3,1
   35054:	00000106 	br	3505c <secp256k1_scalar_sqr_512+0x4128>
   35058:	0007883a 	mov	r3,zero
   3505c:	e0be6117 	ldw	r2,-1660(fp)
   35060:	10c5883a 	add	r2,r2,r3
   35064:	e0be6115 	stw	r2,-1660(fp)
   35068:	e0fe6017 	ldw	r3,-1664(fp)
   3506c:	e0befe17 	ldw	r2,-1032(fp)
   35070:	1885803a 	cmpltu	r2,r3,r2
   35074:	10803fcc 	andi	r2,r2,255
   35078:	10001126 	beq	r2,zero,350c0 <secp256k1_scalar_sqr_512+0x418c>
   3507c:	e0be6117 	ldw	r2,-1660(fp)
   35080:	1005003a 	cmpeq	r2,r2,zero
   35084:	10803fcc 	andi	r2,r2,255
   35088:	10000d26 	beq	r2,zero,350c0 <secp256k1_scalar_sqr_512+0x418c>
   3508c:	d0a01617 	ldw	r2,-32680(gp)
   35090:	10c00317 	ldw	r3,12(r2)
   35094:	00800174 	movhi	r2,5
   35098:	10974704 	addi	r2,r2,23836
   3509c:	d8800015 	stw	r2,0(sp)
   350a0:	01c09b44 	movi	r7,621
   350a4:	01800174 	movhi	r6,5
   350a8:	31964204 	addi	r6,r6,22792
   350ac:	01400174 	movhi	r5,5
   350b0:	2951e804 	addi	r5,r5,18336
   350b4:	1809883a 	mov	r4,r3
   350b8:	00461000 	call	46100 <fprintf>
   350bc:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[4], a->d[6]);
   350c0:	e0bf2b17 	ldw	r2,-852(fp)
   350c4:	10800417 	ldw	r2,16(r2)
   350c8:	e0bfc815 	stw	r2,-224(fp)
   350cc:	e03fc915 	stw	zero,-220(fp)
   350d0:	e0bf2b17 	ldw	r2,-852(fp)
   350d4:	10800617 	ldw	r2,24(r2)
   350d8:	e0bfca15 	stw	r2,-216(fp)
   350dc:	e03fcb15 	stw	zero,-212(fp)
   350e0:	e1bfca17 	ldw	r6,-216(fp)
   350e4:	e1ffcb17 	ldw	r7,-212(fp)
   350e8:	e13fc817 	ldw	r4,-224(fp)
   350ec:	e17fc917 	ldw	r5,-220(fp)
   350f0:	00438e00 	call	438e0 <__muldi3>
   350f4:	1009883a 	mov	r4,r2
   350f8:	180b883a 	mov	r5,r3
   350fc:	e13f0015 	stw	r4,-1024(fp)
   35100:	e17f0115 	stw	r5,-1020(fp)
   35104:	e0bf0117 	ldw	r2,-1020(fp)
   35108:	1004d83a 	srl	r2,r2,zero
   3510c:	e0bfcc15 	stw	r2,-208(fp)
   35110:	e03fcd15 	stw	zero,-204(fp)
   35114:	e0bfcc17 	ldw	r2,-208(fp)
   35118:	e0bf0215 	stw	r2,-1016(fp)
   3511c:	e0bf0017 	ldw	r2,-1024(fp)
   35120:	e0bf0315 	stw	r2,-1012(fp)
   35124:	e0ff0217 	ldw	r3,-1016(fp)
   35128:	e0bf0217 	ldw	r2,-1016(fp)
   3512c:	1885883a 	add	r2,r3,r2
   35130:	e0bf0415 	stw	r2,-1008(fp)
   35134:	e0ff0417 	ldw	r3,-1008(fp)
   35138:	e0bf0217 	ldw	r2,-1016(fp)
   3513c:	1880022e 	bgeu	r3,r2,35148 <secp256k1_scalar_sqr_512+0x4214>
   35140:	00c00044 	movi	r3,1
   35144:	00000106 	br	3514c <secp256k1_scalar_sqr_512+0x4218>
   35148:	0007883a 	mov	r3,zero
   3514c:	e0be6117 	ldw	r2,-1660(fp)
   35150:	10c5883a 	add	r2,r2,r3
   35154:	e0be6115 	stw	r2,-1660(fp)
   35158:	e0ff0417 	ldw	r3,-1008(fp)
   3515c:	e0bf0217 	ldw	r2,-1016(fp)
   35160:	1885803a 	cmpltu	r2,r3,r2
   35164:	10803fcc 	andi	r2,r2,255
   35168:	10001126 	beq	r2,zero,351b0 <secp256k1_scalar_sqr_512+0x427c>
   3516c:	e0be6117 	ldw	r2,-1660(fp)
   35170:	1005003a 	cmpeq	r2,r2,zero
   35174:	10803fcc 	andi	r2,r2,255
   35178:	10000d26 	beq	r2,zero,351b0 <secp256k1_scalar_sqr_512+0x427c>
   3517c:	d0a01617 	ldw	r2,-32680(gp)
   35180:	10c00317 	ldw	r3,12(r2)
   35184:	00800174 	movhi	r2,5
   35188:	10972b04 	addi	r2,r2,23724
   3518c:	d8800015 	stw	r2,0(sp)
   35190:	01c09b84 	movi	r7,622
   35194:	01800174 	movhi	r6,5
   35198:	31964204 	addi	r6,r6,22792
   3519c:	01400174 	movhi	r5,5
   351a0:	2951e804 	addi	r5,r5,18336
   351a4:	1809883a 	mov	r4,r3
   351a8:	00461000 	call	46100 <fprintf>
   351ac:	0045fd40 	call	45fd4 <abort>
   351b0:	e0ff0317 	ldw	r3,-1012(fp)
   351b4:	e0bf0317 	ldw	r2,-1012(fp)
   351b8:	1885883a 	add	r2,r3,r2
   351bc:	e0bf0515 	stw	r2,-1004(fp)
   351c0:	e0ff0517 	ldw	r3,-1004(fp)
   351c4:	e0bf0317 	ldw	r2,-1012(fp)
   351c8:	1880022e 	bgeu	r3,r2,351d4 <secp256k1_scalar_sqr_512+0x42a0>
   351cc:	00c00044 	movi	r3,1
   351d0:	00000106 	br	351d8 <secp256k1_scalar_sqr_512+0x42a4>
   351d4:	0007883a 	mov	r3,zero
   351d8:	e0bf0417 	ldw	r2,-1008(fp)
   351dc:	10c5883a 	add	r2,r2,r3
   351e0:	e0bf0415 	stw	r2,-1008(fp)
   351e4:	e0fe5f17 	ldw	r3,-1668(fp)
   351e8:	e0bf0517 	ldw	r2,-1004(fp)
   351ec:	1885883a 	add	r2,r3,r2
   351f0:	e0be5f15 	stw	r2,-1668(fp)
   351f4:	e0fe5f17 	ldw	r3,-1668(fp)
   351f8:	e0bf0517 	ldw	r2,-1004(fp)
   351fc:	1880022e 	bgeu	r3,r2,35208 <secp256k1_scalar_sqr_512+0x42d4>
   35200:	00c00044 	movi	r3,1
   35204:	00000106 	br	3520c <secp256k1_scalar_sqr_512+0x42d8>
   35208:	0007883a 	mov	r3,zero
   3520c:	e0bf0417 	ldw	r2,-1008(fp)
   35210:	10c5883a 	add	r2,r2,r3
   35214:	e0bf0415 	stw	r2,-1008(fp)
   35218:	e0fe5f17 	ldw	r3,-1668(fp)
   3521c:	e0bf0517 	ldw	r2,-1004(fp)
   35220:	1885803a 	cmpltu	r2,r3,r2
   35224:	1007883a 	mov	r3,r2
   35228:	e0bf0417 	ldw	r2,-1008(fp)
   3522c:	1005003a 	cmpeq	r2,r2,zero
   35230:	1884703a 	and	r2,r3,r2
   35234:	10c03fcc 	andi	r3,r2,255
   35238:	e0be6117 	ldw	r2,-1660(fp)
   3523c:	10c5883a 	add	r2,r2,r3
   35240:	e0be6115 	stw	r2,-1660(fp)
   35244:	e0fe5f17 	ldw	r3,-1668(fp)
   35248:	e0bf0517 	ldw	r2,-1004(fp)
   3524c:	1885803a 	cmpltu	r2,r3,r2
   35250:	10803fcc 	andi	r2,r2,255
   35254:	10000626 	beq	r2,zero,35270 <secp256k1_scalar_sqr_512+0x433c>
   35258:	e0bf0417 	ldw	r2,-1008(fp)
   3525c:	1005003a 	cmpeq	r2,r2,zero
   35260:	10803fcc 	andi	r2,r2,255
   35264:	10000226 	beq	r2,zero,35270 <secp256k1_scalar_sqr_512+0x433c>
   35268:	00800044 	movi	r2,1
   3526c:	00000106 	br	35274 <secp256k1_scalar_sqr_512+0x4340>
   35270:	0005883a 	mov	r2,zero
   35274:	10001126 	beq	r2,zero,352bc <secp256k1_scalar_sqr_512+0x4388>
   35278:	e0be6117 	ldw	r2,-1660(fp)
   3527c:	1005003a 	cmpeq	r2,r2,zero
   35280:	10803fcc 	andi	r2,r2,255
   35284:	10000d26 	beq	r2,zero,352bc <secp256k1_scalar_sqr_512+0x4388>
   35288:	d0a01617 	ldw	r2,-32680(gp)
   3528c:	10c00317 	ldw	r3,12(r2)
   35290:	00800174 	movhi	r2,5
   35294:	10973704 	addi	r2,r2,23772
   35298:	d8800015 	stw	r2,0(sp)
   3529c:	01c09b84 	movi	r7,622
   352a0:	01800174 	movhi	r6,5
   352a4:	31964204 	addi	r6,r6,22792
   352a8:	01400174 	movhi	r5,5
   352ac:	2951e804 	addi	r5,r5,18336
   352b0:	1809883a 	mov	r4,r3
   352b4:	00461000 	call	46100 <fprintf>
   352b8:	0045fd40 	call	45fd4 <abort>
   352bc:	e0fe6017 	ldw	r3,-1664(fp)
   352c0:	e0bf0417 	ldw	r2,-1008(fp)
   352c4:	1885883a 	add	r2,r3,r2
   352c8:	e0be6015 	stw	r2,-1664(fp)
   352cc:	e0fe6017 	ldw	r3,-1664(fp)
   352d0:	e0bf0417 	ldw	r2,-1008(fp)
   352d4:	1880022e 	bgeu	r3,r2,352e0 <secp256k1_scalar_sqr_512+0x43ac>
   352d8:	00c00044 	movi	r3,1
   352dc:	00000106 	br	352e4 <secp256k1_scalar_sqr_512+0x43b0>
   352e0:	0007883a 	mov	r3,zero
   352e4:	e0be6117 	ldw	r2,-1660(fp)
   352e8:	10c5883a 	add	r2,r2,r3
   352ec:	e0be6115 	stw	r2,-1660(fp)
   352f0:	e0fe6017 	ldw	r3,-1664(fp)
   352f4:	e0bf0417 	ldw	r2,-1008(fp)
   352f8:	1885803a 	cmpltu	r2,r3,r2
   352fc:	10803fcc 	andi	r2,r2,255
   35300:	10001126 	beq	r2,zero,35348 <secp256k1_scalar_sqr_512+0x4414>
   35304:	e0be6117 	ldw	r2,-1660(fp)
   35308:	1005003a 	cmpeq	r2,r2,zero
   3530c:	10803fcc 	andi	r2,r2,255
   35310:	10000d26 	beq	r2,zero,35348 <secp256k1_scalar_sqr_512+0x4414>
   35314:	d0a01617 	ldw	r2,-32680(gp)
   35318:	10c00317 	ldw	r3,12(r2)
   3531c:	00800174 	movhi	r2,5
   35320:	10974704 	addi	r2,r2,23836
   35324:	d8800015 	stw	r2,0(sp)
   35328:	01c09b84 	movi	r7,622
   3532c:	01800174 	movhi	r6,5
   35330:	31964204 	addi	r6,r6,22792
   35334:	01400174 	movhi	r5,5
   35338:	2951e804 	addi	r5,r5,18336
   3533c:	1809883a 	mov	r4,r3
   35340:	00461000 	call	46100 <fprintf>
   35344:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[5], a->d[5]);
   35348:	e0bf2b17 	ldw	r2,-852(fp)
   3534c:	10800517 	ldw	r2,20(r2)
   35350:	e0bfce15 	stw	r2,-200(fp)
   35354:	e03fcf15 	stw	zero,-196(fp)
   35358:	e0bf2b17 	ldw	r2,-852(fp)
   3535c:	10800517 	ldw	r2,20(r2)
   35360:	e0bfd015 	stw	r2,-192(fp)
   35364:	e03fd115 	stw	zero,-188(fp)
   35368:	e1bfd017 	ldw	r6,-192(fp)
   3536c:	e1ffd117 	ldw	r7,-188(fp)
   35370:	e13fce17 	ldw	r4,-200(fp)
   35374:	e17fcf17 	ldw	r5,-196(fp)
   35378:	00438e00 	call	438e0 <__muldi3>
   3537c:	1009883a 	mov	r4,r2
   35380:	180b883a 	mov	r5,r3
   35384:	e13f0615 	stw	r4,-1000(fp)
   35388:	e17f0715 	stw	r5,-996(fp)
   3538c:	e0bf0717 	ldw	r2,-996(fp)
   35390:	1004d83a 	srl	r2,r2,zero
   35394:	e0bfd215 	stw	r2,-184(fp)
   35398:	e03fd315 	stw	zero,-180(fp)
   3539c:	e0bfd217 	ldw	r2,-184(fp)
   353a0:	e0bf0815 	stw	r2,-992(fp)
   353a4:	e0bf0617 	ldw	r2,-1000(fp)
   353a8:	e0bf0915 	stw	r2,-988(fp)
   353ac:	e0fe5f17 	ldw	r3,-1668(fp)
   353b0:	e0bf0917 	ldw	r2,-988(fp)
   353b4:	1885883a 	add	r2,r3,r2
   353b8:	e0be5f15 	stw	r2,-1668(fp)
   353bc:	e0fe5f17 	ldw	r3,-1668(fp)
   353c0:	e0bf0917 	ldw	r2,-988(fp)
   353c4:	1880022e 	bgeu	r3,r2,353d0 <secp256k1_scalar_sqr_512+0x449c>
   353c8:	00c00044 	movi	r3,1
   353cc:	00000106 	br	353d4 <secp256k1_scalar_sqr_512+0x44a0>
   353d0:	0007883a 	mov	r3,zero
   353d4:	e0bf0817 	ldw	r2,-992(fp)
   353d8:	10c5883a 	add	r2,r2,r3
   353dc:	e0bf0815 	stw	r2,-992(fp)
   353e0:	e0fe6017 	ldw	r3,-1664(fp)
   353e4:	e0bf0817 	ldw	r2,-992(fp)
   353e8:	1885883a 	add	r2,r3,r2
   353ec:	e0be6015 	stw	r2,-1664(fp)
   353f0:	e0fe6017 	ldw	r3,-1664(fp)
   353f4:	e0bf0817 	ldw	r2,-992(fp)
   353f8:	1880022e 	bgeu	r3,r2,35404 <secp256k1_scalar_sqr_512+0x44d0>
   353fc:	00c00044 	movi	r3,1
   35400:	00000106 	br	35408 <secp256k1_scalar_sqr_512+0x44d4>
   35404:	0007883a 	mov	r3,zero
   35408:	e0be6117 	ldw	r2,-1660(fp)
   3540c:	10c5883a 	add	r2,r2,r3
   35410:	e0be6115 	stw	r2,-1660(fp)
   35414:	e0fe6017 	ldw	r3,-1664(fp)
   35418:	e0bf0817 	ldw	r2,-992(fp)
   3541c:	1885803a 	cmpltu	r2,r3,r2
   35420:	10803fcc 	andi	r2,r2,255
   35424:	10001126 	beq	r2,zero,3546c <secp256k1_scalar_sqr_512+0x4538>
   35428:	e0be6117 	ldw	r2,-1660(fp)
   3542c:	1005003a 	cmpeq	r2,r2,zero
   35430:	10803fcc 	andi	r2,r2,255
   35434:	10000d26 	beq	r2,zero,3546c <secp256k1_scalar_sqr_512+0x4538>
   35438:	d0a01617 	ldw	r2,-32680(gp)
   3543c:	10c00317 	ldw	r3,12(r2)
   35440:	00800174 	movhi	r2,5
   35444:	1096d604 	addi	r2,r2,23384
   35448:	d8800015 	stw	r2,0(sp)
   3544c:	01c09bc4 	movi	r7,623
   35450:	01800174 	movhi	r6,5
   35454:	31964204 	addi	r6,r6,22792
   35458:	01400174 	movhi	r5,5
   3545c:	2951e804 	addi	r5,r5,18336
   35460:	1809883a 	mov	r4,r3
   35464:	00461000 	call	46100 <fprintf>
   35468:	0045fd40 	call	45fd4 <abort>
    extract(l[10]);
   3546c:	e0bf2a17 	ldw	r2,-856(fp)
   35470:	10c00a04 	addi	r3,r2,40
   35474:	e0be5f17 	ldw	r2,-1668(fp)
   35478:	18800015 	stw	r2,0(r3)
   3547c:	e0be6017 	ldw	r2,-1664(fp)
   35480:	e0be5f15 	stw	r2,-1668(fp)
   35484:	e0be6117 	ldw	r2,-1660(fp)
   35488:	e0be6015 	stw	r2,-1664(fp)
   3548c:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[4], a->d[7]);
   35490:	e0bf2b17 	ldw	r2,-852(fp)
   35494:	10800417 	ldw	r2,16(r2)
   35498:	e0bfd415 	stw	r2,-176(fp)
   3549c:	e03fd515 	stw	zero,-172(fp)
   354a0:	e0bf2b17 	ldw	r2,-852(fp)
   354a4:	10800717 	ldw	r2,28(r2)
   354a8:	e0bfd615 	stw	r2,-168(fp)
   354ac:	e03fd715 	stw	zero,-164(fp)
   354b0:	e1bfd617 	ldw	r6,-168(fp)
   354b4:	e1ffd717 	ldw	r7,-164(fp)
   354b8:	e13fd417 	ldw	r4,-176(fp)
   354bc:	e17fd517 	ldw	r5,-172(fp)
   354c0:	00438e00 	call	438e0 <__muldi3>
   354c4:	1009883a 	mov	r4,r2
   354c8:	180b883a 	mov	r5,r3
   354cc:	e13f0a15 	stw	r4,-984(fp)
   354d0:	e17f0b15 	stw	r5,-980(fp)
   354d4:	e0bf0b17 	ldw	r2,-980(fp)
   354d8:	1004d83a 	srl	r2,r2,zero
   354dc:	e0bfd815 	stw	r2,-160(fp)
   354e0:	e03fd915 	stw	zero,-156(fp)
   354e4:	e0bfd817 	ldw	r2,-160(fp)
   354e8:	e0bf0c15 	stw	r2,-976(fp)
   354ec:	e0bf0a17 	ldw	r2,-984(fp)
   354f0:	e0bf0d15 	stw	r2,-972(fp)
   354f4:	e0ff0c17 	ldw	r3,-976(fp)
   354f8:	e0bf0c17 	ldw	r2,-976(fp)
   354fc:	1885883a 	add	r2,r3,r2
   35500:	e0bf0e15 	stw	r2,-968(fp)
   35504:	e0ff0e17 	ldw	r3,-968(fp)
   35508:	e0bf0c17 	ldw	r2,-976(fp)
   3550c:	1880022e 	bgeu	r3,r2,35518 <secp256k1_scalar_sqr_512+0x45e4>
   35510:	00c00044 	movi	r3,1
   35514:	00000106 	br	3551c <secp256k1_scalar_sqr_512+0x45e8>
   35518:	0007883a 	mov	r3,zero
   3551c:	e0be6117 	ldw	r2,-1660(fp)
   35520:	10c5883a 	add	r2,r2,r3
   35524:	e0be6115 	stw	r2,-1660(fp)
   35528:	e0ff0e17 	ldw	r3,-968(fp)
   3552c:	e0bf0c17 	ldw	r2,-976(fp)
   35530:	1885803a 	cmpltu	r2,r3,r2
   35534:	10803fcc 	andi	r2,r2,255
   35538:	10001126 	beq	r2,zero,35580 <secp256k1_scalar_sqr_512+0x464c>
   3553c:	e0be6117 	ldw	r2,-1660(fp)
   35540:	1005003a 	cmpeq	r2,r2,zero
   35544:	10803fcc 	andi	r2,r2,255
   35548:	10000d26 	beq	r2,zero,35580 <secp256k1_scalar_sqr_512+0x464c>
   3554c:	d0a01617 	ldw	r2,-32680(gp)
   35550:	10c00317 	ldw	r3,12(r2)
   35554:	00800174 	movhi	r2,5
   35558:	10972b04 	addi	r2,r2,23724
   3555c:	d8800015 	stw	r2,0(sp)
   35560:	01c09c44 	movi	r7,625
   35564:	01800174 	movhi	r6,5
   35568:	31964204 	addi	r6,r6,22792
   3556c:	01400174 	movhi	r5,5
   35570:	2951e804 	addi	r5,r5,18336
   35574:	1809883a 	mov	r4,r3
   35578:	00461000 	call	46100 <fprintf>
   3557c:	0045fd40 	call	45fd4 <abort>
   35580:	e0ff0d17 	ldw	r3,-972(fp)
   35584:	e0bf0d17 	ldw	r2,-972(fp)
   35588:	1885883a 	add	r2,r3,r2
   3558c:	e0bf0f15 	stw	r2,-964(fp)
   35590:	e0ff0f17 	ldw	r3,-964(fp)
   35594:	e0bf0d17 	ldw	r2,-972(fp)
   35598:	1880022e 	bgeu	r3,r2,355a4 <secp256k1_scalar_sqr_512+0x4670>
   3559c:	00c00044 	movi	r3,1
   355a0:	00000106 	br	355a8 <secp256k1_scalar_sqr_512+0x4674>
   355a4:	0007883a 	mov	r3,zero
   355a8:	e0bf0e17 	ldw	r2,-968(fp)
   355ac:	10c5883a 	add	r2,r2,r3
   355b0:	e0bf0e15 	stw	r2,-968(fp)
   355b4:	e0fe5f17 	ldw	r3,-1668(fp)
   355b8:	e0bf0f17 	ldw	r2,-964(fp)
   355bc:	1885883a 	add	r2,r3,r2
   355c0:	e0be5f15 	stw	r2,-1668(fp)
   355c4:	e0fe5f17 	ldw	r3,-1668(fp)
   355c8:	e0bf0f17 	ldw	r2,-964(fp)
   355cc:	1880022e 	bgeu	r3,r2,355d8 <secp256k1_scalar_sqr_512+0x46a4>
   355d0:	00c00044 	movi	r3,1
   355d4:	00000106 	br	355dc <secp256k1_scalar_sqr_512+0x46a8>
   355d8:	0007883a 	mov	r3,zero
   355dc:	e0bf0e17 	ldw	r2,-968(fp)
   355e0:	10c5883a 	add	r2,r2,r3
   355e4:	e0bf0e15 	stw	r2,-968(fp)
   355e8:	e0fe5f17 	ldw	r3,-1668(fp)
   355ec:	e0bf0f17 	ldw	r2,-964(fp)
   355f0:	1885803a 	cmpltu	r2,r3,r2
   355f4:	1007883a 	mov	r3,r2
   355f8:	e0bf0e17 	ldw	r2,-968(fp)
   355fc:	1005003a 	cmpeq	r2,r2,zero
   35600:	1884703a 	and	r2,r3,r2
   35604:	10c03fcc 	andi	r3,r2,255
   35608:	e0be6117 	ldw	r2,-1660(fp)
   3560c:	10c5883a 	add	r2,r2,r3
   35610:	e0be6115 	stw	r2,-1660(fp)
   35614:	e0fe5f17 	ldw	r3,-1668(fp)
   35618:	e0bf0f17 	ldw	r2,-964(fp)
   3561c:	1885803a 	cmpltu	r2,r3,r2
   35620:	10803fcc 	andi	r2,r2,255
   35624:	10000626 	beq	r2,zero,35640 <secp256k1_scalar_sqr_512+0x470c>
   35628:	e0bf0e17 	ldw	r2,-968(fp)
   3562c:	1005003a 	cmpeq	r2,r2,zero
   35630:	10803fcc 	andi	r2,r2,255
   35634:	10000226 	beq	r2,zero,35640 <secp256k1_scalar_sqr_512+0x470c>
   35638:	00800044 	movi	r2,1
   3563c:	00000106 	br	35644 <secp256k1_scalar_sqr_512+0x4710>
   35640:	0005883a 	mov	r2,zero
   35644:	10001126 	beq	r2,zero,3568c <secp256k1_scalar_sqr_512+0x4758>
   35648:	e0be6117 	ldw	r2,-1660(fp)
   3564c:	1005003a 	cmpeq	r2,r2,zero
   35650:	10803fcc 	andi	r2,r2,255
   35654:	10000d26 	beq	r2,zero,3568c <secp256k1_scalar_sqr_512+0x4758>
   35658:	d0a01617 	ldw	r2,-32680(gp)
   3565c:	10c00317 	ldw	r3,12(r2)
   35660:	00800174 	movhi	r2,5
   35664:	10973704 	addi	r2,r2,23772
   35668:	d8800015 	stw	r2,0(sp)
   3566c:	01c09c44 	movi	r7,625
   35670:	01800174 	movhi	r6,5
   35674:	31964204 	addi	r6,r6,22792
   35678:	01400174 	movhi	r5,5
   3567c:	2951e804 	addi	r5,r5,18336
   35680:	1809883a 	mov	r4,r3
   35684:	00461000 	call	46100 <fprintf>
   35688:	0045fd40 	call	45fd4 <abort>
   3568c:	e0fe6017 	ldw	r3,-1664(fp)
   35690:	e0bf0e17 	ldw	r2,-968(fp)
   35694:	1885883a 	add	r2,r3,r2
   35698:	e0be6015 	stw	r2,-1664(fp)
   3569c:	e0fe6017 	ldw	r3,-1664(fp)
   356a0:	e0bf0e17 	ldw	r2,-968(fp)
   356a4:	1880022e 	bgeu	r3,r2,356b0 <secp256k1_scalar_sqr_512+0x477c>
   356a8:	00c00044 	movi	r3,1
   356ac:	00000106 	br	356b4 <secp256k1_scalar_sqr_512+0x4780>
   356b0:	0007883a 	mov	r3,zero
   356b4:	e0be6117 	ldw	r2,-1660(fp)
   356b8:	10c5883a 	add	r2,r2,r3
   356bc:	e0be6115 	stw	r2,-1660(fp)
   356c0:	e0fe6017 	ldw	r3,-1664(fp)
   356c4:	e0bf0e17 	ldw	r2,-968(fp)
   356c8:	1885803a 	cmpltu	r2,r3,r2
   356cc:	10803fcc 	andi	r2,r2,255
   356d0:	10001126 	beq	r2,zero,35718 <secp256k1_scalar_sqr_512+0x47e4>
   356d4:	e0be6117 	ldw	r2,-1660(fp)
   356d8:	1005003a 	cmpeq	r2,r2,zero
   356dc:	10803fcc 	andi	r2,r2,255
   356e0:	10000d26 	beq	r2,zero,35718 <secp256k1_scalar_sqr_512+0x47e4>
   356e4:	d0a01617 	ldw	r2,-32680(gp)
   356e8:	10c00317 	ldw	r3,12(r2)
   356ec:	00800174 	movhi	r2,5
   356f0:	10974704 	addi	r2,r2,23836
   356f4:	d8800015 	stw	r2,0(sp)
   356f8:	01c09c44 	movi	r7,625
   356fc:	01800174 	movhi	r6,5
   35700:	31964204 	addi	r6,r6,22792
   35704:	01400174 	movhi	r5,5
   35708:	2951e804 	addi	r5,r5,18336
   3570c:	1809883a 	mov	r4,r3
   35710:	00461000 	call	46100 <fprintf>
   35714:	0045fd40 	call	45fd4 <abort>
    muladd2(a->d[5], a->d[6]);
   35718:	e0bf2b17 	ldw	r2,-852(fp)
   3571c:	10800517 	ldw	r2,20(r2)
   35720:	e0bfda15 	stw	r2,-152(fp)
   35724:	e03fdb15 	stw	zero,-148(fp)
   35728:	e0bf2b17 	ldw	r2,-852(fp)
   3572c:	10800617 	ldw	r2,24(r2)
   35730:	e0bfdc15 	stw	r2,-144(fp)
   35734:	e03fdd15 	stw	zero,-140(fp)
   35738:	e1bfdc17 	ldw	r6,-144(fp)
   3573c:	e1ffdd17 	ldw	r7,-140(fp)
   35740:	e13fda17 	ldw	r4,-152(fp)
   35744:	e17fdb17 	ldw	r5,-148(fp)
   35748:	00438e00 	call	438e0 <__muldi3>
   3574c:	1009883a 	mov	r4,r2
   35750:	180b883a 	mov	r5,r3
   35754:	e13f1015 	stw	r4,-960(fp)
   35758:	e17f1115 	stw	r5,-956(fp)
   3575c:	e0bf1117 	ldw	r2,-956(fp)
   35760:	1004d83a 	srl	r2,r2,zero
   35764:	e0bfde15 	stw	r2,-136(fp)
   35768:	e03fdf15 	stw	zero,-132(fp)
   3576c:	e0bfde17 	ldw	r2,-136(fp)
   35770:	e0bf1215 	stw	r2,-952(fp)
   35774:	e0bf1017 	ldw	r2,-960(fp)
   35778:	e0bf1315 	stw	r2,-948(fp)
   3577c:	e0ff1217 	ldw	r3,-952(fp)
   35780:	e0bf1217 	ldw	r2,-952(fp)
   35784:	1885883a 	add	r2,r3,r2
   35788:	e0bf1415 	stw	r2,-944(fp)
   3578c:	e0ff1417 	ldw	r3,-944(fp)
   35790:	e0bf1217 	ldw	r2,-952(fp)
   35794:	1880022e 	bgeu	r3,r2,357a0 <secp256k1_scalar_sqr_512+0x486c>
   35798:	00c00044 	movi	r3,1
   3579c:	00000106 	br	357a4 <secp256k1_scalar_sqr_512+0x4870>
   357a0:	0007883a 	mov	r3,zero
   357a4:	e0be6117 	ldw	r2,-1660(fp)
   357a8:	10c5883a 	add	r2,r2,r3
   357ac:	e0be6115 	stw	r2,-1660(fp)
   357b0:	e0ff1417 	ldw	r3,-944(fp)
   357b4:	e0bf1217 	ldw	r2,-952(fp)
   357b8:	1885803a 	cmpltu	r2,r3,r2
   357bc:	10803fcc 	andi	r2,r2,255
   357c0:	10001126 	beq	r2,zero,35808 <secp256k1_scalar_sqr_512+0x48d4>
   357c4:	e0be6117 	ldw	r2,-1660(fp)
   357c8:	1005003a 	cmpeq	r2,r2,zero
   357cc:	10803fcc 	andi	r2,r2,255
   357d0:	10000d26 	beq	r2,zero,35808 <secp256k1_scalar_sqr_512+0x48d4>
   357d4:	d0a01617 	ldw	r2,-32680(gp)
   357d8:	10c00317 	ldw	r3,12(r2)
   357dc:	00800174 	movhi	r2,5
   357e0:	10972b04 	addi	r2,r2,23724
   357e4:	d8800015 	stw	r2,0(sp)
   357e8:	01c09c84 	movi	r7,626
   357ec:	01800174 	movhi	r6,5
   357f0:	31964204 	addi	r6,r6,22792
   357f4:	01400174 	movhi	r5,5
   357f8:	2951e804 	addi	r5,r5,18336
   357fc:	1809883a 	mov	r4,r3
   35800:	00461000 	call	46100 <fprintf>
   35804:	0045fd40 	call	45fd4 <abort>
   35808:	e0ff1317 	ldw	r3,-948(fp)
   3580c:	e0bf1317 	ldw	r2,-948(fp)
   35810:	1885883a 	add	r2,r3,r2
   35814:	e0bf1515 	stw	r2,-940(fp)
   35818:	e0ff1517 	ldw	r3,-940(fp)
   3581c:	e0bf1317 	ldw	r2,-948(fp)
   35820:	1880022e 	bgeu	r3,r2,3582c <secp256k1_scalar_sqr_512+0x48f8>
   35824:	00c00044 	movi	r3,1
   35828:	00000106 	br	35830 <secp256k1_scalar_sqr_512+0x48fc>
   3582c:	0007883a 	mov	r3,zero
   35830:	e0bf1417 	ldw	r2,-944(fp)
   35834:	10c5883a 	add	r2,r2,r3
   35838:	e0bf1415 	stw	r2,-944(fp)
   3583c:	e0fe5f17 	ldw	r3,-1668(fp)
   35840:	e0bf1517 	ldw	r2,-940(fp)
   35844:	1885883a 	add	r2,r3,r2
   35848:	e0be5f15 	stw	r2,-1668(fp)
   3584c:	e0fe5f17 	ldw	r3,-1668(fp)
   35850:	e0bf1517 	ldw	r2,-940(fp)
   35854:	1880022e 	bgeu	r3,r2,35860 <secp256k1_scalar_sqr_512+0x492c>
   35858:	00c00044 	movi	r3,1
   3585c:	00000106 	br	35864 <secp256k1_scalar_sqr_512+0x4930>
   35860:	0007883a 	mov	r3,zero
   35864:	e0bf1417 	ldw	r2,-944(fp)
   35868:	10c5883a 	add	r2,r2,r3
   3586c:	e0bf1415 	stw	r2,-944(fp)
   35870:	e0fe5f17 	ldw	r3,-1668(fp)
   35874:	e0bf1517 	ldw	r2,-940(fp)
   35878:	1885803a 	cmpltu	r2,r3,r2
   3587c:	1007883a 	mov	r3,r2
   35880:	e0bf1417 	ldw	r2,-944(fp)
   35884:	1005003a 	cmpeq	r2,r2,zero
   35888:	1884703a 	and	r2,r3,r2
   3588c:	10c03fcc 	andi	r3,r2,255
   35890:	e0be6117 	ldw	r2,-1660(fp)
   35894:	10c5883a 	add	r2,r2,r3
   35898:	e0be6115 	stw	r2,-1660(fp)
   3589c:	e0fe5f17 	ldw	r3,-1668(fp)
   358a0:	e0bf1517 	ldw	r2,-940(fp)
   358a4:	1885803a 	cmpltu	r2,r3,r2
   358a8:	10803fcc 	andi	r2,r2,255
   358ac:	10000626 	beq	r2,zero,358c8 <secp256k1_scalar_sqr_512+0x4994>
   358b0:	e0bf1417 	ldw	r2,-944(fp)
   358b4:	1005003a 	cmpeq	r2,r2,zero
   358b8:	10803fcc 	andi	r2,r2,255
   358bc:	10000226 	beq	r2,zero,358c8 <secp256k1_scalar_sqr_512+0x4994>
   358c0:	00800044 	movi	r2,1
   358c4:	00000106 	br	358cc <secp256k1_scalar_sqr_512+0x4998>
   358c8:	0005883a 	mov	r2,zero
   358cc:	10001126 	beq	r2,zero,35914 <secp256k1_scalar_sqr_512+0x49e0>
   358d0:	e0be6117 	ldw	r2,-1660(fp)
   358d4:	1005003a 	cmpeq	r2,r2,zero
   358d8:	10803fcc 	andi	r2,r2,255
   358dc:	10000d26 	beq	r2,zero,35914 <secp256k1_scalar_sqr_512+0x49e0>
   358e0:	d0a01617 	ldw	r2,-32680(gp)
   358e4:	10c00317 	ldw	r3,12(r2)
   358e8:	00800174 	movhi	r2,5
   358ec:	10973704 	addi	r2,r2,23772
   358f0:	d8800015 	stw	r2,0(sp)
   358f4:	01c09c84 	movi	r7,626
   358f8:	01800174 	movhi	r6,5
   358fc:	31964204 	addi	r6,r6,22792
   35900:	01400174 	movhi	r5,5
   35904:	2951e804 	addi	r5,r5,18336
   35908:	1809883a 	mov	r4,r3
   3590c:	00461000 	call	46100 <fprintf>
   35910:	0045fd40 	call	45fd4 <abort>
   35914:	e0fe6017 	ldw	r3,-1664(fp)
   35918:	e0bf1417 	ldw	r2,-944(fp)
   3591c:	1885883a 	add	r2,r3,r2
   35920:	e0be6015 	stw	r2,-1664(fp)
   35924:	e0fe6017 	ldw	r3,-1664(fp)
   35928:	e0bf1417 	ldw	r2,-944(fp)
   3592c:	1880022e 	bgeu	r3,r2,35938 <secp256k1_scalar_sqr_512+0x4a04>
   35930:	00c00044 	movi	r3,1
   35934:	00000106 	br	3593c <secp256k1_scalar_sqr_512+0x4a08>
   35938:	0007883a 	mov	r3,zero
   3593c:	e0be6117 	ldw	r2,-1660(fp)
   35940:	10c5883a 	add	r2,r2,r3
   35944:	e0be6115 	stw	r2,-1660(fp)
   35948:	e0fe6017 	ldw	r3,-1664(fp)
   3594c:	e0bf1417 	ldw	r2,-944(fp)
   35950:	1885803a 	cmpltu	r2,r3,r2
   35954:	10803fcc 	andi	r2,r2,255
   35958:	10001126 	beq	r2,zero,359a0 <secp256k1_scalar_sqr_512+0x4a6c>
   3595c:	e0be6117 	ldw	r2,-1660(fp)
   35960:	1005003a 	cmpeq	r2,r2,zero
   35964:	10803fcc 	andi	r2,r2,255
   35968:	10000d26 	beq	r2,zero,359a0 <secp256k1_scalar_sqr_512+0x4a6c>
   3596c:	d0a01617 	ldw	r2,-32680(gp)
   35970:	10c00317 	ldw	r3,12(r2)
   35974:	00800174 	movhi	r2,5
   35978:	10974704 	addi	r2,r2,23836
   3597c:	d8800015 	stw	r2,0(sp)
   35980:	01c09c84 	movi	r7,626
   35984:	01800174 	movhi	r6,5
   35988:	31964204 	addi	r6,r6,22792
   3598c:	01400174 	movhi	r5,5
   35990:	2951e804 	addi	r5,r5,18336
   35994:	1809883a 	mov	r4,r3
   35998:	00461000 	call	46100 <fprintf>
   3599c:	0045fd40 	call	45fd4 <abort>
    extract(l[11]);
   359a0:	e0bf2a17 	ldw	r2,-856(fp)
   359a4:	10c00b04 	addi	r3,r2,44
   359a8:	e0be5f17 	ldw	r2,-1668(fp)
   359ac:	18800015 	stw	r2,0(r3)
   359b0:	e0be6017 	ldw	r2,-1664(fp)
   359b4:	e0be5f15 	stw	r2,-1668(fp)
   359b8:	e0be6117 	ldw	r2,-1660(fp)
   359bc:	e0be6015 	stw	r2,-1664(fp)
   359c0:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[5], a->d[7]);
   359c4:	e0bf2b17 	ldw	r2,-852(fp)
   359c8:	10800517 	ldw	r2,20(r2)
   359cc:	e0bfe015 	stw	r2,-128(fp)
   359d0:	e03fe115 	stw	zero,-124(fp)
   359d4:	e0bf2b17 	ldw	r2,-852(fp)
   359d8:	10800717 	ldw	r2,28(r2)
   359dc:	e0bfe215 	stw	r2,-120(fp)
   359e0:	e03fe315 	stw	zero,-116(fp)
   359e4:	e1bfe217 	ldw	r6,-120(fp)
   359e8:	e1ffe317 	ldw	r7,-116(fp)
   359ec:	e13fe017 	ldw	r4,-128(fp)
   359f0:	e17fe117 	ldw	r5,-124(fp)
   359f4:	00438e00 	call	438e0 <__muldi3>
   359f8:	1009883a 	mov	r4,r2
   359fc:	180b883a 	mov	r5,r3
   35a00:	e13f1615 	stw	r4,-936(fp)
   35a04:	e17f1715 	stw	r5,-932(fp)
   35a08:	e0bf1717 	ldw	r2,-932(fp)
   35a0c:	1004d83a 	srl	r2,r2,zero
   35a10:	e0bfe415 	stw	r2,-112(fp)
   35a14:	e03fe515 	stw	zero,-108(fp)
   35a18:	e0bfe417 	ldw	r2,-112(fp)
   35a1c:	e0bf1815 	stw	r2,-928(fp)
   35a20:	e0bf1617 	ldw	r2,-936(fp)
   35a24:	e0bf1915 	stw	r2,-924(fp)
   35a28:	e0ff1817 	ldw	r3,-928(fp)
   35a2c:	e0bf1817 	ldw	r2,-928(fp)
   35a30:	1885883a 	add	r2,r3,r2
   35a34:	e0bf1a15 	stw	r2,-920(fp)
   35a38:	e0ff1a17 	ldw	r3,-920(fp)
   35a3c:	e0bf1817 	ldw	r2,-928(fp)
   35a40:	1880022e 	bgeu	r3,r2,35a4c <secp256k1_scalar_sqr_512+0x4b18>
   35a44:	00800044 	movi	r2,1
   35a48:	00000106 	br	35a50 <secp256k1_scalar_sqr_512+0x4b1c>
   35a4c:	0005883a 	mov	r2,zero
   35a50:	e0fe6117 	ldw	r3,-1660(fp)
   35a54:	1885883a 	add	r2,r3,r2
   35a58:	e0be6115 	stw	r2,-1660(fp)
   35a5c:	e0ff1a17 	ldw	r3,-920(fp)
   35a60:	e0bf1817 	ldw	r2,-928(fp)
   35a64:	1885803a 	cmpltu	r2,r3,r2
   35a68:	10803fcc 	andi	r2,r2,255
   35a6c:	10001126 	beq	r2,zero,35ab4 <secp256k1_scalar_sqr_512+0x4b80>
   35a70:	e0be6117 	ldw	r2,-1660(fp)
   35a74:	1005003a 	cmpeq	r2,r2,zero
   35a78:	10803fcc 	andi	r2,r2,255
   35a7c:	10000d26 	beq	r2,zero,35ab4 <secp256k1_scalar_sqr_512+0x4b80>
   35a80:	d0a01617 	ldw	r2,-32680(gp)
   35a84:	10c00317 	ldw	r3,12(r2)
   35a88:	00800174 	movhi	r2,5
   35a8c:	10972b04 	addi	r2,r2,23724
   35a90:	d8800015 	stw	r2,0(sp)
   35a94:	01c09d04 	movi	r7,628
   35a98:	01800174 	movhi	r6,5
   35a9c:	31964204 	addi	r6,r6,22792
   35aa0:	01400174 	movhi	r5,5
   35aa4:	2951e804 	addi	r5,r5,18336
   35aa8:	1809883a 	mov	r4,r3
   35aac:	00461000 	call	46100 <fprintf>
   35ab0:	0045fd40 	call	45fd4 <abort>
   35ab4:	e0ff1917 	ldw	r3,-924(fp)
   35ab8:	e0bf1917 	ldw	r2,-924(fp)
   35abc:	1885883a 	add	r2,r3,r2
   35ac0:	e0bf1b15 	stw	r2,-916(fp)
   35ac4:	e0ff1b17 	ldw	r3,-916(fp)
   35ac8:	e0bf1917 	ldw	r2,-924(fp)
   35acc:	1880022e 	bgeu	r3,r2,35ad8 <secp256k1_scalar_sqr_512+0x4ba4>
   35ad0:	00800044 	movi	r2,1
   35ad4:	00000106 	br	35adc <secp256k1_scalar_sqr_512+0x4ba8>
   35ad8:	0005883a 	mov	r2,zero
   35adc:	e0ff1a17 	ldw	r3,-920(fp)
   35ae0:	1885883a 	add	r2,r3,r2
   35ae4:	e0bf1a15 	stw	r2,-920(fp)
   35ae8:	e0fe5f17 	ldw	r3,-1668(fp)
   35aec:	e0bf1b17 	ldw	r2,-916(fp)
   35af0:	1885883a 	add	r2,r3,r2
   35af4:	e0be5f15 	stw	r2,-1668(fp)
   35af8:	e0fe5f17 	ldw	r3,-1668(fp)
   35afc:	e0bf1b17 	ldw	r2,-916(fp)
   35b00:	1880022e 	bgeu	r3,r2,35b0c <secp256k1_scalar_sqr_512+0x4bd8>
   35b04:	00800044 	movi	r2,1
   35b08:	00000106 	br	35b10 <secp256k1_scalar_sqr_512+0x4bdc>
   35b0c:	0005883a 	mov	r2,zero
   35b10:	e0ff1a17 	ldw	r3,-920(fp)
   35b14:	1885883a 	add	r2,r3,r2
   35b18:	e0bf1a15 	stw	r2,-920(fp)
   35b1c:	e0fe5f17 	ldw	r3,-1668(fp)
   35b20:	e0bf1b17 	ldw	r2,-916(fp)
   35b24:	1885803a 	cmpltu	r2,r3,r2
   35b28:	1007883a 	mov	r3,r2
   35b2c:	e0bf1a17 	ldw	r2,-920(fp)
   35b30:	1005003a 	cmpeq	r2,r2,zero
   35b34:	1884703a 	and	r2,r3,r2
   35b38:	10803fcc 	andi	r2,r2,255
   35b3c:	e0fe6117 	ldw	r3,-1660(fp)
   35b40:	1885883a 	add	r2,r3,r2
   35b44:	e0be6115 	stw	r2,-1660(fp)
   35b48:	e0fe5f17 	ldw	r3,-1668(fp)
   35b4c:	e0bf1b17 	ldw	r2,-916(fp)
   35b50:	1885803a 	cmpltu	r2,r3,r2
   35b54:	10803fcc 	andi	r2,r2,255
   35b58:	10000626 	beq	r2,zero,35b74 <secp256k1_scalar_sqr_512+0x4c40>
   35b5c:	e0bf1a17 	ldw	r2,-920(fp)
   35b60:	1005003a 	cmpeq	r2,r2,zero
   35b64:	10803fcc 	andi	r2,r2,255
   35b68:	10000226 	beq	r2,zero,35b74 <secp256k1_scalar_sqr_512+0x4c40>
   35b6c:	00800044 	movi	r2,1
   35b70:	00000106 	br	35b78 <secp256k1_scalar_sqr_512+0x4c44>
   35b74:	0005883a 	mov	r2,zero
   35b78:	10001126 	beq	r2,zero,35bc0 <secp256k1_scalar_sqr_512+0x4c8c>
   35b7c:	e0be6117 	ldw	r2,-1660(fp)
   35b80:	1005003a 	cmpeq	r2,r2,zero
   35b84:	10803fcc 	andi	r2,r2,255
   35b88:	10000d26 	beq	r2,zero,35bc0 <secp256k1_scalar_sqr_512+0x4c8c>
   35b8c:	d0a01617 	ldw	r2,-32680(gp)
   35b90:	10c00317 	ldw	r3,12(r2)
   35b94:	00800174 	movhi	r2,5
   35b98:	10973704 	addi	r2,r2,23772
   35b9c:	d8800015 	stw	r2,0(sp)
   35ba0:	01c09d04 	movi	r7,628
   35ba4:	01800174 	movhi	r6,5
   35ba8:	31964204 	addi	r6,r6,22792
   35bac:	01400174 	movhi	r5,5
   35bb0:	2951e804 	addi	r5,r5,18336
   35bb4:	1809883a 	mov	r4,r3
   35bb8:	00461000 	call	46100 <fprintf>
   35bbc:	0045fd40 	call	45fd4 <abort>
   35bc0:	e0fe6017 	ldw	r3,-1664(fp)
   35bc4:	e0bf1a17 	ldw	r2,-920(fp)
   35bc8:	1885883a 	add	r2,r3,r2
   35bcc:	e0be6015 	stw	r2,-1664(fp)
   35bd0:	e0fe6017 	ldw	r3,-1664(fp)
   35bd4:	e0bf1a17 	ldw	r2,-920(fp)
   35bd8:	1880022e 	bgeu	r3,r2,35be4 <secp256k1_scalar_sqr_512+0x4cb0>
   35bdc:	00800044 	movi	r2,1
   35be0:	00000106 	br	35be8 <secp256k1_scalar_sqr_512+0x4cb4>
   35be4:	0005883a 	mov	r2,zero
   35be8:	e0fe6117 	ldw	r3,-1660(fp)
   35bec:	1885883a 	add	r2,r3,r2
   35bf0:	e0be6115 	stw	r2,-1660(fp)
   35bf4:	e0fe6017 	ldw	r3,-1664(fp)
   35bf8:	e0bf1a17 	ldw	r2,-920(fp)
   35bfc:	1885803a 	cmpltu	r2,r3,r2
   35c00:	10803fcc 	andi	r2,r2,255
   35c04:	10001126 	beq	r2,zero,35c4c <secp256k1_scalar_sqr_512+0x4d18>
   35c08:	e0be6117 	ldw	r2,-1660(fp)
   35c0c:	1005003a 	cmpeq	r2,r2,zero
   35c10:	10803fcc 	andi	r2,r2,255
   35c14:	10000d26 	beq	r2,zero,35c4c <secp256k1_scalar_sqr_512+0x4d18>
   35c18:	d0a01617 	ldw	r2,-32680(gp)
   35c1c:	10c00317 	ldw	r3,12(r2)
   35c20:	00800174 	movhi	r2,5
   35c24:	10974704 	addi	r2,r2,23836
   35c28:	d8800015 	stw	r2,0(sp)
   35c2c:	01c09d04 	movi	r7,628
   35c30:	01800174 	movhi	r6,5
   35c34:	31964204 	addi	r6,r6,22792
   35c38:	01400174 	movhi	r5,5
   35c3c:	2951e804 	addi	r5,r5,18336
   35c40:	1809883a 	mov	r4,r3
   35c44:	00461000 	call	46100 <fprintf>
   35c48:	0045fd40 	call	45fd4 <abort>
    muladd(a->d[6], a->d[6]);
   35c4c:	e0bf2b17 	ldw	r2,-852(fp)
   35c50:	10800617 	ldw	r2,24(r2)
   35c54:	e0bfe615 	stw	r2,-104(fp)
   35c58:	e03fe715 	stw	zero,-100(fp)
   35c5c:	e0bf2b17 	ldw	r2,-852(fp)
   35c60:	10800617 	ldw	r2,24(r2)
   35c64:	e0bfe815 	stw	r2,-96(fp)
   35c68:	e03fe915 	stw	zero,-92(fp)
   35c6c:	e1bfe817 	ldw	r6,-96(fp)
   35c70:	e1ffe917 	ldw	r7,-92(fp)
   35c74:	e13fe617 	ldw	r4,-104(fp)
   35c78:	e17fe717 	ldw	r5,-100(fp)
   35c7c:	00438e00 	call	438e0 <__muldi3>
   35c80:	1009883a 	mov	r4,r2
   35c84:	180b883a 	mov	r5,r3
   35c88:	e13f1c15 	stw	r4,-912(fp)
   35c8c:	e17f1d15 	stw	r5,-908(fp)
   35c90:	e0bf1d17 	ldw	r2,-908(fp)
   35c94:	1004d83a 	srl	r2,r2,zero
   35c98:	e0bfea15 	stw	r2,-88(fp)
   35c9c:	e03feb15 	stw	zero,-84(fp)
   35ca0:	e0bfea17 	ldw	r2,-88(fp)
   35ca4:	e0bf1e15 	stw	r2,-904(fp)
   35ca8:	e0bf1c17 	ldw	r2,-912(fp)
   35cac:	e0bf1f15 	stw	r2,-900(fp)
   35cb0:	e0fe5f17 	ldw	r3,-1668(fp)
   35cb4:	e0bf1f17 	ldw	r2,-900(fp)
   35cb8:	1885883a 	add	r2,r3,r2
   35cbc:	e0be5f15 	stw	r2,-1668(fp)
   35cc0:	e0fe5f17 	ldw	r3,-1668(fp)
   35cc4:	e0bf1f17 	ldw	r2,-900(fp)
   35cc8:	1880022e 	bgeu	r3,r2,35cd4 <secp256k1_scalar_sqr_512+0x4da0>
   35ccc:	00800044 	movi	r2,1
   35cd0:	00000106 	br	35cd8 <secp256k1_scalar_sqr_512+0x4da4>
   35cd4:	0005883a 	mov	r2,zero
   35cd8:	e0ff1e17 	ldw	r3,-904(fp)
   35cdc:	1885883a 	add	r2,r3,r2
   35ce0:	e0bf1e15 	stw	r2,-904(fp)
   35ce4:	e0fe6017 	ldw	r3,-1664(fp)
   35ce8:	e0bf1e17 	ldw	r2,-904(fp)
   35cec:	1885883a 	add	r2,r3,r2
   35cf0:	e0be6015 	stw	r2,-1664(fp)
   35cf4:	e0fe6017 	ldw	r3,-1664(fp)
   35cf8:	e0bf1e17 	ldw	r2,-904(fp)
   35cfc:	1880022e 	bgeu	r3,r2,35d08 <secp256k1_scalar_sqr_512+0x4dd4>
   35d00:	00800044 	movi	r2,1
   35d04:	00000106 	br	35d0c <secp256k1_scalar_sqr_512+0x4dd8>
   35d08:	0005883a 	mov	r2,zero
   35d0c:	e0fe6117 	ldw	r3,-1660(fp)
   35d10:	1885883a 	add	r2,r3,r2
   35d14:	e0be6115 	stw	r2,-1660(fp)
   35d18:	e0fe6017 	ldw	r3,-1664(fp)
   35d1c:	e0bf1e17 	ldw	r2,-904(fp)
   35d20:	1885803a 	cmpltu	r2,r3,r2
   35d24:	10803fcc 	andi	r2,r2,255
   35d28:	10001126 	beq	r2,zero,35d70 <secp256k1_scalar_sqr_512+0x4e3c>
   35d2c:	e0be6117 	ldw	r2,-1660(fp)
   35d30:	1005003a 	cmpeq	r2,r2,zero
   35d34:	10803fcc 	andi	r2,r2,255
   35d38:	10000d26 	beq	r2,zero,35d70 <secp256k1_scalar_sqr_512+0x4e3c>
   35d3c:	d0a01617 	ldw	r2,-32680(gp)
   35d40:	10c00317 	ldw	r3,12(r2)
   35d44:	00800174 	movhi	r2,5
   35d48:	1096d604 	addi	r2,r2,23384
   35d4c:	d8800015 	stw	r2,0(sp)
   35d50:	01c09d44 	movi	r7,629
   35d54:	01800174 	movhi	r6,5
   35d58:	31964204 	addi	r6,r6,22792
   35d5c:	01400174 	movhi	r5,5
   35d60:	2951e804 	addi	r5,r5,18336
   35d64:	1809883a 	mov	r4,r3
   35d68:	00461000 	call	46100 <fprintf>
   35d6c:	0045fd40 	call	45fd4 <abort>
    extract(l[12]);
   35d70:	e0bf2a17 	ldw	r2,-856(fp)
   35d74:	10800c04 	addi	r2,r2,48
   35d78:	e0fe5f17 	ldw	r3,-1668(fp)
   35d7c:	10c00015 	stw	r3,0(r2)
   35d80:	e0be6017 	ldw	r2,-1664(fp)
   35d84:	e0be5f15 	stw	r2,-1668(fp)
   35d88:	e0be6117 	ldw	r2,-1660(fp)
   35d8c:	e0be6015 	stw	r2,-1664(fp)
   35d90:	e03e6115 	stw	zero,-1660(fp)
    muladd2(a->d[6], a->d[7]);
   35d94:	e0bf2b17 	ldw	r2,-852(fp)
   35d98:	10800617 	ldw	r2,24(r2)
   35d9c:	e0bfec15 	stw	r2,-80(fp)
   35da0:	e03fed15 	stw	zero,-76(fp)
   35da4:	e0bf2b17 	ldw	r2,-852(fp)
   35da8:	10800717 	ldw	r2,28(r2)
   35dac:	e0bfee15 	stw	r2,-72(fp)
   35db0:	e03fef15 	stw	zero,-68(fp)
   35db4:	e1bfee17 	ldw	r6,-72(fp)
   35db8:	e1ffef17 	ldw	r7,-68(fp)
   35dbc:	e13fec17 	ldw	r4,-80(fp)
   35dc0:	e17fed17 	ldw	r5,-76(fp)
   35dc4:	00438e00 	call	438e0 <__muldi3>
   35dc8:	1009883a 	mov	r4,r2
   35dcc:	180b883a 	mov	r5,r3
   35dd0:	e13f2015 	stw	r4,-896(fp)
   35dd4:	e17f2115 	stw	r5,-892(fp)
   35dd8:	e0bf2117 	ldw	r2,-892(fp)
   35ddc:	1004d83a 	srl	r2,r2,zero
   35de0:	e0bff015 	stw	r2,-64(fp)
   35de4:	e03ff115 	stw	zero,-60(fp)
   35de8:	e0bff017 	ldw	r2,-64(fp)
   35dec:	e0bf2215 	stw	r2,-888(fp)
   35df0:	e0bf2017 	ldw	r2,-896(fp)
   35df4:	e0bf2315 	stw	r2,-884(fp)
   35df8:	e0ff2217 	ldw	r3,-888(fp)
   35dfc:	e0bf2217 	ldw	r2,-888(fp)
   35e00:	1885883a 	add	r2,r3,r2
   35e04:	e0bf2415 	stw	r2,-880(fp)
   35e08:	e0ff2417 	ldw	r3,-880(fp)
   35e0c:	e0bf2217 	ldw	r2,-888(fp)
   35e10:	1880022e 	bgeu	r3,r2,35e1c <secp256k1_scalar_sqr_512+0x4ee8>
   35e14:	00800044 	movi	r2,1
   35e18:	00000106 	br	35e20 <secp256k1_scalar_sqr_512+0x4eec>
   35e1c:	0005883a 	mov	r2,zero
   35e20:	e0fe6117 	ldw	r3,-1660(fp)
   35e24:	1885883a 	add	r2,r3,r2
   35e28:	e0be6115 	stw	r2,-1660(fp)
   35e2c:	e0ff2417 	ldw	r3,-880(fp)
   35e30:	e0bf2217 	ldw	r2,-888(fp)
   35e34:	1885803a 	cmpltu	r2,r3,r2
   35e38:	10803fcc 	andi	r2,r2,255
   35e3c:	10001126 	beq	r2,zero,35e84 <secp256k1_scalar_sqr_512+0x4f50>
   35e40:	e0be6117 	ldw	r2,-1660(fp)
   35e44:	1005003a 	cmpeq	r2,r2,zero
   35e48:	10803fcc 	andi	r2,r2,255
   35e4c:	10000d26 	beq	r2,zero,35e84 <secp256k1_scalar_sqr_512+0x4f50>
   35e50:	d0a01617 	ldw	r2,-32680(gp)
   35e54:	10c00317 	ldw	r3,12(r2)
   35e58:	00800174 	movhi	r2,5
   35e5c:	10972b04 	addi	r2,r2,23724
   35e60:	d8800015 	stw	r2,0(sp)
   35e64:	01c09dc4 	movi	r7,631
   35e68:	01800174 	movhi	r6,5
   35e6c:	31964204 	addi	r6,r6,22792
   35e70:	01400174 	movhi	r5,5
   35e74:	2951e804 	addi	r5,r5,18336
   35e78:	1809883a 	mov	r4,r3
   35e7c:	00461000 	call	46100 <fprintf>
   35e80:	0045fd40 	call	45fd4 <abort>
   35e84:	e0ff2317 	ldw	r3,-884(fp)
   35e88:	e0bf2317 	ldw	r2,-884(fp)
   35e8c:	1885883a 	add	r2,r3,r2
   35e90:	e0bf2515 	stw	r2,-876(fp)
   35e94:	e0ff2517 	ldw	r3,-876(fp)
   35e98:	e0bf2317 	ldw	r2,-884(fp)
   35e9c:	1880022e 	bgeu	r3,r2,35ea8 <secp256k1_scalar_sqr_512+0x4f74>
   35ea0:	00800044 	movi	r2,1
   35ea4:	00000106 	br	35eac <secp256k1_scalar_sqr_512+0x4f78>
   35ea8:	0005883a 	mov	r2,zero
   35eac:	e0ff2417 	ldw	r3,-880(fp)
   35eb0:	1885883a 	add	r2,r3,r2
   35eb4:	e0bf2415 	stw	r2,-880(fp)
   35eb8:	e0fe5f17 	ldw	r3,-1668(fp)
   35ebc:	e0bf2517 	ldw	r2,-876(fp)
   35ec0:	1885883a 	add	r2,r3,r2
   35ec4:	e0be5f15 	stw	r2,-1668(fp)
   35ec8:	e0fe5f17 	ldw	r3,-1668(fp)
   35ecc:	e0bf2517 	ldw	r2,-876(fp)
   35ed0:	1880022e 	bgeu	r3,r2,35edc <secp256k1_scalar_sqr_512+0x4fa8>
   35ed4:	00800044 	movi	r2,1
   35ed8:	00000106 	br	35ee0 <secp256k1_scalar_sqr_512+0x4fac>
   35edc:	0005883a 	mov	r2,zero
   35ee0:	e0ff2417 	ldw	r3,-880(fp)
   35ee4:	1885883a 	add	r2,r3,r2
   35ee8:	e0bf2415 	stw	r2,-880(fp)
   35eec:	e0fe5f17 	ldw	r3,-1668(fp)
   35ef0:	e0bf2517 	ldw	r2,-876(fp)
   35ef4:	1885803a 	cmpltu	r2,r3,r2
   35ef8:	1007883a 	mov	r3,r2
   35efc:	e0bf2417 	ldw	r2,-880(fp)
   35f00:	1005003a 	cmpeq	r2,r2,zero
   35f04:	1884703a 	and	r2,r3,r2
   35f08:	10803fcc 	andi	r2,r2,255
   35f0c:	e0fe6117 	ldw	r3,-1660(fp)
   35f10:	1885883a 	add	r2,r3,r2
   35f14:	e0be6115 	stw	r2,-1660(fp)
   35f18:	e0fe5f17 	ldw	r3,-1668(fp)
   35f1c:	e0bf2517 	ldw	r2,-876(fp)
   35f20:	1885803a 	cmpltu	r2,r3,r2
   35f24:	10803fcc 	andi	r2,r2,255
   35f28:	10000626 	beq	r2,zero,35f44 <secp256k1_scalar_sqr_512+0x5010>
   35f2c:	e0bf2417 	ldw	r2,-880(fp)
   35f30:	1005003a 	cmpeq	r2,r2,zero
   35f34:	10803fcc 	andi	r2,r2,255
   35f38:	10000226 	beq	r2,zero,35f44 <secp256k1_scalar_sqr_512+0x5010>
   35f3c:	00800044 	movi	r2,1
   35f40:	00000106 	br	35f48 <secp256k1_scalar_sqr_512+0x5014>
   35f44:	0005883a 	mov	r2,zero
   35f48:	10001126 	beq	r2,zero,35f90 <secp256k1_scalar_sqr_512+0x505c>
   35f4c:	e0be6117 	ldw	r2,-1660(fp)
   35f50:	1005003a 	cmpeq	r2,r2,zero
   35f54:	10803fcc 	andi	r2,r2,255
   35f58:	10000d26 	beq	r2,zero,35f90 <secp256k1_scalar_sqr_512+0x505c>
   35f5c:	d0a01617 	ldw	r2,-32680(gp)
   35f60:	10c00317 	ldw	r3,12(r2)
   35f64:	00800174 	movhi	r2,5
   35f68:	10973704 	addi	r2,r2,23772
   35f6c:	d8800015 	stw	r2,0(sp)
   35f70:	01c09dc4 	movi	r7,631
   35f74:	01800174 	movhi	r6,5
   35f78:	31964204 	addi	r6,r6,22792
   35f7c:	01400174 	movhi	r5,5
   35f80:	2951e804 	addi	r5,r5,18336
   35f84:	1809883a 	mov	r4,r3
   35f88:	00461000 	call	46100 <fprintf>
   35f8c:	0045fd40 	call	45fd4 <abort>
   35f90:	e0fe6017 	ldw	r3,-1664(fp)
   35f94:	e0bf2417 	ldw	r2,-880(fp)
   35f98:	1885883a 	add	r2,r3,r2
   35f9c:	e0be6015 	stw	r2,-1664(fp)
   35fa0:	e0fe6017 	ldw	r3,-1664(fp)
   35fa4:	e0bf2417 	ldw	r2,-880(fp)
   35fa8:	1880022e 	bgeu	r3,r2,35fb4 <secp256k1_scalar_sqr_512+0x5080>
   35fac:	00800044 	movi	r2,1
   35fb0:	00000106 	br	35fb8 <secp256k1_scalar_sqr_512+0x5084>
   35fb4:	0005883a 	mov	r2,zero
   35fb8:	e0fe6117 	ldw	r3,-1660(fp)
   35fbc:	1885883a 	add	r2,r3,r2
   35fc0:	e0be6115 	stw	r2,-1660(fp)
   35fc4:	e0fe6017 	ldw	r3,-1664(fp)
   35fc8:	e0bf2417 	ldw	r2,-880(fp)
   35fcc:	1885803a 	cmpltu	r2,r3,r2
   35fd0:	10803fcc 	andi	r2,r2,255
   35fd4:	10001126 	beq	r2,zero,3601c <secp256k1_scalar_sqr_512+0x50e8>
   35fd8:	e0be6117 	ldw	r2,-1660(fp)
   35fdc:	1005003a 	cmpeq	r2,r2,zero
   35fe0:	10803fcc 	andi	r2,r2,255
   35fe4:	10000d26 	beq	r2,zero,3601c <secp256k1_scalar_sqr_512+0x50e8>
   35fe8:	d0a01617 	ldw	r2,-32680(gp)
   35fec:	10c00317 	ldw	r3,12(r2)
   35ff0:	00800174 	movhi	r2,5
   35ff4:	10974704 	addi	r2,r2,23836
   35ff8:	d8800015 	stw	r2,0(sp)
   35ffc:	01c09dc4 	movi	r7,631
   36000:	01800174 	movhi	r6,5
   36004:	31964204 	addi	r6,r6,22792
   36008:	01400174 	movhi	r5,5
   3600c:	2951e804 	addi	r5,r5,18336
   36010:	1809883a 	mov	r4,r3
   36014:	00461000 	call	46100 <fprintf>
   36018:	0045fd40 	call	45fd4 <abort>
    extract(l[13]);
   3601c:	e0bf2a17 	ldw	r2,-856(fp)
   36020:	10800d04 	addi	r2,r2,52
   36024:	e0fe5f17 	ldw	r3,-1668(fp)
   36028:	10c00015 	stw	r3,0(r2)
   3602c:	e0be6017 	ldw	r2,-1664(fp)
   36030:	e0be5f15 	stw	r2,-1668(fp)
   36034:	e0be6117 	ldw	r2,-1660(fp)
   36038:	e0be6015 	stw	r2,-1664(fp)
   3603c:	e03e6115 	stw	zero,-1660(fp)
    muladd_fast(a->d[7], a->d[7]);
   36040:	e0bf2b17 	ldw	r2,-852(fp)
   36044:	10800717 	ldw	r2,28(r2)
   36048:	e0bff215 	stw	r2,-56(fp)
   3604c:	e03ff315 	stw	zero,-52(fp)
   36050:	e0bf2b17 	ldw	r2,-852(fp)
   36054:	10800717 	ldw	r2,28(r2)
   36058:	e0bff415 	stw	r2,-48(fp)
   3605c:	e03ff515 	stw	zero,-44(fp)
   36060:	e1bff417 	ldw	r6,-48(fp)
   36064:	e1fff517 	ldw	r7,-44(fp)
   36068:	e13ff217 	ldw	r4,-56(fp)
   3606c:	e17ff317 	ldw	r5,-52(fp)
   36070:	00438e00 	call	438e0 <__muldi3>
   36074:	1009883a 	mov	r4,r2
   36078:	180b883a 	mov	r5,r3
   3607c:	e13f2615 	stw	r4,-872(fp)
   36080:	e17f2715 	stw	r5,-868(fp)
   36084:	e0bf2717 	ldw	r2,-868(fp)
   36088:	1004d83a 	srl	r2,r2,zero
   3608c:	e0bff615 	stw	r2,-40(fp)
   36090:	e03ff715 	stw	zero,-36(fp)
   36094:	e0bff617 	ldw	r2,-40(fp)
   36098:	e0bf2815 	stw	r2,-864(fp)
   3609c:	e0bf2617 	ldw	r2,-872(fp)
   360a0:	e0bf2915 	stw	r2,-860(fp)
   360a4:	e0fe5f17 	ldw	r3,-1668(fp)
   360a8:	e0bf2917 	ldw	r2,-860(fp)
   360ac:	1885883a 	add	r2,r3,r2
   360b0:	e0be5f15 	stw	r2,-1668(fp)
   360b4:	e0fe5f17 	ldw	r3,-1668(fp)
   360b8:	e0bf2917 	ldw	r2,-860(fp)
   360bc:	1880022e 	bgeu	r3,r2,360c8 <secp256k1_scalar_sqr_512+0x5194>
   360c0:	00800044 	movi	r2,1
   360c4:	00000106 	br	360cc <secp256k1_scalar_sqr_512+0x5198>
   360c8:	0005883a 	mov	r2,zero
   360cc:	e0ff2817 	ldw	r3,-864(fp)
   360d0:	1885883a 	add	r2,r3,r2
   360d4:	e0bf2815 	stw	r2,-864(fp)
   360d8:	e0fe6017 	ldw	r3,-1664(fp)
   360dc:	e0bf2817 	ldw	r2,-864(fp)
   360e0:	1885883a 	add	r2,r3,r2
   360e4:	e0be6015 	stw	r2,-1664(fp)
   360e8:	e0fe6017 	ldw	r3,-1664(fp)
   360ec:	e0bf2817 	ldw	r2,-864(fp)
   360f0:	1885803a 	cmpltu	r2,r3,r2
   360f4:	10803fcc 	andi	r2,r2,255
   360f8:	10000d26 	beq	r2,zero,36130 <secp256k1_scalar_sqr_512+0x51fc>
   360fc:	d0a01617 	ldw	r2,-32680(gp)
   36100:	10c00317 	ldw	r3,12(r2)
   36104:	00800174 	movhi	r2,5
   36108:	1096b904 	addi	r2,r2,23268
   3610c:	d8800015 	stw	r2,0(sp)
   36110:	01c09e44 	movi	r7,633
   36114:	01800174 	movhi	r6,5
   36118:	31964204 	addi	r6,r6,22792
   3611c:	01400174 	movhi	r5,5
   36120:	2951e804 	addi	r5,r5,18336
   36124:	1809883a 	mov	r4,r3
   36128:	00461000 	call	46100 <fprintf>
   3612c:	0045fd40 	call	45fd4 <abort>
    extract_fast(l[14]);
   36130:	e0bf2a17 	ldw	r2,-856(fp)
   36134:	10800e04 	addi	r2,r2,56
   36138:	e0fe5f17 	ldw	r3,-1668(fp)
   3613c:	10c00015 	stw	r3,0(r2)
   36140:	e0be6017 	ldw	r2,-1664(fp)
   36144:	e0be5f15 	stw	r2,-1668(fp)
   36148:	e03e6015 	stw	zero,-1664(fp)
   3614c:	e0be6117 	ldw	r2,-1660(fp)
   36150:	1004c03a 	cmpne	r2,r2,zero
   36154:	10803fcc 	andi	r2,r2,255
   36158:	10000d26 	beq	r2,zero,36190 <secp256k1_scalar_sqr_512+0x525c>
   3615c:	d0a01617 	ldw	r2,-32680(gp)
   36160:	10c00317 	ldw	r3,12(r2)
   36164:	00800174 	movhi	r2,5
   36168:	1096c104 	addi	r2,r2,23300
   3616c:	d8800015 	stw	r2,0(sp)
   36170:	01c09e84 	movi	r7,634
   36174:	01800174 	movhi	r6,5
   36178:	31964204 	addi	r6,r6,22792
   3617c:	01400174 	movhi	r5,5
   36180:	2951e804 	addi	r5,r5,18336
   36184:	1809883a 	mov	r4,r3
   36188:	00461000 	call	46100 <fprintf>
   3618c:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(c1 == 0);
   36190:	e0be6017 	ldw	r2,-1664(fp)
   36194:	1004c03a 	cmpne	r2,r2,zero
   36198:	10803fcc 	andi	r2,r2,255
   3619c:	10000d26 	beq	r2,zero,361d4 <secp256k1_scalar_sqr_512+0x52a0>
   361a0:	d0a01617 	ldw	r2,-32680(gp)
   361a4:	10c00317 	ldw	r3,12(r2)
   361a8:	00800174 	movhi	r2,5
   361ac:	10972304 	addi	r2,r2,23692
   361b0:	d8800015 	stw	r2,0(sp)
   361b4:	01c09ec4 	movi	r7,635
   361b8:	01800174 	movhi	r6,5
   361bc:	31964204 	addi	r6,r6,22792
   361c0:	01400174 	movhi	r5,5
   361c4:	2951e804 	addi	r5,r5,18336
   361c8:	1809883a 	mov	r4,r3
   361cc:	00461000 	call	46100 <fprintf>
   361d0:	0045fd40 	call	45fd4 <abort>
    l[15] = c0;
   361d4:	e0bf2a17 	ldw	r2,-856(fp)
   361d8:	10800f04 	addi	r2,r2,60
   361dc:	e0fe5f17 	ldw	r3,-1668(fp)
   361e0:	10c00015 	stw	r3,0(r2)
}
   361e4:	0001883a 	nop
   361e8:	e6fff804 	addi	sp,fp,-32
   361ec:	dfc00917 	ldw	ra,36(sp)
   361f0:	df000817 	ldw	fp,32(sp)
   361f4:	ddc00717 	ldw	r23,28(sp)
   361f8:	dd800617 	ldw	r22,24(sp)
   361fc:	dd400517 	ldw	r21,20(sp)
   36200:	dd000417 	ldw	r20,16(sp)
   36204:	dcc00317 	ldw	r19,12(sp)
   36208:	dc800217 	ldw	r18,8(sp)
   3620c:	dc400117 	ldw	r17,4(sp)
   36210:	dc000017 	ldw	r16,0(sp)
   36214:	dec00a04 	addi	sp,sp,40
   36218:	f800283a 	ret

0003621c <secp256k1_scalar_mul>:
#undef muladd_fast
#undef muladd2
#undef extract
#undef extract_fast

static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {
   3621c:	deffeb04 	addi	sp,sp,-84
   36220:	dfc01415 	stw	ra,80(sp)
   36224:	df001315 	stw	fp,76(sp)
   36228:	df001304 	addi	fp,sp,76
   3622c:	e13ffd15 	stw	r4,-12(fp)
   36230:	e17ffe15 	stw	r5,-8(fp)
   36234:	e1bfff15 	stw	r6,-4(fp)
    uint32_t l[16];
    secp256k1_scalar_mul_512(l, a, b);
   36238:	e1bfff17 	ldw	r6,-4(fp)
   3623c:	e17ffe17 	ldw	r5,-8(fp)
   36240:	e13fed04 	addi	r4,fp,-76
   36244:	002c3480 	call	2c348 <secp256k1_scalar_mul_512>
    secp256k1_scalar_reduce_512(r, l);
   36248:	e17fed04 	addi	r5,fp,-76
   3624c:	e13ffd17 	ldw	r4,-12(fp)
   36250:	00277580 	call	27758 <secp256k1_scalar_reduce_512>
}
   36254:	0001883a 	nop
   36258:	e037883a 	mov	sp,fp
   3625c:	dfc00117 	ldw	ra,4(sp)
   36260:	df000017 	ldw	fp,0(sp)
   36264:	dec00204 	addi	sp,sp,8
   36268:	f800283a 	ret

0003626c <secp256k1_scalar_shr_int>:

static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {
   3626c:	defffa04 	addi	sp,sp,-24
   36270:	dfc00515 	stw	ra,20(sp)
   36274:	df000415 	stw	fp,16(sp)
   36278:	df000404 	addi	fp,sp,16
   3627c:	e13ffe15 	stw	r4,-8(fp)
   36280:	e17fff15 	stw	r5,-4(fp)
    int ret;
    VERIFY_CHECK(n > 0);
   36284:	e0bfff17 	ldw	r2,-4(fp)
   36288:	0084403a 	cmpge	r2,zero,r2
   3628c:	10803fcc 	andi	r2,r2,255
   36290:	10000d26 	beq	r2,zero,362c8 <secp256k1_scalar_shr_int+0x5c>
   36294:	d0a01617 	ldw	r2,-32680(gp)
   36298:	10c00317 	ldw	r3,12(r2)
   3629c:	00800174 	movhi	r2,5
   362a0:	10975304 	addi	r2,r2,23884
   362a4:	d8800015 	stw	r2,0(sp)
   362a8:	01c0a3c4 	movi	r7,655
   362ac:	01800174 	movhi	r6,5
   362b0:	31964204 	addi	r6,r6,22792
   362b4:	01400174 	movhi	r5,5
   362b8:	2951e804 	addi	r5,r5,18336
   362bc:	1809883a 	mov	r4,r3
   362c0:	00461000 	call	46100 <fprintf>
   362c4:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(n < 16);
   362c8:	e0bfff17 	ldw	r2,-4(fp)
   362cc:	10800408 	cmpgei	r2,r2,16
   362d0:	10803fcc 	andi	r2,r2,255
   362d4:	10000d26 	beq	r2,zero,3630c <secp256k1_scalar_shr_int+0xa0>
   362d8:	d0a01617 	ldw	r2,-32680(gp)
   362dc:	10c00317 	ldw	r3,12(r2)
   362e0:	00800174 	movhi	r2,5
   362e4:	10975b04 	addi	r2,r2,23916
   362e8:	d8800015 	stw	r2,0(sp)
   362ec:	01c0a404 	movi	r7,656
   362f0:	01800174 	movhi	r6,5
   362f4:	31964204 	addi	r6,r6,22792
   362f8:	01400174 	movhi	r5,5
   362fc:	2951e804 	addi	r5,r5,18336
   36300:	1809883a 	mov	r4,r3
   36304:	00461000 	call	46100 <fprintf>
   36308:	0045fd40 	call	45fd4 <abort>
    ret = r->d[0] & ((1 << n) - 1);
   3630c:	e0bffe17 	ldw	r2,-8(fp)
   36310:	10800017 	ldw	r2,0(r2)
   36314:	01000044 	movi	r4,1
   36318:	e0ffff17 	ldw	r3,-4(fp)
   3631c:	20c6983a 	sll	r3,r4,r3
   36320:	18ffffc4 	addi	r3,r3,-1
   36324:	10c4703a 	and	r2,r2,r3
   36328:	e0bffd15 	stw	r2,-12(fp)
    r->d[0] = (r->d[0] >> n) + (r->d[1] << (32 - n));
   3632c:	e0bffe17 	ldw	r2,-8(fp)
   36330:	10c00017 	ldw	r3,0(r2)
   36334:	e0bfff17 	ldw	r2,-4(fp)
   36338:	1886d83a 	srl	r3,r3,r2
   3633c:	e0bffe17 	ldw	r2,-8(fp)
   36340:	11000117 	ldw	r4,4(r2)
   36344:	01400804 	movi	r5,32
   36348:	e0bfff17 	ldw	r2,-4(fp)
   3634c:	2885c83a 	sub	r2,r5,r2
   36350:	2084983a 	sll	r2,r4,r2
   36354:	1887883a 	add	r3,r3,r2
   36358:	e0bffe17 	ldw	r2,-8(fp)
   3635c:	10c00015 	stw	r3,0(r2)
    r->d[1] = (r->d[1] >> n) + (r->d[2] << (32 - n));
   36360:	e0bffe17 	ldw	r2,-8(fp)
   36364:	10c00117 	ldw	r3,4(r2)
   36368:	e0bfff17 	ldw	r2,-4(fp)
   3636c:	1886d83a 	srl	r3,r3,r2
   36370:	e0bffe17 	ldw	r2,-8(fp)
   36374:	11000217 	ldw	r4,8(r2)
   36378:	01400804 	movi	r5,32
   3637c:	e0bfff17 	ldw	r2,-4(fp)
   36380:	2885c83a 	sub	r2,r5,r2
   36384:	2084983a 	sll	r2,r4,r2
   36388:	1887883a 	add	r3,r3,r2
   3638c:	e0bffe17 	ldw	r2,-8(fp)
   36390:	10c00115 	stw	r3,4(r2)
    r->d[2] = (r->d[2] >> n) + (r->d[3] << (32 - n));
   36394:	e0bffe17 	ldw	r2,-8(fp)
   36398:	10c00217 	ldw	r3,8(r2)
   3639c:	e0bfff17 	ldw	r2,-4(fp)
   363a0:	1886d83a 	srl	r3,r3,r2
   363a4:	e0bffe17 	ldw	r2,-8(fp)
   363a8:	11000317 	ldw	r4,12(r2)
   363ac:	01400804 	movi	r5,32
   363b0:	e0bfff17 	ldw	r2,-4(fp)
   363b4:	2885c83a 	sub	r2,r5,r2
   363b8:	2084983a 	sll	r2,r4,r2
   363bc:	1887883a 	add	r3,r3,r2
   363c0:	e0bffe17 	ldw	r2,-8(fp)
   363c4:	10c00215 	stw	r3,8(r2)
    r->d[3] = (r->d[3] >> n) + (r->d[4] << (32 - n));
   363c8:	e0bffe17 	ldw	r2,-8(fp)
   363cc:	10c00317 	ldw	r3,12(r2)
   363d0:	e0bfff17 	ldw	r2,-4(fp)
   363d4:	1886d83a 	srl	r3,r3,r2
   363d8:	e0bffe17 	ldw	r2,-8(fp)
   363dc:	11000417 	ldw	r4,16(r2)
   363e0:	01400804 	movi	r5,32
   363e4:	e0bfff17 	ldw	r2,-4(fp)
   363e8:	2885c83a 	sub	r2,r5,r2
   363ec:	2084983a 	sll	r2,r4,r2
   363f0:	1887883a 	add	r3,r3,r2
   363f4:	e0bffe17 	ldw	r2,-8(fp)
   363f8:	10c00315 	stw	r3,12(r2)
    r->d[4] = (r->d[4] >> n) + (r->d[5] << (32 - n));
   363fc:	e0bffe17 	ldw	r2,-8(fp)
   36400:	10c00417 	ldw	r3,16(r2)
   36404:	e0bfff17 	ldw	r2,-4(fp)
   36408:	1886d83a 	srl	r3,r3,r2
   3640c:	e0bffe17 	ldw	r2,-8(fp)
   36410:	11000517 	ldw	r4,20(r2)
   36414:	01400804 	movi	r5,32
   36418:	e0bfff17 	ldw	r2,-4(fp)
   3641c:	2885c83a 	sub	r2,r5,r2
   36420:	2084983a 	sll	r2,r4,r2
   36424:	1887883a 	add	r3,r3,r2
   36428:	e0bffe17 	ldw	r2,-8(fp)
   3642c:	10c00415 	stw	r3,16(r2)
    r->d[5] = (r->d[5] >> n) + (r->d[6] << (32 - n));
   36430:	e0bffe17 	ldw	r2,-8(fp)
   36434:	10c00517 	ldw	r3,20(r2)
   36438:	e0bfff17 	ldw	r2,-4(fp)
   3643c:	1886d83a 	srl	r3,r3,r2
   36440:	e0bffe17 	ldw	r2,-8(fp)
   36444:	11000617 	ldw	r4,24(r2)
   36448:	01400804 	movi	r5,32
   3644c:	e0bfff17 	ldw	r2,-4(fp)
   36450:	2885c83a 	sub	r2,r5,r2
   36454:	2084983a 	sll	r2,r4,r2
   36458:	1887883a 	add	r3,r3,r2
   3645c:	e0bffe17 	ldw	r2,-8(fp)
   36460:	10c00515 	stw	r3,20(r2)
    r->d[6] = (r->d[6] >> n) + (r->d[7] << (32 - n));
   36464:	e0bffe17 	ldw	r2,-8(fp)
   36468:	10c00617 	ldw	r3,24(r2)
   3646c:	e0bfff17 	ldw	r2,-4(fp)
   36470:	1886d83a 	srl	r3,r3,r2
   36474:	e0bffe17 	ldw	r2,-8(fp)
   36478:	11000717 	ldw	r4,28(r2)
   3647c:	01400804 	movi	r5,32
   36480:	e0bfff17 	ldw	r2,-4(fp)
   36484:	2885c83a 	sub	r2,r5,r2
   36488:	2084983a 	sll	r2,r4,r2
   3648c:	1887883a 	add	r3,r3,r2
   36490:	e0bffe17 	ldw	r2,-8(fp)
   36494:	10c00615 	stw	r3,24(r2)
    r->d[7] = (r->d[7] >> n);
   36498:	e0bffe17 	ldw	r2,-8(fp)
   3649c:	10c00717 	ldw	r3,28(r2)
   364a0:	e0bfff17 	ldw	r2,-4(fp)
   364a4:	1886d83a 	srl	r3,r3,r2
   364a8:	e0bffe17 	ldw	r2,-8(fp)
   364ac:	10c00715 	stw	r3,28(r2)
    return ret;
   364b0:	e0bffd17 	ldw	r2,-12(fp)
}
   364b4:	e037883a 	mov	sp,fp
   364b8:	dfc00117 	ldw	ra,4(sp)
   364bc:	df000017 	ldw	fp,0(sp)
   364c0:	dec00204 	addi	sp,sp,8
   364c4:	f800283a 	ret

000364c8 <secp256k1_scalar_sqr>:

static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {
   364c8:	deffec04 	addi	sp,sp,-80
   364cc:	dfc01315 	stw	ra,76(sp)
   364d0:	df001215 	stw	fp,72(sp)
   364d4:	df001204 	addi	fp,sp,72
   364d8:	e13ffe15 	stw	r4,-8(fp)
   364dc:	e17fff15 	stw	r5,-4(fp)
    uint32_t l[16];
    secp256k1_scalar_sqr_512(l, a);
   364e0:	e17fff17 	ldw	r5,-4(fp)
   364e4:	e13fee04 	addi	r4,fp,-72
   364e8:	0030f340 	call	30f34 <secp256k1_scalar_sqr_512>
    secp256k1_scalar_reduce_512(r, l);
   364ec:	e17fee04 	addi	r5,fp,-72
   364f0:	e13ffe17 	ldw	r4,-8(fp)
   364f4:	00277580 	call	27758 <secp256k1_scalar_reduce_512>
}
   364f8:	0001883a 	nop
   364fc:	e037883a 	mov	sp,fp
   36500:	dfc00117 	ldw	ra,4(sp)
   36504:	df000017 	ldw	fp,0(sp)
   36508:	dec00204 	addi	sp,sp,8
   3650c:	f800283a 	ret

00036510 <secp256k1_scalar_inverse>:
    };
    secp256k1_num_set_bin(r, order, 32);
}
#endif

static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {
   36510:	deffa204 	addi	sp,sp,-376
   36514:	dfc05d15 	stw	ra,372(sp)
   36518:	df005c15 	stw	fp,368(sp)
   3651c:	df005c04 	addi	fp,sp,368
   36520:	e13ffe15 	stw	r4,-8(fp)
   36524:	e17fff15 	stw	r5,-4(fp)
    secp256k1_scalar *t;
    int i;
    /* First compute x ^ (2^N - 1) for some values of N. */
    secp256k1_scalar x2, x3, x4, x6, x7, x8, x15, x30, x60, x120, x127;

    secp256k1_scalar_sqr(&x2,  x);
   36528:	e0bfa604 	addi	r2,fp,-360
   3652c:	e17fff17 	ldw	r5,-4(fp)
   36530:	1009883a 	mov	r4,r2
   36534:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x2, &x2,  x);
   36538:	e0ffa604 	addi	r3,fp,-360
   3653c:	e0bfa604 	addi	r2,fp,-360
   36540:	e1bfff17 	ldw	r6,-4(fp)
   36544:	180b883a 	mov	r5,r3
   36548:	1009883a 	mov	r4,r2
   3654c:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x3, &x2);
   36550:	e0ffa604 	addi	r3,fp,-360
   36554:	e0bfae04 	addi	r2,fp,-328
   36558:	180b883a 	mov	r5,r3
   3655c:	1009883a 	mov	r4,r2
   36560:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x3, &x3,  x);
   36564:	e0ffae04 	addi	r3,fp,-328
   36568:	e0bfae04 	addi	r2,fp,-328
   3656c:	e1bfff17 	ldw	r6,-4(fp)
   36570:	180b883a 	mov	r5,r3
   36574:	1009883a 	mov	r4,r2
   36578:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x4, &x3);
   3657c:	e0ffae04 	addi	r3,fp,-328
   36580:	e0bfb604 	addi	r2,fp,-296
   36584:	180b883a 	mov	r5,r3
   36588:	1009883a 	mov	r4,r2
   3658c:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x4, &x4,  x);
   36590:	e0ffb604 	addi	r3,fp,-296
   36594:	e0bfb604 	addi	r2,fp,-296
   36598:	e1bfff17 	ldw	r6,-4(fp)
   3659c:	180b883a 	mov	r5,r3
   365a0:	1009883a 	mov	r4,r2
   365a4:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x6, &x4);
   365a8:	e0ffb604 	addi	r3,fp,-296
   365ac:	e0bfbe04 	addi	r2,fp,-264
   365b0:	180b883a 	mov	r5,r3
   365b4:	1009883a 	mov	r4,r2
   365b8:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_sqr(&x6, &x6);
   365bc:	e0ffbe04 	addi	r3,fp,-264
   365c0:	e0bfbe04 	addi	r2,fp,-264
   365c4:	180b883a 	mov	r5,r3
   365c8:	1009883a 	mov	r4,r2
   365cc:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x6, &x6, &x2);
   365d0:	e13fa604 	addi	r4,fp,-360
   365d4:	e0ffbe04 	addi	r3,fp,-264
   365d8:	e0bfbe04 	addi	r2,fp,-264
   365dc:	200d883a 	mov	r6,r4
   365e0:	180b883a 	mov	r5,r3
   365e4:	1009883a 	mov	r4,r2
   365e8:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x7, &x6);
   365ec:	e0ffbe04 	addi	r3,fp,-264
   365f0:	e0bfc604 	addi	r2,fp,-232
   365f4:	180b883a 	mov	r5,r3
   365f8:	1009883a 	mov	r4,r2
   365fc:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x7, &x7,  x);
   36600:	e0ffc604 	addi	r3,fp,-232
   36604:	e0bfc604 	addi	r2,fp,-232
   36608:	e1bfff17 	ldw	r6,-4(fp)
   3660c:	180b883a 	mov	r5,r3
   36610:	1009883a 	mov	r4,r2
   36614:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x8, &x7);
   36618:	e0ffc604 	addi	r3,fp,-232
   3661c:	e0bfce04 	addi	r2,fp,-200
   36620:	180b883a 	mov	r5,r3
   36624:	1009883a 	mov	r4,r2
   36628:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(&x8, &x8,  x);
   3662c:	e0ffce04 	addi	r3,fp,-200
   36630:	e0bfce04 	addi	r2,fp,-200
   36634:	e1bfff17 	ldw	r6,-4(fp)
   36638:	180b883a 	mov	r5,r3
   3663c:	1009883a 	mov	r4,r2
   36640:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x15, &x8);
   36644:	e0ffce04 	addi	r3,fp,-200
   36648:	e0bfd604 	addi	r2,fp,-168
   3664c:	180b883a 	mov	r5,r3
   36650:	1009883a 	mov	r4,r2
   36654:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    for (i = 0; i < 6; i++) {
   36658:	e03fa415 	stw	zero,-368(fp)
   3665c:	00000806 	br	36680 <secp256k1_scalar_inverse+0x170>
        secp256k1_scalar_sqr(&x15, &x15);
   36660:	e0ffd604 	addi	r3,fp,-168
   36664:	e0bfd604 	addi	r2,fp,-168
   36668:	180b883a 	mov	r5,r3
   3666c:	1009883a 	mov	r4,r2
   36670:	00364c80 	call	364c8 <secp256k1_scalar_sqr>

    secp256k1_scalar_sqr(&x8, &x7);
    secp256k1_scalar_mul(&x8, &x8,  x);

    secp256k1_scalar_sqr(&x15, &x8);
    for (i = 0; i < 6; i++) {
   36674:	e0bfa417 	ldw	r2,-368(fp)
   36678:	10800044 	addi	r2,r2,1
   3667c:	e0bfa415 	stw	r2,-368(fp)
   36680:	e0bfa417 	ldw	r2,-368(fp)
   36684:	10800190 	cmplti	r2,r2,6
   36688:	103ff51e 	bne	r2,zero,36660 <__alt_mem_epcs_flash_controller+0xfe02d660>
        secp256k1_scalar_sqr(&x15, &x15);
    }
    secp256k1_scalar_mul(&x15, &x15, &x7);
   3668c:	e13fc604 	addi	r4,fp,-232
   36690:	e0ffd604 	addi	r3,fp,-168
   36694:	e0bfd604 	addi	r2,fp,-168
   36698:	200d883a 	mov	r6,r4
   3669c:	180b883a 	mov	r5,r3
   366a0:	1009883a 	mov	r4,r2
   366a4:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x30, &x15);
   366a8:	e0ffd604 	addi	r3,fp,-168
   366ac:	e0bfde04 	addi	r2,fp,-136
   366b0:	180b883a 	mov	r5,r3
   366b4:	1009883a 	mov	r4,r2
   366b8:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    for (i = 0; i < 14; i++) {
   366bc:	e03fa415 	stw	zero,-368(fp)
   366c0:	00000806 	br	366e4 <secp256k1_scalar_inverse+0x1d4>
        secp256k1_scalar_sqr(&x30, &x30);
   366c4:	e0ffde04 	addi	r3,fp,-136
   366c8:	e0bfde04 	addi	r2,fp,-136
   366cc:	180b883a 	mov	r5,r3
   366d0:	1009883a 	mov	r4,r2
   366d4:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
        secp256k1_scalar_sqr(&x15, &x15);
    }
    secp256k1_scalar_mul(&x15, &x15, &x7);

    secp256k1_scalar_sqr(&x30, &x15);
    for (i = 0; i < 14; i++) {
   366d8:	e0bfa417 	ldw	r2,-368(fp)
   366dc:	10800044 	addi	r2,r2,1
   366e0:	e0bfa415 	stw	r2,-368(fp)
   366e4:	e0bfa417 	ldw	r2,-368(fp)
   366e8:	10800390 	cmplti	r2,r2,14
   366ec:	103ff51e 	bne	r2,zero,366c4 <__alt_mem_epcs_flash_controller+0xfe02d6c4>
        secp256k1_scalar_sqr(&x30, &x30);
    }
    secp256k1_scalar_mul(&x30, &x30, &x15);
   366f0:	e13fd604 	addi	r4,fp,-168
   366f4:	e0ffde04 	addi	r3,fp,-136
   366f8:	e0bfde04 	addi	r2,fp,-136
   366fc:	200d883a 	mov	r6,r4
   36700:	180b883a 	mov	r5,r3
   36704:	1009883a 	mov	r4,r2
   36708:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x60, &x30);
   3670c:	e0ffde04 	addi	r3,fp,-136
   36710:	e0bfe604 	addi	r2,fp,-104
   36714:	180b883a 	mov	r5,r3
   36718:	1009883a 	mov	r4,r2
   3671c:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    for (i = 0; i < 29; i++) {
   36720:	e03fa415 	stw	zero,-368(fp)
   36724:	00000806 	br	36748 <secp256k1_scalar_inverse+0x238>
        secp256k1_scalar_sqr(&x60, &x60);
   36728:	e0ffe604 	addi	r3,fp,-104
   3672c:	e0bfe604 	addi	r2,fp,-104
   36730:	180b883a 	mov	r5,r3
   36734:	1009883a 	mov	r4,r2
   36738:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
        secp256k1_scalar_sqr(&x30, &x30);
    }
    secp256k1_scalar_mul(&x30, &x30, &x15);

    secp256k1_scalar_sqr(&x60, &x30);
    for (i = 0; i < 29; i++) {
   3673c:	e0bfa417 	ldw	r2,-368(fp)
   36740:	10800044 	addi	r2,r2,1
   36744:	e0bfa415 	stw	r2,-368(fp)
   36748:	e0bfa417 	ldw	r2,-368(fp)
   3674c:	10800750 	cmplti	r2,r2,29
   36750:	103ff51e 	bne	r2,zero,36728 <__alt_mem_epcs_flash_controller+0xfe02d728>
        secp256k1_scalar_sqr(&x60, &x60);
    }
    secp256k1_scalar_mul(&x60, &x60, &x30);
   36754:	e13fde04 	addi	r4,fp,-136
   36758:	e0ffe604 	addi	r3,fp,-104
   3675c:	e0bfe604 	addi	r2,fp,-104
   36760:	200d883a 	mov	r6,r4
   36764:	180b883a 	mov	r5,r3
   36768:	1009883a 	mov	r4,r2
   3676c:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x120, &x60);
   36770:	e0ffe604 	addi	r3,fp,-104
   36774:	e0bfee04 	addi	r2,fp,-72
   36778:	180b883a 	mov	r5,r3
   3677c:	1009883a 	mov	r4,r2
   36780:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    for (i = 0; i < 59; i++) {
   36784:	e03fa415 	stw	zero,-368(fp)
   36788:	00000806 	br	367ac <secp256k1_scalar_inverse+0x29c>
        secp256k1_scalar_sqr(&x120, &x120);
   3678c:	e0ffee04 	addi	r3,fp,-72
   36790:	e0bfee04 	addi	r2,fp,-72
   36794:	180b883a 	mov	r5,r3
   36798:	1009883a 	mov	r4,r2
   3679c:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
        secp256k1_scalar_sqr(&x60, &x60);
    }
    secp256k1_scalar_mul(&x60, &x60, &x30);

    secp256k1_scalar_sqr(&x120, &x60);
    for (i = 0; i < 59; i++) {
   367a0:	e0bfa417 	ldw	r2,-368(fp)
   367a4:	10800044 	addi	r2,r2,1
   367a8:	e0bfa415 	stw	r2,-368(fp)
   367ac:	e0bfa417 	ldw	r2,-368(fp)
   367b0:	10800ed0 	cmplti	r2,r2,59
   367b4:	103ff51e 	bne	r2,zero,3678c <__alt_mem_epcs_flash_controller+0xfe02d78c>
        secp256k1_scalar_sqr(&x120, &x120);
    }
    secp256k1_scalar_mul(&x120, &x120, &x60);
   367b8:	e13fe604 	addi	r4,fp,-104
   367bc:	e0ffee04 	addi	r3,fp,-72
   367c0:	e0bfee04 	addi	r2,fp,-72
   367c4:	200d883a 	mov	r6,r4
   367c8:	180b883a 	mov	r5,r3
   367cc:	1009883a 	mov	r4,r2
   367d0:	003621c0 	call	3621c <secp256k1_scalar_mul>

    secp256k1_scalar_sqr(&x127, &x120);
   367d4:	e0ffee04 	addi	r3,fp,-72
   367d8:	e0bff604 	addi	r2,fp,-40
   367dc:	180b883a 	mov	r5,r3
   367e0:	1009883a 	mov	r4,r2
   367e4:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    for (i = 0; i < 6; i++) {
   367e8:	e03fa415 	stw	zero,-368(fp)
   367ec:	00000806 	br	36810 <secp256k1_scalar_inverse+0x300>
        secp256k1_scalar_sqr(&x127, &x127);
   367f0:	e0fff604 	addi	r3,fp,-40
   367f4:	e0bff604 	addi	r2,fp,-40
   367f8:	180b883a 	mov	r5,r3
   367fc:	1009883a 	mov	r4,r2
   36800:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
        secp256k1_scalar_sqr(&x120, &x120);
    }
    secp256k1_scalar_mul(&x120, &x120, &x60);

    secp256k1_scalar_sqr(&x127, &x120);
    for (i = 0; i < 6; i++) {
   36804:	e0bfa417 	ldw	r2,-368(fp)
   36808:	10800044 	addi	r2,r2,1
   3680c:	e0bfa415 	stw	r2,-368(fp)
   36810:	e0bfa417 	ldw	r2,-368(fp)
   36814:	10800190 	cmplti	r2,r2,6
   36818:	103ff51e 	bne	r2,zero,367f0 <__alt_mem_epcs_flash_controller+0xfe02d7f0>
        secp256k1_scalar_sqr(&x127, &x127);
    }
    secp256k1_scalar_mul(&x127, &x127, &x7);
   3681c:	e13fc604 	addi	r4,fp,-232
   36820:	e0fff604 	addi	r3,fp,-40
   36824:	e0bff604 	addi	r2,fp,-40
   36828:	200d883a 	mov	r6,r4
   3682c:	180b883a 	mov	r5,r3
   36830:	1009883a 	mov	r4,r2
   36834:	003621c0 	call	3621c <secp256k1_scalar_mul>

    /* Then accumulate the final result (t starts at x127). */
    t = &x127;
   36838:	e0bff604 	addi	r2,fp,-40
   3683c:	e0bfa515 	stw	r2,-364(fp)
    for (i = 0; i < 2; i++) { /* 0 */
   36840:	e03fa415 	stw	zero,-368(fp)
   36844:	00000606 	br	36860 <secp256k1_scalar_inverse+0x350>
        secp256k1_scalar_sqr(t, t);
   36848:	e17fa517 	ldw	r5,-364(fp)
   3684c:	e13fa517 	ldw	r4,-364(fp)
   36850:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    }
    secp256k1_scalar_mul(&x127, &x127, &x7);

    /* Then accumulate the final result (t starts at x127). */
    t = &x127;
    for (i = 0; i < 2; i++) { /* 0 */
   36854:	e0bfa417 	ldw	r2,-368(fp)
   36858:	10800044 	addi	r2,r2,1
   3685c:	e0bfa415 	stw	r2,-368(fp)
   36860:	e0bfa417 	ldw	r2,-368(fp)
   36864:	10800090 	cmplti	r2,r2,2
   36868:	103ff71e 	bne	r2,zero,36848 <__alt_mem_epcs_flash_controller+0xfe02d848>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   3686c:	e1bfff17 	ldw	r6,-4(fp)
   36870:	e17fa517 	ldw	r5,-364(fp)
   36874:	e13fa517 	ldw	r4,-364(fp)
   36878:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 0 */
   3687c:	e03fa415 	stw	zero,-368(fp)
   36880:	00000606 	br	3689c <secp256k1_scalar_inverse+0x38c>
        secp256k1_scalar_sqr(t, t);
   36884:	e17fa517 	ldw	r5,-364(fp)
   36888:	e13fa517 	ldw	r4,-364(fp)
   3688c:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    t = &x127;
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 0 */
   36890:	e0bfa417 	ldw	r2,-368(fp)
   36894:	10800044 	addi	r2,r2,1
   36898:	e0bfa415 	stw	r2,-368(fp)
   3689c:	e0bfa417 	ldw	r2,-368(fp)
   368a0:	10800110 	cmplti	r2,r2,4
   368a4:	103ff71e 	bne	r2,zero,36884 <__alt_mem_epcs_flash_controller+0xfe02d884>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   368a8:	e0bfae04 	addi	r2,fp,-328
   368ac:	100d883a 	mov	r6,r2
   368b0:	e17fa517 	ldw	r5,-364(fp)
   368b4:	e13fa517 	ldw	r4,-364(fp)
   368b8:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   368bc:	e03fa415 	stw	zero,-368(fp)
   368c0:	00000606 	br	368dc <secp256k1_scalar_inverse+0x3cc>
        secp256k1_scalar_sqr(t, t);
   368c4:	e17fa517 	ldw	r5,-364(fp)
   368c8:	e13fa517 	ldw	r4,-364(fp)
   368cc:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 2; i++) { /* 0 */
   368d0:	e0bfa417 	ldw	r2,-368(fp)
   368d4:	10800044 	addi	r2,r2,1
   368d8:	e0bfa415 	stw	r2,-368(fp)
   368dc:	e0bfa417 	ldw	r2,-368(fp)
   368e0:	10800090 	cmplti	r2,r2,2
   368e4:	103ff71e 	bne	r2,zero,368c4 <__alt_mem_epcs_flash_controller+0xfe02d8c4>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   368e8:	e1bfff17 	ldw	r6,-4(fp)
   368ec:	e17fa517 	ldw	r5,-364(fp)
   368f0:	e13fa517 	ldw	r4,-364(fp)
   368f4:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   368f8:	e03fa415 	stw	zero,-368(fp)
   368fc:	00000606 	br	36918 <secp256k1_scalar_inverse+0x408>
        secp256k1_scalar_sqr(t, t);
   36900:	e17fa517 	ldw	r5,-364(fp)
   36904:	e13fa517 	ldw	r4,-364(fp)
   36908:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
   3690c:	e0bfa417 	ldw	r2,-368(fp)
   36910:	10800044 	addi	r2,r2,1
   36914:	e0bfa415 	stw	r2,-368(fp)
   36918:	e0bfa417 	ldw	r2,-368(fp)
   3691c:	10800090 	cmplti	r2,r2,2
   36920:	103ff71e 	bne	r2,zero,36900 <__alt_mem_epcs_flash_controller+0xfe02d900>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36924:	e1bfff17 	ldw	r6,-4(fp)
   36928:	e17fa517 	ldw	r5,-364(fp)
   3692c:	e13fa517 	ldw	r4,-364(fp)
   36930:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   36934:	e03fa415 	stw	zero,-368(fp)
   36938:	00000606 	br	36954 <secp256k1_scalar_inverse+0x444>
        secp256k1_scalar_sqr(t, t);
   3693c:	e17fa517 	ldw	r5,-364(fp)
   36940:	e13fa517 	ldw	r4,-364(fp)
   36944:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
   36948:	e0bfa417 	ldw	r2,-368(fp)
   3694c:	10800044 	addi	r2,r2,1
   36950:	e0bfa415 	stw	r2,-368(fp)
   36954:	e0bfa417 	ldw	r2,-368(fp)
   36958:	10800090 	cmplti	r2,r2,2
   3695c:	103ff71e 	bne	r2,zero,3693c <__alt_mem_epcs_flash_controller+0xfe02d93c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36960:	e1bfff17 	ldw	r6,-4(fp)
   36964:	e17fa517 	ldw	r5,-364(fp)
   36968:	e13fa517 	ldw	r4,-364(fp)
   3696c:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 0 */
   36970:	e03fa415 	stw	zero,-368(fp)
   36974:	00000606 	br	36990 <secp256k1_scalar_inverse+0x480>
        secp256k1_scalar_sqr(t, t);
   36978:	e17fa517 	ldw	r5,-364(fp)
   3697c:	e13fa517 	ldw	r4,-364(fp)
   36980:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 0 */
   36984:	e0bfa417 	ldw	r2,-368(fp)
   36988:	10800044 	addi	r2,r2,1
   3698c:	e0bfa415 	stw	r2,-368(fp)
   36990:	e0bfa417 	ldw	r2,-368(fp)
   36994:	10800110 	cmplti	r2,r2,4
   36998:	103ff71e 	bne	r2,zero,36978 <__alt_mem_epcs_flash_controller+0xfe02d978>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   3699c:	e0bfae04 	addi	r2,fp,-328
   369a0:	100d883a 	mov	r6,r2
   369a4:	e17fa517 	ldw	r5,-364(fp)
   369a8:	e13fa517 	ldw	r4,-364(fp)
   369ac:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 0 */
   369b0:	e03fa415 	stw	zero,-368(fp)
   369b4:	00000606 	br	369d0 <secp256k1_scalar_inverse+0x4c0>
        secp256k1_scalar_sqr(t, t);
   369b8:	e17fa517 	ldw	r5,-364(fp)
   369bc:	e13fa517 	ldw	r4,-364(fp)
   369c0:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 3; i++) { /* 0 */
   369c4:	e0bfa417 	ldw	r2,-368(fp)
   369c8:	10800044 	addi	r2,r2,1
   369cc:	e0bfa415 	stw	r2,-368(fp)
   369d0:	e0bfa417 	ldw	r2,-368(fp)
   369d4:	108000d0 	cmplti	r2,r2,3
   369d8:	103ff71e 	bne	r2,zero,369b8 <__alt_mem_epcs_flash_controller+0xfe02d9b8>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   369dc:	e0bfa604 	addi	r2,fp,-360
   369e0:	100d883a 	mov	r6,r2
   369e4:	e17fa517 	ldw	r5,-364(fp)
   369e8:	e13fa517 	ldw	r4,-364(fp)
   369ec:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 0 */
   369f0:	e03fa415 	stw	zero,-368(fp)
   369f4:	00000606 	br	36a10 <secp256k1_scalar_inverse+0x500>
        secp256k1_scalar_sqr(t, t);
   369f8:	e17fa517 	ldw	r5,-364(fp)
   369fc:	e13fa517 	ldw	r4,-364(fp)
   36a00:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 3; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 4; i++) { /* 0 */
   36a04:	e0bfa417 	ldw	r2,-368(fp)
   36a08:	10800044 	addi	r2,r2,1
   36a0c:	e0bfa415 	stw	r2,-368(fp)
   36a10:	e0bfa417 	ldw	r2,-368(fp)
   36a14:	10800110 	cmplti	r2,r2,4
   36a18:	103ff71e 	bne	r2,zero,369f8 <__alt_mem_epcs_flash_controller+0xfe02d9f8>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   36a1c:	e0bfae04 	addi	r2,fp,-328
   36a20:	100d883a 	mov	r6,r2
   36a24:	e17fa517 	ldw	r5,-364(fp)
   36a28:	e13fa517 	ldw	r4,-364(fp)
   36a2c:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 5; i++) { /* 00 */
   36a30:	e03fa415 	stw	zero,-368(fp)
   36a34:	00000606 	br	36a50 <secp256k1_scalar_inverse+0x540>
        secp256k1_scalar_sqr(t, t);
   36a38:	e17fa517 	ldw	r5,-364(fp)
   36a3c:	e13fa517 	ldw	r4,-364(fp)
   36a40:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 4; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 5; i++) { /* 00 */
   36a44:	e0bfa417 	ldw	r2,-368(fp)
   36a48:	10800044 	addi	r2,r2,1
   36a4c:	e0bfa415 	stw	r2,-368(fp)
   36a50:	e0bfa417 	ldw	r2,-368(fp)
   36a54:	10800150 	cmplti	r2,r2,5
   36a58:	103ff71e 	bne	r2,zero,36a38 <__alt_mem_epcs_flash_controller+0xfe02da38>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   36a5c:	e0bfae04 	addi	r2,fp,-328
   36a60:	100d883a 	mov	r6,r2
   36a64:	e17fa517 	ldw	r5,-364(fp)
   36a68:	e13fa517 	ldw	r4,-364(fp)
   36a6c:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 00 */
   36a70:	e03fa415 	stw	zero,-368(fp)
   36a74:	00000606 	br	36a90 <secp256k1_scalar_inverse+0x580>
        secp256k1_scalar_sqr(t, t);
   36a78:	e17fa517 	ldw	r5,-364(fp)
   36a7c:	e13fa517 	ldw	r4,-364(fp)
   36a80:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 5; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 4; i++) { /* 00 */
   36a84:	e0bfa417 	ldw	r2,-368(fp)
   36a88:	10800044 	addi	r2,r2,1
   36a8c:	e0bfa415 	stw	r2,-368(fp)
   36a90:	e0bfa417 	ldw	r2,-368(fp)
   36a94:	10800110 	cmplti	r2,r2,4
   36a98:	103ff71e 	bne	r2,zero,36a78 <__alt_mem_epcs_flash_controller+0xfe02da78>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   36a9c:	e0bfa604 	addi	r2,fp,-360
   36aa0:	100d883a 	mov	r6,r2
   36aa4:	e17fa517 	ldw	r5,-364(fp)
   36aa8:	e13fa517 	ldw	r4,-364(fp)
   36aac:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   36ab0:	e03fa415 	stw	zero,-368(fp)
   36ab4:	00000606 	br	36ad0 <secp256k1_scalar_inverse+0x5c0>
        secp256k1_scalar_sqr(t, t);
   36ab8:	e17fa517 	ldw	r5,-364(fp)
   36abc:	e13fa517 	ldw	r4,-364(fp)
   36ac0:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 4; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 2; i++) { /* 0 */
   36ac4:	e0bfa417 	ldw	r2,-368(fp)
   36ac8:	10800044 	addi	r2,r2,1
   36acc:	e0bfa415 	stw	r2,-368(fp)
   36ad0:	e0bfa417 	ldw	r2,-368(fp)
   36ad4:	10800090 	cmplti	r2,r2,2
   36ad8:	103ff71e 	bne	r2,zero,36ab8 <__alt_mem_epcs_flash_controller+0xfe02dab8>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36adc:	e1bfff17 	ldw	r6,-4(fp)
   36ae0:	e17fa517 	ldw	r5,-364(fp)
   36ae4:	e13fa517 	ldw	r4,-364(fp)
   36ae8:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   36aec:	e03fa415 	stw	zero,-368(fp)
   36af0:	00000606 	br	36b0c <secp256k1_scalar_inverse+0x5fc>
        secp256k1_scalar_sqr(t, t);
   36af4:	e17fa517 	ldw	r5,-364(fp)
   36af8:	e13fa517 	ldw	r4,-364(fp)
   36afc:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
   36b00:	e0bfa417 	ldw	r2,-368(fp)
   36b04:	10800044 	addi	r2,r2,1
   36b08:	e0bfa415 	stw	r2,-368(fp)
   36b0c:	e0bfa417 	ldw	r2,-368(fp)
   36b10:	10800090 	cmplti	r2,r2,2
   36b14:	103ff71e 	bne	r2,zero,36af4 <__alt_mem_epcs_flash_controller+0xfe02daf4>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36b18:	e1bfff17 	ldw	r6,-4(fp)
   36b1c:	e17fa517 	ldw	r5,-364(fp)
   36b20:	e13fa517 	ldw	r4,-364(fp)
   36b24:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 5; i++) { /* 0 */
   36b28:	e03fa415 	stw	zero,-368(fp)
   36b2c:	00000606 	br	36b48 <secp256k1_scalar_inverse+0x638>
        secp256k1_scalar_sqr(t, t);
   36b30:	e17fa517 	ldw	r5,-364(fp)
   36b34:	e13fa517 	ldw	r4,-364(fp)
   36b38:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 0 */
   36b3c:	e0bfa417 	ldw	r2,-368(fp)
   36b40:	10800044 	addi	r2,r2,1
   36b44:	e0bfa415 	stw	r2,-368(fp)
   36b48:	e0bfa417 	ldw	r2,-368(fp)
   36b4c:	10800150 	cmplti	r2,r2,5
   36b50:	103ff71e 	bne	r2,zero,36b30 <__alt_mem_epcs_flash_controller+0xfe02db30>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
   36b54:	e0bfb604 	addi	r2,fp,-296
   36b58:	100d883a 	mov	r6,r2
   36b5c:	e17fa517 	ldw	r5,-364(fp)
   36b60:	e13fa517 	ldw	r4,-364(fp)
   36b64:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   36b68:	e03fa415 	stw	zero,-368(fp)
   36b6c:	00000606 	br	36b88 <secp256k1_scalar_inverse+0x678>
        secp256k1_scalar_sqr(t, t);
   36b70:	e17fa517 	ldw	r5,-364(fp)
   36b74:	e13fa517 	ldw	r4,-364(fp)
   36b78:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
    for (i = 0; i < 2; i++) { /* 0 */
   36b7c:	e0bfa417 	ldw	r2,-368(fp)
   36b80:	10800044 	addi	r2,r2,1
   36b84:	e0bfa415 	stw	r2,-368(fp)
   36b88:	e0bfa417 	ldw	r2,-368(fp)
   36b8c:	10800090 	cmplti	r2,r2,2
   36b90:	103ff71e 	bne	r2,zero,36b70 <__alt_mem_epcs_flash_controller+0xfe02db70>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36b94:	e1bfff17 	ldw	r6,-4(fp)
   36b98:	e17fa517 	ldw	r5,-364(fp)
   36b9c:	e13fa517 	ldw	r4,-364(fp)
   36ba0:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 00 */
   36ba4:	e03fa415 	stw	zero,-368(fp)
   36ba8:	00000606 	br	36bc4 <secp256k1_scalar_inverse+0x6b4>
        secp256k1_scalar_sqr(t, t);
   36bac:	e17fa517 	ldw	r5,-364(fp)
   36bb0:	e13fa517 	ldw	r4,-364(fp)
   36bb4:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
   36bb8:	e0bfa417 	ldw	r2,-368(fp)
   36bbc:	10800044 	addi	r2,r2,1
   36bc0:	e0bfa415 	stw	r2,-368(fp)
   36bc4:	e0bfa417 	ldw	r2,-368(fp)
   36bc8:	108000d0 	cmplti	r2,r2,3
   36bcc:	103ff71e 	bne	r2,zero,36bac <__alt_mem_epcs_flash_controller+0xfe02dbac>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36bd0:	e1bfff17 	ldw	r6,-4(fp)
   36bd4:	e17fa517 	ldw	r5,-364(fp)
   36bd8:	e13fa517 	ldw	r4,-364(fp)
   36bdc:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 000 */
   36be0:	e03fa415 	stw	zero,-368(fp)
   36be4:	00000606 	br	36c00 <secp256k1_scalar_inverse+0x6f0>
        secp256k1_scalar_sqr(t, t);
   36be8:	e17fa517 	ldw	r5,-364(fp)
   36bec:	e13fa517 	ldw	r4,-364(fp)
   36bf0:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 000 */
   36bf4:	e0bfa417 	ldw	r2,-368(fp)
   36bf8:	10800044 	addi	r2,r2,1
   36bfc:	e0bfa415 	stw	r2,-368(fp)
   36c00:	e0bfa417 	ldw	r2,-368(fp)
   36c04:	10800110 	cmplti	r2,r2,4
   36c08:	103ff71e 	bne	r2,zero,36be8 <__alt_mem_epcs_flash_controller+0xfe02dbe8>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36c0c:	e1bfff17 	ldw	r6,-4(fp)
   36c10:	e17fa517 	ldw	r5,-364(fp)
   36c14:	e13fa517 	ldw	r4,-364(fp)
   36c18:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   36c1c:	e03fa415 	stw	zero,-368(fp)
   36c20:	00000606 	br	36c3c <secp256k1_scalar_inverse+0x72c>
        secp256k1_scalar_sqr(t, t);
   36c24:	e17fa517 	ldw	r5,-364(fp)
   36c28:	e13fa517 	ldw	r4,-364(fp)
   36c2c:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 4; i++) { /* 000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
   36c30:	e0bfa417 	ldw	r2,-368(fp)
   36c34:	10800044 	addi	r2,r2,1
   36c38:	e0bfa415 	stw	r2,-368(fp)
   36c3c:	e0bfa417 	ldw	r2,-368(fp)
   36c40:	10800090 	cmplti	r2,r2,2
   36c44:	103ff71e 	bne	r2,zero,36c24 <__alt_mem_epcs_flash_controller+0xfe02dc24>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36c48:	e1bfff17 	ldw	r6,-4(fp)
   36c4c:	e17fa517 	ldw	r5,-364(fp)
   36c50:	e13fa517 	ldw	r4,-364(fp)
   36c54:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 10; i++) { /* 0000000 */
   36c58:	e03fa415 	stw	zero,-368(fp)
   36c5c:	00000606 	br	36c78 <secp256k1_scalar_inverse+0x768>
        secp256k1_scalar_sqr(t, t);
   36c60:	e17fa517 	ldw	r5,-364(fp)
   36c64:	e13fa517 	ldw	r4,-364(fp)
   36c68:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 10; i++) { /* 0000000 */
   36c6c:	e0bfa417 	ldw	r2,-368(fp)
   36c70:	10800044 	addi	r2,r2,1
   36c74:	e0bfa415 	stw	r2,-368(fp)
   36c78:	e0bfa417 	ldw	r2,-368(fp)
   36c7c:	10800290 	cmplti	r2,r2,10
   36c80:	103ff71e 	bne	r2,zero,36c60 <__alt_mem_epcs_flash_controller+0xfe02dc60>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   36c84:	e0bfae04 	addi	r2,fp,-328
   36c88:	100d883a 	mov	r6,r2
   36c8c:	e17fa517 	ldw	r5,-364(fp)
   36c90:	e13fa517 	ldw	r4,-364(fp)
   36c94:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 0 */
   36c98:	e03fa415 	stw	zero,-368(fp)
   36c9c:	00000606 	br	36cb8 <secp256k1_scalar_inverse+0x7a8>
        secp256k1_scalar_sqr(t, t);
   36ca0:	e17fa517 	ldw	r5,-364(fp)
   36ca4:	e13fa517 	ldw	r4,-364(fp)
   36ca8:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 10; i++) { /* 0000000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 4; i++) { /* 0 */
   36cac:	e0bfa417 	ldw	r2,-368(fp)
   36cb0:	10800044 	addi	r2,r2,1
   36cb4:	e0bfa415 	stw	r2,-368(fp)
   36cb8:	e0bfa417 	ldw	r2,-368(fp)
   36cbc:	10800110 	cmplti	r2,r2,4
   36cc0:	103ff71e 	bne	r2,zero,36ca0 <__alt_mem_epcs_flash_controller+0xfe02dca0>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
   36cc4:	e0bfae04 	addi	r2,fp,-328
   36cc8:	100d883a 	mov	r6,r2
   36ccc:	e17fa517 	ldw	r5,-364(fp)
   36cd0:	e13fa517 	ldw	r4,-364(fp)
   36cd4:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 9; i++) { /* 0 */
   36cd8:	e03fa415 	stw	zero,-368(fp)
   36cdc:	00000606 	br	36cf8 <secp256k1_scalar_inverse+0x7e8>
        secp256k1_scalar_sqr(t, t);
   36ce0:	e17fa517 	ldw	r5,-364(fp)
   36ce4:	e13fa517 	ldw	r4,-364(fp)
   36ce8:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 4; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 9; i++) { /* 0 */
   36cec:	e0bfa417 	ldw	r2,-368(fp)
   36cf0:	10800044 	addi	r2,r2,1
   36cf4:	e0bfa415 	stw	r2,-368(fp)
   36cf8:	e0bfa417 	ldw	r2,-368(fp)
   36cfc:	10800250 	cmplti	r2,r2,9
   36d00:	103ff71e 	bne	r2,zero,36ce0 <__alt_mem_epcs_flash_controller+0xfe02dce0>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x8); /* 11111111 */
   36d04:	e0bfce04 	addi	r2,fp,-200
   36d08:	100d883a 	mov	r6,r2
   36d0c:	e17fa517 	ldw	r5,-364(fp)
   36d10:	e13fa517 	ldw	r4,-364(fp)
   36d14:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   36d18:	e03fa415 	stw	zero,-368(fp)
   36d1c:	00000606 	br	36d38 <secp256k1_scalar_inverse+0x828>
        secp256k1_scalar_sqr(t, t);
   36d20:	e17fa517 	ldw	r5,-364(fp)
   36d24:	e13fa517 	ldw	r4,-364(fp)
   36d28:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x3); /* 111 */
    for (i = 0; i < 9; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x8); /* 11111111 */
    for (i = 0; i < 2; i++) { /* 0 */
   36d2c:	e0bfa417 	ldw	r2,-368(fp)
   36d30:	10800044 	addi	r2,r2,1
   36d34:	e0bfa415 	stw	r2,-368(fp)
   36d38:	e0bfa417 	ldw	r2,-368(fp)
   36d3c:	10800090 	cmplti	r2,r2,2
   36d40:	103ff71e 	bne	r2,zero,36d20 <__alt_mem_epcs_flash_controller+0xfe02dd20>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36d44:	e1bfff17 	ldw	r6,-4(fp)
   36d48:	e17fa517 	ldw	r5,-364(fp)
   36d4c:	e13fa517 	ldw	r4,-364(fp)
   36d50:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 00 */
   36d54:	e03fa415 	stw	zero,-368(fp)
   36d58:	00000606 	br	36d74 <secp256k1_scalar_inverse+0x864>
        secp256k1_scalar_sqr(t, t);
   36d5c:	e17fa517 	ldw	r5,-364(fp)
   36d60:	e13fa517 	ldw	r4,-364(fp)
   36d64:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x8); /* 11111111 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
   36d68:	e0bfa417 	ldw	r2,-368(fp)
   36d6c:	10800044 	addi	r2,r2,1
   36d70:	e0bfa415 	stw	r2,-368(fp)
   36d74:	e0bfa417 	ldw	r2,-368(fp)
   36d78:	108000d0 	cmplti	r2,r2,3
   36d7c:	103ff71e 	bne	r2,zero,36d5c <__alt_mem_epcs_flash_controller+0xfe02dd5c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36d80:	e1bfff17 	ldw	r6,-4(fp)
   36d84:	e17fa517 	ldw	r5,-364(fp)
   36d88:	e13fa517 	ldw	r4,-364(fp)
   36d8c:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 00 */
   36d90:	e03fa415 	stw	zero,-368(fp)
   36d94:	00000606 	br	36db0 <secp256k1_scalar_inverse+0x8a0>
        secp256k1_scalar_sqr(t, t);
   36d98:	e17fa517 	ldw	r5,-364(fp)
   36d9c:	e13fa517 	ldw	r4,-364(fp)
   36da0:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
   36da4:	e0bfa417 	ldw	r2,-368(fp)
   36da8:	10800044 	addi	r2,r2,1
   36dac:	e0bfa415 	stw	r2,-368(fp)
   36db0:	e0bfa417 	ldw	r2,-368(fp)
   36db4:	108000d0 	cmplti	r2,r2,3
   36db8:	103ff71e 	bne	r2,zero,36d98 <__alt_mem_epcs_flash_controller+0xfe02dd98>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36dbc:	e1bfff17 	ldw	r6,-4(fp)
   36dc0:	e17fa517 	ldw	r5,-364(fp)
   36dc4:	e13fa517 	ldw	r4,-364(fp)
   36dc8:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 5; i++) { /* 0 */
   36dcc:	e03fa415 	stw	zero,-368(fp)
   36dd0:	00000606 	br	36dec <secp256k1_scalar_inverse+0x8dc>
        secp256k1_scalar_sqr(t, t);
   36dd4:	e17fa517 	ldw	r5,-364(fp)
   36dd8:	e13fa517 	ldw	r4,-364(fp)
   36ddc:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 3; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 0 */
   36de0:	e0bfa417 	ldw	r2,-368(fp)
   36de4:	10800044 	addi	r2,r2,1
   36de8:	e0bfa415 	stw	r2,-368(fp)
   36dec:	e0bfa417 	ldw	r2,-368(fp)
   36df0:	10800150 	cmplti	r2,r2,5
   36df4:	103ff71e 	bne	r2,zero,36dd4 <__alt_mem_epcs_flash_controller+0xfe02ddd4>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
   36df8:	e0bfb604 	addi	r2,fp,-296
   36dfc:	100d883a 	mov	r6,r2
   36e00:	e17fa517 	ldw	r5,-364(fp)
   36e04:	e13fa517 	ldw	r4,-364(fp)
   36e08:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   36e0c:	e03fa415 	stw	zero,-368(fp)
   36e10:	00000606 	br	36e2c <secp256k1_scalar_inverse+0x91c>
        secp256k1_scalar_sqr(t, t);
   36e14:	e17fa517 	ldw	r5,-364(fp)
   36e18:	e13fa517 	ldw	r4,-364(fp)
   36e1c:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
    for (i = 0; i < 2; i++) { /* 0 */
   36e20:	e0bfa417 	ldw	r2,-368(fp)
   36e24:	10800044 	addi	r2,r2,1
   36e28:	e0bfa415 	stw	r2,-368(fp)
   36e2c:	e0bfa417 	ldw	r2,-368(fp)
   36e30:	10800090 	cmplti	r2,r2,2
   36e34:	103ff71e 	bne	r2,zero,36e14 <__alt_mem_epcs_flash_controller+0xfe02de14>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36e38:	e1bfff17 	ldw	r6,-4(fp)
   36e3c:	e17fa517 	ldw	r5,-364(fp)
   36e40:	e13fa517 	ldw	r4,-364(fp)
   36e44:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 5; i++) { /* 000 */
   36e48:	e03fa415 	stw	zero,-368(fp)
   36e4c:	00000606 	br	36e68 <secp256k1_scalar_inverse+0x958>
        secp256k1_scalar_sqr(t, t);
   36e50:	e17fa517 	ldw	r5,-364(fp)
   36e54:	e13fa517 	ldw	r4,-364(fp)
   36e58:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x4); /* 1111 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 000 */
   36e5c:	e0bfa417 	ldw	r2,-368(fp)
   36e60:	10800044 	addi	r2,r2,1
   36e64:	e0bfa415 	stw	r2,-368(fp)
   36e68:	e0bfa417 	ldw	r2,-368(fp)
   36e6c:	10800150 	cmplti	r2,r2,5
   36e70:	103ff71e 	bne	r2,zero,36e50 <__alt_mem_epcs_flash_controller+0xfe02de50>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   36e74:	e0bfa604 	addi	r2,fp,-360
   36e78:	100d883a 	mov	r6,r2
   36e7c:	e17fa517 	ldw	r5,-364(fp)
   36e80:	e13fa517 	ldw	r4,-364(fp)
   36e84:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 4; i++) { /* 00 */
   36e88:	e03fa415 	stw	zero,-368(fp)
   36e8c:	00000606 	br	36ea8 <secp256k1_scalar_inverse+0x998>
        secp256k1_scalar_sqr(t, t);
   36e90:	e17fa517 	ldw	r5,-364(fp)
   36e94:	e13fa517 	ldw	r4,-364(fp)
   36e98:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 5; i++) { /* 000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 4; i++) { /* 00 */
   36e9c:	e0bfa417 	ldw	r2,-368(fp)
   36ea0:	10800044 	addi	r2,r2,1
   36ea4:	e0bfa415 	stw	r2,-368(fp)
   36ea8:	e0bfa417 	ldw	r2,-368(fp)
   36eac:	10800110 	cmplti	r2,r2,4
   36eb0:	103ff71e 	bne	r2,zero,36e90 <__alt_mem_epcs_flash_controller+0xfe02de90>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   36eb4:	e0bfa604 	addi	r2,fp,-360
   36eb8:	100d883a 	mov	r6,r2
   36ebc:	e17fa517 	ldw	r5,-364(fp)
   36ec0:	e13fa517 	ldw	r4,-364(fp)
   36ec4:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 2; i++) { /* 0 */
   36ec8:	e03fa415 	stw	zero,-368(fp)
   36ecc:	00000606 	br	36ee8 <secp256k1_scalar_inverse+0x9d8>
        secp256k1_scalar_sqr(t, t);
   36ed0:	e17fa517 	ldw	r5,-364(fp)
   36ed4:	e13fa517 	ldw	r4,-364(fp)
   36ed8:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 4; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 2; i++) { /* 0 */
   36edc:	e0bfa417 	ldw	r2,-368(fp)
   36ee0:	10800044 	addi	r2,r2,1
   36ee4:	e0bfa415 	stw	r2,-368(fp)
   36ee8:	e0bfa417 	ldw	r2,-368(fp)
   36eec:	10800090 	cmplti	r2,r2,2
   36ef0:	103ff71e 	bne	r2,zero,36ed0 <__alt_mem_epcs_flash_controller+0xfe02ded0>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36ef4:	e1bfff17 	ldw	r6,-4(fp)
   36ef8:	e17fa517 	ldw	r5,-364(fp)
   36efc:	e13fa517 	ldw	r4,-364(fp)
   36f00:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 8; i++) { /* 000000 */
   36f04:	e03fa415 	stw	zero,-368(fp)
   36f08:	00000606 	br	36f24 <secp256k1_scalar_inverse+0xa14>
        secp256k1_scalar_sqr(t, t);
   36f0c:	e17fa517 	ldw	r5,-364(fp)
   36f10:	e13fa517 	ldw	r4,-364(fp)
   36f14:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 2; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 8; i++) { /* 000000 */
   36f18:	e0bfa417 	ldw	r2,-368(fp)
   36f1c:	10800044 	addi	r2,r2,1
   36f20:	e0bfa415 	stw	r2,-368(fp)
   36f24:	e0bfa417 	ldw	r2,-368(fp)
   36f28:	10800210 	cmplti	r2,r2,8
   36f2c:	103ff71e 	bne	r2,zero,36f0c <__alt_mem_epcs_flash_controller+0xfe02df0c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   36f30:	e0bfa604 	addi	r2,fp,-360
   36f34:	100d883a 	mov	r6,r2
   36f38:	e17fa517 	ldw	r5,-364(fp)
   36f3c:	e13fa517 	ldw	r4,-364(fp)
   36f40:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 0 */
   36f44:	e03fa415 	stw	zero,-368(fp)
   36f48:	00000606 	br	36f64 <secp256k1_scalar_inverse+0xa54>
        secp256k1_scalar_sqr(t, t);
   36f4c:	e17fa517 	ldw	r5,-364(fp)
   36f50:	e13fa517 	ldw	r4,-364(fp)
   36f54:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 8; i++) { /* 000000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 3; i++) { /* 0 */
   36f58:	e0bfa417 	ldw	r2,-368(fp)
   36f5c:	10800044 	addi	r2,r2,1
   36f60:	e0bfa415 	stw	r2,-368(fp)
   36f64:	e0bfa417 	ldw	r2,-368(fp)
   36f68:	108000d0 	cmplti	r2,r2,3
   36f6c:	103ff71e 	bne	r2,zero,36f4c <__alt_mem_epcs_flash_controller+0xfe02df4c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
   36f70:	e0bfa604 	addi	r2,fp,-360
   36f74:	100d883a 	mov	r6,r2
   36f78:	e17fa517 	ldw	r5,-364(fp)
   36f7c:	e13fa517 	ldw	r4,-364(fp)
   36f80:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 3; i++) { /* 00 */
   36f84:	e03fa415 	stw	zero,-368(fp)
   36f88:	00000606 	br	36fa4 <secp256k1_scalar_inverse+0xa94>
        secp256k1_scalar_sqr(t, t);
   36f8c:	e17fa517 	ldw	r5,-364(fp)
   36f90:	e13fa517 	ldw	r4,-364(fp)
   36f94:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 3; i++) { /* 0 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 3; i++) { /* 00 */
   36f98:	e0bfa417 	ldw	r2,-368(fp)
   36f9c:	10800044 	addi	r2,r2,1
   36fa0:	e0bfa415 	stw	r2,-368(fp)
   36fa4:	e0bfa417 	ldw	r2,-368(fp)
   36fa8:	108000d0 	cmplti	r2,r2,3
   36fac:	103ff71e 	bne	r2,zero,36f8c <__alt_mem_epcs_flash_controller+0xfe02df8c>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36fb0:	e1bfff17 	ldw	r6,-4(fp)
   36fb4:	e17fa517 	ldw	r5,-364(fp)
   36fb8:	e13fa517 	ldw	r4,-364(fp)
   36fbc:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 6; i++) { /* 00000 */
   36fc0:	e03fa415 	stw	zero,-368(fp)
   36fc4:	00000606 	br	36fe0 <secp256k1_scalar_inverse+0xad0>
        secp256k1_scalar_sqr(t, t);
   36fc8:	e17fa517 	ldw	r5,-364(fp)
   36fcc:	e13fa517 	ldw	r4,-364(fp)
   36fd0:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, &x2); /* 11 */
    for (i = 0; i < 3; i++) { /* 00 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 6; i++) { /* 00000 */
   36fd4:	e0bfa417 	ldw	r2,-368(fp)
   36fd8:	10800044 	addi	r2,r2,1
   36fdc:	e0bfa415 	stw	r2,-368(fp)
   36fe0:	e0bfa417 	ldw	r2,-368(fp)
   36fe4:	10800190 	cmplti	r2,r2,6
   36fe8:	103ff71e 	bne	r2,zero,36fc8 <__alt_mem_epcs_flash_controller+0xfe02dfc8>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
   36fec:	e1bfff17 	ldw	r6,-4(fp)
   36ff0:	e17fa517 	ldw	r5,-364(fp)
   36ff4:	e13fa517 	ldw	r4,-364(fp)
   36ff8:	003621c0 	call	3621c <secp256k1_scalar_mul>
    for (i = 0; i < 8; i++) { /* 00 */
   36ffc:	e03fa415 	stw	zero,-368(fp)
   37000:	00000606 	br	3701c <secp256k1_scalar_inverse+0xb0c>
        secp256k1_scalar_sqr(t, t);
   37004:	e17fa517 	ldw	r5,-364(fp)
   37008:	e13fa517 	ldw	r4,-364(fp)
   3700c:	00364c80 	call	364c8 <secp256k1_scalar_sqr>
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 6; i++) { /* 00000 */
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(t, t, x); /* 1 */
    for (i = 0; i < 8; i++) { /* 00 */
   37010:	e0bfa417 	ldw	r2,-368(fp)
   37014:	10800044 	addi	r2,r2,1
   37018:	e0bfa415 	stw	r2,-368(fp)
   3701c:	e0bfa417 	ldw	r2,-368(fp)
   37020:	10800210 	cmplti	r2,r2,8
   37024:	103ff71e 	bne	r2,zero,37004 <__alt_mem_epcs_flash_controller+0xfe02e004>
        secp256k1_scalar_sqr(t, t);
    }
    secp256k1_scalar_mul(r, t, &x6); /* 111111 */
   37028:	e0bfbe04 	addi	r2,fp,-264
   3702c:	100d883a 	mov	r6,r2
   37030:	e17fa517 	ldw	r5,-364(fp)
   37034:	e13ffe17 	ldw	r4,-8(fp)
   37038:	003621c0 	call	3621c <secp256k1_scalar_mul>
}
   3703c:	0001883a 	nop
   37040:	e037883a 	mov	sp,fp
   37044:	dfc00117 	ldw	ra,4(sp)
   37048:	df000017 	ldw	fp,0(sp)
   3704c:	dec00204 	addi	sp,sp,8
   37050:	f800283a 	ret

00037054 <secp256k1_scalar_inverse_var>:
SECP256K1_INLINE static int secp256k1_scalar_is_even(const secp256k1_scalar *a) {
    /* d[0] is present and is the lowest word for all representations */
    return !(a->d[0] & 1);
}

static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_scalar *x) {
   37054:	defffc04 	addi	sp,sp,-16
   37058:	dfc00315 	stw	ra,12(sp)
   3705c:	df000215 	stw	fp,8(sp)
   37060:	df000204 	addi	fp,sp,8
   37064:	e13ffe15 	stw	r4,-8(fp)
   37068:	e17fff15 	stw	r5,-4(fp)
#if defined(USE_SCALAR_INV_BUILTIN)
    secp256k1_scalar_inverse(r, x);
   3706c:	e17fff17 	ldw	r5,-4(fp)
   37070:	e13ffe17 	ldw	r4,-8(fp)
   37074:	00365100 	call	36510 <secp256k1_scalar_inverse>
    secp256k1_scalar_mul(&t, &t, r);
    CHECK(secp256k1_scalar_is_one(&t));
#else
#error "Please select scalar inverse implementation"
#endif
}
   37078:	0001883a 	nop
   3707c:	e037883a 	mov	sp,fp
   37080:	dfc00117 	ldw	ra,4(sp)
   37084:	df000017 	ldw	fp,0(sp)
   37088:	dec00204 	addi	sp,sp,8
   3708c:	f800283a 	ret

00037090 <secp256k1_ecmult_odd_multiples_table>:
/** Fill a table 'prej' with precomputed odd multiples of a. Prej will contain
 *  the values [1*a,3*a,...,(2*n-1)*a], so it space for n values. zr[0] will
 *  contain prej[0].z / a.z. The other zr[i] values = prej[i].z / prej[i-1].z.
 *  Prej's Z values are undefined, except for the last value.
 */
static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a) {
   37090:	deff9f04 	addi	sp,sp,-388
   37094:	dfc06015 	stw	ra,384(sp)
   37098:	df005f15 	stw	fp,380(sp)
   3709c:	dc405e15 	stw	r17,376(sp)
   370a0:	dc005d15 	stw	r16,372(sp)
   370a4:	df005f04 	addi	fp,sp,380
   370a8:	e13ffa15 	stw	r4,-24(fp)
   370ac:	e17ffb15 	stw	r5,-20(fp)
   370b0:	e1bffc15 	stw	r6,-16(fp)
   370b4:	e1fffd15 	stw	r7,-12(fp)
    secp256k1_gej d;
    secp256k1_ge a_ge, d_ge;
    int i;

    VERIFY_CHECK(!a->infinity);
   370b8:	e0bffd17 	ldw	r2,-12(fp)
   370bc:	10802417 	ldw	r2,144(r2)
   370c0:	1004c03a 	cmpne	r2,r2,zero
   370c4:	10803fcc 	andi	r2,r2,255
   370c8:	10000d26 	beq	r2,zero,37100 <secp256k1_ecmult_odd_multiples_table+0x70>
   370cc:	d0a01617 	ldw	r2,-32680(gp)
   370d0:	10c00317 	ldw	r3,12(r2)
   370d4:	00800174 	movhi	r2,5
   370d8:	1095fe04 	addi	r2,r2,22520
   370dc:	d8800015 	stw	r2,0(sp)
   370e0:	01c00a84 	movi	r7,42
   370e4:	01800174 	movhi	r6,5
   370e8:	31976304 	addi	r6,r6,23948
   370ec:	01400174 	movhi	r5,5
   370f0:	2951e804 	addi	r5,r5,18336
   370f4:	1809883a 	mov	r4,r3
   370f8:	00461000 	call	46100 <fprintf>
   370fc:	0045fd40 	call	45fd4 <abort>

    secp256k1_gej_double_var(&d, a, NULL);
   37100:	e0bfa304 	addi	r2,fp,-372
   37104:	000d883a 	mov	r6,zero
   37108:	e17ffd17 	ldw	r5,-12(fp)
   3710c:	1009883a 	mov	r4,r2
   37110:	00231500 	call	23150 <secp256k1_gej_double_var>

    /*
     * Perform the additions on an isomorphism where 'd' is affine: drop the z coordinate
     * of 'd', and scale the 1P starting value's x/y coordinates without changing its z.
     */
    d_ge.x = d.x;
   37114:	e0bfa317 	ldw	r2,-372(fp)
   37118:	e0bfe115 	stw	r2,-124(fp)
   3711c:	e0bfa417 	ldw	r2,-368(fp)
   37120:	e0bfe215 	stw	r2,-120(fp)
   37124:	e0bfa517 	ldw	r2,-364(fp)
   37128:	e0bfe315 	stw	r2,-116(fp)
   3712c:	e0bfa617 	ldw	r2,-360(fp)
   37130:	e0bfe415 	stw	r2,-112(fp)
   37134:	e0bfa717 	ldw	r2,-356(fp)
   37138:	e0bfe515 	stw	r2,-108(fp)
   3713c:	e0bfa817 	ldw	r2,-352(fp)
   37140:	e0bfe615 	stw	r2,-104(fp)
   37144:	e0bfa917 	ldw	r2,-348(fp)
   37148:	e0bfe715 	stw	r2,-100(fp)
   3714c:	e0bfaa17 	ldw	r2,-344(fp)
   37150:	e0bfe815 	stw	r2,-96(fp)
   37154:	e0bfab17 	ldw	r2,-340(fp)
   37158:	e0bfe915 	stw	r2,-92(fp)
   3715c:	e0bfac17 	ldw	r2,-336(fp)
   37160:	e0bfea15 	stw	r2,-88(fp)
   37164:	e0bfad17 	ldw	r2,-332(fp)
   37168:	e0bfeb15 	stw	r2,-84(fp)
   3716c:	e0bfae17 	ldw	r2,-328(fp)
   37170:	e0bfec15 	stw	r2,-80(fp)
    d_ge.y = d.y;
   37174:	e0bfaf17 	ldw	r2,-324(fp)
   37178:	e0bfed15 	stw	r2,-76(fp)
   3717c:	e0bfb017 	ldw	r2,-320(fp)
   37180:	e0bfee15 	stw	r2,-72(fp)
   37184:	e0bfb117 	ldw	r2,-316(fp)
   37188:	e0bfef15 	stw	r2,-68(fp)
   3718c:	e0bfb217 	ldw	r2,-312(fp)
   37190:	e0bff015 	stw	r2,-64(fp)
   37194:	e0bfb317 	ldw	r2,-308(fp)
   37198:	e0bff115 	stw	r2,-60(fp)
   3719c:	e0bfb417 	ldw	r2,-304(fp)
   371a0:	e0bff215 	stw	r2,-56(fp)
   371a4:	e0bfb517 	ldw	r2,-300(fp)
   371a8:	e0bff315 	stw	r2,-52(fp)
   371ac:	e0bfb617 	ldw	r2,-296(fp)
   371b0:	e0bff415 	stw	r2,-48(fp)
   371b4:	e0bfb717 	ldw	r2,-292(fp)
   371b8:	e0bff515 	stw	r2,-44(fp)
   371bc:	e0bfb817 	ldw	r2,-288(fp)
   371c0:	e0bff615 	stw	r2,-40(fp)
   371c4:	e0bfb917 	ldw	r2,-284(fp)
   371c8:	e0bff715 	stw	r2,-36(fp)
   371cc:	e0bfba17 	ldw	r2,-280(fp)
   371d0:	e0bff815 	stw	r2,-32(fp)
    d_ge.infinity = 0;
   371d4:	e03ff915 	stw	zero,-28(fp)

    secp256k1_ge_set_gej_zinv(&a_ge, a, &d.z);
   371d8:	e0bfa304 	addi	r2,fp,-372
   371dc:	10c01804 	addi	r3,r2,96
   371e0:	e0bfc804 	addi	r2,fp,-224
   371e4:	180d883a 	mov	r6,r3
   371e8:	e17ffd17 	ldw	r5,-12(fp)
   371ec:	1009883a 	mov	r4,r2
   371f0:	0021c480 	call	21c48 <secp256k1_ge_set_gej_zinv>
    prej[0].x = a_ge.x;
   371f4:	e0bffb17 	ldw	r2,-20(fp)
   371f8:	e0ffc817 	ldw	r3,-224(fp)
   371fc:	10c00015 	stw	r3,0(r2)
   37200:	e0ffc917 	ldw	r3,-220(fp)
   37204:	10c00115 	stw	r3,4(r2)
   37208:	e0ffca17 	ldw	r3,-216(fp)
   3720c:	10c00215 	stw	r3,8(r2)
   37210:	e0ffcb17 	ldw	r3,-212(fp)
   37214:	10c00315 	stw	r3,12(r2)
   37218:	e0ffcc17 	ldw	r3,-208(fp)
   3721c:	10c00415 	stw	r3,16(r2)
   37220:	e0ffcd17 	ldw	r3,-204(fp)
   37224:	10c00515 	stw	r3,20(r2)
   37228:	e0ffce17 	ldw	r3,-200(fp)
   3722c:	10c00615 	stw	r3,24(r2)
   37230:	e0ffcf17 	ldw	r3,-196(fp)
   37234:	10c00715 	stw	r3,28(r2)
   37238:	e0ffd017 	ldw	r3,-192(fp)
   3723c:	10c00815 	stw	r3,32(r2)
   37240:	e0ffd117 	ldw	r3,-188(fp)
   37244:	10c00915 	stw	r3,36(r2)
   37248:	e0ffd217 	ldw	r3,-184(fp)
   3724c:	10c00a15 	stw	r3,40(r2)
   37250:	e0ffd317 	ldw	r3,-180(fp)
   37254:	10c00b15 	stw	r3,44(r2)
    prej[0].y = a_ge.y;
   37258:	e0bffb17 	ldw	r2,-20(fp)
   3725c:	e0ffd417 	ldw	r3,-176(fp)
   37260:	10c00c15 	stw	r3,48(r2)
   37264:	e0ffd517 	ldw	r3,-172(fp)
   37268:	10c00d15 	stw	r3,52(r2)
   3726c:	e0ffd617 	ldw	r3,-168(fp)
   37270:	10c00e15 	stw	r3,56(r2)
   37274:	e0ffd717 	ldw	r3,-164(fp)
   37278:	10c00f15 	stw	r3,60(r2)
   3727c:	e0ffd817 	ldw	r3,-160(fp)
   37280:	10c01015 	stw	r3,64(r2)
   37284:	e0ffd917 	ldw	r3,-156(fp)
   37288:	10c01115 	stw	r3,68(r2)
   3728c:	e0ffda17 	ldw	r3,-152(fp)
   37290:	10c01215 	stw	r3,72(r2)
   37294:	e0ffdb17 	ldw	r3,-148(fp)
   37298:	10c01315 	stw	r3,76(r2)
   3729c:	e0ffdc17 	ldw	r3,-144(fp)
   372a0:	10c01415 	stw	r3,80(r2)
   372a4:	e0ffdd17 	ldw	r3,-140(fp)
   372a8:	10c01515 	stw	r3,84(r2)
   372ac:	e0ffde17 	ldw	r3,-136(fp)
   372b0:	10c01615 	stw	r3,88(r2)
   372b4:	e0ffdf17 	ldw	r3,-132(fp)
   372b8:	10c01715 	stw	r3,92(r2)
    prej[0].z = a->z;
   372bc:	e0bffb17 	ldw	r2,-20(fp)
   372c0:	e0fffd17 	ldw	r3,-12(fp)
   372c4:	19001817 	ldw	r4,96(r3)
   372c8:	11001815 	stw	r4,96(r2)
   372cc:	19001917 	ldw	r4,100(r3)
   372d0:	11001915 	stw	r4,100(r2)
   372d4:	19001a17 	ldw	r4,104(r3)
   372d8:	11001a15 	stw	r4,104(r2)
   372dc:	19001b17 	ldw	r4,108(r3)
   372e0:	11001b15 	stw	r4,108(r2)
   372e4:	19001c17 	ldw	r4,112(r3)
   372e8:	11001c15 	stw	r4,112(r2)
   372ec:	19001d17 	ldw	r4,116(r3)
   372f0:	11001d15 	stw	r4,116(r2)
   372f4:	19001e17 	ldw	r4,120(r3)
   372f8:	11001e15 	stw	r4,120(r2)
   372fc:	19001f17 	ldw	r4,124(r3)
   37300:	11001f15 	stw	r4,124(r2)
   37304:	19002017 	ldw	r4,128(r3)
   37308:	11002015 	stw	r4,128(r2)
   3730c:	19002117 	ldw	r4,132(r3)
   37310:	11002115 	stw	r4,132(r2)
   37314:	19002217 	ldw	r4,136(r3)
   37318:	11002215 	stw	r4,136(r2)
   3731c:	18c02317 	ldw	r3,140(r3)
   37320:	10c02315 	stw	r3,140(r2)
    prej[0].infinity = 0;
   37324:	e0bffb17 	ldw	r2,-20(fp)
   37328:	10002415 	stw	zero,144(r2)

    zr[0] = d.z;
   3732c:	e0bffc17 	ldw	r2,-16(fp)
   37330:	e0ffbb17 	ldw	r3,-276(fp)
   37334:	10c00015 	stw	r3,0(r2)
   37338:	e0ffbc17 	ldw	r3,-272(fp)
   3733c:	10c00115 	stw	r3,4(r2)
   37340:	e0ffbd17 	ldw	r3,-268(fp)
   37344:	10c00215 	stw	r3,8(r2)
   37348:	e0ffbe17 	ldw	r3,-264(fp)
   3734c:	10c00315 	stw	r3,12(r2)
   37350:	e0ffbf17 	ldw	r3,-260(fp)
   37354:	10c00415 	stw	r3,16(r2)
   37358:	e0ffc017 	ldw	r3,-256(fp)
   3735c:	10c00515 	stw	r3,20(r2)
   37360:	e0ffc117 	ldw	r3,-252(fp)
   37364:	10c00615 	stw	r3,24(r2)
   37368:	e0ffc217 	ldw	r3,-248(fp)
   3736c:	10c00715 	stw	r3,28(r2)
   37370:	e0ffc317 	ldw	r3,-244(fp)
   37374:	10c00815 	stw	r3,32(r2)
   37378:	e0ffc417 	ldw	r3,-240(fp)
   3737c:	10c00915 	stw	r3,36(r2)
   37380:	e0ffc517 	ldw	r3,-236(fp)
   37384:	10c00a15 	stw	r3,40(r2)
   37388:	e0ffc617 	ldw	r3,-232(fp)
   3738c:	10c00b15 	stw	r3,44(r2)
    for (i = 1; i < n; i++) {
   37390:	00800044 	movi	r2,1
   37394:	e0bfa215 	stw	r2,-376(fp)
   37398:	00001e06 	br	37414 <secp256k1_ecmult_odd_multiples_table+0x384>
        secp256k1_gej_add_ge_var(&prej[i], &prej[i-1], &d_ge, &zr[i]);
   3739c:	e0bfa217 	ldw	r2,-376(fp)
   373a0:	01402504 	movi	r5,148
   373a4:	1009883a 	mov	r4,r2
   373a8:	0043af40 	call	43af4 <__mulsi3>
   373ac:	1007883a 	mov	r3,r2
   373b0:	e0bffb17 	ldw	r2,-20(fp)
   373b4:	10e1883a 	add	r16,r2,r3
   373b8:	e0bfa217 	ldw	r2,-376(fp)
   373bc:	01402504 	movi	r5,148
   373c0:	1009883a 	mov	r4,r2
   373c4:	0043af40 	call	43af4 <__mulsi3>
   373c8:	10bfdb04 	addi	r2,r2,-148
   373cc:	e0fffb17 	ldw	r3,-20(fp)
   373d0:	18a3883a 	add	r17,r3,r2
   373d4:	e0bfa217 	ldw	r2,-376(fp)
   373d8:	01400c04 	movi	r5,48
   373dc:	1009883a 	mov	r4,r2
   373e0:	0043af40 	call	43af4 <__mulsi3>
   373e4:	1007883a 	mov	r3,r2
   373e8:	e0bffc17 	ldw	r2,-16(fp)
   373ec:	10c7883a 	add	r3,r2,r3
   373f0:	e0bfe104 	addi	r2,fp,-124
   373f4:	180f883a 	mov	r7,r3
   373f8:	100d883a 	mov	r6,r2
   373fc:	880b883a 	mov	r5,r17
   37400:	8009883a 	mov	r4,r16
   37404:	00239ac0 	call	239ac <secp256k1_gej_add_ge_var>
    prej[0].y = a_ge.y;
    prej[0].z = a->z;
    prej[0].infinity = 0;

    zr[0] = d.z;
    for (i = 1; i < n; i++) {
   37408:	e0bfa217 	ldw	r2,-376(fp)
   3740c:	10800044 	addi	r2,r2,1
   37410:	e0bfa215 	stw	r2,-376(fp)
   37414:	e0ffa217 	ldw	r3,-376(fp)
   37418:	e0bffa17 	ldw	r2,-24(fp)
   3741c:	18bfdf16 	blt	r3,r2,3739c <__alt_mem_epcs_flash_controller+0xfe02e39c>

    /*
     * Each point in 'prej' has a z coordinate too small by a factor of 'd.z'. Only
     * the final point's z coordinate is actually used though, so just update that.
     */
    secp256k1_fe_mul(&prej[n-1].z, &prej[n-1].z, &d.z);
   37420:	e0bffa17 	ldw	r2,-24(fp)
   37424:	01402504 	movi	r5,148
   37428:	1009883a 	mov	r4,r2
   3742c:	0043af40 	call	43af4 <__mulsi3>
   37430:	10bfdb04 	addi	r2,r2,-148
   37434:	e0fffb17 	ldw	r3,-20(fp)
   37438:	1885883a 	add	r2,r3,r2
   3743c:	14001804 	addi	r16,r2,96
   37440:	e0bffa17 	ldw	r2,-24(fp)
   37444:	01402504 	movi	r5,148
   37448:	1009883a 	mov	r4,r2
   3744c:	0043af40 	call	43af4 <__mulsi3>
   37450:	10bfdb04 	addi	r2,r2,-148
   37454:	e0fffb17 	ldw	r3,-20(fp)
   37458:	1885883a 	add	r2,r3,r2
   3745c:	10c01804 	addi	r3,r2,96
   37460:	e0bfa304 	addi	r2,fp,-372
   37464:	10801804 	addi	r2,r2,96
   37468:	100d883a 	mov	r6,r2
   3746c:	180b883a 	mov	r5,r3
   37470:	8009883a 	mov	r4,r16
   37474:	001feb40 	call	1feb4 <secp256k1_fe_mul>
}
   37478:	0001883a 	nop
   3747c:	e6fffe04 	addi	sp,fp,-8
   37480:	dfc00317 	ldw	ra,12(sp)
   37484:	df000217 	ldw	fp,8(sp)
   37488:	dc400117 	ldw	r17,4(sp)
   3748c:	dc000017 	ldw	r16,0(sp)
   37490:	dec00404 	addi	sp,sp,16
   37494:	f800283a 	ret

00037498 <secp256k1_ecmult_odd_multiples_table_globalz_windowa>:
 *
 *  To compute a*P + b*G, we compute a table for P using the first function,
 *  and for G using the second (which requires an inverse, but it only needs to
 *  happen once).
 */
static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {
   37498:	defe7204 	addi	sp,sp,-1592
   3749c:	dfc18d15 	stw	ra,1588(sp)
   374a0:	df018c15 	stw	fp,1584(sp)
   374a4:	df018c04 	addi	fp,sp,1584
   374a8:	e13ffd15 	stw	r4,-12(fp)
   374ac:	e17ffe15 	stw	r5,-8(fp)
   374b0:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_gej prej[ECMULT_TABLE_SIZE(WINDOW_A)];
    secp256k1_fe zr[ECMULT_TABLE_SIZE(WINDOW_A)];

    /* Compute the odd multiples in Jacobian form. */
    secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), prej, zr, a);
   374b4:	e0bf9d04 	addi	r2,fp,-396
   374b8:	e1ffff17 	ldw	r7,-4(fp)
   374bc:	100d883a 	mov	r6,r2
   374c0:	e17e7504 	addi	r5,fp,-1580
   374c4:	01000204 	movi	r4,8
   374c8:	00370900 	call	37090 <secp256k1_ecmult_odd_multiples_table>
    /* Bring them to the same Z denominator. */
    secp256k1_ge_globalz_set_table_gej(ECMULT_TABLE_SIZE(WINDOW_A), pre, globalz, prej, zr);
   374cc:	e0bf9d04 	addi	r2,fp,-396
   374d0:	d8800015 	stw	r2,0(sp)
   374d4:	e1fe7504 	addi	r7,fp,-1580
   374d8:	e1bffe17 	ldw	r6,-8(fp)
   374dc:	e17ffd17 	ldw	r5,-12(fp)
   374e0:	01000204 	movi	r4,8
   374e4:	00225ac0 	call	225ac <secp256k1_ge_globalz_set_table_gej>
}
   374e8:	0001883a 	nop
   374ec:	e037883a 	mov	sp,fp
   374f0:	dfc00117 	ldw	ra,4(sp)
   374f4:	df000017 	ldw	fp,0(sp)
   374f8:	dec00204 	addi	sp,sp,8
   374fc:	f800283a 	ret

00037500 <secp256k1_ecmult_odd_multiples_table_storage_var>:

static void secp256k1_ecmult_odd_multiples_table_storage_var(int n, secp256k1_ge_storage *pre, const secp256k1_gej *a, const secp256k1_callback *cb) {
   37500:	defff504 	addi	sp,sp,-44
   37504:	dfc00a15 	stw	ra,40(sp)
   37508:	df000915 	stw	fp,36(sp)
   3750c:	dc000815 	stw	r16,32(sp)
   37510:	df000904 	addi	fp,sp,36
   37514:	e13ffb15 	stw	r4,-20(fp)
   37518:	e17ffc15 	stw	r5,-16(fp)
   3751c:	e1bffd15 	stw	r6,-12(fp)
   37520:	e1fffe15 	stw	r7,-8(fp)
    secp256k1_gej *prej = (secp256k1_gej*)checked_malloc(cb, sizeof(secp256k1_gej) * n);
   37524:	e0bffb17 	ldw	r2,-20(fp)
   37528:	01402504 	movi	r5,148
   3752c:	1009883a 	mov	r4,r2
   37530:	0043af40 	call	43af4 <__mulsi3>
   37534:	100b883a 	mov	r5,r2
   37538:	e13ffe17 	ldw	r4,-8(fp)
   3753c:	000de6c0 	call	de6c <checked_malloc>
   37540:	e0bff815 	stw	r2,-32(fp)
    secp256k1_ge *prea = (secp256k1_ge*)checked_malloc(cb, sizeof(secp256k1_ge) * n);
   37544:	e0bffb17 	ldw	r2,-20(fp)
   37548:	01401904 	movi	r5,100
   3754c:	1009883a 	mov	r4,r2
   37550:	0043af40 	call	43af4 <__mulsi3>
   37554:	100b883a 	mov	r5,r2
   37558:	e13ffe17 	ldw	r4,-8(fp)
   3755c:	000de6c0 	call	de6c <checked_malloc>
   37560:	e0bff915 	stw	r2,-28(fp)
    secp256k1_fe *zr = (secp256k1_fe*)checked_malloc(cb, sizeof(secp256k1_fe) * n);
   37564:	e0bffb17 	ldw	r2,-20(fp)
   37568:	01400c04 	movi	r5,48
   3756c:	1009883a 	mov	r4,r2
   37570:	0043af40 	call	43af4 <__mulsi3>
   37574:	100b883a 	mov	r5,r2
   37578:	e13ffe17 	ldw	r4,-8(fp)
   3757c:	000de6c0 	call	de6c <checked_malloc>
   37580:	e0bffa15 	stw	r2,-24(fp)
    int i;

    /* Compute the odd multiples in Jacobian form. */
    secp256k1_ecmult_odd_multiples_table(n, prej, zr, a);
   37584:	e1fffd17 	ldw	r7,-12(fp)
   37588:	e1bffa17 	ldw	r6,-24(fp)
   3758c:	e17ff817 	ldw	r5,-32(fp)
   37590:	e13ffb17 	ldw	r4,-20(fp)
   37594:	00370900 	call	37090 <secp256k1_ecmult_odd_multiples_table>
    /* Convert them in batch to affine coordinates. */
    secp256k1_ge_set_table_gej_var(n, prea, prej, zr);
   37598:	e0bffb17 	ldw	r2,-20(fp)
   3759c:	e1fffa17 	ldw	r7,-24(fp)
   375a0:	e1bff817 	ldw	r6,-32(fp)
   375a4:	e17ff917 	ldw	r5,-28(fp)
   375a8:	1009883a 	mov	r4,r2
   375ac:	002245c0 	call	2245c <secp256k1_ge_set_table_gej_var>
    /* Convert them to compact storage form. */
    for (i = 0; i < n; i++) {
   375b0:	e03ff715 	stw	zero,-36(fp)
   375b4:	00001106 	br	375fc <secp256k1_ecmult_odd_multiples_table_storage_var+0xfc>
        secp256k1_ge_to_storage(&pre[i], &prea[i]);
   375b8:	e0bff717 	ldw	r2,-36(fp)
   375bc:	100491ba 	slli	r2,r2,6
   375c0:	e0fffc17 	ldw	r3,-16(fp)
   375c4:	18a1883a 	add	r16,r3,r2
   375c8:	e0bff717 	ldw	r2,-36(fp)
   375cc:	01401904 	movi	r5,100
   375d0:	1009883a 	mov	r4,r2
   375d4:	0043af40 	call	43af4 <__mulsi3>
   375d8:	1007883a 	mov	r3,r2
   375dc:	e0bff917 	ldw	r2,-28(fp)
   375e0:	10c5883a 	add	r2,r2,r3
   375e4:	100b883a 	mov	r5,r2
   375e8:	8009883a 	mov	r4,r16
   375ec:	0024c080 	call	24c08 <secp256k1_ge_to_storage>
    /* Compute the odd multiples in Jacobian form. */
    secp256k1_ecmult_odd_multiples_table(n, prej, zr, a);
    /* Convert them in batch to affine coordinates. */
    secp256k1_ge_set_table_gej_var(n, prea, prej, zr);
    /* Convert them to compact storage form. */
    for (i = 0; i < n; i++) {
   375f0:	e0bff717 	ldw	r2,-36(fp)
   375f4:	10800044 	addi	r2,r2,1
   375f8:	e0bff715 	stw	r2,-36(fp)
   375fc:	e0fff717 	ldw	r3,-36(fp)
   37600:	e0bffb17 	ldw	r2,-20(fp)
   37604:	18bfec16 	blt	r3,r2,375b8 <__alt_mem_epcs_flash_controller+0xfe02e5b8>
        secp256k1_ge_to_storage(&pre[i], &prea[i]);
    }

    free(prea);
   37608:	e13ff917 	ldw	r4,-28(fp)
   3760c:	00463540 	call	46354 <free>
    free(prej);
   37610:	e13ff817 	ldw	r4,-32(fp)
   37614:	00463540 	call	46354 <free>
    free(zr);
   37618:	e13ffa17 	ldw	r4,-24(fp)
   3761c:	00463540 	call	46354 <free>
}
   37620:	0001883a 	nop
   37624:	e6ffff04 	addi	sp,fp,-4
   37628:	dfc00217 	ldw	ra,8(sp)
   3762c:	df000117 	ldw	fp,4(sp)
   37630:	dc000017 	ldw	r16,0(sp)
   37634:	dec00304 	addi	sp,sp,12
   37638:	f800283a 	ret

0003763c <secp256k1_ecmult_context_init>:
        secp256k1_ge_from_storage((r), &(pre)[(-(n)-1)/2]); \
        secp256k1_ge_neg((r), (r)); \
    } \
} while(0)

static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx) {
   3763c:	defffe04 	addi	sp,sp,-8
   37640:	df000115 	stw	fp,4(sp)
   37644:	df000104 	addi	fp,sp,4
   37648:	e13fff15 	stw	r4,-4(fp)
    ctx->pre_g = NULL;
   3764c:	e0bfff17 	ldw	r2,-4(fp)
   37650:	10000015 	stw	zero,0(r2)
#ifdef USE_ENDOMORPHISM
    ctx->pre_g_128 = NULL;
#endif
}
   37654:	0001883a 	nop
   37658:	e037883a 	mov	sp,fp
   3765c:	df000017 	ldw	fp,0(sp)
   37660:	dec00104 	addi	sp,sp,4
   37664:	f800283a 	ret

00037668 <secp256k1_ecmult_context_build>:

static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {
   37668:	deffd704 	addi	sp,sp,-164
   3766c:	dfc02815 	stw	ra,160(sp)
   37670:	df002715 	stw	fp,156(sp)
   37674:	df002704 	addi	fp,sp,156
   37678:	e13ffe15 	stw	r4,-8(fp)
   3767c:	e17fff15 	stw	r5,-4(fp)
    secp256k1_gej gj;

    if (ctx->pre_g != NULL) {
   37680:	e0bffe17 	ldw	r2,-8(fp)
   37684:	10800017 	ldw	r2,0(r2)
   37688:	1000121e 	bne	r2,zero,376d4 <secp256k1_ecmult_context_build+0x6c>
        return;
    }

    /* get the generator */
    secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);
   3768c:	01400174 	movhi	r5,5
   37690:	2955dc04 	addi	r5,r5,22384
   37694:	e13fd904 	addi	r4,fp,-156
   37698:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>

    ctx->pre_g = (secp256k1_ge_storage (*)[])checked_malloc(cb, sizeof((*ctx->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G));
   3769c:	01400434 	movhi	r5,16
   376a0:	e13fff17 	ldw	r4,-4(fp)
   376a4:	000de6c0 	call	de6c <checked_malloc>
   376a8:	1007883a 	mov	r3,r2
   376ac:	e0bffe17 	ldw	r2,-8(fp)
   376b0:	10c00015 	stw	r3,0(r2)

    /* precompute the tables with odd multiples */
    secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g, &gj, cb);
   376b4:	e0bffe17 	ldw	r2,-8(fp)
   376b8:	10800017 	ldw	r2,0(r2)
   376bc:	e1ffff17 	ldw	r7,-4(fp)
   376c0:	e1bfd904 	addi	r6,fp,-156
   376c4:	100b883a 	mov	r5,r2
   376c8:	01100004 	movi	r4,16384
   376cc:	00375000 	call	37500 <secp256k1_ecmult_odd_multiples_table_storage_var>
   376d0:	00000106 	br	376d8 <secp256k1_ecmult_context_build+0x70>

static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {
    secp256k1_gej gj;

    if (ctx->pre_g != NULL) {
        return;
   376d4:	0001883a 	nop
            secp256k1_gej_double_var(&g_128j, &g_128j, NULL);
        }
        secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g_128, &g_128j, cb);
    }
#endif
}
   376d8:	e037883a 	mov	sp,fp
   376dc:	dfc00117 	ldw	ra,4(sp)
   376e0:	df000017 	ldw	fp,0(sp)
   376e4:	dec00204 	addi	sp,sp,8
   376e8:	f800283a 	ret

000376ec <secp256k1_ecmult_context_clone>:

static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,
                                           const secp256k1_ecmult_context *src, const secp256k1_callback *cb) {
   376ec:	defffa04 	addi	sp,sp,-24
   376f0:	dfc00515 	stw	ra,20(sp)
   376f4:	df000415 	stw	fp,16(sp)
   376f8:	df000404 	addi	fp,sp,16
   376fc:	e13ffd15 	stw	r4,-12(fp)
   37700:	e17ffe15 	stw	r5,-8(fp)
   37704:	e1bfff15 	stw	r6,-4(fp)
    if (src->pre_g == NULL) {
   37708:	e0bffe17 	ldw	r2,-8(fp)
   3770c:	10800017 	ldw	r2,0(r2)
   37710:	1000031e 	bne	r2,zero,37720 <secp256k1_ecmult_context_clone+0x34>
        dst->pre_g = NULL;
   37714:	e0bffd17 	ldw	r2,-12(fp)
   37718:	10000015 	stw	zero,0(r2)
        size_t size = sizeof((*dst->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);
        dst->pre_g_128 = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);
        memcpy(dst->pre_g_128, src->pre_g_128, size);
    }
#endif
}
   3771c:	00001006 	br	37760 <secp256k1_ecmult_context_clone+0x74>
static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,
                                           const secp256k1_ecmult_context *src, const secp256k1_callback *cb) {
    if (src->pre_g == NULL) {
        dst->pre_g = NULL;
    } else {
        size_t size = sizeof((*dst->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);
   37720:	00800434 	movhi	r2,16
   37724:	e0bffc15 	stw	r2,-16(fp)
        dst->pre_g = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);
   37728:	e17ffc17 	ldw	r5,-16(fp)
   3772c:	e13fff17 	ldw	r4,-4(fp)
   37730:	000de6c0 	call	de6c <checked_malloc>
   37734:	1007883a 	mov	r3,r2
   37738:	e0bffd17 	ldw	r2,-12(fp)
   3773c:	10c00015 	stw	r3,0(r2)
        memcpy(dst->pre_g, src->pre_g, size);
   37740:	e0bffd17 	ldw	r2,-12(fp)
   37744:	10c00017 	ldw	r3,0(r2)
   37748:	e0bffe17 	ldw	r2,-8(fp)
   3774c:	10800017 	ldw	r2,0(r2)
   37750:	e1bffc17 	ldw	r6,-16(fp)
   37754:	100b883a 	mov	r5,r2
   37758:	1809883a 	mov	r4,r3
   3775c:	00463980 	call	46398 <memcpy>
        size_t size = sizeof((*dst->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);
        dst->pre_g_128 = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);
        memcpy(dst->pre_g_128, src->pre_g_128, size);
    }
#endif
}
   37760:	0001883a 	nop
   37764:	e037883a 	mov	sp,fp
   37768:	dfc00117 	ldw	ra,4(sp)
   3776c:	df000017 	ldw	fp,0(sp)
   37770:	dec00204 	addi	sp,sp,8
   37774:	f800283a 	ret

00037778 <secp256k1_ecmult_context_is_built>:

static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx) {
   37778:	defffe04 	addi	sp,sp,-8
   3777c:	df000115 	stw	fp,4(sp)
   37780:	df000104 	addi	fp,sp,4
   37784:	e13fff15 	stw	r4,-4(fp)
    return ctx->pre_g != NULL;
   37788:	e0bfff17 	ldw	r2,-4(fp)
   3778c:	10800017 	ldw	r2,0(r2)
   37790:	1004c03a 	cmpne	r2,r2,zero
   37794:	10803fcc 	andi	r2,r2,255
}
   37798:	e037883a 	mov	sp,fp
   3779c:	df000017 	ldw	fp,0(sp)
   377a0:	dec00104 	addi	sp,sp,4
   377a4:	f800283a 	ret

000377a8 <secp256k1_ecmult_context_clear>:

static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx) {
   377a8:	defffd04 	addi	sp,sp,-12
   377ac:	dfc00215 	stw	ra,8(sp)
   377b0:	df000115 	stw	fp,4(sp)
   377b4:	df000104 	addi	fp,sp,4
   377b8:	e13fff15 	stw	r4,-4(fp)
    free(ctx->pre_g);
   377bc:	e0bfff17 	ldw	r2,-4(fp)
   377c0:	10800017 	ldw	r2,0(r2)
   377c4:	1009883a 	mov	r4,r2
   377c8:	00463540 	call	46354 <free>
#ifdef USE_ENDOMORPHISM
    free(ctx->pre_g_128);
#endif
    secp256k1_ecmult_context_init(ctx);
   377cc:	e13fff17 	ldw	r4,-4(fp)
   377d0:	003763c0 	call	3763c <secp256k1_ecmult_context_init>
}
   377d4:	0001883a 	nop
   377d8:	e037883a 	mov	sp,fp
   377dc:	dfc00117 	ldw	ra,4(sp)
   377e0:	df000017 	ldw	fp,0(sp)
   377e4:	dec00204 	addi	sp,sp,8
   377e8:	f800283a 	ret

000377ec <secp256k1_ecmult_wnaf>:
 *  - each wnaf[i] is either 0, or an odd integer between -(1<<(w-1) - 1) and (1<<(w-1) - 1)
 *  - two non-zero entries in wnaf are separated by at least w-1 zeroes.
 *  - the number of set values in wnaf is returned. This number is at most 256, and at most one more
 *    than the number of bits in the (absolute value) of the input.
 */
static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {
   377ec:	deffea04 	addi	sp,sp,-88
   377f0:	dfc01515 	stw	ra,84(sp)
   377f4:	df001415 	stw	fp,80(sp)
   377f8:	dc001315 	stw	r16,76(sp)
   377fc:	df001404 	addi	fp,sp,80
   37800:	e13ffb15 	stw	r4,-20(fp)
   37804:	e17ffc15 	stw	r5,-16(fp)
   37808:	e1bffd15 	stw	r6,-12(fp)
   3780c:	e1fffe15 	stw	r7,-8(fp)
    secp256k1_scalar s = *a;
   37810:	e0bffd17 	ldw	r2,-12(fp)
   37814:	10c00017 	ldw	r3,0(r2)
   37818:	e0fff315 	stw	r3,-52(fp)
   3781c:	10c00117 	ldw	r3,4(r2)
   37820:	e0fff415 	stw	r3,-48(fp)
   37824:	10c00217 	ldw	r3,8(r2)
   37828:	e0fff515 	stw	r3,-44(fp)
   3782c:	10c00317 	ldw	r3,12(r2)
   37830:	e0fff615 	stw	r3,-40(fp)
   37834:	10c00417 	ldw	r3,16(r2)
   37838:	e0fff715 	stw	r3,-36(fp)
   3783c:	10c00517 	ldw	r3,20(r2)
   37840:	e0fff815 	stw	r3,-32(fp)
   37844:	10c00617 	ldw	r3,24(r2)
   37848:	e0fff915 	stw	r3,-28(fp)
   3784c:	10800717 	ldw	r2,28(r2)
   37850:	e0bffa15 	stw	r2,-24(fp)
    int last_set_bit = -1;
   37854:	00bfffc4 	movi	r2,-1
   37858:	e0bfed15 	stw	r2,-76(fp)
    int bit = 0;
   3785c:	e03fee15 	stw	zero,-72(fp)
    int sign = 1;
   37860:	00800044 	movi	r2,1
   37864:	e0bfef15 	stw	r2,-68(fp)
    int carry = 0;
   37868:	e03ff015 	stw	zero,-64(fp)

    VERIFY_CHECK(wnaf != NULL);
   3786c:	e0bffb17 	ldw	r2,-20(fp)
   37870:	1005003a 	cmpeq	r2,r2,zero
   37874:	10803fcc 	andi	r2,r2,255
   37878:	10000d26 	beq	r2,zero,378b0 <secp256k1_ecmult_wnaf+0xc4>
   3787c:	d0a01617 	ldw	r2,-32680(gp)
   37880:	10c00317 	ldw	r3,12(r2)
   37884:	00800174 	movhi	r2,5
   37888:	10976c04 	addi	r2,r2,23984
   3788c:	d8800015 	stw	r2,0(sp)
   37890:	01c038c4 	movi	r7,227
   37894:	01800174 	movhi	r6,5
   37898:	31976304 	addi	r6,r6,23948
   3789c:	01400174 	movhi	r5,5
   378a0:	2951e804 	addi	r5,r5,18336
   378a4:	1809883a 	mov	r4,r3
   378a8:	00461000 	call	46100 <fprintf>
   378ac:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(0 <= len && len <= 256);
   378b0:	e0bffc17 	ldw	r2,-16(fp)
   378b4:	1004d7fa 	srli	r2,r2,31
   378b8:	10803fcc 	andi	r2,r2,255
   378bc:	1000041e 	bne	r2,zero,378d0 <secp256k1_ecmult_wnaf+0xe4>
   378c0:	e0bffc17 	ldw	r2,-16(fp)
   378c4:	10804048 	cmpgei	r2,r2,257
   378c8:	10803fcc 	andi	r2,r2,255
   378cc:	10000d26 	beq	r2,zero,37904 <secp256k1_ecmult_wnaf+0x118>
   378d0:	d0a01617 	ldw	r2,-32680(gp)
   378d4:	10c00317 	ldw	r3,12(r2)
   378d8:	00800174 	movhi	r2,5
   378dc:	10977504 	addi	r2,r2,24020
   378e0:	d8800015 	stw	r2,0(sp)
   378e4:	01c03904 	movi	r7,228
   378e8:	01800174 	movhi	r6,5
   378ec:	31976304 	addi	r6,r6,23948
   378f0:	01400174 	movhi	r5,5
   378f4:	2951e804 	addi	r5,r5,18336
   378f8:	1809883a 	mov	r4,r3
   378fc:	00461000 	call	46100 <fprintf>
   37900:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(a != NULL);
   37904:	e0bffd17 	ldw	r2,-12(fp)
   37908:	1005003a 	cmpeq	r2,r2,zero
   3790c:	10803fcc 	andi	r2,r2,255
   37910:	10000d26 	beq	r2,zero,37948 <secp256k1_ecmult_wnaf+0x15c>
   37914:	d0a01617 	ldw	r2,-32680(gp)
   37918:	10c00317 	ldw	r3,12(r2)
   3791c:	00800174 	movhi	r2,5
   37920:	10978104 	addi	r2,r2,24068
   37924:	d8800015 	stw	r2,0(sp)
   37928:	01c03944 	movi	r7,229
   3792c:	01800174 	movhi	r6,5
   37930:	31976304 	addi	r6,r6,23948
   37934:	01400174 	movhi	r5,5
   37938:	2951e804 	addi	r5,r5,18336
   3793c:	1809883a 	mov	r4,r3
   37940:	00461000 	call	46100 <fprintf>
   37944:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(2 <= w && w <= 31);
   37948:	e0bffe17 	ldw	r2,-8(fp)
   3794c:	10800090 	cmplti	r2,r2,2
   37950:	10803fcc 	andi	r2,r2,255
   37954:	1000041e 	bne	r2,zero,37968 <secp256k1_ecmult_wnaf+0x17c>
   37958:	e0bffe17 	ldw	r2,-8(fp)
   3795c:	10800808 	cmpgei	r2,r2,32
   37960:	10803fcc 	andi	r2,r2,255
   37964:	10000d26 	beq	r2,zero,3799c <secp256k1_ecmult_wnaf+0x1b0>
   37968:	d0a01617 	ldw	r2,-32680(gp)
   3796c:	10c00317 	ldw	r3,12(r2)
   37970:	00800174 	movhi	r2,5
   37974:	10978a04 	addi	r2,r2,24104
   37978:	d8800015 	stw	r2,0(sp)
   3797c:	01c03984 	movi	r7,230
   37980:	01800174 	movhi	r6,5
   37984:	31976304 	addi	r6,r6,23948
   37988:	01400174 	movhi	r5,5
   3798c:	2951e804 	addi	r5,r5,18336
   37990:	1809883a 	mov	r4,r3
   37994:	00461000 	call	46100 <fprintf>
   37998:	0045fd40 	call	45fd4 <abort>

    memset(wnaf, 0, len * sizeof(wnaf[0]));
   3799c:	e0bffc17 	ldw	r2,-16(fp)
   379a0:	1085883a 	add	r2,r2,r2
   379a4:	1085883a 	add	r2,r2,r2
   379a8:	100d883a 	mov	r6,r2
   379ac:	000b883a 	mov	r5,zero
   379b0:	e13ffb17 	ldw	r4,-20(fp)
   379b4:	00464200 	call	46420 <memset>

    if (secp256k1_scalar_get_bits(&s, 255, 1)) {
   379b8:	e0bff304 	addi	r2,fp,-52
   379bc:	01800044 	movi	r6,1
   379c0:	01403fc4 	movi	r5,255
   379c4:	1009883a 	mov	r4,r2
   379c8:	0024f8c0 	call	24f8c <secp256k1_scalar_get_bits>
   379cc:	10004726 	beq	r2,zero,37aec <secp256k1_ecmult_wnaf+0x300>
        secp256k1_scalar_negate(&s, &s);
   379d0:	e0fff304 	addi	r3,fp,-52
   379d4:	e0bff304 	addi	r2,fp,-52
   379d8:	180b883a 	mov	r5,r3
   379dc:	1009883a 	mov	r4,r2
   379e0:	0026a380 	call	26a38 <secp256k1_scalar_negate>
        sign = -1;
   379e4:	00bfffc4 	movi	r2,-1
   379e8:	e0bfef15 	stw	r2,-68(fp)
    }

    while (bit < len) {
   379ec:	00003f06 	br	37aec <secp256k1_ecmult_wnaf+0x300>
        int now;
        int word;
        if (secp256k1_scalar_get_bits(&s, bit, 1) == (unsigned int)carry) {
   379f0:	e0ffee17 	ldw	r3,-72(fp)
   379f4:	e0bff304 	addi	r2,fp,-52
   379f8:	01800044 	movi	r6,1
   379fc:	180b883a 	mov	r5,r3
   37a00:	1009883a 	mov	r4,r2
   37a04:	0024f8c0 	call	24f8c <secp256k1_scalar_get_bits>
   37a08:	1007883a 	mov	r3,r2
   37a0c:	e0bff017 	ldw	r2,-64(fp)
   37a10:	1880041e 	bne	r3,r2,37a24 <secp256k1_ecmult_wnaf+0x238>
            bit++;
   37a14:	e0bfee17 	ldw	r2,-72(fp)
   37a18:	10800044 	addi	r2,r2,1
   37a1c:	e0bfee15 	stw	r2,-72(fp)
            continue;
   37a20:	00003206 	br	37aec <secp256k1_ecmult_wnaf+0x300>
        }

        now = w;
   37a24:	e0bffe17 	ldw	r2,-8(fp)
   37a28:	e0bff115 	stw	r2,-60(fp)
        if (now > len - bit) {
   37a2c:	e0fffc17 	ldw	r3,-16(fp)
   37a30:	e0bfee17 	ldw	r2,-72(fp)
   37a34:	1887c83a 	sub	r3,r3,r2
   37a38:	e0bff117 	ldw	r2,-60(fp)
   37a3c:	1880040e 	bge	r3,r2,37a50 <secp256k1_ecmult_wnaf+0x264>
            now = len - bit;
   37a40:	e0fffc17 	ldw	r3,-16(fp)
   37a44:	e0bfee17 	ldw	r2,-72(fp)
   37a48:	1885c83a 	sub	r2,r3,r2
   37a4c:	e0bff115 	stw	r2,-60(fp)
        }

        word = secp256k1_scalar_get_bits_var(&s, bit, now) + carry;
   37a50:	e0ffee17 	ldw	r3,-72(fp)
   37a54:	e13ff117 	ldw	r4,-60(fp)
   37a58:	e0bff304 	addi	r2,fp,-52
   37a5c:	200d883a 	mov	r6,r4
   37a60:	180b883a 	mov	r5,r3
   37a64:	1009883a 	mov	r4,r2
   37a68:	00250540 	call	25054 <secp256k1_scalar_get_bits_var>
   37a6c:	1007883a 	mov	r3,r2
   37a70:	e0bff017 	ldw	r2,-64(fp)
   37a74:	1885883a 	add	r2,r3,r2
   37a78:	e0bff215 	stw	r2,-56(fp)

        carry = (word >> (w-1)) & 1;
   37a7c:	e0bffe17 	ldw	r2,-8(fp)
   37a80:	10bfffc4 	addi	r2,r2,-1
   37a84:	e0fff217 	ldw	r3,-56(fp)
   37a88:	1885d83a 	sra	r2,r3,r2
   37a8c:	1080004c 	andi	r2,r2,1
   37a90:	e0bff015 	stw	r2,-64(fp)
        word -= carry << w;
   37a94:	e0fff017 	ldw	r3,-64(fp)
   37a98:	e0bffe17 	ldw	r2,-8(fp)
   37a9c:	1884983a 	sll	r2,r3,r2
   37aa0:	e0fff217 	ldw	r3,-56(fp)
   37aa4:	1885c83a 	sub	r2,r3,r2
   37aa8:	e0bff215 	stw	r2,-56(fp)

        wnaf[bit] = sign * word;
   37aac:	e0bfee17 	ldw	r2,-72(fp)
   37ab0:	1085883a 	add	r2,r2,r2
   37ab4:	1085883a 	add	r2,r2,r2
   37ab8:	1007883a 	mov	r3,r2
   37abc:	e0bffb17 	ldw	r2,-20(fp)
   37ac0:	10e1883a 	add	r16,r2,r3
   37ac4:	e17ff217 	ldw	r5,-56(fp)
   37ac8:	e13fef17 	ldw	r4,-68(fp)
   37acc:	0043af40 	call	43af4 <__mulsi3>
   37ad0:	80800015 	stw	r2,0(r16)
        last_set_bit = bit;
   37ad4:	e0bfee17 	ldw	r2,-72(fp)
   37ad8:	e0bfed15 	stw	r2,-76(fp)

        bit += now;
   37adc:	e0ffee17 	ldw	r3,-72(fp)
   37ae0:	e0bff117 	ldw	r2,-60(fp)
   37ae4:	1885883a 	add	r2,r3,r2
   37ae8:	e0bfee15 	stw	r2,-72(fp)
    if (secp256k1_scalar_get_bits(&s, 255, 1)) {
        secp256k1_scalar_negate(&s, &s);
        sign = -1;
    }

    while (bit < len) {
   37aec:	e0ffee17 	ldw	r3,-72(fp)
   37af0:	e0bffc17 	ldw	r2,-16(fp)
   37af4:	18bfbe16 	blt	r3,r2,379f0 <__alt_mem_epcs_flash_controller+0xfe02e9f0>
        last_set_bit = bit;

        bit += now;
    }
#ifdef VERIFY
    CHECK(carry == 0);
   37af8:	e0bff017 	ldw	r2,-64(fp)
   37afc:	1004c03a 	cmpne	r2,r2,zero
   37b00:	10803fcc 	andi	r2,r2,255
   37b04:	10002626 	beq	r2,zero,37ba0 <secp256k1_ecmult_wnaf+0x3b4>
   37b08:	d0a01617 	ldw	r2,-32680(gp)
   37b0c:	10c00317 	ldw	r3,12(r2)
   37b10:	00800174 	movhi	r2,5
   37b14:	10979504 	addi	r2,r2,24148
   37b18:	d8800015 	stw	r2,0(sp)
   37b1c:	01c041c4 	movi	r7,263
   37b20:	01800174 	movhi	r6,5
   37b24:	31976304 	addi	r6,r6,23948
   37b28:	01400174 	movhi	r5,5
   37b2c:	2951e804 	addi	r5,r5,18336
   37b30:	1809883a 	mov	r4,r3
   37b34:	00461000 	call	46100 <fprintf>
   37b38:	0045fd40 	call	45fd4 <abort>
    while (bit < 256) {
        CHECK(secp256k1_scalar_get_bits(&s, bit++, 1) == 0);
   37b3c:	e0bfee17 	ldw	r2,-72(fp)
   37b40:	10c00044 	addi	r3,r2,1
   37b44:	e0ffee15 	stw	r3,-72(fp)
   37b48:	1007883a 	mov	r3,r2
   37b4c:	e0bff304 	addi	r2,fp,-52
   37b50:	01800044 	movi	r6,1
   37b54:	180b883a 	mov	r5,r3
   37b58:	1009883a 	mov	r4,r2
   37b5c:	0024f8c0 	call	24f8c <secp256k1_scalar_get_bits>
   37b60:	1004c03a 	cmpne	r2,r2,zero
   37b64:	10803fcc 	andi	r2,r2,255
   37b68:	10000d26 	beq	r2,zero,37ba0 <secp256k1_ecmult_wnaf+0x3b4>
   37b6c:	d0a01617 	ldw	r2,-32680(gp)
   37b70:	10c00317 	ldw	r3,12(r2)
   37b74:	00800174 	movhi	r2,5
   37b78:	10979e04 	addi	r2,r2,24184
   37b7c:	d8800015 	stw	r2,0(sp)
   37b80:	01c04244 	movi	r7,265
   37b84:	01800174 	movhi	r6,5
   37b88:	31976304 	addi	r6,r6,23948
   37b8c:	01400174 	movhi	r5,5
   37b90:	2951e804 	addi	r5,r5,18336
   37b94:	1809883a 	mov	r4,r3
   37b98:	00461000 	call	46100 <fprintf>
   37b9c:	0045fd40 	call	45fd4 <abort>

        bit += now;
    }
#ifdef VERIFY
    CHECK(carry == 0);
    while (bit < 256) {
   37ba0:	e0bfee17 	ldw	r2,-72(fp)
   37ba4:	10804010 	cmplti	r2,r2,256
   37ba8:	103fe41e 	bne	r2,zero,37b3c <__alt_mem_epcs_flash_controller+0xfe02eb3c>
        CHECK(secp256k1_scalar_get_bits(&s, bit++, 1) == 0);
    } 
#endif
    return last_set_bit + 1;
   37bac:	e0bfed17 	ldw	r2,-76(fp)
   37bb0:	10800044 	addi	r2,r2,1
}
   37bb4:	e6ffff04 	addi	sp,fp,-4
   37bb8:	dfc00217 	ldw	ra,8(sp)
   37bbc:	df000117 	ldw	fp,4(sp)
   37bc0:	dc000017 	ldw	r16,0(sp)
   37bc4:	dec00304 	addi	sp,sp,12
   37bc8:	f800283a 	ret

00037bcc <secp256k1_ecmult>:

static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {
   37bcc:	defd0604 	addi	sp,sp,-3048
   37bd0:	dfc2f915 	stw	ra,3044(sp)
   37bd4:	df02f815 	stw	fp,3040(sp)
   37bd8:	dc02f715 	stw	r16,3036(sp)
   37bdc:	df02f804 	addi	fp,sp,3040
   37be0:	e13ffb15 	stw	r4,-20(fp)
   37be4:	e17ffc15 	stw	r5,-16(fp)
   37be8:	e1bffd15 	stw	r6,-12(fp)
   37bec:	e1fffe15 	stw	r7,-8(fp)
    if (bits_na_lam > bits) {
        bits = bits_na_lam;
    }
#else
    /* build wnaf representation for na. */
    bits_na     = secp256k1_ecmult_wnaf(wnaf_na,     256, na,      WINDOW_A);
   37bf0:	e0bdfb04 	addi	r2,fp,-2068
   37bf4:	01c00144 	movi	r7,5
   37bf8:	e1bffe17 	ldw	r6,-8(fp)
   37bfc:	01404004 	movi	r5,256
   37c00:	1009883a 	mov	r4,r2
   37c04:	00377ec0 	call	377ec <secp256k1_ecmult_wnaf>
   37c08:	e0bd0b15 	stw	r2,-3028(fp)
    bits = bits_na;
   37c0c:	e0bd0b17 	ldw	r2,-3028(fp)
   37c10:	e0bd0a15 	stw	r2,-3032(fp)
     * The exception is the precomputed G table points, which are actually
     * affine. Compared to the base used for other points, they have a Z ratio
     * of 1/Z, so we can use secp256k1_gej_add_zinv_var, which uses the same
     * isomorphism to efficiently add with a known Z inverse.
     */
    secp256k1_ecmult_odd_multiples_table_globalz_windowa(pre_a, &Z, a);
   37c14:	e0fdef04 	addi	r3,fp,-2116
   37c18:	e0bd0e04 	addi	r2,fp,-3016
   37c1c:	e1bffd17 	ldw	r6,-12(fp)
   37c20:	180b883a 	mov	r5,r3
   37c24:	1009883a 	mov	r4,r2
   37c28:	00374980 	call	37498 <secp256k1_ecmult_odd_multiples_table_globalz_windowa>
    }
    if (bits_ng_128 > bits) {
        bits = bits_ng_128;
    }
#else
    bits_ng     = secp256k1_ecmult_wnaf(wnaf_ng,     256, ng,      WINDOW_G);
   37c2c:	e0befb04 	addi	r2,fp,-1044
   37c30:	01c00404 	movi	r7,16
   37c34:	e1800217 	ldw	r6,8(fp)
   37c38:	01404004 	movi	r5,256
   37c3c:	1009883a 	mov	r4,r2
   37c40:	00377ec0 	call	377ec <secp256k1_ecmult_wnaf>
   37c44:	e0bd0c15 	stw	r2,-3024(fp)
    if (bits_ng > bits) {
   37c48:	e0bd0c17 	ldw	r2,-3024(fp)
   37c4c:	e0fd0a17 	ldw	r3,-3032(fp)
   37c50:	1880020e 	bge	r3,r2,37c5c <secp256k1_ecmult+0x90>
        bits = bits_ng;
   37c54:	e0bd0c17 	ldw	r2,-3024(fp)
   37c58:	e0bd0a15 	stw	r2,-3032(fp)
    }
#endif

    secp256k1_gej_set_infinity(r);
   37c5c:	e13ffc17 	ldw	r4,-16(fp)
   37c60:	00228cc0 	call	228cc <secp256k1_gej_set_infinity>

    for (i = bits - 1; i >= 0; i--) {
   37c64:	e0bd0a17 	ldw	r2,-3032(fp)
   37c68:	10bfffc4 	addi	r2,r2,-1
   37c6c:	e0bd0915 	stw	r2,-3036(fp)
   37c70:	0000dc06 	br	37fe4 <secp256k1_ecmult+0x418>
        int n;
        secp256k1_gej_double_var(r, r, NULL);
   37c74:	000d883a 	mov	r6,zero
   37c78:	e17ffc17 	ldw	r5,-16(fp)
   37c7c:	e13ffc17 	ldw	r4,-16(fp)
   37c80:	00231500 	call	23150 <secp256k1_gej_double_var>
        if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {
            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g_128, n, WINDOW_G);
            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);
        }
#else
        if (i < bits_na && (n = wnaf_na[i])) {
   37c84:	e0fd0917 	ldw	r3,-3036(fp)
   37c88:	e0bd0b17 	ldw	r2,-3028(fp)
   37c8c:	1880670e 	bge	r3,r2,37e2c <secp256k1_ecmult+0x260>
   37c90:	e0bd0917 	ldw	r2,-3036(fp)
   37c94:	1085883a 	add	r2,r2,r2
   37c98:	1085883a 	add	r2,r2,r2
   37c9c:	e0fd0904 	addi	r3,fp,-3036
   37ca0:	1885883a 	add	r2,r3,r2
   37ca4:	1080f204 	addi	r2,r2,968
   37ca8:	10800017 	ldw	r2,0(r2)
   37cac:	e0bd0d15 	stw	r2,-3020(fp)
   37cb0:	e0bd0d17 	ldw	r2,-3020(fp)
   37cb4:	10005d26 	beq	r2,zero,37e2c <secp256k1_ecmult+0x260>
            ECMULT_TABLE_GET_GE(&tmpa, pre_a, n, WINDOW_A);
   37cb8:	e0bd0d17 	ldw	r2,-3020(fp)
   37cbc:	1080004c 	andi	r2,r2,1
   37cc0:	1005003a 	cmpeq	r2,r2,zero
   37cc4:	10803fcc 	andi	r2,r2,255
   37cc8:	10000d26 	beq	r2,zero,37d00 <secp256k1_ecmult+0x134>
   37ccc:	d0a01617 	ldw	r2,-32680(gp)
   37cd0:	10c00317 	ldw	r3,12(r2)
   37cd4:	00800174 	movhi	r2,5
   37cd8:	1097af04 	addi	r2,r2,24252
   37cdc:	d8800015 	stw	r2,0(sp)
   37ce0:	01c05e04 	movi	r7,376
   37ce4:	01800174 	movhi	r6,5
   37ce8:	31976304 	addi	r6,r6,23948
   37cec:	01400174 	movhi	r5,5
   37cf0:	2951e804 	addi	r5,r5,18336
   37cf4:	1809883a 	mov	r4,r3
   37cf8:	00461000 	call	46100 <fprintf>
   37cfc:	0045fd40 	call	45fd4 <abort>
   37d00:	e0bd0d17 	ldw	r2,-3020(fp)
   37d04:	10bffc50 	cmplti	r2,r2,-15
   37d08:	10803fcc 	andi	r2,r2,255
   37d0c:	10000d26 	beq	r2,zero,37d44 <secp256k1_ecmult+0x178>
   37d10:	d0a01617 	ldw	r2,-32680(gp)
   37d14:	10c00317 	ldw	r3,12(r2)
   37d18:	00800174 	movhi	r2,5
   37d1c:	1097b904 	addi	r2,r2,24292
   37d20:	d8800015 	stw	r2,0(sp)
   37d24:	01c05e04 	movi	r7,376
   37d28:	01800174 	movhi	r6,5
   37d2c:	31976304 	addi	r6,r6,23948
   37d30:	01400174 	movhi	r5,5
   37d34:	2951e804 	addi	r5,r5,18336
   37d38:	1809883a 	mov	r4,r3
   37d3c:	00461000 	call	46100 <fprintf>
   37d40:	0045fd40 	call	45fd4 <abort>
   37d44:	e0bd0d17 	ldw	r2,-3020(fp)
   37d48:	10800408 	cmpgei	r2,r2,16
   37d4c:	10803fcc 	andi	r2,r2,255
   37d50:	10000d26 	beq	r2,zero,37d88 <secp256k1_ecmult+0x1bc>
   37d54:	d0a01617 	ldw	r2,-32680(gp)
   37d58:	10c00317 	ldw	r3,12(r2)
   37d5c:	00800174 	movhi	r2,5
   37d60:	1097c604 	addi	r2,r2,24344
   37d64:	d8800015 	stw	r2,0(sp)
   37d68:	01c05e04 	movi	r7,376
   37d6c:	01800174 	movhi	r6,5
   37d70:	31976304 	addi	r6,r6,23948
   37d74:	01400174 	movhi	r5,5
   37d78:	2951e804 	addi	r5,r5,18336
   37d7c:	1809883a 	mov	r4,r3
   37d80:	00461000 	call	46100 <fprintf>
   37d84:	0045fd40 	call	45fd4 <abort>
   37d88:	e0bd0d17 	ldw	r2,-3020(fp)
   37d8c:	0080130e 	bge	zero,r2,37ddc <secp256k1_ecmult+0x210>
   37d90:	e0bd0d17 	ldw	r2,-3020(fp)
   37d94:	10bfffc4 	addi	r2,r2,-1
   37d98:	1006d7fa 	srli	r3,r2,31
   37d9c:	1885883a 	add	r2,r3,r2
   37da0:	1005d07a 	srai	r2,r2,1
   37da4:	01401904 	movi	r5,100
   37da8:	1009883a 	mov	r4,r2
   37dac:	0043af40 	call	43af4 <__mulsi3>
   37db0:	e0fd0904 	addi	r3,fp,-3036
   37db4:	1885883a 	add	r2,r3,r2
   37db8:	10c00504 	addi	r3,r2,20
   37dbc:	e0bdd604 	addi	r2,fp,-2216
   37dc0:	1809883a 	mov	r4,r3
   37dc4:	00c01904 	movi	r3,100
   37dc8:	180d883a 	mov	r6,r3
   37dcc:	200b883a 	mov	r5,r4
   37dd0:	1009883a 	mov	r4,r2
   37dd4:	00463980 	call	46398 <memcpy>
   37dd8:	00000e06 	br	37e14 <secp256k1_ecmult+0x248>
   37ddc:	e0bd0d17 	ldw	r2,-3020(fp)
   37de0:	0084303a 	nor	r2,zero,r2
   37de4:	1006d7fa 	srli	r3,r2,31
   37de8:	1885883a 	add	r2,r3,r2
   37dec:	1005d07a 	srai	r2,r2,1
   37df0:	e43d0e04 	addi	r16,fp,-3016
   37df4:	01401904 	movi	r5,100
   37df8:	1009883a 	mov	r4,r2
   37dfc:	0043af40 	call	43af4 <__mulsi3>
   37e00:	8087883a 	add	r3,r16,r2
   37e04:	e0bdd604 	addi	r2,fp,-2216
   37e08:	180b883a 	mov	r5,r3
   37e0c:	1009883a 	mov	r4,r2
   37e10:	0021e140 	call	21e14 <secp256k1_ge_neg>
            secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);
   37e14:	e0bdd604 	addi	r2,fp,-2216
   37e18:	000f883a 	mov	r7,zero
   37e1c:	100d883a 	mov	r6,r2
   37e20:	e17ffc17 	ldw	r5,-16(fp)
   37e24:	e13ffc17 	ldw	r4,-16(fp)
   37e28:	00239ac0 	call	239ac <secp256k1_gej_add_ge_var>
        }
        if (i < bits_ng && (n = wnaf_ng[i])) {
   37e2c:	e0fd0917 	ldw	r3,-3036(fp)
   37e30:	e0bd0c17 	ldw	r2,-3024(fp)
   37e34:	1880680e 	bge	r3,r2,37fd8 <secp256k1_ecmult+0x40c>
   37e38:	e0bd0917 	ldw	r2,-3036(fp)
   37e3c:	1085883a 	add	r2,r2,r2
   37e40:	1085883a 	add	r2,r2,r2
   37e44:	e0fd0904 	addi	r3,fp,-3036
   37e48:	1885883a 	add	r2,r3,r2
   37e4c:	1081f204 	addi	r2,r2,1992
   37e50:	10800017 	ldw	r2,0(r2)
   37e54:	e0bd0d15 	stw	r2,-3020(fp)
   37e58:	e0bd0d17 	ldw	r2,-3020(fp)
   37e5c:	10005e26 	beq	r2,zero,37fd8 <secp256k1_ecmult+0x40c>
            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);
   37e60:	e0bd0d17 	ldw	r2,-3020(fp)
   37e64:	1080004c 	andi	r2,r2,1
   37e68:	1005003a 	cmpeq	r2,r2,zero
   37e6c:	10803fcc 	andi	r2,r2,255
   37e70:	10000d26 	beq	r2,zero,37ea8 <secp256k1_ecmult+0x2dc>
   37e74:	d0a01617 	ldw	r2,-32680(gp)
   37e78:	10c00317 	ldw	r3,12(r2)
   37e7c:	00800174 	movhi	r2,5
   37e80:	1097af04 	addi	r2,r2,24252
   37e84:	d8800015 	stw	r2,0(sp)
   37e88:	01c05f04 	movi	r7,380
   37e8c:	01800174 	movhi	r6,5
   37e90:	31976304 	addi	r6,r6,23948
   37e94:	01400174 	movhi	r5,5
   37e98:	2951e804 	addi	r5,r5,18336
   37e9c:	1809883a 	mov	r4,r3
   37ea0:	00461000 	call	46100 <fprintf>
   37ea4:	0045fd40 	call	45fd4 <abort>
   37ea8:	e0bd0d17 	ldw	r2,-3020(fp)
   37eac:	10a00050 	cmplti	r2,r2,-32767
   37eb0:	10803fcc 	andi	r2,r2,255
   37eb4:	10000d26 	beq	r2,zero,37eec <secp256k1_ecmult+0x320>
   37eb8:	d0a01617 	ldw	r2,-32680(gp)
   37ebc:	10c00317 	ldw	r3,12(r2)
   37ec0:	00800174 	movhi	r2,5
   37ec4:	1097d304 	addi	r2,r2,24396
   37ec8:	d8800015 	stw	r2,0(sp)
   37ecc:	01c05f04 	movi	r7,380
   37ed0:	01800174 	movhi	r6,5
   37ed4:	31976304 	addi	r6,r6,23948
   37ed8:	01400174 	movhi	r5,5
   37edc:	2951e804 	addi	r5,r5,18336
   37ee0:	1809883a 	mov	r4,r3
   37ee4:	00461000 	call	46100 <fprintf>
   37ee8:	0045fd40 	call	45fd4 <abort>
   37eec:	e0bd0d17 	ldw	r2,-3020(fp)
   37ef0:	00dfffc4 	movi	r3,32767
   37ef4:	1884803a 	cmplt	r2,r3,r2
   37ef8:	10803fcc 	andi	r2,r2,255
   37efc:	10000d26 	beq	r2,zero,37f34 <secp256k1_ecmult+0x368>
   37f00:	d0a01617 	ldw	r2,-32680(gp)
   37f04:	10c00317 	ldw	r3,12(r2)
   37f08:	00800174 	movhi	r2,5
   37f0c:	1097e104 	addi	r2,r2,24452
   37f10:	d8800015 	stw	r2,0(sp)
   37f14:	01c05f04 	movi	r7,380
   37f18:	01800174 	movhi	r6,5
   37f1c:	31976304 	addi	r6,r6,23948
   37f20:	01400174 	movhi	r5,5
   37f24:	2951e804 	addi	r5,r5,18336
   37f28:	1809883a 	mov	r4,r3
   37f2c:	00461000 	call	46100 <fprintf>
   37f30:	0045fd40 	call	45fd4 <abort>
   37f34:	e0bd0d17 	ldw	r2,-3020(fp)
   37f38:	00800e0e 	bge	zero,r2,37f74 <secp256k1_ecmult+0x3a8>
   37f3c:	e0bffb17 	ldw	r2,-20(fp)
   37f40:	10c00017 	ldw	r3,0(r2)
   37f44:	e0bd0d17 	ldw	r2,-3020(fp)
   37f48:	10bfffc4 	addi	r2,r2,-1
   37f4c:	1008d7fa 	srli	r4,r2,31
   37f50:	2085883a 	add	r2,r4,r2
   37f54:	1005d07a 	srai	r2,r2,1
   37f58:	100491ba 	slli	r2,r2,6
   37f5c:	1887883a 	add	r3,r3,r2
   37f60:	e0bdd604 	addi	r2,fp,-2216
   37f64:	180b883a 	mov	r5,r3
   37f68:	1009883a 	mov	r4,r2
   37f6c:	0024d840 	call	24d84 <secp256k1_ge_from_storage>
   37f70:	00001206 	br	37fbc <secp256k1_ecmult+0x3f0>
   37f74:	e0bffb17 	ldw	r2,-20(fp)
   37f78:	10c00017 	ldw	r3,0(r2)
   37f7c:	e0bd0d17 	ldw	r2,-3020(fp)
   37f80:	0084303a 	nor	r2,zero,r2
   37f84:	1008d7fa 	srli	r4,r2,31
   37f88:	2085883a 	add	r2,r4,r2
   37f8c:	1005d07a 	srai	r2,r2,1
   37f90:	100491ba 	slli	r2,r2,6
   37f94:	1887883a 	add	r3,r3,r2
   37f98:	e0bdd604 	addi	r2,fp,-2216
   37f9c:	180b883a 	mov	r5,r3
   37fa0:	1009883a 	mov	r4,r2
   37fa4:	0024d840 	call	24d84 <secp256k1_ge_from_storage>
   37fa8:	e0fdd604 	addi	r3,fp,-2216
   37fac:	e0bdd604 	addi	r2,fp,-2216
   37fb0:	180b883a 	mov	r5,r3
   37fb4:	1009883a 	mov	r4,r2
   37fb8:	0021e140 	call	21e14 <secp256k1_ge_neg>
            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);
   37fbc:	e0fdef04 	addi	r3,fp,-2116
   37fc0:	e0bdd604 	addi	r2,fp,-2216
   37fc4:	180f883a 	mov	r7,r3
   37fc8:	100d883a 	mov	r6,r2
   37fcc:	e17ffc17 	ldw	r5,-16(fp)
   37fd0:	e13ffc17 	ldw	r4,-16(fp)
   37fd4:	0023ecc0 	call	23ecc <secp256k1_gej_add_zinv_var>
    }
#endif

    secp256k1_gej_set_infinity(r);

    for (i = bits - 1; i >= 0; i--) {
   37fd8:	e0bd0917 	ldw	r2,-3036(fp)
   37fdc:	10bfffc4 	addi	r2,r2,-1
   37fe0:	e0bd0915 	stw	r2,-3036(fp)
   37fe4:	e0bd0917 	ldw	r2,-3036(fp)
   37fe8:	103f220e 	bge	r2,zero,37c74 <__alt_mem_epcs_flash_controller+0xfe02ec74>
            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);
        }
#endif
    }

    if (!r->infinity) {
   37fec:	e0bffc17 	ldw	r2,-16(fp)
   37ff0:	10802417 	ldw	r2,144(r2)
   37ff4:	1000091e 	bne	r2,zero,3801c <secp256k1_ecmult+0x450>
        secp256k1_fe_mul(&r->z, &r->z, &Z);
   37ff8:	e0bffc17 	ldw	r2,-16(fp)
   37ffc:	10c01804 	addi	r3,r2,96
   38000:	e0bffc17 	ldw	r2,-16(fp)
   38004:	10801804 	addi	r2,r2,96
   38008:	e13def04 	addi	r4,fp,-2116
   3800c:	200d883a 	mov	r6,r4
   38010:	100b883a 	mov	r5,r2
   38014:	1809883a 	mov	r4,r3
   38018:	001feb40 	call	1feb4 <secp256k1_fe_mul>
    }
}
   3801c:	0001883a 	nop
   38020:	e6ffff04 	addi	sp,fp,-4
   38024:	dfc00217 	ldw	ra,8(sp)
   38028:	df000117 	ldw	fp,4(sp)
   3802c:	dc000017 	ldw	r16,0(sp)
   38030:	dec00304 	addi	sp,sp,12
   38034:	f800283a 	ret

00038038 <secp256k1_wnaf_const>:
 *  Multiplications Secure against Side Channel Attacks`, Okeya and Tagaki. M. Joye (Ed.)
 *  CT-RSA 2003, LNCS 2612, pp. 328-443, 2003. Springer-Verlagy Berlin Heidelberg 2003
 *
 *  Numbers reference steps of `Algorithm SPA-resistant Width-w NAF with Odd Scalar` on pp. 335
 */
static int secp256k1_wnaf_const(int *wnaf, secp256k1_scalar s, int w) {
   38038:	deffe604 	addi	sp,sp,-104
   3803c:	dfc01615 	stw	ra,88(sp)
   38040:	df001515 	stw	fp,84(sp)
   38044:	dc001415 	stw	r16,80(sp)
   38048:	df001504 	addi	fp,sp,84
   3804c:	e13ffe15 	stw	r4,-8(fp)
   38050:	e1400215 	stw	r5,8(fp)
   38054:	e1800315 	stw	r6,12(fp)
   38058:	e1c00415 	stw	r7,16(fp)
    int global_sign;
    int skew = 0;
   3805c:	e03fef15 	stw	zero,-68(fp)
    int word = 0;
   38060:	e03fec15 	stw	zero,-80(fp)
     * Section 4.2 of the Okeya/Tagaki paper, which is to add either 1 (for even)
     * or 2 (for odd) to the number we are encoding, returning a skew value indicating
     * this, and having the caller compensate after doing the multiplication. */

    /* Negative numbers will be negated to keep their bit representation below the maximum width */
    flip = secp256k1_scalar_is_high(&s);
   38064:	e1000204 	addi	r4,fp,8
   38068:	0026f540 	call	26f54 <secp256k1_scalar_is_high>
   3806c:	e0bff015 	stw	r2,-64(fp)
    /* We add 1 to even numbers, 2 to odd ones, noting that negation flips parity */
    bit = flip ^ (s.d[0] & 1);
   38070:	e0800217 	ldw	r2,8(fp)
   38074:	10c0004c 	andi	r3,r2,1
   38078:	e0bff017 	ldw	r2,-64(fp)
   3807c:	1884f03a 	xor	r2,r3,r2
   38080:	e0bff115 	stw	r2,-60(fp)
    /* We check for negative one, since adding 2 to it will cause an overflow */
    secp256k1_scalar_negate(&neg_s, &s);
   38084:	e0bff604 	addi	r2,fp,-40
   38088:	e1400204 	addi	r5,fp,8
   3808c:	1009883a 	mov	r4,r2
   38090:	0026a380 	call	26a38 <secp256k1_scalar_negate>
    not_neg_one = !secp256k1_scalar_is_one(&neg_s);
   38094:	e0bff604 	addi	r2,fp,-40
   38098:	1009883a 	mov	r4,r2
   3809c:	0026ecc0 	call	26ecc <secp256k1_scalar_is_one>
   380a0:	1005003a 	cmpeq	r2,r2,zero
   380a4:	10803fcc 	andi	r2,r2,255
   380a8:	e0bff215 	stw	r2,-56(fp)
    secp256k1_scalar_cadd_bit(&s, bit, not_neg_one);
   380ac:	e0bff117 	ldw	r2,-60(fp)
   380b0:	e1bff217 	ldw	r6,-56(fp)
   380b4:	100b883a 	mov	r5,r2
   380b8:	e1000204 	addi	r4,fp,8
   380bc:	0025d500 	call	25d50 <secp256k1_scalar_cadd_bit>
    /* If we had negative one, flip == 1, s.d[0] == 0, bit == 1, so caller expects
     * that we added two to it and flipped it. In fact for -1 these operations are
     * identical. We only flipped, but since skewing is required (in the sense that
     * the skew must be 1 or 2, never zero) and flipping is not, we need to change
     * our flags to claim that we only skewed. */
    global_sign = secp256k1_scalar_cond_negate(&s, flip);
   380c0:	e17ff017 	ldw	r5,-64(fp)
   380c4:	e1000204 	addi	r4,fp,8
   380c8:	00271940 	call	27194 <secp256k1_scalar_cond_negate>
   380cc:	e0bff315 	stw	r2,-52(fp)
    global_sign *= not_neg_one * 2 - 1;
   380d0:	e0bff217 	ldw	r2,-56(fp)
   380d4:	1085883a 	add	r2,r2,r2
   380d8:	10bfffc4 	addi	r2,r2,-1
   380dc:	100b883a 	mov	r5,r2
   380e0:	e13ff317 	ldw	r4,-52(fp)
   380e4:	0043af40 	call	43af4 <__mulsi3>
   380e8:	e0bff315 	stw	r2,-52(fp)
    skew = 1 << bit;
   380ec:	00c00044 	movi	r3,1
   380f0:	e0bff117 	ldw	r2,-60(fp)
   380f4:	1884983a 	sll	r2,r3,r2
   380f8:	e0bfef15 	stw	r2,-68(fp)

    /* 4 */
    u_last = secp256k1_scalar_shr_int(&s, w);
   380fc:	e1400a17 	ldw	r5,40(fp)
   38100:	e1000204 	addi	r4,fp,8
   38104:	003626c0 	call	3626c <secp256k1_scalar_shr_int>
   38108:	e0bfed15 	stw	r2,-76(fp)
    while (word * w < WNAF_BITS) {
   3810c:	00002d06 	br	381c4 <secp256k1_wnaf_const+0x18c>
        int sign;
        int even;

        /* 4.1 4.4 */
        u = secp256k1_scalar_shr_int(&s, w);
   38110:	e1400a17 	ldw	r5,40(fp)
   38114:	e1000204 	addi	r4,fp,8
   38118:	003626c0 	call	3626c <secp256k1_scalar_shr_int>
   3811c:	e0bfee15 	stw	r2,-72(fp)
        /* 4.2 */
        even = ((u & 1) == 0);
   38120:	e0bfee17 	ldw	r2,-72(fp)
   38124:	1080004c 	andi	r2,r2,1
   38128:	1005003a 	cmpeq	r2,r2,zero
   3812c:	10803fcc 	andi	r2,r2,255
   38130:	e0bff415 	stw	r2,-48(fp)
        sign = 2 * (u_last > 0) - 1;
   38134:	e0bfed17 	ldw	r2,-76(fp)
   38138:	0080020e 	bge	zero,r2,38144 <secp256k1_wnaf_const+0x10c>
   3813c:	00800044 	movi	r2,1
   38140:	00000106 	br	38148 <secp256k1_wnaf_const+0x110>
   38144:	00bfffc4 	movi	r2,-1
   38148:	e0bff515 	stw	r2,-44(fp)
        u += sign * even;
   3814c:	e17ff417 	ldw	r5,-48(fp)
   38150:	e13ff517 	ldw	r4,-44(fp)
   38154:	0043af40 	call	43af4 <__mulsi3>
   38158:	1007883a 	mov	r3,r2
   3815c:	e0bfee17 	ldw	r2,-72(fp)
   38160:	10c5883a 	add	r2,r2,r3
   38164:	e0bfee15 	stw	r2,-72(fp)
        u_last -= sign * even * (1 << w);
   38168:	e17ff417 	ldw	r5,-48(fp)
   3816c:	e13ff517 	ldw	r4,-44(fp)
   38170:	0043af40 	call	43af4 <__mulsi3>
   38174:	1007883a 	mov	r3,r2
   38178:	e0800a17 	ldw	r2,40(fp)
   3817c:	1884983a 	sll	r2,r3,r2
   38180:	e0ffed17 	ldw	r3,-76(fp)
   38184:	1885c83a 	sub	r2,r3,r2
   38188:	e0bfed15 	stw	r2,-76(fp)

        /* 4.3, adapted for global sign change */
        wnaf[word++] = u_last * global_sign;
   3818c:	e0bfec17 	ldw	r2,-80(fp)
   38190:	10c00044 	addi	r3,r2,1
   38194:	e0ffec15 	stw	r3,-80(fp)
   38198:	1085883a 	add	r2,r2,r2
   3819c:	1085883a 	add	r2,r2,r2
   381a0:	1007883a 	mov	r3,r2
   381a4:	e0bffe17 	ldw	r2,-8(fp)
   381a8:	10e1883a 	add	r16,r2,r3
   381ac:	e17ff317 	ldw	r5,-52(fp)
   381b0:	e13fed17 	ldw	r4,-76(fp)
   381b4:	0043af40 	call	43af4 <__mulsi3>
   381b8:	80800015 	stw	r2,0(r16)

        u_last = u;
   381bc:	e0bfee17 	ldw	r2,-72(fp)
   381c0:	e0bfed15 	stw	r2,-76(fp)
    global_sign *= not_neg_one * 2 - 1;
    skew = 1 << bit;

    /* 4 */
    u_last = secp256k1_scalar_shr_int(&s, w);
    while (word * w < WNAF_BITS) {
   381c4:	e1400a17 	ldw	r5,40(fp)
   381c8:	e13fec17 	ldw	r4,-80(fp)
   381cc:	0043af40 	call	43af4 <__mulsi3>
   381d0:	10804010 	cmplti	r2,r2,256
   381d4:	103fce1e 	bne	r2,zero,38110 <__alt_mem_epcs_flash_controller+0xfe02f110>
        /* 4.3, adapted for global sign change */
        wnaf[word++] = u_last * global_sign;

        u_last = u;
    }
    wnaf[word] = u * global_sign;
   381d8:	e0bfec17 	ldw	r2,-80(fp)
   381dc:	1085883a 	add	r2,r2,r2
   381e0:	1085883a 	add	r2,r2,r2
   381e4:	1007883a 	mov	r3,r2
   381e8:	e0bffe17 	ldw	r2,-8(fp)
   381ec:	10e1883a 	add	r16,r2,r3
   381f0:	e17ff317 	ldw	r5,-52(fp)
   381f4:	e13fee17 	ldw	r4,-72(fp)
   381f8:	0043af40 	call	43af4 <__mulsi3>
   381fc:	80800015 	stw	r2,0(r16)

    VERIFY_CHECK(secp256k1_scalar_is_zero(&s));
   38200:	e1000204 	addi	r4,fp,8
   38204:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   38208:	1005003a 	cmpeq	r2,r2,zero
   3820c:	10803fcc 	andi	r2,r2,255
   38210:	10000d26 	beq	r2,zero,38248 <secp256k1_wnaf_const+0x210>
   38214:	d0a01617 	ldw	r2,-32680(gp)
   38218:	10c00317 	ldw	r3,12(r2)
   3821c:	00800174 	movhi	r2,5
   38220:	1097f904 	addi	r2,r2,24548
   38224:	d8800015 	stw	r2,0(sp)
   38228:	01c01d04 	movi	r7,116
   3822c:	01800174 	movhi	r6,5
   38230:	3197ee04 	addi	r6,r6,24504
   38234:	01400174 	movhi	r5,5
   38238:	2951e804 	addi	r5,r5,18336
   3823c:	1809883a 	mov	r4,r3
   38240:	00461000 	call	46100 <fprintf>
   38244:	0045fd40 	call	45fd4 <abort>
    VERIFY_CHECK(word == WNAF_SIZE(w));
   38248:	e0800a17 	ldw	r2,40(fp)
   3824c:	10803fc4 	addi	r2,r2,255
   38250:	e1400a17 	ldw	r5,40(fp)
   38254:	1009883a 	mov	r4,r2
   38258:	00439400 	call	43940 <__divsi3>
   3825c:	1007883a 	mov	r3,r2
   38260:	e0bfec17 	ldw	r2,-80(fp)
   38264:	1884c03a 	cmpne	r2,r3,r2
   38268:	10803fcc 	andi	r2,r2,255
   3826c:	10000d26 	beq	r2,zero,382a4 <secp256k1_wnaf_const+0x26c>
   38270:	d0a01617 	ldw	r2,-32680(gp)
   38274:	10c00317 	ldw	r3,12(r2)
   38278:	00800174 	movhi	r2,5
   3827c:	10980604 	addi	r2,r2,24600
   38280:	d8800015 	stw	r2,0(sp)
   38284:	01c01d44 	movi	r7,117
   38288:	01800174 	movhi	r6,5
   3828c:	3197ee04 	addi	r6,r6,24504
   38290:	01400174 	movhi	r5,5
   38294:	2951e804 	addi	r5,r5,18336
   38298:	1809883a 	mov	r4,r3
   3829c:	00461000 	call	46100 <fprintf>
   382a0:	0045fd40 	call	45fd4 <abort>
    return skew;
   382a4:	e0bfef17 	ldw	r2,-68(fp)
}
   382a8:	e6ffff04 	addi	sp,fp,-4
   382ac:	dfc00217 	ldw	ra,8(sp)
   382b0:	df000117 	ldw	fp,4(sp)
   382b4:	dc000017 	ldw	r16,0(sp)
   382b8:	dec00604 	addi	sp,sp,24
   382bc:	f800283a 	ret

000382c0 <secp256k1_ecmult_const>:


static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *scalar) {
   382c0:	defe5604 	addi	sp,sp,-1704
   382c4:	dfc1a915 	stw	ra,1700(sp)
   382c8:	df01a815 	stw	fp,1696(sp)
   382cc:	dc01a715 	stw	r16,1692(sp)
   382d0:	df01a804 	addi	fp,sp,1696
   382d4:	e13ffc15 	stw	r4,-16(fp)
   382d8:	e17ffd15 	stw	r5,-12(fp)
   382dc:	e1bffe15 	stw	r6,-8(fp)
    int skew_lam;
    secp256k1_scalar q_1, q_lam;
#endif

    int i;
    secp256k1_scalar sc = *scalar;
   382e0:	e0bffe17 	ldw	r2,-8(fp)
   382e4:	10c00017 	ldw	r3,0(r2)
   382e8:	e0ff9615 	stw	r3,-424(fp)
   382ec:	10c00117 	ldw	r3,4(r2)
   382f0:	e0ff9715 	stw	r3,-420(fp)
   382f4:	10c00217 	ldw	r3,8(r2)
   382f8:	e0ff9815 	stw	r3,-416(fp)
   382fc:	10c00317 	ldw	r3,12(r2)
   38300:	e0ff9915 	stw	r3,-412(fp)
   38304:	10c00417 	ldw	r3,16(r2)
   38308:	e0ff9a15 	stw	r3,-408(fp)
   3830c:	10c00517 	ldw	r3,20(r2)
   38310:	e0ff9b15 	stw	r3,-404(fp)
   38314:	10c00617 	ldw	r3,24(r2)
   38318:	e0ff9c15 	stw	r3,-400(fp)
   3831c:	10800717 	ldw	r2,28(r2)
   38320:	e0bf9d15 	stw	r2,-396(fp)
    /* split q into q_1 and q_lam (where q = q_1 + q_lam*lambda, and q_1 and q_lam are ~128 bit) */
    secp256k1_scalar_split_lambda(&q_1, &q_lam, &sc);
    skew_1   = secp256k1_wnaf_const(wnaf_1,   q_1,   WINDOW_A - 1);
    skew_lam = secp256k1_wnaf_const(wnaf_lam, q_lam, WINDOW_A - 1);
#else
    skew_1   = secp256k1_wnaf_const(wnaf_1, sc, WINDOW_A - 1);
   38324:	e0ff5504 	addi	r3,fp,-684
   38328:	00800104 	movi	r2,4
   3832c:	d8800515 	stw	r2,20(sp)
   38330:	e0bf9917 	ldw	r2,-412(fp)
   38334:	d8800015 	stw	r2,0(sp)
   38338:	e0bf9a17 	ldw	r2,-408(fp)
   3833c:	d8800115 	stw	r2,4(sp)
   38340:	e0bf9b17 	ldw	r2,-404(fp)
   38344:	d8800215 	stw	r2,8(sp)
   38348:	e0bf9c17 	ldw	r2,-400(fp)
   3834c:	d8800315 	stw	r2,12(sp)
   38350:	e0bf9d17 	ldw	r2,-396(fp)
   38354:	d8800415 	stw	r2,16(sp)
   38358:	e17f9617 	ldw	r5,-424(fp)
   3835c:	e1bf9717 	ldw	r6,-420(fp)
   38360:	e1ff9817 	ldw	r7,-416(fp)
   38364:	1809883a 	mov	r4,r3
   38368:	00380380 	call	38038 <secp256k1_wnaf_const>
   3836c:	e0be6215 	stw	r2,-1656(fp)
     * All multiples are brought to the same Z 'denominator', which is stored
     * in Z. Due to secp256k1' isomorphism we can do all operations pretending
     * that the Z coordinate was 1, use affine addition formulae, and correct
     * the Z coordinate of the result once at the end.
     */
    secp256k1_gej_set_ge(r, a);
   38370:	e17ffd17 	ldw	r5,-12(fp)
   38374:	e13ffc17 	ldw	r4,-16(fp)
   38378:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
    secp256k1_ecmult_odd_multiples_table_globalz_windowa(pre_a, &Z, r);
   3837c:	e0ff4904 	addi	r3,fp,-732
   38380:	e0be6804 	addi	r2,fp,-1632
   38384:	e1bffc17 	ldw	r6,-16(fp)
   38388:	180b883a 	mov	r5,r3
   3838c:	1009883a 	mov	r4,r2
   38390:	00374980 	call	37498 <secp256k1_ecmult_odd_multiples_table_globalz_windowa>
    for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {
   38394:	e03e5e15 	stw	zero,-1672(fp)
   38398:	00000b06 	br	383c8 <secp256k1_ecmult_const+0x108>
        secp256k1_fe_normalize_weak(&pre_a[i].y);
   3839c:	e43e6804 	addi	r16,fp,-1632
   383a0:	01401904 	movi	r5,100
   383a4:	e13e5e17 	ldw	r4,-1672(fp)
   383a8:	0043af40 	call	43af4 <__mulsi3>
   383ac:	10800c04 	addi	r2,r2,48
   383b0:	8085883a 	add	r2,r16,r2
   383b4:	1009883a 	mov	r4,r2
   383b8:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>
     * that the Z coordinate was 1, use affine addition formulae, and correct
     * the Z coordinate of the result once at the end.
     */
    secp256k1_gej_set_ge(r, a);
    secp256k1_ecmult_odd_multiples_table_globalz_windowa(pre_a, &Z, r);
    for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {
   383bc:	e0be5e17 	ldw	r2,-1672(fp)
   383c0:	10800044 	addi	r2,r2,1
   383c4:	e0be5e15 	stw	r2,-1672(fp)
   383c8:	e0be5e17 	ldw	r2,-1672(fp)
   383cc:	10800210 	cmplti	r2,r2,8
   383d0:	103ff21e 	bne	r2,zero,3839c <__alt_mem_epcs_flash_controller+0xfe02f39c>
#endif

    /* first loop iteration (separated out so we can directly set r, rather
     * than having it start at infinity, get doubled several times, then have
     * its new value added to it) */
    i = wnaf_1[WNAF_SIZE(WINDOW_A - 1)];
   383d4:	e0bf9517 	ldw	r2,-428(fp)
   383d8:	e0be5e15 	stw	r2,-1672(fp)
    VERIFY_CHECK(i != 0);
   383dc:	e0be5e17 	ldw	r2,-1672(fp)
   383e0:	1005003a 	cmpeq	r2,r2,zero
   383e4:	10803fcc 	andi	r2,r2,255
   383e8:	10000d26 	beq	r2,zero,38420 <secp256k1_ecmult_const+0x160>
   383ec:	d0a01617 	ldw	r2,-32680(gp)
   383f0:	10c00317 	ldw	r3,12(r2)
   383f4:	00800174 	movhi	r2,5
   383f8:	10981104 	addi	r2,r2,24644
   383fc:	d8800015 	stw	r2,0(sp)
   38400:	01c02a84 	movi	r7,170
   38404:	01800174 	movhi	r6,5
   38408:	3197ee04 	addi	r6,r6,24504
   3840c:	01400174 	movhi	r5,5
   38410:	2951e804 	addi	r5,r5,18336
   38414:	1809883a 	mov	r4,r3
   38418:	00461000 	call	46100 <fprintf>
   3841c:	0045fd40 	call	45fd4 <abort>
    ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a, i, WINDOW_A);
   38420:	e0be5e17 	ldw	r2,-1672(fp)
   38424:	0080020e 	bge	zero,r2,38430 <secp256k1_ecmult_const+0x170>
   38428:	00800044 	movi	r2,1
   3842c:	00000106 	br	38434 <secp256k1_ecmult_const+0x174>
   38430:	00bfffc4 	movi	r2,-1
   38434:	e17e5e17 	ldw	r5,-1672(fp)
   38438:	1009883a 	mov	r4,r2
   3843c:	0043af40 	call	43af4 <__mulsi3>
   38440:	e0be6315 	stw	r2,-1652(fp)
   38444:	e0be6317 	ldw	r2,-1652(fp)
   38448:	1006d7fa 	srli	r3,r2,31
   3844c:	1885883a 	add	r2,r3,r2
   38450:	1005d07a 	srai	r2,r2,1
   38454:	e0be6415 	stw	r2,-1648(fp)
   38458:	e0be5e17 	ldw	r2,-1672(fp)
   3845c:	1080004c 	andi	r2,r2,1
   38460:	1005003a 	cmpeq	r2,r2,zero
   38464:	10803fcc 	andi	r2,r2,255
   38468:	10000d26 	beq	r2,zero,384a0 <secp256k1_ecmult_const+0x1e0>
   3846c:	d0a01617 	ldw	r2,-32680(gp)
   38470:	10c00317 	ldw	r3,12(r2)
   38474:	00800174 	movhi	r2,5
   38478:	10981904 	addi	r2,r2,24676
   3847c:	d8800015 	stw	r2,0(sp)
   38480:	01c02ac4 	movi	r7,171
   38484:	01800174 	movhi	r6,5
   38488:	3197ee04 	addi	r6,r6,24504
   3848c:	01400174 	movhi	r5,5
   38490:	2951e804 	addi	r5,r5,18336
   38494:	1809883a 	mov	r4,r3
   38498:	00461000 	call	46100 <fprintf>
   3849c:	0045fd40 	call	45fd4 <abort>
   384a0:	e0be5e17 	ldw	r2,-1672(fp)
   384a4:	10bffc50 	cmplti	r2,r2,-15
   384a8:	10803fcc 	andi	r2,r2,255
   384ac:	10000d26 	beq	r2,zero,384e4 <secp256k1_ecmult_const+0x224>
   384b0:	d0a01617 	ldw	r2,-32680(gp)
   384b4:	10c00317 	ldw	r3,12(r2)
   384b8:	00800174 	movhi	r2,5
   384bc:	10982304 	addi	r2,r2,24716
   384c0:	d8800015 	stw	r2,0(sp)
   384c4:	01c02ac4 	movi	r7,171
   384c8:	01800174 	movhi	r6,5
   384cc:	3197ee04 	addi	r6,r6,24504
   384d0:	01400174 	movhi	r5,5
   384d4:	2951e804 	addi	r5,r5,18336
   384d8:	1809883a 	mov	r4,r3
   384dc:	00461000 	call	46100 <fprintf>
   384e0:	0045fd40 	call	45fd4 <abort>
   384e4:	e0be5e17 	ldw	r2,-1672(fp)
   384e8:	10800408 	cmpgei	r2,r2,16
   384ec:	10803fcc 	andi	r2,r2,255
   384f0:	10000d26 	beq	r2,zero,38528 <secp256k1_ecmult_const+0x268>
   384f4:	d0a01617 	ldw	r2,-32680(gp)
   384f8:	10c00317 	ldw	r3,12(r2)
   384fc:	00800174 	movhi	r2,5
   38500:	10983004 	addi	r2,r2,24768
   38504:	d8800015 	stw	r2,0(sp)
   38508:	01c02ac4 	movi	r7,171
   3850c:	01800174 	movhi	r6,5
   38510:	3197ee04 	addi	r6,r6,24504
   38514:	01400174 	movhi	r5,5
   38518:	2951e804 	addi	r5,r5,18336
   3851c:	1809883a 	mov	r4,r3
   38520:	00461000 	call	46100 <fprintf>
   38524:	0045fd40 	call	45fd4 <abort>
   38528:	e0bf3004 	addi	r2,fp,-832
   3852c:	1009883a 	mov	r4,r2
   38530:	00155140 	call	15514 <secp256k1_fe_clear>
   38534:	e0bf3004 	addi	r2,fp,-832
   38538:	10800c04 	addi	r2,r2,48
   3853c:	1009883a 	mov	r4,r2
   38540:	00155140 	call	15514 <secp256k1_fe_clear>
   38544:	e03e5f15 	stw	zero,-1668(fp)
   38548:	00002106 	br	385d0 <secp256k1_ecmult_const+0x310>
   3854c:	e43e6804 	addi	r16,fp,-1632
   38550:	01401904 	movi	r5,100
   38554:	e13e5f17 	ldw	r4,-1668(fp)
   38558:	0043af40 	call	43af4 <__mulsi3>
   3855c:	8089883a 	add	r4,r16,r2
   38560:	e0fe5f17 	ldw	r3,-1668(fp)
   38564:	e0be6417 	ldw	r2,-1648(fp)
   38568:	1885003a 	cmpeq	r2,r3,r2
   3856c:	10c03fcc 	andi	r3,r2,255
   38570:	e0bf3004 	addi	r2,fp,-832
   38574:	180d883a 	mov	r6,r3
   38578:	200b883a 	mov	r5,r4
   3857c:	1009883a 	mov	r4,r2
   38580:	00200b80 	call	200b8 <secp256k1_fe_cmov>
   38584:	e43e6804 	addi	r16,fp,-1632
   38588:	01401904 	movi	r5,100
   3858c:	e13e5f17 	ldw	r4,-1668(fp)
   38590:	0043af40 	call	43af4 <__mulsi3>
   38594:	10800c04 	addi	r2,r2,48
   38598:	8089883a 	add	r4,r16,r2
   3859c:	e0fe5f17 	ldw	r3,-1668(fp)
   385a0:	e0be6417 	ldw	r2,-1648(fp)
   385a4:	1885003a 	cmpeq	r2,r3,r2
   385a8:	10c03fcc 	andi	r3,r2,255
   385ac:	e0bf3004 	addi	r2,fp,-832
   385b0:	10800c04 	addi	r2,r2,48
   385b4:	180d883a 	mov	r6,r3
   385b8:	200b883a 	mov	r5,r4
   385bc:	1009883a 	mov	r4,r2
   385c0:	00200b80 	call	200b8 <secp256k1_fe_cmov>
   385c4:	e0be5f17 	ldw	r2,-1668(fp)
   385c8:	10800044 	addi	r2,r2,1
   385cc:	e0be5f15 	stw	r2,-1668(fp)
   385d0:	e0be5f17 	ldw	r2,-1668(fp)
   385d4:	10800210 	cmplti	r2,r2,8
   385d8:	103fdc1e 	bne	r2,zero,3854c <__alt_mem_epcs_flash_controller+0xfe02f54c>
   385dc:	e03f4815 	stw	zero,-736(fp)
   385e0:	e0bf3004 	addi	r2,fp,-832
   385e4:	10c00c04 	addi	r3,r2,48
   385e8:	e0bf9e04 	addi	r2,fp,-392
   385ec:	01800044 	movi	r6,1
   385f0:	180b883a 	mov	r5,r3
   385f4:	1009883a 	mov	r4,r2
   385f8:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   385fc:	e0fe5e17 	ldw	r3,-1672(fp)
   38600:	e0be6317 	ldw	r2,-1652(fp)
   38604:	1884c03a 	cmpne	r2,r3,r2
   38608:	11003fcc 	andi	r4,r2,255
   3860c:	e0ff9e04 	addi	r3,fp,-392
   38610:	e0bf3004 	addi	r2,fp,-832
   38614:	10800c04 	addi	r2,r2,48
   38618:	200d883a 	mov	r6,r4
   3861c:	180b883a 	mov	r5,r3
   38620:	1009883a 	mov	r4,r2
   38624:	00200b80 	call	200b8 <secp256k1_fe_cmov>
    secp256k1_gej_set_ge(r, &tmpa);
   38628:	e0bf3004 	addi	r2,fp,-832
   3862c:	100b883a 	mov	r5,r2
   38630:	e13ffc17 	ldw	r4,-16(fp)
   38634:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
    VERIFY_CHECK(i != 0);
    ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a_lam, i, WINDOW_A);
    secp256k1_gej_add_ge(r, r, &tmpa);
#endif
    /* remaining loop iterations */
    for (i = WNAF_SIZE(WINDOW_A - 1) - 1; i >= 0; i--) {
   38638:	00800fc4 	movi	r2,63
   3863c:	e0be5e15 	stw	r2,-1672(fp)
   38640:	0000af06 	br	38900 <secp256k1_ecmult_const+0x640>
        int n;
        int j;
        for (j = 0; j < WINDOW_A - 1; ++j) {
   38644:	e03e6015 	stw	zero,-1664(fp)
   38648:	00000706 	br	38668 <secp256k1_ecmult_const+0x3a8>
            secp256k1_gej_double_nonzero(r, r, NULL);
   3864c:	000d883a 	mov	r6,zero
   38650:	e17ffc17 	ldw	r5,-16(fp)
   38654:	e13ffc17 	ldw	r4,-16(fp)
   38658:	00234380 	call	23438 <secp256k1_gej_double_nonzero>
#endif
    /* remaining loop iterations */
    for (i = WNAF_SIZE(WINDOW_A - 1) - 1; i >= 0; i--) {
        int n;
        int j;
        for (j = 0; j < WINDOW_A - 1; ++j) {
   3865c:	e0be6017 	ldw	r2,-1664(fp)
   38660:	10800044 	addi	r2,r2,1
   38664:	e0be6015 	stw	r2,-1664(fp)
   38668:	e0be6017 	ldw	r2,-1664(fp)
   3866c:	10800110 	cmplti	r2,r2,4
   38670:	103ff61e 	bne	r2,zero,3864c <__alt_mem_epcs_flash_controller+0xfe02f64c>
            secp256k1_gej_double_nonzero(r, r, NULL);
        }

        n = wnaf_1[i];
   38674:	e0be5e17 	ldw	r2,-1672(fp)
   38678:	1085883a 	add	r2,r2,r2
   3867c:	1085883a 	add	r2,r2,r2
   38680:	e0fe5e04 	addi	r3,fp,-1672
   38684:	1885883a 	add	r2,r3,r2
   38688:	1080f704 	addi	r2,r2,988
   3868c:	10800017 	ldw	r2,0(r2)
   38690:	e0be6515 	stw	r2,-1644(fp)
        ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a, n, WINDOW_A);
   38694:	e0be6517 	ldw	r2,-1644(fp)
   38698:	0080020e 	bge	zero,r2,386a4 <secp256k1_ecmult_const+0x3e4>
   3869c:	00800044 	movi	r2,1
   386a0:	00000106 	br	386a8 <secp256k1_ecmult_const+0x3e8>
   386a4:	00bfffc4 	movi	r2,-1
   386a8:	e17e6517 	ldw	r5,-1644(fp)
   386ac:	1009883a 	mov	r4,r2
   386b0:	0043af40 	call	43af4 <__mulsi3>
   386b4:	e0be6615 	stw	r2,-1640(fp)
   386b8:	e0be6617 	ldw	r2,-1640(fp)
   386bc:	1006d7fa 	srli	r3,r2,31
   386c0:	1885883a 	add	r2,r3,r2
   386c4:	1005d07a 	srai	r2,r2,1
   386c8:	e0be6715 	stw	r2,-1636(fp)
   386cc:	e0be6517 	ldw	r2,-1644(fp)
   386d0:	1080004c 	andi	r2,r2,1
   386d4:	1005003a 	cmpeq	r2,r2,zero
   386d8:	10803fcc 	andi	r2,r2,255
   386dc:	10000d26 	beq	r2,zero,38714 <secp256k1_ecmult_const+0x454>
   386e0:	d0a01617 	ldw	r2,-32680(gp)
   386e4:	10c00317 	ldw	r3,12(r2)
   386e8:	00800174 	movhi	r2,5
   386ec:	1097af04 	addi	r2,r2,24252
   386f0:	d8800015 	stw	r2,0(sp)
   386f4:	01c02f04 	movi	r7,188
   386f8:	01800174 	movhi	r6,5
   386fc:	3197ee04 	addi	r6,r6,24504
   38700:	01400174 	movhi	r5,5
   38704:	2951e804 	addi	r5,r5,18336
   38708:	1809883a 	mov	r4,r3
   3870c:	00461000 	call	46100 <fprintf>
   38710:	0045fd40 	call	45fd4 <abort>
   38714:	e0be6517 	ldw	r2,-1644(fp)
   38718:	10bffc50 	cmplti	r2,r2,-15
   3871c:	10803fcc 	andi	r2,r2,255
   38720:	10000d26 	beq	r2,zero,38758 <secp256k1_ecmult_const+0x498>
   38724:	d0a01617 	ldw	r2,-32680(gp)
   38728:	10c00317 	ldw	r3,12(r2)
   3872c:	00800174 	movhi	r2,5
   38730:	1097b904 	addi	r2,r2,24292
   38734:	d8800015 	stw	r2,0(sp)
   38738:	01c02f04 	movi	r7,188
   3873c:	01800174 	movhi	r6,5
   38740:	3197ee04 	addi	r6,r6,24504
   38744:	01400174 	movhi	r5,5
   38748:	2951e804 	addi	r5,r5,18336
   3874c:	1809883a 	mov	r4,r3
   38750:	00461000 	call	46100 <fprintf>
   38754:	0045fd40 	call	45fd4 <abort>
   38758:	e0be6517 	ldw	r2,-1644(fp)
   3875c:	10800408 	cmpgei	r2,r2,16
   38760:	10803fcc 	andi	r2,r2,255
   38764:	10000d26 	beq	r2,zero,3879c <secp256k1_ecmult_const+0x4dc>
   38768:	d0a01617 	ldw	r2,-32680(gp)
   3876c:	10c00317 	ldw	r3,12(r2)
   38770:	00800174 	movhi	r2,5
   38774:	1097c604 	addi	r2,r2,24344
   38778:	d8800015 	stw	r2,0(sp)
   3877c:	01c02f04 	movi	r7,188
   38780:	01800174 	movhi	r6,5
   38784:	3197ee04 	addi	r6,r6,24504
   38788:	01400174 	movhi	r5,5
   3878c:	2951e804 	addi	r5,r5,18336
   38790:	1809883a 	mov	r4,r3
   38794:	00461000 	call	46100 <fprintf>
   38798:	0045fd40 	call	45fd4 <abort>
   3879c:	e0bf3004 	addi	r2,fp,-832
   387a0:	1009883a 	mov	r4,r2
   387a4:	00155140 	call	15514 <secp256k1_fe_clear>
   387a8:	e0bf3004 	addi	r2,fp,-832
   387ac:	10800c04 	addi	r2,r2,48
   387b0:	1009883a 	mov	r4,r2
   387b4:	00155140 	call	15514 <secp256k1_fe_clear>
   387b8:	e03e6115 	stw	zero,-1660(fp)
   387bc:	00002106 	br	38844 <secp256k1_ecmult_const+0x584>
   387c0:	e43e6804 	addi	r16,fp,-1632
   387c4:	01401904 	movi	r5,100
   387c8:	e13e6117 	ldw	r4,-1660(fp)
   387cc:	0043af40 	call	43af4 <__mulsi3>
   387d0:	8089883a 	add	r4,r16,r2
   387d4:	e0fe6117 	ldw	r3,-1660(fp)
   387d8:	e0be6717 	ldw	r2,-1636(fp)
   387dc:	1885003a 	cmpeq	r2,r3,r2
   387e0:	10c03fcc 	andi	r3,r2,255
   387e4:	e0bf3004 	addi	r2,fp,-832
   387e8:	180d883a 	mov	r6,r3
   387ec:	200b883a 	mov	r5,r4
   387f0:	1009883a 	mov	r4,r2
   387f4:	00200b80 	call	200b8 <secp256k1_fe_cmov>
   387f8:	e43e6804 	addi	r16,fp,-1632
   387fc:	01401904 	movi	r5,100
   38800:	e13e6117 	ldw	r4,-1660(fp)
   38804:	0043af40 	call	43af4 <__mulsi3>
   38808:	10800c04 	addi	r2,r2,48
   3880c:	8089883a 	add	r4,r16,r2
   38810:	e0fe6117 	ldw	r3,-1660(fp)
   38814:	e0be6717 	ldw	r2,-1636(fp)
   38818:	1885003a 	cmpeq	r2,r3,r2
   3881c:	10c03fcc 	andi	r3,r2,255
   38820:	e0bf3004 	addi	r2,fp,-832
   38824:	10800c04 	addi	r2,r2,48
   38828:	180d883a 	mov	r6,r3
   3882c:	200b883a 	mov	r5,r4
   38830:	1009883a 	mov	r4,r2
   38834:	00200b80 	call	200b8 <secp256k1_fe_cmov>
   38838:	e0be6117 	ldw	r2,-1660(fp)
   3883c:	10800044 	addi	r2,r2,1
   38840:	e0be6115 	stw	r2,-1660(fp)
   38844:	e0be6117 	ldw	r2,-1660(fp)
   38848:	10800210 	cmplti	r2,r2,8
   3884c:	103fdc1e 	bne	r2,zero,387c0 <__alt_mem_epcs_flash_controller+0xfe02f7c0>
   38850:	e03f4815 	stw	zero,-736(fp)
   38854:	e0bf3004 	addi	r2,fp,-832
   38858:	10c00c04 	addi	r3,r2,48
   3885c:	e0bf9e04 	addi	r2,fp,-392
   38860:	01800044 	movi	r6,1
   38864:	180b883a 	mov	r5,r3
   38868:	1009883a 	mov	r4,r2
   3886c:	0015ae80 	call	15ae8 <secp256k1_fe_negate>
   38870:	e0fe6517 	ldw	r3,-1644(fp)
   38874:	e0be6617 	ldw	r2,-1640(fp)
   38878:	1884c03a 	cmpne	r2,r3,r2
   3887c:	11003fcc 	andi	r4,r2,255
   38880:	e0ff9e04 	addi	r3,fp,-392
   38884:	e0bf3004 	addi	r2,fp,-832
   38888:	10800c04 	addi	r2,r2,48
   3888c:	200d883a 	mov	r6,r4
   38890:	180b883a 	mov	r5,r3
   38894:	1009883a 	mov	r4,r2
   38898:	00200b80 	call	200b8 <secp256k1_fe_cmov>
        VERIFY_CHECK(n != 0);
   3889c:	e0be6517 	ldw	r2,-1644(fp)
   388a0:	1005003a 	cmpeq	r2,r2,zero
   388a4:	10803fcc 	andi	r2,r2,255
   388a8:	10000d26 	beq	r2,zero,388e0 <secp256k1_ecmult_const+0x620>
   388ac:	d0a01617 	ldw	r2,-32680(gp)
   388b0:	10c00317 	ldw	r3,12(r2)
   388b4:	00800174 	movhi	r2,5
   388b8:	10983d04 	addi	r2,r2,24820
   388bc:	d8800015 	stw	r2,0(sp)
   388c0:	01c02f44 	movi	r7,189
   388c4:	01800174 	movhi	r6,5
   388c8:	3197ee04 	addi	r6,r6,24504
   388cc:	01400174 	movhi	r5,5
   388d0:	2951e804 	addi	r5,r5,18336
   388d4:	1809883a 	mov	r4,r3
   388d8:	00461000 	call	46100 <fprintf>
   388dc:	0045fd40 	call	45fd4 <abort>
        secp256k1_gej_add_ge(r, r, &tmpa);
   388e0:	e0bf3004 	addi	r2,fp,-832
   388e4:	100d883a 	mov	r6,r2
   388e8:	e17ffc17 	ldw	r5,-16(fp)
   388ec:	e13ffc17 	ldw	r4,-16(fp)
   388f0:	00244140 	call	24414 <secp256k1_gej_add_ge>
    VERIFY_CHECK(i != 0);
    ECMULT_CONST_TABLE_GET_GE(&tmpa, pre_a_lam, i, WINDOW_A);
    secp256k1_gej_add_ge(r, r, &tmpa);
#endif
    /* remaining loop iterations */
    for (i = WNAF_SIZE(WINDOW_A - 1) - 1; i >= 0; i--) {
   388f4:	e0be5e17 	ldw	r2,-1672(fp)
   388f8:	10bfffc4 	addi	r2,r2,-1
   388fc:	e0be5e15 	stw	r2,-1672(fp)
   38900:	e0be5e17 	ldw	r2,-1672(fp)
   38904:	103f4f0e 	bge	r2,zero,38644 <__alt_mem_epcs_flash_controller+0xfe02f644>
        VERIFY_CHECK(n != 0);
        secp256k1_gej_add_ge(r, r, &tmpa);
#endif
    }

    secp256k1_fe_mul(&r->z, &r->z, &Z);
   38908:	e0bffc17 	ldw	r2,-16(fp)
   3890c:	10c01804 	addi	r3,r2,96
   38910:	e0bffc17 	ldw	r2,-16(fp)
   38914:	10801804 	addi	r2,r2,96
   38918:	e13f4904 	addi	r4,fp,-732
   3891c:	200d883a 	mov	r6,r4
   38920:	100b883a 	mov	r5,r2
   38924:	1809883a 	mov	r4,r3
   38928:	001feb40 	call	1feb4 <secp256k1_fe_mul>

    {
        /* Correct for wNAF skew */
        secp256k1_ge correction = *a;
   3892c:	e0fffd17 	ldw	r3,-12(fp)
   38930:	e0bfc304 	addi	r2,fp,-244
   38934:	1809883a 	mov	r4,r3
   38938:	00c01904 	movi	r3,100
   3893c:	180d883a 	mov	r6,r3
   38940:	200b883a 	mov	r5,r4
   38944:	1009883a 	mov	r4,r2
   38948:	00463980 	call	46398 <memcpy>
#ifdef USE_ENDOMORPHISM
        secp256k1_ge_storage correction_lam_stor;
#endif
        secp256k1_ge_storage a2_stor;
        secp256k1_gej tmpj;
        secp256k1_gej_set_ge(&tmpj, &correction);
   3894c:	e0ffc304 	addi	r3,fp,-244
   38950:	e0bf9e04 	addi	r2,fp,-392
   38954:	180b883a 	mov	r5,r3
   38958:	1009883a 	mov	r4,r2
   3895c:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
        secp256k1_gej_double_var(&tmpj, &tmpj, NULL);
   38960:	e0ff9e04 	addi	r3,fp,-392
   38964:	e0bf9e04 	addi	r2,fp,-392
   38968:	000d883a 	mov	r6,zero
   3896c:	180b883a 	mov	r5,r3
   38970:	1009883a 	mov	r4,r2
   38974:	00231500 	call	23150 <secp256k1_gej_double_var>
        secp256k1_ge_set_gej(&correction, &tmpj);
   38978:	e0ff9e04 	addi	r3,fp,-392
   3897c:	e0bfc304 	addi	r2,fp,-244
   38980:	180b883a 	mov	r5,r3
   38984:	1009883a 	mov	r4,r2
   38988:	0021e940 	call	21e94 <secp256k1_ge_set_gej>
        secp256k1_ge_to_storage(&correction_1_stor, a);
   3898c:	e0bfec04 	addi	r2,fp,-80
   38990:	e17ffd17 	ldw	r5,-12(fp)
   38994:	1009883a 	mov	r4,r2
   38998:	0024c080 	call	24c08 <secp256k1_ge_to_storage>
#ifdef USE_ENDOMORPHISM
        secp256k1_ge_to_storage(&correction_lam_stor, a);
#endif
        secp256k1_ge_to_storage(&a2_stor, &correction);
   3899c:	e0ffc304 	addi	r3,fp,-244
   389a0:	e0bfdc04 	addi	r2,fp,-144
   389a4:	180b883a 	mov	r5,r3
   389a8:	1009883a 	mov	r4,r2
   389ac:	0024c080 	call	24c08 <secp256k1_ge_to_storage>

        /* For odd numbers this is 2a (so replace it), for even ones a (so no-op) */
        secp256k1_ge_storage_cmov(&correction_1_stor, &a2_stor, skew_1 == 2);
   389b0:	e0be6217 	ldw	r2,-1656(fp)
   389b4:	108000a0 	cmpeqi	r2,r2,2
   389b8:	11003fcc 	andi	r4,r2,255
   389bc:	e0ffdc04 	addi	r3,fp,-144
   389c0:	e0bfec04 	addi	r2,fp,-80
   389c4:	200d883a 	mov	r6,r4
   389c8:	180b883a 	mov	r5,r3
   389cc:	1009883a 	mov	r4,r2
   389d0:	0024dec0 	call	24dec <secp256k1_ge_storage_cmov>
#ifdef USE_ENDOMORPHISM
        secp256k1_ge_storage_cmov(&correction_lam_stor, &a2_stor, skew_lam == 2);
#endif

        /* Apply the correction */
        secp256k1_ge_from_storage(&correction, &correction_1_stor);
   389d4:	e0ffec04 	addi	r3,fp,-80
   389d8:	e0bfc304 	addi	r2,fp,-244
   389dc:	180b883a 	mov	r5,r3
   389e0:	1009883a 	mov	r4,r2
   389e4:	0024d840 	call	24d84 <secp256k1_ge_from_storage>
        secp256k1_ge_neg(&correction, &correction);
   389e8:	e0ffc304 	addi	r3,fp,-244
   389ec:	e0bfc304 	addi	r2,fp,-244
   389f0:	180b883a 	mov	r5,r3
   389f4:	1009883a 	mov	r4,r2
   389f8:	0021e140 	call	21e14 <secp256k1_ge_neg>
        secp256k1_gej_add_ge(r, r, &correction);
   389fc:	e0bfc304 	addi	r2,fp,-244
   38a00:	100d883a 	mov	r6,r2
   38a04:	e17ffc17 	ldw	r5,-16(fp)
   38a08:	e13ffc17 	ldw	r4,-16(fp)
   38a0c:	00244140 	call	24414 <secp256k1_gej_add_ge>
        secp256k1_ge_neg(&correction, &correction);
        secp256k1_ge_mul_lambda(&correction, &correction);
        secp256k1_gej_add_ge(r, r, &correction);
#endif
    }
}
   38a10:	0001883a 	nop
   38a14:	e6ffff04 	addi	sp,fp,-4
   38a18:	dfc00217 	ldw	ra,8(sp)
   38a1c:	df000117 	ldw	fp,4(sp)
   38a20:	dc000017 	ldw	r16,0(sp)
   38a24:	dec00304 	addi	sp,sp,12
   38a28:	f800283a 	ret

00038a2c <gettimedouble>:

#include <stdio.h>
#include <math.h>
#include "sys/time.h"

static double gettimedouble(void) {
   38a2c:	defffa04 	addi	sp,sp,-24
   38a30:	dfc00515 	stw	ra,20(sp)
   38a34:	df000415 	stw	fp,16(sp)
   38a38:	dc400315 	stw	r17,12(sp)
   38a3c:	dc000215 	stw	r16,8(sp)
   38a40:	df000404 	addi	fp,sp,16
    struct timeval tv;
    gettimeofday(&tv, NULL);
   38a44:	000b883a 	mov	r5,zero
   38a48:	e13ffc04 	addi	r4,fp,-16
   38a4c:	004854c0 	call	4854c <gettimeofday>
    return tv.tv_usec * 0.000001 + tv.tv_sec;
   38a50:	e0bffd17 	ldw	r2,-12(fp)
   38a54:	1009883a 	mov	r4,r2
   38a58:	0045e940 	call	45e94 <__floatsidf>
   38a5c:	1011883a 	mov	r8,r2
   38a60:	1813883a 	mov	r9,r3
   38a64:	01a82db4 	movhi	r6,41142
   38a68:	31bb6344 	addi	r6,r6,-4723
   38a6c:	01cfac74 	movhi	r7,16049
   38a70:	39f1bdc4 	addi	r7,r7,-14601
   38a74:	4009883a 	mov	r4,r8
   38a78:	480b883a 	mov	r5,r9
   38a7c:	0044e800 	call	44e80 <__muldf3>
   38a80:	1009883a 	mov	r4,r2
   38a84:	180b883a 	mov	r5,r3
   38a88:	2021883a 	mov	r16,r4
   38a8c:	2823883a 	mov	r17,r5
   38a90:	e0bffc17 	ldw	r2,-16(fp)
   38a94:	1009883a 	mov	r4,r2
   38a98:	0045e940 	call	45e94 <__floatsidf>
   38a9c:	1009883a 	mov	r4,r2
   38aa0:	180b883a 	mov	r5,r3
   38aa4:	200d883a 	mov	r6,r4
   38aa8:	280f883a 	mov	r7,r5
   38aac:	8009883a 	mov	r4,r16
   38ab0:	880b883a 	mov	r5,r17
   38ab4:	0043b1c0 	call	43b1c <__adddf3>
   38ab8:	100f883a 	mov	r7,r2
   38abc:	1811883a 	mov	r8,r3
   38ac0:	380b883a 	mov	r5,r7
   38ac4:	400d883a 	mov	r6,r8
   38ac8:	2807883a 	mov	r3,r5
   38acc:	3009883a 	mov	r4,r6
}
   38ad0:	1805883a 	mov	r2,r3
   38ad4:	2007883a 	mov	r3,r4
   38ad8:	e6fffe04 	addi	sp,fp,-8
   38adc:	dfc00317 	ldw	ra,12(sp)
   38ae0:	df000217 	ldw	fp,8(sp)
   38ae4:	dc400117 	ldw	r17,4(sp)
   38ae8:	dc000017 	ldw	r16,0(sp)
   38aec:	dec00404 	addi	sp,sp,16
   38af0:	f800283a 	ret

00038af4 <print_number>:

void print_number(double x) {
   38af4:	defff904 	addi	sp,sp,-28
   38af8:	dfc00615 	stw	ra,24(sp)
   38afc:	df000515 	stw	fp,20(sp)
   38b00:	df000504 	addi	fp,sp,20
   38b04:	e13ffe15 	stw	r4,-8(fp)
   38b08:	e17fff15 	stw	r5,-4(fp)
    double y = x;
   38b0c:	e0bffe17 	ldw	r2,-8(fp)
   38b10:	e0bffb15 	stw	r2,-20(fp)
   38b14:	e0bfff17 	ldw	r2,-4(fp)
   38b18:	e0bffc15 	stw	r2,-16(fp)
    int c = 0;
   38b1c:	e03ffd15 	stw	zero,-12(fp)
    if (y < 0.0) {
   38b20:	000d883a 	mov	r6,zero
   38b24:	000f883a 	mov	r7,zero
   38b28:	e13ffb17 	ldw	r4,-20(fp)
   38b2c:	e17ffc17 	ldw	r5,-16(fp)
   38b30:	0044d8c0 	call	44d8c <__ledf2>
   38b34:	1000050e 	bge	r2,zero,38b4c <print_number+0x58>
        y = -y;
   38b38:	e0bffb17 	ldw	r2,-20(fp)
   38b3c:	e0bffb15 	stw	r2,-20(fp)
   38b40:	e0bffc17 	ldw	r2,-16(fp)
   38b44:	10a0003c 	xorhi	r2,r2,32768
   38b48:	e0bffc15 	stw	r2,-16(fp)
    }
    while (y < 100.0) {
   38b4c:	00000c06 	br	38b80 <print_number+0x8c>
        y *= 10.0;
   38b50:	000d883a 	mov	r6,zero
   38b54:	01d00934 	movhi	r7,16420
   38b58:	e13ffb17 	ldw	r4,-20(fp)
   38b5c:	e17ffc17 	ldw	r5,-16(fp)
   38b60:	0044e800 	call	44e80 <__muldf3>
   38b64:	1009883a 	mov	r4,r2
   38b68:	180b883a 	mov	r5,r3
   38b6c:	e13ffb15 	stw	r4,-20(fp)
   38b70:	e17ffc15 	stw	r5,-16(fp)
        c++;
   38b74:	e0bffd17 	ldw	r2,-12(fp)
   38b78:	10800044 	addi	r2,r2,1
   38b7c:	e0bffd15 	stw	r2,-12(fp)
    double y = x;
    int c = 0;
    if (y < 0.0) {
        y = -y;
    }
    while (y < 100.0) {
   38b80:	000d883a 	mov	r6,zero
   38b84:	01d01674 	movhi	r7,16473
   38b88:	e13ffb17 	ldw	r4,-20(fp)
   38b8c:	e17ffc17 	ldw	r5,-16(fp)
   38b90:	0044d8c0 	call	44d8c <__ledf2>
   38b94:	103fee16 	blt	r2,zero,38b50 <__alt_mem_epcs_flash_controller+0xfe02fb50>
        y *= 10.0;
        c++;
    }
    printf("%.*f", c, x);
   38b98:	e1bffe17 	ldw	r6,-8(fp)
   38b9c:	e1ffff17 	ldw	r7,-4(fp)
   38ba0:	e17ffd17 	ldw	r5,-12(fp)
   38ba4:	01000174 	movhi	r4,5
   38ba8:	21184504 	addi	r4,r4,24852
   38bac:	00467040 	call	46704 <printf>
}
   38bb0:	0001883a 	nop
   38bb4:	e037883a 	mov	sp,fp
   38bb8:	dfc00117 	ldw	ra,4(sp)
   38bbc:	df000017 	ldw	fp,0(sp)
   38bc0:	dec00204 	addi	sp,sp,8
   38bc4:	f800283a 	ret

00038bc8 <run_benchmark>:

void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {
   38bc8:	deffed04 	addi	sp,sp,-76
   38bcc:	dfc01215 	stw	ra,72(sp)
   38bd0:	df001115 	stw	fp,68(sp)
   38bd4:	dc401015 	stw	r17,64(sp)
   38bd8:	dc000f15 	stw	r16,60(sp)
   38bdc:	df001104 	addi	fp,sp,68
   38be0:	e13ffa15 	stw	r4,-24(fp)
   38be4:	e17ffb15 	stw	r5,-20(fp)
   38be8:	e1bffc15 	stw	r6,-16(fp)
   38bec:	e1fffd15 	stw	r7,-12(fp)
    int i;
    double min = HUGE_VAL;
   38bf0:	e03ff015 	stw	zero,-64(fp)
   38bf4:	009ffc34 	movhi	r2,32752
   38bf8:	e0bff115 	stw	r2,-60(fp)
    double sum = 0.0;
   38bfc:	e03ff215 	stw	zero,-56(fp)
   38c00:	e03ff315 	stw	zero,-52(fp)
    double max = 0.0;
   38c04:	e03ff415 	stw	zero,-48(fp)
   38c08:	e03ff515 	stw	zero,-44(fp)
    for (i = 0; i < count; i++) {
   38c0c:	e03fef15 	stw	zero,-68(fp)
   38c10:	00003c06 	br	38d04 <run_benchmark+0x13c>
        double begin, total;
        if (setup != NULL) {
   38c14:	e0bffc17 	ldw	r2,-16(fp)
   38c18:	10000326 	beq	r2,zero,38c28 <run_benchmark+0x60>
            setup(data);
   38c1c:	e0bffc17 	ldw	r2,-16(fp)
   38c20:	e1000217 	ldw	r4,8(fp)
   38c24:	103ee83a 	callr	r2
        }
        begin = gettimedouble();
   38c28:	0038a2c0 	call	38a2c <gettimedouble>
   38c2c:	e0bff615 	stw	r2,-40(fp)
   38c30:	e0fff715 	stw	r3,-36(fp)
        benchmark(data);
   38c34:	e0bffb17 	ldw	r2,-20(fp)
   38c38:	e1000217 	ldw	r4,8(fp)
   38c3c:	103ee83a 	callr	r2
        total = gettimedouble() - begin;
   38c40:	0038a2c0 	call	38a2c <gettimedouble>
   38c44:	1011883a 	mov	r8,r2
   38c48:	1813883a 	mov	r9,r3
   38c4c:	e1bff617 	ldw	r6,-40(fp)
   38c50:	e1fff717 	ldw	r7,-36(fp)
   38c54:	4009883a 	mov	r4,r8
   38c58:	480b883a 	mov	r5,r9
   38c5c:	00455980 	call	45598 <__subdf3>
   38c60:	1009883a 	mov	r4,r2
   38c64:	180b883a 	mov	r5,r3
   38c68:	e13ff815 	stw	r4,-32(fp)
   38c6c:	e17ff915 	stw	r5,-28(fp)
        if (teardown != NULL) {
   38c70:	e0bffd17 	ldw	r2,-12(fp)
   38c74:	10000326 	beq	r2,zero,38c84 <run_benchmark+0xbc>
            teardown(data);
   38c78:	e0bffd17 	ldw	r2,-12(fp)
   38c7c:	e1000217 	ldw	r4,8(fp)
   38c80:	103ee83a 	callr	r2
        }
        if (total < min) {
   38c84:	e1bff017 	ldw	r6,-64(fp)
   38c88:	e1fff117 	ldw	r7,-60(fp)
   38c8c:	e13ff817 	ldw	r4,-32(fp)
   38c90:	e17ff917 	ldw	r5,-28(fp)
   38c94:	0044d8c0 	call	44d8c <__ledf2>
   38c98:	1000040e 	bge	r2,zero,38cac <run_benchmark+0xe4>
            min = total;
   38c9c:	e0bff817 	ldw	r2,-32(fp)
   38ca0:	e0bff015 	stw	r2,-64(fp)
   38ca4:	e0bff917 	ldw	r2,-28(fp)
   38ca8:	e0bff115 	stw	r2,-60(fp)
        }
        if (total > max) {
   38cac:	e1bff417 	ldw	r6,-48(fp)
   38cb0:	e1fff517 	ldw	r7,-44(fp)
   38cb4:	e13ff817 	ldw	r4,-32(fp)
   38cb8:	e17ff917 	ldw	r5,-28(fp)
   38cbc:	0044cb00 	call	44cb0 <__gedf2>
   38cc0:	0080040e 	bge	zero,r2,38cd4 <run_benchmark+0x10c>
            max = total;
   38cc4:	e0bff817 	ldw	r2,-32(fp)
   38cc8:	e0bff415 	stw	r2,-48(fp)
   38ccc:	e0bff917 	ldw	r2,-28(fp)
   38cd0:	e0bff515 	stw	r2,-44(fp)
        }
        sum += total;
   38cd4:	e1bff817 	ldw	r6,-32(fp)
   38cd8:	e1fff917 	ldw	r7,-28(fp)
   38cdc:	e13ff217 	ldw	r4,-56(fp)
   38ce0:	e17ff317 	ldw	r5,-52(fp)
   38ce4:	0043b1c0 	call	43b1c <__adddf3>
   38ce8:	1009883a 	mov	r4,r2
   38cec:	180b883a 	mov	r5,r3
   38cf0:	e13ff215 	stw	r4,-56(fp)
   38cf4:	e17ff315 	stw	r5,-52(fp)
void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {
    int i;
    double min = HUGE_VAL;
    double sum = 0.0;
    double max = 0.0;
    for (i = 0; i < count; i++) {
   38cf8:	e0bfef17 	ldw	r2,-68(fp)
   38cfc:	10800044 	addi	r2,r2,1
   38d00:	e0bfef15 	stw	r2,-68(fp)
   38d04:	e0ffef17 	ldw	r3,-68(fp)
   38d08:	e0800317 	ldw	r2,12(fp)
   38d0c:	18bfc116 	blt	r3,r2,38c14 <__alt_mem_epcs_flash_controller+0xfe02fc14>
        if (total > max) {
            max = total;
        }
        sum += total;
    }
    printf("%s: min ", name);
   38d10:	e17ffa17 	ldw	r5,-24(fp)
   38d14:	01000174 	movhi	r4,5
   38d18:	21184704 	addi	r4,r4,24860
   38d1c:	00467040 	call	46704 <printf>
    print_number(min * 1000000.0 / iter);
   38d20:	000d883a 	mov	r6,zero
   38d24:	01d04bf4 	movhi	r7,16687
   38d28:	39e12004 	addi	r7,r7,-31616
   38d2c:	e13ff017 	ldw	r4,-64(fp)
   38d30:	e17ff117 	ldw	r5,-60(fp)
   38d34:	0044e800 	call	44e80 <__muldf3>
   38d38:	1009883a 	mov	r4,r2
   38d3c:	180b883a 	mov	r5,r3
   38d40:	2021883a 	mov	r16,r4
   38d44:	2823883a 	mov	r17,r5
   38d48:	e1000417 	ldw	r4,16(fp)
   38d4c:	0045e940 	call	45e94 <__floatsidf>
   38d50:	1009883a 	mov	r4,r2
   38d54:	180b883a 	mov	r5,r3
   38d58:	200d883a 	mov	r6,r4
   38d5c:	280f883a 	mov	r7,r5
   38d60:	8009883a 	mov	r4,r16
   38d64:	880b883a 	mov	r5,r17
   38d68:	00443c80 	call	443c8 <__divdf3>
   38d6c:	1009883a 	mov	r4,r2
   38d70:	180b883a 	mov	r5,r3
   38d74:	2005883a 	mov	r2,r4
   38d78:	2807883a 	mov	r3,r5
   38d7c:	1009883a 	mov	r4,r2
   38d80:	180b883a 	mov	r5,r3
   38d84:	0038af40 	call	38af4 <print_number>
    printf("us / avg ");
   38d88:	01000174 	movhi	r4,5
   38d8c:	21184a04 	addi	r4,r4,24872
   38d90:	00467040 	call	46704 <printf>
    print_number((sum / count) * 1000000.0 / iter);
   38d94:	e1000317 	ldw	r4,12(fp)
   38d98:	0045e940 	call	45e94 <__floatsidf>
   38d9c:	1009883a 	mov	r4,r2
   38da0:	180b883a 	mov	r5,r3
   38da4:	200d883a 	mov	r6,r4
   38da8:	280f883a 	mov	r7,r5
   38dac:	e13ff217 	ldw	r4,-56(fp)
   38db0:	e17ff317 	ldw	r5,-52(fp)
   38db4:	00443c80 	call	443c8 <__divdf3>
   38db8:	1009883a 	mov	r4,r2
   38dbc:	180b883a 	mov	r5,r3
   38dc0:	2005883a 	mov	r2,r4
   38dc4:	2807883a 	mov	r3,r5
   38dc8:	000d883a 	mov	r6,zero
   38dcc:	01d04bf4 	movhi	r7,16687
   38dd0:	39e12004 	addi	r7,r7,-31616
   38dd4:	1009883a 	mov	r4,r2
   38dd8:	180b883a 	mov	r5,r3
   38ddc:	0044e800 	call	44e80 <__muldf3>
   38de0:	1009883a 	mov	r4,r2
   38de4:	180b883a 	mov	r5,r3
   38de8:	2021883a 	mov	r16,r4
   38dec:	2823883a 	mov	r17,r5
   38df0:	e1000417 	ldw	r4,16(fp)
   38df4:	0045e940 	call	45e94 <__floatsidf>
   38df8:	1009883a 	mov	r4,r2
   38dfc:	180b883a 	mov	r5,r3
   38e00:	200d883a 	mov	r6,r4
   38e04:	280f883a 	mov	r7,r5
   38e08:	8009883a 	mov	r4,r16
   38e0c:	880b883a 	mov	r5,r17
   38e10:	00443c80 	call	443c8 <__divdf3>
   38e14:	1009883a 	mov	r4,r2
   38e18:	180b883a 	mov	r5,r3
   38e1c:	2005883a 	mov	r2,r4
   38e20:	2807883a 	mov	r3,r5
   38e24:	1009883a 	mov	r4,r2
   38e28:	180b883a 	mov	r5,r3
   38e2c:	0038af40 	call	38af4 <print_number>
    printf("us / max ");
   38e30:	01000174 	movhi	r4,5
   38e34:	21184d04 	addi	r4,r4,24884
   38e38:	00467040 	call	46704 <printf>
    print_number(max * 1000000.0 / iter);
   38e3c:	000d883a 	mov	r6,zero
   38e40:	01d04bf4 	movhi	r7,16687
   38e44:	39e12004 	addi	r7,r7,-31616
   38e48:	e13ff417 	ldw	r4,-48(fp)
   38e4c:	e17ff517 	ldw	r5,-44(fp)
   38e50:	0044e800 	call	44e80 <__muldf3>
   38e54:	1009883a 	mov	r4,r2
   38e58:	180b883a 	mov	r5,r3
   38e5c:	2021883a 	mov	r16,r4
   38e60:	2823883a 	mov	r17,r5
   38e64:	e1000417 	ldw	r4,16(fp)
   38e68:	0045e940 	call	45e94 <__floatsidf>
   38e6c:	1009883a 	mov	r4,r2
   38e70:	180b883a 	mov	r5,r3
   38e74:	200d883a 	mov	r6,r4
   38e78:	280f883a 	mov	r7,r5
   38e7c:	8009883a 	mov	r4,r16
   38e80:	880b883a 	mov	r5,r17
   38e84:	00443c80 	call	443c8 <__divdf3>
   38e88:	1009883a 	mov	r4,r2
   38e8c:	180b883a 	mov	r5,r3
   38e90:	2005883a 	mov	r2,r4
   38e94:	2807883a 	mov	r3,r5
   38e98:	1009883a 	mov	r4,r2
   38e9c:	180b883a 	mov	r5,r3
   38ea0:	0038af40 	call	38af4 <print_number>
    printf("us\n");
   38ea4:	01000174 	movhi	r4,5
   38ea8:	21185004 	addi	r4,r4,24896
   38eac:	00467d00 	call	467d0 <puts>
}
   38eb0:	0001883a 	nop
   38eb4:	e6fffe04 	addi	sp,fp,-8
   38eb8:	dfc00317 	ldw	ra,12(sp)
   38ebc:	df000217 	ldw	fp,8(sp)
   38ec0:	dc400117 	ldw	r17,4(sp)
   38ec4:	dc000017 	ldw	r16,0(sp)
   38ec8:	dec00404 	addi	sp,sp,16
   38ecc:	f800283a 	ret

00038ed0 <secp256k1_ecmult_gen_context_init>:
#include "ecmult_gen.h"
#include "hash_impl.h"
#ifdef USE_ECMULT_STATIC_PRECOMPUTATION
#include "ecmult_static_context.h"
#endif
static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context *ctx) {
   38ed0:	defffe04 	addi	sp,sp,-8
   38ed4:	df000115 	stw	fp,4(sp)
   38ed8:	df000104 	addi	fp,sp,4
   38edc:	e13fff15 	stw	r4,-4(fp)
    ctx->prec = NULL;
   38ee0:	e0bfff17 	ldw	r2,-4(fp)
   38ee4:	10000015 	stw	zero,0(r2)
}
   38ee8:	0001883a 	nop
   38eec:	e037883a 	mov	sp,fp
   38ef0:	df000017 	ldw	fp,0(sp)
   38ef4:	dec00104 	addi	sp,sp,4
   38ef8:	f800283a 	ret

00038efc <secp256k1_ecmult_gen_context_build>:

static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context *ctx, const secp256k1_callback* cb) {
   38efc:	defffc04 	addi	sp,sp,-16
   38f00:	dfc00315 	stw	ra,12(sp)
   38f04:	df000215 	stw	fp,8(sp)
   38f08:	dc400115 	stw	r17,4(sp)
   38f0c:	dc000015 	stw	r16,0(sp)
   38f10:	df000204 	addi	fp,sp,8
   38f14:	023fff34 	movhi	r8,65532
   38f18:	42076604 	addi	r8,r8,7576
   38f1c:	da37883a 	add	sp,sp,r8
   38f20:	00800134 	movhi	r2,4
   38f24:	10b89704 	addi	r2,r2,-7588
   38f28:	00ffff34 	movhi	r3,65532
   38f2c:	18c76504 	addi	r3,r3,7572
   38f30:	1f07883a 	add	r3,r3,fp
   38f34:	1885883a 	add	r2,r3,r2
   38f38:	11000015 	stw	r4,0(r2)
   38f3c:	00800134 	movhi	r2,4
   38f40:	10b89804 	addi	r2,r2,-7584
   38f44:	013fff34 	movhi	r4,65532
   38f48:	21076504 	addi	r4,r4,7572
   38f4c:	2709883a 	add	r4,r4,fp
   38f50:	2085883a 	add	r2,r4,r2
   38f54:	11400015 	stw	r5,0(r2)
    secp256k1_gej gj;
    secp256k1_gej nums_gej;
    int i, j;
#endif

    if (ctx->prec != NULL) {
   38f58:	00800134 	movhi	r2,4
   38f5c:	10b89704 	addi	r2,r2,-7588
   38f60:	017fff34 	movhi	r5,65532
   38f64:	29476504 	addi	r5,r5,7572
   38f68:	2f0b883a 	add	r5,r5,fp
   38f6c:	2885883a 	add	r2,r5,r2
   38f70:	10800017 	ldw	r2,0(r2)
   38f74:	10800017 	ldw	r2,0(r2)
   38f78:	1001f11e 	bne	r2,zero,39740 <secp256k1_ecmult_gen_context_build+0x844>
        return;
    }
#ifndef USE_ECMULT_STATIC_PRECOMPUTATION
    ctx->prec = (secp256k1_ge_storage (*)[64][16])checked_malloc(cb, sizeof(*ctx->prec));
   38f7c:	00800134 	movhi	r2,4
   38f80:	10b89804 	addi	r2,r2,-7584
   38f84:	00ffff34 	movhi	r3,65532
   38f88:	18c76504 	addi	r3,r3,7572
   38f8c:	1f07883a 	add	r3,r3,fp
   38f90:	1885883a 	add	r2,r3,r2
   38f94:	01400074 	movhi	r5,1
   38f98:	11000017 	ldw	r4,0(r2)
   38f9c:	000de6c0 	call	de6c <checked_malloc>
   38fa0:	1007883a 	mov	r3,r2
   38fa4:	00800134 	movhi	r2,4
   38fa8:	10b89704 	addi	r2,r2,-7588
   38fac:	013fff34 	movhi	r4,65532
   38fb0:	21076504 	addi	r4,r4,7572
   38fb4:	2709883a 	add	r4,r4,fp
   38fb8:	2085883a 	add	r2,r4,r2
   38fbc:	10800017 	ldw	r2,0(r2)
   38fc0:	10c00015 	stw	r3,0(r2)

    /* get the generator */
    secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);
   38fc4:	008000b4 	movhi	r2,2
   38fc8:	10a40304 	addi	r2,r2,-28660
   38fcc:	017fff34 	movhi	r5,65532
   38fd0:	29476504 	addi	r5,r5,7572
   38fd4:	2f0b883a 	add	r5,r5,fp
   38fd8:	2885883a 	add	r2,r5,r2
   38fdc:	01400174 	movhi	r5,5
   38fe0:	2955dc04 	addi	r5,r5,22384
   38fe4:	1009883a 	mov	r4,r2
   38fe8:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
    {
        static const unsigned char nums_b32[33] = "The scalar for this x is unknown";
        secp256k1_fe nums_x;
        secp256k1_ge nums_ge;
        int r;
        r = secp256k1_fe_set_b32(&nums_x, nums_b32);
   38fec:	00800134 	movhi	r2,4
   38ff0:	10b84d04 	addi	r2,r2,-7884
   38ff4:	00ffff34 	movhi	r3,65532
   38ff8:	18c76504 	addi	r3,r3,7572
   38ffc:	1f07883a 	add	r3,r3,fp
   39000:	1885883a 	add	r2,r3,r2
   39004:	01400174 	movhi	r5,5
   39008:	29599704 	addi	r5,r5,26204
   3900c:	1009883a 	mov	r4,r2
   39010:	00156ec0 	call	156ec <secp256k1_fe_set_b32>
   39014:	013fff34 	movhi	r4,65532
   39018:	21076704 	addi	r4,r4,7580
   3901c:	2709883a 	add	r4,r4,fp
   39020:	20800015 	stw	r2,0(r4)
        (void)r;
        VERIFY_CHECK(r);
   39024:	017fff34 	movhi	r5,65532
   39028:	29476704 	addi	r5,r5,7580
   3902c:	2f0b883a 	add	r5,r5,fp
   39030:	28800017 	ldw	r2,0(r5)
   39034:	1005003a 	cmpeq	r2,r2,zero
   39038:	10803fcc 	andi	r2,r2,255
   3903c:	10000d26 	beq	r2,zero,39074 <secp256k1_ecmult_gen_context_build+0x178>
   39040:	d0a01617 	ldw	r2,-32680(gp)
   39044:	10c00317 	ldw	r3,12(r2)
   39048:	00800174 	movhi	r2,5
   3904c:	10985b04 	addi	r2,r2,24940
   39050:	d8800015 	stw	r2,0(sp)
   39054:	01c00b84 	movi	r7,46
   39058:	01800174 	movhi	r6,5
   3905c:	31985104 	addi	r6,r6,24900
   39060:	01400174 	movhi	r5,5
   39064:	2951e804 	addi	r5,r5,18336
   39068:	1809883a 	mov	r4,r3
   3906c:	00461000 	call	46100 <fprintf>
   39070:	0045fd40 	call	45fd4 <abort>
        r = secp256k1_ge_set_xo_var(&nums_ge, &nums_x, 0);
   39074:	00800134 	movhi	r2,4
   39078:	10b84d04 	addi	r2,r2,-7884
   3907c:	013fff34 	movhi	r4,65532
   39080:	21076504 	addi	r4,r4,7572
   39084:	2709883a 	add	r4,r4,fp
   39088:	2087883a 	add	r3,r4,r2
   3908c:	008000b4 	movhi	r2,2
   39090:	10a44d04 	addi	r2,r2,-28364
   39094:	017fff34 	movhi	r5,65532
   39098:	29476504 	addi	r5,r5,7572
   3909c:	2f0b883a 	add	r5,r5,fp
   390a0:	2885883a 	add	r2,r5,r2
   390a4:	000d883a 	mov	r6,zero
   390a8:	180b883a 	mov	r5,r3
   390ac:	1009883a 	mov	r4,r2
   390b0:	0022ae40 	call	22ae4 <secp256k1_ge_set_xo_var>
   390b4:	00ffff34 	movhi	r3,65532
   390b8:	18c76704 	addi	r3,r3,7580
   390bc:	1f07883a 	add	r3,r3,fp
   390c0:	18800015 	stw	r2,0(r3)
        (void)r;
        VERIFY_CHECK(r);
   390c4:	013fff34 	movhi	r4,65532
   390c8:	21076704 	addi	r4,r4,7580
   390cc:	2709883a 	add	r4,r4,fp
   390d0:	20800017 	ldw	r2,0(r4)
   390d4:	1005003a 	cmpeq	r2,r2,zero
   390d8:	10803fcc 	andi	r2,r2,255
   390dc:	10000d26 	beq	r2,zero,39114 <secp256k1_ecmult_gen_context_build+0x218>
   390e0:	d0a01617 	ldw	r2,-32680(gp)
   390e4:	10c00317 	ldw	r3,12(r2)
   390e8:	00800174 	movhi	r2,5
   390ec:	10985b04 	addi	r2,r2,24940
   390f0:	d8800015 	stw	r2,0(sp)
   390f4:	01c00c44 	movi	r7,49
   390f8:	01800174 	movhi	r6,5
   390fc:	31985104 	addi	r6,r6,24900
   39100:	01400174 	movhi	r5,5
   39104:	2951e804 	addi	r5,r5,18336
   39108:	1809883a 	mov	r4,r3
   3910c:	00461000 	call	46100 <fprintf>
   39110:	0045fd40 	call	45fd4 <abort>
        secp256k1_gej_set_ge(&nums_gej, &nums_ge);
   39114:	008000b4 	movhi	r2,2
   39118:	10a44d04 	addi	r2,r2,-28364
   3911c:	017fff34 	movhi	r5,65532
   39120:	29476504 	addi	r5,r5,7572
   39124:	2f0b883a 	add	r5,r5,fp
   39128:	2887883a 	add	r3,r5,r2
   3912c:	008000b4 	movhi	r2,2
   39130:	10a42804 	addi	r2,r2,-28512
   39134:	013fff34 	movhi	r4,65532
   39138:	21076504 	addi	r4,r4,7572
   3913c:	2709883a 	add	r4,r4,fp
   39140:	2085883a 	add	r2,r4,r2
   39144:	180b883a 	mov	r5,r3
   39148:	1009883a 	mov	r4,r2
   3914c:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
        /* Add G to make the bits in x uniformly distributed. */
        secp256k1_gej_add_ge_var(&nums_gej, &nums_gej, &secp256k1_ge_const_g, NULL);
   39150:	008000b4 	movhi	r2,2
   39154:	10a42804 	addi	r2,r2,-28512
   39158:	017fff34 	movhi	r5,65532
   3915c:	29476504 	addi	r5,r5,7572
   39160:	2f0b883a 	add	r5,r5,fp
   39164:	2887883a 	add	r3,r5,r2
   39168:	008000b4 	movhi	r2,2
   3916c:	10a42804 	addi	r2,r2,-28512
   39170:	013fff34 	movhi	r4,65532
   39174:	21076504 	addi	r4,r4,7572
   39178:	2709883a 	add	r4,r4,fp
   3917c:	2085883a 	add	r2,r4,r2
   39180:	000f883a 	mov	r7,zero
   39184:	01800174 	movhi	r6,5
   39188:	3195dc04 	addi	r6,r6,22384
   3918c:	180b883a 	mov	r5,r3
   39190:	1009883a 	mov	r4,r2
   39194:	00239ac0 	call	239ac <secp256k1_gej_add_ge_var>
    /* compute prec. */
    {
        secp256k1_gej precj[1024]; /* Jacobian versions of prec. */
        secp256k1_gej gbase;
        secp256k1_gej numsbase;
        gbase = gj; /* 16^j * G */
   39198:	00800134 	movhi	r2,4
   3919c:	10b87204 	addi	r2,r2,-7736
   391a0:	017fff34 	movhi	r5,65532
   391a4:	29476504 	addi	r5,r5,7572
   391a8:	2f0b883a 	add	r5,r5,fp
   391ac:	2887883a 	add	r3,r5,r2
   391b0:	008000b4 	movhi	r2,2
   391b4:	10a40304 	addi	r2,r2,-28660
   391b8:	013fff34 	movhi	r4,65532
   391bc:	21076504 	addi	r4,r4,7572
   391c0:	2709883a 	add	r4,r4,fp
   391c4:	2085883a 	add	r2,r4,r2
   391c8:	1009883a 	mov	r4,r2
   391cc:	00802504 	movi	r2,148
   391d0:	100d883a 	mov	r6,r2
   391d4:	200b883a 	mov	r5,r4
   391d8:	1809883a 	mov	r4,r3
   391dc:	00463980 	call	46398 <memcpy>
        numsbase = nums_gej; /* 2^j * nums. */
   391e0:	00800134 	movhi	r2,4
   391e4:	10b84d04 	addi	r2,r2,-7884
   391e8:	017fff34 	movhi	r5,65532
   391ec:	29476504 	addi	r5,r5,7572
   391f0:	2f0b883a 	add	r5,r5,fp
   391f4:	2887883a 	add	r3,r5,r2
   391f8:	008000b4 	movhi	r2,2
   391fc:	10a42804 	addi	r2,r2,-28512
   39200:	013fff34 	movhi	r4,65532
   39204:	21076504 	addi	r4,r4,7572
   39208:	2709883a 	add	r4,r4,fp
   3920c:	2085883a 	add	r2,r4,r2
   39210:	1009883a 	mov	r4,r2
   39214:	00802504 	movi	r2,148
   39218:	100d883a 	mov	r6,r2
   3921c:	200b883a 	mov	r5,r4
   39220:	1809883a 	mov	r4,r3
   39224:	00463980 	call	46398 <memcpy>
        for (j = 0; j < 64; j++) {
   39228:	017fff34 	movhi	r5,65532
   3922c:	29476604 	addi	r5,r5,7576
   39230:	2f0b883a 	add	r5,r5,fp
   39234:	28000015 	stw	zero,0(r5)
   39238:	0000cd06 	br	39570 <secp256k1_ecmult_gen_context_build+0x674>
            /* Set precj[j*16 .. j*16+15] to (numsbase, numsbase + gbase, ..., numsbase + 15*gbase). */
            precj[j*16] = numsbase;
   3923c:	00ffff34 	movhi	r3,65532
   39240:	18c76604 	addi	r3,r3,7576
   39244:	1f07883a 	add	r3,r3,fp
   39248:	18800017 	ldw	r2,0(r3)
   3924c:	1006913a 	slli	r3,r2,4
   39250:	008000b4 	movhi	r2,2
   39254:	10a44d04 	addi	r2,r2,-28364
   39258:	013fff34 	movhi	r4,65532
   3925c:	21076504 	addi	r4,r4,7572
   39260:	2709883a 	add	r4,r4,fp
   39264:	20a1883a 	add	r16,r4,r2
   39268:	01402504 	movi	r5,148
   3926c:	1809883a 	mov	r4,r3
   39270:	0043af40 	call	43af4 <__mulsi3>
   39274:	8087883a 	add	r3,r16,r2
   39278:	00800134 	movhi	r2,4
   3927c:	10b84d04 	addi	r2,r2,-7884
   39280:	017fff34 	movhi	r5,65532
   39284:	29476504 	addi	r5,r5,7572
   39288:	2f0b883a 	add	r5,r5,fp
   3928c:	2885883a 	add	r2,r5,r2
   39290:	1009883a 	mov	r4,r2
   39294:	00802504 	movi	r2,148
   39298:	100d883a 	mov	r6,r2
   3929c:	200b883a 	mov	r5,r4
   392a0:	1809883a 	mov	r4,r3
   392a4:	00463980 	call	46398 <memcpy>
            for (i = 1; i < 16; i++) {
   392a8:	00800044 	movi	r2,1
   392ac:	00ffff34 	movhi	r3,65532
   392b0:	18c76504 	addi	r3,r3,7572
   392b4:	1f07883a 	add	r3,r3,fp
   392b8:	18800015 	stw	r2,0(r3)
   392bc:	00003d06 	br	393b4 <secp256k1_ecmult_gen_context_build+0x4b8>
                secp256k1_gej_add_var(&precj[j*16 + i], &precj[j*16 + i - 1], &gbase, NULL);
   392c0:	013fff34 	movhi	r4,65532
   392c4:	21076604 	addi	r4,r4,7576
   392c8:	2709883a 	add	r4,r4,fp
   392cc:	20800017 	ldw	r2,0(r4)
   392d0:	1006913a 	slli	r3,r2,4
   392d4:	017fff34 	movhi	r5,65532
   392d8:	29476504 	addi	r5,r5,7572
   392dc:	2f0b883a 	add	r5,r5,fp
   392e0:	28800017 	ldw	r2,0(r5)
   392e4:	1887883a 	add	r3,r3,r2
   392e8:	008000b4 	movhi	r2,2
   392ec:	10a44d04 	addi	r2,r2,-28364
   392f0:	013fff34 	movhi	r4,65532
   392f4:	21076504 	addi	r4,r4,7572
   392f8:	2709883a 	add	r4,r4,fp
   392fc:	20a1883a 	add	r16,r4,r2
   39300:	01402504 	movi	r5,148
   39304:	1809883a 	mov	r4,r3
   39308:	0043af40 	call	43af4 <__mulsi3>
   3930c:	80a3883a 	add	r17,r16,r2
   39310:	017fff34 	movhi	r5,65532
   39314:	29476604 	addi	r5,r5,7576
   39318:	2f0b883a 	add	r5,r5,fp
   3931c:	28800017 	ldw	r2,0(r5)
   39320:	1006913a 	slli	r3,r2,4
   39324:	013fff34 	movhi	r4,65532
   39328:	21076504 	addi	r4,r4,7572
   3932c:	2709883a 	add	r4,r4,fp
   39330:	20800017 	ldw	r2,0(r4)
   39334:	1885883a 	add	r2,r3,r2
   39338:	10ffffc4 	addi	r3,r2,-1
   3933c:	008000b4 	movhi	r2,2
   39340:	10a44d04 	addi	r2,r2,-28364
   39344:	017fff34 	movhi	r5,65532
   39348:	29476504 	addi	r5,r5,7572
   3934c:	2f0b883a 	add	r5,r5,fp
   39350:	28a1883a 	add	r16,r5,r2
   39354:	01402504 	movi	r5,148
   39358:	1809883a 	mov	r4,r3
   3935c:	0043af40 	call	43af4 <__mulsi3>
   39360:	8087883a 	add	r3,r16,r2
   39364:	00800134 	movhi	r2,4
   39368:	10b87204 	addi	r2,r2,-7736
   3936c:	013fff34 	movhi	r4,65532
   39370:	21076504 	addi	r4,r4,7572
   39374:	2709883a 	add	r4,r4,fp
   39378:	2085883a 	add	r2,r4,r2
   3937c:	000f883a 	mov	r7,zero
   39380:	100d883a 	mov	r6,r2
   39384:	180b883a 	mov	r5,r3
   39388:	8809883a 	mov	r4,r17
   3938c:	00234c40 	call	234c4 <secp256k1_gej_add_var>
        gbase = gj; /* 16^j * G */
        numsbase = nums_gej; /* 2^j * nums. */
        for (j = 0; j < 64; j++) {
            /* Set precj[j*16 .. j*16+15] to (numsbase, numsbase + gbase, ..., numsbase + 15*gbase). */
            precj[j*16] = numsbase;
            for (i = 1; i < 16; i++) {
   39390:	017fff34 	movhi	r5,65532
   39394:	29476504 	addi	r5,r5,7572
   39398:	2f0b883a 	add	r5,r5,fp
   3939c:	28800017 	ldw	r2,0(r5)
   393a0:	10800044 	addi	r2,r2,1
   393a4:	00ffff34 	movhi	r3,65532
   393a8:	18c76504 	addi	r3,r3,7572
   393ac:	1f07883a 	add	r3,r3,fp
   393b0:	18800015 	stw	r2,0(r3)
   393b4:	013fff34 	movhi	r4,65532
   393b8:	21076504 	addi	r4,r4,7572
   393bc:	2709883a 	add	r4,r4,fp
   393c0:	20800017 	ldw	r2,0(r4)
   393c4:	10800410 	cmplti	r2,r2,16
   393c8:	103fbd1e 	bne	r2,zero,392c0 <__alt_mem_epcs_flash_controller+0xfe0302c0>
                secp256k1_gej_add_var(&precj[j*16 + i], &precj[j*16 + i - 1], &gbase, NULL);
            }
            /* Multiply gbase by 16. */
            for (i = 0; i < 4; i++) {
   393cc:	017fff34 	movhi	r5,65532
   393d0:	29476504 	addi	r5,r5,7572
   393d4:	2f0b883a 	add	r5,r5,fp
   393d8:	28000015 	stw	zero,0(r5)
   393dc:	00001906 	br	39444 <secp256k1_ecmult_gen_context_build+0x548>
                secp256k1_gej_double_var(&gbase, &gbase, NULL);
   393e0:	00800134 	movhi	r2,4
   393e4:	10b87204 	addi	r2,r2,-7736
   393e8:	013fff34 	movhi	r4,65532
   393ec:	21076504 	addi	r4,r4,7572
   393f0:	2709883a 	add	r4,r4,fp
   393f4:	2087883a 	add	r3,r4,r2
   393f8:	00800134 	movhi	r2,4
   393fc:	10b87204 	addi	r2,r2,-7736
   39400:	017fff34 	movhi	r5,65532
   39404:	29476504 	addi	r5,r5,7572
   39408:	2f0b883a 	add	r5,r5,fp
   3940c:	2885883a 	add	r2,r5,r2
   39410:	000d883a 	mov	r6,zero
   39414:	180b883a 	mov	r5,r3
   39418:	1009883a 	mov	r4,r2
   3941c:	00231500 	call	23150 <secp256k1_gej_double_var>
            precj[j*16] = numsbase;
            for (i = 1; i < 16; i++) {
                secp256k1_gej_add_var(&precj[j*16 + i], &precj[j*16 + i - 1], &gbase, NULL);
            }
            /* Multiply gbase by 16. */
            for (i = 0; i < 4; i++) {
   39420:	00ffff34 	movhi	r3,65532
   39424:	18c76504 	addi	r3,r3,7572
   39428:	1f07883a 	add	r3,r3,fp
   3942c:	18800017 	ldw	r2,0(r3)
   39430:	10800044 	addi	r2,r2,1
   39434:	013fff34 	movhi	r4,65532
   39438:	21076504 	addi	r4,r4,7572
   3943c:	2709883a 	add	r4,r4,fp
   39440:	20800015 	stw	r2,0(r4)
   39444:	017fff34 	movhi	r5,65532
   39448:	29476504 	addi	r5,r5,7572
   3944c:	2f0b883a 	add	r5,r5,fp
   39450:	28800017 	ldw	r2,0(r5)
   39454:	10800110 	cmplti	r2,r2,4
   39458:	103fe11e 	bne	r2,zero,393e0 <__alt_mem_epcs_flash_controller+0xfe0303e0>
                secp256k1_gej_double_var(&gbase, &gbase, NULL);
            }
            /* Multiply numbase by 2. */
            secp256k1_gej_double_var(&numsbase, &numsbase, NULL);
   3945c:	00800134 	movhi	r2,4
   39460:	10b84d04 	addi	r2,r2,-7884
   39464:	013fff34 	movhi	r4,65532
   39468:	21076504 	addi	r4,r4,7572
   3946c:	2709883a 	add	r4,r4,fp
   39470:	2087883a 	add	r3,r4,r2
   39474:	00800134 	movhi	r2,4
   39478:	10b84d04 	addi	r2,r2,-7884
   3947c:	017fff34 	movhi	r5,65532
   39480:	29476504 	addi	r5,r5,7572
   39484:	2f0b883a 	add	r5,r5,fp
   39488:	2885883a 	add	r2,r5,r2
   3948c:	000d883a 	mov	r6,zero
   39490:	180b883a 	mov	r5,r3
   39494:	1009883a 	mov	r4,r2
   39498:	00231500 	call	23150 <secp256k1_gej_double_var>
            if (j == 62) {
   3949c:	00ffff34 	movhi	r3,65532
   394a0:	18c76604 	addi	r3,r3,7576
   394a4:	1f07883a 	add	r3,r3,fp
   394a8:	18800017 	ldw	r2,0(r3)
   394ac:	10800f98 	cmpnei	r2,r2,62
   394b0:	1000261e 	bne	r2,zero,3954c <secp256k1_ecmult_gen_context_build+0x650>
                /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */
                secp256k1_gej_neg(&numsbase, &numsbase);
   394b4:	00800134 	movhi	r2,4
   394b8:	10b84d04 	addi	r2,r2,-7884
   394bc:	013fff34 	movhi	r4,65532
   394c0:	21076504 	addi	r4,r4,7572
   394c4:	2709883a 	add	r4,r4,fp
   394c8:	2087883a 	add	r3,r4,r2
   394cc:	00800134 	movhi	r2,4
   394d0:	10b84d04 	addi	r2,r2,-7884
   394d4:	017fff34 	movhi	r5,65532
   394d8:	29476504 	addi	r5,r5,7572
   394dc:	2f0b883a 	add	r5,r5,fp
   394e0:	2885883a 	add	r2,r5,r2
   394e4:	180b883a 	mov	r5,r3
   394e8:	1009883a 	mov	r4,r2
   394ec:	0022db80 	call	22db8 <secp256k1_gej_neg>
                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);
   394f0:	008000b4 	movhi	r2,2
   394f4:	10a42804 	addi	r2,r2,-28512
   394f8:	00ffff34 	movhi	r3,65532
   394fc:	18c76504 	addi	r3,r3,7572
   39500:	1f07883a 	add	r3,r3,fp
   39504:	1889883a 	add	r4,r3,r2
   39508:	00800134 	movhi	r2,4
   3950c:	10b84d04 	addi	r2,r2,-7884
   39510:	017fff34 	movhi	r5,65532
   39514:	29476504 	addi	r5,r5,7572
   39518:	2f0b883a 	add	r5,r5,fp
   3951c:	2887883a 	add	r3,r5,r2
   39520:	00800134 	movhi	r2,4
   39524:	10b84d04 	addi	r2,r2,-7884
   39528:	017fff34 	movhi	r5,65532
   3952c:	29476504 	addi	r5,r5,7572
   39530:	2f0b883a 	add	r5,r5,fp
   39534:	2885883a 	add	r2,r5,r2
   39538:	000f883a 	mov	r7,zero
   3953c:	200d883a 	mov	r6,r4
   39540:	180b883a 	mov	r5,r3
   39544:	1009883a 	mov	r4,r2
   39548:	00234c40 	call	234c4 <secp256k1_gej_add_var>
        secp256k1_gej precj[1024]; /* Jacobian versions of prec. */
        secp256k1_gej gbase;
        secp256k1_gej numsbase;
        gbase = gj; /* 16^j * G */
        numsbase = nums_gej; /* 2^j * nums. */
        for (j = 0; j < 64; j++) {
   3954c:	00ffff34 	movhi	r3,65532
   39550:	18c76604 	addi	r3,r3,7576
   39554:	1f07883a 	add	r3,r3,fp
   39558:	18800017 	ldw	r2,0(r3)
   3955c:	10800044 	addi	r2,r2,1
   39560:	013fff34 	movhi	r4,65532
   39564:	21076604 	addi	r4,r4,7576
   39568:	2709883a 	add	r4,r4,fp
   3956c:	20800015 	stw	r2,0(r4)
   39570:	017fff34 	movhi	r5,65532
   39574:	29476604 	addi	r5,r5,7576
   39578:	2f0b883a 	add	r5,r5,fp
   3957c:	28800017 	ldw	r2,0(r5)
   39580:	10801010 	cmplti	r2,r2,64
   39584:	103f2d1e 	bne	r2,zero,3923c <__alt_mem_epcs_flash_controller+0xfe03023c>
                /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */
                secp256k1_gej_neg(&numsbase, &numsbase);
                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);
            }
        }
        secp256k1_ge_set_all_gej_var(1024, prec, precj, cb);
   39588:	00800134 	movhi	r2,4
   3958c:	10b89804 	addi	r2,r2,-7584
   39590:	013fff34 	movhi	r4,65532
   39594:	21076504 	addi	r4,r4,7572
   39598:	2709883a 	add	r4,r4,fp
   3959c:	2087883a 	add	r3,r4,r2
   395a0:	008000b4 	movhi	r2,2
   395a4:	10a44d04 	addi	r2,r2,-28364
   395a8:	017fff34 	movhi	r5,65532
   395ac:	29476504 	addi	r5,r5,7572
   395b0:	2f0b883a 	add	r5,r5,fp
   395b4:	2889883a 	add	r4,r5,r2
   395b8:	017fff34 	movhi	r5,65532
   395bc:	29476804 	addi	r5,r5,7584
   395c0:	e145883a 	add	r2,fp,r5
   395c4:	19c00017 	ldw	r7,0(r3)
   395c8:	200d883a 	mov	r6,r4
   395cc:	100b883a 	mov	r5,r2
   395d0:	01010004 	movi	r4,1024
   395d4:	00221fc0 	call	221fc <secp256k1_ge_set_all_gej_var>
    }
    for (j = 0; j < 64; j++) {
   395d8:	00bfff34 	movhi	r2,65532
   395dc:	10876604 	addi	r2,r2,7576
   395e0:	1705883a 	add	r2,r2,fp
   395e4:	10000015 	stw	zero,0(r2)
   395e8:	00004506 	br	39700 <secp256k1_ecmult_gen_context_build+0x804>
        for (i = 0; i < 16; i++) {
   395ec:	00ffff34 	movhi	r3,65532
   395f0:	18c76504 	addi	r3,r3,7572
   395f4:	1f07883a 	add	r3,r3,fp
   395f8:	18000015 	stw	zero,0(r3)
   395fc:	00003106 	br	396c4 <secp256k1_ecmult_gen_context_build+0x7c8>
            secp256k1_ge_to_storage(&(*ctx->prec)[j][i], &prec[j*16 + i]);
   39600:	00800134 	movhi	r2,4
   39604:	10b89704 	addi	r2,r2,-7588
   39608:	013fff34 	movhi	r4,65532
   3960c:	21076504 	addi	r4,r4,7572
   39610:	2709883a 	add	r4,r4,fp
   39614:	2085883a 	add	r2,r4,r2
   39618:	10800017 	ldw	r2,0(r2)
   3961c:	10c00017 	ldw	r3,0(r2)
   39620:	017fff34 	movhi	r5,65532
   39624:	29476604 	addi	r5,r5,7576
   39628:	2f0b883a 	add	r5,r5,fp
   3962c:	28800017 	ldw	r2,0(r5)
   39630:	1008913a 	slli	r4,r2,4
   39634:	017fff34 	movhi	r5,65532
   39638:	29476504 	addi	r5,r5,7572
   3963c:	2f0b883a 	add	r5,r5,fp
   39640:	28800017 	ldw	r2,0(r5)
   39644:	2085883a 	add	r2,r4,r2
   39648:	100491ba 	slli	r2,r2,6
   3964c:	18a3883a 	add	r17,r3,r2
   39650:	00ffff34 	movhi	r3,65532
   39654:	18c76604 	addi	r3,r3,7576
   39658:	1f07883a 	add	r3,r3,fp
   3965c:	18800017 	ldw	r2,0(r3)
   39660:	1006913a 	slli	r3,r2,4
   39664:	013fff34 	movhi	r4,65532
   39668:	21076504 	addi	r4,r4,7572
   3966c:	2709883a 	add	r4,r4,fp
   39670:	20800017 	ldw	r2,0(r4)
   39674:	1885883a 	add	r2,r3,r2
   39678:	017fff34 	movhi	r5,65532
   3967c:	29476804 	addi	r5,r5,7584
   39680:	e161883a 	add	r16,fp,r5
   39684:	01401904 	movi	r5,100
   39688:	1009883a 	mov	r4,r2
   3968c:	0043af40 	call	43af4 <__mulsi3>
   39690:	8085883a 	add	r2,r16,r2
   39694:	100b883a 	mov	r5,r2
   39698:	8809883a 	mov	r4,r17
   3969c:	0024c080 	call	24c08 <secp256k1_ge_to_storage>
            }
        }
        secp256k1_ge_set_all_gej_var(1024, prec, precj, cb);
    }
    for (j = 0; j < 64; j++) {
        for (i = 0; i < 16; i++) {
   396a0:	00ffff34 	movhi	r3,65532
   396a4:	18c76504 	addi	r3,r3,7572
   396a8:	1f07883a 	add	r3,r3,fp
   396ac:	18800017 	ldw	r2,0(r3)
   396b0:	10800044 	addi	r2,r2,1
   396b4:	013fff34 	movhi	r4,65532
   396b8:	21076504 	addi	r4,r4,7572
   396bc:	2709883a 	add	r4,r4,fp
   396c0:	20800015 	stw	r2,0(r4)
   396c4:	017fff34 	movhi	r5,65532
   396c8:	29476504 	addi	r5,r5,7572
   396cc:	2f0b883a 	add	r5,r5,fp
   396d0:	28800017 	ldw	r2,0(r5)
   396d4:	10800410 	cmplti	r2,r2,16
   396d8:	103fc91e 	bne	r2,zero,39600 <__alt_mem_epcs_flash_controller+0xfe030600>
                secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej, NULL);
            }
        }
        secp256k1_ge_set_all_gej_var(1024, prec, precj, cb);
    }
    for (j = 0; j < 64; j++) {
   396dc:	00ffff34 	movhi	r3,65532
   396e0:	18c76604 	addi	r3,r3,7576
   396e4:	1f07883a 	add	r3,r3,fp
   396e8:	18800017 	ldw	r2,0(r3)
   396ec:	10800044 	addi	r2,r2,1
   396f0:	013fff34 	movhi	r4,65532
   396f4:	21076604 	addi	r4,r4,7576
   396f8:	2709883a 	add	r4,r4,fp
   396fc:	20800015 	stw	r2,0(r4)
   39700:	017fff34 	movhi	r5,65532
   39704:	29476604 	addi	r5,r5,7576
   39708:	2f0b883a 	add	r5,r5,fp
   3970c:	28800017 	ldw	r2,0(r5)
   39710:	10801010 	cmplti	r2,r2,64
   39714:	103fb51e 	bne	r2,zero,395ec <__alt_mem_epcs_flash_controller+0xfe0305ec>
    }
#else
    (void)cb;
    ctx->prec = (secp256k1_ge_storage (*)[64][16])secp256k1_ecmult_static_context;
#endif
    secp256k1_ecmult_gen_blind(ctx, NULL);
   39718:	00800134 	movhi	r2,4
   3971c:	10b89704 	addi	r2,r2,-7588
   39720:	00ffff34 	movhi	r3,65532
   39724:	18c76504 	addi	r3,r3,7572
   39728:	1f07883a 	add	r3,r3,fp
   3972c:	1885883a 	add	r2,r3,r2
   39730:	000b883a 	mov	r5,zero
   39734:	11000017 	ldw	r4,0(r2)
   39738:	0039a5c0 	call	39a5c <secp256k1_ecmult_gen_blind>
   3973c:	00000106 	br	39744 <secp256k1_ecmult_gen_context_build+0x848>
    secp256k1_gej nums_gej;
    int i, j;
#endif

    if (ctx->prec != NULL) {
        return;
   39740:	0001883a 	nop
#else
    (void)cb;
    ctx->prec = (secp256k1_ge_storage (*)[64][16])secp256k1_ecmult_static_context;
#endif
    secp256k1_ecmult_gen_blind(ctx, NULL);
}
   39744:	e6fffe04 	addi	sp,fp,-8
   39748:	dfc00317 	ldw	ra,12(sp)
   3974c:	df000217 	ldw	fp,8(sp)
   39750:	dc400117 	ldw	r17,4(sp)
   39754:	dc000017 	ldw	r16,0(sp)
   39758:	dec00404 	addi	sp,sp,16
   3975c:	f800283a 	ret

00039760 <secp256k1_ecmult_gen_context_is_built>:

static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context* ctx) {
   39760:	defffe04 	addi	sp,sp,-8
   39764:	df000115 	stw	fp,4(sp)
   39768:	df000104 	addi	fp,sp,4
   3976c:	e13fff15 	stw	r4,-4(fp)
    return ctx->prec != NULL;
   39770:	e0bfff17 	ldw	r2,-4(fp)
   39774:	10800017 	ldw	r2,0(r2)
   39778:	1004c03a 	cmpne	r2,r2,zero
   3977c:	10803fcc 	andi	r2,r2,255
}
   39780:	e037883a 	mov	sp,fp
   39784:	df000017 	ldw	fp,0(sp)
   39788:	dec00104 	addi	sp,sp,4
   3978c:	f800283a 	ret

00039790 <secp256k1_ecmult_gen_context_clone>:

static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context *dst,
                                               const secp256k1_ecmult_gen_context *src, const secp256k1_callback* cb) {
   39790:	defffb04 	addi	sp,sp,-20
   39794:	dfc00415 	stw	ra,16(sp)
   39798:	df000315 	stw	fp,12(sp)
   3979c:	df000304 	addi	fp,sp,12
   397a0:	e13ffd15 	stw	r4,-12(fp)
   397a4:	e17ffe15 	stw	r5,-8(fp)
   397a8:	e1bfff15 	stw	r6,-4(fp)
    if (src->prec == NULL) {
   397ac:	e0bffe17 	ldw	r2,-8(fp)
   397b0:	10800017 	ldw	r2,0(r2)
   397b4:	1000031e 	bne	r2,zero,397c4 <secp256k1_ecmult_gen_context_clone+0x34>
        dst->prec = NULL;
   397b8:	e0bffd17 	ldw	r2,-12(fp)
   397bc:	10000015 	stw	zero,0(r2)
        dst->prec = src->prec;
#endif
        dst->initial = src->initial;
        dst->blind = src->blind;
    }
}
   397c0:	00002906 	br	39868 <secp256k1_ecmult_gen_context_clone+0xd8>
                                               const secp256k1_ecmult_gen_context *src, const secp256k1_callback* cb) {
    if (src->prec == NULL) {
        dst->prec = NULL;
    } else {
#ifndef USE_ECMULT_STATIC_PRECOMPUTATION
        dst->prec = (secp256k1_ge_storage (*)[64][16])checked_malloc(cb, sizeof(*dst->prec));
   397c4:	01400074 	movhi	r5,1
   397c8:	e13fff17 	ldw	r4,-4(fp)
   397cc:	000de6c0 	call	de6c <checked_malloc>
   397d0:	1007883a 	mov	r3,r2
   397d4:	e0bffd17 	ldw	r2,-12(fp)
   397d8:	10c00015 	stw	r3,0(r2)
        memcpy(dst->prec, src->prec, sizeof(*dst->prec));
   397dc:	e0bffd17 	ldw	r2,-12(fp)
   397e0:	10c00017 	ldw	r3,0(r2)
   397e4:	e0bffe17 	ldw	r2,-8(fp)
   397e8:	10800017 	ldw	r2,0(r2)
   397ec:	01800074 	movhi	r6,1
   397f0:	100b883a 	mov	r5,r2
   397f4:	1809883a 	mov	r4,r3
   397f8:	00463980 	call	46398 <memcpy>
#else
        (void)cb;
        dst->prec = src->prec;
#endif
        dst->initial = src->initial;
   397fc:	e0fffd17 	ldw	r3,-12(fp)
   39800:	e0bffe17 	ldw	r2,-8(fp)
   39804:	18c00904 	addi	r3,r3,36
   39808:	10800904 	addi	r2,r2,36
   3980c:	01002504 	movi	r4,148
   39810:	200d883a 	mov	r6,r4
   39814:	100b883a 	mov	r5,r2
   39818:	1809883a 	mov	r4,r3
   3981c:	00463980 	call	46398 <memcpy>
        dst->blind = src->blind;
   39820:	e0bffd17 	ldw	r2,-12(fp)
   39824:	e0fffe17 	ldw	r3,-8(fp)
   39828:	19000117 	ldw	r4,4(r3)
   3982c:	11000115 	stw	r4,4(r2)
   39830:	19000217 	ldw	r4,8(r3)
   39834:	11000215 	stw	r4,8(r2)
   39838:	19000317 	ldw	r4,12(r3)
   3983c:	11000315 	stw	r4,12(r2)
   39840:	19000417 	ldw	r4,16(r3)
   39844:	11000415 	stw	r4,16(r2)
   39848:	19000517 	ldw	r4,20(r3)
   3984c:	11000515 	stw	r4,20(r2)
   39850:	19000617 	ldw	r4,24(r3)
   39854:	11000615 	stw	r4,24(r2)
   39858:	19000717 	ldw	r4,28(r3)
   3985c:	11000715 	stw	r4,28(r2)
   39860:	18c00817 	ldw	r3,32(r3)
   39864:	10c00815 	stw	r3,32(r2)
    }
}
   39868:	0001883a 	nop
   3986c:	e037883a 	mov	sp,fp
   39870:	dfc00117 	ldw	ra,4(sp)
   39874:	df000017 	ldw	fp,0(sp)
   39878:	dec00204 	addi	sp,sp,8
   3987c:	f800283a 	ret

00039880 <secp256k1_ecmult_gen_context_clear>:

static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {
   39880:	defffd04 	addi	sp,sp,-12
   39884:	dfc00215 	stw	ra,8(sp)
   39888:	df000115 	stw	fp,4(sp)
   3988c:	df000104 	addi	fp,sp,4
   39890:	e13fff15 	stw	r4,-4(fp)
#ifndef USE_ECMULT_STATIC_PRECOMPUTATION
    free(ctx->prec);
   39894:	e0bfff17 	ldw	r2,-4(fp)
   39898:	10800017 	ldw	r2,0(r2)
   3989c:	1009883a 	mov	r4,r2
   398a0:	00463540 	call	46354 <free>
#endif
    secp256k1_scalar_clear(&ctx->blind);
   398a4:	e0bfff17 	ldw	r2,-4(fp)
   398a8:	10800104 	addi	r2,r2,4
   398ac:	1009883a 	mov	r4,r2
   398b0:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    secp256k1_gej_clear(&ctx->initial);
   398b4:	e0bfff17 	ldw	r2,-4(fp)
   398b8:	10800904 	addi	r2,r2,36
   398bc:	1009883a 	mov	r4,r2
   398c0:	002293c0 	call	2293c <secp256k1_gej_clear>
    ctx->prec = NULL;
   398c4:	e0bfff17 	ldw	r2,-4(fp)
   398c8:	10000015 	stw	zero,0(r2)
}
   398cc:	0001883a 	nop
   398d0:	e037883a 	mov	sp,fp
   398d4:	dfc00117 	ldw	ra,4(sp)
   398d8:	df000017 	ldw	fp,0(sp)
   398dc:	dec00204 	addi	sp,sp,8
   398e0:	f800283a 	ret

000398e4 <secp256k1_ecmult_gen>:

static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {
   398e4:	deffc704 	addi	sp,sp,-228
   398e8:	dfc03815 	stw	ra,224(sp)
   398ec:	df003715 	stw	fp,220(sp)
   398f0:	df003704 	addi	fp,sp,220
   398f4:	e13ffd15 	stw	r4,-12(fp)
   398f8:	e17ffe15 	stw	r5,-8(fp)
   398fc:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_ge add;
    secp256k1_ge_storage adds;
    secp256k1_scalar gnb;
    int bits;
    int i, j;
    memset(&adds, 0, sizeof(adds));
   39900:	e0bfe504 	addi	r2,fp,-108
   39904:	01801004 	movi	r6,64
   39908:	000b883a 	mov	r5,zero
   3990c:	1009883a 	mov	r4,r2
   39910:	00464200 	call	46420 <memset>
    *r = ctx->initial;
   39914:	e0fffe17 	ldw	r3,-8(fp)
   39918:	e0bffd17 	ldw	r2,-12(fp)
   3991c:	1809883a 	mov	r4,r3
   39920:	10800904 	addi	r2,r2,36
   39924:	00c02504 	movi	r3,148
   39928:	180d883a 	mov	r6,r3
   3992c:	100b883a 	mov	r5,r2
   39930:	00463980 	call	46398 <memcpy>
    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */
    secp256k1_scalar_add(&gnb, gn, &ctx->blind);
   39934:	e0bffd17 	ldw	r2,-12(fp)
   39938:	10c00104 	addi	r3,r2,4
   3993c:	e0bff504 	addi	r2,fp,-44
   39940:	180d883a 	mov	r6,r3
   39944:	e17fff17 	ldw	r5,-4(fp)
   39948:	1009883a 	mov	r4,r2
   3994c:	00258640 	call	25864 <secp256k1_scalar_add>
    add.infinity = 0;
   39950:	e03fe415 	stw	zero,-112(fp)
    for (j = 0; j < 64; j++) {
   39954:	e03fca15 	stw	zero,-216(fp)
   39958:	00003006 	br	39a1c <secp256k1_ecmult_gen+0x138>
        bits = secp256k1_scalar_get_bits(&gnb, j * 4, 4);
   3995c:	e0bfca17 	ldw	r2,-216(fp)
   39960:	1085883a 	add	r2,r2,r2
   39964:	1085883a 	add	r2,r2,r2
   39968:	1007883a 	mov	r3,r2
   3996c:	e0bff504 	addi	r2,fp,-44
   39970:	01800104 	movi	r6,4
   39974:	180b883a 	mov	r5,r3
   39978:	1009883a 	mov	r4,r2
   3997c:	0024f8c0 	call	24f8c <secp256k1_scalar_get_bits>
   39980:	e0bfcb15 	stw	r2,-212(fp)
        for (i = 0; i < 16; i++) {
   39984:	e03fc915 	stw	zero,-220(fp)
   39988:	00001406 	br	399dc <secp256k1_ecmult_gen+0xf8>
             *    (https://cryptojedi.org/peter/data/chesrump-20130822.pdf) and
             *   "Cache Attacks and Countermeasures: the Case of AES", RSA 2006,
             *    by Dag Arne Osvik, Adi Shamir, and Eran Tromer
             *    (http://www.tau.ac.il/~tromer/papers/cache.pdf)
             */
            secp256k1_ge_storage_cmov(&adds, &(*ctx->prec)[j][i], i == bits);
   3998c:	e0bffd17 	ldw	r2,-12(fp)
   39990:	10c00017 	ldw	r3,0(r2)
   39994:	e0bfca17 	ldw	r2,-216(fp)
   39998:	1008913a 	slli	r4,r2,4
   3999c:	e0bfc917 	ldw	r2,-220(fp)
   399a0:	2085883a 	add	r2,r4,r2
   399a4:	100491ba 	slli	r2,r2,6
   399a8:	1889883a 	add	r4,r3,r2
   399ac:	e0ffc917 	ldw	r3,-220(fp)
   399b0:	e0bfcb17 	ldw	r2,-212(fp)
   399b4:	1885003a 	cmpeq	r2,r3,r2
   399b8:	10c03fcc 	andi	r3,r2,255
   399bc:	e0bfe504 	addi	r2,fp,-108
   399c0:	180d883a 	mov	r6,r3
   399c4:	200b883a 	mov	r5,r4
   399c8:	1009883a 	mov	r4,r2
   399cc:	0024dec0 	call	24dec <secp256k1_ge_storage_cmov>
    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */
    secp256k1_scalar_add(&gnb, gn, &ctx->blind);
    add.infinity = 0;
    for (j = 0; j < 64; j++) {
        bits = secp256k1_scalar_get_bits(&gnb, j * 4, 4);
        for (i = 0; i < 16; i++) {
   399d0:	e0bfc917 	ldw	r2,-220(fp)
   399d4:	10800044 	addi	r2,r2,1
   399d8:	e0bfc915 	stw	r2,-220(fp)
   399dc:	e0bfc917 	ldw	r2,-220(fp)
   399e0:	10800410 	cmplti	r2,r2,16
   399e4:	103fe91e 	bne	r2,zero,3998c <__alt_mem_epcs_flash_controller+0xfe03098c>
             *    by Dag Arne Osvik, Adi Shamir, and Eran Tromer
             *    (http://www.tau.ac.il/~tromer/papers/cache.pdf)
             */
            secp256k1_ge_storage_cmov(&adds, &(*ctx->prec)[j][i], i == bits);
        }
        secp256k1_ge_from_storage(&add, &adds);
   399e8:	e0ffe504 	addi	r3,fp,-108
   399ec:	e0bfcc04 	addi	r2,fp,-208
   399f0:	180b883a 	mov	r5,r3
   399f4:	1009883a 	mov	r4,r2
   399f8:	0024d840 	call	24d84 <secp256k1_ge_from_storage>
        secp256k1_gej_add_ge(r, r, &add);
   399fc:	e0bfcc04 	addi	r2,fp,-208
   39a00:	100d883a 	mov	r6,r2
   39a04:	e17ffe17 	ldw	r5,-8(fp)
   39a08:	e13ffe17 	ldw	r4,-8(fp)
   39a0c:	00244140 	call	24414 <secp256k1_gej_add_ge>
    memset(&adds, 0, sizeof(adds));
    *r = ctx->initial;
    /* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */
    secp256k1_scalar_add(&gnb, gn, &ctx->blind);
    add.infinity = 0;
    for (j = 0; j < 64; j++) {
   39a10:	e0bfca17 	ldw	r2,-216(fp)
   39a14:	10800044 	addi	r2,r2,1
   39a18:	e0bfca15 	stw	r2,-216(fp)
   39a1c:	e0bfca17 	ldw	r2,-216(fp)
   39a20:	10801010 	cmplti	r2,r2,64
   39a24:	103fcd1e 	bne	r2,zero,3995c <__alt_mem_epcs_flash_controller+0xfe03095c>
            secp256k1_ge_storage_cmov(&adds, &(*ctx->prec)[j][i], i == bits);
        }
        secp256k1_ge_from_storage(&add, &adds);
        secp256k1_gej_add_ge(r, r, &add);
    }
    bits = 0;
   39a28:	e03fcb15 	stw	zero,-212(fp)
    secp256k1_ge_clear(&add);
   39a2c:	e0bfcc04 	addi	r2,fp,-208
   39a30:	1009883a 	mov	r4,r2
   39a34:	002299c0 	call	2299c <secp256k1_ge_clear>
    secp256k1_scalar_clear(&gnb);
   39a38:	e0bff504 	addi	r2,fp,-44
   39a3c:	1009883a 	mov	r4,r2
   39a40:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
}
   39a44:	0001883a 	nop
   39a48:	e037883a 	mov	sp,fp
   39a4c:	dfc00117 	ldw	ra,4(sp)
   39a50:	df000017 	ldw	fp,0(sp)
   39a54:	dec00204 	addi	sp,sp,8
   39a58:	f800283a 	ret

00039a5c <secp256k1_ecmult_gen_blind>:

/* Setup blinding values for secp256k1_ecmult_gen. */
static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32) {
   39a5c:	deff9904 	addi	sp,sp,-412
   39a60:	dfc06615 	stw	ra,408(sp)
   39a64:	df006515 	stw	fp,404(sp)
   39a68:	df006504 	addi	fp,sp,404
   39a6c:	e13ffe15 	stw	r4,-8(fp)
   39a70:	e17fff15 	stw	r5,-4(fp)
    secp256k1_gej gb;
    secp256k1_fe s;
    unsigned char nonce32[32];
    secp256k1_rfc6979_hmac_sha256_t rng;
    int retry;
    unsigned char keydata[64] = {0};
   39a74:	e0bfee04 	addi	r2,fp,-72
   39a78:	00c01004 	movi	r3,64
   39a7c:	180d883a 	mov	r6,r3
   39a80:	000b883a 	mov	r5,zero
   39a84:	1009883a 	mov	r4,r2
   39a88:	00464200 	call	46420 <memset>
    if (seed32 == NULL) {
   39a8c:	e0bfff17 	ldw	r2,-4(fp)
   39a90:	1000121e 	bne	r2,zero,39adc <secp256k1_ecmult_gen_blind+0x80>
        /* When seed is NULL, reset the initial point and blinding value. */
        secp256k1_gej_set_ge(&ctx->initial, &secp256k1_ge_const_g);
   39a94:	e0bffe17 	ldw	r2,-8(fp)
   39a98:	10800904 	addi	r2,r2,36
   39a9c:	01400174 	movhi	r5,5
   39aa0:	2955dc04 	addi	r5,r5,22384
   39aa4:	1009883a 	mov	r4,r2
   39aa8:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
        secp256k1_gej_neg(&ctx->initial, &ctx->initial);
   39aac:	e0bffe17 	ldw	r2,-8(fp)
   39ab0:	10c00904 	addi	r3,r2,36
   39ab4:	e0bffe17 	ldw	r2,-8(fp)
   39ab8:	10800904 	addi	r2,r2,36
   39abc:	100b883a 	mov	r5,r2
   39ac0:	1809883a 	mov	r4,r3
   39ac4:	0022db80 	call	22db8 <secp256k1_gej_neg>
        secp256k1_scalar_set_int(&ctx->blind, 1);
   39ac8:	e0bffe17 	ldw	r2,-8(fp)
   39acc:	10800104 	addi	r2,r2,4
   39ad0:	01400044 	movi	r5,1
   39ad4:	1009883a 	mov	r4,r2
   39ad8:	0024f200 	call	24f20 <secp256k1_scalar_set_int>
    }
    /* The prior blinding value (if not reset) is chained forward by including it in the hash. */
    secp256k1_scalar_get_b32(nonce32, &ctx->blind);
   39adc:	e0bffe17 	ldw	r2,-8(fp)
   39ae0:	10c00104 	addi	r3,r2,4
   39ae4:	e0bfd404 	addi	r2,fp,-176
   39ae8:	180b883a 	mov	r5,r3
   39aec:	1009883a 	mov	r4,r2
   39af0:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    /** Using a CSPRNG allows a failure free interface, avoids needing large amounts of random data,
     *   and guards against weak or adversarial seeds.  This is a simpler and safer interface than
     *   asking the caller for blinding values directly and expecting them to retry on failure.
     */
    memcpy(keydata, nonce32, 32);
   39af4:	e0bfd417 	ldw	r2,-176(fp)
   39af8:	e0bfee15 	stw	r2,-72(fp)
   39afc:	e0bfd517 	ldw	r2,-172(fp)
   39b00:	e0bfef15 	stw	r2,-68(fp)
   39b04:	e0bfd617 	ldw	r2,-168(fp)
   39b08:	e0bff015 	stw	r2,-64(fp)
   39b0c:	e0bfd717 	ldw	r2,-164(fp)
   39b10:	e0bff115 	stw	r2,-60(fp)
   39b14:	e0bfd817 	ldw	r2,-160(fp)
   39b18:	e0bff215 	stw	r2,-56(fp)
   39b1c:	e0bfd917 	ldw	r2,-156(fp)
   39b20:	e0bff315 	stw	r2,-52(fp)
   39b24:	e0bfda17 	ldw	r2,-152(fp)
   39b28:	e0bff415 	stw	r2,-48(fp)
   39b2c:	e0bfdb17 	ldw	r2,-148(fp)
   39b30:	e0bff515 	stw	r2,-44(fp)
    if (seed32 != NULL) {
   39b34:	e0bfff17 	ldw	r2,-4(fp)
   39b38:	10000626 	beq	r2,zero,39b54 <secp256k1_ecmult_gen_blind+0xf8>
        memcpy(keydata + 32, seed32, 32);
   39b3c:	e0bfee04 	addi	r2,fp,-72
   39b40:	10800804 	addi	r2,r2,32
   39b44:	01800804 	movi	r6,32
   39b48:	e17fff17 	ldw	r5,-4(fp)
   39b4c:	1009883a 	mov	r4,r2
   39b50:	00463980 	call	46398 <memcpy>
    }
    secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, seed32 ? 64 : 32);
   39b54:	e0bfff17 	ldw	r2,-4(fp)
   39b58:	10000226 	beq	r2,zero,39b64 <secp256k1_ecmult_gen_blind+0x108>
   39b5c:	00801004 	movi	r2,64
   39b60:	00000106 	br	39b68 <secp256k1_ecmult_gen_blind+0x10c>
   39b64:	00800804 	movi	r2,32
   39b68:	e13fee04 	addi	r4,fp,-72
   39b6c:	e0ffdc04 	addi	r3,fp,-144
   39b70:	100d883a 	mov	r6,r2
   39b74:	200b883a 	mov	r5,r4
   39b78:	1809883a 	mov	r4,r3
   39b7c:	00133e00 	call	133e0 <secp256k1_rfc6979_hmac_sha256_initialize>
    memset(keydata, 0, sizeof(keydata));
   39b80:	e0bfee04 	addi	r2,fp,-72
   39b84:	01801004 	movi	r6,64
   39b88:	000b883a 	mov	r5,zero
   39b8c:	1009883a 	mov	r4,r2
   39b90:	00464200 	call	46420 <memset>
    /* Retry for out of range results to achieve uniformity. */
    do {
        secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);
   39b94:	e0ffd404 	addi	r3,fp,-176
   39b98:	e0bfdc04 	addi	r2,fp,-144
   39b9c:	01800804 	movi	r6,32
   39ba0:	180b883a 	mov	r5,r3
   39ba4:	1009883a 	mov	r4,r2
   39ba8:	00135800 	call	13580 <secp256k1_rfc6979_hmac_sha256_generate>
        retry = !secp256k1_fe_set_b32(&s, nonce32);
   39bac:	e0ffd404 	addi	r3,fp,-176
   39bb0:	e0bfc804 	addi	r2,fp,-224
   39bb4:	180b883a 	mov	r5,r3
   39bb8:	1009883a 	mov	r4,r2
   39bbc:	00156ec0 	call	156ec <secp256k1_fe_set_b32>
   39bc0:	1005003a 	cmpeq	r2,r2,zero
   39bc4:	10803fcc 	andi	r2,r2,255
   39bc8:	e0bfed15 	stw	r2,-76(fp)
        retry |= secp256k1_fe_is_zero(&s);
   39bcc:	e0bfc804 	addi	r2,fp,-224
   39bd0:	1009883a 	mov	r4,r2
   39bd4:	00153700 	call	15370 <secp256k1_fe_is_zero>
   39bd8:	1007883a 	mov	r3,r2
   39bdc:	e0bfed17 	ldw	r2,-76(fp)
   39be0:	1884b03a 	or	r2,r3,r2
   39be4:	e0bfed15 	stw	r2,-76(fp)
    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > Fp. */
   39be8:	e0bfed17 	ldw	r2,-76(fp)
   39bec:	103fe91e 	bne	r2,zero,39b94 <__alt_mem_epcs_flash_controller+0xfe030b94>
    /* Randomize the projection to defend against multiplier sidechannels. */
    secp256k1_gej_rescale(&ctx->initial, &s);
   39bf0:	e0bffe17 	ldw	r2,-8(fp)
   39bf4:	10800904 	addi	r2,r2,36
   39bf8:	e0ffc804 	addi	r3,fp,-224
   39bfc:	180b883a 	mov	r5,r3
   39c00:	1009883a 	mov	r4,r2
   39c04:	0024b0c0 	call	24b0c <secp256k1_gej_rescale>
    secp256k1_fe_clear(&s);
   39c08:	e0bfc804 	addi	r2,fp,-224
   39c0c:	1009883a 	mov	r4,r2
   39c10:	00155140 	call	15514 <secp256k1_fe_clear>
    do {
        secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);
   39c14:	e0ffd404 	addi	r3,fp,-176
   39c18:	e0bfdc04 	addi	r2,fp,-144
   39c1c:	01800804 	movi	r6,32
   39c20:	180b883a 	mov	r5,r3
   39c24:	1009883a 	mov	r4,r2
   39c28:	00135800 	call	13580 <secp256k1_rfc6979_hmac_sha256_generate>
        secp256k1_scalar_set_b32(&b, nonce32, &retry);
   39c2c:	e0ffed04 	addi	r3,fp,-76
   39c30:	e0bfd404 	addi	r2,fp,-176
   39c34:	180d883a 	mov	r6,r3
   39c38:	100b883a 	mov	r5,r2
   39c3c:	e13f9b04 	addi	r4,fp,-404
   39c40:	00263500 	call	26350 <secp256k1_scalar_set_b32>
        /* A blinding value of 0 works, but would undermine the projection hardening. */
        retry |= secp256k1_scalar_is_zero(&b);
   39c44:	e13f9b04 	addi	r4,fp,-404
   39c48:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   39c4c:	1007883a 	mov	r3,r2
   39c50:	e0bfed17 	ldw	r2,-76(fp)
   39c54:	1884b03a 	or	r2,r3,r2
   39c58:	e0bfed15 	stw	r2,-76(fp)
    } while (retry); /* This branch true is cryptographically unreachable. Requires sha256_hmac output > order. */
   39c5c:	e0bfed17 	ldw	r2,-76(fp)
   39c60:	103fec1e 	bne	r2,zero,39c14 <__alt_mem_epcs_flash_controller+0xfe030c14>
    secp256k1_rfc6979_hmac_sha256_finalize(&rng);
   39c64:	e0bfdc04 	addi	r2,fp,-144
   39c68:	1009883a 	mov	r4,r2
   39c6c:	001371c0 	call	1371c <secp256k1_rfc6979_hmac_sha256_finalize>
    memset(nonce32, 0, 32);
   39c70:	e0bfd404 	addi	r2,fp,-176
   39c74:	01800804 	movi	r6,32
   39c78:	000b883a 	mov	r5,zero
   39c7c:	1009883a 	mov	r4,r2
   39c80:	00464200 	call	46420 <memset>
    secp256k1_ecmult_gen(ctx, &gb, &b);
   39c84:	e0bfa304 	addi	r2,fp,-372
   39c88:	e1bf9b04 	addi	r6,fp,-404
   39c8c:	100b883a 	mov	r5,r2
   39c90:	e13ffe17 	ldw	r4,-8(fp)
   39c94:	00398e40 	call	398e4 <secp256k1_ecmult_gen>
    secp256k1_scalar_negate(&b, &b);
   39c98:	e17f9b04 	addi	r5,fp,-404
   39c9c:	e13f9b04 	addi	r4,fp,-404
   39ca0:	0026a380 	call	26a38 <secp256k1_scalar_negate>
    ctx->blind = b;
   39ca4:	e0bffe17 	ldw	r2,-8(fp)
   39ca8:	e0ff9b17 	ldw	r3,-404(fp)
   39cac:	10c00115 	stw	r3,4(r2)
   39cb0:	e0ff9c17 	ldw	r3,-400(fp)
   39cb4:	10c00215 	stw	r3,8(r2)
   39cb8:	e0ff9d17 	ldw	r3,-396(fp)
   39cbc:	10c00315 	stw	r3,12(r2)
   39cc0:	e0ff9e17 	ldw	r3,-392(fp)
   39cc4:	10c00415 	stw	r3,16(r2)
   39cc8:	e0ff9f17 	ldw	r3,-388(fp)
   39ccc:	10c00515 	stw	r3,20(r2)
   39cd0:	e0ffa017 	ldw	r3,-384(fp)
   39cd4:	10c00615 	stw	r3,24(r2)
   39cd8:	e0ffa117 	ldw	r3,-380(fp)
   39cdc:	10c00715 	stw	r3,28(r2)
   39ce0:	e0ffa217 	ldw	r3,-376(fp)
   39ce4:	10c00815 	stw	r3,32(r2)
    ctx->initial = gb;
   39ce8:	e0bffe17 	ldw	r2,-8(fp)
   39cec:	10800904 	addi	r2,r2,36
   39cf0:	e0ffa304 	addi	r3,fp,-372
   39cf4:	01002504 	movi	r4,148
   39cf8:	200d883a 	mov	r6,r4
   39cfc:	180b883a 	mov	r5,r3
   39d00:	1009883a 	mov	r4,r2
   39d04:	00463980 	call	46398 <memcpy>
    secp256k1_scalar_clear(&b);
   39d08:	e13f9b04 	addi	r4,fp,-404
   39d0c:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    secp256k1_gej_clear(&gb);
   39d10:	e0bfa304 	addi	r2,fp,-372
   39d14:	1009883a 	mov	r4,r2
   39d18:	002293c0 	call	2293c <secp256k1_gej_clear>
}
   39d1c:	0001883a 	nop
   39d20:	e037883a 	mov	sp,fp
   39d24:	dfc00117 	ldw	ra,4(sp)
   39d28:	df000017 	ldw	fp,0(sp)
   39d2c:	dec00204 	addi	sp,sp,8
   39d30:	f800283a 	ret

00039d34 <secp256k1_der_read_len>:
 */
static const secp256k1_fe secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST(
    0, 0, 0, 1, 0x45512319UL, 0x50B75FC4UL, 0x402DA172UL, 0x2FC9BAEEUL
);

static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned char *sigend) {
   39d34:	defffa04 	addi	sp,sp,-24
   39d38:	df000515 	stw	fp,20(sp)
   39d3c:	df000504 	addi	fp,sp,20
   39d40:	e13ffe15 	stw	r4,-8(fp)
   39d44:	e17fff15 	stw	r5,-4(fp)
    int lenleft, b1;
    size_t ret = 0;
   39d48:	e03ffc15 	stw	zero,-16(fp)
    if (*sigp >= sigend) {
   39d4c:	e0bffe17 	ldw	r2,-8(fp)
   39d50:	10c00017 	ldw	r3,0(r2)
   39d54:	e0bfff17 	ldw	r2,-4(fp)
   39d58:	18800236 	bltu	r3,r2,39d64 <secp256k1_der_read_len+0x30>
        return -1;
   39d5c:	00bfffc4 	movi	r2,-1
   39d60:	00005006 	br	39ea4 <secp256k1_der_read_len+0x170>
    }
    b1 = *((*sigp)++);
   39d64:	e0bffe17 	ldw	r2,-8(fp)
   39d68:	10800017 	ldw	r2,0(r2)
   39d6c:	11000044 	addi	r4,r2,1
   39d70:	e0fffe17 	ldw	r3,-8(fp)
   39d74:	19000015 	stw	r4,0(r3)
   39d78:	10800003 	ldbu	r2,0(r2)
   39d7c:	10803fcc 	andi	r2,r2,255
   39d80:	e0bffd15 	stw	r2,-12(fp)
    if (b1 == 0xFF) {
   39d84:	e0bffd17 	ldw	r2,-12(fp)
   39d88:	10803fd8 	cmpnei	r2,r2,255
   39d8c:	1000021e 	bne	r2,zero,39d98 <secp256k1_der_read_len+0x64>
        /* X.690-0207 8.1.3.5.c the value 0xFF shall not be used. */
        return -1;
   39d90:	00bfffc4 	movi	r2,-1
   39d94:	00004306 	br	39ea4 <secp256k1_der_read_len+0x170>
    }
    if ((b1 & 0x80) == 0) {
   39d98:	e0bffd17 	ldw	r2,-12(fp)
   39d9c:	1080200c 	andi	r2,r2,128
   39da0:	1000021e 	bne	r2,zero,39dac <secp256k1_der_read_len+0x78>
        /* X.690-0207 8.1.3.4 short form length octets */
        return b1;
   39da4:	e0bffd17 	ldw	r2,-12(fp)
   39da8:	00003e06 	br	39ea4 <secp256k1_der_read_len+0x170>
    }
    if (b1 == 0x80) {
   39dac:	e0bffd17 	ldw	r2,-12(fp)
   39db0:	10802018 	cmpnei	r2,r2,128
   39db4:	1000021e 	bne	r2,zero,39dc0 <secp256k1_der_read_len+0x8c>
        /* Indefinite length is not allowed in DER. */
        return -1;
   39db8:	00bfffc4 	movi	r2,-1
   39dbc:	00003906 	br	39ea4 <secp256k1_der_read_len+0x170>
    }
    /* X.690-207 8.1.3.5 long form length octets */
    lenleft = b1 & 0x7F;
   39dc0:	e0bffd17 	ldw	r2,-12(fp)
   39dc4:	10801fcc 	andi	r2,r2,127
   39dc8:	e0bffb15 	stw	r2,-20(fp)
    if (lenleft > sigend - *sigp) {
   39dcc:	e0bfff17 	ldw	r2,-4(fp)
   39dd0:	e0fffe17 	ldw	r3,-8(fp)
   39dd4:	18c00017 	ldw	r3,0(r3)
   39dd8:	10c7c83a 	sub	r3,r2,r3
   39ddc:	e0bffb17 	ldw	r2,-20(fp)
   39de0:	1880020e 	bge	r3,r2,39dec <secp256k1_der_read_len+0xb8>
        return -1;
   39de4:	00bfffc4 	movi	r2,-1
   39de8:	00002e06 	br	39ea4 <secp256k1_der_read_len+0x170>
    }
    if (**sigp == 0) {
   39dec:	e0bffe17 	ldw	r2,-8(fp)
   39df0:	10800017 	ldw	r2,0(r2)
   39df4:	10800003 	ldbu	r2,0(r2)
   39df8:	10803fcc 	andi	r2,r2,255
   39dfc:	1000021e 	bne	r2,zero,39e08 <secp256k1_der_read_len+0xd4>
        /* Not the shortest possible length encoding. */
        return -1;
   39e00:	00bfffc4 	movi	r2,-1
   39e04:	00002706 	br	39ea4 <secp256k1_der_read_len+0x170>
    }
    if ((size_t)lenleft > sizeof(size_t)) {
   39e08:	e0bffb17 	ldw	r2,-20(fp)
   39e0c:	10800170 	cmpltui	r2,r2,5
   39e10:	10001c1e 	bne	r2,zero,39e84 <secp256k1_der_read_len+0x150>
        /* The resulting length would exceed the range of a size_t, so
         * certainly longer than the passed array size.
         */
        return -1;
   39e14:	00bfffc4 	movi	r2,-1
   39e18:	00002206 	br	39ea4 <secp256k1_der_read_len+0x170>
    }
    while (lenleft > 0) {
        if ((ret >> ((sizeof(size_t) - 1) * 8)) != 0) {
        }
        ret = (ret << 8) | **sigp;
   39e1c:	e0bffc17 	ldw	r2,-16(fp)
   39e20:	1006923a 	slli	r3,r2,8
   39e24:	e0bffe17 	ldw	r2,-8(fp)
   39e28:	10800017 	ldw	r2,0(r2)
   39e2c:	10800003 	ldbu	r2,0(r2)
   39e30:	10803fcc 	andi	r2,r2,255
   39e34:	1884b03a 	or	r2,r3,r2
   39e38:	e0bffc15 	stw	r2,-16(fp)
        if (ret + lenleft > (size_t)(sigend - *sigp)) {
   39e3c:	e0fffb17 	ldw	r3,-20(fp)
   39e40:	e0bffc17 	ldw	r2,-16(fp)
   39e44:	1885883a 	add	r2,r3,r2
   39e48:	e0ffff17 	ldw	r3,-4(fp)
   39e4c:	e13ffe17 	ldw	r4,-8(fp)
   39e50:	21000017 	ldw	r4,0(r4)
   39e54:	1907c83a 	sub	r3,r3,r4
   39e58:	1880022e 	bgeu	r3,r2,39e64 <secp256k1_der_read_len+0x130>
            /* Result exceeds the length of the passed array. */
            return -1;
   39e5c:	00bfffc4 	movi	r2,-1
   39e60:	00001006 	br	39ea4 <secp256k1_der_read_len+0x170>
        }
        (*sigp)++;
   39e64:	e0bffe17 	ldw	r2,-8(fp)
   39e68:	10800017 	ldw	r2,0(r2)
   39e6c:	10c00044 	addi	r3,r2,1
   39e70:	e0bffe17 	ldw	r2,-8(fp)
   39e74:	10c00015 	stw	r3,0(r2)
        lenleft--;
   39e78:	e0bffb17 	ldw	r2,-20(fp)
   39e7c:	10bfffc4 	addi	r2,r2,-1
   39e80:	e0bffb15 	stw	r2,-20(fp)
        /* The resulting length would exceed the range of a size_t, so
         * certainly longer than the passed array size.
         */
        return -1;
    }
    while (lenleft > 0) {
   39e84:	e0bffb17 	ldw	r2,-20(fp)
   39e88:	00bfe416 	blt	zero,r2,39e1c <__alt_mem_epcs_flash_controller+0xfe030e1c>
            return -1;
        }
        (*sigp)++;
        lenleft--;
    }
    if (ret < 128) {
   39e8c:	e0bffc17 	ldw	r2,-16(fp)
   39e90:	10802028 	cmpgeui	r2,r2,128
   39e94:	1000021e 	bne	r2,zero,39ea0 <secp256k1_der_read_len+0x16c>
        /* Not the shortest possible length encoding. */
        return -1;
   39e98:	00bfffc4 	movi	r2,-1
   39e9c:	00000106 	br	39ea4 <secp256k1_der_read_len+0x170>
    }
    return ret;
   39ea0:	e0bffc17 	ldw	r2,-16(fp)
}
   39ea4:	e037883a 	mov	sp,fp
   39ea8:	df000017 	ldw	fp,0(sp)
   39eac:	dec00104 	addi	sp,sp,4
   39eb0:	f800283a 	ret

00039eb4 <secp256k1_der_parse_integer>:

static int secp256k1_der_parse_integer(secp256k1_scalar *r, const unsigned char **sig, const unsigned char *sigend) {
   39eb4:	defff104 	addi	sp,sp,-60
   39eb8:	dfc00e15 	stw	ra,56(sp)
   39ebc:	df000d15 	stw	fp,52(sp)
   39ec0:	df000d04 	addi	fp,sp,52
   39ec4:	e13ffd15 	stw	r4,-12(fp)
   39ec8:	e17ffe15 	stw	r5,-8(fp)
   39ecc:	e1bfff15 	stw	r6,-4(fp)
    int overflow = 0;
   39ed0:	e03ff415 	stw	zero,-48(fp)
    unsigned char ra[32] = {0};
   39ed4:	e03ff515 	stw	zero,-44(fp)
   39ed8:	e03ff615 	stw	zero,-40(fp)
   39edc:	e03ff715 	stw	zero,-36(fp)
   39ee0:	e03ff815 	stw	zero,-32(fp)
   39ee4:	e03ff915 	stw	zero,-28(fp)
   39ee8:	e03ffa15 	stw	zero,-24(fp)
   39eec:	e03ffb15 	stw	zero,-20(fp)
   39ef0:	e03ffc15 	stw	zero,-16(fp)
    int rlen;

    if (*sig == sigend || **sig != 0x02) {
   39ef4:	e0bffe17 	ldw	r2,-8(fp)
   39ef8:	10c00017 	ldw	r3,0(r2)
   39efc:	e0bfff17 	ldw	r2,-4(fp)
   39f00:	18800626 	beq	r3,r2,39f1c <secp256k1_der_parse_integer+0x68>
   39f04:	e0bffe17 	ldw	r2,-8(fp)
   39f08:	10800017 	ldw	r2,0(r2)
   39f0c:	10800003 	ldbu	r2,0(r2)
   39f10:	10803fcc 	andi	r2,r2,255
   39f14:	108000a0 	cmpeqi	r2,r2,2
   39f18:	1000021e 	bne	r2,zero,39f24 <secp256k1_der_parse_integer+0x70>
        /* Not a primitive integer (X.690-0207 8.3.1). */
        return 0;
   39f1c:	0005883a 	mov	r2,zero
   39f20:	00007606 	br	3a0fc <secp256k1_der_parse_integer+0x248>
    }
    (*sig)++;
   39f24:	e0bffe17 	ldw	r2,-8(fp)
   39f28:	10800017 	ldw	r2,0(r2)
   39f2c:	10c00044 	addi	r3,r2,1
   39f30:	e0bffe17 	ldw	r2,-8(fp)
   39f34:	10c00015 	stw	r3,0(r2)
    rlen = secp256k1_der_read_len(sig, sigend);
   39f38:	e17fff17 	ldw	r5,-4(fp)
   39f3c:	e13ffe17 	ldw	r4,-8(fp)
   39f40:	0039d340 	call	39d34 <secp256k1_der_read_len>
   39f44:	e0bff315 	stw	r2,-52(fp)
    if (rlen <= 0 || (*sig) + rlen > sigend) {
   39f48:	e0bff317 	ldw	r2,-52(fp)
   39f4c:	0080060e 	bge	zero,r2,39f68 <secp256k1_der_parse_integer+0xb4>
   39f50:	e0bffe17 	ldw	r2,-8(fp)
   39f54:	10c00017 	ldw	r3,0(r2)
   39f58:	e0bff317 	ldw	r2,-52(fp)
   39f5c:	1885883a 	add	r2,r3,r2
   39f60:	e0ffff17 	ldw	r3,-4(fp)
   39f64:	1880022e 	bgeu	r3,r2,39f70 <secp256k1_der_parse_integer+0xbc>
        /* Exceeds bounds or not at least length 1 (X.690-0207 8.3.1).  */
        return 0;
   39f68:	0005883a 	mov	r2,zero
   39f6c:	00006306 	br	3a0fc <secp256k1_der_parse_integer+0x248>
    }
    if (**sig == 0x00 && rlen > 1 && (((*sig)[1]) & 0x80) == 0x00) {
   39f70:	e0bffe17 	ldw	r2,-8(fp)
   39f74:	10800017 	ldw	r2,0(r2)
   39f78:	10800003 	ldbu	r2,0(r2)
   39f7c:	10803fcc 	andi	r2,r2,255
   39f80:	10000d1e 	bne	r2,zero,39fb8 <secp256k1_der_parse_integer+0x104>
   39f84:	e0bff317 	ldw	r2,-52(fp)
   39f88:	10800090 	cmplti	r2,r2,2
   39f8c:	10000a1e 	bne	r2,zero,39fb8 <secp256k1_der_parse_integer+0x104>
   39f90:	e0bffe17 	ldw	r2,-8(fp)
   39f94:	10800017 	ldw	r2,0(r2)
   39f98:	10800044 	addi	r2,r2,1
   39f9c:	10800003 	ldbu	r2,0(r2)
   39fa0:	10803fcc 	andi	r2,r2,255
   39fa4:	1080201c 	xori	r2,r2,128
   39fa8:	10bfe004 	addi	r2,r2,-128
   39fac:	10000216 	blt	r2,zero,39fb8 <secp256k1_der_parse_integer+0x104>
        /* Excessive 0x00 padding. */
        return 0;
   39fb0:	0005883a 	mov	r2,zero
   39fb4:	00005106 	br	3a0fc <secp256k1_der_parse_integer+0x248>
    }
    if (**sig == 0xFF && rlen > 1 && (((*sig)[1]) & 0x80) == 0x80) {
   39fb8:	e0bffe17 	ldw	r2,-8(fp)
   39fbc:	10800017 	ldw	r2,0(r2)
   39fc0:	10800003 	ldbu	r2,0(r2)
   39fc4:	10803fcc 	andi	r2,r2,255
   39fc8:	10803fd8 	cmpnei	r2,r2,255
   39fcc:	10000d1e 	bne	r2,zero,3a004 <secp256k1_der_parse_integer+0x150>
   39fd0:	e0bff317 	ldw	r2,-52(fp)
   39fd4:	10800090 	cmplti	r2,r2,2
   39fd8:	10000a1e 	bne	r2,zero,3a004 <secp256k1_der_parse_integer+0x150>
   39fdc:	e0bffe17 	ldw	r2,-8(fp)
   39fe0:	10800017 	ldw	r2,0(r2)
   39fe4:	10800044 	addi	r2,r2,1
   39fe8:	10800003 	ldbu	r2,0(r2)
   39fec:	10803fcc 	andi	r2,r2,255
   39ff0:	1080201c 	xori	r2,r2,128
   39ff4:	10bfe004 	addi	r2,r2,-128
   39ff8:	1000020e 	bge	r2,zero,3a004 <secp256k1_der_parse_integer+0x150>
        /* Excessive 0xFF padding. */
        return 0;
   39ffc:	0005883a 	mov	r2,zero
   3a000:	00003e06 	br	3a0fc <secp256k1_der_parse_integer+0x248>
    }
    if ((**sig & 0x80) == 0x80) {
   3a004:	e0bffe17 	ldw	r2,-8(fp)
   3a008:	10800017 	ldw	r2,0(r2)
   3a00c:	10800003 	ldbu	r2,0(r2)
   3a010:	10803fcc 	andi	r2,r2,255
   3a014:	1080201c 	xori	r2,r2,128
   3a018:	10bfe004 	addi	r2,r2,-128
   3a01c:	10000b0e 	bge	r2,zero,3a04c <secp256k1_der_parse_integer+0x198>
        /* Negative. */
        overflow = 1;
   3a020:	00800044 	movi	r2,1
   3a024:	e0bff415 	stw	r2,-48(fp)
    }
    while (rlen > 0 && **sig == 0) {
   3a028:	00000806 	br	3a04c <secp256k1_der_parse_integer+0x198>
        /* Skip leading zero bytes */
        rlen--;
   3a02c:	e0bff317 	ldw	r2,-52(fp)
   3a030:	10bfffc4 	addi	r2,r2,-1
   3a034:	e0bff315 	stw	r2,-52(fp)
        (*sig)++;
   3a038:	e0bffe17 	ldw	r2,-8(fp)
   3a03c:	10800017 	ldw	r2,0(r2)
   3a040:	10c00044 	addi	r3,r2,1
   3a044:	e0bffe17 	ldw	r2,-8(fp)
   3a048:	10c00015 	stw	r3,0(r2)
    }
    if ((**sig & 0x80) == 0x80) {
        /* Negative. */
        overflow = 1;
    }
    while (rlen > 0 && **sig == 0) {
   3a04c:	e0bff317 	ldw	r2,-52(fp)
   3a050:	0080050e 	bge	zero,r2,3a068 <secp256k1_der_parse_integer+0x1b4>
   3a054:	e0bffe17 	ldw	r2,-8(fp)
   3a058:	10800017 	ldw	r2,0(r2)
   3a05c:	10800003 	ldbu	r2,0(r2)
   3a060:	10803fcc 	andi	r2,r2,255
   3a064:	103ff126 	beq	r2,zero,3a02c <__alt_mem_epcs_flash_controller+0xfe03102c>
        /* Skip leading zero bytes */
        rlen--;
        (*sig)++;
    }
    if (rlen > 32) {
   3a068:	e0bff317 	ldw	r2,-52(fp)
   3a06c:	10800850 	cmplti	r2,r2,33
   3a070:	1000021e 	bne	r2,zero,3a07c <secp256k1_der_parse_integer+0x1c8>
        overflow = 1;
   3a074:	00800044 	movi	r2,1
   3a078:	e0bff415 	stw	r2,-48(fp)
    }
    if (!overflow) {
   3a07c:	e0bff417 	ldw	r2,-48(fp)
   3a080:	1000121e 	bne	r2,zero,3a0cc <secp256k1_der_parse_integer+0x218>
        memcpy(ra + 32 - rlen, *sig, rlen);
   3a084:	e0bff317 	ldw	r2,-52(fp)
   3a088:	00c00804 	movi	r3,32
   3a08c:	1885c83a 	sub	r2,r3,r2
   3a090:	e0fff504 	addi	r3,fp,-44
   3a094:	1887883a 	add	r3,r3,r2
   3a098:	e0bffe17 	ldw	r2,-8(fp)
   3a09c:	10800017 	ldw	r2,0(r2)
   3a0a0:	e13ff317 	ldw	r4,-52(fp)
   3a0a4:	200d883a 	mov	r6,r4
   3a0a8:	100b883a 	mov	r5,r2
   3a0ac:	1809883a 	mov	r4,r3
   3a0b0:	00463980 	call	46398 <memcpy>
        secp256k1_scalar_set_b32(r, ra, &overflow);
   3a0b4:	e0fff404 	addi	r3,fp,-48
   3a0b8:	e0bff504 	addi	r2,fp,-44
   3a0bc:	180d883a 	mov	r6,r3
   3a0c0:	100b883a 	mov	r5,r2
   3a0c4:	e13ffd17 	ldw	r4,-12(fp)
   3a0c8:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    }
    if (overflow) {
   3a0cc:	e0bff417 	ldw	r2,-48(fp)
   3a0d0:	10000326 	beq	r2,zero,3a0e0 <secp256k1_der_parse_integer+0x22c>
        secp256k1_scalar_set_int(r, 0);
   3a0d4:	000b883a 	mov	r5,zero
   3a0d8:	e13ffd17 	ldw	r4,-12(fp)
   3a0dc:	0024f200 	call	24f20 <secp256k1_scalar_set_int>
    }
    (*sig) += rlen;
   3a0e0:	e0bffe17 	ldw	r2,-8(fp)
   3a0e4:	10c00017 	ldw	r3,0(r2)
   3a0e8:	e0bff317 	ldw	r2,-52(fp)
   3a0ec:	1887883a 	add	r3,r3,r2
   3a0f0:	e0bffe17 	ldw	r2,-8(fp)
   3a0f4:	10c00015 	stw	r3,0(r2)
    return 1;
   3a0f8:	00800044 	movi	r2,1
}
   3a0fc:	e037883a 	mov	sp,fp
   3a100:	dfc00117 	ldw	ra,4(sp)
   3a104:	df000017 	ldw	fp,0(sp)
   3a108:	dec00204 	addi	sp,sp,8
   3a10c:	f800283a 	ret

0003a110 <secp256k1_ecdsa_sig_parse>:

static int secp256k1_ecdsa_sig_parse(secp256k1_scalar *rr, secp256k1_scalar *rs, const unsigned char *sig, size_t size) {
   3a110:	defff804 	addi	sp,sp,-32
   3a114:	dfc00715 	stw	ra,28(sp)
   3a118:	df000615 	stw	fp,24(sp)
   3a11c:	df000604 	addi	fp,sp,24
   3a120:	e13ffc15 	stw	r4,-16(fp)
   3a124:	e17ffd15 	stw	r5,-12(fp)
   3a128:	e1bffe15 	stw	r6,-8(fp)
   3a12c:	e1ffff15 	stw	r7,-4(fp)
    const unsigned char *sigend = sig + size;
   3a130:	e0fffe17 	ldw	r3,-8(fp)
   3a134:	e0bfff17 	ldw	r2,-4(fp)
   3a138:	1885883a 	add	r2,r3,r2
   3a13c:	e0bffa15 	stw	r2,-24(fp)
    int rlen;
    if (sig == sigend || *(sig++) != 0x30) {
   3a140:	e0fffe17 	ldw	r3,-8(fp)
   3a144:	e0bffa17 	ldw	r2,-24(fp)
   3a148:	18800726 	beq	r3,r2,3a168 <secp256k1_ecdsa_sig_parse+0x58>
   3a14c:	e0bffe17 	ldw	r2,-8(fp)
   3a150:	10c00044 	addi	r3,r2,1
   3a154:	e0fffe15 	stw	r3,-8(fp)
   3a158:	10800003 	ldbu	r2,0(r2)
   3a15c:	10803fcc 	andi	r2,r2,255
   3a160:	10800c20 	cmpeqi	r2,r2,48
   3a164:	1000021e 	bne	r2,zero,3a170 <secp256k1_ecdsa_sig_parse+0x60>
        /* The encoding doesn't start with a constructed sequence (X.690-0207 8.9.1). */
        return 0;
   3a168:	0005883a 	mov	r2,zero
   3a16c:	00002b06 	br	3a21c <secp256k1_ecdsa_sig_parse+0x10c>
    }
    rlen = secp256k1_der_read_len(&sig, sigend);
   3a170:	e0bffe04 	addi	r2,fp,-8
   3a174:	e17ffa17 	ldw	r5,-24(fp)
   3a178:	1009883a 	mov	r4,r2
   3a17c:	0039d340 	call	39d34 <secp256k1_der_read_len>
   3a180:	e0bffb15 	stw	r2,-20(fp)
    if (rlen < 0 || sig + rlen > sigend) {
   3a184:	e0bffb17 	ldw	r2,-20(fp)
   3a188:	10000516 	blt	r2,zero,3a1a0 <secp256k1_ecdsa_sig_parse+0x90>
   3a18c:	e0fffe17 	ldw	r3,-8(fp)
   3a190:	e0bffb17 	ldw	r2,-20(fp)
   3a194:	1885883a 	add	r2,r3,r2
   3a198:	e0fffa17 	ldw	r3,-24(fp)
   3a19c:	1880022e 	bgeu	r3,r2,3a1a8 <secp256k1_ecdsa_sig_parse+0x98>
        /* Tuple exceeds bounds */
        return 0;
   3a1a0:	0005883a 	mov	r2,zero
   3a1a4:	00001d06 	br	3a21c <secp256k1_ecdsa_sig_parse+0x10c>
    }
    if (sig + rlen != sigend) {
   3a1a8:	e0fffe17 	ldw	r3,-8(fp)
   3a1ac:	e0bffb17 	ldw	r2,-20(fp)
   3a1b0:	1887883a 	add	r3,r3,r2
   3a1b4:	e0bffa17 	ldw	r2,-24(fp)
   3a1b8:	18800226 	beq	r3,r2,3a1c4 <secp256k1_ecdsa_sig_parse+0xb4>
        /* Garbage after tuple. */
        return 0;
   3a1bc:	0005883a 	mov	r2,zero
   3a1c0:	00001606 	br	3a21c <secp256k1_ecdsa_sig_parse+0x10c>
    }

    if (!secp256k1_der_parse_integer(rr, &sig, sigend)) {
   3a1c4:	e0bffe04 	addi	r2,fp,-8
   3a1c8:	e1bffa17 	ldw	r6,-24(fp)
   3a1cc:	100b883a 	mov	r5,r2
   3a1d0:	e13ffc17 	ldw	r4,-16(fp)
   3a1d4:	0039eb40 	call	39eb4 <secp256k1_der_parse_integer>
   3a1d8:	1000021e 	bne	r2,zero,3a1e4 <secp256k1_ecdsa_sig_parse+0xd4>
        return 0;
   3a1dc:	0005883a 	mov	r2,zero
   3a1e0:	00000e06 	br	3a21c <secp256k1_ecdsa_sig_parse+0x10c>
    }
    if (!secp256k1_der_parse_integer(rs, &sig, sigend)) {
   3a1e4:	e0bffe04 	addi	r2,fp,-8
   3a1e8:	e1bffa17 	ldw	r6,-24(fp)
   3a1ec:	100b883a 	mov	r5,r2
   3a1f0:	e13ffd17 	ldw	r4,-12(fp)
   3a1f4:	0039eb40 	call	39eb4 <secp256k1_der_parse_integer>
   3a1f8:	1000021e 	bne	r2,zero,3a204 <secp256k1_ecdsa_sig_parse+0xf4>
        return 0;
   3a1fc:	0005883a 	mov	r2,zero
   3a200:	00000606 	br	3a21c <secp256k1_ecdsa_sig_parse+0x10c>
    }

    if (sig != sigend) {
   3a204:	e0fffe17 	ldw	r3,-8(fp)
   3a208:	e0bffa17 	ldw	r2,-24(fp)
   3a20c:	18800226 	beq	r3,r2,3a218 <secp256k1_ecdsa_sig_parse+0x108>
        /* Trailing garbage inside tuple. */
        return 0;
   3a210:	0005883a 	mov	r2,zero
   3a214:	00000106 	br	3a21c <secp256k1_ecdsa_sig_parse+0x10c>
    }

    return 1;
   3a218:	00800044 	movi	r2,1
}
   3a21c:	e037883a 	mov	sp,fp
   3a220:	dfc00117 	ldw	ra,4(sp)
   3a224:	df000017 	ldw	fp,0(sp)
   3a228:	dec00204 	addi	sp,sp,8
   3a22c:	f800283a 	ret

0003a230 <secp256k1_ecdsa_sig_serialize>:

static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const secp256k1_scalar* ar, const secp256k1_scalar* as) {
   3a230:	deffe504 	addi	sp,sp,-108
   3a234:	dfc01a15 	stw	ra,104(sp)
   3a238:	df001915 	stw	fp,100(sp)
   3a23c:	df001904 	addi	fp,sp,100
   3a240:	e13ffc15 	stw	r4,-16(fp)
   3a244:	e17ffd15 	stw	r5,-12(fp)
   3a248:	e1bffe15 	stw	r6,-8(fp)
   3a24c:	e1ffff15 	stw	r7,-4(fp)
    unsigned char r[33] = {0}, s[33] = {0};
   3a250:	e03feb15 	stw	zero,-84(fp)
   3a254:	e03fec15 	stw	zero,-80(fp)
   3a258:	e03fed15 	stw	zero,-76(fp)
   3a25c:	e03fee15 	stw	zero,-72(fp)
   3a260:	e03fef15 	stw	zero,-68(fp)
   3a264:	e03ff015 	stw	zero,-64(fp)
   3a268:	e03ff115 	stw	zero,-60(fp)
   3a26c:	e03ff215 	stw	zero,-56(fp)
   3a270:	e03ff305 	stb	zero,-52(fp)
   3a274:	e0bff344 	addi	r2,fp,-51
   3a278:	00c00844 	movi	r3,33
   3a27c:	180d883a 	mov	r6,r3
   3a280:	000b883a 	mov	r5,zero
   3a284:	1009883a 	mov	r4,r2
   3a288:	00464200 	call	46420 <memset>
    unsigned char *rp = r, *sp = s;
   3a28c:	e0bfeb04 	addi	r2,fp,-84
   3a290:	e0bfe715 	stw	r2,-100(fp)
   3a294:	e0bff344 	addi	r2,fp,-51
   3a298:	e0bfe815 	stw	r2,-96(fp)
    size_t lenR = 33, lenS = 33;
   3a29c:	00800844 	movi	r2,33
   3a2a0:	e0bfe915 	stw	r2,-92(fp)
   3a2a4:	00800844 	movi	r2,33
   3a2a8:	e0bfea15 	stw	r2,-88(fp)
    secp256k1_scalar_get_b32(&r[1], ar);
   3a2ac:	e0bfeb04 	addi	r2,fp,-84
   3a2b0:	10800044 	addi	r2,r2,1
   3a2b4:	e17ffe17 	ldw	r5,-8(fp)
   3a2b8:	1009883a 	mov	r4,r2
   3a2bc:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    secp256k1_scalar_get_b32(&s[1], as);
   3a2c0:	e0bff344 	addi	r2,fp,-51
   3a2c4:	10800044 	addi	r2,r2,1
   3a2c8:	e17fff17 	ldw	r5,-4(fp)
   3a2cc:	1009883a 	mov	r4,r2
   3a2d0:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    while (lenR > 1 && rp[0] == 0 && rp[1] < 0x80) { lenR--; rp++; }
   3a2d4:	00000606 	br	3a2f0 <secp256k1_ecdsa_sig_serialize+0xc0>
   3a2d8:	e0bfe917 	ldw	r2,-92(fp)
   3a2dc:	10bfffc4 	addi	r2,r2,-1
   3a2e0:	e0bfe915 	stw	r2,-92(fp)
   3a2e4:	e0bfe717 	ldw	r2,-100(fp)
   3a2e8:	10800044 	addi	r2,r2,1
   3a2ec:	e0bfe715 	stw	r2,-100(fp)
   3a2f0:	e0bfe917 	ldw	r2,-92(fp)
   3a2f4:	108000b0 	cmpltui	r2,r2,2
   3a2f8:	1000121e 	bne	r2,zero,3a344 <secp256k1_ecdsa_sig_serialize+0x114>
   3a2fc:	e0bfe717 	ldw	r2,-100(fp)
   3a300:	10800003 	ldbu	r2,0(r2)
   3a304:	10803fcc 	andi	r2,r2,255
   3a308:	10000e1e 	bne	r2,zero,3a344 <secp256k1_ecdsa_sig_serialize+0x114>
   3a30c:	e0bfe717 	ldw	r2,-100(fp)
   3a310:	10800044 	addi	r2,r2,1
   3a314:	10800003 	ldbu	r2,0(r2)
   3a318:	10803fcc 	andi	r2,r2,255
   3a31c:	1080201c 	xori	r2,r2,128
   3a320:	10bfe004 	addi	r2,r2,-128
   3a324:	103fec0e 	bge	r2,zero,3a2d8 <__alt_mem_epcs_flash_controller+0xfe0312d8>
    while (lenS > 1 && sp[0] == 0 && sp[1] < 0x80) { lenS--; sp++; }
   3a328:	00000606 	br	3a344 <secp256k1_ecdsa_sig_serialize+0x114>
   3a32c:	e0bfea17 	ldw	r2,-88(fp)
   3a330:	10bfffc4 	addi	r2,r2,-1
   3a334:	e0bfea15 	stw	r2,-88(fp)
   3a338:	e0bfe817 	ldw	r2,-96(fp)
   3a33c:	10800044 	addi	r2,r2,1
   3a340:	e0bfe815 	stw	r2,-96(fp)
   3a344:	e0bfea17 	ldw	r2,-88(fp)
   3a348:	108000b0 	cmpltui	r2,r2,2
   3a34c:	10000b1e 	bne	r2,zero,3a37c <secp256k1_ecdsa_sig_serialize+0x14c>
   3a350:	e0bfe817 	ldw	r2,-96(fp)
   3a354:	10800003 	ldbu	r2,0(r2)
   3a358:	10803fcc 	andi	r2,r2,255
   3a35c:	1000071e 	bne	r2,zero,3a37c <secp256k1_ecdsa_sig_serialize+0x14c>
   3a360:	e0bfe817 	ldw	r2,-96(fp)
   3a364:	10800044 	addi	r2,r2,1
   3a368:	10800003 	ldbu	r2,0(r2)
   3a36c:	10803fcc 	andi	r2,r2,255
   3a370:	1080201c 	xori	r2,r2,128
   3a374:	10bfe004 	addi	r2,r2,-128
   3a378:	103fec0e 	bge	r2,zero,3a32c <__alt_mem_epcs_flash_controller+0xfe03132c>
    if (*size < 6+lenS+lenR) {
   3a37c:	e0bffd17 	ldw	r2,-12(fp)
   3a380:	10c00017 	ldw	r3,0(r2)
   3a384:	e13fea17 	ldw	r4,-88(fp)
   3a388:	e0bfe917 	ldw	r2,-92(fp)
   3a38c:	2085883a 	add	r2,r4,r2
   3a390:	10800184 	addi	r2,r2,6
   3a394:	1880082e 	bgeu	r3,r2,3a3b8 <secp256k1_ecdsa_sig_serialize+0x188>
        *size = 6 + lenS + lenR;
   3a398:	e0ffea17 	ldw	r3,-88(fp)
   3a39c:	e0bfe917 	ldw	r2,-92(fp)
   3a3a0:	1885883a 	add	r2,r3,r2
   3a3a4:	10c00184 	addi	r3,r2,6
   3a3a8:	e0bffd17 	ldw	r2,-12(fp)
   3a3ac:	10c00015 	stw	r3,0(r2)
        return 0;
   3a3b0:	0005883a 	mov	r2,zero
   3a3b4:	00003406 	br	3a488 <secp256k1_ecdsa_sig_serialize+0x258>
    }
    *size = 6 + lenS + lenR;
   3a3b8:	e0ffea17 	ldw	r3,-88(fp)
   3a3bc:	e0bfe917 	ldw	r2,-92(fp)
   3a3c0:	1885883a 	add	r2,r3,r2
   3a3c4:	10c00184 	addi	r3,r2,6
   3a3c8:	e0bffd17 	ldw	r2,-12(fp)
   3a3cc:	10c00015 	stw	r3,0(r2)
    sig[0] = 0x30;
   3a3d0:	e0bffc17 	ldw	r2,-16(fp)
   3a3d4:	00c00c04 	movi	r3,48
   3a3d8:	10c00005 	stb	r3,0(r2)
    sig[1] = 4 + lenS + lenR;
   3a3dc:	e0bffc17 	ldw	r2,-16(fp)
   3a3e0:	10800044 	addi	r2,r2,1
   3a3e4:	e0ffea17 	ldw	r3,-88(fp)
   3a3e8:	1809883a 	mov	r4,r3
   3a3ec:	e0ffe917 	ldw	r3,-92(fp)
   3a3f0:	20c7883a 	add	r3,r4,r3
   3a3f4:	18c00104 	addi	r3,r3,4
   3a3f8:	10c00005 	stb	r3,0(r2)
    sig[2] = 0x02;
   3a3fc:	e0bffc17 	ldw	r2,-16(fp)
   3a400:	10800084 	addi	r2,r2,2
   3a404:	00c00084 	movi	r3,2
   3a408:	10c00005 	stb	r3,0(r2)
    sig[3] = lenR;
   3a40c:	e0bffc17 	ldw	r2,-16(fp)
   3a410:	108000c4 	addi	r2,r2,3
   3a414:	e0ffe917 	ldw	r3,-92(fp)
   3a418:	10c00005 	stb	r3,0(r2)
    memcpy(sig+4, rp, lenR);
   3a41c:	e0bffc17 	ldw	r2,-16(fp)
   3a420:	10800104 	addi	r2,r2,4
   3a424:	e1bfe917 	ldw	r6,-92(fp)
   3a428:	e17fe717 	ldw	r5,-100(fp)
   3a42c:	1009883a 	mov	r4,r2
   3a430:	00463980 	call	46398 <memcpy>
    sig[4+lenR] = 0x02;
   3a434:	e0bfe917 	ldw	r2,-92(fp)
   3a438:	10800104 	addi	r2,r2,4
   3a43c:	e0fffc17 	ldw	r3,-16(fp)
   3a440:	1885883a 	add	r2,r3,r2
   3a444:	00c00084 	movi	r3,2
   3a448:	10c00005 	stb	r3,0(r2)
    sig[5+lenR] = lenS;
   3a44c:	e0bfe917 	ldw	r2,-92(fp)
   3a450:	10800144 	addi	r2,r2,5
   3a454:	e0fffc17 	ldw	r3,-16(fp)
   3a458:	1885883a 	add	r2,r3,r2
   3a45c:	e0ffea17 	ldw	r3,-88(fp)
   3a460:	10c00005 	stb	r3,0(r2)
    memcpy(sig+lenR+6, sp, lenS);
   3a464:	e0bfe917 	ldw	r2,-92(fp)
   3a468:	10800184 	addi	r2,r2,6
   3a46c:	e0fffc17 	ldw	r3,-16(fp)
   3a470:	1885883a 	add	r2,r3,r2
   3a474:	e1bfea17 	ldw	r6,-88(fp)
   3a478:	e17fe817 	ldw	r5,-96(fp)
   3a47c:	1009883a 	mov	r4,r2
   3a480:	00463980 	call	46398 <memcpy>
    return 1;
   3a484:	00800044 	movi	r2,1
}
   3a488:	e037883a 	mov	sp,fp
   3a48c:	dfc00117 	ldw	ra,4(sp)
   3a490:	df000017 	ldw	fp,0(sp)
   3a494:	dec00204 	addi	sp,sp,8
   3a498:	f800283a 	ret

0003a49c <secp256k1_ecdsa_sig_verify>:

static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar *sigs, const secp256k1_ge *pubkey, const secp256k1_scalar *message) {
   3a49c:	deff8304 	addi	sp,sp,-500
   3a4a0:	dfc07c15 	stw	ra,496(sp)
   3a4a4:	df007b15 	stw	fp,492(sp)
   3a4a8:	df007b04 	addi	fp,sp,492
   3a4ac:	e13ffc15 	stw	r4,-16(fp)
   3a4b0:	e17ffd15 	stw	r5,-12(fp)
   3a4b4:	e1bffe15 	stw	r6,-8(fp)
   3a4b8:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar sn, u1, u2;
    secp256k1_fe xr;
    secp256k1_gej pubkeyj;
    secp256k1_gej pr;

    if (secp256k1_scalar_is_zero(sigr) || secp256k1_scalar_is_zero(sigs)) {
   3a4bc:	e13ffd17 	ldw	r4,-12(fp)
   3a4c0:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3a4c4:	1000031e 	bne	r2,zero,3a4d4 <secp256k1_ecdsa_sig_verify+0x38>
   3a4c8:	e13ffe17 	ldw	r4,-8(fp)
   3a4cc:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3a4d0:	10000226 	beq	r2,zero,3a4dc <secp256k1_ecdsa_sig_verify+0x40>
        return 0;
   3a4d4:	0005883a 	mov	r2,zero
   3a4d8:	00004906 	br	3a600 <secp256k1_ecdsa_sig_verify+0x164>
    }

    secp256k1_scalar_inverse_var(&sn, sigs);
   3a4dc:	e0bf8e04 	addi	r2,fp,-456
   3a4e0:	e17ffe17 	ldw	r5,-8(fp)
   3a4e4:	1009883a 	mov	r4,r2
   3a4e8:	00370540 	call	37054 <secp256k1_scalar_inverse_var>
    secp256k1_scalar_mul(&u1, &sn, message);
   3a4ec:	e0ff8e04 	addi	r3,fp,-456
   3a4f0:	e0bf9604 	addi	r2,fp,-424
   3a4f4:	e1800217 	ldw	r6,8(fp)
   3a4f8:	180b883a 	mov	r5,r3
   3a4fc:	1009883a 	mov	r4,r2
   3a500:	003621c0 	call	3621c <secp256k1_scalar_mul>
    secp256k1_scalar_mul(&u2, &sn, sigr);
   3a504:	e0ff8e04 	addi	r3,fp,-456
   3a508:	e0bf9e04 	addi	r2,fp,-392
   3a50c:	e1bffd17 	ldw	r6,-12(fp)
   3a510:	180b883a 	mov	r5,r3
   3a514:	1009883a 	mov	r4,r2
   3a518:	003621c0 	call	3621c <secp256k1_scalar_mul>
    secp256k1_gej_set_ge(&pubkeyj, pubkey);
   3a51c:	e0bfb204 	addi	r2,fp,-312
   3a520:	e17fff17 	ldw	r5,-4(fp)
   3a524:	1009883a 	mov	r4,r2
   3a528:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
    secp256k1_ecmult(ctx, &pr, &pubkeyj, &u2, &u1);
   3a52c:	e17f9e04 	addi	r5,fp,-392
   3a530:	e13fb204 	addi	r4,fp,-312
   3a534:	e0ffd704 	addi	r3,fp,-164
   3a538:	e0bf9604 	addi	r2,fp,-424
   3a53c:	d8800015 	stw	r2,0(sp)
   3a540:	280f883a 	mov	r7,r5
   3a544:	200d883a 	mov	r6,r4
   3a548:	180b883a 	mov	r5,r3
   3a54c:	e13ffc17 	ldw	r4,-16(fp)
   3a550:	0037bcc0 	call	37bcc <secp256k1_ecmult>
    if (secp256k1_gej_is_infinity(&pr)) {
   3a554:	e0bfd704 	addi	r2,fp,-164
   3a558:	1009883a 	mov	r4,r2
   3a55c:	0022f600 	call	22f60 <secp256k1_gej_is_infinity>
   3a560:	10000226 	beq	r2,zero,3a56c <secp256k1_ecdsa_sig_verify+0xd0>
        return 0;
   3a564:	0005883a 	mov	r2,zero
   3a568:	00002506 	br	3a600 <secp256k1_ecdsa_sig_verify+0x164>
    }
    secp256k1_scalar_get_b32(c, sigr);
   3a56c:	e17ffd17 	ldw	r5,-12(fp)
   3a570:	e13f8604 	addi	r4,fp,-488
   3a574:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    secp256k1_fe_set_b32(&xr, c);
   3a578:	e0bfa604 	addi	r2,fp,-360
   3a57c:	e17f8604 	addi	r5,fp,-488
   3a580:	1009883a 	mov	r4,r2
   3a584:	00156ec0 	call	156ec <secp256k1_fe_set_b32>
     *    <=> (xr * pr.z^2 mod p == pr.x) || (xr + n < p && (xr + n) * pr.z^2 mod p == pr.x)
     *
     *  Thus, we can avoid the inversion, but we have to check both cases separately.
     *  secp256k1_gej_eq_x implements the (xr * pr.z^2 mod p == pr.x) test.
     */
    if (secp256k1_gej_eq_x_var(&xr, &pr)) {
   3a588:	e0ffd704 	addi	r3,fp,-164
   3a58c:	e0bfa604 	addi	r2,fp,-360
   3a590:	180b883a 	mov	r5,r3
   3a594:	1009883a 	mov	r4,r2
   3a598:	0022ca00 	call	22ca0 <secp256k1_gej_eq_x_var>
   3a59c:	10000226 	beq	r2,zero,3a5a8 <secp256k1_ecdsa_sig_verify+0x10c>
        /* xr * pr.z^2 mod p == pr.x, so the signature is valid. */
        return 1;
   3a5a0:	00800044 	movi	r2,1
   3a5a4:	00001606 	br	3a600 <secp256k1_ecdsa_sig_verify+0x164>
    }
    if (secp256k1_fe_cmp_var(&xr, &secp256k1_ecdsa_const_p_minus_order) >= 0) {
   3a5a8:	e0bfa604 	addi	r2,fp,-360
   3a5ac:	01400174 	movhi	r5,5
   3a5b0:	29586e04 	addi	r5,r5,25016
   3a5b4:	1009883a 	mov	r4,r2
   3a5b8:	00155840 	call	15584 <secp256k1_fe_cmp_var>
   3a5bc:	10000216 	blt	r2,zero,3a5c8 <secp256k1_ecdsa_sig_verify+0x12c>
        /* xr + n >= p, so we can skip testing the second case. */
        return 0;
   3a5c0:	0005883a 	mov	r2,zero
   3a5c4:	00000e06 	br	3a600 <secp256k1_ecdsa_sig_verify+0x164>
    }
    secp256k1_fe_add(&xr, &secp256k1_ecdsa_const_order_as_fe);
   3a5c8:	e0bfa604 	addi	r2,fp,-360
   3a5cc:	01400174 	movhi	r5,5
   3a5d0:	29586204 	addi	r5,r5,24968
   3a5d4:	1009883a 	mov	r4,r2
   3a5d8:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    if (secp256k1_gej_eq_x_var(&xr, &pr)) {
   3a5dc:	e0ffd704 	addi	r3,fp,-164
   3a5e0:	e0bfa604 	addi	r2,fp,-360
   3a5e4:	180b883a 	mov	r5,r3
   3a5e8:	1009883a 	mov	r4,r2
   3a5ec:	0022ca00 	call	22ca0 <secp256k1_gej_eq_x_var>
   3a5f0:	10000226 	beq	r2,zero,3a5fc <secp256k1_ecdsa_sig_verify+0x160>
        /* (xr + n) * pr.z^2 mod p == pr.x, so the signature is valid. */
        return 1;
   3a5f4:	00800044 	movi	r2,1
   3a5f8:	00000106 	br	3a600 <secp256k1_ecdsa_sig_verify+0x164>
    }
    return 0;
   3a5fc:	0005883a 	mov	r2,zero
}
   3a600:	e037883a 	mov	sp,fp
   3a604:	dfc00117 	ldw	ra,4(sp)
   3a608:	df000017 	ldw	fp,0(sp)
   3a60c:	dec00204 	addi	sp,sp,8
   3a610:	f800283a 	ret

0003a614 <secp256k1_ecdsa_sig_sign>:

static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid) {
   3a614:	deffaa04 	addi	sp,sp,-344
   3a618:	dfc05515 	stw	ra,340(sp)
   3a61c:	df005415 	stw	fp,336(sp)
   3a620:	dc005315 	stw	r16,332(sp)
   3a624:	df005404 	addi	fp,sp,336
   3a628:	e13ffb15 	stw	r4,-20(fp)
   3a62c:	e17ffc15 	stw	r5,-16(fp)
   3a630:	e1bffd15 	stw	r6,-12(fp)
   3a634:	e1fffe15 	stw	r7,-8(fp)
    unsigned char b[32];
    secp256k1_gej rp;
    secp256k1_ge r;
    secp256k1_scalar n;
    int overflow = 0;
   3a638:	e03ffa15 	stw	zero,-24(fp)

    secp256k1_ecmult_gen(ctx, &rp, nonce);
   3a63c:	e0bfb404 	addi	r2,fp,-304
   3a640:	e1800317 	ldw	r6,12(fp)
   3a644:	100b883a 	mov	r5,r2
   3a648:	e13ffb17 	ldw	r4,-20(fp)
   3a64c:	00398e40 	call	398e4 <secp256k1_ecmult_gen>
    secp256k1_ge_set_gej(&r, &rp);
   3a650:	e0ffb404 	addi	r3,fp,-304
   3a654:	e0bfd904 	addi	r2,fp,-156
   3a658:	180b883a 	mov	r5,r3
   3a65c:	1009883a 	mov	r4,r2
   3a660:	0021e940 	call	21e94 <secp256k1_ge_set_gej>
    secp256k1_fe_normalize(&r.x);
   3a664:	e0bfd904 	addi	r2,fp,-156
   3a668:	1009883a 	mov	r4,r2
   3a66c:	0013b3c0 	call	13b3c <secp256k1_fe_normalize>
    secp256k1_fe_normalize(&r.y);
   3a670:	e0bfd904 	addi	r2,fp,-156
   3a674:	10800c04 	addi	r2,r2,48
   3a678:	1009883a 	mov	r4,r2
   3a67c:	0013b3c0 	call	13b3c <secp256k1_fe_normalize>
    secp256k1_fe_get_b32(b, &r.x);
   3a680:	e0bfd904 	addi	r2,fp,-156
   3a684:	100b883a 	mov	r5,r2
   3a688:	e13fac04 	addi	r4,fp,-336
   3a68c:	00159700 	call	15970 <secp256k1_fe_get_b32>
    secp256k1_scalar_set_b32(sigr, b, &overflow);
   3a690:	e0bffa04 	addi	r2,fp,-24
   3a694:	100d883a 	mov	r6,r2
   3a698:	e17fac04 	addi	r5,fp,-336
   3a69c:	e13ffc17 	ldw	r4,-16(fp)
   3a6a0:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    if (secp256k1_scalar_is_zero(sigr)) {
   3a6a4:	e13ffc17 	ldw	r4,-16(fp)
   3a6a8:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3a6ac:	10000826 	beq	r2,zero,3a6d0 <secp256k1_ecdsa_sig_sign+0xbc>
        /* P.x = order is on the curve, so technically sig->r could end up zero, which would be an invalid signature.
         * This branch is cryptographically unreachable as hitting it requires finding the discrete log of P.x = N.
         */
        secp256k1_gej_clear(&rp);
   3a6b0:	e0bfb404 	addi	r2,fp,-304
   3a6b4:	1009883a 	mov	r4,r2
   3a6b8:	002293c0 	call	2293c <secp256k1_gej_clear>
        secp256k1_ge_clear(&r);
   3a6bc:	e0bfd904 	addi	r2,fp,-156
   3a6c0:	1009883a 	mov	r4,r2
   3a6c4:	002299c0 	call	2299c <secp256k1_ge_clear>
        return 0;
   3a6c8:	0005883a 	mov	r2,zero
   3a6cc:	00003f06 	br	3a7cc <secp256k1_ecdsa_sig_sign+0x1b8>
    }
    if (recid) {
   3a6d0:	e0800417 	ldw	r2,16(fp)
   3a6d4:	10000e26 	beq	r2,zero,3a710 <secp256k1_ecdsa_sig_sign+0xfc>
        /* The overflow condition is cryptographically unreachable as hitting it requires finding the discrete log
         * of some P where P.x >= order, and only 1 in about 2^127 points meet this criteria.
         */
        *recid = (overflow ? 2 : 0) | (secp256k1_fe_is_odd(&r.y) ? 1 : 0);
   3a6d8:	e0bffa17 	ldw	r2,-24(fp)
   3a6dc:	10000226 	beq	r2,zero,3a6e8 <secp256k1_ecdsa_sig_sign+0xd4>
   3a6e0:	04000084 	movi	r16,2
   3a6e4:	00000106 	br	3a6ec <secp256k1_ecdsa_sig_sign+0xd8>
   3a6e8:	0021883a 	mov	r16,zero
   3a6ec:	e0bfd904 	addi	r2,fp,-156
   3a6f0:	10800c04 	addi	r2,r2,48
   3a6f4:	1009883a 	mov	r4,r2
   3a6f8:	00154900 	call	15490 <secp256k1_fe_is_odd>
   3a6fc:	1004c03a 	cmpne	r2,r2,zero
   3a700:	10803fcc 	andi	r2,r2,255
   3a704:	8086b03a 	or	r3,r16,r2
   3a708:	e0800417 	ldw	r2,16(fp)
   3a70c:	10c00015 	stw	r3,0(r2)
    }
    secp256k1_scalar_mul(&n, sigr, seckey);
   3a710:	e0bff204 	addi	r2,fp,-56
   3a714:	e1bffe17 	ldw	r6,-8(fp)
   3a718:	e17ffc17 	ldw	r5,-16(fp)
   3a71c:	1009883a 	mov	r4,r2
   3a720:	003621c0 	call	3621c <secp256k1_scalar_mul>
    secp256k1_scalar_add(&n, &n, message);
   3a724:	e0fff204 	addi	r3,fp,-56
   3a728:	e0bff204 	addi	r2,fp,-56
   3a72c:	e1800217 	ldw	r6,8(fp)
   3a730:	180b883a 	mov	r5,r3
   3a734:	1009883a 	mov	r4,r2
   3a738:	00258640 	call	25864 <secp256k1_scalar_add>
    secp256k1_scalar_inverse(sigs, nonce);
   3a73c:	e1400317 	ldw	r5,12(fp)
   3a740:	e13ffd17 	ldw	r4,-12(fp)
   3a744:	00365100 	call	36510 <secp256k1_scalar_inverse>
    secp256k1_scalar_mul(sigs, sigs, &n);
   3a748:	e0bff204 	addi	r2,fp,-56
   3a74c:	100d883a 	mov	r6,r2
   3a750:	e17ffd17 	ldw	r5,-12(fp)
   3a754:	e13ffd17 	ldw	r4,-12(fp)
   3a758:	003621c0 	call	3621c <secp256k1_scalar_mul>
    secp256k1_scalar_clear(&n);
   3a75c:	e0bff204 	addi	r2,fp,-56
   3a760:	1009883a 	mov	r4,r2
   3a764:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    secp256k1_gej_clear(&rp);
   3a768:	e0bfb404 	addi	r2,fp,-304
   3a76c:	1009883a 	mov	r4,r2
   3a770:	002293c0 	call	2293c <secp256k1_gej_clear>
    secp256k1_ge_clear(&r);
   3a774:	e0bfd904 	addi	r2,fp,-156
   3a778:	1009883a 	mov	r4,r2
   3a77c:	002299c0 	call	2299c <secp256k1_ge_clear>
    if (secp256k1_scalar_is_zero(sigs)) {
   3a780:	e13ffd17 	ldw	r4,-12(fp)
   3a784:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3a788:	10000226 	beq	r2,zero,3a794 <secp256k1_ecdsa_sig_sign+0x180>
        return 0;
   3a78c:	0005883a 	mov	r2,zero
   3a790:	00000e06 	br	3a7cc <secp256k1_ecdsa_sig_sign+0x1b8>
    }
    if (secp256k1_scalar_is_high(sigs)) {
   3a794:	e13ffd17 	ldw	r4,-12(fp)
   3a798:	0026f540 	call	26f54 <secp256k1_scalar_is_high>
   3a79c:	10000a26 	beq	r2,zero,3a7c8 <secp256k1_ecdsa_sig_sign+0x1b4>
        secp256k1_scalar_negate(sigs, sigs);
   3a7a0:	e17ffd17 	ldw	r5,-12(fp)
   3a7a4:	e13ffd17 	ldw	r4,-12(fp)
   3a7a8:	0026a380 	call	26a38 <secp256k1_scalar_negate>
        if (recid) {
   3a7ac:	e0800417 	ldw	r2,16(fp)
   3a7b0:	10000526 	beq	r2,zero,3a7c8 <secp256k1_ecdsa_sig_sign+0x1b4>
            *recid ^= 1;
   3a7b4:	e0800417 	ldw	r2,16(fp)
   3a7b8:	10800017 	ldw	r2,0(r2)
   3a7bc:	10c0005c 	xori	r3,r2,1
   3a7c0:	e0800417 	ldw	r2,16(fp)
   3a7c4:	10c00015 	stw	r3,0(r2)
        }
    }
    return 1;
   3a7c8:	00800044 	movi	r2,1
}
   3a7cc:	e6ffff04 	addi	sp,fp,-4
   3a7d0:	dfc00217 	ldw	ra,8(sp)
   3a7d4:	df000117 	ldw	fp,4(sp)
   3a7d8:	dc000017 	ldw	r16,0(sp)
   3a7dc:	dec00304 	addi	sp,sp,12
   3a7e0:	f800283a 	ret

0003a7e4 <secp256k1_eckey_pubkey_parse>:
#include "scalar.h"
#include "field.h"
#include "group.h"
#include "ecmult_gen.h"

static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {
   3a7e4:	deffe304 	addi	sp,sp,-116
   3a7e8:	dfc01c15 	stw	ra,112(sp)
   3a7ec:	df001b15 	stw	fp,108(sp)
   3a7f0:	df001b04 	addi	fp,sp,108
   3a7f4:	e13ffd15 	stw	r4,-12(fp)
   3a7f8:	e17ffe15 	stw	r5,-8(fp)
   3a7fc:	e1bfff15 	stw	r6,-4(fp)
    if (size == 33 && (pub[0] == 0x02 || pub[0] == 0x03)) {
   3a800:	e0bfff17 	ldw	r2,-4(fp)
   3a804:	10800858 	cmpnei	r2,r2,33
   3a808:	10001e1e 	bne	r2,zero,3a884 <secp256k1_eckey_pubkey_parse+0xa0>
   3a80c:	e0bffe17 	ldw	r2,-8(fp)
   3a810:	10800003 	ldbu	r2,0(r2)
   3a814:	10803fcc 	andi	r2,r2,255
   3a818:	108000a0 	cmpeqi	r2,r2,2
   3a81c:	1000051e 	bne	r2,zero,3a834 <secp256k1_eckey_pubkey_parse+0x50>
   3a820:	e0bffe17 	ldw	r2,-8(fp)
   3a824:	10800003 	ldbu	r2,0(r2)
   3a828:	10803fcc 	andi	r2,r2,255
   3a82c:	108000d8 	cmpnei	r2,r2,3
   3a830:	1000141e 	bne	r2,zero,3a884 <secp256k1_eckey_pubkey_parse+0xa0>
        secp256k1_fe x;
        return secp256k1_fe_set_b32(&x, pub+1) && secp256k1_ge_set_xo_var(elem, &x, pub[0] == 0x03);
   3a834:	e0bffe17 	ldw	r2,-8(fp)
   3a838:	10800044 	addi	r2,r2,1
   3a83c:	100b883a 	mov	r5,r2
   3a840:	e13fe504 	addi	r4,fp,-108
   3a844:	00156ec0 	call	156ec <secp256k1_fe_set_b32>
   3a848:	10000c26 	beq	r2,zero,3a87c <secp256k1_eckey_pubkey_parse+0x98>
   3a84c:	e0bffe17 	ldw	r2,-8(fp)
   3a850:	10800003 	ldbu	r2,0(r2)
   3a854:	10803fcc 	andi	r2,r2,255
   3a858:	108000e0 	cmpeqi	r2,r2,3
   3a85c:	10803fcc 	andi	r2,r2,255
   3a860:	100d883a 	mov	r6,r2
   3a864:	e17fe504 	addi	r5,fp,-108
   3a868:	e13ffd17 	ldw	r4,-12(fp)
   3a86c:	0022ae40 	call	22ae4 <secp256k1_ge_set_xo_var>
   3a870:	10000226 	beq	r2,zero,3a87c <secp256k1_eckey_pubkey_parse+0x98>
   3a874:	00800044 	movi	r2,1
   3a878:	00004106 	br	3a980 <secp256k1_eckey_pubkey_parse+0x19c>
   3a87c:	0005883a 	mov	r2,zero
   3a880:	00003f06 	br	3a980 <secp256k1_eckey_pubkey_parse+0x19c>
    } else if (size == 65 && (pub[0] == 0x04 || pub[0] == 0x06 || pub[0] == 0x07)) {
   3a884:	e0bfff17 	ldw	r2,-4(fp)
   3a888:	10801058 	cmpnei	r2,r2,65
   3a88c:	10003b1e 	bne	r2,zero,3a97c <secp256k1_eckey_pubkey_parse+0x198>
   3a890:	e0bffe17 	ldw	r2,-8(fp)
   3a894:	10800003 	ldbu	r2,0(r2)
   3a898:	10803fcc 	andi	r2,r2,255
   3a89c:	10800120 	cmpeqi	r2,r2,4
   3a8a0:	10000a1e 	bne	r2,zero,3a8cc <secp256k1_eckey_pubkey_parse+0xe8>
   3a8a4:	e0bffe17 	ldw	r2,-8(fp)
   3a8a8:	10800003 	ldbu	r2,0(r2)
   3a8ac:	10803fcc 	andi	r2,r2,255
   3a8b0:	108001a0 	cmpeqi	r2,r2,6
   3a8b4:	1000051e 	bne	r2,zero,3a8cc <secp256k1_eckey_pubkey_parse+0xe8>
   3a8b8:	e0bffe17 	ldw	r2,-8(fp)
   3a8bc:	10800003 	ldbu	r2,0(r2)
   3a8c0:	10803fcc 	andi	r2,r2,255
   3a8c4:	108001d8 	cmpnei	r2,r2,7
   3a8c8:	10002c1e 	bne	r2,zero,3a97c <secp256k1_eckey_pubkey_parse+0x198>
        secp256k1_fe x, y;
        if (!secp256k1_fe_set_b32(&x, pub+1) || !secp256k1_fe_set_b32(&y, pub+33)) {
   3a8cc:	e0bffe17 	ldw	r2,-8(fp)
   3a8d0:	10c00044 	addi	r3,r2,1
   3a8d4:	e0bff104 	addi	r2,fp,-60
   3a8d8:	180b883a 	mov	r5,r3
   3a8dc:	1009883a 	mov	r4,r2
   3a8e0:	00156ec0 	call	156ec <secp256k1_fe_set_b32>
   3a8e4:	10000626 	beq	r2,zero,3a900 <secp256k1_eckey_pubkey_parse+0x11c>
   3a8e8:	e0bffe17 	ldw	r2,-8(fp)
   3a8ec:	10800844 	addi	r2,r2,33
   3a8f0:	100b883a 	mov	r5,r2
   3a8f4:	e13fe504 	addi	r4,fp,-108
   3a8f8:	00156ec0 	call	156ec <secp256k1_fe_set_b32>
   3a8fc:	1000021e 	bne	r2,zero,3a908 <secp256k1_eckey_pubkey_parse+0x124>
            return 0;
   3a900:	0005883a 	mov	r2,zero
   3a904:	00001e06 	br	3a980 <secp256k1_eckey_pubkey_parse+0x19c>
        }
        secp256k1_ge_set_xy(elem, &x, &y);
   3a908:	e0bff104 	addi	r2,fp,-60
   3a90c:	e1bfe504 	addi	r6,fp,-108
   3a910:	100b883a 	mov	r5,r2
   3a914:	e13ffd17 	ldw	r4,-12(fp)
   3a918:	0021ce80 	call	21ce8 <secp256k1_ge_set_xy>
        if ((pub[0] == 0x06 || pub[0] == 0x07) && secp256k1_fe_is_odd(&y) != (pub[0] == 0x07)) {
   3a91c:	e0bffe17 	ldw	r2,-8(fp)
   3a920:	10800003 	ldbu	r2,0(r2)
   3a924:	10803fcc 	andi	r2,r2,255
   3a928:	108001a0 	cmpeqi	r2,r2,6
   3a92c:	1000051e 	bne	r2,zero,3a944 <secp256k1_eckey_pubkey_parse+0x160>
   3a930:	e0bffe17 	ldw	r2,-8(fp)
   3a934:	10800003 	ldbu	r2,0(r2)
   3a938:	10803fcc 	andi	r2,r2,255
   3a93c:	108001d8 	cmpnei	r2,r2,7
   3a940:	10000b1e 	bne	r2,zero,3a970 <secp256k1_eckey_pubkey_parse+0x18c>
   3a944:	e13fe504 	addi	r4,fp,-108
   3a948:	00154900 	call	15490 <secp256k1_fe_is_odd>
   3a94c:	1007883a 	mov	r3,r2
   3a950:	e0bffe17 	ldw	r2,-8(fp)
   3a954:	10800003 	ldbu	r2,0(r2)
   3a958:	10803fcc 	andi	r2,r2,255
   3a95c:	108001e0 	cmpeqi	r2,r2,7
   3a960:	10803fcc 	andi	r2,r2,255
   3a964:	18800226 	beq	r3,r2,3a970 <secp256k1_eckey_pubkey_parse+0x18c>
            return 0;
   3a968:	0005883a 	mov	r2,zero
   3a96c:	00000406 	br	3a980 <secp256k1_eckey_pubkey_parse+0x19c>
        }
        return secp256k1_ge_is_valid_var(elem);
   3a970:	e13ffd17 	ldw	r4,-12(fp)
   3a974:	00230900 	call	23090 <secp256k1_ge_is_valid_var>
   3a978:	00000106 	br	3a980 <secp256k1_eckey_pubkey_parse+0x19c>
    } else {
        return 0;
   3a97c:	0005883a 	mov	r2,zero
    }
}
   3a980:	e037883a 	mov	sp,fp
   3a984:	dfc00117 	ldw	ra,4(sp)
   3a988:	df000017 	ldw	fp,0(sp)
   3a98c:	dec00204 	addi	sp,sp,8
   3a990:	f800283a 	ret

0003a994 <secp256k1_eckey_pubkey_serialize>:

static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *pub, size_t *size, int compressed) {
   3a994:	defffa04 	addi	sp,sp,-24
   3a998:	dfc00515 	stw	ra,20(sp)
   3a99c:	df000415 	stw	fp,16(sp)
   3a9a0:	df000404 	addi	fp,sp,16
   3a9a4:	e13ffc15 	stw	r4,-16(fp)
   3a9a8:	e17ffd15 	stw	r5,-12(fp)
   3a9ac:	e1bffe15 	stw	r6,-8(fp)
   3a9b0:	e1ffff15 	stw	r7,-4(fp)
    if (secp256k1_ge_is_infinity(elem)) {
   3a9b4:	e13ffc17 	ldw	r4,-16(fp)
   3a9b8:	0021dec0 	call	21dec <secp256k1_ge_is_infinity>
   3a9bc:	10000226 	beq	r2,zero,3a9c8 <secp256k1_eckey_pubkey_serialize+0x34>
        return 0;
   3a9c0:	0005883a 	mov	r2,zero
   3a9c4:	00002b06 	br	3aa74 <secp256k1_eckey_pubkey_serialize+0xe0>
    }
    secp256k1_fe_normalize_var(&elem->x);
   3a9c8:	e0bffc17 	ldw	r2,-16(fp)
   3a9cc:	1009883a 	mov	r4,r2
   3a9d0:	001446c0 	call	1446c <secp256k1_fe_normalize_var>
    secp256k1_fe_normalize_var(&elem->y);
   3a9d4:	e0bffc17 	ldw	r2,-16(fp)
   3a9d8:	10800c04 	addi	r2,r2,48
   3a9dc:	1009883a 	mov	r4,r2
   3a9e0:	001446c0 	call	1446c <secp256k1_fe_normalize_var>
    secp256k1_fe_get_b32(&pub[1], &elem->x);
   3a9e4:	e0bffd17 	ldw	r2,-12(fp)
   3a9e8:	10800044 	addi	r2,r2,1
   3a9ec:	e0fffc17 	ldw	r3,-16(fp)
   3a9f0:	180b883a 	mov	r5,r3
   3a9f4:	1009883a 	mov	r4,r2
   3a9f8:	00159700 	call	15970 <secp256k1_fe_get_b32>
    if (compressed) {
   3a9fc:	e0bfff17 	ldw	r2,-4(fp)
   3aa00:	10000e26 	beq	r2,zero,3aa3c <secp256k1_eckey_pubkey_serialize+0xa8>
        *size = 33;
   3aa04:	e0bffe17 	ldw	r2,-8(fp)
   3aa08:	00c00844 	movi	r3,33
   3aa0c:	10c00015 	stw	r3,0(r2)
        pub[0] = 0x02 | (secp256k1_fe_is_odd(&elem->y) ? 0x01 : 0x00);
   3aa10:	e0bffc17 	ldw	r2,-16(fp)
   3aa14:	10800c04 	addi	r2,r2,48
   3aa18:	1009883a 	mov	r4,r2
   3aa1c:	00154900 	call	15490 <secp256k1_fe_is_odd>
   3aa20:	10000226 	beq	r2,zero,3aa2c <secp256k1_eckey_pubkey_serialize+0x98>
   3aa24:	008000c4 	movi	r2,3
   3aa28:	00000106 	br	3aa30 <secp256k1_eckey_pubkey_serialize+0x9c>
   3aa2c:	00800084 	movi	r2,2
   3aa30:	e0fffd17 	ldw	r3,-12(fp)
   3aa34:	18800005 	stb	r2,0(r3)
   3aa38:	00000d06 	br	3aa70 <secp256k1_eckey_pubkey_serialize+0xdc>
    } else {
        *size = 65;
   3aa3c:	e0bffe17 	ldw	r2,-8(fp)
   3aa40:	00c01044 	movi	r3,65
   3aa44:	10c00015 	stw	r3,0(r2)
        pub[0] = 0x04;
   3aa48:	e0bffd17 	ldw	r2,-12(fp)
   3aa4c:	00c00104 	movi	r3,4
   3aa50:	10c00005 	stb	r3,0(r2)
        secp256k1_fe_get_b32(&pub[33], &elem->y);
   3aa54:	e0bffd17 	ldw	r2,-12(fp)
   3aa58:	10c00844 	addi	r3,r2,33
   3aa5c:	e0bffc17 	ldw	r2,-16(fp)
   3aa60:	10800c04 	addi	r2,r2,48
   3aa64:	100b883a 	mov	r5,r2
   3aa68:	1809883a 	mov	r4,r3
   3aa6c:	00159700 	call	15970 <secp256k1_fe_get_b32>
    }
    return 1;
   3aa70:	00800044 	movi	r2,1
}
   3aa74:	e037883a 	mov	sp,fp
   3aa78:	dfc00117 	ldw	ra,4(sp)
   3aa7c:	df000017 	ldw	fp,0(sp)
   3aa80:	dec00204 	addi	sp,sp,8
   3aa84:	f800283a 	ret

0003aa88 <secp256k1_eckey_privkey_tweak_add>:

static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar *key, const secp256k1_scalar *tweak) {
   3aa88:	defffc04 	addi	sp,sp,-16
   3aa8c:	dfc00315 	stw	ra,12(sp)
   3aa90:	df000215 	stw	fp,8(sp)
   3aa94:	df000204 	addi	fp,sp,8
   3aa98:	e13ffe15 	stw	r4,-8(fp)
   3aa9c:	e17fff15 	stw	r5,-4(fp)
    secp256k1_scalar_add(key, key, tweak);
   3aaa0:	e1bfff17 	ldw	r6,-4(fp)
   3aaa4:	e17ffe17 	ldw	r5,-8(fp)
   3aaa8:	e13ffe17 	ldw	r4,-8(fp)
   3aaac:	00258640 	call	25864 <secp256k1_scalar_add>
    if (secp256k1_scalar_is_zero(key)) {
   3aab0:	e13ffe17 	ldw	r4,-8(fp)
   3aab4:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3aab8:	10000226 	beq	r2,zero,3aac4 <secp256k1_eckey_privkey_tweak_add+0x3c>
        return 0;
   3aabc:	0005883a 	mov	r2,zero
   3aac0:	00000106 	br	3aac8 <secp256k1_eckey_privkey_tweak_add+0x40>
    }
    return 1;
   3aac4:	00800044 	movi	r2,1
}
   3aac8:	e037883a 	mov	sp,fp
   3aacc:	dfc00117 	ldw	ra,4(sp)
   3aad0:	df000017 	ldw	fp,0(sp)
   3aad4:	dec00204 	addi	sp,sp,8
   3aad8:	f800283a 	ret

0003aadc <secp256k1_eckey_pubkey_tweak_add>:

static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {
   3aadc:	deffcd04 	addi	sp,sp,-204
   3aae0:	dfc03215 	stw	ra,200(sp)
   3aae4:	df003115 	stw	fp,196(sp)
   3aae8:	df003104 	addi	fp,sp,196
   3aaec:	e13ffd15 	stw	r4,-12(fp)
   3aaf0:	e17ffe15 	stw	r5,-8(fp)
   3aaf4:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_gej pt;
    secp256k1_scalar one;
    secp256k1_gej_set_ge(&pt, key);
   3aaf8:	e17ffe17 	ldw	r5,-8(fp)
   3aafc:	e13fd004 	addi	r4,fp,-192
   3ab00:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
    secp256k1_scalar_set_int(&one, 1);
   3ab04:	e0bff504 	addi	r2,fp,-44
   3ab08:	01400044 	movi	r5,1
   3ab0c:	1009883a 	mov	r4,r2
   3ab10:	0024f200 	call	24f20 <secp256k1_scalar_set_int>
    secp256k1_ecmult(ctx, &pt, &pt, &one, tweak);
   3ab14:	e0fff504 	addi	r3,fp,-44
   3ab18:	e0bfff17 	ldw	r2,-4(fp)
   3ab1c:	d8800015 	stw	r2,0(sp)
   3ab20:	180f883a 	mov	r7,r3
   3ab24:	e1bfd004 	addi	r6,fp,-192
   3ab28:	e17fd004 	addi	r5,fp,-192
   3ab2c:	e13ffd17 	ldw	r4,-12(fp)
   3ab30:	0037bcc0 	call	37bcc <secp256k1_ecmult>

    if (secp256k1_gej_is_infinity(&pt)) {
   3ab34:	e13fd004 	addi	r4,fp,-192
   3ab38:	0022f600 	call	22f60 <secp256k1_gej_is_infinity>
   3ab3c:	10000226 	beq	r2,zero,3ab48 <secp256k1_eckey_pubkey_tweak_add+0x6c>
        return 0;
   3ab40:	0005883a 	mov	r2,zero
   3ab44:	00000406 	br	3ab58 <secp256k1_eckey_pubkey_tweak_add+0x7c>
    }
    secp256k1_ge_set_gej(key, &pt);
   3ab48:	e17fd004 	addi	r5,fp,-192
   3ab4c:	e13ffe17 	ldw	r4,-8(fp)
   3ab50:	0021e940 	call	21e94 <secp256k1_ge_set_gej>
    return 1;
   3ab54:	00800044 	movi	r2,1
}
   3ab58:	e037883a 	mov	sp,fp
   3ab5c:	dfc00117 	ldw	ra,4(sp)
   3ab60:	df000017 	ldw	fp,0(sp)
   3ab64:	dec00204 	addi	sp,sp,8
   3ab68:	f800283a 	ret

0003ab6c <secp256k1_eckey_privkey_tweak_mul>:

static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak) {
   3ab6c:	defffc04 	addi	sp,sp,-16
   3ab70:	dfc00315 	stw	ra,12(sp)
   3ab74:	df000215 	stw	fp,8(sp)
   3ab78:	df000204 	addi	fp,sp,8
   3ab7c:	e13ffe15 	stw	r4,-8(fp)
   3ab80:	e17fff15 	stw	r5,-4(fp)
    if (secp256k1_scalar_is_zero(tweak)) {
   3ab84:	e13fff17 	ldw	r4,-4(fp)
   3ab88:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3ab8c:	10000226 	beq	r2,zero,3ab98 <secp256k1_eckey_privkey_tweak_mul+0x2c>
        return 0;
   3ab90:	0005883a 	mov	r2,zero
   3ab94:	00000506 	br	3abac <secp256k1_eckey_privkey_tweak_mul+0x40>
    }

    secp256k1_scalar_mul(key, key, tweak);
   3ab98:	e1bfff17 	ldw	r6,-4(fp)
   3ab9c:	e17ffe17 	ldw	r5,-8(fp)
   3aba0:	e13ffe17 	ldw	r4,-8(fp)
   3aba4:	003621c0 	call	3621c <secp256k1_scalar_mul>
    return 1;
   3aba8:	00800044 	movi	r2,1
}
   3abac:	e037883a 	mov	sp,fp
   3abb0:	dfc00117 	ldw	ra,4(sp)
   3abb4:	df000017 	ldw	fp,0(sp)
   3abb8:	dec00204 	addi	sp,sp,8
   3abbc:	f800283a 	ret

0003abc0 <secp256k1_eckey_pubkey_tweak_mul>:

static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {
   3abc0:	deffcd04 	addi	sp,sp,-204
   3abc4:	dfc03215 	stw	ra,200(sp)
   3abc8:	df003115 	stw	fp,196(sp)
   3abcc:	df003104 	addi	fp,sp,196
   3abd0:	e13ffd15 	stw	r4,-12(fp)
   3abd4:	e17ffe15 	stw	r5,-8(fp)
   3abd8:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar zero;
    secp256k1_gej pt;
    if (secp256k1_scalar_is_zero(tweak)) {
   3abdc:	e13fff17 	ldw	r4,-4(fp)
   3abe0:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3abe4:	10000226 	beq	r2,zero,3abf0 <secp256k1_eckey_pubkey_tweak_mul+0x30>
        return 0;
   3abe8:	0005883a 	mov	r2,zero
   3abec:	00001506 	br	3ac44 <secp256k1_eckey_pubkey_tweak_mul+0x84>
    }

    secp256k1_scalar_set_int(&zero, 0);
   3abf0:	000b883a 	mov	r5,zero
   3abf4:	e13fd004 	addi	r4,fp,-192
   3abf8:	0024f200 	call	24f20 <secp256k1_scalar_set_int>
    secp256k1_gej_set_ge(&pt, key);
   3abfc:	e0bfd804 	addi	r2,fp,-160
   3ac00:	e17ffe17 	ldw	r5,-8(fp)
   3ac04:	1009883a 	mov	r4,r2
   3ac08:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
    secp256k1_ecmult(ctx, &pt, &pt, tweak, &zero);
   3ac0c:	e0ffd804 	addi	r3,fp,-160
   3ac10:	e0bfd804 	addi	r2,fp,-160
   3ac14:	e13fd004 	addi	r4,fp,-192
   3ac18:	d9000015 	stw	r4,0(sp)
   3ac1c:	e1ffff17 	ldw	r7,-4(fp)
   3ac20:	180d883a 	mov	r6,r3
   3ac24:	100b883a 	mov	r5,r2
   3ac28:	e13ffd17 	ldw	r4,-12(fp)
   3ac2c:	0037bcc0 	call	37bcc <secp256k1_ecmult>
    secp256k1_ge_set_gej(key, &pt);
   3ac30:	e0bfd804 	addi	r2,fp,-160
   3ac34:	100b883a 	mov	r5,r2
   3ac38:	e13ffe17 	ldw	r4,-8(fp)
   3ac3c:	0021e940 	call	21e94 <secp256k1_ge_set_gej>
    return 1;
   3ac40:	00800044 	movi	r2,1
}
   3ac44:	e037883a 	mov	sp,fp
   3ac48:	dfc00117 	ldw	ra,4(sp)
   3ac4c:	df000017 	ldw	fp,0(sp)
   3ac50:	dec00204 	addi	sp,sp,8
   3ac54:	f800283a 	ret

0003ac58 <default_illegal_callback_fn>:
        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
        return 0; \
    } \
} while(0)

static void default_illegal_callback_fn(const char* str, void* data) {
   3ac58:	defffc04 	addi	sp,sp,-16
   3ac5c:	dfc00315 	stw	ra,12(sp)
   3ac60:	df000215 	stw	fp,8(sp)
   3ac64:	df000204 	addi	fp,sp,8
   3ac68:	e13ffe15 	stw	r4,-8(fp)
   3ac6c:	e17fff15 	stw	r5,-4(fp)
    (void)data;
    fprintf(stderr, "[libsecp256k1] illegal argument: %s\n", str);
   3ac70:	d0a01617 	ldw	r2,-32680(gp)
   3ac74:	10800317 	ldw	r2,12(r2)
   3ac78:	e1bffe17 	ldw	r6,-8(fp)
   3ac7c:	01400174 	movhi	r5,5
   3ac80:	29587a04 	addi	r5,r5,25064
   3ac84:	1009883a 	mov	r4,r2
   3ac88:	00461000 	call	46100 <fprintf>
    abort();
   3ac8c:	0045fd40 	call	45fd4 <abort>

0003ac90 <default_error_callback_fn>:
static const secp256k1_callback default_illegal_callback = {
    default_illegal_callback_fn,
    NULL
};

static void default_error_callback_fn(const char* str, void* data) {
   3ac90:	defffc04 	addi	sp,sp,-16
   3ac94:	dfc00315 	stw	ra,12(sp)
   3ac98:	df000215 	stw	fp,8(sp)
   3ac9c:	df000204 	addi	fp,sp,8
   3aca0:	e13ffe15 	stw	r4,-8(fp)
   3aca4:	e17fff15 	stw	r5,-4(fp)
    (void)data;
    fprintf(stderr, "[libsecp256k1] internal consistency check failed: %s\n", str);
   3aca8:	d0a01617 	ldw	r2,-32680(gp)
   3acac:	10800317 	ldw	r2,12(r2)
   3acb0:	e1bffe17 	ldw	r6,-8(fp)
   3acb4:	01400174 	movhi	r5,5
   3acb8:	29588404 	addi	r5,r5,25104
   3acbc:	1009883a 	mov	r4,r2
   3acc0:	00461000 	call	46100 <fprintf>
    abort();
   3acc4:	0045fd40 	call	45fd4 <abort>

0003acc8 <secp256k1_context_create>:
    secp256k1_ecmult_gen_context ecmult_gen_ctx;
    secp256k1_callback illegal_callback;
    secp256k1_callback error_callback;
};

secp256k1_context* secp256k1_context_create(unsigned int flags) {
   3acc8:	defffc04 	addi	sp,sp,-16
   3accc:	dfc00315 	stw	ra,12(sp)
   3acd0:	df000215 	stw	fp,8(sp)
   3acd4:	df000204 	addi	fp,sp,8
   3acd8:	e13fff15 	stw	r4,-4(fp)
    secp256k1_context* ret = (secp256k1_context*)checked_malloc(&default_error_callback, sizeof(secp256k1_context));
   3acdc:	01403304 	movi	r5,204
   3ace0:	d1200b04 	addi	r4,gp,-32724
   3ace4:	000de6c0 	call	de6c <checked_malloc>
   3ace8:	e0bffe15 	stw	r2,-8(fp)
    ret->illegal_callback = default_illegal_callback;
   3acec:	e0fffe17 	ldw	r3,-8(fp)
   3acf0:	00800134 	movhi	r2,4
   3acf4:	10ab1604 	addi	r2,r2,-21416
   3acf8:	18802f15 	stw	r2,188(r3)
   3acfc:	e0bffe17 	ldw	r2,-8(fp)
   3ad00:	10003015 	stw	zero,192(r2)
    ret->error_callback = default_error_callback;
   3ad04:	e0fffe17 	ldw	r3,-8(fp)
   3ad08:	00800134 	movhi	r2,4
   3ad0c:	10ab2404 	addi	r2,r2,-21360
   3ad10:	18803115 	stw	r2,196(r3)
   3ad14:	e0bffe17 	ldw	r2,-8(fp)
   3ad18:	10003215 	stw	zero,200(r2)

    if (EXPECT((flags & SECP256K1_FLAGS_TYPE_MASK) != SECP256K1_FLAGS_TYPE_CONTEXT, 0)) {
   3ad1c:	e0bfff17 	ldw	r2,-4(fp)
   3ad20:	10803fcc 	andi	r2,r2,255
   3ad24:	10800058 	cmpnei	r2,r2,1
   3ad28:	10803fcc 	andi	r2,r2,255
   3ad2c:	10000a26 	beq	r2,zero,3ad58 <secp256k1_context_create+0x90>
            secp256k1_callback_call(&ret->illegal_callback,
   3ad30:	e0bffe17 	ldw	r2,-8(fp)
   3ad34:	10802f04 	addi	r2,r2,188
   3ad38:	01400174 	movhi	r5,5
   3ad3c:	29589204 	addi	r5,r5,25160
   3ad40:	1009883a 	mov	r4,r2
   3ad44:	000de200 	call	de20 <secp256k1_callback_call>
                                    "Invalid flags");
            free(ret);
   3ad48:	e13ffe17 	ldw	r4,-8(fp)
   3ad4c:	00463540 	call	46354 <free>
            return NULL;
   3ad50:	0005883a 	mov	r2,zero
   3ad54:	00001b06 	br	3adc4 <secp256k1_context_create+0xfc>
    }

    secp256k1_ecmult_context_init(&ret->ecmult_ctx);
   3ad58:	e0bffe17 	ldw	r2,-8(fp)
   3ad5c:	1009883a 	mov	r4,r2
   3ad60:	003763c0 	call	3763c <secp256k1_ecmult_context_init>
    secp256k1_ecmult_gen_context_init(&ret->ecmult_gen_ctx);
   3ad64:	e0bffe17 	ldw	r2,-8(fp)
   3ad68:	10800104 	addi	r2,r2,4
   3ad6c:	1009883a 	mov	r4,r2
   3ad70:	0038ed00 	call	38ed0 <secp256k1_ecmult_gen_context_init>

    if (flags & SECP256K1_FLAGS_BIT_CONTEXT_SIGN) {
   3ad74:	e0bfff17 	ldw	r2,-4(fp)
   3ad78:	1080800c 	andi	r2,r2,512
   3ad7c:	10000726 	beq	r2,zero,3ad9c <secp256k1_context_create+0xd4>
        secp256k1_ecmult_gen_context_build(&ret->ecmult_gen_ctx, &ret->error_callback);
   3ad80:	e0bffe17 	ldw	r2,-8(fp)
   3ad84:	10c00104 	addi	r3,r2,4
   3ad88:	e0bffe17 	ldw	r2,-8(fp)
   3ad8c:	10803104 	addi	r2,r2,196
   3ad90:	100b883a 	mov	r5,r2
   3ad94:	1809883a 	mov	r4,r3
   3ad98:	0038efc0 	call	38efc <secp256k1_ecmult_gen_context_build>
    }
    if (flags & SECP256K1_FLAGS_BIT_CONTEXT_VERIFY) {
   3ad9c:	e0bfff17 	ldw	r2,-4(fp)
   3ada0:	1080400c 	andi	r2,r2,256
   3ada4:	10000626 	beq	r2,zero,3adc0 <secp256k1_context_create+0xf8>
        secp256k1_ecmult_context_build(&ret->ecmult_ctx, &ret->error_callback);
   3ada8:	e0fffe17 	ldw	r3,-8(fp)
   3adac:	e0bffe17 	ldw	r2,-8(fp)
   3adb0:	10803104 	addi	r2,r2,196
   3adb4:	100b883a 	mov	r5,r2
   3adb8:	1809883a 	mov	r4,r3
   3adbc:	00376680 	call	37668 <secp256k1_ecmult_context_build>
    }

    return ret;
   3adc0:	e0bffe17 	ldw	r2,-8(fp)
}
   3adc4:	e037883a 	mov	sp,fp
   3adc8:	dfc00117 	ldw	ra,4(sp)
   3adcc:	df000017 	ldw	fp,0(sp)
   3add0:	dec00204 	addi	sp,sp,8
   3add4:	f800283a 	ret

0003add8 <secp256k1_context_clone>:

secp256k1_context* secp256k1_context_clone(const secp256k1_context* ctx) {
   3add8:	defffc04 	addi	sp,sp,-16
   3addc:	dfc00315 	stw	ra,12(sp)
   3ade0:	df000215 	stw	fp,8(sp)
   3ade4:	df000204 	addi	fp,sp,8
   3ade8:	e13fff15 	stw	r4,-4(fp)
    secp256k1_context* ret = (secp256k1_context*)checked_malloc(&ctx->error_callback, sizeof(secp256k1_context));
   3adec:	e0bfff17 	ldw	r2,-4(fp)
   3adf0:	10803104 	addi	r2,r2,196
   3adf4:	01403304 	movi	r5,204
   3adf8:	1009883a 	mov	r4,r2
   3adfc:	000de6c0 	call	de6c <checked_malloc>
   3ae00:	e0bffe15 	stw	r2,-8(fp)
    ret->illegal_callback = ctx->illegal_callback;
   3ae04:	e0bffe17 	ldw	r2,-8(fp)
   3ae08:	e0ffff17 	ldw	r3,-4(fp)
   3ae0c:	19002f17 	ldw	r4,188(r3)
   3ae10:	11002f15 	stw	r4,188(r2)
   3ae14:	18c03017 	ldw	r3,192(r3)
   3ae18:	10c03015 	stw	r3,192(r2)
    ret->error_callback = ctx->error_callback;
   3ae1c:	e0bffe17 	ldw	r2,-8(fp)
   3ae20:	e0ffff17 	ldw	r3,-4(fp)
   3ae24:	19003117 	ldw	r4,196(r3)
   3ae28:	11003115 	stw	r4,196(r2)
   3ae2c:	18c03217 	ldw	r3,200(r3)
   3ae30:	10c03215 	stw	r3,200(r2)
    secp256k1_ecmult_context_clone(&ret->ecmult_ctx, &ctx->ecmult_ctx, &ctx->error_callback);
   3ae34:	e0fffe17 	ldw	r3,-8(fp)
   3ae38:	e13fff17 	ldw	r4,-4(fp)
   3ae3c:	e0bfff17 	ldw	r2,-4(fp)
   3ae40:	10803104 	addi	r2,r2,196
   3ae44:	100d883a 	mov	r6,r2
   3ae48:	200b883a 	mov	r5,r4
   3ae4c:	1809883a 	mov	r4,r3
   3ae50:	00376ec0 	call	376ec <secp256k1_ecmult_context_clone>
    secp256k1_ecmult_gen_context_clone(&ret->ecmult_gen_ctx, &ctx->ecmult_gen_ctx, &ctx->error_callback);
   3ae54:	e0bffe17 	ldw	r2,-8(fp)
   3ae58:	10c00104 	addi	r3,r2,4
   3ae5c:	e0bfff17 	ldw	r2,-4(fp)
   3ae60:	11000104 	addi	r4,r2,4
   3ae64:	e0bfff17 	ldw	r2,-4(fp)
   3ae68:	10803104 	addi	r2,r2,196
   3ae6c:	100d883a 	mov	r6,r2
   3ae70:	200b883a 	mov	r5,r4
   3ae74:	1809883a 	mov	r4,r3
   3ae78:	00397900 	call	39790 <secp256k1_ecmult_gen_context_clone>
    return ret;
   3ae7c:	e0bffe17 	ldw	r2,-8(fp)
}
   3ae80:	e037883a 	mov	sp,fp
   3ae84:	dfc00117 	ldw	ra,4(sp)
   3ae88:	df000017 	ldw	fp,0(sp)
   3ae8c:	dec00204 	addi	sp,sp,8
   3ae90:	f800283a 	ret

0003ae94 <secp256k1_context_destroy>:

void secp256k1_context_destroy(secp256k1_context* ctx) {
   3ae94:	defffd04 	addi	sp,sp,-12
   3ae98:	dfc00215 	stw	ra,8(sp)
   3ae9c:	df000115 	stw	fp,4(sp)
   3aea0:	df000104 	addi	fp,sp,4
   3aea4:	e13fff15 	stw	r4,-4(fp)
    if (ctx != NULL) {
   3aea8:	e0bfff17 	ldw	r2,-4(fp)
   3aeac:	10000926 	beq	r2,zero,3aed4 <secp256k1_context_destroy+0x40>
        secp256k1_ecmult_context_clear(&ctx->ecmult_ctx);
   3aeb0:	e0bfff17 	ldw	r2,-4(fp)
   3aeb4:	1009883a 	mov	r4,r2
   3aeb8:	00377a80 	call	377a8 <secp256k1_ecmult_context_clear>
        secp256k1_ecmult_gen_context_clear(&ctx->ecmult_gen_ctx);
   3aebc:	e0bfff17 	ldw	r2,-4(fp)
   3aec0:	10800104 	addi	r2,r2,4
   3aec4:	1009883a 	mov	r4,r2
   3aec8:	00398800 	call	39880 <secp256k1_ecmult_gen_context_clear>

        free(ctx);
   3aecc:	e13fff17 	ldw	r4,-4(fp)
   3aed0:	00463540 	call	46354 <free>
    }
}
   3aed4:	0001883a 	nop
   3aed8:	e037883a 	mov	sp,fp
   3aedc:	dfc00117 	ldw	ra,4(sp)
   3aee0:	df000017 	ldw	fp,0(sp)
   3aee4:	dec00204 	addi	sp,sp,8
   3aee8:	f800283a 	ret

0003aeec <secp256k1_context_set_illegal_callback>:

void secp256k1_context_set_illegal_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {
   3aeec:	defffc04 	addi	sp,sp,-16
   3aef0:	df000315 	stw	fp,12(sp)
   3aef4:	df000304 	addi	fp,sp,12
   3aef8:	e13ffd15 	stw	r4,-12(fp)
   3aefc:	e17ffe15 	stw	r5,-8(fp)
   3af00:	e1bfff15 	stw	r6,-4(fp)
    if (fun == NULL) {
   3af04:	e0bffe17 	ldw	r2,-8(fp)
   3af08:	1000031e 	bne	r2,zero,3af18 <secp256k1_context_set_illegal_callback+0x2c>
        fun = default_illegal_callback_fn;
   3af0c:	00800134 	movhi	r2,4
   3af10:	10ab1604 	addi	r2,r2,-21416
   3af14:	e0bffe15 	stw	r2,-8(fp)
    }
    ctx->illegal_callback.fn = fun;
   3af18:	e0bffd17 	ldw	r2,-12(fp)
   3af1c:	e0fffe17 	ldw	r3,-8(fp)
   3af20:	10c02f15 	stw	r3,188(r2)
    ctx->illegal_callback.data = data;
   3af24:	e0bffd17 	ldw	r2,-12(fp)
   3af28:	e0ffff17 	ldw	r3,-4(fp)
   3af2c:	10c03015 	stw	r3,192(r2)
}
   3af30:	0001883a 	nop
   3af34:	e037883a 	mov	sp,fp
   3af38:	df000017 	ldw	fp,0(sp)
   3af3c:	dec00104 	addi	sp,sp,4
   3af40:	f800283a 	ret

0003af44 <secp256k1_context_set_error_callback>:

void secp256k1_context_set_error_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {
   3af44:	defffc04 	addi	sp,sp,-16
   3af48:	df000315 	stw	fp,12(sp)
   3af4c:	df000304 	addi	fp,sp,12
   3af50:	e13ffd15 	stw	r4,-12(fp)
   3af54:	e17ffe15 	stw	r5,-8(fp)
   3af58:	e1bfff15 	stw	r6,-4(fp)
    if (fun == NULL) {
   3af5c:	e0bffe17 	ldw	r2,-8(fp)
   3af60:	1000031e 	bne	r2,zero,3af70 <secp256k1_context_set_error_callback+0x2c>
        fun = default_error_callback_fn;
   3af64:	00800134 	movhi	r2,4
   3af68:	10ab2404 	addi	r2,r2,-21360
   3af6c:	e0bffe15 	stw	r2,-8(fp)
    }
    ctx->error_callback.fn = fun;
   3af70:	e0bffd17 	ldw	r2,-12(fp)
   3af74:	e0fffe17 	ldw	r3,-8(fp)
   3af78:	10c03115 	stw	r3,196(r2)
    ctx->error_callback.data = data;
   3af7c:	e0bffd17 	ldw	r2,-12(fp)
   3af80:	e0ffff17 	ldw	r3,-4(fp)
   3af84:	10c03215 	stw	r3,200(r2)
}
   3af88:	0001883a 	nop
   3af8c:	e037883a 	mov	sp,fp
   3af90:	df000017 	ldw	fp,0(sp)
   3af94:	dec00104 	addi	sp,sp,4
   3af98:	f800283a 	ret

0003af9c <secp256k1_pubkey_load>:

static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge, const secp256k1_pubkey* pubkey) {
   3af9c:	deffeb04 	addi	sp,sp,-84
   3afa0:	dfc01415 	stw	ra,80(sp)
   3afa4:	df001315 	stw	fp,76(sp)
   3afa8:	df001304 	addi	fp,sp,76
   3afac:	e13ffd15 	stw	r4,-12(fp)
   3afb0:	e17ffe15 	stw	r5,-8(fp)
   3afb4:	e1bfff15 	stw	r6,-4(fp)
    if (sizeof(secp256k1_ge_storage) == 64) {
        /* When the secp256k1_ge_storage type is exactly 64 byte, use its
         * representation inside secp256k1_pubkey, as conversion is very fast.
         * Note that secp256k1_pubkey_save must use the same representation. */
        secp256k1_ge_storage s;
        memcpy(&s, &pubkey->data[0], 64);
   3afb8:	e0bfff17 	ldw	r2,-4(fp)
   3afbc:	01801004 	movi	r6,64
   3afc0:	100b883a 	mov	r5,r2
   3afc4:	e13fed04 	addi	r4,fp,-76
   3afc8:	00463980 	call	46398 <memcpy>
        secp256k1_ge_from_storage(ge, &s);
   3afcc:	e17fed04 	addi	r5,fp,-76
   3afd0:	e13ffe17 	ldw	r4,-8(fp)
   3afd4:	0024d840 	call	24d84 <secp256k1_ge_from_storage>
        secp256k1_fe x, y;
        secp256k1_fe_set_b32(&x, pubkey->data);
        secp256k1_fe_set_b32(&y, pubkey->data + 32);
        secp256k1_ge_set_xy(ge, &x, &y);
    }
    ARG_CHECK(!secp256k1_fe_is_zero(&ge->x));
   3afd8:	e0bffe17 	ldw	r2,-8(fp)
   3afdc:	1009883a 	mov	r4,r2
   3afe0:	00153700 	call	15370 <secp256k1_fe_is_zero>
   3afe4:	1004c03a 	cmpne	r2,r2,zero
   3afe8:	10803fcc 	andi	r2,r2,255
   3afec:	10000826 	beq	r2,zero,3b010 <secp256k1_pubkey_load+0x74>
   3aff0:	e0bffd17 	ldw	r2,-12(fp)
   3aff4:	10802f04 	addi	r2,r2,188
   3aff8:	01400174 	movhi	r5,5
   3affc:	29589604 	addi	r5,r5,25176
   3b000:	1009883a 	mov	r4,r2
   3b004:	000de200 	call	de20 <secp256k1_callback_call>
   3b008:	0005883a 	mov	r2,zero
   3b00c:	00000106 	br	3b014 <secp256k1_pubkey_load+0x78>
    return 1;
   3b010:	00800044 	movi	r2,1
}
   3b014:	e037883a 	mov	sp,fp
   3b018:	dfc00117 	ldw	ra,4(sp)
   3b01c:	df000017 	ldw	fp,0(sp)
   3b020:	dec00204 	addi	sp,sp,8
   3b024:	f800283a 	ret

0003b028 <secp256k1_pubkey_save>:

static void secp256k1_pubkey_save(secp256k1_pubkey* pubkey, secp256k1_ge* ge) {
   3b028:	deffec04 	addi	sp,sp,-80
   3b02c:	dfc01315 	stw	ra,76(sp)
   3b030:	df001215 	stw	fp,72(sp)
   3b034:	df001204 	addi	fp,sp,72
   3b038:	e13ffe15 	stw	r4,-8(fp)
   3b03c:	e17fff15 	stw	r5,-4(fp)
    if (sizeof(secp256k1_ge_storage) == 64) {
        secp256k1_ge_storage s;
        secp256k1_ge_to_storage(&s, ge);
   3b040:	e17fff17 	ldw	r5,-4(fp)
   3b044:	e13fee04 	addi	r4,fp,-72
   3b048:	0024c080 	call	24c08 <secp256k1_ge_to_storage>
        memcpy(&pubkey->data[0], &s, 64);
   3b04c:	e0bffe17 	ldw	r2,-8(fp)
   3b050:	01801004 	movi	r6,64
   3b054:	e17fee04 	addi	r5,fp,-72
   3b058:	1009883a 	mov	r4,r2
   3b05c:	00463980 	call	46398 <memcpy>
        secp256k1_fe_normalize_var(&ge->x);
        secp256k1_fe_normalize_var(&ge->y);
        secp256k1_fe_get_b32(pubkey->data, &ge->x);
        secp256k1_fe_get_b32(pubkey->data + 32, &ge->y);
    }
}
   3b060:	0001883a 	nop
   3b064:	e037883a 	mov	sp,fp
   3b068:	dfc00117 	ldw	ra,4(sp)
   3b06c:	df000017 	ldw	fp,0(sp)
   3b070:	dec00204 	addi	sp,sp,8
   3b074:	f800283a 	ret

0003b078 <secp256k1_ec_pubkey_parse>:

int secp256k1_ec_pubkey_parse(const secp256k1_context* ctx, secp256k1_pubkey* pubkey, const unsigned char *input, size_t inputlen) {
   3b078:	deffe004 	addi	sp,sp,-128
   3b07c:	dfc01f15 	stw	ra,124(sp)
   3b080:	df001e15 	stw	fp,120(sp)
   3b084:	df001e04 	addi	fp,sp,120
   3b088:	e13ffc15 	stw	r4,-16(fp)
   3b08c:	e17ffd15 	stw	r5,-12(fp)
   3b090:	e1bffe15 	stw	r6,-8(fp)
   3b094:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_ge Q;

    VERIFY_CHECK(ctx != NULL);
   3b098:	e0bffc17 	ldw	r2,-16(fp)
   3b09c:	1005003a 	cmpeq	r2,r2,zero
   3b0a0:	10803fcc 	andi	r2,r2,255
   3b0a4:	10000d26 	beq	r2,zero,3b0dc <secp256k1_ec_pubkey_parse+0x64>
   3b0a8:	d0a01617 	ldw	r2,-32680(gp)
   3b0ac:	10c00317 	ldw	r3,12(r2)
   3b0b0:	00800174 	movhi	r2,5
   3b0b4:	1098a704 	addi	r2,r2,25244
   3b0b8:	d8800015 	stw	r2,0(sp)
   3b0bc:	01c02644 	movi	r7,153
   3b0c0:	01800174 	movhi	r6,5
   3b0c4:	31989e04 	addi	r6,r6,25208
   3b0c8:	01400174 	movhi	r5,5
   3b0cc:	2951e804 	addi	r5,r5,18336
   3b0d0:	1809883a 	mov	r4,r3
   3b0d4:	00461000 	call	46100 <fprintf>
   3b0d8:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(pubkey != NULL);
   3b0dc:	e0bffd17 	ldw	r2,-12(fp)
   3b0e0:	1005003a 	cmpeq	r2,r2,zero
   3b0e4:	10803fcc 	andi	r2,r2,255
   3b0e8:	10000826 	beq	r2,zero,3b10c <secp256k1_ec_pubkey_parse+0x94>
   3b0ec:	e0bffc17 	ldw	r2,-16(fp)
   3b0f0:	10802f04 	addi	r2,r2,188
   3b0f4:	01400174 	movhi	r5,5
   3b0f8:	2958b004 	addi	r5,r5,25280
   3b0fc:	1009883a 	mov	r4,r2
   3b100:	000de200 	call	de20 <secp256k1_callback_call>
   3b104:	0005883a 	mov	r2,zero
   3b108:	00001d06 	br	3b180 <secp256k1_ec_pubkey_parse+0x108>
    memset(pubkey, 0, sizeof(*pubkey));
   3b10c:	01801004 	movi	r6,64
   3b110:	000b883a 	mov	r5,zero
   3b114:	e13ffd17 	ldw	r4,-12(fp)
   3b118:	00464200 	call	46420 <memset>
    ARG_CHECK(input != NULL);
   3b11c:	e0bffe17 	ldw	r2,-8(fp)
   3b120:	1005003a 	cmpeq	r2,r2,zero
   3b124:	10803fcc 	andi	r2,r2,255
   3b128:	10000826 	beq	r2,zero,3b14c <secp256k1_ec_pubkey_parse+0xd4>
   3b12c:	e0bffc17 	ldw	r2,-16(fp)
   3b130:	10802f04 	addi	r2,r2,188
   3b134:	01400174 	movhi	r5,5
   3b138:	2958b404 	addi	r5,r5,25296
   3b13c:	1009883a 	mov	r4,r2
   3b140:	000de200 	call	de20 <secp256k1_callback_call>
   3b144:	0005883a 	mov	r2,zero
   3b148:	00000d06 	br	3b180 <secp256k1_ec_pubkey_parse+0x108>
    if (!secp256k1_eckey_pubkey_parse(&Q, input, inputlen)) {
   3b14c:	e1bfff17 	ldw	r6,-4(fp)
   3b150:	e17ffe17 	ldw	r5,-8(fp)
   3b154:	e13fe304 	addi	r4,fp,-116
   3b158:	003a7e40 	call	3a7e4 <secp256k1_eckey_pubkey_parse>
   3b15c:	1000021e 	bne	r2,zero,3b168 <secp256k1_ec_pubkey_parse+0xf0>
        return 0;
   3b160:	0005883a 	mov	r2,zero
   3b164:	00000606 	br	3b180 <secp256k1_ec_pubkey_parse+0x108>
    }
    secp256k1_pubkey_save(pubkey, &Q);
   3b168:	e17fe304 	addi	r5,fp,-116
   3b16c:	e13ffd17 	ldw	r4,-12(fp)
   3b170:	003b0280 	call	3b028 <secp256k1_pubkey_save>
    secp256k1_ge_clear(&Q);
   3b174:	e13fe304 	addi	r4,fp,-116
   3b178:	002299c0 	call	2299c <secp256k1_ge_clear>
    return 1;
   3b17c:	00800044 	movi	r2,1
}
   3b180:	e037883a 	mov	sp,fp
   3b184:	dfc00117 	ldw	ra,4(sp)
   3b188:	df000017 	ldw	fp,0(sp)
   3b18c:	dec00204 	addi	sp,sp,8
   3b190:	f800283a 	ret

0003b194 <secp256k1_ec_pubkey_serialize>:

int secp256k1_ec_pubkey_serialize(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_pubkey* pubkey, unsigned int flags) {
   3b194:	deffde04 	addi	sp,sp,-136
   3b198:	dfc02115 	stw	ra,132(sp)
   3b19c:	df002015 	stw	fp,128(sp)
   3b1a0:	df002004 	addi	fp,sp,128
   3b1a4:	e13ffc15 	stw	r4,-16(fp)
   3b1a8:	e17ffd15 	stw	r5,-12(fp)
   3b1ac:	e1bffe15 	stw	r6,-8(fp)
   3b1b0:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_ge Q;
    size_t len;
    int ret = 0;
   3b1b4:	e03fe115 	stw	zero,-124(fp)

    VERIFY_CHECK(ctx != NULL);
   3b1b8:	e0bffc17 	ldw	r2,-16(fp)
   3b1bc:	1005003a 	cmpeq	r2,r2,zero
   3b1c0:	10803fcc 	andi	r2,r2,255
   3b1c4:	10000d26 	beq	r2,zero,3b1fc <secp256k1_ec_pubkey_serialize+0x68>
   3b1c8:	d0a01617 	ldw	r2,-32680(gp)
   3b1cc:	10c00317 	ldw	r3,12(r2)
   3b1d0:	00800174 	movhi	r2,5
   3b1d4:	1098a704 	addi	r2,r2,25244
   3b1d8:	d8800015 	stw	r2,0(sp)
   3b1dc:	01c02a84 	movi	r7,170
   3b1e0:	01800174 	movhi	r6,5
   3b1e4:	31989e04 	addi	r6,r6,25208
   3b1e8:	01400174 	movhi	r5,5
   3b1ec:	2951e804 	addi	r5,r5,18336
   3b1f0:	1809883a 	mov	r4,r3
   3b1f4:	00461000 	call	46100 <fprintf>
   3b1f8:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(outputlen != NULL);
   3b1fc:	e0bffe17 	ldw	r2,-8(fp)
   3b200:	1005003a 	cmpeq	r2,r2,zero
   3b204:	10803fcc 	andi	r2,r2,255
   3b208:	10000826 	beq	r2,zero,3b22c <secp256k1_ec_pubkey_serialize+0x98>
   3b20c:	e0bffc17 	ldw	r2,-16(fp)
   3b210:	10802f04 	addi	r2,r2,188
   3b214:	01400174 	movhi	r5,5
   3b218:	2958b804 	addi	r5,r5,25312
   3b21c:	1009883a 	mov	r4,r2
   3b220:	000de200 	call	de20 <secp256k1_callback_call>
   3b224:	0005883a 	mov	r2,zero
   3b228:	00005806 	br	3b38c <secp256k1_ec_pubkey_serialize+0x1f8>
    ARG_CHECK(*outputlen >= ((flags & SECP256K1_FLAGS_BIT_COMPRESSION) ? 33 : 65));
   3b22c:	e0bffe17 	ldw	r2,-8(fp)
   3b230:	10c00017 	ldw	r3,0(r2)
   3b234:	e0800217 	ldw	r2,8(fp)
   3b238:	1080400c 	andi	r2,r2,256
   3b23c:	10000226 	beq	r2,zero,3b248 <secp256k1_ec_pubkey_serialize+0xb4>
   3b240:	00800844 	movi	r2,33
   3b244:	00000106 	br	3b24c <secp256k1_ec_pubkey_serialize+0xb8>
   3b248:	00801044 	movi	r2,65
   3b24c:	1885803a 	cmpltu	r2,r3,r2
   3b250:	10803fcc 	andi	r2,r2,255
   3b254:	10000826 	beq	r2,zero,3b278 <secp256k1_ec_pubkey_serialize+0xe4>
   3b258:	e0bffc17 	ldw	r2,-16(fp)
   3b25c:	10802f04 	addi	r2,r2,188
   3b260:	01400174 	movhi	r5,5
   3b264:	2958bd04 	addi	r5,r5,25332
   3b268:	1009883a 	mov	r4,r2
   3b26c:	000de200 	call	de20 <secp256k1_callback_call>
   3b270:	0005883a 	mov	r2,zero
   3b274:	00004506 	br	3b38c <secp256k1_ec_pubkey_serialize+0x1f8>
    len = *outputlen;
   3b278:	e0bffe17 	ldw	r2,-8(fp)
   3b27c:	10800017 	ldw	r2,0(r2)
   3b280:	e0bffb15 	stw	r2,-20(fp)
    *outputlen = 0;
   3b284:	e0bffe17 	ldw	r2,-8(fp)
   3b288:	10000015 	stw	zero,0(r2)
    ARG_CHECK(output != NULL);
   3b28c:	e0bffd17 	ldw	r2,-12(fp)
   3b290:	1005003a 	cmpeq	r2,r2,zero
   3b294:	10803fcc 	andi	r2,r2,255
   3b298:	10000826 	beq	r2,zero,3b2bc <secp256k1_ec_pubkey_serialize+0x128>
   3b29c:	e0bffc17 	ldw	r2,-16(fp)
   3b2a0:	10802f04 	addi	r2,r2,188
   3b2a4:	01400174 	movhi	r5,5
   3b2a8:	2958ce04 	addi	r5,r5,25400
   3b2ac:	1009883a 	mov	r4,r2
   3b2b0:	000de200 	call	de20 <secp256k1_callback_call>
   3b2b4:	0005883a 	mov	r2,zero
   3b2b8:	00003406 	br	3b38c <secp256k1_ec_pubkey_serialize+0x1f8>
    memset(output, 0, len);
   3b2bc:	e0bffb17 	ldw	r2,-20(fp)
   3b2c0:	100d883a 	mov	r6,r2
   3b2c4:	000b883a 	mov	r5,zero
   3b2c8:	e13ffd17 	ldw	r4,-12(fp)
   3b2cc:	00464200 	call	46420 <memset>
    ARG_CHECK(pubkey != NULL);
   3b2d0:	e0bfff17 	ldw	r2,-4(fp)
   3b2d4:	1005003a 	cmpeq	r2,r2,zero
   3b2d8:	10803fcc 	andi	r2,r2,255
   3b2dc:	10000826 	beq	r2,zero,3b300 <secp256k1_ec_pubkey_serialize+0x16c>
   3b2e0:	e0bffc17 	ldw	r2,-16(fp)
   3b2e4:	10802f04 	addi	r2,r2,188
   3b2e8:	01400174 	movhi	r5,5
   3b2ec:	2958b004 	addi	r5,r5,25280
   3b2f0:	1009883a 	mov	r4,r2
   3b2f4:	000de200 	call	de20 <secp256k1_callback_call>
   3b2f8:	0005883a 	mov	r2,zero
   3b2fc:	00002306 	br	3b38c <secp256k1_ec_pubkey_serialize+0x1f8>
    ARG_CHECK((flags & SECP256K1_FLAGS_TYPE_MASK) == SECP256K1_FLAGS_TYPE_COMPRESSION);
   3b300:	e0800217 	ldw	r2,8(fp)
   3b304:	10803fcc 	andi	r2,r2,255
   3b308:	10800098 	cmpnei	r2,r2,2
   3b30c:	10803fcc 	andi	r2,r2,255
   3b310:	10000826 	beq	r2,zero,3b334 <secp256k1_ec_pubkey_serialize+0x1a0>
   3b314:	e0bffc17 	ldw	r2,-16(fp)
   3b318:	10802f04 	addi	r2,r2,188
   3b31c:	01400174 	movhi	r5,5
   3b320:	2958d204 	addi	r5,r5,25416
   3b324:	1009883a 	mov	r4,r2
   3b328:	000de200 	call	de20 <secp256k1_callback_call>
   3b32c:	0005883a 	mov	r2,zero
   3b330:	00001606 	br	3b38c <secp256k1_ec_pubkey_serialize+0x1f8>
    if (secp256k1_pubkey_load(ctx, &Q, pubkey)) {
   3b334:	e0bfe204 	addi	r2,fp,-120
   3b338:	e1bfff17 	ldw	r6,-4(fp)
   3b33c:	100b883a 	mov	r5,r2
   3b340:	e13ffc17 	ldw	r4,-16(fp)
   3b344:	003af9c0 	call	3af9c <secp256k1_pubkey_load>
   3b348:	10000f26 	beq	r2,zero,3b388 <secp256k1_ec_pubkey_serialize+0x1f4>
        ret = secp256k1_eckey_pubkey_serialize(&Q, output, &len, flags & SECP256K1_FLAGS_BIT_COMPRESSION);
   3b34c:	e0800217 	ldw	r2,8(fp)
   3b350:	1100400c 	andi	r4,r2,256
   3b354:	e0fffb04 	addi	r3,fp,-20
   3b358:	e0bfe204 	addi	r2,fp,-120
   3b35c:	200f883a 	mov	r7,r4
   3b360:	180d883a 	mov	r6,r3
   3b364:	e17ffd17 	ldw	r5,-12(fp)
   3b368:	1009883a 	mov	r4,r2
   3b36c:	003a9940 	call	3a994 <secp256k1_eckey_pubkey_serialize>
   3b370:	e0bfe115 	stw	r2,-124(fp)
        if (ret) {
   3b374:	e0bfe117 	ldw	r2,-124(fp)
   3b378:	10000326 	beq	r2,zero,3b388 <secp256k1_ec_pubkey_serialize+0x1f4>
            *outputlen = len;
   3b37c:	e0fffb17 	ldw	r3,-20(fp)
   3b380:	e0bffe17 	ldw	r2,-8(fp)
   3b384:	10c00015 	stw	r3,0(r2)
        }
    }
    return ret;
   3b388:	e0bfe117 	ldw	r2,-124(fp)
}
   3b38c:	e037883a 	mov	sp,fp
   3b390:	dfc00117 	ldw	ra,4(sp)
   3b394:	df000017 	ldw	fp,0(sp)
   3b398:	dec00204 	addi	sp,sp,8
   3b39c:	f800283a 	ret

0003b3a0 <secp256k1_ecdsa_signature_load>:

static void secp256k1_ecdsa_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_ecdsa_signature* sig) {
   3b3a0:	defffa04 	addi	sp,sp,-24
   3b3a4:	dfc00515 	stw	ra,20(sp)
   3b3a8:	df000415 	stw	fp,16(sp)
   3b3ac:	df000404 	addi	fp,sp,16
   3b3b0:	e13ffc15 	stw	r4,-16(fp)
   3b3b4:	e17ffd15 	stw	r5,-12(fp)
   3b3b8:	e1bffe15 	stw	r6,-8(fp)
   3b3bc:	e1ffff15 	stw	r7,-4(fp)
    (void)ctx;
    if (sizeof(secp256k1_scalar) == 32) {
        /* When the secp256k1_scalar type is exactly 32 byte, use its
         * representation inside secp256k1_ecdsa_signature, as conversion is very fast.
         * Note that secp256k1_ecdsa_signature_save must use the same representation. */
        memcpy(r, &sig->data[0], 32);
   3b3c0:	e0bfff17 	ldw	r2,-4(fp)
   3b3c4:	01800804 	movi	r6,32
   3b3c8:	100b883a 	mov	r5,r2
   3b3cc:	e13ffd17 	ldw	r4,-12(fp)
   3b3d0:	00463980 	call	46398 <memcpy>
        memcpy(s, &sig->data[32], 32);
   3b3d4:	e0bfff17 	ldw	r2,-4(fp)
   3b3d8:	10800804 	addi	r2,r2,32
   3b3dc:	01800804 	movi	r6,32
   3b3e0:	100b883a 	mov	r5,r2
   3b3e4:	e13ffe17 	ldw	r4,-8(fp)
   3b3e8:	00463980 	call	46398 <memcpy>
    } else {
        secp256k1_scalar_set_b32(r, &sig->data[0], NULL);
        secp256k1_scalar_set_b32(s, &sig->data[32], NULL);
    }
}
   3b3ec:	0001883a 	nop
   3b3f0:	e037883a 	mov	sp,fp
   3b3f4:	dfc00117 	ldw	ra,4(sp)
   3b3f8:	df000017 	ldw	fp,0(sp)
   3b3fc:	dec00204 	addi	sp,sp,8
   3b400:	f800283a 	ret

0003b404 <secp256k1_ecdsa_signature_save>:

static void secp256k1_ecdsa_signature_save(secp256k1_ecdsa_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s) {
   3b404:	defffb04 	addi	sp,sp,-20
   3b408:	dfc00415 	stw	ra,16(sp)
   3b40c:	df000315 	stw	fp,12(sp)
   3b410:	df000304 	addi	fp,sp,12
   3b414:	e13ffd15 	stw	r4,-12(fp)
   3b418:	e17ffe15 	stw	r5,-8(fp)
   3b41c:	e1bfff15 	stw	r6,-4(fp)
    if (sizeof(secp256k1_scalar) == 32) {
        memcpy(&sig->data[0], r, 32);
   3b420:	e0bffd17 	ldw	r2,-12(fp)
   3b424:	01800804 	movi	r6,32
   3b428:	e17ffe17 	ldw	r5,-8(fp)
   3b42c:	1009883a 	mov	r4,r2
   3b430:	00463980 	call	46398 <memcpy>
        memcpy(&sig->data[32], s, 32);
   3b434:	e0bffd17 	ldw	r2,-12(fp)
   3b438:	10800804 	addi	r2,r2,32
   3b43c:	01800804 	movi	r6,32
   3b440:	e17fff17 	ldw	r5,-4(fp)
   3b444:	1009883a 	mov	r4,r2
   3b448:	00463980 	call	46398 <memcpy>
    } else {
        secp256k1_scalar_get_b32(&sig->data[0], r);
        secp256k1_scalar_get_b32(&sig->data[32], s);
    }
}
   3b44c:	0001883a 	nop
   3b450:	e037883a 	mov	sp,fp
   3b454:	dfc00117 	ldw	ra,4(sp)
   3b458:	df000017 	ldw	fp,0(sp)
   3b45c:	dec00204 	addi	sp,sp,8
   3b460:	f800283a 	ret

0003b464 <secp256k1_ecdsa_signature_parse_der>:

int secp256k1_ecdsa_signature_parse_der(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {
   3b464:	deffe904 	addi	sp,sp,-92
   3b468:	dfc01615 	stw	ra,88(sp)
   3b46c:	df001515 	stw	fp,84(sp)
   3b470:	df001504 	addi	fp,sp,84
   3b474:	e13ffc15 	stw	r4,-16(fp)
   3b478:	e17ffd15 	stw	r5,-12(fp)
   3b47c:	e1bffe15 	stw	r6,-8(fp)
   3b480:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;

    VERIFY_CHECK(ctx != NULL);
   3b484:	e0bffc17 	ldw	r2,-16(fp)
   3b488:	1005003a 	cmpeq	r2,r2,zero
   3b48c:	10803fcc 	andi	r2,r2,255
   3b490:	10000d26 	beq	r2,zero,3b4c8 <secp256k1_ecdsa_signature_parse_der+0x64>
   3b494:	d0a01617 	ldw	r2,-32680(gp)
   3b498:	10c00317 	ldw	r3,12(r2)
   3b49c:	00800174 	movhi	r2,5
   3b4a0:	1098a704 	addi	r2,r2,25244
   3b4a4:	d8800015 	stw	r2,0(sp)
   3b4a8:	01c035c4 	movi	r7,215
   3b4ac:	01800174 	movhi	r6,5
   3b4b0:	31989e04 	addi	r6,r6,25208
   3b4b4:	01400174 	movhi	r5,5
   3b4b8:	2951e804 	addi	r5,r5,18336
   3b4bc:	1809883a 	mov	r4,r3
   3b4c0:	00461000 	call	46100 <fprintf>
   3b4c4:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(sig != NULL);
   3b4c8:	e0bffd17 	ldw	r2,-12(fp)
   3b4cc:	1005003a 	cmpeq	r2,r2,zero
   3b4d0:	10803fcc 	andi	r2,r2,255
   3b4d4:	10000826 	beq	r2,zero,3b4f8 <secp256k1_ecdsa_signature_parse_der+0x94>
   3b4d8:	e0bffc17 	ldw	r2,-16(fp)
   3b4dc:	10802f04 	addi	r2,r2,188
   3b4e0:	01400174 	movhi	r5,5
   3b4e4:	2958e404 	addi	r5,r5,25488
   3b4e8:	1009883a 	mov	r4,r2
   3b4ec:	000de200 	call	de20 <secp256k1_callback_call>
   3b4f0:	0005883a 	mov	r2,zero
   3b4f4:	00001f06 	br	3b574 <secp256k1_ecdsa_signature_parse_der+0x110>
    ARG_CHECK(input != NULL);
   3b4f8:	e0bffe17 	ldw	r2,-8(fp)
   3b4fc:	1005003a 	cmpeq	r2,r2,zero
   3b500:	10803fcc 	andi	r2,r2,255
   3b504:	10000826 	beq	r2,zero,3b528 <secp256k1_ecdsa_signature_parse_der+0xc4>
   3b508:	e0bffc17 	ldw	r2,-16(fp)
   3b50c:	10802f04 	addi	r2,r2,188
   3b510:	01400174 	movhi	r5,5
   3b514:	2958b404 	addi	r5,r5,25296
   3b518:	1009883a 	mov	r4,r2
   3b51c:	000de200 	call	de20 <secp256k1_callback_call>
   3b520:	0005883a 	mov	r2,zero
   3b524:	00001306 	br	3b574 <secp256k1_ecdsa_signature_parse_der+0x110>

    if (secp256k1_ecdsa_sig_parse(&r, &s, input, inputlen)) {
   3b528:	e0bff404 	addi	r2,fp,-48
   3b52c:	e1ffff17 	ldw	r7,-4(fp)
   3b530:	e1bffe17 	ldw	r6,-8(fp)
   3b534:	100b883a 	mov	r5,r2
   3b538:	e13fec04 	addi	r4,fp,-80
   3b53c:	003a1100 	call	3a110 <secp256k1_ecdsa_sig_parse>
   3b540:	10000726 	beq	r2,zero,3b560 <secp256k1_ecdsa_signature_parse_der+0xfc>
        secp256k1_ecdsa_signature_save(sig, &r, &s);
   3b544:	e0bff404 	addi	r2,fp,-48
   3b548:	100d883a 	mov	r6,r2
   3b54c:	e17fec04 	addi	r5,fp,-80
   3b550:	e13ffd17 	ldw	r4,-12(fp)
   3b554:	003b4040 	call	3b404 <secp256k1_ecdsa_signature_save>
        return 1;
   3b558:	00800044 	movi	r2,1
   3b55c:	00000506 	br	3b574 <secp256k1_ecdsa_signature_parse_der+0x110>
    } else {
        memset(sig, 0, sizeof(*sig));
   3b560:	01801004 	movi	r6,64
   3b564:	000b883a 	mov	r5,zero
   3b568:	e13ffd17 	ldw	r4,-12(fp)
   3b56c:	00464200 	call	46420 <memset>
        return 0;
   3b570:	0005883a 	mov	r2,zero
    }
}
   3b574:	e037883a 	mov	sp,fp
   3b578:	dfc00117 	ldw	ra,4(sp)
   3b57c:	df000017 	ldw	fp,0(sp)
   3b580:	dec00204 	addi	sp,sp,8
   3b584:	f800283a 	ret

0003b588 <secp256k1_ecdsa_signature_parse_compact>:

int secp256k1_ecdsa_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input64) {
   3b588:	deffe804 	addi	sp,sp,-96
   3b58c:	dfc01715 	stw	ra,92(sp)
   3b590:	df001615 	stw	fp,88(sp)
   3b594:	df001604 	addi	fp,sp,88
   3b598:	e13ffd15 	stw	r4,-12(fp)
   3b59c:	e17ffe15 	stw	r5,-8(fp)
   3b5a0:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar r, s;
    int ret = 1;
   3b5a4:	00800044 	movi	r2,1
   3b5a8:	e0bfeb15 	stw	r2,-84(fp)
    int overflow = 0;
   3b5ac:	e03ffc15 	stw	zero,-16(fp)

    VERIFY_CHECK(ctx != NULL);
   3b5b0:	e0bffd17 	ldw	r2,-12(fp)
   3b5b4:	1005003a 	cmpeq	r2,r2,zero
   3b5b8:	10803fcc 	andi	r2,r2,255
   3b5bc:	10000d26 	beq	r2,zero,3b5f4 <secp256k1_ecdsa_signature_parse_compact+0x6c>
   3b5c0:	d0a01617 	ldw	r2,-32680(gp)
   3b5c4:	10c00317 	ldw	r3,12(r2)
   3b5c8:	00800174 	movhi	r2,5
   3b5cc:	1098a704 	addi	r2,r2,25244
   3b5d0:	d8800015 	stw	r2,0(sp)
   3b5d4:	01c03a44 	movi	r7,233
   3b5d8:	01800174 	movhi	r6,5
   3b5dc:	31989e04 	addi	r6,r6,25208
   3b5e0:	01400174 	movhi	r5,5
   3b5e4:	2951e804 	addi	r5,r5,18336
   3b5e8:	1809883a 	mov	r4,r3
   3b5ec:	00461000 	call	46100 <fprintf>
   3b5f0:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(sig != NULL);
   3b5f4:	e0bffe17 	ldw	r2,-8(fp)
   3b5f8:	1005003a 	cmpeq	r2,r2,zero
   3b5fc:	10803fcc 	andi	r2,r2,255
   3b600:	10000826 	beq	r2,zero,3b624 <secp256k1_ecdsa_signature_parse_compact+0x9c>
   3b604:	e0bffd17 	ldw	r2,-12(fp)
   3b608:	10802f04 	addi	r2,r2,188
   3b60c:	01400174 	movhi	r5,5
   3b610:	2958e404 	addi	r5,r5,25488
   3b614:	1009883a 	mov	r4,r2
   3b618:	000de200 	call	de20 <secp256k1_callback_call>
   3b61c:	0005883a 	mov	r2,zero
   3b620:	00003406 	br	3b6f4 <secp256k1_ecdsa_signature_parse_compact+0x16c>
    ARG_CHECK(input64 != NULL);
   3b624:	e0bfff17 	ldw	r2,-4(fp)
   3b628:	1005003a 	cmpeq	r2,r2,zero
   3b62c:	10803fcc 	andi	r2,r2,255
   3b630:	10000826 	beq	r2,zero,3b654 <secp256k1_ecdsa_signature_parse_compact+0xcc>
   3b634:	e0bffd17 	ldw	r2,-12(fp)
   3b638:	10802f04 	addi	r2,r2,188
   3b63c:	01400174 	movhi	r5,5
   3b640:	2958e704 	addi	r5,r5,25500
   3b644:	1009883a 	mov	r4,r2
   3b648:	000de200 	call	de20 <secp256k1_callback_call>
   3b64c:	0005883a 	mov	r2,zero
   3b650:	00002806 	br	3b6f4 <secp256k1_ecdsa_signature_parse_compact+0x16c>

    secp256k1_scalar_set_b32(&r, &input64[0], &overflow);
   3b654:	e0fffc04 	addi	r3,fp,-16
   3b658:	e0bfec04 	addi	r2,fp,-80
   3b65c:	180d883a 	mov	r6,r3
   3b660:	e17fff17 	ldw	r5,-4(fp)
   3b664:	1009883a 	mov	r4,r2
   3b668:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    ret &= !overflow;
   3b66c:	e0bffc17 	ldw	r2,-16(fp)
   3b670:	1005003a 	cmpeq	r2,r2,zero
   3b674:	10803fcc 	andi	r2,r2,255
   3b678:	e0ffeb17 	ldw	r3,-84(fp)
   3b67c:	1884703a 	and	r2,r3,r2
   3b680:	e0bfeb15 	stw	r2,-84(fp)
    secp256k1_scalar_set_b32(&s, &input64[32], &overflow);
   3b684:	e0bfff17 	ldw	r2,-4(fp)
   3b688:	10c00804 	addi	r3,r2,32
   3b68c:	e13ffc04 	addi	r4,fp,-16
   3b690:	e0bff404 	addi	r2,fp,-48
   3b694:	200d883a 	mov	r6,r4
   3b698:	180b883a 	mov	r5,r3
   3b69c:	1009883a 	mov	r4,r2
   3b6a0:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    ret &= !overflow;
   3b6a4:	e0bffc17 	ldw	r2,-16(fp)
   3b6a8:	1005003a 	cmpeq	r2,r2,zero
   3b6ac:	10803fcc 	andi	r2,r2,255
   3b6b0:	e0ffeb17 	ldw	r3,-84(fp)
   3b6b4:	1884703a 	and	r2,r3,r2
   3b6b8:	e0bfeb15 	stw	r2,-84(fp)
    if (ret) {
   3b6bc:	e0bfeb17 	ldw	r2,-84(fp)
   3b6c0:	10000726 	beq	r2,zero,3b6e0 <secp256k1_ecdsa_signature_parse_compact+0x158>
        secp256k1_ecdsa_signature_save(sig, &r, &s);
   3b6c4:	e0fff404 	addi	r3,fp,-48
   3b6c8:	e0bfec04 	addi	r2,fp,-80
   3b6cc:	180d883a 	mov	r6,r3
   3b6d0:	100b883a 	mov	r5,r2
   3b6d4:	e13ffe17 	ldw	r4,-8(fp)
   3b6d8:	003b4040 	call	3b404 <secp256k1_ecdsa_signature_save>
   3b6dc:	00000406 	br	3b6f0 <secp256k1_ecdsa_signature_parse_compact+0x168>
    } else {
        memset(sig, 0, sizeof(*sig));
   3b6e0:	01801004 	movi	r6,64
   3b6e4:	000b883a 	mov	r5,zero
   3b6e8:	e13ffe17 	ldw	r4,-8(fp)
   3b6ec:	00464200 	call	46420 <memset>
    }
    return ret;
   3b6f0:	e0bfeb17 	ldw	r2,-84(fp)
}
   3b6f4:	e037883a 	mov	sp,fp
   3b6f8:	dfc00117 	ldw	ra,4(sp)
   3b6fc:	df000017 	ldw	fp,0(sp)
   3b700:	dec00204 	addi	sp,sp,8
   3b704:	f800283a 	ret

0003b708 <secp256k1_ecdsa_signature_serialize_der>:

int secp256k1_ecdsa_signature_serialize_der(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_ecdsa_signature* sig) {
   3b708:	deffe904 	addi	sp,sp,-92
   3b70c:	dfc01615 	stw	ra,88(sp)
   3b710:	df001515 	stw	fp,84(sp)
   3b714:	df001504 	addi	fp,sp,84
   3b718:	e13ffc15 	stw	r4,-16(fp)
   3b71c:	e17ffd15 	stw	r5,-12(fp)
   3b720:	e1bffe15 	stw	r6,-8(fp)
   3b724:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;

    VERIFY_CHECK(ctx != NULL);
   3b728:	e0bffc17 	ldw	r2,-16(fp)
   3b72c:	1005003a 	cmpeq	r2,r2,zero
   3b730:	10803fcc 	andi	r2,r2,255
   3b734:	10000d26 	beq	r2,zero,3b76c <secp256k1_ecdsa_signature_serialize_der+0x64>
   3b738:	d0a01617 	ldw	r2,-32680(gp)
   3b73c:	10c00317 	ldw	r3,12(r2)
   3b740:	00800174 	movhi	r2,5
   3b744:	1098a704 	addi	r2,r2,25244
   3b748:	d8800015 	stw	r2,0(sp)
   3b74c:	01c03f04 	movi	r7,252
   3b750:	01800174 	movhi	r6,5
   3b754:	31989e04 	addi	r6,r6,25208
   3b758:	01400174 	movhi	r5,5
   3b75c:	2951e804 	addi	r5,r5,18336
   3b760:	1809883a 	mov	r4,r3
   3b764:	00461000 	call	46100 <fprintf>
   3b768:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(output != NULL);
   3b76c:	e0bffd17 	ldw	r2,-12(fp)
   3b770:	1005003a 	cmpeq	r2,r2,zero
   3b774:	10803fcc 	andi	r2,r2,255
   3b778:	10000826 	beq	r2,zero,3b79c <secp256k1_ecdsa_signature_serialize_der+0x94>
   3b77c:	e0bffc17 	ldw	r2,-16(fp)
   3b780:	10802f04 	addi	r2,r2,188
   3b784:	01400174 	movhi	r5,5
   3b788:	2958ce04 	addi	r5,r5,25400
   3b78c:	1009883a 	mov	r4,r2
   3b790:	000de200 	call	de20 <secp256k1_callback_call>
   3b794:	0005883a 	mov	r2,zero
   3b798:	00002406 	br	3b82c <secp256k1_ecdsa_signature_serialize_der+0x124>
    ARG_CHECK(outputlen != NULL);
   3b79c:	e0bffe17 	ldw	r2,-8(fp)
   3b7a0:	1005003a 	cmpeq	r2,r2,zero
   3b7a4:	10803fcc 	andi	r2,r2,255
   3b7a8:	10000826 	beq	r2,zero,3b7cc <secp256k1_ecdsa_signature_serialize_der+0xc4>
   3b7ac:	e0bffc17 	ldw	r2,-16(fp)
   3b7b0:	10802f04 	addi	r2,r2,188
   3b7b4:	01400174 	movhi	r5,5
   3b7b8:	2958b804 	addi	r5,r5,25312
   3b7bc:	1009883a 	mov	r4,r2
   3b7c0:	000de200 	call	de20 <secp256k1_callback_call>
   3b7c4:	0005883a 	mov	r2,zero
   3b7c8:	00001806 	br	3b82c <secp256k1_ecdsa_signature_serialize_der+0x124>
    ARG_CHECK(sig != NULL);
   3b7cc:	e0bfff17 	ldw	r2,-4(fp)
   3b7d0:	1005003a 	cmpeq	r2,r2,zero
   3b7d4:	10803fcc 	andi	r2,r2,255
   3b7d8:	10000826 	beq	r2,zero,3b7fc <secp256k1_ecdsa_signature_serialize_der+0xf4>
   3b7dc:	e0bffc17 	ldw	r2,-16(fp)
   3b7e0:	10802f04 	addi	r2,r2,188
   3b7e4:	01400174 	movhi	r5,5
   3b7e8:	2958e404 	addi	r5,r5,25488
   3b7ec:	1009883a 	mov	r4,r2
   3b7f0:	000de200 	call	de20 <secp256k1_callback_call>
   3b7f4:	0005883a 	mov	r2,zero
   3b7f8:	00000c06 	br	3b82c <secp256k1_ecdsa_signature_serialize_der+0x124>

    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
   3b7fc:	e0bff404 	addi	r2,fp,-48
   3b800:	e1ffff17 	ldw	r7,-4(fp)
   3b804:	100d883a 	mov	r6,r2
   3b808:	e17fec04 	addi	r5,fp,-80
   3b80c:	e13ffc17 	ldw	r4,-16(fp)
   3b810:	003b3a00 	call	3b3a0 <secp256k1_ecdsa_signature_load>
    return secp256k1_ecdsa_sig_serialize(output, outputlen, &r, &s);
   3b814:	e0bff404 	addi	r2,fp,-48
   3b818:	100f883a 	mov	r7,r2
   3b81c:	e1bfec04 	addi	r6,fp,-80
   3b820:	e17ffe17 	ldw	r5,-8(fp)
   3b824:	e13ffd17 	ldw	r4,-12(fp)
   3b828:	003a2300 	call	3a230 <secp256k1_ecdsa_sig_serialize>
}
   3b82c:	e037883a 	mov	sp,fp
   3b830:	dfc00117 	ldw	ra,4(sp)
   3b834:	df000017 	ldw	fp,0(sp)
   3b838:	dec00204 	addi	sp,sp,8
   3b83c:	f800283a 	ret

0003b840 <secp256k1_ecdsa_signature_serialize_compact>:

int secp256k1_ecdsa_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, const secp256k1_ecdsa_signature* sig) {
   3b840:	deffea04 	addi	sp,sp,-88
   3b844:	dfc01515 	stw	ra,84(sp)
   3b848:	df001415 	stw	fp,80(sp)
   3b84c:	df001404 	addi	fp,sp,80
   3b850:	e13ffd15 	stw	r4,-12(fp)
   3b854:	e17ffe15 	stw	r5,-8(fp)
   3b858:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar r, s;

    VERIFY_CHECK(ctx != NULL);
   3b85c:	e0bffd17 	ldw	r2,-12(fp)
   3b860:	1005003a 	cmpeq	r2,r2,zero
   3b864:	10803fcc 	andi	r2,r2,255
   3b868:	10000d26 	beq	r2,zero,3b8a0 <secp256k1_ecdsa_signature_serialize_compact+0x60>
   3b86c:	d0a01617 	ldw	r2,-32680(gp)
   3b870:	10c00317 	ldw	r3,12(r2)
   3b874:	00800174 	movhi	r2,5
   3b878:	1098a704 	addi	r2,r2,25244
   3b87c:	d8800015 	stw	r2,0(sp)
   3b880:	01c04204 	movi	r7,264
   3b884:	01800174 	movhi	r6,5
   3b888:	31989e04 	addi	r6,r6,25208
   3b88c:	01400174 	movhi	r5,5
   3b890:	2951e804 	addi	r5,r5,18336
   3b894:	1809883a 	mov	r4,r3
   3b898:	00461000 	call	46100 <fprintf>
   3b89c:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(output64 != NULL);
   3b8a0:	e0bffe17 	ldw	r2,-8(fp)
   3b8a4:	1005003a 	cmpeq	r2,r2,zero
   3b8a8:	10803fcc 	andi	r2,r2,255
   3b8ac:	10000826 	beq	r2,zero,3b8d0 <secp256k1_ecdsa_signature_serialize_compact+0x90>
   3b8b0:	e0bffd17 	ldw	r2,-12(fp)
   3b8b4:	10802f04 	addi	r2,r2,188
   3b8b8:	01400174 	movhi	r5,5
   3b8bc:	2958eb04 	addi	r5,r5,25516
   3b8c0:	1009883a 	mov	r4,r2
   3b8c4:	000de200 	call	de20 <secp256k1_callback_call>
   3b8c8:	0005883a 	mov	r2,zero
   3b8cc:	00001c06 	br	3b940 <secp256k1_ecdsa_signature_serialize_compact+0x100>
    ARG_CHECK(sig != NULL);
   3b8d0:	e0bfff17 	ldw	r2,-4(fp)
   3b8d4:	1005003a 	cmpeq	r2,r2,zero
   3b8d8:	10803fcc 	andi	r2,r2,255
   3b8dc:	10000826 	beq	r2,zero,3b900 <secp256k1_ecdsa_signature_serialize_compact+0xc0>
   3b8e0:	e0bffd17 	ldw	r2,-12(fp)
   3b8e4:	10802f04 	addi	r2,r2,188
   3b8e8:	01400174 	movhi	r5,5
   3b8ec:	2958e404 	addi	r5,r5,25488
   3b8f0:	1009883a 	mov	r4,r2
   3b8f4:	000de200 	call	de20 <secp256k1_callback_call>
   3b8f8:	0005883a 	mov	r2,zero
   3b8fc:	00001006 	br	3b940 <secp256k1_ecdsa_signature_serialize_compact+0x100>

    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
   3b900:	e0bff504 	addi	r2,fp,-44
   3b904:	e1ffff17 	ldw	r7,-4(fp)
   3b908:	100d883a 	mov	r6,r2
   3b90c:	e17fed04 	addi	r5,fp,-76
   3b910:	e13ffd17 	ldw	r4,-12(fp)
   3b914:	003b3a00 	call	3b3a0 <secp256k1_ecdsa_signature_load>
    secp256k1_scalar_get_b32(&output64[0], &r);
   3b918:	e17fed04 	addi	r5,fp,-76
   3b91c:	e13ffe17 	ldw	r4,-8(fp)
   3b920:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    secp256k1_scalar_get_b32(&output64[32], &s);
   3b924:	e0bffe17 	ldw	r2,-8(fp)
   3b928:	10800804 	addi	r2,r2,32
   3b92c:	e0fff504 	addi	r3,fp,-44
   3b930:	180b883a 	mov	r5,r3
   3b934:	1009883a 	mov	r4,r2
   3b938:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    return 1;
   3b93c:	00800044 	movi	r2,1
}
   3b940:	e037883a 	mov	sp,fp
   3b944:	dfc00117 	ldw	ra,4(sp)
   3b948:	df000017 	ldw	fp,0(sp)
   3b94c:	dec00204 	addi	sp,sp,8
   3b950:	f800283a 	ret

0003b954 <secp256k1_ecdsa_signature_normalize>:

int secp256k1_ecdsa_signature_normalize(const secp256k1_context* ctx, secp256k1_ecdsa_signature *sigout, const secp256k1_ecdsa_signature *sigin) {
   3b954:	deffe904 	addi	sp,sp,-92
   3b958:	dfc01615 	stw	ra,88(sp)
   3b95c:	df001515 	stw	fp,84(sp)
   3b960:	df001504 	addi	fp,sp,84
   3b964:	e13ffd15 	stw	r4,-12(fp)
   3b968:	e17ffe15 	stw	r5,-8(fp)
   3b96c:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar r, s;
    int ret = 0;
   3b970:	e03fec15 	stw	zero,-80(fp)

    VERIFY_CHECK(ctx != NULL);
   3b974:	e0bffd17 	ldw	r2,-12(fp)
   3b978:	1005003a 	cmpeq	r2,r2,zero
   3b97c:	10803fcc 	andi	r2,r2,255
   3b980:	10000d26 	beq	r2,zero,3b9b8 <secp256k1_ecdsa_signature_normalize+0x64>
   3b984:	d0a01617 	ldw	r2,-32680(gp)
   3b988:	10c00317 	ldw	r3,12(r2)
   3b98c:	00800174 	movhi	r2,5
   3b990:	1098a704 	addi	r2,r2,25244
   3b994:	d8800015 	stw	r2,0(sp)
   3b998:	01c04584 	movi	r7,278
   3b99c:	01800174 	movhi	r6,5
   3b9a0:	31989e04 	addi	r6,r6,25208
   3b9a4:	01400174 	movhi	r5,5
   3b9a8:	2951e804 	addi	r5,r5,18336
   3b9ac:	1809883a 	mov	r4,r3
   3b9b0:	00461000 	call	46100 <fprintf>
   3b9b4:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(sigin != NULL);
   3b9b8:	e0bfff17 	ldw	r2,-4(fp)
   3b9bc:	1005003a 	cmpeq	r2,r2,zero
   3b9c0:	10803fcc 	andi	r2,r2,255
   3b9c4:	10000826 	beq	r2,zero,3b9e8 <secp256k1_ecdsa_signature_normalize+0x94>
   3b9c8:	e0bffd17 	ldw	r2,-12(fp)
   3b9cc:	10802f04 	addi	r2,r2,188
   3b9d0:	01400174 	movhi	r5,5
   3b9d4:	2958f004 	addi	r5,r5,25536
   3b9d8:	1009883a 	mov	r4,r2
   3b9dc:	000de200 	call	de20 <secp256k1_callback_call>
   3b9e0:	0005883a 	mov	r2,zero
   3b9e4:	00001b06 	br	3ba54 <secp256k1_ecdsa_signature_normalize+0x100>

    secp256k1_ecdsa_signature_load(ctx, &r, &s, sigin);
   3b9e8:	e0fff504 	addi	r3,fp,-44
   3b9ec:	e0bfed04 	addi	r2,fp,-76
   3b9f0:	e1ffff17 	ldw	r7,-4(fp)
   3b9f4:	180d883a 	mov	r6,r3
   3b9f8:	100b883a 	mov	r5,r2
   3b9fc:	e13ffd17 	ldw	r4,-12(fp)
   3ba00:	003b3a00 	call	3b3a0 <secp256k1_ecdsa_signature_load>
    ret = secp256k1_scalar_is_high(&s);
   3ba04:	e0bff504 	addi	r2,fp,-44
   3ba08:	1009883a 	mov	r4,r2
   3ba0c:	0026f540 	call	26f54 <secp256k1_scalar_is_high>
   3ba10:	e0bfec15 	stw	r2,-80(fp)
    if (sigout != NULL) {
   3ba14:	e0bffe17 	ldw	r2,-8(fp)
   3ba18:	10000d26 	beq	r2,zero,3ba50 <secp256k1_ecdsa_signature_normalize+0xfc>
        if (ret) {
   3ba1c:	e0bfec17 	ldw	r2,-80(fp)
   3ba20:	10000526 	beq	r2,zero,3ba38 <secp256k1_ecdsa_signature_normalize+0xe4>
            secp256k1_scalar_negate(&s, &s);
   3ba24:	e0fff504 	addi	r3,fp,-44
   3ba28:	e0bff504 	addi	r2,fp,-44
   3ba2c:	180b883a 	mov	r5,r3
   3ba30:	1009883a 	mov	r4,r2
   3ba34:	0026a380 	call	26a38 <secp256k1_scalar_negate>
        }
        secp256k1_ecdsa_signature_save(sigout, &r, &s);
   3ba38:	e0fff504 	addi	r3,fp,-44
   3ba3c:	e0bfed04 	addi	r2,fp,-76
   3ba40:	180d883a 	mov	r6,r3
   3ba44:	100b883a 	mov	r5,r2
   3ba48:	e13ffe17 	ldw	r4,-8(fp)
   3ba4c:	003b4040 	call	3b404 <secp256k1_ecdsa_signature_save>
    }

    return ret;
   3ba50:	e0bfec17 	ldw	r2,-80(fp)
}
   3ba54:	e037883a 	mov	sp,fp
   3ba58:	dfc00117 	ldw	ra,4(sp)
   3ba5c:	df000017 	ldw	fp,0(sp)
   3ba60:	dec00204 	addi	sp,sp,8
   3ba64:	f800283a 	ret

0003ba68 <secp256k1_ecdsa_verify>:

int secp256k1_ecdsa_verify(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *msg32, const secp256k1_pubkey *pubkey) {
   3ba68:	deffc804 	addi	sp,sp,-224
   3ba6c:	dfc03715 	stw	ra,220(sp)
   3ba70:	df003615 	stw	fp,216(sp)
   3ba74:	df003604 	addi	fp,sp,216
   3ba78:	e13ffc15 	stw	r4,-16(fp)
   3ba7c:	e17ffd15 	stw	r5,-12(fp)
   3ba80:	e1bffe15 	stw	r6,-8(fp)
   3ba84:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_ge q;
    secp256k1_scalar r, s;
    secp256k1_scalar m;
    VERIFY_CHECK(ctx != NULL);
   3ba88:	e0bffc17 	ldw	r2,-16(fp)
   3ba8c:	1005003a 	cmpeq	r2,r2,zero
   3ba90:	10803fcc 	andi	r2,r2,255
   3ba94:	10000d26 	beq	r2,zero,3bacc <secp256k1_ecdsa_verify+0x64>
   3ba98:	d0a01617 	ldw	r2,-32680(gp)
   3ba9c:	10c00317 	ldw	r3,12(r2)
   3baa0:	00800174 	movhi	r2,5
   3baa4:	1098a704 	addi	r2,r2,25244
   3baa8:	d8800015 	stw	r2,0(sp)
   3baac:	01c04a44 	movi	r7,297
   3bab0:	01800174 	movhi	r6,5
   3bab4:	31989e04 	addi	r6,r6,25208
   3bab8:	01400174 	movhi	r5,5
   3babc:	2951e804 	addi	r5,r5,18336
   3bac0:	1809883a 	mov	r4,r3
   3bac4:	00461000 	call	46100 <fprintf>
   3bac8:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));
   3bacc:	e0bffc17 	ldw	r2,-16(fp)
   3bad0:	1009883a 	mov	r4,r2
   3bad4:	00377780 	call	37778 <secp256k1_ecmult_context_is_built>
   3bad8:	1005003a 	cmpeq	r2,r2,zero
   3badc:	10803fcc 	andi	r2,r2,255
   3bae0:	10000826 	beq	r2,zero,3bb04 <secp256k1_ecdsa_verify+0x9c>
   3bae4:	e0bffc17 	ldw	r2,-16(fp)
   3bae8:	10802f04 	addi	r2,r2,188
   3baec:	01400174 	movhi	r5,5
   3baf0:	2958f404 	addi	r5,r5,25552
   3baf4:	1009883a 	mov	r4,r2
   3baf8:	000de200 	call	de20 <secp256k1_callback_call>
   3bafc:	0005883a 	mov	r2,zero
   3bb00:	00004806 	br	3bc24 <secp256k1_ecdsa_verify+0x1bc>
    ARG_CHECK(msg32 != NULL);
   3bb04:	e0bffe17 	ldw	r2,-8(fp)
   3bb08:	1005003a 	cmpeq	r2,r2,zero
   3bb0c:	10803fcc 	andi	r2,r2,255
   3bb10:	10000826 	beq	r2,zero,3bb34 <secp256k1_ecdsa_verify+0xcc>
   3bb14:	e0bffc17 	ldw	r2,-16(fp)
   3bb18:	10802f04 	addi	r2,r2,188
   3bb1c:	01400174 	movhi	r5,5
   3bb20:	29590104 	addi	r5,r5,25604
   3bb24:	1009883a 	mov	r4,r2
   3bb28:	000de200 	call	de20 <secp256k1_callback_call>
   3bb2c:	0005883a 	mov	r2,zero
   3bb30:	00003c06 	br	3bc24 <secp256k1_ecdsa_verify+0x1bc>
    ARG_CHECK(sig != NULL);
   3bb34:	e0bffd17 	ldw	r2,-12(fp)
   3bb38:	1005003a 	cmpeq	r2,r2,zero
   3bb3c:	10803fcc 	andi	r2,r2,255
   3bb40:	10000826 	beq	r2,zero,3bb64 <secp256k1_ecdsa_verify+0xfc>
   3bb44:	e0bffc17 	ldw	r2,-16(fp)
   3bb48:	10802f04 	addi	r2,r2,188
   3bb4c:	01400174 	movhi	r5,5
   3bb50:	2958e404 	addi	r5,r5,25488
   3bb54:	1009883a 	mov	r4,r2
   3bb58:	000de200 	call	de20 <secp256k1_callback_call>
   3bb5c:	0005883a 	mov	r2,zero
   3bb60:	00003006 	br	3bc24 <secp256k1_ecdsa_verify+0x1bc>
    ARG_CHECK(pubkey != NULL);
   3bb64:	e0bfff17 	ldw	r2,-4(fp)
   3bb68:	1005003a 	cmpeq	r2,r2,zero
   3bb6c:	10803fcc 	andi	r2,r2,255
   3bb70:	10000826 	beq	r2,zero,3bb94 <secp256k1_ecdsa_verify+0x12c>
   3bb74:	e0bffc17 	ldw	r2,-16(fp)
   3bb78:	10802f04 	addi	r2,r2,188
   3bb7c:	01400174 	movhi	r5,5
   3bb80:	2958b004 	addi	r5,r5,25280
   3bb84:	1009883a 	mov	r4,r2
   3bb88:	000de200 	call	de20 <secp256k1_callback_call>
   3bb8c:	0005883a 	mov	r2,zero
   3bb90:	00002406 	br	3bc24 <secp256k1_ecdsa_verify+0x1bc>

    secp256k1_scalar_set_b32(&m, msg32, NULL);
   3bb94:	e0bff404 	addi	r2,fp,-48
   3bb98:	000d883a 	mov	r6,zero
   3bb9c:	e17ffe17 	ldw	r5,-8(fp)
   3bba0:	1009883a 	mov	r4,r2
   3bba4:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
   3bba8:	e0ffec04 	addi	r3,fp,-80
   3bbac:	e0bfe404 	addi	r2,fp,-112
   3bbb0:	e1fffd17 	ldw	r7,-12(fp)
   3bbb4:	180d883a 	mov	r6,r3
   3bbb8:	100b883a 	mov	r5,r2
   3bbbc:	e13ffc17 	ldw	r4,-16(fp)
   3bbc0:	003b3a00 	call	3b3a0 <secp256k1_ecdsa_signature_load>
    return (!secp256k1_scalar_is_high(&s) &&
   3bbc4:	e0bfec04 	addi	r2,fp,-80
   3bbc8:	1009883a 	mov	r4,r2
   3bbcc:	0026f540 	call	26f54 <secp256k1_scalar_is_high>
            secp256k1_pubkey_load(ctx, &q, pubkey) &&
   3bbd0:	1000121e 	bne	r2,zero,3bc1c <secp256k1_ecdsa_verify+0x1b4>
   3bbd4:	e1bfff17 	ldw	r6,-4(fp)
   3bbd8:	e17fcb04 	addi	r5,fp,-212
   3bbdc:	e13ffc17 	ldw	r4,-16(fp)
   3bbe0:	003af9c0 	call	3af9c <secp256k1_pubkey_load>
    ARG_CHECK(sig != NULL);
    ARG_CHECK(pubkey != NULL);

    secp256k1_scalar_set_b32(&m, msg32, NULL);
    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
    return (!secp256k1_scalar_is_high(&s) &&
   3bbe4:	10000d26 	beq	r2,zero,3bc1c <secp256k1_ecdsa_verify+0x1b4>
            secp256k1_pubkey_load(ctx, &q, pubkey) &&
            secp256k1_ecdsa_sig_verify(&ctx->ecmult_ctx, &r, &s, &q, &m));
   3bbe8:	e0fffc17 	ldw	r3,-16(fp)
   3bbec:	e17fec04 	addi	r5,fp,-80
   3bbf0:	e13fe404 	addi	r4,fp,-112
   3bbf4:	e0bff404 	addi	r2,fp,-48
   3bbf8:	d8800015 	stw	r2,0(sp)
   3bbfc:	e1ffcb04 	addi	r7,fp,-212
   3bc00:	280d883a 	mov	r6,r5
   3bc04:	200b883a 	mov	r5,r4
   3bc08:	1809883a 	mov	r4,r3
   3bc0c:	003a49c0 	call	3a49c <secp256k1_ecdsa_sig_verify>
    ARG_CHECK(pubkey != NULL);

    secp256k1_scalar_set_b32(&m, msg32, NULL);
    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
    return (!secp256k1_scalar_is_high(&s) &&
            secp256k1_pubkey_load(ctx, &q, pubkey) &&
   3bc10:	10000226 	beq	r2,zero,3bc1c <secp256k1_ecdsa_verify+0x1b4>
   3bc14:	00800044 	movi	r2,1
   3bc18:	00000106 	br	3bc20 <secp256k1_ecdsa_verify+0x1b8>
   3bc1c:	0005883a 	mov	r2,zero
    ARG_CHECK(sig != NULL);
    ARG_CHECK(pubkey != NULL);

    secp256k1_scalar_set_b32(&m, msg32, NULL);
    secp256k1_ecdsa_signature_load(ctx, &r, &s, sig);
    return (!secp256k1_scalar_is_high(&s) &&
   3bc20:	0001883a 	nop
            secp256k1_pubkey_load(ctx, &q, pubkey) &&
            secp256k1_ecdsa_sig_verify(&ctx->ecmult_ctx, &r, &s, &q, &m));
}
   3bc24:	e037883a 	mov	sp,fp
   3bc28:	dfc00117 	ldw	ra,4(sp)
   3bc2c:	df000017 	ldw	fp,0(sp)
   3bc30:	dec00204 	addi	sp,sp,8
   3bc34:	f800283a 	ret

0003bc38 <nonce_function_rfc6979>:

static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {
   3bc38:	deffcb04 	addi	sp,sp,-212
   3bc3c:	dfc03415 	stw	ra,208(sp)
   3bc40:	df003315 	stw	fp,204(sp)
   3bc44:	df003304 	addi	fp,sp,204
   3bc48:	e13ffc15 	stw	r4,-16(fp)
   3bc4c:	e17ffd15 	stw	r5,-12(fp)
   3bc50:	e1bffe15 	stw	r6,-8(fp)
   3bc54:	e1ffff15 	stw	r7,-4(fp)
   unsigned char keydata[112];
   int keylen = 64;
   3bc58:	00801004 	movi	r2,64
   3bc5c:	e0bfcd15 	stw	r2,-204(fp)
    * - optionally 16 extra bytes with the algorithm name.
    * Because the arguments have distinct fixed lengths it is not possible for
    *  different argument mixtures to emulate each other and result in the same
    *  nonces.
    */
   memcpy(keydata, key32, 32);
   3bc60:	e0bfcf04 	addi	r2,fp,-196
   3bc64:	01800804 	movi	r6,32
   3bc68:	e17ffe17 	ldw	r5,-8(fp)
   3bc6c:	1009883a 	mov	r4,r2
   3bc70:	00463980 	call	46398 <memcpy>
   memcpy(keydata + 32, msg32, 32);
   3bc74:	e0bfcf04 	addi	r2,fp,-196
   3bc78:	10800804 	addi	r2,r2,32
   3bc7c:	01800804 	movi	r6,32
   3bc80:	e17ffd17 	ldw	r5,-12(fp)
   3bc84:	1009883a 	mov	r4,r2
   3bc88:	00463980 	call	46398 <memcpy>
   if (data != NULL) {
   3bc8c:	e0800217 	ldw	r2,8(fp)
   3bc90:	10000826 	beq	r2,zero,3bcb4 <nonce_function_rfc6979+0x7c>
       memcpy(keydata + 64, data, 32);
   3bc94:	e0bfcf04 	addi	r2,fp,-196
   3bc98:	10801004 	addi	r2,r2,64
   3bc9c:	01800804 	movi	r6,32
   3bca0:	e1400217 	ldw	r5,8(fp)
   3bca4:	1009883a 	mov	r4,r2
   3bca8:	00463980 	call	46398 <memcpy>
       keylen = 96;
   3bcac:	00801804 	movi	r2,96
   3bcb0:	e0bfcd15 	stw	r2,-204(fp)
   }
   if (algo16 != NULL) {
   3bcb4:	e0bfff17 	ldw	r2,-4(fp)
   3bcb8:	10000a26 	beq	r2,zero,3bce4 <nonce_function_rfc6979+0xac>
       memcpy(keydata + keylen, algo16, 16);
   3bcbc:	e0bfcd17 	ldw	r2,-204(fp)
   3bcc0:	e0ffcf04 	addi	r3,fp,-196
   3bcc4:	1885883a 	add	r2,r3,r2
   3bcc8:	01800404 	movi	r6,16
   3bccc:	e17fff17 	ldw	r5,-4(fp)
   3bcd0:	1009883a 	mov	r4,r2
   3bcd4:	00463980 	call	46398 <memcpy>
       keylen += 16;
   3bcd8:	e0bfcd17 	ldw	r2,-204(fp)
   3bcdc:	10800404 	addi	r2,r2,16
   3bce0:	e0bfcd15 	stw	r2,-204(fp)
   }
   secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, keylen);
   3bce4:	e13fcd17 	ldw	r4,-204(fp)
   3bce8:	e0ffcf04 	addi	r3,fp,-196
   3bcec:	e0bfeb04 	addi	r2,fp,-84
   3bcf0:	200d883a 	mov	r6,r4
   3bcf4:	180b883a 	mov	r5,r3
   3bcf8:	1009883a 	mov	r4,r2
   3bcfc:	00133e00 	call	133e0 <secp256k1_rfc6979_hmac_sha256_initialize>
   memset(keydata, 0, sizeof(keydata));
   3bd00:	e0bfcf04 	addi	r2,fp,-196
   3bd04:	01801c04 	movi	r6,112
   3bd08:	000b883a 	mov	r5,zero
   3bd0c:	1009883a 	mov	r4,r2
   3bd10:	00464200 	call	46420 <memset>
   for (i = 0; i <= counter; i++) {
   3bd14:	e03fce15 	stw	zero,-200(fp)
   3bd18:	00000806 	br	3bd3c <nonce_function_rfc6979+0x104>
       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);
   3bd1c:	e0bfeb04 	addi	r2,fp,-84
   3bd20:	01800804 	movi	r6,32
   3bd24:	e17ffc17 	ldw	r5,-16(fp)
   3bd28:	1009883a 	mov	r4,r2
   3bd2c:	00135800 	call	13580 <secp256k1_rfc6979_hmac_sha256_generate>
       memcpy(keydata + keylen, algo16, 16);
       keylen += 16;
   }
   secp256k1_rfc6979_hmac_sha256_initialize(&rng, keydata, keylen);
   memset(keydata, 0, sizeof(keydata));
   for (i = 0; i <= counter; i++) {
   3bd30:	e0bfce17 	ldw	r2,-200(fp)
   3bd34:	10800044 	addi	r2,r2,1
   3bd38:	e0bfce15 	stw	r2,-200(fp)
   3bd3c:	e0bfce17 	ldw	r2,-200(fp)
   3bd40:	e0c00317 	ldw	r3,12(fp)
   3bd44:	18bff52e 	bgeu	r3,r2,3bd1c <__alt_mem_epcs_flash_controller+0xfe032d1c>
       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);
   }
   secp256k1_rfc6979_hmac_sha256_finalize(&rng);
   3bd48:	e0bfeb04 	addi	r2,fp,-84
   3bd4c:	1009883a 	mov	r4,r2
   3bd50:	001371c0 	call	1371c <secp256k1_rfc6979_hmac_sha256_finalize>
   return 1;
   3bd54:	00800044 	movi	r2,1
}
   3bd58:	e037883a 	mov	sp,fp
   3bd5c:	dfc00117 	ldw	ra,4(sp)
   3bd60:	df000017 	ldw	fp,0(sp)
   3bd64:	dec00204 	addi	sp,sp,8
   3bd68:	f800283a 	ret

0003bd6c <secp256k1_ecdsa_sign>:

const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;
const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;

int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {
   3bd6c:	deffc404 	addi	sp,sp,-240
   3bd70:	dfc03b15 	stw	ra,236(sp)
   3bd74:	df003a15 	stw	fp,232(sp)
   3bd78:	df003a04 	addi	fp,sp,232
   3bd7c:	e13ffc15 	stw	r4,-16(fp)
   3bd80:	e17ffd15 	stw	r5,-12(fp)
   3bd84:	e1bffe15 	stw	r6,-8(fp)
   3bd88:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;
    secp256k1_scalar sec, non, msg;
    int ret = 0;
   3bd8c:	e03fc915 	stw	zero,-220(fp)
    int overflow = 0;
   3bd90:	e03ff315 	stw	zero,-52(fp)
    VERIFY_CHECK(ctx != NULL);
   3bd94:	e0bffc17 	ldw	r2,-16(fp)
   3bd98:	1005003a 	cmpeq	r2,r2,zero
   3bd9c:	10803fcc 	andi	r2,r2,255
   3bda0:	10000d26 	beq	r2,zero,3bdd8 <secp256k1_ecdsa_sign+0x6c>
   3bda4:	d0a01617 	ldw	r2,-32680(gp)
   3bda8:	10c00317 	ldw	r3,12(r2)
   3bdac:	00800174 	movhi	r2,5
   3bdb0:	1098a704 	addi	r2,r2,25244
   3bdb4:	d8800015 	stw	r2,0(sp)
   3bdb8:	01c05784 	movi	r7,350
   3bdbc:	01800174 	movhi	r6,5
   3bdc0:	31989e04 	addi	r6,r6,25208
   3bdc4:	01400174 	movhi	r5,5
   3bdc8:	2951e804 	addi	r5,r5,18336
   3bdcc:	1809883a 	mov	r4,r3
   3bdd0:	00461000 	call	46100 <fprintf>
   3bdd4:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
   3bdd8:	e0bffc17 	ldw	r2,-16(fp)
   3bddc:	10800104 	addi	r2,r2,4
   3bde0:	1009883a 	mov	r4,r2
   3bde4:	00397600 	call	39760 <secp256k1_ecmult_gen_context_is_built>
   3bde8:	1005003a 	cmpeq	r2,r2,zero
   3bdec:	10803fcc 	andi	r2,r2,255
   3bdf0:	10000826 	beq	r2,zero,3be14 <secp256k1_ecdsa_sign+0xa8>
   3bdf4:	e0bffc17 	ldw	r2,-16(fp)
   3bdf8:	10802f04 	addi	r2,r2,188
   3bdfc:	01400174 	movhi	r5,5
   3be00:	29590504 	addi	r5,r5,25620
   3be04:	1009883a 	mov	r4,r2
   3be08:	000de200 	call	de20 <secp256k1_callback_call>
   3be0c:	0005883a 	mov	r2,zero
   3be10:	00008906 	br	3c038 <secp256k1_ecdsa_sign+0x2cc>
    ARG_CHECK(msg32 != NULL);
   3be14:	e0bffe17 	ldw	r2,-8(fp)
   3be18:	1005003a 	cmpeq	r2,r2,zero
   3be1c:	10803fcc 	andi	r2,r2,255
   3be20:	10000826 	beq	r2,zero,3be44 <secp256k1_ecdsa_sign+0xd8>
   3be24:	e0bffc17 	ldw	r2,-16(fp)
   3be28:	10802f04 	addi	r2,r2,188
   3be2c:	01400174 	movhi	r5,5
   3be30:	29590104 	addi	r5,r5,25604
   3be34:	1009883a 	mov	r4,r2
   3be38:	000de200 	call	de20 <secp256k1_callback_call>
   3be3c:	0005883a 	mov	r2,zero
   3be40:	00007d06 	br	3c038 <secp256k1_ecdsa_sign+0x2cc>
    ARG_CHECK(signature != NULL);
   3be44:	e0bffd17 	ldw	r2,-12(fp)
   3be48:	1005003a 	cmpeq	r2,r2,zero
   3be4c:	10803fcc 	andi	r2,r2,255
   3be50:	10000826 	beq	r2,zero,3be74 <secp256k1_ecdsa_sign+0x108>
   3be54:	e0bffc17 	ldw	r2,-16(fp)
   3be58:	10802f04 	addi	r2,r2,188
   3be5c:	01400174 	movhi	r5,5
   3be60:	29591404 	addi	r5,r5,25680
   3be64:	1009883a 	mov	r4,r2
   3be68:	000de200 	call	de20 <secp256k1_callback_call>
   3be6c:	0005883a 	mov	r2,zero
   3be70:	00007106 	br	3c038 <secp256k1_ecdsa_sign+0x2cc>
    ARG_CHECK(seckey != NULL);
   3be74:	e0bfff17 	ldw	r2,-4(fp)
   3be78:	1005003a 	cmpeq	r2,r2,zero
   3be7c:	10803fcc 	andi	r2,r2,255
   3be80:	10000826 	beq	r2,zero,3bea4 <secp256k1_ecdsa_sign+0x138>
   3be84:	e0bffc17 	ldw	r2,-16(fp)
   3be88:	10802f04 	addi	r2,r2,188
   3be8c:	01400174 	movhi	r5,5
   3be90:	29591904 	addi	r5,r5,25700
   3be94:	1009883a 	mov	r4,r2
   3be98:	000de200 	call	de20 <secp256k1_callback_call>
   3be9c:	0005883a 	mov	r2,zero
   3bea0:	00006506 	br	3c038 <secp256k1_ecdsa_sign+0x2cc>
    if (noncefp == NULL) {
   3bea4:	e0800217 	ldw	r2,8(fp)
   3bea8:	1000031e 	bne	r2,zero,3beb8 <secp256k1_ecdsa_sign+0x14c>
        noncefp = secp256k1_nonce_function_default;
   3beac:	00800134 	movhi	r2,4
   3beb0:	10af0e04 	addi	r2,r2,-17352
   3beb4:	e0800215 	stw	r2,8(fp)
    }

    secp256k1_scalar_set_b32(&sec, seckey, &overflow);
   3beb8:	e0fff304 	addi	r3,fp,-52
   3bebc:	e0bfdb04 	addi	r2,fp,-148
   3bec0:	180d883a 	mov	r6,r3
   3bec4:	e17fff17 	ldw	r5,-4(fp)
   3bec8:	1009883a 	mov	r4,r2
   3becc:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    /* Fail if the secret key is invalid. */
    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {
   3bed0:	e0bff317 	ldw	r2,-52(fp)
   3bed4:	10004a1e 	bne	r2,zero,3c000 <secp256k1_ecdsa_sign+0x294>
   3bed8:	e0bfdb04 	addi	r2,fp,-148
   3bedc:	1009883a 	mov	r4,r2
   3bee0:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3bee4:	1000461e 	bne	r2,zero,3c000 <secp256k1_ecdsa_sign+0x294>
        unsigned int count = 0;
   3bee8:	e03fca15 	stw	zero,-216(fp)
        secp256k1_scalar_set_b32(&msg, msg32, NULL);
   3beec:	e0bfeb04 	addi	r2,fp,-84
   3bef0:	000d883a 	mov	r6,zero
   3bef4:	e17ffe17 	ldw	r5,-8(fp)
   3bef8:	1009883a 	mov	r4,r2
   3befc:	00263500 	call	26350 <secp256k1_scalar_set_b32>
        while (1) {
            unsigned char nonce32[32];
            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);
   3bf00:	e0fff404 	addi	r3,fp,-48
   3bf04:	e0bfca17 	ldw	r2,-216(fp)
   3bf08:	d8800115 	stw	r2,4(sp)
   3bf0c:	e0800317 	ldw	r2,12(fp)
   3bf10:	d8800015 	stw	r2,0(sp)
   3bf14:	e0800217 	ldw	r2,8(fp)
   3bf18:	000f883a 	mov	r7,zero
   3bf1c:	e1bfff17 	ldw	r6,-4(fp)
   3bf20:	e17ffe17 	ldw	r5,-8(fp)
   3bf24:	1809883a 	mov	r4,r3
   3bf28:	103ee83a 	callr	r2
   3bf2c:	e0bfc915 	stw	r2,-220(fp)
            if (!ret) {
   3bf30:	e0bfc917 	ldw	r2,-220(fp)
   3bf34:	10002626 	beq	r2,zero,3bfd0 <secp256k1_ecdsa_sign+0x264>
                break;
            }
            secp256k1_scalar_set_b32(&non, nonce32, &overflow);
   3bf38:	e13ff304 	addi	r4,fp,-52
   3bf3c:	e0fff404 	addi	r3,fp,-48
   3bf40:	e0bfe304 	addi	r2,fp,-116
   3bf44:	200d883a 	mov	r6,r4
   3bf48:	180b883a 	mov	r5,r3
   3bf4c:	1009883a 	mov	r4,r2
   3bf50:	00263500 	call	26350 <secp256k1_scalar_set_b32>
            memset(nonce32, 0, 32);
   3bf54:	e0bff404 	addi	r2,fp,-48
   3bf58:	01800804 	movi	r6,32
   3bf5c:	000b883a 	mov	r5,zero
   3bf60:	1009883a 	mov	r4,r2
   3bf64:	00464200 	call	46420 <memset>
            if (!overflow && !secp256k1_scalar_is_zero(&non)) {
   3bf68:	e0bff317 	ldw	r2,-52(fp)
   3bf6c:	1000141e 	bne	r2,zero,3bfc0 <secp256k1_ecdsa_sign+0x254>
   3bf70:	e0bfe304 	addi	r2,fp,-116
   3bf74:	1009883a 	mov	r4,r2
   3bf78:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3bf7c:	1000101e 	bne	r2,zero,3bfc0 <secp256k1_ecdsa_sign+0x254>
                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {
   3bf80:	e0bffc17 	ldw	r2,-16(fp)
   3bf84:	10c00104 	addi	r3,r2,4
   3bf88:	e1bfdb04 	addi	r6,fp,-148
   3bf8c:	e17fd304 	addi	r5,fp,-180
   3bf90:	e13fcb04 	addi	r4,fp,-212
   3bf94:	d8000215 	stw	zero,8(sp)
   3bf98:	e0bfe304 	addi	r2,fp,-116
   3bf9c:	d8800115 	stw	r2,4(sp)
   3bfa0:	e0bfeb04 	addi	r2,fp,-84
   3bfa4:	d8800015 	stw	r2,0(sp)
   3bfa8:	300f883a 	mov	r7,r6
   3bfac:	280d883a 	mov	r6,r5
   3bfb0:	200b883a 	mov	r5,r4
   3bfb4:	1809883a 	mov	r4,r3
   3bfb8:	003a6140 	call	3a614 <secp256k1_ecdsa_sig_sign>
   3bfbc:	1000061e 	bne	r2,zero,3bfd8 <secp256k1_ecdsa_sign+0x26c>
                    break;
                }
            }
            count++;
   3bfc0:	e0bfca17 	ldw	r2,-216(fp)
   3bfc4:	10800044 	addi	r2,r2,1
   3bfc8:	e0bfca15 	stw	r2,-216(fp)
        }
   3bfcc:	003fcc06 	br	3bf00 <__alt_mem_epcs_flash_controller+0xfe032f00>
        secp256k1_scalar_set_b32(&msg, msg32, NULL);
        while (1) {
            unsigned char nonce32[32];
            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);
            if (!ret) {
                break;
   3bfd0:	0001883a 	nop
   3bfd4:	00000106 	br	3bfdc <secp256k1_ecdsa_sign+0x270>
            }
            secp256k1_scalar_set_b32(&non, nonce32, &overflow);
            memset(nonce32, 0, 32);
            if (!overflow && !secp256k1_scalar_is_zero(&non)) {
                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, NULL)) {
                    break;
   3bfd8:	0001883a 	nop
                }
            }
            count++;
        }
        secp256k1_scalar_clear(&msg);
   3bfdc:	e0bfeb04 	addi	r2,fp,-84
   3bfe0:	1009883a 	mov	r4,r2
   3bfe4:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
        secp256k1_scalar_clear(&non);
   3bfe8:	e0bfe304 	addi	r2,fp,-116
   3bfec:	1009883a 	mov	r4,r2
   3bff0:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
        secp256k1_scalar_clear(&sec);
   3bff4:	e0bfdb04 	addi	r2,fp,-148
   3bff8:	1009883a 	mov	r4,r2
   3bffc:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    }
    if (ret) {
   3c000:	e0bfc917 	ldw	r2,-220(fp)
   3c004:	10000726 	beq	r2,zero,3c024 <secp256k1_ecdsa_sign+0x2b8>
        secp256k1_ecdsa_signature_save(signature, &r, &s);
   3c008:	e0ffd304 	addi	r3,fp,-180
   3c00c:	e0bfcb04 	addi	r2,fp,-212
   3c010:	180d883a 	mov	r6,r3
   3c014:	100b883a 	mov	r5,r2
   3c018:	e13ffd17 	ldw	r4,-12(fp)
   3c01c:	003b4040 	call	3b404 <secp256k1_ecdsa_signature_save>
   3c020:	00000406 	br	3c034 <secp256k1_ecdsa_sign+0x2c8>
    } else {
        memset(signature, 0, sizeof(*signature));
   3c024:	01801004 	movi	r6,64
   3c028:	000b883a 	mov	r5,zero
   3c02c:	e13ffd17 	ldw	r4,-12(fp)
   3c030:	00464200 	call	46420 <memset>
    }
    return ret;
   3c034:	e0bfc917 	ldw	r2,-220(fp)
}
   3c038:	e037883a 	mov	sp,fp
   3c03c:	dfc00117 	ldw	ra,4(sp)
   3c040:	df000017 	ldw	fp,0(sp)
   3c044:	dec00204 	addi	sp,sp,8
   3c048:	f800283a 	ret

0003c04c <secp256k1_ec_seckey_verify>:

int secp256k1_ec_seckey_verify(const secp256k1_context* ctx, const unsigned char *seckey) {
   3c04c:	defff104 	addi	sp,sp,-60
   3c050:	dfc00e15 	stw	ra,56(sp)
   3c054:	df000d15 	stw	fp,52(sp)
   3c058:	df000d04 	addi	fp,sp,52
   3c05c:	e13ffe15 	stw	r4,-8(fp)
   3c060:	e17fff15 	stw	r5,-4(fp)
    secp256k1_scalar sec;
    int ret;
    int overflow;
    VERIFY_CHECK(ctx != NULL);
   3c064:	e0bffe17 	ldw	r2,-8(fp)
   3c068:	1005003a 	cmpeq	r2,r2,zero
   3c06c:	10803fcc 	andi	r2,r2,255
   3c070:	10000d26 	beq	r2,zero,3c0a8 <secp256k1_ec_seckey_verify+0x5c>
   3c074:	d0a01617 	ldw	r2,-32680(gp)
   3c078:	10c00317 	ldw	r3,12(r2)
   3c07c:	00800174 	movhi	r2,5
   3c080:	1098a704 	addi	r2,r2,25244
   3c084:	d8800015 	stw	r2,0(sp)
   3c088:	01c062c4 	movi	r7,395
   3c08c:	01800174 	movhi	r6,5
   3c090:	31989e04 	addi	r6,r6,25208
   3c094:	01400174 	movhi	r5,5
   3c098:	2951e804 	addi	r5,r5,18336
   3c09c:	1809883a 	mov	r4,r3
   3c0a0:	00461000 	call	46100 <fprintf>
   3c0a4:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(seckey != NULL);
   3c0a8:	e0bfff17 	ldw	r2,-4(fp)
   3c0ac:	1005003a 	cmpeq	r2,r2,zero
   3c0b0:	10803fcc 	andi	r2,r2,255
   3c0b4:	10000826 	beq	r2,zero,3c0d8 <secp256k1_ec_seckey_verify+0x8c>
   3c0b8:	e0bffe17 	ldw	r2,-8(fp)
   3c0bc:	10802f04 	addi	r2,r2,188
   3c0c0:	01400174 	movhi	r5,5
   3c0c4:	29591904 	addi	r5,r5,25700
   3c0c8:	1009883a 	mov	r4,r2
   3c0cc:	000de200 	call	de20 <secp256k1_callback_call>
   3c0d0:	0005883a 	mov	r2,zero
   3c0d4:	00001406 	br	3c128 <secp256k1_ec_seckey_verify+0xdc>

    secp256k1_scalar_set_b32(&sec, seckey, &overflow);
   3c0d8:	e0fffd04 	addi	r3,fp,-12
   3c0dc:	e0bff504 	addi	r2,fp,-44
   3c0e0:	180d883a 	mov	r6,r3
   3c0e4:	e17fff17 	ldw	r5,-4(fp)
   3c0e8:	1009883a 	mov	r4,r2
   3c0ec:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    ret = !overflow && !secp256k1_scalar_is_zero(&sec);
   3c0f0:	e0bffd17 	ldw	r2,-12(fp)
   3c0f4:	1000061e 	bne	r2,zero,3c110 <secp256k1_ec_seckey_verify+0xc4>
   3c0f8:	e0bff504 	addi	r2,fp,-44
   3c0fc:	1009883a 	mov	r4,r2
   3c100:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3c104:	1000021e 	bne	r2,zero,3c110 <secp256k1_ec_seckey_verify+0xc4>
   3c108:	00800044 	movi	r2,1
   3c10c:	00000106 	br	3c114 <secp256k1_ec_seckey_verify+0xc8>
   3c110:	0005883a 	mov	r2,zero
   3c114:	e0bff415 	stw	r2,-48(fp)
    secp256k1_scalar_clear(&sec);
   3c118:	e0bff504 	addi	r2,fp,-44
   3c11c:	1009883a 	mov	r4,r2
   3c120:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    return ret;
   3c124:	e0bff417 	ldw	r2,-48(fp)
}
   3c128:	e037883a 	mov	sp,fp
   3c12c:	dfc00117 	ldw	ra,4(sp)
   3c130:	df000017 	ldw	fp,0(sp)
   3c134:	dec00204 	addi	sp,sp,8
   3c138:	f800283a 	ret

0003c13c <secp256k1_ec_pubkey_create>:

int secp256k1_ec_pubkey_create(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *seckey) {
   3c13c:	deffb104 	addi	sp,sp,-316
   3c140:	dfc04e15 	stw	ra,312(sp)
   3c144:	df004d15 	stw	fp,308(sp)
   3c148:	dc004c15 	stw	r16,304(sp)
   3c14c:	df004d04 	addi	fp,sp,308
   3c150:	e13ffc15 	stw	r4,-16(fp)
   3c154:	e17ffd15 	stw	r5,-12(fp)
   3c158:	e1bffe15 	stw	r6,-8(fp)
    secp256k1_gej pj;
    secp256k1_ge p;
    secp256k1_scalar sec;
    int overflow;
    int ret = 0;
   3c15c:	e03fb415 	stw	zero,-304(fp)
    VERIFY_CHECK(ctx != NULL);
   3c160:	e0bffc17 	ldw	r2,-16(fp)
   3c164:	1005003a 	cmpeq	r2,r2,zero
   3c168:	10803fcc 	andi	r2,r2,255
   3c16c:	10000d26 	beq	r2,zero,3c1a4 <secp256k1_ec_pubkey_create+0x68>
   3c170:	d0a01617 	ldw	r2,-32680(gp)
   3c174:	10c00317 	ldw	r3,12(r2)
   3c178:	00800174 	movhi	r2,5
   3c17c:	1098a704 	addi	r2,r2,25244
   3c180:	d8800015 	stw	r2,0(sp)
   3c184:	01c06684 	movi	r7,410
   3c188:	01800174 	movhi	r6,5
   3c18c:	31989e04 	addi	r6,r6,25208
   3c190:	01400174 	movhi	r5,5
   3c194:	2951e804 	addi	r5,r5,18336
   3c198:	1809883a 	mov	r4,r3
   3c19c:	00461000 	call	46100 <fprintf>
   3c1a0:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(pubkey != NULL);
   3c1a4:	e0bffd17 	ldw	r2,-12(fp)
   3c1a8:	1005003a 	cmpeq	r2,r2,zero
   3c1ac:	10803fcc 	andi	r2,r2,255
   3c1b0:	10000826 	beq	r2,zero,3c1d4 <secp256k1_ec_pubkey_create+0x98>
   3c1b4:	e0bffc17 	ldw	r2,-16(fp)
   3c1b8:	10802f04 	addi	r2,r2,188
   3c1bc:	01400174 	movhi	r5,5
   3c1c0:	2958b004 	addi	r5,r5,25280
   3c1c4:	1009883a 	mov	r4,r2
   3c1c8:	000de200 	call	de20 <secp256k1_callback_call>
   3c1cc:	0005883a 	mov	r2,zero
   3c1d0:	00004606 	br	3c2ec <secp256k1_ec_pubkey_create+0x1b0>
    memset(pubkey, 0, sizeof(*pubkey));
   3c1d4:	01801004 	movi	r6,64
   3c1d8:	000b883a 	mov	r5,zero
   3c1dc:	e13ffd17 	ldw	r4,-12(fp)
   3c1e0:	00464200 	call	46420 <memset>
    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
   3c1e4:	e0bffc17 	ldw	r2,-16(fp)
   3c1e8:	10800104 	addi	r2,r2,4
   3c1ec:	1009883a 	mov	r4,r2
   3c1f0:	00397600 	call	39760 <secp256k1_ecmult_gen_context_is_built>
   3c1f4:	1005003a 	cmpeq	r2,r2,zero
   3c1f8:	10803fcc 	andi	r2,r2,255
   3c1fc:	10000826 	beq	r2,zero,3c220 <secp256k1_ec_pubkey_create+0xe4>
   3c200:	e0bffc17 	ldw	r2,-16(fp)
   3c204:	10802f04 	addi	r2,r2,188
   3c208:	01400174 	movhi	r5,5
   3c20c:	29590504 	addi	r5,r5,25620
   3c210:	1009883a 	mov	r4,r2
   3c214:	000de200 	call	de20 <secp256k1_callback_call>
   3c218:	0005883a 	mov	r2,zero
   3c21c:	00003306 	br	3c2ec <secp256k1_ec_pubkey_create+0x1b0>
    ARG_CHECK(seckey != NULL);
   3c220:	e0bffe17 	ldw	r2,-8(fp)
   3c224:	1005003a 	cmpeq	r2,r2,zero
   3c228:	10803fcc 	andi	r2,r2,255
   3c22c:	10000826 	beq	r2,zero,3c250 <secp256k1_ec_pubkey_create+0x114>
   3c230:	e0bffc17 	ldw	r2,-16(fp)
   3c234:	10802f04 	addi	r2,r2,188
   3c238:	01400174 	movhi	r5,5
   3c23c:	29591904 	addi	r5,r5,25700
   3c240:	1009883a 	mov	r4,r2
   3c244:	000de200 	call	de20 <secp256k1_callback_call>
   3c248:	0005883a 	mov	r2,zero
   3c24c:	00002706 	br	3c2ec <secp256k1_ec_pubkey_create+0x1b0>

    secp256k1_scalar_set_b32(&sec, seckey, &overflow);
   3c250:	e0fffb04 	addi	r3,fp,-20
   3c254:	e0bff304 	addi	r2,fp,-52
   3c258:	180d883a 	mov	r6,r3
   3c25c:	e17ffe17 	ldw	r5,-8(fp)
   3c260:	1009883a 	mov	r4,r2
   3c264:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    ret = (!overflow) & (!secp256k1_scalar_is_zero(&sec));
   3c268:	e0bffb17 	ldw	r2,-20(fp)
   3c26c:	1005003a 	cmpeq	r2,r2,zero
   3c270:	1021883a 	mov	r16,r2
   3c274:	e0bff304 	addi	r2,fp,-52
   3c278:	1009883a 	mov	r4,r2
   3c27c:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3c280:	1005003a 	cmpeq	r2,r2,zero
   3c284:	8084703a 	and	r2,r16,r2
   3c288:	10803fcc 	andi	r2,r2,255
   3c28c:	e0bfb415 	stw	r2,-304(fp)
    if (ret) {
   3c290:	e0bfb417 	ldw	r2,-304(fp)
   3c294:	10001126 	beq	r2,zero,3c2dc <secp256k1_ec_pubkey_create+0x1a0>
        secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &pj, &sec);
   3c298:	e0bffc17 	ldw	r2,-16(fp)
   3c29c:	10800104 	addi	r2,r2,4
   3c2a0:	e13ff304 	addi	r4,fp,-52
   3c2a4:	e0ffb504 	addi	r3,fp,-300
   3c2a8:	200d883a 	mov	r6,r4
   3c2ac:	180b883a 	mov	r5,r3
   3c2b0:	1009883a 	mov	r4,r2
   3c2b4:	00398e40 	call	398e4 <secp256k1_ecmult_gen>
        secp256k1_ge_set_gej(&p, &pj);
   3c2b8:	e0ffb504 	addi	r3,fp,-300
   3c2bc:	e0bfda04 	addi	r2,fp,-152
   3c2c0:	180b883a 	mov	r5,r3
   3c2c4:	1009883a 	mov	r4,r2
   3c2c8:	0021e940 	call	21e94 <secp256k1_ge_set_gej>
        secp256k1_pubkey_save(pubkey, &p);
   3c2cc:	e0bfda04 	addi	r2,fp,-152
   3c2d0:	100b883a 	mov	r5,r2
   3c2d4:	e13ffd17 	ldw	r4,-12(fp)
   3c2d8:	003b0280 	call	3b028 <secp256k1_pubkey_save>
    }
    secp256k1_scalar_clear(&sec);
   3c2dc:	e0bff304 	addi	r2,fp,-52
   3c2e0:	1009883a 	mov	r4,r2
   3c2e4:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    return ret;
   3c2e8:	e0bfb417 	ldw	r2,-304(fp)
}
   3c2ec:	e6ffff04 	addi	sp,fp,-4
   3c2f0:	dfc00217 	ldw	ra,8(sp)
   3c2f4:	df000117 	ldw	fp,4(sp)
   3c2f8:	dc000017 	ldw	r16,0(sp)
   3c2fc:	dec00304 	addi	sp,sp,12
   3c300:	f800283a 	ret

0003c304 <secp256k1_ec_privkey_tweak_add>:

int secp256k1_ec_privkey_tweak_add(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {
   3c304:	deffe804 	addi	sp,sp,-96
   3c308:	dfc01715 	stw	ra,92(sp)
   3c30c:	df001615 	stw	fp,88(sp)
   3c310:	df001604 	addi	fp,sp,88
   3c314:	e13ffd15 	stw	r4,-12(fp)
   3c318:	e17ffe15 	stw	r5,-8(fp)
   3c31c:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar term;
    secp256k1_scalar sec;
    int ret = 0;
   3c320:	e03feb15 	stw	zero,-84(fp)
    int overflow = 0;
   3c324:	e03ffc15 	stw	zero,-16(fp)
    VERIFY_CHECK(ctx != NULL);
   3c328:	e0bffd17 	ldw	r2,-12(fp)
   3c32c:	1005003a 	cmpeq	r2,r2,zero
   3c330:	10803fcc 	andi	r2,r2,255
   3c334:	10000d26 	beq	r2,zero,3c36c <secp256k1_ec_privkey_tweak_add+0x68>
   3c338:	d0a01617 	ldw	r2,-32680(gp)
   3c33c:	10c00317 	ldw	r3,12(r2)
   3c340:	00800174 	movhi	r2,5
   3c344:	1098a704 	addi	r2,r2,25244
   3c348:	d8800015 	stw	r2,0(sp)
   3c34c:	01c06c04 	movi	r7,432
   3c350:	01800174 	movhi	r6,5
   3c354:	31989e04 	addi	r6,r6,25208
   3c358:	01400174 	movhi	r5,5
   3c35c:	2951e804 	addi	r5,r5,18336
   3c360:	1809883a 	mov	r4,r3
   3c364:	00461000 	call	46100 <fprintf>
   3c368:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(seckey != NULL);
   3c36c:	e0bffe17 	ldw	r2,-8(fp)
   3c370:	1005003a 	cmpeq	r2,r2,zero
   3c374:	10803fcc 	andi	r2,r2,255
   3c378:	10000826 	beq	r2,zero,3c39c <secp256k1_ec_privkey_tweak_add+0x98>
   3c37c:	e0bffd17 	ldw	r2,-12(fp)
   3c380:	10802f04 	addi	r2,r2,188
   3c384:	01400174 	movhi	r5,5
   3c388:	29591904 	addi	r5,r5,25700
   3c38c:	1009883a 	mov	r4,r2
   3c390:	000de200 	call	de20 <secp256k1_callback_call>
   3c394:	0005883a 	mov	r2,zero
   3c398:	00003406 	br	3c46c <secp256k1_ec_privkey_tweak_add+0x168>
    ARG_CHECK(tweak != NULL);
   3c39c:	e0bfff17 	ldw	r2,-4(fp)
   3c3a0:	1005003a 	cmpeq	r2,r2,zero
   3c3a4:	10803fcc 	andi	r2,r2,255
   3c3a8:	10000826 	beq	r2,zero,3c3cc <secp256k1_ec_privkey_tweak_add+0xc8>
   3c3ac:	e0bffd17 	ldw	r2,-12(fp)
   3c3b0:	10802f04 	addi	r2,r2,188
   3c3b4:	01400174 	movhi	r5,5
   3c3b8:	29591d04 	addi	r5,r5,25716
   3c3bc:	1009883a 	mov	r4,r2
   3c3c0:	000de200 	call	de20 <secp256k1_callback_call>
   3c3c4:	0005883a 	mov	r2,zero
   3c3c8:	00002806 	br	3c46c <secp256k1_ec_privkey_tweak_add+0x168>

    secp256k1_scalar_set_b32(&term, tweak, &overflow);
   3c3cc:	e0fffc04 	addi	r3,fp,-16
   3c3d0:	e0bfec04 	addi	r2,fp,-80
   3c3d4:	180d883a 	mov	r6,r3
   3c3d8:	e17fff17 	ldw	r5,-4(fp)
   3c3dc:	1009883a 	mov	r4,r2
   3c3e0:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    secp256k1_scalar_set_b32(&sec, seckey, NULL);
   3c3e4:	e0bff404 	addi	r2,fp,-48
   3c3e8:	000d883a 	mov	r6,zero
   3c3ec:	e17ffe17 	ldw	r5,-8(fp)
   3c3f0:	1009883a 	mov	r4,r2
   3c3f4:	00263500 	call	26350 <secp256k1_scalar_set_b32>

    ret = !overflow && secp256k1_eckey_privkey_tweak_add(&sec, &term);
   3c3f8:	e0bffc17 	ldw	r2,-16(fp)
   3c3fc:	1000081e 	bne	r2,zero,3c420 <secp256k1_ec_privkey_tweak_add+0x11c>
   3c400:	e0ffec04 	addi	r3,fp,-80
   3c404:	e0bff404 	addi	r2,fp,-48
   3c408:	180b883a 	mov	r5,r3
   3c40c:	1009883a 	mov	r4,r2
   3c410:	003aa880 	call	3aa88 <secp256k1_eckey_privkey_tweak_add>
   3c414:	10000226 	beq	r2,zero,3c420 <secp256k1_ec_privkey_tweak_add+0x11c>
   3c418:	00800044 	movi	r2,1
   3c41c:	00000106 	br	3c424 <secp256k1_ec_privkey_tweak_add+0x120>
   3c420:	0005883a 	mov	r2,zero
   3c424:	e0bfeb15 	stw	r2,-84(fp)
    memset(seckey, 0, 32);
   3c428:	01800804 	movi	r6,32
   3c42c:	000b883a 	mov	r5,zero
   3c430:	e13ffe17 	ldw	r4,-8(fp)
   3c434:	00464200 	call	46420 <memset>
    if (ret) {
   3c438:	e0bfeb17 	ldw	r2,-84(fp)
   3c43c:	10000426 	beq	r2,zero,3c450 <secp256k1_ec_privkey_tweak_add+0x14c>
        secp256k1_scalar_get_b32(seckey, &sec);
   3c440:	e0bff404 	addi	r2,fp,-48
   3c444:	100b883a 	mov	r5,r2
   3c448:	e13ffe17 	ldw	r4,-8(fp)
   3c44c:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    }

    secp256k1_scalar_clear(&sec);
   3c450:	e0bff404 	addi	r2,fp,-48
   3c454:	1009883a 	mov	r4,r2
   3c458:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    secp256k1_scalar_clear(&term);
   3c45c:	e0bfec04 	addi	r2,fp,-80
   3c460:	1009883a 	mov	r4,r2
   3c464:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    return ret;
   3c468:	e0bfeb17 	ldw	r2,-84(fp)
}
   3c46c:	e037883a 	mov	sp,fp
   3c470:	dfc00117 	ldw	ra,4(sp)
   3c474:	df000017 	ldw	fp,0(sp)
   3c478:	dec00204 	addi	sp,sp,8
   3c47c:	f800283a 	ret

0003c480 <secp256k1_ec_pubkey_tweak_add>:

int secp256k1_ec_pubkey_tweak_add(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {
   3c480:	deffd704 	addi	sp,sp,-164
   3c484:	dfc02815 	stw	ra,160(sp)
   3c488:	df002715 	stw	fp,156(sp)
   3c48c:	df002704 	addi	fp,sp,156
   3c490:	e13ffd15 	stw	r4,-12(fp)
   3c494:	e17ffe15 	stw	r5,-8(fp)
   3c498:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_ge p;
    secp256k1_scalar term;
    int ret = 0;
   3c49c:	e03fda15 	stw	zero,-152(fp)
    int overflow = 0;
   3c4a0:	e03ffc15 	stw	zero,-16(fp)
    VERIFY_CHECK(ctx != NULL);
   3c4a4:	e0bffd17 	ldw	r2,-12(fp)
   3c4a8:	1005003a 	cmpeq	r2,r2,zero
   3c4ac:	10803fcc 	andi	r2,r2,255
   3c4b0:	10000d26 	beq	r2,zero,3c4e8 <secp256k1_ec_pubkey_tweak_add+0x68>
   3c4b4:	d0a01617 	ldw	r2,-32680(gp)
   3c4b8:	10c00317 	ldw	r3,12(r2)
   3c4bc:	00800174 	movhi	r2,5
   3c4c0:	1098a704 	addi	r2,r2,25244
   3c4c4:	d8800015 	stw	r2,0(sp)
   3c4c8:	01c071c4 	movi	r7,455
   3c4cc:	01800174 	movhi	r6,5
   3c4d0:	31989e04 	addi	r6,r6,25208
   3c4d4:	01400174 	movhi	r5,5
   3c4d8:	2951e804 	addi	r5,r5,18336
   3c4dc:	1809883a 	mov	r4,r3
   3c4e0:	00461000 	call	46100 <fprintf>
   3c4e4:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));
   3c4e8:	e0bffd17 	ldw	r2,-12(fp)
   3c4ec:	1009883a 	mov	r4,r2
   3c4f0:	00377780 	call	37778 <secp256k1_ecmult_context_is_built>
   3c4f4:	1005003a 	cmpeq	r2,r2,zero
   3c4f8:	10803fcc 	andi	r2,r2,255
   3c4fc:	10000826 	beq	r2,zero,3c520 <secp256k1_ec_pubkey_tweak_add+0xa0>
   3c500:	e0bffd17 	ldw	r2,-12(fp)
   3c504:	10802f04 	addi	r2,r2,188
   3c508:	01400174 	movhi	r5,5
   3c50c:	2958f404 	addi	r5,r5,25552
   3c510:	1009883a 	mov	r4,r2
   3c514:	000de200 	call	de20 <secp256k1_callback_call>
   3c518:	0005883a 	mov	r2,zero
   3c51c:	00003f06 	br	3c61c <secp256k1_ec_pubkey_tweak_add+0x19c>
    ARG_CHECK(pubkey != NULL);
   3c520:	e0bffe17 	ldw	r2,-8(fp)
   3c524:	1005003a 	cmpeq	r2,r2,zero
   3c528:	10803fcc 	andi	r2,r2,255
   3c52c:	10000826 	beq	r2,zero,3c550 <secp256k1_ec_pubkey_tweak_add+0xd0>
   3c530:	e0bffd17 	ldw	r2,-12(fp)
   3c534:	10802f04 	addi	r2,r2,188
   3c538:	01400174 	movhi	r5,5
   3c53c:	2958b004 	addi	r5,r5,25280
   3c540:	1009883a 	mov	r4,r2
   3c544:	000de200 	call	de20 <secp256k1_callback_call>
   3c548:	0005883a 	mov	r2,zero
   3c54c:	00003306 	br	3c61c <secp256k1_ec_pubkey_tweak_add+0x19c>
    ARG_CHECK(tweak != NULL);
   3c550:	e0bfff17 	ldw	r2,-4(fp)
   3c554:	1005003a 	cmpeq	r2,r2,zero
   3c558:	10803fcc 	andi	r2,r2,255
   3c55c:	10000826 	beq	r2,zero,3c580 <secp256k1_ec_pubkey_tweak_add+0x100>
   3c560:	e0bffd17 	ldw	r2,-12(fp)
   3c564:	10802f04 	addi	r2,r2,188
   3c568:	01400174 	movhi	r5,5
   3c56c:	29591d04 	addi	r5,r5,25716
   3c570:	1009883a 	mov	r4,r2
   3c574:	000de200 	call	de20 <secp256k1_callback_call>
   3c578:	0005883a 	mov	r2,zero
   3c57c:	00002706 	br	3c61c <secp256k1_ec_pubkey_tweak_add+0x19c>

    secp256k1_scalar_set_b32(&term, tweak, &overflow);
   3c580:	e0fffc04 	addi	r3,fp,-16
   3c584:	e0bff404 	addi	r2,fp,-48
   3c588:	180d883a 	mov	r6,r3
   3c58c:	e17fff17 	ldw	r5,-4(fp)
   3c590:	1009883a 	mov	r4,r2
   3c594:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    ret = !overflow && secp256k1_pubkey_load(ctx, &p, pubkey);
   3c598:	e0bffc17 	ldw	r2,-16(fp)
   3c59c:	1000081e 	bne	r2,zero,3c5c0 <secp256k1_ec_pubkey_tweak_add+0x140>
   3c5a0:	e0bfdb04 	addi	r2,fp,-148
   3c5a4:	e1bffe17 	ldw	r6,-8(fp)
   3c5a8:	100b883a 	mov	r5,r2
   3c5ac:	e13ffd17 	ldw	r4,-12(fp)
   3c5b0:	003af9c0 	call	3af9c <secp256k1_pubkey_load>
   3c5b4:	10000226 	beq	r2,zero,3c5c0 <secp256k1_ec_pubkey_tweak_add+0x140>
   3c5b8:	00800044 	movi	r2,1
   3c5bc:	00000106 	br	3c5c4 <secp256k1_ec_pubkey_tweak_add+0x144>
   3c5c0:	0005883a 	mov	r2,zero
   3c5c4:	e0bfda15 	stw	r2,-152(fp)
    memset(pubkey, 0, sizeof(*pubkey));
   3c5c8:	01801004 	movi	r6,64
   3c5cc:	000b883a 	mov	r5,zero
   3c5d0:	e13ffe17 	ldw	r4,-8(fp)
   3c5d4:	00464200 	call	46420 <memset>
    if (ret) {
   3c5d8:	e0bfda17 	ldw	r2,-152(fp)
   3c5dc:	10000e26 	beq	r2,zero,3c618 <secp256k1_ec_pubkey_tweak_add+0x198>
        if (secp256k1_eckey_pubkey_tweak_add(&ctx->ecmult_ctx, &p, &term)) {
   3c5e0:	e0bffd17 	ldw	r2,-12(fp)
   3c5e4:	e13ff404 	addi	r4,fp,-48
   3c5e8:	e0ffdb04 	addi	r3,fp,-148
   3c5ec:	200d883a 	mov	r6,r4
   3c5f0:	180b883a 	mov	r5,r3
   3c5f4:	1009883a 	mov	r4,r2
   3c5f8:	003aadc0 	call	3aadc <secp256k1_eckey_pubkey_tweak_add>
   3c5fc:	10000526 	beq	r2,zero,3c614 <secp256k1_ec_pubkey_tweak_add+0x194>
            secp256k1_pubkey_save(pubkey, &p);
   3c600:	e0bfdb04 	addi	r2,fp,-148
   3c604:	100b883a 	mov	r5,r2
   3c608:	e13ffe17 	ldw	r4,-8(fp)
   3c60c:	003b0280 	call	3b028 <secp256k1_pubkey_save>
   3c610:	00000106 	br	3c618 <secp256k1_ec_pubkey_tweak_add+0x198>
        } else {
            ret = 0;
   3c614:	e03fda15 	stw	zero,-152(fp)
        }
    }

    return ret;
   3c618:	e0bfda17 	ldw	r2,-152(fp)
}
   3c61c:	e037883a 	mov	sp,fp
   3c620:	dfc00117 	ldw	ra,4(sp)
   3c624:	df000017 	ldw	fp,0(sp)
   3c628:	dec00204 	addi	sp,sp,8
   3c62c:	f800283a 	ret

0003c630 <secp256k1_ec_privkey_tweak_mul>:

int secp256k1_ec_privkey_tweak_mul(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {
   3c630:	deffe804 	addi	sp,sp,-96
   3c634:	dfc01715 	stw	ra,92(sp)
   3c638:	df001615 	stw	fp,88(sp)
   3c63c:	df001604 	addi	fp,sp,88
   3c640:	e13ffd15 	stw	r4,-12(fp)
   3c644:	e17ffe15 	stw	r5,-8(fp)
   3c648:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar factor;
    secp256k1_scalar sec;
    int ret = 0;
   3c64c:	e03feb15 	stw	zero,-84(fp)
    int overflow = 0;
   3c650:	e03ffc15 	stw	zero,-16(fp)
    VERIFY_CHECK(ctx != NULL);
   3c654:	e0bffd17 	ldw	r2,-12(fp)
   3c658:	1005003a 	cmpeq	r2,r2,zero
   3c65c:	10803fcc 	andi	r2,r2,255
   3c660:	10000d26 	beq	r2,zero,3c698 <secp256k1_ec_privkey_tweak_mul+0x68>
   3c664:	d0a01617 	ldw	r2,-32680(gp)
   3c668:	10c00317 	ldw	r3,12(r2)
   3c66c:	00800174 	movhi	r2,5
   3c670:	1098a704 	addi	r2,r2,25244
   3c674:	d8800015 	stw	r2,0(sp)
   3c678:	01c077c4 	movi	r7,479
   3c67c:	01800174 	movhi	r6,5
   3c680:	31989e04 	addi	r6,r6,25208
   3c684:	01400174 	movhi	r5,5
   3c688:	2951e804 	addi	r5,r5,18336
   3c68c:	1809883a 	mov	r4,r3
   3c690:	00461000 	call	46100 <fprintf>
   3c694:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(seckey != NULL);
   3c698:	e0bffe17 	ldw	r2,-8(fp)
   3c69c:	1005003a 	cmpeq	r2,r2,zero
   3c6a0:	10803fcc 	andi	r2,r2,255
   3c6a4:	10000826 	beq	r2,zero,3c6c8 <secp256k1_ec_privkey_tweak_mul+0x98>
   3c6a8:	e0bffd17 	ldw	r2,-12(fp)
   3c6ac:	10802f04 	addi	r2,r2,188
   3c6b0:	01400174 	movhi	r5,5
   3c6b4:	29591904 	addi	r5,r5,25700
   3c6b8:	1009883a 	mov	r4,r2
   3c6bc:	000de200 	call	de20 <secp256k1_callback_call>
   3c6c0:	0005883a 	mov	r2,zero
   3c6c4:	00003406 	br	3c798 <secp256k1_ec_privkey_tweak_mul+0x168>
    ARG_CHECK(tweak != NULL);
   3c6c8:	e0bfff17 	ldw	r2,-4(fp)
   3c6cc:	1005003a 	cmpeq	r2,r2,zero
   3c6d0:	10803fcc 	andi	r2,r2,255
   3c6d4:	10000826 	beq	r2,zero,3c6f8 <secp256k1_ec_privkey_tweak_mul+0xc8>
   3c6d8:	e0bffd17 	ldw	r2,-12(fp)
   3c6dc:	10802f04 	addi	r2,r2,188
   3c6e0:	01400174 	movhi	r5,5
   3c6e4:	29591d04 	addi	r5,r5,25716
   3c6e8:	1009883a 	mov	r4,r2
   3c6ec:	000de200 	call	de20 <secp256k1_callback_call>
   3c6f0:	0005883a 	mov	r2,zero
   3c6f4:	00002806 	br	3c798 <secp256k1_ec_privkey_tweak_mul+0x168>

    secp256k1_scalar_set_b32(&factor, tweak, &overflow);
   3c6f8:	e0fffc04 	addi	r3,fp,-16
   3c6fc:	e0bfec04 	addi	r2,fp,-80
   3c700:	180d883a 	mov	r6,r3
   3c704:	e17fff17 	ldw	r5,-4(fp)
   3c708:	1009883a 	mov	r4,r2
   3c70c:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    secp256k1_scalar_set_b32(&sec, seckey, NULL);
   3c710:	e0bff404 	addi	r2,fp,-48
   3c714:	000d883a 	mov	r6,zero
   3c718:	e17ffe17 	ldw	r5,-8(fp)
   3c71c:	1009883a 	mov	r4,r2
   3c720:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    ret = !overflow && secp256k1_eckey_privkey_tweak_mul(&sec, &factor);
   3c724:	e0bffc17 	ldw	r2,-16(fp)
   3c728:	1000081e 	bne	r2,zero,3c74c <secp256k1_ec_privkey_tweak_mul+0x11c>
   3c72c:	e0ffec04 	addi	r3,fp,-80
   3c730:	e0bff404 	addi	r2,fp,-48
   3c734:	180b883a 	mov	r5,r3
   3c738:	1009883a 	mov	r4,r2
   3c73c:	003ab6c0 	call	3ab6c <secp256k1_eckey_privkey_tweak_mul>
   3c740:	10000226 	beq	r2,zero,3c74c <secp256k1_ec_privkey_tweak_mul+0x11c>
   3c744:	00800044 	movi	r2,1
   3c748:	00000106 	br	3c750 <secp256k1_ec_privkey_tweak_mul+0x120>
   3c74c:	0005883a 	mov	r2,zero
   3c750:	e0bfeb15 	stw	r2,-84(fp)
    memset(seckey, 0, 32);
   3c754:	01800804 	movi	r6,32
   3c758:	000b883a 	mov	r5,zero
   3c75c:	e13ffe17 	ldw	r4,-8(fp)
   3c760:	00464200 	call	46420 <memset>
    if (ret) {
   3c764:	e0bfeb17 	ldw	r2,-84(fp)
   3c768:	10000426 	beq	r2,zero,3c77c <secp256k1_ec_privkey_tweak_mul+0x14c>
        secp256k1_scalar_get_b32(seckey, &sec);
   3c76c:	e0bff404 	addi	r2,fp,-48
   3c770:	100b883a 	mov	r5,r2
   3c774:	e13ffe17 	ldw	r4,-8(fp)
   3c778:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    }

    secp256k1_scalar_clear(&sec);
   3c77c:	e0bff404 	addi	r2,fp,-48
   3c780:	1009883a 	mov	r4,r2
   3c784:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    secp256k1_scalar_clear(&factor);
   3c788:	e0bfec04 	addi	r2,fp,-80
   3c78c:	1009883a 	mov	r4,r2
   3c790:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    return ret;
   3c794:	e0bfeb17 	ldw	r2,-84(fp)
}
   3c798:	e037883a 	mov	sp,fp
   3c79c:	dfc00117 	ldw	ra,4(sp)
   3c7a0:	df000017 	ldw	fp,0(sp)
   3c7a4:	dec00204 	addi	sp,sp,8
   3c7a8:	f800283a 	ret

0003c7ac <secp256k1_ec_pubkey_tweak_mul>:

int secp256k1_ec_pubkey_tweak_mul(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {
   3c7ac:	deffd704 	addi	sp,sp,-164
   3c7b0:	dfc02815 	stw	ra,160(sp)
   3c7b4:	df002715 	stw	fp,156(sp)
   3c7b8:	df002704 	addi	fp,sp,156
   3c7bc:	e13ffd15 	stw	r4,-12(fp)
   3c7c0:	e17ffe15 	stw	r5,-8(fp)
   3c7c4:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_ge p;
    secp256k1_scalar factor;
    int ret = 0;
   3c7c8:	e03fda15 	stw	zero,-152(fp)
    int overflow = 0;
   3c7cc:	e03ffc15 	stw	zero,-16(fp)
    VERIFY_CHECK(ctx != NULL);
   3c7d0:	e0bffd17 	ldw	r2,-12(fp)
   3c7d4:	1005003a 	cmpeq	r2,r2,zero
   3c7d8:	10803fcc 	andi	r2,r2,255
   3c7dc:	10000d26 	beq	r2,zero,3c814 <secp256k1_ec_pubkey_tweak_mul+0x68>
   3c7e0:	d0a01617 	ldw	r2,-32680(gp)
   3c7e4:	10c00317 	ldw	r3,12(r2)
   3c7e8:	00800174 	movhi	r2,5
   3c7ec:	1098a704 	addi	r2,r2,25244
   3c7f0:	d8800015 	stw	r2,0(sp)
   3c7f4:	01c07d44 	movi	r7,501
   3c7f8:	01800174 	movhi	r6,5
   3c7fc:	31989e04 	addi	r6,r6,25208
   3c800:	01400174 	movhi	r5,5
   3c804:	2951e804 	addi	r5,r5,18336
   3c808:	1809883a 	mov	r4,r3
   3c80c:	00461000 	call	46100 <fprintf>
   3c810:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));
   3c814:	e0bffd17 	ldw	r2,-12(fp)
   3c818:	1009883a 	mov	r4,r2
   3c81c:	00377780 	call	37778 <secp256k1_ecmult_context_is_built>
   3c820:	1005003a 	cmpeq	r2,r2,zero
   3c824:	10803fcc 	andi	r2,r2,255
   3c828:	10000826 	beq	r2,zero,3c84c <secp256k1_ec_pubkey_tweak_mul+0xa0>
   3c82c:	e0bffd17 	ldw	r2,-12(fp)
   3c830:	10802f04 	addi	r2,r2,188
   3c834:	01400174 	movhi	r5,5
   3c838:	2958f404 	addi	r5,r5,25552
   3c83c:	1009883a 	mov	r4,r2
   3c840:	000de200 	call	de20 <secp256k1_callback_call>
   3c844:	0005883a 	mov	r2,zero
   3c848:	00003f06 	br	3c948 <secp256k1_ec_pubkey_tweak_mul+0x19c>
    ARG_CHECK(pubkey != NULL);
   3c84c:	e0bffe17 	ldw	r2,-8(fp)
   3c850:	1005003a 	cmpeq	r2,r2,zero
   3c854:	10803fcc 	andi	r2,r2,255
   3c858:	10000826 	beq	r2,zero,3c87c <secp256k1_ec_pubkey_tweak_mul+0xd0>
   3c85c:	e0bffd17 	ldw	r2,-12(fp)
   3c860:	10802f04 	addi	r2,r2,188
   3c864:	01400174 	movhi	r5,5
   3c868:	2958b004 	addi	r5,r5,25280
   3c86c:	1009883a 	mov	r4,r2
   3c870:	000de200 	call	de20 <secp256k1_callback_call>
   3c874:	0005883a 	mov	r2,zero
   3c878:	00003306 	br	3c948 <secp256k1_ec_pubkey_tweak_mul+0x19c>
    ARG_CHECK(tweak != NULL);
   3c87c:	e0bfff17 	ldw	r2,-4(fp)
   3c880:	1005003a 	cmpeq	r2,r2,zero
   3c884:	10803fcc 	andi	r2,r2,255
   3c888:	10000826 	beq	r2,zero,3c8ac <secp256k1_ec_pubkey_tweak_mul+0x100>
   3c88c:	e0bffd17 	ldw	r2,-12(fp)
   3c890:	10802f04 	addi	r2,r2,188
   3c894:	01400174 	movhi	r5,5
   3c898:	29591d04 	addi	r5,r5,25716
   3c89c:	1009883a 	mov	r4,r2
   3c8a0:	000de200 	call	de20 <secp256k1_callback_call>
   3c8a4:	0005883a 	mov	r2,zero
   3c8a8:	00002706 	br	3c948 <secp256k1_ec_pubkey_tweak_mul+0x19c>

    secp256k1_scalar_set_b32(&factor, tweak, &overflow);
   3c8ac:	e0fffc04 	addi	r3,fp,-16
   3c8b0:	e0bff404 	addi	r2,fp,-48
   3c8b4:	180d883a 	mov	r6,r3
   3c8b8:	e17fff17 	ldw	r5,-4(fp)
   3c8bc:	1009883a 	mov	r4,r2
   3c8c0:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    ret = !overflow && secp256k1_pubkey_load(ctx, &p, pubkey);
   3c8c4:	e0bffc17 	ldw	r2,-16(fp)
   3c8c8:	1000081e 	bne	r2,zero,3c8ec <secp256k1_ec_pubkey_tweak_mul+0x140>
   3c8cc:	e0bfdb04 	addi	r2,fp,-148
   3c8d0:	e1bffe17 	ldw	r6,-8(fp)
   3c8d4:	100b883a 	mov	r5,r2
   3c8d8:	e13ffd17 	ldw	r4,-12(fp)
   3c8dc:	003af9c0 	call	3af9c <secp256k1_pubkey_load>
   3c8e0:	10000226 	beq	r2,zero,3c8ec <secp256k1_ec_pubkey_tweak_mul+0x140>
   3c8e4:	00800044 	movi	r2,1
   3c8e8:	00000106 	br	3c8f0 <secp256k1_ec_pubkey_tweak_mul+0x144>
   3c8ec:	0005883a 	mov	r2,zero
   3c8f0:	e0bfda15 	stw	r2,-152(fp)
    memset(pubkey, 0, sizeof(*pubkey));
   3c8f4:	01801004 	movi	r6,64
   3c8f8:	000b883a 	mov	r5,zero
   3c8fc:	e13ffe17 	ldw	r4,-8(fp)
   3c900:	00464200 	call	46420 <memset>
    if (ret) {
   3c904:	e0bfda17 	ldw	r2,-152(fp)
   3c908:	10000e26 	beq	r2,zero,3c944 <secp256k1_ec_pubkey_tweak_mul+0x198>
        if (secp256k1_eckey_pubkey_tweak_mul(&ctx->ecmult_ctx, &p, &factor)) {
   3c90c:	e0bffd17 	ldw	r2,-12(fp)
   3c910:	e13ff404 	addi	r4,fp,-48
   3c914:	e0ffdb04 	addi	r3,fp,-148
   3c918:	200d883a 	mov	r6,r4
   3c91c:	180b883a 	mov	r5,r3
   3c920:	1009883a 	mov	r4,r2
   3c924:	003abc00 	call	3abc0 <secp256k1_eckey_pubkey_tweak_mul>
   3c928:	10000526 	beq	r2,zero,3c940 <secp256k1_ec_pubkey_tweak_mul+0x194>
            secp256k1_pubkey_save(pubkey, &p);
   3c92c:	e0bfdb04 	addi	r2,fp,-148
   3c930:	100b883a 	mov	r5,r2
   3c934:	e13ffe17 	ldw	r4,-8(fp)
   3c938:	003b0280 	call	3b028 <secp256k1_pubkey_save>
   3c93c:	00000106 	br	3c944 <secp256k1_ec_pubkey_tweak_mul+0x198>
        } else {
            ret = 0;
   3c940:	e03fda15 	stw	zero,-152(fp)
        }
    }

    return ret;
   3c944:	e0bfda17 	ldw	r2,-152(fp)
}
   3c948:	e037883a 	mov	sp,fp
   3c94c:	dfc00117 	ldw	ra,4(sp)
   3c950:	df000017 	ldw	fp,0(sp)
   3c954:	dec00204 	addi	sp,sp,8
   3c958:	f800283a 	ret

0003c95c <secp256k1_context_randomize>:

int secp256k1_context_randomize(secp256k1_context* ctx, const unsigned char *seed32) {
   3c95c:	defffb04 	addi	sp,sp,-20
   3c960:	dfc00415 	stw	ra,16(sp)
   3c964:	df000315 	stw	fp,12(sp)
   3c968:	df000304 	addi	fp,sp,12
   3c96c:	e13ffe15 	stw	r4,-8(fp)
   3c970:	e17fff15 	stw	r5,-4(fp)
    VERIFY_CHECK(ctx != NULL);
   3c974:	e0bffe17 	ldw	r2,-8(fp)
   3c978:	1005003a 	cmpeq	r2,r2,zero
   3c97c:	10803fcc 	andi	r2,r2,255
   3c980:	10000d26 	beq	r2,zero,3c9b8 <secp256k1_context_randomize+0x5c>
   3c984:	d0a01617 	ldw	r2,-32680(gp)
   3c988:	10c00317 	ldw	r3,12(r2)
   3c98c:	00800174 	movhi	r2,5
   3c990:	1098a704 	addi	r2,r2,25244
   3c994:	d8800015 	stw	r2,0(sp)
   3c998:	01c08244 	movi	r7,521
   3c99c:	01800174 	movhi	r6,5
   3c9a0:	31989e04 	addi	r6,r6,25208
   3c9a4:	01400174 	movhi	r5,5
   3c9a8:	2951e804 	addi	r5,r5,18336
   3c9ac:	1809883a 	mov	r4,r3
   3c9b0:	00461000 	call	46100 <fprintf>
   3c9b4:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
   3c9b8:	e0bffe17 	ldw	r2,-8(fp)
   3c9bc:	10800104 	addi	r2,r2,4
   3c9c0:	1009883a 	mov	r4,r2
   3c9c4:	00397600 	call	39760 <secp256k1_ecmult_gen_context_is_built>
   3c9c8:	1005003a 	cmpeq	r2,r2,zero
   3c9cc:	10803fcc 	andi	r2,r2,255
   3c9d0:	10000826 	beq	r2,zero,3c9f4 <secp256k1_context_randomize+0x98>
   3c9d4:	e0bffe17 	ldw	r2,-8(fp)
   3c9d8:	10802f04 	addi	r2,r2,188
   3c9dc:	01400174 	movhi	r5,5
   3c9e0:	29590504 	addi	r5,r5,25620
   3c9e4:	1009883a 	mov	r4,r2
   3c9e8:	000de200 	call	de20 <secp256k1_callback_call>
   3c9ec:	0005883a 	mov	r2,zero
   3c9f0:	00000606 	br	3ca0c <secp256k1_context_randomize+0xb0>
    secp256k1_ecmult_gen_blind(&ctx->ecmult_gen_ctx, seed32);
   3c9f4:	e0bffe17 	ldw	r2,-8(fp)
   3c9f8:	10800104 	addi	r2,r2,4
   3c9fc:	e17fff17 	ldw	r5,-4(fp)
   3ca00:	1009883a 	mov	r4,r2
   3ca04:	0039a5c0 	call	39a5c <secp256k1_ecmult_gen_blind>
    return 1;
   3ca08:	00800044 	movi	r2,1
}
   3ca0c:	e037883a 	mov	sp,fp
   3ca10:	dfc00117 	ldw	ra,4(sp)
   3ca14:	df000017 	ldw	fp,0(sp)
   3ca18:	dec00204 	addi	sp,sp,8
   3ca1c:	f800283a 	ret

0003ca20 <secp256k1_ec_pubkey_combine>:

int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *pubnonce, const secp256k1_pubkey * const *pubnonces, size_t n) {
   3ca20:	deffbb04 	addi	sp,sp,-276
   3ca24:	dfc04415 	stw	ra,272(sp)
   3ca28:	df004315 	stw	fp,268(sp)
   3ca2c:	df004304 	addi	fp,sp,268
   3ca30:	e13ffc15 	stw	r4,-16(fp)
   3ca34:	e17ffd15 	stw	r5,-12(fp)
   3ca38:	e1bffe15 	stw	r6,-8(fp)
   3ca3c:	e1ffff15 	stw	r7,-4(fp)
    size_t i;
    secp256k1_gej Qj;
    secp256k1_ge Q;

    ARG_CHECK(pubnonce != NULL);
   3ca40:	e0bffd17 	ldw	r2,-12(fp)
   3ca44:	1005003a 	cmpeq	r2,r2,zero
   3ca48:	10803fcc 	andi	r2,r2,255
   3ca4c:	10000826 	beq	r2,zero,3ca70 <secp256k1_ec_pubkey_combine+0x50>
   3ca50:	e0bffc17 	ldw	r2,-16(fp)
   3ca54:	10802f04 	addi	r2,r2,188
   3ca58:	01400174 	movhi	r5,5
   3ca5c:	29592104 	addi	r5,r5,25732
   3ca60:	1009883a 	mov	r4,r2
   3ca64:	000de200 	call	de20 <secp256k1_callback_call>
   3ca68:	0005883a 	mov	r2,zero
   3ca6c:	00004a06 	br	3cb98 <secp256k1_ec_pubkey_combine+0x178>
    memset(pubnonce, 0, sizeof(*pubnonce));
   3ca70:	01801004 	movi	r6,64
   3ca74:	000b883a 	mov	r5,zero
   3ca78:	e13ffd17 	ldw	r4,-12(fp)
   3ca7c:	00464200 	call	46420 <memset>
    ARG_CHECK(n >= 1);
   3ca80:	e0bfff17 	ldw	r2,-4(fp)
   3ca84:	1005003a 	cmpeq	r2,r2,zero
   3ca88:	10803fcc 	andi	r2,r2,255
   3ca8c:	10000826 	beq	r2,zero,3cab0 <secp256k1_ec_pubkey_combine+0x90>
   3ca90:	e0bffc17 	ldw	r2,-16(fp)
   3ca94:	10802f04 	addi	r2,r2,188
   3ca98:	01400174 	movhi	r5,5
   3ca9c:	29592604 	addi	r5,r5,25752
   3caa0:	1009883a 	mov	r4,r2
   3caa4:	000de200 	call	de20 <secp256k1_callback_call>
   3caa8:	0005883a 	mov	r2,zero
   3caac:	00003a06 	br	3cb98 <secp256k1_ec_pubkey_combine+0x178>
    ARG_CHECK(pubnonces != NULL);
   3cab0:	e0bffe17 	ldw	r2,-8(fp)
   3cab4:	1005003a 	cmpeq	r2,r2,zero
   3cab8:	10803fcc 	andi	r2,r2,255
   3cabc:	10000826 	beq	r2,zero,3cae0 <secp256k1_ec_pubkey_combine+0xc0>
   3cac0:	e0bffc17 	ldw	r2,-16(fp)
   3cac4:	10802f04 	addi	r2,r2,188
   3cac8:	01400174 	movhi	r5,5
   3cacc:	29592804 	addi	r5,r5,25760
   3cad0:	1009883a 	mov	r4,r2
   3cad4:	000de200 	call	de20 <secp256k1_callback_call>
   3cad8:	0005883a 	mov	r2,zero
   3cadc:	00002e06 	br	3cb98 <secp256k1_ec_pubkey_combine+0x178>

    secp256k1_gej_set_infinity(&Qj);
   3cae0:	e0bfbe04 	addi	r2,fp,-264
   3cae4:	1009883a 	mov	r4,r2
   3cae8:	00228cc0 	call	228cc <secp256k1_gej_set_infinity>

    for (i = 0; i < n; i++) {
   3caec:	e03fbd15 	stw	zero,-268(fp)
   3caf0:	00001606 	br	3cb4c <secp256k1_ec_pubkey_combine+0x12c>
        secp256k1_pubkey_load(ctx, &Q, pubnonces[i]);
   3caf4:	e0bfbd17 	ldw	r2,-268(fp)
   3caf8:	1085883a 	add	r2,r2,r2
   3cafc:	1085883a 	add	r2,r2,r2
   3cb00:	1007883a 	mov	r3,r2
   3cb04:	e0bffe17 	ldw	r2,-8(fp)
   3cb08:	10c5883a 	add	r2,r2,r3
   3cb0c:	10c00017 	ldw	r3,0(r2)
   3cb10:	e0bfe304 	addi	r2,fp,-116
   3cb14:	180d883a 	mov	r6,r3
   3cb18:	100b883a 	mov	r5,r2
   3cb1c:	e13ffc17 	ldw	r4,-16(fp)
   3cb20:	003af9c0 	call	3af9c <secp256k1_pubkey_load>
        secp256k1_gej_add_ge(&Qj, &Qj, &Q);
   3cb24:	e13fe304 	addi	r4,fp,-116
   3cb28:	e0ffbe04 	addi	r3,fp,-264
   3cb2c:	e0bfbe04 	addi	r2,fp,-264
   3cb30:	200d883a 	mov	r6,r4
   3cb34:	180b883a 	mov	r5,r3
   3cb38:	1009883a 	mov	r4,r2
   3cb3c:	00244140 	call	24414 <secp256k1_gej_add_ge>
    ARG_CHECK(n >= 1);
    ARG_CHECK(pubnonces != NULL);

    secp256k1_gej_set_infinity(&Qj);

    for (i = 0; i < n; i++) {
   3cb40:	e0bfbd17 	ldw	r2,-268(fp)
   3cb44:	10800044 	addi	r2,r2,1
   3cb48:	e0bfbd15 	stw	r2,-268(fp)
   3cb4c:	e0ffbd17 	ldw	r3,-268(fp)
   3cb50:	e0bfff17 	ldw	r2,-4(fp)
   3cb54:	18bfe736 	bltu	r3,r2,3caf4 <__alt_mem_epcs_flash_controller+0xfe033af4>
        secp256k1_pubkey_load(ctx, &Q, pubnonces[i]);
        secp256k1_gej_add_ge(&Qj, &Qj, &Q);
    }
    if (secp256k1_gej_is_infinity(&Qj)) {
   3cb58:	e0bfbe04 	addi	r2,fp,-264
   3cb5c:	1009883a 	mov	r4,r2
   3cb60:	0022f600 	call	22f60 <secp256k1_gej_is_infinity>
   3cb64:	10000226 	beq	r2,zero,3cb70 <secp256k1_ec_pubkey_combine+0x150>
        return 0;
   3cb68:	0005883a 	mov	r2,zero
   3cb6c:	00000a06 	br	3cb98 <secp256k1_ec_pubkey_combine+0x178>
    }
    secp256k1_ge_set_gej(&Q, &Qj);
   3cb70:	e0ffbe04 	addi	r3,fp,-264
   3cb74:	e0bfe304 	addi	r2,fp,-116
   3cb78:	180b883a 	mov	r5,r3
   3cb7c:	1009883a 	mov	r4,r2
   3cb80:	0021e940 	call	21e94 <secp256k1_ge_set_gej>
    secp256k1_pubkey_save(pubnonce, &Q);
   3cb84:	e0bfe304 	addi	r2,fp,-116
   3cb88:	100b883a 	mov	r5,r2
   3cb8c:	e13ffd17 	ldw	r4,-12(fp)
   3cb90:	003b0280 	call	3b028 <secp256k1_pubkey_save>
    return 1;
   3cb94:	00800044 	movi	r2,1
}
   3cb98:	e037883a 	mov	sp,fp
   3cb9c:	dfc00117 	ldw	ra,4(sp)
   3cba0:	df000017 	ldw	fp,0(sp)
   3cba4:	dec00204 	addi	sp,sp,8
   3cba8:	f800283a 	ret

0003cbac <secp256k1_ecdsa_recoverable_signature_load>:
#ifndef _SECP256K1_MODULE_RECOVERY_MAIN_
#define _SECP256K1_MODULE_RECOVERY_MAIN_

#include "../../../include/secp256k1_recovery.h"

static void secp256k1_ecdsa_recoverable_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, int* recid, const secp256k1_ecdsa_recoverable_signature* sig) {
   3cbac:	defffa04 	addi	sp,sp,-24
   3cbb0:	dfc00515 	stw	ra,20(sp)
   3cbb4:	df000415 	stw	fp,16(sp)
   3cbb8:	df000404 	addi	fp,sp,16
   3cbbc:	e13ffc15 	stw	r4,-16(fp)
   3cbc0:	e17ffd15 	stw	r5,-12(fp)
   3cbc4:	e1bffe15 	stw	r6,-8(fp)
   3cbc8:	e1ffff15 	stw	r7,-4(fp)
    (void)ctx;
    if (sizeof(secp256k1_scalar) == 32) {
        /* When the secp256k1_scalar type is exactly 32 byte, use its
         * representation inside secp256k1_ecdsa_signature, as conversion is very fast.
         * Note that secp256k1_ecdsa_signature_save must use the same representation. */
        memcpy(r, &sig->data[0], 32);
   3cbcc:	e0800217 	ldw	r2,8(fp)
   3cbd0:	01800804 	movi	r6,32
   3cbd4:	100b883a 	mov	r5,r2
   3cbd8:	e13ffd17 	ldw	r4,-12(fp)
   3cbdc:	00463980 	call	46398 <memcpy>
        memcpy(s, &sig->data[32], 32);
   3cbe0:	e0800217 	ldw	r2,8(fp)
   3cbe4:	10800804 	addi	r2,r2,32
   3cbe8:	01800804 	movi	r6,32
   3cbec:	100b883a 	mov	r5,r2
   3cbf0:	e13ffe17 	ldw	r4,-8(fp)
   3cbf4:	00463980 	call	46398 <memcpy>
    } else {
        secp256k1_scalar_set_b32(r, &sig->data[0], NULL);
        secp256k1_scalar_set_b32(s, &sig->data[32], NULL);
    }
    *recid = sig->data[64];
   3cbf8:	e0800217 	ldw	r2,8(fp)
   3cbfc:	10801003 	ldbu	r2,64(r2)
   3cc00:	10c03fcc 	andi	r3,r2,255
   3cc04:	e0bfff17 	ldw	r2,-4(fp)
   3cc08:	10c00015 	stw	r3,0(r2)
}
   3cc0c:	0001883a 	nop
   3cc10:	e037883a 	mov	sp,fp
   3cc14:	dfc00117 	ldw	ra,4(sp)
   3cc18:	df000017 	ldw	fp,0(sp)
   3cc1c:	dec00204 	addi	sp,sp,8
   3cc20:	f800283a 	ret

0003cc24 <secp256k1_ecdsa_recoverable_signature_save>:

static void secp256k1_ecdsa_recoverable_signature_save(secp256k1_ecdsa_recoverable_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s, int recid) {
   3cc24:	defffa04 	addi	sp,sp,-24
   3cc28:	dfc00515 	stw	ra,20(sp)
   3cc2c:	df000415 	stw	fp,16(sp)
   3cc30:	df000404 	addi	fp,sp,16
   3cc34:	e13ffc15 	stw	r4,-16(fp)
   3cc38:	e17ffd15 	stw	r5,-12(fp)
   3cc3c:	e1bffe15 	stw	r6,-8(fp)
   3cc40:	e1ffff15 	stw	r7,-4(fp)
    if (sizeof(secp256k1_scalar) == 32) {
        memcpy(&sig->data[0], r, 32);
   3cc44:	e0bffc17 	ldw	r2,-16(fp)
   3cc48:	01800804 	movi	r6,32
   3cc4c:	e17ffd17 	ldw	r5,-12(fp)
   3cc50:	1009883a 	mov	r4,r2
   3cc54:	00463980 	call	46398 <memcpy>
        memcpy(&sig->data[32], s, 32);
   3cc58:	e0bffc17 	ldw	r2,-16(fp)
   3cc5c:	10800804 	addi	r2,r2,32
   3cc60:	01800804 	movi	r6,32
   3cc64:	e17ffe17 	ldw	r5,-8(fp)
   3cc68:	1009883a 	mov	r4,r2
   3cc6c:	00463980 	call	46398 <memcpy>
    } else {
        secp256k1_scalar_get_b32(&sig->data[0], r);
        secp256k1_scalar_get_b32(&sig->data[32], s);
    }
    sig->data[64] = recid;
   3cc70:	e0bfff17 	ldw	r2,-4(fp)
   3cc74:	1007883a 	mov	r3,r2
   3cc78:	e0bffc17 	ldw	r2,-16(fp)
   3cc7c:	10c01005 	stb	r3,64(r2)
}
   3cc80:	0001883a 	nop
   3cc84:	e037883a 	mov	sp,fp
   3cc88:	dfc00117 	ldw	ra,4(sp)
   3cc8c:	df000017 	ldw	fp,0(sp)
   3cc90:	dec00204 	addi	sp,sp,8
   3cc94:	f800283a 	ret

0003cc98 <secp256k1_ecdsa_recoverable_signature_parse_compact>:

int secp256k1_ecdsa_recoverable_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature* sig, const unsigned char *input64, int recid) {
   3cc98:	deffe804 	addi	sp,sp,-96
   3cc9c:	dfc01715 	stw	ra,92(sp)
   3cca0:	df001615 	stw	fp,88(sp)
   3cca4:	df001604 	addi	fp,sp,88
   3cca8:	e13ffc15 	stw	r4,-16(fp)
   3ccac:	e17ffd15 	stw	r5,-12(fp)
   3ccb0:	e1bffe15 	stw	r6,-8(fp)
   3ccb4:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;
    int ret = 1;
   3ccb8:	00800044 	movi	r2,1
   3ccbc:	e0bfea15 	stw	r2,-88(fp)
    int overflow = 0;
   3ccc0:	e03ffb15 	stw	zero,-20(fp)

    (void)ctx;
    ARG_CHECK(sig != NULL);
   3ccc4:	e0bffd17 	ldw	r2,-12(fp)
   3ccc8:	1005003a 	cmpeq	r2,r2,zero
   3cccc:	10803fcc 	andi	r2,r2,255
   3ccd0:	10000826 	beq	r2,zero,3ccf4 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x5c>
   3ccd4:	e0bffc17 	ldw	r2,-16(fp)
   3ccd8:	10802f04 	addi	r2,r2,188
   3ccdc:	01400174 	movhi	r5,5
   3cce0:	2958e404 	addi	r5,r5,25488
   3cce4:	1009883a 	mov	r4,r2
   3cce8:	000de200 	call	de20 <secp256k1_callback_call>
   3ccec:	0005883a 	mov	r2,zero
   3ccf0:	00004506 	br	3ce08 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x170>
    ARG_CHECK(input64 != NULL);
   3ccf4:	e0bffe17 	ldw	r2,-8(fp)
   3ccf8:	1005003a 	cmpeq	r2,r2,zero
   3ccfc:	10803fcc 	andi	r2,r2,255
   3cd00:	10000826 	beq	r2,zero,3cd24 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x8c>
   3cd04:	e0bffc17 	ldw	r2,-16(fp)
   3cd08:	10802f04 	addi	r2,r2,188
   3cd0c:	01400174 	movhi	r5,5
   3cd10:	2958e704 	addi	r5,r5,25500
   3cd14:	1009883a 	mov	r4,r2
   3cd18:	000de200 	call	de20 <secp256k1_callback_call>
   3cd1c:	0005883a 	mov	r2,zero
   3cd20:	00003906 	br	3ce08 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x170>
    ARG_CHECK(recid >= 0 && recid <= 3);
   3cd24:	e0bfff17 	ldw	r2,-4(fp)
   3cd28:	1004d7fa 	srli	r2,r2,31
   3cd2c:	10803fcc 	andi	r2,r2,255
   3cd30:	1000041e 	bne	r2,zero,3cd44 <secp256k1_ecdsa_recoverable_signature_parse_compact+0xac>
   3cd34:	e0bfff17 	ldw	r2,-4(fp)
   3cd38:	10800108 	cmpgei	r2,r2,4
   3cd3c:	10803fcc 	andi	r2,r2,255
   3cd40:	10000826 	beq	r2,zero,3cd64 <secp256k1_ecdsa_recoverable_signature_parse_compact+0xcc>
   3cd44:	e0bffc17 	ldw	r2,-16(fp)
   3cd48:	10802f04 	addi	r2,r2,188
   3cd4c:	01400174 	movhi	r5,5
   3cd50:	29592d04 	addi	r5,r5,25780
   3cd54:	1009883a 	mov	r4,r2
   3cd58:	000de200 	call	de20 <secp256k1_callback_call>
   3cd5c:	0005883a 	mov	r2,zero
   3cd60:	00002906 	br	3ce08 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x170>

    secp256k1_scalar_set_b32(&r, &input64[0], &overflow);
   3cd64:	e0fffb04 	addi	r3,fp,-20
   3cd68:	e0bfeb04 	addi	r2,fp,-84
   3cd6c:	180d883a 	mov	r6,r3
   3cd70:	e17ffe17 	ldw	r5,-8(fp)
   3cd74:	1009883a 	mov	r4,r2
   3cd78:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    ret &= !overflow;
   3cd7c:	e0bffb17 	ldw	r2,-20(fp)
   3cd80:	1005003a 	cmpeq	r2,r2,zero
   3cd84:	10803fcc 	andi	r2,r2,255
   3cd88:	e0ffea17 	ldw	r3,-88(fp)
   3cd8c:	1884703a 	and	r2,r3,r2
   3cd90:	e0bfea15 	stw	r2,-88(fp)
    secp256k1_scalar_set_b32(&s, &input64[32], &overflow);
   3cd94:	e0bffe17 	ldw	r2,-8(fp)
   3cd98:	10c00804 	addi	r3,r2,32
   3cd9c:	e13ffb04 	addi	r4,fp,-20
   3cda0:	e0bff304 	addi	r2,fp,-52
   3cda4:	200d883a 	mov	r6,r4
   3cda8:	180b883a 	mov	r5,r3
   3cdac:	1009883a 	mov	r4,r2
   3cdb0:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    ret &= !overflow;
   3cdb4:	e0bffb17 	ldw	r2,-20(fp)
   3cdb8:	1005003a 	cmpeq	r2,r2,zero
   3cdbc:	10803fcc 	andi	r2,r2,255
   3cdc0:	e0ffea17 	ldw	r3,-88(fp)
   3cdc4:	1884703a 	and	r2,r3,r2
   3cdc8:	e0bfea15 	stw	r2,-88(fp)
    if (ret) {
   3cdcc:	e0bfea17 	ldw	r2,-88(fp)
   3cdd0:	10000826 	beq	r2,zero,3cdf4 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x15c>
        secp256k1_ecdsa_recoverable_signature_save(sig, &r, &s, recid);
   3cdd4:	e0fff304 	addi	r3,fp,-52
   3cdd8:	e0bfeb04 	addi	r2,fp,-84
   3cddc:	e1ffff17 	ldw	r7,-4(fp)
   3cde0:	180d883a 	mov	r6,r3
   3cde4:	100b883a 	mov	r5,r2
   3cde8:	e13ffd17 	ldw	r4,-12(fp)
   3cdec:	003cc240 	call	3cc24 <secp256k1_ecdsa_recoverable_signature_save>
   3cdf0:	00000406 	br	3ce04 <secp256k1_ecdsa_recoverable_signature_parse_compact+0x16c>
    } else {
        memset(sig, 0, sizeof(*sig));
   3cdf4:	01801044 	movi	r6,65
   3cdf8:	000b883a 	mov	r5,zero
   3cdfc:	e13ffd17 	ldw	r4,-12(fp)
   3ce00:	00464200 	call	46420 <memset>
    }
    return ret;
   3ce04:	e0bfea17 	ldw	r2,-88(fp)
}
   3ce08:	e037883a 	mov	sp,fp
   3ce0c:	dfc00117 	ldw	ra,4(sp)
   3ce10:	df000017 	ldw	fp,0(sp)
   3ce14:	dec00204 	addi	sp,sp,8
   3ce18:	f800283a 	ret

0003ce1c <secp256k1_ecdsa_recoverable_signature_serialize_compact>:

int secp256k1_ecdsa_recoverable_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, int *recid, const secp256k1_ecdsa_recoverable_signature* sig) {
   3ce1c:	deffe904 	addi	sp,sp,-92
   3ce20:	dfc01615 	stw	ra,88(sp)
   3ce24:	df001515 	stw	fp,84(sp)
   3ce28:	df001504 	addi	fp,sp,84
   3ce2c:	e13ffc15 	stw	r4,-16(fp)
   3ce30:	e17ffd15 	stw	r5,-12(fp)
   3ce34:	e1bffe15 	stw	r6,-8(fp)
   3ce38:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;

    (void)ctx;
    ARG_CHECK(output64 != NULL);
   3ce3c:	e0bffd17 	ldw	r2,-12(fp)
   3ce40:	1005003a 	cmpeq	r2,r2,zero
   3ce44:	10803fcc 	andi	r2,r2,255
   3ce48:	10000826 	beq	r2,zero,3ce6c <secp256k1_ecdsa_recoverable_signature_serialize_compact+0x50>
   3ce4c:	e0bffc17 	ldw	r2,-16(fp)
   3ce50:	10802f04 	addi	r2,r2,188
   3ce54:	01400174 	movhi	r5,5
   3ce58:	2958eb04 	addi	r5,r5,25516
   3ce5c:	1009883a 	mov	r4,r2
   3ce60:	000de200 	call	de20 <secp256k1_callback_call>
   3ce64:	0005883a 	mov	r2,zero
   3ce68:	00002a06 	br	3cf14 <secp256k1_ecdsa_recoverable_signature_serialize_compact+0xf8>
    ARG_CHECK(sig != NULL);
   3ce6c:	e0bfff17 	ldw	r2,-4(fp)
   3ce70:	1005003a 	cmpeq	r2,r2,zero
   3ce74:	10803fcc 	andi	r2,r2,255
   3ce78:	10000826 	beq	r2,zero,3ce9c <secp256k1_ecdsa_recoverable_signature_serialize_compact+0x80>
   3ce7c:	e0bffc17 	ldw	r2,-16(fp)
   3ce80:	10802f04 	addi	r2,r2,188
   3ce84:	01400174 	movhi	r5,5
   3ce88:	2958e404 	addi	r5,r5,25488
   3ce8c:	1009883a 	mov	r4,r2
   3ce90:	000de200 	call	de20 <secp256k1_callback_call>
   3ce94:	0005883a 	mov	r2,zero
   3ce98:	00001e06 	br	3cf14 <secp256k1_ecdsa_recoverable_signature_serialize_compact+0xf8>
    ARG_CHECK(recid != NULL);
   3ce9c:	e0bffe17 	ldw	r2,-8(fp)
   3cea0:	1005003a 	cmpeq	r2,r2,zero
   3cea4:	10803fcc 	andi	r2,r2,255
   3cea8:	10000826 	beq	r2,zero,3cecc <secp256k1_ecdsa_recoverable_signature_serialize_compact+0xb0>
   3ceac:	e0bffc17 	ldw	r2,-16(fp)
   3ceb0:	10802f04 	addi	r2,r2,188
   3ceb4:	01400174 	movhi	r5,5
   3ceb8:	29593404 	addi	r5,r5,25808
   3cebc:	1009883a 	mov	r4,r2
   3cec0:	000de200 	call	de20 <secp256k1_callback_call>
   3cec4:	0005883a 	mov	r2,zero
   3cec8:	00001206 	br	3cf14 <secp256k1_ecdsa_recoverable_signature_serialize_compact+0xf8>

    secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, recid, sig);
   3cecc:	e0fff404 	addi	r3,fp,-48
   3ced0:	e0bfff17 	ldw	r2,-4(fp)
   3ced4:	d8800015 	stw	r2,0(sp)
   3ced8:	e1fffe17 	ldw	r7,-8(fp)
   3cedc:	180d883a 	mov	r6,r3
   3cee0:	e17fec04 	addi	r5,fp,-80
   3cee4:	e13ffc17 	ldw	r4,-16(fp)
   3cee8:	003cbac0 	call	3cbac <secp256k1_ecdsa_recoverable_signature_load>
    secp256k1_scalar_get_b32(&output64[0], &r);
   3ceec:	e17fec04 	addi	r5,fp,-80
   3cef0:	e13ffd17 	ldw	r4,-12(fp)
   3cef4:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    secp256k1_scalar_get_b32(&output64[32], &s);
   3cef8:	e0bffd17 	ldw	r2,-12(fp)
   3cefc:	10800804 	addi	r2,r2,32
   3cf00:	e0fff404 	addi	r3,fp,-48
   3cf04:	180b883a 	mov	r5,r3
   3cf08:	1009883a 	mov	r4,r2
   3cf0c:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    return 1;
   3cf10:	00800044 	movi	r2,1
}
   3cf14:	e037883a 	mov	sp,fp
   3cf18:	dfc00117 	ldw	ra,4(sp)
   3cf1c:	df000017 	ldw	fp,0(sp)
   3cf20:	dec00204 	addi	sp,sp,8
   3cf24:	f800283a 	ret

0003cf28 <secp256k1_ecdsa_recoverable_signature_convert>:

int secp256k1_ecdsa_recoverable_signature_convert(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const secp256k1_ecdsa_recoverable_signature* sigin) {
   3cf28:	deffe904 	addi	sp,sp,-92
   3cf2c:	dfc01615 	stw	ra,88(sp)
   3cf30:	df001515 	stw	fp,84(sp)
   3cf34:	df001504 	addi	fp,sp,84
   3cf38:	e13ffd15 	stw	r4,-12(fp)
   3cf3c:	e17ffe15 	stw	r5,-8(fp)
   3cf40:	e1bfff15 	stw	r6,-4(fp)
    secp256k1_scalar r, s;
    int recid;

    (void)ctx;
    ARG_CHECK(sig != NULL);
   3cf44:	e0bffe17 	ldw	r2,-8(fp)
   3cf48:	1005003a 	cmpeq	r2,r2,zero
   3cf4c:	10803fcc 	andi	r2,r2,255
   3cf50:	10000826 	beq	r2,zero,3cf74 <secp256k1_ecdsa_recoverable_signature_convert+0x4c>
   3cf54:	e0bffd17 	ldw	r2,-12(fp)
   3cf58:	10802f04 	addi	r2,r2,188
   3cf5c:	01400174 	movhi	r5,5
   3cf60:	2958e404 	addi	r5,r5,25488
   3cf64:	1009883a 	mov	r4,r2
   3cf68:	000de200 	call	de20 <secp256k1_callback_call>
   3cf6c:	0005883a 	mov	r2,zero
   3cf70:	00001b06 	br	3cfe0 <secp256k1_ecdsa_recoverable_signature_convert+0xb8>
    ARG_CHECK(sigin != NULL);
   3cf74:	e0bfff17 	ldw	r2,-4(fp)
   3cf78:	1005003a 	cmpeq	r2,r2,zero
   3cf7c:	10803fcc 	andi	r2,r2,255
   3cf80:	10000826 	beq	r2,zero,3cfa4 <secp256k1_ecdsa_recoverable_signature_convert+0x7c>
   3cf84:	e0bffd17 	ldw	r2,-12(fp)
   3cf88:	10802f04 	addi	r2,r2,188
   3cf8c:	01400174 	movhi	r5,5
   3cf90:	2958f004 	addi	r5,r5,25536
   3cf94:	1009883a 	mov	r4,r2
   3cf98:	000de200 	call	de20 <secp256k1_callback_call>
   3cf9c:	0005883a 	mov	r2,zero
   3cfa0:	00000f06 	br	3cfe0 <secp256k1_ecdsa_recoverable_signature_convert+0xb8>

    secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, sigin);
   3cfa4:	e13ffc04 	addi	r4,fp,-16
   3cfa8:	e0fff404 	addi	r3,fp,-48
   3cfac:	e0bfff17 	ldw	r2,-4(fp)
   3cfb0:	d8800015 	stw	r2,0(sp)
   3cfb4:	200f883a 	mov	r7,r4
   3cfb8:	180d883a 	mov	r6,r3
   3cfbc:	e17fec04 	addi	r5,fp,-80
   3cfc0:	e13ffd17 	ldw	r4,-12(fp)
   3cfc4:	003cbac0 	call	3cbac <secp256k1_ecdsa_recoverable_signature_load>
    secp256k1_ecdsa_signature_save(sig, &r, &s);
   3cfc8:	e0bff404 	addi	r2,fp,-48
   3cfcc:	100d883a 	mov	r6,r2
   3cfd0:	e17fec04 	addi	r5,fp,-80
   3cfd4:	e13ffe17 	ldw	r4,-8(fp)
   3cfd8:	003b4040 	call	3b404 <secp256k1_ecdsa_signature_save>
    return 1;
   3cfdc:	00800044 	movi	r2,1
}
   3cfe0:	e037883a 	mov	sp,fp
   3cfe4:	dfc00117 	ldw	ra,4(sp)
   3cfe8:	df000017 	ldw	fp,0(sp)
   3cfec:	dec00204 	addi	sp,sp,8
   3cff0:	f800283a 	ret

0003cff4 <secp256k1_ecdsa_sig_recover>:

static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar* sigs, secp256k1_ge *pubkey, const secp256k1_scalar *message, int recid) {
   3cff4:	deff6904 	addi	sp,sp,-604
   3cff8:	dfc09615 	stw	ra,600(sp)
   3cffc:	df009515 	stw	fp,596(sp)
   3d000:	df009504 	addi	fp,sp,596
   3d004:	e13ffc15 	stw	r4,-16(fp)
   3d008:	e17ffd15 	stw	r5,-12(fp)
   3d00c:	e1bffe15 	stw	r6,-8(fp)
   3d010:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_gej xj;
    secp256k1_scalar rn, u1, u2;
    secp256k1_gej qj;
    int r;

    if (secp256k1_scalar_is_zero(sigr) || secp256k1_scalar_is_zero(sigs)) {
   3d014:	e13ffd17 	ldw	r4,-12(fp)
   3d018:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3d01c:	1000031e 	bne	r2,zero,3d02c <secp256k1_ecdsa_sig_recover+0x38>
   3d020:	e13ffe17 	ldw	r4,-8(fp)
   3d024:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3d028:	10000226 	beq	r2,zero,3d034 <secp256k1_ecdsa_sig_recover+0x40>
        return 0;
   3d02c:	0005883a 	mov	r2,zero
   3d030:	00006306 	br	3d1c0 <secp256k1_ecdsa_sig_recover+0x1cc>
    }

    secp256k1_scalar_get_b32(brx, sigr);
   3d034:	e0bf6d04 	addi	r2,fp,-588
   3d038:	e17ffd17 	ldw	r5,-12(fp)
   3d03c:	1009883a 	mov	r4,r2
   3d040:	00266ac0 	call	266ac <secp256k1_scalar_get_b32>
    r = secp256k1_fe_set_b32(&fx, brx);
   3d044:	e0ff6d04 	addi	r3,fp,-588
   3d048:	e0bf7504 	addi	r2,fp,-556
   3d04c:	180b883a 	mov	r5,r3
   3d050:	1009883a 	mov	r4,r2
   3d054:	00156ec0 	call	156ec <secp256k1_fe_set_b32>
   3d058:	e0bf6c15 	stw	r2,-592(fp)
    (void)r;
    VERIFY_CHECK(r); /* brx comes from a scalar, so is less than the order; certainly less than p */
   3d05c:	e0bf6c17 	ldw	r2,-592(fp)
   3d060:	1005003a 	cmpeq	r2,r2,zero
   3d064:	10803fcc 	andi	r2,r2,255
   3d068:	10000d26 	beq	r2,zero,3d0a0 <secp256k1_ecdsa_sig_recover+0xac>
   3d06c:	d0a01617 	ldw	r2,-32680(gp)
   3d070:	10c00317 	ldw	r3,12(r2)
   3d074:	00800174 	movhi	r2,5
   3d078:	10985b04 	addi	r2,r2,24940
   3d07c:	d8800015 	stw	r2,0(sp)
   3d080:	01c019c4 	movi	r7,103
   3d084:	01800174 	movhi	r6,5
   3d088:	31993804 	addi	r6,r6,25824
   3d08c:	01400174 	movhi	r5,5
   3d090:	2951e804 	addi	r5,r5,18336
   3d094:	1809883a 	mov	r4,r3
   3d098:	00461000 	call	46100 <fprintf>
   3d09c:	0045fd40 	call	45fd4 <abort>
    if (recid & 2) {
   3d0a0:	e0800317 	ldw	r2,12(fp)
   3d0a4:	1080008c 	andi	r2,r2,2
   3d0a8:	10000d26 	beq	r2,zero,3d0e0 <secp256k1_ecdsa_sig_recover+0xec>
        if (secp256k1_fe_cmp_var(&fx, &secp256k1_ecdsa_const_p_minus_order) >= 0) {
   3d0ac:	e0bf7504 	addi	r2,fp,-556
   3d0b0:	01400174 	movhi	r5,5
   3d0b4:	29586e04 	addi	r5,r5,25016
   3d0b8:	1009883a 	mov	r4,r2
   3d0bc:	00155840 	call	15584 <secp256k1_fe_cmp_var>
   3d0c0:	10000216 	blt	r2,zero,3d0cc <secp256k1_ecdsa_sig_recover+0xd8>
            return 0;
   3d0c4:	0005883a 	mov	r2,zero
   3d0c8:	00003d06 	br	3d1c0 <secp256k1_ecdsa_sig_recover+0x1cc>
        }
        secp256k1_fe_add(&fx, &secp256k1_ecdsa_const_order_as_fe);
   3d0cc:	e0bf7504 	addi	r2,fp,-556
   3d0d0:	01400174 	movhi	r5,5
   3d0d4:	29586204 	addi	r5,r5,24968
   3d0d8:	1009883a 	mov	r4,r2
   3d0dc:	0015ef80 	call	15ef8 <secp256k1_fe_add>
    }
    if (!secp256k1_ge_set_xo_var(&x, &fx, recid & 1)) {
   3d0e0:	e0800317 	ldw	r2,12(fp)
   3d0e4:	1100004c 	andi	r4,r2,1
   3d0e8:	e0ff7504 	addi	r3,fp,-556
   3d0ec:	e0bf8104 	addi	r2,fp,-508
   3d0f0:	200d883a 	mov	r6,r4
   3d0f4:	180b883a 	mov	r5,r3
   3d0f8:	1009883a 	mov	r4,r2
   3d0fc:	0022ae40 	call	22ae4 <secp256k1_ge_set_xo_var>
   3d100:	1000021e 	bne	r2,zero,3d10c <secp256k1_ecdsa_sig_recover+0x118>
        return 0;
   3d104:	0005883a 	mov	r2,zero
   3d108:	00002d06 	br	3d1c0 <secp256k1_ecdsa_sig_recover+0x1cc>
    }
    secp256k1_gej_set_ge(&xj, &x);
   3d10c:	e0ff8104 	addi	r3,fp,-508
   3d110:	e0bf9a04 	addi	r2,fp,-408
   3d114:	180b883a 	mov	r5,r3
   3d118:	1009883a 	mov	r4,r2
   3d11c:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
    secp256k1_scalar_inverse_var(&rn, sigr);
   3d120:	e0bfbf04 	addi	r2,fp,-260
   3d124:	e17ffd17 	ldw	r5,-12(fp)
   3d128:	1009883a 	mov	r4,r2
   3d12c:	00370540 	call	37054 <secp256k1_scalar_inverse_var>
    secp256k1_scalar_mul(&u1, &rn, message);
   3d130:	e0ffbf04 	addi	r3,fp,-260
   3d134:	e0bfc704 	addi	r2,fp,-228
   3d138:	e1800217 	ldw	r6,8(fp)
   3d13c:	180b883a 	mov	r5,r3
   3d140:	1009883a 	mov	r4,r2
   3d144:	003621c0 	call	3621c <secp256k1_scalar_mul>
    secp256k1_scalar_negate(&u1, &u1);
   3d148:	e0ffc704 	addi	r3,fp,-228
   3d14c:	e0bfc704 	addi	r2,fp,-228
   3d150:	180b883a 	mov	r5,r3
   3d154:	1009883a 	mov	r4,r2
   3d158:	0026a380 	call	26a38 <secp256k1_scalar_negate>
    secp256k1_scalar_mul(&u2, &rn, sigs);
   3d15c:	e0ffbf04 	addi	r3,fp,-260
   3d160:	e0bfcf04 	addi	r2,fp,-196
   3d164:	e1bffe17 	ldw	r6,-8(fp)
   3d168:	180b883a 	mov	r5,r3
   3d16c:	1009883a 	mov	r4,r2
   3d170:	003621c0 	call	3621c <secp256k1_scalar_mul>
    secp256k1_ecmult(ctx, &qj, &xj, &u2, &u1);
   3d174:	e17fcf04 	addi	r5,fp,-196
   3d178:	e13f9a04 	addi	r4,fp,-408
   3d17c:	e0ffd704 	addi	r3,fp,-164
   3d180:	e0bfc704 	addi	r2,fp,-228
   3d184:	d8800015 	stw	r2,0(sp)
   3d188:	280f883a 	mov	r7,r5
   3d18c:	200d883a 	mov	r6,r4
   3d190:	180b883a 	mov	r5,r3
   3d194:	e13ffc17 	ldw	r4,-16(fp)
   3d198:	0037bcc0 	call	37bcc <secp256k1_ecmult>
    secp256k1_ge_set_gej_var(pubkey, &qj);
   3d19c:	e0bfd704 	addi	r2,fp,-164
   3d1a0:	100b883a 	mov	r5,r2
   3d1a4:	e13fff17 	ldw	r4,-4(fp)
   3d1a8:	00220400 	call	22040 <secp256k1_ge_set_gej_var>
    return !secp256k1_gej_is_infinity(&qj);
   3d1ac:	e0bfd704 	addi	r2,fp,-164
   3d1b0:	1009883a 	mov	r4,r2
   3d1b4:	0022f600 	call	22f60 <secp256k1_gej_is_infinity>
   3d1b8:	1005003a 	cmpeq	r2,r2,zero
   3d1bc:	10803fcc 	andi	r2,r2,255
}
   3d1c0:	e037883a 	mov	sp,fp
   3d1c4:	dfc00117 	ldw	ra,4(sp)
   3d1c8:	df000017 	ldw	fp,0(sp)
   3d1cc:	dec00204 	addi	sp,sp,8
   3d1d0:	f800283a 	ret

0003d1d4 <secp256k1_ecdsa_sign_recoverable>:

int secp256k1_ecdsa_sign_recoverable(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {
   3d1d4:	deffc304 	addi	sp,sp,-244
   3d1d8:	dfc03c15 	stw	ra,240(sp)
   3d1dc:	df003b15 	stw	fp,236(sp)
   3d1e0:	df003b04 	addi	fp,sp,236
   3d1e4:	e13ffc15 	stw	r4,-16(fp)
   3d1e8:	e17ffd15 	stw	r5,-12(fp)
   3d1ec:	e1bffe15 	stw	r6,-8(fp)
   3d1f0:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_scalar r, s;
    secp256k1_scalar sec, non, msg;
    int recid;
    int ret = 0;
   3d1f4:	e03fc815 	stw	zero,-224(fp)
    int overflow = 0;
   3d1f8:	e03ff315 	stw	zero,-52(fp)
    VERIFY_CHECK(ctx != NULL);
   3d1fc:	e0bffc17 	ldw	r2,-16(fp)
   3d200:	1005003a 	cmpeq	r2,r2,zero
   3d204:	10803fcc 	andi	r2,r2,255
   3d208:	10000d26 	beq	r2,zero,3d240 <secp256k1_ecdsa_sign_recoverable+0x6c>
   3d20c:	d0a01617 	ldw	r2,-32680(gp)
   3d210:	10c00317 	ldw	r3,12(r2)
   3d214:	00800174 	movhi	r2,5
   3d218:	1098a704 	addi	r2,r2,25244
   3d21c:	d8800015 	stw	r2,0(sp)
   3d220:	01c02044 	movi	r7,129
   3d224:	01800174 	movhi	r6,5
   3d228:	31993804 	addi	r6,r6,25824
   3d22c:	01400174 	movhi	r5,5
   3d230:	2951e804 	addi	r5,r5,18336
   3d234:	1809883a 	mov	r4,r3
   3d238:	00461000 	call	46100 <fprintf>
   3d23c:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
   3d240:	e0bffc17 	ldw	r2,-16(fp)
   3d244:	10800104 	addi	r2,r2,4
   3d248:	1009883a 	mov	r4,r2
   3d24c:	00397600 	call	39760 <secp256k1_ecmult_gen_context_is_built>
   3d250:	1005003a 	cmpeq	r2,r2,zero
   3d254:	10803fcc 	andi	r2,r2,255
   3d258:	10000826 	beq	r2,zero,3d27c <secp256k1_ecdsa_sign_recoverable+0xa8>
   3d25c:	e0bffc17 	ldw	r2,-16(fp)
   3d260:	10802f04 	addi	r2,r2,188
   3d264:	01400174 	movhi	r5,5
   3d268:	29590504 	addi	r5,r5,25620
   3d26c:	1009883a 	mov	r4,r2
   3d270:	000de200 	call	de20 <secp256k1_callback_call>
   3d274:	0005883a 	mov	r2,zero
   3d278:	00008c06 	br	3d4ac <secp256k1_ecdsa_sign_recoverable+0x2d8>
    ARG_CHECK(msg32 != NULL);
   3d27c:	e0bffe17 	ldw	r2,-8(fp)
   3d280:	1005003a 	cmpeq	r2,r2,zero
   3d284:	10803fcc 	andi	r2,r2,255
   3d288:	10000826 	beq	r2,zero,3d2ac <secp256k1_ecdsa_sign_recoverable+0xd8>
   3d28c:	e0bffc17 	ldw	r2,-16(fp)
   3d290:	10802f04 	addi	r2,r2,188
   3d294:	01400174 	movhi	r5,5
   3d298:	29590104 	addi	r5,r5,25604
   3d29c:	1009883a 	mov	r4,r2
   3d2a0:	000de200 	call	de20 <secp256k1_callback_call>
   3d2a4:	0005883a 	mov	r2,zero
   3d2a8:	00008006 	br	3d4ac <secp256k1_ecdsa_sign_recoverable+0x2d8>
    ARG_CHECK(signature != NULL);
   3d2ac:	e0bffd17 	ldw	r2,-12(fp)
   3d2b0:	1005003a 	cmpeq	r2,r2,zero
   3d2b4:	10803fcc 	andi	r2,r2,255
   3d2b8:	10000826 	beq	r2,zero,3d2dc <secp256k1_ecdsa_sign_recoverable+0x108>
   3d2bc:	e0bffc17 	ldw	r2,-16(fp)
   3d2c0:	10802f04 	addi	r2,r2,188
   3d2c4:	01400174 	movhi	r5,5
   3d2c8:	29591404 	addi	r5,r5,25680
   3d2cc:	1009883a 	mov	r4,r2
   3d2d0:	000de200 	call	de20 <secp256k1_callback_call>
   3d2d4:	0005883a 	mov	r2,zero
   3d2d8:	00007406 	br	3d4ac <secp256k1_ecdsa_sign_recoverable+0x2d8>
    ARG_CHECK(seckey != NULL);
   3d2dc:	e0bfff17 	ldw	r2,-4(fp)
   3d2e0:	1005003a 	cmpeq	r2,r2,zero
   3d2e4:	10803fcc 	andi	r2,r2,255
   3d2e8:	10000826 	beq	r2,zero,3d30c <secp256k1_ecdsa_sign_recoverable+0x138>
   3d2ec:	e0bffc17 	ldw	r2,-16(fp)
   3d2f0:	10802f04 	addi	r2,r2,188
   3d2f4:	01400174 	movhi	r5,5
   3d2f8:	29591904 	addi	r5,r5,25700
   3d2fc:	1009883a 	mov	r4,r2
   3d300:	000de200 	call	de20 <secp256k1_callback_call>
   3d304:	0005883a 	mov	r2,zero
   3d308:	00006806 	br	3d4ac <secp256k1_ecdsa_sign_recoverable+0x2d8>
    if (noncefp == NULL) {
   3d30c:	e0800217 	ldw	r2,8(fp)
   3d310:	1000031e 	bne	r2,zero,3d320 <secp256k1_ecdsa_sign_recoverable+0x14c>
        noncefp = secp256k1_nonce_function_default;
   3d314:	00800134 	movhi	r2,4
   3d318:	10af0e04 	addi	r2,r2,-17352
   3d31c:	e0800215 	stw	r2,8(fp)
    }

    secp256k1_scalar_set_b32(&sec, seckey, &overflow);
   3d320:	e0fff304 	addi	r3,fp,-52
   3d324:	e0bfda04 	addi	r2,fp,-152
   3d328:	180d883a 	mov	r6,r3
   3d32c:	e17fff17 	ldw	r5,-4(fp)
   3d330:	1009883a 	mov	r4,r2
   3d334:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    /* Fail if the secret key is invalid. */
    if (!overflow && !secp256k1_scalar_is_zero(&sec)) {
   3d338:	e0bff317 	ldw	r2,-52(fp)
   3d33c:	10004b1e 	bne	r2,zero,3d46c <secp256k1_ecdsa_sign_recoverable+0x298>
   3d340:	e0bfda04 	addi	r2,fp,-152
   3d344:	1009883a 	mov	r4,r2
   3d348:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3d34c:	1000471e 	bne	r2,zero,3d46c <secp256k1_ecdsa_sign_recoverable+0x298>
        unsigned int count = 0;
   3d350:	e03fc915 	stw	zero,-220(fp)
        secp256k1_scalar_set_b32(&msg, msg32, NULL);
   3d354:	e0bfea04 	addi	r2,fp,-88
   3d358:	000d883a 	mov	r6,zero
   3d35c:	e17ffe17 	ldw	r5,-8(fp)
   3d360:	1009883a 	mov	r4,r2
   3d364:	00263500 	call	26350 <secp256k1_scalar_set_b32>
        while (1) {
            unsigned char nonce32[32];
            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);
   3d368:	e0fff404 	addi	r3,fp,-48
   3d36c:	e0bfc917 	ldw	r2,-220(fp)
   3d370:	d8800115 	stw	r2,4(sp)
   3d374:	e0800317 	ldw	r2,12(fp)
   3d378:	d8800015 	stw	r2,0(sp)
   3d37c:	e0800217 	ldw	r2,8(fp)
   3d380:	000f883a 	mov	r7,zero
   3d384:	e1bfff17 	ldw	r6,-4(fp)
   3d388:	e17ffe17 	ldw	r5,-8(fp)
   3d38c:	1809883a 	mov	r4,r3
   3d390:	103ee83a 	callr	r2
   3d394:	e0bfc815 	stw	r2,-224(fp)
            if (!ret) {
   3d398:	e0bfc817 	ldw	r2,-224(fp)
   3d39c:	10002726 	beq	r2,zero,3d43c <secp256k1_ecdsa_sign_recoverable+0x268>
                break;
            }
            secp256k1_scalar_set_b32(&non, nonce32, &overflow);
   3d3a0:	e13ff304 	addi	r4,fp,-52
   3d3a4:	e0fff404 	addi	r3,fp,-48
   3d3a8:	e0bfe204 	addi	r2,fp,-120
   3d3ac:	200d883a 	mov	r6,r4
   3d3b0:	180b883a 	mov	r5,r3
   3d3b4:	1009883a 	mov	r4,r2
   3d3b8:	00263500 	call	26350 <secp256k1_scalar_set_b32>
            memset(nonce32, 0, 32);
   3d3bc:	e0bff404 	addi	r2,fp,-48
   3d3c0:	01800804 	movi	r6,32
   3d3c4:	000b883a 	mov	r5,zero
   3d3c8:	1009883a 	mov	r4,r2
   3d3cc:	00464200 	call	46420 <memset>
            if (!secp256k1_scalar_is_zero(&non) && !overflow) {
   3d3d0:	e0bfe204 	addi	r2,fp,-120
   3d3d4:	1009883a 	mov	r4,r2
   3d3d8:	00269b40 	call	269b4 <secp256k1_scalar_is_zero>
   3d3dc:	1000131e 	bne	r2,zero,3d42c <secp256k1_ecdsa_sign_recoverable+0x258>
   3d3e0:	e0bff317 	ldw	r2,-52(fp)
   3d3e4:	1000111e 	bne	r2,zero,3d42c <secp256k1_ecdsa_sign_recoverable+0x258>
                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, &recid)) {
   3d3e8:	e0bffc17 	ldw	r2,-16(fp)
   3d3ec:	10c00104 	addi	r3,r2,4
   3d3f0:	e1bfda04 	addi	r6,fp,-152
   3d3f4:	e17fd204 	addi	r5,fp,-184
   3d3f8:	e13fca04 	addi	r4,fp,-216
   3d3fc:	e0bff204 	addi	r2,fp,-56
   3d400:	d8800215 	stw	r2,8(sp)
   3d404:	e0bfe204 	addi	r2,fp,-120
   3d408:	d8800115 	stw	r2,4(sp)
   3d40c:	e0bfea04 	addi	r2,fp,-88
   3d410:	d8800015 	stw	r2,0(sp)
   3d414:	300f883a 	mov	r7,r6
   3d418:	280d883a 	mov	r6,r5
   3d41c:	200b883a 	mov	r5,r4
   3d420:	1809883a 	mov	r4,r3
   3d424:	003a6140 	call	3a614 <secp256k1_ecdsa_sig_sign>
   3d428:	1000061e 	bne	r2,zero,3d444 <secp256k1_ecdsa_sign_recoverable+0x270>
                    break;
                }
            }
            count++;
   3d42c:	e0bfc917 	ldw	r2,-220(fp)
   3d430:	10800044 	addi	r2,r2,1
   3d434:	e0bfc915 	stw	r2,-220(fp)
        }
   3d438:	003fcb06 	br	3d368 <__alt_mem_epcs_flash_controller+0xfe034368>
        secp256k1_scalar_set_b32(&msg, msg32, NULL);
        while (1) {
            unsigned char nonce32[32];
            ret = noncefp(nonce32, msg32, seckey, NULL, (void*)noncedata, count);
            if (!ret) {
                break;
   3d43c:	0001883a 	nop
   3d440:	00000106 	br	3d448 <secp256k1_ecdsa_sign_recoverable+0x274>
            }
            secp256k1_scalar_set_b32(&non, nonce32, &overflow);
            memset(nonce32, 0, 32);
            if (!secp256k1_scalar_is_zero(&non) && !overflow) {
                if (secp256k1_ecdsa_sig_sign(&ctx->ecmult_gen_ctx, &r, &s, &sec, &msg, &non, &recid)) {
                    break;
   3d444:	0001883a 	nop
                }
            }
            count++;
        }
        secp256k1_scalar_clear(&msg);
   3d448:	e0bfea04 	addi	r2,fp,-88
   3d44c:	1009883a 	mov	r4,r2
   3d450:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
        secp256k1_scalar_clear(&non);
   3d454:	e0bfe204 	addi	r2,fp,-120
   3d458:	1009883a 	mov	r4,r2
   3d45c:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
        secp256k1_scalar_clear(&sec);
   3d460:	e0bfda04 	addi	r2,fp,-152
   3d464:	1009883a 	mov	r4,r2
   3d468:	0024ebc0 	call	24ebc <secp256k1_scalar_clear>
    }
    if (ret) {
   3d46c:	e0bfc817 	ldw	r2,-224(fp)
   3d470:	10000926 	beq	r2,zero,3d498 <secp256k1_ecdsa_sign_recoverable+0x2c4>
        secp256k1_ecdsa_recoverable_signature_save(signature, &r, &s, recid);
   3d474:	e13ff217 	ldw	r4,-56(fp)
   3d478:	e0ffd204 	addi	r3,fp,-184
   3d47c:	e0bfca04 	addi	r2,fp,-216
   3d480:	200f883a 	mov	r7,r4
   3d484:	180d883a 	mov	r6,r3
   3d488:	100b883a 	mov	r5,r2
   3d48c:	e13ffd17 	ldw	r4,-12(fp)
   3d490:	003cc240 	call	3cc24 <secp256k1_ecdsa_recoverable_signature_save>
   3d494:	00000406 	br	3d4a8 <secp256k1_ecdsa_sign_recoverable+0x2d4>
    } else {
        memset(signature, 0, sizeof(*signature));
   3d498:	01801044 	movi	r6,65
   3d49c:	000b883a 	mov	r5,zero
   3d4a0:	e13ffd17 	ldw	r4,-12(fp)
   3d4a4:	00464200 	call	46420 <memset>
    }
    return ret;
   3d4a8:	e0bfc817 	ldw	r2,-224(fp)
}
   3d4ac:	e037883a 	mov	sp,fp
   3d4b0:	dfc00117 	ldw	ra,4(sp)
   3d4b4:	df000017 	ldw	fp,0(sp)
   3d4b8:	dec00204 	addi	sp,sp,8
   3d4bc:	f800283a 	ret

0003d4c0 <secp256k1_ecdsa_recover>:

int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32) {
   3d4c0:	deffc604 	addi	sp,sp,-232
   3d4c4:	dfc03915 	stw	ra,228(sp)
   3d4c8:	df003815 	stw	fp,224(sp)
   3d4cc:	df003804 	addi	fp,sp,224
   3d4d0:	e13ffc15 	stw	r4,-16(fp)
   3d4d4:	e17ffd15 	stw	r5,-12(fp)
   3d4d8:	e1bffe15 	stw	r6,-8(fp)
   3d4dc:	e1ffff15 	stw	r7,-4(fp)
    secp256k1_ge q;
    secp256k1_scalar r, s;
    secp256k1_scalar m;
    int recid;
    VERIFY_CHECK(ctx != NULL);
   3d4e0:	e0bffc17 	ldw	r2,-16(fp)
   3d4e4:	1005003a 	cmpeq	r2,r2,zero
   3d4e8:	10803fcc 	andi	r2,r2,255
   3d4ec:	10000d26 	beq	r2,zero,3d524 <secp256k1_ecdsa_recover+0x64>
   3d4f0:	d0a01617 	ldw	r2,-32680(gp)
   3d4f4:	10c00317 	ldw	r3,12(r2)
   3d4f8:	00800174 	movhi	r2,5
   3d4fc:	1098a704 	addi	r2,r2,25244
   3d500:	d8800015 	stw	r2,0(sp)
   3d504:	01c02bc4 	movi	r7,175
   3d508:	01800174 	movhi	r6,5
   3d50c:	31993804 	addi	r6,r6,25824
   3d510:	01400174 	movhi	r5,5
   3d514:	2951e804 	addi	r5,r5,18336
   3d518:	1809883a 	mov	r4,r3
   3d51c:	00461000 	call	46100 <fprintf>
   3d520:	0045fd40 	call	45fd4 <abort>
    ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));
   3d524:	e0bffc17 	ldw	r2,-16(fp)
   3d528:	1009883a 	mov	r4,r2
   3d52c:	00377780 	call	37778 <secp256k1_ecmult_context_is_built>
   3d530:	1005003a 	cmpeq	r2,r2,zero
   3d534:	10803fcc 	andi	r2,r2,255
   3d538:	10000826 	beq	r2,zero,3d55c <secp256k1_ecdsa_recover+0x9c>
   3d53c:	e0bffc17 	ldw	r2,-16(fp)
   3d540:	10802f04 	addi	r2,r2,188
   3d544:	01400174 	movhi	r5,5
   3d548:	2958f404 	addi	r5,r5,25552
   3d54c:	1009883a 	mov	r4,r2
   3d550:	000de200 	call	de20 <secp256k1_callback_call>
   3d554:	0005883a 	mov	r2,zero
   3d558:	00005a06 	br	3d6c4 <secp256k1_ecdsa_recover+0x204>
    ARG_CHECK(msg32 != NULL);
   3d55c:	e0bfff17 	ldw	r2,-4(fp)
   3d560:	1005003a 	cmpeq	r2,r2,zero
   3d564:	10803fcc 	andi	r2,r2,255
   3d568:	10000826 	beq	r2,zero,3d58c <secp256k1_ecdsa_recover+0xcc>
   3d56c:	e0bffc17 	ldw	r2,-16(fp)
   3d570:	10802f04 	addi	r2,r2,188
   3d574:	01400174 	movhi	r5,5
   3d578:	29590104 	addi	r5,r5,25604
   3d57c:	1009883a 	mov	r4,r2
   3d580:	000de200 	call	de20 <secp256k1_callback_call>
   3d584:	0005883a 	mov	r2,zero
   3d588:	00004e06 	br	3d6c4 <secp256k1_ecdsa_recover+0x204>
    ARG_CHECK(signature != NULL);
   3d58c:	e0bffe17 	ldw	r2,-8(fp)
   3d590:	1005003a 	cmpeq	r2,r2,zero
   3d594:	10803fcc 	andi	r2,r2,255
   3d598:	10000826 	beq	r2,zero,3d5bc <secp256k1_ecdsa_recover+0xfc>
   3d59c:	e0bffc17 	ldw	r2,-16(fp)
   3d5a0:	10802f04 	addi	r2,r2,188
   3d5a4:	01400174 	movhi	r5,5
   3d5a8:	29591404 	addi	r5,r5,25680
   3d5ac:	1009883a 	mov	r4,r2
   3d5b0:	000de200 	call	de20 <secp256k1_callback_call>
   3d5b4:	0005883a 	mov	r2,zero
   3d5b8:	00004206 	br	3d6c4 <secp256k1_ecdsa_recover+0x204>
    ARG_CHECK(pubkey != NULL);
   3d5bc:	e0bffd17 	ldw	r2,-12(fp)
   3d5c0:	1005003a 	cmpeq	r2,r2,zero
   3d5c4:	10803fcc 	andi	r2,r2,255
   3d5c8:	10000826 	beq	r2,zero,3d5ec <secp256k1_ecdsa_recover+0x12c>
   3d5cc:	e0bffc17 	ldw	r2,-16(fp)
   3d5d0:	10802f04 	addi	r2,r2,188
   3d5d4:	01400174 	movhi	r5,5
   3d5d8:	2958b004 	addi	r5,r5,25280
   3d5dc:	1009883a 	mov	r4,r2
   3d5e0:	000de200 	call	de20 <secp256k1_callback_call>
   3d5e4:	0005883a 	mov	r2,zero
   3d5e8:	00003606 	br	3d6c4 <secp256k1_ecdsa_recover+0x204>

    secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, signature);
   3d5ec:	e17ffb04 	addi	r5,fp,-20
   3d5f0:	e13feb04 	addi	r4,fp,-84
   3d5f4:	e0ffe304 	addi	r3,fp,-116
   3d5f8:	e0bffe17 	ldw	r2,-8(fp)
   3d5fc:	d8800015 	stw	r2,0(sp)
   3d600:	280f883a 	mov	r7,r5
   3d604:	200d883a 	mov	r6,r4
   3d608:	180b883a 	mov	r5,r3
   3d60c:	e13ffc17 	ldw	r4,-16(fp)
   3d610:	003cbac0 	call	3cbac <secp256k1_ecdsa_recoverable_signature_load>
    ARG_CHECK(recid >= 0 && recid < 4);
   3d614:	e0bffb17 	ldw	r2,-20(fp)
   3d618:	1004d7fa 	srli	r2,r2,31
   3d61c:	10803fcc 	andi	r2,r2,255
   3d620:	1000041e 	bne	r2,zero,3d634 <secp256k1_ecdsa_recover+0x174>
   3d624:	e0bffb17 	ldw	r2,-20(fp)
   3d628:	10800108 	cmpgei	r2,r2,4
   3d62c:	10803fcc 	andi	r2,r2,255
   3d630:	10000826 	beq	r2,zero,3d654 <secp256k1_ecdsa_recover+0x194>
   3d634:	e0bffc17 	ldw	r2,-16(fp)
   3d638:	10802f04 	addi	r2,r2,188
   3d63c:	01400174 	movhi	r5,5
   3d640:	29594504 	addi	r5,r5,25876
   3d644:	1009883a 	mov	r4,r2
   3d648:	000de200 	call	de20 <secp256k1_callback_call>
   3d64c:	0005883a 	mov	r2,zero
   3d650:	00001c06 	br	3d6c4 <secp256k1_ecdsa_recover+0x204>
    secp256k1_scalar_set_b32(&m, msg32, NULL);
   3d654:	e0bff304 	addi	r2,fp,-52
   3d658:	000d883a 	mov	r6,zero
   3d65c:	e17fff17 	ldw	r5,-4(fp)
   3d660:	1009883a 	mov	r4,r2
   3d664:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    if (secp256k1_ecdsa_sig_recover(&ctx->ecmult_ctx, &r, &s, &q, &m, recid)) {
   3d668:	e0fffc17 	ldw	r3,-16(fp)
   3d66c:	e0bffb17 	ldw	r2,-20(fp)
   3d670:	e17feb04 	addi	r5,fp,-84
   3d674:	e13fe304 	addi	r4,fp,-116
   3d678:	d8800115 	stw	r2,4(sp)
   3d67c:	e0bff304 	addi	r2,fp,-52
   3d680:	d8800015 	stw	r2,0(sp)
   3d684:	e1ffca04 	addi	r7,fp,-216
   3d688:	280d883a 	mov	r6,r5
   3d68c:	200b883a 	mov	r5,r4
   3d690:	1809883a 	mov	r4,r3
   3d694:	003cff40 	call	3cff4 <secp256k1_ecdsa_sig_recover>
   3d698:	10000526 	beq	r2,zero,3d6b0 <secp256k1_ecdsa_recover+0x1f0>
        secp256k1_pubkey_save(pubkey, &q);
   3d69c:	e17fca04 	addi	r5,fp,-216
   3d6a0:	e13ffd17 	ldw	r4,-12(fp)
   3d6a4:	003b0280 	call	3b028 <secp256k1_pubkey_save>
        return 1;
   3d6a8:	00800044 	movi	r2,1
   3d6ac:	00000506 	br	3d6c4 <secp256k1_ecdsa_recover+0x204>
    } else {
        memset(pubkey, 0, sizeof(*pubkey));
   3d6b0:	01801004 	movi	r6,64
   3d6b4:	000b883a 	mov	r5,zero
   3d6b8:	e13ffd17 	ldw	r4,-12(fp)
   3d6bc:	00464200 	call	46420 <memset>
        return 0;
   3d6c0:	0005883a 	mov	r2,zero
    }
}
   3d6c4:	e037883a 	mov	sp,fp
   3d6c8:	dfc00117 	ldw	ra,4(sp)
   3d6cc:	df000017 	ldw	fp,0(sp)
   3d6d0:	dec00204 	addi	sp,sp,8
   3d6d4:	f800283a 	ret

0003d6d8 <bench_setup>:
    secp256k1_gej gej_x, gej_y;
    unsigned char data[64];
    int wnaf[256];
} bench_inv_t;

void bench_setup(void* arg) {
   3d6d8:	defffb04 	addi	sp,sp,-20
   3d6dc:	dfc00415 	stw	ra,16(sp)
   3d6e0:	df000315 	stw	fp,12(sp)
   3d6e4:	df000304 	addi	fp,sp,12
   3d6e8:	e13fff15 	stw	r4,-4(fp)
    bench_inv_t *data = (bench_inv_t*)arg;
   3d6ec:	e0bfff17 	ldw	r2,-4(fp)
   3d6f0:	e0bffe15 	stw	r2,-8(fp)
        0x97, 0xad, 0xaf, 0xb5, 0xb9, 0xbb, 0xbf, 0xc5,
        0xdb, 0xdd, 0xe3, 0xe7, 0xe9, 0xef, 0xf3, 0xf9,
        0x11, 0x15, 0x17, 0x1b, 0x1d, 0xb1, 0xbf, 0xd3
    };

    secp256k1_scalar_set_b32(&data->scalar_x, init_x, NULL);
   3d6f4:	e0bffe17 	ldw	r2,-8(fp)
   3d6f8:	000d883a 	mov	r6,zero
   3d6fc:	01400174 	movhi	r5,5
   3d700:	29599f44 	addi	r5,r5,26237
   3d704:	1009883a 	mov	r4,r2
   3d708:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    secp256k1_scalar_set_b32(&data->scalar_y, init_y, NULL);
   3d70c:	e0bffe17 	ldw	r2,-8(fp)
   3d710:	10800804 	addi	r2,r2,32
   3d714:	000d883a 	mov	r6,zero
   3d718:	01400174 	movhi	r5,5
   3d71c:	2959a744 	addi	r5,r5,26269
   3d720:	1009883a 	mov	r4,r2
   3d724:	00263500 	call	26350 <secp256k1_scalar_set_b32>
    secp256k1_fe_set_b32(&data->fe_x, init_x);
   3d728:	e0bffe17 	ldw	r2,-8(fp)
   3d72c:	10801004 	addi	r2,r2,64
   3d730:	01400174 	movhi	r5,5
   3d734:	29599f44 	addi	r5,r5,26237
   3d738:	1009883a 	mov	r4,r2
   3d73c:	00156ec0 	call	156ec <secp256k1_fe_set_b32>
    secp256k1_fe_set_b32(&data->fe_y, init_y);
   3d740:	e0bffe17 	ldw	r2,-8(fp)
   3d744:	10801c04 	addi	r2,r2,112
   3d748:	01400174 	movhi	r5,5
   3d74c:	2959a744 	addi	r5,r5,26269
   3d750:	1009883a 	mov	r4,r2
   3d754:	00156ec0 	call	156ec <secp256k1_fe_set_b32>
    CHECK(secp256k1_ge_set_xo_var(&data->ge_x, &data->fe_x, 0));
   3d758:	e0bffe17 	ldw	r2,-8(fp)
   3d75c:	10c02804 	addi	r3,r2,160
   3d760:	e0bffe17 	ldw	r2,-8(fp)
   3d764:	10801004 	addi	r2,r2,64
   3d768:	000d883a 	mov	r6,zero
   3d76c:	100b883a 	mov	r5,r2
   3d770:	1809883a 	mov	r4,r3
   3d774:	0022ae40 	call	22ae4 <secp256k1_ge_set_xo_var>
   3d778:	1005003a 	cmpeq	r2,r2,zero
   3d77c:	10803fcc 	andi	r2,r2,255
   3d780:	10000d26 	beq	r2,zero,3d7b8 <bench_setup+0xe0>
   3d784:	d0a01617 	ldw	r2,-32680(gp)
   3d788:	10c00317 	ldw	r3,12(r2)
   3d78c:	00800174 	movhi	r2,5
   3d790:	10995504 	addi	r2,r2,25940
   3d794:	d8800015 	stw	r2,0(sp)
   3d798:	01c00cc4 	movi	r7,51
   3d79c:	01800174 	movhi	r6,5
   3d7a0:	31994b04 	addi	r6,r6,25900
   3d7a4:	01400174 	movhi	r5,5
   3d7a8:	2951e804 	addi	r5,r5,18336
   3d7ac:	1809883a 	mov	r4,r3
   3d7b0:	00461000 	call	46100 <fprintf>
   3d7b4:	0045fd40 	call	45fd4 <abort>
    CHECK(secp256k1_ge_set_xo_var(&data->ge_y, &data->fe_y, 1));
   3d7b8:	e0bffe17 	ldw	r2,-8(fp)
   3d7bc:	10c04104 	addi	r3,r2,260
   3d7c0:	e0bffe17 	ldw	r2,-8(fp)
   3d7c4:	10801c04 	addi	r2,r2,112
   3d7c8:	01800044 	movi	r6,1
   3d7cc:	100b883a 	mov	r5,r2
   3d7d0:	1809883a 	mov	r4,r3
   3d7d4:	0022ae40 	call	22ae4 <secp256k1_ge_set_xo_var>
   3d7d8:	1005003a 	cmpeq	r2,r2,zero
   3d7dc:	10803fcc 	andi	r2,r2,255
   3d7e0:	10000d26 	beq	r2,zero,3d818 <bench_setup+0x140>
   3d7e4:	d0a01617 	ldw	r2,-32680(gp)
   3d7e8:	10c00317 	ldw	r3,12(r2)
   3d7ec:	00800174 	movhi	r2,5
   3d7f0:	10996804 	addi	r2,r2,26016
   3d7f4:	d8800015 	stw	r2,0(sp)
   3d7f8:	01c00d04 	movi	r7,52
   3d7fc:	01800174 	movhi	r6,5
   3d800:	31994b04 	addi	r6,r6,25900
   3d804:	01400174 	movhi	r5,5
   3d808:	2951e804 	addi	r5,r5,18336
   3d80c:	1809883a 	mov	r4,r3
   3d810:	00461000 	call	46100 <fprintf>
   3d814:	0045fd40 	call	45fd4 <abort>
    secp256k1_gej_set_ge(&data->gej_x, &data->ge_x);
   3d818:	e0bffe17 	ldw	r2,-8(fp)
   3d81c:	10c05a04 	addi	r3,r2,360
   3d820:	e0bffe17 	ldw	r2,-8(fp)
   3d824:	10802804 	addi	r2,r2,160
   3d828:	100b883a 	mov	r5,r2
   3d82c:	1809883a 	mov	r4,r3
   3d830:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
    secp256k1_gej_set_ge(&data->gej_y, &data->ge_y);
   3d834:	e0bffe17 	ldw	r2,-8(fp)
   3d838:	10c07f04 	addi	r3,r2,508
   3d83c:	e0bffe17 	ldw	r2,-8(fp)
   3d840:	10804104 	addi	r2,r2,260
   3d844:	100b883a 	mov	r5,r2
   3d848:	1809883a 	mov	r4,r3
   3d84c:	0022b7c0 	call	22b7c <secp256k1_gej_set_ge>
    memcpy(data->data, init_x, 32);
   3d850:	e0bffe17 	ldw	r2,-8(fp)
   3d854:	10c0a404 	addi	r3,r2,656
   3d858:	00800174 	movhi	r2,5
   3d85c:	10999f44 	addi	r2,r2,26237
   3d860:	1009883a 	mov	r4,r2
   3d864:	00800804 	movi	r2,32
   3d868:	100d883a 	mov	r6,r2
   3d86c:	200b883a 	mov	r5,r4
   3d870:	1809883a 	mov	r4,r3
   3d874:	00463980 	call	46398 <memcpy>
    memcpy(data->data + 32, init_y, 32);
   3d878:	e0bffe17 	ldw	r2,-8(fp)
   3d87c:	1080a404 	addi	r2,r2,656
   3d880:	10c00804 	addi	r3,r2,32
   3d884:	00800174 	movhi	r2,5
   3d888:	1099a744 	addi	r2,r2,26269
   3d88c:	1009883a 	mov	r4,r2
   3d890:	00800804 	movi	r2,32
   3d894:	100d883a 	mov	r6,r2
   3d898:	200b883a 	mov	r5,r4
   3d89c:	1809883a 	mov	r4,r3
   3d8a0:	00463980 	call	46398 <memcpy>
}
   3d8a4:	0001883a 	nop
   3d8a8:	e037883a 	mov	sp,fp
   3d8ac:	dfc00117 	ldw	ra,4(sp)
   3d8b0:	df000017 	ldw	fp,0(sp)
   3d8b4:	dec00204 	addi	sp,sp,8
   3d8b8:	f800283a 	ret

0003d8bc <bench_scalar_add>:

void bench_scalar_add(void* arg) {
   3d8bc:	defffb04 	addi	sp,sp,-20
   3d8c0:	dfc00415 	stw	ra,16(sp)
   3d8c4:	df000315 	stw	fp,12(sp)
   3d8c8:	df000304 	addi	fp,sp,12
   3d8cc:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3d8d0:	e0bfff17 	ldw	r2,-4(fp)
   3d8d4:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000000; i++) {
   3d8d8:	e03ffd15 	stw	zero,-12(fp)
   3d8dc:	00000b06 	br	3d90c <bench_scalar_add+0x50>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3d8e0:	e0fffe17 	ldw	r3,-8(fp)
   3d8e4:	e13ffe17 	ldw	r4,-8(fp)
   3d8e8:	e0bffe17 	ldw	r2,-8(fp)
   3d8ec:	10800804 	addi	r2,r2,32
   3d8f0:	100d883a 	mov	r6,r2
   3d8f4:	200b883a 	mov	r5,r4
   3d8f8:	1809883a 	mov	r4,r3
   3d8fc:	00258640 	call	25864 <secp256k1_scalar_add>

void bench_scalar_add(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000000; i++) {
   3d900:	e0bffd17 	ldw	r2,-12(fp)
   3d904:	10800044 	addi	r2,r2,1
   3d908:	e0bffd15 	stw	r2,-12(fp)
   3d90c:	e0fffd17 	ldw	r3,-12(fp)
   3d910:	008007f4 	movhi	r2,31
   3d914:	10a11fc4 	addi	r2,r2,-31617
   3d918:	10fff10e 	bge	r2,r3,3d8e0 <__alt_mem_epcs_flash_controller+0xfe0348e0>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3d91c:	0001883a 	nop
   3d920:	e037883a 	mov	sp,fp
   3d924:	dfc00117 	ldw	ra,4(sp)
   3d928:	df000017 	ldw	fp,0(sp)
   3d92c:	dec00204 	addi	sp,sp,8
   3d930:	f800283a 	ret

0003d934 <bench_scalar_negate>:

void bench_scalar_negate(void* arg) {
   3d934:	defffb04 	addi	sp,sp,-20
   3d938:	dfc00415 	stw	ra,16(sp)
   3d93c:	df000315 	stw	fp,12(sp)
   3d940:	df000304 	addi	fp,sp,12
   3d944:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3d948:	e0bfff17 	ldw	r2,-4(fp)
   3d94c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000000; i++) {
   3d950:	e03ffd15 	stw	zero,-12(fp)
   3d954:	00000806 	br	3d978 <bench_scalar_negate+0x44>
        secp256k1_scalar_negate(&data->scalar_x, &data->scalar_x);
   3d958:	e0bffe17 	ldw	r2,-8(fp)
   3d95c:	e0fffe17 	ldw	r3,-8(fp)
   3d960:	180b883a 	mov	r5,r3
   3d964:	1009883a 	mov	r4,r2
   3d968:	0026a380 	call	26a38 <secp256k1_scalar_negate>

void bench_scalar_negate(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000000; i++) {
   3d96c:	e0bffd17 	ldw	r2,-12(fp)
   3d970:	10800044 	addi	r2,r2,1
   3d974:	e0bffd15 	stw	r2,-12(fp)
   3d978:	e0fffd17 	ldw	r3,-12(fp)
   3d97c:	008007f4 	movhi	r2,31
   3d980:	10a11fc4 	addi	r2,r2,-31617
   3d984:	10fff40e 	bge	r2,r3,3d958 <__alt_mem_epcs_flash_controller+0xfe034958>
        secp256k1_scalar_negate(&data->scalar_x, &data->scalar_x);
    }
}
   3d988:	0001883a 	nop
   3d98c:	e037883a 	mov	sp,fp
   3d990:	dfc00117 	ldw	ra,4(sp)
   3d994:	df000017 	ldw	fp,0(sp)
   3d998:	dec00204 	addi	sp,sp,8
   3d99c:	f800283a 	ret

0003d9a0 <bench_scalar_sqr>:

void bench_scalar_sqr(void* arg) {
   3d9a0:	defffb04 	addi	sp,sp,-20
   3d9a4:	dfc00415 	stw	ra,16(sp)
   3d9a8:	df000315 	stw	fp,12(sp)
   3d9ac:	df000304 	addi	fp,sp,12
   3d9b0:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3d9b4:	e0bfff17 	ldw	r2,-4(fp)
   3d9b8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3d9bc:	e03ffd15 	stw	zero,-12(fp)
   3d9c0:	00000806 	br	3d9e4 <bench_scalar_sqr+0x44>
        secp256k1_scalar_sqr(&data->scalar_x, &data->scalar_x);
   3d9c4:	e0bffe17 	ldw	r2,-8(fp)
   3d9c8:	e0fffe17 	ldw	r3,-8(fp)
   3d9cc:	180b883a 	mov	r5,r3
   3d9d0:	1009883a 	mov	r4,r2
   3d9d4:	00364c80 	call	364c8 <secp256k1_scalar_sqr>

void bench_scalar_sqr(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3d9d8:	e0bffd17 	ldw	r2,-12(fp)
   3d9dc:	10800044 	addi	r2,r2,1
   3d9e0:	e0bffd15 	stw	r2,-12(fp)
   3d9e4:	e0fffd17 	ldw	r3,-12(fp)
   3d9e8:	008000f4 	movhi	r2,3
   3d9ec:	10834fc4 	addi	r2,r2,3391
   3d9f0:	10fff40e 	bge	r2,r3,3d9c4 <__alt_mem_epcs_flash_controller+0xfe0349c4>
        secp256k1_scalar_sqr(&data->scalar_x, &data->scalar_x);
    }
}
   3d9f4:	0001883a 	nop
   3d9f8:	e037883a 	mov	sp,fp
   3d9fc:	dfc00117 	ldw	ra,4(sp)
   3da00:	df000017 	ldw	fp,0(sp)
   3da04:	dec00204 	addi	sp,sp,8
   3da08:	f800283a 	ret

0003da0c <bench_scalar_mul>:

void bench_scalar_mul(void* arg) {
   3da0c:	defffb04 	addi	sp,sp,-20
   3da10:	dfc00415 	stw	ra,16(sp)
   3da14:	df000315 	stw	fp,12(sp)
   3da18:	df000304 	addi	fp,sp,12
   3da1c:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3da20:	e0bfff17 	ldw	r2,-4(fp)
   3da24:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3da28:	e03ffd15 	stw	zero,-12(fp)
   3da2c:	00000b06 	br	3da5c <bench_scalar_mul+0x50>
        secp256k1_scalar_mul(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3da30:	e0fffe17 	ldw	r3,-8(fp)
   3da34:	e13ffe17 	ldw	r4,-8(fp)
   3da38:	e0bffe17 	ldw	r2,-8(fp)
   3da3c:	10800804 	addi	r2,r2,32
   3da40:	100d883a 	mov	r6,r2
   3da44:	200b883a 	mov	r5,r4
   3da48:	1809883a 	mov	r4,r3
   3da4c:	003621c0 	call	3621c <secp256k1_scalar_mul>

void bench_scalar_mul(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3da50:	e0bffd17 	ldw	r2,-12(fp)
   3da54:	10800044 	addi	r2,r2,1
   3da58:	e0bffd15 	stw	r2,-12(fp)
   3da5c:	e0fffd17 	ldw	r3,-12(fp)
   3da60:	008000f4 	movhi	r2,3
   3da64:	10834fc4 	addi	r2,r2,3391
   3da68:	10fff10e 	bge	r2,r3,3da30 <__alt_mem_epcs_flash_controller+0xfe034a30>
        secp256k1_scalar_mul(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3da6c:	0001883a 	nop
   3da70:	e037883a 	mov	sp,fp
   3da74:	dfc00117 	ldw	ra,4(sp)
   3da78:	df000017 	ldw	fp,0(sp)
   3da7c:	dec00204 	addi	sp,sp,8
   3da80:	f800283a 	ret

0003da84 <bench_scalar_inverse>:
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
#endif

void bench_scalar_inverse(void* arg) {
   3da84:	defffb04 	addi	sp,sp,-20
   3da88:	dfc00415 	stw	ra,16(sp)
   3da8c:	df000315 	stw	fp,12(sp)
   3da90:	df000304 	addi	fp,sp,12
   3da94:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3da98:	e0bfff17 	ldw	r2,-4(fp)
   3da9c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000; i++) {
   3daa0:	e03ffd15 	stw	zero,-12(fp)
   3daa4:	00001006 	br	3dae8 <bench_scalar_inverse+0x64>
        secp256k1_scalar_inverse(&data->scalar_x, &data->scalar_x);
   3daa8:	e0bffe17 	ldw	r2,-8(fp)
   3daac:	e0fffe17 	ldw	r3,-8(fp)
   3dab0:	180b883a 	mov	r5,r3
   3dab4:	1009883a 	mov	r4,r2
   3dab8:	00365100 	call	36510 <secp256k1_scalar_inverse>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3dabc:	e0fffe17 	ldw	r3,-8(fp)
   3dac0:	e13ffe17 	ldw	r4,-8(fp)
   3dac4:	e0bffe17 	ldw	r2,-8(fp)
   3dac8:	10800804 	addi	r2,r2,32
   3dacc:	100d883a 	mov	r6,r2
   3dad0:	200b883a 	mov	r5,r4
   3dad4:	1809883a 	mov	r4,r3
   3dad8:	00258640 	call	25864 <secp256k1_scalar_add>

void bench_scalar_inverse(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000; i++) {
   3dadc:	e0bffd17 	ldw	r2,-12(fp)
   3dae0:	10800044 	addi	r2,r2,1
   3dae4:	e0bffd15 	stw	r2,-12(fp)
   3dae8:	e0bffd17 	ldw	r2,-12(fp)
   3daec:	1081f410 	cmplti	r2,r2,2000
   3daf0:	103fed1e 	bne	r2,zero,3daa8 <__alt_mem_epcs_flash_controller+0xfe034aa8>
        secp256k1_scalar_inverse(&data->scalar_x, &data->scalar_x);
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3daf4:	0001883a 	nop
   3daf8:	e037883a 	mov	sp,fp
   3dafc:	dfc00117 	ldw	ra,4(sp)
   3db00:	df000017 	ldw	fp,0(sp)
   3db04:	dec00204 	addi	sp,sp,8
   3db08:	f800283a 	ret

0003db0c <bench_scalar_inverse_var>:

void bench_scalar_inverse_var(void* arg) {
   3db0c:	defffb04 	addi	sp,sp,-20
   3db10:	dfc00415 	stw	ra,16(sp)
   3db14:	df000315 	stw	fp,12(sp)
   3db18:	df000304 	addi	fp,sp,12
   3db1c:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3db20:	e0bfff17 	ldw	r2,-4(fp)
   3db24:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000; i++) {
   3db28:	e03ffd15 	stw	zero,-12(fp)
   3db2c:	00001006 	br	3db70 <bench_scalar_inverse_var+0x64>
        secp256k1_scalar_inverse_var(&data->scalar_x, &data->scalar_x);
   3db30:	e0bffe17 	ldw	r2,-8(fp)
   3db34:	e0fffe17 	ldw	r3,-8(fp)
   3db38:	180b883a 	mov	r5,r3
   3db3c:	1009883a 	mov	r4,r2
   3db40:	00370540 	call	37054 <secp256k1_scalar_inverse_var>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3db44:	e0fffe17 	ldw	r3,-8(fp)
   3db48:	e13ffe17 	ldw	r4,-8(fp)
   3db4c:	e0bffe17 	ldw	r2,-8(fp)
   3db50:	10800804 	addi	r2,r2,32
   3db54:	100d883a 	mov	r6,r2
   3db58:	200b883a 	mov	r5,r4
   3db5c:	1809883a 	mov	r4,r3
   3db60:	00258640 	call	25864 <secp256k1_scalar_add>

void bench_scalar_inverse_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000; i++) {
   3db64:	e0bffd17 	ldw	r2,-12(fp)
   3db68:	10800044 	addi	r2,r2,1
   3db6c:	e0bffd15 	stw	r2,-12(fp)
   3db70:	e0bffd17 	ldw	r2,-12(fp)
   3db74:	1081f410 	cmplti	r2,r2,2000
   3db78:	103fed1e 	bne	r2,zero,3db30 <__alt_mem_epcs_flash_controller+0xfe034b30>
        secp256k1_scalar_inverse_var(&data->scalar_x, &data->scalar_x);
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3db7c:	0001883a 	nop
   3db80:	e037883a 	mov	sp,fp
   3db84:	dfc00117 	ldw	ra,4(sp)
   3db88:	df000017 	ldw	fp,0(sp)
   3db8c:	dec00204 	addi	sp,sp,8
   3db90:	f800283a 	ret

0003db94 <bench_field_normalize>:

void bench_field_normalize(void* arg) {
   3db94:	defffb04 	addi	sp,sp,-20
   3db98:	dfc00415 	stw	ra,16(sp)
   3db9c:	df000315 	stw	fp,12(sp)
   3dba0:	df000304 	addi	fp,sp,12
   3dba4:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3dba8:	e0bfff17 	ldw	r2,-4(fp)
   3dbac:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000000; i++) {
   3dbb0:	e03ffd15 	stw	zero,-12(fp)
   3dbb4:	00000706 	br	3dbd4 <bench_field_normalize+0x40>
        secp256k1_fe_normalize(&data->fe_x);
   3dbb8:	e0bffe17 	ldw	r2,-8(fp)
   3dbbc:	10801004 	addi	r2,r2,64
   3dbc0:	1009883a 	mov	r4,r2
   3dbc4:	0013b3c0 	call	13b3c <secp256k1_fe_normalize>

void bench_field_normalize(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000000; i++) {
   3dbc8:	e0bffd17 	ldw	r2,-12(fp)
   3dbcc:	10800044 	addi	r2,r2,1
   3dbd0:	e0bffd15 	stw	r2,-12(fp)
   3dbd4:	e0fffd17 	ldw	r3,-12(fp)
   3dbd8:	008007f4 	movhi	r2,31
   3dbdc:	10a11fc4 	addi	r2,r2,-31617
   3dbe0:	10fff50e 	bge	r2,r3,3dbb8 <__alt_mem_epcs_flash_controller+0xfe034bb8>
        secp256k1_fe_normalize(&data->fe_x);
    }
}
   3dbe4:	0001883a 	nop
   3dbe8:	e037883a 	mov	sp,fp
   3dbec:	dfc00117 	ldw	ra,4(sp)
   3dbf0:	df000017 	ldw	fp,0(sp)
   3dbf4:	dec00204 	addi	sp,sp,8
   3dbf8:	f800283a 	ret

0003dbfc <bench_field_normalize_weak>:

void bench_field_normalize_weak(void* arg) {
   3dbfc:	defffb04 	addi	sp,sp,-20
   3dc00:	dfc00415 	stw	ra,16(sp)
   3dc04:	df000315 	stw	fp,12(sp)
   3dc08:	df000304 	addi	fp,sp,12
   3dc0c:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3dc10:	e0bfff17 	ldw	r2,-4(fp)
   3dc14:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 2000000; i++) {
   3dc18:	e03ffd15 	stw	zero,-12(fp)
   3dc1c:	00000706 	br	3dc3c <bench_field_normalize_weak+0x40>
        secp256k1_fe_normalize_weak(&data->fe_x);
   3dc20:	e0bffe17 	ldw	r2,-8(fp)
   3dc24:	10801004 	addi	r2,r2,64
   3dc28:	1009883a 	mov	r4,r2
   3dc2c:	001413c0 	call	1413c <secp256k1_fe_normalize_weak>

void bench_field_normalize_weak(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 2000000; i++) {
   3dc30:	e0bffd17 	ldw	r2,-12(fp)
   3dc34:	10800044 	addi	r2,r2,1
   3dc38:	e0bffd15 	stw	r2,-12(fp)
   3dc3c:	e0fffd17 	ldw	r3,-12(fp)
   3dc40:	008007f4 	movhi	r2,31
   3dc44:	10a11fc4 	addi	r2,r2,-31617
   3dc48:	10fff50e 	bge	r2,r3,3dc20 <__alt_mem_epcs_flash_controller+0xfe034c20>
        secp256k1_fe_normalize_weak(&data->fe_x);
    }
}
   3dc4c:	0001883a 	nop
   3dc50:	e037883a 	mov	sp,fp
   3dc54:	dfc00117 	ldw	ra,4(sp)
   3dc58:	df000017 	ldw	fp,0(sp)
   3dc5c:	dec00204 	addi	sp,sp,8
   3dc60:	f800283a 	ret

0003dc64 <bench_field_mul>:

void bench_field_mul(void* arg) {
   3dc64:	defffb04 	addi	sp,sp,-20
   3dc68:	dfc00415 	stw	ra,16(sp)
   3dc6c:	df000315 	stw	fp,12(sp)
   3dc70:	df000304 	addi	fp,sp,12
   3dc74:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3dc78:	e0bfff17 	ldw	r2,-4(fp)
   3dc7c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3dc80:	e03ffd15 	stw	zero,-12(fp)
   3dc84:	00000d06 	br	3dcbc <bench_field_mul+0x58>
        secp256k1_fe_mul(&data->fe_x, &data->fe_x, &data->fe_y);
   3dc88:	e0bffe17 	ldw	r2,-8(fp)
   3dc8c:	10c01004 	addi	r3,r2,64
   3dc90:	e0bffe17 	ldw	r2,-8(fp)
   3dc94:	11001004 	addi	r4,r2,64
   3dc98:	e0bffe17 	ldw	r2,-8(fp)
   3dc9c:	10801c04 	addi	r2,r2,112
   3dca0:	100d883a 	mov	r6,r2
   3dca4:	200b883a 	mov	r5,r4
   3dca8:	1809883a 	mov	r4,r3
   3dcac:	001feb40 	call	1feb4 <secp256k1_fe_mul>

void bench_field_mul(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3dcb0:	e0bffd17 	ldw	r2,-12(fp)
   3dcb4:	10800044 	addi	r2,r2,1
   3dcb8:	e0bffd15 	stw	r2,-12(fp)
   3dcbc:	e0fffd17 	ldw	r3,-12(fp)
   3dcc0:	008000f4 	movhi	r2,3
   3dcc4:	10834fc4 	addi	r2,r2,3391
   3dcc8:	10ffef0e 	bge	r2,r3,3dc88 <__alt_mem_epcs_flash_controller+0xfe034c88>
        secp256k1_fe_mul(&data->fe_x, &data->fe_x, &data->fe_y);
    }
}
   3dccc:	0001883a 	nop
   3dcd0:	e037883a 	mov	sp,fp
   3dcd4:	dfc00117 	ldw	ra,4(sp)
   3dcd8:	df000017 	ldw	fp,0(sp)
   3dcdc:	dec00204 	addi	sp,sp,8
   3dce0:	f800283a 	ret

0003dce4 <bench_field_sqr>:

void bench_field_sqr(void* arg) {
   3dce4:	defffb04 	addi	sp,sp,-20
   3dce8:	dfc00415 	stw	ra,16(sp)
   3dcec:	df000315 	stw	fp,12(sp)
   3dcf0:	df000304 	addi	fp,sp,12
   3dcf4:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3dcf8:	e0bfff17 	ldw	r2,-4(fp)
   3dcfc:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3dd00:	e03ffd15 	stw	zero,-12(fp)
   3dd04:	00000a06 	br	3dd30 <bench_field_sqr+0x4c>
        secp256k1_fe_sqr(&data->fe_x, &data->fe_x);
   3dd08:	e0bffe17 	ldw	r2,-8(fp)
   3dd0c:	10c01004 	addi	r3,r2,64
   3dd10:	e0bffe17 	ldw	r2,-8(fp)
   3dd14:	10801004 	addi	r2,r2,64
   3dd18:	100b883a 	mov	r5,r2
   3dd1c:	1809883a 	mov	r4,r3
   3dd20:	00200080 	call	20008 <secp256k1_fe_sqr>

void bench_field_sqr(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3dd24:	e0bffd17 	ldw	r2,-12(fp)
   3dd28:	10800044 	addi	r2,r2,1
   3dd2c:	e0bffd15 	stw	r2,-12(fp)
   3dd30:	e0fffd17 	ldw	r3,-12(fp)
   3dd34:	008000f4 	movhi	r2,3
   3dd38:	10834fc4 	addi	r2,r2,3391
   3dd3c:	10fff20e 	bge	r2,r3,3dd08 <__alt_mem_epcs_flash_controller+0xfe034d08>
        secp256k1_fe_sqr(&data->fe_x, &data->fe_x);
    }
}
   3dd40:	0001883a 	nop
   3dd44:	e037883a 	mov	sp,fp
   3dd48:	dfc00117 	ldw	ra,4(sp)
   3dd4c:	df000017 	ldw	fp,0(sp)
   3dd50:	dec00204 	addi	sp,sp,8
   3dd54:	f800283a 	ret

0003dd58 <bench_field_inverse>:

void bench_field_inverse(void* arg) {
   3dd58:	defffb04 	addi	sp,sp,-20
   3dd5c:	dfc00415 	stw	ra,16(sp)
   3dd60:	df000315 	stw	fp,12(sp)
   3dd64:	df000304 	addi	fp,sp,12
   3dd68:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3dd6c:	e0bfff17 	ldw	r2,-4(fp)
   3dd70:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3dd74:	e03ffd15 	stw	zero,-12(fp)
   3dd78:	00001106 	br	3ddc0 <bench_field_inverse+0x68>
        secp256k1_fe_inv(&data->fe_x, &data->fe_x);
   3dd7c:	e0bffe17 	ldw	r2,-8(fp)
   3dd80:	10c01004 	addi	r3,r2,64
   3dd84:	e0bffe17 	ldw	r2,-8(fp)
   3dd88:	10801004 	addi	r2,r2,64
   3dd8c:	100b883a 	mov	r5,r2
   3dd90:	1809883a 	mov	r4,r3
   3dd94:	00210b40 	call	210b4 <secp256k1_fe_inv>
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
   3dd98:	e0bffe17 	ldw	r2,-8(fp)
   3dd9c:	10c01004 	addi	r3,r2,64
   3dda0:	e0bffe17 	ldw	r2,-8(fp)
   3dda4:	10801c04 	addi	r2,r2,112
   3dda8:	100b883a 	mov	r5,r2
   3ddac:	1809883a 	mov	r4,r3
   3ddb0:	0015ef80 	call	15ef8 <secp256k1_fe_add>

void bench_field_inverse(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3ddb4:	e0bffd17 	ldw	r2,-12(fp)
   3ddb8:	10800044 	addi	r2,r2,1
   3ddbc:	e0bffd15 	stw	r2,-12(fp)
   3ddc0:	e0bffd17 	ldw	r2,-12(fp)
   3ddc4:	10938810 	cmplti	r2,r2,20000
   3ddc8:	103fec1e 	bne	r2,zero,3dd7c <__alt_mem_epcs_flash_controller+0xfe034d7c>
        secp256k1_fe_inv(&data->fe_x, &data->fe_x);
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
    }
}
   3ddcc:	0001883a 	nop
   3ddd0:	e037883a 	mov	sp,fp
   3ddd4:	dfc00117 	ldw	ra,4(sp)
   3ddd8:	df000017 	ldw	fp,0(sp)
   3dddc:	dec00204 	addi	sp,sp,8
   3dde0:	f800283a 	ret

0003dde4 <bench_field_inverse_var>:

void bench_field_inverse_var(void* arg) {
   3dde4:	defffb04 	addi	sp,sp,-20
   3dde8:	dfc00415 	stw	ra,16(sp)
   3ddec:	df000315 	stw	fp,12(sp)
   3ddf0:	df000304 	addi	fp,sp,12
   3ddf4:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3ddf8:	e0bfff17 	ldw	r2,-4(fp)
   3ddfc:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3de00:	e03ffd15 	stw	zero,-12(fp)
   3de04:	00001106 	br	3de4c <bench_field_inverse_var+0x68>
        secp256k1_fe_inv_var(&data->fe_x, &data->fe_x);
   3de08:	e0bffe17 	ldw	r2,-8(fp)
   3de0c:	10c01004 	addi	r3,r2,64
   3de10:	e0bffe17 	ldw	r2,-8(fp)
   3de14:	10801004 	addi	r2,r2,64
   3de18:	100b883a 	mov	r5,r2
   3de1c:	1809883a 	mov	r4,r3
   3de20:	00218fc0 	call	218fc <secp256k1_fe_inv_var>
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
   3de24:	e0bffe17 	ldw	r2,-8(fp)
   3de28:	10c01004 	addi	r3,r2,64
   3de2c:	e0bffe17 	ldw	r2,-8(fp)
   3de30:	10801c04 	addi	r2,r2,112
   3de34:	100b883a 	mov	r5,r2
   3de38:	1809883a 	mov	r4,r3
   3de3c:	0015ef80 	call	15ef8 <secp256k1_fe_add>

void bench_field_inverse_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3de40:	e0bffd17 	ldw	r2,-12(fp)
   3de44:	10800044 	addi	r2,r2,1
   3de48:	e0bffd15 	stw	r2,-12(fp)
   3de4c:	e0bffd17 	ldw	r2,-12(fp)
   3de50:	10938810 	cmplti	r2,r2,20000
   3de54:	103fec1e 	bne	r2,zero,3de08 <__alt_mem_epcs_flash_controller+0xfe034e08>
        secp256k1_fe_inv_var(&data->fe_x, &data->fe_x);
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
    }
}
   3de58:	0001883a 	nop
   3de5c:	e037883a 	mov	sp,fp
   3de60:	dfc00117 	ldw	ra,4(sp)
   3de64:	df000017 	ldw	fp,0(sp)
   3de68:	dec00204 	addi	sp,sp,8
   3de6c:	f800283a 	ret

0003de70 <bench_field_sqrt>:

void bench_field_sqrt(void* arg) {
   3de70:	defffb04 	addi	sp,sp,-20
   3de74:	dfc00415 	stw	ra,16(sp)
   3de78:	df000315 	stw	fp,12(sp)
   3de7c:	df000304 	addi	fp,sp,12
   3de80:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3de84:	e0bfff17 	ldw	r2,-4(fp)
   3de88:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3de8c:	e03ffd15 	stw	zero,-12(fp)
   3de90:	00001106 	br	3ded8 <bench_field_sqrt+0x68>
        secp256k1_fe_sqrt(&data->fe_x, &data->fe_x);
   3de94:	e0bffe17 	ldw	r2,-8(fp)
   3de98:	10c01004 	addi	r3,r2,64
   3de9c:	e0bffe17 	ldw	r2,-8(fp)
   3dea0:	10801004 	addi	r2,r2,64
   3dea4:	100b883a 	mov	r5,r2
   3dea8:	1809883a 	mov	r4,r3
   3deac:	00208c00 	call	208c0 <secp256k1_fe_sqrt>
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
   3deb0:	e0bffe17 	ldw	r2,-8(fp)
   3deb4:	10c01004 	addi	r3,r2,64
   3deb8:	e0bffe17 	ldw	r2,-8(fp)
   3debc:	10801c04 	addi	r2,r2,112
   3dec0:	100b883a 	mov	r5,r2
   3dec4:	1809883a 	mov	r4,r3
   3dec8:	0015ef80 	call	15ef8 <secp256k1_fe_add>

void bench_field_sqrt(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3decc:	e0bffd17 	ldw	r2,-12(fp)
   3ded0:	10800044 	addi	r2,r2,1
   3ded4:	e0bffd15 	stw	r2,-12(fp)
   3ded8:	e0bffd17 	ldw	r2,-12(fp)
   3dedc:	10938810 	cmplti	r2,r2,20000
   3dee0:	103fec1e 	bne	r2,zero,3de94 <__alt_mem_epcs_flash_controller+0xfe034e94>
        secp256k1_fe_sqrt(&data->fe_x, &data->fe_x);
        secp256k1_fe_add(&data->fe_x, &data->fe_y);
    }
}
   3dee4:	0001883a 	nop
   3dee8:	e037883a 	mov	sp,fp
   3deec:	dfc00117 	ldw	ra,4(sp)
   3def0:	df000017 	ldw	fp,0(sp)
   3def4:	dec00204 	addi	sp,sp,8
   3def8:	f800283a 	ret

0003defc <bench_group_double_var>:

void bench_group_double_var(void* arg) {
   3defc:	defffb04 	addi	sp,sp,-20
   3df00:	dfc00415 	stw	ra,16(sp)
   3df04:	df000315 	stw	fp,12(sp)
   3df08:	df000304 	addi	fp,sp,12
   3df0c:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3df10:	e0bfff17 	ldw	r2,-4(fp)
   3df14:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3df18:	e03ffd15 	stw	zero,-12(fp)
   3df1c:	00000b06 	br	3df4c <bench_group_double_var+0x50>
        secp256k1_gej_double_var(&data->gej_x, &data->gej_x, NULL);
   3df20:	e0bffe17 	ldw	r2,-8(fp)
   3df24:	10c05a04 	addi	r3,r2,360
   3df28:	e0bffe17 	ldw	r2,-8(fp)
   3df2c:	10805a04 	addi	r2,r2,360
   3df30:	000d883a 	mov	r6,zero
   3df34:	100b883a 	mov	r5,r2
   3df38:	1809883a 	mov	r4,r3
   3df3c:	00231500 	call	23150 <secp256k1_gej_double_var>

void bench_group_double_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3df40:	e0bffd17 	ldw	r2,-12(fp)
   3df44:	10800044 	addi	r2,r2,1
   3df48:	e0bffd15 	stw	r2,-12(fp)
   3df4c:	e0fffd17 	ldw	r3,-12(fp)
   3df50:	008000f4 	movhi	r2,3
   3df54:	10834fc4 	addi	r2,r2,3391
   3df58:	10fff10e 	bge	r2,r3,3df20 <__alt_mem_epcs_flash_controller+0xfe034f20>
        secp256k1_gej_double_var(&data->gej_x, &data->gej_x, NULL);
    }
}
   3df5c:	0001883a 	nop
   3df60:	e037883a 	mov	sp,fp
   3df64:	dfc00117 	ldw	ra,4(sp)
   3df68:	df000017 	ldw	fp,0(sp)
   3df6c:	dec00204 	addi	sp,sp,8
   3df70:	f800283a 	ret

0003df74 <bench_group_add_var>:

void bench_group_add_var(void* arg) {
   3df74:	defffb04 	addi	sp,sp,-20
   3df78:	dfc00415 	stw	ra,16(sp)
   3df7c:	df000315 	stw	fp,12(sp)
   3df80:	df000304 	addi	fp,sp,12
   3df84:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3df88:	e0bfff17 	ldw	r2,-4(fp)
   3df8c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3df90:	e03ffd15 	stw	zero,-12(fp)
   3df94:	00000e06 	br	3dfd0 <bench_group_add_var+0x5c>
        secp256k1_gej_add_var(&data->gej_x, &data->gej_x, &data->gej_y, NULL);
   3df98:	e0bffe17 	ldw	r2,-8(fp)
   3df9c:	10c05a04 	addi	r3,r2,360
   3dfa0:	e0bffe17 	ldw	r2,-8(fp)
   3dfa4:	11005a04 	addi	r4,r2,360
   3dfa8:	e0bffe17 	ldw	r2,-8(fp)
   3dfac:	10807f04 	addi	r2,r2,508
   3dfb0:	000f883a 	mov	r7,zero
   3dfb4:	100d883a 	mov	r6,r2
   3dfb8:	200b883a 	mov	r5,r4
   3dfbc:	1809883a 	mov	r4,r3
   3dfc0:	00234c40 	call	234c4 <secp256k1_gej_add_var>

void bench_group_add_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3dfc4:	e0bffd17 	ldw	r2,-12(fp)
   3dfc8:	10800044 	addi	r2,r2,1
   3dfcc:	e0bffd15 	stw	r2,-12(fp)
   3dfd0:	e0fffd17 	ldw	r3,-12(fp)
   3dfd4:	008000f4 	movhi	r2,3
   3dfd8:	10834fc4 	addi	r2,r2,3391
   3dfdc:	10ffee0e 	bge	r2,r3,3df98 <__alt_mem_epcs_flash_controller+0xfe034f98>
        secp256k1_gej_add_var(&data->gej_x, &data->gej_x, &data->gej_y, NULL);
    }
}
   3dfe0:	0001883a 	nop
   3dfe4:	e037883a 	mov	sp,fp
   3dfe8:	dfc00117 	ldw	ra,4(sp)
   3dfec:	df000017 	ldw	fp,0(sp)
   3dff0:	dec00204 	addi	sp,sp,8
   3dff4:	f800283a 	ret

0003dff8 <bench_group_add_affine>:

void bench_group_add_affine(void* arg) {
   3dff8:	defffb04 	addi	sp,sp,-20
   3dffc:	dfc00415 	stw	ra,16(sp)
   3e000:	df000315 	stw	fp,12(sp)
   3e004:	df000304 	addi	fp,sp,12
   3e008:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3e00c:	e0bfff17 	ldw	r2,-4(fp)
   3e010:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3e014:	e03ffd15 	stw	zero,-12(fp)
   3e018:	00000d06 	br	3e050 <bench_group_add_affine+0x58>
        secp256k1_gej_add_ge(&data->gej_x, &data->gej_x, &data->ge_y);
   3e01c:	e0bffe17 	ldw	r2,-8(fp)
   3e020:	10c05a04 	addi	r3,r2,360
   3e024:	e0bffe17 	ldw	r2,-8(fp)
   3e028:	11005a04 	addi	r4,r2,360
   3e02c:	e0bffe17 	ldw	r2,-8(fp)
   3e030:	10804104 	addi	r2,r2,260
   3e034:	100d883a 	mov	r6,r2
   3e038:	200b883a 	mov	r5,r4
   3e03c:	1809883a 	mov	r4,r3
   3e040:	00244140 	call	24414 <secp256k1_gej_add_ge>

void bench_group_add_affine(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3e044:	e0bffd17 	ldw	r2,-12(fp)
   3e048:	10800044 	addi	r2,r2,1
   3e04c:	e0bffd15 	stw	r2,-12(fp)
   3e050:	e0fffd17 	ldw	r3,-12(fp)
   3e054:	008000f4 	movhi	r2,3
   3e058:	10834fc4 	addi	r2,r2,3391
   3e05c:	10ffef0e 	bge	r2,r3,3e01c <__alt_mem_epcs_flash_controller+0xfe03501c>
        secp256k1_gej_add_ge(&data->gej_x, &data->gej_x, &data->ge_y);
    }
}
   3e060:	0001883a 	nop
   3e064:	e037883a 	mov	sp,fp
   3e068:	dfc00117 	ldw	ra,4(sp)
   3e06c:	df000017 	ldw	fp,0(sp)
   3e070:	dec00204 	addi	sp,sp,8
   3e074:	f800283a 	ret

0003e078 <bench_group_add_affine_var>:

void bench_group_add_affine_var(void* arg) {
   3e078:	defffb04 	addi	sp,sp,-20
   3e07c:	dfc00415 	stw	ra,16(sp)
   3e080:	df000315 	stw	fp,12(sp)
   3e084:	df000304 	addi	fp,sp,12
   3e088:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3e08c:	e0bfff17 	ldw	r2,-4(fp)
   3e090:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 200000; i++) {
   3e094:	e03ffd15 	stw	zero,-12(fp)
   3e098:	00000e06 	br	3e0d4 <bench_group_add_affine_var+0x5c>
        secp256k1_gej_add_ge_var(&data->gej_x, &data->gej_x, &data->ge_y, NULL);
   3e09c:	e0bffe17 	ldw	r2,-8(fp)
   3e0a0:	10c05a04 	addi	r3,r2,360
   3e0a4:	e0bffe17 	ldw	r2,-8(fp)
   3e0a8:	11005a04 	addi	r4,r2,360
   3e0ac:	e0bffe17 	ldw	r2,-8(fp)
   3e0b0:	10804104 	addi	r2,r2,260
   3e0b4:	000f883a 	mov	r7,zero
   3e0b8:	100d883a 	mov	r6,r2
   3e0bc:	200b883a 	mov	r5,r4
   3e0c0:	1809883a 	mov	r4,r3
   3e0c4:	00239ac0 	call	239ac <secp256k1_gej_add_ge_var>

void bench_group_add_affine_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 200000; i++) {
   3e0c8:	e0bffd17 	ldw	r2,-12(fp)
   3e0cc:	10800044 	addi	r2,r2,1
   3e0d0:	e0bffd15 	stw	r2,-12(fp)
   3e0d4:	e0fffd17 	ldw	r3,-12(fp)
   3e0d8:	008000f4 	movhi	r2,3
   3e0dc:	10834fc4 	addi	r2,r2,3391
   3e0e0:	10ffee0e 	bge	r2,r3,3e09c <__alt_mem_epcs_flash_controller+0xfe03509c>
        secp256k1_gej_add_ge_var(&data->gej_x, &data->gej_x, &data->ge_y, NULL);
    }
}
   3e0e4:	0001883a 	nop
   3e0e8:	e037883a 	mov	sp,fp
   3e0ec:	dfc00117 	ldw	ra,4(sp)
   3e0f0:	df000017 	ldw	fp,0(sp)
   3e0f4:	dec00204 	addi	sp,sp,8
   3e0f8:	f800283a 	ret

0003e0fc <bench_group_jacobi_var>:

void bench_group_jacobi_var(void* arg) {
   3e0fc:	defffb04 	addi	sp,sp,-20
   3e100:	dfc00415 	stw	ra,16(sp)
   3e104:	df000315 	stw	fp,12(sp)
   3e108:	df000304 	addi	fp,sp,12
   3e10c:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3e110:	e0bfff17 	ldw	r2,-4(fp)
   3e114:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3e118:	e03ffd15 	stw	zero,-12(fp)
   3e11c:	00000706 	br	3e13c <bench_group_jacobi_var+0x40>
        secp256k1_gej_has_quad_y_var(&data->gej_x);
   3e120:	e0bffe17 	ldw	r2,-8(fp)
   3e124:	10805a04 	addi	r2,r2,360
   3e128:	1009883a 	mov	r4,r2
   3e12c:	0024e580 	call	24e58 <secp256k1_gej_has_quad_y_var>

void bench_group_jacobi_var(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3e130:	e0bffd17 	ldw	r2,-12(fp)
   3e134:	10800044 	addi	r2,r2,1
   3e138:	e0bffd15 	stw	r2,-12(fp)
   3e13c:	e0bffd17 	ldw	r2,-12(fp)
   3e140:	10938810 	cmplti	r2,r2,20000
   3e144:	103ff61e 	bne	r2,zero,3e120 <__alt_mem_epcs_flash_controller+0xfe035120>
        secp256k1_gej_has_quad_y_var(&data->gej_x);
    }
}
   3e148:	0001883a 	nop
   3e14c:	e037883a 	mov	sp,fp
   3e150:	dfc00117 	ldw	ra,4(sp)
   3e154:	df000017 	ldw	fp,0(sp)
   3e158:	dec00204 	addi	sp,sp,8
   3e15c:	f800283a 	ret

0003e160 <bench_ecmult_wnaf>:

void bench_ecmult_wnaf(void* arg) {
   3e160:	defffb04 	addi	sp,sp,-20
   3e164:	dfc00415 	stw	ra,16(sp)
   3e168:	df000315 	stw	fp,12(sp)
   3e16c:	df000304 	addi	fp,sp,12
   3e170:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3e174:	e0bfff17 	ldw	r2,-4(fp)
   3e178:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3e17c:	e03ffd15 	stw	zero,-12(fp)
   3e180:	00001306 	br	3e1d0 <bench_ecmult_wnaf+0x70>
        secp256k1_ecmult_wnaf(data->wnaf, 256, &data->scalar_x, WINDOW_A);
   3e184:	e0bffe17 	ldw	r2,-8(fp)
   3e188:	1080b404 	addi	r2,r2,720
   3e18c:	e0fffe17 	ldw	r3,-8(fp)
   3e190:	01c00144 	movi	r7,5
   3e194:	180d883a 	mov	r6,r3
   3e198:	01404004 	movi	r5,256
   3e19c:	1009883a 	mov	r4,r2
   3e1a0:	00377ec0 	call	377ec <secp256k1_ecmult_wnaf>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3e1a4:	e0fffe17 	ldw	r3,-8(fp)
   3e1a8:	e13ffe17 	ldw	r4,-8(fp)
   3e1ac:	e0bffe17 	ldw	r2,-8(fp)
   3e1b0:	10800804 	addi	r2,r2,32
   3e1b4:	100d883a 	mov	r6,r2
   3e1b8:	200b883a 	mov	r5,r4
   3e1bc:	1809883a 	mov	r4,r3
   3e1c0:	00258640 	call	25864 <secp256k1_scalar_add>

void bench_ecmult_wnaf(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3e1c4:	e0bffd17 	ldw	r2,-12(fp)
   3e1c8:	10800044 	addi	r2,r2,1
   3e1cc:	e0bffd15 	stw	r2,-12(fp)
   3e1d0:	e0bffd17 	ldw	r2,-12(fp)
   3e1d4:	10938810 	cmplti	r2,r2,20000
   3e1d8:	103fea1e 	bne	r2,zero,3e184 <__alt_mem_epcs_flash_controller+0xfe035184>
        secp256k1_ecmult_wnaf(data->wnaf, 256, &data->scalar_x, WINDOW_A);
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3e1dc:	0001883a 	nop
   3e1e0:	e037883a 	mov	sp,fp
   3e1e4:	dfc00117 	ldw	ra,4(sp)
   3e1e8:	df000017 	ldw	fp,0(sp)
   3e1ec:	dec00204 	addi	sp,sp,8
   3e1f0:	f800283a 	ret

0003e1f4 <bench_wnaf_const>:

void bench_wnaf_const(void* arg) {
   3e1f4:	defff504 	addi	sp,sp,-44
   3e1f8:	dfc00a15 	stw	ra,40(sp)
   3e1fc:	df000915 	stw	fp,36(sp)
   3e200:	df000904 	addi	fp,sp,36
   3e204:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3e208:	e0bfff17 	ldw	r2,-4(fp)
   3e20c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < 20000; i++) {
   3e210:	e03ffd15 	stw	zero,-12(fp)
   3e214:	00001e06 	br	3e290 <bench_wnaf_const+0x9c>
        secp256k1_wnaf_const(data->wnaf, data->scalar_x, WINDOW_A);
   3e218:	e0bffe17 	ldw	r2,-8(fp)
   3e21c:	1100b404 	addi	r4,r2,720
   3e220:	e0bffe17 	ldw	r2,-8(fp)
   3e224:	00c00144 	movi	r3,5
   3e228:	d8c00515 	stw	r3,20(sp)
   3e22c:	10c00317 	ldw	r3,12(r2)
   3e230:	d8c00015 	stw	r3,0(sp)
   3e234:	10c00417 	ldw	r3,16(r2)
   3e238:	d8c00115 	stw	r3,4(sp)
   3e23c:	10c00517 	ldw	r3,20(r2)
   3e240:	d8c00215 	stw	r3,8(sp)
   3e244:	10c00617 	ldw	r3,24(r2)
   3e248:	d8c00315 	stw	r3,12(sp)
   3e24c:	10c00717 	ldw	r3,28(r2)
   3e250:	d8c00415 	stw	r3,16(sp)
   3e254:	11400017 	ldw	r5,0(r2)
   3e258:	11800117 	ldw	r6,4(r2)
   3e25c:	11c00217 	ldw	r7,8(r2)
   3e260:	00380380 	call	38038 <secp256k1_wnaf_const>
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
   3e264:	e0fffe17 	ldw	r3,-8(fp)
   3e268:	e13ffe17 	ldw	r4,-8(fp)
   3e26c:	e0bffe17 	ldw	r2,-8(fp)
   3e270:	10800804 	addi	r2,r2,32
   3e274:	100d883a 	mov	r6,r2
   3e278:	200b883a 	mov	r5,r4
   3e27c:	1809883a 	mov	r4,r3
   3e280:	00258640 	call	25864 <secp256k1_scalar_add>

void bench_wnaf_const(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;

    for (i = 0; i < 20000; i++) {
   3e284:	e0bffd17 	ldw	r2,-12(fp)
   3e288:	10800044 	addi	r2,r2,1
   3e28c:	e0bffd15 	stw	r2,-12(fp)
   3e290:	e0bffd17 	ldw	r2,-12(fp)
   3e294:	10938810 	cmplti	r2,r2,20000
   3e298:	103fdf1e 	bne	r2,zero,3e218 <__alt_mem_epcs_flash_controller+0xfe035218>
        secp256k1_wnaf_const(data->wnaf, data->scalar_x, WINDOW_A);
        secp256k1_scalar_add(&data->scalar_x, &data->scalar_x, &data->scalar_y);
    }
}
   3e29c:	0001883a 	nop
   3e2a0:	e037883a 	mov	sp,fp
   3e2a4:	dfc00117 	ldw	ra,4(sp)
   3e2a8:	df000017 	ldw	fp,0(sp)
   3e2ac:	dec00204 	addi	sp,sp,8
   3e2b0:	f800283a 	ret

0003e2b4 <bench_sha256>:


void bench_sha256(void* arg) {
   3e2b4:	deffe204 	addi	sp,sp,-120
   3e2b8:	dfc01d15 	stw	ra,116(sp)
   3e2bc:	df001c15 	stw	fp,112(sp)
   3e2c0:	df001c04 	addi	fp,sp,112
   3e2c4:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3e2c8:	e0bfff17 	ldw	r2,-4(fp)
   3e2cc:	e0bfe515 	stw	r2,-108(fp)
    secp256k1_sha256_t sha;

    for (i = 0; i < 20000; i++) {
   3e2d0:	e03fe415 	stw	zero,-112(fp)
   3e2d4:	00001306 	br	3e324 <bench_sha256+0x70>
        secp256k1_sha256_initialize(&sha);
   3e2d8:	e0bfe604 	addi	r2,fp,-104
   3e2dc:	1009883a 	mov	r4,r2
   3e2e0:	000dec00 	call	dec0 <secp256k1_sha256_initialize>
        secp256k1_sha256_write(&sha, data->data, 32);
   3e2e4:	e0bfe517 	ldw	r2,-108(fp)
   3e2e8:	10c0a404 	addi	r3,r2,656
   3e2ec:	e0bfe604 	addi	r2,fp,-104
   3e2f0:	01800804 	movi	r6,32
   3e2f4:	180b883a 	mov	r5,r3
   3e2f8:	1009883a 	mov	r4,r2
   3e2fc:	0012e8c0 	call	12e8c <secp256k1_sha256_write>
        secp256k1_sha256_finalize(&sha, data->data);
   3e300:	e0bfe517 	ldw	r2,-108(fp)
   3e304:	10c0a404 	addi	r3,r2,656
   3e308:	e0bfe604 	addi	r2,fp,-104
   3e30c:	180b883a 	mov	r5,r3
   3e310:	1009883a 	mov	r4,r2
   3e314:	0012f980 	call	12f98 <secp256k1_sha256_finalize>
void bench_sha256(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
    secp256k1_sha256_t sha;

    for (i = 0; i < 20000; i++) {
   3e318:	e0bfe417 	ldw	r2,-112(fp)
   3e31c:	10800044 	addi	r2,r2,1
   3e320:	e0bfe415 	stw	r2,-112(fp)
   3e324:	e0bfe417 	ldw	r2,-112(fp)
   3e328:	10938810 	cmplti	r2,r2,20000
   3e32c:	103fea1e 	bne	r2,zero,3e2d8 <__alt_mem_epcs_flash_controller+0xfe0352d8>
        secp256k1_sha256_initialize(&sha);
        secp256k1_sha256_write(&sha, data->data, 32);
        secp256k1_sha256_finalize(&sha, data->data);
    }
}
   3e330:	0001883a 	nop
   3e334:	e037883a 	mov	sp,fp
   3e338:	dfc00117 	ldw	ra,4(sp)
   3e33c:	df000017 	ldw	fp,0(sp)
   3e340:	dec00204 	addi	sp,sp,8
   3e344:	f800283a 	ret

0003e348 <bench_hmac_sha256>:

void bench_hmac_sha256(void* arg) {
   3e348:	deffc904 	addi	sp,sp,-220
   3e34c:	dfc03615 	stw	ra,216(sp)
   3e350:	df003515 	stw	fp,212(sp)
   3e354:	df003504 	addi	fp,sp,212
   3e358:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3e35c:	e0bfff17 	ldw	r2,-4(fp)
   3e360:	e0bfcc15 	stw	r2,-208(fp)
    secp256k1_hmac_sha256_t hmac;

    for (i = 0; i < 20000; i++) {
   3e364:	e03fcb15 	stw	zero,-212(fp)
   3e368:	00001706 	br	3e3c8 <bench_hmac_sha256+0x80>
        secp256k1_hmac_sha256_initialize(&hmac, data->data, 32);
   3e36c:	e0bfcc17 	ldw	r2,-208(fp)
   3e370:	10c0a404 	addi	r3,r2,656
   3e374:	e0bfcd04 	addi	r2,fp,-204
   3e378:	01800804 	movi	r6,32
   3e37c:	180b883a 	mov	r5,r3
   3e380:	1009883a 	mov	r4,r2
   3e384:	00131600 	call	13160 <secp256k1_hmac_sha256_initialize>
        secp256k1_hmac_sha256_write(&hmac, data->data, 32);
   3e388:	e0bfcc17 	ldw	r2,-208(fp)
   3e38c:	10c0a404 	addi	r3,r2,656
   3e390:	e0bfcd04 	addi	r2,fp,-204
   3e394:	01800804 	movi	r6,32
   3e398:	180b883a 	mov	r5,r3
   3e39c:	1009883a 	mov	r4,r2
   3e3a0:	001331c0 	call	1331c <secp256k1_hmac_sha256_write>
        secp256k1_hmac_sha256_finalize(&hmac, data->data);
   3e3a4:	e0bfcc17 	ldw	r2,-208(fp)
   3e3a8:	10c0a404 	addi	r3,r2,656
   3e3ac:	e0bfcd04 	addi	r2,fp,-204
   3e3b0:	180b883a 	mov	r5,r3
   3e3b4:	1009883a 	mov	r4,r2
   3e3b8:	00133640 	call	13364 <secp256k1_hmac_sha256_finalize>
void bench_hmac_sha256(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
    secp256k1_hmac_sha256_t hmac;

    for (i = 0; i < 20000; i++) {
   3e3bc:	e0bfcb17 	ldw	r2,-212(fp)
   3e3c0:	10800044 	addi	r2,r2,1
   3e3c4:	e0bfcb15 	stw	r2,-212(fp)
   3e3c8:	e0bfcb17 	ldw	r2,-212(fp)
   3e3cc:	10938810 	cmplti	r2,r2,20000
   3e3d0:	103fe61e 	bne	r2,zero,3e36c <__alt_mem_epcs_flash_controller+0xfe03536c>
        secp256k1_hmac_sha256_initialize(&hmac, data->data, 32);
        secp256k1_hmac_sha256_write(&hmac, data->data, 32);
        secp256k1_hmac_sha256_finalize(&hmac, data->data);
    }
}
   3e3d4:	0001883a 	nop
   3e3d8:	e037883a 	mov	sp,fp
   3e3dc:	dfc00117 	ldw	ra,4(sp)
   3e3e0:	df000017 	ldw	fp,0(sp)
   3e3e4:	dec00204 	addi	sp,sp,8
   3e3e8:	f800283a 	ret

0003e3ec <bench_rfc6979_hmac_sha256>:

void bench_rfc6979_hmac_sha256(void* arg) {
   3e3ec:	deffea04 	addi	sp,sp,-88
   3e3f0:	dfc01515 	stw	ra,84(sp)
   3e3f4:	df001415 	stw	fp,80(sp)
   3e3f8:	df001404 	addi	fp,sp,80
   3e3fc:	e13fff15 	stw	r4,-4(fp)
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
   3e400:	e0bfff17 	ldw	r2,-4(fp)
   3e404:	e0bfed15 	stw	r2,-76(fp)
    secp256k1_rfc6979_hmac_sha256_t rng;

    for (i = 0; i < 20000; i++) {
   3e408:	e03fec15 	stw	zero,-80(fp)
   3e40c:	00001106 	br	3e454 <bench_rfc6979_hmac_sha256+0x68>
        secp256k1_rfc6979_hmac_sha256_initialize(&rng, data->data, 64);
   3e410:	e0bfed17 	ldw	r2,-76(fp)
   3e414:	10c0a404 	addi	r3,r2,656
   3e418:	e0bfee04 	addi	r2,fp,-72
   3e41c:	01801004 	movi	r6,64
   3e420:	180b883a 	mov	r5,r3
   3e424:	1009883a 	mov	r4,r2
   3e428:	00133e00 	call	133e0 <secp256k1_rfc6979_hmac_sha256_initialize>
        secp256k1_rfc6979_hmac_sha256_generate(&rng, data->data, 32);
   3e42c:	e0bfed17 	ldw	r2,-76(fp)
   3e430:	10c0a404 	addi	r3,r2,656
   3e434:	e0bfee04 	addi	r2,fp,-72
   3e438:	01800804 	movi	r6,32
   3e43c:	180b883a 	mov	r5,r3
   3e440:	1009883a 	mov	r4,r2
   3e444:	00135800 	call	13580 <secp256k1_rfc6979_hmac_sha256_generate>
void bench_rfc6979_hmac_sha256(void* arg) {
    int i;
    bench_inv_t *data = (bench_inv_t*)arg;
    secp256k1_rfc6979_hmac_sha256_t rng;

    for (i = 0; i < 20000; i++) {
   3e448:	e0bfec17 	ldw	r2,-80(fp)
   3e44c:	10800044 	addi	r2,r2,1
   3e450:	e0bfec15 	stw	r2,-80(fp)
   3e454:	e0bfec17 	ldw	r2,-80(fp)
   3e458:	10938810 	cmplti	r2,r2,20000
   3e45c:	103fec1e 	bne	r2,zero,3e410 <__alt_mem_epcs_flash_controller+0xfe035410>
        secp256k1_rfc6979_hmac_sha256_initialize(&rng, data->data, 64);
        secp256k1_rfc6979_hmac_sha256_generate(&rng, data->data, 32);
    }
}
   3e460:	0001883a 	nop
   3e464:	e037883a 	mov	sp,fp
   3e468:	dfc00117 	ldw	ra,4(sp)
   3e46c:	df000017 	ldw	fp,0(sp)
   3e470:	dec00204 	addi	sp,sp,8
   3e474:	f800283a 	ret

0003e478 <bench_context_verify>:

void bench_context_verify(void* arg) {
   3e478:	defffc04 	addi	sp,sp,-16
   3e47c:	dfc00315 	stw	ra,12(sp)
   3e480:	df000215 	stw	fp,8(sp)
   3e484:	df000204 	addi	fp,sp,8
   3e488:	e13fff15 	stw	r4,-4(fp)
    int i;
    (void)arg;
    for (i = 0; i < 20; i++) {
   3e48c:	e03ffe15 	stw	zero,-8(fp)
   3e490:	00000706 	br	3e4b0 <bench_context_verify+0x38>
        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_VERIFY));
   3e494:	01004044 	movi	r4,257
   3e498:	003acc80 	call	3acc8 <secp256k1_context_create>
   3e49c:	1009883a 	mov	r4,r2
   3e4a0:	003ae940 	call	3ae94 <secp256k1_context_destroy>
}

void bench_context_verify(void* arg) {
    int i;
    (void)arg;
    for (i = 0; i < 20; i++) {
   3e4a4:	e0bffe17 	ldw	r2,-8(fp)
   3e4a8:	10800044 	addi	r2,r2,1
   3e4ac:	e0bffe15 	stw	r2,-8(fp)
   3e4b0:	e0bffe17 	ldw	r2,-8(fp)
   3e4b4:	10800510 	cmplti	r2,r2,20
   3e4b8:	103ff61e 	bne	r2,zero,3e494 <__alt_mem_epcs_flash_controller+0xfe035494>
        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_VERIFY));
    }
}
   3e4bc:	0001883a 	nop
   3e4c0:	e037883a 	mov	sp,fp
   3e4c4:	dfc00117 	ldw	ra,4(sp)
   3e4c8:	df000017 	ldw	fp,0(sp)
   3e4cc:	dec00204 	addi	sp,sp,8
   3e4d0:	f800283a 	ret

0003e4d4 <bench_context_sign>:

void bench_context_sign(void* arg) {
   3e4d4:	defffc04 	addi	sp,sp,-16
   3e4d8:	dfc00315 	stw	ra,12(sp)
   3e4dc:	df000215 	stw	fp,8(sp)
   3e4e0:	df000204 	addi	fp,sp,8
   3e4e4:	e13fff15 	stw	r4,-4(fp)
    int i;
    (void)arg;
    for (i = 0; i < 200; i++) {
   3e4e8:	e03ffe15 	stw	zero,-8(fp)
   3e4ec:	00000706 	br	3e50c <bench_context_sign+0x38>
        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_SIGN));
   3e4f0:	01008044 	movi	r4,513
   3e4f4:	003acc80 	call	3acc8 <secp256k1_context_create>
   3e4f8:	1009883a 	mov	r4,r2
   3e4fc:	003ae940 	call	3ae94 <secp256k1_context_destroy>
}

void bench_context_sign(void* arg) {
    int i;
    (void)arg;
    for (i = 0; i < 200; i++) {
   3e500:	e0bffe17 	ldw	r2,-8(fp)
   3e504:	10800044 	addi	r2,r2,1
   3e508:	e0bffe15 	stw	r2,-8(fp)
   3e50c:	e0bffe17 	ldw	r2,-8(fp)
   3e510:	10803210 	cmplti	r2,r2,200
   3e514:	103ff61e 	bne	r2,zero,3e4f0 <__alt_mem_epcs_flash_controller+0xfe0354f0>
        secp256k1_context_destroy(secp256k1_context_create(SECP256K1_CONTEXT_SIGN));
    }
}
   3e518:	0001883a 	nop
   3e51c:	e037883a 	mov	sp,fp
   3e520:	dfc00117 	ldw	ra,4(sp)
   3e524:	df000017 	ldw	fp,0(sp)
   3e528:	dec00204 	addi	sp,sp,8
   3e52c:	f800283a 	ret

0003e530 <have_flag>:
        secp256k1_num_jacobi(&nx, &norder);
    }
}
#endif

int have_flag(int argc, char** argv, char *flag) {
   3e530:	defffa04 	addi	sp,sp,-24
   3e534:	dfc00515 	stw	ra,20(sp)
   3e538:	df000415 	stw	fp,16(sp)
   3e53c:	df000404 	addi	fp,sp,16
   3e540:	e13ffd15 	stw	r4,-12(fp)
   3e544:	e17ffe15 	stw	r5,-8(fp)
   3e548:	e1bfff15 	stw	r6,-4(fp)
    char** argm = argv + argc;
   3e54c:	e0bffd17 	ldw	r2,-12(fp)
   3e550:	1085883a 	add	r2,r2,r2
   3e554:	1085883a 	add	r2,r2,r2
   3e558:	1007883a 	mov	r3,r2
   3e55c:	e0bffe17 	ldw	r2,-8(fp)
   3e560:	10c5883a 	add	r2,r2,r3
   3e564:	e0bffc15 	stw	r2,-16(fp)
    argv++;
   3e568:	e0bffe17 	ldw	r2,-8(fp)
   3e56c:	10800104 	addi	r2,r2,4
   3e570:	e0bffe15 	stw	r2,-8(fp)
    if (argv == argm) {
   3e574:	e0fffe17 	ldw	r3,-8(fp)
   3e578:	e0bffc17 	ldw	r2,-16(fp)
   3e57c:	18800d1e 	bne	r3,r2,3e5b4 <have_flag+0x84>
        return 1;
   3e580:	00800044 	movi	r2,1
   3e584:	00001106 	br	3e5cc <have_flag+0x9c>
    }
    while (argv != NULL && argv != argm) {
        if (strcmp(*argv, flag) == 0) {
   3e588:	e0bffe17 	ldw	r2,-8(fp)
   3e58c:	10800017 	ldw	r2,0(r2)
   3e590:	e17fff17 	ldw	r5,-4(fp)
   3e594:	1009883a 	mov	r4,r2
   3e598:	0046bd80 	call	46bd8 <strcmp>
   3e59c:	1000021e 	bne	r2,zero,3e5a8 <have_flag+0x78>
            return 1;
   3e5a0:	00800044 	movi	r2,1
   3e5a4:	00000906 	br	3e5cc <have_flag+0x9c>
        }
        argv++;
   3e5a8:	e0bffe17 	ldw	r2,-8(fp)
   3e5ac:	10800104 	addi	r2,r2,4
   3e5b0:	e0bffe15 	stw	r2,-8(fp)
    char** argm = argv + argc;
    argv++;
    if (argv == argm) {
        return 1;
    }
    while (argv != NULL && argv != argm) {
   3e5b4:	e0bffe17 	ldw	r2,-8(fp)
   3e5b8:	10000326 	beq	r2,zero,3e5c8 <have_flag+0x98>
   3e5bc:	e0fffe17 	ldw	r3,-8(fp)
   3e5c0:	e0bffc17 	ldw	r2,-16(fp)
   3e5c4:	18bff01e 	bne	r3,r2,3e588 <__alt_mem_epcs_flash_controller+0xfe035588>
        if (strcmp(*argv, flag) == 0) {
            return 1;
        }
        argv++;
    }
    return 0;
   3e5c8:	0005883a 	mov	r2,zero
}
   3e5cc:	e037883a 	mov	sp,fp
   3e5d0:	dfc00117 	ldw	ra,4(sp)
   3e5d4:	df000017 	ldw	fp,0(sp)
   3e5d8:	dec00204 	addi	sp,sp,8
   3e5dc:	f800283a 	ret

0003e5e0 <bech32_polymod_step>:
#include <stdint.h>
#include <string.h>

#include "..\include\btc\segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
   3e5e0:	defffd04 	addi	sp,sp,-12
   3e5e4:	df000215 	stw	fp,8(sp)
   3e5e8:	df000204 	addi	fp,sp,8
   3e5ec:	e13fff15 	stw	r4,-4(fp)
    uint8_t b = pre >> 25;
   3e5f0:	e0bfff17 	ldw	r2,-4(fp)
   3e5f4:	1004d67a 	srli	r2,r2,25
   3e5f8:	e0bffe05 	stb	r2,-8(fp)
    return ((pre & 0x1FFFFFF) << 5) ^
   3e5fc:	e0ffff17 	ldw	r3,-4(fp)
   3e600:	00808034 	movhi	r2,512
   3e604:	10bfffc4 	addi	r2,r2,-1
   3e608:	1884703a 	and	r2,r3,r2
   3e60c:	1006917a 	slli	r3,r2,5
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
   3e610:	e0bffe03 	ldbu	r2,-8(fp)
   3e614:	1080004c 	andi	r2,r2,1
   3e618:	0085c83a 	sub	r2,zero,r2
   3e61c:	1009883a 	mov	r4,r2
   3e620:	008edab4 	movhi	r2,15210
   3e624:	1095ec84 	addi	r2,r2,22450
   3e628:	2084703a 	and	r2,r4,r2

#include "..\include\btc\segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
   3e62c:	1886f03a 	xor	r3,r3,r2
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
   3e630:	e0bffe03 	ldbu	r2,-8(fp)
   3e634:	1004d07a 	srli	r2,r2,1
   3e638:	10803fcc 	andi	r2,r2,255
   3e63c:	1080004c 	andi	r2,r2,1
   3e640:	0085c83a 	sub	r2,zero,r2
   3e644:	1009883a 	mov	r4,r2
   3e648:	00899474 	movhi	r2,9809
   3e64c:	10a39b44 	addi	r2,r2,-29075
   3e650:	2084703a 	and	r2,r4,r2
#include "..\include\btc\segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
   3e654:	1886f03a 	xor	r3,r3,r2
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
        (-((b >> 2) & 1) & 0x1ea119faUL) ^
   3e658:	e0bffe03 	ldbu	r2,-8(fp)
   3e65c:	1004d0ba 	srli	r2,r2,2
   3e660:	10803fcc 	andi	r2,r2,255
   3e664:	1080004c 	andi	r2,r2,1
   3e668:	0085c83a 	sub	r2,zero,r2
   3e66c:	1009883a 	mov	r4,r2
   3e670:	0087a874 	movhi	r2,7841
   3e674:	10867e84 	addi	r2,r2,6650
   3e678:	2084703a 	and	r2,r4,r2

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
   3e67c:	1886f03a 	xor	r3,r3,r2
        (-((b >> 2) & 1) & 0x1ea119faUL) ^
        (-((b >> 3) & 1) & 0x3d4233ddUL) ^
   3e680:	e0bffe03 	ldbu	r2,-8(fp)
   3e684:	1004d0fa 	srli	r2,r2,3
   3e688:	10803fcc 	andi	r2,r2,255
   3e68c:	1080004c 	andi	r2,r2,1
   3e690:	0085c83a 	sub	r2,zero,r2
   3e694:	1009883a 	mov	r4,r2
   3e698:	008f50b4 	movhi	r2,15682
   3e69c:	108cf744 	addi	r2,r2,13277
   3e6a0:	2084703a 	and	r2,r4,r2
uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
        (-((b >> 2) & 1) & 0x1ea119faUL) ^
   3e6a4:	1886f03a 	xor	r3,r3,r2
        (-((b >> 3) & 1) & 0x3d4233ddUL) ^
        (-((b >> 4) & 1) & 0x2a1462b3UL);
   3e6a8:	e0bffe03 	ldbu	r2,-8(fp)
   3e6ac:	1004d13a 	srli	r2,r2,4
   3e6b0:	10803fcc 	andi	r2,r2,255
   3e6b4:	1080004c 	andi	r2,r2,1
   3e6b8:	0085c83a 	sub	r2,zero,r2
   3e6bc:	1009883a 	mov	r4,r2
   3e6c0:	008a8534 	movhi	r2,10772
   3e6c4:	1098acc4 	addi	r2,r2,25267
   3e6c8:	2084703a 	and	r2,r4,r2

#include "..\include\btc\segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^
   3e6cc:	1884f03a 	xor	r2,r3,r2
        (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
        (-((b >> 1) & 1) & 0x26508e6dUL) ^
        (-((b >> 2) & 1) & 0x1ea119faUL) ^
        (-((b >> 3) & 1) & 0x3d4233ddUL) ^
        (-((b >> 4) & 1) & 0x2a1462b3UL);
}
   3e6d0:	e037883a 	mov	sp,fp
   3e6d4:	df000017 	ldw	fp,0(sp)
   3e6d8:	dec00104 	addi	sp,sp,4
   3e6dc:	f800283a 	ret

0003e6e0 <bech32_encode>:
     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,
    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,
     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1
};

int bech32_encode(char *output, const char *hrp, const uint8_t *data, size_t data_len) {
   3e6e0:	defff504 	addi	sp,sp,-44
   3e6e4:	dfc00a15 	stw	ra,40(sp)
   3e6e8:	df000915 	stw	fp,36(sp)
   3e6ec:	dc400815 	stw	r17,32(sp)
   3e6f0:	dc000715 	stw	r16,28(sp)
   3e6f4:	df000904 	addi	fp,sp,36
   3e6f8:	e13ffa15 	stw	r4,-24(fp)
   3e6fc:	e17ffb15 	stw	r5,-20(fp)
   3e700:	e1bffc15 	stw	r6,-16(fp)
   3e704:	e1fffd15 	stw	r7,-12(fp)
    uint32_t chk = 1;
   3e708:	00800044 	movi	r2,1
   3e70c:	e0bff715 	stw	r2,-36(fp)
    size_t i = 0;
   3e710:	e03ff815 	stw	zero,-32(fp)
    while (hrp[i] != 0) {
   3e714:	00002206 	br	3e7a0 <bech32_encode+0xc0>
        int ch = hrp[i];
   3e718:	e0fffb17 	ldw	r3,-20(fp)
   3e71c:	e0bff817 	ldw	r2,-32(fp)
   3e720:	1885883a 	add	r2,r3,r2
   3e724:	10800003 	ldbu	r2,0(r2)
   3e728:	10803fcc 	andi	r2,r2,255
   3e72c:	1080201c 	xori	r2,r2,128
   3e730:	10bfe004 	addi	r2,r2,-128
   3e734:	e0bff915 	stw	r2,-28(fp)
        if (ch < 33 || ch > 126) {
   3e738:	e0bff917 	ldw	r2,-28(fp)
   3e73c:	10800850 	cmplti	r2,r2,33
   3e740:	1000031e 	bne	r2,zero,3e750 <bech32_encode+0x70>
   3e744:	e0bff917 	ldw	r2,-28(fp)
   3e748:	10801fd0 	cmplti	r2,r2,127
   3e74c:	1000021e 	bne	r2,zero,3e758 <bech32_encode+0x78>
            return 0;
   3e750:	0005883a 	mov	r2,zero
   3e754:	00008d06 	br	3e98c <bech32_encode+0x2ac>
        }

        if (ch >= 'A' && ch <= 'Z') return 0;
   3e758:	e0bff917 	ldw	r2,-28(fp)
   3e75c:	10801050 	cmplti	r2,r2,65
   3e760:	1000051e 	bne	r2,zero,3e778 <bech32_encode+0x98>
   3e764:	e0bff917 	ldw	r2,-28(fp)
   3e768:	108016c8 	cmpgei	r2,r2,91
   3e76c:	1000021e 	bne	r2,zero,3e778 <bech32_encode+0x98>
   3e770:	0005883a 	mov	r2,zero
   3e774:	00008506 	br	3e98c <bech32_encode+0x2ac>
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
   3e778:	e13ff717 	ldw	r4,-36(fp)
   3e77c:	003e5e00 	call	3e5e0 <bech32_polymod_step>
   3e780:	1007883a 	mov	r3,r2
   3e784:	e0bff917 	ldw	r2,-28(fp)
   3e788:	1005d17a 	srai	r2,r2,5
   3e78c:	1884f03a 	xor	r2,r3,r2
   3e790:	e0bff715 	stw	r2,-36(fp)
        ++i;
   3e794:	e0bff817 	ldw	r2,-32(fp)
   3e798:	10800044 	addi	r2,r2,1
   3e79c:	e0bff815 	stw	r2,-32(fp)
};

int bech32_encode(char *output, const char *hrp, const uint8_t *data, size_t data_len) {
    uint32_t chk = 1;
    size_t i = 0;
    while (hrp[i] != 0) {
   3e7a0:	e0fffb17 	ldw	r3,-20(fp)
   3e7a4:	e0bff817 	ldw	r2,-32(fp)
   3e7a8:	1885883a 	add	r2,r3,r2
   3e7ac:	10800003 	ldbu	r2,0(r2)
   3e7b0:	10803fcc 	andi	r2,r2,255
   3e7b4:	1080201c 	xori	r2,r2,128
   3e7b8:	10bfe004 	addi	r2,r2,-128
   3e7bc:	103fd61e 	bne	r2,zero,3e718 <__alt_mem_epcs_flash_controller+0xfe035718>

        if (ch >= 'A' && ch <= 'Z') return 0;
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
        ++i;
    }
    if (i + 7 + data_len > 90) return 0;
   3e7c0:	e0fff817 	ldw	r3,-32(fp)
   3e7c4:	e0bffd17 	ldw	r2,-12(fp)
   3e7c8:	1885883a 	add	r2,r3,r2
   3e7cc:	108001c4 	addi	r2,r2,7
   3e7d0:	108016f0 	cmpltui	r2,r2,91
   3e7d4:	1000021e 	bne	r2,zero,3e7e0 <bech32_encode+0x100>
   3e7d8:	0005883a 	mov	r2,zero
   3e7dc:	00006b06 	br	3e98c <bech32_encode+0x2ac>
    chk = bech32_polymod_step(chk);
   3e7e0:	e13ff717 	ldw	r4,-36(fp)
   3e7e4:	003e5e00 	call	3e5e0 <bech32_polymod_step>
   3e7e8:	e0bff715 	stw	r2,-36(fp)
    while (*hrp != 0) {
   3e7ec:	00001106 	br	3e834 <bech32_encode+0x154>
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
   3e7f0:	e13ff717 	ldw	r4,-36(fp)
   3e7f4:	003e5e00 	call	3e5e0 <bech32_polymod_step>
   3e7f8:	1007883a 	mov	r3,r2
   3e7fc:	e0bffb17 	ldw	r2,-20(fp)
   3e800:	10800003 	ldbu	r2,0(r2)
   3e804:	10803fcc 	andi	r2,r2,255
   3e808:	108007cc 	andi	r2,r2,31
   3e80c:	1884f03a 	xor	r2,r3,r2
   3e810:	e0bff715 	stw	r2,-36(fp)
        *(output++) = *(hrp++);
   3e814:	e0bffa17 	ldw	r2,-24(fp)
   3e818:	10c00044 	addi	r3,r2,1
   3e81c:	e0fffa15 	stw	r3,-24(fp)
   3e820:	e0fffb17 	ldw	r3,-20(fp)
   3e824:	19000044 	addi	r4,r3,1
   3e828:	e13ffb15 	stw	r4,-20(fp)
   3e82c:	18c00003 	ldbu	r3,0(r3)
   3e830:	10c00005 	stb	r3,0(r2)
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
        ++i;
    }
    if (i + 7 + data_len > 90) return 0;
    chk = bech32_polymod_step(chk);
    while (*hrp != 0) {
   3e834:	e0bffb17 	ldw	r2,-20(fp)
   3e838:	10800003 	ldbu	r2,0(r2)
   3e83c:	10803fcc 	andi	r2,r2,255
   3e840:	1080201c 	xori	r2,r2,128
   3e844:	10bfe004 	addi	r2,r2,-128
   3e848:	103fe91e 	bne	r2,zero,3e7f0 <__alt_mem_epcs_flash_controller+0xfe0357f0>
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
        *(output++) = *(hrp++);
    }
    *(output++) = '1';
   3e84c:	e0bffa17 	ldw	r2,-24(fp)
   3e850:	10c00044 	addi	r3,r2,1
   3e854:	e0fffa15 	stw	r3,-24(fp)
   3e858:	00c00c44 	movi	r3,49
   3e85c:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < data_len; ++i) {
   3e860:	e03ff815 	stw	zero,-32(fp)
   3e864:	00001f06 	br	3e8e4 <bech32_encode+0x204>
        if (*data >> 5) return 0;
   3e868:	e0bffc17 	ldw	r2,-16(fp)
   3e86c:	10800003 	ldbu	r2,0(r2)
   3e870:	10803fcc 	andi	r2,r2,255
   3e874:	1004d17a 	srli	r2,r2,5
   3e878:	10803fcc 	andi	r2,r2,255
   3e87c:	10000226 	beq	r2,zero,3e888 <bech32_encode+0x1a8>
   3e880:	0005883a 	mov	r2,zero
   3e884:	00004106 	br	3e98c <bech32_encode+0x2ac>
        chk = bech32_polymod_step(chk) ^ (*data);
   3e888:	e13ff717 	ldw	r4,-36(fp)
   3e88c:	003e5e00 	call	3e5e0 <bech32_polymod_step>
   3e890:	1007883a 	mov	r3,r2
   3e894:	e0bffc17 	ldw	r2,-16(fp)
   3e898:	10800003 	ldbu	r2,0(r2)
   3e89c:	10803fcc 	andi	r2,r2,255
   3e8a0:	1884f03a 	xor	r2,r3,r2
   3e8a4:	e0bff715 	stw	r2,-36(fp)
        *(output++) = charset[*(data++)];
   3e8a8:	e0bffa17 	ldw	r2,-24(fp)
   3e8ac:	10c00044 	addi	r3,r2,1
   3e8b0:	e0fffa15 	stw	r3,-24(fp)
   3e8b4:	d1201017 	ldw	r4,-32704(gp)
   3e8b8:	e0fffc17 	ldw	r3,-16(fp)
   3e8bc:	19400044 	addi	r5,r3,1
   3e8c0:	e17ffc15 	stw	r5,-16(fp)
   3e8c4:	18c00003 	ldbu	r3,0(r3)
   3e8c8:	18c03fcc 	andi	r3,r3,255
   3e8cc:	20c7883a 	add	r3,r4,r3
   3e8d0:	18c00003 	ldbu	r3,0(r3)
   3e8d4:	10c00005 	stb	r3,0(r2)
    while (*hrp != 0) {
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
        *(output++) = *(hrp++);
    }
    *(output++) = '1';
    for (i = 0; i < data_len; ++i) {
   3e8d8:	e0bff817 	ldw	r2,-32(fp)
   3e8dc:	10800044 	addi	r2,r2,1
   3e8e0:	e0bff815 	stw	r2,-32(fp)
   3e8e4:	e0fff817 	ldw	r3,-32(fp)
   3e8e8:	e0bffd17 	ldw	r2,-12(fp)
   3e8ec:	18bfde36 	bltu	r3,r2,3e868 <__alt_mem_epcs_flash_controller+0xfe035868>
        if (*data >> 5) return 0;
        chk = bech32_polymod_step(chk) ^ (*data);
        *(output++) = charset[*(data++)];
    }
    for (i = 0; i < 6; ++i) {
   3e8f0:	e03ff815 	stw	zero,-32(fp)
   3e8f4:	00000606 	br	3e910 <bech32_encode+0x230>
        chk = bech32_polymod_step(chk);
   3e8f8:	e13ff717 	ldw	r4,-36(fp)
   3e8fc:	003e5e00 	call	3e5e0 <bech32_polymod_step>
   3e900:	e0bff715 	stw	r2,-36(fp)
    for (i = 0; i < data_len; ++i) {
        if (*data >> 5) return 0;
        chk = bech32_polymod_step(chk) ^ (*data);
        *(output++) = charset[*(data++)];
    }
    for (i = 0; i < 6; ++i) {
   3e904:	e0bff817 	ldw	r2,-32(fp)
   3e908:	10800044 	addi	r2,r2,1
   3e90c:	e0bff815 	stw	r2,-32(fp)
   3e910:	e0bff817 	ldw	r2,-32(fp)
   3e914:	108001b0 	cmpltui	r2,r2,6
   3e918:	103ff71e 	bne	r2,zero,3e8f8 <__alt_mem_epcs_flash_controller+0xfe0358f8>
        chk = bech32_polymod_step(chk);
    }
    chk ^= 1;
   3e91c:	e0bff717 	ldw	r2,-36(fp)
   3e920:	1080005c 	xori	r2,r2,1
   3e924:	e0bff715 	stw	r2,-36(fp)
    for (i = 0; i < 6; ++i) {
   3e928:	e03ff815 	stw	zero,-32(fp)
   3e92c:	00001106 	br	3e974 <bech32_encode+0x294>
        *(output++) = charset[(chk >> ((5 - i) * 5)) & 0x1f];
   3e930:	e43ffa17 	ldw	r16,-24(fp)
   3e934:	80800044 	addi	r2,r16,1
   3e938:	e0bffa15 	stw	r2,-24(fp)
   3e93c:	d4601017 	ldw	r17,-32704(gp)
   3e940:	017ffec4 	movi	r5,-5
   3e944:	e13ff817 	ldw	r4,-32(fp)
   3e948:	0043af40 	call	43af4 <__mulsi3>
   3e94c:	10800644 	addi	r2,r2,25
   3e950:	e0fff717 	ldw	r3,-36(fp)
   3e954:	1884d83a 	srl	r2,r3,r2
   3e958:	108007cc 	andi	r2,r2,31
   3e95c:	8885883a 	add	r2,r17,r2
   3e960:	10800003 	ldbu	r2,0(r2)
   3e964:	80800005 	stb	r2,0(r16)
    }
    for (i = 0; i < 6; ++i) {
        chk = bech32_polymod_step(chk);
    }
    chk ^= 1;
    for (i = 0; i < 6; ++i) {
   3e968:	e0bff817 	ldw	r2,-32(fp)
   3e96c:	10800044 	addi	r2,r2,1
   3e970:	e0bff815 	stw	r2,-32(fp)
   3e974:	e0bff817 	ldw	r2,-32(fp)
   3e978:	108001b0 	cmpltui	r2,r2,6
   3e97c:	103fec1e 	bne	r2,zero,3e930 <__alt_mem_epcs_flash_controller+0xfe035930>
        *(output++) = charset[(chk >> ((5 - i) * 5)) & 0x1f];
    }
    *output = 0;
   3e980:	e0bffa17 	ldw	r2,-24(fp)
   3e984:	10000005 	stb	zero,0(r2)
    return 1;
   3e988:	00800044 	movi	r2,1
}
   3e98c:	e6fffe04 	addi	sp,fp,-8
   3e990:	dfc00317 	ldw	ra,12(sp)
   3e994:	df000217 	ldw	fp,8(sp)
   3e998:	dc400117 	ldw	r17,4(sp)
   3e99c:	dc000017 	ldw	r16,0(sp)
   3e9a0:	dec00404 	addi	sp,sp,16
   3e9a4:	f800283a 	ret

0003e9a8 <bech32_decode>:

int bech32_decode(char* hrp, uint8_t *data, size_t *data_len, const char *input) {
   3e9a8:	defff204 	addi	sp,sp,-56
   3e9ac:	dfc00d15 	stw	ra,52(sp)
   3e9b0:	df000c15 	stw	fp,48(sp)
   3e9b4:	df000c04 	addi	fp,sp,48
   3e9b8:	e13ffc15 	stw	r4,-16(fp)
   3e9bc:	e17ffd15 	stw	r5,-12(fp)
   3e9c0:	e1bffe15 	stw	r6,-8(fp)
   3e9c4:	e1ffff15 	stw	r7,-4(fp)
    uint32_t chk = 1;
   3e9c8:	00800044 	movi	r2,1
   3e9cc:	e0bff415 	stw	r2,-48(fp)
    size_t i;
    size_t input_len = strlen(input);
   3e9d0:	e13fff17 	ldw	r4,-4(fp)
   3e9d4:	0046c3c0 	call	46c3c <strlen>
   3e9d8:	e0bff915 	stw	r2,-28(fp)
    size_t hrp_len;
    int have_lower = 0, have_upper = 0;
   3e9dc:	e03ff615 	stw	zero,-40(fp)
   3e9e0:	e03ff715 	stw	zero,-36(fp)
    if (input_len < 8 || input_len > 90) {
   3e9e4:	e0bff917 	ldw	r2,-28(fp)
   3e9e8:	10800230 	cmpltui	r2,r2,8
   3e9ec:	1000031e 	bne	r2,zero,3e9fc <bech32_decode+0x54>
   3e9f0:	e0bff917 	ldw	r2,-28(fp)
   3e9f4:	108016f0 	cmpltui	r2,r2,91
   3e9f8:	1000021e 	bne	r2,zero,3ea04 <bech32_decode+0x5c>
        return 0;
   3e9fc:	0005883a 	mov	r2,zero
   3ea00:	0000ec06 	br	3edb4 <bech32_decode+0x40c>
    }
    *data_len = 0;
   3ea04:	e0bffe17 	ldw	r2,-8(fp)
   3ea08:	10000015 	stw	zero,0(r2)
    while (*data_len < input_len && input[(input_len - 1) - *data_len] != '1') {
   3ea0c:	00000506 	br	3ea24 <bech32_decode+0x7c>
        ++(*data_len);
   3ea10:	e0bffe17 	ldw	r2,-8(fp)
   3ea14:	10800017 	ldw	r2,0(r2)
   3ea18:	10c00044 	addi	r3,r2,1
   3ea1c:	e0bffe17 	ldw	r2,-8(fp)
   3ea20:	10c00015 	stw	r3,0(r2)
    int have_lower = 0, have_upper = 0;
    if (input_len < 8 || input_len > 90) {
        return 0;
    }
    *data_len = 0;
    while (*data_len < input_len && input[(input_len - 1) - *data_len] != '1') {
   3ea24:	e0bffe17 	ldw	r2,-8(fp)
   3ea28:	10c00017 	ldw	r3,0(r2)
   3ea2c:	e0bff917 	ldw	r2,-28(fp)
   3ea30:	18800d2e 	bgeu	r3,r2,3ea68 <bech32_decode+0xc0>
   3ea34:	e0bffe17 	ldw	r2,-8(fp)
   3ea38:	10800017 	ldw	r2,0(r2)
   3ea3c:	e0fff917 	ldw	r3,-28(fp)
   3ea40:	1885c83a 	sub	r2,r3,r2
   3ea44:	10bfffc4 	addi	r2,r2,-1
   3ea48:	e0ffff17 	ldw	r3,-4(fp)
   3ea4c:	1885883a 	add	r2,r3,r2
   3ea50:	10800003 	ldbu	r2,0(r2)
   3ea54:	10803fcc 	andi	r2,r2,255
   3ea58:	1080201c 	xori	r2,r2,128
   3ea5c:	10bfe004 	addi	r2,r2,-128
   3ea60:	10800c58 	cmpnei	r2,r2,49
   3ea64:	103fea1e 	bne	r2,zero,3ea10 <__alt_mem_epcs_flash_controller+0xfe035a10>
        ++(*data_len);
    }
    hrp_len = input_len - (1 + *data_len);
   3ea68:	e0bffe17 	ldw	r2,-8(fp)
   3ea6c:	10800017 	ldw	r2,0(r2)
   3ea70:	e0fff917 	ldw	r3,-28(fp)
   3ea74:	1885c83a 	sub	r2,r3,r2
   3ea78:	10bfffc4 	addi	r2,r2,-1
   3ea7c:	e0bffa15 	stw	r2,-24(fp)
    if (1 + *data_len >= input_len || *data_len < 6) {
   3ea80:	e0bffe17 	ldw	r2,-8(fp)
   3ea84:	10800017 	ldw	r2,0(r2)
   3ea88:	10c00044 	addi	r3,r2,1
   3ea8c:	e0bff917 	ldw	r2,-28(fp)
   3ea90:	1880042e 	bgeu	r3,r2,3eaa4 <bech32_decode+0xfc>
   3ea94:	e0bffe17 	ldw	r2,-8(fp)
   3ea98:	10800017 	ldw	r2,0(r2)
   3ea9c:	108001a8 	cmpgeui	r2,r2,6
   3eaa0:	1000021e 	bne	r2,zero,3eaac <bech32_decode+0x104>
        return 0;
   3eaa4:	0005883a 	mov	r2,zero
   3eaa8:	0000c206 	br	3edb4 <bech32_decode+0x40c>
    }
    *(data_len) -= 6;
   3eaac:	e0bffe17 	ldw	r2,-8(fp)
   3eab0:	10800017 	ldw	r2,0(r2)
   3eab4:	10fffe84 	addi	r3,r2,-6
   3eab8:	e0bffe17 	ldw	r2,-8(fp)
   3eabc:	10c00015 	stw	r3,0(r2)
    for (i = 0; i < hrp_len; ++i) {
   3eac0:	e03ff515 	stw	zero,-44(fp)
   3eac4:	00003306 	br	3eb94 <bech32_decode+0x1ec>
        int ch = input[i];
   3eac8:	e0ffff17 	ldw	r3,-4(fp)
   3eacc:	e0bff517 	ldw	r2,-44(fp)
   3ead0:	1885883a 	add	r2,r3,r2
   3ead4:	10800003 	ldbu	r2,0(r2)
   3ead8:	10803fcc 	andi	r2,r2,255
   3eadc:	1080201c 	xori	r2,r2,128
   3eae0:	10bfe004 	addi	r2,r2,-128
   3eae4:	e0bff815 	stw	r2,-32(fp)
        if (ch < 33 || ch > 126) {
   3eae8:	e0bff817 	ldw	r2,-32(fp)
   3eaec:	10800850 	cmplti	r2,r2,33
   3eaf0:	1000031e 	bne	r2,zero,3eb00 <bech32_decode+0x158>
   3eaf4:	e0bff817 	ldw	r2,-32(fp)
   3eaf8:	10801fd0 	cmplti	r2,r2,127
   3eafc:	1000021e 	bne	r2,zero,3eb08 <bech32_decode+0x160>
            return 0;
   3eb00:	0005883a 	mov	r2,zero
   3eb04:	0000ab06 	br	3edb4 <bech32_decode+0x40c>
        }
        if (ch >= 'a' && ch <= 'z') {
   3eb08:	e0bff817 	ldw	r2,-32(fp)
   3eb0c:	10801850 	cmplti	r2,r2,97
   3eb10:	1000061e 	bne	r2,zero,3eb2c <bech32_decode+0x184>
   3eb14:	e0bff817 	ldw	r2,-32(fp)
   3eb18:	10801ec8 	cmpgei	r2,r2,123
   3eb1c:	1000031e 	bne	r2,zero,3eb2c <bech32_decode+0x184>
            have_lower = 1;
   3eb20:	00800044 	movi	r2,1
   3eb24:	e0bff615 	stw	r2,-40(fp)
   3eb28:	00000b06 	br	3eb58 <bech32_decode+0x1b0>
        } else if (ch >= 'A' && ch <= 'Z') {
   3eb2c:	e0bff817 	ldw	r2,-32(fp)
   3eb30:	10801050 	cmplti	r2,r2,65
   3eb34:	1000081e 	bne	r2,zero,3eb58 <bech32_decode+0x1b0>
   3eb38:	e0bff817 	ldw	r2,-32(fp)
   3eb3c:	108016c8 	cmpgei	r2,r2,91
   3eb40:	1000051e 	bne	r2,zero,3eb58 <bech32_decode+0x1b0>
            have_upper = 1;
   3eb44:	00800044 	movi	r2,1
   3eb48:	e0bff715 	stw	r2,-36(fp)
            ch = (ch - 'A') + 'a';
   3eb4c:	e0bff817 	ldw	r2,-32(fp)
   3eb50:	10800804 	addi	r2,r2,32
   3eb54:	e0bff815 	stw	r2,-32(fp)
        }
        hrp[i] = ch;
   3eb58:	e0fffc17 	ldw	r3,-16(fp)
   3eb5c:	e0bff517 	ldw	r2,-44(fp)
   3eb60:	1885883a 	add	r2,r3,r2
   3eb64:	e0fff817 	ldw	r3,-32(fp)
   3eb68:	10c00005 	stb	r3,0(r2)
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
   3eb6c:	e13ff417 	ldw	r4,-48(fp)
   3eb70:	003e5e00 	call	3e5e0 <bech32_polymod_step>
   3eb74:	1007883a 	mov	r3,r2
   3eb78:	e0bff817 	ldw	r2,-32(fp)
   3eb7c:	1005d17a 	srai	r2,r2,5
   3eb80:	1884f03a 	xor	r2,r3,r2
   3eb84:	e0bff415 	stw	r2,-48(fp)
    hrp_len = input_len - (1 + *data_len);
    if (1 + *data_len >= input_len || *data_len < 6) {
        return 0;
    }
    *(data_len) -= 6;
    for (i = 0; i < hrp_len; ++i) {
   3eb88:	e0bff517 	ldw	r2,-44(fp)
   3eb8c:	10800044 	addi	r2,r2,1
   3eb90:	e0bff515 	stw	r2,-44(fp)
   3eb94:	e0fff517 	ldw	r3,-44(fp)
   3eb98:	e0bffa17 	ldw	r2,-24(fp)
   3eb9c:	18bfca36 	bltu	r3,r2,3eac8 <__alt_mem_epcs_flash_controller+0xfe035ac8>
            ch = (ch - 'A') + 'a';
        }
        hrp[i] = ch;
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
    }
    hrp[i] = 0;
   3eba0:	e0fffc17 	ldw	r3,-16(fp)
   3eba4:	e0bff517 	ldw	r2,-44(fp)
   3eba8:	1885883a 	add	r2,r3,r2
   3ebac:	10000005 	stb	zero,0(r2)
    chk = bech32_polymod_step(chk);
   3ebb0:	e13ff417 	ldw	r4,-48(fp)
   3ebb4:	003e5e00 	call	3e5e0 <bech32_polymod_step>
   3ebb8:	e0bff415 	stw	r2,-48(fp)
    for (i = 0; i < hrp_len; ++i) {
   3ebbc:	e03ff515 	stw	zero,-44(fp)
   3ebc0:	00000e06 	br	3ebfc <bech32_decode+0x254>
        chk = bech32_polymod_step(chk) ^ (input[i] & 0x1f);
   3ebc4:	e13ff417 	ldw	r4,-48(fp)
   3ebc8:	003e5e00 	call	3e5e0 <bech32_polymod_step>
   3ebcc:	1009883a 	mov	r4,r2
   3ebd0:	e0ffff17 	ldw	r3,-4(fp)
   3ebd4:	e0bff517 	ldw	r2,-44(fp)
   3ebd8:	1885883a 	add	r2,r3,r2
   3ebdc:	10800003 	ldbu	r2,0(r2)
   3ebe0:	10803fcc 	andi	r2,r2,255
   3ebe4:	108007cc 	andi	r2,r2,31
   3ebe8:	2084f03a 	xor	r2,r4,r2
   3ebec:	e0bff415 	stw	r2,-48(fp)
        hrp[i] = ch;
        chk = bech32_polymod_step(chk) ^ (ch >> 5);
    }
    hrp[i] = 0;
    chk = bech32_polymod_step(chk);
    for (i = 0; i < hrp_len; ++i) {
   3ebf0:	e0bff517 	ldw	r2,-44(fp)
   3ebf4:	10800044 	addi	r2,r2,1
   3ebf8:	e0bff515 	stw	r2,-44(fp)
   3ebfc:	e0fff517 	ldw	r3,-44(fp)
   3ec00:	e0bffa17 	ldw	r2,-24(fp)
   3ec04:	18bfef36 	bltu	r3,r2,3ebc4 <__alt_mem_epcs_flash_controller+0xfe035bc4>
        chk = bech32_polymod_step(chk) ^ (input[i] & 0x1f);
    }
    ++i;
   3ec08:	e0bff517 	ldw	r2,-44(fp)
   3ec0c:	10800044 	addi	r2,r2,1
   3ec10:	e0bff515 	stw	r2,-44(fp)
    while (i < input_len) {
   3ec14:	00005b06 	br	3ed84 <bech32_decode+0x3dc>
        int v = (input[i] & 0x80) ? -1 : charset_rev[(int)input[i]];
   3ec18:	e0ffff17 	ldw	r3,-4(fp)
   3ec1c:	e0bff517 	ldw	r2,-44(fp)
   3ec20:	1885883a 	add	r2,r3,r2
   3ec24:	10800003 	ldbu	r2,0(r2)
   3ec28:	10803fcc 	andi	r2,r2,255
   3ec2c:	1080201c 	xori	r2,r2,128
   3ec30:	10bfe004 	addi	r2,r2,-128
   3ec34:	10000f16 	blt	r2,zero,3ec74 <bech32_decode+0x2cc>
   3ec38:	e0ffff17 	ldw	r3,-4(fp)
   3ec3c:	e0bff517 	ldw	r2,-44(fp)
   3ec40:	1885883a 	add	r2,r3,r2
   3ec44:	10800003 	ldbu	r2,0(r2)
   3ec48:	10c03fcc 	andi	r3,r2,255
   3ec4c:	18c0201c 	xori	r3,r3,128
   3ec50:	18ffe004 	addi	r3,r3,-128
   3ec54:	00800174 	movhi	r2,5
   3ec58:	1099b844 	addi	r2,r2,26337
   3ec5c:	10c5883a 	add	r2,r2,r3
   3ec60:	10800003 	ldbu	r2,0(r2)
   3ec64:	10803fcc 	andi	r2,r2,255
   3ec68:	1080201c 	xori	r2,r2,128
   3ec6c:	10bfe004 	addi	r2,r2,-128
   3ec70:	00000106 	br	3ec78 <bech32_decode+0x2d0>
   3ec74:	00bfffc4 	movi	r2,-1
   3ec78:	e0bffb15 	stw	r2,-20(fp)
        if (input[i] >= 'a' && input[i] <= 'z') have_lower = 1;
   3ec7c:	e0ffff17 	ldw	r3,-4(fp)
   3ec80:	e0bff517 	ldw	r2,-44(fp)
   3ec84:	1885883a 	add	r2,r3,r2
   3ec88:	10800003 	ldbu	r2,0(r2)
   3ec8c:	10803fcc 	andi	r2,r2,255
   3ec90:	1080201c 	xori	r2,r2,128
   3ec94:	10bfe004 	addi	r2,r2,-128
   3ec98:	10801850 	cmplti	r2,r2,97
   3ec9c:	10000b1e 	bne	r2,zero,3eccc <bech32_decode+0x324>
   3eca0:	e0ffff17 	ldw	r3,-4(fp)
   3eca4:	e0bff517 	ldw	r2,-44(fp)
   3eca8:	1885883a 	add	r2,r3,r2
   3ecac:	10800003 	ldbu	r2,0(r2)
   3ecb0:	10803fcc 	andi	r2,r2,255
   3ecb4:	1080201c 	xori	r2,r2,128
   3ecb8:	10bfe004 	addi	r2,r2,-128
   3ecbc:	10801ec8 	cmpgei	r2,r2,123
   3ecc0:	1000021e 	bne	r2,zero,3eccc <bech32_decode+0x324>
   3ecc4:	00800044 	movi	r2,1
   3ecc8:	e0bff615 	stw	r2,-40(fp)
        if (input[i] >= 'A' && input[i] <= 'Z') have_upper = 1;
   3eccc:	e0ffff17 	ldw	r3,-4(fp)
   3ecd0:	e0bff517 	ldw	r2,-44(fp)
   3ecd4:	1885883a 	add	r2,r3,r2
   3ecd8:	10800003 	ldbu	r2,0(r2)
   3ecdc:	10803fcc 	andi	r2,r2,255
   3ece0:	1080201c 	xori	r2,r2,128
   3ece4:	10bfe004 	addi	r2,r2,-128
   3ece8:	10801050 	cmplti	r2,r2,65
   3ecec:	10000b1e 	bne	r2,zero,3ed1c <bech32_decode+0x374>
   3ecf0:	e0ffff17 	ldw	r3,-4(fp)
   3ecf4:	e0bff517 	ldw	r2,-44(fp)
   3ecf8:	1885883a 	add	r2,r3,r2
   3ecfc:	10800003 	ldbu	r2,0(r2)
   3ed00:	10803fcc 	andi	r2,r2,255
   3ed04:	1080201c 	xori	r2,r2,128
   3ed08:	10bfe004 	addi	r2,r2,-128
   3ed0c:	108016c8 	cmpgei	r2,r2,91
   3ed10:	1000021e 	bne	r2,zero,3ed1c <bech32_decode+0x374>
   3ed14:	00800044 	movi	r2,1
   3ed18:	e0bff715 	stw	r2,-36(fp)
        if (v == -1) {
   3ed1c:	e0bffb17 	ldw	r2,-20(fp)
   3ed20:	10bfffd8 	cmpnei	r2,r2,-1
   3ed24:	1000021e 	bne	r2,zero,3ed30 <bech32_decode+0x388>
            return 0;
   3ed28:	0005883a 	mov	r2,zero
   3ed2c:	00002106 	br	3edb4 <bech32_decode+0x40c>
        }
        chk = bech32_polymod_step(chk) ^ v;
   3ed30:	e13ff417 	ldw	r4,-48(fp)
   3ed34:	003e5e00 	call	3e5e0 <bech32_polymod_step>
   3ed38:	1007883a 	mov	r3,r2
   3ed3c:	e0bffb17 	ldw	r2,-20(fp)
   3ed40:	1884f03a 	xor	r2,r3,r2
   3ed44:	e0bff415 	stw	r2,-48(fp)
        if (i + 6 < input_len) {
   3ed48:	e0bff517 	ldw	r2,-44(fp)
   3ed4c:	10c00184 	addi	r3,r2,6
   3ed50:	e0bff917 	ldw	r2,-28(fp)
   3ed54:	1880082e 	bgeu	r3,r2,3ed78 <bech32_decode+0x3d0>
            data[i - (1 + hrp_len)] = v;
   3ed58:	e0fff517 	ldw	r3,-44(fp)
   3ed5c:	e0bffa17 	ldw	r2,-24(fp)
   3ed60:	1885c83a 	sub	r2,r3,r2
   3ed64:	10bfffc4 	addi	r2,r2,-1
   3ed68:	e0fffd17 	ldw	r3,-12(fp)
   3ed6c:	1885883a 	add	r2,r3,r2
   3ed70:	e0fffb17 	ldw	r3,-20(fp)
   3ed74:	10c00005 	stb	r3,0(r2)
        }
        ++i;
   3ed78:	e0bff517 	ldw	r2,-44(fp)
   3ed7c:	10800044 	addi	r2,r2,1
   3ed80:	e0bff515 	stw	r2,-44(fp)
    chk = bech32_polymod_step(chk);
    for (i = 0; i < hrp_len; ++i) {
        chk = bech32_polymod_step(chk) ^ (input[i] & 0x1f);
    }
    ++i;
    while (i < input_len) {
   3ed84:	e0fff517 	ldw	r3,-44(fp)
   3ed88:	e0bff917 	ldw	r2,-28(fp)
   3ed8c:	18bfa236 	bltu	r3,r2,3ec18 <__alt_mem_epcs_flash_controller+0xfe035c18>
        if (i + 6 < input_len) {
            data[i - (1 + hrp_len)] = v;
        }
        ++i;
    }
    if (have_lower && have_upper) {
   3ed90:	e0bff617 	ldw	r2,-40(fp)
   3ed94:	10000426 	beq	r2,zero,3eda8 <bech32_decode+0x400>
   3ed98:	e0bff717 	ldw	r2,-36(fp)
   3ed9c:	10000226 	beq	r2,zero,3eda8 <bech32_decode+0x400>
        return 0;
   3eda0:	0005883a 	mov	r2,zero
   3eda4:	00000306 	br	3edb4 <bech32_decode+0x40c>
    }
    return chk == 1;
   3eda8:	e0bff417 	ldw	r2,-48(fp)
   3edac:	10800060 	cmpeqi	r2,r2,1
   3edb0:	10803fcc 	andi	r2,r2,255
}
   3edb4:	e037883a 	mov	sp,fp
   3edb8:	dfc00117 	ldw	ra,4(sp)
   3edbc:	df000017 	ldw	fp,0(sp)
   3edc0:	dec00204 	addi	sp,sp,8
   3edc4:	f800283a 	ret

0003edc8 <convert_bits>:

static int convert_bits(uint8_t* out, size_t* outlen, int outbits, const uint8_t* in, size_t inlen, int inbits, int pad) {
   3edc8:	defff804 	addi	sp,sp,-32
   3edcc:	df000715 	stw	fp,28(sp)
   3edd0:	df000704 	addi	fp,sp,28
   3edd4:	e13ffc15 	stw	r4,-16(fp)
   3edd8:	e17ffd15 	stw	r5,-12(fp)
   3eddc:	e1bffe15 	stw	r6,-8(fp)
   3ede0:	e1ffff15 	stw	r7,-4(fp)
    uint32_t val = 0;
   3ede4:	e03ff915 	stw	zero,-28(fp)
    int bits = 0;
   3ede8:	e03ffa15 	stw	zero,-24(fp)
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
   3edec:	00c00044 	movi	r3,1
   3edf0:	e0bffe17 	ldw	r2,-8(fp)
   3edf4:	1884983a 	sll	r2,r3,r2
   3edf8:	10bfffc4 	addi	r2,r2,-1
   3edfc:	e0bffb15 	stw	r2,-20(fp)
    while (inlen--) {
   3ee00:	00002406 	br	3ee94 <convert_bits+0xcc>
        val = (val << inbits) | *(in++);
   3ee04:	e0fff917 	ldw	r3,-28(fp)
   3ee08:	e0800217 	ldw	r2,8(fp)
   3ee0c:	1886983a 	sll	r3,r3,r2
   3ee10:	e0bfff17 	ldw	r2,-4(fp)
   3ee14:	11000044 	addi	r4,r2,1
   3ee18:	e13fff15 	stw	r4,-4(fp)
   3ee1c:	10800003 	ldbu	r2,0(r2)
   3ee20:	10803fcc 	andi	r2,r2,255
   3ee24:	1884b03a 	or	r2,r3,r2
   3ee28:	e0bff915 	stw	r2,-28(fp)
        bits += inbits;
   3ee2c:	e0fffa17 	ldw	r3,-24(fp)
   3ee30:	e0800217 	ldw	r2,8(fp)
   3ee34:	1885883a 	add	r2,r3,r2
   3ee38:	e0bffa15 	stw	r2,-24(fp)
        while (bits >= outbits) {
   3ee3c:	00001206 	br	3ee88 <convert_bits+0xc0>
            bits -= outbits;
   3ee40:	e0fffa17 	ldw	r3,-24(fp)
   3ee44:	e0bffe17 	ldw	r2,-8(fp)
   3ee48:	1885c83a 	sub	r2,r3,r2
   3ee4c:	e0bffa15 	stw	r2,-24(fp)
            out[(*outlen)++] = (val >> bits) & maxv;
   3ee50:	e0bffd17 	ldw	r2,-12(fp)
   3ee54:	10800017 	ldw	r2,0(r2)
   3ee58:	11000044 	addi	r4,r2,1
   3ee5c:	e0fffd17 	ldw	r3,-12(fp)
   3ee60:	19000015 	stw	r4,0(r3)
   3ee64:	e0fffc17 	ldw	r3,-16(fp)
   3ee68:	1885883a 	add	r2,r3,r2
   3ee6c:	e13ff917 	ldw	r4,-28(fp)
   3ee70:	e0fffa17 	ldw	r3,-24(fp)
   3ee74:	20c6d83a 	srl	r3,r4,r3
   3ee78:	1809883a 	mov	r4,r3
   3ee7c:	e0fffb17 	ldw	r3,-20(fp)
   3ee80:	20c6703a 	and	r3,r4,r3
   3ee84:	10c00005 	stb	r3,0(r2)
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
        val = (val << inbits) | *(in++);
        bits += inbits;
        while (bits >= outbits) {
   3ee88:	e0fffa17 	ldw	r3,-24(fp)
   3ee8c:	e0bffe17 	ldw	r2,-8(fp)
   3ee90:	18bfeb0e 	bge	r3,r2,3ee40 <__alt_mem_epcs_flash_controller+0xfe035e40>

static int convert_bits(uint8_t* out, size_t* outlen, int outbits, const uint8_t* in, size_t inlen, int inbits, int pad) {
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
   3ee94:	e0800117 	ldw	r2,4(fp)
   3ee98:	10ffffc4 	addi	r3,r2,-1
   3ee9c:	e0c00115 	stw	r3,4(fp)
   3eea0:	103fd81e 	bne	r2,zero,3ee04 <__alt_mem_epcs_flash_controller+0xfe035e04>
        while (bits >= outbits) {
            bits -= outbits;
            out[(*outlen)++] = (val >> bits) & maxv;
        }
    }
    if (pad) {
   3eea4:	e0800317 	ldw	r2,12(fp)
   3eea8:	10001326 	beq	r2,zero,3eef8 <convert_bits+0x130>
        if (bits) {
   3eeac:	e0bffa17 	ldw	r2,-24(fp)
   3eeb0:	10001e26 	beq	r2,zero,3ef2c <convert_bits+0x164>
            out[(*outlen)++] = (val << (outbits - bits)) & maxv;
   3eeb4:	e0bffd17 	ldw	r2,-12(fp)
   3eeb8:	10800017 	ldw	r2,0(r2)
   3eebc:	11000044 	addi	r4,r2,1
   3eec0:	e0fffd17 	ldw	r3,-12(fp)
   3eec4:	19000015 	stw	r4,0(r3)
   3eec8:	e0fffc17 	ldw	r3,-16(fp)
   3eecc:	1885883a 	add	r2,r3,r2
   3eed0:	e13ffe17 	ldw	r4,-8(fp)
   3eed4:	e0fffa17 	ldw	r3,-24(fp)
   3eed8:	20c7c83a 	sub	r3,r4,r3
   3eedc:	e13ff917 	ldw	r4,-28(fp)
   3eee0:	20c6983a 	sll	r3,r4,r3
   3eee4:	1809883a 	mov	r4,r3
   3eee8:	e0fffb17 	ldw	r3,-20(fp)
   3eeec:	20c6703a 	and	r3,r4,r3
   3eef0:	10c00005 	stb	r3,0(r2)
   3eef4:	00000d06 	br	3ef2c <convert_bits+0x164>
        }
    } else if (((val << (outbits - bits)) & maxv) || bits >= inbits) {
   3eef8:	e0fffe17 	ldw	r3,-8(fp)
   3eefc:	e0bffa17 	ldw	r2,-24(fp)
   3ef00:	1885c83a 	sub	r2,r3,r2
   3ef04:	e0fff917 	ldw	r3,-28(fp)
   3ef08:	1886983a 	sll	r3,r3,r2
   3ef0c:	e0bffb17 	ldw	r2,-20(fp)
   3ef10:	1884703a 	and	r2,r3,r2
   3ef14:	1000031e 	bne	r2,zero,3ef24 <convert_bits+0x15c>
   3ef18:	e0fffa17 	ldw	r3,-24(fp)
   3ef1c:	e0800217 	ldw	r2,8(fp)
   3ef20:	18800216 	blt	r3,r2,3ef2c <convert_bits+0x164>
        return 0;
   3ef24:	0005883a 	mov	r2,zero
   3ef28:	00000106 	br	3ef30 <convert_bits+0x168>
    }
    return 1;
   3ef2c:	00800044 	movi	r2,1
}
   3ef30:	e037883a 	mov	sp,fp
   3ef34:	df000017 	ldw	fp,0(sp)
   3ef38:	dec00104 	addi	sp,sp,4
   3ef3c:	f800283a 	ret

0003ef40 <segwit_addr_encode>:

int segwit_addr_encode(char *output, const char *hrp, int witver, const uint8_t *witprog, size_t witprog_len) {
   3ef40:	deffe504 	addi	sp,sp,-108
   3ef44:	dfc01a15 	stw	ra,104(sp)
   3ef48:	df001915 	stw	fp,100(sp)
   3ef4c:	df001904 	addi	fp,sp,100
   3ef50:	e13ffc15 	stw	r4,-16(fp)
   3ef54:	e17ffd15 	stw	r5,-12(fp)
   3ef58:	e1bffe15 	stw	r6,-8(fp)
   3ef5c:	e1ffff15 	stw	r7,-4(fp)
    uint8_t data[65];
    size_t datalen = 0;
   3ef60:	e03ffb15 	stw	zero,-20(fp)
    if (witver > 16) return 0;
   3ef64:	e0bffe17 	ldw	r2,-8(fp)
   3ef68:	10800450 	cmplti	r2,r2,17
   3ef6c:	1000021e 	bne	r2,zero,3ef78 <segwit_addr_encode+0x38>
   3ef70:	0005883a 	mov	r2,zero
   3ef74:	00002a06 	br	3f020 <segwit_addr_encode+0xe0>
    if (witver == 0 && witprog_len != 20 && witprog_len != 32) return 0;
   3ef78:	e0bffe17 	ldw	r2,-8(fp)
   3ef7c:	1000081e 	bne	r2,zero,3efa0 <segwit_addr_encode+0x60>
   3ef80:	e0800217 	ldw	r2,8(fp)
   3ef84:	10800520 	cmpeqi	r2,r2,20
   3ef88:	1000051e 	bne	r2,zero,3efa0 <segwit_addr_encode+0x60>
   3ef8c:	e0800217 	ldw	r2,8(fp)
   3ef90:	10800820 	cmpeqi	r2,r2,32
   3ef94:	1000021e 	bne	r2,zero,3efa0 <segwit_addr_encode+0x60>
   3ef98:	0005883a 	mov	r2,zero
   3ef9c:	00002006 	br	3f020 <segwit_addr_encode+0xe0>
    if (witprog_len < 2 || witprog_len > 40) return 0;
   3efa0:	e0800217 	ldw	r2,8(fp)
   3efa4:	108000b0 	cmpltui	r2,r2,2
   3efa8:	1000031e 	bne	r2,zero,3efb8 <segwit_addr_encode+0x78>
   3efac:	e0800217 	ldw	r2,8(fp)
   3efb0:	10800a70 	cmpltui	r2,r2,41
   3efb4:	1000021e 	bne	r2,zero,3efc0 <segwit_addr_encode+0x80>
   3efb8:	0005883a 	mov	r2,zero
   3efbc:	00001806 	br	3f020 <segwit_addr_encode+0xe0>
    data[0] = witver;
   3efc0:	e0bffe17 	ldw	r2,-8(fp)
   3efc4:	e0bfea05 	stb	r2,-88(fp)
    convert_bits(data + 1, &datalen, 5, witprog, witprog_len, 8, 1);
   3efc8:	e0ffea44 	addi	r3,fp,-87
   3efcc:	e13ffb04 	addi	r4,fp,-20
   3efd0:	00800044 	movi	r2,1
   3efd4:	d8800215 	stw	r2,8(sp)
   3efd8:	00800204 	movi	r2,8
   3efdc:	d8800115 	stw	r2,4(sp)
   3efe0:	e0800217 	ldw	r2,8(fp)
   3efe4:	d8800015 	stw	r2,0(sp)
   3efe8:	e1ffff17 	ldw	r7,-4(fp)
   3efec:	01800144 	movi	r6,5
   3eff0:	200b883a 	mov	r5,r4
   3eff4:	1809883a 	mov	r4,r3
   3eff8:	003edc80 	call	3edc8 <convert_bits>
    ++datalen;
   3effc:	e0bffb17 	ldw	r2,-20(fp)
   3f000:	10800044 	addi	r2,r2,1
   3f004:	e0bffb15 	stw	r2,-20(fp)
    return bech32_encode(output, hrp, data, datalen);
   3f008:	e0bffb17 	ldw	r2,-20(fp)
   3f00c:	100f883a 	mov	r7,r2
   3f010:	e1bfea04 	addi	r6,fp,-88
   3f014:	e17ffd17 	ldw	r5,-12(fp)
   3f018:	e13ffc17 	ldw	r4,-16(fp)
   3f01c:	003e6e00 	call	3e6e0 <bech32_encode>
}
   3f020:	e037883a 	mov	sp,fp
   3f024:	dfc00117 	ldw	ra,4(sp)
   3f028:	df000017 	ldw	fp,0(sp)
   3f02c:	dec00204 	addi	sp,sp,8
   3f030:	f800283a 	ret

0003f034 <segwit_addr_decode>:

int segwit_addr_decode(int* witver, uint8_t* witdata, size_t* witdata_len, const char* hrp, const char* addr) {
   3f034:	deffcc04 	addi	sp,sp,-208
   3f038:	dfc03315 	stw	ra,204(sp)
   3f03c:	df003215 	stw	fp,200(sp)
   3f040:	df003204 	addi	fp,sp,200
   3f044:	e13ffc15 	stw	r4,-16(fp)
   3f048:	e17ffd15 	stw	r5,-12(fp)
   3f04c:	e1bffe15 	stw	r6,-8(fp)
   3f050:	e1ffff15 	stw	r7,-4(fp)
    uint8_t data[84];
    char hrp_actual[84];
    size_t data_len;
    if (!bech32_decode(hrp_actual, data, &data_len, addr)) return 0;
   3f054:	e0fffb04 	addi	r3,fp,-20
   3f058:	e0bfe604 	addi	r2,fp,-104
   3f05c:	e1c00217 	ldw	r7,8(fp)
   3f060:	180d883a 	mov	r6,r3
   3f064:	e17fd104 	addi	r5,fp,-188
   3f068:	1009883a 	mov	r4,r2
   3f06c:	003e9a80 	call	3e9a8 <bech32_decode>
   3f070:	1000021e 	bne	r2,zero,3f07c <segwit_addr_decode+0x48>
   3f074:	0005883a 	mov	r2,zero
   3f078:	00004206 	br	3f184 <segwit_addr_decode+0x150>
    if (data_len == 0 || data_len > 65) return 0;
   3f07c:	e0bffb17 	ldw	r2,-20(fp)
   3f080:	10000326 	beq	r2,zero,3f090 <segwit_addr_decode+0x5c>
   3f084:	e0bffb17 	ldw	r2,-20(fp)
   3f088:	108010b0 	cmpltui	r2,r2,66
   3f08c:	1000021e 	bne	r2,zero,3f098 <segwit_addr_decode+0x64>
   3f090:	0005883a 	mov	r2,zero
   3f094:	00003b06 	br	3f184 <segwit_addr_decode+0x150>
    if (strncmp(hrp, hrp_actual, 84) != 0) return 0;
   3f098:	e0bfe604 	addi	r2,fp,-104
   3f09c:	01801504 	movi	r6,84
   3f0a0:	100b883a 	mov	r5,r2
   3f0a4:	e13fff17 	ldw	r4,-4(fp)
   3f0a8:	0046c580 	call	46c58 <strncmp>
   3f0ac:	10000226 	beq	r2,zero,3f0b8 <segwit_addr_decode+0x84>
   3f0b0:	0005883a 	mov	r2,zero
   3f0b4:	00003306 	br	3f184 <segwit_addr_decode+0x150>
    if (data[0] > 16) return 0;
   3f0b8:	e0bfd103 	ldbu	r2,-188(fp)
   3f0bc:	10803fcc 	andi	r2,r2,255
   3f0c0:	10800470 	cmpltui	r2,r2,17
   3f0c4:	1000021e 	bne	r2,zero,3f0d0 <segwit_addr_decode+0x9c>
   3f0c8:	0005883a 	mov	r2,zero
   3f0cc:	00002d06 	br	3f184 <segwit_addr_decode+0x150>
    *witdata_len = 0;
   3f0d0:	e0bffe17 	ldw	r2,-8(fp)
   3f0d4:	10000015 	stw	zero,0(r2)
    if (!convert_bits(witdata, witdata_len, 8, data + 1, data_len - 1, 5, 0)) return 0;
   3f0d8:	e13fd144 	addi	r4,fp,-187
   3f0dc:	e0bffb17 	ldw	r2,-20(fp)
   3f0e0:	10bfffc4 	addi	r2,r2,-1
   3f0e4:	d8000215 	stw	zero,8(sp)
   3f0e8:	00c00144 	movi	r3,5
   3f0ec:	d8c00115 	stw	r3,4(sp)
   3f0f0:	d8800015 	stw	r2,0(sp)
   3f0f4:	200f883a 	mov	r7,r4
   3f0f8:	01800204 	movi	r6,8
   3f0fc:	e17ffe17 	ldw	r5,-8(fp)
   3f100:	e13ffd17 	ldw	r4,-12(fp)
   3f104:	003edc80 	call	3edc8 <convert_bits>
   3f108:	1000021e 	bne	r2,zero,3f114 <segwit_addr_decode+0xe0>
   3f10c:	0005883a 	mov	r2,zero
   3f110:	00001c06 	br	3f184 <segwit_addr_decode+0x150>
    if (*witdata_len < 2 || *witdata_len > 40) return 0;
   3f114:	e0bffe17 	ldw	r2,-8(fp)
   3f118:	10800017 	ldw	r2,0(r2)
   3f11c:	108000b0 	cmpltui	r2,r2,2
   3f120:	1000041e 	bne	r2,zero,3f134 <segwit_addr_decode+0x100>
   3f124:	e0bffe17 	ldw	r2,-8(fp)
   3f128:	10800017 	ldw	r2,0(r2)
   3f12c:	10800a70 	cmpltui	r2,r2,41
   3f130:	1000021e 	bne	r2,zero,3f13c <segwit_addr_decode+0x108>
   3f134:	0005883a 	mov	r2,zero
   3f138:	00001206 	br	3f184 <segwit_addr_decode+0x150>
    if (data[0] == 0 && *witdata_len != 20 && *witdata_len != 32) return 0;
   3f13c:	e0bfd103 	ldbu	r2,-188(fp)
   3f140:	10803fcc 	andi	r2,r2,255
   3f144:	10000a1e 	bne	r2,zero,3f170 <segwit_addr_decode+0x13c>
   3f148:	e0bffe17 	ldw	r2,-8(fp)
   3f14c:	10800017 	ldw	r2,0(r2)
   3f150:	10800520 	cmpeqi	r2,r2,20
   3f154:	1000061e 	bne	r2,zero,3f170 <segwit_addr_decode+0x13c>
   3f158:	e0bffe17 	ldw	r2,-8(fp)
   3f15c:	10800017 	ldw	r2,0(r2)
   3f160:	10800820 	cmpeqi	r2,r2,32
   3f164:	1000021e 	bne	r2,zero,3f170 <segwit_addr_decode+0x13c>
   3f168:	0005883a 	mov	r2,zero
   3f16c:	00000506 	br	3f184 <segwit_addr_decode+0x150>
    *witver = data[0];
   3f170:	e0bfd103 	ldbu	r2,-188(fp)
   3f174:	10c03fcc 	andi	r3,r2,255
   3f178:	e0bffc17 	ldw	r2,-16(fp)
   3f17c:	10c00015 	stw	r3,0(r2)
    return 1;
   3f180:	00800044 	movi	r2,1
}
   3f184:	e037883a 	mov	sp,fp
   3f188:	dfc00117 	ldw	ra,4(sp)
   3f18c:	df000017 	ldw	fp,0(sp)
   3f190:	dec00204 	addi	sp,sp,8
   3f194:	f800283a 	ret

0003f198 <ser_bytes>:
#include "..\include\btc\serialize.h"

#include <string.h>

void ser_bytes(cstring* s, const void* p, size_t len)
{
   3f198:	defffb04 	addi	sp,sp,-20
   3f19c:	dfc00415 	stw	ra,16(sp)
   3f1a0:	df000315 	stw	fp,12(sp)
   3f1a4:	df000304 	addi	fp,sp,12
   3f1a8:	e13ffd15 	stw	r4,-12(fp)
   3f1ac:	e17ffe15 	stw	r5,-8(fp)
   3f1b0:	e1bfff15 	stw	r6,-4(fp)
    cstr_append_buf(s, p, len);
   3f1b4:	e1bfff17 	ldw	r6,-4(fp)
   3f1b8:	e17ffe17 	ldw	r5,-8(fp)
   3f1bc:	e13ffd17 	ldw	r4,-12(fp)
   3f1c0:	00435100 	call	43510 <cstr_append_buf>
}
   3f1c4:	0001883a 	nop
   3f1c8:	e037883a 	mov	sp,fp
   3f1cc:	dfc00117 	ldw	ra,4(sp)
   3f1d0:	df000017 	ldw	fp,0(sp)
   3f1d4:	dec00204 	addi	sp,sp,8
   3f1d8:	f800283a 	ret

0003f1dc <ser_u16>:

void ser_u16(cstring* s, uint16_t v_)
{
   3f1dc:	defffb04 	addi	sp,sp,-20
   3f1e0:	dfc00415 	stw	ra,16(sp)
   3f1e4:	df000315 	stw	fp,12(sp)
   3f1e8:	df000304 	addi	fp,sp,12
   3f1ec:	e13ffe15 	stw	r4,-8(fp)
   3f1f0:	2805883a 	mov	r2,r5
   3f1f4:	e0bfff0d 	sth	r2,-4(fp)
    uint16_t v = htole16(v_);
   3f1f8:	e0bfff0b 	ldhu	r2,-4(fp)
   3f1fc:	e0bffd0d 	sth	r2,-12(fp)
    cstr_append_buf(s, &v, sizeof(v));
   3f200:	01800084 	movi	r6,2
   3f204:	e17ffd04 	addi	r5,fp,-12
   3f208:	e13ffe17 	ldw	r4,-8(fp)
   3f20c:	00435100 	call	43510 <cstr_append_buf>
}
   3f210:	0001883a 	nop
   3f214:	e037883a 	mov	sp,fp
   3f218:	dfc00117 	ldw	ra,4(sp)
   3f21c:	df000017 	ldw	fp,0(sp)
   3f220:	dec00204 	addi	sp,sp,8
   3f224:	f800283a 	ret

0003f228 <ser_u32>:

void ser_u32(cstring* s, uint32_t v_)
{
   3f228:	defffb04 	addi	sp,sp,-20
   3f22c:	dfc00415 	stw	ra,16(sp)
   3f230:	df000315 	stw	fp,12(sp)
   3f234:	df000304 	addi	fp,sp,12
   3f238:	e13ffe15 	stw	r4,-8(fp)
   3f23c:	e17fff15 	stw	r5,-4(fp)
    uint32_t v = htole32(v_);
   3f240:	e0bfff17 	ldw	r2,-4(fp)
   3f244:	e0bffd15 	stw	r2,-12(fp)
    cstr_append_buf(s, &v, sizeof(v));
   3f248:	01800104 	movi	r6,4
   3f24c:	e17ffd04 	addi	r5,fp,-12
   3f250:	e13ffe17 	ldw	r4,-8(fp)
   3f254:	00435100 	call	43510 <cstr_append_buf>
}
   3f258:	0001883a 	nop
   3f25c:	e037883a 	mov	sp,fp
   3f260:	dfc00117 	ldw	ra,4(sp)
   3f264:	df000017 	ldw	fp,0(sp)
   3f268:	dec00204 	addi	sp,sp,8
   3f26c:	f800283a 	ret

0003f270 <ser_s32>:

void ser_s32(cstring* s, int32_t v_)
{
   3f270:	defffc04 	addi	sp,sp,-16
   3f274:	dfc00315 	stw	ra,12(sp)
   3f278:	df000215 	stw	fp,8(sp)
   3f27c:	df000204 	addi	fp,sp,8
   3f280:	e13ffe15 	stw	r4,-8(fp)
   3f284:	e17fff15 	stw	r5,-4(fp)
    ser_u32(s, (uint32_t)v_);
   3f288:	e0bfff17 	ldw	r2,-4(fp)
   3f28c:	100b883a 	mov	r5,r2
   3f290:	e13ffe17 	ldw	r4,-8(fp)
   3f294:	003f2280 	call	3f228 <ser_u32>
}
   3f298:	0001883a 	nop
   3f29c:	e037883a 	mov	sp,fp
   3f2a0:	dfc00117 	ldw	ra,4(sp)
   3f2a4:	df000017 	ldw	fp,0(sp)
   3f2a8:	dec00204 	addi	sp,sp,8
   3f2ac:	f800283a 	ret

0003f2b0 <ser_u64>:

void ser_u64(cstring* s, uint64_t v_)
{
   3f2b0:	defff904 	addi	sp,sp,-28
   3f2b4:	dfc00615 	stw	ra,24(sp)
   3f2b8:	df000515 	stw	fp,20(sp)
   3f2bc:	df000504 	addi	fp,sp,20
   3f2c0:	e13ffd15 	stw	r4,-12(fp)
   3f2c4:	e17ffe15 	stw	r5,-8(fp)
   3f2c8:	e1bfff15 	stw	r6,-4(fp)
    uint64_t v = htole64(v_);
   3f2cc:	e0bffe17 	ldw	r2,-8(fp)
   3f2d0:	e0bffb15 	stw	r2,-20(fp)
   3f2d4:	e0bfff17 	ldw	r2,-4(fp)
   3f2d8:	e0bffc15 	stw	r2,-16(fp)
    cstr_append_buf(s, &v, sizeof(v));
   3f2dc:	01800204 	movi	r6,8
   3f2e0:	e17ffb04 	addi	r5,fp,-20
   3f2e4:	e13ffd17 	ldw	r4,-12(fp)
   3f2e8:	00435100 	call	43510 <cstr_append_buf>
}
   3f2ec:	0001883a 	nop
   3f2f0:	e037883a 	mov	sp,fp
   3f2f4:	dfc00117 	ldw	ra,4(sp)
   3f2f8:	df000017 	ldw	fp,0(sp)
   3f2fc:	dec00204 	addi	sp,sp,8
   3f300:	f800283a 	ret

0003f304 <ser_s64>:

void ser_s64(cstring* s, int64_t v_)
{
   3f304:	defffb04 	addi	sp,sp,-20
   3f308:	dfc00415 	stw	ra,16(sp)
   3f30c:	df000315 	stw	fp,12(sp)
   3f310:	df000304 	addi	fp,sp,12
   3f314:	e13ffd15 	stw	r4,-12(fp)
   3f318:	e17ffe15 	stw	r5,-8(fp)
   3f31c:	e1bfff15 	stw	r6,-4(fp)
    ser_u64(s, (uint64_t)v_);
   3f320:	e0bffe17 	ldw	r2,-8(fp)
   3f324:	e0ffff17 	ldw	r3,-4(fp)
   3f328:	100b883a 	mov	r5,r2
   3f32c:	180d883a 	mov	r6,r3
   3f330:	e13ffd17 	ldw	r4,-12(fp)
   3f334:	003f2b00 	call	3f2b0 <ser_u64>
}
   3f338:	0001883a 	nop
   3f33c:	e037883a 	mov	sp,fp
   3f340:	dfc00117 	ldw	ra,4(sp)
   3f344:	df000017 	ldw	fp,0(sp)
   3f348:	dec00204 	addi	sp,sp,8
   3f34c:	f800283a 	ret

0003f350 <ser_u256>:

void ser_u256(cstring* s, const unsigned char* v_)
{
   3f350:	defffc04 	addi	sp,sp,-16
   3f354:	dfc00315 	stw	ra,12(sp)
   3f358:	df000215 	stw	fp,8(sp)
   3f35c:	df000204 	addi	fp,sp,8
   3f360:	e13ffe15 	stw	r4,-8(fp)
   3f364:	e17fff15 	stw	r5,-4(fp)
    ser_bytes(s, v_, 32);
   3f368:	01800804 	movi	r6,32
   3f36c:	e17fff17 	ldw	r5,-4(fp)
   3f370:	e13ffe17 	ldw	r4,-8(fp)
   3f374:	003f1980 	call	3f198 <ser_bytes>
}
   3f378:	0001883a 	nop
   3f37c:	e037883a 	mov	sp,fp
   3f380:	dfc00117 	ldw	ra,4(sp)
   3f384:	df000017 	ldw	fp,0(sp)
   3f388:	dec00204 	addi	sp,sp,8
   3f38c:	f800283a 	ret

0003f390 <ser_varlen>:

void ser_varlen(cstring* s, uint32_t vlen)
{
   3f390:	defffb04 	addi	sp,sp,-20
   3f394:	dfc00415 	stw	ra,16(sp)
   3f398:	df000315 	stw	fp,12(sp)
   3f39c:	df000304 	addi	fp,sp,12
   3f3a0:	e13ffe15 	stw	r4,-8(fp)
   3f3a4:	e17fff15 	stw	r5,-4(fp)
    unsigned char c;

    if (vlen < 253) {
   3f3a8:	e0bfff17 	ldw	r2,-4(fp)
   3f3ac:	10803f68 	cmpgeui	r2,r2,253
   3f3b0:	1000071e 	bne	r2,zero,3f3d0 <ser_varlen+0x40>
        c = vlen;
   3f3b4:	e0bfff17 	ldw	r2,-4(fp)
   3f3b8:	e0bffd05 	stb	r2,-12(fp)
        ser_bytes(s, &c, 1);
   3f3bc:	01800044 	movi	r6,1
   3f3c0:	e17ffd04 	addi	r5,fp,-12
   3f3c4:	e13ffe17 	ldw	r4,-8(fp)
   3f3c8:	003f1980 	call	3f198 <ser_bytes>
        ser_bytes(s, &c, 1);
        ser_u32(s, vlen);
    }

    /* u64 case intentionally not implemented */
}
   3f3cc:	00001806 	br	3f430 <ser_varlen+0xa0>
    if (vlen < 253) {
        c = vlen;
        ser_bytes(s, &c, 1);
    }

    else if (vlen < 0x10000) {
   3f3d0:	e0bfff17 	ldw	r2,-4(fp)
   3f3d4:	00ffffd4 	movui	r3,65535
   3f3d8:	18800c36 	bltu	r3,r2,3f40c <ser_varlen+0x7c>
        c = 253;
   3f3dc:	00bfff44 	movi	r2,-3
   3f3e0:	e0bffd05 	stb	r2,-12(fp)
        ser_bytes(s, &c, 1);
   3f3e4:	01800044 	movi	r6,1
   3f3e8:	e17ffd04 	addi	r5,fp,-12
   3f3ec:	e13ffe17 	ldw	r4,-8(fp)
   3f3f0:	003f1980 	call	3f198 <ser_bytes>
        ser_u16(s, (uint16_t)vlen);
   3f3f4:	e0bfff17 	ldw	r2,-4(fp)
   3f3f8:	10bfffcc 	andi	r2,r2,65535
   3f3fc:	100b883a 	mov	r5,r2
   3f400:	e13ffe17 	ldw	r4,-8(fp)
   3f404:	003f1dc0 	call	3f1dc <ser_u16>
        ser_bytes(s, &c, 1);
        ser_u32(s, vlen);
    }

    /* u64 case intentionally not implemented */
}
   3f408:	00000906 	br	3f430 <ser_varlen+0xa0>
        ser_bytes(s, &c, 1);
        ser_u16(s, (uint16_t)vlen);
    }

    else {
        c = 254;
   3f40c:	00bfff84 	movi	r2,-2
   3f410:	e0bffd05 	stb	r2,-12(fp)
        ser_bytes(s, &c, 1);
   3f414:	01800044 	movi	r6,1
   3f418:	e17ffd04 	addi	r5,fp,-12
   3f41c:	e13ffe17 	ldw	r4,-8(fp)
   3f420:	003f1980 	call	3f198 <ser_bytes>
        ser_u32(s, vlen);
   3f424:	e17fff17 	ldw	r5,-4(fp)
   3f428:	e13ffe17 	ldw	r4,-8(fp)
   3f42c:	003f2280 	call	3f228 <ser_u32>
    }

    /* u64 case intentionally not implemented */
}
   3f430:	0001883a 	nop
   3f434:	e037883a 	mov	sp,fp
   3f438:	dfc00117 	ldw	ra,4(sp)
   3f43c:	df000017 	ldw	fp,0(sp)
   3f440:	dec00204 	addi	sp,sp,8
   3f444:	f800283a 	ret

0003f448 <ser_str>:

void ser_str(cstring* s, const char* s_in, size_t maxlen)
{
   3f448:	defffa04 	addi	sp,sp,-24
   3f44c:	dfc00515 	stw	ra,20(sp)
   3f450:	df000415 	stw	fp,16(sp)
   3f454:	df000404 	addi	fp,sp,16
   3f458:	e13ffd15 	stw	r4,-12(fp)
   3f45c:	e17ffe15 	stw	r5,-8(fp)
   3f460:	e1bfff15 	stw	r6,-4(fp)
    size_t slen = strnlen(s_in, maxlen);
   3f464:	e17fff17 	ldw	r5,-4(fp)
   3f468:	e13ffe17 	ldw	r4,-8(fp)
   3f46c:	0046d0c0 	call	46d0c <strnlen>
   3f470:	e0bffc15 	stw	r2,-16(fp)

    ser_varlen(s, slen);
   3f474:	e17ffc17 	ldw	r5,-16(fp)
   3f478:	e13ffd17 	ldw	r4,-12(fp)
   3f47c:	003f3900 	call	3f390 <ser_varlen>
    ser_bytes(s, s_in, slen);
   3f480:	e1bffc17 	ldw	r6,-16(fp)
   3f484:	e17ffe17 	ldw	r5,-8(fp)
   3f488:	e13ffd17 	ldw	r4,-12(fp)
   3f48c:	003f1980 	call	3f198 <ser_bytes>
}
   3f490:	0001883a 	nop
   3f494:	e037883a 	mov	sp,fp
   3f498:	dfc00117 	ldw	ra,4(sp)
   3f49c:	df000017 	ldw	fp,0(sp)
   3f4a0:	dec00204 	addi	sp,sp,8
   3f4a4:	f800283a 	ret

0003f4a8 <ser_varstr>:

void ser_varstr(cstring* s, cstring* s_in)
{
   3f4a8:	defffc04 	addi	sp,sp,-16
   3f4ac:	dfc00315 	stw	ra,12(sp)
   3f4b0:	df000215 	stw	fp,8(sp)
   3f4b4:	df000204 	addi	fp,sp,8
   3f4b8:	e13ffe15 	stw	r4,-8(fp)
   3f4bc:	e17fff15 	stw	r5,-4(fp)
    if (!s_in || !s_in->len) {
   3f4c0:	e0bfff17 	ldw	r2,-4(fp)
   3f4c4:	10000326 	beq	r2,zero,3f4d4 <ser_varstr+0x2c>
   3f4c8:	e0bfff17 	ldw	r2,-4(fp)
   3f4cc:	10800117 	ldw	r2,4(r2)
   3f4d0:	1000041e 	bne	r2,zero,3f4e4 <ser_varstr+0x3c>
        ser_varlen(s, 0);
   3f4d4:	000b883a 	mov	r5,zero
   3f4d8:	e13ffe17 	ldw	r4,-8(fp)
   3f4dc:	003f3900 	call	3f390 <ser_varlen>
        return;
   3f4e0:	00000d06 	br	3f518 <ser_varstr+0x70>
    }

    ser_varlen(s, s_in->len);
   3f4e4:	e0bfff17 	ldw	r2,-4(fp)
   3f4e8:	10800117 	ldw	r2,4(r2)
   3f4ec:	100b883a 	mov	r5,r2
   3f4f0:	e13ffe17 	ldw	r4,-8(fp)
   3f4f4:	003f3900 	call	3f390 <ser_varlen>
    ser_bytes(s, s_in->str, s_in->len);
   3f4f8:	e0bfff17 	ldw	r2,-4(fp)
   3f4fc:	10c00017 	ldw	r3,0(r2)
   3f500:	e0bfff17 	ldw	r2,-4(fp)
   3f504:	10800117 	ldw	r2,4(r2)
   3f508:	100d883a 	mov	r6,r2
   3f50c:	180b883a 	mov	r5,r3
   3f510:	e13ffe17 	ldw	r4,-8(fp)
   3f514:	003f1980 	call	3f198 <ser_bytes>
}
   3f518:	e037883a 	mov	sp,fp
   3f51c:	dfc00117 	ldw	ra,4(sp)
   3f520:	df000017 	ldw	fp,0(sp)
   3f524:	dec00204 	addi	sp,sp,8
   3f528:	f800283a 	ret

0003f52c <deser_skip>:

int deser_skip(struct const_buffer* buf, size_t len)
{
   3f52c:	defffc04 	addi	sp,sp,-16
   3f530:	df000315 	stw	fp,12(sp)
   3f534:	df000304 	addi	fp,sp,12
   3f538:	e13ffe15 	stw	r4,-8(fp)
   3f53c:	e17fff15 	stw	r5,-4(fp)
    char* p;
    if (buf->len < len)
   3f540:	e0bffe17 	ldw	r2,-8(fp)
   3f544:	10c00117 	ldw	r3,4(r2)
   3f548:	e0bfff17 	ldw	r2,-4(fp)
   3f54c:	1880022e 	bgeu	r3,r2,3f558 <deser_skip+0x2c>
        return false;
   3f550:	0005883a 	mov	r2,zero
   3f554:	00001106 	br	3f59c <deser_skip+0x70>

    p = (char*)buf->p;
   3f558:	e0bffe17 	ldw	r2,-8(fp)
   3f55c:	10800017 	ldw	r2,0(r2)
   3f560:	e0bffd15 	stw	r2,-12(fp)
    p += len;
   3f564:	e0fffd17 	ldw	r3,-12(fp)
   3f568:	e0bfff17 	ldw	r2,-4(fp)
   3f56c:	1885883a 	add	r2,r3,r2
   3f570:	e0bffd15 	stw	r2,-12(fp)
    buf->p = p;
   3f574:	e0bffe17 	ldw	r2,-8(fp)
   3f578:	e0fffd17 	ldw	r3,-12(fp)
   3f57c:	10c00015 	stw	r3,0(r2)
    buf->len -= len;
   3f580:	e0bffe17 	ldw	r2,-8(fp)
   3f584:	10c00117 	ldw	r3,4(r2)
   3f588:	e0bfff17 	ldw	r2,-4(fp)
   3f58c:	1887c83a 	sub	r3,r3,r2
   3f590:	e0bffe17 	ldw	r2,-8(fp)
   3f594:	10c00115 	stw	r3,4(r2)

    return true;
   3f598:	00800044 	movi	r2,1
}
   3f59c:	e037883a 	mov	sp,fp
   3f5a0:	df000017 	ldw	fp,0(sp)
   3f5a4:	dec00104 	addi	sp,sp,4
   3f5a8:	f800283a 	ret

0003f5ac <deser_bytes>:

int deser_bytes(void* po, struct const_buffer* buf, size_t len)
{
   3f5ac:	defffa04 	addi	sp,sp,-24
   3f5b0:	dfc00515 	stw	ra,20(sp)
   3f5b4:	df000415 	stw	fp,16(sp)
   3f5b8:	df000404 	addi	fp,sp,16
   3f5bc:	e13ffd15 	stw	r4,-12(fp)
   3f5c0:	e17ffe15 	stw	r5,-8(fp)
   3f5c4:	e1bfff15 	stw	r6,-4(fp)
    char* p;
    if (buf->len < len)
   3f5c8:	e0bffe17 	ldw	r2,-8(fp)
   3f5cc:	10c00117 	ldw	r3,4(r2)
   3f5d0:	e0bfff17 	ldw	r2,-4(fp)
   3f5d4:	1880022e 	bgeu	r3,r2,3f5e0 <deser_bytes+0x34>
        return false;
   3f5d8:	0005883a 	mov	r2,zero
   3f5dc:	00001706 	br	3f63c <deser_bytes+0x90>

    memcpy(po, buf->p, len);
   3f5e0:	e0bffe17 	ldw	r2,-8(fp)
   3f5e4:	10800017 	ldw	r2,0(r2)
   3f5e8:	e1bfff17 	ldw	r6,-4(fp)
   3f5ec:	100b883a 	mov	r5,r2
   3f5f0:	e13ffd17 	ldw	r4,-12(fp)
   3f5f4:	00463980 	call	46398 <memcpy>
    p = (char*)buf->p;
   3f5f8:	e0bffe17 	ldw	r2,-8(fp)
   3f5fc:	10800017 	ldw	r2,0(r2)
   3f600:	e0bffc15 	stw	r2,-16(fp)
    p += len;
   3f604:	e0fffc17 	ldw	r3,-16(fp)
   3f608:	e0bfff17 	ldw	r2,-4(fp)
   3f60c:	1885883a 	add	r2,r3,r2
   3f610:	e0bffc15 	stw	r2,-16(fp)
    buf->p = p;
   3f614:	e0bffe17 	ldw	r2,-8(fp)
   3f618:	e0fffc17 	ldw	r3,-16(fp)
   3f61c:	10c00015 	stw	r3,0(r2)
    buf->len -= len;
   3f620:	e0bffe17 	ldw	r2,-8(fp)
   3f624:	10c00117 	ldw	r3,4(r2)
   3f628:	e0bfff17 	ldw	r2,-4(fp)
   3f62c:	1887c83a 	sub	r3,r3,r2
   3f630:	e0bffe17 	ldw	r2,-8(fp)
   3f634:	10c00115 	stw	r3,4(r2)

    return true;
   3f638:	00800044 	movi	r2,1
}
   3f63c:	e037883a 	mov	sp,fp
   3f640:	dfc00117 	ldw	ra,4(sp)
   3f644:	df000017 	ldw	fp,0(sp)
   3f648:	dec00204 	addi	sp,sp,8
   3f64c:	f800283a 	ret

0003f650 <deser_u16>:

int deser_u16(uint16_t* vo, struct const_buffer* buf)
{
   3f650:	defffb04 	addi	sp,sp,-20
   3f654:	dfc00415 	stw	ra,16(sp)
   3f658:	df000315 	stw	fp,12(sp)
   3f65c:	df000304 	addi	fp,sp,12
   3f660:	e13ffe15 	stw	r4,-8(fp)
   3f664:	e17fff15 	stw	r5,-4(fp)
    uint16_t v;

    if (!deser_bytes(&v, buf, sizeof(v)))
   3f668:	01800084 	movi	r6,2
   3f66c:	e17fff17 	ldw	r5,-4(fp)
   3f670:	e13ffd04 	addi	r4,fp,-12
   3f674:	003f5ac0 	call	3f5ac <deser_bytes>
   3f678:	1000021e 	bne	r2,zero,3f684 <deser_u16+0x34>
        return false;
   3f67c:	0005883a 	mov	r2,zero
   3f680:	00000406 	br	3f694 <deser_u16+0x44>

    *vo = le16toh(v);
   3f684:	e0fffd0b 	ldhu	r3,-12(fp)
   3f688:	e0bffe17 	ldw	r2,-8(fp)
   3f68c:	10c0000d 	sth	r3,0(r2)
    return true;
   3f690:	00800044 	movi	r2,1
}
   3f694:	e037883a 	mov	sp,fp
   3f698:	dfc00117 	ldw	ra,4(sp)
   3f69c:	df000017 	ldw	fp,0(sp)
   3f6a0:	dec00204 	addi	sp,sp,8
   3f6a4:	f800283a 	ret

0003f6a8 <deser_s32>:

int deser_s32(int32_t* vo, struct const_buffer* buf)
{
   3f6a8:	defffb04 	addi	sp,sp,-20
   3f6ac:	dfc00415 	stw	ra,16(sp)
   3f6b0:	df000315 	stw	fp,12(sp)
   3f6b4:	df000304 	addi	fp,sp,12
   3f6b8:	e13ffe15 	stw	r4,-8(fp)
   3f6bc:	e17fff15 	stw	r5,-4(fp)
    int32_t v;

    if (!deser_bytes(&v, buf, sizeof(v)))
   3f6c0:	01800104 	movi	r6,4
   3f6c4:	e17fff17 	ldw	r5,-4(fp)
   3f6c8:	e13ffd04 	addi	r4,fp,-12
   3f6cc:	003f5ac0 	call	3f5ac <deser_bytes>
   3f6d0:	1000021e 	bne	r2,zero,3f6dc <deser_s32+0x34>
        return false;
   3f6d4:	0005883a 	mov	r2,zero
   3f6d8:	00000406 	br	3f6ec <deser_s32+0x44>

    *vo = le32toh(v);
   3f6dc:	e0fffd17 	ldw	r3,-12(fp)
   3f6e0:	e0bffe17 	ldw	r2,-8(fp)
   3f6e4:	10c00015 	stw	r3,0(r2)
    return true;
   3f6e8:	00800044 	movi	r2,1
}
   3f6ec:	e037883a 	mov	sp,fp
   3f6f0:	dfc00117 	ldw	ra,4(sp)
   3f6f4:	df000017 	ldw	fp,0(sp)
   3f6f8:	dec00204 	addi	sp,sp,8
   3f6fc:	f800283a 	ret

0003f700 <deser_u32>:

int deser_u32(uint32_t* vo, struct const_buffer* buf)
{
   3f700:	defffb04 	addi	sp,sp,-20
   3f704:	dfc00415 	stw	ra,16(sp)
   3f708:	df000315 	stw	fp,12(sp)
   3f70c:	df000304 	addi	fp,sp,12
   3f710:	e13ffe15 	stw	r4,-8(fp)
   3f714:	e17fff15 	stw	r5,-4(fp)
    uint32_t v;

    if (!deser_bytes(&v, buf, sizeof(v)))
   3f718:	01800104 	movi	r6,4
   3f71c:	e17fff17 	ldw	r5,-4(fp)
   3f720:	e13ffd04 	addi	r4,fp,-12
   3f724:	003f5ac0 	call	3f5ac <deser_bytes>
   3f728:	1000021e 	bne	r2,zero,3f734 <deser_u32+0x34>
        return false;
   3f72c:	0005883a 	mov	r2,zero
   3f730:	00000406 	br	3f744 <deser_u32+0x44>

    *vo = le32toh(v);
   3f734:	e0fffd17 	ldw	r3,-12(fp)
   3f738:	e0bffe17 	ldw	r2,-8(fp)
   3f73c:	10c00015 	stw	r3,0(r2)
    return true;
   3f740:	00800044 	movi	r2,1
}
   3f744:	e037883a 	mov	sp,fp
   3f748:	dfc00117 	ldw	ra,4(sp)
   3f74c:	df000017 	ldw	fp,0(sp)
   3f750:	dec00204 	addi	sp,sp,8
   3f754:	f800283a 	ret

0003f758 <deser_u64>:

int deser_u64(uint64_t* vo, struct const_buffer* buf)
{
   3f758:	defffa04 	addi	sp,sp,-24
   3f75c:	dfc00515 	stw	ra,20(sp)
   3f760:	df000415 	stw	fp,16(sp)
   3f764:	df000404 	addi	fp,sp,16
   3f768:	e13ffe15 	stw	r4,-8(fp)
   3f76c:	e17fff15 	stw	r5,-4(fp)
    uint64_t v;

    if (!deser_bytes(&v, buf, sizeof(v)))
   3f770:	01800204 	movi	r6,8
   3f774:	e17fff17 	ldw	r5,-4(fp)
   3f778:	e13ffc04 	addi	r4,fp,-16
   3f77c:	003f5ac0 	call	3f5ac <deser_bytes>
   3f780:	1000021e 	bne	r2,zero,3f78c <deser_u64+0x34>
        return false;
   3f784:	0005883a 	mov	r2,zero
   3f788:	00000606 	br	3f7a4 <deser_u64+0x4c>

    *vo = le64toh(v);
   3f78c:	e0bffc17 	ldw	r2,-16(fp)
   3f790:	e0fffd17 	ldw	r3,-12(fp)
   3f794:	e13ffe17 	ldw	r4,-8(fp)
   3f798:	20800015 	stw	r2,0(r4)
   3f79c:	20c00115 	stw	r3,4(r4)
    return true;
   3f7a0:	00800044 	movi	r2,1
}
   3f7a4:	e037883a 	mov	sp,fp
   3f7a8:	dfc00117 	ldw	ra,4(sp)
   3f7ac:	df000017 	ldw	fp,0(sp)
   3f7b0:	dec00204 	addi	sp,sp,8
   3f7b4:	f800283a 	ret

0003f7b8 <deser_u256>:

int deser_u256(uint256 vo, struct const_buffer* buf)
{
   3f7b8:	defffc04 	addi	sp,sp,-16
   3f7bc:	dfc00315 	stw	ra,12(sp)
   3f7c0:	df000215 	stw	fp,8(sp)
   3f7c4:	df000204 	addi	fp,sp,8
   3f7c8:	e13ffe15 	stw	r4,-8(fp)
   3f7cc:	e17fff15 	stw	r5,-4(fp)
    return deser_bytes(vo, buf, 32);
   3f7d0:	01800804 	movi	r6,32
   3f7d4:	e17fff17 	ldw	r5,-4(fp)
   3f7d8:	e13ffe17 	ldw	r4,-8(fp)
   3f7dc:	003f5ac0 	call	3f5ac <deser_bytes>
}
   3f7e0:	e037883a 	mov	sp,fp
   3f7e4:	dfc00117 	ldw	ra,4(sp)
   3f7e8:	df000017 	ldw	fp,0(sp)
   3f7ec:	dec00204 	addi	sp,sp,8
   3f7f0:	f800283a 	ret

0003f7f4 <deser_varlen>:

int deser_varlen(uint32_t* lo, struct const_buffer* buf)
{
   3f7f4:	defff704 	addi	sp,sp,-36
   3f7f8:	dfc00815 	stw	ra,32(sp)
   3f7fc:	df000715 	stw	fp,28(sp)
   3f800:	df000704 	addi	fp,sp,28
   3f804:	e13ffe15 	stw	r4,-8(fp)
   3f808:	e17fff15 	stw	r5,-4(fp)
    uint32_t len;

    unsigned char c;
    if (!deser_bytes(&c, buf, 1))
   3f80c:	e0bffa04 	addi	r2,fp,-24
   3f810:	01800044 	movi	r6,1
   3f814:	e17fff17 	ldw	r5,-4(fp)
   3f818:	1009883a 	mov	r4,r2
   3f81c:	003f5ac0 	call	3f5ac <deser_bytes>
   3f820:	1000021e 	bne	r2,zero,3f82c <deser_varlen+0x38>
        return false;
   3f824:	0005883a 	mov	r2,zero
   3f828:	00003306 	br	3f8f8 <deser_varlen+0x104>

    if (c == 253) {
   3f82c:	e0bffa03 	ldbu	r2,-24(fp)
   3f830:	10803fcc 	andi	r2,r2,255
   3f834:	10803f58 	cmpnei	r2,r2,253
   3f838:	10000b1e 	bne	r2,zero,3f868 <deser_varlen+0x74>
        uint16_t v16;
        if (!deser_u16(&v16, buf))
   3f83c:	e0bffa84 	addi	r2,fp,-22
   3f840:	e17fff17 	ldw	r5,-4(fp)
   3f844:	1009883a 	mov	r4,r2
   3f848:	003f6500 	call	3f650 <deser_u16>
   3f84c:	1000021e 	bne	r2,zero,3f858 <deser_varlen+0x64>
            return false;
   3f850:	0005883a 	mov	r2,zero
   3f854:	00002806 	br	3f8f8 <deser_varlen+0x104>
        len = v16;
   3f858:	e0bffa8b 	ldhu	r2,-22(fp)
   3f85c:	10bfffcc 	andi	r2,r2,65535
   3f860:	e0bff915 	stw	r2,-28(fp)
   3f864:	00002006 	br	3f8e8 <deser_varlen+0xf4>
    } else if (c == 254) {
   3f868:	e0bffa03 	ldbu	r2,-24(fp)
   3f86c:	10803fcc 	andi	r2,r2,255
   3f870:	10803f98 	cmpnei	r2,r2,254
   3f874:	10000a1e 	bne	r2,zero,3f8a0 <deser_varlen+0xac>
        uint32_t v32;
        if (!deser_u32(&v32, buf))
   3f878:	e0bffb04 	addi	r2,fp,-20
   3f87c:	e17fff17 	ldw	r5,-4(fp)
   3f880:	1009883a 	mov	r4,r2
   3f884:	003f7000 	call	3f700 <deser_u32>
   3f888:	1000021e 	bne	r2,zero,3f894 <deser_varlen+0xa0>
            return false;
   3f88c:	0005883a 	mov	r2,zero
   3f890:	00001906 	br	3f8f8 <deser_varlen+0x104>
        len = v32;
   3f894:	e0bffb17 	ldw	r2,-20(fp)
   3f898:	e0bff915 	stw	r2,-28(fp)
   3f89c:	00001206 	br	3f8e8 <deser_varlen+0xf4>
    } else if (c == 255) {
   3f8a0:	e0bffa03 	ldbu	r2,-24(fp)
   3f8a4:	10803fcc 	andi	r2,r2,255
   3f8a8:	10803fd8 	cmpnei	r2,r2,255
   3f8ac:	10000b1e 	bne	r2,zero,3f8dc <deser_varlen+0xe8>
        uint64_t v64;
        if (!deser_u64(&v64, buf))
   3f8b0:	e0bffc04 	addi	r2,fp,-16
   3f8b4:	e17fff17 	ldw	r5,-4(fp)
   3f8b8:	1009883a 	mov	r4,r2
   3f8bc:	003f7580 	call	3f758 <deser_u64>
   3f8c0:	1000021e 	bne	r2,zero,3f8cc <deser_varlen+0xd8>
            return false;
   3f8c4:	0005883a 	mov	r2,zero
   3f8c8:	00000b06 	br	3f8f8 <deser_varlen+0x104>
        len = (uint32_t)v64; /* WARNING: truncate */
   3f8cc:	e0bffc17 	ldw	r2,-16(fp)
   3f8d0:	e0fffd17 	ldw	r3,-12(fp)
   3f8d4:	e0bff915 	stw	r2,-28(fp)
   3f8d8:	00000306 	br	3f8e8 <deser_varlen+0xf4>
    } else
        len = c;
   3f8dc:	e0bffa03 	ldbu	r2,-24(fp)
   3f8e0:	10803fcc 	andi	r2,r2,255
   3f8e4:	e0bff915 	stw	r2,-28(fp)

    *lo = len;
   3f8e8:	e0bffe17 	ldw	r2,-8(fp)
   3f8ec:	e0fff917 	ldw	r3,-28(fp)
   3f8f0:	10c00015 	stw	r3,0(r2)
    return true;
   3f8f4:	00800044 	movi	r2,1
}
   3f8f8:	e037883a 	mov	sp,fp
   3f8fc:	dfc00117 	ldw	ra,4(sp)
   3f900:	df000017 	ldw	fp,0(sp)
   3f904:	dec00204 	addi	sp,sp,8
   3f908:	f800283a 	ret

0003f90c <deser_str>:
//    return true;
//}


int deser_str(char* so, struct const_buffer* buf, size_t maxlen)
{
   3f90c:	defff904 	addi	sp,sp,-28
   3f910:	dfc00615 	stw	ra,24(sp)
   3f914:	df000515 	stw	fp,20(sp)
   3f918:	df000504 	addi	fp,sp,20
   3f91c:	e13ffd15 	stw	r4,-12(fp)
   3f920:	e17ffe15 	stw	r5,-8(fp)
   3f924:	e1bfff15 	stw	r6,-4(fp)
    uint32_t len;
    uint32_t skip_len = 0;
   3f928:	e03ffb15 	stw	zero,-20(fp)
    if (!deser_varlen(&len, buf))
   3f92c:	e0bffc04 	addi	r2,fp,-16
   3f930:	e17ffe17 	ldw	r5,-8(fp)
   3f934:	1009883a 	mov	r4,r2
   3f938:	003f7f40 	call	3f7f4 <deser_varlen>
   3f93c:	1000021e 	bne	r2,zero,3f948 <deser_str+0x3c>
        return false;
   3f940:	0005883a 	mov	r2,zero
   3f944:	00002506 	br	3f9dc <deser_str+0xd0>

    /* if input larger than buffer, truncate copy, skip remainder */
    if (len > maxlen) {
   3f948:	e0bffc17 	ldw	r2,-16(fp)
   3f94c:	e0ffff17 	ldw	r3,-4(fp)
   3f950:	1880062e 	bgeu	r3,r2,3f96c <deser_str+0x60>
        skip_len = len - maxlen;
   3f954:	e0fffc17 	ldw	r3,-16(fp)
   3f958:	e0bfff17 	ldw	r2,-4(fp)
   3f95c:	1885c83a 	sub	r2,r3,r2
   3f960:	e0bffb15 	stw	r2,-20(fp)
        len = maxlen;
   3f964:	e0bfff17 	ldw	r2,-4(fp)
   3f968:	e0bffc15 	stw	r2,-16(fp)
    }

    if (!deser_bytes(so, buf, len))
   3f96c:	e0bffc17 	ldw	r2,-16(fp)
   3f970:	100d883a 	mov	r6,r2
   3f974:	e17ffe17 	ldw	r5,-8(fp)
   3f978:	e13ffd17 	ldw	r4,-12(fp)
   3f97c:	003f5ac0 	call	3f5ac <deser_bytes>
   3f980:	1000021e 	bne	r2,zero,3f98c <deser_str+0x80>
        return false;
   3f984:	0005883a 	mov	r2,zero
   3f988:	00001406 	br	3f9dc <deser_str+0xd0>
    if (!deser_skip(buf, skip_len))
   3f98c:	e17ffb17 	ldw	r5,-20(fp)
   3f990:	e13ffe17 	ldw	r4,-8(fp)
   3f994:	003f52c0 	call	3f52c <deser_skip>
   3f998:	1000021e 	bne	r2,zero,3f9a4 <deser_str+0x98>
        return false;
   3f99c:	0005883a 	mov	r2,zero
   3f9a0:	00000e06 	br	3f9dc <deser_str+0xd0>

    /* add C string null */
    if (len < maxlen)
   3f9a4:	e0fffc17 	ldw	r3,-16(fp)
   3f9a8:	e0bfff17 	ldw	r2,-4(fp)
   3f9ac:	1880052e 	bgeu	r3,r2,3f9c4 <deser_str+0xb8>
        so[len] = 0;
   3f9b0:	e0bffc17 	ldw	r2,-16(fp)
   3f9b4:	e0fffd17 	ldw	r3,-12(fp)
   3f9b8:	1885883a 	add	r2,r3,r2
   3f9bc:	10000005 	stb	zero,0(r2)
   3f9c0:	00000506 	br	3f9d8 <deser_str+0xcc>
    else
        so[maxlen - 1] = 0;
   3f9c4:	e0bfff17 	ldw	r2,-4(fp)
   3f9c8:	10bfffc4 	addi	r2,r2,-1
   3f9cc:	e0fffd17 	ldw	r3,-12(fp)
   3f9d0:	1885883a 	add	r2,r3,r2
   3f9d4:	10000005 	stb	zero,0(r2)

    return true;
   3f9d8:	00800044 	movi	r2,1
}
   3f9dc:	e037883a 	mov	sp,fp
   3f9e0:	dfc00117 	ldw	ra,4(sp)
   3f9e4:	df000017 	ldw	fp,0(sp)
   3f9e8:	dec00204 	addi	sp,sp,8
   3f9ec:	f800283a 	ret

0003f9f0 <deser_varstr>:

int deser_varstr(cstring** so, struct const_buffer* buf)
{
   3f9f0:	defff904 	addi	sp,sp,-28
   3f9f4:	dfc00615 	stw	ra,24(sp)
   3f9f8:	df000515 	stw	fp,20(sp)
   3f9fc:	df000504 	addi	fp,sp,20
   3fa00:	e13ffe15 	stw	r4,-8(fp)
   3fa04:	e17fff15 	stw	r5,-4(fp)
    uint32_t len;
    cstring* s;
    char* p;

    if (*so) {
   3fa08:	e0bffe17 	ldw	r2,-8(fp)
   3fa0c:	10800017 	ldw	r2,0(r2)
   3fa10:	10000726 	beq	r2,zero,3fa30 <deser_varstr+0x40>
        cstr_free(*so, 1);
   3fa14:	e0bffe17 	ldw	r2,-8(fp)
   3fa18:	10800017 	ldw	r2,0(r2)
   3fa1c:	01400044 	movi	r5,1
   3fa20:	1009883a 	mov	r4,r2
   3fa24:	00433e40 	call	433e4 <cstr_free>
        *so = NULL;
   3fa28:	e0bffe17 	ldw	r2,-8(fp)
   3fa2c:	10000015 	stw	zero,0(r2)
    }

    if (!deser_varlen(&len, buf))
   3fa30:	e0bffd04 	addi	r2,fp,-12
   3fa34:	e17fff17 	ldw	r5,-4(fp)
   3fa38:	1009883a 	mov	r4,r2
   3fa3c:	003f7f40 	call	3f7f4 <deser_varlen>
   3fa40:	1000021e 	bne	r2,zero,3fa4c <deser_varstr+0x5c>
        return false;
   3fa44:	0005883a 	mov	r2,zero
   3fa48:	00002506 	br	3fae0 <deser_varstr+0xf0>

    if (buf->len < len)
   3fa4c:	e0bfff17 	ldw	r2,-4(fp)
   3fa50:	10c00117 	ldw	r3,4(r2)
   3fa54:	e0bffd17 	ldw	r2,-12(fp)
   3fa58:	1880022e 	bgeu	r3,r2,3fa64 <deser_varstr+0x74>
        return false;
   3fa5c:	0005883a 	mov	r2,zero
   3fa60:	00001f06 	br	3fae0 <deser_varstr+0xf0>

    s = cstr_new_sz(len);
   3fa64:	e0bffd17 	ldw	r2,-12(fp)
   3fa68:	1009883a 	mov	r4,r2
   3fa6c:	00432400 	call	43240 <cstr_new_sz>
   3fa70:	e0bffb15 	stw	r2,-20(fp)
    cstr_append_buf(s, buf->p, len);
   3fa74:	e0bfff17 	ldw	r2,-4(fp)
   3fa78:	10800017 	ldw	r2,0(r2)
   3fa7c:	e0fffd17 	ldw	r3,-12(fp)
   3fa80:	180d883a 	mov	r6,r3
   3fa84:	100b883a 	mov	r5,r2
   3fa88:	e13ffb17 	ldw	r4,-20(fp)
   3fa8c:	00435100 	call	43510 <cstr_append_buf>

    p = (char*)buf->p;
   3fa90:	e0bfff17 	ldw	r2,-4(fp)
   3fa94:	10800017 	ldw	r2,0(r2)
   3fa98:	e0bffc15 	stw	r2,-16(fp)
    p += len;
   3fa9c:	e0bffd17 	ldw	r2,-12(fp)
   3faa0:	e0fffc17 	ldw	r3,-16(fp)
   3faa4:	1885883a 	add	r2,r3,r2
   3faa8:	e0bffc15 	stw	r2,-16(fp)
    buf->p = p;
   3faac:	e0bfff17 	ldw	r2,-4(fp)
   3fab0:	e0fffc17 	ldw	r3,-16(fp)
   3fab4:	10c00015 	stw	r3,0(r2)
    buf->len -= len;
   3fab8:	e0bfff17 	ldw	r2,-4(fp)
   3fabc:	10c00117 	ldw	r3,4(r2)
   3fac0:	e0bffd17 	ldw	r2,-12(fp)
   3fac4:	1887c83a 	sub	r3,r3,r2
   3fac8:	e0bfff17 	ldw	r2,-4(fp)
   3facc:	10c00115 	stw	r3,4(r2)

    *so = s;
   3fad0:	e0bffe17 	ldw	r2,-8(fp)
   3fad4:	e0fffb17 	ldw	r3,-20(fp)
   3fad8:	10c00015 	stw	r3,0(r2)

    return true;
   3fadc:	00800044 	movi	r2,1
}
   3fae0:	e037883a 	mov	sp,fp
   3fae4:	dfc00117 	ldw	ra,4(sp)
   3fae8:	df000017 	ldw	fp,0(sp)
   3faec:	dec00204 	addi	sp,sp,8
   3faf0:	f800283a 	ret

0003faf4 <deser_s64>:

int deser_s64(int64_t* vo, struct const_buffer* buf)
{
   3faf4:	defffc04 	addi	sp,sp,-16
   3faf8:	dfc00315 	stw	ra,12(sp)
   3fafc:	df000215 	stw	fp,8(sp)
   3fb00:	df000204 	addi	fp,sp,8
   3fb04:	e13ffe15 	stw	r4,-8(fp)
   3fb08:	e17fff15 	stw	r5,-4(fp)
    return deser_u64((uint64_t*)vo, buf);
   3fb0c:	e17fff17 	ldw	r5,-4(fp)
   3fb10:	e13ffe17 	ldw	r4,-8(fp)
   3fb14:	003f7580 	call	3f758 <deser_u64>
}
   3fb18:	e037883a 	mov	sp,fp
   3fb1c:	dfc00117 	ldw	ra,4(sp)
   3fb20:	df000017 	ldw	fp,0(sp)
   3fb24:	dec00204 	addi	sp,sp,8
   3fb28:	f800283a 	ret

0003fb2c <utils_clear_buffers>:
static uint8_t buffer_hex_to_uint8[TO_UINT8_HEX_BUF_LEN];
static char buffer_uint8_to_hex[TO_UINT8_HEX_BUF_LEN];


void utils_clear_buffers(void)
{
   3fb2c:	defffe04 	addi	sp,sp,-8
   3fb30:	dfc00115 	stw	ra,4(sp)
   3fb34:	df000015 	stw	fp,0(sp)
   3fb38:	d839883a 	mov	fp,sp
    memset(buffer_hex_to_uint8, 0, TO_UINT8_HEX_BUF_LEN);
   3fb3c:	01820004 	movi	r6,2048
   3fb40:	000b883a 	mov	r5,zero
   3fb44:	010001b4 	movhi	r4,6
   3fb48:	2128b204 	addi	r4,r4,-23864
   3fb4c:	00464200 	call	46420 <memset>
    memset(buffer_uint8_to_hex, 0, TO_UINT8_HEX_BUF_LEN);
   3fb50:	01820004 	movi	r6,2048
   3fb54:	000b883a 	mov	r5,zero
   3fb58:	010001b4 	movhi	r4,6
   3fb5c:	212ab204 	addi	r4,r4,-21816
   3fb60:	00464200 	call	46420 <memset>
}
   3fb64:	0001883a 	nop
   3fb68:	e037883a 	mov	sp,fp
   3fb6c:	dfc00117 	ldw	ra,4(sp)
   3fb70:	df000017 	ldw	fp,0(sp)
   3fb74:	dec00204 	addi	sp,sp,8
   3fb78:	f800283a 	ret

0003fb7c <utils_hex_to_bin>:

void utils_hex_to_bin(const char* str, unsigned char* out, int inLen, int* outLen)
{
   3fb7c:	defff704 	addi	sp,sp,-36
   3fb80:	dfc00815 	stw	ra,32(sp)
   3fb84:	df000715 	stw	fp,28(sp)
   3fb88:	df000704 	addi	fp,sp,28
   3fb8c:	e13ffc15 	stw	r4,-16(fp)
   3fb90:	e17ffd15 	stw	r5,-12(fp)
   3fb94:	e1bffe15 	stw	r6,-8(fp)
   3fb98:	e1ffff15 	stw	r7,-4(fp)
    int bLen = inLen / 2;
   3fb9c:	e0bffe17 	ldw	r2,-8(fp)
   3fba0:	1006d7fa 	srli	r3,r2,31
   3fba4:	1885883a 	add	r2,r3,r2
   3fba8:	1005d07a 	srai	r2,r2,1
   3fbac:	e0bffa15 	stw	r2,-24(fp)
    uint8_t c;
    int i;
    memset(out, 0, bLen);
   3fbb0:	e0bffa17 	ldw	r2,-24(fp)
   3fbb4:	100d883a 	mov	r6,r2
   3fbb8:	000b883a 	mov	r5,zero
   3fbbc:	e13ffd17 	ldw	r4,-12(fp)
   3fbc0:	00464200 	call	46420 <memset>
    for (i = 0; i < bLen; i++) {
   3fbc4:	e03ff915 	stw	zero,-28(fp)
   3fbc8:	0000d606 	br	3ff24 <utils_hex_to_bin+0x3a8>
        c = 0;
   3fbcc:	e03ffb05 	stb	zero,-20(fp)
        if (str[i * 2] >= '0' && str[i * 2] <= '9') {
   3fbd0:	e0bff917 	ldw	r2,-28(fp)
   3fbd4:	1085883a 	add	r2,r2,r2
   3fbd8:	1007883a 	mov	r3,r2
   3fbdc:	e0bffc17 	ldw	r2,-16(fp)
   3fbe0:	10c5883a 	add	r2,r2,r3
   3fbe4:	10800003 	ldbu	r2,0(r2)
   3fbe8:	10803fcc 	andi	r2,r2,255
   3fbec:	1080201c 	xori	r2,r2,128
   3fbf0:	10bfe004 	addi	r2,r2,-128
   3fbf4:	10800c10 	cmplti	r2,r2,48
   3fbf8:	1000161e 	bne	r2,zero,3fc54 <utils_hex_to_bin+0xd8>
   3fbfc:	e0bff917 	ldw	r2,-28(fp)
   3fc00:	1085883a 	add	r2,r2,r2
   3fc04:	1007883a 	mov	r3,r2
   3fc08:	e0bffc17 	ldw	r2,-16(fp)
   3fc0c:	10c5883a 	add	r2,r2,r3
   3fc10:	10800003 	ldbu	r2,0(r2)
   3fc14:	10803fcc 	andi	r2,r2,255
   3fc18:	1080201c 	xori	r2,r2,128
   3fc1c:	10bfe004 	addi	r2,r2,-128
   3fc20:	10800e88 	cmpgei	r2,r2,58
   3fc24:	10000b1e 	bne	r2,zero,3fc54 <utils_hex_to_bin+0xd8>
            *out = (str[i * 2] - '0') << 4;
   3fc28:	e0bff917 	ldw	r2,-28(fp)
   3fc2c:	1085883a 	add	r2,r2,r2
   3fc30:	1007883a 	mov	r3,r2
   3fc34:	e0bffc17 	ldw	r2,-16(fp)
   3fc38:	10c5883a 	add	r2,r2,r3
   3fc3c:	10800003 	ldbu	r2,0(r2)
   3fc40:	10bff404 	addi	r2,r2,-48
   3fc44:	1004913a 	slli	r2,r2,4
   3fc48:	1007883a 	mov	r3,r2
   3fc4c:	e0bffd17 	ldw	r2,-12(fp)
   3fc50:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2] >= 'a' && str[i * 2] <= 'f') {
   3fc54:	e0bff917 	ldw	r2,-28(fp)
   3fc58:	1085883a 	add	r2,r2,r2
   3fc5c:	1007883a 	mov	r3,r2
   3fc60:	e0bffc17 	ldw	r2,-16(fp)
   3fc64:	10c5883a 	add	r2,r2,r3
   3fc68:	10800003 	ldbu	r2,0(r2)
   3fc6c:	10803fcc 	andi	r2,r2,255
   3fc70:	1080201c 	xori	r2,r2,128
   3fc74:	10bfe004 	addi	r2,r2,-128
   3fc78:	10801850 	cmplti	r2,r2,97
   3fc7c:	1000161e 	bne	r2,zero,3fcd8 <utils_hex_to_bin+0x15c>
   3fc80:	e0bff917 	ldw	r2,-28(fp)
   3fc84:	1085883a 	add	r2,r2,r2
   3fc88:	1007883a 	mov	r3,r2
   3fc8c:	e0bffc17 	ldw	r2,-16(fp)
   3fc90:	10c5883a 	add	r2,r2,r3
   3fc94:	10800003 	ldbu	r2,0(r2)
   3fc98:	10803fcc 	andi	r2,r2,255
   3fc9c:	1080201c 	xori	r2,r2,128
   3fca0:	10bfe004 	addi	r2,r2,-128
   3fca4:	108019c8 	cmpgei	r2,r2,103
   3fca8:	10000b1e 	bne	r2,zero,3fcd8 <utils_hex_to_bin+0x15c>
            *out = (10 + str[i * 2] - 'a') << 4;
   3fcac:	e0bff917 	ldw	r2,-28(fp)
   3fcb0:	1085883a 	add	r2,r2,r2
   3fcb4:	1007883a 	mov	r3,r2
   3fcb8:	e0bffc17 	ldw	r2,-16(fp)
   3fcbc:	10c5883a 	add	r2,r2,r3
   3fcc0:	10800003 	ldbu	r2,0(r2)
   3fcc4:	10bfea44 	addi	r2,r2,-87
   3fcc8:	1004913a 	slli	r2,r2,4
   3fccc:	1007883a 	mov	r3,r2
   3fcd0:	e0bffd17 	ldw	r2,-12(fp)
   3fcd4:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2] >= 'A' && str[i * 2] <= 'F') {
   3fcd8:	e0bff917 	ldw	r2,-28(fp)
   3fcdc:	1085883a 	add	r2,r2,r2
   3fce0:	1007883a 	mov	r3,r2
   3fce4:	e0bffc17 	ldw	r2,-16(fp)
   3fce8:	10c5883a 	add	r2,r2,r3
   3fcec:	10800003 	ldbu	r2,0(r2)
   3fcf0:	10803fcc 	andi	r2,r2,255
   3fcf4:	1080201c 	xori	r2,r2,128
   3fcf8:	10bfe004 	addi	r2,r2,-128
   3fcfc:	10801050 	cmplti	r2,r2,65
   3fd00:	1000161e 	bne	r2,zero,3fd5c <utils_hex_to_bin+0x1e0>
   3fd04:	e0bff917 	ldw	r2,-28(fp)
   3fd08:	1085883a 	add	r2,r2,r2
   3fd0c:	1007883a 	mov	r3,r2
   3fd10:	e0bffc17 	ldw	r2,-16(fp)
   3fd14:	10c5883a 	add	r2,r2,r3
   3fd18:	10800003 	ldbu	r2,0(r2)
   3fd1c:	10803fcc 	andi	r2,r2,255
   3fd20:	1080201c 	xori	r2,r2,128
   3fd24:	10bfe004 	addi	r2,r2,-128
   3fd28:	108011c8 	cmpgei	r2,r2,71
   3fd2c:	10000b1e 	bne	r2,zero,3fd5c <utils_hex_to_bin+0x1e0>
            *out = (10 + str[i * 2] - 'A') << 4;
   3fd30:	e0bff917 	ldw	r2,-28(fp)
   3fd34:	1085883a 	add	r2,r2,r2
   3fd38:	1007883a 	mov	r3,r2
   3fd3c:	e0bffc17 	ldw	r2,-16(fp)
   3fd40:	10c5883a 	add	r2,r2,r3
   3fd44:	10800003 	ldbu	r2,0(r2)
   3fd48:	10bff244 	addi	r2,r2,-55
   3fd4c:	1004913a 	slli	r2,r2,4
   3fd50:	1007883a 	mov	r3,r2
   3fd54:	e0bffd17 	ldw	r2,-12(fp)
   3fd58:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2 + 1] >= '0' && str[i * 2 + 1] <= '9') {
   3fd5c:	e0bff917 	ldw	r2,-28(fp)
   3fd60:	1085883a 	add	r2,r2,r2
   3fd64:	10800044 	addi	r2,r2,1
   3fd68:	e0fffc17 	ldw	r3,-16(fp)
   3fd6c:	1885883a 	add	r2,r3,r2
   3fd70:	10800003 	ldbu	r2,0(r2)
   3fd74:	10803fcc 	andi	r2,r2,255
   3fd78:	1080201c 	xori	r2,r2,128
   3fd7c:	10bfe004 	addi	r2,r2,-128
   3fd80:	10800c10 	cmplti	r2,r2,48
   3fd84:	1000191e 	bne	r2,zero,3fdec <utils_hex_to_bin+0x270>
   3fd88:	e0bff917 	ldw	r2,-28(fp)
   3fd8c:	1085883a 	add	r2,r2,r2
   3fd90:	10800044 	addi	r2,r2,1
   3fd94:	e0fffc17 	ldw	r3,-16(fp)
   3fd98:	1885883a 	add	r2,r3,r2
   3fd9c:	10800003 	ldbu	r2,0(r2)
   3fda0:	10803fcc 	andi	r2,r2,255
   3fda4:	1080201c 	xori	r2,r2,128
   3fda8:	10bfe004 	addi	r2,r2,-128
   3fdac:	10800e88 	cmpgei	r2,r2,58
   3fdb0:	10000e1e 	bne	r2,zero,3fdec <utils_hex_to_bin+0x270>
            *out |= (str[i * 2 + 1] - '0');
   3fdb4:	e0bffd17 	ldw	r2,-12(fp)
   3fdb8:	10800003 	ldbu	r2,0(r2)
   3fdbc:	1009883a 	mov	r4,r2
   3fdc0:	e0bff917 	ldw	r2,-28(fp)
   3fdc4:	1085883a 	add	r2,r2,r2
   3fdc8:	10800044 	addi	r2,r2,1
   3fdcc:	e0fffc17 	ldw	r3,-16(fp)
   3fdd0:	1885883a 	add	r2,r3,r2
   3fdd4:	10800003 	ldbu	r2,0(r2)
   3fdd8:	10bff404 	addi	r2,r2,-48
   3fddc:	2084b03a 	or	r2,r4,r2
   3fde0:	1007883a 	mov	r3,r2
   3fde4:	e0bffd17 	ldw	r2,-12(fp)
   3fde8:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2 + 1] >= 'a' && str[i * 2 + 1] <= 'f') {
   3fdec:	e0bff917 	ldw	r2,-28(fp)
   3fdf0:	1085883a 	add	r2,r2,r2
   3fdf4:	10800044 	addi	r2,r2,1
   3fdf8:	e0fffc17 	ldw	r3,-16(fp)
   3fdfc:	1885883a 	add	r2,r3,r2
   3fe00:	10800003 	ldbu	r2,0(r2)
   3fe04:	10803fcc 	andi	r2,r2,255
   3fe08:	1080201c 	xori	r2,r2,128
   3fe0c:	10bfe004 	addi	r2,r2,-128
   3fe10:	10801850 	cmplti	r2,r2,97
   3fe14:	1000191e 	bne	r2,zero,3fe7c <utils_hex_to_bin+0x300>
   3fe18:	e0bff917 	ldw	r2,-28(fp)
   3fe1c:	1085883a 	add	r2,r2,r2
   3fe20:	10800044 	addi	r2,r2,1
   3fe24:	e0fffc17 	ldw	r3,-16(fp)
   3fe28:	1885883a 	add	r2,r3,r2
   3fe2c:	10800003 	ldbu	r2,0(r2)
   3fe30:	10803fcc 	andi	r2,r2,255
   3fe34:	1080201c 	xori	r2,r2,128
   3fe38:	10bfe004 	addi	r2,r2,-128
   3fe3c:	108019c8 	cmpgei	r2,r2,103
   3fe40:	10000e1e 	bne	r2,zero,3fe7c <utils_hex_to_bin+0x300>
            *out |= (10 + str[i * 2 + 1] - 'a');
   3fe44:	e0bffd17 	ldw	r2,-12(fp)
   3fe48:	10800003 	ldbu	r2,0(r2)
   3fe4c:	1009883a 	mov	r4,r2
   3fe50:	e0bff917 	ldw	r2,-28(fp)
   3fe54:	1085883a 	add	r2,r2,r2
   3fe58:	10800044 	addi	r2,r2,1
   3fe5c:	e0fffc17 	ldw	r3,-16(fp)
   3fe60:	1885883a 	add	r2,r3,r2
   3fe64:	10800003 	ldbu	r2,0(r2)
   3fe68:	10bfea44 	addi	r2,r2,-87
   3fe6c:	2084b03a 	or	r2,r4,r2
   3fe70:	1007883a 	mov	r3,r2
   3fe74:	e0bffd17 	ldw	r2,-12(fp)
   3fe78:	10c00005 	stb	r3,0(r2)
        }
        if (str[i * 2 + 1] >= 'A' && str[i * 2 + 1] <= 'F') {
   3fe7c:	e0bff917 	ldw	r2,-28(fp)
   3fe80:	1085883a 	add	r2,r2,r2
   3fe84:	10800044 	addi	r2,r2,1
   3fe88:	e0fffc17 	ldw	r3,-16(fp)
   3fe8c:	1885883a 	add	r2,r3,r2
   3fe90:	10800003 	ldbu	r2,0(r2)
   3fe94:	10803fcc 	andi	r2,r2,255
   3fe98:	1080201c 	xori	r2,r2,128
   3fe9c:	10bfe004 	addi	r2,r2,-128
   3fea0:	10801050 	cmplti	r2,r2,65
   3fea4:	1000191e 	bne	r2,zero,3ff0c <utils_hex_to_bin+0x390>
   3fea8:	e0bff917 	ldw	r2,-28(fp)
   3feac:	1085883a 	add	r2,r2,r2
   3feb0:	10800044 	addi	r2,r2,1
   3feb4:	e0fffc17 	ldw	r3,-16(fp)
   3feb8:	1885883a 	add	r2,r3,r2
   3febc:	10800003 	ldbu	r2,0(r2)
   3fec0:	10803fcc 	andi	r2,r2,255
   3fec4:	1080201c 	xori	r2,r2,128
   3fec8:	10bfe004 	addi	r2,r2,-128
   3fecc:	108011c8 	cmpgei	r2,r2,71
   3fed0:	10000e1e 	bne	r2,zero,3ff0c <utils_hex_to_bin+0x390>
            *out |= (10 + str[i * 2 + 1] - 'A');
   3fed4:	e0bffd17 	ldw	r2,-12(fp)
   3fed8:	10800003 	ldbu	r2,0(r2)
   3fedc:	1009883a 	mov	r4,r2
   3fee0:	e0bff917 	ldw	r2,-28(fp)
   3fee4:	1085883a 	add	r2,r2,r2
   3fee8:	10800044 	addi	r2,r2,1
   3feec:	e0fffc17 	ldw	r3,-16(fp)
   3fef0:	1885883a 	add	r2,r3,r2
   3fef4:	10800003 	ldbu	r2,0(r2)
   3fef8:	10bff244 	addi	r2,r2,-55
   3fefc:	2084b03a 	or	r2,r4,r2
   3ff00:	1007883a 	mov	r3,r2
   3ff04:	e0bffd17 	ldw	r2,-12(fp)
   3ff08:	10c00005 	stb	r3,0(r2)
        }
        out++;
   3ff0c:	e0bffd17 	ldw	r2,-12(fp)
   3ff10:	10800044 	addi	r2,r2,1
   3ff14:	e0bffd15 	stw	r2,-12(fp)
{
    int bLen = inLen / 2;
    uint8_t c;
    int i;
    memset(out, 0, bLen);
    for (i = 0; i < bLen; i++) {
   3ff18:	e0bff917 	ldw	r2,-28(fp)
   3ff1c:	10800044 	addi	r2,r2,1
   3ff20:	e0bff915 	stw	r2,-28(fp)
   3ff24:	e0fff917 	ldw	r3,-28(fp)
   3ff28:	e0bffa17 	ldw	r2,-24(fp)
   3ff2c:	18bf2716 	blt	r3,r2,3fbcc <__alt_mem_epcs_flash_controller+0xfe036bcc>
        if (str[i * 2 + 1] >= 'A' && str[i * 2 + 1] <= 'F') {
            *out |= (10 + str[i * 2 + 1] - 'A');
        }
        out++;
    }
    *outLen = i;
   3ff30:	e0bfff17 	ldw	r2,-4(fp)
   3ff34:	e0fff917 	ldw	r3,-28(fp)
   3ff38:	10c00015 	stw	r3,0(r2)
}
   3ff3c:	0001883a 	nop
   3ff40:	e037883a 	mov	sp,fp
   3ff44:	dfc00117 	ldw	ra,4(sp)
   3ff48:	df000017 	ldw	fp,0(sp)
   3ff4c:	dec00204 	addi	sp,sp,8
   3ff50:	f800283a 	ret

0003ff54 <utils_hex_to_uint8>:

uint8_t* utils_hex_to_uint8(const char* str)
{
   3ff54:	defffb04 	addi	sp,sp,-20
   3ff58:	dfc00415 	stw	ra,16(sp)
   3ff5c:	df000315 	stw	fp,12(sp)
   3ff60:	df000304 	addi	fp,sp,12
   3ff64:	e13fff15 	stw	r4,-4(fp)
    uint8_t c;
    size_t i;
    if (strlens(str) > TO_UINT8_HEX_BUF_LEN) {
   3ff68:	e0bfff17 	ldw	r2,-4(fp)
   3ff6c:	10000626 	beq	r2,zero,3ff88 <utils_hex_to_uint8+0x34>
   3ff70:	e13fff17 	ldw	r4,-4(fp)
   3ff74:	0046c3c0 	call	46c3c <strlen>
   3ff78:	10820070 	cmpltui	r2,r2,2049
   3ff7c:	1000021e 	bne	r2,zero,3ff88 <utils_hex_to_uint8+0x34>
        return NULL;
   3ff80:	0005883a 	mov	r2,zero
   3ff84:	0000e506 	br	4031c <utils_hex_to_uint8+0x3c8>
    }
    memset(buffer_hex_to_uint8, 0, TO_UINT8_HEX_BUF_LEN);
   3ff88:	01820004 	movi	r6,2048
   3ff8c:	000b883a 	mov	r5,zero
   3ff90:	010001b4 	movhi	r4,6
   3ff94:	2128b204 	addi	r4,r4,-23864
   3ff98:	00464200 	call	46420 <memset>
    for (i = 0; i < strlens(str) / 2; i++) {
   3ff9c:	e03ffe15 	stw	zero,-8(fp)
   3ffa0:	0000d306 	br	402f0 <utils_hex_to_uint8+0x39c>
        c = 0;
   3ffa4:	e03ffd05 	stb	zero,-12(fp)
        if (str[i * 2] >= '0' && str[i * 2] <= '9') {
   3ffa8:	e0bffe17 	ldw	r2,-8(fp)
   3ffac:	1085883a 	add	r2,r2,r2
   3ffb0:	1007883a 	mov	r3,r2
   3ffb4:	e0bfff17 	ldw	r2,-4(fp)
   3ffb8:	10c5883a 	add	r2,r2,r3
   3ffbc:	10800003 	ldbu	r2,0(r2)
   3ffc0:	10803fcc 	andi	r2,r2,255
   3ffc4:	1080201c 	xori	r2,r2,128
   3ffc8:	10bfe004 	addi	r2,r2,-128
   3ffcc:	10800c10 	cmplti	r2,r2,48
   3ffd0:	1000171e 	bne	r2,zero,40030 <utils_hex_to_uint8+0xdc>
   3ffd4:	e0bffe17 	ldw	r2,-8(fp)
   3ffd8:	1085883a 	add	r2,r2,r2
   3ffdc:	1007883a 	mov	r3,r2
   3ffe0:	e0bfff17 	ldw	r2,-4(fp)
   3ffe4:	10c5883a 	add	r2,r2,r3
   3ffe8:	10800003 	ldbu	r2,0(r2)
   3ffec:	10803fcc 	andi	r2,r2,255
   3fff0:	1080201c 	xori	r2,r2,128
   3fff4:	10bfe004 	addi	r2,r2,-128
   3fff8:	10800e88 	cmpgei	r2,r2,58
   3fffc:	10000c1e 	bne	r2,zero,40030 <utils_hex_to_uint8+0xdc>
            c += (str[i * 2] - '0') << 4;
   40000:	e0bffe17 	ldw	r2,-8(fp)
   40004:	1085883a 	add	r2,r2,r2
   40008:	1007883a 	mov	r3,r2
   4000c:	e0bfff17 	ldw	r2,-4(fp)
   40010:	10c5883a 	add	r2,r2,r3
   40014:	10800003 	ldbu	r2,0(r2)
   40018:	10bff404 	addi	r2,r2,-48
   4001c:	1004913a 	slli	r2,r2,4
   40020:	1007883a 	mov	r3,r2
   40024:	e0bffd03 	ldbu	r2,-12(fp)
   40028:	1885883a 	add	r2,r3,r2
   4002c:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2] >= 'a' && str[i * 2] <= 'f') {
   40030:	e0bffe17 	ldw	r2,-8(fp)
   40034:	1085883a 	add	r2,r2,r2
   40038:	1007883a 	mov	r3,r2
   4003c:	e0bfff17 	ldw	r2,-4(fp)
   40040:	10c5883a 	add	r2,r2,r3
   40044:	10800003 	ldbu	r2,0(r2)
   40048:	10803fcc 	andi	r2,r2,255
   4004c:	1080201c 	xori	r2,r2,128
   40050:	10bfe004 	addi	r2,r2,-128
   40054:	10801850 	cmplti	r2,r2,97
   40058:	1000171e 	bne	r2,zero,400b8 <utils_hex_to_uint8+0x164>
   4005c:	e0bffe17 	ldw	r2,-8(fp)
   40060:	1085883a 	add	r2,r2,r2
   40064:	1007883a 	mov	r3,r2
   40068:	e0bfff17 	ldw	r2,-4(fp)
   4006c:	10c5883a 	add	r2,r2,r3
   40070:	10800003 	ldbu	r2,0(r2)
   40074:	10803fcc 	andi	r2,r2,255
   40078:	1080201c 	xori	r2,r2,128
   4007c:	10bfe004 	addi	r2,r2,-128
   40080:	108019c8 	cmpgei	r2,r2,103
   40084:	10000c1e 	bne	r2,zero,400b8 <utils_hex_to_uint8+0x164>
            c += (10 + str[i * 2] - 'a') << 4;
   40088:	e0bffe17 	ldw	r2,-8(fp)
   4008c:	1085883a 	add	r2,r2,r2
   40090:	1007883a 	mov	r3,r2
   40094:	e0bfff17 	ldw	r2,-4(fp)
   40098:	10c5883a 	add	r2,r2,r3
   4009c:	10800003 	ldbu	r2,0(r2)
   400a0:	10bfea44 	addi	r2,r2,-87
   400a4:	1004913a 	slli	r2,r2,4
   400a8:	1007883a 	mov	r3,r2
   400ac:	e0bffd03 	ldbu	r2,-12(fp)
   400b0:	1885883a 	add	r2,r3,r2
   400b4:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2] >= 'A' && str[i * 2] <= 'F') {
   400b8:	e0bffe17 	ldw	r2,-8(fp)
   400bc:	1085883a 	add	r2,r2,r2
   400c0:	1007883a 	mov	r3,r2
   400c4:	e0bfff17 	ldw	r2,-4(fp)
   400c8:	10c5883a 	add	r2,r2,r3
   400cc:	10800003 	ldbu	r2,0(r2)
   400d0:	10803fcc 	andi	r2,r2,255
   400d4:	1080201c 	xori	r2,r2,128
   400d8:	10bfe004 	addi	r2,r2,-128
   400dc:	10801050 	cmplti	r2,r2,65
   400e0:	1000171e 	bne	r2,zero,40140 <utils_hex_to_uint8+0x1ec>
   400e4:	e0bffe17 	ldw	r2,-8(fp)
   400e8:	1085883a 	add	r2,r2,r2
   400ec:	1007883a 	mov	r3,r2
   400f0:	e0bfff17 	ldw	r2,-4(fp)
   400f4:	10c5883a 	add	r2,r2,r3
   400f8:	10800003 	ldbu	r2,0(r2)
   400fc:	10803fcc 	andi	r2,r2,255
   40100:	1080201c 	xori	r2,r2,128
   40104:	10bfe004 	addi	r2,r2,-128
   40108:	108011c8 	cmpgei	r2,r2,71
   4010c:	10000c1e 	bne	r2,zero,40140 <utils_hex_to_uint8+0x1ec>
            c += (10 + str[i * 2] - 'A') << 4;
   40110:	e0bffe17 	ldw	r2,-8(fp)
   40114:	1085883a 	add	r2,r2,r2
   40118:	1007883a 	mov	r3,r2
   4011c:	e0bfff17 	ldw	r2,-4(fp)
   40120:	10c5883a 	add	r2,r2,r3
   40124:	10800003 	ldbu	r2,0(r2)
   40128:	10bff244 	addi	r2,r2,-55
   4012c:	1004913a 	slli	r2,r2,4
   40130:	1007883a 	mov	r3,r2
   40134:	e0bffd03 	ldbu	r2,-12(fp)
   40138:	1885883a 	add	r2,r3,r2
   4013c:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2 + 1] >= '0' && str[i * 2 + 1] <= '9') {
   40140:	e0bffe17 	ldw	r2,-8(fp)
   40144:	1085883a 	add	r2,r2,r2
   40148:	10800044 	addi	r2,r2,1
   4014c:	e0ffff17 	ldw	r3,-4(fp)
   40150:	1885883a 	add	r2,r3,r2
   40154:	10800003 	ldbu	r2,0(r2)
   40158:	10803fcc 	andi	r2,r2,255
   4015c:	1080201c 	xori	r2,r2,128
   40160:	10bfe004 	addi	r2,r2,-128
   40164:	10800c10 	cmplti	r2,r2,48
   40168:	1000161e 	bne	r2,zero,401c4 <utils_hex_to_uint8+0x270>
   4016c:	e0bffe17 	ldw	r2,-8(fp)
   40170:	1085883a 	add	r2,r2,r2
   40174:	10800044 	addi	r2,r2,1
   40178:	e0ffff17 	ldw	r3,-4(fp)
   4017c:	1885883a 	add	r2,r3,r2
   40180:	10800003 	ldbu	r2,0(r2)
   40184:	10803fcc 	andi	r2,r2,255
   40188:	1080201c 	xori	r2,r2,128
   4018c:	10bfe004 	addi	r2,r2,-128
   40190:	10800e88 	cmpgei	r2,r2,58
   40194:	10000b1e 	bne	r2,zero,401c4 <utils_hex_to_uint8+0x270>
            c += (str[i * 2 + 1] - '0');
   40198:	e0bffe17 	ldw	r2,-8(fp)
   4019c:	1085883a 	add	r2,r2,r2
   401a0:	10800044 	addi	r2,r2,1
   401a4:	e0ffff17 	ldw	r3,-4(fp)
   401a8:	1885883a 	add	r2,r3,r2
   401ac:	10800003 	ldbu	r2,0(r2)
   401b0:	1007883a 	mov	r3,r2
   401b4:	e0bffd03 	ldbu	r2,-12(fp)
   401b8:	1885883a 	add	r2,r3,r2
   401bc:	10bff404 	addi	r2,r2,-48
   401c0:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2 + 1] >= 'a' && str[i * 2 + 1] <= 'f') {
   401c4:	e0bffe17 	ldw	r2,-8(fp)
   401c8:	1085883a 	add	r2,r2,r2
   401cc:	10800044 	addi	r2,r2,1
   401d0:	e0ffff17 	ldw	r3,-4(fp)
   401d4:	1885883a 	add	r2,r3,r2
   401d8:	10800003 	ldbu	r2,0(r2)
   401dc:	10803fcc 	andi	r2,r2,255
   401e0:	1080201c 	xori	r2,r2,128
   401e4:	10bfe004 	addi	r2,r2,-128
   401e8:	10801850 	cmplti	r2,r2,97
   401ec:	1000161e 	bne	r2,zero,40248 <utils_hex_to_uint8+0x2f4>
   401f0:	e0bffe17 	ldw	r2,-8(fp)
   401f4:	1085883a 	add	r2,r2,r2
   401f8:	10800044 	addi	r2,r2,1
   401fc:	e0ffff17 	ldw	r3,-4(fp)
   40200:	1885883a 	add	r2,r3,r2
   40204:	10800003 	ldbu	r2,0(r2)
   40208:	10803fcc 	andi	r2,r2,255
   4020c:	1080201c 	xori	r2,r2,128
   40210:	10bfe004 	addi	r2,r2,-128
   40214:	108019c8 	cmpgei	r2,r2,103
   40218:	10000b1e 	bne	r2,zero,40248 <utils_hex_to_uint8+0x2f4>
            c += (10 + str[i * 2 + 1] - 'a');
   4021c:	e0bffe17 	ldw	r2,-8(fp)
   40220:	1085883a 	add	r2,r2,r2
   40224:	10800044 	addi	r2,r2,1
   40228:	e0ffff17 	ldw	r3,-4(fp)
   4022c:	1885883a 	add	r2,r3,r2
   40230:	10800003 	ldbu	r2,0(r2)
   40234:	1007883a 	mov	r3,r2
   40238:	e0bffd03 	ldbu	r2,-12(fp)
   4023c:	1885883a 	add	r2,r3,r2
   40240:	10bfea44 	addi	r2,r2,-87
   40244:	e0bffd05 	stb	r2,-12(fp)
        }
        if (str[i * 2 + 1] >= 'A' && str[i * 2 + 1] <= 'F') {
   40248:	e0bffe17 	ldw	r2,-8(fp)
   4024c:	1085883a 	add	r2,r2,r2
   40250:	10800044 	addi	r2,r2,1
   40254:	e0ffff17 	ldw	r3,-4(fp)
   40258:	1885883a 	add	r2,r3,r2
   4025c:	10800003 	ldbu	r2,0(r2)
   40260:	10803fcc 	andi	r2,r2,255
   40264:	1080201c 	xori	r2,r2,128
   40268:	10bfe004 	addi	r2,r2,-128
   4026c:	10801050 	cmplti	r2,r2,65
   40270:	1000161e 	bne	r2,zero,402cc <utils_hex_to_uint8+0x378>
   40274:	e0bffe17 	ldw	r2,-8(fp)
   40278:	1085883a 	add	r2,r2,r2
   4027c:	10800044 	addi	r2,r2,1
   40280:	e0ffff17 	ldw	r3,-4(fp)
   40284:	1885883a 	add	r2,r3,r2
   40288:	10800003 	ldbu	r2,0(r2)
   4028c:	10803fcc 	andi	r2,r2,255
   40290:	1080201c 	xori	r2,r2,128
   40294:	10bfe004 	addi	r2,r2,-128
   40298:	108011c8 	cmpgei	r2,r2,71
   4029c:	10000b1e 	bne	r2,zero,402cc <utils_hex_to_uint8+0x378>
            c += (10 + str[i * 2 + 1] - 'A');
   402a0:	e0bffe17 	ldw	r2,-8(fp)
   402a4:	1085883a 	add	r2,r2,r2
   402a8:	10800044 	addi	r2,r2,1
   402ac:	e0ffff17 	ldw	r3,-4(fp)
   402b0:	1885883a 	add	r2,r3,r2
   402b4:	10800003 	ldbu	r2,0(r2)
   402b8:	1007883a 	mov	r3,r2
   402bc:	e0bffd03 	ldbu	r2,-12(fp)
   402c0:	1885883a 	add	r2,r3,r2
   402c4:	10bff244 	addi	r2,r2,-55
   402c8:	e0bffd05 	stb	r2,-12(fp)
        }
        buffer_hex_to_uint8[i] = c;
   402cc:	008001b4 	movhi	r2,6
   402d0:	10a8b204 	addi	r2,r2,-23864
   402d4:	e0fffe17 	ldw	r3,-8(fp)
   402d8:	10c5883a 	add	r2,r2,r3
   402dc:	e0fffd03 	ldbu	r3,-12(fp)
   402e0:	10c00005 	stb	r3,0(r2)
    size_t i;
    if (strlens(str) > TO_UINT8_HEX_BUF_LEN) {
        return NULL;
    }
    memset(buffer_hex_to_uint8, 0, TO_UINT8_HEX_BUF_LEN);
    for (i = 0; i < strlens(str) / 2; i++) {
   402e4:	e0bffe17 	ldw	r2,-8(fp)
   402e8:	10800044 	addi	r2,r2,1
   402ec:	e0bffe15 	stw	r2,-8(fp)
   402f0:	e0bfff17 	ldw	r2,-4(fp)
   402f4:	10000426 	beq	r2,zero,40308 <utils_hex_to_uint8+0x3b4>
   402f8:	e13fff17 	ldw	r4,-4(fp)
   402fc:	0046c3c0 	call	46c3c <strlen>
   40300:	1004d07a 	srli	r2,r2,1
   40304:	00000106 	br	4030c <utils_hex_to_uint8+0x3b8>
   40308:	0005883a 	mov	r2,zero
   4030c:	e0fffe17 	ldw	r3,-8(fp)
   40310:	18bf2436 	bltu	r3,r2,3ffa4 <__alt_mem_epcs_flash_controller+0xfe036fa4>
        if (str[i * 2 + 1] >= 'A' && str[i * 2 + 1] <= 'F') {
            c += (10 + str[i * 2 + 1] - 'A');
        }
        buffer_hex_to_uint8[i] = c;
    }
    return buffer_hex_to_uint8;
   40314:	008001b4 	movhi	r2,6
   40318:	10a8b204 	addi	r2,r2,-23864
}
   4031c:	e037883a 	mov	sp,fp
   40320:	dfc00117 	ldw	ra,4(sp)
   40324:	df000017 	ldw	fp,0(sp)
   40328:	dec00204 	addi	sp,sp,8
   4032c:	f800283a 	ret

00040330 <utils_bin_to_hex>:


void utils_bin_to_hex(unsigned char* bin_in, size_t inlen, char* hex_out)
{
   40330:	defffb04 	addi	sp,sp,-20
   40334:	df000415 	stw	fp,16(sp)
   40338:	df000404 	addi	fp,sp,16
   4033c:	e13ffd15 	stw	r4,-12(fp)
   40340:	e17ffe15 	stw	r5,-8(fp)
   40344:	e1bfff15 	stw	r6,-4(fp)
    static char digits[] = "0123456789abcdef";
    size_t i;
    for (i = 0; i < inlen; i++) {
   40348:	e03ffc15 	stw	zero,-16(fp)
   4034c:	00002506 	br	403e4 <utils_bin_to_hex+0xb4>
        hex_out[i * 2] = digits[(bin_in[i] >> 4) & 0xF];
   40350:	e0bffc17 	ldw	r2,-16(fp)
   40354:	1085883a 	add	r2,r2,r2
   40358:	1007883a 	mov	r3,r2
   4035c:	e0bfff17 	ldw	r2,-4(fp)
   40360:	10c7883a 	add	r3,r2,r3
   40364:	e13ffd17 	ldw	r4,-12(fp)
   40368:	e0bffc17 	ldw	r2,-16(fp)
   4036c:	2085883a 	add	r2,r4,r2
   40370:	10800003 	ldbu	r2,0(r2)
   40374:	10803fcc 	andi	r2,r2,255
   40378:	1004d13a 	srli	r2,r2,4
   4037c:	10803fcc 	andi	r2,r2,255
   40380:	110003cc 	andi	r4,r2,15
   40384:	00800174 	movhi	r2,5
   40388:	109b7804 	addi	r2,r2,28128
   4038c:	1105883a 	add	r2,r2,r4
   40390:	10800003 	ldbu	r2,0(r2)
   40394:	18800005 	stb	r2,0(r3)
        hex_out[i * 2 + 1] = digits[bin_in[i] & 0xF];
   40398:	e0bffc17 	ldw	r2,-16(fp)
   4039c:	1085883a 	add	r2,r2,r2
   403a0:	10800044 	addi	r2,r2,1
   403a4:	e0ffff17 	ldw	r3,-4(fp)
   403a8:	1887883a 	add	r3,r3,r2
   403ac:	e13ffd17 	ldw	r4,-12(fp)
   403b0:	e0bffc17 	ldw	r2,-16(fp)
   403b4:	2085883a 	add	r2,r4,r2
   403b8:	10800003 	ldbu	r2,0(r2)
   403bc:	10803fcc 	andi	r2,r2,255
   403c0:	110003cc 	andi	r4,r2,15
   403c4:	00800174 	movhi	r2,5
   403c8:	109b7804 	addi	r2,r2,28128
   403cc:	1105883a 	add	r2,r2,r4
   403d0:	10800003 	ldbu	r2,0(r2)
   403d4:	18800005 	stb	r2,0(r3)

void utils_bin_to_hex(unsigned char* bin_in, size_t inlen, char* hex_out)
{
    static char digits[] = "0123456789abcdef";
    size_t i;
    for (i = 0; i < inlen; i++) {
   403d8:	e0bffc17 	ldw	r2,-16(fp)
   403dc:	10800044 	addi	r2,r2,1
   403e0:	e0bffc15 	stw	r2,-16(fp)
   403e4:	e0fffc17 	ldw	r3,-16(fp)
   403e8:	e0bffe17 	ldw	r2,-8(fp)
   403ec:	18bfd836 	bltu	r3,r2,40350 <__alt_mem_epcs_flash_controller+0xfe037350>
        hex_out[i * 2] = digits[(bin_in[i] >> 4) & 0xF];
        hex_out[i * 2 + 1] = digits[bin_in[i] & 0xF];
    }
    hex_out[inlen * 2] = '\0';
   403f0:	e0bffe17 	ldw	r2,-8(fp)
   403f4:	1085883a 	add	r2,r2,r2
   403f8:	1007883a 	mov	r3,r2
   403fc:	e0bfff17 	ldw	r2,-4(fp)
   40400:	10c5883a 	add	r2,r2,r3
   40404:	10000005 	stb	zero,0(r2)
}
   40408:	0001883a 	nop
   4040c:	e037883a 	mov	sp,fp
   40410:	df000017 	ldw	fp,0(sp)
   40414:	dec00104 	addi	sp,sp,4
   40418:	f800283a 	ret

0004041c <utils_uint8_to_hex>:


char* utils_uint8_to_hex(const uint8_t* bin, size_t l)
{
   4041c:	defffb04 	addi	sp,sp,-20
   40420:	dfc00415 	stw	ra,16(sp)
   40424:	df000315 	stw	fp,12(sp)
   40428:	df000304 	addi	fp,sp,12
   4042c:	e13ffe15 	stw	r4,-8(fp)
   40430:	e17fff15 	stw	r5,-4(fp)
    static char digits[] = "0123456789abcdef";
    size_t i;
    if (l > (TO_UINT8_HEX_BUF_LEN / 2 - 1)) {
   40434:	e0bfff17 	ldw	r2,-4(fp)
   40438:	10810030 	cmpltui	r2,r2,1024
   4043c:	1000021e 	bne	r2,zero,40448 <utils_uint8_to_hex+0x2c>
        return NULL;
   40440:	0005883a 	mov	r2,zero
   40444:	00003a06 	br	40530 <utils_uint8_to_hex+0x114>
    }
    memset(buffer_uint8_to_hex, 0, TO_UINT8_HEX_BUF_LEN);
   40448:	01820004 	movi	r6,2048
   4044c:	000b883a 	mov	r5,zero
   40450:	010001b4 	movhi	r4,6
   40454:	212ab204 	addi	r4,r4,-21816
   40458:	00464200 	call	46420 <memset>
    for (i = 0; i < l; i++) {
   4045c:	e03ffd15 	stw	zero,-12(fp)
   40460:	00002706 	br	40500 <utils_uint8_to_hex+0xe4>
        buffer_uint8_to_hex[i * 2] = digits[(bin[i] >> 4) & 0xF];
   40464:	e0bffd17 	ldw	r2,-12(fp)
   40468:	1085883a 	add	r2,r2,r2
   4046c:	1009883a 	mov	r4,r2
   40470:	e0fffe17 	ldw	r3,-8(fp)
   40474:	e0bffd17 	ldw	r2,-12(fp)
   40478:	1885883a 	add	r2,r3,r2
   4047c:	10800003 	ldbu	r2,0(r2)
   40480:	10803fcc 	andi	r2,r2,255
   40484:	1004d13a 	srli	r2,r2,4
   40488:	10803fcc 	andi	r2,r2,255
   4048c:	10c003cc 	andi	r3,r2,15
   40490:	00800174 	movhi	r2,5
   40494:	109b7d04 	addi	r2,r2,28148
   40498:	10c5883a 	add	r2,r2,r3
   4049c:	10c00003 	ldbu	r3,0(r2)
   404a0:	008001b4 	movhi	r2,6
   404a4:	10aab204 	addi	r2,r2,-21816
   404a8:	1105883a 	add	r2,r2,r4
   404ac:	10c00005 	stb	r3,0(r2)
        buffer_uint8_to_hex[i * 2 + 1] = digits[bin[i] & 0xF];
   404b0:	e0bffd17 	ldw	r2,-12(fp)
   404b4:	1085883a 	add	r2,r2,r2
   404b8:	11000044 	addi	r4,r2,1
   404bc:	e0fffe17 	ldw	r3,-8(fp)
   404c0:	e0bffd17 	ldw	r2,-12(fp)
   404c4:	1885883a 	add	r2,r3,r2
   404c8:	10800003 	ldbu	r2,0(r2)
   404cc:	10803fcc 	andi	r2,r2,255
   404d0:	10c003cc 	andi	r3,r2,15
   404d4:	00800174 	movhi	r2,5
   404d8:	109b7d04 	addi	r2,r2,28148
   404dc:	10c5883a 	add	r2,r2,r3
   404e0:	10c00003 	ldbu	r3,0(r2)
   404e4:	008001b4 	movhi	r2,6
   404e8:	10aab204 	addi	r2,r2,-21816
   404ec:	1105883a 	add	r2,r2,r4
   404f0:	10c00005 	stb	r3,0(r2)
    size_t i;
    if (l > (TO_UINT8_HEX_BUF_LEN / 2 - 1)) {
        return NULL;
    }
    memset(buffer_uint8_to_hex, 0, TO_UINT8_HEX_BUF_LEN);
    for (i = 0; i < l; i++) {
   404f4:	e0bffd17 	ldw	r2,-12(fp)
   404f8:	10800044 	addi	r2,r2,1
   404fc:	e0bffd15 	stw	r2,-12(fp)
   40500:	e0fffd17 	ldw	r3,-12(fp)
   40504:	e0bfff17 	ldw	r2,-4(fp)
   40508:	18bfd636 	bltu	r3,r2,40464 <__alt_mem_epcs_flash_controller+0xfe037464>
        buffer_uint8_to_hex[i * 2] = digits[(bin[i] >> 4) & 0xF];
        buffer_uint8_to_hex[i * 2 + 1] = digits[bin[i] & 0xF];
    }
    buffer_uint8_to_hex[l * 2] = '\0';
   4050c:	e0bfff17 	ldw	r2,-4(fp)
   40510:	1085883a 	add	r2,r2,r2
   40514:	1007883a 	mov	r3,r2
   40518:	008001b4 	movhi	r2,6
   4051c:	10aab204 	addi	r2,r2,-21816
   40520:	10c5883a 	add	r2,r2,r3
   40524:	10000005 	stb	zero,0(r2)
    return buffer_uint8_to_hex;
   40528:	008001b4 	movhi	r2,6
   4052c:	10aab204 	addi	r2,r2,-21816
}
   40530:	e037883a 	mov	sp,fp
   40534:	dfc00117 	ldw	ra,4(sp)
   40538:	df000017 	ldw	fp,0(sp)
   4053c:	dec00204 	addi	sp,sp,8
   40540:	f800283a 	ret

00040544 <utils_reverse_hex>:

void utils_reverse_hex(char* h, int len)
{
   40544:	defffa04 	addi	sp,sp,-24
   40548:	dfc00515 	stw	ra,20(sp)
   4054c:	df000415 	stw	fp,16(sp)
   40550:	df000404 	addi	fp,sp,16
   40554:	e13ffe15 	stw	r4,-8(fp)
   40558:	e17fff15 	stw	r5,-4(fp)
    char* copy = btc_malloc(len);
   4055c:	e0bfff17 	ldw	r2,-4(fp)
   40560:	1009883a 	mov	r4,r2
   40564:	00082c40 	call	82c4 <btc_malloc>
   40568:	e0bffd15 	stw	r2,-12(fp)
    int i;
    strncpy(copy, h, len);
   4056c:	e0bfff17 	ldw	r2,-4(fp)
   40570:	100d883a 	mov	r6,r2
   40574:	e17ffe17 	ldw	r5,-8(fp)
   40578:	e13ffd17 	ldw	r4,-12(fp)
   4057c:	0046cb80 	call	46cb8 <strncpy>
    for (i = 0; i < len; i += 2) {
   40580:	e03ffc15 	stw	zero,-16(fp)
   40584:	00001a06 	br	405f0 <utils_reverse_hex+0xac>
        h[i] = copy[len - i - 2];
   40588:	e0bffc17 	ldw	r2,-16(fp)
   4058c:	e0fffe17 	ldw	r3,-8(fp)
   40590:	1885883a 	add	r2,r3,r2
   40594:	e13fff17 	ldw	r4,-4(fp)
   40598:	e0fffc17 	ldw	r3,-16(fp)
   4059c:	20c7c83a 	sub	r3,r4,r3
   405a0:	18ffff84 	addi	r3,r3,-2
   405a4:	e13ffd17 	ldw	r4,-12(fp)
   405a8:	20c7883a 	add	r3,r4,r3
   405ac:	18c00003 	ldbu	r3,0(r3)
   405b0:	10c00005 	stb	r3,0(r2)
        h[i + 1] = copy[len - i - 1];
   405b4:	e0bffc17 	ldw	r2,-16(fp)
   405b8:	10800044 	addi	r2,r2,1
   405bc:	e0fffe17 	ldw	r3,-8(fp)
   405c0:	1885883a 	add	r2,r3,r2
   405c4:	e13fff17 	ldw	r4,-4(fp)
   405c8:	e0fffc17 	ldw	r3,-16(fp)
   405cc:	20c7c83a 	sub	r3,r4,r3
   405d0:	18ffffc4 	addi	r3,r3,-1
   405d4:	e13ffd17 	ldw	r4,-12(fp)
   405d8:	20c7883a 	add	r3,r4,r3
   405dc:	18c00003 	ldbu	r3,0(r3)
   405e0:	10c00005 	stb	r3,0(r2)
void utils_reverse_hex(char* h, int len)
{
    char* copy = btc_malloc(len);
    int i;
    strncpy(copy, h, len);
    for (i = 0; i < len; i += 2) {
   405e4:	e0bffc17 	ldw	r2,-16(fp)
   405e8:	10800084 	addi	r2,r2,2
   405ec:	e0bffc15 	stw	r2,-16(fp)
   405f0:	e0fffc17 	ldw	r3,-16(fp)
   405f4:	e0bfff17 	ldw	r2,-4(fp)
   405f8:	18bfe316 	blt	r3,r2,40588 <__alt_mem_epcs_flash_controller+0xfe037588>
        h[i] = copy[len - i - 2];
        h[i + 1] = copy[len - i - 1];
    }
    btc_free(copy);
   405fc:	e13ffd17 	ldw	r4,-12(fp)
   40600:	00083880 	call	8388 <btc_free>
}
   40604:	0001883a 	nop
   40608:	e037883a 	mov	sp,fp
   4060c:	dfc00117 	ldw	ra,4(sp)
   40610:	df000017 	ldw	fp,0(sp)
   40614:	dec00204 	addi	sp,sp,8
   40618:	f800283a 	ret

0004061c <utils_hex_digit>:
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
};

signed char utils_hex_digit(char c)
{
   4061c:	defffe04 	addi	sp,sp,-8
   40620:	df000115 	stw	fp,4(sp)
   40624:	df000104 	addi	fp,sp,4
   40628:	2005883a 	mov	r2,r4
   4062c:	e0bfff05 	stb	r2,-4(fp)
    return p_util_hexdigit[(unsigned char)c];
   40630:	e0bfff03 	ldbu	r2,-4(fp)
   40634:	10c03fcc 	andi	r3,r2,255
   40638:	00800174 	movhi	r2,5
   4063c:	1099d904 	addi	r2,r2,26468
   40640:	10c5883a 	add	r2,r2,r3
   40644:	10800003 	ldbu	r2,0(r2)
}
   40648:	e037883a 	mov	sp,fp
   4064c:	df000017 	ldw	fp,0(sp)
   40650:	dec00104 	addi	sp,sp,4
   40654:	f800283a 	ret

00040658 <utils_uint256_sethex>:

void utils_uint256_sethex(char* psz, uint8_t* out)
{
   40658:	defff804 	addi	sp,sp,-32
   4065c:	dfc00715 	stw	ra,28(sp)
   40660:	df000615 	stw	fp,24(sp)
   40664:	df000604 	addi	fp,sp,24
   40668:	e13ffe15 	stw	r4,-8(fp)
   4066c:	e17fff15 	stw	r5,-4(fp)
    memset(out, 0, sizeof(uint256));
   40670:	01800804 	movi	r6,32
   40674:	000b883a 	mov	r5,zero
   40678:	e13fff17 	ldw	r4,-4(fp)
   4067c:	00464200 	call	46420 <memset>

    // skip leading spaces
    while (isspace(*psz))
   40680:	00000306 	br	40690 <utils_uint256_sethex+0x38>
        psz++;
   40684:	e0bffe17 	ldw	r2,-8(fp)
   40688:	10800044 	addi	r2,r2,1
   4068c:	e0bffe15 	stw	r2,-8(fp)
void utils_uint256_sethex(char* psz, uint8_t* out)
{
    memset(out, 0, sizeof(uint256));

    // skip leading spaces
    while (isspace(*psz))
   40690:	d0e01417 	ldw	r3,-32688(gp)
   40694:	e0bffe17 	ldw	r2,-8(fp)
   40698:	10800003 	ldbu	r2,0(r2)
   4069c:	10803fcc 	andi	r2,r2,255
   406a0:	1080201c 	xori	r2,r2,128
   406a4:	10bfe004 	addi	r2,r2,-128
   406a8:	10800044 	addi	r2,r2,1
   406ac:	1885883a 	add	r2,r3,r2
   406b0:	10800003 	ldbu	r2,0(r2)
   406b4:	10803fcc 	andi	r2,r2,255
   406b8:	1080020c 	andi	r2,r2,8
   406bc:	103ff11e 	bne	r2,zero,40684 <__alt_mem_epcs_flash_controller+0xfe037684>
        psz++;

    // skip 0x
    if (psz[0] == '0' && tolower(psz[1]) == 'x')
   406c0:	e0bffe17 	ldw	r2,-8(fp)
   406c4:	10800003 	ldbu	r2,0(r2)
   406c8:	10803fcc 	andi	r2,r2,255
   406cc:	1080201c 	xori	r2,r2,128
   406d0:	10bfe004 	addi	r2,r2,-128
   406d4:	10800c18 	cmpnei	r2,r2,48
   406d8:	1000151e 	bne	r2,zero,40730 <utils_uint256_sethex+0xd8>
   406dc:	e0bffe17 	ldw	r2,-8(fp)
   406e0:	10800043 	ldbu	r2,1(r2)
   406e4:	e0bffb05 	stb	r2,-20(fp)
   406e8:	d0e01417 	ldw	r3,-32688(gp)
   406ec:	e0bffb07 	ldb	r2,-20(fp)
   406f0:	10800044 	addi	r2,r2,1
   406f4:	1885883a 	add	r2,r3,r2
   406f8:	10800003 	ldbu	r2,0(r2)
   406fc:	10803fcc 	andi	r2,r2,255
   40700:	108000cc 	andi	r2,r2,3
   40704:	10800058 	cmpnei	r2,r2,1
   40708:	1000031e 	bne	r2,zero,40718 <utils_uint256_sethex+0xc0>
   4070c:	e0bffb07 	ldb	r2,-20(fp)
   40710:	10800804 	addi	r2,r2,32
   40714:	00000106 	br	4071c <utils_uint256_sethex+0xc4>
   40718:	e0bffb07 	ldb	r2,-20(fp)
   4071c:	10801e18 	cmpnei	r2,r2,120
   40720:	1000031e 	bne	r2,zero,40730 <utils_uint256_sethex+0xd8>
        psz += 2;
   40724:	e0bffe17 	ldw	r2,-8(fp)
   40728:	10800084 	addi	r2,r2,2
   4072c:	e0bffe15 	stw	r2,-8(fp)

    // hex string to uint
    const char* pbegin = psz;
   40730:	e0bffe17 	ldw	r2,-8(fp)
   40734:	e0bffc15 	stw	r2,-16(fp)
    while (utils_hex_digit(*psz) != -1)
   40738:	00000306 	br	40748 <utils_uint256_sethex+0xf0>
        psz++;
   4073c:	e0bffe17 	ldw	r2,-8(fp)
   40740:	10800044 	addi	r2,r2,1
   40744:	e0bffe15 	stw	r2,-8(fp)
    if (psz[0] == '0' && tolower(psz[1]) == 'x')
        psz += 2;

    // hex string to uint
    const char* pbegin = psz;
    while (utils_hex_digit(*psz) != -1)
   40748:	e0bffe17 	ldw	r2,-8(fp)
   4074c:	10800003 	ldbu	r2,0(r2)
   40750:	10803fcc 	andi	r2,r2,255
   40754:	1080201c 	xori	r2,r2,128
   40758:	10bfe004 	addi	r2,r2,-128
   4075c:	1009883a 	mov	r4,r2
   40760:	004061c0 	call	4061c <utils_hex_digit>
   40764:	10803fcc 	andi	r2,r2,255
   40768:	1080201c 	xori	r2,r2,128
   4076c:	10bfe004 	addi	r2,r2,-128
   40770:	10bfffd8 	cmpnei	r2,r2,-1
   40774:	103ff11e 	bne	r2,zero,4073c <__alt_mem_epcs_flash_controller+0xfe03773c>
        psz++;
    psz--;
   40778:	e0bffe17 	ldw	r2,-8(fp)
   4077c:	10bfffc4 	addi	r2,r2,-1
   40780:	e0bffe15 	stw	r2,-8(fp)
    unsigned char* p1 = (unsigned char*)out;
   40784:	e0bfff17 	ldw	r2,-4(fp)
   40788:	e0bffa15 	stw	r2,-24(fp)
    unsigned char* pend = p1 + sizeof(uint256);
   4078c:	e0bffa17 	ldw	r2,-24(fp)
   40790:	10800804 	addi	r2,r2,32
   40794:	e0bffd15 	stw	r2,-12(fp)
    while (psz >= pbegin && p1 < pend) {
   40798:	00002506 	br	40830 <utils_uint256_sethex+0x1d8>
        *p1 = utils_hex_digit(*psz--);
   4079c:	e0bffe17 	ldw	r2,-8(fp)
   407a0:	10ffffc4 	addi	r3,r2,-1
   407a4:	e0fffe15 	stw	r3,-8(fp)
   407a8:	10800003 	ldbu	r2,0(r2)
   407ac:	10803fcc 	andi	r2,r2,255
   407b0:	1080201c 	xori	r2,r2,128
   407b4:	10bfe004 	addi	r2,r2,-128
   407b8:	1009883a 	mov	r4,r2
   407bc:	004061c0 	call	4061c <utils_hex_digit>
   407c0:	1007883a 	mov	r3,r2
   407c4:	e0bffa17 	ldw	r2,-24(fp)
   407c8:	10c00005 	stb	r3,0(r2)
        if (psz >= pbegin) {
   407cc:	e0fffe17 	ldw	r3,-8(fp)
   407d0:	e0bffc17 	ldw	r2,-16(fp)
   407d4:	18801636 	bltu	r3,r2,40830 <utils_uint256_sethex+0x1d8>
            *p1 |= ((unsigned char)utils_hex_digit(*psz--) << 4);
   407d8:	e0bffe17 	ldw	r2,-8(fp)
   407dc:	10ffffc4 	addi	r3,r2,-1
   407e0:	e0fffe15 	stw	r3,-8(fp)
   407e4:	10800003 	ldbu	r2,0(r2)
   407e8:	10803fcc 	andi	r2,r2,255
   407ec:	1080201c 	xori	r2,r2,128
   407f0:	10bfe004 	addi	r2,r2,-128
   407f4:	1009883a 	mov	r4,r2
   407f8:	004061c0 	call	4061c <utils_hex_digit>
   407fc:	10803fcc 	andi	r2,r2,255
   40800:	1008913a 	slli	r4,r2,4
   40804:	e0bffa17 	ldw	r2,-24(fp)
   40808:	10800003 	ldbu	r2,0(r2)
   4080c:	1007883a 	mov	r3,r2
   40810:	2005883a 	mov	r2,r4
   40814:	1884b03a 	or	r2,r3,r2
   40818:	1007883a 	mov	r3,r2
   4081c:	e0bffa17 	ldw	r2,-24(fp)
   40820:	10c00005 	stb	r3,0(r2)
            p1++;
   40824:	e0bffa17 	ldw	r2,-24(fp)
   40828:	10800044 	addi	r2,r2,1
   4082c:	e0bffa15 	stw	r2,-24(fp)
    while (utils_hex_digit(*psz) != -1)
        psz++;
    psz--;
    unsigned char* p1 = (unsigned char*)out;
    unsigned char* pend = p1 + sizeof(uint256);
    while (psz >= pbegin && p1 < pend) {
   40830:	e0fffe17 	ldw	r3,-8(fp)
   40834:	e0bffc17 	ldw	r2,-16(fp)
   40838:	18800336 	bltu	r3,r2,40848 <utils_uint256_sethex+0x1f0>
   4083c:	e0fffa17 	ldw	r3,-24(fp)
   40840:	e0bffd17 	ldw	r2,-12(fp)
   40844:	18bfd536 	bltu	r3,r2,4079c <__alt_mem_epcs_flash_controller+0xfe03779c>
        if (psz >= pbegin) {
            *p1 |= ((unsigned char)utils_hex_digit(*psz--) << 4);
            p1++;
        }
    }
}
   40848:	0001883a 	nop
   4084c:	e037883a 	mov	sp,fp
   40850:	dfc00117 	ldw	ra,4(sp)
   40854:	df000017 	ldw	fp,0(sp)
   40858:	dec00204 	addi	sp,sp,8
   4085c:	f800283a 	ret

00040860 <safe_malloc>:

void* safe_malloc(size_t size)
{
   40860:	defffc04 	addi	sp,sp,-16
   40864:	dfc00315 	stw	ra,12(sp)
   40868:	df000215 	stw	fp,8(sp)
   4086c:	df000204 	addi	fp,sp,8
   40870:	e13fff15 	stw	r4,-4(fp)
    void* result;

    if ((result = malloc(size))) { /* assignment intentional */
   40874:	e13fff17 	ldw	r4,-4(fp)
   40878:	00463400 	call	46340 <malloc>
   4087c:	e0bffe15 	stw	r2,-8(fp)
   40880:	e0bffe17 	ldw	r2,-8(fp)
   40884:	10000226 	beq	r2,zero,40890 <safe_malloc+0x30>
        return (result);
   40888:	e0bffe17 	ldw	r2,-8(fp)
   4088c:	00000806 	br	408b0 <safe_malloc+0x50>
    } else {
        printf("memory overflow: malloc failed in safe_malloc.");
   40890:	01000174 	movhi	r4,5
   40894:	211a1904 	addi	r4,r4,26724
   40898:	00467040 	call	46704 <printf>
        printf("  Exiting Program.\n");
   4089c:	01000174 	movhi	r4,5
   408a0:	211a2504 	addi	r4,r4,26772
   408a4:	00467d00 	call	467d0 <puts>
        exit(-1);
   408a8:	013fffc4 	movi	r4,-1
   408ac:	004607c0 	call	4607c <exit>
        return (0);
    }
}
   408b0:	e037883a 	mov	sp,fp
   408b4:	dfc00117 	ldw	ra,4(sp)
   408b8:	df000017 	ldw	fp,0(sp)
   408bc:	dec00204 	addi	sp,sp,8
   408c0:	f800283a 	ret

000408c4 <btc_cheap_random_bytes>:

void btc_cheap_random_bytes(uint8_t* buf, uint32_t len)
{
   408c4:	defffa04 	addi	sp,sp,-24
   408c8:	dfc00515 	stw	ra,20(sp)
   408cc:	df000415 	stw	fp,16(sp)
   408d0:	dc000315 	stw	r16,12(sp)
   408d4:	df000404 	addi	fp,sp,16
   408d8:	e13ffd15 	stw	r4,-12(fp)
   408dc:	e17ffe15 	stw	r5,-8(fp)
    srand(time(NULL));
   408e0:	0009883a 	mov	r4,zero
   408e4:	00471080 	call	47108 <time>
   408e8:	1009883a 	mov	r4,r2
   408ec:	00467e40 	call	467e4 <srand>
    for (uint32_t i = 0; i < len; i++) {
   408f0:	e03ffc15 	stw	zero,-16(fp)
   408f4:	00000806 	br	40918 <btc_cheap_random_bytes+0x54>
        buf[i] = rand();
   408f8:	e0fffd17 	ldw	r3,-12(fp)
   408fc:	e0bffc17 	ldw	r2,-16(fp)
   40900:	18a1883a 	add	r16,r3,r2
   40904:	00467f80 	call	467f8 <rand>
   40908:	80800005 	stb	r2,0(r16)
}

void btc_cheap_random_bytes(uint8_t* buf, uint32_t len)
{
    srand(time(NULL));
    for (uint32_t i = 0; i < len; i++) {
   4090c:	e0bffc17 	ldw	r2,-16(fp)
   40910:	10800044 	addi	r2,r2,1
   40914:	e0bffc15 	stw	r2,-16(fp)
   40918:	e0fffc17 	ldw	r3,-16(fp)
   4091c:	e0bffe17 	ldw	r2,-8(fp)
   40920:	18bff536 	bltu	r3,r2,408f8 <__alt_mem_epcs_flash_controller+0xfe0378f8>
        buf[i] = rand();
    }
}
   40924:	0001883a 	nop
   40928:	e6ffff04 	addi	sp,fp,-4
   4092c:	dfc00217 	ldw	ra,8(sp)
   40930:	df000117 	ldw	fp,4(sp)
   40934:	dc000017 	ldw	r16,0(sp)
   40938:	dec00304 	addi	sp,sp,12
   4093c:	f800283a 	ret

00040940 <btc_get_default_datadir>:

void btc_get_default_datadir(cstring *path_out)
{
   40940:	defffb04 	addi	sp,sp,-20
   40944:	dfc00415 	stw	ra,16(sp)
   40948:	df000315 	stw	fp,12(sp)
   4094c:	df000304 	addi	fp,sp,12
   40950:	e13fff15 	stw	r4,-4(fp)
    char* homedrive = getenv("HOMEDRIVE");
    char* homepath = getenv("HOMEDRIVE");
    cstr_append_buf(path_out, homedrive, strlen(homedrive));
    cstr_append_buf(path_out, homepath, strlen(homepath));
#else
    char* home = getenv("HOME");
   40954:	01000174 	movhi	r4,5
   40958:	211a2a04 	addi	r4,r4,26792
   4095c:	00462000 	call	46200 <getenv>
   40960:	e0bffd15 	stw	r2,-12(fp)
    if (home == NULL || strlen(home) == 0)
   40964:	e0bffd17 	ldw	r2,-12(fp)
   40968:	10000626 	beq	r2,zero,40984 <btc_get_default_datadir+0x44>
   4096c:	e0bffd17 	ldw	r2,-12(fp)
   40970:	10800003 	ldbu	r2,0(r2)
   40974:	10803fcc 	andi	r2,r2,255
   40978:	1080201c 	xori	r2,r2,128
   4097c:	10bfe004 	addi	r2,r2,-128
   40980:	1000041e 	bne	r2,zero,40994 <btc_get_default_datadir+0x54>
        cstr_append_c(path_out, '/');
   40984:	01400bc4 	movi	r5,47
   40988:	e13fff17 	ldw	r4,-4(fp)
   4098c:	004360c0 	call	4360c <cstr_append_c>
   40990:	00000606 	br	409ac <btc_get_default_datadir+0x6c>
    else
        cstr_append_buf(path_out, home, strlen(home));
   40994:	e13ffd17 	ldw	r4,-12(fp)
   40998:	0046c3c0 	call	46c3c <strlen>
   4099c:	100d883a 	mov	r6,r2
   409a0:	e17ffd17 	ldw	r5,-12(fp)
   409a4:	e13fff17 	ldw	r4,-4(fp)
   409a8:	00435100 	call	43510 <cstr_append_buf>
    // Mac
    char *osx_home = "/Library/Application Support/Bitcoin";
    cstr_append_buf(path_out, osx_home, strlen(osx_home));
#else
    // Unix
    char *posix_home = "/.bitcoin";
   409ac:	00800174 	movhi	r2,5
   409b0:	109a2c04 	addi	r2,r2,26800
   409b4:	e0bffe15 	stw	r2,-8(fp)
    cstr_append_buf(path_out, posix_home, strlen(posix_home));
   409b8:	e13ffe17 	ldw	r4,-8(fp)
   409bc:	0046c3c0 	call	46c3c <strlen>
   409c0:	100d883a 	mov	r6,r2
   409c4:	e17ffe17 	ldw	r5,-8(fp)
   409c8:	e13fff17 	ldw	r4,-4(fp)
   409cc:	00435100 	call	43510 <cstr_append_buf>
#endif
#endif
}
   409d0:	0001883a 	nop
   409d4:	e037883a 	mov	sp,fp
   409d8:	dfc00117 	ldw	ra,4(sp)
   409dc:	df000017 	ldw	fp,0(sp)
   409e0:	dec00204 	addi	sp,sp,8
   409e4:	f800283a 	ret

000409e8 <vector_new>:

#include "..\include\btc\vector.h"
#include "..\include\btc\memory.h"

vector* vector_new(size_t res, void (*free_f)(void*))
{
   409e8:	defffb04 	addi	sp,sp,-20
   409ec:	dfc00415 	stw	ra,16(sp)
   409f0:	df000315 	stw	fp,12(sp)
   409f4:	df000304 	addi	fp,sp,12
   409f8:	e13ffe15 	stw	r4,-8(fp)
   409fc:	e17fff15 	stw	r5,-4(fp)
    vector* vec = btc_calloc(1, sizeof(vector));
   40a00:	01400404 	movi	r5,16
   40a04:	01000044 	movi	r4,1
   40a08:	00083000 	call	8300 <btc_calloc>
   40a0c:	e0bffd15 	stw	r2,-12(fp)
    if (!vec)
   40a10:	e0bffd17 	ldw	r2,-12(fp)
   40a14:	1000021e 	bne	r2,zero,40a20 <vector_new+0x38>
        return NULL;
   40a18:	0005883a 	mov	r2,zero
   40a1c:	00002206 	br	40aa8 <vector_new+0xc0>

    vec->alloc = 8;
   40a20:	e0bffd17 	ldw	r2,-12(fp)
   40a24:	00c00204 	movi	r3,8
   40a28:	10c00215 	stw	r3,8(r2)
    while (vec->alloc < res)
   40a2c:	00000606 	br	40a48 <vector_new+0x60>
        vec->alloc *= 2;
   40a30:	e0bffd17 	ldw	r2,-12(fp)
   40a34:	10800217 	ldw	r2,8(r2)
   40a38:	1085883a 	add	r2,r2,r2
   40a3c:	1007883a 	mov	r3,r2
   40a40:	e0bffd17 	ldw	r2,-12(fp)
   40a44:	10c00215 	stw	r3,8(r2)
    vector* vec = btc_calloc(1, sizeof(vector));
    if (!vec)
        return NULL;

    vec->alloc = 8;
    while (vec->alloc < res)
   40a48:	e0bffd17 	ldw	r2,-12(fp)
   40a4c:	10c00217 	ldw	r3,8(r2)
   40a50:	e0bffe17 	ldw	r2,-8(fp)
   40a54:	18bff636 	bltu	r3,r2,40a30 <__alt_mem_epcs_flash_controller+0xfe037a30>
        vec->alloc *= 2;

    vec->elem_free_f = free_f;
   40a58:	e0bffd17 	ldw	r2,-12(fp)
   40a5c:	e0ffff17 	ldw	r3,-4(fp)
   40a60:	10c00315 	stw	r3,12(r2)
    vec->data = btc_malloc(vec->alloc * sizeof(void*));
   40a64:	e0bffd17 	ldw	r2,-12(fp)
   40a68:	10800217 	ldw	r2,8(r2)
   40a6c:	1085883a 	add	r2,r2,r2
   40a70:	1085883a 	add	r2,r2,r2
   40a74:	1009883a 	mov	r4,r2
   40a78:	00082c40 	call	82c4 <btc_malloc>
   40a7c:	1007883a 	mov	r3,r2
   40a80:	e0bffd17 	ldw	r2,-12(fp)
   40a84:	10c00015 	stw	r3,0(r2)
    if (!vec->data) {
   40a88:	e0bffd17 	ldw	r2,-12(fp)
   40a8c:	10800017 	ldw	r2,0(r2)
   40a90:	1000041e 	bne	r2,zero,40aa4 <vector_new+0xbc>
        btc_free(vec);
   40a94:	e13ffd17 	ldw	r4,-12(fp)
   40a98:	00083880 	call	8388 <btc_free>
        return NULL;
   40a9c:	0005883a 	mov	r2,zero
   40aa0:	00000106 	br	40aa8 <vector_new+0xc0>
    }

    return vec;
   40aa4:	e0bffd17 	ldw	r2,-12(fp)
}
   40aa8:	e037883a 	mov	sp,fp
   40aac:	dfc00117 	ldw	ra,4(sp)
   40ab0:	df000017 	ldw	fp,0(sp)
   40ab4:	dec00204 	addi	sp,sp,8
   40ab8:	f800283a 	ret

00040abc <vector_free_data>:

static void vector_free_data(vector* vec)
{
   40abc:	defffc04 	addi	sp,sp,-16
   40ac0:	dfc00315 	stw	ra,12(sp)
   40ac4:	df000215 	stw	fp,8(sp)
   40ac8:	df000204 	addi	fp,sp,8
   40acc:	e13fff15 	stw	r4,-4(fp)
    if (!vec->data)
   40ad0:	e0bfff17 	ldw	r2,-4(fp)
   40ad4:	10800017 	ldw	r2,0(r2)
   40ad8:	10003126 	beq	r2,zero,40ba0 <vector_free_data+0xe4>
        return;

    if (vec->elem_free_f) {
   40adc:	e0bfff17 	ldw	r2,-4(fp)
   40ae0:	10800317 	ldw	r2,12(r2)
   40ae4:	10002326 	beq	r2,zero,40b74 <vector_free_data+0xb8>
        unsigned int i;
        for (i = 0; i < vec->len; i++)
   40ae8:	e03ffe15 	stw	zero,-8(fp)
   40aec:	00001d06 	br	40b64 <vector_free_data+0xa8>
            if (vec->data[i]) {
   40af0:	e0bfff17 	ldw	r2,-4(fp)
   40af4:	10c00017 	ldw	r3,0(r2)
   40af8:	e0bffe17 	ldw	r2,-8(fp)
   40afc:	1085883a 	add	r2,r2,r2
   40b00:	1085883a 	add	r2,r2,r2
   40b04:	1885883a 	add	r2,r3,r2
   40b08:	10800017 	ldw	r2,0(r2)
   40b0c:	10001226 	beq	r2,zero,40b58 <vector_free_data+0x9c>
                vec->elem_free_f(vec->data[i]);
   40b10:	e0bfff17 	ldw	r2,-4(fp)
   40b14:	10c00317 	ldw	r3,12(r2)
   40b18:	e0bfff17 	ldw	r2,-4(fp)
   40b1c:	11000017 	ldw	r4,0(r2)
   40b20:	e0bffe17 	ldw	r2,-8(fp)
   40b24:	1085883a 	add	r2,r2,r2
   40b28:	1085883a 	add	r2,r2,r2
   40b2c:	2085883a 	add	r2,r4,r2
   40b30:	10800017 	ldw	r2,0(r2)
   40b34:	1009883a 	mov	r4,r2
   40b38:	183ee83a 	callr	r3
                vec->data[i] = NULL;
   40b3c:	e0bfff17 	ldw	r2,-4(fp)
   40b40:	10c00017 	ldw	r3,0(r2)
   40b44:	e0bffe17 	ldw	r2,-8(fp)
   40b48:	1085883a 	add	r2,r2,r2
   40b4c:	1085883a 	add	r2,r2,r2
   40b50:	1885883a 	add	r2,r3,r2
   40b54:	10000015 	stw	zero,0(r2)
    if (!vec->data)
        return;

    if (vec->elem_free_f) {
        unsigned int i;
        for (i = 0; i < vec->len; i++)
   40b58:	e0bffe17 	ldw	r2,-8(fp)
   40b5c:	10800044 	addi	r2,r2,1
   40b60:	e0bffe15 	stw	r2,-8(fp)
   40b64:	e0bfff17 	ldw	r2,-4(fp)
   40b68:	10800117 	ldw	r2,4(r2)
   40b6c:	e0fffe17 	ldw	r3,-8(fp)
   40b70:	18bfdf36 	bltu	r3,r2,40af0 <__alt_mem_epcs_flash_controller+0xfe037af0>
                vec->elem_free_f(vec->data[i]);
                vec->data[i] = NULL;
            }
    }

    btc_free(vec->data);
   40b74:	e0bfff17 	ldw	r2,-4(fp)
   40b78:	10800017 	ldw	r2,0(r2)
   40b7c:	1009883a 	mov	r4,r2
   40b80:	00083880 	call	8388 <btc_free>
    vec->data = NULL;
   40b84:	e0bfff17 	ldw	r2,-4(fp)
   40b88:	10000015 	stw	zero,0(r2)
    vec->alloc = 0;
   40b8c:	e0bfff17 	ldw	r2,-4(fp)
   40b90:	10000215 	stw	zero,8(r2)
    vec->len = 0;
   40b94:	e0bfff17 	ldw	r2,-4(fp)
   40b98:	10000115 	stw	zero,4(r2)
   40b9c:	00000106 	br	40ba4 <vector_free_data+0xe8>
}

static void vector_free_data(vector* vec)
{
    if (!vec->data)
        return;
   40ba0:	0001883a 	nop

    btc_free(vec->data);
    vec->data = NULL;
    vec->alloc = 0;
    vec->len = 0;
}
   40ba4:	e037883a 	mov	sp,fp
   40ba8:	dfc00117 	ldw	ra,4(sp)
   40bac:	df000017 	ldw	fp,0(sp)
   40bb0:	dec00204 	addi	sp,sp,8
   40bb4:	f800283a 	ret

00040bb8 <vector_free>:

void vector_free(vector* vec, btc_bool free_array)
{
   40bb8:	defffc04 	addi	sp,sp,-16
   40bbc:	dfc00315 	stw	ra,12(sp)
   40bc0:	df000215 	stw	fp,8(sp)
   40bc4:	df000204 	addi	fp,sp,8
   40bc8:	e13ffe15 	stw	r4,-8(fp)
   40bcc:	2805883a 	mov	r2,r5
   40bd0:	e0bfff05 	stb	r2,-4(fp)
    if (!vec)
   40bd4:	e0bffe17 	ldw	r2,-8(fp)
   40bd8:	10000b26 	beq	r2,zero,40c08 <vector_free+0x50>
        return;

    if (free_array)
   40bdc:	e0bfff03 	ldbu	r2,-4(fp)
   40be0:	10000226 	beq	r2,zero,40bec <vector_free+0x34>
        vector_free_data(vec);
   40be4:	e13ffe17 	ldw	r4,-8(fp)
   40be8:	0040abc0 	call	40abc <vector_free_data>

    memset(vec, 0, sizeof(*vec));
   40bec:	01800404 	movi	r6,16
   40bf0:	000b883a 	mov	r5,zero
   40bf4:	e13ffe17 	ldw	r4,-8(fp)
   40bf8:	00464200 	call	46420 <memset>
    btc_free(vec);
   40bfc:	e13ffe17 	ldw	r4,-8(fp)
   40c00:	00083880 	call	8388 <btc_free>
   40c04:	00000106 	br	40c0c <vector_free+0x54>
}

void vector_free(vector* vec, btc_bool free_array)
{
    if (!vec)
        return;
   40c08:	0001883a 	nop
    if (free_array)
        vector_free_data(vec);

    memset(vec, 0, sizeof(*vec));
    btc_free(vec);
}
   40c0c:	e037883a 	mov	sp,fp
   40c10:	dfc00117 	ldw	ra,4(sp)
   40c14:	df000017 	ldw	fp,0(sp)
   40c18:	dec00204 	addi	sp,sp,8
   40c1c:	f800283a 	ret

00040c20 <vector_grow>:

static btc_bool vector_grow(vector* vec, size_t min_sz)
{
   40c20:	defffa04 	addi	sp,sp,-24
   40c24:	dfc00515 	stw	ra,20(sp)
   40c28:	df000415 	stw	fp,16(sp)
   40c2c:	df000404 	addi	fp,sp,16
   40c30:	e13ffe15 	stw	r4,-8(fp)
   40c34:	e17fff15 	stw	r5,-4(fp)
    size_t new_alloc = vec->alloc;
   40c38:	e0bffe17 	ldw	r2,-8(fp)
   40c3c:	10800217 	ldw	r2,8(r2)
   40c40:	e0bffc15 	stw	r2,-16(fp)
    while (new_alloc < min_sz)
   40c44:	00000306 	br	40c54 <vector_grow+0x34>
        new_alloc *= 2;
   40c48:	e0bffc17 	ldw	r2,-16(fp)
   40c4c:	1085883a 	add	r2,r2,r2
   40c50:	e0bffc15 	stw	r2,-16(fp)
}

static btc_bool vector_grow(vector* vec, size_t min_sz)
{
    size_t new_alloc = vec->alloc;
    while (new_alloc < min_sz)
   40c54:	e0fffc17 	ldw	r3,-16(fp)
   40c58:	e0bfff17 	ldw	r2,-4(fp)
   40c5c:	18bffa36 	bltu	r3,r2,40c48 <__alt_mem_epcs_flash_controller+0xfe037c48>
        new_alloc *= 2;

    if (vec->alloc == new_alloc)
   40c60:	e0bffe17 	ldw	r2,-8(fp)
   40c64:	10c00217 	ldw	r3,8(r2)
   40c68:	e0bffc17 	ldw	r2,-16(fp)
   40c6c:	1880021e 	bne	r3,r2,40c78 <vector_grow+0x58>
        return true;
   40c70:	00800044 	movi	r2,1
   40c74:	00001406 	br	40cc8 <vector_grow+0xa8>

    void* new_data = btc_realloc(vec->data, new_alloc * sizeof(void*));
   40c78:	e0bffe17 	ldw	r2,-8(fp)
   40c7c:	10c00017 	ldw	r3,0(r2)
   40c80:	e0bffc17 	ldw	r2,-16(fp)
   40c84:	1085883a 	add	r2,r2,r2
   40c88:	1085883a 	add	r2,r2,r2
   40c8c:	100b883a 	mov	r5,r2
   40c90:	1809883a 	mov	r4,r3
   40c94:	00083440 	call	8344 <btc_realloc>
   40c98:	e0bffd15 	stw	r2,-12(fp)
    if (!new_data)
   40c9c:	e0bffd17 	ldw	r2,-12(fp)
   40ca0:	1000021e 	bne	r2,zero,40cac <vector_grow+0x8c>
        return false;
   40ca4:	0005883a 	mov	r2,zero
   40ca8:	00000706 	br	40cc8 <vector_grow+0xa8>

    vec->data = new_data;
   40cac:	e0bffe17 	ldw	r2,-8(fp)
   40cb0:	e0fffd17 	ldw	r3,-12(fp)
   40cb4:	10c00015 	stw	r3,0(r2)
    vec->alloc = new_alloc;
   40cb8:	e0bffe17 	ldw	r2,-8(fp)
   40cbc:	e0fffc17 	ldw	r3,-16(fp)
   40cc0:	10c00215 	stw	r3,8(r2)
    return true;
   40cc4:	00800044 	movi	r2,1
}
   40cc8:	e037883a 	mov	sp,fp
   40ccc:	dfc00117 	ldw	ra,4(sp)
   40cd0:	df000017 	ldw	fp,0(sp)
   40cd4:	dec00204 	addi	sp,sp,8
   40cd8:	f800283a 	ret

00040cdc <vector_find>:

ssize_t vector_find(vector* vec, void* data)
{
   40cdc:	defffc04 	addi	sp,sp,-16
   40ce0:	df000315 	stw	fp,12(sp)
   40ce4:	df000304 	addi	fp,sp,12
   40ce8:	e13ffe15 	stw	r4,-8(fp)
   40cec:	e17fff15 	stw	r5,-4(fp)
    if (vec && vec->len) {
   40cf0:	e0bffe17 	ldw	r2,-8(fp)
   40cf4:	10001726 	beq	r2,zero,40d54 <vector_find+0x78>
   40cf8:	e0bffe17 	ldw	r2,-8(fp)
   40cfc:	10800117 	ldw	r2,4(r2)
   40d00:	10001426 	beq	r2,zero,40d54 <vector_find+0x78>
        size_t i;
        for (i = 0; i < vec->len; i++)
   40d04:	e03ffd15 	stw	zero,-12(fp)
   40d08:	00000e06 	br	40d44 <vector_find+0x68>
            if (vec->data[i] == data)
   40d0c:	e0bffe17 	ldw	r2,-8(fp)
   40d10:	10c00017 	ldw	r3,0(r2)
   40d14:	e0bffd17 	ldw	r2,-12(fp)
   40d18:	1085883a 	add	r2,r2,r2
   40d1c:	1085883a 	add	r2,r2,r2
   40d20:	1885883a 	add	r2,r3,r2
   40d24:	10c00017 	ldw	r3,0(r2)
   40d28:	e0bfff17 	ldw	r2,-4(fp)
   40d2c:	1880021e 	bne	r3,r2,40d38 <vector_find+0x5c>
                return (ssize_t)i;
   40d30:	e0bffd17 	ldw	r2,-12(fp)
   40d34:	00000806 	br	40d58 <vector_find+0x7c>

ssize_t vector_find(vector* vec, void* data)
{
    if (vec && vec->len) {
        size_t i;
        for (i = 0; i < vec->len; i++)
   40d38:	e0bffd17 	ldw	r2,-12(fp)
   40d3c:	10800044 	addi	r2,r2,1
   40d40:	e0bffd15 	stw	r2,-12(fp)
   40d44:	e0bffe17 	ldw	r2,-8(fp)
   40d48:	10800117 	ldw	r2,4(r2)
   40d4c:	e0fffd17 	ldw	r3,-12(fp)
   40d50:	18bfee36 	bltu	r3,r2,40d0c <__alt_mem_epcs_flash_controller+0xfe037d0c>
            if (vec->data[i] == data)
                return (ssize_t)i;
    }

    return -1;
   40d54:	00bfffc4 	movi	r2,-1
}
   40d58:	e037883a 	mov	sp,fp
   40d5c:	df000017 	ldw	fp,0(sp)
   40d60:	dec00104 	addi	sp,sp,4
   40d64:	f800283a 	ret

00040d68 <vector_add>:

btc_bool vector_add(vector* vec, void* data)
{
   40d68:	defffc04 	addi	sp,sp,-16
   40d6c:	dfc00315 	stw	ra,12(sp)
   40d70:	df000215 	stw	fp,8(sp)
   40d74:	df000204 	addi	fp,sp,8
   40d78:	e13ffe15 	stw	r4,-8(fp)
   40d7c:	e17fff15 	stw	r5,-4(fp)
    if (vec->len == vec->alloc)
   40d80:	e0bffe17 	ldw	r2,-8(fp)
   40d84:	10c00117 	ldw	r3,4(r2)
   40d88:	e0bffe17 	ldw	r2,-8(fp)
   40d8c:	10800217 	ldw	r2,8(r2)
   40d90:	18800a1e 	bne	r3,r2,40dbc <vector_add+0x54>
        if (!vector_grow(vec, vec->len + 1))
   40d94:	e0bffe17 	ldw	r2,-8(fp)
   40d98:	10800117 	ldw	r2,4(r2)
   40d9c:	10800044 	addi	r2,r2,1
   40da0:	100b883a 	mov	r5,r2
   40da4:	e13ffe17 	ldw	r4,-8(fp)
   40da8:	0040c200 	call	40c20 <vector_grow>
   40dac:	10803fcc 	andi	r2,r2,255
   40db0:	1000021e 	bne	r2,zero,40dbc <vector_add+0x54>
            return false;
   40db4:	0005883a 	mov	r2,zero
   40db8:	00000f06 	br	40df8 <vector_add+0x90>

    vec->data[vec->len] = data;
   40dbc:	e0bffe17 	ldw	r2,-8(fp)
   40dc0:	10c00017 	ldw	r3,0(r2)
   40dc4:	e0bffe17 	ldw	r2,-8(fp)
   40dc8:	10800117 	ldw	r2,4(r2)
   40dcc:	1085883a 	add	r2,r2,r2
   40dd0:	1085883a 	add	r2,r2,r2
   40dd4:	1885883a 	add	r2,r3,r2
   40dd8:	e0ffff17 	ldw	r3,-4(fp)
   40ddc:	10c00015 	stw	r3,0(r2)
    vec->len++;
   40de0:	e0bffe17 	ldw	r2,-8(fp)
   40de4:	10800117 	ldw	r2,4(r2)
   40de8:	10c00044 	addi	r3,r2,1
   40dec:	e0bffe17 	ldw	r2,-8(fp)
   40df0:	10c00115 	stw	r3,4(r2)
    return true;
   40df4:	00800044 	movi	r2,1
}
   40df8:	e037883a 	mov	sp,fp
   40dfc:	dfc00117 	ldw	ra,4(sp)
   40e00:	df000017 	ldw	fp,0(sp)
   40e04:	dec00204 	addi	sp,sp,8
   40e08:	f800283a 	ret

00040e0c <vector_remove_range>:

void vector_remove_range(vector* vec, size_t pos, size_t len)
{
   40e0c:	defff904 	addi	sp,sp,-28
   40e10:	dfc00615 	stw	ra,24(sp)
   40e14:	df000515 	stw	fp,20(sp)
   40e18:	df000504 	addi	fp,sp,20
   40e1c:	e13ffd15 	stw	r4,-12(fp)
   40e20:	e17ffe15 	stw	r5,-8(fp)
   40e24:	e1bfff15 	stw	r6,-4(fp)
    if (!vec || ((pos + len) > vec->len))
   40e28:	e0bffd17 	ldw	r2,-12(fp)
   40e2c:	10004226 	beq	r2,zero,40f38 <vector_remove_range+0x12c>
   40e30:	e0fffe17 	ldw	r3,-8(fp)
   40e34:	e0bfff17 	ldw	r2,-4(fp)
   40e38:	1885883a 	add	r2,r3,r2
   40e3c:	e0fffd17 	ldw	r3,-12(fp)
   40e40:	18c00117 	ldw	r3,4(r3)
   40e44:	18803c36 	bltu	r3,r2,40f38 <vector_remove_range+0x12c>
        return;

    if (vec->elem_free_f) {
   40e48:	e0bffd17 	ldw	r2,-12(fp)
   40e4c:	10800317 	ldw	r2,12(r2)
   40e50:	10001826 	beq	r2,zero,40eb4 <vector_remove_range+0xa8>
        unsigned int i, count;
        for (i = pos, count = 0; count < len; i++, count++)
   40e54:	e0bffe17 	ldw	r2,-8(fp)
   40e58:	e0bffb15 	stw	r2,-20(fp)
   40e5c:	e03ffc15 	stw	zero,-16(fp)
   40e60:	00001106 	br	40ea8 <vector_remove_range+0x9c>
            vec->elem_free_f(vec->data[i]);
   40e64:	e0bffd17 	ldw	r2,-12(fp)
   40e68:	10c00317 	ldw	r3,12(r2)
   40e6c:	e0bffd17 	ldw	r2,-12(fp)
   40e70:	11000017 	ldw	r4,0(r2)
   40e74:	e0bffb17 	ldw	r2,-20(fp)
   40e78:	1085883a 	add	r2,r2,r2
   40e7c:	1085883a 	add	r2,r2,r2
   40e80:	2085883a 	add	r2,r4,r2
   40e84:	10800017 	ldw	r2,0(r2)
   40e88:	1009883a 	mov	r4,r2
   40e8c:	183ee83a 	callr	r3
    if (!vec || ((pos + len) > vec->len))
        return;

    if (vec->elem_free_f) {
        unsigned int i, count;
        for (i = pos, count = 0; count < len; i++, count++)
   40e90:	e0bffb17 	ldw	r2,-20(fp)
   40e94:	10800044 	addi	r2,r2,1
   40e98:	e0bffb15 	stw	r2,-20(fp)
   40e9c:	e0bffc17 	ldw	r2,-16(fp)
   40ea0:	10800044 	addi	r2,r2,1
   40ea4:	e0bffc15 	stw	r2,-16(fp)
   40ea8:	e0fffc17 	ldw	r3,-16(fp)
   40eac:	e0bfff17 	ldw	r2,-4(fp)
   40eb0:	18bfec36 	bltu	r3,r2,40e64 <__alt_mem_epcs_flash_controller+0xfe037e64>
            vec->elem_free_f(vec->data[i]);
    }

    memmove(&vec->data[pos], &vec->data[pos + len], (vec->len - pos - len) * sizeof(void*));
   40eb4:	e0bffd17 	ldw	r2,-12(fp)
   40eb8:	10c00017 	ldw	r3,0(r2)
   40ebc:	e0bffe17 	ldw	r2,-8(fp)
   40ec0:	1085883a 	add	r2,r2,r2
   40ec4:	1085883a 	add	r2,r2,r2
   40ec8:	188f883a 	add	r7,r3,r2
   40ecc:	e0bffd17 	ldw	r2,-12(fp)
   40ed0:	10c00017 	ldw	r3,0(r2)
   40ed4:	e13ffe17 	ldw	r4,-8(fp)
   40ed8:	e0bfff17 	ldw	r2,-4(fp)
   40edc:	2085883a 	add	r2,r4,r2
   40ee0:	1085883a 	add	r2,r2,r2
   40ee4:	1085883a 	add	r2,r2,r2
   40ee8:	1889883a 	add	r4,r3,r2
   40eec:	e0bffd17 	ldw	r2,-12(fp)
   40ef0:	10c00117 	ldw	r3,4(r2)
   40ef4:	e0bffe17 	ldw	r2,-8(fp)
   40ef8:	1887c83a 	sub	r3,r3,r2
   40efc:	e0bfff17 	ldw	r2,-4(fp)
   40f00:	1885c83a 	sub	r2,r3,r2
   40f04:	1085883a 	add	r2,r2,r2
   40f08:	1085883a 	add	r2,r2,r2
   40f0c:	100d883a 	mov	r6,r2
   40f10:	200b883a 	mov	r5,r4
   40f14:	3809883a 	mov	r4,r7
   40f18:	00463c00 	call	463c0 <memmove>
    vec->len -= len;
   40f1c:	e0bffd17 	ldw	r2,-12(fp)
   40f20:	10c00117 	ldw	r3,4(r2)
   40f24:	e0bfff17 	ldw	r2,-4(fp)
   40f28:	1887c83a 	sub	r3,r3,r2
   40f2c:	e0bffd17 	ldw	r2,-12(fp)
   40f30:	10c00115 	stw	r3,4(r2)
   40f34:	00000106 	br	40f3c <vector_remove_range+0x130>
}

void vector_remove_range(vector* vec, size_t pos, size_t len)
{
    if (!vec || ((pos + len) > vec->len))
        return;
   40f38:	0001883a 	nop
            vec->elem_free_f(vec->data[i]);
    }

    memmove(&vec->data[pos], &vec->data[pos + len], (vec->len - pos - len) * sizeof(void*));
    vec->len -= len;
}
   40f3c:	e037883a 	mov	sp,fp
   40f40:	dfc00117 	ldw	ra,4(sp)
   40f44:	df000017 	ldw	fp,0(sp)
   40f48:	dec00204 	addi	sp,sp,8
   40f4c:	f800283a 	ret

00040f50 <vector_remove_idx>:

void vector_remove_idx(vector* vec, size_t pos)
{
   40f50:	defffc04 	addi	sp,sp,-16
   40f54:	dfc00315 	stw	ra,12(sp)
   40f58:	df000215 	stw	fp,8(sp)
   40f5c:	df000204 	addi	fp,sp,8
   40f60:	e13ffe15 	stw	r4,-8(fp)
   40f64:	e17fff15 	stw	r5,-4(fp)
    vector_remove_range(vec, pos, 1);
   40f68:	01800044 	movi	r6,1
   40f6c:	e17fff17 	ldw	r5,-4(fp)
   40f70:	e13ffe17 	ldw	r4,-8(fp)
   40f74:	0040e0c0 	call	40e0c <vector_remove_range>
}
   40f78:	0001883a 	nop
   40f7c:	e037883a 	mov	sp,fp
   40f80:	dfc00117 	ldw	ra,4(sp)
   40f84:	df000017 	ldw	fp,0(sp)
   40f88:	dec00204 	addi	sp,sp,8
   40f8c:	f800283a 	ret

00040f90 <vector_remove>:

btc_bool vector_remove(vector* vec, void* data)
{
   40f90:	defffb04 	addi	sp,sp,-20
   40f94:	dfc00415 	stw	ra,16(sp)
   40f98:	df000315 	stw	fp,12(sp)
   40f9c:	df000304 	addi	fp,sp,12
   40fa0:	e13ffe15 	stw	r4,-8(fp)
   40fa4:	e17fff15 	stw	r5,-4(fp)
    ssize_t idx = vector_find(vec, data);
   40fa8:	e17fff17 	ldw	r5,-4(fp)
   40fac:	e13ffe17 	ldw	r4,-8(fp)
   40fb0:	0040cdc0 	call	40cdc <vector_find>
   40fb4:	e0bffd15 	stw	r2,-12(fp)
    if (idx < 0)
   40fb8:	e0bffd17 	ldw	r2,-12(fp)
   40fbc:	1000020e 	bge	r2,zero,40fc8 <vector_remove+0x38>
        return false;
   40fc0:	0005883a 	mov	r2,zero
   40fc4:	00000506 	br	40fdc <vector_remove+0x4c>

    vector_remove_idx(vec, idx);
   40fc8:	e0bffd17 	ldw	r2,-12(fp)
   40fcc:	100b883a 	mov	r5,r2
   40fd0:	e13ffe17 	ldw	r4,-8(fp)
   40fd4:	0040f500 	call	40f50 <vector_remove_idx>
    return true;
   40fd8:	00800044 	movi	r2,1
}
   40fdc:	e037883a 	mov	sp,fp
   40fe0:	dfc00117 	ldw	ra,4(sp)
   40fe4:	df000017 	ldw	fp,0(sp)
   40fe8:	dec00204 	addi	sp,sp,8
   40fec:	f800283a 	ret

00040ff0 <vector_resize>:

btc_bool vector_resize(vector* vec, size_t newsz)
{
   40ff0:	defffa04 	addi	sp,sp,-24
   40ff4:	dfc00515 	stw	ra,20(sp)
   40ff8:	df000415 	stw	fp,16(sp)
   40ffc:	df000404 	addi	fp,sp,16
   41000:	e13ffe15 	stw	r4,-8(fp)
   41004:	e17fff15 	stw	r5,-4(fp)
    unsigned int i;

    /* same size */
    if (newsz == vec->len)
   41008:	e0bffe17 	ldw	r2,-8(fp)
   4100c:	10c00117 	ldw	r3,4(r2)
   41010:	e0bfff17 	ldw	r2,-4(fp)
   41014:	1880021e 	bne	r3,r2,41020 <vector_resize+0x30>
        return true;
   41018:	00800044 	movi	r2,1
   4101c:	00004906 	br	41144 <vector_resize+0x154>

    /* truncate */
    else if (newsz < vec->len) {
   41020:	e0bffe17 	ldw	r2,-8(fp)
   41024:	10800117 	ldw	r2,4(r2)
   41028:	e0ffff17 	ldw	r3,-4(fp)
   4102c:	18802c2e 	bgeu	r3,r2,410e0 <vector_resize+0xf0>
        size_t del_count = vec->len - newsz;
   41030:	e0bffe17 	ldw	r2,-8(fp)
   41034:	10c00117 	ldw	r3,4(r2)
   41038:	e0bfff17 	ldw	r2,-4(fp)
   4103c:	1885c83a 	sub	r2,r3,r2
   41040:	e0bffd15 	stw	r2,-12(fp)

        for (i = (vec->len - del_count); i < vec->len; i++) {
   41044:	e0bffe17 	ldw	r2,-8(fp)
   41048:	10c00117 	ldw	r3,4(r2)
   4104c:	e0bffd17 	ldw	r2,-12(fp)
   41050:	1885c83a 	sub	r2,r3,r2
   41054:	e0bffc15 	stw	r2,-16(fp)
   41058:	00001806 	br	410bc <vector_resize+0xcc>
            if (vec->elem_free_f)
   4105c:	e0bffe17 	ldw	r2,-8(fp)
   41060:	10800317 	ldw	r2,12(r2)
   41064:	10000b26 	beq	r2,zero,41094 <vector_resize+0xa4>
                vec->elem_free_f(vec->data[i]);
   41068:	e0bffe17 	ldw	r2,-8(fp)
   4106c:	10c00317 	ldw	r3,12(r2)
   41070:	e0bffe17 	ldw	r2,-8(fp)
   41074:	11000017 	ldw	r4,0(r2)
   41078:	e0bffc17 	ldw	r2,-16(fp)
   4107c:	1085883a 	add	r2,r2,r2
   41080:	1085883a 	add	r2,r2,r2
   41084:	2085883a 	add	r2,r4,r2
   41088:	10800017 	ldw	r2,0(r2)
   4108c:	1009883a 	mov	r4,r2
   41090:	183ee83a 	callr	r3
            vec->data[i] = NULL;
   41094:	e0bffe17 	ldw	r2,-8(fp)
   41098:	10c00017 	ldw	r3,0(r2)
   4109c:	e0bffc17 	ldw	r2,-16(fp)
   410a0:	1085883a 	add	r2,r2,r2
   410a4:	1085883a 	add	r2,r2,r2
   410a8:	1885883a 	add	r2,r3,r2
   410ac:	10000015 	stw	zero,0(r2)

    /* truncate */
    else if (newsz < vec->len) {
        size_t del_count = vec->len - newsz;

        for (i = (vec->len - del_count); i < vec->len; i++) {
   410b0:	e0bffc17 	ldw	r2,-16(fp)
   410b4:	10800044 	addi	r2,r2,1
   410b8:	e0bffc15 	stw	r2,-16(fp)
   410bc:	e0bffe17 	ldw	r2,-8(fp)
   410c0:	10800117 	ldw	r2,4(r2)
   410c4:	e0fffc17 	ldw	r3,-16(fp)
   410c8:	18bfe436 	bltu	r3,r2,4105c <__alt_mem_epcs_flash_controller+0xfe03805c>
            if (vec->elem_free_f)
                vec->elem_free_f(vec->data[i]);
            vec->data[i] = NULL;
        }

        vec->len = newsz;
   410cc:	e0bffe17 	ldw	r2,-8(fp)
   410d0:	e0ffff17 	ldw	r3,-4(fp)
   410d4:	10c00115 	stw	r3,4(r2)
        return true;
   410d8:	00800044 	movi	r2,1
   410dc:	00001906 	br	41144 <vector_resize+0x154>
    }

    /* last possibility: grow */
    if (!vector_grow(vec, newsz))
   410e0:	e17fff17 	ldw	r5,-4(fp)
   410e4:	e13ffe17 	ldw	r4,-8(fp)
   410e8:	0040c200 	call	40c20 <vector_grow>
   410ec:	10803fcc 	andi	r2,r2,255
   410f0:	1000021e 	bne	r2,zero,410fc <vector_resize+0x10c>
        return false;
   410f4:	0005883a 	mov	r2,zero
   410f8:	00001206 	br	41144 <vector_resize+0x154>

    /* set new elements to NULL */
    for (i = vec->len; i < newsz; i++)
   410fc:	e0bffe17 	ldw	r2,-8(fp)
   41100:	10800117 	ldw	r2,4(r2)
   41104:	e0bffc15 	stw	r2,-16(fp)
   41108:	00000a06 	br	41134 <vector_resize+0x144>
        vec->data[i] = NULL;
   4110c:	e0bffe17 	ldw	r2,-8(fp)
   41110:	10c00017 	ldw	r3,0(r2)
   41114:	e0bffc17 	ldw	r2,-16(fp)
   41118:	1085883a 	add	r2,r2,r2
   4111c:	1085883a 	add	r2,r2,r2
   41120:	1885883a 	add	r2,r3,r2
   41124:	10000015 	stw	zero,0(r2)
    /* last possibility: grow */
    if (!vector_grow(vec, newsz))
        return false;

    /* set new elements to NULL */
    for (i = vec->len; i < newsz; i++)
   41128:	e0bffc17 	ldw	r2,-16(fp)
   4112c:	10800044 	addi	r2,r2,1
   41130:	e0bffc15 	stw	r2,-16(fp)
   41134:	e0fffc17 	ldw	r3,-16(fp)
   41138:	e0bfff17 	ldw	r2,-4(fp)
   4113c:	18bff336 	bltu	r3,r2,4110c <__alt_mem_epcs_flash_controller+0xfe03810c>
        vec->data[i] = NULL;

    return true;
   41140:	00800044 	movi	r2,1
}
   41144:	e037883a 	mov	sp,fp
   41148:	dfc00117 	ldw	ra,4(sp)
   4114c:	df000017 	ldw	fp,0(sp)
   41150:	dec00204 	addi	sp,sp,8
   41154:	f800283a 	ret

00041158 <btc_base58_decode>:
    -1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46,
    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, -1, -1, -1, -1, -1,
};

int btc_base58_decode(void* bin, size_t* binszp, const char* b58)
{
   41158:	deffe304 	addi	sp,sp,-116
   4115c:	dfc01c15 	stw	ra,112(sp)
   41160:	df001b15 	stw	fp,108(sp)
   41164:	ddc01a15 	stw	r23,104(sp)
   41168:	dd801915 	stw	r22,100(sp)
   4116c:	dd401815 	stw	r21,96(sp)
   41170:	dd001715 	stw	r20,92(sp)
   41174:	dcc01615 	stw	r19,88(sp)
   41178:	dc801515 	stw	r18,84(sp)
   4117c:	dc401415 	stw	r17,80(sp)
   41180:	dc001315 	stw	r16,76(sp)
   41184:	df001b04 	addi	fp,sp,108
   41188:	e13ff415 	stw	r4,-48(fp)
   4118c:	e17ff515 	stw	r5,-44(fp)
   41190:	e1bff615 	stw	r6,-40(fp)
   41194:	d809883a 	mov	r4,sp
   41198:	e13ff715 	stw	r4,-36(fp)
    size_t binsz = *binszp;
   4119c:	e13ff517 	ldw	r4,-44(fp)
   411a0:	21000017 	ldw	r4,0(r4)
   411a4:	e13fea15 	stw	r4,-88(fp)
    const unsigned char* b58u = (const void*)b58;
   411a8:	e13ff617 	ldw	r4,-40(fp)
   411ac:	e13feb15 	stw	r4,-84(fp)
    unsigned char* binu = bin;
   411b0:	e13ff417 	ldw	r4,-48(fp)
   411b4:	e13fe515 	stw	r4,-108(fp)
    size_t outisz = (binsz + 3) / 4;
   411b8:	e13fea17 	ldw	r4,-88(fp)
   411bc:	210000c4 	addi	r4,r4,3
   411c0:	2008d0ba 	srli	r4,r4,2
   411c4:	e13fec15 	stw	r4,-80(fp)
    uint32_t outi[outisz];
   411c8:	e13fec17 	ldw	r4,-80(fp)
   411cc:	200b883a 	mov	r5,r4
   411d0:	297fffc4 	addi	r5,r5,-1
   411d4:	e17fed15 	stw	r5,-76(fp)
   411d8:	2017883a 	mov	r11,r4
   411dc:	0019883a 	mov	r12,zero
   411e0:	580ad6fa 	srli	r5,r11,27
   411e4:	6010917a 	slli	r8,r12,5
   411e8:	2a10b03a 	or	r8,r5,r8
   411ec:	580e917a 	slli	r7,r11,5
   411f0:	2013883a 	mov	r9,r4
   411f4:	0015883a 	mov	r10,zero
   411f8:	480ad6fa 	srli	r5,r9,27
   411fc:	5006917a 	slli	r3,r10,5
   41200:	28c6b03a 	or	r3,r5,r3
   41204:	4804917a 	slli	r2,r9,5
   41208:	2105883a 	add	r2,r4,r4
   4120c:	1085883a 	add	r2,r2,r2
   41210:	108000c4 	addi	r2,r2,3
   41214:	108000c4 	addi	r2,r2,3
   41218:	1004d0ba 	srli	r2,r2,2
   4121c:	1085883a 	add	r2,r2,r2
   41220:	1085883a 	add	r2,r2,r2
   41224:	d8b7c83a 	sub	sp,sp,r2
   41228:	d805883a 	mov	r2,sp
   4122c:	108000c4 	addi	r2,r2,3
   41230:	1004d0ba 	srli	r2,r2,2
   41234:	1085883a 	add	r2,r2,r2
   41238:	1085883a 	add	r2,r2,r2
   4123c:	e0bfee15 	stw	r2,-72(fp)
    uint64_t t;
    uint32_t c;
    size_t i, j;
    uint8_t bytesleft = binsz % 4;
   41240:	e0bfea17 	ldw	r2,-88(fp)
   41244:	108000cc 	andi	r2,r2,3
   41248:	e0bfef05 	stb	r2,-68(fp)
    uint32_t zeromask = bytesleft ? (0xffffffff << (bytesleft * 8)) : 0;
   4124c:	e0bfef03 	ldbu	r2,-68(fp)
   41250:	10000526 	beq	r2,zero,41268 <btc_base58_decode+0x110>
   41254:	e0bfef03 	ldbu	r2,-68(fp)
   41258:	100490fa 	slli	r2,r2,3
   4125c:	00ffffc4 	movi	r3,-1
   41260:	1884983a 	sll	r2,r3,r2
   41264:	00000106 	br	4126c <btc_base58_decode+0x114>
   41268:	0005883a 	mov	r2,zero
   4126c:	e0bff015 	stw	r2,-64(fp)
    unsigned zerocount = 0;
   41270:	e03fe915 	stw	zero,-92(fp)
    size_t b58sz;

    b58sz = strlen(b58);
   41274:	e13ff617 	ldw	r4,-40(fp)
   41278:	0046c3c0 	call	46c3c <strlen>
   4127c:	e0bff115 	stw	r2,-60(fp)

    memset(outi, 0, outisz * sizeof(*outi));
   41280:	e0ffee17 	ldw	r3,-72(fp)
   41284:	e0bfec17 	ldw	r2,-80(fp)
   41288:	1085883a 	add	r2,r2,r2
   4128c:	1085883a 	add	r2,r2,r2
   41290:	100d883a 	mov	r6,r2
   41294:	000b883a 	mov	r5,zero
   41298:	1809883a 	mov	r4,r3
   4129c:	00464200 	call	46420 <memset>

    // Leading zeros, just count
    for (i = 0; i < b58sz && !b58digits_map[b58u[i]]; ++i) {
   412a0:	e03fe715 	stw	zero,-100(fp)
   412a4:	00000606 	br	412c0 <btc_base58_decode+0x168>
        ++zerocount;
   412a8:	e0bfe917 	ldw	r2,-92(fp)
   412ac:	10800044 	addi	r2,r2,1
   412b0:	e0bfe915 	stw	r2,-92(fp)
    b58sz = strlen(b58);

    memset(outi, 0, outisz * sizeof(*outi));

    // Leading zeros, just count
    for (i = 0; i < b58sz && !b58digits_map[b58u[i]]; ++i) {
   412b4:	e0bfe717 	ldw	r2,-100(fp)
   412b8:	10800044 	addi	r2,r2,1
   412bc:	e0bfe715 	stw	r2,-100(fp)
   412c0:	e0ffe717 	ldw	r3,-100(fp)
   412c4:	e0bff117 	ldw	r2,-60(fp)
   412c8:	1880832e 	bgeu	r3,r2,414d8 <btc_base58_decode+0x380>
   412cc:	e0ffeb17 	ldw	r3,-84(fp)
   412d0:	e0bfe717 	ldw	r2,-100(fp)
   412d4:	1885883a 	add	r2,r3,r2
   412d8:	10800003 	ldbu	r2,0(r2)
   412dc:	10c03fcc 	andi	r3,r2,255
   412e0:	00800174 	movhi	r2,5
   412e4:	109a2f04 	addi	r2,r2,26812
   412e8:	10c5883a 	add	r2,r2,r3
   412ec:	10800003 	ldbu	r2,0(r2)
   412f0:	10803fcc 	andi	r2,r2,255
   412f4:	1080201c 	xori	r2,r2,128
   412f8:	10bfe004 	addi	r2,r2,-128
   412fc:	103fea26 	beq	r2,zero,412a8 <__alt_mem_epcs_flash_controller+0xfe0382a8>
        ++zerocount;
    }

    for (; i < b58sz; ++i) {
   41300:	00007506 	br	414d8 <btc_base58_decode+0x380>
        if (b58u[i] & 0x80) {
   41304:	e0ffeb17 	ldw	r3,-84(fp)
   41308:	e0bfe717 	ldw	r2,-100(fp)
   4130c:	1885883a 	add	r2,r3,r2
   41310:	10800003 	ldbu	r2,0(r2)
   41314:	10803fcc 	andi	r2,r2,255
   41318:	1080201c 	xori	r2,r2,128
   4131c:	10bfe004 	addi	r2,r2,-128
   41320:	1000020e 	bge	r2,zero,4132c <btc_base58_decode+0x1d4>
            // High-bit set on invalid digit
            return false;
   41324:	0005883a 	mov	r2,zero
   41328:	0000e906 	br	416d0 <btc_base58_decode+0x578>
        }
        if (b58digits_map[b58u[i]] == -1) {
   4132c:	e0ffeb17 	ldw	r3,-84(fp)
   41330:	e0bfe717 	ldw	r2,-100(fp)
   41334:	1885883a 	add	r2,r3,r2
   41338:	10800003 	ldbu	r2,0(r2)
   4133c:	10c03fcc 	andi	r3,r2,255
   41340:	00800174 	movhi	r2,5
   41344:	109a2f04 	addi	r2,r2,26812
   41348:	10c5883a 	add	r2,r2,r3
   4134c:	10800003 	ldbu	r2,0(r2)
   41350:	10803fcc 	andi	r2,r2,255
   41354:	1080201c 	xori	r2,r2,128
   41358:	10bfe004 	addi	r2,r2,-128
   4135c:	10bfffd8 	cmpnei	r2,r2,-1
   41360:	1000021e 	bne	r2,zero,4136c <btc_base58_decode+0x214>
            // Invalid base58 digit
            return false;
   41364:	0005883a 	mov	r2,zero
   41368:	0000d906 	br	416d0 <btc_base58_decode+0x578>
        }
        c = (unsigned)b58digits_map[b58u[i]];
   4136c:	e0ffeb17 	ldw	r3,-84(fp)
   41370:	e0bfe717 	ldw	r2,-100(fp)
   41374:	1885883a 	add	r2,r3,r2
   41378:	10800003 	ldbu	r2,0(r2)
   4137c:	10c03fcc 	andi	r3,r2,255
   41380:	00800174 	movhi	r2,5
   41384:	109a2f04 	addi	r2,r2,26812
   41388:	10c5883a 	add	r2,r2,r3
   4138c:	10800003 	ldbu	r2,0(r2)
   41390:	10803fcc 	andi	r2,r2,255
   41394:	1080201c 	xori	r2,r2,128
   41398:	10bfe004 	addi	r2,r2,-128
   4139c:	e0bfe615 	stw	r2,-104(fp)
        for (j = outisz; j--;) {
   413a0:	e0bfec17 	ldw	r2,-80(fp)
   413a4:	e0bfe815 	stw	r2,-96(fp)
   413a8:	00002906 	br	41450 <btc_base58_decode+0x2f8>
            t = ((uint64_t)outi[j]) * 58 + c;
   413ac:	e0ffee17 	ldw	r3,-72(fp)
   413b0:	e0bfe817 	ldw	r2,-96(fp)
   413b4:	1085883a 	add	r2,r2,r2
   413b8:	1085883a 	add	r2,r2,r2
   413bc:	1885883a 	add	r2,r3,r2
   413c0:	10800017 	ldw	r2,0(r2)
   413c4:	102d883a 	mov	r22,r2
   413c8:	002f883a 	mov	r23,zero
   413cc:	01800e84 	movi	r6,58
   413d0:	000f883a 	mov	r7,zero
   413d4:	b009883a 	mov	r4,r22
   413d8:	b80b883a 	mov	r5,r23
   413dc:	00438e00 	call	438e0 <__muldi3>
   413e0:	100d883a 	mov	r6,r2
   413e4:	180f883a 	mov	r7,r3
   413e8:	3009883a 	mov	r4,r6
   413ec:	380b883a 	mov	r5,r7
   413f0:	e0bfe617 	ldw	r2,-104(fp)
   413f4:	1021883a 	mov	r16,r2
   413f8:	0023883a 	mov	r17,zero
   413fc:	2405883a 	add	r2,r4,r16
   41400:	110d803a 	cmpltu	r6,r2,r4
   41404:	2c47883a 	add	r3,r5,r17
   41408:	30c9883a 	add	r4,r6,r3
   4140c:	2007883a 	mov	r3,r4
   41410:	e0bff215 	stw	r2,-56(fp)
   41414:	e0fff315 	stw	r3,-52(fp)
            c = (t & 0x3f00000000) >> 32;
   41418:	e0bff217 	ldw	r2,-56(fp)
   4141c:	1024703a 	and	r18,r2,zero
   41420:	e0bff317 	ldw	r2,-52(fp)
   41424:	14c00fcc 	andi	r19,r2,63
   41428:	9828d83a 	srl	r20,r19,zero
   4142c:	002b883a 	mov	r21,zero
   41430:	e53fe615 	stw	r20,-104(fp)
            outi[j] = t & 0xffffffff;
   41434:	e0fff217 	ldw	r3,-56(fp)
   41438:	e13fee17 	ldw	r4,-72(fp)
   4143c:	e0bfe817 	ldw	r2,-96(fp)
   41440:	1085883a 	add	r2,r2,r2
   41444:	1085883a 	add	r2,r2,r2
   41448:	2085883a 	add	r2,r4,r2
   4144c:	10c00015 	stw	r3,0(r2)
        if (b58digits_map[b58u[i]] == -1) {
            // Invalid base58 digit
            return false;
        }
        c = (unsigned)b58digits_map[b58u[i]];
        for (j = outisz; j--;) {
   41450:	e0bfe817 	ldw	r2,-96(fp)
   41454:	10ffffc4 	addi	r3,r2,-1
   41458:	e0ffe815 	stw	r3,-96(fp)
   4145c:	103fd31e 	bne	r2,zero,413ac <__alt_mem_epcs_flash_controller+0xfe0383ac>
            t = ((uint64_t)outi[j]) * 58 + c;
            c = (t & 0x3f00000000) >> 32;
            outi[j] = t & 0xffffffff;
        }
        if (c) {
   41460:	e0bfe617 	ldw	r2,-104(fp)
   41464:	10000a26 	beq	r2,zero,41490 <btc_base58_decode+0x338>
            // Output number too big (carry to the next int32)
            memset(outi, 0, outisz * sizeof(*outi));
   41468:	e0ffee17 	ldw	r3,-72(fp)
   4146c:	e0bfec17 	ldw	r2,-80(fp)
   41470:	1085883a 	add	r2,r2,r2
   41474:	1085883a 	add	r2,r2,r2
   41478:	100d883a 	mov	r6,r2
   4147c:	000b883a 	mov	r5,zero
   41480:	1809883a 	mov	r4,r3
   41484:	00464200 	call	46420 <memset>
            return false;
   41488:	0005883a 	mov	r2,zero
   4148c:	00009006 	br	416d0 <btc_base58_decode+0x578>
        }
        if (outi[0] & zeromask) {
   41490:	e0bfee17 	ldw	r2,-72(fp)
   41494:	10c00017 	ldw	r3,0(r2)
   41498:	e0bff017 	ldw	r2,-64(fp)
   4149c:	1884703a 	and	r2,r3,r2
   414a0:	10000a26 	beq	r2,zero,414cc <btc_base58_decode+0x374>
            // Output number too big (last int32 filled too far)
            memset(outi, 0, outisz * sizeof(*outi));
   414a4:	e0ffee17 	ldw	r3,-72(fp)
   414a8:	e0bfec17 	ldw	r2,-80(fp)
   414ac:	1085883a 	add	r2,r2,r2
   414b0:	1085883a 	add	r2,r2,r2
   414b4:	100d883a 	mov	r6,r2
   414b8:	000b883a 	mov	r5,zero
   414bc:	1809883a 	mov	r4,r3
   414c0:	00464200 	call	46420 <memset>
            return false;
   414c4:	0005883a 	mov	r2,zero
   414c8:	00008106 	br	416d0 <btc_base58_decode+0x578>
    // Leading zeros, just count
    for (i = 0; i < b58sz && !b58digits_map[b58u[i]]; ++i) {
        ++zerocount;
    }

    for (; i < b58sz; ++i) {
   414cc:	e0bfe717 	ldw	r2,-100(fp)
   414d0:	10800044 	addi	r2,r2,1
   414d4:	e0bfe715 	stw	r2,-100(fp)
   414d8:	e0ffe717 	ldw	r3,-100(fp)
   414dc:	e0bff117 	ldw	r2,-60(fp)
   414e0:	18bf8836 	bltu	r3,r2,41304 <__alt_mem_epcs_flash_controller+0xfe038304>
            memset(outi, 0, outisz * sizeof(*outi));
            return false;
        }
    }

    j = 0;
   414e4:	e03fe815 	stw	zero,-96(fp)
    switch (bytesleft) {
   414e8:	e0bfef03 	ldbu	r2,-68(fp)
   414ec:	10c000a0 	cmpeqi	r3,r2,2
   414f0:	18000d1e 	bne	r3,zero,41528 <btc_base58_decode+0x3d0>
   414f4:	10c000e0 	cmpeqi	r3,r2,3
   414f8:	1800031e 	bne	r3,zero,41508 <btc_base58_decode+0x3b0>
   414fc:	10800060 	cmpeqi	r2,r2,1
   41500:	1000111e 	bne	r2,zero,41548 <btc_base58_decode+0x3f0>
        *(binu++) = (outi[0] & 0xff00) >> 8;
    case 1:
        *(binu++) = (outi[0] & 0xff);
        ++j;
    default:
        break;
   41504:	00001906 	br	4156c <btc_base58_decode+0x414>
    }

    j = 0;
    switch (bytesleft) {
    case 3:
        *(binu++) = (outi[0] & 0xff0000) >> 16;
   41508:	e0bfe517 	ldw	r2,-108(fp)
   4150c:	10c00044 	addi	r3,r2,1
   41510:	e0ffe515 	stw	r3,-108(fp)
   41514:	e0ffee17 	ldw	r3,-72(fp)
   41518:	18c00017 	ldw	r3,0(r3)
   4151c:	18c03fec 	andhi	r3,r3,255
   41520:	1806d43a 	srli	r3,r3,16
   41524:	10c00005 	stb	r3,0(r2)
    case 2:
        *(binu++) = (outi[0] & 0xff00) >> 8;
   41528:	e0bfe517 	ldw	r2,-108(fp)
   4152c:	10c00044 	addi	r3,r2,1
   41530:	e0ffe515 	stw	r3,-108(fp)
   41534:	e0ffee17 	ldw	r3,-72(fp)
   41538:	18c00017 	ldw	r3,0(r3)
   4153c:	18ffc00c 	andi	r3,r3,65280
   41540:	1806d23a 	srli	r3,r3,8
   41544:	10c00005 	stb	r3,0(r2)
    case 1:
        *(binu++) = (outi[0] & 0xff);
   41548:	e0bfe517 	ldw	r2,-108(fp)
   4154c:	10c00044 	addi	r3,r2,1
   41550:	e0ffe515 	stw	r3,-108(fp)
   41554:	e0ffee17 	ldw	r3,-72(fp)
   41558:	18c00017 	ldw	r3,0(r3)
   4155c:	10c00005 	stb	r3,0(r2)
        ++j;
   41560:	e0bfe817 	ldw	r2,-96(fp)
   41564:	10800044 	addi	r2,r2,1
   41568:	e0bfe815 	stw	r2,-96(fp)
    default:
        break;
   4156c:	0001883a 	nop
    }

    for (; j < outisz; ++j) {
   41570:	00002e06 	br	4162c <btc_base58_decode+0x4d4>
        *(binu++) = (outi[j] >> 0x18) & 0xff;
   41574:	e0bfe517 	ldw	r2,-108(fp)
   41578:	10c00044 	addi	r3,r2,1
   4157c:	e0ffe515 	stw	r3,-108(fp)
   41580:	e13fee17 	ldw	r4,-72(fp)
   41584:	e0ffe817 	ldw	r3,-96(fp)
   41588:	18c7883a 	add	r3,r3,r3
   4158c:	18c7883a 	add	r3,r3,r3
   41590:	20c7883a 	add	r3,r4,r3
   41594:	18c00017 	ldw	r3,0(r3)
   41598:	1806d63a 	srli	r3,r3,24
   4159c:	10c00005 	stb	r3,0(r2)
        *(binu++) = (outi[j] >> 0x10) & 0xff;
   415a0:	e0bfe517 	ldw	r2,-108(fp)
   415a4:	10c00044 	addi	r3,r2,1
   415a8:	e0ffe515 	stw	r3,-108(fp)
   415ac:	e13fee17 	ldw	r4,-72(fp)
   415b0:	e0ffe817 	ldw	r3,-96(fp)
   415b4:	18c7883a 	add	r3,r3,r3
   415b8:	18c7883a 	add	r3,r3,r3
   415bc:	20c7883a 	add	r3,r4,r3
   415c0:	18c00017 	ldw	r3,0(r3)
   415c4:	1806d43a 	srli	r3,r3,16
   415c8:	10c00005 	stb	r3,0(r2)
        *(binu++) = (outi[j] >> 8) & 0xff;
   415cc:	e0bfe517 	ldw	r2,-108(fp)
   415d0:	10c00044 	addi	r3,r2,1
   415d4:	e0ffe515 	stw	r3,-108(fp)
   415d8:	e13fee17 	ldw	r4,-72(fp)
   415dc:	e0ffe817 	ldw	r3,-96(fp)
   415e0:	18c7883a 	add	r3,r3,r3
   415e4:	18c7883a 	add	r3,r3,r3
   415e8:	20c7883a 	add	r3,r4,r3
   415ec:	18c00017 	ldw	r3,0(r3)
   415f0:	1806d23a 	srli	r3,r3,8
   415f4:	10c00005 	stb	r3,0(r2)
        *(binu++) = (outi[j] >> 0) & 0xff;
   415f8:	e0bfe517 	ldw	r2,-108(fp)
   415fc:	10c00044 	addi	r3,r2,1
   41600:	e0ffe515 	stw	r3,-108(fp)
   41604:	e13fee17 	ldw	r4,-72(fp)
   41608:	e0ffe817 	ldw	r3,-96(fp)
   4160c:	18c7883a 	add	r3,r3,r3
   41610:	18c7883a 	add	r3,r3,r3
   41614:	20c7883a 	add	r3,r4,r3
   41618:	18c00017 	ldw	r3,0(r3)
   4161c:	10c00005 	stb	r3,0(r2)
        ++j;
    default:
        break;
    }

    for (; j < outisz; ++j) {
   41620:	e0bfe817 	ldw	r2,-96(fp)
   41624:	10800044 	addi	r2,r2,1
   41628:	e0bfe815 	stw	r2,-96(fp)
   4162c:	e0ffe817 	ldw	r3,-96(fp)
   41630:	e0bfec17 	ldw	r2,-80(fp)
   41634:	18bfcf36 	bltu	r3,r2,41574 <__alt_mem_epcs_flash_controller+0xfe038574>
        *(binu++) = (outi[j] >> 8) & 0xff;
        *(binu++) = (outi[j] >> 0) & 0xff;
    }

    // Count canonical base58 byte count
    binu = bin;
   41638:	e0bff417 	ldw	r2,-48(fp)
   4163c:	e0bfe515 	stw	r2,-108(fp)
    for (i = 0; i < binsz; ++i) {
   41640:	e03fe715 	stw	zero,-100(fp)
   41644:	00000e06 	br	41680 <btc_base58_decode+0x528>
        if (binu[i]) {
   41648:	e0ffe517 	ldw	r3,-108(fp)
   4164c:	e0bfe717 	ldw	r2,-100(fp)
   41650:	1885883a 	add	r2,r3,r2
   41654:	10800003 	ldbu	r2,0(r2)
   41658:	10803fcc 	andi	r2,r2,255
   4165c:	10000c1e 	bne	r2,zero,41690 <btc_base58_decode+0x538>
            break;
        }
        --*binszp;
   41660:	e0bff517 	ldw	r2,-44(fp)
   41664:	10800017 	ldw	r2,0(r2)
   41668:	10ffffc4 	addi	r3,r2,-1
   4166c:	e0bff517 	ldw	r2,-44(fp)
   41670:	10c00015 	stw	r3,0(r2)
        *(binu++) = (outi[j] >> 0) & 0xff;
    }

    // Count canonical base58 byte count
    binu = bin;
    for (i = 0; i < binsz; ++i) {
   41674:	e0bfe717 	ldw	r2,-100(fp)
   41678:	10800044 	addi	r2,r2,1
   4167c:	e0bfe715 	stw	r2,-100(fp)
   41680:	e0ffe717 	ldw	r3,-100(fp)
   41684:	e0bfea17 	ldw	r2,-88(fp)
   41688:	18bfef36 	bltu	r3,r2,41648 <__alt_mem_epcs_flash_controller+0xfe038648>
   4168c:	00000106 	br	41694 <btc_base58_decode+0x53c>
        if (binu[i]) {
            break;
   41690:	0001883a 	nop
        }
        --*binszp;
    }
    *binszp += zerocount;
   41694:	e0bff517 	ldw	r2,-44(fp)
   41698:	10c00017 	ldw	r3,0(r2)
   4169c:	e0bfe917 	ldw	r2,-92(fp)
   416a0:	1887883a 	add	r3,r3,r2
   416a4:	e0bff517 	ldw	r2,-44(fp)
   416a8:	10c00015 	stw	r3,0(r2)

    memset(outi, 0, outisz * sizeof(*outi));
   416ac:	e0ffee17 	ldw	r3,-72(fp)
   416b0:	e0bfec17 	ldw	r2,-80(fp)
   416b4:	1085883a 	add	r2,r2,r2
   416b8:	1085883a 	add	r2,r2,r2
   416bc:	100d883a 	mov	r6,r2
   416c0:	000b883a 	mov	r5,zero
   416c4:	1809883a 	mov	r4,r3
   416c8:	00464200 	call	46420 <memset>
    return true;
   416cc:	00800044 	movi	r2,1
   416d0:	e6fff717 	ldw	sp,-36(fp)
}
   416d4:	e6fff804 	addi	sp,fp,-32
   416d8:	dfc00917 	ldw	ra,36(sp)
   416dc:	df000817 	ldw	fp,32(sp)
   416e0:	ddc00717 	ldw	r23,28(sp)
   416e4:	dd800617 	ldw	r22,24(sp)
   416e8:	dd400517 	ldw	r21,20(sp)
   416ec:	dd000417 	ldw	r20,16(sp)
   416f0:	dcc00317 	ldw	r19,12(sp)
   416f4:	dc800217 	ldw	r18,8(sp)
   416f8:	dc400117 	ldw	r17,4(sp)
   416fc:	dc000017 	ldw	r16,0(sp)
   41700:	dec00a04 	addi	sp,sp,40
   41704:	f800283a 	ret

00041708 <btc_b58check>:

int btc_b58check(const void* bin, size_t binsz, const char* base58str)
{
   41708:	defff104 	addi	sp,sp,-60
   4170c:	dfc00e15 	stw	ra,56(sp)
   41710:	df000d15 	stw	fp,52(sp)
   41714:	df000d04 	addi	fp,sp,52
   41718:	e13ffd15 	stw	r4,-12(fp)
   4171c:	e17ffe15 	stw	r5,-8(fp)
   41720:	e1bfff15 	stw	r6,-4(fp)
    uint256 buf;
    const uint8_t* binc = bin;
   41724:	e0bffd17 	ldw	r2,-12(fp)
   41728:	e0bff415 	stw	r2,-48(fp)
    unsigned i;
    if (binsz < 4) {
   4172c:	e0bffe17 	ldw	r2,-8(fp)
   41730:	10800128 	cmpgeui	r2,r2,4
   41734:	1000021e 	bne	r2,zero,41740 <btc_b58check+0x38>
        return -4;
   41738:	00bfff04 	movi	r2,-4
   4173c:	00004106 	br	41844 <btc_b58check+0x13c>
    }
    sha256_Raw(bin, binsz - 4, buf);
   41740:	e0bffe17 	ldw	r2,-8(fp)
   41744:	10bfff04 	addi	r2,r2,-4
   41748:	e0fff504 	addi	r3,fp,-44
   4174c:	180d883a 	mov	r6,r3
   41750:	100b883a 	mov	r5,r2
   41754:	e13ffd17 	ldw	r4,-12(fp)
   41758:	00041c80 	call	41c8 <sha256_Raw>
    sha256_Raw(buf, sizeof(buf), buf);
   4175c:	e0fff504 	addi	r3,fp,-44
   41760:	e0bff504 	addi	r2,fp,-44
   41764:	180d883a 	mov	r6,r3
   41768:	01400804 	movi	r5,32
   4176c:	1009883a 	mov	r4,r2
   41770:	00041c80 	call	41c8 <sha256_Raw>
    if (memcmp(&binc[binsz - 4], buf, 4)) {
   41774:	e0bffe17 	ldw	r2,-8(fp)
   41778:	10bfff04 	addi	r2,r2,-4
   4177c:	e0fff417 	ldw	r3,-48(fp)
   41780:	1885883a 	add	r2,r3,r2
   41784:	e0fff504 	addi	r3,fp,-44
   41788:	01800104 	movi	r6,4
   4178c:	180b883a 	mov	r5,r3
   41790:	1009883a 	mov	r4,r2
   41794:	00463680 	call	46368 <memcmp>
   41798:	10000226 	beq	r2,zero,417a4 <btc_b58check+0x9c>
        return -1;
   4179c:	00bfffc4 	movi	r2,-1
   417a0:	00002806 	br	41844 <btc_b58check+0x13c>
    }

    // Check number of zeros is correct AFTER verifying checksum (to avoid possibility of accessing base58str beyond the end)
    for (i = 0; binc[i] == '\0' && base58str[i] == '1'; ++i) {
   417a4:	e03ff315 	stw	zero,-52(fp)
   417a8:	00000306 	br	417b8 <btc_b58check+0xb0>
   417ac:	e0bff317 	ldw	r2,-52(fp)
   417b0:	10800044 	addi	r2,r2,1
   417b4:	e0bff315 	stw	r2,-52(fp)
   417b8:	e0fff417 	ldw	r3,-48(fp)
   417bc:	e0bff317 	ldw	r2,-52(fp)
   417c0:	1885883a 	add	r2,r3,r2
   417c4:	10800003 	ldbu	r2,0(r2)
   417c8:	10803fcc 	andi	r2,r2,255
   417cc:	1000091e 	bne	r2,zero,417f4 <btc_b58check+0xec>
   417d0:	e0ffff17 	ldw	r3,-4(fp)
   417d4:	e0bff317 	ldw	r2,-52(fp)
   417d8:	1885883a 	add	r2,r3,r2
   417dc:	10800003 	ldbu	r2,0(r2)
   417e0:	10803fcc 	andi	r2,r2,255
   417e4:	1080201c 	xori	r2,r2,128
   417e8:	10bfe004 	addi	r2,r2,-128
   417ec:	10800c60 	cmpeqi	r2,r2,49
   417f0:	103fee1e 	bne	r2,zero,417ac <__alt_mem_epcs_flash_controller+0xfe0387ac>
    } // Just finding the end of zeros, nothing to do in loop
    if (binc[i] == '\0' || base58str[i] == '1') {
   417f4:	e0fff417 	ldw	r3,-48(fp)
   417f8:	e0bff317 	ldw	r2,-52(fp)
   417fc:	1885883a 	add	r2,r3,r2
   41800:	10800003 	ldbu	r2,0(r2)
   41804:	10803fcc 	andi	r2,r2,255
   41808:	10000926 	beq	r2,zero,41830 <btc_b58check+0x128>
   4180c:	e0ffff17 	ldw	r3,-4(fp)
   41810:	e0bff317 	ldw	r2,-52(fp)
   41814:	1885883a 	add	r2,r3,r2
   41818:	10800003 	ldbu	r2,0(r2)
   4181c:	10803fcc 	andi	r2,r2,255
   41820:	1080201c 	xori	r2,r2,128
   41824:	10bfe004 	addi	r2,r2,-128
   41828:	10800c58 	cmpnei	r2,r2,49
   4182c:	1000021e 	bne	r2,zero,41838 <btc_b58check+0x130>
        return -3;
   41830:	00bfff44 	movi	r2,-3
   41834:	00000306 	br	41844 <btc_b58check+0x13c>
    }

    return binc[0];
   41838:	e0bff417 	ldw	r2,-48(fp)
   4183c:	10800003 	ldbu	r2,0(r2)
   41840:	10803fcc 	andi	r2,r2,255
}
   41844:	e037883a 	mov	sp,fp
   41848:	dfc00117 	ldw	ra,4(sp)
   4184c:	df000017 	ldw	fp,0(sp)
   41850:	dec00204 	addi	sp,sp,8
   41854:	f800283a 	ret

00041858 <btc_base58_encode>:

static const char b58digits_ordered[] =
    "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

int btc_base58_encode(char* b58, size_t* b58sz, const void* data, size_t binsz)
{
   41858:	deffe804 	addi	sp,sp,-96
   4185c:	dfc01715 	stw	ra,92(sp)
   41860:	df001615 	stw	fp,88(sp)
   41864:	ddc01515 	stw	r23,84(sp)
   41868:	dd801415 	stw	r22,80(sp)
   4186c:	dd401315 	stw	r21,76(sp)
   41870:	dd001215 	stw	r20,72(sp)
   41874:	dcc01115 	stw	r19,68(sp)
   41878:	dc801015 	stw	r18,64(sp)
   4187c:	dc400f15 	stw	r17,60(sp)
   41880:	dc000e15 	stw	r16,56(sp)
   41884:	df001604 	addi	fp,sp,88
   41888:	e13ff315 	stw	r4,-52(fp)
   4188c:	e17ff415 	stw	r5,-48(fp)
   41890:	e1bff515 	stw	r6,-44(fp)
   41894:	e1fff615 	stw	r7,-40(fp)
    const uint8_t* bin = data;
   41898:	e0bff517 	ldw	r2,-44(fp)
   4189c:	e0bfef15 	stw	r2,-68(fp)
    int carry;
    ssize_t i, j, high, zcount = 0;
   418a0:	e03fee15 	stw	zero,-72(fp)
    size_t size;

    while (zcount < (ssize_t)binsz && !bin[zcount]) {
   418a4:	00000306 	br	418b4 <btc_base58_encode+0x5c>
        ++zcount;
   418a8:	e0bfee17 	ldw	r2,-72(fp)
   418ac:	10800044 	addi	r2,r2,1
   418b0:	e0bfee15 	stw	r2,-72(fp)
    const uint8_t* bin = data;
    int carry;
    ssize_t i, j, high, zcount = 0;
    size_t size;

    while (zcount < (ssize_t)binsz && !bin[zcount]) {
   418b4:	e0bff617 	ldw	r2,-40(fp)
   418b8:	e0ffee17 	ldw	r3,-72(fp)
   418bc:	1880060e 	bge	r3,r2,418d8 <btc_base58_encode+0x80>
   418c0:	e0bfee17 	ldw	r2,-72(fp)
   418c4:	e0ffef17 	ldw	r3,-68(fp)
   418c8:	1885883a 	add	r2,r3,r2
   418cc:	10800003 	ldbu	r2,0(r2)
   418d0:	10803fcc 	andi	r2,r2,255
   418d4:	103ff426 	beq	r2,zero,418a8 <__alt_mem_epcs_flash_controller+0xfe0388a8>
        ++zcount;
    }

    size = (binsz - zcount) * 138 / 100 + 1;
   418d8:	e0bfee17 	ldw	r2,-72(fp)
   418dc:	e0fff617 	ldw	r3,-40(fp)
   418e0:	1885c83a 	sub	r2,r3,r2
   418e4:	01402284 	movi	r5,138
   418e8:	1009883a 	mov	r4,r2
   418ec:	0043af40 	call	43af4 <__mulsi3>
   418f0:	01401904 	movi	r5,100
   418f4:	1009883a 	mov	r4,r2
   418f8:	0043a380 	call	43a38 <__udivsi3>
   418fc:	10800044 	addi	r2,r2,1
   41900:	e0bff015 	stw	r2,-64(fp)
    uint8_t buf[size];
   41904:	e0bff017 	ldw	r2,-64(fp)
   41908:	d807883a 	mov	r3,sp
   4190c:	e0fff715 	stw	r3,-36(fp)
   41910:	1007883a 	mov	r3,r2
   41914:	18ffffc4 	addi	r3,r3,-1
   41918:	e0fff115 	stw	r3,-60(fp)
   4191c:	102d883a 	mov	r22,r2
   41920:	002f883a 	mov	r23,zero
   41924:	b006d77a 	srli	r3,r22,29
   41928:	b82690fa 	slli	r19,r23,3
   4192c:	1ce6b03a 	or	r19,r3,r19
   41930:	b02490fa 	slli	r18,r22,3
   41934:	1029883a 	mov	r20,r2
   41938:	002b883a 	mov	r21,zero
   4193c:	a006d77a 	srli	r3,r20,29
   41940:	a82290fa 	slli	r17,r21,3
   41944:	1c62b03a 	or	r17,r3,r17
   41948:	a02090fa 	slli	r16,r20,3
   4194c:	108000c4 	addi	r2,r2,3
   41950:	1004d0ba 	srli	r2,r2,2
   41954:	1085883a 	add	r2,r2,r2
   41958:	1085883a 	add	r2,r2,r2
   4195c:	d8b7c83a 	sub	sp,sp,r2
   41960:	d805883a 	mov	r2,sp
   41964:	1005883a 	mov	r2,r2
   41968:	e0bff215 	stw	r2,-56(fp)
    memset(buf, 0, size);
   4196c:	e0bff217 	ldw	r2,-56(fp)
   41970:	e1bff017 	ldw	r6,-64(fp)
   41974:	000b883a 	mov	r5,zero
   41978:	1009883a 	mov	r4,r2
   4197c:	00464200 	call	46420 <memset>

    for (i = zcount, high = size - 1; i < (ssize_t)binsz; ++i, high = j) {
   41980:	e0bfee17 	ldw	r2,-72(fp)
   41984:	e0bfeb15 	stw	r2,-84(fp)
   41988:	e0bff017 	ldw	r2,-64(fp)
   4198c:	10bfffc4 	addi	r2,r2,-1
   41990:	e0bfed15 	stw	r2,-76(fp)
   41994:	00002e06 	br	41a50 <btc_base58_encode+0x1f8>
        for (carry = bin[i], j = size - 1; (j > high) || carry; --j) {
   41998:	e0bfeb17 	ldw	r2,-84(fp)
   4199c:	e0ffef17 	ldw	r3,-68(fp)
   419a0:	1885883a 	add	r2,r3,r2
   419a4:	10800003 	ldbu	r2,0(r2)
   419a8:	10803fcc 	andi	r2,r2,255
   419ac:	e0bfea15 	stw	r2,-88(fp)
   419b0:	e0bff017 	ldw	r2,-64(fp)
   419b4:	10bfffc4 	addi	r2,r2,-1
   419b8:	e0bfec15 	stw	r2,-80(fp)
   419bc:	00001a06 	br	41a28 <btc_base58_encode+0x1d0>
            carry += 256 * buf[j];
   419c0:	e0fff217 	ldw	r3,-56(fp)
   419c4:	e0bfec17 	ldw	r2,-80(fp)
   419c8:	1885883a 	add	r2,r3,r2
   419cc:	10800003 	ldbu	r2,0(r2)
   419d0:	10803fcc 	andi	r2,r2,255
   419d4:	1004923a 	slli	r2,r2,8
   419d8:	e0ffea17 	ldw	r3,-88(fp)
   419dc:	1885883a 	add	r2,r3,r2
   419e0:	e0bfea15 	stw	r2,-88(fp)
            buf[j] = carry % 58;
   419e4:	e0bfea17 	ldw	r2,-88(fp)
   419e8:	01400e84 	movi	r5,58
   419ec:	1009883a 	mov	r4,r2
   419f0:	00439c40 	call	439c4 <__modsi3>
   419f4:	1009883a 	mov	r4,r2
   419f8:	e0fff217 	ldw	r3,-56(fp)
   419fc:	e0bfec17 	ldw	r2,-80(fp)
   41a00:	1885883a 	add	r2,r3,r2
   41a04:	11000005 	stb	r4,0(r2)
            carry /= 58;
   41a08:	e0bfea17 	ldw	r2,-88(fp)
   41a0c:	01400e84 	movi	r5,58
   41a10:	1009883a 	mov	r4,r2
   41a14:	00439400 	call	43940 <__divsi3>
   41a18:	e0bfea15 	stw	r2,-88(fp)
    size = (binsz - zcount) * 138 / 100 + 1;
    uint8_t buf[size];
    memset(buf, 0, size);

    for (i = zcount, high = size - 1; i < (ssize_t)binsz; ++i, high = j) {
        for (carry = bin[i], j = size - 1; (j > high) || carry; --j) {
   41a1c:	e0bfec17 	ldw	r2,-80(fp)
   41a20:	10bfffc4 	addi	r2,r2,-1
   41a24:	e0bfec15 	stw	r2,-80(fp)
   41a28:	e0bfec17 	ldw	r2,-80(fp)
   41a2c:	e0ffed17 	ldw	r3,-76(fp)
   41a30:	18bfe316 	blt	r3,r2,419c0 <__alt_mem_epcs_flash_controller+0xfe0389c0>
   41a34:	e0bfea17 	ldw	r2,-88(fp)
   41a38:	103fe11e 	bne	r2,zero,419c0 <__alt_mem_epcs_flash_controller+0xfe0389c0>

    size = (binsz - zcount) * 138 / 100 + 1;
    uint8_t buf[size];
    memset(buf, 0, size);

    for (i = zcount, high = size - 1; i < (ssize_t)binsz; ++i, high = j) {
   41a3c:	e0bfeb17 	ldw	r2,-84(fp)
   41a40:	10800044 	addi	r2,r2,1
   41a44:	e0bfeb15 	stw	r2,-84(fp)
   41a48:	e0bfec17 	ldw	r2,-80(fp)
   41a4c:	e0bfed15 	stw	r2,-76(fp)
   41a50:	e0bff617 	ldw	r2,-40(fp)
   41a54:	e0ffeb17 	ldw	r3,-84(fp)
   41a58:	18bfcf16 	blt	r3,r2,41998 <__alt_mem_epcs_flash_controller+0xfe038998>
            buf[j] = carry % 58;
            carry /= 58;
        }
    }

    for (j = 0; j < (ssize_t)size && !buf[j]; ++j)
   41a5c:	e03fec15 	stw	zero,-80(fp)
   41a60:	00000306 	br	41a70 <btc_base58_encode+0x218>
   41a64:	e0bfec17 	ldw	r2,-80(fp)
   41a68:	10800044 	addi	r2,r2,1
   41a6c:	e0bfec15 	stw	r2,-80(fp)
   41a70:	e0bff017 	ldw	r2,-64(fp)
   41a74:	e0ffec17 	ldw	r3,-80(fp)
   41a78:	1880060e 	bge	r3,r2,41a94 <btc_base58_encode+0x23c>
   41a7c:	e0fff217 	ldw	r3,-56(fp)
   41a80:	e0bfec17 	ldw	r2,-80(fp)
   41a84:	1885883a 	add	r2,r3,r2
   41a88:	10800003 	ldbu	r2,0(r2)
   41a8c:	10803fcc 	andi	r2,r2,255
   41a90:	103ff426 	beq	r2,zero,41a64 <__alt_mem_epcs_flash_controller+0xfe038a64>
        ;

    if (*b58sz <= zcount + size - j) {
   41a94:	e0bff417 	ldw	r2,-48(fp)
   41a98:	10800017 	ldw	r2,0(r2)
   41a9c:	e13fee17 	ldw	r4,-72(fp)
   41aa0:	e0fff017 	ldw	r3,-64(fp)
   41aa4:	20c9883a 	add	r4,r4,r3
   41aa8:	e0ffec17 	ldw	r3,-80(fp)
   41aac:	20c7c83a 	sub	r3,r4,r3
   41ab0:	18800f36 	bltu	r3,r2,41af0 <btc_base58_encode+0x298>
        *b58sz = zcount + size - j + 1;
   41ab4:	e0ffee17 	ldw	r3,-72(fp)
   41ab8:	e0bff017 	ldw	r2,-64(fp)
   41abc:	1887883a 	add	r3,r3,r2
   41ac0:	e0bfec17 	ldw	r2,-80(fp)
   41ac4:	1885c83a 	sub	r2,r3,r2
   41ac8:	10c00044 	addi	r3,r2,1
   41acc:	e0bff417 	ldw	r2,-48(fp)
   41ad0:	10c00015 	stw	r3,0(r2)
        memset(buf, 0, size);
   41ad4:	e0bff217 	ldw	r2,-56(fp)
   41ad8:	e1bff017 	ldw	r6,-64(fp)
   41adc:	000b883a 	mov	r5,zero
   41ae0:	1009883a 	mov	r4,r2
   41ae4:	00464200 	call	46420 <memset>
        return false;
   41ae8:	0005883a 	mov	r2,zero
   41aec:	00002f06 	br	41bac <btc_base58_encode+0x354>
    }

    if (zcount) {
   41af0:	e0bfee17 	ldw	r2,-72(fp)
   41af4:	10000526 	beq	r2,zero,41b0c <btc_base58_encode+0x2b4>
        memset(b58, '1', zcount);
   41af8:	e0bfee17 	ldw	r2,-72(fp)
   41afc:	100d883a 	mov	r6,r2
   41b00:	01400c44 	movi	r5,49
   41b04:	e13ff317 	ldw	r4,-52(fp)
   41b08:	00464200 	call	46420 <memset>
    }
    for (i = zcount; j < (ssize_t)size; ++i, ++j) {
   41b0c:	e0bfee17 	ldw	r2,-72(fp)
   41b10:	e0bfeb15 	stw	r2,-84(fp)
   41b14:	00001306 	br	41b64 <btc_base58_encode+0x30c>
        b58[i] = b58digits_ordered[buf[j]];
   41b18:	e0bfeb17 	ldw	r2,-84(fp)
   41b1c:	e0fff317 	ldw	r3,-52(fp)
   41b20:	1887883a 	add	r3,r3,r2
   41b24:	e13ff217 	ldw	r4,-56(fp)
   41b28:	e0bfec17 	ldw	r2,-80(fp)
   41b2c:	2085883a 	add	r2,r4,r2
   41b30:	10800003 	ldbu	r2,0(r2)
   41b34:	11003fcc 	andi	r4,r2,255
   41b38:	00800174 	movhi	r2,5
   41b3c:	109a4f04 	addi	r2,r2,26940
   41b40:	1105883a 	add	r2,r2,r4
   41b44:	10800003 	ldbu	r2,0(r2)
   41b48:	18800005 	stb	r2,0(r3)
    }

    if (zcount) {
        memset(b58, '1', zcount);
    }
    for (i = zcount; j < (ssize_t)size; ++i, ++j) {
   41b4c:	e0bfeb17 	ldw	r2,-84(fp)
   41b50:	10800044 	addi	r2,r2,1
   41b54:	e0bfeb15 	stw	r2,-84(fp)
   41b58:	e0bfec17 	ldw	r2,-80(fp)
   41b5c:	10800044 	addi	r2,r2,1
   41b60:	e0bfec15 	stw	r2,-80(fp)
   41b64:	e0bff017 	ldw	r2,-64(fp)
   41b68:	e0ffec17 	ldw	r3,-80(fp)
   41b6c:	18bfea16 	blt	r3,r2,41b18 <__alt_mem_epcs_flash_controller+0xfe038b18>
        b58[i] = b58digits_ordered[buf[j]];
    }
    b58[i] = '\0';
   41b70:	e0bfeb17 	ldw	r2,-84(fp)
   41b74:	e0fff317 	ldw	r3,-52(fp)
   41b78:	1885883a 	add	r2,r3,r2
   41b7c:	10000005 	stb	zero,0(r2)
    *b58sz = i + 1;
   41b80:	e0bfeb17 	ldw	r2,-84(fp)
   41b84:	10800044 	addi	r2,r2,1
   41b88:	1007883a 	mov	r3,r2
   41b8c:	e0bff417 	ldw	r2,-48(fp)
   41b90:	10c00015 	stw	r3,0(r2)

    memset(buf, 0, size);
   41b94:	e0bff217 	ldw	r2,-56(fp)
   41b98:	e1bff017 	ldw	r6,-64(fp)
   41b9c:	000b883a 	mov	r5,zero
   41ba0:	1009883a 	mov	r4,r2
   41ba4:	00464200 	call	46420 <memset>
    return true;
   41ba8:	00800044 	movi	r2,1
   41bac:	e6fff717 	ldw	sp,-36(fp)
}
   41bb0:	e6fff804 	addi	sp,fp,-32
   41bb4:	dfc00917 	ldw	ra,36(sp)
   41bb8:	df000817 	ldw	fp,32(sp)
   41bbc:	ddc00717 	ldw	r23,28(sp)
   41bc0:	dd800617 	ldw	r22,24(sp)
   41bc4:	dd400517 	ldw	r21,20(sp)
   41bc8:	dd000417 	ldw	r20,16(sp)
   41bcc:	dcc00317 	ldw	r19,12(sp)
   41bd0:	dc800217 	ldw	r18,8(sp)
   41bd4:	dc400117 	ldw	r17,4(sp)
   41bd8:	dc000017 	ldw	r16,0(sp)
   41bdc:	dec00a04 	addi	sp,sp,40
   41be0:	f800283a 	ret

00041be4 <btc_base58_encode_check>:

int btc_base58_encode_check(const uint8_t* data, int datalen, char* str, int strsize)
{
   41be4:	defff304 	addi	sp,sp,-52
   41be8:	dfc00c15 	stw	ra,48(sp)
   41bec:	df000b15 	stw	fp,44(sp)
   41bf0:	dc400a15 	stw	r17,40(sp)
   41bf4:	dc000915 	stw	r16,36(sp)
   41bf8:	df000b04 	addi	fp,sp,44
   41bfc:	e13ffa15 	stw	r4,-24(fp)
   41c00:	e17ffb15 	stw	r5,-20(fp)
   41c04:	e1bffc15 	stw	r6,-16(fp)
   41c08:	e1fffd15 	stw	r7,-12(fp)
   41c0c:	d809883a 	mov	r4,sp
   41c10:	2023883a 	mov	r17,r4
    int ret;
    if (datalen > 128) {
   41c14:	e13ffb17 	ldw	r4,-20(fp)
   41c18:	21002050 	cmplti	r4,r4,129
   41c1c:	2000021e 	bne	r4,zero,41c28 <btc_base58_encode_check+0x44>
        return 0;
   41c20:	0005883a 	mov	r2,zero
   41c24:	00004706 	br	41d44 <btc_base58_encode_check+0x160>
    }
    uint8_t buf[datalen + 32];
   41c28:	e13ffb17 	ldw	r4,-20(fp)
   41c2c:	24000804 	addi	r16,r4,32
   41c30:	813fffc4 	addi	r4,r16,-1
   41c34:	e13ff615 	stw	r4,-40(fp)
   41c38:	8009883a 	mov	r4,r16
   41c3c:	2019883a 	mov	r12,r4
   41c40:	001b883a 	mov	r13,zero
   41c44:	6008d77a 	srli	r4,r12,29
   41c48:	681290fa 	slli	r9,r13,3
   41c4c:	2252b03a 	or	r9,r4,r9
   41c50:	601090fa 	slli	r8,r12,3
   41c54:	8009883a 	mov	r4,r16
   41c58:	2015883a 	mov	r10,r4
   41c5c:	0017883a 	mov	r11,zero
   41c60:	5008d77a 	srli	r4,r10,29
   41c64:	580690fa 	slli	r3,r11,3
   41c68:	20c6b03a 	or	r3,r4,r3
   41c6c:	500490fa 	slli	r2,r10,3
   41c70:	8005883a 	mov	r2,r16
   41c74:	108000c4 	addi	r2,r2,3
   41c78:	1004d0ba 	srli	r2,r2,2
   41c7c:	1085883a 	add	r2,r2,r2
   41c80:	1085883a 	add	r2,r2,r2
   41c84:	d8b7c83a 	sub	sp,sp,r2
   41c88:	d805883a 	mov	r2,sp
   41c8c:	1005883a 	mov	r2,r2
   41c90:	e0bff715 	stw	r2,-36(fp)
    uint8_t* hash = buf + datalen;
   41c94:	e0fff717 	ldw	r3,-36(fp)
   41c98:	e0bffb17 	ldw	r2,-20(fp)
   41c9c:	1885883a 	add	r2,r3,r2
   41ca0:	e0bff815 	stw	r2,-32(fp)
    memcpy(buf, data, datalen);
   41ca4:	e0bff717 	ldw	r2,-36(fp)
   41ca8:	e0fffb17 	ldw	r3,-20(fp)
   41cac:	180d883a 	mov	r6,r3
   41cb0:	e17ffa17 	ldw	r5,-24(fp)
   41cb4:	1009883a 	mov	r4,r2
   41cb8:	00463980 	call	46398 <memcpy>
    sha256_Raw(data, datalen, hash);
   41cbc:	e0bffb17 	ldw	r2,-20(fp)
   41cc0:	e1bff817 	ldw	r6,-32(fp)
   41cc4:	100b883a 	mov	r5,r2
   41cc8:	e13ffa17 	ldw	r4,-24(fp)
   41ccc:	00041c80 	call	41c8 <sha256_Raw>
    sha256_Raw(hash, 32, hash);
   41cd0:	e1bff817 	ldw	r6,-32(fp)
   41cd4:	01400804 	movi	r5,32
   41cd8:	e13ff817 	ldw	r4,-32(fp)
   41cdc:	00041c80 	call	41c8 <sha256_Raw>
    size_t res = strsize;
   41ce0:	e0bffd17 	ldw	r2,-12(fp)
   41ce4:	e0bff915 	stw	r2,-28(fp)
    if (btc_base58_encode(str, &res, buf, datalen + 4) != true) {
   41ce8:	e0fff717 	ldw	r3,-36(fp)
   41cec:	e0bffb17 	ldw	r2,-20(fp)
   41cf0:	10800104 	addi	r2,r2,4
   41cf4:	1009883a 	mov	r4,r2
   41cf8:	e0bff904 	addi	r2,fp,-28
   41cfc:	200f883a 	mov	r7,r4
   41d00:	180d883a 	mov	r6,r3
   41d04:	100b883a 	mov	r5,r2
   41d08:	e13ffc17 	ldw	r4,-16(fp)
   41d0c:	00418580 	call	41858 <btc_base58_encode>
   41d10:	10800060 	cmpeqi	r2,r2,1
   41d14:	1000021e 	bne	r2,zero,41d20 <btc_base58_encode_check+0x13c>
        ret = 0;
   41d18:	e03ff515 	stw	zero,-44(fp)
   41d1c:	00000206 	br	41d28 <btc_base58_encode_check+0x144>
    } else {
        ret = res;
   41d20:	e0bff917 	ldw	r2,-28(fp)
   41d24:	e0bff515 	stw	r2,-44(fp)
    }
    memset(buf, 0, sizeof(buf));
   41d28:	e0bff717 	ldw	r2,-36(fp)
   41d2c:	8007883a 	mov	r3,r16
   41d30:	180d883a 	mov	r6,r3
   41d34:	000b883a 	mov	r5,zero
   41d38:	1009883a 	mov	r4,r2
   41d3c:	00464200 	call	46420 <memset>
    return ret;
   41d40:	e0bff517 	ldw	r2,-44(fp)
   41d44:	8837883a 	mov	sp,r17
}
   41d48:	e6fffe04 	addi	sp,fp,-8
   41d4c:	dfc00317 	ldw	ra,12(sp)
   41d50:	df000217 	ldw	fp,8(sp)
   41d54:	dc400117 	ldw	r17,4(sp)
   41d58:	dc000017 	ldw	r16,0(sp)
   41d5c:	dec00404 	addi	sp,sp,16
   41d60:	f800283a 	ret

00041d64 <btc_base58_decode_check>:

int btc_base58_decode_check(const char* str, uint8_t* data, size_t datalen)
{
   41d64:	defff804 	addi	sp,sp,-32
   41d68:	dfc00715 	stw	ra,28(sp)
   41d6c:	df000615 	stw	fp,24(sp)
   41d70:	df000604 	addi	fp,sp,24
   41d74:	e13ffd15 	stw	r4,-12(fp)
   41d78:	e17ffe15 	stw	r5,-8(fp)
   41d7c:	e1bfff15 	stw	r6,-4(fp)
    int ret;
    size_t strl = strlen(str);
   41d80:	e13ffd17 	ldw	r4,-12(fp)
   41d84:	0046c3c0 	call	46c3c <strlen>
   41d88:	e0bffb15 	stw	r2,-20(fp)

    /* buffer needs to be at least the strsize, will be used
       for the whole decoding */
    if (strl > 128 || datalen < strl) {
   41d8c:	e0bffb17 	ldw	r2,-20(fp)
   41d90:	10802068 	cmpgeui	r2,r2,129
   41d94:	1000031e 	bne	r2,zero,41da4 <btc_base58_decode_check+0x40>
   41d98:	e0ffff17 	ldw	r3,-4(fp)
   41d9c:	e0bffb17 	ldw	r2,-20(fp)
   41da0:	1880022e 	bgeu	r3,r2,41dac <btc_base58_decode_check+0x48>
        return 0;
   41da4:	0005883a 	mov	r2,zero
   41da8:	00002806 	br	41e4c <btc_base58_decode_check+0xe8>
    }

    size_t binsize = strl;
   41dac:	e0bffb17 	ldw	r2,-20(fp)
   41db0:	e0bffc15 	stw	r2,-16(fp)
    if (btc_base58_decode(data, &binsize, str) != true) {
   41db4:	e0bffc04 	addi	r2,fp,-16
   41db8:	e1bffd17 	ldw	r6,-12(fp)
   41dbc:	100b883a 	mov	r5,r2
   41dc0:	e13ffe17 	ldw	r4,-8(fp)
   41dc4:	00411580 	call	41158 <btc_base58_decode>
   41dc8:	10800060 	cmpeqi	r2,r2,1
   41dcc:	1000011e 	bne	r2,zero,41dd4 <btc_base58_decode_check+0x70>
        ret = 0;
   41dd0:	e03ffa15 	stw	zero,-24(fp)
    }

    memmove(data, data + strl - binsize, binsize);
   41dd4:	e0bffc17 	ldw	r2,-16(fp)
   41dd8:	e0fffb17 	ldw	r3,-20(fp)
   41ddc:	1885c83a 	sub	r2,r3,r2
   41de0:	e0fffe17 	ldw	r3,-8(fp)
   41de4:	1885883a 	add	r2,r3,r2
   41de8:	e0fffc17 	ldw	r3,-16(fp)
   41dec:	180d883a 	mov	r6,r3
   41df0:	100b883a 	mov	r5,r2
   41df4:	e13ffe17 	ldw	r4,-8(fp)
   41df8:	00463c00 	call	463c0 <memmove>
    memset(data + binsize, 0, datalen - binsize);
   41dfc:	e0bffc17 	ldw	r2,-16(fp)
   41e00:	e0fffe17 	ldw	r3,-8(fp)
   41e04:	1889883a 	add	r4,r3,r2
   41e08:	e0bffc17 	ldw	r2,-16(fp)
   41e0c:	e0ffff17 	ldw	r3,-4(fp)
   41e10:	1885c83a 	sub	r2,r3,r2
   41e14:	100d883a 	mov	r6,r2
   41e18:	000b883a 	mov	r5,zero
   41e1c:	00464200 	call	46420 <memset>

    if (btc_b58check(data, binsize, str) < 0) {
   41e20:	e0bffc17 	ldw	r2,-16(fp)
   41e24:	e1bffd17 	ldw	r6,-12(fp)
   41e28:	100b883a 	mov	r5,r2
   41e2c:	e13ffe17 	ldw	r4,-8(fp)
   41e30:	00417080 	call	41708 <btc_b58check>
   41e34:	1000020e 	bge	r2,zero,41e40 <btc_base58_decode_check+0xdc>
        ret = 0;
   41e38:	e03ffa15 	stw	zero,-24(fp)
   41e3c:	00000206 	br	41e48 <btc_base58_decode_check+0xe4>
    } else {
        ret = binsize;
   41e40:	e0bffc17 	ldw	r2,-16(fp)
   41e44:	e0bffa15 	stw	r2,-24(fp)
    }
    return ret;
   41e48:	e0bffa17 	ldw	r2,-24(fp)
}
   41e4c:	e037883a 	mov	sp,fp
   41e50:	dfc00117 	ldw	ra,4(sp)
   41e54:	df000017 	ldw	fp,0(sp)
   41e58:	dec00204 	addi	sp,sp,8
   41e5c:	f800283a 	ret

00041e60 <btc_p2pkh_addr_from_hash160>:

btc_bool btc_p2pkh_addr_from_hash160(const uint160 hashin, const btc_chainparams* chain, char *addrout, int len) {
   41e60:	defff404 	addi	sp,sp,-48
   41e64:	dfc00b15 	stw	ra,44(sp)
   41e68:	df000a15 	stw	fp,40(sp)
   41e6c:	df000a04 	addi	fp,sp,40
   41e70:	e13ffc15 	stw	r4,-16(fp)
   41e74:	e17ffd15 	stw	r5,-12(fp)
   41e78:	e1bffe15 	stw	r6,-8(fp)
   41e7c:	e1ffff15 	stw	r7,-4(fp)
    uint8_t hash160[sizeof(uint160)+1];
    hash160[0] = chain->b58prefix_pubkey_address;
   41e80:	e0bffd17 	ldw	r2,-12(fp)
   41e84:	10800803 	ldbu	r2,32(r2)
   41e88:	e0bff605 	stb	r2,-40(fp)
    memcpy(hash160 + 1, hashin, sizeof(uint160));
   41e8c:	e0bff644 	addi	r2,fp,-39
   41e90:	01800504 	movi	r6,20
   41e94:	e17ffc17 	ldw	r5,-16(fp)
   41e98:	1009883a 	mov	r4,r2
   41e9c:	00463980 	call	46398 <memcpy>

    return (btc_base58_encode_check(hash160, sizeof(uint160)+1, addrout, len) > 0);
   41ea0:	e1ffff17 	ldw	r7,-4(fp)
   41ea4:	e1bffe17 	ldw	r6,-8(fp)
   41ea8:	01400544 	movi	r5,21
   41eac:	e13ff604 	addi	r4,fp,-40
   41eb0:	0041be40 	call	41be4 <btc_base58_encode_check>
   41eb4:	0084803a 	cmplt	r2,zero,r2
}
   41eb8:	e037883a 	mov	sp,fp
   41ebc:	dfc00117 	ldw	ra,4(sp)
   41ec0:	df000017 	ldw	fp,0(sp)
   41ec4:	dec00204 	addi	sp,sp,8
   41ec8:	f800283a 	ret

00041ecc <btc_p2wpkh_addr_from_hash160>:

btc_bool btc_p2wpkh_addr_from_hash160(const uint160 hashin, const btc_chainparams* chain, char *addrout) {
   41ecc:	defffa04 	addi	sp,sp,-24
   41ed0:	dfc00515 	stw	ra,20(sp)
   41ed4:	df000415 	stw	fp,16(sp)
   41ed8:	df000404 	addi	fp,sp,16
   41edc:	e13ffd15 	stw	r4,-12(fp)
   41ee0:	e17ffe15 	stw	r5,-8(fp)
   41ee4:	e1bfff15 	stw	r6,-4(fp)
    return segwit_addr_encode(addrout, chain->bech32_hrp, 0, hashin, sizeof(uint160));
   41ee8:	e0bffe17 	ldw	r2,-8(fp)
   41eec:	10c00884 	addi	r3,r2,34
   41ef0:	00800504 	movi	r2,20
   41ef4:	d8800015 	stw	r2,0(sp)
   41ef8:	e1fffd17 	ldw	r7,-12(fp)
   41efc:	000d883a 	mov	r6,zero
   41f00:	180b883a 	mov	r5,r3
   41f04:	e13fff17 	ldw	r4,-4(fp)
   41f08:	003ef400 	call	3ef40 <segwit_addr_encode>
}
   41f0c:	e037883a 	mov	sp,fp
   41f10:	dfc00117 	ldw	ra,4(sp)
   41f14:	df000017 	ldw	fp,0(sp)
   41f18:	dec00204 	addi	sp,sp,8
   41f1c:	f800283a 	ret

00041f20 <btc_hash_sngl_sha256>:
    sha256_Raw(hashout, SHA256_DIGEST_LENGTH, hashout);
}

//single sha256 hash
LIBBTC_API static inline void btc_hash_sngl_sha256(const unsigned char* datain, size_t length, uint256 hashout)
{
   41f20:	defffb04 	addi	sp,sp,-20
   41f24:	dfc00415 	stw	ra,16(sp)
   41f28:	df000315 	stw	fp,12(sp)
   41f2c:	df000304 	addi	fp,sp,12
   41f30:	e13ffd15 	stw	r4,-12(fp)
   41f34:	e17ffe15 	stw	r5,-8(fp)
   41f38:	e1bfff15 	stw	r6,-4(fp)
    sha256_Raw(datain, length, hashout);
   41f3c:	e1bfff17 	ldw	r6,-4(fp)
   41f40:	e17ffe17 	ldw	r5,-8(fp)
   41f44:	e13ffd17 	ldw	r4,-12(fp)
   41f48:	00041c80 	call	41c8 <sha256_Raw>
}
   41f4c:	0001883a 	nop
   41f50:	e037883a 	mov	sp,fp
   41f54:	dfc00117 	ldw	ra,4(sp)
   41f58:	df000017 	ldw	fp,0(sp)
   41f5c:	dec00204 	addi	sp,sp,8
   41f60:	f800283a 	ret

00041f64 <write_be>:

#include "..\include\btc\memory.h"

// write 4 big endian bytes
static void write_be(uint8_t* data, uint32_t x)
{
   41f64:	defffd04 	addi	sp,sp,-12
   41f68:	df000215 	stw	fp,8(sp)
   41f6c:	df000204 	addi	fp,sp,8
   41f70:	e13ffe15 	stw	r4,-8(fp)
   41f74:	e17fff15 	stw	r5,-4(fp)
    data[0] = x >> 24;
   41f78:	e0bfff17 	ldw	r2,-4(fp)
   41f7c:	1004d63a 	srli	r2,r2,24
   41f80:	1007883a 	mov	r3,r2
   41f84:	e0bffe17 	ldw	r2,-8(fp)
   41f88:	10c00005 	stb	r3,0(r2)
    data[1] = x >> 16;
   41f8c:	e0bffe17 	ldw	r2,-8(fp)
   41f90:	10800044 	addi	r2,r2,1
   41f94:	e0ffff17 	ldw	r3,-4(fp)
   41f98:	1806d43a 	srli	r3,r3,16
   41f9c:	10c00005 	stb	r3,0(r2)
    data[2] = x >> 8;
   41fa0:	e0bffe17 	ldw	r2,-8(fp)
   41fa4:	10800084 	addi	r2,r2,2
   41fa8:	e0ffff17 	ldw	r3,-4(fp)
   41fac:	1806d23a 	srli	r3,r3,8
   41fb0:	10c00005 	stb	r3,0(r2)
    data[3] = x;
   41fb4:	e0bffe17 	ldw	r2,-8(fp)
   41fb8:	108000c4 	addi	r2,r2,3
   41fbc:	e0ffff17 	ldw	r3,-4(fp)
   41fc0:	10c00005 	stb	r3,0(r2)
}
   41fc4:	0001883a 	nop
   41fc8:	e037883a 	mov	sp,fp
   41fcc:	df000017 	ldw	fp,0(sp)
   41fd0:	dec00104 	addi	sp,sp,4
   41fd4:	f800283a 	ret

00041fd8 <read_be>:


// read 4 big endian bytes
static uint32_t read_be(const uint8_t* data)
{
   41fd8:	defffe04 	addi	sp,sp,-8
   41fdc:	df000115 	stw	fp,4(sp)
   41fe0:	df000104 	addi	fp,sp,4
   41fe4:	e13fff15 	stw	r4,-4(fp)
    return (((uint32_t)data[0]) << 24) |
   41fe8:	e0bfff17 	ldw	r2,-4(fp)
   41fec:	10800003 	ldbu	r2,0(r2)
   41ff0:	10803fcc 	andi	r2,r2,255
   41ff4:	1006963a 	slli	r3,r2,24
           (((uint32_t)data[1]) << 16) |
   41ff8:	e0bfff17 	ldw	r2,-4(fp)
   41ffc:	10800044 	addi	r2,r2,1
   42000:	10800003 	ldbu	r2,0(r2)
   42004:	10803fcc 	andi	r2,r2,255
   42008:	1004943a 	slli	r2,r2,16


// read 4 big endian bytes
static uint32_t read_be(const uint8_t* data)
{
    return (((uint32_t)data[0]) << 24) |
   4200c:	1886b03a 	or	r3,r3,r2
           (((uint32_t)data[1]) << 16) |
           (((uint32_t)data[2]) << 8) |
   42010:	e0bfff17 	ldw	r2,-4(fp)
   42014:	10800084 	addi	r2,r2,2
   42018:	10800003 	ldbu	r2,0(r2)
   4201c:	10803fcc 	andi	r2,r2,255
   42020:	1004923a 	slli	r2,r2,8

// read 4 big endian bytes
static uint32_t read_be(const uint8_t* data)
{
    return (((uint32_t)data[0]) << 24) |
           (((uint32_t)data[1]) << 16) |
   42024:	1886b03a 	or	r3,r3,r2
           (((uint32_t)data[2]) << 8) |
           (((uint32_t)data[3]));
   42028:	e0bfff17 	ldw	r2,-4(fp)
   4202c:	108000c4 	addi	r2,r2,3
   42030:	10800003 	ldbu	r2,0(r2)
   42034:	10803fcc 	andi	r2,r2,255


// read 4 big endian bytes
static uint32_t read_be(const uint8_t* data)
{
    return (((uint32_t)data[0]) << 24) |
   42038:	1884b03a 	or	r2,r3,r2
           (((uint32_t)data[1]) << 16) |
           (((uint32_t)data[2]) << 8) |
           (((uint32_t)data[3]));
}
   4203c:	e037883a 	mov	sp,fp
   42040:	df000017 	ldw	fp,0(sp)
   42044:	dec00104 	addi	sp,sp,4
   42048:	f800283a 	ret

0004204c <btc_hdnode_new>:

btc_hdnode* btc_hdnode_new()
{
   4204c:	defffd04 	addi	sp,sp,-12
   42050:	dfc00215 	stw	ra,8(sp)
   42054:	df000115 	stw	fp,4(sp)
   42058:	df000104 	addi	fp,sp,4
    btc_hdnode* hdnode;
    hdnode = btc_calloc(1, sizeof(*hdnode));
   4205c:	01401c04 	movi	r5,112
   42060:	01000044 	movi	r4,1
   42064:	00083000 	call	8300 <btc_calloc>
   42068:	e0bfff15 	stw	r2,-4(fp)
    return hdnode;
   4206c:	e0bfff17 	ldw	r2,-4(fp)
}
   42070:	e037883a 	mov	sp,fp
   42074:	dfc00117 	ldw	ra,4(sp)
   42078:	df000017 	ldw	fp,0(sp)
   4207c:	dec00204 	addi	sp,sp,8
   42080:	f800283a 	ret

00042084 <btc_hdnode_copy>:

btc_hdnode* btc_hdnode_copy(const btc_hdnode* hdnode)
{
   42084:	defffc04 	addi	sp,sp,-16
   42088:	dfc00315 	stw	ra,12(sp)
   4208c:	df000215 	stw	fp,8(sp)
   42090:	df000204 	addi	fp,sp,8
   42094:	e13fff15 	stw	r4,-4(fp)
    btc_hdnode* newnode = btc_hdnode_new();
   42098:	004204c0 	call	4204c <btc_hdnode_new>
   4209c:	e0bffe15 	stw	r2,-8(fp)

    newnode->depth = hdnode->depth;
   420a0:	e0bfff17 	ldw	r2,-4(fp)
   420a4:	10c00017 	ldw	r3,0(r2)
   420a8:	e0bffe17 	ldw	r2,-8(fp)
   420ac:	10c00015 	stw	r3,0(r2)
    newnode->fingerprint = hdnode->fingerprint;
   420b0:	e0bfff17 	ldw	r2,-4(fp)
   420b4:	10c00117 	ldw	r3,4(r2)
   420b8:	e0bffe17 	ldw	r2,-8(fp)
   420bc:	10c00115 	stw	r3,4(r2)
    newnode->child_num = hdnode->child_num;
   420c0:	e0bfff17 	ldw	r2,-4(fp)
   420c4:	10c00217 	ldw	r3,8(r2)
   420c8:	e0bffe17 	ldw	r2,-8(fp)
   420cc:	10c00215 	stw	r3,8(r2)
    memcpy(newnode->chain_code, hdnode->chain_code, sizeof(hdnode->chain_code));
   420d0:	e0bffe17 	ldw	r2,-8(fp)
   420d4:	10c00304 	addi	r3,r2,12
   420d8:	e0bfff17 	ldw	r2,-4(fp)
   420dc:	10800304 	addi	r2,r2,12
   420e0:	01800804 	movi	r6,32
   420e4:	100b883a 	mov	r5,r2
   420e8:	1809883a 	mov	r4,r3
   420ec:	00463980 	call	46398 <memcpy>
    memcpy(newnode->private_key, hdnode->private_key, sizeof(hdnode->private_key));
   420f0:	e0bffe17 	ldw	r2,-8(fp)
   420f4:	10c00b04 	addi	r3,r2,44
   420f8:	e0bfff17 	ldw	r2,-4(fp)
   420fc:	10800b04 	addi	r2,r2,44
   42100:	01800804 	movi	r6,32
   42104:	100b883a 	mov	r5,r2
   42108:	1809883a 	mov	r4,r3
   4210c:	00463980 	call	46398 <memcpy>
    memcpy(newnode->public_key, hdnode->public_key, sizeof(hdnode->public_key));
   42110:	e0bffe17 	ldw	r2,-8(fp)
   42114:	10c01304 	addi	r3,r2,76
   42118:	e0bfff17 	ldw	r2,-4(fp)
   4211c:	10801304 	addi	r2,r2,76
   42120:	01800844 	movi	r6,33
   42124:	100b883a 	mov	r5,r2
   42128:	1809883a 	mov	r4,r3
   4212c:	00463980 	call	46398 <memcpy>

    return newnode;
   42130:	e0bffe17 	ldw	r2,-8(fp)
}
   42134:	e037883a 	mov	sp,fp
   42138:	dfc00117 	ldw	ra,4(sp)
   4213c:	df000017 	ldw	fp,0(sp)
   42140:	dec00204 	addi	sp,sp,8
   42144:	f800283a 	ret

00042148 <btc_hdnode_free>:

void btc_hdnode_free(btc_hdnode* hdnode)
{
   42148:	defffd04 	addi	sp,sp,-12
   4214c:	dfc00215 	stw	ra,8(sp)
   42150:	df000115 	stw	fp,4(sp)
   42154:	df000104 	addi	fp,sp,4
   42158:	e13fff15 	stw	r4,-4(fp)
    memset(hdnode->chain_code, 0, sizeof(hdnode->chain_code));
   4215c:	e0bfff17 	ldw	r2,-4(fp)
   42160:	10800304 	addi	r2,r2,12
   42164:	01800804 	movi	r6,32
   42168:	000b883a 	mov	r5,zero
   4216c:	1009883a 	mov	r4,r2
   42170:	00464200 	call	46420 <memset>
    memset(hdnode->private_key, 0, sizeof(hdnode->private_key));
   42174:	e0bfff17 	ldw	r2,-4(fp)
   42178:	10800b04 	addi	r2,r2,44
   4217c:	01800804 	movi	r6,32
   42180:	000b883a 	mov	r5,zero
   42184:	1009883a 	mov	r4,r2
   42188:	00464200 	call	46420 <memset>
    memset(hdnode->public_key, 0, sizeof(hdnode->public_key));
   4218c:	e0bfff17 	ldw	r2,-4(fp)
   42190:	10801304 	addi	r2,r2,76
   42194:	01800844 	movi	r6,33
   42198:	000b883a 	mov	r5,zero
   4219c:	1009883a 	mov	r4,r2
   421a0:	00464200 	call	46420 <memset>
    btc_free(hdnode);
   421a4:	e13fff17 	ldw	r4,-4(fp)
   421a8:	00083880 	call	8388 <btc_free>
}
   421ac:	0001883a 	nop
   421b0:	e037883a 	mov	sp,fp
   421b4:	dfc00117 	ldw	ra,4(sp)
   421b8:	df000017 	ldw	fp,0(sp)
   421bc:	dec00204 	addi	sp,sp,8
   421c0:	f800283a 	ret

000421c4 <btc_hdnode_from_seed>:

btc_bool btc_hdnode_from_seed(const uint8_t* seed, int seed_len, btc_hdnode* out)
{
   421c4:	deffea04 	addi	sp,sp,-88
   421c8:	dfc01515 	stw	ra,84(sp)
   421cc:	df001415 	stw	fp,80(sp)
   421d0:	df001404 	addi	fp,sp,80
   421d4:	e13ffd15 	stw	r4,-12(fp)
   421d8:	e17ffe15 	stw	r5,-8(fp)
   421dc:	e1bfff15 	stw	r6,-4(fp)
    uint8_t I[BTC_ECKEY_PKEY_LENGTH + BTC_BIP32_CHAINCODE_SIZE];
    memset(out, 0, sizeof(btc_hdnode));
   421e0:	01801c04 	movi	r6,112
   421e4:	000b883a 	mov	r5,zero
   421e8:	e13fff17 	ldw	r4,-4(fp)
   421ec:	00464200 	call	46420 <memset>
    out->depth = 0;
   421f0:	e0bfff17 	ldw	r2,-4(fp)
   421f4:	10000015 	stw	zero,0(r2)
    out->fingerprint = 0x00000000;
   421f8:	e0bfff17 	ldw	r2,-4(fp)
   421fc:	10000115 	stw	zero,4(r2)
    out->child_num = 0;
   42200:	e0bfff17 	ldw	r2,-4(fp)
   42204:	10000215 	stw	zero,8(r2)
    hmac_sha512((const uint8_t*)"Bitcoin seed", 12, seed, seed_len, I);
   42208:	e0bffe17 	ldw	r2,-8(fp)
   4220c:	e0ffed04 	addi	r3,fp,-76
   42210:	d8c00015 	stw	r3,0(sp)
   42214:	100f883a 	mov	r7,r2
   42218:	e1bffd17 	ldw	r6,-12(fp)
   4221c:	01400304 	movi	r5,12
   42220:	01000174 	movhi	r4,5
   42224:	211a5e04 	addi	r4,r4,27000
   42228:	0000fac0 	call	fac <hmac_sha512>
    memcpy(out->private_key, I, BTC_ECKEY_PKEY_LENGTH);
   4222c:	e0bfff17 	ldw	r2,-4(fp)
   42230:	10800b04 	addi	r2,r2,44
   42234:	01800804 	movi	r6,32
   42238:	e17fed04 	addi	r5,fp,-76
   4223c:	1009883a 	mov	r4,r2
   42240:	00463980 	call	46398 <memcpy>

    if (!btc_ecc_verify_privatekey(out->private_key)) {
   42244:	e0bfff17 	ldw	r2,-4(fp)
   42248:	10800b04 	addi	r2,r2,44
   4224c:	1009883a 	mov	r4,r2
   42250:	0007bc00 	call	7bc0 <btc_ecc_verify_privatekey>
   42254:	10803fcc 	andi	r2,r2,255
   42258:	1000061e 	bne	r2,zero,42274 <btc_hdnode_from_seed+0xb0>
        memset(I, 0, sizeof(I));
   4225c:	01801004 	movi	r6,64
   42260:	000b883a 	mov	r5,zero
   42264:	e13fed04 	addi	r4,fp,-76
   42268:	00464200 	call	46420 <memset>
        return false;
   4226c:	0005883a 	mov	r2,zero
   42270:	00000e06 	br	422ac <btc_hdnode_from_seed+0xe8>
    }

    memcpy(out->chain_code, I + BTC_ECKEY_PKEY_LENGTH, BTC_BIP32_CHAINCODE_SIZE);
   42274:	e0bfff17 	ldw	r2,-4(fp)
   42278:	10800304 	addi	r2,r2,12
   4227c:	e0fff504 	addi	r3,fp,-44
   42280:	01800804 	movi	r6,32
   42284:	180b883a 	mov	r5,r3
   42288:	1009883a 	mov	r4,r2
   4228c:	00463980 	call	46398 <memcpy>
    btc_hdnode_fill_public_key(out);
   42290:	e13fff17 	ldw	r4,-4(fp)
   42294:	00427500 	call	42750 <btc_hdnode_fill_public_key>
    memset(I, 0, sizeof(I));
   42298:	01801004 	movi	r6,64
   4229c:	000b883a 	mov	r5,zero
   422a0:	e13fed04 	addi	r4,fp,-76
   422a4:	00464200 	call	46420 <memset>
    return true;
   422a8:	00800044 	movi	r2,1
}
   422ac:	e037883a 	mov	sp,fp
   422b0:	dfc00117 	ldw	ra,4(sp)
   422b4:	df000017 	ldw	fp,0(sp)
   422b8:	dec00204 	addi	sp,sp,8
   422bc:	f800283a 	ret

000422c0 <btc_hdnode_public_ckd>:


btc_bool btc_hdnode_public_ckd(btc_hdnode* inout, uint32_t i)
{
   422c0:	deffd804 	addi	sp,sp,-160
   422c4:	dfc02715 	stw	ra,156(sp)
   422c8:	df002615 	stw	fp,152(sp)
   422cc:	df002604 	addi	fp,sp,152
   422d0:	e13ffe15 	stw	r4,-8(fp)
   422d4:	e17fff15 	stw	r5,-4(fp)
    uint8_t data[1 + 32 + 4];
    uint8_t I[32 + BTC_BIP32_CHAINCODE_SIZE];
    uint8_t fingerprint[32];

    if (i & 0x80000000) { // private derivation
   422d8:	e0bfff17 	ldw	r2,-4(fp)
   422dc:	1000020e 	bge	r2,zero,422e8 <btc_hdnode_public_ckd+0x28>
        return false;
   422e0:	0005883a 	mov	r2,zero
   422e4:	00006706 	br	42484 <btc_hdnode_public_ckd+0x1c4>
    } else { // public derivation
        memcpy(data, inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH);
   422e8:	e0bffe17 	ldw	r2,-8(fp)
   422ec:	10c01304 	addi	r3,r2,76
   422f0:	e0bfdc04 	addi	r2,fp,-144
   422f4:	01800844 	movi	r6,33
   422f8:	180b883a 	mov	r5,r3
   422fc:	1009883a 	mov	r4,r2
   42300:	00463980 	call	46398 <memcpy>
    }
    write_be(data + BTC_ECKEY_COMPRESSED_LENGTH, i);
   42304:	e0bfdc04 	addi	r2,fp,-144
   42308:	10800844 	addi	r2,r2,33
   4230c:	e17fff17 	ldw	r5,-4(fp)
   42310:	1009883a 	mov	r4,r2
   42314:	0041f640 	call	41f64 <write_be>

    sha256_Raw(inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH, fingerprint);
   42318:	e0bffe17 	ldw	r2,-8(fp)
   4231c:	10801304 	addi	r2,r2,76
   42320:	e0fff544 	addi	r3,fp,-43
   42324:	180d883a 	mov	r6,r3
   42328:	01400844 	movi	r5,33
   4232c:	1009883a 	mov	r4,r2
   42330:	00041c80 	call	41c8 <sha256_Raw>
    btc_ripemd160(fingerprint, 32, fingerprint);
   42334:	e0fff544 	addi	r3,fp,-43
   42338:	e0bff544 	addi	r2,fp,-43
   4233c:	180d883a 	mov	r6,r3
   42340:	01400804 	movi	r5,32
   42344:	1009883a 	mov	r4,r2
   42348:	000c3680 	call	c368 <btc_ripemd160>
    inout->fingerprint = (fingerprint[0] << 24) + (fingerprint[1] << 16) + (fingerprint[2] << 8) + fingerprint[3];
   4234c:	e0bff543 	ldbu	r2,-43(fp)
   42350:	10803fcc 	andi	r2,r2,255
   42354:	1006963a 	slli	r3,r2,24
   42358:	e0bff583 	ldbu	r2,-42(fp)
   4235c:	10803fcc 	andi	r2,r2,255
   42360:	1004943a 	slli	r2,r2,16
   42364:	1887883a 	add	r3,r3,r2
   42368:	e0bff5c3 	ldbu	r2,-41(fp)
   4236c:	10803fcc 	andi	r2,r2,255
   42370:	1004923a 	slli	r2,r2,8
   42374:	1887883a 	add	r3,r3,r2
   42378:	e0bff603 	ldbu	r2,-40(fp)
   4237c:	10803fcc 	andi	r2,r2,255
   42380:	1885883a 	add	r2,r3,r2
   42384:	1007883a 	mov	r3,r2
   42388:	e0bffe17 	ldw	r2,-8(fp)
   4238c:	10c00115 	stw	r3,4(r2)

    memset(inout->private_key, 0, 32);
   42390:	e0bffe17 	ldw	r2,-8(fp)
   42394:	10800b04 	addi	r2,r2,44
   42398:	01800804 	movi	r6,32
   4239c:	000b883a 	mov	r5,zero
   423a0:	1009883a 	mov	r4,r2
   423a4:	00464200 	call	46420 <memset>

    int failed = 0;
   423a8:	e03fdb15 	stw	zero,-148(fp)
    hmac_sha512(inout->chain_code, 32, data, sizeof(data), I);
   423ac:	e0bffe17 	ldw	r2,-8(fp)
   423b0:	10c00304 	addi	r3,r2,12
   423b4:	e13fdc04 	addi	r4,fp,-144
   423b8:	e0bfe544 	addi	r2,fp,-107
   423bc:	d8800015 	stw	r2,0(sp)
   423c0:	01c00944 	movi	r7,37
   423c4:	200d883a 	mov	r6,r4
   423c8:	01400804 	movi	r5,32
   423cc:	1809883a 	mov	r4,r3
   423d0:	0000fac0 	call	fac <hmac_sha512>
    memcpy(inout->chain_code, I + 32, BTC_BIP32_CHAINCODE_SIZE);
   423d4:	e0bffe17 	ldw	r2,-8(fp)
   423d8:	10c00304 	addi	r3,r2,12
   423dc:	e0bfe544 	addi	r2,fp,-107
   423e0:	10800804 	addi	r2,r2,32
   423e4:	01800804 	movi	r6,32
   423e8:	100b883a 	mov	r5,r2
   423ec:	1809883a 	mov	r4,r3
   423f0:	00463980 	call	46398 <memcpy>


    if (!btc_ecc_public_key_tweak_add(inout->public_key, I))
   423f4:	e0bffe17 	ldw	r2,-8(fp)
   423f8:	10801304 	addi	r2,r2,76
   423fc:	e0ffe544 	addi	r3,fp,-107
   42400:	180b883a 	mov	r5,r3
   42404:	1009883a 	mov	r4,r2
   42408:	0007ae40 	call	7ae4 <btc_ecc_public_key_tweak_add>
   4240c:	10803fcc 	andi	r2,r2,255
   42410:	1000011e 	bne	r2,zero,42418 <btc_hdnode_public_ckd+0x158>
        failed = false;
   42414:	e03fdb15 	stw	zero,-148(fp)

    if (!failed) {
   42418:	e0bfdb17 	ldw	r2,-148(fp)
   4241c:	1000081e 	bne	r2,zero,42440 <btc_hdnode_public_ckd+0x180>
        inout->depth++;
   42420:	e0bffe17 	ldw	r2,-8(fp)
   42424:	10800017 	ldw	r2,0(r2)
   42428:	10c00044 	addi	r3,r2,1
   4242c:	e0bffe17 	ldw	r2,-8(fp)
   42430:	10c00015 	stw	r3,0(r2)
        inout->child_num = i;
   42434:	e0bffe17 	ldw	r2,-8(fp)
   42438:	e0ffff17 	ldw	r3,-4(fp)
   4243c:	10c00215 	stw	r3,8(r2)
    }

    // Wipe all stack data.
    memset(data, 0, sizeof(data));
   42440:	e0bfdc04 	addi	r2,fp,-144
   42444:	01800944 	movi	r6,37
   42448:	000b883a 	mov	r5,zero
   4244c:	1009883a 	mov	r4,r2
   42450:	00464200 	call	46420 <memset>
    memset(I, 0, sizeof(I));
   42454:	e0bfe544 	addi	r2,fp,-107
   42458:	01801004 	movi	r6,64
   4245c:	000b883a 	mov	r5,zero
   42460:	1009883a 	mov	r4,r2
   42464:	00464200 	call	46420 <memset>
    memset(fingerprint, 0, sizeof(fingerprint));
   42468:	e0bff544 	addi	r2,fp,-43
   4246c:	01800804 	movi	r6,32
   42470:	000b883a 	mov	r5,zero
   42474:	1009883a 	mov	r4,r2
   42478:	00464200 	call	46420 <memset>

    return failed ? false : true;
   4247c:	e0bfdb17 	ldw	r2,-148(fp)
   42480:	1005003a 	cmpeq	r2,r2,zero
}
   42484:	e037883a 	mov	sp,fp
   42488:	dfc00117 	ldw	ra,4(sp)
   4248c:	df000017 	ldw	fp,0(sp)
   42490:	dec00204 	addi	sp,sp,8
   42494:	f800283a 	ret

00042498 <btc_hdnode_private_ckd>:


btc_bool btc_hdnode_private_ckd(btc_hdnode* inout, uint32_t i)
{
   42498:	deffc804 	addi	sp,sp,-224
   4249c:	dfc03715 	stw	ra,220(sp)
   424a0:	df003615 	stw	fp,216(sp)
   424a4:	df003604 	addi	fp,sp,216
   424a8:	e13ffe15 	stw	r4,-8(fp)
   424ac:	e17fff15 	stw	r5,-4(fp)
    uint8_t data[1 + BTC_ECKEY_PKEY_LENGTH + 4];
    uint8_t I[BTC_ECKEY_PKEY_LENGTH + BTC_BIP32_CHAINCODE_SIZE];
    uint8_t fingerprint[BTC_BIP32_CHAINCODE_SIZE];
    uint8_t p[BTC_ECKEY_PKEY_LENGTH], z[BTC_ECKEY_PKEY_LENGTH];

    if (i & 0x80000000) { // private derivation
   424b0:	e0bfff17 	ldw	r2,-4(fp)
   424b4:	10000a0e 	bge	r2,zero,424e0 <btc_hdnode_private_ckd+0x48>
        data[0] = 0;
   424b8:	e03fcc05 	stb	zero,-208(fp)
        memcpy(data + 1, inout->private_key, BTC_ECKEY_PKEY_LENGTH);
   424bc:	e0bfcc04 	addi	r2,fp,-208
   424c0:	10800044 	addi	r2,r2,1
   424c4:	e0fffe17 	ldw	r3,-8(fp)
   424c8:	18c00b04 	addi	r3,r3,44
   424cc:	01800804 	movi	r6,32
   424d0:	180b883a 	mov	r5,r3
   424d4:	1009883a 	mov	r4,r2
   424d8:	00463980 	call	46398 <memcpy>
   424dc:	00000706 	br	424fc <btc_hdnode_private_ckd+0x64>
    } else { // public derivation
        memcpy(data, inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH);
   424e0:	e0bffe17 	ldw	r2,-8(fp)
   424e4:	10c01304 	addi	r3,r2,76
   424e8:	e0bfcc04 	addi	r2,fp,-208
   424ec:	01800844 	movi	r6,33
   424f0:	180b883a 	mov	r5,r3
   424f4:	1009883a 	mov	r4,r2
   424f8:	00463980 	call	46398 <memcpy>
    }
    write_be(data + BTC_ECKEY_COMPRESSED_LENGTH, i);
   424fc:	e0bfcc04 	addi	r2,fp,-208
   42500:	10800844 	addi	r2,r2,33
   42504:	e17fff17 	ldw	r5,-4(fp)
   42508:	1009883a 	mov	r4,r2
   4250c:	0041f640 	call	41f64 <write_be>

    sha256_Raw(inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH, fingerprint);
   42510:	e0bffe17 	ldw	r2,-8(fp)
   42514:	10801304 	addi	r2,r2,76
   42518:	e0ffe544 	addi	r3,fp,-107
   4251c:	180d883a 	mov	r6,r3
   42520:	01400844 	movi	r5,33
   42524:	1009883a 	mov	r4,r2
   42528:	00041c80 	call	41c8 <sha256_Raw>
    btc_ripemd160(fingerprint, 32, fingerprint);
   4252c:	e0ffe544 	addi	r3,fp,-107
   42530:	e0bfe544 	addi	r2,fp,-107
   42534:	180d883a 	mov	r6,r3
   42538:	01400804 	movi	r5,32
   4253c:	1009883a 	mov	r4,r2
   42540:	000c3680 	call	c368 <btc_ripemd160>
    inout->fingerprint = (fingerprint[0] << 24) + (fingerprint[1] << 16) +
   42544:	e0bfe543 	ldbu	r2,-107(fp)
   42548:	10803fcc 	andi	r2,r2,255
   4254c:	1006963a 	slli	r3,r2,24
   42550:	e0bfe583 	ldbu	r2,-106(fp)
   42554:	10803fcc 	andi	r2,r2,255
   42558:	1004943a 	slli	r2,r2,16
   4255c:	1887883a 	add	r3,r3,r2
                         (fingerprint[2] << 8) + fingerprint[3];
   42560:	e0bfe5c3 	ldbu	r2,-105(fp)
   42564:	10803fcc 	andi	r2,r2,255
   42568:	1004923a 	slli	r2,r2,8
    }
    write_be(data + BTC_ECKEY_COMPRESSED_LENGTH, i);

    sha256_Raw(inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH, fingerprint);
    btc_ripemd160(fingerprint, 32, fingerprint);
    inout->fingerprint = (fingerprint[0] << 24) + (fingerprint[1] << 16) +
   4256c:	1887883a 	add	r3,r3,r2
                         (fingerprint[2] << 8) + fingerprint[3];
   42570:	e0bfe603 	ldbu	r2,-104(fp)
   42574:	10803fcc 	andi	r2,r2,255
   42578:	1885883a 	add	r2,r3,r2
    }
    write_be(data + BTC_ECKEY_COMPRESSED_LENGTH, i);

    sha256_Raw(inout->public_key, BTC_ECKEY_COMPRESSED_LENGTH, fingerprint);
    btc_ripemd160(fingerprint, 32, fingerprint);
    inout->fingerprint = (fingerprint[0] << 24) + (fingerprint[1] << 16) +
   4257c:	1007883a 	mov	r3,r2
   42580:	e0bffe17 	ldw	r2,-8(fp)
   42584:	10c00115 	stw	r3,4(r2)
                         (fingerprint[2] << 8) + fingerprint[3];

    memset(fingerprint, 0, sizeof(fingerprint));
   42588:	e0bfe544 	addi	r2,fp,-107
   4258c:	01800804 	movi	r6,32
   42590:	000b883a 	mov	r5,zero
   42594:	1009883a 	mov	r4,r2
   42598:	00464200 	call	46420 <memset>
    memcpy(p, inout->private_key, BTC_ECKEY_PKEY_LENGTH);
   4259c:	e0bffe17 	ldw	r2,-8(fp)
   425a0:	10c00b04 	addi	r3,r2,44
   425a4:	e0bfed44 	addi	r2,fp,-75
   425a8:	1809883a 	mov	r4,r3
   425ac:	00c00804 	movi	r3,32
   425b0:	180d883a 	mov	r6,r3
   425b4:	200b883a 	mov	r5,r4
   425b8:	1009883a 	mov	r4,r2
   425bc:	00463980 	call	46398 <memcpy>

    hmac_sha512(inout->chain_code, BTC_BIP32_CHAINCODE_SIZE, data, sizeof(data), I);
   425c0:	e0bffe17 	ldw	r2,-8(fp)
   425c4:	10c00304 	addi	r3,r2,12
   425c8:	e13fcc04 	addi	r4,fp,-208
   425cc:	e0bfd544 	addi	r2,fp,-171
   425d0:	d8800015 	stw	r2,0(sp)
   425d4:	01c00944 	movi	r7,37
   425d8:	200d883a 	mov	r6,r4
   425dc:	01400804 	movi	r5,32
   425e0:	1809883a 	mov	r4,r3
   425e4:	0000fac0 	call	fac <hmac_sha512>
    memcpy(inout->chain_code, I + BTC_ECKEY_PKEY_LENGTH, BTC_BIP32_CHAINCODE_SIZE);
   425e8:	e0bffe17 	ldw	r2,-8(fp)
   425ec:	10c00304 	addi	r3,r2,12
   425f0:	e0bfd544 	addi	r2,fp,-171
   425f4:	10800804 	addi	r2,r2,32
   425f8:	01800804 	movi	r6,32
   425fc:	100b883a 	mov	r5,r2
   42600:	1809883a 	mov	r4,r3
   42604:	00463980 	call	46398 <memcpy>
    memcpy(inout->private_key, I, BTC_ECKEY_PKEY_LENGTH);
   42608:	e0bffe17 	ldw	r2,-8(fp)
   4260c:	10800b04 	addi	r2,r2,44
   42610:	e0ffd544 	addi	r3,fp,-171
   42614:	01800804 	movi	r6,32
   42618:	180b883a 	mov	r5,r3
   4261c:	1009883a 	mov	r4,r2
   42620:	00463980 	call	46398 <memcpy>

    memcpy(z, inout->private_key, BTC_ECKEY_PKEY_LENGTH);
   42624:	e0bffe17 	ldw	r2,-8(fp)
   42628:	10c00b04 	addi	r3,r2,44
   4262c:	e0bff544 	addi	r2,fp,-43
   42630:	1809883a 	mov	r4,r3
   42634:	00c00804 	movi	r3,32
   42638:	180d883a 	mov	r6,r3
   4263c:	200b883a 	mov	r5,r4
   42640:	1009883a 	mov	r4,r2
   42644:	00463980 	call	46398 <memcpy>

    int failed = 0;
   42648:	e03fcb15 	stw	zero,-212(fp)
    if (!btc_ecc_verify_privatekey(z)) {
   4264c:	e0bff544 	addi	r2,fp,-43
   42650:	1009883a 	mov	r4,r2
   42654:	0007bc00 	call	7bc0 <btc_ecc_verify_privatekey>
   42658:	10803fcc 	andi	r2,r2,255
   4265c:	1000041e 	bne	r2,zero,42670 <btc_hdnode_private_ckd+0x1d8>
        failed = 1;
   42660:	00800044 	movi	r2,1
   42664:	e0bfcb15 	stw	r2,-212(fp)
        return false;
   42668:	0005883a 	mov	r2,zero
   4266c:	00003306 	br	4273c <btc_hdnode_private_ckd+0x2a4>
    }

    memcpy(inout->private_key, p, BTC_ECKEY_PKEY_LENGTH);
   42670:	e0bffe17 	ldw	r2,-8(fp)
   42674:	10800b04 	addi	r2,r2,44
   42678:	1009883a 	mov	r4,r2
   4267c:	e0bfed44 	addi	r2,fp,-75
   42680:	00c00804 	movi	r3,32
   42684:	180d883a 	mov	r6,r3
   42688:	100b883a 	mov	r5,r2
   4268c:	00463980 	call	46398 <memcpy>
    if (!btc_ecc_private_key_tweak_add(inout->private_key, z)) {
   42690:	e0bffe17 	ldw	r2,-8(fp)
   42694:	10800b04 	addi	r2,r2,44
   42698:	e0fff544 	addi	r3,fp,-43
   4269c:	180b883a 	mov	r5,r3
   426a0:	1009883a 	mov	r4,r2
   426a4:	0007a7c0 	call	7a7c <btc_ecc_private_key_tweak_add>
   426a8:	10803fcc 	andi	r2,r2,255
   426ac:	1000021e 	bne	r2,zero,426b8 <btc_hdnode_private_ckd+0x220>
        failed = 1;
   426b0:	00800044 	movi	r2,1
   426b4:	e0bfcb15 	stw	r2,-212(fp)
    }

    if (!failed) {
   426b8:	e0bfcb17 	ldw	r2,-212(fp)
   426bc:	10000a1e 	bne	r2,zero,426e8 <btc_hdnode_private_ckd+0x250>
        inout->depth++;
   426c0:	e0bffe17 	ldw	r2,-8(fp)
   426c4:	10800017 	ldw	r2,0(r2)
   426c8:	10c00044 	addi	r3,r2,1
   426cc:	e0bffe17 	ldw	r2,-8(fp)
   426d0:	10c00015 	stw	r3,0(r2)
        inout->child_num = i;
   426d4:	e0bffe17 	ldw	r2,-8(fp)
   426d8:	e0ffff17 	ldw	r3,-4(fp)
   426dc:	10c00215 	stw	r3,8(r2)
        btc_hdnode_fill_public_key(inout);
   426e0:	e13ffe17 	ldw	r4,-8(fp)
   426e4:	00427500 	call	42750 <btc_hdnode_fill_public_key>
    }

    memset(data, 0, sizeof(data));
   426e8:	e0bfcc04 	addi	r2,fp,-208
   426ec:	01800944 	movi	r6,37
   426f0:	000b883a 	mov	r5,zero
   426f4:	1009883a 	mov	r4,r2
   426f8:	00464200 	call	46420 <memset>
    memset(I, 0, sizeof(I));
   426fc:	e0bfd544 	addi	r2,fp,-171
   42700:	01801004 	movi	r6,64
   42704:	000b883a 	mov	r5,zero
   42708:	1009883a 	mov	r4,r2
   4270c:	00464200 	call	46420 <memset>
    memset(p, 0, sizeof(p));
   42710:	e0bfed44 	addi	r2,fp,-75
   42714:	01800804 	movi	r6,32
   42718:	000b883a 	mov	r5,zero
   4271c:	1009883a 	mov	r4,r2
   42720:	00464200 	call	46420 <memset>
    memset(z, 0, sizeof(z));
   42724:	e0bff544 	addi	r2,fp,-43
   42728:	01800804 	movi	r6,32
   4272c:	000b883a 	mov	r5,zero
   42730:	1009883a 	mov	r4,r2
   42734:	00464200 	call	46420 <memset>
    return true;
   42738:	00800044 	movi	r2,1
}
   4273c:	e037883a 	mov	sp,fp
   42740:	dfc00117 	ldw	ra,4(sp)
   42744:	df000017 	ldw	fp,0(sp)
   42748:	dec00204 	addi	sp,sp,8
   4274c:	f800283a 	ret

00042750 <btc_hdnode_fill_public_key>:


void btc_hdnode_fill_public_key(btc_hdnode* node)
{
   42750:	defffc04 	addi	sp,sp,-16
   42754:	dfc00315 	stw	ra,12(sp)
   42758:	df000215 	stw	fp,8(sp)
   4275c:	df000204 	addi	fp,sp,8
   42760:	e13fff15 	stw	r4,-4(fp)
    size_t outsize = BTC_ECKEY_COMPRESSED_LENGTH;
   42764:	00800844 	movi	r2,33
   42768:	e0bffe15 	stw	r2,-8(fp)
    btc_ecc_get_pubkey(node->private_key, node->public_key, &outsize, true);
   4276c:	e0bfff17 	ldw	r2,-4(fp)
   42770:	10c00b04 	addi	r3,r2,44
   42774:	e0bfff17 	ldw	r2,-4(fp)
   42778:	10801304 	addi	r2,r2,76
   4277c:	01c00044 	movi	r7,1
   42780:	e1bffe04 	addi	r6,fp,-8
   42784:	100b883a 	mov	r5,r2
   42788:	1809883a 	mov	r4,r3
   4278c:	00079700 	call	7970 <btc_ecc_get_pubkey>
}
   42790:	0001883a 	nop
   42794:	e037883a 	mov	sp,fp
   42798:	dfc00117 	ldw	ra,4(sp)
   4279c:	df000017 	ldw	fp,0(sp)
   427a0:	dec00204 	addi	sp,sp,8
   427a4:	f800283a 	ret

000427a8 <btc_hdnode_serialize>:


static void btc_hdnode_serialize(const btc_hdnode* node, uint32_t version, char use_public, char* str, int strsize)
{
   427a8:	deffe604 	addi	sp,sp,-104
   427ac:	dfc01915 	stw	ra,100(sp)
   427b0:	df001815 	stw	fp,96(sp)
   427b4:	df001804 	addi	fp,sp,96
   427b8:	e13ffc15 	stw	r4,-16(fp)
   427bc:	e17ffd15 	stw	r5,-12(fp)
   427c0:	3005883a 	mov	r2,r6
   427c4:	e1ffff15 	stw	r7,-4(fp)
   427c8:	e0bffe05 	stb	r2,-8(fp)
    uint8_t node_data[78];
    write_be(node_data, version);
   427cc:	e17ffd17 	ldw	r5,-12(fp)
   427d0:	e13fe804 	addi	r4,fp,-96
   427d4:	0041f640 	call	41f64 <write_be>
    node_data[4] = node->depth;
   427d8:	e0bffc17 	ldw	r2,-16(fp)
   427dc:	10800017 	ldw	r2,0(r2)
   427e0:	e0bfe905 	stb	r2,-92(fp)
    write_be(node_data + 5, node->fingerprint);
   427e4:	e0ffe944 	addi	r3,fp,-91
   427e8:	e0bffc17 	ldw	r2,-16(fp)
   427ec:	10800117 	ldw	r2,4(r2)
   427f0:	100b883a 	mov	r5,r2
   427f4:	1809883a 	mov	r4,r3
   427f8:	0041f640 	call	41f64 <write_be>
    write_be(node_data + 9, node->child_num);
   427fc:	e0ffea44 	addi	r3,fp,-87
   42800:	e0bffc17 	ldw	r2,-16(fp)
   42804:	10800217 	ldw	r2,8(r2)
   42808:	100b883a 	mov	r5,r2
   4280c:	1809883a 	mov	r4,r3
   42810:	0041f640 	call	41f64 <write_be>
    memcpy(node_data + 13, node->chain_code, BTC_BIP32_CHAINCODE_SIZE);
   42814:	e0ffeb44 	addi	r3,fp,-83
   42818:	e0bffc17 	ldw	r2,-16(fp)
   4281c:	10800304 	addi	r2,r2,12
   42820:	01800804 	movi	r6,32
   42824:	100b883a 	mov	r5,r2
   42828:	1809883a 	mov	r4,r3
   4282c:	00463980 	call	46398 <memcpy>
    if (use_public) {
   42830:	e0bffe07 	ldb	r2,-8(fp)
   42834:	10000826 	beq	r2,zero,42858 <btc_hdnode_serialize+0xb0>
        memcpy(node_data + 45, node->public_key, BTC_ECKEY_COMPRESSED_LENGTH);
   42838:	e0fff344 	addi	r3,fp,-51
   4283c:	e0bffc17 	ldw	r2,-16(fp)
   42840:	10801304 	addi	r2,r2,76
   42844:	01800844 	movi	r6,33
   42848:	100b883a 	mov	r5,r2
   4284c:	1809883a 	mov	r4,r3
   42850:	00463980 	call	46398 <memcpy>
   42854:	00000806 	br	42878 <btc_hdnode_serialize+0xd0>
    } else {
        node_data[45] = 0;
   42858:	e03ff345 	stb	zero,-51(fp)
        memcpy(node_data + 46, node->private_key, BTC_ECKEY_PKEY_LENGTH);
   4285c:	e0fff384 	addi	r3,fp,-50
   42860:	e0bffc17 	ldw	r2,-16(fp)
   42864:	10800b04 	addi	r2,r2,44
   42868:	01800804 	movi	r6,32
   4286c:	100b883a 	mov	r5,r2
   42870:	1809883a 	mov	r4,r3
   42874:	00463980 	call	46398 <memcpy>
    }
    btc_base58_encode_check(node_data, 78, str, strsize);
   42878:	e1c00217 	ldw	r7,8(fp)
   4287c:	e1bfff17 	ldw	r6,-4(fp)
   42880:	01401384 	movi	r5,78
   42884:	e13fe804 	addi	r4,fp,-96
   42888:	0041be40 	call	41be4 <btc_base58_encode_check>
}
   4288c:	0001883a 	nop
   42890:	e037883a 	mov	sp,fp
   42894:	dfc00117 	ldw	ra,4(sp)
   42898:	df000017 	ldw	fp,0(sp)
   4289c:	dec00204 	addi	sp,sp,8
   428a0:	f800283a 	ret

000428a4 <btc_hdnode_serialize_public>:


void btc_hdnode_serialize_public(const btc_hdnode* node, const btc_chainparams* chain, char* str, int strsize)
{
   428a4:	defff904 	addi	sp,sp,-28
   428a8:	dfc00615 	stw	ra,24(sp)
   428ac:	df000515 	stw	fp,20(sp)
   428b0:	df000504 	addi	fp,sp,20
   428b4:	e13ffc15 	stw	r4,-16(fp)
   428b8:	e17ffd15 	stw	r5,-12(fp)
   428bc:	e1bffe15 	stw	r6,-8(fp)
   428c0:	e1ffff15 	stw	r7,-4(fp)
    btc_hdnode_serialize(node, chain->b58prefix_bip32_pubkey, 1, str, strsize);
   428c4:	e0bffd17 	ldw	r2,-12(fp)
   428c8:	10c00b17 	ldw	r3,44(r2)
   428cc:	e0bfff17 	ldw	r2,-4(fp)
   428d0:	d8800015 	stw	r2,0(sp)
   428d4:	e1fffe17 	ldw	r7,-8(fp)
   428d8:	01800044 	movi	r6,1
   428dc:	180b883a 	mov	r5,r3
   428e0:	e13ffc17 	ldw	r4,-16(fp)
   428e4:	00427a80 	call	427a8 <btc_hdnode_serialize>
}
   428e8:	0001883a 	nop
   428ec:	e037883a 	mov	sp,fp
   428f0:	dfc00117 	ldw	ra,4(sp)
   428f4:	df000017 	ldw	fp,0(sp)
   428f8:	dec00204 	addi	sp,sp,8
   428fc:	f800283a 	ret

00042900 <btc_hdnode_serialize_private>:


void btc_hdnode_serialize_private(const btc_hdnode* node, const btc_chainparams* chain, char* str, int strsize)
{
   42900:	defff904 	addi	sp,sp,-28
   42904:	dfc00615 	stw	ra,24(sp)
   42908:	df000515 	stw	fp,20(sp)
   4290c:	df000504 	addi	fp,sp,20
   42910:	e13ffc15 	stw	r4,-16(fp)
   42914:	e17ffd15 	stw	r5,-12(fp)
   42918:	e1bffe15 	stw	r6,-8(fp)
   4291c:	e1ffff15 	stw	r7,-4(fp)
    btc_hdnode_serialize(node, chain->b58prefix_bip32_privkey, 0, str, strsize);
   42920:	e0bffd17 	ldw	r2,-12(fp)
   42924:	10c00a17 	ldw	r3,40(r2)
   42928:	e0bfff17 	ldw	r2,-4(fp)
   4292c:	d8800015 	stw	r2,0(sp)
   42930:	e1fffe17 	ldw	r7,-8(fp)
   42934:	000d883a 	mov	r6,zero
   42938:	180b883a 	mov	r5,r3
   4293c:	e13ffc17 	ldw	r4,-16(fp)
   42940:	00427a80 	call	427a8 <btc_hdnode_serialize>
}
   42944:	0001883a 	nop
   42948:	e037883a 	mov	sp,fp
   4294c:	dfc00117 	ldw	ra,4(sp)
   42950:	df000017 	ldw	fp,0(sp)
   42954:	dec00204 	addi	sp,sp,8
   42958:	f800283a 	ret

0004295c <btc_hdnode_get_hash160>:


void btc_hdnode_get_hash160(const btc_hdnode* node, uint160 hash160_out)
{
   4295c:	defff404 	addi	sp,sp,-48
   42960:	dfc00b15 	stw	ra,44(sp)
   42964:	df000a15 	stw	fp,40(sp)
   42968:	df000a04 	addi	fp,sp,40
   4296c:	e13ffe15 	stw	r4,-8(fp)
   42970:	e17fff15 	stw	r5,-4(fp)
    uint256 hashout;
    btc_hash_sngl_sha256(node->public_key, BTC_ECKEY_COMPRESSED_LENGTH, hashout);
   42974:	e0bffe17 	ldw	r2,-8(fp)
   42978:	10801304 	addi	r2,r2,76
   4297c:	e1bff604 	addi	r6,fp,-40
   42980:	01400844 	movi	r5,33
   42984:	1009883a 	mov	r4,r2
   42988:	0041f200 	call	41f20 <btc_hash_sngl_sha256>
    btc_ripemd160(hashout, sizeof(hashout), hash160_out);
   4298c:	e1bfff17 	ldw	r6,-4(fp)
   42990:	01400804 	movi	r5,32
   42994:	e13ff604 	addi	r4,fp,-40
   42998:	000c3680 	call	c368 <btc_ripemd160>
}
   4299c:	0001883a 	nop
   429a0:	e037883a 	mov	sp,fp
   429a4:	dfc00117 	ldw	ra,4(sp)
   429a8:	df000017 	ldw	fp,0(sp)
   429ac:	dec00204 	addi	sp,sp,8
   429b0:	f800283a 	ret

000429b4 <btc_hdnode_get_p2pkh_address>:

void btc_hdnode_get_p2pkh_address(const btc_hdnode* node, const btc_chainparams* chain, char* str, int strsize)
{
   429b4:	defff404 	addi	sp,sp,-48
   429b8:	dfc00b15 	stw	ra,44(sp)
   429bc:	df000a15 	stw	fp,40(sp)
   429c0:	df000a04 	addi	fp,sp,40
   429c4:	e13ffc15 	stw	r4,-16(fp)
   429c8:	e17ffd15 	stw	r5,-12(fp)
   429cc:	e1bffe15 	stw	r6,-8(fp)
   429d0:	e1ffff15 	stw	r7,-4(fp)
    uint8_t hash160[sizeof(uint160)+1];
    hash160[0] = chain->b58prefix_pubkey_address;
   429d4:	e0bffd17 	ldw	r2,-12(fp)
   429d8:	10800803 	ldbu	r2,32(r2)
   429dc:	e0bff605 	stb	r2,-40(fp)
    btc_hdnode_get_hash160(node, hash160 + 1);
   429e0:	e0bff644 	addi	r2,fp,-39
   429e4:	100b883a 	mov	r5,r2
   429e8:	e13ffc17 	ldw	r4,-16(fp)
   429ec:	004295c0 	call	4295c <btc_hdnode_get_hash160>
    btc_base58_encode_check(hash160, sizeof(hash160), str, strsize);
   429f0:	e1ffff17 	ldw	r7,-4(fp)
   429f4:	e1bffe17 	ldw	r6,-8(fp)
   429f8:	01400544 	movi	r5,21
   429fc:	e13ff604 	addi	r4,fp,-40
   42a00:	0041be40 	call	41be4 <btc_base58_encode_check>
}
   42a04:	0001883a 	nop
   42a08:	e037883a 	mov	sp,fp
   42a0c:	dfc00117 	ldw	ra,4(sp)
   42a10:	df000017 	ldw	fp,0(sp)
   42a14:	dec00204 	addi	sp,sp,8
   42a18:	f800283a 	ret

00042a1c <btc_hdnode_get_pub_hex>:

btc_bool btc_hdnode_get_pub_hex(const btc_hdnode* node, char* str, size_t* strsize)
{
   42a1c:	deffea04 	addi	sp,sp,-88
   42a20:	dfc01515 	stw	ra,84(sp)
   42a24:	df001415 	stw	fp,80(sp)
   42a28:	df001404 	addi	fp,sp,80
   42a2c:	e13ffd15 	stw	r4,-12(fp)
   42a30:	e17ffe15 	stw	r5,-8(fp)
   42a34:	e1bfff15 	stw	r6,-4(fp)
    btc_pubkey pubkey;
    btc_pubkey_init(&pubkey);
   42a38:	e13fec04 	addi	r4,fp,-80
   42a3c:	00072140 	call	7214 <btc_pubkey_init>
    memcpy(&pubkey.pubkey, node->public_key, BTC_ECKEY_COMPRESSED_LENGTH);
   42a40:	e0bffd17 	ldw	r2,-12(fp)
   42a44:	10c01304 	addi	r3,r2,76
   42a48:	e0bfec44 	addi	r2,fp,-79
   42a4c:	01800844 	movi	r6,33
   42a50:	180b883a 	mov	r5,r3
   42a54:	1009883a 	mov	r4,r2
   42a58:	00463980 	call	46398 <memcpy>
    pubkey.compressed = true;
   42a5c:	00800044 	movi	r2,1
   42a60:	e0bfec05 	stb	r2,-80(fp)

    return btc_pubkey_get_hex(&pubkey, str, strsize);
   42a64:	e1bfff17 	ldw	r6,-4(fp)
   42a68:	e17ffe17 	ldw	r5,-8(fp)
   42a6c:	e13fec04 	addi	r4,fp,-80
   42a70:	00073e80 	call	73e8 <btc_pubkey_get_hex>
}
   42a74:	e037883a 	mov	sp,fp
   42a78:	dfc00117 	ldw	ra,4(sp)
   42a7c:	df000017 	ldw	fp,0(sp)
   42a80:	dec00204 	addi	sp,sp,8
   42a84:	f800283a 	ret

00042a88 <btc_hdnode_deserialize>:


// check for validity of curve point in case of public data not performed
btc_bool btc_hdnode_deserialize(const char* str, const btc_chainparams* chain, btc_hdnode* node)
{
   42a88:	deffed04 	addi	sp,sp,-76
   42a8c:	dfc01215 	stw	ra,72(sp)
   42a90:	df001115 	stw	fp,68(sp)
   42a94:	ddc01015 	stw	r23,64(sp)
   42a98:	dd800f15 	stw	r22,60(sp)
   42a9c:	dd400e15 	stw	r21,56(sp)
   42aa0:	dd000d15 	stw	r20,52(sp)
   42aa4:	dcc00c15 	stw	r19,48(sp)
   42aa8:	dc800b15 	stw	r18,44(sp)
   42aac:	dc400a15 	stw	r17,40(sp)
   42ab0:	dc000915 	stw	r16,36(sp)
   42ab4:	df001104 	addi	fp,sp,68
   42ab8:	e13ff315 	stw	r4,-52(fp)
   42abc:	e17ff415 	stw	r5,-48(fp)
   42ac0:	e1bff515 	stw	r6,-44(fp)
   42ac4:	d805883a 	mov	r2,sp
   42ac8:	e0bff615 	stw	r2,-40(fp)
    uint8_t node_data[strlen(str)];
   42acc:	e13ff317 	ldw	r4,-52(fp)
   42ad0:	0046c3c0 	call	46c3c <strlen>
   42ad4:	e0bff715 	stw	r2,-36(fp)
   42ad8:	e0bff717 	ldw	r2,-36(fp)
   42adc:	10bfffc4 	addi	r2,r2,-1
   42ae0:	e0bfef15 	stw	r2,-68(fp)
   42ae4:	e5bff717 	ldw	r22,-36(fp)
   42ae8:	002f883a 	mov	r23,zero
   42aec:	b004d77a 	srli	r2,r22,29
   42af0:	b82690fa 	slli	r19,r23,3
   42af4:	14e6b03a 	or	r19,r2,r19
   42af8:	b02490fa 	slli	r18,r22,3
   42afc:	e53ff717 	ldw	r20,-36(fp)
   42b00:	002b883a 	mov	r21,zero
   42b04:	a004d77a 	srli	r2,r20,29
   42b08:	a82290fa 	slli	r17,r21,3
   42b0c:	1462b03a 	or	r17,r2,r17
   42b10:	a02090fa 	slli	r16,r20,3
   42b14:	e0fff717 	ldw	r3,-36(fp)
   42b18:	188000c4 	addi	r2,r3,3
   42b1c:	1004d0ba 	srli	r2,r2,2
   42b20:	1085883a 	add	r2,r2,r2
   42b24:	1085883a 	add	r2,r2,r2
   42b28:	d8b7c83a 	sub	sp,sp,r2
   42b2c:	d805883a 	mov	r2,sp
   42b30:	1005883a 	mov	r2,r2
   42b34:	e0bff015 	stw	r2,-64(fp)
    memset(node, 0, sizeof(btc_hdnode));
   42b38:	01801c04 	movi	r6,112
   42b3c:	000b883a 	mov	r5,zero
   42b40:	e13ff517 	ldw	r4,-44(fp)
   42b44:	00464200 	call	46420 <memset>
    size_t outlen = 0;
   42b48:	e03ff115 	stw	zero,-60(fp)

    outlen = btc_base58_decode_check(str, node_data, sizeof(node_data));
   42b4c:	e0bff017 	ldw	r2,-64(fp)
   42b50:	e1bff717 	ldw	r6,-36(fp)
   42b54:	100b883a 	mov	r5,r2
   42b58:	e13ff317 	ldw	r4,-52(fp)
   42b5c:	0041d640 	call	41d64 <btc_base58_decode_check>
   42b60:	e0bff115 	stw	r2,-60(fp)
    if (!outlen) {
   42b64:	e0bff117 	ldw	r2,-60(fp)
   42b68:	1000021e 	bne	r2,zero,42b74 <btc_hdnode_deserialize+0xec>
        return false;
   42b6c:	0005883a 	mov	r2,zero
   42b70:	00004406 	br	42c84 <btc_hdnode_deserialize+0x1fc>
    }
    uint32_t version = read_be(node_data);
   42b74:	e0bff017 	ldw	r2,-64(fp)
   42b78:	1009883a 	mov	r4,r2
   42b7c:	0041fd80 	call	41fd8 <read_be>
   42b80:	e0bff215 	stw	r2,-56(fp)
    if (version == chain->b58prefix_bip32_pubkey) { // public node
   42b84:	e0bff417 	ldw	r2,-48(fp)
   42b88:	10c00b17 	ldw	r3,44(r2)
   42b8c:	e0bff217 	ldw	r2,-56(fp)
   42b90:	1880091e 	bne	r3,r2,42bb8 <btc_hdnode_deserialize+0x130>
        memcpy(node->public_key, node_data + 45, BTC_ECKEY_COMPRESSED_LENGTH);
   42b94:	e0bff517 	ldw	r2,-44(fp)
   42b98:	10c01304 	addi	r3,r2,76
   42b9c:	e0bff017 	ldw	r2,-64(fp)
   42ba0:	10800b44 	addi	r2,r2,45
   42ba4:	01800844 	movi	r6,33
   42ba8:	100b883a 	mov	r5,r2
   42bac:	1809883a 	mov	r4,r3
   42bb0:	00463980 	call	46398 <memcpy>
   42bb4:	00001706 	br	42c14 <btc_hdnode_deserialize+0x18c>
    } else if (version == chain->b58prefix_bip32_privkey) { // private node
   42bb8:	e0bff417 	ldw	r2,-48(fp)
   42bbc:	10c00a17 	ldw	r3,40(r2)
   42bc0:	e0bff217 	ldw	r2,-56(fp)
   42bc4:	1880111e 	bne	r3,r2,42c0c <btc_hdnode_deserialize+0x184>
        if (node_data[45]) {                                // invalid data
   42bc8:	e0bff017 	ldw	r2,-64(fp)
   42bcc:	10800b43 	ldbu	r2,45(r2)
   42bd0:	10803fcc 	andi	r2,r2,255
   42bd4:	10000226 	beq	r2,zero,42be0 <btc_hdnode_deserialize+0x158>
            return false;
   42bd8:	0005883a 	mov	r2,zero
   42bdc:	00002906 	br	42c84 <btc_hdnode_deserialize+0x1fc>
        }
        memcpy(node->private_key, node_data + 46, BTC_ECKEY_PKEY_LENGTH);
   42be0:	e0bff517 	ldw	r2,-44(fp)
   42be4:	10c00b04 	addi	r3,r2,44
   42be8:	e0bff017 	ldw	r2,-64(fp)
   42bec:	10800b84 	addi	r2,r2,46
   42bf0:	01800804 	movi	r6,32
   42bf4:	100b883a 	mov	r5,r2
   42bf8:	1809883a 	mov	r4,r3
   42bfc:	00463980 	call	46398 <memcpy>
        btc_hdnode_fill_public_key(node);
   42c00:	e13ff517 	ldw	r4,-44(fp)
   42c04:	00427500 	call	42750 <btc_hdnode_fill_public_key>
   42c08:	00000206 	br	42c14 <btc_hdnode_deserialize+0x18c>
    } else {
        return false; // invalid version
   42c0c:	0005883a 	mov	r2,zero
   42c10:	00001c06 	br	42c84 <btc_hdnode_deserialize+0x1fc>
    }
    node->depth = node_data[4];
   42c14:	e0bff017 	ldw	r2,-64(fp)
   42c18:	10800103 	ldbu	r2,4(r2)
   42c1c:	10c03fcc 	andi	r3,r2,255
   42c20:	e0bff517 	ldw	r2,-44(fp)
   42c24:	10c00015 	stw	r3,0(r2)
    node->fingerprint = read_be(node_data + 5);
   42c28:	e0bff017 	ldw	r2,-64(fp)
   42c2c:	10800144 	addi	r2,r2,5
   42c30:	1009883a 	mov	r4,r2
   42c34:	0041fd80 	call	41fd8 <read_be>
   42c38:	1007883a 	mov	r3,r2
   42c3c:	e0bff517 	ldw	r2,-44(fp)
   42c40:	10c00115 	stw	r3,4(r2)
    node->child_num = read_be(node_data + 9);
   42c44:	e0bff017 	ldw	r2,-64(fp)
   42c48:	10800244 	addi	r2,r2,9
   42c4c:	1009883a 	mov	r4,r2
   42c50:	0041fd80 	call	41fd8 <read_be>
   42c54:	1007883a 	mov	r3,r2
   42c58:	e0bff517 	ldw	r2,-44(fp)
   42c5c:	10c00215 	stw	r3,8(r2)
    memcpy(node->chain_code, node_data + 13, BTC_BIP32_CHAINCODE_SIZE);
   42c60:	e0bff517 	ldw	r2,-44(fp)
   42c64:	10c00304 	addi	r3,r2,12
   42c68:	e0bff017 	ldw	r2,-64(fp)
   42c6c:	10800344 	addi	r2,r2,13
   42c70:	01800804 	movi	r6,32
   42c74:	100b883a 	mov	r5,r2
   42c78:	1809883a 	mov	r4,r3
   42c7c:	00463980 	call	46398 <memcpy>
    return true;
   42c80:	00800044 	movi	r2,1
   42c84:	e6fff617 	ldw	sp,-40(fp)
}
   42c88:	e6fff804 	addi	sp,fp,-32
   42c8c:	dfc00917 	ldw	ra,36(sp)
   42c90:	df000817 	ldw	fp,32(sp)
   42c94:	ddc00717 	ldw	r23,28(sp)
   42c98:	dd800617 	ldw	r22,24(sp)
   42c9c:	dd400517 	ldw	r21,20(sp)
   42ca0:	dd000417 	ldw	r20,16(sp)
   42ca4:	dcc00317 	ldw	r19,12(sp)
   42ca8:	dc800217 	ldw	r18,8(sp)
   42cac:	dc400117 	ldw	r17,4(sp)
   42cb0:	dc000017 	ldw	r16,0(sp)
   42cb4:	dec00a04 	addi	sp,sp,40
   42cb8:	f800283a 	ret

00042cbc <btc_hd_generate_key>:

btc_bool btc_hd_generate_key(btc_hdnode* node, const char* keypath, const uint8_t* keymaster, const uint8_t* chaincode, btc_bool usepubckd)
{
   42cbc:	defff304 	addi	sp,sp,-52
   42cc0:	dfc00c15 	stw	ra,48(sp)
   42cc4:	df000b15 	stw	fp,44(sp)
   42cc8:	df000b04 	addi	fp,sp,44
   42ccc:	e13ffb15 	stw	r4,-20(fp)
   42cd0:	e17ffc15 	stw	r5,-16(fp)
   42cd4:	e1bffd15 	stw	r6,-12(fp)
   42cd8:	e1fffe15 	stw	r7,-8(fp)
   42cdc:	e0800217 	ldw	r2,8(fp)
   42ce0:	e0bfff05 	stb	r2,-4(fp)
    static char delim[] = "/";
    static char prime[] = "phH\'";
    static char digits[] = "0123456789";
    uint64_t idx = 0;
   42ce4:	e03ff815 	stw	zero,-32(fp)
   42ce8:	e03ff915 	stw	zero,-28(fp)
    assert(strlens(keypath) < 1024);
   42cec:	e0bffc17 	ldw	r2,-16(fp)
   42cf0:	10000c26 	beq	r2,zero,42d24 <btc_hd_generate_key+0x68>
   42cf4:	e13ffc17 	ldw	r4,-16(fp)
   42cf8:	0046c3c0 	call	46c3c <strlen>
   42cfc:	10810030 	cmpltui	r2,r2,1024
   42d00:	1000081e 	bne	r2,zero,42d24 <btc_hd_generate_key+0x68>
   42d04:	01c00174 	movhi	r7,5
   42d08:	39da6204 	addi	r7,r7,27016
   42d0c:	01800174 	movhi	r6,5
   42d10:	319a6c04 	addi	r6,r6,27056
   42d14:	01404d04 	movi	r5,308
   42d18:	01000174 	movhi	r4,5
   42d1c:	211a6804 	addi	r4,r4,27040
   42d20:	0045fec0 	call	45fec <__assert_func>
    char *pch, *kp = btc_malloc(strlens(keypath) + 1);
   42d24:	e0bffc17 	ldw	r2,-16(fp)
   42d28:	10000426 	beq	r2,zero,42d3c <btc_hd_generate_key+0x80>
   42d2c:	e13ffc17 	ldw	r4,-16(fp)
   42d30:	0046c3c0 	call	46c3c <strlen>
   42d34:	10800044 	addi	r2,r2,1
   42d38:	00000106 	br	42d40 <btc_hd_generate_key+0x84>
   42d3c:	00800044 	movi	r2,1
   42d40:	1009883a 	mov	r4,r2
   42d44:	00082c40 	call	82c4 <btc_malloc>
   42d48:	e0bffa15 	stw	r2,-24(fp)

    if (!kp) {
   42d4c:	e0bffa17 	ldw	r2,-24(fp)
   42d50:	1000021e 	bne	r2,zero,42d5c <btc_hd_generate_key+0xa0>
        return false;
   42d54:	0005883a 	mov	r2,zero
   42d58:	0000bb06 	br	43048 <btc_hd_generate_key+0x38c>
    }

    if (strlens(keypath) < strlens("m/")) {
   42d5c:	e0bffc17 	ldw	r2,-16(fp)
   42d60:	1000b626 	beq	r2,zero,4303c <btc_hd_generate_key+0x380>
   42d64:	e13ffc17 	ldw	r4,-16(fp)
   42d68:	0046c3c0 	call	46c3c <strlen>
   42d6c:	108000b0 	cmpltui	r2,r2,2
   42d70:	1000b21e 	bne	r2,zero,4303c <btc_hd_generate_key+0x380>
        goto err;
    }

    memset(kp, 0, strlens(keypath) + 1);
   42d74:	e0bffc17 	ldw	r2,-16(fp)
   42d78:	10000426 	beq	r2,zero,42d8c <btc_hd_generate_key+0xd0>
   42d7c:	e13ffc17 	ldw	r4,-16(fp)
   42d80:	0046c3c0 	call	46c3c <strlen>
   42d84:	10800044 	addi	r2,r2,1
   42d88:	00000106 	br	42d90 <btc_hd_generate_key+0xd4>
   42d8c:	00800044 	movi	r2,1
   42d90:	100d883a 	mov	r6,r2
   42d94:	000b883a 	mov	r5,zero
   42d98:	e13ffa17 	ldw	r4,-24(fp)
   42d9c:	00464200 	call	46420 <memset>
    memcpy(kp, keypath, strlens(keypath));
   42da0:	e0bffc17 	ldw	r2,-16(fp)
   42da4:	10000326 	beq	r2,zero,42db4 <btc_hd_generate_key+0xf8>
   42da8:	e13ffc17 	ldw	r4,-16(fp)
   42dac:	0046c3c0 	call	46c3c <strlen>
   42db0:	00000106 	br	42db8 <btc_hd_generate_key+0xfc>
   42db4:	0005883a 	mov	r2,zero
   42db8:	100d883a 	mov	r6,r2
   42dbc:	e17ffc17 	ldw	r5,-16(fp)
   42dc0:	e13ffa17 	ldw	r4,-24(fp)
   42dc4:	00463980 	call	46398 <memcpy>

    if (kp[0] != 'm' || kp[1] != '/') {
   42dc8:	e0bffa17 	ldw	r2,-24(fp)
   42dcc:	10800003 	ldbu	r2,0(r2)
   42dd0:	10803fcc 	andi	r2,r2,255
   42dd4:	1080201c 	xori	r2,r2,128
   42dd8:	10bfe004 	addi	r2,r2,-128
   42ddc:	10801b58 	cmpnei	r2,r2,109
   42de0:	1000961e 	bne	r2,zero,4303c <btc_hd_generate_key+0x380>
   42de4:	e0bffa17 	ldw	r2,-24(fp)
   42de8:	10800044 	addi	r2,r2,1
   42dec:	10800003 	ldbu	r2,0(r2)
   42df0:	10803fcc 	andi	r2,r2,255
   42df4:	1080201c 	xori	r2,r2,128
   42df8:	10bfe004 	addi	r2,r2,-128
   42dfc:	10800bd8 	cmpnei	r2,r2,47
   42e00:	10008e1e 	bne	r2,zero,4303c <btc_hd_generate_key+0x380>
        goto err;
    }

    node->depth = 0;
   42e04:	e0bffb17 	ldw	r2,-20(fp)
   42e08:	10000015 	stw	zero,0(r2)
    node->child_num = 0;
   42e0c:	e0bffb17 	ldw	r2,-20(fp)
   42e10:	10000215 	stw	zero,8(r2)
    node->fingerprint = 0;
   42e14:	e0bffb17 	ldw	r2,-20(fp)
   42e18:	10000115 	stw	zero,4(r2)
    memcpy(node->chain_code, chaincode, BTC_BIP32_CHAINCODE_SIZE);
   42e1c:	e0bffb17 	ldw	r2,-20(fp)
   42e20:	10800304 	addi	r2,r2,12
   42e24:	01800804 	movi	r6,32
   42e28:	e17ffe17 	ldw	r5,-8(fp)
   42e2c:	1009883a 	mov	r4,r2
   42e30:	00463980 	call	46398 <memcpy>
    if (usepubckd == true) {
   42e34:	e0bfff03 	ldbu	r2,-4(fp)
   42e38:	10800058 	cmpnei	r2,r2,1
   42e3c:	1000071e 	bne	r2,zero,42e5c <btc_hd_generate_key+0x1a0>
        memcpy(node->public_key, keymaster, BTC_ECKEY_COMPRESSED_LENGTH);
   42e40:	e0bffb17 	ldw	r2,-20(fp)
   42e44:	10801304 	addi	r2,r2,76
   42e48:	01800844 	movi	r6,33
   42e4c:	e17ffd17 	ldw	r5,-12(fp)
   42e50:	1009883a 	mov	r4,r2
   42e54:	00463980 	call	46398 <memcpy>
   42e58:	00000806 	br	42e7c <btc_hd_generate_key+0x1c0>
    } else {
        memcpy(node->private_key, keymaster, BTC_ECKEY_PKEY_LENGTH);
   42e5c:	e0bffb17 	ldw	r2,-20(fp)
   42e60:	10800b04 	addi	r2,r2,44
   42e64:	01800804 	movi	r6,32
   42e68:	e17ffd17 	ldw	r5,-12(fp)
   42e6c:	1009883a 	mov	r4,r2
   42e70:	00463980 	call	46398 <memcpy>
        btc_hdnode_fill_public_key(node);
   42e74:	e13ffb17 	ldw	r4,-20(fp)
   42e78:	00427500 	call	42750 <btc_hdnode_fill_public_key>
    }

    pch = strtok(kp + 2, delim);
   42e7c:	e0bffa17 	ldw	r2,-24(fp)
   42e80:	10800084 	addi	r2,r2,2
   42e84:	d1601104 	addi	r5,gp,-32700
   42e88:	1009883a 	mov	r4,r2
   42e8c:	0046d300 	call	46d30 <strtok>
   42e90:	e0bff515 	stw	r2,-44(fp)
    while (pch != NULL) {
   42e94:	00005e06 	br	43010 <btc_hd_generate_key+0x354>
        size_t i = 0;
   42e98:	e03ff615 	stw	zero,-40(fp)
        int prm = 0;
   42e9c:	e03ff715 	stw	zero,-36(fp)
        for (; i < strlens(pch); i++) {
   42ea0:	00002906 	br	42f48 <btc_hd_generate_key+0x28c>
            if (strchr(prime, pch[i])) {
   42ea4:	e0fff517 	ldw	r3,-44(fp)
   42ea8:	e0bff617 	ldw	r2,-40(fp)
   42eac:	1885883a 	add	r2,r3,r2
   42eb0:	10800003 	ldbu	r2,0(r2)
   42eb4:	10803fcc 	andi	r2,r2,255
   42eb8:	1080201c 	xori	r2,r2,128
   42ebc:	10bfe004 	addi	r2,r2,-128
   42ec0:	100b883a 	mov	r5,r2
   42ec4:	d1201204 	addi	r4,gp,-32696
   42ec8:	0046ba80 	call	46ba8 <strchr>
   42ecc:	10000f26 	beq	r2,zero,42f0c <btc_hd_generate_key+0x250>
                if ((i != strlens(pch) - 1) || usepubckd == true) {
   42ed0:	e0bff517 	ldw	r2,-44(fp)
   42ed4:	10000426 	beq	r2,zero,42ee8 <btc_hd_generate_key+0x22c>
   42ed8:	e13ff517 	ldw	r4,-44(fp)
   42edc:	0046c3c0 	call	46c3c <strlen>
   42ee0:	10bfffc4 	addi	r2,r2,-1
   42ee4:	00000106 	br	42eec <btc_hd_generate_key+0x230>
   42ee8:	00bfffc4 	movi	r2,-1
   42eec:	e0fff617 	ldw	r3,-40(fp)
   42ef0:	10c0521e 	bne	r2,r3,4303c <btc_hd_generate_key+0x380>
   42ef4:	e0bfff03 	ldbu	r2,-4(fp)
   42ef8:	10800060 	cmpeqi	r2,r2,1
   42efc:	10004f1e 	bne	r2,zero,4303c <btc_hd_generate_key+0x380>
                    goto err;
                }
                prm = 1;
   42f00:	00800044 	movi	r2,1
   42f04:	e0bff715 	stw	r2,-36(fp)
   42f08:	00000c06 	br	42f3c <btc_hd_generate_key+0x280>
            } else if (!strchr(digits, pch[i])) {
   42f0c:	e0fff517 	ldw	r3,-44(fp)
   42f10:	e0bff617 	ldw	r2,-40(fp)
   42f14:	1885883a 	add	r2,r3,r2
   42f18:	10800003 	ldbu	r2,0(r2)
   42f1c:	10803fcc 	andi	r2,r2,255
   42f20:	1080201c 	xori	r2,r2,128
   42f24:	10bfe004 	addi	r2,r2,-128
   42f28:	100b883a 	mov	r5,r2
   42f2c:	01000174 	movhi	r4,5
   42f30:	211b8204 	addi	r4,r4,28168
   42f34:	0046ba80 	call	46ba8 <strchr>
   42f38:	10003b26 	beq	r2,zero,43028 <btc_hd_generate_key+0x36c>

    pch = strtok(kp + 2, delim);
    while (pch != NULL) {
        size_t i = 0;
        int prm = 0;
        for (; i < strlens(pch); i++) {
   42f3c:	e0bff617 	ldw	r2,-40(fp)
   42f40:	10800044 	addi	r2,r2,1
   42f44:	e0bff615 	stw	r2,-40(fp)
   42f48:	e0bff517 	ldw	r2,-44(fp)
   42f4c:	10000426 	beq	r2,zero,42f60 <btc_hd_generate_key+0x2a4>
   42f50:	e13ff517 	ldw	r4,-44(fp)
   42f54:	0046c3c0 	call	46c3c <strlen>
   42f58:	1007883a 	mov	r3,r2
   42f5c:	00000106 	br	42f64 <btc_hd_generate_key+0x2a8>
   42f60:	0007883a 	mov	r3,zero
   42f64:	e0bff617 	ldw	r2,-40(fp)
   42f68:	10ffce36 	bltu	r2,r3,42ea4 <__alt_mem_epcs_flash_controller+0xfe039ea4>
            } else if (!strchr(digits, pch[i])) {
                goto err;
            }
        }

        idx = strtoull(pch, NULL, 10);
   42f6c:	01800284 	movi	r6,10
   42f70:	000b883a 	mov	r5,zero
   42f74:	e13ff517 	ldw	r4,-44(fp)
   42f78:	0046e940 	call	46e94 <strtoull>
   42f7c:	e0bff815 	stw	r2,-32(fp)
   42f80:	e0fff915 	stw	r3,-28(fp)
        if (idx > UINT32_MAX) {
   42f84:	e0bff917 	ldw	r2,-28(fp)
   42f88:	1000291e 	bne	r2,zero,43030 <btc_hd_generate_key+0x374>
            goto err;
        }

        if (prm) {
   42f8c:	e0bff717 	ldw	r2,-36(fp)
   42f90:	10000926 	beq	r2,zero,42fb8 <btc_hd_generate_key+0x2fc>
            if (btc_hdnode_private_ckd_prime(node, idx) != true) {
   42f94:	e0bff817 	ldw	r2,-32(fp)
   42f98:	10a00034 	orhi	r2,r2,32768
   42f9c:	100b883a 	mov	r5,r2
   42fa0:	e13ffb17 	ldw	r4,-20(fp)
   42fa4:	00424980 	call	42498 <btc_hdnode_private_ckd>
   42fa8:	10803fcc 	andi	r2,r2,255
   42fac:	10800060 	cmpeqi	r2,r2,1
   42fb0:	1000131e 	bne	r2,zero,43000 <btc_hd_generate_key+0x344>
                goto err;
   42fb4:	00002106 	br	4303c <btc_hd_generate_key+0x380>
            }
        } else {
            if ((usepubckd == true ? btc_hdnode_public_ckd(node, idx) : btc_hdnode_private_ckd(node, idx)) != true) {
   42fb8:	e0bfff03 	ldbu	r2,-4(fp)
   42fbc:	10800058 	cmpnei	r2,r2,1
   42fc0:	1000071e 	bne	r2,zero,42fe0 <btc_hd_generate_key+0x324>
   42fc4:	e0bff817 	ldw	r2,-32(fp)
   42fc8:	100b883a 	mov	r5,r2
   42fcc:	e13ffb17 	ldw	r4,-20(fp)
   42fd0:	00422c00 	call	422c0 <btc_hdnode_public_ckd>
   42fd4:	10803fcc 	andi	r2,r2,255
   42fd8:	10800058 	cmpnei	r2,r2,1
   42fdc:	00000606 	br	42ff8 <btc_hd_generate_key+0x33c>
   42fe0:	e0bff817 	ldw	r2,-32(fp)
   42fe4:	100b883a 	mov	r5,r2
   42fe8:	e13ffb17 	ldw	r4,-20(fp)
   42fec:	00424980 	call	42498 <btc_hdnode_private_ckd>
   42ff0:	10803fcc 	andi	r2,r2,255
   42ff4:	10800058 	cmpnei	r2,r2,1
   42ff8:	10803fcc 	andi	r2,r2,255
   42ffc:	10000e1e 	bne	r2,zero,43038 <btc_hd_generate_key+0x37c>
                goto err;
            }
        }
        pch = strtok(NULL, delim);
   43000:	d1601104 	addi	r5,gp,-32700
   43004:	0009883a 	mov	r4,zero
   43008:	0046d300 	call	46d30 <strtok>
   4300c:	e0bff515 	stw	r2,-44(fp)
        memcpy(node->private_key, keymaster, BTC_ECKEY_PKEY_LENGTH);
        btc_hdnode_fill_public_key(node);
    }

    pch = strtok(kp + 2, delim);
    while (pch != NULL) {
   43010:	e0bff517 	ldw	r2,-44(fp)
   43014:	103fa01e 	bne	r2,zero,42e98 <__alt_mem_epcs_flash_controller+0xfe039e98>
                goto err;
            }
        }
        pch = strtok(NULL, delim);
    }
    btc_free(kp);
   43018:	e13ffa17 	ldw	r4,-24(fp)
   4301c:	00083880 	call	8388 <btc_free>
    return true;
   43020:	00800044 	movi	r2,1
   43024:	00000806 	br	43048 <btc_hd_generate_key+0x38c>
                if ((i != strlens(pch) - 1) || usepubckd == true) {
                    goto err;
                }
                prm = 1;
            } else if (!strchr(digits, pch[i])) {
                goto err;
   43028:	0001883a 	nop
   4302c:	00000306 	br	4303c <btc_hd_generate_key+0x380>
            }
        }

        idx = strtoull(pch, NULL, 10);
        if (idx > UINT32_MAX) {
            goto err;
   43030:	0001883a 	nop
   43034:	00000106 	br	4303c <btc_hd_generate_key+0x380>
            if (btc_hdnode_private_ckd_prime(node, idx) != true) {
                goto err;
            }
        } else {
            if ((usepubckd == true ? btc_hdnode_public_ckd(node, idx) : btc_hdnode_private_ckd(node, idx)) != true) {
                goto err;
   43038:	0001883a 	nop
    }
    btc_free(kp);
    return true;

err:
    btc_free(kp);
   4303c:	e13ffa17 	ldw	r4,-24(fp)
   43040:	00083880 	call	8388 <btc_free>
    return false;
   43044:	0005883a 	mov	r2,zero
}
   43048:	e037883a 	mov	sp,fp
   4304c:	dfc00117 	ldw	ra,4(sp)
   43050:	df000017 	ldw	fp,0(sp)
   43054:	dec00204 	addi	sp,sp,8
   43058:	f800283a 	ret

0004305c <btc_hdnode_has_privkey>:

btc_bool btc_hdnode_has_privkey(btc_hdnode* node)
{
   4305c:	defffd04 	addi	sp,sp,-12
   43060:	df000215 	stw	fp,8(sp)
   43064:	df000204 	addi	fp,sp,8
   43068:	e13fff15 	stw	r4,-4(fp)
    int i;
    for (i = 0; i < BTC_ECKEY_PKEY_LENGTH; ++i) {
   4306c:	e03ffe15 	stw	zero,-8(fp)
   43070:	00000c06 	br	430a4 <btc_hdnode_has_privkey+0x48>
        if (node->private_key[i] != 0)
   43074:	e0ffff17 	ldw	r3,-4(fp)
   43078:	e0bffe17 	ldw	r2,-8(fp)
   4307c:	1885883a 	add	r2,r3,r2
   43080:	10800b04 	addi	r2,r2,44
   43084:	10800003 	ldbu	r2,0(r2)
   43088:	10803fcc 	andi	r2,r2,255
   4308c:	10000226 	beq	r2,zero,43098 <btc_hdnode_has_privkey+0x3c>
            return true;
   43090:	00800044 	movi	r2,1
   43094:	00000706 	br	430b4 <btc_hdnode_has_privkey+0x58>
}

btc_bool btc_hdnode_has_privkey(btc_hdnode* node)
{
    int i;
    for (i = 0; i < BTC_ECKEY_PKEY_LENGTH; ++i) {
   43098:	e0bffe17 	ldw	r2,-8(fp)
   4309c:	10800044 	addi	r2,r2,1
   430a0:	e0bffe15 	stw	r2,-8(fp)
   430a4:	e0bffe17 	ldw	r2,-8(fp)
   430a8:	10800810 	cmplti	r2,r2,32
   430ac:	103ff11e 	bne	r2,zero,43074 <__alt_mem_epcs_flash_controller+0xfe03a074>
        if (node->private_key[i] != 0)
            return true;
    }
    return false;
   430b0:	0005883a 	mov	r2,zero
}
   430b4:	e037883a 	mov	sp,fp
   430b8:	df000017 	ldw	fp,0(sp)
   430bc:	dec00104 	addi	sp,sp,4
   430c0:	f800283a 	ret

000430c4 <cstr_alloc_min_sz>:

#include "..\include\btc\cstr.h"
#include "..\include\btc\memory.h"

static int cstr_alloc_min_sz(cstring* s, size_t sz)
{
   430c4:	defff904 	addi	sp,sp,-28
   430c8:	dfc00615 	stw	ra,24(sp)
   430cc:	df000515 	stw	fp,20(sp)
   430d0:	df000504 	addi	fp,sp,20
   430d4:	e13ffe15 	stw	r4,-8(fp)
   430d8:	e17fff15 	stw	r5,-4(fp)
    unsigned int shift;
    unsigned int al_sz;
    char* new_s;

    sz++; /* NULL overhead */
   430dc:	e0bfff17 	ldw	r2,-4(fp)
   430e0:	10800044 	addi	r2,r2,1
   430e4:	e0bfff15 	stw	r2,-4(fp)

    if (s->alloc && (s->alloc >= sz))
   430e8:	e0bffe17 	ldw	r2,-8(fp)
   430ec:	10800217 	ldw	r2,8(r2)
   430f0:	10000626 	beq	r2,zero,4310c <cstr_alloc_min_sz+0x48>
   430f4:	e0bffe17 	ldw	r2,-8(fp)
   430f8:	10c00217 	ldw	r3,8(r2)
   430fc:	e0bfff17 	ldw	r2,-4(fp)
   43100:	18800236 	bltu	r3,r2,4310c <cstr_alloc_min_sz+0x48>
        return 1;
   43104:	00800044 	movi	r2,1
   43108:	00002406 	br	4319c <cstr_alloc_min_sz+0xd8>

    shift = 3;
   4310c:	008000c4 	movi	r2,3
   43110:	e0bffb15 	stw	r2,-20(fp)
    while ((al_sz = (1 << shift)) < sz)
   43114:	00000306 	br	43124 <cstr_alloc_min_sz+0x60>
        shift++;
   43118:	e0bffb17 	ldw	r2,-20(fp)
   4311c:	10800044 	addi	r2,r2,1
   43120:	e0bffb15 	stw	r2,-20(fp)

    if (s->alloc && (s->alloc >= sz))
        return 1;

    shift = 3;
    while ((al_sz = (1 << shift)) < sz)
   43124:	00c00044 	movi	r3,1
   43128:	e0bffb17 	ldw	r2,-20(fp)
   4312c:	1884983a 	sll	r2,r3,r2
   43130:	e0bffc15 	stw	r2,-16(fp)
   43134:	e0fffc17 	ldw	r3,-16(fp)
   43138:	e0bfff17 	ldw	r2,-4(fp)
   4313c:	18bff636 	bltu	r3,r2,43118 <__alt_mem_epcs_flash_controller+0xfe03a118>
        shift++;

    new_s = btc_realloc(s->str, al_sz);
   43140:	e0bffe17 	ldw	r2,-8(fp)
   43144:	10800017 	ldw	r2,0(r2)
   43148:	e17ffc17 	ldw	r5,-16(fp)
   4314c:	1009883a 	mov	r4,r2
   43150:	00083440 	call	8344 <btc_realloc>
   43154:	e0bffd15 	stw	r2,-12(fp)
    if (!new_s)
   43158:	e0bffd17 	ldw	r2,-12(fp)
   4315c:	1000021e 	bne	r2,zero,43168 <cstr_alloc_min_sz+0xa4>
        return 0;
   43160:	0005883a 	mov	r2,zero
   43164:	00000d06 	br	4319c <cstr_alloc_min_sz+0xd8>

    s->str = new_s;
   43168:	e0bffe17 	ldw	r2,-8(fp)
   4316c:	e0fffd17 	ldw	r3,-12(fp)
   43170:	10c00015 	stw	r3,0(r2)
    s->alloc = al_sz;
   43174:	e0bffe17 	ldw	r2,-8(fp)
   43178:	e0fffc17 	ldw	r3,-16(fp)
   4317c:	10c00215 	stw	r3,8(r2)
    s->str[s->len] = 0;
   43180:	e0bffe17 	ldw	r2,-8(fp)
   43184:	10c00017 	ldw	r3,0(r2)
   43188:	e0bffe17 	ldw	r2,-8(fp)
   4318c:	10800117 	ldw	r2,4(r2)
   43190:	1885883a 	add	r2,r3,r2
   43194:	10000005 	stb	zero,0(r2)

    return 1;
   43198:	00800044 	movi	r2,1
}
   4319c:	e037883a 	mov	sp,fp
   431a0:	dfc00117 	ldw	ra,4(sp)
   431a4:	df000017 	ldw	fp,0(sp)
   431a8:	dec00204 	addi	sp,sp,8
   431ac:	f800283a 	ret

000431b0 <cstr_alloc_minsize>:

int cstr_alloc_minsize(cstring* s, size_t new_sz)
{
   431b0:	defffc04 	addi	sp,sp,-16
   431b4:	dfc00315 	stw	ra,12(sp)
   431b8:	df000215 	stw	fp,8(sp)
   431bc:	df000204 	addi	fp,sp,8
   431c0:	e13ffe15 	stw	r4,-8(fp)
   431c4:	e17fff15 	stw	r5,-4(fp)
    /* no change */
    if (new_sz == s->len)
   431c8:	e0bffe17 	ldw	r2,-8(fp)
   431cc:	10c00117 	ldw	r3,4(r2)
   431d0:	e0bfff17 	ldw	r2,-4(fp)
   431d4:	1880021e 	bne	r3,r2,431e0 <cstr_alloc_minsize+0x30>
        return 1;
   431d8:	00800044 	movi	r2,1
   431dc:	00001306 	br	4322c <cstr_alloc_minsize+0x7c>

    /* truncate string */
    if (new_sz <= s->len) {
   431e0:	e0bffe17 	ldw	r2,-8(fp)
   431e4:	10c00117 	ldw	r3,4(r2)
   431e8:	e0bfff17 	ldw	r2,-4(fp)
   431ec:	18800236 	bltu	r3,r2,431f8 <cstr_alloc_minsize+0x48>
        return 0;
   431f0:	0005883a 	mov	r2,zero
   431f4:	00000d06 	br	4322c <cstr_alloc_minsize+0x7c>
    }

    /* increase string size */
    if (!cstr_alloc_min_sz(s, new_sz))
   431f8:	e17fff17 	ldw	r5,-4(fp)
   431fc:	e13ffe17 	ldw	r4,-8(fp)
   43200:	00430c40 	call	430c4 <cstr_alloc_min_sz>
   43204:	1000021e 	bne	r2,zero,43210 <cstr_alloc_minsize+0x60>
        return 0;
   43208:	0005883a 	mov	r2,zero
   4320c:	00000706 	br	4322c <cstr_alloc_minsize+0x7c>

    /* contents of string tail undefined */
    //s->len = new_sz;
    s->str[s->len] = 0;
   43210:	e0bffe17 	ldw	r2,-8(fp)
   43214:	10c00017 	ldw	r3,0(r2)
   43218:	e0bffe17 	ldw	r2,-8(fp)
   4321c:	10800117 	ldw	r2,4(r2)
   43220:	1885883a 	add	r2,r3,r2
   43224:	10000005 	stb	zero,0(r2)

    return 1;
   43228:	00800044 	movi	r2,1
}
   4322c:	e037883a 	mov	sp,fp
   43230:	dfc00117 	ldw	ra,4(sp)
   43234:	df000017 	ldw	fp,0(sp)
   43238:	dec00204 	addi	sp,sp,8
   4323c:	f800283a 	ret

00043240 <cstr_new_sz>:

cstring* cstr_new_sz(size_t sz)
{
   43240:	defffc04 	addi	sp,sp,-16
   43244:	dfc00315 	stw	ra,12(sp)
   43248:	df000215 	stw	fp,8(sp)
   4324c:	df000204 	addi	fp,sp,8
   43250:	e13fff15 	stw	r4,-4(fp)
    cstring* s = btc_calloc(1, sizeof(cstring));
   43254:	01400304 	movi	r5,12
   43258:	01000044 	movi	r4,1
   4325c:	00083000 	call	8300 <btc_calloc>
   43260:	e0bffe15 	stw	r2,-8(fp)
    if (!s)
   43264:	e0bffe17 	ldw	r2,-8(fp)
   43268:	1000021e 	bne	r2,zero,43274 <cstr_new_sz+0x34>
        return NULL;
   4326c:	0005883a 	mov	r2,zero
   43270:	00000906 	br	43298 <cstr_new_sz+0x58>

    if (!cstr_alloc_min_sz(s, sz)) {
   43274:	e17fff17 	ldw	r5,-4(fp)
   43278:	e13ffe17 	ldw	r4,-8(fp)
   4327c:	00430c40 	call	430c4 <cstr_alloc_min_sz>
   43280:	1000041e 	bne	r2,zero,43294 <cstr_new_sz+0x54>
        btc_free(s);
   43284:	e13ffe17 	ldw	r4,-8(fp)
   43288:	00083880 	call	8388 <btc_free>
        return NULL;
   4328c:	0005883a 	mov	r2,zero
   43290:	00000106 	br	43298 <cstr_new_sz+0x58>
    }

    return s;
   43294:	e0bffe17 	ldw	r2,-8(fp)
}
   43298:	e037883a 	mov	sp,fp
   4329c:	dfc00117 	ldw	ra,4(sp)
   432a0:	df000017 	ldw	fp,0(sp)
   432a4:	dec00204 	addi	sp,sp,8
   432a8:	f800283a 	ret

000432ac <cstr_new_buf>:

cstring* cstr_new_buf(const void* buf, size_t sz)
{
   432ac:	defffb04 	addi	sp,sp,-20
   432b0:	dfc00415 	stw	ra,16(sp)
   432b4:	df000315 	stw	fp,12(sp)
   432b8:	df000304 	addi	fp,sp,12
   432bc:	e13ffe15 	stw	r4,-8(fp)
   432c0:	e17fff15 	stw	r5,-4(fp)
    cstring* s = cstr_new_sz(sz);
   432c4:	e13fff17 	ldw	r4,-4(fp)
   432c8:	00432400 	call	43240 <cstr_new_sz>
   432cc:	e0bffd15 	stw	r2,-12(fp)
    if (!s)
   432d0:	e0bffd17 	ldw	r2,-12(fp)
   432d4:	1000021e 	bne	r2,zero,432e0 <cstr_new_buf+0x34>
        return NULL;
   432d8:	0005883a 	mov	r2,zero
   432dc:	00001006 	br	43320 <cstr_new_buf+0x74>

    memcpy(s->str, buf, sz);
   432e0:	e0bffd17 	ldw	r2,-12(fp)
   432e4:	10800017 	ldw	r2,0(r2)
   432e8:	e1bfff17 	ldw	r6,-4(fp)
   432ec:	e17ffe17 	ldw	r5,-8(fp)
   432f0:	1009883a 	mov	r4,r2
   432f4:	00463980 	call	46398 <memcpy>
    s->len = sz;
   432f8:	e0bffd17 	ldw	r2,-12(fp)
   432fc:	e0ffff17 	ldw	r3,-4(fp)
   43300:	10c00115 	stw	r3,4(r2)
    s->str[s->len] = 0;
   43304:	e0bffd17 	ldw	r2,-12(fp)
   43308:	10c00017 	ldw	r3,0(r2)
   4330c:	e0bffd17 	ldw	r2,-12(fp)
   43310:	10800117 	ldw	r2,4(r2)
   43314:	1885883a 	add	r2,r3,r2
   43318:	10000005 	stb	zero,0(r2)

    return s;
   4331c:	e0bffd17 	ldw	r2,-12(fp)
}
   43320:	e037883a 	mov	sp,fp
   43324:	dfc00117 	ldw	ra,4(sp)
   43328:	df000017 	ldw	fp,0(sp)
   4332c:	dec00204 	addi	sp,sp,8
   43330:	f800283a 	ret

00043334 <cstr_new_cstr>:

cstring* cstr_new_cstr(const cstring* copy_str)
{
   43334:	defffd04 	addi	sp,sp,-12
   43338:	dfc00215 	stw	ra,8(sp)
   4333c:	df000115 	stw	fp,4(sp)
   43340:	df000104 	addi	fp,sp,4
   43344:	e13fff15 	stw	r4,-4(fp)
    return cstr_new_buf(copy_str->str, copy_str->len);
   43348:	e0bfff17 	ldw	r2,-4(fp)
   4334c:	10c00017 	ldw	r3,0(r2)
   43350:	e0bfff17 	ldw	r2,-4(fp)
   43354:	10800117 	ldw	r2,4(r2)
   43358:	100b883a 	mov	r5,r2
   4335c:	1809883a 	mov	r4,r3
   43360:	00432ac0 	call	432ac <cstr_new_buf>
}
   43364:	e037883a 	mov	sp,fp
   43368:	dfc00117 	ldw	ra,4(sp)
   4336c:	df000017 	ldw	fp,0(sp)
   43370:	dec00204 	addi	sp,sp,8
   43374:	f800283a 	ret

00043378 <cstr_new>:

cstring* cstr_new(const char* init_str)
{
   43378:	defffc04 	addi	sp,sp,-16
   4337c:	dfc00315 	stw	ra,12(sp)
   43380:	df000215 	stw	fp,8(sp)
   43384:	df000204 	addi	fp,sp,8
   43388:	e13fff15 	stw	r4,-4(fp)
    size_t slen;

    if (!init_str || !*init_str)
   4338c:	e0bfff17 	ldw	r2,-4(fp)
   43390:	10000626 	beq	r2,zero,433ac <cstr_new+0x34>
   43394:	e0bfff17 	ldw	r2,-4(fp)
   43398:	10800003 	ldbu	r2,0(r2)
   4339c:	10803fcc 	andi	r2,r2,255
   433a0:	1080201c 	xori	r2,r2,128
   433a4:	10bfe004 	addi	r2,r2,-128
   433a8:	1000031e 	bne	r2,zero,433b8 <cstr_new+0x40>
        return cstr_new_sz(0);
   433ac:	0009883a 	mov	r4,zero
   433b0:	00432400 	call	43240 <cstr_new_sz>
   433b4:	00000606 	br	433d0 <cstr_new+0x58>

    slen = strlen(init_str);
   433b8:	e13fff17 	ldw	r4,-4(fp)
   433bc:	0046c3c0 	call	46c3c <strlen>
   433c0:	e0bffe15 	stw	r2,-8(fp)
    return cstr_new_buf(init_str, slen);
   433c4:	e17ffe17 	ldw	r5,-8(fp)
   433c8:	e13fff17 	ldw	r4,-4(fp)
   433cc:	00432ac0 	call	432ac <cstr_new_buf>
}
   433d0:	e037883a 	mov	sp,fp
   433d4:	dfc00117 	ldw	ra,4(sp)
   433d8:	df000017 	ldw	fp,0(sp)
   433dc:	dec00204 	addi	sp,sp,8
   433e0:	f800283a 	ret

000433e4 <cstr_free>:

void cstr_free(cstring* s, int free_buf)
{
   433e4:	defffc04 	addi	sp,sp,-16
   433e8:	dfc00315 	stw	ra,12(sp)
   433ec:	df000215 	stw	fp,8(sp)
   433f0:	df000204 	addi	fp,sp,8
   433f4:	e13ffe15 	stw	r4,-8(fp)
   433f8:	e17fff15 	stw	r5,-4(fp)
    if (!s)
   433fc:	e0bffe17 	ldw	r2,-8(fp)
   43400:	10000d26 	beq	r2,zero,43438 <cstr_free+0x54>
        return;

    if (free_buf)
   43404:	e0bfff17 	ldw	r2,-4(fp)
   43408:	10000426 	beq	r2,zero,4341c <cstr_free+0x38>
        btc_free(s->str);
   4340c:	e0bffe17 	ldw	r2,-8(fp)
   43410:	10800017 	ldw	r2,0(r2)
   43414:	1009883a 	mov	r4,r2
   43418:	00083880 	call	8388 <btc_free>

    memset(s, 0, sizeof(*s));
   4341c:	01800304 	movi	r6,12
   43420:	000b883a 	mov	r5,zero
   43424:	e13ffe17 	ldw	r4,-8(fp)
   43428:	00464200 	call	46420 <memset>
    btc_free(s);
   4342c:	e13ffe17 	ldw	r4,-8(fp)
   43430:	00083880 	call	8388 <btc_free>
   43434:	00000106 	br	4343c <cstr_free+0x58>
}

void cstr_free(cstring* s, int free_buf)
{
    if (!s)
        return;
   43438:	0001883a 	nop
    if (free_buf)
        btc_free(s->str);

    memset(s, 0, sizeof(*s));
    btc_free(s);
}
   4343c:	e037883a 	mov	sp,fp
   43440:	dfc00117 	ldw	ra,4(sp)
   43444:	df000017 	ldw	fp,0(sp)
   43448:	dec00204 	addi	sp,sp,8
   4344c:	f800283a 	ret

00043450 <cstr_resize>:

int cstr_resize(cstring* s, size_t new_sz)
{
   43450:	defffc04 	addi	sp,sp,-16
   43454:	dfc00315 	stw	ra,12(sp)
   43458:	df000215 	stw	fp,8(sp)
   4345c:	df000204 	addi	fp,sp,8
   43460:	e13ffe15 	stw	r4,-8(fp)
   43464:	e17fff15 	stw	r5,-4(fp)
    /* no change */
    if (new_sz == s->len)
   43468:	e0bffe17 	ldw	r2,-8(fp)
   4346c:	10c00117 	ldw	r3,4(r2)
   43470:	e0bfff17 	ldw	r2,-4(fp)
   43474:	1880021e 	bne	r3,r2,43480 <cstr_resize+0x30>
        return 1;
   43478:	00800044 	movi	r2,1
   4347c:	00001f06 	br	434fc <cstr_resize+0xac>

    /* truncate string */
    if (new_sz <= s->len) {
   43480:	e0bffe17 	ldw	r2,-8(fp)
   43484:	10c00117 	ldw	r3,4(r2)
   43488:	e0bfff17 	ldw	r2,-4(fp)
   4348c:	18800b36 	bltu	r3,r2,434bc <cstr_resize+0x6c>
        s->len = new_sz;
   43490:	e0bffe17 	ldw	r2,-8(fp)
   43494:	e0ffff17 	ldw	r3,-4(fp)
   43498:	10c00115 	stw	r3,4(r2)
        s->str[s->len] = 0;
   4349c:	e0bffe17 	ldw	r2,-8(fp)
   434a0:	10c00017 	ldw	r3,0(r2)
   434a4:	e0bffe17 	ldw	r2,-8(fp)
   434a8:	10800117 	ldw	r2,4(r2)
   434ac:	1885883a 	add	r2,r3,r2
   434b0:	10000005 	stb	zero,0(r2)
        return 1;
   434b4:	00800044 	movi	r2,1
   434b8:	00001006 	br	434fc <cstr_resize+0xac>
    }

    /* increase string size */
    if (!cstr_alloc_min_sz(s, new_sz))
   434bc:	e17fff17 	ldw	r5,-4(fp)
   434c0:	e13ffe17 	ldw	r4,-8(fp)
   434c4:	00430c40 	call	430c4 <cstr_alloc_min_sz>
   434c8:	1000021e 	bne	r2,zero,434d4 <cstr_resize+0x84>
        return 0;
   434cc:	0005883a 	mov	r2,zero
   434d0:	00000a06 	br	434fc <cstr_resize+0xac>

    /* contents of string tail undefined */

    s->len = new_sz;
   434d4:	e0bffe17 	ldw	r2,-8(fp)
   434d8:	e0ffff17 	ldw	r3,-4(fp)
   434dc:	10c00115 	stw	r3,4(r2)
    s->str[s->len] = 0;
   434e0:	e0bffe17 	ldw	r2,-8(fp)
   434e4:	10c00017 	ldw	r3,0(r2)
   434e8:	e0bffe17 	ldw	r2,-8(fp)
   434ec:	10800117 	ldw	r2,4(r2)
   434f0:	1885883a 	add	r2,r3,r2
   434f4:	10000005 	stb	zero,0(r2)

    return 1;
   434f8:	00800044 	movi	r2,1
}
   434fc:	e037883a 	mov	sp,fp
   43500:	dfc00117 	ldw	ra,4(sp)
   43504:	df000017 	ldw	fp,0(sp)
   43508:	dec00204 	addi	sp,sp,8
   4350c:	f800283a 	ret

00043510 <cstr_append_buf>:

int cstr_append_buf(cstring* s, const void* buf, size_t sz)
{
   43510:	defffb04 	addi	sp,sp,-20
   43514:	dfc00415 	stw	ra,16(sp)
   43518:	df000315 	stw	fp,12(sp)
   4351c:	df000304 	addi	fp,sp,12
   43520:	e13ffd15 	stw	r4,-12(fp)
   43524:	e17ffe15 	stw	r5,-8(fp)
   43528:	e1bfff15 	stw	r6,-4(fp)
    if (!cstr_alloc_min_sz(s, s->len + sz))
   4352c:	e0bffd17 	ldw	r2,-12(fp)
   43530:	10c00117 	ldw	r3,4(r2)
   43534:	e0bfff17 	ldw	r2,-4(fp)
   43538:	1885883a 	add	r2,r3,r2
   4353c:	100b883a 	mov	r5,r2
   43540:	e13ffd17 	ldw	r4,-12(fp)
   43544:	00430c40 	call	430c4 <cstr_alloc_min_sz>
   43548:	1000021e 	bne	r2,zero,43554 <cstr_append_buf+0x44>
        return 0;
   4354c:	0005883a 	mov	r2,zero
   43550:	00001606 	br	435ac <cstr_append_buf+0x9c>

    memcpy(s->str + s->len, buf, sz);
   43554:	e0bffd17 	ldw	r2,-12(fp)
   43558:	10c00017 	ldw	r3,0(r2)
   4355c:	e0bffd17 	ldw	r2,-12(fp)
   43560:	10800117 	ldw	r2,4(r2)
   43564:	1885883a 	add	r2,r3,r2
   43568:	e1bfff17 	ldw	r6,-4(fp)
   4356c:	e17ffe17 	ldw	r5,-8(fp)
   43570:	1009883a 	mov	r4,r2
   43574:	00463980 	call	46398 <memcpy>
    s->len += sz;
   43578:	e0bffd17 	ldw	r2,-12(fp)
   4357c:	10c00117 	ldw	r3,4(r2)
   43580:	e0bfff17 	ldw	r2,-4(fp)
   43584:	1887883a 	add	r3,r3,r2
   43588:	e0bffd17 	ldw	r2,-12(fp)
   4358c:	10c00115 	stw	r3,4(r2)
    s->str[s->len] = 0;
   43590:	e0bffd17 	ldw	r2,-12(fp)
   43594:	10c00017 	ldw	r3,0(r2)
   43598:	e0bffd17 	ldw	r2,-12(fp)
   4359c:	10800117 	ldw	r2,4(r2)
   435a0:	1885883a 	add	r2,r3,r2
   435a4:	10000005 	stb	zero,0(r2)

    return 1;
   435a8:	00800044 	movi	r2,1
}
   435ac:	e037883a 	mov	sp,fp
   435b0:	dfc00117 	ldw	ra,4(sp)
   435b4:	df000017 	ldw	fp,0(sp)
   435b8:	dec00204 	addi	sp,sp,8
   435bc:	f800283a 	ret

000435c0 <cstr_append_cstr>:

int cstr_append_cstr(cstring* s, cstring* append)
{
   435c0:	defffc04 	addi	sp,sp,-16
   435c4:	dfc00315 	stw	ra,12(sp)
   435c8:	df000215 	stw	fp,8(sp)
   435cc:	df000204 	addi	fp,sp,8
   435d0:	e13ffe15 	stw	r4,-8(fp)
   435d4:	e17fff15 	stw	r5,-4(fp)
    return cstr_append_buf(s, append->str, append->len);
   435d8:	e0bfff17 	ldw	r2,-4(fp)
   435dc:	10c00017 	ldw	r3,0(r2)
   435e0:	e0bfff17 	ldw	r2,-4(fp)
   435e4:	10800117 	ldw	r2,4(r2)
   435e8:	100d883a 	mov	r6,r2
   435ec:	180b883a 	mov	r5,r3
   435f0:	e13ffe17 	ldw	r4,-8(fp)
   435f4:	00435100 	call	43510 <cstr_append_buf>
}
   435f8:	e037883a 	mov	sp,fp
   435fc:	dfc00117 	ldw	ra,4(sp)
   43600:	df000017 	ldw	fp,0(sp)
   43604:	dec00204 	addi	sp,sp,8
   43608:	f800283a 	ret

0004360c <cstr_append_c>:


int cstr_append_c(cstring* s, char ch)
{
   4360c:	defffc04 	addi	sp,sp,-16
   43610:	dfc00315 	stw	ra,12(sp)
   43614:	df000215 	stw	fp,8(sp)
   43618:	df000204 	addi	fp,sp,8
   4361c:	e13ffe15 	stw	r4,-8(fp)
   43620:	2805883a 	mov	r2,r5
   43624:	e0bfff05 	stb	r2,-4(fp)
    return cstr_append_buf(s, &ch, 1);
   43628:	e0bfff04 	addi	r2,fp,-4
   4362c:	01800044 	movi	r6,1
   43630:	100b883a 	mov	r5,r2
   43634:	e13ffe17 	ldw	r4,-8(fp)
   43638:	00435100 	call	43510 <cstr_append_buf>
}
   4363c:	e037883a 	mov	sp,fp
   43640:	dfc00117 	ldw	ra,4(sp)
   43644:	df000017 	ldw	fp,0(sp)
   43648:	dec00204 	addi	sp,sp,8
   4364c:	f800283a 	ret

00043650 <cstr_equal>:


int cstr_equal(const cstring* a, const cstring* b)
{
   43650:	defffc04 	addi	sp,sp,-16
   43654:	dfc00315 	stw	ra,12(sp)
   43658:	df000215 	stw	fp,8(sp)
   4365c:	df000204 	addi	fp,sp,8
   43660:	e13ffe15 	stw	r4,-8(fp)
   43664:	e17fff15 	stw	r5,-4(fp)
    if (a == b)
   43668:	e0fffe17 	ldw	r3,-8(fp)
   4366c:	e0bfff17 	ldw	r2,-4(fp)
   43670:	1880021e 	bne	r3,r2,4367c <cstr_equal+0x2c>
        return 1;
   43674:	00800044 	movi	r2,1
   43678:	00001906 	br	436e0 <cstr_equal+0x90>
    if (!a || !b)
   4367c:	e0bffe17 	ldw	r2,-8(fp)
   43680:	10000226 	beq	r2,zero,4368c <cstr_equal+0x3c>
   43684:	e0bfff17 	ldw	r2,-4(fp)
   43688:	1000021e 	bne	r2,zero,43694 <cstr_equal+0x44>
        return 0;
   4368c:	0005883a 	mov	r2,zero
   43690:	00001306 	br	436e0 <cstr_equal+0x90>
    if (a->len != b->len)
   43694:	e0bffe17 	ldw	r2,-8(fp)
   43698:	10c00117 	ldw	r3,4(r2)
   4369c:	e0bfff17 	ldw	r2,-4(fp)
   436a0:	10800117 	ldw	r2,4(r2)
   436a4:	18800226 	beq	r3,r2,436b0 <cstr_equal+0x60>
        return 0;
   436a8:	0005883a 	mov	r2,zero
   436ac:	00000c06 	br	436e0 <cstr_equal+0x90>
    return (memcmp(a->str, b->str, a->len) == 0);
   436b0:	e0bffe17 	ldw	r2,-8(fp)
   436b4:	10c00017 	ldw	r3,0(r2)
   436b8:	e0bfff17 	ldw	r2,-4(fp)
   436bc:	11000017 	ldw	r4,0(r2)
   436c0:	e0bffe17 	ldw	r2,-8(fp)
   436c4:	10800117 	ldw	r2,4(r2)
   436c8:	100d883a 	mov	r6,r2
   436cc:	200b883a 	mov	r5,r4
   436d0:	1809883a 	mov	r4,r3
   436d4:	00463680 	call	46368 <memcmp>
   436d8:	1005003a 	cmpeq	r2,r2,zero
   436dc:	10803fcc 	andi	r2,r2,255
}
   436e0:	e037883a 	mov	sp,fp
   436e4:	dfc00117 	ldw	ra,4(sp)
   436e8:	df000017 	ldw	fp,0(sp)
   436ec:	dec00204 	addi	sp,sp,8
   436f0:	f800283a 	ret

000436f4 <cstr_compare>:

int cstr_compare(const cstring* a, const cstring* b)
{
   436f4:	defffb04 	addi	sp,sp,-20
   436f8:	df000415 	stw	fp,16(sp)
   436fc:	df000404 	addi	fp,sp,16
   43700:	e13ffe15 	stw	r4,-8(fp)
   43704:	e17fff15 	stw	r5,-4(fp)
    unsigned int i;
    if (a->len > b->len)
   43708:	e0bffe17 	ldw	r2,-8(fp)
   4370c:	10800117 	ldw	r2,4(r2)
   43710:	e0ffff17 	ldw	r3,-4(fp)
   43714:	18c00117 	ldw	r3,4(r3)
   43718:	1880022e 	bgeu	r3,r2,43724 <cstr_compare+0x30>
        return (1);
   4371c:	00800044 	movi	r2,1
   43720:	00002706 	br	437c0 <cstr_compare+0xcc>
    if (a->len < b->len)
   43724:	e0bffe17 	ldw	r2,-8(fp)
   43728:	10c00117 	ldw	r3,4(r2)
   4372c:	e0bfff17 	ldw	r2,-4(fp)
   43730:	10800117 	ldw	r2,4(r2)
   43734:	1880022e 	bgeu	r3,r2,43740 <cstr_compare+0x4c>
        return (-1);
   43738:	00bfffc4 	movi	r2,-1
   4373c:	00002006 	br	437c0 <cstr_compare+0xcc>

    /* length equal, byte per byte compare */
    for (i = 0; i < a->len; i++) {
   43740:	e03ffc15 	stw	zero,-16(fp)
   43744:	00001906 	br	437ac <cstr_compare+0xb8>
        char a1 = a->str[i];
   43748:	e0bffe17 	ldw	r2,-8(fp)
   4374c:	10c00017 	ldw	r3,0(r2)
   43750:	e0bffc17 	ldw	r2,-16(fp)
   43754:	1885883a 	add	r2,r3,r2
   43758:	10800003 	ldbu	r2,0(r2)
   4375c:	e0bffd05 	stb	r2,-12(fp)
        char b1 = b->str[i];
   43760:	e0bfff17 	ldw	r2,-4(fp)
   43764:	10c00017 	ldw	r3,0(r2)
   43768:	e0bffc17 	ldw	r2,-16(fp)
   4376c:	1885883a 	add	r2,r3,r2
   43770:	10800003 	ldbu	r2,0(r2)
   43774:	e0bffd45 	stb	r2,-11(fp)

        if (a1 > b1)
   43778:	e0bffd07 	ldb	r2,-12(fp)
   4377c:	e0fffd47 	ldb	r3,-11(fp)
   43780:	1880020e 	bge	r3,r2,4378c <cstr_compare+0x98>
            return (1);
   43784:	00800044 	movi	r2,1
   43788:	00000d06 	br	437c0 <cstr_compare+0xcc>
        if (a1 < b1)
   4378c:	e0fffd07 	ldb	r3,-12(fp)
   43790:	e0bffd47 	ldb	r2,-11(fp)
   43794:	1880020e 	bge	r3,r2,437a0 <cstr_compare+0xac>
            return (-1);
   43798:	00bfffc4 	movi	r2,-1
   4379c:	00000806 	br	437c0 <cstr_compare+0xcc>
        return (1);
    if (a->len < b->len)
        return (-1);

    /* length equal, byte per byte compare */
    for (i = 0; i < a->len; i++) {
   437a0:	e0bffc17 	ldw	r2,-16(fp)
   437a4:	10800044 	addi	r2,r2,1
   437a8:	e0bffc15 	stw	r2,-16(fp)
   437ac:	e0bffe17 	ldw	r2,-8(fp)
   437b0:	10800117 	ldw	r2,4(r2)
   437b4:	e0fffc17 	ldw	r3,-16(fp)
   437b8:	18bfe336 	bltu	r3,r2,43748 <__alt_mem_epcs_flash_controller+0xfe03a748>
        if (a1 > b1)
            return (1);
        if (a1 < b1)
            return (-1);
    }
    return (0);
   437bc:	0005883a 	mov	r2,zero
}
   437c0:	e037883a 	mov	sp,fp
   437c4:	df000017 	ldw	fp,0(sp)
   437c8:	dec00104 	addi	sp,sp,4
   437cc:	f800283a 	ret

000437d0 <cstr_erase>:

int cstr_erase(cstring* s, size_t pos, ssize_t len)
{
   437d0:	defffa04 	addi	sp,sp,-24
   437d4:	dfc00515 	stw	ra,20(sp)
   437d8:	df000415 	stw	fp,16(sp)
   437dc:	df000404 	addi	fp,sp,16
   437e0:	e13ffd15 	stw	r4,-12(fp)
   437e4:	e17ffe15 	stw	r5,-8(fp)
   437e8:	e1bfff15 	stw	r6,-4(fp)
    ssize_t old_tail;

    if (pos == s->len && len == 0)
   437ec:	e0bffd17 	ldw	r2,-12(fp)
   437f0:	10c00117 	ldw	r3,4(r2)
   437f4:	e0bffe17 	ldw	r2,-8(fp)
   437f8:	1880041e 	bne	r3,r2,4380c <cstr_erase+0x3c>
   437fc:	e0bfff17 	ldw	r2,-4(fp)
   43800:	1000021e 	bne	r2,zero,4380c <cstr_erase+0x3c>
        return 1;
   43804:	00800044 	movi	r2,1
   43808:	00003006 	br	438cc <cstr_erase+0xfc>
    if (pos >= s->len)
   4380c:	e0bffd17 	ldw	r2,-12(fp)
   43810:	10800117 	ldw	r2,4(r2)
   43814:	e0fffe17 	ldw	r3,-8(fp)
   43818:	18800236 	bltu	r3,r2,43824 <cstr_erase+0x54>
        return 0;
   4381c:	0005883a 	mov	r2,zero
   43820:	00002a06 	br	438cc <cstr_erase+0xfc>

    old_tail = s->len - pos;
   43824:	e0bffd17 	ldw	r2,-12(fp)
   43828:	10c00117 	ldw	r3,4(r2)
   4382c:	e0bffe17 	ldw	r2,-8(fp)
   43830:	1885c83a 	sub	r2,r3,r2
   43834:	e0bffc15 	stw	r2,-16(fp)
    if ((len >= 0) && (len > old_tail))
   43838:	e0bfff17 	ldw	r2,-4(fp)
   4383c:	10000516 	blt	r2,zero,43854 <cstr_erase+0x84>
   43840:	e0bfff17 	ldw	r2,-4(fp)
   43844:	e0fffc17 	ldw	r3,-16(fp)
   43848:	1880020e 	bge	r3,r2,43854 <cstr_erase+0x84>
        return 0;
   4384c:	0005883a 	mov	r2,zero
   43850:	00001e06 	br	438cc <cstr_erase+0xfc>

    memmove(&s->str[pos], &s->str[pos + len], old_tail - len);
   43854:	e0bffd17 	ldw	r2,-12(fp)
   43858:	10c00017 	ldw	r3,0(r2)
   4385c:	e0bffe17 	ldw	r2,-8(fp)
   43860:	188f883a 	add	r7,r3,r2
   43864:	e0bffd17 	ldw	r2,-12(fp)
   43868:	10c00017 	ldw	r3,0(r2)
   4386c:	e13fff17 	ldw	r4,-4(fp)
   43870:	e0bffe17 	ldw	r2,-8(fp)
   43874:	2085883a 	add	r2,r4,r2
   43878:	1889883a 	add	r4,r3,r2
   4387c:	e0fffc17 	ldw	r3,-16(fp)
   43880:	e0bfff17 	ldw	r2,-4(fp)
   43884:	1885c83a 	sub	r2,r3,r2
   43888:	100d883a 	mov	r6,r2
   4388c:	200b883a 	mov	r5,r4
   43890:	3809883a 	mov	r4,r7
   43894:	00463c00 	call	463c0 <memmove>
    s->len -= len;
   43898:	e0bffd17 	ldw	r2,-12(fp)
   4389c:	10c00117 	ldw	r3,4(r2)
   438a0:	e0bfff17 	ldw	r2,-4(fp)
   438a4:	1887c83a 	sub	r3,r3,r2
   438a8:	e0bffd17 	ldw	r2,-12(fp)
   438ac:	10c00115 	stw	r3,4(r2)
    s->str[s->len] = 0;
   438b0:	e0bffd17 	ldw	r2,-12(fp)
   438b4:	10c00017 	ldw	r3,0(r2)
   438b8:	e0bffd17 	ldw	r2,-12(fp)
   438bc:	10800117 	ldw	r2,4(r2)
   438c0:	1885883a 	add	r2,r3,r2
   438c4:	10000005 	stb	zero,0(r2)

    return 1;
   438c8:	00800044 	movi	r2,1
}
   438cc:	e037883a 	mov	sp,fp
   438d0:	dfc00117 	ldw	ra,4(sp)
   438d4:	df000017 	ldw	fp,0(sp)
   438d8:	dec00204 	addi	sp,sp,8
   438dc:	f800283a 	ret

000438e0 <__muldi3>:
   438e0:	223fffcc 	andi	r8,r4,65535
   438e4:	2006d43a 	srli	r3,r4,16
   438e8:	32bfffcc 	andi	r10,r6,65535
   438ec:	3012d43a 	srli	r9,r6,16
   438f0:	4297383a 	mul	r11,r8,r10
   438f4:	1a95383a 	mul	r10,r3,r10
   438f8:	4251383a 	mul	r8,r8,r9
   438fc:	5804d43a 	srli	r2,r11,16
   43900:	4291883a 	add	r8,r8,r10
   43904:	1205883a 	add	r2,r2,r8
   43908:	1a51383a 	mul	r8,r3,r9
   4390c:	1280022e 	bgeu	r2,r10,43918 <__muldi3+0x38>
   43910:	00c00074 	movhi	r3,1
   43914:	40d1883a 	add	r8,r8,r3
   43918:	1006d43a 	srli	r3,r2,16
   4391c:	21cf383a 	mul	r7,r4,r7
   43920:	314b383a 	mul	r5,r6,r5
   43924:	1004943a 	slli	r2,r2,16
   43928:	1a11883a 	add	r8,r3,r8
   4392c:	5affffcc 	andi	r11,r11,65535
   43930:	3947883a 	add	r3,r7,r5
   43934:	12c5883a 	add	r2,r2,r11
   43938:	1a07883a 	add	r3,r3,r8
   4393c:	f800283a 	ret

00043940 <__divsi3>:
   43940:	20001b16 	blt	r4,zero,439b0 <__divsi3+0x70>
   43944:	000f883a 	mov	r7,zero
   43948:	28001616 	blt	r5,zero,439a4 <__divsi3+0x64>
   4394c:	200d883a 	mov	r6,r4
   43950:	29001a2e 	bgeu	r5,r4,439bc <__divsi3+0x7c>
   43954:	00800804 	movi	r2,32
   43958:	00c00044 	movi	r3,1
   4395c:	00000106 	br	43964 <__divsi3+0x24>
   43960:	10000d26 	beq	r2,zero,43998 <__divsi3+0x58>
   43964:	294b883a 	add	r5,r5,r5
   43968:	10bfffc4 	addi	r2,r2,-1
   4396c:	18c7883a 	add	r3,r3,r3
   43970:	293ffb36 	bltu	r5,r4,43960 <__alt_mem_epcs_flash_controller+0xfe03a960>
   43974:	0005883a 	mov	r2,zero
   43978:	18000726 	beq	r3,zero,43998 <__divsi3+0x58>
   4397c:	0005883a 	mov	r2,zero
   43980:	31400236 	bltu	r6,r5,4398c <__divsi3+0x4c>
   43984:	314dc83a 	sub	r6,r6,r5
   43988:	10c4b03a 	or	r2,r2,r3
   4398c:	1806d07a 	srli	r3,r3,1
   43990:	280ad07a 	srli	r5,r5,1
   43994:	183ffa1e 	bne	r3,zero,43980 <__alt_mem_epcs_flash_controller+0xfe03a980>
   43998:	38000126 	beq	r7,zero,439a0 <__divsi3+0x60>
   4399c:	0085c83a 	sub	r2,zero,r2
   439a0:	f800283a 	ret
   439a4:	014bc83a 	sub	r5,zero,r5
   439a8:	39c0005c 	xori	r7,r7,1
   439ac:	003fe706 	br	4394c <__alt_mem_epcs_flash_controller+0xfe03a94c>
   439b0:	0109c83a 	sub	r4,zero,r4
   439b4:	01c00044 	movi	r7,1
   439b8:	003fe306 	br	43948 <__alt_mem_epcs_flash_controller+0xfe03a948>
   439bc:	00c00044 	movi	r3,1
   439c0:	003fee06 	br	4397c <__alt_mem_epcs_flash_controller+0xfe03a97c>

000439c4 <__modsi3>:
   439c4:	20001716 	blt	r4,zero,43a24 <__modsi3+0x60>
   439c8:	000f883a 	mov	r7,zero
   439cc:	2005883a 	mov	r2,r4
   439d0:	28001216 	blt	r5,zero,43a1c <__modsi3+0x58>
   439d4:	2900162e 	bgeu	r5,r4,43a30 <__modsi3+0x6c>
   439d8:	01800804 	movi	r6,32
   439dc:	00c00044 	movi	r3,1
   439e0:	00000106 	br	439e8 <__modsi3+0x24>
   439e4:	30000a26 	beq	r6,zero,43a10 <__modsi3+0x4c>
   439e8:	294b883a 	add	r5,r5,r5
   439ec:	31bfffc4 	addi	r6,r6,-1
   439f0:	18c7883a 	add	r3,r3,r3
   439f4:	293ffb36 	bltu	r5,r4,439e4 <__alt_mem_epcs_flash_controller+0xfe03a9e4>
   439f8:	18000526 	beq	r3,zero,43a10 <__modsi3+0x4c>
   439fc:	1806d07a 	srli	r3,r3,1
   43a00:	11400136 	bltu	r2,r5,43a08 <__modsi3+0x44>
   43a04:	1145c83a 	sub	r2,r2,r5
   43a08:	280ad07a 	srli	r5,r5,1
   43a0c:	183ffb1e 	bne	r3,zero,439fc <__alt_mem_epcs_flash_controller+0xfe03a9fc>
   43a10:	38000126 	beq	r7,zero,43a18 <__modsi3+0x54>
   43a14:	0085c83a 	sub	r2,zero,r2
   43a18:	f800283a 	ret
   43a1c:	014bc83a 	sub	r5,zero,r5
   43a20:	003fec06 	br	439d4 <__alt_mem_epcs_flash_controller+0xfe03a9d4>
   43a24:	0109c83a 	sub	r4,zero,r4
   43a28:	01c00044 	movi	r7,1
   43a2c:	003fe706 	br	439cc <__alt_mem_epcs_flash_controller+0xfe03a9cc>
   43a30:	00c00044 	movi	r3,1
   43a34:	003ff106 	br	439fc <__alt_mem_epcs_flash_controller+0xfe03a9fc>

00043a38 <__udivsi3>:
   43a38:	200d883a 	mov	r6,r4
   43a3c:	2900152e 	bgeu	r5,r4,43a94 <__udivsi3+0x5c>
   43a40:	28001416 	blt	r5,zero,43a94 <__udivsi3+0x5c>
   43a44:	00800804 	movi	r2,32
   43a48:	00c00044 	movi	r3,1
   43a4c:	00000206 	br	43a58 <__udivsi3+0x20>
   43a50:	10000e26 	beq	r2,zero,43a8c <__udivsi3+0x54>
   43a54:	28000516 	blt	r5,zero,43a6c <__udivsi3+0x34>
   43a58:	294b883a 	add	r5,r5,r5
   43a5c:	10bfffc4 	addi	r2,r2,-1
   43a60:	18c7883a 	add	r3,r3,r3
   43a64:	293ffa36 	bltu	r5,r4,43a50 <__alt_mem_epcs_flash_controller+0xfe03aa50>
   43a68:	18000826 	beq	r3,zero,43a8c <__udivsi3+0x54>
   43a6c:	0005883a 	mov	r2,zero
   43a70:	31400236 	bltu	r6,r5,43a7c <__udivsi3+0x44>
   43a74:	314dc83a 	sub	r6,r6,r5
   43a78:	10c4b03a 	or	r2,r2,r3
   43a7c:	1806d07a 	srli	r3,r3,1
   43a80:	280ad07a 	srli	r5,r5,1
   43a84:	183ffa1e 	bne	r3,zero,43a70 <__alt_mem_epcs_flash_controller+0xfe03aa70>
   43a88:	f800283a 	ret
   43a8c:	0005883a 	mov	r2,zero
   43a90:	f800283a 	ret
   43a94:	00c00044 	movi	r3,1
   43a98:	003ff406 	br	43a6c <__alt_mem_epcs_flash_controller+0xfe03aa6c>

00043a9c <__umodsi3>:
   43a9c:	2005883a 	mov	r2,r4
   43aa0:	2900122e 	bgeu	r5,r4,43aec <__umodsi3+0x50>
   43aa4:	28001116 	blt	r5,zero,43aec <__umodsi3+0x50>
   43aa8:	01800804 	movi	r6,32
   43aac:	00c00044 	movi	r3,1
   43ab0:	00000206 	br	43abc <__umodsi3+0x20>
   43ab4:	30000c26 	beq	r6,zero,43ae8 <__umodsi3+0x4c>
   43ab8:	28000516 	blt	r5,zero,43ad0 <__umodsi3+0x34>
   43abc:	294b883a 	add	r5,r5,r5
   43ac0:	31bfffc4 	addi	r6,r6,-1
   43ac4:	18c7883a 	add	r3,r3,r3
   43ac8:	293ffa36 	bltu	r5,r4,43ab4 <__alt_mem_epcs_flash_controller+0xfe03aab4>
   43acc:	18000626 	beq	r3,zero,43ae8 <__umodsi3+0x4c>
   43ad0:	1806d07a 	srli	r3,r3,1
   43ad4:	11400136 	bltu	r2,r5,43adc <__umodsi3+0x40>
   43ad8:	1145c83a 	sub	r2,r2,r5
   43adc:	280ad07a 	srli	r5,r5,1
   43ae0:	183ffb1e 	bne	r3,zero,43ad0 <__alt_mem_epcs_flash_controller+0xfe03aad0>
   43ae4:	f800283a 	ret
   43ae8:	f800283a 	ret
   43aec:	00c00044 	movi	r3,1
   43af0:	003ff706 	br	43ad0 <__alt_mem_epcs_flash_controller+0xfe03aad0>

00043af4 <__mulsi3>:
   43af4:	0005883a 	mov	r2,zero
   43af8:	20000726 	beq	r4,zero,43b18 <__mulsi3+0x24>
   43afc:	20c0004c 	andi	r3,r4,1
   43b00:	2008d07a 	srli	r4,r4,1
   43b04:	18000126 	beq	r3,zero,43b0c <__mulsi3+0x18>
   43b08:	1145883a 	add	r2,r2,r5
   43b0c:	294b883a 	add	r5,r5,r5
   43b10:	203ffa1e 	bne	r4,zero,43afc <__alt_mem_epcs_flash_controller+0xfe03aafc>
   43b14:	f800283a 	ret
   43b18:	f800283a 	ret

00043b1c <__adddf3>:
   43b1c:	02c00434 	movhi	r11,16
   43b20:	5affffc4 	addi	r11,r11,-1
   43b24:	2806d7fa 	srli	r3,r5,31
   43b28:	2ad4703a 	and	r10,r5,r11
   43b2c:	3ad2703a 	and	r9,r7,r11
   43b30:	3804d53a 	srli	r2,r7,20
   43b34:	3018d77a 	srli	r12,r6,29
   43b38:	280ad53a 	srli	r5,r5,20
   43b3c:	501490fa 	slli	r10,r10,3
   43b40:	2010d77a 	srli	r8,r4,29
   43b44:	481290fa 	slli	r9,r9,3
   43b48:	380ed7fa 	srli	r7,r7,31
   43b4c:	defffb04 	addi	sp,sp,-20
   43b50:	dc800215 	stw	r18,8(sp)
   43b54:	dc400115 	stw	r17,4(sp)
   43b58:	dc000015 	stw	r16,0(sp)
   43b5c:	dfc00415 	stw	ra,16(sp)
   43b60:	dcc00315 	stw	r19,12(sp)
   43b64:	1c803fcc 	andi	r18,r3,255
   43b68:	2c01ffcc 	andi	r16,r5,2047
   43b6c:	5210b03a 	or	r8,r10,r8
   43b70:	202290fa 	slli	r17,r4,3
   43b74:	1081ffcc 	andi	r2,r2,2047
   43b78:	4b12b03a 	or	r9,r9,r12
   43b7c:	300c90fa 	slli	r6,r6,3
   43b80:	91c07526 	beq	r18,r7,43d58 <__adddf3+0x23c>
   43b84:	8087c83a 	sub	r3,r16,r2
   43b88:	00c0ab0e 	bge	zero,r3,43e38 <__adddf3+0x31c>
   43b8c:	10002a1e 	bne	r2,zero,43c38 <__adddf3+0x11c>
   43b90:	4984b03a 	or	r2,r9,r6
   43b94:	1000961e 	bne	r2,zero,43df0 <__adddf3+0x2d4>
   43b98:	888001cc 	andi	r2,r17,7
   43b9c:	10000726 	beq	r2,zero,43bbc <__adddf3+0xa0>
   43ba0:	888003cc 	andi	r2,r17,15
   43ba4:	00c00104 	movi	r3,4
   43ba8:	10c00426 	beq	r2,r3,43bbc <__adddf3+0xa0>
   43bac:	88c7883a 	add	r3,r17,r3
   43bb0:	1c63803a 	cmpltu	r17,r3,r17
   43bb4:	4451883a 	add	r8,r8,r17
   43bb8:	1823883a 	mov	r17,r3
   43bbc:	4080202c 	andhi	r2,r8,128
   43bc0:	10005926 	beq	r2,zero,43d28 <__adddf3+0x20c>
   43bc4:	84000044 	addi	r16,r16,1
   43bc8:	0081ffc4 	movi	r2,2047
   43bcc:	8080ba26 	beq	r16,r2,43eb8 <__adddf3+0x39c>
   43bd0:	00bfe034 	movhi	r2,65408
   43bd4:	10bfffc4 	addi	r2,r2,-1
   43bd8:	4090703a 	and	r8,r8,r2
   43bdc:	4004977a 	slli	r2,r8,29
   43be0:	4010927a 	slli	r8,r8,9
   43be4:	8822d0fa 	srli	r17,r17,3
   43be8:	8401ffcc 	andi	r16,r16,2047
   43bec:	4010d33a 	srli	r8,r8,12
   43bf0:	9007883a 	mov	r3,r18
   43bf4:	1444b03a 	or	r2,r2,r17
   43bf8:	8401ffcc 	andi	r16,r16,2047
   43bfc:	8020953a 	slli	r16,r16,20
   43c00:	18c03fcc 	andi	r3,r3,255
   43c04:	01000434 	movhi	r4,16
   43c08:	213fffc4 	addi	r4,r4,-1
   43c0c:	180697fa 	slli	r3,r3,31
   43c10:	4110703a 	and	r8,r8,r4
   43c14:	4410b03a 	or	r8,r8,r16
   43c18:	40c6b03a 	or	r3,r8,r3
   43c1c:	dfc00417 	ldw	ra,16(sp)
   43c20:	dcc00317 	ldw	r19,12(sp)
   43c24:	dc800217 	ldw	r18,8(sp)
   43c28:	dc400117 	ldw	r17,4(sp)
   43c2c:	dc000017 	ldw	r16,0(sp)
   43c30:	dec00504 	addi	sp,sp,20
   43c34:	f800283a 	ret
   43c38:	0081ffc4 	movi	r2,2047
   43c3c:	80bfd626 	beq	r16,r2,43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   43c40:	4a402034 	orhi	r9,r9,128
   43c44:	00800e04 	movi	r2,56
   43c48:	10c09f16 	blt	r2,r3,43ec8 <__adddf3+0x3ac>
   43c4c:	008007c4 	movi	r2,31
   43c50:	10c0c216 	blt	r2,r3,43f5c <__adddf3+0x440>
   43c54:	00800804 	movi	r2,32
   43c58:	10c5c83a 	sub	r2,r2,r3
   43c5c:	488a983a 	sll	r5,r9,r2
   43c60:	30c8d83a 	srl	r4,r6,r3
   43c64:	3084983a 	sll	r2,r6,r2
   43c68:	48c6d83a 	srl	r3,r9,r3
   43c6c:	290cb03a 	or	r6,r5,r4
   43c70:	1004c03a 	cmpne	r2,r2,zero
   43c74:	308cb03a 	or	r6,r6,r2
   43c78:	898dc83a 	sub	r6,r17,r6
   43c7c:	89a3803a 	cmpltu	r17,r17,r6
   43c80:	40d1c83a 	sub	r8,r8,r3
   43c84:	4451c83a 	sub	r8,r8,r17
   43c88:	3023883a 	mov	r17,r6
   43c8c:	4080202c 	andhi	r2,r8,128
   43c90:	10002326 	beq	r2,zero,43d20 <__adddf3+0x204>
   43c94:	04c02034 	movhi	r19,128
   43c98:	9cffffc4 	addi	r19,r19,-1
   43c9c:	44e6703a 	and	r19,r8,r19
   43ca0:	98007626 	beq	r19,zero,43e7c <__adddf3+0x360>
   43ca4:	9809883a 	mov	r4,r19
   43ca8:	0045f700 	call	45f70 <__clzsi2>
   43cac:	10fffe04 	addi	r3,r2,-8
   43cb0:	010007c4 	movi	r4,31
   43cb4:	20c07716 	blt	r4,r3,43e94 <__adddf3+0x378>
   43cb8:	00800804 	movi	r2,32
   43cbc:	10c5c83a 	sub	r2,r2,r3
   43cc0:	8884d83a 	srl	r2,r17,r2
   43cc4:	98d0983a 	sll	r8,r19,r3
   43cc8:	88e2983a 	sll	r17,r17,r3
   43ccc:	1204b03a 	or	r2,r2,r8
   43cd0:	1c007416 	blt	r3,r16,43ea4 <__adddf3+0x388>
   43cd4:	1c21c83a 	sub	r16,r3,r16
   43cd8:	82000044 	addi	r8,r16,1
   43cdc:	00c007c4 	movi	r3,31
   43ce0:	1a009116 	blt	r3,r8,43f28 <__adddf3+0x40c>
   43ce4:	00c00804 	movi	r3,32
   43ce8:	1a07c83a 	sub	r3,r3,r8
   43cec:	8a08d83a 	srl	r4,r17,r8
   43cf0:	88e2983a 	sll	r17,r17,r3
   43cf4:	10c6983a 	sll	r3,r2,r3
   43cf8:	1210d83a 	srl	r8,r2,r8
   43cfc:	8804c03a 	cmpne	r2,r17,zero
   43d00:	1906b03a 	or	r3,r3,r4
   43d04:	18a2b03a 	or	r17,r3,r2
   43d08:	0021883a 	mov	r16,zero
   43d0c:	003fa206 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   43d10:	1890b03a 	or	r8,r3,r2
   43d14:	40017d26 	beq	r8,zero,4430c <__adddf3+0x7f0>
   43d18:	1011883a 	mov	r8,r2
   43d1c:	1823883a 	mov	r17,r3
   43d20:	888001cc 	andi	r2,r17,7
   43d24:	103f9e1e 	bne	r2,zero,43ba0 <__alt_mem_epcs_flash_controller+0xfe03aba0>
   43d28:	4004977a 	slli	r2,r8,29
   43d2c:	8822d0fa 	srli	r17,r17,3
   43d30:	4010d0fa 	srli	r8,r8,3
   43d34:	9007883a 	mov	r3,r18
   43d38:	1444b03a 	or	r2,r2,r17
   43d3c:	0101ffc4 	movi	r4,2047
   43d40:	81002426 	beq	r16,r4,43dd4 <__adddf3+0x2b8>
   43d44:	8120703a 	and	r16,r16,r4
   43d48:	01000434 	movhi	r4,16
   43d4c:	213fffc4 	addi	r4,r4,-1
   43d50:	4110703a 	and	r8,r8,r4
   43d54:	003fa806 	br	43bf8 <__alt_mem_epcs_flash_controller+0xfe03abf8>
   43d58:	8089c83a 	sub	r4,r16,r2
   43d5c:	01005e0e 	bge	zero,r4,43ed8 <__adddf3+0x3bc>
   43d60:	10002b26 	beq	r2,zero,43e10 <__adddf3+0x2f4>
   43d64:	0081ffc4 	movi	r2,2047
   43d68:	80bf8b26 	beq	r16,r2,43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   43d6c:	4a402034 	orhi	r9,r9,128
   43d70:	00800e04 	movi	r2,56
   43d74:	1100a40e 	bge	r2,r4,44008 <__adddf3+0x4ec>
   43d78:	498cb03a 	or	r6,r9,r6
   43d7c:	300ac03a 	cmpne	r5,r6,zero
   43d80:	0013883a 	mov	r9,zero
   43d84:	2c4b883a 	add	r5,r5,r17
   43d88:	2c63803a 	cmpltu	r17,r5,r17
   43d8c:	4a11883a 	add	r8,r9,r8
   43d90:	8a11883a 	add	r8,r17,r8
   43d94:	2823883a 	mov	r17,r5
   43d98:	4080202c 	andhi	r2,r8,128
   43d9c:	103fe026 	beq	r2,zero,43d20 <__alt_mem_epcs_flash_controller+0xfe03ad20>
   43da0:	84000044 	addi	r16,r16,1
   43da4:	0081ffc4 	movi	r2,2047
   43da8:	8080d226 	beq	r16,r2,440f4 <__adddf3+0x5d8>
   43dac:	00bfe034 	movhi	r2,65408
   43db0:	10bfffc4 	addi	r2,r2,-1
   43db4:	4090703a 	and	r8,r8,r2
   43db8:	880ad07a 	srli	r5,r17,1
   43dbc:	400897fa 	slli	r4,r8,31
   43dc0:	88c0004c 	andi	r3,r17,1
   43dc4:	28e2b03a 	or	r17,r5,r3
   43dc8:	4010d07a 	srli	r8,r8,1
   43dcc:	2462b03a 	or	r17,r4,r17
   43dd0:	003f7106 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   43dd4:	4088b03a 	or	r4,r8,r2
   43dd8:	20014526 	beq	r4,zero,442f0 <__adddf3+0x7d4>
   43ddc:	01000434 	movhi	r4,16
   43de0:	42000234 	orhi	r8,r8,8
   43de4:	213fffc4 	addi	r4,r4,-1
   43de8:	4110703a 	and	r8,r8,r4
   43dec:	003f8206 	br	43bf8 <__alt_mem_epcs_flash_controller+0xfe03abf8>
   43df0:	18ffffc4 	addi	r3,r3,-1
   43df4:	1800491e 	bne	r3,zero,43f1c <__adddf3+0x400>
   43df8:	898bc83a 	sub	r5,r17,r6
   43dfc:	8963803a 	cmpltu	r17,r17,r5
   43e00:	4251c83a 	sub	r8,r8,r9
   43e04:	4451c83a 	sub	r8,r8,r17
   43e08:	2823883a 	mov	r17,r5
   43e0c:	003f9f06 	br	43c8c <__alt_mem_epcs_flash_controller+0xfe03ac8c>
   43e10:	4984b03a 	or	r2,r9,r6
   43e14:	103f6026 	beq	r2,zero,43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   43e18:	213fffc4 	addi	r4,r4,-1
   43e1c:	2000931e 	bne	r4,zero,4406c <__adddf3+0x550>
   43e20:	898d883a 	add	r6,r17,r6
   43e24:	3463803a 	cmpltu	r17,r6,r17
   43e28:	4251883a 	add	r8,r8,r9
   43e2c:	8a11883a 	add	r8,r17,r8
   43e30:	3023883a 	mov	r17,r6
   43e34:	003fd806 	br	43d98 <__alt_mem_epcs_flash_controller+0xfe03ad98>
   43e38:	1800541e 	bne	r3,zero,43f8c <__adddf3+0x470>
   43e3c:	80800044 	addi	r2,r16,1
   43e40:	1081ffcc 	andi	r2,r2,2047
   43e44:	00c00044 	movi	r3,1
   43e48:	1880a00e 	bge	r3,r2,440cc <__adddf3+0x5b0>
   43e4c:	8989c83a 	sub	r4,r17,r6
   43e50:	8905803a 	cmpltu	r2,r17,r4
   43e54:	4267c83a 	sub	r19,r8,r9
   43e58:	98a7c83a 	sub	r19,r19,r2
   43e5c:	9880202c 	andhi	r2,r19,128
   43e60:	10006326 	beq	r2,zero,43ff0 <__adddf3+0x4d4>
   43e64:	3463c83a 	sub	r17,r6,r17
   43e68:	4a07c83a 	sub	r3,r9,r8
   43e6c:	344d803a 	cmpltu	r6,r6,r17
   43e70:	19a7c83a 	sub	r19,r3,r6
   43e74:	3825883a 	mov	r18,r7
   43e78:	983f8a1e 	bne	r19,zero,43ca4 <__alt_mem_epcs_flash_controller+0xfe03aca4>
   43e7c:	8809883a 	mov	r4,r17
   43e80:	0045f700 	call	45f70 <__clzsi2>
   43e84:	10800804 	addi	r2,r2,32
   43e88:	10fffe04 	addi	r3,r2,-8
   43e8c:	010007c4 	movi	r4,31
   43e90:	20ff890e 	bge	r4,r3,43cb8 <__alt_mem_epcs_flash_controller+0xfe03acb8>
   43e94:	10bff604 	addi	r2,r2,-40
   43e98:	8884983a 	sll	r2,r17,r2
   43e9c:	0023883a 	mov	r17,zero
   43ea0:	1c3f8c0e 	bge	r3,r16,43cd4 <__alt_mem_epcs_flash_controller+0xfe03acd4>
   43ea4:	023fe034 	movhi	r8,65408
   43ea8:	423fffc4 	addi	r8,r8,-1
   43eac:	80e1c83a 	sub	r16,r16,r3
   43eb0:	1210703a 	and	r8,r2,r8
   43eb4:	003f3806 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   43eb8:	9007883a 	mov	r3,r18
   43ebc:	0011883a 	mov	r8,zero
   43ec0:	0005883a 	mov	r2,zero
   43ec4:	003f4c06 	br	43bf8 <__alt_mem_epcs_flash_controller+0xfe03abf8>
   43ec8:	498cb03a 	or	r6,r9,r6
   43ecc:	300cc03a 	cmpne	r6,r6,zero
   43ed0:	0007883a 	mov	r3,zero
   43ed4:	003f6806 	br	43c78 <__alt_mem_epcs_flash_controller+0xfe03ac78>
   43ed8:	20009c1e 	bne	r4,zero,4414c <__adddf3+0x630>
   43edc:	80800044 	addi	r2,r16,1
   43ee0:	1141ffcc 	andi	r5,r2,2047
   43ee4:	01000044 	movi	r4,1
   43ee8:	2140670e 	bge	r4,r5,44088 <__adddf3+0x56c>
   43eec:	0101ffc4 	movi	r4,2047
   43ef0:	11007f26 	beq	r2,r4,440f0 <__adddf3+0x5d4>
   43ef4:	898d883a 	add	r6,r17,r6
   43ef8:	4247883a 	add	r3,r8,r9
   43efc:	3451803a 	cmpltu	r8,r6,r17
   43f00:	40d1883a 	add	r8,r8,r3
   43f04:	402297fa 	slli	r17,r8,31
   43f08:	300cd07a 	srli	r6,r6,1
   43f0c:	4010d07a 	srli	r8,r8,1
   43f10:	1021883a 	mov	r16,r2
   43f14:	89a2b03a 	or	r17,r17,r6
   43f18:	003f1f06 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   43f1c:	0081ffc4 	movi	r2,2047
   43f20:	80bf481e 	bne	r16,r2,43c44 <__alt_mem_epcs_flash_controller+0xfe03ac44>
   43f24:	003f1c06 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   43f28:	843ff844 	addi	r16,r16,-31
   43f2c:	01000804 	movi	r4,32
   43f30:	1406d83a 	srl	r3,r2,r16
   43f34:	41005026 	beq	r8,r4,44078 <__adddf3+0x55c>
   43f38:	01001004 	movi	r4,64
   43f3c:	2211c83a 	sub	r8,r4,r8
   43f40:	1204983a 	sll	r2,r2,r8
   43f44:	88a2b03a 	or	r17,r17,r2
   43f48:	8822c03a 	cmpne	r17,r17,zero
   43f4c:	1c62b03a 	or	r17,r3,r17
   43f50:	0011883a 	mov	r8,zero
   43f54:	0021883a 	mov	r16,zero
   43f58:	003f7106 	br	43d20 <__alt_mem_epcs_flash_controller+0xfe03ad20>
   43f5c:	193ff804 	addi	r4,r3,-32
   43f60:	00800804 	movi	r2,32
   43f64:	4908d83a 	srl	r4,r9,r4
   43f68:	18804526 	beq	r3,r2,44080 <__adddf3+0x564>
   43f6c:	00801004 	movi	r2,64
   43f70:	10c5c83a 	sub	r2,r2,r3
   43f74:	4886983a 	sll	r3,r9,r2
   43f78:	198cb03a 	or	r6,r3,r6
   43f7c:	300cc03a 	cmpne	r6,r6,zero
   43f80:	218cb03a 	or	r6,r4,r6
   43f84:	0007883a 	mov	r3,zero
   43f88:	003f3b06 	br	43c78 <__alt_mem_epcs_flash_controller+0xfe03ac78>
   43f8c:	80002a26 	beq	r16,zero,44038 <__adddf3+0x51c>
   43f90:	0101ffc4 	movi	r4,2047
   43f94:	11006826 	beq	r2,r4,44138 <__adddf3+0x61c>
   43f98:	00c7c83a 	sub	r3,zero,r3
   43f9c:	42002034 	orhi	r8,r8,128
   43fa0:	01000e04 	movi	r4,56
   43fa4:	20c07c16 	blt	r4,r3,44198 <__adddf3+0x67c>
   43fa8:	010007c4 	movi	r4,31
   43fac:	20c0da16 	blt	r4,r3,44318 <__adddf3+0x7fc>
   43fb0:	01000804 	movi	r4,32
   43fb4:	20c9c83a 	sub	r4,r4,r3
   43fb8:	4114983a 	sll	r10,r8,r4
   43fbc:	88cad83a 	srl	r5,r17,r3
   43fc0:	8908983a 	sll	r4,r17,r4
   43fc4:	40c6d83a 	srl	r3,r8,r3
   43fc8:	5162b03a 	or	r17,r10,r5
   43fcc:	2008c03a 	cmpne	r4,r4,zero
   43fd0:	8922b03a 	or	r17,r17,r4
   43fd4:	3463c83a 	sub	r17,r6,r17
   43fd8:	48c7c83a 	sub	r3,r9,r3
   43fdc:	344d803a 	cmpltu	r6,r6,r17
   43fe0:	1991c83a 	sub	r8,r3,r6
   43fe4:	1021883a 	mov	r16,r2
   43fe8:	3825883a 	mov	r18,r7
   43fec:	003f2706 	br	43c8c <__alt_mem_epcs_flash_controller+0xfe03ac8c>
   43ff0:	24d0b03a 	or	r8,r4,r19
   43ff4:	40001b1e 	bne	r8,zero,44064 <__adddf3+0x548>
   43ff8:	0005883a 	mov	r2,zero
   43ffc:	0007883a 	mov	r3,zero
   44000:	0021883a 	mov	r16,zero
   44004:	003f4d06 	br	43d3c <__alt_mem_epcs_flash_controller+0xfe03ad3c>
   44008:	008007c4 	movi	r2,31
   4400c:	11003c16 	blt	r2,r4,44100 <__adddf3+0x5e4>
   44010:	00800804 	movi	r2,32
   44014:	1105c83a 	sub	r2,r2,r4
   44018:	488e983a 	sll	r7,r9,r2
   4401c:	310ad83a 	srl	r5,r6,r4
   44020:	3084983a 	sll	r2,r6,r2
   44024:	4912d83a 	srl	r9,r9,r4
   44028:	394ab03a 	or	r5,r7,r5
   4402c:	1004c03a 	cmpne	r2,r2,zero
   44030:	288ab03a 	or	r5,r5,r2
   44034:	003f5306 	br	43d84 <__alt_mem_epcs_flash_controller+0xfe03ad84>
   44038:	4448b03a 	or	r4,r8,r17
   4403c:	20003e26 	beq	r4,zero,44138 <__adddf3+0x61c>
   44040:	00c6303a 	nor	r3,zero,r3
   44044:	18003a1e 	bne	r3,zero,44130 <__adddf3+0x614>
   44048:	3463c83a 	sub	r17,r6,r17
   4404c:	4a07c83a 	sub	r3,r9,r8
   44050:	344d803a 	cmpltu	r6,r6,r17
   44054:	1991c83a 	sub	r8,r3,r6
   44058:	1021883a 	mov	r16,r2
   4405c:	3825883a 	mov	r18,r7
   44060:	003f0a06 	br	43c8c <__alt_mem_epcs_flash_controller+0xfe03ac8c>
   44064:	2023883a 	mov	r17,r4
   44068:	003f0d06 	br	43ca0 <__alt_mem_epcs_flash_controller+0xfe03aca0>
   4406c:	0081ffc4 	movi	r2,2047
   44070:	80bf3f1e 	bne	r16,r2,43d70 <__alt_mem_epcs_flash_controller+0xfe03ad70>
   44074:	003ec806 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   44078:	0005883a 	mov	r2,zero
   4407c:	003fb106 	br	43f44 <__alt_mem_epcs_flash_controller+0xfe03af44>
   44080:	0007883a 	mov	r3,zero
   44084:	003fbc06 	br	43f78 <__alt_mem_epcs_flash_controller+0xfe03af78>
   44088:	4444b03a 	or	r2,r8,r17
   4408c:	8000871e 	bne	r16,zero,442ac <__adddf3+0x790>
   44090:	1000ba26 	beq	r2,zero,4437c <__adddf3+0x860>
   44094:	4984b03a 	or	r2,r9,r6
   44098:	103ebf26 	beq	r2,zero,43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   4409c:	8985883a 	add	r2,r17,r6
   440a0:	4247883a 	add	r3,r8,r9
   440a4:	1451803a 	cmpltu	r8,r2,r17
   440a8:	40d1883a 	add	r8,r8,r3
   440ac:	40c0202c 	andhi	r3,r8,128
   440b0:	1023883a 	mov	r17,r2
   440b4:	183f1a26 	beq	r3,zero,43d20 <__alt_mem_epcs_flash_controller+0xfe03ad20>
   440b8:	00bfe034 	movhi	r2,65408
   440bc:	10bfffc4 	addi	r2,r2,-1
   440c0:	2021883a 	mov	r16,r4
   440c4:	4090703a 	and	r8,r8,r2
   440c8:	003eb306 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   440cc:	4444b03a 	or	r2,r8,r17
   440d0:	8000291e 	bne	r16,zero,44178 <__adddf3+0x65c>
   440d4:	10004b1e 	bne	r2,zero,44204 <__adddf3+0x6e8>
   440d8:	4990b03a 	or	r8,r9,r6
   440dc:	40008b26 	beq	r8,zero,4430c <__adddf3+0x7f0>
   440e0:	4811883a 	mov	r8,r9
   440e4:	3023883a 	mov	r17,r6
   440e8:	3825883a 	mov	r18,r7
   440ec:	003eaa06 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   440f0:	1021883a 	mov	r16,r2
   440f4:	0011883a 	mov	r8,zero
   440f8:	0005883a 	mov	r2,zero
   440fc:	003f0f06 	br	43d3c <__alt_mem_epcs_flash_controller+0xfe03ad3c>
   44100:	217ff804 	addi	r5,r4,-32
   44104:	00800804 	movi	r2,32
   44108:	494ad83a 	srl	r5,r9,r5
   4410c:	20807d26 	beq	r4,r2,44304 <__adddf3+0x7e8>
   44110:	00801004 	movi	r2,64
   44114:	1109c83a 	sub	r4,r2,r4
   44118:	4912983a 	sll	r9,r9,r4
   4411c:	498cb03a 	or	r6,r9,r6
   44120:	300cc03a 	cmpne	r6,r6,zero
   44124:	298ab03a 	or	r5,r5,r6
   44128:	0013883a 	mov	r9,zero
   4412c:	003f1506 	br	43d84 <__alt_mem_epcs_flash_controller+0xfe03ad84>
   44130:	0101ffc4 	movi	r4,2047
   44134:	113f9a1e 	bne	r2,r4,43fa0 <__alt_mem_epcs_flash_controller+0xfe03afa0>
   44138:	4811883a 	mov	r8,r9
   4413c:	3023883a 	mov	r17,r6
   44140:	1021883a 	mov	r16,r2
   44144:	3825883a 	mov	r18,r7
   44148:	003e9306 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   4414c:	8000161e 	bne	r16,zero,441a8 <__adddf3+0x68c>
   44150:	444ab03a 	or	r5,r8,r17
   44154:	28005126 	beq	r5,zero,4429c <__adddf3+0x780>
   44158:	0108303a 	nor	r4,zero,r4
   4415c:	20004d1e 	bne	r4,zero,44294 <__adddf3+0x778>
   44160:	89a3883a 	add	r17,r17,r6
   44164:	4253883a 	add	r9,r8,r9
   44168:	898d803a 	cmpltu	r6,r17,r6
   4416c:	3251883a 	add	r8,r6,r9
   44170:	1021883a 	mov	r16,r2
   44174:	003f0806 	br	43d98 <__alt_mem_epcs_flash_controller+0xfe03ad98>
   44178:	1000301e 	bne	r2,zero,4423c <__adddf3+0x720>
   4417c:	4984b03a 	or	r2,r9,r6
   44180:	10007126 	beq	r2,zero,44348 <__adddf3+0x82c>
   44184:	4811883a 	mov	r8,r9
   44188:	3023883a 	mov	r17,r6
   4418c:	3825883a 	mov	r18,r7
   44190:	0401ffc4 	movi	r16,2047
   44194:	003e8006 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   44198:	4462b03a 	or	r17,r8,r17
   4419c:	8822c03a 	cmpne	r17,r17,zero
   441a0:	0007883a 	mov	r3,zero
   441a4:	003f8b06 	br	43fd4 <__alt_mem_epcs_flash_controller+0xfe03afd4>
   441a8:	0141ffc4 	movi	r5,2047
   441ac:	11403b26 	beq	r2,r5,4429c <__adddf3+0x780>
   441b0:	0109c83a 	sub	r4,zero,r4
   441b4:	42002034 	orhi	r8,r8,128
   441b8:	01400e04 	movi	r5,56
   441bc:	29006716 	blt	r5,r4,4435c <__adddf3+0x840>
   441c0:	014007c4 	movi	r5,31
   441c4:	29007016 	blt	r5,r4,44388 <__adddf3+0x86c>
   441c8:	01400804 	movi	r5,32
   441cc:	290bc83a 	sub	r5,r5,r4
   441d0:	4154983a 	sll	r10,r8,r5
   441d4:	890ed83a 	srl	r7,r17,r4
   441d8:	894a983a 	sll	r5,r17,r5
   441dc:	4108d83a 	srl	r4,r8,r4
   441e0:	51e2b03a 	or	r17,r10,r7
   441e4:	280ac03a 	cmpne	r5,r5,zero
   441e8:	8962b03a 	or	r17,r17,r5
   441ec:	89a3883a 	add	r17,r17,r6
   441f0:	2253883a 	add	r9,r4,r9
   441f4:	898d803a 	cmpltu	r6,r17,r6
   441f8:	3251883a 	add	r8,r6,r9
   441fc:	1021883a 	mov	r16,r2
   44200:	003ee506 	br	43d98 <__alt_mem_epcs_flash_controller+0xfe03ad98>
   44204:	4984b03a 	or	r2,r9,r6
   44208:	103e6326 	beq	r2,zero,43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   4420c:	8987c83a 	sub	r3,r17,r6
   44210:	88c9803a 	cmpltu	r4,r17,r3
   44214:	4245c83a 	sub	r2,r8,r9
   44218:	1105c83a 	sub	r2,r2,r4
   4421c:	1100202c 	andhi	r4,r2,128
   44220:	203ebb26 	beq	r4,zero,43d10 <__alt_mem_epcs_flash_controller+0xfe03ad10>
   44224:	3463c83a 	sub	r17,r6,r17
   44228:	4a07c83a 	sub	r3,r9,r8
   4422c:	344d803a 	cmpltu	r6,r6,r17
   44230:	1991c83a 	sub	r8,r3,r6
   44234:	3825883a 	mov	r18,r7
   44238:	003e5706 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   4423c:	4984b03a 	or	r2,r9,r6
   44240:	10002e26 	beq	r2,zero,442fc <__adddf3+0x7e0>
   44244:	4004d0fa 	srli	r2,r8,3
   44248:	8822d0fa 	srli	r17,r17,3
   4424c:	4010977a 	slli	r8,r8,29
   44250:	10c0022c 	andhi	r3,r2,8
   44254:	4462b03a 	or	r17,r8,r17
   44258:	18000826 	beq	r3,zero,4427c <__adddf3+0x760>
   4425c:	4808d0fa 	srli	r4,r9,3
   44260:	20c0022c 	andhi	r3,r4,8
   44264:	1800051e 	bne	r3,zero,4427c <__adddf3+0x760>
   44268:	300cd0fa 	srli	r6,r6,3
   4426c:	4806977a 	slli	r3,r9,29
   44270:	2005883a 	mov	r2,r4
   44274:	3825883a 	mov	r18,r7
   44278:	19a2b03a 	or	r17,r3,r6
   4427c:	8810d77a 	srli	r8,r17,29
   44280:	100490fa 	slli	r2,r2,3
   44284:	882290fa 	slli	r17,r17,3
   44288:	0401ffc4 	movi	r16,2047
   4428c:	4090b03a 	or	r8,r8,r2
   44290:	003e4106 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   44294:	0141ffc4 	movi	r5,2047
   44298:	117fc71e 	bne	r2,r5,441b8 <__alt_mem_epcs_flash_controller+0xfe03b1b8>
   4429c:	4811883a 	mov	r8,r9
   442a0:	3023883a 	mov	r17,r6
   442a4:	1021883a 	mov	r16,r2
   442a8:	003e3b06 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   442ac:	10002f26 	beq	r2,zero,4436c <__adddf3+0x850>
   442b0:	4984b03a 	or	r2,r9,r6
   442b4:	10001126 	beq	r2,zero,442fc <__adddf3+0x7e0>
   442b8:	4004d0fa 	srli	r2,r8,3
   442bc:	8822d0fa 	srli	r17,r17,3
   442c0:	4010977a 	slli	r8,r8,29
   442c4:	10c0022c 	andhi	r3,r2,8
   442c8:	4462b03a 	or	r17,r8,r17
   442cc:	183feb26 	beq	r3,zero,4427c <__alt_mem_epcs_flash_controller+0xfe03b27c>
   442d0:	4808d0fa 	srli	r4,r9,3
   442d4:	20c0022c 	andhi	r3,r4,8
   442d8:	183fe81e 	bne	r3,zero,4427c <__alt_mem_epcs_flash_controller+0xfe03b27c>
   442dc:	300cd0fa 	srli	r6,r6,3
   442e0:	4806977a 	slli	r3,r9,29
   442e4:	2005883a 	mov	r2,r4
   442e8:	19a2b03a 	or	r17,r3,r6
   442ec:	003fe306 	br	4427c <__alt_mem_epcs_flash_controller+0xfe03b27c>
   442f0:	0011883a 	mov	r8,zero
   442f4:	0005883a 	mov	r2,zero
   442f8:	003e3f06 	br	43bf8 <__alt_mem_epcs_flash_controller+0xfe03abf8>
   442fc:	0401ffc4 	movi	r16,2047
   44300:	003e2506 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   44304:	0013883a 	mov	r9,zero
   44308:	003f8406 	br	4411c <__alt_mem_epcs_flash_controller+0xfe03b11c>
   4430c:	0005883a 	mov	r2,zero
   44310:	0007883a 	mov	r3,zero
   44314:	003e8906 	br	43d3c <__alt_mem_epcs_flash_controller+0xfe03ad3c>
   44318:	197ff804 	addi	r5,r3,-32
   4431c:	01000804 	movi	r4,32
   44320:	414ad83a 	srl	r5,r8,r5
   44324:	19002426 	beq	r3,r4,443b8 <__adddf3+0x89c>
   44328:	01001004 	movi	r4,64
   4432c:	20c7c83a 	sub	r3,r4,r3
   44330:	40c6983a 	sll	r3,r8,r3
   44334:	1c46b03a 	or	r3,r3,r17
   44338:	1806c03a 	cmpne	r3,r3,zero
   4433c:	28e2b03a 	or	r17,r5,r3
   44340:	0007883a 	mov	r3,zero
   44344:	003f2306 	br	43fd4 <__alt_mem_epcs_flash_controller+0xfe03afd4>
   44348:	0007883a 	mov	r3,zero
   4434c:	5811883a 	mov	r8,r11
   44350:	00bfffc4 	movi	r2,-1
   44354:	0401ffc4 	movi	r16,2047
   44358:	003e7806 	br	43d3c <__alt_mem_epcs_flash_controller+0xfe03ad3c>
   4435c:	4462b03a 	or	r17,r8,r17
   44360:	8822c03a 	cmpne	r17,r17,zero
   44364:	0009883a 	mov	r4,zero
   44368:	003fa006 	br	441ec <__alt_mem_epcs_flash_controller+0xfe03b1ec>
   4436c:	4811883a 	mov	r8,r9
   44370:	3023883a 	mov	r17,r6
   44374:	0401ffc4 	movi	r16,2047
   44378:	003e0706 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   4437c:	4811883a 	mov	r8,r9
   44380:	3023883a 	mov	r17,r6
   44384:	003e0406 	br	43b98 <__alt_mem_epcs_flash_controller+0xfe03ab98>
   44388:	21fff804 	addi	r7,r4,-32
   4438c:	01400804 	movi	r5,32
   44390:	41ced83a 	srl	r7,r8,r7
   44394:	21400a26 	beq	r4,r5,443c0 <__adddf3+0x8a4>
   44398:	01401004 	movi	r5,64
   4439c:	2909c83a 	sub	r4,r5,r4
   443a0:	4108983a 	sll	r4,r8,r4
   443a4:	2448b03a 	or	r4,r4,r17
   443a8:	2008c03a 	cmpne	r4,r4,zero
   443ac:	3922b03a 	or	r17,r7,r4
   443b0:	0009883a 	mov	r4,zero
   443b4:	003f8d06 	br	441ec <__alt_mem_epcs_flash_controller+0xfe03b1ec>
   443b8:	0007883a 	mov	r3,zero
   443bc:	003fdd06 	br	44334 <__alt_mem_epcs_flash_controller+0xfe03b334>
   443c0:	0009883a 	mov	r4,zero
   443c4:	003ff706 	br	443a4 <__alt_mem_epcs_flash_controller+0xfe03b3a4>

000443c8 <__divdf3>:
   443c8:	defff204 	addi	sp,sp,-56
   443cc:	dd400915 	stw	r21,36(sp)
   443d0:	282ad53a 	srli	r21,r5,20
   443d4:	dd000815 	stw	r20,32(sp)
   443d8:	2828d7fa 	srli	r20,r5,31
   443dc:	dc000415 	stw	r16,16(sp)
   443e0:	04000434 	movhi	r16,16
   443e4:	df000c15 	stw	fp,48(sp)
   443e8:	843fffc4 	addi	r16,r16,-1
   443ec:	dfc00d15 	stw	ra,52(sp)
   443f0:	ddc00b15 	stw	r23,44(sp)
   443f4:	dd800a15 	stw	r22,40(sp)
   443f8:	dcc00715 	stw	r19,28(sp)
   443fc:	dc800615 	stw	r18,24(sp)
   44400:	dc400515 	stw	r17,20(sp)
   44404:	ad41ffcc 	andi	r21,r21,2047
   44408:	2c20703a 	and	r16,r5,r16
   4440c:	a7003fcc 	andi	fp,r20,255
   44410:	a8006126 	beq	r21,zero,44598 <__divdf3+0x1d0>
   44414:	0081ffc4 	movi	r2,2047
   44418:	2025883a 	mov	r18,r4
   4441c:	a8803726 	beq	r21,r2,444fc <__divdf3+0x134>
   44420:	80800434 	orhi	r2,r16,16
   44424:	100490fa 	slli	r2,r2,3
   44428:	2020d77a 	srli	r16,r4,29
   4442c:	202490fa 	slli	r18,r4,3
   44430:	ad7f0044 	addi	r21,r21,-1023
   44434:	80a0b03a 	or	r16,r16,r2
   44438:	0027883a 	mov	r19,zero
   4443c:	0013883a 	mov	r9,zero
   44440:	3804d53a 	srli	r2,r7,20
   44444:	382cd7fa 	srli	r22,r7,31
   44448:	04400434 	movhi	r17,16
   4444c:	8c7fffc4 	addi	r17,r17,-1
   44450:	1081ffcc 	andi	r2,r2,2047
   44454:	3011883a 	mov	r8,r6
   44458:	3c62703a 	and	r17,r7,r17
   4445c:	b5c03fcc 	andi	r23,r22,255
   44460:	10006c26 	beq	r2,zero,44614 <__divdf3+0x24c>
   44464:	00c1ffc4 	movi	r3,2047
   44468:	10c06426 	beq	r2,r3,445fc <__divdf3+0x234>
   4446c:	88c00434 	orhi	r3,r17,16
   44470:	180690fa 	slli	r3,r3,3
   44474:	3022d77a 	srli	r17,r6,29
   44478:	301090fa 	slli	r8,r6,3
   4447c:	10bf0044 	addi	r2,r2,-1023
   44480:	88e2b03a 	or	r17,r17,r3
   44484:	000f883a 	mov	r7,zero
   44488:	a58cf03a 	xor	r6,r20,r22
   4448c:	3cc8b03a 	or	r4,r7,r19
   44490:	a8abc83a 	sub	r21,r21,r2
   44494:	008003c4 	movi	r2,15
   44498:	3007883a 	mov	r3,r6
   4449c:	34c03fcc 	andi	r19,r6,255
   444a0:	11009036 	bltu	r2,r4,446e4 <__divdf3+0x31c>
   444a4:	200890ba 	slli	r4,r4,2
   444a8:	00800134 	movhi	r2,4
   444ac:	10912f04 	addi	r2,r2,17596
   444b0:	2089883a 	add	r4,r4,r2
   444b4:	20800017 	ldw	r2,0(r4)
   444b8:	1000683a 	jmp	r2
   444bc:	000446e4 	muli	zero,zero,4379
   444c0:	00044534 	movhi	zero,4372
   444c4:	000446d4 	movui	zero,4379
   444c8:	00044528 	cmpgeui	zero,zero,4372
   444cc:	000446d4 	movui	zero,4379
   444d0:	000446a8 	cmpgeui	zero,zero,4378
   444d4:	000446d4 	movui	zero,4379
   444d8:	00044528 	cmpgeui	zero,zero,4372
   444dc:	00044534 	movhi	zero,4372
   444e0:	00044534 	movhi	zero,4372
   444e4:	000446a8 	cmpgeui	zero,zero,4378
   444e8:	00044528 	cmpgeui	zero,zero,4372
   444ec:	00044518 	cmpnei	zero,zero,4372
   444f0:	00044518 	cmpnei	zero,zero,4372
   444f4:	00044518 	cmpnei	zero,zero,4372
   444f8:	000449c8 	cmpgei	zero,zero,4391
   444fc:	2404b03a 	or	r2,r4,r16
   44500:	1000661e 	bne	r2,zero,4469c <__divdf3+0x2d4>
   44504:	04c00204 	movi	r19,8
   44508:	0021883a 	mov	r16,zero
   4450c:	0025883a 	mov	r18,zero
   44510:	02400084 	movi	r9,2
   44514:	003fca06 	br	44440 <__alt_mem_epcs_flash_controller+0xfe03b440>
   44518:	8023883a 	mov	r17,r16
   4451c:	9011883a 	mov	r8,r18
   44520:	e02f883a 	mov	r23,fp
   44524:	480f883a 	mov	r7,r9
   44528:	00800084 	movi	r2,2
   4452c:	3881311e 	bne	r7,r2,449f4 <__divdf3+0x62c>
   44530:	b827883a 	mov	r19,r23
   44534:	98c0004c 	andi	r3,r19,1
   44538:	0081ffc4 	movi	r2,2047
   4453c:	000b883a 	mov	r5,zero
   44540:	0025883a 	mov	r18,zero
   44544:	1004953a 	slli	r2,r2,20
   44548:	18c03fcc 	andi	r3,r3,255
   4454c:	04400434 	movhi	r17,16
   44550:	8c7fffc4 	addi	r17,r17,-1
   44554:	180697fa 	slli	r3,r3,31
   44558:	2c4a703a 	and	r5,r5,r17
   4455c:	288ab03a 	or	r5,r5,r2
   44560:	28c6b03a 	or	r3,r5,r3
   44564:	9005883a 	mov	r2,r18
   44568:	dfc00d17 	ldw	ra,52(sp)
   4456c:	df000c17 	ldw	fp,48(sp)
   44570:	ddc00b17 	ldw	r23,44(sp)
   44574:	dd800a17 	ldw	r22,40(sp)
   44578:	dd400917 	ldw	r21,36(sp)
   4457c:	dd000817 	ldw	r20,32(sp)
   44580:	dcc00717 	ldw	r19,28(sp)
   44584:	dc800617 	ldw	r18,24(sp)
   44588:	dc400517 	ldw	r17,20(sp)
   4458c:	dc000417 	ldw	r16,16(sp)
   44590:	dec00e04 	addi	sp,sp,56
   44594:	f800283a 	ret
   44598:	2404b03a 	or	r2,r4,r16
   4459c:	2027883a 	mov	r19,r4
   445a0:	10003926 	beq	r2,zero,44688 <__divdf3+0x2c0>
   445a4:	80012e26 	beq	r16,zero,44a60 <__divdf3+0x698>
   445a8:	8009883a 	mov	r4,r16
   445ac:	d9800315 	stw	r6,12(sp)
   445b0:	d9c00215 	stw	r7,8(sp)
   445b4:	0045f700 	call	45f70 <__clzsi2>
   445b8:	d9800317 	ldw	r6,12(sp)
   445bc:	d9c00217 	ldw	r7,8(sp)
   445c0:	113ffd44 	addi	r4,r2,-11
   445c4:	00c00704 	movi	r3,28
   445c8:	19012116 	blt	r3,r4,44a50 <__divdf3+0x688>
   445cc:	00c00744 	movi	r3,29
   445d0:	147ffe04 	addi	r17,r2,-8
   445d4:	1907c83a 	sub	r3,r3,r4
   445d8:	8460983a 	sll	r16,r16,r17
   445dc:	98c6d83a 	srl	r3,r19,r3
   445e0:	9c64983a 	sll	r18,r19,r17
   445e4:	1c20b03a 	or	r16,r3,r16
   445e8:	1080fcc4 	addi	r2,r2,1011
   445ec:	00abc83a 	sub	r21,zero,r2
   445f0:	0027883a 	mov	r19,zero
   445f4:	0013883a 	mov	r9,zero
   445f8:	003f9106 	br	44440 <__alt_mem_epcs_flash_controller+0xfe03b440>
   445fc:	3446b03a 	or	r3,r6,r17
   44600:	18001f1e 	bne	r3,zero,44680 <__divdf3+0x2b8>
   44604:	0023883a 	mov	r17,zero
   44608:	0011883a 	mov	r8,zero
   4460c:	01c00084 	movi	r7,2
   44610:	003f9d06 	br	44488 <__alt_mem_epcs_flash_controller+0xfe03b488>
   44614:	3446b03a 	or	r3,r6,r17
   44618:	18001526 	beq	r3,zero,44670 <__divdf3+0x2a8>
   4461c:	88011b26 	beq	r17,zero,44a8c <__divdf3+0x6c4>
   44620:	8809883a 	mov	r4,r17
   44624:	d9800315 	stw	r6,12(sp)
   44628:	da400115 	stw	r9,4(sp)
   4462c:	0045f700 	call	45f70 <__clzsi2>
   44630:	d9800317 	ldw	r6,12(sp)
   44634:	da400117 	ldw	r9,4(sp)
   44638:	113ffd44 	addi	r4,r2,-11
   4463c:	00c00704 	movi	r3,28
   44640:	19010e16 	blt	r3,r4,44a7c <__divdf3+0x6b4>
   44644:	00c00744 	movi	r3,29
   44648:	123ffe04 	addi	r8,r2,-8
   4464c:	1907c83a 	sub	r3,r3,r4
   44650:	8a22983a 	sll	r17,r17,r8
   44654:	30c6d83a 	srl	r3,r6,r3
   44658:	3210983a 	sll	r8,r6,r8
   4465c:	1c62b03a 	or	r17,r3,r17
   44660:	1080fcc4 	addi	r2,r2,1011
   44664:	0085c83a 	sub	r2,zero,r2
   44668:	000f883a 	mov	r7,zero
   4466c:	003f8606 	br	44488 <__alt_mem_epcs_flash_controller+0xfe03b488>
   44670:	0023883a 	mov	r17,zero
   44674:	0011883a 	mov	r8,zero
   44678:	01c00044 	movi	r7,1
   4467c:	003f8206 	br	44488 <__alt_mem_epcs_flash_controller+0xfe03b488>
   44680:	01c000c4 	movi	r7,3
   44684:	003f8006 	br	44488 <__alt_mem_epcs_flash_controller+0xfe03b488>
   44688:	04c00104 	movi	r19,4
   4468c:	0021883a 	mov	r16,zero
   44690:	0025883a 	mov	r18,zero
   44694:	02400044 	movi	r9,1
   44698:	003f6906 	br	44440 <__alt_mem_epcs_flash_controller+0xfe03b440>
   4469c:	04c00304 	movi	r19,12
   446a0:	024000c4 	movi	r9,3
   446a4:	003f6606 	br	44440 <__alt_mem_epcs_flash_controller+0xfe03b440>
   446a8:	01400434 	movhi	r5,16
   446ac:	0007883a 	mov	r3,zero
   446b0:	297fffc4 	addi	r5,r5,-1
   446b4:	04bfffc4 	movi	r18,-1
   446b8:	0081ffc4 	movi	r2,2047
   446bc:	003fa106 	br	44544 <__alt_mem_epcs_flash_controller+0xfe03b544>
   446c0:	00c00044 	movi	r3,1
   446c4:	1887c83a 	sub	r3,r3,r2
   446c8:	01000e04 	movi	r4,56
   446cc:	20c1210e 	bge	r4,r3,44b54 <__divdf3+0x78c>
   446d0:	98c0004c 	andi	r3,r19,1
   446d4:	0005883a 	mov	r2,zero
   446d8:	000b883a 	mov	r5,zero
   446dc:	0025883a 	mov	r18,zero
   446e0:	003f9806 	br	44544 <__alt_mem_epcs_flash_controller+0xfe03b544>
   446e4:	8c00fd36 	bltu	r17,r16,44adc <__divdf3+0x714>
   446e8:	8440fb26 	beq	r16,r17,44ad8 <__divdf3+0x710>
   446ec:	8007883a 	mov	r3,r16
   446f0:	ad7fffc4 	addi	r21,r21,-1
   446f4:	0021883a 	mov	r16,zero
   446f8:	4004d63a 	srli	r2,r8,24
   446fc:	8822923a 	slli	r17,r17,8
   44700:	1809883a 	mov	r4,r3
   44704:	402c923a 	slli	r22,r8,8
   44708:	88b8b03a 	or	fp,r17,r2
   4470c:	e028d43a 	srli	r20,fp,16
   44710:	d8c00015 	stw	r3,0(sp)
   44714:	e5ffffcc 	andi	r23,fp,65535
   44718:	a00b883a 	mov	r5,r20
   4471c:	0043a380 	call	43a38 <__udivsi3>
   44720:	d8c00017 	ldw	r3,0(sp)
   44724:	a00b883a 	mov	r5,r20
   44728:	d8800315 	stw	r2,12(sp)
   4472c:	1809883a 	mov	r4,r3
   44730:	0043a9c0 	call	43a9c <__umodsi3>
   44734:	d9800317 	ldw	r6,12(sp)
   44738:	1006943a 	slli	r3,r2,16
   4473c:	9004d43a 	srli	r2,r18,16
   44740:	b9a3383a 	mul	r17,r23,r6
   44744:	10c4b03a 	or	r2,r2,r3
   44748:	1440062e 	bgeu	r2,r17,44764 <__divdf3+0x39c>
   4474c:	1705883a 	add	r2,r2,fp
   44750:	30ffffc4 	addi	r3,r6,-1
   44754:	1700ee36 	bltu	r2,fp,44b10 <__divdf3+0x748>
   44758:	1440ed2e 	bgeu	r2,r17,44b10 <__divdf3+0x748>
   4475c:	31bfff84 	addi	r6,r6,-2
   44760:	1705883a 	add	r2,r2,fp
   44764:	1463c83a 	sub	r17,r2,r17
   44768:	a00b883a 	mov	r5,r20
   4476c:	8809883a 	mov	r4,r17
   44770:	d9800315 	stw	r6,12(sp)
   44774:	0043a380 	call	43a38 <__udivsi3>
   44778:	a00b883a 	mov	r5,r20
   4477c:	8809883a 	mov	r4,r17
   44780:	d8800215 	stw	r2,8(sp)
   44784:	0043a9c0 	call	43a9c <__umodsi3>
   44788:	d9c00217 	ldw	r7,8(sp)
   4478c:	1004943a 	slli	r2,r2,16
   44790:	94bfffcc 	andi	r18,r18,65535
   44794:	b9d1383a 	mul	r8,r23,r7
   44798:	90a4b03a 	or	r18,r18,r2
   4479c:	d9800317 	ldw	r6,12(sp)
   447a0:	9200062e 	bgeu	r18,r8,447bc <__divdf3+0x3f4>
   447a4:	9725883a 	add	r18,r18,fp
   447a8:	38bfffc4 	addi	r2,r7,-1
   447ac:	9700d636 	bltu	r18,fp,44b08 <__divdf3+0x740>
   447b0:	9200d52e 	bgeu	r18,r8,44b08 <__divdf3+0x740>
   447b4:	39ffff84 	addi	r7,r7,-2
   447b8:	9725883a 	add	r18,r18,fp
   447bc:	3004943a 	slli	r2,r6,16
   447c0:	b012d43a 	srli	r9,r22,16
   447c4:	b1bfffcc 	andi	r6,r22,65535
   447c8:	11e2b03a 	or	r17,r2,r7
   447cc:	8806d43a 	srli	r3,r17,16
   447d0:	893fffcc 	andi	r4,r17,65535
   447d4:	218b383a 	mul	r5,r4,r6
   447d8:	30c5383a 	mul	r2,r6,r3
   447dc:	2249383a 	mul	r4,r4,r9
   447e0:	280ed43a 	srli	r7,r5,16
   447e4:	9225c83a 	sub	r18,r18,r8
   447e8:	2089883a 	add	r4,r4,r2
   447ec:	3909883a 	add	r4,r7,r4
   447f0:	1a47383a 	mul	r3,r3,r9
   447f4:	2080022e 	bgeu	r4,r2,44800 <__divdf3+0x438>
   447f8:	00800074 	movhi	r2,1
   447fc:	1887883a 	add	r3,r3,r2
   44800:	2004d43a 	srli	r2,r4,16
   44804:	2008943a 	slli	r4,r4,16
   44808:	297fffcc 	andi	r5,r5,65535
   4480c:	10c7883a 	add	r3,r2,r3
   44810:	2149883a 	add	r4,r4,r5
   44814:	90c0a536 	bltu	r18,r3,44aac <__divdf3+0x6e4>
   44818:	90c0bf26 	beq	r18,r3,44b18 <__divdf3+0x750>
   4481c:	90c7c83a 	sub	r3,r18,r3
   44820:	810fc83a 	sub	r7,r16,r4
   44824:	81e5803a 	cmpltu	r18,r16,r7
   44828:	1ca5c83a 	sub	r18,r3,r18
   4482c:	e480c126 	beq	fp,r18,44b34 <__divdf3+0x76c>
   44830:	a00b883a 	mov	r5,r20
   44834:	9009883a 	mov	r4,r18
   44838:	d9800315 	stw	r6,12(sp)
   4483c:	d9c00215 	stw	r7,8(sp)
   44840:	da400115 	stw	r9,4(sp)
   44844:	0043a380 	call	43a38 <__udivsi3>
   44848:	a00b883a 	mov	r5,r20
   4484c:	9009883a 	mov	r4,r18
   44850:	d8800015 	stw	r2,0(sp)
   44854:	0043a9c0 	call	43a9c <__umodsi3>
   44858:	d9c00217 	ldw	r7,8(sp)
   4485c:	da000017 	ldw	r8,0(sp)
   44860:	1006943a 	slli	r3,r2,16
   44864:	3804d43a 	srli	r2,r7,16
   44868:	ba21383a 	mul	r16,r23,r8
   4486c:	d9800317 	ldw	r6,12(sp)
   44870:	10c4b03a 	or	r2,r2,r3
   44874:	da400117 	ldw	r9,4(sp)
   44878:	1400062e 	bgeu	r2,r16,44894 <__divdf3+0x4cc>
   4487c:	1705883a 	add	r2,r2,fp
   44880:	40ffffc4 	addi	r3,r8,-1
   44884:	1700ad36 	bltu	r2,fp,44b3c <__divdf3+0x774>
   44888:	1400ac2e 	bgeu	r2,r16,44b3c <__divdf3+0x774>
   4488c:	423fff84 	addi	r8,r8,-2
   44890:	1705883a 	add	r2,r2,fp
   44894:	1421c83a 	sub	r16,r2,r16
   44898:	a00b883a 	mov	r5,r20
   4489c:	8009883a 	mov	r4,r16
   448a0:	d9800315 	stw	r6,12(sp)
   448a4:	d9c00215 	stw	r7,8(sp)
   448a8:	da000015 	stw	r8,0(sp)
   448ac:	da400115 	stw	r9,4(sp)
   448b0:	0043a380 	call	43a38 <__udivsi3>
   448b4:	8009883a 	mov	r4,r16
   448b8:	a00b883a 	mov	r5,r20
   448bc:	1025883a 	mov	r18,r2
   448c0:	0043a9c0 	call	43a9c <__umodsi3>
   448c4:	d9c00217 	ldw	r7,8(sp)
   448c8:	1004943a 	slli	r2,r2,16
   448cc:	bcaf383a 	mul	r23,r23,r18
   448d0:	393fffcc 	andi	r4,r7,65535
   448d4:	2088b03a 	or	r4,r4,r2
   448d8:	d9800317 	ldw	r6,12(sp)
   448dc:	da000017 	ldw	r8,0(sp)
   448e0:	da400117 	ldw	r9,4(sp)
   448e4:	25c0062e 	bgeu	r4,r23,44900 <__divdf3+0x538>
   448e8:	2709883a 	add	r4,r4,fp
   448ec:	90bfffc4 	addi	r2,r18,-1
   448f0:	27009436 	bltu	r4,fp,44b44 <__divdf3+0x77c>
   448f4:	25c0932e 	bgeu	r4,r23,44b44 <__divdf3+0x77c>
   448f8:	94bfff84 	addi	r18,r18,-2
   448fc:	2709883a 	add	r4,r4,fp
   44900:	4004943a 	slli	r2,r8,16
   44904:	25efc83a 	sub	r23,r4,r23
   44908:	1490b03a 	or	r8,r2,r18
   4490c:	4008d43a 	srli	r4,r8,16
   44910:	40ffffcc 	andi	r3,r8,65535
   44914:	30c5383a 	mul	r2,r6,r3
   44918:	1a47383a 	mul	r3,r3,r9
   4491c:	310d383a 	mul	r6,r6,r4
   44920:	100ad43a 	srli	r5,r2,16
   44924:	4913383a 	mul	r9,r9,r4
   44928:	1987883a 	add	r3,r3,r6
   4492c:	28c7883a 	add	r3,r5,r3
   44930:	1980022e 	bgeu	r3,r6,4493c <__divdf3+0x574>
   44934:	01000074 	movhi	r4,1
   44938:	4913883a 	add	r9,r9,r4
   4493c:	1808d43a 	srli	r4,r3,16
   44940:	1806943a 	slli	r3,r3,16
   44944:	10bfffcc 	andi	r2,r2,65535
   44948:	2253883a 	add	r9,r4,r9
   4494c:	1887883a 	add	r3,r3,r2
   44950:	ba403836 	bltu	r23,r9,44a34 <__divdf3+0x66c>
   44954:	ba403626 	beq	r23,r9,44a30 <__divdf3+0x668>
   44958:	42000054 	ori	r8,r8,1
   4495c:	a880ffc4 	addi	r2,r21,1023
   44960:	00bf570e 	bge	zero,r2,446c0 <__alt_mem_epcs_flash_controller+0xfe03b6c0>
   44964:	40c001cc 	andi	r3,r8,7
   44968:	18000726 	beq	r3,zero,44988 <__divdf3+0x5c0>
   4496c:	40c003cc 	andi	r3,r8,15
   44970:	01000104 	movi	r4,4
   44974:	19000426 	beq	r3,r4,44988 <__divdf3+0x5c0>
   44978:	4107883a 	add	r3,r8,r4
   4497c:	1a11803a 	cmpltu	r8,r3,r8
   44980:	8a23883a 	add	r17,r17,r8
   44984:	1811883a 	mov	r8,r3
   44988:	88c0402c 	andhi	r3,r17,256
   4498c:	18000426 	beq	r3,zero,449a0 <__divdf3+0x5d8>
   44990:	00ffc034 	movhi	r3,65280
   44994:	18ffffc4 	addi	r3,r3,-1
   44998:	a8810004 	addi	r2,r21,1024
   4499c:	88e2703a 	and	r17,r17,r3
   449a0:	00c1ff84 	movi	r3,2046
   449a4:	18bee316 	blt	r3,r2,44534 <__alt_mem_epcs_flash_controller+0xfe03b534>
   449a8:	8824977a 	slli	r18,r17,29
   449ac:	4010d0fa 	srli	r8,r8,3
   449b0:	8822927a 	slli	r17,r17,9
   449b4:	1081ffcc 	andi	r2,r2,2047
   449b8:	9224b03a 	or	r18,r18,r8
   449bc:	880ad33a 	srli	r5,r17,12
   449c0:	98c0004c 	andi	r3,r19,1
   449c4:	003edf06 	br	44544 <__alt_mem_epcs_flash_controller+0xfe03b544>
   449c8:	8080022c 	andhi	r2,r16,8
   449cc:	10001226 	beq	r2,zero,44a18 <__divdf3+0x650>
   449d0:	8880022c 	andhi	r2,r17,8
   449d4:	1000101e 	bne	r2,zero,44a18 <__divdf3+0x650>
   449d8:	00800434 	movhi	r2,16
   449dc:	89400234 	orhi	r5,r17,8
   449e0:	10bfffc4 	addi	r2,r2,-1
   449e4:	b007883a 	mov	r3,r22
   449e8:	288a703a 	and	r5,r5,r2
   449ec:	4025883a 	mov	r18,r8
   449f0:	003f3106 	br	446b8 <__alt_mem_epcs_flash_controller+0xfe03b6b8>
   449f4:	008000c4 	movi	r2,3
   449f8:	3880a626 	beq	r7,r2,44c94 <__divdf3+0x8cc>
   449fc:	00800044 	movi	r2,1
   44a00:	3880521e 	bne	r7,r2,44b4c <__divdf3+0x784>
   44a04:	b807883a 	mov	r3,r23
   44a08:	0005883a 	mov	r2,zero
   44a0c:	000b883a 	mov	r5,zero
   44a10:	0025883a 	mov	r18,zero
   44a14:	003ecb06 	br	44544 <__alt_mem_epcs_flash_controller+0xfe03b544>
   44a18:	00800434 	movhi	r2,16
   44a1c:	81400234 	orhi	r5,r16,8
   44a20:	10bfffc4 	addi	r2,r2,-1
   44a24:	a007883a 	mov	r3,r20
   44a28:	288a703a 	and	r5,r5,r2
   44a2c:	003f2206 	br	446b8 <__alt_mem_epcs_flash_controller+0xfe03b6b8>
   44a30:	183fca26 	beq	r3,zero,4495c <__alt_mem_epcs_flash_controller+0xfe03b95c>
   44a34:	e5ef883a 	add	r23,fp,r23
   44a38:	40bfffc4 	addi	r2,r8,-1
   44a3c:	bf00392e 	bgeu	r23,fp,44b24 <__divdf3+0x75c>
   44a40:	1011883a 	mov	r8,r2
   44a44:	ba7fc41e 	bne	r23,r9,44958 <__alt_mem_epcs_flash_controller+0xfe03b958>
   44a48:	b0ffc31e 	bne	r22,r3,44958 <__alt_mem_epcs_flash_controller+0xfe03b958>
   44a4c:	003fc306 	br	4495c <__alt_mem_epcs_flash_controller+0xfe03b95c>
   44a50:	143ff604 	addi	r16,r2,-40
   44a54:	9c20983a 	sll	r16,r19,r16
   44a58:	0025883a 	mov	r18,zero
   44a5c:	003ee206 	br	445e8 <__alt_mem_epcs_flash_controller+0xfe03b5e8>
   44a60:	d9800315 	stw	r6,12(sp)
   44a64:	d9c00215 	stw	r7,8(sp)
   44a68:	0045f700 	call	45f70 <__clzsi2>
   44a6c:	10800804 	addi	r2,r2,32
   44a70:	d9c00217 	ldw	r7,8(sp)
   44a74:	d9800317 	ldw	r6,12(sp)
   44a78:	003ed106 	br	445c0 <__alt_mem_epcs_flash_controller+0xfe03b5c0>
   44a7c:	147ff604 	addi	r17,r2,-40
   44a80:	3462983a 	sll	r17,r6,r17
   44a84:	0011883a 	mov	r8,zero
   44a88:	003ef506 	br	44660 <__alt_mem_epcs_flash_controller+0xfe03b660>
   44a8c:	3009883a 	mov	r4,r6
   44a90:	d9800315 	stw	r6,12(sp)
   44a94:	da400115 	stw	r9,4(sp)
   44a98:	0045f700 	call	45f70 <__clzsi2>
   44a9c:	10800804 	addi	r2,r2,32
   44aa0:	da400117 	ldw	r9,4(sp)
   44aa4:	d9800317 	ldw	r6,12(sp)
   44aa8:	003ee306 	br	44638 <__alt_mem_epcs_flash_controller+0xfe03b638>
   44aac:	85a1883a 	add	r16,r16,r22
   44ab0:	8585803a 	cmpltu	r2,r16,r22
   44ab4:	1705883a 	add	r2,r2,fp
   44ab8:	14a5883a 	add	r18,r2,r18
   44abc:	88bfffc4 	addi	r2,r17,-1
   44ac0:	e4800c2e 	bgeu	fp,r18,44af4 <__divdf3+0x72c>
   44ac4:	90c03e36 	bltu	r18,r3,44bc0 <__divdf3+0x7f8>
   44ac8:	1c806926 	beq	r3,r18,44c70 <__divdf3+0x8a8>
   44acc:	90c7c83a 	sub	r3,r18,r3
   44ad0:	1023883a 	mov	r17,r2
   44ad4:	003f5206 	br	44820 <__alt_mem_epcs_flash_controller+0xfe03b820>
   44ad8:	923f0436 	bltu	r18,r8,446ec <__alt_mem_epcs_flash_controller+0xfe03b6ec>
   44adc:	800897fa 	slli	r4,r16,31
   44ae0:	9004d07a 	srli	r2,r18,1
   44ae4:	8006d07a 	srli	r3,r16,1
   44ae8:	902097fa 	slli	r16,r18,31
   44aec:	20a4b03a 	or	r18,r4,r2
   44af0:	003f0106 	br	446f8 <__alt_mem_epcs_flash_controller+0xfe03b6f8>
   44af4:	e4bff51e 	bne	fp,r18,44acc <__alt_mem_epcs_flash_controller+0xfe03bacc>
   44af8:	85bff22e 	bgeu	r16,r22,44ac4 <__alt_mem_epcs_flash_controller+0xfe03bac4>
   44afc:	e0c7c83a 	sub	r3,fp,r3
   44b00:	1023883a 	mov	r17,r2
   44b04:	003f4606 	br	44820 <__alt_mem_epcs_flash_controller+0xfe03b820>
   44b08:	100f883a 	mov	r7,r2
   44b0c:	003f2b06 	br	447bc <__alt_mem_epcs_flash_controller+0xfe03b7bc>
   44b10:	180d883a 	mov	r6,r3
   44b14:	003f1306 	br	44764 <__alt_mem_epcs_flash_controller+0xfe03b764>
   44b18:	813fe436 	bltu	r16,r4,44aac <__alt_mem_epcs_flash_controller+0xfe03baac>
   44b1c:	0007883a 	mov	r3,zero
   44b20:	003f3f06 	br	44820 <__alt_mem_epcs_flash_controller+0xfe03b820>
   44b24:	ba402c36 	bltu	r23,r9,44bd8 <__divdf3+0x810>
   44b28:	4dc05426 	beq	r9,r23,44c7c <__divdf3+0x8b4>
   44b2c:	1011883a 	mov	r8,r2
   44b30:	003f8906 	br	44958 <__alt_mem_epcs_flash_controller+0xfe03b958>
   44b34:	023fffc4 	movi	r8,-1
   44b38:	003f8806 	br	4495c <__alt_mem_epcs_flash_controller+0xfe03b95c>
   44b3c:	1811883a 	mov	r8,r3
   44b40:	003f5406 	br	44894 <__alt_mem_epcs_flash_controller+0xfe03b894>
   44b44:	1025883a 	mov	r18,r2
   44b48:	003f6d06 	br	44900 <__alt_mem_epcs_flash_controller+0xfe03b900>
   44b4c:	b827883a 	mov	r19,r23
   44b50:	003f8206 	br	4495c <__alt_mem_epcs_flash_controller+0xfe03b95c>
   44b54:	010007c4 	movi	r4,31
   44b58:	20c02616 	blt	r4,r3,44bf4 <__divdf3+0x82c>
   44b5c:	00800804 	movi	r2,32
   44b60:	10c5c83a 	sub	r2,r2,r3
   44b64:	888a983a 	sll	r5,r17,r2
   44b68:	40c8d83a 	srl	r4,r8,r3
   44b6c:	4084983a 	sll	r2,r8,r2
   44b70:	88e2d83a 	srl	r17,r17,r3
   44b74:	2906b03a 	or	r3,r5,r4
   44b78:	1004c03a 	cmpne	r2,r2,zero
   44b7c:	1886b03a 	or	r3,r3,r2
   44b80:	188001cc 	andi	r2,r3,7
   44b84:	10000726 	beq	r2,zero,44ba4 <__divdf3+0x7dc>
   44b88:	188003cc 	andi	r2,r3,15
   44b8c:	01000104 	movi	r4,4
   44b90:	11000426 	beq	r2,r4,44ba4 <__divdf3+0x7dc>
   44b94:	1805883a 	mov	r2,r3
   44b98:	10c00104 	addi	r3,r2,4
   44b9c:	1885803a 	cmpltu	r2,r3,r2
   44ba0:	88a3883a 	add	r17,r17,r2
   44ba4:	8880202c 	andhi	r2,r17,128
   44ba8:	10002726 	beq	r2,zero,44c48 <__divdf3+0x880>
   44bac:	98c0004c 	andi	r3,r19,1
   44bb0:	00800044 	movi	r2,1
   44bb4:	000b883a 	mov	r5,zero
   44bb8:	0025883a 	mov	r18,zero
   44bbc:	003e6106 	br	44544 <__alt_mem_epcs_flash_controller+0xfe03b544>
   44bc0:	85a1883a 	add	r16,r16,r22
   44bc4:	8585803a 	cmpltu	r2,r16,r22
   44bc8:	1705883a 	add	r2,r2,fp
   44bcc:	14a5883a 	add	r18,r2,r18
   44bd0:	8c7fff84 	addi	r17,r17,-2
   44bd4:	003f1106 	br	4481c <__alt_mem_epcs_flash_controller+0xfe03b81c>
   44bd8:	b589883a 	add	r4,r22,r22
   44bdc:	25ad803a 	cmpltu	r22,r4,r22
   44be0:	b739883a 	add	fp,r22,fp
   44be4:	40bfff84 	addi	r2,r8,-2
   44be8:	bf2f883a 	add	r23,r23,fp
   44bec:	202d883a 	mov	r22,r4
   44bf0:	003f9306 	br	44a40 <__alt_mem_epcs_flash_controller+0xfe03ba40>
   44bf4:	013ff844 	movi	r4,-31
   44bf8:	2085c83a 	sub	r2,r4,r2
   44bfc:	8888d83a 	srl	r4,r17,r2
   44c00:	00800804 	movi	r2,32
   44c04:	18802126 	beq	r3,r2,44c8c <__divdf3+0x8c4>
   44c08:	00801004 	movi	r2,64
   44c0c:	10c5c83a 	sub	r2,r2,r3
   44c10:	8884983a 	sll	r2,r17,r2
   44c14:	1204b03a 	or	r2,r2,r8
   44c18:	1004c03a 	cmpne	r2,r2,zero
   44c1c:	2084b03a 	or	r2,r4,r2
   44c20:	144001cc 	andi	r17,r2,7
   44c24:	88000d1e 	bne	r17,zero,44c5c <__divdf3+0x894>
   44c28:	000b883a 	mov	r5,zero
   44c2c:	1024d0fa 	srli	r18,r2,3
   44c30:	98c0004c 	andi	r3,r19,1
   44c34:	0005883a 	mov	r2,zero
   44c38:	9464b03a 	or	r18,r18,r17
   44c3c:	003e4106 	br	44544 <__alt_mem_epcs_flash_controller+0xfe03b544>
   44c40:	1007883a 	mov	r3,r2
   44c44:	0023883a 	mov	r17,zero
   44c48:	880a927a 	slli	r5,r17,9
   44c4c:	1805883a 	mov	r2,r3
   44c50:	8822977a 	slli	r17,r17,29
   44c54:	280ad33a 	srli	r5,r5,12
   44c58:	003ff406 	br	44c2c <__alt_mem_epcs_flash_controller+0xfe03bc2c>
   44c5c:	10c003cc 	andi	r3,r2,15
   44c60:	01000104 	movi	r4,4
   44c64:	193ff626 	beq	r3,r4,44c40 <__alt_mem_epcs_flash_controller+0xfe03bc40>
   44c68:	0023883a 	mov	r17,zero
   44c6c:	003fca06 	br	44b98 <__alt_mem_epcs_flash_controller+0xfe03bb98>
   44c70:	813fd336 	bltu	r16,r4,44bc0 <__alt_mem_epcs_flash_controller+0xfe03bbc0>
   44c74:	1023883a 	mov	r17,r2
   44c78:	003fa806 	br	44b1c <__alt_mem_epcs_flash_controller+0xfe03bb1c>
   44c7c:	b0ffd636 	bltu	r22,r3,44bd8 <__alt_mem_epcs_flash_controller+0xfe03bbd8>
   44c80:	1011883a 	mov	r8,r2
   44c84:	b0ff341e 	bne	r22,r3,44958 <__alt_mem_epcs_flash_controller+0xfe03b958>
   44c88:	003f3406 	br	4495c <__alt_mem_epcs_flash_controller+0xfe03b95c>
   44c8c:	0005883a 	mov	r2,zero
   44c90:	003fe006 	br	44c14 <__alt_mem_epcs_flash_controller+0xfe03bc14>
   44c94:	00800434 	movhi	r2,16
   44c98:	89400234 	orhi	r5,r17,8
   44c9c:	10bfffc4 	addi	r2,r2,-1
   44ca0:	b807883a 	mov	r3,r23
   44ca4:	288a703a 	and	r5,r5,r2
   44ca8:	4025883a 	mov	r18,r8
   44cac:	003e8206 	br	446b8 <__alt_mem_epcs_flash_controller+0xfe03b6b8>

00044cb0 <__gedf2>:
   44cb0:	2804d53a 	srli	r2,r5,20
   44cb4:	3806d53a 	srli	r3,r7,20
   44cb8:	02000434 	movhi	r8,16
   44cbc:	423fffc4 	addi	r8,r8,-1
   44cc0:	1081ffcc 	andi	r2,r2,2047
   44cc4:	0241ffc4 	movi	r9,2047
   44cc8:	2a14703a 	and	r10,r5,r8
   44ccc:	18c1ffcc 	andi	r3,r3,2047
   44cd0:	3a10703a 	and	r8,r7,r8
   44cd4:	280ad7fa 	srli	r5,r5,31
   44cd8:	380ed7fa 	srli	r7,r7,31
   44cdc:	12401d26 	beq	r2,r9,44d54 <__gedf2+0xa4>
   44ce0:	0241ffc4 	movi	r9,2047
   44ce4:	1a401226 	beq	r3,r9,44d30 <__gedf2+0x80>
   44ce8:	1000081e 	bne	r2,zero,44d0c <__gedf2+0x5c>
   44cec:	2296b03a 	or	r11,r4,r10
   44cf0:	5813003a 	cmpeq	r9,r11,zero
   44cf4:	1800091e 	bne	r3,zero,44d1c <__gedf2+0x6c>
   44cf8:	3218b03a 	or	r12,r6,r8
   44cfc:	6000071e 	bne	r12,zero,44d1c <__gedf2+0x6c>
   44d00:	0005883a 	mov	r2,zero
   44d04:	5800101e 	bne	r11,zero,44d48 <__gedf2+0x98>
   44d08:	f800283a 	ret
   44d0c:	18000c1e 	bne	r3,zero,44d40 <__gedf2+0x90>
   44d10:	3212b03a 	or	r9,r6,r8
   44d14:	48000c26 	beq	r9,zero,44d48 <__gedf2+0x98>
   44d18:	0013883a 	mov	r9,zero
   44d1c:	39c03fcc 	andi	r7,r7,255
   44d20:	48000826 	beq	r9,zero,44d44 <__gedf2+0x94>
   44d24:	38000926 	beq	r7,zero,44d4c <__gedf2+0x9c>
   44d28:	00800044 	movi	r2,1
   44d2c:	f800283a 	ret
   44d30:	3212b03a 	or	r9,r6,r8
   44d34:	483fec26 	beq	r9,zero,44ce8 <__alt_mem_epcs_flash_controller+0xfe03bce8>
   44d38:	00bfff84 	movi	r2,-2
   44d3c:	f800283a 	ret
   44d40:	39c03fcc 	andi	r7,r7,255
   44d44:	29c00626 	beq	r5,r7,44d60 <__gedf2+0xb0>
   44d48:	283ff726 	beq	r5,zero,44d28 <__alt_mem_epcs_flash_controller+0xfe03bd28>
   44d4c:	00bfffc4 	movi	r2,-1
   44d50:	f800283a 	ret
   44d54:	2292b03a 	or	r9,r4,r10
   44d58:	483fe126 	beq	r9,zero,44ce0 <__alt_mem_epcs_flash_controller+0xfe03bce0>
   44d5c:	003ff606 	br	44d38 <__alt_mem_epcs_flash_controller+0xfe03bd38>
   44d60:	18bff916 	blt	r3,r2,44d48 <__alt_mem_epcs_flash_controller+0xfe03bd48>
   44d64:	10c00316 	blt	r2,r3,44d74 <__gedf2+0xc4>
   44d68:	42bff736 	bltu	r8,r10,44d48 <__alt_mem_epcs_flash_controller+0xfe03bd48>
   44d6c:	52000326 	beq	r10,r8,44d7c <__gedf2+0xcc>
   44d70:	5200042e 	bgeu	r10,r8,44d84 <__gedf2+0xd4>
   44d74:	283fec1e 	bne	r5,zero,44d28 <__alt_mem_epcs_flash_controller+0xfe03bd28>
   44d78:	003ff406 	br	44d4c <__alt_mem_epcs_flash_controller+0xfe03bd4c>
   44d7c:	313ff236 	bltu	r6,r4,44d48 <__alt_mem_epcs_flash_controller+0xfe03bd48>
   44d80:	21bffc36 	bltu	r4,r6,44d74 <__alt_mem_epcs_flash_controller+0xfe03bd74>
   44d84:	0005883a 	mov	r2,zero
   44d88:	f800283a 	ret

00044d8c <__ledf2>:
   44d8c:	2804d53a 	srli	r2,r5,20
   44d90:	3810d53a 	srli	r8,r7,20
   44d94:	00c00434 	movhi	r3,16
   44d98:	18ffffc4 	addi	r3,r3,-1
   44d9c:	1081ffcc 	andi	r2,r2,2047
   44da0:	0241ffc4 	movi	r9,2047
   44da4:	28d4703a 	and	r10,r5,r3
   44da8:	4201ffcc 	andi	r8,r8,2047
   44dac:	38c6703a 	and	r3,r7,r3
   44db0:	280ad7fa 	srli	r5,r5,31
   44db4:	380ed7fa 	srli	r7,r7,31
   44db8:	12401f26 	beq	r2,r9,44e38 <__ledf2+0xac>
   44dbc:	0241ffc4 	movi	r9,2047
   44dc0:	42401426 	beq	r8,r9,44e14 <__ledf2+0x88>
   44dc4:	1000091e 	bne	r2,zero,44dec <__ledf2+0x60>
   44dc8:	2296b03a 	or	r11,r4,r10
   44dcc:	5813003a 	cmpeq	r9,r11,zero
   44dd0:	29403fcc 	andi	r5,r5,255
   44dd4:	40000a1e 	bne	r8,zero,44e00 <__ledf2+0x74>
   44dd8:	30d8b03a 	or	r12,r6,r3
   44ddc:	6000081e 	bne	r12,zero,44e00 <__ledf2+0x74>
   44de0:	0005883a 	mov	r2,zero
   44de4:	5800111e 	bne	r11,zero,44e2c <__ledf2+0xa0>
   44de8:	f800283a 	ret
   44dec:	29403fcc 	andi	r5,r5,255
   44df0:	40000c1e 	bne	r8,zero,44e24 <__ledf2+0x98>
   44df4:	30d2b03a 	or	r9,r6,r3
   44df8:	48000c26 	beq	r9,zero,44e2c <__ledf2+0xa0>
   44dfc:	0013883a 	mov	r9,zero
   44e00:	39c03fcc 	andi	r7,r7,255
   44e04:	48000826 	beq	r9,zero,44e28 <__ledf2+0x9c>
   44e08:	38001126 	beq	r7,zero,44e50 <__ledf2+0xc4>
   44e0c:	00800044 	movi	r2,1
   44e10:	f800283a 	ret
   44e14:	30d2b03a 	or	r9,r6,r3
   44e18:	483fea26 	beq	r9,zero,44dc4 <__alt_mem_epcs_flash_controller+0xfe03bdc4>
   44e1c:	00800084 	movi	r2,2
   44e20:	f800283a 	ret
   44e24:	39c03fcc 	andi	r7,r7,255
   44e28:	39400726 	beq	r7,r5,44e48 <__ledf2+0xbc>
   44e2c:	2800081e 	bne	r5,zero,44e50 <__ledf2+0xc4>
   44e30:	00800044 	movi	r2,1
   44e34:	f800283a 	ret
   44e38:	2292b03a 	or	r9,r4,r10
   44e3c:	483fdf26 	beq	r9,zero,44dbc <__alt_mem_epcs_flash_controller+0xfe03bdbc>
   44e40:	00800084 	movi	r2,2
   44e44:	f800283a 	ret
   44e48:	4080030e 	bge	r8,r2,44e58 <__ledf2+0xcc>
   44e4c:	383fef26 	beq	r7,zero,44e0c <__alt_mem_epcs_flash_controller+0xfe03be0c>
   44e50:	00bfffc4 	movi	r2,-1
   44e54:	f800283a 	ret
   44e58:	123feb16 	blt	r2,r8,44e08 <__alt_mem_epcs_flash_controller+0xfe03be08>
   44e5c:	1abff336 	bltu	r3,r10,44e2c <__alt_mem_epcs_flash_controller+0xfe03be2c>
   44e60:	50c00326 	beq	r10,r3,44e70 <__ledf2+0xe4>
   44e64:	50c0042e 	bgeu	r10,r3,44e78 <__ledf2+0xec>
   44e68:	283fe81e 	bne	r5,zero,44e0c <__alt_mem_epcs_flash_controller+0xfe03be0c>
   44e6c:	003ff806 	br	44e50 <__alt_mem_epcs_flash_controller+0xfe03be50>
   44e70:	313fee36 	bltu	r6,r4,44e2c <__alt_mem_epcs_flash_controller+0xfe03be2c>
   44e74:	21bffc36 	bltu	r4,r6,44e68 <__alt_mem_epcs_flash_controller+0xfe03be68>
   44e78:	0005883a 	mov	r2,zero
   44e7c:	f800283a 	ret

00044e80 <__muldf3>:
   44e80:	defff304 	addi	sp,sp,-52
   44e84:	2804d53a 	srli	r2,r5,20
   44e88:	dd800915 	stw	r22,36(sp)
   44e8c:	282cd7fa 	srli	r22,r5,31
   44e90:	dc000315 	stw	r16,12(sp)
   44e94:	04000434 	movhi	r16,16
   44e98:	dd400815 	stw	r21,32(sp)
   44e9c:	dc800515 	stw	r18,20(sp)
   44ea0:	843fffc4 	addi	r16,r16,-1
   44ea4:	dfc00c15 	stw	ra,48(sp)
   44ea8:	df000b15 	stw	fp,44(sp)
   44eac:	ddc00a15 	stw	r23,40(sp)
   44eb0:	dd000715 	stw	r20,28(sp)
   44eb4:	dcc00615 	stw	r19,24(sp)
   44eb8:	dc400415 	stw	r17,16(sp)
   44ebc:	1481ffcc 	andi	r18,r2,2047
   44ec0:	2c20703a 	and	r16,r5,r16
   44ec4:	b02b883a 	mov	r21,r22
   44ec8:	b2403fcc 	andi	r9,r22,255
   44ecc:	90006026 	beq	r18,zero,45050 <__muldf3+0x1d0>
   44ed0:	0081ffc4 	movi	r2,2047
   44ed4:	2029883a 	mov	r20,r4
   44ed8:	90803626 	beq	r18,r2,44fb4 <__muldf3+0x134>
   44edc:	80800434 	orhi	r2,r16,16
   44ee0:	100490fa 	slli	r2,r2,3
   44ee4:	2020d77a 	srli	r16,r4,29
   44ee8:	202890fa 	slli	r20,r4,3
   44eec:	94bf0044 	addi	r18,r18,-1023
   44ef0:	80a0b03a 	or	r16,r16,r2
   44ef4:	0027883a 	mov	r19,zero
   44ef8:	0039883a 	mov	fp,zero
   44efc:	3804d53a 	srli	r2,r7,20
   44f00:	382ed7fa 	srli	r23,r7,31
   44f04:	04400434 	movhi	r17,16
   44f08:	8c7fffc4 	addi	r17,r17,-1
   44f0c:	1081ffcc 	andi	r2,r2,2047
   44f10:	3011883a 	mov	r8,r6
   44f14:	3c62703a 	and	r17,r7,r17
   44f18:	ba803fcc 	andi	r10,r23,255
   44f1c:	10006d26 	beq	r2,zero,450d4 <__muldf3+0x254>
   44f20:	00c1ffc4 	movi	r3,2047
   44f24:	10c06526 	beq	r2,r3,450bc <__muldf3+0x23c>
   44f28:	88c00434 	orhi	r3,r17,16
   44f2c:	180690fa 	slli	r3,r3,3
   44f30:	3022d77a 	srli	r17,r6,29
   44f34:	301090fa 	slli	r8,r6,3
   44f38:	10bf0044 	addi	r2,r2,-1023
   44f3c:	88e2b03a 	or	r17,r17,r3
   44f40:	000b883a 	mov	r5,zero
   44f44:	9085883a 	add	r2,r18,r2
   44f48:	2cc8b03a 	or	r4,r5,r19
   44f4c:	00c003c4 	movi	r3,15
   44f50:	bdacf03a 	xor	r22,r23,r22
   44f54:	12c00044 	addi	r11,r2,1
   44f58:	19009936 	bltu	r3,r4,451c0 <__muldf3+0x340>
   44f5c:	200890ba 	slli	r4,r4,2
   44f60:	00c00134 	movhi	r3,4
   44f64:	18d3dd04 	addi	r3,r3,20340
   44f68:	20c9883a 	add	r4,r4,r3
   44f6c:	20c00017 	ldw	r3,0(r4)
   44f70:	1800683a 	jmp	r3
   44f74:	000451c0 	call	451c <sha512_Transform+0x220>
   44f78:	00044fd4 	movui	zero,4415
   44f7c:	00044fd4 	movui	zero,4415
   44f80:	00044fd0 	cmplti	zero,zero,4415
   44f84:	0004519c 	xori	zero,zero,4422
   44f88:	0004519c 	xori	zero,zero,4422
   44f8c:	00045184 	movi	zero,4422
   44f90:	00044fd0 	cmplti	zero,zero,4415
   44f94:	0004519c 	xori	zero,zero,4422
   44f98:	00045184 	movi	zero,4422
   44f9c:	0004519c 	xori	zero,zero,4422
   44fa0:	00044fd0 	cmplti	zero,zero,4415
   44fa4:	000451ac 	andhi	zero,zero,4422
   44fa8:	000451ac 	andhi	zero,zero,4422
   44fac:	000451ac 	andhi	zero,zero,4422
   44fb0:	000453c8 	cmpgei	zero,zero,4431
   44fb4:	2404b03a 	or	r2,r4,r16
   44fb8:	10006f1e 	bne	r2,zero,45178 <__muldf3+0x2f8>
   44fbc:	04c00204 	movi	r19,8
   44fc0:	0021883a 	mov	r16,zero
   44fc4:	0029883a 	mov	r20,zero
   44fc8:	07000084 	movi	fp,2
   44fcc:	003fcb06 	br	44efc <__alt_mem_epcs_flash_controller+0xfe03befc>
   44fd0:	502d883a 	mov	r22,r10
   44fd4:	00800084 	movi	r2,2
   44fd8:	28805726 	beq	r5,r2,45138 <__muldf3+0x2b8>
   44fdc:	008000c4 	movi	r2,3
   44fe0:	28816626 	beq	r5,r2,4557c <__muldf3+0x6fc>
   44fe4:	00800044 	movi	r2,1
   44fe8:	2881411e 	bne	r5,r2,454f0 <__muldf3+0x670>
   44fec:	b02b883a 	mov	r21,r22
   44ff0:	0005883a 	mov	r2,zero
   44ff4:	000b883a 	mov	r5,zero
   44ff8:	0029883a 	mov	r20,zero
   44ffc:	1004953a 	slli	r2,r2,20
   45000:	a8c03fcc 	andi	r3,r21,255
   45004:	04400434 	movhi	r17,16
   45008:	8c7fffc4 	addi	r17,r17,-1
   4500c:	180697fa 	slli	r3,r3,31
   45010:	2c4a703a 	and	r5,r5,r17
   45014:	288ab03a 	or	r5,r5,r2
   45018:	28c6b03a 	or	r3,r5,r3
   4501c:	a005883a 	mov	r2,r20
   45020:	dfc00c17 	ldw	ra,48(sp)
   45024:	df000b17 	ldw	fp,44(sp)
   45028:	ddc00a17 	ldw	r23,40(sp)
   4502c:	dd800917 	ldw	r22,36(sp)
   45030:	dd400817 	ldw	r21,32(sp)
   45034:	dd000717 	ldw	r20,28(sp)
   45038:	dcc00617 	ldw	r19,24(sp)
   4503c:	dc800517 	ldw	r18,20(sp)
   45040:	dc400417 	ldw	r17,16(sp)
   45044:	dc000317 	ldw	r16,12(sp)
   45048:	dec00d04 	addi	sp,sp,52
   4504c:	f800283a 	ret
   45050:	2404b03a 	or	r2,r4,r16
   45054:	2027883a 	mov	r19,r4
   45058:	10004226 	beq	r2,zero,45164 <__muldf3+0x2e4>
   4505c:	8000fc26 	beq	r16,zero,45450 <__muldf3+0x5d0>
   45060:	8009883a 	mov	r4,r16
   45064:	d9800215 	stw	r6,8(sp)
   45068:	d9c00015 	stw	r7,0(sp)
   4506c:	da400115 	stw	r9,4(sp)
   45070:	0045f700 	call	45f70 <__clzsi2>
   45074:	d9800217 	ldw	r6,8(sp)
   45078:	d9c00017 	ldw	r7,0(sp)
   4507c:	da400117 	ldw	r9,4(sp)
   45080:	113ffd44 	addi	r4,r2,-11
   45084:	00c00704 	movi	r3,28
   45088:	1900ed16 	blt	r3,r4,45440 <__muldf3+0x5c0>
   4508c:	00c00744 	movi	r3,29
   45090:	147ffe04 	addi	r17,r2,-8
   45094:	1907c83a 	sub	r3,r3,r4
   45098:	8460983a 	sll	r16,r16,r17
   4509c:	98c6d83a 	srl	r3,r19,r3
   450a0:	9c68983a 	sll	r20,r19,r17
   450a4:	1c20b03a 	or	r16,r3,r16
   450a8:	1080fcc4 	addi	r2,r2,1011
   450ac:	00a5c83a 	sub	r18,zero,r2
   450b0:	0027883a 	mov	r19,zero
   450b4:	0039883a 	mov	fp,zero
   450b8:	003f9006 	br	44efc <__alt_mem_epcs_flash_controller+0xfe03befc>
   450bc:	3446b03a 	or	r3,r6,r17
   450c0:	1800261e 	bne	r3,zero,4515c <__muldf3+0x2dc>
   450c4:	0023883a 	mov	r17,zero
   450c8:	0011883a 	mov	r8,zero
   450cc:	01400084 	movi	r5,2
   450d0:	003f9c06 	br	44f44 <__alt_mem_epcs_flash_controller+0xfe03bf44>
   450d4:	3446b03a 	or	r3,r6,r17
   450d8:	18001c26 	beq	r3,zero,4514c <__muldf3+0x2cc>
   450dc:	8800ce26 	beq	r17,zero,45418 <__muldf3+0x598>
   450e0:	8809883a 	mov	r4,r17
   450e4:	d9800215 	stw	r6,8(sp)
   450e8:	da400115 	stw	r9,4(sp)
   450ec:	da800015 	stw	r10,0(sp)
   450f0:	0045f700 	call	45f70 <__clzsi2>
   450f4:	d9800217 	ldw	r6,8(sp)
   450f8:	da400117 	ldw	r9,4(sp)
   450fc:	da800017 	ldw	r10,0(sp)
   45100:	113ffd44 	addi	r4,r2,-11
   45104:	00c00704 	movi	r3,28
   45108:	1900bf16 	blt	r3,r4,45408 <__muldf3+0x588>
   4510c:	00c00744 	movi	r3,29
   45110:	123ffe04 	addi	r8,r2,-8
   45114:	1907c83a 	sub	r3,r3,r4
   45118:	8a22983a 	sll	r17,r17,r8
   4511c:	30c6d83a 	srl	r3,r6,r3
   45120:	3210983a 	sll	r8,r6,r8
   45124:	1c62b03a 	or	r17,r3,r17
   45128:	1080fcc4 	addi	r2,r2,1011
   4512c:	0085c83a 	sub	r2,zero,r2
   45130:	000b883a 	mov	r5,zero
   45134:	003f8306 	br	44f44 <__alt_mem_epcs_flash_controller+0xfe03bf44>
   45138:	b02b883a 	mov	r21,r22
   4513c:	0081ffc4 	movi	r2,2047
   45140:	000b883a 	mov	r5,zero
   45144:	0029883a 	mov	r20,zero
   45148:	003fac06 	br	44ffc <__alt_mem_epcs_flash_controller+0xfe03bffc>
   4514c:	0023883a 	mov	r17,zero
   45150:	0011883a 	mov	r8,zero
   45154:	01400044 	movi	r5,1
   45158:	003f7a06 	br	44f44 <__alt_mem_epcs_flash_controller+0xfe03bf44>
   4515c:	014000c4 	movi	r5,3
   45160:	003f7806 	br	44f44 <__alt_mem_epcs_flash_controller+0xfe03bf44>
   45164:	04c00104 	movi	r19,4
   45168:	0021883a 	mov	r16,zero
   4516c:	0029883a 	mov	r20,zero
   45170:	07000044 	movi	fp,1
   45174:	003f6106 	br	44efc <__alt_mem_epcs_flash_controller+0xfe03befc>
   45178:	04c00304 	movi	r19,12
   4517c:	070000c4 	movi	fp,3
   45180:	003f5e06 	br	44efc <__alt_mem_epcs_flash_controller+0xfe03befc>
   45184:	01400434 	movhi	r5,16
   45188:	002b883a 	mov	r21,zero
   4518c:	297fffc4 	addi	r5,r5,-1
   45190:	053fffc4 	movi	r20,-1
   45194:	0081ffc4 	movi	r2,2047
   45198:	003f9806 	br	44ffc <__alt_mem_epcs_flash_controller+0xfe03bffc>
   4519c:	8023883a 	mov	r17,r16
   451a0:	a011883a 	mov	r8,r20
   451a4:	e00b883a 	mov	r5,fp
   451a8:	003f8a06 	br	44fd4 <__alt_mem_epcs_flash_controller+0xfe03bfd4>
   451ac:	8023883a 	mov	r17,r16
   451b0:	a011883a 	mov	r8,r20
   451b4:	482d883a 	mov	r22,r9
   451b8:	e00b883a 	mov	r5,fp
   451bc:	003f8506 	br	44fd4 <__alt_mem_epcs_flash_controller+0xfe03bfd4>
   451c0:	a00ad43a 	srli	r5,r20,16
   451c4:	401ad43a 	srli	r13,r8,16
   451c8:	a53fffcc 	andi	r20,r20,65535
   451cc:	423fffcc 	andi	r8,r8,65535
   451d0:	4519383a 	mul	r12,r8,r20
   451d4:	4147383a 	mul	r3,r8,r5
   451d8:	6d09383a 	mul	r4,r13,r20
   451dc:	600cd43a 	srli	r6,r12,16
   451e0:	2b5d383a 	mul	r14,r5,r13
   451e4:	20c9883a 	add	r4,r4,r3
   451e8:	310d883a 	add	r6,r6,r4
   451ec:	30c0022e 	bgeu	r6,r3,451f8 <__muldf3+0x378>
   451f0:	00c00074 	movhi	r3,1
   451f4:	70dd883a 	add	r14,r14,r3
   451f8:	8826d43a 	srli	r19,r17,16
   451fc:	8bffffcc 	andi	r15,r17,65535
   45200:	7d23383a 	mul	r17,r15,r20
   45204:	7949383a 	mul	r4,r15,r5
   45208:	9d29383a 	mul	r20,r19,r20
   4520c:	8814d43a 	srli	r10,r17,16
   45210:	3012943a 	slli	r9,r6,16
   45214:	a129883a 	add	r20,r20,r4
   45218:	633fffcc 	andi	r12,r12,65535
   4521c:	5515883a 	add	r10,r10,r20
   45220:	3006d43a 	srli	r3,r6,16
   45224:	4b13883a 	add	r9,r9,r12
   45228:	2ccb383a 	mul	r5,r5,r19
   4522c:	5100022e 	bgeu	r10,r4,45238 <__muldf3+0x3b8>
   45230:	01000074 	movhi	r4,1
   45234:	290b883a 	add	r5,r5,r4
   45238:	802ad43a 	srli	r21,r16,16
   4523c:	843fffcc 	andi	r16,r16,65535
   45240:	440d383a 	mul	r6,r8,r16
   45244:	4565383a 	mul	r18,r8,r21
   45248:	8349383a 	mul	r4,r16,r13
   4524c:	500e943a 	slli	r7,r10,16
   45250:	3010d43a 	srli	r8,r6,16
   45254:	5028d43a 	srli	r20,r10,16
   45258:	2489883a 	add	r4,r4,r18
   4525c:	8abfffcc 	andi	r10,r17,65535
   45260:	3a95883a 	add	r10,r7,r10
   45264:	4119883a 	add	r12,r8,r4
   45268:	a169883a 	add	r20,r20,r5
   4526c:	1a87883a 	add	r3,r3,r10
   45270:	6d5b383a 	mul	r13,r13,r21
   45274:	6480022e 	bgeu	r12,r18,45280 <__muldf3+0x400>
   45278:	01000074 	movhi	r4,1
   4527c:	691b883a 	add	r13,r13,r4
   45280:	7c25383a 	mul	r18,r15,r16
   45284:	7d4b383a 	mul	r5,r15,r21
   45288:	84cf383a 	mul	r7,r16,r19
   4528c:	901ed43a 	srli	r15,r18,16
   45290:	6008d43a 	srli	r4,r12,16
   45294:	6010943a 	slli	r8,r12,16
   45298:	394f883a 	add	r7,r7,r5
   4529c:	333fffcc 	andi	r12,r6,65535
   452a0:	79df883a 	add	r15,r15,r7
   452a4:	235b883a 	add	r13,r4,r13
   452a8:	9d63383a 	mul	r17,r19,r21
   452ac:	4309883a 	add	r4,r8,r12
   452b0:	7940022e 	bgeu	r15,r5,452bc <__muldf3+0x43c>
   452b4:	01400074 	movhi	r5,1
   452b8:	8963883a 	add	r17,r17,r5
   452bc:	780a943a 	slli	r5,r15,16
   452c0:	91bfffcc 	andi	r6,r18,65535
   452c4:	70c7883a 	add	r3,r14,r3
   452c8:	298d883a 	add	r6,r5,r6
   452cc:	1a8f803a 	cmpltu	r7,r3,r10
   452d0:	350b883a 	add	r5,r6,r20
   452d4:	20c7883a 	add	r3,r4,r3
   452d8:	3955883a 	add	r10,r7,r5
   452dc:	1909803a 	cmpltu	r4,r3,r4
   452e0:	6a91883a 	add	r8,r13,r10
   452e4:	780cd43a 	srli	r6,r15,16
   452e8:	2219883a 	add	r12,r4,r8
   452ec:	2d0b803a 	cmpltu	r5,r5,r20
   452f0:	51cf803a 	cmpltu	r7,r10,r7
   452f4:	29ceb03a 	or	r7,r5,r7
   452f8:	4351803a 	cmpltu	r8,r8,r13
   452fc:	610b803a 	cmpltu	r5,r12,r4
   45300:	4148b03a 	or	r4,r8,r5
   45304:	398f883a 	add	r7,r7,r6
   45308:	3909883a 	add	r4,r7,r4
   4530c:	1810927a 	slli	r8,r3,9
   45310:	2449883a 	add	r4,r4,r17
   45314:	2008927a 	slli	r4,r4,9
   45318:	6022d5fa 	srli	r17,r12,23
   4531c:	1806d5fa 	srli	r3,r3,23
   45320:	4252b03a 	or	r9,r8,r9
   45324:	600a927a 	slli	r5,r12,9
   45328:	4810c03a 	cmpne	r8,r9,zero
   4532c:	2462b03a 	or	r17,r4,r17
   45330:	40c6b03a 	or	r3,r8,r3
   45334:	8900402c 	andhi	r4,r17,256
   45338:	1950b03a 	or	r8,r3,r5
   4533c:	20000726 	beq	r4,zero,4535c <__muldf3+0x4dc>
   45340:	4006d07a 	srli	r3,r8,1
   45344:	880497fa 	slli	r2,r17,31
   45348:	4200004c 	andi	r8,r8,1
   4534c:	8822d07a 	srli	r17,r17,1
   45350:	1a10b03a 	or	r8,r3,r8
   45354:	1210b03a 	or	r8,r2,r8
   45358:	5805883a 	mov	r2,r11
   4535c:	1140ffc4 	addi	r5,r2,1023
   45360:	0140440e 	bge	zero,r5,45474 <__muldf3+0x5f4>
   45364:	40c001cc 	andi	r3,r8,7
   45368:	18000726 	beq	r3,zero,45388 <__muldf3+0x508>
   4536c:	40c003cc 	andi	r3,r8,15
   45370:	01000104 	movi	r4,4
   45374:	19000426 	beq	r3,r4,45388 <__muldf3+0x508>
   45378:	4107883a 	add	r3,r8,r4
   4537c:	1a11803a 	cmpltu	r8,r3,r8
   45380:	8a23883a 	add	r17,r17,r8
   45384:	1811883a 	mov	r8,r3
   45388:	88c0402c 	andhi	r3,r17,256
   4538c:	18000426 	beq	r3,zero,453a0 <__muldf3+0x520>
   45390:	11410004 	addi	r5,r2,1024
   45394:	00bfc034 	movhi	r2,65280
   45398:	10bfffc4 	addi	r2,r2,-1
   4539c:	88a2703a 	and	r17,r17,r2
   453a0:	0081ff84 	movi	r2,2046
   453a4:	117f6416 	blt	r2,r5,45138 <__alt_mem_epcs_flash_controller+0xfe03c138>
   453a8:	8828977a 	slli	r20,r17,29
   453ac:	4010d0fa 	srli	r8,r8,3
   453b0:	8822927a 	slli	r17,r17,9
   453b4:	2881ffcc 	andi	r2,r5,2047
   453b8:	a228b03a 	or	r20,r20,r8
   453bc:	880ad33a 	srli	r5,r17,12
   453c0:	b02b883a 	mov	r21,r22
   453c4:	003f0d06 	br	44ffc <__alt_mem_epcs_flash_controller+0xfe03bffc>
   453c8:	8080022c 	andhi	r2,r16,8
   453cc:	10000926 	beq	r2,zero,453f4 <__muldf3+0x574>
   453d0:	8880022c 	andhi	r2,r17,8
   453d4:	1000071e 	bne	r2,zero,453f4 <__muldf3+0x574>
   453d8:	00800434 	movhi	r2,16
   453dc:	89400234 	orhi	r5,r17,8
   453e0:	10bfffc4 	addi	r2,r2,-1
   453e4:	b82b883a 	mov	r21,r23
   453e8:	288a703a 	and	r5,r5,r2
   453ec:	4029883a 	mov	r20,r8
   453f0:	003f6806 	br	45194 <__alt_mem_epcs_flash_controller+0xfe03c194>
   453f4:	00800434 	movhi	r2,16
   453f8:	81400234 	orhi	r5,r16,8
   453fc:	10bfffc4 	addi	r2,r2,-1
   45400:	288a703a 	and	r5,r5,r2
   45404:	003f6306 	br	45194 <__alt_mem_epcs_flash_controller+0xfe03c194>
   45408:	147ff604 	addi	r17,r2,-40
   4540c:	3462983a 	sll	r17,r6,r17
   45410:	0011883a 	mov	r8,zero
   45414:	003f4406 	br	45128 <__alt_mem_epcs_flash_controller+0xfe03c128>
   45418:	3009883a 	mov	r4,r6
   4541c:	d9800215 	stw	r6,8(sp)
   45420:	da400115 	stw	r9,4(sp)
   45424:	da800015 	stw	r10,0(sp)
   45428:	0045f700 	call	45f70 <__clzsi2>
   4542c:	10800804 	addi	r2,r2,32
   45430:	da800017 	ldw	r10,0(sp)
   45434:	da400117 	ldw	r9,4(sp)
   45438:	d9800217 	ldw	r6,8(sp)
   4543c:	003f3006 	br	45100 <__alt_mem_epcs_flash_controller+0xfe03c100>
   45440:	143ff604 	addi	r16,r2,-40
   45444:	9c20983a 	sll	r16,r19,r16
   45448:	0029883a 	mov	r20,zero
   4544c:	003f1606 	br	450a8 <__alt_mem_epcs_flash_controller+0xfe03c0a8>
   45450:	d9800215 	stw	r6,8(sp)
   45454:	d9c00015 	stw	r7,0(sp)
   45458:	da400115 	stw	r9,4(sp)
   4545c:	0045f700 	call	45f70 <__clzsi2>
   45460:	10800804 	addi	r2,r2,32
   45464:	da400117 	ldw	r9,4(sp)
   45468:	d9c00017 	ldw	r7,0(sp)
   4546c:	d9800217 	ldw	r6,8(sp)
   45470:	003f0306 	br	45080 <__alt_mem_epcs_flash_controller+0xfe03c080>
   45474:	00c00044 	movi	r3,1
   45478:	1947c83a 	sub	r3,r3,r5
   4547c:	00800e04 	movi	r2,56
   45480:	10feda16 	blt	r2,r3,44fec <__alt_mem_epcs_flash_controller+0xfe03bfec>
   45484:	008007c4 	movi	r2,31
   45488:	10c01b16 	blt	r2,r3,454f8 <__muldf3+0x678>
   4548c:	00800804 	movi	r2,32
   45490:	10c5c83a 	sub	r2,r2,r3
   45494:	888a983a 	sll	r5,r17,r2
   45498:	40c8d83a 	srl	r4,r8,r3
   4549c:	4084983a 	sll	r2,r8,r2
   454a0:	88e2d83a 	srl	r17,r17,r3
   454a4:	2906b03a 	or	r3,r5,r4
   454a8:	1004c03a 	cmpne	r2,r2,zero
   454ac:	1886b03a 	or	r3,r3,r2
   454b0:	188001cc 	andi	r2,r3,7
   454b4:	10000726 	beq	r2,zero,454d4 <__muldf3+0x654>
   454b8:	188003cc 	andi	r2,r3,15
   454bc:	01000104 	movi	r4,4
   454c0:	11000426 	beq	r2,r4,454d4 <__muldf3+0x654>
   454c4:	1805883a 	mov	r2,r3
   454c8:	10c00104 	addi	r3,r2,4
   454cc:	1885803a 	cmpltu	r2,r3,r2
   454d0:	88a3883a 	add	r17,r17,r2
   454d4:	8880202c 	andhi	r2,r17,128
   454d8:	10001c26 	beq	r2,zero,4554c <__muldf3+0x6cc>
   454dc:	b02b883a 	mov	r21,r22
   454e0:	00800044 	movi	r2,1
   454e4:	000b883a 	mov	r5,zero
   454e8:	0029883a 	mov	r20,zero
   454ec:	003ec306 	br	44ffc <__alt_mem_epcs_flash_controller+0xfe03bffc>
   454f0:	5805883a 	mov	r2,r11
   454f4:	003f9906 	br	4535c <__alt_mem_epcs_flash_controller+0xfe03c35c>
   454f8:	00bff844 	movi	r2,-31
   454fc:	1145c83a 	sub	r2,r2,r5
   45500:	8888d83a 	srl	r4,r17,r2
   45504:	00800804 	movi	r2,32
   45508:	18801a26 	beq	r3,r2,45574 <__muldf3+0x6f4>
   4550c:	00801004 	movi	r2,64
   45510:	10c5c83a 	sub	r2,r2,r3
   45514:	8884983a 	sll	r2,r17,r2
   45518:	1204b03a 	or	r2,r2,r8
   4551c:	1004c03a 	cmpne	r2,r2,zero
   45520:	2084b03a 	or	r2,r4,r2
   45524:	144001cc 	andi	r17,r2,7
   45528:	88000d1e 	bne	r17,zero,45560 <__muldf3+0x6e0>
   4552c:	000b883a 	mov	r5,zero
   45530:	1028d0fa 	srli	r20,r2,3
   45534:	b02b883a 	mov	r21,r22
   45538:	0005883a 	mov	r2,zero
   4553c:	a468b03a 	or	r20,r20,r17
   45540:	003eae06 	br	44ffc <__alt_mem_epcs_flash_controller+0xfe03bffc>
   45544:	1007883a 	mov	r3,r2
   45548:	0023883a 	mov	r17,zero
   4554c:	880a927a 	slli	r5,r17,9
   45550:	1805883a 	mov	r2,r3
   45554:	8822977a 	slli	r17,r17,29
   45558:	280ad33a 	srli	r5,r5,12
   4555c:	003ff406 	br	45530 <__alt_mem_epcs_flash_controller+0xfe03c530>
   45560:	10c003cc 	andi	r3,r2,15
   45564:	01000104 	movi	r4,4
   45568:	193ff626 	beq	r3,r4,45544 <__alt_mem_epcs_flash_controller+0xfe03c544>
   4556c:	0023883a 	mov	r17,zero
   45570:	003fd506 	br	454c8 <__alt_mem_epcs_flash_controller+0xfe03c4c8>
   45574:	0005883a 	mov	r2,zero
   45578:	003fe706 	br	45518 <__alt_mem_epcs_flash_controller+0xfe03c518>
   4557c:	00800434 	movhi	r2,16
   45580:	89400234 	orhi	r5,r17,8
   45584:	10bfffc4 	addi	r2,r2,-1
   45588:	b02b883a 	mov	r21,r22
   4558c:	288a703a 	and	r5,r5,r2
   45590:	4029883a 	mov	r20,r8
   45594:	003eff06 	br	45194 <__alt_mem_epcs_flash_controller+0xfe03c194>

00045598 <__subdf3>:
   45598:	02000434 	movhi	r8,16
   4559c:	423fffc4 	addi	r8,r8,-1
   455a0:	defffb04 	addi	sp,sp,-20
   455a4:	2a14703a 	and	r10,r5,r8
   455a8:	3812d53a 	srli	r9,r7,20
   455ac:	3a10703a 	and	r8,r7,r8
   455b0:	2006d77a 	srli	r3,r4,29
   455b4:	3004d77a 	srli	r2,r6,29
   455b8:	dc000015 	stw	r16,0(sp)
   455bc:	501490fa 	slli	r10,r10,3
   455c0:	2820d53a 	srli	r16,r5,20
   455c4:	401090fa 	slli	r8,r8,3
   455c8:	dc800215 	stw	r18,8(sp)
   455cc:	dc400115 	stw	r17,4(sp)
   455d0:	dfc00415 	stw	ra,16(sp)
   455d4:	202290fa 	slli	r17,r4,3
   455d8:	dcc00315 	stw	r19,12(sp)
   455dc:	4a41ffcc 	andi	r9,r9,2047
   455e0:	0101ffc4 	movi	r4,2047
   455e4:	2824d7fa 	srli	r18,r5,31
   455e8:	8401ffcc 	andi	r16,r16,2047
   455ec:	50c6b03a 	or	r3,r10,r3
   455f0:	380ed7fa 	srli	r7,r7,31
   455f4:	408ab03a 	or	r5,r8,r2
   455f8:	300c90fa 	slli	r6,r6,3
   455fc:	49009626 	beq	r9,r4,45858 <__subdf3+0x2c0>
   45600:	39c0005c 	xori	r7,r7,1
   45604:	8245c83a 	sub	r2,r16,r9
   45608:	3c807426 	beq	r7,r18,457dc <__subdf3+0x244>
   4560c:	0080af0e 	bge	zero,r2,458cc <__subdf3+0x334>
   45610:	48002a1e 	bne	r9,zero,456bc <__subdf3+0x124>
   45614:	2988b03a 	or	r4,r5,r6
   45618:	20009a1e 	bne	r4,zero,45884 <__subdf3+0x2ec>
   4561c:	888001cc 	andi	r2,r17,7
   45620:	10000726 	beq	r2,zero,45640 <__subdf3+0xa8>
   45624:	888003cc 	andi	r2,r17,15
   45628:	01000104 	movi	r4,4
   4562c:	11000426 	beq	r2,r4,45640 <__subdf3+0xa8>
   45630:	890b883a 	add	r5,r17,r4
   45634:	2c63803a 	cmpltu	r17,r5,r17
   45638:	1c47883a 	add	r3,r3,r17
   4563c:	2823883a 	mov	r17,r5
   45640:	1880202c 	andhi	r2,r3,128
   45644:	10005926 	beq	r2,zero,457ac <__subdf3+0x214>
   45648:	84000044 	addi	r16,r16,1
   4564c:	0081ffc4 	movi	r2,2047
   45650:	8080be26 	beq	r16,r2,4594c <__subdf3+0x3b4>
   45654:	017fe034 	movhi	r5,65408
   45658:	297fffc4 	addi	r5,r5,-1
   4565c:	1946703a 	and	r3,r3,r5
   45660:	1804977a 	slli	r2,r3,29
   45664:	1806927a 	slli	r3,r3,9
   45668:	8822d0fa 	srli	r17,r17,3
   4566c:	8401ffcc 	andi	r16,r16,2047
   45670:	180ad33a 	srli	r5,r3,12
   45674:	9100004c 	andi	r4,r18,1
   45678:	1444b03a 	or	r2,r2,r17
   4567c:	80c1ffcc 	andi	r3,r16,2047
   45680:	1820953a 	slli	r16,r3,20
   45684:	20c03fcc 	andi	r3,r4,255
   45688:	180897fa 	slli	r4,r3,31
   4568c:	00c00434 	movhi	r3,16
   45690:	18ffffc4 	addi	r3,r3,-1
   45694:	28c6703a 	and	r3,r5,r3
   45698:	1c06b03a 	or	r3,r3,r16
   4569c:	1906b03a 	or	r3,r3,r4
   456a0:	dfc00417 	ldw	ra,16(sp)
   456a4:	dcc00317 	ldw	r19,12(sp)
   456a8:	dc800217 	ldw	r18,8(sp)
   456ac:	dc400117 	ldw	r17,4(sp)
   456b0:	dc000017 	ldw	r16,0(sp)
   456b4:	dec00504 	addi	sp,sp,20
   456b8:	f800283a 	ret
   456bc:	0101ffc4 	movi	r4,2047
   456c0:	813fd626 	beq	r16,r4,4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   456c4:	29402034 	orhi	r5,r5,128
   456c8:	01000e04 	movi	r4,56
   456cc:	2080a316 	blt	r4,r2,4595c <__subdf3+0x3c4>
   456d0:	010007c4 	movi	r4,31
   456d4:	2080c616 	blt	r4,r2,459f0 <__subdf3+0x458>
   456d8:	01000804 	movi	r4,32
   456dc:	2089c83a 	sub	r4,r4,r2
   456e0:	2910983a 	sll	r8,r5,r4
   456e4:	308ed83a 	srl	r7,r6,r2
   456e8:	3108983a 	sll	r4,r6,r4
   456ec:	2884d83a 	srl	r2,r5,r2
   456f0:	41ccb03a 	or	r6,r8,r7
   456f4:	2008c03a 	cmpne	r4,r4,zero
   456f8:	310cb03a 	or	r6,r6,r4
   456fc:	898dc83a 	sub	r6,r17,r6
   45700:	89a3803a 	cmpltu	r17,r17,r6
   45704:	1887c83a 	sub	r3,r3,r2
   45708:	1c47c83a 	sub	r3,r3,r17
   4570c:	3023883a 	mov	r17,r6
   45710:	1880202c 	andhi	r2,r3,128
   45714:	10002326 	beq	r2,zero,457a4 <__subdf3+0x20c>
   45718:	04c02034 	movhi	r19,128
   4571c:	9cffffc4 	addi	r19,r19,-1
   45720:	1ce6703a 	and	r19,r3,r19
   45724:	98007a26 	beq	r19,zero,45910 <__subdf3+0x378>
   45728:	9809883a 	mov	r4,r19
   4572c:	0045f700 	call	45f70 <__clzsi2>
   45730:	113ffe04 	addi	r4,r2,-8
   45734:	00c007c4 	movi	r3,31
   45738:	19007b16 	blt	r3,r4,45928 <__subdf3+0x390>
   4573c:	00800804 	movi	r2,32
   45740:	1105c83a 	sub	r2,r2,r4
   45744:	8884d83a 	srl	r2,r17,r2
   45748:	9906983a 	sll	r3,r19,r4
   4574c:	8922983a 	sll	r17,r17,r4
   45750:	10c4b03a 	or	r2,r2,r3
   45754:	24007816 	blt	r4,r16,45938 <__subdf3+0x3a0>
   45758:	2421c83a 	sub	r16,r4,r16
   4575c:	80c00044 	addi	r3,r16,1
   45760:	010007c4 	movi	r4,31
   45764:	20c09516 	blt	r4,r3,459bc <__subdf3+0x424>
   45768:	01400804 	movi	r5,32
   4576c:	28cbc83a 	sub	r5,r5,r3
   45770:	88c8d83a 	srl	r4,r17,r3
   45774:	8962983a 	sll	r17,r17,r5
   45778:	114a983a 	sll	r5,r2,r5
   4577c:	10c6d83a 	srl	r3,r2,r3
   45780:	8804c03a 	cmpne	r2,r17,zero
   45784:	290ab03a 	or	r5,r5,r4
   45788:	28a2b03a 	or	r17,r5,r2
   4578c:	0021883a 	mov	r16,zero
   45790:	003fa206 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45794:	2090b03a 	or	r8,r4,r2
   45798:	40018e26 	beq	r8,zero,45dd4 <__subdf3+0x83c>
   4579c:	1007883a 	mov	r3,r2
   457a0:	2023883a 	mov	r17,r4
   457a4:	888001cc 	andi	r2,r17,7
   457a8:	103f9e1e 	bne	r2,zero,45624 <__alt_mem_epcs_flash_controller+0xfe03c624>
   457ac:	1804977a 	slli	r2,r3,29
   457b0:	8822d0fa 	srli	r17,r17,3
   457b4:	1810d0fa 	srli	r8,r3,3
   457b8:	9100004c 	andi	r4,r18,1
   457bc:	1444b03a 	or	r2,r2,r17
   457c0:	00c1ffc4 	movi	r3,2047
   457c4:	80c02826 	beq	r16,r3,45868 <__subdf3+0x2d0>
   457c8:	01400434 	movhi	r5,16
   457cc:	297fffc4 	addi	r5,r5,-1
   457d0:	80e0703a 	and	r16,r16,r3
   457d4:	414a703a 	and	r5,r8,r5
   457d8:	003fa806 	br	4567c <__alt_mem_epcs_flash_controller+0xfe03c67c>
   457dc:	0080630e 	bge	zero,r2,4596c <__subdf3+0x3d4>
   457e0:	48003026 	beq	r9,zero,458a4 <__subdf3+0x30c>
   457e4:	0101ffc4 	movi	r4,2047
   457e8:	813f8c26 	beq	r16,r4,4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   457ec:	29402034 	orhi	r5,r5,128
   457f0:	01000e04 	movi	r4,56
   457f4:	2080a90e 	bge	r4,r2,45a9c <__subdf3+0x504>
   457f8:	298cb03a 	or	r6,r5,r6
   457fc:	3012c03a 	cmpne	r9,r6,zero
   45800:	0005883a 	mov	r2,zero
   45804:	4c53883a 	add	r9,r9,r17
   45808:	4c63803a 	cmpltu	r17,r9,r17
   4580c:	10c7883a 	add	r3,r2,r3
   45810:	88c7883a 	add	r3,r17,r3
   45814:	4823883a 	mov	r17,r9
   45818:	1880202c 	andhi	r2,r3,128
   4581c:	1000d026 	beq	r2,zero,45b60 <__subdf3+0x5c8>
   45820:	84000044 	addi	r16,r16,1
   45824:	0081ffc4 	movi	r2,2047
   45828:	8080fe26 	beq	r16,r2,45c24 <__subdf3+0x68c>
   4582c:	00bfe034 	movhi	r2,65408
   45830:	10bfffc4 	addi	r2,r2,-1
   45834:	1886703a 	and	r3,r3,r2
   45838:	880ad07a 	srli	r5,r17,1
   4583c:	180497fa 	slli	r2,r3,31
   45840:	8900004c 	andi	r4,r17,1
   45844:	2922b03a 	or	r17,r5,r4
   45848:	1806d07a 	srli	r3,r3,1
   4584c:	1462b03a 	or	r17,r2,r17
   45850:	3825883a 	mov	r18,r7
   45854:	003f7106 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45858:	2984b03a 	or	r2,r5,r6
   4585c:	103f6826 	beq	r2,zero,45600 <__alt_mem_epcs_flash_controller+0xfe03c600>
   45860:	39c03fcc 	andi	r7,r7,255
   45864:	003f6706 	br	45604 <__alt_mem_epcs_flash_controller+0xfe03c604>
   45868:	4086b03a 	or	r3,r8,r2
   4586c:	18015226 	beq	r3,zero,45db8 <__subdf3+0x820>
   45870:	00c00434 	movhi	r3,16
   45874:	41400234 	orhi	r5,r8,8
   45878:	18ffffc4 	addi	r3,r3,-1
   4587c:	28ca703a 	and	r5,r5,r3
   45880:	003f7e06 	br	4567c <__alt_mem_epcs_flash_controller+0xfe03c67c>
   45884:	10bfffc4 	addi	r2,r2,-1
   45888:	1000491e 	bne	r2,zero,459b0 <__subdf3+0x418>
   4588c:	898fc83a 	sub	r7,r17,r6
   45890:	89e3803a 	cmpltu	r17,r17,r7
   45894:	1947c83a 	sub	r3,r3,r5
   45898:	1c47c83a 	sub	r3,r3,r17
   4589c:	3823883a 	mov	r17,r7
   458a0:	003f9b06 	br	45710 <__alt_mem_epcs_flash_controller+0xfe03c710>
   458a4:	2988b03a 	or	r4,r5,r6
   458a8:	203f5c26 	beq	r4,zero,4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   458ac:	10bfffc4 	addi	r2,r2,-1
   458b0:	1000931e 	bne	r2,zero,45b00 <__subdf3+0x568>
   458b4:	898d883a 	add	r6,r17,r6
   458b8:	3463803a 	cmpltu	r17,r6,r17
   458bc:	1947883a 	add	r3,r3,r5
   458c0:	88c7883a 	add	r3,r17,r3
   458c4:	3023883a 	mov	r17,r6
   458c8:	003fd306 	br	45818 <__alt_mem_epcs_flash_controller+0xfe03c818>
   458cc:	1000541e 	bne	r2,zero,45a20 <__subdf3+0x488>
   458d0:	80800044 	addi	r2,r16,1
   458d4:	1081ffcc 	andi	r2,r2,2047
   458d8:	01000044 	movi	r4,1
   458dc:	2080a20e 	bge	r4,r2,45b68 <__subdf3+0x5d0>
   458e0:	8989c83a 	sub	r4,r17,r6
   458e4:	8905803a 	cmpltu	r2,r17,r4
   458e8:	1967c83a 	sub	r19,r3,r5
   458ec:	98a7c83a 	sub	r19,r19,r2
   458f0:	9880202c 	andhi	r2,r19,128
   458f4:	10006326 	beq	r2,zero,45a84 <__subdf3+0x4ec>
   458f8:	3463c83a 	sub	r17,r6,r17
   458fc:	28c7c83a 	sub	r3,r5,r3
   45900:	344d803a 	cmpltu	r6,r6,r17
   45904:	19a7c83a 	sub	r19,r3,r6
   45908:	3825883a 	mov	r18,r7
   4590c:	983f861e 	bne	r19,zero,45728 <__alt_mem_epcs_flash_controller+0xfe03c728>
   45910:	8809883a 	mov	r4,r17
   45914:	0045f700 	call	45f70 <__clzsi2>
   45918:	10800804 	addi	r2,r2,32
   4591c:	113ffe04 	addi	r4,r2,-8
   45920:	00c007c4 	movi	r3,31
   45924:	193f850e 	bge	r3,r4,4573c <__alt_mem_epcs_flash_controller+0xfe03c73c>
   45928:	10bff604 	addi	r2,r2,-40
   4592c:	8884983a 	sll	r2,r17,r2
   45930:	0023883a 	mov	r17,zero
   45934:	243f880e 	bge	r4,r16,45758 <__alt_mem_epcs_flash_controller+0xfe03c758>
   45938:	00ffe034 	movhi	r3,65408
   4593c:	18ffffc4 	addi	r3,r3,-1
   45940:	8121c83a 	sub	r16,r16,r4
   45944:	10c6703a 	and	r3,r2,r3
   45948:	003f3406 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   4594c:	9100004c 	andi	r4,r18,1
   45950:	000b883a 	mov	r5,zero
   45954:	0005883a 	mov	r2,zero
   45958:	003f4806 	br	4567c <__alt_mem_epcs_flash_controller+0xfe03c67c>
   4595c:	298cb03a 	or	r6,r5,r6
   45960:	300cc03a 	cmpne	r6,r6,zero
   45964:	0005883a 	mov	r2,zero
   45968:	003f6406 	br	456fc <__alt_mem_epcs_flash_controller+0xfe03c6fc>
   4596c:	10009a1e 	bne	r2,zero,45bd8 <__subdf3+0x640>
   45970:	82400044 	addi	r9,r16,1
   45974:	4881ffcc 	andi	r2,r9,2047
   45978:	02800044 	movi	r10,1
   4597c:	5080670e 	bge	r10,r2,45b1c <__subdf3+0x584>
   45980:	0081ffc4 	movi	r2,2047
   45984:	4880af26 	beq	r9,r2,45c44 <__subdf3+0x6ac>
   45988:	898d883a 	add	r6,r17,r6
   4598c:	1945883a 	add	r2,r3,r5
   45990:	3447803a 	cmpltu	r3,r6,r17
   45994:	1887883a 	add	r3,r3,r2
   45998:	182297fa 	slli	r17,r3,31
   4599c:	300cd07a 	srli	r6,r6,1
   459a0:	1806d07a 	srli	r3,r3,1
   459a4:	4821883a 	mov	r16,r9
   459a8:	89a2b03a 	or	r17,r17,r6
   459ac:	003f1b06 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   459b0:	0101ffc4 	movi	r4,2047
   459b4:	813f441e 	bne	r16,r4,456c8 <__alt_mem_epcs_flash_controller+0xfe03c6c8>
   459b8:	003f1806 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   459bc:	843ff844 	addi	r16,r16,-31
   459c0:	01400804 	movi	r5,32
   459c4:	1408d83a 	srl	r4,r2,r16
   459c8:	19405026 	beq	r3,r5,45b0c <__subdf3+0x574>
   459cc:	01401004 	movi	r5,64
   459d0:	28c7c83a 	sub	r3,r5,r3
   459d4:	10c4983a 	sll	r2,r2,r3
   459d8:	88a2b03a 	or	r17,r17,r2
   459dc:	8822c03a 	cmpne	r17,r17,zero
   459e0:	2462b03a 	or	r17,r4,r17
   459e4:	0007883a 	mov	r3,zero
   459e8:	0021883a 	mov	r16,zero
   459ec:	003f6d06 	br	457a4 <__alt_mem_epcs_flash_controller+0xfe03c7a4>
   459f0:	11fff804 	addi	r7,r2,-32
   459f4:	01000804 	movi	r4,32
   459f8:	29ced83a 	srl	r7,r5,r7
   459fc:	11004526 	beq	r2,r4,45b14 <__subdf3+0x57c>
   45a00:	01001004 	movi	r4,64
   45a04:	2089c83a 	sub	r4,r4,r2
   45a08:	2904983a 	sll	r2,r5,r4
   45a0c:	118cb03a 	or	r6,r2,r6
   45a10:	300cc03a 	cmpne	r6,r6,zero
   45a14:	398cb03a 	or	r6,r7,r6
   45a18:	0005883a 	mov	r2,zero
   45a1c:	003f3706 	br	456fc <__alt_mem_epcs_flash_controller+0xfe03c6fc>
   45a20:	80002a26 	beq	r16,zero,45acc <__subdf3+0x534>
   45a24:	0101ffc4 	movi	r4,2047
   45a28:	49006626 	beq	r9,r4,45bc4 <__subdf3+0x62c>
   45a2c:	0085c83a 	sub	r2,zero,r2
   45a30:	18c02034 	orhi	r3,r3,128
   45a34:	01000e04 	movi	r4,56
   45a38:	20807e16 	blt	r4,r2,45c34 <__subdf3+0x69c>
   45a3c:	010007c4 	movi	r4,31
   45a40:	2080e716 	blt	r4,r2,45de0 <__subdf3+0x848>
   45a44:	01000804 	movi	r4,32
   45a48:	2089c83a 	sub	r4,r4,r2
   45a4c:	1914983a 	sll	r10,r3,r4
   45a50:	8890d83a 	srl	r8,r17,r2
   45a54:	8908983a 	sll	r4,r17,r4
   45a58:	1884d83a 	srl	r2,r3,r2
   45a5c:	5222b03a 	or	r17,r10,r8
   45a60:	2006c03a 	cmpne	r3,r4,zero
   45a64:	88e2b03a 	or	r17,r17,r3
   45a68:	3463c83a 	sub	r17,r6,r17
   45a6c:	2885c83a 	sub	r2,r5,r2
   45a70:	344d803a 	cmpltu	r6,r6,r17
   45a74:	1187c83a 	sub	r3,r2,r6
   45a78:	4821883a 	mov	r16,r9
   45a7c:	3825883a 	mov	r18,r7
   45a80:	003f2306 	br	45710 <__alt_mem_epcs_flash_controller+0xfe03c710>
   45a84:	24d0b03a 	or	r8,r4,r19
   45a88:	40001b1e 	bne	r8,zero,45af8 <__subdf3+0x560>
   45a8c:	0005883a 	mov	r2,zero
   45a90:	0009883a 	mov	r4,zero
   45a94:	0021883a 	mov	r16,zero
   45a98:	003f4906 	br	457c0 <__alt_mem_epcs_flash_controller+0xfe03c7c0>
   45a9c:	010007c4 	movi	r4,31
   45aa0:	20803a16 	blt	r4,r2,45b8c <__subdf3+0x5f4>
   45aa4:	01000804 	movi	r4,32
   45aa8:	2089c83a 	sub	r4,r4,r2
   45aac:	2912983a 	sll	r9,r5,r4
   45ab0:	3090d83a 	srl	r8,r6,r2
   45ab4:	3108983a 	sll	r4,r6,r4
   45ab8:	2884d83a 	srl	r2,r5,r2
   45abc:	4a12b03a 	or	r9,r9,r8
   45ac0:	2008c03a 	cmpne	r4,r4,zero
   45ac4:	4912b03a 	or	r9,r9,r4
   45ac8:	003f4e06 	br	45804 <__alt_mem_epcs_flash_controller+0xfe03c804>
   45acc:	1c48b03a 	or	r4,r3,r17
   45ad0:	20003c26 	beq	r4,zero,45bc4 <__subdf3+0x62c>
   45ad4:	0084303a 	nor	r2,zero,r2
   45ad8:	1000381e 	bne	r2,zero,45bbc <__subdf3+0x624>
   45adc:	3463c83a 	sub	r17,r6,r17
   45ae0:	28c5c83a 	sub	r2,r5,r3
   45ae4:	344d803a 	cmpltu	r6,r6,r17
   45ae8:	1187c83a 	sub	r3,r2,r6
   45aec:	4821883a 	mov	r16,r9
   45af0:	3825883a 	mov	r18,r7
   45af4:	003f0606 	br	45710 <__alt_mem_epcs_flash_controller+0xfe03c710>
   45af8:	2023883a 	mov	r17,r4
   45afc:	003f0906 	br	45724 <__alt_mem_epcs_flash_controller+0xfe03c724>
   45b00:	0101ffc4 	movi	r4,2047
   45b04:	813f3a1e 	bne	r16,r4,457f0 <__alt_mem_epcs_flash_controller+0xfe03c7f0>
   45b08:	003ec406 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45b0c:	0005883a 	mov	r2,zero
   45b10:	003fb106 	br	459d8 <__alt_mem_epcs_flash_controller+0xfe03c9d8>
   45b14:	0005883a 	mov	r2,zero
   45b18:	003fbc06 	br	45a0c <__alt_mem_epcs_flash_controller+0xfe03ca0c>
   45b1c:	1c44b03a 	or	r2,r3,r17
   45b20:	80008e1e 	bne	r16,zero,45d5c <__subdf3+0x7c4>
   45b24:	1000c826 	beq	r2,zero,45e48 <__subdf3+0x8b0>
   45b28:	2984b03a 	or	r2,r5,r6
   45b2c:	103ebb26 	beq	r2,zero,4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45b30:	8989883a 	add	r4,r17,r6
   45b34:	1945883a 	add	r2,r3,r5
   45b38:	2447803a 	cmpltu	r3,r4,r17
   45b3c:	1887883a 	add	r3,r3,r2
   45b40:	1880202c 	andhi	r2,r3,128
   45b44:	2023883a 	mov	r17,r4
   45b48:	103f1626 	beq	r2,zero,457a4 <__alt_mem_epcs_flash_controller+0xfe03c7a4>
   45b4c:	00bfe034 	movhi	r2,65408
   45b50:	10bfffc4 	addi	r2,r2,-1
   45b54:	5021883a 	mov	r16,r10
   45b58:	1886703a 	and	r3,r3,r2
   45b5c:	003eaf06 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45b60:	3825883a 	mov	r18,r7
   45b64:	003f0f06 	br	457a4 <__alt_mem_epcs_flash_controller+0xfe03c7a4>
   45b68:	1c44b03a 	or	r2,r3,r17
   45b6c:	8000251e 	bne	r16,zero,45c04 <__subdf3+0x66c>
   45b70:	1000661e 	bne	r2,zero,45d0c <__subdf3+0x774>
   45b74:	2990b03a 	or	r8,r5,r6
   45b78:	40009626 	beq	r8,zero,45dd4 <__subdf3+0x83c>
   45b7c:	2807883a 	mov	r3,r5
   45b80:	3023883a 	mov	r17,r6
   45b84:	3825883a 	mov	r18,r7
   45b88:	003ea406 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45b8c:	127ff804 	addi	r9,r2,-32
   45b90:	01000804 	movi	r4,32
   45b94:	2a52d83a 	srl	r9,r5,r9
   45b98:	11008c26 	beq	r2,r4,45dcc <__subdf3+0x834>
   45b9c:	01001004 	movi	r4,64
   45ba0:	2085c83a 	sub	r2,r4,r2
   45ba4:	2884983a 	sll	r2,r5,r2
   45ba8:	118cb03a 	or	r6,r2,r6
   45bac:	300cc03a 	cmpne	r6,r6,zero
   45bb0:	4992b03a 	or	r9,r9,r6
   45bb4:	0005883a 	mov	r2,zero
   45bb8:	003f1206 	br	45804 <__alt_mem_epcs_flash_controller+0xfe03c804>
   45bbc:	0101ffc4 	movi	r4,2047
   45bc0:	493f9c1e 	bne	r9,r4,45a34 <__alt_mem_epcs_flash_controller+0xfe03ca34>
   45bc4:	2807883a 	mov	r3,r5
   45bc8:	3023883a 	mov	r17,r6
   45bcc:	4821883a 	mov	r16,r9
   45bd0:	3825883a 	mov	r18,r7
   45bd4:	003e9106 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45bd8:	80001f1e 	bne	r16,zero,45c58 <__subdf3+0x6c0>
   45bdc:	1c48b03a 	or	r4,r3,r17
   45be0:	20005a26 	beq	r4,zero,45d4c <__subdf3+0x7b4>
   45be4:	0084303a 	nor	r2,zero,r2
   45be8:	1000561e 	bne	r2,zero,45d44 <__subdf3+0x7ac>
   45bec:	89a3883a 	add	r17,r17,r6
   45bf0:	1945883a 	add	r2,r3,r5
   45bf4:	898d803a 	cmpltu	r6,r17,r6
   45bf8:	3087883a 	add	r3,r6,r2
   45bfc:	4821883a 	mov	r16,r9
   45c00:	003f0506 	br	45818 <__alt_mem_epcs_flash_controller+0xfe03c818>
   45c04:	10002b1e 	bne	r2,zero,45cb4 <__subdf3+0x71c>
   45c08:	2984b03a 	or	r2,r5,r6
   45c0c:	10008026 	beq	r2,zero,45e10 <__subdf3+0x878>
   45c10:	2807883a 	mov	r3,r5
   45c14:	3023883a 	mov	r17,r6
   45c18:	3825883a 	mov	r18,r7
   45c1c:	0401ffc4 	movi	r16,2047
   45c20:	003e7e06 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45c24:	3809883a 	mov	r4,r7
   45c28:	0011883a 	mov	r8,zero
   45c2c:	0005883a 	mov	r2,zero
   45c30:	003ee306 	br	457c0 <__alt_mem_epcs_flash_controller+0xfe03c7c0>
   45c34:	1c62b03a 	or	r17,r3,r17
   45c38:	8822c03a 	cmpne	r17,r17,zero
   45c3c:	0005883a 	mov	r2,zero
   45c40:	003f8906 	br	45a68 <__alt_mem_epcs_flash_controller+0xfe03ca68>
   45c44:	3809883a 	mov	r4,r7
   45c48:	4821883a 	mov	r16,r9
   45c4c:	0011883a 	mov	r8,zero
   45c50:	0005883a 	mov	r2,zero
   45c54:	003eda06 	br	457c0 <__alt_mem_epcs_flash_controller+0xfe03c7c0>
   45c58:	0101ffc4 	movi	r4,2047
   45c5c:	49003b26 	beq	r9,r4,45d4c <__subdf3+0x7b4>
   45c60:	0085c83a 	sub	r2,zero,r2
   45c64:	18c02034 	orhi	r3,r3,128
   45c68:	01000e04 	movi	r4,56
   45c6c:	20806e16 	blt	r4,r2,45e28 <__subdf3+0x890>
   45c70:	010007c4 	movi	r4,31
   45c74:	20807716 	blt	r4,r2,45e54 <__subdf3+0x8bc>
   45c78:	01000804 	movi	r4,32
   45c7c:	2089c83a 	sub	r4,r4,r2
   45c80:	1914983a 	sll	r10,r3,r4
   45c84:	8890d83a 	srl	r8,r17,r2
   45c88:	8908983a 	sll	r4,r17,r4
   45c8c:	1884d83a 	srl	r2,r3,r2
   45c90:	5222b03a 	or	r17,r10,r8
   45c94:	2006c03a 	cmpne	r3,r4,zero
   45c98:	88e2b03a 	or	r17,r17,r3
   45c9c:	89a3883a 	add	r17,r17,r6
   45ca0:	1145883a 	add	r2,r2,r5
   45ca4:	898d803a 	cmpltu	r6,r17,r6
   45ca8:	3087883a 	add	r3,r6,r2
   45cac:	4821883a 	mov	r16,r9
   45cb0:	003ed906 	br	45818 <__alt_mem_epcs_flash_controller+0xfe03c818>
   45cb4:	2984b03a 	or	r2,r5,r6
   45cb8:	10004226 	beq	r2,zero,45dc4 <__subdf3+0x82c>
   45cbc:	1808d0fa 	srli	r4,r3,3
   45cc0:	8822d0fa 	srli	r17,r17,3
   45cc4:	1806977a 	slli	r3,r3,29
   45cc8:	2080022c 	andhi	r2,r4,8
   45ccc:	1c62b03a 	or	r17,r3,r17
   45cd0:	10000826 	beq	r2,zero,45cf4 <__subdf3+0x75c>
   45cd4:	2812d0fa 	srli	r9,r5,3
   45cd8:	4880022c 	andhi	r2,r9,8
   45cdc:	1000051e 	bne	r2,zero,45cf4 <__subdf3+0x75c>
   45ce0:	300cd0fa 	srli	r6,r6,3
   45ce4:	2804977a 	slli	r2,r5,29
   45ce8:	4809883a 	mov	r4,r9
   45cec:	3825883a 	mov	r18,r7
   45cf0:	11a2b03a 	or	r17,r2,r6
   45cf4:	8806d77a 	srli	r3,r17,29
   45cf8:	200890fa 	slli	r4,r4,3
   45cfc:	882290fa 	slli	r17,r17,3
   45d00:	0401ffc4 	movi	r16,2047
   45d04:	1906b03a 	or	r3,r3,r4
   45d08:	003e4406 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45d0c:	2984b03a 	or	r2,r5,r6
   45d10:	103e4226 	beq	r2,zero,4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45d14:	8989c83a 	sub	r4,r17,r6
   45d18:	8911803a 	cmpltu	r8,r17,r4
   45d1c:	1945c83a 	sub	r2,r3,r5
   45d20:	1205c83a 	sub	r2,r2,r8
   45d24:	1200202c 	andhi	r8,r2,128
   45d28:	403e9a26 	beq	r8,zero,45794 <__alt_mem_epcs_flash_controller+0xfe03c794>
   45d2c:	3463c83a 	sub	r17,r6,r17
   45d30:	28c5c83a 	sub	r2,r5,r3
   45d34:	344d803a 	cmpltu	r6,r6,r17
   45d38:	1187c83a 	sub	r3,r2,r6
   45d3c:	3825883a 	mov	r18,r7
   45d40:	003e3606 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45d44:	0101ffc4 	movi	r4,2047
   45d48:	493fc71e 	bne	r9,r4,45c68 <__alt_mem_epcs_flash_controller+0xfe03cc68>
   45d4c:	2807883a 	mov	r3,r5
   45d50:	3023883a 	mov	r17,r6
   45d54:	4821883a 	mov	r16,r9
   45d58:	003e3006 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45d5c:	10003626 	beq	r2,zero,45e38 <__subdf3+0x8a0>
   45d60:	2984b03a 	or	r2,r5,r6
   45d64:	10001726 	beq	r2,zero,45dc4 <__subdf3+0x82c>
   45d68:	1808d0fa 	srli	r4,r3,3
   45d6c:	8822d0fa 	srli	r17,r17,3
   45d70:	1806977a 	slli	r3,r3,29
   45d74:	2080022c 	andhi	r2,r4,8
   45d78:	1c62b03a 	or	r17,r3,r17
   45d7c:	10000726 	beq	r2,zero,45d9c <__subdf3+0x804>
   45d80:	2812d0fa 	srli	r9,r5,3
   45d84:	4880022c 	andhi	r2,r9,8
   45d88:	1000041e 	bne	r2,zero,45d9c <__subdf3+0x804>
   45d8c:	300cd0fa 	srli	r6,r6,3
   45d90:	2804977a 	slli	r2,r5,29
   45d94:	4809883a 	mov	r4,r9
   45d98:	11a2b03a 	or	r17,r2,r6
   45d9c:	8806d77a 	srli	r3,r17,29
   45da0:	200890fa 	slli	r4,r4,3
   45da4:	882290fa 	slli	r17,r17,3
   45da8:	3825883a 	mov	r18,r7
   45dac:	1906b03a 	or	r3,r3,r4
   45db0:	0401ffc4 	movi	r16,2047
   45db4:	003e1906 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45db8:	000b883a 	mov	r5,zero
   45dbc:	0005883a 	mov	r2,zero
   45dc0:	003e2e06 	br	4567c <__alt_mem_epcs_flash_controller+0xfe03c67c>
   45dc4:	0401ffc4 	movi	r16,2047
   45dc8:	003e1406 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45dcc:	0005883a 	mov	r2,zero
   45dd0:	003f7506 	br	45ba8 <__alt_mem_epcs_flash_controller+0xfe03cba8>
   45dd4:	0005883a 	mov	r2,zero
   45dd8:	0009883a 	mov	r4,zero
   45ddc:	003e7806 	br	457c0 <__alt_mem_epcs_flash_controller+0xfe03c7c0>
   45de0:	123ff804 	addi	r8,r2,-32
   45de4:	01000804 	movi	r4,32
   45de8:	1a10d83a 	srl	r8,r3,r8
   45dec:	11002526 	beq	r2,r4,45e84 <__subdf3+0x8ec>
   45df0:	01001004 	movi	r4,64
   45df4:	2085c83a 	sub	r2,r4,r2
   45df8:	1884983a 	sll	r2,r3,r2
   45dfc:	1444b03a 	or	r2,r2,r17
   45e00:	1004c03a 	cmpne	r2,r2,zero
   45e04:	40a2b03a 	or	r17,r8,r2
   45e08:	0005883a 	mov	r2,zero
   45e0c:	003f1606 	br	45a68 <__alt_mem_epcs_flash_controller+0xfe03ca68>
   45e10:	02000434 	movhi	r8,16
   45e14:	0009883a 	mov	r4,zero
   45e18:	423fffc4 	addi	r8,r8,-1
   45e1c:	00bfffc4 	movi	r2,-1
   45e20:	0401ffc4 	movi	r16,2047
   45e24:	003e6606 	br	457c0 <__alt_mem_epcs_flash_controller+0xfe03c7c0>
   45e28:	1c62b03a 	or	r17,r3,r17
   45e2c:	8822c03a 	cmpne	r17,r17,zero
   45e30:	0005883a 	mov	r2,zero
   45e34:	003f9906 	br	45c9c <__alt_mem_epcs_flash_controller+0xfe03cc9c>
   45e38:	2807883a 	mov	r3,r5
   45e3c:	3023883a 	mov	r17,r6
   45e40:	0401ffc4 	movi	r16,2047
   45e44:	003df506 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45e48:	2807883a 	mov	r3,r5
   45e4c:	3023883a 	mov	r17,r6
   45e50:	003df206 	br	4561c <__alt_mem_epcs_flash_controller+0xfe03c61c>
   45e54:	123ff804 	addi	r8,r2,-32
   45e58:	01000804 	movi	r4,32
   45e5c:	1a10d83a 	srl	r8,r3,r8
   45e60:	11000a26 	beq	r2,r4,45e8c <__subdf3+0x8f4>
   45e64:	01001004 	movi	r4,64
   45e68:	2085c83a 	sub	r2,r4,r2
   45e6c:	1884983a 	sll	r2,r3,r2
   45e70:	1444b03a 	or	r2,r2,r17
   45e74:	1004c03a 	cmpne	r2,r2,zero
   45e78:	40a2b03a 	or	r17,r8,r2
   45e7c:	0005883a 	mov	r2,zero
   45e80:	003f8606 	br	45c9c <__alt_mem_epcs_flash_controller+0xfe03cc9c>
   45e84:	0005883a 	mov	r2,zero
   45e88:	003fdc06 	br	45dfc <__alt_mem_epcs_flash_controller+0xfe03cdfc>
   45e8c:	0005883a 	mov	r2,zero
   45e90:	003ff706 	br	45e70 <__alt_mem_epcs_flash_controller+0xfe03ce70>

00045e94 <__floatsidf>:
   45e94:	defffd04 	addi	sp,sp,-12
   45e98:	dfc00215 	stw	ra,8(sp)
   45e9c:	dc400115 	stw	r17,4(sp)
   45ea0:	dc000015 	stw	r16,0(sp)
   45ea4:	20002b26 	beq	r4,zero,45f54 <__floatsidf+0xc0>
   45ea8:	2023883a 	mov	r17,r4
   45eac:	2020d7fa 	srli	r16,r4,31
   45eb0:	20002d16 	blt	r4,zero,45f68 <__floatsidf+0xd4>
   45eb4:	8809883a 	mov	r4,r17
   45eb8:	0045f700 	call	45f70 <__clzsi2>
   45ebc:	01410784 	movi	r5,1054
   45ec0:	288bc83a 	sub	r5,r5,r2
   45ec4:	01010cc4 	movi	r4,1075
   45ec8:	2149c83a 	sub	r4,r4,r5
   45ecc:	00c007c4 	movi	r3,31
   45ed0:	1900160e 	bge	r3,r4,45f2c <__floatsidf+0x98>
   45ed4:	00c104c4 	movi	r3,1043
   45ed8:	1947c83a 	sub	r3,r3,r5
   45edc:	88c6983a 	sll	r3,r17,r3
   45ee0:	00800434 	movhi	r2,16
   45ee4:	10bfffc4 	addi	r2,r2,-1
   45ee8:	1886703a 	and	r3,r3,r2
   45eec:	2941ffcc 	andi	r5,r5,2047
   45ef0:	800d883a 	mov	r6,r16
   45ef4:	0005883a 	mov	r2,zero
   45ef8:	280a953a 	slli	r5,r5,20
   45efc:	31803fcc 	andi	r6,r6,255
   45f00:	01000434 	movhi	r4,16
   45f04:	300c97fa 	slli	r6,r6,31
   45f08:	213fffc4 	addi	r4,r4,-1
   45f0c:	1906703a 	and	r3,r3,r4
   45f10:	1946b03a 	or	r3,r3,r5
   45f14:	1986b03a 	or	r3,r3,r6
   45f18:	dfc00217 	ldw	ra,8(sp)
   45f1c:	dc400117 	ldw	r17,4(sp)
   45f20:	dc000017 	ldw	r16,0(sp)
   45f24:	dec00304 	addi	sp,sp,12
   45f28:	f800283a 	ret
   45f2c:	00c002c4 	movi	r3,11
   45f30:	1887c83a 	sub	r3,r3,r2
   45f34:	88c6d83a 	srl	r3,r17,r3
   45f38:	8904983a 	sll	r2,r17,r4
   45f3c:	01000434 	movhi	r4,16
   45f40:	213fffc4 	addi	r4,r4,-1
   45f44:	2941ffcc 	andi	r5,r5,2047
   45f48:	1906703a 	and	r3,r3,r4
   45f4c:	800d883a 	mov	r6,r16
   45f50:	003fe906 	br	45ef8 <__alt_mem_epcs_flash_controller+0xfe03cef8>
   45f54:	000d883a 	mov	r6,zero
   45f58:	000b883a 	mov	r5,zero
   45f5c:	0007883a 	mov	r3,zero
   45f60:	0005883a 	mov	r2,zero
   45f64:	003fe406 	br	45ef8 <__alt_mem_epcs_flash_controller+0xfe03cef8>
   45f68:	0123c83a 	sub	r17,zero,r4
   45f6c:	003fd106 	br	45eb4 <__alt_mem_epcs_flash_controller+0xfe03ceb4>

00045f70 <__clzsi2>:
   45f70:	00bfffd4 	movui	r2,65535
   45f74:	11000536 	bltu	r2,r4,45f8c <__clzsi2+0x1c>
   45f78:	00803fc4 	movi	r2,255
   45f7c:	11000f36 	bltu	r2,r4,45fbc <__clzsi2+0x4c>
   45f80:	00800804 	movi	r2,32
   45f84:	0007883a 	mov	r3,zero
   45f88:	00000506 	br	45fa0 <__clzsi2+0x30>
   45f8c:	00804034 	movhi	r2,256
   45f90:	10bfffc4 	addi	r2,r2,-1
   45f94:	11000c2e 	bgeu	r2,r4,45fc8 <__clzsi2+0x58>
   45f98:	00800204 	movi	r2,8
   45f9c:	00c00604 	movi	r3,24
   45fa0:	20c8d83a 	srl	r4,r4,r3
   45fa4:	00c00174 	movhi	r3,5
   45fa8:	18da7104 	addi	r3,r3,27076
   45fac:	1909883a 	add	r4,r3,r4
   45fb0:	20c00003 	ldbu	r3,0(r4)
   45fb4:	10c5c83a 	sub	r2,r2,r3
   45fb8:	f800283a 	ret
   45fbc:	00800604 	movi	r2,24
   45fc0:	00c00204 	movi	r3,8
   45fc4:	003ff606 	br	45fa0 <__alt_mem_epcs_flash_controller+0xfe03cfa0>
   45fc8:	00800404 	movi	r2,16
   45fcc:	1007883a 	mov	r3,r2
   45fd0:	003ff306 	br	45fa0 <__alt_mem_epcs_flash_controller+0xfe03cfa0>

00045fd4 <abort>:
   45fd4:	deffff04 	addi	sp,sp,-4
   45fd8:	01000184 	movi	r4,6
   45fdc:	dfc00015 	stw	ra,0(sp)
   45fe0:	0046b000 	call	46b00 <raise>
   45fe4:	01000044 	movi	r4,1
   45fe8:	00484f80 	call	484f8 <_exit>

00045fec <__assert_func>:
   45fec:	008001b4 	movhi	r2,6
   45ff0:	10a08804 	addi	r2,r2,-32224
   45ff4:	10800017 	ldw	r2,0(r2)
   45ff8:	defffc04 	addi	sp,sp,-16
   45ffc:	dfc00315 	stw	ra,12(sp)
   46000:	2013883a 	mov	r9,r4
   46004:	3811883a 	mov	r8,r7
   46008:	11000317 	ldw	r4,12(r2)
   4600c:	3000041e 	bne	r6,zero,46020 <__assert_func+0x34>
   46010:	00c00174 	movhi	r3,5
   46014:	18dab404 	addi	r3,r3,27344
   46018:	1805883a 	mov	r2,r3
   4601c:	00000306 	br	4602c <__assert_func+0x40>
   46020:	00c00174 	movhi	r3,5
   46024:	3005883a 	mov	r2,r6
   46028:	18dab104 	addi	r3,r3,27332
   4602c:	d9400015 	stw	r5,0(sp)
   46030:	01400174 	movhi	r5,5
   46034:	d8c00115 	stw	r3,4(sp)
   46038:	480f883a 	mov	r7,r9
   4603c:	400d883a 	mov	r6,r8
   46040:	295ab504 	addi	r5,r5,27348
   46044:	d8800215 	stw	r2,8(sp)
   46048:	004609c0 	call	4609c <fiprintf>
   4604c:	0045fd40 	call	45fd4 <abort>

00046050 <__assert>:
   46050:	deffff04 	addi	sp,sp,-4
   46054:	300f883a 	mov	r7,r6
   46058:	000d883a 	mov	r6,zero
   4605c:	dfc00015 	stw	ra,0(sp)
   46060:	0045fec0 	call	45fec <__assert_func>

00046064 <calloc>:
   46064:	008001b4 	movhi	r2,6
   46068:	10a08804 	addi	r2,r2,-32224
   4606c:	280d883a 	mov	r6,r5
   46070:	200b883a 	mov	r5,r4
   46074:	11000017 	ldw	r4,0(r2)
   46078:	00464401 	jmpi	46440 <_calloc_r>

0004607c <exit>:
   4607c:	defffe04 	addi	sp,sp,-8
   46080:	000b883a 	mov	r5,zero
   46084:	dc000015 	stw	r16,0(sp)
   46088:	dfc00115 	stw	ra,4(sp)
   4608c:	2021883a 	mov	r16,r4
   46090:	004775c0 	call	4775c <__call_exitprocs>
   46094:	8009883a 	mov	r4,r16
   46098:	00484f80 	call	484f8 <_exit>

0004609c <fiprintf>:
   4609c:	defffd04 	addi	sp,sp,-12
   460a0:	dfc00015 	stw	ra,0(sp)
   460a4:	d9800115 	stw	r6,4(sp)
   460a8:	d9c00215 	stw	r7,8(sp)
   460ac:	00c00134 	movhi	r3,4
   460b0:	18d84c04 	addi	r3,r3,24880
   460b4:	20c00115 	stw	r3,4(r4)
   460b8:	d9800104 	addi	r6,sp,4
   460bc:	00476e80 	call	476e8 <__vfprintf_internal>
   460c0:	dfc00017 	ldw	ra,0(sp)
   460c4:	dec00304 	addi	sp,sp,12
   460c8:	f800283a 	ret

000460cc <_fprintf_r>:
   460cc:	defffe04 	addi	sp,sp,-8
   460d0:	2809883a 	mov	r4,r5
   460d4:	300b883a 	mov	r5,r6
   460d8:	dfc00015 	stw	ra,0(sp)
   460dc:	d9c00115 	stw	r7,4(sp)
   460e0:	00800134 	movhi	r2,4
   460e4:	10984c04 	addi	r2,r2,24880
   460e8:	20800115 	stw	r2,4(r4)
   460ec:	d9800104 	addi	r6,sp,4
   460f0:	00476e80 	call	476e8 <__vfprintf_internal>
   460f4:	dfc00017 	ldw	ra,0(sp)
   460f8:	dec00204 	addi	sp,sp,8
   460fc:	f800283a 	ret

00046100 <fprintf>:
   46100:	defffd04 	addi	sp,sp,-12
   46104:	dfc00015 	stw	ra,0(sp)
   46108:	d9800115 	stw	r6,4(sp)
   4610c:	d9c00215 	stw	r7,8(sp)
   46110:	00c00134 	movhi	r3,4
   46114:	18d84c04 	addi	r3,r3,24880
   46118:	20c00115 	stw	r3,4(r4)
   4611c:	d9800104 	addi	r6,sp,4
   46120:	00476e80 	call	476e8 <__vfprintf_internal>
   46124:	dfc00017 	ldw	ra,0(sp)
   46128:	dec00304 	addi	sp,sp,12
   4612c:	f800283a 	ret

00046130 <__sfvwrite_small_dev>:
   46130:	2880000b 	ldhu	r2,0(r5)
   46134:	1080020c 	andi	r2,r2,8
   46138:	10002126 	beq	r2,zero,461c0 <__sfvwrite_small_dev+0x90>
   4613c:	2880008f 	ldh	r2,2(r5)
   46140:	defffa04 	addi	sp,sp,-24
   46144:	dc000015 	stw	r16,0(sp)
   46148:	dfc00515 	stw	ra,20(sp)
   4614c:	dd000415 	stw	r20,16(sp)
   46150:	dcc00315 	stw	r19,12(sp)
   46154:	dc800215 	stw	r18,8(sp)
   46158:	dc400115 	stw	r17,4(sp)
   4615c:	2821883a 	mov	r16,r5
   46160:	10001216 	blt	r2,zero,461ac <__sfvwrite_small_dev+0x7c>
   46164:	2027883a 	mov	r19,r4
   46168:	3025883a 	mov	r18,r6
   4616c:	3823883a 	mov	r17,r7
   46170:	05010004 	movi	r20,1024
   46174:	04400b0e 	bge	zero,r17,461a4 <__sfvwrite_small_dev+0x74>
   46178:	880f883a 	mov	r7,r17
   4617c:	a440010e 	bge	r20,r17,46184 <__sfvwrite_small_dev+0x54>
   46180:	01c10004 	movi	r7,1024
   46184:	8140008f 	ldh	r5,2(r16)
   46188:	900d883a 	mov	r6,r18
   4618c:	9809883a 	mov	r4,r19
   46190:	00477040 	call	47704 <_write_r>
   46194:	0080050e 	bge	zero,r2,461ac <__sfvwrite_small_dev+0x7c>
   46198:	88a3c83a 	sub	r17,r17,r2
   4619c:	90a5883a 	add	r18,r18,r2
   461a0:	003ff406 	br	46174 <__alt_mem_epcs_flash_controller+0xfe03d174>
   461a4:	0005883a 	mov	r2,zero
   461a8:	00000706 	br	461c8 <__sfvwrite_small_dev+0x98>
   461ac:	8080000b 	ldhu	r2,0(r16)
   461b0:	10801014 	ori	r2,r2,64
   461b4:	8080000d 	sth	r2,0(r16)
   461b8:	00bfffc4 	movi	r2,-1
   461bc:	00000206 	br	461c8 <__sfvwrite_small_dev+0x98>
   461c0:	00bfffc4 	movi	r2,-1
   461c4:	f800283a 	ret
   461c8:	dfc00517 	ldw	ra,20(sp)
   461cc:	dd000417 	ldw	r20,16(sp)
   461d0:	dcc00317 	ldw	r19,12(sp)
   461d4:	dc800217 	ldw	r18,8(sp)
   461d8:	dc400117 	ldw	r17,4(sp)
   461dc:	dc000017 	ldw	r16,0(sp)
   461e0:	dec00604 	addi	sp,sp,24
   461e4:	f800283a 	ret

000461e8 <_findenv>:
   461e8:	008001b4 	movhi	r2,6
   461ec:	10a08804 	addi	r2,r2,-32224
   461f0:	280d883a 	mov	r6,r5
   461f4:	200b883a 	mov	r5,r4
   461f8:	11000017 	ldw	r4,0(r2)
   461fc:	004622c1 	jmpi	4622c <_findenv_r>

00046200 <getenv>:
   46200:	008001b4 	movhi	r2,6
   46204:	10a08804 	addi	r2,r2,-32224
   46208:	200b883a 	mov	r5,r4
   4620c:	11000017 	ldw	r4,0(r2)
   46210:	defffe04 	addi	sp,sp,-8
   46214:	d80d883a 	mov	r6,sp
   46218:	dfc00115 	stw	ra,4(sp)
   4621c:	004622c0 	call	4622c <_findenv_r>
   46220:	dfc00117 	ldw	ra,4(sp)
   46224:	dec00204 	addi	sp,sp,8
   46228:	f800283a 	ret

0004622c <_findenv_r>:
   4622c:	defff704 	addi	sp,sp,-36
   46230:	dd800615 	stw	r22,24(sp)
   46234:	dd000415 	stw	r20,16(sp)
   46238:	dcc00315 	stw	r19,12(sp)
   4623c:	dc000015 	stw	r16,0(sp)
   46240:	dfc00815 	stw	ra,32(sp)
   46244:	ddc00715 	stw	r23,28(sp)
   46248:	dd400515 	stw	r21,20(sp)
   4624c:	dc800215 	stw	r18,8(sp)
   46250:	dc400115 	stw	r17,4(sp)
   46254:	2027883a 	mov	r19,r4
   46258:	282d883a 	mov	r22,r5
   4625c:	3029883a 	mov	r20,r6
   46260:	00484b00 	call	484b0 <__env_lock>
   46264:	008001b4 	movhi	r2,6
   46268:	10a08904 	addi	r2,r2,-32220
   4626c:	14000017 	ldw	r16,0(r2)
   46270:	80000b26 	beq	r16,zero,462a0 <_findenv_r+0x74>
   46274:	102b883a 	mov	r21,r2
   46278:	b00d883a 	mov	r6,r22
   4627c:	00c00f44 	movi	r3,61
   46280:	00000d06 	br	462b8 <_findenv_r+0x8c>
   46284:	900d883a 	mov	r6,r18
   46288:	b00b883a 	mov	r5,r22
   4628c:	0046c580 	call	46c58 <strncmp>
   46290:	10000e26 	beq	r2,zero,462cc <_findenv_r+0xa0>
   46294:	84000104 	addi	r16,r16,4
   46298:	81000017 	ldw	r4,0(r16)
   4629c:	203ff91e 	bne	r4,zero,46284 <__alt_mem_epcs_flash_controller+0xfe03d284>
   462a0:	9809883a 	mov	r4,r19
   462a4:	00484d40 	call	484d4 <__env_unlock>
   462a8:	0005883a 	mov	r2,zero
   462ac:	00001206 	br	462f8 <_findenv_r+0xcc>
   462b0:	10fffb26 	beq	r2,r3,462a0 <__alt_mem_epcs_flash_controller+0xfe03d2a0>
   462b4:	31800044 	addi	r6,r6,1
   462b8:	30800007 	ldb	r2,0(r6)
   462bc:	103ffc1e 	bne	r2,zero,462b0 <__alt_mem_epcs_flash_controller+0xfe03d2b0>
   462c0:	35a5c83a 	sub	r18,r6,r22
   462c4:	05c00f44 	movi	r23,61
   462c8:	003ff306 	br	46298 <__alt_mem_epcs_flash_controller+0xfe03d298>
   462cc:	84400017 	ldw	r17,0(r16)
   462d0:	8ca3883a 	add	r17,r17,r18
   462d4:	88800007 	ldb	r2,0(r17)
   462d8:	15ffee1e 	bne	r2,r23,46294 <__alt_mem_epcs_flash_controller+0xfe03d294>
   462dc:	a8800017 	ldw	r2,0(r21)
   462e0:	9809883a 	mov	r4,r19
   462e4:	80a1c83a 	sub	r16,r16,r2
   462e8:	8021d0ba 	srai	r16,r16,2
   462ec:	a4000015 	stw	r16,0(r20)
   462f0:	00484d40 	call	484d4 <__env_unlock>
   462f4:	88800044 	addi	r2,r17,1
   462f8:	dfc00817 	ldw	ra,32(sp)
   462fc:	ddc00717 	ldw	r23,28(sp)
   46300:	dd800617 	ldw	r22,24(sp)
   46304:	dd400517 	ldw	r21,20(sp)
   46308:	dd000417 	ldw	r20,16(sp)
   4630c:	dcc00317 	ldw	r19,12(sp)
   46310:	dc800217 	ldw	r18,8(sp)
   46314:	dc400117 	ldw	r17,4(sp)
   46318:	dc000017 	ldw	r16,0(sp)
   4631c:	dec00904 	addi	sp,sp,36
   46320:	f800283a 	ret

00046324 <_getenv_r>:
   46324:	defffe04 	addi	sp,sp,-8
   46328:	d80d883a 	mov	r6,sp
   4632c:	dfc00115 	stw	ra,4(sp)
   46330:	004622c0 	call	4622c <_findenv_r>
   46334:	dfc00117 	ldw	ra,4(sp)
   46338:	dec00204 	addi	sp,sp,8
   4633c:	f800283a 	ret

00046340 <malloc>:
   46340:	008001b4 	movhi	r2,6
   46344:	10a08804 	addi	r2,r2,-32224
   46348:	200b883a 	mov	r5,r4
   4634c:	11000017 	ldw	r4,0(r2)
   46350:	00465701 	jmpi	46570 <_malloc_r>

00046354 <free>:
   46354:	008001b4 	movhi	r2,6
   46358:	10a08804 	addi	r2,r2,-32224
   4635c:	200b883a 	mov	r5,r4
   46360:	11000017 	ldw	r4,0(r2)
   46364:	004648c1 	jmpi	4648c <_free_r>

00046368 <memcmp>:
   46368:	218d883a 	add	r6,r4,r6
   4636c:	21800826 	beq	r4,r6,46390 <memcmp+0x28>
   46370:	20800003 	ldbu	r2,0(r4)
   46374:	28c00003 	ldbu	r3,0(r5)
   46378:	10c00226 	beq	r2,r3,46384 <memcmp+0x1c>
   4637c:	10c5c83a 	sub	r2,r2,r3
   46380:	f800283a 	ret
   46384:	21000044 	addi	r4,r4,1
   46388:	29400044 	addi	r5,r5,1
   4638c:	003ff706 	br	4636c <__alt_mem_epcs_flash_controller+0xfe03d36c>
   46390:	0005883a 	mov	r2,zero
   46394:	f800283a 	ret

00046398 <memcpy>:
   46398:	2005883a 	mov	r2,r4
   4639c:	2007883a 	mov	r3,r4
   463a0:	218d883a 	add	r6,r4,r6
   463a4:	19800526 	beq	r3,r6,463bc <memcpy+0x24>
   463a8:	29000003 	ldbu	r4,0(r5)
   463ac:	18c00044 	addi	r3,r3,1
   463b0:	29400044 	addi	r5,r5,1
   463b4:	193fffc5 	stb	r4,-1(r3)
   463b8:	003ffa06 	br	463a4 <__alt_mem_epcs_flash_controller+0xfe03d3a4>
   463bc:	f800283a 	ret

000463c0 <memmove>:
   463c0:	2005883a 	mov	r2,r4
   463c4:	218f883a 	add	r7,r4,r6
   463c8:	29000236 	bltu	r5,r4,463d4 <memmove+0x14>
   463cc:	1007883a 	mov	r3,r2
   463d0:	00000c06 	br	46404 <memmove+0x44>
   463d4:	2987883a 	add	r3,r5,r6
   463d8:	20fffc2e 	bgeu	r4,r3,463cc <__alt_mem_epcs_flash_controller+0xfe03d3cc>
   463dc:	380b883a 	mov	r5,r7
   463e0:	30cdc83a 	sub	r6,r6,r3
   463e4:	1989883a 	add	r4,r3,r6
   463e8:	20000526 	beq	r4,zero,46400 <memmove+0x40>
   463ec:	18ffffc4 	addi	r3,r3,-1
   463f0:	19000003 	ldbu	r4,0(r3)
   463f4:	297fffc4 	addi	r5,r5,-1
   463f8:	29000005 	stb	r4,0(r5)
   463fc:	003ff906 	br	463e4 <__alt_mem_epcs_flash_controller+0xfe03d3e4>
   46400:	f800283a 	ret
   46404:	19c00526 	beq	r3,r7,4641c <memmove+0x5c>
   46408:	29000003 	ldbu	r4,0(r5)
   4640c:	18c00044 	addi	r3,r3,1
   46410:	29400044 	addi	r5,r5,1
   46414:	193fffc5 	stb	r4,-1(r3)
   46418:	003ffa06 	br	46404 <__alt_mem_epcs_flash_controller+0xfe03d404>
   4641c:	f800283a 	ret

00046420 <memset>:
   46420:	2005883a 	mov	r2,r4
   46424:	2007883a 	mov	r3,r4
   46428:	218d883a 	add	r6,r4,r6
   4642c:	19800326 	beq	r3,r6,4643c <memset+0x1c>
   46430:	19400005 	stb	r5,0(r3)
   46434:	18c00044 	addi	r3,r3,1
   46438:	003ffc06 	br	4642c <__alt_mem_epcs_flash_controller+0xfe03d42c>
   4643c:	f800283a 	ret

00046440 <_calloc_r>:
   46440:	defffd04 	addi	sp,sp,-12
   46444:	dc400115 	stw	r17,4(sp)
   46448:	29a3383a 	mul	r17,r5,r6
   4644c:	dc000015 	stw	r16,0(sp)
   46450:	dfc00215 	stw	ra,8(sp)
   46454:	880b883a 	mov	r5,r17
   46458:	00465700 	call	46570 <_malloc_r>
   4645c:	1021883a 	mov	r16,r2
   46460:	10000426 	beq	r2,zero,46474 <_calloc_r+0x34>
   46464:	880d883a 	mov	r6,r17
   46468:	000b883a 	mov	r5,zero
   4646c:	1009883a 	mov	r4,r2
   46470:	00464200 	call	46420 <memset>
   46474:	8005883a 	mov	r2,r16
   46478:	dfc00217 	ldw	ra,8(sp)
   4647c:	dc400117 	ldw	r17,4(sp)
   46480:	dc000017 	ldw	r16,0(sp)
   46484:	dec00304 	addi	sp,sp,12
   46488:	f800283a 	ret

0004648c <_free_r>:
   4648c:	28003726 	beq	r5,zero,4656c <_free_r+0xe0>
   46490:	28ffff17 	ldw	r3,-4(r5)
   46494:	28bfff04 	addi	r2,r5,-4
   46498:	1800010e 	bge	r3,zero,464a0 <_free_r+0x14>
   4649c:	10c5883a 	add	r2,r2,r3
   464a0:	014001b4 	movhi	r5,6
   464a4:	2965bc04 	addi	r5,r5,-26896
   464a8:	28c00017 	ldw	r3,0(r5)
   464ac:	280d883a 	mov	r6,r5
   464b0:	1800031e 	bne	r3,zero,464c0 <_free_r+0x34>
   464b4:	10000115 	stw	zero,4(r2)
   464b8:	28800015 	stw	r2,0(r5)
   464bc:	f800283a 	ret
   464c0:	10c00c2e 	bgeu	r2,r3,464f4 <_free_r+0x68>
   464c4:	11000017 	ldw	r4,0(r2)
   464c8:	110b883a 	add	r5,r2,r4
   464cc:	1940041e 	bne	r3,r5,464e0 <_free_r+0x54>
   464d0:	19400017 	ldw	r5,0(r3)
   464d4:	18c00117 	ldw	r3,4(r3)
   464d8:	2909883a 	add	r4,r5,r4
   464dc:	11000015 	stw	r4,0(r2)
   464e0:	10c00115 	stw	r3,4(r2)
   464e4:	30800015 	stw	r2,0(r6)
   464e8:	f800283a 	ret
   464ec:	11400336 	bltu	r2,r5,464fc <_free_r+0x70>
   464f0:	2807883a 	mov	r3,r5
   464f4:	19400117 	ldw	r5,4(r3)
   464f8:	283ffc1e 	bne	r5,zero,464ec <__alt_mem_epcs_flash_controller+0xfe03d4ec>
   464fc:	19c00017 	ldw	r7,0(r3)
   46500:	19cd883a 	add	r6,r3,r7
   46504:	30800a1e 	bne	r6,r2,46530 <_free_r+0xa4>
   46508:	10800017 	ldw	r2,0(r2)
   4650c:	3885883a 	add	r2,r7,r2
   46510:	18800015 	stw	r2,0(r3)
   46514:	1889883a 	add	r4,r3,r2
   46518:	2900141e 	bne	r5,r4,4656c <_free_r+0xe0>
   4651c:	29000017 	ldw	r4,0(r5)
   46520:	2085883a 	add	r2,r4,r2
   46524:	18800015 	stw	r2,0(r3)
   46528:	28800117 	ldw	r2,4(r5)
   4652c:	00000e06 	br	46568 <_free_r+0xdc>
   46530:	1180032e 	bgeu	r2,r6,46540 <_free_r+0xb4>
   46534:	00800304 	movi	r2,12
   46538:	20800015 	stw	r2,0(r4)
   4653c:	f800283a 	ret
   46540:	11000017 	ldw	r4,0(r2)
   46544:	110d883a 	add	r6,r2,r4
   46548:	2980061e 	bne	r5,r6,46564 <_free_r+0xd8>
   4654c:	29800017 	ldw	r6,0(r5)
   46550:	3109883a 	add	r4,r6,r4
   46554:	11000015 	stw	r4,0(r2)
   46558:	29000117 	ldw	r4,4(r5)
   4655c:	11000115 	stw	r4,4(r2)
   46560:	00000106 	br	46568 <_free_r+0xdc>
   46564:	11400115 	stw	r5,4(r2)
   46568:	18800115 	stw	r2,4(r3)
   4656c:	f800283a 	ret

00046570 <_malloc_r>:
   46570:	defffb04 	addi	sp,sp,-20
   46574:	00bfff04 	movi	r2,-4
   46578:	dc400115 	stw	r17,4(sp)
   4657c:	2c4000c4 	addi	r17,r5,3
   46580:	88a2703a 	and	r17,r17,r2
   46584:	dc800215 	stw	r18,8(sp)
   46588:	dfc00415 	stw	ra,16(sp)
   4658c:	dcc00315 	stw	r19,12(sp)
   46590:	dc000015 	stw	r16,0(sp)
   46594:	8c400204 	addi	r17,r17,8
   46598:	00800304 	movi	r2,12
   4659c:	2025883a 	mov	r18,r4
   465a0:	8880022e 	bgeu	r17,r2,465ac <_malloc_r+0x3c>
   465a4:	1023883a 	mov	r17,r2
   465a8:	00000506 	br	465c0 <_malloc_r+0x50>
   465ac:	8800040e 	bge	r17,zero,465c0 <_malloc_r+0x50>
   465b0:	00800304 	movi	r2,12
   465b4:	90800015 	stw	r2,0(r18)
   465b8:	0005883a 	mov	r2,zero
   465bc:	00003b06 	br	466ac <_malloc_r+0x13c>
   465c0:	897ffb36 	bltu	r17,r5,465b0 <__alt_mem_epcs_flash_controller+0xfe03d5b0>
   465c4:	008001b4 	movhi	r2,6
   465c8:	10a5bc04 	addi	r2,r2,-26896
   465cc:	10c00017 	ldw	r3,0(r2)
   465d0:	1009883a 	mov	r4,r2
   465d4:	1821883a 	mov	r16,r3
   465d8:	80000926 	beq	r16,zero,46600 <_malloc_r+0x90>
   465dc:	80800017 	ldw	r2,0(r16)
   465e0:	1445c83a 	sub	r2,r2,r17
   465e4:	10001516 	blt	r2,zero,4663c <_malloc_r+0xcc>
   465e8:	014002c4 	movi	r5,11
   465ec:	28800d2e 	bgeu	r5,r2,46624 <_malloc_r+0xb4>
   465f0:	80800015 	stw	r2,0(r16)
   465f4:	80a1883a 	add	r16,r16,r2
   465f8:	84400015 	stw	r17,0(r16)
   465fc:	8000221e 	bne	r16,zero,46688 <_malloc_r+0x118>
   46600:	040001b4 	movhi	r16,6
   46604:	8425bb04 	addi	r16,r16,-26900
   46608:	80800017 	ldw	r2,0(r16)
   4660c:	10000e1e 	bne	r2,zero,46648 <_malloc_r+0xd8>
   46610:	000b883a 	mov	r5,zero
   46614:	9009883a 	mov	r4,r18
   46618:	00468700 	call	46870 <_sbrk_r>
   4661c:	80800015 	stw	r2,0(r16)
   46620:	00000906 	br	46648 <_malloc_r+0xd8>
   46624:	80800117 	ldw	r2,4(r16)
   46628:	1c00021e 	bne	r3,r16,46634 <_malloc_r+0xc4>
   4662c:	20800015 	stw	r2,0(r4)
   46630:	00001506 	br	46688 <_malloc_r+0x118>
   46634:	18800115 	stw	r2,4(r3)
   46638:	00001306 	br	46688 <_malloc_r+0x118>
   4663c:	8007883a 	mov	r3,r16
   46640:	84000117 	ldw	r16,4(r16)
   46644:	003fe406 	br	465d8 <__alt_mem_epcs_flash_controller+0xfe03d5d8>
   46648:	880b883a 	mov	r5,r17
   4664c:	9009883a 	mov	r4,r18
   46650:	00468700 	call	46870 <_sbrk_r>
   46654:	04ffffc4 	movi	r19,-1
   46658:	14ffd526 	beq	r2,r19,465b0 <__alt_mem_epcs_flash_controller+0xfe03d5b0>
   4665c:	140000c4 	addi	r16,r2,3
   46660:	00ffff04 	movi	r3,-4
   46664:	80e0703a 	and	r16,r16,r3
   46668:	1400021e 	bne	r2,r16,46674 <_malloc_r+0x104>
   4666c:	84400015 	stw	r17,0(r16)
   46670:	00000506 	br	46688 <_malloc_r+0x118>
   46674:	808bc83a 	sub	r5,r16,r2
   46678:	9009883a 	mov	r4,r18
   4667c:	00468700 	call	46870 <_sbrk_r>
   46680:	14fffa1e 	bne	r2,r19,4666c <__alt_mem_epcs_flash_controller+0xfe03d66c>
   46684:	003fca06 	br	465b0 <__alt_mem_epcs_flash_controller+0xfe03d5b0>
   46688:	810002c4 	addi	r4,r16,11
   4668c:	00bffe04 	movi	r2,-8
   46690:	80c00104 	addi	r3,r16,4
   46694:	2084703a 	and	r2,r4,r2
   46698:	10c7c83a 	sub	r3,r2,r3
   4669c:	18000326 	beq	r3,zero,466ac <_malloc_r+0x13c>
   466a0:	80e1883a 	add	r16,r16,r3
   466a4:	00c7c83a 	sub	r3,zero,r3
   466a8:	80c00015 	stw	r3,0(r16)
   466ac:	dfc00417 	ldw	ra,16(sp)
   466b0:	dcc00317 	ldw	r19,12(sp)
   466b4:	dc800217 	ldw	r18,8(sp)
   466b8:	dc400117 	ldw	r17,4(sp)
   466bc:	dc000017 	ldw	r16,0(sp)
   466c0:	dec00504 	addi	sp,sp,20
   466c4:	f800283a 	ret

000466c8 <_printf_r>:
   466c8:	defffd04 	addi	sp,sp,-12
   466cc:	dfc00015 	stw	ra,0(sp)
   466d0:	d9800115 	stw	r6,4(sp)
   466d4:	d9c00215 	stw	r7,8(sp)
   466d8:	20c00217 	ldw	r3,8(r4)
   466dc:	01800134 	movhi	r6,4
   466e0:	31984c04 	addi	r6,r6,24880
   466e4:	19800115 	stw	r6,4(r3)
   466e8:	280d883a 	mov	r6,r5
   466ec:	21400217 	ldw	r5,8(r4)
   466f0:	d9c00104 	addi	r7,sp,4
   466f4:	00471c40 	call	471c4 <___vfprintf_internal_r>
   466f8:	dfc00017 	ldw	ra,0(sp)
   466fc:	dec00304 	addi	sp,sp,12
   46700:	f800283a 	ret

00046704 <printf>:
   46704:	defffc04 	addi	sp,sp,-16
   46708:	dfc00015 	stw	ra,0(sp)
   4670c:	d9400115 	stw	r5,4(sp)
   46710:	d9800215 	stw	r6,8(sp)
   46714:	d9c00315 	stw	r7,12(sp)
   46718:	008001b4 	movhi	r2,6
   4671c:	10a08804 	addi	r2,r2,-32224
   46720:	10800017 	ldw	r2,0(r2)
   46724:	01400134 	movhi	r5,4
   46728:	29584c04 	addi	r5,r5,24880
   4672c:	10c00217 	ldw	r3,8(r2)
   46730:	d9800104 	addi	r6,sp,4
   46734:	19400115 	stw	r5,4(r3)
   46738:	200b883a 	mov	r5,r4
   4673c:	11000217 	ldw	r4,8(r2)
   46740:	00476e80 	call	476e8 <__vfprintf_internal>
   46744:	dfc00017 	ldw	ra,0(sp)
   46748:	dec00404 	addi	sp,sp,16
   4674c:	f800283a 	ret

00046750 <_puts_r>:
   46750:	defffd04 	addi	sp,sp,-12
   46754:	dc000015 	stw	r16,0(sp)
   46758:	2021883a 	mov	r16,r4
   4675c:	2809883a 	mov	r4,r5
   46760:	dfc00215 	stw	ra,8(sp)
   46764:	dc400115 	stw	r17,4(sp)
   46768:	2823883a 	mov	r17,r5
   4676c:	0046c3c0 	call	46c3c <strlen>
   46770:	81400217 	ldw	r5,8(r16)
   46774:	01000134 	movhi	r4,4
   46778:	21184c04 	addi	r4,r4,24880
   4677c:	29000115 	stw	r4,4(r5)
   46780:	100f883a 	mov	r7,r2
   46784:	880d883a 	mov	r6,r17
   46788:	8009883a 	mov	r4,r16
   4678c:	00461300 	call	46130 <__sfvwrite_small_dev>
   46790:	00ffffc4 	movi	r3,-1
   46794:	10c00926 	beq	r2,r3,467bc <_puts_r+0x6c>
   46798:	81400217 	ldw	r5,8(r16)
   4679c:	01800174 	movhi	r6,5
   467a0:	01c00044 	movi	r7,1
   467a4:	28800117 	ldw	r2,4(r5)
   467a8:	319b6104 	addi	r6,r6,28036
   467ac:	8009883a 	mov	r4,r16
   467b0:	103ee83a 	callr	r2
   467b4:	10bfffe0 	cmpeqi	r2,r2,-1
   467b8:	0085c83a 	sub	r2,zero,r2
   467bc:	dfc00217 	ldw	ra,8(sp)
   467c0:	dc400117 	ldw	r17,4(sp)
   467c4:	dc000017 	ldw	r16,0(sp)
   467c8:	dec00304 	addi	sp,sp,12
   467cc:	f800283a 	ret

000467d0 <puts>:
   467d0:	008001b4 	movhi	r2,6
   467d4:	10a08804 	addi	r2,r2,-32224
   467d8:	200b883a 	mov	r5,r4
   467dc:	11000017 	ldw	r4,0(r2)
   467e0:	00467501 	jmpi	46750 <_puts_r>

000467e4 <srand>:
   467e4:	008001b4 	movhi	r2,6
   467e8:	10a5bd04 	addi	r2,r2,-26892
   467ec:	11000015 	stw	r4,0(r2)
   467f0:	10000115 	stw	zero,4(r2)
   467f4:	f800283a 	ret

000467f8 <rand>:
   467f8:	defffe04 	addi	sp,sp,-8
   467fc:	dc000015 	stw	r16,0(sp)
   46800:	040001b4 	movhi	r16,6
   46804:	8425bd04 	addi	r16,r16,-26892
   46808:	81000017 	ldw	r4,0(r16)
   4680c:	81400117 	ldw	r5,4(r16)
   46810:	01932574 	movhi	r6,19605
   46814:	01d614b4 	movhi	r7,22610
   46818:	319fcb44 	addi	r6,r6,32557
   4681c:	39fd0b44 	addi	r7,r7,-3027
   46820:	dfc00115 	stw	ra,4(sp)
   46824:	00438e00 	call	438e0 <__muldi3>
   46828:	11000044 	addi	r4,r2,1
   4682c:	2085803a 	cmpltu	r2,r4,r2
   46830:	10c7883a 	add	r3,r2,r3
   46834:	00a00034 	movhi	r2,32768
   46838:	10bfffc4 	addi	r2,r2,-1
   4683c:	1884703a 	and	r2,r3,r2
   46840:	81000015 	stw	r4,0(r16)
   46844:	80c00115 	stw	r3,4(r16)
   46848:	dfc00117 	ldw	ra,4(sp)
   4684c:	dc000017 	ldw	r16,0(sp)
   46850:	dec00204 	addi	sp,sp,8
   46854:	f800283a 	ret

00046858 <realloc>:
   46858:	008001b4 	movhi	r2,6
   4685c:	10a08804 	addi	r2,r2,-32224
   46860:	280d883a 	mov	r6,r5
   46864:	200b883a 	mov	r5,r4
   46868:	11000017 	ldw	r4,0(r2)
   4686c:	00479401 	jmpi	47940 <_realloc_r>

00046870 <_sbrk_r>:
   46870:	defffd04 	addi	sp,sp,-12
   46874:	dc000015 	stw	r16,0(sp)
   46878:	040001b4 	movhi	r16,6
   4687c:	dc400115 	stw	r17,4(sp)
   46880:	8425c004 	addi	r16,r16,-26880
   46884:	2023883a 	mov	r17,r4
   46888:	2809883a 	mov	r4,r5
   4688c:	dfc00215 	stw	ra,8(sp)
   46890:	80000015 	stw	zero,0(r16)
   46894:	0048a140 	call	48a14 <sbrk>
   46898:	00ffffc4 	movi	r3,-1
   4689c:	10c0031e 	bne	r2,r3,468ac <_sbrk_r+0x3c>
   468a0:	80c00017 	ldw	r3,0(r16)
   468a4:	18000126 	beq	r3,zero,468ac <_sbrk_r+0x3c>
   468a8:	88c00015 	stw	r3,0(r17)
   468ac:	dfc00217 	ldw	ra,8(sp)
   468b0:	dc400117 	ldw	r17,4(sp)
   468b4:	dc000017 	ldw	r16,0(sp)
   468b8:	dec00304 	addi	sp,sp,12
   468bc:	f800283a 	ret

000468c0 <_init_signal_r>:
   468c0:	20800b17 	ldw	r2,44(r4)
   468c4:	1000161e 	bne	r2,zero,46920 <_init_signal_r+0x60>
   468c8:	defffe04 	addi	sp,sp,-8
   468cc:	01402004 	movi	r5,128
   468d0:	dc000015 	stw	r16,0(sp)
   468d4:	dfc00115 	stw	ra,4(sp)
   468d8:	2021883a 	mov	r16,r4
   468dc:	00465700 	call	46570 <_malloc_r>
   468e0:	80800b15 	stw	r2,44(r16)
   468e4:	10000926 	beq	r2,zero,4690c <_init_signal_r+0x4c>
   468e8:	0005883a 	mov	r2,zero
   468ec:	01002004 	movi	r4,128
   468f0:	80c00b17 	ldw	r3,44(r16)
   468f4:	1887883a 	add	r3,r3,r2
   468f8:	18000015 	stw	zero,0(r3)
   468fc:	10800104 	addi	r2,r2,4
   46900:	113ffb1e 	bne	r2,r4,468f0 <__alt_mem_epcs_flash_controller+0xfe03d8f0>
   46904:	0005883a 	mov	r2,zero
   46908:	00000106 	br	46910 <_init_signal_r+0x50>
   4690c:	00bfffc4 	movi	r2,-1
   46910:	dfc00117 	ldw	ra,4(sp)
   46914:	dc000017 	ldw	r16,0(sp)
   46918:	dec00204 	addi	sp,sp,8
   4691c:	f800283a 	ret
   46920:	0005883a 	mov	r2,zero
   46924:	f800283a 	ret

00046928 <_signal_r>:
   46928:	defffc04 	addi	sp,sp,-16
   4692c:	dc400115 	stw	r17,4(sp)
   46930:	dfc00315 	stw	ra,12(sp)
   46934:	dc800215 	stw	r18,8(sp)
   46938:	dc000015 	stw	r16,0(sp)
   4693c:	008007c4 	movi	r2,31
   46940:	2023883a 	mov	r17,r4
   46944:	1140032e 	bgeu	r2,r5,46954 <_signal_r+0x2c>
   46948:	00800584 	movi	r2,22
   4694c:	20800015 	stw	r2,0(r4)
   46950:	00000d06 	br	46988 <_signal_r+0x60>
   46954:	20800b17 	ldw	r2,44(r4)
   46958:	3025883a 	mov	r18,r6
   4695c:	2821883a 	mov	r16,r5
   46960:	10000726 	beq	r2,zero,46980 <_signal_r+0x58>
   46964:	88800b17 	ldw	r2,44(r17)
   46968:	8421883a 	add	r16,r16,r16
   4696c:	8421883a 	add	r16,r16,r16
   46970:	1421883a 	add	r16,r2,r16
   46974:	80800017 	ldw	r2,0(r16)
   46978:	84800015 	stw	r18,0(r16)
   4697c:	00000306 	br	4698c <_signal_r+0x64>
   46980:	00468c00 	call	468c0 <_init_signal_r>
   46984:	103ff726 	beq	r2,zero,46964 <__alt_mem_epcs_flash_controller+0xfe03d964>
   46988:	00bfffc4 	movi	r2,-1
   4698c:	dfc00317 	ldw	ra,12(sp)
   46990:	dc800217 	ldw	r18,8(sp)
   46994:	dc400117 	ldw	r17,4(sp)
   46998:	dc000017 	ldw	r16,0(sp)
   4699c:	dec00404 	addi	sp,sp,16
   469a0:	f800283a 	ret

000469a4 <_raise_r>:
   469a4:	008007c4 	movi	r2,31
   469a8:	1140042e 	bgeu	r2,r5,469bc <_raise_r+0x18>
   469ac:	00800584 	movi	r2,22
   469b0:	20800015 	stw	r2,0(r4)
   469b4:	00bfffc4 	movi	r2,-1
   469b8:	f800283a 	ret
   469bc:	20c00b17 	ldw	r3,44(r4)
   469c0:	defffd04 	addi	sp,sp,-12
   469c4:	dc400115 	stw	r17,4(sp)
   469c8:	dc000015 	stw	r16,0(sp)
   469cc:	dfc00215 	stw	ra,8(sp)
   469d0:	2821883a 	mov	r16,r5
   469d4:	2023883a 	mov	r17,r4
   469d8:	18000526 	beq	r3,zero,469f0 <_raise_r+0x4c>
   469dc:	2945883a 	add	r2,r5,r5
   469e0:	1085883a 	add	r2,r2,r2
   469e4:	1887883a 	add	r3,r3,r2
   469e8:	19400017 	ldw	r5,0(r3)
   469ec:	28000a1e 	bne	r5,zero,46a18 <_raise_r+0x74>
   469f0:	8809883a 	mov	r4,r17
   469f4:	0046ba40 	call	46ba4 <_getpid_r>
   469f8:	800d883a 	mov	r6,r16
   469fc:	100b883a 	mov	r5,r2
   46a00:	8809883a 	mov	r4,r17
   46a04:	dfc00217 	ldw	ra,8(sp)
   46a08:	dc400117 	ldw	r17,4(sp)
   46a0c:	dc000017 	ldw	r16,0(sp)
   46a10:	dec00304 	addi	sp,sp,12
   46a14:	0046b501 	jmpi	46b50 <_kill_r>
   46a18:	00800044 	movi	r2,1
   46a1c:	28800826 	beq	r5,r2,46a40 <_raise_r+0x9c>
   46a20:	013fffc4 	movi	r4,-1
   46a24:	2900031e 	bne	r5,r4,46a34 <_raise_r+0x90>
   46a28:	00c00584 	movi	r3,22
   46a2c:	88c00015 	stw	r3,0(r17)
   46a30:	00000406 	br	46a44 <_raise_r+0xa0>
   46a34:	18000015 	stw	zero,0(r3)
   46a38:	8009883a 	mov	r4,r16
   46a3c:	283ee83a 	callr	r5
   46a40:	0005883a 	mov	r2,zero
   46a44:	dfc00217 	ldw	ra,8(sp)
   46a48:	dc400117 	ldw	r17,4(sp)
   46a4c:	dc000017 	ldw	r16,0(sp)
   46a50:	dec00304 	addi	sp,sp,12
   46a54:	f800283a 	ret

00046a58 <__sigtramp_r>:
   46a58:	008007c4 	movi	r2,31
   46a5c:	11402636 	bltu	r2,r5,46af8 <__sigtramp_r+0xa0>
   46a60:	20800b17 	ldw	r2,44(r4)
   46a64:	defffd04 	addi	sp,sp,-12
   46a68:	dc400115 	stw	r17,4(sp)
   46a6c:	dc000015 	stw	r16,0(sp)
   46a70:	dfc00215 	stw	ra,8(sp)
   46a74:	2023883a 	mov	r17,r4
   46a78:	2821883a 	mov	r16,r5
   46a7c:	10000726 	beq	r2,zero,46a9c <__sigtramp_r+0x44>
   46a80:	88c00b17 	ldw	r3,44(r17)
   46a84:	8405883a 	add	r2,r16,r16
   46a88:	1085883a 	add	r2,r2,r2
   46a8c:	1885883a 	add	r2,r3,r2
   46a90:	10c00017 	ldw	r3,0(r2)
   46a94:	1800051e 	bne	r3,zero,46aac <__sigtramp_r+0x54>
   46a98:	00000d06 	br	46ad0 <__sigtramp_r+0x78>
   46a9c:	00468c00 	call	468c0 <_init_signal_r>
   46aa0:	103ff726 	beq	r2,zero,46a80 <__alt_mem_epcs_flash_controller+0xfe03da80>
   46aa4:	00bfffc4 	movi	r2,-1
   46aa8:	00000e06 	br	46ae4 <__sigtramp_r+0x8c>
   46aac:	013fffc4 	movi	r4,-1
   46ab0:	19000926 	beq	r3,r4,46ad8 <__sigtramp_r+0x80>
   46ab4:	01000044 	movi	r4,1
   46ab8:	19000926 	beq	r3,r4,46ae0 <__sigtramp_r+0x88>
   46abc:	10000015 	stw	zero,0(r2)
   46ac0:	8009883a 	mov	r4,r16
   46ac4:	183ee83a 	callr	r3
   46ac8:	0005883a 	mov	r2,zero
   46acc:	00000506 	br	46ae4 <__sigtramp_r+0x8c>
   46ad0:	00800044 	movi	r2,1
   46ad4:	00000306 	br	46ae4 <__sigtramp_r+0x8c>
   46ad8:	00800084 	movi	r2,2
   46adc:	00000106 	br	46ae4 <__sigtramp_r+0x8c>
   46ae0:	008000c4 	movi	r2,3
   46ae4:	dfc00217 	ldw	ra,8(sp)
   46ae8:	dc400117 	ldw	r17,4(sp)
   46aec:	dc000017 	ldw	r16,0(sp)
   46af0:	dec00304 	addi	sp,sp,12
   46af4:	f800283a 	ret
   46af8:	00bfffc4 	movi	r2,-1
   46afc:	f800283a 	ret

00046b00 <raise>:
   46b00:	008001b4 	movhi	r2,6
   46b04:	10a08804 	addi	r2,r2,-32224
   46b08:	200b883a 	mov	r5,r4
   46b0c:	11000017 	ldw	r4,0(r2)
   46b10:	00469a41 	jmpi	469a4 <_raise_r>

00046b14 <signal>:
   46b14:	008001b4 	movhi	r2,6
   46b18:	10a08804 	addi	r2,r2,-32224
   46b1c:	280d883a 	mov	r6,r5
   46b20:	200b883a 	mov	r5,r4
   46b24:	11000017 	ldw	r4,0(r2)
   46b28:	00469281 	jmpi	46928 <_signal_r>

00046b2c <_init_signal>:
   46b2c:	008001b4 	movhi	r2,6
   46b30:	10a08804 	addi	r2,r2,-32224
   46b34:	11000017 	ldw	r4,0(r2)
   46b38:	00468c01 	jmpi	468c0 <_init_signal_r>

00046b3c <__sigtramp>:
   46b3c:	008001b4 	movhi	r2,6
   46b40:	10a08804 	addi	r2,r2,-32224
   46b44:	200b883a 	mov	r5,r4
   46b48:	11000017 	ldw	r4,0(r2)
   46b4c:	0046a581 	jmpi	46a58 <__sigtramp_r>

00046b50 <_kill_r>:
   46b50:	defffd04 	addi	sp,sp,-12
   46b54:	dc000015 	stw	r16,0(sp)
   46b58:	040001b4 	movhi	r16,6
   46b5c:	dc400115 	stw	r17,4(sp)
   46b60:	8425c004 	addi	r16,r16,-26880
   46b64:	2023883a 	mov	r17,r4
   46b68:	2809883a 	mov	r4,r5
   46b6c:	300b883a 	mov	r5,r6
   46b70:	dfc00215 	stw	ra,8(sp)
   46b74:	80000015 	stw	zero,0(r16)
   46b78:	004877c0 	call	4877c <kill>
   46b7c:	00ffffc4 	movi	r3,-1
   46b80:	10c0031e 	bne	r2,r3,46b90 <_kill_r+0x40>
   46b84:	80c00017 	ldw	r3,0(r16)
   46b88:	18000126 	beq	r3,zero,46b90 <_kill_r+0x40>
   46b8c:	88c00015 	stw	r3,0(r17)
   46b90:	dfc00217 	ldw	ra,8(sp)
   46b94:	dc400117 	ldw	r17,4(sp)
   46b98:	dc000017 	ldw	r16,0(sp)
   46b9c:	dec00304 	addi	sp,sp,12
   46ba0:	f800283a 	ret

00046ba4 <_getpid_r>:
   46ba4:	004852c1 	jmpi	4852c <getpid>

00046ba8 <strchr>:
   46ba8:	28c03fcc 	andi	r3,r5,255
   46bac:	20800003 	ldbu	r2,0(r4)
   46bb0:	10000326 	beq	r2,zero,46bc0 <strchr+0x18>
   46bb4:	18800426 	beq	r3,r2,46bc8 <strchr+0x20>
   46bb8:	21000044 	addi	r4,r4,1
   46bbc:	003ffb06 	br	46bac <__alt_mem_epcs_flash_controller+0xfe03dbac>
   46bc0:	29403fcc 	andi	r5,r5,255
   46bc4:	2800021e 	bne	r5,zero,46bd0 <strchr+0x28>
   46bc8:	2005883a 	mov	r2,r4
   46bcc:	f800283a 	ret
   46bd0:	0005883a 	mov	r2,zero
   46bd4:	f800283a 	ret

00046bd8 <strcmp>:
   46bd8:	20800003 	ldbu	r2,0(r4)
   46bdc:	10c03fcc 	andi	r3,r2,255
   46be0:	18c0201c 	xori	r3,r3,128
   46be4:	18ffe004 	addi	r3,r3,-128
   46be8:	18000526 	beq	r3,zero,46c00 <strcmp+0x28>
   46bec:	29800007 	ldb	r6,0(r5)
   46bf0:	1980031e 	bne	r3,r6,46c00 <strcmp+0x28>
   46bf4:	21000044 	addi	r4,r4,1
   46bf8:	29400044 	addi	r5,r5,1
   46bfc:	003ff606 	br	46bd8 <__alt_mem_epcs_flash_controller+0xfe03dbd8>
   46c00:	28c00003 	ldbu	r3,0(r5)
   46c04:	10803fcc 	andi	r2,r2,255
   46c08:	10c5c83a 	sub	r2,r2,r3
   46c0c:	f800283a 	ret

00046c10 <strcpy>:
   46c10:	2005883a 	mov	r2,r4
   46c14:	200d883a 	mov	r6,r4
   46c18:	28c00003 	ldbu	r3,0(r5)
   46c1c:	31800044 	addi	r6,r6,1
   46c20:	29400044 	addi	r5,r5,1
   46c24:	30ffffc5 	stb	r3,-1(r6)
   46c28:	18c03fcc 	andi	r3,r3,255
   46c2c:	18c0201c 	xori	r3,r3,128
   46c30:	18ffe004 	addi	r3,r3,-128
   46c34:	183ff81e 	bne	r3,zero,46c18 <__alt_mem_epcs_flash_controller+0xfe03dc18>
   46c38:	f800283a 	ret

00046c3c <strlen>:
   46c3c:	2005883a 	mov	r2,r4
   46c40:	10c00007 	ldb	r3,0(r2)
   46c44:	18000226 	beq	r3,zero,46c50 <strlen+0x14>
   46c48:	10800044 	addi	r2,r2,1
   46c4c:	003ffc06 	br	46c40 <__alt_mem_epcs_flash_controller+0xfe03dc40>
   46c50:	1105c83a 	sub	r2,r2,r4
   46c54:	f800283a 	ret

00046c58 <strncmp>:
   46c58:	30001526 	beq	r6,zero,46cb0 <strncmp+0x58>
   46c5c:	31bfffc4 	addi	r6,r6,-1
   46c60:	218d883a 	add	r6,r4,r6
   46c64:	20800003 	ldbu	r2,0(r4)
   46c68:	28c00003 	ldbu	r3,0(r5)
   46c6c:	11c03fcc 	andi	r7,r2,255
   46c70:	1a003fcc 	andi	r8,r3,255
   46c74:	39c0201c 	xori	r7,r7,128
   46c78:	4200201c 	xori	r8,r8,128
   46c7c:	39ffe004 	addi	r7,r7,-128
   46c80:	423fe004 	addi	r8,r8,-128
   46c84:	3a00061e 	bne	r7,r8,46ca0 <strncmp+0x48>
   46c88:	21800426 	beq	r4,r6,46c9c <strncmp+0x44>
   46c8c:	38000326 	beq	r7,zero,46c9c <strncmp+0x44>
   46c90:	21000044 	addi	r4,r4,1
   46c94:	29400044 	addi	r5,r5,1
   46c98:	003ff206 	br	46c64 <__alt_mem_epcs_flash_controller+0xfe03dc64>
   46c9c:	1007883a 	mov	r3,r2
   46ca0:	18c03fcc 	andi	r3,r3,255
   46ca4:	10803fcc 	andi	r2,r2,255
   46ca8:	10c5c83a 	sub	r2,r2,r3
   46cac:	f800283a 	ret
   46cb0:	0005883a 	mov	r2,zero
   46cb4:	f800283a 	ret

00046cb8 <strncpy>:
   46cb8:	2005883a 	mov	r2,r4
   46cbc:	200f883a 	mov	r7,r4
   46cc0:	30000c26 	beq	r6,zero,46cf4 <strncpy+0x3c>
   46cc4:	2a000003 	ldbu	r8,0(r5)
   46cc8:	38c00044 	addi	r3,r7,1
   46ccc:	31bfffc4 	addi	r6,r6,-1
   46cd0:	3a000005 	stb	r8,0(r7)
   46cd4:	42003fcc 	andi	r8,r8,255
   46cd8:	4200201c 	xori	r8,r8,128
   46cdc:	423fe004 	addi	r8,r8,-128
   46ce0:	29400044 	addi	r5,r5,1
   46ce4:	180f883a 	mov	r7,r3
   46ce8:	403ff51e 	bne	r8,zero,46cc0 <__alt_mem_epcs_flash_controller+0xfe03dcc0>
   46cec:	198d883a 	add	r6,r3,r6
   46cf0:	00000106 	br	46cf8 <strncpy+0x40>
   46cf4:	f800283a 	ret
   46cf8:	30c00326 	beq	r6,r3,46d08 <strncpy+0x50>
   46cfc:	18000005 	stb	zero,0(r3)
   46d00:	18c00044 	addi	r3,r3,1
   46d04:	003ffc06 	br	46cf8 <__alt_mem_epcs_flash_controller+0xfe03dcf8>
   46d08:	f800283a 	ret

00046d0c <strnlen>:
   46d0c:	214b883a 	add	r5,r4,r5
   46d10:	2005883a 	mov	r2,r4
   46d14:	1140021e 	bne	r2,r5,46d20 <strnlen+0x14>
   46d18:	1105c83a 	sub	r2,r2,r4
   46d1c:	f800283a 	ret
   46d20:	10c00007 	ldb	r3,0(r2)
   46d24:	183ffc26 	beq	r3,zero,46d18 <__alt_mem_epcs_flash_controller+0xfe03dd18>
   46d28:	10800044 	addi	r2,r2,1
   46d2c:	003ff906 	br	46d14 <__alt_mem_epcs_flash_controller+0xfe03dd14>

00046d30 <strtok>:
   46d30:	008001b4 	movhi	r2,6
   46d34:	defffc04 	addi	sp,sp,-16
   46d38:	10a08804 	addi	r2,r2,-32224
   46d3c:	dc000115 	stw	r16,4(sp)
   46d40:	14000017 	ldw	r16,0(r2)
   46d44:	dc400215 	stw	r17,8(sp)
   46d48:	dfc00315 	stw	ra,12(sp)
   46d4c:	80803617 	ldw	r2,216(r16)
   46d50:	2023883a 	mov	r17,r4
   46d54:	1000211e 	bne	r2,zero,46ddc <strtok+0xac>
   46d58:	01001404 	movi	r4,80
   46d5c:	d9400015 	stw	r5,0(sp)
   46d60:	00463400 	call	46340 <malloc>
   46d64:	80803615 	stw	r2,216(r16)
   46d68:	10000215 	stw	zero,8(r2)
   46d6c:	10000015 	stw	zero,0(r2)
   46d70:	10000115 	stw	zero,4(r2)
   46d74:	80803617 	ldw	r2,216(r16)
   46d78:	10000415 	stw	zero,16(r2)
   46d7c:	10000315 	stw	zero,12(r2)
   46d80:	80803617 	ldw	r2,216(r16)
   46d84:	10000615 	stw	zero,24(r2)
   46d88:	10000515 	stw	zero,20(r2)
   46d8c:	80803617 	ldw	r2,216(r16)
   46d90:	10000b15 	stw	zero,44(r2)
   46d94:	10000a15 	stw	zero,40(r2)
   46d98:	80803617 	ldw	r2,216(r16)
   46d9c:	10000d15 	stw	zero,52(r2)
   46da0:	10000c15 	stw	zero,48(r2)
   46da4:	80803617 	ldw	r2,216(r16)
   46da8:	10000f15 	stw	zero,60(r2)
   46dac:	10000e15 	stw	zero,56(r2)
   46db0:	80803617 	ldw	r2,216(r16)
   46db4:	10001115 	stw	zero,68(r2)
   46db8:	10001015 	stw	zero,64(r2)
   46dbc:	80803617 	ldw	r2,216(r16)
   46dc0:	10001315 	stw	zero,76(r2)
   46dc4:	10001215 	stw	zero,72(r2)
   46dc8:	80803617 	ldw	r2,216(r16)
   46dcc:	10000705 	stb	zero,28(r2)
   46dd0:	80803617 	ldw	r2,216(r16)
   46dd4:	d9400017 	ldw	r5,0(sp)
   46dd8:	10000915 	stw	zero,36(r2)
   46ddc:	81803617 	ldw	r6,216(r16)
   46de0:	01c00044 	movi	r7,1
   46de4:	8809883a 	mov	r4,r17
   46de8:	dfc00317 	ldw	ra,12(sp)
   46dec:	dc400217 	ldw	r17,8(sp)
   46df0:	dc000117 	ldw	r16,4(sp)
   46df4:	dec00404 	addi	sp,sp,16
   46df8:	0046dfc1 	jmpi	46dfc <__strtok_r>

00046dfc <__strtok_r>:
   46dfc:	2000021e 	bne	r4,zero,46e08 <__strtok_r+0xc>
   46e00:	31000017 	ldw	r4,0(r6)
   46e04:	20001f26 	beq	r4,zero,46e84 <__strtok_r+0x88>
   46e08:	2005883a 	mov	r2,r4
   46e0c:	12000007 	ldb	r8,0(r2)
   46e10:	21000044 	addi	r4,r4,1
   46e14:	2807883a 	mov	r3,r5
   46e18:	1a400007 	ldb	r9,0(r3)
   46e1c:	48000626 	beq	r9,zero,46e38 <__strtok_r+0x3c>
   46e20:	18c00044 	addi	r3,r3,1
   46e24:	427ffc1e 	bne	r8,r9,46e18 <__alt_mem_epcs_flash_controller+0xfe03de18>
   46e28:	383ff71e 	bne	r7,zero,46e08 <__alt_mem_epcs_flash_controller+0xfe03de08>
   46e2c:	31000015 	stw	r4,0(r6)
   46e30:	10000005 	stb	zero,0(r2)
   46e34:	f800283a 	ret
   46e38:	4000061e 	bne	r8,zero,46e54 <__strtok_r+0x58>
   46e3c:	30000015 	stw	zero,0(r6)
   46e40:	00001006 	br	46e84 <__strtok_r+0x88>
   46e44:	19c00007 	ldb	r7,0(r3)
   46e48:	51c00826 	beq	r10,r7,46e6c <__strtok_r+0x70>
   46e4c:	18c00044 	addi	r3,r3,1
   46e50:	383ffc1e 	bne	r7,zero,46e44 <__alt_mem_epcs_flash_controller+0xfe03de44>
   46e54:	2011883a 	mov	r8,r4
   46e58:	21000044 	addi	r4,r4,1
   46e5c:	2013883a 	mov	r9,r4
   46e60:	42800007 	ldb	r10,0(r8)
   46e64:	2807883a 	mov	r3,r5
   46e68:	003ff606 	br	46e44 <__alt_mem_epcs_flash_controller+0xfe03de44>
   46e6c:	50000226 	beq	r10,zero,46e78 <__strtok_r+0x7c>
   46e70:	40000005 	stb	zero,0(r8)
   46e74:	00000106 	br	46e7c <__strtok_r+0x80>
   46e78:	0013883a 	mov	r9,zero
   46e7c:	32400015 	stw	r9,0(r6)
   46e80:	f800283a 	ret
   46e84:	0005883a 	mov	r2,zero
   46e88:	f800283a 	ret

00046e8c <strtok_r>:
   46e8c:	01c00044 	movi	r7,1
   46e90:	0046dfc1 	jmpi	46dfc <__strtok_r>

00046e94 <strtoull>:
   46e94:	008001b4 	movhi	r2,6
   46e98:	10a08804 	addi	r2,r2,-32224
   46e9c:	300f883a 	mov	r7,r6
   46ea0:	280d883a 	mov	r6,r5
   46ea4:	200b883a 	mov	r5,r4
   46ea8:	11000017 	ldw	r4,0(r2)
   46eac:	0046eb01 	jmpi	46eb0 <_strtoull_r>

00046eb0 <_strtoull_r>:
   46eb0:	008001b4 	movhi	r2,6
   46eb4:	defff204 	addi	sp,sp,-56
   46eb8:	10a08604 	addi	r2,r2,-32232
   46ebc:	dd000815 	stw	r20,32(sp)
   46ec0:	15000017 	ldw	r20,0(r2)
   46ec4:	ddc00b15 	stw	r23,44(sp)
   46ec8:	dd800a15 	stw	r22,40(sp)
   46ecc:	dfc00d15 	stw	ra,52(sp)
   46ed0:	df000c15 	stw	fp,48(sp)
   46ed4:	dd400915 	stw	r21,36(sp)
   46ed8:	dcc00715 	stw	r19,28(sp)
   46edc:	dc800615 	stw	r18,24(sp)
   46ee0:	dc400515 	stw	r17,20(sp)
   46ee4:	dc000415 	stw	r16,16(sp)
   46ee8:	d9000115 	stw	r4,4(sp)
   46eec:	d9400015 	stw	r5,0(sp)
   46ef0:	302d883a 	mov	r22,r6
   46ef4:	382f883a 	mov	r23,r7
   46ef8:	2807883a 	mov	r3,r5
   46efc:	1805883a 	mov	r2,r3
   46f00:	14000003 	ldbu	r16,0(r2)
   46f04:	1c400044 	addi	r17,r3,1
   46f08:	8807883a 	mov	r3,r17
   46f0c:	a409883a 	add	r4,r20,r16
   46f10:	21000043 	ldbu	r4,1(r4)
   46f14:	2100020c 	andi	r4,r4,8
   46f18:	203ff81e 	bne	r4,zero,46efc <__alt_mem_epcs_flash_controller+0xfe03defc>
   46f1c:	00c00b44 	movi	r3,45
   46f20:	80c0041e 	bne	r16,r3,46f34 <_strtoull_r+0x84>
   46f24:	14400084 	addi	r17,r2,2
   46f28:	14000043 	ldbu	r16,1(r2)
   46f2c:	07000044 	movi	fp,1
   46f30:	00000506 	br	46f48 <_strtoull_r+0x98>
   46f34:	00c00ac4 	movi	r3,43
   46f38:	80c0021e 	bne	r16,r3,46f44 <_strtoull_r+0x94>
   46f3c:	14000043 	ldbu	r16,1(r2)
   46f40:	14400084 	addi	r17,r2,2
   46f44:	0039883a 	mov	fp,zero
   46f48:	b8000326 	beq	r23,zero,46f58 <_strtoull_r+0xa8>
   46f4c:	00800404 	movi	r2,16
   46f50:	b8800a1e 	bne	r23,r2,46f7c <_strtoull_r+0xcc>
   46f54:	00005d06 	br	470cc <_strtoull_r+0x21c>
   46f58:	00800c04 	movi	r2,48
   46f5c:	8080591e 	bne	r16,r2,470c4 <_strtoull_r+0x214>
   46f60:	88800003 	ldbu	r2,0(r17)
   46f64:	00c01604 	movi	r3,88
   46f68:	108037cc 	andi	r2,r2,223
   46f6c:	10c0511e 	bne	r2,r3,470b4 <_strtoull_r+0x204>
   46f70:	8c000043 	ldbu	r16,1(r17)
   46f74:	05c00404 	movi	r23,16
   46f78:	8c400084 	addi	r17,r17,2
   46f7c:	b827d7fa 	srai	r19,r23,31
   46f80:	013fffc4 	movi	r4,-1
   46f84:	200b883a 	mov	r5,r4
   46f88:	b80d883a 	mov	r6,r23
   46f8c:	980f883a 	mov	r7,r19
   46f90:	0047a000 	call	47a00 <__udivdi3>
   46f94:	013fffc4 	movi	r4,-1
   46f98:	b80d883a 	mov	r6,r23
   46f9c:	980f883a 	mov	r7,r19
   46fa0:	200b883a 	mov	r5,r4
   46fa4:	102b883a 	mov	r21,r2
   46fa8:	1825883a 	mov	r18,r3
   46fac:	0047f780 	call	47f78 <__umoddi3>
   46fb0:	1015883a 	mov	r10,r2
   46fb4:	000d883a 	mov	r6,zero
   46fb8:	0005883a 	mov	r2,zero
   46fbc:	0007883a 	mov	r3,zero
   46fc0:	02c00044 	movi	r11,1
   46fc4:	a409883a 	add	r4,r20,r16
   46fc8:	21000043 	ldbu	r4,1(r4)
   46fcc:	2140010c 	andi	r5,r4,4
   46fd0:	28000226 	beq	r5,zero,46fdc <_strtoull_r+0x12c>
   46fd4:	843ff404 	addi	r16,r16,-48
   46fd8:	00000706 	br	46ff8 <_strtoull_r+0x148>
   46fdc:	210000cc 	andi	r4,r4,3
   46fe0:	20002126 	beq	r4,zero,47068 <_strtoull_r+0x1b8>
   46fe4:	22c00226 	beq	r4,r11,46ff0 <_strtoull_r+0x140>
   46fe8:	014015c4 	movi	r5,87
   46fec:	00000106 	br	46ff4 <_strtoull_r+0x144>
   46ff0:	01400dc4 	movi	r5,55
   46ff4:	8161c83a 	sub	r16,r16,r5
   46ff8:	85c01b0e 	bge	r16,r23,47068 <_strtoull_r+0x1b8>
   46ffc:	30001616 	blt	r6,zero,47058 <_strtoull_r+0x1a8>
   47000:	90c01536 	bltu	r18,r3,47058 <_strtoull_r+0x1a8>
   47004:	1c80011e 	bne	r3,r18,4700c <_strtoull_r+0x15c>
   47008:	a8801336 	bltu	r21,r2,47058 <_strtoull_r+0x1a8>
   4700c:	1540021e 	bne	r2,r21,47018 <_strtoull_r+0x168>
   47010:	1c80011e 	bne	r3,r18,47018 <_strtoull_r+0x168>
   47014:	54001016 	blt	r10,r16,47058 <_strtoull_r+0x1a8>
   47018:	b80d883a 	mov	r6,r23
   4701c:	180b883a 	mov	r5,r3
   47020:	980f883a 	mov	r7,r19
   47024:	1009883a 	mov	r4,r2
   47028:	da800215 	stw	r10,8(sp)
   4702c:	dac00315 	stw	r11,12(sp)
   47030:	00438e00 	call	438e0 <__muldi3>
   47034:	800bd7fa 	srai	r5,r16,31
   47038:	8085883a 	add	r2,r16,r2
   4703c:	1421803a 	cmpltu	r16,r2,r16
   47040:	28c7883a 	add	r3,r5,r3
   47044:	80c7883a 	add	r3,r16,r3
   47048:	01800044 	movi	r6,1
   4704c:	da800217 	ldw	r10,8(sp)
   47050:	dac00317 	ldw	r11,12(sp)
   47054:	00000106 	br	4705c <_strtoull_r+0x1ac>
   47058:	01bfffc4 	movi	r6,-1
   4705c:	8c000003 	ldbu	r16,0(r17)
   47060:	8c400044 	addi	r17,r17,1
   47064:	003fd706 	br	46fc4 <__alt_mem_epcs_flash_controller+0xfe03dfc4>
   47068:	3000070e 	bge	r6,zero,47088 <_strtoull_r+0x1d8>
   4706c:	d8c00117 	ldw	r3,4(sp)
   47070:	00800884 	movi	r2,34
   47074:	18800015 	stw	r2,0(r3)
   47078:	00bfffc4 	movi	r2,-1
   4707c:	1007883a 	mov	r3,r2
   47080:	b000091e 	bne	r22,zero,470a8 <_strtoull_r+0x1f8>
   47084:	00001406 	br	470d8 <_strtoull_r+0x228>
   47088:	e0000426 	beq	fp,zero,4709c <_strtoull_r+0x1ec>
   4708c:	0085c83a 	sub	r2,zero,r2
   47090:	1008c03a 	cmpne	r4,r2,zero
   47094:	00c7c83a 	sub	r3,zero,r3
   47098:	1907c83a 	sub	r3,r3,r4
   4709c:	b0000e26 	beq	r22,zero,470d8 <_strtoull_r+0x228>
   470a0:	dc800017 	ldw	r18,0(sp)
   470a4:	30000126 	beq	r6,zero,470ac <_strtoull_r+0x1fc>
   470a8:	8cbfffc4 	addi	r18,r17,-1
   470ac:	b4800015 	stw	r18,0(r22)
   470b0:	00000906 	br	470d8 <_strtoull_r+0x228>
   470b4:	04000c04 	movi	r16,48
   470b8:	b83fb01e 	bne	r23,zero,46f7c <__alt_mem_epcs_flash_controller+0xfe03df7c>
   470bc:	05c00204 	movi	r23,8
   470c0:	003fae06 	br	46f7c <__alt_mem_epcs_flash_controller+0xfe03df7c>
   470c4:	05c00284 	movi	r23,10
   470c8:	003fac06 	br	46f7c <__alt_mem_epcs_flash_controller+0xfe03df7c>
   470cc:	00800c04 	movi	r2,48
   470d0:	80bfa326 	beq	r16,r2,46f60 <__alt_mem_epcs_flash_controller+0xfe03df60>
   470d4:	003fa906 	br	46f7c <__alt_mem_epcs_flash_controller+0xfe03df7c>
   470d8:	dfc00d17 	ldw	ra,52(sp)
   470dc:	df000c17 	ldw	fp,48(sp)
   470e0:	ddc00b17 	ldw	r23,44(sp)
   470e4:	dd800a17 	ldw	r22,40(sp)
   470e8:	dd400917 	ldw	r21,36(sp)
   470ec:	dd000817 	ldw	r20,32(sp)
   470f0:	dcc00717 	ldw	r19,28(sp)
   470f4:	dc800617 	ldw	r18,24(sp)
   470f8:	dc400517 	ldw	r17,20(sp)
   470fc:	dc000417 	ldw	r16,16(sp)
   47100:	dec00e04 	addi	sp,sp,56
   47104:	f800283a 	ret

00047108 <time>:
   47108:	008001b4 	movhi	r2,6
   4710c:	defffc04 	addi	sp,sp,-16
   47110:	10a08804 	addi	r2,r2,-32224
   47114:	dc000215 	stw	r16,8(sp)
   47118:	2021883a 	mov	r16,r4
   4711c:	11000017 	ldw	r4,0(r2)
   47120:	000d883a 	mov	r6,zero
   47124:	d80b883a 	mov	r5,sp
   47128:	dfc00315 	stw	ra,12(sp)
   4712c:	00478ec0 	call	478ec <_gettimeofday_r>
   47130:	10000416 	blt	r2,zero,47144 <time+0x3c>
   47134:	d8800017 	ldw	r2,0(sp)
   47138:	80000326 	beq	r16,zero,47148 <time+0x40>
   4713c:	80800015 	stw	r2,0(r16)
   47140:	00000106 	br	47148 <time+0x40>
   47144:	00bfffc4 	movi	r2,-1
   47148:	dfc00317 	ldw	ra,12(sp)
   4714c:	dc000217 	ldw	r16,8(sp)
   47150:	dec00404 	addi	sp,sp,16
   47154:	f800283a 	ret

00047158 <print_repeat>:
   47158:	defffb04 	addi	sp,sp,-20
   4715c:	dc800315 	stw	r18,12(sp)
   47160:	dc400215 	stw	r17,8(sp)
   47164:	dc000115 	stw	r16,4(sp)
   47168:	dfc00415 	stw	ra,16(sp)
   4716c:	2025883a 	mov	r18,r4
   47170:	2823883a 	mov	r17,r5
   47174:	d9800005 	stb	r6,0(sp)
   47178:	3821883a 	mov	r16,r7
   4717c:	04000a0e 	bge	zero,r16,471a8 <print_repeat+0x50>
   47180:	88800117 	ldw	r2,4(r17)
   47184:	01c00044 	movi	r7,1
   47188:	d80d883a 	mov	r6,sp
   4718c:	880b883a 	mov	r5,r17
   47190:	9009883a 	mov	r4,r18
   47194:	103ee83a 	callr	r2
   47198:	843fffc4 	addi	r16,r16,-1
   4719c:	103ff726 	beq	r2,zero,4717c <__alt_mem_epcs_flash_controller+0xfe03e17c>
   471a0:	00bfffc4 	movi	r2,-1
   471a4:	00000106 	br	471ac <print_repeat+0x54>
   471a8:	0005883a 	mov	r2,zero
   471ac:	dfc00417 	ldw	ra,16(sp)
   471b0:	dc800317 	ldw	r18,12(sp)
   471b4:	dc400217 	ldw	r17,8(sp)
   471b8:	dc000117 	ldw	r16,4(sp)
   471bc:	dec00504 	addi	sp,sp,20
   471c0:	f800283a 	ret

000471c4 <___vfprintf_internal_r>:
   471c4:	deffe504 	addi	sp,sp,-108
   471c8:	d8c00804 	addi	r3,sp,32
   471cc:	df001915 	stw	fp,100(sp)
   471d0:	ddc01815 	stw	r23,96(sp)
   471d4:	dd801715 	stw	r22,92(sp)
   471d8:	dd401615 	stw	r21,88(sp)
   471dc:	dd001515 	stw	r20,84(sp)
   471e0:	dcc01415 	stw	r19,80(sp)
   471e4:	dc801315 	stw	r18,76(sp)
   471e8:	dc401215 	stw	r17,72(sp)
   471ec:	dc001115 	stw	r16,68(sp)
   471f0:	dfc01a15 	stw	ra,104(sp)
   471f4:	2027883a 	mov	r19,r4
   471f8:	2839883a 	mov	fp,r5
   471fc:	382d883a 	mov	r22,r7
   47200:	d9800f15 	stw	r6,60(sp)
   47204:	0021883a 	mov	r16,zero
   47208:	d8000e15 	stw	zero,56(sp)
   4720c:	002f883a 	mov	r23,zero
   47210:	002b883a 	mov	r21,zero
   47214:	0025883a 	mov	r18,zero
   47218:	0023883a 	mov	r17,zero
   4721c:	d8000c15 	stw	zero,48(sp)
   47220:	d8000b15 	stw	zero,44(sp)
   47224:	0029883a 	mov	r20,zero
   47228:	d8c00915 	stw	r3,36(sp)
   4722c:	d8c00f17 	ldw	r3,60(sp)
   47230:	19000003 	ldbu	r4,0(r3)
   47234:	20803fcc 	andi	r2,r4,255
   47238:	1080201c 	xori	r2,r2,128
   4723c:	10bfe004 	addi	r2,r2,-128
   47240:	10011c26 	beq	r2,zero,476b4 <___vfprintf_internal_r+0x4f0>
   47244:	00c00044 	movi	r3,1
   47248:	a0c01426 	beq	r20,r3,4729c <___vfprintf_internal_r+0xd8>
   4724c:	1d000216 	blt	r3,r20,47258 <___vfprintf_internal_r+0x94>
   47250:	a0000626 	beq	r20,zero,4726c <___vfprintf_internal_r+0xa8>
   47254:	00011306 	br	476a4 <___vfprintf_internal_r+0x4e0>
   47258:	01400084 	movi	r5,2
   4725c:	a1401d26 	beq	r20,r5,472d4 <___vfprintf_internal_r+0x110>
   47260:	014000c4 	movi	r5,3
   47264:	a1402926 	beq	r20,r5,4730c <___vfprintf_internal_r+0x148>
   47268:	00010e06 	br	476a4 <___vfprintf_internal_r+0x4e0>
   4726c:	01400944 	movi	r5,37
   47270:	1140fb26 	beq	r2,r5,47660 <___vfprintf_internal_r+0x49c>
   47274:	e0800117 	ldw	r2,4(fp)
   47278:	d9000005 	stb	r4,0(sp)
   4727c:	01c00044 	movi	r7,1
   47280:	d80d883a 	mov	r6,sp
   47284:	e00b883a 	mov	r5,fp
   47288:	9809883a 	mov	r4,r19
   4728c:	103ee83a 	callr	r2
   47290:	1000d61e 	bne	r2,zero,475ec <___vfprintf_internal_r+0x428>
   47294:	84000044 	addi	r16,r16,1
   47298:	00010206 	br	476a4 <___vfprintf_internal_r+0x4e0>
   4729c:	01400c04 	movi	r5,48
   472a0:	1140f826 	beq	r2,r5,47684 <___vfprintf_internal_r+0x4c0>
   472a4:	01400944 	movi	r5,37
   472a8:	11400a1e 	bne	r2,r5,472d4 <___vfprintf_internal_r+0x110>
   472ac:	d8800005 	stb	r2,0(sp)
   472b0:	e0800117 	ldw	r2,4(fp)
   472b4:	a00f883a 	mov	r7,r20
   472b8:	d80d883a 	mov	r6,sp
   472bc:	e00b883a 	mov	r5,fp
   472c0:	9809883a 	mov	r4,r19
   472c4:	103ee83a 	callr	r2
   472c8:	1000c81e 	bne	r2,zero,475ec <___vfprintf_internal_r+0x428>
   472cc:	84000044 	addi	r16,r16,1
   472d0:	0000f306 	br	476a0 <___vfprintf_internal_r+0x4dc>
   472d4:	217ff404 	addi	r5,r4,-48
   472d8:	29403fcc 	andi	r5,r5,255
   472dc:	00c00244 	movi	r3,9
   472e0:	19400736 	bltu	r3,r5,47300 <___vfprintf_internal_r+0x13c>
   472e4:	00bfffc4 	movi	r2,-1
   472e8:	88800226 	beq	r17,r2,472f4 <___vfprintf_internal_r+0x130>
   472ec:	8c4002a4 	muli	r17,r17,10
   472f0:	00000106 	br	472f8 <___vfprintf_internal_r+0x134>
   472f4:	0023883a 	mov	r17,zero
   472f8:	2c63883a 	add	r17,r5,r17
   472fc:	0000e206 	br	47688 <___vfprintf_internal_r+0x4c4>
   47300:	01400b84 	movi	r5,46
   47304:	1140e426 	beq	r2,r5,47698 <___vfprintf_internal_r+0x4d4>
   47308:	05000084 	movi	r20,2
   4730c:	213ff404 	addi	r4,r4,-48
   47310:	21003fcc 	andi	r4,r4,255
   47314:	00c00244 	movi	r3,9
   47318:	19000736 	bltu	r3,r4,47338 <___vfprintf_internal_r+0x174>
   4731c:	00bfffc4 	movi	r2,-1
   47320:	90800226 	beq	r18,r2,4732c <___vfprintf_internal_r+0x168>
   47324:	948002a4 	muli	r18,r18,10
   47328:	00000106 	br	47330 <___vfprintf_internal_r+0x16c>
   4732c:	0025883a 	mov	r18,zero
   47330:	24a5883a 	add	r18,r4,r18
   47334:	0000db06 	br	476a4 <___vfprintf_internal_r+0x4e0>
   47338:	00c01b04 	movi	r3,108
   4733c:	10c0d426 	beq	r2,r3,47690 <___vfprintf_internal_r+0x4cc>
   47340:	013fffc4 	movi	r4,-1
   47344:	91000226 	beq	r18,r4,47350 <___vfprintf_internal_r+0x18c>
   47348:	d8000b15 	stw	zero,44(sp)
   4734c:	00000106 	br	47354 <___vfprintf_internal_r+0x190>
   47350:	04800044 	movi	r18,1
   47354:	01001a44 	movi	r4,105
   47358:	11001626 	beq	r2,r4,473b4 <___vfprintf_internal_r+0x1f0>
   4735c:	20800916 	blt	r4,r2,47384 <___vfprintf_internal_r+0x1c0>
   47360:	010018c4 	movi	r4,99
   47364:	11008a26 	beq	r2,r4,47590 <___vfprintf_internal_r+0x3cc>
   47368:	01001904 	movi	r4,100
   4736c:	11001126 	beq	r2,r4,473b4 <___vfprintf_internal_r+0x1f0>
   47370:	01001604 	movi	r4,88
   47374:	1100ca1e 	bne	r2,r4,476a0 <___vfprintf_internal_r+0x4dc>
   47378:	00c00044 	movi	r3,1
   4737c:	d8c00e15 	stw	r3,56(sp)
   47380:	00001406 	br	473d4 <___vfprintf_internal_r+0x210>
   47384:	01001cc4 	movi	r4,115
   47388:	11009a26 	beq	r2,r4,475f4 <___vfprintf_internal_r+0x430>
   4738c:	20800416 	blt	r4,r2,473a0 <___vfprintf_internal_r+0x1dc>
   47390:	01001bc4 	movi	r4,111
   47394:	1100c21e 	bne	r2,r4,476a0 <___vfprintf_internal_r+0x4dc>
   47398:	05400204 	movi	r21,8
   4739c:	00000e06 	br	473d8 <___vfprintf_internal_r+0x214>
   473a0:	01001d44 	movi	r4,117
   473a4:	11000c26 	beq	r2,r4,473d8 <___vfprintf_internal_r+0x214>
   473a8:	01001e04 	movi	r4,120
   473ac:	11000926 	beq	r2,r4,473d4 <___vfprintf_internal_r+0x210>
   473b0:	0000bb06 	br	476a0 <___vfprintf_internal_r+0x4dc>
   473b4:	b5000104 	addi	r20,r22,4
   473b8:	b8000726 	beq	r23,zero,473d8 <___vfprintf_internal_r+0x214>
   473bc:	dd000d15 	stw	r20,52(sp)
   473c0:	b5800017 	ldw	r22,0(r22)
   473c4:	b000080e 	bge	r22,zero,473e8 <___vfprintf_internal_r+0x224>
   473c8:	05adc83a 	sub	r22,zero,r22
   473cc:	02800044 	movi	r10,1
   473d0:	00000606 	br	473ec <___vfprintf_internal_r+0x228>
   473d4:	05400404 	movi	r21,16
   473d8:	b0c00104 	addi	r3,r22,4
   473dc:	d8c00d15 	stw	r3,52(sp)
   473e0:	b5800017 	ldw	r22,0(r22)
   473e4:	002f883a 	mov	r23,zero
   473e8:	0015883a 	mov	r10,zero
   473ec:	d829883a 	mov	r20,sp
   473f0:	b0001426 	beq	r22,zero,47444 <___vfprintf_internal_r+0x280>
   473f4:	b009883a 	mov	r4,r22
   473f8:	a80b883a 	mov	r5,r21
   473fc:	da801015 	stw	r10,64(sp)
   47400:	0043a380 	call	43a38 <__udivsi3>
   47404:	1549383a 	mul	r4,r2,r21
   47408:	00c00244 	movi	r3,9
   4740c:	da801017 	ldw	r10,64(sp)
   47410:	b12dc83a 	sub	r22,r22,r4
   47414:	1d800216 	blt	r3,r22,47420 <___vfprintf_internal_r+0x25c>
   47418:	b5800c04 	addi	r22,r22,48
   4741c:	00000506 	br	47434 <___vfprintf_internal_r+0x270>
   47420:	d8c00e17 	ldw	r3,56(sp)
   47424:	18000226 	beq	r3,zero,47430 <___vfprintf_internal_r+0x26c>
   47428:	b5800dc4 	addi	r22,r22,55
   4742c:	00000106 	br	47434 <___vfprintf_internal_r+0x270>
   47430:	b58015c4 	addi	r22,r22,87
   47434:	a5800005 	stb	r22,0(r20)
   47438:	a5000044 	addi	r20,r20,1
   4743c:	102d883a 	mov	r22,r2
   47440:	003feb06 	br	473f0 <__alt_mem_epcs_flash_controller+0xfe03e3f0>
   47444:	a6c7c83a 	sub	r3,r20,sp
   47448:	d8c00a15 	stw	r3,40(sp)
   4744c:	90c5c83a 	sub	r2,r18,r3
   47450:	00800a0e 	bge	zero,r2,4747c <___vfprintf_internal_r+0x2b8>
   47454:	a085883a 	add	r2,r20,r2
   47458:	01400c04 	movi	r5,48
   4745c:	d8c00917 	ldw	r3,36(sp)
   47460:	a009883a 	mov	r4,r20
   47464:	a0c0032e 	bgeu	r20,r3,47474 <___vfprintf_internal_r+0x2b0>
   47468:	a5000044 	addi	r20,r20,1
   4746c:	21400005 	stb	r5,0(r4)
   47470:	a0bffa1e 	bne	r20,r2,4745c <__alt_mem_epcs_flash_controller+0xfe03e45c>
   47474:	a6c7c83a 	sub	r3,r20,sp
   47478:	d8c00a15 	stw	r3,40(sp)
   4747c:	d8c00a17 	ldw	r3,40(sp)
   47480:	50d3883a 	add	r9,r10,r3
   47484:	d8c00b17 	ldw	r3,44(sp)
   47488:	8a6dc83a 	sub	r22,r17,r9
   4748c:	18001726 	beq	r3,zero,474ec <___vfprintf_internal_r+0x328>
   47490:	50000a26 	beq	r10,zero,474bc <___vfprintf_internal_r+0x2f8>
   47494:	00800b44 	movi	r2,45
   47498:	d8800805 	stb	r2,32(sp)
   4749c:	e0800117 	ldw	r2,4(fp)
   474a0:	01c00044 	movi	r7,1
   474a4:	d9800804 	addi	r6,sp,32
   474a8:	e00b883a 	mov	r5,fp
   474ac:	9809883a 	mov	r4,r19
   474b0:	103ee83a 	callr	r2
   474b4:	10004d1e 	bne	r2,zero,475ec <___vfprintf_internal_r+0x428>
   474b8:	84000044 	addi	r16,r16,1
   474bc:	0580070e 	bge	zero,r22,474dc <___vfprintf_internal_r+0x318>
   474c0:	b00f883a 	mov	r7,r22
   474c4:	01800c04 	movi	r6,48
   474c8:	e00b883a 	mov	r5,fp
   474cc:	9809883a 	mov	r4,r19
   474d0:	00471580 	call	47158 <print_repeat>
   474d4:	1000451e 	bne	r2,zero,475ec <___vfprintf_internal_r+0x428>
   474d8:	85a1883a 	add	r16,r16,r22
   474dc:	d8c00a17 	ldw	r3,40(sp)
   474e0:	a013883a 	mov	r9,r20
   474e4:	1d2dc83a 	sub	r22,r3,r20
   474e8:	00002206 	br	47574 <___vfprintf_internal_r+0x3b0>
   474ec:	0580090e 	bge	zero,r22,47514 <___vfprintf_internal_r+0x350>
   474f0:	b00f883a 	mov	r7,r22
   474f4:	01800804 	movi	r6,32
   474f8:	e00b883a 	mov	r5,fp
   474fc:	9809883a 	mov	r4,r19
   47500:	da801015 	stw	r10,64(sp)
   47504:	00471580 	call	47158 <print_repeat>
   47508:	da801017 	ldw	r10,64(sp)
   4750c:	1000371e 	bne	r2,zero,475ec <___vfprintf_internal_r+0x428>
   47510:	85a1883a 	add	r16,r16,r22
   47514:	503ff126 	beq	r10,zero,474dc <__alt_mem_epcs_flash_controller+0xfe03e4dc>
   47518:	00800b44 	movi	r2,45
   4751c:	d8800805 	stb	r2,32(sp)
   47520:	e0800117 	ldw	r2,4(fp)
   47524:	01c00044 	movi	r7,1
   47528:	d9800804 	addi	r6,sp,32
   4752c:	e00b883a 	mov	r5,fp
   47530:	9809883a 	mov	r4,r19
   47534:	103ee83a 	callr	r2
   47538:	10002c1e 	bne	r2,zero,475ec <___vfprintf_internal_r+0x428>
   4753c:	84000044 	addi	r16,r16,1
   47540:	003fe606 	br	474dc <__alt_mem_epcs_flash_controller+0xfe03e4dc>
   47544:	4a7fffc4 	addi	r9,r9,-1
   47548:	48800003 	ldbu	r2,0(r9)
   4754c:	01c00044 	movi	r7,1
   47550:	d9800804 	addi	r6,sp,32
   47554:	d8800805 	stb	r2,32(sp)
   47558:	e0800117 	ldw	r2,4(fp)
   4755c:	e00b883a 	mov	r5,fp
   47560:	da401015 	stw	r9,64(sp)
   47564:	9809883a 	mov	r4,r19
   47568:	103ee83a 	callr	r2
   4756c:	da401017 	ldw	r9,64(sp)
   47570:	10001e1e 	bne	r2,zero,475ec <___vfprintf_internal_r+0x428>
   47574:	8245c83a 	sub	r2,r16,r9
   47578:	4d89883a 	add	r4,r9,r22
   4757c:	a085883a 	add	r2,r20,r2
   47580:	013ff016 	blt	zero,r4,47544 <__alt_mem_epcs_flash_controller+0xfe03e544>
   47584:	1021883a 	mov	r16,r2
   47588:	dd800d17 	ldw	r22,52(sp)
   4758c:	00004406 	br	476a0 <___vfprintf_internal_r+0x4dc>
   47590:	00800044 	movi	r2,1
   47594:	1440080e 	bge	r2,r17,475b8 <___vfprintf_internal_r+0x3f4>
   47598:	8d3fffc4 	addi	r20,r17,-1
   4759c:	a00f883a 	mov	r7,r20
   475a0:	01800804 	movi	r6,32
   475a4:	e00b883a 	mov	r5,fp
   475a8:	9809883a 	mov	r4,r19
   475ac:	00471580 	call	47158 <print_repeat>
   475b0:	10000e1e 	bne	r2,zero,475ec <___vfprintf_internal_r+0x428>
   475b4:	8521883a 	add	r16,r16,r20
   475b8:	b0800017 	ldw	r2,0(r22)
   475bc:	01c00044 	movi	r7,1
   475c0:	d80d883a 	mov	r6,sp
   475c4:	d8800005 	stb	r2,0(sp)
   475c8:	e0800117 	ldw	r2,4(fp)
   475cc:	e00b883a 	mov	r5,fp
   475d0:	9809883a 	mov	r4,r19
   475d4:	b5000104 	addi	r20,r22,4
   475d8:	103ee83a 	callr	r2
   475dc:	1000031e 	bne	r2,zero,475ec <___vfprintf_internal_r+0x428>
   475e0:	84000044 	addi	r16,r16,1
   475e4:	a02d883a 	mov	r22,r20
   475e8:	00002d06 	br	476a0 <___vfprintf_internal_r+0x4dc>
   475ec:	00bfffc4 	movi	r2,-1
   475f0:	00003106 	br	476b8 <___vfprintf_internal_r+0x4f4>
   475f4:	b5000017 	ldw	r20,0(r22)
   475f8:	b0c00104 	addi	r3,r22,4
   475fc:	d8c00a15 	stw	r3,40(sp)
   47600:	a009883a 	mov	r4,r20
   47604:	0046c3c0 	call	46c3c <strlen>
   47608:	8893c83a 	sub	r9,r17,r2
   4760c:	102d883a 	mov	r22,r2
   47610:	0240090e 	bge	zero,r9,47638 <___vfprintf_internal_r+0x474>
   47614:	480f883a 	mov	r7,r9
   47618:	01800804 	movi	r6,32
   4761c:	e00b883a 	mov	r5,fp
   47620:	9809883a 	mov	r4,r19
   47624:	da401015 	stw	r9,64(sp)
   47628:	00471580 	call	47158 <print_repeat>
   4762c:	da401017 	ldw	r9,64(sp)
   47630:	103fee1e 	bne	r2,zero,475ec <__alt_mem_epcs_flash_controller+0xfe03e5ec>
   47634:	8261883a 	add	r16,r16,r9
   47638:	e0800117 	ldw	r2,4(fp)
   4763c:	b00f883a 	mov	r7,r22
   47640:	a00d883a 	mov	r6,r20
   47644:	e00b883a 	mov	r5,fp
   47648:	9809883a 	mov	r4,r19
   4764c:	103ee83a 	callr	r2
   47650:	103fe61e 	bne	r2,zero,475ec <__alt_mem_epcs_flash_controller+0xfe03e5ec>
   47654:	85a1883a 	add	r16,r16,r22
   47658:	dd800a17 	ldw	r22,40(sp)
   4765c:	00001006 	br	476a0 <___vfprintf_internal_r+0x4dc>
   47660:	05c00044 	movi	r23,1
   47664:	04bfffc4 	movi	r18,-1
   47668:	d8000e15 	stw	zero,56(sp)
   4766c:	05400284 	movi	r21,10
   47670:	9023883a 	mov	r17,r18
   47674:	d8000c15 	stw	zero,48(sp)
   47678:	d8000b15 	stw	zero,44(sp)
   4767c:	b829883a 	mov	r20,r23
   47680:	00000806 	br	476a4 <___vfprintf_internal_r+0x4e0>
   47684:	dd000b15 	stw	r20,44(sp)
   47688:	05000084 	movi	r20,2
   4768c:	00000506 	br	476a4 <___vfprintf_internal_r+0x4e0>
   47690:	00c00044 	movi	r3,1
   47694:	d8c00c15 	stw	r3,48(sp)
   47698:	050000c4 	movi	r20,3
   4769c:	00000106 	br	476a4 <___vfprintf_internal_r+0x4e0>
   476a0:	0029883a 	mov	r20,zero
   476a4:	d8c00f17 	ldw	r3,60(sp)
   476a8:	18c00044 	addi	r3,r3,1
   476ac:	d8c00f15 	stw	r3,60(sp)
   476b0:	003ede06 	br	4722c <__alt_mem_epcs_flash_controller+0xfe03e22c>
   476b4:	8005883a 	mov	r2,r16
   476b8:	dfc01a17 	ldw	ra,104(sp)
   476bc:	df001917 	ldw	fp,100(sp)
   476c0:	ddc01817 	ldw	r23,96(sp)
   476c4:	dd801717 	ldw	r22,92(sp)
   476c8:	dd401617 	ldw	r21,88(sp)
   476cc:	dd001517 	ldw	r20,84(sp)
   476d0:	dcc01417 	ldw	r19,80(sp)
   476d4:	dc801317 	ldw	r18,76(sp)
   476d8:	dc401217 	ldw	r17,72(sp)
   476dc:	dc001117 	ldw	r16,68(sp)
   476e0:	dec01b04 	addi	sp,sp,108
   476e4:	f800283a 	ret

000476e8 <__vfprintf_internal>:
   476e8:	008001b4 	movhi	r2,6
   476ec:	10a08804 	addi	r2,r2,-32224
   476f0:	300f883a 	mov	r7,r6
   476f4:	280d883a 	mov	r6,r5
   476f8:	200b883a 	mov	r5,r4
   476fc:	11000017 	ldw	r4,0(r2)
   47700:	00471c41 	jmpi	471c4 <___vfprintf_internal_r>

00047704 <_write_r>:
   47704:	defffd04 	addi	sp,sp,-12
   47708:	dc000015 	stw	r16,0(sp)
   4770c:	040001b4 	movhi	r16,6
   47710:	dc400115 	stw	r17,4(sp)
   47714:	8425c004 	addi	r16,r16,-26880
   47718:	2023883a 	mov	r17,r4
   4771c:	2809883a 	mov	r4,r5
   47720:	300b883a 	mov	r5,r6
   47724:	380d883a 	mov	r6,r7
   47728:	dfc00215 	stw	ra,8(sp)
   4772c:	80000015 	stw	zero,0(r16)
   47730:	0048ca40 	call	48ca4 <write>
   47734:	00ffffc4 	movi	r3,-1
   47738:	10c0031e 	bne	r2,r3,47748 <_write_r+0x44>
   4773c:	80c00017 	ldw	r3,0(r16)
   47740:	18000126 	beq	r3,zero,47748 <_write_r+0x44>
   47744:	88c00015 	stw	r3,0(r17)
   47748:	dfc00217 	ldw	ra,8(sp)
   4774c:	dc400117 	ldw	r17,4(sp)
   47750:	dc000017 	ldw	r16,0(sp)
   47754:	dec00304 	addi	sp,sp,12
   47758:	f800283a 	ret

0004775c <__call_exitprocs>:
   4775c:	defff504 	addi	sp,sp,-44
   47760:	dd000515 	stw	r20,20(sp)
   47764:	050001b4 	movhi	r20,6
   47768:	dc800315 	stw	r18,12(sp)
   4776c:	dfc00a15 	stw	ra,40(sp)
   47770:	df000915 	stw	fp,36(sp)
   47774:	ddc00815 	stw	r23,32(sp)
   47778:	dd800715 	stw	r22,28(sp)
   4777c:	dd400615 	stw	r21,24(sp)
   47780:	dcc00415 	stw	r19,16(sp)
   47784:	dc400215 	stw	r17,8(sp)
   47788:	dc000115 	stw	r16,4(sp)
   4778c:	d9000015 	stw	r4,0(sp)
   47790:	2825883a 	mov	r18,r5
   47794:	a5208704 	addi	r20,r20,-32228
   47798:	a4400017 	ldw	r17,0(r20)
   4779c:	8cc00c17 	ldw	r19,48(r17)
   477a0:	8c400c04 	addi	r17,r17,48
   477a4:	98004526 	beq	r19,zero,478bc <__call_exitprocs+0x160>
   477a8:	9c000117 	ldw	r16,4(r19)
   477ac:	00900034 	movhi	r2,16384
   477b0:	10bfffc4 	addi	r2,r2,-1
   477b4:	9d402217 	ldw	r21,136(r19)
   477b8:	85bfffc4 	addi	r22,r16,-1
   477bc:	80a1883a 	add	r16,r16,r2
   477c0:	8421883a 	add	r16,r16,r16
   477c4:	8421883a 	add	r16,r16,r16
   477c8:	ac2f883a 	add	r23,r21,r16
   477cc:	84000204 	addi	r16,r16,8
   477d0:	9c21883a 	add	r16,r19,r16
   477d4:	b0002716 	blt	r22,zero,47874 <__call_exitprocs+0x118>
   477d8:	90000726 	beq	r18,zero,477f8 <__call_exitprocs+0x9c>
   477dc:	a800041e 	bne	r21,zero,477f0 <__call_exitprocs+0x94>
   477e0:	b5bfffc4 	addi	r22,r22,-1
   477e4:	bdffff04 	addi	r23,r23,-4
   477e8:	843fff04 	addi	r16,r16,-4
   477ec:	003ff906 	br	477d4 <__alt_mem_epcs_flash_controller+0xfe03e7d4>
   477f0:	b9002017 	ldw	r4,128(r23)
   477f4:	913ffa1e 	bne	r18,r4,477e0 <__alt_mem_epcs_flash_controller+0xfe03e7e0>
   477f8:	99000117 	ldw	r4,4(r19)
   477fc:	82000017 	ldw	r8,0(r16)
   47800:	213fffc4 	addi	r4,r4,-1
   47804:	b100021e 	bne	r22,r4,47810 <__call_exitprocs+0xb4>
   47808:	9d800115 	stw	r22,4(r19)
   4780c:	00000106 	br	47814 <__call_exitprocs+0xb8>
   47810:	80000015 	stw	zero,0(r16)
   47814:	403ff226 	beq	r8,zero,477e0 <__alt_mem_epcs_flash_controller+0xfe03e7e0>
   47818:	9f000117 	ldw	fp,4(r19)
   4781c:	a8000526 	beq	r21,zero,47834 <__call_exitprocs+0xd8>
   47820:	00800044 	movi	r2,1
   47824:	1592983a 	sll	r9,r2,r22
   47828:	a9404017 	ldw	r5,256(r21)
   4782c:	494a703a 	and	r5,r9,r5
   47830:	2800021e 	bne	r5,zero,4783c <__call_exitprocs+0xe0>
   47834:	403ee83a 	callr	r8
   47838:	00000906 	br	47860 <__call_exitprocs+0x104>
   4783c:	a9004117 	ldw	r4,260(r21)
   47840:	4908703a 	and	r4,r9,r4
   47844:	2000041e 	bne	r4,zero,47858 <__call_exitprocs+0xfc>
   47848:	b9400017 	ldw	r5,0(r23)
   4784c:	d9000017 	ldw	r4,0(sp)
   47850:	403ee83a 	callr	r8
   47854:	00000206 	br	47860 <__call_exitprocs+0x104>
   47858:	b9000017 	ldw	r4,0(r23)
   4785c:	403ee83a 	callr	r8
   47860:	99000117 	ldw	r4,4(r19)
   47864:	e13fcc1e 	bne	fp,r4,47798 <__alt_mem_epcs_flash_controller+0xfe03e798>
   47868:	89000017 	ldw	r4,0(r17)
   4786c:	993fdc26 	beq	r19,r4,477e0 <__alt_mem_epcs_flash_controller+0xfe03e7e0>
   47870:	003fc906 	br	47798 <__alt_mem_epcs_flash_controller+0xfe03e798>
   47874:	00800134 	movhi	r2,4
   47878:	1098d504 	addi	r2,r2,25428
   4787c:	10000f26 	beq	r2,zero,478bc <__call_exitprocs+0x160>
   47880:	99400117 	ldw	r5,4(r19)
   47884:	99000017 	ldw	r4,0(r19)
   47888:	2800091e 	bne	r5,zero,478b0 <__call_exitprocs+0x154>
   4788c:	20000826 	beq	r4,zero,478b0 <__call_exitprocs+0x154>
   47890:	89000015 	stw	r4,0(r17)
   47894:	a8000226 	beq	r21,zero,478a0 <__call_exitprocs+0x144>
   47898:	a809883a 	mov	r4,r21
   4789c:	00463540 	call	46354 <free>
   478a0:	9809883a 	mov	r4,r19
   478a4:	00463540 	call	46354 <free>
   478a8:	8cc00017 	ldw	r19,0(r17)
   478ac:	003fbd06 	br	477a4 <__alt_mem_epcs_flash_controller+0xfe03e7a4>
   478b0:	9823883a 	mov	r17,r19
   478b4:	2027883a 	mov	r19,r4
   478b8:	003fba06 	br	477a4 <__alt_mem_epcs_flash_controller+0xfe03e7a4>
   478bc:	dfc00a17 	ldw	ra,40(sp)
   478c0:	df000917 	ldw	fp,36(sp)
   478c4:	ddc00817 	ldw	r23,32(sp)
   478c8:	dd800717 	ldw	r22,28(sp)
   478cc:	dd400617 	ldw	r21,24(sp)
   478d0:	dd000517 	ldw	r20,20(sp)
   478d4:	dcc00417 	ldw	r19,16(sp)
   478d8:	dc800317 	ldw	r18,12(sp)
   478dc:	dc400217 	ldw	r17,8(sp)
   478e0:	dc000117 	ldw	r16,4(sp)
   478e4:	dec00b04 	addi	sp,sp,44
   478e8:	f800283a 	ret

000478ec <_gettimeofday_r>:
   478ec:	defffd04 	addi	sp,sp,-12
   478f0:	dc000015 	stw	r16,0(sp)
   478f4:	040001b4 	movhi	r16,6
   478f8:	dc400115 	stw	r17,4(sp)
   478fc:	8425c004 	addi	r16,r16,-26880
   47900:	2023883a 	mov	r17,r4
   47904:	2809883a 	mov	r4,r5
   47908:	300b883a 	mov	r5,r6
   4790c:	dfc00215 	stw	ra,8(sp)
   47910:	80000015 	stw	zero,0(r16)
   47914:	004854c0 	call	4854c <gettimeofday>
   47918:	00ffffc4 	movi	r3,-1
   4791c:	10c0031e 	bne	r2,r3,4792c <_gettimeofday_r+0x40>
   47920:	80c00017 	ldw	r3,0(r16)
   47924:	18000126 	beq	r3,zero,4792c <_gettimeofday_r+0x40>
   47928:	88c00015 	stw	r3,0(r17)
   4792c:	dfc00217 	ldw	ra,8(sp)
   47930:	dc400117 	ldw	r17,4(sp)
   47934:	dc000017 	ldw	r16,0(sp)
   47938:	dec00304 	addi	sp,sp,12
   4793c:	f800283a 	ret

00047940 <_realloc_r>:
   47940:	2800021e 	bne	r5,zero,4794c <_realloc_r+0xc>
   47944:	300b883a 	mov	r5,r6
   47948:	00465701 	jmpi	46570 <_malloc_r>
   4794c:	defffb04 	addi	sp,sp,-20
   47950:	dc400115 	stw	r17,4(sp)
   47954:	dc000015 	stw	r16,0(sp)
   47958:	dfc00415 	stw	ra,16(sp)
   4795c:	dcc00315 	stw	r19,12(sp)
   47960:	dc800215 	stw	r18,8(sp)
   47964:	3023883a 	mov	r17,r6
   47968:	2821883a 	mov	r16,r5
   4796c:	3000021e 	bne	r6,zero,47978 <_realloc_r+0x38>
   47970:	004648c0 	call	4648c <_free_r>
   47974:	00001306 	br	479c4 <_realloc_r+0x84>
   47978:	2025883a 	mov	r18,r4
   4797c:	00479e40 	call	479e4 <_malloc_usable_size_r>
   47980:	14400e2e 	bgeu	r2,r17,479bc <_realloc_r+0x7c>
   47984:	880b883a 	mov	r5,r17
   47988:	9009883a 	mov	r4,r18
   4798c:	00465700 	call	46570 <_malloc_r>
   47990:	1027883a 	mov	r19,r2
   47994:	10000b26 	beq	r2,zero,479c4 <_realloc_r+0x84>
   47998:	880d883a 	mov	r6,r17
   4799c:	800b883a 	mov	r5,r16
   479a0:	1009883a 	mov	r4,r2
   479a4:	00463980 	call	46398 <memcpy>
   479a8:	800b883a 	mov	r5,r16
   479ac:	9009883a 	mov	r4,r18
   479b0:	004648c0 	call	4648c <_free_r>
   479b4:	9805883a 	mov	r2,r19
   479b8:	00000306 	br	479c8 <_realloc_r+0x88>
   479bc:	8005883a 	mov	r2,r16
   479c0:	00000106 	br	479c8 <_realloc_r+0x88>
   479c4:	0005883a 	mov	r2,zero
   479c8:	dfc00417 	ldw	ra,16(sp)
   479cc:	dcc00317 	ldw	r19,12(sp)
   479d0:	dc800217 	ldw	r18,8(sp)
   479d4:	dc400117 	ldw	r17,4(sp)
   479d8:	dc000017 	ldw	r16,0(sp)
   479dc:	dec00504 	addi	sp,sp,20
   479e0:	f800283a 	ret

000479e4 <_malloc_usable_size_r>:
   479e4:	28bfff17 	ldw	r2,-4(r5)
   479e8:	1000030e 	bge	r2,zero,479f8 <_malloc_usable_size_r+0x14>
   479ec:	288b883a 	add	r5,r5,r2
   479f0:	28ffff17 	ldw	r3,-4(r5)
   479f4:	10c5883a 	add	r2,r2,r3
   479f8:	10bfff04 	addi	r2,r2,-4
   479fc:	f800283a 	ret

00047a00 <__udivdi3>:
   47a00:	defff504 	addi	sp,sp,-44
   47a04:	dcc00415 	stw	r19,16(sp)
   47a08:	dc000115 	stw	r16,4(sp)
   47a0c:	dfc00a15 	stw	ra,40(sp)
   47a10:	df000915 	stw	fp,36(sp)
   47a14:	ddc00815 	stw	r23,32(sp)
   47a18:	dd800715 	stw	r22,28(sp)
   47a1c:	dd400615 	stw	r21,24(sp)
   47a20:	dd000515 	stw	r20,20(sp)
   47a24:	dc800315 	stw	r18,12(sp)
   47a28:	dc400215 	stw	r17,8(sp)
   47a2c:	2027883a 	mov	r19,r4
   47a30:	2821883a 	mov	r16,r5
   47a34:	3800411e 	bne	r7,zero,47b3c <__udivdi3+0x13c>
   47a38:	3023883a 	mov	r17,r6
   47a3c:	2025883a 	mov	r18,r4
   47a40:	2980522e 	bgeu	r5,r6,47b8c <__udivdi3+0x18c>
   47a44:	00bfffd4 	movui	r2,65535
   47a48:	282d883a 	mov	r22,r5
   47a4c:	1180a836 	bltu	r2,r6,47cf0 <__udivdi3+0x2f0>
   47a50:	00803fc4 	movi	r2,255
   47a54:	1185803a 	cmpltu	r2,r2,r6
   47a58:	100490fa 	slli	r2,r2,3
   47a5c:	3086d83a 	srl	r3,r6,r2
   47a60:	01000174 	movhi	r4,5
   47a64:	211a7104 	addi	r4,r4,27076
   47a68:	20c7883a 	add	r3,r4,r3
   47a6c:	18c00003 	ldbu	r3,0(r3)
   47a70:	1885883a 	add	r2,r3,r2
   47a74:	00c00804 	movi	r3,32
   47a78:	1887c83a 	sub	r3,r3,r2
   47a7c:	18000526 	beq	r3,zero,47a94 <__udivdi3+0x94>
   47a80:	80e0983a 	sll	r16,r16,r3
   47a84:	9884d83a 	srl	r2,r19,r2
   47a88:	30e2983a 	sll	r17,r6,r3
   47a8c:	98e4983a 	sll	r18,r19,r3
   47a90:	142cb03a 	or	r22,r2,r16
   47a94:	882ad43a 	srli	r21,r17,16
   47a98:	b009883a 	mov	r4,r22
   47a9c:	8d3fffcc 	andi	r20,r17,65535
   47aa0:	a80b883a 	mov	r5,r21
   47aa4:	0043a9c0 	call	43a9c <__umodsi3>
   47aa8:	b009883a 	mov	r4,r22
   47aac:	a80b883a 	mov	r5,r21
   47ab0:	1027883a 	mov	r19,r2
   47ab4:	0043a380 	call	43a38 <__udivsi3>
   47ab8:	102d883a 	mov	r22,r2
   47abc:	9826943a 	slli	r19,r19,16
   47ac0:	9004d43a 	srli	r2,r18,16
   47ac4:	a5a1383a 	mul	r16,r20,r22
   47ac8:	14c4b03a 	or	r2,r2,r19
   47acc:	1400052e 	bgeu	r2,r16,47ae4 <__udivdi3+0xe4>
   47ad0:	1445883a 	add	r2,r2,r17
   47ad4:	b0ffffc4 	addi	r3,r22,-1
   47ad8:	14400136 	bltu	r2,r17,47ae0 <__udivdi3+0xe0>
   47adc:	14012336 	bltu	r2,r16,47f6c <__udivdi3+0x56c>
   47ae0:	182d883a 	mov	r22,r3
   47ae4:	1421c83a 	sub	r16,r2,r16
   47ae8:	a80b883a 	mov	r5,r21
   47aec:	8009883a 	mov	r4,r16
   47af0:	0043a9c0 	call	43a9c <__umodsi3>
   47af4:	1027883a 	mov	r19,r2
   47af8:	a80b883a 	mov	r5,r21
   47afc:	8009883a 	mov	r4,r16
   47b00:	0043a380 	call	43a38 <__udivsi3>
   47b04:	9826943a 	slli	r19,r19,16
   47b08:	a0a9383a 	mul	r20,r20,r2
   47b0c:	94bfffcc 	andi	r18,r18,65535
   47b10:	94e4b03a 	or	r18,r18,r19
   47b14:	9500052e 	bgeu	r18,r20,47b2c <__udivdi3+0x12c>
   47b18:	8ca5883a 	add	r18,r17,r18
   47b1c:	10ffffc4 	addi	r3,r2,-1
   47b20:	9440f136 	bltu	r18,r17,47ee8 <__udivdi3+0x4e8>
   47b24:	9500f02e 	bgeu	r18,r20,47ee8 <__udivdi3+0x4e8>
   47b28:	10bfff84 	addi	r2,r2,-2
   47b2c:	b00c943a 	slli	r6,r22,16
   47b30:	0007883a 	mov	r3,zero
   47b34:	3084b03a 	or	r2,r6,r2
   47b38:	00005906 	br	47ca0 <__udivdi3+0x2a0>
   47b3c:	29c05636 	bltu	r5,r7,47c98 <__udivdi3+0x298>
   47b40:	00bfffd4 	movui	r2,65535
   47b44:	11c0622e 	bgeu	r2,r7,47cd0 <__udivdi3+0x2d0>
   47b48:	00804034 	movhi	r2,256
   47b4c:	10bfffc4 	addi	r2,r2,-1
   47b50:	11c0ee36 	bltu	r2,r7,47f0c <__udivdi3+0x50c>
   47b54:	00800404 	movi	r2,16
   47b58:	3886d83a 	srl	r3,r7,r2
   47b5c:	01000174 	movhi	r4,5
   47b60:	211a7104 	addi	r4,r4,27076
   47b64:	20c7883a 	add	r3,r4,r3
   47b68:	18c00003 	ldbu	r3,0(r3)
   47b6c:	05400804 	movi	r21,32
   47b70:	1885883a 	add	r2,r3,r2
   47b74:	a8abc83a 	sub	r21,r21,r2
   47b78:	a800621e 	bne	r21,zero,47d04 <__udivdi3+0x304>
   47b7c:	3c00e936 	bltu	r7,r16,47f24 <__udivdi3+0x524>
   47b80:	9985403a 	cmpgeu	r2,r19,r6
   47b84:	0007883a 	mov	r3,zero
   47b88:	00004506 	br	47ca0 <__udivdi3+0x2a0>
   47b8c:	3000041e 	bne	r6,zero,47ba0 <__udivdi3+0x1a0>
   47b90:	000b883a 	mov	r5,zero
   47b94:	01000044 	movi	r4,1
   47b98:	0043a380 	call	43a38 <__udivsi3>
   47b9c:	1023883a 	mov	r17,r2
   47ba0:	00bfffd4 	movui	r2,65535
   47ba4:	14404e2e 	bgeu	r2,r17,47ce0 <__udivdi3+0x2e0>
   47ba8:	00804034 	movhi	r2,256
   47bac:	10bfffc4 	addi	r2,r2,-1
   47bb0:	1440d836 	bltu	r2,r17,47f14 <__udivdi3+0x514>
   47bb4:	00800404 	movi	r2,16
   47bb8:	8886d83a 	srl	r3,r17,r2
   47bbc:	01000174 	movhi	r4,5
   47bc0:	211a7104 	addi	r4,r4,27076
   47bc4:	20c7883a 	add	r3,r4,r3
   47bc8:	18c00003 	ldbu	r3,0(r3)
   47bcc:	1885883a 	add	r2,r3,r2
   47bd0:	00c00804 	movi	r3,32
   47bd4:	1887c83a 	sub	r3,r3,r2
   47bd8:	18008f1e 	bne	r3,zero,47e18 <__udivdi3+0x418>
   47bdc:	882ad43a 	srli	r21,r17,16
   47be0:	8461c83a 	sub	r16,r16,r17
   47be4:	8d3fffcc 	andi	r20,r17,65535
   47be8:	00c00044 	movi	r3,1
   47bec:	8009883a 	mov	r4,r16
   47bf0:	a80b883a 	mov	r5,r21
   47bf4:	d8c00015 	stw	r3,0(sp)
   47bf8:	0043a9c0 	call	43a9c <__umodsi3>
   47bfc:	8009883a 	mov	r4,r16
   47c00:	a80b883a 	mov	r5,r21
   47c04:	1027883a 	mov	r19,r2
   47c08:	0043a380 	call	43a38 <__udivsi3>
   47c0c:	9826943a 	slli	r19,r19,16
   47c10:	9008d43a 	srli	r4,r18,16
   47c14:	1521383a 	mul	r16,r2,r20
   47c18:	102d883a 	mov	r22,r2
   47c1c:	24c8b03a 	or	r4,r4,r19
   47c20:	d8c00017 	ldw	r3,0(sp)
   47c24:	2400052e 	bgeu	r4,r16,47c3c <__udivdi3+0x23c>
   47c28:	2449883a 	add	r4,r4,r17
   47c2c:	b0bfffc4 	addi	r2,r22,-1
   47c30:	24400136 	bltu	r4,r17,47c38 <__udivdi3+0x238>
   47c34:	2400ca36 	bltu	r4,r16,47f60 <__udivdi3+0x560>
   47c38:	102d883a 	mov	r22,r2
   47c3c:	2421c83a 	sub	r16,r4,r16
   47c40:	a80b883a 	mov	r5,r21
   47c44:	8009883a 	mov	r4,r16
   47c48:	d8c00015 	stw	r3,0(sp)
   47c4c:	0043a9c0 	call	43a9c <__umodsi3>
   47c50:	1027883a 	mov	r19,r2
   47c54:	a80b883a 	mov	r5,r21
   47c58:	8009883a 	mov	r4,r16
   47c5c:	0043a380 	call	43a38 <__udivsi3>
   47c60:	9826943a 	slli	r19,r19,16
   47c64:	1529383a 	mul	r20,r2,r20
   47c68:	94bfffcc 	andi	r18,r18,65535
   47c6c:	94e4b03a 	or	r18,r18,r19
   47c70:	d8c00017 	ldw	r3,0(sp)
   47c74:	9500052e 	bgeu	r18,r20,47c8c <__udivdi3+0x28c>
   47c78:	8ca5883a 	add	r18,r17,r18
   47c7c:	113fffc4 	addi	r4,r2,-1
   47c80:	94409736 	bltu	r18,r17,47ee0 <__udivdi3+0x4e0>
   47c84:	9500962e 	bgeu	r18,r20,47ee0 <__udivdi3+0x4e0>
   47c88:	10bfff84 	addi	r2,r2,-2
   47c8c:	b00c943a 	slli	r6,r22,16
   47c90:	3084b03a 	or	r2,r6,r2
   47c94:	00000206 	br	47ca0 <__udivdi3+0x2a0>
   47c98:	0007883a 	mov	r3,zero
   47c9c:	0005883a 	mov	r2,zero
   47ca0:	dfc00a17 	ldw	ra,40(sp)
   47ca4:	df000917 	ldw	fp,36(sp)
   47ca8:	ddc00817 	ldw	r23,32(sp)
   47cac:	dd800717 	ldw	r22,28(sp)
   47cb0:	dd400617 	ldw	r21,24(sp)
   47cb4:	dd000517 	ldw	r20,20(sp)
   47cb8:	dcc00417 	ldw	r19,16(sp)
   47cbc:	dc800317 	ldw	r18,12(sp)
   47cc0:	dc400217 	ldw	r17,8(sp)
   47cc4:	dc000117 	ldw	r16,4(sp)
   47cc8:	dec00b04 	addi	sp,sp,44
   47ccc:	f800283a 	ret
   47cd0:	00803fc4 	movi	r2,255
   47cd4:	11c5803a 	cmpltu	r2,r2,r7
   47cd8:	100490fa 	slli	r2,r2,3
   47cdc:	003f9e06 	br	47b58 <__alt_mem_epcs_flash_controller+0xfe03eb58>
   47ce0:	00803fc4 	movi	r2,255
   47ce4:	1445803a 	cmpltu	r2,r2,r17
   47ce8:	100490fa 	slli	r2,r2,3
   47cec:	003fb206 	br	47bb8 <__alt_mem_epcs_flash_controller+0xfe03ebb8>
   47cf0:	00804034 	movhi	r2,256
   47cf4:	10bfffc4 	addi	r2,r2,-1
   47cf8:	11808836 	bltu	r2,r6,47f1c <__udivdi3+0x51c>
   47cfc:	00800404 	movi	r2,16
   47d00:	003f5606 	br	47a5c <__alt_mem_epcs_flash_controller+0xfe03ea5c>
   47d04:	30aed83a 	srl	r23,r6,r2
   47d08:	3d4e983a 	sll	r7,r7,r21
   47d0c:	80acd83a 	srl	r22,r16,r2
   47d10:	9884d83a 	srl	r2,r19,r2
   47d14:	3deeb03a 	or	r23,r7,r23
   47d18:	b824d43a 	srli	r18,r23,16
   47d1c:	8560983a 	sll	r16,r16,r21
   47d20:	b009883a 	mov	r4,r22
   47d24:	900b883a 	mov	r5,r18
   47d28:	3568983a 	sll	r20,r6,r21
   47d2c:	1420b03a 	or	r16,r2,r16
   47d30:	0043a9c0 	call	43a9c <__umodsi3>
   47d34:	b009883a 	mov	r4,r22
   47d38:	900b883a 	mov	r5,r18
   47d3c:	1023883a 	mov	r17,r2
   47d40:	0043a380 	call	43a38 <__udivsi3>
   47d44:	8808943a 	slli	r4,r17,16
   47d48:	bf3fffcc 	andi	fp,r23,65535
   47d4c:	8006d43a 	srli	r3,r16,16
   47d50:	e0a3383a 	mul	r17,fp,r2
   47d54:	100d883a 	mov	r6,r2
   47d58:	1906b03a 	or	r3,r3,r4
   47d5c:	1c40042e 	bgeu	r3,r17,47d70 <__udivdi3+0x370>
   47d60:	1dc7883a 	add	r3,r3,r23
   47d64:	10bfffc4 	addi	r2,r2,-1
   47d68:	1dc0752e 	bgeu	r3,r23,47f40 <__udivdi3+0x540>
   47d6c:	100d883a 	mov	r6,r2
   47d70:	1c63c83a 	sub	r17,r3,r17
   47d74:	900b883a 	mov	r5,r18
   47d78:	8809883a 	mov	r4,r17
   47d7c:	d9800015 	stw	r6,0(sp)
   47d80:	0043a9c0 	call	43a9c <__umodsi3>
   47d84:	102d883a 	mov	r22,r2
   47d88:	8809883a 	mov	r4,r17
   47d8c:	900b883a 	mov	r5,r18
   47d90:	0043a380 	call	43a38 <__udivsi3>
   47d94:	b02c943a 	slli	r22,r22,16
   47d98:	e089383a 	mul	r4,fp,r2
   47d9c:	843fffcc 	andi	r16,r16,65535
   47da0:	85a0b03a 	or	r16,r16,r22
   47da4:	d9800017 	ldw	r6,0(sp)
   47da8:	8100042e 	bgeu	r16,r4,47dbc <__udivdi3+0x3bc>
   47dac:	85e1883a 	add	r16,r16,r23
   47db0:	10ffffc4 	addi	r3,r2,-1
   47db4:	85c05e2e 	bgeu	r16,r23,47f30 <__udivdi3+0x530>
   47db8:	1805883a 	mov	r2,r3
   47dbc:	300c943a 	slli	r6,r6,16
   47dc0:	a17fffcc 	andi	r5,r20,65535
   47dc4:	a028d43a 	srli	r20,r20,16
   47dc8:	3084b03a 	or	r2,r6,r2
   47dcc:	10ffffcc 	andi	r3,r2,65535
   47dd0:	100cd43a 	srli	r6,r2,16
   47dd4:	194f383a 	mul	r7,r3,r5
   47dd8:	1d07383a 	mul	r3,r3,r20
   47ddc:	314b383a 	mul	r5,r6,r5
   47de0:	3810d43a 	srli	r8,r7,16
   47de4:	8121c83a 	sub	r16,r16,r4
   47de8:	1947883a 	add	r3,r3,r5
   47dec:	40c7883a 	add	r3,r8,r3
   47df0:	350d383a 	mul	r6,r6,r20
   47df4:	1940022e 	bgeu	r3,r5,47e00 <__udivdi3+0x400>
   47df8:	01000074 	movhi	r4,1
   47dfc:	310d883a 	add	r6,r6,r4
   47e00:	1828d43a 	srli	r20,r3,16
   47e04:	a18d883a 	add	r6,r20,r6
   47e08:	81803e36 	bltu	r16,r6,47f04 <__udivdi3+0x504>
   47e0c:	81803826 	beq	r16,r6,47ef0 <__udivdi3+0x4f0>
   47e10:	0007883a 	mov	r3,zero
   47e14:	003fa206 	br	47ca0 <__alt_mem_epcs_flash_controller+0xfe03eca0>
   47e18:	88e2983a 	sll	r17,r17,r3
   47e1c:	80a8d83a 	srl	r20,r16,r2
   47e20:	80e0983a 	sll	r16,r16,r3
   47e24:	882ad43a 	srli	r21,r17,16
   47e28:	9884d83a 	srl	r2,r19,r2
   47e2c:	a009883a 	mov	r4,r20
   47e30:	a80b883a 	mov	r5,r21
   47e34:	142eb03a 	or	r23,r2,r16
   47e38:	98e4983a 	sll	r18,r19,r3
   47e3c:	0043a9c0 	call	43a9c <__umodsi3>
   47e40:	a009883a 	mov	r4,r20
   47e44:	a80b883a 	mov	r5,r21
   47e48:	1021883a 	mov	r16,r2
   47e4c:	0043a380 	call	43a38 <__udivsi3>
   47e50:	1039883a 	mov	fp,r2
   47e54:	8d3fffcc 	andi	r20,r17,65535
   47e58:	8020943a 	slli	r16,r16,16
   47e5c:	b804d43a 	srli	r2,r23,16
   47e60:	a72d383a 	mul	r22,r20,fp
   47e64:	1404b03a 	or	r2,r2,r16
   47e68:	1580062e 	bgeu	r2,r22,47e84 <__udivdi3+0x484>
   47e6c:	1445883a 	add	r2,r2,r17
   47e70:	e0ffffc4 	addi	r3,fp,-1
   47e74:	14403836 	bltu	r2,r17,47f58 <__udivdi3+0x558>
   47e78:	1580372e 	bgeu	r2,r22,47f58 <__udivdi3+0x558>
   47e7c:	e73fff84 	addi	fp,fp,-2
   47e80:	1445883a 	add	r2,r2,r17
   47e84:	15adc83a 	sub	r22,r2,r22
   47e88:	a80b883a 	mov	r5,r21
   47e8c:	b009883a 	mov	r4,r22
   47e90:	0043a9c0 	call	43a9c <__umodsi3>
   47e94:	1027883a 	mov	r19,r2
   47e98:	b009883a 	mov	r4,r22
   47e9c:	a80b883a 	mov	r5,r21
   47ea0:	0043a380 	call	43a38 <__udivsi3>
   47ea4:	9826943a 	slli	r19,r19,16
   47ea8:	a0a1383a 	mul	r16,r20,r2
   47eac:	b93fffcc 	andi	r4,r23,65535
   47eb0:	24c8b03a 	or	r4,r4,r19
   47eb4:	2400062e 	bgeu	r4,r16,47ed0 <__udivdi3+0x4d0>
   47eb8:	2449883a 	add	r4,r4,r17
   47ebc:	10ffffc4 	addi	r3,r2,-1
   47ec0:	24402336 	bltu	r4,r17,47f50 <__udivdi3+0x550>
   47ec4:	2400222e 	bgeu	r4,r16,47f50 <__udivdi3+0x550>
   47ec8:	10bfff84 	addi	r2,r2,-2
   47ecc:	2449883a 	add	r4,r4,r17
   47ed0:	e038943a 	slli	fp,fp,16
   47ed4:	2421c83a 	sub	r16,r4,r16
   47ed8:	e086b03a 	or	r3,fp,r2
   47edc:	003f4306 	br	47bec <__alt_mem_epcs_flash_controller+0xfe03ebec>
   47ee0:	2005883a 	mov	r2,r4
   47ee4:	003f6906 	br	47c8c <__alt_mem_epcs_flash_controller+0xfe03ec8c>
   47ee8:	1805883a 	mov	r2,r3
   47eec:	003f0f06 	br	47b2c <__alt_mem_epcs_flash_controller+0xfe03eb2c>
   47ef0:	1806943a 	slli	r3,r3,16
   47ef4:	9d66983a 	sll	r19,r19,r21
   47ef8:	39ffffcc 	andi	r7,r7,65535
   47efc:	19c7883a 	add	r3,r3,r7
   47f00:	98ffc32e 	bgeu	r19,r3,47e10 <__alt_mem_epcs_flash_controller+0xfe03ee10>
   47f04:	10bfffc4 	addi	r2,r2,-1
   47f08:	003fc106 	br	47e10 <__alt_mem_epcs_flash_controller+0xfe03ee10>
   47f0c:	00800604 	movi	r2,24
   47f10:	003f1106 	br	47b58 <__alt_mem_epcs_flash_controller+0xfe03eb58>
   47f14:	00800604 	movi	r2,24
   47f18:	003f2706 	br	47bb8 <__alt_mem_epcs_flash_controller+0xfe03ebb8>
   47f1c:	00800604 	movi	r2,24
   47f20:	003ece06 	br	47a5c <__alt_mem_epcs_flash_controller+0xfe03ea5c>
   47f24:	0007883a 	mov	r3,zero
   47f28:	00800044 	movi	r2,1
   47f2c:	003f5c06 	br	47ca0 <__alt_mem_epcs_flash_controller+0xfe03eca0>
   47f30:	813fa12e 	bgeu	r16,r4,47db8 <__alt_mem_epcs_flash_controller+0xfe03edb8>
   47f34:	10bfff84 	addi	r2,r2,-2
   47f38:	85e1883a 	add	r16,r16,r23
   47f3c:	003f9f06 	br	47dbc <__alt_mem_epcs_flash_controller+0xfe03edbc>
   47f40:	1c7f8a2e 	bgeu	r3,r17,47d6c <__alt_mem_epcs_flash_controller+0xfe03ed6c>
   47f44:	31bfff84 	addi	r6,r6,-2
   47f48:	1dc7883a 	add	r3,r3,r23
   47f4c:	003f8806 	br	47d70 <__alt_mem_epcs_flash_controller+0xfe03ed70>
   47f50:	1805883a 	mov	r2,r3
   47f54:	003fde06 	br	47ed0 <__alt_mem_epcs_flash_controller+0xfe03eed0>
   47f58:	1839883a 	mov	fp,r3
   47f5c:	003fc906 	br	47e84 <__alt_mem_epcs_flash_controller+0xfe03ee84>
   47f60:	b5bfff84 	addi	r22,r22,-2
   47f64:	2449883a 	add	r4,r4,r17
   47f68:	003f3406 	br	47c3c <__alt_mem_epcs_flash_controller+0xfe03ec3c>
   47f6c:	b5bfff84 	addi	r22,r22,-2
   47f70:	1445883a 	add	r2,r2,r17
   47f74:	003edb06 	br	47ae4 <__alt_mem_epcs_flash_controller+0xfe03eae4>

00047f78 <__umoddi3>:
   47f78:	defff404 	addi	sp,sp,-48
   47f7c:	df000a15 	stw	fp,40(sp)
   47f80:	dc400315 	stw	r17,12(sp)
   47f84:	dc000215 	stw	r16,8(sp)
   47f88:	dfc00b15 	stw	ra,44(sp)
   47f8c:	ddc00915 	stw	r23,36(sp)
   47f90:	dd800815 	stw	r22,32(sp)
   47f94:	dd400715 	stw	r21,28(sp)
   47f98:	dd000615 	stw	r20,24(sp)
   47f9c:	dcc00515 	stw	r19,20(sp)
   47fa0:	dc800415 	stw	r18,16(sp)
   47fa4:	2021883a 	mov	r16,r4
   47fa8:	2823883a 	mov	r17,r5
   47fac:	2839883a 	mov	fp,r5
   47fb0:	38003c1e 	bne	r7,zero,480a4 <__umoddi3+0x12c>
   47fb4:	3027883a 	mov	r19,r6
   47fb8:	2029883a 	mov	r20,r4
   47fbc:	2980512e 	bgeu	r5,r6,48104 <__umoddi3+0x18c>
   47fc0:	00bfffd4 	movui	r2,65535
   47fc4:	11809a36 	bltu	r2,r6,48230 <__umoddi3+0x2b8>
   47fc8:	01003fc4 	movi	r4,255
   47fcc:	2189803a 	cmpltu	r4,r4,r6
   47fd0:	200890fa 	slli	r4,r4,3
   47fd4:	3104d83a 	srl	r2,r6,r4
   47fd8:	00c00174 	movhi	r3,5
   47fdc:	18da7104 	addi	r3,r3,27076
   47fe0:	1885883a 	add	r2,r3,r2
   47fe4:	10c00003 	ldbu	r3,0(r2)
   47fe8:	00800804 	movi	r2,32
   47fec:	1909883a 	add	r4,r3,r4
   47ff0:	1125c83a 	sub	r18,r2,r4
   47ff4:	90000526 	beq	r18,zero,4800c <__umoddi3+0x94>
   47ff8:	8ca2983a 	sll	r17,r17,r18
   47ffc:	8108d83a 	srl	r4,r16,r4
   48000:	34a6983a 	sll	r19,r6,r18
   48004:	84a8983a 	sll	r20,r16,r18
   48008:	2478b03a 	or	fp,r4,r17
   4800c:	982ed43a 	srli	r23,r19,16
   48010:	e009883a 	mov	r4,fp
   48014:	9dbfffcc 	andi	r22,r19,65535
   48018:	b80b883a 	mov	r5,r23
   4801c:	0043a9c0 	call	43a9c <__umodsi3>
   48020:	e009883a 	mov	r4,fp
   48024:	b80b883a 	mov	r5,r23
   48028:	102b883a 	mov	r21,r2
   4802c:	0043a380 	call	43a38 <__udivsi3>
   48030:	a806943a 	slli	r3,r21,16
   48034:	a008d43a 	srli	r4,r20,16
   48038:	b085383a 	mul	r2,r22,r2
   4803c:	20c8b03a 	or	r4,r4,r3
   48040:	2080032e 	bgeu	r4,r2,48050 <__umoddi3+0xd8>
   48044:	24c9883a 	add	r4,r4,r19
   48048:	24c00136 	bltu	r4,r19,48050 <__umoddi3+0xd8>
   4804c:	20811036 	bltu	r4,r2,48490 <__umoddi3+0x518>
   48050:	20abc83a 	sub	r21,r4,r2
   48054:	b80b883a 	mov	r5,r23
   48058:	a809883a 	mov	r4,r21
   4805c:	0043a9c0 	call	43a9c <__umodsi3>
   48060:	1023883a 	mov	r17,r2
   48064:	b80b883a 	mov	r5,r23
   48068:	a809883a 	mov	r4,r21
   4806c:	0043a380 	call	43a38 <__udivsi3>
   48070:	8822943a 	slli	r17,r17,16
   48074:	b085383a 	mul	r2,r22,r2
   48078:	a0ffffcc 	andi	r3,r20,65535
   4807c:	1c46b03a 	or	r3,r3,r17
   48080:	1880042e 	bgeu	r3,r2,48094 <__umoddi3+0x11c>
   48084:	1cc7883a 	add	r3,r3,r19
   48088:	1cc00236 	bltu	r3,r19,48094 <__umoddi3+0x11c>
   4808c:	1880012e 	bgeu	r3,r2,48094 <__umoddi3+0x11c>
   48090:	1cc7883a 	add	r3,r3,r19
   48094:	1885c83a 	sub	r2,r3,r2
   48098:	1484d83a 	srl	r2,r2,r18
   4809c:	0007883a 	mov	r3,zero
   480a0:	00004f06 	br	481e0 <__umoddi3+0x268>
   480a4:	29c04c36 	bltu	r5,r7,481d8 <__umoddi3+0x260>
   480a8:	00bfffd4 	movui	r2,65535
   480ac:	11c0582e 	bgeu	r2,r7,48210 <__umoddi3+0x298>
   480b0:	00804034 	movhi	r2,256
   480b4:	10bfffc4 	addi	r2,r2,-1
   480b8:	11c0e736 	bltu	r2,r7,48458 <__umoddi3+0x4e0>
   480bc:	01000404 	movi	r4,16
   480c0:	3904d83a 	srl	r2,r7,r4
   480c4:	00c00174 	movhi	r3,5
   480c8:	18da7104 	addi	r3,r3,27076
   480cc:	1885883a 	add	r2,r3,r2
   480d0:	14c00003 	ldbu	r19,0(r2)
   480d4:	00c00804 	movi	r3,32
   480d8:	9927883a 	add	r19,r19,r4
   480dc:	1ce9c83a 	sub	r20,r3,r19
   480e0:	a000581e 	bne	r20,zero,48244 <__umoddi3+0x2cc>
   480e4:	3c400136 	bltu	r7,r17,480ec <__umoddi3+0x174>
   480e8:	8180eb36 	bltu	r16,r6,48498 <__umoddi3+0x520>
   480ec:	8185c83a 	sub	r2,r16,r6
   480f0:	89e3c83a 	sub	r17,r17,r7
   480f4:	8089803a 	cmpltu	r4,r16,r2
   480f8:	8939c83a 	sub	fp,r17,r4
   480fc:	e007883a 	mov	r3,fp
   48100:	00003706 	br	481e0 <__umoddi3+0x268>
   48104:	3000041e 	bne	r6,zero,48118 <__umoddi3+0x1a0>
   48108:	000b883a 	mov	r5,zero
   4810c:	01000044 	movi	r4,1
   48110:	0043a380 	call	43a38 <__udivsi3>
   48114:	1027883a 	mov	r19,r2
   48118:	00bfffd4 	movui	r2,65535
   4811c:	14c0402e 	bgeu	r2,r19,48220 <__umoddi3+0x2a8>
   48120:	00804034 	movhi	r2,256
   48124:	10bfffc4 	addi	r2,r2,-1
   48128:	14c0cd36 	bltu	r2,r19,48460 <__umoddi3+0x4e8>
   4812c:	00800404 	movi	r2,16
   48130:	9886d83a 	srl	r3,r19,r2
   48134:	01000174 	movhi	r4,5
   48138:	211a7104 	addi	r4,r4,27076
   4813c:	20c7883a 	add	r3,r4,r3
   48140:	18c00003 	ldbu	r3,0(r3)
   48144:	1887883a 	add	r3,r3,r2
   48148:	00800804 	movi	r2,32
   4814c:	10e5c83a 	sub	r18,r2,r3
   48150:	9000901e 	bne	r18,zero,48394 <__umoddi3+0x41c>
   48154:	982cd43a 	srli	r22,r19,16
   48158:	8ce3c83a 	sub	r17,r17,r19
   4815c:	9d7fffcc 	andi	r21,r19,65535
   48160:	b00b883a 	mov	r5,r22
   48164:	8809883a 	mov	r4,r17
   48168:	0043a9c0 	call	43a9c <__umodsi3>
   4816c:	8809883a 	mov	r4,r17
   48170:	b00b883a 	mov	r5,r22
   48174:	1021883a 	mov	r16,r2
   48178:	0043a380 	call	43a38 <__udivsi3>
   4817c:	8006943a 	slli	r3,r16,16
   48180:	a008d43a 	srli	r4,r20,16
   48184:	1545383a 	mul	r2,r2,r21
   48188:	20c8b03a 	or	r4,r4,r3
   4818c:	2080042e 	bgeu	r4,r2,481a0 <__umoddi3+0x228>
   48190:	24c9883a 	add	r4,r4,r19
   48194:	24c00236 	bltu	r4,r19,481a0 <__umoddi3+0x228>
   48198:	2080012e 	bgeu	r4,r2,481a0 <__umoddi3+0x228>
   4819c:	24c9883a 	add	r4,r4,r19
   481a0:	20a1c83a 	sub	r16,r4,r2
   481a4:	b00b883a 	mov	r5,r22
   481a8:	8009883a 	mov	r4,r16
   481ac:	0043a9c0 	call	43a9c <__umodsi3>
   481b0:	1023883a 	mov	r17,r2
   481b4:	b00b883a 	mov	r5,r22
   481b8:	8009883a 	mov	r4,r16
   481bc:	0043a380 	call	43a38 <__udivsi3>
   481c0:	8822943a 	slli	r17,r17,16
   481c4:	1545383a 	mul	r2,r2,r21
   481c8:	a53fffcc 	andi	r20,r20,65535
   481cc:	a446b03a 	or	r3,r20,r17
   481d0:	18bfb02e 	bgeu	r3,r2,48094 <__alt_mem_epcs_flash_controller+0xfe03f094>
   481d4:	003fab06 	br	48084 <__alt_mem_epcs_flash_controller+0xfe03f084>
   481d8:	2005883a 	mov	r2,r4
   481dc:	2807883a 	mov	r3,r5
   481e0:	dfc00b17 	ldw	ra,44(sp)
   481e4:	df000a17 	ldw	fp,40(sp)
   481e8:	ddc00917 	ldw	r23,36(sp)
   481ec:	dd800817 	ldw	r22,32(sp)
   481f0:	dd400717 	ldw	r21,28(sp)
   481f4:	dd000617 	ldw	r20,24(sp)
   481f8:	dcc00517 	ldw	r19,20(sp)
   481fc:	dc800417 	ldw	r18,16(sp)
   48200:	dc400317 	ldw	r17,12(sp)
   48204:	dc000217 	ldw	r16,8(sp)
   48208:	dec00c04 	addi	sp,sp,48
   4820c:	f800283a 	ret
   48210:	04c03fc4 	movi	r19,255
   48214:	99c9803a 	cmpltu	r4,r19,r7
   48218:	200890fa 	slli	r4,r4,3
   4821c:	003fa806 	br	480c0 <__alt_mem_epcs_flash_controller+0xfe03f0c0>
   48220:	00803fc4 	movi	r2,255
   48224:	14c5803a 	cmpltu	r2,r2,r19
   48228:	100490fa 	slli	r2,r2,3
   4822c:	003fc006 	br	48130 <__alt_mem_epcs_flash_controller+0xfe03f130>
   48230:	00804034 	movhi	r2,256
   48234:	10bfffc4 	addi	r2,r2,-1
   48238:	11808b36 	bltu	r2,r6,48468 <__umoddi3+0x4f0>
   4823c:	01000404 	movi	r4,16
   48240:	003f6406 	br	47fd4 <__alt_mem_epcs_flash_controller+0xfe03efd4>
   48244:	34c4d83a 	srl	r2,r6,r19
   48248:	3d0e983a 	sll	r7,r7,r20
   4824c:	8cf8d83a 	srl	fp,r17,r19
   48250:	8d10983a 	sll	r8,r17,r20
   48254:	38aab03a 	or	r21,r7,r2
   48258:	a82cd43a 	srli	r22,r21,16
   4825c:	84e2d83a 	srl	r17,r16,r19
   48260:	e009883a 	mov	r4,fp
   48264:	b00b883a 	mov	r5,r22
   48268:	8a22b03a 	or	r17,r17,r8
   4826c:	3524983a 	sll	r18,r6,r20
   48270:	0043a9c0 	call	43a9c <__umodsi3>
   48274:	e009883a 	mov	r4,fp
   48278:	b00b883a 	mov	r5,r22
   4827c:	102f883a 	mov	r23,r2
   48280:	0043a380 	call	43a38 <__udivsi3>
   48284:	100d883a 	mov	r6,r2
   48288:	b808943a 	slli	r4,r23,16
   4828c:	aa3fffcc 	andi	r8,r21,65535
   48290:	8804d43a 	srli	r2,r17,16
   48294:	41af383a 	mul	r23,r8,r6
   48298:	8520983a 	sll	r16,r16,r20
   4829c:	1104b03a 	or	r2,r2,r4
   482a0:	15c0042e 	bgeu	r2,r23,482b4 <__umoddi3+0x33c>
   482a4:	1545883a 	add	r2,r2,r21
   482a8:	30ffffc4 	addi	r3,r6,-1
   482ac:	1540742e 	bgeu	r2,r21,48480 <__umoddi3+0x508>
   482b0:	180d883a 	mov	r6,r3
   482b4:	15efc83a 	sub	r23,r2,r23
   482b8:	b00b883a 	mov	r5,r22
   482bc:	b809883a 	mov	r4,r23
   482c0:	d9800115 	stw	r6,4(sp)
   482c4:	da000015 	stw	r8,0(sp)
   482c8:	0043a9c0 	call	43a9c <__umodsi3>
   482cc:	b00b883a 	mov	r5,r22
   482d0:	b809883a 	mov	r4,r23
   482d4:	1039883a 	mov	fp,r2
   482d8:	0043a380 	call	43a38 <__udivsi3>
   482dc:	da000017 	ldw	r8,0(sp)
   482e0:	e038943a 	slli	fp,fp,16
   482e4:	100b883a 	mov	r5,r2
   482e8:	4089383a 	mul	r4,r8,r2
   482ec:	8a3fffcc 	andi	r8,r17,65535
   482f0:	4710b03a 	or	r8,r8,fp
   482f4:	d9800117 	ldw	r6,4(sp)
   482f8:	4100042e 	bgeu	r8,r4,4830c <__umoddi3+0x394>
   482fc:	4551883a 	add	r8,r8,r21
   48300:	10bfffc4 	addi	r2,r2,-1
   48304:	45405a2e 	bgeu	r8,r21,48470 <__umoddi3+0x4f8>
   48308:	100b883a 	mov	r5,r2
   4830c:	300c943a 	slli	r6,r6,16
   48310:	91ffffcc 	andi	r7,r18,65535
   48314:	9004d43a 	srli	r2,r18,16
   48318:	314cb03a 	or	r6,r6,r5
   4831c:	317fffcc 	andi	r5,r6,65535
   48320:	300cd43a 	srli	r6,r6,16
   48324:	29d3383a 	mul	r9,r5,r7
   48328:	288b383a 	mul	r5,r5,r2
   4832c:	31cf383a 	mul	r7,r6,r7
   48330:	4806d43a 	srli	r3,r9,16
   48334:	4111c83a 	sub	r8,r8,r4
   48338:	29cb883a 	add	r5,r5,r7
   4833c:	194b883a 	add	r5,r3,r5
   48340:	3085383a 	mul	r2,r6,r2
   48344:	29c0022e 	bgeu	r5,r7,48350 <__umoddi3+0x3d8>
   48348:	00c00074 	movhi	r3,1
   4834c:	10c5883a 	add	r2,r2,r3
   48350:	2808d43a 	srli	r4,r5,16
   48354:	280a943a 	slli	r5,r5,16
   48358:	4a7fffcc 	andi	r9,r9,65535
   4835c:	2085883a 	add	r2,r4,r2
   48360:	2a4b883a 	add	r5,r5,r9
   48364:	40803636 	bltu	r8,r2,48440 <__umoddi3+0x4c8>
   48368:	40804d26 	beq	r8,r2,484a0 <__umoddi3+0x528>
   4836c:	4089c83a 	sub	r4,r8,r2
   48370:	280f883a 	mov	r7,r5
   48374:	81cfc83a 	sub	r7,r16,r7
   48378:	81c7803a 	cmpltu	r3,r16,r7
   4837c:	20c7c83a 	sub	r3,r4,r3
   48380:	1cc4983a 	sll	r2,r3,r19
   48384:	3d0ed83a 	srl	r7,r7,r20
   48388:	1d06d83a 	srl	r3,r3,r20
   4838c:	11c4b03a 	or	r2,r2,r7
   48390:	003f9306 	br	481e0 <__alt_mem_epcs_flash_controller+0xfe03f1e0>
   48394:	9ca6983a 	sll	r19,r19,r18
   48398:	88e8d83a 	srl	r20,r17,r3
   4839c:	80c4d83a 	srl	r2,r16,r3
   483a0:	982cd43a 	srli	r22,r19,16
   483a4:	8ca2983a 	sll	r17,r17,r18
   483a8:	a009883a 	mov	r4,r20
   483ac:	b00b883a 	mov	r5,r22
   483b0:	1478b03a 	or	fp,r2,r17
   483b4:	0043a9c0 	call	43a9c <__umodsi3>
   483b8:	a009883a 	mov	r4,r20
   483bc:	b00b883a 	mov	r5,r22
   483c0:	1023883a 	mov	r17,r2
   483c4:	0043a380 	call	43a38 <__udivsi3>
   483c8:	9d7fffcc 	andi	r21,r19,65535
   483cc:	880a943a 	slli	r5,r17,16
   483d0:	e008d43a 	srli	r4,fp,16
   483d4:	a885383a 	mul	r2,r21,r2
   483d8:	84a8983a 	sll	r20,r16,r18
   483dc:	2148b03a 	or	r4,r4,r5
   483e0:	2080042e 	bgeu	r4,r2,483f4 <__umoddi3+0x47c>
   483e4:	24c9883a 	add	r4,r4,r19
   483e8:	24c00236 	bltu	r4,r19,483f4 <__umoddi3+0x47c>
   483ec:	2080012e 	bgeu	r4,r2,483f4 <__umoddi3+0x47c>
   483f0:	24c9883a 	add	r4,r4,r19
   483f4:	20a3c83a 	sub	r17,r4,r2
   483f8:	b00b883a 	mov	r5,r22
   483fc:	8809883a 	mov	r4,r17
   48400:	0043a9c0 	call	43a9c <__umodsi3>
   48404:	102f883a 	mov	r23,r2
   48408:	8809883a 	mov	r4,r17
   4840c:	b00b883a 	mov	r5,r22
   48410:	0043a380 	call	43a38 <__udivsi3>
   48414:	b82e943a 	slli	r23,r23,16
   48418:	a885383a 	mul	r2,r21,r2
   4841c:	e13fffcc 	andi	r4,fp,65535
   48420:	25c8b03a 	or	r4,r4,r23
   48424:	2080042e 	bgeu	r4,r2,48438 <__umoddi3+0x4c0>
   48428:	24c9883a 	add	r4,r4,r19
   4842c:	24c00236 	bltu	r4,r19,48438 <__umoddi3+0x4c0>
   48430:	2080012e 	bgeu	r4,r2,48438 <__umoddi3+0x4c0>
   48434:	24c9883a 	add	r4,r4,r19
   48438:	20a3c83a 	sub	r17,r4,r2
   4843c:	003f4806 	br	48160 <__alt_mem_epcs_flash_controller+0xfe03f160>
   48440:	2c8fc83a 	sub	r7,r5,r18
   48444:	1545c83a 	sub	r2,r2,r21
   48448:	29cb803a 	cmpltu	r5,r5,r7
   4844c:	1145c83a 	sub	r2,r2,r5
   48450:	4089c83a 	sub	r4,r8,r2
   48454:	003fc706 	br	48374 <__alt_mem_epcs_flash_controller+0xfe03f374>
   48458:	01000604 	movi	r4,24
   4845c:	003f1806 	br	480c0 <__alt_mem_epcs_flash_controller+0xfe03f0c0>
   48460:	00800604 	movi	r2,24
   48464:	003f3206 	br	48130 <__alt_mem_epcs_flash_controller+0xfe03f130>
   48468:	01000604 	movi	r4,24
   4846c:	003ed906 	br	47fd4 <__alt_mem_epcs_flash_controller+0xfe03efd4>
   48470:	413fa52e 	bgeu	r8,r4,48308 <__alt_mem_epcs_flash_controller+0xfe03f308>
   48474:	297fff84 	addi	r5,r5,-2
   48478:	4551883a 	add	r8,r8,r21
   4847c:	003fa306 	br	4830c <__alt_mem_epcs_flash_controller+0xfe03f30c>
   48480:	15ff8b2e 	bgeu	r2,r23,482b0 <__alt_mem_epcs_flash_controller+0xfe03f2b0>
   48484:	31bfff84 	addi	r6,r6,-2
   48488:	1545883a 	add	r2,r2,r21
   4848c:	003f8906 	br	482b4 <__alt_mem_epcs_flash_controller+0xfe03f2b4>
   48490:	24c9883a 	add	r4,r4,r19
   48494:	003eee06 	br	48050 <__alt_mem_epcs_flash_controller+0xfe03f050>
   48498:	8005883a 	mov	r2,r16
   4849c:	003f1706 	br	480fc <__alt_mem_epcs_flash_controller+0xfe03f0fc>
   484a0:	817fe736 	bltu	r16,r5,48440 <__alt_mem_epcs_flash_controller+0xfe03f440>
   484a4:	280f883a 	mov	r7,r5
   484a8:	0009883a 	mov	r4,zero
   484ac:	003fb106 	br	48374 <__alt_mem_epcs_flash_controller+0xfe03f374>

000484b0 <__env_lock>:
 * this requires that environment variables are never manipulated by an interrupt 
 * service routine.
 */

void __env_lock ( struct _reent *_r )
{
   484b0:	defffe04 	addi	sp,sp,-8
   484b4:	df000115 	stw	fp,4(sp)
   484b8:	df000104 	addi	fp,sp,4
   484bc:	e13fff15 	stw	r4,-4(fp)
}
   484c0:	0001883a 	nop
   484c4:	e037883a 	mov	sp,fp
   484c8:	df000017 	ldw	fp,0(sp)
   484cc:	dec00104 	addi	sp,sp,4
   484d0:	f800283a 	ret

000484d4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   484d4:	defffe04 	addi	sp,sp,-8
   484d8:	df000115 	stw	fp,4(sp)
   484dc:	df000104 	addi	fp,sp,4
   484e0:	e13fff15 	stw	r4,-4(fp)
}
   484e4:	0001883a 	nop
   484e8:	e037883a 	mov	sp,fp
   484ec:	df000017 	ldw	fp,0(sp)
   484f0:	dec00104 	addi	sp,sp,4
   484f4:	f800283a 	ret

000484f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   484f8:	defffd04 	addi	sp,sp,-12
   484fc:	df000215 	stw	fp,8(sp)
   48500:	df000204 	addi	fp,sp,8
   48504:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   48508:	0001883a 	nop
   4850c:	e0bfff17 	ldw	r2,-4(fp)
   48510:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   48514:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   48518:	10000226 	beq	r2,zero,48524 <_exit+0x2c>
    ALT_SIM_FAIL();
   4851c:	002af070 	cmpltui	zero,zero,43969
   48520:	00000106 	br	48528 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   48524:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   48528:	003fff06 	br	48528 <__alt_mem_epcs_flash_controller+0xfe03f528>

0004852c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   4852c:	deffff04 	addi	sp,sp,-4
   48530:	df000015 	stw	fp,0(sp)
   48534:	d839883a 	mov	fp,sp
  return 0;
   48538:	0005883a 	mov	r2,zero
}
   4853c:	e037883a 	mov	sp,fp
   48540:	df000017 	ldw	fp,0(sp)
   48544:	dec00104 	addi	sp,sp,4
   48548:	f800283a 	ret

0004854c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   4854c:	defff404 	addi	sp,sp,-48
   48550:	dfc00b15 	stw	ra,44(sp)
   48554:	df000a15 	stw	fp,40(sp)
   48558:	dd000915 	stw	r20,36(sp)
   4855c:	dcc00815 	stw	r19,32(sp)
   48560:	dc800715 	stw	r18,28(sp)
   48564:	dc400615 	stw	r17,24(sp)
   48568:	dc000515 	stw	r16,20(sp)
   4856c:	df000a04 	addi	fp,sp,40
   48570:	e13ff915 	stw	r4,-28(fp)
   48574:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   48578:	e0bffa17 	ldw	r2,-24(fp)
   4857c:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   48580:	d0a55717 	ldw	r2,-27300(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   48584:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   48588:	d0a55617 	ldw	r2,-27304(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   4858c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   48590:	e0bff817 	ldw	r2,-32(fp)
   48594:	10005f26 	beq	r2,zero,48714 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   48598:	d0a55117 	ldw	r2,-27324(gp)
   4859c:	1029883a 	mov	r20,r2
   485a0:	e17ff817 	ldw	r5,-32(fp)
   485a4:	e13ff717 	ldw	r4,-36(fp)
   485a8:	0043a380 	call	43a38 <__udivsi3>
   485ac:	a085883a 	add	r2,r20,r2
   485b0:	1007883a 	mov	r3,r2
   485b4:	e0bff917 	ldw	r2,-28(fp)
   485b8:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   485bc:	d0a55217 	ldw	r2,-27320(gp)
   485c0:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   485c4:	e0bff717 	ldw	r2,-36(fp)
   485c8:	1021883a 	mov	r16,r2
   485cc:	0023883a 	mov	r17,zero
   485d0:	e17ff817 	ldw	r5,-32(fp)
   485d4:	010003f4 	movhi	r4,15
   485d8:	21109004 	addi	r4,r4,16960
   485dc:	0043a380 	call	43a38 <__udivsi3>
   485e0:	1025883a 	mov	r18,r2
   485e4:	0027883a 	mov	r19,zero
   485e8:	900d883a 	mov	r6,r18
   485ec:	980f883a 	mov	r7,r19
   485f0:	8009883a 	mov	r4,r16
   485f4:	880b883a 	mov	r5,r17
   485f8:	00438e00 	call	438e0 <__muldi3>
   485fc:	1009883a 	mov	r4,r2
   48600:	180b883a 	mov	r5,r3
   48604:	2005883a 	mov	r2,r4
   48608:	2807883a 	mov	r3,r5
   4860c:	018003f4 	movhi	r6,15
   48610:	31909004 	addi	r6,r6,16960
   48614:	000f883a 	mov	r7,zero
   48618:	1009883a 	mov	r4,r2
   4861c:	180b883a 	mov	r5,r3
   48620:	0047f780 	call	47f78 <__umoddi3>
   48624:	1009883a 	mov	r4,r2
   48628:	180b883a 	mov	r5,r3
   4862c:	2005883a 	mov	r2,r4
   48630:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   48634:	a085883a 	add	r2,r20,r2
   48638:	1007883a 	mov	r3,r2
   4863c:	e0bff917 	ldw	r2,-28(fp)
   48640:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   48644:	00001406 	br	48698 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   48648:	e0bff917 	ldw	r2,-28(fp)
   4864c:	10800017 	ldw	r2,0(r2)
   48650:	00800516 	blt	zero,r2,48668 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   48654:	e0bff917 	ldw	r2,-28(fp)
   48658:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   4865c:	e0bff917 	ldw	r2,-28(fp)
   48660:	10000115 	stw	zero,4(r2)
          break;
   48664:	00000f06 	br	486a4 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   48668:	e0bff917 	ldw	r2,-28(fp)
   4866c:	10800017 	ldw	r2,0(r2)
   48670:	10ffffc4 	addi	r3,r2,-1
   48674:	e0bff917 	ldw	r2,-28(fp)
   48678:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   4867c:	e0bff917 	ldw	r2,-28(fp)
   48680:	10c00117 	ldw	r3,4(r2)
   48684:	008003f4 	movhi	r2,15
   48688:	10909004 	addi	r2,r2,16960
   4868c:	1887883a 	add	r3,r3,r2
   48690:	e0bff917 	ldw	r2,-28(fp)
   48694:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   48698:	e0bff917 	ldw	r2,-28(fp)
   4869c:	10800117 	ldw	r2,4(r2)
   486a0:	103fe916 	blt	r2,zero,48648 <__alt_mem_epcs_flash_controller+0xfe03f648>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   486a4:	00000c06 	br	486d8 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   486a8:	e0bff917 	ldw	r2,-28(fp)
   486ac:	10800017 	ldw	r2,0(r2)
   486b0:	10c00044 	addi	r3,r2,1
   486b4:	e0bff917 	ldw	r2,-28(fp)
   486b8:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   486bc:	e0bff917 	ldw	r2,-28(fp)
   486c0:	10c00117 	ldw	r3,4(r2)
   486c4:	00bffc74 	movhi	r2,65521
   486c8:	10af7004 	addi	r2,r2,-16960
   486cc:	1887883a 	add	r3,r3,r2
   486d0:	e0bff917 	ldw	r2,-28(fp)
   486d4:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   486d8:	e0bff917 	ldw	r2,-28(fp)
   486dc:	10c00117 	ldw	r3,4(r2)
   486e0:	008003f4 	movhi	r2,15
   486e4:	10908fc4 	addi	r2,r2,16959
   486e8:	10ffef16 	blt	r2,r3,486a8 <__alt_mem_epcs_flash_controller+0xfe03f6a8>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   486ec:	e0bff617 	ldw	r2,-40(fp)
   486f0:	10000626 	beq	r2,zero,4870c <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   486f4:	d0e54f17 	ldw	r3,-27332(gp)
   486f8:	e0bff617 	ldw	r2,-40(fp)
   486fc:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   48700:	d0e55017 	ldw	r3,-27328(gp)
   48704:	e0bff617 	ldw	r2,-40(fp)
   48708:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   4870c:	0005883a 	mov	r2,zero
   48710:	00000106 	br	48718 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   48714:	00bfde84 	movi	r2,-134
}
   48718:	e6fffb04 	addi	sp,fp,-20
   4871c:	dfc00617 	ldw	ra,24(sp)
   48720:	df000517 	ldw	fp,20(sp)
   48724:	dd000417 	ldw	r20,16(sp)
   48728:	dcc00317 	ldw	r19,12(sp)
   4872c:	dc800217 	ldw	r18,8(sp)
   48730:	dc400117 	ldw	r17,4(sp)
   48734:	dc000017 	ldw	r16,0(sp)
   48738:	dec00704 	addi	sp,sp,28
   4873c:	f800283a 	ret

00048740 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   48740:	defffe04 	addi	sp,sp,-8
   48744:	dfc00115 	stw	ra,4(sp)
   48748:	df000015 	stw	fp,0(sp)
   4874c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   48750:	d0a02017 	ldw	r2,-32640(gp)
   48754:	10000326 	beq	r2,zero,48764 <alt_get_errno+0x24>
   48758:	d0a02017 	ldw	r2,-32640(gp)
   4875c:	103ee83a 	callr	r2
   48760:	00000106 	br	48768 <alt_get_errno+0x28>
   48764:	d0a54e04 	addi	r2,gp,-27336
}
   48768:	e037883a 	mov	sp,fp
   4876c:	dfc00117 	ldw	ra,4(sp)
   48770:	df000017 	ldw	fp,0(sp)
   48774:	dec00204 	addi	sp,sp,8
   48778:	f800283a 	ret

0004877c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   4877c:	defffb04 	addi	sp,sp,-20
   48780:	dfc00415 	stw	ra,16(sp)
   48784:	df000315 	stw	fp,12(sp)
   48788:	df000304 	addi	fp,sp,12
   4878c:	e13ffe15 	stw	r4,-8(fp)
   48790:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   48794:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   48798:	e0bffe17 	ldw	r2,-8(fp)
   4879c:	00802f16 	blt	zero,r2,4885c <kill+0xe0>
  {
    switch (sig)
   487a0:	e0bfff17 	ldw	r2,-4(fp)
   487a4:	10800828 	cmpgeui	r2,r2,32
   487a8:	1000291e 	bne	r2,zero,48850 <kill+0xd4>
   487ac:	e0bfff17 	ldw	r2,-4(fp)
   487b0:	100690ba 	slli	r3,r2,2
   487b4:	00800174 	movhi	r2,5
   487b8:	10a1f204 	addi	r2,r2,-30776
   487bc:	1885883a 	add	r2,r3,r2
   487c0:	10800017 	ldw	r2,0(r2)
   487c4:	1000683a 	jmp	r2
   487c8:	00048870 	cmpltui	zero,zero,4641
   487cc:	00048850 	cmplti	zero,zero,4641
   487d0:	00048850 	cmplti	zero,zero,4641
   487d4:	00048848 	cmpgei	zero,zero,4641
   487d8:	00048848 	cmpgei	zero,zero,4641
   487dc:	00048848 	cmpgei	zero,zero,4641
   487e0:	00048848 	cmpgei	zero,zero,4641
   487e4:	00048850 	cmplti	zero,zero,4641
   487e8:	00048848 	cmpgei	zero,zero,4641
   487ec:	00048848 	cmpgei	zero,zero,4641
   487f0:	00048848 	cmpgei	zero,zero,4641
   487f4:	00048848 	cmpgei	zero,zero,4641
   487f8:	00048848 	cmpgei	zero,zero,4641
   487fc:	00048848 	cmpgei	zero,zero,4641
   48800:	00048848 	cmpgei	zero,zero,4641
   48804:	00048848 	cmpgei	zero,zero,4641
   48808:	00048870 	cmpltui	zero,zero,4641
   4880c:	00048850 	cmplti	zero,zero,4641
   48810:	00048850 	cmplti	zero,zero,4641
   48814:	00048850 	cmplti	zero,zero,4641
   48818:	00048870 	cmpltui	zero,zero,4641
   4881c:	00048850 	cmplti	zero,zero,4641
   48820:	00048850 	cmplti	zero,zero,4641
   48824:	00048848 	cmpgei	zero,zero,4641
   48828:	00048848 	cmpgei	zero,zero,4641
   4882c:	00048848 	cmpgei	zero,zero,4641
   48830:	00048848 	cmpgei	zero,zero,4641
   48834:	00048848 	cmpgei	zero,zero,4641
   48838:	00048850 	cmplti	zero,zero,4641
   4883c:	00048850 	cmplti	zero,zero,4641
   48840:	00048848 	cmpgei	zero,zero,4641
   48844:	00048848 	cmpgei	zero,zero,4641
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   48848:	0009883a 	mov	r4,zero
   4884c:	00484f80 	call	484f8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   48850:	00800584 	movi	r2,22
   48854:	e0bffd15 	stw	r2,-12(fp)
   48858:	00000606 	br	48874 <kill+0xf8>
    }
  }

  else if (pid > 0)
   4885c:	e0bffe17 	ldw	r2,-8(fp)
   48860:	0080040e 	bge	zero,r2,48874 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   48864:	008000c4 	movi	r2,3
   48868:	e0bffd15 	stw	r2,-12(fp)
   4886c:	00000106 	br	48874 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   48870:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   48874:	e0bffd17 	ldw	r2,-12(fp)
   48878:	10000626 	beq	r2,zero,48894 <kill+0x118>
  {
    ALT_ERRNO = status;
   4887c:	00487400 	call	48740 <alt_get_errno>
   48880:	1007883a 	mov	r3,r2
   48884:	e0bffd17 	ldw	r2,-12(fp)
   48888:	18800015 	stw	r2,0(r3)
    return -1;
   4888c:	00bfffc4 	movi	r2,-1
   48890:	00000106 	br	48898 <kill+0x11c>
  }

  return 0;
   48894:	0005883a 	mov	r2,zero
}
   48898:	e037883a 	mov	sp,fp
   4889c:	dfc00117 	ldw	ra,4(sp)
   488a0:	df000017 	ldw	fp,0(sp)
   488a4:	dec00204 	addi	sp,sp,8
   488a8:	f800283a 	ret

000488ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   488ac:	defffc04 	addi	sp,sp,-16
   488b0:	df000315 	stw	fp,12(sp)
   488b4:	df000304 	addi	fp,sp,12
   488b8:	e13ffd15 	stw	r4,-12(fp)
   488bc:	e17ffe15 	stw	r5,-8(fp)
   488c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   488c4:	e0fffe17 	ldw	r3,-8(fp)
   488c8:	e0bffd17 	ldw	r2,-12(fp)
   488cc:	18800c26 	beq	r3,r2,48900 <alt_load_section+0x54>
  {
    while( to != end )
   488d0:	00000806 	br	488f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   488d4:	e0bffe17 	ldw	r2,-8(fp)
   488d8:	10c00104 	addi	r3,r2,4
   488dc:	e0fffe15 	stw	r3,-8(fp)
   488e0:	e0fffd17 	ldw	r3,-12(fp)
   488e4:	19000104 	addi	r4,r3,4
   488e8:	e13ffd15 	stw	r4,-12(fp)
   488ec:	18c00017 	ldw	r3,0(r3)
   488f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   488f4:	e0fffe17 	ldw	r3,-8(fp)
   488f8:	e0bfff17 	ldw	r2,-4(fp)
   488fc:	18bff51e 	bne	r3,r2,488d4 <__alt_mem_epcs_flash_controller+0xfe03f8d4>
    {
      *to++ = *from++;
    }
  }
}
   48900:	0001883a 	nop
   48904:	e037883a 	mov	sp,fp
   48908:	df000017 	ldw	fp,0(sp)
   4890c:	dec00104 	addi	sp,sp,4
   48910:	f800283a 	ret

00048914 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   48914:	defffe04 	addi	sp,sp,-8
   48918:	dfc00115 	stw	ra,4(sp)
   4891c:	df000015 	stw	fp,0(sp)
   48920:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   48924:	018001b4 	movhi	r6,6
   48928:	31a09604 	addi	r6,r6,-32168
   4892c:	01400174 	movhi	r5,5
   48930:	295b7404 	addi	r5,r5,28112
   48934:	010001b4 	movhi	r4,6
   48938:	21209604 	addi	r4,r4,-32168
   4893c:	00488ac0 	call	488ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   48940:	01800034 	movhi	r6,0
   48944:	31809104 	addi	r6,r6,580
   48948:	01400034 	movhi	r5,0
   4894c:	29400804 	addi	r5,r5,32
   48950:	01000034 	movhi	r4,0
   48954:	21000804 	addi	r4,r4,32
   48958:	00488ac0 	call	488ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4895c:	01800174 	movhi	r6,5
   48960:	319b7404 	addi	r6,r6,28112
   48964:	01400174 	movhi	r5,5
   48968:	296f3204 	addi	r5,r5,-17208
   4896c:	01000174 	movhi	r4,5
   48970:	212f3204 	addi	r4,r4,-17208
   48974:	00488ac0 	call	488ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   48978:	004ac380 	call	4ac38 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4897c:	004af080 	call	4af08 <alt_icache_flush_all>
}
   48980:	0001883a 	nop
   48984:	e037883a 	mov	sp,fp
   48988:	dfc00117 	ldw	ra,4(sp)
   4898c:	df000017 	ldw	fp,0(sp)
   48990:	dec00204 	addi	sp,sp,8
   48994:	f800283a 	ret

00048998 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   48998:	defffd04 	addi	sp,sp,-12
   4899c:	dfc00215 	stw	ra,8(sp)
   489a0:	df000115 	stw	fp,4(sp)
   489a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   489a8:	0009883a 	mov	r4,zero
   489ac:	0048dd00 	call	48dd0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   489b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   489b4:	0048e080 	call	48e08 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   489b8:	01800174 	movhi	r6,5
   489bc:	319b6204 	addi	r6,r6,28040
   489c0:	01400174 	movhi	r5,5
   489c4:	295b6204 	addi	r5,r5,28040
   489c8:	01000174 	movhi	r4,5
   489cc:	211b6204 	addi	r4,r4,28040
   489d0:	004b2a00 	call	4b2a0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   489d4:	004ad8c0 	call	4ad8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   489d8:	01000174 	movhi	r4,5
   489dc:	212b7b04 	addi	r4,r4,-21012
   489e0:	004bb5c0 	call	4bb5c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   489e4:	d0a55317 	ldw	r2,-27316(gp)
   489e8:	d0e55417 	ldw	r3,-27312(gp)
   489ec:	d1255517 	ldw	r4,-27308(gp)
   489f0:	200d883a 	mov	r6,r4
   489f4:	180b883a 	mov	r5,r3
   489f8:	1009883a 	mov	r4,r2
   489fc:	00063740 	call	6374 <main>
   48a00:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   48a04:	01000044 	movi	r4,1
   48a08:	004ab680 	call	4ab68 <close>
  exit (result);
   48a0c:	e13fff17 	ldw	r4,-4(fp)
   48a10:	004607c0 	call	4607c <exit>

00048a14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   48a14:	defff904 	addi	sp,sp,-28
   48a18:	df000615 	stw	fp,24(sp)
   48a1c:	df000604 	addi	fp,sp,24
   48a20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48a24:	0005303a 	rdctl	r2,status
   48a28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48a2c:	e0fffe17 	ldw	r3,-8(fp)
   48a30:	00bfff84 	movi	r2,-2
   48a34:	1884703a 	and	r2,r3,r2
   48a38:	1001703a 	wrctl	status,r2
  
  return context;
   48a3c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   48a40:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   48a44:	d0a01817 	ldw	r2,-32672(gp)
   48a48:	10c000c4 	addi	r3,r2,3
   48a4c:	00bfff04 	movi	r2,-4
   48a50:	1884703a 	and	r2,r3,r2
   48a54:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   48a58:	d0e01817 	ldw	r3,-32672(gp)
   48a5c:	e0bfff17 	ldw	r2,-4(fp)
   48a60:	1887883a 	add	r3,r3,r2
   48a64:	00808034 	movhi	r2,512
   48a68:	10800004 	addi	r2,r2,0
   48a6c:	10c0062e 	bgeu	r2,r3,48a88 <sbrk+0x74>
   48a70:	e0bffb17 	ldw	r2,-20(fp)
   48a74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48a78:	e0bffa17 	ldw	r2,-24(fp)
   48a7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   48a80:	00bfffc4 	movi	r2,-1
   48a84:	00000b06 	br	48ab4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   48a88:	d0a01817 	ldw	r2,-32672(gp)
   48a8c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   48a90:	d0e01817 	ldw	r3,-32672(gp)
   48a94:	e0bfff17 	ldw	r2,-4(fp)
   48a98:	1885883a 	add	r2,r3,r2
   48a9c:	d0a01815 	stw	r2,-32672(gp)
   48aa0:	e0bffb17 	ldw	r2,-20(fp)
   48aa4:	e0bffc15 	stw	r2,-16(fp)
   48aa8:	e0bffc17 	ldw	r2,-16(fp)
   48aac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   48ab0:	e0bffd17 	ldw	r2,-12(fp)
} 
   48ab4:	e037883a 	mov	sp,fp
   48ab8:	df000017 	ldw	fp,0(sp)
   48abc:	dec00104 	addi	sp,sp,4
   48ac0:	f800283a 	ret

00048ac4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   48ac4:	defffa04 	addi	sp,sp,-24
   48ac8:	df000515 	stw	fp,20(sp)
   48acc:	df000504 	addi	fp,sp,20
   48ad0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48ad4:	0005303a 	rdctl	r2,status
   48ad8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48adc:	e0fffc17 	ldw	r3,-16(fp)
   48ae0:	00bfff84 	movi	r2,-2
   48ae4:	1884703a 	and	r2,r3,r2
   48ae8:	1001703a 	wrctl	status,r2
  
  return context;
   48aec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   48af0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   48af4:	e0bfff17 	ldw	r2,-4(fp)
   48af8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   48afc:	e0bffd17 	ldw	r2,-12(fp)
   48b00:	10800017 	ldw	r2,0(r2)
   48b04:	e0fffd17 	ldw	r3,-12(fp)
   48b08:	18c00117 	ldw	r3,4(r3)
   48b0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   48b10:	e0bffd17 	ldw	r2,-12(fp)
   48b14:	10800117 	ldw	r2,4(r2)
   48b18:	e0fffd17 	ldw	r3,-12(fp)
   48b1c:	18c00017 	ldw	r3,0(r3)
   48b20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   48b24:	e0bffd17 	ldw	r2,-12(fp)
   48b28:	e0fffd17 	ldw	r3,-12(fp)
   48b2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   48b30:	e0bffd17 	ldw	r2,-12(fp)
   48b34:	e0fffd17 	ldw	r3,-12(fp)
   48b38:	10c00015 	stw	r3,0(r2)
   48b3c:	e0bffb17 	ldw	r2,-20(fp)
   48b40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48b44:	e0bffe17 	ldw	r2,-8(fp)
   48b48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   48b4c:	0001883a 	nop
   48b50:	e037883a 	mov	sp,fp
   48b54:	df000017 	ldw	fp,0(sp)
   48b58:	dec00104 	addi	sp,sp,4
   48b5c:	f800283a 	ret

00048b60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   48b60:	defffb04 	addi	sp,sp,-20
   48b64:	dfc00415 	stw	ra,16(sp)
   48b68:	df000315 	stw	fp,12(sp)
   48b6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   48b70:	d0a01917 	ldw	r2,-32668(gp)
   48b74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   48b78:	d0a55717 	ldw	r2,-27300(gp)
   48b7c:	10800044 	addi	r2,r2,1
   48b80:	d0a55715 	stw	r2,-27300(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   48b84:	00002e06 	br	48c40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   48b88:	e0bffd17 	ldw	r2,-12(fp)
   48b8c:	10800017 	ldw	r2,0(r2)
   48b90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   48b94:	e0bffd17 	ldw	r2,-12(fp)
   48b98:	10800403 	ldbu	r2,16(r2)
   48b9c:	10803fcc 	andi	r2,r2,255
   48ba0:	10000426 	beq	r2,zero,48bb4 <alt_tick+0x54>
   48ba4:	d0a55717 	ldw	r2,-27300(gp)
   48ba8:	1000021e 	bne	r2,zero,48bb4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   48bac:	e0bffd17 	ldw	r2,-12(fp)
   48bb0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   48bb4:	e0bffd17 	ldw	r2,-12(fp)
   48bb8:	10800217 	ldw	r2,8(r2)
   48bbc:	d0e55717 	ldw	r3,-27300(gp)
   48bc0:	18801d36 	bltu	r3,r2,48c38 <alt_tick+0xd8>
   48bc4:	e0bffd17 	ldw	r2,-12(fp)
   48bc8:	10800403 	ldbu	r2,16(r2)
   48bcc:	10803fcc 	andi	r2,r2,255
   48bd0:	1000191e 	bne	r2,zero,48c38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   48bd4:	e0bffd17 	ldw	r2,-12(fp)
   48bd8:	10800317 	ldw	r2,12(r2)
   48bdc:	e0fffd17 	ldw	r3,-12(fp)
   48be0:	18c00517 	ldw	r3,20(r3)
   48be4:	1809883a 	mov	r4,r3
   48be8:	103ee83a 	callr	r2
   48bec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   48bf0:	e0bfff17 	ldw	r2,-4(fp)
   48bf4:	1000031e 	bne	r2,zero,48c04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   48bf8:	e13ffd17 	ldw	r4,-12(fp)
   48bfc:	0048ac40 	call	48ac4 <alt_alarm_stop>
   48c00:	00000d06 	br	48c38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   48c04:	e0bffd17 	ldw	r2,-12(fp)
   48c08:	10c00217 	ldw	r3,8(r2)
   48c0c:	e0bfff17 	ldw	r2,-4(fp)
   48c10:	1887883a 	add	r3,r3,r2
   48c14:	e0bffd17 	ldw	r2,-12(fp)
   48c18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   48c1c:	e0bffd17 	ldw	r2,-12(fp)
   48c20:	10c00217 	ldw	r3,8(r2)
   48c24:	d0a55717 	ldw	r2,-27300(gp)
   48c28:	1880032e 	bgeu	r3,r2,48c38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   48c2c:	e0bffd17 	ldw	r2,-12(fp)
   48c30:	00c00044 	movi	r3,1
   48c34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   48c38:	e0bffe17 	ldw	r2,-8(fp)
   48c3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   48c40:	e0fffd17 	ldw	r3,-12(fp)
   48c44:	d0a01904 	addi	r2,gp,-32668
   48c48:	18bfcf1e 	bne	r3,r2,48b88 <__alt_mem_epcs_flash_controller+0xfe03fb88>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   48c4c:	0001883a 	nop
}
   48c50:	0001883a 	nop
   48c54:	e037883a 	mov	sp,fp
   48c58:	dfc00117 	ldw	ra,4(sp)
   48c5c:	df000017 	ldw	fp,0(sp)
   48c60:	dec00204 	addi	sp,sp,8
   48c64:	f800283a 	ret

00048c68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   48c68:	defffe04 	addi	sp,sp,-8
   48c6c:	dfc00115 	stw	ra,4(sp)
   48c70:	df000015 	stw	fp,0(sp)
   48c74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   48c78:	d0a02017 	ldw	r2,-32640(gp)
   48c7c:	10000326 	beq	r2,zero,48c8c <alt_get_errno+0x24>
   48c80:	d0a02017 	ldw	r2,-32640(gp)
   48c84:	103ee83a 	callr	r2
   48c88:	00000106 	br	48c90 <alt_get_errno+0x28>
   48c8c:	d0a54e04 	addi	r2,gp,-27336
}
   48c90:	e037883a 	mov	sp,fp
   48c94:	dfc00117 	ldw	ra,4(sp)
   48c98:	df000017 	ldw	fp,0(sp)
   48c9c:	dec00204 	addi	sp,sp,8
   48ca0:	f800283a 	ret

00048ca4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   48ca4:	defff904 	addi	sp,sp,-28
   48ca8:	dfc00615 	stw	ra,24(sp)
   48cac:	df000515 	stw	fp,20(sp)
   48cb0:	df000504 	addi	fp,sp,20
   48cb4:	e13ffd15 	stw	r4,-12(fp)
   48cb8:	e17ffe15 	stw	r5,-8(fp)
   48cbc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   48cc0:	e0bffd17 	ldw	r2,-12(fp)
   48cc4:	10000616 	blt	r2,zero,48ce0 <write+0x3c>
   48cc8:	e0bffd17 	ldw	r2,-12(fp)
   48ccc:	10c00324 	muli	r3,r2,12
   48cd0:	008001b4 	movhi	r2,6
   48cd4:	10a01204 	addi	r2,r2,-32696
   48cd8:	1885883a 	add	r2,r3,r2
   48cdc:	00000106 	br	48ce4 <write+0x40>
   48ce0:	0005883a 	mov	r2,zero
   48ce4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   48ce8:	e0bffb17 	ldw	r2,-20(fp)
   48cec:	10002126 	beq	r2,zero,48d74 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   48cf0:	e0bffb17 	ldw	r2,-20(fp)
   48cf4:	10800217 	ldw	r2,8(r2)
   48cf8:	108000cc 	andi	r2,r2,3
   48cfc:	10001826 	beq	r2,zero,48d60 <write+0xbc>
   48d00:	e0bffb17 	ldw	r2,-20(fp)
   48d04:	10800017 	ldw	r2,0(r2)
   48d08:	10800617 	ldw	r2,24(r2)
   48d0c:	10001426 	beq	r2,zero,48d60 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   48d10:	e0bffb17 	ldw	r2,-20(fp)
   48d14:	10800017 	ldw	r2,0(r2)
   48d18:	10800617 	ldw	r2,24(r2)
   48d1c:	e0ffff17 	ldw	r3,-4(fp)
   48d20:	180d883a 	mov	r6,r3
   48d24:	e17ffe17 	ldw	r5,-8(fp)
   48d28:	e13ffb17 	ldw	r4,-20(fp)
   48d2c:	103ee83a 	callr	r2
   48d30:	e0bffc15 	stw	r2,-16(fp)
   48d34:	e0bffc17 	ldw	r2,-16(fp)
   48d38:	1000070e 	bge	r2,zero,48d58 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   48d3c:	0048c680 	call	48c68 <alt_get_errno>
   48d40:	1007883a 	mov	r3,r2
   48d44:	e0bffc17 	ldw	r2,-16(fp)
   48d48:	0085c83a 	sub	r2,zero,r2
   48d4c:	18800015 	stw	r2,0(r3)
        return -1;
   48d50:	00bfffc4 	movi	r2,-1
   48d54:	00000c06 	br	48d88 <write+0xe4>
      }
      return rval;
   48d58:	e0bffc17 	ldw	r2,-16(fp)
   48d5c:	00000a06 	br	48d88 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   48d60:	0048c680 	call	48c68 <alt_get_errno>
   48d64:	1007883a 	mov	r3,r2
   48d68:	00800344 	movi	r2,13
   48d6c:	18800015 	stw	r2,0(r3)
   48d70:	00000406 	br	48d84 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   48d74:	0048c680 	call	48c68 <alt_get_errno>
   48d78:	1007883a 	mov	r3,r2
   48d7c:	00801444 	movi	r2,81
   48d80:	18800015 	stw	r2,0(r3)
  }
  return -1;
   48d84:	00bfffc4 	movi	r2,-1
}
   48d88:	e037883a 	mov	sp,fp
   48d8c:	dfc00117 	ldw	ra,4(sp)
   48d90:	df000017 	ldw	fp,0(sp)
   48d94:	dec00204 	addi	sp,sp,8
   48d98:	f800283a 	ret

00048d9c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   48d9c:	defffd04 	addi	sp,sp,-12
   48da0:	dfc00215 	stw	ra,8(sp)
   48da4:	df000115 	stw	fp,4(sp)
   48da8:	df000104 	addi	fp,sp,4
   48dac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   48db0:	d1601d04 	addi	r5,gp,-32652
   48db4:	e13fff17 	ldw	r4,-4(fp)
   48db8:	004ace80 	call	4ace8 <alt_dev_llist_insert>
}
   48dbc:	e037883a 	mov	sp,fp
   48dc0:	dfc00117 	ldw	ra,4(sp)
   48dc4:	df000017 	ldw	fp,0(sp)
   48dc8:	dec00204 	addi	sp,sp,8
   48dcc:	f800283a 	ret

00048dd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   48dd0:	defffd04 	addi	sp,sp,-12
   48dd4:	dfc00215 	stw	ra,8(sp)
   48dd8:	df000115 	stw	fp,4(sp)
   48ddc:	df000104 	addi	fp,sp,4
   48de0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   48de4:	004b5d40 	call	4b5d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   48de8:	00800044 	movi	r2,1
   48dec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   48df0:	0001883a 	nop
   48df4:	e037883a 	mov	sp,fp
   48df8:	dfc00117 	ldw	ra,4(sp)
   48dfc:	df000017 	ldw	fp,0(sp)
   48e00:	dec00204 	addi	sp,sp,8
   48e04:	f800283a 	ret

00048e08 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   48e08:	defffe04 	addi	sp,sp,-8
   48e0c:	dfc00115 	stw	ra,4(sp)
   48e10:	df000015 	stw	fp,0(sp)
   48e14:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
   48e18:	01000174 	movhi	r4,5
   48e1c:	211bbd04 	addi	r4,r4,28404
   48e20:	0048e940 	call	48e94 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   48e24:	01800044 	movi	r6,1
   48e28:	000b883a 	mov	r5,zero
   48e2c:	01000174 	movhi	r4,5
   48e30:	211bfa04 	addi	r4,r4,28648
   48e34:	0049ac00 	call	49ac0 <altera_avalon_jtag_uart_init>
   48e38:	01000174 	movhi	r4,5
   48e3c:	211bf004 	addi	r4,r4,28608
   48e40:	0048d9c0 	call	48d9c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   48e44:	0001883a 	nop
}
   48e48:	0001883a 	nop
   48e4c:	e037883a 	mov	sp,fp
   48e50:	dfc00117 	ldw	ra,4(sp)
   48e54:	df000017 	ldw	fp,0(sp)
   48e58:	dec00204 	addi	sp,sp,8
   48e5c:	f800283a 	ret

00048e60 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
   48e60:	defffd04 	addi	sp,sp,-12
   48e64:	dfc00215 	stw	ra,8(sp)
   48e68:	df000115 	stw	fp,4(sp)
   48e6c:	df000104 	addi	fp,sp,4
   48e70:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   48e74:	d1602104 	addi	r5,gp,-32636
   48e78:	e13fff17 	ldw	r4,-4(fp)
   48e7c:	004ace80 	call	4ace8 <alt_dev_llist_insert>
}
   48e80:	e037883a 	mov	sp,fp
   48e84:	dfc00117 	ldw	ra,4(sp)
   48e88:	df000017 	ldw	fp,0(sp)
   48e8c:	dec00204 	addi	sp,sp,8
   48e90:	f800283a 	ret

00048e94 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
   48e94:	defffc04 	addi	sp,sp,-16
   48e98:	dfc00315 	stw	ra,12(sp)
   48e9c:	df000215 	stw	fp,8(sp)
   48ea0:	df000204 	addi	fp,sp,8
   48ea4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   48ea8:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
   48eac:	e13fff17 	ldw	r4,-4(fp)
   48eb0:	0048ee80 	call	48ee8 <alt_epcs_flash_query>
   48eb4:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
   48eb8:	e0bffe17 	ldw	r2,-8(fp)
   48ebc:	1000041e 	bne	r2,zero,48ed0 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
   48ec0:	e0bfff17 	ldw	r2,-4(fp)
   48ec4:	1009883a 	mov	r4,r2
   48ec8:	0048e600 	call	48e60 <alt_flash_device_register>
   48ecc:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
   48ed0:	e0bffe17 	ldw	r2,-8(fp)
}
   48ed4:	e037883a 	mov	sp,fp
   48ed8:	dfc00117 	ldw	ra,4(sp)
   48edc:	df000017 	ldw	fp,0(sp)
   48ee0:	dec00204 	addi	sp,sp,8
   48ee4:	f800283a 	ret

00048ee8 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
   48ee8:	defffc04 	addi	sp,sp,-16
   48eec:	dfc00315 	stw	ra,12(sp)
   48ef0:	df000215 	stw	fp,8(sp)
   48ef4:	df000204 	addi	fp,sp,8
   48ef8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   48efc:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
   48f00:	e0bfff17 	ldw	r2,-4(fp)
   48f04:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
   48f08:	e0bfff17 	ldw	r2,-4(fp)
   48f0c:	10802e17 	ldw	r2,184(r2)
   48f10:	1009883a 	mov	r4,r2
   48f14:	004a8600 	call	4a860 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
   48f18:	10c03fcc 	andi	r3,r2,255
   48f1c:	e0bfff17 	ldw	r2,-4(fp)
   48f20:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
   48f24:	e0bfff17 	ldw	r2,-4(fp)
   48f28:	10803017 	ldw	r2,192(r2)
   48f2c:	10800598 	cmpnei	r2,r2,22
   48f30:	10000a1e 	bne	r2,zero,48f5c <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   48f34:	e0bfff17 	ldw	r2,-4(fp)
   48f38:	00c02034 	movhi	r3,128
   48f3c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
   48f40:	e0bfff17 	ldw	r2,-4(fp)
   48f44:	00c02004 	movi	r3,128
   48f48:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   48f4c:	e0bfff17 	ldw	r2,-4(fp)
   48f50:	00c00074 	movhi	r3,1
   48f54:	10c01015 	stw	r3,64(r2)
   48f58:	0000ce06 	br	49294 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
   48f5c:	e0bfff17 	ldw	r2,-4(fp)
   48f60:	10803017 	ldw	r2,192(r2)
   48f64:	10800518 	cmpnei	r2,r2,20
   48f68:	10000a1e 	bne	r2,zero,48f94 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   48f6c:	e0bfff17 	ldw	r2,-4(fp)
   48f70:	00c00834 	movhi	r3,32
   48f74:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
   48f78:	e0bfff17 	ldw	r2,-4(fp)
   48f7c:	00c00804 	movi	r3,32
   48f80:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   48f84:	e0bfff17 	ldw	r2,-4(fp)
   48f88:	00c00074 	movhi	r3,1
   48f8c:	10c01015 	stw	r3,64(r2)
   48f90:	0000c006 	br	49294 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
   48f94:	e0bfff17 	ldw	r2,-4(fp)
   48f98:	10803017 	ldw	r2,192(r2)
   48f9c:	108004d8 	cmpnei	r2,r2,19
   48fa0:	10000a1e 	bne	r2,zero,48fcc <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
   48fa4:	e0bfff17 	ldw	r2,-4(fp)
   48fa8:	00c00434 	movhi	r3,16
   48fac:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
   48fb0:	e0bfff17 	ldw	r2,-4(fp)
   48fb4:	00c00404 	movi	r3,16
   48fb8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   48fbc:	e0bfff17 	ldw	r2,-4(fp)
   48fc0:	00c00074 	movhi	r3,1
   48fc4:	10c01015 	stw	r3,64(r2)
   48fc8:	0000b206 	br	49294 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
   48fcc:	e0bfff17 	ldw	r2,-4(fp)
   48fd0:	10803017 	ldw	r2,192(r2)
   48fd4:	10800498 	cmpnei	r2,r2,18
   48fd8:	10000a1e 	bne	r2,zero,49004 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
   48fdc:	e0bfff17 	ldw	r2,-4(fp)
   48fe0:	00c00234 	movhi	r3,8
   48fe4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
   48fe8:	e0bfff17 	ldw	r2,-4(fp)
   48fec:	00c00204 	movi	r3,8
   48ff0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   48ff4:	e0bfff17 	ldw	r2,-4(fp)
   48ff8:	00c00074 	movhi	r3,1
   48ffc:	10c01015 	stw	r3,64(r2)
   49000:	0000a406 	br	49294 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
   49004:	e0bfff17 	ldw	r2,-4(fp)
   49008:	10803017 	ldw	r2,192(r2)
   4900c:	10800418 	cmpnei	r2,r2,16
   49010:	10000a1e 	bne	r2,zero,4903c <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
   49014:	e0bfff17 	ldw	r2,-4(fp)
   49018:	00c000b4 	movhi	r3,2
   4901c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
   49020:	e0bfff17 	ldw	r2,-4(fp)
   49024:	00c00104 	movi	r3,4
   49028:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
   4902c:	e0bfff17 	ldw	r2,-4(fp)
   49030:	00e00014 	movui	r3,32768
   49034:	10c01015 	stw	r3,64(r2)
   49038:	00009606 	br	49294 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
   4903c:	e0bfff17 	ldw	r2,-4(fp)
   49040:	10802e17 	ldw	r2,184(r2)
   49044:	1009883a 	mov	r4,r2
   49048:	004a8c80 	call	4a8c8 <epcs_read_device_id>
   4904c:	1007883a 	mov	r3,r2
   49050:	e0bfff17 	ldw	r2,-4(fp)
   49054:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
   49058:	e0bfff17 	ldw	r2,-4(fp)
   4905c:	10c03017 	ldw	r3,192(r2)
   49060:	00804034 	movhi	r2,256
   49064:	10bfffc4 	addi	r2,r2,-1
   49068:	1886703a 	and	r3,r3,r2
   4906c:	00800874 	movhi	r2,33
   49070:	10ae8544 	addi	r2,r2,-17899
   49074:	18800a1e 	bne	r3,r2,490a0 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   49078:	e0bfff17 	ldw	r2,-4(fp)
   4907c:	00c00834 	movhi	r3,32
   49080:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
   49084:	e0bfff17 	ldw	r2,-4(fp)
   49088:	00c00804 	movi	r3,32
   4908c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49090:	e0bfff17 	ldw	r2,-4(fp)
   49094:	00c00074 	movhi	r3,1
   49098:	10c01015 	stw	r3,64(r2)
   4909c:	00007d06 	br	49294 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
   490a0:	e0bfff17 	ldw	r2,-4(fp)
   490a4:	10c03017 	ldw	r3,192(r2)
   490a8:	00804034 	movhi	r2,256
   490ac:	10bfffc4 	addi	r2,r2,-1
   490b0:	1886703a 	and	r3,r3,r2
   490b4:	00800874 	movhi	r2,33
   490b8:	10ae8584 	addi	r2,r2,-17898
   490bc:	18800a1e 	bne	r3,r2,490e8 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
   490c0:	e0bfff17 	ldw	r2,-4(fp)
   490c4:	00c01034 	movhi	r3,64
   490c8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
   490cc:	e0bfff17 	ldw	r2,-4(fp)
   490d0:	00c01004 	movi	r3,64
   490d4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   490d8:	e0bfff17 	ldw	r2,-4(fp)
   490dc:	00c00074 	movhi	r3,1
   490e0:	10c01015 	stw	r3,64(r2)
   490e4:	00006b06 	br	49294 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
   490e8:	e0bfff17 	ldw	r2,-4(fp)
   490ec:	10c03017 	ldw	r3,192(r2)
   490f0:	00804034 	movhi	r2,256
   490f4:	10bfffc4 	addi	r2,r2,-1
   490f8:	1886703a 	and	r3,r3,r2
   490fc:	00800874 	movhi	r2,33
   49100:	10ae85c4 	addi	r2,r2,-17897
   49104:	18800a1e 	bne	r3,r2,49130 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   49108:	e0bfff17 	ldw	r2,-4(fp)
   4910c:	00c02034 	movhi	r3,128
   49110:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
   49114:	e0bfff17 	ldw	r2,-4(fp)
   49118:	00c02004 	movi	r3,128
   4911c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49120:	e0bfff17 	ldw	r2,-4(fp)
   49124:	00c00074 	movhi	r3,1
   49128:	10c01015 	stw	r3,64(r2)
   4912c:	00005906 	br	49294 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
   49130:	e0bfff17 	ldw	r2,-4(fp)
   49134:	10c03017 	ldw	r3,192(r2)
   49138:	00804034 	movhi	r2,256
   4913c:	10bfffc4 	addi	r2,r2,-1
   49140:	1886703a 	and	r3,r3,r2
   49144:	00800874 	movhi	r2,33
   49148:	10ae8604 	addi	r2,r2,-17896
   4914c:	18800a1e 	bne	r3,r2,49178 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   49150:	e0bfff17 	ldw	r2,-4(fp)
   49154:	00c04034 	movhi	r3,256
   49158:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
   4915c:	e0bfff17 	ldw	r2,-4(fp)
   49160:	00c04004 	movi	r3,256
   49164:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49168:	e0bfff17 	ldw	r2,-4(fp)
   4916c:	00c00074 	movhi	r3,1
   49170:	10c01015 	stw	r3,64(r2)
   49174:	00004706 	br	49294 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
   49178:	e0bfff17 	ldw	r2,-4(fp)
   4917c:	10803017 	ldw	r2,192(r2)
   49180:	10803fcc 	andi	r2,r2,255
   49184:	10800618 	cmpnei	r2,r2,24
   49188:	10000a1e 	bne	r2,zero,491b4 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   4918c:	e0bfff17 	ldw	r2,-4(fp)
   49190:	00c04034 	movhi	r3,256
   49194:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
   49198:	e0bfff17 	ldw	r2,-4(fp)
   4919c:	00c01004 	movi	r3,64
   491a0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
   491a4:	e0bfff17 	ldw	r2,-4(fp)
   491a8:	00c00134 	movhi	r3,4
   491ac:	10c01015 	stw	r3,64(r2)
   491b0:	00003806 	br	49294 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
   491b4:	e0bfff17 	ldw	r2,-4(fp)
   491b8:	10803017 	ldw	r2,192(r2)
   491bc:	10803fcc 	andi	r2,r2,255
   491c0:	10800658 	cmpnei	r2,r2,25
   491c4:	10000d1e 	bne	r2,zero,491fc <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
   491c8:	e0bfff17 	ldw	r2,-4(fp)
   491cc:	00c08034 	movhi	r3,512
   491d0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
   491d4:	e0bfff17 	ldw	r2,-4(fp)
   491d8:	00c08004 	movi	r3,512
   491dc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   491e0:	e0bfff17 	ldw	r2,-4(fp)
   491e4:	00c00074 	movhi	r3,1
   491e8:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
   491ec:	e0bfff17 	ldw	r2,-4(fp)
   491f0:	00c00044 	movi	r3,1
   491f4:	10c03215 	stw	r3,200(r2)
   491f8:	00002606 	br	49294 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
   491fc:	e0bfff17 	ldw	r2,-4(fp)
   49200:	10803017 	ldw	r2,192(r2)
   49204:	10803fcc 	andi	r2,r2,255
   49208:	10800818 	cmpnei	r2,r2,32
   4920c:	10000d1e 	bne	r2,zero,49244 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
   49210:	e0bfff17 	ldw	r2,-4(fp)
   49214:	00c10034 	movhi	r3,1024
   49218:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
   4921c:	e0bfff17 	ldw	r2,-4(fp)
   49220:	00c10004 	movi	r3,1024
   49224:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49228:	e0bfff17 	ldw	r2,-4(fp)
   4922c:	00c00074 	movhi	r3,1
   49230:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   49234:	e0bfff17 	ldw	r2,-4(fp)
   49238:	00c00044 	movi	r3,1
   4923c:	10c03215 	stw	r3,200(r2)
   49240:	00001406 	br	49294 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
   49244:	e0bfff17 	ldw	r2,-4(fp)
   49248:	10803017 	ldw	r2,192(r2)
   4924c:	10803fcc 	andi	r2,r2,255
   49250:	10800858 	cmpnei	r2,r2,33
   49254:	10000d1e 	bne	r2,zero,4928c <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
   49258:	e0bfff17 	ldw	r2,-4(fp)
   4925c:	00c20034 	movhi	r3,2048
   49260:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
   49264:	e0bfff17 	ldw	r2,-4(fp)
   49268:	00c20004 	movi	r3,2048
   4926c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   49270:	e0bfff17 	ldw	r2,-4(fp)
   49274:	00c00074 	movhi	r3,1
   49278:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   4927c:	e0bfff17 	ldw	r2,-4(fp)
   49280:	00c00044 	movi	r3,1
   49284:	10c03215 	stw	r3,200(r2)
   49288:	00000206 	br	49294 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
   4928c:	00bffb44 	movi	r2,-19
   49290:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   49294:	e0bfff17 	ldw	r2,-4(fp)
   49298:	10800e17 	ldw	r2,56(r2)
   4929c:	1007883a 	mov	r3,r2
   492a0:	e0bfff17 	ldw	r2,-4(fp)
   492a4:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
   492a8:	e0bfff17 	ldw	r2,-4(fp)
   492ac:	00c00044 	movi	r3,1
   492b0:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
   492b4:	e0bfff17 	ldw	r2,-4(fp)
   492b8:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
   492bc:	e0bfff17 	ldw	r2,-4(fp)
   492c0:	00c04004 	movi	r3,256
   492c4:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
   492c8:	e0bffe17 	ldw	r2,-8(fp)
}
   492cc:	e037883a 	mov	sp,fp
   492d0:	dfc00117 	ldw	ra,4(sp)
   492d4:	df000017 	ldw	fp,0(sp)
   492d8:	dec00204 	addi	sp,sp,8
   492dc:	f800283a 	ret

000492e0 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
   492e0:	deffee04 	addi	sp,sp,-72
   492e4:	dfc01115 	stw	ra,68(sp)
   492e8:	df001015 	stw	fp,64(sp)
   492ec:	df001004 	addi	fp,sp,64
   492f0:	e13ffc15 	stw	r4,-16(fp)
   492f4:	e17ffd15 	stw	r5,-12(fp)
   492f8:	e1bffe15 	stw	r6,-8(fp)
   492fc:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
   49300:	00800804 	movi	r2,32
   49304:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
   49308:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
   4930c:	00002706 	br	493ac <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
   49310:	e0fff117 	ldw	r3,-60(fp)
   49314:	e0bfff17 	ldw	r2,-4(fp)
   49318:	1880012e 	bgeu	r3,r2,49320 <alt_epcs_flash_memcmp+0x40>
   4931c:	1805883a 	mov	r2,r3
   49320:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
   49324:	e0fffe17 	ldw	r3,-8(fp)
   49328:	e0bff017 	ldw	r2,-64(fp)
   4932c:	1885883a 	add	r2,r3,r2
   49330:	e0fff404 	addi	r3,fp,-48
   49334:	e1fff217 	ldw	r7,-56(fp)
   49338:	180d883a 	mov	r6,r3
   4933c:	100b883a 	mov	r5,r2
   49340:	e13ffc17 	ldw	r4,-16(fp)
   49344:	00498c40 	call	498c4 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
   49348:	1000020e 	bge	r2,zero,49354 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
   4934c:	00bfffc4 	movi	r2,-1
   49350:	00001906 	br	493b8 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   49354:	e0bff017 	ldw	r2,-64(fp)
   49358:	e0fffd17 	ldw	r3,-12(fp)
   4935c:	1885883a 	add	r2,r3,r2
   49360:	e13ff217 	ldw	r4,-56(fp)
   49364:	e0fff404 	addi	r3,fp,-48
   49368:	200d883a 	mov	r6,r4
   4936c:	180b883a 	mov	r5,r3
   49370:	1009883a 	mov	r4,r2
   49374:	00463680 	call	46368 <memcmp>
   49378:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
   4937c:	e0bff317 	ldw	r2,-52(fp)
   49380:	10000226 	beq	r2,zero,4938c <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
   49384:	e0bff317 	ldw	r2,-52(fp)
   49388:	00000b06 	br	493b8 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
   4938c:	e0bff217 	ldw	r2,-56(fp)
   49390:	e0ffff17 	ldw	r3,-4(fp)
   49394:	1885c83a 	sub	r2,r3,r2
   49398:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
   4939c:	e0fff017 	ldw	r3,-64(fp)
   493a0:	e0bff217 	ldw	r2,-56(fp)
   493a4:	1885883a 	add	r2,r3,r2
   493a8:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
   493ac:	e0bfff17 	ldw	r2,-4(fp)
   493b0:	103fd71e 	bne	r2,zero,49310 <__alt_mem_epcs_flash_controller+0xfe040310>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
   493b4:	0005883a 	mov	r2,zero
}
   493b8:	e037883a 	mov	sp,fp
   493bc:	dfc00117 	ldw	ra,4(sp)
   493c0:	df000017 	ldw	fp,0(sp)
   493c4:	dec00204 	addi	sp,sp,8
   493c8:	f800283a 	ret

000493cc <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
   493cc:	defff404 	addi	sp,sp,-48
   493d0:	dfc00b15 	stw	ra,44(sp)
   493d4:	df000a15 	stw	fp,40(sp)
   493d8:	df000a04 	addi	fp,sp,40
   493dc:	e13ffc15 	stw	r4,-16(fp)
   493e0:	e17ffd15 	stw	r5,-12(fp)
   493e4:	e1bffe15 	stw	r6,-8(fp)
   493e8:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
   493ec:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   493f0:	e03ff815 	stw	zero,-32(fp)
   493f4:	00008306 	br	49604 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   493f8:	e0fffc17 	ldw	r3,-16(fp)
   493fc:	e0bff817 	ldw	r2,-32(fp)
   49400:	1004913a 	slli	r2,r2,4
   49404:	1885883a 	add	r2,r3,r2
   49408:	10800d04 	addi	r2,r2,52
   4940c:	10800017 	ldw	r2,0(r2)
   49410:	e0fffd17 	ldw	r3,-12(fp)
   49414:	18807816 	blt	r3,r2,495f8 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
   49418:	e0fffc17 	ldw	r3,-16(fp)
   4941c:	e0bff817 	ldw	r2,-32(fp)
   49420:	1004913a 	slli	r2,r2,4
   49424:	1885883a 	add	r2,r3,r2
   49428:	10800d04 	addi	r2,r2,52
   4942c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
   49430:	e13ffc17 	ldw	r4,-16(fp)
   49434:	e0bff817 	ldw	r2,-32(fp)
   49438:	1004913a 	slli	r2,r2,4
   4943c:	2085883a 	add	r2,r4,r2
   49440:	10800e04 	addi	r2,r2,56
   49444:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
   49448:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   4944c:	e0fffd17 	ldw	r3,-12(fp)
   49450:	1880690e 	bge	r3,r2,495f8 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
   49454:	e0fffc17 	ldw	r3,-16(fp)
   49458:	e0bff817 	ldw	r2,-32(fp)
   4945c:	1004913a 	slli	r2,r2,4
   49460:	1885883a 	add	r2,r3,r2
   49464:	10800d04 	addi	r2,r2,52
   49468:	10800017 	ldw	r2,0(r2)
   4946c:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   49470:	e03ff915 	stw	zero,-28(fp)
   49474:	00005806 	br	495d8 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
   49478:	e0fffd17 	ldw	r3,-12(fp)
   4947c:	e0bffa17 	ldw	r2,-24(fp)
   49480:	18804916 	blt	r3,r2,495a8 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
   49484:	e0fffc17 	ldw	r3,-16(fp)
   49488:	e0bff817 	ldw	r2,-32(fp)
   4948c:	10800104 	addi	r2,r2,4
   49490:	1004913a 	slli	r2,r2,4
   49494:	1885883a 	add	r2,r3,r2
   49498:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
   4949c:	e0bffa17 	ldw	r2,-24(fp)
   494a0:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
   494a4:	e0fffd17 	ldw	r3,-12(fp)
   494a8:	18803f0e 	bge	r3,r2,495a8 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
   494ac:	e0fffc17 	ldw	r3,-16(fp)
   494b0:	e0bff817 	ldw	r2,-32(fp)
   494b4:	10800104 	addi	r2,r2,4
   494b8:	1004913a 	slli	r2,r2,4
   494bc:	1885883a 	add	r2,r3,r2
   494c0:	10c00017 	ldw	r3,0(r2)
   494c4:	e0bffa17 	ldw	r2,-24(fp)
   494c8:	1887883a 	add	r3,r3,r2
   494cc:	e0bffd17 	ldw	r2,-12(fp)
   494d0:	1885c83a 	sub	r2,r3,r2
   494d4:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
   494d8:	e0fffb17 	ldw	r3,-20(fp)
   494dc:	e0bfff17 	ldw	r2,-4(fp)
   494e0:	1880010e 	bge	r3,r2,494e8 <alt_epcs_flash_write+0x11c>
   494e4:	1805883a 	mov	r2,r3
   494e8:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
   494ec:	e0bffb17 	ldw	r2,-20(fp)
   494f0:	100f883a 	mov	r7,r2
   494f4:	e1bffd17 	ldw	r6,-12(fp)
   494f8:	e17ffe17 	ldw	r5,-8(fp)
   494fc:	e13ffc17 	ldw	r4,-16(fp)
   49500:	00492e00 	call	492e0 <alt_epcs_flash_memcmp>
   49504:	10001226 	beq	r2,zero,49550 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
   49508:	e0bffc17 	ldw	r2,-16(fp)
   4950c:	10800817 	ldw	r2,32(r2)
   49510:	e17ffa17 	ldw	r5,-24(fp)
   49514:	e13ffc17 	ldw	r4,-16(fp)
   49518:	103ee83a 	callr	r2
   4951c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
   49520:	e0bff717 	ldw	r2,-36(fp)
   49524:	10000a1e 	bne	r2,zero,49550 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
   49528:	e0bffc17 	ldw	r2,-16(fp)
   4952c:	10800917 	ldw	r2,36(r2)
   49530:	e0fffb17 	ldw	r3,-20(fp)
   49534:	d8c00015 	stw	r3,0(sp)
   49538:	e1fffe17 	ldw	r7,-8(fp)
   4953c:	e1bffd17 	ldw	r6,-12(fp)
   49540:	e17ffa17 	ldw	r5,-24(fp)
   49544:	e13ffc17 	ldw	r4,-16(fp)
   49548:	103ee83a 	callr	r2
   4954c:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
   49550:	e0ffff17 	ldw	r3,-4(fp)
   49554:	e0bffb17 	ldw	r2,-20(fp)
   49558:	18802e26 	beq	r3,r2,49614 <alt_epcs_flash_write+0x248>
   4955c:	e0bff717 	ldw	r2,-36(fp)
   49560:	10002c1e 	bne	r2,zero,49614 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
   49564:	e0ffff17 	ldw	r3,-4(fp)
   49568:	e0bffb17 	ldw	r2,-20(fp)
   4956c:	1885c83a 	sub	r2,r3,r2
   49570:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
   49574:	e0fffc17 	ldw	r3,-16(fp)
   49578:	e0bff817 	ldw	r2,-32(fp)
   4957c:	10800104 	addi	r2,r2,4
   49580:	1004913a 	slli	r2,r2,4
   49584:	1885883a 	add	r2,r3,r2
   49588:	10c00017 	ldw	r3,0(r2)
   4958c:	e0bffa17 	ldw	r2,-24(fp)
   49590:	1885883a 	add	r2,r3,r2
   49594:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
   49598:	e0bffb17 	ldw	r2,-20(fp)
   4959c:	e0fffe17 	ldw	r3,-8(fp)
   495a0:	1885883a 	add	r2,r3,r2
   495a4:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
   495a8:	e0fffc17 	ldw	r3,-16(fp)
   495ac:	e0bff817 	ldw	r2,-32(fp)
   495b0:	10800104 	addi	r2,r2,4
   495b4:	1004913a 	slli	r2,r2,4
   495b8:	1885883a 	add	r2,r3,r2
   495bc:	10800017 	ldw	r2,0(r2)
   495c0:	e0fffa17 	ldw	r3,-24(fp)
   495c4:	1885883a 	add	r2,r3,r2
   495c8:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   495cc:	e0bff917 	ldw	r2,-28(fp)
   495d0:	10800044 	addi	r2,r2,1
   495d4:	e0bff915 	stw	r2,-28(fp)
   495d8:	e0fffc17 	ldw	r3,-16(fp)
   495dc:	e0bff817 	ldw	r2,-32(fp)
   495e0:	1004913a 	slli	r2,r2,4
   495e4:	1885883a 	add	r2,r3,r2
   495e8:	10800f04 	addi	r2,r2,60
   495ec:	10800017 	ldw	r2,0(r2)
   495f0:	e0fff917 	ldw	r3,-28(fp)
   495f4:	18bfa016 	blt	r3,r2,49478 <__alt_mem_epcs_flash_controller+0xfe040478>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   495f8:	e0bff817 	ldw	r2,-32(fp)
   495fc:	10800044 	addi	r2,r2,1
   49600:	e0bff815 	stw	r2,-32(fp)
   49604:	e0bffc17 	ldw	r2,-16(fp)
   49608:	10800c17 	ldw	r2,48(r2)
   4960c:	e0fff817 	ldw	r3,-32(fp)
   49610:	18bf7916 	blt	r3,r2,493f8 <__alt_mem_epcs_flash_controller+0xfe0403f8>
      }
    }
  }

finished:
  return ret_code;
   49614:	e0bff717 	ldw	r2,-36(fp)
}
   49618:	e037883a 	mov	sp,fp
   4961c:	dfc00117 	ldw	ra,4(sp)
   49620:	df000017 	ldw	fp,0(sp)
   49624:	dec00204 	addi	sp,sp,8
   49628:	f800283a 	ret

0004962c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
   4962c:	defffa04 	addi	sp,sp,-24
   49630:	df000515 	stw	fp,20(sp)
   49634:	df000504 	addi	fp,sp,20
   49638:	e13ffd15 	stw	r4,-12(fp)
   4963c:	e17ffe15 	stw	r5,-8(fp)
   49640:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
   49644:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
   49648:	e0bffd17 	ldw	r2,-12(fp)
   4964c:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
   49650:	e0bffc17 	ldw	r2,-16(fp)
   49654:	10c00c17 	ldw	r3,48(r2)
   49658:	e0bfff17 	ldw	r2,-4(fp)
   4965c:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
   49660:	e0bffc17 	ldw	r2,-16(fp)
   49664:	10800c17 	ldw	r2,48(r2)
   49668:	1000031e 	bne	r2,zero,49678 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
   4966c:	00bffec4 	movi	r2,-5
   49670:	e0bffb15 	stw	r2,-20(fp)
   49674:	00000b06 	br	496a4 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   49678:	e0bffc17 	ldw	r2,-16(fp)
   4967c:	10800c17 	ldw	r2,48(r2)
   49680:	10800250 	cmplti	r2,r2,9
   49684:	1000031e 	bne	r2,zero,49694 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
   49688:	00bffd04 	movi	r2,-12
   4968c:	e0bffb15 	stw	r2,-20(fp)
   49690:	00000406 	br	496a4 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
   49694:	e0bffc17 	ldw	r2,-16(fp)
   49698:	10c00d04 	addi	r3,r2,52
   4969c:	e0bffe17 	ldw	r2,-8(fp)
   496a0:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
   496a4:	e0bffb17 	ldw	r2,-20(fp)
}
   496a8:	e037883a 	mov	sp,fp
   496ac:	df000017 	ldw	fp,0(sp)
   496b0:	dec00104 	addi	sp,sp,4
   496b4:	f800283a 	ret

000496b8 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
   496b8:	defff904 	addi	sp,sp,-28
   496bc:	df000615 	stw	fp,24(sp)
   496c0:	df000604 	addi	fp,sp,24
   496c4:	e13ffe15 	stw	r4,-8(fp)
   496c8:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   496cc:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   496d0:	e0bffe17 	ldw	r2,-8(fp)
   496d4:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
   496d8:	e0bffb17 	ldw	r2,-20(fp)
   496dc:	10800c17 	ldw	r2,48(r2)
   496e0:	10bfffc4 	addi	r2,r2,-1
   496e4:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   496e8:	e0fffb17 	ldw	r3,-20(fp)
   496ec:	e0bffc17 	ldw	r2,-16(fp)
   496f0:	1004913a 	slli	r2,r2,4
   496f4:	1885883a 	add	r2,r3,r2
   496f8:	10800d04 	addi	r2,r2,52
   496fc:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
   49700:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
   49704:	e13ffb17 	ldw	r4,-20(fp)
   49708:	e0bffc17 	ldw	r2,-16(fp)
   4970c:	1004913a 	slli	r2,r2,4
   49710:	2085883a 	add	r2,r4,r2
   49714:	10800e04 	addi	r2,r2,56
   49718:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   4971c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
   49720:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
   49724:	e0bfff17 	ldw	r2,-4(fp)
   49728:	e0fffd17 	ldw	r3,-12(fp)
   4972c:	1880022e 	bgeu	r3,r2,49738 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
   49730:	00bffec4 	movi	r2,-5
   49734:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
   49738:	e0bffa17 	ldw	r2,-24(fp)
}
   4973c:	e037883a 	mov	sp,fp
   49740:	df000017 	ldw	fp,0(sp)
   49744:	dec00104 	addi	sp,sp,4
   49748:	f800283a 	ret

0004974c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
   4974c:	defffa04 	addi	sp,sp,-24
   49750:	dfc00515 	stw	ra,20(sp)
   49754:	df000415 	stw	fp,16(sp)
   49758:	df000404 	addi	fp,sp,16
   4975c:	e13ffe15 	stw	r4,-8(fp)
   49760:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   49764:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   49768:	e0bffe17 	ldw	r2,-8(fp)
   4976c:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
   49770:	e17fff17 	ldw	r5,-4(fp)
   49774:	e13ffe17 	ldw	r4,-8(fp)
   49778:	00496b80 	call	496b8 <alt_epcs_test_address>
   4977c:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
   49780:	e0bffc17 	ldw	r2,-16(fp)
   49784:	10000916 	blt	r2,zero,497ac <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
   49788:	e0bffd17 	ldw	r2,-12(fp)
   4978c:	10c02e17 	ldw	r3,184(r2)
   49790:	e13fff17 	ldw	r4,-4(fp)
   49794:	e0bffd17 	ldw	r2,-12(fp)
   49798:	10803217 	ldw	r2,200(r2)
   4979c:	100d883a 	mov	r6,r2
   497a0:	200b883a 	mov	r5,r4
   497a4:	1809883a 	mov	r4,r3
   497a8:	004a4940 	call	4a494 <epcs_sector_erase>
  }
  return ret_code;
   497ac:	e0bffc17 	ldw	r2,-16(fp)
}
   497b0:	e037883a 	mov	sp,fp
   497b4:	dfc00117 	ldw	ra,4(sp)
   497b8:	df000017 	ldw	fp,0(sp)
   497bc:	dec00204 	addi	sp,sp,8
   497c0:	f800283a 	ret

000497c4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   497c4:	defff404 	addi	sp,sp,-48
   497c8:	dfc00b15 	stw	ra,44(sp)
   497cc:	df000a15 	stw	fp,40(sp)
   497d0:	df000a04 	addi	fp,sp,40
   497d4:	e13ffc15 	stw	r4,-16(fp)
   497d8:	e17ffd15 	stw	r5,-12(fp)
   497dc:	e1bffe15 	stw	r6,-8(fp)
   497e0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   497e4:	e0bffc17 	ldw	r2,-16(fp)
   497e8:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
   497ec:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
   497f0:	e17ffe17 	ldw	r5,-8(fp)
   497f4:	e13ffc17 	ldw	r4,-16(fp)
   497f8:	00496b80 	call	496b8 <alt_epcs_test_address>
   497fc:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
   49800:	e0bff917 	ldw	r2,-28(fp)
   49804:	10002916 	blt	r2,zero,498ac <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   49808:	00002606 	br	498a4 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
   4980c:	e0bff817 	ldw	r2,-32(fp)
   49810:	10c03117 	ldw	r3,196(r2)
   49814:	e0bffe17 	ldw	r2,-8(fp)
   49818:	1887883a 	add	r3,r3,r2
   4981c:	e0bff817 	ldw	r2,-32(fp)
   49820:	10803117 	ldw	r2,196(r2)
   49824:	0085c83a 	sub	r2,zero,r2
   49828:	1884703a 	and	r2,r3,r2
   4982c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
   49830:	e0fffa17 	ldw	r3,-24(fp)
   49834:	e0bffe17 	ldw	r2,-8(fp)
   49838:	1885c83a 	sub	r2,r3,r2
   4983c:	e0c00217 	ldw	r3,8(fp)
   49840:	1880010e 	bge	r3,r2,49848 <alt_epcs_flash_write_block+0x84>
   49844:	1805883a 	mov	r2,r3
   49848:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   4984c:	e0bff817 	ldw	r2,-32(fp)
   49850:	11002e17 	ldw	r4,184(r2)
   49854:	e0bff717 	ldw	r2,-36(fp)
   49858:	e0ffff17 	ldw	r3,-4(fp)
   4985c:	1887883a 	add	r3,r3,r2
   49860:	e0bff817 	ldw	r2,-32(fp)
   49864:	10803217 	ldw	r2,200(r2)
   49868:	d8800015 	stw	r2,0(sp)
   4986c:	e1fffb17 	ldw	r7,-20(fp)
   49870:	180d883a 	mov	r6,r3
   49874:	e17ffe17 	ldw	r5,-8(fp)
   49878:	004a7440 	call	4a744 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
   4987c:	e0c00217 	ldw	r3,8(fp)
   49880:	e0bffb17 	ldw	r2,-20(fp)
   49884:	1885c83a 	sub	r2,r3,r2
   49888:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
   4988c:	e0fff717 	ldw	r3,-36(fp)
   49890:	e0bffb17 	ldw	r2,-20(fp)
   49894:	1885883a 	add	r2,r3,r2
   49898:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
   4989c:	e0bffa17 	ldw	r2,-24(fp)
   498a0:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   498a4:	e0800217 	ldw	r2,8(fp)
   498a8:	103fd81e 	bne	r2,zero,4980c <__alt_mem_epcs_flash_controller+0xfe04080c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
   498ac:	e0bff917 	ldw	r2,-28(fp)
}
   498b0:	e037883a 	mov	sp,fp
   498b4:	dfc00117 	ldw	ra,4(sp)
   498b8:	df000017 	ldw	fp,0(sp)
   498bc:	dec00204 	addi	sp,sp,8
   498c0:	f800283a 	ret

000498c4 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
   498c4:	defff704 	addi	sp,sp,-36
   498c8:	dfc00815 	stw	ra,32(sp)
   498cc:	df000715 	stw	fp,28(sp)
   498d0:	df000704 	addi	fp,sp,28
   498d4:	e13ffc15 	stw	r4,-16(fp)
   498d8:	e17ffd15 	stw	r5,-12(fp)
   498dc:	e1bffe15 	stw	r6,-8(fp)
   498e0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
   498e4:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   498e8:	e0bffc17 	ldw	r2,-16(fp)
   498ec:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
   498f0:	e17ffd17 	ldw	r5,-12(fp)
   498f4:	e13ffc17 	ldw	r4,-16(fp)
   498f8:	00496b80 	call	496b8 <alt_epcs_test_address>
   498fc:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
   49900:	e0bffa17 	ldw	r2,-24(fp)
   49904:	10000f16 	blt	r2,zero,49944 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
   49908:	e0bffb17 	ldw	r2,-20(fp)
   4990c:	10c02e17 	ldw	r3,184(r2)
   49910:	e0bffb17 	ldw	r2,-20(fp)
   49914:	10803217 	ldw	r2,200(r2)
   49918:	d8800015 	stw	r2,0(sp)
   4991c:	e1ffff17 	ldw	r7,-4(fp)
   49920:	e1bffe17 	ldw	r6,-8(fp)
   49924:	e17ffd17 	ldw	r5,-12(fp)
   49928:	1809883a 	mov	r4,r3
   4992c:	004a5900 	call	4a590 <epcs_read_buffer>
   49930:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
   49934:	e0fffa17 	ldw	r3,-24(fp)
   49938:	e0bfff17 	ldw	r2,-4(fp)
   4993c:	1880011e 	bne	r3,r2,49944 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
   49940:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
   49944:	e0bffa17 	ldw	r2,-24(fp)
}
   49948:	e037883a 	mov	sp,fp
   4994c:	dfc00117 	ldw	ra,4(sp)
   49950:	df000017 	ldw	fp,0(sp)
   49954:	dec00204 	addi	sp,sp,8
   49958:	f800283a 	ret

0004995c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4995c:	defffa04 	addi	sp,sp,-24
   49960:	dfc00515 	stw	ra,20(sp)
   49964:	df000415 	stw	fp,16(sp)
   49968:	df000404 	addi	fp,sp,16
   4996c:	e13ffd15 	stw	r4,-12(fp)
   49970:	e17ffe15 	stw	r5,-8(fp)
   49974:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   49978:	e0bffd17 	ldw	r2,-12(fp)
   4997c:	10800017 	ldw	r2,0(r2)
   49980:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   49984:	e0bffc17 	ldw	r2,-16(fp)
   49988:	10c00a04 	addi	r3,r2,40
   4998c:	e0bffd17 	ldw	r2,-12(fp)
   49990:	10800217 	ldw	r2,8(r2)
   49994:	100f883a 	mov	r7,r2
   49998:	e1bfff17 	ldw	r6,-4(fp)
   4999c:	e17ffe17 	ldw	r5,-8(fp)
   499a0:	1809883a 	mov	r4,r3
   499a4:	0049f840 	call	49f84 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   499a8:	e037883a 	mov	sp,fp
   499ac:	dfc00117 	ldw	ra,4(sp)
   499b0:	df000017 	ldw	fp,0(sp)
   499b4:	dec00204 	addi	sp,sp,8
   499b8:	f800283a 	ret

000499bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   499bc:	defffa04 	addi	sp,sp,-24
   499c0:	dfc00515 	stw	ra,20(sp)
   499c4:	df000415 	stw	fp,16(sp)
   499c8:	df000404 	addi	fp,sp,16
   499cc:	e13ffd15 	stw	r4,-12(fp)
   499d0:	e17ffe15 	stw	r5,-8(fp)
   499d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   499d8:	e0bffd17 	ldw	r2,-12(fp)
   499dc:	10800017 	ldw	r2,0(r2)
   499e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   499e4:	e0bffc17 	ldw	r2,-16(fp)
   499e8:	10c00a04 	addi	r3,r2,40
   499ec:	e0bffd17 	ldw	r2,-12(fp)
   499f0:	10800217 	ldw	r2,8(r2)
   499f4:	100f883a 	mov	r7,r2
   499f8:	e1bfff17 	ldw	r6,-4(fp)
   499fc:	e17ffe17 	ldw	r5,-8(fp)
   49a00:	1809883a 	mov	r4,r3
   49a04:	004a1a00 	call	4a1a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   49a08:	e037883a 	mov	sp,fp
   49a0c:	dfc00117 	ldw	ra,4(sp)
   49a10:	df000017 	ldw	fp,0(sp)
   49a14:	dec00204 	addi	sp,sp,8
   49a18:	f800283a 	ret

00049a1c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   49a1c:	defffc04 	addi	sp,sp,-16
   49a20:	dfc00315 	stw	ra,12(sp)
   49a24:	df000215 	stw	fp,8(sp)
   49a28:	df000204 	addi	fp,sp,8
   49a2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   49a30:	e0bfff17 	ldw	r2,-4(fp)
   49a34:	10800017 	ldw	r2,0(r2)
   49a38:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   49a3c:	e0bffe17 	ldw	r2,-8(fp)
   49a40:	10c00a04 	addi	r3,r2,40
   49a44:	e0bfff17 	ldw	r2,-4(fp)
   49a48:	10800217 	ldw	r2,8(r2)
   49a4c:	100b883a 	mov	r5,r2
   49a50:	1809883a 	mov	r4,r3
   49a54:	0049e2c0 	call	49e2c <altera_avalon_jtag_uart_close>
}
   49a58:	e037883a 	mov	sp,fp
   49a5c:	dfc00117 	ldw	ra,4(sp)
   49a60:	df000017 	ldw	fp,0(sp)
   49a64:	dec00204 	addi	sp,sp,8
   49a68:	f800283a 	ret

00049a6c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   49a6c:	defffa04 	addi	sp,sp,-24
   49a70:	dfc00515 	stw	ra,20(sp)
   49a74:	df000415 	stw	fp,16(sp)
   49a78:	df000404 	addi	fp,sp,16
   49a7c:	e13ffd15 	stw	r4,-12(fp)
   49a80:	e17ffe15 	stw	r5,-8(fp)
   49a84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   49a88:	e0bffd17 	ldw	r2,-12(fp)
   49a8c:	10800017 	ldw	r2,0(r2)
   49a90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   49a94:	e0bffc17 	ldw	r2,-16(fp)
   49a98:	10800a04 	addi	r2,r2,40
   49a9c:	e1bfff17 	ldw	r6,-4(fp)
   49aa0:	e17ffe17 	ldw	r5,-8(fp)
   49aa4:	1009883a 	mov	r4,r2
   49aa8:	0049e940 	call	49e94 <altera_avalon_jtag_uart_ioctl>
}
   49aac:	e037883a 	mov	sp,fp
   49ab0:	dfc00117 	ldw	ra,4(sp)
   49ab4:	df000017 	ldw	fp,0(sp)
   49ab8:	dec00204 	addi	sp,sp,8
   49abc:	f800283a 	ret

00049ac0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   49ac0:	defffa04 	addi	sp,sp,-24
   49ac4:	dfc00515 	stw	ra,20(sp)
   49ac8:	df000415 	stw	fp,16(sp)
   49acc:	df000404 	addi	fp,sp,16
   49ad0:	e13ffd15 	stw	r4,-12(fp)
   49ad4:	e17ffe15 	stw	r5,-8(fp)
   49ad8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   49adc:	e0bffd17 	ldw	r2,-12(fp)
   49ae0:	00c00044 	movi	r3,1
   49ae4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   49ae8:	e0bffd17 	ldw	r2,-12(fp)
   49aec:	10800017 	ldw	r2,0(r2)
   49af0:	10800104 	addi	r2,r2,4
   49af4:	1007883a 	mov	r3,r2
   49af8:	e0bffd17 	ldw	r2,-12(fp)
   49afc:	10800817 	ldw	r2,32(r2)
   49b00:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   49b04:	e0bffe17 	ldw	r2,-8(fp)
   49b08:	e0ffff17 	ldw	r3,-4(fp)
   49b0c:	d8000015 	stw	zero,0(sp)
   49b10:	e1fffd17 	ldw	r7,-12(fp)
   49b14:	01800174 	movhi	r6,5
   49b18:	31a6e004 	addi	r6,r6,-25728
   49b1c:	180b883a 	mov	r5,r3
   49b20:	1009883a 	mov	r4,r2
   49b24:	004af3c0 	call	4af3c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   49b28:	e0bffd17 	ldw	r2,-12(fp)
   49b2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   49b30:	e0bffd17 	ldw	r2,-12(fp)
   49b34:	10800204 	addi	r2,r2,8
   49b38:	d0e55617 	ldw	r3,-27304(gp)
   49b3c:	e1fffd17 	ldw	r7,-12(fp)
   49b40:	01800174 	movhi	r6,5
   49b44:	31a76304 	addi	r6,r6,-25204
   49b48:	180b883a 	mov	r5,r3
   49b4c:	1009883a 	mov	r4,r2
   49b50:	004aa000 	call	4aa00 <alt_alarm_start>
   49b54:	1000040e 	bge	r2,zero,49b68 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   49b58:	e0fffd17 	ldw	r3,-12(fp)
   49b5c:	00a00034 	movhi	r2,32768
   49b60:	10bfffc4 	addi	r2,r2,-1
   49b64:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   49b68:	0001883a 	nop
   49b6c:	e037883a 	mov	sp,fp
   49b70:	dfc00117 	ldw	ra,4(sp)
   49b74:	df000017 	ldw	fp,0(sp)
   49b78:	dec00204 	addi	sp,sp,8
   49b7c:	f800283a 	ret

00049b80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   49b80:	defff804 	addi	sp,sp,-32
   49b84:	df000715 	stw	fp,28(sp)
   49b88:	df000704 	addi	fp,sp,28
   49b8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   49b90:	e0bfff17 	ldw	r2,-4(fp)
   49b94:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   49b98:	e0bffb17 	ldw	r2,-20(fp)
   49b9c:	10800017 	ldw	r2,0(r2)
   49ba0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   49ba4:	e0bffc17 	ldw	r2,-16(fp)
   49ba8:	10800104 	addi	r2,r2,4
   49bac:	10800037 	ldwio	r2,0(r2)
   49bb0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   49bb4:	e0bffd17 	ldw	r2,-12(fp)
   49bb8:	1080c00c 	andi	r2,r2,768
   49bbc:	10006d26 	beq	r2,zero,49d74 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   49bc0:	e0bffd17 	ldw	r2,-12(fp)
   49bc4:	1080400c 	andi	r2,r2,256
   49bc8:	10003526 	beq	r2,zero,49ca0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   49bcc:	00800074 	movhi	r2,1
   49bd0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   49bd4:	e0bffb17 	ldw	r2,-20(fp)
   49bd8:	10800a17 	ldw	r2,40(r2)
   49bdc:	10800044 	addi	r2,r2,1
   49be0:	1081ffcc 	andi	r2,r2,2047
   49be4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   49be8:	e0bffb17 	ldw	r2,-20(fp)
   49bec:	10c00b17 	ldw	r3,44(r2)
   49bf0:	e0bffe17 	ldw	r2,-8(fp)
   49bf4:	18801526 	beq	r3,r2,49c4c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   49bf8:	e0bffc17 	ldw	r2,-16(fp)
   49bfc:	10800037 	ldwio	r2,0(r2)
   49c00:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   49c04:	e0bff917 	ldw	r2,-28(fp)
   49c08:	10a0000c 	andi	r2,r2,32768
   49c0c:	10001126 	beq	r2,zero,49c54 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   49c10:	e0bffb17 	ldw	r2,-20(fp)
   49c14:	10800a17 	ldw	r2,40(r2)
   49c18:	e0fff917 	ldw	r3,-28(fp)
   49c1c:	1809883a 	mov	r4,r3
   49c20:	e0fffb17 	ldw	r3,-20(fp)
   49c24:	1885883a 	add	r2,r3,r2
   49c28:	10800e04 	addi	r2,r2,56
   49c2c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   49c30:	e0bffb17 	ldw	r2,-20(fp)
   49c34:	10800a17 	ldw	r2,40(r2)
   49c38:	10800044 	addi	r2,r2,1
   49c3c:	10c1ffcc 	andi	r3,r2,2047
   49c40:	e0bffb17 	ldw	r2,-20(fp)
   49c44:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   49c48:	003fe206 	br	49bd4 <__alt_mem_epcs_flash_controller+0xfe040bd4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   49c4c:	0001883a 	nop
   49c50:	00000106 	br	49c58 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   49c54:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   49c58:	e0bff917 	ldw	r2,-28(fp)
   49c5c:	10bfffec 	andhi	r2,r2,65535
   49c60:	10000f26 	beq	r2,zero,49ca0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   49c64:	e0bffb17 	ldw	r2,-20(fp)
   49c68:	10c00817 	ldw	r3,32(r2)
   49c6c:	00bfff84 	movi	r2,-2
   49c70:	1886703a 	and	r3,r3,r2
   49c74:	e0bffb17 	ldw	r2,-20(fp)
   49c78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   49c7c:	e0bffc17 	ldw	r2,-16(fp)
   49c80:	10800104 	addi	r2,r2,4
   49c84:	1007883a 	mov	r3,r2
   49c88:	e0bffb17 	ldw	r2,-20(fp)
   49c8c:	10800817 	ldw	r2,32(r2)
   49c90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   49c94:	e0bffc17 	ldw	r2,-16(fp)
   49c98:	10800104 	addi	r2,r2,4
   49c9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   49ca0:	e0bffd17 	ldw	r2,-12(fp)
   49ca4:	1080800c 	andi	r2,r2,512
   49ca8:	103fbe26 	beq	r2,zero,49ba4 <__alt_mem_epcs_flash_controller+0xfe040ba4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   49cac:	e0bffd17 	ldw	r2,-12(fp)
   49cb0:	1004d43a 	srli	r2,r2,16
   49cb4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   49cb8:	00001406 	br	49d0c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   49cbc:	e0bffc17 	ldw	r2,-16(fp)
   49cc0:	e0fffb17 	ldw	r3,-20(fp)
   49cc4:	18c00d17 	ldw	r3,52(r3)
   49cc8:	e13ffb17 	ldw	r4,-20(fp)
   49ccc:	20c7883a 	add	r3,r4,r3
   49cd0:	18c20e04 	addi	r3,r3,2104
   49cd4:	18c00003 	ldbu	r3,0(r3)
   49cd8:	18c03fcc 	andi	r3,r3,255
   49cdc:	18c0201c 	xori	r3,r3,128
   49ce0:	18ffe004 	addi	r3,r3,-128
   49ce4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   49ce8:	e0bffb17 	ldw	r2,-20(fp)
   49cec:	10800d17 	ldw	r2,52(r2)
   49cf0:	10800044 	addi	r2,r2,1
   49cf4:	10c1ffcc 	andi	r3,r2,2047
   49cf8:	e0bffb17 	ldw	r2,-20(fp)
   49cfc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   49d00:	e0bffa17 	ldw	r2,-24(fp)
   49d04:	10bfffc4 	addi	r2,r2,-1
   49d08:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   49d0c:	e0bffa17 	ldw	r2,-24(fp)
   49d10:	10000526 	beq	r2,zero,49d28 <altera_avalon_jtag_uart_irq+0x1a8>
   49d14:	e0bffb17 	ldw	r2,-20(fp)
   49d18:	10c00d17 	ldw	r3,52(r2)
   49d1c:	e0bffb17 	ldw	r2,-20(fp)
   49d20:	10800c17 	ldw	r2,48(r2)
   49d24:	18bfe51e 	bne	r3,r2,49cbc <__alt_mem_epcs_flash_controller+0xfe040cbc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   49d28:	e0bffa17 	ldw	r2,-24(fp)
   49d2c:	103f9d26 	beq	r2,zero,49ba4 <__alt_mem_epcs_flash_controller+0xfe040ba4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   49d30:	e0bffb17 	ldw	r2,-20(fp)
   49d34:	10c00817 	ldw	r3,32(r2)
   49d38:	00bfff44 	movi	r2,-3
   49d3c:	1886703a 	and	r3,r3,r2
   49d40:	e0bffb17 	ldw	r2,-20(fp)
   49d44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   49d48:	e0bffb17 	ldw	r2,-20(fp)
   49d4c:	10800017 	ldw	r2,0(r2)
   49d50:	10800104 	addi	r2,r2,4
   49d54:	1007883a 	mov	r3,r2
   49d58:	e0bffb17 	ldw	r2,-20(fp)
   49d5c:	10800817 	ldw	r2,32(r2)
   49d60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   49d64:	e0bffc17 	ldw	r2,-16(fp)
   49d68:	10800104 	addi	r2,r2,4
   49d6c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   49d70:	003f8c06 	br	49ba4 <__alt_mem_epcs_flash_controller+0xfe040ba4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   49d74:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   49d78:	0001883a 	nop
   49d7c:	e037883a 	mov	sp,fp
   49d80:	df000017 	ldw	fp,0(sp)
   49d84:	dec00104 	addi	sp,sp,4
   49d88:	f800283a 	ret

00049d8c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   49d8c:	defff804 	addi	sp,sp,-32
   49d90:	df000715 	stw	fp,28(sp)
   49d94:	df000704 	addi	fp,sp,28
   49d98:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   49d9c:	e0bffb17 	ldw	r2,-20(fp)
   49da0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   49da4:	e0bff917 	ldw	r2,-28(fp)
   49da8:	10800017 	ldw	r2,0(r2)
   49dac:	10800104 	addi	r2,r2,4
   49db0:	10800037 	ldwio	r2,0(r2)
   49db4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   49db8:	e0bffa17 	ldw	r2,-24(fp)
   49dbc:	1081000c 	andi	r2,r2,1024
   49dc0:	10000b26 	beq	r2,zero,49df0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   49dc4:	e0bff917 	ldw	r2,-28(fp)
   49dc8:	10800017 	ldw	r2,0(r2)
   49dcc:	10800104 	addi	r2,r2,4
   49dd0:	1007883a 	mov	r3,r2
   49dd4:	e0bff917 	ldw	r2,-28(fp)
   49dd8:	10800817 	ldw	r2,32(r2)
   49ddc:	10810014 	ori	r2,r2,1024
   49de0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   49de4:	e0bff917 	ldw	r2,-28(fp)
   49de8:	10000915 	stw	zero,36(r2)
   49dec:	00000a06 	br	49e18 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   49df0:	e0bff917 	ldw	r2,-28(fp)
   49df4:	10c00917 	ldw	r3,36(r2)
   49df8:	00a00034 	movhi	r2,32768
   49dfc:	10bfff04 	addi	r2,r2,-4
   49e00:	10c00536 	bltu	r2,r3,49e18 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   49e04:	e0bff917 	ldw	r2,-28(fp)
   49e08:	10800917 	ldw	r2,36(r2)
   49e0c:	10c00044 	addi	r3,r2,1
   49e10:	e0bff917 	ldw	r2,-28(fp)
   49e14:	10c00915 	stw	r3,36(r2)
   49e18:	d0a55617 	ldw	r2,-27304(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   49e1c:	e037883a 	mov	sp,fp
   49e20:	df000017 	ldw	fp,0(sp)
   49e24:	dec00104 	addi	sp,sp,4
   49e28:	f800283a 	ret

00049e2c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   49e2c:	defffd04 	addi	sp,sp,-12
   49e30:	df000215 	stw	fp,8(sp)
   49e34:	df000204 	addi	fp,sp,8
   49e38:	e13ffe15 	stw	r4,-8(fp)
   49e3c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   49e40:	00000506 	br	49e58 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   49e44:	e0bfff17 	ldw	r2,-4(fp)
   49e48:	1090000c 	andi	r2,r2,16384
   49e4c:	10000226 	beq	r2,zero,49e58 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   49e50:	00bffd44 	movi	r2,-11
   49e54:	00000b06 	br	49e84 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   49e58:	e0bffe17 	ldw	r2,-8(fp)
   49e5c:	10c00d17 	ldw	r3,52(r2)
   49e60:	e0bffe17 	ldw	r2,-8(fp)
   49e64:	10800c17 	ldw	r2,48(r2)
   49e68:	18800526 	beq	r3,r2,49e80 <altera_avalon_jtag_uart_close+0x54>
   49e6c:	e0bffe17 	ldw	r2,-8(fp)
   49e70:	10c00917 	ldw	r3,36(r2)
   49e74:	e0bffe17 	ldw	r2,-8(fp)
   49e78:	10800117 	ldw	r2,4(r2)
   49e7c:	18bff136 	bltu	r3,r2,49e44 <__alt_mem_epcs_flash_controller+0xfe040e44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   49e80:	0005883a 	mov	r2,zero
}
   49e84:	e037883a 	mov	sp,fp
   49e88:	df000017 	ldw	fp,0(sp)
   49e8c:	dec00104 	addi	sp,sp,4
   49e90:	f800283a 	ret

00049e94 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   49e94:	defffa04 	addi	sp,sp,-24
   49e98:	df000515 	stw	fp,20(sp)
   49e9c:	df000504 	addi	fp,sp,20
   49ea0:	e13ffd15 	stw	r4,-12(fp)
   49ea4:	e17ffe15 	stw	r5,-8(fp)
   49ea8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   49eac:	00bff9c4 	movi	r2,-25
   49eb0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   49eb4:	e0bffe17 	ldw	r2,-8(fp)
   49eb8:	10da8060 	cmpeqi	r3,r2,27137
   49ebc:	1800031e 	bne	r3,zero,49ecc <altera_avalon_jtag_uart_ioctl+0x38>
   49ec0:	109a80a0 	cmpeqi	r2,r2,27138
   49ec4:	1000181e 	bne	r2,zero,49f28 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   49ec8:	00002906 	br	49f70 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   49ecc:	e0bffd17 	ldw	r2,-12(fp)
   49ed0:	10c00117 	ldw	r3,4(r2)
   49ed4:	00a00034 	movhi	r2,32768
   49ed8:	10bfffc4 	addi	r2,r2,-1
   49edc:	18802126 	beq	r3,r2,49f64 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   49ee0:	e0bfff17 	ldw	r2,-4(fp)
   49ee4:	10800017 	ldw	r2,0(r2)
   49ee8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   49eec:	e0bffc17 	ldw	r2,-16(fp)
   49ef0:	10800090 	cmplti	r2,r2,2
   49ef4:	1000061e 	bne	r2,zero,49f10 <altera_avalon_jtag_uart_ioctl+0x7c>
   49ef8:	e0fffc17 	ldw	r3,-16(fp)
   49efc:	00a00034 	movhi	r2,32768
   49f00:	10bfffc4 	addi	r2,r2,-1
   49f04:	18800226 	beq	r3,r2,49f10 <altera_avalon_jtag_uart_ioctl+0x7c>
   49f08:	e0bffc17 	ldw	r2,-16(fp)
   49f0c:	00000206 	br	49f18 <altera_avalon_jtag_uart_ioctl+0x84>
   49f10:	00a00034 	movhi	r2,32768
   49f14:	10bfff84 	addi	r2,r2,-2
   49f18:	e0fffd17 	ldw	r3,-12(fp)
   49f1c:	18800115 	stw	r2,4(r3)
      rc = 0;
   49f20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   49f24:	00000f06 	br	49f64 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   49f28:	e0bffd17 	ldw	r2,-12(fp)
   49f2c:	10c00117 	ldw	r3,4(r2)
   49f30:	00a00034 	movhi	r2,32768
   49f34:	10bfffc4 	addi	r2,r2,-1
   49f38:	18800c26 	beq	r3,r2,49f6c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   49f3c:	e0bffd17 	ldw	r2,-12(fp)
   49f40:	10c00917 	ldw	r3,36(r2)
   49f44:	e0bffd17 	ldw	r2,-12(fp)
   49f48:	10800117 	ldw	r2,4(r2)
   49f4c:	1885803a 	cmpltu	r2,r3,r2
   49f50:	10c03fcc 	andi	r3,r2,255
   49f54:	e0bfff17 	ldw	r2,-4(fp)
   49f58:	10c00015 	stw	r3,0(r2)
      rc = 0;
   49f5c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   49f60:	00000206 	br	49f6c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   49f64:	0001883a 	nop
   49f68:	00000106 	br	49f70 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   49f6c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   49f70:	e0bffb17 	ldw	r2,-20(fp)
}
   49f74:	e037883a 	mov	sp,fp
   49f78:	df000017 	ldw	fp,0(sp)
   49f7c:	dec00104 	addi	sp,sp,4
   49f80:	f800283a 	ret

00049f84 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   49f84:	defff304 	addi	sp,sp,-52
   49f88:	dfc00c15 	stw	ra,48(sp)
   49f8c:	df000b15 	stw	fp,44(sp)
   49f90:	df000b04 	addi	fp,sp,44
   49f94:	e13ffc15 	stw	r4,-16(fp)
   49f98:	e17ffd15 	stw	r5,-12(fp)
   49f9c:	e1bffe15 	stw	r6,-8(fp)
   49fa0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   49fa4:	e0bffd17 	ldw	r2,-12(fp)
   49fa8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   49fac:	00004706 	br	4a0cc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   49fb0:	e0bffc17 	ldw	r2,-16(fp)
   49fb4:	10800a17 	ldw	r2,40(r2)
   49fb8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   49fbc:	e0bffc17 	ldw	r2,-16(fp)
   49fc0:	10800b17 	ldw	r2,44(r2)
   49fc4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   49fc8:	e0fff717 	ldw	r3,-36(fp)
   49fcc:	e0bff817 	ldw	r2,-32(fp)
   49fd0:	18800536 	bltu	r3,r2,49fe8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   49fd4:	e0fff717 	ldw	r3,-36(fp)
   49fd8:	e0bff817 	ldw	r2,-32(fp)
   49fdc:	1885c83a 	sub	r2,r3,r2
   49fe0:	e0bff615 	stw	r2,-40(fp)
   49fe4:	00000406 	br	49ff8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   49fe8:	00c20004 	movi	r3,2048
   49fec:	e0bff817 	ldw	r2,-32(fp)
   49ff0:	1885c83a 	sub	r2,r3,r2
   49ff4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   49ff8:	e0bff617 	ldw	r2,-40(fp)
   49ffc:	10001e26 	beq	r2,zero,4a078 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4a000:	e0fffe17 	ldw	r3,-8(fp)
   4a004:	e0bff617 	ldw	r2,-40(fp)
   4a008:	1880022e 	bgeu	r3,r2,4a014 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4a00c:	e0bffe17 	ldw	r2,-8(fp)
   4a010:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4a014:	e0bffc17 	ldw	r2,-16(fp)
   4a018:	10c00e04 	addi	r3,r2,56
   4a01c:	e0bff817 	ldw	r2,-32(fp)
   4a020:	1885883a 	add	r2,r3,r2
   4a024:	e1bff617 	ldw	r6,-40(fp)
   4a028:	100b883a 	mov	r5,r2
   4a02c:	e13ff517 	ldw	r4,-44(fp)
   4a030:	00463980 	call	46398 <memcpy>
      ptr   += n;
   4a034:	e0fff517 	ldw	r3,-44(fp)
   4a038:	e0bff617 	ldw	r2,-40(fp)
   4a03c:	1885883a 	add	r2,r3,r2
   4a040:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4a044:	e0fffe17 	ldw	r3,-8(fp)
   4a048:	e0bff617 	ldw	r2,-40(fp)
   4a04c:	1885c83a 	sub	r2,r3,r2
   4a050:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4a054:	e0fff817 	ldw	r3,-32(fp)
   4a058:	e0bff617 	ldw	r2,-40(fp)
   4a05c:	1885883a 	add	r2,r3,r2
   4a060:	10c1ffcc 	andi	r3,r2,2047
   4a064:	e0bffc17 	ldw	r2,-16(fp)
   4a068:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4a06c:	e0bffe17 	ldw	r2,-8(fp)
   4a070:	00bfcf16 	blt	zero,r2,49fb0 <__alt_mem_epcs_flash_controller+0xfe040fb0>
   4a074:	00000106 	br	4a07c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4a078:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4a07c:	e0fff517 	ldw	r3,-44(fp)
   4a080:	e0bffd17 	ldw	r2,-12(fp)
   4a084:	1880141e 	bne	r3,r2,4a0d8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4a088:	e0bfff17 	ldw	r2,-4(fp)
   4a08c:	1090000c 	andi	r2,r2,16384
   4a090:	1000131e 	bne	r2,zero,4a0e0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4a094:	0001883a 	nop
   4a098:	e0bffc17 	ldw	r2,-16(fp)
   4a09c:	10c00a17 	ldw	r3,40(r2)
   4a0a0:	e0bff717 	ldw	r2,-36(fp)
   4a0a4:	1880051e 	bne	r3,r2,4a0bc <altera_avalon_jtag_uart_read+0x138>
   4a0a8:	e0bffc17 	ldw	r2,-16(fp)
   4a0ac:	10c00917 	ldw	r3,36(r2)
   4a0b0:	e0bffc17 	ldw	r2,-16(fp)
   4a0b4:	10800117 	ldw	r2,4(r2)
   4a0b8:	18bff736 	bltu	r3,r2,4a098 <__alt_mem_epcs_flash_controller+0xfe041098>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4a0bc:	e0bffc17 	ldw	r2,-16(fp)
   4a0c0:	10c00a17 	ldw	r3,40(r2)
   4a0c4:	e0bff717 	ldw	r2,-36(fp)
   4a0c8:	18800726 	beq	r3,r2,4a0e8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4a0cc:	e0bffe17 	ldw	r2,-8(fp)
   4a0d0:	00bfb716 	blt	zero,r2,49fb0 <__alt_mem_epcs_flash_controller+0xfe040fb0>
   4a0d4:	00000506 	br	4a0ec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4a0d8:	0001883a 	nop
   4a0dc:	00000306 	br	4a0ec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4a0e0:	0001883a 	nop
   4a0e4:	00000106 	br	4a0ec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4a0e8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4a0ec:	e0fff517 	ldw	r3,-44(fp)
   4a0f0:	e0bffd17 	ldw	r2,-12(fp)
   4a0f4:	18801826 	beq	r3,r2,4a158 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a0f8:	0005303a 	rdctl	r2,status
   4a0fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a100:	e0fffb17 	ldw	r3,-20(fp)
   4a104:	00bfff84 	movi	r2,-2
   4a108:	1884703a 	and	r2,r3,r2
   4a10c:	1001703a 	wrctl	status,r2
  
  return context;
   4a110:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4a114:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4a118:	e0bffc17 	ldw	r2,-16(fp)
   4a11c:	10800817 	ldw	r2,32(r2)
   4a120:	10c00054 	ori	r3,r2,1
   4a124:	e0bffc17 	ldw	r2,-16(fp)
   4a128:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4a12c:	e0bffc17 	ldw	r2,-16(fp)
   4a130:	10800017 	ldw	r2,0(r2)
   4a134:	10800104 	addi	r2,r2,4
   4a138:	1007883a 	mov	r3,r2
   4a13c:	e0bffc17 	ldw	r2,-16(fp)
   4a140:	10800817 	ldw	r2,32(r2)
   4a144:	18800035 	stwio	r2,0(r3)
   4a148:	e0bffa17 	ldw	r2,-24(fp)
   4a14c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a150:	e0bff917 	ldw	r2,-28(fp)
   4a154:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4a158:	e0fff517 	ldw	r3,-44(fp)
   4a15c:	e0bffd17 	ldw	r2,-12(fp)
   4a160:	18800426 	beq	r3,r2,4a174 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   4a164:	e0fff517 	ldw	r3,-44(fp)
   4a168:	e0bffd17 	ldw	r2,-12(fp)
   4a16c:	1885c83a 	sub	r2,r3,r2
   4a170:	00000606 	br	4a18c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4a174:	e0bfff17 	ldw	r2,-4(fp)
   4a178:	1090000c 	andi	r2,r2,16384
   4a17c:	10000226 	beq	r2,zero,4a188 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4a180:	00bffd44 	movi	r2,-11
   4a184:	00000106 	br	4a18c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4a188:	00bffec4 	movi	r2,-5
}
   4a18c:	e037883a 	mov	sp,fp
   4a190:	dfc00117 	ldw	ra,4(sp)
   4a194:	df000017 	ldw	fp,0(sp)
   4a198:	dec00204 	addi	sp,sp,8
   4a19c:	f800283a 	ret

0004a1a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4a1a0:	defff304 	addi	sp,sp,-52
   4a1a4:	dfc00c15 	stw	ra,48(sp)
   4a1a8:	df000b15 	stw	fp,44(sp)
   4a1ac:	df000b04 	addi	fp,sp,44
   4a1b0:	e13ffc15 	stw	r4,-16(fp)
   4a1b4:	e17ffd15 	stw	r5,-12(fp)
   4a1b8:	e1bffe15 	stw	r6,-8(fp)
   4a1bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4a1c0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4a1c4:	e0bffd17 	ldw	r2,-12(fp)
   4a1c8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4a1cc:	00003706 	br	4a2ac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4a1d0:	e0bffc17 	ldw	r2,-16(fp)
   4a1d4:	10800c17 	ldw	r2,48(r2)
   4a1d8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   4a1dc:	e0bffc17 	ldw	r2,-16(fp)
   4a1e0:	10800d17 	ldw	r2,52(r2)
   4a1e4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4a1e8:	e0fff917 	ldw	r3,-28(fp)
   4a1ec:	e0bff517 	ldw	r2,-44(fp)
   4a1f0:	1880062e 	bgeu	r3,r2,4a20c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4a1f4:	e0fff517 	ldw	r3,-44(fp)
   4a1f8:	e0bff917 	ldw	r2,-28(fp)
   4a1fc:	1885c83a 	sub	r2,r3,r2
   4a200:	10bfffc4 	addi	r2,r2,-1
   4a204:	e0bff615 	stw	r2,-40(fp)
   4a208:	00000b06 	br	4a238 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4a20c:	e0bff517 	ldw	r2,-44(fp)
   4a210:	10000526 	beq	r2,zero,4a228 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4a214:	00c20004 	movi	r3,2048
   4a218:	e0bff917 	ldw	r2,-28(fp)
   4a21c:	1885c83a 	sub	r2,r3,r2
   4a220:	e0bff615 	stw	r2,-40(fp)
   4a224:	00000406 	br	4a238 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4a228:	00c1ffc4 	movi	r3,2047
   4a22c:	e0bff917 	ldw	r2,-28(fp)
   4a230:	1885c83a 	sub	r2,r3,r2
   4a234:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4a238:	e0bff617 	ldw	r2,-40(fp)
   4a23c:	10001e26 	beq	r2,zero,4a2b8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4a240:	e0fffe17 	ldw	r3,-8(fp)
   4a244:	e0bff617 	ldw	r2,-40(fp)
   4a248:	1880022e 	bgeu	r3,r2,4a254 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4a24c:	e0bffe17 	ldw	r2,-8(fp)
   4a250:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4a254:	e0bffc17 	ldw	r2,-16(fp)
   4a258:	10c20e04 	addi	r3,r2,2104
   4a25c:	e0bff917 	ldw	r2,-28(fp)
   4a260:	1885883a 	add	r2,r3,r2
   4a264:	e1bff617 	ldw	r6,-40(fp)
   4a268:	e17ffd17 	ldw	r5,-12(fp)
   4a26c:	1009883a 	mov	r4,r2
   4a270:	00463980 	call	46398 <memcpy>
      ptr   += n;
   4a274:	e0fffd17 	ldw	r3,-12(fp)
   4a278:	e0bff617 	ldw	r2,-40(fp)
   4a27c:	1885883a 	add	r2,r3,r2
   4a280:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4a284:	e0fffe17 	ldw	r3,-8(fp)
   4a288:	e0bff617 	ldw	r2,-40(fp)
   4a28c:	1885c83a 	sub	r2,r3,r2
   4a290:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4a294:	e0fff917 	ldw	r3,-28(fp)
   4a298:	e0bff617 	ldw	r2,-40(fp)
   4a29c:	1885883a 	add	r2,r3,r2
   4a2a0:	10c1ffcc 	andi	r3,r2,2047
   4a2a4:	e0bffc17 	ldw	r2,-16(fp)
   4a2a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4a2ac:	e0bffe17 	ldw	r2,-8(fp)
   4a2b0:	00bfc716 	blt	zero,r2,4a1d0 <__alt_mem_epcs_flash_controller+0xfe0411d0>
   4a2b4:	00000106 	br	4a2bc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4a2b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a2bc:	0005303a 	rdctl	r2,status
   4a2c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a2c4:	e0fffb17 	ldw	r3,-20(fp)
   4a2c8:	00bfff84 	movi	r2,-2
   4a2cc:	1884703a 	and	r2,r3,r2
   4a2d0:	1001703a 	wrctl	status,r2
  
  return context;
   4a2d4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4a2d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4a2dc:	e0bffc17 	ldw	r2,-16(fp)
   4a2e0:	10800817 	ldw	r2,32(r2)
   4a2e4:	10c00094 	ori	r3,r2,2
   4a2e8:	e0bffc17 	ldw	r2,-16(fp)
   4a2ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4a2f0:	e0bffc17 	ldw	r2,-16(fp)
   4a2f4:	10800017 	ldw	r2,0(r2)
   4a2f8:	10800104 	addi	r2,r2,4
   4a2fc:	1007883a 	mov	r3,r2
   4a300:	e0bffc17 	ldw	r2,-16(fp)
   4a304:	10800817 	ldw	r2,32(r2)
   4a308:	18800035 	stwio	r2,0(r3)
   4a30c:	e0bffa17 	ldw	r2,-24(fp)
   4a310:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a314:	e0bff817 	ldw	r2,-32(fp)
   4a318:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4a31c:	e0bffe17 	ldw	r2,-8(fp)
   4a320:	0080100e 	bge	zero,r2,4a364 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4a324:	e0bfff17 	ldw	r2,-4(fp)
   4a328:	1090000c 	andi	r2,r2,16384
   4a32c:	1000101e 	bne	r2,zero,4a370 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4a330:	0001883a 	nop
   4a334:	e0bffc17 	ldw	r2,-16(fp)
   4a338:	10c00d17 	ldw	r3,52(r2)
   4a33c:	e0bff517 	ldw	r2,-44(fp)
   4a340:	1880051e 	bne	r3,r2,4a358 <altera_avalon_jtag_uart_write+0x1b8>
   4a344:	e0bffc17 	ldw	r2,-16(fp)
   4a348:	10c00917 	ldw	r3,36(r2)
   4a34c:	e0bffc17 	ldw	r2,-16(fp)
   4a350:	10800117 	ldw	r2,4(r2)
   4a354:	18bff736 	bltu	r3,r2,4a334 <__alt_mem_epcs_flash_controller+0xfe041334>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4a358:	e0bffc17 	ldw	r2,-16(fp)
   4a35c:	10800917 	ldw	r2,36(r2)
   4a360:	1000051e 	bne	r2,zero,4a378 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4a364:	e0bffe17 	ldw	r2,-8(fp)
   4a368:	00bfd016 	blt	zero,r2,4a2ac <__alt_mem_epcs_flash_controller+0xfe0412ac>
   4a36c:	00000306 	br	4a37c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4a370:	0001883a 	nop
   4a374:	00000106 	br	4a37c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4a378:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4a37c:	e0fffd17 	ldw	r3,-12(fp)
   4a380:	e0bff717 	ldw	r2,-36(fp)
   4a384:	18800426 	beq	r3,r2,4a398 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4a388:	e0fffd17 	ldw	r3,-12(fp)
   4a38c:	e0bff717 	ldw	r2,-36(fp)
   4a390:	1885c83a 	sub	r2,r3,r2
   4a394:	00000606 	br	4a3b0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4a398:	e0bfff17 	ldw	r2,-4(fp)
   4a39c:	1090000c 	andi	r2,r2,16384
   4a3a0:	10000226 	beq	r2,zero,4a3ac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4a3a4:	00bffd44 	movi	r2,-11
   4a3a8:	00000106 	br	4a3b0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4a3ac:	00bffec4 	movi	r2,-5
}
   4a3b0:	e037883a 	mov	sp,fp
   4a3b4:	dfc00117 	ldw	ra,4(sp)
   4a3b8:	df000017 	ldw	fp,0(sp)
   4a3bc:	dec00204 	addi	sp,sp,8
   4a3c0:	f800283a 	ret

0004a3c4 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   4a3c4:	defff904 	addi	sp,sp,-28
   4a3c8:	dfc00615 	stw	ra,24(sp)
   4a3cc:	df000515 	stw	fp,20(sp)
   4a3d0:	df000504 	addi	fp,sp,20
   4a3d4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
   4a3d8:	00800144 	movi	r2,5
   4a3dc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
   4a3e0:	d8000215 	stw	zero,8(sp)
   4a3e4:	e0bffe44 	addi	r2,fp,-7
   4a3e8:	d8800115 	stw	r2,4(sp)
   4a3ec:	00800044 	movi	r2,1
   4a3f0:	d8800015 	stw	r2,0(sp)
   4a3f4:	e1fffe04 	addi	r7,fp,-8
   4a3f8:	01800044 	movi	r6,1
   4a3fc:	000b883a 	mov	r5,zero
   4a400:	e13fff17 	ldw	r4,-4(fp)
   4a404:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
   4a408:	e0bffe43 	ldbu	r2,-7(fp)
}
   4a40c:	e037883a 	mov	sp,fp
   4a410:	dfc00117 	ldw	ra,4(sp)
   4a414:	df000017 	ldw	fp,0(sp)
   4a418:	dec00204 	addi	sp,sp,8
   4a41c:	f800283a 	ret

0004a420 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
   4a420:	defffd04 	addi	sp,sp,-12
   4a424:	dfc00215 	stw	ra,8(sp)
   4a428:	df000115 	stw	fp,4(sp)
   4a42c:	df000104 	addi	fp,sp,4
   4a430:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
   4a434:	e13fff17 	ldw	r4,-4(fp)
   4a438:	004a3c40 	call	4a3c4 <epcs_read_status_register>
   4a43c:	10803fcc 	andi	r2,r2,255
   4a440:	1080004c 	andi	r2,r2,1
}
   4a444:	e037883a 	mov	sp,fp
   4a448:	dfc00117 	ldw	ra,4(sp)
   4a44c:	df000017 	ldw	fp,0(sp)
   4a450:	dec00204 	addi	sp,sp,8
   4a454:	f800283a 	ret

0004a458 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   4a458:	defffd04 	addi	sp,sp,-12
   4a45c:	dfc00215 	stw	ra,8(sp)
   4a460:	df000115 	stw	fp,4(sp)
   4a464:	df000104 	addi	fp,sp,4
   4a468:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   4a46c:	0001883a 	nop
   4a470:	e13fff17 	ldw	r4,-4(fp)
   4a474:	004a4200 	call	4a420 <epcs_test_wip>
   4a478:	103ffd1e 	bne	r2,zero,4a470 <__alt_mem_epcs_flash_controller+0xfe041470>
  {
  }
}
   4a47c:	0001883a 	nop
   4a480:	e037883a 	mov	sp,fp
   4a484:	dfc00117 	ldw	ra,4(sp)
   4a488:	df000017 	ldw	fp,0(sp)
   4a48c:	dec00204 	addi	sp,sp,8
   4a490:	f800283a 	ret

0004a494 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   4a494:	defff604 	addi	sp,sp,-40
   4a498:	dfc00915 	stw	ra,36(sp)
   4a49c:	df000815 	stw	fp,32(sp)
   4a4a0:	df000804 	addi	fp,sp,32
   4a4a4:	e13ffd15 	stw	r4,-12(fp)
   4a4a8:	e17ffe15 	stw	r5,-8(fp)
   4a4ac:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   4a4b0:	e0bfff17 	ldw	r2,-4(fp)
   4a4b4:	10001226 	beq	r2,zero,4a500 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   4a4b8:	00bff604 	movi	r2,-40
   4a4bc:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
   4a4c0:	e0bffe17 	ldw	r2,-8(fp)
   4a4c4:	1004d63a 	srli	r2,r2,24
   4a4c8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
   4a4cc:	e0bffe17 	ldw	r2,-8(fp)
   4a4d0:	1004d43a 	srli	r2,r2,16
   4a4d4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
   4a4d8:	e0bffe17 	ldw	r2,-8(fp)
   4a4dc:	1004d23a 	srli	r2,r2,8
   4a4e0:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
   4a4e4:	e0bffe17 	ldw	r2,-8(fp)
   4a4e8:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
   4a4ec:	00800144 	movi	r2,5
   4a4f0:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
   4a4f4:	e13ffd17 	ldw	r4,-12(fp)
   4a4f8:	004a9480 	call	4a948 <epcs_enter_4_bytes_mode>
   4a4fc:	00000c06 	br	4a530 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
   4a500:	00bff604 	movi	r2,-40
   4a504:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
   4a508:	e0bffe17 	ldw	r2,-8(fp)
   4a50c:	1004d43a 	srli	r2,r2,16
   4a510:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
   4a514:	e0bffe17 	ldw	r2,-8(fp)
   4a518:	1004d23a 	srli	r2,r2,8
   4a51c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
   4a520:	e0bffe17 	ldw	r2,-8(fp)
   4a524:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
   4a528:	00800104 	movi	r2,4
   4a52c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   4a530:	e13ffd17 	ldw	r4,-12(fp)
   4a534:	004a6840 	call	4a684 <epcs_write_enable>

  alt_avalon_spi_command(
   4a538:	e0bffb03 	ldbu	r2,-20(fp)
   4a53c:	e0fffb44 	addi	r3,fp,-19
   4a540:	d8000215 	stw	zero,8(sp)
   4a544:	d8000115 	stw	zero,4(sp)
   4a548:	d8000015 	stw	zero,0(sp)
   4a54c:	180f883a 	mov	r7,r3
   4a550:	100d883a 	mov	r6,r2
   4a554:	000b883a 	mov	r5,zero
   4a558:	e13ffd17 	ldw	r4,-12(fp)
   4a55c:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   4a560:	e13ffd17 	ldw	r4,-12(fp)
   4a564:	004a4580 	call	4a458 <epcs_await_wip_released>

  if(four_bytes_mode)
   4a568:	e0bfff17 	ldw	r2,-4(fp)
   4a56c:	10000226 	beq	r2,zero,4a578 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
   4a570:	e13ffd17 	ldw	r4,-12(fp)
   4a574:	004a9a40 	call	4a9a4 <epcs_exit_4_bytes_mode>
  }
}
   4a578:	0001883a 	nop
   4a57c:	e037883a 	mov	sp,fp
   4a580:	dfc00117 	ldw	ra,4(sp)
   4a584:	df000017 	ldw	fp,0(sp)
   4a588:	dec00204 	addi	sp,sp,8
   4a58c:	f800283a 	ret

0004a590 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   4a590:	defff404 	addi	sp,sp,-48
   4a594:	dfc00b15 	stw	ra,44(sp)
   4a598:	df000a15 	stw	fp,40(sp)
   4a59c:	df000a04 	addi	fp,sp,40
   4a5a0:	e13ffc15 	stw	r4,-16(fp)
   4a5a4:	e17ffd15 	stw	r5,-12(fp)
   4a5a8:	e1bffe15 	stw	r6,-8(fp)
   4a5ac:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   4a5b0:	008000c4 	movi	r2,3
   4a5b4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   4a5b8:	e0800217 	ldw	r2,8(fp)
   4a5bc:	10001026 	beq	r2,zero,4a600 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   4a5c0:	e0bffd17 	ldw	r2,-12(fp)
   4a5c4:	1004d63a 	srli	r2,r2,24
   4a5c8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
   4a5cc:	e0bffd17 	ldw	r2,-12(fp)
   4a5d0:	1005d43a 	srai	r2,r2,16
   4a5d4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
   4a5d8:	e0bffd17 	ldw	r2,-12(fp)
   4a5dc:	1005d23a 	srai	r2,r2,8
   4a5e0:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
   4a5e4:	e0bffd17 	ldw	r2,-12(fp)
   4a5e8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
   4a5ec:	00800144 	movi	r2,5
   4a5f0:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
   4a5f4:	e13ffc17 	ldw	r4,-16(fp)
   4a5f8:	004a9480 	call	4a948 <epcs_enter_4_bytes_mode>
   4a5fc:	00000a06 	br	4a628 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   4a600:	e0bffd17 	ldw	r2,-12(fp)
   4a604:	1005d43a 	srai	r2,r2,16
   4a608:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
   4a60c:	e0bffd17 	ldw	r2,-12(fp)
   4a610:	1005d23a 	srai	r2,r2,8
   4a614:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
   4a618:	e0bffd17 	ldw	r2,-12(fp)
   4a61c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
   4a620:	00800104 	movi	r2,4
   4a624:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
   4a628:	e13ffc17 	ldw	r4,-16(fp)
   4a62c:	004a4580 	call	4a458 <epcs_await_wip_released>

  alt_avalon_spi_command(
   4a630:	e0bfff17 	ldw	r2,-4(fp)
   4a634:	e13ffa04 	addi	r4,fp,-24
   4a638:	d8000215 	stw	zero,8(sp)
   4a63c:	e0fffe17 	ldw	r3,-8(fp)
   4a640:	d8c00115 	stw	r3,4(sp)
   4a644:	d8800015 	stw	r2,0(sp)
   4a648:	200f883a 	mov	r7,r4
   4a64c:	e1bff917 	ldw	r6,-28(fp)
   4a650:	000b883a 	mov	r5,zero
   4a654:	e13ffc17 	ldw	r4,-16(fp)
   4a658:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
   4a65c:	e0800217 	ldw	r2,8(fp)
   4a660:	10000226 	beq	r2,zero,4a66c <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
   4a664:	e13ffc17 	ldw	r4,-16(fp)
   4a668:	004a9a40 	call	4a9a4 <epcs_exit_4_bytes_mode>
  }

  return length;
   4a66c:	e0bfff17 	ldw	r2,-4(fp)
}
   4a670:	e037883a 	mov	sp,fp
   4a674:	dfc00117 	ldw	ra,4(sp)
   4a678:	df000017 	ldw	fp,0(sp)
   4a67c:	dec00204 	addi	sp,sp,8
   4a680:	f800283a 	ret

0004a684 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
   4a684:	defff904 	addi	sp,sp,-28
   4a688:	dfc00615 	stw	ra,24(sp)
   4a68c:	df000515 	stw	fp,20(sp)
   4a690:	df000504 	addi	fp,sp,20
   4a694:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
   4a698:	00800184 	movi	r2,6
   4a69c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
   4a6a0:	d8000215 	stw	zero,8(sp)
   4a6a4:	d8000115 	stw	zero,4(sp)
   4a6a8:	d8000015 	stw	zero,0(sp)
   4a6ac:	e1fffe04 	addi	r7,fp,-8
   4a6b0:	01800044 	movi	r6,1
   4a6b4:	000b883a 	mov	r5,zero
   4a6b8:	e13fff17 	ldw	r4,-4(fp)
   4a6bc:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   4a6c0:	0001883a 	nop
   4a6c4:	e037883a 	mov	sp,fp
   4a6c8:	dfc00117 	ldw	ra,4(sp)
   4a6cc:	df000017 	ldw	fp,0(sp)
   4a6d0:	dec00204 	addi	sp,sp,8
   4a6d4:	f800283a 	ret

0004a6d8 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   4a6d8:	defff804 	addi	sp,sp,-32
   4a6dc:	dfc00715 	stw	ra,28(sp)
   4a6e0:	df000615 	stw	fp,24(sp)
   4a6e4:	df000604 	addi	fp,sp,24
   4a6e8:	e13ffe15 	stw	r4,-8(fp)
   4a6ec:	2805883a 	mov	r2,r5
   4a6f0:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   4a6f4:	00800044 	movi	r2,1
   4a6f8:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
   4a6fc:	e0bfff03 	ldbu	r2,-4(fp)
   4a700:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
   4a704:	d8000215 	stw	zero,8(sp)
   4a708:	d8000115 	stw	zero,4(sp)
   4a70c:	d8000015 	stw	zero,0(sp)
   4a710:	e1fffd04 	addi	r7,fp,-12
   4a714:	01800084 	movi	r6,2
   4a718:	000b883a 	mov	r5,zero
   4a71c:	e13ffe17 	ldw	r4,-8(fp)
   4a720:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   4a724:	e13ffe17 	ldw	r4,-8(fp)
   4a728:	004a4580 	call	4a458 <epcs_await_wip_released>
}
   4a72c:	0001883a 	nop
   4a730:	e037883a 	mov	sp,fp
   4a734:	dfc00117 	ldw	ra,4(sp)
   4a738:	df000017 	ldw	fp,0(sp)
   4a73c:	dec00204 	addi	sp,sp,8
   4a740:	f800283a 	ret

0004a744 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   4a744:	defff404 	addi	sp,sp,-48
   4a748:	dfc00b15 	stw	ra,44(sp)
   4a74c:	df000a15 	stw	fp,40(sp)
   4a750:	df000a04 	addi	fp,sp,40
   4a754:	e13ffc15 	stw	r4,-16(fp)
   4a758:	e17ffd15 	stw	r5,-12(fp)
   4a75c:	e1bffe15 	stw	r6,-8(fp)
   4a760:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   4a764:	00800084 	movi	r2,2
   4a768:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   4a76c:	e0800217 	ldw	r2,8(fp)
   4a770:	10001026 	beq	r2,zero,4a7b4 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
   4a774:	e0bffd17 	ldw	r2,-12(fp)
   4a778:	1004d63a 	srli	r2,r2,24
   4a77c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
   4a780:	e0bffd17 	ldw	r2,-12(fp)
   4a784:	1005d43a 	srai	r2,r2,16
   4a788:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
   4a78c:	e0bffd17 	ldw	r2,-12(fp)
   4a790:	1005d23a 	srai	r2,r2,8
   4a794:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
   4a798:	e0bffd17 	ldw	r2,-12(fp)
   4a79c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
   4a7a0:	00800144 	movi	r2,5
   4a7a4:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
   4a7a8:	e13ffc17 	ldw	r4,-16(fp)
   4a7ac:	004a9480 	call	4a948 <epcs_enter_4_bytes_mode>
   4a7b0:	00000a06 	br	4a7dc <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   4a7b4:	e0bffd17 	ldw	r2,-12(fp)
   4a7b8:	1005d43a 	srai	r2,r2,16
   4a7bc:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
   4a7c0:	e0bffd17 	ldw	r2,-12(fp)
   4a7c4:	1005d23a 	srai	r2,r2,8
   4a7c8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
   4a7cc:	e0bffd17 	ldw	r2,-12(fp)
   4a7d0:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
   4a7d4:	00800104 	movi	r2,4
   4a7d8:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
   4a7dc:	e13ffc17 	ldw	r4,-16(fp)
   4a7e0:	004a6840 	call	4a684 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   4a7e4:	e0fffa04 	addi	r3,fp,-24
   4a7e8:	00800044 	movi	r2,1
   4a7ec:	d8800215 	stw	r2,8(sp)
   4a7f0:	d8000115 	stw	zero,4(sp)
   4a7f4:	d8000015 	stw	zero,0(sp)
   4a7f8:	180f883a 	mov	r7,r3
   4a7fc:	e1bff917 	ldw	r6,-28(fp)
   4a800:	000b883a 	mov	r5,zero
   4a804:	e13ffc17 	ldw	r4,-16(fp)
   4a808:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   4a80c:	e0bfff17 	ldw	r2,-4(fp)
   4a810:	d8000215 	stw	zero,8(sp)
   4a814:	d8000115 	stw	zero,4(sp)
   4a818:	d8000015 	stw	zero,0(sp)
   4a81c:	e1fffe17 	ldw	r7,-8(fp)
   4a820:	100d883a 	mov	r6,r2
   4a824:	000b883a 	mov	r5,zero
   4a828:	e13ffc17 	ldw	r4,-16(fp)
   4a82c:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   4a830:	e13ffc17 	ldw	r4,-16(fp)
   4a834:	004a4580 	call	4a458 <epcs_await_wip_released>

  if(four_bytes_mode)
   4a838:	e0800217 	ldw	r2,8(fp)
   4a83c:	10000226 	beq	r2,zero,4a848 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
   4a840:	e13ffc17 	ldw	r4,-16(fp)
   4a844:	004a9a40 	call	4a9a4 <epcs_exit_4_bytes_mode>
  }

  return length;
   4a848:	e0bfff17 	ldw	r2,-4(fp)
}
   4a84c:	e037883a 	mov	sp,fp
   4a850:	dfc00117 	ldw	ra,4(sp)
   4a854:	df000017 	ldw	fp,0(sp)
   4a858:	dec00204 	addi	sp,sp,8
   4a85c:	f800283a 	ret

0004a860 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   4a860:	defff804 	addi	sp,sp,-32
   4a864:	dfc00715 	stw	ra,28(sp)
   4a868:	df000615 	stw	fp,24(sp)
   4a86c:	df000604 	addi	fp,sp,24
   4a870:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   4a874:	00bfeac4 	movi	r2,-85
   4a878:	e0bffd05 	stb	r2,-12(fp)
   4a87c:	e03ffd45 	stb	zero,-11(fp)
   4a880:	e03ffd85 	stb	zero,-10(fp)
   4a884:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
   4a888:	d8000215 	stw	zero,8(sp)
   4a88c:	e0bffe04 	addi	r2,fp,-8
   4a890:	d8800115 	stw	r2,4(sp)
   4a894:	00800044 	movi	r2,1
   4a898:	d8800015 	stw	r2,0(sp)
   4a89c:	e1fffd04 	addi	r7,fp,-12
   4a8a0:	01800104 	movi	r6,4
   4a8a4:	000b883a 	mov	r5,zero
   4a8a8:	e13fff17 	ldw	r4,-4(fp)
   4a8ac:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
   4a8b0:	e0bffe03 	ldbu	r2,-8(fp)
}
   4a8b4:	e037883a 	mov	sp,fp
   4a8b8:	dfc00117 	ldw	ra,4(sp)
   4a8bc:	df000017 	ldw	fp,0(sp)
   4a8c0:	dec00204 	addi	sp,sp,8
   4a8c4:	f800283a 	ret

0004a8c8 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
   4a8c8:	defff904 	addi	sp,sp,-28
   4a8cc:	dfc00615 	stw	ra,24(sp)
   4a8d0:	df000515 	stw	fp,20(sp)
   4a8d4:	df000504 	addi	fp,sp,20
   4a8d8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   4a8dc:	00bfe7c4 	movi	r2,-97
   4a8e0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   4a8e4:	d8000215 	stw	zero,8(sp)
   4a8e8:	e0bffe44 	addi	r2,fp,-7
   4a8ec:	d8800115 	stw	r2,4(sp)
   4a8f0:	008000c4 	movi	r2,3
   4a8f4:	d8800015 	stw	r2,0(sp)
   4a8f8:	e1fffe04 	addi	r7,fp,-8
   4a8fc:	01800044 	movi	r6,1
   4a900:	000b883a 	mov	r5,zero
   4a904:	e13fff17 	ldw	r4,-4(fp)
   4a908:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
   4a90c:	e0bffe43 	ldbu	r2,-7(fp)
   4a910:	10803fcc 	andi	r2,r2,255
   4a914:	1006943a 	slli	r3,r2,16
   4a918:	e0bffe83 	ldbu	r2,-6(fp)
   4a91c:	10803fcc 	andi	r2,r2,255
   4a920:	1004923a 	slli	r2,r2,8
   4a924:	1886b03a 	or	r3,r3,r2
   4a928:	e0bffec3 	ldbu	r2,-5(fp)
   4a92c:	10803fcc 	andi	r2,r2,255
   4a930:	1884b03a 	or	r2,r3,r2
}
   4a934:	e037883a 	mov	sp,fp
   4a938:	dfc00117 	ldw	ra,4(sp)
   4a93c:	df000017 	ldw	fp,0(sp)
   4a940:	dec00204 	addi	sp,sp,8
   4a944:	f800283a 	ret

0004a948 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   4a948:	defff904 	addi	sp,sp,-28
   4a94c:	dfc00615 	stw	ra,24(sp)
   4a950:	df000515 	stw	fp,20(sp)
   4a954:	df000504 	addi	fp,sp,20
   4a958:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
   4a95c:	00bfedc4 	movi	r2,-73
   4a960:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   4a964:	e13fff17 	ldw	r4,-4(fp)
   4a968:	004a6840 	call	4a684 <epcs_write_enable>

  alt_avalon_spi_command(
   4a96c:	d8000215 	stw	zero,8(sp)
   4a970:	d8000115 	stw	zero,4(sp)
   4a974:	d8000015 	stw	zero,0(sp)
   4a978:	e1fffe04 	addi	r7,fp,-8
   4a97c:	01800044 	movi	r6,1
   4a980:	000b883a 	mov	r5,zero
   4a984:	e13fff17 	ldw	r4,-4(fp)
   4a988:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   4a98c:	0001883a 	nop
}
   4a990:	e037883a 	mov	sp,fp
   4a994:	dfc00117 	ldw	ra,4(sp)
   4a998:	df000017 	ldw	fp,0(sp)
   4a99c:	dec00204 	addi	sp,sp,8
   4a9a0:	f800283a 	ret

0004a9a4 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   4a9a4:	defff904 	addi	sp,sp,-28
   4a9a8:	dfc00615 	stw	ra,24(sp)
   4a9ac:	df000515 	stw	fp,20(sp)
   4a9b0:	df000504 	addi	fp,sp,20
   4a9b4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   4a9b8:	00bffa44 	movi	r2,-23
   4a9bc:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   4a9c0:	e13fff17 	ldw	r4,-4(fp)
   4a9c4:	004a6840 	call	4a684 <epcs_write_enable>

  alt_avalon_spi_command(
   4a9c8:	d8000215 	stw	zero,8(sp)
   4a9cc:	d8000115 	stw	zero,4(sp)
   4a9d0:	d8000015 	stw	zero,0(sp)
   4a9d4:	e1fffe04 	addi	r7,fp,-8
   4a9d8:	01800044 	movi	r6,1
   4a9dc:	000b883a 	mov	r5,zero
   4a9e0:	e13fff17 	ldw	r4,-4(fp)
   4a9e4:	004b5f80 	call	4b5f8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   4a9e8:	0001883a 	nop
}
   4a9ec:	e037883a 	mov	sp,fp
   4a9f0:	dfc00117 	ldw	ra,4(sp)
   4a9f4:	df000017 	ldw	fp,0(sp)
   4a9f8:	dec00204 	addi	sp,sp,8
   4a9fc:	f800283a 	ret

0004aa00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4aa00:	defff504 	addi	sp,sp,-44
   4aa04:	df000a15 	stw	fp,40(sp)
   4aa08:	df000a04 	addi	fp,sp,40
   4aa0c:	e13ffc15 	stw	r4,-16(fp)
   4aa10:	e17ffd15 	stw	r5,-12(fp)
   4aa14:	e1bffe15 	stw	r6,-8(fp)
   4aa18:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4aa1c:	e03ff615 	stw	zero,-40(fp)
   4aa20:	d0a55617 	ldw	r2,-27304(gp)
  
  if (alt_ticks_per_second ())
   4aa24:	10003c26 	beq	r2,zero,4ab18 <alt_alarm_start+0x118>
  {
    if (alarm)
   4aa28:	e0bffc17 	ldw	r2,-16(fp)
   4aa2c:	10003826 	beq	r2,zero,4ab10 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   4aa30:	e0bffc17 	ldw	r2,-16(fp)
   4aa34:	e0fffe17 	ldw	r3,-8(fp)
   4aa38:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4aa3c:	e0bffc17 	ldw	r2,-16(fp)
   4aa40:	e0ffff17 	ldw	r3,-4(fp)
   4aa44:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4aa48:	0005303a 	rdctl	r2,status
   4aa4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4aa50:	e0fff917 	ldw	r3,-28(fp)
   4aa54:	00bfff84 	movi	r2,-2
   4aa58:	1884703a 	and	r2,r3,r2
   4aa5c:	1001703a 	wrctl	status,r2
  
  return context;
   4aa60:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   4aa64:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4aa68:	d0a55717 	ldw	r2,-27300(gp)
      
      current_nticks = alt_nticks();
   4aa6c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4aa70:	e0fffd17 	ldw	r3,-12(fp)
   4aa74:	e0bff617 	ldw	r2,-40(fp)
   4aa78:	1885883a 	add	r2,r3,r2
   4aa7c:	10c00044 	addi	r3,r2,1
   4aa80:	e0bffc17 	ldw	r2,-16(fp)
   4aa84:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4aa88:	e0bffc17 	ldw	r2,-16(fp)
   4aa8c:	10c00217 	ldw	r3,8(r2)
   4aa90:	e0bff617 	ldw	r2,-40(fp)
   4aa94:	1880042e 	bgeu	r3,r2,4aaa8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   4aa98:	e0bffc17 	ldw	r2,-16(fp)
   4aa9c:	00c00044 	movi	r3,1
   4aaa0:	10c00405 	stb	r3,16(r2)
   4aaa4:	00000206 	br	4aab0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   4aaa8:	e0bffc17 	ldw	r2,-16(fp)
   4aaac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4aab0:	e0bffc17 	ldw	r2,-16(fp)
   4aab4:	d0e01904 	addi	r3,gp,-32668
   4aab8:	e0fffa15 	stw	r3,-24(fp)
   4aabc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4aac0:	e0bffb17 	ldw	r2,-20(fp)
   4aac4:	e0fffa17 	ldw	r3,-24(fp)
   4aac8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4aacc:	e0bffa17 	ldw	r2,-24(fp)
   4aad0:	10c00017 	ldw	r3,0(r2)
   4aad4:	e0bffb17 	ldw	r2,-20(fp)
   4aad8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4aadc:	e0bffa17 	ldw	r2,-24(fp)
   4aae0:	10800017 	ldw	r2,0(r2)
   4aae4:	e0fffb17 	ldw	r3,-20(fp)
   4aae8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4aaec:	e0bffa17 	ldw	r2,-24(fp)
   4aaf0:	e0fffb17 	ldw	r3,-20(fp)
   4aaf4:	10c00015 	stw	r3,0(r2)
   4aaf8:	e0bff817 	ldw	r2,-32(fp)
   4aafc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ab00:	e0bff717 	ldw	r2,-36(fp)
   4ab04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4ab08:	0005883a 	mov	r2,zero
   4ab0c:	00000306 	br	4ab1c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   4ab10:	00bffa84 	movi	r2,-22
   4ab14:	00000106 	br	4ab1c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   4ab18:	00bfde84 	movi	r2,-134
  }
}
   4ab1c:	e037883a 	mov	sp,fp
   4ab20:	df000017 	ldw	fp,0(sp)
   4ab24:	dec00104 	addi	sp,sp,4
   4ab28:	f800283a 	ret

0004ab2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ab2c:	defffe04 	addi	sp,sp,-8
   4ab30:	dfc00115 	stw	ra,4(sp)
   4ab34:	df000015 	stw	fp,0(sp)
   4ab38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ab3c:	d0a02017 	ldw	r2,-32640(gp)
   4ab40:	10000326 	beq	r2,zero,4ab50 <alt_get_errno+0x24>
   4ab44:	d0a02017 	ldw	r2,-32640(gp)
   4ab48:	103ee83a 	callr	r2
   4ab4c:	00000106 	br	4ab54 <alt_get_errno+0x28>
   4ab50:	d0a54e04 	addi	r2,gp,-27336
}
   4ab54:	e037883a 	mov	sp,fp
   4ab58:	dfc00117 	ldw	ra,4(sp)
   4ab5c:	df000017 	ldw	fp,0(sp)
   4ab60:	dec00204 	addi	sp,sp,8
   4ab64:	f800283a 	ret

0004ab68 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4ab68:	defffb04 	addi	sp,sp,-20
   4ab6c:	dfc00415 	stw	ra,16(sp)
   4ab70:	df000315 	stw	fp,12(sp)
   4ab74:	df000304 	addi	fp,sp,12
   4ab78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4ab7c:	e0bfff17 	ldw	r2,-4(fp)
   4ab80:	10000616 	blt	r2,zero,4ab9c <close+0x34>
   4ab84:	e0bfff17 	ldw	r2,-4(fp)
   4ab88:	10c00324 	muli	r3,r2,12
   4ab8c:	008001b4 	movhi	r2,6
   4ab90:	10a01204 	addi	r2,r2,-32696
   4ab94:	1885883a 	add	r2,r3,r2
   4ab98:	00000106 	br	4aba0 <close+0x38>
   4ab9c:	0005883a 	mov	r2,zero
   4aba0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4aba4:	e0bffd17 	ldw	r2,-12(fp)
   4aba8:	10001926 	beq	r2,zero,4ac10 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4abac:	e0bffd17 	ldw	r2,-12(fp)
   4abb0:	10800017 	ldw	r2,0(r2)
   4abb4:	10800417 	ldw	r2,16(r2)
   4abb8:	10000626 	beq	r2,zero,4abd4 <close+0x6c>
   4abbc:	e0bffd17 	ldw	r2,-12(fp)
   4abc0:	10800017 	ldw	r2,0(r2)
   4abc4:	10800417 	ldw	r2,16(r2)
   4abc8:	e13ffd17 	ldw	r4,-12(fp)
   4abcc:	103ee83a 	callr	r2
   4abd0:	00000106 	br	4abd8 <close+0x70>
   4abd4:	0005883a 	mov	r2,zero
   4abd8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4abdc:	e13fff17 	ldw	r4,-4(fp)
   4abe0:	004b5700 	call	4b570 <alt_release_fd>
    if (rval < 0)
   4abe4:	e0bffe17 	ldw	r2,-8(fp)
   4abe8:	1000070e 	bge	r2,zero,4ac08 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4abec:	004ab2c0 	call	4ab2c <alt_get_errno>
   4abf0:	1007883a 	mov	r3,r2
   4abf4:	e0bffe17 	ldw	r2,-8(fp)
   4abf8:	0085c83a 	sub	r2,zero,r2
   4abfc:	18800015 	stw	r2,0(r3)
      return -1;
   4ac00:	00bfffc4 	movi	r2,-1
   4ac04:	00000706 	br	4ac24 <close+0xbc>
    }
    return 0;
   4ac08:	0005883a 	mov	r2,zero
   4ac0c:	00000506 	br	4ac24 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ac10:	004ab2c0 	call	4ab2c <alt_get_errno>
   4ac14:	1007883a 	mov	r3,r2
   4ac18:	00801444 	movi	r2,81
   4ac1c:	18800015 	stw	r2,0(r3)
    return -1;
   4ac20:	00bfffc4 	movi	r2,-1
  }
}
   4ac24:	e037883a 	mov	sp,fp
   4ac28:	dfc00117 	ldw	ra,4(sp)
   4ac2c:	df000017 	ldw	fp,0(sp)
   4ac30:	dec00204 	addi	sp,sp,8
   4ac34:	f800283a 	ret

0004ac38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4ac38:	defffe04 	addi	sp,sp,-8
   4ac3c:	df000115 	stw	fp,4(sp)
   4ac40:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4ac44:	e03fff15 	stw	zero,-4(fp)
   4ac48:	00000506 	br	4ac60 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4ac4c:	e0bfff17 	ldw	r2,-4(fp)
   4ac50:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4ac54:	e0bfff17 	ldw	r2,-4(fp)
   4ac58:	10800804 	addi	r2,r2,32
   4ac5c:	e0bfff15 	stw	r2,-4(fp)
   4ac60:	e0bfff17 	ldw	r2,-4(fp)
   4ac64:	10840030 	cmpltui	r2,r2,4096
   4ac68:	103ff81e 	bne	r2,zero,4ac4c <__alt_mem_epcs_flash_controller+0xfe041c4c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4ac6c:	0001883a 	nop
   4ac70:	e037883a 	mov	sp,fp
   4ac74:	df000017 	ldw	fp,0(sp)
   4ac78:	dec00104 	addi	sp,sp,4
   4ac7c:	f800283a 	ret

0004ac80 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ac80:	defffc04 	addi	sp,sp,-16
   4ac84:	df000315 	stw	fp,12(sp)
   4ac88:	df000304 	addi	fp,sp,12
   4ac8c:	e13ffd15 	stw	r4,-12(fp)
   4ac90:	e17ffe15 	stw	r5,-8(fp)
   4ac94:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4ac98:	e0bfff17 	ldw	r2,-4(fp)
}
   4ac9c:	e037883a 	mov	sp,fp
   4aca0:	df000017 	ldw	fp,0(sp)
   4aca4:	dec00104 	addi	sp,sp,4
   4aca8:	f800283a 	ret

0004acac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4acac:	defffe04 	addi	sp,sp,-8
   4acb0:	dfc00115 	stw	ra,4(sp)
   4acb4:	df000015 	stw	fp,0(sp)
   4acb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4acbc:	d0a02017 	ldw	r2,-32640(gp)
   4acc0:	10000326 	beq	r2,zero,4acd0 <alt_get_errno+0x24>
   4acc4:	d0a02017 	ldw	r2,-32640(gp)
   4acc8:	103ee83a 	callr	r2
   4accc:	00000106 	br	4acd4 <alt_get_errno+0x28>
   4acd0:	d0a54e04 	addi	r2,gp,-27336
}
   4acd4:	e037883a 	mov	sp,fp
   4acd8:	dfc00117 	ldw	ra,4(sp)
   4acdc:	df000017 	ldw	fp,0(sp)
   4ace0:	dec00204 	addi	sp,sp,8
   4ace4:	f800283a 	ret

0004ace8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4ace8:	defffa04 	addi	sp,sp,-24
   4acec:	dfc00515 	stw	ra,20(sp)
   4acf0:	df000415 	stw	fp,16(sp)
   4acf4:	df000404 	addi	fp,sp,16
   4acf8:	e13ffe15 	stw	r4,-8(fp)
   4acfc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4ad00:	e0bffe17 	ldw	r2,-8(fp)
   4ad04:	10000326 	beq	r2,zero,4ad14 <alt_dev_llist_insert+0x2c>
   4ad08:	e0bffe17 	ldw	r2,-8(fp)
   4ad0c:	10800217 	ldw	r2,8(r2)
   4ad10:	1000061e 	bne	r2,zero,4ad2c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4ad14:	004acac0 	call	4acac <alt_get_errno>
   4ad18:	1007883a 	mov	r3,r2
   4ad1c:	00800584 	movi	r2,22
   4ad20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4ad24:	00bffa84 	movi	r2,-22
   4ad28:	00001306 	br	4ad78 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4ad2c:	e0bffe17 	ldw	r2,-8(fp)
   4ad30:	e0ffff17 	ldw	r3,-4(fp)
   4ad34:	e0fffc15 	stw	r3,-16(fp)
   4ad38:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ad3c:	e0bffd17 	ldw	r2,-12(fp)
   4ad40:	e0fffc17 	ldw	r3,-16(fp)
   4ad44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4ad48:	e0bffc17 	ldw	r2,-16(fp)
   4ad4c:	10c00017 	ldw	r3,0(r2)
   4ad50:	e0bffd17 	ldw	r2,-12(fp)
   4ad54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ad58:	e0bffc17 	ldw	r2,-16(fp)
   4ad5c:	10800017 	ldw	r2,0(r2)
   4ad60:	e0fffd17 	ldw	r3,-12(fp)
   4ad64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4ad68:	e0bffc17 	ldw	r2,-16(fp)
   4ad6c:	e0fffd17 	ldw	r3,-12(fp)
   4ad70:	10c00015 	stw	r3,0(r2)

  return 0;  
   4ad74:	0005883a 	mov	r2,zero
}
   4ad78:	e037883a 	mov	sp,fp
   4ad7c:	dfc00117 	ldw	ra,4(sp)
   4ad80:	df000017 	ldw	fp,0(sp)
   4ad84:	dec00204 	addi	sp,sp,8
   4ad88:	f800283a 	ret

0004ad8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4ad8c:	defffd04 	addi	sp,sp,-12
   4ad90:	dfc00215 	stw	ra,8(sp)
   4ad94:	df000115 	stw	fp,4(sp)
   4ad98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4ad9c:	00800174 	movhi	r2,5
   4ada0:	10af3104 	addi	r2,r2,-17212
   4ada4:	e0bfff15 	stw	r2,-4(fp)
   4ada8:	00000606 	br	4adc4 <_do_ctors+0x38>
        (*ctor) (); 
   4adac:	e0bfff17 	ldw	r2,-4(fp)
   4adb0:	10800017 	ldw	r2,0(r2)
   4adb4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4adb8:	e0bfff17 	ldw	r2,-4(fp)
   4adbc:	10bfff04 	addi	r2,r2,-4
   4adc0:	e0bfff15 	stw	r2,-4(fp)
   4adc4:	e0ffff17 	ldw	r3,-4(fp)
   4adc8:	00800174 	movhi	r2,5
   4adcc:	10af3204 	addi	r2,r2,-17208
   4add0:	18bff62e 	bgeu	r3,r2,4adac <__alt_mem_epcs_flash_controller+0xfe041dac>
        (*ctor) (); 
}
   4add4:	0001883a 	nop
   4add8:	e037883a 	mov	sp,fp
   4addc:	dfc00117 	ldw	ra,4(sp)
   4ade0:	df000017 	ldw	fp,0(sp)
   4ade4:	dec00204 	addi	sp,sp,8
   4ade8:	f800283a 	ret

0004adec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4adec:	defffd04 	addi	sp,sp,-12
   4adf0:	dfc00215 	stw	ra,8(sp)
   4adf4:	df000115 	stw	fp,4(sp)
   4adf8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4adfc:	00800174 	movhi	r2,5
   4ae00:	10af3104 	addi	r2,r2,-17212
   4ae04:	e0bfff15 	stw	r2,-4(fp)
   4ae08:	00000606 	br	4ae24 <_do_dtors+0x38>
        (*dtor) (); 
   4ae0c:	e0bfff17 	ldw	r2,-4(fp)
   4ae10:	10800017 	ldw	r2,0(r2)
   4ae14:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4ae18:	e0bfff17 	ldw	r2,-4(fp)
   4ae1c:	10bfff04 	addi	r2,r2,-4
   4ae20:	e0bfff15 	stw	r2,-4(fp)
   4ae24:	e0ffff17 	ldw	r3,-4(fp)
   4ae28:	00800174 	movhi	r2,5
   4ae2c:	10af3204 	addi	r2,r2,-17208
   4ae30:	18bff62e 	bgeu	r3,r2,4ae0c <__alt_mem_epcs_flash_controller+0xfe041e0c>
        (*dtor) (); 
}
   4ae34:	0001883a 	nop
   4ae38:	e037883a 	mov	sp,fp
   4ae3c:	dfc00117 	ldw	ra,4(sp)
   4ae40:	df000017 	ldw	fp,0(sp)
   4ae44:	dec00204 	addi	sp,sp,8
   4ae48:	f800283a 	ret

0004ae4c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   4ae4c:	defffc04 	addi	sp,sp,-16
   4ae50:	dfc00315 	stw	ra,12(sp)
   4ae54:	df000215 	stw	fp,8(sp)
   4ae58:	df000204 	addi	fp,sp,8
   4ae5c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   4ae60:	d1602104 	addi	r5,gp,-32636
   4ae64:	e13fff17 	ldw	r4,-4(fp)
   4ae68:	004b7f40 	call	4b7f4 <alt_find_dev>
   4ae6c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   4ae70:	e0bffe17 	ldw	r2,-8(fp)
   4ae74:	10000926 	beq	r2,zero,4ae9c <alt_flash_open_dev+0x50>
   4ae78:	e0bffe17 	ldw	r2,-8(fp)
   4ae7c:	10800317 	ldw	r2,12(r2)
   4ae80:	10000626 	beq	r2,zero,4ae9c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   4ae84:	e0bffe17 	ldw	r2,-8(fp)
   4ae88:	10800317 	ldw	r2,12(r2)
   4ae8c:	e17fff17 	ldw	r5,-4(fp)
   4ae90:	e13ffe17 	ldw	r4,-8(fp)
   4ae94:	103ee83a 	callr	r2
   4ae98:	00000106 	br	4aea0 <alt_flash_open_dev+0x54>
  }

  return dev;
   4ae9c:	e0bffe17 	ldw	r2,-8(fp)
}
   4aea0:	e037883a 	mov	sp,fp
   4aea4:	dfc00117 	ldw	ra,4(sp)
   4aea8:	df000017 	ldw	fp,0(sp)
   4aeac:	dec00204 	addi	sp,sp,8
   4aeb0:	f800283a 	ret

0004aeb4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   4aeb4:	defffd04 	addi	sp,sp,-12
   4aeb8:	dfc00215 	stw	ra,8(sp)
   4aebc:	df000115 	stw	fp,4(sp)
   4aec0:	df000104 	addi	fp,sp,4
   4aec4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   4aec8:	e0bfff17 	ldw	r2,-4(fp)
   4aecc:	10000826 	beq	r2,zero,4aef0 <alt_flash_close_dev+0x3c>
   4aed0:	e0bfff17 	ldw	r2,-4(fp)
   4aed4:	10800417 	ldw	r2,16(r2)
   4aed8:	10000526 	beq	r2,zero,4aef0 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   4aedc:	e0bfff17 	ldw	r2,-4(fp)
   4aee0:	10800417 	ldw	r2,16(r2)
   4aee4:	e13fff17 	ldw	r4,-4(fp)
   4aee8:	103ee83a 	callr	r2
  }
  return;
   4aeec:	0001883a 	nop
   4aef0:	0001883a 	nop
}
   4aef4:	e037883a 	mov	sp,fp
   4aef8:	dfc00117 	ldw	ra,4(sp)
   4aefc:	df000017 	ldw	fp,0(sp)
   4af00:	dec00204 	addi	sp,sp,8
   4af04:	f800283a 	ret

0004af08 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4af08:	defffe04 	addi	sp,sp,-8
   4af0c:	dfc00115 	stw	ra,4(sp)
   4af10:	df000015 	stw	fp,0(sp)
   4af14:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4af18:	01480004 	movi	r5,8192
   4af1c:	0009883a 	mov	r4,zero
   4af20:	004ba300 	call	4ba30 <alt_icache_flush>
#endif
}
   4af24:	0001883a 	nop
   4af28:	e037883a 	mov	sp,fp
   4af2c:	dfc00117 	ldw	ra,4(sp)
   4af30:	df000017 	ldw	fp,0(sp)
   4af34:	dec00204 	addi	sp,sp,8
   4af38:	f800283a 	ret

0004af3c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4af3c:	defff904 	addi	sp,sp,-28
   4af40:	dfc00615 	stw	ra,24(sp)
   4af44:	df000515 	stw	fp,20(sp)
   4af48:	df000504 	addi	fp,sp,20
   4af4c:	e13ffc15 	stw	r4,-16(fp)
   4af50:	e17ffd15 	stw	r5,-12(fp)
   4af54:	e1bffe15 	stw	r6,-8(fp)
   4af58:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4af5c:	e0800217 	ldw	r2,8(fp)
   4af60:	d8800015 	stw	r2,0(sp)
   4af64:	e1ffff17 	ldw	r7,-4(fp)
   4af68:	e1bffe17 	ldw	r6,-8(fp)
   4af6c:	e17ffd17 	ldw	r5,-12(fp)
   4af70:	e13ffc17 	ldw	r4,-16(fp)
   4af74:	004b0ec0 	call	4b0ec <alt_iic_isr_register>
}  
   4af78:	e037883a 	mov	sp,fp
   4af7c:	dfc00117 	ldw	ra,4(sp)
   4af80:	df000017 	ldw	fp,0(sp)
   4af84:	dec00204 	addi	sp,sp,8
   4af88:	f800283a 	ret

0004af8c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4af8c:	defff904 	addi	sp,sp,-28
   4af90:	df000615 	stw	fp,24(sp)
   4af94:	df000604 	addi	fp,sp,24
   4af98:	e13ffe15 	stw	r4,-8(fp)
   4af9c:	e17fff15 	stw	r5,-4(fp)
   4afa0:	e0bfff17 	ldw	r2,-4(fp)
   4afa4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4afa8:	0005303a 	rdctl	r2,status
   4afac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4afb0:	e0fffb17 	ldw	r3,-20(fp)
   4afb4:	00bfff84 	movi	r2,-2
   4afb8:	1884703a 	and	r2,r3,r2
   4afbc:	1001703a 	wrctl	status,r2
  
  return context;
   4afc0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4afc4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4afc8:	00c00044 	movi	r3,1
   4afcc:	e0bffa17 	ldw	r2,-24(fp)
   4afd0:	1884983a 	sll	r2,r3,r2
   4afd4:	1007883a 	mov	r3,r2
   4afd8:	d0a55817 	ldw	r2,-27296(gp)
   4afdc:	1884b03a 	or	r2,r3,r2
   4afe0:	d0a55815 	stw	r2,-27296(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4afe4:	d0a55817 	ldw	r2,-27296(gp)
   4afe8:	100170fa 	wrctl	ienable,r2
   4afec:	e0bffc17 	ldw	r2,-16(fp)
   4aff0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4aff4:	e0bffd17 	ldw	r2,-12(fp)
   4aff8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4affc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4b000:	0001883a 	nop
}
   4b004:	e037883a 	mov	sp,fp
   4b008:	df000017 	ldw	fp,0(sp)
   4b00c:	dec00104 	addi	sp,sp,4
   4b010:	f800283a 	ret

0004b014 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4b014:	defff904 	addi	sp,sp,-28
   4b018:	df000615 	stw	fp,24(sp)
   4b01c:	df000604 	addi	fp,sp,24
   4b020:	e13ffe15 	stw	r4,-8(fp)
   4b024:	e17fff15 	stw	r5,-4(fp)
   4b028:	e0bfff17 	ldw	r2,-4(fp)
   4b02c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b030:	0005303a 	rdctl	r2,status
   4b034:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b038:	e0fffb17 	ldw	r3,-20(fp)
   4b03c:	00bfff84 	movi	r2,-2
   4b040:	1884703a 	and	r2,r3,r2
   4b044:	1001703a 	wrctl	status,r2
  
  return context;
   4b048:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4b04c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4b050:	00c00044 	movi	r3,1
   4b054:	e0bffa17 	ldw	r2,-24(fp)
   4b058:	1884983a 	sll	r2,r3,r2
   4b05c:	0084303a 	nor	r2,zero,r2
   4b060:	1007883a 	mov	r3,r2
   4b064:	d0a55817 	ldw	r2,-27296(gp)
   4b068:	1884703a 	and	r2,r3,r2
   4b06c:	d0a55815 	stw	r2,-27296(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4b070:	d0a55817 	ldw	r2,-27296(gp)
   4b074:	100170fa 	wrctl	ienable,r2
   4b078:	e0bffc17 	ldw	r2,-16(fp)
   4b07c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b080:	e0bffd17 	ldw	r2,-12(fp)
   4b084:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4b088:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4b08c:	0001883a 	nop
}
   4b090:	e037883a 	mov	sp,fp
   4b094:	df000017 	ldw	fp,0(sp)
   4b098:	dec00104 	addi	sp,sp,4
   4b09c:	f800283a 	ret

0004b0a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4b0a0:	defffc04 	addi	sp,sp,-16
   4b0a4:	df000315 	stw	fp,12(sp)
   4b0a8:	df000304 	addi	fp,sp,12
   4b0ac:	e13ffe15 	stw	r4,-8(fp)
   4b0b0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4b0b4:	000530fa 	rdctl	r2,ienable
   4b0b8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4b0bc:	00c00044 	movi	r3,1
   4b0c0:	e0bfff17 	ldw	r2,-4(fp)
   4b0c4:	1884983a 	sll	r2,r3,r2
   4b0c8:	1007883a 	mov	r3,r2
   4b0cc:	e0bffd17 	ldw	r2,-12(fp)
   4b0d0:	1884703a 	and	r2,r3,r2
   4b0d4:	1004c03a 	cmpne	r2,r2,zero
   4b0d8:	10803fcc 	andi	r2,r2,255
}
   4b0dc:	e037883a 	mov	sp,fp
   4b0e0:	df000017 	ldw	fp,0(sp)
   4b0e4:	dec00104 	addi	sp,sp,4
   4b0e8:	f800283a 	ret

0004b0ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4b0ec:	defff504 	addi	sp,sp,-44
   4b0f0:	dfc00a15 	stw	ra,40(sp)
   4b0f4:	df000915 	stw	fp,36(sp)
   4b0f8:	df000904 	addi	fp,sp,36
   4b0fc:	e13ffc15 	stw	r4,-16(fp)
   4b100:	e17ffd15 	stw	r5,-12(fp)
   4b104:	e1bffe15 	stw	r6,-8(fp)
   4b108:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4b10c:	00bffa84 	movi	r2,-22
   4b110:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4b114:	e0bffd17 	ldw	r2,-12(fp)
   4b118:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4b11c:	e0bff817 	ldw	r2,-32(fp)
   4b120:	10800808 	cmpgei	r2,r2,32
   4b124:	1000271e 	bne	r2,zero,4b1c4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b128:	0005303a 	rdctl	r2,status
   4b12c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b130:	e0fffb17 	ldw	r3,-20(fp)
   4b134:	00bfff84 	movi	r2,-2
   4b138:	1884703a 	and	r2,r3,r2
   4b13c:	1001703a 	wrctl	status,r2
  
  return context;
   4b140:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4b144:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   4b148:	008001b4 	movhi	r2,6
   4b14c:	10acb204 	addi	r2,r2,-19768
   4b150:	e0fff817 	ldw	r3,-32(fp)
   4b154:	180690fa 	slli	r3,r3,3
   4b158:	10c5883a 	add	r2,r2,r3
   4b15c:	e0fffe17 	ldw	r3,-8(fp)
   4b160:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4b164:	008001b4 	movhi	r2,6
   4b168:	10acb204 	addi	r2,r2,-19768
   4b16c:	e0fff817 	ldw	r3,-32(fp)
   4b170:	180690fa 	slli	r3,r3,3
   4b174:	10c5883a 	add	r2,r2,r3
   4b178:	10800104 	addi	r2,r2,4
   4b17c:	e0ffff17 	ldw	r3,-4(fp)
   4b180:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4b184:	e0bffe17 	ldw	r2,-8(fp)
   4b188:	10000526 	beq	r2,zero,4b1a0 <alt_iic_isr_register+0xb4>
   4b18c:	e0bff817 	ldw	r2,-32(fp)
   4b190:	100b883a 	mov	r5,r2
   4b194:	e13ffc17 	ldw	r4,-16(fp)
   4b198:	004af8c0 	call	4af8c <alt_ic_irq_enable>
   4b19c:	00000406 	br	4b1b0 <alt_iic_isr_register+0xc4>
   4b1a0:	e0bff817 	ldw	r2,-32(fp)
   4b1a4:	100b883a 	mov	r5,r2
   4b1a8:	e13ffc17 	ldw	r4,-16(fp)
   4b1ac:	004b0140 	call	4b014 <alt_ic_irq_disable>
   4b1b0:	e0bff715 	stw	r2,-36(fp)
   4b1b4:	e0bffa17 	ldw	r2,-24(fp)
   4b1b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b1bc:	e0bff917 	ldw	r2,-28(fp)
   4b1c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4b1c4:	e0bff717 	ldw	r2,-36(fp)
}
   4b1c8:	e037883a 	mov	sp,fp
   4b1cc:	dfc00117 	ldw	ra,4(sp)
   4b1d0:	df000017 	ldw	fp,0(sp)
   4b1d4:	dec00204 	addi	sp,sp,8
   4b1d8:	f800283a 	ret

0004b1dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4b1dc:	defff904 	addi	sp,sp,-28
   4b1e0:	dfc00615 	stw	ra,24(sp)
   4b1e4:	df000515 	stw	fp,20(sp)
   4b1e8:	df000504 	addi	fp,sp,20
   4b1ec:	e13ffc15 	stw	r4,-16(fp)
   4b1f0:	e17ffd15 	stw	r5,-12(fp)
   4b1f4:	e1bffe15 	stw	r6,-8(fp)
   4b1f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4b1fc:	e1bfff17 	ldw	r6,-4(fp)
   4b200:	e17ffe17 	ldw	r5,-8(fp)
   4b204:	e13ffd17 	ldw	r4,-12(fp)
   4b208:	004b41c0 	call	4b41c <open>
   4b20c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4b210:	e0bffb17 	ldw	r2,-20(fp)
   4b214:	10001c16 	blt	r2,zero,4b288 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4b218:	008001b4 	movhi	r2,6
   4b21c:	10a01204 	addi	r2,r2,-32696
   4b220:	e0fffb17 	ldw	r3,-20(fp)
   4b224:	18c00324 	muli	r3,r3,12
   4b228:	10c5883a 	add	r2,r2,r3
   4b22c:	10c00017 	ldw	r3,0(r2)
   4b230:	e0bffc17 	ldw	r2,-16(fp)
   4b234:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4b238:	008001b4 	movhi	r2,6
   4b23c:	10a01204 	addi	r2,r2,-32696
   4b240:	e0fffb17 	ldw	r3,-20(fp)
   4b244:	18c00324 	muli	r3,r3,12
   4b248:	10c5883a 	add	r2,r2,r3
   4b24c:	10800104 	addi	r2,r2,4
   4b250:	10c00017 	ldw	r3,0(r2)
   4b254:	e0bffc17 	ldw	r2,-16(fp)
   4b258:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4b25c:	008001b4 	movhi	r2,6
   4b260:	10a01204 	addi	r2,r2,-32696
   4b264:	e0fffb17 	ldw	r3,-20(fp)
   4b268:	18c00324 	muli	r3,r3,12
   4b26c:	10c5883a 	add	r2,r2,r3
   4b270:	10800204 	addi	r2,r2,8
   4b274:	10c00017 	ldw	r3,0(r2)
   4b278:	e0bffc17 	ldw	r2,-16(fp)
   4b27c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4b280:	e13ffb17 	ldw	r4,-20(fp)
   4b284:	004b5700 	call	4b570 <alt_release_fd>
  }
} 
   4b288:	0001883a 	nop
   4b28c:	e037883a 	mov	sp,fp
   4b290:	dfc00117 	ldw	ra,4(sp)
   4b294:	df000017 	ldw	fp,0(sp)
   4b298:	dec00204 	addi	sp,sp,8
   4b29c:	f800283a 	ret

0004b2a0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4b2a0:	defffb04 	addi	sp,sp,-20
   4b2a4:	dfc00415 	stw	ra,16(sp)
   4b2a8:	df000315 	stw	fp,12(sp)
   4b2ac:	df000304 	addi	fp,sp,12
   4b2b0:	e13ffd15 	stw	r4,-12(fp)
   4b2b4:	e17ffe15 	stw	r5,-8(fp)
   4b2b8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4b2bc:	01c07fc4 	movi	r7,511
   4b2c0:	01800044 	movi	r6,1
   4b2c4:	e17ffd17 	ldw	r5,-12(fp)
   4b2c8:	010001b4 	movhi	r4,6
   4b2cc:	21201504 	addi	r4,r4,-32684
   4b2d0:	004b1dc0 	call	4b1dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4b2d4:	01c07fc4 	movi	r7,511
   4b2d8:	000d883a 	mov	r6,zero
   4b2dc:	e17ffe17 	ldw	r5,-8(fp)
   4b2e0:	010001b4 	movhi	r4,6
   4b2e4:	21201204 	addi	r4,r4,-32696
   4b2e8:	004b1dc0 	call	4b1dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4b2ec:	01c07fc4 	movi	r7,511
   4b2f0:	01800044 	movi	r6,1
   4b2f4:	e17fff17 	ldw	r5,-4(fp)
   4b2f8:	010001b4 	movhi	r4,6
   4b2fc:	21201804 	addi	r4,r4,-32672
   4b300:	004b1dc0 	call	4b1dc <alt_open_fd>
}  
   4b304:	0001883a 	nop
   4b308:	e037883a 	mov	sp,fp
   4b30c:	dfc00117 	ldw	ra,4(sp)
   4b310:	df000017 	ldw	fp,0(sp)
   4b314:	dec00204 	addi	sp,sp,8
   4b318:	f800283a 	ret

0004b31c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b31c:	defffe04 	addi	sp,sp,-8
   4b320:	dfc00115 	stw	ra,4(sp)
   4b324:	df000015 	stw	fp,0(sp)
   4b328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b32c:	d0a02017 	ldw	r2,-32640(gp)
   4b330:	10000326 	beq	r2,zero,4b340 <alt_get_errno+0x24>
   4b334:	d0a02017 	ldw	r2,-32640(gp)
   4b338:	103ee83a 	callr	r2
   4b33c:	00000106 	br	4b344 <alt_get_errno+0x28>
   4b340:	d0a54e04 	addi	r2,gp,-27336
}
   4b344:	e037883a 	mov	sp,fp
   4b348:	dfc00117 	ldw	ra,4(sp)
   4b34c:	df000017 	ldw	fp,0(sp)
   4b350:	dec00204 	addi	sp,sp,8
   4b354:	f800283a 	ret

0004b358 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4b358:	defffd04 	addi	sp,sp,-12
   4b35c:	df000215 	stw	fp,8(sp)
   4b360:	df000204 	addi	fp,sp,8
   4b364:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4b368:	e0bfff17 	ldw	r2,-4(fp)
   4b36c:	10800217 	ldw	r2,8(r2)
   4b370:	10d00034 	orhi	r3,r2,16384
   4b374:	e0bfff17 	ldw	r2,-4(fp)
   4b378:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4b37c:	e03ffe15 	stw	zero,-8(fp)
   4b380:	00001d06 	br	4b3f8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4b384:	008001b4 	movhi	r2,6
   4b388:	10a01204 	addi	r2,r2,-32696
   4b38c:	e0fffe17 	ldw	r3,-8(fp)
   4b390:	18c00324 	muli	r3,r3,12
   4b394:	10c5883a 	add	r2,r2,r3
   4b398:	10c00017 	ldw	r3,0(r2)
   4b39c:	e0bfff17 	ldw	r2,-4(fp)
   4b3a0:	10800017 	ldw	r2,0(r2)
   4b3a4:	1880111e 	bne	r3,r2,4b3ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4b3a8:	008001b4 	movhi	r2,6
   4b3ac:	10a01204 	addi	r2,r2,-32696
   4b3b0:	e0fffe17 	ldw	r3,-8(fp)
   4b3b4:	18c00324 	muli	r3,r3,12
   4b3b8:	10c5883a 	add	r2,r2,r3
   4b3bc:	10800204 	addi	r2,r2,8
   4b3c0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4b3c4:	1000090e 	bge	r2,zero,4b3ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4b3c8:	e0bffe17 	ldw	r2,-8(fp)
   4b3cc:	10c00324 	muli	r3,r2,12
   4b3d0:	008001b4 	movhi	r2,6
   4b3d4:	10a01204 	addi	r2,r2,-32696
   4b3d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4b3dc:	e0bfff17 	ldw	r2,-4(fp)
   4b3e0:	18800226 	beq	r3,r2,4b3ec <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4b3e4:	00bffcc4 	movi	r2,-13
   4b3e8:	00000806 	br	4b40c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4b3ec:	e0bffe17 	ldw	r2,-8(fp)
   4b3f0:	10800044 	addi	r2,r2,1
   4b3f4:	e0bffe15 	stw	r2,-8(fp)
   4b3f8:	d0a01f17 	ldw	r2,-32644(gp)
   4b3fc:	1007883a 	mov	r3,r2
   4b400:	e0bffe17 	ldw	r2,-8(fp)
   4b404:	18bfdf2e 	bgeu	r3,r2,4b384 <__alt_mem_epcs_flash_controller+0xfe042384>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4b408:	0005883a 	mov	r2,zero
}
   4b40c:	e037883a 	mov	sp,fp
   4b410:	df000017 	ldw	fp,0(sp)
   4b414:	dec00104 	addi	sp,sp,4
   4b418:	f800283a 	ret

0004b41c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4b41c:	defff604 	addi	sp,sp,-40
   4b420:	dfc00915 	stw	ra,36(sp)
   4b424:	df000815 	stw	fp,32(sp)
   4b428:	df000804 	addi	fp,sp,32
   4b42c:	e13ffd15 	stw	r4,-12(fp)
   4b430:	e17ffe15 	stw	r5,-8(fp)
   4b434:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4b438:	00bfffc4 	movi	r2,-1
   4b43c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4b440:	00bffb44 	movi	r2,-19
   4b444:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4b448:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4b44c:	d1601d04 	addi	r5,gp,-32652
   4b450:	e13ffd17 	ldw	r4,-12(fp)
   4b454:	004b7f40 	call	4b7f4 <alt_find_dev>
   4b458:	e0bff815 	stw	r2,-32(fp)
   4b45c:	e0bff817 	ldw	r2,-32(fp)
   4b460:	1000051e 	bne	r2,zero,4b478 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4b464:	e13ffd17 	ldw	r4,-12(fp)
   4b468:	004b8840 	call	4b884 <alt_find_file>
   4b46c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4b470:	00800044 	movi	r2,1
   4b474:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4b478:	e0bff817 	ldw	r2,-32(fp)
   4b47c:	10002926 	beq	r2,zero,4b524 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4b480:	e13ff817 	ldw	r4,-32(fp)
   4b484:	004b98c0 	call	4b98c <alt_get_fd>
   4b488:	e0bff915 	stw	r2,-28(fp)
   4b48c:	e0bff917 	ldw	r2,-28(fp)
   4b490:	1000030e 	bge	r2,zero,4b4a0 <open+0x84>
    {
      status = index;
   4b494:	e0bff917 	ldw	r2,-28(fp)
   4b498:	e0bffa15 	stw	r2,-24(fp)
   4b49c:	00002306 	br	4b52c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4b4a0:	e0bff917 	ldw	r2,-28(fp)
   4b4a4:	10c00324 	muli	r3,r2,12
   4b4a8:	008001b4 	movhi	r2,6
   4b4ac:	10a01204 	addi	r2,r2,-32696
   4b4b0:	1885883a 	add	r2,r3,r2
   4b4b4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4b4b8:	e0fffe17 	ldw	r3,-8(fp)
   4b4bc:	00900034 	movhi	r2,16384
   4b4c0:	10bfffc4 	addi	r2,r2,-1
   4b4c4:	1886703a 	and	r3,r3,r2
   4b4c8:	e0bffc17 	ldw	r2,-16(fp)
   4b4cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4b4d0:	e0bffb17 	ldw	r2,-20(fp)
   4b4d4:	1000051e 	bne	r2,zero,4b4ec <open+0xd0>
   4b4d8:	e13ffc17 	ldw	r4,-16(fp)
   4b4dc:	004b3580 	call	4b358 <alt_file_locked>
   4b4e0:	e0bffa15 	stw	r2,-24(fp)
   4b4e4:	e0bffa17 	ldw	r2,-24(fp)
   4b4e8:	10001016 	blt	r2,zero,4b52c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4b4ec:	e0bff817 	ldw	r2,-32(fp)
   4b4f0:	10800317 	ldw	r2,12(r2)
   4b4f4:	10000826 	beq	r2,zero,4b518 <open+0xfc>
   4b4f8:	e0bff817 	ldw	r2,-32(fp)
   4b4fc:	10800317 	ldw	r2,12(r2)
   4b500:	e1ffff17 	ldw	r7,-4(fp)
   4b504:	e1bffe17 	ldw	r6,-8(fp)
   4b508:	e17ffd17 	ldw	r5,-12(fp)
   4b50c:	e13ffc17 	ldw	r4,-16(fp)
   4b510:	103ee83a 	callr	r2
   4b514:	00000106 	br	4b51c <open+0x100>
   4b518:	0005883a 	mov	r2,zero
   4b51c:	e0bffa15 	stw	r2,-24(fp)
   4b520:	00000206 	br	4b52c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4b524:	00bffb44 	movi	r2,-19
   4b528:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4b52c:	e0bffa17 	ldw	r2,-24(fp)
   4b530:	1000090e 	bge	r2,zero,4b558 <open+0x13c>
  {
    alt_release_fd (index);  
   4b534:	e13ff917 	ldw	r4,-28(fp)
   4b538:	004b5700 	call	4b570 <alt_release_fd>
    ALT_ERRNO = -status;
   4b53c:	004b31c0 	call	4b31c <alt_get_errno>
   4b540:	1007883a 	mov	r3,r2
   4b544:	e0bffa17 	ldw	r2,-24(fp)
   4b548:	0085c83a 	sub	r2,zero,r2
   4b54c:	18800015 	stw	r2,0(r3)
    return -1;
   4b550:	00bfffc4 	movi	r2,-1
   4b554:	00000106 	br	4b55c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4b558:	e0bff917 	ldw	r2,-28(fp)
}
   4b55c:	e037883a 	mov	sp,fp
   4b560:	dfc00117 	ldw	ra,4(sp)
   4b564:	df000017 	ldw	fp,0(sp)
   4b568:	dec00204 	addi	sp,sp,8
   4b56c:	f800283a 	ret

0004b570 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4b570:	defffe04 	addi	sp,sp,-8
   4b574:	df000115 	stw	fp,4(sp)
   4b578:	df000104 	addi	fp,sp,4
   4b57c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4b580:	e0bfff17 	ldw	r2,-4(fp)
   4b584:	108000d0 	cmplti	r2,r2,3
   4b588:	10000d1e 	bne	r2,zero,4b5c0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4b58c:	008001b4 	movhi	r2,6
   4b590:	10a01204 	addi	r2,r2,-32696
   4b594:	e0ffff17 	ldw	r3,-4(fp)
   4b598:	18c00324 	muli	r3,r3,12
   4b59c:	10c5883a 	add	r2,r2,r3
   4b5a0:	10800204 	addi	r2,r2,8
   4b5a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4b5a8:	008001b4 	movhi	r2,6
   4b5ac:	10a01204 	addi	r2,r2,-32696
   4b5b0:	e0ffff17 	ldw	r3,-4(fp)
   4b5b4:	18c00324 	muli	r3,r3,12
   4b5b8:	10c5883a 	add	r2,r2,r3
   4b5bc:	10000015 	stw	zero,0(r2)
  }
}
   4b5c0:	0001883a 	nop
   4b5c4:	e037883a 	mov	sp,fp
   4b5c8:	df000017 	ldw	fp,0(sp)
   4b5cc:	dec00104 	addi	sp,sp,4
   4b5d0:	f800283a 	ret

0004b5d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4b5d4:	deffff04 	addi	sp,sp,-4
   4b5d8:	df000015 	stw	fp,0(sp)
   4b5dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4b5e0:	000170fa 	wrctl	ienable,zero
}
   4b5e4:	0001883a 	nop
   4b5e8:	e037883a 	mov	sp,fp
   4b5ec:	df000017 	ldw	fp,0(sp)
   4b5f0:	dec00104 	addi	sp,sp,4
   4b5f4:	f800283a 	ret

0004b5f8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   4b5f8:	defff404 	addi	sp,sp,-48
   4b5fc:	df000b15 	stw	fp,44(sp)
   4b600:	df000b04 	addi	fp,sp,44
   4b604:	e13ffc15 	stw	r4,-16(fp)
   4b608:	e17ffd15 	stw	r5,-12(fp)
   4b60c:	e1bffe15 	stw	r6,-8(fp)
   4b610:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   4b614:	e0ffff17 	ldw	r3,-4(fp)
   4b618:	e0bffe17 	ldw	r2,-8(fp)
   4b61c:	1885883a 	add	r2,r3,r2
   4b620:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   4b624:	e0c00217 	ldw	r3,8(fp)
   4b628:	e0800117 	ldw	r2,4(fp)
   4b62c:	1885883a 	add	r2,r3,r2
   4b630:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   4b634:	e0800117 	ldw	r2,4(fp)
   4b638:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   4b63c:	e0bffe17 	ldw	r2,-8(fp)
   4b640:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   4b644:	00800044 	movi	r2,1
   4b648:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   4b64c:	e0bffc17 	ldw	r2,-16(fp)
   4b650:	10800504 	addi	r2,r2,20
   4b654:	1009883a 	mov	r4,r2
   4b658:	00c00044 	movi	r3,1
   4b65c:	e0bffd17 	ldw	r2,-12(fp)
   4b660:	1884983a 	sll	r2,r3,r2
   4b664:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   4b668:	e0800317 	ldw	r2,12(fp)
   4b66c:	1080008c 	andi	r2,r2,2
   4b670:	1000051e 	bne	r2,zero,4b688 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   4b674:	e0bffc17 	ldw	r2,-16(fp)
   4b678:	10800304 	addi	r2,r2,12
   4b67c:	1007883a 	mov	r3,r2
   4b680:	00810004 	movi	r2,1024
   4b684:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4b688:	e0bffc17 	ldw	r2,-16(fp)
   4b68c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4b690:	e0bffc17 	ldw	r2,-16(fp)
   4b694:	10800204 	addi	r2,r2,8
   4b698:	10800037 	ldwio	r2,0(r2)
   4b69c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4b6a0:	e0bffa17 	ldw	r2,-24(fp)
   4b6a4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4b6a8:	10000226 	beq	r2,zero,4b6b4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4b6ac:	e0bff717 	ldw	r2,-36(fp)
   4b6b0:	1000031e 	bne	r2,zero,4b6c0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   4b6b4:	e0bffa17 	ldw	r2,-24(fp)
   4b6b8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   4b6bc:	103ff426 	beq	r2,zero,4b690 <__alt_mem_epcs_flash_controller+0xfe042690>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   4b6c0:	e0bffa17 	ldw	r2,-24(fp)
   4b6c4:	1080100c 	andi	r2,r2,64
   4b6c8:	10001e26 	beq	r2,zero,4b744 <alt_avalon_spi_command+0x14c>
   4b6cc:	e0bff717 	ldw	r2,-36(fp)
   4b6d0:	00801c0e 	bge	zero,r2,4b744 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   4b6d4:	e0bff717 	ldw	r2,-36(fp)
   4b6d8:	10bfffc4 	addi	r2,r2,-1
   4b6dc:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   4b6e0:	e0ffff17 	ldw	r3,-4(fp)
   4b6e4:	e0bff817 	ldw	r2,-32(fp)
   4b6e8:	18800a2e 	bgeu	r3,r2,4b714 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   4b6ec:	e0bffc17 	ldw	r2,-16(fp)
   4b6f0:	10800104 	addi	r2,r2,4
   4b6f4:	1009883a 	mov	r4,r2
   4b6f8:	e0bfff17 	ldw	r2,-4(fp)
   4b6fc:	10c00044 	addi	r3,r2,1
   4b700:	e0ffff15 	stw	r3,-4(fp)
   4b704:	10800003 	ldbu	r2,0(r2)
   4b708:	10803fcc 	andi	r2,r2,255
   4b70c:	20800035 	stwio	r2,0(r4)
   4b710:	00000c06 	br	4b744 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   4b714:	e0bff517 	ldw	r2,-44(fp)
   4b718:	10000826 	beq	r2,zero,4b73c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   4b71c:	e0bff517 	ldw	r2,-44(fp)
   4b720:	10bfffc4 	addi	r2,r2,-1
   4b724:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   4b728:	e0bffc17 	ldw	r2,-16(fp)
   4b72c:	10800104 	addi	r2,r2,4
   4b730:	0007883a 	mov	r3,zero
   4b734:	10c00035 	stwio	r3,0(r2)
   4b738:	00000206 	br	4b744 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   4b73c:	00bf0004 	movi	r2,-1024
   4b740:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   4b744:	e0bffa17 	ldw	r2,-24(fp)
   4b748:	1080200c 	andi	r2,r2,128
   4b74c:	103fd026 	beq	r2,zero,4b690 <__alt_mem_epcs_flash_controller+0xfe042690>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   4b750:	e0bffc17 	ldw	r2,-16(fp)
   4b754:	10800037 	ldwio	r2,0(r2)
   4b758:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   4b75c:	e0bff617 	ldw	r2,-40(fp)
   4b760:	10000426 	beq	r2,zero,4b774 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   4b764:	e0bff617 	ldw	r2,-40(fp)
   4b768:	10bfffc4 	addi	r2,r2,-1
   4b76c:	e0bff615 	stw	r2,-40(fp)
   4b770:	00000506 	br	4b788 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   4b774:	e0800217 	ldw	r2,8(fp)
   4b778:	10c00044 	addi	r3,r2,1
   4b77c:	e0c00215 	stw	r3,8(fp)
   4b780:	e0fffb17 	ldw	r3,-20(fp)
   4b784:	10c00005 	stb	r3,0(r2)
      credits++;
   4b788:	e0bff717 	ldw	r2,-36(fp)
   4b78c:	10800044 	addi	r2,r2,1
   4b790:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   4b794:	e0bff617 	ldw	r2,-40(fp)
   4b798:	103fbd1e 	bne	r2,zero,4b690 <__alt_mem_epcs_flash_controller+0xfe042690>
   4b79c:	e0c00217 	ldw	r3,8(fp)
   4b7a0:	e0bff917 	ldw	r2,-28(fp)
   4b7a4:	18bfba1e 	bne	r3,r2,4b690 <__alt_mem_epcs_flash_controller+0xfe042690>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   4b7a8:	e0bffc17 	ldw	r2,-16(fp)
   4b7ac:	10800204 	addi	r2,r2,8
   4b7b0:	10800037 	ldwio	r2,0(r2)
   4b7b4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   4b7b8:	e0bffa17 	ldw	r2,-24(fp)
   4b7bc:	1080080c 	andi	r2,r2,32
   4b7c0:	103ff926 	beq	r2,zero,4b7a8 <__alt_mem_epcs_flash_controller+0xfe0427a8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   4b7c4:	e0800317 	ldw	r2,12(fp)
   4b7c8:	1080004c 	andi	r2,r2,1
   4b7cc:	1000041e 	bne	r2,zero,4b7e0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   4b7d0:	e0bffc17 	ldw	r2,-16(fp)
   4b7d4:	10800304 	addi	r2,r2,12
   4b7d8:	0007883a 	mov	r3,zero
   4b7dc:	10c00035 	stwio	r3,0(r2)

  return read_length;
   4b7e0:	e0800117 	ldw	r2,4(fp)
}
   4b7e4:	e037883a 	mov	sp,fp
   4b7e8:	df000017 	ldw	fp,0(sp)
   4b7ec:	dec00104 	addi	sp,sp,4
   4b7f0:	f800283a 	ret

0004b7f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4b7f4:	defffa04 	addi	sp,sp,-24
   4b7f8:	dfc00515 	stw	ra,20(sp)
   4b7fc:	df000415 	stw	fp,16(sp)
   4b800:	df000404 	addi	fp,sp,16
   4b804:	e13ffe15 	stw	r4,-8(fp)
   4b808:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4b80c:	e0bfff17 	ldw	r2,-4(fp)
   4b810:	10800017 	ldw	r2,0(r2)
   4b814:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4b818:	e13ffe17 	ldw	r4,-8(fp)
   4b81c:	0046c3c0 	call	46c3c <strlen>
   4b820:	10800044 	addi	r2,r2,1
   4b824:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4b828:	00000d06 	br	4b860 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4b82c:	e0bffc17 	ldw	r2,-16(fp)
   4b830:	10800217 	ldw	r2,8(r2)
   4b834:	e0fffd17 	ldw	r3,-12(fp)
   4b838:	180d883a 	mov	r6,r3
   4b83c:	e17ffe17 	ldw	r5,-8(fp)
   4b840:	1009883a 	mov	r4,r2
   4b844:	00463680 	call	46368 <memcmp>
   4b848:	1000021e 	bne	r2,zero,4b854 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4b84c:	e0bffc17 	ldw	r2,-16(fp)
   4b850:	00000706 	br	4b870 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4b854:	e0bffc17 	ldw	r2,-16(fp)
   4b858:	10800017 	ldw	r2,0(r2)
   4b85c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4b860:	e0fffc17 	ldw	r3,-16(fp)
   4b864:	e0bfff17 	ldw	r2,-4(fp)
   4b868:	18bff01e 	bne	r3,r2,4b82c <__alt_mem_epcs_flash_controller+0xfe04282c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4b86c:	0005883a 	mov	r2,zero
}
   4b870:	e037883a 	mov	sp,fp
   4b874:	dfc00117 	ldw	ra,4(sp)
   4b878:	df000017 	ldw	fp,0(sp)
   4b87c:	dec00204 	addi	sp,sp,8
   4b880:	f800283a 	ret

0004b884 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4b884:	defffb04 	addi	sp,sp,-20
   4b888:	dfc00415 	stw	ra,16(sp)
   4b88c:	df000315 	stw	fp,12(sp)
   4b890:	df000304 	addi	fp,sp,12
   4b894:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4b898:	d0a01b17 	ldw	r2,-32660(gp)
   4b89c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4b8a0:	00003106 	br	4b968 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4b8a4:	e0bffd17 	ldw	r2,-12(fp)
   4b8a8:	10800217 	ldw	r2,8(r2)
   4b8ac:	1009883a 	mov	r4,r2
   4b8b0:	0046c3c0 	call	46c3c <strlen>
   4b8b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4b8b8:	e0bffd17 	ldw	r2,-12(fp)
   4b8bc:	10c00217 	ldw	r3,8(r2)
   4b8c0:	e0bffe17 	ldw	r2,-8(fp)
   4b8c4:	10bfffc4 	addi	r2,r2,-1
   4b8c8:	1885883a 	add	r2,r3,r2
   4b8cc:	10800003 	ldbu	r2,0(r2)
   4b8d0:	10803fcc 	andi	r2,r2,255
   4b8d4:	1080201c 	xori	r2,r2,128
   4b8d8:	10bfe004 	addi	r2,r2,-128
   4b8dc:	10800bd8 	cmpnei	r2,r2,47
   4b8e0:	1000031e 	bne	r2,zero,4b8f0 <alt_find_file+0x6c>
    {
      len -= 1;
   4b8e4:	e0bffe17 	ldw	r2,-8(fp)
   4b8e8:	10bfffc4 	addi	r2,r2,-1
   4b8ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4b8f0:	e0bffe17 	ldw	r2,-8(fp)
   4b8f4:	e0ffff17 	ldw	r3,-4(fp)
   4b8f8:	1885883a 	add	r2,r3,r2
   4b8fc:	10800003 	ldbu	r2,0(r2)
   4b900:	10803fcc 	andi	r2,r2,255
   4b904:	1080201c 	xori	r2,r2,128
   4b908:	10bfe004 	addi	r2,r2,-128
   4b90c:	10800be0 	cmpeqi	r2,r2,47
   4b910:	1000081e 	bne	r2,zero,4b934 <alt_find_file+0xb0>
   4b914:	e0bffe17 	ldw	r2,-8(fp)
   4b918:	e0ffff17 	ldw	r3,-4(fp)
   4b91c:	1885883a 	add	r2,r3,r2
   4b920:	10800003 	ldbu	r2,0(r2)
   4b924:	10803fcc 	andi	r2,r2,255
   4b928:	1080201c 	xori	r2,r2,128
   4b92c:	10bfe004 	addi	r2,r2,-128
   4b930:	10000a1e 	bne	r2,zero,4b95c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4b934:	e0bffd17 	ldw	r2,-12(fp)
   4b938:	10800217 	ldw	r2,8(r2)
   4b93c:	e0fffe17 	ldw	r3,-8(fp)
   4b940:	180d883a 	mov	r6,r3
   4b944:	e17fff17 	ldw	r5,-4(fp)
   4b948:	1009883a 	mov	r4,r2
   4b94c:	00463680 	call	46368 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4b950:	1000021e 	bne	r2,zero,4b95c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4b954:	e0bffd17 	ldw	r2,-12(fp)
   4b958:	00000706 	br	4b978 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4b95c:	e0bffd17 	ldw	r2,-12(fp)
   4b960:	10800017 	ldw	r2,0(r2)
   4b964:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4b968:	e0fffd17 	ldw	r3,-12(fp)
   4b96c:	d0a01b04 	addi	r2,gp,-32660
   4b970:	18bfcc1e 	bne	r3,r2,4b8a4 <__alt_mem_epcs_flash_controller+0xfe0428a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4b974:	0005883a 	mov	r2,zero
}
   4b978:	e037883a 	mov	sp,fp
   4b97c:	dfc00117 	ldw	ra,4(sp)
   4b980:	df000017 	ldw	fp,0(sp)
   4b984:	dec00204 	addi	sp,sp,8
   4b988:	f800283a 	ret

0004b98c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4b98c:	defffc04 	addi	sp,sp,-16
   4b990:	df000315 	stw	fp,12(sp)
   4b994:	df000304 	addi	fp,sp,12
   4b998:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4b99c:	00bffa04 	movi	r2,-24
   4b9a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4b9a4:	e03ffd15 	stw	zero,-12(fp)
   4b9a8:	00001906 	br	4ba10 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   4b9ac:	008001b4 	movhi	r2,6
   4b9b0:	10a01204 	addi	r2,r2,-32696
   4b9b4:	e0fffd17 	ldw	r3,-12(fp)
   4b9b8:	18c00324 	muli	r3,r3,12
   4b9bc:	10c5883a 	add	r2,r2,r3
   4b9c0:	10800017 	ldw	r2,0(r2)
   4b9c4:	10000f1e 	bne	r2,zero,4ba04 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   4b9c8:	008001b4 	movhi	r2,6
   4b9cc:	10a01204 	addi	r2,r2,-32696
   4b9d0:	e0fffd17 	ldw	r3,-12(fp)
   4b9d4:	18c00324 	muli	r3,r3,12
   4b9d8:	10c5883a 	add	r2,r2,r3
   4b9dc:	e0ffff17 	ldw	r3,-4(fp)
   4b9e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4b9e4:	d0e01f17 	ldw	r3,-32644(gp)
   4b9e8:	e0bffd17 	ldw	r2,-12(fp)
   4b9ec:	1880020e 	bge	r3,r2,4b9f8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   4b9f0:	e0bffd17 	ldw	r2,-12(fp)
   4b9f4:	d0a01f15 	stw	r2,-32644(gp)
      }
      rc = i;
   4b9f8:	e0bffd17 	ldw	r2,-12(fp)
   4b9fc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4ba00:	00000606 	br	4ba1c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4ba04:	e0bffd17 	ldw	r2,-12(fp)
   4ba08:	10800044 	addi	r2,r2,1
   4ba0c:	e0bffd15 	stw	r2,-12(fp)
   4ba10:	e0bffd17 	ldw	r2,-12(fp)
   4ba14:	10800810 	cmplti	r2,r2,32
   4ba18:	103fe41e 	bne	r2,zero,4b9ac <__alt_mem_epcs_flash_controller+0xfe0429ac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4ba1c:	e0bffe17 	ldw	r2,-8(fp)
}
   4ba20:	e037883a 	mov	sp,fp
   4ba24:	df000017 	ldw	fp,0(sp)
   4ba28:	dec00104 	addi	sp,sp,4
   4ba2c:	f800283a 	ret

0004ba30 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4ba30:	defffb04 	addi	sp,sp,-20
   4ba34:	df000415 	stw	fp,16(sp)
   4ba38:	df000404 	addi	fp,sp,16
   4ba3c:	e13ffe15 	stw	r4,-8(fp)
   4ba40:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4ba44:	e0bfff17 	ldw	r2,-4(fp)
   4ba48:	10880070 	cmpltui	r2,r2,8193
   4ba4c:	1000021e 	bne	r2,zero,4ba58 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4ba50:	00880004 	movi	r2,8192
   4ba54:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4ba58:	e0fffe17 	ldw	r3,-8(fp)
   4ba5c:	e0bfff17 	ldw	r2,-4(fp)
   4ba60:	1885883a 	add	r2,r3,r2
   4ba64:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4ba68:	e0bffe17 	ldw	r2,-8(fp)
   4ba6c:	e0bffc15 	stw	r2,-16(fp)
   4ba70:	00000506 	br	4ba88 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4ba74:	e0bffc17 	ldw	r2,-16(fp)
   4ba78:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4ba7c:	e0bffc17 	ldw	r2,-16(fp)
   4ba80:	10800804 	addi	r2,r2,32
   4ba84:	e0bffc15 	stw	r2,-16(fp)
   4ba88:	e0fffc17 	ldw	r3,-16(fp)
   4ba8c:	e0bffd17 	ldw	r2,-12(fp)
   4ba90:	18bff836 	bltu	r3,r2,4ba74 <__alt_mem_epcs_flash_controller+0xfe042a74>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4ba94:	e0bffe17 	ldw	r2,-8(fp)
   4ba98:	108007cc 	andi	r2,r2,31
   4ba9c:	10000226 	beq	r2,zero,4baa8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4baa0:	e0bffc17 	ldw	r2,-16(fp)
   4baa4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4baa8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4baac:	0001883a 	nop
   4bab0:	e037883a 	mov	sp,fp
   4bab4:	df000017 	ldw	fp,0(sp)
   4bab8:	dec00104 	addi	sp,sp,4
   4babc:	f800283a 	ret

0004bac0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4bac0:	defffe04 	addi	sp,sp,-8
   4bac4:	df000115 	stw	fp,4(sp)
   4bac8:	df000104 	addi	fp,sp,4
   4bacc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4bad0:	e0bfff17 	ldw	r2,-4(fp)
   4bad4:	10bffe84 	addi	r2,r2,-6
   4bad8:	10c00428 	cmpgeui	r3,r2,16
   4badc:	18001a1e 	bne	r3,zero,4bb48 <alt_exception_cause_generated_bad_addr+0x88>
   4bae0:	100690ba 	slli	r3,r2,2
   4bae4:	00800174 	movhi	r2,5
   4bae8:	10aebe04 	addi	r2,r2,-17672
   4baec:	1885883a 	add	r2,r3,r2
   4baf0:	10800017 	ldw	r2,0(r2)
   4baf4:	1000683a 	jmp	r2
   4baf8:	0004bb38 	rdprs	zero,zero,4844
   4bafc:	0004bb38 	rdprs	zero,zero,4844
   4bb00:	0004bb48 	cmpgei	zero,zero,4845
   4bb04:	0004bb48 	cmpgei	zero,zero,4845
   4bb08:	0004bb48 	cmpgei	zero,zero,4845
   4bb0c:	0004bb38 	rdprs	zero,zero,4844
   4bb10:	0004bb40 	call	4bb4 <sha512_Transform+0x8b8>
   4bb14:	0004bb48 	cmpgei	zero,zero,4845
   4bb18:	0004bb38 	rdprs	zero,zero,4844
   4bb1c:	0004bb38 	rdprs	zero,zero,4844
   4bb20:	0004bb48 	cmpgei	zero,zero,4845
   4bb24:	0004bb38 	rdprs	zero,zero,4844
   4bb28:	0004bb40 	call	4bb4 <sha512_Transform+0x8b8>
   4bb2c:	0004bb48 	cmpgei	zero,zero,4845
   4bb30:	0004bb48 	cmpgei	zero,zero,4845
   4bb34:	0004bb38 	rdprs	zero,zero,4844
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4bb38:	00800044 	movi	r2,1
   4bb3c:	00000306 	br	4bb4c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4bb40:	0005883a 	mov	r2,zero
   4bb44:	00000106 	br	4bb4c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4bb48:	0005883a 	mov	r2,zero
  }
}
   4bb4c:	e037883a 	mov	sp,fp
   4bb50:	df000017 	ldw	fp,0(sp)
   4bb54:	dec00104 	addi	sp,sp,4
   4bb58:	f800283a 	ret

0004bb5c <atexit>:
   4bb5c:	200b883a 	mov	r5,r4
   4bb60:	000f883a 	mov	r7,zero
   4bb64:	000d883a 	mov	r6,zero
   4bb68:	0009883a 	mov	r4,zero
   4bb6c:	004bb701 	jmpi	4bb70 <__register_exitproc>

0004bb70 <__register_exitproc>:
   4bb70:	008001b4 	movhi	r2,6
   4bb74:	10a08704 	addi	r2,r2,-32228
   4bb78:	10c00017 	ldw	r3,0(r2)
   4bb7c:	defff904 	addi	sp,sp,-28
   4bb80:	dc000015 	stw	r16,0(sp)
   4bb84:	1c000c17 	ldw	r16,48(r3)
   4bb88:	dd400515 	stw	r21,20(sp)
   4bb8c:	dd000415 	stw	r20,16(sp)
   4bb90:	dcc00315 	stw	r19,12(sp)
   4bb94:	dc800215 	stw	r18,8(sp)
   4bb98:	dc400115 	stw	r17,4(sp)
   4bb9c:	dfc00615 	stw	ra,24(sp)
   4bba0:	202b883a 	mov	r21,r4
   4bba4:	2823883a 	mov	r17,r5
   4bba8:	3027883a 	mov	r19,r6
   4bbac:	3825883a 	mov	r18,r7
   4bbb0:	1029883a 	mov	r20,r2
   4bbb4:	8000021e 	bne	r16,zero,4bbc0 <__register_exitproc+0x50>
   4bbb8:	1c000d04 	addi	r16,r3,52
   4bbbc:	1c000c15 	stw	r16,48(r3)
   4bbc0:	80800117 	ldw	r2,4(r16)
   4bbc4:	00c007c4 	movi	r3,31
   4bbc8:	1880110e 	bge	r3,r2,4bc10 <__register_exitproc+0xa0>
   4bbcc:	00800134 	movhi	r2,4
   4bbd0:	1098d004 	addi	r2,r2,25408
   4bbd4:	1000021e 	bne	r2,zero,4bbe0 <__register_exitproc+0x70>
   4bbd8:	00bfffc4 	movi	r2,-1
   4bbdc:	00003106 	br	4bca4 <__register_exitproc+0x134>
   4bbe0:	01002304 	movi	r4,140
   4bbe4:	00463400 	call	46340 <malloc>
   4bbe8:	1021883a 	mov	r16,r2
   4bbec:	103ffa26 	beq	r2,zero,4bbd8 <__alt_mem_epcs_flash_controller+0xfe042bd8>
   4bbf0:	10000115 	stw	zero,4(r2)
   4bbf4:	a0800017 	ldw	r2,0(r20)
   4bbf8:	10c00c17 	ldw	r3,48(r2)
   4bbfc:	80c00015 	stw	r3,0(r16)
   4bc00:	14000c15 	stw	r16,48(r2)
   4bc04:	80002215 	stw	zero,136(r16)
   4bc08:	a8001d26 	beq	r21,zero,4bc80 <__register_exitproc+0x110>
   4bc0c:	00000606 	br	4bc28 <__register_exitproc+0xb8>
   4bc10:	a8001b26 	beq	r21,zero,4bc80 <__register_exitproc+0x110>
   4bc14:	80802217 	ldw	r2,136(r16)
   4bc18:	1000091e 	bne	r2,zero,4bc40 <__register_exitproc+0xd0>
   4bc1c:	00800134 	movhi	r2,4
   4bc20:	1098d004 	addi	r2,r2,25408
   4bc24:	103fec26 	beq	r2,zero,4bbd8 <__alt_mem_epcs_flash_controller+0xfe042bd8>
   4bc28:	01004204 	movi	r4,264
   4bc2c:	00463400 	call	46340 <malloc>
   4bc30:	103fe926 	beq	r2,zero,4bbd8 <__alt_mem_epcs_flash_controller+0xfe042bd8>
   4bc34:	10004015 	stw	zero,256(r2)
   4bc38:	10004115 	stw	zero,260(r2)
   4bc3c:	80802215 	stw	r2,136(r16)
   4bc40:	81400117 	ldw	r5,4(r16)
   4bc44:	01000044 	movi	r4,1
   4bc48:	2947883a 	add	r3,r5,r5
   4bc4c:	18c7883a 	add	r3,r3,r3
   4bc50:	10c7883a 	add	r3,r2,r3
   4bc54:	1cc00015 	stw	r19,0(r3)
   4bc58:	2148983a 	sll	r4,r4,r5
   4bc5c:	11404017 	ldw	r5,256(r2)
   4bc60:	290ab03a 	or	r5,r5,r4
   4bc64:	11404015 	stw	r5,256(r2)
   4bc68:	1c802015 	stw	r18,128(r3)
   4bc6c:	00c00084 	movi	r3,2
   4bc70:	a8c0031e 	bne	r21,r3,4bc80 <__register_exitproc+0x110>
   4bc74:	10c04117 	ldw	r3,260(r2)
   4bc78:	1908b03a 	or	r4,r3,r4
   4bc7c:	11004115 	stw	r4,260(r2)
   4bc80:	80800117 	ldw	r2,4(r16)
   4bc84:	10c00044 	addi	r3,r2,1
   4bc88:	10800084 	addi	r2,r2,2
   4bc8c:	1085883a 	add	r2,r2,r2
   4bc90:	1085883a 	add	r2,r2,r2
   4bc94:	80c00115 	stw	r3,4(r16)
   4bc98:	80a1883a 	add	r16,r16,r2
   4bc9c:	84400015 	stw	r17,0(r16)
   4bca0:	0005883a 	mov	r2,zero
   4bca4:	dfc00617 	ldw	ra,24(sp)
   4bca8:	dd400517 	ldw	r21,20(sp)
   4bcac:	dd000417 	ldw	r20,16(sp)
   4bcb0:	dcc00317 	ldw	r19,12(sp)
   4bcb4:	dc800217 	ldw	r18,8(sp)
   4bcb8:	dc400117 	ldw	r17,4(sp)
   4bcbc:	dc000017 	ldw	r16,0(sp)
   4bcc0:	dec00704 	addi	sp,sp,28
   4bcc4:	f800283a 	ret
